@(#)PROGRAM:DoNotDisturb  PROJECT:DoNotDisturb-1
<h: %lu; m: %lu>
hour
minute
match schedule
schedule end
<invalid>
v8@?0
com.apple.donotdisturb.DNDAppInfoService.service.lock
v24@?0@"NSNumber"8@"NSError"16
com.apple.donotdisturb.DNDAuxiliaryStateService
essential
time-sensitive
iPhone
iPod
iPad
Apple TV
Apple Watch
<unknown>
Lifetime expired
User changed state
Override ended by client
Override replaced by client
Server unresponsive
Client unresponsive
Location lifetime expired
Calendar event lifetime expired
DNDErrorDomain
Contact
Favorite
<%@: %p; allowedContactTypes: %@; deniedContactTypes: %@; allowedContactGroups: %@; deniedContactGroups: %@; allowedContacts: %@; deniedContacts: %@; phoneCallBypassSettings: %@>
allowedContacts
deniedContacts
allowedContactTypes
deniedContactTypes
allowedContactGroups
deniedContactGroups
phoneCallBypassSettings
com.apple.donotdisturb.DNDMeDeviceService.service.lock
v24@?0@"DNDMeDeviceState"8@"NSError"16
com.apple.donotdisturb.DNDMeDeviceService
com.apple.donotdisturb.DNDMeDeviceService.call-out
v32@?0@"NSNumber"8@"DNDMeDeviceState"16@"NSError"24
Custom
Default
Sleep
Driving
Fitness
Work
Personal
Reading
Gaming
Mindfulness
moon.fill
bed.double.fill
car.fill
figure.run
person.lanyardcard.fill
person.fill
book.closed.fill
rocket.fill
apple.mindfulness
MODE_NAME_DEFAULT
MODE_NAME_SLEEP
MODE_NAME_DRIVING
MODE_NAME_FITNESS
MODE_NAME_WORK
MODE_NAME_PERSONAL
MODE_NAME_READING
MODE_NAME_GAMING
MODE_NAME_MINDFULNESS
Inclusive
Exclusive
<%@: %p; type: %@; suppressionType: %@; allowedApplicationIdentifiers: %@; deniedApplicationIdentifiers: %@; senderConfiguration: %@; minimumBreakthroughUrgency: %@; hideApplicationBadges: %@; >
type
suppressionType
allowedApplicationIdentifiers
deniedApplicationIdentifiers
senderConfiguration
minimumBreakthroughUrgency
hideApplicationBadges
v24@?0@"DNDContact"8^B16
<%@: %p; UUID: %@; startDate: %@; details: %@; source: %@>
UUID
startDate
details
source
<%@: %p; interruptionBehaviorSetting: %@>
interruptionBehaviorSetting
com.apple.donotdisturb
AuxiliaryState
BehaviorResolution
GlobalConfiguration
ModeAssertion
ModeConfiguration
ModeSelection
RemoteConnection
Settings
State
DNDMeDeviceService.client
unknown
no-device
this-device
other-device
<%@: %p; meDeviceStatus: %@; meDeviceName: %@>
meDeviceStatus
meDeviceName
default
disabled
enabled
none
silence
delay delivery
None
%@%@: {%@%@}
%@{%@%@}
%@%@: object1: %@; object2: %@
%@object1: %@; object2: %@
%llu
added
removed
<%@: %p; dateInterval: %@>
dateInterval
<%@: %p; source: %@; applicationIdentifier: %@; displayName: %@; storeIconURL: %@; cachedIconURL: %@>
applicationIdentifier
displayName
storeIconURL
cachedIconURL
telephony
<none>
v24@?0q8^B16
Every Day
<period: s: %@; e: %@; weekdays: %@>
startTime
endTime
weekdays
tvOS
macOS
watchOS
<%@: %p; bundleID: %@; platform: %@>
bundleID:%@;platform:%@
bundleID
platform
<%@: %p; assertion: %@; invalidationDate: %@; details: %@; source: %@; reason: %@; reasonOverride: %@>
assertion
invalidationDate
reason
reasonOverride
<%@: %p; reason: %@; source: %@; state: %@; previousState: %@>
previousState
state
DeviceClassNumber
<%@: %p; deviceClass: %@; deviceCapabilities: %@>
favorite
contact
contact from group
%@:%@
<%@: %p; clientIdentifier: '%@'; auditUUID: %@; timestamp: %llu>
clientIdentifier
auditUUID
timestamp
com.apple.donotdisturb.DNDAvailabilityService.service.lock
<%@: %p; eventUniqueID: '%@'; occurrenceDate: %@; onlyDuringEvent: %@>
eventUniqueID
occurrenceDate
onlyDuringEvent
<%@: %p; minimumBreakthroughUrgency: %@; allowedThreads: %@; deniedThreads: %@; >
minimumBreakthroughUrgency:%@;
allowedThreads:%@;
deniedThreads:%@;
allowedThreads
deniedThreads
Do Not Disturb
systemIndigoColor
<%@: %p; name: %@; modeIdentifier: %@; symbolImageName: %@; tintColorName: %@; semanticType: %zd; visibility: %lu; identifier: %@; isPlaceHolder: %@>
name
modeIdentifier
symbolImageName
tintColorName
semanticType
visibility
identifier
calendar event
date interval
current-location
schedule
explicit-region
never interrupt
interrupt when unlocked
com.apple.donotdisturb.DNDModeConfigurationService.service.lock
v24@?0@"NSArray"8@"NSError"16
v24@?0@"DNDModeConfiguration"8@"NSError"16
v24@?0@"NSString"8@"NSError"16
v24@?0@"NSArray<__DNDMode__>"8@"NSError"16
com.apple.donotdisturb.mode.driving
com.apple.sleep.sleep-mode
com.apple.donotdisturb.mode.workout
com.apple.donotdisturb.DNDModeConfigurationService
com.apple.donotdisturb.DNDModeConfigurationService.call-out
v32@?0@"NSNumber"8@"DNDModeAssertion"16@"NSError"24
v24@?0@"DNDMode"8^B16
com.apple.focus.gaming
com.apple.focus.mindfulness
No template found for mode identifier.
Mode configuration already exists for mode identifier.
<%@: %p; enabledSetting: %llu>
enabledSetting
<%@: %p; enabledSetting: %llu; region: %@; detail: %@>
region
detail
<%@: %p; enabledSetting: %llu; timePeriod: %@; creationDate: %@>
timePeriod
creationDate
<%@: %p; enabledSetting: %llu; applicationIdentifier: %@>
Allow
Deny
com.apple.donotdisturb.DNDEventBehaviorResolutionService.service.lock
v24@?0@"DNDClientEventBehavior"8@"NSError"16
user action
client action
lifetime
system state
scheduled
automation
local
cloud
paired
<%@: %p; contactIdentifier: %@; firstName: %@; middleName: %@; lastName: %@; nickName: %@; organizationName: %@; phoneNumbers: %@; emailAddresses: %@;>
contactIdentifier:%@;
firstName:%@;
middleName:%@;
lastName:%@;
nickName:%@;
organizationName:%@;
phoneNumbers:%@;
emailAddresses:%@;
contactIdentifier
firstName
middleName
lastName
nickName
organizationName
phoneNumbers
emailAddresses
<%@: %p; eventDetails: %@; interruptionSuppression: %@; resolutionReason: %@; activeModeUUID: %@>
eventDetails
interruptionSuppression
resolutionReason
activeModeUUID
<%@: %p; suppressionState: %@; startDate: %@; userVisibleTransitionDate: %@; userVisibleTransitionLifetimeType: %@; activeModeConfiguration: %@; activeModeIdentifier: %@>
suppressionState
activeModeAssertionMetadata
userVisibleTransitionDate
userVisibleTransitionLifetimeType
activeModeConfiguration
overrideModeIdentifier
<%@: %p; immediateBypassEventSourceType: %@; immediateBypassCNGroupIdentifier: '%@'; repeatEventSourceBehaviorEnabledSetting: %@>
immediateBypassEventSourceType:%@;immediateBypassCNGroupIdentifier:%@;repeatEventSourceBehaviorEnabledSetting:%@
immediateBypassEventSourceType
immediateBypassCNGroupIdentifier
repeatEventSourceBehaviorEnabledSetting
<%@: %p; identifier: '%@'>
inactive
always
while UI locked
com.apple.donotdisturb.mode.default
com.apple.donotdisturb.mode.bedtime
com.apple.donotdisturb.DNDStateService.service.lock
com.apple.donotdisturb.StateService
com.apple.donotdisturb.StateService.call-out
v24@?0@"DNDState"8@"NSError"16
Call
Call-Record
Direct-Message
Group-Message
Time-Sensitive
Essential
Legacy
<%@: %p; identifier: '%@'; bundleIdentifier:: %@; type: %@; urgency: %@; sender: %@; threadIdentifier: %@; notifyAnyway: %d; behavior: %@>
bundleIdentifier
urgency
sender
threadIdentifier
notifyAnyway
behavior
com.apple.donotdisturb.availability.service
dnd.service
v16@?0@"BSServiceConnection<BSServiceConnectionContext>"8
v16@?0@"<BSServiceConnectionConfiguring>"8
DNDModeConfigurationSmartTrigger
<%@: %p; mode: %@; configuration: %@; triggers: %@; impactsAvailability: %@; dimsLockScreen: %@; created: %@; lastModified: %@; automaticallyGenerated: %@; hasSecureData: %@>
<%@: %p; mode: %@; impactsAvailability: %@; dimsLockScreen: %@>
mode
configuration
triggers
impactsAvailability
dimsLockScreen
created
lastModified
automaticallyGenerated
isAutomaticallyGenerated
<%@: %p>
<%@: %p; region: '%@'>
System
Library
LocationBundles
DoNotDisturb.bundle
PrivateFrameworks
DoNotDisturb.framework
com.apple.donotdisturb.system
<%@: %p; clientIdentifier: '%@'; deviceIdentifier: '%@'>
deviceIdentifier
<schedule: enabled: %@; period: %@; bedtime: %@>
scheduleEnabledSetting
bedtimeBehaviorEnabledSetting
<%@: %p; identifier: '%@'; modeIdentifier: '%@'; modeConfigurationModifiedDate: %@; lifetime: %@; reason: %@; userVisibleEndDate: %@>
modeConfigurationModifiedDate
userVisibleEndDate
<%@: %p; scheduleIdentifier: '%@'; behavior: %@>
scheduleIdentifier
com.apple.donotdisturb.ModeAssertionService.call-out
v24@?0@"DNDModeAssertion"8@"NSError"16
v24@?0@"DNDModeAssertionInvalidation"8@"NSError"16
v24@?0@"NSArray<__DNDModeAssertion__>"8@"NSError"16
v20@?0B8@"NSError"12
email
phone
<%@: %p; contactIdentifier: %@; type: %@; value: %@;>
value
com.apple.donotdisturb.DNDModeSelectionService.service.lock
com.apple.donotdisturb.DNDModeSelectionService
com.apple.donotdisturb.DNDModeSelectionService.call-out
User action
Schedule
System state
com.apple.donotdisturb.DNDGlobalConfigurationService.service.lock
prevented
not prevented
Bypass settings are now per mode configuration
v24@?0@"NSDictionary"8@"NSError"16
com.apple.donotdisturb.DNDGlobalConfigurationService
com.apple.donotdisturb.DNDGlobalConfigurationService.callout
prefs:root=DO_NOT_DISTURB
prefs:root=DO_NOT_DISTURB&path=setup
prefs:root=DO_NOT_DISTURB&path=setup&type=%ld
prefs:root=DO_NOT_DISTURB&path=%@
v24@?0@"DNDAppInfo"8@"NSError"16
com.apple.donotdisturb.DNDAppInfoService
com.apple.donotdisturb.schedule.default
<%@: %p; clientIdentifier: '%@'; modeIdentifier: '%@'; lifetimeType: %@; activeDateInterval: %@; userVisibleEndDate: %@>
lifetimeType
activeDateInterval
com.apple.donotdisturb.monitor
com.apple.donotdisturb.service
monitor.registration
com.apple.donotdisturb.service.non-launching
v24@?0@"DNDBehaviorSettings"8@"NSError"16
v24@?0@"DNDScheduleSettings"8@"NSError"16
v24@?0@"NSArray<__DNDModeConfiguration__>"8@"NSError"16
@"NSString"16@?0@"DNDMode"8
device unlocked
always interrupt flag
always bypass
no bypass
group contact
repeat event
emergency contact
mode configuration type
mode configuration for application
mode configuration for application thread
mode configuration for contacts
mode configuration for favorites
mode configuration for contact group
mode configuration for contact
mode configuration urgency
mode configuration notify anyway
display mirrored
display shared
presentation mode
com.apple.donotdisturb.DNDSettingsService.service.lock
com.apple.donotdisturb.SettingsService
com.apple.donotdisturb.SettingsService.call-out
com.apple.donotdisturb.DNDAuxiliaryStateService.setScreenIsShared:screenIsMirrored:
[%{public}@] Set auxiliary state; isScreenShared=%d isScreenMirrored=%d
[%{public}@] Error when setting auxiliary state; error='%{public}@' isScreenShared=%d isScreenMirrored=%d
com.apple.donotdisturb.DNDMeDeviceService.queryCurrentState.async
[%{public}@] Processing async 'Me Device' state request
[%{public}@] Error when getting 'Me Device' state, error='%{public}@'
[%{public}@] Got current 'Me Device' state, meDeviceStatus=%{public}@, meDeviceName=%{public}@
com.apple.donotdisturb.DNDMeDeviceService.addListener
Adding 'Me Device' state update listener: listener=%{public}@
Registered for 'Me Device' state updates: listener=%{public}@
Did not register for 'Me Device' state updates, will remove listener: listener=%{public}@
com.apple.donotdisturb.DNDMeDeviceService.removeListener
Removing 'Me Device' state update listener: listener=%{public}@
com.apple.donotdisturb.DNDMeDeviceService.registerForUpdates
[%{public}@] Registering 'Me Device' state update listener
[%{public}@] Error when registering 'Me Device' state update listener, error='%{public}@'
[%{public}@] Begin configuration
[%{public}@] type: %{public}@; suppressionType: %{public}@; minimumBreakthroughUrgency: %{public}@; hideApplicationBadges: %{public}@
[%{public}@] Allowed app: %{private}@; %{private}@
[%{public}@] Denied app: %{private}@
[%{public}@] senderConfiguration: %{private}@
[%{public}@] End configuration
nil startDate provided to DNDModeAssertion initializer. %@
[%{public}@] Begin diff
[%{public}@] %{private}@
[%{public}@] End diff
com.apple.donotdisturb.DNDAvailabilityService.getIsLocalUserAvailable
[%{public}@] Get user availability, availability=%{public}@
[%{public}@] Error when getting user availability in current mode for contact, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.setModeConfiguration
[%{public}@] Set mode configuration, configuration=%{public}@
[%{public}@] Error when setting mode configuration, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.removeModeConfiguration
[%{public}@] Remove mode configuration, identifier=%{public}@
[%{public}@] Error when removing mode configuration, error='%{public}@'
[%{public}@] Error mode configuration for identifier cannot be removed, identifier=%{public}@
com.apple.donotdisturb.DNDModeConfigurationService.getModeConfigurations
[%{public}@] Get mode configurations
[%{public}@] Error when getting mode configurations, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.getModeConfiguration
[%{public}@] Get mode configuration, identifier=%{public}@
com.apple.donotdisturb.DNDModeConfigurationService.getIsLocalUserAvailable
[%{public}@] Get user availability in current mode for contact, availability=%{public}@, handle=%{private}@
com.apple.donotdisturb.DNDModeConfigurationService.getAllowedModesForContact
[%{public}@] Get allowed modes for contact, handle=%{private}@
com.apple.donotdisturb.DNDModeConfigurationService.publishCurrentStatusKitAvailability
[%{public}@] Request to publish statuskit availability succeeded: %{public}@
[%{public}@] Error when publishing statuskit availability, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.allModes
[%{public}@] Got all modes, modes=%{public}@
com.apple.donotdisturb.DNDModeConfigurationService.availableModes
[%{public}@] Got available modes, modes=%{public}@
com.apple.donotdisturb.DNDModeConfigurationService.getSyncPreferenceEnabled
[%{public}@] Got sync preference enabled=%{public}@
[%{public}@] Error when getting sync preference enabled, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.getSyncAvailable
[%{public}@] Got sync available=%{public}@
[%{public}@] Error when getting sync available, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.getSyncEnabled
[%{public}@] Got sync enabled=%{public}@
[%{public}@] Error when getting sync enabled, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.setSyncPreferenceEnabled
[%{public}@] Set sync preference enabled=%{public}@
[%{public}@] Error when setting sync enabled, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.addListener
Adding update listener: listener=%{public}@
Registered for updates: listener=%{public}@
Did not register for updates, will remove listener: listener=%{public}@
com.apple.donotdisturb.DNDModeConfigurationService.removeListener
Removing update listener: listener=%{public}@
received updated available mode identifiers: identifiers=%{public}@
com.apple.donotdisturb.DNDModeConfigurationService.syncModeConfigurations
[%{public}@] Synced mode configurations
com.apple.donotdisturb.DNDModeConfigurationService.createDefaultDrivingModeConfiguration
[%{public}@] Creating Driving mode configuration from template
com.apple.donotdisturb.DNDModeConfigurationService.createDefaultSleepingModeConfiguration
[%{public}@] Creating Sleeping mode configuration from template
com.apple.donotdisturb.DNDModeConfigurationService.createDefaultWorkoutModeConfiguration
[%{public}@] Creating Workout mode configuration from template
com.apple.donotdisturb.DNDModeConfigurationService.createModeConfigurationUsingTemplateForModeIdentifier
[%{public}@] Creating mode configuration from template for identifier: identifier=%{pubic}@
com.apple.donotdisturb.DNDModeConfigurationService.registerForUpdates
[%{public}@] Registering update listener
[%{public}@] Error when registering update listener, error='%{public}@'
com.apple.donotdisturb.DNDEventBehaviorResolutionService.resolveEvent
[%{public}@] Resolving behavior for event, details=%@
[%{public}@] Error when resolving behavior, error='%{public}@'
[%{public}@] Resolved event, details=%@ behavior=%@
%{public}@ normalizing phonenumber %{private}@
%{public}@ couldnt normalize phonenumber %{private}@
com.apple.donotdisturb.DNDStateService.queryCurrentState.async
[%{public}@] Processing async state request
[%{public}@] Error when getting state, error='%{public}@'
[%{public}@] Got current state, state=%{public}@
com.apple.donotdisturb.DNDStateService.queryCurrentState
[%{public}@] Processing state request
com.apple.donotdisturb.DNDStateService.addStateUpdateListener
Adding state update listener: listener=%{public}@
Registered for state updates: listener=%{public}@
Did not register for state updates, will remove listener: listener=%{public}@
com.apple.donotdisturb.DNDStateService.removeStateUpdateListener
Removing state update listener: listener=%{public}@
com.apple.donotdisturb.DNDStateService.registerForStateUpdates
[%{public}@] Registering state update listener
[%{public}@] Error when registering state update listener, error='%{public}@'
XPC request connection was activated: connection=%p
XPC request connection was interrupted: connection=%p
XPC request connection was invalidated, cannot recover: connection=%p
[%{public}@] Begin: %{public}@
[%{public}@] %{public}@
[%{public}@] created: %{public}@; lastModified: %{public}@; isAutomaticallyGenerated: %{public}d; hasSecureData: %{public}d; 
[%{public}@] triggers: %{private}@
[%{public}@] End
com.apple.donotdisturb.DNDModeAssertionService.takeModeAssertion
[%{public}@] Taking mode assertion; details=%{public}@
[%{public}@] Error when taking mode assertion, error='%{public}@'
[%{public}@] Took mode assertion, assertion=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.invalidateActiveModeAssertion
[%{public}@] Invalidating active mode assertion
[%{public}@] Error when invalidating mode assertion, error='%{public}@'
[%{public}@] Invalidated mode assertion, invalidation=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.activeModeAssertion
[%{public}@] Getting active mode assertion
[%{public}@] Error when requesting active mode assertion, error='%{public}@'
[%{public}@] Got mode assertion, assertion=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.latestModeAssertionInvalidation
[%{public}@] Getting latest mode assertion invalidation
[%{public}@] Error when requesting latest mode assertion invalidation, error='%{public}@'
[%{public}@] Got invalidation, invalidation=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.invalidateAllActiveModeAssertions
[%{public}@] Invalidating all active mode assertions
[%{public}@] Error when invalidating all active mode assertions, error='%{public}@'
[%{public}@] Invalidated all active mode assertions, success=%{BOOL}u
com.apple.donotdisturb.DNDModeAssertionService.allModeAssertionsWithError
[%{public}@] Requesting all active mode assertions
[%{public}@] Error when requesting all active mode assertions, error='%{public}@'
[%{public}@] Requested all active mode assertions, success=%{BOOL}u
com.apple.donotdisturb.DNDModeAssertionService.addAssertionUpdateListener
[%{public}@] Adding assertion update listener: listener=%{public}@
[%{public}@] Registered for assertion updates: listener=%{public}@
[%{public}@] Did not register for assertion updates, will remove listener: listener=%{public}@, error=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.removeAssertionUpdateListener
[%{public}@] Removing assertion update listener: listener=%{public}@
[%{public}@] Remote service got assertion change: service=%{public}@, assertion=%{public}@, invalidation=%{public}@
[%{public}@] Will deliver assertion invalidation to listener: invalidation=%{public}@, listener=%{public}@
[%{public}@] Will deliver assertion change to listener: assertion=%{public}@, listener=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.registerForAssertionUpdates
[%{public}@] Registering assertion update listener
com.apple.donotdisturb.DNDModeSelectionService.activateModeWithIdentifier
[%{public}@] Activate mode with identifier, modeIdentifier=%{public}@
[%{public}@] Error when setting mode with identifier, modeIdentifier=%{public}@ error='%{public}@'
com.apple.donotdisturb.DNDModeSelectionService.invalidateModeAssertionWithUUID
[%{public}@] Invalidate mode assertion with UUID, assertionUUID=%{public}@
[%{public}@] Error when invalidating mode assertion with UUID, assertionUUID=%{public}@ error='%{public}@'
com.apple.donotdisturb.DNDModeSelectionService.activeModeAssertion
[%{public}@] Getting active mode assertion; not restricted by client identifier
com.apple.donotdisturb.DNDModeSelectionService.addListener
com.apple.donotdisturb.DNDModeSelectionService.removeListener
com.apple.donotdisturb.DNDModeSelectionService.registerForUpdates
[%{public}@] Error when registering mode selection update listener, error='%{public}@'
com.apple.donotdisturb.DNDGlobalConfigurationService.getPreventAutoReply
[%{public}@] Auto reply is %{public}@
[%{public}@] Error when getting prevent-auto-reply state, error='%{public}@'
com.apple.donotdisturb.DNDGlobalConfigurationService.setPreventAutoReply
[%{public}@] Set auto reply to %{public}@
[%{public}@] Error when setting prevent-auto-reply state, error='%{public}@'
Bypass settings are now per mode configuration
com.apple.donotdisturb.DNDModeConfigurationService.getCloudSyncState
[%{public}@] Got cloud sync state=%{public}@
[%{public}@] Error when getting cloud sync state, error='%{public}@'
[%{public}@] Set cloud sync preference enabled=%{public}@
[%{public}@] Error when setting cloud sync enabled, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.getPairSyncState
[%{public}@] Got pair sync state=%{public}@
[%{public}@] Error when getting pair sync state, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.setPairSyncPreferenceEnabled
[%{public}@] Set pair sync preference enabled=%{public}@
[%{public}@] Error when setting pair sync enabled, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.didChangeFocusStatusSharingSettingForApplicationIdentifier
[%{public}@] Signaled change to focus status sharing setting, applicationIdentifier=%{public}@ success=%{public}@
[%{public}@] Error when signaling change to focus status sharing setting, applicationIdentifier=%{public}@ error='%{public}@'
com.apple.donotdisturb.DNDGlobalConfigurationService.addListener
com.apple.donotdisturb.DNDGlobalConfigurationService.removeListener
com.apple.donotdisturb.DNDModeConfigurationService.getStateDump
[%{public}@] Got state dump
[%{public}@] Error when getting state dump, error='%{public}@'
com.apple.donotdisturb.DNDGlobalConfigurationService.registerForUpdates
com.apple.donotdisturb.DNDAppInfoService.getAppInfoForBundleIdentifier
[%{public}@] App info is %{private}@
[%{public}@] Error when getting app info, error='%{public}@'
com.apple.donotdisturb.DNDAppInfoService.getAppInfoForBundleIdentifiers
XPC monitor connection was activated: connection=%p
Remote service connection failed to register for assertion updates on activation: requestDetails=%{public}@, error=%{public}@
Remote service connection failed to register for state updates on activation: requestDetails=%{public}@, error=%{public}@
Remote service connection failed to register for settings updates on activation: requestDetails=%{public}@, error=%{public}@
Remote service connection failed to register for available mode identifier updates on activation: requestDetails=%{public}@, error=%{public}@
Remote service connection failed to register for global configuration updates on activation: requestDetails=%{public}@, error=%{public}@
Remote service connection failed to register for 'Me Device' state updates on activation: requestDetails=%{public}@, error=%{public}@
XPC monitor connection was interrupted, reactivating: connection=%p
XPC monitor connection was invalidated, cannot recover: connection=%p
Remote service connection got assertion update: assertion=%{public}@, invalidation=%{public}@, clientIdentifiers=%{public}@
com.apple.donotdisturb.DNDSettingsService.behaviorSettings
[%{public}@] Error when getting behavior settings, error='%{public}@'
[%{public}@] Got behavior settings, settings=%{public}@
com.apple.donotdisturb.DNDSettingsService.setBehaviorSettings
[%{public}@] Set behavior settings, settings=%{public}@
[%{public}@] Error setting behavior settings, settings=%{public}@, error='%{public}@'
com.apple.donotdisturb.DNDSettingsService.scheduleSettings
[%{public}@] Error when getting schedule settings, error='%{public}@'
[%{public}@] Got schedule settings, settings=%{public}@
com.apple.donotdisturb.DNDSettingsService.setScheduleSettings
[%{public}@] Set schedule settings, settings=%{public}@
[%{public}@] Error setting schedule settings, settings=%{public}@, error='%{public}@'
com.apple.donotdisturb.DNDSettingsService.addSettingsUpdateListener
Adding settings update listener: listener=%{public}@
Registered for settings updates: listener=%{public}@
Did not register for settings updates, will remove listener: listener=%{public}@
com.apple.donotdisturb.DNDSettingsService.removeSettingsUpdateListener
Removing settings update listener: listener=%{public}@
com.apple.donotdisturb.DNDSettingsService.registerForSettingsUpdates
[%{public}@] Registering settings update listener
[%{public}@] Error when registering settings update listener, error='%{public}@'
DNDScheduleTime
NSCopying
NSMutableCopying
NSSecureCoding
NSCoding
DNDMutableScheduleTime
DNDAuxiliaryStateService
DNDSenderConfiguration
DNDMutableSenderConfiguration
DNDMeDeviceService
DNDRemoteServiceConnectionEventListener
NSObject
DNDConfiguration
DNDMutableConfiguration
DNDModeAssertion
DNDBehaviorSettings
DNDMutableBehaviorSettings
Deprecated
DNDMeDeviceState
DNDDiffBuilder
DiffBuilding
DNDModeAssertionDateIntervalLifetime
DNDAppInfo
DNDMutableAppInfo
DNDScheduleTimePeriod
DNDMutableScheduleTimePeriod
DNDApplicationIdentifier
DNDModeAssertionInvalidation
DNDStateUpdate
DNDDevice
DNDModeAssertionLifetime
DNDRequestDetails
DNDAvailabilityService
DNDModeAssertionCalendarEventLifetime
DNDApplicationConfiguration
DNDMutableApplicationConfiguration
DNDMode
DNDMutableMode
DateComponents
DNDModeConfigurationService
DNDModeConfigurationTrigger
DNDModeConfigurationLocationTrigger
DNDModeConfigurationScheduleTrigger
DNDModeConfigurationAppForegroundTrigger
DNDModeConfigurationDrivingTrigger
DNDModeConfigurationGameControllerTrigger
DNDModeConfigurationSleepingTrigger
DNDModeConfigurationSmartTrigger
DNDModeConfigurationWorkoutTrigger
DNDModeConfigurationMindfulnessTrigger
DNDModeConfigurationScreenActivityTrigger
DNDEventBehaviorResolutionService
DNDContact
DNDMutableContact
DNDClientEventBehavior
DNDState
DNDBypassSettings
DNDMutableBypassSettings
DNDModeAssertionInvalidationDetails
DNDMutableModeAssertionInvalidationDetails
DNDStateService
DeprecatedUpdateListener
DNDClientEventDetails
DNDMutableClientEventDetails
DNDRemoteAvailabilityServiceServerProtocol
DNDRemoteAvailabilityServiceConnection
DNDModeConfiguration
DNDDiffBuilding
DNDMutableModeConfiguration
DoNotDisturb
DNDModeAssertionCurrentLocationLifetime
DNDModeAssertionExplicitRegionLifetime
DNDModeAssertionSource
DNDModeAssertionUserRequestedLifetime
DNDScheduleSettings
DNDMutableScheduleSettings
DNDModeAssertionDetails
DNDMutableModeAssertionDetails
DNDModeAssertionScheduleLifetime
DNDModeAssertionService
DNDContactHandle
DNDMutableContactHandle
DNDModeSelectionService
DNDGlobalConfigurationService
DNDAppInfoService
DNDStateModeAssertionMetadata
DNDRemoteMonitorServerProtocol
DNDRemoteMonitorServerModeAssertionProtocol
DNDRemoteMonitorServerStateProtocol
DNDRemoteMonitorServerSettingsProtocol
DNDRemoteMonitorServerModeSelectionProtocol
DNDRemoteMonitorServerGlobalConfigurationProtocol
DNDRemoteMonitorServerMeDeviceStateProtocol
DNDRemoteServiceClientProtocol
DNDRemoteServiceClientModeAssertionProtocol
DNDRemoteServiceClientStateProtocol
DNDRemoteServiceClientSettingsProtocol
DNDRemoteServiceClientModeSelectionProtocol
DNDRemoteServiceClientGlobalConfigurationProtocol
DNDRemoteServiceClientMeDeviceStateProtocol
DNDRemoteServiceServerProtocol
DNDRemoteServiceServerBehaviorResolutionProtocol
DNDRemoteServiceServerModeAssertionProtocol
DNDRemoteServiceServerStateProtocol
DNDRemoteServiceServerSettingsProtocol
DNDRemoteServiceServerModeConfigurationProtocol
DNDRemoteServiceServerModeSelectionProtocol
DNDRemoteServiceServerGlobalConfigurationProtocol
DNDRemoteServiceServerAppInfoProtocol
DNDRemoteServiceServerMeDeviceStateProtocol
DNDRemoteServiceServerAuxiliaryStateProtocol
DNDRemoteServiceConnection
DNDSettingsService
_initWithHour:minute:
_initWithTime:
hour
minute
init
stringWithFormat:
decodeIntegerForKey:
encodeInteger:forKey:
defaultStartTime
defaultEndTime
supportsSecureCoding
copyWithZone:
mutableCopyWithZone:
encodeWithCoder:
initWithCoder:
TB,R
hash
isEqual:
description
_hour
_minute
TQ,R,N,V_hour
TQ,R,N,V_minute
setHour:
setMinute:
TQ,D,N
mapTableWithKeyOptions:valueOptions:
objectForKey:
_initWithClientIdentifier:
setObject:forKey:
detailsRepresentingNowWithClientIdentifier:
sharedInstance
numberWithBool:
boolValue
setScreenIsShared:screenIsMirrored:withRequestDetails:completionHandler:
copy
initialize
serviceForClientIdentifier:
setScreenIsShared:screenIsMirrored:error:
.cxx_destruct
_queue
_clientIdentifier
_initWithAllowedContactTypes:deniedContactTypes:allowedContactGroups:deniedContactGroups:allowedContacts:deniedContacts:phoneCallBypassSettings:
mutableCopy
allowedContactTypes
deniedContactTypes
allowedContactGroups
deniedContactGroups
allowedContacts
deniedContacts
phoneCallBypassSettings
_descriptionForRedacted:
_redactedDescriptionsForContacts:
countByEnumeratingWithState:objects:count:
redactedDescription
addObject:
diffObject:againstObject:withDescription:
arrayWithObjects:count:
setWithArray:
decodeObjectOfClasses:forKey:
decodeObjectOfClass:forKey:
encodeObject:forKey:
_evaluatedBypassSettings:
immediateBypassEventSourceType
immediateBypassCNGroupIdentifier
setImmediateBypassEventSourceType:
diffAgainstObject:usingDiffBuilder:withDescription:
_allowedContactTypes
_deniedContactTypes
_allowedContactGroups
_deniedContactGroups
_allowedContacts
_deniedContacts
_phoneCallBypassSettings
T@"NSSet",R,C,N,V_allowedContactTypes
T@"NSSet",R,C,N,V_deniedContactTypes
T@"NSSet",R,C,N,V_allowedContactGroups
T@"NSSet",R,C,N,V_deniedContactGroups
T@"NSSet",R,C,N,V_allowedContacts
T@"NSSet",R,C,N,V_deniedContacts
T@"DNDBypassSettings",R,C,N,V_phoneCallBypassSettings
matchesContact:
removeObject:
setAllowedContactTypes:
setDeniedContactTypes:
setAllowedContactGroups:
setDeniedContactGroups:
setAllowedContacts:
setDeniedContacts:
setPhoneCallBypassSettings:
removeAllowedContactMatchingContact:
removeDeniedContactMatchingContact:
T@"NSMutableSet",C,D,N
T@"DNDBypassSettings",C,D,N
meDeviceStatus
meDeviceName
initWithStatus:name:
queryMeDeviceStateWithRequestDetails:completionHandler:
_queue_registerForStateUpdatesIfRequired
meDeviceService:didReceiveMeDeviceState:
hashTableWithOptions:
addEventListener:
count
registerForMeDeviceStateUpdatesWithRequestDetails:completionHandler:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
clientIdentifier
remoteService:didReceiveDoNotDisturbStateUpdate:
remoteService:didChangeActiveModeAssertion:invalidation:
remoteService:didReceiveUpdatedBehaviorSettings:
remoteService:didReceiveUpdatedScheduleSettings:
remoteService:didReceiveUpdatedPairSyncState:
remoteService:didReceiveUpdatedPhoneCallBypassSettings:
remoteService:didReceiveUpdatedPreventAutoReplySetting:
remoteService:didReceiveUpdatedActiveModeAssertion:stateUpdate:
remoteService:didReceiveUpdatedAvailableModes:
remoteService:didReceiveUpdatedAvailableModeIdentifiers:
remoteService:didReceiveUpdatedModes:
remoteService:didReceiveUpdatedModeIdentifiers:
remoteService:didReceiveUpdatedMeDeviceState:
T@"NSString",R,C,N
queryCurrentStateWithCompletionHandler:
addListener:withCompletionHandler:
removeListener:
_calloutQueue
_listeners
_registeredForUpdates
T@"NSString",R,C,N,V_clientIdentifier
dnd_doNotDisturbLocalizationBundle
localizedStringForKey:value:table:
defaultSuppressionType
defaultMinimumBreakthroughUrgency
_initWithConfigurationType:suppressionType:allowedApplicationIdentifiers:deniedApplicationIdentifiers:senderConfiguration:minimumBreakthroughUrgency:hideApplicationBadges:
dictionary
objectForKeyedSubscript:
bundleID
setObject:forKeyedSubscript:
type
suppressionType
allowedApplicationIdentifiers
deniedApplicationIdentifiers
senderConfiguration
minimumBreakthroughUrgency
hideApplicationBadges
numberWithUnsignedInteger:
containsValueForKey:
initWithBundleID:
_exceptionForApplicationIdentifier:thread:
allowedThreads
containsObject:
deniedThreads
exceptionForContactHandle:
matchesContactHandle:
enumerateObjectsUsingBlock:
defaultConfigurationType
_initWithConfigurationType:
allowedApplications
deniedApplications
log:withPrefix:
exceptionForApplication:
exceptionForApplication:thread:
exceptionForApplicationIdentifier:
exceptionForApplicationIdentifier:thread:
exceptionForContact:
_type
_suppressionType
_allowedApplicationIdentifiers
_deniedApplicationIdentifiers
_senderConfiguration
_minimumBreakthroughUrgency
_hideApplicationBadges
TQ,R,N,V_type
TQ,R,N,V_suppressionType
T@"NSDictionary",R,C,N,V_allowedApplicationIdentifiers
T@"NSSet",R,C,N,V_deniedApplicationIdentifiers
T@"DNDSenderConfiguration",R,C,N,V_senderConfiguration
TQ,R,N,V_minimumBreakthroughUrgency
TQ,R,N,V_hideApplicationBadges
T@"NSDictionary",R,C,N
T@"NSSet",R,C,N
configurationOfType:
defaultConfiguration
removeObjectForKey:
removeExceptionForApplicationIdentifier:
_configurationForApplicationIdentifier:
removeExceptionForApplicationIdentifier:thread:
setMinimumBreakthroughUrgency:
setExceptionOfType:forApplicationIdentifier:
setExceptionOfType:forApplicationIdentifier:thread:
setMinimumBreakthroughUrgency:forApplicationIdentifier:
removeExceptionForContactType:
removeExceptionForContactGroup:
removeExceptionForContact:
setSuppressionType:
setAllowedApplicationIdentifiers:
setDeniedApplicationIdentifiers:
setAllowedApplications:
setDeniedApplications:
setSenderConfiguration:
setHideApplicationBadges:
setExceptionOfType:forApplication:
removeExceptionForApplication:
setExceptionOfType:forApplication:thread:
removeExceptionForApplication:thread:
setMinimumBreakthroughUrgency:forApplication:
setExceptionOfType:forContactType:
setExceptionOfType:forContactGroup:
setExceptionOfType:forContact:
hasSecureData
T@"NSDictionary",C,D,N
T@"NSSet",C,D,N
T@"DNDSenderConfiguration",C,D,N
distantPast
UUID
startDate
details
source
initWithUUID:startDate:details:source:
_UUID
_startDate
_details
_source
T@"NSUUID",R,C,N,V_UUID
T@"NSDate",R,C,N,V_startDate
T@"DNDModeAssertionDetails",R,C,N,V_details
T@"DNDModeAssertionSource",R,C,N,V_source
_initWithSettings:
interruptionBehaviorSetting
_initWithInterruptionBehaviorSetting:
_interruptionBehaviorSetting
TQ,R,N,V_interruptionBehaviorSetting
setInterruptionBehaviorSetting:
interruptionBehavior
TQ,R,D,N
setInterruptionBehavior:
_meDeviceStatus
_meDeviceName
TQ,R,N,V_meDeviceStatus
T@"NSString",R,C,N,V_meDeviceName
stringByPaddingToLength:withString:startingAtIndex:
string
descriptionWithIndent:
appendFormat:
diffDescription
array
componentsSeparatedByString:
children
hasDifferences
diffObject:againstObject:
object1
object2
_children
_object1
_object2
_description
T@,R,N,V_object1
T@,R,N,V_object2
T@"NSString",R,C,N,V_description
T@"NSArray",R,C,N
TB,R,N
objectAtIndexedSubscript:
minusSet:
allKeys
intersectSet:
_init
containsDate:
endDate
compare:
dateInterval
initWithDateInterval:
isActiveForDate:
lifetimeType
_dateInterval
T@"NSDateInterval",R,C,N,V_dateInterval
applicationIdentifier
displayName
storeIconURL
cachedIconURL
initWithSource:applicationIdentifier:displayName:storeIconURL:cachedIconURL:
numberWithInteger:
absoluteString
path
allocWithZone:
_initWithAppInfo:
URLWithString:
fileURLWithPath:
_applicationIdentifier
_displayName
_storeIconURL
_cachedIconURL
Tq,R,N,V_source
T@"DNDApplicationIdentifier",R,C,N,V_applicationIdentifier
T@"NSString",R,C,N,V_displayName
T@"NSURL",R,C,N,V_storeIconURL
T@"NSURL",R,C,N,V_cachedIconURL
setSource:
setStoreIconURL:
setCachedIconURL:
setDisplayName:
setApplicationIdentifier:
Tq,D,N
T@"DNDApplicationIdentifier",C,D,N
T@"NSString",C,D,N
T@"NSURL",C,D,N
componentsJoinedByString:
calendarWithIdentifier:
firstWeekday
appendString:
_initWithPeriod:
startTime
endTime
weekdays
_initWithStartTime:endTime:weekdays:
_startTime
_endTime
_weekdays
T@"DNDScheduleTime",R,C,N,V_startTime
T@"DNDScheduleTime",R,C,N,V_endTime
TQ,R,N,V_weekdays
setStartTime:
setEndTime:
setWeekdays:
T@"DNDScheduleTime",C,D,N
initWithBundleID:platform:
platform
_bundleID
_platform
T@"NSString",R,C,N,V_bundleID
TQ,R,N,V_platform
assertion
invalidationDate
reason
reasonOverride
initWithAssertion:invalidationDate:details:source:reason:reasonOverride:
_assertion
_invalidationDate
_reason
_reasonOverride
T@"DNDModeAssertionInvalidationDetails",R,C,N,V_details
TQ,R,N,V_reasonOverride
T@"DNDModeAssertion",R,C,N,V_assertion
T@"NSDate",R,C,N,V_invalidationDate
TQ,R,N,V_reason
previousState
state
initWithPreviousState:state:reason:source:
_previousState
_state
T@"DNDState",R,C,N,V_previousState
T@"DNDState",R,C,N,V_state
deviceWithClass:deviceCapabilities:
_initWithClass:deviceCapabilities:
deviceClass
deviceCapabilities
currentDevice
_deviceClass
_deviceCapabilities
TQ,R,N,V_deviceClass
TQ,R,N,V_deviceCapabilities
date
initWithStartDate:duration:
lifetimeWithDateInterval:
initWithEventUniqueID:occurrenceDate:onlyDuringEvent:
initWithScheduleIdentifier:behavior:
initWithRegion:
doesNotRecognizeSelector:
setWithObjects:
lifetimeWithDuration:
lifetimeWithCurrentLocation
lifetimeUntilEndOfCalendarEventWithUniqueID:occurrenceDate:
lifetimeWithCalendarEventUniqueID:occurrenceDate:
lifetimeMatchingScheduleWithIdentifier:
lifetimeUntilEndOfScheduleWithIdentifier:
lifetimeWithExplicitRegion:
lifetimeForUserRequest
_secureCodingLifetimeClasses
initWithClientIdentifier:auditUUID:timestamp:
timestamp
auditUUID
decodeInt64ForKey:
encodeInt64:forKey:
_auditUUID
_timestamp
T@"NSUUID",R,C,N,V_auditUUID
TQ,R,N,V_timestamp
getIsLocalUserAvailableWithRequestDetails:completionHandler:
isLocalUserAvailableReturningError:
eventUniqueID
occurrenceDate
isOnlyDuringEvent
decodeBoolForKey:
encodeBool:forKey:
_onlyDuringEvent
_eventUniqueID
_occurrenceDate
T@"NSString",R,C,N,V_eventUniqueID
T@"NSDate",R,C,N,V_occurrenceDate
onlyDuringEvent
TB,R,N,GisOnlyDuringEvent,V_onlyDuringEvent
_initWithMinimumBreakthroughUrgency:allowedThreads:deniedThreads:
_allowedThreads
_deniedThreads
T@"NSSet",R,C,N,V_allowedThreads
T@"NSSet",R,C,N,V_deniedThreads
setAllowedThreads:
setDeniedThreads:
defaultTintColorName
initWithName:modeIdentifier:symbolImageName:tintColorName:semanticType:
name
modeIdentifier
symbolImageName
tintColorName
semanticType
identifier
initWithName:modeIdentifier:symbolImageName:tintColorName:semanticType:visibility:identifier:
_name
visibility
dnd_settingsURLWithModeIdentifier:
dnd_setupURLWithSemanticType:
UUIDString
isPlaceholder
_initWithMode:
maxUIAddableModes
defaultMode
placeholderModeFromMode:
settingsURL
setupURL
_symbolImageName
_tintColorName
_modeIdentifier
_semanticType
_visibility
_identifier
T@"NSString",R,C,N,V_symbolImageName
T@"NSString",R,C,N,V_tintColorName
T@"NSString",R,C,N,V_name
Tq,R,N,V_semanticType
T@"NSString",R,C,N,V_modeIdentifier
T@"NSUUID",R,C,N,V_identifier
placeholder
TB,D,N,GisPlaceholder
TQ,R,N,V_visibility
T@"NSURL",R,C,N
setTintColorName:
setSymbolImageName:
setName:
setSecond:
dateComponents
setModeConfiguration:withRequestDetails:completionHandler:
canRemoveModeConfigurationForModeIdentifier:
removeModeConfigurationForModeIdentifier:withRequestDetails:completionHandler:
isEqualToString:
mode
getModeConfigurationsWithRequestDetails:completionHandler:
getModeConfigurationForModeIdentifier:withRequestDetails:completionHandler:
getUserAvailabilityInActiveModeForContactHandle:withRequestDetails:completionHandler:
getAllowedModesForContactHandle:withRequestDetails:completionHandler:
publishStatusKitAvailabilityWithRequestDetails:completionHandler:
getAllModesWithRequestDetails:completionHandler:
getAvailableModesWithRequestDetails:completionHandler:
unsignedIntegerValue
getCloudSyncStateWithRequestDetails:completionHandler:
setCloudSyncPreferenceEnabled:withRequestDetails:completionHandler:
_queue_registerForUpdatesIfRequired
modeConfigurationService:didReceiveAvailableModesUpdate:
syncModeConfigurationsWithRequestDetails:completionHandler:
_createDefaultModeConfigurationForIdentifier:withRequestDetails:error:
registerForModeSelectionUpdatesWithRequestDetails:completionHandler:
allModesReturningError:
initWithEnabledSetting:
initWithMode:configuration:triggers:
setDimsLockScreen:
setAutomaticallyGenerated:
setModeConfiguration:error:
dictionaryWithObjects:forKeys:count:
errorWithDomain:code:userInfo:
removeModeConfigurationForModeIdentifier:error:
modeConfigurationsReturningError:
modeConfigurationForModeIdentifier:error:
isLocalUserAvailableForContactInActiveMode:error:
allowedModesForContactHandle:error:
publishCurrentStatusKitAvailabilityReturningError:
availableModesReturningError:
getSyncPreferenceEnabledReturningError:
getSyncAvailableReturningError:
getSyncEnabledReturningError:
setSyncPreferenceEnabled:error:
syncModeConfigurationsReturningError:
createDefaultDrivingModeConfigurationWithError:
createDefaultSleepingModeConfigurationWithError:
createDefaultWorkoutModeConfigurationWithError:
createModeConfigurationUsingTemplateForModeIdentifier:error:
enabledSetting
isEnabled
_enabledSetting
TQ,R,N,V_enabledSetting
region
detail
initWithRegion:detail:enabledSetting:
_region
_detail
T@"CLCircularRegion",R,C,N,V_region
T@"NSString",R,C,N,V_detail
initWithTimePeriod:creationDate:enabledSetting:
timePeriod
creationDate
defaultScheduleTrigger
triggerWithClientTrigger:creationDate:
initWithTimePeriod:enabledSetting:
_timePeriod
_creationdate
_creationDate
T@"NSDate",R,C,N,V_creationDate
T@"DNDScheduleTimePeriod",R,C,N,V_timePeriod
initWithApplicationIdentifier:enabledSetting:
initWithBundleIdentifier:enabledSetting:
bundleIdentifier
resolveBehaviorForEventDetails:requestDetails:completionHandler:
resolveBehaviorForEventDetails:error:
currentLocale
_initWithContactIdentifier:firstName:middleName:lastName:nickName:organizationName:phoneNumbers:emailAddresses:
contactIdentifier
firstName
middleName
lastName
nickName
organizationName
phoneNumbers
emailAddresses
normalizePhoneNumber:
normalizedPhoneNumbers
value
dnd_privacyObfuscatedString
_redactedDescriptionsForStrings:
length
initWithContactIdentifier:
_contactIdentifier
_firstName
_middleName
_lastName
_nickName
_organizationName
_phoneNumbers
_emailAddresses
T@"NSString",R,C,N,V_contactIdentifier
T@"NSString",R,C,N,V_firstName
T@"NSString",R,C,N,V_middleName
T@"NSString",R,C,N,V_lastName
T@"NSString",R,C,N,V_nickName
T@"NSString",R,C,N,V_organizationName
T@"NSSet",R,C,N,V_phoneNumbers
T@"NSSet",R,C,N,V_emailAddresses
setContactIdentifier:
setFirstName:
setMiddleName:
setLastName:
setNickName:
setOrganizationName:
setPhoneNumbers:
setEmailAddresses:
eventDetails
interruptionSuppression
resolutionReason
activeModeUUID
initWithEventDetails:interruptionSuppression:resolutionReason:activeModeUUID:
_eventDetails
_interruptionSuppression
_resolutionReason
_activeModeUUID
TQ,R,N,V_resolutionReason
T@"NSUUID",R,C,N,V_activeModeUUID
T@"DNDClientEventDetails",R,C,N,V_eventDetails
TQ,R,N,V_interruptionSuppression
suppressionState
activeModeAssertionMetadata
allObjects
activeModeConfiguration
userVisibleTransitionDate
userVisibleTransitionLifetimeType
shortDescription
activeModeIdentifier
initWithSuppressionState:activeModeAssertionMetadata:startDate:userVisibleTransitionDate:userVisibleTransitionLifetimeType:activeModeConfiguration:
setOverrideModeIdentifier:
isActive
activeModeIdentifiers
_activeModeAssertionMetadata
_overrideModeIdentifier
_suppressionState
_userVisibleTransitionDate
_userVisibleTransitionLifetimeType
_activeModeConfiguration
T@"NSUUID",R,C,D,N
TQ,R,N,V_suppressionState
T@"NSArray",R,C,D,N
T@"NSString",R,C,D,N
T@"DNDModeConfiguration",R,C,N,V_activeModeConfiguration
T@"NSDate",R,C,N,V_userVisibleTransitionDate
TQ,R,N,V_userVisibleTransitionLifetimeType
active
TB,R,D,N,GisActive
willSuppressInterruptions
TB,R,D,N
repeatEventSourceBehaviorEnabledSetting
_initWithImmediateBypassEventSourceType:immediateBypassCNGroupIdentifier:repeatEventSourceBehaviorEnabledSetting:
_immediateBypassEventSourceType
_immediateBypassCNGroupIdentifier
_repeatEventSourceBehaviorEnabledSetting
TQ,R,N,V_immediateBypassEventSourceType
T@"NSString",R,C,N,V_immediateBypassCNGroupIdentifier
TQ,R,N,V_repeatEventSourceBehaviorEnabledSetting
setImmediateBypassCNGroupIdentifier:
setRepeatEventSourceBehaviorEnabledSetting:
_initWithDetails:
_initWithIdentifier:
T@"NSString",R,C,N,V_identifier
setIdentifier:
queryStateWithRequestDetails:completionHandler:
stateService:didReceiveDoNotDisturbStateUpdate:
registerForStateUpdatesWithRequestDetails:completionHandler:
queryCurrentStateWithError:
addStateUpdateListener:withCompletionHandler:
removeStateUpdateListener:
_stateUpdateListeners
addStateUpdateListener:error:
removeStateUpdateListener:error:
urgency
sender
threadIdentifier
notifyAnyway
behavior
_initWithIdentifier:bundleIdentifier:type:urgency:sender:threadIdentifier:notifyAnyway:behavior:
shouldAlwaysInterrupt
_bundleIdentifier
_urgency
_sender
_threadIdentifier
_notifyAnyway
_behavior
TB,R,N,V_notifyAnyway
TQ,R,N,V_behavior
T@"NSString",R,C,N,V_bundleIdentifier
TQ,R,N,V_urgency
T@"DNDContactHandle",R,C,N,V_sender
T@"NSString",R,C,N,V_threadIdentifier
setBundleIdentifier:
setType:
setUrgency:
setSender:
setThreadIdentifier:
setNotifyAnyway:
setBehavior:
setShouldAlwaysInterrupt:
TB,D,N
T@"DNDContactHandle",C,D,N
interfaceWithIdentifier:
protocolForProtocol:
setServer:
userInitiated
serial
serviceClass
relativePriority
serviceClass:relativePriority:
remoteTarget
_queue_invalidateConnection
_queue_createConnection
endpointForMachName:service:instance:
connectionWithEndpoint:
setServiceQuality:
setInterface:
setTargetQueue:
setInterfaceTarget:
setActivationHandler:
setInterruptionHandler:
setInvalidationHandler:
configureConnection:
activate
invalidate
_queue_remoteTarget
_queue_connection
_lock
_queuePriority
initWithMode:configuration:triggers:impactsAvailability:dimsLockScreen:created:lastModified:automaticallyGenerated:
_containsSecureTriggers:
configuration
triggers
impactsAvailability
dimsLockScreen
created
lastModified
isAutomaticallyGenerated
isEqualToDate:
laterDate:
_initWithModeConfiguration:
defaultModeConfiguration
allowSmartEntry
mergeWithModeConfiguration:
log:withMessage:
_mode
_configuration
_triggers
_impactsAvailability
_dimsLockScreen
_lastModified
_created
_automaticallyGenerated
_hasSecureData
T@"DNDMode",R,C,N,V_mode
T@"DNDConfiguration",R,C,N,V_configuration
T@"NSArray",R,C,N,V_triggers
TQ,R,N,V_impactsAvailability
TQ,R,N,V_dimsLockScreen
T@"NSDate",R,C,N,V_lastModified
T@"NSDate",R,C,N,V_created
automaticallyGenerated
TB,R,N,GisAutomaticallyGenerated,V_automaticallyGenerated
setMode:
setConfiguration:
setTriggers:
setImpactsAvailability:
setLastModified:
setCreated:
T@"DNDMode",C,D,N
T@"DNDConfiguration",C,D,N
T@"NSArray",C,D,N
T@"NSDate",C,D,N
TB,D,N,GisAutomaticallyGenerated
awakeAfterUsingCoder:
fileURLWithPathComponents:
bundleWithURL:
dnd_locationBundle
deviceIdentifier
initWithClientIdentifier:deviceIdentifier:
_deviceIdentifier
T@"NSString",R,C,N,V_deviceIdentifier
scheduleEnabledSetting
bedtimeBehaviorEnabledSetting
initWithScheduleEnabledSetting:timePeriod:bedtimeBehaviorEnabledSetting:
_scheduleEnabledSetting
_bedtimeBehaviorEnabledSetting
TQ,R,N,V_scheduleEnabledSetting
TQ,R,N,V_bedtimeBehaviorEnabledSetting
setScheduleEnabledSetting:
setTimePeriod:
setBedtimeBehaviorEnabledSetting:
T@"DNDScheduleTimePeriod",C,D,N
detailsWithIdentifier:modeIdentifier:lifetime:reason:
_initWithIdentifier:modeIdentifier:modeConfigurationModifiedDate:lifetime:reason:userVisibleEndDate:
modeConfigurationModifiedDate
lifetime
userVisibleEndDate
detailsWithIdentifier:modeIdentifier:lifetime:
_modeConfigurationModifiedDate
_lifetime
_userVisibleEndDate
T@"NSDate",R,C,N,V_userVisibleEndDate
T@"NSDate",R,C,N,V_modeConfigurationModifiedDate
T@"DNDModeAssertionLifetime",R,C,N,V_lifetime
setModeIdentifier:
setModeConfigurationModifiedDate:
setLifetime:
setReason:
setUserVisibleEndDate:
T@"DNDModeAssertionLifetime",C,D,N
isUserRequested
userRequestedAssertionDetailsWithIdentifier:modeIdentifier:lifetime:
userRequested
TB,R,D,N,GisUserRequested
scheduleIdentifier
_scheduleIdentifier
T@"NSString",R,C,N,V_scheduleIdentifier
takeModeAssertionWithDetails:requestDetails:completionHandler:
invalidateActiveModeAssertionWithInvalidationDetails:reasonOverride:error:
invalidateActiveModeAssertionWithDetails:reasonOverride:requestDetails:completionHandler:
getActiveModeAssertionWithRequestDetails:completionHandler:
getLatestModeAssertionInvalidationWithRequestDetails:completionHandler:
invalidateAllActiveModeAssertionsWithRequestDetails:completionHandler:
getAllModeAssertionsWithRequestDetails:completionHandler:
_registerForAssertionUpdatesIfRequiredWithCompletionHandler:
_handleChangeActiveModeAssertion:invalidation:
modeAssertionService:didReceiveModeAssertionInvalidation:
modeAssertionService:didUpdateActiveModeAssertion:
activeModeAssertionWithError:
registerForAssertionUpdatesWithRequestDetails:completionHandler:
takeModeAssertionWithDetails:error:
invalidateActiveModeAssertionWithError:
latestModeAssertionInvalidationWithError:
invalidateAllActiveModeAssertionsWithError:
allModeAssertionsWithError:
addAssertionUpdateListener:withCompletionHandler:
removeAssertionUpdateListener:
_assertionUpdateListeners
_activeAssertion
_activeAssertionLock
_activeAssertionQueried
addAssertionUpdateListener:error:
removeAssertionUpdateListener:error:
_initWithContactIdentifier:type:value:
_value
T@"NSString",R,C,N,V_value
setValue:
activateModeWithDetails:withRequestDetails:completionHandler:
invalidateModeAssertionWithUUID:withRequestDetails:completionHandler:
activeModeAssertionWithRequestDetails:completionHandler:
modeSelectionService:didReceiveUpdatedActiveModeAssertion:stateUpdate:
modeSelectionService:didReceiveModesUpdate:
modeSelectionService:didReceiveAvailableModesUpdate:
activateModeWithDetails:error:
invalidateModeAssertionWithUUID:error:
allModesWithError:
availableModesWithError:
_modeConfigurationService
getPreventAutoReplyReturningError:
getPreventAutoReplyWithRequestDetails:completionHandler:
setPreventAutoReply:withRequestDetails:completionHandler:
getCloudSyncStateReturningError:
getPairSyncStateWithRequestDetails:completionHandler:
setPairSyncPreferenceEnabled:withRequestDetails:completionHandler:
didChangeFocusStatusSharingSettingForApplicationIdentifier:withRequestDetails:completionHandler:
globalConfigurationService:didReceiveUpdatedPairSyncState:
globalConfigurationService:didReceiveUpdatedPreventAutoReplySetting:
globalConfigurationService:didReceiveUpdatedPhoneCallBypassSettings:
getStateDumpWithRequestDetails:completionHandler:
registerForGlobalConfigurationUpdatesWithRequestDetails:completionHandler:
isAutoReplyPrevented
setPreventAutoReply:error:
getPhoneCallBypassSettingsReturningError:
setPhoneCallBypassSettings:error:
isCloudSyncActive
setCloudSyncPreferenceEnabled:error:
getPairSyncStateReturningError:
setPairSyncPreferenceEnabled:error:
didChangeFocusStatusSharingSettingForApplicationIdentifier:
getStateDumpReturningError:
dnd_defaultSettingsURL
dnd_defaultSetupURL
getAppInfoForBundleIdentifier:withRequestDetails:completionHandler:
getAppInfoForBundleIdentifiers:withRequestDetails:completionHandler:
getAppInfoForBundleIdentifier:error:
getAppInfoForBundleIdentifiers:error:
activeDateInterval
initWithClientIdentifier:modeIdentifier:lifetimeType:activeDateInterval:userVisibleEndDate:
_lifetimeType
_activeDateInterval
TQ,R,N,V_lifetimeType
T@"NSDateInterval",R,C,N,V_activeDateInterval
registerForSettingsUpdatesWithRequestDetails:completionHandler:
deliverActiveModeAssertionUpdate:invalidation:clientIdentifiers:
deliverStateUpdate:
deliverUpdatedBehaviorSettings:
deliverUpdatedScheduleSettings:
deliverActiveModeAssertion:stateUpdate:clientIdentifiers:
deliverAllModes:
deliverAvailableModes:
deliverUpdatedPairSyncState:
deliverUpdatedPhoneCallBypassSettings:
deliverUpdatedPreventAutoReplySetting:
deliverMeDeviceState:
setClient:
setClientMessagingExpectation:
queryStateForUpdateWithRequestDetails:completionHandler:
getBehaviorSettingsWithRequestDetails:completionHandler:
setBehaviorSettings:withRequestDetails:completionHandler:
getScheduleSettingsWithRequestDetails:completionHandler:
setScheduleSettings:withRequestDetails:completionHandler:
_monitorQueue_invalidateMonitorConnection
_monitorQueue_createMonitorConnection
_setMonitorState:
_monitorQueue_monitorTarget
bs_map:
removeEventListener:
_monitorQueue_monitorService
_monitorState
_monitorQueuePriority
_monitorQueue
_assertionMonitorRequestDetails
_stateMonitorRequestDetails
_settingsMonitorRequestDetails
_modeIdentifiersMonitorRequestDetails
_globalConfigurationMonitorRequestDetails
_meDeviceStateMonitorRequestDetails
_eventListeners
_lastReceivedState
_queue_registerForSettingsUpdatesIfRequired
settingsService:didReceiveUpdatedBehaviorSettings:
settingsService:didReceiveUpdatedPhoneCallBypassSettings:
settingsService:didReceiveUpdatedScheduleSettings:
behaviorSettingsReturningError:
setBehaviorSettings:error:
phoneCallBypassSettingsReturningError:
scheduleSettingsReturningError:
setScheduleSettings:error:
configurationForModeIdentifier:error:
setConfiguration:forModeIdentifier:error:
addSettingsUpdateListener:withCompletionHandler:
removeSettingsUpdateListener:
_settingsUpdateListeners
_globalConfigurationService
setBehaviorSettings:returningError:
setPhoneCallBypassSettings:returningError:
setScheduleSettings:returningError:
addSettingsUpdateListener:error:
removeSettingsUpdateListener:error:
@16@0:8
B16@0:8
@24@0:8^{_NSZone=}16
v24@0:8@16
@24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@32@0:8Q16Q24
Q16@0:8
B24@0:8@16
v24@0:8Q16
v16@0:8
B32@0:8B16B20^@24
@"NSObject<OS_dispatch_queue>"
@"NSString"
@72@0:8@16@24@32@40@48@56@64
@20@0:8B16
v40@0:8@16@24@32
@"NSMutableSet"
@"DNDBypassSettings"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@24
v32@0:8@16Q24
v28@0:8@16B24
v32@0:8@"DNDRemoteServiceConnection"16@"DNDStateUpdate"24
v40@0:8@"DNDRemoteServiceConnection"16@"DNDModeAssertion"24@"DNDModeAssertionInvalidation"32
v32@0:8@"DNDRemoteServiceConnection"16@"DNDBehaviorSettings"24
v32@0:8@"DNDRemoteServiceConnection"16@"DNDScheduleSettings"24
v32@0:8@"DNDRemoteServiceConnection"16Q24
v32@0:8@"DNDRemoteServiceConnection"16@"DNDBypassSettings"24
v28@0:8@"DNDRemoteServiceConnection"16B24
v40@0:8@"DNDRemoteServiceConnection"16@"DNDModeAssertion"24@"DNDStateUpdate"32
v32@0:8@"DNDRemoteServiceConnection"16@"NSArray"24
v32@0:8@"DNDRemoteServiceConnection"16@"DNDMeDeviceState"24
v24@0:8@?16
v32@0:8@16@?24
@"NSHashTable"
@24@0:8Q16
@72@0:8Q16Q24@32@40@48Q56Q64
Q24@0:8@16
Q32@0:8@16@24
@"NSMutableDictionary"
@"DNDMutableSenderConfiguration"
v32@0:8Q16@24
v40@0:8Q16@24@32
v32@0:8Q16Q24
@48@0:8@16@24@32@40
@"NSUUID"
@"NSDate"
@"DNDModeAssertionDetails"
@"DNDModeAssertionSource"
@32@0:8Q16@24
@"NSMutableArray"
@"NSDateInterval"
@56@0:8q16@24@32@40@48
q16@0:8
@"DNDApplicationIdentifier"
@"NSURL"
v24@0:8q16
@40@0:8@16@24Q32
@"DNDScheduleTime"
@32@0:8@16Q24
@64@0:8@16@24@32@40Q48Q56
@"DNDModeAssertion"
@"DNDModeAssertionInvalidationDetails"
@48@0:8@16@24Q32q40
@"DNDState"
@24@0:8d16
@32@0:8@16@24
B24@0:8^@16
@36@0:8@16@24B32
@40@0:8Q16@24@32
@56@0:8@16@24@32@40q48
@72@0:8@16@24@32@40q48Q56@64
B32@0:8@16^@24
@24@0:8^@16
@32@0:8@16^@24
B28@0:8B16^@20
@40@0:8@16@24^@32
@"CLCircularRegion"
@"DNDScheduleTimePeriod"
@80@0:8@16@24@32@40@48@56@64@72
@"NSSet"
@48@0:8@16Q24Q32@40
@"DNDClientEventDetails"
@64@0:8Q16@24@32@40Q48@56
@"NSArray"
@"DNDModeConfiguration"
@40@0:8Q16@24Q32
@76@0:8@16@24Q32Q40@48@56B64Q68
@"DNDContactHandle"
v20@0:8B16
v32@0:8@"DNDRequestDetails"16@?<v@?@"NSNumber"@"NSError">24
@"BSServiceConnection"
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"BSServiceQuality"
v40@0:8@"<DNDDiffBuilding>"16@"DNDDiffBuilder"24@"NSString"32
@40@0:8@16@24@32
@76@0:8@16@24@32Q40Q48@56@64B72
@"DNDMode"
@"DNDConfiguration"
@48@0:8@16@24@32Q40
@64@0:8@16@24@32@40Q48@56
@"DNDModeAssertionLifetime"
@40@0:8@16Q24^@32
{atomic_flag="_Value"AB}
@40@0:8@16Q24@32
@"DNDModeConfigurationService"
Q24@0:8^@16
@24@0:8q16
@56@0:8@16@24Q32@40@48
v32@0:8@"DNDRequestDetails"16@?<v@?@"NSNumber"@"DNDModeAssertion"@"NSError">24
v32@0:8@"DNDRequestDetails"16@?<v@?@"NSNumber"@"DNDMeDeviceState"@"NSError">24
Vv40@0:8@16@24@32
Vv40@0:8@"DNDModeAssertion"16@"DNDModeAssertionInvalidation"24@"NSArray<__NSString__>"32
Vv24@0:8@16
Vv24@0:8@"DNDStateUpdate"16
Vv24@0:8@"DNDBehaviorSettings"16
Vv24@0:8@"DNDScheduleSettings"16
Vv40@0:8@"DNDModeAssertion"16@"DNDStateUpdate"24@"NSArray<__NSString__>"32
Vv24@0:8@"NSArray<__DNDMode__>"16
Vv24@0:8@"NSNumber"16
Vv24@0:8@"DNDBypassSettings"16
Vv24@0:8@"DNDMeDeviceState"16
v40@0:8@16@24@?32
v40@0:8@"DNDClientEventDetails"16@"DNDRequestDetails"24@?<v@?@"DNDClientEventBehavior"@"NSError">32
v48@0:8@16@24@32@?40
v40@0:8@"DNDModeAssertionDetails"16@"DNDRequestDetails"24@?<v@?@"DNDModeAssertion"@"NSError">32
v48@0:8@"DNDModeAssertionInvalidationDetails"16@"NSNumber"24@"DNDRequestDetails"32@?<v@?@"DNDModeAssertionInvalidation"@"NSError">40
v32@0:8@"DNDRequestDetails"16@?<v@?@"DNDModeAssertion"@"NSError">24
v32@0:8@"DNDRequestDetails"16@?<v@?@"DNDModeAssertionInvalidation"@"NSError">24
v32@0:8@"DNDRequestDetails"16@?<v@?@"NSArray<__DNDModeAssertion__>"@"NSError">24
v32@0:8@"DNDRequestDetails"16@?<v@?@"DNDState"@"NSError">24
v32@0:8@"DNDRequestDetails"16@?<v@?@"DNDBehaviorSettings"@"NSError">24
v40@0:8@"DNDBehaviorSettings"16@"DNDRequestDetails"24@?<v@?@"NSNumber"@"NSError">32
v32@0:8@"DNDRequestDetails"16@?<v@?@"DNDScheduleSettings"@"NSError">24
v40@0:8@"DNDScheduleSettings"16@"DNDRequestDetails"24@?<v@?@"NSNumber"@"NSError">32
v40@0:8@"DNDModeConfiguration"16@"DNDRequestDetails"24@?<v@?@"NSNumber"@"NSError">32
v40@0:8@"NSString"16@"DNDRequestDetails"24@?<v@?@"NSNumber"@"NSError">32
v32@0:8@"DNDRequestDetails"16@?<v@?@"NSArray<__DNDModeConfiguration__>"@"NSError">24
v40@0:8@"NSString"16@"DNDRequestDetails"24@?<v@?@"DNDModeConfiguration"@"NSError">32
v32@0:8@"DNDRequestDetails"16@?<v@?@"NSArray<__DNDMode__>"@"NSError">24
v40@0:8@"DNDContactHandle"16@"DNDRequestDetails"24@?<v@?@"NSArray<__NSString__>"@"NSError">32
v40@0:8@"DNDContactHandle"16@"DNDRequestDetails"24@?<v@?@"NSNumber"@"NSError">32
v32@0:8@"DNDRequestDetails"16@?<v@?@"NSString"@"NSError">24
v40@0:8@"DNDModeAssertionDetails"16@"DNDRequestDetails"24@?<v@?@"NSNumber"@"NSError">32
v40@0:8@"NSUUID"16@"DNDRequestDetails"24@?<v@?@"NSNumber"@"NSError">32
Vv40@0:8@16@24@?32
v40@0:8@"NSNumber"16@"DNDRequestDetails"24@?<v@?@"NSNumber"@"NSError">32
v32@0:8@"DNDRequestDetails"16@?<v@?@"NSDictionary"@"NSError">24
Vv40@0:8@"NSString"16@"DNDRequestDetails"24@?<v@?@"NSNumber"@"NSError">32
v40@0:8@"NSString"16@"DNDRequestDetails"24@?<v@?@"DNDAppInfo"@"NSError">32
v40@0:8@"NSArray<__NSString__>"16@"DNDRequestDetails"24@?<v@?@"NSArray<__DNDAppInfo__>"@"NSError">32
v32@0:8@"DNDRequestDetails"16@?<v@?@"DNDMeDeviceState"@"NSError">24
v48@0:8@"NSNumber"16@"NSNumber"24@"DNDRequestDetails"32@?<v@?@"NSNumber"@"NSError">40
B40@0:8@16@24^@32
@"DNDGlobalConfigurationService"
@(#)PROGRAM:DoNotDisturb  PROJECT:DoNotDisturb-1
!$'*-0369<?B
<h: %lu; m: %lu>
hour
minute
match schedule
schedule end
<invalid>
v8@?0
com.apple.donotdisturb.DNDAppInfoService.service.lock
v24@?0@"NSNumber"8@"NSError"16
com.apple.donotdisturb.DNDAuxiliaryStateService
essential
time-sensitive
iPhone
iPod
iPad
Apple TV
Apple Watch
<unknown>
Lifetime expired
User changed state
Override ended by client
Override replaced by client
Server unresponsive
Client unresponsive
Location lifetime expired
Calendar event lifetime expired
DNDErrorDomain
Contact
Favorite
<%@: %p; allowedContactTypes: %@; deniedContactTypes: %@; allowedContactGroups: %@; deniedContactGroups: %@; allowedContacts: %@; deniedContacts: %@; phoneCallBypassSettings: %@>
allowedContacts
deniedContacts
allowedContactTypes
deniedContactTypes
allowedContactGroups
deniedContactGroups
phoneCallBypassSettings
com.apple.donotdisturb.DNDMeDeviceService.service.lock
v24@?0@"DNDMeDeviceState"8@"NSError"16
com.apple.donotdisturb.DNDMeDeviceService
com.apple.donotdisturb.DNDMeDeviceService.call-out
v32@?0@"NSNumber"8@"DNDMeDeviceState"16@"NSError"24
Custom
Default
Sleep
Driving
Fitness
Work
Personal
Reading
Gaming
Mindfulness
moon.fill
bed.double.fill
car.fill
figure.run
person.lanyardcard.fill
person.fill
book.closed.fill
rocket.fill
apple.mindfulness
MODE_NAME_DEFAULT
MODE_NAME_SLEEP
MODE_NAME_DRIVING
MODE_NAME_FITNESS
MODE_NAME_WORK
MODE_NAME_PERSONAL
MODE_NAME_READING
MODE_NAME_GAMING
MODE_NAME_MINDFULNESS
Inclusive
Exclusive
<%@: %p; type: %@; suppressionType: %@; allowedApplicationIdentifiers: %@; deniedApplicationIdentifiers: %@; senderConfiguration: %@; minimumBreakthroughUrgency: %@; hideApplicationBadges: %@; >
type
suppressionType
allowedApplicationIdentifiers
deniedApplicationIdentifiers
senderConfiguration
minimumBreakthroughUrgency
hideApplicationBadges
v24@?0@"DNDContact"8^B16
<%@: %p; UUID: %@; startDate: %@; details: %@; source: %@>
UUID
startDate
details
source
<%@: %p; interruptionBehaviorSetting: %@>
interruptionBehaviorSetting
com.apple.donotdisturb
AuxiliaryState
BehaviorResolution
GlobalConfiguration
ModeAssertion
ModeConfiguration
ModeSelection
RemoteConnection
Settings
State
DNDMeDeviceService.client
unknown
no-device
this-device
other-device
<%@: %p; meDeviceStatus: %@; meDeviceName: %@>
meDeviceStatus
meDeviceName
default
disabled
enabled
none
silence
delay delivery
None
%@%@: {%@%@}
%@{%@%@}
%@%@: object1: %@; object2: %@
%@object1: %@; object2: %@
%llu
added
removed
<%@: %p; dateInterval: %@>
dateInterval
<%@: %p; source: %@; applicationIdentifier: %@; displayName: %@; storeIconURL: %@; cachedIconURL: %@>
applicationIdentifier
displayName
storeIconURL
cachedIconURL
telephony
<none>
v24@?0q8^B16
Every Day
<period: s: %@; e: %@; weekdays: %@>
startTime
endTime
weekdays
tvOS
macOS
watchOS
<%@: %p; bundleID: %@; platform: %@>
bundleID:%@;platform:%@
bundleID
platform
<%@: %p; assertion: %@; invalidationDate: %@; details: %@; source: %@; reason: %@; reasonOverride: %@>
assertion
invalidationDate
reason
reasonOverride
<%@: %p; reason: %@; source: %@; state: %@; previousState: %@>
previousState
state
DeviceClassNumber
<%@: %p; deviceClass: %@; deviceCapabilities: %@>
favorite
contact
contact from group
%@:%@
<%@: %p; clientIdentifier: '%@'; auditUUID: %@; timestamp: %llu>
clientIdentifier
auditUUID
timestamp
com.apple.donotdisturb.DNDAvailabilityService.service.lock
<%@: %p; eventUniqueID: '%@'; occurrenceDate: %@; onlyDuringEvent: %@>
eventUniqueID
occurrenceDate
onlyDuringEvent
<%@: %p; minimumBreakthroughUrgency: %@; allowedThreads: %@; deniedThreads: %@; >
minimumBreakthroughUrgency:%@;
allowedThreads:%@;
deniedThreads:%@;
allowedThreads
deniedThreads
Do Not Disturb
systemIndigoColor
<%@: %p; name: %@; modeIdentifier: %@; symbolImageName: %@; tintColorName: %@; semanticType: %zd; visibility: %lu; identifier: %@; isPlaceHolder: %@>
name
modeIdentifier
symbolImageName
tintColorName
semanticType
visibility
identifier
calendar event
date interval
current-location
schedule
explicit-region
never interrupt
interrupt when unlocked
com.apple.donotdisturb.DNDModeConfigurationService.service.lock
v24@?0@"NSArray"8@"NSError"16
v24@?0@"DNDModeConfiguration"8@"NSError"16
v24@?0@"NSString"8@"NSError"16
v24@?0@"NSArray<__DNDMode__>"8@"NSError"16
com.apple.donotdisturb.mode.driving
com.apple.sleep.sleep-mode
com.apple.donotdisturb.mode.workout
com.apple.donotdisturb.DNDModeConfigurationService
com.apple.donotdisturb.DNDModeConfigurationService.call-out
v32@?0@"NSNumber"8@"DNDModeAssertion"16@"NSError"24
v24@?0@"DNDMode"8^B16
com.apple.focus.gaming
com.apple.focus.mindfulness
No template found for mode identifier.
Mode configuration already exists for mode identifier.
<%@: %p; enabledSetting: %llu>
enabledSetting
<%@: %p; enabledSetting: %llu; region: %@; detail: %@>
region
detail
<%@: %p; enabledSetting: %llu; timePeriod: %@; creationDate: %@>
timePeriod
creationDate
<%@: %p; enabledSetting: %llu; applicationIdentifier: %@>
Allow
Deny
com.apple.donotdisturb.DNDEventBehaviorResolutionService.service.lock
v24@?0@"DNDClientEventBehavior"8@"NSError"16
user action
client action
lifetime
system state
scheduled
automation
local
cloud
paired
<%@: %p; contactIdentifier: %@; firstName: %@; middleName: %@; lastName: %@; nickName: %@; organizationName: %@; phoneNumbers: %@; emailAddresses: %@;>
contactIdentifier:%@;
firstName:%@;
middleName:%@;
lastName:%@;
nickName:%@;
organizationName:%@;
phoneNumbers:%@;
emailAddresses:%@;
contactIdentifier
firstName
middleName
lastName
nickName
organizationName
phoneNumbers
emailAddresses
<%@: %p; eventDetails: %@; interruptionSuppression: %@; resolutionReason: %@; activeModeUUID: %@>
eventDetails
interruptionSuppression
resolutionReason
activeModeUUID
<%@: %p; suppressionState: %@; startDate: %@; userVisibleTransitionDate: %@; userVisibleTransitionLifetimeType: %@; activeModeConfiguration: %@; activeModeIdentifier: %@>
suppressionState
activeModeAssertionMetadata
userVisibleTransitionDate
userVisibleTransitionLifetimeType
activeModeConfiguration
overrideModeIdentifier
<%@: %p; immediateBypassEventSourceType: %@; immediateBypassCNGroupIdentifier: '%@'; repeatEventSourceBehaviorEnabledSetting: %@>
immediateBypassEventSourceType:%@;immediateBypassCNGroupIdentifier:%@;repeatEventSourceBehaviorEnabledSetting:%@
immediateBypassEventSourceType
immediateBypassCNGroupIdentifier
repeatEventSourceBehaviorEnabledSetting
<%@: %p; identifier: '%@'>
inactive
always
while UI locked
com.apple.donotdisturb.mode.default
com.apple.donotdisturb.mode.bedtime
com.apple.donotdisturb.DNDStateService.service.lock
com.apple.donotdisturb.StateService
com.apple.donotdisturb.StateService.call-out
v24@?0@"DNDState"8@"NSError"16
Call
Call-Record
Direct-Message
Group-Message
Time-Sensitive
Essential
Legacy
<%@: %p; identifier: '%@'; bundleIdentifier:: %@; type: %@; urgency: %@; sender: %@; threadIdentifier: %@; notifyAnyway: %d; behavior: %@>
bundleIdentifier
urgency
sender
threadIdentifier
notifyAnyway
behavior
com.apple.donotdisturb.availability.service
dnd.service
v16@?0@"BSServiceConnection<BSServiceConnectionContext>"8
v16@?0@"<BSServiceConnectionConfiguring>"8
DNDModeConfigurationSmartTrigger
<%@: %p; mode: %@; configuration: %@; triggers: %@; impactsAvailability: %@; dimsLockScreen: %@; created: %@; lastModified: %@; automaticallyGenerated: %@; hasSecureData: %@>
<%@: %p; mode: %@; impactsAvailability: %@; dimsLockScreen: %@>
mode
configuration
triggers
impactsAvailability
dimsLockScreen
created
lastModified
automaticallyGenerated
isAutomaticallyGenerated
<%@: %p>
<%@: %p; region: '%@'>
System
Library
LocationBundles
DoNotDisturb.bundle
PrivateFrameworks
DoNotDisturb.framework
com.apple.donotdisturb.system
<%@: %p; clientIdentifier: '%@'; deviceIdentifier: '%@'>
deviceIdentifier
<schedule: enabled: %@; period: %@; bedtime: %@>
scheduleEnabledSetting
bedtimeBehaviorEnabledSetting
<%@: %p; identifier: '%@'; modeIdentifier: '%@'; modeConfigurationModifiedDate: %@; lifetime: %@; reason: %@; userVisibleEndDate: %@>
modeConfigurationModifiedDate
userVisibleEndDate
<%@: %p; scheduleIdentifier: '%@'; behavior: %@>
scheduleIdentifier
com.apple.donotdisturb.ModeAssertionService.call-out
v24@?0@"DNDModeAssertion"8@"NSError"16
v24@?0@"DNDModeAssertionInvalidation"8@"NSError"16
v24@?0@"NSArray<__DNDModeAssertion__>"8@"NSError"16
v20@?0B8@"NSError"12
email
phone
<%@: %p; contactIdentifier: %@; type: %@; value: %@;>
value
com.apple.donotdisturb.DNDModeSelectionService.service.lock
com.apple.donotdisturb.DNDModeSelectionService
com.apple.donotdisturb.DNDModeSelectionService.call-out
User action
Schedule
System state
com.apple.donotdisturb.DNDGlobalConfigurationService.service.lock
prevented
not prevented
Bypass settings are now per mode configuration
v24@?0@"NSDictionary"8@"NSError"16
com.apple.donotdisturb.DNDGlobalConfigurationService
com.apple.donotdisturb.DNDGlobalConfigurationService.callout
prefs:root=DO_NOT_DISTURB
prefs:root=DO_NOT_DISTURB&path=setup
prefs:root=DO_NOT_DISTURB&path=setup&type=%ld
prefs:root=DO_NOT_DISTURB&path=%@
v24@?0@"DNDAppInfo"8@"NSError"16
com.apple.donotdisturb.DNDAppInfoService
com.apple.donotdisturb.schedule.default
<%@: %p; clientIdentifier: '%@'; modeIdentifier: '%@'; lifetimeType: %@; activeDateInterval: %@; userVisibleEndDate: %@>
lifetimeType
activeDateInterval
com.apple.donotdisturb.monitor
com.apple.donotdisturb.service
monitor.registration
com.apple.donotdisturb.service.non-launching
v24@?0@"DNDBehaviorSettings"8@"NSError"16
v24@?0@"DNDScheduleSettings"8@"NSError"16
v24@?0@"NSArray<__DNDModeConfiguration__>"8@"NSError"16
@"NSString"16@?0@"DNDMode"8
device unlocked
always interrupt flag
always bypass
no bypass
group contact
repeat event
emergency contact
mode configuration type
mode configuration for application
mode configuration for application thread
mode configuration for contacts
mode configuration for favorites
mode configuration for contact group
mode configuration for contact
mode configuration urgency
mode configuration notify anyway
display mirrored
display shared
presentation mode
com.apple.donotdisturb.DNDSettingsService.service.lock
com.apple.donotdisturb.SettingsService
com.apple.donotdisturb.SettingsService.call-out
com.apple.donotdisturb.DNDAuxiliaryStateService.setScreenIsShared:screenIsMirrored:
[%{public}@] Set auxiliary state; isScreenShared=%d isScreenMirrored=%d
[%{public}@] Error when setting auxiliary state; error='%{public}@' isScreenShared=%d isScreenMirrored=%d
com.apple.donotdisturb.DNDMeDeviceService.queryCurrentState.async
[%{public}@] Processing async 'Me Device' state request
[%{public}@] Error when getting 'Me Device' state, error='%{public}@'
[%{public}@] Got current 'Me Device' state, meDeviceStatus=%{public}@, meDeviceName=%{public}@
com.apple.donotdisturb.DNDMeDeviceService.addListener
Adding 'Me Device' state update listener: listener=%{public}@
Registered for 'Me Device' state updates: listener=%{public}@
Did not register for 'Me Device' state updates, will remove listener: listener=%{public}@
com.apple.donotdisturb.DNDMeDeviceService.removeListener
Removing 'Me Device' state update listener: listener=%{public}@
com.apple.donotdisturb.DNDMeDeviceService.registerForUpdates
[%{public}@] Registering 'Me Device' state update listener
[%{public}@] Error when registering 'Me Device' state update listener, error='%{public}@'
[%{public}@] Begin configuration
[%{public}@] type: %{public}@; suppressionType: %{public}@; minimumBreakthroughUrgency: %{public}@; hideApplicationBadges: %{public}@
[%{public}@] Allowed app: %{private}@; %{private}@
[%{public}@] Denied app: %{private}@
[%{public}@] senderConfiguration: %{private}@
[%{public}@] End configuration
nil startDate provided to DNDModeAssertion initializer. %@
[%{public}@] Begin diff
[%{public}@] %{private}@
[%{public}@] End diff
com.apple.donotdisturb.DNDAvailabilityService.getIsLocalUserAvailable
[%{public}@] Get user availability, availability=%{public}@
[%{public}@] Error when getting user availability in current mode for contact, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.setModeConfiguration
[%{public}@] Set mode configuration, configuration=%{public}@
[%{public}@] Error when setting mode configuration, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.removeModeConfiguration
[%{public}@] Remove mode configuration, identifier=%{public}@
[%{public}@] Error when removing mode configuration, error='%{public}@'
[%{public}@] Error mode configuration for identifier cannot be removed, identifier=%{public}@
com.apple.donotdisturb.DNDModeConfigurationService.getModeConfigurations
[%{public}@] Get mode configurations
[%{public}@] Error when getting mode configurations, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.getModeConfiguration
[%{public}@] Get mode configuration, identifier=%{public}@
com.apple.donotdisturb.DNDModeConfigurationService.getIsLocalUserAvailable
[%{public}@] Get user availability in current mode for contact, availability=%{public}@, handle=%{private}@
com.apple.donotdisturb.DNDModeConfigurationService.getAllowedModesForContact
[%{public}@] Get allowed modes for contact, handle=%{private}@
com.apple.donotdisturb.DNDModeConfigurationService.publishCurrentStatusKitAvailability
[%{public}@] Request to publish statuskit availability succeeded: %{public}@
[%{public}@] Error when publishing statuskit availability, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.allModes
[%{public}@] Got all modes, modes=%{public}@
com.apple.donotdisturb.DNDModeConfigurationService.availableModes
[%{public}@] Got available modes, modes=%{public}@
com.apple.donotdisturb.DNDModeConfigurationService.getSyncPreferenceEnabled
[%{public}@] Got sync preference enabled=%{public}@
[%{public}@] Error when getting sync preference enabled, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.getSyncAvailable
[%{public}@] Got sync available=%{public}@
[%{public}@] Error when getting sync available, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.getSyncEnabled
[%{public}@] Got sync enabled=%{public}@
[%{public}@] Error when getting sync enabled, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.setSyncPreferenceEnabled
[%{public}@] Set sync preference enabled=%{public}@
[%{public}@] Error when setting sync enabled, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.addListener
Adding update listener: listener=%{public}@
Registered for updates: listener=%{public}@
Did not register for updates, will remove listener: listener=%{public}@
com.apple.donotdisturb.DNDModeConfigurationService.removeListener
Removing update listener: listener=%{public}@
received updated available mode identifiers: identifiers=%{public}@
com.apple.donotdisturb.DNDModeConfigurationService.syncModeConfigurations
[%{public}@] Synced mode configurations
com.apple.donotdisturb.DNDModeConfigurationService.createDefaultDrivingModeConfiguration
[%{public}@] Creating Driving mode configuration from template
com.apple.donotdisturb.DNDModeConfigurationService.createDefaultSleepingModeConfiguration
[%{public}@] Creating Sleeping mode configuration from template
com.apple.donotdisturb.DNDModeConfigurationService.createDefaultWorkoutModeConfiguration
[%{public}@] Creating Workout mode configuration from template
com.apple.donotdisturb.DNDModeConfigurationService.createModeConfigurationUsingTemplateForModeIdentifier
[%{public}@] Creating mode configuration from template for identifier: identifier=%{pubic}@
com.apple.donotdisturb.DNDModeConfigurationService.registerForUpdates
[%{public}@] Registering update listener
[%{public}@] Error when registering update listener, error='%{public}@'
com.apple.donotdisturb.DNDEventBehaviorResolutionService.resolveEvent
[%{public}@] Resolving behavior for event, details=%@
[%{public}@] Error when resolving behavior, error='%{public}@'
[%{public}@] Resolved event, details=%@ behavior=%@
%{public}@ normalizing phonenumber %{private}@
%{public}@ couldnt normalize phonenumber %{private}@
com.apple.donotdisturb.DNDStateService.queryCurrentState.async
[%{public}@] Processing async state request
[%{public}@] Error when getting state, error='%{public}@'
[%{public}@] Got current state, state=%{public}@
com.apple.donotdisturb.DNDStateService.queryCurrentState
[%{public}@] Processing state request
com.apple.donotdisturb.DNDStateService.addStateUpdateListener
Adding state update listener: listener=%{public}@
Registered for state updates: listener=%{public}@
Did not register for state updates, will remove listener: listener=%{public}@
com.apple.donotdisturb.DNDStateService.removeStateUpdateListener
Removing state update listener: listener=%{public}@
com.apple.donotdisturb.DNDStateService.registerForStateUpdates
[%{public}@] Registering state update listener
[%{public}@] Error when registering state update listener, error='%{public}@'
XPC request connection was activated: connection=%p
XPC request connection was interrupted: connection=%p
XPC request connection was invalidated, cannot recover: connection=%p
[%{public}@] Begin: %{public}@
[%{public}@] %{public}@
[%{public}@] created: %{public}@; lastModified: %{public}@; isAutomaticallyGenerated: %{public}d; hasSecureData: %{public}d; 
[%{public}@] triggers: %{private}@
[%{public}@] End
com.apple.donotdisturb.DNDModeAssertionService.takeModeAssertion
[%{public}@] Taking mode assertion; details=%{public}@
[%{public}@] Error when taking mode assertion, error='%{public}@'
[%{public}@] Took mode assertion, assertion=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.invalidateActiveModeAssertion
[%{public}@] Invalidating active mode assertion
[%{public}@] Error when invalidating mode assertion, error='%{public}@'
[%{public}@] Invalidated mode assertion, invalidation=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.activeModeAssertion
[%{public}@] Getting active mode assertion
[%{public}@] Error when requesting active mode assertion, error='%{public}@'
[%{public}@] Got mode assertion, assertion=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.latestModeAssertionInvalidation
[%{public}@] Getting latest mode assertion invalidation
[%{public}@] Error when requesting latest mode assertion invalidation, error='%{public}@'
[%{public}@] Got invalidation, invalidation=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.invalidateAllActiveModeAssertions
[%{public}@] Invalidating all active mode assertions
[%{public}@] Error when invalidating all active mode assertions, error='%{public}@'
[%{public}@] Invalidated all active mode assertions, success=%{BOOL}u
com.apple.donotdisturb.DNDModeAssertionService.allModeAssertionsWithError
[%{public}@] Requesting all active mode assertions
[%{public}@] Error when requesting all active mode assertions, error='%{public}@'
[%{public}@] Requested all active mode assertions, success=%{BOOL}u
com.apple.donotdisturb.DNDModeAssertionService.addAssertionUpdateListener
[%{public}@] Adding assertion update listener: listener=%{public}@
[%{public}@] Registered for assertion updates: listener=%{public}@
[%{public}@] Did not register for assertion updates, will remove listener: listener=%{public}@, error=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.removeAssertionUpdateListener
[%{public}@] Removing assertion update listener: listener=%{public}@
[%{public}@] Remote service got assertion change: service=%{public}@, assertion=%{public}@, invalidation=%{public}@
[%{public}@] Will deliver assertion invalidation to listener: invalidation=%{public}@, listener=%{public}@
[%{public}@] Will deliver assertion change to listener: assertion=%{public}@, listener=%{public}@
com.apple.donotdisturb.DNDModeAssertionService.registerForAssertionUpdates
[%{public}@] Registering assertion update listener
com.apple.donotdisturb.DNDModeSelectionService.activateModeWithIdentifier
[%{public}@] Activate mode with identifier, modeIdentifier=%{public}@
[%{public}@] Error when setting mode with identifier, modeIdentifier=%{public}@ error='%{public}@'
com.apple.donotdisturb.DNDModeSelectionService.invalidateModeAssertionWithUUID
[%{public}@] Invalidate mode assertion with UUID, assertionUUID=%{public}@
[%{public}@] Error when invalidating mode assertion with UUID, assertionUUID=%{public}@ error='%{public}@'
com.apple.donotdisturb.DNDModeSelectionService.activeModeAssertion
[%{public}@] Getting active mode assertion; not restricted by client identifier
com.apple.donotdisturb.DNDModeSelectionService.addListener
com.apple.donotdisturb.DNDModeSelectionService.removeListener
com.apple.donotdisturb.DNDModeSelectionService.registerForUpdates
[%{public}@] Error when registering mode selection update listener, error='%{public}@'
com.apple.donotdisturb.DNDGlobalConfigurationService.getPreventAutoReply
[%{public}@] Auto reply is %{public}@
[%{public}@] Error when getting prevent-auto-reply state, error='%{public}@'
com.apple.donotdisturb.DNDGlobalConfigurationService.setPreventAutoReply
[%{public}@] Set auto reply to %{public}@
[%{public}@] Error when setting prevent-auto-reply state, error='%{public}@'
Bypass settings are now per mode configuration
com.apple.donotdisturb.DNDModeConfigurationService.getCloudSyncState
[%{public}@] Got cloud sync state=%{public}@
[%{public}@] Error when getting cloud sync state, error='%{public}@'
[%{public}@] Set cloud sync preference enabled=%{public}@
[%{public}@] Error when setting cloud sync enabled, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.getPairSyncState
[%{public}@] Got pair sync state=%{public}@
[%{public}@] Error when getting pair sync state, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.setPairSyncPreferenceEnabled
[%{public}@] Set pair sync preference enabled=%{public}@
[%{public}@] Error when setting pair sync enabled, error='%{public}@'
com.apple.donotdisturb.DNDModeConfigurationService.didChangeFocusStatusSharingSettingForApplicationIdentifier
[%{public}@] Signaled change to focus status sharing setting, applicationIdentifier=%{public}@ success=%{public}@
[%{public}@] Error when signaling change to focus status sharing setting, applicationIdentifier=%{public}@ error='%{public}@'
com.apple.donotdisturb.DNDGlobalConfigurationService.addListener
com.apple.donotdisturb.DNDGlobalConfigurationService.removeListener
com.apple.donotdisturb.DNDModeConfigurationService.getStateDump
[%{public}@] Got state dump
[%{public}@] Error when getting state dump, error='%{public}@'
com.apple.donotdisturb.DNDGlobalConfigurationService.registerForUpdates
com.apple.donotdisturb.DNDAppInfoService.getAppInfoForBundleIdentifier
[%{public}@] App info is %{private}@
[%{public}@] Error when getting app info, error='%{public}@'
com.apple.donotdisturb.DNDAppInfoService.getAppInfoForBundleIdentifiers
XPC monitor connection was activated: connection=%p
Remote service connection failed to register for assertion updates on activation: requestDetails=%{public}@, error=%{public}@
Remote service connection failed to register for state updates on activation: requestDetails=%{public}@, error=%{public}@
Remote service connection failed to register for settings updates on activation: requestDetails=%{public}@, error=%{public}@
Remote service connection failed to register for available mode identifier updates on activation: requestDetails=%{public}@, error=%{public}@
Remote service connection failed to register for global configuration updates on activation: requestDetails=%{public}@, error=%{public}@
Remote service connection failed to register for 'Me Device' state updates on activation: requestDetails=%{public}@, error=%{public}@
XPC monitor connection was interrupted, reactivating: connection=%p
XPC monitor connection was invalidated, cannot recover: connection=%p
Remote service connection got assertion update: assertion=%{public}@, invalidation=%{public}@, clientIdentifiers=%{public}@
com.apple.donotdisturb.DNDSettingsService.behaviorSettings
[%{public}@] Error when getting behavior settings, error='%{public}@'
[%{public}@] Got behavior settings, settings=%{public}@
com.apple.donotdisturb.DNDSettingsService.setBehaviorSettings
[%{public}@] Set behavior settings, settings=%{public}@
[%{public}@] Error setting behavior settings, settings=%{public}@, error='%{public}@'
com.apple.donotdisturb.DNDSettingsService.scheduleSettings
[%{public}@] Error when getting schedule settings, error='%{public}@'
[%{public}@] Got schedule settings, settings=%{public}@
com.apple.donotdisturb.DNDSettingsService.setScheduleSettings
[%{public}@] Set schedule settings, settings=%{public}@
[%{public}@] Error setting schedule settings, settings=%{public}@, error='%{public}@'
com.apple.donotdisturb.DNDSettingsService.addSettingsUpdateListener
Adding settings update listener: listener=%{public}@
Registered for settings updates: listener=%{public}@
Did not register for settings updates, will remove listener: listener=%{public}@
com.apple.donotdisturb.DNDSettingsService.removeSettingsUpdateListener
Removing settings update listener: listener=%{public}@
com.apple.donotdisturb.DNDSettingsService.registerForSettingsUpdates
[%{public}@] Registering settings update listener
[%{public}@] Error when registering settings update listener, error='%{public}@'
DNDScheduleTime
NSCopying
NSMutableCopying
NSSecureCoding
NSCoding
DNDMutableScheduleTime
DNDAuxiliaryStateService
DNDSenderConfiguration
DNDMutableSenderConfiguration
DNDMeDeviceService
DNDRemoteServiceConnectionEventListener
NSObject
DNDConfiguration
DNDMutableConfiguration
DNDModeAssertion
DNDBehaviorSettings
DNDMutableBehaviorSettings
Deprecated
DNDMeDeviceState
DNDDiffBuilder
DiffBuilding
DNDModeAssertionDateIntervalLifetime
DNDAppInfo
DNDMutableAppInfo
DNDScheduleTimePeriod
DNDMutableScheduleTimePeriod
DNDApplicationIdentifier
DNDModeAssertionInvalidation
DNDStateUpdate
DNDDevice
DNDModeAssertionLifetime
DNDRequestDetails
DNDAvailabilityService
DNDModeAssertionCalendarEventLifetime
DNDApplicationConfiguration
DNDMutableApplicationConfiguration
DNDMode
DNDMutableMode
DateComponents
DNDModeConfigurationService
DNDModeConfigurationTrigger
DNDModeConfigurationLocationTrigger
DNDModeConfigurationScheduleTrigger
DNDModeConfigurationAppForegroundTrigger
DNDModeConfigurationDrivingTrigger
DNDModeConfigurationGameControllerTrigger
DNDModeConfigurationSleepingTrigger
DNDModeConfigurationSmartTrigger
DNDModeConfigurationWorkoutTrigger
DNDModeConfigurationMindfulnessTrigger
DNDModeConfigurationScreenActivityTrigger
DNDEventBehaviorResolutionService
DNDContact
DNDMutableContact
DNDClientEventBehavior
DNDState
DNDBypassSettings
DNDMutableBypassSettings
DNDModeAssertionInvalidationDetails
DNDMutableModeAssertionInvalidationDetails
DNDStateService
DeprecatedUpdateListener
DNDClientEventDetails
DNDMutableClientEventDetails
DNDRemoteAvailabilityServiceServerProtocol
DNDRemoteAvailabilityServiceConnection
DNDModeConfiguration
DNDDiffBuilding
DNDMutableModeConfiguration
DoNotDisturb
DNDModeAssertionCurrentLocationLifetime
DNDModeAssertionExplicitRegionLifetime
DNDModeAssertionSource
DNDModeAssertionUserRequestedLifetime
DNDScheduleSettings
DNDMutableScheduleSettings
DNDModeAssertionDetails
DNDMutableModeAssertionDetails
DNDModeAssertionScheduleLifetime
DNDModeAssertionService
DNDContactHandle
DNDMutableContactHandle
DNDModeSelectionService
DNDGlobalConfigurationService
DNDAppInfoService
DNDStateModeAssertionMetadata
DNDRemoteMonitorServerProtocol
DNDRemoteMonitorServerModeAssertionProtocol
DNDRemoteMonitorServerStateProtocol
DNDRemoteMonitorServerSettingsProtocol
DNDRemoteMonitorServerModeSelectionProtocol
DNDRemoteMonitorServerGlobalConfigurationProtocol
DNDRemoteMonitorServerMeDeviceStateProtocol
DNDRemoteServiceClientProtocol
DNDRemoteServiceClientModeAssertionProtocol
DNDRemoteServiceClientStateProtocol
DNDRemoteServiceClientSettingsProtocol
DNDRemoteServiceClientModeSelectionProtocol
DNDRemoteServiceClientGlobalConfigurationProtocol
DNDRemoteServiceClientMeDeviceStateProtocol
DNDRemoteServiceServerProtocol
DNDRemoteServiceServerBehaviorResolutionProtocol
DNDRemoteServiceServerModeAssertionProtocol
DNDRemoteServiceServerStateProtocol
DNDRemoteServiceServerSettingsProtocol
DNDRemoteServiceServerModeConfigurationProtocol
DNDRemoteServiceServerModeSelectionProtocol
DNDRemoteServiceServerGlobalConfigurationProtocol
DNDRemoteServiceServerAppInfoProtocol
DNDRemoteServiceServerMeDeviceStateProtocol
DNDRemoteServiceServerAuxiliaryStateProtocol
DNDRemoteServiceConnection
DNDSettingsService
_initWithHour:minute:
_initWithTime:
hour
minute
init
stringWithFormat:
decodeIntegerForKey:
encodeInteger:forKey:
defaultStartTime
defaultEndTime
supportsSecureCoding
copyWithZone:
mutableCopyWithZone:
encodeWithCoder:
initWithCoder:
TB,R
hash
isEqual:
description
_hour
_minute
TQ,R,N,V_hour
TQ,R,N,V_minute
setHour:
setMinute:
TQ,D,N
mapTableWithKeyOptions:valueOptions:
objectForKey:
_initWithClientIdentifier:
setObject:forKey:
detailsRepresentingNowWithClientIdentifier:
sharedInstance
numberWithBool:
boolValue
setScreenIsShared:screenIsMirrored:withRequestDetails:completionHandler:
copy
initialize
serviceForClientIdentifier:
setScreenIsShared:screenIsMirrored:error:
.cxx_destruct
_queue
_clientIdentifier
_initWithAllowedContactTypes:deniedContactTypes:allowedContactGroups:deniedContactGroups:allowedContacts:deniedContacts:phoneCallBypassSettings:
mutableCopy
allowedContactTypes
deniedContactTypes
allowedContactGroups
deniedContactGroups
allowedContacts
deniedContacts
phoneCallBypassSettings
_descriptionForRedacted:
_redactedDescriptionsForContacts:
countByEnumeratingWithState:objects:count:
redactedDescription
addObject:
diffObject:againstObject:withDescription:
arrayWithObjects:count:
setWithArray:
decodeObjectOfClasses:forKey:
decodeObjectOfClass:forKey:
encodeObject:forKey:
_evaluatedBypassSettings:
immediateBypassEventSourceType
immediateBypassCNGroupIdentifier
setImmediateBypassEventSourceType:
diffAgainstObject:usingDiffBuilder:withDescription:
_allowedContactTypes
_deniedContactTypes
_allowedContactGroups
_deniedContactGroups
_allowedContacts
_deniedContacts
_phoneCallBypassSettings
T@"NSSet",R,C,N,V_allowedContactTypes
T@"NSSet",R,C,N,V_deniedContactTypes
T@"NSSet",R,C,N,V_allowedContactGroups
T@"NSSet",R,C,N,V_deniedContactGroups
T@"NSSet",R,C,N,V_allowedContacts
T@"NSSet",R,C,N,V_deniedContacts
T@"DNDBypassSettings",R,C,N,V_phoneCallBypassSettings
matchesContact:
removeObject:
setAllowedContactTypes:
setDeniedContactTypes:
setAllowedContactGroups:
setDeniedContactGroups:
setAllowedContacts:
setDeniedContacts:
setPhoneCallBypassSettings:
removeAllowedContactMatchingContact:
removeDeniedContactMatchingContact:
T@"NSMutableSet",C,D,N
T@"DNDBypassSettings",C,D,N
meDeviceStatus
meDeviceName
initWithStatus:name:
queryMeDeviceStateWithRequestDetails:completionHandler:
_queue_registerForStateUpdatesIfRequired
meDeviceService:didReceiveMeDeviceState:
hashTableWithOptions:
addEventListener:
count
registerForMeDeviceStateUpdatesWithRequestDetails:completionHandler:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
clientIdentifier
remoteService:didReceiveDoNotDisturbStateUpdate:
remoteService:didChangeActiveModeAssertion:invalidation:
remoteService:didReceiveUpdatedBehaviorSettings:
remoteService:didReceiveUpdatedScheduleSettings:
remoteService:didReceiveUpdatedPairSyncState:
remoteService:didReceiveUpdatedPhoneCallBypassSettings:
remoteService:didReceiveUpdatedPreventAutoReplySetting:
remoteService:didReceiveUpdatedActiveModeAssertion:stateUpdate:
remoteService:didReceiveUpdatedAvailableModes:
remoteService:didReceiveUpdatedAvailableModeIdentifiers:
remoteService:didReceiveUpdatedModes:
remoteService:didReceiveUpdatedModeIdentifiers:
remoteService:didReceiveUpdatedMeDeviceState:
T@"NSString",R,C,N
queryCurrentStateWithCompletionHandler:
addListener:withCompletionHandler:
removeListener:
_calloutQueue
_listeners
_registeredForUpdates
T@"NSString",R,C,N,V_clientIdentifier
dnd_doNotDisturbLocalizationBundle
localizedStringForKey:value:table:
defaultSuppressionType
defaultMinimumBreakthroughUrgency
_initWithConfigurationType:suppressionType:allowedApplicationIdentifiers:deniedApplicationIdentifiers:senderConfiguration:minimumBreakthroughUrgency:hideApplicationBadges:
dictionary
objectForKeyedSubscript:
bundleID
setObject:forKeyedSubscript:
type
suppressionType
allowedApplicationIdentifiers
deniedApplicationIdentifiers
senderConfiguration
minimumBreakthroughUrgency
hideApplicationBadges
numberWithUnsignedInteger:
containsValueForKey:
initWithBundleID:
_exceptionForApplicationIdentifier:thread:
allowedThreads
containsObject:
deniedThreads
exceptionForContactHandle:
matchesContactHandle:
enumerateObjectsUsingBlock:
defaultConfigurationType
_initWithConfigurationType:
allowedApplications
deniedApplications
log:withPrefix:
exceptionForApplication:
exceptionForApplication:thread:
exceptionForApplicationIdentifier:
exceptionForApplicationIdentifier:thread:
exceptionForContact:
_type
_suppressionType
_allowedApplicationIdentifiers
_deniedApplicationIdentifiers
_senderConfiguration
_minimumBreakthroughUrgency
_hideApplicationBadges
TQ,R,N,V_type
TQ,R,N,V_suppressionType
T@"NSDictionary",R,C,N,V_allowedApplicationIdentifiers
T@"NSSet",R,C,N,V_deniedApplicationIdentifiers
T@"DNDSenderConfiguration",R,C,N,V_senderConfiguration
TQ,R,N,V_minimumBreakthroughUrgency
TQ,R,N,V_hideApplicationBadges
T@"NSDictionary",R,C,N
T@"NSSet",R,C,N
configurationOfType:
defaultConfiguration
removeObjectForKey:
removeExceptionForApplicationIdentifier:
_configurationForApplicationIdentifier:
removeExceptionForApplicationIdentifier:thread:
setMinimumBreakthroughUrgency:
setExceptionOfType:forApplicationIdentifier:
setExceptionOfType:forApplicationIdentifier:thread:
setMinimumBreakthroughUrgency:forApplicationIdentifier:
removeExceptionForContactType:
removeExceptionForContactGroup:
removeExceptionForContact:
setSuppressionType:
setAllowedApplicationIdentifiers:
setDeniedApplicationIdentifiers:
setAllowedApplications:
setDeniedApplications:
setSenderConfiguration:
setHideApplicationBadges:
setExceptionOfType:forApplication:
removeExceptionForApplication:
setExceptionOfType:forApplication:thread:
removeExceptionForApplication:thread:
setMinimumBreakthroughUrgency:forApplication:
setExceptionOfType:forContactType:
setExceptionOfType:forContactGroup:
setExceptionOfType:forContact:
hasSecureData
T@"NSDictionary",C,D,N
T@"NSSet",C,D,N
T@"DNDSenderConfiguration",C,D,N
distantPast
UUID
startDate
details
source
initWithUUID:startDate:details:source:
_UUID
_startDate
_details
_source
T@"NSUUID",R,C,N,V_UUID
T@"NSDate",R,C,N,V_startDate
T@"DNDModeAssertionDetails",R,C,N,V_details
T@"DNDModeAssertionSource",R,C,N,V_source
_initWithSettings:
interruptionBehaviorSetting
_initWithInterruptionBehaviorSetting:
_interruptionBehaviorSetting
TQ,R,N,V_interruptionBehaviorSetting
setInterruptionBehaviorSetting:
interruptionBehavior
TQ,R,D,N
setInterruptionBehavior:
_meDeviceStatus
_meDeviceName
TQ,R,N,V_meDeviceStatus
T@"NSString",R,C,N,V_meDeviceName
stringByPaddingToLength:withString:startingAtIndex:
string
descriptionWithIndent:
appendFormat:
diffDescription
array
componentsSeparatedByString:
children
hasDifferences
diffObject:againstObject:
object1
object2
_children
_object1
_object2
_description
T@,R,N,V_object1
T@,R,N,V_object2
T@"NSString",R,C,N,V_description
T@"NSArray",R,C,N
TB,R,N
objectAtIndexedSubscript:
minusSet:
allKeys
intersectSet:
_init
containsDate:
endDate
compare:
dateInterval
initWithDateInterval:
isActiveForDate:
lifetimeType
_dateInterval
T@"NSDateInterval",R,C,N,V_dateInterval
applicationIdentifier
displayName
storeIconURL
cachedIconURL
initWithSource:applicationIdentifier:displayName:storeIconURL:cachedIconURL:
numberWithInteger:
absoluteString
path
allocWithZone:
_initWithAppInfo:
URLWithString:
fileURLWithPath:
_applicationIdentifier
_displayName
_storeIconURL
_cachedIconURL
Tq,R,N,V_source
T@"DNDApplicationIdentifier",R,C,N,V_applicationIdentifier
T@"NSString",R,C,N,V_displayName
T@"NSURL",R,C,N,V_storeIconURL
T@"NSURL",R,C,N,V_cachedIconURL
setSource:
setStoreIconURL:
setCachedIconURL:
setDisplayName:
setApplicationIdentifier:
Tq,D,N
T@"DNDApplicationIdentifier",C,D,N
T@"NSString",C,D,N
T@"NSURL",C,D,N
componentsJoinedByString:
calendarWithIdentifier:
firstWeekday
appendString:
_initWithPeriod:
startTime
endTime
weekdays
_initWithStartTime:endTime:weekdays:
_startTime
_endTime
_weekdays
T@"DNDScheduleTime",R,C,N,V_startTime
T@"DNDScheduleTime",R,C,N,V_endTime
TQ,R,N,V_weekdays
setStartTime:
setEndTime:
setWeekdays:
T@"DNDScheduleTime",C,D,N
initWithBundleID:platform:
platform
_bundleID
_platform
T@"NSString",R,C,N,V_bundleID
TQ,R,N,V_platform
assertion
invalidationDate
reason
reasonOverride
initWithAssertion:invalidationDate:details:source:reason:reasonOverride:
_assertion
_invalidationDate
_reason
_reasonOverride
T@"DNDModeAssertionInvalidationDetails",R,C,N,V_details
TQ,R,N,V_reasonOverride
T@"DNDModeAssertion",R,C,N,V_assertion
T@"NSDate",R,C,N,V_invalidationDate
TQ,R,N,V_reason
previousState
state
initWithPreviousState:state:reason:source:
_previousState
_state
T@"DNDState",R,C,N,V_previousState
T@"DNDState",R,C,N,V_state
deviceWithClass:deviceCapabilities:
_initWithClass:deviceCapabilities:
deviceClass
deviceCapabilities
currentDevice
_deviceClass
_deviceCapabilities
TQ,R,N,V_deviceClass
TQ,R,N,V_deviceCapabilities
date
initWithStartDate:duration:
lifetimeWithDateInterval:
initWithEventUniqueID:occurrenceDate:onlyDuringEvent:
initWithScheduleIdentifier:behavior:
initWithRegion:
doesNotRecognizeSelector:
setWithObjects:
lifetimeWithDuration:
lifetimeWithCurrentLocation
lifetimeUntilEndOfCalendarEventWithUniqueID:occurrenceDate:
lifetimeWithCalendarEventUniqueID:occurrenceDate:
lifetimeMatchingScheduleWithIdentifier:
lifetimeUntilEndOfScheduleWithIdentifier:
lifetimeWithExplicitRegion:
lifetimeForUserRequest
_secureCodingLifetimeClasses
initWithClientIdentifier:auditUUID:timestamp:
timestamp
auditUUID
decodeInt64ForKey:
encodeInt64:forKey:
_auditUUID
_timestamp
T@"NSUUID",R,C,N,V_auditUUID
TQ,R,N,V_timestamp
getIsLocalUserAvailableWithRequestDetails:completionHandler:
isLocalUserAvailableReturningError:
eventUniqueID
occurrenceDate
isOnlyDuringEvent
decodeBoolForKey:
encodeBool:forKey:
_onlyDuringEvent
_eventUniqueID
_occurrenceDate
T@"NSString",R,C,N,V_eventUniqueID
T@"NSDate",R,C,N,V_occurrenceDate
onlyDuringEvent
TB,R,N,GisOnlyDuringEvent,V_onlyDuringEvent
_initWithMinimumBreakthroughUrgency:allowedThreads:deniedThreads:
_allowedThreads
_deniedThreads
T@"NSSet",R,C,N,V_allowedThreads
T@"NSSet",R,C,N,V_deniedThreads
setAllowedThreads:
setDeniedThreads:
defaultTintColorName
initWithName:modeIdentifier:symbolImageName:tintColorName:semanticType:
name
modeIdentifier
symbolImageName
tintColorName
semanticType
identifier
initWithName:modeIdentifier:symbolImageName:tintColorName:semanticType:visibility:identifier:
_name
visibility
dnd_settingsURLWithModeIdentifier:
dnd_setupURLWithSemanticType:
UUIDString
isPlaceholder
_initWithMode:
maxUIAddableModes
defaultMode
placeholderModeFromMode:
settingsURL
setupURL
_symbolImageName
_tintColorName
_modeIdentifier
_semanticType
_visibility
_identifier
T@"NSString",R,C,N,V_symbolImageName
T@"NSString",R,C,N,V_tintColorName
T@"NSString",R,C,N,V_name
Tq,R,N,V_semanticType
T@"NSString",R,C,N,V_modeIdentifier
T@"NSUUID",R,C,N,V_identifier
placeholder
TB,D,N,GisPlaceholder
TQ,R,N,V_visibility
T@"NSURL",R,C,N
setTintColorName:
setSymbolImageName:
setName:
setSecond:
dateComponents
setModeConfiguration:withRequestDetails:completionHandler:
canRemoveModeConfigurationForModeIdentifier:
removeModeConfigurationForModeIdentifier:withRequestDetails:completionHandler:
isEqualToString:
mode
getModeConfigurationsWithRequestDetails:completionHandler:
getModeConfigurationForModeIdentifier:withRequestDetails:completionHandler:
getUserAvailabilityInActiveModeForContactHandle:withRequestDetails:completionHandler:
getAllowedModesForContactHandle:withRequestDetails:completionHandler:
publishStatusKitAvailabilityWithRequestDetails:completionHandler:
getAllModesWithRequestDetails:completionHandler:
getAvailableModesWithRequestDetails:completionHandler:
unsignedIntegerValue
getCloudSyncStateWithRequestDetails:completionHandler:
setCloudSyncPreferenceEnabled:withRequestDetails:completionHandler:
_queue_registerForUpdatesIfRequired
modeConfigurationService:didReceiveAvailableModesUpdate:
syncModeConfigurationsWithRequestDetails:completionHandler:
_createDefaultModeConfigurationForIdentifier:withRequestDetails:error:
registerForModeSelectionUpdatesWithRequestDetails:completionHandler:
allModesReturningError:
initWithEnabledSetting:
initWithMode:configuration:triggers:
setDimsLockScreen:
setAutomaticallyGenerated:
setModeConfiguration:error:
dictionaryWithObjects:forKeys:count:
errorWithDomain:code:userInfo:
removeModeConfigurationForModeIdentifier:error:
modeConfigurationsReturningError:
modeConfigurationForModeIdentifier:error:
isLocalUserAvailableForContactInActiveMode:error:
allowedModesForContactHandle:error:
publishCurrentStatusKitAvailabilityReturningError:
availableModesReturningError:
getSyncPreferenceEnabledReturningError:
getSyncAvailableReturningError:
getSyncEnabledReturningError:
setSyncPreferenceEnabled:error:
syncModeConfigurationsReturningError:
createDefaultDrivingModeConfigurationWithError:
createDefaultSleepingModeConfigurationWithError:
createDefaultWorkoutModeConfigurationWithError:
createModeConfigurationUsingTemplateForModeIdentifier:error:
enabledSetting
isEnabled
_enabledSetting
TQ,R,N,V_enabledSetting
region
detail
initWithRegion:detail:enabledSetting:
_region
_detail
T@"CLCircularRegion",R,C,N,V_region
T@"NSString",R,C,N,V_detail
initWithTimePeriod:creationDate:enabledSetting:
timePeriod
creationDate
defaultScheduleTrigger
triggerWithClientTrigger:creationDate:
initWithTimePeriod:enabledSetting:
_timePeriod
_creationdate
_creationDate
T@"NSDate",R,C,N,V_creationDate
T@"DNDScheduleTimePeriod",R,C,N,V_timePeriod
initWithApplicationIdentifier:enabledSetting:
initWithBundleIdentifier:enabledSetting:
bundleIdentifier
resolveBehaviorForEventDetails:requestDetails:completionHandler:
resolveBehaviorForEventDetails:error:
currentLocale
_initWithContactIdentifier:firstName:middleName:lastName:nickName:organizationName:phoneNumbers:emailAddresses:
contactIdentifier
firstName
middleName
lastName
nickName
organizationName
phoneNumbers
emailAddresses
normalizePhoneNumber:
normalizedPhoneNumbers
value
dnd_privacyObfuscatedString
_redactedDescriptionsForStrings:
length
initWithContactIdentifier:
_contactIdentifier
_firstName
_middleName
_lastName
_nickName
_organizationName
_phoneNumbers
_emailAddresses
T@"NSString",R,C,N,V_contactIdentifier
T@"NSString",R,C,N,V_firstName
T@"NSString",R,C,N,V_middleName
T@"NSString",R,C,N,V_lastName
T@"NSString",R,C,N,V_nickName
T@"NSString",R,C,N,V_organizationName
T@"NSSet",R,C,N,V_phoneNumbers
T@"NSSet",R,C,N,V_emailAddresses
setContactIdentifier:
setFirstName:
setMiddleName:
setLastName:
setNickName:
setOrganizationName:
setPhoneNumbers:
setEmailAddresses:
eventDetails
interruptionSuppression
resolutionReason
activeModeUUID
initWithEventDetails:interruptionSuppression:resolutionReason:activeModeUUID:
_eventDetails
_interruptionSuppression
_resolutionReason
_activeModeUUID
TQ,R,N,V_resolutionReason
T@"NSUUID",R,C,N,V_activeModeUUID
T@"DNDClientEventDetails",R,C,N,V_eventDetails
TQ,R,N,V_interruptionSuppression
suppressionState
activeModeAssertionMetadata
allObjects
activeModeConfiguration
userVisibleTransitionDate
userVisibleTransitionLifetimeType
shortDescription
activeModeIdentifier
initWithSuppressionState:activeModeAssertionMetadata:startDate:userVisibleTransitionDate:userVisibleTransitionLifetimeType:activeModeConfiguration:
setOverrideModeIdentifier:
isActive
activeModeIdentifiers
_activeModeAssertionMetadata
_overrideModeIdentifier
_suppressionState
_userVisibleTransitionDate
_userVisibleTransitionLifetimeType
_activeModeConfiguration
T@"NSUUID",R,C,D,N
TQ,R,N,V_suppressionState
T@"NSArray",R,C,D,N
T@"NSString",R,C,D,N
T@"DNDModeConfiguration",R,C,N,V_activeModeConfiguration
T@"NSDate",R,C,N,V_userVisibleTransitionDate
TQ,R,N,V_userVisibleTransitionLifetimeType
active
TB,R,D,N,GisActive
willSuppressInterruptions
TB,R,D,N
repeatEventSourceBehaviorEnabledSetting
_initWithImmediateBypassEventSourceType:immediateBypassCNGroupIdentifier:repeatEventSourceBehaviorEnabledSetting:
_immediateBypassEventSourceType
_immediateBypassCNGroupIdentifier
_repeatEventSourceBehaviorEnabledSetting
TQ,R,N,V_immediateBypassEventSourceType
T@"NSString",R,C,N,V_immediateBypassCNGroupIdentifier
TQ,R,N,V_repeatEventSourceBehaviorEnabledSetting
setImmediateBypassCNGroupIdentifier:
setRepeatEventSourceBehaviorEnabledSetting:
_initWithDetails:
_initWithIdentifier:
T@"NSString",R,C,N,V_identifier
setIdentifier:
queryStateWithRequestDetails:completionHandler:
stateService:didReceiveDoNotDisturbStateUpdate:
registerForStateUpdatesWithRequestDetails:completionHandler:
queryCurrentStateWithError:
addStateUpdateListener:withCompletionHandler:
removeStateUpdateListener:
_stateUpdateListeners
addStateUpdateListener:error:
removeStateUpdateListener:error:
urgency
sender
threadIdentifier
notifyAnyway
behavior
_initWithIdentifier:bundleIdentifier:type:urgency:sender:threadIdentifier:notifyAnyway:behavior:
shouldAlwaysInterrupt
_bundleIdentifier
_urgency
_sender
_threadIdentifier
_notifyAnyway
_behavior
TB,R,N,V_notifyAnyway
TQ,R,N,V_behavior
T@"NSString",R,C,N,V_bundleIdentifier
TQ,R,N,V_urgency
T@"DNDContactHandle",R,C,N,V_sender
T@"NSString",R,C,N,V_threadIdentifier
setBundleIdentifier:
setType:
setUrgency:
setSender:
setThreadIdentifier:
setNotifyAnyway:
setBehavior:
setShouldAlwaysInterrupt:
TB,D,N
T@"DNDContactHandle",C,D,N
interfaceWithIdentifier:
protocolForProtocol:
setServer:
userInitiated
serial
serviceClass
relativePriority
serviceClass:relativePriority:
remoteTarget
_queue_invalidateConnection
_queue_createConnection
endpointForMachName:service:instance:
connectionWithEndpoint:
setServiceQuality:
setInterface:
setTargetQueue:
setInterfaceTarget:
setActivationHandler:
setInterruptionHandler:
setInvalidationHandler:
configureConnection:
activate
invalidate
_queue_remoteTarget
_queue_connection
_lock
_queuePriority
initWithMode:configuration:triggers:impactsAvailability:dimsLockScreen:created:lastModified:automaticallyGenerated:
_containsSecureTriggers:
configuration
triggers
impactsAvailability
dimsLockScreen
created
lastModified
isAutomaticallyGenerated
isEqualToDate:
laterDate:
_initWithModeConfiguration:
defaultModeConfiguration
allowSmartEntry
mergeWithModeConfiguration:
log:withMessage:
_mode
_configuration
_triggers
_impactsAvailability
_dimsLockScreen
_lastModified
_created
_automaticallyGenerated
_hasSecureData
T@"DNDMode",R,C,N,V_mode
T@"DNDConfiguration",R,C,N,V_configuration
T@"NSArray",R,C,N,V_triggers
TQ,R,N,V_impactsAvailability
TQ,R,N,V_dimsLockScreen
T@"NSDate",R,C,N,V_lastModified
T@"NSDate",R,C,N,V_created
automaticallyGenerated
TB,R,N,GisAutomaticallyGenerated,V_automaticallyGenerated
setMode:
setConfiguration:
setTriggers:
setImpactsAvailability:
setLastModified:
setCreated:
T@"DNDMode",C,D,N
T@"DNDConfiguration",C,D,N
T@"NSArray",C,D,N
T@"NSDate",C,D,N
TB,D,N,GisAutomaticallyGenerated
awakeAfterUsingCoder:
fileURLWithPathComponents:
bundleWithURL:
dnd_locationBundle
deviceIdentifier
initWithClientIdentifier:deviceIdentifier:
_deviceIdentifier
T@"NSString",R,C,N,V_deviceIdentifier
scheduleEnabledSetting
bedtimeBehaviorEnabledSetting
initWithScheduleEnabledSetting:timePeriod:bedtimeBehaviorEnabledSetting:
_scheduleEnabledSetting
_bedtimeBehaviorEnabledSetting
TQ,R,N,V_scheduleEnabledSetting
TQ,R,N,V_bedtimeBehaviorEnabledSetting
setScheduleEnabledSetting:
setTimePeriod:
setBedtimeBehaviorEnabledSetting:
T@"DNDScheduleTimePeriod",C,D,N
detailsWithIdentifier:modeIdentifier:lifetime:reason:
_initWithIdentifier:modeIdentifier:modeConfigurationModifiedDate:lifetime:reason:userVisibleEndDate:
modeConfigurationModifiedDate
lifetime
userVisibleEndDate
detailsWithIdentifier:modeIdentifier:lifetime:
_modeConfigurationModifiedDate
_lifetime
_userVisibleEndDate
T@"NSDate",R,C,N,V_userVisibleEndDate
T@"NSDate",R,C,N,V_modeConfigurationModifiedDate
T@"DNDModeAssertionLifetime",R,C,N,V_lifetime
setModeIdentifier:
setModeConfigurationModifiedDate:
setLifetime:
setReason:
setUserVisibleEndDate:
T@"DNDModeAssertionLifetime",C,D,N
isUserRequested
userRequestedAssertionDetailsWithIdentifier:modeIdentifier:lifetime:
userRequested
TB,R,D,N,GisUserRequested
scheduleIdentifier
_scheduleIdentifier
T@"NSString",R,C,N,V_scheduleIdentifier
takeModeAssertionWithDetails:requestDetails:completionHandler:
invalidateActiveModeAssertionWithInvalidationDetails:reasonOverride:error:
invalidateActiveModeAssertionWithDetails:reasonOverride:requestDetails:completionHandler:
getActiveModeAssertionWithRequestDetails:completionHandler:
getLatestModeAssertionInvalidationWithRequestDetails:completionHandler:
invalidateAllActiveModeAssertionsWithRequestDetails:completionHandler:
getAllModeAssertionsWithRequestDetails:completionHandler:
_registerForAssertionUpdatesIfRequiredWithCompletionHandler:
_handleChangeActiveModeAssertion:invalidation:
modeAssertionService:didReceiveModeAssertionInvalidation:
modeAssertionService:didUpdateActiveModeAssertion:
activeModeAssertionWithError:
registerForAssertionUpdatesWithRequestDetails:completionHandler:
takeModeAssertionWithDetails:error:
invalidateActiveModeAssertionWithError:
latestModeAssertionInvalidationWithError:
invalidateAllActiveModeAssertionsWithError:
allModeAssertionsWithError:
addAssertionUpdateListener:withCompletionHandler:
removeAssertionUpdateListener:
_assertionUpdateListeners
_activeAssertion
_activeAssertionLock
_activeAssertionQueried
addAssertionUpdateListener:error:
removeAssertionUpdateListener:error:
_initWithContactIdentifier:type:value:
_value
T@"NSString",R,C,N,V_value
setValue:
activateModeWithDetails:withRequestDetails:completionHandler:
invalidateModeAssertionWithUUID:withRequestDetails:completionHandler:
activeModeAssertionWithRequestDetails:completionHandler:
modeSelectionService:didReceiveUpdatedActiveModeAssertion:stateUpdate:
modeSelectionService:didReceiveModesUpdate:
modeSelectionService:didReceiveAvailableModesUpdate:
activateModeWithDetails:error:
invalidateModeAssertionWithUUID:error:
allModesWithError:
availableModesWithError:
_modeConfigurationService
getPreventAutoReplyReturningError:
getPreventAutoReplyWithRequestDetails:completionHandler:
setPreventAutoReply:withRequestDetails:completionHandler:
getCloudSyncStateReturningError:
getPairSyncStateWithRequestDetails:completionHandler:
setPairSyncPreferenceEnabled:withRequestDetails:completionHandler:
didChangeFocusStatusSharingSettingForApplicationIdentifier:withRequestDetails:completionHandler:
globalConfigurationService:didReceiveUpdatedPairSyncState:
globalConfigurationService:didReceiveUpdatedPreventAutoReplySetting:
globalConfigurationService:didReceiveUpdatedPhoneCallBypassSettings:
getStateDumpWithRequestDetails:completionHandler:
registerForGlobalConfigurationUpdatesWithRequestDetails:completionHandler:
isAutoReplyPrevented
setPreventAutoReply:error:
getPhoneCallBypassSettingsReturningError:
setPhoneCallBypassSettings:error:
isCloudSyncActive
setCloudSyncPreferenceEnabled:error:
getPairSyncStateReturningError:
setPairSyncPreferenceEnabled:error:
didChangeFocusStatusSharingSettingForApplicationIdentifier:
getStateDumpReturningError:
dnd_defaultSettingsURL
dnd_defaultSetupURL
getAppInfoForBundleIdentifier:withRequestDetails:completionHandler:
getAppInfoForBundleIdentifiers:withRequestDetails:completionHandler:
getAppInfoForBundleIdentifier:error:
getAppInfoForBundleIdentifiers:error:
activeDateInterval
initWithClientIdentifier:modeIdentifier:lifetimeType:activeDateInterval:userVisibleEndDate:
_lifetimeType
_activeDateInterval
TQ,R,N,V_lifetimeType
T@"NSDateInterval",R,C,N,V_activeDateInterval
registerForSettingsUpdatesWithRequestDetails:completionHandler:
deliverActiveModeAssertionUpdate:invalidation:clientIdentifiers:
deliverStateUpdate:
deliverUpdatedBehaviorSettings:
deliverUpdatedScheduleSettings:
deliverActiveModeAssertion:stateUpdate:clientIdentifiers:
deliverAllModes:
deliverAvailableModes:
deliverUpdatedPairSyncState:
deliverUpdatedPhoneCallBypassSettings:
deliverUpdatedPreventAutoReplySetting:
deliverMeDeviceState:
setClient:
setClientMessagingExpectation:
queryStateForUpdateWithRequestDetails:completionHandler:
getBehaviorSettingsWithRequestDetails:completionHandler:
setBehaviorSettings:withRequestDetails:completionHandler:
getScheduleSettingsWithRequestDetails:completionHandler:
setScheduleSettings:withRequestDetails:completionHandler:
_monitorQueue_invalidateMonitorConnection
_monitorQueue_createMonitorConnection
_setMonitorState:
_monitorQueue_monitorTarget
bs_map:
removeEventListener:
_monitorQueue_monitorService
_monitorState
_monitorQueuePriority
_monitorQueue
_assertionMonitorRequestDetails
_stateMonitorRequestDetails
_settingsMonitorRequestDetails
_modeIdentifiersMonitorRequestDetails
_globalConfigurationMonitorRequestDetails
_meDeviceStateMonitorRequestDetails
_eventListeners
_lastReceivedState
_queue_registerForSettingsUpdatesIfRequired
settingsService:didReceiveUpdatedBehaviorSettings:
settingsService:didReceiveUpdatedPhoneCallBypassSettings:
settingsService:didReceiveUpdatedScheduleSettings:
behaviorSettingsReturningError:
setBehaviorSettings:error:
phoneCallBypassSettingsReturningError:
scheduleSettingsReturningError:
setScheduleSettings:error:
configurationForModeIdentifier:error:
setConfiguration:forModeIdentifier:error:
addSettingsUpdateListener:withCompletionHandler:
removeSettingsUpdateListener:
_settingsUpdateListeners
_globalConfigurationService
setBehaviorSettings:returningError:
setPhoneCallBypassSettings:returningError:
setScheduleSettings:returningError:
addSettingsUpdateListener:error:
removeSettingsUpdateListener:error:
@16@0:8
B16@0:8
@24@0:8^{_NSZone=}16
v24@0:8@16
@24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@32@0:8Q16Q24
Q16@0:8
B24@0:8@16
v24@0:8Q16
v16@0:8
B32@0:8B16B20^@24
@"NSObject<OS_dispatch_queue>"
@"NSString"
@72@0:8@16@24@32@40@48@56@64
@20@0:8B16
v40@0:8@16@24@32
@"NSMutableSet"
@"DNDBypassSettings"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@24
v32@0:8@16Q24
v28@0:8@16B24
v32@0:8@"DNDRemoteServiceConnection"16@"DNDStateUpdate"24
v40@0:8@"DNDRemoteServiceConnection"16@"DNDModeAssertion"24@"DNDModeAssertionInvalidation"32
v32@0:8@"DNDRemoteServiceConnection"16@"DNDBehaviorSettings"24
v32@0:8@"DNDRemoteServiceConnection"16@"DNDScheduleSettings"24
v32@0:8@"DNDRemoteServiceConnection"16Q24
v32@0:8@"DNDRemoteServiceConnection"16@"DNDBypassSettings"24
v28@0:8@"DNDRemoteServiceConnection"16B24
v40@0:8@"DNDRemoteServiceConnection"16@"DNDModeAssertion"24@"DNDStateUpdate"32
v32@0:8@"DNDRemoteServiceConnection"16@"NSArray"24
v32@0:8@"DNDRemoteServiceConnection"16@"DNDMeDeviceState"24
v24@0:8@?16
v32@0:8@16@?24
@"NSHashTable"
@24@0:8Q16
@72@0:8Q16Q24@32@40@48Q56Q64
Q24@0:8@16
Q32@0:8@16@24
@"NSMutableDictionary"
@"DNDMutableSenderConfiguration"
v32@0:8Q16@24
v40@0:8Q16@24@32
v32@0:8Q16Q24
@48@0:8@16@24@32@40
@"NSUUID"
@"NSDate"
@"DNDModeAssertionDetails"
@"DNDModeAssertionSource"
@32@0:8Q16@24
@"NSMutableArray"
@"NSDateInterval"
@56@0:8q16@24@32@40@48
q16@0:8
@"DNDApplicationIdentifier"
@"NSURL"
v24@0:8q16
@40@0:8@16@24Q32
@"DNDScheduleTime"
@32@0:8@16Q24
@64@0:8@16@24@32@40Q48Q56
@"DNDModeAssertion"
@"DNDModeAssertionInvalidationDetails"
@48@0:8@16@24Q32q40
@"DNDState"
@24@0:8d16
@32@0:8@16@24
B24@0:8^@16
@36@0:8@16@24B32
@40@0:8Q16@24@32
@56@0:8@16@24@32@40q48
@72@0:8@16@24@32@40q48Q56@64
B32@0:8@16^@24
@24@0:8^@16
@32@0:8@16^@24
B28@0:8B16^@20
@40@0:8@16@24^@32
@"CLCircularRegion"
@"DNDScheduleTimePeriod"
@80@0:8@16@24@32@40@48@56@64@72
@"NSSet"
@48@0:8@16Q24Q32@40
@"DNDClientEventDetails"
@64@0:8Q16@24@32@40Q48@56
@"NSArray"
@"DNDModeConfiguration"
@40@0:8Q16@24Q32
@76@0:8@16@24Q32Q40@48@56B64Q68
@"DNDContactHandle"
v20@0:8B16
v32@0:8@"DNDRequestDetails"16@?<v@?@"NSNumber"@"NSError">24
@"BSServiceConnection"
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"BSServiceQuality"
v40@0:8@"<DNDDiffBuilding>"16@"DNDDiffBuilder"24@"NSString"32
@40@0:8@16@24@32
@76@0:8@16@24@32Q40Q48@56@64B72
@"DNDMode"
@"DNDConfiguration"
@48@0:8@16@24@32Q40
@64@0:8@16@24@32@40Q48@56
@"DNDModeAssertionLifetime"
@40@0:8@16Q24^@32
{atomic_flag="_Value"AB}
@40@0:8@16Q24@32
@"DNDModeConfigurationService"
Q24@0:8^@16
@24@0:8q16
@56@0:8@16@24Q32@40@48
v32@0:8@"DNDRequestDetails"16@?<v@?@"NSNumber"@"DNDModeAssertion"@"NSError">24
v32@0:8@"DNDRequestDetails"16@?<v@?@"NSNumber"@"DNDMeDeviceState"@"NSError">24
Vv40@0:8@16@24@32
Vv40@0:8@"DNDModeAssertion"16@"DNDModeAssertionInvalidation"24@"NSArray<__NSString__>"32
Vv24@0:8@16
Vv24@0:8@"DNDStateUpdate"16
Vv24@0:8@"DNDBehaviorSettings"16
Vv24@0:8@"DNDScheduleSettings"16
Vv40@0:8@"DNDModeAssertion"16@"DNDStateUpdate"24@"NSArray<__NSString__>"32
Vv24@0:8@"NSArray<__DNDMode__>"16
Vv24@0:8@"NSNumber"16
Vv24@0:8@"DNDBypassSettings"16
Vv24@0:8@"DNDMeDeviceState"16
v40@0:8@16@24@?32
v40@0:8@"DNDClientEventDetails"16@"DNDRequestDetails"24@?<v@?@"DNDClientEventBehavior"@"NSError">32
v48@0:8@16@24@32@?40
v40@0:8@"DNDModeAssertionDetails"16@"DNDRequestDetails"24@?<v@?@"DNDModeAssertion"@"NSError">32
v48@0:8@"DNDModeAssertionInvalidationDetails"16@"NSNumber"24@"DNDRequestDetails"32@?<v@?@"DNDModeAssertionInvalidation"@"NSError">40
v32@0:8@"DNDRequestDetails"16@?<v@?@"DNDModeAssertion"@"NSError">24
v32@0:8@"DNDRequestDetails"16@?<v@?@"DNDModeAssertionInvalidation"@"NSError">24
v32@0:8@"DNDRequestDetails"16@?<v@?@"NSArray<__DNDModeAssertion__>"@"NSError">24
v32@0:8@"DNDRequestDetails"16@?<v@?@"DNDState"@"NSError">24
v32@0:8@"DNDRequestDetails"16@?<v@?@"DNDBehaviorSettings"@"NSError">24
v40@0:8@"DNDBehaviorSettings"16@"DNDRequestDetails"24@?<v@?@"NSNumber"@"NSError">32
v32@0:8@"DNDRequestDetails"16@?<v@?@"DNDScheduleSettings"@"NSError">24
v40@0:8@"DNDScheduleSettings"16@"DNDRequestDetails"24@?<v@?@"NSNumber"@"NSError">32
v40@0:8@"DNDModeConfiguration"16@"DNDRequestDetails"24@?<v@?@"NSNumber"@"NSError">32
v40@0:8@"NSString"16@"DNDRequestDetails"24@?<v@?@"NSNumber"@"NSError">32
v32@0:8@"DNDRequestDetails"16@?<v@?@"NSArray<__DNDModeConfiguration__>"@"NSError">24
v40@0:8@"NSString"16@"DNDRequestDetails"24@?<v@?@"DNDModeConfiguration"@"NSError">32
v32@0:8@"DNDRequestDetails"16@?<v@?@"NSArray<__DNDMode__>"@"NSError">24
v40@0:8@"DNDContactHandle"16@"DNDRequestDetails"24@?<v@?@"NSArray<__NSString__>"@"NSError">32
v40@0:8@"DNDContactHandle"16@"DNDRequestDetails"24@?<v@?@"NSNumber"@"NSError">32
v32@0:8@"DNDRequestDetails"16@?<v@?@"NSString"@"NSError">24
v40@0:8@"DNDModeAssertionDetails"16@"DNDRequestDetails"24@?<v@?@"NSNumber"@"NSError">32
v40@0:8@"NSUUID"16@"DNDRequestDetails"24@?<v@?@"NSNumber"@"NSError">32
Vv40@0:8@16@24@?32
v40@0:8@"NSNumber"16@"DNDRequestDetails"24@?<v@?@"NSNumber"@"NSError">32
v32@0:8@"DNDRequestDetails"16@?<v@?@"NSDictionary"@"NSError">24
Vv40@0:8@"NSString"16@"DNDRequestDetails"24@?<v@?@"NSNumber"@"NSError">32
v40@0:8@"NSString"16@"DNDRequestDetails"24@?<v@?@"DNDAppInfo"@"NSError">32
v40@0:8@"NSArray<__NSString__>"16@"DNDRequestDetails"24@?<v@?@"NSArray<__DNDAppInfo__>"@"NSError">32
v32@0:8@"DNDRequestDetails"16@?<v@?@"DNDMeDeviceState"@"NSError">24
v48@0:8@"NSNumber"16@"NSNumber"24@"DNDRequestDetails"32@?<v@?@"NSNumber"@"NSError">40
B40@0:8@16@24^@32
@"DNDGlobalConfigurationService"
