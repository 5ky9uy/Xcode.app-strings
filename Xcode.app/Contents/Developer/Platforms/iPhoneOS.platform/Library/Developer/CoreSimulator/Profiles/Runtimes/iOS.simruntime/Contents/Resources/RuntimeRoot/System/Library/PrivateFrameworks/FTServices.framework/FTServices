@(#)PROGRAM:FTServices  PROJECT:FaceTime Services-
_kIDSServerBagFinishedLoadingNotification
FTMessageDeliveryNoResultCodeError
FTMessageDelivery
Service
Delivery
Should retry!
Warning
IDSFoundation
Failed retrying message: %@
com.apple.imagent.http-delivery
FaceTime
Network state changed
push
auth
x-auth-user-id
dictionary
x-auth-user-id%@
x-%@-cert%@
x-%@-nonce%@
x-%@-sig%@
v16@?0@"FTMessageQueue"8
apns-webtunnel-blacklisted-topics
com.apple.registration
forceReversePushIDQuery
WebTunnel
Message topic (%@) is in the list of blocklisted topics (%@)
We do not meet the version requirements for web tunnel ID queries
This query is not important enough to perform a web tunnel ID query
We are in backoff mode 
Server gave us 0 quota to use this feature
Diceroll Was %ld
Diceroll Sucesss, dual query will be performed
Diceroll failed
DualDeliveryBackOffDate
We have a cached vale for server backoff mode
Back off End Date is %@
Back off Interval is in the past, we are good to go
Back off Interval is in the future, we are in backoff
com.apple.identityservicesd
Incoming request to send a dualMode message %@
Dequeing message if needed
Message Allow Dual Delivery
Server says yes for APS delivery, lets go ahead and use that
Not allowed to use APS delivery, using HTTP
%@=%@
v32@?0@8@16^B24
Web Tunnel Response got %ld
Web Tunnel Query was successful; passing along the completion information
Unknown Error, Falling back to HTTP
v8@?0
v40@?0@"IDSBaseMessage"8@"NSError"16q24@"NSDictionary"32
apns-ids-query-min-version
Server Bag provided us with %d Web Tunnel Version
Server Bag has no value for Min Version, using the default: %f
apns-ids-query-percentage
Server Bag provided us with %d Web Tunnel Percentage
Server Bag has no value for percentage, using the default: %f percentage
apns-ids-query-wait-time
Server Bag provided us with a wait time interval of %f 
Server Bag has no value for wait time interval , using the default: %f interval
APSErrorDomain
ApplePushService
sigs
push-token
auth-token
name
version
flags
Nonce
Signature input is %d bytes (%@)
Unknown digest type provided as input to digest generation function -- returning empty digest { digestType: %ld }
No digest generated { signatureInputDataLength: %lu, digestType: %ld }
bag-key
Appending %d length header for %@ segment
Appending %d bytes for %@ segment
Appending no bytes for %@ segment
query-string
body
1.2.11
__kFaceTimeDeviceRegistrationStateChangedNotification
__kFaceTimeDeviceRegistrationCapabilityChangedNotification
__kFaceTimeDeviceCapabilityChangedNotification
__kFaceTimeDeviceSIMInsertedNotification
__kFaceTimeDeviceSIMRemovedNotification
__kFaceTimeDeviceRestictionsChangedNotification
__kFTCTRegistrationStatusCanRegisterKey
__kFTCTRegistrationStatusPhoneNumberKey
__kFTCTRegistrationStatusIMSIKey
__kFTCTRegistrationStatusPLMNKey
__kFTCTRegistrationStatusChangedNotification
AllowsFaceTimeAudio
com.apple.facetime
ForceMakeBeforeBreak
Unnamed Device
%@,%@,%@
UMUserManager
UserManagement
PKCanMakePaymentsForIDS
PassKitCore
PKSupportsManateeForAppleCashForIDS
PKSupportsRegionForAppleCashForIDS
sp_IDS_supportsIDSRegistrationPropertySupportsFMDV2
SPOwner
DAManager
DigitalAccess
PKShareableCredentialsSupportsHarmony
NISession
NearbyInteraction
hw.cpufamily
FTErrorDomain
FTServicesSuppressServiceErrorDialogsPropertyKey
Web Tunnel Message Completed With Respone Headers %@
FTSelectedPNRSubscriptionChangedDistributedNotification
<%@: %p phoneNumber: %@, dualSIMCapability: %ld, selectedContext: %@, subsriptionInfo: %@, activeSubscriptionInfo: %@>
Network
dataActiveAndReachable: return YES
Updating critical reliability state from: %@ to: %@
FTServiceStatusDidChangeNotification
FTServiceStatusNotifyRegister
v20@?0i8Q12
SCNetworkReachabilityCreateWithName
SystemConfiguration
SCNetworkReachabilityCreateWithAddress
localWiFiStatusForFlags
networkStatusForFlags
FTEmbeddedReachability.m
connectionRequired called with NULL reachabilityRef
SCNetworkReachabilityGetFlags
currentNetworkStatus called with NULL reachabilityRef
EmbeddedReachability
x-apple-apns-dual-mode-delivery-type
application/x-apple-plist
com.apple.ids
x-test-opts
anisette-headers-global-timeout
anisette-headers-lenient-timeout
AKAppleIDSession
AuthKit
com.apple.ids.ftauthkitmanager
AuthKit - gathering headers
AuthKit - handling response
AuthKit - shouldRetry: %@
d24@?0q8d16
Cannot send message: Empty URL requested for message: %@, forcing a bag load
 Query parameters: %@
 Query string: %@
Generated final URL: %@
POST
Headers
       User Agent: %@
FaceTime.Verbose
%@ %@
            Agent: %@
Accept-Language
gzip
accept-encoding
user-agent
content-encoding
content-type
content-length
       %@: %@
MessageDelivery
Message with ID %@ not found in queue.  Abandoning anisette header collection.
anisette-headers-disabled
anisette headers are required for messageType %@ but disabled by the server bag anisette-headers-disabled
v16@?0@"NSDictionary"8
v16@?0@?<v@?>8
************* Couldn't gather Anisette headers %@ *************
x-apple-i-md
x-apple-i-md-m
<redacted>
v12@?0B8
Exception processing result: %@   for message: %@
error = %@
Message with ID %@ not found in queue.  Abandoning URL request.
Created URL Request: %@  from URL: %@
Delivering message %lu to URL: %@
%lu Message body: %@
FTMessageDelivery_HTTP.m
Force cellular: %@
x-bag-refresh
%lu Finished URL request: %p
%lu Information about finished URL request: %@
X-Apple-Splunk-Hint
Registration
%lu Information about response headers: %@
Connection failed with error: %@
FTMessageDelivery failed! (HTTP Status Code: %d) Error (%@:%d): %@ %@
... no error, ignoring...
Response
  headers: %@
  status code: %d
status
retry-interval
current-timestamp-ms
message
(Not Loggable)
sent dictionary: %@
         result: %@
    status code: %d
v48@?0@"NSURLResponse"8q16@"NSData"24@"NSError"32@"NSDictionary"40
do-http-pipelining
max-concurrent-connections
do-http-keep-alive
http-keep-alive-idle-timeout-wifi-millis
http-keep-alive-idle-timeout-cell-millis
Failing message, empty url request
v16@?0@"NSURLRequest"8
%@ Cancelling message delivery! invalid message!
%@ Message body: %@
%@ Cancelling message delivery! Missing keys: %@
%@ Message not being delivered, airplane mode is enabled
Message timed out, but we're going to wait for CFNetwork: %@
Queue timed out delivery for message: %@
Cancelling message in the queue: %@
We're out of airplane mode, and we have a pending retry
_CFNetworkCopyPreferredLanguageCode
CFNetwork
Using server bag anisetteHeaderLenientTimeout: %f second(s)
Using server bag anisetteHeaderGlobalTimeout: %f second(s)
md-retry-start-interval
md-retry-attempts
APSOutgoingMessage
APSConnection
APSConnectionOverrideNamedDelegatePort
Created APSConnection: %p  (Max size: %d  Environment: %@)
Cannot map Message: %@   no ID!
none
Mapping messageID: %@  message: %@   APSMessage: %@   timeout: %f  timeoutSelector: %@
No timer specified for message ID: %@
Missing APS Message for message ID: %@
Missing FTMessage for message ID: %@
Missing body for message ID: %@
_clearMapForMessageID: %@
  => Message ignores max retry count set on server bag. Keep retrying (current retires %d). Has received courier ack? %@
  => Message retried too many times (%d), not retrying anymore. Has received courier ack? %@
Noting message failed: %@   (Request ID: %@  Retries: %d  Retry Allowed: %@  Wants Retry: %@)
FTMessageDelivery Sending SOS for APS failure that recieved response code: (HTTP Status Code: %d)
SOS Metric Domain (%d), sos type (%d), error code (%d), url (%@)
  => Will retry message: %@ in %f seconds
Informing delegate about message %@ with resultCode %ld
Noting message success: %@   (Request ID: %@   %d remaining)
Noting message ack'd: %@   (Request ID: %@   %d remaining)
   => Setting ack timeout time, this will use APS retries
Message has used %ld retries, Retry timeout time with multiplier will be %f
   => Setting send timeout time: %f
Noting message sent: %@   (Request ID: %@  Remaining: %d  Attempt: %d)
Sent outgoing message: %@ to command: %@   (Request ID: %@   Connection: %@)
Could not generate APSMessage for message: %@
Timed out waiting for server ack for message: %@   (Request ID: %@)
Timed out waiting for server response for message: %@   (Request ID: %@)
Missing message for retry!  (timer: %@   messageID: %@)
Starting retry for message: %@   (Request ID: %@)
Timed out waiting for server response after final grace period for message: %@   (Request ID: %@)
v32@?0@8Q16^B24
Enabling required topics: %@
  => Skipping, already enabled
Cannot send message: Empty topic requested for message: %@
Building URL request with topic: %@  bagKey: %@
Body: %@
Final delivery payload: %@
Message sent as non-binary push. This is never expected and probably points to memory corruption.
Sending message: %@ as binary push
invalidating: %@
Requesting async send: %@
Created APSOutgoingMessage body: %@
Delivering message to command: %@
CommandID
MessageIdentifier
GUIDTRACE
OUTGOING-APS_DELIVERY:%@ SERVICE:%@
FaceTimeDelivery
Message body: %@ [guid: %@]
MessageGUID
IDS OutgoingPushSent
Failing message, empty message
Nothing left in queue, done
Server bag is not loaded, waiting for it
 => Server is available
 => Starting load
 => Already loading
 => Server not available
 => Server bag not needed, proceeding
We're already busy, not pulling from queue
Cancelling message delivery! invalid message!
Message body: %@
Cancelling message delivery! Missing keys: %@
Message not being delivered, airplane mode is enabled
Removed message: %@   apsMessage: %@
Message: %@ not in queue.   Current message: %@
Adding message to the queue: %@
  Busy delivering: %@
Server bag loaded
received response dictionary: %@
Response Headers: %@
no message found, map reads: %@
Topic
IDS IncomingPushReceived
Received an unknown object for kBodyIDKey
Error decompressing body: %@  (Data: %@)
received response code: %@  response body: %@
  Found internal status code of: %@
Exception processing status code from result body: %@   for message: %@
  This Message Wants Multiple responses
  This Message responds to receiving updates for multipleMessages
 More To Come, Not done yet
  Last message Has Been acknowledged
Server ACK'd outgoing message: %@      (Request ID: %@)
   message: %@ wants response: %@
message delivery failed {error: %@, retryBehavior: %d}
FTMessageDelivery failed! Error (%@:%d): %@ %@
APSConnection %@  gave me a connection size of: %d  which doesn't pass our sanity size of: %ld   ignoring
APSConnection %@  gave me a connection large size of: %d  which doesn't pass our sanity size of: %ld   ignoring
Server Bag provided us with %d retries
Server Bag has no value for retries, using the default: %ld retries
Server Bag provided us with a retry interval of %f 
Server Bag has no value for interval , using the default: %f interval
com.apple.icloud.presence.channel.management
scReq
scRes
%@:b
Passed in bogus info to FTIDSMessage (%@:%@:%@:%@)
retry-count
x-push-token
x-protocol-version
x-id-self-uri
__kFTEntitlementStatusChangedNotification
FTUserConfigurationSelectedSubscriptionLabelDidChange
subregions
iso-2
label
base-phone-number
[FTRegion] Label: %@   ISO: %@    BaseNumber: %@  Region ID: %@
__kFTRegionListFinishedLoadingNotification
com.apple.facetime-region-query
RegionSupport
Succeeded loading region information
RegionSupport.Verbose
   Region info: %@
   Loaded region: %@
Failed querying regions: %@  code: %ld
vc-profile-get-region-metadata
accept-language
regions
ds-session-token-grace-period
bundleRef
profile-id
profileID
self-handle
handles
com.apple.imcore
originalUsername
alert
_properties
ACMonitoredAccountStore
Accounts
B16@?0@"ACAccount"8
v20@?0B8@"NSError"12
v24@?0@"ACAccountType"8@"NSError"16
com.apple.private.alloy.itunes
v16@?0@"IMUserNotification"8
ACAccount
v84@?0@"NSString"8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56@"NSNumber"64B72B76B80
v24@?0q8@"NSError"16
v24@?0@"ACAccount"8@"NSError"16
ACAccountCredential
iMessage
Calling
iTunes
iCloud
account services
Enter the password for your Apple ID to continue using %@ on this %@:
FTSLocalizable
Generic Service Apple ID alert body: Enter the password for your Apple ID to continue using account services on this Mac: username
AARenewShouldPostFollowUp
__ksPasswordPromptUserNotificationIdentifier
Password alert title: iCloud
%@ Password
DaemonCoreLocalizable
Alert title: %@ password (arg: service name)
Password
Text label: password
Log In
Button title: login
Cancel
%@ Login
Alert title:login (arg: service name)
Login ID:
Text label: loginid
Password:
Forgot Password\U2026
Button title: Forgot Password button
Remember this password in my keychain
Remember password
Messages can\U2019t log in to %@ because your login ID or password is incorrect.
Alert message:badpasslogin (arg:account name)
Please enter your password for %@.
Alert message:login (arg:account name)
FTPasswordManager
-[FTPasswordManager acAccountWithProfileID:username:accountStore:]
ACAccountTypeIdentifierIdentityServices
ACAccountTypeIdentifierGameCenter
(nil auth token)
(empty auth token)
%@...
(short auth token)
ACAccountTypeIdentifierIDMS
Multiway
com.apple
kACRenewCredentialsShouldForceKey
kACRenewCredentialsReasonStringKey
kACRenewCredentialsAppleIDServiceTypeKey
kACRenewCredentialsProxiedAppBundleIDKey
kACRenewCredentialsShouldAvoidUIKey
/System/Library/PrivateFrameworks/IMDaemonCore.framework
FT URL  Message Completed With Respone Headers %@
Should retry!
...Should retry
No message to retry -- returning
Failed retrying message: %@
...Failed retrying
Network state changed
Timestamp received %@, delta %f servertimestamp %@ newServerTimestamp %@
Failed to sign message {message: %@, signingSession: %@, error: %@}
Signing message: %@
   Single signing for: %@
   Multiple signatures for: %@
REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s
   adding userID: %@
   result dictionary: %@
Setting timeout for %f seconds from now  (Message: %@)
Queue timeout hit for message: %@
Message topic (%@) is in the list of blocklisted topics (%@)
We do not meet the version requirements for web tunnel ID queries
This query is not important enough to perform a web tunnel ID query
We are in backoff mode 
Server gave us 0 quota to use this feature
Diceroll Was %ld
Diceroll Sucesss, dual query will be performed
Diceroll failed
We have a cached vale for server backoff mode
Back off End Date is %@
Back off Interval is in the past, we are good to go
Back off Interval is in the future, we are in backoff
Incoming request to send a dualMode message %@
Dequeing message if needed
Message Allow Dual Delivery
Server says yes for APS delivery, lets go ahead and use that
Not allowed to use APS delivery, using HTTP
Web Tunnel Response got %ld
Web Tunnel Query was successful; passing along the completion information
Unknown Error, Falling back to HTTP
Server Bag provided us with %d Web Tunnel Version
Server Bag has no value for Min Version, using the default: %f
Server Bag provided us with %d Web Tunnel Percentage
Server Bag has no value for percentage, using the default: %f percentage
Server Bag provided us with a wait time interval of %f 
Server Bag has no value for wait time interval , using the default: %f interval
Signature input is %d bytes (%@)
Unknown digest type provided as input to digest generation function -- returning empty digest { digestType: %ld }
No digest generated { signatureInputDataLength: %lu, digestType: %ld }
Appending %d length header for %@ segment
Appending %d bytes for %@ segment
Appending no bytes for %@ segment
Succeeded verifying signature for: %@
Failed verifying signature with error: %@
Failed signing  with error: %@
Succeeded signing: %@
Setting CoreTelephonyClient delegate to start receiving notifications { self: %@, coreTelephonyClient: %@ }
FTA isn't allowed, disabled
FTA isn't allowed, managed profile doesn't allow it
FTMW isn't allowed, disabled
FTMW isn't allowed, managed profile doesn't allow it
Checked FTA support in process {supportsFT: %@, carrierOverrideFTA: %@, GT: %@}
Conferencing isn't allowed, disabled
Conferencing isn't allowed, managed profile doesn't allow it
Received phone number registration ready state change callback { state: %@, context: %@ }
Received phone number changed delegate callback { context: %@ }
Phone number registration state changed -- posting notification { notification: %@, state: %@ } 
No change to phone number registration state -- not posting notification { lastState: %@, state: %@ }
Returning telephony network information { networkInformation: %@ }
Error reading telephony network information { key: %@, value: %@, error: %@ }
No value found for telephony network key { key: %@ }
Lockdown became activated, let's notify
Registering %@ for lockdown changes
Supports UWB: %@
Web Tunnel Message Completed With Respone Headers %@
Determined whether phone numbers are equivalent { phoneNumber: %@, existingPhoneNumber: %@, equivalent: %@ }
Subscription info did change -- clearing cached selected phone number registration subscription
Phone number changed -- clearing cached selected phone number registration subscription { context: %@ }
Phone number became available -- clearing cached selected phone number registration subscription { context: %@ }
Active subscriptions did change -- clearing cached selected phone number registration subscription
Dual SIM capability did change -- clearing cached selected phone number registration subscription
Posting distributed notification to invalidate selected phone number subscription caches in other processes
Determined if provided subscription context is selected IDS phone number subscription context { context: %@, selectedContext: %@, persistedLabel: %@, isMatching: %@ }
Determined if device is in dual phone identity mode { isDualIdentity: %@, dualSIMCapability: %ld, isDeviceInDualPhoneIdentityMode: %@ }
Determined that device has entered dual identity mode { subscriptionInfo: %@ }
dataActiveAndReachable: return YES
Updating critical reliability state from: %@ to: %@
Updating supported service status { iMessageSupported: %@, faceTimeAudioSupported: %@, faceTimeMultiwaySupported: %@, supportedServicesFlags: %llu }
Reachability Flag Status: %c%c %c%c%c%c%c%c%c %s
AuthKit - gathering headers
AuthKit - received headers, count: %lu
AuthKit - handling response
AuthKit - shouldRetry: %@
Cannot send message: Empty URL requested for message: %@, forcing a bag load
 Query parameters: %@
 Query string: %@
Generated final URL: %@
Building URL request with URL: %@
Headers
       User Agent: %@
            Agent: %@
Message with ID %@ not found in queue.  Abandoning anisette header collection.
anisette headers are required for messageType %@ but disabled by the server bag anisette-headers-disabled
************* Couldn't gather Anisette headers for %@ *************
************* Couldn't gather Anisette headers %@ *************
       %@: %{private}@
Exception processing result: %@   for message: %@
Cannot send nil message
Requesting async send: %@
error = %@
Message with ID %@ not found in queue.  Abandoning URL request.
Created URL Request: %@  from URL: %@
%s:%d %{private}@
Delivering message %lu to URL: %@
Force cellular: %@
**** Server sent status code header codes to refresh the bag, reloading IDS and iMessage bags ****
**** Server sent status code header codes to refresh the bag (Interval: %d), reloading IDS and iMessage bags ****
  * Sending refresh, we're outside our interval: %d  (Last date: %@)
  * Not refreshing, we're still inside our interval: %d (Laste date: %@)
%lu Finished URL request: %p
Response: %p
           Response: %@
       Replied Code: %d
 Result Data Length: %d
              Error: %@
Connection failed with error: %@
FTMessageDelivery failed! (HTTP Status Code: %d) Error (%@:%d): %@ %@
FTMessageDelivery Sending SOS for request to url: (%@) that recieved response code: (HTTP Status Code: %d)
SOS Metric Domain (%d), sos type (%d), error code (%d), url (%@)
... this was a remote loader crash
... no error, ignoring...
... IDS message failed sending
... IDS message timed out
... we're done here, code: %d
... we should retry this
... not going to retry, we're done
  headers: %@
  status code: %d
Result parse error: %@
Result status code: %d
SplunkHint: %{public}@
ServerErrorDetail: %{public}@
Server requested retry with delay, will retry after %f seconds
Setting server timestamp %@
Kicked off server retry
Unable to retry this message any further
sent dictionary: %@
         result: %@
    status code: %d
Failing message, empty url request
Failing message, empty url request for URL: %@
Nothing left in queue, done
Server bag is not loaded, waiting for it
 => Server is available
 => Starting load
 => Already loading
 => Server not available
%@ Message not being delivered, invalid message
%@ Cancelling message delivery! invalid message!
%@ Message not being delivered, missing some required keys: %@
%@ Cancelling message delivery! Missing keys: %@
%@ Message not being delivered, airplane mode is enabled
Cleaning out url connection
Should retry, already tried: %d times
Not retrying right now, we're in airplane mode with no wifi
Retrying - trying again in %f seconds
Gave up, too many attempts
Message timed out, but we're going to wait for CFNetwork: %@
Message timed out, but we want extra timeout retries (%d/%d): %@
Queue timed out delivery for message: %@
Cancelling message in the queue: %@
Adding message to the queue: %@
  Busy delivering: %@  (%@)
Server bag loaded
We're out of airplane mode, and we have a pending retry
Using server bag anisetteHeaderLenientTimeout: %f second(s)
Using server bag anisetteHeaderGlobalTimeout: %f second(s)
Created APSConnection: %p  (Max size: %d  Environment: %@)
Cannot map Message: %@   no ID!
Mapping messageID: %@  message: %@   APSMessage: %@   timeout: %f  timeoutSelector: %@
No timer specified for message ID: %@
Missing APS Message for message ID: %@
Missing FTMessage for message ID: %@
Missing body for message ID: %@
_clearMapForMessageID: %@
  => Message ignores max retry count set on server bag. Keep retrying (current retires %d). Has received courier ack? %@
  => Message retried too many times (%d), not retrying anymore. Has received courier ack? %@
Noting message failed: %@   (Request ID: %@  Retries: %d  Retry Allowed: %@  Wants Retry: %@)
FTMessageDelivery Sending SOS for APS failure that recieved response code: (HTTP Status Code: %d)
  => Will retry message: %@ in %f seconds
Informing delegate about message %@ with resultCode %ld
Noting message success: %@   (Request ID: %@   %d remaining)
Noting message ack'd: %@   (Request ID: %@   %d remaining)
   => Setting ack timeout time, this will use APS retries
Message has used %ld retries, Retry timeout time with multiplier will be %f
   => Setting send timeout time: %f
Noting message sent: %@   (Request ID: %@  Remaining: %d  Attempt: %d)
Sent outgoing message: %@ to command: %@   (Request ID: %@   Connection: %@)
Could not generate APSMessage for message: %@
Timed out waiting for server ack for message: %@   (Request ID: %@)
Timed out waiting for server response for message: %@   (Request ID: %@)
Missing message for retry!  (timer: %@   messageID: %@)
Starting retry for message: %@   (Request ID: %@)
Timed out waiting for server response after final grace period for message: %@   (Request ID: %@)
Enabling required topics: %@
  => Skipping, already enabled
Cannot send message: Empty topic requested for message: %@
Building URL request with topic: %@  bagKey: %@
       %@: %@
Body: %@
Final delivery payload: %@
Sending message: %@ as binary push
invalidating: %@
Created APSOutgoingMessage body: %@
Delivering message to command: %@
OUTGOING-APS_DELIVERY:%@ SERVICE:%@
Message body: %@ [guid: %@]
Failing message, empty message
APS dequeue message
 => Server bag not needed, proceeding
We're already busy, not pulling from queue
Cancelling message delivery! invalid message!
Message not being delivered, missing some required keys: %@
Cancelling message delivery! Missing keys: %@
Message not being delivered, airplane mode is enabled
Message body: %@
Removed message: %@   apsMessage: %@
Message: %@ not in queue.   Current message: %@
  Busy delivering: %@
Response Headers: %@
no message found, map reads: %@
received response dictionary: %@
Received an unknown object for kBodyIDKey
Error decompressing body: %@  (Data: %@)
received response code: %@  response body: %@
  Found internal status code of: %@
Exception processing status code from result body: %@   for message: %@
  This Message Wants Multiple responses
  This Message responds to receiving updates for multipleMessages
 More To Come, Not done yet
  Last message Has Been acknowledged
Server ACK'd outgoing message: %@      (Request ID: %@)
   message: %@ wants response: %@
message delivery failed {error: %@, retryBehavior: %d}
FTMessageDelivery failed! Error (%@:%d): %@ %@
APSConnection %@  gave me a connection size of: %d  which doesn't pass our sanity size of: %ld   ignoring
APSConnection %@  gave me a connection large size of: %d  which doesn't pass our sanity size of: %ld   ignoring
Server Bag provided us with %d retries
Server Bag has no value for retries, using the default: %ld retries
Server Bag provided us with a retry interval of %f 
Server Bag has no value for interval , using the default: %f interval
Passed in bogus info to FTIDSMessage (%@:%@:%@:%@)
This device does not support non WiFi facetime, thus we're not entitled
Returning default entitlement of YES
Posting notification for entitlement status changed
 Cleaning up mach bits
Succeeded loading region information
   Region info: %@
   Loaded region: %@
Failed querying regions: %@  code: %ld
Checking keychain with prefixed username %@
Account: %@
            username: %@
          profile ID: %@
               token: %@
vetted email handles: %@
Fetching GS account for username %@
Found no GameCenter account for username %@
Properties on found account: %@
Searching for profileID %@
Didn't find an authenticated account with a DSID; attempting to fall back to an unauthenticated match that has a password
Didn't find a DISD match with a password; attempting to fall back to an unauthenticated DISD and username match
Didn't find an unauthenticated DISD and username match; attempting to fall back to an unauthenticated DSID match
Didn't find a DSID match!
Couldn't match based on any known DSID of %@; attempting to fall back to a username match
Couldn't find a username match for %@; attempting to search aliases of known accounts
Didn't find any matching account!
Didn't find profileID %@; attempting to use username %@
Updating username on accounts { previousUsername: %@, newUsername: %@ }
Updating username on accounts { accountsToUpdate : %@ }
Save completed (%@) with error: %@
Failed saving account %@ with error: %@
Failed to request account type from identifier { typeIdentifierIDS: %@, accountType: %@, accountTypeError: %@ }
Determined if we should force silent-only auth { username: %@, serviceIdentifier: %@, shouldForceSilentAuth: %@ }
Checking if username has a corresponding IdMS ACAccount instance { username: %@ }
IdMS ACAccount instance matches { accountID: %@, accountUsername: %@ }
IdMS ACAccount instance does not match { accountID: %@, accountUsername: %@ }
Unable to find a corresponding IdMS ACAccount instance { username: %@ }
Performing clean-up on accounts
Found candidate account for clean-up { account : %@ }
Requesting save of cleaned-up accounts { accountsToSave : %@ }
Saving account { account: %@ }
Save completed { account: %@, success: %@, error: %@ }
Cleaning up accounts {username: %@, profileID: %@, inUseUsernames: %@, inUseProfileIDs: %@ }
Requesting deletion of accounts { accountsToDelete : %@ }
Deleting unused account { account: %@ }
Delete completed { account: %@, success: %@, error: %@ }
Begin cleaning up unused accounts { usernameBlock : %@, profileIDBlock : %@ }
Cleaning up unused accounts { usernames : %@, profileIDs : %@ }
Checking if account should be deleted { account: %@ }
Account was recently added. Not deleting
Account was not recently added
Password manager fetch password
Fetching password for profileID: %@ username: %@ service: %@
  Found account: %@
  Credential: %@
         => Type: %@
     => Username: %@
     => Password: %@
   => Auth Token: %@
   => Profile ID: %@
      => Self ID: %@
Did not find an account to use! No password fetched.
Password manager fetch auth token
Fetching auth token for profileID: %@ username: %@ service: %@
  Found cached account info: %@
  Monitor error: %@
Did not find an account to use! No auth token fetched.
Password manager request password
Requesting password for username: %@  service: %@
Handle user notification complete: %@:%@
Password manager request auth token
Requesting auth token for profileID: %@ username: %@ service: %@ failIfNotSilent: %@
No account found, created new account: %@
Adding and saving account
Getting new auth token {shouldClearAccountCache: %@, account: %@}
Failed renewing account %@ with error: %@
Renewal complete for: %@  service: %@ account: %@  renewResult: %ld  error: %@
  => Cancelled, bailing
*** Empty profile ID handed back during token gathering, please file a radar
*** Account: %@
Requesting verification for account: %@
Completed verify credentials
Verification complete for: %@  service: %@ account: %@  error: %@
Failed verifying account %@ with error: %@
*** No error reported for account verification, but verified account is nil, please file a radar (input: %@  output: %@)
*** No account found to use for renewal, please file a radar (input: %@  output: %@)
   Verification failed with error: %@, starting renew for service: %@
Verification succeeded for account: %@
     => Token: %@
    => SelfID: %@
*** Account properties: %@
Checking the current status of the account {foundAccount: %@, status: %@, properties: %@}
Not requesting renewal for a Managed AppleID account
Requesting renewal for account: %@  service: %@
Password manager set password
Setting password for profileID: %@ username: %@ service: %@
Using account: %@
Updated credential: %@
Creating credential: %@
Assigning credential: %@
Saving account
Checked auth token receipt date against grace period {isAuthTokenWithinGracePeriod: %@, authTokenReceiptTime: %f, gracePeriod: %f, now: %f, delta: %f}
Removing auth token using grace period for profileID: %@ username: %@
No account found for auth token removal -- ignoring request
Auth token receipt date falls outside of grace period -- removing auth token {authTokenReceiptTime: %@}
Updating credential %@
Saving account: %@
      Authenticated: %@
Auth token receipt date falls within grace period -- skipping removal {authTokenReceiptTime: %@}
Password manager set auth token
Setting auth token for profileID: %@ username: %@ service: %@  (%@)
Updated auth token receipt time {receiptTime: %f}
Setting profile ID on account: %@
Setting self handle on account: %@
Setting account status {profileID: %@, username: %@, service: %@, accountStatus: %@}
Setting handles dictionary for profileID: %@ username: %@ service: %@  (%@)
Verification Options Dictionary Contains: %@
%@ - %s: invalid arguments!
Invalid username %@ or account %@
Comparing strippedUserName %@, accountUserName %@ and accountOriginalUserName %@
FT URL  Message Completed With Respone Headers %@
FTServerBag
FTMessageDelivery
FTMessageQueueDelegate
FTMessageQueue
FTMessageDelivery_DualMode
FTMessageDeliveryProtocol
NSObject
FTAPSOutgoingMessage_Additions
FaceTimeStringAdditions
CompressionAdditions
FTDeviceSupport
CoreTelephonyClientCarrierBundleDelegate
CoreTelephonyClientSubscriberDelegate
CoreTelephonyClientPNRDelegate
FTProtobufMessage
FTSelectedPNRSubscriptionCache
FTSelectedPNRSubscription
FTNetworkSupport
FTServiceStatus
FTiMessageStatus
FTEmbeddedReachability
IDSWebTunnelRequestMessage
FTAuthKitManager
FTMessageDelivery_HTTP
FTMessageDeliveryRemoteURLConnection
FTMessageDeliveryRemoteURLConnectionFactory
FTMessageDeliveryHTTPMobileNetworkManager
FTMessageDelivery_APS
FTMessageDeliveryAPSMobileNetworkManager
APSConnectionDelegate
FTShareChannelMessage
FTIDSMessage
NSCopying
FTEntitlementSupport
FTUserConfiguration
FTRegion
FTRegionSupport
FTGetRegionMetadataMessage
_FTPasswordManagerCachedAuthTokenInfo
FTPasswordManager
ACMonitoredAccountStoreDelegateProtocol
FTURLRequestMessage
T@"NSArray",C,N
APNSMessageDeliveryClass
T@"NSMutableArray",&,V_addDates
HTTPMessageDeliveryClass
T^{__SecKey=},N,V_pushPublicKey
SHA1Data
__imFirstObject
SIMInserted
_gameCenterAccountWithUsername:
T@"<FTMessageQueueDelegate>",W,V_delegate
_messageHeaders
T@"CTXPCServiceSubscriptionContext",&,N,V_selectedContext
_number
T@"FTMessageDelivery",&,V_delivery
_reload
T@"FTRegion",R
_requiredTopics
T@"IDSBaseMessage",R
_retryTimerHit:
T@"NSArray",R
_selfID
T@"NSData",&,N,V_protoData
_sharedInstance
T@"NSData",C,N,V_identityCert
_status
T@"NSData",C,N,V_pushCert
allHeaderFields
T@"NSData",C,N,V_requestBody
allowAnyNetwork
T@"NSData",C,N,V_responseBodyData
base64EncodedStringWithOptions:
T@"NSDictionary",&,N,V_alertInfo
bundleForClass:
T@"NSDictionary",C,N,V_requestHeaders
cellularDataEnabledForBundleId:
T@"NSDictionary",C,N,V_responseBodyDictionary
completionBlock
T@"NSDictionary",C,N,V_timingData
dealloc
T@"NSDictionary",R,N
iMessageBlocked
T@"NSMutableArray",C,N,V_certDataArray
initWithLength:
T@"NSMutableArray",C,N,V_publicKeyArray
invalidateCache
T@"NSMutableDictionary",C,N,V_messageHeaders
isDeviceInDualPhoneIdentityMode
T@"NSNumber",C
isProxy
T@"NSNumber",C,N,V_responseStatus
labelID
T@"NSNumber",R,C,N
madridAvailable
T@"NSString",&,N,V_messageID
multiwayBlocked
T@"NSString",&,N,V_profileID
T@"NSString",&,N,V_selfID
pnrResponseReceived:pnrRspData:
T@"NSString",C,N
protocolVersion
T@"NSString",C,N,V_messageURL
reachabilityRef
T@"NSString",C,N,V_userAgentOverride
registerSynchronouslyWithError:
T@"NSString",C,V_userAgent
removeObserver:
T@"NSString",R,C
responseCommand
T@"NSURL",C,N,V_requestURL
selectedContext
T@"NSURLRequest",&
serverTimestamp
setPhoneNumber:
TB,N,V_blockPost
setRequestType:
TB,N,V_disallowRetry
setURLOverride:
TB,R,N
setWithObjects:
TB,R,N,V_isGreenTea
subscriberCountryCodeDidChange:
TB,R,N,V_supportsBackCamera
supportsHarmony
TB,R,N,V_supportsFrontCamera
timeout
TB,R,N,V_supportsMMS
validNetworkEnabledForBundleId:
TB,R,N,V_supportsSMS
wantsAPSRetries
TB,R,N,V_supportsWLAN
wantsClientInfo
TB,V_logToRegistration
.cxx_destruct
T@"NSDictionary",&,V_dictionary
CTNetworkInformation
T@"NSNumber",C,N,V_responseCode
IDCertificate
SHA256Data
_commCenterDead
T#,R
_messageAckGracePeriodTimedOut:
T@"CTXPCContexts",&,N,V_activeSubscriptionInfo
_noCache_supportedServicesFlags
T@"CTXPCServiceSubscriptionInfo",&,N,V_subscriptionInfo
_publicKeyArray
T@"FTRegion",&,V_parentRegion
_requestHeaders
T@"FTServiceStatus",R,N,V_serviceStatus
_responseStatus
T@"NSArray",&,V_regions
_runningQueries
T@"NSArray",R,V_subRegions
_setRetryTimer:
T@"NSData",&,N,V_protoResponse
_signMessage:useDataSignatures:body:queryString:intoDictionary:
T@"NSData",C,N,V_messageRequestBodyData
additionalQueryStringParameters
T@"NSData",C,N,V_pushToken
allKeys
T@"NSData",C,N,V_responseBody
anisetteHeadersForRequest:completionBlockQueue:completionBlock:
T@"NSData",R,N
basePhoneNumber
T@"NSDictionary",C,N,V_messageRequestBodyDictionary
bundleWithPath:
T@"NSDictionary",C,N,V_requestStringParams
command
T@"NSDictionary",C,N,V_responseHeaders
containsObject:
T@"NSDictionary",C,V_responseRegionInformation
faceTimeBlocked
T@"NSMutableArray",&,V_queue
importanceLevel
T@"NSMutableArray",C,N,V_privateKeyArray
initWithUserNotificationCenter:
T@"NSMutableArray",C,N,V_userIDArray
isAuthenticated
T@"NSNumber",&,N,V_status
isEqualToArray:
T@"NSNumber",C,N,V_maximumResponseSize
isoCode
T@"NSNumber",C,N,V_responseStatusCode
lowercaseString
T@"NSString",&
madridSupported
T@"NSString",&,N,V_phoneNumber
nonBluetoothAllowedForBundleId:
T@"NSString",&,N,V_pushTopic
numberWithLong:
T@"NSString",&,N,V_token
privateKeyArray
T@"NSString",C,N,V_messageRequestUUID
pushCertificate
T@"NSString",C,N,V_selfURI
regions
T@"NSString",C,V_language
release
T@"NSString",R
request
T@"NSString",R,N
responseHeaders
T@"NSURL",R
selfURI
T@?,C
setMessageType:
TB,N
setRequestBody:
TB,N,V_disableIDSTranslation
setServerTimestampReceivedDate:
TB,R
setUserIDArray:
TB,R,N,V_commCenterDead
set_dictionary:
TB,R,N,V_mmsConfigured
supportsHandoff
TB,R,N,V_supportsCellularData
telephoneNumber
TB,R,N,V_supportsHandoff
userAgentString
TB,R,N,V_supportsNonWiFiFaceTime
version
TB,R,N,V_supportsTethering
wantsBinaryPush
TB,R,N,V_supportsWiFi
warning
TB,V_retryInAirplaneMode
TQ,N,V_requestType
TQ,R
TQ,V_maxConcurrentMessages
TQ,V_supportedServicesFlags
T^{__SecKey=},N,V_identityKey
T^{__SecKey=},N,V_identityPublicKey
T^{__SecKey=},N,V_pushKey
Ti,N,V_messageType
Ti,N,V_responseValue
Ti,N,V_supportedServicesToken
Ti,N,V_version
Tq,N,V_dualSIMCapability
Tq,R
Tq,R,N
URLOverride
URLWithString:
UTF8String
UUID
UUIDString
_APSOutgoingMessageClass
_CFURLRequest
_FTCopyGzippedData
_FTCopyOptionallyGzippedData
_FTDataFromBase64String
_FTDataFromHexString
_FTDecompressData
_FTFilteredArrayForAPS
_FTFilteredDictionaryForAPS
_FTStringFromBaseData
_FZBestGuessFZIDType
_IDFromFZIDType:
_IDsFromURIs
_URIFromFZIDType:
_URIsFromIDs
__mainThreadPostNotificationName:object:
__mainThreadPostNotificationName:object:userInfo:
__stringByStrippingControlCharacters
_accountBasedOnProfileID:orUsername:inStore:
_accountModificationRestricted
_accountOptionsDictForRenewCredentialsForService:username:shouldFailIfNotSilent:
_accountStore
_accountWithProfileID:username:inStore:
_accountWithProfileIDMatchingUser:inStore:
_accountWithUsername:inStore:
_accountWithUsernameAlias:inStore:
_activeSubscriptionInfo
_addDates
_addObservers
_adequateInternalOrCarrierInstall
_akAppleIDSession
_alertInfo
_apsDelivery
_apsMessageBodyForMessage:
_apsMessageForMessage:body:
_apsMessageMap
_apsOutgoingMessageForFTMessage:
_bag
_blockPost
_bodyForMessage:
_bodyMap
_buildMessageDeliveryIfNeeded
_cachedAuthTokenInfo
_cachedBag
_certDataArray
_cleanupMachInfo
_cleanupURLConnection
_clearMapForMessageID:
_clearReliabilityTimeoutInterval
_clearRetryTimer
_clearTimeout
_connection
_coreTelephonyClient
_correctServerTimestampForDriftOnMessage:currentDate:
_criticalReliabilityEnabledState
_currentAPSMessages
_currentMessages
_currentTimers
_dataForKey:
_deathTimerMap
_delegate
_delivery
_dequeueIfNeeded
_dictionary
_dictionaryForKey:
_disableIDSTranslation
_disallowRetry
_disconnectCTServerConnection
_distributed_invalidateCache
_doesSubscriptionInfoContainMultipleLabels:
_doesSubscriptionInfoContainMultipleUniqueLabels:
_dualModeQueue
_dualSIMCapability
_enableCriticalReliability
_enabledTopics
_enoughPowerToSupportEffects
_enterBackOffMode
_entitlementStatusChanged
_errorForTDMessageDeliveryStatus:userInfo:
_faceTimeBlocked
_fillMessageParameters:ftMessage:
_findAccountOfType:InStore:withCriteria:
_findGameCenterAccountInStore:withCriteria:
_findIDSAccountInStore:withCriteria:
_findIDSAccountsInStore:withCriteria:
_firstPresentSubscriptionFromAvailableSubscriptions:
_ftMessageMap
_handleCarrierSettingsChanged
_handlePotentialPhoneNumberRegistrationStateChanged
_handleSIMStatusChangedToStatus:
_httpDelivery
_iMessageBlocked
_iMessageServerBag
_identityCert
_identityKey
_identityPublicKey
_idsServerBag
_im_normalizedURIString
_informDelegateAboutMessage:error:result:resultCode:
_informDelegatesOfMessage:result:resultCode:error:
_initWithDictionary:
_initializeSIMInsertedCachedValue
_invalidateDeathTimerForMessageID:
_invalidateTimerForMessageID:
_invalidateValuesCachedForSelectedPhoneNumberRegistration
_isBusyWithMessage:
_isGreenTea
_isIdentityFallbackProhibitedForDeviceBasedOnCapability:subscriptionInfo:
_isInBackoffMode
_isInDualPhoneIdentityModeBasedOnCapability:
_isPNRSupportedCachedValue
_keychainAuthTokenForUsername:service:
_keychainPasswordForUsername:service:
_language
_legacy_isPhoneNumberEmergencyNumber:
_legacy_supportsSMSIdentification
_lockdownStateChanged:
_logToRegistration
_loginUserNotificationForService:user:isForBadPassword:showForgetPassword:shouldRememberPassword:
_maxConcurrentMessages
_maximumResponseSize
_messageACKTimedOut:
_messageCompletelyTimedOut:
_messageForAPSOutgoingMessage:
_messageID
_messageNeedsRetry:
_messageRequestBodyData
_messageRequestBodyDictionary
_messageRequestUUID
_messageSendTimedOut:
_messageType
_messageURL
_mmsConfigured
_mobileNetworkManager
_nonWifiFaceTimeEntitled
_noteMessageACKd:ftMessage:
_noteMessageFailed:ftMessage:retryBehavior:error:
_noteMessageSent:ftMessage:body:
_noteMessageSucceeded:ftMessage:error:result:resultCode:
_notifyDelegateAboutError:
_notifyDelegateAboutError:resultCode:forMessage:
_numberForKey:
_parentRegion
_pendingRetryAfterAirplaneMode
_performanceClass
_phoneNumber
_powerLogEvent:dictionary:
_privateKeyArray
_processResultData:forMessage:error:
_profileID
_profileIDForUsername:inStore:
_protected_invalidateCache
_protected_reevaluateCacheIfNeededAndPersistUpdate:
_protoData
_protoResponse
_pushCert
_pushKey
_pushPublicKey
_pushToken
_pushTopic
_queue
_randomPercentageChanceForDualDelivery
_rawEntitlementValue
_reallySetCriticalReliability:
_reconnectCTServerConnectionIfNecessary
_reevaluateCachedActiveSubscriptionWithError:
_reevaluateCachedSelectedPhoneNumberRegistrationWithSubscription:activeContexts:fallbackProhibited:persistUpdate:error:
_reevaluateCachedSelectedPhoneNumberWithContext:error:
_reevaluateCachedSubscriptionWithError:
_reevaluateDualIdentityModeWithSubscriptionInfo:
_regions
_registerForCTEntitlementNotifications
_registerForCapabilityNotifications
_registerForCarrierNotifications
_registerForCommCenterReadyNotifications
_registerForInternalCoreTelephonyNotifications
_registerForLockdownNotifications
_registerForManagedConfigurationNotifications
_registerForServiceStatusNotifications
_remoteConnection
_remoteConnectionFactory
_removeObservers
_renewCredentialsIfPossibleForAccount:username:inServiceIdentifier:originalInServiceIdentifier:serviceName:failIfNotSilent:renewHandler:shortCircuitCompletionBlock:
_requestBody
_requestStringParams
_requestType
_requestURL
_responseBody
_responseBodyData
_responseBodyDictionary
_responseCode
_responseHeaders
_responseRegionInformation
_responseStatusCode
_responseValue
_retries
_retriesMap
_retryBackoffProvider
_retryCountForMessage:
_retryInAirplaneMode
_retryTimeAfterAirplaneMode
_selectedContext
_selectedPNRSubscription
_selfURI
_sendMessage:ftMessage:
_sendMessageAsynchronously:error:
_serverBagLoaded:
_serverTimestamp
_serverTimestampReceivedDate
_serviceStatus
_setEnabledTopics:
_setKeychainAuthToken:forUsername:service:
_setKeychainPassword:forUsername:service:
_setMapForMessage:apsMessage:messageBody:timeoutTime:timeoutSelector:retries:
_setParentRegion:
_setReliabilityTimeoutInterval
_setTimeout
_setUsingOutgoingPush:
_setupCTServerConnection
_sharedInstanceForType:
_shouldForceSilentOnlyAuthForUsername:serviceIdentifier:
_shouldSendSOSForFailure:
_shouldUseDualDeliveryForMessage:
_simBecameNotReady
_simInserted
_startDateMap
_stringForKey:
_stripFZIDPrefix
_subRegions
_subscriptionFromAvailableSubscriptions:matchingSelectedLabel:
_subscriptionInfo
_supportedServicesFlags
_supportedServicesToken
_supportsApplePayState
_supportsBackCamera
_supportsCellularData
_supportsFMDV2State
_supportsFT
_supportsFTA
_supportsFTMW
_supportsFrontCamera
_supportsHandoff
_supportsHarmonyState
_supportsKeySharingState
_supportsMMS
_supportsManateeForAppleCash
_supportsNonWiFiFaceTime
_supportsRegionForAppleCash
_supportsSMS
_supportsTethering
_supportsUWBState
_supportsVeniceState
_supportsWLAN
_supportsWiFi
_supportsiMessage
_timeoutHit
_timeoutTask
_timer
_timerMap
_timingData
_token
_tryRetryMessageWithTimeInterval:
_tryToEnableReliability
_type
_unregisterForCTEntitlementNotifications
_unregisterForCommCenterReadyNotifications
_unregisterForManagedConfigurationNotifications
_unregisterForServiceStatusNotifications
_updateCTNetworkDictionary:key:withTelephonyNetworkValue:telephonyError:
_updateCapabilities
_updateEntitlementStatusUsingCTEntitlementsInfo:
_updateManagedConfigurationSettings
_updateStatus:onAccount:
_updateTopics
_updateWiFiAssertions
_urlRequestWithURL:andData:message:completionBlock:
_userAgent
_userAgentOverride
_userAgentString
_userIDArray
_userNotificationCenter
_usernameHasCorrespondingIdMSAccount:
_usingOutgoingPush
_version
absoluteString
acAccountWithProfileID:username:accountStore:
accountCredentialChanged:
accountModificationRestricted
accountProperties
accountPropertyForKey:
accountType
accountTypeWithAccountTypeIdentifier:
accountTypeWithIdentifier:completion:
accountWasAdded:
accountWasModified:
accountWasRemoved:
accountsWithAccountType:
ackTimestamp
activeSubscriptionInfo
activeSubscriptionsDidChange
addAuthUserID:certificate:privateKey:publicKey:
addEntriesFromDictionary:
addMessage:
addMessageAtHeadOfQueue:
addObject:
addObjectsFromArray:
addObserver:selector:name:object:
addUserNotification:listener:completionHandler:
addWiFiAutoAssociationClientToken:
additionalInternalHeaders
additionalMessageHeaders
additionalMessageHeadersForOutgoingPush
ak_addClientInfoHeader
ak_addDeviceUDIDHeader
alertInfo
allKeysForObject:
allMessages
allObjects
allValues
alloc
allowDualDelivery
allowSelfSignedCertificates
allowUnsignedBags
allowsServerProvidedLenientAnisetteTimeout
anisetteHeadersTimeout
appendBytes:length:
appendData:
appendFormat:
appendString:
appleIDHeadersForRequest:
apsEnvironmentName
array
arrayWithObjects:
authTokenChanged:
authTokenGracePeriod
autorelease
bagKey
bagURL
block
blockPost
boolValue
bundleIdentifierForDataUsage
busy
bytes
callingAvailable
callingBlocked
callingSupported
cancel
cancelMessage:
cancelOutgoingMessage:
cancelPendingExecutions
cancelRequestID:serviceIdentifier:
carrierBundleChange:
carrierBundleValueFromAllSIMsForKey:ofType:withFallback:
cellularFaceTimeEnabled
certDataArray
characterSetWithCharactersInString:
class
cleanUpAccountsBasedOnInUseUsernamesBlock:profileIDBlock:completionBlock:
cleanUpAccountsWithUsername:orProfileID:basedOnInUseUsernames:profileIDs:completionBlock:
code
commCenterDead
concurrentConnections
conferencingAllowed
conferencingBlocked
conferencingEnabled
conformsToProtocol:
connection
connection:channelSubscriptionsFailedWithFailures:
connection:didChangeConnectedStatus:
connection:didFailToSendOutgoingMessage:error:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didReceivePublicToken:
connection:didReceiveToken:forInfo:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveURLToken:forInfo:
connection:didReceiveURLTokenError:forInfo:
connection:didSendOutgoingMessage:
connectionDidReconnect:
connectionRequired
context:pnrSupportChanged:
copy
copyWithZone:
count
countByEnumeratingWithState:objects:count:
cpuFamily
credential
credentialForAccount:
credentialWithPassword:
currentHandler
currentMessage
currentReachabilityStatus
customRetryInterval
data
dataActiveAndReachable
dataUsageBundleIdentifier
dataUsingEncoding:
dataWithBytes:length:
dataWithBytesNoCopy:length:freeWhenDone:
dataWithPropertyList:format:options:error:
date
dateByAddingTimeInterval:
dateWithTimeIntervalSince1970:
dateWithTimeIntervalSinceReferenceDate:
debugDescription
defaultBundleChange
defaultCenter
defaultLogger
delegate
delivery
deliveryAcknowledgementBlock
dequeueMessageIfNeeded
dequeueTopMessage
description
deviceColor
deviceIDPrefix
deviceInformationString
deviceName
deviceRegionInfo
deviceType
deviceTypeIDPrefix
dictionary
dictionaryWithObjectsAndKeys:
didDetectSimDeactivation:info:
disableIDSTranslation
disableKeepAlive
disallowRetry
domain
doubleValue
dualSIMCapability
dualSimCapabilityDidChange
earlierDate:
enableCriticalReliability
enclosureColor
enqueueExecutionWithTarget:afterDelay:
enumerateKeysAndObjectsUsingBlock:
enumerateObjectsUsingBlock:
errorWithDomain:code:userInfo:
expectingMoreResponses
faceTimeAudioSupported
faceTimeAvailable
faceTimeMultiwaySupported
faceTimeNonWiFiEntitled
faceTimeSupported
fetchAuthTokenForProfileID:username:service:outRequestID:completionBlock:
fetchPasswordForProfileID:username:service:outRequestID:completionBlock:
firstObject
flushRegions
forceBagLoad
forceCellular
forceCellularIfPossible
gameCenterPropertiesFromAccountWithUsername:
getCharacters:range:
handleFailureInMethod:object:file:lineNumber:description:
handleResponse:forRequest:completionBlock:
handleResponse:forRequest:shouldRetry:
handleResponseBody:
handleResponseDictionary:
handleResponseHeaders:
handleResponseStatus:
handleTranslationAndDeliveryOnAPS:
hasAttemptedAPSDelivery
hasPrefix:
hasQueuedItems
hasReceivedPushAck
hasRequiredKeys:
hasSuffix:
hash
headersBySigningData:serverTimestamp:error:
highPriority
httpDoNotDecodeData
iMessageAvailable
iMessageSupported
identifier
identityPrivateKey
identityPublicKey
identityServicesSupported
ignoreMaxRetryCount
ignorePushSigHeaders
ignoresNetworkConnectivity
inProcess_isCallingSupported
increaseLengthBy:
init
initPrivate
initWithAPSConnection:mobileNetworkManager:
initWithAccountType:
initWithAccountTypes:delegate:
initWithAssociationID:sharingState:lastUpdatedDate:
initWithBagType:
initWithBase64EncodedString:options:
initWithCapacity:queue:block:
initWithCommand:success:errorDomain:errorCode:retryCount:
initWithEnvironmentName:namedDelegatePort:queue:
initWithIDSServerBag:
initWithIDSServerBag:iMessageServerBag:remoteConnectionFactory:mobileNetworkManager:retryBackoffProvider:
initWithIdentifier:
initWithInt:
initWithMessage:
initWithPreferedType:
initWithProtoData:messageType:
initWithPushTopic:protoData:
initWithRenewResult:errorDomain:errorCode:
initWithServerResponseDictionary:
initWithTimeInterval:name:shouldWake:target:selector:userInfo:
initWithTopic:userInfo:
initWithURL:type:headers:stringParams:body:
insertObject:atIndex:
intValue
integerValue
invalidate
isActivated
isAirplaneModeEnabled
isAuthTokenReceiptTime:withinGracePeriod:
isC2KEquipment
isDeviceInManualPhoneSelectionMode
isEqual:
isEqualToDictionary:
isEqualToIgnoringCase:
isEqualToString:
isGreenTea
isIDSMessage
isInDebilitatedMode
isInDualPhoneIdentityMode
isInMultiUserMode
isInitializedForSigning
isInternalInstall
isKindOfClass:
isLoaded
isLoading
isMemberOfClass:
isMultiUser
isMultipleAuthCertCapable
isPhoneNumber:equivalentToExistingPhoneNumber:
isPhoneNumberEmergencyNumber:
isSelectedPhoneNumberRegistrationSubscriptionContext:
isServerAvailable
isSupported
isTelephonyDevice
isValidMessage
isWebTunnelMessage
isWiFiUsable
keepAliveCell
keepAliveWifi
label
language
largeMessageSize
lastObject
length
load
localWiFiRef
localWiFiStatusForFlags:
localizedDescription
logFailureInfo
logMetric:
logToRegistration
logger
loggerWithCategory:
lowRAMDevice
madridBlocked
makeObjectsPerformSelector:withObject:
marketingNameForDeviceType:
marketingNameForModel:
maxConcurrentMessages
maxLargeMessageSize
maxMessageSize
maxTimeoutRetries
maximumResponseSize
memorySize
messageBody
messageBodyDataOverride
messageBodyUsingCache
messageDelivery_oversized
messageForUniqueID:
messageHeaders
messageID
messageRequestBodyData
messageRequestBodyDictionary
messageRequestUUID
messageSize
messageType
messageURL
messages
metricWithDomain:type:error:bagURL:
mmsConfigured
model
multiwayAvailable
multiwaySupported
mutableBytes
mutableCopy
networkActive
networkEnabled
networkReachable
networkStateChanged
networkStatusForFlags:
nonBluetoothAvailableForBundleId:
nonStandardMessageHeadersForOutgoingPush
nonWifiAvailableForBundleId:
nonWifiCallingAvailable
nonWifiFaceTimeAvailable
nonce
noteResponseForToken:
noteSelectedPhoneNumberRegistrationSubscriptionDidChange
numberWithDouble:
numberWithInt:
numberWithInteger:
numberWithUnsignedInteger:
numberWithUnsignedLongLong:
objectAtIndex:
objectForKey:
operatorBundleChange:
originalTimestamp
overrideContentType
parentRegion
parsedIDSMessageResult
password
payloadCanBeLogged
payloadLength
performCleanUpWithCompletion:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
performanceClass
persistSelectedPhoneNumberRegistrationSubscriptionIfNeeded
phoneNumber
phoneNumberAvailable:
phoneNumberChanged:
pnrReadyStateNotification:regState:
pnrRequestSent:pnrReqData:
postNotificationName:object:
prlVersionDidChange:version:
processInfo
processName
productBuildVersion
productName
productOSVersion
productVersion
profileID
profileIDForACAccount:
propertyListWithData:options:format:error:
protoData
protoResponse
publicKeyArray
pushAckTimestamp
pushPrivateKey
pushPublicKey
pushToken
pushTopic
queue:hitTimeoutForMessage:
queuedMessages
rangeOfString:
reachabilityForInternetConnection
reachabilityForLocalWiFi
reachabilityWithAddress:
reachabilityWithHostName:
receivedByteCount
regionForID:
regionID
regionWithID:
registration
registrationState
registrationSupported
reload
remoteURLConnection
removeAccount:withCompletionHandler:
removeAllMessages
removeAllObjects
removeAuthTokenAllowingGracePeriodForProfileID:username:
removeMessage:
removeNotificationsForServiceIdentifier:
removeObject:
removeObjectAtIndex:
removeObjectForKey:
removeObserver:name:object:
removeWiFiAutoAssociationClientToken:
renewCredentialsForAccount:options:completion:
replaceObjectAtIndex:withObject:
requestAuthTokenForProfileID:username:service:badPassword:showForgotPassword:failIfNotSilent:outRequestID:completionBlock:
requestAuthTokenForProfileID:username:service:badPassword:showForgotPassword:forceRenewal:failIfNotSilent:outRequestID:completionBlock:
requestAuthTokenForProfileID:username:service:badPassword:showForgotPassword:outRequestID:completionBlock:
requestBody
requestEnd
requestHeaders
requestPasswordForUsername:service:badPassword:showForgotPassword:shouldRememberPassword:outRequestID:completionBlock:
requestStart
requestStringParams
requestType
requestURL
requestWithURL:cachePolicy:timeoutInterval:
requireIDSHost
requiredKeys
respondsToSelector:
response
responseBody
responseBodyData
responseBodyDictionary
responseCode
responseInformation
responseReceived
responseRegionInformation
responseStatus
responseStatusCode
responseValue
retain
retainCount
retryCount
retryCountKey
retryInAirplaneMode
saveVerifiedAccount:error:
saveVerifiedAccount:withCompletionHandler:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
security
selectedPhoneNumberRegistrationSubscriptionLabels
selectedPhoneNumberRegistrationSubscriptionNumber
selectedPhoneNumberRegistrationSubscriptionWithError:
selectedRegistrationPhoneNumberWithError:
self
selfID
sendMessage:
sendMessageAtTopOfTheQueue:
sendOutgoingMessage:
sentByteCount
serverTimestampReceivedDate
serviceStatus
setAccountProperty:forKey:
setAccountStatus:forProfileID:username:service:
setActiveSubscriptionInfo:
setAlertInfo:
setAllowAnyNetwork:
setAuthTokenForProfileID:username:service:authToken:selfHandle:accountStatus:outRequestID:completionBlock:
setAuthTokenForProfileID:username:service:authToken:selfHandle:outRequestID:completionBlock:
setAuthenticated:
setBlock:
setBlockPost:
setBundleIdentifierForDataUsage:
setCellularFaceTimeEnabled:
setCertDataArray:
setCompletionBlock:
setConcurrentConnections:
setCredential:
setCritical:
setDelegate:
setDelivery:
setDeliveryMechanism:
setDisableIDSTranslation:
setDisableKeepAlive:
setDisallowRetry:
setDualSIMCapability:
setEnableCriticalReliability:
setEnabledTopics:ignoredTopics:opportunisticTopics:
setForceCellularIfPossible:
setHTTPBody:
setHTTPMethod:
setHTTPShouldHandleCookies:
setHandlesForProfileID:username:service:handles:
setHasAttemptedAPSDelivery:
setHasReceivedPushAck:
setHttpDoNotDecodeData:
setIDCertificate:
setIdentifier:
setIdentityPrivateKey:
setIdentityPublicKey:
setImportanceLevel:
setIsDeviceInDualPhoneIdentityMode:
setIsDeviceInManualPhoneSelectionMode:
setKeepAliveCell:
setKeepAliveWifi:
setLanguage:
setLength:
setLogToRegistration:
setMaxConcurrentMessages:
setMaximumResponseSize:
setMessageHeaders:
setMessageID:
setMessageRequestBodyData:
setMessageRequestBodyDictionary:
setMessageRequestUUID:
setMessageURL:
setObject:forKey:
setOriginalTimestamp:
setPassword:
setPasswordForProfileID:username:service:password:outRequestID:completionBlock:
setPayloadFormat:
setPriority:
setPrivateKeyArray:
setProfileID:
setProtoData:
setProtoResponse:
setProtocolVersion:
setPublicKeyArray:
setPushAckTimestamp:
setPushCertificate:
setPushPrivateKey:
setPushPublicKey:
setPushToken:
setPushTopic:
setReceivedByteCount:
setRegions:
setRequest:
setRequestEnd:
setRequestHeaders:
setRequestStart:
setRequestStringParams:
setRequestURL:
setRequireIDSHost:
setResponseBody:
setResponseBodyData:
setResponseBodyDictionary:
setResponseCode:
setResponseHeaders:
setResponseReceived:
setResponseRegionInformation:
setResponseStatus:
setResponseStatusCode:
setResponseValue:
setRetryCount:
setRetryInAirplaneMode:
setSelectedContext:
setSelectedPhoneNumberRegistrationSubscriptionLabels:
setSelectedPhoneNumberRegistrationSubscriptionNumber:
setSelfID:
setSelfURI:
setSentByteCount:
setServerTimestamp:
setShouldReturnTimingData:
setShouldUsePipelining:
setStatus:
setSubscriptionInfo:
setSupportedServicesFlags:
setSupportedServicesToken:
setTimeSent:
setTimeout:
setTimeoutRetries:
setTimingData:
setToken:
setTopic:
setUserAgent:
setUserAgentOverride:
setUsername:
setValue:forHTTPHeaderField:
setValue:forKey:
setVersion:
setWantsIntegerUniqueIDs:
setWantsResponse:
set_addDates:
set_parentRegion:
set_queue:
sharedInstance
sharedInstanceForBagType:
sharedManager
shortLabelsDidChange
shouldReturnTimingData
shouldUsePipelining
signingSession
silentlySetSelectedPhoneNumberRegistrationSubscriptionLabels:
simLockSaveRequestDidComplete:success:
simPinChangeRequestDidComplete:success:
simPinEntryErrorDidOccur:status:
simPukEntryErrorDidOccur:status:
simStatusDidChange:status:
slotID
slowCPUDevice
startBagLoad
startLoading
status
statusCode
stringByAppendingFormat:
stringByRemovingCharactersFromSet:
stringByRemovingWhitespace
stringGUID
stringValue
stringWithFormat:
subRegions
subscriptionInfo
subscriptionInfoDidChange
subscriptions
substringToIndex:
superclass
supportedServicesFlags
supportedServicesToken
supportsAnimojiV2
supportsAppleIDIdentification
supportsApplePay
supportsAuthTokenRequests
supportsBackFacingCamera
supportsCellularData
supportsCinematicFraming
supportsFMDV2
supportsFrontFacingCamera
supportsFunCam
supportsHDRdecoding
supportsHEIFEncoding
supportsHomeKitResident
supportsKeySharing
supportsMMS
supportsManateeForAppleCash
supportsNonWiFiCalling
supportsNonWiFiFaceTime
supportsRegionForAppleCash
supportsSMS
supportsSMSIdentification
supportsSimultaneousVoiceAndDataRightNow
supportsTethering
supportsUWB
supportsVenice
supportsWLAN
supportsWiFi
telephonyCapabilities
timeIntervalSince1970
timeIntervalSinceDate:
timeIntervalSinceNow
timeIntervalSinceReferenceDate
timeoutRetries
timingData
token
topMessage
topic
underlyingService
uniqueID
uniqueIDString
updatePreviousUsername:toNewUsername:
urlWithKey:
userAgent
userAgentHeaderString
userAgentOverride
userDefaultVoiceSlotDidChange:
userIDArray
userInfo
userNotificationWithIdentifier:timeout:alertLevel:displayFlags:displayInformation:
username
validNetworkActive
validNetworkActiveForBundleId:
validNetworkEnabled
validNetworkReachable
validNetworkReachableForBundleId:
valueForKey:
verifyCredentialsForAccount:withHandler:
wantsBagKey
wantsBodySignature
wantsBodySigningOnly
wantsBreakBeforeMake
wantsCFNetworkTimeout
wantsCompressedBody
wantsCustomRetryInterval
wantsExtraTimeoutRetry
wantsGZip
wantsHTTPGet
wantsHTTPHeaders
wantsIDSProtocolVersion
wantsIDSServer
wantsIDSSignatures
wantsIntegerUniqueIDs
wantsManagedRetries
wantsMultipleResponses
wantsResponse
wantsSignature
wantsStatusCodeBasedRetries
wantsUDID
wantsUserAgentInHeaders
wiFiActiveAndReachable
wifiAllowedForBundleId:
willSearchForNetwork
willSearchForNetworkForBundleId:
zone
@16@0:8
@24@0:8q16
v16@0:8
B16@0:8
@24@0:8@16
#16@0:8
@32@0:8q16@24
v32@0:8@16@24
v32@0:8@"FTMessageQueue"16@"IDSBaseMessage"24
v24@0:8@16
v48@0:8@16@24@32q40
B32@0:8@16^@24
B24@0:8@16
v24@0:8d16
q16@0:8
v52@0:8@16B24@28@36@44
v20@0:8B16
Q16@0:8
v24@0:8Q16
@"FTMessageQueue"
@"NSString"
@"IMTimer"
@24@0:8Q16
@"NSMutableArray"
@"<FTMessageQueueDelegate>"
@"CUTDeferredTaskQueue"
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v24@0:8@"IDSBaseMessage"16
v24@0:8@"NSString"16
@"IDSBaseMessage"16@0:8
@"NSArray"16@0:8
@"FTMessageDelivery"
v24@0:8@"CTXPCServiceSubscriptionContext"16
v28@0:8@16B24
v32@0:8@"CTXPCServiceSubscriptionContext"16@"NSString"24
v28@0:8@"CTXPCServiceSubscriptionContext"16B24
v24@0:8@"CTServiceDescriptor"16
v32@0:8@"CTXPCServiceSubscriptionContext"16@"NSNumber"24
v32@0:8@"CTXPCServiceSubscriptionContext"16@"CTSimDeactivationInfo"24
v32@0:8@"CTXPCServiceSubscriptionContext"16@"CTPNRRequestSentInfo"24
v32@0:8@"CTXPCServiceSubscriptionContext"16@"NSDictionary"24
v48@0:8@16@24@32@40
i16@0:8
@"CoreTelephonyClient"
@"FTSelectedPNRSubscription"
@32@0:8@16@24
@24@0:8^{_NSZone=}16
v20@0:8i16
@"NSData"
v24@0:8q16
@"CTXPCServiceSubscriptionInfo"
@"CTXPCContexts"
@"CTXPCServiceSubscriptionContext"
B32@0:8@16@24
@20@0:8B16
@24@0:8^@16
B24@0:8q16
B32@0:8q16@24
@48@0:8@16@24B32B36^@40
@32@0:8@16^@24
@"FTServiceStatus"
@24@0:8r^{sockaddr_in=CCS{in_addr=I}[8c]}16
q20@0:8I16
^{__SCNetworkReachability=}
@"NSDictionary"
@"NSMutableDictionary"
@"NSNumber"
v40@0:8@16@24@?32
@"AKAppleIDSession"
@"NSObject<OS_dispatch_queue>"
@?16@0:8
v24@0:8@?16
@"NSURLRequest"16@0:8
v24@0:8@"NSURLRequest"16
@?<v@?@"NSURLResponse"q@"NSData"@"NSError"@"NSDictionary">16@0:8
v24@0:8@?<v@?@"NSURLResponse"q@"NSData"@"NSError"@"NSDictionary">16
@"<FTMessageDeliveryRemoteURLConnection>"16@0:8
@56@0:8@16@24@32@40@?48
v48@0:8@16@24@32@?40
@40@0:8@16@24^@32
v48@0:8@16@24q32@40
B24@0:8d16
@"<FTMessageDeliveryRemoteURLConnectionFactory>"
@"<FTMessageDeliveryRemoteURLConnection>"
@"<FTMessageDeliveryHTTPMobileNetworkManager>"
@"IDSServerBag"
v40@0:8@16@24@32
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v40@0:8@"APSConnection"16@"NSData"24@"APSAppTokenInfo"32
v40@0:8@"APSConnection"16@"APSURLToken"24@"APSURLTokenInfo"32
v40@0:8@"APSConnection"16@"NSError"24@"APSURLTokenInfo"32
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
v32@0:8@"APSConnection"16@"NSArray"24
v64@0:8@16@24@32d40:48@56
q24@0:8@16
B32@0:8^@16^@24
v44@0:8@16@24i32@36
v56@0:8@16@24@32@40q48
v40@0:8@16q24@32
@"<FTMessageDeliveryAPSConnection>"
@"<FTMessageDeliveryAPSMobileNetworkManager>"
@28@0:8@16i24
v24@0:8^{__SecKey=}16
v48@0:8@16@24^{__SecKey=}32^{__SecKey=}40
^{__SecKey=}16@0:8
^{__SecKey=}
v24@0:8^{__CFDictionary=}16
@"NSArray"
@"FTRegion"
@44@0:8@16@24B32B36B40
v24@0:8@"ACAccount"16
v56@0:8@16@24@32^@40@?48
v60@0:8@16@24B32B36B40^@44@?52
v64@0:8@16@24@32B40B44^@48@?56
v68@0:8@16@24@32B40B44B48^@52@?60
v72@0:8@16@24@32B40B44B48B52^@56@?64
v64@0:8@16@24@32@40^@48@?56
v72@0:8@16@24@32@40@48^@56@?64
v80@0:8@16@24@32@40@48@56^@64@?72
B32@0:8d16d24
@40@0:8@16@24@32
v56@0:8@16@24@32@40@?48
v40@0:8@?16@?24@?32
v56@0:8@"NSString"16@"NSString"24@"NSString"32^@40@?<v@?@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSDictionary"@"NSNumber">48
v60@0:8@"NSString"16@"NSString"24B32B36B40^@44@?<v@?@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSDictionary"BBB>52
v64@0:8@"NSString"16@"NSString"24@"NSString"32B40B44^@48@?<v@?@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSDictionary"@"NSNumber"BBB>56
v68@0:8@"NSString"16@"NSString"24@"NSString"32B40B44B48^@52@?<v@?@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSDictionary"@"NSNumber"BBB>60
v72@0:8@"NSString"16@"NSString"24@"NSString"32B40B44B48B52^@56@?<v@?@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSDictionary"@"NSNumber"BBB>64
v64@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40^@48@?<v@?@"NSString"@"NSString"@"NSString"B>56
v72@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48^@56@?<v@?@"NSString"@"NSString"@"NSString"B>64
v80@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSNumber"56^@64@?<v@?@"NSString"@"NSString"@"NSString"B>72
v32@0:8@"NSString"16@"NSString"24
v48@0:8@"NSString"16@"NSString"24@"NSString"32@"NSArray"40
v48@0:8@"NSNumber"16@"NSString"24@"NSString"32@"NSString"40
@"ACAccount"40@0:8@"NSString"16@"NSString"24@"ACAccountStore"32
@"IDSGameCenterData"24@0:8@"NSString"16
@"NSString"24@0:8@"ACAccount"16
v56@0:8@"NSString"16@"NSString"24@"NSArray"32@"NSArray"40@?<v@?B>48
v40@0:8@?<@"NSArray"@?>16@?<@"NSArray"@?>24@?<v@?B>32
v24@0:8@?<v@?B>16
@40@0:8@16@24@?32
@32@0:8@16@?24
v76@0:8@16@24@32@40@48B56@?60@?68
d16@0:8
@36@0:8@16@24B32
@"NSMutableSet"
@"ACAccountStore"
@"IMUserNotificationCenter"
@"_FTPasswordManagerCachedAuthTokenInfo"
@56@0:8@16Q24@32@40@48
@"NSURL"
@(#)PROGRAM:FTServices  PROJECT:FaceTime Services-
_kIDSServerBagFinishedLoadingNotification
FTMessageDeliveryNoResultCodeError
FTMessageDelivery
Service
Delivery
Should retry!
Warning
IDSFoundation
Failed retrying message: %@
com.apple.imagent.http-delivery
FaceTime
Network state changed
push
auth
x-auth-user-id
dictionary
x-auth-user-id%@
x-%@-cert%@
x-%@-nonce%@
x-%@-sig%@
v16@?0@"FTMessageQueue"8
apns-webtunnel-blacklisted-topics
com.apple.registration
forceReversePushIDQuery
WebTunnel
Message topic (%@) is in the list of blocklisted topics (%@)
We do not meet the version requirements for web tunnel ID queries
This query is not important enough to perform a web tunnel ID query
We are in backoff mode 
Server gave us 0 quota to use this feature
Diceroll Was %ld
Diceroll Sucesss, dual query will be performed
Diceroll failed
DualDeliveryBackOffDate
We have a cached vale for server backoff mode
Back off End Date is %@
Back off Interval is in the past, we are good to go
Back off Interval is in the future, we are in backoff
com.apple.identityservicesd
Incoming request to send a dualMode message %@
Dequeing message if needed
Message Allow Dual Delivery
Server says yes for APS delivery, lets go ahead and use that
Not allowed to use APS delivery, using HTTP
%@=%@
v32@?0@8@16^B24
Web Tunnel Response got %ld
Web Tunnel Query was successful; passing along the completion information
Unknown Error, Falling back to HTTP
v8@?0
v40@?0@"IDSBaseMessage"8@"NSError"16q24@"NSDictionary"32
apns-ids-query-min-version
Server Bag provided us with %d Web Tunnel Version
Server Bag has no value for Min Version, using the default: %f
apns-ids-query-percentage
Server Bag provided us with %d Web Tunnel Percentage
Server Bag has no value for percentage, using the default: %f percentage
apns-ids-query-wait-time
Server Bag provided us with a wait time interval of %f 
Server Bag has no value for wait time interval , using the default: %f interval
APSErrorDomain
ApplePushService
sigs
push-token
auth-token
name
version
flags
Nonce
Signature input is %d bytes (%@)
Unknown digest type provided as input to digest generation function -- returning empty digest { digestType: %ld }
No digest generated { signatureInputDataLength: %lu, digestType: %ld }
bag-key
Appending %d length header for %@ segment
Appending %d bytes for %@ segment
Appending no bytes for %@ segment
query-string
body
1.2.11
__kFaceTimeDeviceRegistrationStateChangedNotification
__kFaceTimeDeviceRegistrationCapabilityChangedNotification
__kFaceTimeDeviceCapabilityChangedNotification
__kFaceTimeDeviceSIMInsertedNotification
__kFaceTimeDeviceSIMRemovedNotification
__kFaceTimeDeviceRestictionsChangedNotification
__kFTCTRegistrationStatusCanRegisterKey
__kFTCTRegistrationStatusPhoneNumberKey
__kFTCTRegistrationStatusIMSIKey
__kFTCTRegistrationStatusPLMNKey
__kFTCTRegistrationStatusChangedNotification
AllowsFaceTimeAudio
com.apple.facetime
ForceMakeBeforeBreak
Unnamed Device
%@,%@,%@
UMUserManager
UserManagement
PKCanMakePaymentsForIDS
PassKitCore
PKSupportsManateeForAppleCashForIDS
PKSupportsRegionForAppleCashForIDS
sp_IDS_supportsIDSRegistrationPropertySupportsFMDV2
SPOwner
DAManager
DigitalAccess
PKShareableCredentialsSupportsHarmony
NISession
NearbyInteraction
hw.cpufamily
FTErrorDomain
FTServicesSuppressServiceErrorDialogsPropertyKey
Web Tunnel Message Completed With Respone Headers %@
FTSelectedPNRSubscriptionChangedDistributedNotification
<%@: %p phoneNumber: %@, dualSIMCapability: %ld, selectedContext: %@, subsriptionInfo: %@, activeSubscriptionInfo: %@>
Network
dataActiveAndReachable: return YES
Updating critical reliability state from: %@ to: %@
FTServiceStatusDidChangeNotification
FTServiceStatusNotifyRegister
v20@?0i8Q12
SCNetworkReachabilityCreateWithName
SystemConfiguration
SCNetworkReachabilityCreateWithAddress
localWiFiStatusForFlags
networkStatusForFlags
FTEmbeddedReachability.m
connectionRequired called with NULL reachabilityRef
SCNetworkReachabilityGetFlags
currentNetworkStatus called with NULL reachabilityRef
EmbeddedReachability
x-apple-apns-dual-mode-delivery-type
application/x-apple-plist
com.apple.ids
x-test-opts
anisette-headers-global-timeout
anisette-headers-lenient-timeout
AKAppleIDSession
AuthKit
com.apple.ids.ftauthkitmanager
AuthKit - gathering headers
AuthKit - handling response
AuthKit - shouldRetry: %@
d24@?0q8d16
Cannot send message: Empty URL requested for message: %@, forcing a bag load
 Query parameters: %@
 Query string: %@
Generated final URL: %@
POST
Headers
       User Agent: %@
FaceTime.Verbose
%@ %@
            Agent: %@
Accept-Language
gzip
accept-encoding
user-agent
content-encoding
content-type
content-length
       %@: %@
MessageDelivery
Message with ID %@ not found in queue.  Abandoning anisette header collection.
anisette-headers-disabled
anisette headers are required for messageType %@ but disabled by the server bag anisette-headers-disabled
v16@?0@"NSDictionary"8
v16@?0@?<v@?>8
************* Couldn't gather Anisette headers %@ *************
x-apple-i-md
x-apple-i-md-m
<redacted>
v12@?0B8
Exception processing result: %@   for message: %@
error = %@
Message with ID %@ not found in queue.  Abandoning URL request.
Created URL Request: %@  from URL: %@
Delivering message %lu to URL: %@
%lu Message body: %@
FTMessageDelivery_HTTP.m
Force cellular: %@
x-bag-refresh
%lu Finished URL request: %p
%lu Information about finished URL request: %@
X-Apple-Splunk-Hint
Registration
%lu Information about response headers: %@
Connection failed with error: %@
FTMessageDelivery failed! (HTTP Status Code: %d) Error (%@:%d): %@ %@
... no error, ignoring...
Response
  headers: %@
  status code: %d
status
retry-interval
current-timestamp-ms
message
(Not Loggable)
sent dictionary: %@
         result: %@
    status code: %d
v48@?0@"NSURLResponse"8q16@"NSData"24@"NSError"32@"NSDictionary"40
do-http-pipelining
max-concurrent-connections
do-http-keep-alive
http-keep-alive-idle-timeout-wifi-millis
http-keep-alive-idle-timeout-cell-millis
Failing message, empty url request
v16@?0@"NSURLRequest"8
%@ Cancelling message delivery! invalid message!
%@ Message body: %@
%@ Cancelling message delivery! Missing keys: %@
%@ Message not being delivered, airplane mode is enabled
Message timed out, but we're going to wait for CFNetwork: %@
Queue timed out delivery for message: %@
Cancelling message in the queue: %@
We're out of airplane mode, and we have a pending retry
_CFNetworkCopyPreferredLanguageCode
CFNetwork
Using server bag anisetteHeaderLenientTimeout: %f second(s)
Using server bag anisetteHeaderGlobalTimeout: %f second(s)
md-retry-start-interval
md-retry-attempts
APSOutgoingMessage
APSConnection
APSConnectionOverrideNamedDelegatePort
Created APSConnection: %p  (Max size: %d  Environment: %@)
Cannot map Message: %@   no ID!
none
Mapping messageID: %@  message: %@   APSMessage: %@   timeout: %f  timeoutSelector: %@
No timer specified for message ID: %@
Missing APS Message for message ID: %@
Missing FTMessage for message ID: %@
Missing body for message ID: %@
_clearMapForMessageID: %@
  => Message ignores max retry count set on server bag. Keep retrying (current retires %d). Has received courier ack? %@
  => Message retried too many times (%d), not retrying anymore. Has received courier ack? %@
Noting message failed: %@   (Request ID: %@  Retries: %d  Retry Allowed: %@  Wants Retry: %@)
FTMessageDelivery Sending SOS for APS failure that recieved response code: (HTTP Status Code: %d)
SOS Metric Domain (%d), sos type (%d), error code (%d), url (%@)
  => Will retry message: %@ in %f seconds
Informing delegate about message %@ with resultCode %ld
Noting message success: %@   (Request ID: %@   %d remaining)
Noting message ack'd: %@   (Request ID: %@   %d remaining)
   => Setting ack timeout time, this will use APS retries
Message has used %ld retries, Retry timeout time with multiplier will be %f
   => Setting send timeout time: %f
Noting message sent: %@   (Request ID: %@  Remaining: %d  Attempt: %d)
Sent outgoing message: %@ to command: %@   (Request ID: %@   Connection: %@)
Could not generate APSMessage for message: %@
Timed out waiting for server ack for message: %@   (Request ID: %@)
Timed out waiting for server response for message: %@   (Request ID: %@)
Missing message for retry!  (timer: %@   messageID: %@)
Starting retry for message: %@   (Request ID: %@)
Timed out waiting for server response after final grace period for message: %@   (Request ID: %@)
v32@?0@8Q16^B24
Enabling required topics: %@
  => Skipping, already enabled
Cannot send message: Empty topic requested for message: %@
Building URL request with topic: %@  bagKey: %@
Body: %@
Final delivery payload: %@
Message sent as non-binary push. This is never expected and probably points to memory corruption.
Sending message: %@ as binary push
invalidating: %@
Requesting async send: %@
Created APSOutgoingMessage body: %@
Delivering message to command: %@
CommandID
MessageIdentifier
GUIDTRACE
OUTGOING-APS_DELIVERY:%@ SERVICE:%@
FaceTimeDelivery
Message body: %@ [guid: %@]
MessageGUID
IDS OutgoingPushSent
Failing message, empty message
Nothing left in queue, done
Server bag is not loaded, waiting for it
 => Server is available
 => Starting load
 => Already loading
 => Server not available
 => Server bag not needed, proceeding
We're already busy, not pulling from queue
Cancelling message delivery! invalid message!
Message body: %@
Cancelling message delivery! Missing keys: %@
Message not being delivered, airplane mode is enabled
Removed message: %@   apsMessage: %@
Message: %@ not in queue.   Current message: %@
Adding message to the queue: %@
  Busy delivering: %@
Server bag loaded
received response dictionary: %@
Response Headers: %@
no message found, map reads: %@
Topic
IDS IncomingPushReceived
Received an unknown object for kBodyIDKey
Error decompressing body: %@  (Data: %@)
received response code: %@  response body: %@
  Found internal status code of: %@
Exception processing status code from result body: %@   for message: %@
  This Message Wants Multiple responses
  This Message responds to receiving updates for multipleMessages
 More To Come, Not done yet
  Last message Has Been acknowledged
Server ACK'd outgoing message: %@      (Request ID: %@)
   message: %@ wants response: %@
message delivery failed {error: %@, retryBehavior: %d}
FTMessageDelivery failed! Error (%@:%d): %@ %@
APSConnection %@  gave me a connection size of: %d  which doesn't pass our sanity size of: %ld   ignoring
APSConnection %@  gave me a connection large size of: %d  which doesn't pass our sanity size of: %ld   ignoring
Server Bag provided us with %d retries
Server Bag has no value for retries, using the default: %ld retries
Server Bag provided us with a retry interval of %f 
Server Bag has no value for interval , using the default: %f interval
com.apple.icloud.presence.channel.management
scReq
scRes
%@:b
Passed in bogus info to FTIDSMessage (%@:%@:%@:%@)
retry-count
x-push-token
x-protocol-version
x-id-self-uri
__kFTEntitlementStatusChangedNotification
FTUserConfigurationSelectedSubscriptionLabelDidChange
subregions
iso-2
label
base-phone-number
[FTRegion] Label: %@   ISO: %@    BaseNumber: %@  Region ID: %@
__kFTRegionListFinishedLoadingNotification
com.apple.facetime-region-query
RegionSupport
Succeeded loading region information
RegionSupport.Verbose
   Region info: %@
   Loaded region: %@
Failed querying regions: %@  code: %ld
vc-profile-get-region-metadata
accept-language
regions
ds-session-token-grace-period
bundleRef
profile-id
profileID
self-handle
handles
com.apple.imcore
originalUsername
alert
_properties
ACMonitoredAccountStore
Accounts
B16@?0@"ACAccount"8
v20@?0B8@"NSError"12
v24@?0@"ACAccountType"8@"NSError"16
com.apple.private.alloy.itunes
v16@?0@"IMUserNotification"8
ACAccount
v84@?0@"NSString"8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56@"NSNumber"64B72B76B80
v24@?0q8@"NSError"16
v24@?0@"ACAccount"8@"NSError"16
ACAccountCredential
iMessage
Calling
iTunes
iCloud
account services
Enter the password for your Apple ID to continue using %@ on this %@:
FTSLocalizable
Generic Service Apple ID alert body: Enter the password for your Apple ID to continue using account services on this Mac: username
AARenewShouldPostFollowUp
__ksPasswordPromptUserNotificationIdentifier
Password alert title: iCloud
%@ Password
DaemonCoreLocalizable
Alert title: %@ password (arg: service name)
Password
Text label: password
Log In
Button title: login
Cancel
%@ Login
Alert title:login (arg: service name)
Login ID:
Text label: loginid
Password:
Forgot Password\U2026
Button title: Forgot Password button
Remember this password in my keychain
Remember password
Messages can\U2019t log in to %@ because your login ID or password is incorrect.
Alert message:badpasslogin (arg:account name)
Please enter your password for %@.
Alert message:login (arg:account name)
FTPasswordManager
-[FTPasswordManager acAccountWithProfileID:username:accountStore:]
ACAccountTypeIdentifierIdentityServices
ACAccountTypeIdentifierGameCenter
(nil auth token)
(empty auth token)
%@...
(short auth token)
ACAccountTypeIdentifierIDMS
Multiway
com.apple
kACRenewCredentialsShouldForceKey
kACRenewCredentialsReasonStringKey
kACRenewCredentialsAppleIDServiceTypeKey
kACRenewCredentialsProxiedAppBundleIDKey
kACRenewCredentialsShouldAvoidUIKey
/System/Library/PrivateFrameworks/IMDaemonCore.framework
FT URL  Message Completed With Respone Headers %@
Should retry!
...Should retry
No message to retry -- returning
Failed retrying message: %@
...Failed retrying
Network state changed
Timestamp received %@, delta %f servertimestamp %@ newServerTimestamp %@
Failed to sign message {message: %@, signingSession: %@, error: %@}
Signing message: %@
   Single signing for: %@
   Multiple signatures for: %@
REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s
   adding userID: %@
   result dictionary: %@
Setting timeout for %f seconds from now  (Message: %@)
Queue timeout hit for message: %@
Message topic (%@) is in the list of blocklisted topics (%@)
We do not meet the version requirements for web tunnel ID queries
This query is not important enough to perform a web tunnel ID query
We are in backoff mode 
Server gave us 0 quota to use this feature
Diceroll Was %ld
Diceroll Sucesss, dual query will be performed
Diceroll failed
We have a cached vale for server backoff mode
Back off End Date is %@
Back off Interval is in the past, we are good to go
Back off Interval is in the future, we are in backoff
Incoming request to send a dualMode message %@
Dequeing message if needed
Message Allow Dual Delivery
Server says yes for APS delivery, lets go ahead and use that
Not allowed to use APS delivery, using HTTP
Web Tunnel Response got %ld
Web Tunnel Query was successful; passing along the completion information
Unknown Error, Falling back to HTTP
Server Bag provided us with %d Web Tunnel Version
Server Bag has no value for Min Version, using the default: %f
Server Bag provided us with %d Web Tunnel Percentage
Server Bag has no value for percentage, using the default: %f percentage
Server Bag provided us with a wait time interval of %f 
Server Bag has no value for wait time interval , using the default: %f interval
Signature input is %d bytes (%@)
Unknown digest type provided as input to digest generation function -- returning empty digest { digestType: %ld }
No digest generated { signatureInputDataLength: %lu, digestType: %ld }
Appending %d length header for %@ segment
Appending %d bytes for %@ segment
Appending no bytes for %@ segment
Succeeded verifying signature for: %@
Failed verifying signature with error: %@
Failed signing  with error: %@
Succeeded signing: %@
Setting CoreTelephonyClient delegate to start receiving notifications { self: %@, coreTelephonyClient: %@ }
FTA isn't allowed, disabled
FTA isn't allowed, managed profile doesn't allow it
FTMW isn't allowed, disabled
FTMW isn't allowed, managed profile doesn't allow it
Checked FTA support in process {supportsFT: %@, carrierOverrideFTA: %@, GT: %@}
Conferencing isn't allowed, disabled
Conferencing isn't allowed, managed profile doesn't allow it
Received phone number registration ready state change callback { state: %@, context: %@ }
Received phone number changed delegate callback { context: %@ }
Phone number registration state changed -- posting notification { notification: %@, state: %@ } 
No change to phone number registration state -- not posting notification { lastState: %@, state: %@ }
Returning telephony network information { networkInformation: %@ }
Error reading telephony network information { key: %@, value: %@, error: %@ }
No value found for telephony network key { key: %@ }
Lockdown became activated, let's notify
Registering %@ for lockdown changes
Supports UWB: %@
Web Tunnel Message Completed With Respone Headers %@
Determined whether phone numbers are equivalent { phoneNumber: %@, existingPhoneNumber: %@, equivalent: %@ }
Subscription info did change -- clearing cached selected phone number registration subscription
Phone number changed -- clearing cached selected phone number registration subscription { context: %@ }
Phone number became available -- clearing cached selected phone number registration subscription { context: %@ }
Active subscriptions did change -- clearing cached selected phone number registration subscription
Dual SIM capability did change -- clearing cached selected phone number registration subscription
Posting distributed notification to invalidate selected phone number subscription caches in other processes
Determined if provided subscription context is selected IDS phone number subscription context { context: %@, selectedContext: %@, persistedLabel: %@, isMatching: %@ }
Determined if device is in dual phone identity mode { isDualIdentity: %@, dualSIMCapability: %ld, isDeviceInDualPhoneIdentityMode: %@ }
Determined that device has entered dual identity mode { subscriptionInfo: %@ }
dataActiveAndReachable: return YES
Updating critical reliability state from: %@ to: %@
Updating supported service status { iMessageSupported: %@, faceTimeAudioSupported: %@, faceTimeMultiwaySupported: %@, supportedServicesFlags: %llu }
Reachability Flag Status: %c%c %c%c%c%c%c%c%c %s
AuthKit - gathering headers
AuthKit - received headers, count: %lu
AuthKit - handling response
AuthKit - shouldRetry: %@
Cannot send message: Empty URL requested for message: %@, forcing a bag load
 Query parameters: %@
 Query string: %@
Generated final URL: %@
Building URL request with URL: %@
Headers
       User Agent: %@
            Agent: %@
       %@: %@
Message with ID %@ not found in queue.  Abandoning anisette header collection.
anisette headers are required for messageType %@ but disabled by the server bag anisette-headers-disabled
************* Couldn't gather Anisette headers for %@ *************
************* Couldn't gather Anisette headers %@ *************
       %@: %{private}@
Exception processing result: %@   for message: %@
Cannot send nil message
Requesting async send: %@
error = %@
Message with ID %@ not found in queue.  Abandoning URL request.
Created URL Request: %@  from URL: %@
%s:%d %{private}@
Delivering message %lu to URL: %@
Force cellular: %@
**** Server sent status code header codes to refresh the bag, reloading IDS and iMessage bags ****
**** Server sent status code header codes to refresh the bag (Interval: %d), reloading IDS and iMessage bags ****
  * Sending refresh, we're outside our interval: %d  (Last date: %@)
  * Not refreshing, we're still inside our interval: %d (Laste date: %@)
%lu Finished URL request: %p
Response: %p
           Response: %@
       Replied Code: %d
 Result Data Length: %d
              Error: %@
Connection failed with error: %@
FTMessageDelivery failed! (HTTP Status Code: %d) Error (%@:%d): %@ %@
FTMessageDelivery Sending SOS for request to url: (%@) that recieved response code: (HTTP Status Code: %d)
SOS Metric Domain (%d), sos type (%d), error code (%d), url (%@)
... this was a remote loader crash
... no error, ignoring...
... IDS message failed sending
... IDS message timed out
... we're done here, code: %d
... we should retry this
... not going to retry, we're done
  headers: %@
  status code: %d
Result parse error: %@
Result status code: %d
SplunkHint: %{public}@
ServerErrorDetail: %{public}@
Server requested retry with delay, will retry after %f seconds
Setting server timestamp %@
Kicked off server retry
Unable to retry this message any further
sent dictionary: %@
         result: %@
    status code: %d
Failing message, empty url request
Failing message, empty url request for URL: %@
Nothing left in queue, done
Server bag is not loaded, waiting for it
 => Server is available
 => Starting load
 => Already loading
 => Server not available
%@ Message not being delivered, invalid message
%@ Cancelling message delivery! invalid message!
%@ Message not being delivered, missing some required keys: %@
%@ Cancelling message delivery! Missing keys: %@
%@ Message not being delivered, airplane mode is enabled
Cleaning out url connection
Should retry, already tried: %d times
Not retrying right now, we're in airplane mode with no wifi
Retrying - trying again in %f seconds
Gave up, too many attempts
Message timed out, but we're going to wait for CFNetwork: %@
Message timed out, but we want extra timeout retries (%d/%d): %@
Queue timed out delivery for message: %@
Cancelling message in the queue: %@
Adding message to the queue: %@
  Busy delivering: %@  (%@)
Server bag loaded
We're out of airplane mode, and we have a pending retry
Using server bag anisetteHeaderLenientTimeout: %f second(s)
Using server bag anisetteHeaderGlobalTimeout: %f second(s)
Created APSConnection: %p  (Max size: %d  Environment: %@)
Cannot map Message: %@   no ID!
Mapping messageID: %@  message: %@   APSMessage: %@   timeout: %f  timeoutSelector: %@
No timer specified for message ID: %@
Missing APS Message for message ID: %@
Missing FTMessage for message ID: %@
Missing body for message ID: %@
_clearMapForMessageID: %@
  => Message ignores max retry count set on server bag. Keep retrying (current retires %d). Has received courier ack? %@
  => Message retried too many times (%d), not retrying anymore. Has received courier ack? %@
Noting message failed: %@   (Request ID: %@  Retries: %d  Retry Allowed: %@  Wants Retry: %@)
FTMessageDelivery Sending SOS for APS failure that recieved response code: (HTTP Status Code: %d)
  => Will retry message: %@ in %f seconds
Informing delegate about message %@ with resultCode %ld
Noting message success: %@   (Request ID: %@   %d remaining)
Noting message ack'd: %@   (Request ID: %@   %d remaining)
   => Setting ack timeout time, this will use APS retries
Message has used %ld retries, Retry timeout time with multiplier will be %f
   => Setting send timeout time: %f
Noting message sent: %@   (Request ID: %@  Remaining: %d  Attempt: %d)
Sent outgoing message: %@ to command: %@   (Request ID: %@   Connection: %@)
Could not generate APSMessage for message: %@
Timed out waiting for server ack for message: %@   (Request ID: %@)
Timed out waiting for server response for message: %@   (Request ID: %@)
Missing message for retry!  (timer: %@   messageID: %@)
Starting retry for message: %@   (Request ID: %@)
Timed out waiting for server response after final grace period for message: %@   (Request ID: %@)
Enabling required topics: %@
  => Skipping, already enabled
Cannot send message: Empty topic requested for message: %@
Building URL request with topic: %@  bagKey: %@
Body: %@
Final delivery payload: %@
Sending message: %@ as binary push
invalidating: %@
Created APSOutgoingMessage body: %@
Delivering message to command: %@
OUTGOING-APS_DELIVERY:%@ SERVICE:%@
Message body: %@ [guid: %@]
Failing message, empty message
APS dequeue message
 => Server bag not needed, proceeding
We're already busy, not pulling from queue
Cancelling message delivery! invalid message!
Message not being delivered, missing some required keys: %@
Cancelling message delivery! Missing keys: %@
Message not being delivered, airplane mode is enabled
Message body: %@
Removed message: %@   apsMessage: %@
Message: %@ not in queue.   Current message: %@
  Busy delivering: %@
Response Headers: %@
no message found, map reads: %@
received response dictionary: %@
Received an unknown object for kBodyIDKey
Error decompressing body: %@  (Data: %@)
received response code: %@  response body: %@
  Found internal status code of: %@
Exception processing status code from result body: %@   for message: %@
  This Message Wants Multiple responses
  This Message responds to receiving updates for multipleMessages
 More To Come, Not done yet
  Last message Has Been acknowledged
Server ACK'd outgoing message: %@      (Request ID: %@)
   message: %@ wants response: %@
message delivery failed {error: %@, retryBehavior: %d}
FTMessageDelivery failed! Error (%@:%d): %@ %@
APSConnection %@  gave me a connection size of: %d  which doesn't pass our sanity size of: %ld   ignoring
APSConnection %@  gave me a connection large size of: %d  which doesn't pass our sanity size of: %ld   ignoring
Server Bag provided us with %d retries
Server Bag has no value for retries, using the default: %ld retries
Server Bag provided us with a retry interval of %f 
Server Bag has no value for interval , using the default: %f interval
Passed in bogus info to FTIDSMessage (%@:%@:%@:%@)
This device does not support non WiFi facetime, thus we're not entitled
Returning default entitlement of YES
Posting notification for entitlement status changed
 Cleaning up mach bits
Succeeded loading region information
   Region info: %@
   Loaded region: %@
Failed querying regions: %@  code: %ld
Checking keychain with prefixed username %@
Account: %@
            username: %@
          profile ID: %@
               token: %@
vetted email handles: %@
Fetching GS account for username %@
Found no GameCenter account for username %@
Properties on found account: %@
Searching for profileID %@
Didn't find an authenticated account with a DSID; attempting to fall back to an unauthenticated match that has a password
Didn't find a DISD match with a password; attempting to fall back to an unauthenticated DISD and username match
Didn't find an unauthenticated DISD and username match; attempting to fall back to an unauthenticated DSID match
Didn't find a DSID match!
Couldn't match based on any known DSID of %@; attempting to fall back to a username match
Couldn't find a username match for %@; attempting to search aliases of known accounts
Didn't find any matching account!
Didn't find profileID %@; attempting to use username %@
Updating username on accounts { previousUsername: %@, newUsername: %@ }
Updating username on accounts { accountsToUpdate : %@ }
Save completed (%@) with error: %@
Failed saving account %@ with error: %@
Failed to request account type from identifier { typeIdentifierIDS: %@, accountType: %@, accountTypeError: %@ }
Determined if we should force silent-only auth { username: %@, serviceIdentifier: %@, shouldForceSilentAuth: %@ }
Checking if username has a corresponding IdMS ACAccount instance { username: %@ }
IdMS ACAccount instance matches { accountID: %@, accountUsername: %@ }
IdMS ACAccount instance does not match { accountID: %@, accountUsername: %@ }
Unable to find a corresponding IdMS ACAccount instance { username: %@ }
Performing clean-up on accounts
Found candidate account for clean-up { account : %@ }
Requesting save of cleaned-up accounts { accountsToSave : %@ }
Saving account { account: %@ }
Save completed { account: %@, success: %@, error: %@ }
Cleaning up accounts {username: %@, profileID: %@, inUseUsernames: %@, inUseProfileIDs: %@ }
Requesting deletion of accounts { accountsToDelete : %@ }
Deleting unused account { account: %@ }
Delete completed { account: %@, success: %@, error: %@ }
Begin cleaning up unused accounts { usernameBlock : %@, profileIDBlock : %@ }
Cleaning up unused accounts { usernames : %@, profileIDs : %@ }
Checking if account should be deleted { account: %@ }
Account was recently added. Not deleting
Account was not recently added
Password manager fetch password
Fetching password for profileID: %@ username: %@ service: %@
  Found account: %@
  Credential: %@
         => Type: %@
     => Username: %@
     => Password: %@
   => Auth Token: %@
   => Profile ID: %@
      => Self ID: %@
Did not find an account to use! No password fetched.
Password manager fetch auth token
Fetching auth token for profileID: %@ username: %@ service: %@
  Found cached account info: %@
  Monitor error: %@
Did not find an account to use! No auth token fetched.
Password manager request password
Requesting password for username: %@  service: %@
Handle user notification complete: %@:%@
Password manager request auth token
Requesting auth token for profileID: %@ username: %@ service: %@ failIfNotSilent: %@
No account found, created new account: %@
Adding and saving account
Getting new auth token {shouldClearAccountCache: %@, account: %@}
Failed renewing account %@ with error: %@
Renewal complete for: %@  service: %@ account: %@  renewResult: %ld  error: %@
  => Cancelled, bailing
*** Empty profile ID handed back during token gathering, please file a radar
*** Account: %@
Requesting verification for account: %@
Completed verify credentials
Verification complete for: %@  service: %@ account: %@  error: %@
Failed verifying account %@ with error: %@
*** No error reported for account verification, but verified account is nil, please file a radar (input: %@  output: %@)
*** No account found to use for renewal, please file a radar (input: %@  output: %@)
   Verification failed with error: %@, starting renew for service: %@
Verification succeeded for account: %@
     => Token: %@
    => SelfID: %@
*** Account properties: %@
Checking the current status of the account {foundAccount: %@, status: %@, properties: %@}
Not requesting renewal for a Managed AppleID account
Requesting renewal for account: %@  service: %@
Password manager set password
Setting password for profileID: %@ username: %@ service: %@
Using account: %@
Updated credential: %@
Creating credential: %@
Assigning credential: %@
Saving account
Checked auth token receipt date against grace period {isAuthTokenWithinGracePeriod: %@, authTokenReceiptTime: %f, gracePeriod: %f, now: %f, delta: %f}
Removing auth token using grace period for profileID: %@ username: %@
No account found for auth token removal -- ignoring request
Auth token receipt date falls outside of grace period -- removing auth token {authTokenReceiptTime: %@}
Updating credential %@
Saving account: %@
      Authenticated: %@
Auth token receipt date falls within grace period -- skipping removal {authTokenReceiptTime: %@}
Password manager set auth token
Setting auth token for profileID: %@ username: %@ service: %@  (%@)
Updated auth token receipt time {receiptTime: %f}
Setting profile ID on account: %@
Setting self handle on account: %@
Setting account status {profileID: %@, username: %@, service: %@, accountStatus: %@}
Setting handles dictionary for profileID: %@ username: %@ service: %@  (%@)
Verification Options Dictionary Contains: %@
%@ - %s: invalid arguments!
Invalid username %@ or account %@
Comparing strippedUserName %@, accountUserName %@ and accountOriginalUserName %@
FT URL  Message Completed With Respone Headers %@
FTServerBag
FTMessageDelivery
FTMessageQueueDelegate
FTMessageQueue
FTMessageDelivery_DualMode
FTMessageDeliveryProtocol
NSObject
FTAPSOutgoingMessage_Additions
FaceTimeStringAdditions
CompressionAdditions
FTDeviceSupport
CoreTelephonyClientCarrierBundleDelegate
CoreTelephonyClientSubscriberDelegate
CoreTelephonyClientPNRDelegate
FTProtobufMessage
FTSelectedPNRSubscriptionCache
FTSelectedPNRSubscription
FTNetworkSupport
FTServiceStatus
FTiMessageStatus
FTEmbeddedReachability
IDSWebTunnelRequestMessage
FTAuthKitManager
FTMessageDelivery_HTTP
FTMessageDeliveryRemoteURLConnection
FTMessageDeliveryRemoteURLConnectionFactory
FTMessageDeliveryHTTPMobileNetworkManager
FTMessageDelivery_APS
FTMessageDeliveryAPSMobileNetworkManager
APSConnectionDelegate
FTShareChannelMessage
FTIDSMessage
NSCopying
FTEntitlementSupport
FTUserConfiguration
FTRegion
FTRegionSupport
FTGetRegionMetadataMessage
_FTPasswordManagerCachedAuthTokenInfo
FTPasswordManager
ACMonitoredAccountStoreDelegateProtocol
FTURLRequestMessage
T@"NSArray",C,N
APNSMessageDeliveryClass
T@"NSMutableArray",&,V_addDates
HTTPMessageDeliveryClass
T^{__SecKey=},N,V_pushPublicKey
SHA1Data
__imFirstObject
SIMInserted
_gameCenterAccountWithUsername:
T@"<FTMessageQueueDelegate>",W,V_delegate
_messageHeaders
T@"CTXPCServiceSubscriptionContext",&,N,V_selectedContext
_number
T@"FTMessageDelivery",&,V_delivery
_reload
T@"FTRegion",R
_requiredTopics
T@"IDSBaseMessage",R
_retryTimerHit:
T@"NSArray",R
_selfID
T@"NSData",&,N,V_protoData
_sharedInstance
T@"NSData",C,N,V_identityCert
_status
T@"NSData",C,N,V_pushCert
allHeaderFields
T@"NSData",C,N,V_requestBody
allowAnyNetwork
T@"NSData",C,N,V_responseBodyData
base64EncodedStringWithOptions:
T@"NSDictionary",&,N,V_alertInfo
bundleForClass:
T@"NSDictionary",C,N,V_requestHeaders
cellularDataEnabledForBundleId:
T@"NSDictionary",C,N,V_responseBodyDictionary
completionBlock
T@"NSDictionary",C,N,V_timingData
dealloc
T@"NSDictionary",R,N
iMessageBlocked
T@"NSMutableArray",C,N,V_certDataArray
initWithLength:
T@"NSMutableArray",C,N,V_publicKeyArray
invalidateCache
T@"NSMutableDictionary",C,N,V_messageHeaders
isDeviceInDualPhoneIdentityMode
T@"NSNumber",C
isProxy
T@"NSNumber",C,N,V_responseStatus
labelID
T@"NSNumber",R,C,N
madridAvailable
T@"NSString",&,N,V_messageID
multiwayBlocked
T@"NSString",&,N,V_profileID
T@"NSString",&,N,V_selfID
pnrResponseReceived:pnrRspData:
T@"NSString",C,N
protocolVersion
T@"NSString",C,N,V_messageURL
reachabilityRef
T@"NSString",C,N,V_userAgentOverride
registerSynchronouslyWithError:
T@"NSString",C,V_userAgent
removeObserver:
T@"NSString",R,C
responseCommand
T@"NSURL",C,N,V_requestURL
selectedContext
T@"NSURLRequest",&
serverTimestamp
setPhoneNumber:
TB,N,V_blockPost
setRequestType:
TB,N,V_disallowRetry
setURLOverride:
TB,R,N
setWithObjects:
TB,R,N,V_isGreenTea
subscriberCountryCodeDidChange:
TB,R,N,V_supportsBackCamera
supportsHarmony
TB,R,N,V_supportsFrontCamera
timeout
TB,R,N,V_supportsMMS
validNetworkEnabledForBundleId:
TB,R,N,V_supportsSMS
wantsAPSRetries
TB,R,N,V_supportsWLAN
wantsClientInfo
TB,V_logToRegistration
.cxx_destruct
T@"NSDictionary",&,V_dictionary
CTNetworkInformation
T@"NSNumber",C,N,V_responseCode
IDCertificate
SHA256Data
_commCenterDead
T#,R
_messageAckGracePeriodTimedOut:
T@"CTXPCContexts",&,N,V_activeSubscriptionInfo
_noCache_supportedServicesFlags
T@"CTXPCServiceSubscriptionInfo",&,N,V_subscriptionInfo
_publicKeyArray
T@"FTRegion",&,V_parentRegion
_requestHeaders
T@"FTServiceStatus",R,N,V_serviceStatus
_responseStatus
T@"NSArray",&,V_regions
_runningQueries
T@"NSArray",R,V_subRegions
_setRetryTimer:
T@"NSData",&,N,V_protoResponse
_signMessage:useDataSignatures:body:queryString:intoDictionary:
T@"NSData",C,N,V_messageRequestBodyData
additionalQueryStringParameters
T@"NSData",C,N,V_pushToken
allKeys
T@"NSData",C,N,V_responseBody
anisetteHeadersForRequest:completionBlockQueue:completionBlock:
T@"NSData",R,N
basePhoneNumber
T@"NSDictionary",C,N,V_messageRequestBodyDictionary
bundleWithPath:
T@"NSDictionary",C,N,V_requestStringParams
command
T@"NSDictionary",C,N,V_responseHeaders
containsObject:
T@"NSDictionary",C,V_responseRegionInformation
faceTimeBlocked
T@"NSMutableArray",&,V_queue
importanceLevel
T@"NSMutableArray",C,N,V_privateKeyArray
initWithUserNotificationCenter:
T@"NSMutableArray",C,N,V_userIDArray
isAuthenticated
T@"NSNumber",&,N,V_status
isEqualToArray:
T@"NSNumber",C,N,V_maximumResponseSize
isoCode
T@"NSNumber",C,N,V_responseStatusCode
lowercaseString
T@"NSString",&
madridSupported
T@"NSString",&,N,V_phoneNumber
nonBluetoothAllowedForBundleId:
T@"NSString",&,N,V_pushTopic
numberWithLong:
T@"NSString",&,N,V_token
privateKeyArray
T@"NSString",C,N,V_messageRequestUUID
pushCertificate
T@"NSString",C,N,V_selfURI
regions
T@"NSString",C,V_language
release
T@"NSString",R
request
T@"NSString",R,N
responseHeaders
T@"NSURL",R
selfURI
T@?,C
setMessageType:
TB,N
setRequestBody:
TB,N,V_disableIDSTranslation
setServerTimestampReceivedDate:
TB,R
setUserIDArray:
TB,R,N,V_commCenterDead
set_dictionary:
TB,R,N,V_mmsConfigured
supportsHandoff
TB,R,N,V_supportsCellularData
telephoneNumber
TB,R,N,V_supportsHandoff
userAgentString
TB,R,N,V_supportsNonWiFiFaceTime
version
TB,R,N,V_supportsTethering
wantsBinaryPush
TB,R,N,V_supportsWiFi
warning
TB,V_retryInAirplaneMode
TQ,N,V_requestType
TQ,R
TQ,V_maxConcurrentMessages
TQ,V_supportedServicesFlags
T^{__SecKey=},N,V_identityKey
T^{__SecKey=},N,V_identityPublicKey
T^{__SecKey=},N,V_pushKey
Ti,N,V_messageType
Ti,N,V_responseValue
Ti,N,V_supportedServicesToken
Ti,N,V_version
Tq,N,V_dualSIMCapability
Tq,R
Tq,R,N
URLOverride
URLWithString:
UTF8String
UUID
UUIDString
_APSOutgoingMessageClass
_CFURLRequest
_FTCopyGzippedData
_FTCopyOptionallyGzippedData
_FTDataFromBase64String
_FTDataFromHexString
_FTDecompressData
_FTFilteredArrayForAPS
_FTFilteredDictionaryForAPS
_FTStringFromBaseData
_FZBestGuessFZIDType
_IDFromFZIDType:
_IDsFromURIs
_URIFromFZIDType:
_URIsFromIDs
__mainThreadPostNotificationName:object:
__mainThreadPostNotificationName:object:userInfo:
__stringByStrippingControlCharacters
_accountBasedOnProfileID:orUsername:inStore:
_accountModificationRestricted
_accountOptionsDictForRenewCredentialsForService:username:shouldFailIfNotSilent:
_accountStore
_accountWithProfileID:username:inStore:
_accountWithProfileIDMatchingUser:inStore:
_accountWithUsername:inStore:
_accountWithUsernameAlias:inStore:
_activeSubscriptionInfo
_addDates
_addObservers
_adequateInternalOrCarrierInstall
_akAppleIDSession
_alertInfo
_apsDelivery
_apsMessageBodyForMessage:
_apsMessageForMessage:body:
_apsMessageMap
_apsOutgoingMessageForFTMessage:
_bag
_blockPost
_bodyForMessage:
_bodyMap
_buildMessageDeliveryIfNeeded
_cachedAuthTokenInfo
_cachedBag
_certDataArray
_cleanupMachInfo
_cleanupURLConnection
_clearMapForMessageID:
_clearReliabilityTimeoutInterval
_clearRetryTimer
_clearTimeout
_connection
_coreTelephonyClient
_correctServerTimestampForDriftOnMessage:currentDate:
_criticalReliabilityEnabledState
_currentAPSMessages
_currentMessages
_currentTimers
_dataForKey:
_deathTimerMap
_delegate
_delivery
_dequeueIfNeeded
_dictionary
_dictionaryForKey:
_disableIDSTranslation
_disallowRetry
_disconnectCTServerConnection
_distributed_invalidateCache
_doesSubscriptionInfoContainMultipleLabels:
_doesSubscriptionInfoContainMultipleUniqueLabels:
_dualModeQueue
_dualSIMCapability
_enableCriticalReliability
_enabledTopics
_enoughPowerToSupportEffects
_enterBackOffMode
_entitlementStatusChanged
_errorForTDMessageDeliveryStatus:userInfo:
_faceTimeBlocked
_fillMessageParameters:ftMessage:
_findAccountOfType:InStore:withCriteria:
_findGameCenterAccountInStore:withCriteria:
_findIDSAccountInStore:withCriteria:
_findIDSAccountsInStore:withCriteria:
_firstPresentSubscriptionFromAvailableSubscriptions:
_ftMessageMap
_handleCarrierSettingsChanged
_handlePotentialPhoneNumberRegistrationStateChanged
_handleSIMStatusChangedToStatus:
_httpDelivery
_iMessageBlocked
_iMessageServerBag
_identityCert
_identityKey
_identityPublicKey
_idsServerBag
_im_normalizedURIString
_informDelegateAboutMessage:error:result:resultCode:
_informDelegatesOfMessage:result:resultCode:error:
_initWithDictionary:
_initializeSIMInsertedCachedValue
_invalidateDeathTimerForMessageID:
_invalidateTimerForMessageID:
_invalidateValuesCachedForSelectedPhoneNumberRegistration
_isBusyWithMessage:
_isGreenTea
_isIdentityFallbackProhibitedForDeviceBasedOnCapability:subscriptionInfo:
_isInBackoffMode
_isInDualPhoneIdentityModeBasedOnCapability:
_isPNRSupportedCachedValue
_keychainAuthTokenForUsername:service:
_keychainPasswordForUsername:service:
_language
_legacy_isPhoneNumberEmergencyNumber:
_legacy_supportsSMSIdentification
_lockdownStateChanged:
_logToRegistration
_loginUserNotificationForService:user:isForBadPassword:showForgetPassword:shouldRememberPassword:
_maxConcurrentMessages
_maximumResponseSize
_messageACKTimedOut:
_messageCompletelyTimedOut:
_messageForAPSOutgoingMessage:
_messageID
_messageNeedsRetry:
_messageRequestBodyData
_messageRequestBodyDictionary
_messageRequestUUID
_messageSendTimedOut:
_messageType
_messageURL
_mmsConfigured
_mobileNetworkManager
_nonWifiFaceTimeEntitled
_noteMessageACKd:ftMessage:
_noteMessageFailed:ftMessage:retryBehavior:error:
_noteMessageSent:ftMessage:body:
_noteMessageSucceeded:ftMessage:error:result:resultCode:
_notifyDelegateAboutError:
_notifyDelegateAboutError:resultCode:forMessage:
_numberForKey:
_parentRegion
_pendingRetryAfterAirplaneMode
_performanceClass
_phoneNumber
_powerLogEvent:dictionary:
_privateKeyArray
_processResultData:forMessage:error:
_profileID
_profileIDForUsername:inStore:
_protected_invalidateCache
_protected_reevaluateCacheIfNeededAndPersistUpdate:
_protoData
_protoResponse
_pushCert
_pushKey
_pushPublicKey
_pushToken
_pushTopic
_queue
_randomPercentageChanceForDualDelivery
_rawEntitlementValue
_reallySetCriticalReliability:
_reconnectCTServerConnectionIfNecessary
_reevaluateCachedActiveSubscriptionWithError:
_reevaluateCachedSelectedPhoneNumberRegistrationWithSubscription:activeContexts:fallbackProhibited:persistUpdate:error:
_reevaluateCachedSelectedPhoneNumberWithContext:error:
_reevaluateCachedSubscriptionWithError:
_reevaluateDualIdentityModeWithSubscriptionInfo:
_regions
_registerForCTEntitlementNotifications
_registerForCapabilityNotifications
_registerForCarrierNotifications
_registerForCommCenterReadyNotifications
_registerForInternalCoreTelephonyNotifications
_registerForLockdownNotifications
_registerForManagedConfigurationNotifications
_registerForServiceStatusNotifications
_remoteConnection
_remoteConnectionFactory
_removeObservers
_renewCredentialsIfPossibleForAccount:username:inServiceIdentifier:originalInServiceIdentifier:serviceName:failIfNotSilent:renewHandler:shortCircuitCompletionBlock:
_requestBody
_requestStringParams
_requestType
_requestURL
_responseBody
_responseBodyData
_responseBodyDictionary
_responseCode
_responseHeaders
_responseRegionInformation
_responseStatusCode
_responseValue
_retries
_retriesMap
_retryBackoffProvider
_retryCountForMessage:
_retryInAirplaneMode
_retryTimeAfterAirplaneMode
_selectedContext
_selectedPNRSubscription
_selfURI
_sendMessage:ftMessage:
_sendMessageAsynchronously:error:
_serverBagLoaded:
_serverTimestamp
_serverTimestampReceivedDate
_serviceStatus
_setEnabledTopics:
_setKeychainAuthToken:forUsername:service:
_setKeychainPassword:forUsername:service:
_setMapForMessage:apsMessage:messageBody:timeoutTime:timeoutSelector:retries:
_setParentRegion:
_setReliabilityTimeoutInterval
_setTimeout
_setUsingOutgoingPush:
_setupCTServerConnection
_sharedInstanceForType:
_shouldForceSilentOnlyAuthForUsername:serviceIdentifier:
_shouldSendSOSForFailure:
_shouldUseDualDeliveryForMessage:
_simBecameNotReady
_simInserted
_startDateMap
_stringForKey:
_stripFZIDPrefix
_subRegions
_subscriptionFromAvailableSubscriptions:matchingSelectedLabel:
_subscriptionInfo
_supportedServicesFlags
_supportedServicesToken
_supportsApplePayState
_supportsBackCamera
_supportsCellularData
_supportsFMDV2State
_supportsFT
_supportsFTA
_supportsFTMW
_supportsFrontCamera
_supportsHandoff
_supportsHarmonyState
_supportsKeySharingState
_supportsMMS
_supportsManateeForAppleCash
_supportsNonWiFiFaceTime
_supportsRegionForAppleCash
_supportsSMS
_supportsTethering
_supportsUWBState
_supportsVeniceState
_supportsWLAN
_supportsWiFi
_supportsiMessage
_timeoutHit
_timeoutTask
_timer
_timerMap
_timingData
_token
_tryRetryMessageWithTimeInterval:
_tryToEnableReliability
_type
_unregisterForCTEntitlementNotifications
_unregisterForCommCenterReadyNotifications
_unregisterForManagedConfigurationNotifications
_unregisterForServiceStatusNotifications
_updateCTNetworkDictionary:key:withTelephonyNetworkValue:telephonyError:
_updateCapabilities
_updateEntitlementStatusUsingCTEntitlementsInfo:
_updateManagedConfigurationSettings
_updateStatus:onAccount:
_updateTopics
_updateWiFiAssertions
_urlRequestWithURL:andData:message:completionBlock:
_userAgent
_userAgentOverride
_userAgentString
_userIDArray
_userNotificationCenter
_usernameHasCorrespondingIdMSAccount:
_usingOutgoingPush
_version
absoluteString
acAccountWithProfileID:username:accountStore:
accountCredentialChanged:
accountModificationRestricted
accountProperties
accountPropertyForKey:
accountType
accountTypeWithAccountTypeIdentifier:
accountTypeWithIdentifier:completion:
accountWasAdded:
accountWasModified:
accountWasRemoved:
accountsWithAccountType:
ackTimestamp
activeSubscriptionInfo
activeSubscriptionsDidChange
addAuthUserID:certificate:privateKey:publicKey:
addEntriesFromDictionary:
addMessage:
addMessageAtHeadOfQueue:
addObject:
addObjectsFromArray:
addObserver:selector:name:object:
addUserNotification:listener:completionHandler:
addWiFiAutoAssociationClientToken:
additionalInternalHeaders
additionalMessageHeaders
additionalMessageHeadersForOutgoingPush
ak_addClientInfoHeader
ak_addDeviceUDIDHeader
alertInfo
allKeysForObject:
allMessages
allObjects
allValues
alloc
allowDualDelivery
allowSelfSignedCertificates
allowUnsignedBags
allowsServerProvidedLenientAnisetteTimeout
anisetteHeadersTimeout
appendBytes:length:
appendData:
appendFormat:
appendString:
appleIDHeadersForRequest:
apsEnvironmentName
array
arrayWithObjects:
authTokenChanged:
authTokenGracePeriod
autorelease
bagKey
bagURL
block
blockPost
boolValue
bundleIdentifierForDataUsage
busy
bytes
callingAvailable
callingBlocked
callingSupported
cancel
cancelMessage:
cancelOutgoingMessage:
cancelPendingExecutions
cancelRequestID:serviceIdentifier:
carrierBundleChange:
carrierBundleValueFromAllSIMsForKey:ofType:withFallback:
cellularFaceTimeEnabled
certDataArray
characterSetWithCharactersInString:
class
cleanUpAccountsBasedOnInUseUsernamesBlock:profileIDBlock:completionBlock:
cleanUpAccountsWithUsername:orProfileID:basedOnInUseUsernames:profileIDs:completionBlock:
code
commCenterDead
concurrentConnections
conferencingAllowed
conferencingBlocked
conferencingEnabled
conformsToProtocol:
connection
connection:channelSubscriptionsFailedWithFailures:
connection:didChangeConnectedStatus:
connection:didFailToSendOutgoingMessage:error:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didReceivePublicToken:
connection:didReceiveToken:forInfo:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveURLToken:forInfo:
connection:didReceiveURLTokenError:forInfo:
connection:didSendOutgoingMessage:
connectionDidReconnect:
connectionRequired
context:pnrSupportChanged:
copy
copyWithZone:
count
countByEnumeratingWithState:objects:count:
cpuFamily
credential
credentialForAccount:
credentialWithPassword:
currentHandler
currentMessage
currentReachabilityStatus
customRetryInterval
data
dataActiveAndReachable
dataUsageBundleIdentifier
dataUsingEncoding:
dataWithBytes:length:
dataWithBytesNoCopy:length:freeWhenDone:
dataWithPropertyList:format:options:error:
date
dateByAddingTimeInterval:
dateWithTimeIntervalSince1970:
dateWithTimeIntervalSinceReferenceDate:
debugDescription
defaultBundleChange
defaultCenter
defaultLogger
delegate
delivery
deliveryAcknowledgementBlock
dequeueMessageIfNeeded
dequeueTopMessage
description
deviceColor
deviceIDPrefix
deviceInformationString
deviceName
deviceRegionInfo
deviceType
deviceTypeIDPrefix
dictionary
dictionaryWithObjectsAndKeys:
didDetectSimDeactivation:info:
disableIDSTranslation
disableKeepAlive
disallowRetry
domain
doubleValue
dualSIMCapability
dualSimCapabilityDidChange
earlierDate:
enableCriticalReliability
enclosureColor
enqueueExecutionWithTarget:afterDelay:
enumerateKeysAndObjectsUsingBlock:
enumerateObjectsUsingBlock:
errorWithDomain:code:userInfo:
expectingMoreResponses
faceTimeAudioSupported
faceTimeAvailable
faceTimeMultiwaySupported
faceTimeNonWiFiEntitled
faceTimeSupported
fetchAuthTokenForProfileID:username:service:outRequestID:completionBlock:
fetchPasswordForProfileID:username:service:outRequestID:completionBlock:
firstObject
flushRegions
forceBagLoad
forceCellular
forceCellularIfPossible
gameCenterPropertiesFromAccountWithUsername:
getCharacters:range:
handleFailureInMethod:object:file:lineNumber:description:
handleResponse:forRequest:completionBlock:
handleResponse:forRequest:shouldRetry:
handleResponseBody:
handleResponseDictionary:
handleResponseHeaders:
handleResponseStatus:
handleTranslationAndDeliveryOnAPS:
hasAttemptedAPSDelivery
hasPrefix:
hasQueuedItems
hasReceivedPushAck
hasRequiredKeys:
hasSuffix:
hash
headersBySigningData:serverTimestamp:error:
highPriority
httpDoNotDecodeData
iMessageAvailable
iMessageSupported
identifier
identityPrivateKey
identityPublicKey
identityServicesSupported
ignoreMaxRetryCount
ignorePushSigHeaders
ignoresNetworkConnectivity
inProcess_isCallingSupported
increaseLengthBy:
init
initPrivate
initWithAPSConnection:mobileNetworkManager:
initWithAccountType:
initWithAccountTypes:delegate:
initWithAssociationID:sharingState:lastUpdatedDate:
initWithBagType:
initWithBase64EncodedString:options:
initWithCapacity:queue:block:
initWithCommand:success:errorDomain:errorCode:retryCount:
initWithEnvironmentName:namedDelegatePort:queue:
initWithIDSServerBag:
initWithIDSServerBag:iMessageServerBag:remoteConnectionFactory:mobileNetworkManager:retryBackoffProvider:
initWithIdentifier:
initWithInt:
initWithMessage:
initWithPreferedType:
initWithProtoData:messageType:
initWithPushTopic:protoData:
initWithRenewResult:errorDomain:errorCode:
initWithServerResponseDictionary:
initWithTimeInterval:name:shouldWake:target:selector:userInfo:
initWithTopic:userInfo:
initWithURL:type:headers:stringParams:body:
insertObject:atIndex:
intValue
integerValue
invalidate
isActivated
isAirplaneModeEnabled
isAuthTokenReceiptTime:withinGracePeriod:
isC2KEquipment
isDeviceInManualPhoneSelectionMode
isEqual:
isEqualToDictionary:
isEqualToIgnoringCase:
isEqualToString:
isGreenTea
isIDSMessage
isInDebilitatedMode
isInDualPhoneIdentityMode
isInMultiUserMode
isInitializedForSigning
isInternalInstall
isKindOfClass:
isLoaded
isLoading
isMemberOfClass:
isMultiUser
isMultipleAuthCertCapable
isPhoneNumber:equivalentToExistingPhoneNumber:
isPhoneNumberEmergencyNumber:
isSelectedPhoneNumberRegistrationSubscriptionContext:
isServerAvailable
isSupported
isTelephonyDevice
isValidMessage
isWebTunnelMessage
isWiFiUsable
keepAliveCell
keepAliveWifi
label
language
largeMessageSize
lastObject
length
load
localWiFiRef
localWiFiStatusForFlags:
localizedDescription
logFailureInfo
logMetric:
logToRegistration
logger
loggerWithCategory:
lowRAMDevice
madridBlocked
makeObjectsPerformSelector:withObject:
marketingNameForDeviceType:
marketingNameForModel:
maxConcurrentMessages
maxLargeMessageSize
maxMessageSize
maxTimeoutRetries
maximumResponseSize
memorySize
messageBody
messageBodyDataOverride
messageBodyUsingCache
messageDelivery_oversized
messageForUniqueID:
messageHeaders
messageID
messageRequestBodyData
messageRequestBodyDictionary
messageRequestUUID
messageSize
messageType
messageURL
messages
metricWithDomain:type:error:bagURL:
mmsConfigured
model
multiwayAvailable
multiwaySupported
mutableBytes
mutableCopy
networkActive
networkEnabled
networkReachable
networkStateChanged
networkStatusForFlags:
nonBluetoothAvailableForBundleId:
nonStandardMessageHeadersForOutgoingPush
nonWifiAvailableForBundleId:
nonWifiCallingAvailable
nonWifiFaceTimeAvailable
nonce
noteResponseForToken:
noteSelectedPhoneNumberRegistrationSubscriptionDidChange
numberWithDouble:
numberWithInt:
numberWithInteger:
numberWithUnsignedInteger:
numberWithUnsignedLongLong:
objectAtIndex:
objectForKey:
operatorBundleChange:
originalTimestamp
overrideContentType
parentRegion
parsedIDSMessageResult
password
payloadCanBeLogged
payloadLength
performCleanUpWithCompletion:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
performanceClass
persistSelectedPhoneNumberRegistrationSubscriptionIfNeeded
phoneNumber
phoneNumberAvailable:
phoneNumberChanged:
pnrReadyStateNotification:regState:
pnrRequestSent:pnrReqData:
postNotificationName:object:
prlVersionDidChange:version:
processInfo
processName
productBuildVersion
productName
productOSVersion
productVersion
profileID
profileIDForACAccount:
propertyListWithData:options:format:error:
protoData
protoResponse
publicKeyArray
pushAckTimestamp
pushPrivateKey
pushPublicKey
pushToken
pushTopic
queue:hitTimeoutForMessage:
queuedMessages
rangeOfString:
reachabilityForInternetConnection
reachabilityForLocalWiFi
reachabilityWithAddress:
reachabilityWithHostName:
receivedByteCount
regionForID:
regionID
regionWithID:
registration
registrationState
registrationSupported
reload
remoteURLConnection
removeAccount:withCompletionHandler:
removeAllMessages
removeAllObjects
removeAuthTokenAllowingGracePeriodForProfileID:username:
removeMessage:
removeNotificationsForServiceIdentifier:
removeObject:
removeObjectAtIndex:
removeObjectForKey:
removeObserver:name:object:
removeWiFiAutoAssociationClientToken:
renewCredentialsForAccount:options:completion:
replaceObjectAtIndex:withObject:
requestAuthTokenForProfileID:username:service:badPassword:showForgotPassword:failIfNotSilent:outRequestID:completionBlock:
requestAuthTokenForProfileID:username:service:badPassword:showForgotPassword:forceRenewal:failIfNotSilent:outRequestID:completionBlock:
requestAuthTokenForProfileID:username:service:badPassword:showForgotPassword:outRequestID:completionBlock:
requestBody
requestEnd
requestHeaders
requestPasswordForUsername:service:badPassword:showForgotPassword:shouldRememberPassword:outRequestID:completionBlock:
requestStart
requestStringParams
requestType
requestURL
requestWithURL:cachePolicy:timeoutInterval:
requireIDSHost
requiredKeys
respondsToSelector:
response
responseBody
responseBodyData
responseBodyDictionary
responseCode
responseInformation
responseReceived
responseRegionInformation
responseStatus
responseStatusCode
responseValue
retain
retainCount
retryCount
retryCountKey
retryInAirplaneMode
saveVerifiedAccount:error:
saveVerifiedAccount:withCompletionHandler:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
security
selectedPhoneNumberRegistrationSubscriptionLabels
selectedPhoneNumberRegistrationSubscriptionNumber
selectedPhoneNumberRegistrationSubscriptionWithError:
selectedRegistrationPhoneNumberWithError:
self
selfID
sendMessage:
sendMessageAtTopOfTheQueue:
sendOutgoingMessage:
sentByteCount
serverTimestampReceivedDate
serviceStatus
setAccountProperty:forKey:
setAccountStatus:forProfileID:username:service:
setActiveSubscriptionInfo:
setAlertInfo:
setAllowAnyNetwork:
setAuthTokenForProfileID:username:service:authToken:selfHandle:accountStatus:outRequestID:completionBlock:
setAuthTokenForProfileID:username:service:authToken:selfHandle:outRequestID:completionBlock:
setAuthenticated:
setBlock:
setBlockPost:
setBundleIdentifierForDataUsage:
setCellularFaceTimeEnabled:
setCertDataArray:
setCompletionBlock:
setConcurrentConnections:
setCredential:
setCritical:
setDelegate:
setDelivery:
setDeliveryMechanism:
setDisableIDSTranslation:
setDisableKeepAlive:
setDisallowRetry:
setDualSIMCapability:
setEnableCriticalReliability:
setEnabledTopics:ignoredTopics:opportunisticTopics:
setForceCellularIfPossible:
setHTTPBody:
setHTTPMethod:
setHTTPShouldHandleCookies:
setHandlesForProfileID:username:service:handles:
setHasAttemptedAPSDelivery:
setHasReceivedPushAck:
setHttpDoNotDecodeData:
setIDCertificate:
setIdentifier:
setIdentityPrivateKey:
setIdentityPublicKey:
setImportanceLevel:
setIsDeviceInDualPhoneIdentityMode:
setIsDeviceInManualPhoneSelectionMode:
setKeepAliveCell:
setKeepAliveWifi:
setLanguage:
setLength:
setLogToRegistration:
setMaxConcurrentMessages:
setMaximumResponseSize:
setMessageHeaders:
setMessageID:
setMessageRequestBodyData:
setMessageRequestBodyDictionary:
setMessageRequestUUID:
setMessageURL:
setObject:forKey:
setOriginalTimestamp:
setPassword:
setPasswordForProfileID:username:service:password:outRequestID:completionBlock:
setPayloadFormat:
setPriority:
setPrivateKeyArray:
setProfileID:
setProtoData:
setProtoResponse:
setProtocolVersion:
setPublicKeyArray:
setPushAckTimestamp:
setPushCertificate:
setPushPrivateKey:
setPushPublicKey:
setPushToken:
setPushTopic:
setReceivedByteCount:
setRegions:
setRequest:
setRequestEnd:
setRequestHeaders:
setRequestStart:
setRequestStringParams:
setRequestURL:
setRequireIDSHost:
setResponseBody:
setResponseBodyData:
setResponseBodyDictionary:
setResponseCode:
setResponseHeaders:
setResponseReceived:
setResponseRegionInformation:
setResponseStatus:
setResponseStatusCode:
setResponseValue:
setRetryCount:
setRetryInAirplaneMode:
setSelectedContext:
setSelectedPhoneNumberRegistrationSubscriptionLabels:
setSelectedPhoneNumberRegistrationSubscriptionNumber:
setSelfID:
setSelfURI:
setSentByteCount:
setServerTimestamp:
setShouldReturnTimingData:
setShouldUsePipelining:
setStatus:
setSubscriptionInfo:
setSupportedServicesFlags:
setSupportedServicesToken:
setTimeSent:
setTimeout:
setTimeoutRetries:
setTimingData:
setToken:
setTopic:
setUserAgent:
setUserAgentOverride:
setUsername:
setValue:forHTTPHeaderField:
setValue:forKey:
setVersion:
setWantsIntegerUniqueIDs:
setWantsResponse:
set_addDates:
set_parentRegion:
set_queue:
sharedInstance
sharedInstanceForBagType:
sharedManager
shortLabelsDidChange
shouldReturnTimingData
shouldUsePipelining
signingSession
silentlySetSelectedPhoneNumberRegistrationSubscriptionLabels:
simLockSaveRequestDidComplete:success:
simPinChangeRequestDidComplete:success:
simPinEntryErrorDidOccur:status:
simPukEntryErrorDidOccur:status:
simStatusDidChange:status:
slotID
slowCPUDevice
startBagLoad
startLoading
status
statusCode
stringByAppendingFormat:
stringByRemovingCharactersFromSet:
stringByRemovingWhitespace
stringGUID
stringValue
stringWithFormat:
subRegions
subscriptionInfo
subscriptionInfoDidChange
subscriptions
substringToIndex:
superclass
supportedServicesFlags
supportedServicesToken
supportsAnimojiV2
supportsAppleIDIdentification
supportsApplePay
supportsAuthTokenRequests
supportsBackFacingCamera
supportsCellularData
supportsCinematicFraming
supportsFMDV2
supportsFrontFacingCamera
supportsFunCam
supportsHDRdecoding
supportsHEIFEncoding
supportsHomeKitResident
supportsKeySharing
supportsMMS
supportsManateeForAppleCash
supportsNonWiFiCalling
supportsNonWiFiFaceTime
supportsRegionForAppleCash
supportsSMS
supportsSMSIdentification
supportsSimultaneousVoiceAndDataRightNow
supportsTethering
supportsUWB
supportsVenice
supportsWLAN
supportsWiFi
telephonyCapabilities
timeIntervalSince1970
timeIntervalSinceDate:
timeIntervalSinceNow
timeIntervalSinceReferenceDate
timeoutRetries
timingData
token
topMessage
topic
underlyingService
uniqueID
uniqueIDString
updatePreviousUsername:toNewUsername:
urlWithKey:
userAgent
userAgentHeaderString
userAgentOverride
userDefaultVoiceSlotDidChange:
userIDArray
userInfo
userNotificationWithIdentifier:timeout:alertLevel:displayFlags:displayInformation:
username
validNetworkActive
validNetworkActiveForBundleId:
validNetworkEnabled
validNetworkReachable
validNetworkReachableForBundleId:
valueForKey:
verifyCredentialsForAccount:withHandler:
wantsBagKey
wantsBodySignature
wantsBodySigningOnly
wantsBreakBeforeMake
wantsCFNetworkTimeout
wantsCompressedBody
wantsCustomRetryInterval
wantsExtraTimeoutRetry
wantsGZip
wantsHTTPGet
wantsHTTPHeaders
wantsIDSProtocolVersion
wantsIDSServer
wantsIDSSignatures
wantsIntegerUniqueIDs
wantsManagedRetries
wantsMultipleResponses
wantsResponse
wantsSignature
wantsStatusCodeBasedRetries
wantsUDID
wantsUserAgentInHeaders
wiFiActiveAndReachable
wifiAllowedForBundleId:
willSearchForNetwork
willSearchForNetworkForBundleId:
zone
@16@0:8
@24@0:8q16
v16@0:8
B16@0:8
@24@0:8@16
#16@0:8
@32@0:8q16@24
v32@0:8@16@24
v32@0:8@"FTMessageQueue"16@"IDSBaseMessage"24
v24@0:8@16
v48@0:8@16@24@32q40
B32@0:8@16^@24
B24@0:8@16
v24@0:8d16
q16@0:8
v52@0:8@16B24@28@36@44
v20@0:8B16
Q16@0:8
v24@0:8Q16
@"FTMessageQueue"
@"NSString"
@"IMTimer"
@24@0:8Q16
@"NSMutableArray"
@"<FTMessageQueueDelegate>"
@"CUTDeferredTaskQueue"
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v24@0:8@"IDSBaseMessage"16
v24@0:8@"NSString"16
@"IDSBaseMessage"16@0:8
@"NSArray"16@0:8
@"FTMessageDelivery"
v24@0:8@"CTXPCServiceSubscriptionContext"16
v28@0:8@16B24
v32@0:8@"CTXPCServiceSubscriptionContext"16@"NSString"24
v28@0:8@"CTXPCServiceSubscriptionContext"16B24
v24@0:8@"CTServiceDescriptor"16
v32@0:8@"CTXPCServiceSubscriptionContext"16@"NSNumber"24
v32@0:8@"CTXPCServiceSubscriptionContext"16@"CTSimDeactivationInfo"24
v32@0:8@"CTXPCServiceSubscriptionContext"16@"CTPNRRequestSentInfo"24
v32@0:8@"CTXPCServiceSubscriptionContext"16@"NSDictionary"24
v48@0:8@16@24@32@40
i16@0:8
@"CoreTelephonyClient"
@"FTSelectedPNRSubscription"
@32@0:8@16@24
@24@0:8^{_NSZone=}16
v20@0:8i16
@"NSData"
v24@0:8q16
@"CTXPCServiceSubscriptionInfo"
@"CTXPCContexts"
@"CTXPCServiceSubscriptionContext"
B32@0:8@16@24
@20@0:8B16
@24@0:8^@16
B24@0:8q16
B32@0:8q16@24
@48@0:8@16@24B32B36^@40
@32@0:8@16^@24
@"FTServiceStatus"
@24@0:8r^{sockaddr_in=CCS{in_addr=I}[8c]}16
q20@0:8I16
^{__SCNetworkReachability=}
@"NSDictionary"
@"NSMutableDictionary"
@"NSNumber"
v40@0:8@16@24@?32
@"AKAppleIDSession"
@"NSObject<OS_dispatch_queue>"
@?16@0:8
v24@0:8@?16
@"NSURLRequest"16@0:8
v24@0:8@"NSURLRequest"16
@?<v@?@"NSURLResponse"q@"NSData"@"NSError"@"NSDictionary">16@0:8
v24@0:8@?<v@?@"NSURLResponse"q@"NSData"@"NSError"@"NSDictionary">16
@"<FTMessageDeliveryRemoteURLConnection>"16@0:8
@56@0:8@16@24@32@40@?48
v48@0:8@16@24@32@?40
@40@0:8@16@24^@32
v48@0:8@16@24q32@40
B24@0:8d16
@"<FTMessageDeliveryRemoteURLConnectionFactory>"
@"<FTMessageDeliveryRemoteURLConnection>"
@"<FTMessageDeliveryHTTPMobileNetworkManager>"
@"IDSServerBag"
v40@0:8@16@24@32
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v40@0:8@"APSConnection"16@"NSData"24@"APSAppTokenInfo"32
v40@0:8@"APSConnection"16@"APSURLToken"24@"APSURLTokenInfo"32
v40@0:8@"APSConnection"16@"NSError"24@"APSURLTokenInfo"32
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
v32@0:8@"APSConnection"16@"NSArray"24
v64@0:8@16@24@32d40:48@56
q24@0:8@16
B32@0:8^@16^@24
v44@0:8@16@24i32@36
v56@0:8@16@24@32@40q48
v40@0:8@16q24@32
@"<FTMessageDeliveryAPSConnection>"
@"<FTMessageDeliveryAPSMobileNetworkManager>"
@28@0:8@16i24
v24@0:8^{__SecKey=}16
v48@0:8@16@24^{__SecKey=}32^{__SecKey=}40
^{__SecKey=}16@0:8
^{__SecKey=}
v24@0:8^{__CFDictionary=}16
@"NSArray"
@"FTRegion"
@44@0:8@16@24B32B36B40
v24@0:8@"ACAccount"16
v56@0:8@16@24@32^@40@?48
v60@0:8@16@24B32B36B40^@44@?52
v64@0:8@16@24@32B40B44^@48@?56
v68@0:8@16@24@32B40B44B48^@52@?60
v72@0:8@16@24@32B40B44B48B52^@56@?64
v64@0:8@16@24@32@40^@48@?56
v72@0:8@16@24@32@40@48^@56@?64
v80@0:8@16@24@32@40@48@56^@64@?72
B32@0:8d16d24
@40@0:8@16@24@32
v56@0:8@16@24@32@40@?48
v40@0:8@?16@?24@?32
v56@0:8@"NSString"16@"NSString"24@"NSString"32^@40@?<v@?@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSDictionary"@"NSNumber">48
v60@0:8@"NSString"16@"NSString"24B32B36B40^@44@?<v@?@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSDictionary"BBB>52
v64@0:8@"NSString"16@"NSString"24@"NSString"32B40B44^@48@?<v@?@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSDictionary"@"NSNumber"BBB>56
v68@0:8@"NSString"16@"NSString"24@"NSString"32B40B44B48^@52@?<v@?@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSDictionary"@"NSNumber"BBB>60
v72@0:8@"NSString"16@"NSString"24@"NSString"32B40B44B48B52^@56@?<v@?@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSString"@"NSDictionary"@"NSNumber"BBB>64
v64@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40^@48@?<v@?@"NSString"@"NSString"@"NSString"B>56
v72@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48^@56@?<v@?@"NSString"@"NSString"@"NSString"B>64
v80@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSNumber"56^@64@?<v@?@"NSString"@"NSString"@"NSString"B>72
v32@0:8@"NSString"16@"NSString"24
v48@0:8@"NSString"16@"NSString"24@"NSString"32@"NSArray"40
v48@0:8@"NSNumber"16@"NSString"24@"NSString"32@"NSString"40
@"ACAccount"40@0:8@"NSString"16@"NSString"24@"ACAccountStore"32
@"IDSGameCenterData"24@0:8@"NSString"16
@"NSString"24@0:8@"ACAccount"16
v56@0:8@"NSString"16@"NSString"24@"NSArray"32@"NSArray"40@?<v@?B>48
v40@0:8@?<@"NSArray"@?>16@?<@"NSArray"@?>24@?<v@?B>32
v24@0:8@?<v@?B>16
@40@0:8@16@24@?32
@32@0:8@16@?24
v76@0:8@16@24@32@40@48B56@?60@?68
d16@0:8
@36@0:8@16@24B32
@"NSMutableSet"
@"ACAccountStore"
@"IMUserNotificationCenter"
@"_FTPasswordManagerCachedAuthTokenInfo"
@56@0:8@16Q24@32@40@48
@"NSURL"
