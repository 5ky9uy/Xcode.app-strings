@(#)PROGRAM:FeedbackLogger  PROJECT:FeedbackLogger-1
com.apple.parsec.feedbackv2
FLUploadHeaders
com.apple.parsec-fbf.FLUploadImmediately
FLErrorDomain
FLCloseAllStores
FLCloseStore
com.apple.feedbacklogger.write
%@-%@
com.apple.feedbacklogger.closeStore
bundleIdentifier
completed successfully
failed
com.apple.feedbacklogger.write.data
DisableFileHousekeeping
created
processing
uploaded
disallowed
dropped
marked_for_purge_without_successful_upload
unknown
SELECT uploadId FROM fileUploads WHERE status=? ORDER BY rowid ASC;
SELECT uploadId FROM fileUploads ORDER BY rowid ASC;
SELECT uploadId FROM fileUploads WHERE (dateUploaded IS NOT NULL OR dateCreated < strftime('%s',datetime('now', '-7 day')) OR status IN (3, 4, 5))
SELECT payload, dateCreated, uploadId FROM fileUploads WHERE dateCreated >= ? AND dateCreated <= ? ORDER BY dateCreated ASC;
UPDATE fileUploads SET status=? WHERE uploadId=?;
UPDATE fileUploads SET processedAttempts=processedAttempts+1 WHERE uploadId=?;
UPDATE fileUploads SET dateLastProcessed=strftime('%s',datetime('now')) WHERE uploadId=?;
UPDATE fileUploads SET dateUploaded=strftime('%s',datetime('now')) WHERE uploadId=?;
UPDATE fileUploads SET status=0 WHERE status=1;
com.apple.parsec-fbf.batchUploadOutcome
UPDATE fileUploads SET status=5 WHERE uploadId IN (SELECT uploadId FROM fileUploads WHERE (dateUploaded IS NOT NULL OR dateCreated < strftime('%s',datetime('now', '-7 day')) OR status IN (3, 4, 5))) AND status NOT IN (2, 3, 4);
DELETE FROM fileUploads WHERE uploadId IN (SELECT uploadId FROM fileUploads WHERE (dateUploaded IS NOT NULL OR dateCreated < strftime('%s',datetime('now', '-7 day')) OR status IN (3, 4, 5)));
INSERT INTO fileUploads(uploadId, payload, timestampRefId, dateCreated) VALUES (?, ?, ?, ?);
SELECT payload, timestampRefId, status, processedAttempts, dateCreated, dateUploaded, dateLastProcessed, length(payload) FROM fileUploads WHERE uploadId=?;
SELECT uploadId, payload, timestampRefId, status, processedAttempts, dateCreated, dateUploaded, dateLastProcessed FROM fileUploads WHERE status=0;
DELETE FROM fileUploads WHERE uploadId=?;
DELETE FROM fileUploads;
open
closed
SELECT batchId FROM batchStatus WHERE status=? ORDER BY rowid ASC;
SELECT batchId FROM batchStatus ORDER BY rowid ASC;
SELECT batchId FROM batchStatus WHERE (dateUploaded IS NOT NULL OR dateCreated < strftime('%s',datetime('now', '-7 day')) OR status IN (4, 5, 6))
SELECT r.payload, r.dateCreated, r.batchId FROM records r WHERE r.dateCreated >= ? AND r.dateCreated <= ? ORDER BY r.dateCreated ASC;
SELECT s.batchId, s.timestampRefId, COALESCE(sum(length(r.payload)), 0), s.status, s.processedAttempts, s.dateCreated, s.dateUploaded, s.dateLastProcessed, COUNT(DISTINCT(r.rowId)), first_value(r.payload) OVER (ORDER BY r.rowId) FROM batchStatus s LEFT JOIN records r ON s.batchId = r.batchId WHERE s.batchId=? group by s.batchId;
UPDATE batchStatus SET status=? WHERE batchId=?;
UPDATE batchStatus SET processedAttempts=processedAttempts+1 WHERE batchId=?;
UPDATE batchStatus SET dateLastProcessed=strftime('%s',datetime('now')) WHERE batchId=?;
UPDATE batchStatus SET dateUploaded=strftime('%s',datetime('now')) WHERE batchId=?;
data_version
INSERT INTO batchStatus(batchId, timestampRefId, dateCreated) VALUES (?, ?, ?);
SELECT batchId, dateCreated FROM batchStatus WHERE status=0 AND dateCreated < strftime('%s',datetime('now', '-16 minute'));
UPDATE batchStatus SET status=1 WHERE status=0 AND dateCreated < strftime('%s',datetime('now', '-16 minute'));
UPDATE batchStatus SET status=1 WHERE status=0;
UPDATE batchStatus SET status=1 WHERE status=0 AND batchId=?;
UPDATE batchStatus SET status=1 WHERE status=2;
UPDATE batchStatus SET status=6 WHERE batchId IN (SELECT batchId FROM batchStatus WHERE (dateUploaded IS NOT NULL OR dateCreated < strftime('%s',datetime('now', '-7 day')) OR status IN (4, 5, 6))) AND status NOT IN (3, 4, 5);
DELETE FROM records WHERE batchId IN (SELECT batchId FROM batchStatus WHERE (dateUploaded IS NOT NULL OR dateCreated < strftime('%s',datetime('now', '-7 day')) OR status IN (4, 5, 6))); DELETE FROM batchStatus WHERE batchId IN (SELECT batchId FROM batchStatus WHERE (dateUploaded IS NOT NULL OR dateCreated < strftime('%s',datetime('now', '-7 day')) OR status IN (4, 5, 6)));
VACUUM;
DELETE FROM records WHERE batchId=?;
DELETE FROM batchStatus WHERE batchId=?;
DELETE FROM records;
DELETE FROM batchStatus;
PRAGMA user_version = %i;
B12@?0i8
PRAGMA journal_mode=WAL;
CREATE TABLE batchStatus(batchId TEXT NOT NULL PRIMARY KEY, timestampRefId TEXT NOT NULL, status INT DEFAULT 0, processedAttempts INT DEFAULT 0, dateCreated INT NOT NULL, dateUploaded INT DEFAULT NULL, dateLastProcessed INT DEFAULT NULL);CREATE TABLE records(batchId TEXT NOT NULL, payload BLOB, dateCreated INT NOT NULL, FOREIGN KEY (batchId) REFERENCES batchStatus(batchId));CREATE TABLE fileUploads(uploadId TEXT NOT NULL PRIMARY KEY, payload BLOB, timestampRefId TEXT NOT NULL, status INT DEFAULT 0, processedAttempts INT DEFAULT 0, dateCreated INT NOT NULL, dateUploaded INT DEFAULT NULL, dateLastProcessed INT DEFAULT NULL);
DROP TABLE IF EXISTS records; DROP TABLE IF EXISTS batchStatus;
CREATE TABLE fileUploads(uploadId TEXT NOT NULL PRIMARY KEY, payload BLOB, timestampRefId TEXT NOT NULL, status INT DEFAULT 0, processedAttempts INT DEFAULT 0, dateCreated INT NOT NULL, dateUploaded INT DEFAULT NULL, dateLastProcessed INT DEFAULT NULL);
user_version
page_size
page_count
PRAGMA max_page_count = %i;
SELECT payload FROM records WHERE batchId=?;
INSERT INTO records (batchId, payload, dateCreated) VALUES (?, ?, ?);
BEGIN TRANSACTION;
ROLLBACK;
END TRANSACTION;
v32@?0@"NSString"8Q16^B24
PRAGMA %@;
PRAGMA foreign_keys=ON;
-wal
-shm
com.apple.parsecd
FLLogger
@"NSDictionary"8@?0
bundle_id
category
outcome
size
Signposts
com.apple.feedbacklogger
data.sqlite
SELECT MAX(ROWID) FROM records;
SELECT payload FROM records WHERE rowId=?;
v8@?0
v16@?0@"NSError"8
kern.bootsessionuuid
Initializing new write transaction.
TTL timer scheduling was requested, but no timer was found.
Invalidating write transaction after TTL expiration.
Received notification to close stores for %@
Creating new store cache TTL timer
Purging persistent store cache after inactivity
Closing all stores
Received notification to close all stores, closing
Immediate upload requested. Requesting stores be closed.
Telling FBF to upload immediately.
Received persist request for store (%@) for %lu bytes
Persist request for store (%@) for %lu bytes %@
Registering new siri instrumentation observer
Removing siri instrumentation observer
Received persist data request for store (%@) for %lu bytes
Persist data request for store (%@) for %lu bytes %@
Can't getUploadIdsWithStatus, initializeConnection failed
getUploadIdsWithStatus failed
Can't getUploadIdsWithAllStatuses, initializeConnection failed
getUploadIdsWithAllStatuses failed
Can't getPurgableUploadIds, initializeConnection failed
getPurgableUploadIds failed
Can't getUploadIds, no statement
Can't getRecordsRangeStartDate:endDate, initializeConnection failed
getRecordsRangeStartDate:endDate dateCreated failed
getRecordsRangeStartDate:endDate uploadId failed
getRecordsRangeStartDate:endDate, failed
Failed to update status for upload %@
Failed to update status metadata for upload %@
File housekeeping is disabled, doing nothing.
Housekeeping found no eligible file uploads.
Error marking uploads for purge, bailing on housekeeping.
Expected %ld purged uploads from housekeeping, but there were %ld.
Can't persistUploadPayload, initializeConnection failed
Failed to create SQLite iterate uploads statement
Successfully added file upload record
Database quota exceeded, using %llu out of %llu bytes, failing persist request
Failed to insert upload record %d
Can't getUploadRecordWithId, initializeConnection failed
Upload record has no creation date.
SQLite iterate uploads, failed: %d
Can't iterateUploadsWithCodeblock, initializeConnection failed
Can't deleteUploadWithIdentifier, initializeConnection failed
Failed to deleteUploadWithIdentifier, rolling back transaction
Failed to deleteUploadWithIdentifier
deleteUpload (%s) failed: %d
Can't deleteUpload (%s), statement prep failed
Can't deleteAllUploads, initializeConnection failed
Can't getBatchIdsWithStatus, initializeConnection failed
getBatchIdsWithStatus failed
Can't getBatchIdsWithAllStatuses, initializeConnection failed
getBatchIdsWithAllStatuses failed
Can't getPurgableBatchIds, initializeConnection failed
getPurgableBatchIds failed
Can't getBatchIds, no statement
getRecordsRangeStartDate:endDate batchId failed
Can't getBatchSize, initialization failed
Batch has no creation date.
Failed to get batch metadata
Failed to update status for batch with statement: %@
Failed to update status metadata for batch
Could not infer data_version, assuming 1
Couldn't close open batches, failing
Couldn't prepare batch initializer statement, failing
SQLite initialize new batch failed: %d
Found orphaned batch %@ created at %@
Failed to get orphaned batches
Force closing open batches
Failed to close batch with statement %@ with status %d, error: %s
Can't purgeBatch, initializeConnection failed
Can't purgeBatch, couldn't begin transaction
Failed to purgeBatch, rolling back transaction
purgeBatch (%s) failed: %d
Can't purgeBatch (%s), statement prep failed
Can't purgeAllBatches, initializeConnection failed
Schema updateVersion failed
db's schema version %d. required schema version %d.
could not recreate database for migration
migrating schema with: %s
Received unexpected schema version, failing migration
Could not infer schema_version, assuming 0
Couldn't infer page_size, failing request to set database size limit
SQLite open failed: %d
Opened SQLite store %@
Re-using already opened SQLite store %@
Initialized SQLite persistent store manager for %@
Database is not yet initialized by client
Can't persist blob sizes(%lu) greater than maximum allowed(%llu)
Can't persist, initialization failed
Detected necessary rollover, but couldn't succeed, failing persist request
data persisted
database quota exceeded
persist request failed
SQLite insertion failed: %d
Failure detail: %s
Batch is already larger than preferred size, rolling over Id(%s)
Batch exceeded maximum size, rolling over Id(%s)
Batch exceeded maximum allowed life time (%f), rolling over Id(%s).
Rolled over to new batch with Id(%s)
SQLite statement (%s) prep failed: %d
SQL statement failed - SQL:%s error-code: %d error-message: %s
Failed to execute (%@) in set, rolling back
SQLite iterate payload for batch (%s) failed: %d
SQLite payload blob iteration OOM
Could not infer PRAGMA %@
Closing database file
Closing and deleting database file
Couldn't remove existing database file to recreate new one: %@
Max ID calculation failed to prepare statement
Max ID calculation failed to run
Registering new insertion observer, starting max row: %lld
Informing observer about insertion at row: %lld
Row insertion observer failed
XPC connection to parsec-fbf invalidated
parsec-fbf remote object proxy failed with error %@
Waiting 2s for sqlite connections to close.
BatchMetadata
FLLogger
UploadManager
BatchManager
SchemaManager
FLSQLiteDatabaseConnection
FLSQLitePersistence
FLLoggingContext
NSObject
UploadRecord
FeedbackLogger
Observer
FeedbackLoggerDaemonXPC
FeedbackLoggerFBFClient
_closeAllStores
T#,R
allKeys
T@"FLLoggingContext",&,N,V_context
closeAllBatches
T@"NSData",C,N,V_payload
dealloc
T@"NSDate",C,N,V_dateCreated
initWithStoreId:loggingContext:
T@"NSDate",C,N,V_dateUploaded
T@"NSFileManager",&,N,V_fileManager
observeInsertionAtRow:observer:
T@"NSMutableDictionary",&,N,V_dbConnections
purgeAllBatches
T@"NSNumber",&,N,V_category
release
T@"NSObject<OS_dispatch_queue>",R,N
setBatchStatus:
T@"NSObject<OS_dispatch_source>",&,N,V_persistentStoreCacheTTLTimer
setFbf:
T@"NSObject<OS_os_log>",&,N,V_log
setLog:
T@"NSObject<OS_os_transaction>",R,N,V_writeTransaction
updateStatusForUpload:toStatus:
.cxx_destruct
T@"<FeedbackLoggerDaemonXPC>",&,N,V_fbf
batchIdentifier
T@"FLSQLiteDatabaseConnection",&,N,V_dbConnection
context
T@"NSDate",C,N,V_currentBatchCreationDate
T@"NSDate",C,N,V_dateLastProcessed
isProxy
T@"NSDistributedNotificationCenter",&,N,V_notificationCenter
T@"NSFileManager",R,N
payload
T@"NSMutableDictionary",&,N,V_persistentStores
readSiriCategoryFrom:recursive:
T@"NSObject<FLLoggingContext>",&,N,V_context
removeObserver:
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
setDateCreated:
T@"NSObject<OS_dispatch_source>",&,N,V_transactionTTLTimer
setFileManager:
T@"NSObject<OS_os_log>",R,N,V_log
storeIdentifier
T@"NSString",C,N,V_applicationIdentifier
T@"NSString",C,N,V_batchIdentifier
T@"NSString",C,N,V_currentBatchIdentifier
T@"NSString",C,N,V_storePath
T@"NSString",C,N,V_timestampReferenceIdentifier
T@"NSString",C,N,V_uploadIdentifier
T@"NSString",R,C
T@"NSString",R,C,N
T@"NSString",R,C,N,V_databasePath
T@"NSString",R,C,N,V_storeIdentifier
T@"NSURL",R,N
T@"NSUserDefaults",R,N
T@"NSUserDefaults",R,N,V_userDefaults
T@"NSXPCConnection",&,N,V_daemonConnection
TAB,N,V_configured
TQ,N,V_batchSize
TQ,N,V_currentBatchPayloadSize
TQ,N,V_eventCount
TQ,N,V_maxAllowedDatabaseSizeInBytes
TQ,N,V_maxBatchPayloadInBytes
TQ,N,V_persistentStoreCacheTTL
TQ,N,V_processedAttempts
TQ,N,V_size
TQ,N,V_writeTransactionTTL
TQ,R
TQ,R,N
T^{sqlite3=},N,V_db
T^{sqlite3=},R,N,V_db
T^{sqlite3_stmt=},N,V_insertRecordsStatement
T^{sqlite3_stmt=},N,V_iteratePayloadStatement
T^{sqlite3_stmt=},N,V_maxRowIdStatement
Td,N,V_batchMaximumDuration
Ti,N,V_batchStatus
Ti,N,V_uploadStatus
T{os_unfair_lock_s=I},R,N,V_lock
URLByAppendingPathComponent:isDirectory:
URLByStandardizingPath
URLForDirectory:inDomain:appropriateForURL:create:error:
UTF8String
UUID
UUIDString
__deleteStatementHelper:forUploadId:
__dispatched_databaseConnectionWithId:
__dispatched_persistentStoreWithId:category:
__purgeStatementHelper:forBatchId:
_applicationIdentifier
_batchIdentifier
_batchMaximumDuration
_batchSize
_batchStatus
_cancelStoreCacheTimer
_cancelTransactionTTLTimer
_category
_cleanPersistantStores
_configured
_context
_currentBatchCreationDate
_currentBatchIdentifier
_currentBatchPayloadSize
_daemonConnection
_databasePath
_dateCreated
_dateLastProcessed
_dateUploaded
_dbConnection
_dbConnections
_eventCount
_fbf
_fileManager
_getBatchIdsHelper:
_getUploadIdsHelper:
_insertRecordsStatement
_iteratePayloadStatement
_lock
_log
_maxAllowedDatabaseSizeInBytes
_maxBatchPayloadInBytes
_maxRowIdStatement
_nextTimerFireDate
_notificationCenter
_payload
_persistentStoreCacheTTL
_persistentStoreCacheTTLTimer
_persistentStores
_processedAttempts
_queue
_scheduleStoreCacheTimer
_scheduleTransactionTTLTimer
_setupStoreCacheTimer
_setupTransactionTTLTimer
_size
_storeIdentifier
_storePath
_timestampReferenceIdentifier
_transactionTTLTimer
_transactionTTLTimerDidFire
_updateMetadataHelperForBatch:query:
_updateMetadataHelperForUpload:query:
_updateStatusHelperForBatch:toStatus:
_updateStatusHelperForUpload:toStatus:
_uploadIdentifier
_uploadStatus
_userDefaults
_writeTransaction
_writeTransactionTTL
addObject:
addObserver:selector:name:object:
allValues
applicationIdentifier
autorelease
batchMaximumDuration
batchSize
batchStatus
batchStatusDescription:
boolForKey:
bytes
cancelTransactionTTLTimer
category
categoryForSiriPayload:
class
cleanupPurgableUploads
close
closeAllStores
closeDatabase
closeOpenBatch
closeOrphanedBatches
closeStoreForApplicationFromNotification:
closeStoreForBundleID:
code
configured
conformsToProtocol:
copy
count
countByEnumeratingWithState:objects:count:
createDatabase
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
currentBatchCreationDate
currentBatchIdentifier
currentBatchPayloadSize
daemonConnection
data
dataUploadStoreIdForApplicationIdentifier:
dataWithBytes:length:
databasePath
date
dateByAddingTimeInterval:
dateCreated
dateLastProcessed
dateUploaded
dateWithTimeIntervalSince1970:
dbConnection
dbConnections
debugDescription
defaultCenter
defaultManager
deleteAllUploads
deleteDatabase
deleteUploadWithIdentifier:
description
dictionary
dictionaryWithObjects:forKeys:count:
distantFuture
distantPast
doBatchesHousekeeping
doUploadHousekeeping
domain
earlierDate:
enumerateObjectsUsingBlock:
errorWithDomain:code:userInfo:
eventCount
executeInTransactionMultipleSQLStatements:
executeSQLStatement:
executeSQLStatement:usingTransaction:
feedbackLoggerDirectoryURL
fileManager
finalizeObserver
forceCloseOpenBatches
getBatchIdsWithAllStatuses
getBatchIdsWithStatus:
getCurrentDatabaseSize
getDataVersion
getIntValueForPragma:into:
getPurgableBatchIds
getPurgableUploadIds
getRecordsRangeStart:end:
getSchemaVersion
getUploadIdsWithAllStatuses
getUploadIdsWithStatus:
getUploadRecordWithId:
getUploadsRangeStart:end:
hasPrefix:
hash
init
initWithContext:
initWithData:
initWithFileManager:
initWithMachServiceName:options:
initWithStoreId:dbConnection:loggingContext:
initWithStorePath:
initWithSuiteName:
initWithUTF8String:
initializeConnectionForUseBy:
initializeNewBatch
insertRecordsStatement
interfaceWithProtocol:
isEqual:
isEqualToDate:
isKindOfClass:
isMemberOfClass:
isSchemaReady
iteratePayloadForBatch:codeblock:
iteratePayloadStatement
iterateUploadsWithCodeblock:
keyEnumerator
length
localizedDescription
lock
markBatchesforPurge
markUploadsForPurge
maxAllowedDatabaseSizeInBytes
maxBatchPayloadInBytes
maxRowId
maxRowIdStatement
metadataForBatch:
mutableCopy
nextObject
notificationCenter
numberWithInt:
numberWithInteger:
numberWithUnsignedInteger:
objectForKey:
objectForKeyedSubscript:
open
outcomeTelemetryDictionary
parsecCategoryForPayload:
parsecPersistentStoreForBundleID:
parsecStoreId
path
pathForStore:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
persist:
persistUploadPayload:
persistentStoreCacheTTL
persistentStoreCacheTTLTimer
persistentStores
postNotificationName:object:
prepareSchema
processedAttempts
purgeBatch:
queue
recoverOrphanedProcessingBatches
recoverOrphanedProcessingUploads
registerInsertionObserver:
registerSiriInstrumentationObserver:observer:
removeAllObjects
removeItemAtPath:error:
removeObjectForKey:
removeSiriInstrumentationObserver:
report:application:
report:application:onComplete:
reportDataUploadEvent:application:completion:
reportParsecFeedback:completion:
reportSiriInstrumentationEvent:forBundleID:completion:
reportTelemetry:payload:
respondsToSelector:
resume
retain
retainCount
scheduleImmediateUpload
scheduleImmediateUploadWithHeaders:completion:
self
setApplicationIdentifier:
setBatchIdentifier:
setBatchMaximumDuration:
setBatchSize:
setCategory:
setConfigured:
setContext:
setCurrentBatchCreationDate:
setCurrentBatchIdentifier:
setCurrentBatchPayloadSize:
setDaemonConnection:
setDatabaseSizeLimit
setDateLastProcessed:
setDateUploaded:
setDb:
setDbConnection:
setDbConnections:
setEventCount:
setExportedObject:
setInsertRecordsStatement:
setInvalidationHandler:
setIteratePayloadStatement:
setMaxAllowedDatabaseSizeInBytes:
setMaxBatchPayloadInBytes:
setMaxRowIdStatement:
setNotificationCenter:
setObject:forKey:
setObject:forKeyedSubscript:
setPayload:
setPersistentStoreCacheTTL:
setPersistentStoreCacheTTLTimer:
setPersistentStores:
setProcessedAttempts:
setRemoteObjectInterface:
setSize:
setStorePath:
setTimestampReferenceIdentifier:
setTransactionTTLTimer:
setUploadIdentifier:
setUploadStatus:
setValue:forUploadHeaderNamed:
setWriteTransactionTTL:
sharedLogger
siriReadingStoreForBundleID:
siriStoreIdForBundleId:
siriWritingStoreForBundleID:category:
size
storePath
stringByAppendingString:
stringWithFormat:
superclass
synchronousRemoteObjectProxyWithErrorHandler:
timeIntervalSince1970
timeIntervalSinceDate:
timeIntervalSinceNow
timestampReferenceIdentifier
transactionTTLTimer
tryPrepare:preparedStatement:
tryRolloverBatchIfNecessary:
updateSchema
updateStatusForBatch:toStatus:
uploadHeaders
uploadIdentifier
uploadStatus
uploadStatusDescription:
urlForStoreWithId:
userDefaults
userInfo
vacuum
write:category:toStoreWithID:completion:
writeTransaction
writeTransactionTTL
zone
@16@0:8
v24@0:8@16
Q16@0:8
v24@0:8Q16
i16@0:8
v20@0:8i16
v16@0:8
@"NSString"
@"NSDate"
@"NSNumber"
@28@0:8@16B24
@24@0:8@16
@32@0:8@16@24
v32@0:8@16@24
v48@0:8@16@24@32@?40
v32@0:8@16@?24
v40@0:8@16@24@?32
@32@0:8@16@?24
{os_unfair_lock_s=I}16@0:8
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"NSObject<OS_os_transaction>"
@"NSMutableDictionary"
@"NSObject<FLLoggingContext>"
@"NSObject<OS_os_log>"
@"NSObject<OS_dispatch_source>"
@"NSDistributedNotificationCenter"
@20@0:8i16
@24@0:8^{sqlite3_stmt=}16
@32@0:8q16q24
B28@0:8@16i24
B32@0:8@16r*24
B16@0:8
q16@0:8
B24@0:8@?16
B24@0:8@16
B32@0:8r*16@24
^{sqlite3=}16@0:8
^{sqlite3=}
@40@0:8@16@24@32
B20@0:8i16
B24@0:8Q16
B32@0:8r*16N^^{sqlite3_stmt}24
B28@0:8r*16B24
B24@0:8r*16
B32@0:8@16@?24
B32@0:8@16N^i24
^{sqlite3_stmt=}16@0:8
v24@0:8^{sqlite3_stmt=}16
v20@0:8B16
d16@0:8
v24@0:8d16
v24@0:8^{sqlite3=}16
@"FLLoggingContext"
^{sqlite3_stmt=}
@"FLSQLiteDatabaseConnection"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@"NSString"16@"NSDictionary"24
@"NSFileManager"16@0:8
@"NSObject<OS_dispatch_queue>"16@0:8
@"NSUserDefaults"16@0:8
@"NSObject<OS_dispatch_queue>"
@"NSUserDefaults"
@"NSFileManager"
@"NSData"
@24@0:8@?16
v32@0:8q16@?24
v32@0:8@"NSDictionary"16@?<v@?@"NSError">24
@"NSXPCConnection"
@"<FeedbackLoggerDaemonXPC>"
@(#)PROGRAM:FeedbackLogger  PROJECT:FeedbackLogger-1
com.apple.parsec.feedbackv2
FLUploadHeaders
com.apple.parsec-fbf.FLUploadImmediately
FLErrorDomain
FLCloseAllStores
FLCloseStore
com.apple.feedbacklogger.write
%@-%@
com.apple.feedbacklogger.closeStore
bundleIdentifier
completed successfully
failed
com.apple.feedbacklogger.write.data
DisableFileHousekeeping
created
processing
uploaded
disallowed
dropped
marked_for_purge_without_successful_upload
unknown
SELECT uploadId FROM fileUploads WHERE status=? ORDER BY rowid ASC;
SELECT uploadId FROM fileUploads ORDER BY rowid ASC;
SELECT uploadId FROM fileUploads WHERE (dateUploaded IS NOT NULL OR dateCreated < strftime('%s',datetime('now', '-7 day')) OR status IN (3, 4, 5))
SELECT payload, dateCreated, uploadId FROM fileUploads WHERE dateCreated >= ? AND dateCreated <= ? ORDER BY dateCreated ASC;
UPDATE fileUploads SET status=? WHERE uploadId=?;
UPDATE fileUploads SET processedAttempts=processedAttempts+1 WHERE uploadId=?;
UPDATE fileUploads SET dateLastProcessed=strftime('%s',datetime('now')) WHERE uploadId=?;
UPDATE fileUploads SET dateUploaded=strftime('%s',datetime('now')) WHERE uploadId=?;
UPDATE fileUploads SET status=0 WHERE status=1;
com.apple.parsec-fbf.batchUploadOutcome
UPDATE fileUploads SET status=5 WHERE uploadId IN (SELECT uploadId FROM fileUploads WHERE (dateUploaded IS NOT NULL OR dateCreated < strftime('%s',datetime('now', '-7 day')) OR status IN (3, 4, 5))) AND status NOT IN (2, 3, 4);
DELETE FROM fileUploads WHERE uploadId IN (SELECT uploadId FROM fileUploads WHERE (dateUploaded IS NOT NULL OR dateCreated < strftime('%s',datetime('now', '-7 day')) OR status IN (3, 4, 5)));
INSERT INTO fileUploads(uploadId, payload, timestampRefId, dateCreated) VALUES (?, ?, ?, ?);
SELECT payload, timestampRefId, status, processedAttempts, dateCreated, dateUploaded, dateLastProcessed, length(payload) FROM fileUploads WHERE uploadId=?;
SELECT uploadId, payload, timestampRefId, status, processedAttempts, dateCreated, dateUploaded, dateLastProcessed FROM fileUploads WHERE status=0;
DELETE FROM fileUploads WHERE uploadId=?;
DELETE FROM fileUploads;
open
closed
SELECT batchId FROM batchStatus WHERE status=? ORDER BY rowid ASC;
SELECT batchId FROM batchStatus ORDER BY rowid ASC;
SELECT batchId FROM batchStatus WHERE (dateUploaded IS NOT NULL OR dateCreated < strftime('%s',datetime('now', '-7 day')) OR status IN (4, 5, 6))
SELECT r.payload, r.dateCreated, r.batchId FROM records r WHERE r.dateCreated >= ? AND r.dateCreated <= ? ORDER BY r.dateCreated ASC;
SELECT s.batchId, s.timestampRefId, COALESCE(sum(length(r.payload)), 0), s.status, s.processedAttempts, s.dateCreated, s.dateUploaded, s.dateLastProcessed, COUNT(DISTINCT(r.rowId)), first_value(r.payload) OVER (ORDER BY r.rowId) FROM batchStatus s LEFT JOIN records r ON s.batchId = r.batchId WHERE s.batchId=? group by s.batchId;
UPDATE batchStatus SET status=? WHERE batchId=?;
UPDATE batchStatus SET processedAttempts=processedAttempts+1 WHERE batchId=?;
UPDATE batchStatus SET dateLastProcessed=strftime('%s',datetime('now')) WHERE batchId=?;
UPDATE batchStatus SET dateUploaded=strftime('%s',datetime('now')) WHERE batchId=?;
data_version
INSERT INTO batchStatus(batchId, timestampRefId, dateCreated) VALUES (?, ?, ?);
SELECT batchId, dateCreated FROM batchStatus WHERE status=0 AND dateCreated < strftime('%s',datetime('now', '-16 minute'));
UPDATE batchStatus SET status=1 WHERE status=0 AND dateCreated < strftime('%s',datetime('now', '-16 minute'));
UPDATE batchStatus SET status=1 WHERE status=0;
UPDATE batchStatus SET status=1 WHERE status=0 AND batchId=?;
UPDATE batchStatus SET status=1 WHERE status=2;
UPDATE batchStatus SET status=6 WHERE batchId IN (SELECT batchId FROM batchStatus WHERE (dateUploaded IS NOT NULL OR dateCreated < strftime('%s',datetime('now', '-7 day')) OR status IN (4, 5, 6))) AND status NOT IN (3, 4, 5);
DELETE FROM records WHERE batchId IN (SELECT batchId FROM batchStatus WHERE (dateUploaded IS NOT NULL OR dateCreated < strftime('%s',datetime('now', '-7 day')) OR status IN (4, 5, 6))); DELETE FROM batchStatus WHERE batchId IN (SELECT batchId FROM batchStatus WHERE (dateUploaded IS NOT NULL OR dateCreated < strftime('%s',datetime('now', '-7 day')) OR status IN (4, 5, 6)));
VACUUM;
DELETE FROM records WHERE batchId=?;
DELETE FROM batchStatus WHERE batchId=?;
DELETE FROM records;
DELETE FROM batchStatus;
PRAGMA user_version = %i;
B12@?0i8
PRAGMA journal_mode=WAL;
CREATE TABLE batchStatus(batchId TEXT NOT NULL PRIMARY KEY, timestampRefId TEXT NOT NULL, status INT DEFAULT 0, processedAttempts INT DEFAULT 0, dateCreated INT NOT NULL, dateUploaded INT DEFAULT NULL, dateLastProcessed INT DEFAULT NULL);CREATE TABLE records(batchId TEXT NOT NULL, payload BLOB, dateCreated INT NOT NULL, FOREIGN KEY (batchId) REFERENCES batchStatus(batchId));CREATE TABLE fileUploads(uploadId TEXT NOT NULL PRIMARY KEY, payload BLOB, timestampRefId TEXT NOT NULL, status INT DEFAULT 0, processedAttempts INT DEFAULT 0, dateCreated INT NOT NULL, dateUploaded INT DEFAULT NULL, dateLastProcessed INT DEFAULT NULL);
DROP TABLE IF EXISTS records; DROP TABLE IF EXISTS batchStatus;
CREATE TABLE fileUploads(uploadId TEXT NOT NULL PRIMARY KEY, payload BLOB, timestampRefId TEXT NOT NULL, status INT DEFAULT 0, processedAttempts INT DEFAULT 0, dateCreated INT NOT NULL, dateUploaded INT DEFAULT NULL, dateLastProcessed INT DEFAULT NULL);
user_version
page_size
page_count
PRAGMA max_page_count = %i;
SELECT payload FROM records WHERE batchId=?;
INSERT INTO records (batchId, payload, dateCreated) VALUES (?, ?, ?);
BEGIN TRANSACTION;
ROLLBACK;
END TRANSACTION;
v32@?0@"NSString"8Q16^B24
PRAGMA %@;
PRAGMA foreign_keys=ON;
-wal
-shm
com.apple.parsecd
FLLogger
@"NSDictionary"8@?0
bundle_id
category
outcome
size
Signposts
com.apple.feedbacklogger
data.sqlite
SELECT MAX(ROWID) FROM records;
SELECT payload FROM records WHERE rowId=?;
v8@?0
v16@?0@"NSError"8
kern.bootsessionuuid
Initializing new write transaction.
TTL timer scheduling was requested, but no timer was found.
Invalidating write transaction after TTL expiration.
Received notification to close stores for %@
Creating new store cache TTL timer
Purging persistent store cache after inactivity
Closing all stores
Received notification to close all stores, closing
Immediate upload requested. Requesting stores be closed.
Telling FBF to upload immediately.
Received persist request for store (%@) for %lu bytes
Persist request for store (%@) for %lu bytes %@
Registering new siri instrumentation observer
Removing siri instrumentation observer
Received persist data request for store (%@) for %lu bytes
Persist data request for store (%@) for %lu bytes %@
Can't getUploadIdsWithStatus, initializeConnection failed
getUploadIdsWithStatus failed
Can't getUploadIdsWithAllStatuses, initializeConnection failed
getUploadIdsWithAllStatuses failed
Can't getPurgableUploadIds, initializeConnection failed
getPurgableUploadIds failed
Can't getUploadIds, no statement
Can't getRecordsRangeStartDate:endDate, initializeConnection failed
getRecordsRangeStartDate:endDate dateCreated failed
getRecordsRangeStartDate:endDate uploadId failed
getRecordsRangeStartDate:endDate, failed
Failed to update status for upload %@
Failed to update status metadata for upload %@
File housekeeping is disabled, doing nothing.
Housekeeping found no eligible file uploads.
Error marking uploads for purge, bailing on housekeeping.
Expected %ld purged uploads from housekeeping, but there were %ld.
Can't persistUploadPayload, initializeConnection failed
Failed to create SQLite iterate uploads statement
Successfully added file upload record
Database quota exceeded, using %llu out of %llu bytes, failing persist request
Failed to insert upload record %d
Can't getUploadRecordWithId, initializeConnection failed
Upload record has no creation date.
SQLite iterate uploads, failed: %d
Can't iterateUploadsWithCodeblock, initializeConnection failed
Can't deleteUploadWithIdentifier, initializeConnection failed
Failed to deleteUploadWithIdentifier, rolling back transaction
Failed to deleteUploadWithIdentifier
deleteUpload (%s) failed: %d
Can't deleteUpload (%s), statement prep failed
Can't deleteAllUploads, initializeConnection failed
Can't getBatchIdsWithStatus, initializeConnection failed
getBatchIdsWithStatus failed
Can't getBatchIdsWithAllStatuses, initializeConnection failed
getBatchIdsWithAllStatuses failed
Can't getPurgableBatchIds, initializeConnection failed
getPurgableBatchIds failed
Can't getBatchIds, no statement
getRecordsRangeStartDate:endDate batchId failed
Can't getBatchSize, initialization failed
Batch has no creation date.
Failed to get batch metadata
Failed to update status for batch with statement: %@
Failed to update status metadata for batch
Could not infer data_version, assuming 1
Couldn't close open batches, failing
Couldn't prepare batch initializer statement, failing
SQLite initialize new batch failed: %d
Found orphaned batch %@ created at %@
Failed to get orphaned batches
Force closing open batches
Failed to close batch with statement %@ with status %d, error: %s
Can't purgeBatch, initializeConnection failed
Can't purgeBatch, couldn't begin transaction
Failed to purgeBatch, rolling back transaction
purgeBatch (%s) failed: %d
Can't purgeBatch (%s), statement prep failed
Can't purgeAllBatches, initializeConnection failed
Schema updateVersion failed
db's schema version %d. required schema version %d.
could not recreate database for migration
migrating schema with: %s
Received unexpected schema version, failing migration
Could not infer schema_version, assuming 0
Couldn't infer page_size, failing request to set database size limit
SQLite open failed: %d
Opened SQLite store %@
Re-using already opened SQLite store %@
Initialized SQLite persistent store manager for %@
Database is not yet initialized by client
Can't persist blob sizes(%lu) greater than maximum allowed(%llu)
Can't persist, initialization failed
Detected necessary rollover, but couldn't succeed, failing persist request
data persisted
database quota exceeded
persist request failed
SQLite insertion failed: %d
Failure detail: %s
Batch is already larger than preferred size, rolling over Id(%s)
Batch exceeded maximum size, rolling over Id(%s)
Batch exceeded maximum allowed life time (%f), rolling over Id(%s).
Rolled over to new batch with Id(%s)
SQLite statement (%s) prep failed: %d
SQL statement failed - SQL:%s error-code: %d error-message: %s
Failed to execute (%@) in set, rolling back
SQLite iterate payload for batch (%s) failed: %d
SQLite payload blob iteration OOM
Could not infer PRAGMA %@
Closing database file
Closing and deleting database file
Couldn't remove existing database file to recreate new one: %@
Max ID calculation failed to prepare statement
Max ID calculation failed to run
Registering new insertion observer, starting max row: %lld
Informing observer about insertion at row: %lld
Row insertion observer failed
XPC connection to parsec-fbf invalidated
parsec-fbf remote object proxy failed with error %@
Waiting 2s for sqlite connections to close.
BatchMetadata
FLLogger
UploadManager
BatchManager
SchemaManager
FLSQLiteDatabaseConnection
FLSQLitePersistence
FLLoggingContext
NSObject
UploadRecord
FeedbackLogger
Observer
FeedbackLoggerDaemonXPC
FeedbackLoggerFBFClient
_closeAllStores
T#,R
allKeys
T@"FLLoggingContext",&,N,V_context
closeAllBatches
T@"NSData",C,N,V_payload
dealloc
T@"NSDate",C,N,V_dateCreated
initWithStoreId:loggingContext:
T@"NSDate",C,N,V_dateUploaded
T@"NSFileManager",&,N,V_fileManager
observeInsertionAtRow:observer:
T@"NSMutableDictionary",&,N,V_dbConnections
purgeAllBatches
T@"NSNumber",&,N,V_category
release
T@"NSObject<OS_dispatch_queue>",R,N
setBatchStatus:
T@"NSObject<OS_dispatch_source>",&,N,V_persistentStoreCacheTTLTimer
setFbf:
T@"NSObject<OS_os_log>",&,N,V_log
setLog:
T@"NSObject<OS_os_transaction>",R,N,V_writeTransaction
updateStatusForUpload:toStatus:
.cxx_destruct
T@"<FeedbackLoggerDaemonXPC>",&,N,V_fbf
batchIdentifier
T@"FLSQLiteDatabaseConnection",&,N,V_dbConnection
context
T@"NSDate",C,N,V_currentBatchCreationDate
T@"NSDate",C,N,V_dateLastProcessed
isProxy
T@"NSDistributedNotificationCenter",&,N,V_notificationCenter
T@"NSFileManager",R,N
payload
T@"NSMutableDictionary",&,N,V_persistentStores
readSiriCategoryFrom:recursive:
T@"NSObject<FLLoggingContext>",&,N,V_context
removeObserver:
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
setDateCreated:
T@"NSObject<OS_dispatch_source>",&,N,V_transactionTTLTimer
setFileManager:
T@"NSObject<OS_os_log>",R,N,V_log
storeIdentifier
T@"NSString",C,N,V_applicationIdentifier
T@"NSString",C,N,V_batchIdentifier
T@"NSString",C,N,V_currentBatchIdentifier
T@"NSString",C,N,V_storePath
T@"NSString",C,N,V_timestampReferenceIdentifier
T@"NSString",C,N,V_uploadIdentifier
T@"NSString",R,C
T@"NSString",R,C,N
T@"NSString",R,C,N,V_databasePath
T@"NSString",R,C,N,V_storeIdentifier
T@"NSURL",R,N
T@"NSUserDefaults",R,N
T@"NSUserDefaults",R,N,V_userDefaults
T@"NSXPCConnection",&,N,V_daemonConnection
TAB,N,V_configured
TQ,N,V_batchSize
TQ,N,V_currentBatchPayloadSize
TQ,N,V_eventCount
TQ,N,V_maxAllowedDatabaseSizeInBytes
TQ,N,V_maxBatchPayloadInBytes
TQ,N,V_persistentStoreCacheTTL
TQ,N,V_processedAttempts
TQ,N,V_size
TQ,N,V_writeTransactionTTL
TQ,R
TQ,R,N
T^{sqlite3=},N,V_db
T^{sqlite3=},R,N,V_db
T^{sqlite3_stmt=},N,V_insertRecordsStatement
T^{sqlite3_stmt=},N,V_iteratePayloadStatement
T^{sqlite3_stmt=},N,V_maxRowIdStatement
Td,N,V_batchMaximumDuration
Ti,N,V_batchStatus
Ti,N,V_uploadStatus
T{os_unfair_lock_s=I},R,N,V_lock
URLByAppendingPathComponent:isDirectory:
URLByStandardizingPath
URLForDirectory:inDomain:appropriateForURL:create:error:
UTF8String
UUID
UUIDString
__deleteStatementHelper:forUploadId:
__dispatched_databaseConnectionWithId:
__dispatched_persistentStoreWithId:category:
__purgeStatementHelper:forBatchId:
_applicationIdentifier
_batchIdentifier
_batchMaximumDuration
_batchSize
_batchStatus
_cancelStoreCacheTimer
_cancelTransactionTTLTimer
_category
_cleanPersistantStores
_configured
_context
_currentBatchCreationDate
_currentBatchIdentifier
_currentBatchPayloadSize
_daemonConnection
_databasePath
_dateCreated
_dateLastProcessed
_dateUploaded
_dbConnection
_dbConnections
_eventCount
_fbf
_fileManager
_getBatchIdsHelper:
_getUploadIdsHelper:
_insertRecordsStatement
_iteratePayloadStatement
_lock
_log
_maxAllowedDatabaseSizeInBytes
_maxBatchPayloadInBytes
_maxRowIdStatement
_nextTimerFireDate
_notificationCenter
_payload
_persistentStoreCacheTTL
_persistentStoreCacheTTLTimer
_persistentStores
_processedAttempts
_queue
_scheduleStoreCacheTimer
_scheduleTransactionTTLTimer
_setupStoreCacheTimer
_setupTransactionTTLTimer
_size
_storeIdentifier
_storePath
_timestampReferenceIdentifier
_transactionTTLTimer
_transactionTTLTimerDidFire
_updateMetadataHelperForBatch:query:
_updateMetadataHelperForUpload:query:
_updateStatusHelperForBatch:toStatus:
_updateStatusHelperForUpload:toStatus:
_uploadIdentifier
_uploadStatus
_userDefaults
_writeTransaction
_writeTransactionTTL
addObject:
addObserver:selector:name:object:
allValues
applicationIdentifier
autorelease
batchMaximumDuration
batchSize
batchStatus
batchStatusDescription:
boolForKey:
bytes
cancelTransactionTTLTimer
category
categoryForSiriPayload:
class
cleanupPurgableUploads
close
closeAllStores
closeDatabase
closeOpenBatch
closeOrphanedBatches
closeStoreForApplicationFromNotification:
closeStoreForBundleID:
code
configured
conformsToProtocol:
copy
count
countByEnumeratingWithState:objects:count:
createDatabase
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
currentBatchCreationDate
currentBatchIdentifier
currentBatchPayloadSize
daemonConnection
data
dataUploadStoreIdForApplicationIdentifier:
dataWithBytes:length:
databasePath
date
dateByAddingTimeInterval:
dateCreated
dateLastProcessed
dateUploaded
dateWithTimeIntervalSince1970:
dbConnection
dbConnections
debugDescription
defaultCenter
defaultManager
deleteAllUploads
deleteDatabase
deleteUploadWithIdentifier:
description
dictionary
dictionaryWithObjects:forKeys:count:
distantFuture
distantPast
doBatchesHousekeeping
doUploadHousekeeping
domain
earlierDate:
enumerateObjectsUsingBlock:
errorWithDomain:code:userInfo:
eventCount
executeInTransactionMultipleSQLStatements:
executeSQLStatement:
executeSQLStatement:usingTransaction:
feedbackLoggerDirectoryURL
fileManager
finalizeObserver
forceCloseOpenBatches
getBatchIdsWithAllStatuses
getBatchIdsWithStatus:
getCurrentDatabaseSize
getDataVersion
getIntValueForPragma:into:
getPurgableBatchIds
getPurgableUploadIds
getRecordsRangeStart:end:
getSchemaVersion
getUploadIdsWithAllStatuses
getUploadIdsWithStatus:
getUploadRecordWithId:
getUploadsRangeStart:end:
hasPrefix:
hash
init
initWithContext:
initWithData:
initWithFileManager:
initWithMachServiceName:options:
initWithStoreId:dbConnection:loggingContext:
initWithStorePath:
initWithSuiteName:
initWithUTF8String:
initializeConnectionForUseBy:
initializeNewBatch
insertRecordsStatement
interfaceWithProtocol:
isEqual:
isEqualToDate:
isKindOfClass:
isMemberOfClass:
isSchemaReady
iteratePayloadForBatch:codeblock:
iteratePayloadStatement
iterateUploadsWithCodeblock:
keyEnumerator
length
localizedDescription
lock
markBatchesforPurge
markUploadsForPurge
maxAllowedDatabaseSizeInBytes
maxBatchPayloadInBytes
maxRowId
maxRowIdStatement
metadataForBatch:
mutableCopy
nextObject
notificationCenter
numberWithInt:
numberWithInteger:
numberWithUnsignedInteger:
objectForKey:
objectForKeyedSubscript:
open
outcomeTelemetryDictionary
parsecCategoryForPayload:
parsecPersistentStoreForBundleID:
parsecStoreId
path
pathForStore:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
persist:
persistUploadPayload:
persistentStoreCacheTTL
persistentStoreCacheTTLTimer
persistentStores
postNotificationName:object:
prepareSchema
processedAttempts
purgeBatch:
queue
recoverOrphanedProcessingBatches
recoverOrphanedProcessingUploads
registerInsertionObserver:
registerSiriInstrumentationObserver:observer:
removeAllObjects
removeItemAtPath:error:
removeObjectForKey:
removeSiriInstrumentationObserver:
report:application:
report:application:onComplete:
reportDataUploadEvent:application:completion:
reportParsecFeedback:completion:
reportSiriInstrumentationEvent:forBundleID:completion:
reportTelemetry:payload:
respondsToSelector:
resume
retain
retainCount
scheduleImmediateUpload
scheduleImmediateUploadWithHeaders:completion:
self
setApplicationIdentifier:
setBatchIdentifier:
setBatchMaximumDuration:
setBatchSize:
setCategory:
setConfigured:
setContext:
setCurrentBatchCreationDate:
setCurrentBatchIdentifier:
setCurrentBatchPayloadSize:
setDaemonConnection:
setDatabaseSizeLimit
setDateLastProcessed:
setDateUploaded:
setDb:
setDbConnection:
setDbConnections:
setEventCount:
setExportedObject:
setInsertRecordsStatement:
setInvalidationHandler:
setIteratePayloadStatement:
setMaxAllowedDatabaseSizeInBytes:
setMaxBatchPayloadInBytes:
setMaxRowIdStatement:
setNotificationCenter:
setObject:forKey:
setObject:forKeyedSubscript:
setPayload:
setPersistentStoreCacheTTL:
setPersistentStoreCacheTTLTimer:
setPersistentStores:
setProcessedAttempts:
setRemoteObjectInterface:
setSize:
setStorePath:
setTimestampReferenceIdentifier:
setTransactionTTLTimer:
setUploadIdentifier:
setUploadStatus:
setValue:forUploadHeaderNamed:
setWriteTransactionTTL:
sharedLogger
siriReadingStoreForBundleID:
siriStoreIdForBundleId:
siriWritingStoreForBundleID:category:
size
storePath
stringByAppendingString:
stringWithFormat:
superclass
synchronousRemoteObjectProxyWithErrorHandler:
timeIntervalSince1970
timeIntervalSinceDate:
timeIntervalSinceNow
timestampReferenceIdentifier
transactionTTLTimer
tryPrepare:preparedStatement:
tryRolloverBatchIfNecessary:
updateSchema
updateStatusForBatch:toStatus:
uploadHeaders
uploadIdentifier
uploadStatus
uploadStatusDescription:
urlForStoreWithId:
userDefaults
userInfo
vacuum
write:category:toStoreWithID:completion:
writeTransaction
writeTransactionTTL
zone
@16@0:8
v24@0:8@16
Q16@0:8
v24@0:8Q16
i16@0:8
v20@0:8i16
v16@0:8
@"NSString"
@"NSDate"
@"NSNumber"
@28@0:8@16B24
@24@0:8@16
@32@0:8@16@24
v32@0:8@16@24
v48@0:8@16@24@32@?40
v32@0:8@16@?24
v40@0:8@16@24@?32
@32@0:8@16@?24
{os_unfair_lock_s=I}16@0:8
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"NSObject<OS_os_transaction>"
@"NSMutableDictionary"
@"NSObject<FLLoggingContext>"
@"NSObject<OS_os_log>"
@"NSObject<OS_dispatch_source>"
@"NSDistributedNotificationCenter"
@20@0:8i16
@24@0:8^{sqlite3_stmt=}16
@32@0:8q16q24
B28@0:8@16i24
B32@0:8@16r*24
B16@0:8
q16@0:8
B24@0:8@?16
B24@0:8@16
B32@0:8r*16@24
^{sqlite3=}16@0:8
^{sqlite3=}
@40@0:8@16@24@32
B20@0:8i16
B24@0:8Q16
B32@0:8r*16N^^{sqlite3_stmt}24
B28@0:8r*16B24
B24@0:8r*16
B32@0:8@16@?24
B32@0:8@16N^i24
^{sqlite3_stmt=}16@0:8
v24@0:8^{sqlite3_stmt=}16
v20@0:8B16
d16@0:8
v24@0:8d16
v24@0:8^{sqlite3=}16
@"FLLoggingContext"
^{sqlite3_stmt=}
@"FLSQLiteDatabaseConnection"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@"NSString"16@"NSDictionary"24
@"NSFileManager"16@0:8
@"NSObject<OS_dispatch_queue>"16@0:8
@"NSUserDefaults"16@0:8
@"NSObject<OS_dispatch_queue>"
@"NSUserDefaults"
@"NSFileManager"
@"NSData"
@24@0:8@?16
v32@0:8q16@?24
v32@0:8@"NSDictionary"16@?<v@?@"NSError">24
@"NSXPCConnection"
@"<FeedbackLoggerDaemonXPC>"
