GCNintendoJoyConFusionGestureServiceClientInterface
GCNintendoJoyConFusionGestureServiceServerInterface
GCGameIntentServiceClientInterface
GCGameIntentServiceServerInterface
_GCHapticEvent
NSSecureCoding
NSCoding
GCHapticMotor
NSCopying
XboxOneHIDServicePlugin
HIDServicePlugin
NSObject
GCAdaptiveTriggersServiceClientInterface
GCAdaptiveTriggersServiceServerInterface
_GCDriverClientInterface
_GCDriverClientHapticInterface
_GCDriverServerInterface
GCMotionServiceClientInterface
GCMotionServiceServerInterface
GCLightServiceClientInterface
GCLightServiceServerInterface
GCGamepadHIDServicePlugin
GCBatteryServiceServerInterface
GCHIDXPCInterface
GCBatteryServiceClientInterface
homeButtonLongPressGesture:
interfaceWithProtocol:
triggerGameIntentWithEvent:
setEnableGlobalGameControllerFunctionality:
dataWithBytes:length:
countByEnumeratingWithState:objects:count:
identifier
value
valueForNoteParam:inParameters:
init
tokenAndParams
time
token
params
evaluateDeviceNoteParams:
eventID
stringWithFormat:
initWithSyntheticCommand:
description
setIdentifier:
type
setType:
startTime
setStartTime:
intensity
setIntensity:
sharpness
setSharpness:
stopped
setStopped:
transientBeganAsContinuousEvent
setTransientBeganAsContinuousEvent:
_stopped
_transientBeganAsContinuousEvent
_identifier
_type
_startTime
_intensity
_sharpness
TQ,N,V_identifier
Tq,N,V_type
Td,N,V_startTime
Td,N,V_intensity
Td,N,V_sharpness
TB,N,V_stopped
TB,N,V_transientBeganAsContinuousEvent
decodeIntegerForKey:
decodeBoolForKey:
decodeDoubleForKey:
encodeInteger:forKey:
encodeBool:forKey:
encodeDouble:forKey:
initWithCoder:
encodeWithCoder:
supportsSecureCoding
TB,R
array
initWithIndex:name:features:frequency:amplitude:
initWithIndex:name:features:
initWithIndex:
encodeObject:forKey:
encodeFloat:forKey:
decodeObjectOfClass:forKey:
decodeFloatForKey:
allocWithZone:
name
copyWithZone:
index
features
frequency
amplitude
setFrequency:
setAmplitude:
addObject:
removeAllObjects
initWithIndex:name:
applyValuesFrom:
enqueueHapticTransientEvent:
drainQueuedTransients
queuedTransients
setQueuedTransients:
.cxx_destruct
_index
_frequency
_amplitude
_name
_features
_queuedTransients
T@"NSMutableArray",&,N,V_queuedTransients
T@"NSString",R,C,N,V_name
Ti,R,N,V_index
TQ,R,N,V_features
Tf,N,V_frequency
Tf,N,V_amplitude
intValue
initWithService:
device
elementsMatching:
count
createEvent:timestamp:
setIntegerValue:forField:
dispatchEvent:
bytes
length
updateBatteryStats:
dispatchAlternateHomeButtonEventWithValue:timestamp:
dispatchShareButtonEventWithValue:timestamp:
dispatchHomeButtonEventWithValue:timestamp:
dispatchMenuButtonEventWithValue:timestamp:
dispatchOptionsButtonEventWithValue:timestamp:
dispatchGameControllerExtendedEventWithState:timestamp:
setInputReportHandler:
batteryReport
sendBatteryReport
isBluetoothLE
isHapticsActive
hapticMotors
objectAtIndexedSubscript:
setReport:reportLength:withIdentifier:forType:error:
arrayWithObjects:count:
matchService:options:score:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
propertyForKey:client:
setProperty:forKey:client:
eventMatching:forClient:
setEventDispatcher:
setCancelHandler:
activate
cancel
setDispatchQueue:
clientNotification:added:
setupRawReportHandling
shouldCreateBatteryDevice
numberOfTimesToSendZeroHapticReport
dispatchHapticEvent
defaultHapticMotors
defaultHapticDispatchFrequency
defaultLeftThumbstickDeadzoneRadius
defaultRightThumbstickDeadzoneRadius
defaultLeftThumbstickNoiseBuffer
defaultRightThumbstickNoiseBuffer
_batteryStats
_haveReportedBatteryOnce
_isAndroidProfile
_buttonHomeSeparateReport
_viewInDigitalButtonsField
_shareButtonPresent
_profile
stringWithCapacity:
appendString:
stringWithString:
uppercaseString
initWithSuiteName:
boolForKey:
updateAdaptiveTriggerStatusWithLeftMode:leftStatus:leftArmPosition:rightMode:rightStatus:rightArmPosition:
setAdaptiveTriggerModeSlopeFeedbackWithStartPosition:endPosition:startStrength:endStrength:forIndex:
setAdaptiveTriggerModeFeedbackWithStartPosition:resistiveStrength:forIndex:
setAdaptiveTriggerModeFeedbackWithResistiveStrengths:forIndex:
setAdaptiveTriggerModeWeaponWithStartPosition:endPosition:resistiveStrength:forIndex:
setAdaptiveTriggerModeVibrationWithStartPosition:amplitude:frequency:forIndex:
setAdaptiveTriggerModeVibrationWithAmplitudes:frequency:forIndex:
setAdaptiveTriggerModeOffForIndex:
readAdaptiveTriggerStatusWithReply:
setHapticMotor:frequency:amplitude:
enqueueTransient:hapticMotor:
enableHaptics
fetchDeviceRegistryIDWithReply:
connectToLightServiceWithClient:reply:
connectToAdaptiveTriggersServiceWithClient:reply:
connectToMotionServiceWithClient:reply:
connectToBatteryServiceWithClient:reply:
connectToNintendoJoyConFusionGestureServiceWithClient:reply:
connectToGameIntentServiceWithClient:reply:
connectToGenericDeviceDriverConfigurationServiceWithClient:reply:
setInterface:forSelector:argumentIndex:ofReply:
driverCheckIn
updateSensorsActive:
readSensorsActiveWithReply:
updateLightWithRed:green:blue:
readLightWithReply:
initWithMachServiceName:options:
setInterruptionHandler:
setInvalidationHandler:
invalidate
remoteObjectProxy
setRemoteObjectInterface:
setExportedInterface:
setExportedObject:
resume
boolValue
isEqualToString:
defaultIdleTimeoutDuration
scheduleIdleTimer
defaultLeftAxisSnapRadius
defaultRightAxisSnapRadius
createHIDDeviceForService:
open
isBluetoothClassic
createVirtualHIDDeviceForBattery
initGameControllerDaemonXPC
stringWithCString:encoding:
dealloc
initWithInt:
initWithBool:
setObject:forKeyedSubscript:
numberWithBool:
propertyForKey:
setProperty:forKey:
objectForKeyedSubscript:
unsignedIntValue
initWithType:timestamp:senderID:
close
cStringUsingEncoding:
dictionary
numberWithUnsignedLongLong:
initWithProperties:
updateBattery:isCharging:
updateClientBattery
dataWithBytesNoCopy:length:freeWhenDone:
handleReport:error:
updateIdleState
isIdle
shouldDisconnectWhenIdle
disconnect
lastEventTime
timestamp
dispatchEvent:updateLastEventTime:
setDoubleValue:forField:
applyDeadzone:axisSnapRadius:input:
isTwoAxisInputIdle:prevInput:noiseBuffer:
objectAtIndex:
isAnyHapticMotorEnabled
stopHaptics
updateHapticMotor:
readBatteryWithReply:
ping
requestServiceWithReply:
dispatchMotionEventWithState:timestamp:
updateHaptics:
client
setClient:
dispatcher
setDispatcher:
service
dispatchQueue
batteryUserDevice
uniqueIdentifier
isUSB
isVirtualDevice
idleTimeoutDuration
setIdleTimeoutDuration:
leftThumbstickNoiseBuffer
setLeftThumbstickNoiseBuffer:
rightThumbstickNoiseBuffer
setRightThumbstickNoiseBuffer:
setHapticMotors:
leftThumbstickDeadzoneRadius
setLeftThumbstickDeadzoneRadius:
leftThumbstickAxisSnapRadius
setLeftThumbstickAxisSnapRadius:
rightThumbstickDeadzoneRadius
setRightThumbstickDeadzoneRadius:
rightThumbstickAxisSnapRadius
setRightThumbstickAxisSnapRadius:
_cancelHandler
_prop
_activated
_clientAdded
_idleDispatchSource
_session
_buttonHome
_buttonMenu
_buttonOptions
_buttonShare
_gameControllerState
_gameControllerExtendedState
_motionSequenceNumber
_motionState
_hapticsActive
_pendingHapticZeroReports
_hapticDispatchFrequency
_currentHapticClipTime
_currentHapticDispatchTime
_loopHapticEvent
_hapticDispatchSource
_daemonConnection
_batteryClient
_internalQueue
_bluetoothClassic
_usb
_bluetoothLE
_virtualDevice
_service
_idleTimeoutDuration
_leftThumbstickNoiseBuffer
_rightThumbstickNoiseBuffer
_leftThumbstickDeadzoneRadius
_leftThumbstickAxisSnapRadius
_rightThumbstickDeadzoneRadius
_rightThumbstickAxisSnapRadius
_client
_dispatcher
_dispatchQueue
_device
_batteryUserDevice
_regID
_lastEventTime
_uniqueIdentifier
_batteryReport
_hapticMotors
T@"HIDConnection",W,N,V_client
T@"<HIDEventDispatcher>",W,N,V_dispatcher
TI,R,N,V_service
T@"NSObject<OS_dispatch_queue>",R,N,V_dispatchQueue
T@"HIDDevice",R,N,V_device
T@"HIDUserDevice",R,N,V_batteryUserDevice
TQ,R,N,V_lastEventTime
T@"NSString",R,N,V_uniqueIdentifier
T^{?=CCC},R,N,V_batteryReport
bluetoothClassic
TB,R,N,GisBluetoothClassic,V_bluetoothClassic
TB,R,N,GisUSB,V_usb
bluetoothLE
TB,R,N,GisBluetoothLE,V_bluetoothLE
virtualDevice
TB,R,N,GisVirtualDevice,V_virtualDevice
Tf,N,V_idleTimeoutDuration
Tf,N,V_leftThumbstickNoiseBuffer
Tf,N,V_rightThumbstickNoiseBuffer
T@"NSArray",&,N,V_hapticMotors
Tf,N,V_leftThumbstickDeadzoneRadius
Tf,N,V_leftThumbstickAxisSnapRadius
Tf,N,V_rightThumbstickDeadzoneRadius
Tf,N,V_rightThumbstickAxisSnapRadius
v20@0:8B16
v24@0:8q16
{pair<bool, float>=Bf}28@0:8I16@20
v24@0:8@16
@24@0:8@16
@16@0:8
Q16@0:8
v24@0:8Q16
q16@0:8
d16@0:8
v24@0:8d16
B16@0:8
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@24@0:8^{_NSZone=}16
@44@0:8i16@20Q28f36f40
@36@0:8i16@20Q28
@28@0:8i16@20
@20@0:8i16
v16@0:8
i16@0:8
f16@0:8
v20@0:8f16
@"NSString"
@"NSMutableArray"
B36@0:8I16@20^q28
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@20@0:8I16
@32@0:8@16@24
B40@0:8@16@24@32
v24@0:8@?16
v28@0:8@16B24
@32@0:8@"NSString"16@"HIDConnection"24
B40@0:8@16@"NSString"24@"HIDConnection"32
@"HIDEvent"32@0:8@"NSDictionary"16@"HIDConnection"24
v24@0:8@"<HIDEventDispatcher>"16
v24@0:8@?<v@?>16
B36@0:8I16@"NSDictionary"20^q28
v24@0:8@"NSObject<OS_dispatch_queue>"16
v28@0:8@"HIDConnection"16B24
v28@0:8B16Q20
v17@0:8{?=b2b2b2b2}16
I16@0:8
{?="BatteryLevel"b2"BatteryType"b2"Charge"b2"PowerLevel"b2}
v40@0:8C16C20C24C28C32C36
v36@0:8f16f20f24f28i32
v28@0:8f16f20i24
v28@0:8@16i24
v32@0:8f16f20f24i28
v32@0:8@16f24i28
v20@0:8i16
v28@0:8@"NSArray"16i24
v32@0:8@"NSArray"16f24i28
v24@0:8@?<v@?CCCCCC>16
v32@0:8Q16f24f28
v32@0:8@16Q24
v32@0:8@"_GCHapticEvent"16Q24
v32@0:8@16@?24
v24@0:8@?<v@?@"NSNumber"q>16
v32@0:8@"<GCLightServiceClientInterface>"16@?<v@?@"<GCLightServiceServerInterface>"@"NSError">24
v32@0:8@"<GCAdaptiveTriggersServiceClientInterface>"16@?<v@?@"<GCAdaptiveTriggersServiceServerInterface>"@"NSError">24
v32@0:8@"<GCMotionServiceClientInterface>"16@?<v@?@"<GCMotionServiceServerInterface>"@"NSError">24
v32@0:8@"<GCBatteryServiceClientInterface>"16@?<v@?@"<GCBatteryServiceServerInterface>"@"NSError">24
v32@0:8@"<GCNintendoJoyConFusionGestureServiceClientInterface>"16@?<v@?@"<GCNintendoJoyConFusionGestureServiceServerInterface>"@"NSError">24
v32@0:8@"<GCGameIntentServiceClientInterface>"16@?<v@?@"<GCGameIntentServiceServerInterface>"@"NSError">24
v32@0:8@"<GCGenericDeviceDriverConfigurationServiceClientInterface>"16@?<v@?@"<GCGenericDeviceDriverConfigurationServiceServerInterface>"@"NSError">24
v24@0:8@?<v@?B>16
v28@0:8f16f20f24
v24@0:8@?<v@?fff>16
v24@0:8@?<v@?CB>16
v24@0:8@?<v@?@"NSNumber">16
@28@0:8I16Q20
v32@0:8f16f20^24
B36@0:8^16^24f32
v128@0:8{?=BdddBdddBdddd}16Q120
v216@0:8{?=Q[45f]}16Q208
^{?=CCC}16@0:8
@"NSNumber"
@"NSObject<OS_dispatch_source>"
^{BTSessionImpl=}
{?="directionPadUp"d"directionPadDown"d"directionPadLeft"d"directionPadRight"d"buttonA"d"buttonB"d"buttonX"d"buttonY"d"buttonL1"d"buttonR1"d"buttonL2"d"buttonR2"d"leftThumbstick""rightThumbstick""buttonL3"B"buttonR3"B"controllerType"I}
{?="mask"Q"buttons"[45f]}
{?="supportsGyro"B"gyroPitch"d"gyroYaw"d"gyroRoll"d"supportsAccelerometer"B"accelerometerX"d"accelerometerY"d"accelerometerZ"d"supportsAttitude"B"attitudeX"d"attitudeY"d"attitudeZ"d"attitudeW"d}
{timespec="tv_sec"q"tv_nsec"q}
@"NSXPCConnection"
@"<GCBatteryServiceClientInterface>"
@"NSObject<OS_dispatch_queue>"
@"HIDConnection"
@"<HIDEventDispatcher>"
@"HIDDevice"
@"HIDUserDevice"
^{?=CCC}
@"NSArray"
v24@0:8C16B20
v8@?0
com.apple.gamecontroller
com.apple.GameController.HID
<%@ %lu (%@), i=%f s=%f (started at %f)>
transient
continuous
type
identifier
stopped
startTime
intensity
sharpness
_index
_name
_features
_frequency
_amplitude
GCHapticMotor - %@(%d) f=%f a=%f
XboxOne
ProductID
VendorID
UsagePage
Usage
Android
Windows
v48@?0@"HIDDevice"8Q16q24q32@"NSData"40
XboxOneHIDServicePlugin
Left Rumble
Right Rumble
Left Impulse
Right Impulse
com.apple.GameController.gamecontrollerd.driver
com.apple.gamecontroller.serviceplugin
Transport
isVirtual
Bluetooth
BluetoothLowEnergy
SerialNumber
GCGamepadHIDServicePlugin
BatteryCapacity
IsPowerSupplyConnected
ServicePluginDebug
PluginName
cancelHandler
dispatchQueue
activated
clientAdded
GameControllerPointer
EventType
IOService
ReportDescriptor
PhysicalDeviceUniqueID
Product
GameControllerType
 - will disconnect if permitted
;(knN
recognized elite controller
recognized adaptive controller
recognized series x controller
recognized standard controller
descriptor contains brake? %d
descriptor contains accelerator? %d
profile is %d
view moved to digital buttons field? %d
share button present? %d
using %@ profile
setupRawReportHandling
profile changed to %d
updateBatteryStats _batteryStats={
BatteryLevel = %d
BatteryType = %d
Charge = %d
PowerLevel = %d
Unable to send output report to Xbox One Controller.
Connect To Daemon
Connection to com.apple.GameController.gamecontrollerd.driver invalidated
Connection to com.apple.GameController.gamecontrollerd.driver interrupted.  Attempting to re-establish.
initWithService: %d
creating HIDDevice for service %d
opening HIDDevice
registering for BTSessionCallbacks sessionEvent
dealloc
Freeing HIDDevice on %@
PropertyForKey: %@
setProperty: %@ forKey: %@
eventMatching: %@ client: %@
setEventDispatcher %@
setCancelHandler %p
calling cancel handler
activate
cancel
setDispatchQueue %p
clientNotification %@ added: %d
GCHIDLog::disconnect: unable to get BTDevice; no valid BTSession
GCHIDLog::disconnect: SUCCESS
GCHIDLog::disconnect: error code = %d
GCHIDLog::disconnect: unable to get BTDevice; error code = %d
GCHIDLog::disconnect: unable to get device address from %s; errCode = %d
creating battery device
created battery device %@ with properties %@
updateClientBattery reporting battery level %d%%
updateBatteryStats reporting battery level %d%%
scheduleIdleTimer
disconnectIfIdle disconnecting...
isIdle for %.2f seconds%@
Stopping timer...
Dispatching event...
ping
requestServiceWithReply
connectToBatteryServiceWithClient %@
BTSessionEventCallback: attached session = %p
BTSessionEventCallback: detached session = %p
BTSessionEventCallback: terminated session = %p
BTSessionEventCallback: failed session = %p
GCNintendoJoyConFusionGestureServiceClientInterface
GCNintendoJoyConFusionGestureServiceServerInterface
GCGameIntentServiceClientInterface
GCGameIntentServiceServerInterface
_GCHapticEvent
NSSecureCoding
NSCoding
GCHapticMotor
NSCopying
XboxOneHIDServicePlugin
HIDServicePlugin
NSObject
GCAdaptiveTriggersServiceClientInterface
GCAdaptiveTriggersServiceServerInterface
_GCDriverClientInterface
_GCDriverClientHapticInterface
_GCDriverServerInterface
GCMotionServiceClientInterface
GCMotionServiceServerInterface
GCLightServiceClientInterface
GCLightServiceServerInterface
GCGamepadHIDServicePlugin
GCBatteryServiceServerInterface
GCHIDXPCInterface
GCBatteryServiceClientInterface
unsignedIntValue
handleReport:error:
setProperty:forKey:
initWithInt:
numberWithUnsignedLongLong:
resume
initWithType:timestamp:senderID:
arrayWithObjects:count:
cStringUsingEncoding:
decodeBoolForKey:
setInputReportHandler:
params
elementsMatching:
setObject:forKeyedSubscript:
removeAllObjects
encodeObject:forKey:
dataWithBytesNoCopy:length:freeWhenDone:
countByEnumeratingWithState:objects:count:
numberWithBool:
open
array
bytes
dictionary
decodeObjectOfClass:forKey:
stringWithFormat:
setInvalidationHandler:
objectForKeyedSubscript:
remoteObjectProxy
count
tokenAndParams
encodeInteger:forKey:
decodeIntegerForKey:
dataWithBytes:length:
boolValue
invalidate
setExportedObject:
stringWithCString:encoding:
encodeFloat:forKey:
token
initWithProperties:
setInterruptionHandler:
decodeFloatForKey:
setReport:reportLength:withIdentifier:forType:error:
value
eventID
timestamp
allocWithZone:
interfaceWithProtocol:
close
setExportedInterface:
objectAtIndexedSubscript:
isEqualToString:
objectAtIndex:
setInterface:forSelector:argumentIndex:ofReply:
encodeDouble:forKey:
initWithMachServiceName:options:
setDoubleValue:forField:
setRemoteObjectInterface:
length
initWithBool:
intValue
addObject:
decodeDoubleForKey:
propertyForKey:
setIntegerValue:forField:
encodeBool:forKey:
time
homeButtonLongPressGesture:
triggerGameIntentWithEvent:
setEnableGlobalGameControllerFunctionality:
init
valueForNoteParam:inParameters:
evaluateDeviceNoteParams:
initWithSyntheticCommand:
description
identifier
setIdentifier:
type
setType:
startTime
setStartTime:
intensity
setIntensity:
sharpness
setSharpness:
stopped
setStopped:
transientBeganAsContinuousEvent
setTransientBeganAsContinuousEvent:
_stopped
_transientBeganAsContinuousEvent
_identifier
_type
_startTime
_intensity
_sharpness
TQ,N,V_identifier
Tq,N,V_type
Td,N,V_startTime
Td,N,V_intensity
Td,N,V_sharpness
TB,N,V_stopped
TB,N,V_transientBeganAsContinuousEvent
initWithCoder:
encodeWithCoder:
supportsSecureCoding
TB,R
copyWithZone:
initWithIndex:name:features:frequency:amplitude:
initWithIndex:name:features:
initWithIndex:name:
initWithIndex:
applyValuesFrom:
enqueueHapticTransientEvent:
drainQueuedTransients
name
index
features
frequency
setFrequency:
amplitude
setAmplitude:
queuedTransients
setQueuedTransients:
.cxx_destruct
_index
_frequency
_amplitude
_name
_features
_queuedTransients
T@"NSMutableArray",&,N,V_queuedTransients
T@"NSString",R,C,N,V_name
Ti,R,N,V_index
TQ,R,N,V_features
Tf,N,V_frequency
Tf,N,V_amplitude
initWithService:
matchService:options:score:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
propertyForKey:client:
setProperty:forKey:client:
eventMatching:forClient:
setEventDispatcher:
setCancelHandler:
activate
cancel
setDispatchQueue:
clientNotification:added:
dispatchAlternateHomeButtonEventWithValue:timestamp:
setupRawReportHandling
updateBatteryStats:
shouldCreateBatteryDevice
numberOfTimesToSendZeroHapticReport
dispatchHapticEvent
defaultHapticMotors
defaultHapticDispatchFrequency
defaultLeftThumbstickDeadzoneRadius
defaultRightThumbstickDeadzoneRadius
defaultLeftThumbstickNoiseBuffer
defaultRightThumbstickNoiseBuffer
_batteryStats
_haveReportedBatteryOnce
_isAndroidProfile
_buttonHomeSeparateReport
_viewInDigitalButtonsField
_shareButtonPresent
_profile
updateAdaptiveTriggerStatusWithLeftMode:leftStatus:leftArmPosition:rightMode:rightStatus:rightArmPosition:
setAdaptiveTriggerModeSlopeFeedbackWithStartPosition:endPosition:startStrength:endStrength:forIndex:
setAdaptiveTriggerModeFeedbackWithStartPosition:resistiveStrength:forIndex:
setAdaptiveTriggerModeFeedbackWithResistiveStrengths:forIndex:
setAdaptiveTriggerModeWeaponWithStartPosition:endPosition:resistiveStrength:forIndex:
setAdaptiveTriggerModeVibrationWithStartPosition:amplitude:frequency:forIndex:
setAdaptiveTriggerModeVibrationWithAmplitudes:frequency:forIndex:
setAdaptiveTriggerModeOffForIndex:
readAdaptiveTriggerStatusWithReply:
setHapticMotor:frequency:amplitude:
enqueueTransient:hapticMotor:
enableHaptics
fetchDeviceRegistryIDWithReply:
connectToLightServiceWithClient:reply:
connectToAdaptiveTriggersServiceWithClient:reply:
connectToMotionServiceWithClient:reply:
connectToBatteryServiceWithClient:reply:
connectToNintendoJoyConFusionGestureServiceWithClient:reply:
connectToGameIntentServiceWithClient:reply:
connectToGenericDeviceDriverConfigurationServiceWithClient:reply:
driverCheckIn
updateSensorsActive:
readSensorsActiveWithReply:
updateLightWithRed:green:blue:
readLightWithReply:
dealloc
readBatteryWithReply:
ping
requestServiceWithReply:
initGameControllerDaemonXPC
createHIDDeviceForService:
disconnect
createVirtualHIDDeviceForBattery
updateClientBattery
sendBatteryReport
scheduleIdleTimer
updateIdleState
isIdle
shouldDisconnectWhenIdle
createEvent:timestamp:
dispatchEvent:updateLastEventTime:
dispatchEvent:
applyDeadzone:axisSnapRadius:input:
isTwoAxisInputIdle:prevInput:noiseBuffer:
dispatchMotionEventWithState:timestamp:
dispatchGameControllerExtendedEventWithState:timestamp:
dispatchHomeButtonEventWithValue:timestamp:
dispatchMenuButtonEventWithValue:timestamp:
dispatchOptionsButtonEventWithValue:timestamp:
dispatchShareButtonEventWithValue:timestamp:
isAnyHapticMotorEnabled
updateHaptics:
isHapticsActive
stopHaptics
updateHapticMotor:
defaultIdleTimeoutDuration
defaultLeftAxisSnapRadius
defaultRightAxisSnapRadius
client
setClient:
dispatcher
setDispatcher:
service
dispatchQueue
device
batteryUserDevice
lastEventTime
uniqueIdentifier
batteryReport
isBluetoothClassic
isUSB
isBluetoothLE
isVirtualDevice
idleTimeoutDuration
setIdleTimeoutDuration:
leftThumbstickNoiseBuffer
setLeftThumbstickNoiseBuffer:
rightThumbstickNoiseBuffer
setRightThumbstickNoiseBuffer:
hapticMotors
setHapticMotors:
leftThumbstickDeadzoneRadius
setLeftThumbstickDeadzoneRadius:
leftThumbstickAxisSnapRadius
setLeftThumbstickAxisSnapRadius:
rightThumbstickDeadzoneRadius
setRightThumbstickDeadzoneRadius:
rightThumbstickAxisSnapRadius
setRightThumbstickAxisSnapRadius:
_cancelHandler
_prop
_activated
_clientAdded
_idleDispatchSource
_session
_buttonHome
_buttonMenu
_buttonOptions
_buttonShare
_gameControllerState
_gameControllerExtendedState
_motionSequenceNumber
_motionState
_hapticsActive
_pendingHapticZeroReports
_hapticDispatchFrequency
_currentHapticClipTime
_currentHapticDispatchTime
_loopHapticEvent
_hapticDispatchSource
_daemonConnection
_batteryClient
_internalQueue
_bluetoothClassic
_usb
_bluetoothLE
_virtualDevice
_service
_idleTimeoutDuration
_leftThumbstickNoiseBuffer
_rightThumbstickNoiseBuffer
_leftThumbstickDeadzoneRadius
_leftThumbstickAxisSnapRadius
_rightThumbstickDeadzoneRadius
_rightThumbstickAxisSnapRadius
_client
_dispatcher
_dispatchQueue
_device
_batteryUserDevice
_regID
_lastEventTime
_uniqueIdentifier
_batteryReport
_hapticMotors
T@"HIDConnection",W,N,V_client
T@"<HIDEventDispatcher>",W,N,V_dispatcher
TI,R,N,V_service
T@"NSObject<OS_dispatch_queue>",R,N,V_dispatchQueue
T@"HIDDevice",R,N,V_device
T@"HIDUserDevice",R,N,V_batteryUserDevice
TQ,R,N,V_lastEventTime
T@"NSString",R,N,V_uniqueIdentifier
T^{?=CCC},R,N,V_batteryReport
bluetoothClassic
TB,R,N,GisBluetoothClassic,V_bluetoothClassic
TB,R,N,GisUSB,V_usb
bluetoothLE
TB,R,N,GisBluetoothLE,V_bluetoothLE
virtualDevice
TB,R,N,GisVirtualDevice,V_virtualDevice
Tf,N,V_idleTimeoutDuration
Tf,N,V_leftThumbstickNoiseBuffer
Tf,N,V_rightThumbstickNoiseBuffer
T@"NSArray",&,N,V_hapticMotors
Tf,N,V_leftThumbstickDeadzoneRadius
Tf,N,V_leftThumbstickAxisSnapRadius
Tf,N,V_rightThumbstickDeadzoneRadius
Tf,N,V_rightThumbstickAxisSnapRadius
updateBattery:isCharging:
v20@0:8B16
v24@0:8q16
{pair<bool, float>=Bf}28@0:8I16@20
v24@0:8@16
@24@0:8@16
@16@0:8
Q16@0:8
v24@0:8Q16
q16@0:8
d16@0:8
v24@0:8d16
B16@0:8
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@24@0:8^{_NSZone=}16
@44@0:8i16@20Q28f36f40
@36@0:8i16@20Q28
@28@0:8i16@20
@20@0:8i16
v16@0:8
i16@0:8
f16@0:8
v20@0:8f16
@"NSString"
@"NSMutableArray"
B36@0:8I16@20^q28
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@20@0:8I16
@32@0:8@16@24
B40@0:8@16@24@32
v24@0:8@?16
v28@0:8@16B24
@32@0:8@"NSString"16@"HIDConnection"24
B40@0:8@16@"NSString"24@"HIDConnection"32
@"HIDEvent"32@0:8@"NSDictionary"16@"HIDConnection"24
v24@0:8@"<HIDEventDispatcher>"16
v24@0:8@?<v@?>16
B36@0:8I16@"NSDictionary"20^q28
v24@0:8@"NSObject<OS_dispatch_queue>"16
v28@0:8@"HIDConnection"16B24
v28@0:8B16Q20
v17@0:8{?=b2b2b2b2}16
I16@0:8
{?="BatteryLevel"b2"BatteryType"b2"Charge"b2"PowerLevel"b2}
v40@0:8C16C20C24C28C32C36
v36@0:8f16f20f24f28i32
v28@0:8f16f20i24
v28@0:8@16i24
v32@0:8f16f20f24i28
v32@0:8@16f24i28
v20@0:8i16
v28@0:8@"NSArray"16i24
v32@0:8@"NSArray"16f24i28
v24@0:8@?<v@?CCCCCC>16
v32@0:8Q16f24f28
v32@0:8@16Q24
v32@0:8@"_GCHapticEvent"16Q24
v32@0:8@16@?24
v24@0:8@?<v@?@"NSNumber"q>16
v32@0:8@"<GCLightServiceClientInterface>"16@?<v@?@"<GCLightServiceServerInterface>"@"NSError">24
v32@0:8@"<GCAdaptiveTriggersServiceClientInterface>"16@?<v@?@"<GCAdaptiveTriggersServiceServerInterface>"@"NSError">24
v32@0:8@"<GCMotionServiceClientInterface>"16@?<v@?@"<GCMotionServiceServerInterface>"@"NSError">24
v32@0:8@"<GCBatteryServiceClientInterface>"16@?<v@?@"<GCBatteryServiceServerInterface>"@"NSError">24
v32@0:8@"<GCNintendoJoyConFusionGestureServiceClientInterface>"16@?<v@?@"<GCNintendoJoyConFusionGestureServiceServerInterface>"@"NSError">24
v32@0:8@"<GCGameIntentServiceClientInterface>"16@?<v@?@"<GCGameIntentServiceServerInterface>"@"NSError">24
v32@0:8@"<GCGenericDeviceDriverConfigurationServiceClientInterface>"16@?<v@?@"<GCGenericDeviceDriverConfigurationServiceServerInterface>"@"NSError">24
v24@0:8@?<v@?B>16
v28@0:8f16f20f24
v24@0:8@?<v@?fff>16
v24@0:8@?<v@?CB>16
v24@0:8@?<v@?@"NSNumber">16
@28@0:8I16Q20
v32@0:8f16f20^24
B36@0:8^16^24f32
v128@0:8{?=BdddBdddBdddd}16Q120
v216@0:8{?=Q[45f]}16Q208
^{?=CCC}16@0:8
@"NSNumber"
@"NSObject<OS_dispatch_source>"
^{BTSessionImpl=}
{?="directionPadUp"d"directionPadDown"d"directionPadLeft"d"directionPadRight"d"buttonA"d"buttonB"d"buttonX"d"buttonY"d"buttonL1"d"buttonR1"d"buttonL2"d"buttonR2"d"leftThumbstick""rightThumbstick""buttonL3"B"buttonR3"B"controllerType"I}
{?="mask"Q"buttons"[45f]}
{?="supportsGyro"B"gyroPitch"d"gyroYaw"d"gyroRoll"d"supportsAccelerometer"B"accelerometerX"d"accelerometerY"d"accelerometerZ"d"supportsAttitude"B"attitudeX"d"attitudeY"d"attitudeZ"d"attitudeW"d}
{timespec="tv_sec"q"tv_nsec"q}
@"NSXPCConnection"
@"<GCBatteryServiceClientInterface>"
@"NSObject<OS_dispatch_queue>"
@"HIDConnection"
@"<HIDEventDispatcher>"
@"HIDDevice"
@"HIDUserDevice"
^{?=CCC}
@"NSArray"
v24@0:8C16B20
v8@?0
com.apple.gamecontroller
com.apple.GameController.HID
<%@ %lu (%@), i=%f s=%f (started at %f)>
transient
continuous
type
identifier
stopped
startTime
intensity
sharpness
_index
_name
_features
_frequency
_amplitude
GCHapticMotor - %@(%d) f=%f a=%f
XboxOne
ProductID
VendorID
UsagePage
Usage
Android
Windows
v48@?0@"HIDDevice"8Q16q24q32@"NSData"40
XboxOneHIDServicePlugin
Left Rumble
Right Rumble
Left Impulse
Right Impulse
com.apple.GameController.gamecontrollerd.driver
com.apple.gamecontroller.serviceplugin
Transport
isVirtual
Bluetooth
BluetoothLowEnergy
SerialNumber
GCGamepadHIDServicePlugin
BatteryCapacity
IsPowerSupplyConnected
ServicePluginDebug
PluginName
cancelHandler
dispatchQueue
activated
clientAdded
GameControllerPointer
EventType
IOService
ReportDescriptor
PhysicalDeviceUniqueID
Product
GameControllerType
 - will disconnect if permitted
>(knN
recognized elite controller
recognized adaptive controller
recognized series x controller
recognized standard controller
descriptor contains brake? %d
descriptor contains accelerator? %d
profile is %d
view moved to digital buttons field? %d
share button present? %d
using %@ profile
setupRawReportHandling
profile changed to %d
updateBatteryStats _batteryStats={
BatteryLevel = %d
BatteryType = %d
Charge = %d
PowerLevel = %d
Unable to send output report to Xbox One Controller.
Connect To Daemon
Connection to com.apple.GameController.gamecontrollerd.driver invalidated
Connection to com.apple.GameController.gamecontrollerd.driver interrupted.  Attempting to re-establish.
initWithService: %d
creating HIDDevice for service %d
opening HIDDevice
registering for BTSessionCallbacks sessionEvent
dealloc
Freeing HIDDevice on %@
PropertyForKey: %@
setProperty: %@ forKey: %@
eventMatching: %@ client: %@
setEventDispatcher %@
setCancelHandler %p
calling cancel handler
activate
cancel
setDispatchQueue %p
clientNotification %@ added: %d
GCHIDLog::disconnect: unable to get BTDevice; no valid BTSession
GCHIDLog::disconnect: SUCCESS
GCHIDLog::disconnect: error code = %d
GCHIDLog::disconnect: unable to get BTDevice; error code = %d
GCHIDLog::disconnect: unable to get device address from %s; errCode = %d
creating battery device
created battery device %@ with properties %@
updateClientBattery reporting battery level %d%%
updateBatteryStats reporting battery level %d%%
scheduleIdleTimer
disconnectIfIdle disconnecting...
isIdle for %.2f seconds%@
Stopping timer...
Dispatching event...
ping
requestServiceWithReply
connectToBatteryServiceWithClient %@
BTSessionEventCallback: attached session = %p
BTSessionEventCallback: detached session = %p
BTSessionEventCallback: terminated session = %p
BTSessionEventCallback: failed session = %p
