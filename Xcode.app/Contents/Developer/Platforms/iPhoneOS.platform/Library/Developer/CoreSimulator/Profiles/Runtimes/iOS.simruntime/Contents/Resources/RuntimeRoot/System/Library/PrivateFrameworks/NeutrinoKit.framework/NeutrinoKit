@(#)PROGRAM:NeutrinoKit  PROJECT:Neutrino-540.1.140
%@; zoomScale: %g
, %@ = {{%g, %g, %g, %g}, {%g, %g, %g, %g}, {%g, %g, %g, %g}, {%g, %g, %g, %g}}
transform
sublayerTransform
<%p %@> frame = %@, bounds = %@%@%@, isHidden = %@, position = %@, anchor = %@
status
NUAVPlayerController.m
expected an AVQueuePlayer
v32@?0@"AVPlayerItem"8Q16^B24
debugTryDolbyInEdit
view with dolby metadata
view ignoring dolby metadata
We should have an AVPlayer object here
rate
currentItem
externalPlaybackActive
readyForDisplay
/Image
/masterSpace
/Master/Source
Cannot establish a mapping from space %@ to space %@: %@
-[NUMediaView convertPoint:fromView:toSpace:]
/Library/Caches/com.apple.xbs/Sources/Photos_Sim/workspaces/neutrino/Kit/iOS/NUMediaView.m
-[NUMediaView convertPoint:fromSpace:toView:]
Invalid masterSize
-[NUMediaView convertPoint:toNormalizedYDownSourceSpaceFromView:]
-[NUMediaView convertViewRect:fromSpace:]
PHLivePhotoView
v12@?0B8
-[NUMediaView _rendererDidFinishWithStatistics:]
v40@?0{?={?=qq}{?=qq}}8
v24@?0@"<NUSurfaceTile>"8^B16
{%.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g}
<%@ - name:%@
delegate:%@
position:%@
bounds:%@
contentScale:%f
anchorPoint:%@
transform:%@
image:%@
View Controller Image Response
NUMediaViewRenderer-roi
NUMediaViewRenderer-zoomedToFit
Initializer not available: -[%@ %@], use designated initializer instead.
-[NUMediaViewRenderer init]
/Library/Caches/com.apple.xbs/Sources/Photos_Sim/workspaces/neutrino/Kit/Common/NUMediaViewRenderer.m
Unknown mediaType for composition: %@
-[NUMediaViewRenderer updateComposition:]
nil render layer
-[NUMediaViewRenderer _renderFinishedWithGeometry:layer:]
v16@?0@"NUResponse"8
This code must be running on the main thread
-[NUMediaViewRenderer _updateImageLayer:withRenderResponse:]
We must have a known display type
-[NUMediaViewRenderer _updateDisplayForMediaType:]
NUMediaViewRenderer-LivePhotoClient
v32@?0{?=qiIq}8
v16@?0q8
v12@?0f8
let output = input;
if (mediaComponentType == 'Video') {
    output = Cache(input, 'Video', {});
return output;
Could not construct pipeline filter from source: %@
-[NUMediaViewRenderer cacheVideoRenderFilter]_block_invoke
PXSubjectTrackingView-getUnadjustedImageSize
We should have an initialized AV player controller
-[NUMediaViewRenderer _updateVideoWithResult:sourceChanged:]
NUMediaViewRenderer-NUVideoRenderRequest
source
NUMediaViewRenderer
PHLivePhoto
livePhoto
setLivePhoto:
videoAsset
videoComposition
setOverridePhoto:
H:|[v]|
V:|[v]|
muted
Invalid parameter not satisfying: %s
block != nil
-[NUMediaViewRenderer addPlaybackStateObserver:]
v16@?0@?<v@?>8
-[NUMediaViewRenderer addExternalPlaybackObserver:]
-[NUMediaViewRenderer addPlaybackTimeObserver:]
observer != nil
-[NUMediaViewRenderer removeObserver:]
_releaseAVObjects should only be called when displaying video
-[NUMediaViewRenderer(Private) _releaseAVObjects]
NUTransitionAnimationKey
v8@?0
v24@?0@"CMDeviceMotion"8@"NSError"16
-[NUViewport init]
/Library/Caches/com.apple.xbs/Sources/Photos_Sim/workspaces/neutrino/Kit/Common/NUViewport.m
size.width > 0.0
-[NUViewport initWithSize:backingScaleFactor:]
size.height > 0.0
factor > 0.0
<%@:%p size=%gx%g scale=%g position:(%g,%g) anchor:(%g,%g)>
-[NUViewportRegionPolicy init]
/Library/Caches/com.apple.xbs/Sources/Photos_Sim/workspaces/neutrino/Kit/Common/NUViewportRegionPolicy.m
viewport != nil
-[NUViewportRegionPolicy initWithViewport:]
<%@: %p> viewport=%@
Failed to create player item from asset: %@
Created 1 item to %@
Failed to loop video composition %@
Failed to loop audio mix %@
Failed to repeat video composition, error: %@
Failed to loop audio mix, error: %@
Updated %lu items to %@
<%p> AVPlayerStatusUnknown
<%p> AVPlayerStatusReadyToPlay
<%p> AVPlayerStatusFailed with error %@
<%p> rate %g
<%p> status %d
<%p> kPlayerCurrentItemCtx
<%p> external playback active %d
<%p> seekToTime:%f toleranceBefore:%f toleranceAfter:%f forceSeek:%@
-[NUMediaView _imageSize]: %@
Fail: %{public}@
job: %{public}@
Trace:
%{public}@
Trace:
%{public}@
Continue: %{public}@
+[NUMediaView _proposedInsetsForInsets:contentSize:inFrame:centerContent:] - content is not centered, so returning input insets: %@
+[NUMediaView _proposedInsetsForInsets:contentSize:inFrame:centerContent:] - content is centered. input insets: %@  content size: %@ inFrame: %@ result insets: %@
-[NUMediaView setEdgeInsets:] - insets: %@
-[NUMediaView _updateContentInsets] on scrollview %p %@, content size = %@; internal edge insets: %@; center content: %d
-[NUMediaView _transitionToInsets:duration:animationCurve:updateRenderContent:] - insets: %@, duration: %f, animationCurve: %d, updateRenderContent: %@
-[NUMediaView _transitionToInsets:duration:animationCurve:updateRenderContent:] - size: %@, offset: %@
-[NUMediaView _transitionToInsets:duration:animationCurve:updateRenderContent:] - render view content size: %@
%s - setting scroll view content size: %@
%s - transitionTargetSize:%@
<controller: %p> %g
<controller: %p> %g %g
<controller: %p> failed to play to end: %@
<controller: %p> 
Waited for %0.1f ms
renderedScale = %g, minimumScale = %g, maximumScale = %g
Update Composition
Error: %{public}@
Error loading LivePhoto: %{public}@
Nil video asset received
VideoCompositorScalePolicy: FIT scale policy fit to %f x %f
VideoCompositorScalePolicy: ZOOM scale policy zoomed to %f
Failed to update video composition: %{public}@
targetRect: %@, clipRect: %@, dx = %f, dy = %f, dr = %f, dt= %f
NUMediaViewRenderer: failed to create snapshot for videoView
-[NURenderView renderFrameReachedTargetSize] - transitionInFlight: %d   has animation: %d   hasSublayerTransform: %d   currentSize: %@
-[NURenderView renderFrameReachedTargetSize] - removing sublayer transform
-[NURenderView renderFrameReachedTargetSize] - removing transition
-[NURenderView animationDidStop:finished:] - finished: %d shouldRemoveAnimation: %d
-[NURenderView animationDidStop:finished:] - removing transition
NUScrollView
NeutrinoUIDebugging
_NUAVPlayerItemObservation
NUAVPlayerController
NUAVPlayerView
NUMediaView
NUAVPlayerControllerDelegate
NSObject
NUAVPlayerViewDelegate
NUTiledImageLayer
CALayerDelegate
NUTileLayer
NeutrinoAdditions
NUMediaViewRenderer
NUMediaPlayer
Private
_NUTiledROILayer
_NUTiledBackfillLayer
_NUContainerLayer
NURenderView
CAAnimationDelegate
NUDebugRenderView
NUViewGeometry
NUViewport
NSCopying
NUViewportRegionPolicy
NURegionPolicy
CGColor
CGColorSpace
T{?=qiIq},R,N,V_currentSeekTime
T#,R
__image
T@"<NUAVPlayerViewDelegate>",W,N,V_delegate
_beginAnimating
T@"<NUMediaViewDelegate>",W,N,V_delegate
_isVideoEnabled
T@"<NUPurgeableTextureImage>",&,V__image
_player
T@"AVAsset",R,N,V_videoAsset
_rendererDidStartPreparingVideo
T@"AVPlayer",&,N,V_player
_videoPlayerViewWithoutControls
T@"AVVideoComposition",R,N,V_videoComposition
addObserver:forKey:queue:block:
T@"NSArray",N
assetIdentifier
T@"NSArray",R,C,N,V_previousPipelineFilters
backingPosition
T@"NSString",R,C
currentSeekTime
T@"NUColorSpace",&,N,V_colorSpace
didMoveToWindow
T@"NUComposition",C,N,V_composition
enumerateRects:
T@"NUImageGeometry",&,N
initWithScript:
T@"NUMediaView",R,W,N,V_mediaView
isEmpty
TB,N
isMuted
TB,N,GisDebugEnabled,V_debugEnabled
isReady
TB,N,GisMuted
livePhotoViewDidBeginScrubbing:
TB,N,V_centerContent
pipelineFilters
TB,N,V_loopsVideo
regionWithRect:
TB,N,V_scrollUpdatesSuppressed
removeObserver:
TB,R,N
setAnchorPoint:
TB,R,N,GisVideoPlayerVisible,V_videoPlayerVisible
setBorderWidth:
TQ,N,V_displayType
setContentSize:
TQ,R,N,V_computedDisplayType
setPixelFormat:
Td,N
setVideoPlayerVisible:animated:
Td,N,V_backingScale
snapshotViewAfterScreenUpdates:
Td,N,V_maximumZoomScale
transformPoint:
Td,N,V_updateInterval
.cxx_destruct
TB,N,GisReadyForDisplay,S_setReadyForDisplay:,V_readyForDisplay
IOSurface
T{?={?=qq}{?=qq}},R,V_imageRect
T@"<NUAVPlayerControllerDelegate>",W,N,V_delegate
_backfillClient
T@"<NUMediaPlayer>",R
_containerLayer
T@"<NUPurgeableSurfaceImage>",R,V_image
_origin
T@"<NUTextureImage>",&
_regionPolicyForZoomTargetRect:
T@"AVAudioMix",R,N,V_audioMix
_updateInterval
T@"AVPlayerItem",&,N,V_playerItem
_zoomTargetRect
T@"NSArray",C,N,V_pipelineFilters
animateWithDuration:animations:
T@"NSArray",R
avAsset
T@"NSMutableArray",&,V__tileLayers
currentPlatform
T@"NUAVPlayerController",R,N,V_nuAVPlayerController
dealloc
T@"NUComposition",C,N
dispose
T@"NUImageGeometry",&
flipped
T@"NUImageGeometry",&,V__geometry
initWithSource:
T@"NUPixelFormat",&,N,V_pixelFormat
isEqualToArray:
TB,N,G_isVideoEnabled,S_setVideoEnabled:,V__videoEnabled
isProxy
TB,N,GisFlipped,V_flipped
layoutSublayers
TB,N,GisMuted,V_muted
numberWithBool:
TB,N,V_debugMode
readyForDisplay
TB,N,V_registeredKVO
release
TB,R
result:
TB,R,N,GisVideoEnabled
setBorderColor:
TB,R,N,GisZoomedToFit
setComposition:
TQ,R
setDisplayType:
T^{CGColor=},&,V_debugColor
setScalePolicy:
Td,N,V_angle
set_tileLayers:
Td,N,V_maximumScale
surface
Td,N,V_overrideZoomScale
updateAudioMix:
Td,R,N,V_backingScaleFactor
Tq,N
Tq,R,N
T{?=qiIq},R,N
T{?=qq},N,V_validRegionInsets
T{CGPoint=dd},N,V_anchorPoint
T{CGPoint=dd},N,V_origin
T{CGPoint=dd},N,V_position
T{CGPoint=dd},R,D,N
T{CGRect={CGPoint=dd}{CGSize=dd}},N,V_cropRect
T{CGRect={CGPoint=dd}{CGSize=dd}},R,N
T{CGSize=dd},N,V__masterSizeWithoutGeometry
T{CGSize=dd},N,V_imageSize
T{CGSize=dd},N,V_overrideZoomToFitSize
T{CGSize=dd},R,D,N
T{CGSize=dd},R,N
T{CGSize=dd},R,N,V_size
T{UIEdgeInsets=dddd},N,V_contentInsets
T{UIEdgeInsets=dddd},N,V_edgeInsets
__geometry
__masterSizeWithoutGeometry
__tileLayers
__videoEnabled
_addFullExtentConstraintsForView:
_addPlayerItemKVO:
_addPlayerKVO
_addTimeObserver
_anchorPoint
_angle
_appliesPerFrameHDRDisplayMetadata
_audioMix
_backfillLayer
_backfillRenderRequestForComposition:
_backfillRenderResponse
_backfillRenderResponseHandler
_backingScale
_backingScaleFactor
_beginTransition
_canRenderLoopingVideoLive
_centerContent
_coalesceUpdateLivePhotoComposition:
_coalesceUpdateVideoComposition:
_colorSpace
_composition
_computedDisplayType
_contentInsets
_cropRect
_currentSeekTime
_currentVideoSourceAssetIdentifier
_debugColor
_debugEnabled
_debugMode
_debugToggle:
_delegate
_delegateFlags
_didReleaseAVObjects
_displayID
_displayType
_doubleTap
_edgeInsets
_edgeInsetsForContentSize:inFrame:
_edgeInsetsForContentSize:inFrame:alwaysCenterContent:
_effectiveTimeForTime:
_endAnimating
_endTransition
_flipped
_forceUpdateForNewVideoComposition:previousComposition:newAsset:previousAsset:isPlaying:
_geometry
_geometryAnimationLayer
_image
_imageLayer
_imageRect
_imageSize
_isPanning
_isZooming
_lastBackfillRenderStatictics
_lastRenderDuration
_lastVideoPlayerVisibilityChangeWasAnimated
_lastZoomRect
_lastZoomRenderStatistics
_lastZoomRenderTime
_lastZoomScale
_layerRecursiveDescription
_livePhotoClient
_livePhotoFromResponse:
_livePhotoUpdateCoalescer
_livePhotoView
_livephotoPlaybackDidEnd
_livephotoPlaybackWillBegin
_loopingPlayerItemWithVideoAsset:videoComposition:audioMix:
_loopsVideo
_masterSizeWithoutGeometry
_maximumScale
_maximumZoomScale
_mediaView
_motionManager
_muted
_notifyExternalPlaybackChange:
_notifyPlaybackRateChange:
_notifyPlaybackStateChange:
_notifyPlaybackTimeChange:
_notifyPlayerStatusChange:
_nuAVPlayerController
_nu_recursiveDescriptionWithLevel:result:
_observatory
_observerDetached
_orientWithX:andY:
_overrideZoomScale
_overrideZoomToFitSize
_pipelineFilters
_pixelFormat
_playbackMode
_playbackStateFromPlayerStatus:rate:
_playerControllerKVOFlags
_playerItem
_playerItemObservations
_playerItemWithVideoAsset:videoComposition:audioMix:
_playerItemsWithVideoAsset:videoComposition:audioMix:loopsVideo:
_playerStatusDidChange:
_playerTimeObserver
_playerView
_position
_previousPipelineFilters
_proposedInsetsForInsets:contentSize:inFrame:centerContent:
_readyForDisplay
_recurseView:filter:
_registeredKVO
_releaseAVObjects
_removePlayerItemKVO:
_removePlayerItemKVO:removeFromArray:
_removePlayerKVO
_removeTimeObserver
_renderCoalescer
_renderFinishedWithGeometry:layer:
_renderGroup
_renderQueue
_renderView
_renderer
_rendererDidCreateAVPlayerController:
_rendererDidFinishPreparingVideo
_rendererDidFinishWithStatistics:
_rendererDidUpdateLivePhoto
_renderingCompletionBlock
_resetOrientation:
_roiLayer
_scalePolicyForVideoCompositionRender
_scrollBounds
_scrollUpdatesSuppressed
_scrollView
_setDisplayType:
_setLayerFilters:
_setPipelineFilters:shouldUpdateContent:
_setRate:
_setReadyForDisplay:
_setVideoEnabled:
_setupAVPlayerController
_setupDeviceMotion
_setupViews
_shouldRemoveAnimation
_showDebug
_size
_startDeviceMotion
_startVideoPlayback
_stopDeviceMotion
_stopVideoPlayback
_targetZoomScale
_tearDownAVPlayerController
_tileLayers
_transitionAnimationInFlight
_transitionCount
_transitionTargetSize
_transitionToInsets:duration:animationCurve:updateRenderContent:
_updateBackfillLayerWithLatestRenderResponse
_updateBackfillLayerWithRenderResponse:
_updateContentInsets
_updateDisplayForMediaType:
_updateImageLayer:withRenderResponse:
_updateImageRenderForComposition:
_updateLivePhotoComposition:
_updateLivePhotoWithResponse:
_updateROILayerWithLatestRenderResponse
_updateROILayerWithRenderResponse:
_updateReadyForDisplayID
_updateReadyForDisplayWithID:
_updateRenderContent
_updateRenderContentCoalesced:
_updateSublayers
_updateVideoComposition:
_updateVideoPlayerAlpha:
_updateVideoViewLayoutWithGeometry:
_updateVideoWithResult:sourceChanged:
_validRegionInsets
_videoAsset
_videoClient
_videoComposition
_videoEnabled
_videoFrameImageRenderResponseHandler
_videoPlayerController
_videoPlayerView
_videoPlayerVisible
_videoRenderInFlightCount
_videoUpdateCoalescer
_viewRecursiveDescription
_viewport
_withComposition:visitRenderClient:
_zoomClient
_zoomRenderRequestForComposition:
_zoomRenderResponse
_zoomRenderResponseHandler
actionForLayer:forKey:
activateConstraints:
addAnimation:forKey:
addExternalPlaybackObserver:
addExternalPlaybackObserver:block:
addGestureRecognizer:
addObject:
addObserver:forKeyPath:options:context:
addObserver:selector:name:object:
addObserverForKey:queue:block:
addPeriodicTimeObserverForInterval:queue:usingBlock:
addPlaybackRateObserver:block:
addPlaybackStateObserver:
addPlaybackTimeObserver:
addPlaybackTimeObserver:block:
addPlayerStatusObserver:block:
addSublayer:
addSubview:
allocWithZone:
alpha
anchorPoint
angle
animateWithDuration:animations:completion:
animationDidStart:
animationDidStop:finished:
animationForKey:
animationWithKeyPath:
appendFormat:
appendString:
arrayByAddingObject:
arrayWithObjects:count:
audioMix
autorelease
auxiliarySession
backingScale
backingScaleFactor
backingSize
begin
beginAccess
beginAccessRegion:
beginPanning
beginZooming
boolForKey:
boolValue
boundingCropRect
bounds
cacheVideoRenderFilter
callStackSymbols
canRenderVideoLive
cancel
cancelPendingRenders
cancelPendingSeeks
centerContent
class
coalesceBlock:
colorSpace
commit
commitAndNotifyOnQueue:withBlock:
componentsJoinedByString:
composition
compositionInstructions:areEqualToCompositionInstructions:
computedDisplayType
conformsToProtocol:
constraintsWithVisualFormat:options:metrics:views:
contentInset
contentInsets
contentInsetsWithScale:
contentOffset
contentRect
contentSize
contents
contentsScale
convertNormalizedViewRect:fromSpace:
convertPoint:fromImageToView:
convertPoint:fromLayer:
convertPoint:fromSpace:toView:
convertPoint:fromView:
convertPoint:fromView:toSpace:
convertPoint:toImageFromView:
convertPoint:toLayer:
convertPoint:toNormalizedYDownSourceSpaceFromView:
convertPointFromImage:
convertPointToImage:
convertRect:fromImageToView:
convertRect:fromLayer:
convertRect:fromView:
convertRect:toImageFromView:
convertRect:toLayer:
convertRectFromImage:
convertRectToImage:
convertViewRect:fromSpace:
copy
copyWithZone:
count
countByEnumeratingWithState:objects:count:
cropRect
currentHandler
currentItem
currentTime
currentlySeeking
cyanColor
debugColor
debugDescription
debugEnabled
debugMode
defaultActionForKey:
defaultCenter
delegate
description
deviceSupportsContentAdaptedHeadroom
dictionaryWithObjects:forKeys:count:
displayLayer:
displayType
displayWithIdentifier:
drawLayer:inContext:
duration
edgeInsets
endAccess
endAccessRegion:
endPanning
endZooming
enumerateObjectsUsingBlock:
error
extent
firstObject
floatValue
frame
frameRect
functionWithName:
geometry
greenColor
handleFailureInMethod:object:file:lineNumber:description:
hash
image
imageBounds
imageByApplyingTransform:
imageByCompositingOverImage:
imageByCroppingToRect:
imageFrame
imageRect
imageSize
inLiveResize
init
initWithCoder:
initWithColor:
initWithComposition:
initWithDelay:
initWithFrame:
initWithIOSurface:
initWithImage:tile:
initWithImage:uiOrientation:videoAsset:photoTime:asset:options:videoComposition:
initWithItems:
initWithLevel:
initWithMediaView:
initWithName:
initWithName:responseQueue:
initWithSize:
initWithSize:backingScaleFactor:
initWithTarget:action:
initWithTargetSize:
initWithViewport:
initWithZoomFactor:
insertItem:afterItem:
insetBoundsForCrop:inBounds:inFrame:
installRenderingCompletionBlock:
instructions
integerValue
isDebugEnabled
isDeviceMotionAvailable
isEqual:
isEqualToString:
isFlipped
isGeometryFlipped
isHidden
isKindOfClass:
isMainThread
isMemberOfClass:
isReadyForDisplay
isVideoEnabled
isVideoPlayerVisible
isViewDebugEnabled
isZoomedToFit
items
layer
layerClass
layerWillDraw:
layoutSublayersOfLayer:
layoutSubviews
livePhotoView:didEndPlaybackWithStyle:
livePhotoView:willBeginPlaybackWithStyle:
livePhotoViewDidEndScrubbing:
loadedTimeRanges
loopsVideo
loopsVideoPlayback
mainQueue
mainScreen
maximumScale
maximumZoomScale
mediaDuration
mediaType
mediaView
mediaView:didZoom:
mediaViewDidEndLivePhotoPlayback:
mediaViewDidEndZooming:
mediaViewDidFinishPreparingVideo:
mediaViewDidFinishRendering:
mediaViewDidFinishRendering:withStatistics:
mediaViewDidScroll:
mediaViewDidStartPreparingVideo:
mediaViewDidUpdateLivePhoto:
mediaViewFailedToPlayToEnd:error:
mediaViewIsReadyForVideoPlayback:
mediaViewWillBeginLivePhotoPlayback:
mediaViewWillBeginZooming:
minimumZoomScale
muted
name
newRenderRequestForComposition:scalePolicy:regionPolicy:
notifyAllObserversForKey:withBlock:
nuAVPlayerController
nu_contentsAreFlipped
nu_layerRecursiveDescription
null
objectForKey:
objectForKeyedSubscript:
observeValueForKeyPath:ofObject:change:context:
origin
overrideZoomScale
overrideZoomToFitSize
pause
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
performWithoutAnimation:
photo
photoTime
pipelineFilersHaveChanged
pixelFormat
play
playbackMode
playbackRate
playbackState
player
playerController:didUpdateElapsedTime:duration:
playerControllerDidFinishPlaying:duration:
playerControllerFailedToPlayToEnd:error:
playerControllerIsReadyForPlayback:
playerItem
playerItemDidReachEnd:
playerItemFailedToPlayToEnd:
playerItemWithAsset:
playerViewReadyForDisplayDidChange:
position
prepareWithAVAsset:videoComposition:audioMix:loopsVideo:seekToTime:
previousPipelineFilters
properties
proposedBoundsForBounds:inFrame:
rate
readSurfaceRegion:withBlock:
redColor
regionByClippingToRect:
regionByClippingToRegion:
regionByShrinkingBy:
regionForGeometry:
registeredKVO
removeAllAnimations
removeAllItems
removeAllObjects
removeAnimationForKey:
removeFromSuperlayer
removeFromSuperview
removeItem:
removeObject:
removeObserver:forKeyPath:context:
removeObserver:name:object:
removeTimeObserver:
renderClient
renderFrameReachedTargetSize
renderScale
renderSize
repeatAudio:count:error:
repeatVideo:count:error:
repeatVideoComposition:count:error:
respondsToSelector:
retain
retainCount
rotationRate
scale
scaledExtent
scaledSize
screen
scrollUpdatesSuppressed
scrollViewDidEndDecelerating:
scrollViewDidEndDragging:willDecelerate:
scrollViewDidEndZooming:withView:atScale:
scrollViewDidScroll:
scrollViewDidZoom:
scrollViewWillBeginDragging:
scrollViewWillBeginZooming:withView:
seek:toleranceBefore:toleranceAfter:
seek:toleranceBefore:toleranceAfter:forceSeek:
seek:toleranceBefore:toleranceAfter:forceSeek:completionHandler:
seekBack
seekForward
seekToTime:
seekToTime:completionHandler:
seekToTime:exact:
seekToTime:exact:forceSeek:
seekToTime:toleranceBefore:toleranceAfter:
seekToTime:toleranceBefore:toleranceAfter:completionHandler:
seekToTime:toleranceBefore:toleranceAfter:forceSeek:
self
setActionAtItemEnd:
setAllowedAudioSpatializationFormats:
setAllowsEdgeAntialiasing:
setAlpha:
setAlwaysBounceHorizontal:
setAlwaysBounceVertical:
setAngle:
setAnimationDuration:
setAnimationTimingFunction:
setAppliesPerFrameHDRDisplayMetadata:
setAudioMix:
setAudioSession:
setAutoresizingMask:
setBackingScale:
setBounds:
setCategory:error:
setCenterContent:
setClipsToBounds:
setColorSpace:
setCompletionBlock:
setContentInset:
setContentInsetAdjustmentBehavior:
setContentInsets:
setContents:
setContentsRect:
setCropRect:
setDebugColor:
setDebugEnabled:
setDebugMode:
setDelegate:
setDeviceMotionUpdateInterval:
setDisableActions:
setDuration:
setEdgeInsets:
setFillMode:
setFilters:
setFlipped:
setFrame:
setGeometry:
setGeometryFlipped:
setHidden:
setImage:
setImageSize:
setLoopsVideo:
setLoopsVideoPlayback:
setMasksToBounds:
setMaximumScale:
setMaximumZoomScale:
setMediaType:
setMinimumZoomScale:
setMuted:
setName:
setNeedsLayout
setNumberOfTouchesRequired:
setOrigin:
setOverrideZoomScale:
setOverrideZoomToFitSize:
setPipelineFilters:
setPlaybackMode:
setPlaybackRate:
setPlayer:
setPlayerItem:
setPosition:
setPriority:
setRate:
setRegionPolicy:
setRegisteredKVO:
setRemovedOnCompletion:
setSampleMode:
setScrollEnabled:
setScrollUpdatesSuppressed:
setSeekingWaitsForVideoCompositionRendering:
setShouldCoalesceUpdates:
setShowsDeviceMovementDisplay:
setShowsHorizontalScrollIndicator:
setShowsVerticalScrollIndicator:
setSublayerTransform:
setTime:
setTimingFunction:
setToValue:
setTransform:
setTranslatesAutoresizingMaskIntoConstraints:
setUpdateInterval:
setUserInteractionEnabled:
setValidRegionInsets:
setValue:forKey:
setVideoComposition:
setVideoEnabled:animated:
setVideoRenderPrepareNode:
setZPosition:
setZoomScale:
setZoomScale:animated:
setZoomScaleToFit
set_geometry:
set_image:
set_masterSizeWithoutGeometry:
size
snapshotImage
standardUserDefaults
startDeviceMotionUpdatesUsingReferenceFrame:toQueue:withHandler:
state
statistics
status
step:
stepByCount:
stopDeviceMotionUpdates
string
stringWithFormat:
sublayerTransform
sublayers
submitGenericRequest:completion:
submitRequest:
submitRequestForComposition:completion:
submitSynchronous:
subviews
superclass
supportsLiveVideoRendering
targetSize
totalDuration
transform
transformWithSourceSpace:destinationSpace:error:
transitionToSize:duration:animationCurve:completion:
transitionToSize:offset:duration:animationCurve:completion:
updateAppliesPerFrameHDRDisplayMetadata:
updateComposition:
updateInterval
updateVideoComposition:
updateWithVideoPrepareNodeFromVideoComposition:
userInfo
validRegion
validRegionInsets
valueForKey:
valueWithCATransform3D:
video
videoAsset
videoComposition
videoEnabled
videoPlayerVisible
videoRenderPrepareNode
viewForZoomingInScrollView:
viewImageSize
visibleRect
wait
waitForRender
whiteColor
willMoveToWindow:
window
yellowColor
zone
zoomScale
zoomToRect:animated:
zoomedToFit
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
@16@0:8
v32@0:8q16@24
v24@0:8@16
B16@0:8
v20@0:8B16
v16@0:8
@"AVPlayerItem"
B68@0:8@16@24@32B40{?=qiIq}44
@44@0:8@16@24@32B40
@40@0:8@16@24@32
v48@0:8@16@24@32^v40
v88@0:8{?=qiIq}16{?=qiIq}40{?=qiIq}64
v92@0:8{?=qiIq}16{?=qiIq}40{?=qiIq}64B88
v100@0:8{?=qiIq}16{?=qiIq}40{?=qiIq}64B88@?92
v24@0:8q16
v32@0:8@16@?24
v20@0:8f16
v40@0:8{?=qiIq}16
{?=qiIq}40@0:8{?=qiIq}16
{?=qiIq}16@0:8
v28@0:8@16B24
d16@0:8
v24@0:8d16
@"NUObservatory"
{?="registeredPlayer"B}
@"NSMutableArray"
@"AVPlayer"
@"AVAsset"
@"AVVideoComposition"
@"AVAudioMix"
@"<NUAVPlayerControllerDelegate>"
{?="value"q"timescale"i"flags"I"epoch"q}
#16@0:8
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
@24@0:8@16
v20@0:8Ai16
@"<NUAVPlayerViewDelegate>"
{UIEdgeInsets=dddd}100@0:8{UIEdgeInsets=dddd}16{CGSize=dd}48{CGRect={CGPoint=dd}{CGSize=dd}}64B96
B24@0:8@16
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16d24
v32@0:8@16@24
v40@0:8@16d24d32
v24@0:8@"NUAVPlayerController"16
v32@0:8@"NUAVPlayerController"16d24
v32@0:8@"NUAVPlayerController"16@"NSError"24
v40@0:8@"NUAVPlayerController"16d24d32
v24@0:8@"NUAVPlayerView"16
v28@0:8d16B24
v52@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16B48
{CGSize=dd}16@0:8
{CGPoint=dd}32@0:8{CGPoint=dd}16
{CGRect={CGPoint=dd}{CGSize=dd}}48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
{CGPoint=dd}48@0:8{CGPoint=dd}16@32@40
{CGPoint=dd}40@0:8{CGPoint=dd}16@32
{CGRect={CGPoint=dd}{CGSize=dd}}56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48
v24@0:8@?16
{UIEdgeInsets=dddd}64@0:8{CGSize=dd}16{CGRect={CGPoint=dd}{CGSize=dd}}32
{UIEdgeInsets=dddd}68@0:8{CGSize=dd}16{CGRect={CGPoint=dd}{CGSize=dd}}32B64
v48@0:8{UIEdgeInsets=dddd}16
v40@0:8@16@24d32
v68@0:8{UIEdgeInsets=dddd}16d48q56B64
v24@0:8B16B20
{UIEdgeInsets=dddd}16@0:8
v32@0:8{CGSize=dd}16
v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
@"NURenderView"
@"NUScrollView"
@"NUMediaViewRenderer"
{UIEdgeInsets="top"d"left"d"bottom"d"right"d}
@"NUAVPlayerController"
@"NUAVPlayerView"
@"UIView"
{?="hasDidFinishRendering"B"hasDidUpdateLivePhoto"B"hasDidFinishRenderingWithStatistics"B"hasDidZoom"B"hasDidScroll"B"hasWillBeginZooming"B"hasDidEndZooming"B"hasIsReadyForVideoPlayback"B"hasDidStartPreparingVideo"B"hasDidFinishPreparingVideo"B"hasFailedToPlayToEnd"B"hasWillBeginLivePhotoPlayback"B"hasDidEndLivePhotoPlayback"B}
@"NUCoalescer"
{CGSize="width"d"height"d}
@"<NUMediaViewDelegate>"
{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}
v32@0:8@16^{CGContext=}24
@32@0:8@16@24
v24@0:8@"CALayer"16
v32@0:8@"CALayer"16^{CGContext=}24
@"<CAAction>"32@0:8@"CALayer"16@"NSString"24
^{CGColor=}16@0:8
v24@0:8^{CGColor=}16
{?=qq}16@0:8
v32@0:8{?=qq}16
^{CGColor=}
@"<NUPurgeableTextureImage>"
@"NUImageGeometry"
{?="x"q"y"q}
{?={?=qq}{?=qq}}16@0:8
@"<NUPurgeableSurfaceImage>"
{?="origin"{?="x"q"y"q}"size"{?="width"q"height"q}}
B52@0:8@16@24@32@40B48
v44@0:8{?=qiIq}16B40
v48@0:8{?=qiIq}16B40B44
@24@0:8@?16
q16@0:8
@24@0:8@?<v@?@"<NUMediaPlayer>"q>16
@24@0:8@?<v@?@"<NUMediaPlayer>"{?=qiIq}>16
@24@0:8@?<v@?@"<NUMediaPlayer>"B>16
@"NSArray"16@0:8
@?16@0:8
v24@0:8Q16
q28@0:8q16f24
v32@0:8@16q24
@"NUSurfaceRenderClient"
@"NULivePhotoRenderClient"
@"NUVideoRenderClient"
@"NSString"
@"NSObject<OS_dispatch_group>"
@"NSObject<OS_dispatch_queue>"
@"NUResponse"
@"<NURenderStatistics>"
@"NUComposition"
@"NUColorSpace"
@"NUPixelFormat"
@"NUMediaView"
@"NSArray"
v24@0:8@"CAAnimation"16
v28@0:8@"CAAnimation"16B24
v56@0:8{CGSize=dd}16d32@40@?48
v72@0:8{CGSize=dd}16{CGPoint=dd}32d48@56@?64
@"NUTiledImageLayer"
@"_NUContainerLayer"
@"CALayer"
v32@0:8d16d24
@"UILongPressGestureRecognizer"
@"CMMotionManager"
{CGRect={CGPoint=dd}{CGSize=dd}}80@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16{CGRect={CGPoint=dd}{CGSize=dd}}48
{CGRect={CGPoint=dd}{CGSize=dd}}112@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16{CGRect={CGPoint=dd}{CGSize=dd}}48{CGRect={CGPoint=dd}{CGSize=dd}}80
{UIEdgeInsets=dddd}24@0:8d16
{CGPoint=dd}16@0:8
v32@0:8{CGPoint=dd}16
{CGPoint="x"d"y"d}
@24@0:8^{_NSZone=}16
@32@0:8{CGSize=dd}16
@40@0:8{CGSize=dd}16d32
@"NURegion"24@0:8@"NUImageGeometry"16
@"NUViewport"
@(#)PROGRAM:NeutrinoKit  PROJECT:Neutrino-540.1.140
%@; zoomScale: %g
, %@ = {{%g, %g, %g, %g}, {%g, %g, %g, %g}, {%g, %g, %g, %g}, {%g, %g, %g, %g}}
transform
sublayerTransform
<%p %@> frame = %@, bounds = %@%@%@, isHidden = %@, position = %@, anchor = %@
status
NUAVPlayerController.m
expected an AVQueuePlayer
v32@?0@"AVPlayerItem"8Q16^B24
debugTryDolbyInEdit
view with dolby metadata
view ignoring dolby metadata
We should have an AVPlayer object here
rate
currentItem
externalPlaybackActive
readyForDisplay
/Image
/masterSpace
/Master/Source
Cannot establish a mapping from space %@ to space %@: %@
-[NUMediaView convertPoint:fromView:toSpace:]
/Library/Caches/com.apple.xbs/Sources/Photos_Sim/workspaces/neutrino/Kit/iOS/NUMediaView.m
-[NUMediaView convertPoint:fromSpace:toView:]
Invalid masterSize
-[NUMediaView convertPoint:toNormalizedYDownSourceSpaceFromView:]
-[NUMediaView convertViewRect:fromSpace:]
PHLivePhotoView
v12@?0B8
-[NUMediaView _rendererDidFinishWithStatistics:]
v40@?0{?={?=qq}{?=qq}}8
v24@?0@"<NUSurfaceTile>"8^B16
{%.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g, %.15g}
<%@ - name:%@
delegate:%@
position:%@
bounds:%@
contentScale:%f
anchorPoint:%@
transform:%@
image:%@
View Controller Image Response
NUMediaViewRenderer-roi
NUMediaViewRenderer-zoomedToFit
Initializer not available: -[%@ %@], use designated initializer instead.
-[NUMediaViewRenderer init]
/Library/Caches/com.apple.xbs/Sources/Photos_Sim/workspaces/neutrino/Kit/Common/NUMediaViewRenderer.m
Unknown mediaType for composition: %@
-[NUMediaViewRenderer updateComposition:]
nil render layer
-[NUMediaViewRenderer _renderFinishedWithGeometry:layer:]
v16@?0@"NUResponse"8
This code must be running on the main thread
-[NUMediaViewRenderer _updateImageLayer:withRenderResponse:]
We must have a known display type
-[NUMediaViewRenderer _updateDisplayForMediaType:]
NUMediaViewRenderer-LivePhotoClient
v32@?0{?=qiIq}8
v16@?0q8
v12@?0f8
let output = input;
if (mediaComponentType == 'Video') {
    output = Cache(input, 'Video', {});
return output;
Could not construct pipeline filter from source: %@
-[NUMediaViewRenderer cacheVideoRenderFilter]_block_invoke
PXSubjectTrackingView-getUnadjustedImageSize
We should have an initialized AV player controller
-[NUMediaViewRenderer _updateVideoWithResult:sourceChanged:]
NUMediaViewRenderer-NUVideoRenderRequest
source
NUMediaViewRenderer
PHLivePhoto
livePhoto
setLivePhoto:
videoAsset
videoComposition
setOverridePhoto:
H:|[v]|
V:|[v]|
muted
Invalid parameter not satisfying: %s
block != nil
-[NUMediaViewRenderer addPlaybackStateObserver:]
v16@?0@?<v@?>8
-[NUMediaViewRenderer addExternalPlaybackObserver:]
-[NUMediaViewRenderer addPlaybackTimeObserver:]
observer != nil
-[NUMediaViewRenderer removeObserver:]
_releaseAVObjects should only be called when displaying video
-[NUMediaViewRenderer(Private) _releaseAVObjects]
NUTransitionAnimationKey
v8@?0
v24@?0@"CMDeviceMotion"8@"NSError"16
-[NUViewport init]
/Library/Caches/com.apple.xbs/Sources/Photos_Sim/workspaces/neutrino/Kit/Common/NUViewport.m
size.width > 0.0
-[NUViewport initWithSize:backingScaleFactor:]
size.height > 0.0
factor > 0.0
<%@:%p size=%gx%g scale=%g position:(%g,%g) anchor:(%g,%g)>
-[NUViewportRegionPolicy init]
/Library/Caches/com.apple.xbs/Sources/Photos_Sim/workspaces/neutrino/Kit/Common/NUViewportRegionPolicy.m
viewport != nil
-[NUViewportRegionPolicy initWithViewport:]
<%@: %p> viewport=%@
Failed to create player item from asset: %@
Created 1 item to %@
Failed to loop video composition %@
Failed to loop audio mix %@
Failed to repeat video composition, error: %@
Failed to loop audio mix, error: %@
Updated %lu items to %@
<%p> AVPlayerStatusUnknown
<%p> AVPlayerStatusReadyToPlay
<%p> AVPlayerStatusFailed with error %@
<%p> rate %g
<%p> status %d
<%p> kPlayerCurrentItemCtx
<%p> external playback active %d
<%p> seekToTime:%f toleranceBefore:%f toleranceAfter:%f forceSeek:%@
-[NUMediaView _imageSize]: %@
Fail: %{public}@
job: %{public}@
Trace:
%{public}@
Trace:
%{public}@
Continue: %{public}@
+[NUMediaView _proposedInsetsForInsets:contentSize:inFrame:centerContent:] - content is not centered, so returning input insets: %@
+[NUMediaView _proposedInsetsForInsets:contentSize:inFrame:centerContent:] - content is centered. input insets: %@  content size: %@ inFrame: %@ result insets: %@
-[NUMediaView setEdgeInsets:] - insets: %@
-[NUMediaView _updateContentInsets] on scrollview %p %@, content size = %@; internal edge insets: %@; center content: %d
-[NUMediaView _transitionToInsets:duration:animationCurve:updateRenderContent:] - insets: %@, duration: %f, animationCurve: %d, updateRenderContent: %@
-[NUMediaView _transitionToInsets:duration:animationCurve:updateRenderContent:] - size: %@, offset: %@
-[NUMediaView _transitionToInsets:duration:animationCurve:updateRenderContent:] - render view content size: %@
%s - setting scroll view content size: %@
%s - transitionTargetSize:%@
<controller: %p> %g
<controller: %p> %g %g
<controller: %p> failed to play to end: %@
<controller: %p> 
Waited for %0.1f ms
renderedScale = %g, minimumScale = %g, maximumScale = %g
Update Composition
Error: %{public}@
Error loading LivePhoto: %{public}@
Nil video asset received
VideoCompositorScalePolicy: FIT scale policy fit to %f x %f
VideoCompositorScalePolicy: ZOOM scale policy zoomed to %f
Failed to update video composition: %{public}@
targetRect: %@, clipRect: %@, dx = %f, dy = %f, dr = %f, dt= %f
NUMediaViewRenderer: failed to create snapshot for videoView
-[NURenderView renderFrameReachedTargetSize] - transitionInFlight: %d   has animation: %d   hasSublayerTransform: %d   currentSize: %@
-[NURenderView renderFrameReachedTargetSize] - removing sublayer transform
-[NURenderView renderFrameReachedTargetSize] - removing transition
-[NURenderView animationDidStop:finished:] - finished: %d shouldRemoveAnimation: %d
-[NURenderView animationDidStop:finished:] - removing transition
NUScrollView
NeutrinoUIDebugging
_NUAVPlayerItemObservation
NUAVPlayerController
NUAVPlayerView
NUMediaView
NUAVPlayerControllerDelegate
NSObject
NUAVPlayerViewDelegate
NUTiledImageLayer
CALayerDelegate
NUTileLayer
NeutrinoAdditions
NUMediaViewRenderer
NUMediaPlayer
Private
_NUTiledROILayer
_NUTiledBackfillLayer
_NUContainerLayer
NURenderView
CAAnimationDelegate
NUDebugRenderView
NUViewGeometry
NUViewport
NSCopying
NUViewportRegionPolicy
NURegionPolicy
CGColor
CGColorSpace
T{?=qiIq},R,N,V_currentSeekTime
T#,R
__image
T@"<NUAVPlayerViewDelegate>",W,N,V_delegate
_beginAnimating
T@"<NUMediaViewDelegate>",W,N,V_delegate
_isVideoEnabled
T@"<NUPurgeableTextureImage>",&,V__image
_player
T@"AVAsset",R,N,V_videoAsset
_rendererDidStartPreparingVideo
T@"AVPlayer",&,N,V_player
_videoPlayerViewWithoutControls
T@"AVVideoComposition",R,N,V_videoComposition
addObserver:forKey:queue:block:
T@"NSArray",N
assetIdentifier
T@"NSArray",R,C,N,V_previousPipelineFilters
backingPosition
T@"NSString",R,C
currentSeekTime
T@"NUColorSpace",&,N,V_colorSpace
didMoveToWindow
T@"NUComposition",C,N,V_composition
enumerateRects:
T@"NUImageGeometry",&,N
initWithScript:
T@"NUMediaView",R,W,N,V_mediaView
isEmpty
TB,N
isMuted
TB,N,GisDebugEnabled,V_debugEnabled
isReady
TB,N,GisMuted
livePhotoViewDidBeginScrubbing:
TB,N,V_centerContent
pipelineFilters
TB,N,V_loopsVideo
regionWithRect:
TB,N,V_scrollUpdatesSuppressed
removeObserver:
TB,R,N
setAnchorPoint:
TB,R,N,GisVideoPlayerVisible,V_videoPlayerVisible
setBorderWidth:
TQ,N,V_displayType
setContentSize:
TQ,R,N,V_computedDisplayType
setPixelFormat:
Td,N
setVideoPlayerVisible:animated:
Td,N,V_backingScale
snapshotViewAfterScreenUpdates:
Td,N,V_maximumZoomScale
transformPoint:
Td,N,V_updateInterval
.cxx_destruct
TB,N,GisReadyForDisplay,S_setReadyForDisplay:,V_readyForDisplay
IOSurface
T{?={?=qq}{?=qq}},R,V_imageRect
T@"<NUAVPlayerControllerDelegate>",W,N,V_delegate
_backfillClient
T@"<NUMediaPlayer>",R
_containerLayer
T@"<NUPurgeableSurfaceImage>",R,V_image
_origin
T@"<NUTextureImage>",&
_regionPolicyForZoomTargetRect:
T@"AVAudioMix",R,N,V_audioMix
_updateInterval
T@"AVPlayerItem",&,N,V_playerItem
_zoomTargetRect
T@"NSArray",C,N,V_pipelineFilters
animateWithDuration:animations:
T@"NSArray",R
avAsset
T@"NSMutableArray",&,V__tileLayers
currentPlatform
T@"NUAVPlayerController",R,N,V_nuAVPlayerController
dealloc
T@"NUComposition",C,N
dispose
T@"NUImageGeometry",&
flipped
T@"NUImageGeometry",&,V__geometry
initWithSource:
T@"NUPixelFormat",&,N,V_pixelFormat
isEqualToArray:
TB,N,G_isVideoEnabled,S_setVideoEnabled:,V__videoEnabled
isProxy
TB,N,GisFlipped,V_flipped
layoutSublayers
TB,N,GisMuted,V_muted
numberWithBool:
TB,N,V_debugMode
readyForDisplay
TB,N,V_registeredKVO
release
TB,R
result:
TB,R,N,GisVideoEnabled
setBorderColor:
TB,R,N,GisZoomedToFit
setComposition:
TQ,R
setDisplayType:
T^{CGColor=},&,V_debugColor
setScalePolicy:
Td,N,V_angle
set_tileLayers:
Td,N,V_maximumScale
surface
Td,N,V_overrideZoomScale
updateAudioMix:
Td,R,N,V_backingScaleFactor
Tq,N
Tq,R,N
T{?=qiIq},R,N
T{?=qq},N,V_validRegionInsets
T{CGPoint=dd},N,V_anchorPoint
T{CGPoint=dd},N,V_origin
T{CGPoint=dd},N,V_position
T{CGPoint=dd},R,D,N
T{CGRect={CGPoint=dd}{CGSize=dd}},N,V_cropRect
T{CGRect={CGPoint=dd}{CGSize=dd}},R,N
T{CGSize=dd},N,V__masterSizeWithoutGeometry
T{CGSize=dd},N,V_imageSize
T{CGSize=dd},N,V_overrideZoomToFitSize
T{CGSize=dd},R,D,N
T{CGSize=dd},R,N
T{CGSize=dd},R,N,V_size
T{UIEdgeInsets=dddd},N,V_contentInsets
T{UIEdgeInsets=dddd},N,V_edgeInsets
__geometry
__masterSizeWithoutGeometry
__tileLayers
__videoEnabled
_addFullExtentConstraintsForView:
_addPlayerItemKVO:
_addPlayerKVO
_addTimeObserver
_anchorPoint
_angle
_appliesPerFrameHDRDisplayMetadata
_audioMix
_backfillLayer
_backfillRenderRequestForComposition:
_backfillRenderResponse
_backfillRenderResponseHandler
_backingScale
_backingScaleFactor
_beginTransition
_canRenderLoopingVideoLive
_centerContent
_coalesceUpdateLivePhotoComposition:
_coalesceUpdateVideoComposition:
_colorSpace
_composition
_computedDisplayType
_contentInsets
_cropRect
_currentSeekTime
_currentVideoSourceAssetIdentifier
_debugColor
_debugEnabled
_debugMode
_debugToggle:
_delegate
_delegateFlags
_didReleaseAVObjects
_displayID
_displayType
_doubleTap
_edgeInsets
_edgeInsetsForContentSize:inFrame:
_edgeInsetsForContentSize:inFrame:alwaysCenterContent:
_effectiveTimeForTime:
_endAnimating
_endTransition
_flipped
_forceUpdateForNewVideoComposition:previousComposition:newAsset:previousAsset:isPlaying:
_geometry
_geometryAnimationLayer
_image
_imageLayer
_imageRect
_imageSize
_isPanning
_isZooming
_lastBackfillRenderStatictics
_lastRenderDuration
_lastVideoPlayerVisibilityChangeWasAnimated
_lastZoomRect
_lastZoomRenderStatistics
_lastZoomRenderTime
_lastZoomScale
_layerRecursiveDescription
_livePhotoClient
_livePhotoFromResponse:
_livePhotoUpdateCoalescer
_livePhotoView
_livephotoPlaybackDidEnd
_livephotoPlaybackWillBegin
_loopingPlayerItemWithVideoAsset:videoComposition:audioMix:
_loopsVideo
_masterSizeWithoutGeometry
_maximumScale
_maximumZoomScale
_mediaView
_motionManager
_muted
_notifyExternalPlaybackChange:
_notifyPlaybackRateChange:
_notifyPlaybackStateChange:
_notifyPlaybackTimeChange:
_notifyPlayerStatusChange:
_nuAVPlayerController
_nu_recursiveDescriptionWithLevel:result:
_observatory
_observerDetached
_orientWithX:andY:
_overrideZoomScale
_overrideZoomToFitSize
_pipelineFilters
_pixelFormat
_playbackMode
_playbackStateFromPlayerStatus:rate:
_playerControllerKVOFlags
_playerItem
_playerItemObservations
_playerItemWithVideoAsset:videoComposition:audioMix:
_playerItemsWithVideoAsset:videoComposition:audioMix:loopsVideo:
_playerStatusDidChange:
_playerTimeObserver
_playerView
_position
_previousPipelineFilters
_proposedInsetsForInsets:contentSize:inFrame:centerContent:
_readyForDisplay
_recurseView:filter:
_registeredKVO
_releaseAVObjects
_removePlayerItemKVO:
_removePlayerItemKVO:removeFromArray:
_removePlayerKVO
_removeTimeObserver
_renderCoalescer
_renderFinishedWithGeometry:layer:
_renderGroup
_renderQueue
_renderView
_renderer
_rendererDidCreateAVPlayerController:
_rendererDidFinishPreparingVideo
_rendererDidFinishWithStatistics:
_rendererDidUpdateLivePhoto
_renderingCompletionBlock
_resetOrientation:
_roiLayer
_scalePolicyForVideoCompositionRender
_scrollBounds
_scrollUpdatesSuppressed
_scrollView
_setDisplayType:
_setLayerFilters:
_setPipelineFilters:shouldUpdateContent:
_setRate:
_setReadyForDisplay:
_setVideoEnabled:
_setupAVPlayerController
_setupDeviceMotion
_setupViews
_shouldRemoveAnimation
_showDebug
_size
_startDeviceMotion
_startVideoPlayback
_stopDeviceMotion
_stopVideoPlayback
_targetZoomScale
_tearDownAVPlayerController
_tileLayers
_transitionAnimationInFlight
_transitionCount
_transitionTargetSize
_transitionToInsets:duration:animationCurve:updateRenderContent:
_updateBackfillLayerWithLatestRenderResponse
_updateBackfillLayerWithRenderResponse:
_updateContentInsets
_updateDisplayForMediaType:
_updateImageLayer:withRenderResponse:
_updateImageRenderForComposition:
_updateLivePhotoComposition:
_updateLivePhotoWithResponse:
_updateROILayerWithLatestRenderResponse
_updateROILayerWithRenderResponse:
_updateReadyForDisplayID
_updateReadyForDisplayWithID:
_updateRenderContent
_updateRenderContentCoalesced:
_updateSublayers
_updateVideoComposition:
_updateVideoPlayerAlpha:
_updateVideoViewLayoutWithGeometry:
_updateVideoWithResult:sourceChanged:
_validRegionInsets
_videoAsset
_videoClient
_videoComposition
_videoEnabled
_videoFrameImageRenderResponseHandler
_videoPlayerController
_videoPlayerView
_videoPlayerVisible
_videoRenderInFlightCount
_videoUpdateCoalescer
_viewRecursiveDescription
_viewport
_withComposition:visitRenderClient:
_zoomClient
_zoomRenderRequestForComposition:
_zoomRenderResponse
_zoomRenderResponseHandler
actionForLayer:forKey:
activateConstraints:
addAnimation:forKey:
addExternalPlaybackObserver:
addExternalPlaybackObserver:block:
addGestureRecognizer:
addObject:
addObserver:forKeyPath:options:context:
addObserver:selector:name:object:
addObserverForKey:queue:block:
addPeriodicTimeObserverForInterval:queue:usingBlock:
addPlaybackRateObserver:block:
addPlaybackStateObserver:
addPlaybackTimeObserver:
addPlaybackTimeObserver:block:
addPlayerStatusObserver:block:
addSublayer:
addSubview:
allocWithZone:
alpha
anchorPoint
angle
animateWithDuration:animations:completion:
animationDidStart:
animationDidStop:finished:
animationForKey:
animationWithKeyPath:
appendFormat:
appendString:
arrayByAddingObject:
arrayWithObjects:count:
audioMix
autorelease
auxiliarySession
backingScale
backingScaleFactor
backingSize
begin
beginAccess
beginAccessRegion:
beginPanning
beginZooming
boolForKey:
boolValue
boundingCropRect
bounds
cacheVideoRenderFilter
callStackSymbols
canRenderVideoLive
cancel
cancelPendingRenders
cancelPendingSeeks
centerContent
class
coalesceBlock:
colorSpace
commit
commitAndNotifyOnQueue:withBlock:
componentsJoinedByString:
composition
compositionInstructions:areEqualToCompositionInstructions:
computedDisplayType
conformsToProtocol:
constraintsWithVisualFormat:options:metrics:views:
contentInset
contentInsets
contentInsetsWithScale:
contentOffset
contentRect
contentSize
contents
contentsScale
convertNormalizedViewRect:fromSpace:
convertPoint:fromImageToView:
convertPoint:fromLayer:
convertPoint:fromSpace:toView:
convertPoint:fromView:
convertPoint:fromView:toSpace:
convertPoint:toImageFromView:
convertPoint:toLayer:
convertPoint:toNormalizedYDownSourceSpaceFromView:
convertPointFromImage:
convertPointToImage:
convertRect:fromImageToView:
convertRect:fromLayer:
convertRect:fromView:
convertRect:toImageFromView:
convertRect:toLayer:
convertRectFromImage:
convertRectToImage:
convertViewRect:fromSpace:
copy
copyWithZone:
count
countByEnumeratingWithState:objects:count:
cropRect
currentHandler
currentItem
currentTime
currentlySeeking
cyanColor
debugColor
debugDescription
debugEnabled
debugMode
defaultActionForKey:
defaultCenter
delegate
description
deviceSupportsContentAdaptedHeadroom
dictionaryWithObjects:forKeys:count:
displayLayer:
displayType
displayWithIdentifier:
drawLayer:inContext:
duration
edgeInsets
endAccess
endAccessRegion:
endPanning
endZooming
enumerateObjectsUsingBlock:
error
extent
firstObject
floatValue
frame
frameRect
functionWithName:
geometry
greenColor
handleFailureInMethod:object:file:lineNumber:description:
hash
image
imageBounds
imageByApplyingTransform:
imageByCompositingOverImage:
imageByCroppingToRect:
imageFrame
imageRect
imageSize
inLiveResize
init
initWithCoder:
initWithColor:
initWithComposition:
initWithDelay:
initWithFrame:
initWithIOSurface:
initWithImage:tile:
initWithImage:uiOrientation:videoAsset:photoTime:asset:options:videoComposition:
initWithItems:
initWithLevel:
initWithMediaView:
initWithName:
initWithName:responseQueue:
initWithSize:
initWithSize:backingScaleFactor:
initWithTarget:action:
initWithTargetSize:
initWithViewport:
initWithZoomFactor:
insertItem:afterItem:
insetBoundsForCrop:inBounds:inFrame:
installRenderingCompletionBlock:
instructions
integerValue
isDebugEnabled
isDeviceMotionAvailable
isEqual:
isEqualToString:
isFlipped
isGeometryFlipped
isHidden
isKindOfClass:
isMainThread
isMemberOfClass:
isReadyForDisplay
isVideoEnabled
isVideoPlayerVisible
isViewDebugEnabled
isZoomedToFit
items
layer
layerClass
layerWillDraw:
layoutSublayersOfLayer:
layoutSubviews
livePhotoView:didEndPlaybackWithStyle:
livePhotoView:willBeginPlaybackWithStyle:
livePhotoViewDidEndScrubbing:
loadedTimeRanges
loopsVideo
loopsVideoPlayback
mainQueue
mainScreen
maximumScale
maximumZoomScale
mediaDuration
mediaType
mediaView
mediaView:didZoom:
mediaViewDidEndLivePhotoPlayback:
mediaViewDidEndZooming:
mediaViewDidFinishPreparingVideo:
mediaViewDidFinishRendering:
mediaViewDidFinishRendering:withStatistics:
mediaViewDidScroll:
mediaViewDidStartPreparingVideo:
mediaViewDidUpdateLivePhoto:
mediaViewFailedToPlayToEnd:error:
mediaViewIsReadyForVideoPlayback:
mediaViewWillBeginLivePhotoPlayback:
mediaViewWillBeginZooming:
minimumZoomScale
muted
name
newRenderRequestForComposition:scalePolicy:regionPolicy:
notifyAllObserversForKey:withBlock:
nuAVPlayerController
nu_contentsAreFlipped
nu_layerRecursiveDescription
null
objectForKey:
objectForKeyedSubscript:
observeValueForKeyPath:ofObject:change:context:
origin
overrideZoomScale
overrideZoomToFitSize
pause
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
performWithoutAnimation:
photo
photoTime
pipelineFilersHaveChanged
pixelFormat
play
playbackMode
playbackRate
playbackState
player
playerController:didUpdateElapsedTime:duration:
playerControllerDidFinishPlaying:duration:
playerControllerFailedToPlayToEnd:error:
playerControllerIsReadyForPlayback:
playerItem
playerItemDidReachEnd:
playerItemFailedToPlayToEnd:
playerItemWithAsset:
playerViewReadyForDisplayDidChange:
position
prepareWithAVAsset:videoComposition:audioMix:loopsVideo:seekToTime:
previousPipelineFilters
properties
proposedBoundsForBounds:inFrame:
rate
readSurfaceRegion:withBlock:
redColor
regionByClippingToRect:
regionByClippingToRegion:
regionByShrinkingBy:
regionForGeometry:
registeredKVO
removeAllAnimations
removeAllItems
removeAllObjects
removeAnimationForKey:
removeFromSuperlayer
removeFromSuperview
removeItem:
removeObject:
removeObserver:forKeyPath:context:
removeObserver:name:object:
removeTimeObserver:
renderClient
renderFrameReachedTargetSize
renderScale
renderSize
repeatAudio:count:error:
repeatVideo:count:error:
repeatVideoComposition:count:error:
respondsToSelector:
retain
retainCount
rotationRate
scale
scaledExtent
scaledSize
screen
scrollUpdatesSuppressed
scrollViewDidEndDecelerating:
scrollViewDidEndDragging:willDecelerate:
scrollViewDidEndZooming:withView:atScale:
scrollViewDidScroll:
scrollViewDidZoom:
scrollViewWillBeginDragging:
scrollViewWillBeginZooming:withView:
seek:toleranceBefore:toleranceAfter:
seek:toleranceBefore:toleranceAfter:forceSeek:
seek:toleranceBefore:toleranceAfter:forceSeek:completionHandler:
seekBack
seekForward
seekToTime:
seekToTime:completionHandler:
seekToTime:exact:
seekToTime:exact:forceSeek:
seekToTime:toleranceBefore:toleranceAfter:
seekToTime:toleranceBefore:toleranceAfter:completionHandler:
seekToTime:toleranceBefore:toleranceAfter:forceSeek:
self
setActionAtItemEnd:
setAllowedAudioSpatializationFormats:
setAllowsEdgeAntialiasing:
setAlpha:
setAlwaysBounceHorizontal:
setAlwaysBounceVertical:
setAngle:
setAnimationDuration:
setAnimationTimingFunction:
setAppliesPerFrameHDRDisplayMetadata:
setAudioMix:
setAudioSession:
setAutoresizingMask:
setBackingScale:
setBounds:
setCategory:error:
setCenterContent:
setClipsToBounds:
setColorSpace:
setCompletionBlock:
setContentInset:
setContentInsetAdjustmentBehavior:
setContentInsets:
setContents:
setContentsRect:
setCropRect:
setDebugColor:
setDebugEnabled:
setDebugMode:
setDelegate:
setDeviceMotionUpdateInterval:
setDisableActions:
setDuration:
setEdgeInsets:
setFillMode:
setFilters:
setFlipped:
setFrame:
setGeometry:
setGeometryFlipped:
setHidden:
setImage:
setImageSize:
setLoopsVideo:
setLoopsVideoPlayback:
setMasksToBounds:
setMaximumScale:
setMaximumZoomScale:
setMediaType:
setMinimumZoomScale:
setMuted:
setName:
setNeedsLayout
setNumberOfTouchesRequired:
setOrigin:
setOverrideZoomScale:
setOverrideZoomToFitSize:
setPipelineFilters:
setPlaybackMode:
setPlaybackRate:
setPlayer:
setPlayerItem:
setPosition:
setPriority:
setRate:
setRegionPolicy:
setRegisteredKVO:
setRemovedOnCompletion:
setSampleMode:
setScrollEnabled:
setScrollUpdatesSuppressed:
setSeekingWaitsForVideoCompositionRendering:
setShouldCoalesceUpdates:
setShowsDeviceMovementDisplay:
setShowsHorizontalScrollIndicator:
setShowsVerticalScrollIndicator:
setSublayerTransform:
setTime:
setTimingFunction:
setToValue:
setTransform:
setTranslatesAutoresizingMaskIntoConstraints:
setUpdateInterval:
setUserInteractionEnabled:
setValidRegionInsets:
setValue:forKey:
setVideoComposition:
setVideoEnabled:animated:
setVideoRenderPrepareNode:
setZPosition:
setZoomScale:
setZoomScale:animated:
setZoomScaleToFit
set_geometry:
set_image:
set_masterSizeWithoutGeometry:
size
snapshotImage
standardUserDefaults
startDeviceMotionUpdatesUsingReferenceFrame:toQueue:withHandler:
state
statistics
status
step:
stepByCount:
stopDeviceMotionUpdates
string
stringWithFormat:
sublayerTransform
sublayers
submitGenericRequest:completion:
submitRequest:
submitRequestForComposition:completion:
submitSynchronous:
subviews
superclass
supportsLiveVideoRendering
targetSize
totalDuration
transform
transformWithSourceSpace:destinationSpace:error:
transitionToSize:duration:animationCurve:completion:
transitionToSize:offset:duration:animationCurve:completion:
updateAppliesPerFrameHDRDisplayMetadata:
updateComposition:
updateInterval
updateVideoComposition:
updateWithVideoPrepareNodeFromVideoComposition:
userInfo
validRegion
validRegionInsets
valueForKey:
valueWithCATransform3D:
video
videoAsset
videoComposition
videoEnabled
videoPlayerVisible
videoRenderPrepareNode
viewForZoomingInScrollView:
viewImageSize
visibleRect
wait
waitForRender
whiteColor
willMoveToWindow:
window
yellowColor
zone
zoomScale
zoomToRect:animated:
zoomedToFit
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
@16@0:8
v32@0:8q16@24
v24@0:8@16
B16@0:8
v20@0:8B16
v16@0:8
@"AVPlayerItem"
B68@0:8@16@24@32B40{?=qiIq}44
@44@0:8@16@24@32B40
@40@0:8@16@24@32
v48@0:8@16@24@32^v40
v88@0:8{?=qiIq}16{?=qiIq}40{?=qiIq}64
v92@0:8{?=qiIq}16{?=qiIq}40{?=qiIq}64B88
v100@0:8{?=qiIq}16{?=qiIq}40{?=qiIq}64B88@?92
v24@0:8q16
v32@0:8@16@?24
v20@0:8f16
v40@0:8{?=qiIq}16
{?=qiIq}40@0:8{?=qiIq}16
{?=qiIq}16@0:8
v28@0:8@16B24
d16@0:8
v24@0:8d16
@"NUObservatory"
{?="registeredPlayer"B}
@"NSMutableArray"
@"AVPlayer"
@"AVAsset"
@"AVVideoComposition"
@"AVAudioMix"
@"<NUAVPlayerControllerDelegate>"
{?="value"q"timescale"i"flags"I"epoch"q}
#16@0:8
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
@24@0:8@16
v20@0:8Ai16
@"<NUAVPlayerViewDelegate>"
{UIEdgeInsets=dddd}100@0:8{UIEdgeInsets=dddd}16{CGSize=dd}48{CGRect={CGPoint=dd}{CGSize=dd}}64B96
B24@0:8@16
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16d24
v32@0:8@16@24
v40@0:8@16d24d32
v24@0:8@"NUAVPlayerController"16
v32@0:8@"NUAVPlayerController"16d24
v32@0:8@"NUAVPlayerController"16@"NSError"24
v40@0:8@"NUAVPlayerController"16d24d32
v24@0:8@"NUAVPlayerView"16
v28@0:8d16B24
v52@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16B48
{CGSize=dd}16@0:8
{CGPoint=dd}32@0:8{CGPoint=dd}16
{CGRect={CGPoint=dd}{CGSize=dd}}48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
{CGPoint=dd}48@0:8{CGPoint=dd}16@32@40
{CGPoint=dd}40@0:8{CGPoint=dd}16@32
{CGRect={CGPoint=dd}{CGSize=dd}}56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48
v24@0:8@?16
{UIEdgeInsets=dddd}64@0:8{CGSize=dd}16{CGRect={CGPoint=dd}{CGSize=dd}}32
{UIEdgeInsets=dddd}68@0:8{CGSize=dd}16{CGRect={CGPoint=dd}{CGSize=dd}}32B64
v48@0:8{UIEdgeInsets=dddd}16
v40@0:8@16@24d32
v68@0:8{UIEdgeInsets=dddd}16d48q56B64
v24@0:8B16B20
{UIEdgeInsets=dddd}16@0:8
v32@0:8{CGSize=dd}16
v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
@"NURenderView"
@"NUScrollView"
@"NUMediaViewRenderer"
{UIEdgeInsets="top"d"left"d"bottom"d"right"d}
@"NUAVPlayerController"
@"NUAVPlayerView"
@"UIView"
{?="hasDidFinishRendering"B"hasDidUpdateLivePhoto"B"hasDidFinishRenderingWithStatistics"B"hasDidZoom"B"hasDidScroll"B"hasWillBeginZooming"B"hasDidEndZooming"B"hasIsReadyForVideoPlayback"B"hasDidStartPreparingVideo"B"hasDidFinishPreparingVideo"B"hasFailedToPlayToEnd"B"hasWillBeginLivePhotoPlayback"B"hasDidEndLivePhotoPlayback"B}
@"NUCoalescer"
{CGSize="width"d"height"d}
@"<NUMediaViewDelegate>"
{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}
v32@0:8@16^{CGContext=}24
@32@0:8@16@24
v24@0:8@"CALayer"16
v32@0:8@"CALayer"16^{CGContext=}24
@"<CAAction>"32@0:8@"CALayer"16@"NSString"24
^{CGColor=}16@0:8
v24@0:8^{CGColor=}16
{?=qq}16@0:8
v32@0:8{?=qq}16
^{CGColor=}
@"<NUPurgeableTextureImage>"
@"NUImageGeometry"
{?="x"q"y"q}
{?={?=qq}{?=qq}}16@0:8
@"<NUPurgeableSurfaceImage>"
{?="origin"{?="x"q"y"q}"size"{?="width"q"height"q}}
B52@0:8@16@24@32@40B48
v44@0:8{?=qiIq}16B40
v48@0:8{?=qiIq}16B40B44
@24@0:8@?16
q16@0:8
@24@0:8@?<v@?@"<NUMediaPlayer>"q>16
@24@0:8@?<v@?@"<NUMediaPlayer>"{?=qiIq}>16
@24@0:8@?<v@?@"<NUMediaPlayer>"B>16
@"NSArray"16@0:8
@?16@0:8
v24@0:8Q16
q28@0:8q16f24
v32@0:8@16q24
@"NUSurfaceRenderClient"
@"NULivePhotoRenderClient"
@"NUVideoRenderClient"
@"NSString"
@"NSObject<OS_dispatch_group>"
@"NSObject<OS_dispatch_queue>"
@"NUResponse"
@"<NURenderStatistics>"
@"NUComposition"
@"NUColorSpace"
@"NUPixelFormat"
@"NUMediaView"
@"NSArray"
v24@0:8@"CAAnimation"16
v28@0:8@"CAAnimation"16B24
v56@0:8{CGSize=dd}16d32@40@?48
v72@0:8{CGSize=dd}16{CGPoint=dd}32d48@56@?64
@"NUTiledImageLayer"
@"_NUContainerLayer"
@"CALayer"
v32@0:8d16d24
@"UILongPressGestureRecognizer"
@"CMMotionManager"
{CGRect={CGPoint=dd}{CGSize=dd}}80@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16{CGRect={CGPoint=dd}{CGSize=dd}}48
{CGRect={CGPoint=dd}{CGSize=dd}}112@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16{CGRect={CGPoint=dd}{CGSize=dd}}48{CGRect={CGPoint=dd}{CGSize=dd}}80
{UIEdgeInsets=dddd}24@0:8d16
{CGPoint=dd}16@0:8
v32@0:8{CGPoint=dd}16
{CGPoint="x"d"y"d}
@24@0:8^{_NSZone=}16
@32@0:8{CGSize=dd}16
@40@0:8{CGSize=dd}16d32
@"NURegion"24@0:8@"NUImageGeometry"16
@"NUViewport"
