T@?,C,N,V_block
CalCalendarItemStatus
_addReminderFolders:forAccount:
T#,R
_calUnitTestMergedRequestsBlock
T@"ASPolicyPreflighter",&,N,V_preflighter
_changeTracking
T@"NSDate",&,N,V_startTime
_curReplyMethod
T@"NSMutableArray",&,N,V_outstandingFolderRequests
_isShuttingDown
T@"NSMutableDictionary",&,N,V_eventCalendarsByFolderId
_setLocalDisplayName:forFolder:
T@"NSMutableDictionary",&,N,V_folderIdToSequentialServerErrorCount
account
T@"NSMutableSet",&,N,V_currentlySyncingFolderIds
actions
T@"NSMutableSet",&,N,V_foldersChangedInChangeSet
arrayWithArray:
T@"NSString",&,N,V_pingPowerAssertionUUID
changedObjectID
T@"NSString",R,N,V_accountID
closeDBAndSave:
T@"REMChangeToken",&,N,V_sinceToken
containsObject:
T@"REMChangeTracking",&,N,V_changeTracking
currentCalendar
T@"REMStore",&,N,V_reminderStore
dealloc
TB,N,V_isFirstSync
deviceWillSleep
TQ,R
dueDate
Ti,N,V_count
endTime
URIRepresentation
fetchAccountWithObjectID:error:
UTF8String
folderHierarchy
_ASDayOfWeekFromREMDaysOfWeek:outWeekOfMonth:
fullEmailString
_ASSyncTaskAndMeetingResponseCommandsFromDAEventActions:meetingResponseActions:emailEvents:
importedICSData
_account
initWithStartDate:endDate:type:
_accountObjID
initialSyncReminder:forFolderWithId:forAccount:resultingAction:
_addSimpleChangeForType:changedItemId:addedIds:modifiedIds:deletedIds:collapsedIds:
isEqualToEvent:
_appendFolderHierarchyChangesForFoldersOfDataclasses:
isProxy
_appendSyncRequest:
localFileHandle
_appendSyncRequestForFolders:remoteChanges:
localID
_appendSyncRequestForFoldersOfDataclasses:remoteChanges:
meetingResponse
_attendeeChangesDueToMeetingForwardingInCalendar:eventIdToAttendeeEmails:eventIdToAttendeeUUIDs:dataHandler:
monthsOfTheYear
_busyFolderIds
numberWithBool:
_calBestEffortApplyNewFolders:oldFolders:shouldCreateFoldersMissingInDB:
predicateShouldContinue:afterFindingRecord:metadata:moreComing:
_checkAndMarkChangeConsumed
preflighterRemoteWipeRequested:
_clearOutInviteWithDeliveryFolderId:deliveryServerId:wasSoftDelete:considerInvitedToInvitations:
protocolVersion
_contactStoresByFolderId
registerReminderChangeNotificationsForAccount:withChangedBlock:
_containerHasItems
removeAllAlarms
_copyABActionsInContainer:existingActions:dataHandler:wantPreserveActions:changeContext:
responseComment
_copyCalendarItemMoveActionsInCalendar:dataHandler:deleteActionsByFolderId:
retrieveOofSettingsForConsumer:
_copyExchangeCalendarStore:
searchPeopleWithPredicate:sortOrder:inAddressBook:withDelegate:
_copyExistingCalRecordForEvent:matchOnAttributes:inCalendar:
_copyExistingNoteRecordForNote:matchOnAttributes:inNoteStore:
setDataclasses:
_copyNotesActionsInNoteStore:existingActions:dataHandler:wantPreserveActions:changeSet:
setIsFirstSync:
_currentlySyncingFolderIds
setMessageBody:
_delayedPingTimer
setOccurrences:
_deletedReminderFolderIDsInChangeSet
setSensitivity:
_enqueueNotificationWithName:sourceRunLoop:userInfo:
setWeekOfMonth:
_eventsNumberOfPastDaysToSync
sharedDBWatcher
_exchangeIdForLocalId:inContainer:dataclass:redirectToParent:
storage
_fetchChangeTrackingState
subject
_finishInitialSyncForFolder:dataclass:
trigger
_finishWithInvitationEvent:eventUID:expectedResponse:wasMyInvite:isStillInvite:
updates
_fixUpTimers
userInformation
_folderIdToSequentialFailureCount
.cxx_destruct
_accountIDToChangeTrackingTable
ICSStringFromMethod:
_appendSyncRequest:atBeginning:
T@"ASAccount",W,N,V_account
_cancelPingTask
T@"NSArray",&,N,V_oldFolders
_copyABAccount:
T@"NSLock",&,N,V_folderItemSyncRequestLock
_isOrganizerSelfWithLocalEvent:
T@"NSMutableDictionary",&,N,V_contactStoresByFolderId
_setFolderHierarchyNeedsUpdate:
T@"NSMutableDictionary",&,N,V_folderIdToSequentialFailureCount
abGroupChangeId
T@"NSMutableDictionary",&,N,V_noteStoreObjectIdsByFolderId
accountDidUpdateProtocolVersion
T@"NSMutableSet",&,N,V_foldersAddedInChangeSet
allKeys
T@"NSMutableSet",&,N,V_foldersContainingReminderChangesInChangeSet
bundleForClass:
T@"NSString",R,C
changes
T@"REMChangeSet",&,N,V_changeSet
contactsFolders
T@"REMChangeToken",&,N,V_upToToken
context
T@"REMObjectID",&,N,V_accountObjID
dTStamp
T@?,C,N,V_calUnitTestMergedRequestsBlock
deletes
TB,N,V_isShuttingDown
didReceiveReminderNotification:
T^v,N,V_matchedRecord
endDate
Ti,N,V_numLocalFolderUpdatesInFlight
existingChanges
URLWithString:
fetchListIncludingSpecialContainerWithExternalIdentifier:error:
UUIDString
folders
_ASMonthOfYearFromREMMonthOfYear:
_abBestEffortApplyNewFolders:oldFolders:shouldCreateFoldersMissingInDB:
initWithFormat:
_accountID
initWithString:
_addChangeForType:changedItemId:changeId:addedIdsToChangeId:modifiedIdsToChangeId:deletedIdsToChangeId:pseudoDeletedIdsToChangeId:changeIdsToClear:
inserts
_addedListsInSubset:
isGoogleAccount
_appendReminderSyncRequestForFolders:remoteChanges:
_appendSyncRequestForFolders:
localFileLength
_appendSyncRequestForFoldersOfDataclasses:
localModifiedFoldersForAccount:
_attachmentManager
message
_block
newlyAddedStore
_cacheFoldersForDataclasses:
occurrenceCount
_changeSet
preflighter:successWithMCFeatures:perAccountPolicies:policyKey:
_clearChangeHistoriesWithChangeIdContext:dataclass:inFolderWithId:pushedActions:
proposedEndTime
_closeLocalDBConnectionsWithoutSaving
recurrenceRules
_containerForFolderWithId:dataclass:
release
_convertCalendarAvailabilityType:
removeObserver:
_copyCalendarItemActionsInContainer:existingActions:dataHandler:wantPreserveActions:skippedDetachments:changeContext:
resumeMonitoringFoldersWithIDs:
_copyDefaultExchangeEventsCalendar:
saveFetchingAutomaticallyState:
_copyExistingABRecordForContact:matchOnAttributes:inStore:
seekToEndOfFile
_copyExistingLocalItemForExchangeItem:matchOnAttributes:inContainer:
setAccountType:
_copyICSDateFromDate:timeZone:
setFolderCache:
_count
setMIMESupport:
_dbExternalIdForLocalId:dataclass:
setMonthOfYear:
_deleteList:forAccount:
setPreflighter:
_detectDuplicatedEventFromExchangeEvent:inFolderWithId:isInitialSync:eventServerIDsToDrop:eventServerIDSWithDroppedDeletes:resultingChangeActionsForServer:outEvent:outLocalItem:outDidTouchDB:
setUid:
_eventCalendarsByFolderId
setWithObjects:
_exceptionDateChangesInCalendar:exceptionDateToChangeId:outHighestSequenceNumber:dataHandler:
startMonitoring
_faultInCalendarSubentitiesInCalendar:addedIdsToEventChangeId:modifiedIdsToEventChangeId:deletedIdsToEventChangeId:pseudoDeletedIdsToEventChangeId:localToExchangeIdMap:eventChangeIdsToClear:allAddedDetachmentIds:outRecurrenceId:outAlarmId:outAttendeeId:outAttachmentId:outHighestSequenceNumber:dataHandler:
stringByAppendingPathComponent:
_fethAuxiliaryChangeInfosForReminderChangeObject:
subtype
_finishInitialSyncForToDoFolder:
updateReminder:
_fireWaitingFolderItemSyncRequests
_folderChangeHistory
yearOfCommonEra
_folderIdToSequentialServerErrorCount
_folderIdsWithUnacknowledgedPings
_folderItemSyncRequestLock
_folderItemsSyncTask:failedWithErrorCode:
_foldersAddedInChangeSet
_foldersChangedInChangeSet
_foldersContainingReminderChangesInChangeSet
_foldersToMonitorById
_foldersToSyncGivenResults:
_getHierarchyChangeForDataclass:changedItemId:changeType:externalId:changeTableIndices:
_getReminderSaveRequest
_handleAction:inFolderWithId:dataclass:isInitialSync:resultingChangeActionsForServer:eventServerIDsToDrop:eventServerIDSWithDroppedDeletes:
_handleChangeOnEventWithExchangeId:localId:changeType:eventChangeId:hasSignificantAttributeChanges:container:dataHandler:addedIdsToEventChangeId:modifiedIdsToEventChangeId:deletedIdsToEventChangeId:pseudoDeletedIdsToEventChangeId:eventChangeIdsToClear:allAddedDetachmentIds:localToExchangeIdMap:outShouldSaveDB:
_handleDaemonBackedLocalFolderChangeWithDBChangeIndices:oldFolders:status:error:
_handleLocalReminderFolderChangeWithFolder:oldFolders:status:error:
_handleLocallyChangedFolderWithChangedItemId:changeType:externalId:changeTableIndices:dataclass:
_handleNameCollisionOnAddedFolder:consumer:completionBlock:
_handlePolicyUpdate
_handleReminderChangedFolder:changeType:
_handleSuccessfulFolderChangeForFolders:previousSyncKey:
_handleToDoAction:inFolderWithId:isInitialSync:resultingChangeActionsForServer:eventServerIDsToDrop:eventServerIDSWithDroppedDeletes:
_hasScheduledWake
_hierarchyChangeHistory
_initializeChangeTrackingState
_initializeChangeTrackingStateIfNeeded
_instanceIdFromEventId:
_instanceIdFromIdWithExceptionDate:
_instanceIdFromUniqueId:
_invitationActionsInFlight
_isDetachmentFromEventId:
_isFirstSync
_isHierarchyChangeBlackListed
_isNoChangeBlackListed
_isOrganizerSelfWithEmail:
_isTearingDown
_lastPingFolders
_lastPingHeartBeat
_lazyDeletedReminderFolderIDsInChangeSet
_loadAttributesFromReminder:forAccount:
_loadAttributesFromRemlist:forAccount:
_loadRecurrenceRulesFromReminder:intoTask:forAccount:
_localDeletedReminderActionsForFolderId:forAccount:
_localIdForExchangeId:inContainer:dataclass:
_localLazyDeletedReminderActionsForFolderId:forAccount:
_localModifiedReminderActionsForFolderId:forAccount:
_localUndeletedReminderActionsForFolderId:forAccount:
_localizedStringForResponse:
_markChangesConsumed
_markEventWithLocalIDAsNeedingInvitationEmail:parentId:
_matchedRecord
_modifiedListsInSubset:
_modifiedRemindersInSubset:
_moveItemsTask:failedWithErrorCode:
_newABSourceForDAFolder:
_newCalCalendarForDAFolder:
_newCalendarEntityType
_newNoteSourceForDAFolder:
_newPolicyManager
_nilOutContainersForDataclasses:
_noChangeHistory
_noteAccountObject:
_noteObserver
_noteStoreObjectIdsByFolderId
_noteSyncForFolderWithId:andTitle:finishedWithSuccess:
_notesBestEffortApplyNewFolders:oldFolders:shouldCreateFoldersMissingInDB:
_numLocalFolderUpdatesInFlight
_oldFolders
_openLocalDBConnections
_outstandingFolderRequests
_parentIdFromEventId:
_pcManager
_pendingChangesInReminderDB
_pingBlacklistFolderIds
_pingHistoryBlacklistFolderIds
_pingPowerAssertionIdentifier
_pingPowerAssertionUUID
_pingTask
_pollFolders
_populateChangeItem:forRecurrence:forReminder:forFolderWithId:forAccount:
_populateChangeItem:forReminder:folderWithId:forAccount:
_populateCurrentPolicyWithError:
_preflightEDUModeMCFeatures:
_preflighter
_processReminderNotification:
_pruneFoldersToMonitorOfOrphanedFolders
_queueServerFailureResyncForFolderWithId:isInitialSync:
_reallyApplyMessageDidSendWithContext:
_reallyAttemptInvitationLinkageForMetaDatas:deliveryIdsToClear:deliveryIdsToSoftClear:inFolderWithId:callback:
_reallyFinishInvitationBatch:
_reallyPrepareFetchAttachmentTask:
_reallySendMoves:
_reallySyncFolderHierarchyWithConsumer:requestDataclasses:requireChangedFolders:context:
_reallySyncLocallyChangedFolder:consumer:dataclasses:completionBlock:
_reallySyncRequest:
_recordAddedLists
_recordChangesInChangeSet
_recordDeletedLists
_recordDeletedReminders
_recordLazyDeletedLists
_recordLazyDeletedReminders
_recordModifiedLists
_recordModifiedReminders
_recordReminders:
_recordUndeletedLists
_recordUndeletedReminders
_refirePendingCalendarInvitations
_refirePingAfterDelay:withGrowthAction:
_reissuePingTaskWithGrowthAction:
_remDaysOfWeekFromASDayOfWeek:weekOfMonth:
_remExternalRepresentationClasses
_remListExternalIdentifierForDeletedReminderChangeObject:
_remMonthOfYearFromASMonthOfYear:
_reminderAccountForAccount:
_reminderBestEffortApplyNewFolders:oldFolders:shouldCreateFoldersMissingInDB:
_reminderListWithExternalId:forReminderAccount:
_reminderListWithObjectUUID:forReminderAccount:
_reminderListsForAccount:
_reminderMatchingAttributesInReminder:list:
_reminderSaveRequest
_reminderStore
_reminderWithExternalId:list:
_reminderWithObjectUUID:list:
_removeABSourceForDAFolder:
_removeCalCalendarForDAFolder:
_removeNoteSourceForDAFolder:
_removePostponedRequestForFolderWithId:
_reportFolderHierarchySyncSuccessWithCount:
_reportFolderItemSyncSuccess:forFolderWithID:withItemsCount:
_respondToMeetingsForActions:inFolderWithId:consumer:
_safeToPing
_saveAttachmentDataToDatabaseForTask:
_setChangedItem:
_setForce7BitForUnitTests:
_setSyncKey:forFolderWithId:
_setUpABNotifications
_setUpCalNotifications
_setUpNotesNotifications
_setUpReminderNotifications
_setupReminderAccountForAccount:
_shouldEditNotesSupportOnProtocolChange
_shouldSaveLastKnownProtocolVersion
_sinceToken
_smartMailTask:failedWithErrorCode:error:
_startTime
_stopMonitoringFoldersWithIds:
_stringWithRFC822DataFromEvent:icsMethod:recipients:recipientBareEmails:exceptionDate:outMessageID:
_syncAllContactFoldersWithRemoteChanges:
_syncAllContactsEventsToDosAndNotesFolders
_syncAllEventsFoldersWithRemoteChanges:
_syncAllNotesFoldersWithRemoteChanges:
_syncAllToDosFoldersWithRemoteChanges:
_syncEndedWithError:
_syncKeyForFolderWithId:
_syncKeyForFolderWithId:dataclass:
_syncRequest:
_syncResultForFolder:newTag:previousTag:actions:results:changeIdContext:isInitialSync:moreAvailable:dataclass:resultingChangeActionsForServer:pushedActions:rejectedServerIds:eventsWithPendingInvitationEmails:
_syncResultForToDoFolder:newTag:previousTag:actions:results:changeIdContext:isInitialSync:moreAvailable:resultingChangeActionsForServer:pushedActions:rejectedServerIds:eventsWithPendingInvitationEmails:
_syncStarted
_tearDownABNotifications
_tearDownCalNotifications
_tearDownNotesNotifications
_tearDownPreflighter
_tearDownReminderNotifications
_upToToken
_updateFolderHierarchyRequireChangedFolders:
_updateList:external:name:isDefault:
_updateSyncKey:forToDoFolderWithId:
_verifySearchStore
_wrapperSyncResultForFolder:dataclass:newTag:previousTag:actions:results:changeIdContext:isInitialSync:moreAvailable:moreLocalChangesAvailable:pushedActions:rejectedServerIds:
abCloseDBAndSave:
abDB
abOpenDBWithClientIdentifier:
abPersonChangeId
abProcessAddedRecords
abSaveDB
accountContainsEmailAddress:
accountDescription
accountForAccountId:
accountID
accountObjID
acknowledgeAccountOnlyRemoteWipeWithSuccess:
acknowledgeIntentionToRemoteWipe
acknowledgePolicyCompliance
actionFailed:forTask:error:
activeQueuedTask
activeSyncString
activeSyncStringWithoutSeparators
addAlarmWithTrigger:
addEntriesFromDictionary:
addFolder:forAccount:
addFolderIDToPingBlacklist:
addFolderIDToPingHistoryBlacklist:
addListWithName:toAccountChangeItem:
addObject:
addObjectsFromArray:
addObserver:selector:name:object:
addObserverForName:object:queue:usingBlock:
addOrModifyReminder:forFolderWithId:forAccount:
addPersistentClientWithAccountID:clientID:watchedIDs:
addRecurrenceRule:
addReminderWithTitle:toListChangeItem:
addSourceID:sourceFolder:destinatonFolder:
addStringsToEmailForEventIAmAttending:recipient:stringsToEmail:eventUUIDsToEmail:externalIDs:messageIDsToEmail:eventsDroppedDueToAge:checkEventForNeedingInvite:
addStringsToEmailForEventIOriginated:deletedExceptionOccurrenceDate:stringsToEmail:eventUUIDsToEmail:externalIDs:messageIDsToEmail:eventsDroppedDueToAge:checkEventForNeedingInvite:
addTimer:forMode:
addedAndModifiedRemindersInChangeSet
addedListsInChangeSet
addressBookConstraintsPath
agentWithAccountID:
alarms
allDayEvent
allObjects
allValues
allVisibleNotesInCollection:
allowsReminderOnCompletedTasks
andPredicateWithSubpredicates:
anyObject
appendFormat:
appendString:withQuoteLevel:
applyFilterByTransactionAuthors:isExclusion:
applyRestrictionDictionary:clientType:clientUUID:localizedClientDescription:localizedWarningMessage:complianceBlocking:displayImmediateAlert:limitForUserEnrollment:outRestrictionChanged:outEffectiveSettingsChanged:outError:
archivedDataWithRootObject:
array
arrayByAddingObjectsFromArray:
arrayWithObjects:count:
askedToCancelWhileModal
attachmentContentType
attachmentForData:mimeType:fileName:contentID:context:
attachmentUUID
attemptInvitationLinkageForMetaDatas:deliveryIdsToClear:deliveryIdsToSoftClear:inFolderWithId:callback:
attendee
attendeeUUIDs
attendees
attendeesPendingDeletion
autorelease
auxiliaryChangeInfos
backingAccountInfo
beginDownloadingAttachmentWithUUID:consumer:
bestEffortApplyNewFolders:oldFolders:forAccount:shouldCreateFoldersMissingInDB:
bestGuessTimeZoneWithLocalDate:utcDate:
block
blowAwayFolderCache
body
boolValue
busyStatus
cStringUsingEncoding:
cachedOrganizerIsSelfWithAccount:
calAlarmChangeId
calAttachmentChangeId
calAttendeeChangeId
calAttendeePendingStatus
calAttendeeStatus
calCloseDatabaseForAccountID:save:
calDatabaseForAccountID:
calEvent
calEventChangeId
calEventServerId
calOpenDatabaseAsGenericClientForAccountID:
calOpenDatabaseForAccountID:clientID:
calRecurrenceChangeId
calSaveDatabaseForAccountID:
calUnitTestMergedRequestsBlock
calendarAvailabilityRequestFinishedWithError:
calendarAvailabilityRequestReturnedResults:
calendarItemExternalRepClasses
cancelCalendarAvailabilityRequestWithID:
cancelDownloadingInstance:error:
cancelPendingPreflightRequest
cancelTask:
cancelTaskWithID:
categories
cdEntityName
changeId
changeSet
changeTracking
changeTrackingClientID
changeTrackingID
changeType
changedItem
class
cleanUpFilesForAccountWithId:
clearFolderAdditionForFolderUUID:folderID:forAccount:
clearFolderChangeForFolderID:forAccount:
clearFolderIdsForPersistentPushWithClientID:
clearReminderChangesForFolderID:forAccount:
clientID
code
combinedDateWithYMDFrom:HMSFrom:componentDatesTimezone:
commitChangesToStore
companyName
compare:
compareToken:error:
complete
completionDate
component:fromDate:
componentsJoinedByString:
conciseDescription
conformsToProtocol:
connectionManager:handleEvent:
connectionManager:handleEvent:context:
consumerFinishedInvitationActionsForEventWithUID:
consumerForTask:
contactStoresByFolderId
contactWithABRecord:serverID:
contactsFolderWithId:successfullyPushedActions:
containsPostponedActions
convertLineEndingsTo:
copy
copyLocalObjectFromId:
copyMessageStringWithPlainTextString:vCalMethod:vCalAttachmentData:fromAddress:toAddresses:date:subject:outMessageID:
copyOfAllLocalObjectsInContainer
copySelfAttendeeGeneratedIfNecessaryWithLocalEvent:forAccount:
count
countByEnumeratingWithState:objects:count:
createMessageWithPlainTextDocumentsAndAttachments:headers:
createMessageWithString:headers:
currentChangeTokenWithError:
currentHandler
currentKeepAliveInterval
currentMode
currentPolicyKey
currentRunLoop
currentStyle
currentThread
currentlySyncingFolderIds
daIsImmutable
da_newGUID
dataUsingEncoding:
dataclass
dataclasses
date
dateByAddingTimeInterval:
dateCompleted
dateComponents
dateWithCalendarFormat:timeZone:
dateWithTimeIntervalSinceReferenceDate:
dayOfMonth
dayOfTheWeek
dayOfWeek
dayOfWeek:weekNumber:
daysOfTheMonth
daysOfTheWeek
debugDescription
defaultCenter
defaultContactsFolder
defaultContainerIdentifierForDADataclass:
defaultEventsFolder
defaultNotesFolder
defaultQueue
defaultStore
defaultToDosFolder
delegate
deleteChanges:
deleteFolder:forAccount:
deleteFromContainer:
deleteNoteRegardlessOfConstraints:
deleteReminder:forFolderWithId:forAccount:
deleteStore:
deletedItemsFolder
deletedListsInChangeSet
deletedRemindersInChangeSetForFolderID:
deliveryItemFolderId
deliveryItemServerId
description
destID
destinationContainerId
deviceDidWake
dictionary
dictionaryRepresentationForASSettingTask
dictionaryWithObjects:forKeys:count:
displayAccount
displayName
domain
downloadFinishedError:
downloadProgressDownloadedByteCount:totalByteCount:
drainContainer
drainSuperfluousChanges
dropPowerAssertionsForGroupIdentifier:
dueDateComponents
earlyPingEnabled
email
emailAddress
emailAddresses
emailResponse
enabledDataclassesBitmask
enabledForDADataclass:
enqueueNotification:postingStyle:coalesceMask:forModes:
entityName
error
errorWithDomain:code:userInfo:
event
eventByMergingInEvent:account:
eventByMergingInLosingEvent:account:
eventCalendarsByFolderId
eventExceptionWithCalEvent:originalEvent:account:
eventUID
eventWithCalEvent:serverID:account:
eventsFolders
exceptionDate
exceptionStartTime
exceptions
existingTaskManager
externalIdentifier
externalIdentifierForMarkedForDeletionObject
externalModificationTag
fetchAttachmentTask:completedWithStatus:dataWasBase64:error:
fetchAttachmentTask:receivedData:ofContentType:
fetchAttachmentsWithItemOperations
fetchAuxiliaryChangeInfosOfType:withChangeObject:error:
fetchChangesSinceLastConsumed
fetchHistoryAfterToken:error:
fetchListIncludingMarkedForDeleteWithObjectID:error:
fetchListWithObjectID:error:
fetchListsWithError:
fetchReminderIncludingConcealedWithObjectID:error:
fetchReminderWithExternalIdentifier:error:
fetchReminderWithObjectID:error:
fetchRemindersWithError:
fillOutMissingExternalIdsForAccountID:
finishWithInvitationBatch:
firstDayOfTheWeek
firstDayOfWeek
firstName
firstObject
folder
folderCache
folderContentsUpdate:
folderForID:
folderHierarchyFailedToUpdate:withStatus:andError:
folderHierarchySuccessfullyUpdated:withNumChangedFolders:
folderHierarchyUpdateNotification:
folderHierarchyUpdateRequireChangedFoldersNotification:
folderID
folderId
folderIdToSequentialFailureCount
folderIdToSequentialServerErrorCount
folderIdsForPersistentPush
folderIdsForPersistentPushForClientID:
folderIdsForPersistentPushForDataclasses:clientID:
folderIdsThatExternalClientsCareAbout
folderItemSyncRequestLock
folderLocalUpdateTask:completedWithStatus:error:updatedFolder:newSyncKey:completionBlock:
folderName
folderSyncTask:completedWithStatus:error:foldersChanged:newSyncKey:
folderType
folderWithId:
foldersAddedInChangeSet
foldersChangedInChangeSet
foldersContainingReminderChangesInChangeSet
foldersForFolderIDs:andDataclasses:
foldersTag
foldersUnderFolderWithID:
forwardMeeting:withServerId:withInstanceId:withFolderId:toEmailAddresses:withAttendeeUUIDs:consumer:
forwardedAttendeeUUIDs
forwardedAttendees
frequency
fromFolder
fullOrganizerString
getCFRunLoop
getDAExceptionObjectWithLocalItem:originalEvent:account:
getDAObjectWithLocalItem:serverId:account:
getFetchingAutomaticallyState
getFolderIdsForAccount:
getIdFromLocalObject:
getResponse
getTombstoneEndTimeForEvent:
getTrackingStateWithError:
handleFailureInMethod:object:file:lineNumber:description:
hasOccurrenceInTheFuture
hasRemoteChanges
hash
heartbeat
highestSequenceNumber
hourOfDay
icsUserAddress
importance
inboxFolder
includeExceptionsInParent
init
initForMessageUUID:
initFreeBusyQueryWithStartDate:endDate:emailAddresses:
initMoveRequestWithMessage:fromFolder:toFolder:
initRecurrenceRuleWithObjectID:accountID:reminderID:frequency:interval:firstDayOfTheWeek:daysOfTheWeek:daysOfTheMonth:monthsOfTheYear:weeksOfTheYear:daysOfTheYear:setPositions:end:
initWithAccount:
initWithAccount:policyKey:
initWithAccount:reminderStore:
initWithAccountPersistentUUID:
initWithArray:
initWithBackingAccountInfo:
initWithBase64EncodedData:options:
initWithCalEvent:originalEvent:account:
initWithCalEvent:serverID:account:
initWithCalFrameworkString:
initWithCapacity:
initWithConnectionClass:delegate:delegateQueue:serviceIdentifier:
initWithContainer:changeTrackingID:accountID:
initWithCount:
initWithData:encoding:
initWithDateComponents:
initWithDeliveryItemFolderId:deliveryItemServerId:instanceDate:meetingResponse:eventUID:responseComment:responseRequested:proposedStartTime:proposedEndTime:
initWithEmailAddress:
initWithFileDescriptor:closeOnDealloc:
initWithFireDate:interval:target:selector:userInfo:repeats:
initWithFolder:hasRemoteChanges:isInitialUberSync:
initWithFolderID:
initWithFolderType:serverID:parentID:displayName:localID:
initWithHeartbeat:folders:oldHeartbeat:oldFolders:
initWithInteger:
initWithItemChangeType:changedItem:serverId:
initWithItemChangeType:changedItem:serverId:instanceId:
initWithItemChangeType:changedItem:sourceContainerId:sourceServerId:destinationContainerId:
initWithKey:status:result:
initWithMessage:messageID:messageType:originalMessageID:instanceId:originalFolderID:originalLongID:replaceMime:
initWithMode:options:reason:
initWithObjects:
initWithParentToDo:
initWithPreviousSyncKey:
initWithResponseItems:
initWithStore:
initWithTimeIntervalSinceNow:
initWithUUIDString:
initWithValue:type:
initWithYear:month:day:hour:minute:second:timeZone:
insertObject:atIndex:
instanceID
instanceId
intValue
integerForKey:
integerId
integerValue
interval
invalidate
isAppleInternalInstall
isDefault
isDeleted
isEnabledForDataclass:
isEphemeralMultiUser
isEqual:
isEqualToDate:
isEqualToSet:
isEqualToString:
isFatPipe
isFirstSync
isFolderExistsWithId:forAccount:
isHotmailAccount
isInitialSync
isInitialUberSync
isKindOfClass:
isMainThread
isMemberOfClass:
isMonitoring
isMyInvite
isOofSupported
isOrganizerUpdate
isPluggedIn
isResyncAfterConnectionFailed
isResyncAfterServerError
isShuttingDown
isSkippedDetachment
isTombstoneEndTimeInFuture
isTruncated
itemChangeType
lastChangeTokenForAccountID:
lastConsumedChangeToken
lastConsumedDate
lastName
lazyDeletedListsInChangeSet
lazyDeletedRemindersInChangeSetForFolderID:
length
list
loadClientIDs
loadLocalItemWithAccount:
localAddedFoldersForAccount:
localChangeForFolder:finishedWithStatus:andError:completionBlock:
localChangedReminderActionsForFolderId:forAccount:
localDeletedFoldersForAccount:
localFileName
localMovedReminderActionsForFolderWithId:forAccount:
localTimeZone
localUUID
localUnsyncedReminderActionsForFolderId:forAccount:
localizedDescription
localizedStringForKey:value:table:
location
lock
markListAdditionConsumedForFolderUUID:folderID:
markListChangeConsumedForFolderID:
markReminderChangesConsumedForFolderID:
matchedRecord
mcBackingPayload
meetingResponseFinishedWithStatus:error:successfulResponses:failedResponses:
meetingResponseForAccount:
meetingResponseForEmail
meetingResponseTask:completedWithStatus:error:
mergedFreeBusy
messageData
messageDidSendWithContext:
messageDidSendWithContext:sentBytesCount:receivedBytesCount:
messageIDHeaderInFortyBytesOrLess
messageWriter:willEncodeHeaders:forMimePart:
messageWriter:willGenerateHeadersForMimePart:
middleName
minusSet:
minuteOfHour
modifiedListsInChangeSet
monitorFolder:
monitorFolderWithID:
monitorFoldersWithIDs:
monthOfYear
mutableCopy
name
newDataHandlerForDataclass:container:changeTrackingID:accountID:
newObjectID
newlyAddedAccount
nextObject
noteCloseDBAndSave:
noteDB
noteIntegerIds
noteOpenDB
noteSaveDB
noteServerIds
noteStoreObjectIdsByFolderId
noteWithLocalNoteObject:serverID:account:
notesAsString
notesFolderWithId:failedToSyncWithStatus:error:
notesFolders
notesForIntegerIds:
notesForServerIds:
notificationWithName:object:userInfo:
null
numLocalFolderUpdatesInFlight
numberWithInt:
numberWithInteger:
numberWithUnsignedInt:
numberWithUnsignedInteger:
objectAtIndexedSubscript:
objectEnumerator
objectForKey:
objectForKeyedSubscript:
objectID
objectIDWithUUID:
observeReachabilityWithBlock:
occurrences
oldFolders
openDB
ordinalityOfUnit:inUnit:forDate:
organizer
organizerEmail
origRequest
outstandingFolderRequests
parentClientID
parentFolderId
parentID
peekAddedListsInReminderDB
peekUndeletedListsInReminderDB
pendingLocalAddedFoldersForAccount:
performMoveRequests:consumer:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
persistentUUID
personPredicateWithGroup:source:account:
personPredicateWithValue:comparison:forProperty:
pingPowerAssertionUUID
pingTask:completedWithStatus:error:resultFolders:resultMaxFolders:resultHBInterval:
policyManagerFailedToUpdatePolicy:
policyManagerUpdatedPolicy:
policyValues
postNotificationName:object:userInfo:
predicateShouldContinue:
predicateShouldContinue:afterFindingRecord:
predicateShouldContinue:afterFindingRecord:metadata:
predicateShouldContinue:afterFindingRecord:moreComing:
preferredDaysToSyncDidChange
preferredEventDaysToSync
preflighter
preflighter:error:
preflighter:needsComplianceWithMCFeatures:perAccountPolicies:
preflighterAccountOnlyRemoteWipeRequestResponseAcknowledged:
preflighterAccountOnlyRemoteWipeRequested:
preflighterRemoteWipeRequestResponseAcknowledged:
prepareFetchAttachmentTask:
primarySMTPAddress
priority
processDAFolderChange:withCompletionBlock:
processMeetingRequestDatas:deliveryIdsToClear:deliveryIdsToSoftClear:inFolderWithId:callback:
proposedStartTime
protocol
provideChangeTrackingForAccountID:clientName:
purgeAttendeesPendingDeletionForAccountID:
pushedMoveRequests
queuedTasks
rangeOfString:
rangeOfString:options:
readDataOfLength:
reason
reattainPowerAssertionsForGroupIdentifier:
recurrence
recurrenceEnd
recurrenceEndWithEndDate:
recurrenceEndWithOccurrenceCount:
refreshFolderListRequireChangedFolders:isUserRequested:
registerConcernedABParty:withChangedBlock:
registerConcernedCalParty:forAccountID:withChangedBlock:
registerConcernedNoteParty:withChangedBlock:
registerPreemptiveWaiter:forDataclassLocks:completionHandler:
registerWaiter:forDataclassLocks:completionHandler:
reissuePingFromTimer:
releaseWifiAssertion
relinquishLocksForWaiter:dataclasses:moreComing:
rem_dateComponentsWithDate:timeZone:isAllDay:
rem_dateWithDateComponents:timeZone:
reminderAccountMissing
reminderDateTime
reminderIsSet
reminderStore
removeAccount:withCompletionHandler:
removeAllObjects
removeAllRecurrenceRules
removeAttachmentForURL:
removeConcernedABParty:
removeConcernedCalParty:forAccountID:
removeConcernedNoteParty:
removeConsumerForTask:
removeFolderIDFromPingBlacklist:
removeFromAllPingHistoryBlacklistForFolderID:
removeFromList
removeFromParent
removeFromPingHierarchyAndHistoryBlacklistForFolderID:
removeHeaderForKey:
removeObject:
removeObjectAtIndex:
removeObjectForKey:
removeObjectsInArray:
removeObserver:name:object:
removeReminderChangeNotificationsForAccount:
renameOnCollision
requestAgentStopMonitoringWithCompletionBlock:
requestCalendarAvailabilityForStartDate:endDate:ignoredEventID:addresses:consumer:
requestPolicyUpdate
resetSystemTimeZone
resetWithRequest:completion:
resolveRecipientsTask:completedWithStatus:error:queriedEmailAddressToRecpient:
respondsToSelector:
responseItems
responseRequested
restrictedBoolForFeature:withRestrictionsDictionary:
result
resultsForMessageMove:
resumeManagerWithAction:
resumeMonitoringFolderID:
retain
retainCount
retainWifiAssertion
retrieveAvailability
reverseObjectEnumerator
rrule
saveAccountProperties
saveContainer
saveRequest
saveServerIDToExistingItem
saveSynchronouslyWithError:
saveTrackingState:error:
saveWithLocalObject:toContainer:shouldMergeProperties:outMergeDidChooseLocalProperties:account:
scheduleIdentifier
secondOfMinute
seekToFileOffset:
self
selfAttendeeMeetingResponse
sendEmailForMeetingInvitationAndResponse
sendEmailsForCalEvents:consumer:
sendMailTask:completedWithStatus:error:
sendMessageWithRFC822Data:messageID:outgoingMessageType:originalMessageFolderID:originalMessageItemID:originalMessageLongID:originalAccountID:useSmartTasksIfPossible:sourceApplicationBundleIdentifier:consumer:context:
serverID
serverId
serverIdForCalFrameworkWithParentEvent:
serverUpdatesAttendeeStatusOnEvents
setAbPersonChangeId:
setAccount:
setAccountIdentifier:
setAccountObjID:
setActions:
setAddressListForSender:
setAddressListForTo:
setAttachmentContentType:
setAttachmentName:
setAttendee:
setAttendeeUUIDs:
setAuthor:
setBlock:
setBody:
setBodyParameter:forKey:
setCalAlarmChangeId:
setCalAttachmentChangeId:
setCalAttendeeChangeId:
setCalEvent:
setCalEventChangeId:
setCalRecurrenceChangeId:
setCalUnitTestMergedRequestsBlock:
setCategories:
setChangeId:
setChangeSet:
setChangeTracking:
setChangeType:
setClassification:
setClientID:
setClientWinsOnSyncConflict:
setCloneCompletedRecurrentRemindersAtSave:
setComplete:
setCompleted:
setCompletionDate:
setComponents:options:
setConsumer:forTask:
setContactStoresByFolderId:
setContainer:
setContainsPostponedActions:
setContext:
setCount:
setCurrentlySyncingFolderIds:
setCutype:
setDaIsImmutable:
setDataclass:
setDateCompleted:
setDayOfMonth:
setDayOfWeek:
setDeadOccur:
setDefaultStore:
setDelegate:
setDisableEarlyFire:
setDoNotSendBody:
setDtend:
setDtstamp:
setDtstart:
setDueDate:
setDueDateComponents:
setEmailResponse:
setEnabled:forDADataclass:
setEventCalendarsByFolderId:
setEventUID:
setEventsNumberOfPastDaysToSync:
setExceptionDate:
setExdate:
setExternalIdentifier:
setExternalModificationTag:
setFilterDays:
setFirstDayOfWeek:
setFolderIdToSequentialFailureCount:
setFolderIdToSequentialServerErrorCount:
setFolderIdsForPersistentPush:clientID:
setFolderIdsForPersistentPushAdded:deleted:clientID:
setFolderIdsThatExternalClientsCareAbout:
setFolderIdsThatExternalClientsCareAboutAdded:deleted:foldersTag:
setFolderItemSyncRequestLock:
setFoldersAddedInChangeSet:
setFoldersChangedInChangeSet:
setFoldersContainingReminderChangesInChangeSet:
setForcedAllDay:
setForwardedAttendeeUUIDs:
setForwardedAttendees:
setGetters:
setHasRemoteChanges:
setHeader:forKey:
setHighestSequenceNumber:
setImportance:
setImportedICSData:
setInstanceID:
setInteger:forKey:
setInterval:
setIsInitialSync:
setIsMonitoring:
setIsMyInvite:
setIsOrganizerUpdate:
setIsResyncAfterConnectionFailed:
setIsResyncAfterServerError:
setIsShuttingDown:
setIsSkippedDetachment:
setKeepAliveGracePeriod:
setLastConsumedChangeToken:
setLast_modified:
setLocalFileHandle:
setLocalFileLength:
setLocalFileName:
setLocalItem:
setLocalUUID:
setLocation:
setMatchedRecord:
setMaximumKeepAliveInterval:
setMeetingResponseForEmail:
setMessageID:
setMethod:
setMinimumKeepAliveInterval:
setMoreLocalChangesAvailable:
setName:
setNoteStoreObjectIdsByFolderId:
setNotes:
setNumLocalFolderUpdatesInFlight:
setObject:forKey:
setObject:forKeyedSubscript:
setOldFolders:
setOutstandingFolderRequests:
setParentClientID:
setPartstat:
setPingPowerAssertionUUID:
setPolicyKey:policyValues:
setPositions
setPowerOptimizationsForExpensiveNetworkingDisabled:
setPreservedActions:
setPreviousSyncKey:
setPrimarySMTPAddress:emailAddresses:
setPriority:
setProdid:
setProperty:forName:
setPushedActions:
setPushedMoveRequests:
setRecurrence:
setRecurrence_id:
setReminderAccountMissing:
setReminderDateTime:
setReminderIsSet:
setReminderStore:
setRenameOnCollision:
setRequireChangedFolders:
setRsvp:
setSafeToPing:
setServerID:
setServerId:
setSetters:
setShouldNotRetry:
setShouldUseOpportunisticSockets:
setSinceToken:
setSkippedActions:
setSourceApplicationBundleIdentifier:
setStartDateComponents:
setStartTime:
setSubject:
setSubtype:
setSyncAnchor:
setSyncWhenReachable:
setTimeZone:
setTitle:
setTombstoneEndTime:
setType:
setUTCDueDate:
setUTCStartTime:
setUntil:
setUpToToken:
setValue:forKey:
setWasUserInitiated:
setWillUpdate:
setWithArray:
setWithObject:
setWriteAttachmentError:
settingsRequestFinishedWithResults:status:error:
settingsTask:completedWithStatus:error:response:
sharedConnection
sharedGateKeeper
sharedInstance
sharedManager
sharedPowerAssertionManager
sharedReminderKitHelper
sharedRunLoop
sharedWifiAssertionManager
shouldCancelTaskDueToOnPowerFetchMode
shouldClientScheduleReconnectDueToFailure
shouldFixOnDiskDeviceId
shouldSavePropertiesForFolderPathsThatClientsCareAbout
shutdown
sinceToken
skippedActions
sniffableTypeForFolder:
sortUsingFunction:context:
sourceContainerId
sourceServerId
standardUserDefaults
startDateComponents
startDateForCalFramework
startPreflight
startTime
stateString
status
stopManager
stopMonitoringFolderWithID:
stopMonitoringFoldersWithIDs:
stopObservingReachability
store
storeDidChangeNotificationName
storeForExternalId:
storeForObjectID:
stores
string
stringByAppendingFormat:
stringWithFormat:
stringWithUTF8String:
submitExclusiveTask:
submitIndependentTask:
submitQueuedTask:
substringFromIndex:
substringToIndex:
superclass
supportsSettingsCommand
suspendMonitoringFoldersWithIDs:
syncAnchor
syncEndedForStoreWithExternalID:withError:
syncFolderHierarchyWithConsumer:requireChangedFolders:context:
syncFolderIDs:forDataclasses:isUserRequested:
syncKeyForFolderWithId:forAccount:
syncLocallyChangedFolder:consumer:completionBlock:
syncResultForContactsFolder:newTag:previousTag:newSyncToken:actions:results:changeIdContext:isInitialSync:moreAvailable:moreLocalChangesAvailable:pushedActions:
syncResultForEventsFolder:newTag:previousTag:actions:results:changeIdContext:isInitialSync:moreAvailable:moreLocalChangesAvailable:pushedActions:rejectedServerIds:
syncResultForNotesFolder:noteContext:newTag:previousTag:actions:results:changeSet:notesToDeleteAfterSync:isInitialSync:moreAvailable:moreLocalChangesAvailable:
syncResultForToDosFolder:newTag:previousTag:actions:results:changeIdContext:isInitialSync:moreAvailable:moreLocalChangesAvailable:pushedActions:rejectedServerIds:
syncSnoozeEvents
syncStartedForStoreWithExternalID:
syncStoreIdentifier
synchronize
synchronizeContactsFolder:previousTag:previousSyncToken:actions:highestIdContext:isInitialUberSync:isResyncAfterConnectionFailed:previousTagIsSuspect:moreLocalChangesAvailable:consumer:
synchronizeEventsFolder:previousTag:actions:highestIdContext:isInitialUberSync:isResyncAfterConnectionFailed:moreLocalChangesAvailable:consumer:
synchronizeNotesFolder:noteContext:previousTag:actions:changeSet:notesToDeleteAfterSync:isInitialUberSync:isResyncAfterConnectionFailed:moreLocalChangesAvailable:consumer:
synchronizeToDosFolder:previousTag:actions:highestIdContext:isInitialUberSync:isResyncAfterConnectionFailed:moreLocalChangesAvailable:consumer:
systemTimeZone
taskID
taskManager
taskStatusForExchangeStatus:
taskWithFolder:previousSyncKey:completionBlock:
tearDown
timeInterval
timeIntervalSinceDate:
timeIntervalSinceNow
timeIntervalSinceReferenceDate
timeZone
timeZoneForSecondsFromGMT:
timeZoneWithName:
title
titleAsString
toDosFolders
toFolder
transactionId
truncateFileAtOffset:
type
uidForCalFramework
uidForResponseEmailWithTimeZone:
uidWithoutExceptionDate
unarchivedObjectOfClass:fromData:error:
unarchivedObjectOfClasses:fromData:error:
undeletedListsInChangeSet
undeletedRemindersInChangeSet
unionSet:
unlock
unregisterWaiterForDataclassLocks:
until
upToToken
updateAccount:
updateAccountWithAccountID:completion:
updateAttachmentsForAccountID:
updateExtenalIDForFolder:forAccount:
updateExtenalIDForReminder:forFolderWithId:forAccount:
updateList:
updateOofSettingsWithParams:consumer:
updateSyncKey:forFolderWithId:forAccount:
updatedProperties
useEventIdsInMeetingResponse
useInstanceIdForException
useSmartMailTasks
userInfo
usernameWithoutDomain
utcDueDate
utcStartTime
uuid
value
valueForKey:
verifyDefaultFolderId:forAccount:
verifyExternalIdsForAccountID:
visibleFolders
waiterID
wasUserInitiated
weekNumber
weekOfMonth
wipeServerIds
writeData:
writeInviteToCalDBCreateAsRejected:defaultCalendar:account:
zone
SignificantTimeChangeNotification
mailto:%@
ASAccountFolderHierarchyExternallyChangedNotification
v8@?0
<!ExceptionDate!>
ASAgent.m
This method does not support reminders!
ASAgent_FolderContentsSync.m
This method does not handle reminders!
Task lost its folderId
Reminders are not handled in this method!
%@%@%@
v20@?0q8B16
eventNotFound
MEETING_RESPONSE_FAILURE_TITLE
DataAccess
MEETING_RESPONSE_FAILURE_BODY
Must only have one dataclass in move responses
-[ASAgent(FolderContentsSync) _fireWaitingFolderItemSyncRequests]
Attempted to queue a sync request for a folder with no folder id: %@
Got unexpected change type %ld
v40@?0@"NSString"8@"NSString"16q24@"NSError"32
attempted to queue a sync request for a folder with no folder id: %@
attachment fetch task must have a valid attachment UUID.
^{__CFDictionary=}24@?0^v8^v16
Person
Group
^{__CFDictionary=}24@?0^{CalDatabase={__CFRuntimeBase=QAQ}i^{CPRecordStore}^{CalEventOccurrenceCache}^{CalScheduledTaskCache}^{__CFDictionary}^{__CFDictionary}{os_unfair_lock_s=I}II^{__CFArray}^{__CFString}^{__CFArray}ii^{__CFString}^{__CFURL}^{__CFString}^{__CFString}Qiii@?{_opaque_pthread_mutex_t=q[56c]}B^{__CFArray}^{__CFArray}^{__CFArray}^{__CFArray}@BB^{__CFSet}@@@i@@@*IIiBBBBBB}8^v16
Event
Todo
-//Apple Inc.//iPhone 3.0//EN
%@:%@
ForcedHBI
v16@?0@"NSNotification"8
dataaccessd_ping_power_assertion-%@
ASDaemonAccount.m
We should never generate a new ping task in repsonse to a cancellation, and the cancellation callback should nil out the _pingTask pointer.
Last ping HBI %d
_foldersToMonitorById: %@
_folderIdsWithUnacknowledgedPings: %@
_busyFolderIds: %@
_pingBlacklistFolderIds: %@
_pingHistoryBlacklistFolderIds: %@
ASFolders
ASFoldersSyncKey
We should not get an ObjectAlreadyExists error for anything but a FolderCreate task.  Task was %@
 %lu
com.apple.MobileAddressBook
com.apple.mobilecal
com.apple.reminder
com.apple.mobilenotes
%s should be on DAThread, instead on thread %@
-[ASDaemonAccount _refirePingAfterDelay:withGrowthAction:]
this timer shouldn't fire if we've got a ping task.
folderID
-[ASDaemonAccount connectionManager:handleEvent:]
-[ASDaemonAccount _fixUpTimers]
We should never ask to generate a new ping when we've got an outstanding one.
LastGoodPingHeartBeat
-[ASDaemonAccount suspendMonitoringFoldersWithIDs:]
-[ASDaemonAccount resumeMonitoringFolderID:]
 resync after connection failure
com.apple.reminders
Must only have one dataclass in move requests
Must have at least one dataclass in moved objects
%a, %d %b %Y %H:%M:%S %z
Only free busy tasks are issued from dataccessd in resolve recipients requests
MEETING_RESPONSE_ACCEPTED
MEETING_RESPONSE_TENTATIVE
MEETING_RESPONSE_DECLINED
MEETING_RESPONSE_REPLY
multipart
mixed
alternative
text
calendar
utf-8
charset
METHOD
text/calendar
meeting.ics
X-MICROSOFT-CDO-ALLDAYEVENT
%@ %@
FREE
TENTATIVE
BUSY
X-MICROSOFT-CDO-INTENDEDSTATUS
Both of folderId (%@) and serverID (%@) should be non-nil
com.apple.mobilemail
DAAttachmentXXXXXX
conciseDescription
DA_POLICY_COMPLIANCE_WARNING
com.apple.eas.account
v12@?0i8
DA_POLICY_FAILURE_TITLE
DA_POLICY_FAILURE_BUTTON_TITLE
Exchange server requested device wipe.
v20@?0B8@"NSError"12
not 
ASDataHandlers.m
Generic data handler does not support Reminders!
com.apple.exchangesyncd
ESReminderKitHelper.m
Someone registered themselves for the Reminders notification more than once: %@
REMStore was not created!
v24@?0B8B12@"NSError"16
__untitled__
v36@?0q8^{__CFArray=}16^{__CFArray=}24B32
Change array counts mismatch! OwningID count:%lu, dates count:%lu, changeTypes count:%lu, sequenceNumbers count:%lu
OwningID count and Email count mismatch! OwningID count:%lu, Email count:%lu
-[ASAgent(ChangeGatherer) _copyCalendarItemActionsInContainer:existingActions:dataHandler:wantPreserveActions:skippedDetachments:changeContext:]
ASAgent_ChangeGatherer.m
[dh dataclass] == DADataclassEvents
changeIdNumber
oldContainerIdNumber
oldExternalId
markedForDeletion
reminderIDsMergeableOrdering
reminders
resolutionTokenMap
oldExternalIdentifier
Creating AB store for DAFolder %@
Creating cal calendar for DAFolder %@
Strike that, there's a pending delete for that folder.  Doing nothing
Creating Exchange Notes account in db for account id %@
Not saving Exchange Notes account for account id %@, because it doesn't have any stores.
Creating Exchange Notes store for DAFolder %@
Deleting AB store for DAFolder %@
Asked to delete source with syncStoreIdentifier %@ folderId %@.  But that doesn't exist in the db
Deleting cal calendar for DAFolder %@
Deleting Note store for DAFolder %@
Caching folders for dataclasses %lx
Found an exchange contact store, with storeId %@
No known contact folder with id %@. folderHierarchy is %@
We ended up with a _contactStoresByFolderId of %@
Found an exchange calendar with externalId %@
No known calendar folder with id %@. folderHierarchy is %@
We ended up with a _eventCalendarsByFolderId of %@
Changing email address from %@ to %@
DADataclassEvents: Could not retreive / create an exchange store in the calendar store
Found an exchange reminder list with externalId %@
No known reminder folder with id %@. folderHierarchy is %@
Found an exchange note store with external id %@
No known note folder with id %@. folderHierarchy is %@
We ended up with a _noteStoreObjectIdsByFolderId of %@
Doing best-effort match of AB folders
Not deleting calendar with id %d, as it has a pending add
Deleting calendar with local id %d, external id %@, calTitle %@, as we couldn't find an exchange folder for it
Not adding event calendar with external id %@, as it has a pending delete
ReminderSupport: _reminderBestEffortApplyNewFolders
Unknown folder id: %@
syncing email accounts isn't supported via DataAccess framework
GAL searching has no folders to sync
discarding unknown bits set in sync request: %lx
network unreachable during folder sync. Waiting for reachability to signal a retry.
ASAgent folderHierarchySuccessfullyUpdated: oldFolders is %@, currentFolders is %@ isFirstSync %d
ASAgent folderHierarchySuccessfullyUpdated: deleting folder %@, because its id %@ wasn't in my map of %@
Failed to send folder change to server with status %ld error %@
changed folder %@ finished with status %ld and error %@, but I can't find the completion block for it!
ProcessMeetingRequests: account not enabled for event class
Verifying search store is present
Account not enabled for contacts, marking search store as disabled
Account not enabled for contacts search, so whacking the search store
Found an extra search store.  Toss it
reachability indicates that the network is reachable.  We're going to retry our folder sync.
Start monitoring %lu mail folders for client: %@
No mail folders to monitor for client: %@
_syncKeyForFolderWithId Calendar containing folder with folder ID %@ not found
_syncKeyForFolderWithId Calendar external tag %@ for folder ID %@
Attempted to set sync key %@ for folder with id %@.  But that events folder doesn't have a corresponding calendar
_setSyncKey Calendar external tag %@ for folder ID %@
Attempted to set sync key %@ for folder with id %@.  But that contacts folder doesn't have a corresponding store
Attempted to set sync key %@ for folder with id %@.  But that notes folder doesn't have a corresponding store
Invoking CalDatabaseCopyEventWithExternalIDInCalendar with serverID: %@, instead of using UID
Did not find an event with serverID %@. Try searching with UID %@
Found %ld events with the same UID %@. 
Found one event with UID %@. This event already has an external id. Not what we are looking for.
Found one event with the same UID %@ and empty server ID. Keeping it.
Found more than one event with the same UID %@ and empty server ID. Not touching them. Creating duplicate events.
Folder with id %@ and title %@ has failed to sync %d time(s) in a row
Can't queue a retry sync, as we no longer have a folder with id %@
Remove a pending request since it contains postponded actions for a failed request. Removing request %@
%@ Unrecoverable error %ld
Well, we tried twice, but couldn't connect to the server for this request.  Dropping this on the floor.  Task = %@
Connection error, but this is the first failure for this task, so trying again.  Task = %@
Server error, retry with sync key 0
User is out of disk space on the Exchange server.  We should probably put up a warning for this case
We synced a folder that no longer exists.  Gonna update my hierarchy now
Unhandled error (%ld) from Folder Items Sync Task
Failed: %ld, %@
Received an add from Exchange for an event that we already knew about!  We're going to merge these events, and ignore the incoming event %@
Not considering event %@ for duplicates, since it's paired with a delete for an event with an identical serverid
Received an add from Exchange for an item that we already knew about!  We may be about to start a dupe war with Exchange.  Exchange Item %@
Received a mod from Exchange for an item we didn't already have.  Dropping this mod on the floor.  Exchange Item %@
adding %@
updating %@
saved %@, server id %@, clientID %@
Add of object %@ over local item with id %d resulted in keeping some local properties.  Queueing sync to server
Dropping the delete of %@ on the floor, as we have an add or mod with the same server ID in this set of incoming changes
Dropping the delete of %@ on the floor, as it's still linked to an invitation in the trash
Clearing change index %d
Clearing note changes: had change URIs %@, clearing changes %@
After draining the container with id %@ and dataclass %lx, that container disappeared
Actions were %@, are now %@
Do not send invitation email because event no longer exist in local DB %@
Do not send invitation email because event is not invitation from me
Could not save local container, dataclass is %lx
Fail to save initial sync results or save sync key. Stop monitoring Reminder folder %@.
Dropping server action, because it had a belay-that-modify action associated with it.  Server action %@
Had a belay-that-action daaction, but no corresponding server action for id %@
More local changes are available. Will issue another sync request.
Do not issue subsequent sync request due to error.
_finishWithInvitationEvent, for event with UID %@ expectedResponse of %d, was my invite %d is still invite %d
Found one event with UID %@.
Invoking CalDatabaseCopyEventWithUniqueIdentifierInStore for localEvent since there is only one event with this UID
Found %ld events with the same UID %@. Pick one using server ID.
Found local event using server ID %@.
Invoking CalDatabaseCopyEventWithUniqueIdentifierInStore
Found local event using event UID %@.
Invoking CalDatabaseCopyEventWithUniqueIdentifierInStore for localEvent when finishing invatation batch.
Meeting response for event %@ with UID %@ failed with error %ld
Invoking CalDatabaseCopyEventWithUniqueIdentifierInStore in finishing meeting response
Self attendee not found
Exception %@: %@
Meeting response was previously not found. Not going to tell user about the failure
Setting kEventNotFound for the event %@ with UID %@
localEvent for responseItem with UID %@ not found.
Meeting response was successful for event with UID %@
Found local event using cal event ID %@.
Found local event using delivery item server ID %@.
Found %ld events with the same UID, unable to distinguish them. UID %@.
Invoking CalDatabaseCopyEventWithUniqueIdentifierInStore for parentLocalEvent
parent ASEvent is %@, exception event is %@
Heard back from MeetingResponse: Not emailing about event %@, as the originator requested no responses
Not sending meeting response email about event %@. Protocol version %@
Not sending meeting response email. Walk through all events with matching UID to clear the pending status.
MeetingResponse was successful, but I can no longer find an event with uid %@
Unhandled error (%ld) from Move Items Task
Draining changes because move items task had error %ld.  task %@
Draining pending sync requests because move items task had error %ld.  task %@
Our exchange store went missing, so releasing locks for EVENTS, as a guess
really syncing request %@
Found a sync request for the same folder.  Merging in %@
Returning early, no reminder changes to sync to server
Asked to sync folder with id %@ and dataclass %lx, but I have no matching container
Was told to inject changes for folder with id %@, but that doesn't exist.  Clearing those changes
external change, folder %@, dataclass %lx
Collected %lu changes from local DB
returning early, as we have a folder change with no remote changes, and no local changes
Couldn't fit all db actions in one request, will batch
putting request %@ in for the gate
%s: asked to sync folder request %@, but that has no server id.  Dropping this sync on the floor
A request containing postponed actions will not be synced. Request: %@
Appending sync request %@
sync request %@ had old actions %@, new actions %@, combined actions %@
Ignoring change of calendar with local id %d, as it doesn't contain items of my dataclass (%ld)
Looking at hierarchy change with id %d type %d exchangeId %@
Will drop local change to folder %@, as its our default folder, and we shouldn't muck with that
Will drop non-interesting folder change for %@ %@
Have a delete for a non-existent folder.  Will drop delete request. %@ %@
Dropping collapsed changes with ids %@
Acting on folder change with type %ld item id %d external id %@, change indices %@
Not syncing change as its folder went missing. Type %lu item id %d external id %@ dataclass 0x%lx
Handling daemon backed local folder change. Type %lu item id %d external id %@ dataclass 0x%lx
An error (%@) occurred while downloading the attachment. %@ is not saved.
Exception while converting attachment file: %@
Cannot acquire the gatekeeper lock. The attachment %@ is not saved.
The gatekeeper lock has been granted. Beginning save of attachment %@
Couldn't save attachment file in the database for attachment %@
Attachment has been saved. Releasing gatekeeper lock
Couldn't get an attachment to set our downloaded file on
Cannot acquire the gatekeeper lock. Download task for attachment %@ does not start.
Couldn't get a store or database to clear AddressBook changes
Clearing %@ changes in store %d to index %d
Couldn't get a calendar or database to clear changes
Clearing %@ changes in calendar %d to index %d
Disabling early fire for Exchange account %@
Setting _delayedPingTimer to nil
Invoking _cancelPingTask
[ASDaemonAccount dealloc] - Tearing down PCConnectionManager and shutting down.
Folder %@ added to the ping blacklist
Folder %@ added to the ping history blacklist
Folder %@ removed from the ping blacklist
Remove folder hierarchy from ping history blacklist
Clearing folder hierarchy ping history, after a successful sync
Remove from ping no change blacklist
Clearing ping no change history, after a successful sync
Folder %@ removed from the ping history blacklist
Clearing folder %@ from ping history, after it has a successful sync
reacting to changed folder %@ with change type %lu
Original folderCache %@
Discarding folder [%@] with the same server ID [%@] and parent ID [%@]
Resulting folderCache %@
No support for locally modifying containers of dataclass %lx
A gmail-as-activesync account received a 403 for a folder sync.  If this is a new device, please change to using a gmail account instead.
Folder change count: %lu
New folder cache due to local update: %@
Unrecognized folder dataclass: %ld
Invoking _refirePingAfterDelay
_delayedPingTimer is %@
Not going to ping, because there is no run loop mode to schedule our timer on
Creating _delayedPingTimer
Invoking setSafeToPing
ping task is %@, and _pingTask task is %@. They should be the same.
Ignoring response for old ping task %@
Ping task status %ld, resultHBInterval: %d
Setting _pingTask to nil.
Not refiring Ping request because it was canceled.
Refiring Ping request because it was canceled due to task manager modal hold.
Create no change history for no change responses.
Refresh no change history for no change responses. Discard old data.
Update no change ping count to %d
Ping request has more than 10 no change responses since %@. Adding it to black list. User must manually refresh to get it to push again.
Force fully specified ping since there were more than 5 ping responses with no changes in last 2 minutes.
Create ping history for folder %@.
Update ping history for folder %@. New count is %d.
Folder %@ has more than 5 changes in ping history, without a successful sync. Adding it to black list. User must manually refresh to get it to push again.
Received Ping response requiring folder hierarchy sync.  Gonna update folder hierarchy now
Create ping history for folder hierarchy.
Refresh ping history for folder hierarchy. Discard old data.
Update ping history for folder hierarchy to count %d
Folder hierarchy has more than 10 changes since %@ in ping history. Adding it to black list. User must manually refresh to get it to push again.
Received status 3 (Ping command request omitted required parameters) from server for Ping request.
Received status 111 (ServerErrorRetryLater) from server for Ping request.
PingTask: unhandled status of %ld
Remove from ping no change blacklist, after a ping response with status other than DAStatusNoChanges
Clearing ping no change history, after a ping response with status other than DAStatusNoChanges
Reissuing Ping request after 60 second delay
%s invoked: mgr: %@, reason:%d
Told to poll, but we're in manual PC mode.
%s cancelling ping task and reissuing with maintain, PC event was %d
Start fetching in automatically mode for account %@. Set automatic fetching state
%s cancelling ping task, syncing all folders, and maintaining heartbeat, as I'm polling
%s cancelling ping task and reissuing with shrink
%s style changed to %d.
%s pcManager callback out to lunch, event is: %d
Canceling task because conditions for on-power mode no longer exist (wi-fi)
Canceling task because conditions for on-power mode no longer exist (charging)
In %s, we had an outstanding _delayedPingTimer.  Likely because a ping was queued after we woke, but before we were told we woke
_pingTask is %@. It should be nil.
Asked to ping, but we're not currently pushing.  Not going to ping
Not going to ping because server couldn't update folder hierarchy
Not going to ping because server is rapidly returning no change responses
Not including folder %@ to ping task because it is black listed
Not including folder %@ to ping task because it is history black listed
Not including folder %@ to ping task because it is with unacknowledged ping
Not including Reminder folder %@ to ping task because REMAccount is not ready yet
Adding folder %@ to ping task
PHMGetCurrentHeartbeatInterval returned %d, No Ping for you
Creating _pingTask with %lu ping folders
ping issued
monitoring folder %@, _foldersToMonitorById = %@, _busyFolderIds = %@
unmonitoring folder %@ - %@
Can't monitor folder with id %@, I don't know about that one.  Folders %@
marking folder as busy: %@
%s: Warning, unable to find folder for id %@
marking folder with id %@ as not busy, _busyFolderIds (%@)
%s: warning, unable to find busy folder for id %@.  _busyFolderIds is (%@)
Daemon setting folder ids to be monitored added:%@
deleted:%@
tag:%@
Dropping request to add folder that external clients care about.  Client's folder tag (%@) doesn't match daemon's: (%@)
Trying to set folderIdThatExternalClientsCareAbout for folder we don't know about. ID = %@
Daemon setting folder ids to be persistently monitored added:%@
deleted:%@
Trying to set folderIdsForPersistentPush for folder we don't know about. ID = %@
Daemon clearing folder ids to be persistently monitored
Have a modify action nixed by a belay action for server id %@.  Dropping the modify
Syncing Contacts folder with id %@, previous key %@%@, actions %@
_ASSyncTaskAndMeetingResponseCommandsFromDAEventActions, actions is %@
_invitationActionsInFlight is currently %@
Event has status %d, pending status %d, meeting response %d
Dropping request to sync %@, as it's a un-acted-upon invitation and we're trying to do something other than modify it
Do not respond to a canceled meeting for server id %@. Dropping the modify
Not syncing add of cancelled event that's not back by an exchange event.  Event %@
Dropping request to email about %@, as I currently have an invitation action in flight for it
Dropping request to do a MeetingResponse for %@, as I currently have an invitation action in flight for it
Not emailing about event %@, as I'm sending a meeting response for someone in their chain
Not emailing about event %@, as the originator requested no responses
Alarm! We have a command of type %lu, but the event isn't an ASEvent, rather it has class %@, and is %@
Not syncing command %@, as I'm sending a meeting response for someone in their chain
_ASSyncTaskAndMeetingResponseCommandsFromDAEventActions, commands are %@, meetingResponseActions are %@ emails are %@
Meeting response task %@ completed with status %ld error %@ results %@
Stripping exception id from eventId: %@
Asked to respond to a meeting request.  But the DAEvent has no local event? DAEvent: %@
Retrieved delivery item id from eventAction, id: %@
Retrieved delivery item id from parent event, id: %@
Retrieved delivery item id from event, id: %@
Asked to respond to a meeting request, but the local cal event is missing one or both of folder id %@ or item id %@
Syncing Calendar folder with id %@, previous key %@%@
Syncing ToDo folder with id %@, previous key %@%@
Syncing Notes folder with id %@, previous key %@%@
'ignoredEventID' supplied but it will not be used.
'nil 'requestID' given.  Will not cancel any calendar avilability requests.
We are sending an email for an invitation with response %d.  That's not right.  Dropping it.
We are sending an email for an invitation with response %d.  That's not right.  Dropping this email on the floor.  Event %@
Sending .ics attachment for event %@.  Attachment body
Couldn't cons up a cancel-all email for event %@
Couldn't cons up a cancel-some email for event %@
Couldn't cons up a request email for event %@
Couldn't cons up a response email for event %@, not going to reply
Detected an event that had the attendees ripped out from under it.  Not going to email about event %@
Not sending an email for the following invitation, because it only occurs in the past.  Invite %@
Not sending emails about events. Protocol version %@
ProcessMeetingRequests: attempting invitation linkage
Unable to decode meeting request: %@
Ignoring meeting request %@ because I have a more recent one
ProcessMeetingRequests: calling back with invitation linkage success
ProcessMeetingRequests: waiting for gate keeper
ProcessMeetingRequests: did not acquire gate keeper
Clearing out invite with folder id %@ server id %@, wasSoftDelete = %d
While clearing out invite, I found an invite with event status %d, attendee status %d
Settings task submitted
%@:Settings task %@ completed with status %ld, error %@, response: %@
Settings task %@ UserInformation Get returned failure status %ld
User's email address set to primary SMTP address %@, or collection %@
Ignored getter item: %@, key: %d, result: %@
Getter item %@, key %d, returned unsuccessful status %ld
Exchange server does not support updating OOF settings. Protocol version %@
Exchange server does not support retrieving OOF settings. Protocol version %@
Account %@ is a hotmail account and does not support OOF
Account %@ supports OOF: %@
Remove folder hierarchy from ping history blacklist afetr a successful folder sync
Clearing folder hierarchy ping history after a successful folder sync
Couldn't create a temporary file with the format %@
Downloading attachment to %@
'nil 'requestID' given.  Will not cancel any attachment downloading requests.
Exception writing attachment data to file: %@
Unexpected ASTask class: %@
Getting a new server policy
EDU Mode : PreFlighting MCRestrictions %@
Asking MC to comply with new policy
Applying restriction dictionary to MC
MCComplianceResult was %d
Device Set to Multi-User Mode. Can not Apply EAS Policies
Waiting for user to comply with new restrictions for account with persistent id %@
MCPasscodeChangedNotification fired, re-appyling restriction dictionary
Unable to register for message %@: %d
Could not put up alert telling the user the account is being disabled.  Got response flags 0x%lx
********* disabling * %@
Error setting client restrictions gave result %d: %@, %@
EDU Mode: Remote Wipe requested but we are not going to enforce it.
You asked for it, we're remote wiping now.  You probably will never ever see this log message
Not only that, but we're gonna brick you, too!
The account only remote wipe was %@successful, error %@
preflighter got error %@
There's no support for a data handler for dataclass %ld
Registering reminder change notification for account: %@
ReminderConversion: Received reminders database did change.
ReminderConversion: DADREMLocalDBWatcher: DATransaction starting, ID: %@
Found added folder with local id %@
Found pending added folder with local id %@
Not deleting reminder list with id %@, as it has a pending add
Deleting reminder list with local id %@, external id %@, title %@, as we couldn't find an exchange folder for it
ReminderSupport: reminder list %@ is deleted
ReminderSupport: reminder list %@ is updated with external ID: %@ and name: %@
ReminderSupport: reminder list change with folder title: %@ and ID: %@
ReminderSupport: missing reminder account %@, when adding folders.
ReminderSupport: reminder list added with folder title: %@ and ID: %@
ReminderSupport: reminder list with object ID: %@ and ID: %@
Fetch account failed for accountID: %@, with error: %@
Setting reminderAccountMissing to TRUE for account %@ and asking ReminderKit to set up the REMAccount
Received callback from ReminderKit for account %@
ReminderKit has set up the REMAccount for accountID: %@
ReminderKit has updated the REMAccount for accountID: %@
ReminderKit encountered an error while adding the REMAccount for accountID %@: %{public}@
Setting reminderAccountMissing to FALSE for account %@
Fetching reminder lists returned nil {folderID: %@, error: %@}
Fetching reminder returned nil {ObjectID: %@, error: %@}
Fetching list returned nil {ObjectID: %@, error: %@}
Fetching reminder returned nil {serverID: %@, error: %@}
Error getting reminders: %@
Could not get reminders
_syncKeyForFolderWithId Reminder containing folder with folder ID %@ not found
_syncKeyForFolderWithId Reminder external tag %@ for folder ID %@
Fail to delete a reminder folder because Reminder list doesn't exist. Folder ID: %@
Fail to delete a reminder folder because Reminder account doesn't exist. Account ID: %@
Updating sync key %@ for reminder folder ID:%@
Fail to set sync key for reminder folder because Reminder list doesn't exist. Account ID: %@, folder ID:%@
Fail to set sync key for reminder folder because Reminder account doesn't exist. Account ID: %@, folder ID:%@
Couldn't create reminder save request
ServerID missing from task. Failed to initial sync reminder {task: %@}
During initial sync, merge task with existing local reminder with the same external id {task: %@, externalIdentifier: %@}
Found existing reminder during intial sync %@
Adding new reminder during intial sync %@
Folder %@ does not existing when adding reminder %@
Account %@ does not existing when adding reminder %@
Setting arbitrary week start to %d
Recurrence rule has invalid frequency %@
SET recurrence <- %@
ServerID missing from task. Failed to modify reminder {task: %@}
Merge task with existing local reminder {task: %@, externalIdentifier: %@}
Adding a new reminder {task: %@, externalIdentifier: %@}
Could not get list. Failed to modify reminder {task: %@, folderID: %@}
Could not fetch account. Failed to modify reminder {task: %@, account: %@}
ServerID missing from task. Failed to delete reminder {task: %@}
Could not fetch reminder. Failed to delete reminder {task: %@, externalIdentifier: %@}
Could not fetch reminder list. Failed to delete reminder {task: %@, folderID: %@}
Could not fetch reminder account. Failed to delete reminder {task: %@, account: %@}
Could not get reminder. Failed to modify reminder {task: %@, externalIdentifier: %@}
ReminderSupport: The saveSynchronouslyWithError returned with error %@
ReminderSupport: Get local added folders for account %@
ReminderSupport: Could not add folder for a REMList with local ID: %@, for account %@
ReminderSupport: Peek local added folders for account %@
ReminderSupport: Get local modified folders for account %@
ReminderSupport: Could not modify folder for a REMList with local ID: %@, external ID: %@, for account %@
ReminderSupport: Get local deleted folders for account %@
ReminderSupport: Could not delete folder for a REMList with local ID: %@, external ID: %@, for account %@
ReminderSupport: Collected %lu updated reminder changes for folder: %@, for account %@
ReminderSupport: Collected %lu undeleted reminder changes for folder: %@, for account %@
ReminderSupport: Collected %lu lazy deleted reminder changes for folder: %@, for account %@
ReminderSupport: Collected %lu deleted reminder changes for folder: %@, for account %@
ReminderSupport: Modifying a reminder with local ID: %@, external ID: %@, folder ID: %@, account %@
ReminderSupport: Adding a reminder with local ID: %@, external ID: %@, folder ID: %@, account %@
ReminderSupport: Could not modify reminder with local ID: %@
Could not fetch reminder account for account: %@
Could not get list for folderID: %@
Error getting reminders for folderID: %@, error: %@
Could not get reminders for folderID: %@
Unable to decode ToDo properties: %@
Hourly recurrence is not supported {recurrenceRule: %@}
Malformed Monthly recurrence (weekDays has multiple weekOfMonths).  reminder is %@
Malformed Monthly recurrence (setPosition is out of bounds (%ld)).  reminder is %@
Malformed Monthly recurrence (has dayOfWeek but no setPosition).  reminder is %@
Malformed Monthly recurrence (both daysOfTheMonth and daysOfTheWeek are set).  reminder is %@
Malformed Yearly recurrence  (need either (byMonthDayDays && byMonthMonths && !byDayDays) OR (!byMonthDayDays && byMonthMonths && byDayDays) OR (!byMonthDayDays && !byMonthMonths && !byDayDays).  reminder is %@
UPDATE {objectID: %@, task.serverID: %@}
SET externalIdentifier <- %@
SET notes <- %@
SET title <- %@
SET startDateComponents <- %@
SET dueDateComponents <- %@
SET completionDate <- %@
SET completed <- %@
SET priority <- %@
SET alarms <- [%@]
Removing all alarms from reminderChangeItem {objectID: %@}
SET alarms <- nil
SET importedICSData <- %@
SET recurrenceRules <- nil
_addChange for type %lu, changedItemId %@ changeId %@ addedIds %@ modifiedIds %@ deletedIds %@ pseudoDeletedIds %@, changeIdsToClear %@
A preset action for a sync request wanted a modify, but we have no server id.  Dropping the modify of %@
A preset action for a sync request couldn't load the associated local event in the db action %@
A preset action for a sync request didn't have an associated local event in the db action %@
A preset action for a sync request had change type %lu, which is unsupported.  Dropping that action
For a change with local id %d, found server id %@ in the change table, and server id %@ in the db.  Using the db-based id
Looking at change with id %d type %d exchangeId %@
Had a change of type %lu for an event that no longer exists.  Clearing that change (change id %@)
Discarding non-significant modifications to event with local ID: %d, Exchange ID:%@
No syncing changes with event id %d because the self attendee status is pending
No syncing changes with event id %d because the changes are by changing invitation status only
Resetting change with id %d and type add to type modify
Resetting modify invitation change on event with id %d to EAS delete
Found %ld entries in exception date changes table
Found %ld entries in participant changes table
Attendee with UUID %@ is receipient of forwarded meeting with id %d 
No changes in calendar
A deleted detachment is not ASEventException object, action %@
A preset action for a sync request didn't have an associated local changed item in the db action %@
Skipping local modify for event with id %@ as it's calendar (id %d) doesn't match the container we're interested in (id %d)
This is a newly added event, and user is not the organizer. This should not happen. Ignore this event.
Exchange server does not support adding a new event where user is not the organizer. Dropping that action with id: %@
Do not sync events added by snooze to Exchange server. Dropping that action with id: %@
Do not include event body when syncing events added by snooze to Exchange server
Skipping a newly created exception with modified parent event. Will sync it in a subsequent request.
Unable to save a newly created exception with modified parent event. The detachment will not be synced to the server.
Skipping a newly created exception in newly created parent event. Will sync it in a subsequent request.
Unable to save a newly created exception in newly created parent event. The detachment will not be synced to the server.
Dropping an addition without local item
Dropping and clearing local modify for event with id %@ as it's calendar (id %d) doesn't match the container we're interested in (id %d)
Dropping an action because event is modified by acknowledging. id: %@
Do not sync parent event modified by snooze. Dropping that action with id: %@
Skipping a modified detachment with modified parent event. Will sync it in a subsequent request.
Unable to save a modified detachment with modified parent event. The detachment will not be synced to the server.
Do not include event body when syncing events modified by invitation status to Exchange server
Do not include event body when syncing events without significant changes
Dropping a modification without Exchange ID
Skipping a deleted detachment with modified parent event. Will sync it in a subsequent request.
Unable to save a deleted detachment with modified parent event. The detachment will not be synced to the server.
Dropping a deletion without Exchange ID
Dropping a deleted detachment with parent also deleted
Skipping a pseudo deleted detachment with modified parent event. Will sync it in a subsequent request.
Unable to save a pseudo deleted detachment with modified parent event. The detachment will not be synced to the server.
Drooping a detachment without a parent.
Dropping a paeudo deletion without Exchange ID
Dropping a paeudo deletion without local item
Dropping a deleted detachment from exception date with parent also deleted
Skipping a deleted detachment from exception date with modified parent event. Will sync it in a subsequent request.
Unable to save a deleted detachment from exception date with modified parent event. The detachment will not be synced to the server.
Dropping a deleted detachment from exception date with missing exception date
Dropping a deleted action without serverID, action %@
_addChange for move of calendarItem id %@, changeId %@ calendarItemIdsToMoveActions %@, calendarItemChangeIdsToClear %@
Looking at a move command, I couldn't come up with the old calendar.  old calendar id %d
Looking at a move command, I couldn't come up with the old calendar external id.  old calendar id %d
Looking at a move command, I couldn't come up with the new calendar external id.  new calendar id %d
consed deletes are %@
_addChange for type %lu, changeId %@ addedIds %@ modifiedIds %@ deletedIds %@
Unknown change type %@ from change object %@
Looking at change with id %d type %lu exchangeId %@
ReminderSupport: Trying to initialize ESReminderChangeTrackingHelper without an account.
ReminderSupport: Failed to get REMChangeTracking for accountID: %@
ReminderSupport: Found an existing change tracking state for {accountID: %@, lastSyncToken: %@, lastSyncDate: %@}
ReminderSupport: Due to error or nil current change token, couldn't initialize tracking state for accountID: %@
ReminderSupport: Creating a new change tracking state object for accountID: %@
ReminderSupport: Ignoring prior changes. Initializing a new change tracking state for {accountID: %@, nowToken: %@}
ReminderSupport: Initial change tracking state is saved for accountID: %@
ReminderSupport: Failed to save an initialization of tracking state with error {accountID: %@, error: %@}
ReminderSupport: Failed to get change tracking state with error {clientID: %@, error: %@}
ReminderSupport: The change tracking state does not exist {clientID: %@}
ReminderSupport: Found and fetched change tracking state for {clientID: %@, lastSyncToken: %@, lastSyncDate: %@}
ReminderSupport: Not fetching changes because we have unprocessed changes for account %@
ReminderSupport: Failed to fetch change history with error {clientID: %@, token: %@, error: %@}
ReminderSupport: Fetched truncated change history.  {clientID: %@, token: %@}
ReminderSupport: Not processing local changes. Had problem getting change history for account %@
ReminderSupport: Could not fetch changes because change tracking client does not exist for account %@
ReminderSupport: Change set contains added list: %@, for account %@
ReminderSupport: Change set contains list: %@, for account %@. But it is not found in reminder store!
ReminderSupport: Change set updates contains undeleted list: %@, for account %@.
ReminderSupport: Change set contains modified list: %@, with external ID: %@, for account %@
ReminderSupport: Change set contains deleted list with local ID: %@, external ID: %@, for account %@
ReminderSupport: Change set contains deleted list: %@, for account %@. But it is not found in reminder store!
ReminderSupport: Change set contains lazy deleted folder with external ID: %@, local ID: %@, for account %@
ReminderSupport: Change set contains lazy deleted list: %@, for account %@. But it is not found in reminder store!
ReminderSupport: Change set contains reminder: %@, for account %@. But it is not found in reminder store!
ReminderSupport: Change set contains deleted reminder: %@, for account %@. But it is not found in reminder store!
ReminderSupport: fetchAuxiliaryChangeInfosOfType returns error %@
ReminderSupport: Found reminder list external identifier: %@, for change object: %@
ReminderSupport: Marking change consumed for account %@, lastConsumedChangeToken %@
ReminderSupport: Failed to save tracking state for account %@, error %@
ReminderSupport: Saved change tracking state for account %@, lastConsumedChangeToken %@
ReminderSupport: Not updating change tracking state, because no newer change token in this history {token: %@, clientID: %@, account: %@}
ReminderSupport: Not updating change tracking state, because no upto token in this history {clientID: %@, account: %@}
ReminderSupport: Not updating change tracking state, because no change tracking {account: %@}
ReminderSupport: Marking reminder changes consumed for account %@, folder %@
ReminderSupport: Marking reminder folder change consumed for account %@, folder %@
ReminderSupport: Marking reminder folder addition consumed for account %@, folderUUID %@
ReminderSupport: All changes are consumed for account %@
ReminderSupport: Changes not yet consumed for account %@, reminders in folders %@, folder additions: %@, folder changes:%@
ASAgent
ASFolderHierarchyUpdateConsumer
NSObject
ASFolderHierarchyLocalChangeConsumer
DAPreferredDaysToSyncDidChangeObserver
FolderContentsSync
DAContactsUpdateConsumer
DAActionConsumer
DAEventsUpdateConsumer
DAMessageSendConsumer
DAToDosUpdateConsumer
DANotesUpdateConsumer
DADataclassLockWatcher
ABPredicateDelegate
DAMessageMoveRequestConsumer
ConciseDescription
ASDaemonAccount
PCConnectionManagerDelegate
ASFolderChangedHistory
ASDaemonPolicyManager
ASPolicyPreflighterDelegate
ASDataHandler
ASContactDataHandler
ASEventDataHandler
ASNoteDataHandler
ESReminderKitHelper
ASAgentFolderHierarchyContext
ChangeGatherer
ESReminderChangeTrackingHelper
v24@0:8@16
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16Q24
v40@0:8@16q24@32
v32@0:8@"ASAgentFolderHierarchyContext"16Q24
v40@0:8@"ASAgentFolderHierarchyContext"16q24@"NSError"32
v48@0:8@16q24@32@?40
v48@0:8@"ASFolder"16q24@"NSError"32@?<v@?@"NSString"@"NSString"q@"NSError">40
v16@0:8
@24@0:8@16
^v16@0:8
v24@0:8^v16
^v32@0:8@16q24
^v24@0:8@16
@20@0:8B16
v24@0:8q16
B36@0:8@16@24B32
v20@0:8B16
@32@0:8@16q24
v36@0:8@16q24B32
v48@0:8^{__CFArray=}16@24q32@40
v48@0:8@16@24q32@40
v32@0:8@16@?24
v56@0:8@16@24@32@40@?48
v24@0:8B16B20
v24@0:8@?16
@44@0:8@16^v24q32B40
@40@0:8@16^v24q32
v32@0:8@16@24
i16@0:8
v20@0:8i16
@?16@0:8
@"NSMutableDictionary"
@"NSMutableArray"
@"NSMutableSet"
@"NSLock"
B32@0:8@16^v24
^v36@0:8@16B24^v28
@36@0:8@16B24@28
v36@0:8@16@24B32
v28@0:8@16B24
v32@0:8@16q24
v40@0:8q16@24@32
B84@0:8@16@24B32@36@44@52^@60r^^v68^B76
B68@0:8@16@24q32B40@44@52@60
B60@0:8@16@24B32@36@44@52
B48@0:8@16q24@32@40
v112@0:8@16@24@32@40@48@56B64B68q72@80@88@96@104
B104@0:8@16@24@32@40@48@56B64B68@72@80@88@96
v100@0:8@16q24@32@40@48@56@64B72B76B80@84@92
v92@0:8@16@24@32@40@48@56@64B72B76B80@84
v92@0:8@16@24@32@40@48@56B64B68B72@76@84
v92@0:8@16@24@32@40@48@56@64@72B80B84B88
B44@0:8^v16@24i32B36B40
v48@0:8q16@24@32@40
B24@0:8i16i20
v28@0:8q16B24
B56@0:8q16^i24^Q32^@40^{__CFArray=}48
B52@0:8i16Q20@28^{__CFArray=}36q44
B32@0:8@16Q24
v40@0:8@16@24@32
v44@0:8@16q24B32@36
v40@0:8q16@24@"NSError"32
v92@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSArray"48@"NSArray"56@"ContactFolderItemsSyncContext"64B72B76B80@"NSArray"84
v32@0:8@"NSString"16@"NSArray"24
v40@0:8@16Q24Q32
v92@0:8@"NSString"16@"NSString"24@"NSString"32@"NSArray"40@"NSArray"48@"EventsFolderItemsSyncContext"56B64B68B72@"NSArray"76@"NSSet"84
v48@0:8q16@"NSError"24@"NSArray"32@"NSArray"40
v24@0:8@"NSArray"16
v92@0:8@"NSString"16@"NoteContext"24@"NSString"32@"NSString"40@"NSArray"48@"NSArray"56@"NSSet"64@"NSSet"72B80B84B88
v40@0:8@"NSString"16q24@"NSError"32
B40@0:8@16^v24@32
B36@0:8@16^v24B32
B44@0:8@16^v24@32B40
B24@0:8@"NSPredicate"16
B32@0:8@"NSPredicate"16^v24
B40@0:8@"NSPredicate"16^v24@"NSDictionary"32
B36@0:8@"NSPredicate"16^v24B32
B44@0:8@"NSPredicate"16^v24@"NSDictionary"32B40
q20@0:8c16
v28@0:8@16i24
v36@0:8@16i24@28
v28@0:8@"PCConnectionManager"16i24
v36@0:8@"PCConnectionManager"16i24@"NSDictionary"28
^{__CFString=}16@0:8
B32@0:8@16@24
v56@0:8@16q24@32@40@48
v36@0:8@16B24@28
B40@0:8@16@24@?32
v64@0:8@16q24@32@40@48@?56
v48@0:8@16@24q32@?40
v40@0:8@16@24@?32
v24@0:8f16i20
v56@0:8@16q24@32@40i48i52
B40@0:8@16@24@32
v80@0:8@16@24@32@40@48B56B60B64B68@72
@40@0:8@16@24@32
v68@0:8@16@24@32@40B48B52B56@60
v84@0:8@16@24@32@40@48@56B64B68B72@76
i32@0:8@16@24
i72@0:8@16@24@32@40@48@56@64
@56@0:8@16@24@32@40@48
v48@0:8@16q24@32@40
@20@0:8i16
@76@0:8@16i24@28@36@44@52@60^@68
@32@0:8@16@24
@60@0:8@16i24@28@36@44^@52
v76@0:8@16@24@32@40@48@56@64B72
B76@0:8@16@24@32@40@48@56@64B72
B40@0:8@16@24B32B36
v36@0:8B16@20Q28
v24@0:8Q16
@"ASPingTask"
@"NSCountedSet"
@"ASFolderChangedHistory"
@"PCConnectionManager"
@"NSSet"
@"NSTimer"
@"MFAttachmentComposeManager"
@"NSString"
@"NSDate"
v48@0:8@16@24@32@40
v40@0:8@"ASPolicyPreflighter"16@"NSDictionary"24@"NSDictionary"32
v48@0:8@"ASPolicyPreflighter"16@"NSDictionary"24@"NSDictionary"32@"NSString"40
v24@0:8@"ASPolicyPreflighter"16
v32@0:8@"ASPolicyPreflighter"16@"NSError"24
i24@0:8@16
@"ASAccount"
@"ASPolicyPreflighter"
@48@0:8q16^v24@32@40
q16@0:8
i24@0:8^v16
^v20@0:8i16
B20@0:8B16
@40@0:8^v16@24@32
B44@0:8@16@24@32B40
B48@0:8@16@24@32^@40
B56@0:8@16@24@32@40@48
B48@0:8@16@24@32@40
q32@0:8@16^q24
i24@0:8q16
@24@0:8i16i20
q20@0:8i16
@"REMStore"
@"REMSaveRequest"
@"NSArray"
@28@0:8i16q20
v80@0:8Q16@24@32@40@48@56@64@72
@52@0:8^v16@24@32B40@44
v128@0:8@16i24Q28@36B44^v48@56@64@72@80@88@96@104@112^B120
v128@0:8^v16@24@32@40@48@56@64@72^i80^i88^i96^i104^i112@120
v48@0:8^v16@24^i32@40
v48@0:8^v16@24@32@40
B24@0:8^v16
@60@0:8^v16@24@32B40@44@52
v64@0:8Q16@24@32@40@48@56
@52@0:8@16@24@32B40@44
@"REMChangeSet"
@"REMChangeToken"
@"REMObjectID"
@"REMChangeTracking"
?$$$
DgoD
T@?,C,N,V_block
CalCalendarItemStatus
_addReminderFolders:forAccount:
T#,R
_calUnitTestMergedRequestsBlock
T@"ASPolicyPreflighter",&,N,V_preflighter
_changeTracking
T@"NSDate",&,N,V_startTime
_curReplyMethod
T@"NSMutableArray",&,N,V_outstandingFolderRequests
_isShuttingDown
T@"NSMutableDictionary",&,N,V_eventCalendarsByFolderId
_setLocalDisplayName:forFolder:
T@"NSMutableDictionary",&,N,V_folderIdToSequentialServerErrorCount
account
T@"NSMutableSet",&,N,V_currentlySyncingFolderIds
actions
T@"NSMutableSet",&,N,V_foldersChangedInChangeSet
arrayWithArray:
T@"NSString",&,N,V_pingPowerAssertionUUID
changedObjectID
T@"NSString",R,N,V_accountID
closeDBAndSave:
T@"REMChangeToken",&,N,V_sinceToken
containsObject:
T@"REMChangeTracking",&,N,V_changeTracking
currentCalendar
T@"REMStore",&,N,V_reminderStore
dealloc
TB,N,V_isFirstSync
deviceWillSleep
TQ,R
dueDate
Ti,N,V_count
endTime
URIRepresentation
fetchAccountWithObjectID:error:
UTF8String
folderHierarchy
_ASDayOfWeekFromREMDaysOfWeek:outWeekOfMonth:
fullEmailString
_ASSyncTaskAndMeetingResponseCommandsFromDAEventActions:meetingResponseActions:emailEvents:
importedICSData
_account
initWithStartDate:endDate:type:
_accountObjID
initialSyncReminder:forFolderWithId:forAccount:resultingAction:
_addSimpleChangeForType:changedItemId:addedIds:modifiedIds:deletedIds:collapsedIds:
isEqualToEvent:
_appendFolderHierarchyChangesForFoldersOfDataclasses:
isProxy
_appendSyncRequest:
localFileHandle
_appendSyncRequestForFolders:remoteChanges:
localID
_appendSyncRequestForFoldersOfDataclasses:remoteChanges:
meetingResponse
_attendeeChangesDueToMeetingForwardingInCalendar:eventIdToAttendeeEmails:eventIdToAttendeeUUIDs:dataHandler:
monthsOfTheYear
_busyFolderIds
numberWithBool:
_calBestEffortApplyNewFolders:oldFolders:shouldCreateFoldersMissingInDB:
predicateShouldContinue:afterFindingRecord:metadata:moreComing:
_checkAndMarkChangeConsumed
preflighterRemoteWipeRequested:
_clearOutInviteWithDeliveryFolderId:deliveryServerId:wasSoftDelete:considerInvitedToInvitations:
protocolVersion
_contactStoresByFolderId
registerReminderChangeNotificationsForAccount:withChangedBlock:
_containerHasItems
removeAllAlarms
_copyABActionsInContainer:existingActions:dataHandler:wantPreserveActions:changeContext:
responseComment
_copyCalendarItemMoveActionsInCalendar:dataHandler:deleteActionsByFolderId:
retrieveOofSettingsForConsumer:
_copyExchangeCalendarStore:
searchPeopleWithPredicate:sortOrder:inAddressBook:withDelegate:
_copyExistingCalRecordForEvent:matchOnAttributes:inCalendar:
_copyExistingNoteRecordForNote:matchOnAttributes:inNoteStore:
setDataclasses:
_copyNotesActionsInNoteStore:existingActions:dataHandler:wantPreserveActions:changeSet:
setIsFirstSync:
_currentlySyncingFolderIds
setMessageBody:
_delayedPingTimer
setOccurrences:
_deletedReminderFolderIDsInChangeSet
setSensitivity:
_enqueueNotificationWithName:sourceRunLoop:userInfo:
setWeekOfMonth:
_eventsNumberOfPastDaysToSync
sharedDBWatcher
_exchangeIdForLocalId:inContainer:dataclass:redirectToParent:
storage
_fetchChangeTrackingState
subject
_finishInitialSyncForFolder:dataclass:
trigger
_finishWithInvitationEvent:eventUID:expectedResponse:wasMyInvite:isStillInvite:
updates
_fixUpTimers
userInformation
_folderIdToSequentialFailureCount
.cxx_destruct
_accountIDToChangeTrackingTable
ICSStringFromMethod:
_appendSyncRequest:atBeginning:
T@"ASAccount",W,N,V_account
_cancelPingTask
T@"NSArray",&,N,V_oldFolders
_copyABAccount:
T@"NSLock",&,N,V_folderItemSyncRequestLock
_isOrganizerSelfWithLocalEvent:
T@"NSMutableDictionary",&,N,V_contactStoresByFolderId
_setFolderHierarchyNeedsUpdate:
T@"NSMutableDictionary",&,N,V_folderIdToSequentialFailureCount
abGroupChangeId
T@"NSMutableDictionary",&,N,V_noteStoreObjectIdsByFolderId
accountDidUpdateProtocolVersion
T@"NSMutableSet",&,N,V_foldersAddedInChangeSet
allKeys
T@"NSMutableSet",&,N,V_foldersContainingReminderChangesInChangeSet
bundleForClass:
T@"NSString",R,C
changes
T@"REMChangeSet",&,N,V_changeSet
contactsFolders
T@"REMChangeToken",&,N,V_upToToken
context
T@"REMObjectID",&,N,V_accountObjID
dTStamp
T@?,C,N,V_calUnitTestMergedRequestsBlock
deletes
TB,N,V_isShuttingDown
didReceiveReminderNotification:
T^v,N,V_matchedRecord
endDate
Ti,N,V_numLocalFolderUpdatesInFlight
existingChanges
URLWithString:
fetchListIncludingSpecialContainerWithExternalIdentifier:error:
UUIDString
folders
_ASMonthOfYearFromREMMonthOfYear:
_abBestEffortApplyNewFolders:oldFolders:shouldCreateFoldersMissingInDB:
initWithFormat:
_accountID
initWithString:
_addChangeForType:changedItemId:changeId:addedIdsToChangeId:modifiedIdsToChangeId:deletedIdsToChangeId:pseudoDeletedIdsToChangeId:changeIdsToClear:
inserts
_addedListsInSubset:
isGoogleAccount
_appendReminderSyncRequestForFolders:remoteChanges:
_appendSyncRequestForFolders:
localFileLength
_appendSyncRequestForFoldersOfDataclasses:
localModifiedFoldersForAccount:
_attachmentManager
message
_block
newlyAddedStore
_cacheFoldersForDataclasses:
occurrenceCount
_changeSet
preflighter:successWithMCFeatures:perAccountPolicies:policyKey:
_clearChangeHistoriesWithChangeIdContext:dataclass:inFolderWithId:pushedActions:
proposedEndTime
_closeLocalDBConnectionsWithoutSaving
recurrenceRules
_containerForFolderWithId:dataclass:
release
_convertCalendarAvailabilityType:
removeObserver:
_copyCalendarItemActionsInContainer:existingActions:dataHandler:wantPreserveActions:skippedDetachments:changeContext:
resumeMonitoringFoldersWithIDs:
_copyDefaultExchangeEventsCalendar:
saveFetchingAutomaticallyState:
_copyExistingABRecordForContact:matchOnAttributes:inStore:
seekToEndOfFile
_copyExistingLocalItemForExchangeItem:matchOnAttributes:inContainer:
setAccountType:
_copyICSDateFromDate:timeZone:
setFolderCache:
_count
setMIMESupport:
_dbExternalIdForLocalId:dataclass:
setMonthOfYear:
_deleteList:forAccount:
setPreflighter:
_detectDuplicatedEventFromExchangeEvent:inFolderWithId:isInitialSync:eventServerIDsToDrop:eventServerIDSWithDroppedDeletes:resultingChangeActionsForServer:outEvent:outLocalItem:outDidTouchDB:
setUid:
_eventCalendarsByFolderId
setWithObjects:
_exceptionDateChangesInCalendar:exceptionDateToChangeId:outHighestSequenceNumber:dataHandler:
startMonitoring
_faultInCalendarSubentitiesInCalendar:addedIdsToEventChangeId:modifiedIdsToEventChangeId:deletedIdsToEventChangeId:pseudoDeletedIdsToEventChangeId:localToExchangeIdMap:eventChangeIdsToClear:allAddedDetachmentIds:outRecurrenceId:outAlarmId:outAttendeeId:outAttachmentId:outHighestSequenceNumber:dataHandler:
stringByAppendingPathComponent:
_fethAuxiliaryChangeInfosForReminderChangeObject:
subtype
_finishInitialSyncForToDoFolder:
updateReminder:
_fireWaitingFolderItemSyncRequests
_folderChangeHistory
yearOfCommonEra
_folderIdToSequentialServerErrorCount
_folderIdsWithUnacknowledgedPings
_folderItemSyncRequestLock
_folderItemsSyncTask:failedWithErrorCode:
_foldersAddedInChangeSet
_foldersChangedInChangeSet
_foldersContainingReminderChangesInChangeSet
_foldersToMonitorById
_foldersToSyncGivenResults:
_getHierarchyChangeForDataclass:changedItemId:changeType:externalId:changeTableIndices:
_getReminderSaveRequest
_handleAction:inFolderWithId:dataclass:isInitialSync:resultingChangeActionsForServer:eventServerIDsToDrop:eventServerIDSWithDroppedDeletes:
_handleChangeOnEventWithExchangeId:localId:changeType:eventChangeId:hasSignificantAttributeChanges:container:dataHandler:addedIdsToEventChangeId:modifiedIdsToEventChangeId:deletedIdsToEventChangeId:pseudoDeletedIdsToEventChangeId:eventChangeIdsToClear:allAddedDetachmentIds:localToExchangeIdMap:outShouldSaveDB:
_handleDaemonBackedLocalFolderChangeWithDBChangeIndices:oldFolders:status:error:
_handleLocalReminderFolderChangeWithFolder:oldFolders:status:error:
_handleLocallyChangedFolderWithChangedItemId:changeType:externalId:changeTableIndices:dataclass:
_handleNameCollisionOnAddedFolder:consumer:completionBlock:
_handlePolicyUpdate
_handleReminderChangedFolder:changeType:
_handleSuccessfulFolderChangeForFolders:previousSyncKey:
_handleToDoAction:inFolderWithId:isInitialSync:resultingChangeActionsForServer:eventServerIDsToDrop:eventServerIDSWithDroppedDeletes:
_hasScheduledWake
_hierarchyChangeHistory
_initializeChangeTrackingState
_initializeChangeTrackingStateIfNeeded
_instanceIdFromEventId:
_instanceIdFromIdWithExceptionDate:
_instanceIdFromUniqueId:
_invitationActionsInFlight
_isDetachmentFromEventId:
_isFirstSync
_isHierarchyChangeBlackListed
_isNoChangeBlackListed
_isOrganizerSelfWithEmail:
_isTearingDown
_lastPingFolders
_lastPingHeartBeat
_lazyDeletedReminderFolderIDsInChangeSet
_loadAttributesFromReminder:forAccount:
_loadAttributesFromRemlist:forAccount:
_loadRecurrenceRulesFromReminder:intoTask:forAccount:
_localDeletedReminderActionsForFolderId:forAccount:
_localIdForExchangeId:inContainer:dataclass:
_localLazyDeletedReminderActionsForFolderId:forAccount:
_localModifiedReminderActionsForFolderId:forAccount:
_localUndeletedReminderActionsForFolderId:forAccount:
_localizedStringForResponse:
_markChangesConsumed
_markEventWithLocalIDAsNeedingInvitationEmail:parentId:
_matchedRecord
_modifiedListsInSubset:
_modifiedRemindersInSubset:
_moveItemsTask:failedWithErrorCode:
_newABSourceForDAFolder:
_newCalCalendarForDAFolder:
_newCalendarEntityType
_newNoteSourceForDAFolder:
_newPolicyManager
_nilOutContainersForDataclasses:
_noChangeHistory
_noteAccountObject:
_noteObserver
_noteStoreObjectIdsByFolderId
_noteSyncForFolderWithId:andTitle:finishedWithSuccess:
_notesBestEffortApplyNewFolders:oldFolders:shouldCreateFoldersMissingInDB:
_numLocalFolderUpdatesInFlight
_oldFolders
_openLocalDBConnections
_outstandingFolderRequests
_parentIdFromEventId:
_pcManager
_pendingChangesInReminderDB
_pingBlacklistFolderIds
_pingHistoryBlacklistFolderIds
_pingPowerAssertionIdentifier
_pingPowerAssertionUUID
_pingTask
_pollFolders
_populateChangeItem:forRecurrence:forReminder:forFolderWithId:forAccount:
_populateChangeItem:forReminder:folderWithId:forAccount:
_populateCurrentPolicyWithError:
_preflightEDUModeMCFeatures:
_preflighter
_processReminderNotification:
_pruneFoldersToMonitorOfOrphanedFolders
_queueServerFailureResyncForFolderWithId:isInitialSync:
_reallyApplyMessageDidSendWithContext:
_reallyAttemptInvitationLinkageForMetaDatas:deliveryIdsToClear:deliveryIdsToSoftClear:inFolderWithId:callback:
_reallyFinishInvitationBatch:
_reallyPrepareFetchAttachmentTask:
_reallySendMoves:
_reallySyncFolderHierarchyWithConsumer:requestDataclasses:requireChangedFolders:context:
_reallySyncLocallyChangedFolder:consumer:dataclasses:completionBlock:
_reallySyncRequest:
_recordAddedLists
_recordChangesInChangeSet
_recordDeletedLists
_recordDeletedReminders
_recordLazyDeletedLists
_recordLazyDeletedReminders
_recordModifiedLists
_recordModifiedReminders
_recordReminders:
_recordUndeletedLists
_recordUndeletedReminders
_refirePendingCalendarInvitations
_refirePingAfterDelay:withGrowthAction:
_reissuePingTaskWithGrowthAction:
_remDaysOfWeekFromASDayOfWeek:weekOfMonth:
_remExternalRepresentationClasses
_remListExternalIdentifierForDeletedReminderChangeObject:
_remMonthOfYearFromASMonthOfYear:
_reminderAccountForAccount:
_reminderBestEffortApplyNewFolders:oldFolders:shouldCreateFoldersMissingInDB:
_reminderListWithExternalId:forReminderAccount:
_reminderListWithObjectUUID:forReminderAccount:
_reminderListsForAccount:
_reminderMatchingAttributesInReminder:list:
_reminderSaveRequest
_reminderStore
_reminderWithExternalId:list:
_reminderWithObjectUUID:list:
_removeABSourceForDAFolder:
_removeCalCalendarForDAFolder:
_removeNoteSourceForDAFolder:
_removePostponedRequestForFolderWithId:
_reportFolderHierarchySyncSuccessWithCount:
_reportFolderItemSyncSuccess:forFolderWithID:withItemsCount:
_respondToMeetingsForActions:inFolderWithId:consumer:
_safeToPing
_saveAttachmentDataToDatabaseForTask:
_setChangedItem:
_setForce7BitForUnitTests:
_setSyncKey:forFolderWithId:
_setUpABNotifications
_setUpCalNotifications
_setUpNotesNotifications
_setUpReminderNotifications
_setupReminderAccountForAccount:
_shouldEditNotesSupportOnProtocolChange
_shouldSaveLastKnownProtocolVersion
_sinceToken
_smartMailTask:failedWithErrorCode:error:
_startTime
_stopMonitoringFoldersWithIds:
_stringWithRFC822DataFromEvent:icsMethod:recipients:recipientBareEmails:exceptionDate:outMessageID:
_syncAllContactFoldersWithRemoteChanges:
_syncAllContactsEventsToDosAndNotesFolders
_syncAllEventsFoldersWithRemoteChanges:
_syncAllNotesFoldersWithRemoteChanges:
_syncAllToDosFoldersWithRemoteChanges:
_syncEndedWithError:
_syncKeyForFolderWithId:
_syncKeyForFolderWithId:dataclass:
_syncRequest:
_syncResultForFolder:newTag:previousTag:actions:results:changeIdContext:isInitialSync:moreAvailable:dataclass:resultingChangeActionsForServer:pushedActions:rejectedServerIds:eventsWithPendingInvitationEmails:
_syncResultForToDoFolder:newTag:previousTag:actions:results:changeIdContext:isInitialSync:moreAvailable:resultingChangeActionsForServer:pushedActions:rejectedServerIds:eventsWithPendingInvitationEmails:
_syncStarted
_tearDownABNotifications
_tearDownCalNotifications
_tearDownNotesNotifications
_tearDownPreflighter
_tearDownReminderNotifications
_upToToken
_updateFolderHierarchyRequireChangedFolders:
_updateList:external:name:isDefault:
_updateSyncKey:forToDoFolderWithId:
_verifySearchStore
_wrapperSyncResultForFolder:dataclass:newTag:previousTag:actions:results:changeIdContext:isInitialSync:moreAvailable:moreLocalChangesAvailable:pushedActions:rejectedServerIds:
abCloseDBAndSave:
abDB
abOpenDBWithClientIdentifier:
abPersonChangeId
abProcessAddedRecords
abSaveDB
accountContainsEmailAddress:
accountDescription
accountForAccountId:
accountID
accountObjID
acknowledgeAccountOnlyRemoteWipeWithSuccess:
acknowledgeIntentionToRemoteWipe
acknowledgePolicyCompliance
actionFailed:forTask:error:
activeQueuedTask
activeSyncString
activeSyncStringWithoutSeparators
addAlarmWithTrigger:
addEntriesFromDictionary:
addFolder:forAccount:
addFolderIDToPingBlacklist:
addFolderIDToPingHistoryBlacklist:
addListWithName:toAccountChangeItem:
addObject:
addObjectsFromArray:
addObserver:selector:name:object:
addObserverForName:object:queue:usingBlock:
addOrModifyReminder:forFolderWithId:forAccount:
addPersistentClientWithAccountID:clientID:watchedIDs:
addRecurrenceRule:
addReminderWithTitle:toListChangeItem:
addSourceID:sourceFolder:destinatonFolder:
addStringsToEmailForEventIAmAttending:recipient:stringsToEmail:eventUUIDsToEmail:externalIDs:messageIDsToEmail:eventsDroppedDueToAge:checkEventForNeedingInvite:
addStringsToEmailForEventIOriginated:deletedExceptionOccurrenceDate:stringsToEmail:eventUUIDsToEmail:externalIDs:messageIDsToEmail:eventsDroppedDueToAge:checkEventForNeedingInvite:
addTimer:forMode:
addedAndModifiedRemindersInChangeSet
addedListsInChangeSet
addressBookConstraintsPath
agentWithAccountID:
alarms
allDayEvent
allObjects
allValues
allVisibleNotesInCollection:
allowsReminderOnCompletedTasks
andPredicateWithSubpredicates:
anyObject
appendFormat:
appendString:withQuoteLevel:
applyFilterByTransactionAuthors:isExclusion:
applyRestrictionDictionary:clientType:clientUUID:localizedClientDescription:localizedWarningMessage:complianceBlocking:displayImmediateAlert:limitForUserEnrollment:outRestrictionChanged:outEffectiveSettingsChanged:outError:
archivedDataWithRootObject:
array
arrayByAddingObjectsFromArray:
arrayWithObjects:count:
askedToCancelWhileModal
attachmentContentType
attachmentForData:mimeType:fileName:contentID:context:
attachmentUUID
attemptInvitationLinkageForMetaDatas:deliveryIdsToClear:deliveryIdsToSoftClear:inFolderWithId:callback:
attendee
attendeeUUIDs
attendees
attendeesPendingDeletion
autorelease
auxiliaryChangeInfos
backingAccountInfo
beginDownloadingAttachmentWithUUID:consumer:
bestEffortApplyNewFolders:oldFolders:forAccount:shouldCreateFoldersMissingInDB:
bestGuessTimeZoneWithLocalDate:utcDate:
block
blowAwayFolderCache
body
boolValue
busyStatus
cStringUsingEncoding:
cachedOrganizerIsSelfWithAccount:
calAlarmChangeId
calAttachmentChangeId
calAttendeeChangeId
calAttendeePendingStatus
calAttendeeStatus
calCloseDatabaseForAccountID:save:
calDatabaseForAccountID:
calEvent
calEventChangeId
calEventServerId
calOpenDatabaseAsGenericClientForAccountID:
calOpenDatabaseForAccountID:clientID:
calRecurrenceChangeId
calSaveDatabaseForAccountID:
calUnitTestMergedRequestsBlock
calendarAvailabilityRequestFinishedWithError:
calendarAvailabilityRequestReturnedResults:
calendarItemExternalRepClasses
cancelCalendarAvailabilityRequestWithID:
cancelDownloadingInstance:error:
cancelPendingPreflightRequest
cancelTask:
cancelTaskWithID:
categories
cdEntityName
changeId
changeSet
changeTracking
changeTrackingClientID
changeTrackingID
changeType
changedItem
class
cleanUpFilesForAccountWithId:
clearFolderAdditionForFolderUUID:folderID:forAccount:
clearFolderChangeForFolderID:forAccount:
clearFolderIdsForPersistentPushWithClientID:
clearReminderChangesForFolderID:forAccount:
clientID
code
combinedDateWithYMDFrom:HMSFrom:componentDatesTimezone:
commitChangesToStore
companyName
compare:
compareToken:error:
complete
completionDate
component:fromDate:
componentsJoinedByString:
conciseDescription
conformsToProtocol:
connectionManager:handleEvent:
connectionManager:handleEvent:context:
consumerFinishedInvitationActionsForEventWithUID:
consumerForTask:
contactStoresByFolderId
contactWithABRecord:serverID:
contactsFolderWithId:successfullyPushedActions:
containsPostponedActions
convertLineEndingsTo:
copy
copyLocalObjectFromId:
copyMessageStringWithPlainTextString:vCalMethod:vCalAttachmentData:fromAddress:toAddresses:date:subject:outMessageID:
copyOfAllLocalObjectsInContainer
copySelfAttendeeGeneratedIfNecessaryWithLocalEvent:forAccount:
count
countByEnumeratingWithState:objects:count:
createMessageWithPlainTextDocumentsAndAttachments:headers:
createMessageWithString:headers:
currentChangeTokenWithError:
currentHandler
currentKeepAliveInterval
currentMode
currentPolicyKey
currentRunLoop
currentStyle
currentThread
currentlySyncingFolderIds
daIsImmutable
da_newGUID
dataUsingEncoding:
dataclass
dataclasses
date
dateByAddingTimeInterval:
dateCompleted
dateComponents
dateWithCalendarFormat:timeZone:
dateWithTimeIntervalSinceReferenceDate:
dayOfMonth
dayOfTheWeek
dayOfWeek
dayOfWeek:weekNumber:
daysOfTheMonth
daysOfTheWeek
debugDescription
defaultCenter
defaultContactsFolder
defaultContainerIdentifierForDADataclass:
defaultEventsFolder
defaultNotesFolder
defaultQueue
defaultStore
defaultToDosFolder
delegate
deleteChanges:
deleteFolder:forAccount:
deleteFromContainer:
deleteNoteRegardlessOfConstraints:
deleteReminder:forFolderWithId:forAccount:
deleteStore:
deletedItemsFolder
deletedListsInChangeSet
deletedRemindersInChangeSetForFolderID:
deliveryItemFolderId
deliveryItemServerId
description
destID
destinationContainerId
deviceDidWake
dictionary
dictionaryRepresentationForASSettingTask
dictionaryWithObjects:forKeys:count:
displayAccount
displayName
domain
downloadFinishedError:
downloadProgressDownloadedByteCount:totalByteCount:
drainContainer
drainSuperfluousChanges
dropPowerAssertionsForGroupIdentifier:
dueDateComponents
earlyPingEnabled
email
emailAddress
emailAddresses
emailResponse
enabledDataclassesBitmask
enabledForDADataclass:
enqueueNotification:postingStyle:coalesceMask:forModes:
entityName
error
errorWithDomain:code:userInfo:
event
eventByMergingInEvent:account:
eventByMergingInLosingEvent:account:
eventCalendarsByFolderId
eventExceptionWithCalEvent:originalEvent:account:
eventUID
eventWithCalEvent:serverID:account:
eventsFolders
exceptionDate
exceptionStartTime
exceptions
existingTaskManager
externalIdentifier
externalIdentifierForMarkedForDeletionObject
externalModificationTag
fetchAttachmentTask:completedWithStatus:dataWasBase64:error:
fetchAttachmentTask:receivedData:ofContentType:
fetchAttachmentsWithItemOperations
fetchAuxiliaryChangeInfosOfType:withChangeObject:error:
fetchChangesSinceLastConsumed
fetchHistoryAfterToken:error:
fetchListIncludingMarkedForDeleteWithObjectID:error:
fetchListWithObjectID:error:
fetchListsWithError:
fetchReminderIncludingConcealedWithObjectID:error:
fetchReminderWithExternalIdentifier:error:
fetchReminderWithObjectID:error:
fetchRemindersWithError:
fillOutMissingExternalIdsForAccountID:
finishWithInvitationBatch:
firstDayOfTheWeek
firstDayOfWeek
firstName
firstObject
folder
folderCache
folderContentsUpdate:
folderForID:
folderHierarchyFailedToUpdate:withStatus:andError:
folderHierarchySuccessfullyUpdated:withNumChangedFolders:
folderHierarchyUpdateNotification:
folderHierarchyUpdateRequireChangedFoldersNotification:
folderID
folderId
folderIdToSequentialFailureCount
folderIdToSequentialServerErrorCount
folderIdsForPersistentPush
folderIdsForPersistentPushForClientID:
folderIdsForPersistentPushForDataclasses:clientID:
folderIdsThatExternalClientsCareAbout
folderItemSyncRequestLock
folderLocalUpdateTask:completedWithStatus:error:updatedFolder:newSyncKey:completionBlock:
folderName
folderSyncTask:completedWithStatus:error:foldersChanged:newSyncKey:
folderType
folderWithId:
foldersAddedInChangeSet
foldersChangedInChangeSet
foldersContainingReminderChangesInChangeSet
foldersForFolderIDs:andDataclasses:
foldersTag
foldersUnderFolderWithID:
forwardMeeting:withServerId:withInstanceId:withFolderId:toEmailAddresses:withAttendeeUUIDs:consumer:
forwardedAttendeeUUIDs
forwardedAttendees
frequency
fromFolder
fullOrganizerString
getCFRunLoop
getDAExceptionObjectWithLocalItem:originalEvent:account:
getDAObjectWithLocalItem:serverId:account:
getFetchingAutomaticallyState
getFolderIdsForAccount:
getIdFromLocalObject:
getResponse
getTombstoneEndTimeForEvent:
getTrackingStateWithError:
handleFailureInMethod:object:file:lineNumber:description:
hasOccurrenceInTheFuture
hasRemoteChanges
hash
heartbeat
highestSequenceNumber
hourOfDay
icsUserAddress
importance
inboxFolder
includeExceptionsInParent
init
initForMessageUUID:
initFreeBusyQueryWithStartDate:endDate:emailAddresses:
initMoveRequestWithMessage:fromFolder:toFolder:
initRecurrenceRuleWithObjectID:accountID:reminderID:frequency:interval:firstDayOfTheWeek:daysOfTheWeek:daysOfTheMonth:monthsOfTheYear:weeksOfTheYear:daysOfTheYear:setPositions:end:
initWithAccount:
initWithAccount:policyKey:
initWithAccount:reminderStore:
initWithAccountPersistentUUID:
initWithArray:
initWithBackingAccountInfo:
initWithBase64EncodedData:options:
initWithCalEvent:originalEvent:account:
initWithCalEvent:serverID:account:
initWithCalFrameworkString:
initWithCapacity:
initWithConnectionClass:delegate:delegateQueue:serviceIdentifier:
initWithContainer:changeTrackingID:accountID:
initWithCount:
initWithData:encoding:
initWithDateComponents:
initWithDeliveryItemFolderId:deliveryItemServerId:instanceDate:meetingResponse:eventUID:responseComment:responseRequested:proposedStartTime:proposedEndTime:
initWithEmailAddress:
initWithFileDescriptor:closeOnDealloc:
initWithFireDate:interval:target:selector:userInfo:repeats:
initWithFolder:hasRemoteChanges:isInitialUberSync:
initWithFolderID:
initWithFolderType:serverID:parentID:displayName:localID:
initWithHeartbeat:folders:oldHeartbeat:oldFolders:
initWithInteger:
initWithItemChangeType:changedItem:serverId:
initWithItemChangeType:changedItem:serverId:instanceId:
initWithItemChangeType:changedItem:sourceContainerId:sourceServerId:destinationContainerId:
initWithKey:status:result:
initWithMessage:messageID:messageType:originalMessageID:instanceId:originalFolderID:originalLongID:replaceMime:
initWithMode:options:reason:
initWithObjects:
initWithParentToDo:
initWithPreviousSyncKey:
initWithResponseItems:
initWithStore:
initWithTimeIntervalSinceNow:
initWithUUIDString:
initWithValue:type:
initWithYear:month:day:hour:minute:second:timeZone:
insertObject:atIndex:
instanceID
instanceId
intValue
integerForKey:
integerId
integerValue
interval
invalidate
isAppleInternalInstall
isDefault
isDeleted
isEnabledForDataclass:
isEphemeralMultiUser
isEqual:
isEqualToDate:
isEqualToSet:
isEqualToString:
isFatPipe
isFirstSync
isFolderExistsWithId:forAccount:
isHotmailAccount
isInitialSync
isInitialUberSync
isKindOfClass:
isMainThread
isMemberOfClass:
isMonitoring
isMyInvite
isOofSupported
isOrganizerUpdate
isPluggedIn
isResyncAfterConnectionFailed
isResyncAfterServerError
isShuttingDown
isSkippedDetachment
isTombstoneEndTimeInFuture
isTruncated
itemChangeType
lastChangeTokenForAccountID:
lastConsumedChangeToken
lastConsumedDate
lastName
lazyDeletedListsInChangeSet
lazyDeletedRemindersInChangeSetForFolderID:
length
list
loadClientIDs
loadLocalItemWithAccount:
localAddedFoldersForAccount:
localChangeForFolder:finishedWithStatus:andError:completionBlock:
localChangedReminderActionsForFolderId:forAccount:
localDeletedFoldersForAccount:
localFileName
localMovedReminderActionsForFolderWithId:forAccount:
localTimeZone
localUUID
localUnsyncedReminderActionsForFolderId:forAccount:
localizedDescription
localizedStringForKey:value:table:
location
lock
markListAdditionConsumedForFolderUUID:folderID:
markListChangeConsumedForFolderID:
markReminderChangesConsumedForFolderID:
matchedRecord
mcBackingPayload
meetingResponseFinishedWithStatus:error:successfulResponses:failedResponses:
meetingResponseForAccount:
meetingResponseForEmail
meetingResponseTask:completedWithStatus:error:
mergedFreeBusy
messageData
messageDidSendWithContext:
messageDidSendWithContext:sentBytesCount:receivedBytesCount:
messageIDHeaderInFortyBytesOrLess
messageWriter:willEncodeHeaders:forMimePart:
messageWriter:willGenerateHeadersForMimePart:
middleName
minusSet:
minuteOfHour
modifiedListsInChangeSet
monitorFolder:
monitorFolderWithID:
monitorFoldersWithIDs:
monthOfYear
mutableCopy
name
newDataHandlerForDataclass:container:changeTrackingID:accountID:
newObjectID
newlyAddedAccount
nextObject
noteCloseDBAndSave:
noteDB
noteIntegerIds
noteOpenDB
noteSaveDB
noteServerIds
noteStoreObjectIdsByFolderId
noteWithLocalNoteObject:serverID:account:
notesAsString
notesFolderWithId:failedToSyncWithStatus:error:
notesFolders
notesForIntegerIds:
notesForServerIds:
notificationWithName:object:userInfo:
null
numLocalFolderUpdatesInFlight
numberWithInt:
numberWithInteger:
numberWithUnsignedInt:
numberWithUnsignedInteger:
objectAtIndexedSubscript:
objectEnumerator
objectForKey:
objectForKeyedSubscript:
objectID
objectIDWithUUID:
observeReachabilityWithBlock:
occurrences
oldFolders
openDB
ordinalityOfUnit:inUnit:forDate:
organizer
organizerEmail
origRequest
outstandingFolderRequests
parentClientID
parentFolderId
parentID
peekAddedListsInReminderDB
peekUndeletedListsInReminderDB
pendingLocalAddedFoldersForAccount:
performMoveRequests:consumer:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
persistentUUID
personPredicateWithGroup:source:account:
personPredicateWithValue:comparison:forProperty:
pingPowerAssertionUUID
pingTask:completedWithStatus:error:resultFolders:resultMaxFolders:resultHBInterval:
policyManagerFailedToUpdatePolicy:
policyManagerUpdatedPolicy:
policyValues
postNotificationName:object:userInfo:
predicateShouldContinue:
predicateShouldContinue:afterFindingRecord:
predicateShouldContinue:afterFindingRecord:metadata:
predicateShouldContinue:afterFindingRecord:moreComing:
preferredDaysToSyncDidChange
preferredEventDaysToSync
preflighter
preflighter:error:
preflighter:needsComplianceWithMCFeatures:perAccountPolicies:
preflighterAccountOnlyRemoteWipeRequestResponseAcknowledged:
preflighterAccountOnlyRemoteWipeRequested:
preflighterRemoteWipeRequestResponseAcknowledged:
prepareFetchAttachmentTask:
primarySMTPAddress
priority
processDAFolderChange:withCompletionBlock:
processMeetingRequestDatas:deliveryIdsToClear:deliveryIdsToSoftClear:inFolderWithId:callback:
proposedStartTime
protocol
provideChangeTrackingForAccountID:clientName:
purgeAttendeesPendingDeletionForAccountID:
pushedMoveRequests
queuedTasks
rangeOfString:
rangeOfString:options:
readDataOfLength:
reason
reattainPowerAssertionsForGroupIdentifier:
recurrence
recurrenceEnd
recurrenceEndWithEndDate:
recurrenceEndWithOccurrenceCount:
refreshFolderListRequireChangedFolders:isUserRequested:
registerConcernedABParty:withChangedBlock:
registerConcernedCalParty:forAccountID:withChangedBlock:
registerConcernedNoteParty:withChangedBlock:
registerPreemptiveWaiter:forDataclassLocks:completionHandler:
registerWaiter:forDataclassLocks:completionHandler:
reissuePingFromTimer:
releaseWifiAssertion
relinquishLocksForWaiter:dataclasses:moreComing:
rem_dateComponentsWithDate:timeZone:isAllDay:
rem_dateWithDateComponents:timeZone:
reminderAccountMissing
reminderDateTime
reminderIsSet
reminderStore
removeAccount:withCompletionHandler:
removeAllObjects
removeAllRecurrenceRules
removeAttachmentForURL:
removeConcernedABParty:
removeConcernedCalParty:forAccountID:
removeConcernedNoteParty:
removeConsumerForTask:
removeFolderIDFromPingBlacklist:
removeFromAllPingHistoryBlacklistForFolderID:
removeFromList
removeFromParent
removeFromPingHierarchyAndHistoryBlacklistForFolderID:
removeHeaderForKey:
removeObject:
removeObjectAtIndex:
removeObjectForKey:
removeObjectsInArray:
removeObserver:name:object:
removeReminderChangeNotificationsForAccount:
renameOnCollision
requestAgentStopMonitoringWithCompletionBlock:
requestCalendarAvailabilityForStartDate:endDate:ignoredEventID:addresses:consumer:
requestPolicyUpdate
resetSystemTimeZone
resetWithRequest:completion:
resolveRecipientsTask:completedWithStatus:error:queriedEmailAddressToRecpient:
respondsToSelector:
responseItems
responseRequested
restrictedBoolForFeature:withRestrictionsDictionary:
result
resultsForMessageMove:
resumeManagerWithAction:
resumeMonitoringFolderID:
retain
retainCount
retainWifiAssertion
retrieveAvailability
reverseObjectEnumerator
rrule
saveAccountProperties
saveContainer
saveRequest
saveServerIDToExistingItem
saveSynchronouslyWithError:
saveTrackingState:error:
saveWithLocalObject:toContainer:shouldMergeProperties:outMergeDidChooseLocalProperties:account:
scheduleIdentifier
secondOfMinute
seekToFileOffset:
self
selfAttendeeMeetingResponse
sendEmailForMeetingInvitationAndResponse
sendEmailsForCalEvents:consumer:
sendMailTask:completedWithStatus:error:
sendMessageWithRFC822Data:messageID:outgoingMessageType:originalMessageFolderID:originalMessageItemID:originalMessageLongID:originalAccountID:useSmartTasksIfPossible:sourceApplicationBundleIdentifier:consumer:context:
serverID
serverId
serverIdForCalFrameworkWithParentEvent:
serverUpdatesAttendeeStatusOnEvents
setAbPersonChangeId:
setAccount:
setAccountIdentifier:
setAccountObjID:
setActions:
setAddressListForSender:
setAddressListForTo:
setAttachmentContentType:
setAttachmentName:
setAttendee:
setAttendeeUUIDs:
setAuthor:
setBlock:
setBody:
setBodyParameter:forKey:
setCalAlarmChangeId:
setCalAttachmentChangeId:
setCalAttendeeChangeId:
setCalEvent:
setCalEventChangeId:
setCalRecurrenceChangeId:
setCalUnitTestMergedRequestsBlock:
setCategories:
setChangeId:
setChangeSet:
setChangeTracking:
setChangeType:
setClassification:
setClientID:
setClientWinsOnSyncConflict:
setCloneCompletedRecurrentRemindersAtSave:
setComplete:
setCompleted:
setCompletionDate:
setComponents:options:
setConsumer:forTask:
setContactStoresByFolderId:
setContainer:
setContainsPostponedActions:
setContext:
setCount:
setCurrentlySyncingFolderIds:
setCutype:
setDaIsImmutable:
setDataclass:
setDateCompleted:
setDayOfMonth:
setDayOfWeek:
setDeadOccur:
setDefaultStore:
setDelegate:
setDisableEarlyFire:
setDoNotSendBody:
setDtend:
setDtstamp:
setDtstart:
setDueDate:
setDueDateComponents:
setEmailResponse:
setEnabled:forDADataclass:
setEventCalendarsByFolderId:
setEventUID:
setEventsNumberOfPastDaysToSync:
setExceptionDate:
setExdate:
setExternalIdentifier:
setExternalModificationTag:
setFilterDays:
setFirstDayOfWeek:
setFolderIdToSequentialFailureCount:
setFolderIdToSequentialServerErrorCount:
setFolderIdsForPersistentPush:clientID:
setFolderIdsForPersistentPushAdded:deleted:clientID:
setFolderIdsThatExternalClientsCareAbout:
setFolderIdsThatExternalClientsCareAboutAdded:deleted:foldersTag:
setFolderItemSyncRequestLock:
setFoldersAddedInChangeSet:
setFoldersChangedInChangeSet:
setFoldersContainingReminderChangesInChangeSet:
setForcedAllDay:
setForwardedAttendeeUUIDs:
setForwardedAttendees:
setGetters:
setHasRemoteChanges:
setHeader:forKey:
setHighestSequenceNumber:
setImportance:
setImportedICSData:
setInstanceID:
setInteger:forKey:
setInterval:
setIsInitialSync:
setIsMonitoring:
setIsMyInvite:
setIsOrganizerUpdate:
setIsResyncAfterConnectionFailed:
setIsResyncAfterServerError:
setIsShuttingDown:
setIsSkippedDetachment:
setKeepAliveGracePeriod:
setLastConsumedChangeToken:
setLast_modified:
setLocalFileHandle:
setLocalFileLength:
setLocalFileName:
setLocalItem:
setLocalUUID:
setLocation:
setMatchedRecord:
setMaximumKeepAliveInterval:
setMeetingResponseForEmail:
setMessageID:
setMethod:
setMinimumKeepAliveInterval:
setMoreLocalChangesAvailable:
setName:
setNoteStoreObjectIdsByFolderId:
setNotes:
setNumLocalFolderUpdatesInFlight:
setObject:forKey:
setObject:forKeyedSubscript:
setOldFolders:
setOutstandingFolderRequests:
setParentClientID:
setPartstat:
setPingPowerAssertionUUID:
setPolicyKey:policyValues:
setPositions
setPowerOptimizationsForExpensiveNetworkingDisabled:
setPreservedActions:
setPreviousSyncKey:
setPrimarySMTPAddress:emailAddresses:
setPriority:
setProdid:
setProperty:forName:
setPushedActions:
setPushedMoveRequests:
setRecurrence:
setRecurrence_id:
setReminderAccountMissing:
setReminderDateTime:
setReminderIsSet:
setReminderStore:
setRenameOnCollision:
setRequireChangedFolders:
setRsvp:
setSafeToPing:
setServerID:
setServerId:
setSetters:
setShouldNotRetry:
setShouldUseOpportunisticSockets:
setSinceToken:
setSkippedActions:
setSourceApplicationBundleIdentifier:
setStartDateComponents:
setStartTime:
setSubject:
setSubtype:
setSyncAnchor:
setSyncWhenReachable:
setTimeZone:
setTitle:
setTombstoneEndTime:
setType:
setUTCDueDate:
setUTCStartTime:
setUntil:
setUpToToken:
setValue:forKey:
setWasUserInitiated:
setWillUpdate:
setWithArray:
setWithObject:
setWriteAttachmentError:
settingsRequestFinishedWithResults:status:error:
settingsTask:completedWithStatus:error:response:
sharedConnection
sharedGateKeeper
sharedInstance
sharedManager
sharedPowerAssertionManager
sharedReminderKitHelper
sharedRunLoop
sharedWifiAssertionManager
shouldCancelTaskDueToOnPowerFetchMode
shouldClientScheduleReconnectDueToFailure
shouldFixOnDiskDeviceId
shouldSavePropertiesForFolderPathsThatClientsCareAbout
shutdown
sinceToken
skippedActions
sniffableTypeForFolder:
sortUsingFunction:context:
sourceContainerId
sourceServerId
standardUserDefaults
startDateComponents
startDateForCalFramework
startPreflight
startTime
stateString
status
stopManager
stopMonitoringFolderWithID:
stopMonitoringFoldersWithIDs:
stopObservingReachability
store
storeDidChangeNotificationName
storeForExternalId:
storeForObjectID:
stores
string
stringByAppendingFormat:
stringWithFormat:
stringWithUTF8String:
submitExclusiveTask:
submitIndependentTask:
submitQueuedTask:
substringFromIndex:
substringToIndex:
superclass
supportsSettingsCommand
suspendMonitoringFoldersWithIDs:
syncAnchor
syncEndedForStoreWithExternalID:withError:
syncFolderHierarchyWithConsumer:requireChangedFolders:context:
syncFolderIDs:forDataclasses:isUserRequested:
syncKeyForFolderWithId:forAccount:
syncLocallyChangedFolder:consumer:completionBlock:
syncResultForContactsFolder:newTag:previousTag:newSyncToken:actions:results:changeIdContext:isInitialSync:moreAvailable:moreLocalChangesAvailable:pushedActions:
syncResultForEventsFolder:newTag:previousTag:actions:results:changeIdContext:isInitialSync:moreAvailable:moreLocalChangesAvailable:pushedActions:rejectedServerIds:
syncResultForNotesFolder:noteContext:newTag:previousTag:actions:results:changeSet:notesToDeleteAfterSync:isInitialSync:moreAvailable:moreLocalChangesAvailable:
syncResultForToDosFolder:newTag:previousTag:actions:results:changeIdContext:isInitialSync:moreAvailable:moreLocalChangesAvailable:pushedActions:rejectedServerIds:
syncSnoozeEvents
syncStartedForStoreWithExternalID:
syncStoreIdentifier
synchronize
synchronizeContactsFolder:previousTag:previousSyncToken:actions:highestIdContext:isInitialUberSync:isResyncAfterConnectionFailed:previousTagIsSuspect:moreLocalChangesAvailable:consumer:
synchronizeEventsFolder:previousTag:actions:highestIdContext:isInitialUberSync:isResyncAfterConnectionFailed:moreLocalChangesAvailable:consumer:
synchronizeNotesFolder:noteContext:previousTag:actions:changeSet:notesToDeleteAfterSync:isInitialUberSync:isResyncAfterConnectionFailed:moreLocalChangesAvailable:consumer:
synchronizeToDosFolder:previousTag:actions:highestIdContext:isInitialUberSync:isResyncAfterConnectionFailed:moreLocalChangesAvailable:consumer:
systemTimeZone
taskID
taskManager
taskStatusForExchangeStatus:
taskWithFolder:previousSyncKey:completionBlock:
tearDown
timeInterval
timeIntervalSinceDate:
timeIntervalSinceNow
timeIntervalSinceReferenceDate
timeZone
timeZoneForSecondsFromGMT:
timeZoneWithName:
title
titleAsString
toDosFolders
toFolder
transactionId
truncateFileAtOffset:
type
uidForCalFramework
uidForResponseEmailWithTimeZone:
uidWithoutExceptionDate
unarchivedObjectOfClass:fromData:error:
unarchivedObjectOfClasses:fromData:error:
undeletedListsInChangeSet
undeletedRemindersInChangeSet
unionSet:
unlock
unregisterWaiterForDataclassLocks:
until
upToToken
updateAccount:
updateAccountWithAccountID:completion:
updateAttachmentsForAccountID:
updateExtenalIDForFolder:forAccount:
updateExtenalIDForReminder:forFolderWithId:forAccount:
updateList:
updateOofSettingsWithParams:consumer:
updateSyncKey:forFolderWithId:forAccount:
updatedProperties
useEventIdsInMeetingResponse
useInstanceIdForException
useSmartMailTasks
userInfo
usernameWithoutDomain
utcDueDate
utcStartTime
uuid
value
valueForKey:
verifyDefaultFolderId:forAccount:
verifyExternalIdsForAccountID:
visibleFolders
waiterID
wasUserInitiated
weekNumber
weekOfMonth
wipeServerIds
writeData:
writeInviteToCalDBCreateAsRejected:defaultCalendar:account:
zone
SignificantTimeChangeNotification
mailto:%@
ASAccountFolderHierarchyExternallyChangedNotification
v8@?0
<!ExceptionDate!>
ASAgent.m
This method does not support reminders!
ASAgent_FolderContentsSync.m
This method does not handle reminders!
Task lost its folderId
Reminders are not handled in this method!
%@%@%@
v20@?0q8B16
eventNotFound
MEETING_RESPONSE_FAILURE_TITLE
DataAccess
MEETING_RESPONSE_FAILURE_BODY
Must only have one dataclass in move responses
-[ASAgent(FolderContentsSync) _fireWaitingFolderItemSyncRequests]
Attempted to queue a sync request for a folder with no folder id: %@
Got unexpected change type %ld
v40@?0@"NSString"8@"NSString"16q24@"NSError"32
attempted to queue a sync request for a folder with no folder id: %@
attachment fetch task must have a valid attachment UUID.
^{__CFDictionary=}24@?0^v8^v16
Person
Group
^{__CFDictionary=}24@?0^{CalDatabase={__CFRuntimeBase=QAQ}i^{CPRecordStore}^{CalEventOccurrenceCache}^{CalScheduledTaskCache}^{__CFDictionary}^{__CFDictionary}{os_unfair_lock_s=I}II^{__CFArray}^{__CFString}^{__CFArray}ii^{__CFString}^{__CFURL}^{__CFString}^{__CFString}Qiii@?{_opaque_pthread_mutex_t=q[56c]}B^{__CFArray}^{__CFArray}^{__CFArray}^{__CFArray}@BB^{__CFSet}@@@i@@@*IIiBBBBBB}8^v16
Event
Todo
-//Apple Inc.//iPhone 3.0//EN
%@:%@
ForcedHBI
v16@?0@"NSNotification"8
dataaccessd_ping_power_assertion-%@
ASDaemonAccount.m
We should never generate a new ping task in repsonse to a cancellation, and the cancellation callback should nil out the _pingTask pointer.
Last ping HBI %d
_foldersToMonitorById: %@
_folderIdsWithUnacknowledgedPings: %@
_busyFolderIds: %@
_pingBlacklistFolderIds: %@
_pingHistoryBlacklistFolderIds: %@
ASFolders
ASFoldersSyncKey
We should not get an ObjectAlreadyExists error for anything but a FolderCreate task.  Task was %@
 %lu
com.apple.MobileAddressBook
com.apple.mobilecal
com.apple.reminder
com.apple.mobilenotes
%s should be on DAThread, instead on thread %@
-[ASDaemonAccount _refirePingAfterDelay:withGrowthAction:]
this timer shouldn't fire if we've got a ping task.
folderID
-[ASDaemonAccount connectionManager:handleEvent:]
-[ASDaemonAccount _fixUpTimers]
We should never ask to generate a new ping when we've got an outstanding one.
LastGoodPingHeartBeat
-[ASDaemonAccount suspendMonitoringFoldersWithIDs:]
-[ASDaemonAccount resumeMonitoringFolderID:]
 resync after connection failure
com.apple.reminders
Must only have one dataclass in move requests
Must have at least one dataclass in moved objects
%a, %d %b %Y %H:%M:%S %z
Only free busy tasks are issued from dataccessd in resolve recipients requests
MEETING_RESPONSE_ACCEPTED
MEETING_RESPONSE_TENTATIVE
MEETING_RESPONSE_DECLINED
MEETING_RESPONSE_REPLY
multipart
mixed
alternative
text
calendar
utf-8
charset
METHOD
text/calendar
meeting.ics
X-MICROSOFT-CDO-ALLDAYEVENT
%@ %@
FREE
TENTATIVE
BUSY
X-MICROSOFT-CDO-INTENDEDSTATUS
Both of folderId (%@) and serverID (%@) should be non-nil
com.apple.mobilemail
DAAttachmentXXXXXX
conciseDescription
DA_POLICY_COMPLIANCE_WARNING
com.apple.eas.account
v12@?0i8
DA_POLICY_FAILURE_TITLE
DA_POLICY_FAILURE_BUTTON_TITLE
Exchange server requested device wipe.
v20@?0B8@"NSError"12
not 
ASDataHandlers.m
Generic data handler does not support Reminders!
com.apple.exchangesyncd
ESReminderKitHelper.m
Someone registered themselves for the Reminders notification more than once: %@
REMStore was not created!
v24@?0B8B12@"NSError"16
__untitled__
v36@?0q8^{__CFArray=}16^{__CFArray=}24B32
Change array counts mismatch! OwningID count:%lu, dates count:%lu, changeTypes count:%lu, sequenceNumbers count:%lu
OwningID count and Email count mismatch! OwningID count:%lu, Email count:%lu
-[ASAgent(ChangeGatherer) _copyCalendarItemActionsInContainer:existingActions:dataHandler:wantPreserveActions:skippedDetachments:changeContext:]
ASAgent_ChangeGatherer.m
[dh dataclass] == DADataclassEvents
changeIdNumber
oldContainerIdNumber
oldExternalId
markedForDeletion
reminderIDsMergeableOrdering
reminders
resolutionTokenMap
oldExternalIdentifier
Creating AB store for DAFolder %@
Creating cal calendar for DAFolder %@
Strike that, there's a pending delete for that folder.  Doing nothing
Creating Exchange Notes account in db for account id %@
Not saving Exchange Notes account for account id %@, because it doesn't have any stores.
Creating Exchange Notes store for DAFolder %@
Deleting AB store for DAFolder %@
Asked to delete source with syncStoreIdentifier %@ folderId %@.  But that doesn't exist in the db
Deleting cal calendar for DAFolder %@
Deleting Note store for DAFolder %@
Caching folders for dataclasses %lx
Found an exchange contact store, with storeId %@
No known contact folder with id %@. folderHierarchy is %@
We ended up with a _contactStoresByFolderId of %@
Found an exchange calendar with externalId %@
No known calendar folder with id %@. folderHierarchy is %@
We ended up with a _eventCalendarsByFolderId of %@
Changing email address from %@ to %@
DADataclassEvents: Could not retreive / create an exchange store in the calendar store
Found an exchange reminder list with externalId %@
No known reminder folder with id %@. folderHierarchy is %@
Found an exchange note store with external id %@
No known note folder with id %@. folderHierarchy is %@
We ended up with a _noteStoreObjectIdsByFolderId of %@
Doing best-effort match of AB folders
Not deleting calendar with id %d, as it has a pending add
Deleting calendar with local id %d, external id %@, calTitle %@, as we couldn't find an exchange folder for it
Not adding event calendar with external id %@, as it has a pending delete
ReminderSupport: _reminderBestEffortApplyNewFolders
Unknown folder id: %@
syncing email accounts isn't supported via DataAccess framework
GAL searching has no folders to sync
discarding unknown bits set in sync request: %lx
network unreachable during folder sync. Waiting for reachability to signal a retry.
ASAgent folderHierarchySuccessfullyUpdated: oldFolders is %@, currentFolders is %@ isFirstSync %d
ASAgent folderHierarchySuccessfullyUpdated: deleting folder %@, because its id %@ wasn't in my map of %@
Failed to send folder change to server with status %ld error %@
changed folder %@ finished with status %ld and error %@, but I can't find the completion block for it!
ProcessMeetingRequests: account not enabled for event class
Verifying search store is present
Account not enabled for contacts, marking search store as disabled
Account not enabled for contacts search, so whacking the search store
Found an extra search store.  Toss it
reachability indicates that the network is reachable.  We're going to retry our folder sync.
Start monitoring %lu mail folders for client: %@
No mail folders to monitor for client: %@
_syncKeyForFolderWithId Calendar containing folder with folder ID %@ not found
_syncKeyForFolderWithId Calendar external tag %@ for folder ID %@
Attempted to set sync key %@ for folder with id %@.  But that events folder doesn't have a corresponding calendar
_setSyncKey Calendar external tag %@ for folder ID %@
Attempted to set sync key %@ for folder with id %@.  But that contacts folder doesn't have a corresponding store
Attempted to set sync key %@ for folder with id %@.  But that notes folder doesn't have a corresponding store
Invoking CalDatabaseCopyEventWithExternalIDInCalendar with serverID: %@, instead of using UID
Did not find an event with serverID %@. Try searching with UID %@
Found %ld events with the same UID %@. 
Found one event with UID %@. This event already has an external id. Not what we are looking for.
Found one event with the same UID %@ and empty server ID. Keeping it.
Found more than one event with the same UID %@ and empty server ID. Not touching them. Creating duplicate events.
Folder with id %@ and title %@ has failed to sync %d time(s) in a row
Can't queue a retry sync, as we no longer have a folder with id %@
Remove a pending request since it contains postponded actions for a failed request. Removing request %@
%@ Unrecoverable error %ld
Well, we tried twice, but couldn't connect to the server for this request.  Dropping this on the floor.  Task = %@
Connection error, but this is the first failure for this task, so trying again.  Task = %@
Server error, retry with sync key 0
User is out of disk space on the Exchange server.  We should probably put up a warning for this case
We synced a folder that no longer exists.  Gonna update my hierarchy now
Unhandled error (%ld) from Folder Items Sync Task
Failed: %ld, %@
Received an add from Exchange for an event that we already knew about!  We're going to merge these events, and ignore the incoming event %@
Not considering event %@ for duplicates, since it's paired with a delete for an event with an identical serverid
Received an add from Exchange for an item that we already knew about!  We may be about to start a dupe war with Exchange.  Exchange Item %@
Received a mod from Exchange for an item we didn't already have.  Dropping this mod on the floor.  Exchange Item %@
adding %@
updating %@
saved %@, server id %@, clientID %@
Add of object %@ over local item with id %d resulted in keeping some local properties.  Queueing sync to server
Dropping the delete of %@ on the floor, as we have an add or mod with the same server ID in this set of incoming changes
Dropping the delete of %@ on the floor, as it's still linked to an invitation in the trash
Clearing change index %d
Clearing note changes: had change URIs %@, clearing changes %@
After draining the container with id %@ and dataclass %lx, that container disappeared
Actions were %@, are now %@
Do not send invitation email because event no longer exist in local DB %@
Do not send invitation email because event is not invitation from me
Could not save local container, dataclass is %lx
Fail to save initial sync results or save sync key. Stop monitoring Reminder folder %@.
Dropping server action, because it had a belay-that-modify action associated with it.  Server action %@
Had a belay-that-action daaction, but no corresponding server action for id %@
More local changes are available. Will issue another sync request.
Do not issue subsequent sync request due to error.
_finishWithInvitationEvent, for event with UID %@ expectedResponse of %d, was my invite %d is still invite %d
Found one event with UID %@.
Invoking CalDatabaseCopyEventWithUniqueIdentifierInStore for localEvent since there is only one event with this UID
Found %ld events with the same UID %@. Pick one using server ID.
Found local event using server ID %@.
Invoking CalDatabaseCopyEventWithUniqueIdentifierInStore
Found local event using event UID %@.
Invoking CalDatabaseCopyEventWithUniqueIdentifierInStore for localEvent when finishing invatation batch.
Meeting response for event %@ with UID %@ failed with error %ld
Invoking CalDatabaseCopyEventWithUniqueIdentifierInStore in finishing meeting response
Self attendee not found
Exception %@: %@
Meeting response was previously not found. Not going to tell user about the failure
Setting kEventNotFound for the event %@ with UID %@
localEvent for responseItem with UID %@ not found.
Meeting response was successful for event with UID %@
Found local event using cal event ID %@.
Found local event using delivery item server ID %@.
Found %ld events with the same UID, unable to distinguish them. UID %@.
Invoking CalDatabaseCopyEventWithUniqueIdentifierInStore for parentLocalEvent
parent ASEvent is %@, exception event is %@
Heard back from MeetingResponse: Not emailing about event %@, as the originator requested no responses
Not sending meeting response email about event %@. Protocol version %@
Not sending meeting response email. Walk through all events with matching UID to clear the pending status.
MeetingResponse was successful, but I can no longer find an event with uid %@
Unhandled error (%ld) from Move Items Task
Draining changes because move items task had error %ld.  task %@
Draining pending sync requests because move items task had error %ld.  task %@
Our exchange store went missing, so releasing locks for EVENTS, as a guess
really syncing request %@
Found a sync request for the same folder.  Merging in %@
Returning early, no reminder changes to sync to server
Asked to sync folder with id %@ and dataclass %lx, but I have no matching container
Was told to inject changes for folder with id %@, but that doesn't exist.  Clearing those changes
external change, folder %@, dataclass %lx
Collected %lu changes from local DB
returning early, as we have a folder change with no remote changes, and no local changes
Couldn't fit all db actions in one request, will batch
putting request %@ in for the gate
%s: asked to sync folder request %@, but that has no server id.  Dropping this sync on the floor
A request containing postponed actions will not be synced. Request: %@
Appending sync request %@
sync request %@ had old actions %@, new actions %@, combined actions %@
Ignoring change of calendar with local id %d, as it doesn't contain items of my dataclass (%ld)
Looking at hierarchy change with id %d type %d exchangeId %@
Will drop local change to folder %@, as its our default folder, and we shouldn't muck with that
Will drop non-interesting folder change for %@ %@
Have a delete for a non-existent folder.  Will drop delete request. %@ %@
Dropping collapsed changes with ids %@
Acting on folder change with type %ld item id %d external id %@, change indices %@
Not syncing change as its folder went missing. Type %lu item id %d external id %@ dataclass 0x%lx
Handling daemon backed local folder change. Type %lu item id %d external id %@ dataclass 0x%lx
An error (%@) occurred while downloading the attachment. %@ is not saved.
Exception while converting attachment file: %@
Cannot acquire the gatekeeper lock. The attachment %@ is not saved.
The gatekeeper lock has been granted. Beginning save of attachment %@
Couldn't save attachment file in the database for attachment %@
Attachment has been saved. Releasing gatekeeper lock
Couldn't get an attachment to set our downloaded file on
Cannot acquire the gatekeeper lock. Download task for attachment %@ does not start.
Couldn't get a store or database to clear AddressBook changes
Clearing %@ changes in store %d to index %d
Couldn't get a calendar or database to clear changes
Clearing %@ changes in calendar %d to index %d
Disabling early fire for Exchange account %@
Setting _delayedPingTimer to nil
Invoking _cancelPingTask
[ASDaemonAccount dealloc] - Tearing down PCConnectionManager and shutting down.
Folder %@ added to the ping blacklist
Folder %@ added to the ping history blacklist
Folder %@ removed from the ping blacklist
Remove folder hierarchy from ping history blacklist
Clearing folder hierarchy ping history, after a successful sync
Remove from ping no change blacklist
Clearing ping no change history, after a successful sync
Folder %@ removed from the ping history blacklist
Clearing folder %@ from ping history, after it has a successful sync
reacting to changed folder %@ with change type %lu
Original folderCache %@
Discarding folder [%@] with the same server ID [%@] and parent ID [%@]
Resulting folderCache %@
No support for locally modifying containers of dataclass %lx
A gmail-as-activesync account received a 403 for a folder sync.  If this is a new device, please change to using a gmail account instead.
Folder change count: %lu
New folder cache due to local update: %@
Unrecognized folder dataclass: %ld
Invoking _refirePingAfterDelay
_delayedPingTimer is %@
Not going to ping, because there is no run loop mode to schedule our timer on
Creating _delayedPingTimer
Invoking setSafeToPing
ping task is %@, and _pingTask task is %@. They should be the same.
Ignoring response for old ping task %@
Ping task status %ld, resultHBInterval: %d
Setting _pingTask to nil.
Not refiring Ping request because it was canceled.
Refiring Ping request because it was canceled due to task manager modal hold.
Create no change history for no change responses.
Refresh no change history for no change responses. Discard old data.
Update no change ping count to %d
Ping request has more than 10 no change responses since %@. Adding it to black list. User must manually refresh to get it to push again.
Force fully specified ping since there were more than 5 ping responses with no changes in last 2 minutes.
Create ping history for folder %@.
Update ping history for folder %@. New count is %d.
Folder %@ has more than 5 changes in ping history, without a successful sync. Adding it to black list. User must manually refresh to get it to push again.
Received Ping response requiring folder hierarchy sync.  Gonna update folder hierarchy now
Create ping history for folder hierarchy.
Refresh ping history for folder hierarchy. Discard old data.
Update ping history for folder hierarchy to count %d
Folder hierarchy has more than 10 changes since %@ in ping history. Adding it to black list. User must manually refresh to get it to push again.
Received status 3 (Ping command request omitted required parameters) from server for Ping request.
Received status 111 (ServerErrorRetryLater) from server for Ping request.
PingTask: unhandled status of %ld
Remove from ping no change blacklist, after a ping response with status other than DAStatusNoChanges
Clearing ping no change history, after a ping response with status other than DAStatusNoChanges
Reissuing Ping request after 60 second delay
%s invoked: mgr: %@, reason:%d
Told to poll, but we're in manual PC mode.
%s cancelling ping task and reissuing with maintain, PC event was %d
Start fetching in automatically mode for account %@. Set automatic fetching state
%s cancelling ping task, syncing all folders, and maintaining heartbeat, as I'm polling
%s cancelling ping task and reissuing with shrink
%s style changed to %d.
%s pcManager callback out to lunch, event is: %d
Canceling task because conditions for on-power mode no longer exist (wi-fi)
Canceling task because conditions for on-power mode no longer exist (charging)
In %s, we had an outstanding _delayedPingTimer.  Likely because a ping was queued after we woke, but before we were told we woke
_pingTask is %@. It should be nil.
Asked to ping, but we're not currently pushing.  Not going to ping
Not going to ping because server couldn't update folder hierarchy
Not going to ping because server is rapidly returning no change responses
Not including folder %@ to ping task because it is black listed
Not including folder %@ to ping task because it is history black listed
Not including folder %@ to ping task because it is with unacknowledged ping
Not including Reminder folder %@ to ping task because REMAccount is not ready yet
Adding folder %@ to ping task
PHMGetCurrentHeartbeatInterval returned %d, No Ping for you
Creating _pingTask with %lu ping folders
ping issued
monitoring folder %@, _foldersToMonitorById = %@, _busyFolderIds = %@
unmonitoring folder %@ - %@
Can't monitor folder with id %@, I don't know about that one.  Folders %@
marking folder as busy: %@
%s: Warning, unable to find folder for id %@
marking folder with id %@ as not busy, _busyFolderIds (%@)
%s: warning, unable to find busy folder for id %@.  _busyFolderIds is (%@)
Daemon setting folder ids to be monitored added:%@
deleted:%@
tag:%@
Dropping request to add folder that external clients care about.  Client's folder tag (%@) doesn't match daemon's: (%@)
Trying to set folderIdThatExternalClientsCareAbout for folder we don't know about. ID = %@
Daemon setting folder ids to be persistently monitored added:%@
deleted:%@
Trying to set folderIdsForPersistentPush for folder we don't know about. ID = %@
Daemon clearing folder ids to be persistently monitored
Have a modify action nixed by a belay action for server id %@.  Dropping the modify
Syncing Contacts folder with id %@, previous key %@%@, actions %@
_ASSyncTaskAndMeetingResponseCommandsFromDAEventActions, actions is %@
_invitationActionsInFlight is currently %@
Event has status %d, pending status %d, meeting response %d
Dropping request to sync %@, as it's a un-acted-upon invitation and we're trying to do something other than modify it
Do not respond to a canceled meeting for server id %@. Dropping the modify
Not syncing add of cancelled event that's not back by an exchange event.  Event %@
Dropping request to email about %@, as I currently have an invitation action in flight for it
Dropping request to do a MeetingResponse for %@, as I currently have an invitation action in flight for it
Not emailing about event %@, as I'm sending a meeting response for someone in their chain
Not emailing about event %@, as the originator requested no responses
Alarm! We have a command of type %lu, but the event isn't an ASEvent, rather it has class %@, and is %@
Not syncing command %@, as I'm sending a meeting response for someone in their chain
_ASSyncTaskAndMeetingResponseCommandsFromDAEventActions, commands are %@, meetingResponseActions are %@ emails are %@
Meeting response task %@ completed with status %ld error %@ results %@
Stripping exception id from eventId: %@
Asked to respond to a meeting request.  But the DAEvent has no local event? DAEvent: %@
Retrieved delivery item id from eventAction, id: %@
Retrieved delivery item id from parent event, id: %@
Retrieved delivery item id from event, id: %@
Asked to respond to a meeting request, but the local cal event is missing one or both of folder id %@ or item id %@
Syncing Calendar folder with id %@, previous key %@%@
Syncing ToDo folder with id %@, previous key %@%@
Syncing Notes folder with id %@, previous key %@%@
'ignoredEventID' supplied but it will not be used.
'nil 'requestID' given.  Will not cancel any calendar avilability requests.
We are sending an email for an invitation with response %d.  That's not right.  Dropping it.
We are sending an email for an invitation with response %d.  That's not right.  Dropping this email on the floor.  Event %@
Sending .ics attachment for event %@.  Attachment body
Couldn't cons up a cancel-all email for event %@
Couldn't cons up a cancel-some email for event %@
Couldn't cons up a request email for event %@
Couldn't cons up a response email for event %@, not going to reply
Detected an event that had the attendees ripped out from under it.  Not going to email about event %@
Not sending an email for the following invitation, because it only occurs in the past.  Invite %@
Not sending emails about events. Protocol version %@
ProcessMeetingRequests: attempting invitation linkage
Unable to decode meeting request: %@
Ignoring meeting request %@ because I have a more recent one
ProcessMeetingRequests: calling back with invitation linkage success
ProcessMeetingRequests: waiting for gate keeper
ProcessMeetingRequests: did not acquire gate keeper
Clearing out invite with folder id %@ server id %@, wasSoftDelete = %d
While clearing out invite, I found an invite with event status %d, attendee status %d
Settings task submitted
%@:Settings task %@ completed with status %ld, error %@, response: %@
Settings task %@ UserInformation Get returned failure status %ld
User's email address set to primary SMTP address %@, or collection %@
Ignored getter item: %@, key: %d, result: %@
Getter item %@, key %d, returned unsuccessful status %ld
Exchange server does not support updating OOF settings. Protocol version %@
Exchange server does not support retrieving OOF settings. Protocol version %@
Account %@ is a hotmail account and does not support OOF
Account %@ supports OOF: %@
Remove folder hierarchy from ping history blacklist afetr a successful folder sync
Clearing folder hierarchy ping history after a successful folder sync
Couldn't create a temporary file with the format %@
Downloading attachment to %@
'nil 'requestID' given.  Will not cancel any attachment downloading requests.
Exception writing attachment data to file: %@
Unexpected ASTask class: %@
Getting a new server policy
EDU Mode : PreFlighting MCRestrictions %@
Asking MC to comply with new policy
Applying restriction dictionary to MC
MCComplianceResult was %d
Device Set to Multi-User Mode. Can not Apply EAS Policies
Waiting for user to comply with new restrictions for account with persistent id %@
MCPasscodeChangedNotification fired, re-appyling restriction dictionary
Unable to register for message %@: %d
Could not put up alert telling the user the account is being disabled.  Got response flags 0x%lx
********* disabling * %@
Error setting client restrictions gave result %d: %@, %@
EDU Mode: Remote Wipe requested but we are not going to enforce it.
You asked for it, we're remote wiping now.  You probably will never ever see this log message
Not only that, but we're gonna brick you, too!
The account only remote wipe was %@successful, error %@
preflighter got error %@
There's no support for a data handler for dataclass %ld
Registering reminder change notification for account: %@
ReminderConversion: Received reminders database did change.
ReminderConversion: DADREMLocalDBWatcher: DATransaction starting, ID: %@
Found added folder with local id %@
Found pending added folder with local id %@
Not deleting reminder list with id %@, as it has a pending add
Deleting reminder list with local id %@, external id %@, title %@, as we couldn't find an exchange folder for it
ReminderSupport: reminder list %@ is deleted
ReminderSupport: reminder list %@ is updated with external ID: %@ and name: %@
ReminderSupport: reminder list change with folder title: %@ and ID: %@
ReminderSupport: missing reminder account %@, when adding folders.
ReminderSupport: reminder list added with folder title: %@ and ID: %@
ReminderSupport: reminder list with object ID: %@ and ID: %@
Fetch account failed for accountID: %@, with error: %@
Setting reminderAccountMissing to TRUE for account %@ and asking ReminderKit to set up the REMAccount
Received callback from ReminderKit for account %@
ReminderKit has set up the REMAccount for accountID: %@
ReminderKit has updated the REMAccount for accountID: %@
ReminderKit encountered an error while adding the REMAccount for accountID %@: %{public}@
Setting reminderAccountMissing to FALSE for account %@
Fetching reminder lists returned nil {folderID: %@, error: %@}
Fetching reminder returned nil {ObjectID: %@, error: %@}
Fetching list returned nil {ObjectID: %@, error: %@}
Fetching reminder returned nil {serverID: %@, error: %@}
Error getting reminders: %@
Could not get reminders
_syncKeyForFolderWithId Reminder containing folder with folder ID %@ not found
_syncKeyForFolderWithId Reminder external tag %@ for folder ID %@
Fail to delete a reminder folder because Reminder list doesn't exist. Folder ID: %@
Fail to delete a reminder folder because Reminder account doesn't exist. Account ID: %@
Updating sync key %@ for reminder folder ID:%@
Fail to set sync key for reminder folder because Reminder list doesn't exist. Account ID: %@, folder ID:%@
Fail to set sync key for reminder folder because Reminder account doesn't exist. Account ID: %@, folder ID:%@
Couldn't create reminder save request
ServerID missing from task. Failed to initial sync reminder {task: %@}
During initial sync, merge task with existing local reminder with the same external id {task: %@, externalIdentifier: %@}
Found existing reminder during intial sync %@
Adding new reminder during intial sync %@
Folder %@ does not existing when adding reminder %@
Account %@ does not existing when adding reminder %@
Setting arbitrary week start to %d
Recurrence rule has invalid frequency %@
SET recurrence <- %@
ServerID missing from task. Failed to modify reminder {task: %@}
Merge task with existing local reminder {task: %@, externalIdentifier: %@}
Adding a new reminder {task: %@, externalIdentifier: %@}
Could not get list. Failed to modify reminder {task: %@, folderID: %@}
Could not fetch account. Failed to modify reminder {task: %@, account: %@}
ServerID missing from task. Failed to delete reminder {task: %@}
Could not fetch reminder. Failed to delete reminder {task: %@, externalIdentifier: %@}
Could not fetch reminder list. Failed to delete reminder {task: %@, folderID: %@}
Could not fetch reminder account. Failed to delete reminder {task: %@, account: %@}
Could not get reminder. Failed to modify reminder {task: %@, externalIdentifier: %@}
ReminderSupport: The saveSynchronouslyWithError returned with error %@
ReminderSupport: Get local added folders for account %@
ReminderSupport: Could not add folder for a REMList with local ID: %@, for account %@
ReminderSupport: Peek local added folders for account %@
ReminderSupport: Get local modified folders for account %@
ReminderSupport: Could not modify folder for a REMList with local ID: %@, external ID: %@, for account %@
ReminderSupport: Get local deleted folders for account %@
ReminderSupport: Could not delete folder for a REMList with local ID: %@, external ID: %@, for account %@
ReminderSupport: Collected %lu updated reminder changes for folder: %@, for account %@
ReminderSupport: Collected %lu undeleted reminder changes for folder: %@, for account %@
ReminderSupport: Collected %lu lazy deleted reminder changes for folder: %@, for account %@
ReminderSupport: Collected %lu deleted reminder changes for folder: %@, for account %@
ReminderSupport: Modifying a reminder with local ID: %@, external ID: %@, folder ID: %@, account %@
ReminderSupport: Adding a reminder with local ID: %@, external ID: %@, folder ID: %@, account %@
ReminderSupport: Could not modify reminder with local ID: %@
Could not fetch reminder account for account: %@
Could not get list for folderID: %@
Error getting reminders for folderID: %@, error: %@
Could not get reminders for folderID: %@
Unable to decode ToDo properties: %@
Hourly recurrence is not supported {recurrenceRule: %@}
Malformed Monthly recurrence (weekDays has multiple weekOfMonths).  reminder is %@
Malformed Monthly recurrence (setPosition is out of bounds (%ld)).  reminder is %@
Malformed Monthly recurrence (has dayOfWeek but no setPosition).  reminder is %@
Malformed Monthly recurrence (both daysOfTheMonth and daysOfTheWeek are set).  reminder is %@
Malformed Yearly recurrence  (need either (byMonthDayDays && byMonthMonths && !byDayDays) OR (!byMonthDayDays && byMonthMonths && byDayDays) OR (!byMonthDayDays && !byMonthMonths && !byDayDays).  reminder is %@
UPDATE {objectID: %@, task.serverID: %@}
SET externalIdentifier <- %@
SET notes <- %@
SET title <- %@
SET startDateComponents <- %@
SET dueDateComponents <- %@
SET completionDate <- %@
SET completed <- %@
SET priority <- %@
SET alarms <- [%@]
Removing all alarms from reminderChangeItem {objectID: %@}
SET alarms <- nil
SET importedICSData <- %@
SET recurrenceRules <- nil
_addChange for type %lu, changedItemId %@ changeId %@ addedIds %@ modifiedIds %@ deletedIds %@ pseudoDeletedIds %@, changeIdsToClear %@
A preset action for a sync request wanted a modify, but we have no server id.  Dropping the modify of %@
A preset action for a sync request couldn't load the associated local event in the db action %@
A preset action for a sync request didn't have an associated local event in the db action %@
A preset action for a sync request had change type %lu, which is unsupported.  Dropping that action
For a change with local id %d, found server id %@ in the change table, and server id %@ in the db.  Using the db-based id
Looking at change with id %d type %d exchangeId %@
Had a change of type %lu for an event that no longer exists.  Clearing that change (change id %@)
Discarding non-significant modifications to event with local ID: %d, Exchange ID:%@
No syncing changes with event id %d because the self attendee status is pending
No syncing changes with event id %d because the changes are by changing invitation status only
Resetting change with id %d and type add to type modify
Resetting modify invitation change on event with id %d to EAS delete
Found %ld entries in exception date changes table
Found %ld entries in participant changes table
Attendee with UUID %@ is receipient of forwarded meeting with id %d 
No changes in calendar
A deleted detachment is not ASEventException object, action %@
A preset action for a sync request didn't have an associated local changed item in the db action %@
Skipping local modify for event with id %@ as it's calendar (id %d) doesn't match the container we're interested in (id %d)
This is a newly added event, and user is not the organizer. This should not happen. Ignore this event.
Exchange server does not support adding a new event where user is not the organizer. Dropping that action with id: %@
Do not sync events added by snooze to Exchange server. Dropping that action with id: %@
Do not include event body when syncing events added by snooze to Exchange server
Skipping a newly created exception with modified parent event. Will sync it in a subsequent request.
Unable to save a newly created exception with modified parent event. The detachment will not be synced to the server.
Skipping a newly created exception in newly created parent event. Will sync it in a subsequent request.
Unable to save a newly created exception in newly created parent event. The detachment will not be synced to the server.
Dropping an addition without local item
Dropping and clearing local modify for event with id %@ as it's calendar (id %d) doesn't match the container we're interested in (id %d)
Dropping an action because event is modified by acknowledging. id: %@
Do not sync parent event modified by snooze. Dropping that action with id: %@
Skipping a modified detachment with modified parent event. Will sync it in a subsequent request.
Unable to save a modified detachment with modified parent event. The detachment will not be synced to the server.
Do not include event body when syncing events modified by invitation status to Exchange server
Do not include event body when syncing events without significant changes
Dropping a modification without Exchange ID
Skipping a deleted detachment with modified parent event. Will sync it in a subsequent request.
Unable to save a deleted detachment with modified parent event. The detachment will not be synced to the server.
Dropping a deletion without Exchange ID
Dropping a deleted detachment with parent also deleted
Skipping a pseudo deleted detachment with modified parent event. Will sync it in a subsequent request.
Unable to save a pseudo deleted detachment with modified parent event. The detachment will not be synced to the server.
Drooping a detachment without a parent.
Dropping a paeudo deletion without Exchange ID
Dropping a paeudo deletion without local item
Dropping a deleted detachment from exception date with parent also deleted
Skipping a deleted detachment from exception date with modified parent event. Will sync it in a subsequent request.
Unable to save a deleted detachment from exception date with modified parent event. The detachment will not be synced to the server.
Dropping a deleted detachment from exception date with missing exception date
Dropping a deleted action without serverID, action %@
_addChange for move of calendarItem id %@, changeId %@ calendarItemIdsToMoveActions %@, calendarItemChangeIdsToClear %@
Looking at a move command, I couldn't come up with the old calendar.  old calendar id %d
Looking at a move command, I couldn't come up with the old calendar external id.  old calendar id %d
Looking at a move command, I couldn't come up with the new calendar external id.  new calendar id %d
consed deletes are %@
_addChange for type %lu, changeId %@ addedIds %@ modifiedIds %@ deletedIds %@
Unknown change type %@ from change object %@
Looking at change with id %d type %lu exchangeId %@
ReminderSupport: Trying to initialize ESReminderChangeTrackingHelper without an account.
ReminderSupport: Failed to get REMChangeTracking for accountID: %@
ReminderSupport: Found an existing change tracking state for {accountID: %@, lastSyncToken: %@, lastSyncDate: %@}
ReminderSupport: Due to error or nil current change token, couldn't initialize tracking state for accountID: %@
ReminderSupport: Creating a new change tracking state object for accountID: %@
ReminderSupport: Ignoring prior changes. Initializing a new change tracking state for {accountID: %@, nowToken: %@}
ReminderSupport: Initial change tracking state is saved for accountID: %@
ReminderSupport: Failed to save an initialization of tracking state with error {accountID: %@, error: %@}
ReminderSupport: Failed to get change tracking state with error {clientID: %@, error: %@}
ReminderSupport: The change tracking state does not exist {clientID: %@}
ReminderSupport: Found and fetched change tracking state for {clientID: %@, lastSyncToken: %@, lastSyncDate: %@}
ReminderSupport: Not fetching changes because we have unprocessed changes for account %@
ReminderSupport: Failed to fetch change history with error {clientID: %@, token: %@, error: %@}
ReminderSupport: Fetched truncated change history.  {clientID: %@, token: %@}
ReminderSupport: Not processing local changes. Had problem getting change history for account %@
ReminderSupport: Could not fetch changes because change tracking client does not exist for account %@
ReminderSupport: Change set contains added list: %@, for account %@
ReminderSupport: Change set contains list: %@, for account %@. But it is not found in reminder store!
ReminderSupport: Change set updates contains undeleted list: %@, for account %@.
ReminderSupport: Change set contains modified list: %@, with external ID: %@, for account %@
ReminderSupport: Change set contains deleted list with local ID: %@, external ID: %@, for account %@
ReminderSupport: Change set contains deleted list: %@, for account %@. But it is not found in reminder store!
ReminderSupport: Change set contains lazy deleted folder with external ID: %@, local ID: %@, for account %@
ReminderSupport: Change set contains lazy deleted list: %@, for account %@. But it is not found in reminder store!
ReminderSupport: Change set contains reminder: %@, for account %@. But it is not found in reminder store!
ReminderSupport: Change set contains deleted reminder: %@, for account %@. But it is not found in reminder store!
ReminderSupport: fetchAuxiliaryChangeInfosOfType returns error %@
ReminderSupport: Found reminder list external identifier: %@, for change object: %@
ReminderSupport: Marking change consumed for account %@, lastConsumedChangeToken %@
ReminderSupport: Failed to save tracking state for account %@, error %@
ReminderSupport: Saved change tracking state for account %@, lastConsumedChangeToken %@
ReminderSupport: Not updating change tracking state, because no newer change token in this history {token: %@, clientID: %@, account: %@}
ReminderSupport: Not updating change tracking state, because no upto token in this history {clientID: %@, account: %@}
ReminderSupport: Not updating change tracking state, because no change tracking {account: %@}
ReminderSupport: Marking reminder changes consumed for account %@, folder %@
ReminderSupport: Marking reminder folder change consumed for account %@, folder %@
ReminderSupport: Marking reminder folder addition consumed for account %@, folderUUID %@
ReminderSupport: All changes are consumed for account %@
ReminderSupport: Changes not yet consumed for account %@, reminders in folders %@, folder additions: %@, folder changes:%@
ASAgent
ASFolderHierarchyUpdateConsumer
NSObject
ASFolderHierarchyLocalChangeConsumer
DAPreferredDaysToSyncDidChangeObserver
FolderContentsSync
DAContactsUpdateConsumer
DAActionConsumer
DAEventsUpdateConsumer
DAMessageSendConsumer
DAToDosUpdateConsumer
DANotesUpdateConsumer
DADataclassLockWatcher
ABPredicateDelegate
DAMessageMoveRequestConsumer
ConciseDescription
ASDaemonAccount
PCConnectionManagerDelegate
ASFolderChangedHistory
ASDaemonPolicyManager
ASPolicyPreflighterDelegate
ASDataHandler
ASContactDataHandler
ASEventDataHandler
ASNoteDataHandler
ESReminderKitHelper
ASAgentFolderHierarchyContext
ChangeGatherer
ESReminderChangeTrackingHelper
v24@0:8@16
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16Q24
v40@0:8@16q24@32
v32@0:8@"ASAgentFolderHierarchyContext"16Q24
v40@0:8@"ASAgentFolderHierarchyContext"16q24@"NSError"32
v48@0:8@16q24@32@?40
v48@0:8@"ASFolder"16q24@"NSError"32@?<v@?@"NSString"@"NSString"q@"NSError">40
v16@0:8
@24@0:8@16
^v16@0:8
v24@0:8^v16
^v32@0:8@16q24
^v24@0:8@16
@20@0:8B16
v24@0:8q16
B36@0:8@16@24B32
v20@0:8B16
@32@0:8@16q24
v36@0:8@16q24B32
v48@0:8^{__CFArray=}16@24q32@40
v48@0:8@16@24q32@40
v32@0:8@16@?24
v56@0:8@16@24@32@40@?48
v24@0:8B16B20
v24@0:8@?16
@44@0:8@16^v24q32B40
@40@0:8@16^v24q32
v32@0:8@16@24
i16@0:8
v20@0:8i16
@?16@0:8
@"NSMutableDictionary"
@"NSMutableArray"
@"NSMutableSet"
@"NSLock"
B32@0:8@16^v24
^v36@0:8@16B24^v28
@36@0:8@16B24@28
v36@0:8@16@24B32
v28@0:8@16B24
v32@0:8@16q24
v40@0:8q16@24@32
B84@0:8@16@24B32@36@44@52^@60r^^v68^B76
B68@0:8@16@24q32B40@44@52@60
B60@0:8@16@24B32@36@44@52
B48@0:8@16q24@32@40
v112@0:8@16@24@32@40@48@56B64B68q72@80@88@96@104
B104@0:8@16@24@32@40@48@56B64B68@72@80@88@96
v100@0:8@16q24@32@40@48@56@64B72B76B80@84@92
v92@0:8@16@24@32@40@48@56@64B72B76B80@84
v92@0:8@16@24@32@40@48@56B64B68B72@76@84
v92@0:8@16@24@32@40@48@56@64@72B80B84B88
B44@0:8^v16@24i32B36B40
v48@0:8q16@24@32@40
B24@0:8i16i20
v28@0:8q16B24
B56@0:8q16^i24^Q32^@40^{__CFArray=}48
B52@0:8i16Q20@28^{__CFArray=}36q44
B32@0:8@16Q24
v40@0:8@16@24@32
v44@0:8@16q24B32@36
v40@0:8q16@24@"NSError"32
v92@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSArray"48@"NSArray"56@"ContactFolderItemsSyncContext"64B72B76B80@"NSArray"84
v32@0:8@"NSString"16@"NSArray"24
v40@0:8@16Q24Q32
v92@0:8@"NSString"16@"NSString"24@"NSString"32@"NSArray"40@"NSArray"48@"EventsFolderItemsSyncContext"56B64B68B72@"NSArray"76@"NSSet"84
v48@0:8q16@"NSError"24@"NSArray"32@"NSArray"40
v24@0:8@"NSArray"16
v92@0:8@"NSString"16@"NoteContext"24@"NSString"32@"NSString"40@"NSArray"48@"NSArray"56@"NSSet"64@"NSSet"72B80B84B88
v40@0:8@"NSString"16q24@"NSError"32
B40@0:8@16^v24@32
B36@0:8@16^v24B32
B44@0:8@16^v24@32B40
B24@0:8@"NSPredicate"16
B32@0:8@"NSPredicate"16^v24
B40@0:8@"NSPredicate"16^v24@"NSDictionary"32
B36@0:8@"NSPredicate"16^v24B32
B44@0:8@"NSPredicate"16^v24@"NSDictionary"32B40
q20@0:8c16
v28@0:8@16i24
v36@0:8@16i24@28
v28@0:8@"PCConnectionManager"16i24
v36@0:8@"PCConnectionManager"16i24@"NSDictionary"28
^{__CFString=}16@0:8
B32@0:8@16@24
v56@0:8@16q24@32@40@48
v36@0:8@16B24@28
B40@0:8@16@24@?32
v64@0:8@16q24@32@40@48@?56
v48@0:8@16@24q32@?40
v40@0:8@16@24@?32
v24@0:8f16i20
v56@0:8@16q24@32@40i48i52
B40@0:8@16@24@32
v80@0:8@16@24@32@40@48B56B60B64B68@72
@40@0:8@16@24@32
v68@0:8@16@24@32@40B48B52B56@60
v84@0:8@16@24@32@40@48@56B64B68B72@76
i32@0:8@16@24
i72@0:8@16@24@32@40@48@56@64
@56@0:8@16@24@32@40@48
v48@0:8@16q24@32@40
@20@0:8i16
@76@0:8@16i24@28@36@44@52@60^@68
@32@0:8@16@24
@60@0:8@16i24@28@36@44^@52
v76@0:8@16@24@32@40@48@56@64B72
B76@0:8@16@24@32@40@48@56@64B72
B40@0:8@16@24B32B36
v36@0:8B16@20Q28
v24@0:8Q16
@"ASPingTask"
@"NSCountedSet"
@"ASFolderChangedHistory"
@"PCConnectionManager"
@"NSSet"
@"NSTimer"
@"MFAttachmentComposeManager"
@"NSString"
@"NSDate"
v48@0:8@16@24@32@40
v40@0:8@"ASPolicyPreflighter"16@"NSDictionary"24@"NSDictionary"32
v48@0:8@"ASPolicyPreflighter"16@"NSDictionary"24@"NSDictionary"32@"NSString"40
v24@0:8@"ASPolicyPreflighter"16
v32@0:8@"ASPolicyPreflighter"16@"NSError"24
i24@0:8@16
@"ASAccount"
@"ASPolicyPreflighter"
@48@0:8q16^v24@32@40
q16@0:8
i24@0:8^v16
^v20@0:8i16
B20@0:8B16
@40@0:8^v16@24@32
B44@0:8@16@24@32B40
B48@0:8@16@24@32^@40
B56@0:8@16@24@32@40@48
B48@0:8@16@24@32@40
q32@0:8@16^q24
i24@0:8q16
@24@0:8i16i20
q20@0:8i16
@"REMStore"
@"REMSaveRequest"
@"NSArray"
@28@0:8i16q20
v80@0:8Q16@24@32@40@48@56@64@72
@52@0:8^v16@24@32B40@44
v128@0:8@16i24Q28@36B44^v48@56@64@72@80@88@96@104@112^B120
v128@0:8^v16@24@32@40@48@56@64@72^i80^i88^i96^i104^i112@120
v48@0:8^v16@24^i32@40
v48@0:8^v16@24@32@40
B24@0:8^v16
@60@0:8^v16@24@32B40@44@52
v64@0:8Q16@24@32@40@48@56
@52@0:8@16@24@32B40@44
@"REMChangeSet"
@"REMChangeToken"
@"REMObjectID"
@"REMChangeTracking"
