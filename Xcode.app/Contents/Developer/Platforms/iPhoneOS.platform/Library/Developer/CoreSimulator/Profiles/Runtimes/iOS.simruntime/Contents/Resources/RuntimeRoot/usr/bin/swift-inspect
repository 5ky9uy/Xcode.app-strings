CSTypeRef
swift_metadata_allocation
vm_range_t
thread_identifier_info
DumpRawMetadata
CodingKeys
Range
__sFILE
__sbuf
swift_inspect
DumpConformanceCache
CodingKeys
Error
SwiftInspect
BacktraceOptions
UniversalOptions
CodingKeys
DumpArrays
CodingKeys
DarwinRemoteProcess
PortList
ThreadInfo
DumpCacheNodes
CodingKeys
DumpGenericMetadata
CodingKeys
Metadata
RemoteProcess
ProcessIdentifier ProcessHandle
File
ConcurrencyDumper
TaskInfo
HeapInfo
DumpConcurrency
CodingKeys
version
@help
CompletionShell
ArgumentParser
Argument
ArgumentArrayParsingStrategy
ArgumentHelp
CompletionKind
Kind
ValidationError
ExitCode
CleanExit
Representation
Flag
FlagInversion
FlagExclusivity
Representation
NameSpecification
Element
Representation
Option
SingleValueParsingStrategy
ArrayParsingStrategy
OptionGroup
CommandConfiguration
EnumerableFlag
ExpressibleByArgument
ParsableArguments
ArgumentSetProvider
StandardError
_WrappedParsableCommand
CodingKeys
ParsableArgumentsValidator
ParsableArgumentsValidatorError
ParsableCommand
ArgumentDecoder
ParsedArgumentsContainer
ArrayWrapperProtocol
DecodedArguments
SingleValueDecoder
ArrayWrapper
UnkeyedContainer
SingleValueContainer
Error
ArgumentHelpOptionProvider
ArgumentDefinition
ParsingStrategy
Update
Help
Kind
Options
ArgumentSet
CommandError
AutodetectedGenerateCompletions
GenerateCompletions
HelpRequested
CodingKeys
InputOrigin
Element
Name
ParsedWrapper
Value
DecodableParsedWrapper
Parsed
ParsedValues
Element
InputKey
ParserError
InternalParseError
InputIndex
ParsedArgument
Value
Element
Index
SplitArguments
SubIndex
HelpCommand
CodingKeys
Element
HelpGenerator
Section
DiscussionSection
Usage
Header
MessageInfo
Tree
InitializationError
ArgumentParserToolInfo
ToolInfoHeader
ToolInfoV0
CommandInfoV0
ArgumentInfoV0
NameInfoV0
KindV0
CodingKeys
zombie-ready-for-deallocation
Metadata allocation at: 0x
  No stcktrace available
Print the target's metadata allocations.
backtraceOptions
Print the contents of the target's protocol conformance cache.
Swift._ContiguousArrayStorage
Swift runtime debug tool
Failed to create inspector for process id 
No process found matching 
The pid or partial name of the target process
Fork a corpse of the target process
Creates a low-level copy of the target process, allowing the target to immediately resume execution before swift-inspect has completed its work.
Show the backtrace for each allocation
Show a long-form backtrace for each allocation
Print information about array objects in the target.
_TtC13swift_inspect19DarwinRemoteProcess
task
context
symbolicator
swiftCore
swiftConcurrency
$__lazy_storage_$_threadInfos
_TtCC13swift_inspect19DarwinRemoteProcessP33_D5D8135E9301B5EDF79E501CF67907C38PortList
buffer
unable to get info for thread port 
unable to gather threads for process: 
unable to get task for pid 
libswiftCore.dylib
libswift_Concurrency.dylib
v24@?0{CSTypeRef=QQ}8
unable to fork corpse for pid 
Print the target's metadata cache nodes.
  No stacktrace available
Print the target's generic metadata allocations.
swift_inspect/Symbolication+Extensions.swift
Unable to look up 
 in Symbolication
/System/Library/PrivateFrameworks/Symbolication.framework/Symbolication
/System/Library/PrivateFrameworks/CoreSymbolication.framework/CoreSymbolication
CSSymbolOwnerGetName
CSSymbolGetSymbolOwner
CSSymbolicatorGetSymbolWithAddressAtTime
task_enumerate_malloc_blocks
task_stop_peeking
CSSymbolicatorForeachSymbolOwnerAtTime
CSSymbolOwnerGetBaseAddress
CSSymbolGetRange
CSSymbolOwnerGetSymbolWithMangledName
task_peek_string
task_start_peeking failed: 
task_start_peeking
CSSymbolicatorGetSymbolOwnerWithNameAtTime
CSSymbolicatorCreateWithTask
_TtC13swift_inspectP33_31DA31BAE2EEE32C2751846C4175259517ConcurrencyDumper
process
jobMetadata
taskMetadata
$__lazy_storage_$_heapInfo
$__lazy_storage_$_threadCurrentTasks
$__lazy_storage_$_tasks
metadataIsActorCache
metadataNameCache
 - current task: 
<unknown task 0x
  no threads with active tasks
<unknown class name>
    no jobs queued
    waiting on thread: port=0x
 (unknown thread ID)
<internal job 0x
distributedRemote
priorityEscalated
warning: unable to decode is-running state of target tasks, running state and async backtraces will not be printed
 enqueuePriority=
async backtrace: 
                 
resume function: 
task allocator: 
waiting on thread: port=
waiting on thread: port=0x
current task on thread 
current task on thread 0x
 resume partial function for 
statusRecordLocked
Error getting info for async task 0x
Inconsistent data detected! Child task 
 has unknown metadata 
_swift_concurrency_debug_jobMetadata
_swift_concurrency_debug_asyncTaskMetadata
Print information about the target's concurrency runtime.
    opts="$opts 
    if [[ $COMP_CWORD == "
" ]]; then
        COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
        return
    fi
    case ${COMP_WORDS[
    return
    ;;
    COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
cur="${COMP_WORDS[COMP_CWORD]}"
prev="${COMP_WORDS[COMP_CWORD-1]}"
COMPREPLY=()
COMPREPLY=( $(compgen -W "$("${COMP_WORDS[0]}" 
 "${COMP_WORDS[@]}")" -- "$cur") )
COMPREPLY=( $(compgen -W "
COMPREPLY=( $(compgen -d -- "$cur") )
COMPREPLY=( $(compgen -f -- "$cur") )
$("${COMP_WORDS[0]}" ---completion 
 "${COMP_WORDS[@]}")
ArgumentParser/CompletionsGenerator.swift
Invalid CompletionShell: 
SHELL
function __fish_
_using_command
    set cmd (commandline -opc)
    if [ (count $cmd) -eq (count $argv) ]
        for i in (seq (count $argv))
            if [ $cmd[$i] != $argv[$i] ]
                return 1
            end
        end
        return 0
    end
    return 1
-f -a '(command 
 -- --custom (commandline -opc)[1..-1])'
-f -a '(__fish_complete_directories)'
-f -a '(for i in 
local context state state_descr line
_commandname=$words[1]
typeset -A opt_args
_custom_completion() {
    local completions=("${(@f)$($*)}")
    _describe '' completions
'(-): :->command'
case $state in
    (command)
        local subcommands
        subcommands=(
        )
        _describe "subcommand" subcommands
        ;;
    (arg)
        case ${words[1]} in
        esac
        ;;
esac
() {
    integer ret=1
    local -a args
    args+=(
    )
    _arguments -w -s -S $args[@] && ret=0
    return ret
{_custom_completion $_
{local -a list; list=(${(f)"$(
)"}); _describe '''' list}
Show help information.
ArgumentParser/NameSpecification.swift
' has not characters to form short option name.
Show the version.
ArgumentParser/Argument.swift
--------------------------------------------------------------------
Can't read a value from a parsable
argument definition.
This error indicates that a property declared with an `@Argument`,
`@Option`, `@Flag`, or `@OptionGroup` property wrapper was neither
initialized to a value nor decoded from command-line arguments.
To get a valid value, either call one of the static parsing methods
(`parse`, `parseAsRoot`, or `main`) or define an initializer that
initializes _every_ property of your parsable type.
--------------------------------------------------------------------
Argument(*definition*)
--experimental-dump-help
ArgumentParser/Flag.swift
Flag(*definition*)
offset element 
ArgumentParser/Option.swift
Option(*definition*)
ArgumentParser/OptionGroup.swift
OptionGroup(*definition*)
Fatal error
Down-casted Array element failed to match the target type
Expected 
Tree<ParsableCommand.Type>
NSArray element failed to match the Swift Array Element type
Expected 
_TtC14ArgumentParser15ArgumentDecoder
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
ArgumentParser/ArgumentDecoder.swift
experimental-dump-help
ArgumentParser/CommandParser.swift
Unexpected error: 
The ParsableCommand "
" can't have itself as its own subcommand.
generateCompletionScript
ArgumentParser/Parsed.swift
Trying to get the argument set from a resolved/parsed property.
Show subcommand help information.
 <subcommand>' for detailed help.
ArgumentParser/HelpGenerator.swift
' for more information.
Unspecified version
ArgumentParser/UsageGenerator.swift
preferredName cannot be nil for named arguments
Missing required subcommand.
Invalid option: -
Invalid option: 
' does not take any value, but '
' was specified.
Internal error. Invalid state while parsing command-line arguments.
Internal error. Parsing command-line arguments hit unimplemented code path.
Can't generate completion scripts for '
Please use --generate-completion-script=<shell> with one of:
    
Can't autodetect a supported shell.
Please use --generate-completion-script=<shell> with one of:
    
Unknown option '
'. Did you mean '
Missing value for '
 unexpected arguments: '
Unexpected argument '
Value to be set with 
 had already been set with 
Missing one of: '
Missing expected argument '
No value set for non-argument var 
. Replace with a static variable, or let constant.
' is invalid for '
' is invalid for '<
element
parent
children
longWithSingleDash
long
short
positional
option
flag
serializationVersion
defaultSubcommand
yypG
SvSg
SvSgXCSg
SvSg_Spy
GSgAAtXCSg
SvSg_AA
tXCSg
SvSg_SPy
GSgAAtXCSg
_A2At
SiSPyAAGIgyyy_
Igy_
_pXpG
ySSG
ySbG
AAIgyy_
AAIegyy_
$sST
$s13swift_inspect13RemoteProcessP
ySSG
ySbG
Si5index_
4taskt
ySi5index_
4tasktG
Si5level_Sb9lastChild
4taskt
ySi5level_Sb9lastChild
4tasktG
8threadID_AA11currentTaskt
8threadID_AB11currentTasktG
Igy_
SaySSG
SnySiG
ACSpySVSgGtXC
AAXC
ABtXC
_SvSgAAyAA_AbASpy
GAAtXCtXC
yAAXBtXC
AA_SPy
GtXC
AA_SPy
yXlXC
8threadID_AA11currentTasktGSg
SSSgG
_SStG
_ABtG
_AAt
ySnySiGG
SSSgG
SayABGG
_pXpG
SaySSG
$sSY
$ss12CaseIterableP
ySSG
ySSG
SnySiG
ySnySiGG
qd__
$s14ArgumentParser13ParsedWrapperP
Sayqd__GSg
SSqd__
_pIeggrzo_
Sayqd__G
ypSg
_pIeggrzo_
qd__XMT
$ss32ExpressibleByStringInterpolationP
$ss26ExpressibleByStringLiteralP
$ss43ExpressibleByExtendedGraphemeClusterLiteralP
$ss33ExpressibleByUnicodeScalarLiteralP
SSSg
SaySSG10extensions_t
SaySSGAAc
_pXpSg
SbSg
Sbz_Xx
$ss25ExpressibleByArrayLiteralP
SS_Sb14withSingleDasht
SJ_Sb14allowingJoinedt
_pXpG
$s14ArgumentParser14EnumerableFlagP
$s14ArgumentParser013ExpressibleByA0P
yypG
$s14ArgumentParser17ParsableArgumentsP
$s14ArgumentParser0A11SetProviderP
SSSg5label_yp5valuet
_pSg
SSypSgIeggr_
S2SSgIeggr_
$s14ArgumentParser26ParsableArgumentsValidator33_D8B6916CE93C2FC7F7BEDE789FAE65F8LLP
$s14ArgumentParser31ParsableArgumentsValidatorErrorP
_pXpG
$s14ArgumentParser15ParsableCommandP
_SitG
_Sit
_pXp
ySsG
_SStG
_SSt
ySi_
$s14ArgumentParser20ArrayWrapperProtocolP
_pXp
$ss30KeyedDecodingContainerProtocolP
SayypG
yypG
yyXlG
_pXpGG
SaySSG_SSt
ySaySSG_SStG
ySiG
SaySiG
ySaySiGG
_pXp_AA_pXpt
SayxG
$s14ArgumentParser0A18HelpOptionProviderP
ztKc
ztKc
SgSS
ztKc
$ss10SetAlgebraP
$ss9OptionSetP
$sST
$sSl
$sSK
$sSk
_SStSg
SSxSgIeggr_
xXMT
_pSg
_pXmTSg
ySSG
ySbG
SSXMT
$s14ArgumentParser22DecodableParsedWrapperP
5Value
_pXpGADG
SSSg5shell_t
_SStG
8previous_AA9duplicateSaySSG13originalInputt
6forKey_t
SgSS
6forKey
_pSg13originalErrort
ypSg_
6forKeyt
Si_Sit
_SSt
Sb8inserted_
17memberAfterInsertt
ySaySSGG
SaySSGSg
ySSSgG
yAAyABySaySSSgGACGGSSGG
yAAySaySSSgGACGGSSG
ySaySSSgGACGG
ySaySSSgGABG
SaySSSgG
ySay
GGSSG
ySay
SS4text_t
SS7message_SS5usageSS4helpt
SS7message_
8exitCodet
SaySsG
yxGSgXw
yxGG
_pXpGACG
_pXpGACSgIegnr_
_ypt
SaySSGSg
SaySSG
$sSY
SSSg
Size
_options
_backtraceOptions
thread_id
thread_handle
dispatch_qaddr
address
size
location
length
options
backtraceOptions
_flags
_file
_lbfsize
_cookie
_close
_read
_seek
_write
_extra
_ubuf
_nbuf
_blksize
_offset
_base
_size
_options
options
description
_nameOrPid
_forkCorpse
_backtrace
_backtraceLong
backtrace
backtraceLong
nameOrPid
forkCorpse
_options
options
task
context
symbolicator
swiftCore
swiftConcurrency
$__lazy_storage_$_threadInfos
buffer
threadID
tlsStart
kernelObject
Element
Iterator
ProcessIdentifier
ProcessHandle
_options
options
_options
_backtraceOptions
allocation
name
isArrayOfClass
options
backtraceOptions
underlying
context
process
jobMetadata
taskMetadata
$__lazy_storage_$_heapInfo
$__lazy_storage_$_threadCurrentTasks
$__lazy_storage_$_tasks
metadataIsActorCache
metadataNameCache
tasks
jobs
actors
address
kind
enqueuePriority
isChildTask
isFuture
isGroupChildTask
isAsyncLetTask
maxPriority
isCancelled
isStatusRecordLocked
isEscalated
hasIsRunning
isRunning
isEnqueued
threadPort
runJob
allocatorSlabPtr
allocatorTotalSize
allocatorTotalChunks
childTasks
asyncBacktrace
parent
_options
options
RawValue
AllCases
rawValue
Value
_parsedValue
base
StringInterpolation
StringLiteralType
ExtendedGraphemeClusterLiteralType
UnicodeScalarLiteralType
abstract
discussion
valueName
shouldDisplay
kind
list
file
shellCommand
custom
default
directory
RawValue
message
rawValue
base
helpRequest
dumpRequest
Value
_parsedValue
base
prefixedNo
prefixedEnableDisable
exclusive
chooseFirst
chooseLast
ArrayLiteralElement
elements
base
customLong
customShort
long
short
Value
_parsedValue
base
Value
_parsedValue
_hiddenFromHelp
_dummy
commandName
_superCommandName
abstract
discussion
version
shouldDisplay
subcommands
defaultSubcommand
helpNames
_options
options
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
underlying
parsedElement
type
value
wrongKeyType
topLevelHasNoUnkeyedContainer
topLevelHasNoSingleValueContainer
singleValueDecoderHasNoContainer
base
currentIndex
array
default
scanningForValue
unconditional
upToNextOption
allRemainingInput
kind
help
completion
parsingStrategy
update
initial
options
abstract
discussion
valueName
shouldDisplay
defaultValue
keys
allValues
isComposite
nullary
unary
named
positional
rawValue
ArrayLiteralElement
RawValue
Element
Element
Iterator
Index
SubSequence
Indices
content
namePositions
commandStack
parserError
_generateCompletionScript
generateCompletionScript
_elements
ArrayLiteralElement
argumentIndex
defaultValue
long
short
longWithSingleDash
value
definition
value
inputOrigin
shouldClearArrayIfParsed
elements
originalInput
rawValue
RawValue
completionScriptRequested
completionScriptCustomResponse
unsupportedShell
unknownOption
invalidOption
nonAlphanumericShortOption
missingValueForOption
unexpectedValueForOption
unexpectedExtraValues
duplicateExclusiveValues
noValue
unableToParseValue
userValidationError
noArguments
helpRequested
versionRequested
dumpHelpRequested
notImplemented
invalidState
missingSubcommand
wrongType
subcommandLevelMismatch
subcommandLevelMissing
subcommandLevelDuplicated
subcommandNameMismatch
expectedCommandButNoneFound
_elements
firstUnused
originalInput
inputIndex
subIndex
value
index
option
terminator
name
nameWithValue
rawValue
RawValue
complete
_subcommands
_help
commandStack
subcommands
help
header
elements
discussion
isSubcommands
commandStack
abstract
usage
sections
discussionSections
label
positionalArguments
subcommands
options
components
title
content
help
validation
other
element
parent
children
recursiveSubcommand
RawValue
serializationVersion
command
superCommands
commandName
abstract
discussion
defaultSubcommand
subcommands
arguments
kind
shouldDisplay
isOptional
isRepeating
names
preferredName
valueName
defaultValue
allValues
name
long
short
longWithSingleDash
positional
option
flag
idle
scheduled
running
zombie-latching
bash
fish
CSTypeRef
swift_metadata_allocation
vm_range_t
thread_identifier_info
DumpRawMetadata
CodingKeys
Range
__sFILE
__sbuf
DumpConformanceCache
CodingKeys
Error
SwiftInspect
BacktraceOptions
UniversalOptions
CodingKeys
DumpArrays
CodingKeys
DarwinRemoteProcess
PortList
ThreadInfo
DumpCacheNodes
CodingKeys
DumpGenericMetadata
CodingKeys
Metadata
swift_inspect
RemoteProcess
ProcessIdentifier ProcessHandle
File
ConcurrencyDumper
TaskInfo
HeapInfo
DumpConcurrency
CodingKeys
version
@help
l)Cb
CompletionShell
Argument
ArgumentArrayParsingStrategy
ArgumentHelp
CompletionKind
Kind
ValidationError
ExitCode
CleanExit
Representation
Flag
FlagInversion
FlagExclusivity
Representation
NameSpecification
Element
Representation
ArgumentParser
Option
SingleValueParsingStrategy
ArrayParsingStrategy
OptionGroup
CommandConfiguration
EnumerableFlag
ExpressibleByArgument
ParsableArguments
ArgumentSetProvider
StandardError
_WrappedParsableCommand
CodingKeys
ParsableArgumentsValidator
ParsableArgumentsValidatorError
ParsableCommand
ArgumentDecoder
ParsedArgumentsContainer
ArrayWrapperProtocol
DecodedArguments
SingleValueDecoder
ArrayWrapper
UnkeyedContainer
SingleValueContainer
Error
ArgumentHelpOptionProvider
ArgumentDefinition
ParsingStrategy
Update
Help
Kind
Options
ArgumentSet
CommandError
AutodetectedGenerateCompletions
GenerateCompletions
HelpRequested
CodingKeys
InputOrigin
Element
Name
ParsedWrapper
Value
DecodableParsedWrapper
Parsed
 @,m
ParsedValues
Element
InputKey
ParserError
InternalParseError
InputIndex
ParsedArgument
Value
Element
Index
SplitArguments
SubIndex
HelpCommand
CodingKeys
Element
HelpGenerator
Section
DiscussionSection
Usage
Header
MessageInfo
Tree
InitializationError
&-D5;
ArgumentParserToolInfo
ToolInfoHeader
ToolInfoV0
CommandInfoV0
ArgumentInfoV0
NameInfoV0
KindV0
CodingKeys
zombie-ready-for-deallocation
Metadata allocation at: 0x
  No stcktrace available
Print the target's metadata allocations.
backtraceOptions
Print the contents of the target's protocol conformance cache.
Swift._ContiguousArrayStorage
Swift runtime debug tool
Failed to create inspector for process id 
No process found matching 
The pid or partial name of the target process
Fork a corpse of the target process
Creates a low-level copy of the target process, allowing the target to immediately resume execution before swift-inspect has completed its work.
Show the backtrace for each allocation
Show a long-form backtrace for each allocation
Print information about array objects in the target.
_TtC13swift_inspect19DarwinRemoteProcess
task
context
symbolicator
swiftCore
swiftConcurrency
$__lazy_storage_$_threadInfos
_TtCC13swift_inspect19DarwinRemoteProcessP33_D5D8135E9301B5EDF79E501CF67907C38PortList
buffer
unable to get info for thread port 
unable to gather threads for process: 
unable to get task for pid 
libswiftCore.dylib
libswift_Concurrency.dylib
v24@?0{CSTypeRef=QQ}8
unable to fork corpse for pid 
Print the target's metadata cache nodes.
  No stacktrace available
Print the target's generic metadata allocations.
swift_inspect/Symbolication+Extensions.swift
Unable to look up 
 in Symbolication
/System/Library/PrivateFrameworks/Symbolication.framework/Symbolication
/System/Library/PrivateFrameworks/CoreSymbolication.framework/CoreSymbolication
CSSymbolOwnerGetName
CSSymbolGetSymbolOwner
CSSymbolicatorGetSymbolWithAddressAtTime
task_enumerate_malloc_blocks
task_stop_peeking
CSSymbolicatorForeachSymbolOwnerAtTime
CSSymbolOwnerGetBaseAddress
CSSymbolGetRange
CSSymbolOwnerGetSymbolWithMangledName
task_peek_string
task_start_peeking failed: 
task_start_peeking
CSSymbolicatorGetSymbolOwnerWithNameAtTime
CSSymbolicatorCreateWithTask
_TtC13swift_inspectP33_31DA31BAE2EEE32C2751846C4175259517ConcurrencyDumper
process
jobMetadata
taskMetadata
$__lazy_storage_$_heapInfo
$__lazy_storage_$_threadCurrentTasks
$__lazy_storage_$_tasks
metadataIsActorCache
metadataNameCache
 - current task: 
<unknown task 0x
  no threads with active tasks
<unknown class name>
    no jobs queued
    waiting on thread: port=0x
 (unknown thread ID)
<internal job 0x
distributedRemote
priorityEscalated
warning: unable to decode is-running state of target tasks, running state and async backtraces will not be printed
 enqueuePriority=
async backtrace: 
                 
resume function: 
task allocator: 
waiting on thread: port=
waiting on thread: port=0x
current task on thread 
current task on thread 0x
 resume partial function for 
statusRecordLocked
Error getting info for async task 0x
Inconsistent data detected! Child task 
 has unknown metadata 
_swift_concurrency_debug_jobMetadata
_swift_concurrency_debug_asyncTaskMetadata
Print information about the target's concurrency runtime.
    opts="$opts 
    if [[ $COMP_CWORD == "
" ]]; then
        COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
        return
    fi
    case ${COMP_WORDS[
    return
    ;;
    COMPREPLY=( $(compgen -W "$opts" -- "$cur") )
cur="${COMP_WORDS[COMP_CWORD]}"
prev="${COMP_WORDS[COMP_CWORD-1]}"
COMPREPLY=()
COMPREPLY=( $(compgen -W "$("${COMP_WORDS[0]}" 
 "${COMP_WORDS[@]}")" -- "$cur") )
COMPREPLY=( $(compgen -W "
COMPREPLY=( $(compgen -d -- "$cur") )
COMPREPLY=( $(compgen -f -- "$cur") )
$("${COMP_WORDS[0]}" ---completion 
 "${COMP_WORDS[@]}")
ArgumentParser/CompletionsGenerator.swift
Invalid CompletionShell: 
SHELL
function __fish_
_using_command
    set cmd (commandline -opc)
    if [ (count $cmd) -eq (count $argv) ]
        for i in (seq (count $argv))
            if [ $cmd[$i] != $argv[$i] ]
                return 1
            end
        end
        return 0
    end
    return 1
-f -a '(command 
 -- --custom (commandline -opc)[1..-1])'
-f -a '(__fish_complete_directories)'
-f -a '(for i in 
local context state state_descr line
_commandname=$words[1]
typeset -A opt_args
_custom_completion() {
    local completions=("${(@f)$($*)}")
    _describe '' completions
'(-): :->command'
case $state in
    (command)
        local subcommands
        subcommands=(
        )
        _describe "subcommand" subcommands
        ;;
    (arg)
        case ${words[1]} in
        esac
        ;;
esac
() {
    integer ret=1
    local -a args
    args+=(
    )
    _arguments -w -s -S $args[@] && ret=0
    return ret
{_custom_completion $_
{local -a list; list=(${(f)"$(
)"}); _describe '''' list}
Show help information.
ArgumentParser/NameSpecification.swift
' has not characters to form short option name.
Show the version.
ArgumentParser/Argument.swift
--------------------------------------------------------------------
Can't read a value from a parsable
argument definition.
This error indicates that a property declared with an `@Argument`,
`@Option`, `@Flag`, or `@OptionGroup` property wrapper was neither
initialized to a value nor decoded from command-line arguments.
To get a valid value, either call one of the static parsing methods
(`parse`, `parseAsRoot`, or `main`) or define an initializer that
initializes _every_ property of your parsable type.
--------------------------------------------------------------------
Argument(*definition*)
--experimental-dump-help
ArgumentParser/Flag.swift
Flag(*definition*)
offset element 
ArgumentParser/Option.swift
Option(*definition*)
ArgumentParser/OptionGroup.swift
OptionGroup(*definition*)
Fatal error
Down-casted Array element failed to match the target type
Expected 
Tree<ParsableCommand.Type>
NSArray element failed to match the Swift Array Element type
Expected 
_TtC14ArgumentParser15ArgumentDecoder
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
ArgumentParser/ArgumentDecoder.swift
experimental-dump-help
ArgumentParser/CommandParser.swift
Unexpected error: 
The ParsableCommand "
" can't have itself as its own subcommand.
generateCompletionScript
ArgumentParser/Parsed.swift
Trying to get the argument set from a resolved/parsed property.
Show subcommand help information.
 <subcommand>' for detailed help.
ArgumentParser/HelpGenerator.swift
' for more information.
Unspecified version
ArgumentParser/UsageGenerator.swift
preferredName cannot be nil for named arguments
Missing required subcommand.
Invalid option: -
Invalid option: 
' does not take any value, but '
' was specified.
Internal error. Invalid state while parsing command-line arguments.
Internal error. Parsing command-line arguments hit unimplemented code path.
Can't generate completion scripts for '
Please use --generate-completion-script=<shell> with one of:
    
Can't autodetect a supported shell.
Please use --generate-completion-script=<shell> with one of:
    
Unknown option '
'. Did you mean '
Missing value for '
 unexpected arguments: '
Unexpected argument '
Value to be set with 
 had already been set with 
Missing one of: '
Missing expected argument '
No value set for non-argument var 
. Replace with a static variable, or let constant.
' is invalid for '
' is invalid for '<
element
parent
children
longWithSingleDash
long
short
positional
option
flag
serializationVersion
defaultSubcommand
yypG
SvSg
SvSgXCSg
SvSg_Spy
GSgAAtXCSg
SvSg_AA
tXCSg
SvSg_SPy
GSgAAtXCSg
_A2At
SiSPyAAGIgyyy_
Igy_
_pXpG
ySSG
ySbG
AAIgyy_
AAIegyy_
$sST
$s13swift_inspect13RemoteProcessP
ySSG
ySbG
Si5index_
4taskt
ySi5index_
4tasktG
Si5level_Sb9lastChild
4taskt
ySi5level_Sb9lastChild
4tasktG
8threadID_AA11currentTaskt
8threadID_AB11currentTasktG
Igy_
SaySSG
SnySiG
ACSpySVSgGtXC
AAXC
ABtXC
_SvSgAAyAA_AbASpy
GAAtXCtXC
yAAXBtXC
AA_SPy
GtXC
AA_SPy
yXlXC
8threadID_AA11currentTasktGSg
SSSgG
_SStG
_ABtG
_AAt
ySnySiGG
SSSgG
SayABGG
_pXpG
SaySSG
$sSY
$ss12CaseIterableP
ySSG
ySSG
SnySiG
ySnySiGG
qd__
$s14ArgumentParser13ParsedWrapperP
Sayqd__GSg
SSqd__
_pIeggrzo_
Sayqd__G
ypSg
_pIeggrzo_
qd__XMT
$ss32ExpressibleByStringInterpolationP
$ss26ExpressibleByStringLiteralP
$ss43ExpressibleByExtendedGraphemeClusterLiteralP
$ss33ExpressibleByUnicodeScalarLiteralP
SSSg
SaySSG10extensions_t
SaySSGAAc
_pXpSg
SbSg
Sbz_Xx
$ss25ExpressibleByArrayLiteralP
SS_Sb14withSingleDasht
SJ_Sb14allowingJoinedt
_pXpG
$s14ArgumentParser14EnumerableFlagP
$s14ArgumentParser013ExpressibleByA0P
yypG
$s14ArgumentParser17ParsableArgumentsP
$s14ArgumentParser0A11SetProviderP
SSSg5label_yp5valuet
_pSg
SSypSgIeggr_
S2SSgIeggr_
$s14ArgumentParser26ParsableArgumentsValidator33_D8B6916CE93C2FC7F7BEDE789FAE65F8LLP
$s14ArgumentParser31ParsableArgumentsValidatorErrorP
_pXpG
$s14ArgumentParser15ParsableCommandP
_SitG
_Sit
_pXp
ySsG
_SStG
_SSt
ySi_
$s14ArgumentParser20ArrayWrapperProtocolP
_pXp
$ss30KeyedDecodingContainerProtocolP
SayypG
yypG
yyXlG
_pXpGG
SaySSG_SSt
ySaySSG_SStG
ySiG
SaySiG
ySaySiGG
_pXp_AA_pXpt
SayxG
$s14ArgumentParser0A18HelpOptionProviderP
ztKc
ztKc
SgSS
ztKc
$ss10SetAlgebraP
$ss9OptionSetP
$sST
$sSl
$sSK
$sSk
_SStSg
SSxSgIeggr_
xXMT
_pSg
_pXmTSg
ySSG
ySbG
SSXMT
$s14ArgumentParser22DecodableParsedWrapperP
5Value
_pXpGADG
SSSg5shell_t
_SStG
8previous_AA9duplicateSaySSG13originalInputt
6forKey_t
SgSS
6forKey
_pSg13originalErrort
ypSg_
6forKeyt
Si_Sit
_SSt
Sb8inserted_
17memberAfterInsertt
ySaySSGG
SaySSGSg
ySSSgG
yAAyABySaySSSgGACGGSSGG
yAAySaySSSgGACGGSSG
ySaySSSgGACGG
ySaySSSgGABG
SaySSSgG
ySay
GGSSG
ySay
SS4text_t
SS7message_SS5usageSS4helpt
SS7message_
8exitCodet
SaySsG
yxGSgXw
yxGG
_pXpGACG
_pXpGACSgIegnr_
_ypt
SaySSGSg
SaySSG
$sSY
SSSg
Size
_options
_backtraceOptions
thread_id
thread_handle
dispatch_qaddr
address
size
location
length
options
backtraceOptions
_flags
_file
_lbfsize
_cookie
_close
_read
_seek
_write
_extra
_ubuf
_nbuf
_blksize
_offset
_base
_size
_options
options
description
_nameOrPid
_forkCorpse
_backtrace
_backtraceLong
backtrace
backtraceLong
nameOrPid
forkCorpse
_options
options
task
context
symbolicator
swiftCore
swiftConcurrency
$__lazy_storage_$_threadInfos
buffer
threadID
tlsStart
kernelObject
Element
Iterator
ProcessIdentifier
ProcessHandle
_options
options
_options
_backtraceOptions
allocation
name
isArrayOfClass
options
backtraceOptions
underlying
context
process
jobMetadata
taskMetadata
$__lazy_storage_$_heapInfo
$__lazy_storage_$_threadCurrentTasks
$__lazy_storage_$_tasks
metadataIsActorCache
metadataNameCache
tasks
jobs
actors
address
kind
enqueuePriority
isChildTask
isFuture
isGroupChildTask
isAsyncLetTask
maxPriority
isCancelled
isStatusRecordLocked
isEscalated
hasIsRunning
isRunning
isEnqueued
threadPort
runJob
allocatorSlabPtr
allocatorTotalSize
allocatorTotalChunks
childTasks
asyncBacktrace
parent
_options
options
RawValue
AllCases
rawValue
Value
_parsedValue
base
StringInterpolation
StringLiteralType
ExtendedGraphemeClusterLiteralType
UnicodeScalarLiteralType
abstract
discussion
valueName
shouldDisplay
kind
list
file
shellCommand
custom
default
directory
RawValue
message
rawValue
base
helpRequest
dumpRequest
Value
_parsedValue
base
prefixedNo
prefixedEnableDisable
exclusive
chooseFirst
chooseLast
ArrayLiteralElement
elements
base
customLong
customShort
long
short
Value
_parsedValue
base
Value
_parsedValue
_hiddenFromHelp
_dummy
commandName
_superCommandName
abstract
discussion
version
shouldDisplay
subcommands
defaultSubcommand
helpNames
_options
options
values
usedOrigins
nextCommandIndex
previouslyDecoded
codingPath
userInfo
decoder
underlying
parsedElement
type
value
wrongKeyType
topLevelHasNoUnkeyedContainer
topLevelHasNoSingleValueContainer
singleValueDecoderHasNoContainer
base
currentIndex
array
default
scanningForValue
unconditional
upToNextOption
allRemainingInput
kind
help
completion
parsingStrategy
update
initial
options
abstract
discussion
valueName
shouldDisplay
defaultValue
keys
allValues
isComposite
nullary
unary
named
positional
rawValue
ArrayLiteralElement
RawValue
Element
Element
Iterator
Index
SubSequence
Indices
content
namePositions
commandStack
parserError
_generateCompletionScript
generateCompletionScript
_elements
ArrayLiteralElement
argumentIndex
defaultValue
long
short
longWithSingleDash
value
definition
value
inputOrigin
shouldClearArrayIfParsed
elements
originalInput
rawValue
RawValue
completionScriptRequested
completionScriptCustomResponse
unsupportedShell
unknownOption
invalidOption
nonAlphanumericShortOption
missingValueForOption
unexpectedValueForOption
unexpectedExtraValues
duplicateExclusiveValues
noValue
unableToParseValue
userValidationError
noArguments
helpRequested
versionRequested
dumpHelpRequested
notImplemented
invalidState
missingSubcommand
wrongType
subcommandLevelMismatch
subcommandLevelMissing
subcommandLevelDuplicated
subcommandNameMismatch
expectedCommandButNoneFound
_elements
firstUnused
originalInput
inputIndex
subIndex
value
index
option
terminator
name
nameWithValue
rawValue
RawValue
complete
_subcommands
_help
commandStack
subcommands
help
header
elements
discussion
isSubcommands
commandStack
abstract
usage
sections
discussionSections
label
positionalArguments
subcommands
options
components
title
content
help
validation
other
element
parent
children
recursiveSubcommand
RawValue
serializationVersion
command
superCommands
commandName
abstract
discussion
defaultSubcommand
subcommands
arguments
kind
shouldDisplay
isOptional
isRepeating
names
preferredName
valueName
defaultValue
allValues
name
long
short
longWithSingleDash
positional
option
flag
idle
scheduled
running
zombie-latching
bash
fish
