@(#)PROGRAM:PlatformSSO  PROJECT:AppSSO-1
com.apple.PlatformSSO
-[POKeychainHelper addTokens:metaData:toKeychainForService:username:]
-[POKeychainHelper retrieveTokensFromKeychainForService:username:returningTokens:metaData:]
v8@?0
com.apple.AppSSO
POKeychainHelper
%@.%@
%@.%@.%@.%@.%@
%@.%@.%@
%@.%@
APPLE
POJWT
com.apple.PlatformPSSO.daemon-queue
-[PODaemonConnection init]
-[PODaemonConnection dealloc]
Failed to connect to PSSO daemon
v16@?0@"NSError"8
com.apple.PlatformSSO.daemon-xpc
PODaemonConnection
kTokenExpiration
kTokenReceived
refresh_token
expires_in
created
v32@?0@8Q16^B24
POUserConfiguration
PODeviceConfiguration
-[POExtensionAgentProcess connectionInvalidated]
-[POExtensionAgentProcess keyProxyEndpointForKeyType:]
-[POExtensionAgentProcess identityForKeyType:]
-[POExtensionAgentProcess invalidateAllKeyProxies]
-[POExtensionAgentProcess isCallerCurrentSSOExtension]
com.apple.private.platformsso.loginmanager
-[POExtensionAgentProcess isDeviceRegisteredWithCompletion:]
-[POExtensionAgentProcess isUserRegisteredWithCompletion:]
-[POExtensionAgentProcess registrationTokenWithCompletion:]
-[POExtensionAgentProcess setRegistrationToken:completion:]
not impl
-[POExtensionAgentProcess ssoTokensWithCompletion:]
-[POExtensionAgentProcess setSsoTokens:completion:]
-[POExtensionAgentProcess loginConfigurationWithCompletion:]
-[POExtensionAgentProcess setLoginConfiguration:completion:]
Token endpoint URL is not approved profile URL.
Nonce endpoint URL is not approved profile URL.
Refresh endpoint URL is not approved profile URL.
SELF LIKE[c] %@
-[POExtensionAgentProcess setCertificateData:keyType:completion:]
-[POExtensionAgentProcess secKeyProxyEndpointForKeyType:completion:]
-[POExtensionAgentProcess attestKey:clientDataHash:completion:]
-[POExtensionAgentProcess copyDeviceAttestationCertificateWithCompletion:]
-[POExtensionAgentProcess userNeedsReauthenticationWithCompletion:]
v16@?0@"NSNotification"8
-[POExtensionAgentProcess deviceRegistrationsNeedsRepairWithCompletion:]
-[POExtensionAgentProcess userRegistrationsNeedsRepairWithCompletion:]
-[POExtensionAgentProcess presentRegistrationViewControllerWithCompletion:]
POExtensionAgentProcess
ASAuthorizationErrorDomain
com.apple.PlatformSSO.auth
P-256
POSecKeyHelper
PODirectoryServices
POES256JWTSigningAlgorithm
com.apple.PlatformPSSO.login-manager-queue
-[POServiceLoginManagerConnection init]
-[POServiceLoginManagerConnection dealloc]
-[POServiceLoginManagerConnection invalidate]
Failed to connect to PSSO service
com.apple.PlatformSSO.service-login-manager-xpc
POServiceLoginManagerConnection
-[POExtension unload]
-[POExtension beginDeviceRegistrationUsingOptions:completion:]
v16@?0q8
v24@?0@"SORemoteExtensionViewController"8@"NSError"16
-[POExtension beginUserRegistrationUsingUserName:authenticationMethod:options:completion:]
-[POExtension registrationDidComplete]
-[POExtension presentAuthorizationViewControllerWithHints:completion:]
No extension authorization view controller
-[POExtension authorizationDidCompleteWithCredential:error:]
POExtension
LOGIN
REGISTER
IGNORE
LOGIN_USER
REGISTER_DEVICE
REGISTER_USER
account_name
extension_identifier
com.apple.PlatformSSO.authenticationCompleted
authenticationResult
com.apple.ScreensaverRuleCheck
-[POAgentAuthenticationProcess initWithDelegate:]
com.apple.PlatformSSO.notifications
-[POAgentAuthenticationProcess handleScreenUnlock]
-[POAgentAuthenticationProcess handleAgentStartup]
-[POAgentAuthenticationProcess handleNetworkChange]
-[POAgentAuthenticationProcess handleScreenSaverRule]
v20@?0B8@"NSError"12
-[POAgentAuthenticationProcess performLoginForCurrentUser]
v24@?0Q8@"NSData"16
-[POAgentAuthenticationProcess requestUserAuthenticationWithUserInfo:]
-[POAgentAuthenticationProcess registrationTokenForExtensionIdentifier:]
-[POAgentAuthenticationProcess handleUserNeedsReauthenticationAfterDelay:]
-[POAgentAuthenticationProcess handleUserCredentialNeededAtLogin:returningContext:]
-[POAgentAuthenticationProcess _startDeviceRegistration]
-[POAgentAuthenticationProcess _startDeviceRegistration]_block_invoke
-[POAgentAuthenticationProcess _startUserRegistration]
-[POAgentAuthenticationProcess _startUserRegistration]_block_invoke
-[POAgentAuthenticationProcess handleDeviceAndUserRegistrationForRepair:]
-[POAgentAuthenticationProcess handleDeviceAndUserRegistrationForRepair:notified:]
-[POAgentAuthenticationProcess handleUserRegistrationForUser:repair:]
-[POAgentAuthenticationProcess handleUserRegistrationForUser:repair:notified:]
-[POAgentAuthenticationProcess configurationChanged:]
-[POAgentAuthenticationProcess handleConfigurationChanged:]
-[POAgentAuthenticationProcess handleRemovingRegistrationForExtension:]
-[POAgentAuthenticationProcess exchangeTGTForStatus:]
-[POAgentAuthenticationProcess handleKerberosMappingForTokens:loginConfiguration:userConfiguration:]
-[POAgentAuthenticationProcess handlePendingSSOTokens]
-[POAgentAuthenticationProcess handleUnfinishedTGTExchanges]
-[POAgentAuthenticationProcess notifyKerberosDelegateTGTDidBegin]
-[POAgentAuthenticationProcess notifyKerberosDelegateTGTDidComplete]
-[POAgentAuthenticationProcess setupTimerForAuthentication]
-[POAgentAuthenticationProcess windowDidClose]
-[POAgentAuthenticationProcess requestDidCompleteWithError:]
NOTIFICATION_SIGNIN_TITLE
CUSTOM_NOTIFICATION_SIGNIN_BODY
DEFAULT_NOTIFICATION_SIGNIN_BODY
NOTIFICATION_REGISTRATION_TITLE
CUSTOM_PASSWORD_NOTIFICATION_REGISTRATION_BODY
CUSTOM_NOTIFICATION_REGISTRATION_BODY
DEFAULT_PASSWORD_NOTIFICATION_REGISTRATION_BODY
DEFAULT_NOTIFICATION_REGISTRATION_BODY
-[POAgentAuthenticationProcess userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]
NOTIFICATION_SIGNIN_BUTTON
NOTIFICATION_IGNORE_BUTTON
NOTIFICATION_REGISTER_BUTTON
POAgentAuthenticationProcess
RS256
ES256
ECDH-ES,A256GCM
v16@?0Q8
%@,%@
v16@?0^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}8
openid offline_access
%@ %@
Apple
POST
application/x-www-form-urlencoded
Content-type
application/json
Accept
grant_type
srv_challenge
Nonce
v32@?0@"NSData"8@"NSURLResponse"16@"NSError"24
password
urn:ietf:params:oauth:grant-type:jwt-bearer
jwe_crypto
ECDH-ES
A256GCM
client-request-id
platform_sso_version
&request=%@
keys
No login configuration
This is a fake server nonce
com.apple.testMessages
This is the previous refresh token
foo@example.com
Platform SSO Test Messages
----------
Key Generated for Signing All Test Messages: 
----------
Nonce Request: 
----------
Password Login JWT: 
----------
Password Login Request: 
----------
Embedded Assertion: 
----------
Embedded Login JWT: 
----------
Embedded Login Request: 
POAuthenticationProcess
POLoginTypeNone
POLoginTypePassword
POLoginTypeUserSecureEnclaveKey
%@ (%@)
POUserStateNormal
POUserStateNeedsAuthentication
POUserStateNeedsRegistration
POLoginResultInvalid
POLoginResultSuccess
POLoginResultPermanentFailure
POLoginResultFailure
POLoginResultCredentialFailure
POLoginResultUnavailable
POLoginResultCancelled
v24@?0@"NSData"8@"NSError"16
POCredentialUtil
POJWTHeader
RequireRootCAInSystemTrustStore
ForceKerberosTGTExchange
SOUtils
Unable to find class %s
POPreferences
com.apple.jwksCache
first load
-[POConfigurationManager jwksCacheForExtensionIdentifier:]
-[POConfigurationManager setJwksCache:forExtensionIdentifier:]
-[POConfigurationManager deviceConfigurationForExtension:]
-[POConfigurationManager saveDeviceConfiguration:forExtension:]
-[POConfigurationManager removeDeviceConfigurationForExtension:]
-[POConfigurationManager loginConfigurationForExtension:]
-[POConfigurationManager saveLoginConfiguration:forExtension:]
-[POConfigurationManager removeLoginConfigurationForExtension:]
v24@?0@"POUserConfiguration"8@"NSError"16
-[POConfigurationManager saveUserConfiguration:forUserName:]
userConfiguration updated
-[POConfigurationManager removeUserConfigurationForUserName:]
POConfigurationManager
-[POAuthPluginProcess initWithUid:forLogin:]
-[POAuthPluginProcess getLoginTypeForUser:tokensFresh:]
v28@?0Q8B16@"NSError"20
-[POAuthPluginProcess performPasswordLogin:passwordContext:updateLocalAccountPassword:]
v24@?0Q8@"NSError"16
-[POAuthPluginProcess performSEPKeyLogin:]
-[POAuthPluginProcess createUserAccount:passwordContext:]
-[POAuthPluginProcess saveCredentialForUserName:passwordContext:]
-[POAuthPluginProcess performLocalPasswordLogin:passwordContext:]
POAuthPluginProcess
urn:apple:platformsso
/.well-known/openid-configuration
token_endpoint
jwks_uri
issuer
v32@?0@8@16^B24
POLoginConfiguration
%@ %@ %@
HTTP/1.1
%@ %@
Host:
%@: %@
v32@?0@"NSString"8@"NSString"16^B24
com.apple.PlatformPSSO.auth-plugin-queue
-[POServiceConnection initWithUid:forLogin:]
-[POServiceConnection dealloc]
com.apple.PlatformSSO.login.service-xpc
com.apple.PlatformSSO.service-xpc
POServiceConnection
assertion
client_id
scope
nonce
request_nonce
username
token_type
expires_on
id_token
password redacted
POJWTBody
PORS256JWTSigningAlgorithm
-[POAgentProcess initWithXPCConnection:]
-[POAgentProcess initWithAuthenticationProcess:]
-[POAgentProcess connectionInvalidated]
-[POAgentProcess getLoginTypeForUser:completion:]
-[POAgentProcess performPasswordLogin:passwordContext:updateLocalAccountPassword:completion:]
-[POAgentProcess performSEPKeyLogin:completion:]
-[POAgentProcess createUserAccount:passwordContext:completion:]
-[POAgentProcess saveCredentialForUserName:passwordContext:completion:]
-[POAgentProcess performLocalPasswordLogin:passwordContext:completion:]
POAgentProcess
-[POKerberosHelper importKerberosEntry:error:]
%@@%@
-[POKerberosHelper exchangeKerberosTGTForEntry:]
krbtgt
-[POKerberosHelper checkForValidKerberosTGT:]
-[POKerberosHelper acquireCredentialForUUID:]
failed to find credential: %@
POKerberosHelper
-[POLoginManager init]
-[POLoginManager invalidate]
-[POLoginManager isDeviceRegistered]
-[POLoginManager isUserRegistered]
-[POLoginManager registrationToken]
v24@?0@"NSString"8@"NSError"16
-[POLoginManager ssoTokens]
-[POLoginManager setSsoTokens:]
-[POLoginManager loginConfiguration]
v24@?0@"POLoginConfiguration"8@"NSError"16
-[POLoginManager saveCertificate:keyType:]
-[POLoginManager copyKeyForKeyType:]
v24@?0@"NSXPCListenerEndpoint"8@"NSError"16
-[POLoginManager copyIdentityForKeyType:]
-[POLoginManager attestKey:clientDataHash:completion:]
-[POLoginManager copyDeviceAttestationCertificate]
v24@?0^{__SecCertificate=}8@"NSError"16
-[POLoginManager userNeedsReauthenticationWithCompletion:]
-[POLoginManager deviceRegistrationsNeedsRepair]
-[POLoginManager userRegistrationsNeedsRepair]
-[POLoginManager presentRegistrationViewControllerWithCompletion:]
-[POLoginManager resetKeys]
POLoginManager
-[POConfigurationVersion init]
/com.apple.PlatformSSO.version
-[POConfigurationVersion checkVersion]
-[POConfigurationVersion increaseVersionWithMessage:]
-[POConfigurationVersion setPlatformSSOUnavailable]
notify_register_check() failed with %u (test)
notify_set_state() failed with error %u
notify_cancel() failed with error %u
POConfigurationVersion
com.apple.PlatformSSO.device.%@.txt
com.apple.PlatformSSO.login.%@.txt
com.apple.PlatformSSO.user.%@.txt
/var/mobile/Library/ExtensibleSSO/Configuration/PlatformSSO
-[PODaemonProcess initWithXPCConnection:]
com.apple.private.platformsso.agent
-[PODaemonProcess connectionInvalidated]
-[PODaemonProcess deviceConfigurationForExtension:completion:]
-[PODaemonProcess loginConfigurationForExtension:completion:]
-[PODaemonProcess removeDeviceConfigurationForExtension:completion:]
-[PODaemonProcess removeLoginConfigurationForExtension:completion:]
-[PODaemonProcess removeUserConfigurationForIdentifier:completion:]
-[PODaemonProcess saveDeviceConfiguration:forExtension:completion:]
-[PODaemonProcess saveLoginConfiguration:forExtension:completion:]
-[PODaemonProcess saveUserConfiguration:forIdentifier:completion:]
-[PODaemonProcess userConfigurationForIdentifier:passwordContext:completion:]
-[PODaemonProcess resetStoredConfigurationWithCompletion:]
-[PODaemonProcess _initDataVaultIfNeededWithError:]
mobile
ExtensibleSSO
failed to check the state of datavault: %s
failed to convert to datavault: %s
IPHONE_SIMULATOR_ROOT
PODaemonProcess
osgn
oece
oecd
%s service %{public}@ on %@
Could not add tokens to keychain %{public}@
Error archiving meta data: %{public}@
Removing keychain entry returned %d
Finding keychain entry for service %{public}@
%s Could not find credentials in keychain. Invalid parameters on %@
Finding keychain entry failed with %d, %{public}@
Error unarchiving meta data: %{public}@
Deleting keychain entry for service %{public}@
Could not delete credentials from keychain, %{public}@
Deleting keychain entry failed with %d, %{public}@
Missing JWT parts: %{public}@
Incorrect number of JWT parts: %{public}@, %{public}@
Unsupported algorithm: %{public}@, %{public}@
Failed to decode signature: %{public}@
epk is missing or invalid: %{public}@
Error importing epk: %{public}@
aad is missing: %{public}@
iv is missing: %{public}@
cipher text is missing: %{public}@
tag data is missing: %{public}@
Header is missing epk: %{public}@
Error in SecKeyCopyKeyExchangeResult: %{public}@
Error decrypting: %{public}@, %{public}@
algorithm %{public}@ not found: %{public}@
failed to copy public key: %{public}@
missing required values: %{public}@
Header is missing: %{public}@
Error with SecKeyCreateRandomKey: %{public}@
Error with epk: %{public}@
Error with SecKeyCopyExternalRepresentation: %{public}@
Error with SecKeyCopyKeyExchangeResult: %{public}@
Error with SecRandomCopyBytes: %{public}@
Error with encoding ivData: %{public}@
Error with encoding header: %{public}@
Error with encoding body: %{public}@
Error with concatKDF: %{public}@
Error encrypting: %{public}@, %{public}@
%s  on %@
XPC error: %{public}@
%{public}@: XPC connection already exists
%{public}@: failed to create XPC connection
%{public}@: XPC connection invalidated
%{public}@: XPC connection interrupted
%{public}@: new XPC connection
Error serializing config: %{public}@
Error deserializing config: %{public}@
retrieving sso tokens
Error retrieving tokens: %d, %{public}@
setting sso tokens
Error saving tokens: %d, %{public}@
Error removing tokens: %d, %{public}@
encryptPendingSSOTokens
encryption algorithm not supported:%{public}@
failed to encrypt tokens: %{public}@
decryptPendingSSOTokensUsingPrivateKey
failed to decrypt tokens: %{public}@
Error deserializing tokens: %{public}@
failed to retrieve extension identifier, %{public}@
failed to retrieve device configuration for extension identifier: %{public}@, %{public}@
key not found for extension identifier: %{public}ld, %{public}@, %{public}@
bundleIdentifier: CPCopyBundleIdentifierAndTeamFromAuditToken(): %{public}@
bundleIdentifier: CPCopyBundleIdentifierAndTeamFromAuditToken() failed, trying SecTaskCopySigningIdentifier()
bundleIdentifier: SecTaskCopySigningIdentifier() failed %{public}@
bundleIdentifier: %{public}@
bundleIdentifier: SecTaskCreateWithAuditToken() failed, %{public}@
No device configuration for extension: %{public}@, %{public}@
Caller is not current extension: %{public}@, %{public}@
No stored SSO Tokens.
missing device encryption key for extension identifier: %{public}@, %{public}@
missing device encryption public key:%{public}@
failed to remove tokens: %{public}@
failed to save tokens: %{public}@
failed to save configuration: %{public}@
No validated Platform SSO Profiles: %{public}@
Error validating login configuration, %{public}@
failed to save login configuration for extension identifier %{public}@, %{public}@
%s keyType = %{public}@ on %@
failed to save device configuration: %{public}@
failed to receive endpoint: %{public}@
failed to retrieve user configuration for extension identifier: %{public}@, %{public}@
failed to save user configuration: %{public}@
failed to retrieve user configuration for extension identifier: %{public}@
Error SecAccessControlCreateWithFlags: %{public}@
Error setting protection: %{public}@
Error SecKeyCreateRandomKey: %{public}@
Error SecKeyCreateWithData: %{public}@
Current altDSID: %{private}@
signing algorithm not supported: %{public}@
No data to sign: %{public}@
Error creating signature: %{public}@
No certificate string: %{public}@
Failed to base64 decode: %{public}@
Failed to create certificate: %{public}@
Failed to get public key: %{public}@
No signature to verify: %{public}@
No data to verify: %{public}@
Error verifying signature: %{public}@
PlatformSSO extension not found (%{public}@)
requestAuthorizationViewControllerWithCompletion: remoteViewController = %{public}@, error = %{public}@
beginDeviceRegistrationUsingLoginManager completed, result = %{public}@
beginUserRegistrationUsingLoginManager completed, result = %{public}@
not a local account
Screen unlocked
First Unlock
Network Changed
Not configured for Platform SSO
Rule already checked
Rule successfully checked
Checking Login for user
%s user state = %{public}@ on %@
User state is needs authentication.
Tokens issued more than 4 hours ago
Tokens expire soon.
Kerberos cache not valid
User does not need authentication
User needs authentication
no device configuration for extension: %{public}@, %{public}@
registration not complete %{public}@
no login configuration for extension: %{public}@, %{public}@
%s loginType = %{public}@ on %@
Password authentication
no user configuration for user: %{public}@, %{public}@
no user credential for user: %{public}@, %{public}@
loginResult = %{public}@
failed to save login tokens: %{public}@
Authentication completed successfully
Authentication failed with invalid credential
Authentication failed and needs repair
Authentication failed because network is unavailable
Authentication failed
Login failed:, %{public}@
User Secure Enclave key authentication
no platform SSO Profiles: %{public}@
no user authentication during registration: %{public}@
Not a local account: %{public}@
Not a password user
Sending login notification
error sending local notification: %{public}@
%s creating new device configuration on %@
Sending beginDeviceRegistration
registrationResult = %{public}@
%s removing device and login configuration on %@
failed to remove device configuration: %{public}@
failed to remove login configuration: %{public}@
%s calling registrationDidComplete on %@
%s creating new user configuration on %@
Sending beginUserRegistration
%s registrationResult = %{public}@ on %@
failed to remove user configuration: %{public}@
%s removing user configuration on %@
registration previously failed, stopping
registration already in progress: %{public}@
Platform SSO extension not found: %{public}@, %{public}@
No supported authentication methods: %{public}@
Sending registration notification
Configuration changed
no existing device configuration for extension: %{public}@
no existing user configuration for user: %{public}@, %{public}@
Removing registration
registration not in progress for extension: %{public}@, %{public}@
user interaction not allowed for extension: %{public}@, %{public}@
No login configuration for extension: %{public}@, %{public}@
%s kerberos extension = %{public}@, isNetworkConnected = %{public}@ on %@
Exchanging TGT for realm: %{public}@
Successfully imported Kerberos ticket for realm: %{public}@
Mapping Kerberos TGT for %{public}@
Invalid TGT data type: %{public}@, %{public}@
Importing Kerberos TGT for %{public}@
failed to import kerberos ticket: %{public}@, %{public}@
Exchanging Kerberos TGT for %{public}@
Notifying TGT delegate for realm: %{public}@
missing required values: %{public}@, %{public}@
Saving Pendint SSO Tokens
no user configuration: %{public}@
Refresh token timer set: %{public}@
%s state = %{public}@, failureCount = %{public}@ on %@
%{public}@, %{public}@
Starting password authentication
Login Configuration: %{public}@
Device Configuration: %{public}@
User Configuration: %{public}@
failed to create nonce request: %{public}@
Sending nonce request
failed to retrieve nonce: %{public}@
failed to create login JWT: %{public}@
failed to create embedded assertion JWT: %{public}@
failed to sign embedded assertion: %{public}@
failed to sign login request: %{public}@
failed to create login request: %{public}@
Sending login request
Login response received
login request failed: %{public}@
failed to parse login response: %{public}@
unsupported login response algorithm and encryption: %{public}@, %{public}@,  %{public}@
failed to decrypt login response: %{public}@
failed to validate apu: %{public}@
failed to validate apv: %{public}@
no id_token in login response: %{public}@
no kid in login response id_token: %{public}@
JWKS response received
no key available with identifier: %{public}@, %{public}@
id_token signature check failed %{public}@
server nonce request: %{private}@
Nonce response received
failed to retrieve server nonce: %{public}@
failed to retrieve server nonce: %{public}ldd, %{public}@
server nonce response received: %{public}@
failed to parse server nonce response: %{public}@
audience missing from configuration: %{public}@
missing password or assertion: %{public}@
unable to use both password and assertion: %{public}@
failed to create request: %{public}@
Sending login request: %{public}@
failed to login: %{public}@
failed to login: %{public}ld, %{public}@
Credentials are not correct
login response received: %{public}@
using cached jwks: %{public}@
JWKS network response received
failed to login: %{public}ldd, %{public}@
jwks response received: %{public}@
failed to parse jwks response: %{public}@
failed to find key: %{public}@, %{public}@
failed to create key: %{public}@, %{public}@
failed to load key: %{public}@, %{public}@
Verifying id_token
validating id_token: %{private}@
unsupported id_token algorithm: %{public}@, %{public}@
failed to match nonce: %{public}@
failed to match issuer: %{public}@
audience does not contain client id: %{public}@
azp claim missing: %{public}@
failed to match audience: %{public}@
failed to match azp: %{public}@
failed to verify iat: %{public}f, %{public}@
failed to verify exp: %{public}f, %{public}@
failed to verify nbf: %{public}f, %{public}@
response missing apu: %{public}@
response missing epk: %{public}@
error with SecKeyCopyExternalRepresentation: %{public}@
error decoding apu: %{public}@
falied to validate apu: %{public}@
missing apv: %{public}@
error decoding apv: %{public}@
error with nonce data: %{public}@
falied to validate apv: %{public}@
Evaluating server trust
trustEvaluation failed: %{public}@
No root certificate: %{public}@
Root certificate is not in the system trust: %{public}@
HTTP Redirect received to %{public}@, canceling
Creating sample messages
credential failure: %{public}@
Error with JWT header data: %{public}@
Error with dataRepresentation: %{public}@
Invalid key type: %{public}@
Error with external representation: %{public}@
Error with dataRepresentation length: %{public}@
requireRootCAInSystemTrustStore=%{public}s
forceKerberosTGTExchange=%{public}s
Error retrieving jwks data: %d, %{public}@
Error saving jwks data: %d, %{public}@
Error removing jwks data: %d, %{public}@
id for user %{public}@ not found: %{public}@
failed to retrieve user configuration: %{public}@
%s userName = %{public}@ on %@
loginType = %{public}@, tokensFresh = %{public}@, error = %{public}@
%s userName = %{public}@, passwordContext = %{public}@, updateLocalAccountPassword = %{public}@ on %@
loginResult = %{public}@, error = %{public}@
%s userName = %{public}@, passwordContext = %{public}@ on %@
Error creating POLoginConfiguration: %{public}@
failed to retrieve openid-configuration
failed to retrieve openid-configuration: %ldd
open id response received: %{public}@
failed to parse openid-configuration response
failed to create login configuration
Claims are not valid JSON: %{public}@
serialized configuration: %{public}@
%s userID = %{public}@, login = %{public}@ on %@
Error with JWT body data: %{public}@
no credential for user: %{public}@, %{public}@
failed to get public key: %{public}@
failed to encrypt login tokens: %{public}@
failed to save user configuration for user: %{public}@, %{public}@
%s realm = %{public}@ on %@
failed to import TGT, %{public}@
%s Successful for realm = %{public}@ on %@
%s Success for realm = %{public}@ on %@
Error using cached credential: %{public}@
loginUserName saved
failed to save loginUserName: %{public}@
missing device encryption key:%{public}@
failed to parse sso tokens: %{public}@
removing tokens
tokens removed
failed to encode tokens to JSON: %{public}@
tokens saved
loginConfiguration saved
failed to save loginConfiguration: %{public}@
error with SecCertificateCopyData: %{public}@
failed to retrieve SecKeyProxyEndpoint: %{public}@
failed to create SecKey from SecKeyProxyEndpoint: %{public}@
failed to create SecIdentity from SecKeyProxyEndpoint: %{public}@
notify_register_check() failed with %u
notify_cancel() failed with %u
%s config version changed from from 0x%016llX to 0x%016llX on %@
%s config version increased from 0x%016llX to 0x%016llX (%{public}@) on %@
set config version to PlatformSSO unavailable
notify_get_state() failed with error %u
invalid notify token
notify_set_state() failed with error %u
notify_post() failed with error %u
missing required entitlement
updating rules database
restoring rules database if needed
%s extension = %{public}@ on %@
error initializing data vault: %{public}@
no data to load: %{public}@
%s identifier = %{public}@ on %@
failed to write device config to disk: %{public}@
failed to set attributes: %{public}@
device config written to file: %{public}@
failed to write login config to disk: %{public}@
login config written to file: %{public}@
saving credential
failed to remove login configuration folder: %{public}@
failed to create configuration directory at %{public}@: %{public}@
created configuration directory at %{public}@
failed to check the state of datavault: %{public}s
failed to convert to datavault: %{public}s
successfully created datavault at %{public}@
failed to get the simulator root path
softlink:r:path:/System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices
softlink:r:path:/System/Library/PrivateFrameworks/AppSSOCore.framework/AppSSOCore
softlink:r:path:/System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices
POKeychainHelper
POJWT
POMutableJWT
POKeyWrap
PODaemonProtocol
NSObject
PODaemonConnection
POKerberosStatus
NSSecureCoding
NSCoding
POUserConfiguration
PODeviceConfiguration
POKeyBag
POExtensionAgentProcess
POServiceLoginManagerProtocol
POSecKeyHelper
PODirectoryServices
POKerberosMapping
POES256JWTSigningAlgorithm
POJWTSigningAlgorithm
POServiceLoginManagerConnection
SHA256
POExtension
SOExtensionDelegate
POExtensionRegistrationProtocol
POAgentAuthenticationProcess
UNUserNotificationCenterDelegate
POExtensionDelegate
POAuthenticationProcess
NSURLSessionDelegate
NSURLSessionTaskDelegate
POAlgorithm
POConstantUtil
POAuthenticationContext
POCredentialUtil
POConcatKDF
POJWTHeader
POMutableJWTHeader
POPreferences
POConfigurationManager
POJWKSStorageProvider
POAuthPluginProcess
PORegistrationContext
POLoginConfiguration
print
POServiceProtocol
POServiceConnection
POJWTBody
POMutableJWTBody
POInternalProtocols
PORS256JWTSigningAlgorithm
POAgentProcess
POKerberosEntry
POKerberosHelper
POLoginManager
POConfigurationVersion
POError
PODaemonProcess
Base64URL
errorWithCode:
lowercaseString
dictionaryWithObjects:forKeys:count:
mutableCopy
archivedDataWithRootObject:requiringSecureCoding:error:
setObject:forKeyedSubscript:
removeTokensFromKeychainWithService:username:
objectForKey:
arrayWithObjects:count:
setWithArray:
unarchivedDictionaryWithKeysOfClasses:objectsOfClasses:fromData:error:
addTokens:metaData:toKeychainForService:username:
retrieveTokensFromKeychainForService:username:returningTokens:metaData:
init
componentsSeparatedByString:
count
objectAtIndexedSubscript:
psso_initWithBase64URLEncodedString:
initWithJWTData:
numberWithUnsignedInteger:
decodedHeader
setBody:
setHeader:
algorithmWithIdentifier:
rawSignature
rawHeader
rawBody
stringWithFormat:
dataUsingEncoding:
verifySignature:onData:usingKey:
isJWE
rawEncryptedKey
rawIV
rawCipherText
rawAuthenticationTag
objectForKeyedSubscript:
length
appendBytes:length:
appendData:
errorWithCode:underlyingError:
decodeAndDecryptUsingPrivateKey:apvString:
decodeEphemeralPublicKey
dataWithLength:
mutableBytes
concatKDFWithKey:algorithm:partyUInfo:partyVInfo:
bytes
numberWithInt:
psso_base64URLEncodedString
setRawBody:
setDecodedBody:
decodedBody
stringRepresentation
initWithString:
verifySignatureUsingKey:
decodeAndDecryptUsingPrivateKey:
description
setRawHeader:
setDecodedHeader:
setRawEncryptedKey:
setRawIV:
setRawCipherText:
setRawSignature:
setRawAuthenticationTag:
.cxx_destruct
_rawHeader
_decodedHeader
_rawEncryptedKey
_rawIV
_rawBody
_decodedBody
_rawCipherText
_rawSignature
_rawAuthenticationTag
T@"NSString",&,V_rawHeader
T@"POJWTHeader",&,V_decodedHeader
T@"NSString",&,V_rawEncryptedKey
T@"NSString",&,V_rawIV
T@"NSString",&,V_rawBody
T@"POJWTBody",&,V_decodedBody
T@"NSString",&,V_rawCipherText
T@"NSString",&,V_rawSignature
signedData
T@"NSData",&,D
T@"NSString",&,V_rawAuthenticationTag
TB,R,D,GisJWE
header
setBodyData:
body
setAlg:
setTyp:
setKid:
base64EncodedStringWithOptions:
setX5c:
dataRepresentation
signData:usingKey:
encodeAndEncryptUsingPublicKey:partyVInfo:
addEphemeralPublicKey:
setApu:
dataWithBytes:length:
bodyData
encodeAndSignUsingAlgorithm:key:certificate:
encodeAndEncryptUsingPublicKey:
_header
_body
T@"POMutableJWTHeader",&,V_header
T@"POMutableJWTBody",&,V_body
wrapBlob:
unwrapBlob:
_connectToService
invalidate
dealloc
internalErrorWithMessage:
xpcConnection
synchronousRemoteObjectProxyWithErrorHandler:
deviceConfigurationForExtension:completion:
loginConfigurationForExtension:completion:
removeDeviceConfigurationForExtension:completion:
removeLoginConfigurationForExtension:completion:
removeUserConfigurationForIdentifier:completion:
saveDeviceConfiguration:forExtension:completion:
saveLoginConfiguration:forExtension:completion:
saveUserConfiguration:forIdentifier:completion:
userConfigurationForIdentifier:passwordContext:completion:
resetStoredConfigurationWithCompletion:
disablePlatformSSORuleForScreensaver:
enablePlatformSSORuleForScreensaver:
initWithMachServiceName:options:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
interfaceWithInternalProtocol:
setRemoteObjectInterface:
setInvalidationHandler:
setXpcConnection:
setInterruptionHandler:
xpcQueue
_setQueue:
resume
_xpcConnection
T@"NSXPCConnection",&,V_xpcConnection
ticketKeyPath
realm
cacheName
numberWithBool:
importSuccessful
exchangeRequired
dictionaryRepresentation
dataWithJSONObject:options:error:
boolValue
JSONObjectWithData:options:error:
initWithDictionary:
initWithData:encoding:
decodeObjectOfClass:forKey:
initWithData:
encodeObject:forKey:
supportsSecureCoding
encodeWithCoder:
initWithCoder:
TB,R
setTicketKeyPath:
setRealm:
setCacheName:
setUpn:
setImportSuccessful:
setExchangeRequired:
_importSuccessful
_exchangeRequired
_ticketKeyPath
_realm
_cacheName
_upn
T@"NSString",&,V_ticketKeyPath
T@"NSString",&,V_realm
T@"NSString",&,V_cacheName
T@"NSString",&,V_upn
TB,V_importSuccessful
TB,V_exchangeRequired
keyForData:
dataForKey:
keychainHelper
ssoExtensionIdentifier
uniqueIdentifier
calculateExpirationForTokens:
date
tokens
doubleValue
dateWithTimeIntervalSinceNow:
dataRepresentationForDisplay:
loginUserName
stringForLoginType:
loginType
stringForUserState:
numberWithInteger:
state
psso_sha256Hash
_sepKeyData
dataForCertificate:
sepKeyCertificate
_credential
pendingSSOTokens
countByEnumeratingWithState:objects:count:
addObject:
kerberosStatus
setFormatOptions:
stringFromDate:
initWithExternalizedContext:
intValue
certificateForData:
enumerateObjectsUsingBlock:
_contextData
initWithData:contextData:
credentialContext
externalizedContext
sepKey
setSepKey:
setTokens:returningError:
encryptPendingSSOTokens:usingPublicKey:
decryptPendingSSOTokensUsingPrivateKey:
tokenExpiration
tokenReceived
currentRefreshToken
setLoginUserName:
setUniqueIdentifier:
setSsoExtensionIdentifier:
setState:
setLoginType:
setSepKeyCertificate:
set_credential:
set_contextData:
setCredentialContext:
setKerberosStatus:
setPendingSSOTokens:
set_sepKeyData:
setKeychainHelper:
_sepKey
_loginUserName
_uniqueIdentifier
_ssoExtensionIdentifier
_state
_loginType
_sepKeyCertificate
__credential
__contextData
_credentialContext
_kerberosStatus
_pendingSSOTokens
__sepKeyData
_keychainHelper
T@"NSData",&,V__sepKeyData
T@"POKeychainHelper",&,V_keychainHelper
T@"NSString",&,V_loginUserName
T@"NSString",&,V_uniqueIdentifier
T@"NSString",&,V_ssoExtensionIdentifier
T@"NSData",R,D
T@"NSDate",R
Tq,V_state
TQ,V_loginType
T^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v},V_sepKey
T^{__SecCertificate=},N,V_sepKeyCertificate
T@"NSData",&,V__credential
T@"NSData",&,V__contextData
T@"LAContext",&,V_credentialContext
T@"NSArray",&,V_kerberosStatus
T@"NSData",&,V_pendingSSOTokens
deviceSigningKey
identityForKey:andCertificate:
deviceEncryptionKey
_deviceSigningKeyData
deviceSigningCertificate
_deviceEncryptionKeyData
deviceEncryptionCertificate
registrationCompleted
setDeviceSigningKey:
setDeviceEncryptionKey:
deviceSigningIdentity
deviceEncryptionIdentity
setDeviceSigningCertificate:
setDeviceEncryptionCertificate:
setRegistrationCompleted:
set_deviceSigningKeyData:
set_deviceEncryptionKeyData:
_registrationCompleted
_deviceSigningKey
_deviceEncryptionKey
_deviceSigningCertificate
_deviceEncryptionCertificate
__deviceSigningKeyData
__deviceEncryptionKeyData
T@"NSData",&,N,V__deviceSigningKeyData
T@"NSData",&,N,V__deviceEncryptionKeyData
T^{__SecKey=},N,V_deviceSigningKey
T^{__SecCertificate=},N,V_deviceSigningCertificate
T^{__SecIdentity=},R,D
T^{__SecKey=},N,V_deviceEncryptionKey
T^{__SecCertificate=},N,V_deviceEncryptionCertificate
TB,V_registrationCompleted
stopObservingKeyBagLockStatusChanges
isUserKeybagUnlocked
waitForKeyBagFirstUnlockWithCompletion:
waitForKeyBagFirstUnlockOnStartupWithCompletion:
startObservingKeyBagLockStatusChanges
unlockCompletion
setUnlockCompletion:
startupCompletion
setStartupCompletion:
firstUnlock
setFirstUnlock:
_notifyToken
_firstUnlock
_unlockCompletion
_startupCompletion
T@?,C,V_unlockCompletion
T@?,C,V_startupCompletion
TB,V_firstUnlock
sharedInstance
defaultManager
invalidateAllKeyProxies
authenticationObserver
defaultCenter
removeObserver:
array
bundleIdentiferForXPCConnection:
configurationManager
deviceConfigurationForExtension:
currentUserConfiguration
initWithKey:
keyProxies
endpoint
initWithIdentity:
copy
removeObject:
auditToken
valueForEntitlement:
isEqualToString:
loginConfigurationForExtension:
agentProcess
registrationTokenForExtensionIdentifier:
handleKerberosMappingForTokens:extensionIdentifier:userConfiguration:
saveCurrentUserConfiguration
isAssociatedDomainValidated
configurationHost
validatedProfileForPlatformSSO
tokenEndpointURL
isURL:validForProfile:
errorWithCode:underlyingError:description:
nonceEndpointURL
refreshEndpointURL
saveLoginConfiguration:forExtension:
absoluteString
URLPrefix
stringByAppendingString:
predicateWithFormat:
evaluateWithObject:
saveDeviceConfiguration:forExtension:
keyProxyEndpointForKeyType:
isCallerCurrentSSOExtension
authenticationCompletion
errorWithDomain:code:userInfo:
setAuthenticationCompletion:
userInfo
addObserverForName:object:queue:usingBlock:
setAuthenticationObserver:
handleUserNeedsReauthenticationAfterDelay:
handleDeviceAndUserRegistrationForRepair:
userConfigurationForUserName:
handleUserRegistrationForUser:repair:
handleRegistrationViewControllerForExtensionIdentifier:completion:
createSEPKeyForKeyType:
saveUserConfiguration:forUserName:
isDeviceRegisteredWithCompletion:
isUserRegisteredWithCompletion:
registrationTokenWithCompletion:
setRegistrationToken:completion:
loginUserNameWithCompletion:
setLoginUserName:completion:
ssoTokensWithCompletion:
setSsoTokens:completion:
loginConfigurationWithCompletion:
setLoginConfiguration:completion:
setCertificateData:keyType:completion:
secKeyProxyEndpointForKeyType:completion:
attestKey:clientDataHash:completion:
copyDeviceAttestationCertificateWithCompletion:
userNeedsReauthenticationWithCompletion:
deviceRegistrationsNeedsRepairWithCompletion:
userRegistrationsNeedsRepairWithCompletion:
presentRegistrationViewControllerWithCompletion:
resetKeysWithCompletion:
initWithXPCConnection:authenticationProcess:
connectionInvalidated
identityForKeyType:
invalidationHandler
setConfigurationManager:
setAgentProcess:
setKeyProxies:
setConfigurationHost:
_invalidationHandler
_configurationManager
_agentProcess
_keyProxies
_authenticationObserver
_authenticationCompletion
_configurationHost
T@"POConfigurationManager",&,V_configurationManager
T@"POAgentAuthenticationProcess",&,V_agentProcess
T@"NSMutableArray",&,V_keyProxies
T@"NSObject",&,V_authenticationObserver
T@?,C,V_authenticationCompletion
T@"SOConfigurationHost",&,V_configurationHost
T@?,C,V_invalidationHandler
subdataWithRange:
printKey:
sharedManager
currentUser
alternateDSID
uniqueIdentifierForUserName:
messageBufferKeyName
realmKeyName
serviceNameKeyName
clientNameKeyName
encryptionKeyTypeKeyName
sessionKeyKeyName
setMessageBufferKeyName:
setRealmKeyName:
setServiceNameKeyName:
setClientNameKeyName:
setEncryptionKeyTypeKeyName:
setSessionKeyKeyName:
_messageBufferKeyName
_realmKeyName
_serviceNameKeyName
_clientNameKeyName
_encryptionKeyTypeKeyName
_sessionKeyKeyName
T@"NSString",&,N,V_ticketKeyPath
T@"NSString",&,N,V_messageBufferKeyName
T@"NSString",&,N,V_realmKeyName
T@"NSString",&,N,V_serviceNameKeyName
T@"NSString",&,N,V_clientNameKeyName
T@"NSString",&,N,V_encryptionKeyTypeKeyName
T@"NSString",&,N,V_sessionKeyKeyName
initWithBase64EncodedString:options:
verifySignature:onData:usingCertificateString:
remoteObjectProxyWithErrorHandler:
loadExtensionWithBundleIdentifier:
setExtensionDelegate:
unload
beginDeviceRegistrationUsingOptions:completion:
requestAuthorizationViewControllerWithCompletion:
beginUserRegistrationUsingUserName:authenticationMethod:options:completion:
registrationDidComplete
delegate
requestDidCompleteWithError:
authorizationDidCompleteWithCredential:error:
presentAuthorizationViewControllerWithHints:completion:
initWithExtensionBundleIdentifier:
setDelegate:
_extension
_extensionViewController
_delegate
T@"<POExtensionDelegate>",W,V_delegate
initWithBundleIdentifier:
setWantsNotificationResponsesDelivered
setupNotificationCategories
authenticationTimer
setAuthenticationTimer:
localAccount
keyBag
handlePendingSSOTokens
performLoginForCurrentUser
handleUnfinishedTGTExchanges
handleScreenSaverRule
configurationChanged:
notificationCenter
addObserver:selector:name:object:
setupTimerForAuthentication
handleScreenUnlock
currentDeviceConfiguration
processInfo
operatingSystemVersionString
standardUserDefaults
stringForKey:
setValue:forKey:
enableScreensaverRuleIfNeeded:
userName
timeIntervalSinceNow
kerberosHelper
checkForValidKerberosTGT:
currentLoginConfiguration
userConfigurationForUserName:passwordContext:
passwordDataFromContext:error:
notifyKerberosDelegateTGTDidBegin
authenticationProcess
stringForLoginResult:
postAuthenticationNotification:
handleKerberosMappingForTokens:loginConfiguration:userConfiguration:
notifyKerberosDelegateTGTDidComplete
performPasswordLoginUsingLoginConfiguration:deviceConfiguration:userConfiguration:jwksStorageProvider:userName:password:completion:
performSEPKeyLoginUsingLoginConfiguration:deviceConfiguration:userConfiguration:jwksStorageProvider:userName:signingKey:certificate:completion:
postNotificationName:object:userInfo:
extensionBundleIdentifier
pssoRegistrationToken
registrationContext
accountDisplayName
createSignInNotificationWithAccountName:extensionIdentifier:
userNotificationCenter
removeAllDeliveredNotifications
removeAllPendingNotificationRequests
UUID
UUIDString
triggerWithTimeInterval:repeats:
requestWithIdentifier:content:trigger:destinations:
addNotificationRequest:withCompletionHandler:
handleUserCredentialNeededAtLogin:returningContext:
setJwksCache:
isRepair
userNotified
registrationToken
extensionIdentifier
setOptions:
ssoExtension
_startUserRegistration
promptUserForRegistration
setRetry:
setRegistrationFailed:
removeDeviceConfigurationForExtension:
removeLoginConfigurationForExtension:
setRegistrationContext:
authMethod
handleUserCredentialNeededAtLogin:
removeUserConfigurationForUserName:
handleDeviceAndUserRegistrationForRepair:notified:
registrationFailed
extensionManager
ssoMethodToUse:profile:
setExtensionIdentifier:
setRegistrationToken:
containerAppBundleIdentifier
setContainerAppBundleIdentifier:
setAuthMethod:
setUserName:
setRepair:
setUserNotified:
loadSSOExtensionWithExtensionBundleIdentifier:
setSsoExtension:
_startDeviceRegistration
handleUserRegistrationForUser:repair:notified:
createRegistrationNotificationWithAccountName:
isRetry
handleConfigurationChanged:
hasAnyMDMProfileForExtension:
handleRemovingRegistrationForExtension:
restoreScreensaverRuleIfNeeded
removeObjectForKey:
authenticationMethods
pssoAuthenticationMethod
containsObject:
options
kerberosDelegate
isRealmConfiguredForKerberosExtension:
triggerVPNForRealm:
isNetworkConnectedForRealm:
exchangeKerberosTGTForEntry:
kerberosTicketMappings
valueForKeyPath:
setMessageBuffer:
setServiceName:
setClientName:
setEncryptionKeyType:
setSessionKey:
hasAllRequiredValues
importKerberosEntry:error:
exchangeTGTForStatus:
TGTReceivedForRealm:upn:cache:
TGTRequestDidBegin
TGTRequestDidComplete
dateByAddingTimeInterval:
initWithFireDate:interval:target:selector:userInfo:repeats:
setTolerance:
currentRunLoop
addTimer:forMode:
failureCount
setFailureCount:
setUserInfo:
setShouldBackgroundDefaultAction:
iconForApplicationIdentifier:
setIcon:
bundleForClass:
localizedStringForKey:value:table:
setTitle:
localizedStringWithFormat:
setCategoryIdentifier:
setInterruptionLevel:
setShouldPreventNotificationDismissalAfterDefaultAction:
isUserNotification
actionIdentifier
notification
request
content
categoryIdentifier
requestUserAuthenticationWithUserInfo:
identifier
removeDeliveredNotificationsWithIdentifiers:
removePendingNotificationRequestsWithIdentifiers:
handleDeviceRegistrationNotification
handleUserRegistrationNotification
actionWithIdentifier:title:options:
categoryWithIdentifier:actions:intentIdentifiers:options:
setNotificationCategories:
userNotificationCenter:willPresentNotification:withCompletionHandler:
userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:
userNotificationCenter:openSettingsForNotification:
windowDidClose
initWithDelegate:
handleAgentStartup
handleNetworkChange
setAuthenticationProcess:
setExtensionManager:
setKeyBag:
setUserNotificationCenter:
setNotificationCenter:
setKerberosHelper:
directoryServices
setDirectoryServices:
setLocalAccount:
setKerberosDelegate:
_registrationFailed
_localAccount
_authenticationProcess
_extensionManager
_keyBag
_userNotificationCenter
_notificationCenter
_kerberosHelper
_directoryServices
_registrationContext
_authenticationTimer
_userName
_kerberosDelegate
T@"POAuthenticationProcess",&,V_authenticationProcess
T@"SOExtensionManager",&,V_extensionManager
T@"POKeyBag",&,V_keyBag
T@"UNUserNotificationCenter",&,V_userNotificationCenter
T@"NSNotificationCenter",&,V_notificationCenter
T@"POKerberosHelper",&,V_kerberosHelper
T@"PODirectoryServices",&,V_directoryServices
T@"PORegistrationContext",&,V_registrationContext
TB,V_registrationFailed
T@"NSTimer",&,V_authenticationTimer
T@"NSString",&,V_userName
TB,V_localAccount
T@"<POAgentAuthenticationProcessKerberosDelegate>",W,V_kerberosDelegate
createAuthenticationContextUsingLoginConfiguration:deviceConfiguration:
createNonceRequestWithContext:loginConfiguration:
createLoginJWTWithContext:loginConfiguration:userConfiguration:userName:password:embeddedAssertion:
performLoginWithContext:loginConfiguration:deviceConfiguration:jwksStorageProvider:loginJWT:completion:
performNonceRequestWithContext:loginConfiguration:request:completion:
createEmbeddedAssertionWithContext:loginConfiguration:userName:signingKey:
zeroPassword
createLoginRequestWithContext:loginConfiguration:jwt:
validatePartyUInfo:context:
validatePartyVInfo:context:publicKey:
id_token
validateIdToken:context:loginConfiguration:key:
retrieveSigningKeyWithContext:loginConfiguration:jwksStorageProvider:keyId:completion:
performLoginRequestWithContext:loginConfiguration:request:completion:
ephemeralSessionConfiguration
set_preventsAppSSO:
sessionWithConfiguration:delegate:delegateQueue:
setUrlSession:
setScope:
additionalScopes
whitespaceAndNewlineCharacterSet
stringByTrimmingCharactersInSet:
scope
nonce
createPartyVInfoWithContext:apvKey:
setApv:
initWithURL:cachePolicy:timeoutInterval:
setHTTPMethod:
addValue:forHTTPHeaderField:
queryItemWithName:value:
customNonceRequestValues
arrayByAddingObjectsFromArray:
setQueryItems:
percentEncodedQuery
setHTTPBody:
urlSession
statusCode
nonceResponseKeypath
setServerNonce:
serverNonce
dataTaskWithRequest:completionHandler:
audience
customAssertionRequestBodyClaims
addCustomClaims:
setAud:
setIat:
setExp:
setIss:
setSub:
setNonce:
customAssertionRequestHeaderClaims
clientID
customLoginRequestBodyClaims
setClient_id:
componentsWithString:
setQuery:
setFragment:
serverNonceClaimName
setRequest_nonce:
setUsername:
setPassword:
setGrant_type:
setAssertion:
includePreviousRefreshTokenInLoginRequest
previousRefreshTokenClaimName
customLoginRequestHeaderClaims
requestIdentifier
customLoginRequestValues
invalidCredentialPredicate
jwksCache
findKey:inJWKSData:
jwksEndpointURL
dataTaskWithURL:completionHandler:
firstObject
issuer
audArray
getBytes:range:
isEqualToData:
protectionSpace
authenticationMethod
serverTrust
lastObject
requireRootCAInSystemTrustStore
initWithTrust:
psso_DisplayRequest
stringByAppendingFormat:
URLSession:didBecomeInvalidWithError:
URLSession:didReceiveChallenge:completionHandler:
URLSessionDidFinishEventsForBackgroundURLSession:
URLSession:didCreateTask:
URLSession:task:willBeginDelayedRequest:completionHandler:
URLSession:taskIsWaitingForConnectivity:
URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:
URLSession:task:didReceiveChallenge:completionHandler:
URLSession:task:needNewBodyStream:
URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:
URLSession:task:didFinishCollectingMetrics:
URLSession:task:didCompleteWithError:
performTokenRefreshUsingLoginConfiguration:deviceConfiguration:userConfiguration:refreshToken:signingKey:completion:
createTestMessagesForLoginConfiguration:certificate:
setRequestIdentifier:
_serverNonce
_nonce
_requestIdentifier
_scope
_apv
_urlSession
T@"NSString",&,N,V_serverNonce
T@"NSString",&,N,V_nonce
T@"NSString",&,N,V_requestIdentifier
T@"NSString",&,N,V_scope
T@"NSString",&,N,V_apv
T@"NSURLSession",&,N,V_urlSession
credentialOfType:reply:
initWithBytesNoCopy:length:encoding:freeWhenDone:
passwordStringFromData:
data
setData:
allData
_data
T@"NSMutableDictionary",&,V_data
T@"NSString",R,D
T@"NSNumber",R,D
T@"NSDictionary",R,D
addEntriesFromDictionary:
setEpk:
setCty:
setX5t:
setEnc:
setP2s:
setP2c:
T@"NSString",&,D
T@"NSNumber",&,D
T@"NSDictionary",&,D
isInternalBuild
boolValueForKey:defaultValue:
forceKerberosTGTExchange
TB,R,N
initWithUserName:
version
checkVersion
increaseVersionWithMessage:
jwksCacheForExtensionIdentifier:
setJwksCache:forExtensionIdentifier:
userIdentifier
reset
T@"NSData",&
resetStoredConfiguration
setVersion:
_serviceConnection
_currentUserConfiguration
_currentLoginConfiguration
_currentDeviceConfiguration
_userIdentifier
_version
T@"NSString",R,V_userIdentifier
T@"POConfigurationVersion",&,V_version
T@"NSString",R,V_userName
T@"POUserConfiguration",R,V_currentUserConfiguration
T@"PODeviceConfiguration",R,V_currentDeviceConfiguration
T@"POLoginConfiguration",R,V_currentLoginConfiguration
initWithUid:forLogin:
getLoginTypeForUser:completion:
performPasswordLogin:passwordContext:updateLocalAccountPassword:completion:
performSEPKeyLogin:completion:
createUserAccount:passwordContext:completion:
saveCredentialForUserName:passwordContext:completion:
performLocalPasswordLogin:passwordContext:completion:
getLoginTypeForUser:tokensFresh:
performPasswordLogin:passwordContext:updateLocalAccountPassword:
performSEPKeyLogin:
createUserAccount:passwordContext:
saveCredentialForUserName:passwordContext:
performLocalPasswordLogin:passwordContext:
_uid
resetKeys
setResetKeys:
_repair
_userNotified
_resetKeys
_retry
_failureCount
_authMethod
_options
_extensionIdentifier
_containerAppBundleIdentifier
_registrationToken
_ssoExtension
repair
TB,GisRepair,V_repair
TB,V_userNotified
TB,V_resetKeys
retry
TB,GisRetry,V_retry
Ti,V_failureCount
Ti,V_authMethod
TQ,V_options
T@"NSString",&,V_extensionIdentifier
T@"NSString",&,V_containerAppBundleIdentifier
T@"NSString",&,V_registrationToken
T@"POExtension",&,V_ssoExtension
_initWithClientId:issuer:tokenEndpointURL:jwksEndpointURL:audience:
URLByAppendingPathComponent:
configurationWithOpenIdConfigurationURL:identityProviderURL:clientId:issuer:completion:
sessionWithConfiguration:
URLWithString:
initWithClientID:issuer:tokenEndpointURL:jwksEndpointURL:audience:
isValidJSONObject:
setCustomAssertionRequestHeaderClaims:
setCustomAssertionRequestBodyClaims:
setCustomLoginRequestHeaderClaims:
setCustomLoginRequestBodyClaims:
setCustomRefreshRequestHeaderClaims:
setCustomRefreshRequestBodyClaims:
value
name
customRefreshRequestValues
customRefreshRequestHeaderClaims
customRefreshRequestBodyClaims
enumerateKeysAndObjectsUsingBlock:
configurationWithOpenIdConfigurationURL:clientID:issuer:completion:
setCustomAssertionRequestHeaderClaims:returningError:
setCustomAssertionRequestBodyClaims:returningError:
setCustomLoginRequestHeaderClaims:returningError:
setCustomLoginRequestBodyClaims:returningError:
setCustomRefreshRequestHeaderClaims:returningError:
setCustomRefreshRequestBodyClaims:returningError:
setInvalidCredentialPredicate:
setAccountDisplayName:
setAudience:
setTokenEndpointURL:
setJwksEndpointURL:
setNonceEndpointURL:
setNonceResponseKeypath:
setServerNonceClaimName:
setCustomNonceRequestValues:
setAdditionalScopes:
setIncludePreviousRefreshTokenInLoginRequest:
setPreviousRefreshTokenClaimName:
setCustomLoginRequestValues:
setRefreshEndpointURL:
setCustomRefreshRequestValues:
setKerberosTicketMappings:
_includePreviousRefreshTokenInLoginRequest
_invalidCredentialPredicate
_accountDisplayName
_clientID
_issuer
_audience
_tokenEndpointURL
_jwksEndpointURL
_nonceEndpointURL
_nonceResponseKeypath
_serverNonceClaimName
_customNonceRequestValues
_additionalScopes
_previousRefreshTokenClaimName
_customLoginRequestValues
_refreshEndpointURL
_customRefreshRequestValues
_kerberosTicketMappings
_customAssertionRequestHeaderClaims
_customAssertionRequestBodyClaims
_customLoginRequestHeaderClaims
_customLoginRequestBodyClaims
_customRefreshRequestHeaderClaims
_customRefreshRequestBodyClaims
T@"NSDictionary",&,V_customAssertionRequestHeaderClaims
T@"NSDictionary",&,V_customAssertionRequestBodyClaims
T@"NSDictionary",&,V_customLoginRequestHeaderClaims
T@"NSDictionary",&,V_customLoginRequestBodyClaims
T@"NSDictionary",&,V_customRefreshRequestHeaderClaims
T@"NSDictionary",&,V_customRefreshRequestBodyClaims
T@"NSString",&,N,V_invalidCredentialPredicate
T@"NSString",&,N,V_accountDisplayName
T@"NSString",R,N,V_clientID
T@"NSString",R,N,V_issuer
T@"NSString",&,N,V_audience
T@"NSURL",&,N,V_tokenEndpointURL
T@"NSURL",&,N,V_jwksEndpointURL
T@"NSURL",&,N,V_nonceEndpointURL
T@"NSString",&,N,V_nonceResponseKeypath
T@"NSString",&,N,V_serverNonceClaimName
T@"NSArray",&,N,V_customNonceRequestValues
T@"NSString",&,N,V_additionalScopes
TB,N,V_includePreviousRefreshTokenInLoginRequest
T@"NSString",&,N,V_previousRefreshTokenClaimName
T@"NSArray",&,N,V_customLoginRequestValues
T@"NSURL",&,N,V_refreshEndpointURL
T@"NSArray",&,N,V_customRefreshRequestValues
T@"NSArray",&,N,V_kerberosTicketMappings
HTTPMethod
path
host
allHTTPHeaderFields
HTTPBody
numberWithUnsignedInt:
_setTargetUserIdentifier:
setUid:
forLogin
setForLogin:
_forLogin
TI,V_uid
TB,V_forLogin
setPasswordData:
dateWithTimeIntervalSince1970:
assertion
client_id
request_nonce
grant_type
username
password
token_type
expires_in
expires_on
refresh_token
passwordData
_passwordData
T@"NSMutableData",&,V_passwordData
T@"NSArray",R,D
T@"NSDate",R,D
T@"NSMutableData",R,D
T@"NSDictionary",R
timeIntervalSince1970
numberWithDouble:
stringValue
setAudArray:
setAzp:
setNbf:
setUse:
setToken_type:
setExpires_in:
setExpires_on:
setRefresh_token:
setId_token:
T@"NSArray",&,D
T@"NSDate",&,D
T@"NSMutableData",&,D
interfaceWithProtocol:
setObject:forKey:
effectiveUserIdentifier
process
initWithXPCConnection:
initWithAuthenticationProcess:
loadConfiguration
saveConfiguration
setProcess:
keyWrap
setKeyWrap:
_process
_keyWrap
T@"POAgentAuthenticationProcess",&,V_process
T@"POKeyWrap",&,V_keyWrap
messageBuffer
serviceName
clientName
encryptionKeyType
sessionKey
_encryptionKeyType
_messageBuffer
_serviceName
_clientName
_sessionKey
T@"NSData",&,N,V_messageBuffer
T@"NSString",&,N,V_realm
T@"NSString",&,N,V_serviceName
T@"NSString",&,N,V_clientName
Ti,N,V_encryptionKeyType
T@"NSData",&,N,V_sessionKey
UTF8String
stringWithCString:encoding:
initWithUUIDString:
acquireCredentialForUUID:
copyKeyForKeyType:
createKeyFromEndpoint:error:
createIdentityFromEndpoint:error:
isDeviceRegistered
isUserRegistered
ssoTokens
setSsoTokens:
loginConfiguration
saveLoginConfiguration:error:
saveCertificate:keyType:
copyIdentityForKeyType:
copyDeviceAttestationCertificate
userNeedsReauthentication
deviceRegistrationsNeedsRepair
userRegistrationsNeedsRepair
deviceAttestationCertificate
_deviceAttestationCertificate
deviceRegistered
TB,R,GisDeviceRegistered
userRegistered
TB,R,GisUserRegistered
T@"NSString",R,C,N
T@"NSString",&,N
T@"NSDictionary",C,N
T@"POLoginConfiguration",R,C,N
T^{__SecCertificate=},R,N,V_deviceAttestationCertificate
_setStateAndNotify:
setPlatformSSOUnavailable
_token
Tq,R,N
initWithDomain:code:userInfo:
_initDataVaultIfNeededWithError:
_defaultConfigurationPath
dataWithContentsOfURL:
removeItemAtURL:error:
writeToURL:options:error:
setAttributes:ofItemAtPath:error:
setCredential:type:
fileExistsAtPath:isDirectory:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
fileSystemRepresentation
fileURLWithPath:
stringWithUTF8String:
stringByReplacingOccurrencesOfString:withString:
characterSetWithCharactersInString:
i48@0:8@16@24@32@40
i48@0:8@16@24^@32^@40
i32@0:8@16@24
@24@0:8@16
B16@0:8
@16@0:8
B24@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16@0:8
B32@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16@24
v24@0:8@16
v16@0:8
@"NSString"
@"POJWTHeader"
@"POJWTBody"
@40@0:8@16^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}24^{__SecCertificate=}32
@24@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16
@32@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16@24
@"POMutableJWTHeader"
@"POMutableJWTBody"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@?24
v40@0:8@16@24@?32
v24@0:8@?16
v32@0:8@"NSString"16@?<v@?@"NSData"@"NSError">24
v40@0:8@"NSData"16@"NSString"24@?<v@?B@"NSError">32
v32@0:8@"NSString"16@?<v@?B@"NSError">24
v40@0:8@"NSString"16@"NSData"24@?<v@?@"POUserConfiguration"@"NSError">32
v40@0:8@"POUserConfiguration"16@"NSString"24@?<v@?B@"NSError">32
v24@0:8@?<v@?B@"NSError">16
@"NSXPCConnection"
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
v20@0:8B16
v24@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16
B32@0:8@16^@24
B32@0:8@16^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}24
@20@0:8B16
@32@0:8@16@24
q16@0:8
v24@0:8q16
v24@0:8Q16
^{__SecCertificate=}16@0:8
v24@0:8^{__SecCertificate=}16
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}
^{__SecCertificate=}
@"NSData"
@"LAContext"
@"NSArray"
@"POKeychainHelper"
^{__SecKey=}16@0:8
v24@0:8^{__SecKey=}16
^{__SecIdentity=}16@0:8
^{__SecKey=}
@?16@0:8
v40@0:8@16q24@?32
v32@0:8q16@?24
v40@0:8q16@24@?32
v24@0:8@?<v@?@"NSString"@"NSError">16
v24@0:8@?<v@?@"NSData"@"NSError">16
v32@0:8@"NSData"16@?<v@?B@"NSError">24
v24@0:8@?<v@?@"POLoginConfiguration"@"NSError">16
v32@0:8@"POLoginConfiguration"16@?<v@?B@"NSError">24
v40@0:8@"NSData"16q24@?<v@?B@"NSError">32
v32@0:8q16@?<v@?@"NSXPCListenerEndpoint"@"NSError">24
v40@0:8q16@"NSData"24@?<v@?@"NSData"@"NSError">32
v24@0:8@?<v@?^{__SecCertificate=}@"NSError">16
@24@0:8q16
B32@0:8@16@24
@"POConfigurationManager"
@"POAgentAuthenticationProcess"
@"NSMutableArray"
@"NSObject"
@"SOConfigurationHost"
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}24@0:8q16
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}24@0:8@16
@24@0:8^{__SecCertificate=}16
^{__SecCertificate=}24@0:8@16
^{__SecIdentity=}32@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16^{__SecCertificate=}24
@32@0:8@16^{__SecKey=}24
B40@0:8@16@24^{__SecKey=}32
B40@0:8@16@24@32
@"NSData"32@0:8@"NSData"16^{__SecKey=}24
B40@0:8@"NSData"16@"NSData"24^{__SecKey=}32
B40@0:8@"NSData"16@"NSData"24@"NSString"32
v32@0:8@16@24
v32@0:8@"SOAuthorizationCredential"16@"NSError"24
v32@0:8@"NSDictionary"16@?<v@?B@"NSError">24
v32@0:8Q16@?24
v44@0:8@16i24Q28@?36
v32@0:8Q16@?<v@?q>24
v44@0:8@"NSString"16i24Q28@?<v@?q>36
@"SOExtension"
@"SORemoteExtensionViewController"
@"<POExtensionDelegate>"
v40@0:8@"UNUserNotificationCenter"16@"UNNotification"24@?<v@?Q>32
v40@0:8@"UNUserNotificationCenter"16@"UNNotificationResponse"24@?<v@?>32
v32@0:8@"UNUserNotificationCenter"16@"UNNotification"24
v24@0:8@"NSError"16
B24@0:8d16
v28@0:8B16^@20
v24@0:8B16B20
v28@0:8@16B24
v32@0:8@16B24B28
v40@0:8@16@24@32
@"POAuthenticationProcess"
@"SOExtensionManager"
@"POKeyBag"
@"UNUserNotificationCenter"
@"NSNotificationCenter"
@"POKerberosHelper"
@"PODirectoryServices"
@"PORegistrationContext"
@"NSTimer"
@"<POAgentAuthenticationProcessKerberosDelegate>"
v32@0:8@"NSURLSession"16@"NSError"24
v40@0:8@"NSURLSession"16@"NSURLAuthenticationChallenge"24@?<v@?q@"NSURLCredential">32
v24@0:8@"NSURLSession"16
v48@0:8@16@24@32@?40
v56@0:8@16@24@32@40@?48
v56@0:8@16@24q32q40q48
v32@0:8@"NSURLSession"16@"NSURLSessionTask"24
v48@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSURLRequest"32@?<v@?q@"NSURLRequest">40
v56@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSHTTPURLResponse"32@"NSURLRequest"40@?<v@?@"NSURLRequest">48
v48@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSURLAuthenticationChallenge"32@?<v@?q@"NSURLCredential">40
v40@0:8@"NSURLSession"16@"NSURLSessionTask"24@?<v@?@"NSInputStream">32
v56@0:8@"NSURLSession"16@"NSURLSessionTask"24q32q40q48
v40@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSURLSessionTaskMetrics"32
v40@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSError"32
v72@0:8@16@24@32@40@48@56@?64
v80@0:8@16@24@32@40@48^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}56^{__SecCertificate=}64@?72
v64@0:8@16@24@32@40^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}48@?56
v64@0:8@16@24@32@40@48@?56
@32@0:8@16^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}24
@48@0:8@16@24@32^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}40
@64@0:8@16@24@32@40@48@56
@40@0:8@16@24@32
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}32@0:8@16@24
B48@0:8@16@24@32^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}40
B40@0:8@16@24^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}32
@32@0:8@16^{__SecCertificate=}24
@24@0:8Q16
@"NSURLSession"
@32@0:8@16^@24
@48@0:8@16@24@32@40
@"NSMutableDictionary"
B28@0:8^{__CFString=}16B24
@"NSData"16@0:8
v24@0:8@"NSData"16
@"PODaemonConnection"
@"POUserConfiguration"
@"POLoginConfiguration"
@"PODeviceConfiguration"
@"POConfigurationVersion"
@24@0:8I16B20
Q32@0:8@16^B24
Q36@0:8@16@24B32
Q24@0:8@16
Q32@0:8@16@24
@"POServiceConnection"
i16@0:8
v20@0:8i16
@"POExtension"
@56@0:8@16@24@32@40@48
@"NSURL"
@"NSDictionary"
v44@0:8@16@24B32@?36
v32@0:8@"NSString"16@?<v@?QB@"NSError">24
v44@0:8@"NSString"16@"NSData"24B32@?<v@?Q@"NSError">36
v40@0:8@"NSString"16@"NSData"24@?<v@?Q@"NSError">32
v32@0:8@"NSString"16@?<v@?Q@"NSError">24
v40@0:8@"NSString"16@"NSData"24@?<v@?B@"NSError">32
I16@0:8
v20@0:8I16
@"NSMutableData"
@"POKeyWrap"
^{gss_cred_id_t_desc_struct=}24@0:8@16
v32@0:8^{__SecCertificate=}16q24
^{__SecIdentity=}24@0:8q16
@"POServiceLoginManagerConnection"
@32@0:8q16@24
@40@0:8q16@24@32
B24@0:8^@16
@(#)PROGRAM:PlatformSSO  PROJECT:AppSSO-1
com.apple.PlatformSSO
-[POKeychainHelper addTokens:metaData:toKeychainForService:username:]
-[POKeychainHelper retrieveTokensFromKeychainForService:username:returningTokens:metaData:]
v8@?0
com.apple.AppSSO
POKeychainHelper
%@.%@
%@.%@.%@.%@.%@
%@.%@.%@
%@.%@
APPLE
POJWT
com.apple.PlatformPSSO.daemon-queue
-[PODaemonConnection init]
-[PODaemonConnection dealloc]
Failed to connect to PSSO daemon
v16@?0@"NSError"8
com.apple.PlatformSSO.daemon-xpc
PODaemonConnection
kTokenExpiration
kTokenReceived
refresh_token
expires_in
created
v32@?0@8Q16^B24
POUserConfiguration
PODeviceConfiguration
-[POExtensionAgentProcess connectionInvalidated]
-[POExtensionAgentProcess keyProxyEndpointForKeyType:]
-[POExtensionAgentProcess identityForKeyType:]
-[POExtensionAgentProcess invalidateAllKeyProxies]
-[POExtensionAgentProcess isCallerCurrentSSOExtension]
com.apple.private.platformsso.loginmanager
-[POExtensionAgentProcess isDeviceRegisteredWithCompletion:]
-[POExtensionAgentProcess isUserRegisteredWithCompletion:]
-[POExtensionAgentProcess registrationTokenWithCompletion:]
-[POExtensionAgentProcess setRegistrationToken:completion:]
not impl
-[POExtensionAgentProcess ssoTokensWithCompletion:]
-[POExtensionAgentProcess setSsoTokens:completion:]
-[POExtensionAgentProcess loginConfigurationWithCompletion:]
-[POExtensionAgentProcess setLoginConfiguration:completion:]
Token endpoint URL is not approved profile URL.
Nonce endpoint URL is not approved profile URL.
Refresh endpoint URL is not approved profile URL.
SELF LIKE[c] %@
-[POExtensionAgentProcess setCertificateData:keyType:completion:]
-[POExtensionAgentProcess secKeyProxyEndpointForKeyType:completion:]
-[POExtensionAgentProcess attestKey:clientDataHash:completion:]
-[POExtensionAgentProcess copyDeviceAttestationCertificateWithCompletion:]
-[POExtensionAgentProcess userNeedsReauthenticationWithCompletion:]
v16@?0@"NSNotification"8
-[POExtensionAgentProcess deviceRegistrationsNeedsRepairWithCompletion:]
-[POExtensionAgentProcess userRegistrationsNeedsRepairWithCompletion:]
-[POExtensionAgentProcess presentRegistrationViewControllerWithCompletion:]
POExtensionAgentProcess
ASAuthorizationErrorDomain
com.apple.PlatformSSO.auth
P-256
POSecKeyHelper
PODirectoryServices
POES256JWTSigningAlgorithm
com.apple.PlatformPSSO.login-manager-queue
-[POServiceLoginManagerConnection init]
-[POServiceLoginManagerConnection dealloc]
-[POServiceLoginManagerConnection invalidate]
Failed to connect to PSSO service
com.apple.PlatformSSO.service-login-manager-xpc
POServiceLoginManagerConnection
-[POExtension unload]
-[POExtension beginDeviceRegistrationUsingOptions:completion:]
v16@?0q8
v24@?0@"SORemoteExtensionViewController"8@"NSError"16
-[POExtension beginUserRegistrationUsingUserName:authenticationMethod:options:completion:]
-[POExtension registrationDidComplete]
-[POExtension presentAuthorizationViewControllerWithHints:completion:]
No extension authorization view controller
-[POExtension authorizationDidCompleteWithCredential:error:]
POExtension
LOGIN
REGISTER
IGNORE
LOGIN_USER
REGISTER_DEVICE
REGISTER_USER
account_name
extension_identifier
com.apple.PlatformSSO.authenticationCompleted
authenticationResult
com.apple.ScreensaverRuleCheck
-[POAgentAuthenticationProcess initWithDelegate:]
com.apple.PlatformSSO.notifications
-[POAgentAuthenticationProcess handleScreenUnlock]
-[POAgentAuthenticationProcess handleAgentStartup]
-[POAgentAuthenticationProcess handleNetworkChange]
-[POAgentAuthenticationProcess handleScreenSaverRule]
v20@?0B8@"NSError"12
-[POAgentAuthenticationProcess performLoginForCurrentUser]
v24@?0Q8@"NSData"16
-[POAgentAuthenticationProcess requestUserAuthenticationWithUserInfo:]
-[POAgentAuthenticationProcess registrationTokenForExtensionIdentifier:]
-[POAgentAuthenticationProcess handleUserNeedsReauthenticationAfterDelay:]
-[POAgentAuthenticationProcess handleUserCredentialNeededAtLogin:returningContext:]
-[POAgentAuthenticationProcess _startDeviceRegistration]
-[POAgentAuthenticationProcess _startDeviceRegistration]_block_invoke
-[POAgentAuthenticationProcess _startUserRegistration]
-[POAgentAuthenticationProcess _startUserRegistration]_block_invoke
-[POAgentAuthenticationProcess handleDeviceAndUserRegistrationForRepair:]
-[POAgentAuthenticationProcess handleDeviceAndUserRegistrationForRepair:notified:]
-[POAgentAuthenticationProcess handleUserRegistrationForUser:repair:]
-[POAgentAuthenticationProcess handleUserRegistrationForUser:repair:notified:]
-[POAgentAuthenticationProcess configurationChanged:]
-[POAgentAuthenticationProcess handleConfigurationChanged:]
-[POAgentAuthenticationProcess handleRemovingRegistrationForExtension:]
-[POAgentAuthenticationProcess exchangeTGTForStatus:]
-[POAgentAuthenticationProcess handleKerberosMappingForTokens:loginConfiguration:userConfiguration:]
-[POAgentAuthenticationProcess handlePendingSSOTokens]
-[POAgentAuthenticationProcess handleUnfinishedTGTExchanges]
-[POAgentAuthenticationProcess notifyKerberosDelegateTGTDidBegin]
-[POAgentAuthenticationProcess notifyKerberosDelegateTGTDidComplete]
-[POAgentAuthenticationProcess setupTimerForAuthentication]
-[POAgentAuthenticationProcess windowDidClose]
-[POAgentAuthenticationProcess requestDidCompleteWithError:]
NOTIFICATION_SIGNIN_TITLE
CUSTOM_NOTIFICATION_SIGNIN_BODY
DEFAULT_NOTIFICATION_SIGNIN_BODY
NOTIFICATION_REGISTRATION_TITLE
CUSTOM_PASSWORD_NOTIFICATION_REGISTRATION_BODY
CUSTOM_NOTIFICATION_REGISTRATION_BODY
DEFAULT_PASSWORD_NOTIFICATION_REGISTRATION_BODY
DEFAULT_NOTIFICATION_REGISTRATION_BODY
-[POAgentAuthenticationProcess userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:]
NOTIFICATION_SIGNIN_BUTTON
NOTIFICATION_IGNORE_BUTTON
NOTIFICATION_REGISTER_BUTTON
POAgentAuthenticationProcess
RS256
ES256
ECDH-ES,A256GCM
v16@?0Q8
%@,%@
v16@?0^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}8
openid offline_access
%@ %@
Apple
POST
application/x-www-form-urlencoded
Content-type
application/json
Accept
grant_type
srv_challenge
Nonce
v32@?0@"NSData"8@"NSURLResponse"16@"NSError"24
password
urn:ietf:params:oauth:grant-type:jwt-bearer
jwe_crypto
ECDH-ES
A256GCM
client-request-id
platform_sso_version
&request=%@
keys
No login configuration
This is a fake server nonce
com.apple.testMessages
This is the previous refresh token
foo@example.com
Platform SSO Test Messages
----------
Key Generated for Signing All Test Messages: 
----------
Nonce Request: 
----------
Password Login JWT: 
----------
Password Login Request: 
----------
Embedded Assertion: 
----------
Embedded Login JWT: 
----------
Embedded Login Request: 
POAuthenticationProcess
POLoginTypeNone
POLoginTypePassword
POLoginTypeUserSecureEnclaveKey
%@ (%@)
POUserStateNormal
POUserStateNeedsAuthentication
POUserStateNeedsRegistration
POLoginResultInvalid
POLoginResultSuccess
POLoginResultPermanentFailure
POLoginResultFailure
POLoginResultCredentialFailure
POLoginResultUnavailable
POLoginResultCancelled
v24@?0@"NSData"8@"NSError"16
POCredentialUtil
POJWTHeader
RequireRootCAInSystemTrustStore
ForceKerberosTGTExchange
SOUtils
Unable to find class %s
POPreferences
com.apple.jwksCache
first load
-[POConfigurationManager jwksCacheForExtensionIdentifier:]
-[POConfigurationManager setJwksCache:forExtensionIdentifier:]
-[POConfigurationManager deviceConfigurationForExtension:]
-[POConfigurationManager saveDeviceConfiguration:forExtension:]
-[POConfigurationManager removeDeviceConfigurationForExtension:]
-[POConfigurationManager loginConfigurationForExtension:]
-[POConfigurationManager saveLoginConfiguration:forExtension:]
-[POConfigurationManager removeLoginConfigurationForExtension:]
v24@?0@"POUserConfiguration"8@"NSError"16
-[POConfigurationManager saveUserConfiguration:forUserName:]
userConfiguration updated
-[POConfigurationManager removeUserConfigurationForUserName:]
POConfigurationManager
-[POAuthPluginProcess initWithUid:forLogin:]
-[POAuthPluginProcess getLoginTypeForUser:tokensFresh:]
v28@?0Q8B16@"NSError"20
-[POAuthPluginProcess performPasswordLogin:passwordContext:updateLocalAccountPassword:]
v24@?0Q8@"NSError"16
-[POAuthPluginProcess performSEPKeyLogin:]
-[POAuthPluginProcess createUserAccount:passwordContext:]
-[POAuthPluginProcess saveCredentialForUserName:passwordContext:]
-[POAuthPluginProcess performLocalPasswordLogin:passwordContext:]
POAuthPluginProcess
urn:apple:platformsso
/.well-known/openid-configuration
token_endpoint
jwks_uri
issuer
v32@?0@8@16^B24
POLoginConfiguration
%@ %@ %@
HTTP/1.1
%@ %@
Host:
%@: %@
v32@?0@"NSString"8@"NSString"16^B24
com.apple.PlatformPSSO.auth-plugin-queue
-[POServiceConnection initWithUid:forLogin:]
-[POServiceConnection dealloc]
com.apple.PlatformSSO.login.service-xpc
com.apple.PlatformSSO.service-xpc
POServiceConnection
assertion
client_id
scope
nonce
request_nonce
username
token_type
expires_on
id_token
password redacted
POJWTBody
PORS256JWTSigningAlgorithm
-[POAgentProcess initWithXPCConnection:]
-[POAgentProcess initWithAuthenticationProcess:]
-[POAgentProcess connectionInvalidated]
-[POAgentProcess getLoginTypeForUser:completion:]
-[POAgentProcess performPasswordLogin:passwordContext:updateLocalAccountPassword:completion:]
-[POAgentProcess performSEPKeyLogin:completion:]
-[POAgentProcess createUserAccount:passwordContext:completion:]
-[POAgentProcess saveCredentialForUserName:passwordContext:completion:]
-[POAgentProcess performLocalPasswordLogin:passwordContext:completion:]
POAgentProcess
-[POKerberosHelper importKerberosEntry:error:]
%@@%@
-[POKerberosHelper exchangeKerberosTGTForEntry:]
krbtgt
-[POKerberosHelper checkForValidKerberosTGT:]
-[POKerberosHelper acquireCredentialForUUID:]
failed to find credential: %@
POKerberosHelper
-[POLoginManager init]
-[POLoginManager invalidate]
-[POLoginManager isDeviceRegistered]
-[POLoginManager isUserRegistered]
-[POLoginManager registrationToken]
v24@?0@"NSString"8@"NSError"16
-[POLoginManager ssoTokens]
-[POLoginManager setSsoTokens:]
-[POLoginManager loginConfiguration]
v24@?0@"POLoginConfiguration"8@"NSError"16
-[POLoginManager saveCertificate:keyType:]
-[POLoginManager copyKeyForKeyType:]
v24@?0@"NSXPCListenerEndpoint"8@"NSError"16
-[POLoginManager copyIdentityForKeyType:]
-[POLoginManager attestKey:clientDataHash:completion:]
-[POLoginManager copyDeviceAttestationCertificate]
v24@?0^{__SecCertificate=}8@"NSError"16
-[POLoginManager userNeedsReauthenticationWithCompletion:]
-[POLoginManager deviceRegistrationsNeedsRepair]
-[POLoginManager userRegistrationsNeedsRepair]
-[POLoginManager presentRegistrationViewControllerWithCompletion:]
-[POLoginManager resetKeys]
POLoginManager
-[POConfigurationVersion init]
/com.apple.PlatformSSO.version
-[POConfigurationVersion checkVersion]
-[POConfigurationVersion increaseVersionWithMessage:]
-[POConfigurationVersion setPlatformSSOUnavailable]
notify_register_check() failed with %u (test)
notify_set_state() failed with error %u
notify_cancel() failed with error %u
POConfigurationVersion
com.apple.PlatformSSO.device.%@.txt
com.apple.PlatformSSO.login.%@.txt
com.apple.PlatformSSO.user.%@.txt
/var/mobile/Library/ExtensibleSSO/Configuration/PlatformSSO
-[PODaemonProcess initWithXPCConnection:]
com.apple.private.platformsso.agent
-[PODaemonProcess connectionInvalidated]
-[PODaemonProcess deviceConfigurationForExtension:completion:]
-[PODaemonProcess loginConfigurationForExtension:completion:]
-[PODaemonProcess removeDeviceConfigurationForExtension:completion:]
-[PODaemonProcess removeLoginConfigurationForExtension:completion:]
-[PODaemonProcess removeUserConfigurationForIdentifier:completion:]
-[PODaemonProcess saveDeviceConfiguration:forExtension:completion:]
-[PODaemonProcess saveLoginConfiguration:forExtension:completion:]
-[PODaemonProcess saveUserConfiguration:forIdentifier:completion:]
-[PODaemonProcess userConfigurationForIdentifier:passwordContext:completion:]
-[PODaemonProcess resetStoredConfigurationWithCompletion:]
-[PODaemonProcess _initDataVaultIfNeededWithError:]
mobile
ExtensibleSSO
failed to check the state of datavault: %s
failed to convert to datavault: %s
IPHONE_SIMULATOR_ROOT
PODaemonProcess
osgn
oece
oecd
%s service %{public}@ on %@
Could not add tokens to keychain %{public}@
Error archiving meta data: %{public}@
Removing keychain entry returned %d
Finding keychain entry for service %{public}@
%s Could not find credentials in keychain. Invalid parameters on %@
Finding keychain entry failed with %d, %{public}@
Error unarchiving meta data: %{public}@
Deleting keychain entry for service %{public}@
Could not delete credentials from keychain, %{public}@
Deleting keychain entry failed with %d, %{public}@
Missing JWT parts: %{public}@
Incorrect number of JWT parts: %{public}@, %{public}@
Unsupported algorithm: %{public}@, %{public}@
Failed to decode signature: %{public}@
epk is missing or invalid: %{public}@
Error importing epk: %{public}@
aad is missing: %{public}@
iv is missing: %{public}@
cipher text is missing: %{public}@
tag data is missing: %{public}@
Header is missing epk: %{public}@
Error in SecKeyCopyKeyExchangeResult: %{public}@
Error decrypting: %{public}@, %{public}@
algorithm %{public}@ not found: %{public}@
failed to copy public key: %{public}@
missing required values: %{public}@
Header is missing: %{public}@
Error with SecKeyCreateRandomKey: %{public}@
Error with epk: %{public}@
Error with SecKeyCopyExternalRepresentation: %{public}@
Error with SecKeyCopyKeyExchangeResult: %{public}@
Error with SecRandomCopyBytes: %{public}@
Error with encoding ivData: %{public}@
Error with encoding header: %{public}@
Error with encoding body: %{public}@
Error with concatKDF: %{public}@
Error encrypting: %{public}@, %{public}@
%s  on %@
XPC error: %{public}@
%{public}@: XPC connection already exists
%{public}@: failed to create XPC connection
%{public}@: XPC connection invalidated
%{public}@: XPC connection interrupted
%{public}@: new XPC connection
Error serializing config: %{public}@
Error deserializing config: %{public}@
retrieving sso tokens
Error retrieving tokens: %d, %{public}@
setting sso tokens
Error saving tokens: %d, %{public}@
Error removing tokens: %d, %{public}@
encryptPendingSSOTokens
encryption algorithm not supported:%{public}@
failed to encrypt tokens: %{public}@
decryptPendingSSOTokensUsingPrivateKey
failed to decrypt tokens: %{public}@
Error deserializing tokens: %{public}@
failed to retrieve extension identifier, %{public}@
failed to retrieve device configuration for extension identifier: %{public}@, %{public}@
key not found for extension identifier: %{public}ld, %{public}@, %{public}@
bundleIdentifier: CPCopyBundleIdentifierAndTeamFromAuditToken(): %{public}@
bundleIdentifier: CPCopyBundleIdentifierAndTeamFromAuditToken() failed, trying SecTaskCopySigningIdentifier()
bundleIdentifier: SecTaskCopySigningIdentifier() failed %{public}@
bundleIdentifier: %{public}@
bundleIdentifier: SecTaskCreateWithAuditToken() failed, %{public}@
No device configuration for extension: %{public}@, %{public}@
Caller is not current extension: %{public}@, %{public}@
No stored SSO Tokens.
missing device encryption key for extension identifier: %{public}@, %{public}@
missing device encryption public key:%{public}@
failed to remove tokens: %{public}@
failed to save tokens: %{public}@
failed to save configuration: %{public}@
No validated Platform SSO Profiles: %{public}@
Error validating login configuration, %{public}@
failed to save login configuration for extension identifier %{public}@, %{public}@
%s keyType = %{public}@ on %@
failed to save device configuration: %{public}@
failed to receive endpoint: %{public}@
failed to retrieve user configuration for extension identifier: %{public}@, %{public}@
failed to save user configuration: %{public}@
failed to retrieve user configuration for extension identifier: %{public}@
Error SecAccessControlCreateWithFlags: %{public}@
Error setting protection: %{public}@
Error SecKeyCreateRandomKey: %{public}@
Error SecKeyCreateWithData: %{public}@
Current altDSID: %{private}@
signing algorithm not supported: %{public}@
No data to sign: %{public}@
Error creating signature: %{public}@
No certificate string: %{public}@
Failed to base64 decode: %{public}@
Failed to create certificate: %{public}@
Failed to get public key: %{public}@
No signature to verify: %{public}@
No data to verify: %{public}@
Error verifying signature: %{public}@
PlatformSSO extension not found (%{public}@)
requestAuthorizationViewControllerWithCompletion: remoteViewController = %{public}@, error = %{public}@
beginDeviceRegistrationUsingLoginManager completed, result = %{public}@
beginUserRegistrationUsingLoginManager completed, result = %{public}@
not a local account
Screen unlocked
First Unlock
Network Changed
Not configured for Platform SSO
Rule already checked
Rule successfully checked
Checking Login for user
%s user state = %{public}@ on %@
User state is needs authentication.
Tokens issued more than 4 hours ago
Tokens expire soon.
Kerberos cache not valid
User does not need authentication
User needs authentication
no device configuration for extension: %{public}@, %{public}@
registration not complete %{public}@
no login configuration for extension: %{public}@, %{public}@
%s loginType = %{public}@ on %@
Password authentication
no user configuration for user: %{public}@, %{public}@
no user credential for user: %{public}@, %{public}@
loginResult = %{public}@
failed to save login tokens: %{public}@
Authentication completed successfully
Authentication failed with invalid credential
Authentication failed and needs repair
Authentication failed because network is unavailable
Authentication failed
Login failed:, %{public}@
User Secure Enclave key authentication
no platform SSO Profiles: %{public}@
no user authentication during registration: %{public}@
Not a local account: %{public}@
Not a password user
Sending login notification
error sending local notification: %{public}@
%s creating new device configuration on %@
Sending beginDeviceRegistration
registrationResult = %{public}@
%s removing device and login configuration on %@
failed to remove device configuration: %{public}@
failed to remove login configuration: %{public}@
%s calling registrationDidComplete on %@
%s creating new user configuration on %@
Sending beginUserRegistration
%s registrationResult = %{public}@ on %@
failed to remove user configuration: %{public}@
%s removing user configuration on %@
registration previously failed, stopping
registration already in progress: %{public}@
Platform SSO extension not found: %{public}@, %{public}@
No supported authentication methods: %{public}@
Sending registration notification
Configuration changed
no existing device configuration for extension: %{public}@
no existing user configuration for user: %{public}@, %{public}@
Removing registration
registration not in progress for extension: %{public}@, %{public}@
user interaction not allowed for extension: %{public}@, %{public}@
No login configuration for extension: %{public}@, %{public}@
%s kerberos extension = %{public}@, isNetworkConnected = %{public}@ on %@
Exchanging TGT for realm: %{public}@
Successfully imported Kerberos ticket for realm: %{public}@
Mapping Kerberos TGT for %{public}@
Invalid TGT data type: %{public}@, %{public}@
Importing Kerberos TGT for %{public}@
failed to import kerberos ticket: %{public}@, %{public}@
Exchanging Kerberos TGT for %{public}@
Notifying TGT delegate for realm: %{public}@
missing required values: %{public}@, %{public}@
Saving Pendint SSO Tokens
no user configuration: %{public}@
Refresh token timer set: %{public}@
%s state = %{public}@, failureCount = %{public}@ on %@
%{public}@, %{public}@
Starting password authentication
Login Configuration: %{public}@
Device Configuration: %{public}@
User Configuration: %{public}@
failed to create nonce request: %{public}@
Sending nonce request
failed to retrieve nonce: %{public}@
failed to create login JWT: %{public}@
failed to create embedded assertion JWT: %{public}@
failed to sign embedded assertion: %{public}@
failed to sign login request: %{public}@
failed to create login request: %{public}@
Sending login request
Login response received
login request failed: %{public}@
failed to parse login response: %{public}@
unsupported login response algorithm and encryption: %{public}@, %{public}@,  %{public}@
failed to decrypt login response: %{public}@
failed to validate apu: %{public}@
failed to validate apv: %{public}@
no id_token in login response: %{public}@
no kid in login response id_token: %{public}@
JWKS response received
no key available with identifier: %{public}@, %{public}@
id_token signature check failed %{public}@
server nonce request: %{private}@
Nonce response received
failed to retrieve server nonce: %{public}@
failed to retrieve server nonce: %{public}ldd, %{public}@
server nonce response received: %{public}@
failed to parse server nonce response: %{public}@
audience missing from configuration: %{public}@
missing password or assertion: %{public}@
unable to use both password and assertion: %{public}@
failed to create request: %{public}@
Sending login request: %{public}@
failed to login: %{public}@
failed to login: %{public}ld, %{public}@
Credentials are not correct
login response received: %{public}@
using cached jwks: %{public}@
JWKS network response received
failed to login: %{public}ldd, %{public}@
jwks response received: %{public}@
failed to parse jwks response: %{public}@
failed to find key: %{public}@, %{public}@
failed to create key: %{public}@, %{public}@
failed to load key: %{public}@, %{public}@
Verifying id_token
validating id_token: %{private}@
unsupported id_token algorithm: %{public}@, %{public}@
failed to match nonce: %{public}@
failed to match issuer: %{public}@
audience does not contain client id: %{public}@
azp claim missing: %{public}@
failed to match audience: %{public}@
failed to match azp: %{public}@
failed to verify iat: %{public}f, %{public}@
failed to verify exp: %{public}f, %{public}@
failed to verify nbf: %{public}f, %{public}@
response missing apu: %{public}@
response missing epk: %{public}@
error with SecKeyCopyExternalRepresentation: %{public}@
error decoding apu: %{public}@
falied to validate apu: %{public}@
missing apv: %{public}@
error decoding apv: %{public}@
error with nonce data: %{public}@
falied to validate apv: %{public}@
Evaluating server trust
trustEvaluation failed: %{public}@
No root certificate: %{public}@
Root certificate is not in the system trust: %{public}@
HTTP Redirect received to %{public}@, canceling
Creating sample messages
credential failure: %{public}@
Error with JWT header data: %{public}@
Error with dataRepresentation: %{public}@
Invalid key type: %{public}@
Error with external representation: %{public}@
Error with dataRepresentation length: %{public}@
requireRootCAInSystemTrustStore=%{public}s
forceKerberosTGTExchange=%{public}s
Error retrieving jwks data: %d, %{public}@
Error saving jwks data: %d, %{public}@
Error removing jwks data: %d, %{public}@
id for user %{public}@ not found: %{public}@
failed to retrieve user configuration: %{public}@
%s userName = %{public}@ on %@
loginType = %{public}@, tokensFresh = %{public}@, error = %{public}@
%s userName = %{public}@, passwordContext = %{public}@, updateLocalAccountPassword = %{public}@ on %@
loginResult = %{public}@, error = %{public}@
%s userName = %{public}@, passwordContext = %{public}@ on %@
Error creating POLoginConfiguration: %{public}@
failed to retrieve openid-configuration
failed to retrieve openid-configuration: %ldd
open id response received: %{public}@
failed to parse openid-configuration response
failed to create login configuration
Claims are not valid JSON: %{public}@
serialized configuration: %{public}@
%s userID = %{public}@, login = %{public}@ on %@
Error with JWT body data: %{public}@
no credential for user: %{public}@, %{public}@
failed to get public key: %{public}@
failed to encrypt login tokens: %{public}@
failed to save user configuration for user: %{public}@, %{public}@
%s realm = %{public}@ on %@
failed to import TGT, %{public}@
%s Successful for realm = %{public}@ on %@
%s Success for realm = %{public}@ on %@
Error using cached credential: %{public}@
loginUserName saved
failed to save loginUserName: %{public}@
missing device encryption key:%{public}@
failed to parse sso tokens: %{public}@
removing tokens
tokens removed
failed to encode tokens to JSON: %{public}@
tokens saved
loginConfiguration saved
failed to save loginConfiguration: %{public}@
error with SecCertificateCopyData: %{public}@
failed to retrieve SecKeyProxyEndpoint: %{public}@
failed to create SecKey from SecKeyProxyEndpoint: %{public}@
failed to create SecIdentity from SecKeyProxyEndpoint: %{public}@
notify_register_check() failed with %u
notify_cancel() failed with %u
%s config version changed from from 0x%016llX to 0x%016llX on %@
%s config version increased from 0x%016llX to 0x%016llX (%{public}@) on %@
set config version to PlatformSSO unavailable
notify_get_state() failed with error %u
invalid notify token
notify_set_state() failed with error %u
notify_post() failed with error %u
missing required entitlement
updating rules database
restoring rules database if needed
%s extension = %{public}@ on %@
error initializing data vault: %{public}@
no data to load: %{public}@
%s identifier = %{public}@ on %@
failed to write device config to disk: %{public}@
failed to set attributes: %{public}@
device config written to file: %{public}@
failed to write login config to disk: %{public}@
login config written to file: %{public}@
saving credential
failed to remove login configuration folder: %{public}@
failed to create configuration directory at %{public}@: %{public}@
created configuration directory at %{public}@
failed to check the state of datavault: %{public}s
failed to convert to datavault: %{public}s
successfully created datavault at %{public}@
failed to get the simulator root path
softlink:r:path:/System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices
softlink:r:path:/System/Library/PrivateFrameworks/AppSSOCore.framework/AppSSOCore
softlink:r:path:/System/Library/Frameworks/AuthenticationServices.framework/AuthenticationServices
POKeychainHelper
POJWT
POMutableJWT
POKeyWrap
PODaemonProtocol
NSObject
PODaemonConnection
POKerberosStatus
NSSecureCoding
NSCoding
POUserConfiguration
PODeviceConfiguration
POKeyBag
POExtensionAgentProcess
POServiceLoginManagerProtocol
POSecKeyHelper
PODirectoryServices
POKerberosMapping
POES256JWTSigningAlgorithm
POJWTSigningAlgorithm
POServiceLoginManagerConnection
SHA256
POExtension
SOExtensionDelegate
POExtensionRegistrationProtocol
POAgentAuthenticationProcess
UNUserNotificationCenterDelegate
POExtensionDelegate
POAuthenticationProcess
NSURLSessionDelegate
NSURLSessionTaskDelegate
POAlgorithm
POConstantUtil
POAuthenticationContext
POCredentialUtil
POConcatKDF
POJWTHeader
POMutableJWTHeader
POPreferences
POConfigurationManager
POJWKSStorageProvider
POAuthPluginProcess
PORegistrationContext
POLoginConfiguration
print
POServiceProtocol
POServiceConnection
POJWTBody
POMutableJWTBody
POInternalProtocols
PORS256JWTSigningAlgorithm
POAgentProcess
POKerberosEntry
POKerberosHelper
POLoginManager
POConfigurationVersion
POError
PODaemonProcess
Base64URL
writeToURL:options:error:
HTTPMethod
JSONObjectWithData:options:error:
TGTReceivedForRealm:upn:cache:
TGTRequestDidBegin
TGTRequestDidComplete
URLByAppendingPathComponent:
URLPrefix
URLWithString:
UTF8String
UUID
UUIDString
_setQueue:
_setTargetUserIdentifier:
absoluteString
actionIdentifier
actionWithIdentifier:title:options:
addEntriesFromDictionary:
addNotificationRequest:withCompletionHandler:
addObject:
addObserver:selector:name:object:
addObserverForName:object:queue:usingBlock:
addTimer:forMode:
addValue:forHTTPHeaderField:
allHTTPHeaderFields
alternateDSID
appendBytes:length:
appendData:
archivedDataWithRootObject:requiringSecureCoding:error:
array
arrayByAddingObjectsFromArray:
arrayWithObjects:count:
auditToken
authenticationMethod
authenticationMethods
base64EncodedStringWithOptions:
bodyData
boolValue
bundleForClass:
bytes
categoryIdentifier
categoryWithIdentifier:actions:intentIdentifiers:options:
characterSetWithCharactersInString:
componentsSeparatedByString:
componentsWithString:
containsObject:
content
copy
count
countByEnumeratingWithState:objects:count:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
createIdentityFromEndpoint:error:
createKeyFromEndpoint:error:
credentialOfType:reply:
currentRunLoop
currentUser
dataTaskWithRequest:completionHandler:
dataTaskWithURL:completionHandler:
dataUsingEncoding:
dataWithBytes:length:
dataWithContentsOfURL:
dataWithJSONObject:options:error:
dataWithLength:
date
dateByAddingTimeInterval:
dateWithTimeIntervalSince1970:
dateWithTimeIntervalSinceNow:
decodeObjectOfClass:forKey:
defaultCenter
defaultManager
dictionaryWithObjects:forKeys:count:
doubleValue
effectiveUserIdentifier
encodeObject:forKey:
endpoint
enumerateKeysAndObjectsUsingBlock:
enumerateObjectsUsingBlock:
ephemeralSessionConfiguration
errorWithDomain:code:userInfo:
evaluateWithObject:
extensionBundleIdentifier
externalizedContext
fileExistsAtPath:isDirectory:
fileSystemRepresentation
fileURLWithPath:
firstObject
getBytes:range:
hasAnyMDMProfileForExtension:
host
iconForApplicationIdentifier:
identifier
initWithBase64EncodedString:options:
initWithBundleIdentifier:
initWithBytesNoCopy:length:encoding:freeWhenDone:
initWithData:encoding:
initWithDomain:code:userInfo:
initWithExternalizedContext:
initWithFireDate:interval:target:selector:userInfo:repeats:
initWithIdentity:
initWithKey:
initWithMachServiceName:options:
initWithTrust:
initWithURL:cachePolicy:timeoutInterval:
initWithUUIDString:
intValue
interfaceWithProtocol:
isAssociatedDomainValidated
isEqualToData:
isEqualToString:
isInternalBuild
isNetworkConnectedForRealm:
isRealmConfiguredForKerberosExtension:
isValidJSONObject:
lastObject
length
loadExtensionWithBundleIdentifier:
localizedStringForKey:value:table:
localizedStringWithFormat:
lowercaseString
mutableBytes
name
notification
numberWithBool:
numberWithDouble:
numberWithInt:
numberWithInteger:
numberWithUnsignedInt:
numberWithUnsignedInteger:
objectAtIndexedSubscript:
objectForKey:
objectForKeyedSubscript:
operatingSystemVersionString
path
percentEncodedQuery
postNotificationName:object:userInfo:
predicateWithFormat:
processInfo
protectionSpace
pssoAuthenticationMethod
pssoRegistrationToken
queryItemWithName:value:
remoteObjectProxyWithErrorHandler:
removeAllDeliveredNotifications
removeAllPendingNotificationRequests
removeDeliveredNotificationsWithIdentifiers:
removeItemAtURL:error:
removeObject:
removeObjectForKey:
removeObserver:
removePendingNotificationRequestsWithIdentifiers:
request
requestAuthorizationViewControllerWithCompletion:
requestWithIdentifier:content:trigger:destinations:
resume
serverTrust
sessionWithConfiguration:
sessionWithConfiguration:delegate:delegateQueue:
setAttributes:ofItemAtPath:error:
setCategoryIdentifier:
setCredential:type:
setExtensionDelegate:
setFormatOptions:
setFragment:
setHTTPBody:
setHTTPMethod:
setIcon:
setInterruptionHandler:
setInterruptionLevel:
setNotificationCategories:
setObject:forKey:
setObject:forKeyedSubscript:
setQuery:
setQueryItems:
setRemoteObjectInterface:
setShouldBackgroundDefaultAction:
setShouldPreventNotificationDismissalAfterDefaultAction:
setTitle:
setTolerance:
setUserInfo:
setValue:forKey:
setWantsNotificationResponsesDelivered
setWithArray:
set_preventsAppSSO:
sharedManager
standardUserDefaults
statusCode
stringByAppendingFormat:
stringByAppendingString:
stringByReplacingOccurrencesOfString:withString:
stringByTrimmingCharactersInSet:
stringForKey:
stringFromDate:
stringValue
stringWithCString:encoding:
stringWithFormat:
stringWithUTF8String:
subdataWithRange:
synchronousRemoteObjectProxyWithErrorHandler:
timeIntervalSince1970
timeIntervalSinceNow
triggerVPNForRealm:
triggerWithTimeInterval:repeats:
unarchivedDictionaryWithKeysOfClasses:objectsOfClasses:fromData:error:
userInfo
validatedProfileForPlatformSSO
value
valueForEntitlement:
valueForKeyPath:
whitespaceAndNewlineCharacterSet
HTTPBody
addTokens:metaData:toKeychainForService:username:
retrieveTokensFromKeychainForService:username:returningTokens:metaData:
removeTokensFromKeychainWithService:username:
init
initWithString:
isJWE
mutableCopy
verifySignatureUsingKey:
stringRepresentation
decodeEphemeralPublicKey
decodeAndDecryptUsingPrivateKey:
decodeAndDecryptUsingPrivateKey:apvString:
description
rawHeader
setRawHeader:
decodedHeader
setDecodedHeader:
rawEncryptedKey
setRawEncryptedKey:
rawIV
setRawIV:
rawBody
setRawBody:
decodedBody
setDecodedBody:
rawCipherText
setRawCipherText:
rawSignature
setRawSignature:
rawAuthenticationTag
setRawAuthenticationTag:
.cxx_destruct
_rawHeader
_decodedHeader
_rawEncryptedKey
_rawIV
_rawBody
_decodedBody
_rawCipherText
_rawSignature
_rawAuthenticationTag
T@"NSString",&,V_rawHeader
T@"POJWTHeader",&,V_decodedHeader
T@"NSString",&,V_rawEncryptedKey
T@"NSString",&,V_rawIV
T@"NSString",&,V_rawBody
T@"POJWTBody",&,V_decodedBody
T@"NSString",&,V_rawCipherText
T@"NSString",&,V_rawSignature
signedData
T@"NSData",&,D
T@"NSString",&,V_rawAuthenticationTag
TB,R,D,GisJWE
setBodyData:
encodeAndSignUsingAlgorithm:key:certificate:
encodeAndEncryptUsingPublicKey:
encodeAndEncryptUsingPublicKey:partyVInfo:
header
setHeader:
body
setBody:
_header
_body
T@"POMutableJWTHeader",&,V_header
T@"POMutableJWTBody",&,V_body
wrapBlob:
unwrapBlob:
dealloc
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
deviceConfigurationForExtension:completion:
saveDeviceConfiguration:forExtension:completion:
removeDeviceConfigurationForExtension:completion:
loginConfigurationForExtension:completion:
saveLoginConfiguration:forExtension:completion:
removeLoginConfigurationForExtension:completion:
userConfigurationForIdentifier:passwordContext:completion:
saveUserConfiguration:forIdentifier:completion:
removeUserConfigurationForIdentifier:completion:
resetStoredConfigurationWithCompletion:
enablePlatformSSORuleForScreensaver:
disablePlatformSSORuleForScreensaver:
xpcQueue
_connectToService
xpcConnection
setXpcConnection:
_xpcConnection
T@"NSXPCConnection",&,V_xpcConnection
ticketKeyPath
realm
cacheName
importSuccessful
exchangeRequired
dataRepresentation
supportsSecureCoding
encodeWithCoder:
initWithCoder:
TB,R
dictionaryRepresentation
initWithDictionary:
initWithData:
setTicketKeyPath:
setRealm:
setCacheName:
setUpn:
setImportSuccessful:
setExchangeRequired:
_importSuccessful
_exchangeRequired
_ticketKeyPath
_realm
_cacheName
_upn
T@"NSString",&,V_ticketKeyPath
T@"NSString",&,V_realm
T@"NSString",&,V_cacheName
T@"NSString",&,V_upn
TB,V_importSuccessful
TB,V_exchangeRequired
loginUserName
uniqueIdentifier
ssoExtensionIdentifier
loginType
state
_sepKeyData
sepKeyCertificate
_credential
pendingSSOTokens
kerberosStatus
_contextData
sepKey
setSepKey:
tokens
setTokens:returningError:
encryptPendingSSOTokens:usingPublicKey:
decryptPendingSSOTokensUsingPrivateKey:
tokenExpiration
tokenReceived
currentRefreshToken
calculateExpirationForTokens:
dataRepresentationForDisplay:
initWithData:contextData:
setLoginUserName:
setUniqueIdentifier:
setSsoExtensionIdentifier:
setState:
setLoginType:
setSepKeyCertificate:
set_credential:
set_contextData:
credentialContext
setCredentialContext:
setKerberosStatus:
setPendingSSOTokens:
set_sepKeyData:
keychainHelper
setKeychainHelper:
_sepKey
_loginUserName
_uniqueIdentifier
_ssoExtensionIdentifier
_state
_loginType
_sepKeyCertificate
__credential
__contextData
_credentialContext
_kerberosStatus
_pendingSSOTokens
__sepKeyData
_keychainHelper
T@"NSData",&,V__sepKeyData
T@"POKeychainHelper",&,V_keychainHelper
T@"NSString",&,V_loginUserName
T@"NSString",&,V_uniqueIdentifier
T@"NSString",&,V_ssoExtensionIdentifier
T@"NSData",R,D
T@"NSDate",R
Tq,V_state
TQ,V_loginType
T^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v},V_sepKey
T^{__SecCertificate=},N,V_sepKeyCertificate
T@"NSData",&,V__credential
T@"NSData",&,V__contextData
T@"LAContext",&,V_credentialContext
T@"NSArray",&,V_kerberosStatus
T@"NSData",&,V_pendingSSOTokens
_deviceSigningKeyData
deviceSigningCertificate
_deviceEncryptionKeyData
deviceEncryptionCertificate
registrationCompleted
deviceSigningKey
setDeviceSigningKey:
deviceEncryptionKey
setDeviceEncryptionKey:
deviceSigningIdentity
deviceEncryptionIdentity
setDeviceSigningCertificate:
setDeviceEncryptionCertificate:
setRegistrationCompleted:
set_deviceSigningKeyData:
set_deviceEncryptionKeyData:
_registrationCompleted
_deviceSigningKey
_deviceEncryptionKey
_deviceSigningCertificate
_deviceEncryptionCertificate
__deviceSigningKeyData
__deviceEncryptionKeyData
T@"NSData",&,N,V__deviceSigningKeyData
T@"NSData",&,N,V__deviceEncryptionKeyData
T^{__SecKey=},N,V_deviceSigningKey
T^{__SecCertificate=},N,V_deviceSigningCertificate
T^{__SecIdentity=},R,D
T^{__SecKey=},N,V_deviceEncryptionKey
T^{__SecCertificate=},N,V_deviceEncryptionCertificate
TB,V_registrationCompleted
isUserKeybagUnlocked
waitForKeyBagFirstUnlockWithCompletion:
waitForKeyBagFirstUnlockOnStartupWithCompletion:
startObservingKeyBagLockStatusChanges
stopObservingKeyBagLockStatusChanges
unlockCompletion
setUnlockCompletion:
startupCompletion
setStartupCompletion:
firstUnlock
setFirstUnlock:
_notifyToken
_firstUnlock
_unlockCompletion
_startupCompletion
T@?,C,V_unlockCompletion
T@?,C,V_startupCompletion
TB,V_firstUnlock
isDeviceRegisteredWithCompletion:
isUserRegisteredWithCompletion:
registrationTokenWithCompletion:
setRegistrationToken:completion:
loginUserNameWithCompletion:
setLoginUserName:completion:
ssoTokensWithCompletion:
setSsoTokens:completion:
loginConfigurationWithCompletion:
setLoginConfiguration:completion:
setCertificateData:keyType:completion:
secKeyProxyEndpointForKeyType:completion:
attestKey:clientDataHash:completion:
copyDeviceAttestationCertificateWithCompletion:
userNeedsReauthenticationWithCompletion:
deviceRegistrationsNeedsRepairWithCompletion:
userRegistrationsNeedsRepairWithCompletion:
presentRegistrationViewControllerWithCompletion:
resetKeysWithCompletion:
initWithXPCConnection:authenticationProcess:
connectionInvalidated
keyProxyEndpointForKeyType:
identityForKeyType:
invalidateAllKeyProxies
bundleIdentiferForXPCConnection:
isCallerCurrentSSOExtension
isURL:validForProfile:
invalidationHandler
setInvalidationHandler:
configurationManager
setConfigurationManager:
agentProcess
setAgentProcess:
keyProxies
setKeyProxies:
authenticationObserver
setAuthenticationObserver:
authenticationCompletion
setAuthenticationCompletion:
configurationHost
setConfigurationHost:
_invalidationHandler
_configurationManager
_agentProcess
_keyProxies
_authenticationObserver
_authenticationCompletion
_configurationHost
T@"POConfigurationManager",&,V_configurationManager
T@"POAgentAuthenticationProcess",&,V_agentProcess
T@"NSMutableArray",&,V_keyProxies
T@"NSObject",&,V_authenticationObserver
T@?,C,V_authenticationCompletion
T@"SOConfigurationHost",&,V_configurationHost
T@?,C,V_invalidationHandler
createSEPKeyForKeyType:
dataForKey:
keyForData:
dataForCertificate:
certificateForData:
identityForKey:andCertificate:
printKey:
uniqueIdentifierForUserName:
messageBufferKeyName
realmKeyName
serviceNameKeyName
clientNameKeyName
encryptionKeyTypeKeyName
sessionKeyKeyName
setMessageBufferKeyName:
setRealmKeyName:
setServiceNameKeyName:
setClientNameKeyName:
setEncryptionKeyTypeKeyName:
setSessionKeyKeyName:
_messageBufferKeyName
_realmKeyName
_serviceNameKeyName
_clientNameKeyName
_encryptionKeyTypeKeyName
_sessionKeyKeyName
T@"NSString",&,N,V_ticketKeyPath
T@"NSString",&,N,V_messageBufferKeyName
T@"NSString",&,N,V_realmKeyName
T@"NSString",&,N,V_serviceNameKeyName
T@"NSString",&,N,V_clientNameKeyName
T@"NSString",&,N,V_encryptionKeyTypeKeyName
T@"NSString",&,N,V_sessionKeyKeyName
signData:usingKey:
verifySignature:onData:usingKey:
verifySignature:onData:usingCertificateString:
invalidate
psso_sha256Hash
authorizationDidCompleteWithCredential:error:
presentAuthorizationViewControllerWithHints:completion:
beginDeviceRegistrationUsingOptions:completion:
beginUserRegistrationUsingUserName:authenticationMethod:options:completion:
registrationDidComplete
initWithExtensionBundleIdentifier:
unload
delegate
setDelegate:
_extension
_extensionViewController
_delegate
T@"<POExtensionDelegate>",W,V_delegate
configurationChanged:
performLoginForCurrentUser
userNotificationCenter:willPresentNotification:withCompletionHandler:
userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:
userNotificationCenter:openSettingsForNotification:
requestDidCompleteWithError:
windowDidClose
initWithDelegate:
handleScreenUnlock
handleAgentStartup
handleNetworkChange
handleScreenSaverRule
requestUserAuthenticationWithUserInfo:
postAuthenticationNotification:
registrationTokenForExtensionIdentifier:
handleUserNeedsReauthenticationAfterDelay:
handleUserCredentialNeededAtLogin:
handleUserCredentialNeededAtLogin:returningContext:
_startDeviceRegistration
_startUserRegistration
handleDeviceAndUserRegistrationForRepair:
handleDeviceAndUserRegistrationForRepair:notified:
handleUserRegistrationForUser:repair:
handleUserRegistrationForUser:repair:notified:
promptUserForRegistration
handleConfigurationChanged:
handleDeviceRegistrationNotification
handleUserRegistrationNotification
ssoMethodToUse:profile:
loadSSOExtensionWithExtensionBundleIdentifier:
handleRegistrationViewControllerForExtensionIdentifier:completion:
handleRemovingRegistrationForExtension:
handleKerberosMappingForTokens:extensionIdentifier:userConfiguration:
exchangeTGTForStatus:
handleKerberosMappingForTokens:loginConfiguration:userConfiguration:
handlePendingSSOTokens
handleUnfinishedTGTExchanges
notifyKerberosDelegateTGTDidBegin
notifyKerberosDelegateTGTDidComplete
setupTimerForAuthentication
createSignInNotificationWithAccountName:extensionIdentifier:
createRegistrationNotificationWithAccountName:
setupNotificationCategories
authenticationProcess
setAuthenticationProcess:
extensionManager
setExtensionManager:
keyBag
setKeyBag:
userNotificationCenter
setUserNotificationCenter:
notificationCenter
setNotificationCenter:
kerberosHelper
setKerberosHelper:
directoryServices
setDirectoryServices:
registrationContext
setRegistrationContext:
registrationFailed
setRegistrationFailed:
authenticationTimer
setAuthenticationTimer:
userName
setUserName:
localAccount
setLocalAccount:
kerberosDelegate
setKerberosDelegate:
_registrationFailed
_localAccount
_authenticationProcess
_extensionManager
_keyBag
_userNotificationCenter
_notificationCenter
_kerberosHelper
_directoryServices
_registrationContext
_authenticationTimer
_userName
_kerberosDelegate
T@"POAuthenticationProcess",&,V_authenticationProcess
T@"SOExtensionManager",&,V_extensionManager
T@"POKeyBag",&,V_keyBag
T@"UNUserNotificationCenter",&,V_userNotificationCenter
T@"NSNotificationCenter",&,V_notificationCenter
T@"POKerberosHelper",&,V_kerberosHelper
T@"PODirectoryServices",&,V_directoryServices
T@"PORegistrationContext",&,V_registrationContext
TB,V_registrationFailed
T@"NSTimer",&,V_authenticationTimer
T@"NSString",&,V_userName
TB,V_localAccount
T@"<POAgentAuthenticationProcessKerberosDelegate>",W,V_kerberosDelegate
URLSession:didBecomeInvalidWithError:
URLSession:didReceiveChallenge:completionHandler:
URLSessionDidFinishEventsForBackgroundURLSession:
URLSession:didCreateTask:
URLSession:task:willBeginDelayedRequest:completionHandler:
URLSession:taskIsWaitingForConnectivity:
URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:
URLSession:task:didReceiveChallenge:completionHandler:
URLSession:task:needNewBodyStream:
URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:
URLSession:task:didFinishCollectingMetrics:
URLSession:task:didCompleteWithError:
performPasswordLoginUsingLoginConfiguration:deviceConfiguration:userConfiguration:jwksStorageProvider:userName:password:completion:
performSEPKeyLoginUsingLoginConfiguration:deviceConfiguration:userConfiguration:jwksStorageProvider:userName:signingKey:certificate:completion:
performTokenRefreshUsingLoginConfiguration:deviceConfiguration:userConfiguration:refreshToken:signingKey:completion:
performLoginWithContext:loginConfiguration:deviceConfiguration:jwksStorageProvider:loginJWT:completion:
createAuthenticationContextUsingLoginConfiguration:deviceConfiguration:
createPartyVInfoWithContext:apvKey:
createNonceRequestWithContext:loginConfiguration:
performNonceRequestWithContext:loginConfiguration:request:completion:
createEmbeddedAssertionWithContext:loginConfiguration:userName:signingKey:
createLoginJWTWithContext:loginConfiguration:userConfiguration:userName:password:embeddedAssertion:
createLoginRequestWithContext:loginConfiguration:jwt:
performLoginRequestWithContext:loginConfiguration:request:completion:
retrieveSigningKeyWithContext:loginConfiguration:jwksStorageProvider:keyId:completion:
findKey:inJWKSData:
validateIdToken:context:loginConfiguration:key:
validatePartyUInfo:context:
validatePartyVInfo:context:publicKey:
createTestMessagesForLoginConfiguration:certificate:
algorithmWithIdentifier:
stringForLoginType:
stringForUserState:
stringForLoginResult:
serverNonce
setServerNonce:
nonce
setNonce:
requestIdentifier
setRequestIdentifier:
scope
setScope:
setApv:
urlSession
setUrlSession:
_serverNonce
_nonce
_requestIdentifier
_scope
_apv
_urlSession
T@"NSString",&,N,V_serverNonce
T@"NSString",&,N,V_nonce
T@"NSString",&,N,V_requestIdentifier
T@"NSString",&,N,V_scope
T@"NSString",&,N,V_apv
T@"NSURLSession",&,N,V_urlSession
passwordDataFromContext:error:
passwordStringFromData:
concatKDFWithKey:algorithm:partyUInfo:partyVInfo:
initWithJWTData:
allData
data
setData:
_data
T@"NSMutableDictionary",&,V_data
T@"NSString",R,D
T@"NSNumber",R,D
T@"NSDictionary",R,D
setTyp:
setCty:
setAlg:
setX5c:
setX5t:
setKid:
setEnc:
setP2s:
setP2c:
setEpk:
setApu:
addCustomClaims:
addEphemeralPublicKey:
T@"NSString",&,D
T@"NSNumber",&,D
T@"NSDictionary",&,D
boolValueForKey:defaultValue:
requireRootCAInSystemTrustStore
forceKerberosTGTExchange
TB,R,N
sharedInstance
jwksCache
setJwksCache:
T@"NSData",&
initWithUserName:
currentUserConfiguration
saveCurrentUserConfiguration
currentDeviceConfiguration
currentLoginConfiguration
jwksCacheForExtensionIdentifier:
setJwksCache:forExtensionIdentifier:
deviceConfigurationForExtension:
saveDeviceConfiguration:forExtension:
removeDeviceConfigurationForExtension:
loginConfigurationForExtension:
saveLoginConfiguration:forExtension:
removeLoginConfigurationForExtension:
userConfigurationForUserName:
userConfigurationForUserName:passwordContext:
saveUserConfiguration:forUserName:
removeUserConfigurationForUserName:
resetStoredConfiguration
enableScreensaverRuleIfNeeded:
restoreScreensaverRuleIfNeeded
userIdentifier
version
setVersion:
_serviceConnection
_currentUserConfiguration
_currentLoginConfiguration
_currentDeviceConfiguration
_userIdentifier
_version
T@"NSString",R,V_userIdentifier
T@"POConfigurationVersion",&,V_version
T@"NSString",R,V_userName
T@"POUserConfiguration",R,V_currentUserConfiguration
T@"PODeviceConfiguration",R,V_currentDeviceConfiguration
T@"POLoginConfiguration",R,V_currentLoginConfiguration
initWithUid:forLogin:
getLoginTypeForUser:tokensFresh:
performPasswordLogin:passwordContext:updateLocalAccountPassword:
performSEPKeyLogin:
createUserAccount:passwordContext:
saveCredentialForUserName:passwordContext:
performLocalPasswordLogin:passwordContext:
_uid
isUserNotification
isRepair
setRepair:
userNotified
setUserNotified:
resetKeys
setResetKeys:
isRetry
setRetry:
failureCount
setFailureCount:
authMethod
setAuthMethod:
options
setOptions:
extensionIdentifier
setExtensionIdentifier:
containerAppBundleIdentifier
setContainerAppBundleIdentifier:
registrationToken
setRegistrationToken:
ssoExtension
setSsoExtension:
_repair
_userNotified
_resetKeys
_retry
_failureCount
_authMethod
_options
_extensionIdentifier
_containerAppBundleIdentifier
_registrationToken
_ssoExtension
repair
TB,GisRepair,V_repair
TB,V_userNotified
TB,V_resetKeys
retry
TB,GisRetry,V_retry
Ti,V_failureCount
Ti,V_authMethod
TQ,V_options
T@"NSString",&,V_extensionIdentifier
T@"NSString",&,V_containerAppBundleIdentifier
T@"NSString",&,V_registrationToken
T@"POExtension",&,V_ssoExtension
clientID
issuer
audience
tokenEndpointURL
jwksEndpointURL
accountDisplayName
invalidCredentialPredicate
nonceEndpointURL
nonceResponseKeypath
serverNonceClaimName
customNonceRequestValues
customAssertionRequestHeaderClaims
customAssertionRequestBodyClaims
additionalScopes
includePreviousRefreshTokenInLoginRequest
previousRefreshTokenClaimName
customLoginRequestValues
customLoginRequestHeaderClaims
customLoginRequestBodyClaims
refreshEndpointURL
customRefreshRequestValues
customRefreshRequestHeaderClaims
customRefreshRequestBodyClaims
kerberosTicketMappings
configurationWithOpenIdConfigurationURL:clientID:issuer:completion:
configurationWithOpenIdConfigurationURL:identityProviderURL:clientId:issuer:completion:
initWithClientID:issuer:tokenEndpointURL:jwksEndpointURL:audience:
_initWithClientId:issuer:tokenEndpointURL:jwksEndpointURL:audience:
setCustomAssertionRequestHeaderClaims:returningError:
setCustomAssertionRequestBodyClaims:returningError:
setCustomLoginRequestHeaderClaims:returningError:
setCustomLoginRequestBodyClaims:returningError:
setCustomRefreshRequestHeaderClaims:returningError:
setCustomRefreshRequestBodyClaims:returningError:
setInvalidCredentialPredicate:
setAccountDisplayName:
setAudience:
setTokenEndpointURL:
setJwksEndpointURL:
setNonceEndpointURL:
setNonceResponseKeypath:
setServerNonceClaimName:
setCustomNonceRequestValues:
setAdditionalScopes:
setIncludePreviousRefreshTokenInLoginRequest:
setPreviousRefreshTokenClaimName:
setCustomLoginRequestValues:
setRefreshEndpointURL:
setCustomRefreshRequestValues:
setKerberosTicketMappings:
setCustomAssertionRequestHeaderClaims:
setCustomAssertionRequestBodyClaims:
setCustomLoginRequestHeaderClaims:
setCustomLoginRequestBodyClaims:
setCustomRefreshRequestHeaderClaims:
setCustomRefreshRequestBodyClaims:
_includePreviousRefreshTokenInLoginRequest
_invalidCredentialPredicate
_accountDisplayName
_clientID
_issuer
_audience
_tokenEndpointURL
_jwksEndpointURL
_nonceEndpointURL
_nonceResponseKeypath
_serverNonceClaimName
_customNonceRequestValues
_additionalScopes
_previousRefreshTokenClaimName
_customLoginRequestValues
_refreshEndpointURL
_customRefreshRequestValues
_kerberosTicketMappings
_customAssertionRequestHeaderClaims
_customAssertionRequestBodyClaims
_customLoginRequestHeaderClaims
_customLoginRequestBodyClaims
_customRefreshRequestHeaderClaims
_customRefreshRequestBodyClaims
T@"NSDictionary",&,V_customAssertionRequestHeaderClaims
T@"NSDictionary",&,V_customAssertionRequestBodyClaims
T@"NSDictionary",&,V_customLoginRequestHeaderClaims
T@"NSDictionary",&,V_customLoginRequestBodyClaims
T@"NSDictionary",&,V_customRefreshRequestHeaderClaims
T@"NSDictionary",&,V_customRefreshRequestBodyClaims
T@"NSString",&,N,V_invalidCredentialPredicate
T@"NSString",&,N,V_accountDisplayName
T@"NSString",R,N,V_clientID
T@"NSString",R,N,V_issuer
T@"NSString",&,N,V_audience
T@"NSURL",&,N,V_tokenEndpointURL
T@"NSURL",&,N,V_jwksEndpointURL
T@"NSURL",&,N,V_nonceEndpointURL
T@"NSString",&,N,V_nonceResponseKeypath
T@"NSString",&,N,V_serverNonceClaimName
T@"NSArray",&,N,V_customNonceRequestValues
T@"NSString",&,N,V_additionalScopes
TB,N,V_includePreviousRefreshTokenInLoginRequest
T@"NSString",&,N,V_previousRefreshTokenClaimName
T@"NSArray",&,N,V_customLoginRequestValues
T@"NSURL",&,N,V_refreshEndpointURL
T@"NSArray",&,N,V_customRefreshRequestValues
T@"NSArray",&,N,V_kerberosTicketMappings
psso_DisplayRequest
getLoginTypeForUser:completion:
performPasswordLogin:passwordContext:updateLocalAccountPassword:completion:
performLocalPasswordLogin:passwordContext:completion:
performSEPKeyLogin:completion:
createUserAccount:passwordContext:completion:
saveCredentialForUserName:passwordContext:completion:
setUid:
forLogin
setForLogin:
_forLogin
TI,V_uid
TB,V_forLogin
zeroPassword
audArray
assertion
client_id
request_nonce
grant_type
username
password
token_type
expires_in
expires_on
refresh_token
id_token
passwordData
setPasswordData:
_passwordData
T@"NSMutableData",&,V_passwordData
T@"NSArray",R,D
T@"NSDate",R,D
T@"NSMutableData",R,D
T@"NSDictionary",R
setAud:
setAudArray:
setAzp:
setIss:
setSub:
setIat:
setExp:
setNbf:
setUse:
setAssertion:
setClient_id:
setRequest_nonce:
setGrant_type:
setUsername:
setPassword:
setToken_type:
setExpires_in:
setExpires_on:
setRefresh_token:
setId_token:
T@"NSArray",&,D
T@"NSDate",&,D
T@"NSMutableData",&,D
interfaceWithInternalProtocol:
initWithXPCConnection:
initWithAuthenticationProcess:
loadConfiguration
saveConfiguration
process
setProcess:
keyWrap
setKeyWrap:
_process
_keyWrap
T@"POAgentAuthenticationProcess",&,V_process
T@"POKeyWrap",&,V_keyWrap
messageBuffer
serviceName
clientName
encryptionKeyType
sessionKey
hasAllRequiredValues
setMessageBuffer:
setServiceName:
setClientName:
setEncryptionKeyType:
setSessionKey:
_encryptionKeyType
_messageBuffer
_serviceName
_clientName
_sessionKey
T@"NSData",&,N,V_messageBuffer
T@"NSString",&,N,V_realm
T@"NSString",&,N,V_serviceName
T@"NSString",&,N,V_clientName
Ti,N,V_encryptionKeyType
T@"NSData",&,N,V_sessionKey
importKerberosEntry:error:
exchangeKerberosTGTForEntry:
checkForValidKerberosTGT:
acquireCredentialForUUID:
isDeviceRegistered
isUserRegistered
ssoTokens
setSsoTokens:
loginConfiguration
saveLoginConfiguration:error:
saveCertificate:keyType:
copyKeyForKeyType:
copyIdentityForKeyType:
copyDeviceAttestationCertificate
userNeedsReauthentication
deviceRegistrationsNeedsRepair
userRegistrationsNeedsRepair
deviceAttestationCertificate
_deviceAttestationCertificate
deviceRegistered
TB,R,GisDeviceRegistered
userRegistered
TB,R,GisUserRegistered
T@"NSString",R,C,N
T@"NSString",&,N
T@"NSDictionary",C,N
T@"POLoginConfiguration",R,C,N
T^{__SecCertificate=},R,N,V_deviceAttestationCertificate
reset
checkVersion
increaseVersionWithMessage:
setPlatformSSOUnavailable
_setStateAndNotify:
_token
Tq,R,N
errorWithCode:
errorWithCode:underlyingError:
errorWithCode:underlyingError:description:
internalErrorWithMessage:
_initDataVaultIfNeededWithError:
_defaultConfigurationPath
psso_base64URLEncodedString
psso_initWithBase64URLEncodedString:
i48@0:8@16@24@32@40
i48@0:8@16@24^@32^@40
i32@0:8@16@24
@24@0:8@16
B16@0:8
@16@0:8
B24@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16@0:8
B32@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16@24
v24@0:8@16
v16@0:8
@"NSString"
@"POJWTHeader"
@"POJWTBody"
@40@0:8@16^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}24^{__SecCertificate=}32
@24@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16
@32@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16@24
@"POMutableJWTHeader"
@"POMutableJWTBody"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@?24
v40@0:8@16@24@?32
v24@0:8@?16
v32@0:8@"NSString"16@?<v@?@"NSData"@"NSError">24
v40@0:8@"NSData"16@"NSString"24@?<v@?B@"NSError">32
v32@0:8@"NSString"16@?<v@?B@"NSError">24
v40@0:8@"NSString"16@"NSData"24@?<v@?@"POUserConfiguration"@"NSError">32
v40@0:8@"POUserConfiguration"16@"NSString"24@?<v@?B@"NSError">32
v24@0:8@?<v@?B@"NSError">16
@"NSXPCConnection"
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
v20@0:8B16
v24@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16
B32@0:8@16^@24
B32@0:8@16^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}24
@20@0:8B16
@32@0:8@16@24
q16@0:8
v24@0:8q16
v24@0:8Q16
^{__SecCertificate=}16@0:8
v24@0:8^{__SecCertificate=}16
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}
^{__SecCertificate=}
@"NSData"
@"LAContext"
@"NSArray"
@"POKeychainHelper"
^{__SecKey=}16@0:8
v24@0:8^{__SecKey=}16
^{__SecIdentity=}16@0:8
^{__SecKey=}
@?16@0:8
v40@0:8@16q24@?32
v32@0:8q16@?24
v40@0:8q16@24@?32
v24@0:8@?<v@?@"NSString"@"NSError">16
v24@0:8@?<v@?@"NSData"@"NSError">16
v32@0:8@"NSData"16@?<v@?B@"NSError">24
v24@0:8@?<v@?@"POLoginConfiguration"@"NSError">16
v32@0:8@"POLoginConfiguration"16@?<v@?B@"NSError">24
v40@0:8@"NSData"16q24@?<v@?B@"NSError">32
v32@0:8q16@?<v@?@"NSXPCListenerEndpoint"@"NSError">24
v40@0:8q16@"NSData"24@?<v@?@"NSData"@"NSError">32
v24@0:8@?<v@?^{__SecCertificate=}@"NSError">16
@24@0:8q16
B32@0:8@16@24
@"POConfigurationManager"
@"POAgentAuthenticationProcess"
@"NSMutableArray"
@"NSObject"
@"SOConfigurationHost"
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}24@0:8q16
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}24@0:8@16
@24@0:8^{__SecCertificate=}16
^{__SecCertificate=}24@0:8@16
^{__SecIdentity=}32@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16^{__SecCertificate=}24
@32@0:8@16^{__SecKey=}24
B40@0:8@16@24^{__SecKey=}32
B40@0:8@16@24@32
@"NSData"32@0:8@"NSData"16^{__SecKey=}24
B40@0:8@"NSData"16@"NSData"24^{__SecKey=}32
B40@0:8@"NSData"16@"NSData"24@"NSString"32
v32@0:8@16@24
v32@0:8@"SOAuthorizationCredential"16@"NSError"24
v32@0:8@"NSDictionary"16@?<v@?B@"NSError">24
v32@0:8Q16@?24
v44@0:8@16i24Q28@?36
v32@0:8Q16@?<v@?q>24
v44@0:8@"NSString"16i24Q28@?<v@?q>36
@"SOExtension"
@"SORemoteExtensionViewController"
@"<POExtensionDelegate>"
v40@0:8@"UNUserNotificationCenter"16@"UNNotification"24@?<v@?Q>32
v40@0:8@"UNUserNotificationCenter"16@"UNNotificationResponse"24@?<v@?>32
v32@0:8@"UNUserNotificationCenter"16@"UNNotification"24
v24@0:8@"NSError"16
B24@0:8d16
v28@0:8B16^@20
v24@0:8B16B20
v28@0:8@16B24
v32@0:8@16B24B28
v40@0:8@16@24@32
@"POAuthenticationProcess"
@"SOExtensionManager"
@"POKeyBag"
@"UNUserNotificationCenter"
@"NSNotificationCenter"
@"POKerberosHelper"
@"PODirectoryServices"
@"PORegistrationContext"
@"NSTimer"
@"<POAgentAuthenticationProcessKerberosDelegate>"
v32@0:8@"NSURLSession"16@"NSError"24
v40@0:8@"NSURLSession"16@"NSURLAuthenticationChallenge"24@?<v@?q@"NSURLCredential">32
v24@0:8@"NSURLSession"16
v48@0:8@16@24@32@?40
v56@0:8@16@24@32@40@?48
v56@0:8@16@24q32q40q48
v32@0:8@"NSURLSession"16@"NSURLSessionTask"24
v48@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSURLRequest"32@?<v@?q@"NSURLRequest">40
v56@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSHTTPURLResponse"32@"NSURLRequest"40@?<v@?@"NSURLRequest">48
v48@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSURLAuthenticationChallenge"32@?<v@?q@"NSURLCredential">40
v40@0:8@"NSURLSession"16@"NSURLSessionTask"24@?<v@?@"NSInputStream">32
v56@0:8@"NSURLSession"16@"NSURLSessionTask"24q32q40q48
v40@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSURLSessionTaskMetrics"32
v40@0:8@"NSURLSession"16@"NSURLSessionTask"24@"NSError"32
v72@0:8@16@24@32@40@48@56@?64
v80@0:8@16@24@32@40@48^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}56^{__SecCertificate=}64@?72
v64@0:8@16@24@32@40^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}48@?56
v64@0:8@16@24@32@40@48@?56
@32@0:8@16^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}24
@48@0:8@16@24@32^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}40
@64@0:8@16@24@32@40@48@56
@40@0:8@16@24@32
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}32@0:8@16@24
B48@0:8@16@24@32^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}40
B40@0:8@16@24^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}32
@32@0:8@16^{__SecCertificate=}24
@24@0:8Q16
@"NSURLSession"
@32@0:8@16^@24
@48@0:8@16@24@32@40
@"NSMutableDictionary"
B28@0:8^{__CFString=}16B24
@"NSData"16@0:8
v24@0:8@"NSData"16
@"PODaemonConnection"
@"POUserConfiguration"
@"POLoginConfiguration"
@"PODeviceConfiguration"
@"POConfigurationVersion"
@24@0:8I16B20
Q32@0:8@16^B24
Q36@0:8@16@24B32
Q24@0:8@16
Q32@0:8@16@24
@"POServiceConnection"
i16@0:8
v20@0:8i16
@"POExtension"
@56@0:8@16@24@32@40@48
@"NSURL"
@"NSDictionary"
v44@0:8@16@24B32@?36
v32@0:8@"NSString"16@?<v@?QB@"NSError">24
v44@0:8@"NSString"16@"NSData"24B32@?<v@?Q@"NSError">36
v40@0:8@"NSString"16@"NSData"24@?<v@?Q@"NSError">32
v32@0:8@"NSString"16@?<v@?Q@"NSError">24
v40@0:8@"NSString"16@"NSData"24@?<v@?B@"NSError">32
I16@0:8
v20@0:8I16
@"NSMutableData"
@"POKeyWrap"
^{gss_cred_id_t_desc_struct=}24@0:8@16
v32@0:8^{__SecCertificate=}16q24
^{__SecIdentity=}24@0:8q16
@"POServiceLoginManagerConnection"
@32@0:8q16@24
@40@0:8q16@24@32
B24@0:8^@16
