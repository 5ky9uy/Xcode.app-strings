@(#)PROGRAM:DaemonUtils  PROJECT:CoreAuthentication-985.100.51.122.1
5EEB160F-45FB-4CE9-B4E3-610359ABF6F8
v8@?0
%@:%@
IODeviceTree:/options
IONVRAM-DELETE-PROPERTY
Error setting NVRAM variable: %d
v32@?0@8@16^B24
Biometry not supported in EDU mode
Failed to acquire device manager class
Failed to enumerate biometric devices
Unexpected failure to enumerate device of type %d
Biometry is not available on this device.
Failed to acquire device class
Failed to create device with %@: %@
Unknown device type: %d
com.apple.BiometricKit.enrollmentChanged
B8@?0
No identities are enrolled.
Biometry is not available before first unlock.
Biometry is not available in passcode lockout.
Biometry is locked out.
Token for device unlock has expired.
Biometry is disabled for unlock.
Identification lockout
Face ID interlocked
Unknown lockout state
@"NSObject"24@?0^d8^@16
Biometry lost.
Failed to determine user presence status.
v32@?0@"NSNumber"8@"NSArray"16^B24
-[BiometryHelper resetBiometry]
BKDeviceManager
Unable to find class %s
/System/Library/PrivateFrameworks/BiometricKit.framework/BiometricKit
/System/Library/PrivateFrameworks/BiometricKit.framework/Contents/MacOS/BiometricKit
BKDevice
LA monitoring HW button for double press
v16@?0@"SBSAssertion"8
default
double press from %llu has expired
was already
Failed to register SB button observer.
Unable to determine request.
com.apple.LocalAuthentication
Request
{?=[8I]}
<%@[%d] UID: %d>
Caller
daemon-serial-queue
com.apple.intents-service
com.apple.siri
is not
com.apple.services
com.apple.ctk-tokens
HasSEP
8olRm6C1xqr7AJGpLRnpSw
touch-id
DeviceSupportsSecureDoubleClick
softlink:o:path:/System/Library/PrivateFrameworks/BiometricKit.framework/BiometricKit
Unexpected biometry type: %d
%{public}@
Lockout state not recognized: %d
lockoutErrorForState:%d returned %{public}@
lockoutErrorForExtendedState:%d returned %{public}@
bioLockoutState failed: %{public}@
User %{public}@ is locked out: %{public}@, purpose:%d
Failed to determine catacomb UUID: %{public}@
User present: %{public}@
%{public}@ is accessing biometry while running as root. Daemons need to specify the UID of the enrolled user via LAOptionUserId.
%{public}@ is accessing biometry while not running as mobile. Multiuser support is not available.
Failed to get protected configuration for user %{public}@: %{public}@
Failed to read identities: %@
Identities updated from %{public}@ to %{public}@
%s  on %@
dropAllUnlockTokens failed: %{public}@
BK notification received: %{public}@
Unexpected notification parameters
PushButtonMonitor will acquire assertion
PushButtonMonitor failed to acquire PreArmSuppression assertion from SB
PushButtonMonitor acquired PreArmSuppression assertion: %{public}@
PushButtonMonitor has consumed existing double press, because %{public}@
PushButtonMonitor has consumed existing ax double press, because %{public}@
PushButtonMonitor will consume this double press after %0.1f seconds as required by %{public}@
PushButtonMonitor recognized a new double press at %llu
PushButtonMonitor has been informed about previous double press
PushButtonMonitor has received AX confirmation of the ApplePay operation
PushButtonMonitor %{public}s stopped
PushButtonMonitor is restaring after %.0f seconds
PushButtonMonitor was activated with SB button observer: %@
PushButtonMonitor is already running with SB button observer: %@
PushButtonMonitor received notification for button %d
Unable to determine request: %@
Releasing %{public}@
Holding %{public}@
Failed to get auditToken value.
Determined bundle ID %{public}@ for pid %d
Determined name %{public}@ and bundle ID %{public}@ for pid %d
%{public}@ %s allowed non-UI extension
Can't query SEP.
deviceHasSEP returned %d
Can't query Pearl.
deviceHasPearl returned %d
Can't query Touch ID.
deviceHasTouchID returned %d
Can't query SecureDoubleClick.
deviceSupportsSecureDoubleClick returned %d
deviceHasSpecialTouchID returned %d
LANVRAM
Merge
BiometryHelper
PushButtonMonitor
SBSHardwareButtonEventConsuming
NSObject
Request
EvaluationRequest
CredentialRequest
StorageRequest
Caller
DaemonUtils
dataForKey:namespace:
stringWithFormat:
dataForKey:
initWithData:encoding:
dataUsingEncoding:
setData:forKey:
byteForKey:
getBytes:length:
sharedInstance
stringForKey:
setString:forKey:
boolForKey:
unsignedIntForKey:
unsignedLongLongForKey:
dictionaryWithDictionary:
objectForKey:
dictionaryByMergingWith:
setObject:forKey:
enumerateKeysAndObjectsUsingBlock:
mutableCopy
dictionaryByMerging:with:
deviceHasPearl
pearlInstance
touchIdInstance
initWithBiometryType:
init
_setup
isMultiUser
errorWithCode:message:
_setupWithPermanentError:
_setupWithFault:
availableDevices
count
_shouldRetryAvailableDevices
deviceType
countByEnumeratingWithState:objects:count:
type
_setupDeviceWithDescriptor:
deviceHasTouchID
internalErrorWithMessage:
deviceWithDescriptor:error:
descriptor
dealloc
permanentError
fault
deviceHasBiometryWithError:
_identitiesForUser:
_errorDisconnected:notEnrolled:
_isEnrolled:error:
isBiometryOnForUnlock:
errorWithCode:subcode:message:
_uidFromUserId:
extendedBioLockoutState:forUser:error:
numberWithInteger:
cachedValue:object:error:readValueBlock:
integerValue
isUnlock
isApplePay
isLockedOutForUser:request:error:
_biolockoutStateForUser:request:error:
_lockoutErrorForExtendedState:userId:
purpose
numberWithUnsignedInt:
objectForKeyedSubscript:
identitiesDatabaseHashForUser:error:
removeAllObjects
identitiesDatabaseUUIDForUser:error:
getUUIDBytes:
dataWithBytes:length:
createPresenceDetectOperationWithError:
setPriority:
startWithError:
userPresentWithError:
cancel
boolValue
internalErrorWithMessage:suberror:
numberWithBool:
unsignedIntValue
current
caller
effectiveProtectedConfigurationForUser:error:
_protectedConfigurationForUser:
applePayEnabled
unlockEnabled
identificationEnabled
periocularFaceIDMatchEnabled
_refreshIdentitiesDueToAccessoryChange:
array
addObjectsFromArray:
identitiesWithError:
userID
addObject:
delegate
currentMatchingOperationUserId
intValue
unEnrolledWithError:
_clearHashes
dropAllUnlockTokensWithError:
isEnrolled:error:
isAnyUserEnrolledWithError:
lockoutErrorForState:userId:
biometryLostErrorForUser:request:
biometryDatabaseHashForUser:error:
catacombUUID:
userPresent:error:
isBiometryOnForApplePay:
isIdentificationEnabled:
isPeriocularMatchingEnabledForUser:
resetBiometry
identities
device
biometryType
setDelegate:
.cxx_destruct
_databaseHashesByUserId
_identities
_device
_biometryType
_delegate
_fault
_permanentError
_deviceType
T@"NSError",R,N,V_fault
T@"NSError",R,N,V_permanentError
Tq,R,N,V_deviceType
T@"NSDictionary",R,N,V_identities
T@"BKDevice",R,N,V_device
Tq,R,N,V_biometryType
T@"<BiometryDelegate>",W,N,V_delegate
isEqualToString:
queue
stop
acquireWalletPreArmSuppressionAssertionForReason:completion:
_consumeDoubleTapWithReason:includingAX:
expirationTimeout
_defaultExpirationTimeout
description
serverQueue
secondary
_expireDoubleTap:
dispatchReallyAfter:tolerance:queue:block:
doubleTapDetected
monitor:doubleTapDetected:
timeIntervalSinceNow
_scheduleDoubleTapExpiration
setAxDoubleTapDetected:
monitor:axApplePayConfirmation:
_startWithError:
_restartWithReactivationDelay:
invalidate
dispatchSyncOnMain:
start
deviceHasSpecialTouchID
beginConsumingPressesForButtonKind:eventConsumer:priority:
doubleTappedAt:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
consumeSinglePressDownForButtonKind:
consumeSinglePressUpForButtonKind:
consumeDoublePressDownForButtonKind:
consumeDoublePressUpForButtonKind:
consumeTriplePressUpForButtonKind:
consumeLongPressForButtonKind:
consumeAnyPressEventForButtonKind:
consumeStateChange:forButtonKind:
prearmAssertion
consumeDoubleTapWithReason:
adviseDoubleTap
axApplePayConfirmation
setDoubleTapDetected:
axDoubleTapDetected
_lastTap
_lastDoubleTap
_axDoubleTapExpirationBlock
_sbBiometricsService
_sbHardwareButtonService
_powerButtonObserver
_doubleTapDetected
_axDoubleTapDetected
TB,N,V_doubleTapDetected
TB,N,V_axDoubleTapDetected
T@"<PushButtonDelegate>",W,N,V_delegate
date
currentConnection
initWithConnection:
initWithCaller:
callStackSymbols
raise:format:
_complexIdentifier:object:
_invalidateCachedValue:identifier:
arrayWithObjects:count:
removeObjectForKey:
requestFromCurrentConnection
localRequest
cachedValue:error:readValueBlock:
holdObject:
identifier
received
interactive
setLog:
_cachedValues
_heldObjects
_interactive
_identifier
_caller
_received
_log
T@"NSObject<OS_os_log>",&,N,V_log
TI,R,N,V_identifier
T@"Caller",R,N,V_caller
T@"NSDate",R,N,V_received
TB,R,N,V_interactive
updateOptions:
initWithPolicy:options:uiDelegate:
initWithAcl:operation:options:uiDelegate:
policy
isApplePayPolicy:
initWithPolicy:options:
initWithAcl:operation:options:
isInAppPayment
aclOperation
options
customUI
secureIntentRequested
setSecureIntentRequested:
_customUI
_secureIntentRequested
_policy
_acl
_aclOperation
_options
_purpose
Tq,R,N,V_policy
T@"NSData",R,N,V_acl
T@,R,N,V_aclOperation
T@"NSDictionary",R,N,V_options
Tq,R,N,V_purpose
TB,R,N
TB,R,N,V_customUI
TB,N,V_secureIntentRequested
initWithCredential:value:readOnly:
credentialType
credentialData
readOnly
_readOnly
_credentialType
_credentialData
Tq,R,N,V_credentialType
T@"LASecureData",R,N,V_credentialData
TB,R,N,V_readOnly
initWithStorageDomain:key:
domain
_domain
_key
Tq,R,N,V_domain
Tq,R,N,V_key
auditToken
isEqualToAuditToken:
bytes
valueWithBytes:objCType:
getValue:
path
euid
connection
processIdentifier
effectiveUserIdentifier
auditSessionIdentifier
auditTokenToData:
initWithBytes:length:encoding:
valueForEntitlement:
isEqualToAuditTokenData:
asid
auditTokenData
hasEntitlement:
_connection
T@"NSXPCConnection",R,W,N,V_connection
Ti,R,N
TI,R,N
T{?=[8I]},R,N
T@"NSData",R,N
T@"NSString",R,N
bundleRecordForAuditToken:error:
bundleIdentifier
extensionPointRecord
_isNonUiExtensionPointIdentifier:
containingBundleRecord
initWithBundleIdentifier:error:
isMainThread
callerDisplayNameWithPid:auditToken:bundleId:
callerIsAllowedNonUiExtension:
deviceHasSEP
deviceSupportsSecureDoubleClick
T@"NSObject<OS_dispatch_queue>",R,N
daemonDir
setDaemonDir:
_serverQueue
_daemonDir
T@"NSObject<OS_dispatch_queue>",R,N,V_serverQueue
T@"NSString",&,N,V_daemonDir
@16@0:8
@24@0:8@16
@32@0:8@16@24
B32@0:8@16@24
B24@0:8@16
C24@0:8@16
I24@0:8@16
Q24@0:8@16
@24@0:8q16
v16@0:8
B16@0:8
v24@0:8@16
B24@0:8^@16
B32@0:8@16^@24
@24@0:8B16B20
@32@0:8q16@24
@40@0:8@16@24^@32
B40@0:8@16@24^@32
@32@0:8@16^@24
B32@0:8^B16^@24
v20@0:8B16
q16@0:8
@"NSMutableDictionary"
@"NSDictionary"
@"BKDevice"
@"<BiometryDelegate>"
@"NSError"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v24@0:8q16
v32@0:8q16q24
v28@0:8@16B24
d16@0:8
v24@0:8Q16
v24@0:8d16
@"SBSBiometricsService"
@"SBSHardwareButtonService"
@"<BSInvalidatable>"
@"<PushButtonDelegate>"
@40@0:8q16^@24@?32
@48@0:8q16@24^@32@?40
v32@0:8@16@24
I16@0:8
@"NSMutableArray"
@"Caller"
@"NSDate"
@"NSObject<OS_os_log>"
B24@0:8q16
@40@0:8q16@24@32
@48@0:8@16@24@32@40
@40@0:8@16@24@32
@"NSData"
@36@0:8q16@24B32
@"LASecureData"
@32@0:8q16q24
B48@0:8{?=[8I]}16
i16@0:8
{?=[8I]}16@0:8
@"NSXPCConnection"
@60@0:8i16{?=[8I]}20^@52
v48@0:8q16d24@32@?40
v24@0:8@?16
@"NSObject<OS_dispatch_queue>"
@"NSString"
@(#)PROGRAM:DaemonUtils  PROJECT:CoreAuthentication-985.100.51.122.1
5EEB160F-45FB-4CE9-B4E3-610359ABF6F8
v8@?0
%@:%@
IODeviceTree:/options
IONVRAM-DELETE-PROPERTY
Error setting NVRAM variable: %d
v32@?0@8@16^B24
Biometry not supported in EDU mode
Failed to acquire device manager class
Failed to enumerate biometric devices
Unexpected failure to enumerate device of type %d
Biometry is not available on this device.
Failed to acquire device class
Failed to create device with %@: %@
Unknown device type: %d
com.apple.BiometricKit.enrollmentChanged
B8@?0
No identities are enrolled.
Biometry is not available before first unlock.
Biometry is not available in passcode lockout.
Biometry is locked out.
Token for device unlock has expired.
Biometry is disabled for unlock.
Identification lockout
Face ID interlocked
Unknown lockout state
@"NSObject"24@?0^d8^@16
Biometry lost.
Failed to determine user presence status.
v32@?0@"NSNumber"8@"NSArray"16^B24
-[BiometryHelper resetBiometry]
BKDeviceManager
Unable to find class %s
/System/Library/PrivateFrameworks/BiometricKit.framework/BiometricKit
/System/Library/PrivateFrameworks/BiometricKit.framework/Contents/MacOS/BiometricKit
BKDevice
LA monitoring HW button for double press
v16@?0@"SBSAssertion"8
default
double press from %llu has expired
was already
Failed to register SB button observer.
Unable to determine request.
com.apple.LocalAuthentication
Request
{?=[8I]}
<%@[%d] UID: %d>
Caller
daemon-serial-queue
com.apple.intents-service
com.apple.siri
is not
com.apple.services
com.apple.ctk-tokens
HasSEP
8olRm6C1xqr7AJGpLRnpSw
touch-id
DeviceSupportsSecureDoubleClick
softlink:o:path:/System/Library/PrivateFrameworks/BiometricKit.framework/BiometricKit
Unexpected biometry type: %d
%{public}@
Lockout state not recognized: %d
lockoutErrorForState:%d returned %{public}@
lockoutErrorForExtendedState:%d returned %{public}@
bioLockoutState failed: %{public}@
User %{public}@ is locked out: %{public}@, purpose:%d
Failed to determine catacomb UUID: %{public}@
User present: %{public}@
%{public}@ is accessing biometry while running as root. Daemons need to specify the UID of the enrolled user via LAOptionUserId.
%{public}@ is accessing biometry while not running as mobile. Multiuser support is not available.
Failed to get protected configuration for user %{public}@: %{public}@
Failed to read identities: %@
Identities updated from %{public}@ to %{public}@
%s  on %@
dropAllUnlockTokens failed: %{public}@
BK notification received: %{public}@
Unexpected notification parameters
PushButtonMonitor will acquire assertion
PushButtonMonitor failed to acquire PreArmSuppression assertion from SB
PushButtonMonitor acquired PreArmSuppression assertion: %{public}@
PushButtonMonitor has consumed existing double press, because %{public}@
PushButtonMonitor has consumed existing ax double press, because %{public}@
PushButtonMonitor will consume this double press after %0.1f seconds as required by %{public}@
PushButtonMonitor recognized a new double press at %llu
PushButtonMonitor has been informed about previous double press
PushButtonMonitor has received AX confirmation of the ApplePay operation
PushButtonMonitor %{public}s stopped
PushButtonMonitor is restaring after %.0f seconds
PushButtonMonitor was activated with SB button observer: %@
PushButtonMonitor is already running with SB button observer: %@
PushButtonMonitor received notification for button %d
Unable to determine request: %@
Releasing %{public}@
Holding %{public}@
Failed to get auditToken value.
Determined bundle ID %{public}@ for pid %d
Determined name %{public}@ and bundle ID %{public}@ for pid %d
%{public}@ %s allowed non-UI extension
Can't query SEP.
deviceHasSEP returned %d
Can't query Pearl.
deviceHasPearl returned %d
Can't query Touch ID.
deviceHasTouchID returned %d
Can't query SecureDoubleClick.
deviceSupportsSecureDoubleClick returned %d
deviceHasSpecialTouchID returned %d
LANVRAM
Merge
BiometryHelper
PushButtonMonitor
SBSHardwareButtonEventConsuming
NSObject
Request
EvaluationRequest
CredentialRequest
StorageRequest
Caller
DaemonUtils
dataForKey:namespace:
stringWithFormat:
dataForKey:
initWithData:encoding:
dataUsingEncoding:
setData:forKey:
byteForKey:
getBytes:length:
sharedInstance
stringForKey:
setString:forKey:
boolForKey:
unsignedIntForKey:
unsignedLongLongForKey:
dictionaryWithDictionary:
objectForKey:
dictionaryByMergingWith:
setObject:forKey:
enumerateKeysAndObjectsUsingBlock:
mutableCopy
dictionaryByMerging:with:
deviceHasPearl
pearlInstance
touchIdInstance
initWithBiometryType:
init
_setup
isMultiUser
errorWithCode:message:
_setupWithPermanentError:
_setupWithFault:
availableDevices
count
_shouldRetryAvailableDevices
deviceType
countByEnumeratingWithState:objects:count:
type
_setupDeviceWithDescriptor:
deviceHasTouchID
internalErrorWithMessage:
deviceWithDescriptor:error:
descriptor
dealloc
permanentError
fault
deviceHasBiometryWithError:
_identitiesForUser:
_errorDisconnected:notEnrolled:
_isEnrolled:error:
isBiometryOnForUnlock:
errorWithCode:subcode:message:
_uidFromUserId:
extendedBioLockoutState:forUser:error:
numberWithInteger:
cachedValue:object:error:readValueBlock:
integerValue
isUnlock
isApplePay
isLockedOutForUser:request:error:
_biolockoutStateForUser:request:error:
_lockoutErrorForExtendedState:userId:
purpose
numberWithUnsignedInt:
objectForKeyedSubscript:
identitiesDatabaseHashForUser:error:
removeAllObjects
identitiesDatabaseUUIDForUser:error:
getUUIDBytes:
dataWithBytes:length:
createPresenceDetectOperationWithError:
setPriority:
startWithError:
userPresentWithError:
cancel
boolValue
internalErrorWithMessage:suberror:
numberWithBool:
unsignedIntValue
current
caller
effectiveProtectedConfigurationForUser:error:
_protectedConfigurationForUser:
applePayEnabled
unlockEnabled
identificationEnabled
periocularFaceIDMatchEnabled
_refreshIdentitiesDueToAccessoryChange:
array
addObjectsFromArray:
identitiesWithError:
userID
addObject:
delegate
currentMatchingOperationUserId
intValue
unEnrolledWithError:
_clearHashes
dropAllUnlockTokensWithError:
isEnrolled:error:
isAnyUserEnrolledWithError:
lockoutErrorForState:userId:
biometryLostErrorForUser:request:
biometryDatabaseHashForUser:error:
catacombUUID:
userPresent:error:
isBiometryOnForApplePay:
isIdentificationEnabled:
isPeriocularMatchingEnabledForUser:
resetBiometry
identities
device
biometryType
setDelegate:
.cxx_destruct
_databaseHashesByUserId
_identities
_device
_biometryType
_delegate
_fault
_permanentError
_deviceType
T@"NSError",R,N,V_fault
T@"NSError",R,N,V_permanentError
Tq,R,N,V_deviceType
T@"NSDictionary",R,N,V_identities
T@"BKDevice",R,N,V_device
Tq,R,N,V_biometryType
T@"<BiometryDelegate>",W,N,V_delegate
isEqualToString:
queue
stop
acquireWalletPreArmSuppressionAssertionForReason:completion:
_consumeDoubleTapWithReason:includingAX:
expirationTimeout
_defaultExpirationTimeout
description
serverQueue
secondary
_expireDoubleTap:
dispatchReallyAfter:tolerance:queue:block:
doubleTapDetected
monitor:doubleTapDetected:
timeIntervalSinceNow
_scheduleDoubleTapExpiration
setAxDoubleTapDetected:
monitor:axApplePayConfirmation:
_startWithError:
_restartWithReactivationDelay:
invalidate
dispatchSyncOnMain:
start
deviceHasSpecialTouchID
beginConsumingPressesForButtonKind:eventConsumer:priority:
doubleTappedAt:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
consumeSinglePressDownForButtonKind:
consumeSinglePressUpForButtonKind:
consumeDoublePressDownForButtonKind:
consumeDoublePressUpForButtonKind:
consumeTriplePressUpForButtonKind:
consumeLongPressForButtonKind:
consumeAnyPressEventForButtonKind:
consumeStateChange:forButtonKind:
prearmAssertion
consumeDoubleTapWithReason:
adviseDoubleTap
axApplePayConfirmation
setDoubleTapDetected:
axDoubleTapDetected
_lastTap
_lastDoubleTap
_axDoubleTapExpirationBlock
_sbBiometricsService
_sbHardwareButtonService
_powerButtonObserver
_doubleTapDetected
_axDoubleTapDetected
TB,N,V_doubleTapDetected
TB,N,V_axDoubleTapDetected
T@"<PushButtonDelegate>",W,N,V_delegate
date
currentConnection
initWithConnection:
initWithCaller:
callStackSymbols
raise:format:
_complexIdentifier:object:
_invalidateCachedValue:identifier:
arrayWithObjects:count:
removeObjectForKey:
requestFromCurrentConnection
localRequest
cachedValue:error:readValueBlock:
holdObject:
identifier
received
interactive
setLog:
_cachedValues
_heldObjects
_interactive
_identifier
_caller
_received
_log
T@"NSObject<OS_os_log>",&,N,V_log
TI,R,N,V_identifier
T@"Caller",R,N,V_caller
T@"NSDate",R,N,V_received
TB,R,N,V_interactive
updateOptions:
initWithPolicy:options:uiDelegate:
initWithAcl:operation:options:uiDelegate:
policy
isApplePayPolicy:
initWithPolicy:options:
initWithAcl:operation:options:
isInAppPayment
aclOperation
options
customUI
secureIntentRequested
setSecureIntentRequested:
_customUI
_secureIntentRequested
_policy
_acl
_aclOperation
_options
_purpose
Tq,R,N,V_policy
T@"NSData",R,N,V_acl
T@,R,N,V_aclOperation
T@"NSDictionary",R,N,V_options
Tq,R,N,V_purpose
TB,R,N
TB,R,N,V_customUI
TB,N,V_secureIntentRequested
initWithCredential:value:readOnly:
credentialType
credentialData
readOnly
_readOnly
_credentialType
_credentialData
Tq,R,N,V_credentialType
T@"LASecureData",R,N,V_credentialData
TB,R,N,V_readOnly
initWithStorageDomain:key:
domain
_domain
_key
Tq,R,N,V_domain
Tq,R,N,V_key
auditToken
isEqualToAuditToken:
bytes
valueWithBytes:objCType:
getValue:
path
euid
connection
processIdentifier
effectiveUserIdentifier
auditSessionIdentifier
auditTokenToData:
initWithBytes:length:encoding:
valueForEntitlement:
isEqualToAuditTokenData:
asid
auditTokenData
hasEntitlement:
_connection
T@"NSXPCConnection",R,W,N,V_connection
Ti,R,N
TI,R,N
T{?=[8I]},R,N
T@"NSData",R,N
T@"NSString",R,N
bundleRecordForAuditToken:error:
bundleIdentifier
extensionPointRecord
_isNonUiExtensionPointIdentifier:
containingBundleRecord
initWithBundleIdentifier:error:
isMainThread
callerDisplayNameWithPid:auditToken:bundleId:
callerIsAllowedNonUiExtension:
deviceHasSEP
deviceSupportsSecureDoubleClick
T@"NSObject<OS_dispatch_queue>",R,N
daemonDir
setDaemonDir:
_serverQueue
_daemonDir
T@"NSObject<OS_dispatch_queue>",R,N,V_serverQueue
T@"NSString",&,N,V_daemonDir
@16@0:8
@24@0:8@16
@32@0:8@16@24
B32@0:8@16@24
B24@0:8@16
C24@0:8@16
I24@0:8@16
Q24@0:8@16
@24@0:8q16
v16@0:8
B16@0:8
v24@0:8@16
B24@0:8^@16
B32@0:8@16^@24
@24@0:8B16B20
@32@0:8q16@24
@40@0:8@16@24^@32
B40@0:8@16@24^@32
@32@0:8@16^@24
B32@0:8^B16^@24
v20@0:8B16
q16@0:8
@"NSMutableDictionary"
@"NSDictionary"
@"BKDevice"
@"<BiometryDelegate>"
@"NSError"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v24@0:8q16
v32@0:8q16q24
v28@0:8@16B24
d16@0:8
v24@0:8Q16
v24@0:8d16
@"SBSBiometricsService"
@"SBSHardwareButtonService"
@"<BSInvalidatable>"
@"<PushButtonDelegate>"
@40@0:8q16^@24@?32
@48@0:8q16@24^@32@?40
v32@0:8@16@24
I16@0:8
@"NSMutableArray"
@"Caller"
@"NSDate"
@"NSObject<OS_os_log>"
B24@0:8q16
@40@0:8q16@24@32
@48@0:8@16@24@32@40
@40@0:8@16@24@32
@"NSData"
@36@0:8q16@24B32
@"LASecureData"
@32@0:8q16q24
B48@0:8{?=[8I]}16
i16@0:8
{?=[8I]}16@0:8
@"NSXPCConnection"
@60@0:8i16{?=[8I]}20^@52
v48@0:8q16d24@32@?40
v24@0:8@?16
@"NSObject<OS_dispatch_queue>"
@"NSString"
