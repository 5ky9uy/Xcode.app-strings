@(#)PROGRAM:AVRouting  PROJECT:AVRouting-1
AVCustomRoutingControllerAuthorizedRoutesDidChangeNotification
AVCustomRoutingControllerCustomActionItemsDidChangeNotification
AVCustomRoutingControllerActiveRoutesDidChangeNotification
-[AVCustomRoutingController setCustomActionItems:]
-[AVCustomRoutingController invalidateAuthorizationForRoute:]
-[AVCustomRoutingController setActive:forRoute:]
-[AVCustomRoutingController _startSession]_block_invoke
v16@?0@"DAEvent"8
-[AVCustomRoutingController _addAuthorizedRoute:]
-[AVCustomRoutingController _setAuthorizedRoutes:]
-[AVCustomRoutingController _setPendingEvents:]
-[AVCustomRoutingController _informClientOfEventReason:forRoute:]
-[AVCustomRoutingController _informClientOfEventReason:forRoute:]_block_invoke
v12@?0B8
-[AVCustomRoutingController _updateSessionForEvent:]
-[AVCustomRoutingController _updateSessionForEvent:]_block_invoke
v16@?0@"NSError"8
-[AVCustomRoutingController _updateSessionStateToMatchRoute:]
-[AVCustomRoutingController _updateSessionStateToMatchRoute:]_block_invoke
-[AVCustomRoutingController _suspendSessionUpdates]
-[AVCustomRoutingController _resumeSessionUpdates]
-[AVCustomRoutingController _updateSessionFromEventRecords]
-[AVCustomRoutingController _storeRecordForEvent:]
DASession
Unable to find class %s
v8@?0
DAEventDevice
DADeviceStateToString
<reason: %@, route: %@>
Activate
Deactivate
Reactivate
com.apple.avrouting
AVRouting
-[AVCustomDeviceRoute setDevice:]
<ID: %@, name: %@>
%s Ignoring custom action items. Only support when app provides discovery extension.
%s invalidateAuthorizationForRoute: %@
%s Route: %@ not authorized. Ignoring setActive:forRoute:
%s DAEventTypeActivated
%s DAEventTypeSessionStarted
%s DAEventTypeInvalidated
%s DAEventTypeDeviceChanged/DAEventTypeDeviceFound for device: %@
%s DAEventTypeDeviceChanged --> DADeviceStateActivating: Route %@ authorized. Firing AVCustomRoutingEventReasonReactivate.
%s DAEventTypeDeviceChanged --> DADeviceStateActivating: Route %@ not authorized. Firing AVCustomRoutingEventReasonActivate.
%s DAEventTypeDeviceChanged --> DADeviceStateInvalidating: Route %@ authorized. Firing AVCustomRoutingEventReasonDeactivate.
%s DAEventTypeDeviceChanged --> DADeviceStateInvalidating: Route %@ not authorized but activation event pending. Firing AVCustomRoutingEventReasonDeactivate.
%s DAEventTypeDeviceChanged --> DADeviceStateInvalidating: Route %@ not authorized and not pending events. Ignoring.
%s DAEventTypeDeviceChanged --> DADeviceStateAuthorized: Route %@ not authorized. Adding to authorized routes.
%s DAEventTypeDeviceChanged --> DADeviceStateAuthorized: Route %@ authorized. Ignoring.
%s DAEventTypeDeviceFound / DAEventTypeDeviceChanged for route %@ but state = %@. Ignoring.
%s DAEventTypeDeviceLost
%s DAEventTypeUnknown
%s DAEventTypeXPCInterrupted
%s AVVSRC.authorizedRoutes already contains route: %@. Ignoring.
%s AVVSRC.authorizedRoutes = %@
%s Posting AVCustomRoutingControllerAuthorizedRoutesDidChangeNotification.
%s AVVSRC.pendingEvents = %@
%s Informing delegate of route event: %@
%s Route event: %@ completed with success: %d
%s activateSucceeded: %d, activateFailed: %d, deactivateSucceeded: %d, deactivateFailed: %d, reactivateSucceeded: %d, reactivateFailed: %d
%s Setting state: `activated` for device: %@ in DA...
%s Setting state: `activated` for device: %@ succeeded.
%s Setting state: `activated` for device: %@ failed with error: %@.
%s Setting state: `invalid` for device: %@ in DA...
%s Setting state: `invalid` for device: %@ succeeded.
%s Setting state: `invalid` for device: %@ failed with error: %@.
%s Setting DA state: %@ for route: %@.
%s Setting state: %@ for device: %@ failed with error: %@.
%s Setting state: %@ for device: %@ succeeded.
%s Suspending session updates.
%s Resuming session updates.
%s %lu stored event records.
%s Updating session from event record: %@
%s Clearing event records.
%s Storing event record: %@
%s AVVSR.device = %@, networkEndpoint = %@, bluetoothIdentifier = %@
softlink:r:path:/System/Library/PrivateFrameworks/DeviceAccess.framework/DeviceAccess
AVCustomRoutingController
AVCustomRoutingEvent
AVCustomRoutingActionItem
AVCustomDeviceRoute
init
_startSession
defaultCenter
removeObserver:
_stopSession
dealloc
session
appIsUsingDeviceAccess
postNotificationName:object:
delegate
customRoutingController:didSelectItem:
setReason:
setRoute:
setSucceeded:
isSessionSuspended
_storeRecordForEvent:
_updateSessionForEvent:
authorizedRoutes
containsObject:
_setActive:forRoute:
_updateSessionStateToMatchRoute:
isActive
invalidate
setSession:
mainBundle
bundleIdentifier
setBundleID:
eventType
_resumeSessionUpdates
countByEnumeratingWithState:objects:count:
_informClientOfEventReason:forRoute:
device
_routeForDADevice:
state
setDevice:
pendingEvents
route
identifier
isEqualToString:
arrayWithArray:
removeObject:
copy
_setPendingEvents:
_addAuthorizedRoute:
_suspendSessionUpdates
setEventHandler:
activate
arrayByAddingObject:
_setAuthorizedRoutes:
isEqualToArray:
customRoutingController:handleEvent:completionHandler:
reason
succeeded
setState:device:completionHandler:
_removeAuthorizedRoute:
setActive:
setSessionSuspended:
_updateSessionFromEventRecords
_updateSessionToReflectCurrentlyActiveRoutes
count
setCustomActionItems:
handleCustomActionItemSelected:
invalidateAuthorizationForRoute:
setActive:forRoute:
isRouteActive:
setDelegate:
customActionItems
.cxx_destruct
_session
_routeEventRecords
_sessionSuspended
_delegate
_authorizedRoutes
_customActionItems
_pendingEvents
T@"DASession",&,N
sessionSuspended
TB,N,GisSessionSuspended,V_sessionSuspended
T@"NSArray",R,N,V_pendingEvents
T@"<AVCustomRoutingControllerDelegate>",W,N,V_delegate
T@"NSArray",R,N,V_authorizedRoutes
T@"NSArray",&,N,V_customActionItems
stringWithFormat:
description
_succeeded
_reason
_route
Tq,N,V_reason
T@"AVCustomDeviceRoute",&,N,V_route
TB,N,V_succeeded
UUID
UUIDString
setIdentifier:
type
setType:
overrideTitle
setOverrideTitle:
_identifier
_type
_overrideTitle
T@"UTType",C,N,V_type
T@"NSString",C,N,V_overrideTitle
networkEndpoint
bluetoothIdentifier
hash
name
isEqual:
setNetworkEndpoint:
setBluetoothIdentifier:
_active
_networkEndpoint
_bluetoothIdentifier
_device
T@"DADevice",&,N,V_device
T@"NSObject<OS_nw_endpoint>",&,N,V_networkEndpoint
T@"NSUUID",&,N,V_bluetoothIdentifier
active
TB,N,GisActive,V_active
@16@0:8
v16@0:8
v24@0:8@16
v28@0:8B16@20
B24@0:8@16
v32@0:8q16@24
@24@0:8@16
B16@0:8
v20@0:8B16
@"DASession"
@"NSArray"
@"<AVCustomRoutingControllerDelegate>"
q16@0:8
v24@0:8q16
@"AVCustomDeviceRoute"
@"NSString"
@"UTType"
Q16@0:8
@"NSObject<OS_nw_endpoint>"
@"NSUUID"
@"DADevice"
@(#)PROGRAM:AVRouting  PROJECT:AVRouting-1
AVCustomRoutingControllerAuthorizedRoutesDidChangeNotification
AVCustomRoutingControllerCustomActionItemsDidChangeNotification
AVCustomRoutingControllerActiveRoutesDidChangeNotification
-[AVCustomRoutingController setCustomActionItems:]
-[AVCustomRoutingController invalidateAuthorizationForRoute:]
-[AVCustomRoutingController setActive:forRoute:]
-[AVCustomRoutingController _startSession]_block_invoke
v16@?0@"DAEvent"8
-[AVCustomRoutingController _addAuthorizedRoute:]
-[AVCustomRoutingController _setAuthorizedRoutes:]
-[AVCustomRoutingController _setPendingEvents:]
-[AVCustomRoutingController _informClientOfEventReason:forRoute:]
-[AVCustomRoutingController _informClientOfEventReason:forRoute:]_block_invoke
v12@?0B8
-[AVCustomRoutingController _updateSessionForEvent:]
-[AVCustomRoutingController _updateSessionForEvent:]_block_invoke
v16@?0@"NSError"8
-[AVCustomRoutingController _updateSessionStateToMatchRoute:]
-[AVCustomRoutingController _updateSessionStateToMatchRoute:]_block_invoke
-[AVCustomRoutingController _suspendSessionUpdates]
-[AVCustomRoutingController _resumeSessionUpdates]
-[AVCustomRoutingController _updateSessionFromEventRecords]
-[AVCustomRoutingController _storeRecordForEvent:]
DASession
Unable to find class %s
v8@?0
DAEventDevice
DADeviceStateToString
<reason: %@, route: %@>
Activate
Deactivate
Reactivate
com.apple.avrouting
AVRouting
-[AVCustomDeviceRoute setDevice:]
<ID: %@, name: %@>
%s Ignoring custom action items. Only support when app provides discovery extension.
%s invalidateAuthorizationForRoute: %@
%s Route: %@ not authorized. Ignoring setActive:forRoute:
%s DAEventTypeActivated
%s DAEventTypeSessionStarted
%s DAEventTypeInvalidated
%s DAEventTypeDeviceChanged/DAEventTypeDeviceFound for device: %@
%s DAEventTypeDeviceChanged --> DADeviceStateActivating: Route %@ authorized. Firing AVCustomRoutingEventReasonReactivate.
%s DAEventTypeDeviceChanged --> DADeviceStateActivating: Route %@ not authorized. Firing AVCustomRoutingEventReasonActivate.
%s DAEventTypeDeviceChanged --> DADeviceStateInvalidating: Route %@ authorized. Firing AVCustomRoutingEventReasonDeactivate.
%s DAEventTypeDeviceChanged --> DADeviceStateInvalidating: Route %@ not authorized but activation event pending. Firing AVCustomRoutingEventReasonDeactivate.
%s DAEventTypeDeviceChanged --> DADeviceStateInvalidating: Route %@ not authorized and not pending events. Ignoring.
%s DAEventTypeDeviceChanged --> DADeviceStateAuthorized: Route %@ not authorized. Adding to authorized routes.
%s DAEventTypeDeviceChanged --> DADeviceStateAuthorized: Route %@ authorized. Ignoring.
%s DAEventTypeDeviceFound / DAEventTypeDeviceChanged for route %@ but state = %@. Ignoring.
%s DAEventTypeDeviceLost
%s DAEventTypeUnknown
%s DAEventTypeXPCInterrupted
%s AVVSRC.authorizedRoutes already contains route: %@. Ignoring.
%s AVVSRC.authorizedRoutes = %@
%s Posting AVCustomRoutingControllerAuthorizedRoutesDidChangeNotification.
%s AVVSRC.pendingEvents = %@
%s Informing delegate of route event: %@
%s Route event: %@ completed with success: %d
%s activateSucceeded: %d, activateFailed: %d, deactivateSucceeded: %d, deactivateFailed: %d, reactivateSucceeded: %d, reactivateFailed: %d
%s Setting state: `activated` for device: %@ in DA...
%s Setting state: `activated` for device: %@ succeeded.
%s Setting state: `activated` for device: %@ failed with error: %@.
%s Setting state: `invalid` for device: %@ in DA...
%s Setting state: `invalid` for device: %@ succeeded.
%s Setting state: `invalid` for device: %@ failed with error: %@.
%s Setting DA state: %@ for route: %@.
%s Setting state: %@ for device: %@ failed with error: %@.
%s Setting state: %@ for device: %@ succeeded.
%s Suspending session updates.
%s Resuming session updates.
%s %lu stored event records.
%s Updating session from event record: %@
%s Clearing event records.
%s Storing event record: %@
%s AVVSR.device = %@, networkEndpoint = %@, bluetoothIdentifier = %@
softlink:r:path:/System/Library/PrivateFrameworks/DeviceAccess.framework/DeviceAccess
AVCustomRoutingController
AVCustomRoutingEvent
AVCustomRoutingActionItem
AVCustomDeviceRoute
postNotificationName:object:
UUIDString
count
appIsUsingDeviceAccess
isEqualToString:
removeObject:
UUID
bundleIdentifier
arrayWithArray:
setBundleID:
invalidate
mainBundle
activate
copy
eventType
stringWithFormat:
setState:device:completionHandler:
isEqualToArray:
setEventHandler:
defaultCenter
countByEnumeratingWithState:objects:count:
customRoutingController:handleEvent:completionHandler:
arrayByAddingObject:
name
state
removeObserver:
containsObject:
init
dealloc
customRoutingController:didSelectItem:
setCustomActionItems:
handleCustomActionItemSelected:
invalidateAuthorizationForRoute:
setActive:forRoute:
isRouteActive:
session
setSession:
_startSession
_stopSession
_addAuthorizedRoute:
_removeAuthorizedRoute:
_setAuthorizedRoutes:
_setPendingEvents:
_informClientOfEventReason:forRoute:
_updateSessionForEvent:
_routeForDADevice:
_updateSessionStateToMatchRoute:
_setActive:forRoute:
_suspendSessionUpdates
_resumeSessionUpdates
_updateSessionFromEventRecords
_storeRecordForEvent:
_updateSessionToReflectCurrentlyActiveRoutes
delegate
setDelegate:
authorizedRoutes
customActionItems
isSessionSuspended
setSessionSuspended:
pendingEvents
.cxx_destruct
_session
_routeEventRecords
_sessionSuspended
_delegate
_authorizedRoutes
_customActionItems
_pendingEvents
T@"DASession",&,N
sessionSuspended
TB,N,GisSessionSuspended,V_sessionSuspended
T@"NSArray",R,N,V_pendingEvents
T@"<AVCustomRoutingControllerDelegate>",W,N,V_delegate
T@"NSArray",R,N,V_authorizedRoutes
T@"NSArray",&,N,V_customActionItems
description
reason
setReason:
route
setRoute:
succeeded
setSucceeded:
_succeeded
_reason
_route
Tq,N,V_reason
T@"AVCustomDeviceRoute",&,N,V_route
TB,N,V_succeeded
identifier
setIdentifier:
type
setType:
overrideTitle
setOverrideTitle:
_identifier
_type
_overrideTitle
T@"UTType",C,N,V_type
T@"NSString",C,N,V_overrideTitle
setDevice:
isEqual:
hash
networkEndpoint
setNetworkEndpoint:
bluetoothIdentifier
setBluetoothIdentifier:
device
isActive
setActive:
_active
_networkEndpoint
_bluetoothIdentifier
_device
T@"DADevice",&,N,V_device
T@"NSObject<OS_nw_endpoint>",&,N,V_networkEndpoint
T@"NSUUID",&,N,V_bluetoothIdentifier
active
TB,N,GisActive,V_active
@16@0:8
v16@0:8
v24@0:8@16
v28@0:8B16@20
B24@0:8@16
v32@0:8q16@24
@24@0:8@16
B16@0:8
v20@0:8B16
@"DASession"
@"NSArray"
@"<AVCustomRoutingControllerDelegate>"
q16@0:8
v24@0:8q16
@"AVCustomDeviceRoute"
@"NSString"
@"UTType"
Q16@0:8
@"NSObject<OS_nw_endpoint>"
@"NSUUID"
@"DADevice"
