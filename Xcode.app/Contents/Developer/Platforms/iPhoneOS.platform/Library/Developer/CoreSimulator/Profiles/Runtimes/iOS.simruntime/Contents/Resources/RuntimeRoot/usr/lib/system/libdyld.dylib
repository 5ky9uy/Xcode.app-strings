@(#)PROGRAM:dyld  PROJECT:dyld-922.2
dyld_v1  x86_64
dyld_v1 x86_64h
dyld_v1  arm64e
dyld_v1   arm64
dyld_v1  armv7k
dyld_v1arm64_32
%s.%u
mapperForSharedCacheFile
ProcessAtlas.cpp
((uint64_t)addr + size) <= mapping.address + mapping.size
mmap failed: %s (%d)
v24@?0r^{SegmentInfo=QQQQQ*IIb1b1b1b1b12b16}8^B16
v28@?0r^{SectionInfo={SegmentInfo=QQQQQ*IIb1b1b1b1b12b16}QQ*IIIII}8B16^B20
__DATA
.development
.symbols
/System/DriverKit/System/Library/dyld/
/System/Library/Caches/com.apple.dyld/
dyld_shared_cache_x86_64
dyld_shared_cache_x86_64h
dyld_shared_cache_arm64e
dyld_shared_cache_arm64
dyld_shared_cache_armv7k
dyld_shared_cache_arm64_32
com.apple.dyld.introspection
v8@?0
setupNotifications
kr != NULL
_state == Disconnected
task_dyld_process_info_notify_register
task_dyld_process_info_notify_deregister
teardownNotifications
_state == Connected
notiferRecord.queue != NULL
notiferRecord.block != NULL
dyld: received unknown message id=0x%X, size=%d
registerEventHandler_block_invoke
unregisterEventHandler_block_invoke
_registeredNotifiers.size() >= handle
dyld_v1
decrementRefCount
Allocator.h
metadata->slot1 == AllocationMetadata::kSharedPtr
SharedPtr
metadata->slot1 == AllocationMetadata::kNormalPtr || metadata->slot1 == AllocationMetadata::kSharedPtr
incrementRefCount
~Vector
Vector.h
_allocator != nullptr
reserve
Vector
UniquePtr
metadata->slot1 == AllocationMetadata::kNormalPtr
~UniquePtr
metadata->slot1 == AllocationMetadata::kUniquePtr
v16@?0^v8
v32@?0Q8I16I20^B24
mach_vm_remap_new
mach_vm_remap
v24@?0^v8Q16
__TEXT
__LINKEDIT
__DATA_DIRTY
__DATA_CONST
__OBJC
__OBJC_CONST
__AUTH
__AUTH_CONST
v40@?0{mach_header_64=IiiIIIII}8
v24@?0r^{load_command=II}8^B16
file does not start with MH_MAGIC[_64]: 0x%08X 0x%08X
malformed load command #%d of %d at %p with mh=%p, size (0x%X) too small
malformed load command #%d of %d at %p with mh=%p, size (0x%X) is too large, load commands end at %p
~Allocator
Allocator.cpp
_vmAllocatedBytes == 0
removeRegion
i != &_regionList[_regionCount]
split
address != nullptr
size > entrySize
lastAddress() == next()->address
isolateRegion
address <= region.address
region.lastAddress() <= lastAddress()
getForPointer
data != nullptr
staticFree
operator()
popcount(alignment) == 1
alignment <= kPageSize
result.address != nullptr
dyld_process_info_notify_base
dyld_process_info_notify.cpp
dyld: ~dyld_process_info_notify_base called while still connected
