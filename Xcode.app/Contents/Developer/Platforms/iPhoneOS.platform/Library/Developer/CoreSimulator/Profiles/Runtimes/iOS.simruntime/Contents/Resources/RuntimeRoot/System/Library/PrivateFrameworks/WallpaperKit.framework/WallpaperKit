version
type
identifier
name
family
assets
thumbnailImageFileName
logicalScreenClass
productTypes
appearanceAware
lockAndHome
lock
home
fullSizeImageFileName
videoFileName
stillTimeInVideo
fullSizeImageFileURL
thumbnailImageFileURL
Dynamic
%@: Wallpaper bundle does not exist at URL '%@'.
Wallpaper.plist
%@: Wallpaper bundle does not contain a metadata file at path '%@'.
%@: Encountered error in loading metadata file (path: '%@') (error: '%@').
%@: Wallpaper bundle thumbnail does not exist at URL '%@'.
TQ,R,N
T@"NSString",R,C,N
thumbnailImageURL
T@"NSURL",R,C,N
fullsizeImageURL
videoAssetURL
Td,R,N
%@: Attempted to lookup a file based wallpaper for location '%@' and appearance '%@' but found nil
%@: Attempted to lookup a value based wallpaper for location '%@' and appearance '%@' but found nil
%@: (path: '%@') metadata does not contain valid value for keypath: '%@'
_bundleURL
T@"NSURL",&,N,V__bundleURL
_defaultAppearanceWallpapers
T@"NSMutableDictionary",&,N,V__defaultAppearanceWallpapers
_darkAppearanceWallpapers
T@"NSMutableDictionary",&,N,V__darkAppearanceWallpapers
TQ,R,N,V_version
TQ,R,N,V_identifier
T@"NSString",R,C,N,V_name
T@"NSString",R,C,N,V_family
T@"NSURL",R,C,N,V_thumbnailImageURL
TB,R,N,GisAppearanceAware,V_appearanceAware
distintWallpapersForLocations
TB,R,N,GhasDistintWallpapersForLocations,V_distintWallpapersForLocations
dynamicWallpaperBundle
TB,R,N,GisDynamicWallpaperBundle,V_dynamicWallpaperBundle
Attempted to initialize %@ without using designated initializer.
T@"NSURL",C,N,V_thumbnailImageURL
T@"NSURL",C,N,V_fullsizeImageURL
T@"NSURL",C,N,V_videoAssetURL
Td,N,V_stillTimeInVideo
default
DeviceClass
%.0fw-%.0fh@%@x~%@
eQd5mlz0BN0amTp/2ccMoA
8olRm6C1xqr7AJGpLRnpSw
v8@?0
ILaGO+KV5JAOq7Q5GEwbWQ
/Library/Wallpaper
/AppleInternal
You must override %@ in a subclass
TQ,N,V_type
dark
WKWallpaperLocationCoverSheet
WKWallpaperLocationHomeScreen
WKWallpaperKitErrorDomain
Still
Live
%s: Unknown wallpaper type value: '%@'
WKWallpaperTypeFromString
Unknown
WallpaperKit
/System/Library/PrivateFrameworks/WallpaperKit.framework
wallpaperType
TQ,N,V_wallpaperType
displayName
T@"NSString",C,N,V_displayName
previewBundle
T@"WKWallpaperBundle",&,N,V_previewBundle
_wallpaperBundles
T@"NSMutableArray",&,N,V__wallpaperBundles
_wallpaperLookup
T@"NSMutableDictionary",&,N,V__wallpaperLookup
numberOfItems
Tq,R,N
path
order
previews
com.apple.SettingsAndCoreApps.WallpaperKit.BundleImport
Wallpapers~%@.plist
@"WKWallpaperBundle"16@?0@"NSDictionary"8
B16@?0@"NSURL"8
defaultWallpaperBundleImporter
T@"WKWallpaperBundleImporter",R,N
_bundleImportQueue
T@"NSObject<OS_dispatch_queue>",&,N,V__bundleImportQueue
_wallpaperTypesOrdering
T@"NSArray",&,N,V__wallpaperTypesOrdering
_wallpaperTypeToBundleCollection
T@"NSDictionary",&,N,V__wallpaperTypeToBundleCollection
numberOfWallpaperBundleCollections
ProductType
/Library/Wallpaper/Stills
iPhone
iPad
iPod
GSDeviceName
DefaultWallpapers~%@.plist
DeviceColor
DeviceEnclosureColor
defaultWallpaperManager
T@"WKDefaultWallpaperManager",R,N
_defaultWallpaperLookup
T@"NSDictionary",&,N,V__defaultWallpaperLookup
_defaultWallpaperBundleImporter
T@"WKWallpaperBundleImporter",&,N,V__defaultWallpaperBundleImporter
WKLogForCategory
/AppleInternal/BuildRoot/Library/Caches/com.apple.xbs/Sources/WallpaperSettings_Sim/WallpaperSettings-140/WallpaperKit/Utility/WKLogging.m
category < WKLoggingCategoryCount
Base
Import
com.apple.SettingsAndCoreApps.WallpaperKit
_dynamicDictionary
T@"NSDictionary",&,N,V__dynamicDictionary
_thumbnailImage
T@"UIImage",&,N,V__thumbnailImage
DONE
Done button for dismissing locket.
SET_AS_WALLPAPER
Button title for setting the current wallpaper being viewed in the locket as the device wallpaper
settings_icon
v12@?0B8
_openSettingsButton
T@"UIButton",&,N,V__openSettingsButton
_setWallpaperButton
T@"UIButton",&,N,V__setWallpaperButton
_doneButton
T@"UIButton",&,N,V__doneButton
_tapGestureRecognizer
T@"UITapGestureRecognizer",&,N,V__tapGestureRecognizer
delegate
T@"<WKWallpaperLocketViewControllerDelegate>",W,N,V_delegate
%{public}@: Wallpaper bundle does not exist at URL '%{public}@', returning nil.
%{public}@: Attempted to initialize with a `nil` Dynamic wallpaper dictionray, returning nil.
%{public}@: Wallpaper bundle does not exist at URL '%{public}@'
%{public}@: Wallpaper bundle metadata file does not exist at URL '%{public}@'
%{public}@: Encountered error in loading metadata file '%{public}@', error '%{public}@'
%{public}@: Wallpaper bundle thumbnail does not exist at URL '%{public}@'
%{public}@: Could not process wallpaper for location '%{public}@' and appearance '%{public}@'.
%{public}@: No wallpaper bundle found at URL '%{public}@.
%{public}@: No 'Wallpaper.plist' file found at URL '%{public}@.
%{public}@: Could not decode 'Wallpaper.plist' at URL '%{public}@', error '%{public}@'.
%{public}@: No entry found for '%{public}@' key in 'Wallpaper.plist' at URL '%{public}@'.
%{public}@: Wallpaper Bundle logical screen class '%{public}@' does not match the current device logical screen class '%{public}@'.
%{public}@: Wallpaper bundle has '%{public}@' entry with values '%{public}@', checking if it contains '%{public}@'.
%{public}@: Wallpaper bundle at URL '%{public}@' should be loaded
%{public}@: No wallpaper configuration file found at URL '%{public}@'.
%{public}@: Unable to load content of wallpaper configuration file at URL '%{public}@', error '%{public}@'.
%{public}@: Wallpaper configuration file at URL '%{public}@' has no entries.
%{public}@: Unable to load contents of directory at URL '%{public}@', for wallpaperType '%{public}@'. Error '%{public}@'.
%{public}@: Loading a Default Wallpaper.
%{public}@: Default wallpaper lookup file does not exist at path '%{public}@'
%{public}@: Unable to load default wallpaper lookup file (path: '%{public}@') with error: '%{public}@'
%{public}@: Returning a Default Wallpaper '%{public}@'
Wallpaper: Unrecognized device type for Still wallpaper import: %@
%{public}@: Resolving default wallpaper for device name '%{public}@'
%{public}@: Resolved to default wallpaper look up file at path '%{public}@'
%{public}@: Resolved to logical screen class '%{public}@'
WKFileBasedWallpaper
WKWallpaper
NSCopying
WKValueBasedWallpaper
WKWallpaperBundle
WKLiveWallpaper
WKMotionWallpaperCollectionViewCell
WKPhotoWallpaperCollectionViewCell
WKAbstractWallpaper
WKWallpaperBundleCollection
WKWallpaperBundleImporter
WKAdditions
WKDefaultWallpaperManager
WKStillWallpaper
WKDynamicWallpaper
WKWallpaperLocketViewController
defaultManager
path
fileExistsAtPath:isDirectory:
init
copy
dictionaryWithCapacity:
_loadBundle
_loadDynamicWallpaper:
identifier
initWithIdentifier:dictionary:
_defaultAppearanceWallpapers
setObject:forKeyedSubscript:
_bundleURL
stringWithFormat:
exceptionWithName:reason:userInfo:
raise
URLByAppendingPathComponent:
dictionaryWithContentsOfURL:error:
objectForKeyedSubscript:
_raiseInvalidMetadataExceptionForMetadataKeypath:
unsignedIntegerValue
boolValue
fileExistsAtPath:
_processAssetDictionary:forLocation:
isAppearanceAware
arrayWithObjects:count:
countByEnumeratingWithState:objects:count:
componentsJoinedByString:
_stillWallpaperWithMetadataDictionary:wallpaperAppearance:
_liveWallpaperWithMetadataDictionary:wallpaperAppearance:
isEqualToString:
_darkAppearanceWallpapers
count
currentDevice
sf_productType
setWithArray:
containsObject:
copyWithZone:
name
type
thumbnailImageURL
fullsizeImageURL
videoAssetURL
stillTimeInVideo
conformsToProtocol:
fileBasedWallpaperForLocation:andAppearance:
valueBasedWallpaperForLocation:andAppearance:
thumbnailImage
wallpaperValue
numberWithUnsignedInteger:
dictionaryWithObjects:forKeys:count:
_processCommonFileBackedWallpaperMetadataWithDictionary:wallpaperAppearance:
initWithIdentifier:name:thumbnailImageURL:fullsizeImageURL:
numberWithInt:
doubleValue
initWithIdentifier:name:thumbnailImageURL:fullsizeImageURL:videoAssetURL:stillTimeInVideo:
shouldLoadWallpaperBundleAtURL:
initWithURL:
initWithDynamicDictionary:identifier:
wallpaperBackingTypeForLocation:
fileBasedWallpaperForLocation:
valueBasedWallpaperForLocation:
version
family
hasDistintWallpapersForLocations
isDynamicWallpaperBundle
set_bundleURL:
set_defaultAppearanceWallpapers:
set_darkAppearanceWallpapers:
.cxx_destruct
_appearanceAware
_distintWallpapersForLocations
_dynamicWallpaperBundle
_version
_identifier
_name
_family
_thumbnailImageURL
__bundleURL
__defaultAppearanceWallpapers
__darkAppearanceWallpapers
initWithIdentifier:name:
setThumbnailImageURL:
setFullsizeImageURL:
setVideoAssetURL:
setStillTimeInVideo:
_fullsizeImageURL
_videoAssetURL
_stillTimeInVideo
mainScreen
_referenceBounds
sf_deviceSupportsDisplayZoom
scale
numberWithDouble:
lowercaseString
sf_isiPad
objectAtIndexedSubscript:
floatValue
sf_isInternalInstall
stringByAppendingPathComponent:
fileURLWithPath:
reuseIdentifier
setType:
_type
localizedStringForKey:value:table:
bundleWithPath:
array
dictionary
_wallpaperBundles
_wallpaperLookup
addObject:
initWithWallpaperType:previewBundle:
wallpaperBundleAtIndex:
wallpaperBundleWithIdentifier:
numberOfItems
appendWallpaperBundle:
wallpaperType
setWallpaperType:
displayName
setDisplayName:
previewBundle
setPreviewBundle:
set_wallpaperBundles:
set_wallpaperLookup:
_wallpaperType
_displayName
_previewBundle
__wallpaperBundles
__wallpaperLookup
_bundleImportQueue
_loadWallpapersFromDisk
_wallpaperTypesOrdering
_wallpaperTypeToBundleCollection
allValues
wallpapersConfigurationFileURL
arrayWithContentsOfURL:error:
indexOfObject:
na_map:
firstObject
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
na_filter:
defaultWallpaperBundleImporter
numberOfWallpaperBundleCollections
wallpaperTypeAtIndex:
wallpaperBundleCollectionForWallpaperType:
set_bundleImportQueue:
set_wallpaperTypesOrdering:
set_wallpaperTypeToBundleCollection:
__bundleImportQueue
__wallpaperTypesOrdering
__wallpaperTypeToBundleCollection
buttonWithType:
setTranslatesAutoresizingMaskIntoConstraints:
setClipsToBounds:
titleLabel
setNumberOfLines:
setOpaque:
effectWithStyle:
initWithEffect:
setUserInteractionEnabled:
imageView
insertSubview:belowSubview:
leadingAnchor
constraintEqualToAnchor:
trailingAnchor
topAnchor
bottomAnchor
activateConstraints:
wk_buttonWithBlurEffect
_loadDefaultWallpaperFile
defaultWallpaperLookupURL
set_defaultWallpaperLookup:
_defaultWallpaperBundleImporter
hasPrefix:
defaultWallpaperManager
_pathForStillWallpapers
deviceProductType
deviceLogicalScreenClass
deviceColor
deviceEnclosureColor
defaultWallpaperBundle
_defaultWallpaperLookup
set_defaultWallpaperBundleImporter:
__defaultWallpaperLookup
__defaultWallpaperBundleImporter
_dynamicDictionary
set_dynamicDictionary:
_thumbnailImage
set_thumbnailImage:
__dynamicDictionary
__thumbnailImage
fractionalWidthDimension:
fractionalHeightDimension:
sizeWithWidthDimension:heightDimension:
itemWithLayoutSize:
horizontalGroupWithLayoutSize:subitems:
sectionWithGroup:
setOrthogonalScrollingBehavior:
initWithSection:
locketCollectionViewLayout
initWithCollectionViewLayout:
viewDidLoad
defaultCenter
handleContentSizeCategoryDidChangeNotification:
addObserver:selector:name:object:
_configureCollectionView
_configureSubviews
viewDidAppear:
_showButtonsAnimated
viewDidLayoutSubviews
_setWallpaperButton
frame
layer
setCornerRadius:
_openSettingsButton
_doneButton
dequeueReusableCellWithReuseIdentifier:forIndexPath:
blackColor
collectionView
setBackgroundColor:
registerClass:forCellWithReuseIdentifier:
_userDidTapOnView:
initWithTarget:action:
set_tapGestureRecognizer:
_tapGestureRecognizer
setCancelsTouchesInView:
view
addGestureRecognizer:
set_doneButton:
preferredFontDescriptorWithTextStyle:
fontDescriptorWithSymbolicTraits:
fontWithDescriptor:size:
setFont:
setTitle:forState:
whiteColor
setTitleColor:forState:
setContentEdgeInsets:
_userDidTapOnDoneButton:
addTarget:action:forControlEvents:
addSubview:
set_setWallpaperButton:
setAdjustsFontSizeToFitWidth:
setBaselineAdjustment:
_userDidTapOnSetWallpaperButton:
set_openSettingsButton:
imageNamed:inBundle:
setImage:forState:
setTintColor:
_userDidTapOnOpenSettingsButton:
centerXAnchor
constraintGreaterThanOrEqualToSystemSpacingAfterAnchor:multiplier:
constraintEqualToAnchor:constant:
constraintEqualToSystemSpacingAfterAnchor:multiplier:
centerYAnchor
heightAnchor
widthAnchor
safeAreaLayoutGuide
constraintEqualToSystemSpacingBelowAnchor:multiplier:
setHidden:
setAlpha:
_hideButtonsAnimated
performSelector:withObject:afterDelay:
animateWithDuration:delay:options:animations:completion:
cancelPreviousPerformRequestsWithTarget:selector:object:
delegate
wallpaperLocketViewControllerDidTapOnDoneButton:
alpha
prefersStatusBarHidden
numberOfSectionsInCollectionView:
collectionView:numberOfItemsInSection:
collectionView:cellForItemAtIndexPath:
setDelegate:
_delegate
__openSettingsButton
__setWallpaperButton
__doneButton
__tapGestureRecognizer
@24@0:8^{_NSZone=}16
Q16@0:8
@16@0:8
@"NSString"16@0:8
d16@0:8
@"NSURL"16@0:8
@"UIImage"16@0:8
B24@0:8@16
@24@0:8@16
@32@0:8@16Q24
v24@0:8@16
v16@0:8
v32@0:8@16@24
Q24@0:8@16
@32@0:8@16@24
B16@0:8
@"NSString"
@"NSURL"
@"NSMutableDictionary"
@32@0:8Q16@24
@64@0:8Q16@24@32@40@48d56
v24@0:8d16
v24@0:8Q16
@24@0:8Q16
q16@0:8
@"WKWallpaperBundle"
@"NSMutableArray"
Q24@0:8Q16
@"NSObject<OS_dispatch_queue>"
@"NSArray"
@"NSDictionary"
@"WKWallpaperBundleImporter"
@48@0:8Q16@24@32@40
@"UIImage"
v20@0:8B16
q24@0:8@16
q32@0:8@16q24
@"<WKWallpaperLocketViewControllerDelegate>"
@"UIButton"
@"UITapGestureRecognizer"
