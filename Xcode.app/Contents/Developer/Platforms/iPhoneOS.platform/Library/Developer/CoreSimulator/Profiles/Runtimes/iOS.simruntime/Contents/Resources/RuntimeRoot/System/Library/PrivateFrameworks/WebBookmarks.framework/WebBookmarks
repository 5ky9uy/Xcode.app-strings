webBookmarksMetaDataDidChangeNotification
com.apple.WebBookmarks.MetaDataDidChangeNotification
DeviceUUID
com.apple.WebBookmarkDeviceIdentifier.%p
v8@?0
v12@?0B8
<%@: %p' _UUID = %@
Modify (isMove: YES)
Modify (isMove: NO)
Delete
Title
IsSelectedFavoritesFolder
DateAdded
DateLastViewed
ImageURL
PreviewText
LastSelectedTab
Folder
Leaf
, Changed Attributes: %@
<BAChangeRecord: %p, Type: %@, Bookmark Type: %@, Bookmark ID: %d, Bookmark Sync Server ID: %@%@>
data
v32@?0@"NSString"8Q16^B24
Type
605.2.2
606.1.16
-[WebBookmarkCloudKitSyncCollection dealloc]
-[WebBookmarkProductionSafariCloudKitSyncTabCollection dealloc]
<%s %p; localID: %d; serverID: %@; item: %p>
BAFolder
BABookmark
<%@: %p, type: %@, store owner: %@>
-[WBBookmarkDBAccess copyDeviceIdentifier]
-[WBBookmarkDBAccess resetDeviceIdentifier]
WebBookmarkDatabaseCreate
com.apple.dataaccess
BADatabaseOpen
BADatabaseSave
BADatabaseClose
BADatabaseCopySyncData
(null)
BADatabaseSetSyncData
BADatabaseClearAllSyncData
BADatabaseCopyChanges
BADatabaseClearChangesForToken
BADatabaseRemoveItemWithServerId
BADatabaseBeginMergingChanges
BADatabaseFinishMergingChanges
BAItemCopyServerId
BAItemSetServerId
BAItemCopyParentServerId
BAItemCopySyncKey
BAItemSetSyncKey
BAItemCopySyncData
BAItemSetSyncData
BAChangeGetChangeType
BAChangeCopyChangedItem
BAChangeCopyServerId
BAChangeIsMove
CKBAChangeGetItemType
CKBAChangeGetFolder
CKBAChangeGetBookmarkType
CKBADatabasePerformMaintenanceAfterVersion
CKBADatabaseGetLocalCloudKitMigrationState
CKBADatabaseSetLocalCloudKitMigrationState
CKBADatabaseCopyAccountHash
CKBADatabaseSetAccountHash
CKBADatabaseCopyChangeToken
CKBADatabaseCopyItemWithLocalID
CKBADatabaseCopyLocalIDsInFolderWithLocalID
CKBADatabaseCopyItemWithServerId
CKBADatabaseAddItemUnderFolderWithServerId
saveBookmarkUnderFolderWithServerId
CKBADatabasePerformDeduplication
CKBADatabaseCopyServerIdsInFolderWithServerId
CKBADatabaseSetChildrenOrderForFolderWithServerId
@"NSString"16@?0@"NSString"8
CKBADatabaseCopyServerIdInFolderBeforeServerId
CKBADatabaseCopyServerIdInFolderAfterServerId
CKBADatabaseCopyFirstServerIdInFolderWithServerId
CKBADatabaseCopyLastServerIdInFolderWithServerId
CKBAItemGetItemType
CKBAItemGetIsInFolderWithServerSyncId
CKBAItemIsEqualToItem
CKBAFolderGetFolderType
CKBADatabaseCreateFolder
CKBABookmarkGetBookmarkType
CKBADatabaseCreateBookmark
CKBAChangeGetWasBookmarkMoved
CKBAChangeCopyDeletedBookmarkSyncData
CKBAChangeSetDeletedBookmarkSyncData
CKBAChangeCopyModifiedAttributes
CKBAItemCopyAttributes
CKBAItemSetModifiedAttributes
CKBAItemCopyValueForKey
CKBADatabaseClearAllLocalBookmarksForAutomatedTesting
v20@?0B8@"NSError"12
v28@?0B8@"NSArray"12@"NSError"20
v16@?0@"NSError"8
EncodedCKRecordSystemFields
Generations
ModifiedAttributeMask
ExtraPositionData
Position
MinimumAPIVersion
Deleted
default
ParentAndPosition
IsTabGroup
HasUserDefinedPreviewText
v16@?0@"NSString"8
CloudBookmarkSyncData
CloudBookmarkGeneration
CloudBookmarkPosition
CloudBookmarkPositionSortValue
com.apple.WebBookmarks.TabGroupSyncAgent.ErrorDomain
Failed to open database
The feature is disabled
Failed to acquire the lock on the database
Error: domain=%@, code=%ld
B16@?0@"WebBookmark"8
BookmarkID
ParentID
AssociatedBookmarkID
SpecialFolderID
AssociatedBookmark
ModifiedAttributes
Bookmarks
@"WebBookmark"16@?0@"NSDictionary"8
dictionaryRepresentationForInMemoryChangeTracking
Modify
Move
Reorder
Replace
<%@: %p; type = %@; bookmark = %d %@; parent = %d; associated bookmark = %d;>
pinned
privatePinned
recentlyClosed
com.apple.WebBookmarks.SafariTabs.lock
TabChanges.plist
CREATE TABLE IF NOT EXISTS windows (id INTEGER PRIMARY KEY,active_tab_group_id INTEGER DEFAULT NULL,date_closed REAL DEFAULT NULL,extra_attributes BLOB DEFAULT NULL,is_last_session INTEGER DEFAULT 0,local_tab_group_id INTEGER DEFAULT NULL,private_tab_group_id INTEGER DEFAULT NULL,scene_id TEXT DEFAULT NULL,uuid TEXT NOT NULL UNIQUE,FOREIGN KEY (active_tab_group_id) REFERENCES bookmarks (id) ON UPDATE CASCADE ON DELETE SET NULL,FOREIGN KEY (local_tab_group_id) REFERENCES bookmarks (id) ON UPDATE CASCADE ON DELETE CASCADE,FOREIGN KEY (private_tab_group_id) REFERENCES bookmarks (id) ON UPDATE CASCADE ON DELETE CASCADE)
CREATE INDEX IF NOT EXISTS uuid_index ON windows (uuid)
CREATE TABLE IF NOT EXISTS windows_tab_groups (id INTEGER PRIMARY KEY,active_tab_id INTEGER DEFAULT NULL,tab_group_id INTEGER NOT NULL,window_id INTEGER NOT NULL,FOREIGN KEY (active_tab_id) REFERENCES bookmarks (id) ON UPDATE CASCADE ON DELETE CASCADE,FOREIGN KEY (tab_group_id) REFERENCES bookmarks (id) ON UPDATE CASCADE ON DELETE CASCADE,FOREIGN KEY (window_id) REFERENCES windows (id) ON UPDATE CASCADE ON DELETE CASCADE,UNIQUE (tab_group_id, window_id))
CREATE INDEX IF NOT EXISTS window_index ON windows_tab_groups (window_id)
WHERE local_tab_group_id = 0 OR local_tab_group_id IS NULL OR private_tab_group_id = 0 OR private_tab_group_id IS NULL
WHERE local_tab_group_id IN (SELECT windows.local_tab_group_id FROM windows LEFT JOIN bookmarks ON windows.local_tab_group_id = bookmarks.id WHERE bookmarks.id IS NULL)
WHERE private_tab_group_id IN (SELECT windows.private_tab_group_id FROM windows LEFT JOIN bookmarks ON windows.private_tab_group_id = bookmarks.id WHERE bookmarks.id IS NULL)
B8@?0
@"NSArray"16@?0@"WBTabGroup"8
UPDATE windows SET is_last_session = 1 WHERE uuid = %@
BEGIN
PRAGMA user_version = 44
Local
Private
PRAGMA user_version = 45
SELECT id, uuid FROM windows %@
Failed to fetch windows
DELETE FROM windows %@
Failed to delete windows
@"WBTab"16@?0@"WebBookmark"8
B16@?0@"WBTab"8
'%@'
@"WBWindow"16@?0@"WebBookmark"8
WHERE uuid = %@
SELECT windows.id FROM windows WHERE windows.uuid = ?
Failed to fetch window id
SELECT tab_bookmarks.external_uuid, tab_group_bookmarks.external_uuid FROM bookmarks AS tab_bookmarks INNER JOIN windows_tab_groups ON tab_bookmarks.id = windows_tab_groups.active_tab_id INNER JOIN bookmarks AS tab_group_bookmarks ON windows_tab_groups.tab_group_id = tab_group_bookmarks.id WHERE windows_tab_groups.window_id = ?
Failed to fetch active tabs
SELECT bookmarks.external_uuid, windows.local_tab_group_id, windows.private_tab_group_id, windows.scene_id, windows.uuid, windows.id, windows.extra_attributes FROM windows INNER JOIN bookmarks ON windows.active_tab_group_id = bookmarks.id %@
Failed to fetch window states
WHERE windows.date_closed = (SELECT MAX(date_closed) from windows)
WHERE windows.is_last_session = 1
WHERE windows.date_closed > 0
WHERE windows.date_closed IS NULL
bookmark
B16@?0@"WBTabGroup"8
INSERT INTO windows (active_tab_group_id, date_closed, extra_attributes, is_last_session, local_tab_group_id, private_tab_group_id, scene_id, uuid) VALUES (?, ?, ?, 1, ?, ?, ?, ?) ON CONFLICT (uuid) DO UPDATE SET active_tab_group_id = excluded.active_tab_group_id, date_closed = excluded.date_closed, extra_attributes = excluded.extra_attributes, local_tab_group_id = excluded.local_tab_group_id, private_tab_group_id = excluded.private_tab_group_id, is_last_session = 1
Failed to add a window
INSERT INTO windows_tab_groups (active_tab_id, tab_group_id, window_id) VALUES (?, ?, ?) ON CONFLICT (tab_group_id, window_id) DO UPDATE SET active_tab_id = excluded.active_tab_id
Failed to add an active tab
v32@?0@"NSString"8@"NSString"16^B24
DELETE FROM bookmarks WHERE syncable = 0 AND (parent != 0 OR external_uuid NOT IN (%@))
Failed to delete all tabs
@"NSNumber"16@?0@"WBTab"8
UPDATE bookmarks SET date_closed = %f WHERE id in (%@)
Failed to update tab close date
@"NSString"16@?0@"WBWindowState"8
UPDATE windows SET is_last_session = CASE WHEN uuid in (%@) THEN 1 ELSE 0 END
Failed to update last session
Windows
PinnedTabs
PrivatePinnedTabs
WindowStatesKey
<%@: %p; pinnedTabs = %lu; privatePinnedTabs = %lu; windows = %lu>
ROLLBACK TO SAVEPOINT bookmarks
RELEASE SAVEPOINT bookmarks
SAVEPOINT bookmarks
SELECT NULL FROM bookmarks
apple-internal-install
com.apple.MobileSafari.StopSyncing
Changes
FileURL
com.apple.WebBookmarks.WebBookmarkChangeSet.%p
B16@?0@"WebBookmarkChange"8
v20@?0@"NSMutableDictionary"8i16
v16@?0@"NSMutableDictionary"8
@"NSDictionary"16@?0@"WebBookmarkChange"8
WBErrorDomain
Misuse of WBReadingList interface. Use class method defaultReadingList.
com.apple.WebBookmarks.AddToReadingListQueue
@"WBTab"16@?0@"WBTab"8
@"NSArray"16@?0@"NSArray"8
B16@?0@"WBTabCollection"8
privacyPreservingDescription
%@ %d (%d)
 '%@' [%@] [%@]
<%@: %p; tabGroup = %@; title = %@; url = %@; uuid = %@>
<%@: %p; uuid = %@>
DidDownloadIconsNotification
BookmarkIdentifier
com.apple.WebBookmarks.SQLiteError
com.apple.WebBookmarks.DidVacuumDatabaseNotification
WebBookmarksFolderContentsDidChangeNotification
WebBookmarksDidReloadNotification
WebBookmarksSpecialFoldersDidChangeNotification
WebBookmarksChangedFolderID
com.apple.bookmarks.OmitFromUI
_DatabaseResetReason
com.apple.bookmarks.IsBuiltinBookmark
com.apple.bookmarks.IsBuiltinDeviceBookmark
com.apple.bookmarks.IsCarrierBookmark
com.apple.bookmarks.SelectedFavoritesFolder
LocalURL
com.apple.webbookmarksd.readingListfetching
com.apple.WebBookmarks.webbookmarksd
WebBookmarksDataclassDidChangeNotification
WebBookmarksResetCloudHistoryAccount
ComputerAnchorKey
BASyncData
_FavoritesFolderID
BookmarksBar
BookmarksMenu
com.apple.ReadingList
com.apple.WebFilterWhiteList
com.apple.FrequentlyVisitedSites
_ck_local_migration_state_
AccountHash
WebBookmarksDetectedLocalMigrationStateTransitionNotification
fromMigrationState
toMigrationState
DAVHomeURL
BookmarkImages
com.apple.WebBookmarks.WebBookmarkCollection
Bookmarks.db
SafariTabs.db
corrupted
%@.corrupted
-journal
-wal
-shm
PRAGMA journal_mode = wal
:memory:
SELECT * FROM bookmarks LIMIT 1
Database failed full integrity check.
PRAGMA foreign_keys = ON
PRAGMA auto_vacuum = FULL
SELECT name from sqlite_master where type = 'table'
bookmarks
generations
sync_properties
bookmark_title_words
folder_ancestors
PRAGMA integrity_check(1)
Bookmarks.plist
Bookmarks.plist.anchor.plist
bookmarkChanges.plist
Library/Caches
com.apple.mobilesafari
ReadingListArchives
UPDATE bookmarks SET archive_status = ? WHERE archive_status = ? OR archive_status = ?
PendingBookmarkChanges.plist
UPDATE bookmarks SET archive_status = ? WHERE parent = ? AND id IN (%@)
parent = %d AND deleted = 0 AND (archive_status = %zd OR archive_status = %zd)
UPDATE bookmarks SET archive_status = %zd WHERE %@
web_filter_status = %zd
UPDATE bookmarks SET web_filter_status = ? WHERE parent = ? AND deleted = 0 AND web_filter_status != ?
VACUUM
PRAGMA wal_checkpoint(TRUNCATE)
parent = %d AND deleted = 0 AND read = 1 AND (archive_status = %zd OR archive_status = %zd)
Trying to edit bookmarks without first obtaining the bookmarks database file lock.
Safari
id = %d AND deleted = 0
external_uuid = ? AND deleted = 0
SELECT external_uuid FROM bookmarks WHERE deleted = 0 AND external_uuid IN (
SELECT id FROM bookmarks WHERE parent = ? AND type = 1 AND title = ? AND deleted = 0
parent = ? AND title = ? AND deleted = 0 ORDER BY order_index
parent = %d AND type = 1 AND deleted = 0 AND hidden = 0 AND hidden_ancestor_count = 0 ORDER BY order_index
SELECT COUNT(*) FROM bookmarks WHERE parent = ? AND type = 0 AND hidden = 0
SELECT parent, count(*) FROM bookmarks WHERE (parent IN (SELECT folder_id FROM folder_ancestors WHERE ancestor_id = ?) AND hidden = 0 AND type = 0) GROUP BY parent
SELECT order_index FROM bookmarks WHERE id = %d
SELECT parent FROM bookmarks WHERE id = %d
SELECT modified_attributes FROM bookmarks WHERE id = %d
SELECT id FROM bookmarks WHERE external_uuid = '%@'
SELECT external_uuid FROM bookmarks WHERE parent = %d ORDER BY order_index ASC
SELECT id FROM bookmarks WHERE special_id = %d AND deleted = 0
web_filter_status != %zd
read = 0 AND 
parent = %d AND deleted = 0
 AND %@
order_index DESC
SELECT id FROM bookmarks WHERE special_id = %d
SELECT COUNT(*) FROM bookmarks WHERE special_id == 0 AND id != 0 AND deleted = 0;
http
https
fetched_icon = 0 AND (url LIKE 'http:%%' OR url LIKE 'https:%%') AND parent IN (%@)
UPDATE bookmarks SET fetched_icon = 0 WHERE parent IN (%@)
UPDATE bookmarks SET icon = NULL, fetched_icon = 0 WHERE parent IN (%@)
Trying to save bookmarks without first obtaining the bookmarks database file lock.
Trying to save a bookmark without first obtaining the bookmarks database file lock.
UPDATE bookmarks SET order_index = order_index + 1 WHERE order_index < ? AND order_index >= ? AND parent = ?
UPDATE bookmarks SET order_index = order_index - 1 WHERE order_index > ? AND order_index <= ? AND parent = ?
UPDATE bookmarks SET order_index = ?1, dav_generation = ?2%@ WHERE id = ?3
, modified_attributes = modified_attributes | ?4
B16@?0@"NSString"8
@"NSNumber"16@?0@"WebBookmark"8
v32@?0@"WebBookmark"8Q16^B24
SELECT id, parent, num_children, (SELECT COUNT(*) FROM bookmarks AS child_bookmark WHERE child_bookmark.parent = parent_bookmark.id AND hidden = 0) AS real_num_children FROM bookmarks AS parent_bookmark WHERE num_children != real_num_children
UPDATE bookmarks SET num_children = ? WHERE id = ?
UPDATE bookmarks SET sync_data = ? WHERE id = ?
DISTINCT url
SELECT %s FROM bookmarks WHERE type = 0 AND url >= ? AND url < ? AND deleted = 0 LIMIT ?
SELECT %s FROM bookmarks WHERE type = 0 AND deleted = 0 LIMIT ?
SELECT id, title, url FROM bookmarks WHERE type = 0 AND deleted = 0
AND parent = %d
AND hidden = 0 AND hidden_ancestor_count = 0
SELECT %@ FROM bookmarks INNER JOIN bookmark_title_words ON bookmarks.id = bookmark_title_words.bookmark_id WHERE bookmark_title_words.word LIKE ? AND type = 0 AND deleted = 0 AND web_filter_status != %zd AND title IS NOT NULL AND url IS NOT NULL AND url != "" %@
PRAGMA case_sensitive_like = true
@"WebBookmark"8@?0
v32@?0@"NSString"8@"NSString"16^{BookmarkSQLStatement=^^?^{sqlite3_stmt}BBi}24
SELECT %@ FROM bookmarks WHERE url LIKE ? AND type = 0 AND deleted = 0 AND web_filter_status != %zd AND title IS NOT NULL AND url IS NOT NULL %@
PRAGMA case_sensitive_like = false
 AND (archive_status = %zd OR archive_status = %zd)
deleted = 0 AND parent = ? AND web_filter_status != ? AND title IS NOT NULL AND url IS NOT NULL%@ ORDER BY order_index DESC LIMIT ?
SELECT %@ FROM bookmarks INNER JOIN bookmark_title_words ON bookmarks.id = bookmark_title_words.bookmark_id WHERE bookmark_title_words.word LIKE ? AND %@
SELECT %@ FROM bookmarks WHERE url LIKE ? AND %@
q24@?0@8@16
SELECT COUNT(*) FROM bookmarks WHERE order_index < ? AND parent = ? AND (read = 0 AND deleted = 0 AND id NOT IN (%@))
SELECT id FROM bookmarks WHERE parent = %d AND deleted = 0 AND web_filter_status = %zd ORDER BY order_index DESC LIMIT %d
id IN (%@) AND 
archive_status IN (%zd,%zd,%zd)
archive_status IN (%zd,%zd)
(%@)
(%@) AND (locally_added = 1 OR read = 0)
(%@) AND locally_added = 1
 ORDER BY archive_status ASC, read ASC, locally_added DESC, order_index DESC
 LIMIT 1
read ASC, order_index DESC
syncable = 0 AND parent = 0
com.apple.Bookmarks.lock
SELECT MAX(order_index) + 1 FROM bookmarks WHERE special_id != 0
SELECT COUNT(*), MAX(order_index) FROM bookmarks WHERE parent = ? AND deleted = 0 AND syncable = 1
special_id = ? AND deleted = 0
%@%%
url LIKE ? AND deleted = 0 AND parent = ? LIMIT 1
url = ? AND deleted = 0 AND parent = ? ORDER BY last_modified ASC LIMIT 1
type = 1 AND title = ? AND parent = ? AND deleted = 0 %@
AND server_id IS NULL
type = 0 AND url = ?1 AND parent = ?2 AND deleted = 0 AND server_id IS NULL
type = 0 AND title = ?3 AND url = ?1 AND parent = ?2 AND deleted = 0
PRAGMA user_version
PRAGMA user_version = %d
COMMIT
CREATE TABLE generations (generation INTEGER NOT NULL)
INSERT INTO generations (generation) VALUES (1)
CREATE TABLE sync_properties (key TEXT NOT NULL, value TEXT NOT NULL)
CREATE INDEX sync_properties_key_index ON sync_properties (key)
INSERT INTO sync_properties (key, value) VALUES ('_dav_generation', 1)
INSERT INTO bookmarks (id, special_id, parent, type, order_index, num_children, editable, deletable, title, external_uuid) VALUES (1, 1, 0, 1, 0, 0, 0, 0, 'BookmarksBar', '%@')
UPDATE bookmarks SET num_children = 1 WHERE id = 0
DROP TABLE IF EXISTS bookmark_title_words
CREATE TABLE bookmark_title_words (id INTEGER PRIMARY KEY AUTOINCREMENT, bookmark_id INTEGER NOT NULL CONSTRAINT fk_bookmark_id REFERENCES bookmarks(id) ON DELETE CASCADE, word TEXT, word_index INTEGER)
CREATE TRIGGER fkd_bookmark_title_words_bookmark_id BEFORE DELETE ON bookmarks      FOR EACH ROW BEGIN DELETE FROM bookmark_title_words WHERE bookmark_id = OLD.id;      END;
CREATE INDEX title_word_index ON bookmark_title_words(word)
CREATE INDEX title_bookmark_id_index ON bookmark_title_words(bookmark_id)
DROP TABLE IF EXISTS bookmarks
CREATE TABLE bookmarks (id INTEGER PRIMARY KEY AUTOINCREMENT,special_id INTEGER DEFAULT 0,parent INTEGER, type INTEGER,title TEXT,url TEXT COLLATE NOCASE,num_children INTEGER DEFAULT 0,editable INTEGER DEFAULT 1,deletable INTEGER DEFAULT 1,hidden INTEGER DEFAULT 0,hidden_ancestor_count INTEGER DEFAULT 0,order_index INTEGER NOT NULL,external_uuid TEXT,read INTEGER DEFAULT NULL,last_modified REAL DEFAULT NULL,server_id TEXT, sync_key TEXT,sync_data BLOB,added INTEGER DEFAULT 1,deleted INTEGER DEFAULT 0,extra_attributes BLOB DEFAULT NULL,local_attributes BLOB DEFAULT NULL,fetched_icon BOOL DEFAULT 0, icon BLOB DEFAULT NULL,dav_generation INTEGER DEFAULT 0,locally_added BOOL DEFAULT 0,archive_status INTEGER DEFAULT 0,syncable BOOL DEFAULT 1,web_filter_status INTEGER DEFAULT 0, modified_attributes UNSIGNED BIG INT DEFAULT 0, date_closed REAL DEFAULT NULL, last_selected_child INTEGER DEFAULT NULL, FOREIGN KEY (last_selected_child) REFERENCES bookmarks (id) ON DELETE SET NULL)
CREATE INDEX special_id_index ON bookmarks (special_id)
CREATE INDEX autocomplete_index ON bookmarks (url)
CREATE INDEX folder_list_index ON bookmarks (parent, type, order_index)
CREATE INDEX group_index ON bookmarks (parent, order_index)
CREATE INDEX sync_index ON bookmarks (external_uuid)
CREATE INDEX server_id_index ON bookmarks(server_id)
CREATE INDEX dav_generation_index ON bookmarks(dav_generation)
CREATE INDEX reading_list_index ON bookmarks (parent, deleted, web_filter_status, order_index DESC)
INSERT INTO bookmarks (id, type, order_index, num_children, title, external_uuid) VALUES (0, 1, 0, 0, 'Root', 'Root')
ALTER TABLE bookmarks ADD COLUMN special_id INTEGER DEFAULT 0
UPDATE bookmarks SET title = 'Root', external_uuid = 'Root' WHERE id = 0
UPDATE bookmarks SET special_id = 1 WHERE id = 1
UPDATE bookmarks SET special_id = 2 WHERE id = 2
PRAGMA user_version = 1
CREATE TABLE bookmark_title_words (id INTEGER PRIMARY KEY, bookmark_id INTEGER NOT NULL CONSTRAINT fk_bookmark_id REFERENCES bookmarks(id) ON DELETE CASCADE, word TEXT, word_index INTEGER)
CREATE TRIGGER fkd_bookmark_title_words_bookmark_id BEFORE DELETE ON bookmarks         FOR EACH ROW BEGIN DELETE FROM bookmark_title_words WHERE bookmark_id = OLD.id;         END;
PRAGMA user_version = 3
ALTER TABLE bookmarks ADD COLUMN server_id TEXT
ALTER TABLE bookmarks ADD COLUMN sync_key TEXT
ALTER TABLE bookmarks ADD COLUMN sync_data BLOB
PRAGMA user_version = 4
SELECT count(*) FROM sync_properties WHERE key = '_dav_generation'
ALTER TABLE bookmarks ADD COLUMN deleted INTEGER DEFAULT 0
ALTER TABLE bookmarks ADD COLUMN dav_generation INTEGER DEFAULT 0
PRAGMA user_version = 5
PRAGMA user_version = 6
CREATE TABLE folder_ancestors (id INTEGER PRIMARY KEY, folder_id INTEGER NOT NULL CONSTRAINT fk_ancestors_folder_id REFERENCES bookmarks(id) ON DELETE CASCADE, ancestor_id INTEGER NOT NULL)
CREATE TRIGGER fkd_ancestors_folder_id BEFORE DELETE ON bookmarks FOR EACH ROW BEGIN DELETE FROM folder_ancestors WHERE folder_id = OLD.id; END;
CREATE INDEX ancestor_folder_id_index on folder_ancestors(folder_id)
CREATE INDEX ancestor_ancestor_id_index on folder_ancestors(ancestor_id)
PRAGMA user_version = 7
ALTER TABLE bookmarks ADD COLUMN extra_attributes BLOB DEFAULT NULL
PRAGMA user_version = 8
DROP INDEX IF EXISTS deleted_index
DROP INDEX IF EXISTS autocomplete_index
CREATE INDEX autocomplete_index ON bookmarks(url)
PRAGMA user_version = 9
ALTER TABLE bookmarks ADD COLUMN hidden INTEGER DEFAULT 0
PRAGMA user_version = 10
ALTER TABLE bookmarks ADD COLUMN hidden_ancestor_count INTEGER DEFAULT 0
PRAGMA user_version = 11
ALTER TABLE bookmarks ADD COLUMN read INTEGER DEFAULT NULL
ALTER TABLE bookmarks ADD COLUMN last_modified REAL DEFAULT NULL
PRAGMA user_version = 14
SELECT id FROM bookmarks WHERE special_id = 3
UPDATE bookmarks SET read = 0 WHERE read IS NULL and parent = ?
PRAGMA user_version = 15
CREATE INDEX title_word_bookmark_id_index ON bookmark_title_words(bookmark_id)
PRAGMA user_version = 16
UPDATE bookmarks SET num_children = (SELECT COUNT(*) FROM bookmarks AS count_bookmarks WHERE count_bookmarks.parent = bookmarks.id AND hidden = 0) WHERE type = 1
PRAGMA user_version = 19
SELECT count(*) FROM bookmarks WHERE parent = ? AND deleted = 0
UPDATE bookmarks SET order_index = ? - order_index - 1 WHERE parent = ?
PRAGMA user_version = 21
ALTER TABLE bookmarks ADD COLUMN icon BLOB DEFAULT NULL
ALTER TABLE bookmarks ADD COLUMN fetched_icon BOOL DEFAULT 0
SELECT id, extra_attributes FROM bookmarks WHERE deleted = 0 AND parent = ?
UPDATE bookmarks SET icon = ?, fetched_icon = ?, extra_attributes = ?, dav_generation = ? WHERE id = ?
PRAGMA user_version = 22
DELETE FROM sync_properties WHERE key = '_dav_generation'
INSERT INTO sync_properties (key, value) VALUES ('_dav_generation', ?)
PRAGMA user_version = 23
ALTER TABLE bookmarks ADD COLUMN added INTEGER DEFAULT 1
UPDATE bookmarks SET added = 0 WHERE server_id IS NOT NULL
PRAGMA user_version = 24
ALTER TABLE bookmarks ADD COLUMN archived_offline BOOL DEFAULT 0
ALTER TABLE bookmarks ADD COLUMN last_archived REAL DEFAULT NULL
PRAGMA user_version = 25
PRAGMA user_version = 26
PRAGMA user_version = 27
PRAGMA user_version = 28
ALTER TABLE bookmarks ADD COLUMN locally_added BOOL DEFAULT 0
PRAGMA user_version = 29
ALTER TABLE bookmarks ADD COLUMN local_attributes BLOB DEFAULT NULL
SELECT id, extra_attributes, last_archived FROM bookmarks WHERE deleted = 0 AND parent = ?
UPDATE bookmarks SET extra_attributes = ?, local_attributes = ?, dav_generation = ? WHERE id = ?
ALTER TABLE bookmarks DROP COLUMN last_archived
PRAGMA user_version = 30
ALTER TABLE bookmarks ADD COLUMN archive_status INTEGER DEFAULT 0
UPDATE bookmarks SET archive_status = archived_offline
UPDATE bookmarks SET archived_offline = NULL
UPDATE bookmarks SET last_archived = NULL
PRAGMA user_version = 31
PRAGMA user_version = 32
UPDATE bookmarks SET fetched_icon = 0, icon = NULL WHERE parent = (SELECT id FROM bookmarks WHERE special_id = 3)
PRAGMA user_version = 33
ALTER TABLE bookmarks ADD COLUMN syncable BOOL DEFAULT 1
PRAGMA user_version = 34
UPDATE bookmarks SET archive_status = 0 WHERE archive_status IS NULL
PRAGMA user_version = 35
ALTER TABLE bookmarks ADD COLUMN web_filter_status INTEGER DEFAULT 0
PRAGMA user_version = 36
PRAGMA user_version = 37
PRAGMA user_version = 38
ALTER TABLE bookmarks ADD COLUMN modified_attributes UNSIGNED BIG INT DEFAULT 0
PRAGMA user_version = 39
DELETE FROM bookmark_title_words WHERE bookmark_id NOT IN (SELECT id FROM bookmarks)
DELETE FROM folder_ancestors WHERE folder_id NOT IN (SELECT id FROM bookmarks)
ALTER TABLE bookmarks ADD COLUMN date_closed REAL DEFAULT NULL
PRAGMA user_version = 41
ALTER TABLE bookmarks ADD COLUMN last_selected_child INTEGER DEFAULT NULL
ALTER TABLE bookmarks ADD FOREIGN KEY (last_selected_child) REFERENCES bookmarks (id) ON DELETE SET NULL
PRAGMA user_version = 42
PRAGMA user_version = 43
SELECT id, local_attributes, icon FROM bookmarks WHERE deleted = 0 AND parent = ?
UPDATE bookmarks SET local_attributes = ?, icon = ? WHERE id = ?
SELECT %@, %s FROM bookmarks
SELECT COUNT(*) FROM bookmarks WHERE special_id = 1
UPDATE bookmarks SET order_index = order_index + 1 WHERE parent = 0
INSERT INTO bookmarks (special_id, parent, type, order_index, editable, deletable, title, external_uuid) VALUES (1, 0, 1, 0, 0, 0, 'BookmarksBar', '')
UPDATE bookmarks SET num_children = num_children + 1 WHERE id = 0
AND hidden = 0 AND id != %d AND (num_children > 0 OR special_id != %d)
SELECT count(*) FROM bookmarks WHERE %@
SELECT id FROM bookmarks WHERE %@
SELECT %@ FROM bookmarks WHERE %@
SELECT COUNT(*) from folder_ancestors WHERE folder_id = ? AND ancestor_id = ?
UPDATE bookmarks SET order_index = order_index + 1 WHERE parent = ? AND order_index >= ?
UPDATE bookmarks SET parent = ?1, order_index = ?2,%@%@ icon = NULL, fetched_icon = 0 WHERE id = ?3
 modified_attributes = modified_attributes | ?4,
 dav_generation = ?5,
UPDATE bookmarks SET order_index = (order_index - 1) WHERE parent = ? AND order_index > ?
SELECT id FROM bookmarks WHERE server_id = ? AND deleted = 1
INSERT INTO bookmarks (order_index, deleted, parent, server_id%@) VALUES (0, 1, -1, ?%@)
, sync_data
DELETE FROM bookmarks WHERE deleted = 1
UPDATE bookmarks SET added = 1, server_id = NULL, sync_key = NULL, sync_data = NULL WHERE parent IN (select folder_id from folder_ancestors where ancestor_id = ?) OR parent = ? OR id = ?
UPDATE bookmarks SET server_id = NULL, sync_key = NULL, sync_data = NULL
UPDATE bookmarks SET added = 1
UPDATE bookmarks SET order_index = (order_index - 1) WHERE parent = %d AND order_index > %d
DELETE FROM bookmarks WHERE parent IN (SELECT folder_id FROM folder_ancestors WHERE ancestor_id = ?) OR parent = ?%@
 OR id = ?
UPDATE bookmarks SET order_index = order_index + 1 WHERE parent = %d AND order_index >= %d
SELECT (hidden + hidden_ancestor_count) FROM bookmarks WHERE id = ?
INSERT INTO bookmarks (title, url, parent, type, external_uuid, order_index, extra_attributes, fetched_icon, icon, locally_added, archive_status, web_filter_status, hidden_ancestor_count, editable, local_attributes, syncable, last_selected_child) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
SELECT count(*) FROM Bookmarks WHERE special_id = %u
UPDATE bookmarks SET title = ?1, url = ?2, extra_attributes = ?3, local_attributes = ?11, fetched_icon = ?4, icon = ?5, locally_added = ?10, archive_status = ?8, web_filter_status = ?12%@%@%@ WHERE id = ?6
, dav_generation = ?7
, modified_attributes = ?13
, last_selected_child = ?14
UPDATE bookmarks SET hidden = ? WHERE id = ?
UPDATE bookmarks SET last_modified = ?, read = ? WHERE id = ?
UPDATE bookmarks SET external_uuid = '%@' WHERE id = %d
UPDATE bookmarks SET special_id = %u, editable = 0, deletable = 0 WHERE id = %u
UPDATE bookmarks SET num_children = num_children - 1 WHERE id = %d
UPDATE bookmarks SET num_children = num_children + 1 WHERE id = %d
SELECT server_id FROM bookmarks WHERE id = ?
deleted = 0 AND
SELECT id FROM bookmarks WHERE %@ %@ ORDER BY server_id ASC
rtrim(server_id, '/') LIKE ?
server_id = ?
%%%@
%@ %@ ORDER BY server_id ASC
UPDATE bookmarks SET server_id = ? WHERE id = ?
SELECT parent, order_index FROM bookmarks WHERE server_id = ? AND deleted = 0
SELECT special_id FROM bookmarks WHERE id = ? AND deleted = 0
SELECT server_id, %@(order_index) FROM bookmarks WHERE parent = ? AND order_index %@ ? AND server_id IS NOT NULL AND deleted = 0
SELECT id, special_id FROM bookmarks WHERE server_id = ? AND deleted = 0
SELECT %@(order_index), server_id FROM bookmarks WHERE parent = ? AND server_id IS NOT NULL
BookmarksSyncMetadata.plist
SafariTabsSyncMetadata.plist
UPDATE bookmarks SET sync_key = ? WHERE id = ?
SELECT sync_key FROM bookmarks WHERE server_id = ? AND deleted = 0 ORDER BY server_id ASC
SELECT sync_key FROM bookmarks WHERE deleted = 0 AND rtrim(server_id, '/') LIKE ? ORDER BY server_id ASC
SELECT server_id from bookmarks where parent = ? AND deleted = 0
SELECT server_id FROM bookmarks WHERE parent = ? AND deleted = 0 AND order_index = ?
UPDATE bookmarks SET order_index = ? WHERE id = ?
SAVEPOINT bookmarksdav_order
RELEASE SAVEPOINT bookmarksdav_order
ROLLBACK TRANSACTION TO SAVEPOINT bookmarksdav_order
SELECT ancestor_id from folder_ancestors WHERE folder_id = ?
DELETE FROM folder_ancestors WHERE folder_id IN (SELECT folder_id FROM folder_ancestors WHERE ancestor_id = ?) OR folder_id = ?;
DELETE FROM bookmark_title_words WHERE bookmark_id = %d
INSERT INTO bookmark_title_words (bookmark_id, word, word_index) VALUES (?, ?, ?)
SELECT id, title FROM bookmarks where type = 0 AND deleted = 0
UPDATE generations SET generation = generation + 1
SELECT %@ %@
FROM folder_ancestors LEFT OUTER JOIN bookmarks ON folder_id = bookmarks.id WHERE bookmarks.id != 0 AND added = 1 AND syncable = 1 GROUP BY folder_id ORDER BY count(ancestor_id) ASC
FROM bookmarks WHERE added = 1 AND id != 0 AND type = 0 AND syncable = 1
FROM folder_ancestors LEFT OUTER JOIN bookmarks ON folder_id = bookmarks.id WHERE dav_generation = %d AND deleted = 0 AND added = 0 AND bookmarks.id != 0 AND syncable = 1 AND (modified_attributes & %llu) == %llu GROUP BY folder_id ORDER BY count(ancestor_id) ASC
FROM bookmarks WHERE dav_generation = %d AND deleted = 0 AND added = 0 AND id != 0 AND syncable = 1 AND ((modified_attributes & %llu) != %llu OR type = 0)
FROM bookmarks WHERE deleted = 1 AND server_id IS NOT NULL AND syncable = 1
UPDATE bookmarks SET added = 0, modified_attributes = 0 WHERE added != 0 OR modified_attributes != 0
UPDATE bookmarks SET added = ? WHERE id = ?
SELECT value from sync_properties WHERE key = '_dav_generation'
UPDATE sync_properties SET value = value + 1 WHERE key = '_dav_generation'
com.apple.bookmarks.BookmarksFileChanged
SELECT id FROM bookmarks WHERE special_id = ?
UPDATE bookmarks SET num_children = 0 WHERE id = %d
not null
null
SELECT id, URL FROM bookmarks WHERE type = 0 AND deleted = 0
UPDATE bookmarks SET URL = ? WHERE id = ?
address
pageTitle
bookmarkPath
title = ? AND parent = 0 AND deleted = 0 ORDER BY order_index ASC
UPDATE bookmarks SET num_children = (SELECT COUNT(*) FROM bookmarks AS count_bookmarks WHERE count_bookmarks.parent = %d) WHERE (bookmarks.id = %d AND bookmarks.num_children < 0)
DROP TABLE IF EXISTS folder_ancestors
DROP TRIGGER IF EXISTS fkd_ancestors_folder_id
CREATE TABLE folder_ancestors (id INTEGER PRIMARY KEY AUTOINCREMENT, folder_id INTEGER NOT NULL CONSTRAINT fk_ancestors_folder_id REFERENCES bookmarks(id) ON DELETE CASCADE, ancestor_id INTEGER NOT NULL)
INSERT INTO folder_ancestors (folder_id, ancestor_id) VALUES (?, ?)
SELECT id FROM bookmarks WHERE parent = ? AND type = 1 AND deleted = 0
UPDATE bookmarks SET hidden_ancestor_count = hidden_ancestor_count + ? WHERE parent IN (SELECT folder_id from folder_ancestors WHERE ancestor_id = ?) OR parent = ?
 LIMIT ? OFFSET ?
SELECT parent, count(*) AS identical_bookmarks FROM bookmarks GROUP BY parent, type, title, url HAVING identical_bookmarks > 1
@"WebBookmark"16@?0@"WebBookmark"8
v16@?0@"WebBookmark"8
DELETE FROM bookmarks WHERE id = ?
SELECT num_children FROM bookmarks WHERE id = ?
UPDATE bookmarks SET parent = ?1, order_index = order_index + ?2%@ WHERE parent = ?3
, modified_attributes = modified_attributes | ?4, dav_generation = ?5
UPDATE bookmarks SET num_children = num_children + (SELECT num_children FROM bookmarks WHERE id = ?) WHERE id = ?
DELETE FROM folder_ancestors
UPDATE bookmarks SET num_children = (SELECT COUNT(*) FROM bookmarks AS b WHERE b.parent = ? AND b.hidden = 0) WHERE id = ? AND type = 1
parent = ?%@%@
 AND type = 1
 AND hidden = 0
DELETE FROM sync_properties WHERE key != ? AND key LIKE ?
SELECT id from bookmarks where parent = ? AND deleted = 0 AND syncable = 1
SELECT sync_data FROM bookmarks WHERE special_id = 0 AND syncable = 1 AND deleted = 0 AND parent = ? AND order_index < ? ORDER BY order_index DESC
SELECT sync_data FROM bookmarks WHERE special_id = 0 AND syncable = 1 AND deleted = 0 AND parent = ? AND order_index > ? ORDER BY order_index ASC
com.apple.WebBookmarks.bookmarksCollectionQueue
com.apple.WebBookmarks.titleWordTokenizerAccess
DeviceClass
iPad
com.apple.WebBookmarks.ErrorDomain
WebBookmarkTypeList
WebBookmarkTypeLeaf
WebBookmarkType
title
URIDictionary
URLString
Children
WebBookmarkUUID
SELECT type, title, url, id, external_uuid FROM bookmarks WHERE parent = ? AND deleted = 0 AND hidden = 0 AND syncable = 1 ORDER BY order_index
SELECT type, title, url, id, external_uuid FROM bookmarks WHERE id = 0
UPDATE bookmarks SET special_id = 1, editable = 0, deletable = 0 WHERE id = (SELECT id FROM bookmarks WHERE title = 'BookmarksBar' AND parent = 0 ORDER BY id ASC LIMIT 1);
UPDATE bookmarks SET special_id = 2, editable = 0, deletable = 0 WHERE id = (SELECT id FROM bookmarks WHERE title = 'BookmarksMenu' AND parent = 0 ORDER BY id ASC LIMIT 1);
DELETE FROM bookmarks WHERE id != 0 AND syncable = 1
DELETE FROM bookmarks WHERE id != 0 AND hidden = 0 AND hidden_ancestor_count = 0 AND syncable = 1
SELECT generation FROM generations
SELECT COUNT(*) FROM sync_properties WHERE key = ?
DELETE FROM sync_properties WHERE key = ?
UPDATE sync_properties SET value = ? WHERE key = ?
INSERT INTO sync_properties (value, key) VALUES (?, ?)
SELECT value FROM sync_properties WHERE key = ?
SAVEPOINT sync
RELEASE SAVEPOINT sync
ROLLBACK TRANSACTION TO SAVEPOINT sync
special_id == 0 AND id != 0
SQLiteResult
come.apple.WebBookmarks.syncLockQueue
dateClosed
extraAttributes
identifier
localTabGroup
privateTabGroup
sceneID
tabGroupsToActiveTabs
<%@: %p; activeTabGroupUUID = %@; identifier = %d; sceneID = %@; uuid = %@>
com.apple.WebBookmarks
History (bookmark proxy)
Reading List
Allowed Sites
Favorites
Bookmarks Menu
WebBookmarkWebFilterSettingsDidChange
com.apple.ManagedConfiguration.webContentFilterChanged
/System/Library/PrivateFrameworks/WebContentAnalysis.framework/WebContentAnalysis
/System/Library/PrivateFrameworks/WebContentAnalysis.framework/Contents/MacOS/WebContentAnalysis
WFUserSettings
Class getWFUserSettingsClass(void)_block_invoke
WebBookmarkWebFilterSettings.m
Unable to find class %s
void *WebContentAnalysisLibrary(void)
TIWordTokenizer
/System/Library/PrivateFrameworks/TextInput.framework/TextInput
/System/Library/PrivateFrameworks/TextInput.framework/Contents/MacOS/TextInput
AND hidden = 0
 AND hidden_ancestor_count = 0
parent = %d
OR parent IN (SELECT folder_id FROM folder_ancestors WHERE ancestor_id = %d)
AND type = %d
(%@ %@) %@ %@
order_index ASC
%%%@%%
%@ AND %@
%@ ORDER BY %@
<%@:%p; customQuery = %@; query = "%@"; orderBy = "%@"; titleWordPrefixes = %@>
SELECT COUNT(*) FROM bookmarks WHERE %@
SELECT num_children FROM bookmarks WHERE id = %d
id NOT IN (%@)
id IN (%@)
%@ LIMIT ? OFFSET ?
((%@) OR url LIKE ?)
id IN (SELECT bookmark_id FROM bookmark_title_words WHERE word GLOB ?)
 AND id IN (SELECT bookmark_id FROM bookmark_title_words WHERE word GLOB ?)
(%@ AND %@) OR %@
(%@) OR %@
(%@ AND %@)
B32@?0@"NSString"8Q16^B24
hasMigrated
com.apple.WebBookmarks.WBTabCollection
parent = 0 AND syncable = 1 AND type = 1 AND hidden = 0 AND special_id = 0
@"WBTabGroup"16@?0@"WebBookmark"8
com.apple.Safari.%@.%p
@"WebBookmark"16@?0@"WBTab"8
com.apple.WebBookmarks.WebBookmarkReadonlyCollection.%@.%p.%@
InternalQueue
bookmarks.type,bookmarks.title,bookmarks.url,bookmarks.id,bookmarks.editable,bookmarks.deletable,bookmarks.hidden,bookmarks.parent,bookmarks.order_index,bookmarks.external_uuid,bookmarks.special_id,bookmarks.server_id,bookmarks.sync_key,bookmarks.sync_data,bookmarks.extra_attributes,bookmarks.local_attributes,bookmarks.fetched_icon,bookmarks.icon,bookmarks.locally_added,bookmarks.archive_status,bookmarks.syncable,bookmarks.web_filter_status, bookmarks.modified_attributes, bookmarks.last_selected_child
AND hidden = 0 
AND type = 1 
AND type = 0 
SELECT bookmarks.type, bookmarks.title, bookmarks.url, bookmarks.id, bookmarks.editable, bookmarks.deletable, bookmarks.hidden, bookmarks.parent, bookmarks.order_index, bookmarks.external_uuid, bookmarks.special_id, bookmarks.server_id, bookmarks.sync_key, bookmarks.sync_data, bookmarks.extra_attributes, bookmarks.local_attributes, bookmarks.fetched_icon, bookmarks.locally_added, bookmarks.archive_status, bookmarks.syncable, bookmarks.web_filter_status%@%@ FROM bookmarks WHERE parent = ? %@%@ORDER BY order_index ASC
, bookmarks.modified_attributes
, last_selected_child
bookmarks.read, bookmarks.deleted
IsFolder
UUID
IsEditable
IsDeletable
IsHidden
IsSyncable
IsLocallyAdded
SpecialID
OrderIndex
IsInserted
NeedsSyncUpdate
UsedForInMemoryChangeTracking
ServerID
Sync
SyncData
SyncMetadata
FetchedIconData
ArchiveStatus
WebFilterStatus
ExtraAttributes
LocalAttributes
LastSelectedChildID
WebsiteDataRecordDomain
WebsiteDataRecordUsage
Library/Preferences/com.apple.mobilesafari
Library/Safari
/var/mobile/Library/Safari/SafariTabsPPT.db
Tabs
Default
Production Safari
Safari Technology Preview
Safari Automation
BookmarkSync
CloudBookmarks
Cycler
DataMigration
ReadingList
ReadingListIcons
WebsiteData
WebBookmarkServer
CloudSettings
TabGroup
/file
Reader.webarchive
Page.webarchive
ReadingListArchiveStatusPending
ReadingListArchiveStatusCompleted
ReadingListArchiveStatusStandaloneMediaFile
ReadingListArchiveStatusRecoverableError
ReadingListArchiveStatusNonRecoverableError
ReadingListArchiveStatusOutsideFetchWindow
ReadingListArchiveStatusShouldArchive
DateLastFetched
ReadingListIconURL
DateLastArchived
NextPageURLs
LocalPreviewText
ReadingListIconUUID
HasFetchedMetadata
Icon
DateLastFetchedIcon
SafariDebugOverrideLaunchMode
lastSelectedTabUUID
tabs
type
tabGroup
@"WBTab"16@?0@"NSDictionary"8
dictionaryRepresentation
<html><body>
<h>%@</h>
<ul>
<li><a href='%@'>%@</a></li>
</ul>
</body></html>
@"NSUUID"16@?0@"WBTab"8
@"WBTab"16@?0@"NSOrderedCollectionChange"8
v32@?0@"WBTab"8Q16^B24
<%@: %p; identifier = %d; syncable = %@; title = %@; type = %ld; numberOfTabs = %lu; uuid = %@>
<%@: %p; identifier = %d; syncable = %@; type = %ld; numberOfTabs = %lu; uuid = %@>
@"NSString"16@?0@"WBTab"8
com.apple.mobilesafari.WebBoomarks.migration.markReadingListItemsForWebContentFilterTime
com.apple.mobilesafari.WebBoomarks.migration.vacuumTime
v32@?0@"WBReusableTabEntry"8Q16^B24
reusableTabManagerCleanupDelaySeconds
reusableTabManagerMaxAgeSeconds
LastChangeID
LastServerChangeToken
DidNotSaveRecordsAfterMigration
CloudBookmarkDatabaseSyncData
tab-group-container-bookmark
tab-group-container-bookmark-uuid
local and remote
local
v16@?0@"NSTimer"8
v16@?0q8
B32@?0@"WBTabGroup"8Q16^B24
B16@?0@"NSNotification"8
B32@?0@"WBTab"8Q16^B24
v32@?0@"WBTabGroup"8Q16^B24
v24@?0@"WebBookmarksXPCConnection"8@"NSObject<OS_xpc_object>"16
com.apple.SafariTabGroupSync.SyncDidFinish
syncResult
com.apple.WebBookmarks.%@.%p._tabProviderAccessQueue
uuid
com.apple.safarifetcherd
AddToReadingList
ClearAllCloudTabDevices
ClearCloudTabsForCurrentDevice
DidToggleCloudTabs
RegisterForReadingListFetcherUpdates
StartReadingListFetcher
UnregisterForReadingListFetcherUpdates
DidFinishFetching
DidUpdateProgress
DidStartFetchingItem
DidStopFetchingItem
ClearAllReadingListArchives
ClearReadingListArchive
GetSafariWebDatabaseUsage
DeleteSafariWebSecurityOrigin
DeleteAllSafariWebSecurityOrigins
DeleteSafariPersistentURLCacheStorage
GetSafariDataUsageSummary
ClearHSTSSuperCookies
ClearAllSafariHistory
ScheduleBookmarksDatabaseMaintenanceTask
ScheduleBookmarksDatabaseMigrationTask
Address
ClientBundleID
Enabled
Item
Progress
TerminateAfterUpdating
DataUsageSize
WebsiteDataAllRecords
WebsiteDataRecord
MessageReceivedAcknowledgement
PasswordIconsCleanup
Window
http:
https:
B24@?0Q8@"NSObject<OS_xpc_object>"16
v24@?0@"NSObject<OS_xpc_object>"8@"NSError"16
WebBookmarksXPCConnectionErrorDomain
v16@?0@"NSObject<OS_xpc_object>"8
com.apple.WebBookmarks.WebBookmarksXPCConnectionQueue
_name
version
com.apple.SecondaryBookmarks.lock
%@.db
com.apple.WebBookmarks.WBSettingsTaskHandler.%p
Received a vnode event for bookmarks metadata file
Posted bookmarks metadata file changed notification
Error reading bookmarks metadata file with code: %zd
Read device identifier: %{private}@ from bookmarks metadata file, readonly: %d
Failed to write bookmarks metadata file to %{public}@
Received bookmarks metadata file change distributed notification
Posting bookmarks metadata file change distributed notification
Failed to copy the background image over. Error: %{public}@
-> %s(database: %{public}@)
@@ %s: Unlocking bookmark database
@@ %s: Unlocking tabs database
## %s(deviceIdentifier: %@)
<- %s -> Return value redacted
-> %s()
<- %s -> database: NULL due to failure to obtain lock
@@ %s: Did successfully lock database
<- %s -> database: NULL due to failure to allocate WebBookmarkCollection
<- %s -> database: NULL due to not running in data access process with DAV enabled
<- %s -> database: %{public}@
-> %s(database: %{public}@, shouldSave: %d)
<- %s -> Return data of size: %{public}@
-> %s(database: %{public}@, data size: %{public}@)
<- %s -> %{public}@, %{public}@
-> %s(database: %{public}@, %{public}@)
XX %s: Client passed us a change token that does not match the current generation
XX %s: Could not clear the current change list
XX %s: Client requested that we remove the root folder
XX %s: Client requested that we remove item with server ID "%{public}@" but it does not exist
Deleting bookmark with ID %d and serverID %{public}@ from parent with ID %d
-> %s(item: %{public}@)
<- %s -> %{public}@
-> %s(item: %{public}@, %{public}@)
<- %s -> syncKey: %{public}@
-> %s(item: %{public}@, syncKey: %{public}@)
-> %s(item: %{public}@, data of size: %{public}@)
-> %s(change: %{public}@)
<- %s -> (null)
-> %s(%{public}@)
-> %s(folder: %{public}@)
-> %s(bookmark: %{public}@)
<- %s -> CKBABookmarkTypeReadingListItem
<- %s -> CKBABookmarkTypeRegular
-> %s(database: %{public}@, start version: %{public}@)
<- %s -> %s
<- %s -> %lld
-> %s(database: %{public}@, migration state: %lld)
-> %s(database: %{public}@, account hash: %{public}@)
XX %s: CKBALocalID is an instance of %{public}@
XX %s: Client requested server IDs of children of local ID "%{public}@" but it does not exist or is not a folder!
-> %s(database: %{public}@, item: %{public}@, parentSyncServerId: %{public}@)
@@ %s: Parent server ID %{public}@ does not point to any item in the local database
Item was merged with %{private}@
@@ %s: Record %{public}@ was insert in parent record with server ID %{public}@
@@ %s: Record %{public}@ did move to parent record with server ID %{public}@
@@ %s: Record %{public}@ is already inside parent record with server ID %{public}@
-> %s(database: %{public}@, mode: %ld)
-> %s(database: %{public}@, %{public}@, %{public}@)
-> %s(database: %{public}@, request before targetItemId: %{public}@)
-> %s(database: %{public}@, request after targetItemId: %{public}@)
-> %s(database: %{public}@, folderServerId: %{public}@)
<- %s -> %ld
-> %s(item: %{public}@, parentRecordName: %@)
<- %s -> NO
<- %s -> YES
-> %s(item1: %{public}@, item2: %{public}@)
<- %s -> %d
-> %s(database: %{public}@, folder type: %lld)
-> %s(database: %{public}@, bookmark type: %lld)
<- %s -> syncData %p of size: %ld
-> %s(change: %{public}@, syncData %p of size: %zd)
XX %s: Cannot set the sync data of a change that is not a Delete. Change type = %d, inserted = %d
XX %s: Cannot update the sync data of a Delete change that does exist in the database
## %s(%@)
## %s(attributes: %@)
@@ %s: Set title to value of length: %{public}@
@@ %s: Set title to value of length: (null)
@@ %s: Set last selected child ID to value of length: %{public}@
@@ %s: Set last selected child ID to null
<- %s
@@ %s: Set URL to value of length: %{public}@
@@ %s: Set URL to value of length: (null)
-> %s(item: %{public}@, key: %{public}@)
## %s(value: %@)
<- %s -> Return value redacted; length: %{public}@
Connection to TabGroups sync agent was invalidated
Failed to decode _WBBookmarkSyncDataForPositionDecoding with exception: %{public}@
Failed to decode WBBookmarkSyncData with exception: %{public}@
Deleting windows with condition: %@
Delete invalid window %lli %@
Delete window %lli %@
%i windows deleted using condition: %@
%@ with result: %d error: %{public}@
Attempted to save a nil window state
Local tab group on window state has no bookmark
Failed to save local tab group while trying to save window state
Private tab group on window state has no bookmark
Failed to save private tab group while trying to save window state
Attempted to delete a nil window state
Prepare statement failed (%i)
WebBookmarks could not start a deferred transaction; sleeping and trying again later
WebBookmarks still could not start a deferred transaction; sleeping longer
WebBookmarks could not start a deferred transaction; bailing. Error was: %{public}s
WebBookmarks could not start a deferred transaction; bailing. Result code was: %d
WebBookmarks could not start an immediate transaction; sleeping.
WebBookmarks could not start an immediate transaction; sleeping longer.
WebBookmarks could not start an immediate transaction; bailing. Error was: %{public}s
WebBookmarks could not start an immediate transaction; bailing. Result code was: %d
Updating changes from in memory identifier %ld to database identifier %ld
Error converting in-memory changes into plist data: %@{public}
Failed to persist in-memory bookmarks changes plist: %{public}@
Error converting plist data to dictionary: %{public}@
Persisted bookmark changes plist is corrupted
Cannot create a Reading List item. URLs must begin with http or https.
Failed to open tab database
Failed to acquire tab collection lock
Saving browser state: %{public}@
Deleting tab group: %{public}@
The group to delete was not found %{public}@
Inserting tab group: %{public}@ after tab group: %{public}@
Moving tab group: %{public}@ after tab group: %{public}@
The group to reorder was not found %{public}@
Saving tab group: %{public}@
Deleting tabs: %{public}@
Inserting tabs into %{public}@: %{public}@
The group to add the tab to was not found: %{public}@
Reordering tab: %{public}@ after tab: %{public}@
The tab to reorder was not found: %{public}@
Replacing tab: %{public}@ with tab: %{public}@
The tab to replace was not found: %{public}@
Saving tab: %{public}@
The tab to save was not found: %{public}@
Updating tabs: %{public}@ in tab group %{public}@
Closing window state: %{public}@
Deleting window state: %{public}@
Deleting window states: %{public}@
Saving window state: %{public}@
Failed to open Bookmarks database. Acquired sync lock: %d, error: %{public}@.
Couldn't create bookmarks database at %{public}@
Refusing to remove corrupted bookmarks database at %{public}@: The path appears to be a directory.
Refusing to remove corrupted bookmarks database at %{public}@: The file is not named %{public}@.
Still could not open bookmarks database: %{public}@
Could not open bookmarks database: %{public}@
Removing corrupted bookmarks database %{public}@
Corrupted bookmarks saved as %{public}@
Also removed the journal file %{public}@.
Failed to remove the journal file at %{public}@.
Also removed the wal file %{public}@.
Failed to remove the wal file %{public}@.
Also removed the shm file %{public}@.
Failed to remove the shm file %{public}@.
Could not remove bookmarks database %{public}@
A table is missing from bookmarks database. The database is corrupt.
Table %{public}@ is missing from bookmarks database
Skipping integrity check because database is busy or locked (sqlite code = %d)
sqlite3_prepare_v2 failed for integrity_check with error code %d
sqlite3_step failed for integrity_check with error code %d
sqlite integrity_check returned a NULL pointer
Failed to migrate from bookmarks plist at path %{public}@ sync anchor plist path %{public}@
Unable to initialize WebBookmarkCollection. Nil was returned from +initSafariBookmarkCollectionCheckingIntegrity:
Starting to migrate and clean up Reading List archives
Failed to migrate Reading List archives; couldn't reset record status.
Failed to migrate Reading List archives; couldn't update record status to "pending" (error code = %d)
Failed to remove Reading List archive directory %{public}@: %{public}@
Failed to get list of archive directories: %{public}@
Failed to remove Reading List archive directory with UUID %{public}@: %{public}@
Failed to remove reading list archive at path %{public}@: %{public}@
Migrating Reading List web filter status
Starting to mark all Reading List items as allowed by Web Content Filter
Finished marking all Reading List items as allowed by Web Content Filter
Failed to mark all Reading List items as allowed by Web Content Filter with result code: %i
Read Safari bookmarks
Could not apply in-memory changes to database
Could not open a write transaction
Failed to save bookmark with UUID %{public}@: %{public}@
Failed to save bookmark %{public}@: Write transaction isn't valid
_saveBookmark:withSpecialID:updateGenerationIfNeeded: failed
Starting Reading List fetcher when saving bookmark with UUID %{public}@
No BookmarkImages directory exists, but bookmark had an icon UUID
Failed to delete bookmark icon: %{public}@
Deleted bookmark icon successfully
Moving bookmark with identifier %ld and parent ID %d to folder with identifier %ld
Moving bookmark with ID %d and parent ID %d to index %d
Failed to acquire lock when saving offline Reading List archive
Saving offline Reading List archive for bookmark with UUID %{public}@
Creating a directory for Reading List icons failed: %{public}@
Saving Reading List icon failed: %{public}@
Saving a bookmark failed
Saving a previously deleted bookmark failed
Moving bookmark %d to folder %d failed
Update %zu bookmarks with folder ID %d. There are %zu current bookmarks, and %zu will be deleted
Failed to save bookmark during update with error: %@
Failed to save and move bookmark during update with error: %@
Failed to reorder bookmark during update with error: %@
Number of children mismatch detected for bookmark with id: %d, parent: %d, expected number of children: %d, actual: %d
Could not fix number of children of folder with id: %d, error: %d, %{public}s
Failed to create a fresh database because we failed to lock sync
Got nil local attributes dictionary: %{public}@
Got nil reading list attributes dictionary, creating one
Bookmarks database appears to have skipped migration steps. Rerunning migration.
Warning: The web bookmarks database has a greater version number than expected. Restoring a database from a newer version is not supported.
Failed to migrate schema because we failed to lock sync
Couldn't get current version of bookmarks database.
Failed to import bookmarks with plist path %{public}@
Failed to remove old bookmarks plist at path %{public}@. Error: %{public}@
Failed to remove bookmarks sync anchor plist at path %{public}@. Error: %{public}@
Cannot insert bookmark with local ID %d into itself
Cannot insert bookmark with ID %d into parent with ID %d since it is a descendent
Could not move record %{public}@ with localID: %ld, server ID: %{public}@, to parent %d, error: %d
Could not reorder records in previous parent %d, error: %d
Failed to clear local bookmark tombstones
Failed to clear sync server ids. Sqlite error: %d
Clearing all DAV sync data, likely because the user is logging out
Failed to mark bookmrks as added during clearing sync data. Sqlite error: %d
Deleted bookmark with ID %d from parent with ID %d
Could not delete records recursively starting with localID: %d, error: %d
Error reading bookmark attributes: %{public}@
Cannot save bookmark: failed to update order index of bookmarks during insertion (%i)
Cannot save bookmark: failed to get hidden ancestor count (%i)
Could not insert record with server ID: %{public}@ into parent with ID: %d, error: %d
Refusing to save a bookmark with no address
Crashing since we can't save a bookmark with no address. Please file a bug.
Failed to save bookmark %{public}@: Invalid parentID %d
Could not update cached child count for parent ID %d in direction: %d, error: %d
Could not delete ancestor table entries for record %d, error: %d
Failed to increment bookmarks generation. Sqlite error: %d
Handling bookmarks metadata file change notification
WebBookmarks sync is not posting a change notification because the collection is not dirty
%{public}@ Please file a bug citing the following caller:
Failed to merge bookmarks with dictionary. Bookmarks dictionary is %{public}@
Could not insert ancestor table entry %{public}@ for bookmark %d, error: %d
Could not recursively update ancestor table entries for bookmark %d, error: %d
Applying in-memory delete change for %{public}@
Applying in-memory add change for %{public}@
Applying in-memory modify change for %{public}@ from %{public}@
Applying in-memory move change for %{public}@
Applying in-memory reorder change for %{public}@ after %{public}@
Applying in-memory replace change for %zu bookmarks in folder %d
Adding bookmark in memory with identifier %ld to folder with identifier %ld
Device identifier is empty
Looking up migration state for device identifier %{private}@
Local migration state read from database %{public}@
Failed to save local migration state %{public}@ to database
Failed to delete local migration state from sync properties. Sqlite error: %d
Received com.apple.bookmarks.BookmarksFileChanged
Failed to mark special bookmarks. Sqlite error: %d
Failed to delete existing bokmarks as part of merging with new set of bookmarks. SQlite error: %d
Failed to build the database with new set of bookmarks during bookmark merge
Failed to calculate cached children count during bookmark merge. Sqlite error: %d
Failed to restore missing special bookmarks during bookmark merge
Failed to rebuild ancestor table during bookmark merge
Failed to set sync properties value for key %{private}@. Sqlite error: %d
Failed to set sync data for key %{public}@. Sqlite error: %d
Bookmarks failed to begin sync transaction with result code: %i. SQL Error: %{public}s
Bookmarks failed to begin sync transaction with result code: %i
%{public}@
Failed to open bookmarks sync lock file at: %{public}s
Process %{public}@ did fail to acquire lock: %{public}@ (%d)
Process %{public}@ did acquire lock: %{public}@
Postponing unlockSync. The process %{public}@ has requested to hold the lock
Process %{public}@ did release lock: %{public}@
Attempting to unlock sync since last requestor has unheld the lock in process %{public}@
Setting sync notification type: %ld
Request sync client trigger sync
Requesting a CloudKit bookmarks sync due to local changes
Could not construct WFUserSettings. Default values will be used
num_children for bookmark %i has an invalid value %i
Retrying to fetch count without using num_children %i
Unable to instantiate tab collection because the specified collection type is not of tabs
Failed to instantiate tab collection because we failed to lock sync
Failed to instantiate tab collection because the underlying collection failed to set up
Update %lu pinned tabs and %lu private pinned tabs
Error reading bookmark extra attributes: %{public}@
Error reading bookmark local attributes: %{public}@
Setting bookmark with identifier %ld as its own parent
Setting bookmark identifier to its parent identifier %ld
Sync agent failed to save browser state with error: %{public}@
Deleting tab group: %{private}@
Sync agent failed to delete tab group with error: %{public}@
Inserting tab group: %{private}@ after tab group: %{private}@
Sync agent failed to insert tab group with error: %{public}@
Moving tab group: %{private}@ after tab group: %{private}@
Sync agent failed to move tab group with error: %{public}@
Saving tab group: %{private}@
Sync agent failed to save tab group with error: %{public}@
Deleting tabs: %{private}@
Sync agent failed to delete tabs with error: %{public}@
Inserting tabs into %{private}@: %{private}@
Sync agent failed to insert tabs with error: %{public}@
Reordering tab: %{private}@ after tab: %{private}@
Sync agent failed to move tab with error: %{public}@
Replacing tab: %{private}@ with tab: %{private}@
Sync agent failed to replace tab with error: %{public}@
Saving tab: %{private}@
Sync agent failed to save tab with error: %{public}@
Updating tabs: %{private}@
Sync agent failed to update tabs with error: %{public}@
Sync agent failed to close window state with error: %{public}@
Sync agent failed to delete window state with error: %{public}@
Sync agent failed to delete window states with error: %{public}@
Sync agent failed to save window state with error: %{public}@
Setting ReadingList item bookmark archive status to %{public}@ for bookmark with UUID %{public}@
Error calculating directory size getting directory subpaths for offline reading list item at path: %{public}@
Failed to delete %{public}@: %{public}@
Deleted %{public}@ as a result of deleting the bookmark
setShouldArchive: setting ReadingList item bookmark archive status to ReadingListArchiveStatusShouldArchive for bookmark with UUID %{public}@
setShouldArchive: setting ReadingList item bookmark archive status to ReadingListArchiveStatusPending for bookmark with UUID %{public}@
Detected duplicated tabs: %@
All tabs: %@
Trying to create WBBookmarkDatabaseSyncData from data of size %lu
Successfully created WBBookmarkDatabaseSyncData
Failed to create WBBookmarkDatabaseSyncData with exception: %{public}@
Writing sync data of size %lu to database
Clearing %@ tab groups
Failed to acquire tab collection lock after backing off to a %f second wait. Giving up.
Failed to acquire tab collection lock. Retrying after %f seconds.
Triggering tab group sync
Sync agent reset sync data. Triggering another sync.
Sync finished but local migration has not completed. Waiting for migration to complete.
Sync agent finished syncing
Timed out waiting for sync agent to finish syncing
Beginning to observe Tab Group updates
Timed out while waiting for Tab Group updates
Received notification of Tab Group updates
Expected tab groups after update but none were found. Continuing to wait.
Reloading tab groups from database
Unable to read tab group changes after database update because the database cannot be opened
Sending XPC message to delete all Website data
Error encountered while delivering XPC message to delete all website data. Error: %{public}@
Received acknowledgement that XPC message was delivered to delete all website data
Error encountered while delivering XPC message to delete individual website data. Error: %{public}@
Received acknowledgement that XPC message was delivered to delete individual website data
Error encountered while delivering XPC message to delete persistent URL cache storage. Error: %{public}@
Received acknowledgement that XPC message was delivered to delete persistent URL cache storage
Error encountered while delivering XPC message to delete Safari's history. Error: %{public}@
Received acknowledgement that XPC message was delivered to delete Safari's history
WBDatabaseLockAcquisitor: releasing database lock
WBDatabaseLockAcquisitor: successfully acquired database lock
WBDatabaseLockAcquisitor: failed to acquire database lock
WebBookmarksXPCConnection: No handler registered for the message %{public}s.
Ignoring incoming message because the message is nil.
Ignoring incoming message because the message type is %{public}s
Not queueing settings task with type %ld since one has already been scheduled.
Attempting to perform a webbookmarksd settings task while there is no current task set
Dropping settings task with type %ld because maximum retry count exceeded
Performing settings task with type: %ld
Skipping task with type %ld due to incorrect arguments
Marking current task with type %ld as finished. Attempting next available task
Successfully performed settings task with type: %ld
Settings task with type %ld finished with a non-xpc error %{public}@
Received error while performing settings task with type: %ld, error: %{public}@
softlink:o:path:/System/Library/PrivateFrameworks/WebContentAnalysis.framework/WebContentAnalysis
softlink:o:path:/System/Library/PrivateFrameworks/TextInput.framework/TextInput
WebBookmarkDeviceIdentifier
BAChangeRecord
WBSettingsSyncEngineAccess
WBSSettingsSyncEngineAccess
NSObject
WebBookmarkCloudKitSyncCollection
WebBookmarkProductionSafariCloudKitSyncTabCollection
BABookmarkItem
WBBookmarkDBAccess
WBSBookmarkDBAccess
WBTabGroupSyncAgentProtocol
WBTabGroupSyncAgentProxy
WBTabGroupSyncAgentProxyProtocol
WBBookmarkSyncData
NSCopying
NSSecureCoding
NSCoding
_WBBookmarkSyncDataForPositionDecoding
WBNSErrorExtras
WebBookmarkInMemoryChangeFilterUnreadOnly
WebBookmarkInMemoryChangeFilter
WBDuplicateBookmarkGroup
WebBookmarkChange
WBChange
WBSerializable
WebBookmarkTabCollection
WebBookmarkProductionSafariTabCollection
WBBrowserState
WebBookmarkChangeSet
CloudTabServices
WBReadingListPrivate
WBReadingList
WBTabGroupSyncAgent
WebBookmark
WBTab
WebBookmarkCollection
WBDatabaseLockAcquisitorDelegate
WBBookmarkProvider
Sync
WebBookmarkCollectionSyncFlags
WebBookmarksExtras
WBWindowState
WebBookmarkList
Internal
WBReadonlyTabCollection
WBStateProvider
WBTabProvider
WebBookmarkWebFilterSettings
WebBookmarkTitleWordTokenizer
WebBookmarkListQuery
WBTabCollection
WebBookmarkReadonlyCollection
WBWebsiteDataRecord
WBSavedStateManager
WBCollectionConfiguration
WBBookmarksDatabaseHealthInformation
ReadingList
ReadingListArchives
ReadingListInternal
WBSettingsTask
WBFeatureManager
WBTabGroup
WBReusableTabEntry
WBReusableTabManager
NSCacheDelegate
WBTabGroupManagerObserver
WBBookmarkDatabaseSyncData
WBTabCyclerCommandHandler
WBSCyclerTestTarget
_WBTabCyclerTabGroupUpdateObserver
SafariFetcherServerProxy
WebBookmarksXPCConnectionDelegate
WBTabGroupManager
WBWindow
WBNSDictionaryExtras
WebBookmarksSettingsGateway
WBDatabaseLockAcquisitor
WebBookmarksXPCConnection
WebBookmarksXPCListener
WBLocalTabAttributes
WBInMemoryChangeFilterVisible
WebBookmarkSecondaryCollection
WBSettingsTaskHandler
init
stringWithFormat:
UTF8String
_setUpWithPlistURL:readOnly:queue:
_createOrLoadMetaData
_setListensForMetaDataChangeNotification:
dealloc
defaultCenter
_metaDataDidChange:
addObserver:selector:name:object:
removeObserver:name:object:
fileSystemRepresentation
_cancelMonitoringMetaDataFile
postNotificationName:object:
_resumeMonitoringMetaDataFile
dataWithContentsOfURL:options:error:
code
propertyListWithData:options:format:error:
wb_stringForKey:isValid:
initWithUUIDString:
UUIDString
mutableCopy
setObject:forKeyedSubscript:
writeToURL:atomically:
_postWebBookmarkMetaDataChangeDistributedNotification:
dictionaryWithContentsOfURL:
removeObjectForKey:
clearDeviceIdentifierWithPlistURL:
initWithPlistURL:readOnly:
UUID
encounteredErrorWhileObtainingUUID
stopObservingChanges
description
isReadOnly
setReadOnly:
_listensForMetaDataChangeNotification
.cxx_destruct
_plistURL
_UUID
_encounteredErrorWhileObtainingUUID
_queue
_fileMonitor
_readOnly
listensForMetaDataChangeNotification
TB,N,G_listensForMetaDataChangeNotification,S_setListensForMetaDataChangeNotification:,V_listensForMetaDataChangeNotification
T@"NSUUID",R,N
TB,R,N
readOnly
TB,N,GisReadOnly,V_readOnly
_attributesMarkedAsModified:
array
addObject:
count
componentsJoinedByString:
isFolder
_changedAttributeDescription
length
_changeTypeDescription
identifier
serverID
wb_stringByRedactingBookmarkDAVServerID
initWithBookmarkCollection:bookmark:changeType:
collection
bookmark
changeType
_collection
_bookmark
_changeType
T@"WebBookmarkCollection",R,N,V_collection
T@"WebBookmark",R,N,V_bookmark
Ti,R,N,V_changeType
isEqualToString:
isCustomizationSyncEnabled
syncEnabled
safari_isCloudBackgroundImageRecord
_updateStartPageBackgroundImageWithRecord:
safari_isCloudSettingRecord
recordID
recordName
_settingForValue:
_updateStartPageSectionOrder:
_updateStartPageSectionVisibilityWithIdentifier:record:
_didUpdateStartPageBackgroundImageVisibilityWithRecord:
defaultManager
safari_startPageBackgroundImageFileURL
removeItemAtURL:error:
safari_browserDefaults
postNotificationName:object:userInfo:deliverImmediately:
objectForKeyedSubscript:
fileURL
path
isReadableFileAtPath:
URLByDeletingLastPathComponent
safari_ensureDirectoryExists:
copyItemAtURL:toURL:error:
safari_privacyPreservingDescription
safari_encryptedValues
startPageSectionsManager
boolValue
setSectionIdentifier:enabled:
safari_boolForKey:defaultValue:
setBool:forKey:
allSections
containsObject:
enumerateObjectsUsingBlock:
copy
setObject:forKey:
enabledSectionIdentifiers
setWithArray:
indexSet
addIndex:
setSectionsIdentifiers:enabledIndexes:
arrayForKey:
sectionIdentifiers
numberWithBool:
_isShowBackgroundImageEnabled
_startPageSectionOrder
arrayWithObjects:count:
integerForKey:
objectForKey:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
didReceiveRemoteCloudSettingsUpdateWithRecord:
didDeleteRemoteRecordWithID:
syncSettingsUpDictionary
backgroundImageExists
backgroundImageAppearanceIsLight
T@"NSArray",R,N
_lazyStartPageSectionsManager
dictionaryWithObjects:forKeys:count:
unlockSyncAsynchronously
initWithBookmarkCollection:bookmark:
setBookmark:
T@"WebBookmark",&,N,V_bookmark
initWithCollectionType:storeOwner:
_deviceIdentifierForCloudKitWithCollectionType:generateIfNeeded:
_resetDeviceIdentifierForCloudKitWithCollectionType:
createDatabase
openDatabase:
saveDatabase:
closeDatabase:shouldSave:
copySyncDataWithDatabase:
setSyncData:database:
clearAllSyncDataWithDatabase:
copyChangesWithDatabase:changeToken:
clearChangesWithChangeToken:database:
removeItemWithServerId:database:
beginMergingChangesWithDatabase:
finishMergingChangesWithDatabase:
copyServerIdWithItem:
setServerId:item:
copyParentServerIdWithItem:
copySyncKeyWithItem:
setSyncKey:item:
copySyncDataWithItem:
setSyncData:item:
changeTypeForChange:
copyChangedItemWithChange:
copyServerIdWithChange:
changeIsDAVMoveChange:
itemTypeForChange:
bookmarkTypeForChange:
folderTypeForChange:
copyDeviceIdentifier
resetDeviceIdentifier
performMaintenanceOnDatabase:afterVersion:
createDatabaseWithoutLock
saveBackupOfDatabase:withName:
localCloudKitMigrationState:
setLocalCloudKitMigrationState:database:
copyAccountHashWithDatabase:
setAccountHash:database:
copyChangeTokenWithDatabase:
copyItemWithLocalID:database:
copyLocalIDsInFolderWithLocalID:database:
copyItemWithServerId:database:
addItem:underFolderWithServerId:database:
performDeduplicationWithDatabase:mode:
copyServerIdsInFolderWithServerId:database:
setChildrenOrder:forFolderWithServerId:database:
copyServerIdInFolderBeforeServerId:database:
copyServerIdInFolderAfterServerId:database:
copyFirstServerIdInFolderWithServerId:database:
copyLastServerIdInFolderWithServerId:database:
itemTypeWithItem:
item:isInFolderWithServerSyncId:
item:isEqualToItem:
folderTypeWithFolder:
createFolderWithType:database:
bookmarkTypeWithBookmark:
createBookmarkWithType:database:
changeIsMoveChange:
copyDeletedBookmarkSyncDataWithChange:
setDeletedBookmarkSyncData:change:
copyModifiedAttributesWithChange:
copyAttributesWithItem:
setModifiedAttributes:item:
copyValueForKey:item:
clearlAllLocalBookmarksForAutomatedTestingWithDatabase:
initWithCollectionType:
collectionType
storeOwner
_collectionType
_storeOwner
Tq,R,N,V_collectionType
Tq,R,N,V_storeOwner
mainBundle
bundleIdentifier
hasPrefix:
safariBookmarkCollectionConfiguration
safariTabCollectionConfiguration
setStoreOwner:
lockSync
initWithConfiguration:checkIntegrity:
initSecondarySafariBookmarkCollectionWithName:
unlockSync
_syncType
_needsDeduplicationForBookmarkDAVWithHomeURL:
beginSyncTransaction
_deduplicateBookmarksForBookmarkDAVWithHomeURL:
rollbackSyncTransaction
commitSyncTransaction
_postBookmarksDidReloadNotificationAndStartReadingListFetcherIfChangesWereMade
_restoreMissingSpecialBookmarksWithChangeNotification:
syncDataForKey:
numberWithUnsignedInteger:
numberWithLong:
setSyncData:forKey:
_clearAllDAVSyncData
_changeList
_DAVGeneration
initWithInt:
intValue
_clearChangeList
_bookmarkWithServerID:excludeDeletedBookmarks:
isReadingListItem
clearReadingListArchiveWithUUID:
isReadingListFolder
clearAllReadingListArchives
parentID
_deleteBookmark:leaveTombstone:
_setMergeMode:
isInserted
_setServerID:forBookmark:
setServerID:
_serverIDForBookmarkID:
syncKey
_setSyncKey:forBookmark:
setSyncKey:
syncData
_setSyncData:forBookmark:
setSyncData:
specialID
safari_isVersionStringGreaterThanVersionString:
safari_isVersionStringBetweenVersionString:andVersionString:
fixCachedNumberOfChildrenIfNeeded
_localMigrationState
_setLocalMigrationState:generateDeviceIdentifierIfNeeded:
_accountHash
_setAccountHash:
numberWithInt:
bookmarkWithID:
_syncableBookmarksIDsInFolderWithBookmarkID:
_bookmarkIDForServerID:excludeDeletedBookmarks:
isMerging
_bookmarkWithSpecialID:
title
_mergeMode
_mergeCandidateFolderWithTitle:parent:mergeMode:
address
_mergeCandidateBookmarkWithTitle:address:parent:mergeMode:
_mergeBookmark:withOriginalBookmark:prioritizeOriginalBookmarkAttributes:generateChangesIfNeeded:
_markBookmarkID:added:
_setParentID:
_saveBookmark:withSpecialID:updateGenerationIfNeeded:
extraAttributes
wb_boolForKey:
_updateSelectedFavoritesFolderWithBookmarkID:wasFavoritesFolder:isFavoritesFolder:
_moveBookmark:toFolderWithID:detectCycles:
_deduplicateBookmarksForSyncingAndTrackChanges:considerBookmarksWithSyncDataAsUnique:
_serverIDsInFolderWithServerID:excludeDeletedBookmarks:
countByEnumeratingWithState:objects:count:
_orderChildrenWithServerIDs:inFolderWithServerID:excludeDeletedBookmarks:
safari_mapObjectsUsingBlock:
_serverIDBeforeServerID:
_serverIDAfterServerID:
_firstServerIDInFolderWithServerID:
_lastServerIDInFolderWithServerID:
isEqualToBookmark:
initFolderWithParentID:
_markSpecial:
initWithTitle:address:
initReadingListBookmarkWithTitle:address:previewText:
dictionary
null
wb_numberForKey:
configuration
lastSelectedChildID
URLWithString:
dateAdded
dateLastViewed
previewText
readingListIconURL
initWithDictionary:copyItems:
allKeysForObject:
removeObjectsForKeys:
setTitle:
setLastSelectedChildID:
setExtraAttributes:
_markAttributesAsModified:
absoluteString
setAddress:
setDateAdded:
setDateLastViewed:
setPreviewText:
wb_URLForKey:isValid:
setReadingListIconURL:
mergeWithBookmarksDictionary:clearHidden:clearSyncData:error:
postBookmarksDidReloadNotification
initWithMachServiceName:options:
applyChangeSet:completionHandler:
scheduleSyncIfNeeded
saveBrowserState:completionHandler:
deleteTabGroup:completionHandler:
insertTabGroup:afterTabGroup:completionHandler:
moveTabGroup:afterTabGroup:completionHandler:
saveTabGroup:completionHandler:
deleteTabs:completionHandler:
insertTabs:inTabGroup:afterTab:completionHandler:
reorderTab:afterTab:completionHandler:
replaceTab:withTab:completionHandler:
saveTab:completionHandler:
updateTabs:inTabGroup:completionHandler:
closeWindowState:completionHandler:
deleteWindowState:completionHandler:
deleteWindowStates:completionHandler:
saveWindowState:completionHandler:
interfaceWithProtocol:
setClasses:forSelector:argumentIndex:ofReply:
setRemoteObjectInterface:
setInvalidationHandler:
resume
invalidate
synchronousRemoteObjectProxyWithErrorHandler:
remoteObjectProxy
emptyChangeSetCompletionHandler
scheduleSendBarrierBlock:
emptyCompletionHandler
sharedProxy
applyChangeSet:canSafelyTerminateCompletionHandler:
saveBrowserState:canSafelyTerminateCompletionHandler:
T@"WBTabGroupSyncAgentProxy",R,N
_connection
integerValue
initForReadingFromData:error:
setClass:forClassName:
decodeObjectOfClass:forKey:
position
name
finishDecoding
initRequiringSecureCoding:
encodeObject:forKey:
encodedData
safari_initWithEncodedRecordData:
decodeObjectOfClasses:forKey:
decodeIntegerForKey:
safari_encodedSystemFieldsData
encodeInteger:forKey:
encodedBookmarkSyncData
syncDataWithContentsOfData:
dictionaryRepresentation
safari_dictionaryForKey:
initWithDictionaryRepresentation:
isValid
generationForKey:
incrementedGenerationWithDeviceIdentifier:
dictionaryWithObject:forKey:
supportsSecureCoding
positionFromContentsOfData:
copyWithZone:
encodeWithCoder:
initWithCoder:
TB,R
positionDictionaryRepresentation
setPositionDictionaryRepresentation:
hasGenerationForKey:
setGeneration:forKey:
incrementGenerationForKey:withDeviceIdentifier:
clearAllGenerationsExceptState
record
setRecord:
state
setState:
setPosition:
minimumAPIVersion
setMinimumAPIVersion:
modifiedAttributeMask
setModifiedAttributeMask:
_generations
_extraPositionData
_record
_state
_position
_minimumAPIVersion
_modifiedAttributeMask
T@"NSData",R,C,N
T@"CKRecord",&,N,V_record
Tq,N,V_state
T@"WBSCRDTPosition",&,N,V_position
TQ,N,V_minimumAPIVersion
T@"NSDictionary",C,N
TQ,N,V_modifiedAttributeMask
T@"WBSCRDTPosition",R,N,V_position
errorWithDomain:code:userInfo:
domain
wb_privacyPreservingDescription
wb_databaseOpenError
wb_featureDisabledError
wb_lockError
modifiedBookmarksInBookmarkFolder:
_bookmarksIDsFromBookmarks:fromChangeSet:withFilter:
changes
replayChangesOnBookmark:
attributesMarkedAsModify:
allObjects
bookmarkIDsModifiedInMemoryPassingFilterFromChangeSet:inFolder:
bookmarkIDsModifiedInMemoryNotPassingFilterFromChangeSet:inFolder:
shouldIncludeBookmarkAddedInMemory:
removeAllObjects
initWithOriginalBookmark:
duplicates
duplicatesToKeep
addDuplicateBookmark:replaceOriginal:
addDuplicateBookmarkToKeep:
exchangeOriginalBookmarkWithBookmark:
removeAllDuplicates
originalBookmark
foundDuplicates
_dupicateBookmarks
_dupicateBookmarksToKeep
_foundDuplicates
_originalBookmark
T@"WebBookmark",R,N,V_originalBookmark
TB,R,N,V_foundDuplicates
initWithBookmark:bookmarkID:parentID:changeType:
initWithBookmark:bookmarkID:parentID:associatedBookmarkID:changeType:
initWithBookmarks:parentID:changeType:
initWithBookmarks:specialFolderID:changeType:
initWithBookmarks:parentID:specialFolderID:changeType:
_setUsedForInMemoryChangeTracking:
_setModifiedAttributesIfSupported
wb_numberForKey:isValid:
wb_dictionaryForKey:isValid:
initWithDictionaryRepresentationForInMemoryChangeTracking:
wb_arrayForKey:isValid:
safari_mapAndFilterObjectsUsingBlock:
encodeInt32:forKey:
dictionaryRepresentationForInMemoryChangeTracking
encodeInt64:forKey:
decodeInt32ForKey:
decodeInt64ForKey:
setSpecialFolderID:
setModifiedAttributes:
setBookmarks:
localAttributes
setLocalAttributes:
numberWithInteger:
numberWithUnsignedLongLong:
valueForKey:
isSyncable
_stringForType:
bookmarkAddChangeWithBookmark:
bookmarkModifyChangeWithBookmark:
deleteChangeWithBookmark:
moveChangeWithBookmark:toFolderWithID:
reorderChangeWithBookmark:afterBookmark:
replaceChangeWithBookmarks:inFolderWithID:
replaceChangeWithBookmarks:inFolderWithSpecialID:
T@"NSDictionary",R,C,N
updateChangeAfterUpdatingInMemoryID:withDatabaseID:
shouldSync
Tq,R,N
initWithBookmarkID:parentID:changeType:
initWithBookmarkID:parentID:associatedBookmarkID:changeType:
applyModificationsToBookmark:
bookmarkID
setBookmarkID:
setParentID:
associatedBookmarkID
setAssociatedBookmarkID:
specialFolderID
modifiedAttributes
bookmarks
_bookmarkID
_parentID
_associatedBookmarkID
_specialFolderID
_modifiedAttributes
_bookmarks
Ti,N,V_bookmarkID
Ti,N,V_parentID
Ti,N,V_associatedBookmarkID
Ti,N,V_specialFolderID
Tq,R,N,V_changeType
TQ,N,V_modifiedAttributes
T@"NSArray",C,N,V_bookmarks
safariDirectoryPath
stringByAppendingPathComponent:
fileURLWithPath:
_trackChangesInMemoryIfDatabaseWriteIsNotAllowed
inMemoryChangesFileURL
initWithFileURL:
_createSchema
createWindowsTable
createWindowsTabGroupsTable
_executeSQL:
_executeSQLWithCString:
_createSpecialTabsFolderWithUUIDIfNeeded:
_createSpecialFolderWithIDIfNeeded:
_deleteMatchingWindows:logAsError:
_fastFetchBookmarksInBookmarkFolder:options:offset:limit:
_deleteBookmarks:leaveTombstone:
performDatabaseUpdatesWithTransaction:secureDelete:
vacuum
truncateWAL
uuid
sceneID
initWithUUID:sceneID:
tabs
_resetBookmark:
localTabGroup
privateTabGroup
setTabs:
activeTabGroupUUID
bookmarkWithUUID:
tabGroupForBookmark:
setActiveTabGroup:
tabGroupsToActiveTabs
safari_dictionaryByMergingWithDictionary:
activeTabUUIDForTabGroupWithUUID:
setActiveTabUUID:forTabGroupWithUUID:
saveWindow:
activeTabGroup
initWithUUID:activeTabGroupUUID:localTabGroup:privateTabGroup:sceneID:windowID:
windowStateWithUUID:
saveWindowState:
_uuidForQueries:
removeAllChanges
applyInMemoryChangesToDatabase
windows
_deleteAllWindowStates
_fastFetchBookmarksInBookmarkFolder:includingHiddenBookmarks:
_migrateWindow:
_logErrorWithMessage:result:
listWithID:
bookmarkArray
initWithBookmark:
tabsForTabGroupBookmark:
safari_firstObjectPassingTest:
initWithBookmark:tabs:lastSelectedTabUUID:
_errorForMostRecentSQLiteError
_setInserted:
_setID:
_setOrderIndex:
windowsFolderSpecialID
listWithSpecialID:
_windowWithBookmark:
listWithID:skipOffset:includeHidden:
objectAtIndexedSubscript:
setType:
bookmarkWithID:includingInMemoryChanges:
initWithBookmark:activeTabGroup:localTabGroup:privateTabGroup:
_windowStatesWithFilter:
firstObject
_windowIDForUUID:
_tabGroupWithID:
_addActiveTabsToWindowState:
_saveAndMoveBookmark:toFolderID:
_updateBookmarks:inFolderWithID:
performDatabaseUpdatesWithTransaction:applyInMemoryChanges:secureDelete:
dateClosed
timeIntervalSinceReferenceDate
_saveWindowState:forApplyingInMemoryChanges:
_saveWindowState:
_saveWindowState:activeTabGroupID:localTabGroupID:privateTabGroupID:
setIdentifier:
_saveActiveTabID:inTabGroupWithID:windowID:
enumerateKeysAndObjectsUsingBlock:
date
setDateClosed:
_deleteWindowState:forApplyingInMemoryChanges:
_deleteWindowState:
windowStates
_specialTabFolderUUIDsForQueries
_databaseTitleForSpecialID:
_specialTabFolderUUIDs
_setUUID:
_setSyncable:
_specialTabsWithUUID:
_syncLockFileName
inMemoryChangeSet
_setupInMemoryChangeSet
performMaintenance
_migrateWindowState:
_migrateSchemaVersion43ToVersion44
_migrateSchemaVersion44ToVersion45
logRegulatoryBookmarksRead
maintainsSyncMetadata
windowWithUUID:
lastClosedWindowState
lastSessionWindowStates
recentlyClosedWindowStates
deleteAllWindows
closeWindowState:
deleteWindowState:
deleteWindowStates:
deleteAllWindowStates
_deleteAllLocalTabsAndGroups
_markTabsClosed:
_markWindowStatesAsLastSession:
pinnedTabs
pinnedTabsFolderID
privatePinnedTabs
privatePinnedTabsFolderID
recentlyClosedTabs
recentlyClosedTabList
_cachedPinnedTabsFolderID
_cachedPrivatePinnedTabsFolderID
T@"NSArray",R,C,N
Ti,R,N
T@"WebBookmarkList",R,C,N
T@"WBWindowState",R,N
initWithPinnedTabs:privatePinnedTabs:windows:
initWithPinnedTabs:privatePinnedTabs:windowStates:
setPinnedTabs:
setPrivatePinnedTabs:
setWindows:
setWindowStates:
_pinnedTabs
_privatePinnedTabs
_windows
_windowStates
T@"NSArray",C,N,V_pinnedTabs
T@"NSArray",C,N,V_privatePinnedTabs
T@"NSArray",C,N,V_windows
T@"NSArray",C,N,V_windowStates
callStackSymbols
initWithFileURL:readPersistedChanges:
orderedSet
_readPersistedChanges
addChanges:
safari_containsObjectPassingTest:
_addChange:
_coalesceChangesForChangeIfNeeded:
_removeChange:
removeObject:
_removeAllChanges
insertObject:atIndex:
safari_insertObject:afterObject:
addObjectsFromArray:
dataWithPropertyList:format:options:error:
writeToURL:options:error:
nextBookmarkIDForAddingBookmarkInMemory
addChange:
removeChange:
bookmarksAfterReplayingChangesToBookmarks:inFolderWithID:
isBookmarkDeleted:
deletedBookmarkIDsInBookmarkFolder:
addedBookmarksInBookmarkFolder:
numberOfAddedBookmarksInBookmarkFolder:
numberOfReorderedBookmarksInBookmarkFolder:
folderHasReplaceChange:
updateAddChangesWithInMemoryBookmarkID:toDatabaseGeneratedID:
bookmarkIsAddedInMemory:
applyModificationsToBookmarks:
persistChangesWithCompletion:
_lastBookmarkIDForAddingInMemoryBookmark
_changes
_bookmarkIDToChanges
_associatedIDToChanges
_folderIDToChildrenChanges
_folderIDToDeletedChildrenChanges
_folderIDToAddedChildrenChanges
_folderIDToModifiedChildrenChanges
_folderIDToReorderedChildrenChanges
_fileURL
T@"NSURL",R,C,N,V_fileURL
initClientForMachService:
_serverConnection
messageWithName:
sendMessage:
didToggleCloudTabs:terminateAfterUpdating:
clearAllCloudTabDevices
clearTabsForCurrentDevice
didToggleCloudTabs:
_trimmedTitle:
_trimmedPreviewText:
sharedFeatureManager
isOfflineReadingListAvailable
startReadingListFetcher
_addReadingListItemWithURL:title:previewText:
_webBookmarks_isHTTPFamilyURL
_init
exceptionWithName:reason:userInfo:
supportsURL:
defaultReadingList
T@"WBReadingList",R,N
addReadingListItemWithURL:title:previewText:error:
_private
_serialQueue
initWithConfiguration:
applyInMemoryChanges:
error
tabWithUUID:
adoptAttributesFromTab:
initWithUUID:title:url:
setSyncable:
saveBrowserState:
_performOnTabCollectionQueue:scheduleSync:completionHandler:
privacyPreservingDescription
tabGroupWithUUID:
deleteTabGroup:
insertTabGroup:afterTabGroup:
moveTabGroup:afterTabGroup:
lastSelectedTabUUID
setLastSelectedTabUUID:
saveTabGroup:
deleteTabs:
insertTabs:inTabGroup:afterTab:
reorderTab:afterTab:
replaceTab:withTab:
saveTab:
_readPropertiesOfBookmark:
updateTabs:inTabGroup:
_applyChangeSet:completionHandler:
tabCollection
setTabCollection:
_configuration
_tabCollection
T@"WBCollectionConfiguration",R,N,V_configuration
T@"WBTabCollection",&,N,V_tabCollection
initWithTitle:address:parentID:
_uniqueExternalUUID
setValue:forKey:
initBuiltinDeviceBookmarkWithTitle:address:
string
shortTypeDescription
appendFormat:
descriptionPreservingPrivacy:
wb_bestURLForUserTypedString
isEqualToDictionary:
initBuiltinBookmarkWithTitle:address:
initCarrierBookmarkWithTitle:address:
initWhiteListBookmarkWithTitle:address:
initFrequentlyVisitedSiteWithWebBookmark:title:
localizedTitle
isBookmarksBarFolder
isBookmarksMenuFolder
isWebFilterWhiteListFolder
isFrequentlyVisitedSitesFolder
isBuiltinBookmark
isEditable
isDeletable
isHidden
needsSyncUpdate
setNeedsSyncUpdate:
fetchedIconData
setFetchedIconData:
iconData
setIconData:
_folder
_title
_url
_serverID
_syncKey
_syncData
_syncMetadata
_editable
_deletable
_hidden
_syncable
_fetchedIconData
_iconData
_addedLocally
_archiveStatus
_webFilterStatus
_extraAttributes
_localAttributes
_specialID
_lastSelectedChildID
_orderIndex
_inserted
_needsSyncUpdate
_usedForInMemoryChangeTracking
TB,N,V_needsSyncUpdate
T@"NSString",C,N,V_title
T@"NSString",C,N,V_url
Ti,R,N,V_parentID
Ti,R,N,V_id
T@"NSString",R,C,N,V_UUID
Ti,R,N,V_specialID
Ti,N,V_lastSelectedChildID
editable
TB,R,N,GisEditable,V_editable
deletable
TB,R,N,GisDeletable,V_deletable
hidden
TB,R,N,GisHidden,V_hidden
folder
TB,R,N,GisFolder,V_folder
inserted
TB,R,N,GisInserted,V_inserted
syncable
TB,R,N,GisSyncable,V_syncable
TB,N,V_fetchedIconData
T@"NSData",C,N,V_iconData
T@"NSDictionary",C,N,V_extraAttributes
T@"NSDictionary",C,N,V_localAttributes
T@"NSString",R,C,N
setUrl:
setModified:
allocWithZone:
type
initWithString:
safari_isHTTPFamilyURL
_addressFromURL:
tabGroup
initWithUUID:
initWithTitle:url:
isPrivateTab
syncableURL
setTabGroup:
isIdentical:
duplicate
didAddToTabGroup:
didRemoveFromTabGroup:
markClean
isEmpty
wasModified
wasAdded
setAdded:
wasMoved
setMoved:
_modified
_added
_moved
_tabGroup
modified
TB,N,GwasModified,V_modified
added
TB,N,GwasAdded,V_added
moved
TB,N,GwasMoved,V_moved
T@"WBLocalTabAttributes",&,N
TB,N,GisSyncable
T@"WBTabGroup",W,N,V_tabGroup
T@"NSString",C,N
T@"NSURL",&,N
T@"NSURL",R,N
_isDatabaseWriteAllowed
initWithWebBookmarkCollectionClass:
setDelegate:
_openDatabaseAtPath:checkIntegrity:error:
isLockedSync
fileExistsAtPath:isDirectory:
_defaultDatabaseFileNameForCollectionType:
_primaryCollection
lastPathComponent
isReadonly
setHandler:
_removeCorruptedBookmarksDatabaseAtPath:
userInfo
syncSetString:forKey:
skipsExternalNotifications
_registerForSyncBookmarksFileChangedNotification
_metaDataFileChanged:
stringByAppendingPathExtension:
_web_pathWithUniqueFilenameForPath:
moveItemAtPath:toPath:error:
_web_removeFileOnlyAtPath:
stringByAppendingString:
fileExistsAtPath:
_userVersion
_enableForeignKeys
_enableAutoVacuum
_createFreshDatabase
_errorForMostRecentSQLiteErrorWithErrorCode:
_verifyAllTablesExist:
_checkDatabaseIntegrity
_migrateToCurrentSchema
initWithUTF8String:
databasePath
stringByResolvingSymlinksInPath
databasePathForConfiguration:
_setupWithPath:migratingBookmarksPlist:syncAnchorPlist:checkIntegrity:
_setupWithPath:checkIntegrity:
_migrateBookmarksPlist:syncAnchorPlist:
initWithCollectionType:databasePath:readonly:
objectAtIndex:
readingListArchivesDirectoryPath
enumeratorAtPath:
attributesOfItemAtPath:error:
fileSize
contentsOfDirectoryAtPath:error:
readingListFolderBookmarkID
archiveStatus
removeItemAtPath:error:
_safariFetcherServerProxy
sharedWebFilterSettings
userSettings
_readingListItemsWhere:filteredBy:withInMemoryFilter:
contentFilterOverridesEnabled
whiteListEnabled
markWebContentFilterAllowsAllReadingListItems
contentFilterListsAllowURL:
setWebFilterStatus:
saveBookmark:startReadingListFetcher:
initWithFormat:
initWithBookmarksWhere:orderBy:usingFilter:
initWithQuery:skipOffset:collection:
bookmarkCount
initWithCalendarIdentifier:
setDay:
dateByAddingComponents:toDate:options:
compare:
purgeableReadingListItems
archiveSize
setArchiveStatus:
setDateLastArchived:
saveBookmark:
clearArchiveSynchronously
createIfNeeded
_simulateCrashWithDescription:
_inMemoryChangeSet
_selectBookmarksWhere:
_finalizeStatementIfNotNull:
_initWithSqliteRow:
appendString:
isWebFilterWhiteListOnlyModeEnabled
rootBookmark
subarrayWithRange:
lastObject
descendantsOfBookmarkFolder:
bookmarkContainsLeafBookmark:
_intFromExecutingSQL:
listWithID:skipOffset:
listWithID:skipOffset:includeHidden:includeDescendantsAsChildren:filteredUsingString:
initWithFolderID:inCollection:usingFilter:options:
readingListWithUnreadOnly:filteredUsingString:
insertString:atIndex:
initWithBookmarksWhere:folderID:orderBy:usingFilter:
setInMemoryFilter:
favoritesFolder
webFilterWhiteListFolderBookmarkID
arrayWithObject:
frequentlyVisitedSitesFolderBookmarkID
_webBookmarks_hasCaseInsensitivePrefix:
_parentIdentifiersOfBookmarksNeedingIcons
_specialIDForBookmarkBeingSaved:
_postBookmarksChangedSyncNotification
_postBookmarksSpecialFoldersDidChangeNotification
unsignedIntValue
_postBookmarksFolderContentsDidChangeNotification:
_saveBookmark:startReadingListFetcher:forApplyingInMemoryChanges:
_startReadingListFetcher
_deleteBookmark:postChangeNotification:forApplyingInMemoryChanges:
readingListIconUUID
bookmarkImagesDirectoryPath
_incrementGeneration
deleteBookmark:postChangeNotification:
clearArchive
_deleteIconForBookmark:
_moveBookmark:toFolderWithID:
_moveBookmark:toIndex:
_reorderBookmark:toIndex:
_generateSyncPositionForBookmark:
syncMetadata
_saveSyncMetadataForBookmarkIfNeeded:
moveBookmark:toIndex:
bookmarkAtIndex:
_moveBookmarkAtIndex:toIndex:
setShouldArchive:
saveBookmarks:postNotification:
setReadingListIconUUID:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
writeToFile:options:error:
moveBookmark:toFolderWithID:
_bookmarkUUIDsInFolderWithID:
safari_splitArrayUsingCondition:
first
second
orderedSetWithArray:
indexOfObject:
safari_longestIncreasingSubsequenceUsingValues:
orderIndexOfBookmark:
_reorderBookmark:afterBookmark:
characterAtIndex:
stringWithString:
stringWithCharacters:length:
replaceCharactersInRange:withString:
rangeOfString:options:
_normalizeSearchString:
_enumerateBookmarksForMatchStatement:normalizedQuery:usingBlock:
_web_possibleURLPrefixesForUserTypedString
_addBookmarksForReadingListMatchStatement:normalizedQuery:toArray:maxResults:
sortUsingComparator:
arrayWithCapacity:
removeObjectsInRange:
_firstBookmarkWithURLMatchingString:prefixMatch:inParent:
readingListWithUnreadOnly:
_reverseOrderIndex:
stringValue
_postBookmarksDidReloadNotification
_tableExpressionForArchiveMode:
_orderedWhereClauseForArchiveMode:automaticArchivingEnabled:
_selectBookmarksWhere:returnType:
_orderedWhereClauseForArchiveMode:
isFullArchiveAvailable
rollingListOfArchivedReadingListItems
_cullReadingListBookmarksList:toSize:
_bookmarkHasSyncedToServer:
_clearAndCreateBookmarksTables
_clearAndCreateAncestorTable
_clearAndCreateBookmarksTitleWordTable
_indexAllTitleWords
_normalizeDatabaseURLs
_rebuildAncestorTable
dateWithTimeIntervalSince1970:
initWithObjects:forKeys:
deleteAllFavoriteIcons
markAllFavoritesAsNeedingIcons
writeToFile:atomically:
_migrateSchemaVersion3ToVersion4
_migrateSchemaVersion4ToVersion5
_migrateSchemaVersion5ToVersion6
_migrateSchemaVersion6ToVersion7
_migrateSchemaVersion7ToVersion8
_migrateSchemaVersion8ToVersion9
_migrateSchemaVersion9ToVersion10
_migrateSchemaVersion10ToVersion11
_migrateSchemaVersion11And12And13ToVersion14
_migrateSchemaVersion14ToVersion15
_migrateSchemaVersion15ToVersion16
_migrateSchemaVersion16AndVersion17AndVersion18ToVersion19
_migrateSchemaVersion21ToVersion22
_migrateSchemaVersion22ToVersion23
_migrateSchemaVersion23ToVersion24
_migrateSchemaVersion24ToVersion25
_migrateSchemaVersion0ToVersion1
_migrateSchemaVersion1And2ToVersion3
_migrateSchemaVersion19And20ToVersion21
_migrateSchemaVersion25ToVersion26
_migrateSchemaVersion26ToVersion27
_migrateSchemaVersion27ToVersion28
_migrateSchemaVersion28ToVersion29
_migrateSchemaVersion29ToVersion30
_migrateSchemaVersion30ToVersion31
_migrateSchemaVersion31ToVersion32
_migrateSchemaVersion32ToVersion33
_migrateSchemaVersion33ToVersion34
_migrateSchemaVersion34ToVersion35
_migrateSchemaVersion35ToVersion36
_migrateSchemaVersion36ToVersion37
_migrateSchemaVersion37ToVersion38
_migrateSchemaVersion38ToVersion39
_migrateSchemaVersion39Or40ToVersion41
_migrateSchemaVersion41ToVersion42
_migrateSchemaVersion42ToVersion43
_rerunMigrationsIfNecessary
_importBookmarksPlist:
_importSyncAnchorPlist:
_insertAncestorTableEntriesForBookmarkID:withAncestorIDs:
_restoreBookmarkBarIfMissing
_restoreOrMergeReadingListFolderWithChangeNotification:
restoreOrMergeWhiteListFolderAndContentsWithChangeNotification:
frequentlyVisitedSitesFolderCreatingIfNeeded:postChangeNotification:
stringWithUTF8String:
initWithDomain:code:userInfo:
_orderIndexForBookmarkInsertedIntoParent:insertAtBeginning:
_updateCachedChildCountForParentID:inDirection:
_clearSyncKeysUnderBookmarkID:isFolder:
_insertTombstoneWithServerID:syncData:
_deleteAncestorTableEntriesForBookmarkID:
_insertAncestorTableEntriesForBookmarkID:withParentID:
bytes
_clearAllSyncKeys
_clearAllTombstones
_isTombstoneWithServerID:
_insertTombsonesRecursivelyForRootFolder:
_deleteRecursively:descendantsOnly:
_insertTombsonesRecursivelyHelperCurrentDepth:folder:
isAddedLocally
webFilterStatus
_specialIDForBookmarkTitle:
_childrenOfParentBookmarkAreUnsyncable:
_addBookmarkWithTitle:address:parentID:orderIndex:isFolder:externalUUID:associatedBookmark:updateParentChildCount:updateAncestorEntries:
_setHidden:
_updateHiddenAncestorCountForBookmarksUnderFolderID:addingOffset:
_markBookmarkID:withSpecialID:
_reindexBookmarkID:title:
_wb_stringByStandardizingDAVServerID
cStringUsingEncoding:
_serverIDOfSiblingBookmarkWithServerID:immediatelyBeforeOrAfter:
_firstOrLastServerIDInFolderWithServerID:isFirst:
_cloudKitSyncMetadataFileNameWithCollectionType:
setSyncMetadata:
removeObjectAtIndex:
reverseObjectEnumerator
_unsafeOrderChildrenWithServerIDs:inFolderWithServerID:excludeDeletedBookmarks:
setString:
advanceToNextToken
_clearTitleWordsForBookmarkID:
_indexBookmarkID:title:
initWithCString:encoding:
_collectChangesOfType:withClause:intoArray:
_incrementDAVGeneration
_updateSyncNotificationType
_setSyncNotificationType:
postNotificationName:object:userInfo:
setFavoritesFolderIdentifier:postChangeNotification:
syncStringForKey:
bookmarksBarBookmark
_favoritesFolderIdentifier
frequentlyVisitedSitesFolderCreatingIfNeeded:
dictionaryWithContentsOfFile:
mergeWithBookmarksDictionary:clearHidden:error:
whiteListAllowedSites
_restoreOrMergeWhiteListFolderAndContentsWithWebFilterWhiteList:ensureChildCount:postChangeNotification:
webFilterWhiteListFolder
_ensureFolderChildrenCount:
webFilterWhiteList
removeObjectsAtIndexes:
arrayByAddingObject:
folderID
_fastFetchBookmarksInBookmarkFolder:options:offset:limit:includingInMemoryChanges:
_initWithSqliteRow:hasIcon:
initWithTopLevelDuplicateBookmarksCount:allDuplicateBookmarksCount:
safari_isSafariFamilyApplicationBundle
_createInMemoryChangeSet
_applyInMemoryChanges:postChangeNotification:
_applyInMemoryChange:fromChangeSet:updatedBookmarks:
releaseLock
_deleteBookmarkInMemory:
acquireLockWithTimeout:
_enumerateContentsOfBookmarkFolder:includingSubfolders:usingBlock:
deduplicateBookmarksWithRootFolder:depth:
_deduplicateBookmarksWithRootFolder:depth:trackChanges:considerBookmarksWithSyncDataAsUnique:davHomeURL:
dataRepresentation
initWithDataRepresentation:relativeToURL:
_appendDuplicateBookmarkGroupsInBookmarks:toGroups:considerBookmarksWithSyncDataAsUnique:davHomePath:
_bookmark:hasCurrentDAVHomePath:
_deleteAndRebuildAncestorTableRecords
_recalculateCachedChildrenCountAndOrderIndices
_fetchBookmarkIDsInFolder:onlyFolders:includingHiddenBookmarks:
safari_isSpecialFolderRecordName
_bookmark:isDuplicateOfBookmark:
_bookmark:hasPriorityOverBookmarkForDeduplication:prioritizeBookmarksWithSyncData:davHomePath:
addEntriesFromDictionary:
cleanUpRedundantPreviewText
favoritesFolderSelectionShouldSync
_deviceIdentifierForCloudKitWithCollectionType:
_syncSetString:forKey:updatedExistingKey:
nextDatabaseSyncChangeID
positionBetweenPosition:andPosition:withDeviceIdentifier:changeID:
databaseSyncDataWithContentsOfData:
databaseSyncData
nextChangeID
encodedDatabaseSyncData
isSyncAllowed
readingListArchivesDiskUsage
safariBookmarkCollection
databaseLockAcquisitor:acquiredLock:
enumerateBookmarks:andReadingListItems:matchingString:usingBlock:
bookmarksMatchingString:
readingListBookmarksMatchingString:maxResults:onlyArchivedBookmarks:
databaseHealthInformation
leafChildCountForBookmarksInFolderWithID:
leafChildCountForFoldersInFolderWithID:
T@"WebBookmarkChangeSet",R,N
T@"WebBookmarkCollection",R,N
TQ,R,N
initWithPath:migratingBookmarksPlist:syncAnchorPlist:
cleanUpReadingListArchives
markArchivedReadingListItemsAsNonRecoverable
updateReadingListWebFilterStatusForUnsetItemsOnly:
localeSettingsChanged
purgeableSpace
purge:
validBookmarkUUIDsFromUUIDs:
readingListFolder
bookmarkAtPath:
subfoldersOfID:
parentIdentifierOfBookmark:
modifiedAttributesOfBookmark:
identifierOfBookmarkWithUUID:
rootList
bookmarksBarList
shouldFetchIconForBookmark:
bookmarksNeedingIcons
deleteBookmarks:postChangeNotification:
deleteBookmark:
reorderBookmark:toIndex:
reorderList:moveBookmarkAtIndex:toIndex:
saveArchiveForReadingListBookmarkWithID:
saveArchivesForReadingListBookmarks:
deleteArchiveForReadingListBookmarkWithID:
saveIconWithData:urlString:forBookmark:
saveAndMoveBookmark:toFolderID:
_saveAndMoveBookmarks:toFolderID:
updateBookmarks:inFolderWithID:secureDelete:
_prefixSearch:usingColumns:maxCount:
_bookmarksFromStatementSelectingIDs:withQuery:
firstReadingListBookmarkWithURLMatchingString:prefixMatch:
indexOfReadingListBookmark:countingOnlyUnread:
countReadingListBookmarksNeedingArchiveInMode:automaticArchivingEnabled:
countReadingListBookmarksNeedingArchiveInMode:
firstReadingListBookmarkNeedingArchiveInMode:automaticArchivingEnabled:
firstReadingListBookmarkNeedingArchiveInMode:
readingListBookmarksNeedingArchiveInMode:automaticArchivingEnabled:
readingListBookmarksNeedingArchiveInMode:
rollOutLastReadingListItem
rollOutReadingListItemIfNeededToMakeRoomForOneNewItem
rollingReadingListMaximumCount
clearCarrierBookmarks
migrateReadingListIconsFromDatabaseToBookmarkImagesDirectory
_rootFolderHiddenChildrenClause
_sqliteStatementWithQuery:
_sqliteStatementWithQuery:runInBlock:
_syncKeysForServerIDs:
_serverIDAtOrderIndex:inFolderWithServerID:
_clearCachedFavoritesFolderIdentifier
setFavoritesFolder:localOnly:
favoritesFolderList
bookmarkIsFavoritesFolder:
bookmarkIsInFavoritesFolder:
frequentlyVisitedSitesFolder
frequentlyVisitedSitesList
clearFrequentlyVisitedSitesFolder
bookmarkIsFrequentlyVisitedSite:
fastFetchBookmarksInBookmarkList:
_fastFetchBookmarksInBookmarkFolder:includingInMemoryChanges:
hasInMemoryChanges
deleteBookmarkInMemory:
deleteBookmarksInMemory:inFolder:
addBookmarkInMemory:toFolderWithID:
modifyBookmarkInMemory:
moveBookmarkInMemory:toFolderWithID:
reorderBookmarkInMemory:afterBookmark:
replaceBookmarksInMemory:inFolderWithID:
deduplicateBookmarks
_usesCloudKit
_test_preventPeriodicallyApplyingInMemoryChangesToDatabase
test_restoreMissingSpecialBookmarks
_locale
_wordTokenizer
_rootBookmark
_dirty
_setupFinished
_databaseLockAcquisitor
_lastObservedLocalMigrationState
merging
TB,R,N,GisMerging
T@"WebBookmark",R,N
T@"WebBookmarkList",R,N
T@"NSNumber",R,C,N
substringToIndex:
timeIntervalSince1970
_addChildrenOfID:toCollection:recursive:error:
_bookmarkDictionaryForSqliteRow:recursive:error:
_syncAdd:toParent:withOrderIndex:error:
_mergeChildrenOfID:referencingBase:error:
_markSpecialBookmarks
_deleteSyncPropertyForKey:
_syncPropertyExistsForKey:
dataWithBytes:length:
_isLockedSync
_syncFlags
syncLockFileDescriptor
_lockSync
setUnlockSyncRequested:
setSyncLockFileDescriptor:
_unlockSync
lockSyncHoldRequestorPointers
postSyncNotificationWhenUnlocking
_postBookmarksChangedSyncNotificationOnSyncQueue
setPostSyncNotificationWhenUnlocking:
valueWithPointer:
unlockSyncRequested
setSyncNotificationType:
syncAllowed
syncNotificationType
userDidUpdateBookmarkDatabase
initWithSyncAllowed:
bookmarksDictionary
removePersistedInMemoryBookmarkChangesFile
generation
containsOnlyStockBookmarks
_cloudKitLocalMigrationState
holdLockSync:
unholdLockSync:
TB,R,D,N
_syncAllowed
_postSyncNotificationWhenUnlocking
_unlockSyncRequested
_syncLockFileDescriptor
_syncNotificationType
_lockSyncHoldRequestorPointers
TB,R,N,V_syncAllowed
Ti,N,V_syncLockFileDescriptor
Tq,N,V_syncNotificationType
TB,N,V_postSyncNotificationWhenUnlocking
T@"NSMutableSet",R,N,V_lockSyncHoldRequestorPointers
TB,N,V_unlockSyncRequested
strongToStrongObjectsMapTable
componentsWithString:
_wb_stringByDeletingTrailingSlash
hasSuffix:
safari_stringByRedactingBookmarkDAVServerID
safari_bestURLForUserTypedString
_web_bestURLForUserTypedString
safari_stringForKey:
setTabGroupsToActiveTabs:
decodeIntForKey:
encodeInt:forKey:
safari_numberForKey:
safari_dateForKey:
timeIntervalSinceNow
distantFuture
safari_boolForKey:
initWithDictionaryRepresentation:localTabGroup:privateTabGroup:
customUnifiedFieldText
isFavoritesBarHidden
isMinimized
isPopupWindow
prefersSidebarVisible
isPrivateWindow
isTabBarHidden
removeActiveTabUUIDForTabGroupWithUUID:
removeAllActiveTabUUIDs
setActiveTabGroupUUID:
setSceneID:
_tabGroupsToActiveTabs
_identifier
_activeTabGroupUUID
_dateClosed
_localTabGroup
_privateTabGroup
_sceneID
_uuid
Ti,N,V_identifier
T@"NSString",C,N,V_activeTabGroupUUID
T@"NSDate",&,N,V_dateClosed
T@"WBTabGroup",R,N,V_localTabGroup
T@"WBTabGroup",R,N,V_privateTabGroup
T@"NSString",C,N,V_sceneID
T@"NSDictionary",C,N,V_tabGroupsToActiveTabs
T@"NSString",R,C,N,V_uuid
initWithBytes:length:
_bookmarkAtIndex:paginate:
isCustomQuery
bookmarksInCollection:fromIndex:toIndex:
_loadBookmarksForDifferenceFromList:
_arrayForDifferenceCalculation
differenceFromArray:withOptions:
bookmarkArrayRequestingCount:
differenceFromList:withOptions:
_bookmarkCount
_skipOffset
_query
TI,R,N
countInCollection:
readonlySafariTabCollectionConfiguration
hasCompletedMigration
isPersistent
browserState
lastSessionBrowserState
tabGroups
tabsForTabGroup:
maximumTabsPerGroup
setMaximumTabsPerGroup:
TQ,N
completedMigration
TB,R,N,GhasCompletedMigration
persistent
TB,R,N,GisPersistent
T@"WBBrowserState",R,N
initWithUserName:
restrictionType
T@"WebBookmarkWebFilterSettings",R,N
reloadSettings
isWebFilterEnabled
_userSettings
T@"WFUserSettings",R,N
webFilterEnabled
TB,R,N,GisWebFilterEnabled
webFilterWhiteListOnlyModeEnabled
TB,R,N,GisWebFilterWhiteListOnlyModeEnabled
currentHandler
handleFailureInFunction:file:lineNumber:description:
setString:withSearchRange:
longCharacterIsMember:
initialize
_string
_stringLength
_rangeOfNextToken
_startOfUnclassifiedRangeBeforeNextToken
addCharactersInRange:
_normalizeUserTypedString:
_preparePrefixesFromNormalizedString:
_childCountInDatabaseForFolderFetchInCollection:skipCountingInDatabaseBookmarksThatAreDeletedInMemory:countShouldUseNumChildrenIfPossible:
_listQueryType
_sqliteNotInConditionForInMemoryModifiedAndDeleted:bookmarksInFolder:collection:
_sqliteInConditionForInMemoryModifiedBookmarksInFolder:collection:
_filterBookmarks:
_childCountInDatabaseForFolderFetchInCollection:skipCountingInDatabaseBookmarksThatAreDeletedInMemory:
_inMemoryAddedChildrenCountForBookmarkFolder:collection:skipCountingBookmarksThatAreDeletedInMemory:
safari_filterObjectsUsingBlock:
substringWithRange:
inMemoryFilter
_queryWithOrderBy
_orderBy
_titleWordPrefixes
_titleWordPrefixesForInMemoryFiltering
_urlFilter
_includeHidden
_countShouldUseNumChildrenIfPossible
_includeDescendantsAsChildren
_customQuery
_folderID
_inMemoryFilter
customQuery
TB,R,N,GisCustomQuery,V_customQuery
Ti,R,N,V_folderID
T@"<WebBookmarkInMemoryChangeFilter>",&,N,V_inMemoryFilter
whitespaceAndNewlineCharacterSet
formUnionWithCharacterSet:
punctuationCharacterSet
componentsSeparatedByCharactersInSet:
indexOfObjectPassingTest:
_createInternalQueue
isInMemoryDatabase
_updatePinnedTabs:privatePinnedTabs:
_bookmarksForTabs:
truncateToNumberOfTabs:
_deleteTabGroup:leaveTombstone:
isPrivate
_insertBookmark:afterBookmark:inFolderWithID:
_reorderTab:afterTab:
_bookmarksForTabs:syncable:
initWithTabCollection:
setCompletedMigration:
deleteAllLocalSavedState
saveRecentlyClosedTabs:
deleteAllRecentlyClosedTabs
insertTab:inTabGroup:afterTab:
_resultOnInternalQueue:
_internalQueue
_maximumTabsPerGroup
T@"WebBookmarkTabCollection",R,N,V_collection
T@"WBCollectionConfiguration",R,N
TB,N,GhasCompletedMigration
T@"NSError",R,N
TQ,N,V_maximumTabsPerGroup
readonlySafariBookmarkCollectionConfiguration
initReadonlySafariBookmarkCollection
decodeBoolForKey:
initWithArray:
encodeBool:forKey:
numberWithUnsignedInt:
isEqualToData:
T@"NSData",C,N
T@"WBBookmarkSyncData",&,N
_initWithDomain:
_initWithDomain:usage:
websiteDataRecordWithDomain:
websiteDataRecordFromXPCDictionary:
XPCDictionaryRepresentation
usage
setUsage:
_domain
_usage
T@"NSObject<OS_xpc_object>",R,C,N
T@"NSString",R,C,N,V_domain
TQ,N,V_usage
applicationProxyForIdentifier:placeholder:
dataContainerURL
_web_createDirectoryAtPathWithIntermediateDirectories:attributes:
initWithTabGroupSyncAgentProxy:
_isDatabaseEnabled
allTabs
ephemeralManager
T@"WBSavedStateManager",R,N
updateTabsInTabGroup:
tabGroupSyncAgentProxy
isEphemeral
_isEphemeral
_tabGroupSyncAgentProxy
T@"<WBTabGroupSyncAgentProxyProtocol>",R,N,V_tabGroupSyncAgentProxy
TB,R,N,V_isEphemeral
initWithCollectionType:databasePath:readonly:createIfNeeded:
setSkipsExternalNotifications:
inMemoryBookmarkCollectionConfiguration
inMemoryTabCollectionConfiguration
pptTabCollectionConfiguration
_isReadonly
_createIfNeeded
_skipsExternalNotifications
_databasePath
TB,R,N,V_isReadonly
TB,R,N,V_createIfNeeded
T@"NSString",R,C,N,V_databasePath
TB,N,V_skipsExternalNotifications
Tq,N,V_storeOwner
topLevelDuplicateBookmarksCount
allDuplicateBookmarksCount
_topLevelDuplicateBookmarksCount
_allDuplicateBookmarksCount
TQ,R,N,V_topLevelDuplicateBookmarksCount
TQ,R,N,V_allDuplicateBookmarksCount
_readingListPropertyNamed:
_modifyExtraReadingListAttributes:
_stringForReadingListArchiveStatus:
_modifyLocalReadingListAttributes:
isEqualToDate:
localPreviewText
stringByTrimmingCharactersInSet:
stringByReplacingOccurrencesOfString:withString:options:range:
setAddedLocally:
dateLastArchived
dateLastFetched
setDateLastFetched:
setTitle:previewText:dateLastFetched:
setNextPageURLs:
nextPageURLs
setLocalPreviewText:
hasFetchedMetadata
setHasFetchedMetadata:
addedLocally
TB,N,GisAddedLocally
Tq,N
T@"NSDate",&,N
TB,N
_wb_userVisibleString
fileType
subpathsOfDirectoryAtPath:error:
_sizeForFileOrDirectory:withAttributes:
_removeDirectoryAtPath:
webarchivePathInReaderForm:fileExists:
webarchivePathForNextPageURL:
offlineArchiveDirectoryPath
shouldReattemptArchiveWithAutomaticArchivingEnabled:
shouldArchive
fullArchiveAvailable
TB,R,N,GisFullArchiveAvailable
initWithType:websiteDataRecord:
taskWithType:
taskForDeletingIndividualWebsiteDataWithRecord:
taskType
websiteDataRecord
_taskType
_websiteDataRecord
Tq,R,N,V_taskType
T@"WBWebsiteDataRecord",R,N,V_websiteDataRecord
_updateToAccessLevel:
T@"WBFeatureManager",R,N
accessLevel
_offlineReadingListAvailable
_favoritesFolderSelectionShouldSync
_accessLevel
Tq,R,N,V_accessLevel
offlineReadingListAvailable
TB,R,N,GisOfflineReadingListAvailable,V_offlineReadingListAvailable
TB,R,N,V_favoritesFolderSelectionShouldSync
sharedConnection
isEphemeralMultiUser
setHidden:
initWithTitle:uuid:
initWithBookmark:tabs:lastSelectedTabUUID:type:
safari_arrayForKey:
stringWithCapacity:
arrayByAddingObjectsFromArray:
isEqualToArray:
insertions
object
associatedIndex
removals
isLocal
insertTabs:afterTab:
removeTabs:
safari_insertObjects:afterObject:
removeObjectsInArray:
replaceObjectAtIndex:withObject:
safari_allObjectsPassTest:
initWithTitle:
displayTitle
htmlString
tabsUUIDSet
tabsAreIdentical:
appendTab:
appendTabs:
clearTabs
insertTab:afterTab:
removeTab:
updateTab:
clearDeletedTabs
detectDuplicatedTabs
displayTitleProvider
setDisplayTitleProvider:
deletedTabs
_tabs
_overflowRemoteTabs
_deletedTabs
_displayTitleProvider
_lastSelectedTabUUID
_type
Ti,N
T@"NSArray",R,C,N,V_deletedTabs
T@?,C,N,V_displayTitleProvider
T@"NSString",C,N,V_lastSelectedTabUUID
T@"NSArray",C,N
Tq,N,V_type
T@"NSSet",R,N
sharedAggregateDictionary
incrementKey:
setValue:forScalarKey:
initWithReusableTab:
reusableTab
dateCreated
_reusableTab
_dateCreated
T@"<WBReusableTab>",R,N,V_reusableTab
T@"NSDate",R,N,V_dateCreated
setCountLimit:
tabGroupManager
addTabGroupObserver:
_scheduleCleanup
_cleanUp
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
allGroupsTabsUUIDs
_addTabUUIDsFromGroup:toSet:
evictFromTabReuse
sharedManager
cache:willEvictObject:
tabGroupManagerDidFinishSetup:
tabGroupManagerDidUpdateTabGroups:
tabGroupManager:didRemoveTabGroup:
tabGroupManager:didUpdateTabGroup:
tabGroupManager:didUpdateTabsInTabGroup:
tabGroupManager:didUpdateTab:userDriven:
T@"WBReusableTabManager",R,N
addReusableTab:
reuseTabForUUID:
isTabSuspended:
_referenceToTabWithUUID:
enumerateReusableTabs:
_uuidToTabCache
_reusing
_cleanupTimer
_pendingCleanup
T@"NSSet",R,C,N
floatForKey:
archivedDataWithRootObject:requiringSecureCoding:error:
databaseSyncDataInDatabase:databaseAccessor:
writeToDatabase:databaseAccessor:
lastServerChangeToken
setLastServerChangeToken:
didNotSaveRecordsAfterMigration
setDidNotSaveRecordsAfterMigration:
_lastChangeID
_didNotSaveRecordsAfterMigration
_lastServerChangeToken
T@"CKServerChangeToken",C,N,V_lastServerChangeToken
TB,N,V_didNotSaveRecordsAfterMigration
initWithNotificationName:
initWithTitle:uniqueIdentifier:
_cyclerRepresentationOfTabGroup:
addChild:
_clearRemoteTabGroupsWithCompletionHandler:
_clearLocalTabGroupsWithCompletionHandler:
_clearLocalTabGroupsWithCompletionHandler:retryCooldown:
timerWithTimeInterval:repeats:block:
mainRunLoop
addTimer:forMode:
_startMonitoringTabGroupUpdateExpectingMigration:completionHandler:
_reloadTabGroupsFromDatabase
_startMonitoringSyncStatusWithCompletionHandler:
removeTabGroup:
_tabGroupBeforeIndex:
_tabBeforeIndex:inGroup:
_tabGroupWithIdentifier:
_deleteTabGroup:reply:
_tabWithIdentifier:
_deleteTab:reply:
_setTitle:forTabGroup:reply:
_setTitle:forTab:reply:
_triggerTabGroupSync
setNotificationHandler:
setTimeoutHandler:
waitWithTimeout:
observeTabGroupManager:waitForTabGroups:handler:
_cyclerRepresentationOfTab:
initWithURL:title:uniqueIdentifier:
fetchTopLevelBookmarkList:
clearBookmarksWithOptions:completionHandler:
createBookmarkWithTitle:url:inListWithIdentifier:atIndex:reply:
createBookmarkListWithTitle:inListWithIdentifier:atIndex:reply:
deleteBookmarkWithIdentifier:reply:
moveBookmarkWithIdentifier:intoListWithIdentifier:atIndex:reply:
setTitle:forBookmarkWithIdentifier:reply:
setURL:forBookmarkWithIdentifier:reply:
syncBookmarksWithCompletionHandler:
initWithTabGroupManager:
_tabGroupUpdateObserver
_syncAgentNotificationObserver
_clearLocalTabGroupsRetryTimer
_tabGroupManager
T@"WBTabGroupManager",R,N,V_tabGroupManager
initWithTabGroupManager:handler:
startObserving
_timeout
removeTabGroupObserver:
_handler
_timeoutTimer
_waitForTabGroups
didFinishFetching
setHandler:forMessageNamed:
didUpdateProgressWithMessage:
didStartFetchingReadingListItemWithMessage:
didStopFetchingReadingListItemWithMessage:
bookmarksServerProxy:didStartFetchingReadingListItem:
bookmarksServerProxy:didStopFetchingReadingListItem:
bookmarksServerProxy:didUpdateReadingListFetchingProgress:
bookmarksServerProxyDidFinishFetching:
connection:didCloseWithError:
delegate
_delegate
T@"<WebBookmarksClientDelegateProtocol>",W,N,V_delegate
weakObjectsPointerArray
_readTabGroups
_tabGroupSyncDidFinish:
notifyDidFinishSetup
notifyDidUpdateTabGroups
notifyDidRemoveTabGroup:
notifyDidUpdateTabGroup:
notifyDidUpdateTab:userDriven:
notifyDidUpdateTabsInTabGroup:
_compareInMemoryTabGroups:withTabGroups:
addPointer:
compact
removePointerAtIndex:
initWithTabProvider:savedStateManager:
tabProvider
_groups
_observers
_savedStateManager
_tabProviderAccessQueue
_tabProvider
T@"<WBTabProvider>",R,N,V_tabProvider
initWithUUID:activeTabGroup:localTabGroup:privateTabGroup:sceneID:
updateActiveTabGroup
_updateExtraAttributesUsingBlock:
_activeTabGroup
T@"WBTabGroup",&,N,V_activeTabGroup
T@"NSString",R,N
wb_objectOfType:forKey:isValid:
wb_dateForKey:isValid:
sendMessage:withReplyHandler:
getSafariWebDataUsageWithCompletion:
deleteAllSafariSecurityOriginsWithCompletionHandler:
deleteSafariWebsiteDataRecord:completionHandler:
deleteSafariPersistentURLCacheStorageWithCompletionHandler:
getSafariDataUsageByteCountWithCompletionHandler:
clearAllSafariHistoryWithCompletionHandler:
scheduleBookmarksDatabaseMaintenance
scheduleBookmarksDatabaseMigrationTask
scheduleHSTSSuperCookieCleanup
schedulePasswordIconsCleanup
acquireLockWithTimeout:retryInterval:
_attemptToLockSyncAndNotifyDelegateOnFailure:
_startTimerWithTimeout:retryInterval:
_stopTimer
_retryTimerFired:
_timer
_webBookmarkCollectionClass
_lockAcquired
_maxRetryCount
_retryCount
T@"<WBDatabaseLockAcquisitorDelegate>",W,N,V_delegate
_handleMessage:
initWithConnection:
setMessageHandlers:
hasBoolEntitlement:
connection
_messageHandlers
_entitlementLookupCache
_connectionQueue
T@"NSObject<OS_xpc_object>",R,N,V_connection
T@"<WebBookmarksXPCConnectionDelegate>",W,N,V_delegate
_handleIncomingConnection:
initListenerForMachService:
_listenerConnection
_clientConnections
unsignedIntegerValue
decodeDoubleForKey:
initWithVersion:safeToLoadWebPage:lastVisitTime:sessionStateData:ancestorTabUUIDs:dateClosed:tabIndex:windowUUID:disposable:pinned:pinnedPageURL:pinnedPageTitle:muted:queuedNavigation:displayingStandaloneImage:readerViewTopScrollOffset:readingListBookmarkID:openedFromLink:showingReader:
encodeDouble:forKey:
safari_arrayContainingObjectsOfClass:forKey:
safari_dataForKey:
doubleValue
safari_originalDataAsString
numberWithDouble:
initWithLastVisitTime:sessionStateData:ancestorTabUUIDs:displayingStandaloneImage:readerViewTopScrollOffset:readingListBookmarkID:openedFromLink:showingReader:queuedNavigation:
isDisplayingStandaloneImage
readerViewTopScrollOffset
readingListBookmarkID
wasOpenedFromLink
isShowingReader
isSafeToLoadWebPage
lastVisitTime
sessionStateData
ancestorTabUUIDs
isDisposable
isPinned
pinnedPageURL
pinnedPageTitle
isMuted
queuedNavigation
tabIndex
windowUUID
_displayingStandaloneImage
_openedFromLink
_showingReader
_isSafeToLoadWebPage
_isDisposable
_isPinned
_isMuted
_readingListBookmarkID
_readerViewTopScrollOffset
_lastVisitTime
_sessionStateData
_ancestorTabUUIDs
_pinnedPageURL
_pinnedPageTitle
_queuedNavigation
_tabIndex
_windowUUID
displayingStandaloneImage
TB,R,N,GisDisplayingStandaloneImage,V_displayingStandaloneImage
Td,R,N,V_readerViewTopScrollOffset
Ti,R,N,V_readingListBookmarkID
openedFromLink
TB,R,N,GwasOpenedFromLink,V_openedFromLink
showingReader
TB,R,N,GisShowingReader,V_showingReader
TB,R,N,V_isSafeToLoadWebPage
T@"NSDate",R,C,N,V_lastVisitTime
T@"NSData",R,C,N,V_sessionStateData
T@"NSArray",R,C,N,V_ancestorTabUUIDs
T@"NSDate",R,C,N,V_dateClosed
TB,R,N,V_isDisposable
TB,R,N,V_isPinned
T@"NSURL",R,C,N,V_pinnedPageURL
T@"NSString",R,C,N,V_pinnedPageTitle
TB,R,N,V_isMuted
T@"NSDictionary",R,C,N,V_queuedNavigation
TQ,R,N,V_tabIndex
T@"NSString",R,N,V_windowUUID
isBookmarkVisible:
_enqueueTask:
_shouldEnqueueTask:
_performNextTask
_attemptCurrentTask
_finishCurrentTask
_currentTaskAttemptDidFinishWithError:
enqueueTask:
startBackgroundTaskAssertionBlock
setStartBackgroundTaskAssertionBlock:
finishBackgroundTaskAssertionBlock
setFinishBackgroundTaskAssertionBlock:
_tasks
_currentTask
_currentRetryCount
_settingsGateway
_backgroundTaskAssertionToken
_startBackgroundTaskAssertionBlock
_finishBackgroundTaskAssertionBlock
T@?,C,N,V_startBackgroundTaskAssertionBlock
T@?,C,N,V_finishBackgroundTaskAssertionBlock
v24@0:8@16
@28@0:8@16B24
v36@0:8@16B24@28
v16@0:8
v20@0:8B16
@16@0:8
B16@0:8
@"NSURL"
@"NSUUID"
@"NSObject<OS_dispatch_queue>"
@"NSObject<OS_dispatch_source>"
@36@0:8@16@24i32
i16@0:8
@"WebBookmarkCollection"
@"WebBookmark"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v24@0:8@"CKRecord"16
v24@0:8@"CKRecordID"16
@"NSArray"16@0:8
q24@0:8@16
v32@0:8@16@24
@"WBSStartPageSectionManager"
@32@0:8@16@24
r^v16@0:8
v24@0:8r^v16
v28@0:8r^v16B24
r^{__CFData=}24@0:8r^v16
v32@0:8r^{__CFData=}16r^v24
r^{__CFArray=}32@0:8r^v16r^^v24
v32@0:8r^v16r^v24
v32@0:8r^{__CFString=}16r^v24
r^{__CFString=}24@0:8r^v16
i24@0:8r^v16
r^v24@0:8r^v16
B24@0:8r^v16
q24@0:8r^v16
B32@0:8r^v16@24
v32@0:8r^v16@24
v32@0:8q16r^v24
@24@0:8r^v16
v32@0:8@16r^v24
r^v32@0:8@16r^v24
@32@0:8@16r^v24
B40@0:8r^v16@24r^v32
v32@0:8r^v16q24
v40@0:8@16@24r^v32
B32@0:8r^v16r^v24
r^v32@0:8q16r^v24
B32@0:8r^v16@"NSString"24
v32@0:8r^v16@"NSString"24
@"NSData"24@0:8r^v16
v32@0:8@"NSData"16r^v24
@"NSSet"32@0:8@16r^v24
r^v32@0:8@"NSString"16r^v24
B40@0:8r^v16@"NSString"24r^v32
@"NSSet"32@0:8@"NSString"16r^v24
v40@0:8@"NSArray"16@"NSString"24r^v32
@"NSString"32@0:8@"NSString"16r^v24
@"NSDictionary"24@0:8r^v16
v32@0:8@"NSDictionary"16r^v24
@32@0:8@"NSString"16r^v24
@24@0:8q16
@32@0:8q16q24
v24@0:8^v16
v28@0:8^v16B24
r^{__CFData=}24@0:8^v16
v32@0:8^{__CFData=}16^v24
r^{__CFArray=}32@0:8^v16r^^v24
v32@0:8^v16^v24
v32@0:8^{__CFString=}16^v24
r^{__CFString=}24@0:8^v16
i24@0:8^v16
r^v24@0:8^v16
B24@0:8^v16
q24@0:8^v16
B32@0:8^v16@24
v32@0:8^v16@24
v32@0:8q16^v24
@24@0:8^v16
v32@0:8@16^v24
r^v32@0:8@16^v24
@32@0:8@16^v24
B40@0:8^v16@24^v32
v32@0:8^v16q24
v40@0:8@16@24^v32
B32@0:8^v16^v24
r^v32@0:8q16^v24
q16@0:8
v32@0:8@16@?24
v40@0:8@16@24@?32
v48@0:8@16@24@32@?40
v32@0:8@"WebBookmarkChangeSet"16@?<v@?B@"NSArray"@"NSError">24
v32@0:8@"WBBrowserState"16@?<v@?B@"NSError">24
v32@0:8@"WBTabGroup"16@?<v@?B@"NSError">24
v40@0:8@"WBTabGroup"16@"WBTabGroup"24@?<v@?B@"NSError">32
v32@0:8@"NSArray"16@?<v@?B@"NSError">24
v48@0:8@"NSArray"16@"WBTabGroup"24@"WBTab"32@?<v@?B@"NSError">40
v40@0:8@"WBTab"16@"WBTab"24@?<v@?B@"NSError">32
v32@0:8@"WBTab"16@?<v@?B@"NSError">24
v40@0:8@"NSArray"16@"WBTabGroup"24@?<v@?B@"NSError">32
v32@0:8@"WBWindowState"16@?<v@?B@"NSError">24
v32@0:8@"WebBookmarkChangeSet"16@?<v@?>24
v32@0:8@"WBBrowserState"16@?<v@?>24
@?16@0:8
@"NSXPCConnection"
@24@0:8@16
@24@0:8^{_NSZone=}16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
v24@0:8q16
v24@0:8Q16
@"NSMutableDictionary"
@"NSDictionary"
@"CKRecord"
@"WBSCRDTPosition"
@28@0:8@16i24
@"NSArray"28@0:8@"WebBookmarkChangeSet"16i24
B24@0:8@"WebBookmark"16
@40@0:8@16@24@?32
v28@0:8@16B24
@"NSMutableArray"
@24@0:8@"NSDictionary"16
@"NSDictionary"16@0:8
v24@0:8i16i20
@36@0:8@16i24q28
@40@0:8@16i24i28q32
@32@0:8i16i20q24
@36@0:8i16i20i24q28
@44@0:8@16i24i28i32q36
B24@0:8Q16
v20@0:8i16
@"NSArray"
B20@0:8B16
B28@0:8@16B24
@20@0:8i16
v28@0:8@16i24
i24@0:8@16
B36@0:8@16i24i28i32
B28@0:8i16i20i24
@40@0:8@16@24@32
B20@0:8i16
Q20@0:8i16
v24@0:8@?16
@"NSMutableOrderedSet"
v24@0:8B16B20
v40@0:8@16@24@32
@"WebBookmarksXPCConnection"
B48@0:8@16@24@32^@40
@"WBReadingListPrivate"
v36@0:8@?16B24@?28
@"WBCollectionConfiguration"
@"WBTabCollection"
@20@0:8B16
@"NSString"
@"NSData"
@"WBBookmarkSyncData"
@"WBTabGroup"
@28@0:8q16B24
v28@0:8@"WBDatabaseLockAcquisitor"16B24
v40@0:8B16B20@24@?32
@28@0:8B16@20
@32@0:8@16I24B28
v40@0:8B16B20@"NSString"24@?<v@?@"NSString"@"NSString"@?<@"WebBookmark"@?>>32
@"NSArray"24@0:8@"NSString"16
@"WebBookmarkList"28@0:8B16@"NSString"20
@"NSArray"32@0:8@"NSString"16I24B28
@"WebBookmark"20@0:8i16
@"WBBookmarksDatabaseHealthInformation"16@0:8
@"NSDictionary"20@0:8i16
B36@0:8@16B24^@28
B24@0:8^i16
B44@0:8@16@24@32B40
Q24@0:8Q16
B28@0:8@?16B24
B32@0:8@?16B24B28
@24@0:8i16B20
I24@0:8@16
Q24@0:8@16
@24@0:8i16I20
@28@0:8i16I20B24
@40@0:8i16I20B24B28@32
B32@0:8@16B24B28
B28@0:8@16i24
B28@0:8@16I24
B32@0:8@16@24
B32@0:8@16I24I28
B32@0:8@16i24B28
^{sqlite3_stmt=}36@0:8@16r*24I32
@32@0:8r*16@24
v44@0:8@16@24@32i40
Q28@0:8@16B24
Q28@0:8q16B24
Q24@0:8q16
v32@0:8@16Q24
I24@0:8i16B20
@32@0:8@16B24i28
@44@0:8@16@24i32q36
^{sqlite3_stmt=}24@0:8@16
^{sqlite3_stmt=}32@0:8@16q24
i24@0:8^{sqlite3_stmt=}16
i32@0:8@16@?24
i24@0:8r*16
B24@0:8i16B20
B32@0:8Q16@24
B68@0:8@16@24i32I36B40@44@52B60B64
B24@0:8i16i20
i28@0:8@16B24
@28@0:8I16@20
B36@0:8@16@24B32
v24@0:8^{__CFString=}16
B28@0:8i16@20
v36@0:8i16@20@28
v24@0:8i16B20
@24@0:8B16B20
v32@0:8@16B24B28
@36@0:8i16Q20i28i32
@40@0:8i16Q20i28i32B36
v32@0:8i16B20@?24
B28@0:8i16Q20
B24@0:8B16B20
B44@0:8i16Q20B28B32@36
B44@0:8@16@24B32@36
v44@0:8@16@24B32@36
@28@0:8i16B20B24
B40@0:8@16@24B32B36
v28@0:8i16B20B24
B28@0:8q16B24
^{sqlite3=}
^{__CFLocale=}
@"WebBookmarkTitleWordTokenizer"
@"SafariFetcherServerProxy"
@"WBDatabaseLockAcquisitor"
@36@0:8^{sqlite3_stmt=}16B24^@28
B40@0:8i16@20B28^@32
B40@0:8@16i24I28^@32
B36@0:8i16@20^@28
B40@0:8@16B24B28^@32
B40@0:8@16@24^B32
@"NSMutableSet"
@60@0:8@16@24@32@40@48i56
@"NSDate"
@20@0:8I16
@24@0:8I16B20
I16@0:8
@32@0:8@16Q24
@"WebBookmarkListQuery"
@36@0:8@16I24@28
v24@0:8I16I20
I20@0:8I16
@"NSArray"24@0:8@"WBTabGroup"16
@"WBTabGroup"24@0:8@"NSString"16
@"WBTab"24@0:8@"NSString"16
@"WBWindow"24@0:8@"NSString"16
@"WBWindowState"24@0:8@"NSString"16
@"WBBrowserState"16@0:8
@"WFUserSettings"
{_NSRange=QQ}16@0:8
@"TIWordTokenizer"
{_NSRange="location"Q"length"Q}
@44@0:8i16@20@28Q36
@44@0:8@16i24@28@36
i32@0:8@16B24B28
i32@0:8i16@20B28
@32@0:8B16i20@24
@28@0:8i16@20
@32@0:8@16I24I28
@"<WebBookmarkInMemoryChangeFilter>"
B40@0:8@16@24@32
B24@0:8@?16
B36@0:8@16@24i32
@"WebBookmarkTabCollection"
@24@0:8^{sqlite3_stmt=}16
@28@0:8^{sqlite3_stmt=}16B24
v20@0:8I16
@"<WBTabGroupSyncAgentProxyProtocol>"
@36@0:8q16@24B32
@40@0:8q16@24B32B36
@32@0:8Q16Q24
@28@0:8B16^B20
Q32@0:8@16@24
@32@0:8q16@24
@"WBWebsiteDataRecord"
@48@0:8@16@24@32q40
@"<WBReusableTab>"
v32@0:8@"NSCache"16@24
v36@0:8@16@24B32
v24@0:8@"WBTabGroupManager"16
v32@0:8@"WBTabGroupManager"16@"WBTabGroup"24
v36@0:8@"WBTabGroupManager"16@"WBTab"24B32
@"NSCache"
@"NSTimer"
@32@0:8^v16@24
@"CKServerChangeToken"
v32@0:8Q16@?24
v56@0:8@16@24@32Q40@?48
v48@0:8@16@24Q32@?40
v24@0:8@?<v@?@"WBSCyclerItemListRepresentation">16
v32@0:8Q16@?<v@?B>24
v56@0:8@"NSString"16@"NSURL"24@"NSString"32Q40@?<v@?B>48
v48@0:8@"NSString"16@"NSString"24Q32@?<v@?B>40
v32@0:8@"NSString"16@?<v@?B>24
v40@0:8@"NSString"16@"NSString"24@?<v@?B>32
v40@0:8@"NSURL"16@"NSString"24@?<v@?B>32
v24@0:8@?<v@?q>16
v32@0:8@?16d24
v28@0:8B16@?20
@24@0:8Q16
@32@0:8Q16@24
@"_WBTabCyclerTabGroupUpdateObserver"
@"WBSDistributedNotificationObserver"
@"WBTabGroupManager"
@36@0:8@16B24@?28
@32@0:8@16@?24
v32@0:8@"WebBookmarksXPCConnection"16@"NSObject<OS_xpc_object>"24
@"<WebBookmarksClientDelegateProtocol>"
@"NSPointerArray"
@"WBSavedStateManager"
@"<WBTabProvider>"
@56@0:8@16@24@32@40@48
@48@0:8@16@24@32@40
@32@0:8@16^B24
@40@0:8#16@24^B32
@24@0:8#16
v24@0:8d16
v32@0:8d16d24
@"<WBDatabaseLockAcquisitorDelegate>"
@24@0:8r*16
v32@0:8@?16r*24
@"NSObject<OS_xpc_object>"
@"<WebBookmarksXPCConnectionDelegate>"
@72@0:8@16@24@32B40d44i52B56B60@64
@136@0:8q16B24@28@36@44@52Q60@68B76B80@84@92B100@104B112d116i124B128B132
d16@0:8
@"WBSettingsTask"
@"WebBookmarksSettingsGateway"
!*3<
!%)-15999=AEEEIIMQUY]aeimquy}
webBookmarksMetaDataDidChangeNotification
com.apple.WebBookmarks.MetaDataDidChangeNotification
DeviceUUID
com.apple.WebBookmarkDeviceIdentifier.%p
v8@?0
v12@?0B8
<%@: %p' _UUID = %@
Modify (isMove: YES)
Modify (isMove: NO)
Delete
Title
IsSelectedFavoritesFolder
DateAdded
DateLastViewed
ImageURL
PreviewText
LastSelectedTab
Folder
Leaf
, Changed Attributes: %@
<BAChangeRecord: %p, Type: %@, Bookmark Type: %@, Bookmark ID: %d, Bookmark Sync Server ID: %@%@>
data
v32@?0@"NSString"8Q16^B24
Type
605.2.2
606.1.16
-[WebBookmarkCloudKitSyncCollection dealloc]
-[WebBookmarkProductionSafariCloudKitSyncTabCollection dealloc]
<%s %p; localID: %d; serverID: %@; item: %p>
BAFolder
BABookmark
<%@: %p, type: %@, store owner: %@>
-[WBBookmarkDBAccess copyDeviceIdentifier]
-[WBBookmarkDBAccess resetDeviceIdentifier]
WebBookmarkDatabaseCreate
com.apple.dataaccess
BADatabaseOpen
BADatabaseSave
BADatabaseClose
BADatabaseCopySyncData
(null)
BADatabaseSetSyncData
BADatabaseClearAllSyncData
BADatabaseCopyChanges
BADatabaseClearChangesForToken
BADatabaseRemoveItemWithServerId
BADatabaseBeginMergingChanges
BADatabaseFinishMergingChanges
BAItemCopyServerId
BAItemSetServerId
BAItemCopyParentServerId
BAItemCopySyncKey
BAItemSetSyncKey
BAItemCopySyncData
BAItemSetSyncData
BAChangeGetChangeType
BAChangeCopyChangedItem
BAChangeCopyServerId
BAChangeIsMove
CKBAChangeGetItemType
CKBAChangeGetFolder
CKBAChangeGetBookmarkType
CKBADatabasePerformMaintenanceAfterVersion
CKBADatabaseGetLocalCloudKitMigrationState
CKBADatabaseSetLocalCloudKitMigrationState
CKBADatabaseCopyAccountHash
CKBADatabaseSetAccountHash
CKBADatabaseCopyChangeToken
CKBADatabaseCopyItemWithLocalID
CKBADatabaseCopyLocalIDsInFolderWithLocalID
CKBADatabaseCopyItemWithServerId
CKBADatabaseAddItemUnderFolderWithServerId
saveBookmarkUnderFolderWithServerId
CKBADatabasePerformDeduplication
CKBADatabaseCopyServerIdsInFolderWithServerId
CKBADatabaseSetChildrenOrderForFolderWithServerId
@"NSString"16@?0@"NSString"8
CKBADatabaseCopyServerIdInFolderBeforeServerId
CKBADatabaseCopyServerIdInFolderAfterServerId
CKBADatabaseCopyFirstServerIdInFolderWithServerId
CKBADatabaseCopyLastServerIdInFolderWithServerId
CKBAItemGetItemType
CKBAItemGetIsInFolderWithServerSyncId
CKBAItemIsEqualToItem
CKBAFolderGetFolderType
CKBADatabaseCreateFolder
CKBABookmarkGetBookmarkType
CKBADatabaseCreateBookmark
CKBAChangeGetWasBookmarkMoved
CKBAChangeCopyDeletedBookmarkSyncData
CKBAChangeSetDeletedBookmarkSyncData
CKBAChangeCopyModifiedAttributes
CKBAItemCopyAttributes
CKBAItemSetModifiedAttributes
CKBAItemCopyValueForKey
CKBADatabaseClearAllLocalBookmarksForAutomatedTesting
v20@?0B8@"NSError"12
v28@?0B8@"NSArray"12@"NSError"20
v16@?0@"NSError"8
EncodedCKRecordSystemFields
Generations
ModifiedAttributeMask
ExtraPositionData
Position
MinimumAPIVersion
Deleted
default
ParentAndPosition
IsTabGroup
HasUserDefinedPreviewText
v16@?0@"NSString"8
CloudBookmarkSyncData
CloudBookmarkGeneration
CloudBookmarkPosition
CloudBookmarkPositionSortValue
com.apple.WebBookmarks.TabGroupSyncAgent.ErrorDomain
Failed to open database
The feature is disabled
Failed to acquire the lock on the database
Error: domain=%@, code=%ld
B16@?0@"WebBookmark"8
BookmarkID
ParentID
AssociatedBookmarkID
SpecialFolderID
AssociatedBookmark
ModifiedAttributes
Bookmarks
@"WebBookmark"16@?0@"NSDictionary"8
dictionaryRepresentationForInMemoryChangeTracking
Modify
Move
Reorder
Replace
<%@: %p; type = %@; bookmark = %d %@; parent = %d; associated bookmark = %d;>
pinned
privatePinned
recentlyClosed
com.apple.WebBookmarks.SafariTabs.lock
TabChanges.plist
CREATE TABLE IF NOT EXISTS windows (id INTEGER PRIMARY KEY,active_tab_group_id INTEGER DEFAULT NULL,date_closed REAL DEFAULT NULL,extra_attributes BLOB DEFAULT NULL,is_last_session INTEGER DEFAULT 0,local_tab_group_id INTEGER DEFAULT NULL,private_tab_group_id INTEGER DEFAULT NULL,scene_id TEXT DEFAULT NULL,uuid TEXT NOT NULL UNIQUE,FOREIGN KEY (active_tab_group_id) REFERENCES bookmarks (id) ON UPDATE CASCADE ON DELETE SET NULL,FOREIGN KEY (local_tab_group_id) REFERENCES bookmarks (id) ON UPDATE CASCADE ON DELETE CASCADE,FOREIGN KEY (private_tab_group_id) REFERENCES bookmarks (id) ON UPDATE CASCADE ON DELETE CASCADE)
CREATE INDEX IF NOT EXISTS uuid_index ON windows (uuid)
CREATE TABLE IF NOT EXISTS windows_tab_groups (id INTEGER PRIMARY KEY,active_tab_id INTEGER DEFAULT NULL,tab_group_id INTEGER NOT NULL,window_id INTEGER NOT NULL,FOREIGN KEY (active_tab_id) REFERENCES bookmarks (id) ON UPDATE CASCADE ON DELETE CASCADE,FOREIGN KEY (tab_group_id) REFERENCES bookmarks (id) ON UPDATE CASCADE ON DELETE CASCADE,FOREIGN KEY (window_id) REFERENCES windows (id) ON UPDATE CASCADE ON DELETE CASCADE,UNIQUE (tab_group_id, window_id))
CREATE INDEX IF NOT EXISTS window_index ON windows_tab_groups (window_id)
WHERE local_tab_group_id = 0 OR local_tab_group_id IS NULL OR private_tab_group_id = 0 OR private_tab_group_id IS NULL
WHERE local_tab_group_id IN (SELECT windows.local_tab_group_id FROM windows LEFT JOIN bookmarks ON windows.local_tab_group_id = bookmarks.id WHERE bookmarks.id IS NULL)
WHERE private_tab_group_id IN (SELECT windows.private_tab_group_id FROM windows LEFT JOIN bookmarks ON windows.private_tab_group_id = bookmarks.id WHERE bookmarks.id IS NULL)
B8@?0
@"NSArray"16@?0@"WBTabGroup"8
UPDATE windows SET is_last_session = 1 WHERE uuid = %@
BEGIN
PRAGMA user_version = 44
Local
Private
PRAGMA user_version = 45
SELECT id, uuid FROM windows %@
Failed to fetch windows
DELETE FROM windows %@
Failed to delete windows
@"WBTab"16@?0@"WebBookmark"8
B16@?0@"WBTab"8
'%@'
@"WBWindow"16@?0@"WebBookmark"8
WHERE uuid = %@
SELECT windows.id FROM windows WHERE windows.uuid = ?
Failed to fetch window id
SELECT tab_bookmarks.external_uuid, tab_group_bookmarks.external_uuid FROM bookmarks AS tab_bookmarks INNER JOIN windows_tab_groups ON tab_bookmarks.id = windows_tab_groups.active_tab_id INNER JOIN bookmarks AS tab_group_bookmarks ON windows_tab_groups.tab_group_id = tab_group_bookmarks.id WHERE windows_tab_groups.window_id = ?
Failed to fetch active tabs
SELECT bookmarks.external_uuid, windows.local_tab_group_id, windows.private_tab_group_id, windows.scene_id, windows.uuid, windows.id, windows.extra_attributes FROM windows INNER JOIN bookmarks ON windows.active_tab_group_id = bookmarks.id %@
Failed to fetch window states
WHERE windows.date_closed = (SELECT MAX(date_closed) from windows)
WHERE windows.is_last_session = 1
WHERE windows.date_closed > 0
WHERE windows.date_closed IS NULL
bookmark
B16@?0@"WBTabGroup"8
INSERT INTO windows (active_tab_group_id, date_closed, extra_attributes, is_last_session, local_tab_group_id, private_tab_group_id, scene_id, uuid) VALUES (?, ?, ?, 1, ?, ?, ?, ?) ON CONFLICT (uuid) DO UPDATE SET active_tab_group_id = excluded.active_tab_group_id, date_closed = excluded.date_closed, extra_attributes = excluded.extra_attributes, local_tab_group_id = excluded.local_tab_group_id, private_tab_group_id = excluded.private_tab_group_id, is_last_session = 1
Failed to add a window
INSERT INTO windows_tab_groups (active_tab_id, tab_group_id, window_id) VALUES (?, ?, ?) ON CONFLICT (tab_group_id, window_id) DO UPDATE SET active_tab_id = excluded.active_tab_id
Failed to add an active tab
v32@?0@"NSString"8@"NSString"16^B24
DELETE FROM bookmarks WHERE syncable = 0 AND (parent != 0 OR external_uuid NOT IN (%@))
Failed to delete all tabs
@"NSNumber"16@?0@"WBTab"8
UPDATE bookmarks SET date_closed = %f WHERE id in (%@)
Failed to update tab close date
@"NSString"16@?0@"WBWindowState"8
UPDATE windows SET is_last_session = CASE WHEN uuid in (%@) THEN 1 ELSE 0 END
Failed to update last session
Windows
PinnedTabs
PrivatePinnedTabs
WindowStatesKey
<%@: %p; pinnedTabs = %lu; privatePinnedTabs = %lu; windows = %lu>
ROLLBACK TO SAVEPOINT bookmarks
RELEASE SAVEPOINT bookmarks
SAVEPOINT bookmarks
SELECT NULL FROM bookmarks
apple-internal-install
com.apple.MobileSafari.StopSyncing
Changes
FileURL
com.apple.WebBookmarks.WebBookmarkChangeSet.%p
B16@?0@"WebBookmarkChange"8
v20@?0@"NSMutableDictionary"8i16
v16@?0@"NSMutableDictionary"8
@"NSDictionary"16@?0@"WebBookmarkChange"8
WBErrorDomain
Misuse of WBReadingList interface. Use class method defaultReadingList.
com.apple.WebBookmarks.AddToReadingListQueue
@"WBTab"16@?0@"WBTab"8
@"NSArray"16@?0@"NSArray"8
B16@?0@"WBTabCollection"8
privacyPreservingDescription
%@ %d (%d)
 '%@' [%@] [%@]
<%@: %p; tabGroup = %@; title = %@; url = %@; uuid = %@>
<%@: %p; uuid = %@>
DidDownloadIconsNotification
BookmarkIdentifier
com.apple.WebBookmarks.SQLiteError
com.apple.WebBookmarks.DidVacuumDatabaseNotification
WebBookmarksFolderContentsDidChangeNotification
WebBookmarksDidReloadNotification
WebBookmarksSpecialFoldersDidChangeNotification
WebBookmarksChangedFolderID
com.apple.bookmarks.OmitFromUI
_DatabaseResetReason
com.apple.bookmarks.IsBuiltinBookmark
com.apple.bookmarks.IsBuiltinDeviceBookmark
com.apple.bookmarks.IsCarrierBookmark
com.apple.bookmarks.SelectedFavoritesFolder
LocalURL
com.apple.webbookmarksd.readingListfetching
com.apple.WebBookmarks.webbookmarksd
WebBookmarksDataclassDidChangeNotification
WebBookmarksResetCloudHistoryAccount
ComputerAnchorKey
BASyncData
_FavoritesFolderID
BookmarksBar
BookmarksMenu
com.apple.ReadingList
com.apple.WebFilterWhiteList
com.apple.FrequentlyVisitedSites
_ck_local_migration_state_
AccountHash
WebBookmarksDetectedLocalMigrationStateTransitionNotification
fromMigrationState
toMigrationState
DAVHomeURL
BookmarkImages
com.apple.WebBookmarks.WebBookmarkCollection
Bookmarks.db
SafariTabs.db
corrupted
%@.corrupted
-journal
-wal
-shm
PRAGMA journal_mode = wal
:memory:
SELECT * FROM bookmarks LIMIT 1
Database failed full integrity check.
PRAGMA foreign_keys = ON
PRAGMA auto_vacuum = FULL
SELECT name from sqlite_master where type = 'table'
bookmarks
generations
sync_properties
bookmark_title_words
folder_ancestors
PRAGMA integrity_check(1)
Bookmarks.plist
Bookmarks.plist.anchor.plist
bookmarkChanges.plist
Library/Caches
com.apple.mobilesafari
ReadingListArchives
UPDATE bookmarks SET archive_status = ? WHERE archive_status = ? OR archive_status = ?
PendingBookmarkChanges.plist
UPDATE bookmarks SET archive_status = ? WHERE parent = ? AND id IN (%@)
parent = %d AND deleted = 0 AND (archive_status = %zd OR archive_status = %zd)
UPDATE bookmarks SET archive_status = %zd WHERE %@
web_filter_status = %zd
UPDATE bookmarks SET web_filter_status = ? WHERE parent = ? AND deleted = 0 AND web_filter_status != ?
VACUUM
PRAGMA wal_checkpoint(TRUNCATE)
parent = %d AND deleted = 0 AND read = 1 AND (archive_status = %zd OR archive_status = %zd)
Trying to edit bookmarks without first obtaining the bookmarks database file lock.
Safari
id = %d AND deleted = 0
external_uuid = ? AND deleted = 0
SELECT external_uuid FROM bookmarks WHERE deleted = 0 AND external_uuid IN (
SELECT id FROM bookmarks WHERE parent = ? AND type = 1 AND title = ? AND deleted = 0
parent = ? AND title = ? AND deleted = 0 ORDER BY order_index
parent = %d AND type = 1 AND deleted = 0 AND hidden = 0 AND hidden_ancestor_count = 0 ORDER BY order_index
SELECT COUNT(*) FROM bookmarks WHERE parent = ? AND type = 0 AND hidden = 0
SELECT parent, count(*) FROM bookmarks WHERE (parent IN (SELECT folder_id FROM folder_ancestors WHERE ancestor_id = ?) AND hidden = 0 AND type = 0) GROUP BY parent
SELECT order_index FROM bookmarks WHERE id = %d
SELECT parent FROM bookmarks WHERE id = %d
SELECT modified_attributes FROM bookmarks WHERE id = %d
SELECT id FROM bookmarks WHERE external_uuid = '%@'
SELECT external_uuid FROM bookmarks WHERE parent = %d ORDER BY order_index ASC
SELECT id FROM bookmarks WHERE special_id = %d AND deleted = 0
web_filter_status != %zd
read = 0 AND 
parent = %d AND deleted = 0
 AND %@
order_index DESC
SELECT id FROM bookmarks WHERE special_id = %d
SELECT COUNT(*) FROM bookmarks WHERE special_id == 0 AND id != 0 AND deleted = 0;
http
https
fetched_icon = 0 AND (url LIKE 'http:%%' OR url LIKE 'https:%%') AND parent IN (%@)
UPDATE bookmarks SET fetched_icon = 0 WHERE parent IN (%@)
UPDATE bookmarks SET icon = NULL, fetched_icon = 0 WHERE parent IN (%@)
Trying to save bookmarks without first obtaining the bookmarks database file lock.
Trying to save a bookmark without first obtaining the bookmarks database file lock.
UPDATE bookmarks SET order_index = order_index + 1 WHERE order_index < ? AND order_index >= ? AND parent = ?
UPDATE bookmarks SET order_index = order_index - 1 WHERE order_index > ? AND order_index <= ? AND parent = ?
UPDATE bookmarks SET order_index = ?1, dav_generation = ?2%@ WHERE id = ?3
, modified_attributes = modified_attributes | ?4
B16@?0@"NSString"8
@"NSNumber"16@?0@"WebBookmark"8
v32@?0@"WebBookmark"8Q16^B24
SELECT id, parent, num_children, (SELECT COUNT(*) FROM bookmarks AS child_bookmark WHERE child_bookmark.parent = parent_bookmark.id AND hidden = 0) AS real_num_children FROM bookmarks AS parent_bookmark WHERE num_children != real_num_children
UPDATE bookmarks SET num_children = ? WHERE id = ?
UPDATE bookmarks SET sync_data = ? WHERE id = ?
DISTINCT url
SELECT %s FROM bookmarks WHERE type = 0 AND url >= ? AND url < ? AND deleted = 0 LIMIT ?
SELECT %s FROM bookmarks WHERE type = 0 AND deleted = 0 LIMIT ?
SELECT id, title, url FROM bookmarks WHERE type = 0 AND deleted = 0
AND parent = %d
AND hidden = 0 AND hidden_ancestor_count = 0
SELECT %@ FROM bookmarks INNER JOIN bookmark_title_words ON bookmarks.id = bookmark_title_words.bookmark_id WHERE bookmark_title_words.word LIKE ? AND type = 0 AND deleted = 0 AND web_filter_status != %zd AND title IS NOT NULL AND url IS NOT NULL AND url != "" %@
PRAGMA case_sensitive_like = true
@"WebBookmark"8@?0
v32@?0@"NSString"8@"NSString"16^{BookmarkSQLStatement=^^?^{sqlite3_stmt}BBi}24
SELECT %@ FROM bookmarks WHERE url LIKE ? AND type = 0 AND deleted = 0 AND web_filter_status != %zd AND title IS NOT NULL AND url IS NOT NULL %@
PRAGMA case_sensitive_like = false
 AND (archive_status = %zd OR archive_status = %zd)
deleted = 0 AND parent = ? AND web_filter_status != ? AND title IS NOT NULL AND url IS NOT NULL%@ ORDER BY order_index DESC LIMIT ?
SELECT %@ FROM bookmarks INNER JOIN bookmark_title_words ON bookmarks.id = bookmark_title_words.bookmark_id WHERE bookmark_title_words.word LIKE ? AND %@
SELECT %@ FROM bookmarks WHERE url LIKE ? AND %@
q24@?0@8@16
SELECT COUNT(*) FROM bookmarks WHERE order_index < ? AND parent = ? AND (read = 0 AND deleted = 0 AND id NOT IN (%@))
SELECT id FROM bookmarks WHERE parent = %d AND deleted = 0 AND web_filter_status = %zd ORDER BY order_index DESC LIMIT %d
id IN (%@) AND 
archive_status IN (%zd,%zd,%zd)
archive_status IN (%zd,%zd)
(%@)
(%@) AND (locally_added = 1 OR read = 0)
(%@) AND locally_added = 1
 ORDER BY archive_status ASC, read ASC, locally_added DESC, order_index DESC
 LIMIT 1
read ASC, order_index DESC
syncable = 0 AND parent = 0
com.apple.Bookmarks.lock
SELECT MAX(order_index) + 1 FROM bookmarks WHERE special_id != 0
SELECT COUNT(*), MAX(order_index) FROM bookmarks WHERE parent = ? AND deleted = 0 AND syncable = 1
special_id = ? AND deleted = 0
%@%%
url LIKE ? AND deleted = 0 AND parent = ? LIMIT 1
url = ? AND deleted = 0 AND parent = ? ORDER BY last_modified ASC LIMIT 1
type = 1 AND title = ? AND parent = ? AND deleted = 0 %@
AND server_id IS NULL
type = 0 AND url = ?1 AND parent = ?2 AND deleted = 0 AND server_id IS NULL
type = 0 AND title = ?3 AND url = ?1 AND parent = ?2 AND deleted = 0
PRAGMA user_version
PRAGMA user_version = %d
COMMIT
CREATE TABLE generations (generation INTEGER NOT NULL)
INSERT INTO generations (generation) VALUES (1)
CREATE TABLE sync_properties (key TEXT NOT NULL, value TEXT NOT NULL)
CREATE INDEX sync_properties_key_index ON sync_properties (key)
INSERT INTO sync_properties (key, value) VALUES ('_dav_generation', 1)
INSERT INTO bookmarks (id, special_id, parent, type, order_index, num_children, editable, deletable, title, external_uuid) VALUES (1, 1, 0, 1, 0, 0, 0, 0, 'BookmarksBar', '%@')
UPDATE bookmarks SET num_children = 1 WHERE id = 0
DROP TABLE IF EXISTS bookmark_title_words
CREATE TABLE bookmark_title_words (id INTEGER PRIMARY KEY AUTOINCREMENT, bookmark_id INTEGER NOT NULL CONSTRAINT fk_bookmark_id REFERENCES bookmarks(id) ON DELETE CASCADE, word TEXT, word_index INTEGER)
CREATE TRIGGER fkd_bookmark_title_words_bookmark_id BEFORE DELETE ON bookmarks      FOR EACH ROW BEGIN DELETE FROM bookmark_title_words WHERE bookmark_id = OLD.id;      END;
CREATE INDEX title_word_index ON bookmark_title_words(word)
CREATE INDEX title_bookmark_id_index ON bookmark_title_words(bookmark_id)
DROP TABLE IF EXISTS bookmarks
CREATE TABLE bookmarks (id INTEGER PRIMARY KEY AUTOINCREMENT,special_id INTEGER DEFAULT 0,parent INTEGER, type INTEGER,title TEXT,url TEXT COLLATE NOCASE,num_children INTEGER DEFAULT 0,editable INTEGER DEFAULT 1,deletable INTEGER DEFAULT 1,hidden INTEGER DEFAULT 0,hidden_ancestor_count INTEGER DEFAULT 0,order_index INTEGER NOT NULL,external_uuid TEXT,read INTEGER DEFAULT NULL,last_modified REAL DEFAULT NULL,server_id TEXT, sync_key TEXT,sync_data BLOB,added INTEGER DEFAULT 1,deleted INTEGER DEFAULT 0,extra_attributes BLOB DEFAULT NULL,local_attributes BLOB DEFAULT NULL,fetched_icon BOOL DEFAULT 0, icon BLOB DEFAULT NULL,dav_generation INTEGER DEFAULT 0,locally_added BOOL DEFAULT 0,archive_status INTEGER DEFAULT 0,syncable BOOL DEFAULT 1,web_filter_status INTEGER DEFAULT 0, modified_attributes UNSIGNED BIG INT DEFAULT 0, date_closed REAL DEFAULT NULL, last_selected_child INTEGER DEFAULT NULL, FOREIGN KEY (last_selected_child) REFERENCES bookmarks (id) ON DELETE SET NULL)
CREATE INDEX special_id_index ON bookmarks (special_id)
CREATE INDEX autocomplete_index ON bookmarks (url)
CREATE INDEX folder_list_index ON bookmarks (parent, type, order_index)
CREATE INDEX group_index ON bookmarks (parent, order_index)
CREATE INDEX sync_index ON bookmarks (external_uuid)
CREATE INDEX server_id_index ON bookmarks(server_id)
CREATE INDEX dav_generation_index ON bookmarks(dav_generation)
CREATE INDEX reading_list_index ON bookmarks (parent, deleted, web_filter_status, order_index DESC)
INSERT INTO bookmarks (id, type, order_index, num_children, title, external_uuid) VALUES (0, 1, 0, 0, 'Root', 'Root')
ALTER TABLE bookmarks ADD COLUMN special_id INTEGER DEFAULT 0
UPDATE bookmarks SET title = 'Root', external_uuid = 'Root' WHERE id = 0
UPDATE bookmarks SET special_id = 1 WHERE id = 1
UPDATE bookmarks SET special_id = 2 WHERE id = 2
PRAGMA user_version = 1
CREATE TABLE bookmark_title_words (id INTEGER PRIMARY KEY, bookmark_id INTEGER NOT NULL CONSTRAINT fk_bookmark_id REFERENCES bookmarks(id) ON DELETE CASCADE, word TEXT, word_index INTEGER)
CREATE TRIGGER fkd_bookmark_title_words_bookmark_id BEFORE DELETE ON bookmarks         FOR EACH ROW BEGIN DELETE FROM bookmark_title_words WHERE bookmark_id = OLD.id;         END;
PRAGMA user_version = 3
ALTER TABLE bookmarks ADD COLUMN server_id TEXT
ALTER TABLE bookmarks ADD COLUMN sync_key TEXT
ALTER TABLE bookmarks ADD COLUMN sync_data BLOB
PRAGMA user_version = 4
SELECT count(*) FROM sync_properties WHERE key = '_dav_generation'
ALTER TABLE bookmarks ADD COLUMN deleted INTEGER DEFAULT 0
ALTER TABLE bookmarks ADD COLUMN dav_generation INTEGER DEFAULT 0
PRAGMA user_version = 5
PRAGMA user_version = 6
CREATE TABLE folder_ancestors (id INTEGER PRIMARY KEY, folder_id INTEGER NOT NULL CONSTRAINT fk_ancestors_folder_id REFERENCES bookmarks(id) ON DELETE CASCADE, ancestor_id INTEGER NOT NULL)
CREATE TRIGGER fkd_ancestors_folder_id BEFORE DELETE ON bookmarks FOR EACH ROW BEGIN DELETE FROM folder_ancestors WHERE folder_id = OLD.id; END;
CREATE INDEX ancestor_folder_id_index on folder_ancestors(folder_id)
CREATE INDEX ancestor_ancestor_id_index on folder_ancestors(ancestor_id)
PRAGMA user_version = 7
ALTER TABLE bookmarks ADD COLUMN extra_attributes BLOB DEFAULT NULL
PRAGMA user_version = 8
DROP INDEX IF EXISTS deleted_index
DROP INDEX IF EXISTS autocomplete_index
CREATE INDEX autocomplete_index ON bookmarks(url)
PRAGMA user_version = 9
ALTER TABLE bookmarks ADD COLUMN hidden INTEGER DEFAULT 0
PRAGMA user_version = 10
ALTER TABLE bookmarks ADD COLUMN hidden_ancestor_count INTEGER DEFAULT 0
PRAGMA user_version = 11
ALTER TABLE bookmarks ADD COLUMN read INTEGER DEFAULT NULL
ALTER TABLE bookmarks ADD COLUMN last_modified REAL DEFAULT NULL
PRAGMA user_version = 14
SELECT id FROM bookmarks WHERE special_id = 3
UPDATE bookmarks SET read = 0 WHERE read IS NULL and parent = ?
PRAGMA user_version = 15
CREATE INDEX title_word_bookmark_id_index ON bookmark_title_words(bookmark_id)
PRAGMA user_version = 16
UPDATE bookmarks SET num_children = (SELECT COUNT(*) FROM bookmarks AS count_bookmarks WHERE count_bookmarks.parent = bookmarks.id AND hidden = 0) WHERE type = 1
PRAGMA user_version = 19
SELECT count(*) FROM bookmarks WHERE parent = ? AND deleted = 0
UPDATE bookmarks SET order_index = ? - order_index - 1 WHERE parent = ?
PRAGMA user_version = 21
ALTER TABLE bookmarks ADD COLUMN icon BLOB DEFAULT NULL
ALTER TABLE bookmarks ADD COLUMN fetched_icon BOOL DEFAULT 0
SELECT id, extra_attributes FROM bookmarks WHERE deleted = 0 AND parent = ?
UPDATE bookmarks SET icon = ?, fetched_icon = ?, extra_attributes = ?, dav_generation = ? WHERE id = ?
PRAGMA user_version = 22
DELETE FROM sync_properties WHERE key = '_dav_generation'
INSERT INTO sync_properties (key, value) VALUES ('_dav_generation', ?)
PRAGMA user_version = 23
ALTER TABLE bookmarks ADD COLUMN added INTEGER DEFAULT 1
UPDATE bookmarks SET added = 0 WHERE server_id IS NOT NULL
PRAGMA user_version = 24
ALTER TABLE bookmarks ADD COLUMN archived_offline BOOL DEFAULT 0
ALTER TABLE bookmarks ADD COLUMN last_archived REAL DEFAULT NULL
PRAGMA user_version = 25
PRAGMA user_version = 26
PRAGMA user_version = 27
PRAGMA user_version = 28
ALTER TABLE bookmarks ADD COLUMN locally_added BOOL DEFAULT 0
PRAGMA user_version = 29
ALTER TABLE bookmarks ADD COLUMN local_attributes BLOB DEFAULT NULL
SELECT id, extra_attributes, last_archived FROM bookmarks WHERE deleted = 0 AND parent = ?
UPDATE bookmarks SET extra_attributes = ?, local_attributes = ?, dav_generation = ? WHERE id = ?
ALTER TABLE bookmarks DROP COLUMN last_archived
PRAGMA user_version = 30
ALTER TABLE bookmarks ADD COLUMN archive_status INTEGER DEFAULT 0
UPDATE bookmarks SET archive_status = archived_offline
UPDATE bookmarks SET archived_offline = NULL
UPDATE bookmarks SET last_archived = NULL
PRAGMA user_version = 31
PRAGMA user_version = 32
UPDATE bookmarks SET fetched_icon = 0, icon = NULL WHERE parent = (SELECT id FROM bookmarks WHERE special_id = 3)
PRAGMA user_version = 33
ALTER TABLE bookmarks ADD COLUMN syncable BOOL DEFAULT 1
PRAGMA user_version = 34
UPDATE bookmarks SET archive_status = 0 WHERE archive_status IS NULL
PRAGMA user_version = 35
ALTER TABLE bookmarks ADD COLUMN web_filter_status INTEGER DEFAULT 0
PRAGMA user_version = 36
PRAGMA user_version = 37
PRAGMA user_version = 38
ALTER TABLE bookmarks ADD COLUMN modified_attributes UNSIGNED BIG INT DEFAULT 0
PRAGMA user_version = 39
DELETE FROM bookmark_title_words WHERE bookmark_id NOT IN (SELECT id FROM bookmarks)
DELETE FROM folder_ancestors WHERE folder_id NOT IN (SELECT id FROM bookmarks)
ALTER TABLE bookmarks ADD COLUMN date_closed REAL DEFAULT NULL
PRAGMA user_version = 41
ALTER TABLE bookmarks ADD COLUMN last_selected_child INTEGER DEFAULT NULL
ALTER TABLE bookmarks ADD FOREIGN KEY (last_selected_child) REFERENCES bookmarks (id) ON DELETE SET NULL
PRAGMA user_version = 42
PRAGMA user_version = 43
SELECT id, local_attributes, icon FROM bookmarks WHERE deleted = 0 AND parent = ?
UPDATE bookmarks SET local_attributes = ?, icon = ? WHERE id = ?
SELECT %@, %s FROM bookmarks
SELECT COUNT(*) FROM bookmarks WHERE special_id = 1
UPDATE bookmarks SET order_index = order_index + 1 WHERE parent = 0
INSERT INTO bookmarks (special_id, parent, type, order_index, editable, deletable, title, external_uuid) VALUES (1, 0, 1, 0, 0, 0, 'BookmarksBar', '')
UPDATE bookmarks SET num_children = num_children + 1 WHERE id = 0
AND hidden = 0 AND id != %d AND (num_children > 0 OR special_id != %d)
SELECT count(*) FROM bookmarks WHERE %@
SELECT id FROM bookmarks WHERE %@
SELECT %@ FROM bookmarks WHERE %@
SELECT COUNT(*) from folder_ancestors WHERE folder_id = ? AND ancestor_id = ?
UPDATE bookmarks SET order_index = order_index + 1 WHERE parent = ? AND order_index >= ?
UPDATE bookmarks SET parent = ?1, order_index = ?2,%@%@ icon = NULL, fetched_icon = 0 WHERE id = ?3
 modified_attributes = modified_attributes | ?4,
 dav_generation = ?5,
UPDATE bookmarks SET order_index = (order_index - 1) WHERE parent = ? AND order_index > ?
SELECT id FROM bookmarks WHERE server_id = ? AND deleted = 1
INSERT INTO bookmarks (order_index, deleted, parent, server_id%@) VALUES (0, 1, -1, ?%@)
, sync_data
DELETE FROM bookmarks WHERE deleted = 1
UPDATE bookmarks SET added = 1, server_id = NULL, sync_key = NULL, sync_data = NULL WHERE parent IN (select folder_id from folder_ancestors where ancestor_id = ?) OR parent = ? OR id = ?
UPDATE bookmarks SET server_id = NULL, sync_key = NULL, sync_data = NULL
UPDATE bookmarks SET added = 1
UPDATE bookmarks SET order_index = (order_index - 1) WHERE parent = %d AND order_index > %d
DELETE FROM bookmarks WHERE parent IN (SELECT folder_id FROM folder_ancestors WHERE ancestor_id = ?) OR parent = ?%@
 OR id = ?
UPDATE bookmarks SET order_index = order_index + 1 WHERE parent = %d AND order_index >= %d
SELECT (hidden + hidden_ancestor_count) FROM bookmarks WHERE id = ?
INSERT INTO bookmarks (title, url, parent, type, external_uuid, order_index, extra_attributes, fetched_icon, icon, locally_added, archive_status, web_filter_status, hidden_ancestor_count, editable, local_attributes, syncable, last_selected_child) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
SELECT count(*) FROM Bookmarks WHERE special_id = %u
UPDATE bookmarks SET title = ?1, url = ?2, extra_attributes = ?3, local_attributes = ?11, fetched_icon = ?4, icon = ?5, locally_added = ?10, archive_status = ?8, web_filter_status = ?12%@%@%@ WHERE id = ?6
, dav_generation = ?7
, modified_attributes = ?13
, last_selected_child = ?14
UPDATE bookmarks SET hidden = ? WHERE id = ?
UPDATE bookmarks SET last_modified = ?, read = ? WHERE id = ?
UPDATE bookmarks SET external_uuid = '%@' WHERE id = %d
UPDATE bookmarks SET special_id = %u, editable = 0, deletable = 0 WHERE id = %u
UPDATE bookmarks SET num_children = num_children - 1 WHERE id = %d
UPDATE bookmarks SET num_children = num_children + 1 WHERE id = %d
SELECT server_id FROM bookmarks WHERE id = ?
deleted = 0 AND
SELECT id FROM bookmarks WHERE %@ %@ ORDER BY server_id ASC
rtrim(server_id, '/') LIKE ?
server_id = ?
%%%@
%@ %@ ORDER BY server_id ASC
UPDATE bookmarks SET server_id = ? WHERE id = ?
SELECT parent, order_index FROM bookmarks WHERE server_id = ? AND deleted = 0
SELECT special_id FROM bookmarks WHERE id = ? AND deleted = 0
SELECT server_id, %@(order_index) FROM bookmarks WHERE parent = ? AND order_index %@ ? AND server_id IS NOT NULL AND deleted = 0
SELECT id, special_id FROM bookmarks WHERE server_id = ? AND deleted = 0
SELECT %@(order_index), server_id FROM bookmarks WHERE parent = ? AND server_id IS NOT NULL
BookmarksSyncMetadata.plist
SafariTabsSyncMetadata.plist
UPDATE bookmarks SET sync_key = ? WHERE id = ?
SELECT sync_key FROM bookmarks WHERE server_id = ? AND deleted = 0 ORDER BY server_id ASC
SELECT sync_key FROM bookmarks WHERE deleted = 0 AND rtrim(server_id, '/') LIKE ? ORDER BY server_id ASC
SELECT server_id from bookmarks where parent = ? AND deleted = 0
SELECT server_id FROM bookmarks WHERE parent = ? AND deleted = 0 AND order_index = ?
UPDATE bookmarks SET order_index = ? WHERE id = ?
SAVEPOINT bookmarksdav_order
RELEASE SAVEPOINT bookmarksdav_order
ROLLBACK TRANSACTION TO SAVEPOINT bookmarksdav_order
SELECT ancestor_id from folder_ancestors WHERE folder_id = ?
DELETE FROM folder_ancestors WHERE folder_id IN (SELECT folder_id FROM folder_ancestors WHERE ancestor_id = ?) OR folder_id = ?;
DELETE FROM bookmark_title_words WHERE bookmark_id = %d
INSERT INTO bookmark_title_words (bookmark_id, word, word_index) VALUES (?, ?, ?)
SELECT id, title FROM bookmarks where type = 0 AND deleted = 0
UPDATE generations SET generation = generation + 1
SELECT %@ %@
FROM folder_ancestors LEFT OUTER JOIN bookmarks ON folder_id = bookmarks.id WHERE bookmarks.id != 0 AND added = 1 AND syncable = 1 GROUP BY folder_id ORDER BY count(ancestor_id) ASC
FROM bookmarks WHERE added = 1 AND id != 0 AND type = 0 AND syncable = 1
FROM folder_ancestors LEFT OUTER JOIN bookmarks ON folder_id = bookmarks.id WHERE dav_generation = %d AND deleted = 0 AND added = 0 AND bookmarks.id != 0 AND syncable = 1 AND (modified_attributes & %llu) == %llu GROUP BY folder_id ORDER BY count(ancestor_id) ASC
FROM bookmarks WHERE dav_generation = %d AND deleted = 0 AND added = 0 AND id != 0 AND syncable = 1 AND ((modified_attributes & %llu) != %llu OR type = 0)
FROM bookmarks WHERE deleted = 1 AND server_id IS NOT NULL AND syncable = 1
UPDATE bookmarks SET added = 0, modified_attributes = 0 WHERE added != 0 OR modified_attributes != 0
UPDATE bookmarks SET added = ? WHERE id = ?
SELECT value from sync_properties WHERE key = '_dav_generation'
UPDATE sync_properties SET value = value + 1 WHERE key = '_dav_generation'
com.apple.bookmarks.BookmarksFileChanged
SELECT id FROM bookmarks WHERE special_id = ?
UPDATE bookmarks SET num_children = 0 WHERE id = %d
not null
null
SELECT id, URL FROM bookmarks WHERE type = 0 AND deleted = 0
UPDATE bookmarks SET URL = ? WHERE id = ?
address
pageTitle
bookmarkPath
title = ? AND parent = 0 AND deleted = 0 ORDER BY order_index ASC
UPDATE bookmarks SET num_children = (SELECT COUNT(*) FROM bookmarks AS count_bookmarks WHERE count_bookmarks.parent = %d) WHERE (bookmarks.id = %d AND bookmarks.num_children < 0)
DROP TABLE IF EXISTS folder_ancestors
DROP TRIGGER IF EXISTS fkd_ancestors_folder_id
CREATE TABLE folder_ancestors (id INTEGER PRIMARY KEY AUTOINCREMENT, folder_id INTEGER NOT NULL CONSTRAINT fk_ancestors_folder_id REFERENCES bookmarks(id) ON DELETE CASCADE, ancestor_id INTEGER NOT NULL)
INSERT INTO folder_ancestors (folder_id, ancestor_id) VALUES (?, ?)
SELECT id FROM bookmarks WHERE parent = ? AND type = 1 AND deleted = 0
UPDATE bookmarks SET hidden_ancestor_count = hidden_ancestor_count + ? WHERE parent IN (SELECT folder_id from folder_ancestors WHERE ancestor_id = ?) OR parent = ?
 LIMIT ? OFFSET ?
SELECT parent, count(*) AS identical_bookmarks FROM bookmarks GROUP BY parent, type, title, url HAVING identical_bookmarks > 1
@"WebBookmark"16@?0@"WebBookmark"8
v16@?0@"WebBookmark"8
DELETE FROM bookmarks WHERE id = ?
SELECT num_children FROM bookmarks WHERE id = ?
UPDATE bookmarks SET parent = ?1, order_index = order_index + ?2%@ WHERE parent = ?3
, modified_attributes = modified_attributes | ?4, dav_generation = ?5
UPDATE bookmarks SET num_children = num_children + (SELECT num_children FROM bookmarks WHERE id = ?) WHERE id = ?
DELETE FROM folder_ancestors
UPDATE bookmarks SET num_children = (SELECT COUNT(*) FROM bookmarks AS b WHERE b.parent = ? AND b.hidden = 0) WHERE id = ? AND type = 1
parent = ?%@%@
 AND type = 1
 AND hidden = 0
DELETE FROM sync_properties WHERE key != ? AND key LIKE ?
SELECT id from bookmarks where parent = ? AND deleted = 0 AND syncable = 1
SELECT sync_data FROM bookmarks WHERE special_id = 0 AND syncable = 1 AND deleted = 0 AND parent = ? AND order_index < ? ORDER BY order_index DESC
SELECT sync_data FROM bookmarks WHERE special_id = 0 AND syncable = 1 AND deleted = 0 AND parent = ? AND order_index > ? ORDER BY order_index ASC
com.apple.WebBookmarks.bookmarksCollectionQueue
com.apple.WebBookmarks.titleWordTokenizerAccess
DeviceClass
iPad
com.apple.WebBookmarks.ErrorDomain
WebBookmarkTypeList
WebBookmarkTypeLeaf
WebBookmarkType
title
URIDictionary
URLString
Children
WebBookmarkUUID
SELECT type, title, url, id, external_uuid FROM bookmarks WHERE parent = ? AND deleted = 0 AND hidden = 0 AND syncable = 1 ORDER BY order_index
SELECT type, title, url, id, external_uuid FROM bookmarks WHERE id = 0
UPDATE bookmarks SET special_id = 1, editable = 0, deletable = 0 WHERE id = (SELECT id FROM bookmarks WHERE title = 'BookmarksBar' AND parent = 0 ORDER BY id ASC LIMIT 1);
UPDATE bookmarks SET special_id = 2, editable = 0, deletable = 0 WHERE id = (SELECT id FROM bookmarks WHERE title = 'BookmarksMenu' AND parent = 0 ORDER BY id ASC LIMIT 1);
DELETE FROM bookmarks WHERE id != 0 AND syncable = 1
DELETE FROM bookmarks WHERE id != 0 AND hidden = 0 AND hidden_ancestor_count = 0 AND syncable = 1
SELECT generation FROM generations
SELECT COUNT(*) FROM sync_properties WHERE key = ?
DELETE FROM sync_properties WHERE key = ?
UPDATE sync_properties SET value = ? WHERE key = ?
INSERT INTO sync_properties (value, key) VALUES (?, ?)
SELECT value FROM sync_properties WHERE key = ?
SAVEPOINT sync
RELEASE SAVEPOINT sync
ROLLBACK TRANSACTION TO SAVEPOINT sync
special_id == 0 AND id != 0
SQLiteResult
come.apple.WebBookmarks.syncLockQueue
dateClosed
extraAttributes
identifier
localTabGroup
privateTabGroup
sceneID
tabGroupsToActiveTabs
<%@: %p; activeTabGroupUUID = %@; identifier = %d; sceneID = %@; uuid = %@>
com.apple.WebBookmarks
History (bookmark proxy)
Reading List
Allowed Sites
Favorites
Bookmarks Menu
WebBookmarkWebFilterSettingsDidChange
com.apple.ManagedConfiguration.webContentFilterChanged
/System/Library/PrivateFrameworks/WebContentAnalysis.framework/WebContentAnalysis
/System/Library/PrivateFrameworks/WebContentAnalysis.framework/Contents/MacOS/WebContentAnalysis
WFUserSettings
Class getWFUserSettingsClass(void)_block_invoke
WebBookmarkWebFilterSettings.m
Unable to find class %s
void *WebContentAnalysisLibrary(void)
TIWordTokenizer
/System/Library/PrivateFrameworks/TextInput.framework/TextInput
/System/Library/PrivateFrameworks/TextInput.framework/Contents/MacOS/TextInput
AND hidden = 0
 AND hidden_ancestor_count = 0
parent = %d
OR parent IN (SELECT folder_id FROM folder_ancestors WHERE ancestor_id = %d)
AND type = %d
(%@ %@) %@ %@
order_index ASC
%%%@%%
%@ AND %@
%@ ORDER BY %@
<%@:%p; customQuery = %@; query = "%@"; orderBy = "%@"; titleWordPrefixes = %@>
SELECT COUNT(*) FROM bookmarks WHERE %@
SELECT num_children FROM bookmarks WHERE id = %d
id NOT IN (%@)
id IN (%@)
%@ LIMIT ? OFFSET ?
((%@) OR url LIKE ?)
id IN (SELECT bookmark_id FROM bookmark_title_words WHERE word GLOB ?)
 AND id IN (SELECT bookmark_id FROM bookmark_title_words WHERE word GLOB ?)
(%@ AND %@) OR %@
(%@) OR %@
(%@ AND %@)
B32@?0@"NSString"8Q16^B24
hasMigrated
com.apple.WebBookmarks.WBTabCollection
parent = 0 AND syncable = 1 AND type = 1 AND hidden = 0 AND special_id = 0
@"WBTabGroup"16@?0@"WebBookmark"8
com.apple.Safari.%@.%p
@"WebBookmark"16@?0@"WBTab"8
com.apple.WebBookmarks.WebBookmarkReadonlyCollection.%@.%p.%@
InternalQueue
bookmarks.type,bookmarks.title,bookmarks.url,bookmarks.id,bookmarks.editable,bookmarks.deletable,bookmarks.hidden,bookmarks.parent,bookmarks.order_index,bookmarks.external_uuid,bookmarks.special_id,bookmarks.server_id,bookmarks.sync_key,bookmarks.sync_data,bookmarks.extra_attributes,bookmarks.local_attributes,bookmarks.fetched_icon,bookmarks.icon,bookmarks.locally_added,bookmarks.archive_status,bookmarks.syncable,bookmarks.web_filter_status, bookmarks.modified_attributes, bookmarks.last_selected_child
AND hidden = 0 
AND type = 1 
AND type = 0 
SELECT bookmarks.type, bookmarks.title, bookmarks.url, bookmarks.id, bookmarks.editable, bookmarks.deletable, bookmarks.hidden, bookmarks.parent, bookmarks.order_index, bookmarks.external_uuid, bookmarks.special_id, bookmarks.server_id, bookmarks.sync_key, bookmarks.sync_data, bookmarks.extra_attributes, bookmarks.local_attributes, bookmarks.fetched_icon, bookmarks.locally_added, bookmarks.archive_status, bookmarks.syncable, bookmarks.web_filter_status%@%@ FROM bookmarks WHERE parent = ? %@%@ORDER BY order_index ASC
, bookmarks.modified_attributes
, last_selected_child
bookmarks.read, bookmarks.deleted
IsFolder
UUID
IsEditable
IsDeletable
IsHidden
IsSyncable
IsLocallyAdded
SpecialID
OrderIndex
IsInserted
NeedsSyncUpdate
UsedForInMemoryChangeTracking
ServerID
Sync
SyncData
SyncMetadata
FetchedIconData
ArchiveStatus
WebFilterStatus
ExtraAttributes
LocalAttributes
LastSelectedChildID
WebsiteDataRecordDomain
WebsiteDataRecordUsage
Library/Preferences/com.apple.mobilesafari
Library/Safari
/var/mobile/Library/Safari/SafariTabsPPT.db
Tabs
Default
Production Safari
Safari Technology Preview
Safari Automation
BookmarkSync
CloudBookmarks
Cycler
DataMigration
ReadingList
ReadingListIcons
WebsiteData
WebBookmarkServer
CloudSettings
TabGroup
/file
Reader.webarchive
Page.webarchive
ReadingListArchiveStatusPending
ReadingListArchiveStatusCompleted
ReadingListArchiveStatusStandaloneMediaFile
ReadingListArchiveStatusRecoverableError
ReadingListArchiveStatusNonRecoverableError
ReadingListArchiveStatusOutsideFetchWindow
ReadingListArchiveStatusShouldArchive
DateLastFetched
ReadingListIconURL
DateLastArchived
NextPageURLs
LocalPreviewText
ReadingListIconUUID
HasFetchedMetadata
Icon
DateLastFetchedIcon
SafariDebugOverrideLaunchMode
lastSelectedTabUUID
tabs
type
tabGroup
@"WBTab"16@?0@"NSDictionary"8
dictionaryRepresentation
<html><body>
<h>%@</h>
<ul>
<li><a href='%@'>%@</a></li>
</ul>
</body></html>
@"NSUUID"16@?0@"WBTab"8
@"WBTab"16@?0@"NSOrderedCollectionChange"8
v32@?0@"WBTab"8Q16^B24
<%@: %p; identifier = %d; syncable = %@; title = %@; type = %ld; numberOfTabs = %lu; uuid = %@>
<%@: %p; identifier = %d; syncable = %@; type = %ld; numberOfTabs = %lu; uuid = %@>
@"NSString"16@?0@"WBTab"8
com.apple.mobilesafari.WebBoomarks.migration.markReadingListItemsForWebContentFilterTime
com.apple.mobilesafari.WebBoomarks.migration.vacuumTime
v32@?0@"WBReusableTabEntry"8Q16^B24
reusableTabManagerCleanupDelaySeconds
reusableTabManagerMaxAgeSeconds
LastChangeID
LastServerChangeToken
DidNotSaveRecordsAfterMigration
CloudBookmarkDatabaseSyncData
tab-group-container-bookmark
tab-group-container-bookmark-uuid
local and remote
local
v16@?0@"NSTimer"8
v16@?0q8
B32@?0@"WBTabGroup"8Q16^B24
B16@?0@"NSNotification"8
B32@?0@"WBTab"8Q16^B24
v32@?0@"WBTabGroup"8Q16^B24
v24@?0@"WebBookmarksXPCConnection"8@"NSObject<OS_xpc_object>"16
com.apple.SafariTabGroupSync.SyncDidFinish
syncResult
com.apple.WebBookmarks.%@.%p._tabProviderAccessQueue
uuid
com.apple.safarifetcherd
AddToReadingList
ClearAllCloudTabDevices
ClearCloudTabsForCurrentDevice
DidToggleCloudTabs
RegisterForReadingListFetcherUpdates
StartReadingListFetcher
UnregisterForReadingListFetcherUpdates
DidFinishFetching
DidUpdateProgress
DidStartFetchingItem
DidStopFetchingItem
ClearAllReadingListArchives
ClearReadingListArchive
GetSafariWebDatabaseUsage
DeleteSafariWebSecurityOrigin
DeleteAllSafariWebSecurityOrigins
DeleteSafariPersistentURLCacheStorage
GetSafariDataUsageSummary
ClearHSTSSuperCookies
ClearAllSafariHistory
ScheduleBookmarksDatabaseMaintenanceTask
ScheduleBookmarksDatabaseMigrationTask
Address
ClientBundleID
Enabled
Item
Progress
TerminateAfterUpdating
DataUsageSize
WebsiteDataAllRecords
WebsiteDataRecord
MessageReceivedAcknowledgement
PasswordIconsCleanup
Window
http:
https:
B24@?0Q8@"NSObject<OS_xpc_object>"16
v24@?0@"NSObject<OS_xpc_object>"8@"NSError"16
WebBookmarksXPCConnectionErrorDomain
v16@?0@"NSObject<OS_xpc_object>"8
com.apple.WebBookmarks.WebBookmarksXPCConnectionQueue
_name
version
com.apple.SecondaryBookmarks.lock
%@.db
com.apple.WebBookmarks.WBSettingsTaskHandler.%p
Received a vnode event for bookmarks metadata file
Posted bookmarks metadata file changed notification
Error reading bookmarks metadata file with code: %zd
Read device identifier: %{private}@ from bookmarks metadata file, readonly: %d
Failed to write bookmarks metadata file to %{public}@
Received bookmarks metadata file change distributed notification
Posting bookmarks metadata file change distributed notification
Failed to copy the background image over. Error: %{public}@
-> %s(database: %{public}@)
@@ %s: Unlocking bookmark database
<- %s
@@ %s: Unlocking tabs database
## %s(deviceIdentifier: %@)
<- %s -> Return value redacted
-> %s()
<- %s -> database: NULL due to failure to obtain lock
@@ %s: Did successfully lock database
<- %s -> database: NULL due to failure to allocate WebBookmarkCollection
<- %s -> database: NULL due to not running in data access process with DAV enabled
<- %s -> database: %{public}@
-> %s(database: %{public}@, shouldSave: %d)
<- %s -> Return data of size: %{public}@
-> %s(database: %{public}@, data size: %{public}@)
<- %s -> %{public}@, %{public}@
-> %s(database: %{public}@, %{public}@)
XX %s: Client passed us a change token that does not match the current generation
XX %s: Could not clear the current change list
XX %s: Client requested that we remove the root folder
XX %s: Client requested that we remove item with server ID "%{public}@" but it does not exist
Deleting bookmark with ID %d and serverID %{public}@ from parent with ID %d
-> %s(item: %{public}@)
<- %s -> %{public}@
-> %s(item: %{public}@, %{public}@)
<- %s -> syncKey: %{public}@
-> %s(item: %{public}@, syncKey: %{public}@)
-> %s(item: %{public}@, data of size: %{public}@)
-> %s(change: %{public}@)
<- %s -> %d
<- %s -> (null)
-> %s(%{public}@)
<- %s -> %ld
-> %s(folder: %{public}@)
-> %s(bookmark: %{public}@)
<- %s -> CKBABookmarkTypeReadingListItem
<- %s -> CKBABookmarkTypeRegular
-> %s(database: %{public}@, start version: %{public}@)
<- %s -> %s
<- %s -> %lld
-> %s(database: %{public}@, migration state: %lld)
-> %s(database: %{public}@, account hash: %{public}@)
XX %s: CKBALocalID is an instance of %{public}@
XX %s: Client requested server IDs of children of local ID "%{public}@" but it does not exist or is not a folder!
-> %s(database: %{public}@, item: %{public}@, parentSyncServerId: %{public}@)
@@ %s: Parent server ID %{public}@ does not point to any item in the local database
Item was merged with %{private}@
@@ %s: Record %{public}@ was insert in parent record with server ID %{public}@
@@ %s: Record %{public}@ did move to parent record with server ID %{public}@
@@ %s: Record %{public}@ is already inside parent record with server ID %{public}@
-> %s(database: %{public}@, mode: %ld)
-> %s(database: %{public}@, %{public}@, %{public}@)
-> %s(database: %{public}@, request before targetItemId: %{public}@)
-> %s(database: %{public}@, request after targetItemId: %{public}@)
-> %s(database: %{public}@, folderServerId: %{public}@)
-> %s(item: %{public}@, parentRecordName: %@)
<- %s -> YES
<- %s -> NO
-> %s(item1: %{public}@, item2: %{public}@)
-> %s(database: %{public}@, folder type: %lld)
-> %s(database: %{public}@, bookmark type: %lld)
<- %s -> syncData %p of size: %ld
-> %s(change: %{public}@, syncData %p of size: %zd)
XX %s: Cannot set the sync data of a change that is not a Delete. Change type = %d, inserted = %d
XX %s: Cannot update the sync data of a Delete change that does exist in the database
## %s(%@)
## %s(attributes: %@)
@@ %s: Set title to value of length: %{public}@
@@ %s: Set title to value of length: (null)
@@ %s: Set last selected child ID to value of length: %{public}@
@@ %s: Set last selected child ID to null
@@ %s: Set URL to value of length: %{public}@
@@ %s: Set URL to value of length: (null)
-> %s(item: %{public}@, key: %{public}@)
## %s(value: %@)
<- %s -> Return value redacted; length: %{public}@
Connection to TabGroups sync agent was invalidated
Failed to decode _WBBookmarkSyncDataForPositionDecoding with exception: %{public}@
Failed to decode WBBookmarkSyncData with exception: %{public}@
Deleting windows with condition: %@
Delete invalid window %lli %@
Delete window %lli %@
%i windows deleted using condition: %@
%@ with result: %d error: %{public}@
Attempted to save a nil window state
Local tab group on window state has no bookmark
Failed to save local tab group while trying to save window state
Private tab group on window state has no bookmark
Failed to save private tab group while trying to save window state
Attempted to delete a nil window state
Prepare statement failed (%i)
WebBookmarks could not start a deferred transaction; sleeping and trying again later
WebBookmarks still could not start a deferred transaction; sleeping longer
WebBookmarks could not start a deferred transaction; bailing. Error was: %{public}s
WebBookmarks could not start a deferred transaction; bailing. Result code was: %d
%{public}@
WebBookmarks could not start an immediate transaction; sleeping.
WebBookmarks could not start an immediate transaction; sleeping longer.
WebBookmarks could not start an immediate transaction; bailing. Error was: %{public}s
WebBookmarks could not start an immediate transaction; bailing. Result code was: %d
Updating changes from in memory identifier %ld to database identifier %ld
Error converting in-memory changes into plist data: %@{public}
Failed to persist in-memory bookmarks changes plist: %{public}@
Error converting plist data to dictionary: %{public}@
Persisted bookmark changes plist is corrupted
Cannot create a Reading List item. URLs must begin with http or https.
Failed to open tab database
Failed to acquire tab collection lock
Saving browser state: %{public}@
Deleting tab group: %{public}@
The group to delete was not found %{public}@
Inserting tab group: %{public}@ after tab group: %{public}@
Moving tab group: %{public}@ after tab group: %{public}@
The group to reorder was not found %{public}@
Saving tab group: %{public}@
Deleting tabs: %{public}@
Inserting tabs into %{public}@: %{public}@
The group to add the tab to was not found: %{public}@
Reordering tab: %{public}@ after tab: %{public}@
The tab to reorder was not found: %{public}@
Replacing tab: %{public}@ with tab: %{public}@
The tab to replace was not found: %{public}@
Saving tab: %{public}@
The tab to save was not found: %{public}@
Updating tabs: %{public}@ in tab group %{public}@
Closing window state: %{public}@
Deleting window state: %{public}@
Deleting window states: %{public}@
Saving window state: %{public}@
Failed to open Bookmarks database. Acquired sync lock: %d, error: %{public}@.
Couldn't create bookmarks database at %{public}@
Refusing to remove corrupted bookmarks database at %{public}@: The path appears to be a directory.
Refusing to remove corrupted bookmarks database at %{public}@: The file is not named %{public}@.
Still could not open bookmarks database: %{public}@
Could not open bookmarks database: %{public}@
Removing corrupted bookmarks database %{public}@
Corrupted bookmarks saved as %{public}@
Also removed the journal file %{public}@.
Failed to remove the journal file at %{public}@.
Also removed the wal file %{public}@.
Failed to remove the wal file %{public}@.
Also removed the shm file %{public}@.
Failed to remove the shm file %{public}@.
Could not remove bookmarks database %{public}@
A table is missing from bookmarks database. The database is corrupt.
Table %{public}@ is missing from bookmarks database
Skipping integrity check because database is busy or locked (sqlite code = %d)
sqlite3_prepare_v2 failed for integrity_check with error code %d
sqlite3_step failed for integrity_check with error code %d
sqlite integrity_check returned a NULL pointer
Failed to migrate from bookmarks plist at path %{public}@ sync anchor plist path %{public}@
Unable to initialize WebBookmarkCollection. Nil was returned from +initSafariBookmarkCollectionCheckingIntegrity:
Starting to migrate and clean up Reading List archives
Failed to migrate Reading List archives; couldn't reset record status.
Failed to migrate Reading List archives; couldn't update record status to "pending" (error code = %d)
Failed to remove Reading List archive directory %{public}@: %{public}@
Failed to get list of archive directories: %{public}@
Failed to remove Reading List archive directory with UUID %{public}@: %{public}@
Failed to remove reading list archive at path %{public}@: %{public}@
Migrating Reading List web filter status
Starting to mark all Reading List items as allowed by Web Content Filter
Finished marking all Reading List items as allowed by Web Content Filter
Failed to mark all Reading List items as allowed by Web Content Filter with result code: %i
Read Safari bookmarks
Could not apply in-memory changes to database
Could not open a write transaction
Failed to save bookmark with UUID %{public}@: %{public}@
Failed to save bookmark %{public}@: Write transaction isn't valid
_saveBookmark:withSpecialID:updateGenerationIfNeeded: failed
Starting Reading List fetcher when saving bookmark with UUID %{public}@
No BookmarkImages directory exists, but bookmark had an icon UUID
Failed to delete bookmark icon: %{public}@
Deleted bookmark icon successfully
Moving bookmark with identifier %ld and parent ID %d to folder with identifier %ld
Moving bookmark with ID %d and parent ID %d to index %d
Failed to acquire lock when saving offline Reading List archive
Saving offline Reading List archive for bookmark with UUID %{public}@
Creating a directory for Reading List icons failed: %{public}@
Saving Reading List icon failed: %{public}@
Saving a bookmark failed
Saving a previously deleted bookmark failed
Moving bookmark %d to folder %d failed
Update %zu bookmarks with folder ID %d. There are %zu current bookmarks, and %zu will be deleted
Failed to save bookmark during update with error: %@
Failed to save and move bookmark during update with error: %@
Failed to reorder bookmark during update with error: %@
Number of children mismatch detected for bookmark with id: %d, parent: %d, expected number of children: %d, actual: %d
Could not fix number of children of folder with id: %d, error: %d, %{public}s
Failed to create a fresh database because we failed to lock sync
Got nil local attributes dictionary: %{public}@
Got nil reading list attributes dictionary, creating one
Bookmarks database appears to have skipped migration steps. Rerunning migration.
Warning: The web bookmarks database has a greater version number than expected. Restoring a database from a newer version is not supported.
Failed to migrate schema because we failed to lock sync
Couldn't get current version of bookmarks database.
Failed to import bookmarks with plist path %{public}@
Failed to remove old bookmarks plist at path %{public}@. Error: %{public}@
Failed to remove bookmarks sync anchor plist at path %{public}@. Error: %{public}@
Cannot insert bookmark with local ID %d into itself
Cannot insert bookmark with ID %d into parent with ID %d since it is a descendent
Could not move record %{public}@ with localID: %ld, server ID: %{public}@, to parent %d, error: %d
Could not reorder records in previous parent %d, error: %d
Failed to clear local bookmark tombstones
Failed to clear sync server ids. Sqlite error: %d
Clearing all DAV sync data, likely because the user is logging out
Failed to mark bookmrks as added during clearing sync data. Sqlite error: %d
Deleted bookmark with ID %d from parent with ID %d
Could not delete records recursively starting with localID: %d, error: %d
Error reading bookmark attributes: %{public}@
Cannot save bookmark: failed to update order index of bookmarks during insertion (%i)
Cannot save bookmark: failed to get hidden ancestor count (%i)
Could not insert record with server ID: %{public}@ into parent with ID: %d, error: %d
Refusing to save a bookmark with no address
Crashing since we can't save a bookmark with no address. Please file a bug.
Failed to save bookmark %{public}@: Invalid parentID %d
Could not update cached child count for parent ID %d in direction: %d, error: %d
Could not delete ancestor table entries for record %d, error: %d
Failed to increment bookmarks generation. Sqlite error: %d
Handling bookmarks metadata file change notification
WebBookmarks sync is not posting a change notification because the collection is not dirty
%{public}@ Please file a bug citing the following caller:
Failed to merge bookmarks with dictionary. Bookmarks dictionary is %{public}@
Could not insert ancestor table entry %{public}@ for bookmark %d, error: %d
Could not recursively update ancestor table entries for bookmark %d, error: %d
Applying in-memory delete change for %{public}@
Applying in-memory add change for %{public}@
Applying in-memory modify change for %{public}@ from %{public}@
Applying in-memory move change for %{public}@
Applying in-memory reorder change for %{public}@ after %{public}@
Applying in-memory replace change for %zu bookmarks in folder %d
Adding bookmark in memory with identifier %ld to folder with identifier %ld
Device identifier is empty
Looking up migration state for device identifier %{private}@
Local migration state read from database %{public}@
Failed to save local migration state %{public}@ to database
Failed to delete local migration state from sync properties. Sqlite error: %d
Received com.apple.bookmarks.BookmarksFileChanged
Failed to mark special bookmarks. Sqlite error: %d
Failed to delete existing bokmarks as part of merging with new set of bookmarks. SQlite error: %d
Failed to build the database with new set of bookmarks during bookmark merge
Failed to calculate cached children count during bookmark merge. Sqlite error: %d
Failed to restore missing special bookmarks during bookmark merge
Failed to rebuild ancestor table during bookmark merge
Failed to set sync properties value for key %{private}@. Sqlite error: %d
Failed to set sync data for key %{public}@. Sqlite error: %d
Bookmarks failed to begin sync transaction with result code: %i. SQL Error: %{public}s
Bookmarks failed to begin sync transaction with result code: %i
Failed to open bookmarks sync lock file at: %{public}s
Process %{public}@ did fail to acquire lock: %{public}@ (%d)
Process %{public}@ did acquire lock: %{public}@
Postponing unlockSync. The process %{public}@ has requested to hold the lock
Process %{public}@ did release lock: %{public}@
Attempting to unlock sync since last requestor has unheld the lock in process %{public}@
Setting sync notification type: %ld
Request sync client trigger sync
Requesting a CloudKit bookmarks sync due to local changes
Could not construct WFUserSettings. Default values will be used
num_children for bookmark %i has an invalid value %i
Retrying to fetch count without using num_children %i
Unable to instantiate tab collection because the specified collection type is not of tabs
Failed to instantiate tab collection because we failed to lock sync
Failed to instantiate tab collection because the underlying collection failed to set up
Update %lu pinned tabs and %lu private pinned tabs
Error reading bookmark extra attributes: %{public}@
Error reading bookmark local attributes: %{public}@
Setting bookmark with identifier %ld as its own parent
Setting bookmark identifier to its parent identifier %ld
Sync agent failed to save browser state with error: %{public}@
Deleting tab group: %{private}@
Sync agent failed to delete tab group with error: %{public}@
Inserting tab group: %{private}@ after tab group: %{private}@
Sync agent failed to insert tab group with error: %{public}@
Moving tab group: %{private}@ after tab group: %{private}@
Sync agent failed to move tab group with error: %{public}@
Saving tab group: %{private}@
Sync agent failed to save tab group with error: %{public}@
Deleting tabs: %{private}@
Sync agent failed to delete tabs with error: %{public}@
Inserting tabs into %{private}@: %{private}@
Sync agent failed to insert tabs with error: %{public}@
Reordering tab: %{private}@ after tab: %{private}@
Sync agent failed to move tab with error: %{public}@
Replacing tab: %{private}@ with tab: %{private}@
Sync agent failed to replace tab with error: %{public}@
Saving tab: %{private}@
Sync agent failed to save tab with error: %{public}@
Updating tabs: %{private}@
Sync agent failed to update tabs with error: %{public}@
Sync agent failed to close window state with error: %{public}@
Sync agent failed to delete window state with error: %{public}@
Sync agent failed to delete window states with error: %{public}@
Sync agent failed to save window state with error: %{public}@
Setting ReadingList item bookmark archive status to %{public}@ for bookmark with UUID %{public}@
Error calculating directory size getting directory subpaths for offline reading list item at path: %{public}@
Failed to delete %{public}@: %{public}@
Deleted %{public}@ as a result of deleting the bookmark
setShouldArchive: setting ReadingList item bookmark archive status to ReadingListArchiveStatusShouldArchive for bookmark with UUID %{public}@
setShouldArchive: setting ReadingList item bookmark archive status to ReadingListArchiveStatusPending for bookmark with UUID %{public}@
Detected duplicated tabs: %@
All tabs: %@
Trying to create WBBookmarkDatabaseSyncData from data of size %lu
Successfully created WBBookmarkDatabaseSyncData
Failed to create WBBookmarkDatabaseSyncData with exception: %{public}@
Writing sync data of size %lu to database
Clearing %@ tab groups
Failed to acquire tab collection lock after backing off to a %f second wait. Giving up.
Failed to acquire tab collection lock. Retrying after %f seconds.
Triggering tab group sync
Sync agent reset sync data. Triggering another sync.
Sync finished but local migration has not completed. Waiting for migration to complete.
Sync agent finished syncing
Timed out waiting for sync agent to finish syncing
Beginning to observe Tab Group updates
Timed out while waiting for Tab Group updates
Received notification of Tab Group updates
Expected tab groups after update but none were found. Continuing to wait.
Reloading tab groups from database
Unable to read tab group changes after database update because the database cannot be opened
Sending XPC message to delete all Website data
Error encountered while delivering XPC message to delete all website data. Error: %{public}@
Received acknowledgement that XPC message was delivered to delete all website data
Error encountered while delivering XPC message to delete individual website data. Error: %{public}@
Received acknowledgement that XPC message was delivered to delete individual website data
Error encountered while delivering XPC message to delete persistent URL cache storage. Error: %{public}@
Received acknowledgement that XPC message was delivered to delete persistent URL cache storage
Error encountered while delivering XPC message to delete Safari's history. Error: %{public}@
Received acknowledgement that XPC message was delivered to delete Safari's history
WBDatabaseLockAcquisitor: releasing database lock
WBDatabaseLockAcquisitor: successfully acquired database lock
WBDatabaseLockAcquisitor: failed to acquire database lock
WebBookmarksXPCConnection: No handler registered for the message %{public}s.
Ignoring incoming message because the message is nil.
Ignoring incoming message because the message type is %{public}s
Not queueing settings task with type %ld since one has already been scheduled.
Attempting to perform a webbookmarksd settings task while there is no current task set
Dropping settings task with type %ld because maximum retry count exceeded
Performing settings task with type: %ld
Skipping task with type %ld due to incorrect arguments
Marking current task with type %ld as finished. Attempting next available task
Successfully performed settings task with type: %ld
Settings task with type %ld finished with a non-xpc error %{public}@
Received error while performing settings task with type: %ld, error: %{public}@
softlink:o:path:/System/Library/PrivateFrameworks/WebContentAnalysis.framework/WebContentAnalysis
softlink:o:path:/System/Library/PrivateFrameworks/TextInput.framework/TextInput
WebBookmarkDeviceIdentifier
BAChangeRecord
WBSettingsSyncEngineAccess
WBSSettingsSyncEngineAccess
NSObject
WebBookmarkCloudKitSyncCollection
WebBookmarkProductionSafariCloudKitSyncTabCollection
BABookmarkItem
WBBookmarkDBAccess
WBSBookmarkDBAccess
WBTabGroupSyncAgentProtocol
WBTabGroupSyncAgentProxy
WBTabGroupSyncAgentProxyProtocol
WBBookmarkSyncData
NSCopying
NSSecureCoding
NSCoding
_WBBookmarkSyncDataForPositionDecoding
WBNSErrorExtras
WebBookmarkInMemoryChangeFilterUnreadOnly
WebBookmarkInMemoryChangeFilter
WBDuplicateBookmarkGroup
WebBookmarkChange
WBChange
WBSerializable
WebBookmarkTabCollection
WebBookmarkProductionSafariTabCollection
WBBrowserState
WebBookmarkChangeSet
CloudTabServices
WBReadingListPrivate
WBReadingList
WBTabGroupSyncAgent
WebBookmark
WBTab
WebBookmarkCollection
WBDatabaseLockAcquisitorDelegate
WBBookmarkProvider
Sync
WebBookmarkCollectionSyncFlags
WebBookmarksExtras
WBWindowState
WebBookmarkList
Internal
WBReadonlyTabCollection
WBStateProvider
WBTabProvider
WebBookmarkWebFilterSettings
WebBookmarkTitleWordTokenizer
WebBookmarkListQuery
WBTabCollection
WebBookmarkReadonlyCollection
WBWebsiteDataRecord
WBSavedStateManager
WBCollectionConfiguration
WBBookmarksDatabaseHealthInformation
ReadingList
ReadingListArchives
ReadingListInternal
WBSettingsTask
WBFeatureManager
WBTabGroup
WBReusableTabEntry
WBReusableTabManager
NSCacheDelegate
WBTabGroupManagerObserver
WBBookmarkDatabaseSyncData
WBTabCyclerCommandHandler
WBSCyclerTestTarget
_WBTabCyclerTabGroupUpdateObserver
SafariFetcherServerProxy
WebBookmarksXPCConnectionDelegate
WBTabGroupManager
WBWindow
WBNSDictionaryExtras
WebBookmarksSettingsGateway
WBDatabaseLockAcquisitor
WebBookmarksXPCConnection
WebBookmarksXPCListener
WBLocalTabAttributes
WBInMemoryChangeFilterVisible
WebBookmarkSecondaryCollection
WBSettingsTaskHandler
init
stringWithFormat:
UTF8String
_setUpWithPlistURL:readOnly:queue:
_createOrLoadMetaData
_setListensForMetaDataChangeNotification:
dealloc
defaultCenter
_metaDataDidChange:
addObserver:selector:name:object:
removeObserver:name:object:
fileSystemRepresentation
_cancelMonitoringMetaDataFile
postNotificationName:object:
_resumeMonitoringMetaDataFile
dataWithContentsOfURL:options:error:
code
propertyListWithData:options:format:error:
wb_stringForKey:isValid:
initWithUUIDString:
UUIDString
mutableCopy
setObject:forKeyedSubscript:
writeToURL:atomically:
_postWebBookmarkMetaDataChangeDistributedNotification:
dictionaryWithContentsOfURL:
removeObjectForKey:
clearDeviceIdentifierWithPlistURL:
initWithPlistURL:readOnly:
UUID
encounteredErrorWhileObtainingUUID
stopObservingChanges
description
isReadOnly
setReadOnly:
_listensForMetaDataChangeNotification
.cxx_destruct
_plistURL
_UUID
_encounteredErrorWhileObtainingUUID
_queue
_fileMonitor
_readOnly
listensForMetaDataChangeNotification
TB,N,G_listensForMetaDataChangeNotification,S_setListensForMetaDataChangeNotification:,V_listensForMetaDataChangeNotification
T@"NSUUID",R,N
TB,R,N
readOnly
TB,N,GisReadOnly,V_readOnly
_attributesMarkedAsModified:
array
addObject:
count
componentsJoinedByString:
isFolder
_changedAttributeDescription
length
_changeTypeDescription
identifier
serverID
wb_stringByRedactingBookmarkDAVServerID
initWithBookmarkCollection:bookmark:changeType:
collection
bookmark
changeType
_collection
_bookmark
_changeType
T@"WebBookmarkCollection",R,N,V_collection
T@"WebBookmark",R,N,V_bookmark
Ti,R,N,V_changeType
isEqualToString:
isCustomizationSyncEnabled
syncEnabled
safari_isCloudBackgroundImageRecord
_updateStartPageBackgroundImageWithRecord:
safari_isCloudSettingRecord
recordID
recordName
_settingForValue:
_updateStartPageSectionOrder:
_updateStartPageSectionVisibilityWithIdentifier:record:
_didUpdateStartPageBackgroundImageVisibilityWithRecord:
defaultManager
safari_startPageBackgroundImageFileURL
removeItemAtURL:error:
safari_browserDefaults
postNotificationName:object:userInfo:deliverImmediately:
objectForKeyedSubscript:
fileURL
path
isReadableFileAtPath:
URLByDeletingLastPathComponent
safari_ensureDirectoryExists:
copyItemAtURL:toURL:error:
safari_privacyPreservingDescription
safari_encryptedValues
startPageSectionsManager
boolValue
setSectionIdentifier:enabled:
safari_boolForKey:defaultValue:
setBool:forKey:
allSections
containsObject:
enumerateObjectsUsingBlock:
copy
setObject:forKey:
enabledSectionIdentifiers
setWithArray:
indexSet
addIndex:
setSectionsIdentifiers:enabledIndexes:
arrayForKey:
sectionIdentifiers
numberWithBool:
_isShowBackgroundImageEnabled
_startPageSectionOrder
arrayWithObjects:count:
integerForKey:
objectForKey:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
didReceiveRemoteCloudSettingsUpdateWithRecord:
didDeleteRemoteRecordWithID:
syncSettingsUpDictionary
backgroundImageExists
backgroundImageAppearanceIsLight
T@"NSArray",R,N
_lazyStartPageSectionsManager
dictionaryWithObjects:forKeys:count:
unlockSyncAsynchronously
initWithBookmarkCollection:bookmark:
setBookmark:
T@"WebBookmark",&,N,V_bookmark
initWithCollectionType:storeOwner:
_deviceIdentifierForCloudKitWithCollectionType:generateIfNeeded:
_resetDeviceIdentifierForCloudKitWithCollectionType:
createDatabase
openDatabase:
saveDatabase:
closeDatabase:shouldSave:
copySyncDataWithDatabase:
setSyncData:database:
clearAllSyncDataWithDatabase:
copyChangesWithDatabase:changeToken:
clearChangesWithChangeToken:database:
removeItemWithServerId:database:
beginMergingChangesWithDatabase:
finishMergingChangesWithDatabase:
copyServerIdWithItem:
setServerId:item:
copyParentServerIdWithItem:
copySyncKeyWithItem:
setSyncKey:item:
copySyncDataWithItem:
setSyncData:item:
changeTypeForChange:
copyChangedItemWithChange:
copyServerIdWithChange:
changeIsDAVMoveChange:
itemTypeForChange:
bookmarkTypeForChange:
folderTypeForChange:
copyDeviceIdentifier
resetDeviceIdentifier
performMaintenanceOnDatabase:afterVersion:
createDatabaseWithoutLock
saveBackupOfDatabase:withName:
localCloudKitMigrationState:
setLocalCloudKitMigrationState:database:
copyAccountHashWithDatabase:
setAccountHash:database:
copyChangeTokenWithDatabase:
copyItemWithLocalID:database:
copyLocalIDsInFolderWithLocalID:database:
copyItemWithServerId:database:
addItem:underFolderWithServerId:database:
performDeduplicationWithDatabase:mode:
copyServerIdsInFolderWithServerId:database:
setChildrenOrder:forFolderWithServerId:database:
copyServerIdInFolderBeforeServerId:database:
copyServerIdInFolderAfterServerId:database:
copyFirstServerIdInFolderWithServerId:database:
copyLastServerIdInFolderWithServerId:database:
itemTypeWithItem:
item:isInFolderWithServerSyncId:
item:isEqualToItem:
folderTypeWithFolder:
createFolderWithType:database:
bookmarkTypeWithBookmark:
createBookmarkWithType:database:
changeIsMoveChange:
copyDeletedBookmarkSyncDataWithChange:
setDeletedBookmarkSyncData:change:
copyModifiedAttributesWithChange:
copyAttributesWithItem:
setModifiedAttributes:item:
copyValueForKey:item:
clearlAllLocalBookmarksForAutomatedTestingWithDatabase:
initWithCollectionType:
collectionType
storeOwner
_collectionType
_storeOwner
Tq,R,N,V_collectionType
Tq,R,N,V_storeOwner
mainBundle
bundleIdentifier
hasPrefix:
safariBookmarkCollectionConfiguration
safariTabCollectionConfiguration
setStoreOwner:
lockSync
initWithConfiguration:checkIntegrity:
initSecondarySafariBookmarkCollectionWithName:
unlockSync
_syncType
_needsDeduplicationForBookmarkDAVWithHomeURL:
beginSyncTransaction
_deduplicateBookmarksForBookmarkDAVWithHomeURL:
rollbackSyncTransaction
commitSyncTransaction
_postBookmarksDidReloadNotificationAndStartReadingListFetcherIfChangesWereMade
_restoreMissingSpecialBookmarksWithChangeNotification:
syncDataForKey:
numberWithUnsignedInteger:
numberWithLong:
setSyncData:forKey:
_clearAllDAVSyncData
_changeList
_DAVGeneration
initWithInt:
intValue
_clearChangeList
_bookmarkWithServerID:excludeDeletedBookmarks:
isReadingListItem
clearReadingListArchiveWithUUID:
isReadingListFolder
clearAllReadingListArchives
parentID
_deleteBookmark:leaveTombstone:
_setMergeMode:
isInserted
_setServerID:forBookmark:
setServerID:
_serverIDForBookmarkID:
syncKey
_setSyncKey:forBookmark:
setSyncKey:
syncData
_setSyncData:forBookmark:
setSyncData:
specialID
safari_isVersionStringGreaterThanVersionString:
safari_isVersionStringBetweenVersionString:andVersionString:
fixCachedNumberOfChildrenIfNeeded
_localMigrationState
_setLocalMigrationState:generateDeviceIdentifierIfNeeded:
_accountHash
_setAccountHash:
numberWithInt:
bookmarkWithID:
_syncableBookmarksIDsInFolderWithBookmarkID:
_bookmarkIDForServerID:excludeDeletedBookmarks:
isMerging
_bookmarkWithSpecialID:
title
_mergeMode
_mergeCandidateFolderWithTitle:parent:mergeMode:
address
_mergeCandidateBookmarkWithTitle:address:parent:mergeMode:
_mergeBookmark:withOriginalBookmark:prioritizeOriginalBookmarkAttributes:generateChangesIfNeeded:
_markBookmarkID:added:
_setParentID:
_saveBookmark:withSpecialID:updateGenerationIfNeeded:
extraAttributes
wb_boolForKey:
_updateSelectedFavoritesFolderWithBookmarkID:wasFavoritesFolder:isFavoritesFolder:
_moveBookmark:toFolderWithID:detectCycles:
_deduplicateBookmarksForSyncingAndTrackChanges:considerBookmarksWithSyncDataAsUnique:
_serverIDsInFolderWithServerID:excludeDeletedBookmarks:
countByEnumeratingWithState:objects:count:
_orderChildrenWithServerIDs:inFolderWithServerID:excludeDeletedBookmarks:
safari_mapObjectsUsingBlock:
_serverIDBeforeServerID:
_serverIDAfterServerID:
_firstServerIDInFolderWithServerID:
_lastServerIDInFolderWithServerID:
isEqualToBookmark:
initFolderWithParentID:
_markSpecial:
initWithTitle:address:
initReadingListBookmarkWithTitle:address:previewText:
dictionary
null
wb_numberForKey:
configuration
lastSelectedChildID
URLWithString:
dateAdded
dateLastViewed
previewText
readingListIconURL
initWithDictionary:copyItems:
allKeysForObject:
removeObjectsForKeys:
setTitle:
setLastSelectedChildID:
setExtraAttributes:
_markAttributesAsModified:
absoluteString
setAddress:
setDateAdded:
setDateLastViewed:
setPreviewText:
wb_URLForKey:isValid:
setReadingListIconURL:
mergeWithBookmarksDictionary:clearHidden:clearSyncData:error:
postBookmarksDidReloadNotification
initWithMachServiceName:options:
applyChangeSet:completionHandler:
scheduleSyncIfNeeded
saveBrowserState:completionHandler:
deleteTabGroup:completionHandler:
insertTabGroup:afterTabGroup:completionHandler:
moveTabGroup:afterTabGroup:completionHandler:
saveTabGroup:completionHandler:
deleteTabs:completionHandler:
insertTabs:inTabGroup:afterTab:completionHandler:
reorderTab:afterTab:completionHandler:
replaceTab:withTab:completionHandler:
saveTab:completionHandler:
updateTabs:inTabGroup:completionHandler:
closeWindowState:completionHandler:
deleteWindowState:completionHandler:
deleteWindowStates:completionHandler:
saveWindowState:completionHandler:
interfaceWithProtocol:
setClasses:forSelector:argumentIndex:ofReply:
setRemoteObjectInterface:
setInvalidationHandler:
resume
invalidate
synchronousRemoteObjectProxyWithErrorHandler:
remoteObjectProxy
emptyChangeSetCompletionHandler
scheduleSendBarrierBlock:
emptyCompletionHandler
sharedProxy
applyChangeSet:canSafelyTerminateCompletionHandler:
saveBrowserState:canSafelyTerminateCompletionHandler:
T@"WBTabGroupSyncAgentProxy",R,N
_connection
integerValue
initForReadingFromData:error:
setClass:forClassName:
decodeObjectOfClass:forKey:
position
name
finishDecoding
initRequiringSecureCoding:
encodeObject:forKey:
encodedData
safari_initWithEncodedRecordData:
decodeObjectOfClasses:forKey:
decodeIntegerForKey:
safari_encodedSystemFieldsData
encodeInteger:forKey:
encodedBookmarkSyncData
syncDataWithContentsOfData:
dictionaryRepresentation
safari_dictionaryForKey:
initWithDictionaryRepresentation:
isValid
generationForKey:
incrementedGenerationWithDeviceIdentifier:
dictionaryWithObject:forKey:
supportsSecureCoding
positionFromContentsOfData:
copyWithZone:
encodeWithCoder:
initWithCoder:
TB,R
positionDictionaryRepresentation
setPositionDictionaryRepresentation:
hasGenerationForKey:
setGeneration:forKey:
incrementGenerationForKey:withDeviceIdentifier:
clearAllGenerationsExceptState
record
setRecord:
state
setState:
setPosition:
minimumAPIVersion
setMinimumAPIVersion:
modifiedAttributeMask
setModifiedAttributeMask:
_generations
_extraPositionData
_record
_state
_position
_minimumAPIVersion
_modifiedAttributeMask
T@"NSData",R,C,N
T@"CKRecord",&,N,V_record
Tq,N,V_state
T@"WBSCRDTPosition",&,N,V_position
TQ,N,V_minimumAPIVersion
T@"NSDictionary",C,N
TQ,N,V_modifiedAttributeMask
T@"WBSCRDTPosition",R,N,V_position
errorWithDomain:code:userInfo:
domain
wb_privacyPreservingDescription
wb_databaseOpenError
wb_featureDisabledError
wb_lockError
modifiedBookmarksInBookmarkFolder:
_bookmarksIDsFromBookmarks:fromChangeSet:withFilter:
changes
replayChangesOnBookmark:
attributesMarkedAsModify:
allObjects
bookmarkIDsModifiedInMemoryPassingFilterFromChangeSet:inFolder:
bookmarkIDsModifiedInMemoryNotPassingFilterFromChangeSet:inFolder:
shouldIncludeBookmarkAddedInMemory:
removeAllObjects
initWithOriginalBookmark:
duplicates
duplicatesToKeep
addDuplicateBookmark:replaceOriginal:
addDuplicateBookmarkToKeep:
exchangeOriginalBookmarkWithBookmark:
removeAllDuplicates
originalBookmark
foundDuplicates
_dupicateBookmarks
_dupicateBookmarksToKeep
_foundDuplicates
_originalBookmark
T@"WebBookmark",R,N,V_originalBookmark
TB,R,N,V_foundDuplicates
initWithBookmark:bookmarkID:parentID:changeType:
initWithBookmark:bookmarkID:parentID:associatedBookmarkID:changeType:
initWithBookmarks:parentID:changeType:
initWithBookmarks:specialFolderID:changeType:
initWithBookmarks:parentID:specialFolderID:changeType:
_setUsedForInMemoryChangeTracking:
_setModifiedAttributesIfSupported
wb_numberForKey:isValid:
wb_dictionaryForKey:isValid:
initWithDictionaryRepresentationForInMemoryChangeTracking:
wb_arrayForKey:isValid:
safari_mapAndFilterObjectsUsingBlock:
encodeInt32:forKey:
dictionaryRepresentationForInMemoryChangeTracking
encodeInt64:forKey:
decodeInt32ForKey:
decodeInt64ForKey:
setSpecialFolderID:
setModifiedAttributes:
setBookmarks:
localAttributes
setLocalAttributes:
numberWithInteger:
numberWithUnsignedLongLong:
valueForKey:
isSyncable
_stringForType:
bookmarkAddChangeWithBookmark:
bookmarkModifyChangeWithBookmark:
deleteChangeWithBookmark:
moveChangeWithBookmark:toFolderWithID:
reorderChangeWithBookmark:afterBookmark:
replaceChangeWithBookmarks:inFolderWithID:
replaceChangeWithBookmarks:inFolderWithSpecialID:
T@"NSDictionary",R,C,N
updateChangeAfterUpdatingInMemoryID:withDatabaseID:
shouldSync
Tq,R,N
initWithBookmarkID:parentID:changeType:
initWithBookmarkID:parentID:associatedBookmarkID:changeType:
applyModificationsToBookmark:
bookmarkID
setBookmarkID:
setParentID:
associatedBookmarkID
setAssociatedBookmarkID:
specialFolderID
modifiedAttributes
bookmarks
_bookmarkID
_parentID
_associatedBookmarkID
_specialFolderID
_modifiedAttributes
_bookmarks
Ti,N,V_bookmarkID
Ti,N,V_parentID
Ti,N,V_associatedBookmarkID
Ti,N,V_specialFolderID
Tq,R,N,V_changeType
TQ,N,V_modifiedAttributes
T@"NSArray",C,N,V_bookmarks
safariDirectoryPath
stringByAppendingPathComponent:
fileURLWithPath:
_trackChangesInMemoryIfDatabaseWriteIsNotAllowed
inMemoryChangesFileURL
initWithFileURL:
_createSchema
createWindowsTable
createWindowsTabGroupsTable
_executeSQL:
_executeSQLWithCString:
_createSpecialTabsFolderWithUUIDIfNeeded:
_createSpecialFolderWithIDIfNeeded:
_deleteMatchingWindows:logAsError:
_fastFetchBookmarksInBookmarkFolder:options:offset:limit:
_deleteBookmarks:leaveTombstone:
performDatabaseUpdatesWithTransaction:secureDelete:
vacuum
truncateWAL
uuid
sceneID
initWithUUID:sceneID:
tabs
_resetBookmark:
localTabGroup
privateTabGroup
setTabs:
activeTabGroupUUID
bookmarkWithUUID:
tabGroupForBookmark:
setActiveTabGroup:
tabGroupsToActiveTabs
safari_dictionaryByMergingWithDictionary:
activeTabUUIDForTabGroupWithUUID:
setActiveTabUUID:forTabGroupWithUUID:
saveWindow:
activeTabGroup
initWithUUID:activeTabGroupUUID:localTabGroup:privateTabGroup:sceneID:windowID:
windowStateWithUUID:
saveWindowState:
_uuidForQueries:
removeAllChanges
applyInMemoryChangesToDatabase
windows
_deleteAllWindowStates
_fastFetchBookmarksInBookmarkFolder:includingHiddenBookmarks:
_migrateWindow:
_logErrorWithMessage:result:
listWithID:
bookmarkArray
initWithBookmark:
tabsForTabGroupBookmark:
safari_firstObjectPassingTest:
initWithBookmark:tabs:lastSelectedTabUUID:
_errorForMostRecentSQLiteError
_setInserted:
_setID:
_setOrderIndex:
windowsFolderSpecialID
listWithSpecialID:
_windowWithBookmark:
listWithID:skipOffset:includeHidden:
objectAtIndexedSubscript:
setType:
bookmarkWithID:includingInMemoryChanges:
initWithBookmark:activeTabGroup:localTabGroup:privateTabGroup:
_windowStatesWithFilter:
firstObject
_windowIDForUUID:
_tabGroupWithID:
_addActiveTabsToWindowState:
_saveAndMoveBookmark:toFolderID:
_updateBookmarks:inFolderWithID:
performDatabaseUpdatesWithTransaction:applyInMemoryChanges:secureDelete:
dateClosed
timeIntervalSinceReferenceDate
_saveWindowState:forApplyingInMemoryChanges:
_saveWindowState:
_saveWindowState:activeTabGroupID:localTabGroupID:privateTabGroupID:
setIdentifier:
_saveActiveTabID:inTabGroupWithID:windowID:
enumerateKeysAndObjectsUsingBlock:
date
setDateClosed:
_deleteWindowState:forApplyingInMemoryChanges:
_deleteWindowState:
windowStates
_specialTabFolderUUIDsForQueries
_databaseTitleForSpecialID:
_specialTabFolderUUIDs
_setUUID:
_setSyncable:
_specialTabsWithUUID:
_syncLockFileName
inMemoryChangeSet
_setupInMemoryChangeSet
performMaintenance
_migrateWindowState:
_migrateSchemaVersion43ToVersion44
_migrateSchemaVersion44ToVersion45
logRegulatoryBookmarksRead
maintainsSyncMetadata
windowWithUUID:
lastClosedWindowState
lastSessionWindowStates
recentlyClosedWindowStates
deleteAllWindows
closeWindowState:
deleteWindowState:
deleteWindowStates:
deleteAllWindowStates
_deleteAllLocalTabsAndGroups
_markTabsClosed:
_markWindowStatesAsLastSession:
pinnedTabs
pinnedTabsFolderID
privatePinnedTabs
privatePinnedTabsFolderID
recentlyClosedTabs
recentlyClosedTabList
_cachedPinnedTabsFolderID
_cachedPrivatePinnedTabsFolderID
T@"NSArray",R,C,N
Ti,R,N
T@"WebBookmarkList",R,C,N
T@"WBWindowState",R,N
initWithPinnedTabs:privatePinnedTabs:windows:
initWithPinnedTabs:privatePinnedTabs:windowStates:
setPinnedTabs:
setPrivatePinnedTabs:
setWindows:
setWindowStates:
_pinnedTabs
_privatePinnedTabs
_windows
_windowStates
T@"NSArray",C,N,V_pinnedTabs
T@"NSArray",C,N,V_privatePinnedTabs
T@"NSArray",C,N,V_windows
T@"NSArray",C,N,V_windowStates
callStackSymbols
initWithFileURL:readPersistedChanges:
orderedSet
_readPersistedChanges
addChanges:
safari_containsObjectPassingTest:
_addChange:
_coalesceChangesForChangeIfNeeded:
_removeChange:
removeObject:
_removeAllChanges
insertObject:atIndex:
safari_insertObject:afterObject:
addObjectsFromArray:
dataWithPropertyList:format:options:error:
writeToURL:options:error:
nextBookmarkIDForAddingBookmarkInMemory
addChange:
removeChange:
bookmarksAfterReplayingChangesToBookmarks:inFolderWithID:
isBookmarkDeleted:
deletedBookmarkIDsInBookmarkFolder:
addedBookmarksInBookmarkFolder:
numberOfAddedBookmarksInBookmarkFolder:
numberOfReorderedBookmarksInBookmarkFolder:
folderHasReplaceChange:
updateAddChangesWithInMemoryBookmarkID:toDatabaseGeneratedID:
bookmarkIsAddedInMemory:
applyModificationsToBookmarks:
persistChangesWithCompletion:
_lastBookmarkIDForAddingInMemoryBookmark
_changes
_bookmarkIDToChanges
_associatedIDToChanges
_folderIDToChildrenChanges
_folderIDToDeletedChildrenChanges
_folderIDToAddedChildrenChanges
_folderIDToModifiedChildrenChanges
_folderIDToReorderedChildrenChanges
_fileURL
T@"NSURL",R,C,N,V_fileURL
initClientForMachService:
_serverConnection
messageWithName:
sendMessage:
didToggleCloudTabs:terminateAfterUpdating:
clearAllCloudTabDevices
clearTabsForCurrentDevice
didToggleCloudTabs:
_trimmedTitle:
_trimmedPreviewText:
sharedFeatureManager
isOfflineReadingListAvailable
startReadingListFetcher
_addReadingListItemWithURL:title:previewText:
_webBookmarks_isHTTPFamilyURL
_init
exceptionWithName:reason:userInfo:
supportsURL:
defaultReadingList
T@"WBReadingList",R,N
addReadingListItemWithURL:title:previewText:error:
_private
_serialQueue
initWithConfiguration:
applyInMemoryChanges:
error
tabWithUUID:
adoptAttributesFromTab:
initWithUUID:title:url:
setSyncable:
saveBrowserState:
_performOnTabCollectionQueue:scheduleSync:completionHandler:
privacyPreservingDescription
tabGroupWithUUID:
deleteTabGroup:
insertTabGroup:afterTabGroup:
moveTabGroup:afterTabGroup:
lastSelectedTabUUID
setLastSelectedTabUUID:
saveTabGroup:
deleteTabs:
insertTabs:inTabGroup:afterTab:
reorderTab:afterTab:
replaceTab:withTab:
saveTab:
_readPropertiesOfBookmark:
updateTabs:inTabGroup:
_applyChangeSet:completionHandler:
tabCollection
setTabCollection:
_configuration
_tabCollection
T@"WBCollectionConfiguration",R,N,V_configuration
T@"WBTabCollection",&,N,V_tabCollection
initWithTitle:address:parentID:
_uniqueExternalUUID
setValue:forKey:
initBuiltinDeviceBookmarkWithTitle:address:
string
shortTypeDescription
appendFormat:
descriptionPreservingPrivacy:
wb_bestURLForUserTypedString
isEqualToDictionary:
initBuiltinBookmarkWithTitle:address:
initCarrierBookmarkWithTitle:address:
initWhiteListBookmarkWithTitle:address:
initFrequentlyVisitedSiteWithWebBookmark:title:
localizedTitle
isBookmarksBarFolder
isBookmarksMenuFolder
isWebFilterWhiteListFolder
isFrequentlyVisitedSitesFolder
isBuiltinBookmark
isEditable
isDeletable
isHidden
needsSyncUpdate
setNeedsSyncUpdate:
fetchedIconData
setFetchedIconData:
iconData
setIconData:
_folder
_title
_url
_serverID
_syncKey
_syncData
_syncMetadata
_editable
_deletable
_hidden
_syncable
_fetchedIconData
_iconData
_addedLocally
_archiveStatus
_webFilterStatus
_extraAttributes
_localAttributes
_specialID
_lastSelectedChildID
_orderIndex
_inserted
_needsSyncUpdate
_usedForInMemoryChangeTracking
TB,N,V_needsSyncUpdate
T@"NSString",C,N,V_title
T@"NSString",C,N,V_url
Ti,R,N,V_parentID
Ti,R,N,V_id
T@"NSString",R,C,N,V_UUID
Ti,R,N,V_specialID
Ti,N,V_lastSelectedChildID
editable
TB,R,N,GisEditable,V_editable
deletable
TB,R,N,GisDeletable,V_deletable
hidden
TB,R,N,GisHidden,V_hidden
folder
TB,R,N,GisFolder,V_folder
inserted
TB,R,N,GisInserted,V_inserted
syncable
TB,R,N,GisSyncable,V_syncable
TB,N,V_fetchedIconData
T@"NSData",C,N,V_iconData
T@"NSDictionary",C,N,V_extraAttributes
T@"NSDictionary",C,N,V_localAttributes
T@"NSString",R,C,N
setUrl:
setModified:
allocWithZone:
type
initWithString:
safari_isHTTPFamilyURL
_addressFromURL:
tabGroup
initWithUUID:
initWithTitle:url:
isPrivateTab
syncableURL
setTabGroup:
isIdentical:
duplicate
didAddToTabGroup:
didRemoveFromTabGroup:
markClean
isEmpty
wasModified
wasAdded
setAdded:
wasMoved
setMoved:
_modified
_added
_moved
_tabGroup
modified
TB,N,GwasModified,V_modified
added
TB,N,GwasAdded,V_added
moved
TB,N,GwasMoved,V_moved
T@"WBLocalTabAttributes",&,N
TB,N,GisSyncable
T@"WBTabGroup",W,N,V_tabGroup
T@"NSString",C,N
T@"NSURL",&,N
T@"NSURL",R,N
_isDatabaseWriteAllowed
initWithWebBookmarkCollectionClass:
setDelegate:
_openDatabaseAtPath:checkIntegrity:error:
isLockedSync
fileExistsAtPath:isDirectory:
_defaultDatabaseFileNameForCollectionType:
_primaryCollection
lastPathComponent
isReadonly
setHandler:
_removeCorruptedBookmarksDatabaseAtPath:
userInfo
syncSetString:forKey:
skipsExternalNotifications
_registerForSyncBookmarksFileChangedNotification
_metaDataFileChanged:
stringByAppendingPathExtension:
_web_pathWithUniqueFilenameForPath:
moveItemAtPath:toPath:error:
_web_removeFileOnlyAtPath:
stringByAppendingString:
fileExistsAtPath:
_userVersion
_enableForeignKeys
_enableAutoVacuum
_createFreshDatabase
_errorForMostRecentSQLiteErrorWithErrorCode:
_verifyAllTablesExist:
_checkDatabaseIntegrity
_migrateToCurrentSchema
initWithUTF8String:
databasePath
stringByResolvingSymlinksInPath
databasePathForConfiguration:
_setupWithPath:migratingBookmarksPlist:syncAnchorPlist:checkIntegrity:
_setupWithPath:checkIntegrity:
_migrateBookmarksPlist:syncAnchorPlist:
initWithCollectionType:databasePath:readonly:
objectAtIndex:
readingListArchivesDirectoryPath
enumeratorAtPath:
attributesOfItemAtPath:error:
fileSize
contentsOfDirectoryAtPath:error:
readingListFolderBookmarkID
archiveStatus
removeItemAtPath:error:
_safariFetcherServerProxy
sharedWebFilterSettings
userSettings
_readingListItemsWhere:filteredBy:withInMemoryFilter:
contentFilterOverridesEnabled
whiteListEnabled
markWebContentFilterAllowsAllReadingListItems
contentFilterListsAllowURL:
setWebFilterStatus:
saveBookmark:startReadingListFetcher:
initWithFormat:
initWithBookmarksWhere:orderBy:usingFilter:
initWithQuery:skipOffset:collection:
bookmarkCount
initWithCalendarIdentifier:
setDay:
dateByAddingComponents:toDate:options:
compare:
purgeableReadingListItems
archiveSize
setArchiveStatus:
setDateLastArchived:
saveBookmark:
clearArchiveSynchronously
createIfNeeded
_simulateCrashWithDescription:
_inMemoryChangeSet
_selectBookmarksWhere:
_finalizeStatementIfNotNull:
_initWithSqliteRow:
appendString:
isWebFilterWhiteListOnlyModeEnabled
rootBookmark
subarrayWithRange:
lastObject
descendantsOfBookmarkFolder:
bookmarkContainsLeafBookmark:
_intFromExecutingSQL:
listWithID:skipOffset:
listWithID:skipOffset:includeHidden:includeDescendantsAsChildren:filteredUsingString:
initWithFolderID:inCollection:usingFilter:options:
readingListWithUnreadOnly:filteredUsingString:
insertString:atIndex:
initWithBookmarksWhere:folderID:orderBy:usingFilter:
setInMemoryFilter:
favoritesFolder
webFilterWhiteListFolderBookmarkID
arrayWithObject:
frequentlyVisitedSitesFolderBookmarkID
_webBookmarks_hasCaseInsensitivePrefix:
_parentIdentifiersOfBookmarksNeedingIcons
_specialIDForBookmarkBeingSaved:
_postBookmarksChangedSyncNotification
_postBookmarksSpecialFoldersDidChangeNotification
unsignedIntValue
_postBookmarksFolderContentsDidChangeNotification:
_saveBookmark:startReadingListFetcher:forApplyingInMemoryChanges:
_startReadingListFetcher
_deleteBookmark:postChangeNotification:forApplyingInMemoryChanges:
readingListIconUUID
bookmarkImagesDirectoryPath
_incrementGeneration
deleteBookmark:postChangeNotification:
clearArchive
_deleteIconForBookmark:
_moveBookmark:toFolderWithID:
_moveBookmark:toIndex:
_reorderBookmark:toIndex:
_generateSyncPositionForBookmark:
syncMetadata
_saveSyncMetadataForBookmarkIfNeeded:
moveBookmark:toIndex:
bookmarkAtIndex:
_moveBookmarkAtIndex:toIndex:
setShouldArchive:
saveBookmarks:postNotification:
setReadingListIconUUID:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
writeToFile:options:error:
moveBookmark:toFolderWithID:
_bookmarkUUIDsInFolderWithID:
safari_splitArrayUsingCondition:
first
second
orderedSetWithArray:
indexOfObject:
safari_longestIncreasingSubsequenceUsingValues:
orderIndexOfBookmark:
_reorderBookmark:afterBookmark:
characterAtIndex:
stringWithString:
stringWithCharacters:length:
replaceCharactersInRange:withString:
rangeOfString:options:
_normalizeSearchString:
_enumerateBookmarksForMatchStatement:normalizedQuery:usingBlock:
_web_possibleURLPrefixesForUserTypedString
_addBookmarksForReadingListMatchStatement:normalizedQuery:toArray:maxResults:
sortUsingComparator:
arrayWithCapacity:
removeObjectsInRange:
_firstBookmarkWithURLMatchingString:prefixMatch:inParent:
readingListWithUnreadOnly:
_reverseOrderIndex:
stringValue
_postBookmarksDidReloadNotification
_tableExpressionForArchiveMode:
_orderedWhereClauseForArchiveMode:automaticArchivingEnabled:
_selectBookmarksWhere:returnType:
_orderedWhereClauseForArchiveMode:
isFullArchiveAvailable
rollingListOfArchivedReadingListItems
_cullReadingListBookmarksList:toSize:
_bookmarkHasSyncedToServer:
_clearAndCreateBookmarksTables
_clearAndCreateAncestorTable
_clearAndCreateBookmarksTitleWordTable
_indexAllTitleWords
_normalizeDatabaseURLs
_rebuildAncestorTable
dateWithTimeIntervalSince1970:
initWithObjects:forKeys:
deleteAllFavoriteIcons
markAllFavoritesAsNeedingIcons
writeToFile:atomically:
_migrateSchemaVersion3ToVersion4
_migrateSchemaVersion4ToVersion5
_migrateSchemaVersion5ToVersion6
_migrateSchemaVersion6ToVersion7
_migrateSchemaVersion7ToVersion8
_migrateSchemaVersion8ToVersion9
_migrateSchemaVersion9ToVersion10
_migrateSchemaVersion10ToVersion11
_migrateSchemaVersion11And12And13ToVersion14
_migrateSchemaVersion14ToVersion15
_migrateSchemaVersion15ToVersion16
_migrateSchemaVersion16AndVersion17AndVersion18ToVersion19
_migrateSchemaVersion21ToVersion22
_migrateSchemaVersion22ToVersion23
_migrateSchemaVersion23ToVersion24
_migrateSchemaVersion24ToVersion25
_migrateSchemaVersion0ToVersion1
_migrateSchemaVersion1And2ToVersion3
_migrateSchemaVersion19And20ToVersion21
_migrateSchemaVersion25ToVersion26
_migrateSchemaVersion26ToVersion27
_migrateSchemaVersion27ToVersion28
_migrateSchemaVersion28ToVersion29
_migrateSchemaVersion29ToVersion30
_migrateSchemaVersion30ToVersion31
_migrateSchemaVersion31ToVersion32
_migrateSchemaVersion32ToVersion33
_migrateSchemaVersion33ToVersion34
_migrateSchemaVersion34ToVersion35
_migrateSchemaVersion35ToVersion36
_migrateSchemaVersion36ToVersion37
_migrateSchemaVersion37ToVersion38
_migrateSchemaVersion38ToVersion39
_migrateSchemaVersion39Or40ToVersion41
_migrateSchemaVersion41ToVersion42
_migrateSchemaVersion42ToVersion43
_rerunMigrationsIfNecessary
_importBookmarksPlist:
_importSyncAnchorPlist:
_insertAncestorTableEntriesForBookmarkID:withAncestorIDs:
_restoreBookmarkBarIfMissing
_restoreOrMergeReadingListFolderWithChangeNotification:
restoreOrMergeWhiteListFolderAndContentsWithChangeNotification:
frequentlyVisitedSitesFolderCreatingIfNeeded:postChangeNotification:
stringWithUTF8String:
initWithDomain:code:userInfo:
_orderIndexForBookmarkInsertedIntoParent:insertAtBeginning:
_updateCachedChildCountForParentID:inDirection:
_clearSyncKeysUnderBookmarkID:isFolder:
_insertTombstoneWithServerID:syncData:
_deleteAncestorTableEntriesForBookmarkID:
_insertAncestorTableEntriesForBookmarkID:withParentID:
bytes
_clearAllSyncKeys
_clearAllTombstones
_isTombstoneWithServerID:
_insertTombsonesRecursivelyForRootFolder:
_deleteRecursively:descendantsOnly:
_insertTombsonesRecursivelyHelperCurrentDepth:folder:
isAddedLocally
webFilterStatus
_specialIDForBookmarkTitle:
_childrenOfParentBookmarkAreUnsyncable:
_addBookmarkWithTitle:address:parentID:orderIndex:isFolder:externalUUID:associatedBookmark:updateParentChildCount:updateAncestorEntries:
_setHidden:
_updateHiddenAncestorCountForBookmarksUnderFolderID:addingOffset:
_markBookmarkID:withSpecialID:
_reindexBookmarkID:title:
_wb_stringByStandardizingDAVServerID
cStringUsingEncoding:
_serverIDOfSiblingBookmarkWithServerID:immediatelyBeforeOrAfter:
_firstOrLastServerIDInFolderWithServerID:isFirst:
_cloudKitSyncMetadataFileNameWithCollectionType:
setSyncMetadata:
removeObjectAtIndex:
reverseObjectEnumerator
_unsafeOrderChildrenWithServerIDs:inFolderWithServerID:excludeDeletedBookmarks:
setString:
advanceToNextToken
_clearTitleWordsForBookmarkID:
_indexBookmarkID:title:
initWithCString:encoding:
_collectChangesOfType:withClause:intoArray:
_incrementDAVGeneration
_updateSyncNotificationType
_setSyncNotificationType:
postNotificationName:object:userInfo:
setFavoritesFolderIdentifier:postChangeNotification:
syncStringForKey:
bookmarksBarBookmark
_favoritesFolderIdentifier
frequentlyVisitedSitesFolderCreatingIfNeeded:
dictionaryWithContentsOfFile:
mergeWithBookmarksDictionary:clearHidden:error:
whiteListAllowedSites
_restoreOrMergeWhiteListFolderAndContentsWithWebFilterWhiteList:ensureChildCount:postChangeNotification:
webFilterWhiteListFolder
_ensureFolderChildrenCount:
webFilterWhiteList
removeObjectsAtIndexes:
arrayByAddingObject:
folderID
_fastFetchBookmarksInBookmarkFolder:options:offset:limit:includingInMemoryChanges:
_initWithSqliteRow:hasIcon:
initWithTopLevelDuplicateBookmarksCount:allDuplicateBookmarksCount:
safari_isSafariFamilyApplicationBundle
_createInMemoryChangeSet
_applyInMemoryChanges:postChangeNotification:
_applyInMemoryChange:fromChangeSet:updatedBookmarks:
releaseLock
_deleteBookmarkInMemory:
acquireLockWithTimeout:
_enumerateContentsOfBookmarkFolder:includingSubfolders:usingBlock:
deduplicateBookmarksWithRootFolder:depth:
_deduplicateBookmarksWithRootFolder:depth:trackChanges:considerBookmarksWithSyncDataAsUnique:davHomeURL:
dataRepresentation
initWithDataRepresentation:relativeToURL:
_appendDuplicateBookmarkGroupsInBookmarks:toGroups:considerBookmarksWithSyncDataAsUnique:davHomePath:
_bookmark:hasCurrentDAVHomePath:
_deleteAndRebuildAncestorTableRecords
_recalculateCachedChildrenCountAndOrderIndices
_fetchBookmarkIDsInFolder:onlyFolders:includingHiddenBookmarks:
safari_isSpecialFolderRecordName
_bookmark:isDuplicateOfBookmark:
_bookmark:hasPriorityOverBookmarkForDeduplication:prioritizeBookmarksWithSyncData:davHomePath:
addEntriesFromDictionary:
cleanUpRedundantPreviewText
favoritesFolderSelectionShouldSync
_deviceIdentifierForCloudKitWithCollectionType:
_syncSetString:forKey:updatedExistingKey:
nextDatabaseSyncChangeID
positionBetweenPosition:andPosition:withDeviceIdentifier:changeID:
databaseSyncDataWithContentsOfData:
databaseSyncData
nextChangeID
encodedDatabaseSyncData
isSyncAllowed
readingListArchivesDiskUsage
safariBookmarkCollection
databaseLockAcquisitor:acquiredLock:
enumerateBookmarks:andReadingListItems:matchingString:usingBlock:
bookmarksMatchingString:
readingListBookmarksMatchingString:maxResults:onlyArchivedBookmarks:
databaseHealthInformation
leafChildCountForBookmarksInFolderWithID:
leafChildCountForFoldersInFolderWithID:
T@"WebBookmarkChangeSet",R,N
T@"WebBookmarkCollection",R,N
TQ,R,N
initWithPath:migratingBookmarksPlist:syncAnchorPlist:
cleanUpReadingListArchives
markArchivedReadingListItemsAsNonRecoverable
updateReadingListWebFilterStatusForUnsetItemsOnly:
localeSettingsChanged
purgeableSpace
purge:
validBookmarkUUIDsFromUUIDs:
readingListFolder
bookmarkAtPath:
subfoldersOfID:
parentIdentifierOfBookmark:
modifiedAttributesOfBookmark:
identifierOfBookmarkWithUUID:
rootList
bookmarksBarList
shouldFetchIconForBookmark:
bookmarksNeedingIcons
deleteBookmarks:postChangeNotification:
deleteBookmark:
reorderBookmark:toIndex:
reorderList:moveBookmarkAtIndex:toIndex:
saveArchiveForReadingListBookmarkWithID:
saveArchivesForReadingListBookmarks:
deleteArchiveForReadingListBookmarkWithID:
saveIconWithData:urlString:forBookmark:
saveAndMoveBookmark:toFolderID:
_saveAndMoveBookmarks:toFolderID:
updateBookmarks:inFolderWithID:secureDelete:
_prefixSearch:usingColumns:maxCount:
_bookmarksFromStatementSelectingIDs:withQuery:
firstReadingListBookmarkWithURLMatchingString:prefixMatch:
indexOfReadingListBookmark:countingOnlyUnread:
countReadingListBookmarksNeedingArchiveInMode:automaticArchivingEnabled:
countReadingListBookmarksNeedingArchiveInMode:
firstReadingListBookmarkNeedingArchiveInMode:automaticArchivingEnabled:
firstReadingListBookmarkNeedingArchiveInMode:
readingListBookmarksNeedingArchiveInMode:automaticArchivingEnabled:
readingListBookmarksNeedingArchiveInMode:
rollOutLastReadingListItem
rollOutReadingListItemIfNeededToMakeRoomForOneNewItem
rollingReadingListMaximumCount
clearCarrierBookmarks
migrateReadingListIconsFromDatabaseToBookmarkImagesDirectory
_rootFolderHiddenChildrenClause
_sqliteStatementWithQuery:
_sqliteStatementWithQuery:runInBlock:
_syncKeysForServerIDs:
_serverIDAtOrderIndex:inFolderWithServerID:
_clearCachedFavoritesFolderIdentifier
setFavoritesFolder:localOnly:
favoritesFolderList
bookmarkIsFavoritesFolder:
bookmarkIsInFavoritesFolder:
frequentlyVisitedSitesFolder
frequentlyVisitedSitesList
clearFrequentlyVisitedSitesFolder
bookmarkIsFrequentlyVisitedSite:
fastFetchBookmarksInBookmarkList:
_fastFetchBookmarksInBookmarkFolder:includingInMemoryChanges:
hasInMemoryChanges
deleteBookmarkInMemory:
deleteBookmarksInMemory:inFolder:
addBookmarkInMemory:toFolderWithID:
modifyBookmarkInMemory:
moveBookmarkInMemory:toFolderWithID:
reorderBookmarkInMemory:afterBookmark:
replaceBookmarksInMemory:inFolderWithID:
deduplicateBookmarks
_usesCloudKit
_test_preventPeriodicallyApplyingInMemoryChangesToDatabase
test_restoreMissingSpecialBookmarks
_locale
_wordTokenizer
_rootBookmark
_dirty
_setupFinished
_databaseLockAcquisitor
_lastObservedLocalMigrationState
merging
TB,R,N,GisMerging
T@"WebBookmark",R,N
T@"WebBookmarkList",R,N
T@"NSNumber",R,C,N
substringToIndex:
timeIntervalSince1970
_addChildrenOfID:toCollection:recursive:error:
_bookmarkDictionaryForSqliteRow:recursive:error:
_syncAdd:toParent:withOrderIndex:error:
_mergeChildrenOfID:referencingBase:error:
_markSpecialBookmarks
_deleteSyncPropertyForKey:
_syncPropertyExistsForKey:
dataWithBytes:length:
_isLockedSync
_syncFlags
syncLockFileDescriptor
_lockSync
setUnlockSyncRequested:
setSyncLockFileDescriptor:
_unlockSync
lockSyncHoldRequestorPointers
postSyncNotificationWhenUnlocking
_postBookmarksChangedSyncNotificationOnSyncQueue
setPostSyncNotificationWhenUnlocking:
valueWithPointer:
unlockSyncRequested
setSyncNotificationType:
syncAllowed
syncNotificationType
userDidUpdateBookmarkDatabase
initWithSyncAllowed:
bookmarksDictionary
removePersistedInMemoryBookmarkChangesFile
generation
containsOnlyStockBookmarks
_cloudKitLocalMigrationState
holdLockSync:
unholdLockSync:
TB,R,D,N
_syncAllowed
_postSyncNotificationWhenUnlocking
_unlockSyncRequested
_syncLockFileDescriptor
_syncNotificationType
_lockSyncHoldRequestorPointers
TB,R,N,V_syncAllowed
Ti,N,V_syncLockFileDescriptor
Tq,N,V_syncNotificationType
TB,N,V_postSyncNotificationWhenUnlocking
T@"NSMutableSet",R,N,V_lockSyncHoldRequestorPointers
TB,N,V_unlockSyncRequested
strongToStrongObjectsMapTable
componentsWithString:
_wb_stringByDeletingTrailingSlash
hasSuffix:
safari_stringByRedactingBookmarkDAVServerID
safari_bestURLForUserTypedString
_web_bestURLForUserTypedString
safari_stringForKey:
setTabGroupsToActiveTabs:
decodeIntForKey:
encodeInt:forKey:
safari_numberForKey:
safari_dateForKey:
timeIntervalSinceNow
distantFuture
safari_boolForKey:
initWithDictionaryRepresentation:localTabGroup:privateTabGroup:
customUnifiedFieldText
isFavoritesBarHidden
isMinimized
isPopupWindow
prefersSidebarVisible
isPrivateWindow
isTabBarHidden
removeActiveTabUUIDForTabGroupWithUUID:
removeAllActiveTabUUIDs
setActiveTabGroupUUID:
setSceneID:
_tabGroupsToActiveTabs
_identifier
_activeTabGroupUUID
_dateClosed
_localTabGroup
_privateTabGroup
_sceneID
_uuid
Ti,N,V_identifier
T@"NSString",C,N,V_activeTabGroupUUID
T@"NSDate",&,N,V_dateClosed
T@"WBTabGroup",R,N,V_localTabGroup
T@"WBTabGroup",R,N,V_privateTabGroup
T@"NSString",C,N,V_sceneID
T@"NSDictionary",C,N,V_tabGroupsToActiveTabs
T@"NSString",R,C,N,V_uuid
initWithBytes:length:
_bookmarkAtIndex:paginate:
isCustomQuery
bookmarksInCollection:fromIndex:toIndex:
_loadBookmarksForDifferenceFromList:
_arrayForDifferenceCalculation
differenceFromArray:withOptions:
bookmarkArrayRequestingCount:
differenceFromList:withOptions:
_bookmarkCount
_skipOffset
_query
TI,R,N
countInCollection:
readonlySafariTabCollectionConfiguration
hasCompletedMigration
isPersistent
browserState
lastSessionBrowserState
tabGroups
tabsForTabGroup:
maximumTabsPerGroup
setMaximumTabsPerGroup:
TQ,N
completedMigration
TB,R,N,GhasCompletedMigration
persistent
TB,R,N,GisPersistent
T@"WBBrowserState",R,N
initWithUserName:
restrictionType
T@"WebBookmarkWebFilterSettings",R,N
reloadSettings
isWebFilterEnabled
_userSettings
T@"WFUserSettings",R,N
webFilterEnabled
TB,R,N,GisWebFilterEnabled
webFilterWhiteListOnlyModeEnabled
TB,R,N,GisWebFilterWhiteListOnlyModeEnabled
currentHandler
handleFailureInFunction:file:lineNumber:description:
setString:withSearchRange:
longCharacterIsMember:
initialize
_string
_stringLength
_rangeOfNextToken
_startOfUnclassifiedRangeBeforeNextToken
addCharactersInRange:
_normalizeUserTypedString:
_preparePrefixesFromNormalizedString:
_childCountInDatabaseForFolderFetchInCollection:skipCountingInDatabaseBookmarksThatAreDeletedInMemory:countShouldUseNumChildrenIfPossible:
_listQueryType
_sqliteNotInConditionForInMemoryModifiedAndDeleted:bookmarksInFolder:collection:
_sqliteInConditionForInMemoryModifiedBookmarksInFolder:collection:
_filterBookmarks:
_childCountInDatabaseForFolderFetchInCollection:skipCountingInDatabaseBookmarksThatAreDeletedInMemory:
_inMemoryAddedChildrenCountForBookmarkFolder:collection:skipCountingBookmarksThatAreDeletedInMemory:
safari_filterObjectsUsingBlock:
substringWithRange:
inMemoryFilter
_queryWithOrderBy
_orderBy
_titleWordPrefixes
_titleWordPrefixesForInMemoryFiltering
_urlFilter
_includeHidden
_countShouldUseNumChildrenIfPossible
_includeDescendantsAsChildren
_customQuery
_folderID
_inMemoryFilter
customQuery
TB,R,N,GisCustomQuery,V_customQuery
Ti,R,N,V_folderID
T@"<WebBookmarkInMemoryChangeFilter>",&,N,V_inMemoryFilter
whitespaceAndNewlineCharacterSet
formUnionWithCharacterSet:
punctuationCharacterSet
componentsSeparatedByCharactersInSet:
indexOfObjectPassingTest:
_createInternalQueue
isInMemoryDatabase
_updatePinnedTabs:privatePinnedTabs:
_bookmarksForTabs:
truncateToNumberOfTabs:
_deleteTabGroup:leaveTombstone:
isPrivate
_insertBookmark:afterBookmark:inFolderWithID:
_reorderTab:afterTab:
_bookmarksForTabs:syncable:
initWithTabCollection:
setCompletedMigration:
deleteAllLocalSavedState
saveRecentlyClosedTabs:
deleteAllRecentlyClosedTabs
insertTab:inTabGroup:afterTab:
_resultOnInternalQueue:
_internalQueue
_maximumTabsPerGroup
T@"WebBookmarkTabCollection",R,N,V_collection
T@"WBCollectionConfiguration",R,N
TB,N,GhasCompletedMigration
T@"NSError",R,N
TQ,N,V_maximumTabsPerGroup
readonlySafariBookmarkCollectionConfiguration
initReadonlySafariBookmarkCollection
decodeBoolForKey:
initWithArray:
encodeBool:forKey:
numberWithUnsignedInt:
isEqualToData:
T@"NSData",C,N
T@"WBBookmarkSyncData",&,N
_initWithDomain:
_initWithDomain:usage:
websiteDataRecordWithDomain:
websiteDataRecordFromXPCDictionary:
XPCDictionaryRepresentation
usage
setUsage:
_domain
_usage
T@"NSObject<OS_xpc_object>",R,C,N
T@"NSString",R,C,N,V_domain
TQ,N,V_usage
applicationProxyForIdentifier:placeholder:
dataContainerURL
_web_createDirectoryAtPathWithIntermediateDirectories:attributes:
initWithTabGroupSyncAgentProxy:
_isDatabaseEnabled
allTabs
ephemeralManager
T@"WBSavedStateManager",R,N
updateTabsInTabGroup:
tabGroupSyncAgentProxy
isEphemeral
_isEphemeral
_tabGroupSyncAgentProxy
T@"<WBTabGroupSyncAgentProxyProtocol>",R,N,V_tabGroupSyncAgentProxy
TB,R,N,V_isEphemeral
initWithCollectionType:databasePath:readonly:createIfNeeded:
setSkipsExternalNotifications:
inMemoryBookmarkCollectionConfiguration
inMemoryTabCollectionConfiguration
pptTabCollectionConfiguration
_isReadonly
_createIfNeeded
_skipsExternalNotifications
_databasePath
TB,R,N,V_isReadonly
TB,R,N,V_createIfNeeded
T@"NSString",R,C,N,V_databasePath
TB,N,V_skipsExternalNotifications
Tq,N,V_storeOwner
topLevelDuplicateBookmarksCount
allDuplicateBookmarksCount
_topLevelDuplicateBookmarksCount
_allDuplicateBookmarksCount
TQ,R,N,V_topLevelDuplicateBookmarksCount
TQ,R,N,V_allDuplicateBookmarksCount
_readingListPropertyNamed:
_modifyExtraReadingListAttributes:
_stringForReadingListArchiveStatus:
_modifyLocalReadingListAttributes:
isEqualToDate:
localPreviewText
stringByTrimmingCharactersInSet:
stringByReplacingOccurrencesOfString:withString:options:range:
setAddedLocally:
dateLastArchived
dateLastFetched
setDateLastFetched:
setTitle:previewText:dateLastFetched:
setNextPageURLs:
nextPageURLs
setLocalPreviewText:
hasFetchedMetadata
setHasFetchedMetadata:
addedLocally
TB,N,GisAddedLocally
Tq,N
T@"NSDate",&,N
TB,N
_wb_userVisibleString
fileType
subpathsOfDirectoryAtPath:error:
_sizeForFileOrDirectory:withAttributes:
_removeDirectoryAtPath:
webarchivePathInReaderForm:fileExists:
webarchivePathForNextPageURL:
offlineArchiveDirectoryPath
shouldReattemptArchiveWithAutomaticArchivingEnabled:
shouldArchive
fullArchiveAvailable
TB,R,N,GisFullArchiveAvailable
initWithType:websiteDataRecord:
taskWithType:
taskForDeletingIndividualWebsiteDataWithRecord:
taskType
websiteDataRecord
_taskType
_websiteDataRecord
Tq,R,N,V_taskType
T@"WBWebsiteDataRecord",R,N,V_websiteDataRecord
_updateToAccessLevel:
T@"WBFeatureManager",R,N
accessLevel
_offlineReadingListAvailable
_favoritesFolderSelectionShouldSync
_accessLevel
Tq,R,N,V_accessLevel
offlineReadingListAvailable
TB,R,N,GisOfflineReadingListAvailable,V_offlineReadingListAvailable
TB,R,N,V_favoritesFolderSelectionShouldSync
sharedConnection
isEphemeralMultiUser
setHidden:
initWithTitle:uuid:
initWithBookmark:tabs:lastSelectedTabUUID:type:
safari_arrayForKey:
stringWithCapacity:
arrayByAddingObjectsFromArray:
isEqualToArray:
insertions
object
associatedIndex
removals
isLocal
insertTabs:afterTab:
removeTabs:
safari_insertObjects:afterObject:
removeObjectsInArray:
replaceObjectAtIndex:withObject:
safari_allObjectsPassTest:
initWithTitle:
displayTitle
htmlString
tabsUUIDSet
tabsAreIdentical:
appendTab:
appendTabs:
clearTabs
insertTab:afterTab:
removeTab:
updateTab:
clearDeletedTabs
detectDuplicatedTabs
displayTitleProvider
setDisplayTitleProvider:
deletedTabs
_tabs
_overflowRemoteTabs
_deletedTabs
_displayTitleProvider
_lastSelectedTabUUID
_type
Ti,N
T@"NSArray",R,C,N,V_deletedTabs
T@?,C,N,V_displayTitleProvider
T@"NSString",C,N,V_lastSelectedTabUUID
T@"NSArray",C,N
Tq,N,V_type
T@"NSSet",R,N
sharedAggregateDictionary
incrementKey:
setValue:forScalarKey:
initWithReusableTab:
reusableTab
dateCreated
_reusableTab
_dateCreated
T@"<WBReusableTab>",R,N,V_reusableTab
T@"NSDate",R,N,V_dateCreated
setCountLimit:
tabGroupManager
addTabGroupObserver:
_scheduleCleanup
_cleanUp
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
allGroupsTabsUUIDs
_addTabUUIDsFromGroup:toSet:
evictFromTabReuse
sharedManager
cache:willEvictObject:
tabGroupManagerDidFinishSetup:
tabGroupManagerDidUpdateTabGroups:
tabGroupManager:didRemoveTabGroup:
tabGroupManager:didUpdateTabGroup:
tabGroupManager:didUpdateTabsInTabGroup:
tabGroupManager:didUpdateTab:userDriven:
T@"WBReusableTabManager",R,N
addReusableTab:
reuseTabForUUID:
isTabSuspended:
_referenceToTabWithUUID:
enumerateReusableTabs:
_uuidToTabCache
_reusing
_cleanupTimer
_pendingCleanup
T@"NSSet",R,C,N
floatForKey:
archivedDataWithRootObject:requiringSecureCoding:error:
databaseSyncDataInDatabase:databaseAccessor:
writeToDatabase:databaseAccessor:
lastServerChangeToken
setLastServerChangeToken:
didNotSaveRecordsAfterMigration
setDidNotSaveRecordsAfterMigration:
_lastChangeID
_didNotSaveRecordsAfterMigration
_lastServerChangeToken
T@"CKServerChangeToken",C,N,V_lastServerChangeToken
TB,N,V_didNotSaveRecordsAfterMigration
initWithNotificationName:
initWithTitle:uniqueIdentifier:
_cyclerRepresentationOfTabGroup:
addChild:
_clearRemoteTabGroupsWithCompletionHandler:
_clearLocalTabGroupsWithCompletionHandler:
_clearLocalTabGroupsWithCompletionHandler:retryCooldown:
timerWithTimeInterval:repeats:block:
mainRunLoop
addTimer:forMode:
_startMonitoringTabGroupUpdateExpectingMigration:completionHandler:
_reloadTabGroupsFromDatabase
_startMonitoringSyncStatusWithCompletionHandler:
removeTabGroup:
_tabGroupBeforeIndex:
_tabBeforeIndex:inGroup:
_tabGroupWithIdentifier:
_deleteTabGroup:reply:
_tabWithIdentifier:
_deleteTab:reply:
_setTitle:forTabGroup:reply:
_setTitle:forTab:reply:
_triggerTabGroupSync
setNotificationHandler:
setTimeoutHandler:
waitWithTimeout:
observeTabGroupManager:waitForTabGroups:handler:
_cyclerRepresentationOfTab:
initWithURL:title:uniqueIdentifier:
fetchTopLevelBookmarkList:
clearBookmarksWithOptions:completionHandler:
createBookmarkWithTitle:url:inListWithIdentifier:atIndex:reply:
createBookmarkListWithTitle:inListWithIdentifier:atIndex:reply:
deleteBookmarkWithIdentifier:reply:
moveBookmarkWithIdentifier:intoListWithIdentifier:atIndex:reply:
setTitle:forBookmarkWithIdentifier:reply:
setURL:forBookmarkWithIdentifier:reply:
syncBookmarksWithCompletionHandler:
initWithTabGroupManager:
_tabGroupUpdateObserver
_syncAgentNotificationObserver
_clearLocalTabGroupsRetryTimer
_tabGroupManager
T@"WBTabGroupManager",R,N,V_tabGroupManager
initWithTabGroupManager:handler:
startObserving
_timeout
removeTabGroupObserver:
_handler
_timeoutTimer
_waitForTabGroups
didFinishFetching
setHandler:forMessageNamed:
didUpdateProgressWithMessage:
didStartFetchingReadingListItemWithMessage:
didStopFetchingReadingListItemWithMessage:
bookmarksServerProxy:didStartFetchingReadingListItem:
bookmarksServerProxy:didStopFetchingReadingListItem:
bookmarksServerProxy:didUpdateReadingListFetchingProgress:
bookmarksServerProxyDidFinishFetching:
connection:didCloseWithError:
delegate
_delegate
T@"<WebBookmarksClientDelegateProtocol>",W,N,V_delegate
weakObjectsPointerArray
_readTabGroups
_tabGroupSyncDidFinish:
notifyDidFinishSetup
notifyDidUpdateTabGroups
notifyDidRemoveTabGroup:
notifyDidUpdateTabGroup:
notifyDidUpdateTab:userDriven:
notifyDidUpdateTabsInTabGroup:
_compareInMemoryTabGroups:withTabGroups:
addPointer:
compact
removePointerAtIndex:
initWithTabProvider:savedStateManager:
tabProvider
_groups
_observers
_savedStateManager
_tabProviderAccessQueue
_tabProvider
T@"<WBTabProvider>",R,N,V_tabProvider
initWithUUID:activeTabGroup:localTabGroup:privateTabGroup:sceneID:
updateActiveTabGroup
_updateExtraAttributesUsingBlock:
_activeTabGroup
T@"WBTabGroup",&,N,V_activeTabGroup
T@"NSString",R,N
wb_objectOfType:forKey:isValid:
wb_dateForKey:isValid:
sendMessage:withReplyHandler:
getSafariWebDataUsageWithCompletion:
deleteAllSafariSecurityOriginsWithCompletionHandler:
deleteSafariWebsiteDataRecord:completionHandler:
deleteSafariPersistentURLCacheStorageWithCompletionHandler:
getSafariDataUsageByteCountWithCompletionHandler:
clearAllSafariHistoryWithCompletionHandler:
scheduleBookmarksDatabaseMaintenance
scheduleBookmarksDatabaseMigrationTask
scheduleHSTSSuperCookieCleanup
schedulePasswordIconsCleanup
acquireLockWithTimeout:retryInterval:
_attemptToLockSyncAndNotifyDelegateOnFailure:
_startTimerWithTimeout:retryInterval:
_stopTimer
_retryTimerFired:
_timer
_webBookmarkCollectionClass
_lockAcquired
_maxRetryCount
_retryCount
T@"<WBDatabaseLockAcquisitorDelegate>",W,N,V_delegate
_handleMessage:
initWithConnection:
setMessageHandlers:
hasBoolEntitlement:
connection
_messageHandlers
_entitlementLookupCache
_connectionQueue
T@"NSObject<OS_xpc_object>",R,N,V_connection
T@"<WebBookmarksXPCConnectionDelegate>",W,N,V_delegate
_handleIncomingConnection:
initListenerForMachService:
_listenerConnection
_clientConnections
unsignedIntegerValue
decodeDoubleForKey:
initWithVersion:safeToLoadWebPage:lastVisitTime:sessionStateData:ancestorTabUUIDs:dateClosed:tabIndex:windowUUID:disposable:pinned:pinnedPageURL:pinnedPageTitle:muted:queuedNavigation:displayingStandaloneImage:readerViewTopScrollOffset:readingListBookmarkID:openedFromLink:showingReader:
encodeDouble:forKey:
safari_arrayContainingObjectsOfClass:forKey:
safari_dataForKey:
doubleValue
safari_originalDataAsString
numberWithDouble:
initWithLastVisitTime:sessionStateData:ancestorTabUUIDs:displayingStandaloneImage:readerViewTopScrollOffset:readingListBookmarkID:openedFromLink:showingReader:queuedNavigation:
isDisplayingStandaloneImage
readerViewTopScrollOffset
readingListBookmarkID
wasOpenedFromLink
isShowingReader
isSafeToLoadWebPage
lastVisitTime
sessionStateData
ancestorTabUUIDs
isDisposable
isPinned
pinnedPageURL
pinnedPageTitle
isMuted
queuedNavigation
tabIndex
windowUUID
_displayingStandaloneImage
_openedFromLink
_showingReader
_isSafeToLoadWebPage
_isDisposable
_isPinned
_isMuted
_readingListBookmarkID
_readerViewTopScrollOffset
_lastVisitTime
_sessionStateData
_ancestorTabUUIDs
_pinnedPageURL
_pinnedPageTitle
_queuedNavigation
_tabIndex
_windowUUID
displayingStandaloneImage
TB,R,N,GisDisplayingStandaloneImage,V_displayingStandaloneImage
Td,R,N,V_readerViewTopScrollOffset
Ti,R,N,V_readingListBookmarkID
openedFromLink
TB,R,N,GwasOpenedFromLink,V_openedFromLink
showingReader
TB,R,N,GisShowingReader,V_showingReader
TB,R,N,V_isSafeToLoadWebPage
T@"NSDate",R,C,N,V_lastVisitTime
T@"NSData",R,C,N,V_sessionStateData
T@"NSArray",R,C,N,V_ancestorTabUUIDs
T@"NSDate",R,C,N,V_dateClosed
TB,R,N,V_isDisposable
TB,R,N,V_isPinned
T@"NSURL",R,C,N,V_pinnedPageURL
T@"NSString",R,C,N,V_pinnedPageTitle
TB,R,N,V_isMuted
T@"NSDictionary",R,C,N,V_queuedNavigation
TQ,R,N,V_tabIndex
T@"NSString",R,N,V_windowUUID
isBookmarkVisible:
_enqueueTask:
_shouldEnqueueTask:
_performNextTask
_attemptCurrentTask
_finishCurrentTask
_currentTaskAttemptDidFinishWithError:
enqueueTask:
startBackgroundTaskAssertionBlock
setStartBackgroundTaskAssertionBlock:
finishBackgroundTaskAssertionBlock
setFinishBackgroundTaskAssertionBlock:
_tasks
_currentTask
_currentRetryCount
_settingsGateway
_backgroundTaskAssertionToken
_startBackgroundTaskAssertionBlock
_finishBackgroundTaskAssertionBlock
T@?,C,N,V_startBackgroundTaskAssertionBlock
T@?,C,N,V_finishBackgroundTaskAssertionBlock
v24@0:8@16
@28@0:8@16B24
v36@0:8@16B24@28
v16@0:8
v20@0:8B16
@16@0:8
B16@0:8
@"NSURL"
@"NSUUID"
@"NSObject<OS_dispatch_queue>"
@"NSObject<OS_dispatch_source>"
@36@0:8@16@24i32
i16@0:8
@"WebBookmarkCollection"
@"WebBookmark"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v24@0:8@"CKRecord"16
v24@0:8@"CKRecordID"16
@"NSArray"16@0:8
q24@0:8@16
v32@0:8@16@24
@"WBSStartPageSectionManager"
@32@0:8@16@24
r^v16@0:8
v24@0:8r^v16
v28@0:8r^v16B24
r^{__CFData=}24@0:8r^v16
v32@0:8r^{__CFData=}16r^v24
r^{__CFArray=}32@0:8r^v16r^^v24
v32@0:8r^v16r^v24
v32@0:8r^{__CFString=}16r^v24
r^{__CFString=}24@0:8r^v16
i24@0:8r^v16
r^v24@0:8r^v16
B24@0:8r^v16
q24@0:8r^v16
B32@0:8r^v16@24
v32@0:8r^v16@24
v32@0:8q16r^v24
@24@0:8r^v16
v32@0:8@16r^v24
r^v32@0:8@16r^v24
@32@0:8@16r^v24
B40@0:8r^v16@24r^v32
v32@0:8r^v16q24
v40@0:8@16@24r^v32
B32@0:8r^v16r^v24
r^v32@0:8q16r^v24
B32@0:8r^v16@"NSString"24
v32@0:8r^v16@"NSString"24
@"NSData"24@0:8r^v16
v32@0:8@"NSData"16r^v24
@"NSSet"32@0:8@16r^v24
r^v32@0:8@"NSString"16r^v24
B40@0:8r^v16@"NSString"24r^v32
@"NSSet"32@0:8@"NSString"16r^v24
v40@0:8@"NSArray"16@"NSString"24r^v32
@"NSString"32@0:8@"NSString"16r^v24
@"NSDictionary"24@0:8r^v16
v32@0:8@"NSDictionary"16r^v24
@32@0:8@"NSString"16r^v24
@24@0:8q16
@32@0:8q16q24
v24@0:8^v16
v28@0:8^v16B24
r^{__CFData=}24@0:8^v16
v32@0:8^{__CFData=}16^v24
r^{__CFArray=}32@0:8^v16r^^v24
v32@0:8^v16^v24
v32@0:8^{__CFString=}16^v24
r^{__CFString=}24@0:8^v16
i24@0:8^v16
r^v24@0:8^v16
B24@0:8^v16
q24@0:8^v16
B32@0:8^v16@24
v32@0:8^v16@24
v32@0:8q16^v24
@24@0:8^v16
v32@0:8@16^v24
r^v32@0:8@16^v24
@32@0:8@16^v24
B40@0:8^v16@24^v32
v32@0:8^v16q24
v40@0:8@16@24^v32
B32@0:8^v16^v24
r^v32@0:8q16^v24
q16@0:8
v32@0:8@16@?24
v40@0:8@16@24@?32
v48@0:8@16@24@32@?40
v32@0:8@"WebBookmarkChangeSet"16@?<v@?B@"NSArray"@"NSError">24
v32@0:8@"WBBrowserState"16@?<v@?B@"NSError">24
v32@0:8@"WBTabGroup"16@?<v@?B@"NSError">24
v40@0:8@"WBTabGroup"16@"WBTabGroup"24@?<v@?B@"NSError">32
v32@0:8@"NSArray"16@?<v@?B@"NSError">24
v48@0:8@"NSArray"16@"WBTabGroup"24@"WBTab"32@?<v@?B@"NSError">40
v40@0:8@"WBTab"16@"WBTab"24@?<v@?B@"NSError">32
v32@0:8@"WBTab"16@?<v@?B@"NSError">24
v40@0:8@"NSArray"16@"WBTabGroup"24@?<v@?B@"NSError">32
v32@0:8@"WBWindowState"16@?<v@?B@"NSError">24
v32@0:8@"WebBookmarkChangeSet"16@?<v@?>24
v32@0:8@"WBBrowserState"16@?<v@?>24
@?16@0:8
@"NSXPCConnection"
@24@0:8@16
@24@0:8^{_NSZone=}16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
v24@0:8q16
v24@0:8Q16
@"NSMutableDictionary"
@"NSDictionary"
@"CKRecord"
@"WBSCRDTPosition"
@28@0:8@16i24
@"NSArray"28@0:8@"WebBookmarkChangeSet"16i24
B24@0:8@"WebBookmark"16
@40@0:8@16@24@?32
v28@0:8@16B24
@"NSMutableArray"
@24@0:8@"NSDictionary"16
@"NSDictionary"16@0:8
v24@0:8i16i20
@36@0:8@16i24q28
@40@0:8@16i24i28q32
@32@0:8i16i20q24
@36@0:8i16i20i24q28
@44@0:8@16i24i28i32q36
B24@0:8Q16
v20@0:8i16
@"NSArray"
B20@0:8B16
B28@0:8@16B24
@20@0:8i16
v28@0:8@16i24
i24@0:8@16
B36@0:8@16i24i28i32
B28@0:8i16i20i24
@40@0:8@16@24@32
B20@0:8i16
Q20@0:8i16
v24@0:8@?16
@"NSMutableOrderedSet"
v24@0:8B16B20
v40@0:8@16@24@32
@"WebBookmarksXPCConnection"
B48@0:8@16@24@32^@40
@"WBReadingListPrivate"
v36@0:8@?16B24@?28
@"WBCollectionConfiguration"
@"WBTabCollection"
@20@0:8B16
@"NSString"
@"NSData"
@"WBBookmarkSyncData"
@"WBTabGroup"
@28@0:8q16B24
v28@0:8@"WBDatabaseLockAcquisitor"16B24
v40@0:8B16B20@24@?32
@28@0:8B16@20
@32@0:8@16I24B28
v40@0:8B16B20@"NSString"24@?<v@?@"NSString"@"NSString"@?<@"WebBookmark"@?>>32
@"NSArray"24@0:8@"NSString"16
@"WebBookmarkList"28@0:8B16@"NSString"20
@"NSArray"32@0:8@"NSString"16I24B28
@"WebBookmark"20@0:8i16
@"WBBookmarksDatabaseHealthInformation"16@0:8
@"NSDictionary"20@0:8i16
B36@0:8@16B24^@28
B24@0:8^i16
B44@0:8@16@24@32B40
Q24@0:8Q16
B28@0:8@?16B24
B32@0:8@?16B24B28
@24@0:8i16B20
I24@0:8@16
Q24@0:8@16
@24@0:8i16I20
@28@0:8i16I20B24
@40@0:8i16I20B24B28@32
B32@0:8@16B24B28
B28@0:8@16i24
B28@0:8@16I24
B32@0:8@16@24
B32@0:8@16I24I28
B32@0:8@16i24B28
^{sqlite3_stmt=}36@0:8@16r*24I32
@32@0:8r*16@24
v44@0:8@16@24@32i40
Q28@0:8@16B24
Q28@0:8q16B24
Q24@0:8q16
v32@0:8@16Q24
I24@0:8i16B20
@32@0:8@16B24i28
@44@0:8@16@24i32q36
^{sqlite3_stmt=}24@0:8@16
^{sqlite3_stmt=}32@0:8@16q24
i24@0:8^{sqlite3_stmt=}16
i32@0:8@16@?24
i24@0:8r*16
B24@0:8i16B20
B32@0:8Q16@24
B68@0:8@16@24i32I36B40@44@52B60B64
B24@0:8i16i20
i28@0:8@16B24
@28@0:8I16@20
B36@0:8@16@24B32
v24@0:8^{__CFString=}16
B28@0:8i16@20
v36@0:8i16@20@28
v24@0:8i16B20
@24@0:8B16B20
v32@0:8@16B24B28
@36@0:8i16Q20i28i32
@40@0:8i16Q20i28i32B36
v32@0:8i16B20@?24
B28@0:8i16Q20
B24@0:8B16B20
B44@0:8i16Q20B28B32@36
B44@0:8@16@24B32@36
v44@0:8@16@24B32@36
@28@0:8i16B20B24
B40@0:8@16@24B32B36
v28@0:8i16B20B24
B28@0:8q16B24
^{sqlite3=}
^{__CFLocale=}
@"WebBookmarkTitleWordTokenizer"
@"SafariFetcherServerProxy"
@"WBDatabaseLockAcquisitor"
@36@0:8^{sqlite3_stmt=}16B24^@28
B40@0:8i16@20B28^@32
B40@0:8@16i24I28^@32
B36@0:8i16@20^@28
B40@0:8@16B24B28^@32
B40@0:8@16@24^B32
@"NSMutableSet"
@60@0:8@16@24@32@40@48i56
@"NSDate"
@20@0:8I16
@24@0:8I16B20
I16@0:8
@32@0:8@16Q24
@"WebBookmarkListQuery"
@36@0:8@16I24@28
v24@0:8I16I20
I20@0:8I16
@"NSArray"24@0:8@"WBTabGroup"16
@"WBTabGroup"24@0:8@"NSString"16
@"WBTab"24@0:8@"NSString"16
@"WBWindow"24@0:8@"NSString"16
@"WBWindowState"24@0:8@"NSString"16
@"WBBrowserState"16@0:8
@"WFUserSettings"
{_NSRange=QQ}16@0:8
@"TIWordTokenizer"
{_NSRange="location"Q"length"Q}
@44@0:8i16@20@28Q36
@44@0:8@16i24@28@36
i32@0:8@16B24B28
i32@0:8i16@20B28
@32@0:8B16i20@24
@28@0:8i16@20
@32@0:8@16I24I28
@"<WebBookmarkInMemoryChangeFilter>"
B40@0:8@16@24@32
B24@0:8@?16
B36@0:8@16@24i32
@"WebBookmarkTabCollection"
@24@0:8^{sqlite3_stmt=}16
@28@0:8^{sqlite3_stmt=}16B24
v20@0:8I16
@"<WBTabGroupSyncAgentProxyProtocol>"
@36@0:8q16@24B32
@40@0:8q16@24B32B36
@32@0:8Q16Q24
@28@0:8B16^B20
Q32@0:8@16@24
@32@0:8q16@24
@"WBWebsiteDataRecord"
@48@0:8@16@24@32q40
@"<WBReusableTab>"
v32@0:8@"NSCache"16@24
v36@0:8@16@24B32
v24@0:8@"WBTabGroupManager"16
v32@0:8@"WBTabGroupManager"16@"WBTabGroup"24
v36@0:8@"WBTabGroupManager"16@"WBTab"24B32
@"NSCache"
@"NSTimer"
@32@0:8^v16@24
@"CKServerChangeToken"
v32@0:8Q16@?24
v56@0:8@16@24@32Q40@?48
v48@0:8@16@24Q32@?40
v24@0:8@?<v@?@"WBSCyclerItemListRepresentation">16
v32@0:8Q16@?<v@?B>24
v56@0:8@"NSString"16@"NSURL"24@"NSString"32Q40@?<v@?B>48
v48@0:8@"NSString"16@"NSString"24Q32@?<v@?B>40
v32@0:8@"NSString"16@?<v@?B>24
v40@0:8@"NSString"16@"NSString"24@?<v@?B>32
v40@0:8@"NSURL"16@"NSString"24@?<v@?B>32
v24@0:8@?<v@?q>16
v32@0:8@?16d24
v28@0:8B16@?20
@24@0:8Q16
@32@0:8Q16@24
@"_WBTabCyclerTabGroupUpdateObserver"
@"WBSDistributedNotificationObserver"
@"WBTabGroupManager"
@36@0:8@16B24@?28
@32@0:8@16@?24
v32@0:8@"WebBookmarksXPCConnection"16@"NSObject<OS_xpc_object>"24
@"<WebBookmarksClientDelegateProtocol>"
@"NSPointerArray"
@"WBSavedStateManager"
@"<WBTabProvider>"
@56@0:8@16@24@32@40@48
@48@0:8@16@24@32@40
@32@0:8@16^B24
@40@0:8#16@24^B32
@24@0:8#16
v24@0:8d16
v32@0:8d16d24
@"<WBDatabaseLockAcquisitorDelegate>"
@24@0:8r*16
v32@0:8@?16r*24
@"NSObject<OS_xpc_object>"
@"<WebBookmarksXPCConnectionDelegate>"
@72@0:8@16@24@32B40d44i52B56B60@64
@136@0:8q16B24@28@36@44@52Q60@68B76B80@84@92B100@104B112d116i124B128B132
d16@0:8
@"WBSettingsTask"
@"WebBookmarksSettingsGateway"
