=K
=K
=K
=K
FT
=K
=K
ES
=K
M[
=K
=K
ES
=K
FT
FT
FT
FT
=K
=K
FT
=K
=K
Q_
FT
FT
FT
ES
=K
=K
FT
=K
=K
=K
FT
=K
=K
=K
M[
=K
=K
M[
=K
_23TSCEASTGroupUIDRewriter
28TSCEASTGroupNodeUIDsRewriter
25TSCEASTSetAggTypeRewriter
32TSCEASTGroupNodesChangedRewriter
16TSCEReferenceSet
25TSCEASTLetRemovalRewriter
]r2<
MbP?{
@@fffff
26TSCEASTExcelExportRewriter
44TSCEASTSearchForExcelTranslationNeedIterator
33TSCEASTRewriteUsingValuesRewriter
16TSCEAdditionNode
16TSCEFunctionNode
19TSCESubtractionNode
22TSCEMultiplicationNode
16TSCEDivisionNode
13TSCEPowerNode
21TSCEConcatenationNode
19TSCEGreaterThanNode
29TSCEBinaryBooleanOperatorNode
28TSCEGreaterThanOrEqualToNode
16TSCELessThanNode
25TSCELessThanOrEqualToNode
15TSCEEqualToNode
18TSCENotEqualToNode
16TSCENegationNode
16TSCEPlusSignNode
15TSCEPercentNode
13TSCEColonNode
18TSCEValueGridValue
26TSCEASTInsertOwnerRewriter
44TSCEASTSearchForNumberToDateCoercionIterator
25TSCEASTFreezeRefsRewriter
23TSCEASTThawRefsRewriter
25TSCEASTInsertRowsRewriter
26TSCEASTReorderRowsRewriter
28TSCEASTRepairBadRefsRewriter
16TSCEBooleanValue
15TSCEStringValue
u"A15TSCENumberValue
38TSCEASTInsertRowsInsertedCellsRewriter
13TSCEDateValue
43TSCEASTSearchForSageTranslationNeedIterator
22TSCEEmptyArgumentValue
37TSCEASTExcelImportTranslationRewriter
26TSCEASTExcelImportRewriter
18TSCEEmptyCellValue
18TSCEReferenceValue
NSt3__120__shared_ptr_emplaceI9TSCEValueNS_9allocatorIS1_EEEE
25TSCEASTMoveRegionRewriter
44TSCEASTNumberToDurationForSageImportRewriter
16TSCEUnitlessZero
25TSCEASTSageImportRewriter
17TSCEAbstractValue
8TSCEGrid
42TSCEASTRemoveNumberToDateCoercionsRewriter
12TSCENilValue
v@16TSCEErrorWrapper
 !"#$%&'(*+,-./012356789ABCD`afghijklmno
   ! " # $ % & ' ( ) / 0 1 2 3 4 5 6 7 8 9 : ; < = > ? @ A B C D E F G H I J K L M N O P Q R S T W _ p q t u v w x y z { | } ~ 
! !!!"!#!$!%!&!'!(!)!*!+!,!-!.!/!0!1!2!3!4!5!6!7!8!9!:!;!=!>!?!@!A!B!C!D!E!F!G!H!I!J!K!S!T!U!V!W!X!Y!Z![!\!]!^!_!`!a!b!c!d!e!f!g!h!i!j!k!l!m!n!o!p!q!r!s!t!u!v!w!x!y!z!{!|!}!~!
" "!"""#"$"%"&"'"(")"*"+","-"."/"0"1"2"3"4"5"6"7"8"9":";"<"=">"?"@"A"B"C"D"E"F"G"H"I"J"K"L"M"N"O"P"Q"R"S"T"U"V"W"X"Y"Z"["\"]"^"_"`"a"b"c"d"e"f"g"h"i"j"k"l"m"n"o"p"q"r"s"t"u"v"w"x"y"z"{"|"}"~"
# #!#"###$#%#&#'#(#)#*#+#,#-#.#/#0#1#2#3#4#5#6#7#8#9#:#;#<#=#>#?#@#A#B#C#D#E#F#G#H#I#J#K#L#M#N#O#P#Q#R#S#T#U#V#W#X#Y#Z#[#\#]#^#_#`#a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#{#|#}#~#
$ $!$"$#$$$%$&$@$A$B$C$D$E$F$G$H$I$J$`$a$b$c$d$e$f$g$h$i$j$k$l$m$n$o$p$q$r$s$t$u$v$w$x$y$z${$|$}$~$
% %!%"%#%$%%%&%'%(%)%*%+%,%-%.%/%0%1%2%3%4%5%6%7%8%9%:%;%<%=%>%?%@%A%B%C%D%E%F%G%H%I%J%K%L%M%N%O%P%Q%R%S%T%U%V%W%X%Y%Z%[%\%]%^%_%`%a%b%c%d%e%f%g%h%i%j%k%l%m%n%o%p%q%r%s%t%u%v%w%x%y%z%{%|%}%~%
& &!&"&#&$&%&&&'&(&)&*&+&,&-&.&/&0&1&2&3&4&5&6&7&8&9&:&;&<&=&>&?&@&A&B&C&D&E&F&G&H&I&J&K&L&M&N&O&P&Q&R&S&T&U&V&W&X&Y&Z&[&\&]&^&_&`&a&b&c&d&e&f&g&h&i&j&k&l&m&n&o&p&q&r&s&t&u&v&w&x&y&z&{&|&}&
' '!'"'#'$'%'&''')'*'+','-'.'/'0'1'2'3'4'5'6'7'8'9':';'<'='>'?'@'A'B'C'D'E'F'G'H'I'J'K'M'O'P'Q'R'V'X'Y'Z'['\']'^'a'b'c'd'e'f'g'h'i'j'k'l'm'n'o'p'q'r's't'u'v'w'x'y'z'{'|'}'~'
( (!("(#($(%(&('((()(*(+(,(-(.(/(0(1(2(3(4(5(6(7(8(9(:(;(<(=(>(?(@(A(B(C(D(E(F(G(H(I(J(K(L(M(N(O(P(Q(R(S(T(U(V(W(X(Y(Z([(\(](^(_(`(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(w(x(y(z({(|(}(~(
) )!)")#)$)%)&)')()))*)+),)-).)/)0)1)2)3)4)5)6)7)8)9):);)<)=)>)?)@)A)B)C)D)E)F)G)H)I)J)K)L)M)N)O)P)Q)R)S)T)U)V)W)X)Y)Z)[)\)])^)_)`)a)b)c)d)e)f)g)h)i)j)k)l)m)n)o)p)q)r)s)t)u)v)w)x)y)z){)|)})~)
* *!*"*#*$*%*&*'*(*)***+*,*-*.*/*0*1*2*3*4*5*6*7*8*9*:*;*<*=*>*?*@*A*B*C*D*E*F*G*H*I*J*K*L*M*N*O*P*Q*R*S*T*U*V*W*X*Y*Z*[*\*]*^*_*`*a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*{*|*}*~*
/ /!/"/#/$/%/&/'/(/)/*/+/,/-/.///0/1/2/3/4/5/6/7/8/9/:/;/</=/>/?/@/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O/P/Q/R/S/T/U/V/W/X/Y/Z/[/\/]/^/_/`/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/{/|/}/~/
0 0!0"0#0$0%0&0'0(0)000102030405060708090:0;0<0=0>0?0A0B0C0D0E0F0G0H0I0J0K0L0M0N0O0P0Q0R0S0T0U0V0W0X0Y0Z0[0\0]0^0_0`0a0b0c0d0e0f0g0h0i0j0k0l0m0n0o0p0q0r0s0t0u0v0w0x0y0z0{0|0}0~0
1 1!1"1#1$1%1&1'1(1)1*1+1,1112131415161718191:1;1<1=1>1?1@1A1B1C1D1E1F1G1H1I1J1K1L1M1N1O1P1Q1R1S1T1U1V1W1X1Y1Z1[1\1]1^1_1`1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1{1|1}1~1
2 2!2"2#2$2%2&2'2(2)2*2+2,2-2.2/202122232425262728292:2;2<2=2>2?2@2A2B2C2P2Q2R2S2T2U2V2W2X2Y2Z2[2\2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2q2r2s2t2u2v2w2x2y2z2{2|2}2
3 3!3"3#3$3%3&3'3(3)3*3+3,3-3.3/303132333435363738393:3;3<3=3>3?3@3A3B3C3D3E3F3G3H3I3J3K3L3M3N3O3P3Q3R3S3T3U3V3W3X3Y3Z3[3\3]3^3_3`3a3b3c3d3e3f3g3h3i3j3k3l3m3n3o3p3q3r3s3t3u3v3w3x3y3z3{3|3}3~3
?14TSCEASTElement
27TSCEASTElementWithUidTracts
26TSCEASTElementWithChildren
39TSCEASTElementWithUidTractsWithChildren
20TSCEASTBinaryElement
19TSCEASTColonElement
24TSCEASTColonTractElement
20TSCEASTStringElement
18TSCEASTDateElement
22TSCEASTDurationElement
22TSCEASTFunctionElement
29TSCEASTUnknownFunctionElement
24TSCEASTWhitespaceElement
30TSCEASTRelativeCoordRefElement
23TSCEASTLinkedRefElement
26TSCEASTUidReferenceElement
26TSCEASTViewTractRefElement
18TSCEASTListElement
19TSCEASTThunkElement
21TSCEASTLetBindElement
25TSCEASTCategoryRefElement
31TSCEASTConvertToUidRefsRewriter
15TSCEASTRewriter
19TSCEASTUnaryElement
20TSCEASTNumberElement
21TSCEASTBooleanElement
21TSCEASTTagOnlyElement
19TSCEASTTokenElement
19TSCEASTArrayElement
25TSCEASTLetVariableElement
25TSCEASTLetEndScopeElement
.@7}!(#
7@V1T!&G
;@kE
.A34TSCEASTLowLevelDescriptionRewriter
26TSCEASTDescriptionIterator
36TSCEASTConvertFromColonTractRewriter
26TSCEASTOwnerUidMapRewriter
28TSCEASTForceOwnerUidRewriter
42TSCEASTHostCellAgnosticOwnerUidMapRewriter
34TSCEASTBadRefWithUidInfoIdentifier
9TSCELexer
NSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE
25TSCEASTRemoveRowsRewriter
31TSCEASTIsSingleNodeTypeRewriter
16TSCEFunction_ABS
20TSCEFunction_ACCRINT
22TSCEFinancialFunctions
21TSCEFunction_ACCRINTM
17TSCEFunction_ACOS
18TSCEFunction_ACOSH
20TSCEFunction_ADDRESS
16TSCEFunction_AND
18TSCEFunction_AREAS
17TSCEFunction_ASIN
18TSCEFunction_ASINH
17TSCEFunction_ATAN
18TSCEFunction_ATAN2
18TSCEFunction_ATANH
19TSCEFunction_AVEDEV
20TSCEFunction_AVERAGE
21TSCEFunction_AVERAGEA
22TSCEFunction_AVERAGEIF
23TSCEFunction_AVERAGEIFS
22TSCEFunction_BASETONUM
20TSCEFunction_BESSELJ
20TSCEFunction_BESSELY
21TSCEFunction_BETADIST
20TSCEFunction_BETAINV
20TSCEFunction_BIN2DEC
20TSCEFunction_BIN2HEX
20TSCEFunction_BIN2OCT
22TSCEFunction_BINOMDIST
25TSCEFunction_BONDDURATION
26TSCEFunction_BONDMDURATION
20TSCEFunction_CEILING
17TSCEFunction_CHAR
20TSCEFunction_CHIDIST
19TSCEFunction_CHIINV
20TSCEFunction_CHITEST
19TSCEFunction_CHOOSE
18TSCEFunction_CLEAN
17TSCEFunction_CODE
19TSCEFunction_COLUMN
20TSCEFunction_COLUMNS
19TSCEFunction_COMBIN
24TSCEFunction_CONCATENATE
23TSCEFunction_CONFIDENCE
25TSCEFunction_CONFIDENCE_T
20TSCEFunction_CONVERT
19TSCEFunction_CORREL
16TSCEFunction_COS
17TSCEFunction_COSH
18TSCEFunction_COUNT
19TSCEFunction_COUNTA
23TSCEFunction_COUNTBLANK
20TSCEFunction_COUNTIF
21TSCEFunction_COUNTIFS
25TSCEFunction_COUNTMATCHES
22TSCEFunction_COUPDAYBS
21TSCEFunction_COUPDAYS
23TSCEFunction_COUPDAYSNC
20TSCEFunction_COUPNUM
18TSCEFunction_COVAR
25TSCEFunction_COVARIANCE_S
22TSCEFunction_CRITBINOM
20TSCEFunction_CUMIPMT
21TSCEFunction_CUMPRINC
17TSCEFunction_DATE
20TSCEFunction_DATEDIF
22TSCEFunction_DATEVALUE
16TSCEFunction_DAY
20TSCEFunction_DAYNAME
20TSCEFunction_DAYS360
15TSCEFunction_DB
16TSCEFunction_DDB
20TSCEFunction_DEC2BIN
20TSCEFunction_DEC2HEX
20TSCEFunction_DEC2OCT
20TSCEFunction_DEGREES
18TSCEFunction_DELTA
18TSCEFunction_DEVSQ
17TSCEFunction_DISC
19TSCEFunction_DOLLAR
21TSCEFunction_DUR2DAYS
22TSCEFunction_DUR2HOURS
29TSCEFunction_DUR2MILLISECONDS
24TSCEFunction_DUR2MINUTES
24TSCEFunction_DUR2SECONDS
22TSCEFunction_DUR2WEEKS
21TSCEFunction_DURATION
18TSCEFunction_EDATE
19TSCEFunction_EFFECT
20TSCEFunction_EOMONTH
16TSCEFunction_ERF
17TSCEFunction_ERFC
17TSCEFunction_EVEN
18TSCEFunction_EXACT
16TSCEFunction_EXP
22TSCEFunction_EXPONDIST
17TSCEFunction_FACT
23TSCEFunction_FACTDOUBLE
18TSCEFunction_FALSE
18TSCEFunction_FDIST
17TSCEFunction_FIND
33TSCEFunction_FIND_CASEINSENSITIVE
17TSCEFunction_FINV
18TSCEFunction_FIXED
18TSCEFunction_FLOOR
21TSCEFunction_FORECAST
19TSCELineFitFunction
24TSCEFunction_FORMULATEXT
22TSCEFunction_FREQUENCY
15TSCEFunction_FV
21TSCEFunction_CURRENCY
25TSCEFunction_CURRENCYCODE
28TSCEFunction_CURRENCYCONVERT
22TSCEFunction_CURRENCYH
22TSCEFunction_GAMMADIST
21TSCEFunction_GAMMAINV
20TSCEFunction_GAMMALN
16TSCEFunction_GCD
20TSCEFunction_GEOMEAN
19TSCEFunction_GESTEP
25TSCEFunction_GETPIVOTDATA
20TSCEFunction_HARMEAN
20TSCEFunction_HEX2BIN
20TSCEFunction_HEX2DEC
20TSCEFunction_HEX2OCT
20TSCEFunction_HLOOKUP
17TSCEFunction_HOUR
22TSCEFunction_HYPERLINK
15TSCEFunction_IF
20TSCEFunction_IFERROR
16TSCEFunction_IFS
18TSCEFunction_INDEX
21TSCEFunction_INDIRECT
16TSCEFunction_INT
22TSCEFunction_INTERCEPT
29TSCEFunction_INTERSECT_RANGES
20TSCEFunction_INTRATE
17TSCEFunction_IPMT
16TSCEFunction_IRR
20TSCEFunction_ISBLANK
19TSCEFunction_ISDATE
20TSCEFunction_ISERROR
19TSCEFunction_ISEVEN
21TSCEFunction_ISNUMBER
18TSCEFunction_ISODD
18TSCEFunction_ISPMT
19TSCEFunction_ISTEXT
18TSCEFunction_LARGE
16TSCEFunction_LCM
17TSCEFunction_LEFT
16TSCEFunction_LEN
19TSCEFunction_LINEST
15TSCEFunction_LN
16TSCEFunction_LOG
18TSCEFunction_LOG10
19TSCEFunction_LOGINV
24TSCEFunction_LOGNORMDIST
19TSCEFunction_LOOKUP
18TSCEFunction_LOWER
18TSCEFunction_MATCH
16TSCEFunction_MAX
17TSCEFunction_MAXA
19TSCEFunction_MAXIFS
19TSCEFunction_MEDIAN
16TSCEFunction_MID
16TSCEFunction_MIN
17TSCEFunction_MINA
19TSCEFunction_MINIFS
19TSCEFunction_MINUTE
17TSCEFunction_MIRR
16TSCEFunction_MOD
17TSCEFunction_MODE
22TSCEFunction_MODE_MULT
18TSCEFunction_MONTH
22TSCEFunction_MONTHNAME
19TSCEFunction_MROUND
24TSCEFunction_MULTINOMIAL
25TSCEFunction_NEGBINOMDIST
24TSCEFunction_NETWORKDAYS
20TSCEFunction_NOMINAL
21TSCEFunction_NORMDIST
20TSCEFunction_NORMINV
22TSCEFunction_NORMSDIST
21TSCEFunction_NORMSINV
16TSCEFunction_NOT
16TSCEFunction_NOW
17TSCEFunction_NPER
16TSCEFunction_NPV
22TSCEFunction_NUMTOBASE
20TSCEFunction_OCT2BIN
20TSCEFunction_OCT2DEC
20TSCEFunction_OCT2HEX
16TSCEFunction_ODD
19TSCEFunction_OFFSET
15TSCEFunction_OR
23TSCEFunction_PERCENTILE
27TSCEFunction_PERCENTILE_EXC
24TSCEFunction_PERCENTRANK
28TSCEFunction_PERCENTRANK_EXC
19TSCEFunction_PERMUT
15TSCEFunction_PI
22TSCEFunction_PLAINTEXT
16TSCEFunction_PMT
20TSCEFunction_POISSON
23TSCEFunction_POLYNOMIAL
18TSCEFunction_POWER
17TSCEFunction_PPMT
18TSCEFunction_PRICE
22TSCEFunction_PRICEDISC
21TSCEFunction_PRICEMAT
17TSCEFunction_PROB
20TSCEFunction_PRODUCT
19TSCEFunction_PROPER
15TSCEFunction_PV
21TSCEFunction_QUARTILE
25TSCEFunction_QUARTILE_EXC
21TSCEFunction_QUOTIENT
20TSCEFunction_RADIANS
17TSCEFunction_RAND
24TSCEFunction_RANDBETWEEN
17TSCEFunction_RANK
21TSCEFunction_RANK_AVG
17TSCEFunction_RATE
21TSCEFunction_RECEIVED
27TSCEFunction_REFERENCE_NAME
18TSCEFunction_REGEX
26TSCEFunction_REGEX_EXTRACT
20TSCEFunction_REPLACE
17TSCEFunction_REPT
18TSCEFunction_RIGHT
18TSCEFunction_ROMAN
18TSCEFunction_ROUND
22TSCEFunction_ROUNDDOWN
20TSCEFunction_ROUNDUP
16TSCEFunction_ROW
17TSCEFunction_ROWS
19TSCEFunction_SEARCH
19TSCEFunction_SECOND
22TSCEFunction_SERIESSUM
17TSCEFunction_SIGN
16TSCEFunction_SIN
17TSCEFunction_SINH
16TSCEFunction_SLN
18TSCEFunction_SLOPE
18TSCEFunction_SMALL
17TSCEFunction_SQRT
19TSCEFunction_SQRTPI
24TSCEFunction_STANDARDIZE
18TSCEFunction_STDEV
19TSCEFunction_STDEVA
19TSCEFunction_STDEVP
20TSCEFunction_STDEVPA
18TSCEFunction_STOCK
19TSCEFunction_STOCKH
26TSCEFunction_STRIPDURATION
23TSCEFunction_SUBSTITUTE
21TSCEFunction_SUBTOTAL
16TSCEFunction_SUM
18TSCEFunction_SUMIF
19TSCEFunction_SUMIFS
23TSCEFunction_SUMPRODUCT
18TSCEFunction_SUMSQ
21TSCEFunction_SUMX2MY2
21TSCEFunction_SUMX2PY2
20TSCEFunction_SUMXMY2
16TSCEFunction_SYD
14TSCEFunction_T
16TSCEFunction_TAN
17TSCEFunction_TANH
18TSCEFunction_TDIST
22TSCEFunction_TEXTAFTER
23TSCEFunction_TEXTBEFORE
24TSCEFunction_TEXTBETWEEN
17TSCEFunction_TIME
22TSCEFunction_TIMEVALUE
17TSCEFunction_TINV
18TSCEFunction_TODAY
22TSCEFunction_TRANSPOSE
17TSCEFunction_TRIM
17TSCEFunction_TRUE
18TSCEFunction_TRUNC
18TSCEFunction_TTEST
25TSCEFunction_UNION_RANGES
18TSCEFunction_UPPER
18TSCEFunction_VALUE
16TSCEFunction_VAR
17TSCEFunction_VARA
17TSCEFunction_VARP
18TSCEFunction_VARPA
16TSCEFunction_VDB
20TSCEFunction_VLOOKUP
20TSCEFunction_WEEKDAY
20TSCEFunction_WEEKNUM
20TSCEFunction_WEIBULL
20TSCEFunction_WORKDAY
17TSCEFunction_XIRR
20TSCEFunction_XLOOKUP
19TSCEFunction_XMATCH
17TSCEFunction_XNPV
17TSCEFunction_YEAR
21TSCEFunction_YEARFRAC
18TSCEFunction_YIELD
22TSCEFunction_YIELDDISC
21TSCEFunction_YIELDMAT
18TSCEFunction_ZTEST
20TSCEFunction___CHART
28TSCEFunction___CELLVALUETYPE
30TSCEFunction___INTERACTIONTYPE
30TSCEASTRowColumnUidMapRewriter
24TSCEASTClearUidsRewriter
26TSCEASTExcludeUidsRewriter
14TSCEErrorValue
24TSCEASTTransposeRewriter
26TSCEASTDeleteOwnerRewriter
22TSCEASTElementIterator
17TSCEASTEndElement
20TSCECategoryRefValue
14TSCETokenValue
25TSCEASTSageExportRewriter
25TSCEASTMergeCellsRewriter
29TSCEASTUndoMergeCellsRewriter
32TSCEASTNodeFormulaStringIterator
23TSCEASTTagsUsedRewriter
14TSCEThunkValue
25TSCEASTEvaluationRewriter
23TSCEASTSortRowsRewriter
33TSCEASTConvertFromUidRefsRewriter
40TSCEASTSearchForExternalOwnerUIDIterator
21TSCEASTStreamIterator
17TSCERichTextValue
31TSCEASTOffsetReferencesRewriter
31TSCEASTMergeOriginMovedRewriter
32TSCEASTSearchForUidTractIterator
24TSCEASTLinkedRefRewriter
@19TSCEIDAllocatorFull
29TSCEASTFunctionsInUseRewriter
UUUUUU
<30TSCEASTNodeCategoryRefIterator
?ffffff
0C21TSCEViewTractRefValue
?333333
<19TSCEASTIteratorBase
xV42?)
28TSCEASTRefExtractionIterator
5RTreeIjLi2EdLi16ELi8EE
34TSCEASTConvertToColonTractRewriter
TSCEArchives.proto
TSCE
TSPMessages.proto
TSKArchives.proto"Y
CellReferenceArchive
column
table_id
.TSP.CFUUIDArchive"a
InternalCellReferenceArchive
coordinate
.TSCE.CellCoordinateArchive
owner_id
RelativeCellRefArchive
relative_row_offset
relative_column_offset
table_uid
.TSP.UUID
preserve_column
preserve_row
is_spanning_column
is_spanning_row
RangeReferenceArchive
table_id
.TSP.CFUUIDArchive
top_left_column
top_left_row
bottom_right_column
bottom_right_row
InternalRangeReferenceArchive
owner_id
range
.TSCE.RangeCoordinateArchive"
IndexSetArchive
entries
2#.TSCE.IndexSetArchive.IndexSetEntry
IndexSetEntry
range_begin
range_end
CellCoordSetArchive
column_entries
2%.TSCE.CellCoordSetArchive.ColumnEntry
ColumnEntry
column
row_set
.TSCE.IndexSetArchive"
InternalCellRefSetArchive
owner_entries
2*.TSCE.InternalCellRefSetArchive.OwnerEntry
OwnerEntry
owner_id
coord_set
.TSCE.CellCoordSetArchive"<
ColumnRowSize
num_columns
num_rows
CellRectArchive
origin
.TSCE.CellCoordinateArchive
size
.TSCE.ColumnRowSize"
CellRefSetArchive
owner_entries
2".TSCE.CellRefSetArchive.OwnerEntry
OwnerEntry
owner_uid
.TSP.UUID
coord_set
.TSCE.CellCoordSetArchive"
UidCoordSetArchive
column_entries
2$.TSCE.UidCoordSetArchive.ColumnEntry
ColumnEntry
column
.TSP.UUID
row_set
.TSP.UUID"
UidCellRefSetArchive
owner_entries
2%.TSCE.UidCellRefSetArchive.OwnerEntry
OwnerEntry
owner_uid
.TSP.UUID
coord_set
.TSCE.UidCoordSetArchive"
ReferencesToDirtyArchive
to_dirty_owner_ids
.TSCE.IndexSetArchive
to_dirty_cells
.TSCE.InternalCellRefSetArchive
to_dirty_cells_additional
.TSCE.InternalCellRefSetArchive
to_dirty_range_refs
2#.TSCE.InternalRangeReferenceArchive
calc_in_progress_cells
.TSCE.InternalCellRefSetArchive"
CoordMapperArchive
table_uid
.TSP.UUID
summary_rows_set
.TSCE.IndexSetArchive
summary_columns_set
.TSCE.IndexSetArchive
label_rows_set
.TSCE.IndexSetArchive
base_to_view_row_map
2(.TSCE.CoordMapperArchive.BaseToViewEntry
base_to_view_column_map
2(.TSCE.CoordMapperArchive.BaseToViewEntry
summary_to_view_row_map
2+.TSCE.CoordMapperArchive.SummaryToViewEntry
summary_to_view_column_map
2+.TSCE.CoordMapperArchive.SummaryToViewEntry
BaseToViewEntry
base_column_or_row
view_column_or_row
SummaryToViewEntry
summary_column_or_row
view_column_or_row
ReferenceArchive
reference_type
2$.TSCE.ReferenceArchive.ReferenceType
cell_reference
.TSCE.CellReferenceArchive
range_reference
.TSCE.RangeReferenceArchive"M
ReferenceType
CELL_REFERENCE
RANGE_REFERENCE
NAME_DEPENDENCY
EdgeArchive
column
is_precedent
owner_id
.TSP.CFUUIDArchive"
EdgesArchive
packed_edge_without_owner
packed_edge_with_owner
owner_id_for_edge
.TSP.CFUUIDArchive
internal_owner_id_for_edge
ExpandedEdgesArchive
edge_without_owner_rows
edge_without_owner_columns
edge_with_owner_rows
edge_with_owner_columns
internal_owner_id_for_edge
CellRecordArchive
column
 dirty_self_plus_precedents_count
is_in_a_cycle
false
edge
.TSCE.EdgeArchiveB
contains_a_formula
true
has_calculated_precedents
false
#calculate_precedents_on_next_recalc
falseB
)translate_for_excel_import_on_next_recalc
false
edges
.TSCE.EdgesArchive"`
CellDependenciesArchive
cell_record
.TSCE.CellRecordArchive
num_dirty_cells
CellRecordExpandedArchive
column
 dirty_self_plus_precedents_count
is_in_a_cycle
false
has_calculated_precedents
false
expanded_edges
.TSCE.ExpandedEdgesArchive"W
CellDependenciesExpandedArchive
cell_record
.TSCE.CellRecordExpandedArchive"
CellRecordTileArchive
internal_owner_id
tile_column_begin
tile_row_begin
cell_records
.TSCE.CellRecordExpandedArchive"I
CellDependenciesTiledArchive
cell_record_tiles
.TSP.Reference"
VolatileDependenciesArchive
volatile_time_cell_column
volatile_time_cell_row
volatile_random_cell_column
volatile_random_cell_row
volatile_locale_cell_column
volatile_locale_cell_row
volatile_location_cell_column
volatile_location_cell_row
volatile_compass_cell_column
volatile_compass_cell_row
 volatile_remote_data_cell_column
volatile_remote_data_cell_row
%volatile_sheet_table_name_cell_column
"volatile_sheet_table_name_cell_row
!calculated_dependency_cell_column
calculated_dependency_cell_row
 volatile_geometry_cell_reference
.TSCE.CellReferenceArchive
volatile_geometry_cell
.TSCE.CellCoordinateArchive"
#VolatileDependenciesExpandedArchive
volatile_time_cells
.TSCE.CellCoordSetArchive
volatile_random_cells
.TSCE.CellCoordSetArchive
volatile_locale_cells
.TSCE.CellCoordSetArchive
volatile_sheet_table_name_cells
.TSCE.CellCoordSetArchive
volatile_remote_data_cells
.TSCE.CellCoordSetArchive
volatile_geometry_cell_refs
.TSCE.InternalCellRefSetArchive"c
 RTreeInternalNodeContentsArchive
child
.TSCE.RTreeNodeArchive"l
RTreeLeafNodeContentsArchive
cell_reference
.TSCE.CellReferenceArchive"
RTreeNodeArchive
level
count
internal_node_contents
2&.TSCE.RTreeInternalNodeContentsArchive
leaf_node_contents
2".TSCE.RTreeLeafNodeContentsArchive"
RTreeArchive
data_file_id
data_size
data_num_dims
data_elem_size
data_elem_real_size
data_max_nodes
data_min_nodes
root
.TSCE.RTreeNodeArchive"
RangeBackDependencyArchive
cell_coord_row
cell_coord_column
range_reference
.TSCE.RangeReferenceArchive
internal_range_reference
2#.TSCE.InternalRangeReferenceArchive"U
RangeDependenciesArchive
back_dependency
2 .TSCE.RangeBackDependencyArchive"
RangePrecedentsTileArchive
to_owner_id
from_to_range
23.TSCE.RangePrecedentsTileArchive.FromToRangeArchive
FromToRangeArchive
from_coord
.TSCE.CellCoordinateArchive
refers_to_rect
.TSCE.CellRectArchive"N
RangeDependenciesTiledArchive
range_precedents_tile
.TSP.Reference"
SpanningDependenciesArchive
column
range_context
2..TSCE.SpanningDependenciesArchive.RangeContext
cell
.TSCE.CellReferenceArchive
total_range_for_deleted_table
.TSCE.RangeCoordinateArchive
body_range_for_deleted_table
.TSCE.RangeCoordinateArchive
referring_column_to_local_cells
2=.TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells
 referring_column_to_remote_cells
2>.TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells
ReferringColumnToLocalCells
column
range_context
2..TSCE.SpanningDependenciesArchive.RangeContext
cell_coordinate
.TSCE.CellCoordinateArchive
ReferringColumnToRemoteCells
column
range_context
2..TSCE.SpanningDependenciesArchive.RangeContext
internal_cell_reference
2".TSCE.InternalCellReferenceArchive"0
RangeContext
DEFAULT
INCLUDE_HEADERS
#SpanningDependenciesExpandedArchive
coord_refers_to_spans
2B.TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents
total_range_for_table
.TSCE.RangeCoordinateArchive
body_range_for_table
.TSCE.RangeCoordinateArchive
ExtentRange
extent_begin
extent_end
ExtentRangeWithTableWithContext
owner_id
range_context
26.TSCE.SpanningDependenciesExpandedArchive.RangeContext
ranges
25.TSCE.SpanningDependenciesExpandedArchive.ExtentRange
CellCoordRefersToExtents
coordinate
.TSCE.CellCoordinateArchive
ranges_by_table_context
2I.TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext"0
RangeContext
DEFAULT
INCLUDE_HEADERS
WholeOwnerDependenciesArchive
dependent_cell
2".TSCE.InternalCellReferenceArchive"a
%WholeOwnerDependenciesExpandedArchive
dependent_cells
.TSCE.InternalCellRefSetArchive"
CellErrorsArchive
errors
2$.TSCE.CellErrorsArchive.ErrorForCell
ErrorForCell
coordinate
.TSCE.CellCoordinateArchive
error_flavor
2#.TSCE.CellErrorsArchive.ErrorFlavor
err_due_to_cell
2".TSCE.InternalCellReferenceArchive"i
ErrorFlavor
NONE
ERROR
REF_ERROR
CIRCULAR_REF_ERROR
UNSUPPORTED_FUNCTION_ERROR
UuidReferencesArchive
table_refs
2$.TSCE.UuidReferencesArchive.TableRef
table_uuid_refs
2,.TSCE.UuidReferencesArchive.TableWithUuidRef
TableRef
owner_uuid
.TSP.UUID
coord_set
.TSCE.CellCoordSetArchive
UuidRef
uuid
.TSP.UUID
coord_set
.TSCE.CellCoordSetArchive
TableWithUuidRef
owner_uuid
.TSP.UUID
uuid_refs
2#.TSCE.UuidReferencesArchive.UuidRef"
FormulaOwnerDependenciesArchive
formula_owner_uid
.TSP.UUID
internal_formula_owner_id
owner_kind
cell_dependencies
2%.TSCE.CellDependenciesExpandedArchive
range_dependencies
.TSCE.RangeDependenciesArchive
volatile_dependencies
2).TSCE.VolatileDependenciesExpandedArchive
spanning_column_dependencies
2).TSCE.SpanningDependenciesExpandedArchive
spanning_row_dependencies
2).TSCE.SpanningDependenciesExpandedArchive
whole_owner_dependencies
2+.TSCE.WholeOwnerDependenciesExpandedArchive
cell_errors
.TSCE.CellErrorsArchive
formula_owner
.TSP.Reference
base_owner_uid
.TSP.UUID
tiled_cell_dependencies
2".TSCE.CellDependenciesTiledArchive
uuid_references
.TSCE.UuidReferencesArchive
tiled_range_dependencies
2#.TSCE.RangeDependenciesTiledArchive"
FormulaOwnerInfoArchive
formula_owner_id
.TSP.CFUUIDArchive
cell_dependencies
.TSCE.CellDependenciesArchive
range_dependencies
.TSCE.RangeDependenciesArchive
volatile_dependencies
2!.TSCE.VolatileDependenciesArchive
spanning_column_dependencies
2!.TSCE.SpanningDependenciesArchive
spanning_row_dependencies
2!.TSCE.SpanningDependenciesArchive
whole_owner_dependencies
2#.TSCE.WholeOwnerDependenciesArchive
cell_errors
.TSCE.CellErrorsArchive
formula_owner
.TSP.Reference"Q
SubFormulaOwnerIDArchive
base_owner_uid
.TSP.UUID
owner_kind
OwnerIDMapArchive
map_entry
2..TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry
unregistered_internal_owner_id
OwnerIDMapArchiveEntry
internal_owner_id
owner_id
.TSP.CFUUIDArchive"0
UidLookupListArchive
uuids
.TSP.UUID"
DependencyTrackerArchive
formula_owner_info
.TSCE.FormulaOwnerInfoArchive
dirty_leaf
.TSCE.CellReferenceArchiveB
owner_id_map
.TSCE.OwnerIDMapArchive
internal_dirty_leaf
2".TSCE.InternalCellReferenceArchiveB
number_of_formulas
formula_owner_dependencies
.TSP.Reference"e
RemoteDataSpecifierArchive
function_index
symbol
attribute
date
RemoteDataValueMapArchive
entry
22.TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry
RemoteDataMapEntry
specifier
2 .TSCE.RemoteDataSpecifierArchive
value
.TSCE.CellValueArchive"
StockArchive
symbol
date
attribute
2!.TSCE.StockArchive.AttributeEntry
AttributeEntry
attribute
value
RemoteDataStoreArchive
value_map
.TSCE.RemoteDataValueMapArchive
stocks
.TSCE.StockArchive"q
NameTrackedReferencePair
name
tracked_reference
.TSP.Reference
tracked_reference_id
NamesByTrackedReferenceArchive
table_id
.TSP.CFUUIDArchive
name_tracked_reference_pair
.TSCE.NameTrackedReferencePair"
NamedReferenceManagerArchive
reference_tracker
.TSP.Reference
#names_by_tracked_reference_by_table
2$.TSCE.NamesByTrackedReferenceArchiveB
UuidSetStoreArchive
uuidSet
2!.TSCE.UuidSetStoreArchive.UuidSet
UuidSet
uuid
.TSP.UUID
index_of_set
UuidReferenceMapArchive
cell_refs_for_uuid
2-.TSCE.UuidReferenceMapArchive.CellRefsForUuid
CellRefsForUuid
uuid
.TSP.UUID
cell_ref
2".TSCE.InternalCellReferenceArchive
cell_refs
.TSCE.InternalCellRefSetArchive"
GroupByNodeMapArchive
refs_for_group_by
20.TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy
CellRefsForGroupNode
group_node_uid
.TSP.UUID
cell_refs
.TSCE.InternalCellRefSetArchive
GroupNodesForGroupBy
group_by_uid
.TSP.UUID
refs_for_group_node
20.TSCE.GroupByNodeMapArchive.CellRefsForGroupNode"
CalculationEngineArchive
base_date_1904
dependency_tracker
.TSCE.DependencyTrackerArchive
named_reference_manager
.TSP.Reference
excel_import_date_mode
22.TSCE.CalculationEngineArchive.ExcelImportDateMode:
DATE_MODE_1900
saved_locale_identifier_for_4_2
document_random_seed
uuid_reference_map
.TSCE.UuidReferenceMapArchive
document_timestamp
document_timezone
table_uid_history
2 .TSCE.RewriteTableUIDInfoArchive
remote_data_store
.TSP.Reference
group_node_map
.TSCE.GroupByNodeMapArchive
header_name_manager
.TSP.Reference
refs_to_dirty
.TSP.Reference
saved_locale_identifier
begin_tracking_names_legacy_nrm
.TSP.UUID
end_tracking_names_legacy_nrm
.TSP.UUID"_
ExcelImportDateMode
DATE_MODE_1900
DATE_MODE_1900_LEGACY
DATE_MODE_1904_LEGACY
PreserveColumnRowFlagsArchive
begin_row_is_absolute
begin_column_is_absolute
end_row_is_absolute
end_column_is_absolute
CategoryReferenceArchive
group_by_uid
.TSP.UUID
column_uid
.TSP.UUID
aggregate_type
group_level
group_uids
2,.TSCE.CategoryReferenceArchive.CatRefUidList
preserve_flags
2#.TSCE.PreserveColumnRowFlagsArchive
relative_column
relative_group_uid
.TSP.UUID
absolute_group_uid
.TSP.UUID
option_refers_to_pivot_rows
option_refers_to_pivot_columns
agg_index_level
option_show_aggregate_name
CatRefUidList
.TSP.UUID"
ASTNodeArrayArchive
AST_node
2(.TSCE.ASTNodeArrayArchive.ASTNodeArchive
 ASTLocalCellReferenceNodeArchive
row_handle
column_handle
row_is_sticky
column_is_sticky
%ASTCrossTableCellReferenceNodeArchive
row_handle
column_handle
row_is_sticky
column_is_sticky
table_id
.TSP.CFUUIDArchive
)AST_reference_whitespace_after_sheet_name
*AST_reference_whitespace_before_table_name
)AST_reference_whitespace_after_table_name
,AST_reference_whitespace_before_cell_address
ASTColumnCoordinateArchive
column
absolute
false
ASTRowCoordinateArchive
absolute
false
ASTUidList
.TSP.UUID
ASTUidTract
columnUids
2$.TSCE.ASTNodeArrayArchive.ASTUidList
rowUids
2$.TSCE.ASTNodeArrayArchive.ASTUidList
is_range_ref
purpose
2,.TSCE.ASTNodeArrayArchive.ASTUidTractPurpose
preserve_rectangular
true
ASTStickyBits
begin_row_is_absolute
begin_column_is_absolute
end_row_is_absolute
end_column_is_absolute
ASTUidTractList
tract
2%.TSCE.ASTNodeArrayArchive.ASTUidTract
sticky_bits
2'.TSCE.ASTNodeArrayArchive.ASTStickyBits
ASTUidCoordinateArchive
column_uid
.TSP.UUID
row_uid
.TSP.UUID
column_absolute
row_absolute
ASTCategoryLevels
AST_column_group_level
AST_row_group_level
AST_agg_index_level
ASTCategoryReferenceArchive
category_ref
.TSCE.CategoryReferenceArchive
ASTColonTractArchive
relative_column
2P.TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive
relative_row
2P.TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive
absolute_column
2P.TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive
absolute_row
2P.TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive
preserve_rectangular
true
!ASTColonTractRelativeRangeArchive
range_begin
range_end
!ASTColonTractAbsoluteRangeArchive
range_begin
range_end
&ASTCrossTableReferenceExtraInfoArchive
table_id
.TSP.CFUUIDArchive
)AST_reference_whitespace_after_sheet_name
*AST_reference_whitespace_before_table_name
)AST_reference_whitespace_after_table_name
,AST_reference_whitespace_before_cell_address
ASTLetNodeWhitespace
AST_let_whitespace_after_let
#AST_let_whitespace_after_identifier
AST_let_whitespace_after_equals
"AST_let_whitespace_after_delimiter
ASTNodeArchive
AST_node_type
2%.TSCE.ASTNodeArrayArchive.ASTNodeType
AST_function_node_index
AST_function_node_numArgs
AST_number_node_number
AST_boolean_node_boolean
AST_string_node_string
AST_date_node_dateNum
"AST_date_node_suppress_date_format
"AST_date_node_suppress_time_format
AST_date_node_date_time_format
AST_duration_node_unitNum
AST_duration_node_unit
AST_duration_node_style
'AST_duration_node_duration_unit_largest
(AST_duration_node_duration_unit_smallest
%AST_duration_node_use_automatic_units
AST_token_node_boolean
AST_array_node_numCol
AST_array_node_numRow
AST_list_node_numArgs
AST_thunk_node_array
.TSCE.ASTNodeArrayArchive
'AST_local_cell_reference_node_reference
2:.TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive
-AST_cross_table_cell_reference_node_reference
2?.TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive
 AST_unknown_function_node_string
!AST_unknown_function_node_numArgs
AST_whitespace
AST_column
24.TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive
AST_row
21.TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive
$AST_cross_table_reference_extra_info
2@.TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive
AST_uid_coordinate
21.TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive
AST_sticky_bits
2'.TSCE.ASTNodeArrayArchive.ASTStickyBits
AST_frozen_sticky_bits
2'.TSCE.ASTNodeArrayArchive.ASTStickyBits
AST_let_identifier
AST_let_e2
.TSCE.ASTNodeArrayArchive
AST_let_whitespace
2..TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace
AST_symbol
AST_tract_list
2).TSCE.ASTNodeArrayArchive.ASTUidTractList
AST_category_ref
25.TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive
AST_colon_tract
2..TSCE.ASTNodeArrayArchive.ASTColonTractArchive
AST_number_node_decimal_low
AST_number_node_decimal_high
AST_category_levels
2+.TSCE.ASTNodeArrayArchive.ASTCategoryLevels"
ASTNodeType
ADDITION_NODE
SUBTRACTION_NODE
MULTIPLICATION_NODE
DIVISION_NODE
POWER_NODE
CONCATENATION_NODE
GREATER_THAN_NODE
GREATER_THAN_OR_EQUAL_TO_NODE
LESS_THAN_NODE
LESS_THAN_OR_EQUAL_TO_NODE
EQUAL_TO_NODE
NOT_EQUAL_TO_NODE
NEGATION_NODE
PLUS_SIGN_NODE
PERCENT_NODE
FUNCTION_NODE
NUMBER_NODE
BOOLEAN_NODE
STRING_NODE
DATE_NODE
DURATION_NODE
EMPTY_ARGUMENT_NODE
TOKEN_NODE
ARRAY_NODE
LIST_NODE
THUNK_NODE
LOCAL_CELL_REFERENCE_NODE
CROSS_TABLE_CELL_REFERENCE_NODE
COLON_NODE
REFERENCE_ERROR_NODE
UNKNOWN_FUNCTION_NODE
APPEND_WHITESPACE_NODE
PREPEND_WHITESPACE_NODE
BEGIN_EMBEDDED_NODE_ARRAY
END_THUNK_NODE
CELL_REFERENCE_NODE
COLON_NODE_WITH_UIDS
REFERENCE_ERROR_WITH_UIDS
UID_REFERENCE_NODE
LET_BIND_NODE
LET_VAR_NODE
LET_END_SCOPE_NODE
LINKED_CELL_REF_NODE
LINKED_COLUMN_REF_NODE
LINKED_ROW_REF_NODE
CATEGORY_REF_NODE
COLON_TRACT_NODE
VIEW_TRACT_REF_NODE
ASTUidTractPurpose
UIDS_INCLUDED
UIDS_PREMERGE
UIDS_PREMOVEREGION
UIDS_EXCLUDED
UIDS_ACTIVE
UIDS_PREMERGE_TOPLEFT
UIDS_REMOVED_BY_MOVE
FULLTUPLE_ROW_COLUMN_HEADER
FULLTUPLE_AGGREGATE_RULE_UID
%FULLTUPLE_ROW_COLUMN_RULE_VALUE_PAIRS
FormulaTranslationFlagsArchive
excel_import_translation
false
+number_to_date_coercion_removal_translation
false
contains_uid_form_references
false
contains_frozen_references
false
returns_percent_formatted
false"
FormulaArchive
AST_node_array
.TSCE.ASTNodeArrayArchive
host_column
host_row
host_column_is_negative
false
host_row_is_negative
false
translation_flags
2$.TSCE.FormulaTranslationFlagsArchive
host_table_uid
.TSP.UUID
host_column_uid
.TSP.UUID
host_row_uid
.TSP.UUID"I
FunctorArchive
formula
.TSCE.FormulaArchive
num_args
FormatStructArchive
format_type
decimal_places
currency_code
negative_style
show_thousands_separator
use_accounting_style
duration_style
base
base_places
base_use_minus_sign
fraction_accuracy
suppress_date_format
suppress_time_format
date_time_format
duration_unit_largest
duration_unit_smallest
RangeCoordinateArchive
top_left_column
top_left_row
bottom_right_column
bottom_right_row
TableTransposeInfoArchive
number_of_footer_rows
body_range_for_transposed_table
.TSCE.RangeCoordinateArchive"c
MergeOriginMovedArchive
src_column
src_row
dst_column
dst_row
OwnerUIDMapperArchive
table_uid
.TSP.UUID
next_table_uid
.TSP.UUID
hidden_state_for_rows_owner_uid
.TSP.UUID
$next_hidden_state_for_rows_owner_uid
.TSP.UUID
"hidden_state_for_columns_owner_uid
.TSP.UUID
'next_hidden_state_for_columns_owner_uid
.TSP.UUID
conditional_style_owner_uid
.TSP.UUID
 next_conditional_style_owner_uid
.TSP.UUID
%sort_rule_reference_tracker_owner_uid
.TSP.UUID
*next_sort_rule_reference_tracker_owner_uid
.TSP.UUID
merge_owner_uid
.TSP.UUID
next_merge_owner_uid
.TSP.UUID
category_aggregates_owner_uid
.TSP.UUID
"next_category_aggregates_owner_uid
.TSP.UUID
group_by_uid
.TSP.UUID
next_group_by_uid
.TSP.UUID
pencil_annotation_owner_uid
.TSP.UUID
 next_pencil_annotation_owner_uid
.TSP.UUID"
RewriteTableUIDInfoArchive
table_uid_map
28.TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive
TableUIDMapEntryArchive
prev_table_uid
.TSP.UUID
new_table_uid
.TSP.UUID"
GroupByChangeArchive
change_type
2%.TSCE.GroupByChangeArchive.ChangeType
group_by_uid
.TSP.UUID
previous_level
updated_level
previous_to_updated_map
.TSP.UUIDMapArchive
updated_to_previous_map
.TSP.UUIDMapArchive
removed_group_uids
.TSP.UUID
grouping_column_changes
26.TSCE.GroupByChangeArchive.GroupingColumnChangeArchive
GroupingColumnChangeArchive
old_level
new_level
ChangeType
NONE
GROUP_VALUE_CHANGE
GROUP_DEFINITION_CHANGE
REMOVE_GROUP_LEVEL
ADD_GROUP_LEVEL
PROMOTE
DEMOTE
RewriteGroupNodeUIDInfoArchive
group_by_uid
.TSP.UUID
group_node_uid_map
.TSP.UUIDMapArchive"
IndexedUidsArchive
uids
2#.TSCE.IndexedUidsArchive.IndexedUid
IndexedUid
uid_for_index
.TSP.UUID
index_for_uid
RewriteRangeEntryArchive
range_location
range_length
range_uids
.TSP.UUID
offset
ColumnOrRowUuidsInfoArchive
is_rows
table_uid
.TSP.UUID
cond_style_owner_uid
.TSP.UUID
group_by_uid
.TSP.UUID
uids
.TSCE.IndexedUidsArchive
range_entries
.TSCE.RewriteRangeEntryArchive
table_range
.TSCE.RangeCoordinateArchive
insert_at_uid
.TSP.UUID
insert_opposite_uid
.TSP.UUID"
RegionInfoArchive
table_uid
.TSP.UUID
column_uids
.TSCE.IndexedUidsArchive
row_uids
.TSCE.IndexedUidsArchive"
RegionMovedInfoArchive
src_region
.TSCE.RegionInfoArchive
dst_region
.TSCE.RegionInfoArchive
span_rows
span_columns
original_src_region
.TSCE.RegionInfoArchive
final_dest_table_uid
.TSP.UUID"=
MergeSourceArchive
coord_column
coord_row
HauntedOwnerArchive
owner_uid
.TSP.UUID"H
CellCoordinateArchive
packedData
column
CellCoordinateVectorArchive
cell_coord
.TSCE.CellCoordinateArchive"p
 ExpandedCellRefObjectPairArchive
cell_ref
.TSCE.CellReferenceArchive
object
.TSP.Reference"g
ExpandedCellRefObjectMapArchive
cell_ref_object_pair
2&.TSCE.ExpandedCellRefObjectPairArchive"
FormulaAtCoordArchive
column
formula
.TSCE.FormulaArchive
repeat_previous_formula
false"
FormulaCoordPairsByOwnerArchive
owner_kind
owner_uid
.TSP.UUID
formula_at_coords
.TSCE.FormulaAtCoordArchive"[
FormulasForUndoArchive
formulas_for_owner
2%.TSCE.FormulaCoordPairsByOwnerArchive"q
FormulaRewriteCommandArchive
table_rewrite_command
.TSP.Reference
super
.TSK.CommandArchive"U
TrackedReferenceArchive
.TSCE.ASTNodeArrayArchive
formula_id
ExpandedTrackedReferenceArchive
.TSCE.ASTNodeArrayArchive
formula_column
formula_row
TrackedReferenceStoreArchive
uuid
.TSP.CFUUIDArchive
tracked_reference
.TSP.ReferenceB
contained_tracked_reference
.TSCE.TrackedReferenceArchive
$contained_expanded_tracked_reference
2%.TSCE.ExpandedTrackedReferenceArchive"
ViewTractRefArchive
table_uid
.TSP.UUID
uid_tract
2%.TSCE.ASTNodeArrayArchive.ASTUidTract
preserve_flags
2#.TSCE.PreserveColumnRowFlagsArchive
agg_index_level
column_group_level
row_group_level
BooleanCellValueArchive
value
format
.TSK.FormatStructArchive
format_is_explicit
false"
DateCellValueArchive
value
format
.TSK.FormatStructArchive
format_is_implicit
format_is_explicit
false"
NumberCellValueArchive
value
unit_index
currency_code
format
.TSK.FormatStructArchive
format_is_implicit
format_is_explicit
false
decimal_low
decimal_high
StringCellValueArchive
value
format
.TSK.FormatStructArchive
format_is_implicit
format_is_explicit
false
is_regex
false
is_case_sensitive_regex
false"y
ErrorCellValueArchive
error_type
extra_info_int
extra_info_string
extra_info_double
CellValueArchive
cell_value_type
2$.TSCE.CellValueArchive.CellValueType
boolean_value
.TSCE.BooleanCellValueArchive
date_value
.TSCE.DateCellValueArchive
number_value
.TSCE.NumberCellValueArchive
string_value
.TSCE.StringCellValueArchive
error_value
.TSCE.ErrorCellValueArchive"`
CellValueType
NIL_TYPE
BOOLEAN_TYPE
DATE_TYPE
NUMBER_TYPE
STRING_TYPE
N4TSCE20CellReferenceArchiveE
N4TSCE28InternalCellReferenceArchiveE
N4TSCE22RelativeCellRefArchiveE
N4TSCE21RangeReferenceArchiveE
N4TSCE29InternalRangeReferenceArchiveE
N4TSCE29IndexSetArchive_IndexSetEntryE
N4TSCE15IndexSetArchiveE
N4TSCE31CellCoordSetArchive_ColumnEntryE
N4TSCE19CellCoordSetArchiveE
N4TSCE36InternalCellRefSetArchive_OwnerEntryE
N4TSCE25InternalCellRefSetArchiveE
N4TSCE13ColumnRowSizeE
N4TSCE15CellRectArchiveE
N4TSCE28CellRefSetArchive_OwnerEntryE
N4TSCE17CellRefSetArchiveE
N4TSCE30UidCoordSetArchive_ColumnEntryE
N4TSCE18UidCoordSetArchiveE
N4TSCE31UidCellRefSetArchive_OwnerEntryE
N4TSCE20UidCellRefSetArchiveE
N4TSCE24ReferencesToDirtyArchiveE
N4TSCE34CoordMapperArchive_BaseToViewEntryE
N4TSCE37CoordMapperArchive_SummaryToViewEntryE
N4TSCE18CoordMapperArchiveE
N4TSCE16ReferenceArchiveE
N4TSCE11EdgeArchiveE
N4TSCE12EdgesArchiveE
N4TSCE20ExpandedEdgesArchiveE
N4TSCE17CellRecordArchiveE
N4TSCE23CellDependenciesArchiveE
N4TSCE25CellRecordExpandedArchiveE
N4TSCE31CellDependenciesExpandedArchiveE
N4TSCE21CellRecordTileArchiveE
N4TSCE28CellDependenciesTiledArchiveE
N4TSCE27VolatileDependenciesArchiveE
N4TSCE35VolatileDependenciesExpandedArchiveE
N4TSCE32RTreeInternalNodeContentsArchiveE
N4TSCE28RTreeLeafNodeContentsArchiveE
N4TSCE16RTreeNodeArchiveE
N4TSCE12RTreeArchiveE
N4TSCE26RangeBackDependencyArchiveE
N4TSCE24RangeDependenciesArchiveE
N4TSCE45RangePrecedentsTileArchive_FromToRangeArchiveE
N4TSCE26RangePrecedentsTileArchiveE
N4TSCE29RangeDependenciesTiledArchiveE
N4TSCE55SpanningDependenciesArchive_ReferringColumnToLocalCellsE
N4TSCE56SpanningDependenciesArchive_ReferringColumnToRemoteCellsE
N4TSCE27SpanningDependenciesArchiveE
N4TSCE47SpanningDependenciesExpandedArchive_ExtentRangeE
N4TSCE67SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContextE
N4TSCE60SpanningDependenciesExpandedArchive_CellCoordRefersToExtentsE
N4TSCE35SpanningDependenciesExpandedArchiveE
N4TSCE29WholeOwnerDependenciesArchiveE
N4TSCE37WholeOwnerDependenciesExpandedArchiveE
N4TSCE30CellErrorsArchive_ErrorForCellE
N4TSCE17CellErrorsArchiveE
N4TSCE30UuidReferencesArchive_TableRefE
N4TSCE29UuidReferencesArchive_UuidRefE
N4TSCE38UuidReferencesArchive_TableWithUuidRefE
N4TSCE21UuidReferencesArchiveE
N4TSCE31FormulaOwnerDependenciesArchiveE
N4TSCE23FormulaOwnerInfoArchiveE
N4TSCE24SubFormulaOwnerIDArchiveE
N4TSCE40OwnerIDMapArchive_OwnerIDMapArchiveEntryE
N4TSCE17OwnerIDMapArchiveE
N4TSCE20UidLookupListArchiveE
N4TSCE24DependencyTrackerArchiveE
N4TSCE26RemoteDataSpecifierArchiveE
N4TSCE44RemoteDataValueMapArchive_RemoteDataMapEntryE
N4TSCE25RemoteDataValueMapArchiveE
N4TSCE27StockArchive_AttributeEntryE
N4TSCE12StockArchiveE
N4TSCE22RemoteDataStoreArchiveE
N4TSCE24NameTrackedReferencePairE
N4TSCE30NamesByTrackedReferenceArchiveE
N4TSCE28NamedReferenceManagerArchiveE
N4TSCE27UuidSetStoreArchive_UuidSetE
N4TSCE19UuidSetStoreArchiveE
N4TSCE39UuidReferenceMapArchive_CellRefsForUuidE
N4TSCE23UuidReferenceMapArchiveE
N4TSCE42GroupByNodeMapArchive_CellRefsForGroupNodeE
N4TSCE42GroupByNodeMapArchive_GroupNodesForGroupByE
N4TSCE21GroupByNodeMapArchiveE
N4TSCE24CalculationEngineArchiveE
N4TSCE29PreserveColumnRowFlagsArchiveE
N4TSCE38CategoryReferenceArchive_CatRefUidListE
N4TSCE24CategoryReferenceArchiveE
N4TSCE52ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchiveE
N4TSCE57ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchiveE
N4TSCE46ASTNodeArrayArchive_ASTColumnCoordinateArchiveE
N4TSCE43ASTNodeArrayArchive_ASTRowCoordinateArchiveE
N4TSCE30ASTNodeArrayArchive_ASTUidListE
N4TSCE31ASTNodeArrayArchive_ASTUidTractE
N4TSCE33ASTNodeArrayArchive_ASTStickyBitsE
N4TSCE35ASTNodeArrayArchive_ASTUidTractListE
N4TSCE43ASTNodeArrayArchive_ASTUidCoordinateArchiveE
N4TSCE37ASTNodeArrayArchive_ASTCategoryLevelsE
N4TSCE47ASTNodeArrayArchive_ASTCategoryReferenceArchiveE
N4TSCE74ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchiveE
N4TSCE74ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchiveE
N4TSCE40ASTNodeArrayArchive_ASTColonTractArchiveE
N4TSCE58ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchiveE
N4TSCE40ASTNodeArrayArchive_ASTLetNodeWhitespaceE
N4TSCE34ASTNodeArrayArchive_ASTNodeArchiveE
N4TSCE19ASTNodeArrayArchiveE
N4TSCE30FormulaTranslationFlagsArchiveE
N4TSCE14FormulaArchiveE
N4TSCE14FunctorArchiveE
N4TSCE19FormatStructArchiveE
N4TSCE22RangeCoordinateArchiveE
N4TSCE25TableTransposeInfoArchiveE
N4TSCE23MergeOriginMovedArchiveE
N4TSCE21OwnerUIDMapperArchiveE
N4TSCE50RewriteTableUIDInfoArchive_TableUIDMapEntryArchiveE
N4TSCE26RewriteTableUIDInfoArchiveE
N4TSCE48GroupByChangeArchive_GroupingColumnChangeArchiveE
N4TSCE20GroupByChangeArchiveE
N4TSCE30RewriteGroupNodeUIDInfoArchiveE
N4TSCE29IndexedUidsArchive_IndexedUidE
N4TSCE18IndexedUidsArchiveE
N4TSCE24RewriteRangeEntryArchiveE
N4TSCE27ColumnOrRowUuidsInfoArchiveE
N4TSCE17RegionInfoArchiveE
N4TSCE22RegionMovedInfoArchiveE
N4TSCE18MergeSourceArchiveE
N4TSCE19HauntedOwnerArchiveE
N4TSCE21CellCoordinateArchiveE
N4TSCE27CellCoordinateVectorArchiveE
N4TSCE32ExpandedCellRefObjectPairArchiveE
N4TSCE31ExpandedCellRefObjectMapArchiveE
N4TSCE21FormulaAtCoordArchiveE
N4TSCE31FormulaCoordPairsByOwnerArchiveE
N4TSCE22FormulasForUndoArchiveE
N4TSCE28FormulaRewriteCommandArchiveE
N4TSCE23TrackedReferenceArchiveE
N4TSCE31ExpandedTrackedReferenceArchiveE
N4TSCE28TrackedReferenceStoreArchiveE
N4TSCE19ViewTractRefArchiveE
N4TSCE23BooleanCellValueArchiveE
N4TSCE20DateCellValueArchiveE
N4TSCE22NumberCellValueArchiveE
N4TSCE22StringCellValueArchiveE
N4TSCE21ErrorCellValueArchiveE
N4TSCE16CellValueArchiveE
N6google8protobuf8internal16InternalMetadata9ContainerINS0_15UnknownFieldSetEEE
N6google8protobuf8internal16InternalMetadata13ContainerBaseE
 !"#$%&'(
0123456789:;<
FGHIJK
 !"#$%&
_fgh]^
hi]^fg}&v
#$%&
 !"#$%&!"#$%&PQRSTUVWXYZ[
%&fg
E'=F
)*+,-./|
@PQRSTUVWXYZ[\B]^_v`
 cdefgh
0123456789:;<>?{
wyxz=<'
AHANO
 9:;<GK6789:;<789:;<jklmnopqrstu
BBBBBBBB
$&'15:""BBB@?
%',>
BBBBBBBBBBBBB
BBB4B#!!BBBBBB8B
()*+23
9BBB(-/*.076
)*++++++++++++++++++++,,--./0112233444555556666678888999::;;;<==>>
!"+,.014578:;<>>
-/5689=>>>>>>>>
 !"#$%&1
++>>>>>>>>>>>>>>>>>22>>>>>>>++++++++++++
8:8:;<,0
89=89==;
>>>3
+ >+
+">+
+!>+
+$>+
+#>+
+%>+
$).38=BFJNPSVX[^aeilpsz
#$%&'()*+,-./012334555556789:;<=>?@ABBCDDDEFEEEGHHHHIHHHHJKLMNONPPQRRRRRRRRRRRRRRRRRRRRSRTUUUUUUVWXYZZZZZZZZZZ[\PPPPPPPPPPPPPPPP
16TSCEDefaultLexer
22TSCEDefaultyyFlexLexer
9FlexLexer
 !"#$%&'()*+,-./001222223456789:;<=>??@AAABCBBBDEEEEFEEEEGHIJKLKMMNOOOOOOOOOOOOOOOOOOOOPOQRRRRRRSTUVWWWWWWWWWWXYMMMMMMMMMMMMMMMM
14TSCECommaLexer
15ignoreFlexLexer
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
bool TSCEReferenceSet::operator==(const TSCEReferenceSet &) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEReferenceSet.mm
Can't compare reference sets from different calcEngines
v24@?0r^{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}C}8^B16
BOOL TSCEReferenceSet::isEqualToDepTrackerPrecedents(const TSCEReferenceSet &) const
void TSCEReferenceSet::insertRef(TSCEReferenceType)
Inserting these refTypes requires accompanying data, refType was %d
void TSCEReferenceSet::insertRef(const TSCEInternalCellReference &)
Dependency tracker is required to use this method
void TSCEReferenceSet::insertRef(const TSCESpanningRangeRef &)
Why are we getting invalid tableUID here?
v20@?0S8^B12
v24@?0r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}8^B16
v24@?0r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}8^B16
v24@?0r^{TSKUIDStruct=QQ}8^B16
v32@?0r^{TSKUIDStruct=QQ}8r^{TSKUIDStruct=QQ}16^B24
void TSCEReferenceSet::removeRef(TSCEReferenceType)
Removing these refTypes requires accompanying data, refType was %d
bool TSCEReferenceSet::containsRef(const TSCEInternalCellReference &) const
void TSCEReferenceSet::foreachInternalCellRef(__strong TSCEForEachInternalCellRefBlock) const
sLocalizedTrue
sLocalizedTrueStrings
sLocalizedFalse
sLocalizedFalseStrings
mappings_functionLocalizationDictionary
DATE
TSCalculationEngine
DATEDIF
DATEVALUE
DAYNAME
DAYS360
EDATE
EOMONTH
HOUR
MINUTE
MONTH
MONTHNAME
NETWORKDAYS
SECOND
TIME
TIMEVALUE
TODAY
WEEKDAY
WEEKNUM
WORKDAY
YEAR
YEARFRAC
DURATION
DUR2DAYS
DUR2HOURS
DUR2MILLISECONDS
DUR2MINUTES
DUR2SECONDS
DUR2WEEKS
STRIPDURATION
BASETONUM
BESSELJ
BESSELY
BIN2DEC
BIN2HEX
BIN2OCT
CONVERT
DEC2BIN
DEC2HEX
DEC2OCT
DELTA
ERFC
GESTEP
HEX2BIN
HEX2DEC
HEX2OCT
NUMTOBASE
OCT2BIN
OCT2DEC
OCT2HEX
ACCRINT
ACCRINTM
BONDDURATION
BONDMDURATION
COUPDAYBS
COUPDAYS
COUPDAYSNC
COUPNUM
CUMIPMT
CUMPRINC
CURRENCY
CURRENCYCODE
CURRENCYCONVERT
CURRENCYH
DISC
EFFECT
INTRATE
IPMT
ISPMT
MIRR
NOMINAL
NPER
PPMT
PRICE
PRICEDISC
PRICEMAT
RATE
RECEIVED
STOCK
STOCKH
XIRR
XNPV
YIELD
YIELDDISC
YIELDMAT
FALSE
IFERROR
ISBLANK
ISDATE
ISERROR
ISEVEN
ISNUMBER
ISODD
ISTEXT
TRUE
ADDRESS
AREAS
CHOOSE
COLUMN
COLUMNS
FORMULATEXT
GETPIVOTDATA
HLOOKUP
HYPERLINK
INDEX
INDIRECT
INTERSECT.RANGES
LOOKUP
MATCH
OFFSET
REFERENCE.NAME
ROWS
TRANSPOSE
UNION.RANGES
VLOOKUP
XLOOKUP
XMATCH
ACOS
ACOSH
ASIN
ASINH
ATAN
ATAN2
ATANH
CEILING
COMBIN
COSH
DEGREES
EVEN
FACT
FACTDOUBLE
FLOOR
LOG10
MROUND
MULTINOMIAL
POLYNOMIAL
POWER
PRODUCT
QUOTIENT
RADIANS
RAND
RANDBETWEEN
ROMAN
ROUND
ROUNDDOWN
ROUNDUP
SERIESSUM
SIGN
SINH
SQRT
SQRTPI
SUBTOTAL
SUMIF
SUMIFS
SUMPRODUCT
SUMSQ
SUMX2MY2
SUMX2PY2
SUMXMY2
TANH
TRUNC
AVEDEV
AVERAGE
AVERAGEA
AVERAGEIF
AVERAGEIFS
BETADIST
BETAINV
BINOMDIST
CHIDIST
CHIINV
CHITEST
CONFIDENCE
CORREL
COUNT
COUNTA
COUNTBLANK
COUNTIF
COUNTIFS
COVAR
CRITBINOM
DEVSQ
EXPONDIST
FDIST
FINV
FORECAST
FREQUENCY
GAMMADIST
GAMMAINV
GAMMALN
GEOMEAN
HARMEAN
INTERCEPT
LARGE
LINEST
LOGINV
LOGNORMDIST
MAXA
MAXIFS
MEDIAN
MINA
MINIFS
MODE
NEGBINOMDIST
NORMDIST
NORMINV
NORMSDIST
NORMSINV
PERCENTILE
PERCENTRANK
PERMUT
POISSON
PROB
QUARTILE
RANK
SLOPE
SMALL
STANDARDIZE
STDEV
STDEVA
STDEVP
STDEVPA
TDIST
TINV
TTEST
VARA
VARP
VARPA
WEIBULL
ZTEST
CHAR
CLEAN
CODE
CONCATENATE
COUNTMATCHES
DOLLAR
EXACT
FIND
FIXED
LEFT
LOWER
PLAINTEXT
PROPER
REGEX
REGEX.EXTRACT
REPLACE
REPT
RIGHT
SEARCH
SUBSTITUTE
TEXTAFTER
TEXTBEFORE
TEXTBETWEEN
TRIM
UPPER
VALUE
op_Add
op_Subtract
op_Multiply
op_Divide
op_Concat
op_Power
op_LT
op_LE
op_GT
op_GE
op_NE
op_EQ
op_Percent
op_Negate
op_PlusSign
mappings_localizedTypeStringForArgumentType
an error
an empty cell
empty
a number
a string
a Boolean
a date
a reference
a vector
a duration
anything
a number, date, or duration
localizedFunctionNameForMenuTag
Mean
Median
Mode
localizedNameForFunction:
%@_TOOLTIP
localizedCategoryForFunction:
%@_ARGUMENT_%d
%@_ARGUMENT_%d_TOOLTIP
%@_ARGUMENT_%d_MODE_%d
%@_ARGUMENT_%d_MODE_%d_TOOLTIP
arguments
Localizable
strings
-[TSULocale(TSCELocalization) localizedNamesForFunctions:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCELocalization.mm
Either %@ was translated improperly, or some other function was translated to the same name.
q24@?0@8@16
localizedFunctionCategoryDictionary
Date and Time
Duration
Engineering
Financial
Logical and Information
Reference
Numeric
Trigonometric
Statistical
Text
localizedCategoryArray
allLocalizedFunctions
localizedLabelForAggType
No Summary
Count (All)
Average (All)
Minimum
Maximum
Category
Group Name
Body
Label
Count
Count (Unique)
Rows
Count (Duplicates)
Count (Blank)
Average
Product
RANGE
localizedShortLabelForAggType
Count All
Average All
Min.
Max.
Unique
Count Duplicates
Count Blank
Base Value
% of Grand Total
% of Column Total
% of Row Total
% of Parent Column Total
% of Parent Row Total
Index
-[TSCEWarning copyByRemappingEntityIDs:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEWarning.mm
TSCE_PORT_ENABLE_REFERENCES: This is probably a bug.
-[TSCEWarning displayStringWithCalculationEngine:forTable:andCellID:]
empty cell warnings are not supported
The formula refers to %@, which contains a cell without a number.
The formula refers to %@, which contains cells without numbers.
The formula refers to cells without numbers.
The formula compares %@ to %@.
The link is invalid.
ISODD arguments must be integers.
ISEVEN arguments must be integers.
DATE day argument should be between 1 and 31.
DATE month argument should be between 1 and 12.
The formula uses a Boolean in place of a number.
The ranges given to SUMIF have different sizes.
Duration units were removed.
The units of all arguments were converted to match the units of the first argument.
%@%@%@
 (ignored) 
v24@?0r^{TSKUIDStructCoord={TSKUIDStruct=QQ}{TSKUIDStruct=QQ}}8^B16
v32@?0r^{TSKUIDStructCoord={TSKUIDStruct=QQ}{TSKUIDStruct=QQ}}8r^{TSKUIDStruct=QQ}16^B24
v8@?0
+[TSCEFunctionSpec functionSpecForFunctionName:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFunctionSpec.mm
functionSpecForFunctionName: expects US function names, but %@ (US is %@) was passed in.
+[TSCEFunctionSpec unsupportedFunctionNameForLocale:]
invalid nil value for '%{public}s'
locale
Unsupported
-[TSCEFunctionSpec loadRepeatingArguments]
I don't think we ever use higher than 2, actually, certainly not repeatingGroupSize: %hd
origArgIndex out of bounds: %lu
-[TSCEFunctionSpec argumentSpecForIndex:]
translatedIndex out of bounds: %lu
 :: 
TSCEWarningClassKey
TSCEWarningTypeKey
TSCEOriginalFormulaKey
TSCEWarningReferenceKey
TSCEWarningContextEntityKey
TSCENativeWarningClass
TSCEBlankReferencingWarning
TSCENonNumericReferencingWarning
TSCEComparisonWarning
TSCEInvalidHyperlinkWarning
TSCENonintegerISODDWarning
TSCENonintegerISEVENWarning
TSCEMonthOutOfRangeWarning
TSCEDayOutOfRangeWarning
TSCEBoolToNumberConversionWarning
TSCEMismatchedSizesWarning
TSCELossOfUnitsWarning
TSCEAutomaticUnitConversionWarning
TSCETableFormulasDidChangeNotification
TSCETableFormulasMayHaveNewValuesNotification
TSCETableWasAddedNotification
TSCETableWillBeRemovedNotification
TSCEFormulasKey
TSCEEntityKey
TSCEFormulaCachedUserVisibleStringKey
TSCEFormulaEditorChangedFocusNotification
TSCEFormulaEditorStateChangeNotification
TSCEFormulaEditorScrollToCellNotification
TSCEFormulaEditorReceivedKeyDownEventNotification
TSCEFormulaEditorActiveControllerDidChange
TSCEFormulaCellOriginDidChangeNotification
TSCEAutocompleteDataKey
TSCEFormulaMetadataErrorKey
TSCEFormulaMetadataNameKey
TSCEFormulaMetadataWarningsKey
TSCEFormulaMetadataAllWarningsCacheKey
TSCEFormulaMetadataFormattingKey
TSCEFormattingHyperlinkKey
SFTGlobalID_
TSCEDefaultsDisableImplicitNaming
TSCEDefaultsRecentFunctions
TSCEDefaultsRecentFunctionsTimestamps
TSCEDefaultsMaximumNumRecentFunctions
TSCEExpressionNodeOldAttribute
NodeCoverage
IntersectionReferenceNodeCoverage
365.2425
14593.9
453.59237
28.349523125
1.6605390402E-24
0.06479891
1609.344
.9144
.3048
.0254
1E-10
1.143
30,856,775,814,913,673
1609.347218694
6894.75729
133.3223684210526
1E-5
4.4482216152605
0.009806649999788
1E-7
4.184
4.1868
1.602176634E-19
1.3558179483314
1055.05585257348
745.69987158227022
735.49875
1.25
4046.872609874252
1E-20
0.092903
.0295735295625
0.473176473
0.56826125
0.946352946
3.785411784
0.005
1.13652
4.54609
1E-30
35.2391
28.3168
0.0163871
0.44704
0.3048
1.852
grain
shweight
uk_cwt
lcwt
hweight
stone
uk_ton
LTON
brton
Pica
Picapt
parsec
survey_mi
mmHg
Torr
pond
Rank
Reau
tbsp
fl oz
us_pt
uk_pt
tspm
uk_qt
uk_gal
ang3
ang^3
barrel
bushel
ft^3
in^3
ly^3
mi^3
yd^3
Nmi3
Nmi^3
Picapt3
Picapt^3
Pica3
Pica^3
regton
MTON
mi/h
m/sec
mi/mn
ft/mn
ft/s
m/hr
m/mn
admkn
uk_acre
us_acre
ang2
ang^2
ft^2
in^2
ly^2
Morgen
mi^2
Nmi2
Nmi^2
Picapt2
Picapt^2
Pica2
Pica^2
yd^2
byte
+[TSCEUnitRegistry unitForCurrencyCode:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEUnitRegistry.mm
can't look up unit for a nil currency code
+[TSCEUnitRegistry canonicalUnitForDimension:]
Unknown dimension found in canonicalUnitForDimension
+[TSCEUnitRegistry multiplierForUnitPrefix:]
Shouldn't try to get the multiplier of an invalid unit prefix
Shouldn't try to get the multiplier of an unknown unit prefix
+[TSCEUnitRegistry convert:fromUnit:toUnit:]
Invalid unit found in convert:
Can't convert across dimensions.
+[TSCEUnitRegistry dimensionForUnit:]
unit out of bounds in dimensionForUnit:.
-[TSCECellDirtier dirtyNewCellRef:forSeconds:fromStartTime:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECellDirtier.mm
%p Still working on dirtying: %@
TSCETaggedDecimal TSCETaggedDecimalList::findPivot()
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCETaggedDecimalList.mm
We shouldn't be finding the pivot of a 0 length array
size_t TSCETaggedDecimalList::partitionTaggedDecimals(const TSCETaggedDecimal &)
_size == 0?
+[TSCETaggedDecimalListObject createFromVector:functionSpec:argumentIndex:evaluationContext:ignoreError:ignoreDuplicates:]
Have to set the type of vector appropriately. currentType = %d
Malformed Reference Node - Unexpected Path Delimiter
Malformed Reference Node
TSCEASTNodeArray *processReference(TSCEParser *, TSCEASTNode *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECAST.mm
Wrong parser state?
Missing sibling in function call
Malformed Reference Node - Function with trailing crap
Whitespace missing between leaves.
Too many nodes inside a reference node
id TSCEASTLeafGetString(TSCEASTLeaf *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECAST.h
Can't have a string type leaf with type function.
TSCEASTNodeArray *TSCEASTLeafGetFunction(TSCEASTLeaf *)
Can't have a non function type leaf return a function.
TSCEOwnerUID formulaOwnerUIDFromNativeIDString(NSString *__strong, TSCECalculationEngine *__strong, TSCEFormulaSyntaxType)
ResolverId_
#REF!
We should have successfully registered the parsedOwnerID: %@
%@%@
Invalid Reference
void gatherNativeReferenceInformation(TSCERegionAllocator *__strong, TSCEASTLeaf *, TSCEOwnerUID, TSCERangeCoordinate *, TSUPreserveFlagsEnum *, NSString *__autoreleasing *, NSString *__autoreleasing *, TSCEASTLeaf **)
We shouldn't have quoted labels on import
#%lu[%@]
%@<%p> for ownerUID %@:
Table %@ <- %@
Table %@, Uid: %@ <- %@
v24@?0r^{TSUCellCoord=ISBB}8^B16
'%C%C%C%C
+[NSCharacterSet(TSCEAdditions) tsce_singleQuoteCharacterSet]_block_invoke
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/NSCharacterSetAdditions.m
(){}+-*/^%:,!&=><$"'#;|
%C%C%C
%C%C%C%C%C%C%C
%C%C
%C%C%C%C%C%C%C%C%C%C%C%C%C%C%C%C%C%C%C%C%C%C
+[NSCharacterSet(TSCEAdditions) tsce_characterSetRequiringSingleQuotes]_block_invoke
.%C%C
+[NSCharacterSet(TSCEAdditions) tsce_periodCharacterSet]_block_invoke
+[NSCharacterSet(TSCEAdditions) tsce_internationalWhitespaceCharacterSet]_block_invoke
+[NSCharacterSet(TSCEAdditions) tsce_internationalWhitespaceAndNewlineCharacterSet]_block_invoke
+[NSCharacterSet(TSCEAdditions) tsce_internationalColonCharacterSet]_block_invoke
+[NSCharacterSet(TSCEAdditions) tsce_dollarSignCharacterSet]_block_invoke
,%C%C;%C%C%C
+[NSCharacterSet(TSCEAdditions) tsce_listDelimiterCharacterSet]_block_invoke
virtual TSCEASTElement *TSCEASTRewriteUsingValuesRewriter::binaryInfixOperatorNode(TSCEASTBinaryElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTRewriteUsingValuesRewriter.mm
Unknown operator tag: %d
evaluation stack is too small
virtual TSCEASTElement *TSCEASTRewriteUsingValuesRewriter::unaryOperatorNode(TSCEASTUnaryElement *, BOOL)
virtual TSCEASTElement *TSCEASTRewriteUsingValuesRewriter::linkedRefNode(TSCEASTLinkedRefElement *)
Unsupporeted by TSCEASTRewriteUsingValuesRewriter: linkedRefNode
virtual TSCEASTElement *TSCEASTRewriteUsingValuesRewriter::uidReferenceNode(TSCEASTUidReferenceElement *)
Unsupporeted by TSCEASTRewriteUsingValuesRewriter: uidReferenceNode
virtual TSCEASTElement *TSCEASTRewriteUsingValuesRewriter::letBindNode(TSCEASTLetBindElement *)
Not expecting let usage in this rewriter
virtual TSCEASTElement *TSCEASTRewriteUsingValuesRewriter::letVariableNode(TSCEASTLetVariableElement *)
virtual TSCEASTElement *TSCEASTRewriteUsingValuesRewriter::letEndScopeNode(TSCEASTLetEndScopeElement *)
TSCEValue TSCEASTRewriteUsingValuesRewriter::evaluationResult()
an evaluation result is undefined
bool TSCEASTRewriteUsingValuesRewriter::rewriteFunctionCallByRemovingNumberToDateCoercions(uint16_t, uint32_t)
All TSCEASTRewriteUsingValuesRewriter callbacks need to adjust _evaluationStackElementOriginSizes and _copiedNodes appropriately.
-[TSCENameTrie removeName:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCENameTrie.mm
Verify we are deleting the correct node
-[TSCEReferencesToDirty setCalculationEngine:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEReferencesToDirty.mm
calcEngine
-[TSCEReferencesToDirty dirtyAllCellsInOwner:]
depTracker
v24@?0r^{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}8^B16
-[TSCEReferencesToDirty dirtyRangeRef:]
v32@?0r^{TSKUIDStruct=QQ}8r^v16^B24
B8@?0
-[TSCEUndoTractList addToIncludedUidsTractColumnUids:rowUids:isRangeRef:preserveRectangularRange:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEUndoTractList.mm
Combining a spanning and non-spanning TSKUIDStructVector vector
<%@> sticky:%d Tracts: 
  %@
-[TSCEUndoTractList(FullTuple) initAsFullTupleForColumnHeaderUid:rowHeaderUid:aggregateRuleUid:flatteningDimension:]
Not a valid TSTTableDimension value: %d
TSCEExtraInfoKey
TSCEArgument1Key
TSCEArgument2Key
TSCESyntaxError
TSCEInvalidTokenInFormulaError
TSCEUnknownError
TSCEUnknownFunctionError
TSCEUnknownLabelError
TSCEInvalidReferenceError
TSCEDivideByZeroError
TSCEZeroToPowerOfZeroError
TSCECircularReferenceError
TSCEValueError
TSCENumberOfArgumentsError
TSCETooManyArgumentsError
TSCENumberError
TSCEErrorReferenceError
TSCEInvalidArgumentsError
TSCEAutoNumberAttachmentError
TSCEAttachmentError
TSCEMissingTableError
TSCEInvalidIntersectionError
TSCENotAReferenceError
TSCENotACellReferenceError
TSCENotARangeReferenceError
TSCEMatchNotFoundError
TSCERegexMatchNotFoundError
TSCEOutOfBoundsArgumentError
TSCEInvalidArrayContentsError
TSCEValueNotAvailableError
TSCEArgumentSetUsedOutOfContextError
TSCEDifferentNumberOfDataPointsError
TSCEInvalidDateManipulationError
TSCEMixedTypeManipulationError
TSCENoModeError
TSCEEmptyArgumentError
TSCEEmptyArgumentSpecificError
TSCEInvalidHyperlinkError
TSCEDifferentNumberOfElementsError
TSCEStringTooLongError
TSCEUnionInsideIntersectionError
TSCEStartNumberExceedsStringLengthError
TSCENoSuitableArgumentsError
TSCEInvalidArgumentRelationshipError
TSCEInvalidArgumentEqualityRelationshipError
TSCEInvalidIndexForChooseError
TSCENonEmptyStringRequiredError
TSCEStringDoesNotRepresentANumberError
TSCEStringDoesNotRepresentDateError
TSCESignsMustMatchError
TSCERangeDoesNotSumToOneError
TSCEUnsupportedR1C1Error
TSCEInvalidDateError
TSCEInvalidTimeError
TSCENotAVectorError
TSCEInvalidProbabiltyError
TSCENumberSmallerThanZeroError
TSCEArgumentEqualsToZeroError
TSCEPositionLargerThanArrayError
TSCEInvalidFrequencyError
TSCEInvalidTypeError
TSCEInvalidTailError
TSCEInvalidSubtotalFunctionNumberError
TSCENumberDoesNotConvergeError
TSCENumberDoesNotConvergeWithEstimateError
TSCEReferenceToEmptyCellError
TSCENumberMinusDateError
TSCETooFewDataPointsError
TSCEDateEarlierThanStartingDateError
TSCEOnlyPositiveOrNegativeError
TSCEInvalidCurrencyComparisonError
TSCEInvalidComparisonError
TSCEMismatchedUnitsError
TSCEUnitsNotAllowedError
TSCECurrencyNotAllowedError
TSCEDurationNotAllowedError
TSCEMismatchedCurrenciesError
TSCESumMixedDurationsAndUnitlessWithoutADateError
TSCENotEnoughInputsError
TSCEInvalidArgumentPairingsError
TSCERangeSizeMismatchError
TSCEEmptyArrayError
TSCEInvalidBaseCharacterError
TSCEInvalidUnitStringError
TSCEDifferentDimensionsError
TSCENonMetricUnitPrefixError
TSCEConvertOriginUnitMismatchError
TSCEArrayElementNoDataError
TSCEDataInvalidDimensionsError
TSCEDataInvalidLengthError
TSCEDataInvalidWidthError
TSCENegativeReceivedAmountError
TSCEInvalidMatchModeError
TSCEFormulaTooLongError
TSCEMismatchedMaxUnitsError
TSCEGridValueNotNumberError
TSCECharInputOutOfBoundsError
TSCENormdistPDFDurationError
TSCELinestHighlyCorrelatedVariableError
TSCEComparisonTypeError
TSCEMultipleDurationsError
TSCELinestMatrixUnderdeterminedError
TSCENegativeVectorValueError
TSCEPercentRankInputOutOfRangeError
TSCEPercentRankExcInputOutOfRangeError
TSCELocationServicesNotEnabledError
TSCELocationHeadingUnknownError
TSCELocationUnknownError
TSCELocationUserDeniedError
TSCELocationNetworkError
TSCELocationHeadingFailureError
TSCEInvalidLatitudeLongitudeError
TSCEInvalidAltitudeError
TSCEInvalidHeadingError
TSCEInvalidRegexError
TSCEUnsupportedFunctionError
TSCEUnsupportedFeatureError
TSCENoConditionIsTrueError
TSCEInvalidLiveStockAttributeError
TSCENotAReferenceToAFormulaError
TSCEInvalidReferenceNameAttributeError
TSCEInvalidLiveCurrencyAttributeError
TSCEInvalidHistoricalStockAttributeError
TSCEInvalidHistoricalCurrencyAttributeError
TSCEInvalidHistoricalDateError
TSCENoTradingInformationError
TSCEInvalidStockCodeError
TSCEInvalidCurrencyPairError
TSCERemoteDataServerError
TSCERemoteDataUnavailableError
TSCENotReadyError
TSCEDisallowedStockModeError
TSCEInvalidRangeUsageError
TSCEMissingRunningTotalInFieldError
TSCEMissingPivotTableError
TSCEInvalidAggregateColumnError
TSCEInvalidGroupingColumnError
TSCEAbortedError
void TSCECellRecord::switchToEdgeListStructure(TSCECellRecordEdgeLists *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECellRecord.mm
Overriding existing _edges pointer
void TSCECellRecord::addEdge(const TSCEInternalCellReference &, BOOL)
Should already have an _edges structure allocated
void TSCECellRecord::readExpandedPrecedentsWithOwners(const TSCE::ExpandedEdgesArchive &)
corrupted file
TSCECellRecord %@ (%lu,%lu): 
 dirtySelfPlusPrecedentsCount: %lu
 guaranteedOnDirtyLeafQueue: %@
 isInACycle: %@
 containsFormula: %@
 hasCalculatedPrecedents: %@
 translateForExcelImportOnNextRecalc: %@
 Precedents (%lu): 
%@, 
 Dependents count: %lu
%@<%p>:
v32@?0{_NSRange=QQ}8^B24
v24@?0Q8^B16
-[TSCECoordMapper chromeTractRefForViewTractRef:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECoordMapper.mm
Not able to find valid indexes
Wasn't expecting this to be possible with valid input
v16@?0I8I12
TSUColumnIndex TSCEMakeAbsoluteColumnFromRelativeColumn(TSUCellCoord, TSURelativeColumnIndex, BOOL)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCETypes.h
overflow in column
TSURowIndex TSCEMakeAbsoluteRowFromRelativeRow(TSUCellCoord, TSURelativeRowIndex, BOOL)
overflow in row, input row: %d with host row: %lu
Calling TSCEMakeAbsoluteRowFromRelativeRow with an invalid hostCell row: %@
TSKUIDStructVector TSCEASTInsertRowsRewriter::columnUIDsForRange(const TSCEOwnerUID &, NSRange)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTInsertRowsRewriter.mm
This method should only be called for MoveColumnsOrRows rewrites
TSKUIDStructVector TSCEASTInsertRowsRewriter::rowUIDsForRange(const TSCEOwnerUID &, NSRange)
virtual TSCEASTElement *TSCEASTInsertRowsRewriter::uidReferenceNode(TSCEASTUidReferenceElement *)
TSCEASTInsertRowsRewriter - only move rows uses uuid-form references
Can't be spanning on both row and column, tractList: %{public}@
%C%C%C%%C
%C%C%C%C%C%C%C%C%C
'%C%C%C%C%C%C%C
TSCEUidLookupList:
virtual TSCEASTElement *TSCEASTRepairBadRefsRewriter::colonTractNode(TSCEASTColonTractElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTRepairBadRefsRewriter.mm
Can't have a reference spanning both columns and rows
v24@?0r^{TSUIndexRange=qq}8^B16
void TSCECellRefSet::encodeToArchive(TSCE::InternalCellRefSetArchive &, TSCEDependencyTracker *) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECellRefSet.mm
virtual NSString *TSCEStringValue::string(TSCEFunctionSpec *__strong, int, TSULocale *__strong) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEStringValue.mm
customFormat.customFormat.defaultFormatData
TSCENumberValue::TSCENumberValue(const TSUDecimal &, TSCEBaseUnit, BOOL)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCENumberValue.mm
can't make a unitless zero with a number other than zero!
can't make a unitless zero with a unit!
virtual NSString *TSCENumberValue::string(TSCEFunctionSpec *__strong, int, TSULocale *__strong) const
No locale, falling back to current locale.
NSComparisonResult TSCENumberValue::compare(const TSCENumberValue &) const
Support for non-duration, non-currency unit comparisons is not implemented.
TSCENumberValue TSCENumberValue::percent() const
Should never call percent on a unit value!
virtual TSCEASTElement *TSCEASTInsertRowsInsertedCellsRewriter::colonTractNode(TSCEASTColonTractElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTInsertRowsInsertedCellsRewriter.mm
We expect only one absolute row in a single ended preserveRows tractRef.
We expect only one absolute column in a single ended preserveColumns tractRef.
virtual NSString *TSCEDateValue::string(TSCEFunctionSpec *__strong, int, TSULocale *__strong) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEDateValue.mm
dateFormat.customFormat.defaultFormatData
TSCEValue::TSCEValue(const TSCENumberValue &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEValue.mm
nil TSCENumberValue
TSCEValue::TSCEValue(const TSCEStringValue &)
nil TSCEStringValue
TSCEValue::TSCEValue(const TSCEDateValue &)
nil TSCEDateValue
TSCEValue::TSCEValue(const TSCEGrid &)
nil TSCEGrid
TSCEValue::TSCEValue(const TSCEReferenceValue &)
nil TSCEReferenceValue
TSCEValue::TSCEValue(const TSCEErrorValue &)
nil TSCEErrorValue
TSCEValue::TSCEValue(const TSCEThunkValue &)
nil TSCEThunkValue
TSCEValue::TSCEValue(const TSCEValueGridValue &)
nil TSCEValueGridValue
TSCEArgumentType TSCEValue::nativeType() const
Undefined type. Returning nonsensical value.
TSCEArgumentType TSCEValue::deepType(TSCEEvaluationContext *) const
TSCENumberValue TSCEValue::number(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
NSDate *TSCEValue::date(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
NSString *TSCEValue::string(TSCEFunctionSpec *__strong, int, TSULocale *__strong) const
TSCERichTextStorage TSCEValue::richTextStorage(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
NSString *TSCEValue::rawString(TSCEFunctionSpec *__strong, int, TSULocale *__strong) const
TSCERichTextStorage TSCEValue::rawRichTextStorage(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
BOOL TSCEValue::boolean(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
TSCEGrid TSCEValue::formattedGrid(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
TSCEReferenceValue TSCEValue::reference(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
TSCEError *TSCEValue::error() const
TSCECategoryRef *TSCEValue::categoryRef() const
This TSCEValue was not of type TSCEValueTypeCategoryRef, its type %d
TSCEFormat TSCEValue::format() const
BOOL TSCEValue::isNativelyEqual(const TSCEValue &, TSCEEvaluationContext *) const
NSString *TSCEValue::bakedString(TSULocale *__strong) const
bool TSCEValue::isNil() const
TSCEASTNodeArray *TSCEValue::newCorrespondingAST(TSCEEvaluationContext &, TSCEFunctionSpec *__strong, int, bool) const
TSCEValue TSCEValue::valueBySettingFormat(const TSCEFormat &)
const TSCEASTNodeArray *TSCEValue::unwrapThunk() const
can't call unwrapThunk() on a non-thunk!
<%@: %p>:
-[TSCEAbstractGrid deepType:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEAbstractGrid.mm
TSCEAbstrctGrid subclasses must override
-[TSCEAbstractGrid dimensions]
-[TSCEAbstractGrid valueAtGridCoord:accessContext:]
-[TSCEAbstractGrid valueAtIndex:accessContext:]
-[TSCEAbstractGrid count]
-[TSCEAbstractGrid subGridValueAtGridCoord:width:height:accessContext:]
TSCEAbstractGrid subclasses must override
-[TSCEAbstractGrid newCorrespondingAST:argIndex:bakeReferences:evaluationContext:]
too many arguments to fit in a node!
-[TSCEAbstractGrid value]
-[TSCEAggregateGrid initWithGrids:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEAggregateGrid.mm
failed to allocate memory
-[TSCEAggregateGrid valueAtGridCoord:accessContext:]
2D array access not implemented for class %@
-[TSCEAggregateGrid valueAtIndex:accessContext:]
SFTArgumentAccessor consistency violation
-[TSCEAggregateGrid deepType:]
Shouldn't call deepType on an %@ class
-[TSCEAggregateGrid string:argIndex:locale:]
TSCEAggregateGrid doesn't have a meaningful string() to provide
-[TSCEDenseGrid initWithValueGrid:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEDenseGrid.mm
Warning, making a TSCEDenseGrid with a non-zero based offset: %@
TSCEReferenceValue::TSCEReferenceValue(TSCEEvaluationContext &, const TSCEOwnerUID &, const TSCERangeCoordinate &, const TSUPreserveFlags &, BOOL)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEReferenceValue.mm
Invalid attempt to create a reference value with an invalid tableUID.
TSCEReferenceValue::TSCEReferenceValue(TSCEEvaluationContext &, const TSCEOwnerUID &, const TSCERelativeRangeCoordinate &, const TSUPreserveFlags &)
TSCEReferenceValue::TSCEReferenceValue(TSCEEvaluationContext &, const TSCEOwnerUID &, const TSCERelativeCellCoordinate &, const TSUPreserveFlags &)
%@::%@
-[TSCEReferenceBackedGrid string:argIndex:locale:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEReferenceBackedGrid.mm
TSCEReferenceBackedGrid doesn't have a meaningful string() to provide
-[TSCEReferenceBackedGrid valueAtGridCoord:accessContext:]
evaluationContext
virtual TSCEASTElement *TSCEASTMoveRegionRewriter::colonTractNode(TSCEASTColonTractElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTMoveRegionRewriter.mm
Not expected to need to combine RelativeTractRef rewrites
TSCEUnitlessZero::TSCEUnitlessZero(double)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEUnitlessZero.mm
TSCEUnitlessZero::TSCEUnitlessZero(double, TSCEBaseUnit)
virtual TSCEArgumentType TSCEAbstractValue::nativeType() const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEAbstractValue.mm
Subclasses must override nativeType
virtual TSCEValue TSCEAbstractValue::value() const
subclasses must override
virtual NSString *TSCEAbstractValue::bakedString(TSULocale *__strong) const
Shouldn't get a reference type from deepType
"%@"
these cases shouldn't happen
virtual BOOL TSCEAbstractValue::isNativelyEqual(const TSCEValue &, TSCEEvaluationContext *) const
isNativelyEqual not implemented for type: %d
virtual TSCEReferenceValue TSCEAbstractValue::reference(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
virtual size_t TSCEAbstractValue::hash() const
subclasses must override TSCEAbstractValue::hash()
virtual TSCEASTNodeArray *TSCEAbstractValue::newCorrespondingAST(TSCEEvaluationContext &, TSCEFunctionSpec *__strong, int, bool) const
subclasses must override newCorrespondingAST
TSCEErrorTypeKey
TSCEFunctionNameKey
TSCEExtraInfoStringKey
TSCEExtraInfoNumberKey
kTSCEDateAsTimeIntervalKey
kTSCEOwnerUIDKey
kTSCERangeReferenceKey
kTSCEReferenceArrayKey
kTSCEAnyReferenceKey
kTSCEArgumentIndexKey
kTSCEExpectedTypeKey
kTSCEFoundTypeKey
TSCELowerBoundKey
TSCEUpperBoundKey
TSCELowerBoundInclusiveKey
TSCEUpperBoundInclusiveKey
TSCEValueToMatchKey
TSCEArgumentsAscendingKey
TSCEEqualityPermittedKey
TSCEAfterMatchKey
TSCEOccurrenceKey
TSCEMatchsFoundKey
TSCEPreviousMatchKey
TSCEPreviousValueIsRegexKey
TSCEProblemExpressionStringKey
TSCEProblemModeKey
TSCEProblemNodeIsCellReferenceKey
TSCEAttachmentErrorRaisedInTextCellKey
TSCEInvalidReferenceToMergeKey
TSCEReferenceEndCellInvalidKey
TSCEUnitNameKey
TSCEChooseIndexKey
kTSCEMaxArgsAllowedKey
kTSCEArgsProvideddKey
+[TSCEError errorWithDictionary:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEError.mm
Must have errorTypeKey set to use this API
-[TSCEError displayStringWithCalculationEngine:forTable:andCellID:]
Unknown error.
\U201C%@\U201D isn\U2019t a valid cell reference.
\U201C%@\U201D isn\U2019t a valid function name.
Numbers can\U2019t be divided by zero.
The formula calculates zero to the power of zero, which can\U2019t be computed.
The operator \U201C%@\U201D
The function \U201C%@\U201D
Argument %d of %@
 can\U2019t be %@.
 can\U2019t take %@.
 expects %@
, but cell %@ contains %@.
 but found \U201C%@.\U201D
 but found an empty cell.
This formula can\U2019t reference its own cell, or depend on another formula that references this cell.
Running Total In requires field to be a grouping column.
Argument %d of %@ must refer to a pivot table.
Argument %d of %@ must refer to an aggregate value of the pivot table.
Argument %d of %@ must refer to a grouping column of the pivot table.
invalid number of arguments error exception
spec not found for function %@
one argument
%d arguments
%@ requires at least %@.
%@ requires at least %@, but was given %@.
%@ requires between %d and %d arguments, but was given %@.
%@ requires %@, but was given %@.
%@ requires its arguments to result in a number within the valid range.
The formula contains a number outside the valid range.
The formula contains an invalid reference.
The formula refers to a cell which contains an error.
Cell \U201C%@\U201D contains an error.
Argument %d of %@ is invalid.
The formula contains a page number or page count, which aren\U2019t allowed in formulas.
The formula refers to a cell with a shape or media file. This isn\U2019t supported.
There are no cells in the intersection of the ranges \U201C%@.\U201D
%@ must have a cell or range reference as an argument.
%@ must have a cell reference as an argument.
%@ must have a range reference as an argument.
%@ couldn\U2019t find the value \U201C%@\U201D.
%@ must begin searching from a number within the length of the search text.
Arguments %d and later
Argument %d
Can't be out of bounds without bounds specified
%@ in %@ must be greater than or equal to %g.
%@ in %@ must be greater than %g.
%@ in %@ must be less than or equal to %g.
%@ in %@ must be less than %g.
%@ in %@ must be greater than or equal to %g and less than or equal to %g.
%@ in %@ must be greater than or equal to %g and less than %g.
%@ in %@ must be greater than %g and less than or equal to %g.
%@ in %@ must be greater than %g and less than %g.
Arrays can contain only constant values.
%@ couldn\U2019t find the requested value.
The two ranges in %@ must be the same size.
The formula contains a list where a single argument is expected.
The formula\U2019s arguments can only include one date value.
%@ requires all arguments to be of the same type, either dates, numbers, or durations.
MODE requires that its arguments contain repeated values.
You must specify a value for all the required arguments.
The function doesn\U2019t allow empty arguments.
Argument %d can\U2019t be empty.
The range %@ can\U2019t be used as a single value.
All arguments to %@ must be the same length.
The formula can\U2019t be calculated because the resulting text would be too long.
Lists of references can\U2019t intersect.
%@ requires %@, but none were found.
no bigger than
at least as big as
smaller than
larger than
Argument %d must be %@ argument %d.
Argument %d must be different from argument %d.
The first argument of %@ must be an index of another argument, but there is no argument at index %d.
An empty string can\U2019t be used as an argument of %@.
%@ requires a string specifying a number, but found \U201C%@\U201D instead.
%@ requires a string specifying a date/time value, but found \U201C%@\U201D instead.
%@ requires both arguments to be positive or negative.
Argument %d of %@ must sum to 1.
R1C1-style references aren\U2019t supported.
The date returned by the formula isn\U2019t valid.
The time returned by the formula isn\U2019t valid.
Vector arguments can contain only one row or column.
%@ requires that all arguments be between 0 and 1.
All arguments must be equal to or larger than zero.
Argument %d of %@ can\U2019t be equal to zero.
%@ requires the position argument to be smaller than or equal to the size of the array.
Argument %d of %@ must be equal to 1, 2, or 4.
Argument %d of %@ must be equal to 0 or 1.
Argument %d of %@ must be equal to 1 or 2.
SUBTOTAL requires that its first argument be between 1 and 11 or 101 and 111.
%@ couldn\U2019t reach a result.
%@ couldn\U2019t reach a result. Try adjusting the estimate argument.
%@ requires multiple pairs of cash-flows and dates.
%@ requires dates to be on or after the starting date.
%@ requires at least one positive and one negative argument.
%@ refers to an empty cell.
%@ refers to %@, which is empty.
The operator \U201C-\U201D can\U2019t subtract a date from a number.
Different currency types can\U2019t be compared.
Durations can\U2019t be compared to other data types.
%@ requires that its arguments use the same type of unit.
%@ requires that arguments %@ use the same type of unit.
Argument %d of %@ can\U2019t be a currency or duration.
Arguments %d and later of %@ can\U2019t contain currency or duration values.
Argument %d of %@ can\U2019t be a currency.
Arguments %d and later of %@ can\U2019t be currency values.
Argument %d of %@ can\U2019t be a duration.
The function \U201C%@\U201D expects %@ but found a duration.
%@ requires that all monetary values use the same currency.
Values being summed by %@ must be either all durations or all numbers, unless one value is a date.
Argument %d of %@ requires at least %@ values.
%@ requires an odd number of arguments, at least three.
%@ requires an even number of arguments.
%@ requires that all range arguments are the same size.
Arrays can\U2019t be empty.
\U2018%@\U2019 isn\U2019t a valid character in the base %d numeral system.
\U201C%@\U201D isn\U2019t a valid unit.
%@ requires that all its arguments have the same type of unit (for example, time or temperature).
Prefixes require metric units. The unit \U201C%@\U201D isn\U2019t metric.
The number to convert has units that conflict with the units to convert from.
The index position in the array must contain data.
The x and y arrays must have the same length and width.
The x and y arrays must have the same length.
The x and y arrays must have the same width.
RECEIVED must evaluate to a value greater than zero.
MATCH requires the third argument to be equal to 1, 0, or -1.
Formulas can\U2019t be longer than 8,192 characters.
RANDBETWEEN requires that both durations have the same maximum unit.
%@ requires all values in argument %d to be numbers.
The first argument of CHAR must represent a valid character, generally between 32 and 65535.
When using duration values with NORMDIST, the cumulative argument must be TRUE.
An x variable is too highly correlated with one or more other x variables for LINEST to calculate a result.
You can\U2019t compare %@ with %@ because their data types are different.
%@ can\U2019t be given multiple durations.
LINEST requires more data points to calculate a result.
%@ requires all numbers in argument %d to be positive.
PERCENTRANK requires that argument 2 be within the range specified in argument 1.
PERCENTRANK.EXC requires that argument 2 be within the range specified in argument 1.
Location services are not enabled on the device.
Bearing information can\U2019t be determined right now.
Location service is unable to obtain a location value right now.
Access to the location service was denied by the user.
The network was unavailable or a network error occurred.
Bearing information can\U2019t be determined due to strong interference from nearby magnetic fields.
The latitude and longitude values are invalid
The altitude value is invalid
The bearing value is invalid
The formula contains an unsupported function
%@ requires at least one TRUE condition, but none were found.
The requested STOCK attribute is invalid.
The requested CURRENCY attribute is invalid.
The requested STOCKH attribute is invalid.
The requested CURRENCYH attribute is invalid.
The requested historical date is invalid or is in the future.
There is no historical data on the requested date. The next available is on %@.
There is no historical data in the entire year of the requested date. Historical data may not be available for all securities.
No information about the specified currency pair.
Unable to retrieve information from the remote data server.
Data for the \U2018%@\U2019 attribute isn\U2019t available for the selected symbol.
\U2026
Ask Price
Ask Price data is not available.
Bid Price
Bid Price data is not available.
Ask Size
Ask Size data is not available.
Bid Size
Bid Size data is not available.
The formula refers to a cell without a formula.
The requested REFERENCE.NAME attribute is invalid.
No specified error, type %d %{public}@ dictionary: %{public}@
#NAME!
#DIV/0!
#VALUE!
#CIRC!
#ARGS!
#NUM!
#SYN!
-[TSCEError rangeRef]
Wrong type stored for kTSCERangeReferenceKey in errorDictionary: %@
+[TSCEError typeErrorForValue:functionSpec:argumentIndex:locale:]
No functionName available from functionSpec: %{public}@
-[TSCEError isNativelyEqual:]
void TSCECellRecordTile::updateIndexesForCellRecord(const TSCECellRecord &, TSCECellDependencies *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECellRecordTile.mm
cellDependencies
BOOL TSCECellRecordTile::replaceCellRecord(TSCECellRecord &, TSCECellDependencies *)
cellRecord can't handle multiple self references
BOOL TSCECellRecordTile::replaceCellRecord(TSCECellRecord &, TSCECellDependencies *)_block_invoke
edge pointing to nonexistant table found: %lu
v28@?0S8r^v12^B20
BOOL TSCECellRecordTile::deleteCellRecord(TSCECellRecord *, TSCECellDependencies *)
invalid cell record delete attempt
failed to realloc cell record storage
void TSCECellRecordTile::sortCellRecords()
no duplicate cell records permitted
std::vector<TSCECellRecord *> TSCECellRecordTile::sortedCellRecordVector() const
void TSCECellRecordTile::appendExpandedEdgeToArchive(TSCE::ExpandedEdgesArchive *, const TSCEInternalCellReference &) const
_wrapper
v24@?0^{TSCECellRecord=^{TSCECellRecordEdgeLists}Q{TSCEPackedEdge=[8c]}ISS}8^B16
-[TSCECellRecordTileWrapper unpackAfterUnarchiveForCellDependencies:]
[%lu,%lu]
(%lu x %lu)
virtual TSCEASTNodeArray *TSCENilValue::newCorrespondingAST(TSCEEvaluationContext &, TSCEFunctionSpec *__strong, int, bool) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCENilValue.mm
nil values are unexpected on the evaluation stack
-[NSDate(TSCEAdditions) tsce_weekNumberForType:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECalculationUtilities.mm
Incorrect month number in function WEEKNUM
Incorrect type number in function WEEKNUM.
BOOL TSCEValueHasError(TSCEValue, int, TSCEEvaluationContext *)
actual values shouldn't have TSCEAnyArgumentType
actual values shouldn't have TSCEDurationArgumentType
actual values shouldn't have TSCENoCoerceScalarArgumentType
NSComparisonResult TSCECaseInsensitiveCompareValues(const TSCEValue &, const TSCEValue &, TSCEEvaluationContext &)
TSCEInvalidComparisonError should not be raised when both numbers are durations
TSCEInvalidComparisonError should not be raised when both numbers are currencies
Dimension here should be duration, TSCEInvalidComparisonError should not be raised if it's a currency
TSCEInvalidComparisonError should not be raised when both numbers have no units
We should never reach here unless you pass in nodes with unsupported types, leftType: %d rightType: %d
+[(){}^$|\./
.{1}
NSString *TSCEConvertWildcardStringToICURegex(NSString *__strong)
We don't want to quote a character that doesn't need to be quoted.
BOOL TSCEValueSufficesForArgumentType(const TSCEValue &, TSCEArgumentType, TSCEArgumentType, TSCEArgumentType, TSCEEvaluationContext *)
empty arguments should never be required
TSCEValue TSCEMultifactorial(TSCEFunctionSpec *__strong, TSCEValue, TSCENumberValue, TSCENumberValue, TSCEEvaluationContext *)
Multifactorial shouldn't have i less than zero.  Please file a bug.
TSCEValue TSCEEvaluateAverageIgnoringError(TSCECalculationEngine *__strong, TSUCellCoord, const TSCEOwnerUID &, TSCERangeCoordinate, const TSCEOwnerUID &)
Unregistered tableUID found when calculating average
NSDictionary<NSString *,NSMutableIndexSet *> *TSCEEvaluateUniqueIgnoringError(TSCECalculationEngine *__strong, TSUCellCoord, const TSCEOwnerUID &, TSCERangeCoordinate, const TSCEOwnerUID &)
Unregistered tableUID found when calculating unique
TSCEValue TSCEEvaluateLargeOrSmallIgnoringError(TSCECalculationEngine *__strong, TSUCellCoord, const TSCEOwnerUID &, TSCERangeCoordinate, const TSCEOwnerUID &, BOOL, double, BOOL)
Unregistered tableUID found when calculating large/small
TSCEValue TSCEEvaluateCountIgnoringError(TSCECalculationEngine *__strong, TSUCellCoord, const TSCEOwnerUID &, TSCERangeCoordinate, const TSCEOwnerUID &)
Unregistered tableUID found when calculating count
TSCEValue TSCEEvaluationStack::valueForArgumentAtIndexSingletonMode(int, TSCEFunctionSpec *__strong, TSCEEvaluationContext &, TSCEFunctionArgSpec *, TSCEArgumentType, int)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEEvaluationStack.mm
unsupported computed reference type found. See TSCECalcEngine::referenceWasGuaranteedCleanAtRecalcCycleStart
TSCEValue TSCEEvaluationStack::valueForArgumentAtIndexSwitch(int, TSCEFunctionSpec *__strong, TSCEEvaluationContext &, TSCEFunctionArgSpec *, TSCEArgumentType, TSCEArgumentAccessorMode, int)
Invalid accessorMode (%d)
TSCEValue TSCEEvaluationStack::valueForArgumentAtIndex(int, TSCEFunctionSpec *__strong, TSCEEvaluationContext &)
Have to set argument count before you call valueForArgumentAtIndex()
void TSCEEvaluationStack::replaceArgumentAtIndex(int, TSCEValue)
cannot replace an invalid index
TSCEValue TSCEFunction_DOLLAR::evaluateWithContext(TSCEEvaluationContext &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCETextFunctions.mm
Failed to create DOLLAR formatter.
v56@?0@"NSString"8{_NSRange=QQ}16{_NSRange=QQ}32^B48
-[TSCEOwnerUidMapper p_recreateUIDs]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEOwnerUidMapper.mm
Check for non subOwner formula UIDs
-[TSCEOwnerUidMapper setToUpgradeMapping]
void TSCEASTNodeArray::resizeCapacity(size_t)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTNodeArray.mm
No nodeArray allocated.
You are going to crash very soon. You have overwritten your node array: %{public}@
resize didn't grow array enough
v32@?0{TSKUIDStruct=QQ}8^B24
empty nodeArray
uint8_t _nodeArray[%d] = {
%d, 
void TSCEASTNodeArrayReader::setOffset(size_t)
Can't set offset above capacity: %lu / %lu
Can't set offset more than one past bytes used, offset: %lu formula: %{public}@
void TSCEASTNodeArrayReader::pushEndPoint(size_t)
We shouldn't be making the array seem larger when pushing a new end-point
void TSCEASTNodeArrayReader::skipIndexSet()
skipIndexSet going off rails, numRanges: %lu for formula: %{public}@
void TSCEASTNodeArray::writeBytes(const uint8_t *, size_t)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTNodeArray.h
_nodeArray
void TSCEASTNodeArray::write(const T &) [T = TSKUIDStruct]
void TSCEASTNodeArray::write(const T &) [T = int]
void TSCEASTNodeArray::write(const T &) [T = unsigned long]
TSCEValue TSCEFunction_MULTINOMIAL::evaluateWithContext(TSCEEvaluationContext &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEMathTrigFunctions.mm
MULTINOMIAL accepts nonnegative arguments only.
map::at:  key not found
virtual size_t TSCEASTElement::size(TSCEASTIteratorBase *) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTElements.mm
Need to override size() method for derived element types.
TSCEASTAdditionNode
TSCEASTSubtractionNode
TSCEASTMultiplicationNode
TSCEASTDivisionNode
TSCEASTPowerNode
TSCEASTConcatenationNode
TSCEASTGreaterThanNode
TSCEASTGreaterThanOrEqualToNode
TSCEASTLessThanNode
TSCEASTLessThanOrEqualToNode
TSCEASTEqualToNode
TSCEASTNotEqualToNode
TSCEASTNegationNode
TSCEASTPlusSignNode
TSCEASTPercentNode
TSCEASTFunctionNode
TSCEASTFunctionLongNode
TSCEASTNumberNode
TSCEASTBooleanNode
TSCEASTStringNode
TSCEASTDateNode
TSCEASTDurationNode
TSCEASTEmptyArgumentNode
TSCEASTTokenNode
TSCEASTArrayNode
TSCEASTListNode
TSCEASTThunkNode
TSCEASTColonNode
TSCEASTReferenceErrorNode
TSCEASTUnknownFunctionNode
TSCEASTPrependWhitespaceNode
TSCEASTAppendWhitespaceNode
TSCEASTFunctionNodeWithWhitespace
TSCEASTCellReferenceNode
TSCEASTColonWithUidsNode
TSCEASTLinkedCellRefNode
TSCEASTLinkedColumnRefNode
TSCEASTLinkedRowRefNode
TSCEASTUidReferenceNode
TSCEASTLetBindNode
TSCEASTLetVarNode
TSCEASTLetEndScopeNode
TSCEASTCategoryRefNode
TSCEASTColonTractNode
TSCEASTViewTractRefNode
static NSString *TSCEASTElement::stringForTag(TSCEASTNodeTag)
%d is not a valid node tag
Tag: %@ @offset: %lu size=%lu
TSCEASTElement *TSCEASTElementWithChildren::setChildAtIndex(TSCEASTElement *, uint32_t, TSCEASTRewriter *)
Must set children in order
TSCEASTElement *TSCEASTElementWithUidTractsWithChildren::setChildAtIndex(TSCEASTElement *, uint32_t, TSCEASTRewriter *)
void TSCEASTElementWithUidTracts::setRefFlags(TSCEASTRefFlags, TSCEASTIteratorBase *)
Don't call setRefFlags() on this type until it supports them
TSCERangeRef TSCEASTColonElement::rangeReference(TSCEASTIteratorBase *, TSUPreserveFlags &, const TSUCellCoord &)
A calculationEngine needs to be set on this rewriter to use TSCEASTColonElement::rangeReference() method.
virtual size_t TSCEASTFunctionElement::size(TSCEASTIteratorBase *) const
Unknown tag for TSCEASTFunctionElement: %d
void TSCEASTFunctionElement::setNumArgs(uint32_t, TSCEASTIteratorBase *)
Unhandled function tag: %d
static size_t TSCEASTWhitespaceElement::appendWhitespaceElement(TSCEASTNodeArray *, TSCEASTNodeTag, NSString *__strong)
Not a whitespace tag
static TSCECellTractRef *TSCEASTRelativeCoordRefElement::tractRefUsingUuids(TSCEASTIteratorBase *, const TSCEOwnerUID &, const TSKUIDStructVector &, const TSKUIDStructVector &, TSCEMutableUIDSet *__autoreleasing &, TSCEMutableUIDSet *__autoreleasing &, BOOL)
How can we be spanning in both rows and columns.
static bool TSCEASTRelativeCoordRefElement::expandTractRefUsingUuids(TSCEASTIteratorBase *, const TSCEOwnerUID &, TSCECellTractRef *__strong, const TSKUIDStructVector &, TSKUIDStructVector &, BOOL)
Don't use this method for non-existing ranges, use tractRefUsingUuids() instead.
static bool TSCEASTRelativeCoordRefElement::expandRangeCoordinateUsingUuids(TSCEASTIteratorBase *, const TSCEOwnerUID &, TSCERangeCoordinate &, const TSKUIDStructVector &, TSKUIDStructVector &, BOOL)
Don't use this method for non-existing ranges, use rangeCoordinateUsingUuids() instead.
void TSCEASTRelativeCoordRefElement::setTableUID(const TSCEOwnerUID &, TSCEASTIteratorBase *)
Cannot use setTableUID on a tag that isn't already cross-table
void TSCEASTRelativeCoordRefElement::setRelativeCoord(const TSCERelativeCellCoordinate &, TSCEASTIteratorBase *)
Can't setRelativeCoord on type: %d
Can't use setRelativeCoord to switch from spanning (%d,%d) to not spanning (%d,%d)
TSCECrossTableReference TSCEASTRelativeCoordRefElement::crossTableRef(TSCEASTIteratorBase *) const
Incorrect tag for use with crossTableRef: %d
virtual TSCECellRef TSCEASTRelativeCoordRefElement::absoluteCellRef(TSCEASTIteratorBase *, const TSUCellCoord &) const
Invalid tag: %d
void TSCEASTUidReferenceElement::setTableUID(const TSCEOwnerUID &, TSCEASTIteratorBase *)
void TSCEASTViewTractRefElement::setTableUID(const TSCEOwnerUID &, TSCEASTIteratorBase *)
void TSCEASTIteratorBase::willModify()
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTIteratorBase.h
Attempting to modify an iterator marked as readOnly.
static void TSCERelativeCellCoordinate::assertColumnInMaxRange(TSURelativeColumnIndex)
TSCERelativeCellCoordinate: column outside valid range: %d
static void TSCERelativeCellCoordinate::assertRowInMaxRange(TSURelativeRowIndex)
TSCERelativeCellCoordinate row outside valid range: %d
void TSCEASTNodeArray::write(const T &) [T = TSCEBaseUnit]
void TSCEASTNodeArray::write(const T &) [T = unsigned char]
void TSCEASTNodeArray::write(const T &) [T = TSUDurationStyle]
void TSCEASTNodeArray::write(const T &) [T = bool]
void TSCEASTNodeArray::write(const T &) [T = short]
TSCEValue TSCEFunction_DAYNAME::evaluateWithContext(TSCEEvaluationContext &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEDateTimeFunctions.mm
weekday symbols: %@
TSCEValue TSCEFunction_DUR2DAYS::evaluateWithContext(TSCEEvaluationContext &)
Shouldn't get a non-duration in DUR2DAYS
TSCEValue TSCEFunction_DUR2WEEKS::evaluateWithContext(TSCEEvaluationContext &)
Shouldn't get a non-duration in DUR2WEEKS
TSCEValue TSCEFunction_DUR2HOURS::evaluateWithContext(TSCEEvaluationContext &)
Shouldn't get a non-duration in DUR2HOURS
TSCEValue TSCEFunction_DUR2MILLISECONDS::evaluateWithContext(TSCEEvaluationContext &)
Shouldn't get a non-duration in DUR2MILLISECONDS
TSCEValue TSCEFunction_DUR2MINUTES::evaluateWithContext(TSCEEvaluationContext &)
Shouldn't get a non-duration in DUR2MINUTES
TSCEValue TSCEFunction_DUR2SECONDS::evaluateWithContext(TSCEEvaluationContext &)
Shouldn't get a non-duration in DUR2SECONDS
static NSDate *TSCEFunction_WORKDAY::dateByAddingNumberOfDaysExcludingWeekends(NSDate *__strong, int, NSDateComponents *__strong)
Incorrect weekday number in function WORKDAY
virtual TSCEASTElement *TSCEASTConvertToUidRefsRewriter::anyReferenceNode(TSCEASTRelativeCoordRefElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTConvertToUidRefsRewriter.mm
Unhandled reference type
virtual TSCEASTElement *TSCEASTConvertToUidRefsRewriter::colonNode(TSCEASTColonElement *)
virtual TSCEASTElement *TSCEASTConvertToUidRefsRewriter::colonTractNode(TSCEASTColonTractElement *)
static NSDate *TSCEFinancialFunctions::prevCoupDateWithSettlement(NSDate *__strong, NSDate *__strong, int)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFinancialFunctions.mm
Setlement date should not be larger than maturity date
static NSDate *TSCEFinancialFunctions::nextCoupDateWithSettlement(NSDate *__strong, NSDate *__strong, int)
TSCEValue TSCEFunction_ACCRINT::evaluateWithContext(TSCEEvaluationContext &)
ACCRINT: should not reach here if numCoponsLeft is not 1
TSCEASTElement *TSCEASTRewriter::loadAsTree()
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTRewriter.mm
An incomplete node needs one argument - the root of the thunk expression
Not enough arguments for let node
%d is not a valid node tag, seen at offset: %lu, seen in %{public}@
TSCEASTRewriter<%p>:
no tree (root is NULL)
virtual void TSCEASTRewriter::rewrite()
_symbolTable
TSCEValue TSCEFunction_AVERAGEA::evaluateWithContext(TSCEEvaluationContext &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEStatisticalFunctions.mm
Have to set the type of vector appropriately.
TSCEValue TSCEFunction_CRITBINOM::evaluateWithContext(TSCEEvaluationContext &)
CRITBINOM binary search has a bug.
TSCEValue TSCEFunction_FORECAST::evaluateWithContext(TSCEEvaluationContext &)
Should have at least one x if we're going to successfullly compute FORECAST
TSCEValue TSCEFunction_FREQUENCY::evaluateWithContext(TSCEEvaluationContext &)
static TSCEValue TSCEFunction_GEOMEAN::geometricMeanOfVector(TSCEGrid *, TSCEFunctionSpec *__strong, int, NSArray *__strong, TSCEEvaluationContext *)
static TSCEValue TSCEFunction_HARMEAN::harmonicMeanOfVector(TSCEGrid *, TSCEFunctionSpec *__strong, int, NSArray *__strong, TSCEEvaluationContext *)
static TSCEValue TSCEFunction_LARGE::evaluateWithContext(TSCEEvaluationContext *, TSCEFunctionSpec *__strong, BOOL, BOOL, BOOL)
Out of memory
static TSCEValue TSCEFunction_MAX::extremum(TSCEEvaluationContext *, TSCEFunctionSpec *__strong, int, BOOL, BOOL)
TSCEValue TSCEFunction_MEDIAN::evaluateVector(TSCEFunctionSpec *__strong, TSCEGrid *, TSCEEvaluationContext *)
TSCEValue TSCEFunction_MODE::evaluateVector(TSCEFunctionSpec *__strong, TSCEGrid *, TSCEEvaluationContext *, const TSCEFormat &)
In function MODE, should not reach here.
TSCEValue TSCEFunction_MODE_MULT::evaluateWithContext(TSCEEvaluationContext &)
1, 2, and 3
2 and 3
static TSCEValue TSCEFunction_PERCENTILE::computeWithVector(const TSCEGrid &, const TSUDecimal &, bool, bool, TSCEFunctionSpec *__strong, TSCEEvaluationContext *)
1, 3, and 4
1 and 3
TSCEGrid TSCEFunction_TTEST::subtractVectors(TSCEGrid &, TSCEGrid &, TSCEEvaluationContext &)
Vectors have different number of data points
Vectors have mismatched dimensions.
TSCEValue TSCEFunction_TTEST::evaluateWithContext(TSCEEvaluationContext &)
We probably have a date returned as the variance of these inputs. We should have raised an error earlier in the subtraction code.
Undefined t-test type passed to TTEST. Please file a bug.
1 and 2
-[TSCELogicalTest initWithCriterion:functionSpec:evaluationContext:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCELogicalTest.mm
type not handled: %d
<%@: %p>: operation: %d value: %@ string: %@ date: %@ -> cost: %lu
%@%i%@
TSCEValue TSCEFunction_INTERSECT_RANGES::evaluateWithContext(TSCEEvaluationContext &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCELookupReferenceFunctions.mm
Should have detected bad reference during loop
Bad reference should have been detected earlier
TSCEValue TSCEFunction_LOOKUP::evaluateWithContext(TSCEEvaluationContext &)
In function LOOKUP, Should not reach here, user result table should be 1-D.
static NSComparisonResult TSCEFunction_MATCH::compareValue(TSCEValue &, TSCEValue &, TSCEEvaluationContext &)
In function MATCH, should not reach here.
v24@?0{TSUCellCoord=ISBB}8^B16
void TSCEFunction_UNION_RANGES::determineShapeOfCellList(std::vector<TSCECellRef>, bool, bool &, bool &, bool &, NSUInteger &)
can't have invalid cell references here
0 first row width should be impossible.
TSCEValue TSCEFunction_UNION_RANGES::evaluateWithContext(TSCEEvaluationContext &)
indices inside a range reference should be references.
each index inside a range reference should be just one cell.
contiguous should imply rectangular
rectangular references should have rowWidth rows
Tag: %@ @offset: %lu size=%lu { %@}
(%@ %@ %@)
(%@)
(%@%@)
%@,%@
%@(%@)
NSString *TSCEASTDescriptionIterator::prettyDescription()
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTDescriptionIterator.mm
Should only have one argument on _argStack at this point, the final result. ArgStack: %@
virtual TSCEASTElement *TSCEASTDescriptionIterator::binaryInfixOperatorNode(TSCEASTBinaryElement *)
op- 
op+ 
virtual TSCEASTElement *TSCEASTDescriptionIterator::unaryOperatorNode(TSCEASTUnaryElement *, BOOL)
((%@)%%)
%@{%i args, ws:'%@'} 
%@{%i args} 
unknownFunction: %@{%i args} 
[: %@]
%@:%@
Unexpected refType: %@
v24@?0r^{TSCEAnyRef=S{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}C}{TSKUIDStruct=QQ}B@}8^B16
%@::%@:%@
[%@]
<error in colonTractNode() - got nil>
virtual TSCEASTElement *TSCEASTDescriptionIterator::colonTractNode(TSCEASTColonTractElement *)
Why would this happen?
%@{%@}
<#REF! VTR>
ViewTractRef(%@ Preserve:%u) 
"%@" 
unit;%lf
unit; %lf
<empty>
<empty> 
<token>
token 
array; cols:%d rows:%d 
%@; %@
{%@ %@}
<list, len:%d>
list; length:%d 
thunk[
let %@ = %@ in
<%@>
(var %u)
virtual TSCEASTElement *TSCEASTDescriptionIterator::anyReferenceNode(TSCEASTRelativeCoordRefElement *)
We shouldn't actually reach here - the tag indicates this reference is valid or spanning
%@%@%@%@
[%@%@]
[%@%@, %@%@]
%@ %@
append ws: '%@'
prepend ws: '%@'
#REF! 
#REF(%@%@, %@:: %@)! 
#REF(%@%@, %@)! 
linkedCellRef(%@) 
linkedColumnRef(%@) 
linkedRowRef(%@) 
UidRef(%@ Preserve:%u) 
%@::%@ 
v24@?0r^{TSUCellRect={TSUCellCoord=ISBB}{?=II}}8^B16
<%@>:
  %@ = %@
  %@ = null
-[TSCEFormulasForUndo splitIntoChunksForExcessiveSize]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormulasForUndo.mm
Can't split FormulasForOwner that uses formulaStrings (TSTCommandRewriteFormulasForTranspose)
v24@?0@"TSCEFormulaObject"8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16
  ownerKind %d = %@
__CHART
op_Colon
LATITUDE
LONGITUDE
BEARING
ALTITUDE
CONFIDENCE.T
COVARIANCE.S
MODE.MULT
PERCENTILE.EXC
PERCENTRANK.EXC
QUARTILE.EXC
RANK.AVG
FIND.CASEINSENSITIVE
__INTERACTIONTYPE
__CELLVALUETYPE
+[TSCEFunctionSpec(TSCEAutogeneratedSpecList) functionSpecList]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFunctionSpecDictionary.mm
Couldn't create functionSpecList of %@
^%@$
v32@?0@"NSTextCheckingResult"8Q16^B24
void TSCEEvaluateViewTractRefWithContext(TSCEViewTractRef *__strong, TSCEEvaluationContext &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTNodeArrayUtilities.mm
TSCEValue TSCEEvaluateASTNodeArrayWithContext(const TSCEASTNodeArray *, TSCEEvaluationContext &)
Not expecting to see UID references during evaluation.
%d is not a valid node tag, seen in: %{public}@
TSCEEvaluateASTNodeArrayWithContext ended up with an empty evaluation stack for %@
void TSCEASTNodeArrayEncodeToArchiveProcessFirstNode(TSCE::ASTNodeArrayArchive *, TSPArchiver *__strong, TSCEASTElement *, TSCEASTElementIterator *, std::vector<TSCENodeArrayEncodingState> &, TSCEASTNodeArrayArchiveOptionsEnum)
verifySpanningSettings failed while archiving, with options: %d
TSCEASTFeatureNodesSeen TSCEASTNodeArrayEncodeToArchiveWithOptions(TSCE::ASTNodeArrayArchive *, TSCEASTNodeArray *, TSPArchiver *__strong, TSCEASTNodeArrayArchiveOptionsEnum)
TSCEASTNodeArray *TSCEFormulaUnarchivingContext::createNodeArrayFromArchive(const TSCE::ASTNodeArrayArchive &)
unarchived invalid spanning settings
can't end an embedded node array with no previous begin
can't unarchive a let node with insufficient embedded node arrays
-[TSCEGetPivotDataBundle enumerateDataKeyValuePairsUsingBlock:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEGetPivotDataBundle.mm
Size mismatch in data/value pairs
TSCEValue TSCEFunction___CHART::evaluateWithContext(TSCEEvaluationContext &)_block_invoke_2
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEChartFunctions.mm
apparentTractRefForTractRef let us exceeed tableSize?? (%d,%d)
virtual TSCEASTElement *TSCEASTRowColumnUidMapRewriter::anyReferenceNode(TSCEASTRelativeCoordRefElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTRowColumnUidMapRewriter.mm
Expected to be called on uid-form formulas only.
TSCESymbol TSCESymbolTable::addSymbol(__strong TSCEIdentifier)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCESymbolTable.mm
can't add a symbol if not in any scope
<TSCESymbolTable %p>: 
%@: %u
void TSCESymbolTable::endScope()
Calling endScope() without beginScope()
%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X
TSCEOwnerUID TSCESubFormulaOwnerID::formulaOwnerUIDForBaseUIDAndSubownerIndex(const TSCEOwnerUID &, TSCESubFormulaOwnerIndex)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCETypes.mm
OwnerIndex %d doesn't correspond to a subFormulaOwner
TSUCellCoord TSCEMakeAbsoluteCellCoordinateFromRelativeCellCoordinate(TSUCellCoord, TSCERelativeCellCoordinate, const TSUPreserveFlags &)
Wrong sticky setting
tableUID: %@
%@ %@ couldBeIntersection: %@
(include headers)
%@::(%@%d,_)
%@::(_,%@%d)
%@::(%@%d,%@%d)
aggType=%d
showAsType=%d
-[TSCERelativeTractRef addRelativeColumn:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERelativeTractRef.mm
Cannot mix spanning and non-spanning column
-[TSCERelativeTractRef addRelativeRow:]
Cannot mix spanning and non-spanning row
-[TSCERelativeTractRef verifySpanningSettings]
Wrong count
Wrong index present
Invalid seen in non-spanning
No column found, but not marked as spanning
No row found, but not marked as spanning
Should match existing asserts
-[TSCERelativeTractRef relativeTopLeft]
-[TSCERelativeTractRef relativeBottomRight]
Non-spanning ref has %d relative columns
No columns found, but not marked as spanning
Non-spanning ref has %d absolute columns
Non-spanning ref has %d relative rows
No rows found, but not marked as spanning
Non-spanning ref has %d absolute rows
, %@
%@<%p>: %@
const TSCEValue TSCEValueBindingEnvironment::lookup(const TSCESymbol &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEValueBindingEnvironment.mm
unbound symbol found: %u
void TSCEValueBindingEnvironment::endScope()
_undoSymbols is empty at endScope() - beginScope() never called?
%u -> %@
-[TSCEFormulaOwnerWrapper initWithFormulaOwnerUID:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormulaTranslationFlags.mm
Requires a valid ownerUID
NSString *localizedModeName(TSCEStockAttribute, TSCEFunctionSpec *__strong)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERemoteDataFunctions.mm
Unexpected function %@!
%@%@=X
TSCEValue evaluateCurrencyFunction(TSCEEvaluationContext &, TSCEFunctionSpec *__strong)
Failed to transform date %@ for CURRENCYH function!
TSCEValue evaluateStockFunction(TSCEEvaluationContext &, TSCEFunctionSpec *__strong)
Failed to transform date %@ for STOCKH function!
TSCECellTractRefCore::TSCECellTractRefCore(const TSUCellCoord &, const TSUCellCoord &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECellTractRefCore.mm
Both coords must be spanning in the same direction %{public}@ vs %{public}@
TSCECellTractRefCore::TSCECellTractRefCore(const TSUCellCoord &, const TSUCellCoord &, const TSKUIDStruct &)
uint32_t TSCECellTractRefCore::numColumns() const
Don't ask for numColumns when we spansAllColumns
uint32_t TSCECellTractRefCore::numRows() const
Don't ask for numRows when we spanAllRows
void TSCECellTractRefCore::addColumn(TSUColumnIndex)
void TSCECellTractRefCore::addRow(TSURowIndex)
void TSCECellTractRefCore::addColumnRange(const TSUIndexRange &)
addColumnRange: should only be used with absolute indexes: %@
void TSCECellTractRefCore::addRowRange(const TSUIndexRange &)
addRowRange: should only be used with absolute indexes: %@
TSUCellCoord TSCECellTractRefCore::coordAtColumnOffset(TSUColumnOrRowIndex, TSUColumnOrRowIndex) const
Not really expecting spanning CellTractRef to be used here
v24@?0^{TSCEASTNodeArray=*QQB}8^{TSCEASTNodeArgInfo=i[3i]{TSKUIDStruct=QQ}{TSUCellCoord=ISBB}}16
v16@?0^{TSCEASTNodeArray=*QQB}8
TSCEFormulaCreator::TSCEFormulaCreator(std::nullptr_t)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormulaCreator.mm
Passing NULL as an arg to TSCEFormulaCreator() - it doesn't like that
TSCEErrorValue::TSCEErrorValue(TSCEError *__strong)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEErrorValue.mm
1)Creating a TSCEErrorValue with a nil TSCEError
TSCEErrorValue::TSCEErrorValue(const TSCEErrorValue &)
2)Creating a TSCEErrorValue with a nil TSCEError
virtual TSCEReferenceValue TSCEErrorValue::reference(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
TSCEASTElement *TSCEASTTransposeRewriter::shouldTransformSpanningColumnToBodyRangeReference(TSCEASTElement *, const TSCEOwnerUID &, TSUColumnIndex, BOOL, TSUCellCoord)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTTransposeRewriter.mm
Table's bodyRange wasn't valid
TSCECellTractRef *TSCEASTTransposeRewriter::transformSpanningColumnToBodyRangeReference(TSCEASTElement *, TSCECellTractRef *__strong, TSUCellCoord)
absTractRef
Couldn't locate a table with uid: %@ in calcEngine %p
Table %@ bodyRange wasn't valid
TSCEASTElement *TSCEASTElementIterator::nextElement()
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTElementIterator.mm
virtual void TSCEASTElementIterator::rewrite()
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTElementIterator.h
No rewrite method implemented for this class - use nextElement() API, or derive from a different AST iterator base class
static TSCENumberFormat TSCENumberFormat::defaultNumberFormatForCurrency(TSULocale *__strong)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormat.mm
TSCEBaseFormat::TSCEBaseFormat(TSKBaseFormat *__strong)
TSCEBaseFormat has no defaults for nil TSKBaseFormat
TSCEFormat::TSCEFormat(const TSUFormatType)
This TSCEFormat constructor not supported for this type: %d
static TSCEFormat TSCEFormat::createDefaultCurrencyUsingLocale(TSULocale *__strong)
For currency, use the constructor that passes in a locale, and use the document locale.
void TSCEFormat::setFormatType(TSUFormatType)
setFormatType() not allowed in general, type change attempted: %d -> %d
TSCEFormat::TSCEFormat(const TSUFormatType, const TSCENumberFormat &)
Creating a non-number formatType but initializing the numberFormat iVar.
bool TSCEFormat::isEqualNotCountingExplicitness(const TSCEFormat &) const
Trying to compare unexpected type %d.
TSCENumberFormat TSCEFormat::numberFormat() const
Format is not of this type.  Can't return this.
TSCEFractionFormat TSCEFormat::fractionFormat() const
TSCEBaseFormat TSCEFormat::baseFormat() const
TSCEDurationFormat TSCEFormat::durationFormat() const
TSKDateTimeFormat *TSCEFormat::dateTimeFormat() const
TSKCustomFormatWrapper *TSCEFormat::customFormat() const
TSKBooleanFormat *TSCEFormat::booleanFormat() const
TSCECellRefSet TSCEInternalCellRefSet::asCellRefSet(TSCEDependencyTracker *) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEInternalCellRefSet.mm
Need a dependency tracker to do this conversion
v32@?0r^S8r^v16^B24
TSCEValue TSCEFunctionArgSpec::valueForModeIndex(short) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFunctionArgSpec.mm
Requesting value for non-mode argument.
Requesting value for out of bounds index.
%C%@_ARGUMENT_%d%C
%C%@_ARGUMENT_%d_MODE_%d%C
or omitted
%@ (%@)
virtual NSDate *TSCECategoryRefValue::date(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECategoryRefValue.mm
Error: couldn't resolve TSCECategoryRefValue
virtual NSString *TSCECategoryRefValue::rawString(TSCEFunctionSpec *__strong, int, TSULocale *__strong) const
unsupported
virtual BOOL TSCECategoryRefValue::boolean(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
virtual TSCERichTextStorage TSCECategoryRefValue::richTextStorage(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
virtual TSCERichTextStorage TSCECategoryRefValue::rawRichTextStorage(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
virtual TSCEGrid TSCECategoryRefValue::formattedGrid(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
virtual TSCENumberValue TSCECategoryRefValue::number() const
virtual NSDate *TSCECategoryRefValue::date() const
v24@?0q8^B16
virtual TSCEASTElement *TSCEASTNodeFormulaStringIterator::binaryInfixOperatorNode(TSCEASTBinaryElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTNodeFormulaStringIterator.mm
virtual TSCEASTElement *TSCEASTNodeFormulaStringIterator::unaryOperatorNode(TSCEASTUnaryElement *, BOOL)
virtual TSCEASTElement *TSCEASTNodeFormulaStringIterator::colonNode(TSCEASTColonElement *)
improper number of arguments for colon node.
%@%@%@%@%@%@
%@%@%@%@%@
%.17G
DATE(%li,%li,%li)
(DATE(%li,%li,%li)+TIMEVALUE(TIME(%li,%li,%li)))
DURATION(%@,%@,%@,%@,%@,%@)
%C%C
virtual TSCEASTElement *TSCEASTNodeFormulaStringIterator::uidReferenceNode(TSCEASTUidReferenceElement *)
Shouldn't see uid-form references when making Sage formula strings.
virtual TSCEASTElement *TSCEASTNodeFormulaStringIterator::viewTractRefNode(TSCEASTViewTractRefElement *)
Shouldn't see view cellRef references when making Sage formula strings.
NSString *TSCEASTNodeFormulaStringIterator::formulaString()
Unable to properly create a formula string. Possibly a bad ASTNodeArray?
virtual TSCEASTElement *TSCEASTNodeFormulaStringIterator::letBindNode(TSCEASTLetBindElement *)
Let nodes should have been removed prior to Sage export
virtual TSCEASTElement *TSCEASTNodeFormulaStringIterator::letVariableNode(TSCEASTLetVariableElement *)
Variable nodes should have been removed prior to Sage export
void TSCEASTNodeFormulaStringIterator::processOperatorNode(NSString *__strong)
improper number of arguments for operator node.
void TSCEASTNodeFormulaStringIterator::processPostfixOperatorNode(NSString *__strong)
improper number of arguments for postfix operator node.
void TSCEASTNodeFormulaStringIterator::processPrefixOperatorNode(NSString *__strong)
improper number of arguments for prefix operator node.
void TSCEASTNodeFormulaStringIterator::processFunctionNode(uint32_t, TSCEFunctionSpec *__strong, NSString *__strong, NSString *__strong)
Have to either specify a function spec or an unknown function name.
virtual NSString *TSCEThunkValue::string(TSCEFunctionSpec *__strong, int, TSULocale *__strong) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEThunkValue.mm
ThunkValue doesn't have a meaningful string() to provide
+[TSCECategoryRef relativeAncestorGroupUid:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECategoryRef.mm
levelsUp of %d is too large.
v16@?0@8
-[TSCEEvalRef scalarValueForEvalContext:permitAccessInsideMergeRegions:fetchRichTextAttributesIfPlainText:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEEvalRef.mm
-[TSCENamedReferenceManager initWithContext:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCENamedReferenceManager.mm
use initWithContext:calculationEngine: instead
v16@?0@"TSCETrackedReferenceStore"8
-[TSCENamedReferenceManager setFormulaOwnerUID:]
Invalid formulaOwnerUID
%@'%@'
virtual TSCEASTElement *TSCEASTEvaluationRewriter::binaryInfixOperatorNode(TSCEASTBinaryElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTEvaluationRewriter.mm
virtual TSCEASTElement *TSCEASTEvaluationRewriter::unaryOperatorNode(TSCEASTUnaryElement *, BOOL)
virtual TSCEASTElement *TSCEASTEvaluationRewriter::uidReferenceNode(TSCEASTUidReferenceElement *)
uidReferenceNode() seen while evaluating
-[TSCEAnyReference referenceTextWithCalculationEngine:hostTableUID:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEAnyReference.mm
referenceTextWithCalculationEngine currently only supports cell and range references
-[TSCEAnyReference referenceTextWithCalculationEngine:contextSheetName:]
virtual void TSCEASTStreamIterator::rewrite()
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTStreamIterator.mm
Unexpected incomplete embedded node type found
TSWPStorage *TSCERichTextStorage::wpStorage() const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERichTextStorage.mm
can't access TSWPStorage of non-rich rich text storage
TSCERichTextStorage TSCERichTextStorage::substringWithRange(const NSRange &) const
Couldn't convert string obtained from storage to UTF-8 - broke a composed character, perhaps?
@"NSString"16@?0@"NSString"8
bdtrc
bdtr
bdtri
TSCEFunctor(%u args)=%@
TSCECellValue *TSCEFunctor::evaluateWithArgs(NSArray *__strong, TSCECalculationEngine *__strong)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFunctor.mm
Wrong number of arguments for functor: %@, args: %@
chdtrc
chdtr
chdtri
kTSCERecalcLoopGroupEmpty
CalculationEngine
TSCECalculationEngine
TSCENamedReferenceManager
TSCETrackedReferenceStore
TSCETrackedReferenceTSPObjectDeprecated
TSCERemoteDataStore
TSCEFormulaOwnerDependencies
TSCECellRecordTileWrapper
TSCERangePrecedentsTile
TSCEReferencesToDirty
NSInteger StockAttributeFromString(NSString *__strong, NSUInteger, NSString *__strong, NSInteger, TSULocale *__strong)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERemoteDataModeUtility.m
documentLocale
-[TSCERemoteDataSourceFetcher init]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERemoteDataSourceFetcher.mm
Do not call method
%s: %s
Remote Data Fetcher: %@
v20@?0q8I16
TSCERemoteDataCat
-[TSCERemoteDataSourceFetcher dataKind]
Abstract method not overridden by %{public}@
Abstract method not overridden by %@: %s
-[TSCERemoteDataSourceFetcher identifier]
-[TSCERemoteDataSourceFetcher canFetchKey:]
v24@?0@"TSCERemoteDataSpecifier"8^B16
-[TSCERemoteDataSourceFetcher sendRequestForKeys:]
-[TSCERemoteDataSourceFetcher fetchQuotesWithTickers:completion:]
-[TSCERemoteDataSourceFetcher autoCompleteQuotesWithInput:completion:]
TSCERemoteDataServerStatusChangeNotification
TSCERemoteDataServerStatusChangesKey
TSCERemoteDataServerStatusChangeToOnlineKey
TSCERemoteDataServerStatusChangeToOfflineKey
ask_price.raw
ask_size.raw
avg_3m_volume.raw
beta_coefficient.raw
bid_price.raw
bid_size.raw
change.raw
currency
day_high.raw
day_low.raw
dividend_per_share.raw
dividend_yield.raw
eps.raw
exchange
fiftytwo_week_high.raw
fiftytwo_week_low.raw
market_cap.raw
name
one_year_target.raw
open.raw
pe_ratio.raw
percent_change.raw
prev_close.raw
price.raw
volume.raw
symbol
time.raw
Not Set
Avg 3M Volume
Beta
Change
Currency
High
Annual Dividend
Dividend Yield
Exchange
52 Week High
52 Week Low
Market Cap
Name
One Year Target
Open
P/E Ratio
Percent Change
Close
Price
Volume
Symbol
Time
Found duplicate for internal ownerID %@, %d and %d
void TSCEIDMap::loadFromArchive(const TSCE::OwnerIDMapArchive &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEIDMap.mm
Got an invalid ownerUID during loadFromArchive, internalOwnerID: %lu
Repaired duplicate internal formula ownerIDs:
%d -> %d (%@)
TSCEInternalFormulaOwnerID TSCEIDMap::registerUID(TSCEOwnerUID)
new ID %lu is already in use by %@ - attempted reuse by %@
About to overwrite a reference in _uidToInternalIDMap: %d -> %d for ownerUID: %{public}@ in Map: %{public}@
TSCEIDMap:
  %d -> %@
  %d -> <UNREGISTERED>
com.apple.Numbers.TSCE.DirtyingDependencies
TSCEDependencyTracker::~TSCEDependencyTracker()
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEDependencyTracker.mm
dirty cell batching must not be left on when a command finishes!
TSCEOwnerRegistrationCat
TSUError TSCEDependencyTracker::registerOwner(TSCEInternalFormulaOwnerID, __strong id<TSCEFormulaOwning>, TSCESubFormulaOwnerIndex)
registerOwner() doesn't accept class: %@ (not id<TSCEFormulaOwning>)
v16@?0^{TSCECellRecord=^{TSCECellRecordEdgeLists}Q{TSCEPackedEdge=[8c]}ISS}8
void TSCEDependencyTracker::ddq_replaceCellWithFormula(TSCEInternalFormulaOwnerID, TSUCellCoord, TSCEReferenceSetWrapper *__strong, TSCEReplaceFormulaOptions)
Attempting to call ddq_replaceCellWithFormula with an invalid coord: %@
void TSCEDependencyTracker::ddq_replaceCellWithFormula(TSCEInternalFormulaOwnerID, TSUCellCoord, TSCEReferenceSetWrapper *__strong, TSCEReplaceFormulaOptions)_block_invoke
nonspanning range %{public}@ found in a spanning reference
v24@?0@"TSCECategoryRef"8^B16
unimplemented reference type found: %d
failure adding a formula
void TSCEDependencyTracker::replaceCellWithFormula(const TSCEOwnerUID &, TSUCellCoord, TSCEReferenceSetWrapper *__strong, TSCEReplaceFormulaOptions)
Not expecting insane, or spanning coordinates here: (%lu,%lu)
void TSCEDependencyTracker::ddq_replaceRemoteDataKeysInterestedInForCell(const TSCECellRef &, TSCERemoteDataSpecifierSet *__strong)
Attempted to replace remote data key interest in a cell whose owner isn't registered.
void TSCEDependencyTracker::ddq_formulaCellsForInsertedOwner(TSCEFormulaRewriteSpec *__strong, TSCECellRefSet &) const
wrong rewrite type received
void TSCEDependencyTracker::ddq_formulaCellsForTableTranspose(TSCEFormulaRewriteSpec *__strong, TSCECellRefSet &) const
wrong rewrite type found
void TSCEDependencyTracker::ddq_formulaCellsForMergeCells(TSCEFormulaRewriteSpec *__strong, TSCECellRefSet &) const
void TSCEDependencyTracker::ddq_formulaCellsForMergeOriginMove(TSCEFormulaRewriteSpec *__strong, TSCECellRefSet &) const
void TSCEDependencyTracker::ddq_formulaCellsForTableUIDReassignment(TSCEFormulaRewriteSpec *__strong, TSCECellRefSet &) const
void TSCEDependencyTracker::ddq_formulaCellsForGroupNodeChanges(TSCEFormulaRewriteSpec *__strong, TSCECellRefSet &) const
void TSCEDependencyTracker::ddq_formulaCellsForPivotRuleChange(TSCEFormulaRewriteSpec *__strong, TSCECellRefSet &) const
void TSCEDependencyTracker::ddq_formulaCellsForGroupNodeUIDReassignment(TSCEFormulaRewriteSpec *__strong, TSCECellRefSet &) const
TSCECellRefSet TSCEDependencyTracker::formulaCellsAffectedByRewrite(TSCEFormulaRewriteSpec *__strong, BOOL) const_block_invoke
Not implemented yet for this type
v32@?0r^{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}8Q16^B24
void TSCEDependencyTracker::endSuppressingWillModifyCalls()_block_invoke
not suppressing willModify calls, so cannot end suppressing them
BOOL TSCEDependencyTracker::endBatchingGroupCellDirtying()_block_invoke
cannot end group cell dirtying batching if it is not already on.
void TSCEDependencyTracker::encodeToArchive(TSCE::DependencyTrackerArchive &, BOOL, BOOL, TSPArchiver *__strong)
failed to get an object to archive for a formula owner that needs registration. Registration failure at unarchive time is likely.
TSCEDependencyTracker::TSCEDependencyTracker(const TSCE::DependencyTrackerArchive &, TSPUnarchiver *__strong, TSCECalculationEngine *__strong)_block_invoke
Unarchiving formulaOwnerDependencies: Want to replace owner %@ (%lu) with %@ (%lu) - highly unexpected
v16@?0@"NSMutableArray"8
v16@?0@"TSPObject<TSCECalculationEngineRegistration>"8
void TSCEDependencyTracker::upgradeToSubOwnerUIDForOwners(TSCEOwnerUidMapper *__strong)
Not expecting tableUID to be changing
dur_
num_
-[TSCENumberCellValue compareToCellValue:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCENumberCellValue.mm
Unexpected value type found
-[TSCENumberCellValue encodeToArchive:]
Expected a currency code for unit %d, locale:%@
[%@] = 
<%@>
  %@ used at: %@
-[TSCEStock init]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEStock.mm
-[TSCEStock initFromArchive:]
-[TSCEStock encodeToArchive:]
_symbol
NULL
-[TSCEStock valueForAttribute:]
Can't fetch an unknown attribute!
-[TSCEStock valueForAttribute:forLocale:]
en_US
MMMdyyyyhhmmzzz
%1.2F
%1.0F
Number suffix - trillions
Number suffix - billions
Number suffix - millions
Number suffix - thousands
-[TSCEStock p_populateAttributesFromArray:]
self.symbol
en_US_POSIX
yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'
fdtrc
fdtr
fdtri
gamma
lgam
v32@?0@"TSCETrackedReference"8Q16^B24
TSTExpandedTables
v16@?0@"TSCETrackedReference"8
BOOL TSCEBitGridTile::clearBit(TSUColumnOrRowIndex, TSURowIndex)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEBitGrid.mm
clearBit, out of range [%d,%d]->[%d,%d]: request was [%d,%d]
void TSCEBitGridTile::andTile(const TSCEBitGridTile &)
andTile: expecting passed in tile to cover the same range as ourself to be meaningful.
void TSCEBitGridTile::orTile(const TSCEBitGridTile &)
orTile: expecting passed in tile to cover the same range as ourself to be meaningful.
void TSCEBitGridTile::diffTile(const TSCEBitGridTile &)
diffTile: expecting passed in tile to cover the same range as ourself to be meaningful.
TSUColumnOrRowIndex TSCEBitGridTile::countInRange(TSUColumnOrRowIndex, TSURowIndex, TSUColumnOrRowIndex, TSURowIndex, const TSCEBitGridTile *) const
countInRange: first row/column must be <= last row/column
countInRange: exclude tile does not correspond to this tile.
countInRange: how did we end up masking off *all* bits?
TSCEBitGridTile for [%d,%d]:
%0.8X 
(%lu,%lu)
<empty grid>
uint8_t findLowestBitNum(uint32_t)
Can't find a bit set in zero.
Can't find a lowestBitOnly in zero.
dat_
-[TSCEDateCellValue compareToCellValue:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEDateCellValue.mm
v24@?0r^{TSCEColumnReference=ISC}8^B16
v24@?0r^{TSCEColumnRangeReference=IISC}8^B16
void TSCESpanningDependencies::readFromArchive(const TSCE::SpanningDependenciesArchive &)_block_invoke
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCESpanningDependencies.mm
_dependencyTracker
NULL spanning dependencies for table: %{public}@
v28@?0{TSCEColumnRangeContextPair=IC}8{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}16
void TSCESpanningDependencies::unpackAfterUnarchive()_block_invoke
v32@?0r^{TSCEColumnRangeReference=IISC}8r^{TSUCellCoord=ISBB}16^B24
v32@?0r^{TSCEColumnReference=ISC}8r^{TSUCellCoord=ISBB}16^B24
void TSCESpanningDependencies::dirtyAllFormulasReferencingRange(TSCERangeCoordinate)
invalid input range
dirty precedents count consistency error - cell: %@ in table: %@
v20@?0{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}8
Spanning %@ dependencies:
column
Spanning %@ precedents of %@:
TSCEFormulaRangeContext formulaRangeContextForArchivedContext(const TSCE::SpanningDependenciesExpandedArchive::RangeContext &)
unknown range dependency context found in archive! Archive is corrupt.
gdtr
gdtrc
v32@?0@"TSCERemoteDataSpecifier"8@"TSCECellValue"16^B24
v32@?0Q8@"NSMutableDictionary"16^B24
-[TSCERemoteDataValueMap updateWithValuesFromMap:overwriteValues:]_block_invoke
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERemoteDataValueMap.mm
-[TSCERemoteDataValueMap initFromArchive:]
Failed to unarchive value for %@!
Remote Data Coordinator
-[TSCERemoteDataCoordinator registerStore:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERemoteDataCoordinator.mm
%@ is already registered!
-[TSCERemoteDataCoordinator unregisterStore:]
%@ is not registered
-[TSCERemoteDataCoordinator p_fetcherForDataKind:]
No configured fetcher for this data kind!
v16@?0@"NSArray"8
-[TSCERemoteDataCoordinator addRemoteDataInterest:forStore:]_block_invoke
Unclaimed specifiers after register!
^IXIC
^NYA
^FTSE
^FTAS
^FTAI
^FCHI
^GDAXI
^AXJO
^AORD
^ATX
^BFX
^BVSP
^GSPTSE
000001.SS
399001.SZ
OMXC20.CO
^OMXH25
^HSI
^NSEI
^BSESN
^JKSE
^ISEQ
^IETP
T25.TA
^TA100
FTSEMIB.MI
^N225
^KLSE
^MXX
^AEX
^NZ50
^OSEAX
RTS.RS
^STI
^KS11
^IBEX
^OMX
^SSMI
^TWII
^DJI
AAPL
SBUX
-[TSCERemoteDataCoordinator p_dataSourceFetcherForRemoteData:]
No matching remote data source fetcher for %@
-[TSCERemoteDataCoordinator p_removeRemoteDataInterest:forStore:]
Unclaimed specifiers after unregister!
-[TSCERemoteDataCoordinator isOnlineForDataKind:]
No status for this data kind!
v32@?0@"NSString"8@"TSCEStock"16^B24
-[TSCERemoteDataCoordinator sourceFetcherDidUpdate:withValues:quotes:]_block_invoke_2
Unexpected changes!
-[TSCEFormulaOwnerDependencies unpackAfterUnarchive]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormulaOwnerDependencies.mm
_cellDependencies->dependencyTracker()
-[TSCEFormulaOwnerDependencies saveToArchiver:]
-[TSCEFormulaOwnerDependencies resetOwnerUIDForUpgrade:forBaseOwner:ownerKind:]
OwnerIndex must be set to use this method
Tables cannot use this method
Charts cannot use this method
-[TSCEFormulaObject evaluateWithContext:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormulaObject.mm
Uncaught exception: %{public}@
-[TSCEFormulaObject copyByRewritingForTranspose:calcEngine:containingCell:outTransposeWarning:]
Expect rewriteSpec -willModifyTable: (or variant) to have been called before rewriting formulas.
Expect rewriteSpec -didModifyTable: (or variant) to have been called before rewriting formulas.
-[TSCEFormulaObject copyByRewritingWithSpec:calcEngine:containingCell:]
Warning, no rewriter created for this formula rewrite type (yet).
-[TSCEFormulaObject copyBySettingHostTableUID:hostColumnUID:hostRowUID:]
Can only set hostCellUID on uid-form formula
-[TSCEFormulaObject copyByRewritingReferencesToUidForm:]
preserveHostCell requested, but resolverTableUID %@ not found
-[TSCEFormulaObject copyByRewritingReferencesToGeometricForm:]
Over-riding hostTableUID for %@
conditional style
table
=__CHART(
+[TSCEFormulaObject parseFormula:calcEngine:unqualifiedReferenceTableUID:containingCell:outError:outNeedsImportRewrite:isChartFormula:isSageUpgrade:]
Only chart formulas should start with the chart prefix.
formula string does not start with =
TSCEThreadAllocatorKey
igami
incbet
virtual NSDate *TSCEViewTractRefValue::date(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEViewTractRefValue.mm
Error: couldn't resolve TSCEViewTractRefValue
virtual NSString *TSCEViewTractRefValue::rawString(TSCEFunctionSpec *__strong, int, TSULocale *__strong) const
virtual BOOL TSCEViewTractRefValue::boolean(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
virtual TSCERichTextStorage TSCEViewTractRefValue::richTextStorage(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
virtual TSCERichTextStorage TSCEViewTractRefValue::rawRichTextStorage(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
virtual TSCEGrid TSCEViewTractRefValue::formattedGrid(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
virtual TSCENumberValue TSCEViewTractRefValue::number() const
virtual NSDate *TSCEViewTractRefValue::date() const
-[TSCECellTractRef initWithUidTract:calcEngine:tableUID:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECellTractRef.mm
+[TSCECellTractRef cellTractRefWithUidTractList:onTable:preserveFlags:rewriteContext:]
-[TSCECellTractRef uidTractWithCalcEngine:hostTableUID:]
 | %@
incbi
void TSCERecalcPhaseState::addNewLeaf(const TSCEInternalCellReference &, TSCEDependencyTracker *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECalcEngine.mm
Invalid ownerId for solving, leaf: %@ for formulaOwner %@ %@
(UNREGISTERED)
com.apple.Numbers.TSCE.RecalcLowPriority
com.apple.Numbers.TSCE.RecalcHighPriority
void TSCECalcEngine::initializeDispatchObjects()
_recalcLowPriorityQueue
_recalcHighPriorityQueue
_recalcDispatchGroup
_recalcLoopGroup
TSCEDebugEnableLocalVariables
com.apple.iWork.CalculationEngine
Performance
com.apple.Numbers.TSCE.writeExclusionQueue
TSTTableResolverFactory
Functions used:
void TSCECalcEngine::assertNonCalcEngineException(NSString *__strong, NSException *__strong, TSCEFormulaObject *__strong) const
Non-calcEngine NSException passed up to %{public}@: %{public}@ with formula: %{public}@
Non-calcEngine type exception passed up to %{public}@ for formula %{public}@.
Non-calcEngine NSException passed up to %{public}@: %{public}@
Non-calcEngine type exception passed up to %{public}@.
void TSCECalcEngine::dispatchOnePhase(TSCERecalcPhaseState *)
phase
dispatchOnePhase
void TSCECalcEngine::dispatchOnePhase(TSCERecalcPhaseState *)_block_invoke
Unexpected calc-engine exception passed up to enqueueTaskForCell: %{public}@
recalcPhaseHoldingReadLock
void TSCECalcEngine::recalcPhaseHoldingReadLock(TSCERecalcPhaseState *)
Unexpected calc-engine exception passed up to recalcPhaseHoldingReadLock: %{public}@ formulaOwner is: %{public}@
void TSCECalcEngine::startRecalculationTask()
cannot start recalculation thread because it is in the wrong state
v12@?0B8
void TSCECalcEngine::startRecalculationTask()_block_invoke_2
no access controller!
startRecalculationTask
Unexpected calc-engine exception passed up to startRecalculationTask loop: %{public}@
TSUError TSCECalcEngine::registerOwnerWithOwnerUID(const TSCEOwnerUID &, __strong id<TSCEFormulaOwning>, __strong id<TSCEReferenceResolving>, const TSCEOwnerUID &, TSCESubFormulaOwnerIndex)
Resolver doesn't conform to the TSCEReferenceResolving protocol.
%@ doesn't implement: -multiEvaluateFormulasAt:withCalcEngine:recalcOptions:
TSCETransaction *TSCECalcEngine::openTransaction()
There is already an open transaction on this calc-engine: %@
expected nil value for '%{public}s'
_currentTransaction
void TSCECalcEngine::closeTransaction(TSCETransaction *__strong)
Invalid transaction object passed in: %@
void TSCECalcEngine::replaceFormula(__strong id<TSCEFormulaReturning>, const TSUCellCoord &, const TSCEOwnerUID &, TSCEReplaceFormulaOptions)
Can only place formulas at valid, non-spanning cell coords, not: %@
void TSCECalcEngine::setRewritingMinion(TSCERewritingMinion *__strong)
Warning: Overwriting a pre-existing rewritingMinion with a new one
NSArray *TSCECalcEngine::rewriteSpecStack()
Need to add locking to run this on multiple threads
void TSCECalcEngine::popRewriteSpec(TSCEFormulaRewriteSpec *__strong)
Popping wrong rewriteSpec off rewriteSpecStack
Have no rewriteSpecs to pop
void TSCECalcEngine::blockUntilRecalcIsCompleteWithTimeout(NSTimeInterval)
Can't block on the calc-engine before it is started up.
void TSCECalcEngine::blockUntilRecalcTaskExitedWithTimeout(NSTimeInterval)
Can't block without an access controller
void TSCECalcEngine::resumeRecalculation()
Can't resume calculation on a closing document!
TSCEValue TSCECalcEngine::evaluateSynchedWithCalcEngineWithFormula(TSCEFormulaObject *__strong, TSCEEvaluationContext &)
formula
TSTRefNamer
TSTRefParser
TSTHeaderNameMgr
TSCEReduceCalcEngineMsgSize
v16@?0@"TSCENamedReferenceManager"8
v16@?0@"TSPObject<TSCEHeaderNameProtocol>"8
v16@?0@"TSCERemoteDataStore"8
v16@?0@"TSCEReferencesToDirty"8
smirnovi
kolmogi
Remote Data Store
Remote Data Store Update
-[TSCERemoteDataStore dealloc]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERemoteDataStore.mm
Failed to unregister store before dealloc
-[TSCERemoteDataStore registerWithCoordinator]_block_invoke
Store is already registered!
-[TSCERemoteDataStore unregisterWithCoordinator]_block_invoke
Store is already unregistered!
-[TSCERemoteDataStore valueForRemoteData:]
Cold specifiers must have dates!
-[TSCERemoteDataStore cachedQuoteForSymbol:]
We're about to capture the coordinator's queue lock. We should NOT have the write lock at this time.
B24@?0@"NSString"8@"NSDictionary"16
-[TSCERemoteDataStore remoteDataDidUpdateValues:quotes:]
Shouldn't get an empty update!
-[TSCERemoteDataStore p_tsceValueFromTsceCellValue:]
Attempted to create a TSCEvalue from an unsupported TSCECellValue of class: %@
-[TSCERemoteDataStore updateWithRemoteDataMap:quotes:syncKey:]
Should never get a docserver update for an unshared file!
v24@?0@"NSString"8^B16
v32@?0Q8@"NSMutableSet"16^B24
year
month
attribute
B24@?0@"TSCERemoteDataSpecifier"8^B16
(empty) 
<%tu specifiers: %tu hot, %tu cold>
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTIteratorBase.mm
virtual TSCEASTElement *TSCEASTIteratorBase::visitNode(TSCEASTElement *)
%s error
unknown
domain
singularity
overflow
underflow
total loss of precision
partial loss of precision
-[TSCEFormulaRewriteSpec addCoordMapper:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormulaRewriteSpec.mm
Replacing same tableUID with a different coordMapper - expect trouble: %@
 type: %@ %@
(inverse)
 tableUID: %@
Nested rewrites:
   (nested): %@
-[TSCEFormulaRewriteSpec affectedOwnerUID]
Shouldn't ask for the affected owner ID of a move, since there may be two.
Not a meaningful question, there are numerous tables affected
-[TSCEFormulaRewriteSpec affectedConditionalStyleOwnerUID]
Not implemented for these rewrite types.
-[TSCEFormulaRewriteSpec adjustViewTractRef:calcEngine:containingCellRef:undoTractList:]
-[TSCEFormulaRewriteSpec restoreViewTractRefFromUndoTractList:calcEngine:containingCellRef:]
-[TSCEFormulaRewriteSpec willModifyTable:uidResolver:calcEngine:]
Move region requires the two tables version will/didModifySrcTable:dstTable: be called instead
-[TSCEFormulaRewriteSpec willModifySrcTable:srcUidResolver:dstTable:dstUidResolver:]
Only move region takes two tables
-[TSCEFormulaRewriteSpec didModifySrcTable:dstTable:]
-[TSCEFormulaRewriteSpec didModifyTable:calcEngine:]
Move region requires the two table version didModifySrcTable:dstTable: be called instead
-[TSCEFormulaRewriteSpec affectedRange]
Not implemented for this type
Not yet implemented for this type
-[TSCEFormulaRewriteSpec expandedRowColumnUuids]
-[TSCERemoteDataSpecifier initWithFunctionIndex:symbol:attribute:year:month:day:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERemoteDataSpecifier.mm
How does a hot specifier have a date?
How does a cold specifier not have a date?
-[TSCERemoteDataSpecifier encodeToArchive:]
Out-of-bounds type assignment was clamped to max
Out-of-bounds type assignment was clamped to min
 [%04zd/%02zd/%02zd]
<%@ %@ %@%@>
nbdtr
nbdtri
+[TSCETablesByName containerNameForTable:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCETablesByName.mm
+[TSCETablesByName tableNameForTable:]
  ContainerName: '%@' TableName: '%@' Table: %@
TSCEErrorValue (type %d %@)
ndtri
TSCEValue TSCEComputeSubtraction(TSCEValue, int, TSCEValue, int, TSCEFunctionSpec *__strong, TSCEEvaluationContext *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEAggregateEval.mm
-[TSCETrackedReference replaceContentsWithContentsOfTrackedReference:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCETrackedReference.mm
can't replace contents with contents of a nil tracked reference
-[TSCETrackedReference referencesForCalcEngine:referenceTrackerUID:]
Non-nil TSCEReferenceSetWrapper is required to use referencesForCalcEngine:
-[TSCETrackedReference precedentsWithCalcEngine:hostOwnerUID:]
Non-nil precedents pointer is required to use precedentsWithCalcEngine:
TSCEInternalCellReference: #%lu::%@
TSCEEvaluationContext::TSCEEvaluationContext(TSCECalculationEngine *__strong, const TSCEOwnerUID &, TSUCellCoord)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEEvaluationContext.mm
Didn't get a calc engine
v28@?0S8r^{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}12^B20
void TSCEEvaluationContext::runBlockUnlessAborted(__strong dispatch_block_t)
failed to create dispatch group
static NSDate *TSCEEvaluationContext::newDateConversionOfString(NSString *__strong, TSCEEvaluationContext *)
Should not have reached this point with a NULL context - you are lucky you are getting any date at all.
-[TSCEValueGrid initWithColumnRange:rowRange:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEValueGrid.mm
Can't set an extent with invalid ranges
-[TSCEValueGrid clearValueAtCoord:]
Can't clear value with a spanning coordinate: %@
-[TSCEValueGrid valueAtCoord:]
Can't read value with a spanning coordinate: %@
-[TSCEValueGrid valueAt1DIndex:]
Index %lu exceeds area: %lu
Can't use valueAt1DIndex: with no dimensions set
v32@?0r^{TSCEGridCoord=II}8r^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16^B24
-[TSCEValueGrid expandToIncludeCoord:]
Can't expand with a spanning coordinate: %@
-[TSCEValueGrid setValue:atCoord:]
Can't set a value at a spanning coordinate: %@
-[TSCEValueGrid setEmptyValueAtCoord:]
-[TSCEValueGrid subGridAtGridCoord:width:height:]
can't access beyond the end of a vector
Exceeded rowLimit: %d
pdtrc
pdtr
pdtri
-[TSCENilCellValue compareToCellValue:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCENilCellValue.mm
 | %u::%@
  %@ -> %@
TSCEErrorFlavor_None
TSCEErrorFlavor_Error
TSCEErrorFlavor_RefError
TSCEErrorFlavor_CircularRefError
TSCEErrorFlavor_UnsupportedFunction
NSString *stringForErrorFlavor(TSCEErrorFlavor)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERefErrors.mm
Missing case for TSCEErrorFlavor: %d
stdtr
stdtri
columnUids: %@
rowUids: %@
%@ mergeSource: %@ mergeRegion: %@
merge origin map:
%@ -> %@
srcTableUID: %@
srcColumnUids: %@
srcRowUids: %@
dstTableUID: %@
dstColumnUids: %@
dstRowUids: %@
-[TSCEFormulaRewrite_RegionMovedInfo loadIndexesFromRegions]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormulaRewrite_RegionInfo.mm
Expecting source and dest regions to be the same size
-[TSCESumAccumulator addValue:function:evaluationContext:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCESumAccumulator.mm
Shouldn't get a nil date from something that says it's a date
virtual TSCEASTElement *TSCEASTRefExtractionIterator::functionNode(TSCEASTFunctionElement *)_block_invoke_2
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTRefExtractionIterator.mm
unhandled case for refType: %d
rewriteType=%d
%@->%@
-[TSCEFormulaRewrite_Uids initWithUids:atIndexes:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormulaRewriteInfo_RowColumnInfo.mm
Size mismatch for our vectors
-[TSCEFormulaRewrite_Uids containsIndex:]
The %{public}@ API requires -[%{public}@ loadIndexesForTable:] be called first.
-[TSCEFormulaRewrite_Uids rowIndexForUid:]
Warning, %{public}@ did not find the uuid: %@
-[TSCEFormulaRewrite_Uids columnIndexForUid:]
Uids: %@
Indexes: %@
-[TSCEFormulaRewriteInfo_RowColumnInfo saveToMessage:]
Cannot archive until we have called loadIndexesForTable
-[TSCEFormulaRewriteInfo_RowColumnInfo offsetForRowIndex:]
TSUDefaultCat
-[TSCEFormulaRewriteInfo_RowColumnInfo offsetForUpdatedRowIndex:isRemoveRows:]
This should be the same offset, then, right
-[TSCEFormulaRewriteInfo_RowColumnInfo updatedCellRefForRewriteType:originalCellRef:]
Not implemented for this rewrite type
Should not see this call, we should get either the insert or remove rewrite types
Should not see this call, its more complex than that
-[TSCEFormulaRewriteInfo_RowColumnInfo originalCellRefForRewriteType:updatedCellRef:]
-[TSCEFormulaRewriteInfo_RowColumnInfo indexIsAffected:]
-[TSCEFormulaRewriteInfo_RowColumnInfo uuidForIndex:]
-[TSCEFormulaRewriteInfo_RowColumnInfo columnIndexForUuid:]
-[TSCEFormulaRewriteInfo_RowColumnInfo rowIndexForUuid:]
-[TSCEFormulaRewriteInfo_RowColumnInfo rowOrColumnIndices]
-[TSCEFormulaRewriteInfo_RowColumnInfo tableRange]
-[TSCEFormulaRewriteInfo_RowColumnInfo affectedRangeForRemoveRows]
-[TSCEFormulaRewriteInfo_RowColumnInfo affectedRangeForMoveRows]
insertInfo
-[TSCEFormulaRewriteInfo_RowColumnInfo uuidsInRange:]
-[TSCEFormulaRewriteInfo_RowColumnInfo uuidsForIndexes:]
%@ uuids: %@
<TSKUIDStructVector: %p>
v36@?0r^{TSUCellCoord=ISBB}8S16r^{TSUCellRect={TSUCellCoord=ISBB}{?=II}}20^B28
v32@?0r^{TSUCellRect={TSUCellCoord=ISBB}{?=II}}8r^{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}16^B24
Range dependencies:
%@: Range precedents:
TSCERangePrecedentsTile *TSCERangeDependencies::findTileForToOwnerId(TSCEInternalFormulaOwnerID, BOOL)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERangeDependencies.mm
v32@?0r^{TSUCellCoord=ISBB}8r^{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16^B24
void TSCERangeDependencies::readFromArchive(const TSCE::RangeDependenciesArchive &)
corrupted range dependencies archive
void TSCERangeDependencies::readFromExpandedArchive(const TSCE::RangeDependenciesArchive &)
void TSCERangeDependencies::unpackAfterUnarchive()
precedentRangeDependencies
%@::{%@}
%@::{%@, ...}
%@, ...
%@<%lu> %@%@
CYCLE 
(formula) 
refers to: %@
; referenced by: %@
---Cell dependencies for %@ (%lu dirty cells):
-[TSCEStringCellValue initWithString:locale:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEStringCellValue.mm
Creating a TSCEStringCellValue with a nil string.
str_
-[TSCEStringCellValue compareToCellValue:]
-[TSCEStringCellValue encodeToArchive:]
Avoid using nil to mean empty string in a TSCEStringValue, string is: %@
-[TSCEDistributor protocol]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEDistributor.m
-[TSCEDistributor addReceiver:]
protocol MUST be defined before addReceiver can be used
Error %@: Target %@ does not conform to protocol %@ required for TSCEDistributor class %@.
-[TSCEDistributor suspendDuringBlock:]
someone added a receiver when we were not expecting it
TSCECellDependencies::TSCECellDependencies(TSCEDependencyTracker *, TSCEInternalFormulaOwnerID, const TSCEOwnerUID &, TSCESubFormulaOwnerIndex)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECellDependencies.mm
tile.cppTile
void TSCECellDependencies::readPrecedentsWithOwners(const TSCE::EdgesArchive &, TSCECellRecord *)
Couldn't locate tableID found in cross-table reference: %{public}@
void TSCECellDependencies::readExpandedPrecedentsWithOwners(const TSCE::ExpandedEdgesArchive &, TSCECellRecord *)
void TSCECellDependencies::readFromArchive(const TSCE::CellDependenciesArchive &)
void TSCECellDependencies::unpackAfterUnarchive()
void TSCECellDependencies::readFromTiledArchive(const TSCE::CellDependenciesTiledArchive &, TSPUnarchiver *__strong)_block_invoke
TSCECellRecordTileWrapper *TSCECellDependencies::tileForCoord(const TSUCellCoord &, BOOL)
Expect cppTile to be filled in already
Uh, why are we returning a tile with no insides?
<%lu> 
refers to: 
; referenced by: 
[UNREGISTERING]
%@-%@
%@ (%@) %@
%@ %@ (%@) %@
CellDependencies for %@
Cell Precedents of %@:
  %@<%lu>
void TSCECellDependencies::findAndRecordCyclesInDirtyCells(TSCETarjanState &, TSCEInternalCellRefQueue &)_block_invoke
Cycle grid out of sync.
IsDirty grid out of sync.
IsDirtyAndNotInACycle grid out of sync.
Avoided underflow in dirtySelfPlusPrecedentsCount for cell: %@
void TSCECellDependencies::assertDirtyPrecedentsCountConsistency()
assertDirtyPrecedentsCountConsistency: inconsistency detected.
BOOL TSCECellDependencies::dirtyPrecedentCountsAreConsistent(BOOL)_block_invoke
cellRecord
%@:%@ recomputed: <clean> vs stored %lu - inconsistency.
%@...<truncated>
  +1: This cell is dirty
recomputed: %lu vs stored %lu - inconsistency, explanation:
%@precedents:%@
dirty precedents count consistency error in %@ (count is %lu, should be >1)
void TSCEWholeOwnerDependencies::readFromArchive(const TSCE::WholeOwnerDependenciesArchive &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEWholeOwnerDependencies.mm
NULL whole owner dependencies
void TSCEWholeOwnerDependencies::unpackAfterUnarchive()_block_invoke
bool TSCEWholeOwnerDependencies::addOwnerReference(const TSCEInternalCellReference &)
void TSCEVolatileDependencies::readFromArchive(const TSCE::VolatileDependenciesArchive &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEVolatileDependencies.mm
corrupt volatile dependency tracker archive
bool TSCEVolatileDependencies::addVolatileGeometryReference(const TSCEInternalCellReference &)
NULL volatile dependencies
-[TSCECellValue tsceValue]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECellValue.mm
-[TSCECellValue copyWithZone:]
-[TSCECellValue displayString]
Children of TSCECellValue should implement %@.
-[TSCECellValue canonicalKeyString]
-[TSCECellValue format]
-[TSCECellValue isEqualToCellValue:]
-[TSCECellValue hash]
-[TSCECellValue compareToCellValue:]
-[TSCECellValue updateWithCustomFormatList:]
customFormatList
-[TSCECellValue encodeCellValueToArchive:]
Unexpected value type found in archiving in TSCECellValue
boo_TRUE
boo_FALSE
-[TSCEBooleanCellValue compareToCellValue:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEBooleanCellValue.mm
/dev/random
TSCEArchives.proto
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/messages/src/TSCEArchives.pb.cc
kTSCERecalcLoopGroupEmpty%u
com.apple.Numbers.TSCE.PrecedentLoading
-[TSCEFormulasToSet commonInit]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormulasToSet.mm
_precedentLoadingQueue
_precedentLoadingGroup
com.apple.Numbers.TSCE.BackgroundFormulas
_backgroundProcessingQueue
-[TSCEFormulasToSet initWithCalcEngine:forMinion:options:]
A minion is required to use TSCEFormulasToSet object
-[TSCEFormulasToSet dealloc]
Deallocing %@ with %lu formulasToReset
Deallocing %@ with %lu formulasToRemove
Deallocing %@ with %lu formulasToReplace
-[TSCEFormulasToSet replaceFormula:atCellCoord:inOwner:replaceOptions:]_block_invoke
precedents
-[TSCEFormulasToSet _flushFormulasToReplaceWithDepTracker:startTime:timeout:]_block_invoke
-[TSCEFormulasToSet flushAllFormulaChanges]
We should be empty now, always
Starting parse
Stack size increased to %lu
Entering state %d
Reading a token: 
Now at end of input.
Next token is
Shifting
Reference Construction - Manual Error
int TSCEyyparse(void *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEGrammar.ymm
Parser: the quoted string length is less than 2.
Invalid Native Syntax String for Argument Token.
ARGUMENT
Invalid Function String specified in Token initialization.
Malformed reference
-> $$ =
syntax error
Error: popping
memory exhausted
Cleanup: discarding lookahead
Cleanup: popping
token %s (
nterm %s (
$end
error
$undefined
HIGHER
TOK_LPAREN
TOK_RPAREN
TOK_LBRACK
TOK_RBRACK
TOK_ARG_SEPARATOR
TOK_DOUBLE_COLON
TOK_BANG
TOK_DOLLAR
TOK_UNKNOWN
TOK_REFERENCE_TOKEN_BEGIN
TOK_REFERENCE_TOKEN_END
TOK_UNQUOTED_LABEL
TOK_QUOTED_LABEL
TOK_NUMBER
TOK_WS
TOK_ARRAY_LINE_DELIMITER
TOK_ERROR
TOK_TOKEN
TOK_QUOTEDSTRING
TOK_COLON
TOK_PIPE
TOK_LESS_OR_EQUAL
TOK_GREATER_OR_EQUAL
TOK_GREATER_THAN
TOK_LESS_THAN
TOK_NOT_EQUAL
TOK_EQUALS
TOK_AMPERSAND
TOK_MINUS
TOK_PLUS
TOK_DIV
TOK_TIMES
TOK_POWER
TOK_PERCENT
UPLUS
UMINUS
$accept
root
expr
label
label_end_token
number
number_end_token
function
list
list_tail
expr_opt
reference
scoped_reference
scoped_reference_end_token
scoped_reference_tokenized
unscoped_reference
unscoped_reference_end_token
unscoped_reference_tokenized
cell_ref
cell_ref_tokenized
cell_ref_end_token
Reducing stack by rule %d (line %lu):
   $%d = 
void TSCEASTNodeAddChild(TSCEASTNode *, TSCEAST *)
Adding child to leaf
Stack now
Deleting
yyFlexLexer::yylex invoked but %option yyclass used
fatal flex scanner internal error--no action found
fatal flex scanner internal error--end of buffer missed
fatal error - scanner input buffer overflow
input in flex scanner failed
out of dynamic memory in yy_get_next_buffer()
flex scanner push-back overflow
out of dynamic memory in yy_create_buffer()
out of dynamic memory in yyensure_buffer_stack()
out of memory expanding start-condition stack
start-condition stack underflow
TSCEReferenceSetWrapper
NSCopying
TSCELocalization
TSCEWarning
TSCEBulkCellChangeMinion
TSCEFormulaReplacing
NSObject
TSCEFunctionSpec
TSCEUnitRegistry
TSCECellDirtier
TSCETaggedDecimalListObject
TSCEUpgradingTablesMinion
TSCEUuidReferences
TSCEAdditions
TSCENameTrie
TSCEReferencesToDirty
TSCEUndoTract
FullTuple
TSCEUndoTractList
NSFastEnumeration
TSCERegionAllocator
TSCEGroupByNodeMap
TSCECoordMapper
TSCECoordMappingProtocol
TSCERewritingMinion
TSCETableTransposedInfo
TSCERewriteTableUIDInfo
TSCERewriteGroupNodeUIDInfo
TSCEAbstractGrid
TSCEAggregateGrid
TSCEDenseGrid
TSCEReferenceBackedGrid
TSCEError
TSCECellRecordTileWrapper
TSCEOwnerUidMapper
!0&0"@
TSCESageSizedList
TSCELogicalTest
TSCEValueContainer
TSCECellCoordinateVector
TSCECellValueCombinator
TSCEFormulasForUndoForOwnerKind
TSCEFormulasForUndo
TSCEAutogeneratedSpecList
TSCERegexMatcher
TSCERefNamingContext
TSCEGetPivotDataBundle
TSCEArgumentToken
TSCEWrappedCellRef
TSCEWrappedRangeRef
TSCEConfiguration
TSCERelativeTractRef
TSCEUIDSet
NSMutableCopying
TSCEMutableUIDSet
TSCEFormulaOwnerWrapper
TSCERangePrecedentsTile
TSCEFunctionArgumentSpec
TSCECategoryRef
TSCETableNameChangeProtocol
TSCETablesByNameDistributor
TSCEEvalRef
TSCENamedReferenceManager
TSCEFormulaOwning
TSCEQuotedRefPathWord
TSCEQuotedRefPathComponent
TSCEQuotedRefPathSplitter
TSCEAnyReference
TSCECalendar
TSCETrackedReferenceTSPObjectDeprecated
TSCEUnpersistedStorage
TSCEViewTractRef
TSCEAutogeneratedSpecTypes
TSCEHauntedOwner
TSCEAbortObject
TSCECalculationEngine
TSCEColumnRowIndexMapper
TSCERemoteDataSourceFetcher
TSCECalculationEngineRegistration
TSKModel
TSCETransaction
TSCENumberCellValue
TSCEUUidReferenceMap
TSCEFunctionsInUse
TSCEStock
TSCETrackedReferenceStore
TSCEDateCellValue
TSCERemoteDataValueMap
TSCERemoteDataCoordinator
TSCEReferenceParsingContext
TSCEFormulaOwnerDependencies
TSCEFormulaObject
TSCEFormulaReturning
TSCECellTractRef
TSCEReferenceResolving
TSCEHeaderNameProtocol
TSCERemoteDataStore
TSCERemoteDataSpecifierSet
TSCEFormulaRewriteSpec
TSCERemoteDataSpecifier
TSCE_PrefixMatch
TSCETablesByName
TSCEErrorCellValue
TSCETrackedReference
TSCEValueGrid
AbstractGrid
TSCENilCellValue
TSCEGroupByChange
TSCEFormulaRewrite_RegionInfo
TSCEFormulaRewrite_RegionMergedInfo
TSCEFormulaRewrite_MergeOriginMovedInfo
TSCEFormulaRewrite_RegionMovedInfo
TSCESumAccumulator
TSCEFormulaRewrite_Uids
TSCEFormulaRewriteInfo_RangeEntry
TSCEFormulaRewriteInfo_RowColumnInfo
NumericCompare
TSCEEdgeListPrinter
TSCECellDependencyRowPrinter
TSCECellDependenciesPrinter
TSCEStringCellValue
TSCEDistributor
TSCECellValue
TSCEBooleanCellValue
TSCECalcTimeoutObject
TSCEFormulasToSet
functionSpecForFunctionIndex:
functionName
array
raiseInvalidArgumentPairingsErrorForFunctionName:hasInitialUnrelatedArgument:
rangeIsWithinTable:
raiseErrorForInvalidReference
raiseRangeSizeMismatchErrorForFunctionName:
logicalTestWithCriterion:functionSpec:evaluationContext:
initWithValue:
pairWithFirst:second:
addObject:
count
copyAndReplaceGroupUIDs:
setGroupByUid:
groupByUid
absoluteGroupUid
setAbsoluteGroupUid:
relativeGroupUid
setRelativeGroupUid:
type
setType:
tableOrLinkedResolverForTableUID:
isEqual:
isValid
preserveFlags
groupByChange
updatedRelativeAncestorLevelForPreviousAncestorCategoryLevel:numLevels:
setAsAbsoluteWithGroupUid:
mutableCopy
stringWithUTF8String:
handleFailureInFunction:file:lineNumber:isFatal:description:
logBacktraceThrottled
removeAllObjects
geometryPrecedentForTableUID:
removeObject:
containsObject:
countByEnumeratingWithState:objects:count:
initWithDependencyTracker:
init
dealloc
initWithReferenceSet:
referenceSet
copyWithZone:
isEmpty
insertAnyRef:
insertCellRef:
insertRangeRef:
insertSpanningRangeRef:
insertRefs:
removeCellRef:
forallRefs:
foreachCellRef:
foreachRangeRef:
foreachSpanningRangeRef:
_referenceSet
TB,R,N
T^v,R,N
localeSpecificStorageForKey:
localizedStringForKey:value:table:
initWithObjectsAndKeys:
setLocaleSpecificStorage:forKey:
functionLocalizationDictionary
objectForKey:
allKeys
numberWithInt:
localizedTrueString
localizedCaseInsensitiveIsEqual:toString:
localizedFalseString
initWithObjects:
objectAtIndex:
dictionaryWithCapacity:
setObject:forKey:
stringWithFormat:
_localizedStringFromArgumentsTable:
localizedFunctionCategoryDictionary
localizations
initWithCapacity:
objectEnumerator
nextObject
pathForResource:ofType:inDirectory:forLocalization:
dictionaryWithContentsOfFile:
loadLocalizedStrings
localizedTrueStrings
localizedFalseStrings
localizedNameForFunction:
localizedCompare:toString:
sortedArrayUsingComparator:
arrayWithObjects:
localizedNamesForFunctions:
allValues
addObjectsFromArray:
functionNameForLocalizedString:
supportedFunctions
localizedTypeStringForArgumentType:
localizedStringIsTrue:
localizedStringIsFalse:
localizedFunctionNameForMenuTag:
localizedToolTipForFunction:
localizedCategoryForFunction:
localizedNameForArgument:ofFunction:
localizedToolTipForArgument:ofFunction:
localizedModeNameForArgument:modeIndex:ofFunction:
localizedModeToolTipForArgument:modeIndex:ofFunction:
localizedCategoryArray
allLocalizedFunctions
localizedLabelForAggType:
localizedShortLabelForAggType:
localizedLabelForShowAsType:
allocWithZone:
initWithDictionary:
ignored
setIgnored:
isEqualToString:
sharedCalculationEngineConfiguration
warnWhenFormulasReferToEmptyCells
referenceTextWithCalculationEngine:hostTableUID:
rangeRef
documentLocale
intValue
description
hash
displayStringWithCalculationEngine:forTable:andCellID:
isIgnored
initWithRangeRef:
setHasVisibleWarnings:
reportNonNumericCellWarningInContext:reference:
reportMonthOutOfRangeWarningInContext:
reportDayOutOfRangeWarningInContext:
reportBoolToNumberConversionWarningInContext:
reportMismatchedSizesWarningInContext:
reportLossOfUnitsWarningInContext:
reportAutomaticUnitConversionWarningInContext:
reportComparisonWarningInContext:leftType:rightType:
copyByRemappingEntityIDs:
metadata
setMetadata:
.cxx_destruct
_ignored
_metadata
T@"NSDictionary",&,N,V_metadata
TB,N,V_ignored
tableResolverForTableUID:
initWithCalcEngine:forMinion:options:
calcEngine
replaceFormula:atCellCoord:inOwner:
replaceFormula:atCellCoord:inOwner:replaceOptions:
replaceFormulaAt:inOwner:precedents:replaceOptions:
removeFormulaAt:inOwner:
removeFormulasAt:
removeAllFormulasFromOwner:
resetFormulaAt:
markCellRefAsDirty:
markRangeRefAsDirty:
flushAllFormulaChanges
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
initWithCalcEngine:
flushAllChanges
_formulasToSet
T@"TSCECalculationEngine",R,N
initWithFunctionName:minArgs:maxArgs:repeatingGroupSize:isOperator:shipVersion:arguments:functionIndex:
functionSpecList
setObject:forKeyedSubscript:
functionIndex
loadSpecDictionary
objectForKeyedSubscript:
currentLocale
loadRepeatingArguments
localizedFunctionNameForLocale:
argumentSpecForIndex:
caseInsensitiveCompare:
specWithFunctionName:minArgs:maxArgs:repeatingGroupSize:isOperator:shipVersion:arguments:functionIndex:
englishFunctionNameFromFunctionIndex:
functionSpecForFunctionName:
isModeEnabled:functionIndex:
unsupportedFunctionNameForLocale:
p_ValidateArguments
localizedToolTipStringForLocale:
displayStringForLocale:
arguments
numArguments
accessorModeForArgumentIndex:
preferredTypeForArgumentIndex:
nativeSyntaxStringForArgument:
modeNumberForLocalizedString:argumentSpecIndex:attributeMax:locale:
minArguments
maxArguments
isOperator
versionShippedIn
repeatingGroupSize
.cxx_construct
_functionName
_minArguments
_maxArguments
_repeatingGroupSize
_arguments
_repeatingArguments
_isOperator
_shipVersion
_functionIndex
T@"NSString",R
TS,R,V_functionIndex
Tr^v,R
Ts,R,N,V_minArguments
Ts,R,N,V_maxArguments
TQ,R,N
TB,R,N,V_isOperator
Ti,R,N,V_shipVersion
Ts,R,N,V_repeatingGroupSize
mainBundle
availableCurrencyCodes
numberWithInteger:
integerValue
initWithInt:
unitForString:
length
characterAtIndex:
unitPrefixForCharacter:
substringFromIndex:
binaryUnitPrefixForChars::
multiplierForUnitPrefix:
initialize
unitForCurrencyCode:
currencyCodeForUnit:
canonicalUnitForDimension:
prefixedUnitForString:
unitIsMetric:
convert:fromUnit:toUnit:
dimensionForUnit:
dirtyCellsForSeconds:fromStartTime:
isDoneDirtying
_dirtyCellsWithNoLockForSeconds:fromStartTime:
dependentsToDirtyByFromRef
dirtyCellsNow
startDirtyingCellRef
stopDirtyingCellRef
dirtyNewCellRef:forSeconds:fromStartTime:
dependTracker
startTime
timeout
startCellRef
dirtyingInProgress
setDirtyingInProgress:
_dependTracker
_startCellRef
_dirtyingInProgress
_dirtyingLock
_startTime
_timeout
_dependentsToDirtyByFromRef
TB,N,V_dirtyingInProgress
T^v,R,N,V_dependTracker
T@"NSDate",R,N,V_startTime
Td,R,N,V_timeout
T{TSCEInternalCellReference={TSUCellCoord=ISBB}SS},R,N,V_startCellRef
taggedDecimalList
isAbortedError
raiseMixedTypeManipulationErrorForFunctionName:
timeIntervalSinceReferenceDate
createFromVector:functionSpec:argumentIndex:evaluationContext:ignoreError:ignoreDuplicates:
_taggedList
errorForErrorType:
stringWithCString:encoding:
setProblemExpressionString:
usEnglishLocale
managedNodeArrayWithCapacity:
raiseNumberError
uppercaseString
tsce_stringByUnescapingSingleQuotes
raiseUnsupportedFeatureError
rangeOfString:
substringWithRange:
resolverForTableUID:
resolverUID
forwardRegisterOwnerWithOwnerUID:legacyGlobalID:
ownerUIDForLegacyGlobalID:registeringIfNeeded:
appendString:
cppCalcEngine
flushRemoveFormulas
flushResetFormulas
flushReplaceFormulas
willClose
flush
appendFormat:
isBadRef
addCellCoord:referringToTableUID:forColumnRowUuid:
addCellCoord:referringToTableUID:
removeCellCoord:referringToTableUID:forColumnRowUuid:
removeCellCoord:referringToTableUID:
getCellRefs:referringToOwner:
_stringForInternalCellRef:
initWithOwnerUID:
addCellCoord:referringToCategoryRef:
removeCellCoord:referringToCategoryRef:
removeCellCoord:
clear
getCellRefs:referringToOwners:
getAllCellRefs:referringToOwnerUID:
getCellRefs:referringToOwnerUID:referringToUuids:
initFromArchive:ownerUID:
unpackAfterUnarchive
encodeToArchive:archiver:
ownerUID
setOwnerUID:
_ownerUID
_coordSetsReferringToTable
_coordSetsReferringToUuidInTable
_uuidsByCoord
T{TSKUIDStruct=QQ},N,V_ownerUID
characterSetWithCharactersInString:
addCharactersInString:
whitespaceCharacterSet
addCharactersInRange:
whitespaceAndNewlineCharacterSet
tsce_internationalWhitespaceCharacterSet
formUnionWithCharacterSet:
tsce_singleQuoteCharacterSet
tsce_characterSetRequiringSingleQuotes
tsce_periodCharacterSet
tsce_internationalWhitespaceAndNewlineCharacterSet
tsce_internationalColonCharacterSet
tsce_dollarSignCharacterSet
tsce_listDelimiterCharacterSet
raiseUnknownFunctionErrorForString:
timePortionOfDateTimeFormatString:
datePortionOfDateTimeFormatString:
initWithFormatString:
raiseInvalidTokenInFormulaError
initWithValues:gridKind:isFlattened:dimensions:
initWithValues:gridKind:isFlattened:
ownerIsRegistered:
referenceToNonexistentTableError:
formulaResultForFormattedValue:context:suppressCycleCheck:formatAsPercent:
tsce_dateWithSerialNumber:dateMode:
XLImportDateMode
durationNotAllowedError:argumentNumber:
locale
tsce_stringByFoldingForNamedReferenceMatchingWithLocale:
nodeForName:createIfMissing:
foldName:
insertFoldedName:
initWithLocale:
setLocale:
insertName:
containsName:
removeName:
enumerateNamesMatchingPrefix:block:
_root
_locale
copy
valueAtCoord:
topLeftCoord
compressToZeroBased
initWithValueGrid:
preferredFormatOptions:
commonInit
context
initWithContext:
dependencyTracker
isEmptyForDirtying
dirtyAllCellsInOwnerId:
willModify
dirtyInternalRangeRef:
timeIntervalSinceNow
beginBatchingGroupCellDirtying
endBatchingGroupCellDirtying
shouldCleanGraphForConsistencyViolation
setShouldCleanGraphForConsistencyViolation:
_flushDirtyOwnerIdsWithDepTracker:startTime:timeout:
_flushCellRefSetWithDepTracker:startTime:timeout:
_flushDependentOnlyCellRefSetWithDepTracker:startTime:timeout:
_flushRangeRefsWithDepTracker:startTime:timeout:
_flushInternalCellRefSetWithDepTracker:startTime:timeout:
flushDirtyReferencesForSeconds:
setCalculationEngine:
setShouldPerformDetectAndRepairConsistencyViolations:
isEmptyForArchiving
dirtyAllCellsInOwner:
dirtyCellRef:
dirtyInternalCellRef:
dirtyOnlyDependentsOfCellRef:
dirtyCoords:inOwnerId:
dirtyCellRefs:
dirtyInternalCellRefs:
dirtyCellRefsInReferenceSet:
dirtyRangeRef:
hasDirtyingToPerformForOwnerId:
flushCellDirtier
flushAllDirtyReferences
addInProgressCalcCellRefs:
isInProgressCalcIntCellRef:
numberOfInProgressCalcCellRef
clearInProgressCalcCellRefs
loadFromUnarchiver:
saveToArchiver:
shouldPerformDetectAndRepairConsistencyViolations
debugOnly_DidDetectAndRepairConsistencyViolations
debugOnly_DidCleanGraphForConsistencyViolation
_dirtyingMutex
_calcEngine
_cellRefDirtier
_toDirtyOwnerIds
_toDirtyInternalCellRefs
_toDirtyCellRefs
_toDirtyDependentsOnlyCellRefs
_toDirtyRangeRefs
_shouldPerformDetectAndRepairConsistencyViolations
_shouldCleanGraphForConsistencyViolation
_calcCellsInProgress
_debugOnly_DidDetectAndRepairConsistencyViolations
_debugOnly_DidCleanGraphForConsistencyViolation
T@"TSCECalculationEngine",R,N,V_calcEngine
TB,N,V_shouldPerformDetectAndRepairConsistencyViolations
TB,N,V_shouldCleanGraphForConsistencyViolation
TB,R,N,V_debugOnly_DidDetectAndRepairConsistencyViolations
TB,R,N,V_debugOnly_DidCleanGraphForConsistencyViolation
messageWithDescriptor:
messageWithNewFunction:descriptor:
columnUids
rowUids
setIsRangeRef:
setPreserveRectangularRange:
setPurpose:
purpose
isRangeRef
preserveRectangularRange
saveToArchive:columnUids:rowUids:purpose:isRangeRef:preserveRectangularRange:
p_remapUidVector:usingUidMap:clearIfMissing:
stringForPurpose:
saveToArchive:tsuColumnUids:tsuRowUids:purpose:isRangeRef:preserveRectangularRange:
initWithPurpose:
initWithColumnUid:rowUid:purpose:
initWithColumnUids:rowUids:purpose:
initWithArchive:
saveToArchive:
spansAllColumns
spansAllRows
remapUsingUidMap:
remapUsingColumnUidMap:rowUidMap:clearIfMissing:
_columnUids
_rowUids
_purpose
_isRangeRef
_preserveRectangularRange
TB,N,V_isRangeRef
TB,N,V_preserveRectangularRange
TC,N,V_purpose
T^v,R,V_columnUids
T^v,R,V_rowUids
appendColumnUid:rowUid:
appendUidTract:
setPreserveFlags:
firstTractWithPurpose:
addToIncludedUidsTractColumnUids:rowUids:
includedUidsTract
initWithUUIDVector:
addUuidsFromVector:
uuidsAsVector
dropTract:
addTractAtFront:
addToIncludedUidsTractColumnUids:rowUids:isRangeRef:preserveRectangularRange:
excludedUidsTract
removeUuidsFromVector:
removeFromExcludedUidsTractColumnUidsSet:
removeFromExcludedUidsTractRowUidsSet:
insertObject:atIndex:
removeObjectIdenticalTo:
tractCount
lastObject
removeLastObject
removeObjectAtIndex:
preMergeUidTract
preMoveRegionUidTract
activeUidTract
removedByMoveUidTract
addToIncludedUidsTractColumnUid:rowUid:
addToExcludedUidsTractColumnUids:
addToExcludedUidsTractRowUids:
addToExcludedTractUids:isRows:
removeFromExcludedUidsTractColumnUids:
removeFromExcludedUidsTractRowUids:
uidTractAtIndex:
pruneMergeUidTractsAtAndAboveIndex:
_preserveFlags
_tracts
T{TSUPreserveFlags=C},N,V_preserveFlags
initAsFullTupleForColumnHeaderUid:rowHeaderUid:aggregateRuleUid:flatteningDimension:
addRowColumnRuleValuePair:valueUid:
hasFullTupleInformation
columnHeaderUid
rowHeaderUid
aggregateRuleUid
flatteningDimension
enumerateRowColumnRuleValuePairsUsingBlock:
initWithInitialCapacity:
malloc:
reset
_head
_curBlock
_blockOffset
_managedNodeArrays
tableUIDHistory
tableUIDMap
fromTableUID
tableUID
isForTable:
groupByRootUid
getCellRefs:inGroupBy:
addCellRef:usingCategoryRef:
removeCellRef:usingCategoryRef:
removeAllCellRefsInOwner:
getCellRefs:referringToGroupNodes:inGroupBy:
getCellRefs:forGroupRootInGroupBy:
getCellRefs:inGroupBys:
initFromArchive:
encodeToArchive:
upgradeGroupByUid:toUid:
_cellRefsByGroupNodeByGroupBy
_groupNodesByCellRef
hasAnyDateArgumentsToFunction:
addIndexes:
initWithTableUID:summaryColumns:summaryRows:labelRows:
mapBaseRow:toViewRow:
mapSummaryRow:toViewRow:
mapBaseColumn:toViewColumn:
mapSummaryColumn:toViewColumn:
initWithTableUID:
isIdentityMapping
viewColumnIndexForChromeColumnIndex:
baseColumnIndexForViewColumnIndex:
viewRowIndexForChromeRowIndex:
baseRowIndexForViewRowIndex:
viewColumnIndexForBaseColumnIndex:
chromeColumnIndexForViewColumnIndex:
viewRowIndexForBaseRowIndex:
chromeRowIndexForViewRowIndex:
containsIndex:
countOfIndexesInRange:
enumerateRangesUsingBlock:
removeIndex:
shiftIndexesStartingAtIndex:by:
addIndex:
enumerateIndexesUsingBlock:
viewColumnIndexesForBaseColumnIndexes:
baseColumnIndexForChromeColumnIndex:
baseRowIndexForChromeRowIndex:
chromeColumnIndexForBaseColumnIndex:
chromeRowIndexForBaseRowIndex:
summaryColumnIndexForViewColumnIndex:
summaryRowIndexForViewRowIndex:
viewColumnIndexForSummaryColumnIndex:
viewRowIndexForSummaryRowIndex:
baseCellCoordForChromeCellCoord:
baseCellCoordForViewCellCoord:
chromeCellCoordForBaseCellCoord:
chromeCellCoordForViewCellCoord:
viewCellCoordForBaseCellCoord:
viewCellCoordForChromeCellCoord:
viewTractRefForChromeTractRef:
baseTractRefForViewTractRef:
columns
baseColumnIndexesForViewColumnIndexes:
rows
baseRowIndexesForViewRowIndexes:
initWithColumns:rows:tableUID:
setSpansAllRows:
setSpansAllColumns:
topLeft
bottomRight
preserveRectangular
setPreserveRectangular:
viewTractRefForBaseTractRef:
chromeTractRefForViewTractRef:
chromeColumnIndexesForViewColumnIndexes:
chromeRowIndexesForViewRowIndexes:
viewRowIndexesForBaseRowIndexes:
viewColumnIndexesForChromeColumnIndexes:
viewRowIndexesForChromeRowIndexes:
sourceIndexes
firstIndex
lastIndex
initWithStartIndex:endIndex:
swapIndex:withIndex:
enumerateMappingFollowingSwapsUsingBlock:
summaryCellCoordForViewCellCoord:
viewCellCoordForSummaryCellCoord:
baseCellRefForChromeCellRef:
baseCellRefForViewCellRef:
chromeCellRefForBaseCellRef:
chromeCellRefForViewCellRef:
viewCellRefForBaseCellRef:
viewCellRefForChromeCellRef:
chromeRangeRefForViewRangeRef:
viewRangeRefForChromeRangeRef:
baseTractRefForChromeTractRef:
chromeTractRefForBaseTractRef:
baseShuffleMapForViewShuffleMap:
chromeCoordsAreViewCoords
setChromeCoordsAreViewCoords:
TB,N
initWithTableUID:summaryRows:labelRows:
_isIdentityMapping
_chromeCoordsAreViewCoords
_tableUID
_baseRowToViewRow
_viewRowToBaseRow
_summaryRowIndexes
_summaryColumnIndexes
_labelRowIndexes
_summaryAndLabelRowIndexes
_baseColumnToViewColumn
_viewColumnToBaseColumn
_summaryRowToViewRow
_viewRowToSummaryRow
_summaryColumnToViewColumn
_viewColumnToSummaryColumn
TB,R,N,V_isIdentityMapping
TB,N,V_chromeCoordsAreViewCoords
absoluteCellTractRefForHostCell:
initWithAbsoluteTractRef:hostCell:
setAsRelativeWithGroupUid:
rowColumnInfo
isColumns
rewriteType
initWithIndexesInRange:
originalCellRefForRewriteType:updatedCellRef:
updatedCellRefForOriginalCellRef:
columnUIDForColumnIndex:
UIDsForRange:isRows:
isRows
rowUIDForRowIndex:
offsetForRowIndex:
updatedCellRefForRewriteType:originalCellRef:
auxRowColumnInfo
isRectangularRange
rowOrColumnUids
indexes
insertRowGapsAtIndexes:
insertColumnGapsAtIndexes:
coordMapperForTableUID:calcEngine:
insertAtUid
rowIndexForRowUID:
insertOppositeUid
addRows:
fillInRowGapsUsingIndexes:
fillInColumnGapsUsingIndexes:
uidsForIndexes:
edgeExpandUsingIndexes:forRows:
edgeExpandUsingMovingUids:tractList:
edgeExpandTractUsingIncludeUidTract:resolver:forRows:isInverse:
isAllInvalid
removeAllUuids
isSingleCellOrSpanningRange
initWithFormat:
tsce_p_initializeQuotes
rangeOfCharacterFromSet:
characterIsMember:
scannerWithString:
isAtEnd
scanUpToCharactersFromSet:intoString:
scanCharactersFromSet:intoString:
tsce_needsReferenceSingleQuoteEscaping
mutableCopyWithZone:
replaceOccurrencesOfString:withString:options:range:
insertString:atIndex:
tsce_newStringByForcingSingleQuoteEscapes:
stringByTrimmingCharactersInSet:
deleteCharactersInRange:
tsce_stringByUnescapingSingleQuotesAndGettingTrailingWhitespaceCount:
tsce_stringByUnescapingPartialQuotedStringWithEmptyQuotedStringOK:preserveTrailingUnquotedWhitespace:
tsce_stringByAddingSingleQuoteEscapes
stringByAppendingString:
hasPrefix:
ptsce_referenceComponentsSeparatedByCharacterInSet:
stringByFoldingWithOptions:locale:
tsce_replaceCharactersInSet:withString:
tsce_stringByAddingSingleQuoteEscapesIfNecessary
tsce_stringByForcingSingleQuoteEscapes:
tsce_newStringByAddingSingleQuoteEscapesIfNecessary
tsce_isSingleQuoted
tsce_stringByUnescapingPartialQuotedString
tsce_stringByUnescapingPartialQuotedStringWithEmptyQuotedStringOK:
tsce_newStringByAddingDoubleQuoteEscapesIfNecessary
tsce_stringByReplacingTabsAndNewlinesWithASingleSpace
tsce_stringByRemovingNewlines
tsce_referenceComponentsSeparatedByPathDelimiter
tsce_referenceComponentsSeparatedByColon
tsce_referenceComponentsSeparatedBySpace
hasTableUID
shuffleMap
applyMappingToIndexSet:
setRows:
cellTractRefWithUidTractList:onTable:preserveFlags:rewriteContext:
setTableUID:
indexSet
removeIndexes:
columnUid
groupLevel
aggrIndexLevel
relativeColumn
options
initWithGroupByUID:relGroupUID:absGroupUid:columnUid:aggType:groupLevel:aggrIndexLevel:preserveFlags:relativeColumn:options:
tract
columnGroupLevel
rowGroupLevel
aggregateIndexLevel
initWithTract:tableUID:preserveFlags:columnGroupLevel:rowGroupLevel:aggrIndexLevel:
raiseInvalidDateManipulationError
dateByAddingTimeInterval:
raiseComparisonTypeExceptionForLeftType:rightType:
raiseException
raiseArgumentSetUsedOutOfContextError
regexMatcherWithRegexString:caseSensitive:entireMatch:
containsMatchInString:
raiseTypeExceptionForValue:functionSpec:argumentIndex:locale:
stringFromBool:locale:
numberValueFromString:locale:outDecimalValue:outValueType:outCurrencyCode:
typeErrorForValue:functionSpec:argumentIndex:locale:
customFormat
defaultFormatData
formatString
falseString
compare:options:
addRewrittenCellAt:
hasRewrittenCellAt:
addPendingCellRemovalAt:
_rewrittenCells
_pendingCellsToRemove
stringFromDouble:locale:
defaultFormatWithFormatType:locale:
raiseInvalidCurrencyComparisonError
raiseInvalidComparisonError
raiseMismatchedCurrenciesErrorForFunctionName:
raiseDivideByZeroError
raiseZeroToPowerOfZeroError
raiseDurationNotAllowedError:argumentNumber:
relativeRows
setRelativeRows:
setColumns:
relativeColumns
setRelativeColumns:
initWithTimeIntervalSinceReferenceDate:
defaultDateTimeFormatForLocale:
compare:
localizedCaseInsensitiveCompare:toString:
transposedBodyRange
setTransposedBodyRange:
numberOfFooterRows
setNumberOfFooterRows:
_transposedBodyRange
_numberOfFooterRows
T{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}},N,V_transposedBodyRange
TI,N,V_numberOfFooterRows
initWithTableUIDMap:
originalTableUIDs
initFromMessage:
saveToMessage:
extendMappingWithTableUIDs:calcEngine:
tableWasAdded:
rollbackMappings:
_tableUIDMap
initWithGroupByUid:groupNodeUIDMap:
originalGroupNodeUIDs
groupNodeUIDMap
_groupByUid
_groupNodeUIDMap
valueAtIndex:accessContext:
initWithValues:
formatAtIndex:accessContext:
gridKind
dimensions
value
nativeType
deepType:
valueAtGridCoord:accessContext:
valueAtIndexNoThrow:accessContext:
flattenedGrid:
flattenedGridNoThrow:
containsError:evaluationContext:
error
subGridValueAtGridCoord:width:height:accessContext:
newCorrespondingAST:argIndex:bakeReferences:evaluationContext:
number:argIndex:evaluationContext:
date:argIndex:evaluationContext:
boolean:argIndex:evaluationContext:
string:argIndex:locale:
rawString:argIndex:locale:
reference:argIndex:evaluationContext:
initWithGrids:
raiseValueErrorForFunctionName:
_grids
_argumentCounts
_count
_lastReturnedIndex
_lastReturnedArgIndex
_lastReturnedSubindex
initWithValueVector:dimensions:
firstValue
valueAt1DIndex:
getHidingActionForRows:
subGridAtGridCoord:width:height:
initWithValues:gridKind:
_valueGrid
_gridKind
_isFlattened
clearResolver
hasCachedValue
cachedValueWasFetchedWithRichTextAttributes
cachedValue
scalarValueForEvalContext:permitAccessInsideMergeRegions:fetchRichTextAttributesIfPlainText:
setCachedValue:
scalarValueFromCoord:permitAccessInsideMergeRegions:fetchRichTextAttributesIfPlainText:
setCachedValueWasFetchedWithRichTextAttributes:
initWitRefValue:rangeContext:
getResolverUID
rangeCoord
tractRef
tableResolver
width
height
raiseAbortError
makeCellReferenceForOffset:apparentTractRef:
invalidReferenceError
_evalRef
_apparentTractRef
regionMovedInfo
originalSrcTableUID
srcTableUID
rowUIDForBaseRowIndex:
flattenedCellRefForCategoryRef:calcEngine:
categoryRefsForSpanningCategoryRef:
initWithCellRefVector:
dstTableUID
srcColumnUids
srcRowUids
spanningRows
spanningColumns
originalSrcColumnUids
originalSrcRowUids
dstColumnUids
dstRowUids
uidForIndex:
isInverse
dstUidForSrcUid:
columnIndexForUid:
rowIndexForUid:
dstUidForSrcUid
srcCondStyleOwnerUID
originalSrcCondStyleOwnerUID
initWithGroupByUID:relGroupUID:absGroupUid:columnUid:aggType:groupLevel:aggrIndexLevel:preserveFlags:
adjustIndexesBy:
second
initWithDouble:
initWithErrorType:
setFunctionName:
errorForErrorType:functionName:
setArgIndex:
errorType
removeObjectForKey:
argIndex1
setArgIndex1:
boolValue
numberWithBool:
raiseErrorForError:
errorDictionary
localizedStringWithFormat:
stringByAppendingFormat:
problemNodeIsCellReference
setHostTableUID:
namer
chromeNameForBaseRangeRef:namingContext:
problemExpressionString
argIndex
extraInfoNumber
maxArgsAllowed
shortValue
providedArgs
referenceArray
listSeparator
componentsJoinedByString:
valueToMatch
afterMatch
previousMatch
previousValueIsRegex
occurrence
matchesFound
lowerBound
lowerBoundInclusive
upperBound
upperBoundInclusive
doubleValue
argIndex2
argsAscending
equalityPermitted
chooseIndex
extraInfoString
unitName
dateAsTimeInterval
dateWithTimeIntervalSinceReferenceDate:
stringWithString:
problemMode
errorTypeKey
userInfo
setAttachmentErrorRaisedInTextCell:
p_DictionaryRepresentsInvalidMergeReference:
wrappedRangeRef
abortError
notReadyError
setProblemMode:
logFullBacktrace
setProblemNodeIsCellReference:
setWrappedRangeRef:
raiseErrorForInvalidReference:orString:contextEntityUID:invalidMergeReference:disqualifiedFromEndCell:
setInvalidReferenceToMerge:
setReferenceEndCellInvalid:
raiseOutOfBoundsArgumentErrorForArgument:functionName:lowerBound:lowerBoundInclusive:upperBound:upperBoundInclusive:
errorForErrorType:functionName:argIndex:
numberWithDouble:
setLowerBound:
setLowerBoundInclusive:
setUpperBound:
setUpperBoundInclusive:
setAfterMatch:
setOccurrence:
setMatchesFound:
setPreviousMatch:
setPreviousValueIsRegex:
setValueToMatch:
raiseMatchNotFoundErrorForValue:isRegex:afterMatch:previousValueToMatch:previousValueIsRegex:occurrence:matchesFound:functionName:
indirectErrorForRangeReference:hostTableUID:
setAnyReference:
setArgIndex2:
setArgsAscending:
setEqualityPermitted:
setChooseIndex:
setExtraInfoString:
setExtraInfoNumber:
setMaxArgsAllowed:
setProvidedArgs:
raiseMismatchedUnitsErrorForFunctionName:argumentNumberString:
setReferenceArray:
setUnitName:
invalidLiveStockAttributeError
notAReferenceToAFormulaError
invalidReferenceNameAttributeError
invalidHistoricalStockAttributeError
invalidLiveCurrencyAttributeError
invalidHistoricalCurrencyAttributeError
invalidHistoricalDateError
remoteDataUnavailableErrorWithAttribute:
setDateAsTimeInterval:
attachmentCount
attachmentAtAttachmentIndex:outCharIndex:
elementKind
autoNumberAttachmentError
attachmentError
errorWithDictionary:
errorForToken:
syntaxError
exceptionIsFromCalcEngine:
exceptionIsCircularReferenceError:
exceptionIsRangeUsageError:
circularReferenceError
missingRunningTotalInFieldError
missingPivotTableErrorForFunctionName:argumentNumber:
invalidAggregateColumnErrorForFunctionName:argumentNumber:
invalidGroupingColumnErrorForFunctionName:argumentNumber:
exceptionIsInvalidMergeReference:
raiseInvalidArrayContentsError
raiseNotReadyError
raiseDisallowedStockModeError:
raiseNumberErrorForFunctionName:
raiseAutoNumberAttachmentErrorInTextCell:
raiseAttachmentErrorInTextCell:
raiseValueNotAvailableErrorForFunctionName:
raiseErrorForInvalidReference:orString:contextEntityUID:
invalidMergeReference:contextEntityUID:
raiseOutOfBoundsArgumentErrorForArgument:functionName:lowerBound:lowerBoundInclusive:
raiseOutOfBoundsArgumentErrorForArgument:functionName:upperBound:upperBoundInclusive:
raiseMatchNotFoundErrorForValue:isRegex:functionName:
raiseStartNumberExceedsStringLengthErrorForFunctionName:
raiseDifferentNumberOfDataPointsErrorForFunctionName:
invalidDateManipulationError
raiseInvalidArgumentsErrorForFunctionName:argumentIndex:
raiseIndirectErrorForRangeReference:hostTableUID:
raiseNoModeError
raiseEmptyArgumentError
raiseEmptyArgumentSpecificErrorForArgumentNumber:
raiseInvalidRangeUsageErrorForReference:
raiseInvalidHyperlinkError
raiseDifferentNumberOfElementsErrorForFunctionName:
raiseUnionInsideIntersectionError
raiseCircularReferenceErrorWithReference:
raiseNotAReferenceErrorForFunctionName:
raiseNoSuitableArgumentsFoundErrorForFunctionName:requiredType:
raiseInvalidArgumentRelationshipErrorForFunctionName:argIndex1:argIndex2:argsAscending:equalityPermitted:
raiseInvalidArgumentEqualityRelationshipErrorForFunctionName:argIndex1:argIndex2:
raiseInvalidIndexForChooseError:
raiseNonEmptyStringRequiredErrorForFunctionName:
raiseStringDoesNotRepresentNumberErrorForFunctionName:string:
raiseStringDoesNotRepresentDateErrorForFunctionName:string:
raiseSignsMustMatchErrorForFunctionName:
raiseRangeDoesNotSumToOneForFunctionName:argumentNumber:
raiseUnsupportedR1C1StyleError
raiseInvalidDateError
raiseInvalidTimeError
raiseNotAVectorError
raiseInvalidProbabilityErrorForFunctionName:
raiseNumberSmallerThanZeroError
raiseArgumentEqualsToZeroErrorForFunctionName:argumentNumber:
raisePositionLargerThanArrayErrorForFunctionName:
raiseInvalidFrequencyErrorForFunctionName:argumentNumber:
raiseInvalidTypeErrorForFunctionName:argumentNumber:
raiseInvalidTailErrorForFunctionName:argumentNumber:
raiseInvalidSubtotalFunctionNumberError
raiseNumberDoesNotConvergeErrorForFunctionName:
raiseNumberDoesNotConvergeWithEstimateErrorForFunctionName:
raiseTooFewDataPointsErrorForFunctionName:
raiseDateEarlierThanStartingDateErrorForFunctionName:
raiseOnlyPositiveOrNegativeErrorForFunctionName:
raiseReferenceToEmptyCellErrorForFunctionName:rangeReference:
raiseNumberMinusDateError
raiseWrongNumberOfArgumentsErrorForFunctionName:provided:
raiseTooManyArguments:maximum:provided:
raiseMismatchedUnitsErrorForFunctionName:
raiseUnitsNotAllowedErrorForFunctionName:argumentNumber:
raiseCurrencyNotAllowedErrorForFunctionName:argumentNumber:
sumMixedDurationsAndUnitlessWithoutADateErrorForFunctionName:
raiseSumMixedDurationsAndUnitlessWithoutADateErrorForFunctionName:
raiseNotEnoughInputsErrorForFunctionName:argumentNumber:required:
raiseInvalidIntersectionError:hostTableUID:calcEngine:
raiseEmptyArrayError
raiseInvalidBaseCharacterErrorForCharacter:base:
raiseInvalidUnitStringError:
raiseDifferentDimensionsErrorForFunctionName:
raiseNonMetricUnitPrefixErrorForUnitString:
raiseConvertOriginUnitMismatchError
raiseArrayElementNoDataError
raiseDataInvalidDimensionsError
raiseDataInvalidLengthError
raiseDataInvalidWidthError
raiseNegativeReceivedAmountError
raiseInvalidMatchModeError
raiseMismatchedMaxUnitsError
raiseVectorValueNotNumberErrorForFunctionName:argumentNumber:
raiseCharInputOutOfBoundsError
raiseDurationDisallowedForNormdistPDFError
raiseLinestHighlyCorrelatedVariableError
raiseMultipleDurationsErrorForFunctionName:
raiseLinestMatrixUnderdeterminedError
raiseNegativeVectorValueErrorForFunctionName:argumentNumber:
raisePercentRankInputOutOfRangeError
raisePercentRankExcInputOutOfRangeError
raiseLocationServicesNotEnabledError
raiseLocationHeadingUnknownError
raiseLocationUnknownError
raiseLocationUserDeniedError
raiseLocationNetworkError
raiseLocationHeadingFailureError
raiseInvalidLatitudeLongitudeError
raiseInvalidAltitudeError
raiseInvalidHeadingError
raiseInvalidRegexError:
raiseStringTooLongError
raiseUnsupportedFunctionError
raiseNoConditionIsTrueErrorForFunctionName:
raiseInvalidLiveStockAttributeError
raiseNotAReferenceToAFormulaError
raiseInvalidReferenceNameAttributeError
raiseInvalidHistoricalStockAttributeError
raiseInvalidLiveCurrencyAttributeError
raiseInvalidHistoricalCurrencyAttributeError
raiseInvalidHistoricalDateError
raiseRemoteDataUnavailableErrorWithAttribute:
noTradingInformationErrorWithNextAvailableDate:
invalidStockCodeError:
invalidCurrencyPairError
remoteDataServerError
errorForRichTextStorage:outValue:
attachmentErrorRaisedInTextCell
invalidReferenceToMerge
referenceEndCellInvalid
anyReference
dateValue
stringValue
tokenString
isFromCalcEngine
isCircularReferenceError
isMismatchedUnitsError
errorIsRangeUsageError
isInvalidMergeReference
isNotReadyError
isUnsupportedFunctionError
isUnsupportedFeatureError
isErrorReferenceError
isInvalidReferenceError
deepType
numberForFunction:argumentIndex:warningReportingContext:
dateForFunction:argumentIndex:warningReportingContext:
stringForFunction:argumentIndex:warningReportingContext:
booleanForFunction:argumentIndex:warningReportingContext:
formattedGridForFunction:argumentIndex:context:format:
referenceValueForFunction:argumentIndex:warningReportingContext:
number
date
string
boolean
vector
referenceValue
isNativelyEqual:
bakedString
setErrorType:
_errorType
_errorDictionary
Tq,N,V_errorType
T@"NSString",R,N
T@"NSString",&,N
T@"NSNumber",&,N
T{TSKUIDStruct=QQ},N
T@"TSCEWrappedRangeRef",&,N
T@"NSArray",&,N
T@"TSCEAnyReference",&,N
cellDependencies
internalOwnerID
initWithCellID:dirtyPrecedentCount:
setIsFormula:
setIsInCycle:
addPrecedentWithCellID:forOwner:
addDependentWithCellID:forOwner:
addDependencyRow:
initWithOwnerId:tileColumnBegin:tileRowBegin:context:
cppTile
numCellRecords
unpackAfterUnarchiveForCellDependencies:
setInternalOwnerID:
_internalOwnerID
_tileColumnBegin
_tileRowBegin
_tile
_unarchivedCellRecords
TS,N,V_internalOwnerID
cost
first
compare:withContext:
rangeOfCharacterFromSet:options:range:
replaceCharactersInRange:withString:
tsce_appendSpaces:
setDay:
setMonth:
setYear:
initWithCalendarIdentifier:
timeZoneWithName:
setTimeZone:
dateFromComponents:
initWithTimeInterval:sinceDate:
setHour:
setMinute:
setSecond:
components:fromDate:
year
month
hour
minute
weekday
tsce_year
tsce_month
tsce_day
tsce_dateWithYear:month:day:hour:minute:second:
tsce_weekday
tsce_hour
tsce_minute
tsce_second
tsce_weekNumberForType:
tsce_mapToDouble
tsce_addObjectNonNil:
createHarmonizedDecimalFormatterOfStyle:
setFormat:
setMinFractionDigits:maxFractionDigits:
createStringWithNumber:
lock
unlock
initWithCalendarIdentifier:timeZone:
components:fromDate:toDate:options:
dateByAddingComponents:toDate:options:
dictionary
initWithBytes:length:encoding:
illegalCharacterSet
controlCharacterSet
stringWithCharacters:length:
characterSetWithRange:
setCharactersToBeSkipped:
scanLocation
dataUsingEncoding:
bytes
regexMatcherWithRegexString:caseSensitive:
numberOfMatchesInString:options:range:
rangeOfString:options:
currencyCode
defaultDecimalPlacesForCurrencyCode:
cfLocale
UTF8String
rangeOfFirstMatchInString:options:range:
rangeOfString:options:range:
numberFormatWithValueType:formatString:decimalPlaces:currencyCode:useAccountingStyle:negativeStyle:showThousandsSeparator:fractionAccuracy:
matchesInString:options:range:
range
numberOfRanges
rangeAtIndex:
regexMatcherWithStringMatch:caseSensitive:entireMatch:
stringByReplacingMatchesInString:options:range:withTemplate:
rangeOfFirstMatchInString:
rangeOfMatchInString:occurrence:matchesFound:
substringToIndex:
numberValueFromString:locale:outDecimalValue:
enumerateSubstringsInRange:options:usingBlock:
stringByReplacingOccurrencesOfString:withString:
p_recreateUIDs
verifySubOwnerUIDsUsed
nextHiddenStateForRowsOwnerUID
nextHiddenStateForColumnsOwnerUID
nextConditionalStyleOwnerUID
nextSortRuleReferenceTrackerOwnerUID
nextMergeOwnerUID
nextPencilAnnotationOwnerUID
nextCategoryAggregatesOwnerUID
nextGroupByUID
initForPivotDataTableWithMapper:
nextTableUID
hiddenStateForRowsOwnerUID
hiddenStateForColumnsOwnerUID
conditionalStyleOwnerUID
sortRuleReferenceTrackerOwnerUID
mergeOwnerUID
pencilAnnotationOwnerUID
categoryAggregatesOwnerUID
groupByUID
initWithTableUID:pasteBoardTableUID:hiddenStateOwnerForRowsUID:hiddenStateOwnerForColumnsUID:conditionalStyleOwnerUID:sortRuleReferenceTrackerOwnerUID:mergeOwnerUID:pencilAnnotationOwnerUID:categoryAggregatesOwnerUID:groupByUID:
setToIdentityMapping
setNextTableUID:
setNextHiddenStateForRowsOwnerUID:
setNextHiddenStateForColumnsOwnerUID:
setNextConditionalStyleOwnerUID:
setNextSortRuleReferenceTrackerOwnerUID:
setNextMergeOwnerUID:
setNextPencilAnnotationOwnerUID:
setNextCategoryAggregatesOwnerUID:
setNextGroupByUID:
usesAllSubOwnerUIDs
pivotDataTableMapper
initWithFormulaOwnerUID:
initWithIdentityMapping
setToUpgradeMapping
makeInverse
fullDescription
ownerUIDMap
pbTableUID
categoryOwnerUID
nextCategoryOwnerUID
setNextCategoryOwnerUID:
_nextTableUID
_hiddenStateForRowsOwnerUID
_nextHiddenStateForRowsOwnerUID
_hiddenStateForColumnsOwnerUID
_nextHiddenStateForColumnsOwnerUID
_conditionalStyleOwnerUID
_nextConditionalStyleOwnerUID
_sortRuleReferenceTrackerOwnerUID
_nextSortRuleReferenceTrackerOwnerUID
_mergeOwnerUID
_nextMergeOwnerUID
_pencilAnnotationOwnerUID
_nextPencilAnnotationOwnerUID
_categoryAggregatesOwnerUID
_nextCategoryAggregatesOwnerUID
_groupByUID
_nextGroupByUID
_pbTableUID
_uidMap
_categoryOwnerUID
_nextCategoryOwnerUID
T{TSKUIDStruct=QQ},R,N,V_pbTableUID
T{TSKUIDStruct=QQ},R,N
T{TSKUIDStruct=QQ},R,N,V_categoryOwnerUID
T{TSKUIDStruct=QQ},N,V_nextCategoryOwnerUID
initWithBase:basePlaces:baseUseMinusSign:
foreachUuid:
verifySpanningSettings
initWithNodeArray:
descriptionForLevel:
addUUID:
initWithTableUID:preserveFlags:
repairSpanningColumnSetting
repairSpanningRowSetting
subtotalPrecedentForTableUID:
cellDependentsOfCell:
addValue:function:evaluationContext:
resultForFunction:
foundANumber
dateAccumulator
numberAccumulator
relativeTopLeft
relativeBottomRight
addIndexesInRange:
boundingRange
mutableIndexesForUIDs:isRows:
indexLessThanIndex:
enumerateRangesInRange:options:usingBlock:
indexGreaterThanIndex:
UIDsForIndexes:isRows:
containsUuid:
defaultDateOnlyShortFormatForLocale:
standaloneWeekdaySymbols
initWithUseAutomaticUnits:durationUnitSmallest:durationUnitLargest:durationStyle:
standaloneMonthSymbols
arrayWithCapacity:
sortUsingSelector:
isEqualToDate:
timeIntervalSinceDate:
currentDate
currentTimeZoneCalendar
dateWithIdenticalComponentsInGMTForDate:
extractComponentsFromDate:year:month:day:
earlierDate:
laterDate:
indexIsAffected:
uuidForIndex:
rowOrColumnIndices
uuidsForIndexes:
mutableColumnIndexesForUIDs:
indexSetWithIndexesInRange:
mutableRowIndexesForUIDs:
isEqualViaFormattingAsDouble::
documentRoot
arrayWithObject:
replaceObjectAtIndex:withObject:
initAffineWithMappings:xs:ys:xDimension:
initNonAffineWithMappings:xs:ys:xDimension:desiredIntercept:
coefficientAtIndex:
coefficientStandardErrorAtIndex:
rSquared
standardError
fStatistic
degreesFreedom
regressionSumSquares
errorSumSquares
arrayWithArray:
standardUserDefaults
dictionaryRepresentation
descriptionWithLocale:
filteringChangedPrecedentForTableUID:
userHiddenChangedPrecedentForTableUID:
numberOfItems
setTrailingWhitespace:
isArray
trailingWhitespace
appendNodeArray:
makeListWithFirstElem:trailingWhitespace:isArray:
arrayOrListNode:
functionNode:functionName:whitespaceAfterLabel:
_nodeArrays
_trailingWhitespace
_isArray
T@"NSString",&,N,V_trailingWhitespace
TB,R,N,V_isArray
TI,R,N
initWithCriterion:functionSpec:evaluationContext:
setDate:
setMatcher:
criteriaParser:
setString:
regexMatcherWithStringMatch:
matcher
evaluationContext
setEvaluationContext:
_operation
_value
_string
_date
_matcher
_evaluationContext
T@"TSCERegexMatcher",&,N,V_matcher
T^v,N,V_evaluationContext
T@"NSString",&,N,V_string
T@"NSDate",&,N,V_date
mValue
stringWithCapacity:
referenceIsValid:
sheetTableNamePrecedentForTableUID:
formulaDefinitionPrecedentForTableUID:
groupByChangedPrecedentForTableUID:
headerNameMgr
emptyReferenceSetWrapper
const_astNodeArray
baseHeaderColumnsForCell:
baseHeaderRowsForCell:
newArrayByScanningString:scanRange:
objectAtIndexedSubscript:
rangeValue
URLFragmentAllowedCharacterSet
stringByAddingPercentEncodingWithAllowedCharacters:
stylesheet
theme
defaultListStyle
initWithContext:string:kind:stylesheet:paragraphStyle:listStyle:section:columnStyle:
initWithContext:url:
addSmartField:toRange:dolcContext:undoTransaction:
hyperlinkStyle
setCharacterStyle:range:undoTransaction:
initWithContextTableResolver:
setTrimNames:
setReferenceIsComplete:
setParseAsBaseTableReference:
setReferencesMatchingInputAsPrefix:
refParser
parseStringAsBaseReference:withParsingContext:
namesUsed
referencesMatchingInputAsPrefix
sheetName
tableName
parseR1C1Reference:containingCell:preserveFlagsOut:
nameFragmentPrecedentsForReferenceString:
namedReferenceManager
formulaOwnerUID
parseStringAsCategoryRef:withParsingContext:
aggregateTypeForCategoryRef:
cellRefsForCategoryRef:atRowUid:
valuesForCategoryRef:atRowUid:hidingActionMask:error:
setContextSheetName:
setAllowTableName:
setShowGeometricAsBase:
setQuoteComponents:
setForceSheetName:
setForceTableName:
setSuppressIdenticalEndReference:
setAllowSpanningColumnReferenceBodyQualifier:
setUseSymbolicNames:
initWithCppCellTractRef:
nameForViewTractRef:namingContext:coordMapper:
nameForBaseTractRef:namingContext:
setAggregateFieldName:
addDataField:withValue:
firstMissingDataField
componentsSeparatedByString:
hasSuffix:
foreachAnyRef:
setPreserveFlagsOnSubrange:
foreachCellRect:
addCellCoordinate:
cellCoordinates
cellCoordinatesSet
removeAllCellCoordinates
_cellCoordinates
_sem
addValuesForDimension:
enumerateCombinationsWithBlock:
_valuesForDimension
uuidsInRange:
uuidForTableUID:andIndex:direction:
indexSetBySubtractingOurIndexesFromIndexSet:
boundingRangeRef
collapseOutRowIndexes:
collapseOutColumnIndexes:
addFormula:atCellRef:
formulaOwnerUIDs
foreachFormula:
ownerKind
setOwnerKind:
_ownerKind
_formulas
_nonFormulaCells
_formulaOwnerUIDs
TS,N,V_ownerKind
addFormulaObject:atCellRef:forOwnerKind:
initWithArchive:isPreUFF:
ownerUIDsForOwnerKind:
allOwnerKinds
subsetForOwnerKind:
countForOwnerKind:
splitIntoChunksForExcessiveSize
foreachFormulaInOwnerKind:performBlock:
saveToArchive:archiver:
addFormulaString:atCellRef:
formulaStringAtCellRef:
_formulasForOwnerKind
_formulaStringsForCellRefs
mergeLeftRef:rightRef:outError:
absoluteCellTractRefForHostCell:offTable:
cppCellTractRef
initWithTableResolver:tractRefCore:
argSpecWithType:accessorMode:rangeContext:
argSpecWithType:accessorMode:rangeContext:minValue:minInclusive:maxValue:maxInclusive:disallowedTypes:disallowDuration:disallowCurrency:
argSpecWithType:accessorMode:rangeContext:argumentContext:minValue:minInclusive:maxValue:maxInclusive:isInteger:disallowedTypes:disallowDuration:disallowCurrency:modeValues:defaultModeIndex:referenceForGeometryOnly:forceArrayMode:
argSpecWithType:accessorMode:rangeContext:disallowedTypes:disallowDuration:disallowCurrency:
argSpecWithType:accessorMode:rangeContext:modeValues:defaultModeIndex:
argSpecWithType:accessorMode:rangeContext:argumentContext:
argSpecWithType:accessorMode:rangeContext:argumentContext:disallowedTypes:referenceForGeometryOnly:
initWithRegexString:caseSensitive:entireMatch:
initWithPattern:options:error:
initWithString:caseSensitive:entireMatch:
enumerateMatchesInString:options:range:usingBlock:
regexMatcherWithRegexString:
rangeOfMatchInString:occurrence:
regularExpression
_regularExpression
T@"NSRegularExpression",R,N,V_regularExpression
addUuidsFromSet:
removeUUID:
numberOfRows
numberOfColumns
columnUIDForBaseColumnIndex:
valueGridForCategoryRef:atRowUid:hidingActionMask:error:
ownerKindForOwnerUID:
cellIsInACycle:
aggregateRangeRefForCategoryRef:
requiresDocumentVersion:
tsp_protobufString
tsp_stringWithProtobufString:
addRelativeColumnRange:
addRelativeRowRange:
addColumnRange:
addRowRange:
contextSheetName
hostTableUID
suppressIdenticalEndReference
useSymbolicNames
allowTableName
allowSpanningColumnReferenceBodyQualifier
showGeometricAsBase
quoteComponents
forceEscaping
setForceEscaping:
forceTableName
forceSheetName
forFormulaPlainText
setForFormulaPlainText:
usedSymbolicName
setUsedSymbolicName:
_suppressIdenticalEndReference
_useSymbolicNames
_allowTableName
_allowSpanningColumnReferenceBodyQualifier
_showGeometricAsBase
_quoteComponents
_forceEscaping
_forceTableName
_forceSheetName
_forFormulaPlainText
_usedSymbolicName
_contextSheetName
_hostTableUID
T@"NSString",&,N,V_contextSheetName
T{TSKUIDStruct=QQ},N,V_hostTableUID
TB,N,V_suppressIdenticalEndReference
TB,N,V_useSymbolicNames
TB,N,V_allowTableName
TB,N,V_allowSpanningColumnReferenceBodyQualifier
TB,N,V_showGeometricAsBase
TB,N,V_quoteComponents
TB,N,V_forceEscaping
TB,N,V_forceTableName
TB,N,V_forceSheetName
TB,N,V_forFormulaPlainText
TB,N,V_usedSymbolicName
keyValuePairCount
setMissingDataFieldAtIndex:
enumerateDataKeyValuePairsUsingBlock:
combinedDataValuesWithLocale:
aggregateIndex
setAggregateIndex:
aggregateFieldName
aggregateType
setAggregateType:
showAsType
setShowAsType:
_dataFields
_dataValues
_missingGroupingColumn
_aggregateType
_showAsType
_aggregateIndex
_aggregateFieldName
T@"NSString",&,N,V_aggregateFieldName
TS,N,V_aggregateIndex
TC,N,V_aggregateType
TC,N,V_showAsType
isStringValidArgumentToken:
tableRangeOfTable
coordinate
initWithCellRef:
cellRef
invalidCellRef
initWithCellCoord:tableUID:
initWithCellCoord:tableID:
tableID
_cellRef
T{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}},R,N,V_cellRef
T{TSUCellCoord=ISBB},R,N
T@"NSUUID",R,&,N
invalidRangeRef
initWithRangeCoord:tableUID:
initWithRangeCoord:tableID:
initWithRangeRefRect:tableID:
_rangeRef
T{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}},R,N,V_rangeRef
T{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}},R,N
setWarnWhenFormulasReferToEmptyCells:
mWarnWhenFormulasReferToEmptyCells
setWithCapacity:
unionSet:
numColumns
numRows
removeColumnRange:
removeRowRange:
addColumn:
addRow:
setMixedColumnStartedWithPreserve:
setMixedRowStartedWithPreserve:
preserveFlagsFixingInversionsForTract:absFromRelColumns:absFromRelRows:
initWithRangeRef:hostCell:
numRelativeColumns
numRelativeRows
addRelativeColumn:
addRelativeRow:
removeRelativeColumnRange:
removeRelativeRowRange:
relativeBoundingRangeWithContainingCell:
adjustRelativeIndexesBy:
_absTractRef
_relativeColumns
_relativeRows
T{TSUPreserveFlags=C},R,N
p_reserve:
intersectsSet:
anyUuid
p_addUUID:
p_removeUUID:
p_addUUIDs:
p_removeUUIDs:
p_addUUIDsFromVector:
p_removeUUIDsFromVector:
initWithUUIDSet:
initWithUUID:
initWithTSUUUIDVector:
uuidsAsTSUVector
isSubsetOf:
setByUnionWithSet:
expandedSetWithUuid:
reducedSetMinusUuid:
expandedSetWithUuids:
reducedSetMinusUuids:
expandedSetWithUuidsFromVector:
reducedSetMinusUuidsFromVector:
_uuidSet
addUUIDs:
removeUUIDs:
addUuidsFromSetReturningAdded:
removeUuidsFromSet:
removeUuidsFromSetReturningRemoved:
remapWithMap:
reserve:
affectedOwnerUID
rowOrColumnUuids
tsu_intersectsIndexesInIndexSet:
UIDForIndex:isRows:
setTopLeft:
setBottomRight:
isEqualToTSCEFormulaOwnerWrapper:
Tr^{TSKUIDStruct=QQ},R,N
lowercaseString
specifierWithFunctionIndex:symbol:attribute:year:month:day:
valueForRemoteData:
attribute
uppercaseStringWithLocale:
specifierWithFunctionIndex:symbol:attribute:
transposedInfo
transpose
mapOwnerUID:
useAutomaticUnits
durationUnitSmallest
durationUnitLargest
durationStyle
decimalPlaces
negativeStyle
showThousandsSeparator
accountingStyle
initWithFormatType:decimalPlaces:negativeStyle:showSeparator:
initWithDecimalPlaces:negativeStyle:showSeparator:accountingStyle:currencyCode:
fractionAccuracy
initWithFractionAccuracy:
base
basePlaces
baseUseMinusSign
formatType
asCurrencyFormat
asNumberFormat
asDurationFormat
asFractionFormat
asBaseFormat
asBooleanFormat
trueString
booleanFormat
customFormatKey
asDateTimeFormat
asCustomFormatWrapper
currencyCodeForValue:
addRect:fromCoord:
initWithOwnerId:context:
numRangeRecords
removeRect:fromCoord:
containsFromCoord:
containsRect:fromCoord:
removeRectsForFromCoord:
enumerateAllRangesForFromCoord:usingBlock:
enumerateAllRanges:
toInternalOwnerID
_toInternalOwnerID
_fromCoordToReferRect
TS,R,N,V_toInternalOwnerID
_argSpec
mergeInfo
mergeRegion
condStyleOwnerUID
topLeftCellCoord
mergeSource
invertedSet
rangeOfCharacterFromSet:options:
removeObjectsInRange:
initWithGroupByUID:absGroupUid:columnUid:aggType:groupLevel:aggrIndexLevel:
refersToPivotTable
isRelativeAncestorGroupUid:
relativeLevelOfAncestorGroupUid:
relativeAncestorGroupUid:
initWithGroupByUID:absGroupUid:columnUid:aggType:groupLevel:
pivotTableUid
refersToPivotTableRows
refersToPivotTableColumns
showAggregateName
setShowAggregateName:
convertToBadRef
restoreFromBadRef
setColumnUid:
setGroupLevel:
setAggrIndexLevel:
setRelativeColumn:
setOptions:
_columnUid
_relativeGroupUid
_absoluteGroupUid
_aggType
_groupLevel
_aggrIndexLevel
_relativeColumn
_options
T{TSKUIDStruct=QQ},N,V_groupByUid
T{TSKUIDStruct=QQ},N,V_relativeGroupUid
T{TSKUIDStruct=QQ},N,V_absoluteGroupUid
T{TSKUIDStruct=QQ},N,V_columnUid
TC,N,V_aggType
TC,N,V_groupLevel
TS,N,V_aggrIndexLevel
Ts,N,V_relativeColumn
TC,N,V_options
receivers
didAddTableName:forTableUID:
distributeBlock:
didRemoveTableName:forTableUID:
didChangeTableName:fromTableName:forTableUID:
protocol
initWithCalcEngine:tableUID:topLeft:bottomRight:preserveFlags:
initWithTableResolver:topLeft:bottomRight:preserveFlags:
bodyRangeOfTable
makeCellReferenceInSameTable:
format:
canonicalCellReferenceForReference
_tableResolver
_tractRef
_cachedValue
_cachedValueWasFetchedWithRichTextAttributes
T^{TSCETableResolver=^^?},R,N
T{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}},R,N
T{shared_ptr<TSCEValue>=^{TSCEValue}^{__shared_weak_count}},N,V_cachedValue
TB,N,V_cachedValueWasFetchedWithRichTextAttributes
registerWithCalcEngine:
trackedReferencesExistForTable:
beginTrackingNamesInTable:limitedToRange:
beginTrackingNamesInRange:ofTableUID:addingTrackedReferencesTo:
endTrackingNamesInTableForLegacyNRM:
beginTrackingNameInCell:ofTableUID:addingTrackedReferencesTo:
beginTrackingReferenceWithCellRef:
allTrackedReferences
referencesForCalcEngine:referenceTrackerUID:
endTrackingReference:
setStrongReference:message:
registerOwnerWithOwnerUID:owner:referenceResolver:baseOwnerUID:ownerKind:
unregisterOwner:
beginTrackingReference:calcEngine:
beginTrackingReference:
endTrackingReference:calcEngine:
trackedReferenceAtCoord:
corruptCellRefs
formulaOwnerUIDForInternalFormulaOwnerID:
ownerKindForOwnerID:
refersToCellRefForCalculationEngine:referenceTrackerUID:
endTrackingNamesInTable:
beginTrackingNamesInTable:
resetCorruptCellRefs:
linkedResolver
evaluationMode
writeResultsForCalcEngine:
invalidateForCalcEngine:
evaluateFormulaAt:withCalcEngine:recalcOptions:
multiEvaluateFormulasAt:withCalcEngine:recalcOptions:
initWithContext:calculationEngine:
updateTrackedHeaders:
unregisterFromCalcEngine
formulaOwner
setFormulaOwnerUID:
setCalcEngine:
_trackedRefsStore
_weakTrackedRefsStore
_isRegisteredWithCalculationEngine
T@"TSCECalculationEngine",W,V_calcEngine
readReferenceMessage:class:protocol:completion:
rangeOfComposedCharacterSequencesForRange:
isLeftParen:
isRightParen:
trimmedStringWithPreserveFlag:
initWithRawString:
trimmedString
quoteStringIfNeeded
wasQuoted
setWasQuoted:
hasPreserveFlag
setHasPreserveFlag:
rawString
setRawString:
_wasQuoted
_hasPreserveFlag
_rawString
TB,N,V_wasQuoted
TB,N,V_hasPreserveFlag
T@"NSString",&,N,V_rawString
trimmedStringStartingAtWord:withPreserveFlags:
addRefPathWord:
removeRefPathWordAtIndex:
numWords
wordAtIndex:
trimmedStringStartingAtWord:
_refPathWords
isSingleQuote:
splitRefPath:
initWithReferenceString:
componentAtIndex:
refPathInterestingCharactersSet
isSingleQuotePair:ch2:
isDollar:
isColon:
initWithComponents:aggregateFunction:
addComponent:
numComponents
localizedBlankGroupName
setLocalizedBlankGroupName:
localizedErrorGroupName
setLocalizedErrorGroupName:
localizedTrueGroupName
setLocalizedTrueGroupName:
localizedFalseGroupName
setLocalizedFalseGroupName:
localizedTrueGroupNameForColumn
setLocalizedTrueGroupNameForColumn:
localizedFalseGroupNameForColumn
setLocalizedFalseGroupNameForColumn:
forceSplitting
setForceSplitting:
_quotedComponents
_forceSplitting
_localizedBlankGroupName
_localizedErrorGroupName
_localizedTrueGroupName
_localizedFalseGroupName
_localizedTrueGroupNameForColumn
_localizedFalseGroupNameForColumn
T@"NSString",&,N,V_localizedBlankGroupName
T@"NSString",&,N,V_localizedErrorGroupName
T@"NSString",&,N,V_localizedTrueGroupName
T@"NSString",&,N,V_localizedFalseGroupName
T@"NSString",&,N,V_localizedTrueGroupNameForColumn
T@"NSString",&,N,V_localizedFalseGroupNameForColumn
TB,N,V_forceSplitting
nameForChromeRangeRef:namingContext:
p_stringByUnescapingQuotedStringWithPossibleDollarPrefix:partial:
rangeReference
referenceTextWithCalculationEngine:contextSheetName:
anyRef
referenceTextForAutocompleteWithCalculationEngine:hostTableUID:preserveFlags:inputString:inputStringIsComplete:
referenceTextForAutocompleteWithCalculationEngine:contextSheetName:preserveFlags:inputString:inputStringIsComplete:
overrideText
setOverrideText:
overrideTextAsTyped
setOverrideTextAsTyped:
wasConstructedViaNames
setWasConstructedViaNames:
_ref
_overrideText
_overrideTextAsTyped
_wasConstructedViaNames
T@"NSString",C,V_overrideText
T@"NSString",C,V_overrideTextAsTyped
TB,N,V_wasConstructedViaNames
T{TSCEAnyRef=S{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}C}{TSKUIDStruct=QQ}B@},R,N
T@"TSCEWrappedRangeRef",R,N
extractComponentsFromDate:year:month:day:hour:minute:second:
_calendar
validatedLoadFromUnarchiver:
formulaID
mAST
mFormulaID
storageByApplyingCustomFormat:
initWithContext:string:stylesheet:kind:
insertStorage:atCharIndex:dolcContext:undoTransaction:
copyStorageUnpersisted:
copyPersistedWithContext:
paragraphStyleAtParIndex:effectiveRange:
propertyMap
properties
filterWithProperties:
characterStyleAtCharIndex:effectiveRange:
addValuesFromPropertyMap:
initWithContext:name:overridePropertyMap:isVariation:
paragraphCount
wpKind
textRangeForParagraphAtIndex:
setParagraphStyle:forCharRange:undoTransaction:
insertString:atCharIndex:undoTransaction:
replaceCharactersInRange:withStorage:usePasteRules:dolcContext:undoTransaction:
replaceCharactersInRange:withString:undoTransaction:
canBeStoredInAStringValueCell
newSubstorageWithRange:context:flags:
uppercaseWithUndoTransaction:locale:
lowercaseWithUndoTransaction:locale:
capitalizeWithUndoTransaction:locale:
capitalizedString
mergeOriginMovedInfo
mergeOriginsMap
initWithTract:tableUID:preserveFlags:
setTract:
isValidOrSpanning
isFixedAtZeroRef
setAggregateIndexLevel:
setColumnGroupLevel:
setRowGroupLevel:
_tract
_aggregateIndexLevel
_columnGroupLevel
_rowGroupLevel
T@"TSCEUndoTract",&,N,V_tract
T{TSKUIDStruct=QQ},N,V_tableUID
TS,N,V_aggregateIndexLevel
TC,N,V_columnGroupLevel
TC,N,V_rowGroupLevel
initWithCreator:
tsceValue
evaluateWithContext:
newCellValueFromTSCEValue:withLocale:
initWithBaseTableUID:ownerUID:
nowPrecedentForTableUID:
todayPrecedentForTableUID:
randomPrecedentForTableUID:
localePrecedentForTableUID:
anyHeaderNameChangedPrecedentForTableUID:
summaryModelIsCleanPrecedentForTableUID:
summaryModelIsCleanForSortPrecedentForTableUID:
pivotRulesChangedPrecedentForTableUID:
uniqueDistinctPrecedentForTableUID:
setBaseTableUID:
initWithBaseTableUID:
dirtyNowVolatileCells
dirtyNowAndTodayVolatileCells
dirtyRandomVolatileCells
dirtyGeometryVolatileCells
dirtySheetTableNameVolatileCells
initWithArchive:unarchiver:forBaseTableUID:
baseTableUID
_baseTableUID
T{TSKUIDStruct=QQ},N,V_baseTableUID
initWithSecondsTillAbort:
isAborted
_isAborted
TB,R,V_isAborted
p_addApplicationNotification
p_removeApplicationNotification
resolverContainerMatchingName:inDocumentRoot:
resolverMatchingName:inDocumentRoot:contextResolver:
resolverMatchingNameWithContextContainer:inDocumentRoot:contextContainerName:
timeoutInterval
blockingIdentifier
accessController
signalIdentifier:
referencesToDirty
pauseRecalculationForBlock:
localVariablesEnabled
pauseEvaluationForPotentialTermination
confirmTermination
resumeEvaluationIfNotTerminated
isPotentiallyTerminating
generateRandomSeed
randomSeedFromRandomLo:hi:
splitRandomSeed:intoLo:hi:
legacyGlobalIDStringToOwnerUIDMap
documentRandomSeed
setDocumentRandomSeed:
setCurrentDate:
currentTimeZone
setCurrentTimeZone:
setCurrentDate:timeZone:markVolatilesDirty:
shouldAbortRecalculation
setXLImportDateMode:
currentTransaction
previousLocaleIdentifier
clearPreviousLocaleIdentifier
loadFromFileVersion
setLoadFromFileVersion:
tablesByName
tableNameChangeDistributor
currentTableIdRemapper
setCurrentTableIdRemapper:
duringRollback
setDuringRollback:
applicationDidBecomeActive:
applicationWillResignActive:
setAccessController:
changeNotifier
setChangeNotifier:
documentDidLoad
isInCollaborationMode
recalculateWithTimeout:
dirtyCellsForUpgrade
upgradingFormulasMinion
beginUpgradingFormulasMode
scheduleRepairingSpanningFormulasInOwner:
setTableRange:bodyRange:forTableUID:
verifyTableAndBodyRangesForTable:
ownerForOwnerUID:
ownerForUUIDBytes:
allOwnersRegistered
shouldForceRegisterAllTables
allRefResolverOwnerUIDs
enumerateFormulaOwnersUsingBlock:
cellDependMemoryUseEstimate
clearLegacyGlobalIDs
needsSubOwnerIDUpgrade
setNeedsSubOwnerIDUpgrade:
addSubOwnerAliasesForUpgrade:
upgradeToSubOwnerUIDForOwners:
duringSubOwnerUIDUpgrade
resolverForCellRef:
anyResolver
resolverForTableID:
tableResolverForTableID:
tableResolverForRefResolver:
internalFormulaOwnerIDForFormulaOwnerUID:
resolverContainerMatchingName:
resolverMatchingName:contextResolver:
resolverMatchingNameWithContextContainer:contextContainerName:
setOwnerUIDForLegacyGlobalID:ownerUID:
openTransaction
closeTransaction:
updateCalculatedPrecedents:forFormula:atCellRef:withState:
removeFormulasFromRange:
setError:forCell:
clearErrorForCell:
clearErrorForCells:
rootCauseForErrorInCell:atRootCell:
formulaCoordsReferringToRange:fromOwner:
formulaCoordsReferringToRange:fromOwner:skipSpanning:
formulaCoordsInRange:inOwner:
allFormulaCoordsInOwner:
hasFormulaAt:
hasFormulaCellsUsingNowTodayRandom
dirtyCellCountInOwner:
dirtyCellCount
allCellsAreClean
allCellsAreCleanNonBlocking
cellsInACycleInOwner:
cellWillBeModifiedInCurrentRecalcCycle:
referenceWasGuaranteedCleanAtRecalcCycleStart:
rewritingMinion
setRewritingMinion:
extendTableUIDHistoryWithRewrite:
rollbackTableUIDHistoryWithRewriteInfo:
markCellRefsAsDirty:
markCoordsDirty:inOwner:
headerStateOfTableChanged:changedRows:
headerStateOfTableChanged:
dirtyCellsForColumnRange:fromTable:tableRange:
dirtyCellsForRowRange:fromTable:tableRange:
dirtyCellsForRemovalOfColumns:fromTable:tableRange:
dirtyCellsForRemovalOfRows:fromTable:tableRange:
dirtyCellsForInsertionOfColumns:forTable:tableRange:headerRange:
dirtyCellsForInsertionOfRows:forTable:tableRange:headerRange:
dirtyCellsForMergingRange:forTable:headerRowRange:headerColumnRange:
markAllExternalGroupByRefsDirty:
markAllFunctionsAsDirty
markIndirectCallsAsDirty
markOnlyDependentsDirty:
scheduleDetectAndRepairConsistencyViolations
hasDateTimeVolatileFunctions
hasRemoteDataFunctions
markDateTimeVolatileFunctionsAsDirty
markDateTimeVolatileFunctionsAsDirtyForCurrentDateTime
rewriteSpecStack
pushRewriteSpec:
popRewriteSpec:
shouldSendSetNowCommand
markRandomVolatileFunctionsAsDirty
markLocaleVolatileFunctionsAsDirty
markGeometryVolatileFunctionsAsDirtyInOwner:
markRemoteDataVolatileFunctionsAsDirty
markAllVolatileFunctionsAsDirty
markOwnerAsDirty:
cellContainsAFormula:
isCellReferenceDirty:
p_blockUntilRecalcIsCompleteOnNewThreadWithTimeout:
debugFlushAllDirtyReferences
blockUntilRecalcIsCompleteWithTimeout:
beginSuppressingWillModifyCalls
endSuppressingWillModifyCalls
pauseRecalculation
pauseRecalculationSometimeSoon
resumeRecalculation
recalculationIsPaused
resumeRecalculationForBlock:
startRecalculation
isRecalculationStarted
isRecalculationRunning
startRecalcTaskIfNecessary
superWillModify
executeBlockWhileCalculationEngineIsNotWriting:
evaluateSynchedWithCalcEngineWithFormula:evalContext:
hasRunRecalculationALongTime
recalcTimeInSecs
clearRecalculationTimer
assertAt:nonCalcEngineException:evaluatingFormula:
remoteDataStore
setRemoteDataStore:
replaceRemoteDataKeysInterestedIn:forCell:
markRemoteDataVolatileFunctionsAsDirtyForKeys:
beginTrackingNamesInTableForLegacyNRM:
setDisallowHeaderIndexingForTableUID:
clearDisallowHeaderIndexingForTableUID:
hasDisallowedHeaderIndexingForTableUID:
cellHasPrecedents:
precedentsOfCell:
emptyReferenceSet
unorderedCellRefsForCategoryRef:atRowUid:
addCalculationStateObserver:
removeCalculationStateObserver:
addAllFormulasCleanObserver:
removeAllFormulasCleanObserver:
numberOfCellsWithFormulas
numFormulaCellsInOwner:
hasMaxNumFormulas
documentLocaleDidChange
assertDirtyPrecedentsCountConsistency
detectAndRepairDirtyCellsAreOnLeafQueue
allFormulaOwnersAsString
allCellDependenciesAsString
cellDependenciesAsStringForOwner:
allRangeDependenciesAsString
allSpanningDependenciesAsString
verifyAllOwnersAreKnown
cellCoordinatesNeedingExcelImportForTable:
foundConsistencyIssues
shouldDelayArchiving
packageLocator
delayedArchivingPriority
setCppCalcEngine:
_cppCalcEngine
_isUnarchiving
_calculationWillShutDown
T^v,N,V_cppCalcEngine
T@"TSKAccessController",W,N
T@"TSKChangeNotifier",W,N
T@"NSDate",&
T@"NSTimeZone",&
T@"TSULocale",&,V_locale
TQ,N
T@"<TSCEFormulaReplacing>",R,N
T@"TSCETablesByName",R
T@"TSCETablesByNameDistributor",R
T@"TSCETransaction",R
T@"TSCERewritingMinion",&,N
TB,R
T@"TSCERemoteDataStore",R
T@"<TSCERefNamingProtocol>",R,&,N
T@"<TSCERefParsingProtocol>",R,&,N
T@"<TSCEHeaderNameProtocol>",R,&,N
T@"TSCENamedReferenceManager",R,N
T@"TSCERewriteTableUIDInfo",R
T@"<TSKMultiTableRemapping>",&
setMessageType:messagePrototype:descriptor:unarchiveClassname:
initAsCompressionMapForIndexes:
mappedIndexForSourceIndex:
_indexMap
initWithCoordinator:
exceptionWithName:reason:userInfo:
reachabilityCheckHost
p_configureReachabilityWithHost:
distantPast
identifier
offline
setOffline:
setDoFullRefresh:
coordinator
allRequestedKeys
sourceFetcherDidGoOnline:forKeys:
newlyRequestedKeys
queue
p_refreshSpecifiers
sourceFetcherDidGoOffline:forKeys:
networkReachabilityWithHostName:
setServerReachability:
serverReachability
setReachabilityUpdatedBlock:
networkReachabilityForInternetConnection
setInternetReachability:
internetReachability
enableNotifier
internetReachabilityStatusWithQueue:completion:
fetchableKeysFromSet:
setOfSpecifiersNotContainedInSet:
insertSpecifiersFromSet:
resumeUpdating
removeSpecifiersFromSet:
stopUpdating
sendRequestForKeys:
requestsInFlight
setRequestsInFlight:
state
setState:
minimumTimeBetweenRequests
lastRequestDate
lastFullRefreshDate
recommendedTimeBetweenRequests
removeAllSpecifiers
doFullRefresh
containsColdSpecifiers
hotSpecifierSet
setLastFullRefreshDate:
setLastRequestDate:
disableNotifier
earlyRefreshRequested
setEarlyRefreshRequested:
canFetchKey:
insertSpecifier:
enumerateSpecifiersWithBlock:
fetcherWithCoordinator:
addRemoteDataInterest:
removeRemoteDataInterest:
enqueueRequestForKeys:
requestLaunched
requestCompleted
dataKind
recommendedTimeBetweenRequestsForWWAN
fetchQuotesWithTickers:completion:
autoCompleteQuotesWithInput:completion:
timer
setTimer:
_offline
_doFullRefresh
_earlyRefreshRequested
_coordinator
_queue
_allRequestedKeys
_newlyRequestedKeys
_serverReachability
_internetReachability
_timer
_lastRequestDate
_lastFullRefreshDate
_state
_requestsInFlight
T@"TSCERemoteDataSpecifierSet",R,N,V_allRequestedKeys
T@"TSCERemoteDataSpecifierSet",R,N,V_newlyRequestedKeys
T@"TSUNetworkReachability",&,N,V_serverReachability
T@"TSUNetworkReachability",&,N,V_internetReachability
T@"NSObject<OS_dispatch_source>",&,N,V_timer
T@"NSDate",&,N,V_lastRequestDate
T@"NSDate",&,N,V_lastFullRefreshDate
TB,V_offline
TB,V_doFullRefresh
TB,V_earlyRefreshRequested
Tq,V_state
Tq,V_requestsInFlight
T@"TSCERemoteDataCoordinator",R,W,N,V_coordinator
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
Tq,R,N
Td,R,N
initWithContext:dependencyTracker:ownerID:ownerUID:owner:ownerIndex:
setIsRegisteredWithCalcEngine:
isRegisteredWithCalcEngine
setOwnerIndex:
setFormulaOwner:
rangeDependencies
spanningRowDependencies
spanningColumnDependencies
volatileDependencies
ownerIndex
formulaOwnerUid
formulaOwnerId
errors
wholeOwnerDependencies
uuidReferences
addCellRef:forUuid:
affectedRange
columnIndexForColumnUID:
srcRegion
uids
affectedConditionalStyleOwnerUID
mergingRange
groupNodeUIDInfo
tableUIDInfo
expandedRowColumnUuids
pushRangeAndSpanningDependentsWithCounts:fromCoord:cellIsInACycle:
embiggenedCellCoord
setSaveAsEmbiggenedFormat:
setIgnoreAndPreserveUntilModifiedRuleForField:message:
childEnumerator
childEnumeratorForUserSearch
childEnumeratorForUserFlags:
modelPathComponentForChild:
acceptVisitor:
registerWithCalcEngineForDocumentLoad:ownerKind:
unregisterFromCalcEngine:
registerLast
objectToArchiveInDependencyTracker
setWeakReference:message:
willModifyForUpgrade
setDependencyTracker:
setCalcEngineRegistrationObject:
calcEngineRegistrationObject
hasPreUFFVersion
addFinalizeHandler:
resetOwnerUIDForUpgrade:forBaseOwner:ownerKind:
readRepeatedReferenceMessage:class:protocol:completion:
readWeakReferenceMessage:class:protocol:completion:
addCellRefToCheck:
cellRefsToCheck
skipRepairBadRefsForOwnerUID:
isSkippingRepairBadRefsForOwnerUID:
_cellRefsToCheck
_skipRepairBadRefsOwnerUID
initWithNumberValue:locale:
valueType
numberValue
formatFromArchive:
durationUnitLargestWithTimeInterval:
format
encodeToArchive:archivingCustomFormats:
initWithDouble:locale:
initWithDecimal:locale:
displayString
canonicalKeyString
isEqualToCellValue:
compareToCellValue:
initWithArchive:locale:
setPopulatedCustomFormat:
_numberValue
removeCellRef:forUuid:
getCellRefs:referringToUuids:
initFromArchive:dependencyTracker:
tooManyCellRefsFor31FormatArchive
upgradeForOwners:
encodeToArchive:alsoSave31Format:archiver:
_cellRefsByUuid
_uuidsByCellRef
addUseOfFunctions:atCellRef:
functionsUsed
addFunctionUsesInFormula:atCellRef:outContainsVolatileFunction:
dirtyCellsUsingFunction:
_cellRefsUsingFunction
_mutex
T@"TSCECalculationEngine",R,&,N,V_calcEngine
initWithAttributes:
initWithSymbol:
p_populateAttributesFromArray:
setObject:atIndexedSubscript:
attributes
kNilStockAttributeString
valueForAttribute:
localeIdentifier
nativeLocaleIdentifier
groupingSeparator
tsu_stringByRemovingCharactersInSet:
numberFromString:
initWithLocaleIdentifier:
setLocalizedDateFormatFromTemplate:
stringFromDate:
setSymbol:
symbol
setDateFormat:
timeZoneForSecondsFromGMT:
dateFromString:
p_setFormattedAttr:fromArray:
stockWithAttributes:
stockFromArchive:
valueForAttribute:forLocale:
dateString
abbreviatedNumberForAttribute:atLocale:
_symbol
_attributes
T@"TSUSparseArray",R,N,V_attributes
T@"NSString",&,N,V_symbol
coordFromIndex:
setFormulaCoord:
maxKey
hasObjectForKey:
precedentsWithCalcEngine:hostOwnerUID:
initWithSpanningRangeRef:
formulaCoord
indexFromCoord:
foreach:
requiresDocumentVersion:featureIdentifier:
initFromExpandedArchive:
initWithTrackedReferenceTSPObjectDeprecated:
beginTrackingReferenceWithCellRef:calcEngine:
beginTrackingReferenceWithSpanningRef:calcEngine:
_trackedRefsLock
_trackedReferences
_nextEmptyTrackedReferencesIndex
initWithDateValue:locale:
initWithDate:locale:
_dateValue
isEqualToIndexSet:
affectedRangeForRemoveRows
affectedRangeForInsertRows
affectedRangeForMoveRows
enumerateKeysAndObjectsUsingBlock:
dictionaryWithDictionary:
addEntriesFromDictionary:
p_enumerateYearMapsWithBlock:
data
isCold
enumerateSpecifiersAndValuesWithBlock:
hotSpecifiers
allObjects
removeObjectsForKeys:
coldSpecifiers
containsValueForSpecifier:
valueMap
hotSpecifierArray
yearsReferenced
coldSpecifierArrayForYear:
setWithSpecifierArray:
insertSpecifiersFromArray:
valueForSpecifier:
setValue:forSpecifier:
specifierFromArchive:
cellValueWithArchive:locale:
encodeCellValueToArchive:
p_saveMap:toArchive:
valueMapWithSpecifier:value:
initWithData:
removeValueForSpecifier:
addValuesFromMap:
updateWithValuesFromMap:overwriteValues:
removeValuesForSpecifierSet:
removeAllValues
containsValueForAllSpecifiersInSet:
mapForSpecifiersInSet:
mapForSingleSpecifier:
allSpecifiers
setData:
_coldDataByYear
_data
T@"NSMutableDictionary",&,N,V_data
setInt:forKey:
storeMap
setObject:forUncopiedKey:
p_removeRemoteDataInterest:forStore:
sourceFetchers
p_defaultStockList
p_fetcherForDataKind:
cachedQuotes
cachedSpecifiers
updateCachedStocksIntoStore:
setOfSpecifiersContainedInSet:
p_canUpdateStore:
remoteDataDidUpdateValues:quotes:
coldSpecifierSet
p_localeStocks
reverseObjectEnumerator
setByIntersectingWithSet:
containsKey:
intForKey:
p_revalidateOnlineStatus
containsSpecifiersWithSymbol:
containsSpecifiersFromSet:
p_actionMapForKeys:quotes:
setByIntersectingWithSymbolsOfSet:
defaultCenter
calculationEngine
dictionaryWithObjects:forKeys:count:
postNotificationName:object:userInfo:
sharedCoordinator
registerStore:
unregisterStore:
valueForSingleKey:
cachedQuoteForSingleSymbol:
updateKnownCachedStocksInStore:
addRemoteDataInterest:forStore:
removeRemoteDataInterest:forStore:
p_dataSourceFetcherForRemoteData:
isOnlineForDataKind:
sourceFetcherDidUpdate:withValues:quotes:
dataKindStatus
_sourceFetchers
_storeMap
_cachedSpecifiers
_cachedQuotes
_dataKindStatus
T@"NSMutableSet",R,N,V_sourceFetchers
T@"TSUPointerKeyDictionary",R,N,V_storeMap
T@"TSCERemoteDataValueMap",R,N,V_cachedSpecifiers
T@"NSMutableDictionary",R,N,V_cachedQuotes
T@"TSUIntToIntDictionary",R,N,V_dataKindStatus
initWithContextTableResolver:components:
initWithContextResolver:components:
contextTableResolver
setSheetName:
setTableName:
sheetNameUnquoted
setSheetNameUnquoted:
tableNameUnquoted
setTableNameUnquoted:
abortObject
setAbortObject:
filterColons
setFilterColons:
referenceIsComplete
parseAsBaseTableReference
setNamesUsed:
trimNames
initWithContextResolver:
contextResolver
setContextTableResolver:
components
setComponents:
aggregateFunction
setAggregateFunction:
refPathSplitter
setRefPathSplitter:
rest
setRest:
_filterColons
_referenceIsComplete
_parseAsBaseTableReference
_trimNames
_namesUsed
_contextTableResolver
_components
_aggregateFunction
_refPathSplitter
_abortObject
_sheetName
_tableName
_rest
_sheetNameUnquoted
_tableNameUnquoted
_referencesMatchingInputAsPrefix
T^{TSCETableResolver=^^?},N,V_contextTableResolver
T@"<TSCEReferenceResolving>",R,N
T@"NSArray",&,N,V_components
T@"NSString",&,N,V_aggregateFunction
T@"TSCEQuotedRefPathSplitter",&,N,V_refPathSplitter
TB,N,V_filterColons
TB,N,V_referenceIsComplete
T@"TSCEAbortObject",&,N,V_abortObject
TB,N,V_parseAsBaseTableReference
TB,N,V_trimNames
TB,N,V_namesUsed
T@"NSString",&,N,V_sheetName
T@"NSString",&,N,V_tableName
T@"NSString",&,N,V_rest
T@"NSString",&,N,V_sheetNameUnquoted
T@"NSString",&,N,V_tableNameUnquoted
T@"NSMutableArray",&,N,V_referencesMatchingInputAsPrefix
setMessageVersion:
saveAsEmbiggenedFormat
_isRegisteredWithCalcEngine
_saveAsEmbiggenedFormat
_ownerIndex
_formulaOwnerId
_cellDependencies
_rangeDependencies
_spanningColumnDependencies
_spanningRowDependencies
_volatileDependencies
_wholeOwnerDependencies
_errors
_uuidReferences
_formulaOwner
_calcEngineRegistrationObject
_formulaOwnerUid
TS,R,N,V_formulaOwnerId
TS,N,V_ownerIndex
T{TSKUIDStruct=QQ},R,N,V_formulaOwnerUid
T^v,N
T^v,R,N,V_cellDependencies
T^v,R,N,V_rangeDependencies
T^v,R,N,V_spanningColumnDependencies
T^v,R,N,V_spanningRowDependencies
T^v,R,N,V_volatileDependencies
T^v,R,N,V_wholeOwnerDependencies
T^v,R,N,V_errors
T@"TSCEUuidReferences",R,&,N,V_uuidReferences
T@"<TSCEFormulaOwning>",&,N,V_formulaOwner
T@"<TSCECalculationEngineRegistration>",&,N,V_calcEngineRegistrationObject
TB,N,V_saveAsEmbiggenedFormat
TB,N,V_isRegisteredWithCalcEngine
initWithNodeArray:translationFlags:
initWithCreator:argInfo:translationFlags:
formulaResultForFormattedValueWithKnownCycleState:context:isInACycle:outErrorIsDueToCycle:formatAsPercent:
isEqualToFormula:
translationFlags
copyByConvertingColonToColonTract:
isEquivalentToFormula:context:thisContainingCell:thatContainingCell:
hostedDescriptionAtCell:calcEngine:hideUids:
willModifyWasCalled
didModifyWasCalled
astNodeArrayCopy
hasHostCell
copyBySettingHostTableUID:hostColumnUID:hostRowUID:
copyByConvertingColonTractToColon:breakUpIntoRefs:
currentThread
threadDictionary
parseFormula:calcEngine:unqualifiedReferenceTableUID:containingCell:outError:outNeedsImportRewrite:isChartFormula:isSageUpgrade:
parseFormula:calcEngine:containingCell:outError:
formulaObject
T@"TSCEFormulaObject",R,N
initWithCreator:translationFlags:
containsInvalidRef
containsUidReferences
hasBadRefWithUidInfo
appendExternalTableUIDs:groupByUIDs:
usesFunctionsWithDateArgs
hasUidTracts
evaluateWithContext:isInACycle:outErrorIsDueToCycle:
evaluateWithContextGridResult:
isEquivalentToFormula:
getPrecedents:calcEngine:hostCell:doImplicitIntersection:returnUidReferences:
getCategoryReferencesWithCalcEngine:
hostedDescriptionAtCell:calcEngine:
hostedDescriptionAtCell:
sageFormulaStringForContainingCell:outHasSageUnsupportedFunctions:
copyByRewritingForTranspose:calcEngine:containingCell:outTransposeWarning:
copyByRewritingWithSpec:calcEngine:containingCell:
copyByClearingHostCell
copyBySettingTranslationFlags:
copyByRewritingWithContext:rewriteBlock:
iterateWithBlock:stop:block:
copyByRewritingReferencesToUidForm:
copyByRewritingReferencesToGeometricForm:
copyByRepairingBadReferences:
copyByFreezingRefs:containingCell:
copyByThawingRefs:containingCell:
copyByConvertingColonTractToColon:
copyByClearingUids:containingTableUID:
copyByMakingAllCategoryRefsIndirect:containingCell:
copyByRemappingOwnerUIDs:calcEngine:containingCell:outBadRefFound:
copyByRemappingHostCellAgnosticOwnerUIDs:calcEngine:containingCell:outError:
copyByRemappingOwnerUIDs:calcEngine:badRefFound:
copyByForceSettingOwnerUIDs:calcEngine:
copyByRemappingUids:rowMap:ownerMap:clearIfMissing:
copyByUpdatingLinkedTable:outfoundLinkedRef:
copyByRewritingForSageExport:targetDocumentSupportsCrossTableReferences:outshouldBakeWholeFormula:outFeaturesUsed:
copyByRewritingForSageImport:containingCell:
copyByRewritingForExcelImport:outFormulaResult:outDidModifyFormula:outFormulaReplacedForExcelCompatWarning:functionNameReplacedForExcelCompat:formulaFormatFromCell:
copyByRemovingNumberToDateCoercion:outFormulaResult:outDidModifyFormula:
copyByRewritingForExcelExport:
copyByRewritingNumberToDurationForSageImport:durationUnitLargest:
copyByOffsettingRelativeReferences:oldContainingCell:newContainingTable:offset:
copyByOffsettingRelativeReferences:
copyByRewritingGroupUid:groupByUID:
hostColumnUID
hostRowUID
_astNodeArray
_translationFlags
_hash
_hostColumnUID
_hostRowUID
Tr^{TSKUIDStruct=QQ},R,N,V_hostTableUID
Tr^{TSKUIDStruct=QQ},R,N,V_hostColumnUID
Tr^{TSKUIDStruct=QQ},R,N,V_hostRowUID
T{TSCEFormulaTranslationFlags=C},R,N,V_translationFlags
initWithTopLeft:bottomRight:tableUID:
columnUIDsForColumnIndexes:
rowUIDsForRowIndexes:
expandUsingIndexes:forRows:
UIDSetForIndexes:isRows:
initWithTopLeft:bottomRight:
initWithUidTract:calcEngine:tableUID:
mixedColumnStartedWithPreserve
mixedRowStartedWithPreserve
isSingleCell
isPreservedColumn:preferStart:
isPreservedRow:preferStart:
preserveFlagsForCoord:preferStart:
addColumns:
removeColumns:
removeRows:
uidTractWithCalcEngine:hostTableUID:
intersectWithCellRect:
intersectWithCellRectIgnoringSpanning:
coordAtColumnOffset:rowOffset:
setCppCellTractRef:
_cppCellTractRef
T{TSCECellTractRefCore={TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSKUIDStruct=QQ}C{TSUPreserveFlags=C}BBB},N,V_cppCellTractRef
T{TSUPreserveFlags=C},N
isEqualToTimeZone:
boolForKey:
defaultTimeZone
processInfo
processorCount
dateParserLibrary
prepareDateParserInBackground
recalcInProgressUpdate:
allFormulaCellsAreClean
initWithTimeIntervalSinceNow:
performReadAllowingOverlappingImplicitRead:thenWrite:thenReadOnPrimaryThread:
setValue:forKey:
drawableInfo
tableInfo
tableRangeCoordinate
conditionalStyleFormulaOwnerUID
rowUIDsForRowRange:
columnUIDsForColumnRange:
newTableResolverForResolver:
hasWrite
isMainThread
addNestedRewrite:
initWithTimeout:
detachNewThreadSelector:toTarget:withObject:
distantFuture
hasRead
waitOnIdentifier:untilDate:releaseReadWhileWaiting:
initWithContext:calcEngine:
NRM_formulaOwnerUID
documentObject
formattingSymbols
updateTrackedHeadersForDocumentLocaleChange:
pushScopeForField:message:usingBlock:
name
hasArchivableState
fileFormatVersion
setNRM_formulaOwnerUID:
updateTableUIDFrom:toTableUID:
willModifyForUpgradeWithOptions:
tsp_initWithProtobufString:
setName:
setMaxConcurrentOperationCount:
p_initializeQueue
registeredWithCoordinator
setRegisteredWithCoordinator:
p_recursiveWriteWillModify:withBlock:
remoteDataMap
p_tsceValueFromTsceCellValue:
cachedStocks
unSyncedStocks
ownerMap
interestingKeys
predicateWithBlock:
filterUsingPredicate:
tsu_allKeysAsSet
tsu_setBySubtractingSet:
p_isInCollaborationMode
delegate
p_updateCachesWithMap:quotes:overwriteValues:
setRemoteDataSyncKey:
remoteDataDidUpdateValues:quotes:fromStore:syncKey:
addOperationWithBlock:
errorValue
tsu_setByIntersectingSet:
enumerateObjectsUsingBlock:
updateCachedStocksFromKnownStocks:
hasInterestingKeys
allSymbols
setByRemovingSpecifiersFromSet:
registerWithCoordinator
unregisterWithCoordinator
cachedQuoteForSymbol:
addRemoteDataInterest:forOwner:
removeRemoteDataInterest:forOwner:
remoteDataSyncKey
allRemoteData
allQuotes
p_dictionaryForRemoteData:
updateWithRemoteDataMap:quotes:syncKey:
hasFullyPopulatedCache
setDelegate:
updateQueue
tspSemaphore
setHasInterestingKeys:
setUnSyncedStocks:
_hasInterestingKeys
_registeredWithCoordinator
_delegate
_calculationEngine
_updateQueue
_tspSemaphore
_remoteDataMap
_cachedStocks
_interestingKeys
_ownerMap
_remoteDataSyncKey
_unSyncedStocks
T@"NSOperationQueue",R,N,V_updateQueue
T@"NSObject<OS_dispatch_semaphore>",R,N,V_tspSemaphore
T@"TSCERemoteDataCoordinator",R,N
T@"TSCERemoteDataValueMap",R,N,V_remoteDataMap
T@"NSMutableDictionary",R,N,V_cachedStocks
T@"TSCERemoteDataSpecifierSet",R,N,V_interestingKeys
TB,N,V_hasInterestingKeys
T@"NSMutableDictionary",R,N,V_ownerMap
TB,N,V_registeredWithCoordinator
Td,N,V_remoteDataSyncKey
T@"NSMutableSet",&,N,V_unSyncedStocks
T@"<TSCERemoteDataStoreDelegate>",W,N,V_delegate
T@"TSCECalculationEngine",W,N,V_calculationEngine
initWithSpecifiers:
setWithObject:
initWithSpecifierArray:
p_enumerateYearSetsWithBlock:
setWithSet:
isEqualToSet:
p_coldSpecifierCount
hotData
minusSet:
isSubsetOfSet:
setWithArray:
sortDescriptorWithKey:ascending:
arrayWithObjects:count:
sortedArrayUsingDescriptors:
setWithSpecifiers:
initWithIndexSet:
intersectSet:
setOfSpecifiersPassingTest:
hasDateEqualToDate:
p_description:
setWithSpecifier:
removeSpecifier:
removeSpecifiersFromArray:
containsSpecifier:
coldSpecifiersForYear:
sortedArrayOfSpecifiers
setByRemovingSpecifiersWithSymbols:
setOfSpecifiersWithSymbol:
setOfSpecifiersWithDate:
shortDescription
setHotData:
_hotData
T@"NSMutableSet",&,N,V_hotData
setInsertAtUid:
setInsertOppositeUid:
addCoordMapper:
initWithString:
rowIndexForUuid:
columnIndexForUuid:
dstCondStyleOwnerUID
isForDstTable:
srcUidForDstUid:
reverseOriginsMap
finalDstTableUID
viewOrderUids
finalTopRowIndex
loadIndexesForTable:uidResolver:forRemoveRows:shuffleMap:
loadMergeRangesContainingFormulasInTable:calcEngine:
createAuxRowColumnInfoForMove
loadIndexesForTable:uidResolver:
prepareToRewriteWithCalcEngine:
canBeNested
loadIndexesForSrcTable:srcUidResolver:dstTable:dstUidResolver:
amendRewriteWithCalcEngine:
didModifyTable:calcEngine:
unloadIndexes
rewriteTypeUsesAmendRewriteSpec:
initWithRewriteType:
conditionalStylesForUndo
miniDescription
affectedOwnerUIDs
tableRangeForTable:calcEngine:
originalCellRefForUpdatedCellRef:
mergeRangeAtOriginalCellRef:
adjustViewTractRef:calcEngine:containingCellRef:undoTractList:
restoreViewTractRefFromUndoTractList:calcEngine:containingCellRef:
willModifyTable:uidResolver:calcEngine:
nestedRewrites
willModifySrcTable:srcUidResolver:dstTable:dstUidResolver:
didModifySrcTable:dstTable:
didModifyTable:
clearTableIndexes
setIsInverse:
setFromTableUID:
setConditionalStyleOwnerUID:
setGroupByUID:
rewriteSpecBaseToChrome
setRewriteSpecBaseToChrome:
rewriteSpecChromeToBase
setRewriteSpecChromeToBase:
setTransposedInfo:
setRowColumnInfo:
setRegionMovedInfo:
setMergeInfo:
setMergeOriginMovedInfo:
setTableUIDInfo:
setGroupNodeUIDInfo:
setGroupByChange:
setShuffleMap:
formulasForUndo
setFormulasForUndo:
warningSetsForUndo
setWarningSetsForUndo:
setCanBeNested:
coordMapper
setCoordMapper:
srcCoordMapper
setSrcCoordMapper:
_rewriteType
_tableRange
_isInverse
_canBeNested
_willModifyWasCalled
_didModifyWasCalled
_transposedInfo
_rowColumnInfo
_regionMovedInfo
_mergeInfo
_mergeOriginMovedInfo
_shuffleMap
_tableUIDInfo
_groupNodeUIDInfo
_groupByChange
_formulasForUndo
_warningSetsForUndo
_conditionalStylesForUndo
_nestedRewrites
_mergeRangesContainingFormulas
_coordMappersLock
_coordMappersByTableUID
_rewriteSpecBaseToChrome
_rewriteSpecChromeToBase
_coordMapper
_srcCoordMapper
_fromTableUID
TI,R,N,V_rewriteType
T{TSKUIDStruct=QQ},N,V_fromTableUID
T{TSKUIDStruct=QQ},N,V_conditionalStyleOwnerUID
T{TSKUIDStruct=QQ},N,V_groupByUID
TB,N,V_isInverse
T@"TSCEFormulaRewriteSpec",&,N,V_rewriteSpecBaseToChrome
T@"TSCEFormulaRewriteSpec",&,N,V_rewriteSpecChromeToBase
T@"TSCETableTransposedInfo",&,N,V_transposedInfo
T@"TSCEFormulaRewriteInfo_RowColumnInfo",&,N,V_rowColumnInfo
T@"TSCEFormulaRewrite_RegionMovedInfo",&,N,V_regionMovedInfo
T@"TSCEFormulaRewrite_RegionMergedInfo",&,N,V_mergeInfo
T@"TSCEFormulaRewrite_MergeOriginMovedInfo",&,N,V_mergeOriginMovedInfo
T@"TSCERewriteTableUIDInfo",&,N,V_tableUIDInfo
T@"TSCERewriteGroupNodeUIDInfo",&,N,V_groupNodeUIDInfo
T@"TSCEGroupByChange",&,N,V_groupByChange
T@"TSKShuffleMapping",&,N,V_shuffleMap
T@"TSCEFormulasForUndo",&,N,V_formulasForUndo
T@,&,N,V_warningSetsForUndo
TB,R,N,V_willModifyWasCalled
TB,R,N,V_didModifyWasCalled
TB,N,V_canBeNested
T@"TSCECoordMapper",&,N,V_coordMapper
T@"TSCECoordMapper",&,N,V_srcCoordMapper
initWithFunctionIndex:symbol:attribute:year:month:day:
p_timeInterval
specifierByChangingAttributeTo:
isCurrency
invalidAttributeErrorValue
invalidSymbolErrorValue
hashVal
_attribute
_year
_month
_day
_hashVal
TQ,R,N,V_hashVal
TS,R,N,V_functionIndex
T@"NSString",R,N,V_symbol
Tq,R,N,V_attribute
Tq,R,N,V_year
Tq,R,N,V_month
Tq,R,N,V_day
T{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C},R,N
rangeOfString:options:range:locale:
tsce_hasCaseInsensitivePrefix:withLocale:
containerNameForTable:
tableNameForTable:
dropTable:withTableName:withContainerName:
addTable:
anyObject
tableForTableName:containerName:
dropTable:
renameTable:fromName:
anyTableForTableName:
resolverMatchingName:
resolversMatchingPrefix:
resolverNameIsUsed:
_tablesByTableNameByContainerName
_tableNameChangeDistributor
T@"TSCETablesByNameDistributor",R,N,V_tableNameChangeDistributor
initWithErrorValue:locale:
setByAddingObjectsFromArray:
isEqualToNumber:
_errorValue
countForObject:
initByCopyingASTNodeArray:atFormulaCoord:
isEqualToTrackedReference:
replaceContentsWithContentsOfTrackedReference:
getPrecedentsWithCalcEngine:hostOwnerUID:
registerWithCalcEngine:inOwner:
encodeToExpandedArchive:archiver:
_AST
_formulaCoord
T{TSUCellCoord=ISBB},N,V_formulaCoord
null
setValue:atCoord:
hasValueAtCoord:
clearValueAtCoord:
area
valueAtColumn:row:
enumerateValuesUsingBlock:
expandToIncludeCoord:
initWithColumnRange:rowRange:
initWithValueVector:
numberOfPopulatedColumns
numberOfPopulatedRows
populatedColumns
populatedRows
hasValueAtColumn:row:
clearValueAtColumn:row:
setEmptyValueAtCoord:
intersectionWithCellRect:
enumerateValuesForRow:usingBlock:
enumerateValuesForColumn:usingBlock:
_coords
_topLeftCoord
_dimensions
_valueForCoord
T{TSCEGridDimensions=II},R,N
T{TSCEGridCoord=II},R,N
initWithType:groupByUid:
initWithType:groupingColumnChanges:groupByUid:
setPreviousLevel:
setUpdatedLevel:
mapPreviousGroupNodeUid:toUpdatedGroupNodeUid:
stringForGroupByChangeType:
addRemoveOfGroupUid:
previousGroupNodeUidForUpdatedGroupNodeUid:
updatedGroupNodeUidForPreviousGroupNodeUid:
previousRelativeAncestorLevelForUpdatedAncestorCategoryLevel:numLevels:
changeType
setChangeType:
previousLevel
updatedLevel
groupingColumnChanges
previousGroupNodeToUpdated
previousGroupNodeUids
updatedGroupNodeUids
removedGroupNodeUids
updatedGroupNodeToPrevious
_previousGroupNodeUids
_updatedGroupNodeUids
_removedGroupNodeUids
_changeType
_previousLevel
_updatedLevel
_groupingColumnChanges
_previousGroupNodeToUpdated
_updatedGroupNodeToPrevious
T^v,R,N,V_updatedGroupNodeToPrevious
TC,N,V_changeType
TC,N,V_previousLevel
TC,N,V_updatedLevel
T{TSKUIDStruct=QQ},R,N,V_groupByUid
T^v,R,N,V_groupingColumnChanges
T^v,R,N,V_previousGroupNodeToUpdated
T@"TSCEUIDSet",R,N,V_previousGroupNodeUids
T@"TSCEUIDSet",R,N,V_updatedGroupNodeUids
T@"TSCEUIDSet",R,N,V_removedGroupNodeUids
initWithUids:
loadIndexesForTable:isRows:shuffleMap:
bottomRightCellCoord
initWithTableUID:columnUids:rowUids:
_condStyleOwnerUID
T{TSKUIDStruct=QQ},R,N,V_tableUID
T{TSKUIDStruct=QQ},R,N,V_condStyleOwnerUID
T@"TSCEFormulaRewrite_Uids",R,N,V_columnUids
T@"TSCEFormulaRewrite_Uids",R,N,V_rowUids
initWithMergeRegion:mergeSource:
setMergeSource:
_mergeSource
_mergeRegion
Tr^{TSUCellCoord=ISBB},N,V_mergeSource
T@"TSCEFormulaRewrite_RegionInfo",R,N,V_mergeRegion
initWithMergeOriginsMap:reverseMap:
_mergeOriginsMap
_reverseOriginsMap
Tr^v,R,N,V_mergeOriginsMap
Tr^v,R,N,V_reverseOriginsMap
loadIndexesFromRegions
initWithSrcTableUID:srcTract:dstTableUID:destTract:
isForSrcTable:
dstRegion
originalSrcRegion
setOriginalSrcRegion:
setFinalDstTableUID:
srcUidForDstUid
setSpanningRows:
setSpanningColumns:
setFinalTopRowIndex:
_srcRegion
_dstRegion
_originalSrcRegion
_finalDstTableUID
_srcUidForDstUid
_dstUidForSrcUid
_spanningRows
_spanningColumns
_finalTopRowIndex
T@"TSCEFormulaRewrite_RegionInfo",R,N,V_srcRegion
T@"TSCEFormulaRewrite_RegionInfo",R,N,V_dstRegion
T@"TSCEFormulaRewrite_RegionInfo",&,N,V_originalSrcRegion
T{TSKUIDStruct=QQ},N,V_finalDstTableUID
TI,N,V_finalTopRowIndex
T@"TSCEFormulaRewrite_Uids",R,N
Tr^v,R,N,V_srcUidForDstUid
Tr^v,R,N,V_dstUidForSrcUid
TB,N,V_spanningRows
TB,N,V_spanningColumns
setDateAccumulator:
secondsToAdd
setSecondsToAdd:
mixedDurationsAndNumbers
setMixedDurationsAndNumbers:
setFoundANumber:
_dateAccumulator
_secondsToAdd
_numberAccumulator
_mixedDurationsAndNumbers
_foundANumber
T@"NSDate",N,V_dateAccumulator
T^{TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}SB},R,N,V_numberAccumulator
Td,N,V_secondsToAdd
TB,N,V_mixedDurationsAndNumbers
TB,N,V_foundANumber
mapIndex:
removeIndexesInRange:
initWithUids:atIndexes:
_uids
_indexes
_indexesForUids
_uidsForIndexes
_viewOrderUids
Tr^v,R,V_uids
Tr^v,R,V_viewOrderUids
T@"NSIndexSet",R,V_indexes
initWithRange:orderedUuids:offset:
orderedUuids
offset
setOffset:
_range
_orderedUuids
_offset
T{_NSRange=QQ},R,V_range
Tr^v,R,V_orderedUuids
TI,V_offset
reverseMapIndex:
orderedUuidsForRange:inTable:areRows:shuffleMap:
initWithFormulaOwnerUID:uuids:areRows:
offsetForUpdatedRowIndex:isRemoveRows:
initWithTableUID:condStyleOwnerUID:groupByUID:uuids:atIndexes:areRows:
tableRange
coordRangesForInsertRemove
setAuxRowColumnInfo:
useWholeTableForInsertionDependencies
setUseWholeTableForInsertionDependencies:
_rowOrColumnUids
_rowOrColumnUuids
_isRows
_rangeEntries
_auxRowColumnInfo
_expandedRowColumnUuids
_insertAtUid
_insertOppositeUid
_useWholeTableForInsertionDependencies
Tr^{TSKUIDStruct=QQ},R,N,V_tableUID
Tr^{TSKUIDStruct=QQ},R,N,V_conditionalStyleOwnerUID
Tr^{TSKUIDStruct=QQ},R,N,V_groupByUID
TB,R,N,V_isRows
T@"TSCEFormulaRewrite_Uids",R,N,V_rowOrColumnUids
Tr^v,R,N,V_rowOrColumnUuids
T@"NSIndexSet",R,N
T@"TSCEUIDSet",R,N,V_expandedRowColumnUuids
T@"TSCEFormulaRewriteInfo_RowColumnInfo",&,N,V_auxRowColumnInfo
TB,N,V_useWholeTableForInsertionDependencies
T{TSKUIDStruct=QQ},N,V_insertAtUid
T{TSKUIDStruct=QQ},N,V_insertOppositeUid
setStrongReferenceArray:message:
tsce_numericCompare:
sortedArrayUsingSelector:
stringForOwnerID:withLimit:
addEdge:forOwner:
stringForEdgesWithLimit:
_edgesForOwner
cellID
dirtyPrecedentCount
isInCycle
isFormula
stringForDependencyRow
setCellID:
setDirtyPrecedentCount:
precedentsList
setPrecedentsList:
dependentsList
setDependentsList:
_isFormula
_isInCycle
_cellID
_dirtyPrecedentCount
_precedentsList
_dependentsList
T@"TSCEEdgeListPrinter",&,N,V_precedentsList
T@"TSCEEdgeListPrinter",&,N,V_dependentsList
T@"NSString",&,N,V_cellID
TQ,N,V_dirtyPrecedentCount
TB,N,V_isFormula
TB,N,V_isInCycle
setShowCleanCells:
showCleanCells
numDirtyCells
ownerName
stringForOwnerKind:
setOwnerName:
setNumDirtyCells:
dirtyCellDependencyRows
setDirtyCellDependencyRows:
cleanCellDependencyRows
setCleanCellDependencyRows:
_showCleanCells
_ownerName
_numDirtyCells
_dirtyCellDependencyRows
_cleanCellDependencyRows
T@"NSMutableArray",&,N,V_dirtyCellDependencyRows
T@"NSMutableArray",&,N,V_cleanCellDependencyRows
T@"NSString",&,N,V_ownerName
TQ,N,V_numDirtyCells
TB,N,V_showCleanCells
initWithStringValue:locale:
lowercaseStringWithLocale:
initWithString:locale:
_stringValue
hasReceiver:
addReceiver:
indexOfObjectIdenticalTo:
dropAllTargets
addReceiverIfMissing:
removeReceiver:
disconnect
suspendDuringBlock:
_receivers
T@"Protocol",R,N
T@"NSArray",R,N,V_receivers
willModifyWithOptions:
initWithBooleanValue:locale:
customFormatForKey:
keyForCustomFormat:
initWithFormatType:customFormatKey:customFormat:appliedConditionKey:
updateWithCustomFormatList:
setValueType:
_valueType
Tc,N,V_valueType
T@"TSULocale",&,N,V_locale
booleanValue
initWithBoolean:locale:
_booleanValue
_timeoutInterval
_blockingIdentifier
Td,R,V_timeoutInterval
T@"NSString",R,V_blockingIdentifier
_flushFormulasToRemoveWithDepTracker:startTime:timeout:
_flushFormulasToReplaceWithDepTracker:startTime:timeout:
_flushFormulasToResetWithDepTracker:startTime:timeout:
processInBackgroundIfNecessary
waitForAllPrecedentsToLoad
flushFormulaChangesForSeconds:
removeFormulasAt:inOwner:removeOutstandingReplaces:
_removeReplaceMutex
_minion
_formulasToRemove
_formulasToReset
_formulasToReplace
_precedentLoadingQueue
_precedentLoadingGroup
_flushAllInProgress
_runningInBackground
_backgroundProcessingQueue
initWithUTF8String:
@24@0:8^{_NSZone=}16
@16@0:8
@24@0:8^v16
@24@0:8r^v16
v16@0:8
B16@0:8
^v16@0:8
v24@0:8r^{TSCEAnyRef=S{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}C}{TSKUIDStruct=QQ}B@}16
v24@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16
v24@0:8r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16
v24@0:8r^{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}C}16
v24@0:8@16
v24@0:8@?16
@24@0:8@16
@20@0:8c16
B24@0:8@16
@20@0:8i16
@28@0:8s16@20
@32@0:8s16s20@24
@20@0:8C16
v32@0:8^{TSCEWarningReportingContext=BB@}16@24
v24@0:8^{TSCEWarningReportingContext=BB@}16
v32@0:8^{TSCEWarningReportingContext=BB@}16c24c28
@40@0:8@16r^{TSKUIDStruct=QQ}24{TSUCellCoord=ISBB}32
Q16@0:8
v20@0:8B16
@"NSDictionary"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v40@0:8@16r^{TSUCellCoord=ISBB}24r^{TSKUIDStruct=QQ}32
v72@0:8@16r^{TSUCellCoord=ISBB}24r^{TSKUIDStruct=QQ}32{TSCEReplaceFormulaOptions=BBBB{TSKUIDStruct=QQ}@}40
v48@0:8r^{TSUCellCoord=ISBB}16r^{TSKUIDStruct=QQ}24@32r^{TSCEReplaceFormulaOptions=BBBB{TSKUIDStruct=QQ}@}40
v32@0:8r^{TSUCellCoord=ISBB}16r^{TSKUIDStruct=QQ}24
v24@0:8r^v16
v24@0:8r^{TSKUIDStruct=QQ}16
@"TSCECalculationEngine"16@0:8
v40@0:8@"<TSCEFormulaReturning>"16r^{TSUCellCoord=ISBB}24r^{TSKUIDStruct=QQ}32
v72@0:8@"<TSCEFormulaReturning>"16r^{TSUCellCoord=ISBB}24r^{TSKUIDStruct=QQ}32{TSCEReplaceFormulaOptions=BBBB{TSKUIDStruct=QQ}@}40
v48@0:8r^{TSUCellCoord=ISBB}16r^{TSKUIDStruct=QQ}24@"TSCEReferenceSetWrapper"32r^{TSCEReplaceFormulaOptions=BBBB{TSKUIDStruct=QQ}@}40
@"TSCEFormulasToSet"
@56@0:8@16i24i28s32B36i40r^v44S52
@20@0:8S16
B24@0:8s16s20
r^v16@0:8
^v24@0:8Q16
i24@0:8Q16
c24@0:8Q16
q48@0:8@16Q24q32@40
S16@0:8
s16@0:8
i16@0:8
@"NSString"
{vector<TSCEFunctionArgSpec, std::allocator<TSCEFunctionArgSpec>>="__begin_"^{TSCEFunctionArgSpec}"__end_"^{TSCEFunctionArgSpec}"__end_cap_"{__compressed_pair<TSCEFunctionArgSpec *, std::allocator<TSCEFunctionArgSpec>>="__value_"^{TSCEFunctionArgSpec}}}
S24@0:8@16
S20@0:8C16
d20@0:8C16
C20@0:8S16
C24@0:8S16S20
{?=CS}24@0:8@16
B20@0:8S16
{TSUDecimal={?=[2Q]}}32@0:8r^{TSUDecimal={?=[2Q]}}16{?=CS}24{?=CS}28
B32@0:8d16@24
B40@0:8r^{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}16d24@32
d16@0:8
{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}16@0:8
{TSCEInternalCellReference="coordinate"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}"tableID"S"reserved"S}
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"NSDate"
{unordered_map<TSCEInternalCellReference, TSCECountedInternalCellRefSet, std::hash<TSCEInternalCellReference>, std::equal_to<TSCEInternalCellReference>, std::allocator<std::pair<const TSCEInternalCellReference, TSCECountedInternalCellRefSet>>>="__table_"{__hash_table<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, std::__unordered_map_hasher<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, std::hash<TSCEInternalCellReference>, std::equal_to<TSCEInternalCellReference>, true>, std::__unordered_map_equal<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, std::equal_to<TSCEInternalCellReference>, std::hash<TSCEInternalCellReference>, true>, std::allocator<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, std::hash<TSCEInternalCellReference>, std::equal_to<TSCEInternalCellReference>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, std::equal_to<TSCEInternalCellReference>, std::hash<TSCEInternalCellReference>, true>>="__value_"f}}}
@52@0:8r^{TSCEGrid=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}16@24i32^{TSCEEvaluationContext=}36B44B48
{TSCETaggedDecimalList="_list"{vector<TSCETaggedDecimal, std::allocator<TSCETaggedDecimal>>="__begin_"^{TSCETaggedDecimal}"__end_"^{TSCETaggedDecimal}"__end_cap_"{__compressed_pair<TSCETaggedDecimal *, std::allocator<TSCETaggedDecimal>>="__value_"^{TSCETaggedDecimal}}}"_startIdx"Q"_size"Q}
@24@0:8r^{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}16
@24@0:8r^{TSKUIDStruct=QQ}16
v40@0:8r^{TSUCellCoord=ISBB}16r^{TSKUIDStruct=QQ}24r^{TSKUIDStruct=QQ}32
v32@0:8r^{TSUCellCoord=ISBB}16@24
v24@0:8r^{TSUCellCoord=ISBB}16
v32@0:8^v16r^{TSKUIDStruct=QQ}24
v32@0:8^v16r^v24
B40@0:8^v16r^{TSKUIDStruct=QQ}24r^v32
@32@0:8r^v16r^{TSKUIDStruct=QQ}24
v32@0:8^v16@24
{TSKUIDStruct=QQ}16@0:8
v32@0:8{TSKUIDStruct=QQ}16
{TSKUIDStruct="_lower"Q"_upper"Q}
{unordered_map<TSKUIDStruct, TSCECellCoordSet, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECellCoordSet>>>="__table_"{__hash_table<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>="__value_"f}}}
{unordered_map<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>>>="__table_"{__hash_table<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>="__value_"f}}}
{unordered_map<TSUCellCoord, std::unordered_set<TSCEUuidPair>, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, std::allocator<std::pair<const TSUCellCoord, std::unordered_set<TSCEUuidPair>>>>="__table_"{__hash_table<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, std::__unordered_map_hasher<TSUCellCoord, std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, true>, std::__unordered_map_equal<TSUCellCoord, std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, std::equal_to<TSUCellCoord>, std::hash<TSUCellCoord>, true>, std::allocator<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSUCellCoord, std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSUCellCoord, std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, std::equal_to<TSUCellCoord>, std::hash<TSUCellCoord>, true>>="__value_"f}}}
^v28@0:8@16B24
v32@0:8@16@?24
{TSCENameTrieNode="_children"{unordered_map<unsigned short, TSCENameTrieNode *, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCENameTrieNode *>>>="__table_"{__hash_table<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCENameTrieNode *>, std::hash<unsigned short>, std::equal_to<unsigned short>, true>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCENameTrieNode *>, std::equal_to<unsigned short>, std::hash<unsigned short>, true>, std::allocator<std::__hash_value_type<unsigned short, TSCENameTrieNode *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCENameTrieNode *>, std::hash<unsigned short>, std::equal_to<unsigned short>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCENameTrieNode *>, std::equal_to<unsigned short>, std::hash<unsigned short>, true>>="__value_"f}}}"_name"@"NSString"}
@"TSULocale"
v20@0:8S16
v24@0:8r^{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}16
v28@0:8r^v16S24
v24@0:8r^{TSCEInternalRangeReference={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}S}16
v40@0:8^v16@24d32
B24@0:8d16
B24@0:8r^{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}16
@"TSCECalculationEngine"
@"TSCECellDirtier"
{TSUIndexSet="_isEmpty"b1"_hasSingleRange"b1"_singleRange"{TSUIndexRange="_begin"q"_end"q}"_multipleRanges"^{?}}
{TSCEInternalCellRefSet="_coordsForOwnerId"{unordered_map<unsigned short, TSCECellCoordSet, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCECellCoordSet>>>="__table_"{__hash_table<std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>, true>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>, true>, std::allocator<std::__hash_value_type<unsigned short, TSCECellCoordSet>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>, true>>="__value_"f}}}}
{TSCECellRefSet="_coordsForOwnerUid"{map<TSKUIDStruct, TSCECellCoordSet, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECellCoordSet>>>="__tree_"{__tree<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>, std::allocator<std::__value_type<TSKUIDStruct, TSCECellCoordSet>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>>="__value_"Q}}}}
{vector<TSCEInternalRangeReference, std::allocator<TSCEInternalRangeReference>>="__begin_"^{TSCEInternalRangeReference}"__end_"^{TSCEInternalRangeReference}"__end_cap_"{__compressed_pair<TSCEInternalRangeReference *, std::allocator<TSCEInternalRangeReference>>="__value_"^{TSCEInternalRangeReference}}}
v52@0:8^v16r^v24r^v32C40B44B48
B36@0:8^v16r^v24B32
@52@0:8{TSKUIDStruct=QQ}16{TSKUIDStruct=QQ}32C48
@36@0:8r^v16r^v24C32
v24@0:8^v16
B24@0:8r^v16
B36@0:8r^v16r^v24B32
C16@0:8
v20@0:8C16
{TSKUIDStructVectorTemplate<TSKUIDStruct>="__begin_"^{TSKUIDStruct}"__end_"^{TSKUIDStruct}"__end_cap_"{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>="__value_"^{TSKUIDStruct}}}
v48@0:8{TSKUIDStruct=QQ}16{TSKUIDStruct=QQ}32
Q40@0:8^{?=Q^@^Q[5Q]}16^@24Q32
v40@0:8r^v16r^v24B32B36
v32@0:8r^v16r^v24
v28@0:8r^v16B24
{TSUPreserveFlags=C}16@0:8
v17@0:8{TSUPreserveFlags=C}16
{TSUPreserveFlags="_flags"C}
@"NSMutableArray"
@68@0:8{TSKUIDStruct=QQ}16{TSKUIDStruct=QQ}32{TSKUIDStruct=QQ}48i64
@24@0:8Q16
^{TSCEASTNodeArray=*QQB}24@0:8Q16
^{TSCERegionNode=Q^{TSCERegionNode}^v}
{vector<TSCEASTNodeArray *, std::allocator<TSCEASTNodeArray *>>="__begin_"^^{TSCEASTNodeArray}"__end_"^^{TSCEASTNodeArray}"__end_cap_"{__compressed_pair<TSCEASTNodeArray **, std::allocator<TSCEASTNodeArray *>>="__value_"^^{TSCEASTNodeArray}}}
v32@0:8r^{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}16@24
B40@0:8^v16r^v24r^{TSKUIDStruct=QQ}32
v32@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24
{unordered_map<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>>>="__table_"{__hash_table<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>="__value_"f}}}
{unordered_map<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>, std::hash<TSCEInternalCellReference>, std::equal_to<TSCEInternalCellReference>, std::allocator<std::pair<const TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>>>="__table_"{__hash_table<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, std::__unordered_map_hasher<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, std::hash<TSCEInternalCellReference>, std::equal_to<TSCEInternalCellReference>, true>, std::__unordered_map_equal<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, std::equal_to<TSCEInternalCellReference>, std::hash<TSCEInternalCellReference>, true>, std::allocator<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, std::hash<TSCEInternalCellReference>, std::equal_to<TSCEInternalCellReference>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, std::equal_to<TSCEInternalCellReference>, std::hash<TSCEInternalCellReference>, true>>="__value_"f}}}
{TSUModelColumnIndex=S}18@0:8{TSUViewColumnIndex=S}16
{TSUModelRowIndex=I}20@0:8{TSUViewRowIndex=I}16
{TSUModelColumnIndex=S}18@0:8{TSUChromeColumnIndex=S}16
{TSUModelRowIndex=I}20@0:8{TSUChromeRowIndex=I}16
{TSUChromeColumnIndex=S}18@0:8{TSUModelColumnIndex=S}16
{TSUChromeRowIndex=I}20@0:8{TSUModelRowIndex=I}16
{TSUViewColumnIndex=S}18@0:8{TSUModelColumnIndex=S}16
{TSUViewRowIndex=I}20@0:8{TSUModelRowIndex=I}16
{TSUChromeColumnIndex=S}18@0:8{TSUViewColumnIndex=S}16
{TSUChromeRowIndex=I}20@0:8{TSUViewRowIndex=I}16
{TSUViewColumnIndex=S}18@0:8{TSUChromeColumnIndex=S}16
{TSUViewRowIndex=I}20@0:8{TSUChromeRowIndex=I}16
{TSUModelCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUViewCellCoord={TSUCellCoord=ISBB}}16
{TSUModelCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUChromeCellCoord={TSUCellCoord=ISBB}}16
{TSUChromeCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16
{TSUChromeCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUViewCellCoord={TSUCellCoord=ISBB}}16
{TSUViewCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16
{TSUViewCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUChromeCellCoord={TSUCellCoord=ISBB}}16
{RefTypeHolder<TSCECellRef, 0>={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}}24@0:8r^v16
{RefTypeHolder<TSCECellRef, 2>={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}}24@0:8r^v16
{RefTypeHolder<TSCECellRef, 1>={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}}24@0:8r^v16
{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}}24@0:8r^v16
{RefTypeHolder<TSCERangeRef, 1>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}}24@0:8r^v16
r^{TSKUIDStruct=QQ}16@0:8
@"NSIndexSet"24@0:8@"NSIndexSet"16
@"TSCECellTractRef"24@0:8@"TSCECellTractRef"16
@"TSKShuffleMapping"24@0:8@"TSKShuffleMapping"16
@48@0:8r^{TSKUIDStruct=QQ}16@24@32@40
@40@0:8r^{TSKUIDStruct=QQ}16@24@32
v24@0:8I16I20
v24@0:8S16S20
{unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int>>>="__table_"{__hash_table<std::__hash_value_type<unsigned int, unsigned int>, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, unsigned int>, std::hash<unsigned int>, std::equal_to<unsigned int>, true>, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, unsigned int>, std::equal_to<unsigned int>, std::hash<unsigned int>, true>, std::allocator<std::__hash_value_type<unsigned int, unsigned int>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned int>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned int>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned int>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned int>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned int>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned int>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned int, unsigned int>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned int>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, unsigned int>, std::hash<unsigned int>, std::equal_to<unsigned int>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, unsigned int>, std::equal_to<unsigned int>, std::hash<unsigned int>, true>>="__value_"f}}}
@"NSIndexSet"
{unordered_map<unsigned short, unsigned short, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, unsigned short>>>="__table_"{__hash_table<std::__hash_value_type<unsigned short, unsigned short>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, unsigned short>, std::hash<unsigned short>, std::equal_to<unsigned short>, true>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, unsigned short>, std::equal_to<unsigned short>, std::hash<unsigned short>, true>, std::allocator<std::__hash_value_type<unsigned short, unsigned short>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, unsigned short>, std::hash<unsigned short>, std::equal_to<unsigned short>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, unsigned short>, std::equal_to<unsigned short>, std::hash<unsigned short>, true>>="__value_"f}}}
@20@0:8B16
@24@0:8^Q16
@24@0:8B16B20
B24@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16
{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}16@0:8
v32@0:8{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}16
I16@0:8
v20@0:8I16
{TSCERangeCoordinate="_topLeft"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}"_bottomRight"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}}
{TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}16@0:8
@32@0:8r^v16@24
{TSKUIDStructMap="__table_"{__hash_table<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>="__value_"f}}}
@32@0:8r^{TSKUIDStruct=QQ}16r^v24
c16@0:8
c24@0:8^v16
{TSCEGridDimensions=II}16@0:8
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}32@0:8r^{TSCEGridCoord=II}16^{TSCEGridAccessContext=@^{TSCEFunctionArgSpec}i^{TSCEEvaluationContext}BBBBBCC}24
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}32@0:8Q16^{TSCEGridAccessContext=@^{TSCEFunctionArgSpec}i^{TSCEEvaluationContext}BBBBBCC}24
{TSCEGrid=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}24@0:8^{TSCEGridAccessContext=@^{TSCEFunctionArgSpec}i^{TSCEEvaluationContext}BBBBBCC}16
{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}32@0:8Q16^{TSCEGridAccessContext=@^{TSCEFunctionArgSpec}i^{TSCEEvaluationContext}BBBBBCC}24
{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}24@0:8^{TSCEGridAccessContext=@^{TSCEFunctionArgSpec}i^{TSCEEvaluationContext}BBBBBCC}16
B28@0:8i16^v20
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}40@0:8r^{TSCEGridCoord=II}16i24i28^{TSCEGridAccessContext=@^{TSCEFunctionArgSpec}i^{TSCEEvaluationContext}BBBBBCC}32
^{TSCEASTNodeArray=*QQB}40@0:8@16i24B28^v32
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16@0:8
{TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}SB}36@0:8@16i24^v28
@36@0:8@16i24^v28
B36@0:8@16i24^v28
@36@0:8@16i24@28
{TSCEReferenceValue=^^?@{TSUCellCoord=ISBB}{TSUPreserveFlags=C}BB}36@0:8@16i24^v28
c24@0:8^{TSCEEvaluationContext=}16
{vector<TSCEGrid, std::allocator<TSCEGrid>>="__begin_"^{TSCEGrid}"__end_"^{TSCEGrid}"__end_cap_"{__compressed_pair<TSCEGrid *, std::allocator<TSCEGrid>>="__value_"^{TSCEGrid}}}
@28@0:8r^v16c24
@32@0:8r^v16c24B28
@40@0:8r^v16c24B28r^{TSCEGridDimensions=II}32
@"TSCEValueGrid"
@28@0:8r^{TSCEReferenceValue=^^?@{TSUCellCoord=ISBB}{TSUPreserveFlags=C}BB}16C24
@"TSCEEvalRef"
{TSCECellTractRefCore="_columns"{TSUIndexSet="_isEmpty"b1"_hasSingleRange"b1"_singleRange"{TSUIndexRange="_begin"q"_end"q}"_multipleRanges"^{?}}"_rows"{TSUIndexSet="_isEmpty"b1"_hasSingleRange"b1"_singleRange"{TSUIndexRange="_begin"q"_end"q}"_multipleRanges"^{?}}"_tableUID"{TSKUIDStruct="_lower"Q"_upper"Q}"_spanType"C"_preserveFlags"{TSUPreserveFlags="_flags"C}"_preserveRectangular"B"_mixedColumnStartedWithPreserve"B"_mixedRowStartedWithPreserve"B}
@24@0:8q16
@32@0:8q16@24
@36@0:8q16@24i32
@28@0:8@16i24
@32@0:8{TSKUIDStruct=QQ}16
@132@0:8{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16@112i120@124
v132@0:8{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16@112i120@124
v64@0:8{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16@48r^{TSKUIDStruct=QQ}56
v72@0:8{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16@48r^{TSKUIDStruct=QQ}56B64B68
@56@0:8{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16r^{TSKUIDStruct=QQ}48
v40@0:8i16@20d28B36
v52@0:8i16@20d28B36d40B48
v60@0:8@16B24B28@32B40i44i48@52
v36@0:8@16B24@28
v28@0:8@16i24
v56@0:8{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16r^{TSKUIDStruct=QQ}48
v20@0:8i16
v48@0:8{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16
v28@0:8@16c24
v40@0:8@16i24i28B32B36
v32@0:8@16i24i28
v32@0:8@16@24
v56@0:8@16{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}24
v56@0:8{vector<TSCEReferenceValue, std::allocator<TSCEReferenceValue>>=^{TSCEReferenceValue}^{TSCEReferenceValue}{__compressed_pair<TSCEReferenceValue *, std::allocator<TSCEReferenceValue>>=^{TSCEReferenceValue}}}16r^{TSKUIDStruct=QQ}40@48
v28@0:8@16B24
v24@0:8S16s20
v24@0:8c16c20
B32@0:8@16^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}24
@48@0:8@16{TSKUIDStruct=QQ}24{TSUCellCoord=ISBB}40
{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16@0:8
^{TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}SB}36@0:8@16i24^{TSCEWarningReportingContext=BB@}28
@36@0:8@16i24^{TSCEWarningReportingContext=BB@}28
B36@0:8@16i24^{TSCEWarningReportingContext=BB@}28
{TSCEGrid=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}44@0:8@16i24^{TSCEEvaluationContext=}28r^{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}36
^{TSCEReferenceValue=^^?@{TSUCellCoord=ISBB}{TSUPreserveFlags=C}BB}36@0:8@16i24^{TSCEWarningReportingContext=BB@}28
^{TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}SB}16@0:8
^{TSCEGrid=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}16@0:8
^{TSCEReferenceValue=^^?@{TSUCellCoord=ISBB}{TSUPreserveFlags=C}BB}16@0:8
B112@0:8{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16
q16@0:8
v24@0:8q16
@"NSMutableDictionary"
@36@0:8S16S20I24@28
^{TSCECellRecordTile=SI^{TSCECellRecord}QQQ@}16@0:8
^{TSCECellRecordTile=SI^{TSCECellRecord}QQQ@}
q20@0:8i16
@28@0:8d16i24
@64@0:8q16q24q32q40q48q56
@96@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24r^{TSKUIDStruct=QQ}32r^{TSKUIDStruct=QQ}40r^{TSKUIDStruct=QQ}48r^{TSKUIDStruct=QQ}56r^{TSKUIDStruct=QQ}64r^{TSKUIDStruct=QQ}72r^{TSKUIDStruct=QQ}80r^{TSKUIDStruct=QQ}88
{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}
v24@0:8^{TSCEASTNodeArray=*QQB}16
@36@0:8^{TSCEASTNodeArray=*QQB}16@24B32
^{TSCEASTNodeArray=*QQB}24@0:8^{TSCEParser=@^{TSCELexer}^{TSCEASTNodeArray}^v@{TSKUIDStruct=QQ}{TSUCellCoord=ISBB}BB}16
^{TSCEASTNodeArray=*QQB}40@0:8^{TSCEParser=@^{TSCELexer}^{TSCEASTNodeArray}^v@{TSKUIDStruct=QQ}{TSUCellCoord=ISBB}BB}16@24@32
@128@0:8{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16@112^v120
i24@0:8@16
B120@0:8{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16^v112
{TSCENumberValue="_vptr$TSCEAbstractValue"^^?"_decimal"{TSUDecimal="_decimal"{?="w"[2Q]}}"_format"{TSCEFormat="_tskFormat"@"TSKFormat""_formatType"I"_formatState"C"_durationFormat"{TSCEDurationFormat="useAutomaticUnits"b1"durationUnitSmallest"b5"durationUnitLargest"b5"durationStyle"b2}"_baseFormat"{TSCEBaseFormat="base"C"basePlaces"C"baseUseMinusSign"B}"_fractionFormat"{TSCEFractionFormat="fractionAccuracy"c}"_numberFormat"{TSCENumberFormat="decimalPlaces"C"negativeStyle"b3"showThousandsSeparator"b1"useAccountingStyle"b1"currencyCodeIndex"S}}"_baseUnit"S"_isUnitlessZero"B}
@"TSCERegexMatcher"
@112@0:8{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16
{TSCEValue=""(?="DONT_USE_fakeTSCENumberValueStandIn"{?="_decimal"{?="w"[2Q]}"_formatFake"[24C]"_baseUnit"S"_isUnitlessZero"B}"_buff"[9Q])"_type"C}
{unordered_set<TSUCellCoord, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, std::allocator<TSUCellCoord>>={__hash_table<TSUCellCoord, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, std::allocator<TSUCellCoord>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *> *>, std::allocator<std::__hash_node<TSUCellCoord, void *>>>={__hash_node_base<std::__hash_node<TSUCellCoord, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSUCellCoord>>=Q}{__compressed_pair<float, std::equal_to<TSUCellCoord>>=f}}}16@0:8
v24@0:8{TSUCellCoord=ISBB}16
{vector<TSUCellCoord, std::allocator<TSUCellCoord>>="__begin_"^{TSUCellCoord}"__end_"^{TSUCellCoord}"__end_cap_"{__compressed_pair<TSUCellCoord *, std::allocator<TSUCellCoord>>="__value_"^{TSUCellCoord}}}
@"NSObject<OS_dispatch_semaphore>"
v32@0:8@16r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}24
{unordered_map<TSCECellRef, TSCEFormulaObject *, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, std::allocator<std::pair<const TSCECellRef, TSCEFormulaObject *>>>="__table_"{__hash_table<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, std::__unordered_map_hasher<TSCECellRef, std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, true>, std::__unordered_map_equal<TSCECellRef, std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, std::equal_to<TSCECellRef>, std::hash<TSCECellRef>, true>, std::allocator<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCECellRef, std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCECellRef, std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, std::equal_to<TSCECellRef>, std::hash<TSCECellRef>, true>>="__value_"f}}}
{unordered_set<TSCECellRef, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, std::allocator<TSCECellRef>>="__table_"{__hash_table<TSCECellRef, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, std::allocator<TSCECellRef>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<TSCECellRef, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCECellRef, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCECellRef, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCECellRef, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCECellRef, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCECellRef, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCECellRef, void *> *>, std::allocator<std::__hash_node<TSCECellRef, void *>>>="__value_"{__hash_node_base<std::__hash_node<TSCECellRef, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::hash<TSCECellRef>>="__value_"Q}"__p3_"{__compressed_pair<float, std::equal_to<TSCECellRef>>="__value_"f}}}
{unordered_set<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>>="__table_"{__hash_table<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *>, std::allocator<std::__hash_node<TSKUIDStruct, void *>>>="__value_"{__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::hash<TSKUIDStruct>>="__value_"Q}"__p3_"{__compressed_pair<float, std::equal_to<TSKUIDStruct>>="__value_"f}}}
v36@0:8@16r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}24S32
{unordered_set<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>>={__hash_table<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *>, std::allocator<std::__hash_node<TSKUIDStruct, void *>>>={__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSKUIDStruct>>=Q}{__compressed_pair<float, std::equal_to<TSKUIDStruct>>=f}}}20@0:8S16
{vector<TSCESubFormulaOwnerIndex, std::allocator<TSCESubFormulaOwnerIndex>>=^S^S{__compressed_pair<TSCESubFormulaOwnerIndex *, std::allocator<TSCESubFormulaOwnerIndex>>=^S}}16@0:8
Q20@0:8S16
v28@0:8S16@?20
@24@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16
{unordered_map<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *, std::hash<TSCESubFormulaOwnerIndex>, std::equal_to<TSCESubFormulaOwnerIndex>, std::allocator<std::pair<const TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>>>="__table_"{__hash_table<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, std::__unordered_map_hasher<TSCESubFormulaOwnerIndex, std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, std::hash<TSCESubFormulaOwnerIndex>, std::equal_to<TSCESubFormulaOwnerIndex>, true>, std::__unordered_map_equal<TSCESubFormulaOwnerIndex, std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, std::equal_to<TSCESubFormulaOwnerIndex>, std::hash<TSCESubFormulaOwnerIndex>, true>, std::allocator<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCESubFormulaOwnerIndex, std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, std::hash<TSCESubFormulaOwnerIndex>, std::equal_to<TSCESubFormulaOwnerIndex>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCESubFormulaOwnerIndex, std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, std::equal_to<TSCESubFormulaOwnerIndex>, std::hash<TSCESubFormulaOwnerIndex>, true>>="__value_"f}}}
{unordered_map<TSCECellRef, NSString *, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, std::allocator<std::pair<const TSCECellRef, NSString *>>>="__table_"{__hash_table<std::__hash_value_type<TSCECellRef, NSString *>, std::__unordered_map_hasher<TSCECellRef, std::__hash_value_type<TSCECellRef, NSString *>, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, true>, std::__unordered_map_equal<TSCECellRef, std::__hash_value_type<TSCECellRef, NSString *>, std::equal_to<TSCECellRef>, std::hash<TSCECellRef>, true>, std::allocator<std::__hash_value_type<TSCECellRef, NSString *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, NSString *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, NSString *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, NSString *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, NSString *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, NSString *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, NSString *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, NSString *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCECellRef, NSString *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, NSString *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCECellRef, std::__hash_value_type<TSCECellRef, NSString *>, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCECellRef, std::__hash_value_type<TSCECellRef, NSString *>, std::equal_to<TSCECellRef>, std::hash<TSCECellRef>, true>>="__value_"f}}}
@32@0:8@16B24B28
@28@0:8@16B24
{_NSRange=QQ}24@0:8@16
{_NSRange=QQ}32@0:8@16q24
{_NSRange=QQ}40@0:8@16q24o^q32
{_NSRange=QQ}48@0:8@16Q24{_NSRange=QQ}32
@48@0:8@16Q24{_NSRange=QQ}32
Q48@0:8@16Q24{_NSRange=QQ}32
@56@0:8@16Q24{_NSRange=QQ}32@48
@"NSRegularExpression"
v32@0:8@16r^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}24
v24@0:8Q16
{vector<NSString *, std::allocator<NSString *>>="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<NSString *__strong *, std::allocator<NSString *>>="__value_"^@}}
{vector<TSCEValue, std::allocator<TSCEValue>>="__begin_"^{TSCEValue}"__end_"^{TSCEValue}"__end_cap_"{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>="__value_"^{TSCEValue}}}
{vector<bool, std::allocator<bool>>="__begin_"^Q"__size_"Q"__cap_alloc_"{__compressed_pair<unsigned long, std::allocator<unsigned long>>="__value_"Q}}
@40@0:8{TSUCellCoord=ISBB}16{TSKUIDStruct=QQ}24
@32@0:8{TSUCellCoord=ISBB}16@24
{TSUCellCoord=ISBB}16@0:8
{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16@0:8
{TSCECellRef="coordinate"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}"_tableUID"{TSKUIDStruct="_lower"Q"_upper"Q}}
@24@0:8r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16
@48@0:8{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}16{TSKUIDStruct=QQ}32
@40@0:8{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}16@32
@40@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16@32
{TSCERangeRef="range"{TSCERangeCoordinate="_topLeft"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}"_bottomRight"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}}"_tableUID"{TSKUIDStruct="_lower"Q"_upper"Q}}
@32@0:8r^{TSKUIDStruct=QQ}16r^{TSUPreserveFlags=C}24
@32@0:8@16r^{TSUCellCoord=ISBB}24
@32@0:8r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16r^{TSUCellCoord=ISBB}24
v24@0:8r^{TSUIndexRange=qq}16
r^{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}16@0:8
v24@0:8r^{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}16
v20@0:8s16
{TSCERelativeCellCoordinate=isBB}16@0:8
{?={TSCERelativeCellCoordinate=isBB}{TSCERelativeCellCoordinate=isBB}}24@0:8r^{TSUCellCoord=ISBB}16
v40@0:8@16r^{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}24r^{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}32
@32@0:8r^{TSUCellCoord=ISBB}16^B24
@24@0:8r^{TSUCellCoord=ISBB}16
v24@0:8r^{TSUColumnRowOffset=ii}16
@"TSCECellTractRef"
{vector<TSU::UUIDData<TSP::UUIDData>, std::allocator<TSU::UUIDData<TSP::UUIDData>>>=^v^v{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::allocator<TSU::UUIDData<TSP::UUIDData>>>=^v}}16@0:8
B32@0:8{TSKUIDStruct=QQ}16
@28@0:8S16@20
v32@0:8r^{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16r^{TSUCellCoord=ISBB}24
B24@0:8r^{TSUCellCoord=ISBB}16
B32@0:8r^{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16r^{TSUCellCoord=ISBB}24
v32@0:8r^{TSUCellCoord=ISBB}16@?24
{map<TSUCellCoord, std::set<TSUCellRect>, std::less<TSUCellCoord>, std::allocator<std::pair<const TSUCellCoord, std::set<TSUCellRect>>>>="__tree_"{__tree<std::__value_type<TSUCellCoord, std::set<TSUCellRect>>, std::__map_value_compare<TSUCellCoord, std::__value_type<TSUCellCoord, std::set<TSUCellRect>>, std::less<TSUCellCoord>, true>, std::allocator<std::__value_type<TSUCellCoord, std::set<TSUCellRect>>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<TSUCellCoord, std::set<TSUCellRect>>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<TSUCellCoord, std::__value_type<TSUCellCoord, std::set<TSUCellRect>>, std::less<TSUCellCoord>, true>>="__value_"Q}}}
{TSCEFunctionArgSpec=ciCi{unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={__hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>>={__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSCEArgumentType>>=Q}{__compressed_pair<float, std::equal_to<TSCEArgumentType>>=f}}}{vector<TSCEValue, std::allocator<TSCEValue>>=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>=^{TSCEValue}}}s@ddsBBBBBBB}28@0:8c16i20C24
{TSCEFunctionArgSpec=ciCi{unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={__hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>>={__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSCEArgumentType>>=Q}{__compressed_pair<float, std::equal_to<TSCEArgumentType>>=f}}}{vector<TSCEValue, std::allocator<TSCEValue>>=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>=^{TSCEValue}}}s@ddsBBBBBBB}32@0:8c16i20C24i28
{TSCEFunctionArgSpec=ciCi{unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={__hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>>={__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSCEArgumentType>>=Q}{__compressed_pair<float, std::equal_to<TSCEArgumentType>>=f}}}{vector<TSCEValue, std::allocator<TSCEValue>>=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>=^{TSCEValue}}}s@ddsBBBBBBB}44@0:8c16i20C24r^v28B36B40
{TSCEFunctionArgSpec=ciCi{unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={__hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>>={__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSCEArgumentType>>=Q}{__compressed_pair<float, std::equal_to<TSCEArgumentType>>=f}}}{vector<TSCEValue, std::allocator<TSCEValue>>=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>=^{TSCEValue}}}s@ddsBBBBBBB}40@0:8c16i20C24r^v28s36
{TSCEFunctionArgSpec=ciCi{unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={__hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>>={__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSCEArgumentType>>=Q}{__compressed_pair<float, std::equal_to<TSCEArgumentType>>=f}}}{vector<TSCEValue, std::allocator<TSCEValue>>=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>=^{TSCEValue}}}s@ddsBBBBBBB}44@0:8c16i20C24i28r^v32B40
{TSCEFunctionArgSpec=ciCi{unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={__hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>>={__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSCEArgumentType>>=Q}{__compressed_pair<float, std::equal_to<TSCEArgumentType>>=f}}}{vector<TSCEValue, std::allocator<TSCEValue>>=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>=^{TSCEValue}}}s@ddsBBBBBBB}68@0:8c16i20C24d28B36d40B48r^v52B60B64
{TSCEFunctionArgSpec=ciCi{unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={__hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>>={__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSCEArgumentType>>=Q}{__compressed_pair<float, std::equal_to<TSCEArgumentType>>=f}}}{vector<TSCEValue, std::allocator<TSCEValue>>=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>=^{TSCEValue}}}s@ddsBBBBBBB}96@0:8c16i20C24i28d32B40d44B52B56r^v60B68B72r^v76s84B88B92
{TSCEFunctionArgSpec="_argumentType"c"_accessorMode"i"_rangeContext"C"_argumentContext"i"_disallowedTypes"{unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>="__table_"{__hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>>="__value_"{__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::hash<TSCEArgumentType>>="__value_"Q}"__p3_"{__compressed_pair<float, std::equal_to<TSCEArgumentType>>="__value_"f}}}"_modeValues"{vector<TSCEValue, std::allocator<TSCEValue>>="__begin_"^{TSCEValue}"__end_"^{TSCEValue}"__end_cap_"{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>="__value_"^{TSCEValue}}}"_defaultModeIndex"s"_functionSpec"@"TSCEFunctionSpec""_minValue"d"_maxValue"d"_index"s"_minInclusive"B"_maxInclusive"B"_disallowDuration"B"_disallowCurrency"B"_isInteger"B"_forceArrayMode"B"_referenceForGeometryOnly"B}
{TSKUIDStruct=QQ}20@0:8i16
i24@0:8r^{TSKUIDStruct=QQ}16
B24@0:8r^{TSKUIDStruct=QQ}16
@76@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24r^{TSKUIDStruct=QQ}32r^{TSKUIDStruct=QQ}40C48C52S56r^{TSUPreserveFlags=C}60s68C72
@68@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24r^{TSKUIDStruct=QQ}32r^{TSKUIDStruct=QQ}40C48C52S56r^{TSUPreserveFlags=C}60
@52@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24r^{TSKUIDStruct=QQ}32C40C44S48
@48@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24r^{TSKUIDStruct=QQ}32C40C44
v40@0:8@16{TSKUIDStruct=QQ}24
v48@0:8@16@24{TSKUIDStruct=QQ}32
v40@0:8@"NSString"16{TSKUIDStruct=QQ}24
v48@0:8@"NSString"16@"NSString"24{TSKUIDStruct=QQ}32
@40@0:8@16@24^i32
@48@0:8^{TSCETableResolver=^^?}16r^{TSUCellCoord=ISBB}24r^{TSUCellCoord=ISBB}32r^{TSUPreserveFlags=C}40
@32@0:8^{TSCETableResolver=^^?}16r^{TSCECellTractRefCore={TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSKUIDStruct=QQ}C{TSUPreserveFlags=C}BBB}24
@56@0:8^v16r^{TSKUIDStruct=QQ}24r^{TSUCellCoord=ISBB}32r^{TSUCellCoord=ISBB}40r^{TSUPreserveFlags=C}48
^{TSCETableResolver=^^?}16@0:8
r^{TSCECellTractRefCore={TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSKUIDStruct=QQ}C{TSUPreserveFlags=C}BBB}16@0:8
@32@0:8r^{TSCEGridCoord=II}16r^{TSCECellTractRefCore={TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSKUIDStruct=QQ}C{TSUPreserveFlags=C}BBB}24
{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}24@0:8{TSUCellCoord=ISBB}16
C20@0:8B16
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}32@0:8^v16B24B28
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}32@0:8r^{TSUCellCoord=ISBB}16B24B28
{shared_ptr<TSCEValue>=^{TSCEValue}^{__shared_weak_count}}16@0:8
v32@0:8{shared_ptr<TSCEValue>=^{TSCEValue}^{__shared_weak_count}}16
^{TSCETableResolver=^^?}
{shared_ptr<TSCEValue>="__ptr_"^{TSCEValue}"__cntrl_"^{__shared_weak_count}}
{TSCERecalculationState=C}33@0:8{TSUCellCoord=ISBB}16@24{TSCERecalculationState=C}32
{TSCERecalculationState=C}33@0:8r^v16@24{TSCERecalculationState=C}32
@"<TSCEReferenceResolving>"16@0:8
v24@0:8@"TSCECalculationEngine"16
{TSCERecalculationState=C}33@0:8{TSUCellCoord=ISBB}16@"TSCECalculationEngine"24{TSCERecalculationState=C}32
{TSCERecalculationState=C}33@0:8r^v16@"TSCECalculationEngine"24{TSCERecalculationState=C}32
@32@0:8@16@24
@40@0:8r^{TSKUIDStruct=QQ}16{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}24
v48@0:8{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}16r^{TSKUIDStruct=QQ}32@40
v40@0:8{TSUCellCoord=ISBB}16r^{TSKUIDStruct=QQ}24@32
@24@0:8{TSUCellCoord=ISBB}16
@"TSCETrackedReferenceStore"
@28@0:8Q16B24
B32@0:8@16@24
{TSCEAnyRef=S{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}C}{TSKUIDStruct=QQ}B@}16@0:8
@32@0:8@16r^{TSKUIDStruct=QQ}24
@45@0:8@16r^{TSKUIDStruct=QQ}24{TSUPreserveFlags=C}32@33B41
@45@0:8@16@24{TSUPreserveFlags=C}32@33B41
{TSCEAnyRef="_refType"S"_spanningRef"{TSCESpanningRangeRef="rangeRef"{TSCERangeRef="range"{TSCERangeCoordinate="_topLeft"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}"_bottomRight"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}}"_tableUID"{TSKUIDStruct="_lower"Q"_upper"Q}}"rangeContext"C}"_uuidValue"{TSKUIDStruct="_lower"Q"_upper"Q}"_couldBeIntersection"B"_refSet"@"TSCEReferenceSetWrapper"}
@32@0:8Q16@24
@40@0:8@16@24Q32
@48@0:8Q16@24@32Q40
v72@0:8@16^q24^q32^q40^q48^q56^q64
v48@0:8@16^q24^q32^q40
@"NSCalendar"
^{TSCEASTNodeArray=*QQB}16@0:8
{?=b48}16@0:8
^{TSCEASTNodeArray=*QQB}
{?="formulaID"b48}
@45@0:8@16r^{TSKUIDStruct=QQ}24{TSUPreserveFlags=C}32C33C37S41
@33@0:8@16r^{TSKUIDStruct=QQ}24{TSUPreserveFlags=C}32
@"TSCEUndoTract"
{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}24@0:8r^{TSKUIDStruct=QQ}16
@32@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24
@40@0:8r^v16@24r^{TSKUIDStruct=QQ}32
Q24@0:8i16i20
v40@0:8Q16^i24^i32
v36@0:8@16@24B32
v24@0:8d16
v56@0:8{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}16{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}32r^{TSKUIDStruct=QQ}48
i40@0:8{TSKUIDStruct=QQ}16@32
i68@0:8{TSKUIDStruct=QQ}16@32@40{TSKUIDStruct=QQ}48S64
S32@0:8{TSKUIDStruct=QQ}16
S20@0:8S16
@24@0:8[16C]16
^{TSCETableResolver=^^?}24@0:8r^{TSKUIDStruct=QQ}16
^{TSCETableResolver=^^?}20@0:8S16
^{TSCETableResolver=^^?}24@0:8@16
{TSKUIDStruct=QQ}20@0:8S16
{TSKUIDStruct=QQ}28@0:8@16B24
v32@0:8@16r^{TSKUIDStruct=QQ}24
{TSKUIDStruct=QQ}40@0:8{TSKUIDStruct=QQ}16I32B36
v48@0:8@16{TSUCellCoord=ISBB}24{TSKUIDStruct=QQ}32
{TSCERecalculationState=C}41@0:8^v16@24r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32{TSCERecalculationState=C}40
{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16^B24
{vector<TSUCellCoord, std::allocator<TSUCellCoord>>=^{TSUCellCoord}^{TSUCellCoord}{__compressed_pair<TSUCellCoord *, std::allocator<TSUCellCoord>>=^{TSUCellCoord}}}32@0:8r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16r^{TSKUIDStruct=QQ}24
{vector<TSUCellCoord, std::allocator<TSUCellCoord>>=^{TSUCellCoord}^{TSUCellCoord}{__compressed_pair<TSUCellCoord *, std::allocator<TSUCellCoord>>=^{TSUCellCoord}}}36@0:8r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16r^{TSKUIDStruct=QQ}24B32
{vector<TSUCellCoord, std::allocator<TSUCellCoord>>=^{TSUCellCoord}^{TSUCellCoord}{__compressed_pair<TSUCellCoord *, std::allocator<TSUCellCoord>>=^{TSUCellCoord}}}32@0:8r^{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}16r^{TSKUIDStruct=QQ}24
{TSCECellCoordSet={map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>>={__tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>, true>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned short, TSUIndexSet>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>, true>>=Q}}}}24@0:8r^{TSKUIDStruct=QQ}16
Q24@0:8r^{TSKUIDStruct=QQ}16
B24@0:8r^{TSCEAnyRef=S{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}C}{TSKUIDStruct=QQ}B@}16
{TSKUIDStruct=QQ}24@0:8r^{TSKUIDStruct=QQ}16
v32@0:8r^v16r^{TSKUIDStruct=QQ}24
v36@0:8{TSKUIDStruct=QQ}16B32
v56@0:8{_NSRange=QQ}16r^{TSKUIDStruct=QQ}32{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}40
v72@0:8{_NSRange=QQ}16r^{TSKUIDStruct=QQ}32{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}40{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}56
v72@0:8{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}16r^{TSKUIDStruct=QQ}32{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}40{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}56
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}32@0:8@16^v24
v40@0:8@16@24@32
{TSCEInternalCellRefSet={unordered_map<unsigned short, TSCECellCoordSet, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCECellCoordSet>>>={__hash_table<std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>, true>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>, true>, std::allocator<std::__hash_value_type<unsigned short, TSCECellCoordSet>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>, true>>=f}}}}16@0:8
B24@0:8r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16
{TSCEReferenceSet=^^?^{TSCEDependencyTracker}{unordered_map<TSKUIDStruct, std::unordered_set<TSUCellCoord>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSUCellCoord>>>>={__hash_table<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>=f}}}{map<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>>={__tree<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::less<TSKUIDStruct>, true>, std::allocator<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::less<TSKUIDStruct>, true>>=Q}}}^v^v^v^v^v@^v}24@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16
{TSCECellRefSet={map<TSKUIDStruct, TSCECellCoordSet, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECellCoordSet>>>={__tree<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>, std::allocator<std::__value_type<TSKUIDStruct, TSCECellCoordSet>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>>=Q}}}}24@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16
{TSCEReferenceSet=^^?^{TSCEDependencyTracker}{unordered_map<TSKUIDStruct, std::unordered_set<TSUCellCoord>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSUCellCoord>>>>={__hash_table<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>=f}}}{map<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>>={__tree<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::less<TSKUIDStruct>, true>, std::allocator<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::less<TSKUIDStruct>, true>>=Q}}}^v^v^v^v^v@^v}16@0:8
C24@0:8@16
{vector<TSCECellRef, std::allocator<TSCECellRef>>=^{TSCECellRef}^{TSCECellRef}{__compressed_pair<TSCECellRef *, std::allocator<TSCECellRef>>=^{TSCECellRef}}}32@0:8@16r^{TSKUIDStruct=QQ}24
{vector<TSCECategoryRef *, std::allocator<TSCECategoryRef *>>=^@^@{__compressed_pair<TSCECategoryRef *__strong *, std::allocator<TSCECategoryRef *>>=^@}}24@0:8@16
{vector<TSCEValue, std::allocator<TSCEValue>>=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>=^{TSCEValue}}}44@0:8@16r^{TSKUIDStruct=QQ}24C32^@36
@44@0:8@16r^{TSKUIDStruct=QQ}24C32^@36
{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}24@0:8@16
I20@0:8I16
@"TSCERemoteDataCoordinator"
@"NSObject<OS_dispatch_queue>"
@"TSCERemoteDataSpecifierSet"
@"TSUNetworkReachability"
@"NSObject<OS_dispatch_source>"
@"NSEnumerator"16@0:8
@"NSEnumerator"24@0:8Q16
@"NSString"24@0:8@"<TSKModel>"16
v24@0:8@"<TSKModelVisitor>"16
v28@0:8@16S24
v28@0:8@"TSCECalculationEngine"16S24
@"TSPObject<TSCECalculationEngineRegistration>"16@0:8
@"<TSCEFormulaOwning>"16@0:8
@32@0:8d16@24
@32@0:8r^{TSUDecimal={?=[2Q]}}16@24
@32@0:8^{TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}SB}16@24
q24@0:8@16
^{TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}SB}
v32@0:8r^{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}16r^{TSKUIDStruct=QQ}24
@32@0:8r^v16^v24
v36@0:8^v16B24@28
{unordered_map<TSKUIDStruct, TSCEInternalCellRefSet, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCEInternalCellRefSet>>>="__table_"{__hash_table<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>="__value_"f}}}
{unordered_map<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>, std::hash<TSCEInternalCellReference>, std::equal_to<TSCEInternalCellReference>, std::allocator<std::pair<const TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>>>="__table_"{__hash_table<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, std::__unordered_map_hasher<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, std::hash<TSCEInternalCellReference>, std::equal_to<TSCEInternalCellReference>, true>, std::__unordered_map_equal<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, std::equal_to<TSCEInternalCellReference>, std::hash<TSCEInternalCellReference>, true>, std::allocator<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, std::hash<TSCEInternalCellReference>, std::equal_to<TSCEInternalCellReference>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, std::equal_to<TSCEInternalCellReference>, std::hash<TSCEInternalCellReference>, true>>="__value_"f}}}
{vector<TSCEFunctionIndex, std::allocator<TSCEFunctionIndex>>=^S^S{__compressed_pair<TSCEFunctionIndex *, std::allocator<TSCEFunctionIndex>>=^S}}16@0:8
v32@0:8r^v16r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}24
v40@0:8@16r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}24^B32
{unordered_map<TSCEFunctionIndex, TSCEReferenceSet *, std::hash<TSCEFunctionIndex>, std::equal_to<TSCEFunctionIndex>, std::allocator<std::pair<const TSCEFunctionIndex, TSCEReferenceSet *>>>="__table_"{__hash_table<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, std::__unordered_map_hasher<TSCEFunctionIndex, std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, std::hash<TSCEFunctionIndex>, std::equal_to<TSCEFunctionIndex>, true>, std::__unordered_map_equal<TSCEFunctionIndex, std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, std::equal_to<TSCEFunctionIndex>, std::hash<TSCEFunctionIndex>, true>, std::allocator<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCEFunctionIndex, std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, std::hash<TSCEFunctionIndex>, std::equal_to<TSCEFunctionIndex>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCEFunctionIndex, std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, std::equal_to<TSCEFunctionIndex>, std::hash<TSCEFunctionIndex>, true>>="__value_"f}}}
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
v32@0:8q16@24
@"TSUSparseArray"
Q24@0:8r^{TSUCellCoord=ISBB}16
{TSUCellCoord=ISBB}24@0:8Q16
@32@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16@24
@32@0:8r^{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}C}16@24
@"NSLock"
@32@0:8^{TSCEDateValue=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}16@24
^{TSCEDateValue=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}16@0:8
^{TSCEDateValue=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}
v32@0:8@16^v24
{unordered_map<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>>="__value_"f}}}
B24@0:8q16
@"NSMutableSet"
@"TSUPointerKeyDictionary"
@"TSCERemoteDataValueMap"
@"TSUIntToIntDictionary"
@32@0:8^{TSCETableResolver=^^?}16@24
@24@0:8^{TSCETableResolver=^^?}16
v24@0:8^{TSCETableResolver=^^?}16
@"NSArray"
@"TSCEQuotedRefPathSplitter"
@"TSCEAbortObject"
@56@0:8@16^v24S32r^{TSKUIDStruct=QQ}36@44S52
v36@0:8^v16r^{TSUCellCoord=ISBB}24B32
v36@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24S32
@"TSCEUuidReferences"
@"<TSCEFormulaOwning>"
@"<TSCECalculationEngineRegistration>"
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}48@0:8r^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16^v24B32^B36B44
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}40@0:8r^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16^v24B32B36
@72@0:8@16@24r^{TSKUIDStruct=QQ}32r^{TSUCellCoord=ISBB}40^@48^B56B64B68
@48@0:8@16@24r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32^@40
@"TSCEFormulaObject"16@0:8
r^{TSCEASTNodeArray=*QQB}16@0:8
@25@0:8r^{TSCEASTNodeArray=*QQB}16{TSCEFormulaTranslationFlags=C}24
@24@0:8r^{TSCEASTNodeArray=*QQB}16
@33@0:8{TSCEFormulaCreator=@?}16^{TSCEASTNodeArgInfo=i[3i]{TSKUIDStruct=QQ}{TSUCellCoord=ISBB}}24{TSCEFormulaTranslationFlags=C}32
@25@0:8{TSCEFormulaCreator=@?}16{TSCEFormulaTranslationFlags=C}24
@24@0:8{TSCEFormulaCreator=@?}16
@28@0:8r^v16B24
v32@0:8^v16^v24
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}36@0:8^v16B24^B28
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}24@0:8^v16
B48@0:8@16Q24^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}40
v48@0:8^v16@24r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32B40B44
@36@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16@24B32
@32@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16^B24
@48@0:8@16@24r^{TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}BB}32^B40
@40@0:8@16@24r^{TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}BB}32
@40@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24r^{TSKUIDStruct=QQ}32
@17@0:8{TSCEFormulaTranslationFlags=C}16
@32@0:8^{TSCEFormulaRewriteContext=@@{TSCEFormulaRewriteContextRecord={TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}BB}{TSKUIDStruct=QQ}{TSUColumnRowOffset=ii}BBBBBBB}}16@?24
v40@0:8^{TSCEFormulaRewriteContext=@@{TSCEFormulaRewriteContextRecord={TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}BB}{TSKUIDStruct=QQ}{TSUColumnRowOffset=ii}BBBBBBB}}16^B24@?32
@24@0:8^{TSCEFormulaRewriteContext=@@{TSCEFormulaRewriteContextRecord={TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}BB}{TSKUIDStruct=QQ}{TSUColumnRowOffset=ii}BBBBBBB}}16
@32@0:8@16r^{TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}BB}24
@28@0:8^{TSCEFormulaRewriteContext=@@{TSCEFormulaRewriteContextRecord={TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}BB}{TSKUIDStruct=QQ}{TSUColumnRowOffset=ii}BBBBBBB}}16B24
@48@0:8r^v16@24r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32^B40
@40@0:8r^v16@24^B32
@32@0:8r^{TSKUIDStruct=QQ}16@24
@44@0:8r^v16r^v24r^v32B40
@32@0:8r^{TSKUIDStruct=QQ}16^B24
@44@0:8^v16B24^B28*36
@32@0:8@16r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}24
@60@0:8^v16^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}24^B32^B40^@48I56
@40@0:8^v16^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}24^B32
@28@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16C24
@48@0:8@16r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}24r^{TSKUIDStruct=QQ}32{TSUColumnRowOffset=ii}40
@24@0:8{TSUColumnRowOffset=ii}16
C32@0:8^v16@24
{TSCEFormulaTranslationFlags=C}16@0:8
{TSCEFormulaTranslationFlags="_flags"C}
@41@0:8@16r^{TSKUIDStruct=QQ}24{TSUPreserveFlags=C}32^{TSCEFormulaRewriteContext=@@{TSCEFormulaRewriteContextRecord={TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}BB}{TSKUIDStruct=QQ}{TSUColumnRowOffset=ii}BBBBBBB}}33
@40@0:8r^{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}16r^{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}24r^{TSKUIDStruct=QQ}32
@24@0:8r^{TSCECellTractRefCore={TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSKUIDStruct=QQ}C{TSUPreserveFlags=C}BBB}16
@32@0:8r^{TSUCellCoord=ISBB}16r^{TSUCellCoord=ISBB}24
@40@0:8r^{TSUCellCoord=ISBB}16r^{TSUCellCoord=ISBB}24r^{TSKUIDStruct=QQ}32
B24@0:8S16B20
B24@0:8I16B20
{TSUPreserveFlags=C}28@0:8r^{TSUCellCoord=ISBB}16B24
v24@0:8^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16
{TSKUIDStructTract={TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}{TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}}32@0:8@16r^{TSKUIDStruct=QQ}24
v24@0:8r^{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16
{TSUCellCoord=ISBB}24@0:8I16I20
B40@0:8@16@24B32B36
{TSCECellTractRefCore={TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSKUIDStruct=QQ}C{TSUPreserveFlags=C}BBB}16@0:8
v104@0:8{TSCECellTractRefCore={TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSKUIDStruct=QQ}C{TSUPreserveFlags=C}BBB}16
{TSKUIDStruct=QQ}20@0:8I16
I32@0:8{TSKUIDStruct=QQ}16
{TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}24@0:8@16
{TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}32@0:8{_NSRange=QQ}16
{TSKUIDStruct=QQ}24@0:8I16B20
{TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}28@0:8@16B24
{TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}36@0:8{_NSRange=QQ}16B32
{TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}24@0:8@"NSIndexSet"16
@"NSMutableIndexSet"24@0:8r^v16
{TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}28@0:8@"NSIndexSet"16B24
@"NSMutableIndexSet"28@0:8r^v16B24
@"TSCEMutableUIDSet"28@0:8@"NSIndexSet"16B24
{TSCECellRefSet={map<TSKUIDStruct, TSCECellCoordSet, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECellCoordSet>>>={__tree<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>, std::allocator<std::__value_type<TSKUIDStruct, TSCECellCoordSet>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>>=Q}}}}24@0:8@16
{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}24@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16
@32@0:8@"TSPObjectContext"16@"TSCECalculationEngine"24
{TSCECellRefSet={map<TSKUIDStruct, TSCECellCoordSet, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECellCoordSet>>>={__tree<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>, std::allocator<std::__value_type<TSKUIDStruct, TSCECellCoordSet>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>>=Q}}}}24@0:8@"NSString"16
v28@0:8B16@?20
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}24@0:8@16
@36@0:8@16@24B32
v40@0:8@16@24d32
@"<TSCERemoteDataStoreDelegate>"
@"NSOperationQueue"
@24@0:8@?16
{unordered_map<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>>="__value_"f}}}
B20@0:8I16
@20@0:8I16
{unordered_set<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>>={__hash_table<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *>, std::allocator<std::__hash_node<TSKUIDStruct, void *>>>={__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSKUIDStruct>>=Q}{__compressed_pair<float, std::equal_to<TSKUIDStruct>>=f}}}16@0:8
{TSUCellRect={TSUCellCoord=ISBB}{?=II}}32@0:8r^{TSKUIDStruct=QQ}16@24
{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}24@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16
{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32@0:8@16@24
{TSUCellRect={TSUCellCoord=ISBB}{?=II}}24@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16
B48@0:8@16@24r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32^@40
@40@0:8@16@24r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32
v48@0:8@16@24@32@40
{TSUCellRect="origin"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}"size"{?="numberOfColumns"I"numberOfRows"I}}
@"TSCETableTransposedInfo"
@"TSCEFormulaRewriteInfo_RowColumnInfo"
@"TSCEFormulaRewrite_RegionMovedInfo"
@"TSCEFormulaRewrite_RegionMergedInfo"
@"TSCEFormulaRewrite_MergeOriginMovedInfo"
@"TSKShuffleMapping"
@"TSCERewriteTableUIDInfo"
@"TSCERewriteGroupNodeUIDInfo"
@"TSCEGroupByChange"
@"TSCEFormulasForUndo"
{unordered_map<TSCECellRef, TSTConditionalStyleSet *, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, std::allocator<std::pair<const TSCECellRef, TSTConditionalStyleSet *>>>="__table_"{__hash_table<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, std::__unordered_map_hasher<TSCECellRef, std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, true>, std::__unordered_map_equal<TSCECellRef, std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, std::equal_to<TSCECellRef>, std::hash<TSCECellRef>, true>, std::allocator<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCECellRef, std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCECellRef, std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, std::equal_to<TSCECellRef>, std::hash<TSCECellRef>, true>>="__value_"f}}}
{unordered_map<TSCECellRef, TSUCellRect, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, std::allocator<std::pair<const TSCECellRef, TSUCellRect>>>="__table_"{__hash_table<std::__hash_value_type<TSCECellRef, TSUCellRect>, std::__unordered_map_hasher<TSCECellRef, std::__hash_value_type<TSCECellRef, TSUCellRect>, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, true>, std::__unordered_map_equal<TSCECellRef, std::__hash_value_type<TSCECellRef, TSUCellRect>, std::equal_to<TSCECellRef>, std::hash<TSCECellRef>, true>, std::allocator<std::__hash_value_type<TSCECellRef, TSUCellRect>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSUCellRect>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSUCellRect>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSUCellRect>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSUCellRect>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSUCellRect>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSUCellRect>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSUCellRect>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCECellRef, TSUCellRect>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSUCellRect>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCECellRef, std::__hash_value_type<TSCECellRef, TSUCellRect>, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCECellRef, std::__hash_value_type<TSCECellRef, TSUCellRect>, std::equal_to<TSCECellRef>, std::hash<TSCECellRef>, true>>="__value_"f}}}
{unordered_map<TSKUIDStruct, TSCECoordMapper *, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECoordMapper *>>>="__table_"{__hash_table<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>="__value_"f}}}
@"TSCEFormulaRewriteSpec"
@"TSCECoordMapper"
@36@0:8S16@20q28
@60@0:8S16@20q28q36q44q52
@"TSCETablesByNameDistributor"
@32@0:8^{TSCEErrorValue=^^?@}16@24
^{TSCEErrorValue=^^?@}16@0:8
^{TSCEErrorValue=^^?@}
@24@0:8r^{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}C}16
@32@0:8^{TSCEASTNodeArray=*QQB}16r^{TSUCellCoord=ISBB}24
{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32@0:8@16r^{TSKUIDStruct=QQ}24
{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}
@48@0:8{_NSRange=QQ}16{_NSRange=QQ}32
@32@0:8r^v16r^{TSCEGridDimensions=II}24
{TSCEGridCoord=II}16@0:8
{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}16@0:8
B24@0:8I16I20
B24@0:8r^{TSCEGridCoord=II}16
v24@0:8r^{TSCEGridCoord=II}16
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}24@0:8I16I20
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}24@0:8r^{TSCEGridCoord=II}16
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}24@0:8Q16
{vector<TSCEValue, std::allocator<TSCEValue>>=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>=^{TSCEValue}}}16@0:8
v32@0:8r^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16r^{TSCEGridCoord=II}24
@32@0:8r^{TSCEGridCoord=II}16i24i28
@32@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16
v28@0:8I16@?20
{TSCEBitGrid="_tiles"{vector<TSCEBitGridTile *, std::allocator<TSCEBitGridTile *>>="__begin_"^^{TSCEBitGridTile}"__end_"^^{TSCEBitGridTile}"__end_cap_"{__compressed_pair<TSCEBitGridTile **, std::allocator<TSCEBitGridTile *>>="__value_"^^{TSCEBitGridTile}}}"_count"Q"_lastTileFoundAtIndex"Q"_bitsInColumn"{unordered_map<unsigned int, TSUIndexSet *, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<const unsigned int, TSUIndexSet *>>>="__table_"{__hash_table<std::__hash_value_type<unsigned int, TSUIndexSet *>, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, TSUIndexSet *>, std::hash<unsigned int>, std::equal_to<unsigned int>, true>, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, TSUIndexSet *>, std::equal_to<unsigned int>, std::hash<unsigned int>, true>, std::allocator<std::__hash_value_type<unsigned int, TSUIndexSet *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned int, TSUIndexSet *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, TSUIndexSet *>, std::hash<unsigned int>, std::equal_to<unsigned int>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, TSUIndexSet *>, std::equal_to<unsigned int>, std::hash<unsigned int>, true>>="__value_"f}}}}
{TSCEGridCoord="column"I"row"I}
{TSCEGridDimensions="width"I"height"I}
{unordered_map<TSCEGridCoord, TSCEValue, std::hash<TSCEGridCoord>, std::equal_to<TSCEGridCoord>, std::allocator<std::pair<const TSCEGridCoord, TSCEValue>>>="__table_"{__hash_table<std::__hash_value_type<TSCEGridCoord, TSCEValue>, std::__unordered_map_hasher<TSCEGridCoord, std::__hash_value_type<TSCEGridCoord, TSCEValue>, std::hash<TSCEGridCoord>, std::equal_to<TSCEGridCoord>, true>, std::__unordered_map_equal<TSCEGridCoord, std::__hash_value_type<TSCEGridCoord, TSCEValue>, std::equal_to<TSCEGridCoord>, std::hash<TSCEGridCoord>, true>, std::allocator<std::__hash_value_type<TSCEGridCoord, TSCEValue>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEGridCoord, TSCEValue>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEGridCoord, TSCEValue>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEGridCoord, TSCEValue>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEGridCoord, TSCEValue>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEGridCoord, TSCEValue>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEGridCoord, TSCEValue>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEGridCoord, TSCEValue>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCEGridCoord, TSCEValue>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEGridCoord, TSCEValue>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCEGridCoord, std::__hash_value_type<TSCEGridCoord, TSCEValue>, std::hash<TSCEGridCoord>, std::equal_to<TSCEGridCoord>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCEGridCoord, std::__hash_value_type<TSCEGridCoord, TSCEValue>, std::equal_to<TSCEGridCoord>, std::hash<TSCEGridCoord>, true>>="__value_"f}}}
@24@0:8^{TSCEGridAccessContext=@^{TSCEFunctionArgSpec}i^{TSCEEvaluationContext}BBBBBCC}16
@28@0:8C16r^{TSKUIDStruct=QQ}20
@36@0:8C16r^v20r^{TSKUIDStruct=QQ}28
C24@0:8C16C20
@"TSCEMutableUIDSet"
{vector<TSCEGroupingColumnChange, std::allocator<TSCEGroupingColumnChange>>="__begin_"^{TSCEGroupingColumnChange}"__end_"^{TSCEGroupingColumnChange}"__end_cap_"{__compressed_pair<TSCEGroupingColumnChange *, std::allocator<TSCEGroupingColumnChange>>="__value_"^{TSCEGroupingColumnChange}}}
@40@0:8r^{TSKUIDStruct=QQ}16r^v24r^v32
@"TSCEFormulaRewrite_Uids"
@32@0:8@16{TSUCellCoord=ISBB}24
r^{TSUCellCoord=ISBB}16@0:8
@"TSCEFormulaRewrite_RegionInfo"
@32@0:8r^v16r^v24
{unordered_map<TSUCellCoord, TSUCellCoord, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, std::allocator<std::pair<const TSUCellCoord, TSUCellCoord>>>="__table_"{__hash_table<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, std::__unordered_map_hasher<TSUCellCoord, std::__hash_value_type<TSUCellCoord, TSUCellCoord>, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, true>, std::__unordered_map_equal<TSUCellCoord, std::__hash_value_type<TSUCellCoord, TSUCellCoord>, std::equal_to<TSUCellCoord>, std::hash<TSUCellCoord>, true>, std::allocator<std::__hash_value_type<TSUCellCoord, TSUCellCoord>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSUCellCoord, std::__hash_value_type<TSUCellCoord, TSUCellCoord>, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSUCellCoord, std::__hash_value_type<TSUCellCoord, TSUCellCoord>, std::equal_to<TSUCellCoord>, std::hash<TSUCellCoord>, true>>="__value_"f}}}
@48@0:8r^{TSKUIDStruct=QQ}16r^v24r^{TSKUIDStruct=QQ}32r^v40
v40@0:8r^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16@24^v32
I24@0:8r^{TSKUIDStruct=QQ}16
S24@0:8r^{TSKUIDStruct=QQ}16
{unordered_map<TSKUIDStruct, unsigned int, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, unsigned int>>>="__table_"{__hash_table<std::__hash_value_type<TSKUIDStruct, unsigned int>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, unsigned int>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, unsigned int>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, unsigned int>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned int>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned int>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned int>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned int>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned int>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned int>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned int>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned int>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, unsigned int>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, unsigned int>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>="__value_"f}}}
{unordered_map<unsigned int, TSKUIDStruct, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<const unsigned int, TSKUIDStruct>>>="__table_"{__hash_table<std::__hash_value_type<unsigned int, TSKUIDStruct>, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, TSKUIDStruct>, std::hash<unsigned int>, std::equal_to<unsigned int>, true>, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, TSKUIDStruct>, std::equal_to<unsigned int>, std::hash<unsigned int>, true>, std::allocator<std::__hash_value_type<unsigned int, TSKUIDStruct>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSKUIDStruct>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSKUIDStruct>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSKUIDStruct>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSKUIDStruct>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSKUIDStruct>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSKUIDStruct>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSKUIDStruct>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned int, TSKUIDStruct>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSKUIDStruct>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, TSKUIDStruct>, std::hash<unsigned int>, std::equal_to<unsigned int>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, TSKUIDStruct>, std::equal_to<unsigned int>, std::hash<unsigned int>, true>>="__value_"f}}}
@44@0:8{_NSRange=QQ}16r^v32I40
{_NSRange=QQ}16@0:8
{_NSRange="location"Q"length"Q}
@36@0:8r^{TSKUIDStruct=QQ}16r^v24B32
@60@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24r^{TSKUIDStruct=QQ}32r^v40r^v48B56
{TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}52@0:8{_NSRange=QQ}16@32B40@44
v44@0:8@16@24B32@36
I24@0:8I16B20
{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}28@0:8I16r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}20
{vector<TSCERangeCoordinate, std::allocator<TSCERangeCoordinate>>=^{TSCERangeCoordinate}^{TSCERangeCoordinate}{__compressed_pair<TSCERangeCoordinate *, std::allocator<TSCERangeCoordinate>>=^{TSCERangeCoordinate}}}16@0:8
@32@0:8@16Q24
@"TSCEEdgeListPrinter"
@32@0:8r^{TSCEStringValue=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}BB}16@24
^{TSCEStringValue=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}BB}16@0:8
^{TSCEStringValue=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}BB}
@32@0:8r^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16@24
v20@0:8c16
@28@0:8B16@20
@32@0:8^{TSCEBooleanValue=^^?B{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}16@24
^{TSCEBooleanValue=^^?B{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}16@0:8
^{TSCEBooleanValue=^^?B{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}
@24@0:8d16
@36@0:8@16@24C32
v36@0:8r^v16r^{TSKUIDStruct=QQ}24B32
@"<TSCEFormulaReplacing>"
{unordered_map<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>>>="__table_"{__hash_table<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>="__value_"f}}}
@"NSObject<OS_dispatch_group>"
@R0-
Tg*
af3'P
KUUUUU
r-Yr
YUUUU
4tl:4
t*@es
"@M,
r<S[
U@_6
F@>F
lz9~
/@o)
?Q&^
?M5i
3?4"L)L
>=kv
=@Q3l
5 .@
Qs@f
DfD0
 ?~,
UUUUUU
}`G
L\
L\
L\
L\
P`
L\
L\
Td
P`
L\
Td
L\
L\
P`
L\
P`
P`
P`
P`
P`
L\
L\
P`
L\
L\
Xh
P`
P`
P`
P`
L\
P`
L\
P`
L\
L\
L\
P`
L\
L\
L\
Td
L\
L\
Td
L\
23TSCEASTGroupUIDRewriter
28TSCEASTGroupNodeUIDsRewriter
25TSCEASTSetAggTypeRewriter
32TSCEASTGroupNodesChangedRewriter
'/16TSCEReferenceSet
25TSCEASTLetRemovalRewriter
]r2<
MbP?{
~@fffff
26TSCEASTExcelExportRewriter
44TSCEASTSearchForExcelTranslationNeedIterator
33TSCEASTRewriteUsingValuesRewriter
16TSCEAdditionNode
19TSCESubtractionNode
22TSCEMultiplicationNode
13TSCEPowerNode
21TSCEConcatenationNode
19TSCEGreaterThanNode
29TSCEBinaryBooleanOperatorNode
28TSCEGreaterThanOrEqualToNode
25TSCELessThanOrEqualToNode
15TSCEEqualToNode
18TSCENotEqualToNode
16TSCEPlusSignNode
18TSCEValueGridValue
26TSCEASTInsertOwnerRewriter
44TSCEASTSearchForNumberToDateCoercionIterator
25TSCEASTFreezeRefsRewriter
23TSCEASTThawRefsRewriter
25TSCEASTInsertRowsRewriter
26TSCEASTReorderRowsRewriter
28TSCEASTRepairBadRefsRewriter
16TSCEBooleanValue
15TSCEStringValue
15TSCENumberValue
38TSCEASTInsertRowsInsertedCellsRewriter
13TSCEDateValue
I!M%P)-U:>
I!M%P)-U:>
43TSCEASTSearchForSageTranslationNeedIterator
22TSCEEmptyArgumentValue
37TSCEASTExcelImportTranslationRewriter
26TSCEASTExcelImportRewriter
18TSCEEmptyCellValue
18TSCEReferenceValue
NSt3__120__shared_ptr_emplaceI9TSCEValueNS_9allocatorIS1_EEEE
25TSCEASTMoveRegionRewriter
44TSCEASTNumberToDurationForSageImportRewriter
16TSCEUnitlessZero
25TSCEASTSageImportRewriter
17TSCEAbstractValue
8TSCEGrid
42TSCEASTRemoveNumberToDateCoercionsRewriter
12TSCENilValue
v@16TSCEErrorWrapper
 !"#$%&'(*+,-./012356789ABCD`afghijklmno
   ! " # $ % & ' ( ) / 0 1 2 3 4 5 6 7 8 9 : ; < = > ? @ A B C D E F G H I J K L M N O P Q R S T W _ p q t u v w x y z { | } ~ 
! !!!"!#!$!%!&!'!(!)!*!+!,!-!.!/!0!1!2!3!4!5!6!7!8!9!:!;!=!>!?!@!A!B!C!D!E!F!G!H!I!J!K!S!T!U!V!W!X!Y!Z![!\!]!^!_!`!a!b!c!d!e!f!g!h!i!j!k!l!m!n!o!p!q!r!s!t!u!v!w!x!y!z!{!|!}!~!
" "!"""#"$"%"&"'"(")"*"+","-"."/"0"1"2"3"4"5"6"7"8"9":";"<"=">"?"@"A"B"C"D"E"F"G"H"I"J"K"L"M"N"O"P"Q"R"S"T"U"V"W"X"Y"Z"["\"]"^"_"`"a"b"c"d"e"f"g"h"i"j"k"l"m"n"o"p"q"r"s"t"u"v"w"x"y"z"{"|"}"~"
# #!#"###$#%#&#'#(#)#*#+#,#-#.#/#0#1#2#3#4#5#6#7#8#9#:#;#<#=#>#?#@#A#B#C#D#E#F#G#H#I#J#K#L#M#N#O#P#Q#R#S#T#U#V#W#X#Y#Z#[#\#]#^#_#`#a#b#c#d#e#f#g#h#i#j#k#l#m#n#o#p#q#r#s#t#u#v#w#x#y#z#{#|#}#~#
$ $!$"$#$$$%$&$@$A$B$C$D$E$F$G$H$I$J$`$a$b$c$d$e$f$g$h$i$j$k$l$m$n$o$p$q$r$s$t$u$v$w$x$y$z${$|$}$~$
% %!%"%#%$%%%&%'%(%)%*%+%,%-%.%/%0%1%2%3%4%5%6%7%8%9%:%;%<%=%>%?%@%A%B%C%D%E%F%G%H%I%J%K%L%M%N%O%P%Q%R%S%T%U%V%W%X%Y%Z%[%\%]%^%_%`%a%b%c%d%e%f%g%h%i%j%k%l%m%n%o%p%q%r%s%t%u%v%w%x%y%z%{%|%}%~%
& &!&"&#&$&%&&&'&(&)&*&+&,&-&.&/&0&1&2&3&4&5&6&7&8&9&:&;&<&=&>&?&@&A&B&C&D&E&F&G&H&I&J&K&L&M&N&O&P&Q&R&S&T&U&V&W&X&Y&Z&[&\&]&^&_&`&a&b&c&d&e&f&g&h&i&j&k&l&m&n&o&p&q&r&s&t&u&v&w&x&y&z&{&|&}&
' '!'"'#'$'%'&''')'*'+','-'.'/'0'1'2'3'4'5'6'7'8'9':';'<'='>'?'@'A'B'C'D'E'F'G'H'I'J'K'M'O'P'Q'R'V'X'Y'Z'['\']'^'a'b'c'd'e'f'g'h'i'j'k'l'm'n'o'p'q'r's't'u'v'w'x'y'z'{'|'}'~'
( (!("(#($(%(&('((()(*(+(,(-(.(/(0(1(2(3(4(5(6(7(8(9(:(;(<(=(>(?(@(A(B(C(D(E(F(G(H(I(J(K(L(M(N(O(P(Q(R(S(T(U(V(W(X(Y(Z([(\(](^(_(`(a(b(c(d(e(f(g(h(i(j(k(l(m(n(o(p(q(r(s(t(u(v(w(x(y(z({(|(}(~(
) )!)")#)$)%)&)')()))*)+),)-).)/)0)1)2)3)4)5)6)7)8)9):);)<)=)>)?)@)A)B)C)D)E)F)G)H)I)J)K)L)M)N)O)P)Q)R)S)T)U)V)W)X)Y)Z)[)\)])^)_)`)a)b)c)d)e)f)g)h)i)j)k)l)m)n)o)p)q)r)s)t)u)v)w)x)y)z){)|)})~)
* *!*"*#*$*%*&*'*(*)***+*,*-*.*/*0*1*2*3*4*5*6*7*8*9*:*;*<*=*>*?*@*A*B*C*D*E*F*G*H*I*J*K*L*M*N*O*P*Q*R*S*T*U*V*W*X*Y*Z*[*\*]*^*_*`*a*b*c*d*e*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z*{*|*}*~*
/ /!/"/#/$/%/&/'/(/)/*/+/,/-/.///0/1/2/3/4/5/6/7/8/9/:/;/</=/>/?/@/A/B/C/D/E/F/G/H/I/J/K/L/M/N/O/P/Q/R/S/T/U/V/W/X/Y/Z/[/\/]/^/_/`/a/b/c/d/e/f/g/h/i/j/k/l/m/n/o/p/q/r/s/t/u/v/w/x/y/z/{/|/}/~/
0 0!0"0#0$0%0&0'0(0)000102030405060708090:0;0<0=0>0?0A0B0C0D0E0F0G0H0I0J0K0L0M0N0O0P0Q0R0S0T0U0V0W0X0Y0Z0[0\0]0^0_0`0a0b0c0d0e0f0g0h0i0j0k0l0m0n0o0p0q0r0s0t0u0v0w0x0y0z0{0|0}0~0
1 1!1"1#1$1%1&1'1(1)1*1+1,1112131415161718191:1;1<1=1>1?1@1A1B1C1D1E1F1G1H1I1J1K1L1M1N1O1P1Q1R1S1T1U1V1W1X1Y1Z1[1\1]1^1_1`1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1{1|1}1~1
2 2!2"2#2$2%2&2'2(2)2*2+2,2-2.2/202122232425262728292:2;2<2=2>2?2@2A2B2C2P2Q2R2S2T2U2V2W2X2Y2Z2[2\2]2^2_2`2a2b2c2d2e2f2g2h2i2j2k2l2m2n2o2p2q2r2s2t2u2v2w2x2y2z2{2|2}2
3 3!3"3#3$3%3&3'3(3)3*3+3,3-3.3/303132333435363738393:3;3<3=3>3?3@3A3B3C3D3E3F3G3H3I3J3K3L3M3N3O3P3Q3R3S3T3U3V3W3X3Y3Z3[3\3]3^3_3`3a3b3c3d3e3f3g3h3i3j3k3l3m3n3o3p3q3r3s3t3u3v3w3x3y3z3{3|3}3~3
?14TSCEASTElement
27TSCEASTElementWithUidTracts
26TSCEASTElementWithChildren
39TSCEASTElementWithUidTractsWithChildren
20TSCEASTBinaryElement
19TSCEASTColonElement
24TSCEASTColonTractElement
20TSCEASTStringElement
18TSCEASTDateElement
22TSCEASTDurationElement
22TSCEASTFunctionElement
29TSCEASTUnknownFunctionElement
24TSCEASTWhitespaceElement
30TSCEASTRelativeCoordRefElement
23TSCEASTLinkedRefElement
26TSCEASTUidReferenceElement
26TSCEASTViewTractRefElement
18TSCEASTListElement
19TSCEASTThunkElement
21TSCEASTLetBindElement
25TSCEASTCategoryRefElement
31TSCEASTConvertToUidRefsRewriter
15TSCEASTRewriter
19TSCEASTUnaryElement
20TSCEASTNumberElement
21TSCEASTBooleanElement
21TSCEASTTagOnlyElement
19TSCEASTTokenElement
19TSCEASTArrayElement
25TSCEASTLetVariableElement
25TSCEASTLetEndScopeElement
A7}!(#
?V1T!&G
&3bb
&3bb
34TSCEASTLowLevelDescriptionRewriter
26TSCEASTDescriptionIterator
36TSCEASTConvertFromColonTractRewriter
26TSCEASTOwnerUidMapRewriter
28TSCEASTForceOwnerUidRewriter
42TSCEASTHostCellAgnosticOwnerUidMapRewriter
34TSCEASTBadRefWithUidInfoIdentifier
9TSCELexer
NSt3__115basic_stringbufIcNS_11char_traitsIcEENS_9allocatorIcEEEE
25TSCEASTRemoveRowsRewriter
#0aa
31TSCEASTIsSingleNodeTypeRewriter
16TSCEFunctionNode
16TSCEDivisionNode
16TSCELessThanNode
16TSCENegationNode
15TSCEPercentNode
13TSCEColonNode
16TSCEFunction_ABS
20TSCEFunction_ACCRINT
22TSCEFinancialFunctions
21TSCEFunction_ACCRINTM
17TSCEFunction_ACOS
18TSCEFunction_ACOSH
20TSCEFunction_ADDRESS
16TSCEFunction_AND
18TSCEFunction_AREAS
17TSCEFunction_ASIN
18TSCEFunction_ASINH
17TSCEFunction_ATAN
18TSCEFunction_ATAN2
18TSCEFunction_ATANH
19TSCEFunction_AVEDEV
20TSCEFunction_AVERAGE
21TSCEFunction_AVERAGEA
22TSCEFunction_AVERAGEIF
23TSCEFunction_AVERAGEIFS
22TSCEFunction_BASETONUM
20TSCEFunction_BESSELJ
20TSCEFunction_BESSELY
21TSCEFunction_BETADIST
20TSCEFunction_BETAINV
20TSCEFunction_BIN2DEC
20TSCEFunction_BIN2HEX
20TSCEFunction_BIN2OCT
22TSCEFunction_BINOMDIST
25TSCEFunction_BONDDURATION
26TSCEFunction_BONDMDURATION
20TSCEFunction_CEILING
17TSCEFunction_CHAR
20TSCEFunction_CHIDIST
19TSCEFunction_CHIINV
20TSCEFunction_CHITEST
19TSCEFunction_CHOOSE
18TSCEFunction_CLEAN
17TSCEFunction_CODE
19TSCEFunction_COLUMN
20TSCEFunction_COLUMNS
19TSCEFunction_COMBIN
24TSCEFunction_CONCATENATE
23TSCEFunction_CONFIDENCE
25TSCEFunction_CONFIDENCE_T
20TSCEFunction_CONVERT
19TSCEFunction_CORREL
16TSCEFunction_COS
17TSCEFunction_COSH
18TSCEFunction_COUNT
19TSCEFunction_COUNTA
23TSCEFunction_COUNTBLANK
20TSCEFunction_COUNTIF
21TSCEFunction_COUNTIFS
25TSCEFunction_COUNTMATCHES
22TSCEFunction_COUPDAYBS
21TSCEFunction_COUPDAYS
23TSCEFunction_COUPDAYSNC
20TSCEFunction_COUPNUM
18TSCEFunction_COVAR
25TSCEFunction_COVARIANCE_S
22TSCEFunction_CRITBINOM
20TSCEFunction_CUMIPMT
21TSCEFunction_CUMPRINC
17TSCEFunction_DATE
20TSCEFunction_DATEDIF
22TSCEFunction_DATEVALUE
16TSCEFunction_DAY
20TSCEFunction_DAYNAME
20TSCEFunction_DAYS360
15TSCEFunction_DB
16TSCEFunction_DDB
20TSCEFunction_DEC2BIN
20TSCEFunction_DEC2HEX
20TSCEFunction_DEC2OCT
20TSCEFunction_DEGREES
18TSCEFunction_DELTA
18TSCEFunction_DEVSQ
17TSCEFunction_DISC
19TSCEFunction_DOLLAR
21TSCEFunction_DUR2DAYS
22TSCEFunction_DUR2HOURS
29TSCEFunction_DUR2MILLISECONDS
24TSCEFunction_DUR2MINUTES
24TSCEFunction_DUR2SECONDS
22TSCEFunction_DUR2WEEKS
21TSCEFunction_DURATION
18TSCEFunction_EDATE
19TSCEFunction_EFFECT
20TSCEFunction_EOMONTH
16TSCEFunction_ERF
17TSCEFunction_ERFC
17TSCEFunction_EVEN
18TSCEFunction_EXACT
16TSCEFunction_EXP
22TSCEFunction_EXPONDIST
17TSCEFunction_FACT
23TSCEFunction_FACTDOUBLE
18TSCEFunction_FALSE
18TSCEFunction_FDIST
17TSCEFunction_FIND
33TSCEFunction_FIND_CASEINSENSITIVE
17TSCEFunction_FINV
18TSCEFunction_FIXED
18TSCEFunction_FLOOR
21TSCEFunction_FORECAST
19TSCELineFitFunction
24TSCEFunction_FORMULATEXT
22TSCEFunction_FREQUENCY
15TSCEFunction_FV
21TSCEFunction_CURRENCY
25TSCEFunction_CURRENCYCODE
28TSCEFunction_CURRENCYCONVERT
22TSCEFunction_CURRENCYH
22TSCEFunction_GAMMADIST
21TSCEFunction_GAMMAINV
20TSCEFunction_GAMMALN
16TSCEFunction_GCD
20TSCEFunction_GEOMEAN
19TSCEFunction_GESTEP
25TSCEFunction_GETPIVOTDATA
20TSCEFunction_HARMEAN
20TSCEFunction_HEX2BIN
20TSCEFunction_HEX2DEC
20TSCEFunction_HEX2OCT
20TSCEFunction_HLOOKUP
17TSCEFunction_HOUR
22TSCEFunction_HYPERLINK
15TSCEFunction_IF
20TSCEFunction_IFERROR
16TSCEFunction_IFS
18TSCEFunction_INDEX
21TSCEFunction_INDIRECT
16TSCEFunction_INT
22TSCEFunction_INTERCEPT
29TSCEFunction_INTERSECT_RANGES
20TSCEFunction_INTRATE
17TSCEFunction_IPMT
16TSCEFunction_IRR
20TSCEFunction_ISBLANK
19TSCEFunction_ISDATE
20TSCEFunction_ISERROR
19TSCEFunction_ISEVEN
21TSCEFunction_ISNUMBER
18TSCEFunction_ISODD
18TSCEFunction_ISPMT
19TSCEFunction_ISTEXT
18TSCEFunction_LARGE
16TSCEFunction_LCM
17TSCEFunction_LEFT
16TSCEFunction_LEN
19TSCEFunction_LINEST
15TSCEFunction_LN
16TSCEFunction_LOG
18TSCEFunction_LOG10
19TSCEFunction_LOGINV
24TSCEFunction_LOGNORMDIST
19TSCEFunction_LOOKUP
18TSCEFunction_LOWER
18TSCEFunction_MATCH
16TSCEFunction_MAX
17TSCEFunction_MAXA
19TSCEFunction_MAXIFS
19TSCEFunction_MEDIAN
16TSCEFunction_MID
16TSCEFunction_MIN
17TSCEFunction_MINA
19TSCEFunction_MINIFS
19TSCEFunction_MINUTE
17TSCEFunction_MIRR
16TSCEFunction_MOD
17TSCEFunction_MODE
22TSCEFunction_MODE_MULT
18TSCEFunction_MONTH
22TSCEFunction_MONTHNAME
19TSCEFunction_MROUND
24TSCEFunction_MULTINOMIAL
25TSCEFunction_NEGBINOMDIST
24TSCEFunction_NETWORKDAYS
20TSCEFunction_NOMINAL
21TSCEFunction_NORMDIST
20TSCEFunction_NORMINV
22TSCEFunction_NORMSDIST
21TSCEFunction_NORMSINV
16TSCEFunction_NOT
16TSCEFunction_NOW
17TSCEFunction_NPER
16TSCEFunction_NPV
22TSCEFunction_NUMTOBASE
20TSCEFunction_OCT2BIN
20TSCEFunction_OCT2DEC
20TSCEFunction_OCT2HEX
16TSCEFunction_ODD
19TSCEFunction_OFFSET
15TSCEFunction_OR
23TSCEFunction_PERCENTILE
27TSCEFunction_PERCENTILE_EXC
24TSCEFunction_PERCENTRANK
28TSCEFunction_PERCENTRANK_EXC
19TSCEFunction_PERMUT
15TSCEFunction_PI
22TSCEFunction_PLAINTEXT
16TSCEFunction_PMT
20TSCEFunction_POISSON
23TSCEFunction_POLYNOMIAL
18TSCEFunction_POWER
17TSCEFunction_PPMT
18TSCEFunction_PRICE
22TSCEFunction_PRICEDISC
21TSCEFunction_PRICEMAT
17TSCEFunction_PROB
20TSCEFunction_PRODUCT
19TSCEFunction_PROPER
15TSCEFunction_PV
21TSCEFunction_QUARTILE
25TSCEFunction_QUARTILE_EXC
21TSCEFunction_QUOTIENT
20TSCEFunction_RADIANS
17TSCEFunction_RAND
24TSCEFunction_RANDBETWEEN
17TSCEFunction_RANK
21TSCEFunction_RANK_AVG
17TSCEFunction_RATE
21TSCEFunction_RECEIVED
27TSCEFunction_REFERENCE_NAME
18TSCEFunction_REGEX
26TSCEFunction_REGEX_EXTRACT
20TSCEFunction_REPLACE
17TSCEFunction_REPT
18TSCEFunction_RIGHT
18TSCEFunction_ROMAN
18TSCEFunction_ROUND
22TSCEFunction_ROUNDDOWN
20TSCEFunction_ROUNDUP
16TSCEFunction_ROW
17TSCEFunction_ROWS
19TSCEFunction_SEARCH
19TSCEFunction_SECOND
22TSCEFunction_SERIESSUM
17TSCEFunction_SIGN
16TSCEFunction_SIN
17TSCEFunction_SINH
16TSCEFunction_SLN
18TSCEFunction_SLOPE
18TSCEFunction_SMALL
17TSCEFunction_SQRT
19TSCEFunction_SQRTPI
24TSCEFunction_STANDARDIZE
18TSCEFunction_STDEV
19TSCEFunction_STDEVA
19TSCEFunction_STDEVP
20TSCEFunction_STDEVPA
18TSCEFunction_STOCK
19TSCEFunction_STOCKH
26TSCEFunction_STRIPDURATION
23TSCEFunction_SUBSTITUTE
21TSCEFunction_SUBTOTAL
16TSCEFunction_SUM
18TSCEFunction_SUMIF
19TSCEFunction_SUMIFS
23TSCEFunction_SUMPRODUCT
18TSCEFunction_SUMSQ
21TSCEFunction_SUMX2MY2
21TSCEFunction_SUMX2PY2
20TSCEFunction_SUMXMY2
16TSCEFunction_SYD
14TSCEFunction_T
16TSCEFunction_TAN
17TSCEFunction_TANH
18TSCEFunction_TDIST
22TSCEFunction_TEXTAFTER
23TSCEFunction_TEXTBEFORE
24TSCEFunction_TEXTBETWEEN
17TSCEFunction_TIME
22TSCEFunction_TIMEVALUE
17TSCEFunction_TINV
18TSCEFunction_TODAY
22TSCEFunction_TRANSPOSE
17TSCEFunction_TRIM
17TSCEFunction_TRUE
18TSCEFunction_TRUNC
18TSCEFunction_TTEST
25TSCEFunction_UNION_RANGES
18TSCEFunction_UPPER
18TSCEFunction_VALUE
16TSCEFunction_VAR
17TSCEFunction_VARA
17TSCEFunction_VARP
18TSCEFunction_VARPA
16TSCEFunction_VDB
20TSCEFunction_VLOOKUP
20TSCEFunction_WEEKDAY
20TSCEFunction_WEEKNUM
20TSCEFunction_WEIBULL
20TSCEFunction_WORKDAY
17TSCEFunction_XIRR
20TSCEFunction_XLOOKUP
19TSCEFunction_XMATCH
17TSCEFunction_XNPV
17TSCEFunction_YEAR
21TSCEFunction_YEARFRAC
18TSCEFunction_YIELD
22TSCEFunction_YIELDDISC
21TSCEFunction_YIELDMAT
18TSCEFunction_ZTEST
20TSCEFunction___CHART
28TSCEFunction___CELLVALUETYPE
30TSCEFunction___INTERACTIONTYPE
30TSCEASTRowColumnUidMapRewriter
24TSCEASTClearUidsRewriter
26TSCEASTExcludeUidsRewriter
14TSCEErrorValue
24TSCEASTTransposeRewriter
26TSCEASTDeleteOwnerRewriter
22TSCEASTElementIterator
17TSCEASTEndElement
20TSCECategoryRefValue
14TSCETokenValue
25TSCEASTSageExportRewriter
25TSCEASTMergeCellsRewriter
29TSCEASTUndoMergeCellsRewriter
32TSCEASTNodeFormulaStringIterator
23TSCEASTTagsUsedRewriter
14TSCEThunkValue
25TSCEASTEvaluationRewriter
23TSCEASTSortRowsRewriter
33TSCEASTConvertFromUidRefsRewriter
40TSCEASTSearchForExternalOwnerUIDIterator
21TSCEASTStreamIterator
17TSCERichTextValue
31TSCEASTOffsetReferencesRewriter
31TSCEASTMergeOriginMovedRewriter
32TSCEASTSearchForUidTractIterator
24TSCEASTLinkedRefRewriter
 #&),/258;>ADGJMP
!$'*-0369<?BEHKNQ
@19TSCEIDAllocatorFull
29TSCEASTFunctionsInUseRewriter
UUUUUU
30TSCEASTNodeCategoryRefIterator
ffffff
21TSCEViewTractRefValue
?333333
<19TSCEASTIteratorBase
xV42?)
28TSCEASTRefExtractionIterator
5RTreeIjLi2EdLi16ELi8EE
34TSCEASTConvertToColonTractRewriter
/=KY
!0uc
&5Gz
)7jx
-<gU
)5AMY
 ,>Pbq
);M\n
>Pbn}
)5GR]h
#/=K]l{
(4BP\ht
'3?N`
"1@R
$6BQ
+9HVb
!/=K
#5GY
TSCEArchives.proto
TSCE
TSPMessages.proto
TSKArchives.proto"Y
CellReferenceArchive
column
table_id
.TSP.CFUUIDArchive"a
InternalCellReferenceArchive
coordinate
.TSCE.CellCoordinateArchive
owner_id
RelativeCellRefArchive
relative_row_offset
relative_column_offset
table_uid
.TSP.UUID
preserve_column
preserve_row
is_spanning_column
is_spanning_row
RangeReferenceArchive
table_id
.TSP.CFUUIDArchive
top_left_column
top_left_row
bottom_right_column
bottom_right_row
InternalRangeReferenceArchive
owner_id
range
.TSCE.RangeCoordinateArchive"
IndexSetArchive
entries
2#.TSCE.IndexSetArchive.IndexSetEntry
IndexSetEntry
range_begin
range_end
CellCoordSetArchive
column_entries
2%.TSCE.CellCoordSetArchive.ColumnEntry
ColumnEntry
column
row_set
.TSCE.IndexSetArchive"
InternalCellRefSetArchive
owner_entries
2*.TSCE.InternalCellRefSetArchive.OwnerEntry
OwnerEntry
owner_id
coord_set
.TSCE.CellCoordSetArchive"<
ColumnRowSize
num_columns
num_rows
CellRectArchive
origin
.TSCE.CellCoordinateArchive
size
.TSCE.ColumnRowSize"
CellRefSetArchive
owner_entries
2".TSCE.CellRefSetArchive.OwnerEntry
OwnerEntry
owner_uid
.TSP.UUID
coord_set
.TSCE.CellCoordSetArchive"
UidCoordSetArchive
column_entries
2$.TSCE.UidCoordSetArchive.ColumnEntry
ColumnEntry
column
.TSP.UUID
row_set
.TSP.UUID"
UidCellRefSetArchive
owner_entries
2%.TSCE.UidCellRefSetArchive.OwnerEntry
OwnerEntry
owner_uid
.TSP.UUID
coord_set
.TSCE.UidCoordSetArchive"
ReferencesToDirtyArchive
to_dirty_owner_ids
.TSCE.IndexSetArchive
to_dirty_cells
.TSCE.InternalCellRefSetArchive
to_dirty_cells_additional
.TSCE.InternalCellRefSetArchive
to_dirty_range_refs
2#.TSCE.InternalRangeReferenceArchive
calc_in_progress_cells
.TSCE.InternalCellRefSetArchive"
CoordMapperArchive
table_uid
.TSP.UUID
summary_rows_set
.TSCE.IndexSetArchive
summary_columns_set
.TSCE.IndexSetArchive
label_rows_set
.TSCE.IndexSetArchive
base_to_view_row_map
2(.TSCE.CoordMapperArchive.BaseToViewEntry
base_to_view_column_map
2(.TSCE.CoordMapperArchive.BaseToViewEntry
summary_to_view_row_map
2+.TSCE.CoordMapperArchive.SummaryToViewEntry
summary_to_view_column_map
2+.TSCE.CoordMapperArchive.SummaryToViewEntry
BaseToViewEntry
base_column_or_row
view_column_or_row
SummaryToViewEntry
summary_column_or_row
view_column_or_row
ReferenceArchive
reference_type
2$.TSCE.ReferenceArchive.ReferenceType
cell_reference
.TSCE.CellReferenceArchive
range_reference
.TSCE.RangeReferenceArchive"M
ReferenceType
CELL_REFERENCE
RANGE_REFERENCE
NAME_DEPENDENCY
EdgeArchive
column
is_precedent
owner_id
.TSP.CFUUIDArchive"
EdgesArchive
packed_edge_without_owner
packed_edge_with_owner
owner_id_for_edge
.TSP.CFUUIDArchive
internal_owner_id_for_edge
ExpandedEdgesArchive
edge_without_owner_rows
edge_without_owner_columns
edge_with_owner_rows
edge_with_owner_columns
internal_owner_id_for_edge
CellRecordArchive
column
 dirty_self_plus_precedents_count
is_in_a_cycle
false
edge
.TSCE.EdgeArchiveB
contains_a_formula
true
has_calculated_precedents
false
#calculate_precedents_on_next_recalc
falseB
)translate_for_excel_import_on_next_recalc
false
edges
.TSCE.EdgesArchive"`
CellDependenciesArchive
cell_record
.TSCE.CellRecordArchive
num_dirty_cells
CellRecordExpandedArchive
column
 dirty_self_plus_precedents_count
is_in_a_cycle
false
has_calculated_precedents
false
expanded_edges
.TSCE.ExpandedEdgesArchive"W
CellDependenciesExpandedArchive
cell_record
.TSCE.CellRecordExpandedArchive"
CellRecordTileArchive
internal_owner_id
tile_column_begin
tile_row_begin
cell_records
.TSCE.CellRecordExpandedArchive"I
CellDependenciesTiledArchive
cell_record_tiles
.TSP.Reference"
VolatileDependenciesArchive
volatile_time_cell_column
volatile_time_cell_row
volatile_random_cell_column
volatile_random_cell_row
volatile_locale_cell_column
volatile_locale_cell_row
volatile_location_cell_column
volatile_location_cell_row
volatile_compass_cell_column
volatile_compass_cell_row
 volatile_remote_data_cell_column
volatile_remote_data_cell_row
%volatile_sheet_table_name_cell_column
"volatile_sheet_table_name_cell_row
!calculated_dependency_cell_column
calculated_dependency_cell_row
 volatile_geometry_cell_reference
.TSCE.CellReferenceArchive
volatile_geometry_cell
.TSCE.CellCoordinateArchive"
#VolatileDependenciesExpandedArchive
volatile_time_cells
.TSCE.CellCoordSetArchive
volatile_random_cells
.TSCE.CellCoordSetArchive
volatile_locale_cells
.TSCE.CellCoordSetArchive
volatile_sheet_table_name_cells
.TSCE.CellCoordSetArchive
volatile_remote_data_cells
.TSCE.CellCoordSetArchive
volatile_geometry_cell_refs
.TSCE.InternalCellRefSetArchive"c
 RTreeInternalNodeContentsArchive
child
.TSCE.RTreeNodeArchive"l
RTreeLeafNodeContentsArchive
cell_reference
.TSCE.CellReferenceArchive"
RTreeNodeArchive
level
count
internal_node_contents
2&.TSCE.RTreeInternalNodeContentsArchive
leaf_node_contents
2".TSCE.RTreeLeafNodeContentsArchive"
RTreeArchive
data_file_id
data_size
data_num_dims
data_elem_size
data_elem_real_size
data_max_nodes
data_min_nodes
root
.TSCE.RTreeNodeArchive"
RangeBackDependencyArchive
cell_coord_row
cell_coord_column
range_reference
.TSCE.RangeReferenceArchive
internal_range_reference
2#.TSCE.InternalRangeReferenceArchive"U
RangeDependenciesArchive
back_dependency
2 .TSCE.RangeBackDependencyArchive"
RangePrecedentsTileArchive
to_owner_id
from_to_range
23.TSCE.RangePrecedentsTileArchive.FromToRangeArchive
FromToRangeArchive
from_coord
.TSCE.CellCoordinateArchive
refers_to_rect
.TSCE.CellRectArchive"N
RangeDependenciesTiledArchive
range_precedents_tile
.TSP.Reference"
SpanningDependenciesArchive
column
range_context
2..TSCE.SpanningDependenciesArchive.RangeContext
cell
.TSCE.CellReferenceArchive
total_range_for_deleted_table
.TSCE.RangeCoordinateArchive
body_range_for_deleted_table
.TSCE.RangeCoordinateArchive
referring_column_to_local_cells
2=.TSCE.SpanningDependenciesArchive.ReferringColumnToLocalCells
 referring_column_to_remote_cells
2>.TSCE.SpanningDependenciesArchive.ReferringColumnToRemoteCells
ReferringColumnToLocalCells
column
range_context
2..TSCE.SpanningDependenciesArchive.RangeContext
cell_coordinate
.TSCE.CellCoordinateArchive
ReferringColumnToRemoteCells
column
range_context
2..TSCE.SpanningDependenciesArchive.RangeContext
internal_cell_reference
2".TSCE.InternalCellReferenceArchive"0
RangeContext
DEFAULT
INCLUDE_HEADERS
#SpanningDependenciesExpandedArchive
coord_refers_to_spans
2B.TSCE.SpanningDependenciesExpandedArchive.CellCoordRefersToExtents
total_range_for_table
.TSCE.RangeCoordinateArchive
body_range_for_table
.TSCE.RangeCoordinateArchive
ExtentRange
extent_begin
extent_end
ExtentRangeWithTableWithContext
owner_id
range_context
26.TSCE.SpanningDependenciesExpandedArchive.RangeContext
ranges
25.TSCE.SpanningDependenciesExpandedArchive.ExtentRange
CellCoordRefersToExtents
coordinate
.TSCE.CellCoordinateArchive
ranges_by_table_context
2I.TSCE.SpanningDependenciesExpandedArchive.ExtentRangeWithTableWithContext"0
RangeContext
DEFAULT
INCLUDE_HEADERS
WholeOwnerDependenciesArchive
dependent_cell
2".TSCE.InternalCellReferenceArchive"a
%WholeOwnerDependenciesExpandedArchive
dependent_cells
.TSCE.InternalCellRefSetArchive"
CellErrorsArchive
errors
2$.TSCE.CellErrorsArchive.ErrorForCell
ErrorForCell
coordinate
.TSCE.CellCoordinateArchive
error_flavor
2#.TSCE.CellErrorsArchive.ErrorFlavor
err_due_to_cell
2".TSCE.InternalCellReferenceArchive"i
ErrorFlavor
NONE
ERROR
REF_ERROR
CIRCULAR_REF_ERROR
UNSUPPORTED_FUNCTION_ERROR
UuidReferencesArchive
table_refs
2$.TSCE.UuidReferencesArchive.TableRef
table_uuid_refs
2,.TSCE.UuidReferencesArchive.TableWithUuidRef
TableRef
owner_uuid
.TSP.UUID
coord_set
.TSCE.CellCoordSetArchive
UuidRef
uuid
.TSP.UUID
coord_set
.TSCE.CellCoordSetArchive
TableWithUuidRef
owner_uuid
.TSP.UUID
uuid_refs
2#.TSCE.UuidReferencesArchive.UuidRef"
FormulaOwnerDependenciesArchive
formula_owner_uid
.TSP.UUID
internal_formula_owner_id
owner_kind
cell_dependencies
2%.TSCE.CellDependenciesExpandedArchive
range_dependencies
.TSCE.RangeDependenciesArchive
volatile_dependencies
2).TSCE.VolatileDependenciesExpandedArchive
spanning_column_dependencies
2).TSCE.SpanningDependenciesExpandedArchive
spanning_row_dependencies
2).TSCE.SpanningDependenciesExpandedArchive
whole_owner_dependencies
2+.TSCE.WholeOwnerDependenciesExpandedArchive
cell_errors
.TSCE.CellErrorsArchive
formula_owner
.TSP.Reference
base_owner_uid
.TSP.UUID
tiled_cell_dependencies
2".TSCE.CellDependenciesTiledArchive
uuid_references
.TSCE.UuidReferencesArchive
tiled_range_dependencies
2#.TSCE.RangeDependenciesTiledArchive"
FormulaOwnerInfoArchive
formula_owner_id
.TSP.CFUUIDArchive
cell_dependencies
.TSCE.CellDependenciesArchive
range_dependencies
.TSCE.RangeDependenciesArchive
volatile_dependencies
2!.TSCE.VolatileDependenciesArchive
spanning_column_dependencies
2!.TSCE.SpanningDependenciesArchive
spanning_row_dependencies
2!.TSCE.SpanningDependenciesArchive
whole_owner_dependencies
2#.TSCE.WholeOwnerDependenciesArchive
cell_errors
.TSCE.CellErrorsArchive
formula_owner
.TSP.Reference"Q
SubFormulaOwnerIDArchive
base_owner_uid
.TSP.UUID
owner_kind
OwnerIDMapArchive
map_entry
2..TSCE.OwnerIDMapArchive.OwnerIDMapArchiveEntry
unregistered_internal_owner_id
OwnerIDMapArchiveEntry
internal_owner_id
owner_id
.TSP.CFUUIDArchive"0
UidLookupListArchive
uuids
.TSP.UUID"
DependencyTrackerArchive
formula_owner_info
.TSCE.FormulaOwnerInfoArchive
dirty_leaf
.TSCE.CellReferenceArchiveB
owner_id_map
.TSCE.OwnerIDMapArchive
internal_dirty_leaf
2".TSCE.InternalCellReferenceArchiveB
number_of_formulas
formula_owner_dependencies
.TSP.Reference"e
RemoteDataSpecifierArchive
function_index
symbol
attribute
date
RemoteDataValueMapArchive
entry
22.TSCE.RemoteDataValueMapArchive.RemoteDataMapEntry
RemoteDataMapEntry
specifier
2 .TSCE.RemoteDataSpecifierArchive
value
.TSCE.CellValueArchive"
StockArchive
symbol
date
attribute
2!.TSCE.StockArchive.AttributeEntry
AttributeEntry
attribute
value
RemoteDataStoreArchive
value_map
.TSCE.RemoteDataValueMapArchive
stocks
.TSCE.StockArchive"q
NameTrackedReferencePair
name
tracked_reference
.TSP.Reference
tracked_reference_id
NamesByTrackedReferenceArchive
table_id
.TSP.CFUUIDArchive
name_tracked_reference_pair
.TSCE.NameTrackedReferencePair"
NamedReferenceManagerArchive
reference_tracker
.TSP.Reference
#names_by_tracked_reference_by_table
2$.TSCE.NamesByTrackedReferenceArchiveB
UuidSetStoreArchive
uuidSet
2!.TSCE.UuidSetStoreArchive.UuidSet
UuidSet
uuid
.TSP.UUID
index_of_set
UuidReferenceMapArchive
cell_refs_for_uuid
2-.TSCE.UuidReferenceMapArchive.CellRefsForUuid
CellRefsForUuid
uuid
.TSP.UUID
cell_ref
2".TSCE.InternalCellReferenceArchive
cell_refs
.TSCE.InternalCellRefSetArchive"
GroupByNodeMapArchive
refs_for_group_by
20.TSCE.GroupByNodeMapArchive.GroupNodesForGroupBy
CellRefsForGroupNode
group_node_uid
.TSP.UUID
cell_refs
.TSCE.InternalCellRefSetArchive
GroupNodesForGroupBy
group_by_uid
.TSP.UUID
refs_for_group_node
20.TSCE.GroupByNodeMapArchive.CellRefsForGroupNode"
CalculationEngineArchive
base_date_1904
dependency_tracker
.TSCE.DependencyTrackerArchive
named_reference_manager
.TSP.Reference
excel_import_date_mode
22.TSCE.CalculationEngineArchive.ExcelImportDateMode:
DATE_MODE_1900
saved_locale_identifier_for_4_2
document_random_seed
uuid_reference_map
.TSCE.UuidReferenceMapArchive
document_timestamp
document_timezone
table_uid_history
2 .TSCE.RewriteTableUIDInfoArchive
remote_data_store
.TSP.Reference
group_node_map
.TSCE.GroupByNodeMapArchive
header_name_manager
.TSP.Reference
refs_to_dirty
.TSP.Reference
saved_locale_identifier
begin_tracking_names_legacy_nrm
.TSP.UUID
end_tracking_names_legacy_nrm
.TSP.UUID"_
ExcelImportDateMode
DATE_MODE_1900
DATE_MODE_1900_LEGACY
DATE_MODE_1904_LEGACY
PreserveColumnRowFlagsArchive
begin_row_is_absolute
begin_column_is_absolute
end_row_is_absolute
end_column_is_absolute
CategoryReferenceArchive
group_by_uid
.TSP.UUID
column_uid
.TSP.UUID
aggregate_type
group_level
group_uids
2,.TSCE.CategoryReferenceArchive.CatRefUidList
preserve_flags
2#.TSCE.PreserveColumnRowFlagsArchive
relative_column
relative_group_uid
.TSP.UUID
absolute_group_uid
.TSP.UUID
option_refers_to_pivot_rows
option_refers_to_pivot_columns
agg_index_level
option_show_aggregate_name
CatRefUidList
.TSP.UUID"
ASTNodeArrayArchive
AST_node
2(.TSCE.ASTNodeArrayArchive.ASTNodeArchive
 ASTLocalCellReferenceNodeArchive
row_handle
column_handle
row_is_sticky
column_is_sticky
%ASTCrossTableCellReferenceNodeArchive
row_handle
column_handle
row_is_sticky
column_is_sticky
table_id
.TSP.CFUUIDArchive
)AST_reference_whitespace_after_sheet_name
*AST_reference_whitespace_before_table_name
)AST_reference_whitespace_after_table_name
,AST_reference_whitespace_before_cell_address
ASTColumnCoordinateArchive
column
absolute
false
ASTRowCoordinateArchive
absolute
false
ASTUidList
.TSP.UUID
ASTUidTract
columnUids
2$.TSCE.ASTNodeArrayArchive.ASTUidList
rowUids
2$.TSCE.ASTNodeArrayArchive.ASTUidList
is_range_ref
purpose
2,.TSCE.ASTNodeArrayArchive.ASTUidTractPurpose
preserve_rectangular
true
ASTStickyBits
begin_row_is_absolute
begin_column_is_absolute
end_row_is_absolute
end_column_is_absolute
ASTUidTractList
tract
2%.TSCE.ASTNodeArrayArchive.ASTUidTract
sticky_bits
2'.TSCE.ASTNodeArrayArchive.ASTStickyBits
ASTUidCoordinateArchive
column_uid
.TSP.UUID
row_uid
.TSP.UUID
column_absolute
row_absolute
ASTCategoryLevels
AST_column_group_level
AST_row_group_level
AST_agg_index_level
ASTCategoryReferenceArchive
category_ref
.TSCE.CategoryReferenceArchive
ASTColonTractArchive
relative_column
2P.TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive
relative_row
2P.TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractRelativeRangeArchive
absolute_column
2P.TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive
absolute_row
2P.TSCE.ASTNodeArrayArchive.ASTColonTractArchive.ASTColonTractAbsoluteRangeArchive
preserve_rectangular
true
!ASTColonTractRelativeRangeArchive
range_begin
range_end
!ASTColonTractAbsoluteRangeArchive
range_begin
range_end
&ASTCrossTableReferenceExtraInfoArchive
table_id
.TSP.CFUUIDArchive
)AST_reference_whitespace_after_sheet_name
*AST_reference_whitespace_before_table_name
)AST_reference_whitespace_after_table_name
,AST_reference_whitespace_before_cell_address
ASTLetNodeWhitespace
AST_let_whitespace_after_let
#AST_let_whitespace_after_identifier
AST_let_whitespace_after_equals
"AST_let_whitespace_after_delimiter
ASTNodeArchive
AST_node_type
2%.TSCE.ASTNodeArrayArchive.ASTNodeType
AST_function_node_index
AST_function_node_numArgs
AST_number_node_number
AST_boolean_node_boolean
AST_string_node_string
AST_date_node_dateNum
"AST_date_node_suppress_date_format
"AST_date_node_suppress_time_format
AST_date_node_date_time_format
AST_duration_node_unitNum
AST_duration_node_unit
AST_duration_node_style
'AST_duration_node_duration_unit_largest
(AST_duration_node_duration_unit_smallest
%AST_duration_node_use_automatic_units
AST_token_node_boolean
AST_array_node_numCol
AST_array_node_numRow
AST_list_node_numArgs
AST_thunk_node_array
.TSCE.ASTNodeArrayArchive
'AST_local_cell_reference_node_reference
2:.TSCE.ASTNodeArrayArchive.ASTLocalCellReferenceNodeArchive
-AST_cross_table_cell_reference_node_reference
2?.TSCE.ASTNodeArrayArchive.ASTCrossTableCellReferenceNodeArchive
 AST_unknown_function_node_string
!AST_unknown_function_node_numArgs
AST_whitespace
AST_column
24.TSCE.ASTNodeArrayArchive.ASTColumnCoordinateArchive
AST_row
21.TSCE.ASTNodeArrayArchive.ASTRowCoordinateArchive
$AST_cross_table_reference_extra_info
2@.TSCE.ASTNodeArrayArchive.ASTCrossTableReferenceExtraInfoArchive
AST_uid_coordinate
21.TSCE.ASTNodeArrayArchive.ASTUidCoordinateArchive
AST_sticky_bits
2'.TSCE.ASTNodeArrayArchive.ASTStickyBits
AST_frozen_sticky_bits
2'.TSCE.ASTNodeArrayArchive.ASTStickyBits
AST_let_identifier
AST_let_e2
.TSCE.ASTNodeArrayArchive
AST_let_whitespace
2..TSCE.ASTNodeArrayArchive.ASTLetNodeWhitespace
AST_symbol
AST_tract_list
2).TSCE.ASTNodeArrayArchive.ASTUidTractList
AST_category_ref
25.TSCE.ASTNodeArrayArchive.ASTCategoryReferenceArchive
AST_colon_tract
2..TSCE.ASTNodeArrayArchive.ASTColonTractArchive
AST_number_node_decimal_low
AST_number_node_decimal_high
AST_category_levels
2+.TSCE.ASTNodeArrayArchive.ASTCategoryLevels"
ASTNodeType
ADDITION_NODE
SUBTRACTION_NODE
MULTIPLICATION_NODE
DIVISION_NODE
POWER_NODE
CONCATENATION_NODE
GREATER_THAN_NODE
GREATER_THAN_OR_EQUAL_TO_NODE
LESS_THAN_NODE
LESS_THAN_OR_EQUAL_TO_NODE
EQUAL_TO_NODE
NOT_EQUAL_TO_NODE
NEGATION_NODE
PLUS_SIGN_NODE
PERCENT_NODE
FUNCTION_NODE
NUMBER_NODE
BOOLEAN_NODE
STRING_NODE
DATE_NODE
DURATION_NODE
EMPTY_ARGUMENT_NODE
TOKEN_NODE
ARRAY_NODE
LIST_NODE
THUNK_NODE
LOCAL_CELL_REFERENCE_NODE
CROSS_TABLE_CELL_REFERENCE_NODE
COLON_NODE
REFERENCE_ERROR_NODE
UNKNOWN_FUNCTION_NODE
APPEND_WHITESPACE_NODE
PREPEND_WHITESPACE_NODE
BEGIN_EMBEDDED_NODE_ARRAY
END_THUNK_NODE
CELL_REFERENCE_NODE
COLON_NODE_WITH_UIDS
REFERENCE_ERROR_WITH_UIDS
UID_REFERENCE_NODE
LET_BIND_NODE
LET_VAR_NODE
LET_END_SCOPE_NODE
LINKED_CELL_REF_NODE
LINKED_COLUMN_REF_NODE
LINKED_ROW_REF_NODE
CATEGORY_REF_NODE
COLON_TRACT_NODE
VIEW_TRACT_REF_NODE
ASTUidTractPurpose
UIDS_INCLUDED
UIDS_PREMERGE
UIDS_PREMOVEREGION
UIDS_EXCLUDED
UIDS_ACTIVE
UIDS_PREMERGE_TOPLEFT
UIDS_REMOVED_BY_MOVE
FULLTUPLE_ROW_COLUMN_HEADER
FULLTUPLE_AGGREGATE_RULE_UID
%FULLTUPLE_ROW_COLUMN_RULE_VALUE_PAIRS
FormulaTranslationFlagsArchive
excel_import_translation
false
+number_to_date_coercion_removal_translation
false
contains_uid_form_references
false
contains_frozen_references
false
returns_percent_formatted
false"
FormulaArchive
AST_node_array
.TSCE.ASTNodeArrayArchive
host_column
host_row
host_column_is_negative
false
host_row_is_negative
false
translation_flags
2$.TSCE.FormulaTranslationFlagsArchive
host_table_uid
.TSP.UUID
host_column_uid
.TSP.UUID
host_row_uid
.TSP.UUID"I
FunctorArchive
formula
.TSCE.FormulaArchive
num_args
FormatStructArchive
format_type
decimal_places
currency_code
negative_style
show_thousands_separator
use_accounting_style
duration_style
base
base_places
base_use_minus_sign
fraction_accuracy
suppress_date_format
suppress_time_format
date_time_format
duration_unit_largest
duration_unit_smallest
RangeCoordinateArchive
top_left_column
top_left_row
bottom_right_column
bottom_right_row
TableTransposeInfoArchive
number_of_footer_rows
body_range_for_transposed_table
.TSCE.RangeCoordinateArchive"c
MergeOriginMovedArchive
src_column
src_row
dst_column
dst_row
OwnerUIDMapperArchive
table_uid
.TSP.UUID
next_table_uid
.TSP.UUID
hidden_state_for_rows_owner_uid
.TSP.UUID
$next_hidden_state_for_rows_owner_uid
.TSP.UUID
"hidden_state_for_columns_owner_uid
.TSP.UUID
'next_hidden_state_for_columns_owner_uid
.TSP.UUID
conditional_style_owner_uid
.TSP.UUID
 next_conditional_style_owner_uid
.TSP.UUID
%sort_rule_reference_tracker_owner_uid
.TSP.UUID
*next_sort_rule_reference_tracker_owner_uid
.TSP.UUID
merge_owner_uid
.TSP.UUID
next_merge_owner_uid
.TSP.UUID
category_aggregates_owner_uid
.TSP.UUID
"next_category_aggregates_owner_uid
.TSP.UUID
group_by_uid
.TSP.UUID
next_group_by_uid
.TSP.UUID
pencil_annotation_owner_uid
.TSP.UUID
 next_pencil_annotation_owner_uid
.TSP.UUID"
RewriteTableUIDInfoArchive
table_uid_map
28.TSCE.RewriteTableUIDInfoArchive.TableUIDMapEntryArchive
TableUIDMapEntryArchive
prev_table_uid
.TSP.UUID
new_table_uid
.TSP.UUID"
GroupByChangeArchive
change_type
2%.TSCE.GroupByChangeArchive.ChangeType
group_by_uid
.TSP.UUID
previous_level
updated_level
previous_to_updated_map
.TSP.UUIDMapArchive
updated_to_previous_map
.TSP.UUIDMapArchive
removed_group_uids
.TSP.UUID
grouping_column_changes
26.TSCE.GroupByChangeArchive.GroupingColumnChangeArchive
GroupingColumnChangeArchive
old_level
new_level
ChangeType
NONE
GROUP_VALUE_CHANGE
GROUP_DEFINITION_CHANGE
REMOVE_GROUP_LEVEL
ADD_GROUP_LEVEL
PROMOTE
DEMOTE
RewriteGroupNodeUIDInfoArchive
group_by_uid
.TSP.UUID
group_node_uid_map
.TSP.UUIDMapArchive"
IndexedUidsArchive
uids
2#.TSCE.IndexedUidsArchive.IndexedUid
IndexedUid
uid_for_index
.TSP.UUID
index_for_uid
RewriteRangeEntryArchive
range_location
range_length
range_uids
.TSP.UUID
offset
ColumnOrRowUuidsInfoArchive
is_rows
table_uid
.TSP.UUID
cond_style_owner_uid
.TSP.UUID
group_by_uid
.TSP.UUID
uids
.TSCE.IndexedUidsArchive
range_entries
.TSCE.RewriteRangeEntryArchive
table_range
.TSCE.RangeCoordinateArchive
insert_at_uid
.TSP.UUID
insert_opposite_uid
.TSP.UUID"
RegionInfoArchive
table_uid
.TSP.UUID
column_uids
.TSCE.IndexedUidsArchive
row_uids
.TSCE.IndexedUidsArchive"
RegionMovedInfoArchive
src_region
.TSCE.RegionInfoArchive
dst_region
.TSCE.RegionInfoArchive
span_rows
span_columns
original_src_region
.TSCE.RegionInfoArchive
final_dest_table_uid
.TSP.UUID"=
MergeSourceArchive
coord_column
coord_row
HauntedOwnerArchive
owner_uid
.TSP.UUID"H
CellCoordinateArchive
packedData
column
CellCoordinateVectorArchive
cell_coord
.TSCE.CellCoordinateArchive"p
 ExpandedCellRefObjectPairArchive
cell_ref
.TSCE.CellReferenceArchive
object
.TSP.Reference"g
ExpandedCellRefObjectMapArchive
cell_ref_object_pair
2&.TSCE.ExpandedCellRefObjectPairArchive"
FormulaAtCoordArchive
column
formula
.TSCE.FormulaArchive
repeat_previous_formula
false"
FormulaCoordPairsByOwnerArchive
owner_kind
owner_uid
.TSP.UUID
formula_at_coords
.TSCE.FormulaAtCoordArchive"[
FormulasForUndoArchive
formulas_for_owner
2%.TSCE.FormulaCoordPairsByOwnerArchive"q
FormulaRewriteCommandArchive
table_rewrite_command
.TSP.Reference
super
.TSK.CommandArchive"U
TrackedReferenceArchive
.TSCE.ASTNodeArrayArchive
formula_id
ExpandedTrackedReferenceArchive
.TSCE.ASTNodeArrayArchive
formula_column
formula_row
TrackedReferenceStoreArchive
uuid
.TSP.CFUUIDArchive
tracked_reference
.TSP.ReferenceB
contained_tracked_reference
.TSCE.TrackedReferenceArchive
$contained_expanded_tracked_reference
2%.TSCE.ExpandedTrackedReferenceArchive"
ViewTractRefArchive
table_uid
.TSP.UUID
uid_tract
2%.TSCE.ASTNodeArrayArchive.ASTUidTract
preserve_flags
2#.TSCE.PreserveColumnRowFlagsArchive
agg_index_level
column_group_level
row_group_level
BooleanCellValueArchive
value
format
.TSK.FormatStructArchive
format_is_explicit
false"
DateCellValueArchive
value
format
.TSK.FormatStructArchive
format_is_implicit
format_is_explicit
false"
NumberCellValueArchive
value
unit_index
currency_code
format
.TSK.FormatStructArchive
format_is_implicit
format_is_explicit
false
decimal_low
decimal_high
StringCellValueArchive
value
format
.TSK.FormatStructArchive
format_is_implicit
format_is_explicit
false
is_regex
false
is_case_sensitive_regex
false"y
ErrorCellValueArchive
error_type
extra_info_int
extra_info_string
extra_info_double
CellValueArchive
cell_value_type
2$.TSCE.CellValueArchive.CellValueType
boolean_value
.TSCE.BooleanCellValueArchive
date_value
.TSCE.DateCellValueArchive
number_value
.TSCE.NumberCellValueArchive
string_value
.TSCE.StringCellValueArchive
error_value
.TSCE.ErrorCellValueArchive"`
CellValueType
NIL_TYPE
BOOLEAN_TYPE
DATE_TYPE
NUMBER_TYPE
STRING_TYPE
N4TSCE20CellReferenceArchiveE
N4TSCE28InternalCellReferenceArchiveE
N4TSCE22RelativeCellRefArchiveE
N4TSCE21RangeReferenceArchiveE
N4TSCE29InternalRangeReferenceArchiveE
N4TSCE29IndexSetArchive_IndexSetEntryE
N4TSCE15IndexSetArchiveE
N4TSCE31CellCoordSetArchive_ColumnEntryE
N4TSCE19CellCoordSetArchiveE
N4TSCE36InternalCellRefSetArchive_OwnerEntryE
N4TSCE25InternalCellRefSetArchiveE
N4TSCE13ColumnRowSizeE
N4TSCE15CellRectArchiveE
N4TSCE28CellRefSetArchive_OwnerEntryE
N4TSCE17CellRefSetArchiveE
N4TSCE30UidCoordSetArchive_ColumnEntryE
N4TSCE18UidCoordSetArchiveE
N4TSCE31UidCellRefSetArchive_OwnerEntryE
N4TSCE20UidCellRefSetArchiveE
N4TSCE24ReferencesToDirtyArchiveE
N4TSCE34CoordMapperArchive_BaseToViewEntryE
N4TSCE37CoordMapperArchive_SummaryToViewEntryE
N4TSCE18CoordMapperArchiveE
N4TSCE16ReferenceArchiveE
N4TSCE11EdgeArchiveE
N4TSCE12EdgesArchiveE
N4TSCE20ExpandedEdgesArchiveE
N4TSCE17CellRecordArchiveE
N4TSCE23CellDependenciesArchiveE
N4TSCE25CellRecordExpandedArchiveE
N4TSCE31CellDependenciesExpandedArchiveE
N4TSCE21CellRecordTileArchiveE
N4TSCE28CellDependenciesTiledArchiveE
N4TSCE27VolatileDependenciesArchiveE
N4TSCE35VolatileDependenciesExpandedArchiveE
N4TSCE32RTreeInternalNodeContentsArchiveE
N4TSCE28RTreeLeafNodeContentsArchiveE
N4TSCE16RTreeNodeArchiveE
N4TSCE12RTreeArchiveE
N4TSCE26RangeBackDependencyArchiveE
N4TSCE24RangeDependenciesArchiveE
N4TSCE45RangePrecedentsTileArchive_FromToRangeArchiveE
N4TSCE26RangePrecedentsTileArchiveE
N4TSCE29RangeDependenciesTiledArchiveE
N4TSCE55SpanningDependenciesArchive_ReferringColumnToLocalCellsE
N4TSCE56SpanningDependenciesArchive_ReferringColumnToRemoteCellsE
N4TSCE27SpanningDependenciesArchiveE
N4TSCE47SpanningDependenciesExpandedArchive_ExtentRangeE
N4TSCE67SpanningDependenciesExpandedArchive_ExtentRangeWithTableWithContextE
N4TSCE60SpanningDependenciesExpandedArchive_CellCoordRefersToExtentsE
N4TSCE35SpanningDependenciesExpandedArchiveE
N4TSCE29WholeOwnerDependenciesArchiveE
N4TSCE37WholeOwnerDependenciesExpandedArchiveE
N4TSCE30CellErrorsArchive_ErrorForCellE
N4TSCE17CellErrorsArchiveE
N4TSCE30UuidReferencesArchive_TableRefE
N4TSCE29UuidReferencesArchive_UuidRefE
N4TSCE38UuidReferencesArchive_TableWithUuidRefE
N4TSCE21UuidReferencesArchiveE
N4TSCE31FormulaOwnerDependenciesArchiveE
N4TSCE23FormulaOwnerInfoArchiveE
N4TSCE24SubFormulaOwnerIDArchiveE
N4TSCE40OwnerIDMapArchive_OwnerIDMapArchiveEntryE
N4TSCE17OwnerIDMapArchiveE
N4TSCE20UidLookupListArchiveE
N4TSCE24DependencyTrackerArchiveE
N4TSCE26RemoteDataSpecifierArchiveE
N4TSCE44RemoteDataValueMapArchive_RemoteDataMapEntryE
N4TSCE25RemoteDataValueMapArchiveE
N4TSCE27StockArchive_AttributeEntryE
N4TSCE12StockArchiveE
N4TSCE22RemoteDataStoreArchiveE
N4TSCE24NameTrackedReferencePairE
N4TSCE30NamesByTrackedReferenceArchiveE
N4TSCE28NamedReferenceManagerArchiveE
N4TSCE27UuidSetStoreArchive_UuidSetE
N4TSCE19UuidSetStoreArchiveE
N4TSCE39UuidReferenceMapArchive_CellRefsForUuidE
N4TSCE23UuidReferenceMapArchiveE
N4TSCE42GroupByNodeMapArchive_CellRefsForGroupNodeE
N4TSCE42GroupByNodeMapArchive_GroupNodesForGroupByE
N4TSCE21GroupByNodeMapArchiveE
N4TSCE24CalculationEngineArchiveE
N4TSCE29PreserveColumnRowFlagsArchiveE
N4TSCE38CategoryReferenceArchive_CatRefUidListE
N4TSCE24CategoryReferenceArchiveE
N4TSCE52ASTNodeArrayArchive_ASTLocalCellReferenceNodeArchiveE
N4TSCE57ASTNodeArrayArchive_ASTCrossTableCellReferenceNodeArchiveE
N4TSCE46ASTNodeArrayArchive_ASTColumnCoordinateArchiveE
N4TSCE43ASTNodeArrayArchive_ASTRowCoordinateArchiveE
N4TSCE30ASTNodeArrayArchive_ASTUidListE
N4TSCE31ASTNodeArrayArchive_ASTUidTractE
N4TSCE33ASTNodeArrayArchive_ASTStickyBitsE
N4TSCE35ASTNodeArrayArchive_ASTUidTractListE
N4TSCE43ASTNodeArrayArchive_ASTUidCoordinateArchiveE
N4TSCE37ASTNodeArrayArchive_ASTCategoryLevelsE
N4TSCE47ASTNodeArrayArchive_ASTCategoryReferenceArchiveE
N4TSCE74ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractRelativeRangeArchiveE
N4TSCE74ASTNodeArrayArchive_ASTColonTractArchive_ASTColonTractAbsoluteRangeArchiveE
N4TSCE40ASTNodeArrayArchive_ASTColonTractArchiveE
N4TSCE58ASTNodeArrayArchive_ASTCrossTableReferenceExtraInfoArchiveE
N4TSCE40ASTNodeArrayArchive_ASTLetNodeWhitespaceE
N4TSCE34ASTNodeArrayArchive_ASTNodeArchiveE
N4TSCE19ASTNodeArrayArchiveE
N4TSCE30FormulaTranslationFlagsArchiveE
N4TSCE14FormulaArchiveE
N4TSCE14FunctorArchiveE
N4TSCE19FormatStructArchiveE
N4TSCE22RangeCoordinateArchiveE
N4TSCE25TableTransposeInfoArchiveE
N4TSCE23MergeOriginMovedArchiveE
N4TSCE21OwnerUIDMapperArchiveE
N4TSCE50RewriteTableUIDInfoArchive_TableUIDMapEntryArchiveE
N4TSCE26RewriteTableUIDInfoArchiveE
N4TSCE48GroupByChangeArchive_GroupingColumnChangeArchiveE
N4TSCE20GroupByChangeArchiveE
N4TSCE30RewriteGroupNodeUIDInfoArchiveE
N4TSCE29IndexedUidsArchive_IndexedUidE
N4TSCE18IndexedUidsArchiveE
N4TSCE24RewriteRangeEntryArchiveE
N4TSCE27ColumnOrRowUuidsInfoArchiveE
N4TSCE17RegionInfoArchiveE
N4TSCE22RegionMovedInfoArchiveE
N4TSCE18MergeSourceArchiveE
N4TSCE19HauntedOwnerArchiveE
N4TSCE21CellCoordinateArchiveE
N4TSCE27CellCoordinateVectorArchiveE
N4TSCE32ExpandedCellRefObjectPairArchiveE
N4TSCE31ExpandedCellRefObjectMapArchiveE
N4TSCE21FormulaAtCoordArchiveE
N4TSCE31FormulaCoordPairsByOwnerArchiveE
N4TSCE22FormulasForUndoArchiveE
N4TSCE28FormulaRewriteCommandArchiveE
N4TSCE23TrackedReferenceArchiveE
N4TSCE31ExpandedTrackedReferenceArchiveE
N4TSCE28TrackedReferenceStoreArchiveE
N4TSCE19ViewTractRefArchiveE
N4TSCE23BooleanCellValueArchiveE
N4TSCE20DateCellValueArchiveE
N4TSCE22NumberCellValueArchiveE
N4TSCE22StringCellValueArchiveE
N4TSCE21ErrorCellValueArchiveE
N4TSCE16CellValueArchiveE
N6google8protobuf8internal16InternalMetadata9ContainerINS0_15UnknownFieldSetEEE
N6google8protobuf8internal16InternalMetadata13ContainerBaseE
 !"#$%&'(
0123456789:;<
FGHIJK
 !"#$%&
_fgh]^
hi]^fg}&v
#$%&
 !"#$%&!"#$%&PQRSTUVWXYZ[
%&fg
E'=F
)*+,-./|
@PQRSTUVWXYZ[\B]^_v`
 cdefgh
0123456789:;<>?{
wyxz=<'
AHANO
 9:;<GK6789:;<789:;<jklmnopqrstu
H~#BA
BBBBBBBB
$&'15:""BBB@?
%',>
BBBBBBBBBBBBB
BBB4B#!!BBBBBB8B
()*+23
9BBB(-/*.076
)*++++++++++++++++++++,,--./0112233444555556666678888999::;;;<==>>
!"+,.014578:;<>>
-/5689=>>>>>>>>
 !"#$%&1
++>>>>>>>>>>>>>>>>>22>>>>>>>++++++++++++
8:8:;<,0
89=89==;
>>>3
+ >+
+">+
+!>+
+$>+
+#>+
+%>+
$).38=BFJNPSVX[^aeilpsz
#$%&'()*+,-./012334555556789:;<=>?@ABBCDDDEFEEEGHHHHIHHHHJKLMNONPPQRRRRRRRRRRRRRRRRRRRRSRTUUUUUUVWXYZZZZZZZZZZ[\PPPPPPPPPPPPPPPP
16TSCEDefaultLexer
22TSCEDefaultyyFlexLexer
9FlexLexer
 !"#$%&'()*+,-./001222223456789:;<=>??@AAABCBBBDEEEEFEEEEGHIJKLKMMNOOOOOOOOOOOOOOOOOOOOPOQRRRRRRSTUVWWWWWWWWWWXYMMMMMMMMMMMMMMMM
14TSCECommaLexer
15ignoreFlexLexer
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
bool TSCEReferenceSet::operator==(const TSCEReferenceSet &) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEReferenceSet.mm
Can't compare reference sets from different calcEngines
v24@?0r^{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}C}8^B16
BOOL TSCEReferenceSet::isEqualToDepTrackerPrecedents(const TSCEReferenceSet &) const
void TSCEReferenceSet::insertRef(TSCEReferenceType)
Inserting these refTypes requires accompanying data, refType was %d
void TSCEReferenceSet::insertRef(const TSCEInternalCellReference &)
Dependency tracker is required to use this method
void TSCEReferenceSet::insertRef(const TSCESpanningRangeRef &)
Why are we getting invalid tableUID here?
v20@?0S8^B12
v24@?0r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}8^B16
v24@?0r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}8^B16
v24@?0r^{TSKUIDStruct=QQ}8^B16
v32@?0r^{TSKUIDStruct=QQ}8r^{TSKUIDStruct=QQ}16^B24
void TSCEReferenceSet::removeRef(TSCEReferenceType)
Removing these refTypes requires accompanying data, refType was %d
bool TSCEReferenceSet::containsRef(const TSCEInternalCellReference &) const
void TSCEReferenceSet::foreachInternalCellRef(__strong TSCEForEachInternalCellRefBlock) const
sLocalizedTrue
sLocalizedTrueStrings
sLocalizedFalse
sLocalizedFalseStrings
mappings_functionLocalizationDictionary
DATE
TSCalculationEngine
DATEDIF
DATEVALUE
DAYNAME
DAYS360
EDATE
EOMONTH
HOUR
MINUTE
MONTH
MONTHNAME
NETWORKDAYS
SECOND
TIME
TIMEVALUE
TODAY
WEEKDAY
WEEKNUM
WORKDAY
YEAR
YEARFRAC
DURATION
DUR2DAYS
DUR2HOURS
DUR2MILLISECONDS
DUR2MINUTES
DUR2SECONDS
DUR2WEEKS
STRIPDURATION
BASETONUM
BESSELJ
BESSELY
BIN2DEC
BIN2HEX
BIN2OCT
CONVERT
DEC2BIN
DEC2HEX
DEC2OCT
DELTA
ERFC
GESTEP
HEX2BIN
HEX2DEC
HEX2OCT
NUMTOBASE
OCT2BIN
OCT2DEC
OCT2HEX
ACCRINT
ACCRINTM
BONDDURATION
BONDMDURATION
COUPDAYBS
COUPDAYS
COUPDAYSNC
COUPNUM
CUMIPMT
CUMPRINC
CURRENCY
CURRENCYCODE
CURRENCYCONVERT
CURRENCYH
DISC
EFFECT
INTRATE
IPMT
ISPMT
MIRR
NOMINAL
NPER
PPMT
PRICE
PRICEDISC
PRICEMAT
RATE
RECEIVED
STOCK
STOCKH
XIRR
XNPV
YIELD
YIELDDISC
YIELDMAT
FALSE
IFERROR
ISBLANK
ISDATE
ISERROR
ISEVEN
ISNUMBER
ISODD
ISTEXT
TRUE
ADDRESS
AREAS
CHOOSE
COLUMN
COLUMNS
FORMULATEXT
GETPIVOTDATA
HLOOKUP
HYPERLINK
INDEX
INDIRECT
INTERSECT.RANGES
LOOKUP
MATCH
OFFSET
REFERENCE.NAME
ROWS
TRANSPOSE
UNION.RANGES
VLOOKUP
XLOOKUP
XMATCH
ACOS
ACOSH
ASIN
ASINH
ATAN
ATAN2
ATANH
CEILING
COMBIN
COSH
DEGREES
EVEN
FACT
FACTDOUBLE
FLOOR
LOG10
MROUND
MULTINOMIAL
POLYNOMIAL
POWER
PRODUCT
QUOTIENT
RADIANS
RAND
RANDBETWEEN
ROMAN
ROUND
ROUNDDOWN
ROUNDUP
SERIESSUM
SIGN
SINH
SQRT
SQRTPI
SUBTOTAL
SUMIF
SUMIFS
SUMPRODUCT
SUMSQ
SUMX2MY2
SUMX2PY2
SUMXMY2
TANH
TRUNC
AVEDEV
AVERAGE
AVERAGEA
AVERAGEIF
AVERAGEIFS
BETADIST
BETAINV
BINOMDIST
CHIDIST
CHIINV
CHITEST
CONFIDENCE
CORREL
COUNT
COUNTA
COUNTBLANK
COUNTIF
COUNTIFS
COVAR
CRITBINOM
DEVSQ
EXPONDIST
FDIST
FINV
FORECAST
FREQUENCY
GAMMADIST
GAMMAINV
GAMMALN
GEOMEAN
HARMEAN
INTERCEPT
LARGE
LINEST
LOGINV
LOGNORMDIST
MAXA
MAXIFS
MEDIAN
MINA
MINIFS
MODE
NEGBINOMDIST
NORMDIST
NORMINV
NORMSDIST
NORMSINV
PERCENTILE
PERCENTRANK
PERMUT
POISSON
PROB
QUARTILE
RANK
SLOPE
SMALL
STANDARDIZE
STDEV
STDEVA
STDEVP
STDEVPA
TDIST
TINV
TTEST
VARA
VARP
VARPA
WEIBULL
ZTEST
CHAR
CLEAN
CODE
CONCATENATE
COUNTMATCHES
DOLLAR
EXACT
FIND
FIXED
LEFT
LOWER
PLAINTEXT
PROPER
REGEX
REGEX.EXTRACT
REPLACE
REPT
RIGHT
SEARCH
SUBSTITUTE
TEXTAFTER
TEXTBEFORE
TEXTBETWEEN
TRIM
UPPER
VALUE
op_Add
op_Subtract
op_Multiply
op_Divide
op_Concat
op_Power
op_LT
op_LE
op_GT
op_GE
op_NE
op_EQ
op_Percent
op_Negate
op_PlusSign
mappings_localizedTypeStringForArgumentType
an error
an empty cell
empty
a number
a string
a Boolean
a date
a reference
a vector
a duration
anything
a number, date, or duration
localizedFunctionNameForMenuTag
Mean
Median
Mode
localizedNameForFunction:
%@_TOOLTIP
localizedCategoryForFunction:
%@_ARGUMENT_%d
%@_ARGUMENT_%d_TOOLTIP
%@_ARGUMENT_%d_MODE_%d
%@_ARGUMENT_%d_MODE_%d_TOOLTIP
arguments
Localizable
strings
-[TSULocale(TSCELocalization) localizedNamesForFunctions:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCELocalization.mm
Either %@ was translated improperly, or some other function was translated to the same name.
q24@?0@8@16
localizedFunctionCategoryDictionary
Date and Time
Duration
Engineering
Financial
Logical and Information
Reference
Numeric
Trigonometric
Statistical
Text
localizedCategoryArray
allLocalizedFunctions
localizedLabelForAggType
No Summary
Count (All)
Average (All)
Minimum
Maximum
Category
Group Name
Body
Label
Count
Count (Unique)
Rows
Count (Duplicates)
Count (Blank)
Average
Product
RANGE
localizedShortLabelForAggType
Count All
Average All
Min.
Max.
Unique
Count Duplicates
Count Blank
Base Value
% of Grand Total
% of Column Total
% of Row Total
% of Parent Column Total
% of Parent Row Total
Index
-[TSCEWarning copyByRemappingEntityIDs:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEWarning.mm
TSCE_PORT_ENABLE_REFERENCES: This is probably a bug.
-[TSCEWarning displayStringWithCalculationEngine:forTable:andCellID:]
empty cell warnings are not supported
The formula refers to %@, which contains a cell without a number.
The formula refers to %@, which contains cells without numbers.
The formula refers to cells without numbers.
The formula compares %@ to %@.
The link is invalid.
ISODD arguments must be integers.
ISEVEN arguments must be integers.
DATE day argument should be between 1 and 31.
DATE month argument should be between 1 and 12.
The formula uses a Boolean in place of a number.
The ranges given to SUMIF have different sizes.
Duration units were removed.
The units of all arguments were converted to match the units of the first argument.
%@%@%@
 (ignored) 
v24@?0r^{TSKUIDStructCoord={TSKUIDStruct=QQ}{TSKUIDStruct=QQ}}8^B16
v32@?0r^{TSKUIDStructCoord={TSKUIDStruct=QQ}{TSKUIDStruct=QQ}}8r^{TSKUIDStruct=QQ}16^B24
v8@?0
+[TSCEFunctionSpec functionSpecForFunctionName:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFunctionSpec.mm
functionSpecForFunctionName: expects US function names, but %@ (US is %@) was passed in.
+[TSCEFunctionSpec unsupportedFunctionNameForLocale:]
invalid nil value for '%{public}s'
locale
Unsupported
-[TSCEFunctionSpec loadRepeatingArguments]
I don't think we ever use higher than 2, actually, certainly not repeatingGroupSize: %hd
origArgIndex out of bounds: %lu
-[TSCEFunctionSpec argumentSpecForIndex:]
translatedIndex out of bounds: %lu
 :: 
TSCEWarningClassKey
TSCEWarningTypeKey
TSCEOriginalFormulaKey
TSCEWarningReferenceKey
TSCEWarningContextEntityKey
TSCENativeWarningClass
TSCEBlankReferencingWarning
TSCENonNumericReferencingWarning
TSCEComparisonWarning
TSCEInvalidHyperlinkWarning
TSCENonintegerISODDWarning
TSCENonintegerISEVENWarning
TSCEMonthOutOfRangeWarning
TSCEDayOutOfRangeWarning
TSCEBoolToNumberConversionWarning
TSCEMismatchedSizesWarning
TSCELossOfUnitsWarning
TSCEAutomaticUnitConversionWarning
TSCETableFormulasDidChangeNotification
TSCETableFormulasMayHaveNewValuesNotification
TSCETableWasAddedNotification
TSCETableWillBeRemovedNotification
TSCEFormulasKey
TSCEEntityKey
TSCEFormulaCachedUserVisibleStringKey
TSCEFormulaEditorChangedFocusNotification
TSCEFormulaEditorStateChangeNotification
TSCEFormulaEditorScrollToCellNotification
TSCEFormulaEditorReceivedKeyDownEventNotification
TSCEFormulaEditorActiveControllerDidChange
TSCEFormulaCellOriginDidChangeNotification
TSCEAutocompleteDataKey
TSCEFormulaMetadataErrorKey
TSCEFormulaMetadataNameKey
TSCEFormulaMetadataWarningsKey
TSCEFormulaMetadataAllWarningsCacheKey
TSCEFormulaMetadataFormattingKey
TSCEFormattingHyperlinkKey
SFTGlobalID_
TSCEDefaultsDisableImplicitNaming
TSCEDefaultsRecentFunctions
TSCEDefaultsRecentFunctionsTimestamps
TSCEDefaultsMaximumNumRecentFunctions
TSCEExpressionNodeOldAttribute
NodeCoverage
IntersectionReferenceNodeCoverage
365.2425
14593.9
453.59237
28.349523125
1.6605390402E-24
0.06479891
1609.344
.9144
.3048
.0254
1E-10
1.143
30,856,775,814,913,673
1609.347218694
6894.75729
133.3223684210526
1E-5
4.4482216152605
0.009806649999788
1E-7
4.184
4.1868
1.602176634E-19
1.3558179483314
1055.05585257348
745.69987158227022
735.49875
1.25
4046.872609874252
1E-20
0.092903
.0295735295625
0.473176473
0.56826125
0.946352946
3.785411784
0.005
1.13652
4.54609
1E-30
35.2391
28.3168
0.0163871
0.44704
0.3048
1.852
grain
shweight
uk_cwt
lcwt
hweight
stone
uk_ton
LTON
brton
Pica
Picapt
parsec
survey_mi
mmHg
Torr
pond
Rank
Reau
tbsp
fl oz
us_pt
uk_pt
tspm
uk_qt
uk_gal
ang3
ang^3
barrel
bushel
ft^3
in^3
ly^3
mi^3
yd^3
Nmi3
Nmi^3
Picapt3
Picapt^3
Pica3
Pica^3
regton
MTON
mi/h
m/sec
mi/mn
ft/mn
ft/s
m/hr
m/mn
admkn
uk_acre
us_acre
ang2
ang^2
ft^2
in^2
ly^2
Morgen
mi^2
Nmi2
Nmi^2
Picapt2
Picapt^2
Pica2
Pica^2
yd^2
byte
+[TSCEUnitRegistry unitForCurrencyCode:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEUnitRegistry.mm
can't look up unit for a nil currency code
+[TSCEUnitRegistry canonicalUnitForDimension:]
Unknown dimension found in canonicalUnitForDimension
+[TSCEUnitRegistry multiplierForUnitPrefix:]
Shouldn't try to get the multiplier of an invalid unit prefix
Shouldn't try to get the multiplier of an unknown unit prefix
+[TSCEUnitRegistry convert:fromUnit:toUnit:]
Invalid unit found in convert:
Can't convert across dimensions.
+[TSCEUnitRegistry dimensionForUnit:]
unit out of bounds in dimensionForUnit:.
-[TSCECellDirtier dirtyNewCellRef:forSeconds:fromStartTime:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECellDirtier.mm
%p Still working on dirtying: %@
TSCETaggedDecimal TSCETaggedDecimalList::findPivot()
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCETaggedDecimalList.mm
We shouldn't be finding the pivot of a 0 length array
size_t TSCETaggedDecimalList::partitionTaggedDecimals(const TSCETaggedDecimal &)
_size == 0?
+[TSCETaggedDecimalListObject createFromVector:functionSpec:argumentIndex:evaluationContext:ignoreError:ignoreDuplicates:]
Have to set the type of vector appropriately. currentType = %d
Malformed Reference Node - Unexpected Path Delimiter
Malformed Reference Node
TSCEASTNodeArray *processReference(TSCEParser *, TSCEASTNode *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECAST.mm
Wrong parser state?
Missing sibling in function call
Malformed Reference Node - Function with trailing crap
Whitespace missing between leaves.
Too many nodes inside a reference node
id TSCEASTLeafGetString(TSCEASTLeaf *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECAST.h
Can't have a string type leaf with type function.
TSCEASTNodeArray *TSCEASTLeafGetFunction(TSCEASTLeaf *)
Can't have a non function type leaf return a function.
TSCEOwnerUID formulaOwnerUIDFromNativeIDString(NSString *__strong, TSCECalculationEngine *__strong, TSCEFormulaSyntaxType)
ResolverId_
#REF!
We should have successfully registered the parsedOwnerID: %@
%@%@
Invalid Reference
void gatherNativeReferenceInformation(TSCERegionAllocator *__strong, TSCEASTLeaf *, TSCEOwnerUID, TSCERangeCoordinate *, TSUPreserveFlagsEnum *, NSString *__autoreleasing *, NSString *__autoreleasing *, TSCEASTLeaf **)
We shouldn't have quoted labels on import
#%lu[%@]
%@<%p> for ownerUID %@:
Table %@ <- %@
Table %@, Uid: %@ <- %@
v24@?0r^{TSUCellCoord=ISBB}8^B16
'%C%C%C%C
+[NSCharacterSet(TSCEAdditions) tsce_singleQuoteCharacterSet]_block_invoke
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/NSCharacterSetAdditions.m
(){}+-*/^%:,!&=><$"'#;|
%C%C%C
%C%C%C%C%C%C%C
%C%C
%C%C%C%C%C%C%C%C%C%C%C%C%C%C%C%C%C%C%C%C%C%C
+[NSCharacterSet(TSCEAdditions) tsce_characterSetRequiringSingleQuotes]_block_invoke
.%C%C
+[NSCharacterSet(TSCEAdditions) tsce_periodCharacterSet]_block_invoke
+[NSCharacterSet(TSCEAdditions) tsce_internationalWhitespaceCharacterSet]_block_invoke
+[NSCharacterSet(TSCEAdditions) tsce_internationalWhitespaceAndNewlineCharacterSet]_block_invoke
+[NSCharacterSet(TSCEAdditions) tsce_internationalColonCharacterSet]_block_invoke
+[NSCharacterSet(TSCEAdditions) tsce_dollarSignCharacterSet]_block_invoke
,%C%C;%C%C%C
+[NSCharacterSet(TSCEAdditions) tsce_listDelimiterCharacterSet]_block_invoke
virtual TSCEASTElement *TSCEASTRewriteUsingValuesRewriter::binaryInfixOperatorNode(TSCEASTBinaryElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTRewriteUsingValuesRewriter.mm
Unknown operator tag: %d
evaluation stack is too small
virtual TSCEASTElement *TSCEASTRewriteUsingValuesRewriter::unaryOperatorNode(TSCEASTUnaryElement *, BOOL)
virtual TSCEASTElement *TSCEASTRewriteUsingValuesRewriter::linkedRefNode(TSCEASTLinkedRefElement *)
Unsupporeted by TSCEASTRewriteUsingValuesRewriter: linkedRefNode
virtual TSCEASTElement *TSCEASTRewriteUsingValuesRewriter::uidReferenceNode(TSCEASTUidReferenceElement *)
Unsupporeted by TSCEASTRewriteUsingValuesRewriter: uidReferenceNode
virtual TSCEASTElement *TSCEASTRewriteUsingValuesRewriter::letBindNode(TSCEASTLetBindElement *)
Not expecting let usage in this rewriter
virtual TSCEASTElement *TSCEASTRewriteUsingValuesRewriter::letVariableNode(TSCEASTLetVariableElement *)
virtual TSCEASTElement *TSCEASTRewriteUsingValuesRewriter::letEndScopeNode(TSCEASTLetEndScopeElement *)
TSCEValue TSCEASTRewriteUsingValuesRewriter::evaluationResult()
an evaluation result is undefined
bool TSCEASTRewriteUsingValuesRewriter::rewriteFunctionCallByRemovingNumberToDateCoercions(uint16_t, uint32_t)
All TSCEASTRewriteUsingValuesRewriter callbacks need to adjust _evaluationStackElementOriginSizes and _copiedNodes appropriately.
-[TSCENameTrie removeName:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCENameTrie.mm
Verify we are deleting the correct node
-[TSCEReferencesToDirty setCalculationEngine:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEReferencesToDirty.mm
calcEngine
-[TSCEReferencesToDirty dirtyAllCellsInOwner:]
depTracker
v24@?0r^{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}8^B16
-[TSCEReferencesToDirty dirtyRangeRef:]
v32@?0r^{TSKUIDStruct=QQ}8r^v16^B24
B8@?0
-[TSCEUndoTractList addToIncludedUidsTractColumnUids:rowUids:isRangeRef:preserveRectangularRange:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEUndoTractList.mm
Combining a spanning and non-spanning TSKUIDStructVector vector
<%@> sticky:%d Tracts: 
  %@
-[TSCEUndoTractList(FullTuple) initAsFullTupleForColumnHeaderUid:rowHeaderUid:aggregateRuleUid:flatteningDimension:]
Not a valid TSTTableDimension value: %d
TSCEExtraInfoKey
TSCEArgument1Key
TSCEArgument2Key
TSCESyntaxError
TSCEInvalidTokenInFormulaError
TSCEUnknownError
TSCEUnknownFunctionError
TSCEUnknownLabelError
TSCEInvalidReferenceError
TSCEDivideByZeroError
TSCEZeroToPowerOfZeroError
TSCECircularReferenceError
TSCEValueError
TSCENumberOfArgumentsError
TSCETooManyArgumentsError
TSCENumberError
TSCEErrorReferenceError
TSCEInvalidArgumentsError
TSCEAutoNumberAttachmentError
TSCEAttachmentError
TSCEMissingTableError
TSCEInvalidIntersectionError
TSCENotAReferenceError
TSCENotACellReferenceError
TSCENotARangeReferenceError
TSCEMatchNotFoundError
TSCERegexMatchNotFoundError
TSCEOutOfBoundsArgumentError
TSCEInvalidArrayContentsError
TSCEValueNotAvailableError
TSCEArgumentSetUsedOutOfContextError
TSCEDifferentNumberOfDataPointsError
TSCEInvalidDateManipulationError
TSCEMixedTypeManipulationError
TSCENoModeError
TSCEEmptyArgumentError
TSCEEmptyArgumentSpecificError
TSCEInvalidHyperlinkError
TSCEDifferentNumberOfElementsError
TSCEStringTooLongError
TSCEUnionInsideIntersectionError
TSCEStartNumberExceedsStringLengthError
TSCENoSuitableArgumentsError
TSCEInvalidArgumentRelationshipError
TSCEInvalidArgumentEqualityRelationshipError
TSCEInvalidIndexForChooseError
TSCENonEmptyStringRequiredError
TSCEStringDoesNotRepresentANumberError
TSCEStringDoesNotRepresentDateError
TSCESignsMustMatchError
TSCERangeDoesNotSumToOneError
TSCEUnsupportedR1C1Error
TSCEInvalidDateError
TSCEInvalidTimeError
TSCENotAVectorError
TSCEInvalidProbabiltyError
TSCENumberSmallerThanZeroError
TSCEArgumentEqualsToZeroError
TSCEPositionLargerThanArrayError
TSCEInvalidFrequencyError
TSCEInvalidTypeError
TSCEInvalidTailError
TSCEInvalidSubtotalFunctionNumberError
TSCENumberDoesNotConvergeError
TSCENumberDoesNotConvergeWithEstimateError
TSCEReferenceToEmptyCellError
TSCENumberMinusDateError
TSCETooFewDataPointsError
TSCEDateEarlierThanStartingDateError
TSCEOnlyPositiveOrNegativeError
TSCEInvalidCurrencyComparisonError
TSCEInvalidComparisonError
TSCEMismatchedUnitsError
TSCEUnitsNotAllowedError
TSCECurrencyNotAllowedError
TSCEDurationNotAllowedError
TSCEMismatchedCurrenciesError
TSCESumMixedDurationsAndUnitlessWithoutADateError
TSCENotEnoughInputsError
TSCEInvalidArgumentPairingsError
TSCERangeSizeMismatchError
TSCEEmptyArrayError
TSCEInvalidBaseCharacterError
TSCEInvalidUnitStringError
TSCEDifferentDimensionsError
TSCENonMetricUnitPrefixError
TSCEConvertOriginUnitMismatchError
TSCEArrayElementNoDataError
TSCEDataInvalidDimensionsError
TSCEDataInvalidLengthError
TSCEDataInvalidWidthError
TSCENegativeReceivedAmountError
TSCEInvalidMatchModeError
TSCEFormulaTooLongError
TSCEMismatchedMaxUnitsError
TSCEGridValueNotNumberError
TSCECharInputOutOfBoundsError
TSCENormdistPDFDurationError
TSCELinestHighlyCorrelatedVariableError
TSCEComparisonTypeError
TSCEMultipleDurationsError
TSCELinestMatrixUnderdeterminedError
TSCENegativeVectorValueError
TSCEPercentRankInputOutOfRangeError
TSCEPercentRankExcInputOutOfRangeError
TSCELocationServicesNotEnabledError
TSCELocationHeadingUnknownError
TSCELocationUnknownError
TSCELocationUserDeniedError
TSCELocationNetworkError
TSCELocationHeadingFailureError
TSCEInvalidLatitudeLongitudeError
TSCEInvalidAltitudeError
TSCEInvalidHeadingError
TSCEInvalidRegexError
TSCEUnsupportedFunctionError
TSCEUnsupportedFeatureError
TSCENoConditionIsTrueError
TSCEInvalidLiveStockAttributeError
TSCENotAReferenceToAFormulaError
TSCEInvalidReferenceNameAttributeError
TSCEInvalidLiveCurrencyAttributeError
TSCEInvalidHistoricalStockAttributeError
TSCEInvalidHistoricalCurrencyAttributeError
TSCEInvalidHistoricalDateError
TSCENoTradingInformationError
TSCEInvalidStockCodeError
TSCEInvalidCurrencyPairError
TSCERemoteDataServerError
TSCERemoteDataUnavailableError
TSCENotReadyError
TSCEDisallowedStockModeError
TSCEInvalidRangeUsageError
TSCEMissingRunningTotalInFieldError
TSCEMissingPivotTableError
TSCEInvalidAggregateColumnError
TSCEInvalidGroupingColumnError
TSCEAbortedError
void TSCECellRecord::switchToEdgeListStructure(TSCECellRecordEdgeLists *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECellRecord.mm
Overriding existing _edges pointer
void TSCECellRecord::addEdge(const TSCEInternalCellReference &, BOOL)
Should already have an _edges structure allocated
void TSCECellRecord::readExpandedPrecedentsWithOwners(const TSCE::ExpandedEdgesArchive &)
corrupted file
TSCECellRecord %@ (%lu,%lu): 
 dirtySelfPlusPrecedentsCount: %lu
 guaranteedOnDirtyLeafQueue: %@
 isInACycle: %@
 containsFormula: %@
 hasCalculatedPrecedents: %@
 translateForExcelImportOnNextRecalc: %@
 Precedents (%lu): 
%@, 
 Dependents count: %lu
%@<%p>:
v32@?0{_NSRange=QQ}8^B24
v24@?0Q8^B16
-[TSCECoordMapper chromeTractRefForViewTractRef:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECoordMapper.mm
Not able to find valid indexes
Wasn't expecting this to be possible with valid input
v16@?0I8I12
TSUColumnIndex TSCEMakeAbsoluteColumnFromRelativeColumn(TSUCellCoord, TSURelativeColumnIndex, BOOL)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCETypes.h
overflow in column
TSURowIndex TSCEMakeAbsoluteRowFromRelativeRow(TSUCellCoord, TSURelativeRowIndex, BOOL)
overflow in row, input row: %d with host row: %lu
Calling TSCEMakeAbsoluteRowFromRelativeRow with an invalid hostCell row: %@
TSKUIDStructVector TSCEASTInsertRowsRewriter::columnUIDsForRange(const TSCEOwnerUID &, NSRange)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTInsertRowsRewriter.mm
This method should only be called for MoveColumnsOrRows rewrites
TSKUIDStructVector TSCEASTInsertRowsRewriter::rowUIDsForRange(const TSCEOwnerUID &, NSRange)
virtual TSCEASTElement *TSCEASTInsertRowsRewriter::uidReferenceNode(TSCEASTUidReferenceElement *)
TSCEASTInsertRowsRewriter - only move rows uses uuid-form references
Can't be spanning on both row and column, tractList: %{public}@
%C%C%C%%C
%C%C%C%C%C%C%C%C%C
'%C%C%C%C%C%C%C
TSCEUidLookupList:
virtual TSCEASTElement *TSCEASTRepairBadRefsRewriter::colonTractNode(TSCEASTColonTractElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTRepairBadRefsRewriter.mm
Can't have a reference spanning both columns and rows
v24@?0r^{TSUIndexRange=qq}8^B16
void TSCECellRefSet::encodeToArchive(TSCE::InternalCellRefSetArchive &, TSCEDependencyTracker *) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECellRefSet.mm
virtual NSString *TSCEStringValue::string(TSCEFunctionSpec *__strong, int, TSULocale *__strong) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEStringValue.mm
customFormat.customFormat.defaultFormatData
TSCENumberValue::TSCENumberValue(const TSUDecimal &, TSCEBaseUnit, BOOL)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCENumberValue.mm
can't make a unitless zero with a number other than zero!
can't make a unitless zero with a unit!
virtual NSString *TSCENumberValue::string(TSCEFunctionSpec *__strong, int, TSULocale *__strong) const
No locale, falling back to current locale.
NSComparisonResult TSCENumberValue::compare(const TSCENumberValue &) const
Support for non-duration, non-currency unit comparisons is not implemented.
TSCENumberValue TSCENumberValue::percent() const
Should never call percent on a unit value!
virtual TSCEASTElement *TSCEASTInsertRowsInsertedCellsRewriter::colonTractNode(TSCEASTColonTractElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTInsertRowsInsertedCellsRewriter.mm
We expect only one absolute row in a single ended preserveRows tractRef.
We expect only one absolute column in a single ended preserveColumns tractRef.
virtual NSString *TSCEDateValue::string(TSCEFunctionSpec *__strong, int, TSULocale *__strong) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEDateValue.mm
dateFormat.customFormat.defaultFormatData
TSCEValue::TSCEValue(const TSCENumberValue &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEValue.mm
nil TSCENumberValue
TSCEValue::TSCEValue(const TSCEStringValue &)
nil TSCEStringValue
TSCEValue::TSCEValue(const TSCEDateValue &)
nil TSCEDateValue
TSCEValue::TSCEValue(const TSCEGrid &)
nil TSCEGrid
TSCEValue::TSCEValue(const TSCEReferenceValue &)
nil TSCEReferenceValue
TSCEValue::TSCEValue(const TSCEErrorValue &)
nil TSCEErrorValue
TSCEValue::TSCEValue(const TSCEThunkValue &)
nil TSCEThunkValue
TSCEValue::TSCEValue(const TSCEValueGridValue &)
nil TSCEValueGridValue
TSCEArgumentType TSCEValue::nativeType() const
Undefined type. Returning nonsensical value.
TSCEArgumentType TSCEValue::deepType(TSCEEvaluationContext *) const
TSCENumberValue TSCEValue::number(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
NSDate *TSCEValue::date(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
NSString *TSCEValue::string(TSCEFunctionSpec *__strong, int, TSULocale *__strong) const
TSCERichTextStorage TSCEValue::richTextStorage(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
NSString *TSCEValue::rawString(TSCEFunctionSpec *__strong, int, TSULocale *__strong) const
TSCERichTextStorage TSCEValue::rawRichTextStorage(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
BOOL TSCEValue::boolean(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
TSCEGrid TSCEValue::formattedGrid(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
TSCEReferenceValue TSCEValue::reference(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
TSCEError *TSCEValue::error() const
TSCECategoryRef *TSCEValue::categoryRef() const
This TSCEValue was not of type TSCEValueTypeCategoryRef, its type %d
TSCEFormat TSCEValue::format() const
BOOL TSCEValue::isNativelyEqual(const TSCEValue &, TSCEEvaluationContext *) const
NSString *TSCEValue::bakedString(TSULocale *__strong) const
bool TSCEValue::isNil() const
TSCEASTNodeArray *TSCEValue::newCorrespondingAST(TSCEEvaluationContext &, TSCEFunctionSpec *__strong, int, bool) const
TSCEValue TSCEValue::valueBySettingFormat(const TSCEFormat &)
const TSCEASTNodeArray *TSCEValue::unwrapThunk() const
can't call unwrapThunk() on a non-thunk!
<%@: %p>:
-[TSCEAbstractGrid deepType:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEAbstractGrid.mm
TSCEAbstrctGrid subclasses must override
-[TSCEAbstractGrid dimensions]
-[TSCEAbstractGrid valueAtGridCoord:accessContext:]
-[TSCEAbstractGrid valueAtIndex:accessContext:]
-[TSCEAbstractGrid count]
-[TSCEAbstractGrid subGridValueAtGridCoord:width:height:accessContext:]
TSCEAbstractGrid subclasses must override
-[TSCEAbstractGrid newCorrespondingAST:argIndex:bakeReferences:evaluationContext:]
too many arguments to fit in a node!
-[TSCEAbstractGrid value]
-[TSCEAggregateGrid initWithGrids:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEAggregateGrid.mm
failed to allocate memory
-[TSCEAggregateGrid valueAtGridCoord:accessContext:]
2D array access not implemented for class %@
-[TSCEAggregateGrid valueAtIndex:accessContext:]
SFTArgumentAccessor consistency violation
-[TSCEAggregateGrid deepType:]
Shouldn't call deepType on an %@ class
-[TSCEAggregateGrid string:argIndex:locale:]
TSCEAggregateGrid doesn't have a meaningful string() to provide
-[TSCEDenseGrid initWithValueGrid:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEDenseGrid.mm
Warning, making a TSCEDenseGrid with a non-zero based offset: %@
TSCEReferenceValue::TSCEReferenceValue(TSCEEvaluationContext &, const TSCEOwnerUID &, const TSCERangeCoordinate &, const TSUPreserveFlags &, BOOL)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEReferenceValue.mm
Invalid attempt to create a reference value with an invalid tableUID.
TSCEReferenceValue::TSCEReferenceValue(TSCEEvaluationContext &, const TSCEOwnerUID &, const TSCERelativeRangeCoordinate &, const TSUPreserveFlags &)
TSCEReferenceValue::TSCEReferenceValue(TSCEEvaluationContext &, const TSCEOwnerUID &, const TSCERelativeCellCoordinate &, const TSUPreserveFlags &)
%@::%@
-[TSCEReferenceBackedGrid string:argIndex:locale:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEReferenceBackedGrid.mm
TSCEReferenceBackedGrid doesn't have a meaningful string() to provide
-[TSCEReferenceBackedGrid valueAtGridCoord:accessContext:]
evaluationContext
virtual TSCEASTElement *TSCEASTMoveRegionRewriter::colonTractNode(TSCEASTColonTractElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTMoveRegionRewriter.mm
Not expected to need to combine RelativeTractRef rewrites
TSCEUnitlessZero::TSCEUnitlessZero(double)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEUnitlessZero.mm
TSCEUnitlessZero::TSCEUnitlessZero(double, TSCEBaseUnit)
virtual TSCEArgumentType TSCEAbstractValue::nativeType() const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEAbstractValue.mm
Subclasses must override nativeType
virtual TSCEValue TSCEAbstractValue::value() const
subclasses must override
virtual NSString *TSCEAbstractValue::bakedString(TSULocale *__strong) const
Shouldn't get a reference type from deepType
"%@"
these cases shouldn't happen
virtual BOOL TSCEAbstractValue::isNativelyEqual(const TSCEValue &, TSCEEvaluationContext *) const
isNativelyEqual not implemented for type: %d
virtual TSCEReferenceValue TSCEAbstractValue::reference(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
virtual size_t TSCEAbstractValue::hash() const
subclasses must override TSCEAbstractValue::hash()
virtual TSCEASTNodeArray *TSCEAbstractValue::newCorrespondingAST(TSCEEvaluationContext &, TSCEFunctionSpec *__strong, int, bool) const
subclasses must override newCorrespondingAST
TSCEErrorTypeKey
TSCEFunctionNameKey
TSCEExtraInfoStringKey
TSCEExtraInfoNumberKey
kTSCEDateAsTimeIntervalKey
kTSCEOwnerUIDKey
kTSCERangeReferenceKey
kTSCEReferenceArrayKey
kTSCEAnyReferenceKey
kTSCEArgumentIndexKey
kTSCEExpectedTypeKey
kTSCEFoundTypeKey
TSCELowerBoundKey
TSCEUpperBoundKey
TSCELowerBoundInclusiveKey
TSCEUpperBoundInclusiveKey
TSCEValueToMatchKey
TSCEArgumentsAscendingKey
TSCEEqualityPermittedKey
TSCEAfterMatchKey
TSCEOccurrenceKey
TSCEMatchsFoundKey
TSCEPreviousMatchKey
TSCEPreviousValueIsRegexKey
TSCEProblemExpressionStringKey
TSCEProblemModeKey
TSCEProblemNodeIsCellReferenceKey
TSCEAttachmentErrorRaisedInTextCellKey
TSCEInvalidReferenceToMergeKey
TSCEReferenceEndCellInvalidKey
TSCEUnitNameKey
TSCEChooseIndexKey
kTSCEMaxArgsAllowedKey
kTSCEArgsProvideddKey
+[TSCEError errorWithDictionary:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEError.mm
Must have errorTypeKey set to use this API
-[TSCEError displayStringWithCalculationEngine:forTable:andCellID:]
Unknown error.
\U201C%@\U201D isn\U2019t a valid cell reference.
\U201C%@\U201D isn\U2019t a valid function name.
Numbers can\U2019t be divided by zero.
The formula calculates zero to the power of zero, which can\U2019t be computed.
The operator \U201C%@\U201D
The function \U201C%@\U201D
Argument %d of %@
 can\U2019t be %@.
 can\U2019t take %@.
 expects %@
, but cell %@ contains %@.
 but found \U201C%@.\U201D
 but found an empty cell.
This formula can\U2019t reference its own cell, or depend on another formula that references this cell.
Running Total In requires field to be a grouping column.
Argument %d of %@ must refer to a pivot table.
Argument %d of %@ must refer to an aggregate value of the pivot table.
Argument %d of %@ must refer to a grouping column of the pivot table.
invalid number of arguments error exception
spec not found for function %@
one argument
%d arguments
%@ requires at least %@.
%@ requires at least %@, but was given %@.
%@ requires between %d and %d arguments, but was given %@.
%@ requires %@, but was given %@.
%@ requires its arguments to result in a number within the valid range.
The formula contains a number outside the valid range.
The formula contains an invalid reference.
The formula refers to a cell which contains an error.
Cell \U201C%@\U201D contains an error.
Argument %d of %@ is invalid.
The formula contains a page number or page count, which aren\U2019t allowed in formulas.
The formula refers to a cell with a shape or media file. This isn\U2019t supported.
There are no cells in the intersection of the ranges \U201C%@.\U201D
%@ must have a cell or range reference as an argument.
%@ must have a cell reference as an argument.
%@ must have a range reference as an argument.
%@ couldn\U2019t find the value \U201C%@\U201D.
%@ must begin searching from a number within the length of the search text.
Arguments %d and later
Argument %d
Can't be out of bounds without bounds specified
%@ in %@ must be greater than or equal to %g.
%@ in %@ must be greater than %g.
%@ in %@ must be less than or equal to %g.
%@ in %@ must be less than %g.
%@ in %@ must be greater than or equal to %g and less than or equal to %g.
%@ in %@ must be greater than or equal to %g and less than %g.
%@ in %@ must be greater than %g and less than or equal to %g.
%@ in %@ must be greater than %g and less than %g.
Arrays can contain only constant values.
%@ couldn\U2019t find the requested value.
The two ranges in %@ must be the same size.
The formula contains a list where a single argument is expected.
The formula\U2019s arguments can only include one date value.
%@ requires all arguments to be of the same type, either dates, numbers, or durations.
MODE requires that its arguments contain repeated values.
You must specify a value for all the required arguments.
The function doesn\U2019t allow empty arguments.
Argument %d can\U2019t be empty.
The range %@ can\U2019t be used as a single value.
All arguments to %@ must be the same length.
The formula can\U2019t be calculated because the resulting text would be too long.
Lists of references can\U2019t intersect.
%@ requires %@, but none were found.
no bigger than
at least as big as
smaller than
larger than
Argument %d must be %@ argument %d.
Argument %d must be different from argument %d.
The first argument of %@ must be an index of another argument, but there is no argument at index %d.
An empty string can\U2019t be used as an argument of %@.
%@ requires a string specifying a number, but found \U201C%@\U201D instead.
%@ requires a string specifying a date/time value, but found \U201C%@\U201D instead.
%@ requires both arguments to be positive or negative.
Argument %d of %@ must sum to 1.
R1C1-style references aren\U2019t supported.
The date returned by the formula isn\U2019t valid.
The time returned by the formula isn\U2019t valid.
Vector arguments can contain only one row or column.
%@ requires that all arguments be between 0 and 1.
All arguments must be equal to or larger than zero.
Argument %d of %@ can\U2019t be equal to zero.
%@ requires the position argument to be smaller than or equal to the size of the array.
Argument %d of %@ must be equal to 1, 2, or 4.
Argument %d of %@ must be equal to 0 or 1.
Argument %d of %@ must be equal to 1 or 2.
SUBTOTAL requires that its first argument be between 1 and 11 or 101 and 111.
%@ couldn\U2019t reach a result.
%@ couldn\U2019t reach a result. Try adjusting the estimate argument.
%@ requires multiple pairs of cash-flows and dates.
%@ requires dates to be on or after the starting date.
%@ requires at least one positive and one negative argument.
%@ refers to an empty cell.
%@ refers to %@, which is empty.
The operator \U201C-\U201D can\U2019t subtract a date from a number.
Different currency types can\U2019t be compared.
Durations can\U2019t be compared to other data types.
%@ requires that its arguments use the same type of unit.
%@ requires that arguments %@ use the same type of unit.
Argument %d of %@ can\U2019t be a currency or duration.
Arguments %d and later of %@ can\U2019t contain currency or duration values.
Argument %d of %@ can\U2019t be a currency.
Arguments %d and later of %@ can\U2019t be currency values.
Argument %d of %@ can\U2019t be a duration.
The function \U201C%@\U201D expects %@ but found a duration.
%@ requires that all monetary values use the same currency.
Values being summed by %@ must be either all durations or all numbers, unless one value is a date.
Argument %d of %@ requires at least %@ values.
%@ requires an odd number of arguments, at least three.
%@ requires an even number of arguments.
%@ requires that all range arguments are the same size.
Arrays can\U2019t be empty.
\U2018%@\U2019 isn\U2019t a valid character in the base %d numeral system.
\U201C%@\U201D isn\U2019t a valid unit.
%@ requires that all its arguments have the same type of unit (for example, time or temperature).
Prefixes require metric units. The unit \U201C%@\U201D isn\U2019t metric.
The number to convert has units that conflict with the units to convert from.
The index position in the array must contain data.
The x and y arrays must have the same length and width.
The x and y arrays must have the same length.
The x and y arrays must have the same width.
RECEIVED must evaluate to a value greater than zero.
MATCH requires the third argument to be equal to 1, 0, or -1.
Formulas can\U2019t be longer than 8,192 characters.
RANDBETWEEN requires that both durations have the same maximum unit.
%@ requires all values in argument %d to be numbers.
The first argument of CHAR must represent a valid character, generally between 32 and 65535.
When using duration values with NORMDIST, the cumulative argument must be TRUE.
An x variable is too highly correlated with one or more other x variables for LINEST to calculate a result.
You can\U2019t compare %@ with %@ because their data types are different.
%@ can\U2019t be given multiple durations.
LINEST requires more data points to calculate a result.
%@ requires all numbers in argument %d to be positive.
PERCENTRANK requires that argument 2 be within the range specified in argument 1.
PERCENTRANK.EXC requires that argument 2 be within the range specified in argument 1.
Location services are not enabled on the device.
Bearing information can\U2019t be determined right now.
Location service is unable to obtain a location value right now.
Access to the location service was denied by the user.
The network was unavailable or a network error occurred.
Bearing information can\U2019t be determined due to strong interference from nearby magnetic fields.
The latitude and longitude values are invalid
The altitude value is invalid
The bearing value is invalid
The formula contains an unsupported function
%@ requires at least one TRUE condition, but none were found.
The requested STOCK attribute is invalid.
The requested CURRENCY attribute is invalid.
The requested STOCKH attribute is invalid.
The requested CURRENCYH attribute is invalid.
The requested historical date is invalid or is in the future.
There is no historical data on the requested date. The next available is on %@.
There is no historical data in the entire year of the requested date. Historical data may not be available for all securities.
No information about the specified currency pair.
Unable to retrieve information from the remote data server.
Data for the \U2018%@\U2019 attribute isn\U2019t available for the selected symbol.
\U2026
Ask Price
Ask Price data is not available.
Bid Price
Bid Price data is not available.
Ask Size
Ask Size data is not available.
Bid Size
Bid Size data is not available.
The formula refers to a cell without a formula.
The requested REFERENCE.NAME attribute is invalid.
No specified error, type %d %{public}@ dictionary: %{public}@
#NAME!
#DIV/0!
#VALUE!
#CIRC!
#ARGS!
#NUM!
#SYN!
-[TSCEError rangeRef]
Wrong type stored for kTSCERangeReferenceKey in errorDictionary: %@
+[TSCEError typeErrorForValue:functionSpec:argumentIndex:locale:]
No functionName available from functionSpec: %{public}@
-[TSCEError isNativelyEqual:]
void TSCECellRecordTile::updateIndexesForCellRecord(const TSCECellRecord &, TSCECellDependencies *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECellRecordTile.mm
cellDependencies
BOOL TSCECellRecordTile::replaceCellRecord(TSCECellRecord &, TSCECellDependencies *)
cellRecord can't handle multiple self references
BOOL TSCECellRecordTile::replaceCellRecord(TSCECellRecord &, TSCECellDependencies *)_block_invoke
edge pointing to nonexistant table found: %lu
v28@?0S8r^v12^B20
BOOL TSCECellRecordTile::deleteCellRecord(TSCECellRecord *, TSCECellDependencies *)
invalid cell record delete attempt
failed to realloc cell record storage
void TSCECellRecordTile::sortCellRecords()
no duplicate cell records permitted
std::vector<TSCECellRecord *> TSCECellRecordTile::sortedCellRecordVector() const
void TSCECellRecordTile::appendExpandedEdgeToArchive(TSCE::ExpandedEdgesArchive *, const TSCEInternalCellReference &) const
_wrapper
v24@?0^{TSCECellRecord=^{TSCECellRecordEdgeLists}Q{TSCEPackedEdge=[8c]}ISS}8^B16
-[TSCECellRecordTileWrapper unpackAfterUnarchiveForCellDependencies:]
[%lu,%lu]
(%lu x %lu)
virtual TSCEASTNodeArray *TSCENilValue::newCorrespondingAST(TSCEEvaluationContext &, TSCEFunctionSpec *__strong, int, bool) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCENilValue.mm
nil values are unexpected on the evaluation stack
-[NSDate(TSCEAdditions) tsce_weekNumberForType:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECalculationUtilities.mm
Incorrect month number in function WEEKNUM
Incorrect type number in function WEEKNUM.
BOOL TSCEValueHasError(TSCEValue, int, TSCEEvaluationContext *)
actual values shouldn't have TSCEAnyArgumentType
actual values shouldn't have TSCEDurationArgumentType
actual values shouldn't have TSCENoCoerceScalarArgumentType
NSComparisonResult TSCECaseInsensitiveCompareValues(const TSCEValue &, const TSCEValue &, TSCEEvaluationContext &)
TSCEInvalidComparisonError should not be raised when both numbers are durations
TSCEInvalidComparisonError should not be raised when both numbers are currencies
Dimension here should be duration, TSCEInvalidComparisonError should not be raised if it's a currency
TSCEInvalidComparisonError should not be raised when both numbers have no units
We should never reach here unless you pass in nodes with unsupported types, leftType: %d rightType: %d
+[(){}^$|\./
.{1}
NSString *TSCEConvertWildcardStringToICURegex(NSString *__strong)
We don't want to quote a character that doesn't need to be quoted.
BOOL TSCEValueSufficesForArgumentType(const TSCEValue &, TSCEArgumentType, TSCEArgumentType, TSCEArgumentType, TSCEEvaluationContext *)
empty arguments should never be required
TSCEValue TSCEMultifactorial(TSCEFunctionSpec *__strong, TSCEValue, TSCENumberValue, TSCENumberValue, TSCEEvaluationContext *)
Multifactorial shouldn't have i less than zero.  Please file a bug.
TSCEValue TSCEEvaluateAverageIgnoringError(TSCECalculationEngine *__strong, TSUCellCoord, const TSCEOwnerUID &, TSCERangeCoordinate, const TSCEOwnerUID &)
Unregistered tableUID found when calculating average
NSDictionary<NSString *,NSMutableIndexSet *> *TSCEEvaluateUniqueIgnoringError(TSCECalculationEngine *__strong, TSUCellCoord, const TSCEOwnerUID &, TSCERangeCoordinate, const TSCEOwnerUID &)
Unregistered tableUID found when calculating unique
TSCEValue TSCEEvaluateLargeOrSmallIgnoringError(TSCECalculationEngine *__strong, TSUCellCoord, const TSCEOwnerUID &, TSCERangeCoordinate, const TSCEOwnerUID &, BOOL, double, BOOL)
Unregistered tableUID found when calculating large/small
TSCEValue TSCEEvaluateCountIgnoringError(TSCECalculationEngine *__strong, TSUCellCoord, const TSCEOwnerUID &, TSCERangeCoordinate, const TSCEOwnerUID &)
Unregistered tableUID found when calculating count
TSCEValue TSCEEvaluationStack::valueForArgumentAtIndexSingletonMode(int, TSCEFunctionSpec *__strong, TSCEEvaluationContext &, TSCEFunctionArgSpec *, TSCEArgumentType, int)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEEvaluationStack.mm
unsupported computed reference type found. See TSCECalcEngine::referenceWasGuaranteedCleanAtRecalcCycleStart
TSCEValue TSCEEvaluationStack::valueForArgumentAtIndexSwitch(int, TSCEFunctionSpec *__strong, TSCEEvaluationContext &, TSCEFunctionArgSpec *, TSCEArgumentType, TSCEArgumentAccessorMode, int)
Invalid accessorMode (%d)
TSCEValue TSCEEvaluationStack::valueForArgumentAtIndex(int, TSCEFunctionSpec *__strong, TSCEEvaluationContext &)
Have to set argument count before you call valueForArgumentAtIndex()
void TSCEEvaluationStack::replaceArgumentAtIndex(int, TSCEValue)
cannot replace an invalid index
TSCEValue TSCEFunction_DOLLAR::evaluateWithContext(TSCEEvaluationContext &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCETextFunctions.mm
Failed to create DOLLAR formatter.
v56@?0@"NSString"8{_NSRange=QQ}16{_NSRange=QQ}32^B48
-[TSCEOwnerUidMapper p_recreateUIDs]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEOwnerUidMapper.mm
Check for non subOwner formula UIDs
-[TSCEOwnerUidMapper setToUpgradeMapping]
void TSCEASTNodeArray::resizeCapacity(size_t)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTNodeArray.mm
No nodeArray allocated.
You are going to crash very soon. You have overwritten your node array: %{public}@
resize didn't grow array enough
v32@?0{TSKUIDStruct=QQ}8^B24
empty nodeArray
uint8_t _nodeArray[%d] = {
%d, 
void TSCEASTNodeArrayReader::setOffset(size_t)
Can't set offset above capacity: %lu / %lu
Can't set offset more than one past bytes used, offset: %lu formula: %{public}@
void TSCEASTNodeArrayReader::pushEndPoint(size_t)
We shouldn't be making the array seem larger when pushing a new end-point
void TSCEASTNodeArrayReader::skipIndexSet()
skipIndexSet going off rails, numRanges: %lu for formula: %{public}@
void TSCEASTNodeArray::writeBytes(const uint8_t *, size_t)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTNodeArray.h
_nodeArray
void TSCEASTNodeArray::write(const T &) [T = TSKUIDStruct]
void TSCEASTNodeArray::write(const T &) [T = int]
void TSCEASTNodeArray::write(const T &) [T = unsigned long]
TSCEValue TSCEFunction_MULTINOMIAL::evaluateWithContext(TSCEEvaluationContext &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEMathTrigFunctions.mm
MULTINOMIAL accepts nonnegative arguments only.
map::at:  key not found
virtual size_t TSCEASTElement::size(TSCEASTIteratorBase *) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTElements.mm
Need to override size() method for derived element types.
TSCEASTAdditionNode
TSCEASTSubtractionNode
TSCEASTMultiplicationNode
TSCEASTDivisionNode
TSCEASTPowerNode
TSCEASTConcatenationNode
TSCEASTGreaterThanNode
TSCEASTGreaterThanOrEqualToNode
TSCEASTLessThanNode
TSCEASTLessThanOrEqualToNode
TSCEASTEqualToNode
TSCEASTNotEqualToNode
TSCEASTNegationNode
TSCEASTPlusSignNode
TSCEASTPercentNode
TSCEASTFunctionNode
TSCEASTFunctionLongNode
TSCEASTNumberNode
TSCEASTBooleanNode
TSCEASTStringNode
TSCEASTDateNode
TSCEASTDurationNode
TSCEASTEmptyArgumentNode
TSCEASTTokenNode
TSCEASTArrayNode
TSCEASTListNode
TSCEASTThunkNode
TSCEASTColonNode
TSCEASTReferenceErrorNode
TSCEASTUnknownFunctionNode
TSCEASTPrependWhitespaceNode
TSCEASTAppendWhitespaceNode
TSCEASTFunctionNodeWithWhitespace
TSCEASTCellReferenceNode
TSCEASTColonWithUidsNode
TSCEASTLinkedCellRefNode
TSCEASTLinkedColumnRefNode
TSCEASTLinkedRowRefNode
TSCEASTUidReferenceNode
TSCEASTLetBindNode
TSCEASTLetVarNode
TSCEASTLetEndScopeNode
TSCEASTCategoryRefNode
TSCEASTColonTractNode
TSCEASTViewTractRefNode
static NSString *TSCEASTElement::stringForTag(TSCEASTNodeTag)
%d is not a valid node tag
Tag: %@ @offset: %lu size=%lu
TSCEASTElement *TSCEASTElementWithChildren::setChildAtIndex(TSCEASTElement *, uint32_t, TSCEASTRewriter *)
Must set children in order
TSCEASTElement *TSCEASTElementWithUidTractsWithChildren::setChildAtIndex(TSCEASTElement *, uint32_t, TSCEASTRewriter *)
void TSCEASTElementWithUidTracts::setRefFlags(TSCEASTRefFlags, TSCEASTIteratorBase *)
Don't call setRefFlags() on this type until it supports them
TSCERangeRef TSCEASTColonElement::rangeReference(TSCEASTIteratorBase *, TSUPreserveFlags &, const TSUCellCoord &)
A calculationEngine needs to be set on this rewriter to use TSCEASTColonElement::rangeReference() method.
virtual size_t TSCEASTFunctionElement::size(TSCEASTIteratorBase *) const
Unknown tag for TSCEASTFunctionElement: %d
void TSCEASTFunctionElement::setNumArgs(uint32_t, TSCEASTIteratorBase *)
Unhandled function tag: %d
static size_t TSCEASTWhitespaceElement::appendWhitespaceElement(TSCEASTNodeArray *, TSCEASTNodeTag, NSString *__strong)
Not a whitespace tag
static TSCECellTractRef *TSCEASTRelativeCoordRefElement::tractRefUsingUuids(TSCEASTIteratorBase *, const TSCEOwnerUID &, const TSKUIDStructVector &, const TSKUIDStructVector &, TSCEMutableUIDSet *__autoreleasing &, TSCEMutableUIDSet *__autoreleasing &, BOOL)
How can we be spanning in both rows and columns.
static bool TSCEASTRelativeCoordRefElement::expandTractRefUsingUuids(TSCEASTIteratorBase *, const TSCEOwnerUID &, TSCECellTractRef *__strong, const TSKUIDStructVector &, TSKUIDStructVector &, BOOL)
Don't use this method for non-existing ranges, use tractRefUsingUuids() instead.
static bool TSCEASTRelativeCoordRefElement::expandRangeCoordinateUsingUuids(TSCEASTIteratorBase *, const TSCEOwnerUID &, TSCERangeCoordinate &, const TSKUIDStructVector &, TSKUIDStructVector &, BOOL)
Don't use this method for non-existing ranges, use rangeCoordinateUsingUuids() instead.
void TSCEASTRelativeCoordRefElement::setTableUID(const TSCEOwnerUID &, TSCEASTIteratorBase *)
Cannot use setTableUID on a tag that isn't already cross-table
void TSCEASTRelativeCoordRefElement::setRelativeCoord(const TSCERelativeCellCoordinate &, TSCEASTIteratorBase *)
Can't setRelativeCoord on type: %d
Can't use setRelativeCoord to switch from spanning (%d,%d) to not spanning (%d,%d)
TSCECrossTableReference TSCEASTRelativeCoordRefElement::crossTableRef(TSCEASTIteratorBase *) const
Incorrect tag for use with crossTableRef: %d
virtual TSCECellRef TSCEASTRelativeCoordRefElement::absoluteCellRef(TSCEASTIteratorBase *, const TSUCellCoord &) const
Invalid tag: %d
void TSCEASTUidReferenceElement::setTableUID(const TSCEOwnerUID &, TSCEASTIteratorBase *)
void TSCEASTViewTractRefElement::setTableUID(const TSCEOwnerUID &, TSCEASTIteratorBase *)
void TSCEASTIteratorBase::willModify()
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTIteratorBase.h
Attempting to modify an iterator marked as readOnly.
static void TSCERelativeCellCoordinate::assertColumnInMaxRange(TSURelativeColumnIndex)
TSCERelativeCellCoordinate: column outside valid range: %d
static void TSCERelativeCellCoordinate::assertRowInMaxRange(TSURelativeRowIndex)
TSCERelativeCellCoordinate row outside valid range: %d
void TSCEASTNodeArray::write(const T &) [T = TSCEBaseUnit]
void TSCEASTNodeArray::write(const T &) [T = unsigned char]
void TSCEASTNodeArray::write(const T &) [T = TSUDurationStyle]
void TSCEASTNodeArray::write(const T &) [T = bool]
void TSCEASTNodeArray::write(const T &) [T = short]
TSCEValue TSCEFunction_DAYNAME::evaluateWithContext(TSCEEvaluationContext &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEDateTimeFunctions.mm
weekday symbols: %@
TSCEValue TSCEFunction_DUR2DAYS::evaluateWithContext(TSCEEvaluationContext &)
Shouldn't get a non-duration in DUR2DAYS
TSCEValue TSCEFunction_DUR2WEEKS::evaluateWithContext(TSCEEvaluationContext &)
Shouldn't get a non-duration in DUR2WEEKS
TSCEValue TSCEFunction_DUR2HOURS::evaluateWithContext(TSCEEvaluationContext &)
Shouldn't get a non-duration in DUR2HOURS
TSCEValue TSCEFunction_DUR2MILLISECONDS::evaluateWithContext(TSCEEvaluationContext &)
Shouldn't get a non-duration in DUR2MILLISECONDS
TSCEValue TSCEFunction_DUR2MINUTES::evaluateWithContext(TSCEEvaluationContext &)
Shouldn't get a non-duration in DUR2MINUTES
TSCEValue TSCEFunction_DUR2SECONDS::evaluateWithContext(TSCEEvaluationContext &)
Shouldn't get a non-duration in DUR2SECONDS
static NSDate *TSCEFunction_WORKDAY::dateByAddingNumberOfDaysExcludingWeekends(NSDate *__strong, int, NSDateComponents *__strong)
Incorrect weekday number in function WORKDAY
virtual TSCEASTElement *TSCEASTConvertToUidRefsRewriter::anyReferenceNode(TSCEASTRelativeCoordRefElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTConvertToUidRefsRewriter.mm
Unhandled reference type
virtual TSCEASTElement *TSCEASTConvertToUidRefsRewriter::colonNode(TSCEASTColonElement *)
virtual TSCEASTElement *TSCEASTConvertToUidRefsRewriter::colonTractNode(TSCEASTColonTractElement *)
static NSDate *TSCEFinancialFunctions::prevCoupDateWithSettlement(NSDate *__strong, NSDate *__strong, int)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFinancialFunctions.mm
Setlement date should not be larger than maturity date
static NSDate *TSCEFinancialFunctions::nextCoupDateWithSettlement(NSDate *__strong, NSDate *__strong, int)
TSCEValue TSCEFunction_ACCRINT::evaluateWithContext(TSCEEvaluationContext &)
ACCRINT: should not reach here if numCoponsLeft is not 1
TSCEASTElement *TSCEASTRewriter::loadAsTree()
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTRewriter.mm
An incomplete node needs one argument - the root of the thunk expression
Not enough arguments for let node
%d is not a valid node tag, seen at offset: %lu, seen in %{public}@
TSCEASTRewriter<%p>:
no tree (root is NULL)
virtual void TSCEASTRewriter::rewrite()
_symbolTable
TSCEValue TSCEFunction_AVERAGEA::evaluateWithContext(TSCEEvaluationContext &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEStatisticalFunctions.mm
Have to set the type of vector appropriately.
TSCEValue TSCEFunction_CRITBINOM::evaluateWithContext(TSCEEvaluationContext &)
CRITBINOM binary search has a bug.
TSCEValue TSCEFunction_FORECAST::evaluateWithContext(TSCEEvaluationContext &)
Should have at least one x if we're going to successfullly compute FORECAST
TSCEValue TSCEFunction_FREQUENCY::evaluateWithContext(TSCEEvaluationContext &)
static TSCEValue TSCEFunction_GEOMEAN::geometricMeanOfVector(TSCEGrid *, TSCEFunctionSpec *__strong, int, NSArray *__strong, TSCEEvaluationContext *)
static TSCEValue TSCEFunction_HARMEAN::harmonicMeanOfVector(TSCEGrid *, TSCEFunctionSpec *__strong, int, NSArray *__strong, TSCEEvaluationContext *)
static TSCEValue TSCEFunction_LARGE::evaluateWithContext(TSCEEvaluationContext *, TSCEFunctionSpec *__strong, BOOL, BOOL, BOOL)
Out of memory
static TSCEValue TSCEFunction_MAX::extremum(TSCEEvaluationContext *, TSCEFunctionSpec *__strong, int, BOOL, BOOL)
TSCEValue TSCEFunction_MEDIAN::evaluateVector(TSCEFunctionSpec *__strong, TSCEGrid *, TSCEEvaluationContext *)
TSCEValue TSCEFunction_MODE::evaluateVector(TSCEFunctionSpec *__strong, TSCEGrid *, TSCEEvaluationContext *, const TSCEFormat &)
In function MODE, should not reach here.
TSCEValue TSCEFunction_MODE_MULT::evaluateWithContext(TSCEEvaluationContext &)
1, 2, and 3
2 and 3
static TSCEValue TSCEFunction_PERCENTILE::computeWithVector(const TSCEGrid &, const TSUDecimal &, bool, bool, TSCEFunctionSpec *__strong, TSCEEvaluationContext *)
1, 3, and 4
1 and 3
TSCEGrid TSCEFunction_TTEST::subtractVectors(TSCEGrid &, TSCEGrid &, TSCEEvaluationContext &)
Vectors have different number of data points
Vectors have mismatched dimensions.
TSCEValue TSCEFunction_TTEST::evaluateWithContext(TSCEEvaluationContext &)
We probably have a date returned as the variance of these inputs. We should have raised an error earlier in the subtraction code.
Undefined t-test type passed to TTEST. Please file a bug.
1 and 2
-[TSCELogicalTest initWithCriterion:functionSpec:evaluationContext:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCELogicalTest.mm
type not handled: %d
<%@: %p>: operation: %d value: %@ string: %@ date: %@ -> cost: %lu
%@%i%@
TSCEValue TSCEFunction_INTERSECT_RANGES::evaluateWithContext(TSCEEvaluationContext &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCELookupReferenceFunctions.mm
Should have detected bad reference during loop
Bad reference should have been detected earlier
TSCEValue TSCEFunction_LOOKUP::evaluateWithContext(TSCEEvaluationContext &)
In function LOOKUP, Should not reach here, user result table should be 1-D.
static NSComparisonResult TSCEFunction_MATCH::compareValue(TSCEValue &, TSCEValue &, TSCEEvaluationContext &)
In function MATCH, should not reach here.
v24@?0{TSUCellCoord=ISBB}8^B16
void TSCEFunction_UNION_RANGES::determineShapeOfCellList(std::vector<TSCECellRef>, bool, bool &, bool &, bool &, NSUInteger &)
can't have invalid cell references here
0 first row width should be impossible.
TSCEValue TSCEFunction_UNION_RANGES::evaluateWithContext(TSCEEvaluationContext &)
indices inside a range reference should be references.
each index inside a range reference should be just one cell.
contiguous should imply rectangular
rectangular references should have rowWidth rows
Tag: %@ @offset: %lu size=%lu { %@}
(%@ %@ %@)
(%@)
(%@%@)
%@,%@
%@(%@)
NSString *TSCEASTDescriptionIterator::prettyDescription()
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTDescriptionIterator.mm
Should only have one argument on _argStack at this point, the final result. ArgStack: %@
virtual TSCEASTElement *TSCEASTDescriptionIterator::binaryInfixOperatorNode(TSCEASTBinaryElement *)
op- 
op+ 
virtual TSCEASTElement *TSCEASTDescriptionIterator::unaryOperatorNode(TSCEASTUnaryElement *, BOOL)
((%@)%%)
%@{%i args, ws:'%@'} 
%@{%i args} 
unknownFunction: %@{%i args} 
[: %@]
%@:%@
Unexpected refType: %@
v24@?0r^{TSCEAnyRef=S{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}C}{TSKUIDStruct=QQ}B@}8^B16
%@::%@:%@
[%@]
<error in colonTractNode() - got nil>
virtual TSCEASTElement *TSCEASTDescriptionIterator::colonTractNode(TSCEASTColonTractElement *)
Why would this happen?
%@{%@}
<#REF! VTR>
ViewTractRef(%@ Preserve:%u) 
"%@" 
unit;%lf
unit; %lf
<empty>
<empty> 
<token>
token 
array; cols:%d rows:%d 
%@; %@
{%@ %@}
<list, len:%d>
list; length:%d 
thunk[
let %@ = %@ in
<%@>
(var %u)
virtual TSCEASTElement *TSCEASTDescriptionIterator::anyReferenceNode(TSCEASTRelativeCoordRefElement *)
We shouldn't actually reach here - the tag indicates this reference is valid or spanning
%@%@%@%@
[%@%@]
[%@%@, %@%@]
%@ %@
append ws: '%@'
prepend ws: '%@'
#REF! 
#REF(%@%@, %@:: %@)! 
#REF(%@%@, %@)! 
linkedCellRef(%@) 
linkedColumnRef(%@) 
linkedRowRef(%@) 
UidRef(%@ Preserve:%u) 
%@::%@ 
v24@?0r^{TSUCellRect={TSUCellCoord=ISBB}{?=II}}8^B16
<%@>:
  %@ = %@
  %@ = null
-[TSCEFormulasForUndo splitIntoChunksForExcessiveSize]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormulasForUndo.mm
Can't split FormulasForOwner that uses formulaStrings (TSTCommandRewriteFormulasForTranspose)
v24@?0@"TSCEFormulaObject"8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16
  ownerKind %d = %@
__CHART
op_Colon
LATITUDE
LONGITUDE
BEARING
ALTITUDE
CONFIDENCE.T
COVARIANCE.S
MODE.MULT
PERCENTILE.EXC
PERCENTRANK.EXC
QUARTILE.EXC
RANK.AVG
FIND.CASEINSENSITIVE
__INTERACTIONTYPE
__CELLVALUETYPE
+[TSCEFunctionSpec(TSCEAutogeneratedSpecList) functionSpecList]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFunctionSpecDictionary.mm
Couldn't create functionSpecList of %@
^%@$
v32@?0@"NSTextCheckingResult"8Q16^B24
void TSCEEvaluateViewTractRefWithContext(TSCEViewTractRef *__strong, TSCEEvaluationContext &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTNodeArrayUtilities.mm
TSCEValue TSCEEvaluateASTNodeArrayWithContext(const TSCEASTNodeArray *, TSCEEvaluationContext &)
Not expecting to see UID references during evaluation.
%d is not a valid node tag, seen in: %{public}@
TSCEEvaluateASTNodeArrayWithContext ended up with an empty evaluation stack for %@
void TSCEASTNodeArrayEncodeToArchiveProcessFirstNode(TSCE::ASTNodeArrayArchive *, TSPArchiver *__strong, TSCEASTElement *, TSCEASTElementIterator *, std::vector<TSCENodeArrayEncodingState> &, TSCEASTNodeArrayArchiveOptionsEnum)
verifySpanningSettings failed while archiving, with options: %d
TSCEASTFeatureNodesSeen TSCEASTNodeArrayEncodeToArchiveWithOptions(TSCE::ASTNodeArrayArchive *, TSCEASTNodeArray *, TSPArchiver *__strong, TSCEASTNodeArrayArchiveOptionsEnum)
TSCEASTNodeArray *TSCEFormulaUnarchivingContext::createNodeArrayFromArchive(const TSCE::ASTNodeArrayArchive &)
unarchived invalid spanning settings
can't end an embedded node array with no previous begin
can't unarchive a let node with insufficient embedded node arrays
-[TSCEGetPivotDataBundle enumerateDataKeyValuePairsUsingBlock:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEGetPivotDataBundle.mm
Size mismatch in data/value pairs
TSCEValue TSCEFunction___CHART::evaluateWithContext(TSCEEvaluationContext &)_block_invoke_2
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEChartFunctions.mm
apparentTractRefForTractRef let us exceeed tableSize?? (%d,%d)
virtual TSCEASTElement *TSCEASTRowColumnUidMapRewriter::anyReferenceNode(TSCEASTRelativeCoordRefElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTRowColumnUidMapRewriter.mm
Expected to be called on uid-form formulas only.
TSCESymbol TSCESymbolTable::addSymbol(__strong TSCEIdentifier)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCESymbolTable.mm
can't add a symbol if not in any scope
<TSCESymbolTable %p>: 
%@: %u
void TSCESymbolTable::endScope()
Calling endScope() without beginScope()
%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X%02X
TSCEOwnerUID TSCESubFormulaOwnerID::formulaOwnerUIDForBaseUIDAndSubownerIndex(const TSCEOwnerUID &, TSCESubFormulaOwnerIndex)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCETypes.mm
OwnerIndex %d doesn't correspond to a subFormulaOwner
TSUCellCoord TSCEMakeAbsoluteCellCoordinateFromRelativeCellCoordinate(TSUCellCoord, TSCERelativeCellCoordinate, const TSUPreserveFlags &)
Wrong sticky setting
tableUID: %@
%@ %@ couldBeIntersection: %@
(include headers)
%@::(%@%d,_)
%@::(_,%@%d)
%@::(%@%d,%@%d)
aggType=%d
showAsType=%d
-[TSCERelativeTractRef addRelativeColumn:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERelativeTractRef.mm
Cannot mix spanning and non-spanning column
-[TSCERelativeTractRef addRelativeRow:]
Cannot mix spanning and non-spanning row
-[TSCERelativeTractRef verifySpanningSettings]
Wrong count
Wrong index present
Invalid seen in non-spanning
No column found, but not marked as spanning
No row found, but not marked as spanning
Should match existing asserts
-[TSCERelativeTractRef relativeTopLeft]
-[TSCERelativeTractRef relativeBottomRight]
Non-spanning ref has %d relative columns
No columns found, but not marked as spanning
Non-spanning ref has %d absolute columns
Non-spanning ref has %d relative rows
No rows found, but not marked as spanning
Non-spanning ref has %d absolute rows
, %@
%@<%p>: %@
const TSCEValue TSCEValueBindingEnvironment::lookup(const TSCESymbol &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEValueBindingEnvironment.mm
unbound symbol found: %u
void TSCEValueBindingEnvironment::endScope()
_undoSymbols is empty at endScope() - beginScope() never called?
%u -> %@
-[TSCEFormulaOwnerWrapper initWithFormulaOwnerUID:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormulaTranslationFlags.mm
Requires a valid ownerUID
NSString *localizedModeName(TSCEStockAttribute, TSCEFunctionSpec *__strong)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERemoteDataFunctions.mm
Unexpected function %@!
%@%@=X
TSCEValue evaluateCurrencyFunction(TSCEEvaluationContext &, TSCEFunctionSpec *__strong)
Failed to transform date %@ for CURRENCYH function!
TSCEValue evaluateStockFunction(TSCEEvaluationContext &, TSCEFunctionSpec *__strong)
Failed to transform date %@ for STOCKH function!
TSCECellTractRefCore::TSCECellTractRefCore(const TSUCellCoord &, const TSUCellCoord &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECellTractRefCore.mm
Both coords must be spanning in the same direction %{public}@ vs %{public}@
TSCECellTractRefCore::TSCECellTractRefCore(const TSUCellCoord &, const TSUCellCoord &, const TSKUIDStruct &)
uint32_t TSCECellTractRefCore::numColumns() const
Don't ask for numColumns when we spansAllColumns
uint32_t TSCECellTractRefCore::numRows() const
Don't ask for numRows when we spanAllRows
void TSCECellTractRefCore::addColumn(TSUColumnIndex)
void TSCECellTractRefCore::addRow(TSURowIndex)
void TSCECellTractRefCore::addColumnRange(const TSUIndexRange &)
addColumnRange: should only be used with absolute indexes: %@
void TSCECellTractRefCore::addRowRange(const TSUIndexRange &)
addRowRange: should only be used with absolute indexes: %@
TSUCellCoord TSCECellTractRefCore::coordAtColumnOffset(TSUColumnOrRowIndex, TSUColumnOrRowIndex) const
Not really expecting spanning CellTractRef to be used here
v24@?0^{TSCEASTNodeArray=*QQB}8^{TSCEASTNodeArgInfo=i[3i]{TSKUIDStruct=QQ}{TSUCellCoord=ISBB}}16
v16@?0^{TSCEASTNodeArray=*QQB}8
TSCEFormulaCreator::TSCEFormulaCreator(std::nullptr_t)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormulaCreator.mm
Passing NULL as an arg to TSCEFormulaCreator() - it doesn't like that
TSCEErrorValue::TSCEErrorValue(TSCEError *__strong)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEErrorValue.mm
1)Creating a TSCEErrorValue with a nil TSCEError
TSCEErrorValue::TSCEErrorValue(const TSCEErrorValue &)
2)Creating a TSCEErrorValue with a nil TSCEError
virtual TSCEReferenceValue TSCEErrorValue::reference(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
TSCEASTElement *TSCEASTTransposeRewriter::shouldTransformSpanningColumnToBodyRangeReference(TSCEASTElement *, const TSCEOwnerUID &, TSUColumnIndex, BOOL, TSUCellCoord)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTTransposeRewriter.mm
Table's bodyRange wasn't valid
TSCECellTractRef *TSCEASTTransposeRewriter::transformSpanningColumnToBodyRangeReference(TSCEASTElement *, TSCECellTractRef *__strong, TSUCellCoord)
absTractRef
Couldn't locate a table with uid: %@ in calcEngine %p
Table %@ bodyRange wasn't valid
TSCEASTElement *TSCEASTElementIterator::nextElement()
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTElementIterator.mm
virtual void TSCEASTElementIterator::rewrite()
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTElementIterator.h
No rewrite method implemented for this class - use nextElement() API, or derive from a different AST iterator base class
static TSCENumberFormat TSCENumberFormat::defaultNumberFormatForCurrency(TSULocale *__strong)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormat.mm
TSCEBaseFormat::TSCEBaseFormat(TSKBaseFormat *__strong)
TSCEBaseFormat has no defaults for nil TSKBaseFormat
TSCEFormat::TSCEFormat(const TSUFormatType)
This TSCEFormat constructor not supported for this type: %d
static TSCEFormat TSCEFormat::createDefaultCurrencyUsingLocale(TSULocale *__strong)
For currency, use the constructor that passes in a locale, and use the document locale.
void TSCEFormat::setFormatType(TSUFormatType)
setFormatType() not allowed in general, type change attempted: %d -> %d
TSCEFormat::TSCEFormat(const TSUFormatType, const TSCENumberFormat &)
Creating a non-number formatType but initializing the numberFormat iVar.
bool TSCEFormat::isEqualNotCountingExplicitness(const TSCEFormat &) const
Trying to compare unexpected type %d.
TSCENumberFormat TSCEFormat::numberFormat() const
Format is not of this type.  Can't return this.
TSCEFractionFormat TSCEFormat::fractionFormat() const
TSCEBaseFormat TSCEFormat::baseFormat() const
TSCEDurationFormat TSCEFormat::durationFormat() const
TSKDateTimeFormat *TSCEFormat::dateTimeFormat() const
TSKCustomFormatWrapper *TSCEFormat::customFormat() const
TSKBooleanFormat *TSCEFormat::booleanFormat() const
TSCECellRefSet TSCEInternalCellRefSet::asCellRefSet(TSCEDependencyTracker *) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEInternalCellRefSet.mm
Need a dependency tracker to do this conversion
v32@?0r^S8r^v16^B24
TSCEValue TSCEFunctionArgSpec::valueForModeIndex(short) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFunctionArgSpec.mm
Requesting value for non-mode argument.
Requesting value for out of bounds index.
%C%@_ARGUMENT_%d%C
%C%@_ARGUMENT_%d_MODE_%d%C
or omitted
%@ (%@)
virtual NSDate *TSCECategoryRefValue::date(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECategoryRefValue.mm
Error: couldn't resolve TSCECategoryRefValue
virtual NSString *TSCECategoryRefValue::rawString(TSCEFunctionSpec *__strong, int, TSULocale *__strong) const
unsupported
virtual BOOL TSCECategoryRefValue::boolean(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
virtual TSCERichTextStorage TSCECategoryRefValue::richTextStorage(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
virtual TSCERichTextStorage TSCECategoryRefValue::rawRichTextStorage(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
virtual TSCEGrid TSCECategoryRefValue::formattedGrid(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
virtual TSCENumberValue TSCECategoryRefValue::number() const
virtual NSDate *TSCECategoryRefValue::date() const
v24@?0q8^B16
virtual TSCEASTElement *TSCEASTNodeFormulaStringIterator::binaryInfixOperatorNode(TSCEASTBinaryElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTNodeFormulaStringIterator.mm
virtual TSCEASTElement *TSCEASTNodeFormulaStringIterator::unaryOperatorNode(TSCEASTUnaryElement *, BOOL)
virtual TSCEASTElement *TSCEASTNodeFormulaStringIterator::colonNode(TSCEASTColonElement *)
improper number of arguments for colon node.
%@%@%@%@%@%@
%@%@%@%@%@
%.17G
DATE(%li,%li,%li)
(DATE(%li,%li,%li)+TIMEVALUE(TIME(%li,%li,%li)))
DURATION(%@,%@,%@,%@,%@,%@)
%C%C
virtual TSCEASTElement *TSCEASTNodeFormulaStringIterator::uidReferenceNode(TSCEASTUidReferenceElement *)
Shouldn't see uid-form references when making Sage formula strings.
virtual TSCEASTElement *TSCEASTNodeFormulaStringIterator::viewTractRefNode(TSCEASTViewTractRefElement *)
Shouldn't see view cellRef references when making Sage formula strings.
NSString *TSCEASTNodeFormulaStringIterator::formulaString()
Unable to properly create a formula string. Possibly a bad ASTNodeArray?
virtual TSCEASTElement *TSCEASTNodeFormulaStringIterator::letBindNode(TSCEASTLetBindElement *)
Let nodes should have been removed prior to Sage export
virtual TSCEASTElement *TSCEASTNodeFormulaStringIterator::letVariableNode(TSCEASTLetVariableElement *)
Variable nodes should have been removed prior to Sage export
void TSCEASTNodeFormulaStringIterator::processOperatorNode(NSString *__strong)
improper number of arguments for operator node.
void TSCEASTNodeFormulaStringIterator::processPostfixOperatorNode(NSString *__strong)
improper number of arguments for postfix operator node.
void TSCEASTNodeFormulaStringIterator::processPrefixOperatorNode(NSString *__strong)
improper number of arguments for prefix operator node.
void TSCEASTNodeFormulaStringIterator::processFunctionNode(uint32_t, TSCEFunctionSpec *__strong, NSString *__strong, NSString *__strong)
Have to either specify a function spec or an unknown function name.
virtual NSString *TSCEThunkValue::string(TSCEFunctionSpec *__strong, int, TSULocale *__strong) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEThunkValue.mm
ThunkValue doesn't have a meaningful string() to provide
+[TSCECategoryRef relativeAncestorGroupUid:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECategoryRef.mm
levelsUp of %d is too large.
v16@?0@8
-[TSCEEvalRef scalarValueForEvalContext:permitAccessInsideMergeRegions:fetchRichTextAttributesIfPlainText:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEEvalRef.mm
-[TSCENamedReferenceManager initWithContext:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCENamedReferenceManager.mm
use initWithContext:calculationEngine: instead
v16@?0@"TSCETrackedReferenceStore"8
-[TSCENamedReferenceManager setFormulaOwnerUID:]
Invalid formulaOwnerUID
%@'%@'
virtual TSCEASTElement *TSCEASTEvaluationRewriter::binaryInfixOperatorNode(TSCEASTBinaryElement *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTEvaluationRewriter.mm
virtual TSCEASTElement *TSCEASTEvaluationRewriter::unaryOperatorNode(TSCEASTUnaryElement *, BOOL)
virtual TSCEASTElement *TSCEASTEvaluationRewriter::uidReferenceNode(TSCEASTUidReferenceElement *)
uidReferenceNode() seen while evaluating
-[TSCEAnyReference referenceTextWithCalculationEngine:hostTableUID:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEAnyReference.mm
referenceTextWithCalculationEngine currently only supports cell and range references
-[TSCEAnyReference referenceTextWithCalculationEngine:contextSheetName:]
virtual void TSCEASTStreamIterator::rewrite()
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTStreamIterator.mm
Unexpected incomplete embedded node type found
TSWPStorage *TSCERichTextStorage::wpStorage() const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERichTextStorage.mm
can't access TSWPStorage of non-rich rich text storage
TSCERichTextStorage TSCERichTextStorage::substringWithRange(const NSRange &) const
Couldn't convert string obtained from storage to UTF-8 - broke a composed character, perhaps?
@"NSString"16@?0@"NSString"8
bdtrc
bdtr
bdtri
TSCEFunctor(%u args)=%@
TSCECellValue *TSCEFunctor::evaluateWithArgs(NSArray *__strong, TSCECalculationEngine *__strong)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFunctor.mm
Wrong number of arguments for functor: %@, args: %@
chdtrc
chdtr
chdtri
kTSCERecalcLoopGroupEmpty
CalculationEngine
TSCECalculationEngine
TSCENamedReferenceManager
TSCETrackedReferenceStore
TSCETrackedReferenceTSPObjectDeprecated
TSCERemoteDataStore
TSCEFormulaOwnerDependencies
TSCECellRecordTileWrapper
TSCERangePrecedentsTile
TSCEReferencesToDirty
NSInteger StockAttributeFromString(NSString *__strong, NSUInteger, NSString *__strong, NSInteger, TSULocale *__strong)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERemoteDataModeUtility.m
documentLocale
-[TSCERemoteDataSourceFetcher init]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERemoteDataSourceFetcher.mm
Do not call method
%s: %s
Remote Data Fetcher: %@
v20@?0q8I16
TSCERemoteDataCat
-[TSCERemoteDataSourceFetcher dataKind]
Abstract method not overridden by %{public}@
Abstract method not overridden by %@: %s
-[TSCERemoteDataSourceFetcher identifier]
-[TSCERemoteDataSourceFetcher canFetchKey:]
v24@?0@"TSCERemoteDataSpecifier"8^B16
-[TSCERemoteDataSourceFetcher sendRequestForKeys:]
-[TSCERemoteDataSourceFetcher fetchQuotesWithTickers:completion:]
-[TSCERemoteDataSourceFetcher autoCompleteQuotesWithInput:completion:]
TSCERemoteDataServerStatusChangeNotification
TSCERemoteDataServerStatusChangesKey
TSCERemoteDataServerStatusChangeToOnlineKey
TSCERemoteDataServerStatusChangeToOfflineKey
ask_price.raw
ask_size.raw
avg_3m_volume.raw
beta_coefficient.raw
bid_price.raw
bid_size.raw
change.raw
currency
day_high.raw
day_low.raw
dividend_per_share.raw
dividend_yield.raw
eps.raw
exchange
fiftytwo_week_high.raw
fiftytwo_week_low.raw
market_cap.raw
name
one_year_target.raw
open.raw
pe_ratio.raw
percent_change.raw
prev_close.raw
price.raw
volume.raw
symbol
time.raw
Not Set
Avg 3M Volume
Beta
Change
Currency
High
Annual Dividend
Dividend Yield
Exchange
52 Week High
52 Week Low
Market Cap
Name
One Year Target
Open
P/E Ratio
Percent Change
Close
Price
Volume
Symbol
Time
Found duplicate for internal ownerID %@, %d and %d
void TSCEIDMap::loadFromArchive(const TSCE::OwnerIDMapArchive &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEIDMap.mm
Got an invalid ownerUID during loadFromArchive, internalOwnerID: %lu
Repaired duplicate internal formula ownerIDs:
%d -> %d (%@)
TSCEInternalFormulaOwnerID TSCEIDMap::registerUID(TSCEOwnerUID)
new ID %lu is already in use by %@ - attempted reuse by %@
About to overwrite a reference in _uidToInternalIDMap: %d -> %d for ownerUID: %{public}@ in Map: %{public}@
TSCEIDMap:
  %d -> %@
  %d -> <UNREGISTERED>
com.apple.Numbers.TSCE.DirtyingDependencies
TSCEDependencyTracker::~TSCEDependencyTracker()
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEDependencyTracker.mm
dirty cell batching must not be left on when a command finishes!
TSCEOwnerRegistrationCat
TSUError TSCEDependencyTracker::registerOwner(TSCEInternalFormulaOwnerID, __strong id<TSCEFormulaOwning>, TSCESubFormulaOwnerIndex)
registerOwner() doesn't accept class: %@ (not id<TSCEFormulaOwning>)
v16@?0^{TSCECellRecord=^{TSCECellRecordEdgeLists}Q{TSCEPackedEdge=[8c]}ISS}8
void TSCEDependencyTracker::ddq_replaceCellWithFormula(TSCEInternalFormulaOwnerID, TSUCellCoord, TSCEReferenceSetWrapper *__strong, TSCEReplaceFormulaOptions)
Attempting to call ddq_replaceCellWithFormula with an invalid coord: %@
void TSCEDependencyTracker::ddq_replaceCellWithFormula(TSCEInternalFormulaOwnerID, TSUCellCoord, TSCEReferenceSetWrapper *__strong, TSCEReplaceFormulaOptions)_block_invoke
nonspanning range %{public}@ found in a spanning reference
v24@?0@"TSCECategoryRef"8^B16
unimplemented reference type found: %d
failure adding a formula
void TSCEDependencyTracker::replaceCellWithFormula(const TSCEOwnerUID &, TSUCellCoord, TSCEReferenceSetWrapper *__strong, TSCEReplaceFormulaOptions)
Not expecting insane, or spanning coordinates here: (%lu,%lu)
void TSCEDependencyTracker::ddq_replaceRemoteDataKeysInterestedInForCell(const TSCECellRef &, TSCERemoteDataSpecifierSet *__strong)
Attempted to replace remote data key interest in a cell whose owner isn't registered.
void TSCEDependencyTracker::ddq_formulaCellsForInsertedOwner(TSCEFormulaRewriteSpec *__strong, TSCECellRefSet &) const
wrong rewrite type received
void TSCEDependencyTracker::ddq_formulaCellsForTableTranspose(TSCEFormulaRewriteSpec *__strong, TSCECellRefSet &) const
wrong rewrite type found
void TSCEDependencyTracker::ddq_formulaCellsForMergeCells(TSCEFormulaRewriteSpec *__strong, TSCECellRefSet &) const
void TSCEDependencyTracker::ddq_formulaCellsForMergeOriginMove(TSCEFormulaRewriteSpec *__strong, TSCECellRefSet &) const
void TSCEDependencyTracker::ddq_formulaCellsForTableUIDReassignment(TSCEFormulaRewriteSpec *__strong, TSCECellRefSet &) const
void TSCEDependencyTracker::ddq_formulaCellsForGroupNodeChanges(TSCEFormulaRewriteSpec *__strong, TSCECellRefSet &) const
void TSCEDependencyTracker::ddq_formulaCellsForPivotRuleChange(TSCEFormulaRewriteSpec *__strong, TSCECellRefSet &) const
void TSCEDependencyTracker::ddq_formulaCellsForGroupNodeUIDReassignment(TSCEFormulaRewriteSpec *__strong, TSCECellRefSet &) const
TSCECellRefSet TSCEDependencyTracker::formulaCellsAffectedByRewrite(TSCEFormulaRewriteSpec *__strong, BOOL) const_block_invoke
Not implemented yet for this type
v32@?0r^{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}8Q16^B24
void TSCEDependencyTracker::endSuppressingWillModifyCalls()_block_invoke
not suppressing willModify calls, so cannot end suppressing them
BOOL TSCEDependencyTracker::endBatchingGroupCellDirtying()_block_invoke
cannot end group cell dirtying batching if it is not already on.
void TSCEDependencyTracker::encodeToArchive(TSCE::DependencyTrackerArchive &, BOOL, BOOL, TSPArchiver *__strong)
failed to get an object to archive for a formula owner that needs registration. Registration failure at unarchive time is likely.
TSCEDependencyTracker::TSCEDependencyTracker(const TSCE::DependencyTrackerArchive &, TSPUnarchiver *__strong, TSCECalculationEngine *__strong)_block_invoke
Unarchiving formulaOwnerDependencies: Want to replace owner %@ (%lu) with %@ (%lu) - highly unexpected
v16@?0@"NSMutableArray"8
v16@?0@"TSPObject<TSCECalculationEngineRegistration>"8
void TSCEDependencyTracker::upgradeToSubOwnerUIDForOwners(TSCEOwnerUidMapper *__strong)
Not expecting tableUID to be changing
dur_
num_
-[TSCENumberCellValue compareToCellValue:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCENumberCellValue.mm
Unexpected value type found
-[TSCENumberCellValue encodeToArchive:]
Expected a currency code for unit %d, locale:%@
[%@] = 
<%@>
  %@ used at: %@
-[TSCEStock init]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEStock.mm
-[TSCEStock initFromArchive:]
-[TSCEStock encodeToArchive:]
_symbol
NULL
-[TSCEStock valueForAttribute:]
Can't fetch an unknown attribute!
-[TSCEStock valueForAttribute:forLocale:]
en_US
MMMdyyyyhhmmzzz
%1.2F
%1.0F
Number suffix - trillions
Number suffix - billions
Number suffix - millions
Number suffix - thousands
-[TSCEStock p_populateAttributesFromArray:]
self.symbol
en_US_POSIX
yyyy'-'MM'-'dd'T'HH':'mm':'ss'Z'
fdtrc
fdtr
fdtri
gamma
lgam
v32@?0@"TSCETrackedReference"8Q16^B24
TSTExpandedTables
v16@?0@"TSCETrackedReference"8
BOOL TSCEBitGridTile::clearBit(TSUColumnOrRowIndex, TSURowIndex)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEBitGrid.mm
clearBit, out of range [%d,%d]->[%d,%d]: request was [%d,%d]
void TSCEBitGridTile::andTile(const TSCEBitGridTile &)
andTile: expecting passed in tile to cover the same range as ourself to be meaningful.
void TSCEBitGridTile::orTile(const TSCEBitGridTile &)
orTile: expecting passed in tile to cover the same range as ourself to be meaningful.
void TSCEBitGridTile::diffTile(const TSCEBitGridTile &)
diffTile: expecting passed in tile to cover the same range as ourself to be meaningful.
TSUColumnOrRowIndex TSCEBitGridTile::countInRange(TSUColumnOrRowIndex, TSURowIndex, TSUColumnOrRowIndex, TSURowIndex, const TSCEBitGridTile *) const
countInRange: first row/column must be <= last row/column
countInRange: exclude tile does not correspond to this tile.
countInRange: how did we end up masking off *all* bits?
TSCEBitGridTile for [%d,%d]:
%0.8X 
(%lu,%lu)
<empty grid>
uint8_t findLowestBitNum(uint32_t)
Can't find a bit set in zero.
Can't find a lowestBitOnly in zero.
dat_
-[TSCEDateCellValue compareToCellValue:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEDateCellValue.mm
v24@?0r^{TSCEColumnReference=ISC}8^B16
v24@?0r^{TSCEColumnRangeReference=IISC}8^B16
void TSCESpanningDependencies::readFromArchive(const TSCE::SpanningDependenciesArchive &)_block_invoke
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCESpanningDependencies.mm
_dependencyTracker
NULL spanning dependencies for table: %{public}@
v28@?0{TSCEColumnRangeContextPair=IC}8{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}16
void TSCESpanningDependencies::unpackAfterUnarchive()_block_invoke
v32@?0r^{TSCEColumnRangeReference=IISC}8r^{TSUCellCoord=ISBB}16^B24
v32@?0r^{TSCEColumnReference=ISC}8r^{TSUCellCoord=ISBB}16^B24
void TSCESpanningDependencies::dirtyAllFormulasReferencingRange(TSCERangeCoordinate)
invalid input range
dirty precedents count consistency error - cell: %@ in table: %@
v20@?0{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}8
Spanning %@ dependencies:
column
Spanning %@ precedents of %@:
TSCEFormulaRangeContext formulaRangeContextForArchivedContext(const TSCE::SpanningDependenciesExpandedArchive::RangeContext &)
unknown range dependency context found in archive! Archive is corrupt.
gdtr
gdtrc
v32@?0@"TSCERemoteDataSpecifier"8@"TSCECellValue"16^B24
v32@?0Q8@"NSMutableDictionary"16^B24
-[TSCERemoteDataValueMap updateWithValuesFromMap:overwriteValues:]_block_invoke
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERemoteDataValueMap.mm
-[TSCERemoteDataValueMap initFromArchive:]
Failed to unarchive value for %@!
Remote Data Coordinator
-[TSCERemoteDataCoordinator registerStore:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERemoteDataCoordinator.mm
%@ is already registered!
-[TSCERemoteDataCoordinator unregisterStore:]
%@ is not registered
-[TSCERemoteDataCoordinator p_fetcherForDataKind:]
No configured fetcher for this data kind!
v16@?0@"NSArray"8
-[TSCERemoteDataCoordinator addRemoteDataInterest:forStore:]_block_invoke
Unclaimed specifiers after register!
^IXIC
^NYA
^FTSE
^FTAS
^FTAI
^FCHI
^GDAXI
^AXJO
^AORD
^ATX
^BFX
^BVSP
^GSPTSE
000001.SS
399001.SZ
OMXC20.CO
^OMXH25
^HSI
^NSEI
^BSESN
^JKSE
^ISEQ
^IETP
T25.TA
^TA100
FTSEMIB.MI
^N225
^KLSE
^MXX
^AEX
^NZ50
^OSEAX
RTS.RS
^STI
^KS11
^IBEX
^OMX
^SSMI
^TWII
^DJI
AAPL
SBUX
-[TSCERemoteDataCoordinator p_dataSourceFetcherForRemoteData:]
No matching remote data source fetcher for %@
-[TSCERemoteDataCoordinator p_removeRemoteDataInterest:forStore:]
Unclaimed specifiers after unregister!
-[TSCERemoteDataCoordinator isOnlineForDataKind:]
No status for this data kind!
v32@?0@"NSString"8@"TSCEStock"16^B24
-[TSCERemoteDataCoordinator sourceFetcherDidUpdate:withValues:quotes:]_block_invoke_2
Unexpected changes!
-[TSCEFormulaOwnerDependencies unpackAfterUnarchive]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormulaOwnerDependencies.mm
_cellDependencies->dependencyTracker()
-[TSCEFormulaOwnerDependencies saveToArchiver:]
-[TSCEFormulaOwnerDependencies resetOwnerUIDForUpgrade:forBaseOwner:ownerKind:]
OwnerIndex must be set to use this method
Tables cannot use this method
Charts cannot use this method
-[TSCEFormulaObject evaluateWithContext:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormulaObject.mm
Uncaught exception: %{public}@
-[TSCEFormulaObject copyByRewritingForTranspose:calcEngine:containingCell:outTransposeWarning:]
Expect rewriteSpec -willModifyTable: (or variant) to have been called before rewriting formulas.
Expect rewriteSpec -didModifyTable: (or variant) to have been called before rewriting formulas.
-[TSCEFormulaObject copyByRewritingWithSpec:calcEngine:containingCell:]
Warning, no rewriter created for this formula rewrite type (yet).
-[TSCEFormulaObject copyBySettingHostTableUID:hostColumnUID:hostRowUID:]
Can only set hostCellUID on uid-form formula
-[TSCEFormulaObject copyByRewritingReferencesToUidForm:]
preserveHostCell requested, but resolverTableUID %@ not found
-[TSCEFormulaObject copyByRewritingReferencesToGeometricForm:]
Over-riding hostTableUID for %@
conditional style
table
=__CHART(
+[TSCEFormulaObject parseFormula:calcEngine:unqualifiedReferenceTableUID:containingCell:outError:outNeedsImportRewrite:isChartFormula:isSageUpgrade:]
Only chart formulas should start with the chart prefix.
formula string does not start with =
TSCEThreadAllocatorKey
igami
incbet
virtual NSDate *TSCEViewTractRefValue::date(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEViewTractRefValue.mm
Error: couldn't resolve TSCEViewTractRefValue
virtual NSString *TSCEViewTractRefValue::rawString(TSCEFunctionSpec *__strong, int, TSULocale *__strong) const
virtual BOOL TSCEViewTractRefValue::boolean(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
virtual TSCERichTextStorage TSCEViewTractRefValue::richTextStorage(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
virtual TSCERichTextStorage TSCEViewTractRefValue::rawRichTextStorage(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
virtual TSCEGrid TSCEViewTractRefValue::formattedGrid(TSCEFunctionSpec *__strong, int, TSCEEvaluationContext *) const
virtual TSCENumberValue TSCEViewTractRefValue::number() const
virtual NSDate *TSCEViewTractRefValue::date() const
-[TSCECellTractRef initWithUidTract:calcEngine:tableUID:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECellTractRef.mm
+[TSCECellTractRef cellTractRefWithUidTractList:onTable:preserveFlags:rewriteContext:]
-[TSCECellTractRef uidTractWithCalcEngine:hostTableUID:]
 | %@
incbi
void TSCERecalcPhaseState::addNewLeaf(const TSCEInternalCellReference &, TSCEDependencyTracker *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECalcEngine.mm
Invalid ownerId for solving, leaf: %@ for formulaOwner %@ %@
(UNREGISTERED)
com.apple.Numbers.TSCE.RecalcLowPriority
com.apple.Numbers.TSCE.RecalcHighPriority
void TSCECalcEngine::initializeDispatchObjects()
_recalcLowPriorityQueue
_recalcHighPriorityQueue
_recalcDispatchGroup
_recalcLoopGroup
TSCEDebugEnableLocalVariables
com.apple.iWork.CalculationEngine
Performance
com.apple.Numbers.TSCE.writeExclusionQueue
TSTTableResolverFactory
Functions used:
void TSCECalcEngine::assertNonCalcEngineException(NSString *__strong, NSException *__strong, TSCEFormulaObject *__strong) const
Non-calcEngine NSException passed up to %{public}@: %{public}@ with formula: %{public}@
Non-calcEngine type exception passed up to %{public}@ for formula %{public}@.
Non-calcEngine NSException passed up to %{public}@: %{public}@
Non-calcEngine type exception passed up to %{public}@.
void TSCECalcEngine::dispatchOnePhase(TSCERecalcPhaseState *)
phase
dispatchOnePhase
void TSCECalcEngine::dispatchOnePhase(TSCERecalcPhaseState *)_block_invoke
Unexpected calc-engine exception passed up to enqueueTaskForCell: %{public}@
recalcPhaseHoldingReadLock
void TSCECalcEngine::recalcPhaseHoldingReadLock(TSCERecalcPhaseState *)
Unexpected calc-engine exception passed up to recalcPhaseHoldingReadLock: %{public}@ formulaOwner is: %{public}@
void TSCECalcEngine::startRecalculationTask()
cannot start recalculation thread because it is in the wrong state
v12@?0B8
void TSCECalcEngine::startRecalculationTask()_block_invoke_2
no access controller!
startRecalculationTask
Unexpected calc-engine exception passed up to startRecalculationTask loop: %{public}@
TSUError TSCECalcEngine::registerOwnerWithOwnerUID(const TSCEOwnerUID &, __strong id<TSCEFormulaOwning>, __strong id<TSCEReferenceResolving>, const TSCEOwnerUID &, TSCESubFormulaOwnerIndex)
Resolver doesn't conform to the TSCEReferenceResolving protocol.
%@ doesn't implement: -multiEvaluateFormulasAt:withCalcEngine:recalcOptions:
TSCETransaction *TSCECalcEngine::openTransaction()
There is already an open transaction on this calc-engine: %@
expected nil value for '%{public}s'
_currentTransaction
void TSCECalcEngine::closeTransaction(TSCETransaction *__strong)
Invalid transaction object passed in: %@
void TSCECalcEngine::replaceFormula(__strong id<TSCEFormulaReturning>, const TSUCellCoord &, const TSCEOwnerUID &, TSCEReplaceFormulaOptions)
Can only place formulas at valid, non-spanning cell coords, not: %@
void TSCECalcEngine::setRewritingMinion(TSCERewritingMinion *__strong)
Warning: Overwriting a pre-existing rewritingMinion with a new one
NSArray *TSCECalcEngine::rewriteSpecStack()
Need to add locking to run this on multiple threads
void TSCECalcEngine::popRewriteSpec(TSCEFormulaRewriteSpec *__strong)
Popping wrong rewriteSpec off rewriteSpecStack
Have no rewriteSpecs to pop
void TSCECalcEngine::blockUntilRecalcIsCompleteWithTimeout(NSTimeInterval)
Can't block on the calc-engine before it is started up.
void TSCECalcEngine::blockUntilRecalcTaskExitedWithTimeout(NSTimeInterval)
Can't block without an access controller
void TSCECalcEngine::resumeRecalculation()
Can't resume calculation on a closing document!
TSCEValue TSCECalcEngine::evaluateSynchedWithCalcEngineWithFormula(TSCEFormulaObject *__strong, TSCEEvaluationContext &)
formula
TSTRefNamer
TSTRefParser
TSTHeaderNameMgr
TSCEReduceCalcEngineMsgSize
v16@?0@"TSCENamedReferenceManager"8
v16@?0@"TSPObject<TSCEHeaderNameProtocol>"8
v16@?0@"TSCERemoteDataStore"8
v16@?0@"TSCEReferencesToDirty"8
smirnovi
kolmogi
Remote Data Store
Remote Data Store Update
-[TSCERemoteDataStore dealloc]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERemoteDataStore.mm
Failed to unregister store before dealloc
-[TSCERemoteDataStore registerWithCoordinator]_block_invoke
Store is already registered!
-[TSCERemoteDataStore unregisterWithCoordinator]_block_invoke
Store is already unregistered!
-[TSCERemoteDataStore valueForRemoteData:]
Cold specifiers must have dates!
-[TSCERemoteDataStore cachedQuoteForSymbol:]
We're about to capture the coordinator's queue lock. We should NOT have the write lock at this time.
B24@?0@"NSString"8@"NSDictionary"16
-[TSCERemoteDataStore remoteDataDidUpdateValues:quotes:]
Shouldn't get an empty update!
-[TSCERemoteDataStore p_tsceValueFromTsceCellValue:]
Attempted to create a TSCEvalue from an unsupported TSCECellValue of class: %@
-[TSCERemoteDataStore updateWithRemoteDataMap:quotes:syncKey:]
Should never get a docserver update for an unshared file!
v24@?0@"NSString"8^B16
v32@?0Q8@"NSMutableSet"16^B24
year
month
attribute
B24@?0@"TSCERemoteDataSpecifier"8^B16
(empty) 
<%tu specifiers: %tu hot, %tu cold>
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTIteratorBase.mm
virtual TSCEASTElement *TSCEASTIteratorBase::visitNode(TSCEASTElement *)
%s error
unknown
domain
singularity
overflow
underflow
total loss of precision
partial loss of precision
-[TSCEFormulaRewriteSpec addCoordMapper:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormulaRewriteSpec.mm
Replacing same tableUID with a different coordMapper - expect trouble: %@
 type: %@ %@
(inverse)
 tableUID: %@
Nested rewrites:
   (nested): %@
-[TSCEFormulaRewriteSpec affectedOwnerUID]
Shouldn't ask for the affected owner ID of a move, since there may be two.
Not a meaningful question, there are numerous tables affected
-[TSCEFormulaRewriteSpec affectedConditionalStyleOwnerUID]
Not implemented for these rewrite types.
-[TSCEFormulaRewriteSpec adjustViewTractRef:calcEngine:containingCellRef:undoTractList:]
-[TSCEFormulaRewriteSpec restoreViewTractRefFromUndoTractList:calcEngine:containingCellRef:]
-[TSCEFormulaRewriteSpec willModifyTable:uidResolver:calcEngine:]
Move region requires the two tables version will/didModifySrcTable:dstTable: be called instead
-[TSCEFormulaRewriteSpec willModifySrcTable:srcUidResolver:dstTable:dstUidResolver:]
Only move region takes two tables
-[TSCEFormulaRewriteSpec didModifySrcTable:dstTable:]
-[TSCEFormulaRewriteSpec didModifyTable:calcEngine:]
Move region requires the two table version didModifySrcTable:dstTable: be called instead
-[TSCEFormulaRewriteSpec affectedRange]
Not implemented for this type
Not yet implemented for this type
-[TSCEFormulaRewriteSpec expandedRowColumnUuids]
-[TSCERemoteDataSpecifier initWithFunctionIndex:symbol:attribute:year:month:day:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERemoteDataSpecifier.mm
How does a hot specifier have a date?
How does a cold specifier not have a date?
-[TSCERemoteDataSpecifier encodeToArchive:]
Out-of-bounds type assignment was clamped to max
Out-of-bounds type assignment was clamped to min
 [%04zd/%02zd/%02zd]
<%@ %@ %@%@>
nbdtr
nbdtri
+[TSCETablesByName containerNameForTable:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCETablesByName.mm
+[TSCETablesByName tableNameForTable:]
  ContainerName: '%@' TableName: '%@' Table: %@
TSCEErrorValue (type %d %@)
ndtri
TSCEValue TSCEComputeSubtraction(TSCEValue, int, TSCEValue, int, TSCEFunctionSpec *__strong, TSCEEvaluationContext *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEAggregateEval.mm
-[TSCETrackedReference replaceContentsWithContentsOfTrackedReference:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCETrackedReference.mm
can't replace contents with contents of a nil tracked reference
-[TSCETrackedReference referencesForCalcEngine:referenceTrackerUID:]
Non-nil TSCEReferenceSetWrapper is required to use referencesForCalcEngine:
-[TSCETrackedReference precedentsWithCalcEngine:hostOwnerUID:]
Non-nil precedents pointer is required to use precedentsWithCalcEngine:
TSCEInternalCellReference: #%lu::%@
TSCEEvaluationContext::TSCEEvaluationContext(TSCECalculationEngine *__strong, const TSCEOwnerUID &, TSUCellCoord)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEEvaluationContext.mm
Didn't get a calc engine
v28@?0S8r^{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}12^B20
void TSCEEvaluationContext::runBlockUnlessAborted(__strong dispatch_block_t)
failed to create dispatch group
static NSDate *TSCEEvaluationContext::newDateConversionOfString(NSString *__strong, TSCEEvaluationContext *)
Should not have reached this point with a NULL context - you are lucky you are getting any date at all.
-[TSCEValueGrid initWithColumnRange:rowRange:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEValueGrid.mm
Can't set an extent with invalid ranges
-[TSCEValueGrid clearValueAtCoord:]
Can't clear value with a spanning coordinate: %@
-[TSCEValueGrid valueAtCoord:]
Can't read value with a spanning coordinate: %@
-[TSCEValueGrid valueAt1DIndex:]
Index %lu exceeds area: %lu
Can't use valueAt1DIndex: with no dimensions set
v32@?0r^{TSCEGridCoord=II}8r^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16^B24
-[TSCEValueGrid expandToIncludeCoord:]
Can't expand with a spanning coordinate: %@
-[TSCEValueGrid setValue:atCoord:]
Can't set a value at a spanning coordinate: %@
-[TSCEValueGrid setEmptyValueAtCoord:]
-[TSCEValueGrid subGridAtGridCoord:width:height:]
can't access beyond the end of a vector
Exceeded rowLimit: %d
pdtrc
pdtr
pdtri
-[TSCENilCellValue compareToCellValue:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCENilCellValue.mm
 | %u::%@
  %@ -> %@
TSCEErrorFlavor_None
TSCEErrorFlavor_Error
TSCEErrorFlavor_RefError
TSCEErrorFlavor_CircularRefError
TSCEErrorFlavor_UnsupportedFunction
NSString *stringForErrorFlavor(TSCEErrorFlavor)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERefErrors.mm
Missing case for TSCEErrorFlavor: %d
stdtr
stdtri
columnUids: %@
rowUids: %@
%@ mergeSource: %@ mergeRegion: %@
merge origin map:
%@ -> %@
srcTableUID: %@
srcColumnUids: %@
srcRowUids: %@
dstTableUID: %@
dstColumnUids: %@
dstRowUids: %@
-[TSCEFormulaRewrite_RegionMovedInfo loadIndexesFromRegions]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormulaRewrite_RegionInfo.mm
Expecting source and dest regions to be the same size
-[TSCESumAccumulator addValue:function:evaluationContext:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCESumAccumulator.mm
Shouldn't get a nil date from something that says it's a date
virtual TSCEASTElement *TSCEASTRefExtractionIterator::functionNode(TSCEASTFunctionElement *)_block_invoke_2
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEASTRefExtractionIterator.mm
unhandled case for refType: %d
rewriteType=%d
%@->%@
-[TSCEFormulaRewrite_Uids initWithUids:atIndexes:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormulaRewriteInfo_RowColumnInfo.mm
Size mismatch for our vectors
-[TSCEFormulaRewrite_Uids containsIndex:]
The %{public}@ API requires -[%{public}@ loadIndexesForTable:] be called first.
-[TSCEFormulaRewrite_Uids rowIndexForUid:]
Warning, %{public}@ did not find the uuid: %@
-[TSCEFormulaRewrite_Uids columnIndexForUid:]
Uids: %@
Indexes: %@
-[TSCEFormulaRewriteInfo_RowColumnInfo saveToMessage:]
Cannot archive until we have called loadIndexesForTable
-[TSCEFormulaRewriteInfo_RowColumnInfo offsetForRowIndex:]
TSUDefaultCat
-[TSCEFormulaRewriteInfo_RowColumnInfo offsetForUpdatedRowIndex:isRemoveRows:]
This should be the same offset, then, right
-[TSCEFormulaRewriteInfo_RowColumnInfo updatedCellRefForRewriteType:originalCellRef:]
Not implemented for this rewrite type
Should not see this call, we should get either the insert or remove rewrite types
Should not see this call, its more complex than that
-[TSCEFormulaRewriteInfo_RowColumnInfo originalCellRefForRewriteType:updatedCellRef:]
-[TSCEFormulaRewriteInfo_RowColumnInfo indexIsAffected:]
-[TSCEFormulaRewriteInfo_RowColumnInfo uuidForIndex:]
-[TSCEFormulaRewriteInfo_RowColumnInfo columnIndexForUuid:]
-[TSCEFormulaRewriteInfo_RowColumnInfo rowIndexForUuid:]
-[TSCEFormulaRewriteInfo_RowColumnInfo rowOrColumnIndices]
-[TSCEFormulaRewriteInfo_RowColumnInfo tableRange]
-[TSCEFormulaRewriteInfo_RowColumnInfo affectedRangeForRemoveRows]
-[TSCEFormulaRewriteInfo_RowColumnInfo affectedRangeForMoveRows]
insertInfo
-[TSCEFormulaRewriteInfo_RowColumnInfo uuidsInRange:]
-[TSCEFormulaRewriteInfo_RowColumnInfo uuidsForIndexes:]
%@ uuids: %@
<TSKUIDStructVector: %p>
v36@?0r^{TSUCellCoord=ISBB}8S16r^{TSUCellRect={TSUCellCoord=ISBB}{?=II}}20^B28
v32@?0r^{TSUCellRect={TSUCellCoord=ISBB}{?=II}}8r^{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}16^B24
Range dependencies:
%@: Range precedents:
TSCERangePrecedentsTile *TSCERangeDependencies::findTileForToOwnerId(TSCEInternalFormulaOwnerID, BOOL)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCERangeDependencies.mm
v32@?0r^{TSUCellCoord=ISBB}8r^{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16^B24
void TSCERangeDependencies::readFromArchive(const TSCE::RangeDependenciesArchive &)
corrupted range dependencies archive
void TSCERangeDependencies::readFromExpandedArchive(const TSCE::RangeDependenciesArchive &)
void TSCERangeDependencies::unpackAfterUnarchive()
precedentRangeDependencies
%@::{%@}
%@::{%@, ...}
%@, ...
%@<%lu> %@%@
CYCLE 
(formula) 
refers to: %@
; referenced by: %@
---Cell dependencies for %@ (%lu dirty cells):
-[TSCEStringCellValue initWithString:locale:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEStringCellValue.mm
Creating a TSCEStringCellValue with a nil string.
str_
-[TSCEStringCellValue compareToCellValue:]
-[TSCEStringCellValue encodeToArchive:]
Avoid using nil to mean empty string in a TSCEStringValue, string is: %@
-[TSCEDistributor protocol]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEDistributor.m
-[TSCEDistributor addReceiver:]
protocol MUST be defined before addReceiver can be used
Error %@: Target %@ does not conform to protocol %@ required for TSCEDistributor class %@.
-[TSCEDistributor suspendDuringBlock:]
someone added a receiver when we were not expecting it
TSCECellDependencies::TSCECellDependencies(TSCEDependencyTracker *, TSCEInternalFormulaOwnerID, const TSCEOwnerUID &, TSCESubFormulaOwnerIndex)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECellDependencies.mm
tile.cppTile
void TSCECellDependencies::readPrecedentsWithOwners(const TSCE::EdgesArchive &, TSCECellRecord *)
Couldn't locate tableID found in cross-table reference: %{public}@
void TSCECellDependencies::readExpandedPrecedentsWithOwners(const TSCE::ExpandedEdgesArchive &, TSCECellRecord *)
void TSCECellDependencies::readFromArchive(const TSCE::CellDependenciesArchive &)
void TSCECellDependencies::unpackAfterUnarchive()
void TSCECellDependencies::readFromTiledArchive(const TSCE::CellDependenciesTiledArchive &, TSPUnarchiver *__strong)_block_invoke
TSCECellRecordTileWrapper *TSCECellDependencies::tileForCoord(const TSUCellCoord &, BOOL)
Expect cppTile to be filled in already
Uh, why are we returning a tile with no insides?
<%lu> 
refers to: 
; referenced by: 
[UNREGISTERING]
%@-%@
%@ (%@) %@
%@ %@ (%@) %@
CellDependencies for %@
Cell Precedents of %@:
  %@<%lu>
void TSCECellDependencies::findAndRecordCyclesInDirtyCells(TSCETarjanState &, TSCEInternalCellRefQueue &)_block_invoke
Cycle grid out of sync.
IsDirty grid out of sync.
IsDirtyAndNotInACycle grid out of sync.
Avoided underflow in dirtySelfPlusPrecedentsCount for cell: %@
void TSCECellDependencies::assertDirtyPrecedentsCountConsistency()
assertDirtyPrecedentsCountConsistency: inconsistency detected.
BOOL TSCECellDependencies::dirtyPrecedentCountsAreConsistent(BOOL)_block_invoke
cellRecord
%@:%@ recomputed: <clean> vs stored %lu - inconsistency.
%@...<truncated>
  +1: This cell is dirty
recomputed: %lu vs stored %lu - inconsistency, explanation:
%@precedents:%@
dirty precedents count consistency error in %@ (count is %lu, should be >1)
void TSCEWholeOwnerDependencies::readFromArchive(const TSCE::WholeOwnerDependenciesArchive &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEWholeOwnerDependencies.mm
NULL whole owner dependencies
void TSCEWholeOwnerDependencies::unpackAfterUnarchive()_block_invoke
bool TSCEWholeOwnerDependencies::addOwnerReference(const TSCEInternalCellReference &)
void TSCEVolatileDependencies::readFromArchive(const TSCE::VolatileDependenciesArchive &)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEVolatileDependencies.mm
corrupt volatile dependency tracker archive
bool TSCEVolatileDependencies::addVolatileGeometryReference(const TSCEInternalCellReference &)
NULL volatile dependencies
-[TSCECellValue tsceValue]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCECellValue.mm
-[TSCECellValue copyWithZone:]
-[TSCECellValue displayString]
Children of TSCECellValue should implement %@.
-[TSCECellValue canonicalKeyString]
-[TSCECellValue format]
-[TSCECellValue isEqualToCellValue:]
-[TSCECellValue hash]
-[TSCECellValue compareToCellValue:]
-[TSCECellValue updateWithCustomFormatList:]
customFormatList
-[TSCECellValue encodeCellValueToArchive:]
Unexpected value type found in archiving in TSCECellValue
boo_TRUE
boo_FALSE
-[TSCEBooleanCellValue compareToCellValue:]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEBooleanCellValue.mm
/dev/random
TSCEArchives.proto
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/messages/src/TSCEArchives.pb.cc
kTSCERecalcLoopGroupEmpty%u
com.apple.Numbers.TSCE.PrecedentLoading
-[TSCEFormulasToSet commonInit]
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEFormulasToSet.mm
_precedentLoadingQueue
_precedentLoadingGroup
com.apple.Numbers.TSCE.BackgroundFormulas
_backgroundProcessingQueue
-[TSCEFormulasToSet initWithCalcEngine:forMinion:options:]
A minion is required to use TSCEFormulasToSet object
-[TSCEFormulasToSet dealloc]
Deallocing %@ with %lu formulasToReset
Deallocing %@ with %lu formulasToRemove
Deallocing %@ with %lu formulasToReplace
-[TSCEFormulasToSet replaceFormula:atCellCoord:inOwner:replaceOptions:]_block_invoke
precedents
-[TSCEFormulasToSet _flushFormulasToReplaceWithDepTracker:startTime:timeout:]_block_invoke
-[TSCEFormulasToSet flushAllFormulaChanges]
We should be empty now, always
Starting parse
Stack size increased to %lu
Entering state %d
Reading a token: 
Now at end of input.
Next token is
Shifting
Reference Construction - Manual Error
int TSCEyyparse(void *)
/Library/Caches/com.apple.xbs/Sources/iWorkImport_Sim/iWorkImport-460/quicklook/iwork/src/shared/calculationEngine/TSCEGrammar.ymm
Parser: the quoted string length is less than 2.
Invalid Native Syntax String for Argument Token.
ARGUMENT
Invalid Function String specified in Token initialization.
Malformed reference
-> $$ =
syntax error
Error: popping
memory exhausted
Cleanup: discarding lookahead
Cleanup: popping
token %s (
nterm %s (
$end
error
$undefined
HIGHER
TOK_LPAREN
TOK_RPAREN
TOK_LBRACK
TOK_RBRACK
TOK_ARG_SEPARATOR
TOK_DOUBLE_COLON
TOK_BANG
TOK_DOLLAR
TOK_UNKNOWN
TOK_REFERENCE_TOKEN_BEGIN
TOK_REFERENCE_TOKEN_END
TOK_UNQUOTED_LABEL
TOK_QUOTED_LABEL
TOK_NUMBER
TOK_WS
TOK_ARRAY_LINE_DELIMITER
TOK_ERROR
TOK_TOKEN
TOK_QUOTEDSTRING
TOK_COLON
TOK_PIPE
TOK_LESS_OR_EQUAL
TOK_GREATER_OR_EQUAL
TOK_GREATER_THAN
TOK_LESS_THAN
TOK_NOT_EQUAL
TOK_EQUALS
TOK_AMPERSAND
TOK_MINUS
TOK_PLUS
TOK_DIV
TOK_TIMES
TOK_POWER
TOK_PERCENT
UPLUS
UMINUS
$accept
root
expr
label
label_end_token
number
number_end_token
function
list
list_tail
expr_opt
reference
scoped_reference
scoped_reference_end_token
scoped_reference_tokenized
unscoped_reference
unscoped_reference_end_token
unscoped_reference_tokenized
cell_ref
cell_ref_tokenized
cell_ref_end_token
Reducing stack by rule %d (line %lu):
   $%d = 
void TSCEASTNodeAddChild(TSCEASTNode *, TSCEAST *)
Adding child to leaf
Stack now
Deleting
yyFlexLexer::yylex invoked but %option yyclass used
fatal flex scanner internal error--no action found
fatal flex scanner internal error--end of buffer missed
fatal error - scanner input buffer overflow
input in flex scanner failed
out of dynamic memory in yy_get_next_buffer()
flex scanner push-back overflow
out of dynamic memory in yy_create_buffer()
out of dynamic memory in yyensure_buffer_stack()
out of memory expanding start-condition stack
start-condition stack underflow
d(A:
TSCEReferenceSetWrapper
NSCopying
TSCELocalization
TSCEWarning
TSCEBulkCellChangeMinion
TSCEFormulaReplacing
NSObject
TSCEFunctionSpec
TSCEUnitRegistry
TSCECellDirtier
TSCETaggedDecimalListObject
TSCEUpgradingTablesMinion
TSCEUuidReferences
TSCEAdditions
TSCENameTrie
TSCEReferencesToDirty
TSCEUndoTract
FullTuple
TSCEUndoTractList
NSFastEnumeration
TSCERegionAllocator
TSCEGroupByNodeMap
TSCECoordMapper
TSCECoordMappingProtocol
TSCERewritingMinion
TSCETableTransposedInfo
TSCERewriteTableUIDInfo
TSCERewriteGroupNodeUIDInfo
TSCEAbstractGrid
TSCEAggregateGrid
TSCEDenseGrid
TSCEReferenceBackedGrid
TSCEError
TSCECellRecordTileWrapper
TSCEOwnerUidMapper
!0&0"@
TSCESageSizedList
TSCELogicalTest
TSCEValueContainer
TSCECellCoordinateVector
TSCECellValueCombinator
TSCEFormulasForUndoForOwnerKind
TSCEFormulasForUndo
TSCEAutogeneratedSpecList
TSCERegexMatcher
TSCERefNamingContext
TSCEGetPivotDataBundle
TSCEArgumentToken
TSCEWrappedCellRef
TSCEWrappedRangeRef
TSCEConfiguration
TSCERelativeTractRef
TSCEUIDSet
NSMutableCopying
TSCEMutableUIDSet
TSCEFormulaOwnerWrapper
TSCERangePrecedentsTile
TSCEFunctionArgumentSpec
TSCECategoryRef
TSCETableNameChangeProtocol
TSCETablesByNameDistributor
TSCEEvalRef
TSCENamedReferenceManager
TSCEFormulaOwning
TSCEQuotedRefPathWord
TSCEQuotedRefPathComponent
TSCEQuotedRefPathSplitter
TSCEAnyReference
TSCECalendar
TSCETrackedReferenceTSPObjectDeprecated
TSCEUnpersistedStorage
TSCEViewTractRef
TSCEAutogeneratedSpecTypes
TSCEHauntedOwner
TSCEAbortObject
TSCECalculationEngine
TSCEColumnRowIndexMapper
TSCERemoteDataSourceFetcher
TSCECalculationEngineRegistration
TSKModel
TSCETransaction
TSCENumberCellValue
TSCEUUidReferenceMap
TSCEFunctionsInUse
TSCEStock
TSCETrackedReferenceStore
TSCEDateCellValue
TSCERemoteDataValueMap
TSCERemoteDataCoordinator
TSCEReferenceParsingContext
TSCEFormulaOwnerDependencies
TSCEFormulaObject
TSCEFormulaReturning
TSCECellTractRef
TSCEReferenceResolving
TSCEHeaderNameProtocol
TSCERemoteDataStore
TSCERemoteDataSpecifierSet
TSCEFormulaRewriteSpec
TSCERemoteDataSpecifier
TSCE_PrefixMatch
TSCETablesByName
TSCEErrorCellValue
TSCETrackedReference
TSCEValueGrid
AbstractGrid
TSCENilCellValue
TSCEGroupByChange
TSCEFormulaRewrite_RegionInfo
TSCEFormulaRewrite_RegionMergedInfo
TSCEFormulaRewrite_MergeOriginMovedInfo
TSCEFormulaRewrite_RegionMovedInfo
TSCESumAccumulator
TSCEFormulaRewrite_Uids
TSCEFormulaRewriteInfo_RangeEntry
TSCEFormulaRewriteInfo_RowColumnInfo
NumericCompare
TSCEEdgeListPrinter
TSCECellDependencyRowPrinter
TSCECellDependenciesPrinter
TSCEStringCellValue
TSCEDistributor
TSCECellValue
TSCEBooleanCellValue
TSCECalcTimeoutObject
TSCEFormulasToSet
functionSpecForFunctionIndex:
functionName
array
raiseInvalidArgumentPairingsErrorForFunctionName:hasInitialUnrelatedArgument:
rangeIsWithinTable:
raiseErrorForInvalidReference
raiseRangeSizeMismatchErrorForFunctionName:
logicalTestWithCriterion:functionSpec:evaluationContext:
initWithValue:
pairWithFirst:second:
addObject:
count
copyAndReplaceGroupUIDs:
setGroupByUid:
groupByUid
absoluteGroupUid
setAbsoluteGroupUid:
relativeGroupUid
setRelativeGroupUid:
type
setType:
tableOrLinkedResolverForTableUID:
isEqual:
isValid
preserveFlags
groupByChange
updatedRelativeAncestorLevelForPreviousAncestorCategoryLevel:numLevels:
setAsAbsoluteWithGroupUid:
mutableCopy
stringWithUTF8String:
handleFailureInFunction:file:lineNumber:isFatal:description:
logBacktraceThrottled
removeAllObjects
geometryPrecedentForTableUID:
removeObject:
containsObject:
countByEnumeratingWithState:objects:count:
initWithDependencyTracker:
init
dealloc
initWithReferenceSet:
referenceSet
copyWithZone:
isEmpty
insertAnyRef:
insertCellRef:
insertRangeRef:
insertSpanningRangeRef:
insertRefs:
removeCellRef:
forallRefs:
foreachCellRef:
foreachRangeRef:
foreachSpanningRangeRef:
_referenceSet
TB,R,N
T^v,R,N
localeSpecificStorageForKey:
localizedStringForKey:value:table:
initWithObjectsAndKeys:
setLocaleSpecificStorage:forKey:
functionLocalizationDictionary
objectForKey:
allKeys
numberWithInt:
localizedTrueString
localizedCaseInsensitiveIsEqual:toString:
localizedFalseString
initWithObjects:
objectAtIndex:
dictionaryWithCapacity:
setObject:forKey:
stringWithFormat:
_localizedStringFromArgumentsTable:
localizedFunctionCategoryDictionary
localizations
initWithCapacity:
objectEnumerator
nextObject
pathForResource:ofType:inDirectory:forLocalization:
dictionaryWithContentsOfFile:
loadLocalizedStrings
localizedTrueStrings
localizedFalseStrings
localizedNameForFunction:
localizedCompare:toString:
sortedArrayUsingComparator:
arrayWithObjects:
localizedNamesForFunctions:
allValues
addObjectsFromArray:
functionNameForLocalizedString:
supportedFunctions
localizedTypeStringForArgumentType:
localizedStringIsTrue:
localizedStringIsFalse:
localizedFunctionNameForMenuTag:
localizedToolTipForFunction:
localizedCategoryForFunction:
localizedNameForArgument:ofFunction:
localizedToolTipForArgument:ofFunction:
localizedModeNameForArgument:modeIndex:ofFunction:
localizedModeToolTipForArgument:modeIndex:ofFunction:
localizedCategoryArray
allLocalizedFunctions
localizedLabelForAggType:
localizedShortLabelForAggType:
localizedLabelForShowAsType:
allocWithZone:
initWithDictionary:
ignored
setIgnored:
isEqualToString:
sharedCalculationEngineConfiguration
warnWhenFormulasReferToEmptyCells
referenceTextWithCalculationEngine:hostTableUID:
rangeRef
documentLocale
intValue
description
hash
displayStringWithCalculationEngine:forTable:andCellID:
isIgnored
initWithRangeRef:
setHasVisibleWarnings:
reportNonNumericCellWarningInContext:reference:
reportMonthOutOfRangeWarningInContext:
reportDayOutOfRangeWarningInContext:
reportBoolToNumberConversionWarningInContext:
reportMismatchedSizesWarningInContext:
reportLossOfUnitsWarningInContext:
reportAutomaticUnitConversionWarningInContext:
reportComparisonWarningInContext:leftType:rightType:
copyByRemappingEntityIDs:
metadata
setMetadata:
.cxx_destruct
_ignored
_metadata
T@"NSDictionary",&,N,V_metadata
TB,N,V_ignored
tableResolverForTableUID:
initWithCalcEngine:forMinion:options:
calcEngine
replaceFormula:atCellCoord:inOwner:
replaceFormula:atCellCoord:inOwner:replaceOptions:
replaceFormulaAt:inOwner:precedents:replaceOptions:
removeFormulaAt:inOwner:
removeFormulasAt:
removeAllFormulasFromOwner:
resetFormulaAt:
markCellRefAsDirty:
markRangeRefAsDirty:
flushAllFormulaChanges
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
initWithCalcEngine:
flushAllChanges
_formulasToSet
T@"TSCECalculationEngine",R,N
initWithFunctionName:minArgs:maxArgs:repeatingGroupSize:isOperator:shipVersion:arguments:functionIndex:
functionSpecList
setObject:forKeyedSubscript:
functionIndex
loadSpecDictionary
objectForKeyedSubscript:
currentLocale
loadRepeatingArguments
localizedFunctionNameForLocale:
argumentSpecForIndex:
caseInsensitiveCompare:
specWithFunctionName:minArgs:maxArgs:repeatingGroupSize:isOperator:shipVersion:arguments:functionIndex:
englishFunctionNameFromFunctionIndex:
functionSpecForFunctionName:
isModeEnabled:functionIndex:
unsupportedFunctionNameForLocale:
p_ValidateArguments
localizedToolTipStringForLocale:
displayStringForLocale:
arguments
numArguments
accessorModeForArgumentIndex:
preferredTypeForArgumentIndex:
nativeSyntaxStringForArgument:
modeNumberForLocalizedString:argumentSpecIndex:attributeMax:locale:
minArguments
maxArguments
isOperator
versionShippedIn
repeatingGroupSize
.cxx_construct
_functionName
_minArguments
_maxArguments
_repeatingGroupSize
_arguments
_repeatingArguments
_isOperator
_shipVersion
_functionIndex
T@"NSString",R
TS,R,V_functionIndex
Tr^v,R
Ts,R,N,V_minArguments
Ts,R,N,V_maxArguments
TQ,R,N
TB,R,N,V_isOperator
Ti,R,N,V_shipVersion
Ts,R,N,V_repeatingGroupSize
mainBundle
availableCurrencyCodes
numberWithInteger:
integerValue
initWithInt:
unitForString:
length
characterAtIndex:
unitPrefixForCharacter:
substringFromIndex:
binaryUnitPrefixForChars::
multiplierForUnitPrefix:
initialize
unitForCurrencyCode:
currencyCodeForUnit:
canonicalUnitForDimension:
prefixedUnitForString:
unitIsMetric:
convert:fromUnit:toUnit:
dimensionForUnit:
dirtyCellsForSeconds:fromStartTime:
isDoneDirtying
_dirtyCellsWithNoLockForSeconds:fromStartTime:
dependentsToDirtyByFromRef
dirtyCellsNow
startDirtyingCellRef
stopDirtyingCellRef
dirtyNewCellRef:forSeconds:fromStartTime:
dependTracker
startTime
timeout
startCellRef
dirtyingInProgress
setDirtyingInProgress:
_dependTracker
_startCellRef
_dirtyingInProgress
_dirtyingLock
_startTime
_timeout
_dependentsToDirtyByFromRef
TB,N,V_dirtyingInProgress
T^v,R,N,V_dependTracker
T@"NSDate",R,N,V_startTime
Td,R,N,V_timeout
T{TSCEInternalCellReference={TSUCellCoord=ISBB}SS},R,N,V_startCellRef
taggedDecimalList
isAbortedError
raiseMixedTypeManipulationErrorForFunctionName:
timeIntervalSinceReferenceDate
createFromVector:functionSpec:argumentIndex:evaluationContext:ignoreError:ignoreDuplicates:
_taggedList
errorForErrorType:
stringWithCString:encoding:
setProblemExpressionString:
usEnglishLocale
managedNodeArrayWithCapacity:
raiseNumberError
uppercaseString
tsce_stringByUnescapingSingleQuotes
raiseUnsupportedFeatureError
rangeOfString:
substringWithRange:
resolverForTableUID:
resolverUID
forwardRegisterOwnerWithOwnerUID:legacyGlobalID:
ownerUIDForLegacyGlobalID:registeringIfNeeded:
appendString:
cppCalcEngine
flushRemoveFormulas
flushResetFormulas
flushReplaceFormulas
willClose
flush
appendFormat:
isBadRef
addCellCoord:referringToTableUID:forColumnRowUuid:
addCellCoord:referringToTableUID:
removeCellCoord:referringToTableUID:forColumnRowUuid:
removeCellCoord:referringToTableUID:
getCellRefs:referringToOwner:
_stringForInternalCellRef:
initWithOwnerUID:
addCellCoord:referringToCategoryRef:
removeCellCoord:referringToCategoryRef:
removeCellCoord:
clear
getCellRefs:referringToOwners:
getAllCellRefs:referringToOwnerUID:
getCellRefs:referringToOwnerUID:referringToUuids:
initFromArchive:ownerUID:
unpackAfterUnarchive
encodeToArchive:archiver:
ownerUID
setOwnerUID:
_ownerUID
_coordSetsReferringToTable
_coordSetsReferringToUuidInTable
_uuidsByCoord
T{TSKUIDStruct=QQ},N,V_ownerUID
characterSetWithCharactersInString:
addCharactersInString:
whitespaceCharacterSet
addCharactersInRange:
whitespaceAndNewlineCharacterSet
tsce_internationalWhitespaceCharacterSet
formUnionWithCharacterSet:
tsce_singleQuoteCharacterSet
tsce_characterSetRequiringSingleQuotes
tsce_periodCharacterSet
tsce_internationalWhitespaceAndNewlineCharacterSet
tsce_internationalColonCharacterSet
tsce_dollarSignCharacterSet
tsce_listDelimiterCharacterSet
raiseUnknownFunctionErrorForString:
timePortionOfDateTimeFormatString:
datePortionOfDateTimeFormatString:
initWithFormatString:
raiseInvalidTokenInFormulaError
initWithValues:gridKind:isFlattened:dimensions:
initWithValues:gridKind:isFlattened:
ownerIsRegistered:
referenceToNonexistentTableError:
formulaResultForFormattedValue:context:suppressCycleCheck:formatAsPercent:
tsce_dateWithSerialNumber:dateMode:
XLImportDateMode
durationNotAllowedError:argumentNumber:
locale
tsce_stringByFoldingForNamedReferenceMatchingWithLocale:
nodeForName:createIfMissing:
foldName:
insertFoldedName:
initWithLocale:
setLocale:
insertName:
containsName:
removeName:
enumerateNamesMatchingPrefix:block:
_root
_locale
copy
valueAtCoord:
topLeftCoord
compressToZeroBased
initWithValueGrid:
preferredFormatOptions:
commonInit
context
initWithContext:
dependencyTracker
isEmptyForDirtying
dirtyAllCellsInOwnerId:
willModify
dirtyInternalRangeRef:
timeIntervalSinceNow
beginBatchingGroupCellDirtying
endBatchingGroupCellDirtying
shouldCleanGraphForConsistencyViolation
setShouldCleanGraphForConsistencyViolation:
_flushDirtyOwnerIdsWithDepTracker:startTime:timeout:
_flushCellRefSetWithDepTracker:startTime:timeout:
_flushDependentOnlyCellRefSetWithDepTracker:startTime:timeout:
_flushRangeRefsWithDepTracker:startTime:timeout:
_flushInternalCellRefSetWithDepTracker:startTime:timeout:
flushDirtyReferencesForSeconds:
setCalculationEngine:
setShouldPerformDetectAndRepairConsistencyViolations:
isEmptyForArchiving
dirtyAllCellsInOwner:
dirtyCellRef:
dirtyInternalCellRef:
dirtyOnlyDependentsOfCellRef:
dirtyCoords:inOwnerId:
dirtyCellRefs:
dirtyInternalCellRefs:
dirtyCellRefsInReferenceSet:
dirtyRangeRef:
hasDirtyingToPerformForOwnerId:
flushCellDirtier
flushAllDirtyReferences
addInProgressCalcCellRefs:
isInProgressCalcIntCellRef:
numberOfInProgressCalcCellRef
clearInProgressCalcCellRefs
loadFromUnarchiver:
saveToArchiver:
shouldPerformDetectAndRepairConsistencyViolations
debugOnly_DidDetectAndRepairConsistencyViolations
debugOnly_DidCleanGraphForConsistencyViolation
_dirtyingMutex
_calcEngine
_cellRefDirtier
_toDirtyOwnerIds
_toDirtyInternalCellRefs
_toDirtyCellRefs
_toDirtyDependentsOnlyCellRefs
_toDirtyRangeRefs
_shouldPerformDetectAndRepairConsistencyViolations
_shouldCleanGraphForConsistencyViolation
_calcCellsInProgress
_debugOnly_DidDetectAndRepairConsistencyViolations
_debugOnly_DidCleanGraphForConsistencyViolation
T@"TSCECalculationEngine",R,N,V_calcEngine
TB,N,V_shouldPerformDetectAndRepairConsistencyViolations
TB,N,V_shouldCleanGraphForConsistencyViolation
TB,R,N,V_debugOnly_DidDetectAndRepairConsistencyViolations
TB,R,N,V_debugOnly_DidCleanGraphForConsistencyViolation
messageWithDescriptor:
messageWithNewFunction:descriptor:
columnUids
rowUids
setIsRangeRef:
setPreserveRectangularRange:
setPurpose:
purpose
isRangeRef
preserveRectangularRange
saveToArchive:columnUids:rowUids:purpose:isRangeRef:preserveRectangularRange:
p_remapUidVector:usingUidMap:clearIfMissing:
stringForPurpose:
saveToArchive:tsuColumnUids:tsuRowUids:purpose:isRangeRef:preserveRectangularRange:
initWithPurpose:
initWithColumnUid:rowUid:purpose:
initWithColumnUids:rowUids:purpose:
initWithArchive:
saveToArchive:
spansAllColumns
spansAllRows
remapUsingUidMap:
remapUsingColumnUidMap:rowUidMap:clearIfMissing:
_columnUids
_rowUids
_purpose
_isRangeRef
_preserveRectangularRange
TB,N,V_isRangeRef
TB,N,V_preserveRectangularRange
TC,N,V_purpose
T^v,R,V_columnUids
T^v,R,V_rowUids
appendColumnUid:rowUid:
appendUidTract:
setPreserveFlags:
firstTractWithPurpose:
addToIncludedUidsTractColumnUids:rowUids:
includedUidsTract
initWithUUIDVector:
addUuidsFromVector:
uuidsAsVector
dropTract:
addTractAtFront:
addToIncludedUidsTractColumnUids:rowUids:isRangeRef:preserveRectangularRange:
excludedUidsTract
removeUuidsFromVector:
removeFromExcludedUidsTractColumnUidsSet:
removeFromExcludedUidsTractRowUidsSet:
insertObject:atIndex:
removeObjectIdenticalTo:
tractCount
lastObject
removeLastObject
removeObjectAtIndex:
preMergeUidTract
preMoveRegionUidTract
activeUidTract
removedByMoveUidTract
addToIncludedUidsTractColumnUid:rowUid:
addToExcludedUidsTractColumnUids:
addToExcludedUidsTractRowUids:
addToExcludedTractUids:isRows:
removeFromExcludedUidsTractColumnUids:
removeFromExcludedUidsTractRowUids:
uidTractAtIndex:
pruneMergeUidTractsAtAndAboveIndex:
_preserveFlags
_tracts
T{TSUPreserveFlags=C},N,V_preserveFlags
initAsFullTupleForColumnHeaderUid:rowHeaderUid:aggregateRuleUid:flatteningDimension:
addRowColumnRuleValuePair:valueUid:
hasFullTupleInformation
columnHeaderUid
rowHeaderUid
aggregateRuleUid
flatteningDimension
enumerateRowColumnRuleValuePairsUsingBlock:
initWithInitialCapacity:
malloc:
reset
_head
_curBlock
_blockOffset
_managedNodeArrays
tableUIDHistory
tableUIDMap
fromTableUID
tableUID
isForTable:
groupByRootUid
getCellRefs:inGroupBy:
addCellRef:usingCategoryRef:
removeCellRef:usingCategoryRef:
removeAllCellRefsInOwner:
getCellRefs:referringToGroupNodes:inGroupBy:
getCellRefs:forGroupRootInGroupBy:
getCellRefs:inGroupBys:
initFromArchive:
encodeToArchive:
upgradeGroupByUid:toUid:
_cellRefsByGroupNodeByGroupBy
_groupNodesByCellRef
hasAnyDateArgumentsToFunction:
addIndexes:
initWithTableUID:summaryColumns:summaryRows:labelRows:
mapBaseRow:toViewRow:
mapSummaryRow:toViewRow:
mapBaseColumn:toViewColumn:
mapSummaryColumn:toViewColumn:
initWithTableUID:
isIdentityMapping
viewColumnIndexForChromeColumnIndex:
baseColumnIndexForViewColumnIndex:
viewRowIndexForChromeRowIndex:
baseRowIndexForViewRowIndex:
viewColumnIndexForBaseColumnIndex:
chromeColumnIndexForViewColumnIndex:
viewRowIndexForBaseRowIndex:
chromeRowIndexForViewRowIndex:
containsIndex:
countOfIndexesInRange:
enumerateRangesUsingBlock:
removeIndex:
shiftIndexesStartingAtIndex:by:
addIndex:
enumerateIndexesUsingBlock:
viewColumnIndexesForBaseColumnIndexes:
baseColumnIndexForChromeColumnIndex:
baseRowIndexForChromeRowIndex:
chromeColumnIndexForBaseColumnIndex:
chromeRowIndexForBaseRowIndex:
summaryColumnIndexForViewColumnIndex:
summaryRowIndexForViewRowIndex:
viewColumnIndexForSummaryColumnIndex:
viewRowIndexForSummaryRowIndex:
baseCellCoordForChromeCellCoord:
baseCellCoordForViewCellCoord:
chromeCellCoordForBaseCellCoord:
chromeCellCoordForViewCellCoord:
viewCellCoordForBaseCellCoord:
viewCellCoordForChromeCellCoord:
viewTractRefForChromeTractRef:
baseTractRefForViewTractRef:
columns
baseColumnIndexesForViewColumnIndexes:
rows
baseRowIndexesForViewRowIndexes:
initWithColumns:rows:tableUID:
setSpansAllRows:
setSpansAllColumns:
topLeft
bottomRight
preserveRectangular
setPreserveRectangular:
viewTractRefForBaseTractRef:
chromeTractRefForViewTractRef:
chromeColumnIndexesForViewColumnIndexes:
chromeRowIndexesForViewRowIndexes:
viewRowIndexesForBaseRowIndexes:
viewColumnIndexesForChromeColumnIndexes:
viewRowIndexesForChromeRowIndexes:
sourceIndexes
firstIndex
lastIndex
initWithStartIndex:endIndex:
swapIndex:withIndex:
enumerateMappingFollowingSwapsUsingBlock:
summaryCellCoordForViewCellCoord:
viewCellCoordForSummaryCellCoord:
baseCellRefForChromeCellRef:
baseCellRefForViewCellRef:
chromeCellRefForBaseCellRef:
chromeCellRefForViewCellRef:
viewCellRefForBaseCellRef:
viewCellRefForChromeCellRef:
chromeRangeRefForViewRangeRef:
viewRangeRefForChromeRangeRef:
baseTractRefForChromeTractRef:
chromeTractRefForBaseTractRef:
baseShuffleMapForViewShuffleMap:
chromeCoordsAreViewCoords
setChromeCoordsAreViewCoords:
TB,N
initWithTableUID:summaryRows:labelRows:
_isIdentityMapping
_chromeCoordsAreViewCoords
_tableUID
_baseRowToViewRow
_viewRowToBaseRow
_summaryRowIndexes
_summaryColumnIndexes
_labelRowIndexes
_summaryAndLabelRowIndexes
_baseColumnToViewColumn
_viewColumnToBaseColumn
_summaryRowToViewRow
_viewRowToSummaryRow
_summaryColumnToViewColumn
_viewColumnToSummaryColumn
TB,R,N,V_isIdentityMapping
TB,N,V_chromeCoordsAreViewCoords
absoluteCellTractRefForHostCell:
initWithAbsoluteTractRef:hostCell:
setAsRelativeWithGroupUid:
rowColumnInfo
isColumns
rewriteType
initWithIndexesInRange:
originalCellRefForRewriteType:updatedCellRef:
updatedCellRefForOriginalCellRef:
columnUIDForColumnIndex:
UIDsForRange:isRows:
isRows
rowUIDForRowIndex:
offsetForRowIndex:
updatedCellRefForRewriteType:originalCellRef:
auxRowColumnInfo
isRectangularRange
rowOrColumnUids
indexes
insertRowGapsAtIndexes:
insertColumnGapsAtIndexes:
coordMapperForTableUID:calcEngine:
insertAtUid
rowIndexForRowUID:
insertOppositeUid
addRows:
fillInRowGapsUsingIndexes:
fillInColumnGapsUsingIndexes:
uidsForIndexes:
edgeExpandUsingIndexes:forRows:
edgeExpandUsingMovingUids:tractList:
edgeExpandTractUsingIncludeUidTract:resolver:forRows:isInverse:
isAllInvalid
removeAllUuids
isSingleCellOrSpanningRange
initWithFormat:
tsce_p_initializeQuotes
rangeOfCharacterFromSet:
characterIsMember:
scannerWithString:
isAtEnd
scanUpToCharactersFromSet:intoString:
scanCharactersFromSet:intoString:
tsce_needsReferenceSingleQuoteEscaping
mutableCopyWithZone:
replaceOccurrencesOfString:withString:options:range:
insertString:atIndex:
tsce_newStringByForcingSingleQuoteEscapes:
stringByTrimmingCharactersInSet:
deleteCharactersInRange:
tsce_stringByUnescapingSingleQuotesAndGettingTrailingWhitespaceCount:
tsce_stringByUnescapingPartialQuotedStringWithEmptyQuotedStringOK:preserveTrailingUnquotedWhitespace:
tsce_stringByAddingSingleQuoteEscapes
stringByAppendingString:
hasPrefix:
ptsce_referenceComponentsSeparatedByCharacterInSet:
stringByFoldingWithOptions:locale:
tsce_replaceCharactersInSet:withString:
tsce_stringByAddingSingleQuoteEscapesIfNecessary
tsce_stringByForcingSingleQuoteEscapes:
tsce_newStringByAddingSingleQuoteEscapesIfNecessary
tsce_isSingleQuoted
tsce_stringByUnescapingPartialQuotedString
tsce_stringByUnescapingPartialQuotedStringWithEmptyQuotedStringOK:
tsce_newStringByAddingDoubleQuoteEscapesIfNecessary
tsce_stringByReplacingTabsAndNewlinesWithASingleSpace
tsce_stringByRemovingNewlines
tsce_referenceComponentsSeparatedByPathDelimiter
tsce_referenceComponentsSeparatedByColon
tsce_referenceComponentsSeparatedBySpace
hasTableUID
shuffleMap
applyMappingToIndexSet:
setRows:
cellTractRefWithUidTractList:onTable:preserveFlags:rewriteContext:
setTableUID:
indexSet
removeIndexes:
columnUid
groupLevel
aggrIndexLevel
relativeColumn
options
initWithGroupByUID:relGroupUID:absGroupUid:columnUid:aggType:groupLevel:aggrIndexLevel:preserveFlags:relativeColumn:options:
tract
columnGroupLevel
rowGroupLevel
aggregateIndexLevel
initWithTract:tableUID:preserveFlags:columnGroupLevel:rowGroupLevel:aggrIndexLevel:
raiseInvalidDateManipulationError
dateByAddingTimeInterval:
raiseComparisonTypeExceptionForLeftType:rightType:
raiseException
raiseArgumentSetUsedOutOfContextError
regexMatcherWithRegexString:caseSensitive:entireMatch:
containsMatchInString:
raiseTypeExceptionForValue:functionSpec:argumentIndex:locale:
stringFromBool:locale:
numberValueFromString:locale:outDecimalValue:outValueType:outCurrencyCode:
typeErrorForValue:functionSpec:argumentIndex:locale:
customFormat
defaultFormatData
formatString
falseString
compare:options:
addRewrittenCellAt:
hasRewrittenCellAt:
addPendingCellRemovalAt:
_rewrittenCells
_pendingCellsToRemove
stringFromDouble:locale:
defaultFormatWithFormatType:locale:
raiseInvalidCurrencyComparisonError
raiseInvalidComparisonError
raiseMismatchedCurrenciesErrorForFunctionName:
raiseDivideByZeroError
raiseZeroToPowerOfZeroError
raiseDurationNotAllowedError:argumentNumber:
relativeRows
setRelativeRows:
setColumns:
relativeColumns
setRelativeColumns:
initWithTimeIntervalSinceReferenceDate:
defaultDateTimeFormatForLocale:
compare:
localizedCaseInsensitiveCompare:toString:
transposedBodyRange
setTransposedBodyRange:
numberOfFooterRows
setNumberOfFooterRows:
_transposedBodyRange
_numberOfFooterRows
T{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}},N,V_transposedBodyRange
TI,N,V_numberOfFooterRows
initWithTableUIDMap:
originalTableUIDs
initFromMessage:
saveToMessage:
extendMappingWithTableUIDs:calcEngine:
tableWasAdded:
rollbackMappings:
_tableUIDMap
initWithGroupByUid:groupNodeUIDMap:
originalGroupNodeUIDs
groupNodeUIDMap
_groupByUid
_groupNodeUIDMap
valueAtIndex:accessContext:
initWithValues:
formatAtIndex:accessContext:
gridKind
dimensions
value
nativeType
deepType:
valueAtGridCoord:accessContext:
valueAtIndexNoThrow:accessContext:
flattenedGrid:
flattenedGridNoThrow:
containsError:evaluationContext:
error
subGridValueAtGridCoord:width:height:accessContext:
newCorrespondingAST:argIndex:bakeReferences:evaluationContext:
number:argIndex:evaluationContext:
date:argIndex:evaluationContext:
boolean:argIndex:evaluationContext:
string:argIndex:locale:
rawString:argIndex:locale:
reference:argIndex:evaluationContext:
initWithGrids:
raiseValueErrorForFunctionName:
_grids
_argumentCounts
_count
_lastReturnedIndex
_lastReturnedArgIndex
_lastReturnedSubindex
initWithValueVector:dimensions:
firstValue
valueAt1DIndex:
getHidingActionForRows:
subGridAtGridCoord:width:height:
initWithValues:gridKind:
_valueGrid
_gridKind
_isFlattened
clearResolver
hasCachedValue
cachedValueWasFetchedWithRichTextAttributes
cachedValue
scalarValueForEvalContext:permitAccessInsideMergeRegions:fetchRichTextAttributesIfPlainText:
setCachedValue:
scalarValueFromCoord:permitAccessInsideMergeRegions:fetchRichTextAttributesIfPlainText:
setCachedValueWasFetchedWithRichTextAttributes:
initWitRefValue:rangeContext:
getResolverUID
rangeCoord
tractRef
tableResolver
width
height
raiseAbortError
makeCellReferenceForOffset:apparentTractRef:
invalidReferenceError
_evalRef
_apparentTractRef
regionMovedInfo
originalSrcTableUID
srcTableUID
rowUIDForBaseRowIndex:
flattenedCellRefForCategoryRef:calcEngine:
categoryRefsForSpanningCategoryRef:
initWithCellRefVector:
dstTableUID
srcColumnUids
srcRowUids
spanningRows
spanningColumns
originalSrcColumnUids
originalSrcRowUids
dstColumnUids
dstRowUids
uidForIndex:
isInverse
dstUidForSrcUid:
columnIndexForUid:
rowIndexForUid:
dstUidForSrcUid
srcCondStyleOwnerUID
originalSrcCondStyleOwnerUID
initWithGroupByUID:relGroupUID:absGroupUid:columnUid:aggType:groupLevel:aggrIndexLevel:preserveFlags:
adjustIndexesBy:
second
initWithDouble:
initWithErrorType:
setFunctionName:
errorForErrorType:functionName:
setArgIndex:
errorType
removeObjectForKey:
argIndex1
setArgIndex1:
boolValue
numberWithBool:
raiseErrorForError:
errorDictionary
localizedStringWithFormat:
stringByAppendingFormat:
problemNodeIsCellReference
setHostTableUID:
namer
chromeNameForBaseRangeRef:namingContext:
problemExpressionString
argIndex
extraInfoNumber
maxArgsAllowed
shortValue
providedArgs
referenceArray
listSeparator
componentsJoinedByString:
valueToMatch
afterMatch
previousMatch
previousValueIsRegex
occurrence
matchesFound
lowerBound
lowerBoundInclusive
upperBound
upperBoundInclusive
doubleValue
argIndex2
argsAscending
equalityPermitted
chooseIndex
extraInfoString
unitName
dateAsTimeInterval
dateWithTimeIntervalSinceReferenceDate:
stringWithString:
problemMode
errorTypeKey
userInfo
setAttachmentErrorRaisedInTextCell:
p_DictionaryRepresentsInvalidMergeReference:
wrappedRangeRef
abortError
notReadyError
setProblemMode:
logFullBacktrace
setProblemNodeIsCellReference:
setWrappedRangeRef:
raiseErrorForInvalidReference:orString:contextEntityUID:invalidMergeReference:disqualifiedFromEndCell:
setInvalidReferenceToMerge:
setReferenceEndCellInvalid:
raiseOutOfBoundsArgumentErrorForArgument:functionName:lowerBound:lowerBoundInclusive:upperBound:upperBoundInclusive:
errorForErrorType:functionName:argIndex:
numberWithDouble:
setLowerBound:
setLowerBoundInclusive:
setUpperBound:
setUpperBoundInclusive:
setAfterMatch:
setOccurrence:
setMatchesFound:
setPreviousMatch:
setPreviousValueIsRegex:
setValueToMatch:
raiseMatchNotFoundErrorForValue:isRegex:afterMatch:previousValueToMatch:previousValueIsRegex:occurrence:matchesFound:functionName:
indirectErrorForRangeReference:hostTableUID:
setAnyReference:
setArgIndex2:
setArgsAscending:
setEqualityPermitted:
setChooseIndex:
setExtraInfoString:
setExtraInfoNumber:
setMaxArgsAllowed:
setProvidedArgs:
raiseMismatchedUnitsErrorForFunctionName:argumentNumberString:
setReferenceArray:
setUnitName:
invalidLiveStockAttributeError
notAReferenceToAFormulaError
invalidReferenceNameAttributeError
invalidHistoricalStockAttributeError
invalidLiveCurrencyAttributeError
invalidHistoricalCurrencyAttributeError
invalidHistoricalDateError
remoteDataUnavailableErrorWithAttribute:
setDateAsTimeInterval:
attachmentCount
attachmentAtAttachmentIndex:outCharIndex:
elementKind
autoNumberAttachmentError
attachmentError
errorWithDictionary:
errorForToken:
syntaxError
exceptionIsFromCalcEngine:
exceptionIsCircularReferenceError:
exceptionIsRangeUsageError:
circularReferenceError
missingRunningTotalInFieldError
missingPivotTableErrorForFunctionName:argumentNumber:
invalidAggregateColumnErrorForFunctionName:argumentNumber:
invalidGroupingColumnErrorForFunctionName:argumentNumber:
exceptionIsInvalidMergeReference:
raiseInvalidArrayContentsError
raiseNotReadyError
raiseDisallowedStockModeError:
raiseNumberErrorForFunctionName:
raiseAutoNumberAttachmentErrorInTextCell:
raiseAttachmentErrorInTextCell:
raiseValueNotAvailableErrorForFunctionName:
raiseErrorForInvalidReference:orString:contextEntityUID:
invalidMergeReference:contextEntityUID:
raiseOutOfBoundsArgumentErrorForArgument:functionName:lowerBound:lowerBoundInclusive:
raiseOutOfBoundsArgumentErrorForArgument:functionName:upperBound:upperBoundInclusive:
raiseMatchNotFoundErrorForValue:isRegex:functionName:
raiseStartNumberExceedsStringLengthErrorForFunctionName:
raiseDifferentNumberOfDataPointsErrorForFunctionName:
invalidDateManipulationError
raiseInvalidArgumentsErrorForFunctionName:argumentIndex:
raiseIndirectErrorForRangeReference:hostTableUID:
raiseNoModeError
raiseEmptyArgumentError
raiseEmptyArgumentSpecificErrorForArgumentNumber:
raiseInvalidRangeUsageErrorForReference:
raiseInvalidHyperlinkError
raiseDifferentNumberOfElementsErrorForFunctionName:
raiseUnionInsideIntersectionError
raiseCircularReferenceErrorWithReference:
raiseNotAReferenceErrorForFunctionName:
raiseNoSuitableArgumentsFoundErrorForFunctionName:requiredType:
raiseInvalidArgumentRelationshipErrorForFunctionName:argIndex1:argIndex2:argsAscending:equalityPermitted:
raiseInvalidArgumentEqualityRelationshipErrorForFunctionName:argIndex1:argIndex2:
raiseInvalidIndexForChooseError:
raiseNonEmptyStringRequiredErrorForFunctionName:
raiseStringDoesNotRepresentNumberErrorForFunctionName:string:
raiseStringDoesNotRepresentDateErrorForFunctionName:string:
raiseSignsMustMatchErrorForFunctionName:
raiseRangeDoesNotSumToOneForFunctionName:argumentNumber:
raiseUnsupportedR1C1StyleError
raiseInvalidDateError
raiseInvalidTimeError
raiseNotAVectorError
raiseInvalidProbabilityErrorForFunctionName:
raiseNumberSmallerThanZeroError
raiseArgumentEqualsToZeroErrorForFunctionName:argumentNumber:
raisePositionLargerThanArrayErrorForFunctionName:
raiseInvalidFrequencyErrorForFunctionName:argumentNumber:
raiseInvalidTypeErrorForFunctionName:argumentNumber:
raiseInvalidTailErrorForFunctionName:argumentNumber:
raiseInvalidSubtotalFunctionNumberError
raiseNumberDoesNotConvergeErrorForFunctionName:
raiseNumberDoesNotConvergeWithEstimateErrorForFunctionName:
raiseTooFewDataPointsErrorForFunctionName:
raiseDateEarlierThanStartingDateErrorForFunctionName:
raiseOnlyPositiveOrNegativeErrorForFunctionName:
raiseReferenceToEmptyCellErrorForFunctionName:rangeReference:
raiseNumberMinusDateError
raiseWrongNumberOfArgumentsErrorForFunctionName:provided:
raiseTooManyArguments:maximum:provided:
raiseMismatchedUnitsErrorForFunctionName:
raiseUnitsNotAllowedErrorForFunctionName:argumentNumber:
raiseCurrencyNotAllowedErrorForFunctionName:argumentNumber:
sumMixedDurationsAndUnitlessWithoutADateErrorForFunctionName:
raiseSumMixedDurationsAndUnitlessWithoutADateErrorForFunctionName:
raiseNotEnoughInputsErrorForFunctionName:argumentNumber:required:
raiseInvalidIntersectionError:hostTableUID:calcEngine:
raiseEmptyArrayError
raiseInvalidBaseCharacterErrorForCharacter:base:
raiseInvalidUnitStringError:
raiseDifferentDimensionsErrorForFunctionName:
raiseNonMetricUnitPrefixErrorForUnitString:
raiseConvertOriginUnitMismatchError
raiseArrayElementNoDataError
raiseDataInvalidDimensionsError
raiseDataInvalidLengthError
raiseDataInvalidWidthError
raiseNegativeReceivedAmountError
raiseInvalidMatchModeError
raiseMismatchedMaxUnitsError
raiseVectorValueNotNumberErrorForFunctionName:argumentNumber:
raiseCharInputOutOfBoundsError
raiseDurationDisallowedForNormdistPDFError
raiseLinestHighlyCorrelatedVariableError
raiseMultipleDurationsErrorForFunctionName:
raiseLinestMatrixUnderdeterminedError
raiseNegativeVectorValueErrorForFunctionName:argumentNumber:
raisePercentRankInputOutOfRangeError
raisePercentRankExcInputOutOfRangeError
raiseLocationServicesNotEnabledError
raiseLocationHeadingUnknownError
raiseLocationUnknownError
raiseLocationUserDeniedError
raiseLocationNetworkError
raiseLocationHeadingFailureError
raiseInvalidLatitudeLongitudeError
raiseInvalidAltitudeError
raiseInvalidHeadingError
raiseInvalidRegexError:
raiseStringTooLongError
raiseUnsupportedFunctionError
raiseNoConditionIsTrueErrorForFunctionName:
raiseInvalidLiveStockAttributeError
raiseNotAReferenceToAFormulaError
raiseInvalidReferenceNameAttributeError
raiseInvalidHistoricalStockAttributeError
raiseInvalidLiveCurrencyAttributeError
raiseInvalidHistoricalCurrencyAttributeError
raiseInvalidHistoricalDateError
raiseRemoteDataUnavailableErrorWithAttribute:
noTradingInformationErrorWithNextAvailableDate:
invalidStockCodeError:
invalidCurrencyPairError
remoteDataServerError
errorForRichTextStorage:outValue:
attachmentErrorRaisedInTextCell
invalidReferenceToMerge
referenceEndCellInvalid
anyReference
dateValue
stringValue
tokenString
isFromCalcEngine
isCircularReferenceError
isMismatchedUnitsError
errorIsRangeUsageError
isInvalidMergeReference
isNotReadyError
isUnsupportedFunctionError
isUnsupportedFeatureError
isErrorReferenceError
isInvalidReferenceError
deepType
numberForFunction:argumentIndex:warningReportingContext:
dateForFunction:argumentIndex:warningReportingContext:
stringForFunction:argumentIndex:warningReportingContext:
booleanForFunction:argumentIndex:warningReportingContext:
formattedGridForFunction:argumentIndex:context:format:
referenceValueForFunction:argumentIndex:warningReportingContext:
number
date
string
boolean
vector
referenceValue
isNativelyEqual:
bakedString
setErrorType:
_errorType
_errorDictionary
Tq,N,V_errorType
T@"NSString",R,N
T@"NSString",&,N
T@"NSNumber",&,N
T{TSKUIDStruct=QQ},N
T@"TSCEWrappedRangeRef",&,N
T@"NSArray",&,N
T@"TSCEAnyReference",&,N
cellDependencies
internalOwnerID
initWithCellID:dirtyPrecedentCount:
setIsFormula:
setIsInCycle:
addPrecedentWithCellID:forOwner:
addDependentWithCellID:forOwner:
addDependencyRow:
initWithOwnerId:tileColumnBegin:tileRowBegin:context:
cppTile
numCellRecords
unpackAfterUnarchiveForCellDependencies:
setInternalOwnerID:
_internalOwnerID
_tileColumnBegin
_tileRowBegin
_tile
_unarchivedCellRecords
TS,N,V_internalOwnerID
cost
first
compare:withContext:
rangeOfCharacterFromSet:options:range:
replaceCharactersInRange:withString:
tsce_appendSpaces:
setDay:
setMonth:
setYear:
initWithCalendarIdentifier:
timeZoneWithName:
setTimeZone:
dateFromComponents:
initWithTimeInterval:sinceDate:
setHour:
setMinute:
setSecond:
components:fromDate:
year
month
hour
minute
weekday
tsce_year
tsce_month
tsce_day
tsce_dateWithYear:month:day:hour:minute:second:
tsce_weekday
tsce_hour
tsce_minute
tsce_second
tsce_weekNumberForType:
tsce_mapToDouble
tsce_addObjectNonNil:
createHarmonizedDecimalFormatterOfStyle:
setFormat:
setMinFractionDigits:maxFractionDigits:
createStringWithNumber:
lock
unlock
initWithCalendarIdentifier:timeZone:
components:fromDate:toDate:options:
dateByAddingComponents:toDate:options:
dictionary
initWithBytes:length:encoding:
illegalCharacterSet
controlCharacterSet
stringWithCharacters:length:
characterSetWithRange:
setCharactersToBeSkipped:
scanLocation
dataUsingEncoding:
bytes
regexMatcherWithRegexString:caseSensitive:
numberOfMatchesInString:options:range:
rangeOfString:options:
currencyCode
defaultDecimalPlacesForCurrencyCode:
cfLocale
UTF8String
rangeOfFirstMatchInString:options:range:
rangeOfString:options:range:
numberFormatWithValueType:formatString:decimalPlaces:currencyCode:useAccountingStyle:negativeStyle:showThousandsSeparator:fractionAccuracy:
matchesInString:options:range:
range
numberOfRanges
rangeAtIndex:
regexMatcherWithStringMatch:caseSensitive:entireMatch:
stringByReplacingMatchesInString:options:range:withTemplate:
rangeOfFirstMatchInString:
rangeOfMatchInString:occurrence:matchesFound:
substringToIndex:
numberValueFromString:locale:outDecimalValue:
enumerateSubstringsInRange:options:usingBlock:
stringByReplacingOccurrencesOfString:withString:
p_recreateUIDs
verifySubOwnerUIDsUsed
nextHiddenStateForRowsOwnerUID
nextHiddenStateForColumnsOwnerUID
nextConditionalStyleOwnerUID
nextSortRuleReferenceTrackerOwnerUID
nextMergeOwnerUID
nextPencilAnnotationOwnerUID
nextCategoryAggregatesOwnerUID
nextGroupByUID
initForPivotDataTableWithMapper:
nextTableUID
hiddenStateForRowsOwnerUID
hiddenStateForColumnsOwnerUID
conditionalStyleOwnerUID
sortRuleReferenceTrackerOwnerUID
mergeOwnerUID
pencilAnnotationOwnerUID
categoryAggregatesOwnerUID
groupByUID
initWithTableUID:pasteBoardTableUID:hiddenStateOwnerForRowsUID:hiddenStateOwnerForColumnsUID:conditionalStyleOwnerUID:sortRuleReferenceTrackerOwnerUID:mergeOwnerUID:pencilAnnotationOwnerUID:categoryAggregatesOwnerUID:groupByUID:
setToIdentityMapping
setNextTableUID:
setNextHiddenStateForRowsOwnerUID:
setNextHiddenStateForColumnsOwnerUID:
setNextConditionalStyleOwnerUID:
setNextSortRuleReferenceTrackerOwnerUID:
setNextMergeOwnerUID:
setNextPencilAnnotationOwnerUID:
setNextCategoryAggregatesOwnerUID:
setNextGroupByUID:
usesAllSubOwnerUIDs
pivotDataTableMapper
initWithFormulaOwnerUID:
initWithIdentityMapping
setToUpgradeMapping
makeInverse
fullDescription
ownerUIDMap
pbTableUID
categoryOwnerUID
nextCategoryOwnerUID
setNextCategoryOwnerUID:
_nextTableUID
_hiddenStateForRowsOwnerUID
_nextHiddenStateForRowsOwnerUID
_hiddenStateForColumnsOwnerUID
_nextHiddenStateForColumnsOwnerUID
_conditionalStyleOwnerUID
_nextConditionalStyleOwnerUID
_sortRuleReferenceTrackerOwnerUID
_nextSortRuleReferenceTrackerOwnerUID
_mergeOwnerUID
_nextMergeOwnerUID
_pencilAnnotationOwnerUID
_nextPencilAnnotationOwnerUID
_categoryAggregatesOwnerUID
_nextCategoryAggregatesOwnerUID
_groupByUID
_nextGroupByUID
_pbTableUID
_uidMap
_categoryOwnerUID
_nextCategoryOwnerUID
T{TSKUIDStruct=QQ},R,N,V_pbTableUID
T{TSKUIDStruct=QQ},R,N
T{TSKUIDStruct=QQ},R,N,V_categoryOwnerUID
T{TSKUIDStruct=QQ},N,V_nextCategoryOwnerUID
initWithBase:basePlaces:baseUseMinusSign:
foreachUuid:
verifySpanningSettings
initWithNodeArray:
descriptionForLevel:
addUUID:
initWithTableUID:preserveFlags:
repairSpanningColumnSetting
repairSpanningRowSetting
subtotalPrecedentForTableUID:
cellDependentsOfCell:
addValue:function:evaluationContext:
resultForFunction:
foundANumber
dateAccumulator
numberAccumulator
relativeTopLeft
relativeBottomRight
addIndexesInRange:
boundingRange
mutableIndexesForUIDs:isRows:
indexLessThanIndex:
enumerateRangesInRange:options:usingBlock:
indexGreaterThanIndex:
UIDsForIndexes:isRows:
containsUuid:
defaultDateOnlyShortFormatForLocale:
standaloneWeekdaySymbols
initWithUseAutomaticUnits:durationUnitSmallest:durationUnitLargest:durationStyle:
standaloneMonthSymbols
arrayWithCapacity:
sortUsingSelector:
isEqualToDate:
timeIntervalSinceDate:
currentDate
currentTimeZoneCalendar
dateWithIdenticalComponentsInGMTForDate:
extractComponentsFromDate:year:month:day:
earlierDate:
laterDate:
indexIsAffected:
uuidForIndex:
rowOrColumnIndices
uuidsForIndexes:
mutableColumnIndexesForUIDs:
indexSetWithIndexesInRange:
mutableRowIndexesForUIDs:
isEqualViaFormattingAsDouble::
documentRoot
arrayWithObject:
replaceObjectAtIndex:withObject:
initAffineWithMappings:xs:ys:xDimension:
initNonAffineWithMappings:xs:ys:xDimension:desiredIntercept:
coefficientAtIndex:
coefficientStandardErrorAtIndex:
rSquared
standardError
fStatistic
degreesFreedom
regressionSumSquares
errorSumSquares
arrayWithArray:
standardUserDefaults
dictionaryRepresentation
descriptionWithLocale:
filteringChangedPrecedentForTableUID:
userHiddenChangedPrecedentForTableUID:
numberOfItems
setTrailingWhitespace:
isArray
trailingWhitespace
appendNodeArray:
makeListWithFirstElem:trailingWhitespace:isArray:
arrayOrListNode:
functionNode:functionName:whitespaceAfterLabel:
_nodeArrays
_trailingWhitespace
_isArray
T@"NSString",&,N,V_trailingWhitespace
TB,R,N,V_isArray
TI,R,N
initWithCriterion:functionSpec:evaluationContext:
setDate:
setMatcher:
criteriaParser:
setString:
regexMatcherWithStringMatch:
matcher
evaluationContext
setEvaluationContext:
_operation
_value
_string
_date
_matcher
_evaluationContext
T@"TSCERegexMatcher",&,N,V_matcher
T^v,N,V_evaluationContext
T@"NSString",&,N,V_string
T@"NSDate",&,N,V_date
mValue
stringWithCapacity:
referenceIsValid:
sheetTableNamePrecedentForTableUID:
formulaDefinitionPrecedentForTableUID:
groupByChangedPrecedentForTableUID:
headerNameMgr
emptyReferenceSetWrapper
const_astNodeArray
baseHeaderColumnsForCell:
baseHeaderRowsForCell:
newArrayByScanningString:scanRange:
objectAtIndexedSubscript:
rangeValue
URLFragmentAllowedCharacterSet
stringByAddingPercentEncodingWithAllowedCharacters:
stylesheet
theme
defaultListStyle
initWithContext:string:kind:stylesheet:paragraphStyle:listStyle:section:columnStyle:
initWithContext:url:
addSmartField:toRange:dolcContext:undoTransaction:
hyperlinkStyle
setCharacterStyle:range:undoTransaction:
initWithContextTableResolver:
setTrimNames:
setReferenceIsComplete:
setParseAsBaseTableReference:
setReferencesMatchingInputAsPrefix:
refParser
parseStringAsBaseReference:withParsingContext:
namesUsed
referencesMatchingInputAsPrefix
sheetName
tableName
parseR1C1Reference:containingCell:preserveFlagsOut:
nameFragmentPrecedentsForReferenceString:
namedReferenceManager
formulaOwnerUID
parseStringAsCategoryRef:withParsingContext:
aggregateTypeForCategoryRef:
cellRefsForCategoryRef:atRowUid:
valuesForCategoryRef:atRowUid:hidingActionMask:error:
setContextSheetName:
setAllowTableName:
setShowGeometricAsBase:
setQuoteComponents:
setForceSheetName:
setForceTableName:
setSuppressIdenticalEndReference:
setAllowSpanningColumnReferenceBodyQualifier:
setUseSymbolicNames:
initWithCppCellTractRef:
nameForViewTractRef:namingContext:coordMapper:
nameForBaseTractRef:namingContext:
setAggregateFieldName:
addDataField:withValue:
firstMissingDataField
componentsSeparatedByString:
hasSuffix:
foreachAnyRef:
setPreserveFlagsOnSubrange:
foreachCellRect:
addCellCoordinate:
cellCoordinates
cellCoordinatesSet
removeAllCellCoordinates
_cellCoordinates
_sem
addValuesForDimension:
enumerateCombinationsWithBlock:
_valuesForDimension
uuidsInRange:
uuidForTableUID:andIndex:direction:
indexSetBySubtractingOurIndexesFromIndexSet:
boundingRangeRef
collapseOutRowIndexes:
collapseOutColumnIndexes:
addFormula:atCellRef:
formulaOwnerUIDs
foreachFormula:
ownerKind
setOwnerKind:
_ownerKind
_formulas
_nonFormulaCells
_formulaOwnerUIDs
TS,N,V_ownerKind
addFormulaObject:atCellRef:forOwnerKind:
initWithArchive:isPreUFF:
ownerUIDsForOwnerKind:
allOwnerKinds
subsetForOwnerKind:
countForOwnerKind:
splitIntoChunksForExcessiveSize
foreachFormulaInOwnerKind:performBlock:
saveToArchive:archiver:
addFormulaString:atCellRef:
formulaStringAtCellRef:
_formulasForOwnerKind
_formulaStringsForCellRefs
mergeLeftRef:rightRef:outError:
absoluteCellTractRefForHostCell:offTable:
cppCellTractRef
initWithTableResolver:tractRefCore:
argSpecWithType:accessorMode:rangeContext:
argSpecWithType:accessorMode:rangeContext:minValue:minInclusive:maxValue:maxInclusive:disallowedTypes:disallowDuration:disallowCurrency:
argSpecWithType:accessorMode:rangeContext:argumentContext:minValue:minInclusive:maxValue:maxInclusive:isInteger:disallowedTypes:disallowDuration:disallowCurrency:modeValues:defaultModeIndex:referenceForGeometryOnly:forceArrayMode:
argSpecWithType:accessorMode:rangeContext:disallowedTypes:disallowDuration:disallowCurrency:
argSpecWithType:accessorMode:rangeContext:modeValues:defaultModeIndex:
argSpecWithType:accessorMode:rangeContext:argumentContext:
argSpecWithType:accessorMode:rangeContext:argumentContext:disallowedTypes:referenceForGeometryOnly:
initWithRegexString:caseSensitive:entireMatch:
initWithPattern:options:error:
initWithString:caseSensitive:entireMatch:
enumerateMatchesInString:options:range:usingBlock:
regexMatcherWithRegexString:
rangeOfMatchInString:occurrence:
regularExpression
_regularExpression
T@"NSRegularExpression",R,N,V_regularExpression
addUuidsFromSet:
removeUUID:
numberOfRows
numberOfColumns
columnUIDForBaseColumnIndex:
valueGridForCategoryRef:atRowUid:hidingActionMask:error:
ownerKindForOwnerUID:
cellIsInACycle:
aggregateRangeRefForCategoryRef:
requiresDocumentVersion:
tsp_protobufString
tsp_stringWithProtobufString:
addRelativeColumnRange:
addRelativeRowRange:
addColumnRange:
addRowRange:
contextSheetName
hostTableUID
suppressIdenticalEndReference
useSymbolicNames
allowTableName
allowSpanningColumnReferenceBodyQualifier
showGeometricAsBase
quoteComponents
forceEscaping
setForceEscaping:
forceTableName
forceSheetName
forFormulaPlainText
setForFormulaPlainText:
usedSymbolicName
setUsedSymbolicName:
_suppressIdenticalEndReference
_useSymbolicNames
_allowTableName
_allowSpanningColumnReferenceBodyQualifier
_showGeometricAsBase
_quoteComponents
_forceEscaping
_forceTableName
_forceSheetName
_forFormulaPlainText
_usedSymbolicName
_contextSheetName
_hostTableUID
T@"NSString",&,N,V_contextSheetName
T{TSKUIDStruct=QQ},N,V_hostTableUID
TB,N,V_suppressIdenticalEndReference
TB,N,V_useSymbolicNames
TB,N,V_allowTableName
TB,N,V_allowSpanningColumnReferenceBodyQualifier
TB,N,V_showGeometricAsBase
TB,N,V_quoteComponents
TB,N,V_forceEscaping
TB,N,V_forceTableName
TB,N,V_forceSheetName
TB,N,V_forFormulaPlainText
TB,N,V_usedSymbolicName
keyValuePairCount
setMissingDataFieldAtIndex:
enumerateDataKeyValuePairsUsingBlock:
combinedDataValuesWithLocale:
aggregateIndex
setAggregateIndex:
aggregateFieldName
aggregateType
setAggregateType:
showAsType
setShowAsType:
_dataFields
_dataValues
_missingGroupingColumn
_aggregateType
_showAsType
_aggregateIndex
_aggregateFieldName
T@"NSString",&,N,V_aggregateFieldName
TS,N,V_aggregateIndex
TC,N,V_aggregateType
TC,N,V_showAsType
isStringValidArgumentToken:
tableRangeOfTable
coordinate
initWithCellRef:
cellRef
invalidCellRef
initWithCellCoord:tableUID:
initWithCellCoord:tableID:
tableID
_cellRef
T{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}},R,N,V_cellRef
T{TSUCellCoord=ISBB},R,N
T@"NSUUID",R,&,N
invalidRangeRef
initWithRangeCoord:tableUID:
initWithRangeCoord:tableID:
initWithRangeRefRect:tableID:
_rangeRef
T{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}},R,N,V_rangeRef
T{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}},R,N
setWarnWhenFormulasReferToEmptyCells:
mWarnWhenFormulasReferToEmptyCells
setWithCapacity:
unionSet:
numColumns
numRows
removeColumnRange:
removeRowRange:
addColumn:
addRow:
setMixedColumnStartedWithPreserve:
setMixedRowStartedWithPreserve:
preserveFlagsFixingInversionsForTract:absFromRelColumns:absFromRelRows:
initWithRangeRef:hostCell:
numRelativeColumns
numRelativeRows
addRelativeColumn:
addRelativeRow:
removeRelativeColumnRange:
removeRelativeRowRange:
relativeBoundingRangeWithContainingCell:
adjustRelativeIndexesBy:
_absTractRef
_relativeColumns
_relativeRows
T{TSUPreserveFlags=C},R,N
p_reserve:
intersectsSet:
anyUuid
p_addUUID:
p_removeUUID:
p_addUUIDs:
p_removeUUIDs:
p_addUUIDsFromVector:
p_removeUUIDsFromVector:
initWithUUIDSet:
initWithUUID:
initWithTSUUUIDVector:
uuidsAsTSUVector
isSubsetOf:
setByUnionWithSet:
expandedSetWithUuid:
reducedSetMinusUuid:
expandedSetWithUuids:
reducedSetMinusUuids:
expandedSetWithUuidsFromVector:
reducedSetMinusUuidsFromVector:
_uuidSet
addUUIDs:
removeUUIDs:
addUuidsFromSetReturningAdded:
removeUuidsFromSet:
removeUuidsFromSetReturningRemoved:
remapWithMap:
reserve:
affectedOwnerUID
rowOrColumnUuids
tsu_intersectsIndexesInIndexSet:
UIDForIndex:isRows:
setTopLeft:
setBottomRight:
isEqualToTSCEFormulaOwnerWrapper:
Tr^{TSKUIDStruct=QQ},R,N
lowercaseString
specifierWithFunctionIndex:symbol:attribute:year:month:day:
valueForRemoteData:
attribute
uppercaseStringWithLocale:
specifierWithFunctionIndex:symbol:attribute:
transposedInfo
transpose
mapOwnerUID:
useAutomaticUnits
durationUnitSmallest
durationUnitLargest
durationStyle
decimalPlaces
negativeStyle
showThousandsSeparator
accountingStyle
initWithFormatType:decimalPlaces:negativeStyle:showSeparator:
initWithDecimalPlaces:negativeStyle:showSeparator:accountingStyle:currencyCode:
fractionAccuracy
initWithFractionAccuracy:
base
basePlaces
baseUseMinusSign
formatType
asCurrencyFormat
asNumberFormat
asDurationFormat
asFractionFormat
asBaseFormat
asBooleanFormat
trueString
booleanFormat
customFormatKey
asDateTimeFormat
asCustomFormatWrapper
currencyCodeForValue:
addRect:fromCoord:
initWithOwnerId:context:
numRangeRecords
removeRect:fromCoord:
containsFromCoord:
containsRect:fromCoord:
removeRectsForFromCoord:
enumerateAllRangesForFromCoord:usingBlock:
enumerateAllRanges:
toInternalOwnerID
_toInternalOwnerID
_fromCoordToReferRect
TS,R,N,V_toInternalOwnerID
_argSpec
mergeInfo
mergeRegion
condStyleOwnerUID
topLeftCellCoord
mergeSource
invertedSet
rangeOfCharacterFromSet:options:
removeObjectsInRange:
initWithGroupByUID:absGroupUid:columnUid:aggType:groupLevel:aggrIndexLevel:
refersToPivotTable
isRelativeAncestorGroupUid:
relativeLevelOfAncestorGroupUid:
relativeAncestorGroupUid:
initWithGroupByUID:absGroupUid:columnUid:aggType:groupLevel:
pivotTableUid
refersToPivotTableRows
refersToPivotTableColumns
showAggregateName
setShowAggregateName:
convertToBadRef
restoreFromBadRef
setColumnUid:
setGroupLevel:
setAggrIndexLevel:
setRelativeColumn:
setOptions:
_columnUid
_relativeGroupUid
_absoluteGroupUid
_aggType
_groupLevel
_aggrIndexLevel
_relativeColumn
_options
T{TSKUIDStruct=QQ},N,V_groupByUid
T{TSKUIDStruct=QQ},N,V_relativeGroupUid
T{TSKUIDStruct=QQ},N,V_absoluteGroupUid
T{TSKUIDStruct=QQ},N,V_columnUid
TC,N,V_aggType
TC,N,V_groupLevel
TS,N,V_aggrIndexLevel
Ts,N,V_relativeColumn
TC,N,V_options
receivers
didAddTableName:forTableUID:
distributeBlock:
didRemoveTableName:forTableUID:
didChangeTableName:fromTableName:forTableUID:
protocol
initWithCalcEngine:tableUID:topLeft:bottomRight:preserveFlags:
initWithTableResolver:topLeft:bottomRight:preserveFlags:
bodyRangeOfTable
makeCellReferenceInSameTable:
format:
canonicalCellReferenceForReference
_tableResolver
_tractRef
_cachedValue
_cachedValueWasFetchedWithRichTextAttributes
T^{TSCETableResolver=^^?},R,N
T{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}},R,N
T{shared_ptr<TSCEValue>=^{TSCEValue}^{__shared_weak_count}},N,V_cachedValue
TB,N,V_cachedValueWasFetchedWithRichTextAttributes
registerWithCalcEngine:
trackedReferencesExistForTable:
beginTrackingNamesInTable:limitedToRange:
beginTrackingNamesInRange:ofTableUID:addingTrackedReferencesTo:
endTrackingNamesInTableForLegacyNRM:
beginTrackingNameInCell:ofTableUID:addingTrackedReferencesTo:
beginTrackingReferenceWithCellRef:
allTrackedReferences
referencesForCalcEngine:referenceTrackerUID:
endTrackingReference:
setStrongReference:message:
registerOwnerWithOwnerUID:owner:referenceResolver:baseOwnerUID:ownerKind:
unregisterOwner:
beginTrackingReference:calcEngine:
beginTrackingReference:
endTrackingReference:calcEngine:
trackedReferenceAtCoord:
corruptCellRefs
formulaOwnerUIDForInternalFormulaOwnerID:
ownerKindForOwnerID:
refersToCellRefForCalculationEngine:referenceTrackerUID:
endTrackingNamesInTable:
beginTrackingNamesInTable:
resetCorruptCellRefs:
linkedResolver
evaluationMode
writeResultsForCalcEngine:
invalidateForCalcEngine:
evaluateFormulaAt:withCalcEngine:recalcOptions:
multiEvaluateFormulasAt:withCalcEngine:recalcOptions:
initWithContext:calculationEngine:
updateTrackedHeaders:
unregisterFromCalcEngine
formulaOwner
setFormulaOwnerUID:
setCalcEngine:
_trackedRefsStore
_weakTrackedRefsStore
_isRegisteredWithCalculationEngine
T@"TSCECalculationEngine",W,V_calcEngine
readReferenceMessage:class:protocol:completion:
rangeOfComposedCharacterSequencesForRange:
isLeftParen:
isRightParen:
trimmedStringWithPreserveFlag:
initWithRawString:
trimmedString
quoteStringIfNeeded
wasQuoted
setWasQuoted:
hasPreserveFlag
setHasPreserveFlag:
rawString
setRawString:
_wasQuoted
_hasPreserveFlag
_rawString
TB,N,V_wasQuoted
TB,N,V_hasPreserveFlag
T@"NSString",&,N,V_rawString
trimmedStringStartingAtWord:withPreserveFlags:
addRefPathWord:
removeRefPathWordAtIndex:
numWords
wordAtIndex:
trimmedStringStartingAtWord:
_refPathWords
isSingleQuote:
splitRefPath:
initWithReferenceString:
componentAtIndex:
refPathInterestingCharactersSet
isSingleQuotePair:ch2:
isDollar:
isColon:
initWithComponents:aggregateFunction:
addComponent:
numComponents
localizedBlankGroupName
setLocalizedBlankGroupName:
localizedErrorGroupName
setLocalizedErrorGroupName:
localizedTrueGroupName
setLocalizedTrueGroupName:
localizedFalseGroupName
setLocalizedFalseGroupName:
localizedTrueGroupNameForColumn
setLocalizedTrueGroupNameForColumn:
localizedFalseGroupNameForColumn
setLocalizedFalseGroupNameForColumn:
forceSplitting
setForceSplitting:
_quotedComponents
_forceSplitting
_localizedBlankGroupName
_localizedErrorGroupName
_localizedTrueGroupName
_localizedFalseGroupName
_localizedTrueGroupNameForColumn
_localizedFalseGroupNameForColumn
T@"NSString",&,N,V_localizedBlankGroupName
T@"NSString",&,N,V_localizedErrorGroupName
T@"NSString",&,N,V_localizedTrueGroupName
T@"NSString",&,N,V_localizedFalseGroupName
T@"NSString",&,N,V_localizedTrueGroupNameForColumn
T@"NSString",&,N,V_localizedFalseGroupNameForColumn
TB,N,V_forceSplitting
nameForChromeRangeRef:namingContext:
p_stringByUnescapingQuotedStringWithPossibleDollarPrefix:partial:
rangeReference
referenceTextWithCalculationEngine:contextSheetName:
anyRef
referenceTextForAutocompleteWithCalculationEngine:hostTableUID:preserveFlags:inputString:inputStringIsComplete:
referenceTextForAutocompleteWithCalculationEngine:contextSheetName:preserveFlags:inputString:inputStringIsComplete:
overrideText
setOverrideText:
overrideTextAsTyped
setOverrideTextAsTyped:
wasConstructedViaNames
setWasConstructedViaNames:
_ref
_overrideText
_overrideTextAsTyped
_wasConstructedViaNames
T@"NSString",C,V_overrideText
T@"NSString",C,V_overrideTextAsTyped
TB,N,V_wasConstructedViaNames
T{TSCEAnyRef=S{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}C}{TSKUIDStruct=QQ}B@},R,N
T@"TSCEWrappedRangeRef",R,N
extractComponentsFromDate:year:month:day:hour:minute:second:
_calendar
validatedLoadFromUnarchiver:
formulaID
mAST
mFormulaID
storageByApplyingCustomFormat:
initWithContext:string:stylesheet:kind:
insertStorage:atCharIndex:dolcContext:undoTransaction:
copyStorageUnpersisted:
copyPersistedWithContext:
paragraphStyleAtParIndex:effectiveRange:
propertyMap
properties
filterWithProperties:
characterStyleAtCharIndex:effectiveRange:
addValuesFromPropertyMap:
initWithContext:name:overridePropertyMap:isVariation:
paragraphCount
wpKind
textRangeForParagraphAtIndex:
setParagraphStyle:forCharRange:undoTransaction:
insertString:atCharIndex:undoTransaction:
replaceCharactersInRange:withStorage:usePasteRules:dolcContext:undoTransaction:
replaceCharactersInRange:withString:undoTransaction:
canBeStoredInAStringValueCell
newSubstorageWithRange:context:flags:
uppercaseWithUndoTransaction:locale:
lowercaseWithUndoTransaction:locale:
capitalizeWithUndoTransaction:locale:
capitalizedString
mergeOriginMovedInfo
mergeOriginsMap
initWithTract:tableUID:preserveFlags:
setTract:
isValidOrSpanning
isFixedAtZeroRef
setAggregateIndexLevel:
setColumnGroupLevel:
setRowGroupLevel:
_tract
_aggregateIndexLevel
_columnGroupLevel
_rowGroupLevel
T@"TSCEUndoTract",&,N,V_tract
T{TSKUIDStruct=QQ},N,V_tableUID
TS,N,V_aggregateIndexLevel
TC,N,V_columnGroupLevel
TC,N,V_rowGroupLevel
initWithCreator:
tsceValue
evaluateWithContext:
newCellValueFromTSCEValue:withLocale:
initWithBaseTableUID:ownerUID:
nowPrecedentForTableUID:
todayPrecedentForTableUID:
randomPrecedentForTableUID:
localePrecedentForTableUID:
anyHeaderNameChangedPrecedentForTableUID:
summaryModelIsCleanPrecedentForTableUID:
summaryModelIsCleanForSortPrecedentForTableUID:
pivotRulesChangedPrecedentForTableUID:
uniqueDistinctPrecedentForTableUID:
setBaseTableUID:
initWithBaseTableUID:
dirtyNowVolatileCells
dirtyNowAndTodayVolatileCells
dirtyRandomVolatileCells
dirtyGeometryVolatileCells
dirtySheetTableNameVolatileCells
initWithArchive:unarchiver:forBaseTableUID:
baseTableUID
_baseTableUID
T{TSKUIDStruct=QQ},N,V_baseTableUID
initWithSecondsTillAbort:
isAborted
_isAborted
TB,R,V_isAborted
p_addApplicationNotification
p_removeApplicationNotification
resolverContainerMatchingName:inDocumentRoot:
resolverMatchingName:inDocumentRoot:contextResolver:
resolverMatchingNameWithContextContainer:inDocumentRoot:contextContainerName:
timeoutInterval
blockingIdentifier
accessController
signalIdentifier:
referencesToDirty
pauseRecalculationForBlock:
localVariablesEnabled
pauseEvaluationForPotentialTermination
confirmTermination
resumeEvaluationIfNotTerminated
isPotentiallyTerminating
generateRandomSeed
randomSeedFromRandomLo:hi:
splitRandomSeed:intoLo:hi:
legacyGlobalIDStringToOwnerUIDMap
documentRandomSeed
setDocumentRandomSeed:
setCurrentDate:
currentTimeZone
setCurrentTimeZone:
setCurrentDate:timeZone:markVolatilesDirty:
shouldAbortRecalculation
setXLImportDateMode:
currentTransaction
previousLocaleIdentifier
clearPreviousLocaleIdentifier
loadFromFileVersion
setLoadFromFileVersion:
tablesByName
tableNameChangeDistributor
currentTableIdRemapper
setCurrentTableIdRemapper:
duringRollback
setDuringRollback:
applicationDidBecomeActive:
applicationWillResignActive:
setAccessController:
changeNotifier
setChangeNotifier:
documentDidLoad
isInCollaborationMode
recalculateWithTimeout:
dirtyCellsForUpgrade
upgradingFormulasMinion
beginUpgradingFormulasMode
scheduleRepairingSpanningFormulasInOwner:
setTableRange:bodyRange:forTableUID:
verifyTableAndBodyRangesForTable:
ownerForOwnerUID:
ownerForUUIDBytes:
allOwnersRegistered
shouldForceRegisterAllTables
allRefResolverOwnerUIDs
enumerateFormulaOwnersUsingBlock:
cellDependMemoryUseEstimate
clearLegacyGlobalIDs
needsSubOwnerIDUpgrade
setNeedsSubOwnerIDUpgrade:
addSubOwnerAliasesForUpgrade:
upgradeToSubOwnerUIDForOwners:
duringSubOwnerUIDUpgrade
resolverForCellRef:
anyResolver
resolverForTableID:
tableResolverForTableID:
tableResolverForRefResolver:
internalFormulaOwnerIDForFormulaOwnerUID:
resolverContainerMatchingName:
resolverMatchingName:contextResolver:
resolverMatchingNameWithContextContainer:contextContainerName:
setOwnerUIDForLegacyGlobalID:ownerUID:
openTransaction
closeTransaction:
updateCalculatedPrecedents:forFormula:atCellRef:withState:
removeFormulasFromRange:
setError:forCell:
clearErrorForCell:
clearErrorForCells:
rootCauseForErrorInCell:atRootCell:
formulaCoordsReferringToRange:fromOwner:
formulaCoordsReferringToRange:fromOwner:skipSpanning:
formulaCoordsInRange:inOwner:
allFormulaCoordsInOwner:
hasFormulaAt:
hasFormulaCellsUsingNowTodayRandom
dirtyCellCountInOwner:
dirtyCellCount
allCellsAreClean
allCellsAreCleanNonBlocking
cellsInACycleInOwner:
cellWillBeModifiedInCurrentRecalcCycle:
referenceWasGuaranteedCleanAtRecalcCycleStart:
rewritingMinion
setRewritingMinion:
extendTableUIDHistoryWithRewrite:
rollbackTableUIDHistoryWithRewriteInfo:
markCellRefsAsDirty:
markCoordsDirty:inOwner:
headerStateOfTableChanged:changedRows:
headerStateOfTableChanged:
dirtyCellsForColumnRange:fromTable:tableRange:
dirtyCellsForRowRange:fromTable:tableRange:
dirtyCellsForRemovalOfColumns:fromTable:tableRange:
dirtyCellsForRemovalOfRows:fromTable:tableRange:
dirtyCellsForInsertionOfColumns:forTable:tableRange:headerRange:
dirtyCellsForInsertionOfRows:forTable:tableRange:headerRange:
dirtyCellsForMergingRange:forTable:headerRowRange:headerColumnRange:
markAllExternalGroupByRefsDirty:
markAllFunctionsAsDirty
markIndirectCallsAsDirty
markOnlyDependentsDirty:
scheduleDetectAndRepairConsistencyViolations
hasDateTimeVolatileFunctions
hasRemoteDataFunctions
markDateTimeVolatileFunctionsAsDirty
markDateTimeVolatileFunctionsAsDirtyForCurrentDateTime
rewriteSpecStack
pushRewriteSpec:
popRewriteSpec:
shouldSendSetNowCommand
markRandomVolatileFunctionsAsDirty
markLocaleVolatileFunctionsAsDirty
markGeometryVolatileFunctionsAsDirtyInOwner:
markRemoteDataVolatileFunctionsAsDirty
markAllVolatileFunctionsAsDirty
markOwnerAsDirty:
cellContainsAFormula:
isCellReferenceDirty:
p_blockUntilRecalcIsCompleteOnNewThreadWithTimeout:
debugFlushAllDirtyReferences
blockUntilRecalcIsCompleteWithTimeout:
beginSuppressingWillModifyCalls
endSuppressingWillModifyCalls
pauseRecalculation
pauseRecalculationSometimeSoon
resumeRecalculation
recalculationIsPaused
resumeRecalculationForBlock:
startRecalculation
isRecalculationStarted
isRecalculationRunning
startRecalcTaskIfNecessary
superWillModify
executeBlockWhileCalculationEngineIsNotWriting:
evaluateSynchedWithCalcEngineWithFormula:evalContext:
hasRunRecalculationALongTime
recalcTimeInSecs
clearRecalculationTimer
assertAt:nonCalcEngineException:evaluatingFormula:
remoteDataStore
setRemoteDataStore:
replaceRemoteDataKeysInterestedIn:forCell:
markRemoteDataVolatileFunctionsAsDirtyForKeys:
beginTrackingNamesInTableForLegacyNRM:
setDisallowHeaderIndexingForTableUID:
clearDisallowHeaderIndexingForTableUID:
hasDisallowedHeaderIndexingForTableUID:
cellHasPrecedents:
precedentsOfCell:
emptyReferenceSet
unorderedCellRefsForCategoryRef:atRowUid:
addCalculationStateObserver:
removeCalculationStateObserver:
addAllFormulasCleanObserver:
removeAllFormulasCleanObserver:
numberOfCellsWithFormulas
numFormulaCellsInOwner:
hasMaxNumFormulas
documentLocaleDidChange
assertDirtyPrecedentsCountConsistency
detectAndRepairDirtyCellsAreOnLeafQueue
allFormulaOwnersAsString
allCellDependenciesAsString
cellDependenciesAsStringForOwner:
allRangeDependenciesAsString
allSpanningDependenciesAsString
verifyAllOwnersAreKnown
cellCoordinatesNeedingExcelImportForTable:
foundConsistencyIssues
shouldDelayArchiving
packageLocator
delayedArchivingPriority
setCppCalcEngine:
_cppCalcEngine
_isUnarchiving
_calculationWillShutDown
T^v,N,V_cppCalcEngine
T@"TSKAccessController",W,N
T@"TSKChangeNotifier",W,N
T@"NSDate",&
T@"NSTimeZone",&
T@"TSULocale",&,V_locale
TQ,N
T@"<TSCEFormulaReplacing>",R,N
T@"TSCETablesByName",R
T@"TSCETablesByNameDistributor",R
T@"TSCETransaction",R
T@"TSCERewritingMinion",&,N
TB,R
T@"TSCERemoteDataStore",R
T@"<TSCERefNamingProtocol>",R,&,N
T@"<TSCERefParsingProtocol>",R,&,N
T@"<TSCEHeaderNameProtocol>",R,&,N
T@"TSCENamedReferenceManager",R,N
T@"TSCERewriteTableUIDInfo",R
T@"<TSKMultiTableRemapping>",&
setMessageType:messagePrototype:descriptor:unarchiveClassname:
initAsCompressionMapForIndexes:
mappedIndexForSourceIndex:
_indexMap
initWithCoordinator:
exceptionWithName:reason:userInfo:
reachabilityCheckHost
p_configureReachabilityWithHost:
distantPast
identifier
offline
setOffline:
setDoFullRefresh:
coordinator
allRequestedKeys
sourceFetcherDidGoOnline:forKeys:
newlyRequestedKeys
queue
p_refreshSpecifiers
sourceFetcherDidGoOffline:forKeys:
networkReachabilityWithHostName:
setServerReachability:
serverReachability
setReachabilityUpdatedBlock:
networkReachabilityForInternetConnection
setInternetReachability:
internetReachability
enableNotifier
internetReachabilityStatusWithQueue:completion:
fetchableKeysFromSet:
setOfSpecifiersNotContainedInSet:
insertSpecifiersFromSet:
resumeUpdating
removeSpecifiersFromSet:
stopUpdating
sendRequestForKeys:
requestsInFlight
setRequestsInFlight:
state
setState:
minimumTimeBetweenRequests
lastRequestDate
lastFullRefreshDate
recommendedTimeBetweenRequests
removeAllSpecifiers
doFullRefresh
containsColdSpecifiers
hotSpecifierSet
setLastFullRefreshDate:
setLastRequestDate:
disableNotifier
earlyRefreshRequested
setEarlyRefreshRequested:
canFetchKey:
insertSpecifier:
enumerateSpecifiersWithBlock:
fetcherWithCoordinator:
addRemoteDataInterest:
removeRemoteDataInterest:
enqueueRequestForKeys:
requestLaunched
requestCompleted
dataKind
recommendedTimeBetweenRequestsForWWAN
fetchQuotesWithTickers:completion:
autoCompleteQuotesWithInput:completion:
timer
setTimer:
_offline
_doFullRefresh
_earlyRefreshRequested
_coordinator
_queue
_allRequestedKeys
_newlyRequestedKeys
_serverReachability
_internetReachability
_timer
_lastRequestDate
_lastFullRefreshDate
_state
_requestsInFlight
T@"TSCERemoteDataSpecifierSet",R,N,V_allRequestedKeys
T@"TSCERemoteDataSpecifierSet",R,N,V_newlyRequestedKeys
T@"TSUNetworkReachability",&,N,V_serverReachability
T@"TSUNetworkReachability",&,N,V_internetReachability
T@"NSObject<OS_dispatch_source>",&,N,V_timer
T@"NSDate",&,N,V_lastRequestDate
T@"NSDate",&,N,V_lastFullRefreshDate
TB,V_offline
TB,V_doFullRefresh
TB,V_earlyRefreshRequested
Tq,V_state
Tq,V_requestsInFlight
T@"TSCERemoteDataCoordinator",R,W,N,V_coordinator
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
Tq,R,N
Td,R,N
initWithContext:dependencyTracker:ownerID:ownerUID:owner:ownerIndex:
setIsRegisteredWithCalcEngine:
isRegisteredWithCalcEngine
setOwnerIndex:
setFormulaOwner:
rangeDependencies
spanningRowDependencies
spanningColumnDependencies
volatileDependencies
ownerIndex
formulaOwnerUid
formulaOwnerId
errors
wholeOwnerDependencies
uuidReferences
addCellRef:forUuid:
affectedRange
columnIndexForColumnUID:
srcRegion
uids
affectedConditionalStyleOwnerUID
mergingRange
groupNodeUIDInfo
tableUIDInfo
expandedRowColumnUuids
pushRangeAndSpanningDependentsWithCounts:fromCoord:cellIsInACycle:
embiggenedCellCoord
setSaveAsEmbiggenedFormat:
setIgnoreAndPreserveUntilModifiedRuleForField:message:
childEnumerator
childEnumeratorForUserSearch
childEnumeratorForUserFlags:
modelPathComponentForChild:
acceptVisitor:
registerWithCalcEngineForDocumentLoad:ownerKind:
unregisterFromCalcEngine:
registerLast
objectToArchiveInDependencyTracker
setWeakReference:message:
willModifyForUpgrade
setDependencyTracker:
setCalcEngineRegistrationObject:
calcEngineRegistrationObject
hasPreUFFVersion
addFinalizeHandler:
resetOwnerUIDForUpgrade:forBaseOwner:ownerKind:
readRepeatedReferenceMessage:class:protocol:completion:
readWeakReferenceMessage:class:protocol:completion:
addCellRefToCheck:
cellRefsToCheck
skipRepairBadRefsForOwnerUID:
isSkippingRepairBadRefsForOwnerUID:
_cellRefsToCheck
_skipRepairBadRefsOwnerUID
initWithNumberValue:locale:
valueType
numberValue
formatFromArchive:
durationUnitLargestWithTimeInterval:
format
encodeToArchive:archivingCustomFormats:
initWithDouble:locale:
initWithDecimal:locale:
displayString
canonicalKeyString
isEqualToCellValue:
compareToCellValue:
initWithArchive:locale:
setPopulatedCustomFormat:
_numberValue
removeCellRef:forUuid:
getCellRefs:referringToUuids:
initFromArchive:dependencyTracker:
tooManyCellRefsFor31FormatArchive
upgradeForOwners:
encodeToArchive:alsoSave31Format:archiver:
_cellRefsByUuid
_uuidsByCellRef
addUseOfFunctions:atCellRef:
functionsUsed
addFunctionUsesInFormula:atCellRef:outContainsVolatileFunction:
dirtyCellsUsingFunction:
_cellRefsUsingFunction
_mutex
T@"TSCECalculationEngine",R,&,N,V_calcEngine
initWithAttributes:
initWithSymbol:
p_populateAttributesFromArray:
setObject:atIndexedSubscript:
attributes
kNilStockAttributeString
valueForAttribute:
localeIdentifier
nativeLocaleIdentifier
groupingSeparator
tsu_stringByRemovingCharactersInSet:
numberFromString:
initWithLocaleIdentifier:
setLocalizedDateFormatFromTemplate:
stringFromDate:
setSymbol:
symbol
setDateFormat:
timeZoneForSecondsFromGMT:
dateFromString:
p_setFormattedAttr:fromArray:
stockWithAttributes:
stockFromArchive:
valueForAttribute:forLocale:
dateString
abbreviatedNumberForAttribute:atLocale:
_symbol
_attributes
T@"TSUSparseArray",R,N,V_attributes
T@"NSString",&,N,V_symbol
coordFromIndex:
setFormulaCoord:
maxKey
hasObjectForKey:
precedentsWithCalcEngine:hostOwnerUID:
initWithSpanningRangeRef:
formulaCoord
indexFromCoord:
foreach:
requiresDocumentVersion:featureIdentifier:
initFromExpandedArchive:
initWithTrackedReferenceTSPObjectDeprecated:
beginTrackingReferenceWithCellRef:calcEngine:
beginTrackingReferenceWithSpanningRef:calcEngine:
_trackedRefsLock
_trackedReferences
_nextEmptyTrackedReferencesIndex
initWithDateValue:locale:
initWithDate:locale:
_dateValue
isEqualToIndexSet:
affectedRangeForRemoveRows
affectedRangeForInsertRows
affectedRangeForMoveRows
enumerateKeysAndObjectsUsingBlock:
dictionaryWithDictionary:
addEntriesFromDictionary:
p_enumerateYearMapsWithBlock:
data
isCold
enumerateSpecifiersAndValuesWithBlock:
hotSpecifiers
allObjects
removeObjectsForKeys:
coldSpecifiers
containsValueForSpecifier:
valueMap
hotSpecifierArray
yearsReferenced
coldSpecifierArrayForYear:
setWithSpecifierArray:
insertSpecifiersFromArray:
valueForSpecifier:
setValue:forSpecifier:
specifierFromArchive:
cellValueWithArchive:locale:
encodeCellValueToArchive:
p_saveMap:toArchive:
valueMapWithSpecifier:value:
initWithData:
removeValueForSpecifier:
addValuesFromMap:
updateWithValuesFromMap:overwriteValues:
removeValuesForSpecifierSet:
removeAllValues
containsValueForAllSpecifiersInSet:
mapForSpecifiersInSet:
mapForSingleSpecifier:
allSpecifiers
setData:
_coldDataByYear
_data
T@"NSMutableDictionary",&,N,V_data
setInt:forKey:
storeMap
setObject:forUncopiedKey:
p_removeRemoteDataInterest:forStore:
sourceFetchers
p_defaultStockList
p_fetcherForDataKind:
cachedQuotes
cachedSpecifiers
updateCachedStocksIntoStore:
setOfSpecifiersContainedInSet:
p_canUpdateStore:
remoteDataDidUpdateValues:quotes:
coldSpecifierSet
p_localeStocks
reverseObjectEnumerator
setByIntersectingWithSet:
containsKey:
intForKey:
p_revalidateOnlineStatus
containsSpecifiersWithSymbol:
containsSpecifiersFromSet:
p_actionMapForKeys:quotes:
setByIntersectingWithSymbolsOfSet:
defaultCenter
calculationEngine
dictionaryWithObjects:forKeys:count:
postNotificationName:object:userInfo:
sharedCoordinator
registerStore:
unregisterStore:
valueForSingleKey:
cachedQuoteForSingleSymbol:
updateKnownCachedStocksInStore:
addRemoteDataInterest:forStore:
removeRemoteDataInterest:forStore:
p_dataSourceFetcherForRemoteData:
isOnlineForDataKind:
sourceFetcherDidUpdate:withValues:quotes:
dataKindStatus
_sourceFetchers
_storeMap
_cachedSpecifiers
_cachedQuotes
_dataKindStatus
T@"NSMutableSet",R,N,V_sourceFetchers
T@"TSUPointerKeyDictionary",R,N,V_storeMap
T@"TSCERemoteDataValueMap",R,N,V_cachedSpecifiers
T@"NSMutableDictionary",R,N,V_cachedQuotes
T@"TSUIntToIntDictionary",R,N,V_dataKindStatus
initWithContextTableResolver:components:
initWithContextResolver:components:
contextTableResolver
setSheetName:
setTableName:
sheetNameUnquoted
setSheetNameUnquoted:
tableNameUnquoted
setTableNameUnquoted:
abortObject
setAbortObject:
filterColons
setFilterColons:
referenceIsComplete
parseAsBaseTableReference
setNamesUsed:
trimNames
initWithContextResolver:
contextResolver
setContextTableResolver:
components
setComponents:
aggregateFunction
setAggregateFunction:
refPathSplitter
setRefPathSplitter:
rest
setRest:
_filterColons
_referenceIsComplete
_parseAsBaseTableReference
_trimNames
_namesUsed
_contextTableResolver
_components
_aggregateFunction
_refPathSplitter
_abortObject
_sheetName
_tableName
_rest
_sheetNameUnquoted
_tableNameUnquoted
_referencesMatchingInputAsPrefix
T^{TSCETableResolver=^^?},N,V_contextTableResolver
T@"<TSCEReferenceResolving>",R,N
T@"NSArray",&,N,V_components
T@"NSString",&,N,V_aggregateFunction
T@"TSCEQuotedRefPathSplitter",&,N,V_refPathSplitter
TB,N,V_filterColons
TB,N,V_referenceIsComplete
T@"TSCEAbortObject",&,N,V_abortObject
TB,N,V_parseAsBaseTableReference
TB,N,V_trimNames
TB,N,V_namesUsed
T@"NSString",&,N,V_sheetName
T@"NSString",&,N,V_tableName
T@"NSString",&,N,V_rest
T@"NSString",&,N,V_sheetNameUnquoted
T@"NSString",&,N,V_tableNameUnquoted
T@"NSMutableArray",&,N,V_referencesMatchingInputAsPrefix
setMessageVersion:
saveAsEmbiggenedFormat
_isRegisteredWithCalcEngine
_saveAsEmbiggenedFormat
_ownerIndex
_formulaOwnerId
_cellDependencies
_rangeDependencies
_spanningColumnDependencies
_spanningRowDependencies
_volatileDependencies
_wholeOwnerDependencies
_errors
_uuidReferences
_formulaOwner
_calcEngineRegistrationObject
_formulaOwnerUid
TS,R,N,V_formulaOwnerId
TS,N,V_ownerIndex
T{TSKUIDStruct=QQ},R,N,V_formulaOwnerUid
T^v,N
T^v,R,N,V_cellDependencies
T^v,R,N,V_rangeDependencies
T^v,R,N,V_spanningColumnDependencies
T^v,R,N,V_spanningRowDependencies
T^v,R,N,V_volatileDependencies
T^v,R,N,V_wholeOwnerDependencies
T^v,R,N,V_errors
T@"TSCEUuidReferences",R,&,N,V_uuidReferences
T@"<TSCEFormulaOwning>",&,N,V_formulaOwner
T@"<TSCECalculationEngineRegistration>",&,N,V_calcEngineRegistrationObject
TB,N,V_saveAsEmbiggenedFormat
TB,N,V_isRegisteredWithCalcEngine
initWithNodeArray:translationFlags:
initWithCreator:argInfo:translationFlags:
formulaResultForFormattedValueWithKnownCycleState:context:isInACycle:outErrorIsDueToCycle:formatAsPercent:
isEqualToFormula:
translationFlags
copyByConvertingColonToColonTract:
isEquivalentToFormula:context:thisContainingCell:thatContainingCell:
hostedDescriptionAtCell:calcEngine:hideUids:
willModifyWasCalled
didModifyWasCalled
astNodeArrayCopy
hasHostCell
copyBySettingHostTableUID:hostColumnUID:hostRowUID:
copyByConvertingColonTractToColon:breakUpIntoRefs:
currentThread
threadDictionary
parseFormula:calcEngine:unqualifiedReferenceTableUID:containingCell:outError:outNeedsImportRewrite:isChartFormula:isSageUpgrade:
parseFormula:calcEngine:containingCell:outError:
formulaObject
T@"TSCEFormulaObject",R,N
initWithCreator:translationFlags:
containsInvalidRef
containsUidReferences
hasBadRefWithUidInfo
appendExternalTableUIDs:groupByUIDs:
usesFunctionsWithDateArgs
hasUidTracts
evaluateWithContext:isInACycle:outErrorIsDueToCycle:
evaluateWithContextGridResult:
isEquivalentToFormula:
getPrecedents:calcEngine:hostCell:doImplicitIntersection:returnUidReferences:
getCategoryReferencesWithCalcEngine:
hostedDescriptionAtCell:calcEngine:
hostedDescriptionAtCell:
sageFormulaStringForContainingCell:outHasSageUnsupportedFunctions:
copyByRewritingForTranspose:calcEngine:containingCell:outTransposeWarning:
copyByRewritingWithSpec:calcEngine:containingCell:
copyByClearingHostCell
copyBySettingTranslationFlags:
copyByRewritingWithContext:rewriteBlock:
iterateWithBlock:stop:block:
copyByRewritingReferencesToUidForm:
copyByRewritingReferencesToGeometricForm:
copyByRepairingBadReferences:
copyByFreezingRefs:containingCell:
copyByThawingRefs:containingCell:
copyByConvertingColonTractToColon:
copyByClearingUids:containingTableUID:
copyByMakingAllCategoryRefsIndirect:containingCell:
copyByRemappingOwnerUIDs:calcEngine:containingCell:outBadRefFound:
copyByRemappingHostCellAgnosticOwnerUIDs:calcEngine:containingCell:outError:
copyByRemappingOwnerUIDs:calcEngine:badRefFound:
copyByForceSettingOwnerUIDs:calcEngine:
copyByRemappingUids:rowMap:ownerMap:clearIfMissing:
copyByUpdatingLinkedTable:outfoundLinkedRef:
copyByRewritingForSageExport:targetDocumentSupportsCrossTableReferences:outshouldBakeWholeFormula:outFeaturesUsed:
copyByRewritingForSageImport:containingCell:
copyByRewritingForExcelImport:outFormulaResult:outDidModifyFormula:outFormulaReplacedForExcelCompatWarning:functionNameReplacedForExcelCompat:formulaFormatFromCell:
copyByRemovingNumberToDateCoercion:outFormulaResult:outDidModifyFormula:
copyByRewritingForExcelExport:
copyByRewritingNumberToDurationForSageImport:durationUnitLargest:
copyByOffsettingRelativeReferences:oldContainingCell:newContainingTable:offset:
copyByOffsettingRelativeReferences:
copyByRewritingGroupUid:groupByUID:
hostColumnUID
hostRowUID
_astNodeArray
_translationFlags
_hash
_hostColumnUID
_hostRowUID
Tr^{TSKUIDStruct=QQ},R,N,V_hostTableUID
Tr^{TSKUIDStruct=QQ},R,N,V_hostColumnUID
Tr^{TSKUIDStruct=QQ},R,N,V_hostRowUID
T{TSCEFormulaTranslationFlags=C},R,N,V_translationFlags
initWithTopLeft:bottomRight:tableUID:
columnUIDsForColumnIndexes:
rowUIDsForRowIndexes:
expandUsingIndexes:forRows:
UIDSetForIndexes:isRows:
initWithTopLeft:bottomRight:
initWithUidTract:calcEngine:tableUID:
mixedColumnStartedWithPreserve
mixedRowStartedWithPreserve
isSingleCell
isPreservedColumn:preferStart:
isPreservedRow:preferStart:
preserveFlagsForCoord:preferStart:
addColumns:
removeColumns:
removeRows:
uidTractWithCalcEngine:hostTableUID:
intersectWithCellRect:
intersectWithCellRectIgnoringSpanning:
coordAtColumnOffset:rowOffset:
setCppCellTractRef:
_cppCellTractRef
T{TSCECellTractRefCore={TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSKUIDStruct=QQ}C{TSUPreserveFlags=C}BBB},N,V_cppCellTractRef
T{TSUPreserveFlags=C},N
isEqualToTimeZone:
boolForKey:
defaultTimeZone
processInfo
processorCount
dateParserLibrary
prepareDateParserInBackground
recalcInProgressUpdate:
allFormulaCellsAreClean
initWithTimeIntervalSinceNow:
performReadAllowingOverlappingImplicitRead:thenWrite:thenReadOnPrimaryThread:
setValue:forKey:
drawableInfo
tableInfo
tableRangeCoordinate
conditionalStyleFormulaOwnerUID
rowUIDsForRowRange:
columnUIDsForColumnRange:
newTableResolverForResolver:
hasWrite
isMainThread
addNestedRewrite:
initWithTimeout:
detachNewThreadSelector:toTarget:withObject:
distantFuture
hasRead
waitOnIdentifier:untilDate:releaseReadWhileWaiting:
initWithContext:calcEngine:
NRM_formulaOwnerUID
documentObject
formattingSymbols
updateTrackedHeadersForDocumentLocaleChange:
pushScopeForField:message:usingBlock:
name
hasArchivableState
fileFormatVersion
setNRM_formulaOwnerUID:
updateTableUIDFrom:toTableUID:
willModifyForUpgradeWithOptions:
tsp_initWithProtobufString:
setName:
setMaxConcurrentOperationCount:
p_initializeQueue
registeredWithCoordinator
setRegisteredWithCoordinator:
p_recursiveWriteWillModify:withBlock:
remoteDataMap
p_tsceValueFromTsceCellValue:
cachedStocks
unSyncedStocks
ownerMap
interestingKeys
predicateWithBlock:
filterUsingPredicate:
tsu_allKeysAsSet
tsu_setBySubtractingSet:
p_isInCollaborationMode
delegate
p_updateCachesWithMap:quotes:overwriteValues:
setRemoteDataSyncKey:
remoteDataDidUpdateValues:quotes:fromStore:syncKey:
addOperationWithBlock:
errorValue
tsu_setByIntersectingSet:
enumerateObjectsUsingBlock:
updateCachedStocksFromKnownStocks:
hasInterestingKeys
allSymbols
setByRemovingSpecifiersFromSet:
registerWithCoordinator
unregisterWithCoordinator
cachedQuoteForSymbol:
addRemoteDataInterest:forOwner:
removeRemoteDataInterest:forOwner:
remoteDataSyncKey
allRemoteData
allQuotes
p_dictionaryForRemoteData:
updateWithRemoteDataMap:quotes:syncKey:
hasFullyPopulatedCache
setDelegate:
updateQueue
tspSemaphore
setHasInterestingKeys:
setUnSyncedStocks:
_hasInterestingKeys
_registeredWithCoordinator
_delegate
_calculationEngine
_updateQueue
_tspSemaphore
_remoteDataMap
_cachedStocks
_interestingKeys
_ownerMap
_remoteDataSyncKey
_unSyncedStocks
T@"NSOperationQueue",R,N,V_updateQueue
T@"NSObject<OS_dispatch_semaphore>",R,N,V_tspSemaphore
T@"TSCERemoteDataCoordinator",R,N
T@"TSCERemoteDataValueMap",R,N,V_remoteDataMap
T@"NSMutableDictionary",R,N,V_cachedStocks
T@"TSCERemoteDataSpecifierSet",R,N,V_interestingKeys
TB,N,V_hasInterestingKeys
T@"NSMutableDictionary",R,N,V_ownerMap
TB,N,V_registeredWithCoordinator
Td,N,V_remoteDataSyncKey
T@"NSMutableSet",&,N,V_unSyncedStocks
T@"<TSCERemoteDataStoreDelegate>",W,N,V_delegate
T@"TSCECalculationEngine",W,N,V_calculationEngine
initWithSpecifiers:
setWithObject:
initWithSpecifierArray:
p_enumerateYearSetsWithBlock:
setWithSet:
isEqualToSet:
p_coldSpecifierCount
hotData
minusSet:
isSubsetOfSet:
setWithArray:
sortDescriptorWithKey:ascending:
arrayWithObjects:count:
sortedArrayUsingDescriptors:
setWithSpecifiers:
initWithIndexSet:
intersectSet:
setOfSpecifiersPassingTest:
hasDateEqualToDate:
p_description:
setWithSpecifier:
removeSpecifier:
removeSpecifiersFromArray:
containsSpecifier:
coldSpecifiersForYear:
sortedArrayOfSpecifiers
setByRemovingSpecifiersWithSymbols:
setOfSpecifiersWithSymbol:
setOfSpecifiersWithDate:
shortDescription
setHotData:
_hotData
T@"NSMutableSet",&,N,V_hotData
setInsertAtUid:
setInsertOppositeUid:
addCoordMapper:
initWithString:
rowIndexForUuid:
columnIndexForUuid:
dstCondStyleOwnerUID
isForDstTable:
srcUidForDstUid:
reverseOriginsMap
finalDstTableUID
viewOrderUids
finalTopRowIndex
loadIndexesForTable:uidResolver:forRemoveRows:shuffleMap:
loadMergeRangesContainingFormulasInTable:calcEngine:
createAuxRowColumnInfoForMove
loadIndexesForTable:uidResolver:
prepareToRewriteWithCalcEngine:
canBeNested
loadIndexesForSrcTable:srcUidResolver:dstTable:dstUidResolver:
amendRewriteWithCalcEngine:
didModifyTable:calcEngine:
unloadIndexes
rewriteTypeUsesAmendRewriteSpec:
initWithRewriteType:
conditionalStylesForUndo
miniDescription
affectedOwnerUIDs
tableRangeForTable:calcEngine:
originalCellRefForUpdatedCellRef:
mergeRangeAtOriginalCellRef:
adjustViewTractRef:calcEngine:containingCellRef:undoTractList:
restoreViewTractRefFromUndoTractList:calcEngine:containingCellRef:
willModifyTable:uidResolver:calcEngine:
nestedRewrites
willModifySrcTable:srcUidResolver:dstTable:dstUidResolver:
didModifySrcTable:dstTable:
didModifyTable:
clearTableIndexes
setIsInverse:
setFromTableUID:
setConditionalStyleOwnerUID:
setGroupByUID:
rewriteSpecBaseToChrome
setRewriteSpecBaseToChrome:
rewriteSpecChromeToBase
setRewriteSpecChromeToBase:
setTransposedInfo:
setRowColumnInfo:
setRegionMovedInfo:
setMergeInfo:
setMergeOriginMovedInfo:
setTableUIDInfo:
setGroupNodeUIDInfo:
setGroupByChange:
setShuffleMap:
formulasForUndo
setFormulasForUndo:
warningSetsForUndo
setWarningSetsForUndo:
setCanBeNested:
coordMapper
setCoordMapper:
srcCoordMapper
setSrcCoordMapper:
_rewriteType
_tableRange
_isInverse
_canBeNested
_willModifyWasCalled
_didModifyWasCalled
_transposedInfo
_rowColumnInfo
_regionMovedInfo
_mergeInfo
_mergeOriginMovedInfo
_shuffleMap
_tableUIDInfo
_groupNodeUIDInfo
_groupByChange
_formulasForUndo
_warningSetsForUndo
_conditionalStylesForUndo
_nestedRewrites
_mergeRangesContainingFormulas
_coordMappersLock
_coordMappersByTableUID
_rewriteSpecBaseToChrome
_rewriteSpecChromeToBase
_coordMapper
_srcCoordMapper
_fromTableUID
TI,R,N,V_rewriteType
T{TSKUIDStruct=QQ},N,V_fromTableUID
T{TSKUIDStruct=QQ},N,V_conditionalStyleOwnerUID
T{TSKUIDStruct=QQ},N,V_groupByUID
TB,N,V_isInverse
T@"TSCEFormulaRewriteSpec",&,N,V_rewriteSpecBaseToChrome
T@"TSCEFormulaRewriteSpec",&,N,V_rewriteSpecChromeToBase
T@"TSCETableTransposedInfo",&,N,V_transposedInfo
T@"TSCEFormulaRewriteInfo_RowColumnInfo",&,N,V_rowColumnInfo
T@"TSCEFormulaRewrite_RegionMovedInfo",&,N,V_regionMovedInfo
T@"TSCEFormulaRewrite_RegionMergedInfo",&,N,V_mergeInfo
T@"TSCEFormulaRewrite_MergeOriginMovedInfo",&,N,V_mergeOriginMovedInfo
T@"TSCERewriteTableUIDInfo",&,N,V_tableUIDInfo
T@"TSCERewriteGroupNodeUIDInfo",&,N,V_groupNodeUIDInfo
T@"TSCEGroupByChange",&,N,V_groupByChange
T@"TSKShuffleMapping",&,N,V_shuffleMap
T@"TSCEFormulasForUndo",&,N,V_formulasForUndo
T@,&,N,V_warningSetsForUndo
TB,R,N,V_willModifyWasCalled
TB,R,N,V_didModifyWasCalled
TB,N,V_canBeNested
T@"TSCECoordMapper",&,N,V_coordMapper
T@"TSCECoordMapper",&,N,V_srcCoordMapper
initWithFunctionIndex:symbol:attribute:year:month:day:
p_timeInterval
specifierByChangingAttributeTo:
isCurrency
invalidAttributeErrorValue
invalidSymbolErrorValue
hashVal
_attribute
_year
_month
_day
_hashVal
TQ,R,N,V_hashVal
TS,R,N,V_functionIndex
T@"NSString",R,N,V_symbol
Tq,R,N,V_attribute
Tq,R,N,V_year
Tq,R,N,V_month
Tq,R,N,V_day
T{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C},R,N
rangeOfString:options:range:locale:
tsce_hasCaseInsensitivePrefix:withLocale:
containerNameForTable:
tableNameForTable:
dropTable:withTableName:withContainerName:
addTable:
anyObject
tableForTableName:containerName:
dropTable:
renameTable:fromName:
anyTableForTableName:
resolverMatchingName:
resolversMatchingPrefix:
resolverNameIsUsed:
_tablesByTableNameByContainerName
_tableNameChangeDistributor
T@"TSCETablesByNameDistributor",R,N,V_tableNameChangeDistributor
initWithErrorValue:locale:
setByAddingObjectsFromArray:
isEqualToNumber:
_errorValue
countForObject:
initByCopyingASTNodeArray:atFormulaCoord:
isEqualToTrackedReference:
replaceContentsWithContentsOfTrackedReference:
getPrecedentsWithCalcEngine:hostOwnerUID:
registerWithCalcEngine:inOwner:
encodeToExpandedArchive:archiver:
_AST
_formulaCoord
T{TSUCellCoord=ISBB},N,V_formulaCoord
null
setValue:atCoord:
hasValueAtCoord:
clearValueAtCoord:
area
valueAtColumn:row:
enumerateValuesUsingBlock:
expandToIncludeCoord:
initWithColumnRange:rowRange:
initWithValueVector:
numberOfPopulatedColumns
numberOfPopulatedRows
populatedColumns
populatedRows
hasValueAtColumn:row:
clearValueAtColumn:row:
setEmptyValueAtCoord:
intersectionWithCellRect:
enumerateValuesForRow:usingBlock:
enumerateValuesForColumn:usingBlock:
_coords
_topLeftCoord
_dimensions
_valueForCoord
T{TSCEGridDimensions=II},R,N
T{TSCEGridCoord=II},R,N
initWithType:groupByUid:
initWithType:groupingColumnChanges:groupByUid:
setPreviousLevel:
setUpdatedLevel:
mapPreviousGroupNodeUid:toUpdatedGroupNodeUid:
stringForGroupByChangeType:
addRemoveOfGroupUid:
previousGroupNodeUidForUpdatedGroupNodeUid:
updatedGroupNodeUidForPreviousGroupNodeUid:
previousRelativeAncestorLevelForUpdatedAncestorCategoryLevel:numLevels:
changeType
setChangeType:
previousLevel
updatedLevel
groupingColumnChanges
previousGroupNodeToUpdated
previousGroupNodeUids
updatedGroupNodeUids
removedGroupNodeUids
updatedGroupNodeToPrevious
_previousGroupNodeUids
_updatedGroupNodeUids
_removedGroupNodeUids
_changeType
_previousLevel
_updatedLevel
_groupingColumnChanges
_previousGroupNodeToUpdated
_updatedGroupNodeToPrevious
T^v,R,N,V_updatedGroupNodeToPrevious
TC,N,V_changeType
TC,N,V_previousLevel
TC,N,V_updatedLevel
T{TSKUIDStruct=QQ},R,N,V_groupByUid
T^v,R,N,V_groupingColumnChanges
T^v,R,N,V_previousGroupNodeToUpdated
T@"TSCEUIDSet",R,N,V_previousGroupNodeUids
T@"TSCEUIDSet",R,N,V_updatedGroupNodeUids
T@"TSCEUIDSet",R,N,V_removedGroupNodeUids
initWithUids:
loadIndexesForTable:isRows:shuffleMap:
bottomRightCellCoord
initWithTableUID:columnUids:rowUids:
_condStyleOwnerUID
T{TSKUIDStruct=QQ},R,N,V_tableUID
T{TSKUIDStruct=QQ},R,N,V_condStyleOwnerUID
T@"TSCEFormulaRewrite_Uids",R,N,V_columnUids
T@"TSCEFormulaRewrite_Uids",R,N,V_rowUids
initWithMergeRegion:mergeSource:
setMergeSource:
_mergeSource
_mergeRegion
Tr^{TSUCellCoord=ISBB},N,V_mergeSource
T@"TSCEFormulaRewrite_RegionInfo",R,N,V_mergeRegion
initWithMergeOriginsMap:reverseMap:
_mergeOriginsMap
_reverseOriginsMap
Tr^v,R,N,V_mergeOriginsMap
Tr^v,R,N,V_reverseOriginsMap
loadIndexesFromRegions
initWithSrcTableUID:srcTract:dstTableUID:destTract:
isForSrcTable:
dstRegion
originalSrcRegion
setOriginalSrcRegion:
setFinalDstTableUID:
srcUidForDstUid
setSpanningRows:
setSpanningColumns:
setFinalTopRowIndex:
_srcRegion
_dstRegion
_originalSrcRegion
_finalDstTableUID
_srcUidForDstUid
_dstUidForSrcUid
_spanningRows
_spanningColumns
_finalTopRowIndex
T@"TSCEFormulaRewrite_RegionInfo",R,N,V_srcRegion
T@"TSCEFormulaRewrite_RegionInfo",R,N,V_dstRegion
T@"TSCEFormulaRewrite_RegionInfo",&,N,V_originalSrcRegion
T{TSKUIDStruct=QQ},N,V_finalDstTableUID
TI,N,V_finalTopRowIndex
T@"TSCEFormulaRewrite_Uids",R,N
Tr^v,R,N,V_srcUidForDstUid
Tr^v,R,N,V_dstUidForSrcUid
TB,N,V_spanningRows
TB,N,V_spanningColumns
setDateAccumulator:
secondsToAdd
setSecondsToAdd:
mixedDurationsAndNumbers
setMixedDurationsAndNumbers:
setFoundANumber:
_dateAccumulator
_secondsToAdd
_numberAccumulator
_mixedDurationsAndNumbers
_foundANumber
T@"NSDate",N,V_dateAccumulator
T^{TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}SB},R,N,V_numberAccumulator
Td,N,V_secondsToAdd
TB,N,V_mixedDurationsAndNumbers
TB,N,V_foundANumber
mapIndex:
removeIndexesInRange:
initWithUids:atIndexes:
_uids
_indexes
_indexesForUids
_uidsForIndexes
_viewOrderUids
Tr^v,R,V_uids
Tr^v,R,V_viewOrderUids
T@"NSIndexSet",R,V_indexes
initWithRange:orderedUuids:offset:
orderedUuids
offset
setOffset:
_range
_orderedUuids
_offset
T{_NSRange=QQ},R,V_range
Tr^v,R,V_orderedUuids
TI,V_offset
reverseMapIndex:
orderedUuidsForRange:inTable:areRows:shuffleMap:
initWithFormulaOwnerUID:uuids:areRows:
offsetForUpdatedRowIndex:isRemoveRows:
initWithTableUID:condStyleOwnerUID:groupByUID:uuids:atIndexes:areRows:
tableRange
coordRangesForInsertRemove
setAuxRowColumnInfo:
useWholeTableForInsertionDependencies
setUseWholeTableForInsertionDependencies:
_rowOrColumnUids
_rowOrColumnUuids
_isRows
_rangeEntries
_auxRowColumnInfo
_expandedRowColumnUuids
_insertAtUid
_insertOppositeUid
_useWholeTableForInsertionDependencies
Tr^{TSKUIDStruct=QQ},R,N,V_tableUID
Tr^{TSKUIDStruct=QQ},R,N,V_conditionalStyleOwnerUID
Tr^{TSKUIDStruct=QQ},R,N,V_groupByUID
TB,R,N,V_isRows
T@"TSCEFormulaRewrite_Uids",R,N,V_rowOrColumnUids
Tr^v,R,N,V_rowOrColumnUuids
T@"NSIndexSet",R,N
T@"TSCEUIDSet",R,N,V_expandedRowColumnUuids
T@"TSCEFormulaRewriteInfo_RowColumnInfo",&,N,V_auxRowColumnInfo
TB,N,V_useWholeTableForInsertionDependencies
T{TSKUIDStruct=QQ},N,V_insertAtUid
T{TSKUIDStruct=QQ},N,V_insertOppositeUid
setStrongReferenceArray:message:
tsce_numericCompare:
sortedArrayUsingSelector:
stringForOwnerID:withLimit:
addEdge:forOwner:
stringForEdgesWithLimit:
_edgesForOwner
cellID
dirtyPrecedentCount
isInCycle
isFormula
stringForDependencyRow
setCellID:
setDirtyPrecedentCount:
precedentsList
setPrecedentsList:
dependentsList
setDependentsList:
_isFormula
_isInCycle
_cellID
_dirtyPrecedentCount
_precedentsList
_dependentsList
T@"TSCEEdgeListPrinter",&,N,V_precedentsList
T@"TSCEEdgeListPrinter",&,N,V_dependentsList
T@"NSString",&,N,V_cellID
TQ,N,V_dirtyPrecedentCount
TB,N,V_isFormula
TB,N,V_isInCycle
setShowCleanCells:
showCleanCells
numDirtyCells
ownerName
stringForOwnerKind:
setOwnerName:
setNumDirtyCells:
dirtyCellDependencyRows
setDirtyCellDependencyRows:
cleanCellDependencyRows
setCleanCellDependencyRows:
_showCleanCells
_ownerName
_numDirtyCells
_dirtyCellDependencyRows
_cleanCellDependencyRows
T@"NSMutableArray",&,N,V_dirtyCellDependencyRows
T@"NSMutableArray",&,N,V_cleanCellDependencyRows
T@"NSString",&,N,V_ownerName
TQ,N,V_numDirtyCells
TB,N,V_showCleanCells
initWithStringValue:locale:
lowercaseStringWithLocale:
initWithString:locale:
_stringValue
hasReceiver:
addReceiver:
indexOfObjectIdenticalTo:
dropAllTargets
addReceiverIfMissing:
removeReceiver:
disconnect
suspendDuringBlock:
_receivers
T@"Protocol",R,N
T@"NSArray",R,N,V_receivers
willModifyWithOptions:
initWithBooleanValue:locale:
customFormatForKey:
keyForCustomFormat:
initWithFormatType:customFormatKey:customFormat:appliedConditionKey:
updateWithCustomFormatList:
setValueType:
_valueType
Tc,N,V_valueType
T@"TSULocale",&,N,V_locale
booleanValue
initWithBoolean:locale:
_booleanValue
_timeoutInterval
_blockingIdentifier
Td,R,V_timeoutInterval
T@"NSString",R,V_blockingIdentifier
_flushFormulasToRemoveWithDepTracker:startTime:timeout:
_flushFormulasToReplaceWithDepTracker:startTime:timeout:
_flushFormulasToResetWithDepTracker:startTime:timeout:
processInBackgroundIfNecessary
waitForAllPrecedentsToLoad
flushFormulaChangesForSeconds:
removeFormulasAt:inOwner:removeOutstandingReplaces:
_removeReplaceMutex
_minion
_formulasToRemove
_formulasToReset
_formulasToReplace
_precedentLoadingQueue
_precedentLoadingGroup
_flushAllInProgress
_runningInBackground
_backgroundProcessingQueue
initWithUTF8String:
@24@0:8^{_NSZone=}16
@16@0:8
@24@0:8^v16
@24@0:8r^v16
v16@0:8
B16@0:8
^v16@0:8
v24@0:8r^{TSCEAnyRef=S{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}C}{TSKUIDStruct=QQ}B@}16
v24@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16
v24@0:8r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16
v24@0:8r^{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}C}16
v24@0:8@16
v24@0:8@?16
@24@0:8@16
@20@0:8c16
B24@0:8@16
@20@0:8i16
@28@0:8s16@20
@32@0:8s16s20@24
@20@0:8C16
v32@0:8^{TSCEWarningReportingContext=BB@}16@24
v24@0:8^{TSCEWarningReportingContext=BB@}16
v32@0:8^{TSCEWarningReportingContext=BB@}16c24c28
@40@0:8@16r^{TSKUIDStruct=QQ}24{TSUCellCoord=ISBB}32
Q16@0:8
v20@0:8B16
@"NSDictionary"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v40@0:8@16r^{TSUCellCoord=ISBB}24r^{TSKUIDStruct=QQ}32
v72@0:8@16r^{TSUCellCoord=ISBB}24r^{TSKUIDStruct=QQ}32{TSCEReplaceFormulaOptions=BBBB{TSKUIDStruct=QQ}@}40
v48@0:8r^{TSUCellCoord=ISBB}16r^{TSKUIDStruct=QQ}24@32r^{TSCEReplaceFormulaOptions=BBBB{TSKUIDStruct=QQ}@}40
v32@0:8r^{TSUCellCoord=ISBB}16r^{TSKUIDStruct=QQ}24
v24@0:8r^v16
v24@0:8r^{TSKUIDStruct=QQ}16
@"TSCECalculationEngine"16@0:8
v40@0:8@"<TSCEFormulaReturning>"16r^{TSUCellCoord=ISBB}24r^{TSKUIDStruct=QQ}32
v72@0:8@"<TSCEFormulaReturning>"16r^{TSUCellCoord=ISBB}24r^{TSKUIDStruct=QQ}32{TSCEReplaceFormulaOptions=BBBB{TSKUIDStruct=QQ}@}40
v48@0:8r^{TSUCellCoord=ISBB}16r^{TSKUIDStruct=QQ}24@"TSCEReferenceSetWrapper"32r^{TSCEReplaceFormulaOptions=BBBB{TSKUIDStruct=QQ}@}40
@"TSCEFormulasToSet"
@56@0:8@16i24i28s32B36i40r^v44S52
@20@0:8S16
B24@0:8s16s20
r^v16@0:8
^v24@0:8Q16
i24@0:8Q16
c24@0:8Q16
q48@0:8@16Q24q32@40
S16@0:8
s16@0:8
i16@0:8
@"NSString"
{vector<TSCEFunctionArgSpec, std::allocator<TSCEFunctionArgSpec>>="__begin_"^{TSCEFunctionArgSpec}"__end_"^{TSCEFunctionArgSpec}"__end_cap_"{__compressed_pair<TSCEFunctionArgSpec *, std::allocator<TSCEFunctionArgSpec>>="__value_"^{TSCEFunctionArgSpec}}}
S24@0:8@16
S20@0:8C16
d20@0:8C16
C20@0:8S16
C24@0:8S16S20
{?=CS}24@0:8@16
B20@0:8S16
{TSUDecimal={?=[2Q]}}32@0:8r^{TSUDecimal={?=[2Q]}}16{?=CS}24{?=CS}28
B32@0:8d16@24
B40@0:8r^{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}16d24@32
d16@0:8
{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}16@0:8
{TSCEInternalCellReference="coordinate"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}"tableID"S"reserved"S}
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"NSDate"
{unordered_map<TSCEInternalCellReference, TSCECountedInternalCellRefSet, std::hash<TSCEInternalCellReference>, std::equal_to<TSCEInternalCellReference>, std::allocator<std::pair<const TSCEInternalCellReference, TSCECountedInternalCellRefSet>>>="__table_"{__hash_table<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, std::__unordered_map_hasher<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, std::hash<TSCEInternalCellReference>, std::equal_to<TSCEInternalCellReference>, true>, std::__unordered_map_equal<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, std::equal_to<TSCEInternalCellReference>, std::hash<TSCEInternalCellReference>, true>, std::allocator<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, std::hash<TSCEInternalCellReference>, std::equal_to<TSCEInternalCellReference>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, TSCECountedInternalCellRefSet>, std::equal_to<TSCEInternalCellReference>, std::hash<TSCEInternalCellReference>, true>>="__value_"f}}}
@52@0:8r^{TSCEGrid=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}16@24i32^{TSCEEvaluationContext=}36B44B48
{TSCETaggedDecimalList="_list"{vector<TSCETaggedDecimal, std::allocator<TSCETaggedDecimal>>="__begin_"^{TSCETaggedDecimal}"__end_"^{TSCETaggedDecimal}"__end_cap_"{__compressed_pair<TSCETaggedDecimal *, std::allocator<TSCETaggedDecimal>>="__value_"^{TSCETaggedDecimal}}}"_startIdx"Q"_size"Q}
@24@0:8r^{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}16
@24@0:8r^{TSKUIDStruct=QQ}16
v40@0:8r^{TSUCellCoord=ISBB}16r^{TSKUIDStruct=QQ}24r^{TSKUIDStruct=QQ}32
v32@0:8r^{TSUCellCoord=ISBB}16@24
v24@0:8r^{TSUCellCoord=ISBB}16
v32@0:8^v16r^{TSKUIDStruct=QQ}24
v32@0:8^v16r^v24
B40@0:8^v16r^{TSKUIDStruct=QQ}24r^v32
@32@0:8r^v16r^{TSKUIDStruct=QQ}24
v32@0:8^v16@24
{TSKUIDStruct=QQ}16@0:8
v32@0:8{TSKUIDStruct=QQ}16
{TSKUIDStruct="_lower"Q"_upper"Q}
{unordered_map<TSKUIDStruct, TSCECellCoordSet, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECellCoordSet>>>="__table_"{__hash_table<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCECellCoordSet>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>="__value_"f}}}
{unordered_map<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>>>="__table_"{__hash_table<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCECellCoordSet>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>="__value_"f}}}
{unordered_map<TSUCellCoord, std::unordered_set<TSCEUuidPair>, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, std::allocator<std::pair<const TSUCellCoord, std::unordered_set<TSCEUuidPair>>>>="__table_"{__hash_table<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, std::__unordered_map_hasher<TSUCellCoord, std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, true>, std::__unordered_map_equal<TSUCellCoord, std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, std::equal_to<TSUCellCoord>, std::hash<TSUCellCoord>, true>, std::allocator<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSUCellCoord, std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSUCellCoord, std::__hash_value_type<TSUCellCoord, std::unordered_set<TSCEUuidPair>>, std::equal_to<TSUCellCoord>, std::hash<TSUCellCoord>, true>>="__value_"f}}}
^v28@0:8@16B24
v32@0:8@16@?24
{TSCENameTrieNode="_children"{unordered_map<unsigned short, TSCENameTrieNode *, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCENameTrieNode *>>>="__table_"{__hash_table<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCENameTrieNode *>, std::hash<unsigned short>, std::equal_to<unsigned short>, true>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCENameTrieNode *>, std::equal_to<unsigned short>, std::hash<unsigned short>, true>, std::allocator<std::__hash_value_type<unsigned short, TSCENameTrieNode *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCENameTrieNode *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCENameTrieNode *>, std::hash<unsigned short>, std::equal_to<unsigned short>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCENameTrieNode *>, std::equal_to<unsigned short>, std::hash<unsigned short>, true>>="__value_"f}}}"_name"@"NSString"}
@"TSULocale"
v20@0:8S16
v24@0:8r^{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}16
v28@0:8r^v16S24
v24@0:8r^{TSCEInternalRangeReference={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}S}16
v40@0:8^v16@24d32
B24@0:8d16
B24@0:8r^{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}16
@"TSCECalculationEngine"
@"TSCECellDirtier"
{TSUIndexSet="_isEmpty"b1"_hasSingleRange"b1"_singleRange"{TSUIndexRange="_begin"q"_end"q}"_multipleRanges"^{?}}
{TSCEInternalCellRefSet="_coordsForOwnerId"{unordered_map<unsigned short, TSCECellCoordSet, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCECellCoordSet>>>="__table_"{__hash_table<std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>, true>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>, true>, std::allocator<std::__hash_value_type<unsigned short, TSCECellCoordSet>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>, true>>="__value_"f}}}}
{TSCECellRefSet="_coordsForOwnerUid"{map<TSKUIDStruct, TSCECellCoordSet, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECellCoordSet>>>="__tree_"{__tree<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>, std::allocator<std::__value_type<TSKUIDStruct, TSCECellCoordSet>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>>="__value_"Q}}}}
{vector<TSCEInternalRangeReference, std::allocator<TSCEInternalRangeReference>>="__begin_"^{TSCEInternalRangeReference}"__end_"^{TSCEInternalRangeReference}"__end_cap_"{__compressed_pair<TSCEInternalRangeReference *, std::allocator<TSCEInternalRangeReference>>="__value_"^{TSCEInternalRangeReference}}}
v52@0:8^v16r^v24r^v32C40B44B48
B36@0:8^v16r^v24B32
@52@0:8{TSKUIDStruct=QQ}16{TSKUIDStruct=QQ}32C48
@36@0:8r^v16r^v24C32
v24@0:8^v16
B24@0:8r^v16
B36@0:8r^v16r^v24B32
C16@0:8
v20@0:8C16
{TSKUIDStructVectorTemplate<TSKUIDStruct>="__begin_"^{TSKUIDStruct}"__end_"^{TSKUIDStruct}"__end_cap_"{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>="__value_"^{TSKUIDStruct}}}
v48@0:8{TSKUIDStruct=QQ}16{TSKUIDStruct=QQ}32
Q40@0:8^{?=Q^@^Q[5Q]}16^@24Q32
v40@0:8r^v16r^v24B32B36
v32@0:8r^v16r^v24
v28@0:8r^v16B24
{TSUPreserveFlags=C}16@0:8
v17@0:8{TSUPreserveFlags=C}16
{TSUPreserveFlags="_flags"C}
@"NSMutableArray"
@68@0:8{TSKUIDStruct=QQ}16{TSKUIDStruct=QQ}32{TSKUIDStruct=QQ}48i64
@24@0:8Q16
^{TSCEASTNodeArray=*QQB}24@0:8Q16
^{TSCERegionNode=Q^{TSCERegionNode}^v}
{vector<TSCEASTNodeArray *, std::allocator<TSCEASTNodeArray *>>="__begin_"^^{TSCEASTNodeArray}"__end_"^^{TSCEASTNodeArray}"__end_cap_"{__compressed_pair<TSCEASTNodeArray **, std::allocator<TSCEASTNodeArray *>>="__value_"^^{TSCEASTNodeArray}}}
v32@0:8r^{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}16@24
B40@0:8^v16r^v24r^{TSKUIDStruct=QQ}32
v32@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24
{unordered_map<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>>>="__table_"{__hash_table<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSKUIDStruct, TSCEInternalCellRefSet>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>="__value_"f}}}
{unordered_map<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>, std::hash<TSCEInternalCellReference>, std::equal_to<TSCEInternalCellReference>, std::allocator<std::pair<const TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>>>="__table_"{__hash_table<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, std::__unordered_map_hasher<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, std::hash<TSCEInternalCellReference>, std::equal_to<TSCEInternalCellReference>, true>, std::__unordered_map_equal<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, std::equal_to<TSCEInternalCellReference>, std::hash<TSCEInternalCellReference>, true>, std::allocator<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, std::hash<TSCEInternalCellReference>, std::equal_to<TSCEInternalCellReference>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStructCoord>>, std::equal_to<TSCEInternalCellReference>, std::hash<TSCEInternalCellReference>, true>>="__value_"f}}}
{TSUModelColumnIndex=S}18@0:8{TSUViewColumnIndex=S}16
{TSUModelRowIndex=I}20@0:8{TSUViewRowIndex=I}16
{TSUModelColumnIndex=S}18@0:8{TSUChromeColumnIndex=S}16
{TSUModelRowIndex=I}20@0:8{TSUChromeRowIndex=I}16
{TSUChromeColumnIndex=S}18@0:8{TSUModelColumnIndex=S}16
{TSUChromeRowIndex=I}20@0:8{TSUModelRowIndex=I}16
{TSUViewColumnIndex=S}18@0:8{TSUModelColumnIndex=S}16
{TSUViewRowIndex=I}20@0:8{TSUModelRowIndex=I}16
{TSUChromeColumnIndex=S}18@0:8{TSUViewColumnIndex=S}16
{TSUChromeRowIndex=I}20@0:8{TSUViewRowIndex=I}16
{TSUViewColumnIndex=S}18@0:8{TSUChromeColumnIndex=S}16
{TSUViewRowIndex=I}20@0:8{TSUChromeRowIndex=I}16
{TSUModelCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUViewCellCoord={TSUCellCoord=ISBB}}16
{TSUModelCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUChromeCellCoord={TSUCellCoord=ISBB}}16
{TSUChromeCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16
{TSUChromeCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUViewCellCoord={TSUCellCoord=ISBB}}16
{TSUViewCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUModelCellCoord={TSUCellCoord=ISBB}}16
{TSUViewCellCoord={TSUCellCoord=ISBB}}24@0:8{TSUChromeCellCoord={TSUCellCoord=ISBB}}16
{RefTypeHolder<TSCECellRef, 0>={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}}24@0:8r^v16
{RefTypeHolder<TSCECellRef, 2>={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}}24@0:8r^v16
{RefTypeHolder<TSCECellRef, 1>={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}}24@0:8r^v16
{RefTypeHolder<TSCERangeRef, 2>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}}24@0:8r^v16
{RefTypeHolder<TSCERangeRef, 1>={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}}24@0:8r^v16
r^{TSKUIDStruct=QQ}16@0:8
@"NSIndexSet"24@0:8@"NSIndexSet"16
@"TSCECellTractRef"24@0:8@"TSCECellTractRef"16
@"TSKShuffleMapping"24@0:8@"TSKShuffleMapping"16
@48@0:8r^{TSKUIDStruct=QQ}16@24@32@40
@40@0:8r^{TSKUIDStruct=QQ}16@24@32
v24@0:8I16I20
v24@0:8S16S20
{unordered_map<unsigned int, unsigned int, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<const unsigned int, unsigned int>>>="__table_"{__hash_table<std::__hash_value_type<unsigned int, unsigned int>, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, unsigned int>, std::hash<unsigned int>, std::equal_to<unsigned int>, true>, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, unsigned int>, std::equal_to<unsigned int>, std::hash<unsigned int>, true>, std::allocator<std::__hash_value_type<unsigned int, unsigned int>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned int>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned int>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned int>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned int>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned int>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned int>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned int, unsigned int>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, unsigned int>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, unsigned int>, std::hash<unsigned int>, std::equal_to<unsigned int>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, unsigned int>, std::equal_to<unsigned int>, std::hash<unsigned int>, true>>="__value_"f}}}
@"NSIndexSet"
{unordered_map<unsigned short, unsigned short, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, unsigned short>>>="__table_"{__hash_table<std::__hash_value_type<unsigned short, unsigned short>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, unsigned short>, std::hash<unsigned short>, std::equal_to<unsigned short>, true>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, unsigned short>, std::equal_to<unsigned short>, std::hash<unsigned short>, true>, std::allocator<std::__hash_value_type<unsigned short, unsigned short>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, unsigned short>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, unsigned short>, std::hash<unsigned short>, std::equal_to<unsigned short>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, unsigned short>, std::equal_to<unsigned short>, std::hash<unsigned short>, true>>="__value_"f}}}
@20@0:8B16
@24@0:8^Q16
@24@0:8B16B20
B24@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16
{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}16@0:8
v32@0:8{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}16
I16@0:8
v20@0:8I16
{TSCERangeCoordinate="_topLeft"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}"_bottomRight"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}}
{TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}16@0:8
@32@0:8r^v16@24
{TSKUIDStructMap="__table_"{__hash_table<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>="__value_"f}}}
@32@0:8r^{TSKUIDStruct=QQ}16r^v24
c16@0:8
c24@0:8^v16
{TSCEGridDimensions=II}16@0:8
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}32@0:8r^{TSCEGridCoord=II}16^{TSCEGridAccessContext=@^{TSCEFunctionArgSpec}i^{TSCEEvaluationContext}BBBBBCC}24
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}32@0:8Q16^{TSCEGridAccessContext=@^{TSCEFunctionArgSpec}i^{TSCEEvaluationContext}BBBBBCC}24
{TSCEGrid=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}24@0:8^{TSCEGridAccessContext=@^{TSCEFunctionArgSpec}i^{TSCEEvaluationContext}BBBBBCC}16
{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}32@0:8Q16^{TSCEGridAccessContext=@^{TSCEFunctionArgSpec}i^{TSCEEvaluationContext}BBBBBCC}24
{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}24@0:8^{TSCEGridAccessContext=@^{TSCEFunctionArgSpec}i^{TSCEEvaluationContext}BBBBBCC}16
B28@0:8i16^v20
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}40@0:8r^{TSCEGridCoord=II}16i24i28^{TSCEGridAccessContext=@^{TSCEFunctionArgSpec}i^{TSCEEvaluationContext}BBBBBCC}32
^{TSCEASTNodeArray=*QQB}40@0:8@16i24B28^v32
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16@0:8
{TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}SB}36@0:8@16i24^v28
@36@0:8@16i24^v28
B36@0:8@16i24^v28
@36@0:8@16i24@28
{TSCEReferenceValue=^^?@{TSUCellCoord=ISBB}{TSUPreserveFlags=C}BB}36@0:8@16i24^v28
c24@0:8^{TSCEEvaluationContext=}16
{vector<TSCEGrid, std::allocator<TSCEGrid>>="__begin_"^{TSCEGrid}"__end_"^{TSCEGrid}"__end_cap_"{__compressed_pair<TSCEGrid *, std::allocator<TSCEGrid>>="__value_"^{TSCEGrid}}}
@28@0:8r^v16c24
@32@0:8r^v16c24B28
@40@0:8r^v16c24B28r^{TSCEGridDimensions=II}32
@"TSCEValueGrid"
@28@0:8r^{TSCEReferenceValue=^^?@{TSUCellCoord=ISBB}{TSUPreserveFlags=C}BB}16C24
@"TSCEEvalRef"
{TSCECellTractRefCore="_columns"{TSUIndexSet="_isEmpty"b1"_hasSingleRange"b1"_singleRange"{TSUIndexRange="_begin"q"_end"q}"_multipleRanges"^{?}}"_rows"{TSUIndexSet="_isEmpty"b1"_hasSingleRange"b1"_singleRange"{TSUIndexRange="_begin"q"_end"q}"_multipleRanges"^{?}}"_tableUID"{TSKUIDStruct="_lower"Q"_upper"Q}"_spanType"C"_preserveFlags"{TSUPreserveFlags="_flags"C}"_preserveRectangular"B"_mixedColumnStartedWithPreserve"B"_mixedRowStartedWithPreserve"B}
@24@0:8q16
@32@0:8q16@24
@36@0:8q16@24i32
@28@0:8@16i24
@32@0:8{TSKUIDStruct=QQ}16
@132@0:8{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16@112i120@124
v132@0:8{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16@112i120@124
v64@0:8{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16@48r^{TSKUIDStruct=QQ}56
v72@0:8{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16@48r^{TSKUIDStruct=QQ}56B64B68
@56@0:8{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16r^{TSKUIDStruct=QQ}48
v40@0:8i16@20d28B36
v52@0:8i16@20d28B36d40B48
v60@0:8@16B24B28@32B40i44i48@52
v36@0:8@16B24@28
v28@0:8@16i24
v56@0:8{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16r^{TSKUIDStruct=QQ}48
v20@0:8i16
v48@0:8{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16
v28@0:8@16c24
v40@0:8@16i24i28B32B36
v32@0:8@16i24i28
v32@0:8@16@24
v56@0:8@16{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}24
v56@0:8{vector<TSCEReferenceValue, std::allocator<TSCEReferenceValue>>=^{TSCEReferenceValue}^{TSCEReferenceValue}{__compressed_pair<TSCEReferenceValue *, std::allocator<TSCEReferenceValue>>=^{TSCEReferenceValue}}}16r^{TSKUIDStruct=QQ}40@48
v28@0:8@16B24
v24@0:8S16s20
v24@0:8c16c20
B32@0:8@16^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}24
@48@0:8@16{TSKUIDStruct=QQ}24{TSUCellCoord=ISBB}40
{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16@0:8
^{TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}SB}36@0:8@16i24^{TSCEWarningReportingContext=BB@}28
@36@0:8@16i24^{TSCEWarningReportingContext=BB@}28
B36@0:8@16i24^{TSCEWarningReportingContext=BB@}28
{TSCEGrid=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}44@0:8@16i24^{TSCEEvaluationContext=}28r^{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}36
^{TSCEReferenceValue=^^?@{TSUCellCoord=ISBB}{TSUPreserveFlags=C}BB}36@0:8@16i24^{TSCEWarningReportingContext=BB@}28
^{TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}SB}16@0:8
^{TSCEGrid=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}16@0:8
^{TSCEReferenceValue=^^?@{TSUCellCoord=ISBB}{TSUPreserveFlags=C}BB}16@0:8
B112@0:8{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16
q16@0:8
v24@0:8q16
@"NSMutableDictionary"
@36@0:8S16S20I24@28
^{TSCECellRecordTile=SI^{TSCECellRecord}QQQ@}16@0:8
^{TSCECellRecordTile=SI^{TSCECellRecord}QQQ@}
q20@0:8i16
@28@0:8d16i24
@64@0:8q16q24q32q40q48q56
@96@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24r^{TSKUIDStruct=QQ}32r^{TSKUIDStruct=QQ}40r^{TSKUIDStruct=QQ}48r^{TSKUIDStruct=QQ}56r^{TSKUIDStruct=QQ}64r^{TSKUIDStruct=QQ}72r^{TSKUIDStruct=QQ}80r^{TSKUIDStruct=QQ}88
{UUIDData<TSP::UUIDData>=""(?="_uuid"[16C]"_cfuuid"{?="byte0"C"byte1"C"byte2"C"byte3"C"byte4"C"byte5"C"byte6"C"byte7"C"byte8"C"byte9"C"byte10"C"byte11"C"byte12"C"byte13"C"byte14"C"byte15"C}""{?="_lower"Q"_upper"Q})}
v24@0:8^{TSCEASTNodeArray=*QQB}16
@36@0:8^{TSCEASTNodeArray=*QQB}16@24B32
^{TSCEASTNodeArray=*QQB}24@0:8^{TSCEParser=@^{TSCELexer}^{TSCEASTNodeArray}^v@{TSKUIDStruct=QQ}{TSUCellCoord=ISBB}BB}16
^{TSCEASTNodeArray=*QQB}40@0:8^{TSCEParser=@^{TSCELexer}^{TSCEASTNodeArray}^v@{TSKUIDStruct=QQ}{TSUCellCoord=ISBB}BB}16@24@32
@128@0:8{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16@112^v120
i24@0:8@16
B120@0:8{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16^v112
{TSCENumberValue="_vptr$TSCEAbstractValue"^^?"_decimal"{TSUDecimal="_decimal"{?="w"[2Q]}}"_format"{TSCEFormat="_tskFormat"@"TSKFormat""_formatType"I"_formatState"C"_durationFormat"{TSCEDurationFormat="useAutomaticUnits"b1"durationUnitSmallest"b5"durationUnitLargest"b5"durationStyle"b2}"_baseFormat"{TSCEBaseFormat="base"C"basePlaces"C"baseUseMinusSign"B}"_fractionFormat"{TSCEFractionFormat="fractionAccuracy"c}"_numberFormat"{TSCENumberFormat="decimalPlaces"C"negativeStyle"b3"showThousandsSeparator"b1"useAccountingStyle"b1"currencyCodeIndex"S}}"_baseUnit"S"_isUnitlessZero"B}
@"TSCERegexMatcher"
@112@0:8{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16
{TSCEValue=""(?="DONT_USE_fakeTSCENumberValueStandIn"{?="_decimal"{?="w"[2Q]}"_formatFake"[24C]"_baseUnit"S"_isUnitlessZero"B}"_buff"[9Q])"_type"C}
{unordered_set<TSUCellCoord, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, std::allocator<TSUCellCoord>>={__hash_table<TSUCellCoord, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, std::allocator<TSUCellCoord>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSUCellCoord, void *> *>, std::allocator<std::__hash_node<TSUCellCoord, void *>>>={__hash_node_base<std::__hash_node<TSUCellCoord, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSUCellCoord>>=Q}{__compressed_pair<float, std::equal_to<TSUCellCoord>>=f}}}16@0:8
v24@0:8{TSUCellCoord=ISBB}16
{vector<TSUCellCoord, std::allocator<TSUCellCoord>>="__begin_"^{TSUCellCoord}"__end_"^{TSUCellCoord}"__end_cap_"{__compressed_pair<TSUCellCoord *, std::allocator<TSUCellCoord>>="__value_"^{TSUCellCoord}}}
@"NSObject<OS_dispatch_semaphore>"
v32@0:8@16r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}24
{unordered_map<TSCECellRef, TSCEFormulaObject *, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, std::allocator<std::pair<const TSCECellRef, TSCEFormulaObject *>>>="__table_"{__hash_table<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, std::__unordered_map_hasher<TSCECellRef, std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, true>, std::__unordered_map_equal<TSCECellRef, std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, std::equal_to<TSCECellRef>, std::hash<TSCECellRef>, true>, std::allocator<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCECellRef, std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCECellRef, std::__hash_value_type<TSCECellRef, TSCEFormulaObject *>, std::equal_to<TSCECellRef>, std::hash<TSCECellRef>, true>>="__value_"f}}}
{unordered_set<TSCECellRef, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, std::allocator<TSCECellRef>>="__table_"{__hash_table<TSCECellRef, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, std::allocator<TSCECellRef>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<TSCECellRef, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCECellRef, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCECellRef, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCECellRef, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCECellRef, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCECellRef, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCECellRef, void *> *>, std::allocator<std::__hash_node<TSCECellRef, void *>>>="__value_"{__hash_node_base<std::__hash_node<TSCECellRef, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::hash<TSCECellRef>>="__value_"Q}"__p3_"{__compressed_pair<float, std::equal_to<TSCECellRef>>="__value_"f}}}
{unordered_set<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>>="__table_"{__hash_table<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *>, std::allocator<std::__hash_node<TSKUIDStruct, void *>>>="__value_"{__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::hash<TSKUIDStruct>>="__value_"Q}"__p3_"{__compressed_pair<float, std::equal_to<TSKUIDStruct>>="__value_"f}}}
v36@0:8@16r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}24S32
{unordered_set<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>>={__hash_table<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *>, std::allocator<std::__hash_node<TSKUIDStruct, void *>>>={__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSKUIDStruct>>=Q}{__compressed_pair<float, std::equal_to<TSKUIDStruct>>=f}}}20@0:8S16
{vector<TSCESubFormulaOwnerIndex, std::allocator<TSCESubFormulaOwnerIndex>>=^S^S{__compressed_pair<TSCESubFormulaOwnerIndex *, std::allocator<TSCESubFormulaOwnerIndex>>=^S}}16@0:8
Q20@0:8S16
v28@0:8S16@?20
@24@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16
{unordered_map<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *, std::hash<TSCESubFormulaOwnerIndex>, std::equal_to<TSCESubFormulaOwnerIndex>, std::allocator<std::pair<const TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>>>="__table_"{__hash_table<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, std::__unordered_map_hasher<TSCESubFormulaOwnerIndex, std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, std::hash<TSCESubFormulaOwnerIndex>, std::equal_to<TSCESubFormulaOwnerIndex>, true>, std::__unordered_map_equal<TSCESubFormulaOwnerIndex, std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, std::equal_to<TSCESubFormulaOwnerIndex>, std::hash<TSCESubFormulaOwnerIndex>, true>, std::allocator<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCESubFormulaOwnerIndex, std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, std::hash<TSCESubFormulaOwnerIndex>, std::equal_to<TSCESubFormulaOwnerIndex>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCESubFormulaOwnerIndex, std::__hash_value_type<TSCESubFormulaOwnerIndex, TSCEFormulasForUndoForOwnerKind *>, std::equal_to<TSCESubFormulaOwnerIndex>, std::hash<TSCESubFormulaOwnerIndex>, true>>="__value_"f}}}
{unordered_map<TSCECellRef, NSString *, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, std::allocator<std::pair<const TSCECellRef, NSString *>>>="__table_"{__hash_table<std::__hash_value_type<TSCECellRef, NSString *>, std::__unordered_map_hasher<TSCECellRef, std::__hash_value_type<TSCECellRef, NSString *>, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, true>, std::__unordered_map_equal<TSCECellRef, std::__hash_value_type<TSCECellRef, NSString *>, std::equal_to<TSCECellRef>, std::hash<TSCECellRef>, true>, std::allocator<std::__hash_value_type<TSCECellRef, NSString *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, NSString *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, NSString *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, NSString *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, NSString *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, NSString *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, NSString *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, NSString *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCECellRef, NSString *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, NSString *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCECellRef, std::__hash_value_type<TSCECellRef, NSString *>, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCECellRef, std::__hash_value_type<TSCECellRef, NSString *>, std::equal_to<TSCECellRef>, std::hash<TSCECellRef>, true>>="__value_"f}}}
@32@0:8@16B24B28
@28@0:8@16B24
{_NSRange=QQ}24@0:8@16
{_NSRange=QQ}32@0:8@16q24
{_NSRange=QQ}40@0:8@16q24o^q32
{_NSRange=QQ}48@0:8@16Q24{_NSRange=QQ}32
@48@0:8@16Q24{_NSRange=QQ}32
Q48@0:8@16Q24{_NSRange=QQ}32
@56@0:8@16Q24{_NSRange=QQ}32@48
@"NSRegularExpression"
v32@0:8@16r^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}24
v24@0:8Q16
{vector<NSString *, std::allocator<NSString *>>="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<NSString *__strong *, std::allocator<NSString *>>="__value_"^@}}
{vector<TSCEValue, std::allocator<TSCEValue>>="__begin_"^{TSCEValue}"__end_"^{TSCEValue}"__end_cap_"{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>="__value_"^{TSCEValue}}}
{vector<bool, std::allocator<bool>>="__begin_"^Q"__size_"Q"__cap_alloc_"{__compressed_pair<unsigned long, std::allocator<unsigned long>>="__value_"Q}}
@40@0:8{TSUCellCoord=ISBB}16{TSKUIDStruct=QQ}24
@32@0:8{TSUCellCoord=ISBB}16@24
{TSUCellCoord=ISBB}16@0:8
{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16@0:8
{TSCECellRef="coordinate"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}"_tableUID"{TSKUIDStruct="_lower"Q"_upper"Q}}
@24@0:8r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16
@48@0:8{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}16{TSKUIDStruct=QQ}32
@40@0:8{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}16@32
@40@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16@32
{TSCERangeRef="range"{TSCERangeCoordinate="_topLeft"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}"_bottomRight"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}}"_tableUID"{TSKUIDStruct="_lower"Q"_upper"Q}}
@32@0:8r^{TSKUIDStruct=QQ}16r^{TSUPreserveFlags=C}24
@32@0:8@16r^{TSUCellCoord=ISBB}24
@32@0:8r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16r^{TSUCellCoord=ISBB}24
v24@0:8r^{TSUIndexRange=qq}16
r^{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}16@0:8
v24@0:8r^{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}16
v20@0:8s16
{TSCERelativeCellCoordinate=isBB}16@0:8
{?={TSCERelativeCellCoordinate=isBB}{TSCERelativeCellCoordinate=isBB}}24@0:8r^{TSUCellCoord=ISBB}16
v40@0:8@16r^{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}24r^{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}32
@32@0:8r^{TSUCellCoord=ISBB}16^B24
@24@0:8r^{TSUCellCoord=ISBB}16
v24@0:8r^{TSUColumnRowOffset=ii}16
@"TSCECellTractRef"
{vector<TSU::UUIDData<TSP::UUIDData>, std::allocator<TSU::UUIDData<TSP::UUIDData>>>=^v^v{__compressed_pair<TSU::UUIDData<TSP::UUIDData> *, std::allocator<TSU::UUIDData<TSP::UUIDData>>>=^v}}16@0:8
B32@0:8{TSKUIDStruct=QQ}16
@28@0:8S16@20
v32@0:8r^{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16r^{TSUCellCoord=ISBB}24
B24@0:8r^{TSUCellCoord=ISBB}16
B32@0:8r^{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16r^{TSUCellCoord=ISBB}24
v32@0:8r^{TSUCellCoord=ISBB}16@?24
{map<TSUCellCoord, std::set<TSUCellRect>, std::less<TSUCellCoord>, std::allocator<std::pair<const TSUCellCoord, std::set<TSUCellRect>>>>="__tree_"{__tree<std::__value_type<TSUCellCoord, std::set<TSUCellRect>>, std::__map_value_compare<TSUCellCoord, std::__value_type<TSUCellCoord, std::set<TSUCellRect>>, std::less<TSUCellCoord>, true>, std::allocator<std::__value_type<TSUCellCoord, std::set<TSUCellRect>>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<TSUCellCoord, std::set<TSUCellRect>>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<TSUCellCoord, std::__value_type<TSUCellCoord, std::set<TSUCellRect>>, std::less<TSUCellCoord>, true>>="__value_"Q}}}
{TSCEFunctionArgSpec=ciCi{unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={__hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>>={__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSCEArgumentType>>=Q}{__compressed_pair<float, std::equal_to<TSCEArgumentType>>=f}}}{vector<TSCEValue, std::allocator<TSCEValue>>=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>=^{TSCEValue}}}s@ddsBBBBBBB}28@0:8c16i20C24
{TSCEFunctionArgSpec=ciCi{unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={__hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>>={__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSCEArgumentType>>=Q}{__compressed_pair<float, std::equal_to<TSCEArgumentType>>=f}}}{vector<TSCEValue, std::allocator<TSCEValue>>=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>=^{TSCEValue}}}s@ddsBBBBBBB}32@0:8c16i20C24i28
{TSCEFunctionArgSpec=ciCi{unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={__hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>>={__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSCEArgumentType>>=Q}{__compressed_pair<float, std::equal_to<TSCEArgumentType>>=f}}}{vector<TSCEValue, std::allocator<TSCEValue>>=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>=^{TSCEValue}}}s@ddsBBBBBBB}44@0:8c16i20C24r^v28B36B40
{TSCEFunctionArgSpec=ciCi{unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={__hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>>={__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSCEArgumentType>>=Q}{__compressed_pair<float, std::equal_to<TSCEArgumentType>>=f}}}{vector<TSCEValue, std::allocator<TSCEValue>>=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>=^{TSCEValue}}}s@ddsBBBBBBB}40@0:8c16i20C24r^v28s36
{TSCEFunctionArgSpec=ciCi{unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={__hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>>={__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSCEArgumentType>>=Q}{__compressed_pair<float, std::equal_to<TSCEArgumentType>>=f}}}{vector<TSCEValue, std::allocator<TSCEValue>>=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>=^{TSCEValue}}}s@ddsBBBBBBB}44@0:8c16i20C24i28r^v32B40
{TSCEFunctionArgSpec=ciCi{unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={__hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>>={__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSCEArgumentType>>=Q}{__compressed_pair<float, std::equal_to<TSCEArgumentType>>=f}}}{vector<TSCEValue, std::allocator<TSCEValue>>=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>=^{TSCEValue}}}s@ddsBBBBBBB}68@0:8c16i20C24d28B36d40B48r^v52B60B64
{TSCEFunctionArgSpec=ciCi{unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={__hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>>={__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSCEArgumentType>>=Q}{__compressed_pair<float, std::equal_to<TSCEArgumentType>>=f}}}{vector<TSCEValue, std::allocator<TSCEValue>>=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>=^{TSCEValue}}}s@ddsBBBBBBB}96@0:8c16i20C24i28d32B40d44B52B56r^v60B68B72r^v76s84B88B92
{TSCEFunctionArgSpec="_argumentType"c"_accessorMode"i"_rangeContext"C"_argumentContext"i"_disallowedTypes"{unordered_set<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>="__table_"{__hash_table<TSCEArgumentType, std::hash<TSCEArgumentType>, std::equal_to<TSCEArgumentType>, std::allocator<TSCEArgumentType>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>, std::allocator<std::__hash_node<TSCEArgumentType, void *>>>="__value_"{__hash_node_base<std::__hash_node<TSCEArgumentType, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::hash<TSCEArgumentType>>="__value_"Q}"__p3_"{__compressed_pair<float, std::equal_to<TSCEArgumentType>>="__value_"f}}}"_modeValues"{vector<TSCEValue, std::allocator<TSCEValue>>="__begin_"^{TSCEValue}"__end_"^{TSCEValue}"__end_cap_"{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>="__value_"^{TSCEValue}}}"_defaultModeIndex"s"_functionSpec"@"TSCEFunctionSpec""_minValue"d"_maxValue"d"_index"s"_minInclusive"B"_maxInclusive"B"_disallowDuration"B"_disallowCurrency"B"_isInteger"B"_forceArrayMode"B"_referenceForGeometryOnly"B}
{TSKUIDStruct=QQ}20@0:8i16
i24@0:8r^{TSKUIDStruct=QQ}16
B24@0:8r^{TSKUIDStruct=QQ}16
@76@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24r^{TSKUIDStruct=QQ}32r^{TSKUIDStruct=QQ}40C48C52S56r^{TSUPreserveFlags=C}60s68C72
@68@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24r^{TSKUIDStruct=QQ}32r^{TSKUIDStruct=QQ}40C48C52S56r^{TSUPreserveFlags=C}60
@52@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24r^{TSKUIDStruct=QQ}32C40C44S48
@48@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24r^{TSKUIDStruct=QQ}32C40C44
v40@0:8@16{TSKUIDStruct=QQ}24
v48@0:8@16@24{TSKUIDStruct=QQ}32
v40@0:8@"NSString"16{TSKUIDStruct=QQ}24
v48@0:8@"NSString"16@"NSString"24{TSKUIDStruct=QQ}32
@40@0:8@16@24^i32
@48@0:8^{TSCETableResolver=^^?}16r^{TSUCellCoord=ISBB}24r^{TSUCellCoord=ISBB}32r^{TSUPreserveFlags=C}40
@32@0:8^{TSCETableResolver=^^?}16r^{TSCECellTractRefCore={TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSKUIDStruct=QQ}C{TSUPreserveFlags=C}BBB}24
@56@0:8^v16r^{TSKUIDStruct=QQ}24r^{TSUCellCoord=ISBB}32r^{TSUCellCoord=ISBB}40r^{TSUPreserveFlags=C}48
^{TSCETableResolver=^^?}16@0:8
r^{TSCECellTractRefCore={TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSKUIDStruct=QQ}C{TSUPreserveFlags=C}BBB}16@0:8
@32@0:8r^{TSCEGridCoord=II}16r^{TSCECellTractRefCore={TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSKUIDStruct=QQ}C{TSUPreserveFlags=C}BBB}24
{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}24@0:8{TSUCellCoord=ISBB}16
C20@0:8B16
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}32@0:8^v16B24B28
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}32@0:8r^{TSUCellCoord=ISBB}16B24B28
{shared_ptr<TSCEValue>=^{TSCEValue}^{__shared_weak_count}}16@0:8
v32@0:8{shared_ptr<TSCEValue>=^{TSCEValue}^{__shared_weak_count}}16
^{TSCETableResolver=^^?}
{shared_ptr<TSCEValue>="__ptr_"^{TSCEValue}"__cntrl_"^{__shared_weak_count}}
{TSCERecalculationState=C}33@0:8{TSUCellCoord=ISBB}16@24{TSCERecalculationState=C}32
{TSCERecalculationState=C}33@0:8r^v16@24{TSCERecalculationState=C}32
@"<TSCEReferenceResolving>"16@0:8
v24@0:8@"TSCECalculationEngine"16
{TSCERecalculationState=C}33@0:8{TSUCellCoord=ISBB}16@"TSCECalculationEngine"24{TSCERecalculationState=C}32
{TSCERecalculationState=C}33@0:8r^v16@"TSCECalculationEngine"24{TSCERecalculationState=C}32
@32@0:8@16@24
@40@0:8r^{TSKUIDStruct=QQ}16{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}24
v48@0:8{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}16r^{TSKUIDStruct=QQ}32@40
v40@0:8{TSUCellCoord=ISBB}16r^{TSKUIDStruct=QQ}24@32
@24@0:8{TSUCellCoord=ISBB}16
@"TSCETrackedReferenceStore"
@28@0:8Q16B24
B32@0:8@16@24
{TSCEAnyRef=S{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}C}{TSKUIDStruct=QQ}B@}16@0:8
@32@0:8@16r^{TSKUIDStruct=QQ}24
@45@0:8@16r^{TSKUIDStruct=QQ}24{TSUPreserveFlags=C}32@33B41
@45@0:8@16@24{TSUPreserveFlags=C}32@33B41
{TSCEAnyRef="_refType"S"_spanningRef"{TSCESpanningRangeRef="rangeRef"{TSCERangeRef="range"{TSCERangeCoordinate="_topLeft"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}"_bottomRight"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}}"_tableUID"{TSKUIDStruct="_lower"Q"_upper"Q}}"rangeContext"C}"_uuidValue"{TSKUIDStruct="_lower"Q"_upper"Q}"_couldBeIntersection"B"_refSet"@"TSCEReferenceSetWrapper"}
@32@0:8Q16@24
@40@0:8@16@24Q32
@48@0:8Q16@24@32Q40
v72@0:8@16^q24^q32^q40^q48^q56^q64
v48@0:8@16^q24^q32^q40
@"NSCalendar"
^{TSCEASTNodeArray=*QQB}16@0:8
{?=b48}16@0:8
^{TSCEASTNodeArray=*QQB}
{?="formulaID"b48}
@45@0:8@16r^{TSKUIDStruct=QQ}24{TSUPreserveFlags=C}32C33C37S41
@33@0:8@16r^{TSKUIDStruct=QQ}24{TSUPreserveFlags=C}32
@"TSCEUndoTract"
{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}24@0:8r^{TSKUIDStruct=QQ}16
@32@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24
@40@0:8r^v16@24r^{TSKUIDStruct=QQ}32
Q24@0:8i16i20
v40@0:8Q16^i24^i32
v36@0:8@16@24B32
v24@0:8d16
v56@0:8{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}16{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}32r^{TSKUIDStruct=QQ}48
i40@0:8{TSKUIDStruct=QQ}16@32
i68@0:8{TSKUIDStruct=QQ}16@32@40{TSKUIDStruct=QQ}48S64
S32@0:8{TSKUIDStruct=QQ}16
S20@0:8S16
@24@0:8[16C]16
^{TSCETableResolver=^^?}24@0:8r^{TSKUIDStruct=QQ}16
^{TSCETableResolver=^^?}20@0:8S16
^{TSCETableResolver=^^?}24@0:8@16
{TSKUIDStruct=QQ}20@0:8S16
{TSKUIDStruct=QQ}28@0:8@16B24
v32@0:8@16r^{TSKUIDStruct=QQ}24
{TSKUIDStruct=QQ}40@0:8{TSKUIDStruct=QQ}16I32B36
v48@0:8@16{TSUCellCoord=ISBB}24{TSKUIDStruct=QQ}32
{TSCERecalculationState=C}41@0:8^v16@24r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32{TSCERecalculationState=C}40
{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16^B24
{vector<TSUCellCoord, std::allocator<TSUCellCoord>>=^{TSUCellCoord}^{TSUCellCoord}{__compressed_pair<TSUCellCoord *, std::allocator<TSUCellCoord>>=^{TSUCellCoord}}}32@0:8r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16r^{TSKUIDStruct=QQ}24
{vector<TSUCellCoord, std::allocator<TSUCellCoord>>=^{TSUCellCoord}^{TSUCellCoord}{__compressed_pair<TSUCellCoord *, std::allocator<TSUCellCoord>>=^{TSUCellCoord}}}36@0:8r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16r^{TSKUIDStruct=QQ}24B32
{vector<TSUCellCoord, std::allocator<TSUCellCoord>>=^{TSUCellCoord}^{TSUCellCoord}{__compressed_pair<TSUCellCoord *, std::allocator<TSUCellCoord>>=^{TSUCellCoord}}}32@0:8r^{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}16r^{TSKUIDStruct=QQ}24
{TSCECellCoordSet={map<unsigned short, TSUIndexSet, std::less<unsigned short>, std::allocator<std::pair<const unsigned short, TSUIndexSet>>>={__tree<std::__value_type<unsigned short, TSUIndexSet>, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>, true>, std::allocator<std::__value_type<unsigned short, TSUIndexSet>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned short, TSUIndexSet>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<unsigned short, std::__value_type<unsigned short, TSUIndexSet>, std::less<unsigned short>, true>>=Q}}}}24@0:8r^{TSKUIDStruct=QQ}16
Q24@0:8r^{TSKUIDStruct=QQ}16
B24@0:8r^{TSCEAnyRef=S{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}C}{TSKUIDStruct=QQ}B@}16
{TSKUIDStruct=QQ}24@0:8r^{TSKUIDStruct=QQ}16
v32@0:8r^v16r^{TSKUIDStruct=QQ}24
v36@0:8{TSKUIDStruct=QQ}16B32
v56@0:8{_NSRange=QQ}16r^{TSKUIDStruct=QQ}32{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}40
v72@0:8{_NSRange=QQ}16r^{TSKUIDStruct=QQ}32{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}40{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}56
v72@0:8{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}16r^{TSKUIDStruct=QQ}32{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}40{TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}56
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}32@0:8@16^v24
v40@0:8@16@24@32
{TSCEInternalCellRefSet={unordered_map<unsigned short, TSCECellCoordSet, std::hash<unsigned short>, std::equal_to<unsigned short>, std::allocator<std::pair<const unsigned short, TSCECellCoordSet>>>={__hash_table<std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>, true>, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>, true>, std::allocator<std::__hash_value_type<unsigned short, TSCECellCoordSet>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned short, TSCECellCoordSet>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::hash<unsigned short>, std::equal_to<unsigned short>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<unsigned short, std::__hash_value_type<unsigned short, TSCECellCoordSet>, std::equal_to<unsigned short>, std::hash<unsigned short>, true>>=f}}}}16@0:8
B24@0:8r^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16
{TSCEReferenceSet=^^?^{TSCEDependencyTracker}{unordered_map<TSKUIDStruct, std::unordered_set<TSUCellCoord>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSUCellCoord>>>>={__hash_table<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>=f}}}{map<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>>={__tree<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::less<TSKUIDStruct>, true>, std::allocator<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::less<TSKUIDStruct>, true>>=Q}}}^v^v^v^v^v@^v}24@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16
{TSCECellRefSet={map<TSKUIDStruct, TSCECellCoordSet, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECellCoordSet>>>={__tree<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>, std::allocator<std::__value_type<TSKUIDStruct, TSCECellCoordSet>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>>=Q}}}}24@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16
{TSCEReferenceSet=^^?^{TSCEDependencyTracker}{unordered_map<TSKUIDStruct, std::unordered_set<TSUCellCoord>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSUCellCoord>>>>={__hash_table<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>>>={unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *>>>={__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, void *> *>=^v}}{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>=Q}{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_set<TSUCellCoord>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>=f}}}{map<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>>={__tree<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::less<TSKUIDStruct>, true>, std::allocator<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, std::unordered_set<TSCERangeCoordinate>>, std::less<TSKUIDStruct>, true>>=Q}}}^v^v^v^v^v@^v}16@0:8
C24@0:8@16
{vector<TSCECellRef, std::allocator<TSCECellRef>>=^{TSCECellRef}^{TSCECellRef}{__compressed_pair<TSCECellRef *, std::allocator<TSCECellRef>>=^{TSCECellRef}}}32@0:8@16r^{TSKUIDStruct=QQ}24
{vector<TSCECategoryRef *, std::allocator<TSCECategoryRef *>>=^@^@{__compressed_pair<TSCECategoryRef *__strong *, std::allocator<TSCECategoryRef *>>=^@}}24@0:8@16
{vector<TSCEValue, std::allocator<TSCEValue>>=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>=^{TSCEValue}}}44@0:8@16r^{TSKUIDStruct=QQ}24C32^@36
@44@0:8@16r^{TSKUIDStruct=QQ}24C32^@36
{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}24@0:8@16
I20@0:8I16
@"TSCERemoteDataCoordinator"
@"NSObject<OS_dispatch_queue>"
@"TSCERemoteDataSpecifierSet"
@"TSUNetworkReachability"
@"NSObject<OS_dispatch_source>"
@"NSEnumerator"16@0:8
@"NSEnumerator"24@0:8Q16
@"NSString"24@0:8@"<TSKModel>"16
v24@0:8@"<TSKModelVisitor>"16
v28@0:8@16S24
v28@0:8@"TSCECalculationEngine"16S24
@"TSPObject<TSCECalculationEngineRegistration>"16@0:8
@"<TSCEFormulaOwning>"16@0:8
@32@0:8d16@24
@32@0:8r^{TSUDecimal={?=[2Q]}}16@24
@32@0:8^{TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}SB}16@24
q24@0:8@16
^{TSCENumberValue=^^?{TSUDecimal={?=[2Q]}}{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}SB}
v32@0:8r^{TSCEInternalCellReference={TSUCellCoord=ISBB}SS}16r^{TSKUIDStruct=QQ}24
@32@0:8r^v16^v24
v36@0:8^v16B24@28
{unordered_map<TSKUIDStruct, TSCEInternalCellRefSet, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCEInternalCellRefSet>>>="__table_"{__hash_table<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCEInternalCellRefSet>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>="__value_"f}}}
{unordered_map<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>, std::hash<TSCEInternalCellReference>, std::equal_to<TSCEInternalCellReference>, std::allocator<std::pair<const TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>>>="__table_"{__hash_table<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, std::__unordered_map_hasher<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, std::hash<TSCEInternalCellReference>, std::equal_to<TSCEInternalCellReference>, true>, std::__unordered_map_equal<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, std::equal_to<TSCEInternalCellReference>, std::hash<TSCEInternalCellReference>, true>, std::allocator<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, std::hash<TSCEInternalCellReference>, std::equal_to<TSCEInternalCellReference>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCEInternalCellReference, std::__hash_value_type<TSCEInternalCellReference, std::unordered_set<TSKUIDStruct>>, std::equal_to<TSCEInternalCellReference>, std::hash<TSCEInternalCellReference>, true>>="__value_"f}}}
{vector<TSCEFunctionIndex, std::allocator<TSCEFunctionIndex>>=^S^S{__compressed_pair<TSCEFunctionIndex *, std::allocator<TSCEFunctionIndex>>=^S}}16@0:8
v32@0:8r^v16r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}24
v40@0:8@16r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}24^B32
{unordered_map<TSCEFunctionIndex, TSCEReferenceSet *, std::hash<TSCEFunctionIndex>, std::equal_to<TSCEFunctionIndex>, std::allocator<std::pair<const TSCEFunctionIndex, TSCEReferenceSet *>>>="__table_"{__hash_table<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, std::__unordered_map_hasher<TSCEFunctionIndex, std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, std::hash<TSCEFunctionIndex>, std::equal_to<TSCEFunctionIndex>, true>, std::__unordered_map_equal<TSCEFunctionIndex, std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, std::equal_to<TSCEFunctionIndex>, std::hash<TSCEFunctionIndex>, true>, std::allocator<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCEFunctionIndex, std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, std::hash<TSCEFunctionIndex>, std::equal_to<TSCEFunctionIndex>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCEFunctionIndex, std::__hash_value_type<TSCEFunctionIndex, TSCEReferenceSet *>, std::equal_to<TSCEFunctionIndex>, std::hash<TSCEFunctionIndex>, true>>="__value_"f}}}
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
v32@0:8q16@24
@"TSUSparseArray"
Q24@0:8r^{TSUCellCoord=ISBB}16
{TSUCellCoord=ISBB}24@0:8Q16
@32@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16@24
@32@0:8r^{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}C}16@24
@"NSLock"
@32@0:8^{TSCEDateValue=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}16@24
^{TSCEDateValue=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}16@0:8
^{TSCEDateValue=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}
v32@0:8@16^v24
{unordered_map<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, NSMutableDictionary<TSCERemoteDataSpecifier *,TSCECellValue *> *>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>>="__value_"f}}}
B24@0:8q16
@"NSMutableSet"
@"TSUPointerKeyDictionary"
@"TSCERemoteDataValueMap"
@"TSUIntToIntDictionary"
@32@0:8^{TSCETableResolver=^^?}16@24
@24@0:8^{TSCETableResolver=^^?}16
v24@0:8^{TSCETableResolver=^^?}16
@"NSArray"
@"TSCEQuotedRefPathSplitter"
@"TSCEAbortObject"
@56@0:8@16^v24S32r^{TSKUIDStruct=QQ}36@44S52
v36@0:8^v16r^{TSUCellCoord=ISBB}24B32
v36@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24S32
@"TSCEUuidReferences"
@"<TSCEFormulaOwning>"
@"<TSCECalculationEngineRegistration>"
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}48@0:8r^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16^v24B32^B36B44
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}40@0:8r^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16^v24B32B36
@72@0:8@16@24r^{TSKUIDStruct=QQ}32r^{TSUCellCoord=ISBB}40^@48^B56B64B68
@48@0:8@16@24r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32^@40
@"TSCEFormulaObject"16@0:8
r^{TSCEASTNodeArray=*QQB}16@0:8
@25@0:8r^{TSCEASTNodeArray=*QQB}16{TSCEFormulaTranslationFlags=C}24
@24@0:8r^{TSCEASTNodeArray=*QQB}16
@33@0:8{TSCEFormulaCreator=@?}16^{TSCEASTNodeArgInfo=i[3i]{TSKUIDStruct=QQ}{TSUCellCoord=ISBB}}24{TSCEFormulaTranslationFlags=C}32
@25@0:8{TSCEFormulaCreator=@?}16{TSCEFormulaTranslationFlags=C}24
@24@0:8{TSCEFormulaCreator=@?}16
@28@0:8r^v16B24
v32@0:8^v16^v24
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}36@0:8^v16B24^B28
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}24@0:8^v16
B48@0:8@16Q24^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}40
v48@0:8^v16@24r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32B40B44
@36@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16@24B32
@32@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16^B24
@48@0:8@16@24r^{TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}BB}32^B40
@40@0:8@16@24r^{TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}BB}32
@40@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24r^{TSKUIDStruct=QQ}32
@17@0:8{TSCEFormulaTranslationFlags=C}16
@32@0:8^{TSCEFormulaRewriteContext=@@{TSCEFormulaRewriteContextRecord={TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}BB}{TSKUIDStruct=QQ}{TSUColumnRowOffset=ii}BBBBBBB}}16@?24
v40@0:8^{TSCEFormulaRewriteContext=@@{TSCEFormulaRewriteContextRecord={TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}BB}{TSKUIDStruct=QQ}{TSUColumnRowOffset=ii}BBBBBBB}}16^B24@?32
@24@0:8^{TSCEFormulaRewriteContext=@@{TSCEFormulaRewriteContextRecord={TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}BB}{TSKUIDStruct=QQ}{TSUColumnRowOffset=ii}BBBBBBB}}16
@32@0:8@16r^{TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}BB}24
@28@0:8^{TSCEFormulaRewriteContext=@@{TSCEFormulaRewriteContextRecord={TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}BB}{TSKUIDStruct=QQ}{TSUColumnRowOffset=ii}BBBBBBB}}16B24
@48@0:8r^v16@24r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32^B40
@40@0:8r^v16@24^B32
@32@0:8r^{TSKUIDStruct=QQ}16@24
@44@0:8r^v16r^v24r^v32B40
@32@0:8r^{TSKUIDStruct=QQ}16^B24
@44@0:8^v16B24^B28*36
@32@0:8@16r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}24
@60@0:8^v16^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}24^B32^B40^@48I56
@40@0:8^v16^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}24^B32
@28@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16C24
@48@0:8@16r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}24r^{TSKUIDStruct=QQ}32{TSUColumnRowOffset=ii}40
@24@0:8{TSUColumnRowOffset=ii}16
C32@0:8^v16@24
{TSCEFormulaTranslationFlags=C}16@0:8
{TSCEFormulaTranslationFlags="_flags"C}
@41@0:8@16r^{TSKUIDStruct=QQ}24{TSUPreserveFlags=C}32^{TSCEFormulaRewriteContext=@@{TSCEFormulaRewriteContextRecord={TSCEFormulaContainingCell={TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}BB}{TSKUIDStruct=QQ}{TSUColumnRowOffset=ii}BBBBBBB}}33
@40@0:8r^{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}16r^{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}24r^{TSKUIDStruct=QQ}32
@24@0:8r^{TSCECellTractRefCore={TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSKUIDStruct=QQ}C{TSUPreserveFlags=C}BBB}16
@32@0:8r^{TSUCellCoord=ISBB}16r^{TSUCellCoord=ISBB}24
@40@0:8r^{TSUCellCoord=ISBB}16r^{TSUCellCoord=ISBB}24r^{TSKUIDStruct=QQ}32
B24@0:8S16B20
B24@0:8I16B20
{TSUPreserveFlags=C}28@0:8r^{TSUCellCoord=ISBB}16B24
v24@0:8^{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}16
{TSKUIDStructTract={TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}{TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}}32@0:8@16r^{TSKUIDStruct=QQ}24
v24@0:8r^{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16
{TSUCellCoord=ISBB}24@0:8I16I20
B40@0:8@16@24B32B36
{TSCECellTractRefCore={TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSKUIDStruct=QQ}C{TSUPreserveFlags=C}BBB}16@0:8
v104@0:8{TSCECellTractRefCore={TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}{TSKUIDStruct=QQ}C{TSUPreserveFlags=C}BBB}16
{TSKUIDStruct=QQ}20@0:8I16
I32@0:8{TSKUIDStruct=QQ}16
{TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}24@0:8@16
{TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}32@0:8{_NSRange=QQ}16
{TSKUIDStruct=QQ}24@0:8I16B20
{TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}28@0:8@16B24
{TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}36@0:8{_NSRange=QQ}16B32
{TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}24@0:8@"NSIndexSet"16
@"NSMutableIndexSet"24@0:8r^v16
{TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}28@0:8@"NSIndexSet"16B24
@"NSMutableIndexSet"28@0:8r^v16B24
@"TSCEMutableUIDSet"28@0:8@"NSIndexSet"16B24
{TSCECellRefSet={map<TSKUIDStruct, TSCECellCoordSet, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECellCoordSet>>>={__tree<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>, std::allocator<std::__value_type<TSKUIDStruct, TSCECellCoordSet>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>>=Q}}}}24@0:8@16
{TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}24@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16
@32@0:8@"TSPObjectContext"16@"TSCECalculationEngine"24
{TSCECellRefSet={map<TSKUIDStruct, TSCECellCoordSet, std::less<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECellCoordSet>>>={__tree<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>, std::allocator<std::__value_type<TSKUIDStruct, TSCECellCoordSet>>>=^v{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<TSKUIDStruct, TSCECellCoordSet>, void *>>>={__tree_end_node<std::__tree_node_base<void *> *>=^v}}{__compressed_pair<unsigned long, std::__map_value_compare<TSKUIDStruct, std::__value_type<TSKUIDStruct, TSCECellCoordSet>, std::less<TSKUIDStruct>, true>>=Q}}}}24@0:8@"NSString"16
v28@0:8B16@?20
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}24@0:8@16
@36@0:8@16@24B32
v40@0:8@16@24d32
@"<TSCERemoteDataStoreDelegate>"
@"NSOperationQueue"
@24@0:8@?16
{unordered_map<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, NSMutableSet<TSCERemoteDataSpecifier *> *>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>>="__value_"f}}}
B20@0:8I16
@20@0:8I16
{unordered_set<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>>={__hash_table<TSKUIDStruct, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<TSKUIDStruct>>={unique_ptr<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>>={__compressed_pair<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>>=^^v{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>={__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *> *>>=Q}}}}{__compressed_pair<std::__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *>, std::allocator<std::__hash_node<TSKUIDStruct, void *>>>={__hash_node_base<std::__hash_node<TSKUIDStruct, void *> *>=^v}}{__compressed_pair<unsigned long, std::hash<TSKUIDStruct>>=Q}{__compressed_pair<float, std::equal_to<TSKUIDStruct>>=f}}}16@0:8
{TSUCellRect={TSUCellCoord=ISBB}{?=II}}32@0:8r^{TSKUIDStruct=QQ}16@24
{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}24@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16
{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32@0:8@16@24
{TSUCellRect={TSUCellCoord=ISBB}{?=II}}24@0:8r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}16
B48@0:8@16@24r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32^@40
@40@0:8@16@24r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32
v48@0:8@16@24@32@40
{TSUCellRect="origin"{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}"size"{?="numberOfColumns"I"numberOfRows"I}}
@"TSCETableTransposedInfo"
@"TSCEFormulaRewriteInfo_RowColumnInfo"
@"TSCEFormulaRewrite_RegionMovedInfo"
@"TSCEFormulaRewrite_RegionMergedInfo"
@"TSCEFormulaRewrite_MergeOriginMovedInfo"
@"TSKShuffleMapping"
@"TSCERewriteTableUIDInfo"
@"TSCERewriteGroupNodeUIDInfo"
@"TSCEGroupByChange"
@"TSCEFormulasForUndo"
{unordered_map<TSCECellRef, TSTConditionalStyleSet *, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, std::allocator<std::pair<const TSCECellRef, TSTConditionalStyleSet *>>>="__table_"{__hash_table<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, std::__unordered_map_hasher<TSCECellRef, std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, true>, std::__unordered_map_equal<TSCECellRef, std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, std::equal_to<TSCECellRef>, std::hash<TSCECellRef>, true>, std::allocator<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCECellRef, std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCECellRef, std::__hash_value_type<TSCECellRef, TSTConditionalStyleSet *>, std::equal_to<TSCECellRef>, std::hash<TSCECellRef>, true>>="__value_"f}}}
{unordered_map<TSCECellRef, TSUCellRect, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, std::allocator<std::pair<const TSCECellRef, TSUCellRect>>>="__table_"{__hash_table<std::__hash_value_type<TSCECellRef, TSUCellRect>, std::__unordered_map_hasher<TSCECellRef, std::__hash_value_type<TSCECellRef, TSUCellRect>, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, true>, std::__unordered_map_equal<TSCECellRef, std::__hash_value_type<TSCECellRef, TSUCellRect>, std::equal_to<TSCECellRef>, std::hash<TSCECellRef>, true>, std::allocator<std::__hash_value_type<TSCECellRef, TSUCellRect>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSUCellRect>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSUCellRect>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSUCellRect>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSUCellRect>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSUCellRect>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSUCellRect>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSUCellRect>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCECellRef, TSUCellRect>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCECellRef, TSUCellRect>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCECellRef, std::__hash_value_type<TSCECellRef, TSUCellRect>, std::hash<TSCECellRef>, std::equal_to<TSCECellRef>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCECellRef, std::__hash_value_type<TSCECellRef, TSUCellRect>, std::equal_to<TSCECellRef>, std::hash<TSCECellRef>, true>>="__value_"f}}}
{unordered_map<TSKUIDStruct, TSCECoordMapper *, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, TSCECoordMapper *>>>="__table_"{__hash_table<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, TSCECoordMapper *>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>="__value_"f}}}
@"TSCEFormulaRewriteSpec"
@"TSCECoordMapper"
@36@0:8S16@20q28
@60@0:8S16@20q28q36q44q52
@"TSCETablesByNameDistributor"
@32@0:8^{TSCEErrorValue=^^?@}16@24
^{TSCEErrorValue=^^?@}16@0:8
^{TSCEErrorValue=^^?@}
@24@0:8r^{TSCESpanningRangeRef={TSCERangeRef={TSCERangeCoordinate={TSUCellCoord=ISBB}{TSUCellCoord=ISBB}}{TSKUIDStruct=QQ}}C}16
@32@0:8^{TSCEASTNodeArray=*QQB}16r^{TSUCellCoord=ISBB}24
{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}32@0:8@16r^{TSKUIDStruct=QQ}24
{TSUCellCoord="row"I"column"S"_preserveRow"B"_preserveColumn"B}
@48@0:8{_NSRange=QQ}16{_NSRange=QQ}32
@32@0:8r^v16r^{TSCEGridDimensions=II}24
{TSCEGridCoord=II}16@0:8
{TSUIndexSet=b1b1{TSUIndexRange=qq}^{?}}16@0:8
B24@0:8I16I20
B24@0:8r^{TSCEGridCoord=II}16
v24@0:8r^{TSCEGridCoord=II}16
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}24@0:8I16I20
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}24@0:8r^{TSCEGridCoord=II}16
{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}24@0:8Q16
{vector<TSCEValue, std::allocator<TSCEValue>>=^{TSCEValue}^{TSCEValue}{__compressed_pair<TSCEValue *, std::allocator<TSCEValue>>=^{TSCEValue}}}16@0:8
v32@0:8r^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16r^{TSCEGridCoord=II}24
@32@0:8r^{TSCEGridCoord=II}16i24i28
@32@0:8{TSUCellRect={TSUCellCoord=ISBB}{?=II}}16
v28@0:8I16@?20
{TSCEBitGrid="_tiles"{vector<TSCEBitGridTile *, std::allocator<TSCEBitGridTile *>>="__begin_"^^{TSCEBitGridTile}"__end_"^^{TSCEBitGridTile}"__end_cap_"{__compressed_pair<TSCEBitGridTile **, std::allocator<TSCEBitGridTile *>>="__value_"^^{TSCEBitGridTile}}}"_count"Q"_lastTileFoundAtIndex"Q"_bitsInColumn"{unordered_map<unsigned int, TSUIndexSet *, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<const unsigned int, TSUIndexSet *>>>="__table_"{__hash_table<std::__hash_value_type<unsigned int, TSUIndexSet *>, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, TSUIndexSet *>, std::hash<unsigned int>, std::equal_to<unsigned int>, true>, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, TSUIndexSet *>, std::equal_to<unsigned int>, std::hash<unsigned int>, true>, std::allocator<std::__hash_value_type<unsigned int, TSUIndexSet *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned int, TSUIndexSet *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSUIndexSet *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, TSUIndexSet *>, std::hash<unsigned int>, std::equal_to<unsigned int>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, TSUIndexSet *>, std::equal_to<unsigned int>, std::hash<unsigned int>, true>>="__value_"f}}}}
{TSCEGridCoord="column"I"row"I}
{TSCEGridDimensions="width"I"height"I}
{unordered_map<TSCEGridCoord, TSCEValue, std::hash<TSCEGridCoord>, std::equal_to<TSCEGridCoord>, std::allocator<std::pair<const TSCEGridCoord, TSCEValue>>>="__table_"{__hash_table<std::__hash_value_type<TSCEGridCoord, TSCEValue>, std::__unordered_map_hasher<TSCEGridCoord, std::__hash_value_type<TSCEGridCoord, TSCEValue>, std::hash<TSCEGridCoord>, std::equal_to<TSCEGridCoord>, true>, std::__unordered_map_equal<TSCEGridCoord, std::__hash_value_type<TSCEGridCoord, TSCEValue>, std::equal_to<TSCEGridCoord>, std::hash<TSCEGridCoord>, true>, std::allocator<std::__hash_value_type<TSCEGridCoord, TSCEValue>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEGridCoord, TSCEValue>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEGridCoord, TSCEValue>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEGridCoord, TSCEValue>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEGridCoord, TSCEValue>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEGridCoord, TSCEValue>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEGridCoord, TSCEValue>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEGridCoord, TSCEValue>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSCEGridCoord, TSCEValue>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSCEGridCoord, TSCEValue>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSCEGridCoord, std::__hash_value_type<TSCEGridCoord, TSCEValue>, std::hash<TSCEGridCoord>, std::equal_to<TSCEGridCoord>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSCEGridCoord, std::__hash_value_type<TSCEGridCoord, TSCEValue>, std::equal_to<TSCEGridCoord>, std::hash<TSCEGridCoord>, true>>="__value_"f}}}
@24@0:8^{TSCEGridAccessContext=@^{TSCEFunctionArgSpec}i^{TSCEEvaluationContext}BBBBBCC}16
@28@0:8C16r^{TSKUIDStruct=QQ}20
@36@0:8C16r^v20r^{TSKUIDStruct=QQ}28
C24@0:8C16C20
@"TSCEMutableUIDSet"
{vector<TSCEGroupingColumnChange, std::allocator<TSCEGroupingColumnChange>>="__begin_"^{TSCEGroupingColumnChange}"__end_"^{TSCEGroupingColumnChange}"__end_cap_"{__compressed_pair<TSCEGroupingColumnChange *, std::allocator<TSCEGroupingColumnChange>>="__value_"^{TSCEGroupingColumnChange}}}
@40@0:8r^{TSKUIDStruct=QQ}16r^v24r^v32
@"TSCEFormulaRewrite_Uids"
@32@0:8@16{TSUCellCoord=ISBB}24
r^{TSUCellCoord=ISBB}16@0:8
@"TSCEFormulaRewrite_RegionInfo"
@32@0:8r^v16r^v24
{unordered_map<TSUCellCoord, TSUCellCoord, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, std::allocator<std::pair<const TSUCellCoord, TSUCellCoord>>>="__table_"{__hash_table<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, std::__unordered_map_hasher<TSUCellCoord, std::__hash_value_type<TSUCellCoord, TSUCellCoord>, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, true>, std::__unordered_map_equal<TSUCellCoord, std::__hash_value_type<TSUCellCoord, TSUCellCoord>, std::equal_to<TSUCellCoord>, std::hash<TSUCellCoord>, true>, std::allocator<std::__hash_value_type<TSUCellCoord, TSUCellCoord>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSUCellCoord, TSUCellCoord>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSUCellCoord, std::__hash_value_type<TSUCellCoord, TSUCellCoord>, std::hash<TSUCellCoord>, std::equal_to<TSUCellCoord>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSUCellCoord, std::__hash_value_type<TSUCellCoord, TSUCellCoord>, std::equal_to<TSUCellCoord>, std::hash<TSUCellCoord>, true>>="__value_"f}}}
@48@0:8r^{TSKUIDStruct=QQ}16r^v24r^{TSKUIDStruct=QQ}32r^v40
v40@0:8r^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16@24^v32
I24@0:8r^{TSKUIDStruct=QQ}16
S24@0:8r^{TSKUIDStruct=QQ}16
{unordered_map<TSKUIDStruct, unsigned int, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, unsigned int>>>="__table_"{__hash_table<std::__hash_value_type<TSKUIDStruct, unsigned int>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, unsigned int>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, unsigned int>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, unsigned int>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned int>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned int>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned int>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned int>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned int>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned int>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned int>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned int>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, unsigned int>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, unsigned int>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, unsigned int>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>="__value_"f}}}
{unordered_map<unsigned int, TSKUIDStruct, std::hash<unsigned int>, std::equal_to<unsigned int>, std::allocator<std::pair<const unsigned int, TSKUIDStruct>>>="__table_"{__hash_table<std::__hash_value_type<unsigned int, TSKUIDStruct>, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, TSKUIDStruct>, std::hash<unsigned int>, std::equal_to<unsigned int>, true>, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, TSKUIDStruct>, std::equal_to<unsigned int>, std::hash<unsigned int>, true>, std::allocator<std::__hash_value_type<unsigned int, TSKUIDStruct>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSKUIDStruct>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSKUIDStruct>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSKUIDStruct>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSKUIDStruct>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSKUIDStruct>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSKUIDStruct>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSKUIDStruct>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned int, TSKUIDStruct>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned int, TSKUIDStruct>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned int, std::__hash_value_type<unsigned int, TSKUIDStruct>, std::hash<unsigned int>, std::equal_to<unsigned int>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned int, std::__hash_value_type<unsigned int, TSKUIDStruct>, std::equal_to<unsigned int>, std::hash<unsigned int>, true>>="__value_"f}}}
@44@0:8{_NSRange=QQ}16r^v32I40
{_NSRange=QQ}16@0:8
{_NSRange="location"Q"length"Q}
@36@0:8r^{TSKUIDStruct=QQ}16r^v24B32
@60@0:8r^{TSKUIDStruct=QQ}16r^{TSKUIDStruct=QQ}24r^{TSKUIDStruct=QQ}32r^v40r^v48B56
{TSKUIDStructVectorTemplate<TSKUIDStruct>=^{TSKUIDStruct}^{TSKUIDStruct}{__compressed_pair<TSKUIDStruct *, std::allocator<TSKUIDStruct>>=^{TSKUIDStruct}}}52@0:8{_NSRange=QQ}16@32B40@44
v44@0:8@16@24B32@36
I24@0:8I16B20
{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}28@0:8I16r^{TSCECellRef={TSUCellCoord=ISBB}{TSKUIDStruct=QQ}}20
{vector<TSCERangeCoordinate, std::allocator<TSCERangeCoordinate>>=^{TSCERangeCoordinate}^{TSCERangeCoordinate}{__compressed_pair<TSCERangeCoordinate *, std::allocator<TSCERangeCoordinate>>=^{TSCERangeCoordinate}}}16@0:8
@32@0:8@16Q24
@"TSCEEdgeListPrinter"
@32@0:8r^{TSCEStringValue=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}BB}16@24
^{TSCEStringValue=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}BB}16@0:8
^{TSCEStringValue=^^?@{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}BB}
@32@0:8r^{TSCEValue=(?={?={?=[2Q]}[24C]SB}[9Q])C}16@24
v20@0:8c16
@28@0:8B16@20
@32@0:8^{TSCEBooleanValue=^^?B{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}16@24
^{TSCEBooleanValue=^^?B{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}16@0:8
^{TSCEBooleanValue=^^?B{TSCEFormat=@IC{TSCEDurationFormat=b1b5b5b2}{TSCEBaseFormat=CCB}{TSCEFractionFormat=c}{TSCENumberFormat=Cb3b1b1S}}}
@24@0:8d16
@36@0:8@16@24C32
v36@0:8r^v16r^{TSKUIDStruct=QQ}24B32
@"<TSCEFormulaReplacing>"
{unordered_map<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, std::allocator<std::pair<const TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>>>="__table_"{__hash_table<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>, std::allocator<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, std::hash<TSKUIDStruct>, std::equal_to<TSKUIDStruct>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<TSKUIDStruct, std::__hash_value_type<TSKUIDStruct, std::unordered_map<TSUCellCoord, TSCEFormulaToReplace>>, std::equal_to<TSKUIDStruct>, std::hash<TSKUIDStruct>, true>>="__value_"f}}}
@"NSObject<OS_dispatch_group>"
@R0-
Tg*
af3'P
KUUUUU
r-Yr
YUUUU
4tl:4
t*@es
"@M,
r<S[
U@_6
F@>F
lz9~
/@o)
?Q&^
?M5i
3?4"L)L
>=kv
=@Q3l
4@7>
5 .@
Qs@f
DfD0
 ?~,
UUUUUU
