@(#)PROGRAM:remindd  PROJECT:ReminderKit-
Y@ffffff
@oDA
main
barebonesDaemon
dataaccess
RetainedMainDaemonObject
REMAccountType
REMStoreMode
os_unfair_lock_s
Scope
NCKDatabaseScope
ICCloudContextSyncReason
REMSharedEntitySyncActivityType
REMXPCSyncInterfaceSyncReason
REMObjectIsConnectedState
URLResourceKey
NNSURLResourceKey
Foundation
CloudKit
_NSRange
REMSmartListUserDefinedVisibility
REMSmartListType
REMReminderNextThirdsHour
NLTag
NLTagScheme
__C_Synthesized
CKError
NCKErrorCode
ComparisonResult
NNSComparisonResult
DACalendarShareResponse
REMAlarmVehicleTriggerEvent
REMManualOrderingListType
REMListSharingStatus
BMMiningTaskCompletionStatus
QualityOfService
NNSQualityOfService
NaturalLanguage
Code
NCKErrorCode
StartMigrationRequest
StartMigrationResponse
UnmigrateRequest
UnmigrateResponse
remindd
OneOf_Source
Credential
OneOf_Result
Details
Error
MigrateRequest
Option
User
MigrateResponse
NextStep
EmptyRequest
BasicResponse
PingRequest
PingResponse
TantorMigrationAPIAsyncClient
TantorMigrationAPIAsync
_StorageClass
remindd
Fields
RDTemplateOperationRevokeTemplatePublicLink
mostRecentPublicLinkUpdateRequestDate
publicLinkURLUUID
publicLinkCreationDate
publicLinkLastModifiedDate
publicLinkExpirationDate
lastAccessedSinceReferenceDate
listTypeRawValue
listID
concatenatedContainerIDsWithLocalContainerIDPrefix
concatenatedElementIDsWithLocalElementIDPrefix
account.identifier
RDApplicationShortcutAssembly
CKRecordField
RDPublicTemplate
ChangeTrackingAccountProvider
RDAssignmentNotificationEngine
BabysitTarget
RDDebouncing
LoadFactor
RDDebouncer
RDDebouncerWithNumber
RDDebounceableCKDatabaseNotification
RDDebouncerWithCKDatabaseNotification
Policy
Interval
RDSavedAlarmVehicleTrigger
RDSavedAlarmTimeIntervalTrigger
RDSavedAlarmLocationTrigger
RDSavedAlarmDateTrigger
RDSavedAlarmTriggers
CodingKeys
REMCDReminder
Completable
RDExchangeAccountComplimentaryService
PersonIDHashing
RDExchangeAccountComplimentaryServiceDelegate
identifier
personID
DataDeserializationError
DataSerializationError
DataSerializationVersion
333333
h"lx
daemonStatus
containerStats
testInitialSync
remindd
RDXPCDebugPerformer
DebugPerformerManualHashtagLabelUpdaterDelegate
DebugPerformerMockDABabysittableAccount
ckIdentifier
uuidForChangeTracking
identifier
account.identifier
lastAccessedSinceReferenceDate
markedForDeletion
listTypeRawValue
listID
account
ManualSortHintFetchRequest
ImageReversionError
SharedEntitySyncActivityFetchOption
RDTemplateOperationCopyRemindersFromCustomSmartListToTemplate
REMCDAccountListData
remindd
RDClientConnectionListener
RDSpringBoardApplicationShortcutUpdater
remindd
AlarmWrapper
NonceBearing
NonceBearingAlarm
DueDateVerifiableAlarm
DueDateNonVerifiableAlarm
RDEventStream
RDTimeEventStream
RDSharedInlineTagAutoConvertHandler
RDSharedInlineTagAutoConvertStoreHandler
Batcher
ReminderFieldConverter
FieldToHandle
Metrics
canonicalName
self
activityTypeRawValue
CandidateHashtag
AutoConversionError
UnfinishedMetrics
DataAccessSyncPerformer
RDXPCSyncInterfacePerformerFactory
RDXPCSyncInterfacePerformer
RDPublicCloudDatabaseControllerMock
FetchPublicCloudObjectResultMock
CDObjectID
RDSavedReminder
CodingKeys
displayDateDate
title
completed
dueDate
parentReminder
identifier
list
RDAssignmentNotificationEngineAssembly
remindd
Fields
REMAlarmTriggerCDIngestor
REMAlarmTimeIntervalTriggerCDIngestor
REMAlarmDateTriggerCDIngestor_ObjC
REMAlarmDateTriggerCDIngestor
REMAlarmLocationTriggerCDIngestor
REMAlarmVehicleTriggerCDIngestor
ValueKey
RelationshipKey
RDClientIdentity
REMTemplateStorageCDIngestor
lastModifiedDate
sourceListIDURL
creationDate
identifier
RelationshipKey
ValueKey
REMListsDataViewInvocation_fetchListsInAccount
REMListsDataViewInvocation_fetchListsInGroup
REMListsDataViewInvocation_fetchByObjectIDs
REMListsDataViewInvocation_fetchDefaultList
REMListsDataViewInvocation_fetchDefaultListRequiringCloudKit
REMListsDataViewInvocation_fetchUserSelectableDefaultLists
REMListsDataViewInvocation_dataAccessFetchListsInAccount
REMListsDataViewInvocation_dataAccessFetchByObjectID
REMListsDataViewInvocation_dataAccessFetchByExternalIdentifier
REMListsDataViewInvocation_changeTrackingFetchByObjectIDIncludingConcealed
REMListsDataViewInvocation_userActivityFetchByExternalIdentifier
REMListsDataViewInvocation_debugFetchPhantomLists
REMListsDataViewInvocation_fetchByTemplateObjectID
REMPreferredDefaultListStorage
REMDaemonUserDefaultsPreferredListStorageAdapter
MockInMemoryPreferredDefaultListStorage
identifier
account
parentAccount
remindd
Fields
RDStoreControllerMigrator_AutoConvertSharedInlineTags
Runner
title
titleDocument
notes
notesDocument
ckServerShareData
ckServerRecordData
ckZoneOwnerName
identifier
ckIdentifier
list
account
RDJSONCodable
RDJSONCoder
RDCoreDataCoreSpotlightDelegate
AttributeSetCreationError
RDHashtagLabelUpdater
BabysitTarget
ChangeTrackingAccountProvider
RDHashtagLabelUpdaterDelegate
ManualHashtagLabelUpdaterDelegate
RDHashtagLabelRepairer
reminder
identifier
sharedToMeReminderCKIdentifier
hashtags
account
name
creationDate
account.identifier
HashtagTombstone
REMCDAlarmTimeIntervalTrigger
REMCDAlarmDateTrigger
REMCDAlarmLocationTrigger
REMCDAlarmVehicleTrigger
REMAlarmCDIngestor
AlarmTriggerRepresentable
RelationshipKey
ValueKey
RDManualSortIDAdapter
AccountManualSortIDsOption
REMDaemonUserDefaults
ICCloudConfiguration
RDStaledFileAttachmentCleanupStates
RDStaledFileAttachmentCleanupConfigurations
RDStaledFileAttachmentCleanupThrottleIntervalProviding
RDStaledFileAttachmentCleanupRateReduceFactorProviding
RDStaledFileAttachmentCleanupLimitProviding
identifier
RDStaledFileAttachmentCleanupActivity
RDStaledFileAttachmentCleanupActivityExecutable
RDStaledFileAttachmentCleanupExecutionDateStorage
type
RDStaledFileAttachmentCleanupRateReducer
reminder.account.identifier
REMSavedAttachmentCDIngestor
RelationshipKey
ValueKey
RDDARequestsQueueDelegate
RDDARequestsQueue
REMSmartListStorageCDIngestor
RelationshipKey
ValueKey
RDSharedListNotificationContentType
hashtags
alarmStorage
flagged
priority
displayDateDate
displayDateIsAllDay
account
list
completed
identifier
ReminderIDsWithMatchingHashtagsProvider
DateFilterAction
REMCDTemplateOperationQueueItem
OperationType
RDSharedInlineTagAutoConvertEngine
BabysitTarget
Configuration
UpdateReason
REMContactRepresentation
remindd
Fields
account.identifier
RDXPCSuggestedAttributesPerformer
MLModels
ConfigurationSource
RDDispatchQueue_ObjC
RDAlarmCoreSuggestionsConsumer
RDApplicationShortcutUpdater
RDTodayNotificationAssembly
xpc_event
RDXPCEventInterface
RDXPCEventStream
SystemXPCEventInterface
Token
AlarmHandler
Alarm
RDStoreControllerMigrator_DiacriticsInsensitiveHashtagLabels
canonicalName
hashtags
name
REMCDReminder
identifier
Fields
DistributedEvaluation
RDStoreControllerExporter
AlarmDate
Reminder
FuzzedEmbeddings
List
Account
ExportResult
CodingKeys
none
enter
leave
RDNotifydEventStream
NotificationName
RDContactInteractionAlarmProducerDataSource
RDContactInteractionAlarmProducerSessionManager
RDContactInteractionAlarmProducer
accountID
orderedIdentifierMap
RDFirstUnlockManager
RDTemplateOperationBatchDeleteCachedPublicTemplates
ICCloudConfiguration
REMDaemonUserDefaults
RDICCloudExtraneousAlarmsCollector
RDICCloudExtraneousAlarmsCollectorDelegate
RDICCloudExtraneousAlarmsSyncPerformer
RDICCloudExtraneousAlarmsCollectorConfigurations
RDICCloudExtraneousAlarmsCollectorStatesStorage
alarm.dueDateResolutionTokenAsNonce
identifier
alarm
REMCKSharedEntitySyncActivity
remindd
accountIdentifier
activityDate
authorUserRecordIDString
ckIdentifier
sharedEntityName
ActivityType
RDAlarmNotificationConsumer
BannerBehavior
REMCDSavedReminder
REMNSPersistentHistoryTracking
REMReminderStorageCDIngestor
CDAuxiliaryReminderChangeInfo
RelationshipKey
ValueKey
timelineEngine
RDTimelineEngineProcessorType
RDTimelineEngine
identifier
displayDateDate
displayDateIsAllDay
dueDate
timeZone
list
recurrenceRules
RDTimelineEngineReminder
RDAddedReminderNotificationContent
RDRelevantShortcutsProcessor
REMCDManualSortHint
ModelSkippedError
SampleTooSmallError
KeyTuple
REMAccountStorageCDIngestor
RelationshipOrderingValueKey
OrderableRelationshipKey
RelationshipKey
ValueKey
RDBeforeFirstUnlockNotificationEngine
REMAccountsDataViewInvocation_fetchAll
REMAccountsDataViewInvocation_fetchPrimaryActiveCloudKitAccount
REMAccountsDataViewInvocation_fetchActiveCloudKitAccountObjectIDs
REMAccountsDataViewInvocation_fetchByObjectID
REMAccountsDataViewInvocation_fetchByExternalIdentifier
REMAssignmentCDIngestor
identifier
RelationshipKey
ValueKey
state
isTerminated
RDMigrationClient
State
accountIdentifier
REMDaemonUserDefaults
RDSharedListActivityNotificationEngineUserDefaults
RDSharedListActivityNotificationsEngine
EngineConfiguration
JournalEntryUpdateItem
ckIdentifier
title
completed
list
creationDate
activityTypeRawValue
activityDate
RDDifferentialPrivacyRecorder
RDKeybagStateProvider
RDKeybagStateProviderFactory
_FixedKeybagStateProvider
RDKeyBagEventsController
RDKeybagLockState
type
account.identifier
sharedToMeReminderCKIdentifier
reminder
reminder.ckIdentifier
hashtagLabel
RDStoreControllerCloudKitNetworkActivityObserver
RDCompletedReminderNotificationContent
sourceListIDURL
parentAccount.identifier
identifier
creationDate
RDTemplateOperationCopyRemindersFromREMListToTemplate
RDDataStoreApplicationShortcutListProvider
account.identifier
name
remindd
Fields
identifier
parentReminder
account.identifier
title
dueDate
allDay
timeZone
Fields
StringType
TypedPredicate
REMHashtagCDIngestor
RelationshipKey
ValueKey
RDSynchronizedKeyValueStore
ChangeEvent
Reason
Fields
RDTemplateOperationCreateTemplatePublicContentPreview
RDXPCActivityTimeEventStream
Name
RDTemplateOperationCopyRemindersFromPublicTemplateToREMList
REMRecurrenceRuleCDIngestor
DayOfWeek
RelationshipKey
ValueKey
CodingKeys
remindd
BaseFields
URLFields
FileFields
ImageFields
notifyd
RDLaunchAnalytics
title
RDStalePinnedListsEventHandlerDelegate
RDStalePinnedListsEventHandler
RDWidgetRefreshEngine
RDXPCChangeTrackingPerformer
RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandlerDelegate
RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler
identifier
mostRecentTargetTemplateIdentifierByCurrentUser
creationDate
RDSavedURLAttachment
CodingKeys
RDStagedLightweightCoreDataMigrationCoordinator
BabysitTarget
CDIngestionCoordinator
IngestionContext
CDAuxiliaryChangeInfo
CoreDataType
REMAlarmTimeIntervalTrigger
REMAlarmDateTrigger
RDTimeAlarmProducerDataSource
RDFireDateSource
RDTimeAlarmProducer
RDXPCDaemonProtocol
RDXPCDaemon
RDCoreSuggestionsHandling
RDCoreSuggestionsController
title
notes
list.sharingStatus
list.markedForDeletion
list.parentList
list.parentList.markedForDeletion
parentReminder
parentReminder.markedForDeletion
completed
identifier
completionDate
account.identifier
account.inactive
list.daIsEventOnlyContainer
list.daIsNotificationsCollection
ckIdentifier
displayDateDate
list.identifier
markedForDeletion
recurrenceRules
children
flagged
daCalendarItemUniqueIdentifier
creationDate
lastModifiedDate
allDay
alarmStorage
contactHandles
dueDate
externalIdentifier
hashtags
parentReminder.identifier
list
priority
remObjectID
self
RelationshipKey
ConcealedPredicate
CompletionPredicate
Predicates
type
identifier
inactive
externalIdentifier
name
daPushKey
daSyncToken
effectiveMinimumSupportedAppVersion
externalModificationTag
minimumSupportedAppVersion
resolutionTokenMap_v3_JSONData
daAllowsCalendarAddDeleteModify
daConstraintsDescriptionPath
daSupportsSharedCalendars
daWasMigrated
debugSyncDisabled
didChooseToMigrate
didChooseToMigrateLocally
didFinishMigration
listIDsMergeableOrdering_v2
persistenceCloudSchemaVersion
personID
personIDSalt_v1
AccountSortOrder
alarmProalarmProducer
RDAlarmProducerDataSource
identifier
account.identifier
alarm.reminder.list.daIsEventOnlyContainer
alarm.reminder.list.daIsNotificationsCollection
account.inactive
alarm.reminder.completed
isExtraneous
markedForDeletion
alarm.isExtraneous
alarm.markedForDeletion
alarm.originalAlarmUID
ckDirtyFlags
alarm.ckDirtyFlags
alarm.reminder.identifier
RDStoreControllerMigrator_MostRecentTargetTemplateIdentifierByCurrentUser
mostRecentTargetTemplateIdentifier
publicLinkURLUUID
Predicates
RDSuggestedAttributeCache
REMEventKitBridgingDataViewInvocation_fetchLists
REMEventKitBridgingDataViewInvocation_fetchReminders
REMEventKitBridgingDataViewInvocation_fetchIncompleteRemindersWithDueDate
REMEventKitBridgingDataViewInvocation_fetchCompletedRemindersWithCompletionDate
priorityRawValue
creationDate
isCompleted
operationTypeRawValue
templateIdentifier
RDTemplateOperationDownloadPublicTemplate
remindd
Fields
canonicalName
hashtags
name
recencyDate
CDIngestableKey
CDIngestor
CDIngestableStorageType CDIngestableCoreDataType CDIngestableValueKey CDIngestableRelationshipKey CDIngestableOrderableRelationshipKey CDIngestableRelationshipOrderingValueKey
CDIngestionValidationError
NoRelationshipOrderingValueKey
CDIngestorPredefinedIngestableKey
NoOrderableRelationshipKey
REMCalDAVNotificationCDIngestor
RelationshipKey
ValueKey
REMCDTemplate
FireValue
RDStoreControllerNotificationCenter
CollectAndCoalescedOutputWithInputCount
Output
AccountTypeHostProvidingFireValue
AccountObjectIDProvidingFireValue
ChangedAccountFireValue
ChangedEntityFireValue
Observer
Token
CollectAndCoalescedChangedEntitiesWithInputCount
ChangedAccountInfo
EntityFilterOption
RDBogusCalendarCleaner
RDDecodeFromJSONDataValueTransformer
REMSharedActivityJournaling
REMDaemonUserDefaults
RDUserInteractionSessionManagerUserDefaults
RDUserInteractionSessionManager
remindd
RDAccountInitializer
DidCompleteInitializeAllAccountsObserver
RDCentralizedTaskAfterDelayScheduling
RDCentralizedTaskAfterDelaySchedulerFactory
RDHousekeepingActivityScheduler
RateReducer
RDHousekeepingActivity
RDHousekeepingRateReducerConfiguration
RDHousekeepingXPCActivityCriteriaProviding
RDJitteredMinimumDelayXPCActivity
RDJitteredMinimumDelayXPCActivityFactory
displayDateDate
displayDateTimeZone
displayDateIsAllDay
RDStoreController
RDAttachmentFileProvider
FileMetadata
ImageMetadata
URLMetadata
RDSavedAttachment
CodingKeys
dueDate
list
priority
creationDate
title
RDManualSortIDCacheContextDelegate
RDManualSortIDCacheContext
RDManualSortIDCacheReadOnlyContext
RDManualSortIDCacheReadAndWriteContext
RDThrottleable
RDThrottlingPolicy
RDThrottling
REMShareeCDIngestor
RelationshipKey
ValueKey
RDTransactionRegistrar
Reader
Writer
RDChannel
REMRemindersDataViewInvocation_fetchByListID
REMRemindersDataViewInvocation_fetchByParentReminderID
REMRemindersDataViewInvocation_fetchByParentReminderIDs
REMRemindersDataViewInvocation_fetchReminderIDsByParentReminderID
REMRemindersDataViewInvocation_fetchByObjectID
REMRemindersDataViewInvocation_fetchByPredicateDescriptor
REMRemindersDataViewInvocation_fetchByExternalIdentifier
REMRemindersDataViewInvocation_fetchByDACalendarItemUniqueIdentifier
REMRemindersDataViewInvocation_fetchRemindersCountByListID
REMRemindersDataViewInvocation_fetchRemindersCountByParentReminderID
REMAssignmentsDataViewInvocation_fetchByObjectID
REMHashtagsDataViewInvocation_fetchByObjectID
identifier
account
reminder
dueDate
list
priority
creationDate
title
RDStoreControllerMigrator_UnsetCKDirtyFlagsInNonCKAccounts
RDTemplateOperationCopyRemindersFromTemplateToREMList
RDMergePolicy
REMDaemonUserDefaults
REMAccountsListDataViewUserDefaults
PolymorphicListItem
Model
name
Cache
CodingKeys
PersistentHistoryTruncationHandler
RDApplicationShortcutEngineInterface
RDApplicationShortcutEngine
REMManualOrderingCDIngestor
RelationshipKey
ValueKey
RDSavedRecurrenceRule
RDSavedDayOfWeek
CodingKeys
RDTemplateOperationCopyRemindersToTemplate
lastModifiedDate
REMCDURLAttachment
REMCDFileAttachment
remindd
REMAttachmentRepresentable
REMAttachmentCDIngestor
REMFileAttachmentCDIngestor
REMImageAttachmentCDIngestor
REMURLAttachmentCDIngestor
RelationshipKey
ValueKey
remindd
RDClientConnection
RDClientConnectionDelegate
RDICCloudSchemaCatchUpSyncScheduling
RDICCloudSchemaCatchUpSyncSchedulerFactory
RDICCloudSchemaCatchUpSyncPerformer
RDICCloudSchemaCatchUpSyncController
RDICCloudSchemaCatchUpSyncXPCActivity
RDICCloudSchemaCatchUpSyncXPCActivityFactory
RDThrottler
RDApplicationShortcutListProvider
RDApplicationShortcutListProviderDelegate
RDCoreBehaviorModel
RDCoreBehaviorModelTrainingDelegate
Result
Prediction
Context
Feedback
CodingKeys
RDVehicleAlarmProducerDataSource
RDVehicleAlarmProducer
REMCRMergeableOrderedSet
REMCRMergeableStringDocument
remindd
REMCDObjectFields
REMCDObjectResolutionTokenFields
REMCRSerializable
Fields
RDDisabledAccountsEventHandler
RDXPCIndexingPerformer
RDAccountDataMover
RDReminderDataCopier
RDReminderDataICSCopier
RDReminderDataCloudKitCopier
RDReminderDataExchangeCopier
Statistics
REMDaemonUserDefaults
RDExtraneousAlarmUserDefaults
RDExtraneousAlarmCleaner
BabysitTarget
identifier
alarm
alarm.reminder.identifier
account
RDManualSortHintUpdater
RDSavedReminders
CodingKeys
REMListFetchExecutor
list
parentAccount
name
RDDynamicSignificantTimeNotificationEngineEventSetter
RDDynamicSignificantTimeNotificationEngine
XPCEventSetter
CDFetching
creationDate
priority
displayDateDate
title
account
identifier
parentSavedReminderIdentifier
REMCDReminderInZREMCDOBJECT
REMCDReminderInZREMCDREMINDER
REMCDListInModelVersionV5
REMCKCloudStateInModelVersionV5
MigrateRemindersFromZREMCDOBJECTToZREMCDREMINDER
locationManager
remindd
RDLocationManagerDelegate
RDLocationManagerType
RDLocationManager
RDSavedHashtag
CodingKeys
DABabysitter
RDBabysitCrashDetectable
RDBabysittable
RDBabysitter
RDMentionsExtractor
Candidate
ExtractionResult
REMColor
REMSavedReminderStorageCDIngestor
lastModifiedDate
RelationshipKey
ValueKey
RDXPCBarebonesDaemon
REMTemplatesDataViewInvocation_fetchTemplatesInAccount
REMTemplatesDataViewInvocation_fetchByObjectIDs
REMSmartListsDataViewInvocation_fetchSmartList
REMSmartListsDataViewInvocation_fetchAllCustomSmartLists
REMSmartListsDataViewInvocation_fetchCustomSmartListsInAccount
REMSmartListsDataViewInvocation_fetchCustomSmartListsInGroup
RDIntentsRelevantShortcutsHandlingType
RDIntentsRelevantShortcutsHandling
RDIntentsRelevantShortcutsHandlingItem
RDAccountPropertiesNotifier
REMTipKitDataViewInvocation_fetchListsCount
REMTipKitDataViewInvocation_fetchListsWithCustomBadgeCount
REMTipKitDataViewInvocation_fetchUncompletedRemindersCount
REMTipKitDataViewInvocation_fetchCompletedRemindersCount
REMTipKitDataViewInvocation_fetchCompletedRemindersCountInList
REMTipKitDataViewInvocation_fetchCustomSmartListsCount
REMTipKitDataViewInvocation_fetchHashtagsCount
RDExecutionDateStorage
RDExecutionDatePossessingExecutable
RDExecutionIntervalThrottlingPolicy
Fields
remindd
RDUserNotificationPresenting
RDUserNotificationCenterDelegate
RDUserNotificationCenter
local
RDAccountManualSortID
identifier
type
personID
personIDSalt_v1
children
identifier
completed
priority
displayDateDate
title
displayDateIsAllDay
displayDateTimeZone
SortingStyle
Utilities
ManualSortHintPersistenceHost
RDReplicaManagerUtilities
identifier
RDReplicaManagerPayload
RDManualSortIDCache
list
parentReminder
parentList
parentList.markedForDeletion
isGroup
account.identifier
account.inactive
daIsEventOnlyContainer
daIsNotificationsCollection
badgeEmblem
name
identifier
parentAccount.identifier
sharingStatus
externalIdentifier
mostRecentTargetTemplateIdentifierByCurrentUser
pinnedDate
isPinnedByCurrentUser
sharees
parentList.identifier
parentAccount
remObjectID
self
Predicates
REMAppleAccountUtilities
RDAccountHostnameProvider
RDDACalDAVShareRequestHandler
PolymorphicListItem
Model
RDDaemonController
RDNewlySharedToMeTagAutoConvertRunner
ckIdentifier
self
metadata
parentSavedReminderIdentifier
template.identifier
hasLocationTriggersOrVehicleEventTriggers
hasHashtags
displayDateDate
identifier
completionDate
EraAndYear
RDExecutable
RDDARequest
remindd
RDXPCStorePerformer
identifier
REMDaemonUserDefaults
ICCloudConfiguration
RDSyncPollerUserDefaults
RDSyncPollerConfiguration
RDSyncPoller
REMDaemonUserDefaults
REMHashtagLabelDataViewUserDefaults
filterData
Cache
CodingKeys
RDTemplateOperationQueueDelegate
RDTemplateOperation
RDTemplateOperationQueue
BabysitTarget
ValidationError
 @T]
RDManualSortHint
REMDaemonUserDefaults
RDICCloudConfigurationUpdaterUserDefaults
RDICCloudConfigurationUpdateScheduling
RDICCloudConfigurationUpdateSchedulerFactory
RDICCloudConfigurationUpdater
RDICCloudConfigurationUpdaterXPCActivity
RDICCloudConfigurationUpdaterXPCActivityFactory
RDPublicCloudDatabaseControllable
RDPublicCloudDatabaseController
RDObjectDescription
REMAlarmLocationTrigger
RDLocationAlarmProducerDataSource
RDCLRegionSource
RDLocationAlarmProducer
ICCloudContext
RDAccountPersonIDSaltObserver
AccountInfo
SaltValueError
RDPublicCloudObject
RDManualSortIDHashKeyProviding
_RDManualSortIDPrimaryCloudKitAccountHashKeyProvider
RDManualSortIDUnitTestHashKeyProvider
name
list
ListKey
RDCentralizedTaskScheduling
RDCentralizedTaskSchedulerFactory
SchedulerType
RDAnyActivityScheduler
RDDynamicXPCActivity
Criteria
CompletionStatus
Identifier
ProtectionClass
MotionState
Priority
IntervalInfo
RDTemplateOperationCreateOrUpdateTemplatePublicLink
mostRecentPublicLinkUpdateRequestDate
publicLinkURLUUID
publicLinkLastModifiedDate
publicLinkExpirationDate
publicLinkCreationDate
RDRootEntityNameByEntityNameCache
RDDisplayDateUpdater
displayDateTimeZone
displayDateUpdatedForSecondsFromGMT
Fields
lastModifiedDate
attachmentTypeRawValue
account.identifier
reminder.template.identifier
reminder.identifier
ReminderIDsMergeableOrderingHelper
ReminderIDsMergeableOrdering
completionDate
RDStoreControllerMigrator_IsPinnedByCurrentUser
sharingStatus
isPinnedByCurrentUser
RDDaemonProtocol
RDDaemon
RDBarebonesDaemon
REMDaemonUserDefaults
ICCloudConfiguration
RDImageDeduplicationStates
RDImageDeduplicationActivityConfigurations
RDImageDeduplicationActivityThrottleIntervalProviding
RDImageDeduplicationActivityRateReduceFactorProviding
RDImageDeduplicationActivityLimitProviding
identifier
RDImageDeduplicationActivity
RDImageDeduplicationExecutable
sha512Sum
PreprocessedAttachment
LocalAnalytics
CrashCleaner
RDImageDeduplicationActivityExecutionDateStorage
DeduplicationError
type
RDImageDeduplicationActivityRateReducer
CrashCleanError
CompositeError
REMListStorageCDIngestor
identifier
parentReminder
creationDate
icsDisplayOrder
RelationshipOrderingValueKey
OrderableRelationshipKey
RelationshipKey
ValueKey
RDManualSortIDPersistenceHost
RDUserInitiatedHashtagLabelApprovalTagAutoConvertRunner
ReminderDataModelVersion
accountUtils
RDAccountUtils
InactivatedICloudCalDavDataMover
LocalDataToICloudMover
AccountInfo
ACAccountProperty
NoInactivatedICloudCalDavREMAccountError
DidNotChooseToMigrationCloudKitError
NoCloudKitREMAccountError
LocalAccountIsEmptyError
TargetAccountIsNonEmptyError
NoICloudREMAccountError
status
account.identifier
reminder.completed
reminder.identifier
reminder.completionDate
Predicates
RDSharedInlineTagAutoConvertHandler_BatchRunner
REMCDSavedAttachment
REMReminderFetchExecutor
dueDate
list
priority
creationDate
title
REMSiriSearchLimitedDataViewInvocation_fetchReminders
remindd
LocationFields
RDStoreControllerAnalytics
REMDaemonUserDefaults
RDSuggestedAttributesAutoTrainerPersistentStorage
RDSuggestedAttributesAutoTrainer
REMCDPublicTemplate
RDStoreControllerMigrator_AccountIdentifierHashtagLabels
RDInvocable
RDStoreControllerInvocable
RDSwiftInvocableProtocol
Performer
AnyRDSwiftInvocableProtocol
smartListType
parentAccount.identifier
mostRecentTargetTemplateIdentifier
pinnedDate
parentList.identifier
parentList
name
identifier
account.identifier
parentAccount
Predicates
remindd
Fields
RDReminderDataPostMigrationHandler
NSXPCConnection
RDClientAccessLevelTruthSource
RDClientAccessLevel
REMResolutionToken
REMResolutionTokenMap
RDTodayNotificationEngine
remindd
RDManagedObjectIDCache
RDPrimaryActiveCloudKitAccountManagedObjectIDCache
RDPredefinedObjectKey
RDPredefinedManagedObjectIDCache
RDPredefinedSmartListAndManualOrderingManagedObjectIDCache
RDElementManualSortID
account
identifier
ckIdentifier
externalIdentifier
alarmEngine
RDAlarmProducing
RDAlarmConsuming
RDAlarmProducerDelegate
RDAlarmEngine
RDProducerAlarmOrigin
RDDataSourceAlarm
RDProducerAlarm
RDProducerAlarmType
list
parentReminder
sharedListPropertyKey
RDDatabaseSaver
remindd
RDDataAccess
RDDataAccessREMStoreProvider
RDDataAccessUserNotificationPresentingProvider
InvernessClientError
DatabaseType
InvernessClient
Invocable
TextFormatEncoder
AnyExtensionField
ExtensionField
ValueType
OptionalExtensionField
RepeatedExtensionField
PackedExtensionField
OptionalEnumExtensionField
RepeatedEnumExtensionField
PackedEnumExtensionField
OptionalMessageExtensionField
RepeatedMessageExtensionField
OptionalGroupExtensionField
RepeatedGroupExtensionField
JSONEncodingOptions
SelectiveVisitor
BinaryDecodingError
JSONScanner
BinaryDecodingOptions
Google_Protobuf_Duration
SwiftProtobuf
_ProtoNameProviding
JSONEncodingError
UnknownStorage
JSONDecodingError
JSONDecoder
Google_Protobuf_Syntax
Google_Protobuf_Type
Google_Protobuf_Field
Kind
Cardinality
Google_Protobuf_Enum
Google_Protobuf_EnumValue
Google_Protobuf_Option
_StorageClass
DoubleFormatter
Google_Protobuf_Empty
ExtensionMap
Message
_MessageImplementationBase
JSONMapEncodingVisitor
JSONDecodingOptions
BinaryEncodingVisitor
BinaryEncodingMessageSetVisitor
AnyUnpackError
TextFormatDecoder
WireFormat
ExtensionFieldValueSet
Decoder
AnyMessageExtension
MessageExtension
Google_Protobuf_DoubleValue
Google_Protobuf_FloatValue
Google_Protobuf_Int64Value
Google_Protobuf_UInt64Value
Google_Protobuf_Int32Value
Google_Protobuf_UInt32Value
Google_Protobuf_BoolValue
Google_Protobuf_StringValue
Google_Protobuf_BytesValue
BinaryDecoder
TextFormatDecodingError
HashVisitor
BinaryEncodingError
Internal
FieldType
BaseType
MapKeyType
MapValueType
ProtobufFloat
ProtobufDouble
ProtobufInt32
ProtobufInt64
ProtobufUInt32
ProtobufUInt64
ProtobufSInt32
ProtobufSInt64
ProtobufFixed32
ProtobufFixed64
ProtobufSFixed32
ProtobufSFixed64
ProtobufBool
ProtobufString
ProtobufBytes
Visitor
Google_Protobuf_Timestamp
_CustomJSONCodable
Google_Protobuf_SourceContext
Google_Protobuf_Api
Google_Protobuf_Method
Google_Protobuf_Mixin
_StorageClass
JSONEncoder
AnyMessageStorage
InternalState
JSONEncodingVisitor
Google_Protobuf_FieldMask
Enum
TextFormatScanner
ExtensibleMessage
TextFormatEncodingVisitor
SimpleExtensionMap
BinaryEncodingSizeVisitor
BinaryEncodingMessageSetSizeVisitor
InternPool
_NameMap
NameDescription
Name
Names
NameString
Google_Protobuf_NullValue
Google_Protobuf_Struct
Google_Protobuf_Value
OneOf_Kind
Google_Protobuf_ListValue
_StorageClass
BinaryEncoder
Google_Protobuf_Any
options
setOptions:
addPrivateOptions:
rem_shouldUseShortCompleteString
objectForKeyedSubscript:
integerValue
migrateStore:
setObject:forKeyedSubscript:
initWithConcurrencyType:
persistentStoreCoordinator
setPersistentStoreCoordinator:
setTransactionAuthor:
fetchRequest
setPropertiesToFetch:
arrayWithObjects:count:
setAffectedStores:
setFetchBatchSize:
predicateWithFormat:
setPredicate:
initWithFetchRequest:
setResultType:
executeRequest:error:
save:
performBlockAndWait:
result
unsignedIntegerValue
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
migrateStoreIfNeeded:metadata:
container
appendString:
stringByAppendingString:
ic_prettyDescriptionWithTabLevel:
appendFormat:
enumerateKeysAndObjectsUsingBlock:
ic_setNonNilObject:forKey:
ic_addKey:forNonNilObject:
isConnectedToAccountObject:
fetchRequestWithEntityName:
accountIdentifier
T@"NSString",C,D,N
canonicalName
firstOccurrenceCreationDate
T@"NSDate",C,D,N
name
recencyDate
uuidForChangeTracking
T@"NSUUID",C,D,N
hashtags
T@"NSSet",&,D,N
isEqualToString:
callStackSymbols
isAbstract
cdEntityName
shouldSyncToCloud
utility
databaseScope
Ts,D,N
ownerName
serverChangeTokenData
T@"NSData",&,D,N
zoneName
account
T@"REMCDAccount",&,D,N
badgeEmblem
color
T@"REMColor",&,D,N
filterData
showingLargeAttachments
TB,D,N
smartListType
sortingStyle
pinnedDate
mostRecentTargetTemplateIdentifier
T@"NSUUID",&,D,N
parentAccount
parentList
T@"REMCDList",&,D,N
init
setTarget:
setSelector:
setDelay:
setWaitToFireUntilRequestsStop:
setCallOnMainThread:
setRequestQueue:
requestQueue
_cancelFireRequests
dealloc
waitToFireUntilRequestsStop
fireBlock
setFireBlock:
callTargetSelector
callOnMainThread
delay
isMainThread
target
selector
methodForSelector:
initWithTarget:selector:delay:waitToFireUntilRequestsStop:callOnMainThread:
requestFire
fireImmediately
isScheduledToFire
cancelPreviousFireRequests
.cxx_destruct
_waitToFireUntilRequestsStop
_callOnMainThread
_target
_selector
_delay
_requestQueue
_fireBlock
T@,W,N,V_target
T:,N,V_selector
TB,N,V_waitToFireUntilRequestsStop
TB,N,V_callOnMainThread
T@"NSObject<OS_dispatch_queue>",&,N,V_requestQueue
T@?,C,N,V_fireBlock
Td,V_delay
TB,R,N
cloudkit
array
initWithArray:
subclassesOfREMCDObjectRepresentingRootCoreDataEntities
countByEnumeratingWithState:objects:count:
allObjects
_ic_objectsFromObjectIDs:propertiesToFetch:relationshipKeyPathsForPrefetching:context:
addObjectsFromArray:
objectID
removeObject:
_ic_resultsMatchingPredicate:sortDescriptors:resultType:fetchBatchSize:propertiesToFetch:relationshipKeyPathsForPrefetching:context:
ic_objectsFromObjectIDs:propertiesToFetch:relationshipKeyPathsForPrefetching:context:
ic_resultsMatchingPredicate:sortDescriptors:resultType:fetchBatchSize:propertiesToFetch:relationshipKeyPathsForPrefetching:context:
migrateStore:metadata:
setFetchLimit:
executeFetchRequest:error:
count
firstObject
identifier
UUIDString
setIcUserDefaults:
setThrottlingLevels:
setResetInterval:
loadSavedPolicyState
policyStartDate
timeIntervalSinceNow
resetInterval
resetPolicy
startPolicyResetTimer
policyResetTimer
invalidate
setPolicyResetTimer:
defaultCenter
removeObserver:
currentBatchCount
setCurrentBatchCount:
currentLevel
numberOfBatches
numberWithUnsignedInteger:
stringValue
currentLevelIndex
throttlingLevels
changeLevelIfNecessary
savePolicyState
setCurrentLevelIndex:
postNotificationName:object:
batchInterval
objectAtIndexedSubscript:
date
setPolicyStartDate:
isValid
dateByAddingTimeInterval:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
userDefaults
removeObjectForKey:
icUserDefaults
objectForKey:
doubleForKey:
dateWithTimeIntervalSinceReferenceDate:
setObject:forKey:
timeIntervalSinceReferenceDate
setDouble:forKey:
resetSavedPolicyState
initWithThrottlingLevels:resetInterval:
incrementBatchCount
_throttlingLevels
_resetInterval
_icUserDefaults
_currentBatchCount
_currentLevelIndex
_policyStartDate
_policyResetTimer
T@"ICUserDefaults",&,N,V_icUserDefaults
TQ,N,V_currentBatchCount
T@"NSArray",&,N,V_throttlingLevels
TQ,N,V_currentLevelIndex
T@"ICCloudThrottlingLevel",R,N
Td,V_resetInterval
T@"NSDate",&,V_policyStartDate
T@"NSTimer",&,V_policyResetTimer
Td,R,N
T@"NSString",R,N
length
addObject:
ic_addZoneID:forAccountID:
ic_removeZoneID:forAccountID:
utilityQueue
setOperationQueue:
operationQueue
setMaxConcurrentOperationCount:
processingQueue
setProcessingQueue:
setObjectIDsToProcess:
dictionary
setAccountZoneIDsNeedingToBeSaved:
setObjectIDsToRetry:
setRetryCountsByOperationType:
initWithSyncReason:
setLastSyncMetrics:
setDiscretionaryNetwork:
setHasRetryTimer:
setDatabaseScopeStringsNeedingRetryFetchChangesByAccountID:
isInternetReachable
setWasInternetReachable:
setLastSyncSinceInternetReachable:
sharedSettings
hasOptions:
supportsSyncingToCloudKit
setSupportsCloudKitSyncing:
setShouldUnregisterBuddy:
setDisabled:
setDisabledInternal:
setQualityOfService:
setDiscretionaryNetworkBehavior:
discretionaryNetwork
setAutomaticallyRetryNetworkFailures:
setTimeoutIntervalForResource:
setFetchingEnabled:
setDidCheckForLongLivedOperations:
initWithDebouncingInterval:queue:handler:
setApsNotificationHandlingDebouncer:
sharedConfiguration
accountChangedDebouncerInterval
setAccountChangedNotificationHandlingDebouncer:
loadZoneFetchState
contextDidSave:
addObserver:selector:name:object:
setRecognizedCloudObjectClasses:
sharedInstance
setAppleAccountUtilities:
reachabilityChanged:
sharedReachabilityForInternetConnection
cloudKitAccountChanged:
setIsSystemAvailableForSyncing:
bootstrapSyncingOnLaunchIfSystemReady
waitForSyncEngineSystemAvailabilityBlockingQueue:completionQueue:completionBlock:
setPendingAccountInitializerCompleteOnLaunch:
accountInitializerDidCompleteOnLaunchObserver
unobserve
setAccountInitializerDidCompleteOnLaunchObserver:
initWithHandler:queue:
observe
updateConfiguration
updateSelectorDelayers
handleUnrecoverableError
addObserver:forKeyPath:options:context:
setDidAddObservers:
addStateHandler
setBuddyStateObserver:
hasPassedBuddy
setHasPassedBuddy:
registerForBuddy
isSystemAvailableForSyncing
pendingAccountInitializerCompleteOnLaunch
loadSubscribedSubscriptionIDs
setupAPSConnection
adjustAPSNotificationDebouncerInterval
observePrimaryCloudKitAccountPersonIDSaltChanges
retryProcessingCloudObjects
updateCloudContextStateWithReason:
initWithQueue:
pq_unregisterForBuddy
buddyStateObserver
setBuddyDidFinishHandler:
start
stop
accountTypeHost
isCloudKit
stringWithFormat:
appleAccountUtilities
unsafeUntilSystemReady_icloudACAccountMatchingAccountIdentifier:
aa_altDSID
daemonUserDefaults
enableHashingUserIdentifiablesWithPersonIDSalt
conformsToRDICCloudContextCryptoStringProviding
base64EncodedHMACStringFromString:usingSalt:
base64EncodedStringWithOptions:
storeController
newBackgroundContextWithAuthor:
allCloudKitAccountsInContext:
personID
isPrimaryCloudKit
isNonPrimaryCloudKit
unsafeUntilSystemReady_hashedAccountPersonIDForAccount:usingSalt:
setPersonID:
hasChanges
ic_saveWithLogDescription:
personIDSalt
accountPersonIDSaltObserver
uuid
primaryCloudKitAccountPersonIDSaltDidSetWithSalt:
unitTest_notificationCenter
InitiallyNilError
primaryCloudKitAccountPersonIDSaltDidFailToSetWithError:
observePrimaryCloudKitAccountPersonIDSaltChangesOnQueue:successHandler:errorHandler:
setAccountPersonIDSaltObserver:
unobservePrimaryCloudKitAccountPersonIDSaltChanges:
supportsCloudKitSyncing
context
cloudKitAccountsInContext:
newCloudContainerForAccountID:
copy
localAccountID
localInternalAccountID
faultAndPromptToFileRadarWithICTap2RadarType:logMessage:
containersByAccountID
mutableCopy
allKeys
componentsJoinedByString:
accountOverrideInfo
accountID
shouldUnregisterBuddy
didAddObservers
removeObserver:forKeyPath:
cancelPreviousPerformRequestsWithTarget:
retryTimer
processingSelectorDelayer
pollingSelectorDelayer
newBackgroundContextWithAuthor:enableQueryGenerationToken:
contextWithQueryGenerationTokenEnabled:
batchFetchHelperWithContext:
setBatchFetchHelper:
contextWithBatchFetchHelper
setAffectedStoresWithAccountIdentifier:
fetchBatchSize
fetchCacheCountLimit
initWithQueue:managedObjectContext:batchSize:cacheCountLimit:
userInfo
setWithObjects:
entity
containsObject:
persistentStore
minusSet:
arrayWithCapacity:
debugSyncDisabled
enumerateObjectsUsingBlock:
unsafeUntilSystemReady_primaryCloudKitAccountInContext:appleAccountUtilities:
syncDisabledByServer
isCloudKitAccountAvailable
isDisabled
isDisabledInternal
accountStatusByAccountIDDescription
containerAccountIDsDescription
accountStatusNumberByAccountID
intValue
isCloudKitAccountAvailableRequiringActive:
isReadyToSyncWithActiveAccountAvailable:
_isCloudKitAccountAvailableWithManagedObjectContext:requireActive:
inactive
minimumClientVersion
componentsSeparatedByString:
processInfo
isOperatingSystemAtLeastVersion:
setSyncDisabledByServer:
operatingSystemVersionString
disableCloudSyncingIfCurrentVersionNotSuppported
throttlingPolicy
processPendingCloudObjects
setProcessingSelectorDelayer:
pollingInterval
deleteAllServerChangeTokens
syncWithReason:discretionary:completionHandler:
systemBuildVersion
recordTypes
_cloudObjectClassesByRecordType
initWithZoneName:ownerName:databaseScope:
wasInternetReachable
lastSyncSinceInternetReachable
reachabilityChangeSyncThrottleInterval
processPendingCloudObjectsWithOperationName:
updateCloudContextStateWithSyncOption:syncReason:withCompletionHandler:
accountChangedNotificationHandlingDebouncer
setWithObject:
accountStatusFromAccountStatusNumber:
updateAccountStatusWithCompletionHandler:
fire:completion:
operationCount
string
operations
ic_loggingDescription
dataWithPropertyList:format:options:error:
bytes
ic_loggingIdentifier
ic_loggingValues
addStateHandlerWithName:stateBlock:
cloudSchemaCatchUpSyncSchedulingStateStorage
initWithAccountIdentifier:schedulingStateStorage:managedObjectContext:
persistenceCloudSchemaVersion
cloudKitSchemaCatchUpSyncLastSuccessDate
cloudKitSchemaCatchUpSyncLastSuccessBuildVersion
schedulingState
numberWithInteger:
lastScheduledDate
resultsLimitPerSyncOperation
persistedSubscriptionIDsValidityPeriod
mergeLocalObjectsInitialRetryInterval
mergeLocalObjectsMaximumRetryCount
mergeLocalObjectsRetryStartOverThrottleInterval
cloudSchemaCatchUpSyncInitialRetryInterval
cloudSchemaCatchUpSyncMaximumRetryCount
fetchDatabaseChangesOperationPerScopePerAccountMaximumRetryCount
objectEffectiveVersionValidationFlushBatchSize
manualSortHintClientSideExpiration
manualSortHintLastAccessedUpdatePolicy
_systemBuildVersion
appZoneID
metadataZoneID
database
accountIDForDatabase:
ic_isOwnedByCurrentUser
accountZoneIDsNeedingToBeSaved
cloudContextDelegate
cloudContext:receivedZoneNotFound:accountID:
accountZoneIDsNeedingFetchChanges
cloudContext:sharedZoneWasDeleted:accountID:
saveZoneFetchState
deleteServerChangeTokenForRecordZoneID:databaseScope:accountID:
allValues
ic_objectsPassingTest:
allCloudObjectIDsInContext:
allDirtyCloudObjectIDsInContext:
enableAutoGenerateCKPersonIDSalt
primaryCloudKitAccountInContext:
generateAndSavePersonIDSaltIfNeededWithContext:
cStringUsingEncoding:
isReadyToSync
readinessLoggingDescription
errorForDisabledCloudSyncing
sync
_existingCloudDirtyToken
isFetchingEnabled
errorFromErrors:
timeIntervalSinceDate:
processAllDirtyCloudObjectsWithSyncReason:completionHandler:
sharedBabysitter
tokenByRegisteringAccount:forOperationWithName:
waiterID
babySatErrorWithOperationName:
dictionaryWithObjects:forKeys:count:
postEventWithName:payload:error:performAutoBugCaptureOnError:
lastSyncMetrics
finishWithSuccess:
_generateAndSavePersonIDSaltIfNeeded:
_clearCloudDirtyForToken:
_syncWithReason:completionHandler:
setUpCloudSchemaCatchUpSyncContextMapWithAccountIDs:
didCompleteCloudSchemaCatchUpSyncWithContextMap:error:syncTypeLabel:debugLogLabel:
fetchRecordZoneChangesWithReason:cloudSchemaCatchUpSyncContextMap:completionHandler:
fetchDatabaseChangesWithReason:cloudSchemaCatchUpSyncContextMap:completionHandler:
accountInitializerDidCompleteOnAccountsDidChangeObserver
setAccountInitializerDidCompleteOnAccountsDidChangeObserver:
ic_removeAllCKCompletionBlocksButNotTheNSOperationCompletionBlock_50200031
clearPendingActivity
cancelAllOperations
boolValue
UTF8String
waitUntilAllOperationsAreFinished
accountZoneIDsFetchingChanges
unionSet:
setAccountZoneIDsFetchingChanges:
setOperationCount:
qualityOfService
discretionaryNetworkBehavior
configuration
automaticallyRetryNetworkFailures
timeoutIntervalForResource
containerForAccountID:
initWithRecordZonesToSave:recordZoneIDsToDelete:
configureOperation:
privateCloudDatabase
setDatabase:
setMarkZonesAsUserPurged:
allCloudObjectIDsOfClassesPassingTest:inContext:
objectWithID:
clearServerRecord
saveAndFaultIfFailWithContext:shouldTakeServerAsTruth:logDescription:
setModifyRecordZonesCompletionBlock:
setName:
setQuantity:
setExpectedSendSize:
setExpectedReceiveSize:
setGroup:
addOperation:
errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary
errorWithDomain:code:userInfo:
error
doubleValue
code
domain
canRetryImmediatelyAfterError:
blockOperationWithBlock:
recordIDsToDelete
recordsToSave
recordID
recordIDs
addDependency:
dictionaryForKey:
synchronize
setAccountStatusNumberByAccountID:
removeStaleAccountStatus
setAccountStatus:forAccountID:
setNeedsToUpdateSubscriptions:
clearSubscribedSubscriptionIDs
clearZoneFetchState
accountStatusWithCompletionHandler:
setWithArray:
databaseScopeStringsNeedingRetryFetchChangesByAccountID
retryCountFetchDatabaseChangesOperationTypeForAccountID:dataScopeString:
clearRetryCountForOperationType:
stringWithString:
fetchCurrentUserRecordOperation
setPerRecordCompletionBlock:
setFetchRecordsCompletionBlock:
fetchUserRecordOperationWithContainer:completionHandler:
fetchUserRecordWithContainer:completionHandler:
fetchUserRecordOperationWithAccountID:completionHandler:
initWithRecordsToSave:recordIDsToDelete:
setModifyRecordsCompletionBlock:
recordName
fetchUserRecordIDWithCompletionHandler:
recordType
existingCloudObjectForRecordID:recordType:accountID:context:
cloudObjectClassesByRecordType
existingCloudObjectForRecordID:accountID:context:
newCloudObjectForRecord:accountID:context:
newPlaceholderObjectForRecordID:account:context:
addFetchOperationsForRecordIDs:accountID:operationGroupName:runExclusively:completionHandler:
operationsToFetchRecordIDs:operationGroupName:accountID:
addRunExclusivelyOperations:operationQueue:
addOperations:waitUntilFinished:
errorFromOperations:
objectsByDatabaseScope:
databaseWithDatabaseScope:
operationsToFetchRecordIDs:database:
ic_arrayByGroupingIntoArraysWithMaxCount:
operationToFetchRecordIDs:database:
initWithRecordIDs:
fetchOperation:progressChangedWithRecordID:progress:
setPerRecordProgressBlock:
fetchedRecordCount
setFetchedRecordCount:
fetchOperation:recordWasFetchedWithRecordID:record:error:
fetchOperation:didCompleteWithRecordsByRecordID:error:
objectWasFetchedButDoesNotExistInCloud
zoneID
receivedZoneNotFound:operation:
objectIDsToRetry
didFetchShare:accountID:context:
objectWasFetchedFromCloudWithRecord:accountID:
operationID
performAndWaitContextWithBatchFetchHelper:
startRetryTimerIfNecessaryWithError:
rootRecordID
initWithRecordName:zoneID:
creatorUserRecordID
cloudKitAccountWithCKIdentifier:context:
ckUserRecordName
newPlaceholderObjectForRecordID:account:recordType:context:
setServerShareIfNewer:
objectsByAccount:
deleteSharesForObjects:accountID:completionHandler:
isSharedRootObject
shortLoggingDescription
operationsToModifyRecordsForCloudObjectsToSave:delete:deleteShares:operationGroupName:addDependencies:accountID:
fetchAndCompletionOperationWithDeleteShareObjects:accountID:dependencyOperations:completionHandler:
newBackgroundContext
ic_objectsFromObjectIDs:context:
ckServerShare
ic_containsObjectPassingTest:
fetchRecordZoneChangesForZoneIDs:accountID:reason:completionHandler:
recursivelyFixCrossZoneRelationship:perObjectHandler:
deduplicatedRecordsForCloudObjects:
ckServerRecord
setCkServerShare:
ic_removeRecordsWithSameCKRecordIDInRecords:
operationsToModifyRecordsToSave:delete:rootRecordIDsByShareID:database:
operationToSaveZonesIfNecessaryForAccountID:
objectWillBePushedToCloudWithOperation:
size
addDependenciesForModifyRecordsOperation:
ic_map:
ckRecordType
removeObjectsInRange:
removeObjectAtIndex:
sortedRecords:
reverseObjectEnumerator
operationToModifyRecordsToSave:delete:rootRecordIDsByShareID:database:
batchRecordsToSave:delete:maxRecordCountPerBatch:maxRecordSizePerBatch:withBlock:
addCallbackBlocksToModifyRecordsOperation:rootRecordIDsByShareID:
modifyRecordsOperation:recordWasSavedWithRecordID:record:context:onProcessingQueue:error:
setPerRecordSaveBlock:
modifyRecordsOperation:recordWasDeletedWithRecordID:rootRecordIDsByShareID:onProcessingQueue:error:
setPerRecordDeleteBlock:
modifiedRecordCount
setModifiedRecordCount:
modifyRecordsOperation:didCompleteWithError:
internalContextWithBatchFetchHelper
ckIdentifierFromRecordName:
batchFetchHelper
objectFailedToBePushedToCloudWithOperation:recordID:error:
incrementFailureCounts
existingCloudObjectForRecord:accountID:context:
objectWasPushedToCloudWithOperation:serverRecord:
shouldBeIgnoredForSync
decrementFailureCounts
addCKIdentifiers:accountIdentifier:onCurrentQueue:dispatchBlock:
flushOnCurrentQueue:
isOwnedByCurrentUser
markedForDeletion
deleteFromLocalDatabase
objectWasDeletedFromCloud
supportsDeletionByTTL
fixBrokenReferences
incrementOrClearRetryCountForOperationType:error:
iterativelyCancelDependentOperations:
handleGenericPartialFailuresForError:operation:
didFailPushingExceededStorageQuotaForContext:accountID:
cloudContext:userDidDeleteRecordZoneWithID:accountID:
topologicallySortRecords:withError:
initWithCapacity:
setObject:atIndexedSubscript:
numberWithUnsignedLong:
alarmReferenceCKRecordType
managedObjectContext
accountCKIdentifier
rd_ckDatabaseScope
recursivelyFixCrossZoneRelationshipWithVisitedMap:perObjectHandler:
setWithCapacity:
newlyCreatedRecord
errorsFromError:
initWithShouldValidateMoveAcrossSharedList:saveShouldContinueIfCustomValidationFailed:
setValidationPolicy:
customValidationFailed
completionBlock
setCompletionBlock:
addBarrierBlock:
promptToFileRadarWithICTap2RadarType:title:description:logMessage:additionalFaultMessage:
isInternalInstall
tapToRadarThrottlingInterval
substringWithRange:
promptUserToFileBugWithAlertMessage:bugTitle:bugDescription:
faultAndPromptToFileRadarWithICTap2RadarType:title:description:logMessage:
ic_shortLoggingOperationName
errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessaryForOperationQueue:
recordZonesToSave
operationToSaveZonesForZoneIDs:accountID:
initWithZoneID:
isNonUploadingTransactionAuthor:
storesForAccountTypes:
valueForKey:
filterNonUploadableChangedManagedObjectIDs:cloudKitStoreIdentifiers:
setWithSet:
objectIDsToProcess
hasRetryTimer
fireDate
ic_isEarlierThanDate:
lastObject
isProcessObjectsForContextDidSaveOperation
canCoalesceWithOperation:
addExecutionBlock:
needsToProcessAllDirtyObjects
dependencies
setNeedsToProcessAllDirtyObjects:
processPendingCloudObjectsWithOperationName:syncReason:completionHandler:
_addOperationToProcessBlockWithOperationName:processBlock:
addOperationToProcessObjectsWithOperationName:syncReason:completionHandler:
uploadSuspended
daWasMigrated
processObjectIDs:operationQueue:completionHandler:
unsafeUntilSystemReady_allCloudKitRemindersEnabledICloudACAccounts
dictionaryWithCapacity:
mergeLocalObjectsFetchContextAffectingStoreOf:
initWithAccountIdentifier:
validateWithAccount:
needsToMergeLocalObjects
shouldRetryMergeLocalObjects
loggableDescription
reset
setNeedsToMergeLocalObjects:
objectIDsOfClassesEligibleForLocalObjectMerge
processLocalObjectMergeEligibleObjectIDs:operationQueue:completionHandler:
_scheduleRetryMergeLocalObjects
retryCountsByOperationType
setCloudKitMergeLocalLastDateMaxRetryReached:
setCloudKitMergeLocalLastBuildVersionMaxRetryReached:
cloudKitMergeLocalLastDateMaxRetryReached
cloudKitMergeLocalLastBuildVersionMaxRetryReached
retryLaterErrorWithInterval:
ic_localDateWithSeconds
mergeLocalObjectsWriteContextAffectingStoreOf:
_performLocalObjectMergeWithEligibleObjectIDs:cloudKitAccount:managedObjectContext:error:
setDaWasMigrated:
ckIdentifier
isMergeableWithLocalObject
existingLocalObjectToMergeWithPredicate:
mergeWithLocalObject:
numberWithBool:
refreshObject:mergeChanges:
cleanUpAfterLocalObjectMerge
addProcessLocalObjectsOperationToMergeLocalObjectsWithCompletionHandler:
_processCloudObjectIDs:operationQueue:completionHandler:
_processFetchedCloudObjectsWithObjectIDs:usingBlock:
_processFetchedCloudObjectsWithObjectIDs:withManagedObjectContext:usingBlock:
accountIdentifierForStoreID:
orderedSetWithArray:
defaultRelationshipKeyPathsForPrefetching
cloudObject
isInICloudAccount
needsToBeDeletedFromCloud
orderedSet
recognizedCloudObjectClasses
existingObjectWithID:error:
_isRecognizedCloudObjectClass:
ckNeedsToBeFetchedFromCloud
canBeRootShareObject
share
needsToBePushedToCloud
hasAllMandatoryFields
loggingDescription
needsToDeleteShare
subscriptionID
notificationType
notificationID
subscriptionOwnerUserRecordID
initWithDatabaseScope:subscriptionOwnerUserRecordName:
apsNotificationHandlingDebouncer
handleDatabaseNotification:completionHandler:
subscriptionOwnerUserRecordName
_handleDatabaseNotification:database:accountID:completionHandler:
localizedDescription
fetchDatabaseChangesForDatabases:reason:cloudSchemaCatchUpSyncContextMap:completionHandler:
validateAccountZoneIDsNeedingFetchChanges
fetchRecordZoneChangesForAccountZoneIDs:reason:cloudSchemaCatchUpSyncContextMap:completionHandler:
initWithString:
addOperationsToFetchRecordZoneChangesForAccountZoneIDs:reason:cloudSchemaCatchUpSyncContextMap:completionHandler:
ic_intersectsRecordZoneIDSet:
operationsToFetchRecordZoneChangesForZoneIDs:accountID:cloudSchemaCatchUpSyncContextMap:
setSuspended:
isFinished
isExecuting
isCancelled
ic_shouldDependOnCKFetchRecordZoneChangesOperation:
shouldPerformCloudSchemaCatchUpSync
migrationZoneID
operationToFetchRecordZoneChangesForZoneIDs:database:ignoreServerChangeTokens:
group
quantity
serverChangeTokenForRecordZoneID:databaseScope:accountID:
setPreviousServerChangeToken:
setResultsLimit:
setFetchNewestChangesFirst:
rem_isFirstString:equalToSecondString:
configurationsByRecordZoneID
isZoneConfigurations:subsetOfZoneConfigurations:
newOperationToFetchRecordZoneChangesWithZoneConfigurations:database:
previousServerChangeToken
initWithRecordZoneIDs:configurationsByRecordZoneID:
setFetchAllChanges:
dictionaryWithObject:forKey:
setCloudSchemaCatchUpSyncContextsByAccountIdentifier:
setShouldSortChildrenAfterFetching:
setRecordIDsToSortChildrenAfterFetching:
_performSortingChildrenObjectsAfterFetchingInBlockOfManagedObjectContext:fetchHasFullyCompleted:accountID:
saveCount
setSaveCount:
setProcessedRecordCount:
addDispatchBlock:
fetchRecordZoneChangesOperation:recordWasChangedWithRecordID:record:error:context:
setRecordWasChangedBlock:
deletedRecordsCount
setDeletedRecordsCount:
fetchRecordZoneChangesOperation:recordWasDeletedWithRecordID:recordType:context:
setRecordWithIDWasDeletedBlock:
fetchRecordZoneChangesOperation:zoneID:accountID:changeTokenUpdated:batchFetchHelper:
setRecordZoneChangeTokensUpdatedBlock:
flush
fetchRecordZoneChangesOperation:completedFetchForZoneID:serverChangeToken:batchFetchHelper:error:
setRecordZoneFetchCompletionBlock:
fetchRecordZoneChangesOperationDidComplete:error:
setFetchRecordZoneChangesCompletionBlock:
saveServerChangeToken:forRecordZoneID:databaseScope:accountID:
recordZoneIDs
ic_shortLoggingDescription
parent
addCKIdentifiers:accountIdentifier:dispatchBlock:
ckZoneOwnerName
objectWasDeletedFromCloudByAnotherDevice
shouldSortChildrenAfterFetching
recordIDsToSortChildrenAfterFetching
_recordTypesToSortChildrenAfterFetch
sortChildrenObjects
sharedCloudDatabase
stringByAppendingFormat:
operationToFetchDatabaseChangesForDatabase:cloudSchemaCatchUpSyncContextMap:completionHandler:
serverChangeTokenForChangedZonesInDatabase:accountID:
initWithPreviousServerChangeToken:
fetchDatabaseChangesOperation:recordZoneWithIDChanged:accountID:
setRecordZoneWithIDChangedBlock:
fetchDatabaseChangesOperation:recordZoneWithIDWasDeleted:accountID:
setRecordZoneWithIDWasDeletedBlock:
fetchDatabaseChangesOperation:changeTokenUpdated:accountID:
setChangeTokenUpdatedBlock:
fetchDatabaseChangesOperation:finishedWithServerChangeToken:accountID:error:completionHandler:
setFetchDatabaseChangesCompletionBlock:
ic_objectsMatchingPredicate:context:
sharedZoneWasDeleted:accountID:
saveServerChangeToken:forChangedZonesInDatabase:accountID:
deleteServerChangeTokenForChangedZonesInDatabase:accountID:
incrementRetryCountForOperationType:
standardUserDefaults
setAccountZoneIDsNeedingFetchChanges:
zoneIDsFromZoneInfos:
zoneInfosFromZoneIDs:
arrayByAddingObjectsFromArray:
ic_defaultDatabaseScopeForOwnerName:
initWithSubscriptionID:
setShouldSendContentAvailable:
setNotificationInfo:
apsConnection
isSandboxEnvironment
initWithEnvironmentName:namedDelegatePort:queue:
setApsTopic:
apsTopic
_setEnabledTopics:
setDelegate:
setApsConnection:
unsafeUntilSystemReady_allICloudACAccounts
rem_isEligibleForCloudKitReminders
subscriptionForDatabase:
subscribedSubscriptionIDsByAccountID
saveSubscriptionsForDatabase:completionHandler:
fetchAllSubscriptionsOperation
addSubscribedSubscriptionIDs:accountID:
setFetchSubscriptionCompletionBlock:
initWithSubscriptionsToSave:subscriptionIDsToDelete:
subscriptionsToSave
setModifySubscriptionsCompletionBlock:
setSubscribedSubscriptionIDsLastModifiedDate:
distantPast
numberWithDouble:
subscribedSubscriptionIDsLastModifiedDate
setSubscribedSubscriptionIDsByAccountID:
setByAddingObject:
isInForeground
didCheckForLongLivedOperations
checkForLongLivedOperations
needsToUpdateSubscriptions
updateSubscriptionsWithCompletionHandler:
didFinishMigration
didChooseToMigrate
ckServerChangeTokens
cloudContext:didFetchUserRecord:accountID:
operationQueueFetchUserRecordWithAccountID:completionHandler:
fetchLongLivedOperationWithID:completionHandler:
fetchAllLongLivedOperationIDsWithCompletionHandler:
shouldIgnoreErrorForBackoffTimer:operationType:
errorCodesToIgnoreForBackoffTimer
timeIntervalToRetryAfterFromError:
retryOperationsIfNecessary
setRetryTimer:
haveZoneIDsInAccountZoneIDs:
needsToUpdateCloudContextOnAccountsDidChange
setNeedsToUpdateCloudContextOnAccountsDidChange:
serverChangeTokenContext
accountWithCKIdentifier:context:
unsafeUntilSystemReady_primaryICloudACAccount
unsafeUntilSystemReady_allICloudAccountsWithCloudKitEnabled
accountDescription
aa_accountClass
serverChangeTokenForAccount:zoneID:databaseScope:context:
setServerChangeToken:
addServerChangeTokenForAccount:ckServerChangeToken:zoneID:databaseScope:context:
serverChangeToken
deleteObject:
removeCkServerChangeTokensObject:
clearUserRecord:
deleteRecordZonesWithZoneIDs:accountID:markZonesAsUserPurged:completionHandler:
updateUserRecordWithAccountID:updateFunction:completionHandler:
cancelEverythingWithCompletionHandler:
postNotificationName:object:userInfo:
printOperationQueue
observeValueForKeyPath:ofObject:change:context:
registerDefaults:
boolForKey:
clearContainers
unobservePrimaryCloudKitAccountPersonIDSaltChanges
inMemoryPrimaryActiveCKAccountREMObjectID
_accountsDidEnableOrDisable
removeStaleFetchDatabaseRetryMetadata
didCompleteInitializeAllAccounts:
topic
notificationFromRemoteNotificationDictionary:
_markCloudAsDirtyAndReturnToken
handleNotification:completionHandler:
accountStore
accountWithIdentifier:
displayAccount
initWithZoneName:
saveRecordZone:completionHandler:
initWithRecordType:recordID:
arrayWithObject:
writeMigrationStateTo:didChooseToMigrate:didFinishMigration:
adjustAPSNotificationDebouncerIntervalWithMigrationState:
setUploadSuspended:
remObjectID
apsDebouncerWatchMigrationInProgressInterval
apsDebouncerMigrationInProgressInterval
apsDebouncerWatchDefaultInterval
apsDebouncerDefaultInterval
setDebouncingInterval:
setUpCloudSchemaCatchUpSyncContextMapWithAccountIDs:outBackgroundScheduledCatchUpSyncContextMap:
isCloudSchemaCatchUpSyncNeeded
cloudSchemaCatchUpSyncController
scheduleBackgroundActivity
setSchedulingState:
setLastScheduledDate:
cloudSchemaCatchUpSyncDidCompleteWithAccountIdentifier:context:
setCloudKitSchemaCatchUpSyncLastSuccessDate:
setCloudKitSchemaCatchUpSyncLastSuccessBuildVersion:
retryPerformingCloudSchemaCatchUpSync
babysittableWaiterID
userRecordNameForContainer:
connection:didReceivePublicToken:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveToken:forInfo:
connection:didReceiveURLToken:forInfo:
connection:didReceiveURLTokenError:forInfo:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didSendOutgoingMessage:
connection:didFailToSendOutgoingMessage:error:
connection:didChangeConnectedStatus:
connectionDidReconnect:
connection:channelSubscriptionsFailedWithFailures:
initWithStoreController:
notificationContainsCloudContextInternalChangesOnly:
hasPendingOperations
status
configurationDump
allZoneIDs
isFetchingAllRecordZones
finishOperationsForRecordID:completionHandler:
unitTest_accountStatusNumberForAccountID:
unitTest_setAccountStatus:forAccountID:
fetchUserRecordWithAccountID:completionHandler:
fetchRecordIDs:accountID:operationGroupName:runExclusively:completionHandler:
deleteSharesForObjects:completionHandler:
partialError:containsErrorCode:
firePollingSyncRequest
fetchSubscriptionsForDatabase:completionHandler:
deleteAllApplicationDataFromServerWithAccountID:completion:
shouldPollCloudKitWhenLaunchingAndBackgrounding
accountsDidDisable
accountsDidEnable
applicationDidEnterBackground
applicationWillTerminate
applicationWillEnterForeground
setMigrationStateToDidChooseToMigrate:didFinishMigration:createZoneAccountIfFinishMigration:accountID:completionHandler:
migrationStateDidChange:didFinishMigration:
setCloudContextDelegate:
fetchOperationsPending
setPollingSelectorDelayer:
setContainersByAccountID:
containersByAccountIDLock
setContainersByAccountIDLock:
accountInitializerDidCompleteOnAccountsDidChangeObserverLock
setAccountInitializerDidCompleteOnAccountsDidChangeObserverLock:
setUnitTest_notificationCenter:
setCloudSchemaCatchUpSyncController:
_fetchOperationsPending
_needsToUpdateSubscriptions
_disabled
_hasPassedBuddy
_isSystemAvailableForSyncing
_hasRetryTimer
_disabledInternal
_needsToProcessAllDirtyObjects
_didAddObservers
_fetchingEnabled
_syncDisabledByServer
_uploadSuspended
_supportsCloudKitSyncing
_shouldUnregisterBuddy
_didCheckForLongLivedOperations
_discretionaryNetwork
_automaticallyRetryNetworkFailures
_wasInternetReachable
_pendingAccountInitializerCompleteOnLaunch
_needsToMergeLocalObjects
_needsToUpdateCloudContextOnAccountsDidChange
_containersByAccountIDLock
_accountInitializerDidCompleteOnAccountsDidChangeObserverLock
_storeController
_cloudContextDelegate
_qualityOfService
_discretionaryNetworkBehavior
_processingQueue
_operationQueue
_appleAccountUtilities
_lastSyncMetrics
_objectIDsToRetry
_retryTimer
_retryCountsByOperationType
_databaseScopeStringsNeedingRetryFetchChangesByAccountID
_objectIDsToProcess
_processingSelectorDelayer
_pollingSelectorDelayer
_containersByAccountID
_accountZoneIDsNeedingFetchChanges
_accountZoneIDsFetchingChanges
_accountZoneIDsNeedingToBeSaved
_subscribedSubscriptionIDsByAccountID
_subscribedSubscriptionIDsLastModifiedDate
_timeoutIntervalForResource
_apsTopic
_apsConnection
_apsNotificationHandlingDebouncer
_accountChangedNotificationHandlingDebouncer
_lastSyncSinceInternetReachable
_buddyStateObserver
_accountInitializerDidCompleteOnLaunchObserver
_accountInitializerDidCompleteOnAccountsDidChangeObserver
_recognizedCloudObjectClasses
_accountPersonIDSaltObserver
_unitTest_notificationCenter
_cloudSchemaCatchUpSyncController
T@"NSObject<OS_dispatch_queue>",&,N,V_processingQueue
T@"NSOperationQueue",&,N,V_operationQueue
T@"REMAppleAccountUtilities",&,N,V_appleAccountUtilities
T@"ICCloudContextSyncMetrics",&,V_lastSyncMetrics
TB,N,V_hasPassedBuddy
TB,N,V_isSystemAvailableForSyncing
T@"NSMutableSet",&,N,V_objectIDsToRetry
TB,V_hasRetryTimer
T@"NSTimer",&,V_retryTimer
T@"NSMutableDictionary",&,N,V_retryCountsByOperationType
T@"NSMutableDictionary",&,N,V_databaseScopeStringsNeedingRetryFetchChangesByAccountID
T@"NSDictionary",&,N
disabledInternal
TB,GisDisabledInternal,V_disabledInternal
T@"NSDictionary",R,N
TB,N,V_needsToProcessAllDirtyObjects
T@"NSMutableSet",&,N,V_objectIDsToProcess
T@"ICSelectorDelayer",&,V_processingSelectorDelayer
T@"ICSelectorDelayer",&,V_pollingSelectorDelayer
TB,N,V_didAddObservers
fetchingEnabled
TB,N,GisFetchingEnabled,V_fetchingEnabled
TB,N,V_syncDisabledByServer
TB,N,V_uploadSuspended
TB,N,V_supportsCloudKitSyncing
TB,N,V_shouldUnregisterBuddy
T@"NSDictionary",&,N,V_containersByAccountID
T{os_unfair_lock_s=I},N,V_containersByAccountIDLock
T@"NSMutableDictionary",&,N,V_accountZoneIDsNeedingFetchChanges
T@"NSMutableDictionary",&,N,V_accountZoneIDsFetchingChanges
T@"NSMutableDictionary",&,N,V_accountZoneIDsNeedingToBeSaved
T@"NSDictionary",&,V_subscribedSubscriptionIDsByAccountID
T@"NSDate",&,V_subscribedSubscriptionIDsLastModifiedDate
TB,N,V_didCheckForLongLivedOperations
TB,N,V_discretionaryNetwork
TB,N,V_automaticallyRetryNetworkFailures
Td,N,V_timeoutIntervalForResource
T@"NSString",&,N,V_apsTopic
T@"APSConnection",&,N,V_apsConnection
T@"_TtC7remindd37RDDebouncerWithCKDatabaseNotification",&,N,V_apsNotificationHandlingDebouncer
T@"_TtC7remindd21RDDebouncerWithNumber",&,N,V_accountChangedNotificationHandlingDebouncer
TB,N,V_wasInternetReachable
Td,N,V_lastSyncSinceInternetReachable
T@"DADBuddyStateObserver",&,N,V_buddyStateObserver
TB,N,V_pendingAccountInitializerCompleteOnLaunch
T@"RDAccountInitializerDidCompleteInitializeAllAccountsObserver",&,N,V_accountInitializerDidCompleteOnLaunchObserver
TB,N,V_needsToMergeLocalObjects
TB,N,V_needsToUpdateCloudContextOnAccountsDidChange
T@"RDAccountInitializerDidCompleteInitializeAllAccountsObserver",&,N,V_accountInitializerDidCompleteOnAccountsDidChangeObserver
T{os_unfair_lock_s=I},N,V_accountInitializerDidCompleteOnAccountsDidChangeObserverLock
T@"NSMutableDictionary",&,N,V_recognizedCloudObjectClasses
T@"RDAccountPersonIDSaltObserver",&,N,V_accountPersonIDSaltObserver
T@"NSNotificationCenter",&,N,V_unitTest_notificationCenter
T@"<ICCloudSchemaCatchUpSyncController>",&,N,V_cloudSchemaCatchUpSyncController
T@"RDStoreController",R,N,V_storeController
T@"<ICCloudContextDelegate>",W,N,V_cloudContextDelegate
TB,R,N,V_fetchOperationsPending
TB,V_needsToUpdateSubscriptions
Tq,N,V_qualityOfService
TQ,N,V_discretionaryNetworkBehavior
disabled
TB,GisDisabled,V_disabled
setAccountIdentifier:
setObjectIDsOfClassesEligibleForLocalObjectMerge:
setWasMigrated:
setDidNotFinishMigration:
setNeedsToFetchUserRecord:
setIsInactive:
setDidChooseToMigrate:
storeControllerManagedObjectContext
affectedStores
isSubclassOfClass:
shouldAttemptLocalObjectMerge
wasMigrated
isInactive
didNotFinishMigration
needsToFetchUserRecord
_wasMigrated
_didNotFinishMigration
_needsToFetchUserRecord
_isInactive
_didChooseToMigrate
_accountIdentifier
_objectIDsOfClassesEligibleForLocalObjectMerge
T@"NSSet",&,N,V_objectIDsOfClassesEligibleForLocalObjectMerge
TB,N,V_wasMigrated
TB,N,V_didNotFinishMigration
TB,N,V_needsToFetchUserRecord
TB,N,V_isInactive
TB,N,V_didChooseToMigrate
T@"NSString",&,N,V_accountIdentifier
endDate
startDate
processedRecordCount
syncReason
success
processIdentifier
numberWithInt:
setEndDate:
setSuccess:
dictionaryRepresentation
setSyncReason:
bytesDownloaded
setBytesDownloaded:
bytesUploaded
setBytesUploaded:
averageRecordsPerSecond
setAverageRecordsPerSecond:
cloudKitDuration
setCloudKitDuration:
setStartDate:
_success
_syncReason
_fetchedRecordCount
_deletedRecordsCount
_modifiedRecordCount
_processedRecordCount
_bytesDownloaded
_bytesUploaded
_operationCount
_saveCount
_averageRecordsPerSecond
_cloudKitDuration
_startDate
_endDate
T@"NSString",&,V_syncReason
Tq,V_fetchedRecordCount
Tq,V_deletedRecordsCount
Tq,V_modifiedRecordCount
Tq,V_processedRecordCount
Tq,V_bytesDownloaded
Tq,V_bytesUploaded
Tq,V_operationCount
Tq,V_saveCount
Tq,V_averageRecordsPerSecond
Td,V_cloudKitDuration
TB,V_success
T@"NSDate",&,V_startDate
T@"NSDate",&,V_endDate
allDay
ckParentReminderIdentifier
completed
completionDate
contactHandles
creationDate
daCalendarItemUniqueIdentifier
displayDateDate
displayDateIsAllDay
displayDateTimeZone
displayDateUpdatedForSecondsFromGMT
Tq,D,N
dueDate
flagged
icsDisplayOrder
icsUrl
T@"NSURL",C,D,N
importedICSData
lastBannerPresentationDate
lastModifiedDate
notes
notesDocument
priority
siriFoundInAppsData
timeZone
title
titleDocument
userActivity
spotlightIndexCount
alarmStorage
T@"NSOrderedSet",&,D,N
assignments
attachments
children
list
parentReminder
T@"REMCDReminder",&,D,N
recurrenceRules
sharedToMeReminderPlaceholder
T@"REMCDSharedToMeReminderPlaceholder",&,D,N
willChangeValueForKey:
setPrimitiveValue:forKey:
didChangeValueForKey:
alarm
reminder
updateDisplayDateWithAlarm:
isTemporal
setAlarm:
ic_loggingDescriptionIncludingBrackets:
ic_isEqual:
reminderIdentifier
propertiesThatShouldTriggerReindexing
spotlightObjectToReindex
setReminderIdentifier:
write
containerURL
URLByAppendingPathComponent:
filesDirectoryURL
URLByAppendingPathComponent:isDirectory:
URLForAccountFileDirectory:
URLForHashedAttachmentDirectory:
pathExtension
stringByAppendingPathExtension:
URLForAttachmentDirectory:accountID:
URLForHashedAttachmentFileInAccount:sha512Sum:fileExtension:
createDirectoryIfNecessary:
defaultManager
checkResourceIsReachableAndReturnError:
removeItemAtURL:error:
startAccessingSecurityScopedResource
copyItemAtURL:toURL:error:
moveItemAtURL:toURL:error:
stopAccessingSecurityScopedResource
URLForHashedAttachmentFileInAccount:sha512SumWithFileExtension:
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
getResourceValue:forKey:error:
lastPathComponent
hasPrefix:
substringFromIndex:
initWithUUIDString:
initWithContainerURL:
URLForAttachmentFile:accountID:fileName:sha512Sum:
updateAttachmentFile:accountID:fileName:sha512Sum:fileURL:keepSource:error:
purgeFilesForAccountWithAccountID:error:
purgeAttachmentFilesWithAttachmentIDs:accountID:error:
purgeAttachmentFilesWithSha512SumsAndExtensions:accountID:error:
attachmentIDsFromAttachmentDirectoryWithAccountID:error:
_containerURL
T@"NSURL",R,N,V_containerURL
fileName
fileSize
sha512Sum
maxInlineAssetSizeBytes
maximumAttachmentSizeMB
maxAttachmentsPerNote
maxSubAttachmentsPerAttachment
launchAndSignificantTimeChangePollThrottleInterval
suggestedAttributesTrainingOverrides
suggestedAttributesHarvestingOverrides
templatePublicLinkTTL
templatePublicLinkOperationTimeoutInterval
alarmIDsLimitPerReminder
housekeepingActivityMinimumDelay
T@"ICCloudThrottlingPolicy",R
Td,R
T@"NSNumber",R
T@"NSString",R
T@"NSDictionary",R
downloadRemoteConfiguration
cloudConfigurationDownloadThrottleInterval
extraneousAlarmsCleanUpTriggerReductionFactor
extraneousAlarmsDeleteCountLimit
extraneousAlarmsDeleteCountThreshold
extraneousAlarmsBackoffThrottleInterval
extraneousAlarmsThrottleInterval
staledFileAttachmentCleanupDefaultThrottleInterval
staledFileAttachmentCleanupBackoffThrottleInterval
staledFileAttachmentCleanupRateReduceFactor
staledFileAttachmentCleanupPerRunDeleteLimit
imageDeduplicationDefaultThrottleInterval
imageDeduplicationBackoffThrottleInterval
imageDeduplicationRateReduceFactor
imageDeduplicationApproximatePerRunDeleteLimit
setMinimumClientVersion:
setThrottlingPolicy:
setPollingInterval:
setMaxInlineAssetSizeBytes:
setMaximumAttachmentSizeMB:
setMaxAttachmentsPerNote:
setMaxSubAttachmentsPerAttachment:
setResultsLimitPerSyncOperation:
setFetchCacheCountLimit:
setReachabilityChangeSyncThrottleInterval:
setLaunchAndSignificantTimeChangePollThrottleInterval:
setPersistedSubscriptionIDsValidityPeriod:
setApsDebouncerDefaultInterval:
setApsDebouncerMigrationInProgressInterval:
setApsDebouncerWatchDefaultInterval:
setApsDebouncerWatchMigrationInProgressInterval:
setAccountChangedDebouncerInterval:
setMergeLocalObjectsInitialRetryInterval:
setMergeLocalObjectsMaximumRetryCount:
setMergeLocalObjectsRetryStartOverThrottleInterval:
setCloudSchemaCatchUpSyncInitialRetryInterval:
setCloudSchemaCatchUpSyncMaximumRetryCount:
setFetchDatabaseChangesOperationPerScopePerAccountMaximumRetryCount:
setObjectEffectiveVersionValidationFlushBatchSize:
setSuggestedAttributesTrainingOverrides:
setSuggestedAttributesHarvestingOverrides:
setManualSortHintClientSideExpiration:
setManualSortHintLastAccessedUpdatePolicy:
setTemplatePublicLinkTTL:
setTemplatePublicLinkOperationTimeoutInterval:
setAlarmIDsLimitPerReminder:
setTapToRadarThrottlingInterval:
setHousekeepingActivityMinimumDelay:
setCloudConfigurationDownloadThrottleInterval:
setExtraneousAlarmsCleanUpTriggerReductionFactor:
setExtraneousAlarmsDeleteCountLimit:
setExtraneousAlarmsDeleteCountThreshold:
setExtraneousAlarmsBackoffThrottleInterval:
setExtraneousAlarmsThrottleInterval:
extraneousAlarmsCollectorDebounceInterval
setExtraneousAlarmsCollectorDebounceInterval:
setStaledFileAttachmentCleanupDefaultThrottleInterval:
setStaledFileAttachmentCleanupBackoffThrottleInterval:
setStaledFileAttachmentCleanupRateReduceFactor:
setStaledFileAttachmentCleanupPerRunDeleteLimit:
setImageDeduplicationDefaultThrottleInterval:
setImageDeduplicationBackoffThrottleInterval:
setImageDeduplicationRateReduceFactor:
setImageDeduplicationApproximatePerRunDeleteLimit:
_minimumClientVersion
_throttlingPolicy
_pollingInterval
_maxInlineAssetSizeBytes
_maximumAttachmentSizeMB
_maxAttachmentsPerNote
_maxSubAttachmentsPerAttachment
_resultsLimitPerSyncOperation
_fetchBatchSize
_fetchCacheCountLimit
_reachabilityChangeSyncThrottleInterval
_launchAndSignificantTimeChangePollThrottleInterval
_persistedSubscriptionIDsValidityPeriod
_apsDebouncerDefaultInterval
_apsDebouncerMigrationInProgressInterval
_apsDebouncerWatchDefaultInterval
_apsDebouncerWatchMigrationInProgressInterval
_accountChangedDebouncerInterval
_mergeLocalObjectsInitialRetryInterval
_mergeLocalObjectsMaximumRetryCount
_mergeLocalObjectsRetryStartOverThrottleInterval
_cloudSchemaCatchUpSyncInitialRetryInterval
_cloudSchemaCatchUpSyncMaximumRetryCount
_fetchDatabaseChangesOperationPerScopePerAccountMaximumRetryCount
_objectEffectiveVersionValidationFlushBatchSize
_suggestedAttributesTrainingOverrides
_suggestedAttributesHarvestingOverrides
_manualSortHintClientSideExpiration
_manualSortHintLastAccessedUpdatePolicy
_templatePublicLinkTTL
_templatePublicLinkOperationTimeoutInterval
_alarmIDsLimitPerReminder
_tapToRadarThrottlingInterval
_housekeepingActivityMinimumDelay
_cloudConfigurationDownloadThrottleInterval
_extraneousAlarmsCleanUpTriggerReductionFactor
_extraneousAlarmsDeleteCountLimit
_extraneousAlarmsDeleteCountThreshold
_extraneousAlarmsBackoffThrottleInterval
_extraneousAlarmsThrottleInterval
_extraneousAlarmsCollectorDebounceInterval
_staledFileAttachmentCleanupDefaultThrottleInterval
_staledFileAttachmentCleanupBackoffThrottleInterval
_staledFileAttachmentCleanupRateReduceFactor
_staledFileAttachmentCleanupPerRunDeleteLimit
_imageDeduplicationDefaultThrottleInterval
_imageDeduplicationBackoffThrottleInterval
_imageDeduplicationRateReduceFactor
_imageDeduplicationApproximatePerRunDeleteLimit
T@"NSString",&,V_minimumClientVersion
T@"ICCloudThrottlingPolicy",&,V_throttlingPolicy
Td,V_pollingInterval
TQ,V_maxInlineAssetSizeBytes
T@"NSNumber",&,V_maximumAttachmentSizeMB
TQ,V_maxAttachmentsPerNote
TQ,V_maxSubAttachmentsPerAttachment
TQ,V_resultsLimitPerSyncOperation
TQ,V_fetchBatchSize
TQ,V_fetchCacheCountLimit
Td,V_reachabilityChangeSyncThrottleInterval
Td,V_launchAndSignificantTimeChangePollThrottleInterval
Td,V_persistedSubscriptionIDsValidityPeriod
Td,V_apsDebouncerDefaultInterval
Td,V_apsDebouncerMigrationInProgressInterval
Td,V_apsDebouncerWatchDefaultInterval
Td,V_apsDebouncerWatchMigrationInProgressInterval
Td,V_accountChangedDebouncerInterval
Td,V_mergeLocalObjectsInitialRetryInterval
TQ,V_mergeLocalObjectsMaximumRetryCount
Td,V_mergeLocalObjectsRetryStartOverThrottleInterval
Td,V_cloudSchemaCatchUpSyncInitialRetryInterval
TQ,V_cloudSchemaCatchUpSyncMaximumRetryCount
TQ,V_fetchDatabaseChangesOperationPerScopePerAccountMaximumRetryCount
TQ,V_objectEffectiveVersionValidationFlushBatchSize
T@"NSDictionary",&,V_suggestedAttributesTrainingOverrides
T@"NSDictionary",&,V_suggestedAttributesHarvestingOverrides
Td,V_manualSortHintClientSideExpiration
T@"NSString",&,V_manualSortHintLastAccessedUpdatePolicy
Td,V_templatePublicLinkTTL
Td,V_templatePublicLinkOperationTimeoutInterval
TQ,V_alarmIDsLimitPerReminder
Td,V_tapToRadarThrottlingInterval
Td,V_housekeepingActivityMinimumDelay
Td,V_cloudConfigurationDownloadThrottleInterval
T@"NSNumber",&,V_extraneousAlarmsCleanUpTriggerReductionFactor
TQ,V_extraneousAlarmsDeleteCountLimit
TQ,V_extraneousAlarmsDeleteCountThreshold
Td,V_extraneousAlarmsBackoffThrottleInterval
Td,V_extraneousAlarmsThrottleInterval
Td,V_extraneousAlarmsCollectorDebounceInterval
Td,V_staledFileAttachmentCleanupDefaultThrottleInterval
Td,V_staledFileAttachmentCleanupBackoffThrottleInterval
T@"NSNumber",&,V_staledFileAttachmentCleanupRateReduceFactor
TQ,V_staledFileAttachmentCleanupPerRunDeleteLimit
Td,V_imageDeduplicationDefaultThrottleInterval
Td,V_imageDeduplicationBackoffThrottleInterval
T@"NSNumber",&,V_imageDeduplicationRateReduceFactor
TQ,V_imageDeduplicationApproximatePerRunDeleteLimit
defaultSessionConfiguration
setDiscretionary:
set_sourceApplicationBundleIdentifier:
sessionWithConfiguration:
loadLocalConfigurationFile
stringForKey:
fileURLWithPath:
availableConfigurationURLs
ic_objectPassingTest:
setDefaultConfigurationURL:
containsString:
path
URLForDirectory:inDomain:appropriateForURL:create:error:
URLByAppendingPathExtension:
bundleForClass:
resourceURL
enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:
cachedConfigurationURL
dictionaryWithContentsOfURL:
isConfigurationValid:
setConfigurationFromDictionary:
defaultConfigurationURL
loadConfigurationFromURL:
URLWithString:
downloadConfigurationFromRemoteURL:completionHandler:
session
statusCode
propertyListWithData:options:format:error:
writeToURL:error:
localizedStringForStatusCode:
dataTaskWithURL:completionHandler:
resume
initWithBatchInterval:numberOfBatches:
cloudKitResultsLimitPerSyncOperation
unsignedIntValue
setStorage:
storage
setValue:forKey:
forwardingTargetForSelector:
valueForUndefinedKey:
setValue:forUndefinedKey:
setSession:
_storage
_session
Td,D
T@"NSNumber",&,D
TQ,D
T@"_ICCloudConfigurationStorage",&,V_storage
T@"NSURLSession",&,V_session
T@"ICCloudThrottlingPolicy",R,D
Td,R,D
TQ,R,D
T@"NSNumber",R,D
T@"NSString",R,D
T@"NSDictionary",R,D
numberWithUnsignedLongLong:
objectIdentifier
primitiveValueForKey:
setPreviousList:
willChangeList:toList:
validateForInsert:
_validateForReminderTreeConsistency:
validationPolicy
saveShouldContinueIfCustomValidationFailed
setCustomValidationFailed:
validateForUpdate:
_validateMoveAcrossLists:
shouldValidateMoveAcrossSharedList
_validateMoveAcrossSharedLists:
_validateAssignmentsForInvalidSharees:
type
initWithAccountType:
supportsMoveAcrossLists
previousList
validationErrorMoveReminderFromList:toList:inAccount:
supportsMoveAcrossSharedLists
isShared
validationErrorNestedSubtask:parentReminderID:
ckNeedsInitialFetchFromCloud
validationErrorSubtaskAndParentNotOnSameList:parentReminderID:
supportsAssignments
objectEnumerator
assignee
originator
isShareeActivelyParticipatingWithSharee:
setAssignee:
setOriginator:
timeZoneWithName:
initWithDate:allDay:timeZone:
displayDate
setDisplayDateDate:
isAllDay
setDisplayDateIsAllDay:
setDisplayDateTimeZone:
defaultTimeZone
secondsFromGMT
setDisplayDateUpdatedForSecondsFromGMT:
willSave
willSave_handledExtraneousAlarmsMarking
setWillSave_handledExtraneousAlarmsMarking:
changedValues
markExtraneousAlarmsForDeletion
willSave_handledUpdateDisplayDate
setWillSave_handledUpdateDisplayDate:
updateDisplayDate
didSave
displayDateUtils
dueDateComponents
alarms
displayDateWithDueDateComponents:alarms:
setDisplayDate:
modelObject
updateDisplayDateWithDueDateComponents:alarm:alarmsProviding:
setSpotlightIndexCount:
incrementSpotlightIndexCount
setList:
_displayDateUtils
T@"REMCDList",&,N,VpreviousList
TB,N,VwillSave_handledExtraneousAlarmsMarking
T@"REMDisplayDate",&,N
T@"REMDisplayDateUtils",R,&,N,V_displayDateUtils
TB,N,VwillSave_handledUpdateDisplayDate
requestFreeSpace:atPath:effortLevel:queue:completionBlock:
object
T@"REMCDRootEntityObject",&,D,N
template
T@"REMCDTemplate",&,D,N
savedReminder
T@"REMCDSavedReminder",&,D,N
savedAttachment
T@"REMCDSavedAttachment",&,D,N
effectiveMinimumSupportedVersion
setReminder:
parentEffectiveMinimumSupportedVersion
debug_lowLevelRemoveFromParent
keyPathsForValuesAffectingEffectiveMinimumSupportedVersion
uuidString
hostURL
owner
fileExistsAtPath:isDirectory:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
daysOfTheMonth
daysOfTheWeek
daysOfTheYear
firstDayOfTheWeek
frequency
interval
monthsOfTheYear
occurrenceCount
setPositions
weeksOfTheYear
willAccessValueForKey:
didAccessValueForKey:
compare:
validationErrorListHasNoAccount:
validateForDelete:
stringRepresentation
removeMuteNotificationOptionsForSharedList:
sharees
sharingStatus
isSharedWithShareeCount:sharingStatus:
reminderIDsMergeableOrdering
setReminderIDsMergeableOrdering:
_parentZoneMismatchErrorDebugDescription
timeZoneFromName:
rem_dateComponentsWithDateUsingArchivingTimeZone:isAllDay:
rem_dateComponentsWithDate:timeZone:isAllDay:
dueDateComponentsWithDueDate:isAllDay:timeZoneName:
setDueDate:
rem_isAllDayDateComponents
setAllDay:
setTimeZone:
rem_dateWithDateComponentsUsingArchivingTimeZone:
rem_dateWithDateComponents:timeZone:
isDeleted
setIcsDisplayOrder:
setParentReminder:
setDueDateComponents:
startDateComponents
setStartDateComponents:
displayOrder
setDisplayOrder:
T@"NSDateComponents",C,N
T@"NSArray",R,N
TQ,N
data
timeInterval
Td,D,N
clientName
lastConsumedChangeTokenData
lastConsumedDate
sharedToMeReminderCKIdentifier
hashtagLabel
T@"REMCDHashtagLabel",&,D,N
initRequiringSecureCoding:
encodeSystemFieldsWithCoder:
finishEncoding
encodedData
initForReadingFromData:error:
initWithCoder:
transformedValueClass
transformedValue:
reverseTransformedValue:
setParentList:
setParentAccount:
oldExternalIdentifier
oldListIdentifier
managerData
version
isTemporaryID
obtainPermanentIDsForObjects:error:
ic_objectIDsFromObjects:
ic_obtainPermanentObjectIDIfNecessary
ic_permanentObjectID
performBlock:
addObserverForName:object:queue:usingBlock:
ic_objectsMatchingPredicate:sortDescriptors:propertiesToFetch:relationshipKeyPathsForPrefetching:context:
ic_objectsMatchingPredicate:sortDescriptors:context:
ic_objectIDsMatchingPredicate:sortDescriptors:context:
ic_postNotificationOnMainThreadWithName:
ic_postNotificationOnMainThreadAfterSaveWithName:
ic_objectFromObjectID:context:
ic_permanentObjectIDsFromObjects:
ic_objectIDsMatchingPredicate:context:
ic_dictionariesMatchingPredicate:propertiesToFetch:context:
isCloudSchemaCatchUpSyncNeededForAccountIdentifier:context:outPersistenceCloudSchemaVersion:
setPersistenceCloudSchemaVersion:
setIsCloudSchemaCatchUpSyncNeeded:
_computeShouldPerformCloudSchemaCatchUpSyncFrom:storeController:
supportsCloudSchemaCatchUpSyncBackgroundScheduling
debugForceSupportBackgroundScheduling
setShouldPerformCloudSchemaCatchUpSync:
_isCloudSchemaCatchUpSyncNeeded
_shouldPerformCloudSchemaCatchUpSync
_persistenceCloudSchemaVersion
TB,N,V_isCloudSchemaCatchUpSyncNeeded
TB,N,V_shouldPerformCloudSchemaCatchUpSync
Tq,N,V_persistenceCloudSchemaVersion
isPhantom
isUnsupported
awakeFromInsert
insertCloudStateOnAwakeFromInsert
awakeFromFetch
insertCloudStateIfNeededOnAwakeFromFetch
didTurnIntoFault
clearTransformedCKServerValueCachesOnDidTurnIntoFault
_allowsObjectSupportedVersion
_markDirtyForEffectiveMinimumSupportedVersionValidation
shouldUseResolutionTokenMapForMergingData
cached_CDResolutionMap
resolutionTokenMapFromJsonData:
jsonDataFromResolutionTokenMap:
setResolutionTokenMapData:
setCached_CDResolutionMap:
setHack_resolutionTokenMapCopy:
hack_resolutionTokenMapCopy
isEqualToData:
objc_toJSONString
dataUsingEncoding:
initWithData:encoding:
objc_newObjectFromJSONString:
resolutionTokenMap
setResolutionTokenMap:
setPreviousAccount:
hack_willSaveHandled
setHack_willSaveHandled:
supportsCoreSpotlightIndexing
spotlightIndexCountUpdated
intersectSet:
setSpotlightIndexCountUpdated:
hack_didHandleShouldSyncUpDelete
setHack_didHandleShouldSyncUpDelete:
setShouldSyncUpDeleteIfNeeded
willSave_Swift
didSave_Swift
setValidateForInsertion_handledJournalEntries:
setValidateForUpdate_handledJournalEntries:
_validateZoneOwnerNamesWithLogPrefix:error:
validateForInsertion_handledJournalEntries
validateForInsert_Swift:
previousAccount
validationErrorMoveFromAccount:toAccount:objectID:
validateForUpdate_handledJournalEntries
validateForUpdate_Swift:
parentCloudObject
validationErrorDifferentZoneObjectID:zoneOwnerName:parentObjectID:parentZoneOwnerName:
shouldMarkAsDeletedInsteadOfDeletingImmediately
markForDeletion
deleteAllChildrenFromLocalDatabase
recursiveMarkForDeletion:usingVisitedMap:
relationshipsByName
deleteRule
objectIDsForRelationshipNamed:
shouldCascadeMarkAsDeleteInto:forRelationship:
traverseObjectTreeUsingVisitedMap:handler:
unmarkForDeletion
externalIdentifier
encodeExternalIdentifierForMarkedForDeletionObject:
attributesByName
attributeType
className
decodeExternalIdentifierForMarkedForDeletionObject:
minimumSupportedAppVersion
setMinimumSupportedAppVersion:
effectiveMinimumSupportedAppVersion
setEffectiveMinimumSupportedAppVersion:
managedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion
destinationEntity
rem_hasPrefixCaseInsensitive:
minimumSupportedVersion
setEffectiveMinimumSupportedVersion:
objectIDWithUUID:entityName:
internalErrorWithDebugDescription:
UUID
objectIDWithUUID:
relationshipsEligibleForEffectiveMinimumSupportedVersionPropagationWithEntity:
newObjectID
conformsToREMChangeTrackingIdentifiable
T@"REMObjectID",R,N
remObjectIDWithError:
Tq,R,N
setMinimumSupportedVersion:
Tq,N
validateEffectiveMinimumSupportedVersionApplyingChange:
remChangedObjectID
isConcealed
isPlaceholder
resolutionTokenMapData
createResolutionTokenMapIfNecessary
setAccount:
updateDeletedFlagAccordingToOrphanState:
allChildObjects
fixValueBeforeMarkingForDeletionForKey:
fixValueBeforeUnmarkingForDeletionForKey:
_ckServerRecord
_ckServerShare
_mergeDataRefusedToMergeMarkedForDeletion
_mergeDataRevertedLocallyMarkedForDeletion
T@"REMCDAccount",&,N,VpreviousAccount
T@"REMResolutionTokenMap",&,N,Vhack_resolutionTokenMapCopy
TB,N,Vhack_willSaveHandled
TB,N,Vhack_didHandleShouldSyncUpDelete
T@"REMResolutionTokenMap",&,N,Vcached_CDResolutionMap
TB,N,VspotlightIndexCountUpdated
TB,N,VvalidateForInsertion_handledJournalEntries
TB,N,VvalidateForUpdate_handledJournalEntries
T@"RDStoreControllerManagedObjectContext",R,N
T@"REMResolutionTokenMap",&,N
T@"NSData",&,N
setOwner:
_removesDependenciesAfterFinish
initWithDomain:code:userInfo:
currentReachabilityStatus
raise:format:
initWithTimeInterval:
storageFrom:accountID:alarmID:
setTitle:
latitude
setLatitude:
longitude
setLongitude:
radius
setRadius:
referenceFrameString
setReferenceFrameString:
proximity
initWithStructuredLocation:proximity:
event
initWithEvent:
cloudKitSchemaCatchUpSyncSchedulingState
setCloudKitSchemaCatchUpSyncSchedulingState:
cloudKitSchemaCatchUpSyncLastScheduledDate
setCloudKitSchemaCatchUpSyncLastScheduledDate:
debugForceSupportCloudKitSchemaCatchUpSyncBackgroundScheduling
setDebugForceSupportCloudKitSchemaCatchUpSyncBackgroundScheduling:
setDebugForceSupportBackgroundScheduling:
T@"NSDate",&,N
TB,N
setCloudSchemaCatchUpSyncSchedulingStateStorage:
initWithCloudSchemaCatchUpSyncSchedulingStateStorage:
_cloudSchemaCatchUpSyncSchedulingStateStorage
T@"<ICCloudSchemaCatchUpSyncSchedulingStateStorage>",&,N,V_cloudSchemaCatchUpSyncSchedulingStateStorage
currentCalendar
components:fromDate:
dateFromComponents:
isEqualToDate:
setDay:
dateByAddingComponents:toDate:options:
setTimeStyle:
setDateStyle:
stringFromDate:
ic_isToday
ic_isYesterday
setDoesRelativeDateFormatting:
distantFuture
dateByAddingUnit:value:toDate:options:
currentLocale
dateFormatFromTemplate:options:locale:
setDateFormat:
ic_shortFormattedDate
ic_briefFormattedDate
ic_isLaterThanDate:
trigger
initWithTrigger:objectID:
setIncludesSubentities:
setRelationshipKeyPathsForPrefetching:
setSortDescriptors:
originalAlarmUID
didHandleMarkingExtraneousAlarmDuringWillSave
setDidHandleMarkingExtraneousAlarmDuringWillSave:
setIsExtraneous:
isSnooze
TB,N,VdidHandleMarkingExtraneousAlarmDuringWillSave
persistenceCloudSchemaVersionWithAccountIdentifier:context:
ic_save
numberWithLongLong:
isCloudSchemaCatchUpSyncNeededForExistingCloudObject:persistenceCloudSchemaVersion:
insertNewObjectForEntityForName:inManagedObjectContext:
setCkCloudState:
ckCloudState
cloudAccount
ckDirtyFlags
numberWithShort:
setCkIdentifier:
_isInICloudAccount
transactionAuthor
setCkDirtyFlags:
_setCKIdentifierIfNecessary
currentLocalVersion
setCurrentLocalVersion:
setLatestVersionSyncedToCloud:
setLocalVersionDate:
setCkServerRecord:
rangeOfString:
isMissingCKIdentifier:accountIdentifier:
cachedManagedObjectForCKIdentifier:accountIdentifier:
failureCountQueue
failedToSyncCountsByCKIdentifier
numberOfPushAttemptsToWaitByCKIdentifier
numberOfPushAttemptsToWaitCount
setNumberOfPushAttemptsToWaitCount:
failedToSyncCount
setFailedToSyncCount:
deleteChangeTokensAndReSync
removeAllObjects
primitiveCkZoneOwnerName
recordZoneName
isInCloud
shouldSyncUpDelete
newCloudObjectForRecord:account:context:
newObjectWithCKIdentifier:context:account:
setIdentifier:
setCachedManagedObject:forCKIdentifier:accountIdentifier:
setDaCalendarItemUniqueIdentifier:
setCkNeedsInitialFetchFromCloud:
setInCloud:
objectCkZoneOwnerNameFromCKRecordZoneID:
setCkZoneOwnerName:
exceptionWithName:reason:userInfo:
predicateForCloudKitAccountsWithKeyPathPrefix:
allCloudObjectsPredicate
allDirtyCloudObjectsPredicate
setParent:
initWithRecordID:action:
ckRecordKeyForMinimumSupportedVersion
hasSuccessfullyPushedLatestVersionToCloud
setMarkedForDeletion:
cloudSchemaCatchUpSyncContextsByAccountIdentifier
mergeSystemPropertiesIntoCDObject:fromCKRecord:
latestVersionSyncedToCloud
isPushingSameOrLaterThanVersion:
isSharedReadOnly
setCkNeedsToBeFetchedFromCloud:
updateChangeCount
needsToReFetchServerRecordValue:
fileURL
isSharedViaICloud
shouldBeDeletedFromLocalDatabaseUnlessByThisDevice:
setVersion:forOperation:
needsToFetchAfterServerRecordChanged:
deleteTemporaryAssetFilesForOperation:
versionForOperation:
resetFailureCounts
modificationDate
recordChangeTag
mergeDataFromRecord:accountID:
updateParentReferenceIfNecessary
temporaryAssets
temporaryAssetDirectoryURL
writeToURL:options:error:
initWithFileURL:
mainBundle
bundleIdentifier
deleteTemporaryFilesForAsset:
isDeletable
deletedByThisDevice
objectsToBeDeletedBeforeThisObject
uniquenessConstraints
fixValuesOfKeysWithUniqueConstraintBeforeSettingMarkedForDeletion:
lowLevelMarkForDeletion
markObjectDirtyAfterMarkedForDeletion
setDeletedByThisDevice:
lowLevelUnmarkForDeletion
markObjectDirtyAfterUnmarkedForDeletion
serverShareCheckingParent
currentUserParticipant
permission
participantID
uppercaseString
cloudkitCollaboration
restoreParentReferenceAfterUnmarkingForDeletion
weakToStrongObjectsMapTable
versionsByOperationQueue
versionsByRecordIDByOperation
longLongValue
deletedByThisDeviceOperationQueue
deletedByThisDeviceSet
recordSystemFieldsTransformer
setCkServerRecordData:
ckServerRecordData
setObjectIdentifier:
setOwnerName:
removeCkSharedObjectOwnerNamesObject:
updateObjectWithShare:
shareSystemFieldsTransformer
setCkServerShareData:
ckServerShareData
inCloud
localVersionDate
getResolutionTokenMapFromRecord:
updateForKey:
clearChangeCount
isValidObject
forcePushToCloud
__lowLevelMarkForDeletion
debug_fixValuesOfKeysWithUniqueConstraintBeforeSettingMarkedForDeletion:
debug_lowLevelMarkForDeletion
debug_markObjectDirtyAfterMarkedForDeletion
debug_lowLevelUnmarkForDeletion
debug_markObjectDirtyAfterUnmarkedForDeletion
canBeSharedViaICloud
shareTitle
shareType
currentUserShareParticipantID
didAcceptShare:
updateSharedObjectOwnerName:
cloudKitReferenceWithRecordIDAndValidateAction:
generateReolutionTokenMapForTestingWithKeys:
mergeDataRefusedToMergeMarkedForDeletion
mergeDataRevertedLocallyMarkedForDeletion
conformsToICCloudObject
objectWithRecordID:accountID:context:
newObjectWithCKRecordName:context:account:
allCloudObjectsInContext:
keyPathsForValuesAffectingNeedsToBePushedToCloud
assetForData:
deleteAllTemporaryAssetFilesForAllObjects
keyPathsForValuesAffectingNeedsToBeDeletedFromCloud
keyPathsForValuesAffectingCanBeSharedViaICloud
keyPathsForValuesAffectingIsSharedViaICloud
keyPathsForValuesAffectingIsSharedReadOnly
keyPathsForValuesAffectingServerShareCheckingParent
resetAllDeletedByThisDeviceProperties
TB,R
TB,N,GisInCloud
T@"CKRecord",&,N
T@"CKShare",&,N
T@"NSString",&,D,N
_accountType
initWithType:
notificationUserInfoPropertyNameKey
notificationUserInfoPropertyValueKey
notificationUserInfoAccountObjectIDKey
notificationUserInfoAccountTypeKey
setPersonIDSalt:
listIDsMergeableOrdering
setListIDsMergeableOrdering:
postAccountPropertyChangeNotificationWithKey:changedValue:
_accountTypeHost
height
width
rem_isDiskFullSQLError
setUuidForChangeTracking:
read
didCleanUpManualSortHintOnDeletion
setDidCleanUpManualSortHintOnDeletion:
wasDeletedDueToUserInitiatedChanges
setWasDeletedDueToUserInitiatedChanges:
didEnqueueApprovalCascade
setDidEnqueueApprovalCascade:
TB,N,VdidCleanUpManualSortHintOnDeletion
TB,N,VwasDeletedDueToUserInitiatedChanges
TB,N,VdidEnqueueApprovalCascade
token
initWithPersistentHistoryToken:
setToken:
setChanges:
timestamp
setTimestamp:
transactionNumber
setTransactionNumber:
storeID
setStoreID:
bundleID
setBundleID:
processID
setProcessID:
contextName
setContextName:
author
setAuthor:
initWithStorage:
entityNamesToIncludeFromTrackingWithOptionProvider:
changes
changedObjectID
managedObjectClassName
initWithPersistentHistoryChange:
setInternal_ChangeTransaction:
initWithPersistentHistoryTransaction:
totalMigratedCount
setTotalMigratedCount:
migrateTokenResolutionMapInObject:
migrateCRDTsInObject:
updatedObjects
totalListCount
migratedAccount
migratedListsCount
migrateCRDTsInAccount:
migrateCRDTsInList:
initWithAccountID:objectID:property:
initWithReplicaIDSource:serializedData:error:
initWithReplicaIDSource:orderedSet:
serializedData
setMigratedAccount:
setTotalListCount:
reminderIDsMergeableOrderingReplicaIDSourceWithAccountID:listID:
reminderIDUUIDStringsJSONDataFromReminderIDsMergeableOrdering:error:
setMigratedListsCount:
_migratedAccount
_totalMigratedCount
_totalListCount
_migratedListsCount
TQ,N,V_totalMigratedCount
TQ,N,V_totalListCount
TB,N,V_migratedAccount
TQ,N,V_migratedListsCount
persistentStores
_currentREMChangeTokenFromNSPersistentStores:persistentStoreCoordinator:
withManagedObjectContext:
_persistenceStoreIDsForAccountTypes:
persistentStoreForIdentifier:
_persistenceStoreIDForAccountID:
dateWithTimeIntervalSince1970:
fetchHistoryAfterDate:
_changeTokenFromCDTrackingState:error:
setLastConsumedChangeToken:
setLastConsumedDate:
_fetchCDTrackingStateWithClientID:andPerformBlock:
lastConsumedChangeToken
archivedDataWithRootObject:requiringSecureCoding:error:
errorWithREMChangeErrorCode:underlyingError:
_persistenceStoreForAccountID:
errorWithREMChangeErrorCode:
assignObject:toPersistentStore:
setClientName:
setLastConsumedChangeTokenData:
_fetchRequestWithPredicateUsingEntityNames:managedObjectContext:error:
setFetchRequest:
_errorChangeSetWithError:
_resultChangeSetByExecutingRequest:managedObjectContext:error:
fetchHistoryAfterToken:
entityForName:inManagedObjectContext:
invalidParameterErrorWithDescription:
entityDescriptionWithContext:
propertiesByName
setEntity:
deleteHistoryBeforeDate:
_executeDeleteHistoryRequest:
deleteHistoryBeforeToken:
_fetchCDAuxiliaryChangeInfosWithObjectID:inManagedObjectContext:error:
_accountTypeMaskWithBitMask:
_persistenceStoresForAccountTypes:
cachedAccountIDsByStoreIDsMap
_accountIdentifierForPersistenceStoreID:
currentPersistentHistoryTokenFromStores:
errorChangeSetWithError:
_accountIDForPersistenceStoreID:
_resolveAccountID:
_resolveObjectIDsInChanges:deletedObjectsIDMap:inManagedObjectContext:
initWithChangeTransactions:
changedManagedObjectID
entityName
resolveObjectIDWithUUID:entityName:
tombstone
unarchivedObjectOfClass:fromData:error:
currentChangeToken
currentChangeTokenForAccountTypes:
currentChangeTokenForAccountID:
earliestChangeTokenForAccountID:
getTrackingStateWithClientID:completionHandler:
saveTrackingState:withClientID:completionHandler:
fetchHistoryAfterDate:entityNames:transactionFetchLimit:completionHandler:
fetchHistoryAfterToken:entityNames:transactionFetchLimit:completionHandler:
deleteHistoryBeforeDate:completionHandler:
deleteHistoryBeforeToken:completionHandler:
fetchAuxiliaryChangeInfos:completionHandler:
setCachedAccountIDsByStoreIDsMap:
_cachedAccountIDsByStoreIDsMap
T@"NSCache",&,N,V_cachedAccountIDsByStoreIDsMap
changeTracking
T@"NSManagedObject<ICCloudObject>",R,N
initWithManagedObjectContext:
objectTreeProcessorDelegateFactoryWithTreeNode:
metrics
cloudKitMetrics
duration
intersectsSet:
initWithOptions:
initSharedSettingsWithOptions:
hasAnyOptions:
_options
TQ,N,V_options
prepareForDeletion
proposePurgingFileAttachmentWithSha512Sum:fileExtension:account:
fileAttachmentIdentifiersToPurgeByAccountIdentifier
backingCDObject
setManagedObjectID:
setBackingCDObject:
setExpanded:
managedObjectID
childrenNodes
expanded
markAsExpanded
_managedObjectID
_backingCDObject
T@"NSManagedObjectID",&,N,V_managedObjectID
T@"REMCDObject",&,N,V_backingCDObject
TB,N,Vexpanded
coreDataSave:
preprocessTreeNode:
processBatchOfTreeNodes:
setManagedObjectContext:
_managedObjectContext
T@"RDStoreControllerManagedObjectContext",W,N,V_managedObjectContext
dateComponentsData
arrayWithArray:
subclassNamesOfREMCDObjectRepresentingRootCoreDataEntities
externalModificationTag
daSyncToken
daPushKey
T@"REMCKCloudState",&,D,N
resolutionTokenMap_v2_JSON
T@"REMResolutionTokenMap",&,D,N
resolutionTokenMap_v3_JSONData
acknowledgedDate
alarmUID
isExtraneous
dueDateResolutionTokenAsNonce
T@"REMCDAlarmTrigger",&,D,N
indexOfObjectPassingTest:
objectAtIndex:
indexesOfObjectsPassingTest:
objectsAtIndexes:
indexOfObject:inSortedRange:options:usingComparator:
ic_objectBefore:wrap:
ic_objectAfter:wrap:
indexOfObject:
arrayByAddingObject:
ic_randomObject
ic_objectsOfClass:
ic_indexOfSortedObject:insertionIndex:usingComparator:
ic_indexIsValid:
ic_objectBefore:
ic_objectAfter:
ic_arrayByAddingNonNilObject:
ic_arrayByAddingObjectsFromNonNilArray:
T@,R,N
insertObject:atIndex:
nextObject
removeObjectsInArray:
ic_addNonNilObject:
ic_addObjectsFromNonNilArray:
ic_insertNonNilObject:atIndex:
ic_loggingDescriptionFromLoggable:isPretty:
ic_prettyLoggingDescription
didCleanUpManualSortHintOnMarkingForDeletion
setDidCleanUpManualSortHintOnMarkingForDeletion:
TB,N,VdidCleanUpManualSortHintOnMarkingForDeletion
address
contactLabel
mapKitHandle
routing
locationUID
initWithData:
setServerChangeTokenData:
addCkServerChangeTokensObject:
setZoneName:
setDatabaseScope:
andPredicateWithSubpredicates:
serverChangeTokensMatchingPredicate:inContext:
_serverChangeToken
T@"CKServerChangeToken",&,N,V_serverChangeToken
failureCount
retryCount
state
timeElapsed
isTerminated
setCloudContext:
cloudContext
existingShareForObject:
newShareForObject:
prepareShare:forObject:completionHandler:
rootRecordForObject:
initWithRootRecord:shareID:
initWithRootRecord:
populateShare:withObject:
setObjectContext:
saveShare:forObject:completionHandler:
saveShare:withRootRecord:object:completionHandler:
setQueuePriority:
saveServerShare:accountID:completionHandler:
objectForShare:accountID:context:
didStopSharing:recordID:accountID:queue:completionHandler:
callingParticipant
userIdentity
userRecordID
xpcDefaultQueue
containerForUserRecordID:
containerIdentifier
containerWithIdentifier:
acceptShareWithMetadata:container:accountID:fetchObjectWithCompletionHandler:
initWithShareMetadatas:
setContainer:
setPerShareCompletionBlock:
hierarchicalRootRecordID
setAcceptSharesCompletionBlock:
initWithCloudContext:
fetchShareForObjectWithManagedObjectID:
createShareForObjectWithManagedObjectID:appIconData:queue:completionHandler:
fetchShareIfNecessaryForObject:completionHandler:
didSaveShare:accountID:queue:completionHandler:
didStopSharing:accountID:queue:completionHandler:
didStopSharingRecordID:accountID:queue:completionHandler:
acceptShareWithMetadata:callbackQueue:completionHandler:
objectContext
_cloudContext
_objectContext
T@"ICCloudContext",&,N,V_cloudContext
T@"NSManagedObjectContext",&,N,V_objectContext
_shouldValidateMoveAcrossSharedList
_saveShouldContinueIfCustomValidationFailed
_customValidationFailed
TB,R,N,V_shouldValidateMoveAcrossSharedList
TB,R,N,V_saveShouldContinueIfCustomValidationFailed
TB,N,V_customValidationFailed
insertedObjects
deletedObjects
hasPendingListNameRelatedChanges
validateDirtyEffectiveMinimumSupportedVersions
confirmOrRejectFilePurgeCandidatesThatMightBeDeduplicatedAcrossMultipleAttachments
purgeDeletedFileAttachments
pendingPostSaveActions
notifyDidMarkExtraneousAlarmsPendingToSyncUpDelete
setPendingPostSaveActions:
recordSaveWith:
propertiesToFetch
recordFetchWith:
countForFetchRequest:error:
storeForAccountIdentifier:
superentity
valueForKeyPath:
subentities
_heightOfEntityNodeInMOMTreeForEffectiveMinimumSupportedVersionPropagation:heightMap:
removeLastObject
topologicallyWeightedEntitiesForEffectiveMinimumSupportedVersionPropagation
sortedArrayUsingComparator:
_validateDirtyEffectiveMinimumSupportedVersionsWithBatchSize:isManualValidation:
managedObjectIDsSortedByTopologicalWeightsForEffectiveMinimumSupportedVersionPropagation:
initWithTraversalOrder:batchSize:delegate:
traverse:
candidateFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier
stringByDeletingPathExtension
setReturnsDistinctResults:
confirmedFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier
rejectPurgingFileAttachmentWithSha512Sum:fileExtension:account:
fileIOWorkerQueue
_unitTest_purgeDeletedFileAttachmentsDidComplete
_setAllowsExpandedUserInfoKeys:
persistentStoreOfAccountWithAccountID:
containerShouldSortChildrenAfterFetchingWithRecordID:
_rem_setAllowsExpandedUserInfoKeys:
_debug_managedObjectIDsSortedByTopologicalWeightsForEffectiveMinimumSupportedVersionPropagation:
_unittest_validateDirtyEffectiveMinimumSupportedVersionsManually
setStoreController:
setManagedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion:
setFileAttachmentIdentifiersToPurgeByAccountIdentifier:
_unittest_awakeCounts
set_unittest_awakeCounts:
set_unitTest_purgeDeletedFileAttachmentsDidComplete:
setCandidateFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier:
setConfirmedFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier:
_shouldSortChildrenAfterFetching
_validationPolicy
_affectedStores
_batchFetchHelper
_cloudSchemaCatchUpSyncContextsByAccountIdentifier
_recordIDsToSortChildrenAfterFetching
_managedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion
_fileAttachmentIdentifiersToPurgeByAccountIdentifier
_pendingPostSaveActions
__unittest_awakeCounts
__unitTest_purgeDeletedFileAttachmentsDidComplete
_candidateFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier
_confirmedFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier
T@"NSMutableDictionary",&,N,V_candidateFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier
T@"NSMutableDictionary",&,N,V_confirmedFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier
T@"RDStoreController",W,N,V_storeController
T@"RDStoreControllerValidationPolicy",&,N,V_validationPolicy
T@"NSArray",&,N,V_affectedStores
T@"ICBatchFetchHelper",&,N,V_batchFetchHelper
T@"NSDictionary",&,N,V_cloudSchemaCatchUpSyncContextsByAccountIdentifier
TB,N,V_shouldSortChildrenAfterFetching
T@"NSMutableSet",&,N,V_recordIDsToSortChildrenAfterFetching
T@"NSMutableSet",&,N,V_managedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion
T@"NSMutableDictionary",&,N,V_fileAttachmentIdentifiersToPurgeByAccountIdentifier
TQ,N,V_pendingPostSaveActions
T@"NSDictionary",&,N,V__unittest_awakeCounts
T@?,C,N,V__unitTest_purgeDeletedFileAttachmentsDidComplete
rd_associatedCoreSpotlightDelegate
setRd_associatedCoreSpotlightDelegate:
T@"NSCoreDataCoreSpotlightDelegate",&,N
enableCoreSpotlightIndexing
deleteAllIndicesIfVersionOutdatedWithCompletionHandler:
persistentStoreForURL:
search
initForStoreWithDescription:coordinator:
isActivated
_startCoreSpotlightDelegate:forStore:
coreSpotlightExporter
deleteAllIndicesWithCompletionHandler:
setIsActivated:
pendingReindexAll
reindexAllSearchableItems
pendingReindexIdentifiers
reindexSearchableItemsWithIdentifiers:
setPendingReindexAll:
earlyStoppedStoreIdentifiers
stopSpotlightIndexing
setShouldStart:
reindexAllSearchableItemsWithAcknowledgementHandler:
reindexSearchableItemsWithIdentifiers:acknowledgementHandler:
shouldStart
startSpotlightIndexing
initWithIsolated:coordinator:
validateIndexVersionWithCompletionHandler:
createAndAttachCoreSpotlightDelegateForStoreWithDescription:
deleteIndicesForStore:
activateCoreSpotlightDelegates
stopCoreSpotlightDelegatesForStores:
setEnableCoreSpotlightIndexing:
_enableCoreSpotlightIndexing
_isActivated
_pendingReindexAll
_persistentStoreCoordinator
_pendingReindexIdentifiers
_earlyStoppedStoreIdentifiers
T@"NSPersistentStoreCoordinator",R,N,V_persistentStoreCoordinator
TB,N,V_isActivated
TB,N,V_pendingReindexAll
T@"NSMutableSet",R,N,V_pendingReindexIdentifiers
T@"NSMutableSet",R,N,V_earlyStoppedStoreIdentifiers
TB,N,V_enableCoreSpotlightIndexing
daAllowsCalendarAddDeleteModify
daConstraintsDescriptionPath
daSupportsSharedCalendars
didChooseToMigrateLocally
listIDsMergeableOrdering_v2
personIDSalt_v1
ckSharedObjectOwnerNames
lists
reminders
smartLists
templates
accessLevel
displayName
firstName
lastName
middleName
namePrefix
nameSuffix
nickname
owningListIdentifier
originatedAssignments
existingOperationToDeleteRecordID:
existingOperationToFetchRecordID:
existingOperationToSaveRecordID:
cancel
containsOperationToDeleteRecordID:
containsOperationToFetchRecordID:
containsOperationToSaveRecordID:
mergedModelFromBundles:
initWithIsolated:containerURL:
initWithIsolated:containerURL:accountStoreManagementDelegate:
mainContainerURL
defaultMergePolicy
_makePersistentStoreCoordinator
strongToWeakObjectsMapTable
setL_accountStoreMap:
strongToStrongObjectsMapTable
setL_accountStorageCacheByObjectIDs:
setL_accountExternalIdentifiersToObjectIDsMap:
hashTableWithOptions:
setL_allGenericAccountsObjectIDs:
l_loadAccountStoresFromDiskDeletingFilesMarkedDeleted:shouldDeleteInvalidStoresImmediately:error:
accountStoresFailToLoadWithError:
l_activateCoreSpotlightDelegates
cloudContextHasPendingOperationsDidChange:
setAccountPropertiesNotifier:
managedObjectContextDidSave:
startNotifier
databaseDirectoryURL
storeFileNameWithStoreName:
databaseBackupDirectoryURL
systemTimeZone
rem_formatterWithTimeZone:
rem_now
URLHostAllowedCharacterSet
stringByAddingPercentEncodingWithAllowedCharacters:
managedObjectModel
initWithManagedObjectModel:
l_loadPPTStoreStatus
l_accountStoreMap
l_invalidateAccountStorageCaches:
_discoverAccountStoreURLsFromFilesOnDiskDeletingFilesMarkedDeleted:error:
l_loadAccountStoresFromDiskAndValidateInBatchesWithStoreURLs:shouldDeleteInvalidStoresImmediately:error:
l_loadDummyStoreIfNeeded
l_performManualStoreMigrations:
pptSentinelURLInContainerURL:
fileExistsAtPath:
setIsPPTStore:
isPPTStore
debugSimulateSqliteFull
absoluteString
setContainsOnlySmallDatabases:
persistentStoreOptions
lowercaseString
metadataForPersistentStoreOfType:URL:options:error:
setHasFailedLoadingAccountStoresFromDiskDueToDiskFull:
supportsLocalInternalAccount
URLByResolvingSymlinksInPath
setContainsLargeDatabases:
_removeFilesOfStoresAtURLs:outRemovedFileURLs:error:
accountStoreManagementDelegate
didRemoveStoreFilesOnInitWithURLs:
_persistentStoreConnectionPoolMaxSizeWithTotalStoreCount:
l_loadBatchOfAccountStoresFromDiskAndValidateWithStoreURLs:processedStoreIdentifiers:shouldDeleteInvalidStoresImmediately:connectionPoolMaxSize:error:
keyEnumerator
l_createOrLoadAccountStoresWithURLs:persistentStoreDescriptionOptionsOverride:isCreatingStores:error:
l_addValidatedStoresToAccountStoreMapWithStores:shouldDeleteInvalidStoresImmediately:
storeURLWithName:
_validateAccountStores:outValidStoresByAccountIDs:outInvalidStores:outLocalAccountStores:
_deduplicateStore:withStore:isLocalAccountType:managedObjectContext:
_backupInvalidStores:outBackUpFailedStores:
l_removeFromPersistentStoreCoordinatorAndDeleteImmediatelyWithStores:
l_markAccountStoreDeletedAndDeleteData:deletedObjectIDs:error:
predicateWithValue:
_deduplicateLocalAccountStore:withStore:managedObjectContext:
caseInsensitiveCompare:
lastTransactionTimestampWithManagedObjectContext:affectedStores:
isInitializing
isolated
removePersistentStore:error:
didRemoveInvalidPersistentStoreOnInitWithStore:
isDummyStoreURL:
metadata
isEqualToDictionary:
setMetadata:
URLByDeletingLastPathComponent
setRd_isExcludedFromBackup:
invalidStoreBackupURLWithFileName:
URLByDeletingPathExtension
clientNamesOfREMCDChangeTrackingStateWhichShouldNotBeResetUponPersistentHistoryTruncation
createCoordinatorForMigratingReminderDataWithClientNamesOfREMCDChangeTrackingStateWhichShouldNotBeResetUponPersistentHistoryTruncation:
_performStagedLightweightMigrationIfNeededForAccountStoreWithURL:persistentStoreDescriptionOptionsOverride:migrationCoordinator:
shouldPerformStagedLightweightMigrationForStoreAtStoreURL:
databaseStagedMigrationDirectoryURL
storeBackupURLWithFileName:
stagedLightweightCoreDataMigration
cloneStoreAtSourceStoreURL:destinationStoreURL:error:
performStagedLightweightMigrationForStoreAtStoreURL:persistentStoreDescriptionOptionsOverride:postMigrationDataUpdatesTransactionAuthor:error:
l_createAccountStoresWithIdentifiers:didAddNewStores:error:
l_setAccountIdentifier:intoMetadataOfCreatedStore:error:
initWithDictionary:
addEntriesFromDictionary:
_performStagedLightweightMigrationIfNeededForAccountStoresWithURLs:persistentStoreDescriptionOptionsOverride:
tooManyLoadedStoresError
persistentStoreDescriptionWithURL:
setType:
setShouldMigrateStoreAutomatically:
setShouldInferMappingModelAutomatically:
setConfiguration:
setOption:forKey:
setShouldAddStoreAsynchronously:
addPersistentStoreWithDescription:completionHandler:
coreSpotlightDelegateManager
l_removeAccountStoresWithIdentifiers:deletedObjectIDs:error:
_postDidRemoveAccountStoresNotificationWithDeletedObjectIDs:
entities
initWithEntityName:
mergeChangesFromRemoteContextSave:intoContexts:
didMarkForDeletingOnNextLanuchWithPersistentStore:deletedObjectIDs:
attachmentFileManager
MLModelURL
_writableURLForMLModelForURL:error:
temporaryMLModelURL
_removeAllPersistentStores:
mergePolicy
setMergePolicy:
currentQueryGenerationToken
setQueryGenerationFromToken:error:
notificationContainsChangeTrackingChangesOnly:
cloudKitNetworkActivityObservers
_notifyCloudKitNetworkActivityObservers:
isObsolete
_cleanUpCloudKitNetworkActivityObservers
updateNetworkActivityWithValue:
mergeMigrationStateFromRecord:
deleteCloudObjectIfFullyPushed:
l_accountStorageCacheByObjectIDs
AccountAbsentError
initWithAccountObjectID:accountType:initialSaltValue:callbackQueue:successHandler:errorHandler:
accountPropertiesNotifier
observeWithObserver:
unobserveWithObserver:
stagedMigrationsInfoForPersistentStoreAt:
l_accountExternalIdentifiersToObjectIDsMap
l_allGenericAccountsObjectIDs
l_primaryActiveCloudKitAccountREMObjectID
supportsAccountUtils
supportsAlarmEngine
supportsTimelineEngine
supportsAssignmentNotificationEngine
supportsApplicationShortcuts
supportsSuggestedAttributes
supportsSyncActivityNotificationEngine
supportsSharedInlineTagAutoConvertEngine
_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:
timelineEngine
entityNamesToIncludeFromTracking
unittest_setLoadAndValidateAccountStoresBatchSize:
createAccountStoresWithIdentifiers:didAddNewStores:error:
removeAccountStoresWithIdentifiers:error:
readableURLForMLModel
writableURLForMLModelWithError:
temporaryURLForMLModelWithError:
nukeDataWithError:
invalidateStoreConnectionsWithError:
purgeDeletedObjectsWithCompletionHandler:
requestFreeSpaceToLoadAccountStoresWithQueue:completionBlock:
notificationContainsInternalChangesOnly:
startObservingCloudKitNetworkActivityWithObserver:
logStoresDirectoryContents
status:
containerStats
_set_cloudContext:
supportsHashtagLabelUpdater
supportsStalePinnedListsEventHandler
supportsTemplateOperation
supportsWidgetRefresh
unittest_setEnableCoreSpotlightIndexing:
unittest_countKeysInAccountStoreMap
setContainerURL:
setIsolated:
accountUtils
setAccountUtils:
hasFailedLoadingAccountStoresFromDiskDueToDiskFull
containsLargeDatabases
containsOnlySmallDatabases
setAccountStoreManagementDelegate:
setSupportsLocalInternalAccount:
ivarLock
setIvarLock:
setIsInitializing:
setSupportsSuggestedAttributes:
setCloudKitNetworkActivityObservers:
setL_primaryActiveCloudKitAccountREMObjectID:
_isolated
_hasFailedLoadingAccountStoresFromDiskDueToDiskFull
_containsLargeDatabases
_containsOnlySmallDatabases
_supportsLocalInternalAccount
_isInitializing
_isPPTStore
_supportsSuggestedAttributes
_ivarLock
_accountPropertiesNotifier
_attachmentFileManager
_accountUtils
_accountStoreManagementDelegate
_mergePolicy
_l_accountStoreMap
_l_accountStorageCacheByObjectIDs
_l_accountExternalIdentifiersToObjectIDsMap
_l_allGenericAccountsObjectIDs
_coreSpotlightDelegateManager
_cloudKitNetworkActivityObservers
_l_primaryActiveCloudKitAccountREMObjectID
T{os_unfair_lock_s=I},N,V_ivarLock
T@"NSMergePolicy",&,N,V_mergePolicy
T@"NSURL",&,N,V_containerURL
T@"NSURL",R,N
T@"NSMapTable",&,N,V_l_accountStoreMap
T@"NSMapTable",&,N,V_l_accountStorageCacheByObjectIDs
T@"NSMapTable",&,N,V_l_accountExternalIdentifiersToObjectIDsMap
T@"NSHashTable",&,N,V_l_allGenericAccountsObjectIDs
TB,N,V_isolated
T@"RDCoreSpotlightDelegateManager",R,N,V_coreSpotlightDelegateManager
TB,N,V_isInitializing
TB,N,V_hasFailedLoadingAccountStoresFromDiskDueToDiskFull
TB,N,V_containsLargeDatabases
TB,N,V_containsOnlySmallDatabases
TB,N,V_isPPTStore
TB,N,V_supportsLocalInternalAccount
TB,N,V_supportsSuggestedAttributes
T@"NSMutableSet",&,N,V_cloudKitNetworkActivityObservers
T@"REMObjectID",&,N,V_l_primaryActiveCloudKitAccountREMObjectID
T@"RDAccountPropertiesNotifier",&,N,V_accountPropertiesNotifier
T@"RDAttachmentFileManager",R,N,V_attachmentFileManager
T@"RDAccountUtils",&,N,V_accountUtils
T@"<RDStoreControllerAccountStoreManagementDelegate>",W,N,V_accountStoreManagementDelegate
updateInMemoryPrimaryActiveCKAccountREMObjectIDIfNecessary:
l_accountStoragesForAccountObjectIDs:
l_setAccountStorages:forAccountObjectIDs:
accountStoragesForAccountObjectIDs:
setAccountStorages:forAccountObjectIDs:
accountStoragesForAccountExternalIdentifiers:
setAccountStorages:forAccountExternalIdentifiers:
accountStoragesForAllGenericAccounts
setAccountStoragesForAllGenericAccountsWithStorages:
setPersistentStore:
init:
_persistentStore
T@"NSPersistentStore",W,N,V_persistentStore
transcribedText
ic_stringValue
displayNameFromListName:isPlaceholder:
daBulkRequests
daDisplayOrder
daExternalIdentificationTag
daIsEventOnlyContainer
daIsImmutable
daIsNotificationsCollection
daIsReadOnly
isGroup
lastUserAccessDate
reminderIDsMergeableOrdering_v2_JSON
sharedOwnerAddress
sharedOwnerName
isPinnedByCurrentUser
mostRecentTargetTemplateIdentifierByCurrentUser
calDAVNotifications
childLists
sharedOwner
T@"REMCDSharee",&,D,N
childSmartLists
setBatchInterval:
setNumberOfBatches:
_batchInterval
_numberOfBatches
Td,N,V_batchInterval
TQ,N,V_numberOfBatches
entitiesByName
isOptional
defaultValue
initWithEntity:
setPropertiesToUpdate:
executeRequest:withContext:error:
resultType
reachabilityWithAddress:
reachabilityForInternetConnection
stopNotifier
localWiFiStatusForFlags:
networkStatusForFlags:
reachabilityWithHostName:
reachabilityForLocalWiFi
connectionRequired
_alwaysReturnLocalWiFiStatus
_reachabilityRef
initWithCkIdentifier:accountIdentifier:
_ckIdentifier
T@"NSString",R,N,V_ckIdentifier
T@"NSString",R,N,V_accountIdentifier
setCountLimit:
queue
ckIdentifierAccountPairs
missingCKIdentifierAccountPairCache
managedObjectIDCache
dispatchBlocks
batchSize
_flush
_dispatchBlockApplyingBackPressureIfNeeded:
_canObtainPermanentIDForObject:context:ckIdentifierAccountIdentifierPair:
removeCachedManagedObjectForCKIdentifier:accountIdentifier:
setBatchSize:
setCkIdentifierAccountPairs:
setDispatchBlocks:
setManagedObjectIDCache:
setMissingCKIdentifierAccountPairCache:
setQueue:
_batchSize
_ckIdentifierAccountPairs
_dispatchBlocks
_managedObjectIDCache
_missingCKIdentifierAccountPairCache
_queue
Tq,V_batchSize
T@"NSMutableSet",&,N,V_ckIdentifierAccountPairs
T@"NSManagedObjectContext",W,N,V_managedObjectContext
T@"NSMutableArray",&,N,V_dispatchBlocks
T@"NSCache",&,N,V_managedObjectIDCache
T@"NSCache",&,N,V_missingCKIdentifierAccountPairCache
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
T@"REMCDAlarm",&,D,N
traversalOrder
traverseByPostOrder:
delegate
_flushIfNeeded:
_flushRemaining:
_traversalOrder
_delegate
TQ,R,N,V_traversalOrder
TQ,R,N,V_batchSize
T@"<REMCDObjectTreeProcessorDelegate>",W,N,V_delegate
initWithFormat:arguments:
ic_debugName
setIc_debugName:
ic_performBlock:andPerformBlockOnMainThread:
ic_performBlockAndWait:andPerformBlockAndWaitOnMainThread:
T@"NSString",&,N
batchUpdateRequestWithEntityName:
expressionForKeyPath:
assignedDate
ckAssigneeIdentifier
ckOriginatorIdentifier
owningReminderIdentifier
rem_dataWithRandomBytesWithLength:
randomSalt
_fetchCloudKitAccountsInContext:
accountByCKIdentifierFrom:
accountsMatchingPredicate:context:
getTokenForKey:
initialize
countCloudBasedAccountsInContext:
_groundTruth_primaryActiveCloudKitAccountInContext:
clearAppleCloudKitTable
_unitTest_randomPersonIDSalt
allowsReverseTransformation
updateDisplayDatesIn:
isSetupUser
initWithBundleIdentifier:
initWithDaemonController:
serviceForReminders
sharedListActivityNotifications_demoMode
stopObserving
confirmReminderByRecordId:withCompletion:
confirmRealtimeReminder:withCompletion:
rejectReminderByRecordId:withCompletion:
rejectRealtimeReminder:withCompletion:
reminderAlarmTriggeredForRecordId:withCompletion:
allRemindersLimitedTo:withCompletion:
reminderTitleForContent:withCompletion:
logUserCreatedReminderTitle:withCompletion:
acAccountIdentifiersToMigrateInactivatedCalDavData
setAcAccountIdentifiersToMigrateInactivatedCalDavData:
acAccountIdentifierToMergeLocalDataIntoSyncData
setAcAccountIdentifierToMergeLocalDataIntoSyncData:
callbackQueue
propertyName
notify:
showNotificationWithIdentifier:content:completion:
calDAVSharedListNotificationContentWithList:
supportsSecureCoding
eventsForTypes:error:
cloudKitNetworkActivityDidUpdate:
syncTimeout
setSyncTimeout:
queuesRequestsIfBusy
setQueuesRequestsIfBusy:
isEnabledWithError:
keepDirty:
isHarvestingSupported
foundInStringForRecordId:style:withCompletion:
encodeWithCoder:
copyWithZone:
logMetricAutocompleteResult:recordId:contactIdentifier:bundleId:
logMetricContactSearchResult:recordId:contactIdentifier:bundleId:
logMetricAutocompleteUserSelectedRecordId:contactIdentifier:bundleId:
logMetricContactSearchResultSelected:contactIdentifier:bundleId:
logMetricSuggestedContactDetailUsed:contactIdentifier:bundleId:
logMetricSuggestedContactDetailShown:contactIdentifier:bundleId:
logMetricContactCreated:contactIdentifier:bundleId:
logMetricSearchResultsIncludedPureSuggestionWithBundleId:
logEventInteractionForEventWithUniqueKey:interface:actionType:
logEventInteractionForEventWithExternalIdentifier:interface:actionType:
logSuggestionInteractionForRecordId:interface:actionType:
initWithDateComponents:
addAlarmWithTrigger:
initWithTitle:locationUID:latitude:longitude:radius:address:routing:referenceFrameString:contactLabel:mapKitHandle:
moveObjectsAtIndexes:toIndex:
_forceDisableFullRemindersSorting
sortWithOptions:usingComparator:
URIRepresentation
replicaIDSource
initWithUUID:entityName:
setStatus:
setOwningReminderIdentifier:
encryptedValues
setCkOriginatorIdentifier:
setCkAssigneeIdentifier:
setAssignedDate:
publicLinkURLUUID
mostRecentPublicLinkUpdateRequestDate
setPublicLinkConfigurationData:
publicLinkCreationDate
publicLinkLastModifiedDate
publicLinkExpirationDate
setPublicLinkExpirationDate:
setPublicLinkLastModifiedDate:
setPublicLinkCreationDate:
setPublicLinkURLUUID:
setMostRecentPublicLinkUpdateRequestDate:
lastAccessedSinceReferenceDate
setLastAccessedSinceReferenceDate:
listTypeRawValue
listID
concatenatedContainerIDsWithLocalContainerIDPrefix
concatenatedElementIDsWithLocalElementIDPrefix
setConcatenatedElementIDsWithLocalElementIDPrefix:
setConcatenatedContainerIDsWithLocalContainerIDPrefix:
setListID:
setListTypeRawValue:
__swift_objectForKeyedSubscript:
JSONObjectWithData:options:error:
initWithContentsOfURL:options:error:
noSuchObjectErrorWithObjectID:
initWithObjectID:accountID:reminderID:url:metadata:
setAttachments:
initWithObjectID:accountID:name:
setColor:
setBadgeEmblem:
setParentAccountID:
setSortingStyle:
setAccountID:
rem_accountObjectID
setRem_accountObjectID:
setAccountDescription:
fetchRemindersWithObjectIDs:error:
initWithStore:
assignmentContext
saveWithQueue:completion:
removeAllAssignments
actionIdentifier
updateReminder:
shareeContext
titleAsString
setBody:
isOriginatorNullified
shortName
originatorID
fetchChangesSinceLastConsumed
sinceToken
upToToken
changedModelObjectsOfModelClass:ofChangeType:
markChangesConsumed
isCompleted
assigneeID
currentAssignment
reminderID
fetchActiveCloudKitAccountObjectIDsWithFetchOption:error:
initWithREMDAAccount:clientName:withREMStore:entityNames:
fetchAndInitializeChangeTrackingStateIfNeeded
enableAssignmentNotifications
markChangesConsumed:
giveAccountWithIDAnotherChance:
debouncingInterval
setSubscriptionOwnerUserRecordName:
dateComponents
structuredLocation
accountType
username
isExchange
dataWithJSONObject:options:error:
daemonVersion:
daemonPid:
daemonStatus:completion:
containerURL:
containerStats:
nukeDatabase:
testInitialSyncWithAccountName:completion:
testReinitializeCloudKitWithAccountIdentifier:completionHandler:
testFlagAccountForInactivatedCalDAVDataMigrationWithAccountIdentifier:completionHandler:
cancelCloudKitSync:
cloudKitStatus:
fireDebugNotificationWithText:identifier:categoryIdentifier:reference:isRemove:completion:
fetchGeofencesWithCompletion:
removeGeofenceWithUUID:completion:
addGeofenceWithLatitude:longitude:radius:uuid:completion:
simulateCoreLocationEnterRegionWithIdentifier:completion:
simulateCoreLocationExitRegionWithIdentifier:completion:
persistenceStoreIDForAccountID:completion:
lowLevelMarkForDeletionWithObjectID:shouldSetDirtyFlags:shouldRemoveFromParent:completion:
lowLevelUnmarkForDeletionWithObjectID:shouldSetDirtyFlags:completion:
markAndDeleteExtraneousAlarmsFromReminderID:shouldSetDirtyFlags:completion:
setDueDateResolutionTokenNonceForAlarmID:nonce:shouldSetDirtyFlags:completion:
setDueDateResolutionTokenNonceForReminderID:nonce:shouldSetDirtyFlags:completion:
crashDaemonWithMessage:
fetchContactsMatching:completion:
createIsolatedStoreContainerWithCompletion:
destroyIsolatedStoreContainerWithToken:completion:
dataAccessStatusReports:
registerBabysitterWith:completion:
resetBabysitterWithRestrictedAccountID:completion:
downloadContainerWithAccountID:outputDir:completion:
purgeCKRecordWithRecordType:identifier:completion:
fetchAllManualSortHintsWithDetails:completion:
fetchManualSortHintWithListType:listID:completion:
removeManualSortHintWithIdentifier:completion:
resetAllManualSortHintsWithCompletion:
resetManualSortHintWithIdentifier:completion:
resetManualSortHintWithListType:listID:completion:
resetManualSortHintBeforeLastAccessed:completion:
updateManualSortHintWithIdentifier:lastAccessed:completion:
setupManualHashtagLabelUpdater
refreshHashtagLabelsImmediately
handleIncompleteTemplateOperationQueueItemsImmediately
immediatelyCreateOrUpdatePublicLinkOfTemplateWithTemplateObjectID:configuration:completion:
immediatelyRevokePublicLinkOfTemplateWithTemplateObjectID:completion:
synchronous_revertImageAttachmentsToUnDeduped:completion:
validateHashtagLabelsWithoutHashtagWithRepair:completion:
validateHashtagLabelsWithConcealedHashtagsWithRepair:completion:
validateHashtagsWithoutHashtagLabelWithRepair:completion:
validateHashtagsWithMismatchedHashtagsWithRepair:completion:
validateHashtagsWithSharedToMeReminderCKIdentifierAndMismatchedReminderCKIdentifierWithRepair:completion:
validateSharedToMeReminderPlaceholdersWithRepair:completion:
fetchAccountListOrderedIdentifiersWithAccountID:completion:
fetchAllSharedEntitySyncActivities:
addSharedEntitySyncActivityWithActivity:completion:
removeAllSharedEntitySyncActivityWithCompletion:
removeSharedEntitySyncActivityWithUUIDForChangeTracking:completion:
removeSharedEntitySyncActivitiesWithCKIdentifier:completion:
updateMinimumSupportedVersionWithObjectID:minimumSupportedVersion:completion:
updateRemCurrentRuntimeVersionDebuggingOverride:
initWithInteger:
setRemCurrentRuntimeVersionDebuggingOverride:
predicateWithFormat:argumentArray:
initWithEntity:insertIntoManagedObjectContext:
activityDate
setActivityDate:
activityType
setActivityTypeRawValue:
authorUserRecordIDString
setAuthorUserRecordIDString:
ckParentCloudObjectEntityName
setCkParentCloudObjectEntityName:
ckParentCloudObjectIdentifier
setCkParentCloudObjectIdentifier:
sharedEntityName
setSharedEntityName:
initWithAccountIdentifier:activityDate:activityType:authorUserRecordIDString:ckParentCloudObjectEntityName:ckParentCloudObjectIdentifier:ckIdentifier:sharedEntityName:uuidForChangeTracking:
activityTypeRawValue
orderedIdentifiers
setSha512Sum:
cancelledError
setETag:
setHintData:
setSerializationVersion:
hintData
eTag
serializationVersion
deleteRecordWithID:completionHandler:
registerAccount:forOperationWithName:
sharedManager
stateString
urlForIsolatedContainerWithIdentifier:
initWithIdentifier:
descriptorForRequiredKeysForStyle:
initWithKeysToFetch:
setStyle:
enumerateContactsWithFetchRequest:error:usingBlock:
predicateForContactsMatchingName:
stringFromContact:
phoneNumbers
value
emailAddresses
setDueDateResolutionTokenAsNonce:
initWithCenter:radius:identifier:
setNotifyOnEntry:
setNotifyOnExit:
retainNotificationWithIdentifier:reference:content:skipBanner:completion:
releaseNotificationWithIdentifier:reference:completion:
setCategoryIdentifier:
errorSanitizedForXPCFromError:
_unsetMigrationFlagsWithACAccount:inStore:completionHandler:
fetchAccountWithObjectID:error:
updateAccount:
removeFromStore
saveSynchronouslyWithError:
setCkUserRecordName:
setListIDsMergeableOrdering_v2:
setCkServerChangeTokens:
setCkSharedObjectOwnerNames:
setLists:
setReminders:
expressionForFunction:arguments:
setExpression:
setExpressionResultType:
setReturnsObjectsAsFaults:
setPropertiesToGroupBy:
environment
arguments
lastExtraneousAlarmsProcessedDate
useExtraneousAlarmBackOffThrottleInterval
statusReportWithCompletionBlock:
shouldSaveCompleted
initWithSmartListType:objectID:createIfNeeded:
smartListStorages
accountStorages
parentListStorages
smartListsFromSmartListStorages:accountStorages:parentListStorages:store:
listener:shouldAcceptNewConnection:
_setQueue:
updateDynamicApplicationShortcutItems:forBundleIdentifier:
setLocalizedTitle:
setIcon:
setUserInfo:
removeAlarmStorageObject:
fetchResultTokenToDiffAgainst
setCanonicalName:
initWithObjectID:accountID:reminderID:type:name:
documentFromSerializedData:replicaIDSource:forKey:ofObjectID:
attributedString
rem_enumerateHashtagInRange:options:usingBlock:
initWithKey:ascending:
syncCloudKitWithReason:discretionary:bypassThrottler:completion:
restartCloudKitSyncWithReason:bypassThrottler:completion:
syncDataAccessAccountsWithAccountIDs:bypassThrottler:completion:
deleteApplicationDataFromCloudKitWithAccountID:completion:
migrateICloudCalDavToCloudKitWithAccountID:disableCache:userInitiated:completion:
debugDownloadMigrationCacheWithAccountID:completion:
fetchUserRecordWithAccountID:completion:
setMigrationStateToDidChooseToMigrate:didFinishMigration:createZoneAccountIfFinishMigration:accountID:completion:
fetchServerRecordFor:completion:
observeCloudKitNetworkActivityChanges
performQuery:inZoneWithID:completionHandler:
setDidChooseToMigrateLocally:
initWithTrigger:
archivedData
shouldIncludeHashtags
shouldIncludeAlarmTriggersBasedOnDateOrTimeInterval
shouldIncludeAlarmTriggersBasedOnLocationOrVehicle
shouldIncludeContactsHandleData
startingDueDate
endingDueDate
descriptors
text
textMatching
parentReminderID
objectIDs
setOriginalAlarmUID:
setAlarmUID:
setAcknowledgedDate:
setTimeInterval:
setDateComponentsData:
setLocationUID:
setAddress:
setRouting:
setContactLabel:
setMapKitHandle:
setProximity:
setEvent:
unexpectedNilPropertyWithClass:property:
initWithObjectID:dateComponents:
initWithObjectID:event:
initWithTitle:locationUID:
initWithObjectID:structuredLocation:proximity:
initWithObjectID:timeInterval:
sourceListID
mergeWithMap:forKey:
setShowingLargeAttachments:
urlRepresentation
sourceListIDURL
isPersisted
setCreationDate:
setSourceListIDURL:
setLastModifiedDate:
initWithContext:
setOperationTypeRawValue:
setPriorityRawValue:
setTemplateIdentifier:
setListIdentifier:
setConfigurationData:
setMostRecentTargetTemplateIdentifierByCurrentUser:
isKindOfEntity:
unsavedManualOrdering
topLevelElementIDs
unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:
validationErrorMoveAcrossAccount:
setToken:forKey:
isOrdered
mutableOrderedSetValueForKey:
setOwningListIdentifier:
parentAccountID
parentListID
hashtagIDsToUndelete
subtaskIDsToUndelete
smartListIDsToUndelete
listIDsToUndelete
_debug_cdOriginatorLinked
_debug_cdAssigneeLinked
generateNonce
setPublicLink:
setIsPersisted:
setPreferredDefaultListID:
preferredDefaultListID
setPreferredDefaultListObjectIDUrl:
preferredDefaultListObjectIDUrl
initWithAccountStorages:listStorages:objectIDs:
managedObjectIDForURIRepresentation:
templateObjectID
accountObjectID
externalIdentifiers
debug_useInMemoryPreferredDefaultListStorage
groupObjectID
setPinnedDate:
setSmartListType:
setMostRecentTargetTemplateIdentifier:
setFilterData:
setNotesDocument:
setTitleDocument:
__swift_setObject:forKeyedSubscript:
setUndoManager:
setRetainsRegisteredObjects:
allowsKeyedCoding
encodeBool:forKey:
encodeInt:forKey:
encodeInteger:forKey:
encodeDouble:forKey:
encodeObject:forKey:
initWithFetchResultTokenToDiffAgainst:
indexName
protectionClass
attributeSetForObject:
initWithName:protectionClass:bundleIdentifier:
searchableIndex:reindexSearchableItemsWithIdentifiers:acknowledgementHandler:
searchableIndex:reindexAllSearchableItemsWithAcknowledgementHandler:
domainIdentifier
deleteSearchableItemsWithDomainIdentifiers:completionHandler:
attributeDictionary
initWithAttributes:
setContentType:
setDisplayName:
setProviderDataTypeIdentifiers:
evaluateWithObject:
emails
phones
notesAsString
setComment:
setCompletionDate:
setContentCreationDate:
setContentModificationDate:
isRecurrent
setContactKeywords:
setRankingHint:
setHashtags:
setNamedLocation:
setFullyFormattedAddress:
spotlightIndexVersion
deleteAllSearchableItemsWithCompletionHandler:
setSpotlightIndexVersion:
addHashtags:
setRecencyDate:
setFirstOccurrenceCreationDate:
setSharedToMeReminderCKIdentifier:
removeHashtags:
initWithName:canonicalName:firstOccurrenceCreationDate:recencyDate:uuidForChangeTracking:
changedIdentifiersOfModelClass:ofChangeType:
changeSet
applyFilterByTransactionAuthors:isExclusion:
supportsAttachments
housekeepingingActivityScheduler
setStaledFileAttachmentCleanupContainerDeemedClean:
staledFileAttachmentCleanupContainerDeemedClean
setStaledFileAttachmentCleanupLastExecutionDate:
staledFileAttachmentCleanupLastExecutionDate
manualOrdering
initWithObjectID:accountID:smartListType:
setParentListID:
setPriority:
.cxx_construct
operationTypeRawValue
priorityRawValue
listIdentifier
templateIdentifier
initWithPhones:emails:
preWarmModels
performSwiftInvocation:withParametersData:storages:completion:
siriFoundInAppsListID
removeHashtagsObject:
addHashtagsObject:
activityTypeDescription
isInserted
lastModifiedUserRecordID
participants
hack_overrideReminderIDsOrderingWithOrderedObjectIDs:
publicLinkConfigurationData
savedReminders
TT_gzipDeflate
includeSystemLanguage
includeSystemTimezone
includeAccountType
internalDescription
includeListNames
includeListNameFuzzedEmbeddings
includeListGroupInfo
creationDateWithinDays
dominantLanguageForString:
initWithTagSchemes:
setString:
wordEmbeddingForLanguage:
revision
embeddingWithContentsOfURL:error:
dimension
relevantWordTagsIncludeOtherWord
includeDayOfWeek
includeDates
includeReminderTitles
includeReminderTitleSaltedHash
includeReminderTitleFuzzedEmbeddings
includeIsFlagged
includePriority
includeRecurrenceInfo
includeAttachmentUTIs
includeRemindMeWhenMessagingInfo
includeUserActivityInfo
includeSubtaskInfo
includeAlarmDates
dateResolutionInSeconds
iCalendarDescription
localizedStringForLabel:
includeReminderTitleCategorySentence2Vec
includeReminderTitleCategoryUniversalGrammar
includeReminderTitleCategoryFilteredStopWords
rd_isExcludedFromBackup
matchesContactRepresentation:
orderedIdentifierMap
setOrderedIdentifierMap:
setExtraneousAlarmsCollectorContainerDeemedClean:
extraneousAlarmsCollectorContainerDeemedClean
setUpdateLastModifiedDates:
setSyncToCloudKit:
setLastBannerPresentationDate:
request
parentSavedReminderIdentifier
setParentSavedReminderIdentifier:
validationErrorUndeleteHashtagFromAnotherReminder:expectedReminderID:
mergedWithDocument:error:
archivedDictionaryData
setUserActivity:
setImportedICSData:
setIcsUrl:
setContactHandles:
setFlagged:
setCompleted:
setNotes:
setSiriFoundInAppsData:
setDaPushKey:
setDaSyncToken:
setExternalModificationTag:
setExternalIdentifier:
primaryLocaleInferredFromLastUsedKeyboard
initWithObjectID:listID:accountID:
setParentReminderID:
setTitleDocumentData:
setTitleAsStringByCDIngestor:
setRecurrenceRules:
setNotesDocumentData:
setNotesAsStringByCDIngestor:
setAlarms:
representationFromData:
setAssignments:
userActivityWithDictionaryData:error:
setOldExternalIdentifier:
setOldListIdentifier:
setThreadIdentifier:
soundWithAlertType:
setSound:
unexpectedError
categoryWithIdentifier:actions:intentIdentifiers:options:
setHiddenPreviewsBodyPlaceholder:
iconWithSystemImageName:
actionWithIdentifier:title:options:icon:
setActions:
setCategorySummaryFormat:
body
legacyNotificationIdentifier
setShouldPreventNotificationDismissalAfterDefaultAction:
setInterruptionLevel:
initWithUnsignedInt:
initWithCGImage:scale:orientation:
globallyUniqueString
attachmentWithIdentifier:URL:options:error:
setDate:
setShouldHideTime:
nextThirdsHourFromHour:
rem_isWeekendDateComponents
fetchDefaultListWithError:
setCoreBehaviorTrainingParameters:
supportsTaskSpecificEvents
setBestKForKNN:
setDidFinishMigration:
setInactive:
listIDsMergeableOrderingReplicaIDSource
setDebugSyncDisabled:
setDaSupportsSharedCalendars:
setDaAllowsCalendarAddDeleteModify:
setDaConstraintsDescriptionPath:
mergedOrderedSetWithOrderedSet:error:
hasDeserializedListIDsMergeableOrdering
listIDsMergeableOrderingData
serializedListIDsMergeableOrdering
pinnedListsManualOrdering
templatesManualOrdering
listsDADisplayOrderChanged
isLocal
isCalDav
setListsDADisplayOrderChanged:
sortedArrayWithOptions:usingComparator:
setDaDisplayOrder:
initWithObjectID:type:name:nullableListIDsMergeableOrdering:
setListIDsMergeableOrderingData:
lastPresentAlarmDate
nextScheduledAlarmDate
setNextScheduledAlarmDate:
setLastPresentAlarmDate:
content
initWithStorages:
fetchOption
initWithAccountIDs:
fetchREMObjectIDOnly
purpose
noPrimaryActiveCloudKitAccountError
initWithStore:storage:
nullifiedRelationshipErrorWithRelationshipName:
nullifiedOriginatorAssignmentWithObjectID:accountID:reminderID:assigneeID:status:assignedDate:
set_debug_cdAssigneeLinked:
set_debug_cdOriginatorLinked:
initWithObjectID:accountID:reminderID:assigneeID:originatorID:status:assignedDate:
initRecurrenceRuleWithObjectID:accountID:reminderID:frequency:interval:firstDayOfTheWeek:daysOfTheWeek:daysOfTheMonth:monthsOfTheYear:weeksOfTheYear:daysOfTheYear:setPositions:end:
recurrenceEndWithEndDate:
dayOfWeek:weekNumber:
reachabilityChangedWithNotification:
unsafeUntilSystemReady_iCloudAccountCalDavServiceWithAccountID:
firstMatchInString:options:range:
numberOfRanges
rangeAtIndex:
cloudKitMigrationDelayAfterError
initWithState:IsObserver:timeElapsed:listsMigrated:remindersMigrated:log:
cloudKitMigrationObserverPollingInterval
remindersMigrated
listsMigrated
isObserver
cloudKitMigrationMaxNumInvocations
cloudKitMigrationMaxNumFailures
setState:
setRetryCount:
setFailureCount:
setIsTerminated:
cloudKitMigrationSimulatedError
cloudKitMigrationDisableCleanUp
initWithPattern:options:error:
requestUUID
setSyncActivityNotificationEngine_accountSignInTime:
syncActivityNotificationEngine_accountSignInTime
getNotificationSettingsWithCompletionHandler:
muteNotificationOptionsForSharedList:
setHashtagLabel:
initWithObjectIDs:
listStorages
listsFromAccountStorages:listStorages:store:requestedListIDs:
observePreferredDefaultListIDWithBlock:
setIsGroup:
setSharingStatus:
setSharedOwner:
setSharees:
addShareesObject:
lookupInfo
emailAddress
phoneNumber
nameComponents
setAccessLevel:
acceptanceStatus
rem_addingTel
rem_addingMailto
setFirstName:
setMiddleName:
setLastName:
setNamePrefix:
setNameSuffix:
setNickname:
givenName
familyName
initWithType:subpredicates:
removeListsObject:
reminderIDsMergeableOrderingFromReminderIDUUIDStringsJSONData:error:
update
removeRemindersObject:
addRemindersObject:
setIsPinnedByCurrentUser:
setLastUserAccessDate:
ckShortDescription
initWithSet:
cloudKitMaxNumAlarmIDsInReminderCKRecordDebugOverride
addAlarmStorageObject:
addRecurrenceRulesObject:
removeRecurrenceRules:
removeAlarmStorage:
initWithReplicaIDSource:string:
mutableDocument
wipeAndReplaceWithString:
setCkParentReminderIdentifier:
markedForRemoval
invalidateICloudACAccounts
initWithObjectID:accountID:reminderID:type:name:creationDate:
defaultStore
setTemplate:
setHasHashtags:
setHasLocationTriggersOrVehicleEventTriggers:
initWithShort:
fetchListWithObjectID:error:
updateList:
addReminderWithTitle:toListChangeItem:reminderObjectID:
insertReminderChangeItem:afterReminderChangeItem:
subtaskContext
addReminderWithTitle:toReminderSubtaskContextChangeItem:reminderObjectID:
attachmentContext
addURLAttachmentWithURL:
setSetPositions:
setMonthsOfTheYear:
setWeeksOfTheYear:
setDaysOfTheYear:
setDaysOfTheMonth:
setDaysOfTheWeek:
dayOfTheWeek
weekNumber
setFirstDayOfTheWeek:
setInterval:
setFrequency:
recurrenceEnd
setOccurrenceCount:
recurrenceEndWithOccurrenceCount:
setUti:
setHeight:
setWidth:
setFileSize:
setFileName:
setUrl:
currentChangeToken:
currentChangeTokenForAccountTypes:completion:
currentChangeTokenForAccountID:completion:
earliestChangeTokenForAccountID:completion:
getTrackingStateWithClientID:completion:
objectIDWithURL:
initWithURL:
versionIdentifiers
isConfiguration:compatibleWithStoreMetadata:
accountStoreMissingError:
attachmentPushedToiCloudForType:
isOverdue
alarmEngine
siriFoundInAppsUserConfirmation
setAlarmStorage:
setChildren:
setDaIsNotificationsCollection:
setDaIsEventOnlyContainer:
orPredicateWithSubpredicates:
initWithKey:ascending:reverseNullOrder:
setFetchOffset:
setResolutionTokenMap_v3_JSONData:
initWithContactRepresentation:
disableAlarmEngineDataSourcePrefetching
initWithStringValue:
isLikePhoneNumber:
capabilities
matchesInString:options:range:
range
escapedPatternForString:
stringByReplacingMatchesInString:options:range:withTemplate:
baseLanguageFromLanguage:
listIDs
setIsCompleted:
internetNotReachableError
notPredicateWithSubpredicate:
keyPath
localizedStandardCompare:
initWithKey:ascending:selector:
setHostURL:
setUuidString:
initCalDAVNotificationWithObjectID:accountID:listID:uuidString:hostURL:externalIdentifier:externalModificationTag:
initWithURL:configuration:creationDate:lastModifiedDate:expirationDate:canBeUpdated:
handleNotification:
currentThread
undateify
fetchAllRecordZonesOperation
setFetchRecordZonesCompletionBlock:
isDefaultRecordZoneID
CKDescriptionPropertiesWithPublic:private:shouldExpand:
containsAssetValues
valueStore
rootDatabasePath
userInteractionsData
setUserInteractionsData:
DidCompleteInitializeAllAccountsNotification
fetchAccountsWithError:
isCloudBased
aa_isAccountClass:
isDatabaseMigrated
_addLocalAccountWithName:accountObjectID:
fetchListsWithError:
localAccountDefaultListID
addListWithName:toAccountChangeItem:listObjectID:
__addAccountWithType:name:accountObjectID:
postNotification:
removeObserver:name:object:
setAttachmentTypeRawValue:
attachmentTypeRawValue
initWithObjectID:accountID:reminderID:UTI:fileSize:fileURL:data:
initWithObjectID:accountID:reminderID:UTI:fileSize:fileURL:data:width:height:
ascending
initWithOrderedIdentifiers:
throttledErrorWithRemainingTimeInterval:
initShareeWithObjectID:accountID:listID:displayName:firstName:middleName:lastName:namePrefix:nameSuffix:nickname:address:status:accessLevel:
includeConcealedObjects
initWithAccountStorages:listStorages:reminderStorages:objectIDs:
allowConcealedObjects
initWithHashtags:
initWithAssignments:
storeProperty:forKey:
daCalendarItemUniqueIdentifiers
listObjectID
predicateDescriptor
sortDescriptors
includeIncomplete
includeCompleted
parentReminderIDs
includeUnsupported
includingSubtasks
initWithAttachment:objectID:accountID:reminderID:
addAttachment:
initWithMergeType:
resolveConflicts:error:
sourceObject
persistedSnapshot
cachedSnapshot
resolutionTokenMapWithJSONData:keyMap:
getTokenKeys
databaseObject
constraint
constraintConflictWithIdentifier:constraint:
constraintValues
conflictingObjects
supportsCRDTs
notesReplicaIDSourceWithAccountID:reminderID:
titleReplicaIDSourceWithAccountID:reminderID:
listIDsMergeableOrderingReplicaIDSourceWithAccountID:
changeType
updatedProperties
supportsPinnedLists
isPinned
accountsListCategorizedCountsCache
setAccountsListCategorizedCountsCache:
showRemindersAsOverdue
isDate:overdueAtReferenceDate:allDay:showAllDayRemindersAsOverdue:
customContext
supportsCustomSmartLists
dataRepresentationWithError:
refreshAllObjects
listType
reminderStorages
remindersFromAccountStorages:listStorages:reminderStorages:store:requestedReminderIDs:
resolutionTokenKeyForChangedKeyInREMReminderChangeItemOfREMCDSavedReminder:
attachmentRepresentationAndReturnError:
changeTrackingPerformerWithStoreContainerToken:reason:completion:
debugPerformerWithStoreContainerToken:reason:completion:
storePerformerWithProcessName:storeContainerToken:reason:completion:
syncInterfacePerformerWithReason:completion:
indexingPerformerWithReason:completion:
remoteObjectProxyWithErrorHandler:
xpcPerformerUnavailableErrorWithDescription:
serviceName
setExportedObject:
interface
setExportedInterface:
setRemoteObjectInterface:
setInterruptionHandler:
setInvalidationHandler:
valueForEntitlement:
auditToken
antecedent
consequent
miningTask:filteredRulesForExtractedRules:
miningTaskDidFinish:
miningTask:didExtractRules:
taskSpecificEventProvidersForMiningTask:
taskSpecificItemWithIdentifier:valueClass:
itemWithType:numberValue:
initWithStartDate:endDate:item:
itemWithType:stringValue:
initWithUnsignedInteger:
completionStatus
coreAnalyticsDict
support
hourOfDaySlot
isWeekend
dayOfWeek
hourOfDay
initWithURL:taskSpecificItemTypes:
retrieveRulesWithSupport:confidence:filters:
confidence
initWithAntecedent:consequent:support:confidence:
initWithStorageURL:types:targetTypes:samplingInterval:absoluteSupport:confidence:
mine
scheduledTimerWithTimeInterval:repeats:block:
terminateEarly
miningTask:didExtractEvents:
miningTask:didExtractBaskets:
miningTask:didMinePatterns:
miningTask:didError:
compareAndMergeWithMap:forKey:
forceMergeFromMap:forKey:
initTokenWithDefaultValueIfNecessaryForKey:
testIndexDummyItemWithCompletion:
initWithItemContentType:
localizedStringFromDate:dateStyle:timeStyle:
setContentDescription:
initWithUniqueIdentifier:domainIdentifier:attributeSet:
indexSearchableItems:completionHandler:
saveRequest
updateReminderChangeItem:fromICSTodo:icsCalendar:isNew:withOptions:
exportICSCalendarFromReminders:
components
_trackedListChangeItemForObjectID:
addReminderWithTitle:toListChangeItem:
setRemindersICSDisplayOrderChanged:
trackedReminderChangeItems
fetchRemindersWithError:
removeFromParent
trackedListChangeItems
removeFromList
supportsGroups
addListWithName:toAccountChangeItem:
copyListDataFrom:
isSharedToMe
rem_compare:
extraneousAlarmCleaner
setUseExtraneousAlarmBackOffThrottleInterval:
setLastExtraneousAlarmsProcessedDate:
nextRecurrentDueDateAfter:dueDate:timeZone:allDay:recurrenceRules:
initWithIncompleteReminderCounts:scheduledCount:
initWithMetadata:
sortDescriptorSortingByOrderingInAccountAscending:
initWithCount:
initWithListStorages:
initWithAccountStorages:listStorages:reminderStorages:requestedObjectIDs:metadata:
modifiedDate
uncommitedElementsAccountID
secondaryLevelElementIDsByTopLevelElementID
initWithRequestedObjectIDs:
shortValue
notSupportedError
initWithTemplateObjectID:
setObject:
setSavedAttachment:
setSavedReminder:
setReminderInZREMCDREMINDER:
setResolutionTokenMap_v2_JSON:
setSharedToMeReminderPlaceholder:
locationManager:didEnterRegion:
locationManager:didExitRegion:
locationManager:didDetermineState:forRegion:
locationManager:didFailWithError:
locationManager:monitoringDidFailForRegion:withError:
locationManagerDidChangeAuthorization:
setOnBehalfOfBundleId:
startMonitoringForRegion:
authorizationStatus
conservativeEntry
notifyOnEntry
notifyOnExit
stopMonitoringForRegion:
minimumRegionMonitoringDistance
monitoredRegions
initWithEffectiveBundle:delegate:onQueue:
locationBundleURL
locationManager:didUpdateToLocation:fromLocation:
locationManager:didUpdateLocations:
locationManager:didUpdateHeading:
locationManagerShouldDisplayHeadingCalibration:
locationManager:didRangeBeacons:inRegion:
locationManager:rangingBeaconsDidFailForRegion:withError:
locationManager:didRangeBeacons:satisfyingConstraint:
locationManager:didFailRangingBeaconsForConstraint:error:
locationManager:didChangeAuthorizationStatus:
locationManager:didStartMonitoringForRegion:
locationManagerDidPauseLocationUpdates:
locationManagerDidResumeLocationUpdates:
locationManager:didFinishDeferredUpdatesWithError:
locationManager:didVisit:
initWithDASymbolicColorName:daHexString:
initWithRed:green:blue:alpha:colorSpace:daSymbolicColorName:daHexString:ckSymbolicColorName:
titleReplicaIDSource
notesReplicaIDSource
initWithTemplateStorages:
createIfNeeded
initWithSmartListStorages:
initWithSmartListStorages:accountStorages:parentListStorages:
setRelevantShortcuts:completionHandler:
initWithIdentifier:displayString:
initWithStartDate:endDate:
initWithShortcut:
setShortcutRole:
setWidgetKind:
setRelevanceProviders:
tipKitCachedCountOfHashtags
setTipKitCachedCountOfHashtags:
tipKitCachedCountOfCustomSmartLists
setTipKitCachedCountOfCustomSmartLists:
tipKitCachedCountOfUncompletedReminders
setTipKitCachedCountOfUncompletedReminders:
tipKitCachedCountOfListsWithCustomBadge
setTipKitCachedCountOfListsWithCustomBadge:
tipKitCachedCountOfLists
setTipKitCachedCountOfLists:
notification
initWithQueue:notificationCenter:
userNotificationCenter:willPresentNotification:withCompletionHandler:
userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:
userNotificationCenter:openSettingsForNotification:
getDeliveredNotificationsWithCompletionHandler:
requestWithIdentifier:content:trigger:destinations:
addNotificationRequest:withCompletionHandler:
replaceContentForRequestWithIdentifier:replacementContent:completionHandler:
subtitle
categoryIdentifier
setWantsNotificationResponsesDelivered
setNotificationCategories:
requestWithIdentifier:content:trigger:
removeDeliveredNotificationsWithIdentifiers:
addRecurrenceRule:
nextRecurrentAdvanceAmountForDateComponents:afterDate:
removeAlarm:
rem_dateComponentsByAddingTimeInterval:
hashtagContext
addHashtagWithType:name:
setPersonIDSalt_v1:
applicationShortcut
siriKit
dataAccess
migration
inlineTagAutoConvertEngine
suggestedAttributes
setManagerData:
setVersion:
initWithManagerData:version:
attachmentPushedToiCloudForUTType:
unsafeUntilSystemReady_displayedHostnameOfICloudACAccountWithAccountIdentifier:
initWithAccountID:calendarID:
setRemXPCCompletion:
sharedMain
addToOperationsQueueDisabledCheckAndGoBlock:wrappedBlock:
transactionId
respondToShareRequestWithResponse:
rem_storeProvider
activeAgents
syncChangeTrackingPerformerWithReason:errorHandler:
syncDebugPerformerWithReason:errorHandler:
syncDebugPerformerWithErrorHandler:
syncStorePerformerWithReason:errorHandler:
asyncStorePerformerWithReason:loadHandler:errorHandler:
syncSyncInterfacePerformerWithReason:errorHandler:
asyncSyncInterfacePerformerWithReason:loadHandler:errorHandler:
syncIndexingPerformerWithReason:errorHandler:
asyncIndexingPerformerWithReason:loadHandler:errorHandler:
hasLocationTriggersOrVehicleEventTriggers
hasHashtags
executeFetchRequest:completion:
performInvocation:completion:
fetchReplicaManagerForAccountID:completion:
fetchReplicaManagersForAccountID:bundleID:completion:
compressedDistributedEvaluationDataWithOptions:completion:
saveAccountStorages:listStorages:smartListStorages:templateStorages:reminderStorages:changedKeys:replicaManagers:author:mode:synchronously:syncToCloudKit:completion:
fetchShareForObjectWithID:completion:
createShareForObjectWithID:appIconData:completion:
updateShare:accountID:completion:
stopShare:accountID:completion:
addCKShareObserverIfNeededForAccountID:completion:
acceptShareWithMetadata:completion:
acceptCalDAVShareWithCalendarURL:acAccountID:completion:
rejectCalDAVShareWithCalendarURL:acAccountID:completion:
fetchContentAttributesOfTemplateWithObjectID:completion:
createOrUpdatePublicLinkForTemplateWithObjectID:configuration:completion:
createPublicContentPreviewOfTemplateWithObjectID:configuration:completion:
revokePublicLinkForTemplateWithObjectID:completion:
downloadPublicTemplateWithPublicLinkURLUUID:completion:
notifyOfInteractionWithPeople:completion:
updateAccountsAndFetchMigrationState:completion:
updateAccountWithACAccountID:restartDA:completion:
removeOrphanedAccountWithCompletion:
requestToMergeLocalDataIntoSyncDataWithAccountIdentifier:completion:
requestToDeleteSyncDataWithAccountIdentifier:completion:
requestToDeleteLocalDataWithCompletion:
uncachedSuggestedAttributesPerformerWithReason:completion:
anchoredBubbleEnabledWithCompletion:
MCIsManagedAccountWithObjectID:completion:
requestToUpdateClientConnectionsWithShouldKeepAlive:
validatePhantomObjectsWith:shouldRepair:completion:
catchObjCException:error:
MCIsManaged
initWithBool:
personHandle
aliases
contactIdentifier
initWithReminderCount:hasDisplayDate:hasHashtags:hasLocationTriggersOrVehicleEventTriggers:hasImageAttachments:
saveErrorWithCoreDataError:
initWithResultData:storages:latestFetchResultToken:
fetchExecutor
setLastSyncPoll:
lastSyncPoll
triggerThrottledSyncWithReason:discretionary:completion:
initWithName:
setHashtagLabelsInCustomSmartListFilterCache:
hashtagLabelsInCustomSmartListFilterCache
configurationData
fetchPrimaryActiveCloudKitAccountREMObjectIDWithError:
setLastCloudConfigurationDownload:
lastCloudConfigurationDownload
publicCloudDatabase
setTimeoutIntervalForRequest:
newCloudContainerWithPublicCloudDatabase
setSavePolicy:
center
geoReferenceFrame
setGeoReferenceFrame:
setConservativeEntry:
NilValueError
InvalidValueError
setPropertyName:
initWithPersistentHistoryTokens:
persistentHistoryTokens
compareCurrentChangeTokenToLastConsumedWithResult:error:
initWithMachServiceName:
stringFromByteCount:countStyle:
setUsesSignificantDigits:
setMinimumSignificantDigits:
setMaximumSignificantDigits:
stringForObjectValue:
createFileAtPath:contents:attributes:
setImageDeduplicationLegacyAttachmentsMarkedForDeletion:
imageDeduplicationLegacyAttachmentsMarkedForDeletion
setImageDeduplicationLastExecutionDate:
imageDeduplicationLastExecutionDate
templateID
setSharedOwnerAddress:
setSharedOwnerName:
setDaIsImmutable:
setDaIsReadOnly:
setDaBulkRequests:
setDaExternalIdentificationTag:
hasDeserializedReminderIDsMergeableOrdering
reminderIDsMergeableOrderingData
remindersICSDisplayOrderChanged
reminderIDsOrderingHints
sharedOwnerID
reminderIDsToUndelete
childSmartListIDsToUndelete
childListIDsToUndelete
initWithObjectID:accountID:name:isGroup:reminderIDsMergeableOrderingData:
setSharedOwnerID:
setIsPlaceholder:
setCurrentUserShareParticipantID:
setCalDAVNotifications:
setMode:
isEnabledForDataclass:
accountDescriptionWithACAccount:
saveDidChooseToMigrate:didFinishMigration:toACAccount:inStore:completionHandler:
__addAccountWithType:name:
setObjectID:
changedKeys
disableMonitoringAgents
aa_accountsEnabledForDataclass:
isActive
fetchAccountsIncludingInactive:error:
enableMonitoringAgentsWithToken:
saveAccount:withCompletionHandler:
setAccountProperty:forKey:
rem_didChooseToMigrate
initWithDueDateCounts:
initWithSubtaskCounts:
sortDescriptorSortingByOrderingInListAscending:
initWithDueDate:count:
initWithReminderStorages:
compareObject:toObject:
dueAfter
dueBefore
hasLocation
location
fetchPrimaryActiveCloudKitAccountWithError:
initWithStore:account:storage:
postSummaryFor:
fetchResultTokenFromDataRepresentation:error:
initWithQueue:store:
setLastSuggestedAttributesAutoTrainingToken:
lastSuggestedAttributesAutoTrainingToken
encodedSavedReminders
setEncodedSavedReminders:
supportsSubtasks
noSuchSmartListErrorWithSmartListType:
listsFromAccountStorages:listStorages:store:
initWithStore:account:parentList:storage:
mutableOrderedSet
immutableOrderedSet
initWithOrderedSet:
indexOfEqualObject:
setReplicaManagerProvider:
unauthorizedErrorWithMissingEntitlement:
newObjectFromJSONObject:
initWithMap:
initWithCounter:modificationTime:replicaID:
todayNotificationFireTime
shouldIncludeRemindersDueTodayInBadgeCount
setBadge:
streamTodayNotificationFireTime:
streamShouldIncludeRemindersDueTodayInBadgeCount:
snoozeFromDueDateForFutureIntegralMultipleOfTimeInterval:
snoozeToNextThirds
snoozeFromNowForTimeInterval:
snoozeForever
orderValueWithAssignedDate:objectIdentifier:
processName
_isAddingExtraPrimaryCKAccountForTesting
validationErrorRemoveAccountBeingInserted:
validationErrorRemoveAccountBeingActivated:
rem_storeForDataAccess
rem_supportsClearingOrphanedStores
rem_saveRequestForDataAccess
rd_observePrimaryCloudKitAccountPersonIDSaltChangesOnQueue:successHandler:errorHandler:
rd_unobservePrimaryCloudKitAccountPersonIDSaltChanges:
rd_isPersonIDSaltInitiallyNilError:
rd_base64EncodedHMACStringFromString:usingPersonIDSalt:
rem_notificationPresentingForDataAccess
remindersDatabaseDidChange
updateContentsOfAllFoldersForAccountIDs:
isDataAccessEnabled
vendDaemons:
waitForSystemAvailabilityWithCompletionBlock:completionQueue:
setRem_storeProvider:
sharedDBWatcher
setRem_localDBWatcher:
setRem_userNotificationPresentingProvider:
setRem_xpcEventHandler:
_loadAndStartMonitoringAgents:
rem_localDBWatcher
initWithServiceName:functionName:serializedRequest:
setFunctionInvokeCompletionBlock:
organizationCloudDatabase
setRequestCompletedBlock:
ReminderKitAdditions
RDStoreControllerMigrator_RemoveOrphanedLists
RDStoreControllerMigrator
NSObject
ModelObjectConversions
CoreDataProperties
REMCDAuxiliaryChangeInfo
ICSelectorDelayer
REMCDAuxiliaryReminderChangeMoveInfo
RDStoreControllerMigrator_AccountIdentifierMetadata
ICCloudThrottlingPolicy
REMCKSharedObjectOwnerName
REMCDImageAttachment
ICCloudContext
APSConnectionDelegate
DABabysittable
ICREMCDAccountMergeLocalObjectsContext
ICCloudContextSyncMetrics
ICLoggable
REMCDAlarmTrigger
RDHasCKDatabaseScope
REMCDHashtag
REMRDSpotlightIndexInvalidating
RDAttachmentFileManager
_ICCloudConfigurationStorage
ICCloudConfigurationProtocol
ICCloudConfigurationDownloadable
ICCloudConfigurationExtraneousAlarm
ICCloudConfigurationStaledFileAttachmentCleanup
ICCloudConfigurationImageDeduplication
ICCloudConfiguration
ICCloudConfigurationExtraneousAlarmCollector
_ICCloudDefaultValuesConfigurationStorage
REMCDReminder
REMAlarmsProviding
REMRDSpotlightIndexProviding
RDDiskSpaceUtils
CoreDataProperties_Private
REMCDAuxiliaryReminderChangeInfo
REMCDAlarmVehicleTrigger
RDFileManager
REMCDRootEntityObject
REMCDList
CKRecordSystemFieldsTransformer
CKShareSystemFieldsTransformer
REMCDAlarmTimeIntervalTrigger
REMCDAlarmLocationTrigger
REMCDMigrationState
ICCloudSchemaCatchUpSyncContext
REMCDReplicaManager
Phantom
REMCDObject
REMThrowingObjectIDProviding
REMNullableObjectIDProviding
REMSupportedVersionParentEffectiveVersionProviding
REMSupportedVersionProviding
REMSupportedVersionUpdating
REMChangeTrackingIdentifiable
REMCDCalDAVNotification
ICNSBlockOperation
ICUtilities
SaveExtension
ICCloudSchemaCatchUpSyncSchedulingStateStorage
ICUserDefaults
IC_Private
REMCDAlarm
ICCloudSchemaCompatibilityUtils
CloudKit
ICCloudObject
REMCDAudioAttachment
REMCDAccount
reminddAdditions
REMCDHashtagLabel
REMCDAuxiliaryReminderChangeDeleteInfo
CoreDataProcessingAdditions
RDStoreControllerMigrator_JSONProperties
_REMNSPersistentHistoryTrackingAbstract
REMCKCloudState
REMCDObjectTreeProcessorDelegateFactory
REMCDRecurrenceRule
ICSyncSettings
REMCDFileAttachment
REMCDSharee
REMCDObjectEffectiveVersionValidationNode
REMCDObjectProcessableTreeNode
REMCDObjectIdentifiableTreeNode
REMCDObjectEffectiveVersionValidationDelegateImpl
REMCDObjectTreeProcessorDelegate
_REMCDObjectEffectiveVersionManualValidationNode
_REMCDObjectEffectiveVersionManualValidationDelegateImpl
REMCDAssignment
REMCDSharedToMeReminderPlaceholder
REMCDSmartList
REMCKServerChangeToken
REMCDAlarmDateTrigger
ICCollaborationController
RDStoreControllerValidationPolicy
RDStoreControllerManagedObjectContext
RDStoreController
RDCoreSpotlightDelegateManager
REMCDChangeTrackingState
REMCDURLAttachment
REMCDAttachment
ICCloudContextDelegate
REMChangeTrackingOptionsProviding
RDPersistentStoreLookup
InMemoryPrimaryActiveCKAccountREMObjectID
AccountStorageCaching
RDPersistentStoreLookupForREMCDObject
ICDataExtensions
ICCloudThrottlingLevel
RDStoreControllerMigrator_PopulateDefaultValues
ICReachability
_REMCKIdentifierAccountIdentifierPair
ICBatchFetchHelper
REMCDObjectTreeProcessor
RDStoreControllerMigrator_CKParentReminderIdentifier
PersonIDSaltGenerator
CloudKitUtils
NSValueTransformer_JSON_REMResoutionTokenMap
NSSecureUnarchiveFromDataTransformer_REMResolutionTokenMap
NSSecureUnarchiveFromDataTransformer_REMColor
NSSecureUnarchiveFromDataTransformer_REMOrderedIdentifierMap
RDStoreControllerMigrator_DisplayDate
v24@0:8Q16
B16@0:8
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@24
v32@0:8@"NSPersistentStore"16@"NSMutableDictionary"24
v24@0:8@16
@24@0:8Q16
@48@0:8@16:24d32B40B44
v16@0:8
:16@0:8
v24@0:8:16
d16@0:8
v24@0:8d16
v20@0:8B16
@?16@0:8
v24@0:8@?16
@"NSObject<OS_dispatch_queue>"
@48@0:8@16@24@32@40
@72@0:8@16@24Q32Q40@48@56@64
@32@0:8@16d24
@"NSArray"
@"ICUserDefaults"
@"NSDate"
@"NSTimer"
@32@0:8@16@24
@32@0:8@?16@24
@24@0:8@16
v56@0:8@16@24Q32Q40@?48
v32@0:8@16@?24
v36@0:8@16B24@28
v48@0:8Q16@24@32@40
v52@0:8Q16@24@32@40B48
v32@0:8Q16@24
B48@0:8@16@24@32^@40
B32@0:8@16@24
v48@0:8@16@24@32@40
v40@0:8@16@24@32
v28@0:8@16B24
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v40@0:8@"APSConnection"16@"NSData"24@"APSAppTokenInfo"32
v40@0:8@"APSConnection"16@"APSURLToken"24@"APSURLTokenInfo"32
v40@0:8@"APSConnection"16@"NSError"24@"APSURLTokenInfo"32
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
v32@0:8@"APSConnection"16@"NSArray"24
@20@0:8B16
B20@0:8B16
B28@0:8@16B24
v32@0:8r*16@?24
v36@0:8@16B24@?28
v44@0:8@16@24B32@?36
d24@0:8@16
q24@0:8@16
v32@0:8q16@24
@32@0:8@16@?24
v40@0:8@16@?24@?32
@40@0:8@16@24@32
v52@0:8@16@24@32B40@?44
v40@0:8@16@24d32
v40@0:8@16@24@?32
@48@0:8@16@24@32@?40
@60@0:8@16@24@32@40B48@52
v60@0:8@16@24@32@40B48@52
v52@0:8@16@24@32B40@44
B32@0:8@16q24
v48@0:8@16@24@32@?40
@36@0:8@16@24B32
v56@0:8@16@24@32@40@48
@40@0:8@16@24@?32
v56@0:8@16@24@32@40@?48
v40@0:8q16@24@?32
v48@0:8@16@24q32@40
@40@0:8@16q24@32
v40@0:8@16q24@32
v48@0:8@16@24@32^v40
v44@0:8B16B20B24@28@?36
v24@0:8B16B20
q16@0:8
v24@0:8q16
{os_unfair_lock_s=I}16@0:8
v20@0:8{os_unfair_lock_s=I}16
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"RDStoreController"
@"<ICCloudContextDelegate>"
@"NSOperationQueue"
@"REMAppleAccountUtilities"
@"ICCloudContextSyncMetrics"
@"NSMutableSet"
@"NSMutableDictionary"
@"ICSelectorDelayer"
@"NSDictionary"
@"NSString"
@"APSConnection"
@"_TtC7remindd37RDDebouncerWithCKDatabaseNotification"
@"_TtC7remindd21RDDebouncerWithNumber"
@"DADBuddyStateObserver"
@"RDAccountInitializerDidCompleteInitializeAllAccountsObserver"
@"RDAccountPersonIDSaltObserver"
@"NSNotificationCenter"
@"<ICCloudSchemaCatchUpSyncController>"
@"NSSet"
@"NSDictionary"16@0:8
@"<REMRDSpotlightIndexProviding>"16@0:8
@"NSSet"16@0:8
B68@0:8@16@24@32@40@48B56^@60
B32@0:8@16^@24
@40@0:8@16@24^@32
@32@0:8@16^@24
@"NSURL"
@"ICCloudThrottlingPolicy"16@0:8
@"NSNumber"16@0:8
@"ICCloudThrottlingPolicy"
@"NSNumber"
@"_ICCloudConfigurationStorage"
@"NSURLSession"
@"NSArray"16@0:8
B24@0:8^@16
@"REMDisplayDateUtils"
@"REMCDList"
v56@0:8Q16@24Q32@40@?48
@36@0:8@16B24@28
@56@0:8@16@24@32@40@48
@"REMObjectID"16@0:8
@"REMObjectID"24@0:8@"NSUUID"16
@24@0:8^@16
@"REMObjectID"24@0:8^@16
@"NSArray"24@0:8@"NSEntityDescription"16
@"<REMChangedObjectIdentifying>"16@0:8
v28@0:8B16@20
@"CKRecord"
@"CKShare"
@"REMCDAccount"
@"REMResolutionTokenMap"
@"NSDate"16@0:8
v24@0:8@"NSDate"16
@"<ICCloudSchemaCatchUpSyncSchedulingStateStorage>"
B40@0:8@16@24^q32
q32@0:8@16@24
q24@0:8q16
@"CKRecordID"16@0:8
@"CKRecord"16@0:8
v32@0:8@"NSMutableSet"16@?<v@?@"<ICCloudObject>"@"CKRecord">24
v32@0:8@"CKRecord"16@"NSString"24
v24@0:8@"CKModifyRecordsOperation"16
v32@0:8@"CKModifyRecordsOperation"16@"CKRecord"24
v40@0:8@"CKModifyRecordsOperation"16@"CKRecordID"24@"NSError"32
@"NSManagedObjectID"16@0:8
@40@0:8@"CKRecordID"16@"NSString"24@"NSManagedObjectContext"32
@40@0:8@"CKRecord"16@"NSString"24@"NSManagedObjectContext"32
@40@0:8@"CKRecord"16@"REMCDAccount"24@"NSManagedObjectContext"32
@40@0:8@"CKRecordID"16@"REMCDAccount"24@"NSManagedObjectContext"32
@"NSArray"24@0:8@"NSManagedObjectContext"16
@"REMAccountTypeHost"
@24@0:8q16
v48@0:8@16@24Q32@?40
@"NSCache"
B24@0:8Q16
@"<REMCDObjectTreeNodeIdentifierProtocol>"16@0:8
@"NSManagedObjectID"
@"REMCDObject"
B24@0:8@"<REMCDObjectProcessableTreeNode>"16
v24@0:8@"NSArray"16
@"RDStoreControllerManagedObjectContext"
@24@0:8@?16
B24@0:8@?16
@24@0:8#16
Q40@0:8@16o^Q24@?32
B24@0:8q16
@28@0:8@16B24
v32@0:8@16q24
@56@0:8@16@24@32q40@48
@48@0:8@16@24q32@40
@"CKServerChangeToken"
@"ICCloudContext"
@"NSManagedObjectContext"
@24@0:8B16B20
Q32@0:8@16@24
Q32@0:8@16^@24
Q28@0:8Q16B24
@"RDStoreControllerValidationPolicy"
@"ICBatchFetchHelper"
@28@0:8B16@20
@"NSPersistentStoreCoordinator"
v40@0:8@"ICCloudContext"16@"CKRecordZoneID"24@"NSString"32
v40@0:8@"ICCloudContext"16@"CKRecord"24@"NSString"32
v32@0:8@"ICCloudContext"16@"NSString"24
@"NSPersistentStore"24@0:8@"NSString"16
@36@0:8B16@20@28
B32@0:8B16B20^@24
@28@0:8B16^@20
B36@0:8@16B24^@28
B52@0:8@16@24B32Q36^@44
v48@0:8@16^@24^@32^@40
@44@0:8@16@24B32@36
B40@0:8@16^@24^@32
v32@0:8@16^@24
Q24@0:8Q16
B40@0:8@16^B24^@32
B44@0:8@16@24B32^@36
B40@0:8@16@24^@32
@40@0:8@16@?24@?32
v48@0:8#16@24@32@40
@"RDAccountPropertiesNotifier"
@"RDAttachmentFileManager"
@"RDAccountUtils"
@"<RDStoreControllerAccountStoreManagementDelegate>"
@"NSMergePolicy"
@"NSMapTable"
@"NSHashTable"
@"RDCoreSpotlightDelegateManager"
@"REMObjectID"
@"NSPersistentStore"
@32@0:8d16Q24
@24@0:8r^{sockaddr_in=CCS{in_addr=I}[8c]}16
q20@0:8I16
^{__SCNetworkReachability=}
@48@0:8@16@24Q32Q40
B40@0:8@16@24@32
@"NSMutableArray"
@40@0:8Q16Q24@32
@"<REMCDObjectTreeProcessorDelegate>"
v32@0:8@?16@?24
Q24@0:8@16
RDStoreControllerMigrator_RemoveUnparentedObjects
account == NULL
%@%@ = %@
v32@?0@8@16^B24
REMCDHashtagLabel
REMCDAuxiliaryChangeInfo
REMCKServerChangeToken
REMCDSmartList
com.apple.reminders.coalescer.requests
REMCDAuxiliaryReminderChangeMoveInfo
ICCloudBatchIntervalDidChangeNotification
ThrottlingPolicyCurrentBatchCount
ThrottlingPolicyCurrentLevelIndex
ThrottlingPolicyStartTime
unlimited
REMCKSharedObjectOwnerName
com.apple.remindd.cloudkit.sync.crashDetected
com.apple.reminders.cloud.waiting
Account
RemindersMigration
Metadata
CloudKitAccountStatus
CloudKitZonesNeedingFetchChanges
CloudKitAccountZonesNeedingFetchChanges
CloudDirtyUUIDKey
ZoneName
OwnerName
SubscriptionIDs
SubscriptionIDsLastModifiedDate
CloudKitLastSyncSinceInternetReachable
RootRecord
RootRecordType
ICCloudContextFetchRecordChangeOperationDidFinishNotification
ICCloudContextHasPendingOperationsDidChangeNotification
operationCount
ICCloudContextUnrecoverableErrorNotification
com.apple.reminders.cloud
Errors
com.apple.icloud-container.
com.apple.remindd.ICCloudContext.setPersonID
com.apple.remindd.ICCloudContext.setPersonIDSalt
com.apple.remindd.ICCloudContext.mergeLocalObjects
CloudKitUpdateCloudContextState
SYNC[FULL]
SYNC[APS]
SYNC[COREDATA]
PRIMARY-CLOUDKIT
unitTest_ICCloudContextPrimaryCloudKitAccountPersonIDSaltDidSetNotification
unitTest_ICCloudContextPrimaryCloudKitAccountPersonIDSaltDidFailToSetNotification
not syncing
v16@?0@"NSSet"8
com.apple.remindd.cloudkit.launch.pending.accounts.initializer
com.apple.remindd.cloudkit.launch.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver
v16@?0@"NSNotification"8
%@.%@
Saved personID changes on CK accounts upon primary CK account salt set (salt: %@)
Saved personID changes on CK accounts upon salt update error (error: %@)
Attempt to create CKContainer for Local/LocalInternal account: %@
{ %@ }
transactionAuthor
'%s' is unexpectedly nil
v32@?0@"REMCDAccount"8Q16^B24
syncDisabledByServer=%d accountAvailable=%d storeControllerSupportCloudKitSyncing=%d icSyncSetting=%d isDisabled=(%d %d) isSystemAvailableForSyncing=%d passedBuddy=%d pendingAccountInitializerCompleteOnLaunch=%d CKAccountStatusByAccountID=%@ ckContainerAccountIDs=%@
v32@?0@"NSString"8@"NSNumber"16^B24
v32@?0q8@"NSString"16@"NSError"24
v20@?0B8@"NSSet"12
^{os_state_data_s=I(?=b32I){os_state_data_decoder_s=[64c][64c]}[64c][0C]}16@?0^{os_state_hints_s=I*II}8
Cloud Context
%@ %@
operations
@"NSDictionary"8@?0
Syncing in progress
No Sync in progress
runtimeCloudKitSchemaVersion
accountIdentifier: %@ -> version: %ld
cloudKitSchemaCatchUpSyncLastSuccessDate
cloudKitSchemaCatchUpSyncLastSuccessBuildVersion
cloudKitSchemaCatchUpSyncSchedulingState
cloudKitSchemaCatchUpSyncLastScheduledDate
throttlingPolicy.processingInterval
minimumClientOSSupportedByServer
pollingInterval
reachabilityChangeSyncThrottleInterval
resultsLimitPerSyncOperation
numberOfRecordsToProcessBeforeSaving
fetchBatchSize
persistedSubscriptionIDsValidityPeriod
mergeLocalObjectsInitialRetryInterval
mergeLocalObjectsMaximumRetryCount
mergeLocalObjectsRetryStartOverThrottleInterval
cloudSchemaCatchUpSyncInitialRetryInterval
cloudSchemaCatchUpSyncMaximumRetryCount
fetchDatabaseChangesOperationPerScopePerAccountMaximumRetryCount
objectEffectiveVersionValidationFlushBatchSize
manualSortHintClientSideExpiration
manualSortHintLastAccessedUpdatePolicy
_systemBuildVersion
com.apple.remindd.cloudkit.sync.full[%@]
FULL
syncReason=%@
v32@?0@"NSString"8@"NSMutableSet"16^B24
deleting record zones
v32@?0@"NSArray"8@"NSArray"16@"NSError"24
DeleteRecordZones
Cloud syncing is not enabled.
v32@?0@"CKRecordID"8@"NSError"16^B24
v24@?0q8@"NSError"16
v32@?0@"NSString"8@"CKContainer"16^B24
v24@?0@"NSString"8^B16
%@ (%@, %@)
v32@?0@"CKRecord"8@"CKRecordID"16@"NSError"24
FetchUserRecord
v32@?0@"NSNumber"8@"NSArray"16^B24
FetchIndividualRecords
v24@?0@"CKRecordID"8d16
fetch records operation %@
v16@?0@"NSManagedObjectContext"8
v32@?0@"NSString"8@"NSArray"16^B24
v32@?0@"REMCDObject"8Q16^B24
DeleteShares
SyncAfterDeleteShare
B32@?0@"REMCDObject"8Q16^B24
v24@?0@"<ICCloudObject>"8@"CKRecord"16
Records with cross zone relationship are found. Will try to delete old records and upload new records. {count: %lu}
ModifyRecords
Oversized CloudKit Record
v32@?0@"CKOperation"8Q16^B24
@16@?0@"CKRecord"8
v32@?0Q8@"NSArray"16@"NSArray"24
v32@?0@"CKRecordID"8@"CKRecord"16@"NSError"24
v24@?0@"CKRecord"8d16
pushing record for account ID %@: %@
finished modify (save) operation with error(s)
v32@?0@8@"NSError"16^B24
Record counts[%lu] after sorting[%lu] in ICCloudContext were not equal
Fail to save context for %@
@16@?0@"NSOperation"8
You encountered a serious bug in remindd. Will you please file a Radar?
REM: %@
Please run 'remindtool diagnose --privacy normal' and attach the generated diagnose tar file to the radar (However, if you do not wish to disclose your reminders database, run `remindtool diagnose` instead so the database ie excluded).
Too many operations in ICCC operation queue. {count: %lu}
, operations: 
SaveRecordZones
com.apple.remindd.cloudkit.sync.coredata
v32@?0@"ACAccount"8Q16^B24
v32@?0@"NSString"8@"ICREMCDAccountMergeLocalObjectsContext"16^B24
Merge.Local
com.apple.remindd.cloudkit.merge.local.coredata
v32@?0@"NSString"8@"NSSet"16^B24
unset .daWasMigrated
merged objects
v24@?0@"NSDictionary"8@"RDStoreControllerManagedObjectContext"16
REMCKCloudState
v32@?0@"NSString"8@"NSMutableArray"16^B24
SaveChangedObjects
Asking to fetch changes for:
 account ID: %@, zone IDs: %@.
FetchRecordZoneChanges
record changed
v16@?0@"RDStoreControllerManagedObjectContext"8
v24@?0@"CKRecordID"8@"NSString"16
zone change token updated
v32@?0@"CKRecordZoneID"8@"CKServerChangeToken"16@"NSData"24
record zone fetch completion
v44@?0@"CKRecordZoneID"8@"CKServerChangeToken"16@"NSData"24B32@"NSError"36
fetch record zone changes completion
FetchDatabaseChanges
v16@?0@"CKRecordZoneID"8
v16@?0@"CKServerChangeToken"8
v28@?0@"CKServerChangeToken"8B16@"NSError"20
ckZoneOwnerName == %@
deleting shared zone
CKFetchDatabaseChangesOperation_%@_%@
DatabaseSubscription-%@
v24@?0@"CKDatabase"8@"NSError"16
SaveSubscriptions
com.apple.remindd.cloudkit.updateCloudContextState
Foreground
Background
reachable
not reachable
v24@?0@"CKOperation"8@"NSError"16
B32@?0@"NSError"8Q16^B24
Subscriptions
Retrying
zone changes
(name: %@, id: %@, inactive: %d)
(name: %@, id: %@, class: %@)
(name: %@, id: %@)
saving server change token
deleting server change token
deleting all server change tokens
v16@?0@"CKRecord"8
PollCloudKitWhenLaunchingAndBackgrounding
com.apple.remindd.cloudkit.accountsDidEnable.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver
com.apple.remindd.cloudkit.sync.aps
v24@?0@"CKRecordZone"8@"NSError"16
%@/%@
CloudSchemaCatchUpSync
ICCloudContext
cdAccount.remObjectID
[cdAccount.remObjectID.uuid.UUIDString isEqualToString:self.accountIdentifier]
B32@?0#8Q16^B24
(accountIdentifier: %@, didChooseToMigrate: %d, wasMigrated: %d, didNotFinishMigration: %d, needsToFetchUserRecord: %d, isInactive: %d)
reason
fetchedRecordCount
deletedRecordsCount
modifiedRecordCount
processedRecordCount
averageRecordsPerSecond
saveCount
duration
%.4f
REMCDReminder
isExecuting
isFinished
%@-%@
alarm
hashtagLabel
Attachments
Files/
Attachment-
Account-
REMCDFileAttachment
CloudConfigurationPath
ICCloudConfigurationChangedNotification
throttlingPolicy
throttlingPolicyResetIntervalSeconds
count
intervalSeconds
maxInlineAssetSizeBytes
maxAttachmentsPerNote
maxSubAttachmentsPerAttachment
pollingIntervalSeconds
fetchCacheCountLimit
maximumAttachmentSizeMB
minimumClientVersions
configurationVersion
launchAndSignificantTimeChangePollThrottleIntervalV2
cloudConfigurationDownloadThrottleInterval
apsDebouncerDefaultInterval
apsDebouncerMigrationInProgressInterval
apsDebouncerWatchDefaultInterval
apsDebouncerWatchMigrationInProgressInterval
accountChangedDebouncerInterval
extraneousAlarmsCleanUpTriggerReductionFactor
extraneousAlarmsDeleteCountLimit
extraneousAlarmsDeleteCountThreshold
extraneousAlarmsBackoffThrottleInterval
extraneousAlarmsThrottleInterval
extraneousAlarmsCollectorDebounceInterval
staledFileAttachmentCleanupDefaultThrottleInterval
staledFileAttachmentCleanupBackoffThrottleInterval
staledFileAttachmentCleanupRateReduceFactor
staledFileAttachmentCleanupPerRunDeleteLimit
imageDeduplicationDefaultThrottleInterval
imageDeduplicationBackoffThrottleInterval
imageDeduplicationRateReduceFactor
imageDeduplicationApproximatePerRunDeleteLimit
suggestedAttributesTrainingOverrides
suggestedAttributesHarvestingOverrides
templatePublicLinkOperationTimeoutInterval
alarmIDsLimitPerReminder
tapToRadarThrottlingInterval
housekeepingActivityMinimumDelay
9,0,0
https://configuration.apple.com/configurations/internetservices/cloudkit/reminders-1.0.plist
B32@?0@"NSURL"8Q16^B24
Normal
RemoteConfiguration
plist
CloudConfigurations
v12@?0B8
v32@?0@"NSData"8@"NSURLResponse"16@"NSError"24
coreBehavior
support
embedding
enabledOniOS
enabledOnmacOS
anchoredBubble
defaultWordDistanceScale
overrideLocalWordDistanceScale
relativeSupport
neighborsToConsider
month
list
assignments
REMCDAuxiliaryReminderChangeInfo
REMCDCalDAVNotification
REMCDObject
<%@ %@>
<%@ %@ %@>
REMCDRecurrenceRule
reminderIDsOrdering
reminderIDsMergeableOrdering_v2_JSON
sharees.count: %lu, sharingStatus: %d
<ServerChangeToken %@>
REMCDAlarmTimeIntervalTrigger
REMCDChangeTrackingState
REMCDHashtag
parentList
com.apple.remindd.RDAccountPropertiesErrorDomain
REMCDReplicaManager
B32@?0@"NSManagedObject"8Q16^B24
resolutionTokenMapData
Inserting
Updating
B16@?0@"REMCDObject"8
REMCD
Failed to create REMObjectID: REMCDObject.identifier or REMCDObject.entity.name is nil.
com.apple.reminders
Abstract method called -[%@ %@]
com.apple.reminderkit
default
cccc
SELF in %@
Deleted
Imported
ResolutionTokenMap
MinimumSupportedAppVersion
com.apple.reminders.cloud.failure-counts
MethodCalledOnAbstractClass
Should not call +allCloudObjectsPredicate on the abstract 'REMCDObject'
ckDirtyFlags > 0
Cross-zone parent record relationship found. Resetting ckServerRecord. { class: %@, recordID: %@, parentClass: %@, parentRecordID: %@ }
recursivelyFixCrossZoneRelationshipWithVisitedMap
Placeholder %@ { %@ } forcePushToCloud
Placeholder forcePushToCloud
TemporaryAssetFiles
B24@?0@"NSURL"8@"NSError"16
isSharedViaICloud
cloudAccount.accountType
ckServerShare
ckServerRecord
parentCloudObject.isSharedViaICloud
serverShareCheckingParent
serverShare
com.apple.reminders.cloud.versions-by-operation
com.apple.reminders.cloud.deleted-by-this-device
objectIdentifier == %@
needsToBePushedToCloud
needsToBeDeletedFromCloud
hasAllMandatoryFields
failedToSyncCount
numberOfPushAttemptsToWaitCount
REMCDAudioAttachment
FRZC
CreateFetchZoneChanges
deleteSharesForObjectsFetchAndCompletion
FetchCompletion
FetchDatabaseChangesCompletion
FetchZoneChangesCompletion
FinishOperations
ProcessCompletion
ProcessCompletionForOperations
ProcessDirtyObjects
ProcessLocalObjects
ProcessObjectsForContextDidSave
ProcessObjectsForReachabilityChanged
ProcessObjectsForRetryOperations
CFZC
DSOFC
FDCC
FZCC
POCS
PORC
PORO
personIDSalt_v1
type IN %@
REMCDAttachment
REMCDImageAttachment
lists
REMCDAuxiliaryReminderChangeDeleteInfo
RDStoreControllerMigrator_JSONProperties
changedEntity
You must override %@ in a subclass
v32@?0@"NSManagedObjectContext"8@"REMCDChangeTrackingState"16^@24
Failed to find entity name in -fetchHistoryAfterToken:entityName.
%K IN %@
Attempting to get errorChangeSet with nil error.
clientName == %@ AND accountIdentifier == %@
object
(none)
v32@?0@"CKRecordZoneID"8@"CKFetchRecordZoneChangesConfiguration"16^B24
serverChangeToken
backingCDObject
v32@?0@8Q16^B24
AccountsDidChange
ApplicationWillEnterForeground
CloudKitAccountChanged
CloudSchemaCatchUpSyncBackgroundActivity
ExtraneousAlarmsCollector
InitWithStoreController
Poll
PushNotification
AccountsDidChangeCancelEverything
ReachabilityChanged
DeleteRecordZonesWithZoneIDs
RetryCKFetchDatabaseChangesOperation
RetryCloudSchemaCatchUpSync
RetryMergeLocalObjects
SyncAfterAcceptShare
TestInitialSync
UnrecoverableError
SyncInterface(AppDelegate)
SyncInterface(DebugMenu)
SyncInterface(RemindtoolCloudKitDeleteAll)
SyncInterface(RemindtoolCloudKitRestart)
SyncInterface(RemindtoolCloudKitSync)
SyncInterface(SignificantTimeChange)
SyncInterface(UpdateAccounts)
REMCDAlarmDateTrigger
v32@?0#8Q16^B24
REMCDAlarm
B32@?0@8Q16^B24
<%@ 
UNKNOWN_IDENTIFIER
%@ = %@
 %@=%@
v32@?0@"NSString"8@16^B24
REMCDAlarmLocationTrigger
account == %@
zoneName == %@
ownerName == %@
databaseScope == %ld
zoneName
REMCDAlarmVehicleTrigger
REMCDMigrationState
The object we want to share is not found (objectID: %@}
v24@?0@"CKShare"8@"NSData"16
Failed to create share for object {object: %@}
Trying to populate share %@ with no record ID for %@
populateShare with nil recordID
Saving Share
SaveShare
FetchShare
shareURL
v32@?0@"CKShareMetadata"8@"CKShare"16@"NSError"24
FetchRecordForAcceptedShare
AcceptShare
RDStoreControllerManagedObjectContextDidMarkExtraneousAlarmsPendingToSyncUpDeleteNotification
RDStoreControllerManagedObjectContextNotificationTransactionAuthorKey
com.apple.remindd.SharedToMeList.pinnedStateDidBecomeStale
com.apple.remindd.SharedToMeList.mostRecentTargetTemplateIdentifierByCurrentUserDidBecomeStale
com.apple.reminder.list.name.siri_data_changed
nil author
destinationEntity.name
q24@?0@"NSManagedObjectID"8@"NSManagedObjectID"16
%@[%@] - %@
v32@?0@"NSManagedObjectID"8Q16^B24
sha512Sum
REMCDAccount
REMCDSharee
B32@?0@"CKRecord"8Q16^B24
RDStoreControllerDidEnableAccountsNotification
RDStoreControllerDidEnableAccountsNotificationAccountStoragesKey
RDStoreControllerDidDisableAccountsNotification
RDStoreControllerDidDisableAccountsNotificationAccountStoragesKey
RDStoreControllerREMAccountPropertiesDidUpdateNotification
RDStoreControllerDidRemoveAccountStoresNotification
RDStoreControllerAccountIdentifier
local
Data-
Stores/
Stores-Backup/
Stores-StagedMigration/
RDMarkedForDeletion
%@%@.sqlite
%@--%@.sqlite
loadAccountStoresFromDisk
sqlite
lastPathComponent
com.apple.remindd.RDStoreController.addValidatedStoresToAccountStoreMapWithStores
com.apple.remindd.RDStoreController.validateAccounts
UUIDString
sqlite-wal
sqlite-shm
v24@?0@"NSPersistentStore"8^B16
com.apple.remindd.RDStoreController.storesForAccounts
removeAccountStoresWithIdentifiers
com.apple.remindd.RDStoreController.fileIOWorker
Failed to create mlModelsContainerURL {url: %@}
(nil)
nukeData
invalidateStoreConnections
com.apple.RDStoreController.purgeDeleted
markedForDeletion == YES
com.apple.RDStoreController.ckFetchUser
merged migration state from user record
com.apple.RDStoreController.ckZoneNotFound
cleared server records for all cloud objects
com.apple.RDStoreController.ckSharedZoneWasDeleted
deleted all local database objects after shared zone was deleted
com.apple.RDStoreController.ckDeleteZone
managedObjectContextDidSave(REMCDAccount-changed) {self: %p, keys: %@}
com.apple.remindd.RDStoreController.observePrimaryCloudKitAccountPersonIDSaltChanges
accountStore.%@
{storeID: %@, URL: %@, connectionPoolMaxSize: %@, stagedMigrations: %@}
{storeID: %@, URL: %@}
accountExternalIDsMap.%@
accountStorageCache.keys
accountStorageCache.hasAllGenericAccounts
containerURL
isolated
primaryActiveCKAccountID
remCurrentRuntimeVersion
supportsAccountUtils
supportsAlarmEngine
supportsTimelineEngine
supportsAssignmentNotificationEngine
supportsCoreSpotlightIndexing
supportsSyncingToCloudKit
supportsApplicationShortcuts
supportsLocalInternalAccount
supportsSuggestedAttributes
supportsSyncActivityNotificationEngine
supportsSharedInlineTagAutoConvertEngine
com.apple.RDStoreController.logStoresDirectoryContents
%K == %@
Cannot fetch CD account with identifier %@
ERRORS
account[%@].%@.count
<%@ %@
 changeTag=%@
 share=%@
REMCDURLAttachment
REMCDList
<batchInterval=%d numberOfBatches=%d>
RDStoreControllerMigrator_PopulateDefaultValues
%K == NULL
%@.%@(%@)
kNetworkReachabilityChangedNotification
(ckIdentifier: %@, accountIdentifier: %@)
ckIdentifier IN %@
REMCDAlarmTrigger
REMCDObjectTreeProcessor: Unsupported traversal order {%ld}
RDStoreControllerMigrator_CKParentReminderIdentifier
%K != NULL
REMCDAssignment
55CF9DED-2785-46E1-9991-04987805FEE7
Setting account .personIDSalt {accountID: %@, salt: %@, resolutionToken: %@}
REMCDSharedToMeReminderPlaceholder
RDStoreControllerMigrator_DisplayDate
LAUNCH remindd {pid: %d}
INSearchForNotebookItemsIntent
assignedDate
ckAssigneeIdentifier
ckOriginatorIdentifier
owningReminderIdentifier
status
publicLinkURLUUID
disabled
badgeEmblem
color
publicLinkExpirationDate
savedReminders
sortingStyle
file
image
Sentence2Vec
UniversalGrammar
FilteredStopWords
acknowledgedDate
alarmUID
dueDateResolutionTokenAsNonce
originalAlarmUID
triggerID
alarmID
trigger
assigneeID
originatorID
childListIDsToUndelete
childSmartListIDsToUndelete
parentAccountID
parentListID
reminderIDsToUndelete
sharedOwnerID
reminderIDsMergeableOrdering
remindersICSDisplayOrderChanged
externalIdentifier
externalModificationTag
daSyncToken
daPushKey
daExternalIdentificationTag
daBulkRequests
daDisplayOrder
daIsEventOnlyContainer
daIsReadOnly
daIsImmutable
daIsNotificationsCollection
minimumSupportedVersion
isGroup
lastUserAccessDate
showingLargeAttachments
reminderIDsMergeableOrderingData
reminderIDsOrderingHints
templateID
sharedOwnerName
sharedOwnerAddress
sharingStatus
sharees
calDAVNotifications
pinnedDate
listIDsToUndelete
smartListIDsToUndelete
listIDsMergeableOrdering
listsDADisplayOrderChanged
listIDsMergeableOrderingData
pinnedListsManualOrdering
templatesManualOrdering
markedForRemoval
personID
personIDSalt
didChooseToMigrate
didChooseToMigrateLocally
didFinishMigration
persistenceCloudSchemaVersion
inactive
daConstraintsDescriptionPath
daAllowsCalendarAddDeleteModify
daSupportsSharedCalendars
daWasMigrated
debugSyncDisabled
fileSize
fileURL
isTemporaryFileURL
modifiedDate
recurrenceEnd
frequency
interval
firstDayOfTheWeek
daysOfTheWeek
daysOfTheMonth
daysOfTheYear
weeksOfTheYear
monthsOfTheYear
setPositions
width
height
parentReminderID
subtaskIDsToUndelete
hashtagIDsToUndelete
siriFoundInAppsUserConfirmation
daCalendarItemUniqueIdentifier
titleDocumentData
titleDocument
completed
priority
lastModifiedDate
startDateComponents
dueDateComponents
timeZone
notesDocumentData
notesDocument
attachments
alarms
contactHandles
importedICSData
userActivity
siriFoundInAppsData
lastBannerPresentationDate
primaryLocaleInferredFromLastUsedKeyboard
configuration
unsavedManualOrdering
dateComponents
smartListType
manualOrdering
filterData
event
structuredLocation
proximity
timeInterval
displayName
firstName
middleName
lastName
namePrefix
nameSuffix
nickname
address
accessLevel
uuidString
hostURL
nonExistentRelationship
nonExistentValue
mostRecentTargetTemplateIdentifier
mostRecentPublicLinkUpdateRequestDate
publicLinkConfigurationData
publicLinkCreationDate
publicLinkLastModifiedDate
sourceListIDURL
reminderIDsMergeableOrderingAsset
reminderIDs
reminderIDsAsset
alarmIDs
attachmentIDs
assignmentIDs
dueDate
hashtagIDs
notesDocumentAsset
recurrenceRuleIDs
titleDocumentAsset
parentSavedReminderIdentifier
template
listIDsMergeableOrderingAsset
sharedListIDsToOwnerNames
firstOccurrenceCreationDate
uuidForChangeTracking
launch
store did change
sharedToMeReminderCKIdentifier
SignificantTimeChangeNotification
effectiveMinimumSupportedAppVersion
minimumSupportedAppVersion
resolutionTokenMap_v3_JSONData
MERGE.LOCAL: The local reminder we are adding to the CK list is unexpectedly having non-nil primitiveCKZoneOwnerName: 
File
Image
fileName
metadataAsset
alarm.reminder.identifier
encodedSavedReminders
endDate
occurrenceCount
Reminders 
Lembretes 
Recordatoris 
Podsjetnici 
ipom
nky 
mindelser 
Herinneringen 
Muistutukset 
Erinnerungen 
keztet
Pengingat 
Promemoria 
Peringatan 
minnelser 
Przypomnienia 
Mementouri 
Pripomienky 
Recordatorios 
msat
lar 
c nh
Where are my reminders?
Onde est
o meus lembretes?
On s
n els meus recordatoris?
Gdje su moji podsjetnici?
Kde jsou m
ipom
nky?
Hvor er mine p
mindelser?
Waar zijn mij herinneringen?
Miss
 muistutukseni ovat?
 sont mes rappels
 sont mes rappels?
Wo sind meine Erinnerungen?
Hol vannak az eml
keztet
Di mana pengingat saya?
Dove sono i miei promemoria?
Mana peringatan saya?
Hvor er p
minnelsene mine?
Gdzie s
 moje przypomnienia?
Onde est
o os meus lembretes?
Unde sunt mementourile mele?
Kde s
 moje pripomienky?
nde est
n mis recordatorios?
Var 
r mina p
minnelser?
msat
m nerede?
i nh
The creator of this list has upgraded these reminders.
O criador desta lista atualizou esses lembretes.
usuari que ha creat aquesta llista ha actualitzat els recordatoris.
Autor ovog popisa nadogradio je podsjetnike.
rce tohoto seznamu aktualizoval tyto p
ipom
nky.
Opretteren af denne liste har opdateret p
mindelserne.
De maker van deze lijst heeft deze herinneringen bijgewerkt.
n listan luoja on p
ivitt
nyt n
 muistutukset.
Le cr
ateur de cette liste a actualis
 ces rappels.
Der Ersteller dieser Liste hat diese Erinnerungen aktualisiert.
A lista k
je friss
tette ezeket az eml
keztet
ket.
Pembuat daftar tersebut telah meningkatkan pengingat ini.
Il creatore dell
elenco ha aggiornato i promemoria.
Pencipta senarai ini telah mengemas kini peringatan ini.
Oppretteren av denne listen har oppgradert disse p
minnelsene.
rca listy uaktualni
 przypomnienia
O criador desta lista atualizou estes lembretes.
Creatorul acestei liste a f
cut upgrade pentru aceste mementouri.
Autor tohto zoznamu aktualizoval tieto pripomienky.
El usuario que ha creado esta lista ha actualizado estos recordatorios.
Personen som skapade listan har uppgraderat dessa p
minnelser.
Bu listeyi olu
turan ki
i bu an
msat
kseltti.
o danh s
ch n
ng c
p nh
ng l
i nh
latitude
longitude
radius
locationUID
topLevelSavedReminderIdentifiers
subtaskIdentifiersByTopLevelSavedReminderIdentifier
savedReminderByIdentifier
savedURLAttachmentsBySavedReminderIdentifier
eTag
hintDataExcludingRemindersInLocalAccountAsAsset
hintDataExcludingRemindersInLocalAccountAsBytes
hintDataIncludingRemindersInPrimaryAccountOnlyAsAsset
hintDataIncludingRemindersInPrimaryAccountOnlyAsBytes
lastAccessed
listType
serializationVersion
com.apple.UNNotificationDismissActionIdentifier
com.apple.remindd.reminderAlarm.debugDismiss
com.apple.remindd.reminderAlarm.markAsCompleted
com.apple.remindd.reminderAlarm.snoozeOneHour
com.apple.remindd.reminderAlarm.snoozeOneDay
com.apple.remindd.reminderAlarm.snoozeToNextThirds
com.apple.remindd.reminderAlarm.snoozeToNextWeekend
com.apple.remindd.siriFoundInApps.addToReminders
com.apple.remindd.assignmentNotification.viewAssignmentInList
com.apple.remindd.assignmentNotification.declineAssignment
com.apple.remindd.sharedListUpdateNotification.viewRemindersInList
REMCDTemplateOperationQueueItem
com.apple.remindd.suggestedAttributesAutoTrainer
com.apple.remindd.ICCloudConfigurationUpdater
com.apple.remindd.ICCloudSchemaCatchUpSyncController
com.apple.remindd.RDHousekeepingActivityScheduler
com.apple.remindd.RDExtraneousAlarmCleaner
com.apple.remindd.UnitTests
complete
pendingWork
noWork
error
fileAsset
savedReminder
attachmentTypeRawValue
Date
Location
TimeInterval
Vehicle
contactLabel
mapKitHandle
referenceFrameString
routing
ckServerShareData
Remindd Launch
getrlimit(RLIMIT_NOFILE) = (%{public}s, %{public}s)
DataAccess.Requests.Channel
v16@?0@"<OS_xpc_object>"8
com.apple.notifyd.matching
Not Running DataAccess
DataAccess.Requests.Queue
Running DataAccess
com.apple.alarm
v32@?0Q8Q16Q24
Could not load some of our databases due to disk full. Going to run a barebones daemon.
Running in the buddy setup user. Going to run a barebones daemon.
BarebonesDaemon dropping XPC RDDynamicXPCActivity {identifier: %{public}s}
com.apple.remindd.xpcEvents
os_transaction INIT {name: com.apple.remindd.xpcEvents}
os_transaction RELEASE {name: com.apple.remindd.xpcEvents}
Unknown RDFreeSpaceResult value
remindd couldn't get the requested free space to load account stores, will terminate after {delay: %ld}
RDStoreController.requestFreeSpaceToLoadAccountStores did not succeed {result: %lu, requested: %llu, available: %llu}
Notifying stores must refresh due to relaunching upon requested free space to load account stores
remindd is now exiting in response to requested free space to load account stores {requested: %llu, available: %llu}
RDStoreController.requestFreeSpaceToLoadAccountStores completes with .success but still doesn't have enough space {requested: %llu, available: %llu}
remindd raised signal (%d) in try to terminate asap
remindd is now exiting after failure to get requested disk space to load account stores in hope to get relaunched in some better future
BarebonesDaemon (DiskFull) dropping XPC RDDynamicXPCActivity {identifier: %{public}s}
Unexpected eventHandler queue {self.queue: %@, queue: %@}
Replacing existing eventHandler in Reader. This is usually a programmer error. {identifier: %s}
Dropping reader message because target has been deallocated {identifier: %s}
remindd/RDXPCEventStream.swift
There must be exactly one XPCEventStream instance per run
Triggered proactiveExitStream.eventHandler. Exiting... {name: com.apple.remindd.xpcEvents}
Contact Interaction
RDSharedInlineTagAutoConvertEngineAssembly is disabled because supportsSharedInlineTagAutoConvertEngine feature flag is off
RDSyncActivityNotificationEngine is disabled because sharedListNotifications feature flag is off
Widget refresh disabled because not supported by store controller
Suggested attributes disabled because not supported by store controller
suggestedAttributesAutoTrainer
Application shortcut engine is disabled because store controller does not support application shortcuts
RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler is disabled because store controller does not support it
RDTemplateOperationQueue is disabled because store controller does not support it
com.apple.remindd.RDPublicCloudDatabaseController
RDStalePinnedListsEventHandler is disabled because store controller does not support it
RDHashtagLabelUpdater is disabled because store controller does not support it
Assignment notification engine is disabled because store controller does not support it
AssignmentNotifEngine
Timeline engine is disabled because store controller does not support it.
Alarm and today engines are disabled because store controller does not support them
com.apple.remindd.today-notification
Starting RDTodayNotificationAssembly
todayNotificationEngine
com.apple.remindd.RDAlarmEngineAssembly
com.apple.remindd.time-alarm
Starting alarm engine assembly
os_transaction INIT {name: com.apple.remindd.RDAlarmEngineAssembly}
notificationConsumer
Failed to register notify token for _REMStoreShouldNotifyOfInteractionWithPeopleNotificationName {status: %u}
Starting RDAssignmentNotificationEngineAssembly
refreshFromLastConsumed
refreshFromLastConsumedOnLaunch
com.apple.remindd.assignmentNotificationEngine.crashDetected
AssignmentNotificationEngine
handleIncompleteOperationQueueItems
handleIncompleteOperationQueueItemsOnLaunch
com.apple.remindd.RDTemplateOperationQueue.crashDetected
TemplateOperationQueue
CloudSchemaCatchUpSyncController: q_repairSchedulingStateIfNeeded(): schedulingState is .scheduled but we don't have a lastScheduledDate, force re-scheduling now
CloudSchemaCatchUpSyncController: q_repairSchedulingStateIfNeeded(): It had been too long since we scheudled the background activity and catch up sync still hasn't ran yet, force running the activity manually now {timeout: %{public}f, lastScheduledDate: %{public}s}
CloudSchemaCatchUpSyncController: SchedulingState is not .scheduled when trying to call q_syncRunScheduledActivity(), bailing out {schedulingState: %{public}ld}
CloudSchemaCatchUpSyncController: Unexpected nil RDICCloudSchemaCatchUpSyncPerformer (ICCloudContext), bailing out from q_syncRunScheduledActivity()
com.apple.remindd.ICCloudSchemaCatchUpSyncController.q_syncRunScheduledActivity
os_transaction INIT {name: com.apple.remindd.ICCloudSchemaCatchUpSyncController.q_syncRunScheduledActivity}
CloudSchemaCatchUpSyncController: Running scheduled background activity...
CloudSchemaCatchUpSyncController: backgroundScheduler is unexpectedly not instantiated yet when calling q_scheduleBackgroundActivity(), bailing out
CloudSchemaCatchUpSyncController: SchedulingState is not .unset so no need to schedule another one {schedulingState: %{public}ld, hasPendingActivity: %{bool,public}d}
CloudSchemaCatchUpSyncController: Updated background activity (xpcActivity) criteria
CloudSchemaCatchUpSyncController: Already having a pending activity with the background scheduler (xpcActivity) so no need to schedule another one {schedulingState: (%{public}ld)}
CloudSchemaCatchUpSyncController: Instantiated a background scheduler (xpcActivity) upon q_start
CloudSchemaCatchUpSyncController: backgroundScheduler has already instantiated, duplicate call to q_start?
CloudSchemaCatchUpSyncController: Starting
RDICCloudExtraneousAlarmsCollector
 RDSyncActivityEngine: Starting in demo mode
com.apple.remindd.RDSyncActivityEngine.JournalUpdatesSubscription
com.apple.remindd.RDSyncActivityEngine.AccountSignInOrOutSubscription
deleteExtraneousAlarms
com.apple.remindd.extraneousAlarmCleaner.crashDetected
extraneousAlarmCleaner
Notifying stores did change
Sandbox: realpath(%s) failed %{public}d (%s)
Sandbox: confstr() for type %{public}d failed %{public}d (%s)
Sandbox: TMPDIR=%s
Sandbox: _set_user_dir_suffix() failed %{public}d (%@)
com.apple.remindd.launch
os_transaction INIT {name: com.apple.remindd.launch}
os_transaction RELEASE {name: com.apple.remindd.launch}
CKRecordValue
RDPersistentStoreLookup
@"NSPersistentStore"24@0:8@"NSString"16
OS_os_transaction
REMUserDefaultsObserveToken
SGSuggestionsServiceRemindersProtocol
v32@0:8Q16@?24
v32@0:8@"SGRecordId"16@?<v@?@"NSError">24
v32@0:8@"SGReminder"16@?<v@?@"NSError">24
v32@0:8Q16@?<v@?@"NSArray"@"NSError">24
v32@0:8@"NSString"16@?<v@?@"NSString"@"NSError">24
v32@0:8@"NSString"16@?<v@?@"NSError">24
_TtP7remindd32RDAccountInitializerUserDefaults_
@16@0:8
acAccountIdentifiersToMigrateInactivatedCalDavData
T@"NSArray",N,C
acAccountIdentifierToMergeLocalDataIntoSyncData
T@"NSString",N,C
@"NSArray"16@0:8
v24@0:8@"NSArray"16
@"NSString"16@0:8
v24@0:8@"NSString"16
ICCloudSchemaCatchUpSyncSchedulingStateStorage
schedulingState
Tq,N
lastScheduledDate
T@"NSDate",N,C
debugForceSupportBackgroundScheduling
@"NSDate"16@0:8
v24@0:8@"NSDate"16
ICCloudConfigurationExtraneousAlarm
d16@0:8
@"NSNumber"16@0:8
RDAccountPropertiesObserving
uuid
T@"NSUUID",N,R
callbackQueue
T@"OS_dispatch_queue",N,R
T@"<_TtP7remindd20ObservingAccountInfo_>",N,R
propertyName
T@"NSString",N,R
@"OS_dispatch_queue"16@0:8
@"<_TtP7remindd20ObservingAccountInfo_>"16@0:8
ICCloudConfigurationDownloadable
_TtP7remindd20ObservingAccountInfo_
T@"REMObjectID",N,R
@"REMObjectID"16@0:8
DADREMUserNotificationPresenting
v40@0:8@16@24@?32
v40@0:8@"NSString"16@"<DADREMUserNotificationContent>"24@?<v@?@"NSError">32
@"<DADREMUserNotificationContent>"24@0:8@"REMList"16
OS_xpc_object
NSSecureCoding
supportsSecureCoding
NSFetchRequestResult
BMTaskSpecificEventProvider
@32@0:8@16^@24
@"NSArray"32@0:8@"NSSet"16^@24
v24@0:8@"NSNumber"16
REMDAChangedIdentifierResult
CNKeyDescriptor
REMDAChangedModelObjectResult
REMNullableObjectIDProviding
@"REMObjectID"24@0:8@"NSUUID"16
cdEntityName
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
hash
T#,N,R
debugDescription
B24@0:8@"Protocol"16
_SGSuggestionsServiceBaseProtocol
_SGSuggestionsServiceFoundInAppsProtocol
v36@0:8@16C24@?28
v36@0:8@"SGRecordId"16C24@?<v@?@"NSString"@"NSError">28
NSCoding
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
NSCopying
@24@0:8^{_NSZone=}16
_SGSuggestionsServiceMetricsProtocol
v44@0:8i16@20@28@36
v40@0:8@16@24@32
v32@0:8@16S24S28
v44@0:8i16@"SGRecordId"20@"NSString"28@"NSString"36
v40@0:8@"SGRecordId"16@"NSString"24@"NSString"32
v32@0:8@"NSString"16S24S28
v32@0:8@"SGRecordId"16S24S28
B32@?0@8q16^B24
[implSort] pre-sort: moved object {objectID: %@, from: %ld, to: %ld}
[implSort] pre-sort: we have more than 1 sorting hints but we currently only support to accomate 1 {count: %ld}
[implSort] Objects are already in correct order. Will skip sorting
[implSort] Performing full CD mutableOrderedSet.sort {total.count: %ld}
[implSort] _forceDisableFullRemindersSorting = YES so we will abort from running mutableOrderedSet.sort now.
[implSort] LOOKATME: Pre-sorted but full CD mutableOrderedSet.sort still needed.
[implSort] Unexpected CD object in ordered set {object: %s}
[implSort] Count of CD objects is not same as that of the Ordering Map {allCDObjects#: %ld, orderingIndexMap#: %ld}
relationship contains non-REMCDObject objects
could not get a sorting order from object
Invalid UUID found in REMCRMergeableOrderedSet<NSString> when converting it to REMCRMergeableOrderedSet<REMObjectID> {uuidString: %@}
submitAllHubbleKPIs
StartMigrationRequest.Credential
StartMigrationResponse.Details
StartMigrationResponse.Error
MigrateRequest.User
MigrateResponse.Details
MigrateResponse.Error
MigrateResponse.NextStep
UnmigrateResponse.Details
UnmigrateResponse.Error
_TtC7remindd29TantorMigrationAPIAsyncClient
invocable
_TtCV7remindd21StartMigrationRequestP33_482F8E23FC1B6897A29C6FDC02F90B4F13_StorageClass
_source
_disableCache
_TtCV7remindd22StartMigrationResponseP33_482F8E23FC1B6897A29C6FDC02F90B4F13_StorageClass
_state
_result
_log
_TtCV7remindd14MigrateRequestP33_482F8E23FC1B6897A29C6FDC02F90B4F13_StorageClass
_options
_userInitiated
_simulatedError
_TtCV7remindd15MigrateResponseP33_482F8E23FC1B6897A29C6FDC02F90B4F13_StorageClass
_nextStep
_logs
_TtCV7remindd17UnmigrateResponseP33_482F8E23FC1B6897A29C6FDC02F90B4F13_StorageClass
message
success
time_elapsed
logs
NONE
defined
is_terminated
next_invocation_in_seconds
invocation_count
failure_count
retry_count
is_observer
lists_migrated
reminders_migrated
state
next_step
dsID
partition
DRY_RUN
DISABLE_SHARING
SAVE_ORIGINAL_JSON
USER_INITIATED
NO_CLEANUP
user
archivePath
embeddedTestData
user_initiated
simulated_error
baseURL
hostname
mmeAuthToken
credential
disableCache
RelevantShortcutsProcessor
com.apple.remindd.RDTimelineEngine
newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier
OwningReminderIdentifier
Cannot convert to a UUID from CKRecord to owningReminderIdentifier {ckIdentifier: %s}
EncryptedOriginatorIdentifier
Originator object (REMCDSharee) does not exist (yet) when merging data from Assignment CKRecord: {ckIdentifier: %s, originatorID: %s}
EncryptedAssigneeIdentifier
Assignee object (REMCDSharee) does not exist (yet) when merging data from Assignment CKRecord: {ckIdentifier: %s, assigneeID: %s}
Reminder is marked for deletion but assignment is not {assignmentID: %{public}s, reminderID: %{public}s}
Fixing broken references for assignment {assignmentID: %{public}s, reminderID: %{public}s}
MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.
B24@0:8@16
@40@0:8@16@24@32
Trying to merge CKRecord to an object without MOC
newOrExistingObject with reference recordID %{public}@ with nil accountCKIdentfiier
MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.
MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.
ckIdentifier == %@
_TtC7remindd43RDTemplateOperationRevokeTemplatePublicLink
templateObjectID
publicCloudDatabaseController
isUnitTestMode
%{public}s: Failed to fetch template {templateObjectID: %{public}@, error: %{public}s, elapsedSeconds: %f}
%{public}s: Start execution {templateObjectID: %{public}@}
%{public}s: Failed to delete content of template's public link {templateObjectID: %{public}@, recordName: %{public}s, error: %{public}s, elapsedSeconds: %f}
%{public}s: Deleted content of template's public link {templateObjectID: %{public}@, recordName: %{public}s, elapsedSeconds: %f}
%{public}s: Failed to reset template's public link to nil {templateObjectID: %{public}@, error: %{public}s, elapsedSeconds: %f}
%{public}s: Reset template's public link to nil {templateObjectID: %{public}@, elapsedSeconds: %f}
%{public}s: Finished execution {templateObjectID: %{public}@, elapsedSeconds: %f}
%{public}s: Attempted to call completion more than once
fetching manual sort hint object ID returned more than one result {listType: %s listID: %s, count: %s}
Deleting manual sort hints for listType (
) is not supported
DELETE(-soft) manual sort hint (listType: %hd, listID: %{public}s, identifier: %{public}s)
Attempted to compute 'REMCDManualSortHint.ListType.supportsDeleting()' for unknown 'listType'. {listType.rawValue: %hd}
Deleting manual sort hint for listType (
_TtC7remindd29RDApplicationShortcutAssembly
applicationShortcut
Failed to initialize RDPublicTemplate from ckRecord because ckRecord.recordType is not "
" {ckRecord.recordType: 
PublicLinkURLUUID
Failed to initialize RDPublicTemplate from ckRecord because ckRecord["publicLinkURLUUID"] is not a non-nil String
PublicLinkExpirationDate
Failed to initialize RDPublicTemplate from ckRecord because ckRecord["publicLinkExpirationDate"] is not a non-nil Date
Failed to initialize RDPublicTemplate from ckRecord because ckRecord["name"] is not a non-nil String
Failed to initialize RDPublicTemplate from ckRecord because ckRecord["savedReminders"] is not a non-nil CKAsset
Failed to initialize RDPublicTemplate from ckRecord because fileURL of CKAsset for saved reminders is nil
RDJSONDecoding can't encode input string as utf8 data {class: %s}
RDJSONDecoding can't decode JSON {class: %s, error: %s}
Invalid JSONSerialization.jsonObject return value {class: %s}
SavedReminderOfPublicTemplate
REMCDPublicTemplate
_TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider
rem_accountObjectID
accountDescription
T@"REMObjectID",N,&,Vrem_accountObjectID
_TtC7remindd30RDAssignmentNotificationEngine
babysitterOperationRefreshFromLastConsumed
babysitterOperationRefreshFromLastConsumedOnLaunch
analyticsCrashDetected
userNotificationCenter
storeControllerNotificationCenter
daemonController
manualTestRun
storeControllerObservationToken
started
cloudKitAccountsDidChangeSubscriptions
currentUserShareParticipantIDsOverrideByListID
_TtCC7remindd30RDAssignmentNotificationEngine13BabysitTarget
RDAssignmentNotificationEngine: Completing action handler by calling completionHandler now.
RDAssignmentNotificationEngine doesn't expect to receive actions of this type. {type: %s, response: %@}
RDAssignmentNotificationEngine: Unexpected action %s for notification type .assignmentNotification
RDAssignmentNotificationEngine: Error trying to retrieve reminder {reminderIDs: %s, error: %s}
v16@?0@"NSError"8
RDAssignmentNotificationEngine: Processing assignment notification response {actionIdentifier:%s, reminderIDs: %s}
RDAssignmentNotificationEngine: Updated reminder successfully. {actionIdentifier: %s, reminderIDs: %s}
RDAssignmentNotificationEngine: Save error. Failed to save updates from notification response {error: %s , reminderIDs: %s, actionIdentifier: %s}
com.apple.remindd.assignmentNotificationEngine.babysitter
RDAssignmentNotificationEngine: List has no sharee, huh? {listID: %{public}@}
RDAssignmentNotificationEngine: Can't find any item to populate, this is not expected {map: %s}
com.apple.remindd.assignmentNotification.
RDAssignmentNotificationEngine: Populating assignment notification content with all nullified originators {listID: %{public}@, assignedCount: %ld, selected: %{public}s}
RDAssignmentNotificationEngine: Populating assignment notification content {listID: %{public}@, assignedCount: %ld, originatorCount: %ld, selected: %{public}s}
com.apple.remindd.userAction
Posted Assignment Notification
RDAssignmentNotificationEngine: Posted Assignment notification {listID: %{public}@, count: %ld}
RDAssignmentNotificationEngine: Unable to post Assignment notification {error: %s, listID: %{public}@, count: %ld}
RDAssignmentNotificationEngine: Programming fault: {%s}
Unknown combination of number of assignments and orignators.
You must have at least 1 assignment and 1 originator.
RDAssignmentNotificationEngine: Couldn't match the sharee object of the originator and it is not nullified {reminderID: %{public}@, assignment: %{public}s}
RDAssignmentNotificationEngine: The originator has absolutely no hint of how to display a formatted name... {assignment: %{public}s}
RDAssignmentNotificationEngine: No since-token from change tracking {account: %{public}s}
RDAssignmentNotificationEngine: No updated change token from change tracking (no changes) {account: %{public}s, since: %{public}@}
RDAssignmentNotificationEngine: No inserted assignments found in change {since: %{public}@, upTo: %{public}@}
RDAssignmentNotificationEngine: Error ocurred when fetching inserted assignments' reminders {error: %s}
RDAssignmentNotificationEngine: Processing change set {account: %{public}s, since: %{public}@, upTo: %{public}@}
RDAssignmentNotificationEngine: User opts to not posting assignment notifications, mark change set as consumed right away {account: %{public}s, since: %{public}@, upTo: %{public}@}
RDAssignmentNotificationEngine: Current user is not participating the list of this inserted assignment {list: %{public}@}
RDAssignmentNotificationEngine: Can't find the correspinding inserted assignments from the reminderID, how come? {reminder: %{public}@}
RDAssignmentNotificationEngine: This is an inserted assignment we want to notify {list: %{public}@, reminder: %{public}@, assignment: %{public}@}
RDAssignmentNotificationEngine: Should have selected only the ONE most recent current assignment, not multiple {reminder: %{public}@}
RDAssignmentNotificationEngine: Reminder is already completed, skipping from showing assignment notification {reminder: %{public}@}
RDAssignmentNotificationEngine: Tracked insertion is not an REMAssignment, huh? {inserted: %s}
RDAssignmentNotificationEngine: Failed to fetch CloudKit accounts. Not tracking changes. {error: %{public}s}
RDAssignmentNotificationEngine: Not tracking changes since there is no logged in or enabled CloudKit account.
com.apple.remindd.assignmentNotificationEngine
Babysitting RDAssignmentNotificationEngine because it failed too many times {waiterID: %{public}s}.
RDAssignmentNotificationEngine: User has disabled assignment notifications.
<%@>: %ld inserted assignments
RDAssignmentNotificationEngine: Assignments to notify in this change set {stats: %{public}s}
RDAssignmentNotificationEngine: No assignment to notify in this change set
RDAssignmentNotificationEngine: No account eligible for assignment change tracking, no assignment to notify.
RDAssignmentNotificationEngine: Mark to current token as consumed due to Babysitting {account: %{public}s, token: %{public}s}
RDAssignmentNotificationEngine.start() must be called exactly once
com.apple.remindd.assignmentNotificationEngine.start
RDAssignmentNotificationEngine: dispatch to call refreshFromLastConsumedOnLaunchIfNeeded {after: %ld}
os_transaction INIT {name: com.apple.remindd.assignmentNotificationEngine.start}
Starting RDAssignmentNotificationEngine
os_transaction RELEASE {name: com.apple.remindd.assignmentNotificationEngine.start}
RDAssignmentNotificationEngine: refreshFromLastConsumedOnLaunchIfNeeded completed {refreshed: %s}
RDAssignmentNotificationEngine: Failed to compareCurrentChangeTokenToLastConsumed {account: %{public}s, error: %s}
Received storeController changed notification after RDAssignmentNotificationEngine was deallocated
com.apple.remindd.assignmentNotificationEngine.storeControllerChange
os_transaction INIT {name: com.apple.remindd.assignmentNotificationEngine.storeControllerChange}
os_transaction RELEASE {name: com.apple.remindd.assignmentNotificationEngine.storeControllerChange}
RDAssignmentNotificationEngine: (Re-)initialized changeTrackingHelpers upon enabled/disabled CloudKit account(s).
RDAssignmentNotificationEngine: Reset babysitter upon enabled/disabled CloudKit account(s) for {waiterID: %{public}s}
REMDAAccountProviding
#16@0:8
superclass
description
_TtC7remindd12RDDebouncing
_TtCC7remindd12RDDebouncing10LoadFactor
windowSize
thresholdForNewWindow
averageInterval
numOfSamples
measurements
lastFire
debouncingPolicy
loadFactor
label
isEnabled
pendingWorkItem
pendingValues
pendingCompletionBlocks
coalescedUpdates
_TtC7remindd21RDDebouncerWithNumber
v24@0:8d16
@40@0:8d16@24@?32
debouncer
debouncingInterval
Td,N
_TtC7remindd36RDDebounceableCKDatabaseNotification
@32@0:8q16@24
databaseScope
subscriptionOwnerUserRecordName
Tq,N,VdatabaseScope
_TtC7remindd37RDDebouncerWithCKDatabaseNotification
remindd.RDDebouncerWithCKDatabaseNotification
remindd.RDDebounceableCKDatabaseNotification
(databaseScope: 
, subscriptionOwnerUserRecordName: 
remindd.RDDebouncerWithNumber
remindd.RDDebouncer
Failed to create saved alarm trigger from invalid type {alarm.trigger: 
Failed to create savedDateAlarmTrigger from {dateComponents: 
dateTimeInterval
locationTriggers
timeIntervalTriggers
_TtC7remindd37RDExchangeAccountComplimentaryService
setPersonIDAuthor
personIDSaltObserver
pendingSystemAvailable
bootstrapCancellables
storeControllerEventCancellables
systemAvailabilityCheckerBlockingQueue
appleAccountUtilities
com.apple.remindd.ExchACS.accountSetPersonID.author
com.apple.remindd.ExchACS.launch.systemAvailabilityBlockingQueue
com.apple.remindd.ExchACS.launch.pending.pendingSystemAvailable
ExchACS: Couldn't create os_transaction_t for waiting pendingSystemAvailable
os_transaction INIT {name: com.apple.remindd.ExchACS.launch.pendingSystemAvailable}
ExchACS: Received 'ExchangeAccountDidChange', gonna reset the personIDSaltObserver {observer: %{public}s}
ExchACS: Received DidCompleteInitializeAllAccountsNotification
ExchACS: StoreController is nil when observePrimaryCloudKitAccountPersonIDSaltChanges() is invoked
ExchACS is not observing primary CK account personIDSalt changes this time as we have no exchange account right now
v16@?0@"NSData"8
ExchACS failed to start observing primary CK account personIDSalt changes {debugTrackingUUID: %{public}s}
ExchACS is now observing primary CK account personIDSalt changes {debugTrackingUUID: %{public}s, observer: %{public}s}
ExchACS is already observing personIDSalt changes with RDAccountPersonIDSaltObserver {observer: %{public}s}
ExchACS: Trying to call observePrimaryCloudKitAccountPersonIDSaltChanges() while still pending system to be available
ExchACS received a primary CK account personIDSalt error {debugTrackingUUID: %{public}s, saltError: %{public}s}
ExchACS failed to reset account personID to nil {accountIDs: %{public}s, saltError: %{public}s, saveError: %s}
ExchACS will reset account personID to nil {accountID: %{public}s, origPersonID: %s, saltError: %{public}s}
ExchACS failed to fetch Exchange accounts from database {error: %s}
ExchACS received a primary CK account personIDSalt change or initial value {debugTrackingUUID: %{public}s}
ExchACS failed to saved account personID {accountIDs: %{public}s, saveError: %s}
ExchACS failed to generate a hashed personID from the salt {accountID: %{public}s}
ExchACS will save update to account personID {accountIDs: %{public}s, newPersonID: %s, oldPersonID: %s}
ExchACS: hashedAccountPersonID: account: %s, nonNilUsername = %s
os_transaction RELEASE {name: com.apple.remindd.ExchACS.launch.pendingSystemAvailable}
ExchACS: Done waiting for system to become available upon daemon launch, now trying to observe for primary CK account PersonIDSalt changes
topLevelElementIDs
secondaryLevelElementIDsByTopLevelElementID
topLevelElementIDsByContainerID
lastModifiedByContainerID
_TtC7remindd19RDXPCDebugPerformer
storeContainerToken
notificationCenter
storeControllerByContainerURL
manualHashtagLabelUpdater
v24@0:8@?16
v28@0:8B16@?20
v60@0:8@16@24@32@40B48@?52
v56@0:8d16d24d32@40@?48
v40@0:8@16B24B28@?32
v36@0:8@16B24@?28
v44@0:8@16d24B32@?36
v40@0:8@16q24@?32
v24@0:8q16
_TtC7reminddP33_A793612D66A4A6A32EDDE79136FC5A3847DebugPerformerManualHashtagLabelUpdaterDelegate
_TtC7reminddP33_A793612D66A4A6A32EDDE79136FC5A3839DebugPerformerMockDABabysittableAccount
remindd.DebugPerformerMockDABabysittableAccount
init()
RDXPCDebugPerformer: updateRemCurrentRuntimeVersionDebuggingOverride initiated
updateMinimumSupportedVersion
RDXPCDebugPerformer: updateMinimumSupportedVersion initiated
identifier == %@
 object with identifier 
RDXPCDebugPerformer: removeSharedEntitySyncActivities initiated
removeSharedEntitySyncActivitiesWithCKIdentifier
removeSharedEntitySyncActivityWithUUIDForChangeTracking
removeAllSharedEntitySyncActivity
There are more than one sync activity for given uuidForChangeTracking: 
RDXPCDebugPerformer: removeSharedEntitySyncActivityWithUUID initiated
RDXPCDebugPerformer: removeSharedEntitySyncActivityWithActivities initiated
requestedAccountIdentifier
Persistent store not found for accountIdentifier. Did you change containers without also changing accountIdentifer?
Persistent store not found for accountIdentifier %s
addSharedEntitySyncActivity
RDXPCDebugPerformer: addSharedEntitySyncActivity initiated
fetchAllSharedEntitySyncActivities
RDXPCDebugPerformer: fetchAllSharedEntitySyncActivities initiated
fetchAccountListOrderedIdentifiers
RDXPCDebugPerformer: fetchAccountListOrderedIdentifiers initiated
validateSharedToMeReminderPlaceholder
RDXPCDebugPerformer: validateSharedToMeReminderPlaceholders initiated
validateHashtagWithSharedToMeReminderCKIdentifierAndMismatchedReminderCKIdentifier
RDXPCDebugPerformer: validateHashtagsWithSharedToMeReminderCKIdentifierAndMismatchedReminderCKIdentifier initiated
validateHashtagWithMismatchedHashtags
RDXPCDebugPerformer: validateHashtagLabelsWithMismatchedHashtags initiated
validateHashtagsWithoutHashtagLabel
RDXPCDebugPerformer: validateHashtagsWithoutHashtagLabel initiated
validateHashtagLabelsWithConcealedHashtags
RDXPCDebugPerformer: validateHashtagLabelsWithConcealedHashtags initiated
validateHashtagLabelsWithoutHashtag
RDXPCDebugPerformer: validateHashtagLabelsWithoutHashtag initiated
revertImageAttachmentsToUnDeduped
RDXPCDebugPerformer: revertImageAttachmentsToUnDeduped failed to get identifier from attachment
RDXPCDebugPerformer: revertImageAttachmentsToUnDeduped failed to get account from attachment
RDXPCDebugPerformer: revertImageAttachmentsToUnDeduped failed to get fileName from attachment
RDXPCDebugPerformer: revertImageAttachmentsToUnDeduped failed to get sha512Sum from attachment
REMXPCDebugPerformer.synchronous_revertImageAttachments could not clean up file { sha512Sum: %s, error: %s }
immediatelyRevokePublicLinkOfTemplate
immediatelyCreateOrUpdatePublicLinkOfTemplate
handleIncompleteTemplateOperationQueueItemsImmediately
RDXPCDebugPerformer: Failed to copy reminders from REMList to REMTemplate {error: %s}
missing xpcDaemon
RDXPCDebugPerformer: Failed to refresh hashtag labels; missing manualHashtagLabelUpdater
RDXPCDebugPerformer: Failed to set up manual hashtag label updater; missing xpcDaemon
updateManualSortHint
RDXPCDebugPerformer: updateManualSortHint initiated
resetManualSortHintWithBeforeLastAccessed
RDXPCDebugPerformer: %s initiated
Incorrect REMCDManualSortHint.ListType: 
resetAllManualSortHintWithListID
resetManualSortHintWithIdentifier
resetAllManualSortHints
removeManualSortHint
RDXPCDebugPerformer: removeManualSortHint initiated
fetchManualSortHintWithListTypeID
containerIDsWithLocalContainerIDPrefix
elementIDsWithLocalElementIDPrefix
invalid recordType: 
ckServerRecordData
fetchCKIdentifierForPurging
account has no CKContainer
v24@?0@"CKRecordID"8@"NSError"16
deletion of CKRecord failed: 
fetch resulted in too many items
fetch resulted in zero REMCDObjects
fetched object must be marked for deletion, but is not
fetched object has no account.identifier
fetched object has no CKRecord
nil RDStoreController.cloudContext
RDXPCDebugPerformer: CloudContext is nil -- can't sync to cloudKit
nil accountIdentifier
RDXPCDebugPerformer: downloadContainer accountIdentifier is nil -- can't download cloudKit container
downloadContainer
isCloudKitAccount fails for 
RDXPCDebugPerformer: downloadContainer: isCloudKitAccount fails for accountIdentifier { %s }, error: { %s }
 not CloudKit accountIdentifier
RDXPCDebugPerformer: downloadContainer accountIdentifier { %s } is not from CloudKit account
RDXPCDebugPerformer: Called resetBabysitter {waiterID: %s}
RDXPCDebugPerformer: Called registerBabysitter {waiterID: %s}
RDXPCDebugPerformer: Failed to delete isolated container {error: %@, token: %@}
RDXPCDebugPerformer: Destroyed isolated container {token: %@, url: %s}
RDXPCDebugPerformer: Destroying an isolated container that still has live references to it - can be normal {token: %@, url: %s}
RDXPCDebugPerformer: Request to destroy isolated container {token: %@, storeControllers: %@}
RDXPCDebugPerformer: Created isolated store {token: %@}
v24@?0@"CNContact"8^B16
RDXPCDebugPerformer called crash {message: %@}
setDueDateResolutionTokenNonceForReminderID
RDXPCDebugPerformer: setDueDateResolutionTokenNonceForReminderID {reminderID: %{public}@, shouldSetDirtyFlags: %{public}s}
RDXPCDebugPerformer: setDueDateResolutionTokenNonceForReminderID: Saved changes {reminderID: %{public}s, alarmsUpdated.count: %ld, shouldSetDirtyFlags: %{public}s}
Reminder has no non-delete non-snooze temporal alarm
Reminder has no alarm
setDueDateResolutionTokenNonceForAlarmID
RDXPCDebugPerformer: setDueDateResolutionTokenNonceForAlarmID {alarmID: %{public}@, shouldSetDirtyFlags: %{public}s}
RDXPCDebugPerformer: setDueDateResolutionTokenNonceForAlarmID: Saved changes {alarmID: %{public}s, shouldSetDirtyFlags: %{public}s}
markAndDeleteExtraneousAlarmsFromReminderID
RDXPCDebugPerformer: markAndDeleteExtraneousAlarmsFromReminderID {reminderID: %{public}@, shouldSetDirtyFlags: %{public}s}
.remindtool(markAndDeleteExtraneousAlarmsFromReminderID)
RDXPCDebugPerformer: markAndDeleteExtraneousAlarmsFromReminderID is only supported in DEBUG build
RDXPCDebugPerformer: lowLevelUnmarkForDeletion {shouldSetDirtyFlags: %{public}s, objectID: %{public}@}
lowLevelMarkForDeletionWithObjectID
lowLevelUnmarkForDeletion
RDXPCDebugPerformer: %{public}s: Saved updating .markedForDeletion flag {shouldSetDirtyFlags: %{public}s, objectID: %{public}s}
lowLevelMarkForDeletion
RDXPCDebugPerformer: lowLevelMarkForDeletion {shouldSetDirtyFlags: %{public}s, objectID: %{public}@}
RDXPCDebugPerformer: persistenceStoreID for {accountID: %@}
RDXPCDebugPerformer: Debug: addGeofence {center=(%.*f,%.*f), r=%.*f, UUID=%s}
RDXPCDebugPerformer: Debug: removeGeofence {UUID=%s}
RDXPCDebugPerformer: Debug: fetchGeofences
RDXPCDebugPerformer: fireDebugNotification initiated with text: %s
storeController.disabled (ppt mode?)
cloudContext == nil
No CloudKit Account
CloudKit Account is not active
StoreController has CloudKit disabled. Running in ppt mode?
RDXPCDebugPerformer: Failed cancelCloudKitSync {error: %@}
StoreController missing CloudContext
testFlagAccountForInactivatedCalDAVDataMigration: No iCloud account signed in with the given ACAccount identifier 
self.xpcDaemon is nil
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/XPCPerformers/RDXPCDebugPerformer.swift
testFlagAccountForInactivatedCalDAVDataMigration: Failed to call RDAccountInitializer.initializeAllAccounts()
testFlagAccountForInactivatedCalDAVDataMigration
RDXPCDebugPerformer: testFlagAccountForInactivatedCalDAVDataMigration called initializeAllAccounts()
RDXPCDebugPerformer: testFlagAccountForInactivatedCalDAVDataMigration updated user defaults `acAccountIdentifiersToMigrateInactivatedCalDavData` {accountIdentifier: %{public}@}
RDXPCDebugPerformer: testFlagAccountForInactivatedCalDAVDataMigration initiated {accountIdentifier: %{public}s}
No iCloud account signed in with the given ACAccount identifier 
v20@?0B8@"NSError"12
RDXPCDebugPerformer: testReinitializeCloudKit initiated {accountIdentifier: %{public}s}
StoreController missing AccountUtils
RDXPCDebugPerformer: testReinitializeCloudKit: CloudKit disabled.
RDXPCDebugPerformer: testReinitializeCloudKit: Done ACAccont migration flags unset {acAccount: %@}
RDXPCDebugPerformer: testReinitializeCloudKit: ERROR unsetting ACAccount migration flags {acAccount: %@, error: %s}
RDXPCDebugPerformer: testReinitializeCloudKit: REM account removed from DB. CloudKit re-enabled. {objectID: %@}
RDXPCDebugPerformer: testReinitializeCloudKit: CloudKit cancelEverything completed.
RDXPCDebugPerformer: testReinitializeCloudKit: Completed updateState() for accountIdentifier: %s, didAddAccount: %{bool}d, didUpdateAccount: %{bool}d, updateAccountError: %s
RDXPCDebugPerformer: Failed testReinitializeCloudKit {error: %@}
RDXPCDebugPerformer: testInitialSync initiated
RDXPCDebugPerformer: Failed testInitialSync {error: %@}
Multiple accounts found with that name {accountIDs: 
Account has no objectID
Unsupported account type {accountID: 
Account is inactive {accountID: 
Account not found
prepare.cancelCloudKit.duration
prepare.deletedCDObjects.count
prepare.deleteCDObject.duration
prepare.deleteCKCloudState.count
prepare.deleteCKCloudState.duration
prepare.resetAccount.success
sync.totalDuration
RDXPCDebugPerformer: Failed to nuke database {error: %@}
RDXPCDebugPerformer: nukeDatabase initiated
].REMCDReminder.Incomplete_And_NotDeleted.count
].REMCDReminder.Incomplete_And_Deleted.count
].REMCDReminder.Completed_And_NotDeleted.count
].REMCDReminder.Completed_And_Deleted.count
Cannot get cdAccount from %s for extra container stats
remindd/TypedPredicate.swift
Failed to create cdPropertyKey for keyPath: 
].REMCDAlarmTrigger.ExtraneousAlarmsReminders(
].REMCDAlarmTrigger.ExtraneousNonSnoozeDateAlarms.count
].REMCDAlarm.Concealed.count
].REMCDAlarmTrigger.Concealed.count
storeController.
userDefaults.lastExtraneousAlarmsProcessedDate
userDefaults.useExtraneousAlarmBackOffThrottleInterval
Babysitter report is empty
cloudContext.readinessLoggingDescription
cloudContext.configuration.
cloudContext.lastSyncMetrics.
v16@?0@"NSDictionary"8
remindd.RDXPCDebugPerformer
Error reverting FileAttachments: 
REMXPCDebugPerformer
v24@0:8@?<v@?@"NSString">16
v28@0:8B16@?<v@?@"NSDictionary"@"NSError">20
v24@0:8@?<v@?@"NSURL">16
v24@0:8@?<v@?@"NSDictionary"@"NSError">16
v24@0:8@?<v@?@"NSError">16
v32@0:8@"NSString"16@?<v@?q@"NSDictionary"@"NSError">24
v24@0:8@?<v@?@"NSString"@"NSDictionary"@"NSError">16
v60@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40B48@?<v@?@"NSError">52
v32@0:8@"REMObjectID"16@?<v@?@"NSString">24
v40@0:8@"REMObjectID"16B24B28@?<v@?@"NSError">32
v36@0:8@"REMObjectID"16B24@?<v@?@"NSError">28
v44@0:8@"REMObjectID"16d24B32@?<v@?@"NSError">36
v24@0:8@?<v@?@"NSArray">16
v56@0:8d16d24d32@"NSUUID"40@?<v@?>48
v32@0:8@"NSUUID"16@?<v@?>24
v32@0:8@"NSString"16@?<v@?>24
v32@0:8@"NSString"16@?<v@?@"NSArray">24
v24@0:8@?<v@?@"REMStoreContainerToken"@"NSError">16
v32@0:8@"REMStoreContainerToken"16@?<v@?@"NSError">24
v24@0:8@?<v@?@"NSArray"@"NSError">16
v40@0:8@"NSString"16@"NSURL"24@?<v@?@"NSError">32
v40@0:8@"NSString"16@"NSUUID"24@?<v@?@"NSError">32
v28@0:8B16@?<v@?@"NSArray"@"NSError">20
v40@0:8@"NSString"16@"NSString"24@?<v@?@"NSArray"@"NSError">32
v32@0:8@"NSUUID"16@?<v@?@"NSError">24
v40@0:8@"NSString"16@"NSString"24@?<v@?@"NSError">32
v32@0:8@"NSDate"16@?<v@?@"NSError">24
v40@0:8@"NSUUID"16@"NSDate"24@?<v@?@"NSError">32
v40@0:8@"REMObjectID"16@"REMTemplatePublicLinkConfiguration"24@?<v@?@"REMTemplatePublicLink"@"NSError">32
v32@0:8@"REMObjectID"16@?<v@?@"REMObjectID"@"NSError">24
v32@0:8@"NSArray"16@?<v@?@"NSError">24
v32@0:8@"NSUUID"16@?<v@?@"NSArray"@"NSError">24
v32@0:8@"REMSharedEntitySyncActivity"16@?<v@?@"NSError">24
v40@0:8@"REMObjectID"16q24@?<v@?@"NSError">32
_TtC7remindd61RDTemplateOperationCopyRemindersFromCustomSmartListToTemplate
operationType
_TtC7remindd26RDClientConnectionListener
xpcListener
xpcListenerUserInteractive
listenerQueue
clientConnectionDidClosePublisher
clientConnections
clientConnectionDidClosePassthroughSubject
B32@0:8@16@24
Connection count: %ld
New client connection {connection: %{public}@, queue: %{public}@}
Connection requested as UserInteractive but is missing the entitlement. Using xpc Queue {connection: %@}
clientConnection.accessLevel has no read/write access {clientConnection: %{public}@}
clientConnection.accessLevel == .none. Rejecting connection {clientConnection: %{public}@}
Client connection closed: %@
remindd.RDClientConnectionListener
NSXPCListenerDelegate
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
_TtC7remindd39RDSpringBoardApplicationShortcutUpdater
applicationShortcutService
applicationShortcutServiceQueue
v8@?0
Application shortcut update requested for lists {lists: %s}
Updating application shortcuts for lists {lists: %s}
AddReminderToList
actionURLAbsoluteString
Invalidating RDSpringBoardApplicationShortcutUpdater's application shortcut service
REMCDReminder.markExtraneousAlarmsForDeletion(): Reminder has <= 1 alarm, stopping early {reminderID: %{public}s}
REMCDReminder.markExtraneousAlarmsForDeletion()
REMCDReminder.markExtraneousAlarmsForDeletion() {reminderID: %{public}s, author: %{public}s}
_TtC7reminddP33_21DE925B29389F3F365F2E7E031C4B6422DueDateVerifiableAlarm
_TtC7reminddP33_21DE925B29389F3F365F2E7E031C4B6425DueDateNonVerifiableAlarm
cachedNonce
REMCDReminder.ExtraneousAlarmsMarker: Reminder has <= 1 dueDateNonVerifiableAlarms so no need to scan for extraneous items {reminderID: %s}
REMCDReminder.ExtraneousAlarmsMarker: markExtraneousAlarmsForDeletion: (dueDateNonVerifiableAlarms) {total: %ld, deleted: %ld, reminderID: %s}
com.apple.remindd.markExtraneousAlarmsForDeletion
nonVerifiable
REMCDReminder.ExtraneousAlarmsMarker: Reminder has <= 1 dueDateVerifiableAlarms so no need to scan for extraneous items {reminderID: %s}
REMCDReminder.ExtraneousAlarmsMarker: markExtraneousAlarmsForDeletion: (dueDateVerifiableAlarms) {total: %ld, deleted: %ld, reminderID: %s}
verifiable
REMCDAlarm.markAsExtraneousAndDelete(): Alarm is outdated but dirty flags is not .none, skipping {remObjectID: %{public}s, dirtyFlags: %{public}hd}
REMCDAlarm.markAsExtraneousAndDelete(): Outdated alarm is marked extraneous and deleted {remObjectID: %{public}s}
REMCDReminder.ExtraneousAlarmsMarker: Populating dueDate verifiable alarm {remObjectID: %s, nonce: %f}
REMCDReminder.ExtraneousAlarmsMarker: Populating legacy alarm {remObjectID: %s, fallbackNonce: %f}
REMCDReminderExtraneousAlarmsMarking
_TtC7remindd40RDSharedInlineTagAutoConvertStoreHandler
_TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler7Batcher
storeObjectContext
batchSizePerQuery
metrics
_TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter
reminder
field
onlySpecificCanonicalName
persistentStoreLookup
reminder.account
 RDSharedInlineTagAutoConvertHandler.Runner: Reminder[%{public}s] is missing %ld HashtagLabels[%{public}s]
v40@?0@"REMTTHashtag"8{_NSRange=QQ}16^B32
 RDSharedInlineTagAutoConvertHandler.Runner: REMTTHashtag objectIdentifier[%{public}s] does not represent a valid UUID
remindd.ReminderFieldConverter
 RDSharedInlineTagAutoConvertHandler.Batcher: CoreData error fetching REMCKSharedEntitySyncActivities. Error: %{public}s
 RDSharedInlineTagAutoConvertStoreHandler.Batcher FINISH ALL:
 RDSharedInlineTagAutoConvertStoreHandler.Batcher: START ALL
%s %s
com.apple.remindd.sharedInlineTagAutoConversion
activitiesProcessed
distinctRemindersHandled
metrics: activities processed = 
, distinct Reminders handled = 
Hashtags created = 
 RDSharedInlineTagAutoConvertStoreHandler.Batcher: Error saving at end of consumeJournalUpdates {error: %{public}s}
 RDSharedInlineTagAutoConvertStoreHandler.Batcher: FINISH .sharedToMe
 RDSharedInlineTagAutoConvertStoreHandler.Batcher: START .sharedToMe
 RDSharedInlineTagAutoConvertStoreHandler.Batcher: FINISH .userInitiated
 RDSharedInlineTagAutoConvertStoreHandler.Batcher: START .userInitiated
_TtC7remindd34RDXPCSyncInterfacePerformerFactory
discretionaryCloudKitThrottler
cloudKitThrottler
dataAccessThrottler
dataAccessRequestsWriter
_TtC7remindd27RDXPCSyncInterfacePerformer
v44@0:8B16B20B24@28@?36
storeProvider
clientConnection
remindd.RDXPCSyncInterfacePerformer
Perform has no clientConnection. Is this really an XPC call? Without a real XPC call, I cannot ask the storeController to actively notify anything.
Received request to observe CloudKit traffic {clientConnection: %@}
Failed to fetch object. {objectID: %@, error: %s}
fetchServerRecord: Tried to fetch non-existent object {remObjectID: %{public}@}
Force set migration state
Can't set migration state
CloudContext is nil -- can't set migration state
Can't clear migration state cache
AccountUtils is nil -- can't clear migration state cache
accountIdentifier is nil
setMigrationStateToDidChooseToMigrate: accountIdentifier is nil
setMigrationStateToDidChooseToMigrate
setMigrationStateToDidChooseToMigrate: isCloudKitAccount fails for accountIdentifier { %s }, error: { %s }
not CloudKit accountIdentifier
setMigrationStateToDidChooseToMigrate: accountIdentifier { %s } is not from CloudKit account
Use primary account as default for calling set migration state
Failed to set migration state {error: %s, didChooseToMigrate: %{bool}d, didFinishMigration: %{bool}d, createZoneAccountIfFinishMigration: %{bool}d
Manual fetch user record
CloudContext is nil
CloudContext is nil -- can't fetch user record
fetchUserRecord: accountIdentifier is nil
fetchUserRecord: isCloudKitAccount fails for accountIdentifier { %s }, error: { %s }
fetchUserRecord: accountIdentifier { %s } is not from CloudKit account
v24@?0@"CKRecord"8@"NSError"16
Use primary account as default for fetching user record
debugDownloadMigrationCache: accountIdentifier is nil
v24@?0@"NSArray"8@"NSError"16
Use primary account as default for debug downloading migration cache
Can't fetch migration cache records: 
migrateICloudCalDavToCloudKit: Couldn't determine the display account ID for setting flag didChooseToMigrateLocally {accountID: %{public}@}
migrateICloudCalDavToCloudKit: Failed to set flag didChooseToMigrateLocally before migration {accountID: %{public}@, error: %{public}s}
migrateICloudCalDavToCloudKit: Account flag didChooseToMigrateLocally is already true {displayACAccountID: %{public}@, accountID: %{public}@}
migrateICloudCalDavToCloudKit: Saved flag didChooseToMigrateLocally before migration {displayACAccountID: %{public}@, accountID: %{public}@}
migrateICloudCalDavToCloudKit: Failed to save flag didChooseToMigrateLocally before migration {displayACAccountID: %{public}@, accountID: %{public}@, error: %{public}s}
Reset migration state
deleteApplicationDataFromCloudKit: accountIdentifier is nil
deleteApplicationDataFromCloudKit
deleteApplicationDataFromCloudKit: isCloudKitAccount fails for accountIdentifier { %s }, error: { %s }
deleteApplicationDataFromCloudKit: accountIdentifier { %s } is not from CloudKit account
Primary account found - calling unmigration service for the account
Unknown unmigration error
Failed to unmigrate account - server returned error
Server unmigration succeed {timeElapsed: %f}
Delete Application data from CloudKit
CloudContext is nil -- can't delete server data
nil RDStoreController.accountUtils
Missing account utils -- can't purge migration state cache
Failed to delete application data from server {error: %s}
Failed to purge migration state cache {error: %s}
(daemon) Requested trigger DataAccess sync {accountIDs: %s}
(daemon) Trigger DataAccess sync {accountIDs: %s}
XPCSyncInterface.RestartCloudKitSync: Requested Restart CloudKit sync
Unsupported sync reason - 
XPCSyncInterface.RestartCloudKitSync: Unsupported sync reason - %s
XPCSyncInterface.RestartCloudKitSync: Bypassed throttler and restart CloudKit sync now {reason: %{public}s}
XPCSyncInterface.RestartCloudKitSync: CloudContext is nil -- can't restart cloudkit sync
XPCSyncInterface.RestartCloudKitSync: Restart CloudKit sync {reason: %{public}s}
XPCSyncInterface.RestartCloudKitSync: Done cancelling works in ICCC and now calls updateCloudContextStateWithSyncOption {reason: %{public}s}
XPCSyncInterface.SyncCloudKit: Requested Trigger CloudKit sync {discretionary: %{bool}d, reason: %{public}s}
XPCSyncInterface.SyncCloudKit: Unsupported sync reason - %s
XPCSyncInterface.SyncCloudKit: Dropping CloudKit sync Request {discretionary: %{bool}d, reason: %{public}s}
XPCSyncInterface.SyncCloudKit: Bypassed throttler and run sync now {discretionary: %{bool}d, reason: %{public}s}
XPCSyncInterface.SyncCloudKit: CloudContext is nil -- can't sync to cloudKit
XPCSyncInterface.SyncCloudKit: Trigger CloudKit sync {discretionary: %{bool}d, reason: %{public}s}
XPCSyncInterface.SyncCloudKit: Sync interface cloudkit sync finished with error {error: %s}
XPCSyncInterface.SyncCloudKit: CloudKit Sync did finish {discretionary: %{bool}d, reason: %{public}s}
CloudKit Sync - Discretionary
REMXPCSyncInterfacePerformer
v40@0:8@"NSString"16B24B28@?<v@?@"NSError">32
v36@0:8@"NSString"16B24@?<v@?@"NSError">28
v36@0:8@"NSArray"16B24@?<v@?@"NSError">28
v40@0:8@"REMObjectID"16B24B28@?<v@?@"REMMigrationResult"@"NSError">32
v32@0:8@"NSString"16@?<v@?@"NSDictionary"@"NSError">24
v32@0:8@"NSString"16@?<v@?@"CKRecord"@"NSError">24
v44@0:8B16B20B24@"NSString"28@?<v@?@"NSError">36
v32@0:8@"REMObjectID"16@?<v@?@"CKRecord"@"NSError">24
_TtC7remindd35RDPublicCloudDatabaseControllerMock
fetchPublicCloudObjectResultMock
Failed to initialize RDSavedReminder from reminderStorage because 'reminderStorage.titleDocument()' is nil {reminderStorage.objectID: 
contactHandlesData
unknown type
Display date predicate missing parameter: startingDueDate and/or endingDueDate
Display date predicate missing parameter: endingDueDate
Display date predicate missing parameter: startingDueDate
Predicate missing parameter: descriptors
Predicate missing parameter: text
unknown textMatching
Predicate missing parameter: startingDueDate and/or endingDueDate
Predicate missing parameter: endingDueDate
Predicate missing parameter: startingDueDate
Predicate missing parameter: parentReminderID
Predicate missing parameter: objectIDs
Predicate missing parameter: listID
_TtC7remindd38RDAssignmentNotificationEngineAssembly
OriginalAlarmUID
DueDateResolutionTokenAsNonce
AcknowledgedDate
Reminder is marked for deletion but alarm is not {alarmID: %{public}s, reminderID: %{public}s}
Fixing broken references for alarm {alarmID: %{public}s, reminderID: %{public}s}
ckRecordType
_TtC7remindd25REMAlarmTriggerCDIngestor
accountID
_TtC7remindd37REMAlarmTimeIntervalTriggerCDIngestor
_TtC7remindd34REMAlarmDateTriggerCDIngestor_ObjC
_TtC7remindd29REMAlarmDateTriggerCDIngestor
_TtC7remindd33REMAlarmLocationTriggerCDIngestor
_TtC7remindd32REMAlarmVehicleTriggerCDIngestor
Failed to code cdAlarmTrigger {error: %{public}s}
dateComponentsData
REMAlarmDateTriggerCDIngestor: cdAlarmDateTrigger.dateComponentsData is nil {cdAlarmDateTrigger.remObjectID: %@}
Failed to decode Trigger date components data
com.apple.xctest
com.apple.remindd.
REMCDSavedReminder
T@"NSData",N,D,C
T@"NSDate",N,D,C
T@"NSString",N,D,C
T@"NSNumber",N,D,&
displayDateDate
displayDateIsAllDay
hasHashtags
hasLocationTriggersOrVehicleEventTriggers
T@"NSUUID",N,D,C
T@"REMCDTemplate",N,D,&
T@"NSSet",N,D,C
_TtC7remindd28REMTemplateStorageCDIngestor
templatePublicLinkTTL
resolutionTokenMap
REMTemplateStorageCDIngestor: merge(storage:into cdTemplate:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}
%{public}s: '\REMCDTemplate.name' should not be nil at the end of 'merge(storage:into:changedValueKeys:optionalCoordinator:)' {storage.objectID: %{public}@, storage.name: %s}
Failed to insert template operation queue item because 'storage.accountID' does not belong a CloudKit account. {storage.objectID: 
}, storage.accountID: 
Failed to insert template operation queue item for copying reminders to template because 'storage.configuration' is nil. {storage.objectID: 
storeControllerManagedObjectContext
REMTemplateStorageCDIngestor: changedValueKeys should not include 'configuration' because storage.isPersisted is true {objectID: %{public}@, keys: %{public}s}
REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with unsupported key path {objectID: %{public}s, propertyKeyPath: %{public}s}}
REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with unsupported propertyKeyPath {objectID: %{public}s, propertyKeyPath: %{public}s}}
Unknown ingestable key {key: %s}
Failed to copy reminders to template due to invalid 'cdAccount.storeControllerManagedObjectContext' {cdAccount.remObjectID: 
Failed to copy reminders to template because 'templateConfiguration.sourceListID' does not belong to either REMList or REMSmartList {templateConfiguration.sourceListID: 
Failed to update 'mostRecentTargetTemplateIdentifier' of source list because 'sourceListID' does not belong to either REMList or REMSmartList {sourceListID: 
Fetched more than expected number of CD objects than the given IDs: 
Unknown root entity name for objectID {objectID: 
Failed to get entity for CDObject {remObjectID: 
Failed to get entity for CDObject {remObjectID: %@, CDObject: %s}
CoreData entity not found for remObjectID.entity {remObjectID: 
, momEntityNames: 
CoreData entity not found for remObjectID.entity {remObjectID: %@, CDObject: %s, momEntityNames: %s}
ObjectID entity is not a subentity of the requested CDObject's entity {remObjectID: 
ObjectID entity is not a subentity of the requested CDObject's entity {remObjectID: %@, CDObject: %s}
cdEntity.name != entityName. Performing lookup {remObjectID: %@, CDObject: %s}
REMTemplateStorageCDIngestor: storage.unsavedManualOrdering should not be nil when calling `mergeManualOrdering(storage:coordinator:)` {templateObjectID: %{public}@}
REMTemplateStorageCDIngestor: ingesting manual ordering {templateObjectID: %{public}@, top-level elements count: %ld}
Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}
Programming error, ingestionContextsByAccountIdentifier is uninitialized for 
Tried to perform after-save action with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}
Could not find the changed keys & values to perform after-save action -- bail {author: %{public}s, cdObjectID: %s}
[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}
Swift/Dictionary.swift
Fetching pending objects from database {cdPendingObjectIDs.count: %ld}
Swift/NativeDictionary.swift
Duplicate values for key: '
REMCDManualSortHint
mutateRelationshipOrdering
Tried to mutate ordering in relationships with non-existent target object -- bail {author: 
Tried to mutate ordering in relationships with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}
Should not happen since REMManualOrdering has no orderable relationship.
establishRelationships
Tried to establish relationship with non-existing object -- skipping {author: 
Tried to establish relationship with non-existing object -- skipping {author: %{public}s, cdObjectID: %s}
Tried to establish realtionship with non-existent target object -- bail {author: 
, relationshipObjectID: 
Tried to establish realtionship with non-existent target object -- bail {author: %{public}s, cdObjectID: %s, relationshipObjectID: %s}
[%{public}s] UPDATE RELATIONSHIPS {author: %{public}s, objectID: %{public}@, changedRelationshipKeys: %{public}s}
Missing relationship {key: 
Missing relationship {key: %s, objectID: %s}
Mismatching class for relationship {key: 
, expectedType: 
Mismatching class for relationship {key: %s, expectedType: %s, found: %s}
com.apple.private.remindd
Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}
[%{public}s] updateChangeCount() skipped {syncToCloudKit: %{bool}d, immutableType: %{bool}d, objectID: %{public}@, changedValues.keys: %{public}s}
[%{public}s] UPDATE VALUES {author: %{public}s, objectID: %{public}@, managedObjectID: %@, changedKeys: %{public}s}, syncToCloudKit: %{bool}d}
Client doesn't have permission to write key {changedValueKey: %{public}s}
[%{public}s] INSERT {author: %{public}s, objectID: %{public}@, managedObjectID: %@}
Skipping fetch during upsert {CDType: %s}
Performing fetch during upsert {CDType: %s}
Unknown validation error (
CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}
CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}
Skipping afterSaveAction() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}
REMCDSavedAttachment
Skipping mutateRelationshipOrdering() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}
Tried to mutate ordering of a non-existing relationship -- bail {author: 
, orderableRelationhipKey:
Tried to mutate ordering of a non-existing relationship -- bail {author: %{public}s, cdObjectID: %s, orderableRelationhipKey: %s}
Tried to mutate a relationship that is not ordered -- bail {author: 
Tried to mutate a relationship that is not ordered -- bail {author: %{public}s, cdObjectID: %s, orderableRelationhipKey: %s}
[%{public}s] Updating relationship ordering {author: %{public}s, objectID: %{public}@, changedValueKey: %{public}s, orderableRelationshipKey: %{public}s}
Not mutating ordering because mutableOrderedSet for relationship is nil {orderableRelationshipKey: %s}
Skipping establishRelationships() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}
[%{public}s] Skipping merge() and updateChangeCount() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}
This should not happen as REMSharee has no ordering relationship.
This should not happen as REMCalDAVNotification has no ordering relationship.
Should not happen since REMTemplateStorage have no orderable relationship.
REMTemplateStorageCDIngestor: establishRelationship(onStorage:into cdTemplate:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}
Updating cdTemplate.parentAccount {cdTemplate: %{public}s, parentAccount: %{public}s}
Updating cdTemplate.account {cdTemplate: %{public}s, account: %{public}s}
%{public}s: Did reset '\REMCDList.mostRecentTargetTemplateIdentifier' to nil {mostRecentTargetTemplateIdentifier: %{public}s}
%{public}s: Did not find REMCDList and REMCDSmartList with matching 'mostRecentTargetTemplateIdentifier' {mostRecentTargetTemplateIdentifier: %{public}s}
%{public}s: Did reset '\REMCDSmartList.mostRecentTargetTemplateIdentifier' to nil {mostRecentTargetTemplateIdentifier: %{public}s}
Should not happen since REMSmartListStorage have no orderable relationship.
REMSavedReminderStorageCDIngestor: Should not happen since REMReminderStorage have no orderable relationship.
Should not happen since REMReminderStorage have no orderable relationship.
This should not happen as REMAlarm has no ordering relationship.
This should not happen as REMAssignment has no ordering relationship.
Should not happen since attachments have no orderable relationship.
This should not happen as REMHashtag has no ordering relationship.
This should not happen as REMRecurrenceRule have no orderable relationship.
Should not happen since alarm triggers have no orderable relationship.
REMAlarmTriggerCDIngestor.establishRelationship: Setting alarm.dueDateResolutionTokenAsNonce {nonce: %{public}.*f, alarmID: %{public}s, triggerID: %{public}s}
REMTemplateStorageCDIngestor: cdTemplate.account is nil {cdTemplate.remObjectID: %{public}@}
REMTemplateStorageCDIngestor: cdTemplate.name is nil {cdTemplate.remObjectID: %{public}@}
REMNonceGenerating
_TtC7remindd48REMDaemonUserDefaultsPreferredListStorageAdapter
daemonUserDefaults
_TtC7remindd39MockInMemoryPreferredDefaultListStorage
l_preferredDefaultListObjectIDUrl
l_preferredDefaultListID
Template missing account {error: 
ShowingLargeAttachments
REMCDSmartList is not expected to be shared, we shouldn't upload it for non-owner (smartListID: %{public}s)
IsLinkedToAccount
MostRecentTargetTemplateIdentifier
v32@0:8@16@24
RDJSONCoder failed to encode object as JSON {class: %s, error: %s}
RDJSONEncoder can't encode output string as utf8 data
SmartList (ckIdentifier: %{public}s) does not have a sorting style
SmartList (ckIdentifier: %{public}s) does not have smart list type
REMCDObjectMergeConflictResolving
ICCloudObject
v32@0:8@16@?24
@"CKRecordID"16@0:8
@"CKRecord"16@0:8
v32@0:8@"NSMutableSet"16@?<v@?@"<ICCloudObject>"@"CKRecord">24
v32@0:8@"CKRecord"16@"NSString"24
v24@0:8@"CKModifyRecordsOperation"16
v32@0:8@"CKModifyRecordsOperation"16@"CKRecord"24
v40@0:8@"CKModifyRecordsOperation"16@"CKRecordID"24@"NSError"32
@"NSManagedObjectID"16@0:8
@40@0:8@"CKRecordID"16@"NSString"24@"NSManagedObjectContext"32
@40@0:8@"CKRecord"16@"NSString"24@"NSManagedObjectContext"32
@40@0:8@"CKRecord"16@"REMCDAccount"24@"NSManagedObjectContext"32
@40@0:8@"CKRecordID"16@"REMCDAccount"24@"NSManagedObjectContext"32
@"NSArray"24@0:8@"NSManagedObjectContext"16
@32@0:8:16@24
Q16@0:8
RDHasCKDatabaseScope
_TtC7remindd53RDStoreControllerMigrator_AutoConvertSharedInlineTags
_TtCC7remindd53RDStoreControllerMigrator_AutoConvertSharedInlineTagsP33_6756D8040FA0DE7AE12E7CF0AECBEDFA6Runner
isLaunching
managedObjectContext
RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner FINISH {successfulMigrationCount: %ld, failedMigrationCount: %ld, persistentStore: %{public}s}
RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner BEGIN {persistentStore: %{public}s}
RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner failed to fetch Reminders {error: %{public}s}
RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner failed to save {error: %{public}s}
Reminder[%{public}s] conversion failed for field %{public}s {error: %{public}s}
Reminder[%{public}s] conversion succeeded for field %{public}s
RDStoreControllerMigrator_AutoConvertSharedInlineTags: Skipping persistentStore since its account is not a CK account {persistentStore: %{public}s}
RDStoreControllerMigrator_AutoConvertSharedInlineTags.OnlyCKPersistentStoreLookup: Could not fetch REMCDAccount from persistentStore {error: %{public}s}
RDStoreControllerMigrator
v32@0:8@"NSPersistentStore"16@"NSMutableDictionary"24
_TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder
v28@0:8B16@20
v28@0:8i16@20
v32@0:8q16@24
v32@0:8d16@24
dicts
arrays
allowsKeyedCoding
JSON encode error: expected at least one dict
JSON encode error: expected at least one array
_TtC7remindd31RDCoreDataCoreSpotlightDelegate
$__lazy_storage_$_contactStore
shouldStart
TB,N,VshouldStart
cdList.identifier: 
Successfully indexed list {list: %{public}s, CSSearchableItemAttributeSet.identifier: %{public}s
Evaluating TypedPredicate with nil NSPredicate against object {object: %@}
cdReminder.identifier: 
Successfully indexed reminder {reminder: %{public}s, CSSearchableItemAttributeSet.identifier: %{public}s
Unexpected error {error: %s}
Couldn't create CSSearchableItemAttributeSet for reminder. {%{public}s}
Not indexing reminder because it is not eligible. {%{public}s}
Missing title. Skipping for indexing. {%{public}s}
Unable to ingest object into storage. {%{public}s, error: %s}
Device spotlight index is outdated, removing the index. {device: %ld, required: %ld}
CoreSpotlight deleteAllSearchableItems done, upgrading spotlightIndexVersion to %ld
Error occured trying to deleteAllSearchableItems {error: %s}
_TtC7remindd21RDHashtagLabelUpdater
timeGroupingStrategy
cloudAccountsDidChangeCancellable
hashtagInsertEventCancellables
highPrioritySubscriptionTransactionRegistrar
lowPrioritySubscriptionTransactionRegistrar
changeTrackingClientName
_TtCC7remindd21RDHashtagLabelUpdaterP33_45435200B10504FC9CF3E682DD4A9AA213BabysitTarget
_TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA229ChangeTrackingAccountProvider
v16@0:8
T@"REMObjectID",N,R,Vrem_accountObjectID
_TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA233ManualHashtagLabelUpdaterDelegate
_TtC7remindd22RDHashtagLabelRepairer
remindd.ChangeTrackingAccountProvider
com.apple.remindd.RDHashtagLabelUpdater.babysitter
RDHashtagLabelUpdater.associate(hashtagLabel:to:): Impossible. Should be able to get first occurrence hashtag as empty array or those with nil name should have been filtered {hashtags: %{public}s}
RDHashtagLabelUpdater.associate(hashtagLabel:to:): Impossible. Should be able to get most recently created date as empty array or those with nil name should have been filtered {hashtags: %{public}s}
RDHashtagLabelUpdater.associate(hashtagLabel:to:): updated hashtag label recencyDate {new-recencyDate: %s}
RDHashtagLabelUpdater.associate(hashtagLabel:to:): updated hashtag label first occurrence {canonicalName: %s, new-name: %s, new-firstOccurrenceCreationDate: %s}
RDHashtagLabelRepairer removes sharedToMeReminerPlaceholder[%s] with reminderID[%s]
REMCDHashtagLabelRepairer: failed to fetch sharedToMeReminderPlaceholder from database {error: %s}
RDHashtagLabelRepairer: Impossible as hashtag[%{public}s] without sharedToMeReminderCKIdentifier
RDHashtagLabelRepairer: reminder[%s] is not found in database. It may not be sync down yet.
RDHashtagLabelRepairer: fixes hashtag[%s] with sharedToMeReminderCKIdentifier[%s] and original reminder id [%s]
RDHashtagLabelUpdater: failed to fetch reminders from database {error: %s}
REMCDHashtagLabelRepairer: failed to fetch hashtag with sharedToMeReminderCKIdentifier, reminder and mismatchedReminder from database {error: %s}
RDHashtagLabelRepairer: Hashtag[%{public}s] without name
RDHashtagLabelRepairer: updates hashtag [%s] from old label canonical name [%s] to new canonical name [%s]
REMCDHashtagLabelRepairer: hashtag[%{public}s] without name
REMCDHashtagLabelRepairer: hashtag[%{public}s] without accountIdentifier
RDHashtagLabelUpdater: failed to create hashtag label with {hashtag: %{public}s, error: %s}
RDHashtagLabelUpdater: failed to fetch hashtag labels from database {error: %s}
REMCDHashtagLabelRepairer: failed to fetch all hashtag label with mismatched hashtag name from database {error: %s}
RDHashtagLabelRepairer: updates hashtag[%s] with label[%s]
REMCDHashtagLabelRepairer: failed to fetch hashtag from database {error: %s}
RDHashtagLabelRepairer: removes hashtags with isConcealed for hashtag label [%s]: %s
REMCDHashtagLabelRepairer: failed to fetch hashtag label with concealed hashtag from database {error: %s}
RDHashtagLabelRepairer: removes hashtag label without hashtag: %s
REMCDHashtagLabelRepairer: failed to fetch hashtag label from database {error: %s}
Babysitting RDHashtagLabelUpdater because it failed too many times {waiterID: %{public}s}.
RDHashtagLabelUpdater: No account eligible for hashtag change tracking
RDHashtagLabelUpdater: No since-token from change tracking {account: %{public}s}
RDHashtagLabelUpdater: No updated change token from change tracking (no changes) {account: %{public}s, since: %{public}@}
RDHashtagLabelUpdater: Marked change set consumed {account: %{public}s, since: %{public}@, upTo: %{public}@}
RDHashtagLabelUpdater: Failed to save hashtage label for %s
RDHashtagLabelUpdater: Unexpected nil change set when trying to filter in ICCC authors {account: %{public}s}
RDHashtagLabelUpdater: Processing change set {account: %{public}s, since: %{public}@, upTo: %{public}@}
RDHashtagLabelUpdater: Tracked insertion is not an REMObjectID, huh? {inserted: %s}
RDHashtagLabelUpdater: Tracked insertion is not an REMSharedToMeReminderPlaceholder, huh? {inserted: %s}
RDHashtagLabelUpdater: Tracked deletion is not an REMDAHashtagTombstone (or nil) huh? {deleted: %s}
RDHashtagLabelUpdater: Tracked deletion tombstone does not contain an objectIdentifier, huh? {deleted: %s}
RDHashtagLabelUpdater: Tracked deletion tombstone does not contain the hashtag name, huh? {deleted: %s}
RDHashtagLabelUpdater: Saving changes - insert: %ld, update: %ld, delete: %ld
RDHashtagLabelUpdater: No shared reminder placeholders found in change {since: %{public}@, upTo: %{public}@}
RDHashtagLabelUpdater: inserted sharedToMeReminderPlaceHolder IDs: %{public}s
RDHashtagLabelUpdater: No ICCC deleted hashtags found in change {since: %{public}@, upTo: %{public}@}
RDHashtagLabelUpdater: deleted hashtag IDs by ICCC: %{public}s
RDHashtagLabelUpdater: No user initiated deleted hashtags found in change {since: %{public}@, upTo: %{public}@}
RDHashtagLabelUpdater: deleted hashtag IDs initiated by user: %{public}s
RDHashtagLabelUpdater: No inserted hashtags found in change {since: %{public}@, upTo: %{public}@}
RDHashtagLabelUpdater: inserted hashtag IDs: %s
RDHashtagLabelUpdater: Cannot create hashtag label for hashtag: %{public}s
RDHashtagLabelUpdater created new hashtag label {canonicalName: %s, firstHashtag.objectID: %{public}s}
RDHashtagLabelUpdater updated hashtags that need to be associated to shared-to-me-reminders {hashtagsNeedAssociatingToReminder.count: %ld, shared-to-me-reminders.count: %ld}
RDHashtagLabelUpdater: Impossible to get here, nil canonical name should have been filtered
RDHashtagLabelUpdater processing inserted hashtags: %s
RDHashtagLabelUpdater: REMCDHashtagLabel with nil accountIdentifier: %{public}s
RDHashtagLabelUpdater: failed to fetch hashtag from database {error: %s}
RDHashtagLabelUpdater deleted hashtag label {canonicalName: %s}
RDHashtagLabelUpdater updated hashtag label recency date {canonicalName: %s, new-recencyDate: %s}
RDHashtagLabelUpdater: Cannot find a non-nil next occurrence hashtag name. We have non empty hashtagLabel.hashtags but we can't find one with non-nil name.
RDHashtagLabelUpdater updated hashtag label name to next occurrence {canonicalName: %s, nextOccurrenceHashtagName: %s}
RDHashtagLabelUpdater: Impossible to get here, concealed hashtag[%s] with nil name should have been filtered
RDHashtagLabelUpdater processing hashtag tombstones {canonicalName: %s, deletedIDs: %{public}s}
RDHashtagLabelUpdater: Unexpected hashtag with nil or empty name %{public}s
RDHashtagLabelUpdater process shared to me reminders: %{public}s
RDHashtagLabelUpdater: failed to fetch unassociated hashtags with sharedToMEReminderCkIdentifier from database {error: %s}
RDHashtagLabelUpdater: failed to fetch sharedToMeReminderPlaceholder from database {error: %s}
RDHashtagLabelUpdater: Mark to current token as consumed due to Babysitting {account: %{public}s, token: %{public}s}
RDHashtagLabelUpdater: Not tracking changes since there's no active cloudkit account logged in or enabled
RDHashtagLabelUpdater: active accounts supporting hashtags: %{public}s
RDHashtagLabelUpdater.start() must be called exactly once
com.apple.remindd.RDHashtagLabelUpdater
com.apple.remindd.RDHashtagLabelUpdater.start
RDHashtagLabelUpdater: dispatch to call refreshFromLastConsumedOnLaunchIfNeeded {after: %ld}
os_transaction INIT {name: com.apple.remindd.RDHashtagLabelUpdater.start}
Starting RDHashtagLabelUpdater
os_transaction RELEASE {name: com.apple.remindd.RDHashtagLabelUpdater.start}
RDHashtagLabelUpdater: refreshFromLastConsumedOnLaunchIfNeeded completed {refreshed: %s}
RDHashtagLabelUpdater: Failed to compareCurrentChangeTokenToLastConsumed {account: %{public}s, error: %s}
RDStoreControllerNotificationCenter.isHighPriority: Unknown QoS, handling it like `default`. {qualityOfService: %{public}ld}
RDHashtagLabelUpdater: (Re-)initialized changeTrackingHelpers upon enabled/disabled CloudKit account(s).
RDHashtagLabelUpdater: Reset babysitter upon enabled/disabled CloudKit account(s) for {waiterID: %{public}s}
com.apple.remindd.RDHashtagLabelUpdater.highPrioritySubscription
com.apple.remindd.RDHashtagLabelUpdater.lowPrioritySubscription
com.apple.remindd.RDHashtagLabelUpdater.crashDetected
HashtagLabelUpdater
com.apple.remindd.RDHashtagLabelUpdater.hashtagInsertEventScheduler
_TtC7remindd18REMAlarmCDIngestor
reminderID
Unhandled trigger type {trigger: 
REMAlarmCDIngestor: cdAlarm.trigger is nil {cdAlarm.remObjectID: %@}
Trigger is not AlarmTriggerRepresentable {cdTrigger: 
_TtC7remindd21RDManualSortIDAdapter
persistenceHost
cache
accountManualSortIDsOption
Invalid persistenceHost.identifier (
), cannot proceed to fetch account for RDManualSortIDAdapter.accountManualSortIDsForSignedInAccounts(in:)
RDManualSortIDAdapter > initialized
_TtC7remindd37RDStaledFileAttachmentCleanupActivity
xpcActivityAllowBattery
xpcActivityIsCPUIntensive
xpcActivityIsDiskIntensive
rateReducerConfiguration
executionDateStorage
babysitter
storeController
configurations
states
executable
_TtCC7remindd37RDStaledFileAttachmentCleanupActivityP33_CF681C231151F2D660185D6C75ABF25747RDStaledFileAttachmentCleanupActivityExecutable
perRunDeleteLimit
_TtCC7remindd37RDStaledFileAttachmentCleanupActivityP33_CF681C231151F2D660185D6C75ABF25749RDStaledFileAttachmentCleanupExecutionDateStorage
backingStorage
[%{public}s] configuration validation fail - cannot execute because configurations.staledFileAttachmentCleanupPerRunDeleteLimit is 0
RDStaledFileAttachmentCleanupExecutionDateStorage.updateLastExecutedDate(for:) must work with RDStaledFileAttachmentCleanupActivity only {executable: %{public}s}
RDStaledFileAttachmentCleanupExecutionDateStorage.lastExecutedDate(for:) must work with RDStaledFileAttachmentCleanupActivity only {executable: %{public}s}
[%{public}s] failed to fetch saved attachment UUIDs from database {error: %{public}s}
[%{public}s] failed to fetch file attachment UUIDs from database {error: %{public}s}
[%{public}s] failed to fetch accounts from database {error: %{public}s}
RDStaledFileAttachmentCleanupActivity.execute
[%{public}s] start execute()
[%{public}s] no staled attachment left, container deemed clean
[%{public}s] there's no account supporting attachments, completing execution
[%{public}s] no staled attachment found for {accountID: %{public}@}
[%{public}s] no delete limit left {perRunDeleteLimit: %lu}
[%{public}s] some purge wasn't successful {purged.count: %ld, accountID: %{public}@}
[%{public}s] purge was successful {purged.count: %ld, accountID: %{public}@}
[%{public}s] going to purge staled attachments {to-purge.count: %ld, limit-left: %ld, total-staled: %ld, accountID: %{public}@}
remindd.RDStaledFileAttachmentCleanupActivity
_TtC7remindd28REMSavedAttachmentCDIngestor
storeControllerManagedObjectContext.storeController
Failed to merge storage into cdSavedAttachment because storage is an unhandled type of attachment {storage: 
%{public}s: Failed to merge storage into cdSavedAttachment because storage is an unhandled type of attachment {storage: %{public}@}
%{public}s: Merged storage into cdSavedAttachment {storage: %{public}@}
%{public}@: Should not happen since saved attachments have no orderable relationship to mutate.
%{public}@: Should not happen since saved attachments have no orderable relationship.
_TtC7remindd17RDDARequestsQueue
identifier
dispatchQueue
requestChannelReader
pendingRequests
RDDARequestsQueue: Draining {identifier: %s, count: %ld, hasDelegate: %{bool}d}.
RDDARequestsQueue: Appending new request {identifier: %s, request: %s, hasDelegate: %{bool}d}.
_TtC7remindd29REMSmartListStorageCDIngestor
REMSmartListStorageCDIngestor: merge(storage:into cdSmartList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}
Ingesting smart list storage {storage.smartListType: %{public}s, storage.objectID: %{public}@, changedValueKeys: %{public}s}
storage.manualOrdering should not be nil when calling `mergeManualOrdering(storage:coordinator:)` {smart list: %{public}@, smart list type: %{public}s}
ingesting manual ordering {smart list: %{public}@, smart list type: %{public}s, top-level elements count: %ld}
REMSmartListStorageCDIngestor: establishRelationship(onStorage:into cdSmartList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}
Updating smartList.parentList {smartList: %s, parentList: %s}
Updating smartList.parentAccount {smartList: %{public}s, parentAccount: %{public}s}
Updating smartList.account {smartList: %{public}s, account: %{public}s}
REMSmartListStorageCDIngestor: cdSmartList.account is nil {cdSmartList.remObjectID: %{public}@}
REMSmartListStorageCDIngestor: cdSmartList.smartListType is nil {cdSmartList.remObjectID: %{public}@}
Unable to initialize REMSmartListType with stringValue 
batchDeleteCachedPublicTemplates
copyRemindersInCustomSmartListToTemplate
copyRemindersInREMListToTemplate
copyRemindersInPublicTemplateToREMList
copyRemindersInTemplateToREMList
REMCDTemplateOperationQueueItem <
operationTypeRawValue: 
templateObjectID: 
_TtC7remindd34RDSharedInlineTagAutoConvertEngine
handler
cancellables
_TtCC7remindd34RDSharedInlineTagAutoConvertEngineP33_5B5B2EA781175C6DB341AB3D5E32460613BabysitTarget
babysitterOperationDidLaunch
babysitterOperationStoreDidChange
com.apple.remindd.RDSharedInlineTagAutoConvertEngine.babysitter
RDTemplateOperationQueue: Reset babysitter upon enabled/disabled CloudKit account(s) for {waiterID: %{public}s}
Babysitting RDSharedInlineTagAutoConvertEngine because it failed too many times {waiterID: %{public}s}
com.apple.remindd.RDSharedInlineTagAutoConvertEngine.crashDetected
 RDSharedInlineTagAutoConvertEngine is already started. Multiple calls to `start()` were made.
 RDSharedInlineTagAutoConvertEngine Started
 RDSharedInlineTagAutoConvertEngine Starting...
com.apple.remindd.RDSharedInlineTagAutoConvertEngine.storeControllerDidChange
os_transaction INIT {name: %{public}s}
 RDSharedInlineTagAutoConvertEngine: Finished journal consumption due to %{public}s
 RDSharedInlineTagAutoConvertEngine: Starting journal consumption due to %{public}s
os_transaction RELEASE {name: %{public}s}
Can't construct REMContactRepresentation from invalid JSON
HousekeepingActivityScheduler
executeImageDeduplication
[%{public}s] configurations.imageDeduplicationApproximatePerRunDeleteLimit is 0
executeStaledFileAttachmentCleanup
[%{public}s] configurations.staledFileAttachmentCleanupPerRunDeleteLimit is 0
account.identifier
SharedToMeReminderCKIdentifier
REMCDHashtag+CloudKit: mergeData(from:) unexpected nil record['SharedToMeReminderCKIdentifier'] when record['Reminder'] is nil and hashtag not markedForDeletion, the former must present otherwise we have no way to associate the tag to the reminder {hashtag: %{public}s}
REMCDHashtag+CloudKit: mergeData(from:) merged to cdHashtag.reminder from SharedToMeReminderCKIdentifier {hashtag: %{public}s, sharedToMeReminderCKIdentifier: %{public}s}
REMCDHashtag+CloudKit: mergeData(from:) hashtag is markedForDeletion so we should not try to merge SharedToMeReminderCKIdentifier {hashtag: %{public}s}
REMCDHashtag+CloudKit: mergeData(from:) merged to cdHashtag.reminder from a CK reference {hashtag: %{public}s, reminderIdentifier: %{public}s, markedForDeletion: %{public}s}
REMCDHashtag+CloudKit: mergeData(from:) unexpected nil cdReminder.remObjectID when merging cdHashtag.reminder {hashtag: %{public}s, reminderIdentifier: %{public}s}
Hashtag does not have a name
Hashtag does not have creation date
REMCDHashtag+CloudKit: Unexpectedly got cdHashtag.reminder == nil in newlyCreatedRecord() (key=.sharedToMeReminderCKIdentifier) {hashtag: %{public}s, reminder: %{public}s}
REMCDHashtag+CloudKit: newlyCreatedRecord() will write to SharedToMeReminderCKIdentifier only if the tag was created by a participant {owner?: %{public}s, isShared?: %{public}s, hashtag: %{public}s, reminder: %{public}s}
REMCDHashtag+CloudKit: newlyCreatedRecord() (key=.sharedToMeReminderCKIdentifier) unsetting SharedToMeReminderCKIdentifier as the hashtag is markedForDeletion {hashtag: %{public}s}
REMCDHashtag+CloudKit: Unexpectedly got cdHashtag.reminder == nil in newlyCreatedRecord() (key=.reminder) {hashtag: %{public}s}
REMCDHashtag+CloudKit: newlyCreatedRecord() will set up a CK reference only if the tag was created by the owner {owner?: %{public}s, hashtag: %{public}s, reminder: %{public}s}
REMCDHashtag+CloudKit: newlyCreatedRecord() (key=.reminder) unsetting reminder CK reference as the hashtag is markedForDeletion {hashtag: %{public}s}
Reminder is marked for deletion but hashtag is not {hashtagID: %{public}s, reminderID: %{public}s}
Fixing broken references for hashtag {hashtagID: %{public}s, reminderID: %{public}s}
_TtC7remindd33RDXPCSuggestedAttributesPerformer
v48@0:8@16@24@32@?40
configurationSource
cachedList
cachedEditingSessionID
storePerformer
cachedMLModels
cachedContacts
contactStore
remindd.RDXPCSuggestedAttributesPerformer
Prewarming models
Loaded MLModels {models: %{public}s}
Sugested Attribute Performer failed loading embedding config
Unrecognized embedding method: 
 in Suugested Attribute Performer
Deallocating SuggestedAttributesPerformer
REMXPCSuggestedAttributesPerformer
v48@0:8@"REMStoreSwiftInvocation"16@"NSData"24@"NSDictionary"32@?<v@?@"REMStoreSwiftInvocationResult"@"NSError">40
_TtC7remindd20RDDispatchQueue_ObjC
utilityQueue
xpcDefaultQueue
com.apple.remindd.xpc.default
com.apple.remindd.background
com.apple.remindd.discretionary
com.apple.remindd.xpc.listener
com.apple.remindd.save
com.apple.remindd.xpc.ui.
com.apple.remindd.utility
com.apple.remindd.xpc.notification
_TtC7remindd30RDAlarmCoreSuggestionsConsumer
coreSuggestionHandler
RDAlarmCoreSuggestionsConsumer consume %ld producerAlarms
_TtC7remindd27RDTodayNotificationAssembly
_TtC7remindd16RDXPCEventStream
alarmHandlers
eventInterface
_TtCC7remindd16RDXPCEventStreamP33_42BD93B4E4BDBF740267D11659A1191423SystemXPCEventInterface
<XPCEventStream.Token: 
Not scheduling alarm because timeIntervalInSeconds > Int64.max
UserVisible
Setting xpc event {xpc_event: %s, date: %s}
Not scheduling alarm becuase dateInNanoSeconds > Int64.max
Starting XPC Event Stream
Tried to start XPCEventStream twice. Crashing...
Received xpc_event missing name {xpc_event: %s}
com.apple.remindd.xpcalarm
os_transaction RELEASE {name: com.apple.remindd.xpcalarm}
os_transaction INIT {name: com.apple.remindd.xpcalarm}
Delivering xpc_event to handlers {handlers.count: %ld}
Received xpc_event with no handlers -- Dropping {xpc_event: %s}
Unsetting alarm {eventName: %s}
Received xpc event {xpc_event: %s}
_TtC7remindd60RDStoreControllerMigrator_DiacriticsInsensitiveHashtagLabels
DiacriticsInsensitiveHashtagLabelsMigrator BEGIN {store: %{public}s}
DiacriticsInsensitiveHashtagLabelsMigrator END {store: %{public}s, existing hashtag labels count = %ld, newly created hashtag labels count: %ld}
DiacriticsInsensitiveHashtagLabelsMigrator with error: %s
DiacriticsInsensitiveHashtagLabelsMigrator: hashtag [%{public}s] does not have canonicalName
DiacriticsInsensitiveHashtagLabelsMigrator: Failed to create hashtag label with hashtag [%{public}s] {error: %{public}s}
DiacriticsInsensitiveHashtagLabelsMigrator: hashtag label '%@' is already in database
DiacriticsInsensitiveHashtagLabelsMigrator: hashtag [%{public}s] does not match hashtag label name '%s'
DiacriticsInsensitiveHashtagLabelsMigrator: process hashtag label '%s' with hashtags: %ld
remindd1
insertNewJournalEntriesIfEligible()
 %s: Object is not eligible for journaling {remObjectID: %{public}s}
 %s: Unable to unwrap optional storeControllerManagedObjectContext {remObjectID: %{public}s}
 %s: Considering reminder activity {remObjectID: %{public}s}
 %s: 
 Failure - Insertion of new `%{public}s` sync activity for shared entity {remObjectID: %{public}s}
 %s: 
 Success - Insertion of new `%{public}s` sync activity for shared entity {remObjectID: %{public}s}
makeObject(for:)
 %s: An unexpected error occurred {remObjectID: %{public}s, description: %{public}s}
 REMSharedActivityJournaling: Unable to get list from reminder {reminderObjectID: %{public}s, isConcealed: %s}
 REMSharedActivityJournaling: Unable to get ckServerRecord for reminder {reminderObjectID: %{public}s}
 REMSharedActivityJournaling: Unable to get ckServerShare from reminder's list. Assuming unit testing and returning userRecordID {reminderObjectID: %{public}s, listObjectID: %{public}s}
 REMSharedActivityJournaling: Unable to get a participant for the reminder's author {authorID: %{public}s, reminderObjectID: %{public}s}
 REMSharedActivityJournaling: Unable to get lastModifiedUserRecordID from reminder {reminderObjectID: %{public}s}
 REMSharedActivityJournaling: Unable to get creatorUserRecordID from reminder {reminderObjectID: %{public}s}
isEligibleForJournaling
 %s: Object is not eligible for journaling {isSharedViaICloud: %s}
 %s: Object is not eligible for journaling - transactionAuthor: %{public}s
 %s: Object is not eligible for journaling {isAuthoredByCurrentUser: %s}
 %s: Object is not eligible for journaling {isConcealed: %s}
: Unable to get authorUserID for reminder {reminderObjectID: %{public}s}
 REMSharedActivityJournaling: Unable to get currentUserShareParticipantID from reminder. Assuming unit testing and returning CKCurrentUserDefaultName {reminderObjectID: %{public}s}
REMCDModelNSManagedObjectSwiftHooks
REMCDTemplate.mergeData(from record:accountID:) will insert pending post-save action '.notify_SharedToMeListPinnedStateDidBecomeStale' due to change in 'sourceListIDURL' {ckIdentifier: %{public}s, markedForDeletion: %{public}s, sourceListIDURL: %{public}s}
REMCDTemplate will not be used to represent a public template, which is fetched from a template's public link, and is not expected to be shared, we shouldn't upload it for non-owner (templateID: %{public}s)
PublicLinkLastModifiedDate
PublicLinkCreationDate
PublicLinkConfigurationData
MostRecentPublicLinkUpdateRequestDate
LastModifiedDate
Template (ckIdentifier: %{public}s) does not have a sorting style
_TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation
salt
timezone
options
embeddingsURL
reminderTitleEmbeddings
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/RDStoreControllerExporter.swift
DES unrecognized embedding
Failed to load embedding config for Distributed Evaluation
DES recipe has includeReminderTitleCategoryFilteredStopWords = true, but failed initializing embedding for {lang: %s}
DES recipe has includeReminderTitleCategoryUniversalGrammar = true, but failed initializing embedding for {lang: %s}
DES recipe has includeReminderTitleCategorySentence2Vec = true, but failed initializing embedding for {lang: %s}
systemTimeZoneName
systemTimeZoneOffset
creationDayOfWeek
completionDayOfWeek
displayDayOfWeek
titleFuzzedEmbeddings
universalGrammar
filteredStopWords
locationAlarmIdentifier
locationAlarmProximity
recurrenceDescription
hasRemindMeWhenMessaging
%{public}s#rd_isExcludedFromBackup.get : Failed to retrieve URL resource values {url: %{public}s, error: %{public}s}
%{public}s#rd_isExcludedFromBackup.set : Failed to set URL resource values {url: %{public}s, error: %{public}s}
remindd
v20@0:8B16
rd_isExcludedFromBackup
TB,N
_TtC7remindd20RDNotifydEventStream
notificationName
notifyToken
Dropped notification becuase we don't have an event handler {notificationName: %s}
Deallocating notifyd stream {notificationName: %s}
Failed to register for notifyd notification {notificationName: %s, status: %u}
Registered notifyd notification {notificationName: %s}
Received notifyd notification after event stream was deallocated {name: %s}
notifydEventStream
Received notifyd notification {name: %s}
_TtC7remindd33RDContactInteractionAlarmProducer
dataSource
delegate
userInteractionSessionManager
shouldNotifyOfInteractionWithPeopleNotifyToken
shouldNotifyOfInteractionWithPeople
Producer did produce alarms {producer: %s, alarms.count: %ld}
shouldNotifyOfInteractionWithPeopleNotifyToken is invalid. Failed to update state {token: %d, value: %{bool}d}
Failed to update or post update to _REMStoreShouldNotifyOfInteractionWithPeopleNotificationName {notifySetStateStatus: %u,  notifyPostStatus: %u, value: %{bool}d}
shouldNotifyOfInteractionWithPeople value changed. Updating state {previousValue: %{bool}d, value: %{bool}d}
Starting people interaction alarm producer {producer: %s}
remindd.RDContactInteractionAlarmProducer
com.apple.remindd.RDContactInteractionAlarmProducer.didReceiveContactEvent
RDContactInteractionAlarmProducer received contact event
os_transaction INIT {name: com.apple.remindd.RDContactInteractionAlarmProducer.didReceiveContactEvent
os_transaction RELEASE {name: com.apple.remindd.RDContactInteractionAlarmProducer.didReceiveContactEvent
com.apple.remindd.RDContactInteractionAlarmProducer.contactStoreQuery
RDContactInteractionAlarmProducer.REMContactsProvider
Resolving contact names for newlySeenContactReps {newlySeenContactReps: %s}
os_transaction INIT {name: com.apple.remindd.RDContactInteractionAlarmProducer.contactStoreQuery}
DataSource returned alarms for contact interaction. {count: %ld}
DataSource returned no alarms for contact interaction. Done {contacts: %s}
All contactReps interacted with are recently-checkedIn already. Not producing anything. {contactRepresentation: %s}
didInteract.contacts is empty. Skipping
os_transaction RELEASE {name: com.apple.remindd.RDContactInteractionAlarmProducer.contactStoreQuery}
Producing alarms for contact interaction {activeCount: %ld, totalCount: %ld}
dataSource returned alarms that don't match any input contactReps {reminderID: %@, newlySeenContactReps: %s}
_TtC7remindd20RDFirstUnlockManager
transactionRegistrar
keyBagStateChangeCancellable
_TtC7remindd51RDTemplateOperationBatchDeleteCachedPublicTemplates
%s: Finished execution {deletionCount: %ld, elapsedSeconds: %f}
%s: Start execution
_TtC7remindd34RDICCloudExtraneousAlarmsCollector
scheduler
syncPerformer
statesStorage
extraneousAlarmsPendingSyncUpDeleteSubscription
debouncerOSTransaction
com.apple.remindd.RDICCloudExtraneousAlarmsCollector.runHandlerOnInit
RDICCloudExtraneousAlarmsCollector: started, subscribed to DidMarkExtraneousAlarmsPendingToSyncUpDelete {debounceInterval(randomized): %s}
os_transaction INIT {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.runHandlerOnInit}
os_transaction RELEASE {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.handleEvent}
com.apple.remindd.RDICCloudExtraneousAlarmsCollector.syncUpExtraneousAlarmDeletions
RDICCloudExtraneousAlarmsCollector: Unexpected nil RDICCloudExtraneousAlarmsSyncPerformer (ICCloudContext), bailing out from syncUp()
com.apple.remindd.RDICCloudExtraneousAlarmsCollector.syncUp
os_transaction INIT {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.syncUp}
os_transaction RELEASE {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.syncUp}
RDICCloudExtraneousAlarmsCollector: failed to fetch or save {error: %s}
RDICCloudExtraneousAlarmsCollector: set `statesStorage.extraneousAlarmsCollectorContainerDeemedClean` = %{bool}d
RDICCloudExtraneousAlarmsCollector: will continue to run because fetched triggers.count=%ld > deleteLimit=%ld
RDICCloudExtraneousAlarmsCollector: applied and saved REMCDObjectDirtyFlagsNeedDelete dirty flags to %ld alarm and triggers.
RDICCloudExtraneousAlarmsCollector: none of the fetched alarm triggers should apply REMCDObjectDirtyFlagsNeedDelete.
RDICCloudExtraneousAlarmsCollector: fetched extraneous alarm triggers {triggers.count: %ld, deleteLimit: %ld}
RDICCloudExtraneousAlarmsCollector: fetched 0 extraneous alarm triggers.
RDICCloudExtraneousAlarmsCollector: fetched an extraneous trigger without an alarm, skipping {triggerID: %s}
RDICCloudExtraneousAlarmsCollector: fetched an extraneous trigger/alarm without identifier, skipping {triggerID: %s, alarmID: %s}
RDICCloudExtraneousAlarmsCollector: Should not be producing DidMarkExtraneousAlarmsPendingToSyncUpDelete notification from transactions of RDICCloudExtraneousAlarmsCollector
com.apple.remindd.RDICCloudExtraneousAlarmsCollector.handleEvent
os_transaction INIT {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.handleEvent}
os_transaction RELEASE {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.runHandlerOnInit}
RDICCloudExtraneousAlarmsCollector: stopped.
cascadeHashtagLabelApproval
{accountIdentifier: %@, activityType: %@, ckIdentifier: %@, sharedEntityName: %@, uuidForChangeTracking: %@
notesMayHaveDirtyHashtag
titleMayHaveDirtyHashtag
Cannot return a -remObjectID because REMCKSharedEntitySyncActivity does not have a UUID for change tracking {%@}
remActivityTypeToREMCKActivityType(_:)
 %s: An unexpected error occurred: unknown activityType: %{public}s
insertNewSyncActivity(using:into:)
 REMCKSharedEntitySyncActivity:%s | Unable to get storeController from RDStoreControllerManagedObjectContext
 REMCKSharedEntitySyncActivity:%s | Unable to get persistentStore for accountIdentifier.
makeActivityObject()
 %s: An unexpected error occurred {description: %{public}s, activityObject: %{public}s}
REMChangeTrackingIdentifiable
@"<REMChangedObjectIdentifying>"16@0:8
_TtC7remindd27RDAlarmNotificationConsumer
beforeFirstUnlockNotificationEngine
com.apple.remindd.RDAlarmNotificationConsumer.updateLastBannerPresentationDate
os_transaction INIT {name: com.apple.remindd.RDAlarmNotificationConsumer.updateLastBannerPresentationDate, producer: %{public}s}
Unable to update lastBannerPresentationDate reminder is Phantom {reminderID: %{public}@}
Updating lastBannerPresentationDate {reminderIDs: %{public}s, lastBannerPresentationDate: %{public}s}
RDAlarmNotificationConsumer skipping retain on alarm because already retained alarm for reminder in this consumeAlarms() run { identifier: %{public}s identifiersPresentedInThisRun:%{public}s }
RDAlarmNotificationConsumer {identifier: %{public}s createSet: %s, count: %{public}ld}
RDAlarmNotificationConsumer {identifier: %{public}s allowedSet: %s, count %{public}ld}
com.apple.remindd.RDAlarmNotificationConsumer.consumeAlarms
os_transaction INIT {name: com.apple.remindd.RDAlarmNotificationConsumer.consumeAlarms, producer: %{public}s}
os_transaction RELEASE {name: com.apple.remindd.RDAlarmNotificationConsumer.consumeAlarms, producer: %{public}s}
os_transaction RELEASE {name: com.apple.remindd.RDAlarmNotificationConsumer.updateLastBannerPresentationDate, producer: %{public}s}
Updated lastBannerPresentationDate {reminderIDs: %{public}s, lastBannerPresentationDate: %{public}s}
Unable to update lastBannerPresentationDate {reminderIDs: %{public}s, error: %s}
RDAlarmNotificationConsumer {identifier: %{public}s removeSet: %s, count: %{public}ld}
RDAlarmNotificationConsumer {identifier: %{public}s currentSet: %s, count: %{public}ld}
notificationCenter.releaseNotification {identifier: %{public}s}
notificationCenter.retainNotification {reminderID: %{public}@, skipBanner: %{public}s, content: %@}
notificationCenter.retainNotification will not be called because lastBannerPresentationDate is too recent {reminderID: %{public}@}
bannerBehavior determined {bannerBehavior: %{public}s, reminderID: %{public}@}
Not presenting reminderAlarm banner for SiriFoundInApps reminders. {reminderID: %@}
Unable to determine fireDate. An alarm without fireDate shouldn't have reached here. {alarm: %@, reminder: %s}
allowBanner? {lastBannerPresentationDate: %{public}s, fireDate: %{public}s, now: %{public}s, showBanner: %{public}s}
peopleInteraction
Failed to compute current hour when posting analytics to event com.apple.reminders.notification with {type: %s}
com.apple.reminders.notification
RDAlarmNotificationConsumer: Posted Alarm notification {reminderID: %{public}@}
RDAlarmNotificationConsumer: Unable to post Alarm notification {error: %s}
B16@0:8
isAbstract
_TtC7remindd30REMNSPersistentHistoryTracking
remindd.REMNSPersistentHistoryTracking
Scheduled by day must use the default displayDate ascending sorting style
Failed to group reminders by due date
Scheduled by day cannot fetch subtasks
Reminder has no oldList, no auxiliary reminder change info is needed {reminder.isInserted: %{bool,public}d, reminder: %{public}s, newList: %{public}s, isDeleted: %{bool,public}d}
Cannot add auxiliary reminder change info because storeControllerManagedObjectContext is nil
Failed to add auxiliary reminder change info due to error: %{public}s, isDeleted: %{bool,public}d
Adding an auxiliary reminder change DELETE info {reminder: %{public}s, oldList: %{public}s, newList: %s, isDeleted: %{bool,public}d}
Adding an auxiliary reminder change MOVE info {reminder: %{public}s, oldList: %{public}s, newList: %{public}s, isDeleted: %{bool,public}d}
_TtC7remindd28REMReminderStorageCDIngestor
REMReminderStorageCDIngestor:establishRelationship(onStorage:into cdReminder:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}
Updating reminder.list {reminder: %{public}s, list: %{public}s}
Undeleting hashtag {hashtagID: %{public}@, reminder: %{public}s}
Updating reminder.account {reminder: %{public}s, account: %{public}s}
Can't merge documents for reminder because remObjectID is nil {reminder.objectID: %@, key: %s}
Failed to merge documents for reminder {reminder.objectID: %@, key: %s}: %s
REMReminderStorageCDIngestor: merge(storage:into cdReminder:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}
Differential privacy common words collection
Title POS data collection
other_token_count
com.apple.reminders.created
Removing alarm from reminder {reminder.objectID: %@, alarm.objectID: %@}
Removing assignment from reminder {reminder.objectID: %@, assignment.objectID: %@}
Can't merge attachment for reminder because cdAttachment.remObjectID is nil {cdReminder.objectID: %@, cdAttachment.objectID: %@}
Removing attachment from reminder {reminder.objectID: %@, attachment.objectID: %@}
Removing hashtag from reminder {reminder.objectID: %@, hashtag.objectID: %@}
structured_tag_count
inline_tag_count
Can't merge recurrence rule for reminder because cdRecurrenceRule.remObjectID is nil {cdReminder.objectID: %@, cdRecurrenceRule.objectID: %@}
Removing recurrenceRule from reminder {reminder.objectID: %@, recurrenceRule.objectID: %@}
REMReminderStorageCDIngestor: cdReminder.account is nil {cdReminder.remObjectID: %@}
Error occured when mapping object from %s to %s {error: %s}
Found a dangling assignment with nullified assignee, we will skip it from the reminder.assignments {objectID: %s, originator: %s, assignee: %s, reminderID: %s}
Tried to insert an auxiliary change info before the related CD object is unlinked from its account. Bailing {author: 
Tried to insert an auxiliary change info before the related CD object is unlinked from its account. Bailing {author: %{public}s, cdType: %s}.
Tried to insert an auxiliary change info but storeController is nil. Bailing {author: 
Tried to insert an auxiliary change info but storeController is nil. Bailing {author: %{public}s, cdType: %s}.
Inserted %s {author: %{public}s}
REMCDReminderSwiftHooks
v32@0:8@"REMCDList"16@"REMCDList"24
_TtC7remindd16RDTimelineEngine
processors
debounceTimeInSeconds
publisher
TimelineEngine started with processors: %{public}s
TimelineEngine could not fetch reminders because %s
TimelineEngine fetched %ld reminders and returning %ld
TimelineEngine could not handle database changes because %s
Unable to create notification content with 0 reminders.
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/SharedListActivityNotificationsEngine/NotificationContentTypes/RDAddedReminderNotificationContent.swift
Unable to get title from reminder
Unable to get name from list
com.apple.remindd.sharedListReminderAddedNotification.multiple
com.apple.remindd.sharedListReminderAddedNotification.single
You must have at least 1 reminder to create notification body {numberOfReminders: 
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/SharedListActivityNotificationsEngine/RDSharedListActivityNotificationsEngine.swift
entry.account.remObjectID
entry.list.remObjectID
first journal entry
_TtC7remindd28RDRelevantShortcutsProcessor
loggingName
processingQueue
processor
%{public}s filtered %ld reminders down to %ld
TB,N,R
separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix
separatorInConcatenatedElementIDsWithLocalElementIDPrefix
Failed to update lastAccessed in REMCDManualSortHint {objectID: %s, error: %s}
Updated lastAccessed in REMCDManualSortHint {objectID: %s}
com.apple.remindd.sharedListReminderCompletedNotification.single
com.apple.remindd.sharedListReminderCompletedNotification.multiple
com.apple.remindd.beforeFirstUnlock
largecircle.fill.circle
com.apple.remindd.reminderAlarm
com.apple.remindd.assignmentNotification.single
Trying to create a shared list update notification without reminderIDs. Returning empty content. {reminderIDs: %s}
Trying to create a shared list update notification with inconsistent reminderIDs in parameters. Returning empty content. {reminderIDs: %s}
Trying to create a shared list update notification content without a list. Returning empty content. {reminderIDs: %s}
Trying to create a shared list update notification with 0 reminderIDs. Returning empty content. {reminderIDs: %s}
Trying to create an assignment notification content without reminderIDs. Returning empty content. {reminderIDs: %s}
Trying to create an assignment notification content with inconsistent reminderIDs in parameters. Returning empty content. {reminderIDs: %s}
Trying to create an assignment notification content without a list. Returning empty content. {reminderIDs: %s}
com.apple.remindd.assignmentNotification.multiple
Trying to create an assignment notification content with 0 reminderIDs. Returning empty content. {reminderIDs: %s}
(caldavSharedList) Trying to create a notificationContent with a list whose objectID doesn't match with the listID in the enum. Returning empty content. {list.objectID: %s, enum.listID: %@}
com.apple.remindd.dataaccess.caldav.sharedList
com.apple.remindd.todayNotificationBadge
com.apple.remindd.todayNotification
Trying to create a notificationContent without a reminder. Returning empty content. {notificationIdentifier: %s}
Setting BLTBulletinContextKeyWatchLegacyMapKey to %s
Error creating UNNotificationAttachment from UIImage {error: %s}
fetching reminders for training batch by batch {batchsize: %ld}
failed saving embedding config file to %s
embedding config file saved to %s
Training REMFilteredTitleEmbedding with %s
Done with fetching reminders for training. %ld distinct reminders fetched
com.apple.remindd.training
due_weekday_accuracy
location_accuracy
corebehavior
CoreBehavior terminated early. Retrying with support = %lu
Failed to save kNN model
kNN model training time: %{public}f
best k for kNN model is %{public}ld
trainEvaluatekNN started at %{public}s
REMSuggestedAttributesTrainer: failed to save anchoredBubbleModel to %s
REMSuggestedAttributesTrainer: anchoredBubbleModel saved to %s
REMSuggestedAttributesTrainer: tuning anchoredBubbleModel
REMSuggestedAttributesTrainer: anchoredBubbleModel using .defaultWordDistanceScale
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/SuggestedAttributes/REMSuggestedAttributesTrainer+RDInvocable.swift
_TtC7remindd27REMAccountStorageCDIngestor
REMAccountStorageCDIngestor: merge(storage:into cdAccount:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}
Actually really doing nothing for a merge on .listsDADisplayOrderChanged
NSManagedObjectContext missing author when updating account.type {storage: %@}
Creating Extraneous Local Account {author: %s}
Can't merge list ordering for account because remObjectID is nil {account.objectID: %@, key: %s}
Failed to merge ordered set for {objectID: %@, key: %s, error: %s}
serializedListIDsMergeableOrdering must be called only if hasDeserializedListIDsMergeableOrdering
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/PropertiesCoreDataConversion/CDIngestable/REMAccountStorage+CDIngestor.swift
Serialized to data from REMListStorage.listIDsMergeableOrdering during ingesting. {objectID: %{public}@}
failed to ingest manual ordering of pinned lists because feature flag for pinned lists is not enabled.
storage.pinnedListsManualOrdering should not be nil when calling `mergePinnedListsManualOrdering(storage:coordinator:)` {account: %{public}@}
ingesting manual ordering of pinned lists {account: %{public}@, top-level elements count: %ld}
storage.templatesManualOrdering should not be nil when calling `mergeTemplatesManualOrdering(storage:coordinator:)` {account: %{public}@}
ingesting manual ordering of templates {account: %{public}@, top-level elements count: %ld}
REMCDAccountStorage+CDIngestor: Could not post RDStoreControllerREMAccountPropertiesDidUpdate due to unexpected values {remObjectID: %s, changedKey: %s, changedValue: %s}
REMAccountStorageCDIngestor: mutateOrdering(...) cannot proceed because storage.listIDsMergeableOrdering is nil {objectID: %{public}@, key: %{public}s}
v32@?0@"NSString"8Q16^B24
REMAccountStorage+CDIngestor.mutateOrdering(): Could not proceed to upsertOrderedIdentifiersForAccountListView() because there is problem finding the persistent store for the account {account: %{public}s}
REMAccountStorage+CDIngestor.mutateOrdering(): Sorted intermixed ordered IDs for CSLs and Lists in REMCDAccountListData {account: %{public}s, #csls: %ld, #lists: %ld}
REMAccountStorage+CDIngestor.mutateOrdering(): Sorted account.smartLists {account: %{public}s, #smartLists: %ld}
sorting ordered set account.lists - after - {account: %@, lists: %s}
sorting ordered set account.lists - before - {account: %@, lists: %s}
REMAccountStorageCDIngestor: mutateOrdering() cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}
Cannot get any REMCDAccount from the ordered set of lists in the account.
Some lists have changes in .daDisplayOrder so DA display orders is taking precedence as the true sort hint - {account: %@}
v32@?0@"REMObjectID"8Q16^B24
Back propagated ordering changes to CD lists - {changes: %s}
Going to back propagate ordering changes to CD lists {listsCount: %ld}
REMAccountStorageCDIngestor: cdAccount.listIDsMergeableOrdering is nil, replacing with empty `Data()` {cdAccount.remObjectID: %{public}@}
Unexpected nil mergeable ordering data {objectID: %@, key: %s}
Failed to deserialize CR ordered set {objectID: %@, key: %s}: %s
_TtC7remindd37RDBeforeFirstUnlockNotificationEngine
Completing action handler by calling completionHandler now.
RDBeforeFirstUnlockNotificationEngine didn't expect to receive actions of this type. {type: %s, response: %@}
Handled dismissal of before first unlock notification successfully.
Unexpected action for notification type .beforeFirstUnlock {action: %s}
Processing notification response {actionIdentifier: %s, action: %s}
RDBeforeFirstUnlockNotificationEngine: Updating nextScheduledAlarmDate as we got a new future alarm date.
Posted Before First Unlock Notification
RDBeforeFirstUnlockNotificationEngine: Posted Before First Unlock notification
RDBeforeFirstUnlockNotificationEngine: Unable to post Before First Unlock notification {error: %s}
RDBeforeFirstUnlockNotificationEngine: Not going to presenting before first unlock notification as we don't have a due date.
RDBeforeFirstUnlockNotificationEngine: Scheduling to present before first unlock notification at a future time.
RDBeforeFirstUnlockNotificationEngine: Presenting before first unlock notification now because we have already passed the due date.
RDBeforeFirstUnlockNotificationEngine: Presenting before first unlock notification as we're now due.
RDBeforeFirstUnlockNotificationEngine: Going to update lastPresentAlarmDate based on delivered notifications.
RDBeforeFirstUnlockNotificationEngine: Found %ld delivered notifications, %ld considered for lastPresentAlarmDate.
Prefer using the store controller invoke() instead of this MoC invoke() for REMAccountsDataViewInvocation_fetchByExternalIdentifier
Couldn't fetch all requested accounts {extIds: %s, name: %s}
Putting account storages fetched from DB to cache {extIds: %s, name: %s}
None of the requested accounts could be fetched {extIds: %s, name: %s}
Fetching account storage by ExtID {input#: %ld, hit#: %ld, miss#: %ld, name: %s}
Couldn't fetch all requested accounts {objIDs: %s, name: %s}
Putting account storages fetched from DB to cache {objIDs: %s, name: %s}
None of the requested accounts could be fetched {objIDs: %s, name: %s}
Fetching account storage by ObjectID {input#: %ld, hit#: %ld, miss#: %ld, name: %s}
Unknown fetch type for REMAccountsDataViewInvocation_fetchActiveCloudKitAccountObjectIDs.invoke()
REMAccountsDataViewInvocation_fetchActiveCloudKitAccountObjectIDs: Unknown REMActiveCloudKitAccountFetchOption %{public}ld
Should not be calling REMAccountsDataViewInvocation_fetchPrimaryActiveCloudKitAccount.invoke(in managedObjectContext:)
Unexpectedly calling the invoke() with the MoC instead of with the storeController for REMAccountsDataViewInvocation_fetchPrimaryActiveCloudKitAccount
No need to fetching account storage because no active primary CK account is enabled {name: %s}
Unexpectedly fetched more than 1 account storage with inMemoryPrimaryActiveCKAccountREMObjectID()
Putting account storage fetched from primaryActiveCloudKitAccountOptimized() to storage cache {accountID: %@, name: %s}
Fetching account storage by ObjectID {input: %@, hit?: %ld, name: %s}
Unexpected nil primary active cloudkit account while inMemoryPrimaryActiveCKAccountREMObjectID() is non-nil
unknown purpose
Putting all generic account storages fetched from DB to cache {fetched#: %ld, name: %s}
Couldn't fetch all generic account storages from database {name: %s}
Fetching all generic account storages {cached#: %ld, name: %s}
account.storeControllerManagedObjectContext is nil
Unable to fetch manual ordering ID for tagged smart list without hash key provider
Creating tagged smart list with empty storage because tagged smart list not found due to error {error: %s}
_TtC7remindd23REMAssignmentCDIngestor
REMAssignmentCDIngestor: cdAssignment.reminder is nil {cdAssignment.remObjectID: %@}
REMAssignmentCDIngestor: cdAssignment.owningReminderIdentifier of this markedForDeletion assignment is nil {cdAssignment.remObjectID: %@}
REMAssignmentCDIngestor: cdAssignment.account is nil {cdAssignment.remObjectID: %@}
REMAssignmentCDIngestor: nullifiedRelationship assignee {assignmentID: %{public}@, reminderID: %{public}@}
REMAssignmentCDIngestor: assignee status is disallowed {assignmentID: %{public}@, reminderID: %{public}@}, assignee.status: %hd
REMAssignmentCDIngestor: assignee not belongs to the same list to the reminder's {assignmentID: %{public}@, candidateAssignee.list: %{public}s, assignment.reminder.list: %{public}s}
storage(from cdAssignment:): originator of this assignment was nullified {objectID: %{public}@, reminderID: %{public}@}
REMAssignmentCDIngestor: originator not belongs to the same list to the reminder's {cdAssignment.remObjectID: %{public}@, candidateOriginator.list: %s, assignment.reminder.list: %s}
REMAssignmentCDIngestor: originator status is disallowed {assignmentID: %{public}@, reminderID: %{public}@, originator.status: %hd}
REMAssignmentCDIngestor: cdAssignment.ckAssigneeIdentifier is nil {cdAssignment.remObjectID: %@}
REMAssignmentCDIngestor: Can't create UUID from ckAssigneeIdentifier {cdAssignment.remObjectID: %@}
Cannot get managedObjectContext from the given REMCDAssignment
FETCH COREDATA originatorIDFromCKOriginatorIdentifier() fetched sharee {uuid: %{public}s, result: %@, assignment: %s}
FETCH COREDATA originatorIDFromCKOriginatorIdentifier() sharee not found {uuid: %{public}s, assignment: %s}
FETCH COREDATA assigneeIDFromCKAssigneeIdentifier() fetched sharee {uuid: %{public}s, result: %@, assignment: %s}
FETCH COREDATA assigneeIDFromCKAssigneeIdentifier() sharee not found {uuid: %{public}s, assignment: %s}
_TtC7remindd17RDMigrationClient
v24@0:8@16
completionHandlers
migrationResult
invocationCount
failureCount
stateRestored
dismissed
waitingForReachability
wasUserInitiated
Creating new migration client {accountID: %{public}@}
Migration: account ID not found in the ACAccount store, will try to migrate anyway but expect failure {accountID: %{public}@}
com.apple.remindd.migration-fetchState
Internet is not available. Will resume migration when we have reachability {accountID: %{public}s}
migration-resume
No CloudKit account with Reminders enabled for the given account ID that matches this migration client {accountID: 
, cloudKitAccountObjectIDs: 
^https?://p([0-9]+)
Failed to determine user CalDAV partition
Making request to inverness for migration {accountID: %{public}s}
Migration call will use {partition: %u, serviceURLPrefix: %{public}s, accountID: %{public}s}
Setting up migration service call {accountID: %{public}s}
Invalid response from migrate request {accountID: %{public}s}
Migration server error {error: %{public}s, accountID: %{public}s}
We are an observer and will poll again in a %{public}f seconds {accountID: %{public}s}
Migration service response received {json: %{public}s, accountID: %{public}s}
Migrate request failed {error: %{public}@, accountID: %{public}s}
Migration client is told to dismiss. Ignore server response. {accountID: %{public}s}
com.apple.remindd.cloudKitMigration.finished
remindersMigrated
Client will retry migration {delay: %{public}f, invocationCount: %{public}ld, failureCount: %{public}ld, accountID: %{public}s}
Client terminated migration after 
 invocations and 
 failures. Migration terminated for 
Client terminated migration after too many retries {invocationCount: %{public}ld, failureCount: %{public}ld, accountID: %{public}s}
No next-step info from Server. Client will fallback to handle retry by itself {accountID: %{public}s}
Server instructed to retry migration {delay: %{public}d, invocationCount: %{public}d, failureCount: %{public}d, accountID: %{public}s}
Server terminated migration after 
Server terminated migration after too many retries {accountID: %{public}s, invocationCount: %{public}d, failureCount: %{public}d}
re-enable CloudKit account object and delete CalDAV account
No RDAccountUtils is found. Unable to %{public}s
RDAccountUtils will %{public}s {accountID: %{public}s}
re-create CalDAV account object and hide CloudKit account
com.apple.remindd.cloudKitMigration.revertToCalDAV
Reloaded accounts succesfully {accountID: %{public}s}
Failed to %{public}s {error: %{public}s, accountID: %{public}s}
Retry migration after delay {delay: %{public}f, accountID: %{public}s}
Cancel delayed retry becaue migration client was dismissed {accountID: %{public}s}
Failed saving migration state {error: %{public}s}
Can't find CoreData store for saving CloudKit account migration state {accountID: %{public}s}
reminders-migration
Creating Inverness client {accountID: %{public}s}
Completed Inverness request {requestUUID: %{public}s, accountID: %{public}@}
Completing migration {accountID: %{public}s, error: %{public}s}
Completing migration {accountID: %{public}s, result: %{public}@}
Migration failed
Making request to inverness for unmigration {accountID: %{public}s}
Setting up unmigration service call {accountID: %{public}s}
No response from unmigration service
Invalid unmigration response
Unmigration service returned error: 
com.apple.remindd.migration-purge
Purge all migration clients' states
Failed to delete migration state entities from the database {error: %{public}s}
Notify all migration clients to dismiss
com.apple.remindd.migration-client
com.apple.remindd.migration-resume-all
Resume all uncompleted migration processes
Failed to fetch migration states. Assume no active migration sessions
Wake up migration client {accountID: %{public}s}
_TtC7remindd39RDSharedListActivityNotificationsEngine
__debug_fetchedJournalEntries
__debug_processedJournalEntries
__debug_staleObjectIDs
appliedEngineConfiguration
_started
journalUpdatesSubscriptionTransactionRegistrar
accountSignInOrOutSubscriptionTransactionRegistrar
 RDSyncActivityEngine: Unexpected notification type {type: %s, response: %@}
 RDSyncActivityEngine: Unexpected action %s for notification type .sharedListAddedReminderNotification
 RDSyncActivityEngine: Processing shared list update notification {actionIdentifier:%s, reminderIDs: %s
consumeOnStart: 
, delayConsumeOnStart: 
, consumeFromStoreChanges: 
, storeChangesCoalescingPeriod: 
authorCKIdentifier
 RDSyncActivityEngine is already started! Multiple calls to `start()` were made.
 RDSyncActivityEngine is in manual testing mode. All subscribed hooks are disabled.
 RDSyncActivityEngine Started
 RDSyncActivityEngine: Startup Parameter Summary: {%s}
 RDSyncActivityEngine Starting...
 RDSyncActivityEngine - Unable to consume journal updates {error: %{public}s}
 RDSyncActivityEngine - Finished journal consumption
 RDSyncActivityEngine - Starting journal consumption
 RDSyncActivityEngine: Notification processing blocked by feature flag. Enable the `sharedListNotifications` flag to post user notifications.
 RDSyncActivityEngine: Skipping journal entry processing, no changes to process
com.apple.remindd.sharedListActivityNotification.
v16@?0@"UNNotificationSettings"8
Posted Shared List Activity Notification
 RDSyncActivityEngine: Posted Shared List Activity notification {identifier: %{public}s, body: %{public}s}
 RDSyncActivityEngine: Unable to post Shared List Activity notification {error: %s, identifier: %{public}s, body: %{public}s}
 RDSyncActivityEngine: Notifications posted successfully
 RDSyncActivityEngine: Processing entries - %ld
 RDSyncActivityEngine: Entry is not eligible for notifications {%{public}s}
 RDSyncActivityEngine: Received a journal entry with an unknown activity type {type: %{public}s}
 RDSyncActivityEngine: Received a journal entry with an unsupported activity type {type: %{public}s}
list.remObjectID
 RDSyncActivityEngine: Unsupported notification type: %{public}ld
 RDSyncActivityEngine: Deleted journal entries: %ld
 RDSyncActivityEngine: Up-to-date! No journal entries to delete
 RDSyncActivityEngine: Deleting journal entries
 RDSyncActivityEngine: Fetch Success - Consumed entries: %{public}ld
 RDSyncActivityEngine: Starting Fetch
 RDSyncActivityEngine: Unable to get ckIdentifier for reminder {identifier: %{public}s}
 RDSyncActivityEngine: Unable to make activity object for journal entry {identifier: %{public}s}
com.apple.remindd.RDSharedListActivityNotificationsEngine.journalEntryChangesEventScheduler
 RDSyncActivityEngine: received request to consume from storeDidChange
 RDSyncActivityEngine: Received request consume from engine start
 RDSyncActivityEngine: Account Signed Out {identifier: %{public}@, time: %{public}s}
 RDSyncActivityEngine - logged sign out event for {accountID: %{public}@}
 RDSyncActivityEngine - Error trying to clean up stale accoutns last enabled dates from user default upon `%{public}s` {error: %{public}s}
 RDSyncActivityEngine - Cleaned up stale accounts last enabled dates from user default upon `%{public}s` {accountIDs: %{public}s}
 RDSyncActivityEngine: Account Signed In {identifier: %{public}@, time: %{public}s}
 RDSyncActivityEngine - logged sign in event for {accountID: %{public}@}
_TtC7remindd29RDDifferentialPrivacyRecorder
$__lazy_storage_$_wordTokenizer
_TtC7remindd28RDKeybagStateProviderFactory
_TtC7reminddP33_99AA7822DE37A602875DE59F14E9E1BD25_FixedKeybagStateProvider
lockStatePublisher
lockState
hasUnlockedSinceBootPublisher
hasUnlockedSinceBoot
lockStateSubject
hasUnlockedSinceBootSubject
unlockInProgress
_TtC7remindd48RDStoreControllerCloudKitNetworkActivityObserver
isObsolete
remindd.RDStoreControllerCloudKitNetworkActivityObserver
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/SharedListActivityNotificationsEngine/NotificationContentTypes/RDCompletedReminderNotificationContent.swift
Found multiple instances of REMCDTemplate with identical objectID {objectID: %@, matches: %ld}
_TtC7remindd53RDTemplateOperationCopyRemindersFromREMListToTemplate
_TtC7remindd42RDDataStoreApplicationShortcutListProvider
applicationShortcutLists
preferredDefaultListIDObservationToken
isStarted
Removing RDDataStoreApplicationShortcutListProvider observer on store controller
v16@?0@"REMObjectID"8
RDDataStoreApplicationShortcutListProvider must be started at most once
Unable to fetch lists to use as application shortcuts {error: %s}
Received preferred default list ID changed after RDDataStoreApplicationShortcutListProvider was deallocated
Received store controller change notification after RDDataStoreApplicationShortcutListProvider was deallocated
(store.url = %@, store.identifier = %@)
remindd/REMCDList+CloudKit.swift
Can not instantiate REMCDList, should never happen
LastUserAccessDate
ReminderIDsMergeableOrdering
ReminderIDsMergeableOrderingAsset
ReminderIDsAsset
com.apple.reminders.list
Failed to update REMCDList with CKShare: managed object context is nil {list: %@, CKShare: %s}
Removing sharees {count: %ld}
Share stopped, clear sharing information and sharees
unknown permission
unknown acceptanceStatus
REMCDList.update(with share: CKShare?) will insert pending post-save action '.notify_SharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserDidBecomeStale' {ckIdentifier: %{public}s}
REMCDList.update(with share: CKShare?) will insert pending post-save action '.notify_SharedToMeListPinnedStateDidBecomeStale' {ckIdentifier: %{public}s}
Update list's sharing information and sharees with new CKShare {list: %@, share: %s}
(ckCloudState.inCloud == NULL OR ckCloudState.inCloud == 0)
MERGE.LOCAL: ...REMCDList.existingLocalObjectToMerge found a matching local REMCDList! {self: %{public}s, matched: %{public}s}
MERGE.LOCAL: ...Should not attempt to find existing local object for this concealed list, race condition? {self: %{public}s %{public}s}
A local reminder should not have non-nil ckZoneOwnerName
MERGE.LOCAL: ...done merging local list to the cloud list, now delete the local object {local.list: %{public}s, cloud.list: %{public}s}
MERGE.LOCAL: Error decoding reminder IDs ordered set and thus not able to add local reminders and sort child reminders {error : %s}
MERGE.LOCAL: ...updating reminderIDs ordering and re-sorting with added reminders {list: %{public}s}
MERGE.LOCAL: ...this local reminder is not matched/merged so we're adding it to the list {local.reminder: %{public}s, local.list: %{public}s, cloud.list: %{public}s}
MERGE.LOCAL: ...deleting isConcealed local reminder permanently {reminder: %{public}s %{public}s}
MERGE.LOCAL: The target CK list we are merging local reminders to is unexpectedly having non-nil ckZoneOwnerName. We are supposed to disallow merging into shared list {
A local reminder should not merge into a shared list
MERGE.LOCAL: ...childReminders is unexpectedly nil {self: %{public}s}
MERGE.LOCAL: ...this REMCDList should not try to merge with itself! {self: %{public}s, local: %{public}s}
MERGE.LOCAL: ...Should not attempt to merge with a concealed local list, race condition or corrupted database? {self: %{public}s, local: %{public}s %{public}s}
Down-casted Array element failed to match the target type
Expected 
NSArray element failed to match the Swift Array Element type
Expected 
REMObjectID_Codable
%K == NO AND %K <= %@
markedForDeletion
%K == YES OR %K > %@
ReferenceWritableKeyPath<REMCDSavedReminder, Optional<Data>>
PartialKeyPath<REMCDSavedReminder>
PartialKeyPath<REMCDTemplate>
(PreprocessedAttachment in _1753FA1DE56C6C0B2640C37797813109)
REMCDAccountListData
PartialKeyPath<REMCDAccountListData>
(REMCDReminderInZREMCDREMINDER in _D34138B4849670DACE6F1B1A25800AC4)
(REMCDListInModelVersionV5 in _D34138B4849670DACE6F1B1A25800AC4)
REMCKSharedEntitySyncActivity
REMSmartList_Codable
(PolymorphicListItem in _F1336D37D702B2C1BEEF72784365A110)
REMAccount_Codable
(PolymorphicListItem in _5EA99FF5FE7301BEB158BAF5BFFE0E33)
REMReminder_Codable
Not sorting child reminders becuase REMCDList.mutableOrderedSetValue(forKey: reminders) is nil
Sorting child reminders deferred {listRecordID: %{public}@}
MERGE.LOCAL: ...no matching local reminder found for cloud reminder {reminder: %{public}s, list: %{public}s}
MERGE.LOCAL: ...AFTER merging local reminder to cloud reminder (success: %{public}s, cloud: %{public}s, local: %{public}s, list: %{public}s}
MERGE.LOCAL: ...BEFORE merging local reminder to cloud reminder {cloud: %{public}s, local: %{public}s, list: %{public}s}
Tried to update listIDsMergableOrdering after fetching share / undeleting list but list has no parent account {listID: %{public}s}
REMCDList.mergeData(from record:accountID:) Unhandled sharingStatus {ckIdentifier: %{public}s, sharingStatus.rawValue: %{public}ld}
REMCDList.mergeData(from record:accountID:) will insert pending post-save action '.notify_SharedToMeListPinnedStateDidBecomeStale' {ckIdentifier: %{public}s}
Failed to create replicaIDSource when decoding mergeable ordered set for reminder IDS {cdList: %@}
Failed to decode mergeable ordered set for reminder IDS {error: %s, cdList: %@}
REMCDList.mergeData(from record:accountID:) will insert pending post-save action '.notify_SharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserDidBecomeStale' {ckIdentifier: %{public}s}
Failed to parse UUID strings JSON data {error: %s}
Deserializing reminderIDsMergeableOrdering from readMaybeBigStringOrderedSet() {recordID: %s}
Error decoding reminder IDs ordered set and thus not able to sort child reminders {error : %s}
REMCDList+CloudKit.sortChildReminders(): deserialized reminderIDsMergeableOrdering from data {remObjID: %s}
(DueDateVerifiableAlarm in _21DE925B29389F3F365F2E7E031C4B64)
(DueDateNonVerifiableAlarm in _21DE925B29389F3F365F2E7E031C4B64)
TitleDocumentAsset
RecurrenceRuleIDs
NotesDocumentAsset
Create Reminder CK record {self: %{public}s %{public}s} has %ld alarms exceeding limit %ld
MERGE.LOCAL: ......REMCDReminder.existingLocalObjectToMerge found a matching local REMCDReminder! {self: %{public}s, matched: %{public}s}
MERGE.LOCAL: ...Should not attempt to find existing local object for this concealed reminder, race condition? {self: %{public}s %{public}s}
MERGE.LOCAL: ...done merging local reminder to the cloud reminder, now delete the local object {local.reminder: %{public}s, cloud.reminder: %{public}s}
MERGE.LOCAL: ......adding local recurrence rules to the cloud reminder {local.rrules.count: %ld}.
merge(withLocalObject): We do actually expect recurrence-rules to support markForDeletion.
MERGE.LOCAL: ......removing original recurrence rules of the cloud reminder {cloud.rrules.count: %ld}.
MERGE.LOCAL: ......adding local alarms to the cloud reminder {local.alarms.count: %ld}.
MERGE.LOCAL: ......merge(withLocalObject): We expect alarms to support markForDeletion.
MERGE.LOCAL: ......removing original alarms of the cloud reminder {cloud.alarms.count: %ld}.
MERGE.LOCAL: ......server copy is newer, keep server data and delete local. {cloud: %{public}s, local: %{public}s, cloud.lastmod: %{public}s, local.lastmod: %{public}s}
MERGE.LOCAL: ......should not try to merge with itself! {self: %{public}s, local: %{public}s}
MERGE.LOCAL: ...Should not attempt to merge with a concealed local reminder, race condition or corrupted database? {self: %{public}s, local: %{public}s %{public}s}
Parent reminder is marked for deletion but this reminer is not {reminderID: %{public}s, parentReminder: %{public}s}
List is marked for deletion but this reminer is not {reminderIwD: %{public}s, list: %{public}s}
Fixing broken references for reminder {reminderID: %s, list: %{public}s, parentReminder: %{public}s}
remindd3
remindd4
@24@0:8@16
T@"CKRecord",N,&
Unable to deserialize CR property from CKRecord because replicaIDSource isn't available {key: %{public}s, cdObject: %@}
Failed to deserialize CRDT property {objectID: %{public}s, key: %{public}s}
validateAndFixupReminderTree: Reminder is detached from lists. Nothing needs to be done.
validateAndFixupReminderTree: Can't resolve the root of the reminder tree. {ckIdentifier: %{public}s}
validateAndFixupReminderTree: Going to update mismatched lists of remaining children attached to root.
validateAndFixupReminderTree: Going to update old children.
validateAndFixupReminderTree: Going to update newly computed children.
validateAndFixupReminderTree: Different in resolvedRoot.[
RootPlaceHolder mismatches ckZoneOwnerName
validateAndFixupReminderTree: ...Updated {root.list: %s}
validateAndFixupReminderTree: ...Updated {root.parent: nil}
validateAndFixupReminderTree: Going to update root. {objectID: %s}
validateAndFixupReminderTree {resolvedRoot: %s, childReminders: %{public}s}
validateAndFixupReminderTree: Detected a loop in reminder tree in CK server data. Selecting a stable root.
validateAndFixupReminderTree: {allConnectedReminders: %{public}s}
validateAndFixupReminderTree {rootMap: %{public}s}
validateAndFixupReminderTree {potentiallyConnectedReminders: %{public}s}
validateAndFixupReminderTree: Reminder has new root.
validateAndFixupReminderTree: Reminder has old root.
validateAndFixupReminderTree: There seems to be a multi-layer subtask tree in the database because the current reminder had both parent and children. Totally unexpected because the save request should have been rejected. {objectID: %s}
validateAndFixupReminderTree: There seems to be a multi-layer subtask tree in the database because the new root had both parent and children. Totally unexpected because the save request should have been rejected. {rootID: %s}
validateAndFixupReminderTree: Detected a loop in the new reminder tree. Multiple client may have raced. Going to fix the tree locally.
validateAndFixupReminderTree: Current reminder tree looks good. Skipping the fixup.
validateAndFixupReminderTree: Neither parent nor list is changed. Nothing needs to be done.
validateAndFixupReminderTree: Reminder has parent but no list. Assuming self.list = parent.list.
validateAndFixupReminderTree BEGIN {objectID: %s, parentID: %s, listID: %s}
validateAndFixupReminderTree: Different in child[
UpdateChildren mismatches ckZoneOwnerName
validateAndFixupReminderTree: ......Updated {child.list: %s}
validateAndFixupReminderTree: ......Updated {child.parent: %s}
validateAndFixupReminderTree: ...Going to update child. {objectID: %s}
findReminderRoot: This reminder has no parent. The root is self. {%{public}s => %{public}s}
findReminderRoot: Recursively found the root. {%{public}s => %{public}s}
findReminderRoot: Already visited this reminder. There is a loop. Assuming root is self. {%{public}s => %{public}s}
findReminderRoot: Root already computed. {%{public}s => %{public}s}
findReminderRoot BEGIN {id: %{public}s}
findReminderRoot END {id: %{public}s}
addSubtree: ckIdentifier is nil {objectID: %s}
canSkipFixupReminderTree: Moving across parent. We can't skip the validation because self's children may have been flattened to siblings in previous saves.
canSkipFixupReminderTree: Child list mismatch. Need to fixup.
canSkipFixupReminderTree: List changed and has children. Need to validate children.
canSkipFixupReminderTree: Multiple layers of subtasks. Need to flatten.
canSkipFixupReminderTree: Sibling list mismatch. Need to fixup.
canSkipFixupReminderTree: Parent changed list. Need to validate siblings.
validateAndFixupReminderTree END {objectID: %s, parentID: %s, listID: %s}
Trying to create REMCDSharedToMeReminderPlaceholder to a reminder object without MOC
REMCDReminder+CloudKit: Could not create REMCDSharedToMeReminderPlaceholder because storeController isn't available {reminder: %{public}s}
REMCDReminder+CloudKit: Could not create REMCDSharedToMeReminderPlaceholder because accountIdentifier is nil where account %{public}s nil and account.identifier %{public}s nil, {reminder: %{public}s}
REMCDReminder+CloudKit: Could not create REMCDSharedToMeReminderPlaceholder because there is problem finding the persistent store for the accountIdentifier %{public}s and the reminder {reminder: %{public}s}
Creating REMCDSharedToMeReminderPlaceholder for CloudKit: %{public}s
primaryActiveCloudKitAccountOptimized: Unexpectedly the primaryActiveCloudKitAccount.objectID() isTemporary, current design is to defer setting the account NSManagedObjectID cache until after saved {remObjectID: %{public}@}
updatePrimaryActiveCloudKitAccount: ATTENTION Someone is trying to inactivate an existing CK account {remObjectID: %{public}s}
updatePrimaryActiveCloudKitAccount: Writing RDPrimaryActiveCloudKitAccountManagedObjectIDCache with updated CD account {remObjectID: %{public}@, mid: %{public}@}
updatePrimaryActiveCloudKitAccount: Clearing RDPredefinedSmartListAndManualOrderingManagedObjectIDCache with nil input account
updatePrimaryActiveCloudKitAccount: Clearing RDPrimaryActiveCloudKitAccountManagedObjectIDCache with nil input account
primaryActiveCloudKitAccountREMObjectID: Cannot get the RDStoreController from RDStoreControllerManagedObjectContext. Fallback to call REMCDAccount._groundTruth_primaryActiveCloudKitAccountInContext(in:).
primaryActiveCloudKitAccountREMObjectID: {elapsed: %f}
primaryCloudKitAccountDidEnable: Passed in an account storage that is not .primaryCloudKit {remObjectID: %{public}@, type: %ld}
primaryCloudKitAccountDidEnable: Primary CloudKit account added or activated, setting inMemoryPrimaryActiveCKAccountREMObjectID {newAccountID: %{public}@}
primaryCloudKitAccountDidEnable: A primary active CloudKit account already exists (inMemoryPrimaryActiveCKAccountREMObjectID != nil) when we are adding or activating another different CloudKit account, we will still update the in-memory value {currentAccountID: %{public}s, newAccountID: %{public}@}
primaryCloudKitAccountDidEnable: Passed in an account storage that is markedForRemoval or inactive {remObjectID: %{public}@}
Released all cached CloudKit REMCD accounts
cloudKitAccountsDidChange(cloudKitAccountsChange: %{public}s)
__unitTest_RDStoreControllerPrimaryCloudKitAccountDidEnableOrDisableNotification
primaryCloudKitAccountDidDisable: Passed in an account storage that is not .primaryCloudKit {remObjectID: %{public}@, type: %ld}
primaryCloudKitAccountDidDisable: Passed in an account storage that is neither markedForRemoval nor inactive {remObjectID: %{public}@}
primaryCloudKitAccountDidDisable: A different primary active CloudKit account already exists (inMemoryPrimaryActiveCKAccountREMObjectID != nil) when we are removing or deactivating another different CloudKit account, not updating the in-memory value in this case {currentAccountID: %{public}s, removedAccountID: %{public}@}
primaryCloudKitAccountDidDisable: Primary CloudKit account removed or deactivated, unsetting both inMemoryPrimaryActiveCKAccountREMObjectID and clear its NSManagedObjectID cache {removing: %{public}@}
primaryActiveCloudKitAccountOptimized: Cannot get the RDStoreController from RDStoreControllerManagedObjectContext. Fallback to call REMCDAccount._groundTruth_primaryActiveCloudKitAccountInContext(in:).
primaryActiveCloudKitAccountOptimized: Returning nil because inMemoryPrimaryActiveCKAccountREMObjectID is nil {elapsed: %f}
primaryActiveCloudKitAccountOptimized: Unexpectedly fetched no active CK account from persistence. Should have returned early for nil inMemoryPrimaryActiveCKAccountREMObjectID if no active CK account is signed in. Indicates there is a bug.
primaryActiveCloudKitAccountOptimized: RDPrimaryActiveCloudKitAccountManagedObjectIDCache miss + write (after cache-write) {elapsed: %f (from start)}
primaryActiveCloudKitAccountOptimized: Unexpectedly primary CK REMCDAccount's objectID() isTemporary, should have saved the CD account before trying to access it via this API {remObjectID: %{public}@}
primaryActiveCloudKitAccountOptimized: Mismatching cdAccount.remObjectID with inMemoryPrimaryActiveCKAccountREMObjectID {cdAccount.remObjectID: %{public}s, in-memory: %{public}@}
primaryActiveCloudKitAccountOptimized: RDPrimaryActiveCloudKitAccountManagedObjectIDCache miss (before cache-write) {elapsed: %f}
primaryActiveCloudKitAccountOptimized: RDPrimaryActiveCloudKitAccountManagedObjectIDCache hit {elapsed: %f, mid: %@}
_TtC7remindd20REMHashtagCDIngestor
REMHashtagCDIngestor: cdHashtag.reminder is nil when nil reminder reference is not legit {cdHashtag.remObjectID: %@}
reminderIdentifier
REMHashtagCDIngestor: cdHashtag.reminderIdentifier is nil {cdHashtag.remObjectID: %{public}@, markedForDeletion: %{public}s, cdHashtag.sharedToMeReminderCKIdentifier: %{public}s}
REMHashtagCDIngestor: cdHashtag.account is nil {cdHashtag.remObjectID: %{public}@}
_TtC7remindd27RDSynchronizedKeyValueStore
keyValueStore
NSUbiquitousKeyValueStoreChangeReasonKey from notification.userInfo
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/RDSynchronizedKeyValueStore/RDSynchronizedKeyValueStore.swift
RDSynchronizedKeyValueStore.storeDidChangeExternally: Error decoding notification content: %s
Decode ChangeEvent.Reason from UBKVS changeReason: 
NSUbiquitousKeyValueStoreChangedKeysKey from notification.userInfo
RDSynchronizedKeyValueStore.storeDidChangeExternally[%{public}s]: Received notification {reason: %{public}s}
REMCDSavedReminder will not be used to represent a reminder in a public template, which is fetched from a template's public link, and is not expected to be shared. It shouldn't be uploaded for non-owner (savedReminderID: %{public}s)
REMCDSavedReminder+CloudKit: Unexpectedly got cdSavedReminder.template == nil in newlyCreatedRecord() (key=.template) {savedReminder: %{public}s}
REMCDSavedReminder+CloudKit: newlyCreatedRecord() (key=.template) unsetting template CK reference as the saved reminder is markedForDeletion {savedReminder: %{public}s}
ParentSavedReminderIdentifier
Template is marked for deletion but saved reminder is not {savedReminderID: %{public}s, templateID: %{public}s}
Fixing broken references for saved reminder {savedReminderID: %{public}s, templateID: %{public}s}
REMCDSavedReminder+CloudKit: Failed to decode `\REMCDSavedReminder.metadata` as `RDSavedReminder` {savedReminderID: %{public}s}
_TtC7remindd53RDTemplateOperationCreateTemplatePublicContentPreview
templatePublicLinkConfiguration
remindersCountLimit
templatePublicContentPreviewTTL
%{public}s: Failed to create preview of template's public content. {templateObjectID: %{public}@, privacy: .public), error: %{public}s, elapsedSeconds: %f}
%{public}s: Saved preview in cache {previewObjectID: %{public}@, elapsedSeconds: %f}
%{public}s: Start execution {templateObjectID: %{public}@, templatePublicLinkConfiguration: %{public}@, remindersCountLimit: %ld}
%{public}s: Finished execution {templateObjectID: %{public}@, templatePublicLinkConfiguration: %{public}@, remindersCountLimit: %ld, elapsedSeconds: %f}
_TtC7remindd28RDXPCActivityTimeEventStream
xpcEventStream
xpcEventStreamToken
eventHandler
Registering Time Event Handler
XPCActivityTimeEventStream received event {xpc_event: %s}
Unregistering xpcEventStreamToken {xpcEventStreamToken: %s}
Adding XPC time event {date: %{public}s}
_TtC7remindd59RDTemplateOperationCopyRemindersFromPublicTemplateToREMList
targetListObjectID
%{public}s: Finished execution {templateObjectID: %{public}@, targetListObjectID: %{public}@, limitPerSave: %ld, elapsedSeconds: %f}
%{public}s: Deleted REMCDPublicTemplate in Core Data store {templateObjectID: %{public}@, elapsedSeconds: %f}
%{public}s: Fetched saved reminders in public template {templateObjectID: %{public}@, topLevelRemindersCount: %ld, elapsedSeconds: %f}
%{public}s: Start execution {templateObjectID: %{public}@, targetListObjectID: %{public}@, limitPerSave: %ld}
%{public}s: Copied %ld out of %ld top-level reminders to target list {templateObjectID: %{public}@, targetListObjectID: %{public}@, elapsedSeconds: %f}
attachmentContext
_TtC7remindd27REMRecurrenceRuleCDIngestor
REMRecurrenceRuleCDIngestor: cdRecurrenceRule.reminder is nil {cdRecurrenceRule.remObjectID: %@}
REMRecurrenceRuleCDIngestor: cdRecurrenceRule.account is nil {cdRecurrenceRule.remObjectID: %@}
newCloudObject: Unknown attachment type {type: %s}
mergeData: Unknown attachment type {type: %s}
Reminder is marked for deletion but attachment is not {attachmentID: %{public}s, reminderID: %{public}s}
Fixing broken references for attachment {attachmentID: %{public}s, reminderID: %{public}s}
Not a file attachment {Type: %s}
No store controller for updating file attachment {record: %@}
File attachment has no remObjectID {record: %@}
File attachment has no account {remObjectID: %{public}@, record: %@}
Record.type is image but this is not an image attachment {type: %s}
Record.type is file but this is not a file attachment object {type: %s}
Filename is not a string {value: %s}
No store controller for updating file attachment {remObjectID: %{public}@, accountUUID: (%{public}s, record: %@}
File asset missing for file attachment {remObjectID: %{public}@, accountUUID: (%{public}s, record: %@}
File asset missing fileURL for file attachment {remObjectID: %{public}@, accountUUID: %{public}s, record: %@}
Could not generate sha512Sum from file asset {remObjectID: %{public}@, accountUUID: %{public}s, record: %@}
Failed to update attachment file {error: %s, remObjectID: %{public}@, accountUUID: (%{public}s, record: %@}
Record.type is url but this is not a URL attachment {type: %s}
remindd2
T@"REMColor",N,D,&
TB,N,D
T@"NSURL",N,D,C
T@"REMCDAccount",N,D,&
Failed to get name from xpc event. Not posting analytics for notifyd notification
_TtC7remindd17RDLaunchAnalytics
lock
alreadyPosted
LAUNCH EVENT {client: %{public}s, reason: %{public}s}
_TtC7remindd30RDStalePinnedListsEventHandler
debounceInterval
osTransactionForHandlingEvent
osTransactionForDebouncingEvent
isHandlingEvent
isDebouncingEvent
%s: Finished debouncing event
com.apple.remindd.RDStalePinnedListsEventHandler.debounceEvent
%s: Started debouncing event
%s: Failed to handle event {error: %{public}s}
%s: Updated pin state {list: %{public}s, isPinnedByCurrentUser: %{bool,public}d}
%s: Did fetch lists shared to current user {count: %{public}ld, objectIDs: %{public}s)}
%s: Did fetch pinned lists' manual ordering {identifiersInPinnedListsOrdering: %{public}s}
RDStalePinnedListsEventHandler.handleEvent
%s: Finished handling event
com.apple.remindd.RDStalePinnedListsEventHandler.handleEvent
%s: Started handling event
_TtC7remindd21RDWidgetRefreshEngine
storeControllerNotificationCenterToken
widgetRefresh
RDWidgetRefreshEngine: Unknown QoS. {qualityOfService: %{public}ld}
requested widget refresh
_TtC7remindd28RDXPCChangeTrackingPerformer
v32@0:8q16@?24
v48@0:8@16@24Q32@?40
implementation
v24@?0@"NSDictionary"8@"NSError"16
fetchAuxiliaryChangeInfos with {auxiliaryChangeInfoObjectIDs: %{public}s}
fetchHistory after {date: %{public}s}
fetchHistory after {token: %{public}s}
v24@?0@"REMChangeSet"8@"NSError"16
saveTrackingState with {clientID: %{public}s, trackingState: %{public}s}
v24@?0@"REMChangeTrackingState"8@"NSError"16
getTrackingState with {clientID: %{public}s}
remindd.RDXPCChangeTrackingPerformer
earliestChangeToken for {accountID: %{public}s}
currentChangeToken for {accountID: %{public}s}
currentChangeToken for {accountTypes: %ld}
currentChangeToken initiated
REMXPCChangeTrackingPerformer
v24@0:8@?<v@?@"REMChangeToken">16
v32@0:8q16@?<v@?@"REMChangeToken">24
v32@0:8@"NSString"16@?<v@?@"REMChangeToken">24
v32@0:8@"<REMChangeTrackingClientIdentifying>"16@?<v@?@"REMChangeTrackingState"@"NSError">24
v40@0:8@"REMChangeTrackingState"16@"<REMChangeTrackingClientIdentifying>"24@?<v@?@"NSError">32
v48@0:8@"REMChangeToken"16@"NSArray"24Q32@?<v@?@"REMChangeSet"@"NSError">40
v48@0:8@"NSDate"16@"NSArray"24Q32@?<v@?@"REMChangeSet"@"NSError">40
v32@0:8@"REMChangeToken"16@?<v@?@"NSError">24
v32@0:8@"NSArray"16@?<v@?@"NSDictionary"@"NSError">24
_TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler
com.apple.remindd.RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler.debounceEvent
%s: Updated mostRecentTargetTemplateIdentifierByCurrentUser of shared-to-me list {list: %{public}s, mostRecentTargetTemplateIdentifierByCurrentUser: %{public}s}
%s: Did fetch expected mapping of 'mostRecentTargetTemplateIdentifierByCurrentUser' by 'sourceListIdentifier' {mapping: %{public}s}
RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler.handleEvent
com.apple.remindd.RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler.handleEvent
_TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator
B48@0:8@16@24@32^@40
B40@0:8@16@24^@32
modelName
bundle
allModelVersionIdentifiers
postMigrationDataUpdateByModelVersionIdentifier
_TtCC7remindd47RDStagedLightweightCoreDataMigrationCoordinatorP33_D88389F778BE955B340162F613733C4913BabysitTarget
storeURL
crashDetectedAnalyticsEventName
remindd.BabysitTarget
com.apple.remindd.RDStagedLightweightCoreDataMigrationCoordinator.babysitter:
remindd.RDStagedLightweightCoreDataMigrationCoordinator
No file exists at sourceStoreURL {sourceStoreURL: 
Path extension of sourceStoreURL is not 'sqlite' {sourceStoreURL: 
Path extension of destinationStoreURL is not 'sqlite' {destinationStoreURL: 
A file already exists at destinationStoreURL {destinationStoreURL: 
sourceStoreURL and destinationStoreURL should be different {sourceStoreURL: 
, destinationStoreURL: 
com.apple.remindd.RDStagedLightweightCoreDataMigrationCoordinator.crashDetected
Did perform staged lightweight migration {storeURL: %{public}s, modelName: %{public}s, finalVersionIdentifier: %{public}s, elapsedSeconds: %f}
Will perform staged lightweight migration {storeURL: %{public}s, modelName: %{public}s, initialVersionIdentifier: %{public}s, persistentStoreDescriptionOptionsOverride: %s}
Failed to load destinationModel {modelName: 
, destinationVersionIdentifier: 
Failed to remove persistent store from persistent store coordinator after staged migration {storeURL: %{public}s, error: %{public}s}
Did perform post-migration data update {storeURL: %{public}s, modelName: %{public}s, versionIdentifier: %{public}s, elapsedSeconds: %f}
Will perform post-migration data update {storeURL: %{public}s, modelName: %{public}s, versionIdentifier: %{public}s}
com.apple.remindd.RDStagedLightweightCoreDataMigrationCoordinator.StagedMigrationsInfo
sourceVersionIdentifier
destinationVersionIdentifier
postMigrationDataUpdate.time
v24@?0@"NSPersistentStoreDescription"8@"NSError"16
'storeURL' is not supported by this migration coordinator {storeURL: 
, coordinator.modelName: 
Failed to find managed object model with matching version identifier {storeURL: %{public}s, modelName: %{public}s}
Found managed object model with matching version identifier {storeURL: %{public}s, modelName: %{public}s, versionIdentifier: %{public}s}
Found compatible managed object model of store {storeURL: %{public}s, modelName: %{public}s, versionIdentifier: %{public}s}
performStagedLightweightMigrationForStore
Failed to fetch metadata for storeURL {storeURL: %{public}s, error: %{public}s}
DABabysittable
_TtC7remindd22CDIngestionCoordinator
applyCRDTsWithoutMerging
noSideEffectChanges
differentialPrivacyRecorder
changedKeys
mode
syncToCloudKit
upsertBlocks
establishRelationshipBlocks
mutateRelationshipOrderingBlocks
afterSaveActionBlocks
ingestionContextsByAccountIdentifier
_TtCC7remindd22CDIngestionCoordinator16IngestionContext
accountIdentifier
persistentStore
fetchedObjectsMap
insertedObjectsMap
cdChangedValuesMap
Persistent store not found for some ingestables, the store may have been removed before this save request. Aborting the entire save for integrity. {accountIdentifier: %{public}s}
Could not convert accountIdentifier to CDObjectID to initializeIngestionContexts {accountIdentifier: 
Could not convert accountIdentifier to CDObjectID to initializeIngestionContexts {accountIdentifier: %{public}s}
deleteOrphaned()
[%{public}s] Updated objects to inspect for orphan {count: %ld}
[fetchIndexedAccount] Invalid accountIdentifier, cannot construct CDObjectID {accountIdentifier: 
[fetchIndexedAccount] Invalid accountIdentifier without matching ingestionContext {accountIdentifier: 
activityDate
activityTypeRawValue
authorUserRecordIDString
ckParentCloudObjectEntityName
ckParentCloudObjectIdentifier
sharedEntityName
_TtC7remindd19RDTimeAlarmProducer
timeEventStream
Alarm trigger did change for time alarm producer
com.apple.remindd.RDTimeAlarmProducer.reload
RDTimeAlarmProducer.reload
RDAlarmProducerDataSource.fetchAllTimeDataSourceAlarms
os_transaction INIT {name: com.apple.remindd.RDTimeAlarmProducer.reload}
os_transaction RELEASE {name: com.apple.remindd.RDTimeAlarmProducer.reload}
RDTimeAlarmProducer.start() must be called before setupTimers
RDTimeAlarmProducer.addNextAlarmTimeEvent
No alarm with future fireDate -- Done
Next alarm is in the past -- Not adding event {fireDate: %{public}s}
Scheduling next alarm {fireDate: %{public}s, nextAlarm: %s, reminderID: %{public}@, recurrent: %{public}s, overdue: %{public}s}
RDTimeAlarmProducer is setting up the timers
RDTimeAlarmProducer.start() must be called before fireExpiredAlarms
RDTimeAlarmProducer.produceExpiredAlarms
RDTimeAlarmProducer is firing expired alarms, count = %ld
RDTimeAlarmProducer is firing expired alarms
RDTimeAlarmProducer expiredAlarm {reminderID: %{public}@, fireDate: %{public}s alarmType: %{public}s, recurrent: %{public}s}
Starting time alarm producer {producer: %s}
RDTimeAlarmProducer.start() must be called exactly once
Received RDTimeEventHandler event on deallocated RDTimeAlarmProducer
remindd.RDTimeAlarmProducer
Tried to fire timeInterval alarm with nil dueDate {reminder: %s}
_TtC7remindd11RDXPCDaemon
daemon
debugPerformer
syncInterfacePerformerFactory
indexingPerformer
contactInteractionWriter
coreSuggestionsHandler
Tried to create REMStore after RDXPCDaemon was deallocated
storeControllerForStoreContainerToken
remindd.RDXPCDaemon
_TtC7remindd27RDCoreSuggestionsController
service
Done processing expiredReminders, counts {expire: %ld, error: %ld}
Unable to find siriFoundInAppsData. {reminderID: %@}
Reminder is not in SiriFoundInApps list {reminderID: %@, listID: %@}
Unable to get SGRecordId from siriFoundInAppsData. {reminderID: %@, siriFoundInAppsData.count: %ld}
Processing %ld expiredReminders {reminders: %s}
CoreSuggestions reminderAlarmTriggered(for:) completed
CoreSuggestions reminderAlarmTriggered(for:) completed with error {error: %s}
Done processing reminderStorages, counts {confirm: %ld, reject: %ld, none: %ld, error: %ld, irrelevant: %ld}
unknown siriFoundInAppsUserConfirmation
CoreSuggestions rejectReminder sent {sgRecordID: %@}
CoreSuggestions confirmReminder sent {sgRecordID: %@}
Processing %ld reminderStorages {reminderStorages: %s}
CoreSuggestions confirmReminder completed
CoreSuggestions confirmReminder completed with error {error: %s}
CoreSuggestions rejectReminder completed
CoreSuggestions rejectReminder completed with error {error: %s}
Searching by spotlightItemIdentifier in CoreData is unsupported
Searching REMCDReminder by location is unsupported. {criteria: %s}
$a.trigger.entity = %@
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/Store/REMCDReminder+Fetching.swift
Failed to pre-fetch reminders to mutate ordering; This save will be slow
Pre-fetching {result.count: %ld}
Reminder missing account {error: 
alarmStorage.trigger
Unexpected .localInternal in AccountsListDataView
Fetched customSmartLists(for:in:) that contain duplicated smart lists {keys: %{public}s}
Fetched a REMCDSmartList from customSmartLists(for:in:) that has nil remObjectID {accountID: 
Fetched topLevelListsAndGroups that contain duplicated lists {keys: %{public}s}
Fetched a REMCDList from topLevelListsAndGroups that has nil remObjectID {accountID: 
_TtC7remindd25RDAlarmProducerDataSource
debug_currentUserSharee
clientIdentity
Did hit error while producing alarms. Returning empty array {error: %s}
Failed to perform managedObjectContext operation {error: %@, managedObjectContext: %@}
Fetched reminder is missing contact handle. Skipping {reminderID: %{public}@}
Fetched reminder is not assigned to current user. Skipping {reminderID: %{public}@}
RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter fireDate is earlier than now for alarm. Skipping {alarmID: %{public}@ nowDate: %{public}@}
RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter is using default fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@}
RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter is calculating fireDate for overdue recurring alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@ nextFireDate: %{public}@}
RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter alarm {alarmID: %{public}@ isSnooze: %{public}s isRecurring: %{public}s}
RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore fireDate is later than now for alarm. Skipping {alarmID: %{public}@ nowDate: %{public}@}
RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore fireDate is earlier than ackDate for alarm. Skipping {alarmID: %{public}@ finalFireDate: %{public}@ ackDate: %{public}@}
RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore is using default fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@}
RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore is calculating fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@ previousFireDate: %{public}@}
RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore alarm {alarmID: %{public}@ isSnooze: %{public}s isRecurring: %{public}s}
TimeDataSourceAlarms: Failed to get REMReminder, REMAlarm or triggerEvent from cdTrigger -- skipping {cdTrigger: %@}
VehicleDataSourceAlarms: Failed to get REMReminder, REMAlarm or triggerEvent from cdTrigger -- skipping {cdTrigger: %@}
LocationDataSourceAlarms: Failed to get cdAlarm from trigger. {cdTrigger: %@}
LocationDataSourceAlarms: Failed to get reminderID from cdAlarm.reminder. {cdAlarm: %@}
LocationDataSourceAlarms: Failed to get remReminder from dataView result {reminderID: %{public}@}
LocationDataSourceAlarms: Failed to get remAlarm from remReminder.alarms {alarmID: %{public}s}
LocationDataSourceAlarms: remAlarm.trigger is not a RDCLRegionSource (REMAlarmLocationTrigger) {remAlarm.trigger: %@}
LocationDataSourceAlarms: Unable to get CLRegion from remAlarm.trigger {remAlarm.trigger: %@, reminderID: %{public}@}
LocationDataSourceAlarms: remReminder is not assigned to current user. Skipping {reminderID: %{public}@}
_TtC7remindd73RDStoreControllerMigrator_MostRecentTargetTemplateIdentifierByCurrentUser
%s: BEGIN {store: %{public}s}
%s: FAILED {store: %{public}s, error: %{public}s}
%s: END {store: %{public}s, elapsedSeconds: %{public}f}
mostRecentTargetTemplateIdentifierByCurrentUser
%s: Set '\REMCDList.mostRecentTargetTemplateIdentifierByCurrentUser' of some shared lists to nil {store: %{public}s, count = %{public}ld, elapsedSeconds: %{public}f}
%s: Fetched '\REMCDTemplate.identifier' of all non-deleted templates in persistent stores {store: %{public}s, count = %{public}ld, elapsedSeconds: %{public}f}
%s: Copied value of '\REMCDList.mostRecentTargetTemplateIdentifier' to '\REMCDList.mostRecentTargetTemplateIdentifierByCurrentUser' via 'NSBatchUpdateRequest' {store: %{public}s, count = %{public}ld, elapsedSeconds: %{public}f}
_TtC7remindd25RDSuggestedAttributeCache
RDSuggestedAttributeCache: Recording %{public}s suggestion from %{public}s with value: %s
RDSuggestedAttributeCache: Posting suggestion metric for %ld suggestions
com.apple.reminders.EditingFinished
RDSuggestedAttributeCache: Sugestion record {%s}
RDSuggestedAttributeCache: Comparing cached suggestions with true values {%s} from the commited reminder
RDSuggestedAttributeCache: Comparing cached suggestions with true value {%s} from the commited reminder
No cached value found for session: %s list: %s
Loading cached list: %s for session: %s
REMSuggestedAttributesHarvester.MentionsExtractionInvocation should not be called with 'parameters.listID', which belongs to list representation of a template. {parameters.listID: %{public}@}
loaded parameter: %s
loaded model in invocation
metadata
T@"REMCDSavedReminder",N,D,&
_TtC7remindd41RDTemplateOperationDownloadPublicTemplate
%{public}s: Start execution {recordName: %{public}s}
%{public}s: Failed to download public template {recordName: %{public}s, error: %{public}s, elapsedSeconds: %f}
%{public}s: Downloaded public template {recordName: %{public}s, elapsedSeconds: %f}
%{public}s: Failed to save public template in cache {recordName: %{public}s, error: %{public}s, elapsedSeconds: %f}
%{public}s: Saved public template in cache {recordName: %{public}s, elapsedSeconds: %f}
%{public}s: Finished execution {recordName: %{public}s, elapsedSeconds: %f}
FirstDayOfTheWeek
Reminder is marked for deletion but recurrence rule is not {recurrenceRuleID: %{public}s, reminderID: %{public}s}
Fixing broken references for recurrence rule {recurrenceRuleID: %{public}s, reminderID: %{public}s}
$hashtag.reminder
Failed to compute subQueryPredicate for REMCDHashtagLabel.Predicates.withConcealedHashtag
Unexpected nil canonical name REMCDHashtagLabel from hashtagLabelNames(from: ) {mid: %{public}@}
Skipping HashtagLabel with nil canonicalName in hashtagIDsByCanonicalNames(from:) {mid: %{public}@}
Skipping HashtagLabel with nil canonicalName in reminderIDsByHashtagLabelNames(from:) {mid: %{public}@}
Skipping nil HashtagLabel in reminderIDsByHashtagLabelNames(from:)
Skipping HashtagLabel with nil name in reminderIDsByHashtagLabelNames(from:) {mid: %{public}@}
Should not call keysForImmutable(ingestor:) for mutable ingestable type {ingestor: %s}
Tried to create CDIngestableKey array without changedKeys, the ingestable may be missing an REMChangedKeysObserver in the change item {type: %{public}s}
_TtC7remindd31REMCalDAVNotificationCDIngestor
.daPushKey should not be practically used in REMCalDAVNotification
.daSyncToken should not be practically used in REMCalDAVNotification
REMCalDAVNotificationCDIngestor: cdCalDAVNotification.owner is nil {cdCalDAVNotification.remObjectID: %@}
REMCalDAVNotificationCDIngestor: cdCalDAVNotification.account is nil {cdCalDAVNotification.remObjectID: %@}
Failed to get '\REMCDTemplate.publicLinkConfiguration' due to error upon decoding '\REMCDTemplate.publicLinkConfigurationData' as 'REMTemplatePublicLinkConfiguration' {remObjectID: %{public}s, error: %{public}s}
Failed to set '\REMCDTemplate.publicLinkConfiguration' due to error upon encoding 'newValue' as 'Data' {remObjectID: %{public}s, newValue: %{public}@, error: %{public}s}
didCleanUpManualSortHintOnMarkingForDeletion
defaultPublicLinkURLHostname
REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with newValue, which has incorrect type {objectID: %{public}s, keyPath: %{public}s}}
cleanUpManualSortHintIfNeeded: Unexpectedly nil template account.remObjectID {templateID: %{public}s}
cleanUpManualSortHintIfNeeded: Template was deleted due to non-user-initiated changes, cleanup is not needed {templateID: %{public}s}
cleanUpManualSortHintIfNeeded: Failed to delete manual sort hint of CSL being deleted {templateID: %{public}s, error: %s}
cleanUpManualSortHintIfNeeded: Template was deleted due to user-initiated changes, will delete its associated sort hint {templateID: %{public}s}
/reminders/template/
%s: Failed to compute public link URL {templateID: %{public}s, publicLinkURLUUID: %{public}s, hostname: %{public}s, isUsingDisplayedHostnameOfACAccount: %{public}s}
%s: Computed public link URL {templateID: %{public}s, publicLinkURL: %{public}s, isUsingDisplayedHostnameOfACAccount: %{public}s}
REMCDModelSwiftHooks
_TtC7remindd35RDStoreControllerNotificationCenter
observers
RDStoreControllerNotificationCenter: Incorrect usage of rem_pipeLineOfAccountsDidEnableOrDisable() {label: %{public}s}
accountsDidDisable
accountsDidEnable
os_transaction RELEASE {name: com.apple.remindd.storeControllerNotificationCenter.%{public}sPublisher}, label: %{public}s
com.apple.remindd.storeControllerNotificationCenter.
os_transaction INIT {name: com.apple.remindd.storeControllerNotificationCenter.%{public}sPublisher}, label: %{public}s
RDStoreControllerNotificationCenter.%{public}s[%{public}s]: Received notification that has no %{public}s in the user info
RDStoreControllerNotificationCenter.%{public}s[%{public}s]: Received notification {author: %{public}s}
com.apple.remindd.storeControllerNotificationCenter
os_transaction INIT {name: com.apple.remindd.storeControllerNotificationCenter}, label: %s
RDStoreControllerNotificationCenter: Store notification is ICCC or change tracking internal changes only. Skipping.
os_transaction RELEASE {name: com.apple.remindd.storeControllerNotificationCenter}, label: %s
RDStoreControllerNotificationCenter.handleNotification: Unknown QoS, handling it like `default`. {qualityOfService: %{public}ld}
Firing latest value after delay {coalescedUpdates: %ld, value: %s, completionBlocks: %ld, debouncer: %s}
Cancelling pending work item {debouncer: %s}
RDDebouncer.sampleFire: First fire sampled {label: %s}
RDDebouncer.sampleFire: Sample exceeds threshold for starting a new window, resetting load measurements {label: %s, elapsed: %f, threshold: %f}
No measurements to dequeue from to get the oldest sample value when updating load factor
RDDebouncer.sampleFire: Sampled {label: %s, elapsed: %f, n: %ld}
com.apple.remindd.rddebouncer
os_transaction INIT {name: com.apple.remindd.rddebouncer}, label: %s
loadFactor wasn't properly initialized even with debouncing interval option set to .loadFunction
os_transaction RELEASE {name: com.apple.remindd.rddebouncer}, label: %s
Failed to cast userInfo[%{public}s] to Set<NSManagedObjectID>
Entity in the given filter option not recognized in managedObjectContext {entityName: %{public}s, managedObjectModel: %s}
os_transaction RELEASE {name: com.apple.remindd.storeControllerNotificationCenter.storeDidChangePublisher}, label: %{public}s
com.apple.remindd.storeControllerNotificationCenter.storeDidChangePublisher
os_transaction INIT {name: com.apple.remindd.storeControllerNotificationCenter.storeDidChangePublisher}, label: %{public}s
RDStoreControllerNotificationCenter.storeControllerDidChange[%{public}s]: Received notification {author: %{public}s}
Received store did change notification but observer is deallocated
_TtC7remindd22RDBogusCalendarCleaner
cleanUpManualSortHintIfNeeded: Unexpectedly having a non-custom smart-list getting markedForDeletion {type: %{public}s, remObjectID: %{public}s}
cleanUpManualSortHintIfNeeded: Unexpectedly nil smart list remObjectID {type: %{public}s}
cleanUpManualSortHintIfNeeded: Unexpectedly nil smart list account.remObjectID {type: %{public}s, smartListUUIDString: %{public}s}
cleanUpManualSortHintIfNeeded: CSL was deleted due to non-user-initiated changes, cleanup is not needed {listID: %{public}s}
cleanUpManualSortHintIfNeeded: Failed to delete manual sort hint of CSL being deleted {listID: %{public}s, error: %s}
cleanUpManualSortHintIfNeeded: CSL was deleted due to user-initiated changes, will delete its associated sort hint {listID: %{public}s}
reminders %ld updated %ld inserted %ld
Failed to  CKContainer for accountID {accountID: 
Failed to fetch CKContainer for accountID {accountID: %s}
Downloading records in zone %@
Failed in fetchChangesOp.recordWasChangedBlock {recordID: %{public}s, error: %s}
Failed to serialize record {record: %s, error: %s}
Not pulling in CKPackage, the db of which lives at %s
ListIDsMergeableOrderingAsset
ListIDsMergeableOrdering
com.apple.remindd.RDCloudDebuggingUtils
DecodedListIDsMergeableOrdering
Error fetching record zones {error: %s}
_TtC7remindd31RDUserInteractionSessionManager
userDefaults
No checked-in -- Checking in {interaction: %@}
timeout expired -- reset check-in {interaction: %@}
timeout hasn't expired -- don't check-in {interaction: %@}
Failed to encode stored for checkIns {error: %{public}s, interaction: %@}
CheckIn not found -- Adding new one {interaction: %@, date: %s}
Replacing existing checkIn {interaction: %@, date: %s}
Failed to encode checkIns -- encodging empty array {error: %{public}s}
No stored checkIns -- returning empty array
Failed to decode stored checkIns -- returning empty array {error: %{public}s}
Failed to decoded encoded CheckIns -- return empty array {error: %{public}s}
Unexpected count for checkIn {count: %ld}
alarm.reminder.completed
alarm.reminder.completionDate
_TtC7remindd20RDAccountInitializer
DidCompleteInitializeAllAccountsNotification
RDAccountInitializerDidCompleteInitializeAllAccountsObserver
@32@0:8@?16@24
RDAccountInitializer: Error occured trying to initialize local accounts {error: %{public}s}
RDAccountInitializer: updateLocalAccountActiveStatus: Let's ensure local account is active as there's no cloud account signed in.
RDAccountInitializer: updateLocalAccountActiveStatus: Let's ensure local account is inactive (if empty) as we have some cloud accounts.
RDAccountInitializer: Setting account inactive value {accountID: %{public}@, inactive: %{public}s}
RDAccountInitializer: Not handling account data moves because we have not passed buddy or system data migrator
RDAccountInitializer: No iCloud account signed in or not enabled Reminders.
RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: Data move not needed as no merge action flag was not set by the DCO.
RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: The DCO flagged identifier is not the same as that of the current primary iCloud account. Something went wrong or we've found a race condition, don't move data {flagged: %{public}s, primary: %{public}s}.
RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: Error occurred when trying to move data from local to iCloud {flagged: %{public}s error: %{public}s}
RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: No iCloud REM account found in database, we can't move data. {flagged: %{public}s}.
RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: Local account is empty, we won't move local data to cloud {flagged: %{public}s}.
RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: DCO has set the merge action flag asking us to move data to cloud, let's move on... {flagged: %{public}s}
RDAccountInitializer: removeInactivatedCalDavAccountIfNeeded: There's no inactivated CalDAV account store to remove, we're done {appleAccountIdentifier: %{public}s}.
RDAccountInitializer: removeInactivatedCalDavAccountIfNeeded: Removed inactivated CalDAV account store {remAccountObjID: %{public}@, appleAccountIdentifier: %{public}s}.
RDAccountInitializer: removeInactivatedCalDavAccountIfNeeded save failed {error: %s, appleAccountIdentifier: %{public}s}
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: No need to 'migrate' inactivated CalDAV data as no signal flag is set.
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: No need to 'migrate' inactivated CalDAV data no signal flag is set for account %{public}s.
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: Error occurred when trying to move data from inactivated iCloud CalDav to CloudKit account {aaAccountIdentifier: %{public}s, error: %s}
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: cloudKitAccount.didChooseToMigrate should be true at this point but it isn't, something went wrong and we can't move data {aaAccountIdentifier: %{public}s}.
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: No CloudKit REM account found in database, something went wrong and we can't move data {aaAccountIdentifier: %{public}s}.
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: No inactive iCloud CalDAV account was found, no need to move data {aaAccountIdentifier: %{public}s}.
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: AccountUtil has set the flag indicating we should try to 'migrate' inactivated CalDAV data to CloudKit if any {aaAccountIdentifier: %{public}s}.
RDAccountInitializer: We are still in buddy
RDAccountInitializer: System data migration has not finished
RDAccountInitializer: No local account is found or created
RDAccountInitializer: Creating default list for local account {accountID: %{public}@}
RDAccountInitializer: This should never happen: the store told us there's no lists in this account but we did find a list with the default list ID {listID: %{public}@}
RDAccountInitializer: Creating local account {changeItem: %@}
StoreController not supportsLocalInternalAccount. Skipping initializeLocalInternalAccountIfNeeded
RDAccountInitializer: Creating SiriFoundInApps list {listChangeItem: %@}
RDAccountInitializer: Creating localInternal account {accountChangeItem: %@}
Failed to query whether Extraneous Local Account is empty. Skipping {accountObjID: %{public}@, account: %@}
Extraneous Local Account is not empty. Not Removing {accountObjID: %{public}@, account: %@}
com.apple.remindd.extraneousLocalAccountRemoved
Extraneous Local Account is empty. Removing {accountObjID: %{public}@, account: %@}
Removing Extraneous Local Accounts {candidateAccounts.count: %ld}
RDAccountInitializer: Posting notification initialized all accounts done.
RDAccountInitializer: Posting notification initialized all accounts failed.
RDAccountInitializerDidCompleteInitializeAllAccounts
com.apple.reminders.RDAccountInitializer
RDAccountInitializer: No need to update in-memory PrimaryActiveCKAccountCaches {current: %{public}s
RDAccountInitializer: Calling updateInMemoryPrimaryActiveCKAccountCachesIfNeeded with {remObjectID: %{public}s, managedObjectID: %{public}s}
remindd.DidCompleteInitializeAllAccountsObserver
remindd.RDAccountInitializer
_TtP7remindd28RDAccountInitializerObserver_
activities
processQueue
activityExecutionQueue
backgroundSchedulerFactory
backgroundScheduler
accountsDidDisableCancellable
reduceFactor
_TtC7remindd33RDJitteredMinimumDelayXPCActivity
delay
minimumDelay
allowBattery
isCPUIntensive
isDiskIntensive
_TtC7remindd40RDJitteredMinimumDelayXPCActivityFactory
Obtained babysitter token for {waiterID: %{public}s, executable: %{public}s}
Released babysitter token for {waiterID: %{public}s, executable: %{public}s}
Babysitting operation because it failed too many times {operation: %{public}s, waiterID: %{public}s}
RDJitteredMinimumDelayXPCActivity: Updating scheduler (xpcActivity) criteria {inputDelay: %f, jitteredMinimumDelay: %f}
RDHousekeepingActivityScheduler: reduceFactor=(%f) is larger than 1. It will set to 1.
RDHousekeepingActivityScheduler: reduceFactor(=%f) is less than 0. It will set to 0.
RDHousekeepingActivityScheduler: Some accounts have been logged out or disabled. Resetting babysitter for {waiterID: %{public}s}
RDHousekeepingActivityScheduler: Unexpectedly could not get a scheduler (xpcActivity) when trying to schedule a new one
RDHousekeepingActivityScheduler: Activity with smallest throttling interval {identifier: %{public}s, due: %{public}s, interval: %.*f}
RDHousekeepingActivityScheduler: Must have at least 1 activity to call q_updateBackgroundActivityCriteria()
RDHousekeepingActivityScheduler: Unexpectedly having pending activity on the scheduler (xpcActivity) when trying to create and schedule a new one
RDHousekeepingActivityScheduler: aq_syncRunScheduledActivity
RDHousekeepingActivityScheduler: Running scheduled background activity took %f ms
RDHousekeepingActivityScheduler: Running scheduled background activity
RDHousekeepingActivityScheduler: Trying to execute activity {identifier: %{public}s, lastExecuted: %{public}s}
RDHousekeepingActivityScheduler: Activity [%{public}s] failed with error {%{public}s}
RDHousekeepingActivityScheduler: Activity [%{public}s] is babysat, skipping...
RDHousekeepingActivityScheduler: Activity [%{public}s] is throttled, skipping... {resetDate: %{public}s}
RDHousekeepingActivityScheduler: activity %s decided that it doesn't want to run at this moment
RDHousekeepingActivityScheduler: activity %s randomly disallowed by rate reducer
RDHousekeepingActivityScheduler: Unexpectedly having an existing non-nil backgroundScheduler when trying to create and schedule a new one
RDHousekeepingActivityScheduler: Starting
RDHousekeepingActivityScheduler: No activities registered, we are not starting
today data view unable to group %ld reminders %s
B24@0:8^@16
enqueueApprovalCascade: Failed to cascade HashtagLabel approval due to nil canonicalName {uuidForChangeTracking: %{public}s}
enqueueApprovalCascade: Failed to acquire handle to managedObjectContext {canonicalName: %s}
enqueueApprovalCascade: Failed to acquire handle to account identifier for HashtagLabel {canonicalName: %s}
cleanUpManualSortHintIfNeeded: Deleted hashtag label has nil canonicalName, abort cleanup
cleanUpManualSortHintIfNeeded: Hashtag label was deleted due to non-user-initiated changes, cleanup is not needed {canonicalName: %s}
cleanUpManualSortHintIfNeeded: No accountIdentifier when the hashtag label is deleted {canonicalName: %s}
cleanUpManualSortHintIfNeeded: Fail to fetch CK account when the hashtag label is deleted {canonicalName: %s, accountIdentifier: %{public}s}
cleanUpManualSortHintIfNeeded: Could not obtain manualSortIDHashKeyProvider in the CK account when the hashtag label is deleted {canonicalName: %s, accountIdentifier: %{public}s}
cleanUpManualSortHintIfNeeded: Failed to delete manual sort hint of hashtag label being deleted {canonicalName: %s, error: %s}
cleanUpManualSortHintIfNeeded: Hashtag label was deleted due to user-initiated changes, will delete all associated sort hints for the label {canonicalName: %s}
account.remObjectID
savedReminder.remObjectID
Failed to initialize RDSavedAttachment because 'cdSavedAttachment.attachmentTypeRawValue' is not supported {attachmentTypeRawValue: 
cdAccount.managedObjectContext is nil for REMCDAccountListData.upsert(orderedIdentifiers:account:into:)
_TtC7remindd26RDManualSortIDCacheContext
accountManualSortIDByAccountIDCache
elementManualSortIDByReminderIDCache
RDManualSortIDCacheContext > cleared all
RDManualSortIDCacheContext > initialized
operationTypeRawValue
Ts,N,D
priorityRawValue
isCompleted
templateIdentifier
listIdentifier
configurationData
_TtC7remindd19REMShareeCDIngestor
REMShareeCDIngestor: cdSharee.list is nil {cdSharee.remObjectID: %@}
REMShareeCDIngestor: cdSharee.account is nil {cdSharee.remObjectID: %@}
_TtC7remindd22RDTransactionRegistrar
counter
osTransaction
RDTransactionRegistrar[%{public}s]: Transaction count decremented to {count: %ld}
RDTransactionRegistrar[%{public}s]: Trying to decrement counter to negative, grounding to zero {count: %ld, n: %ld}
RDTransactionRegistrar[%{public}s]: Transaction count is zero when osTransaction is not nil
RDTransactionRegistrar[%{public}s]: Transaction count is not zero when osTransaction is nil {count: %ld}
RDTransactionRegistrar[%{public}s]: Transaction count is negative {count: %ld}
RDTransactionRegistrar[%{public}s]: Transaction count incremented to {count: %ld}
target
reader
Unexpected entity name {entityName: 
REMRemindersDataViewInvocation_fetchByObjectID: Failed due to attempt to fetch by 'objectIDs' with unexpected entity name {entityName: %{public}s}
Every objectID in 'objectIDs' should have the same entity name.
REMRemindersDataViewInvocation_fetchByObjectID: Failed due to attempt to fetch by 'objectIDs' with multiple entity names.
_TtC7remindd58RDStoreControllerMigrator_UnsetCKDirtyFlagsInNonCKAccounts
UnsetCKDirtyFlagsInNonCKAccounts {store: %{public}s} accountIdentifier is nil, skip migration
UnsetCKDirtyFlagsInNonCKAccounts BEGIN {store: %{public}s}
UnsetCKDirtyFlagsInNonCKAccounts END {store: %{public}s, migrated ckDirtyFlagsInNonCKAccounts, accountIdentifier = %s, count = %ld}
UnsetCKDirtyFlagsInNonCKAccounts with accountIdentifier = %s, error: %s
UnsetCKDirtyFlagsInNonCKAccounts {store: %{public}s} with {account: %s} is not a CK account, skip migration
_TtC7remindd53RDTemplateOperationCopyRemindersFromTemplateToREMList
RDTemplateOperationCopyRemindersFromTemplateToREMList: Finished execution {templateObjectID: %{public}@, targetListObjectID: %{public}@, limitPerSave: %ld, elapsedSeconds: %f}
%{public}s: Fetched reminders in template {templateObjectID: %{public}@, topLevelRemindersCount: %ld, elapsedSeconds: %f}
RDTemplateOperationCopyRemindersFromTemplateToREMList: Start execution {templateObjectID: %{public}@, targetListObjectID: %{public}@, limitPerSave: %ld}
RDTemplateOperationCopyRemindersFromTemplateToREMList: Copied %ld out of %ld top-level reminders to target list {templateObjectID: %{public}@, targetListObjectID: %{public}@, elapsedSeconds: %f}
%{public}s: Copied attachment into reminderChangeItem {reminderChangeItem.remObjectID: %{public}@, cdSavedAttachment.remObjectID: %{public}s, copiedAttachment: %{public}@}
_TtC7remindd13RDMergePolicy
@24@0:8Q16
B32@0:8@16^@24
RDMergePolicy: Unknown conflict or non-REMCDObject merge conflict is not handled by remindd {conflict: %s}
RDMergePolicy: Neither persisted or cached snapshot is defined {conflict: %s}
RDMergePolicy: Resolution token map missing from the CDObject snapshot, don't know how to resolve conflict {conflict: %s
RDMergePolicy: Cannot decode data to resolution token map from the CDObject snapshot, don't know how to resolve conflict {conflict: %s
RDMergePolicy: skip merging key because it does not exist in the snapshot {key: %s, remObjectID: %s}
RDMergePolicy: Resolution token map says we shouldn't merge key: {key: %s, remObjectID: %s}
RDMergePolicy: Missing managed object context for resolving merge conflict {key: %s, remObjectID: %s}
RDMergePolicy: Going to merge key: {key: %s, remObjectID: %s}
listIDsMergeableOrdering_v2
RDMergePolicy: Error occured while trying to merge ordered set for: {key: %s, remObjectID: %s}
RDMergePolicy: let's check if we need to merge this key: {key: %s, remObjectID: %s}
<not-remcdobject>
RDMergePolicy: Constraint conflict is not handled by remindd, and expect some confusing error message from CoreData {constraint: %s, constraintValues: %s}
RDMergePolicy: Missing managed object context for resolving sharee constraint conflict {conflict: %{public}s}
RDMergePolicy: Some conflicting objects are not hashtag for resolving hashtag constraint conflict {conflict: %{public}s}
RDMergePolicy: Missing managed object context for resolving hashtag constraint conflict {conflict: %{public}s}
RDMergPolicy: context-level constraint conflict is unexpected and not handled for resolving hashtag constraint conflict {conflict: %{public}s}
RDMergPolicy: databaseObject is not a REMCDHashtag for resolving hashtag constraint conflict {conflict: %{public}s}
RDMergePolicy: cdReminder has no remObjectID {key: %s, cdReminder.objectID: %@}
RDMergePolicy: Could not get a replicaIDSource for reminder for key {key: %s, remObjectID: %@}
RDMergePolicy: Store snapshot document data is nil for the mergeable string document key {key: %s, remObjectID: %@}
RDMergePolicy: Failed to get the reminder remObjectID from the CDReminder {cdReminder: %@}
RDMergePolicy: Failed to get the account remObjectID from the CDReminder {cdReminder: %@}
RDMergePolicy: Unexpected reminder property key to get a replicaIDSource for it {key: %s}
RDMergePolicy: Store snapshot reminderIDs ordering data is nil for key {key: %s, remObjectID: %s}
RDMergePolicy: Deserialized reminderIDsMergeableOrdering from data {remObjectID: %s}
RDMergePolicy: cdAccount has no remObjectID {key: %s, cdAccount.objectID: %@}
RDMergePolicy: Could not get a replicaIDSource for account for key {key: %s, remObjectID: %@}
RDMergePolicy: Deserialized listIDsMergeableOrdering ordering from data {remObjectID: %s}
RDMergePolicy: Store snapshot listIDs ordering data is nil for key {key: %s, remObjectID: %@}
RDMergePolicy: Failed to get the account remObjectID from the CDAccount {cdAccount: %@}
RDMergePolicy: Unexpected account property key to get a replicaIDSource for it {key: %s}
RDMergePolicy: Merge policy type is not compatible with this merge policy, please use defaultMergePolicy() instead.
_TtCE7reminddCC19ReminderKitInternal23REMAccountsListDataView10InvocationP33_F1336D37D702B2C1BEEF72784365A11019PolymorphicListItem
modelObject
remObjectID
Trying to call accountChildGroup() when modelObject isn't a group
Skipping transaction becuase it contains no changes {transaction: %@}
Skipping change becuase it's not update {change: %@}
Skipping change unhandled type {objectID: %@}
Failed to cast managedObject to REMCDReminder {objectID: %@}
Updated reminder has no list -- skipping {reminder: %s}
Failed to cast managedObject to REMCDList {objectID: %@}
Failed to get remObjectID from REMCDList {objectID: %@}
Failed to cast managedObject to REMCDAccount {objectID: %@}
Failed to get remObjectID from REMCDAccount {objectID: %@}
Ignorning account change becuase it didn't update the name
Failed to fetch manual sort hint of pinned lists {error: %s}
REMAccountsListDataView.Invocation no cache
REMAccountsListDataView.Invocation unable to decode cache
Unable to encode accounts list cache %s
REMAccountsListDataView.ReminderCounts Saving cache data size %ld
Reminder missing list identifier. Skipping {reminder.identifier: %{public}s}
Computing reminders count in every list by fetching reminders as dictionaries {postFetchPredicateTypes: %s}
Computing reminders count in every list by fetching reminders as an array of REMCDReminder {postFetchPredicateTypes: %s}
REMAccountsListDataView.Invocation fetchCounts() failed to fetch custom smart lists {error: %s}
Trying to call accountChildListOrSmartList() when modelObject is a group
Trying to call groupChildListOrSmartList() when modelObject is a group
unknown or unsupported REM object type for REMAccountsListDataView.ListItem
Unable to decode accounts list cache
REMObjectIDIdentifiable
performPostMigrationDataUpdate(in:clientNamesOfREMCDChangeTrackingStateWhichShouldNotBeResetUponPersistentHistoryTruncation:)
[%s|%s] Did reset change tracking state {accountIdentifier: %{public}s, clientName: %{public}s, lastConsumedDate: %{public}s}
_TtC7remindd27RDApplicationShortcutEngine
listProvider
shortcutUpdater
RDApplicationShortcutEngine has no provider; not updating shortcuts
Updating application shortcuts from RDApplicationShortcutEngine {lists: %{public}s}
_TtC7remindd27REMManualOrderingCDIngestor
Cannot merge REMManualOrdering into cdManualSortHint, failed to find cdAccount from accountID: 
REMManualOrderingCDIngestor.accountID does not match with that of given in merge(storage:into:cdAccount:) {storage.accountID: 
, storage.objectID: 
, cdAccount.identifier: 
Error upon merging manual ordering {list type: %s, listID: %s, error: %s}
merging manual ordering {list type: %s, list ID: %s, top-level reminders count: %ld}
REMCDManualSortHintDidContainIDsWithLocalPrefix
REMManualOrderingCDIngestor.merge(storage:into:cdAccount:) does not know how to handle unknown list type: 
_TtC7remindd42RDTemplateOperationCopyRemindersToTemplate
sourceListObjectID
accountObjectID
templateConfiguration
limitPerSave
%{public}s: fetchRemindersInSourceList(in:) should be overridden by subclass
%{public}s: Skipped copying attachment into cdSavedReminder because attachment belongs to an unhandled subclass of REMAttachment {cdSavedReminder.remObjectID: %{public}s, sourceAttachment: %{public}@}
%{public}s: Copied attachment into cdSavedReminder {cdSavedReminder.remObjectID: %{public}s, sourceAttachment: %{public}@, savedAttachment: %{public}@}
%{public}s: Finished execution {templateObjectID: %{public}@, sourceListObjectID: %{public}@, limitPerSave: %ld, elapsedSeconds: %f}
%{public}s: Failed to fetch manual sort hint of template {templateObjectID: %{public}@}
%{public}s: Fetched reminders in source list {sourceListObjectID: %{public}@, topLevelRemindersCount: %ld, elapsedSeconds: %f}
%{public}s: Start execution {templateObjectID: %{public}@, sourceListObjectID: %{public}@, limitPerSave: %ld}
%{public}s: Copied %ld out of %ld top-level reminders to template {templateObjectID: %{public}@, sourceListObjectID: %{public}@, elapsedSeconds: %f}
@24@0:8^@16
_TtC7remindd23REMAttachmentCDIngestor
_TtC7remindd27REMFileAttachmentCDIngestor
_TtC7remindd28REMImageAttachmentCDIngestor
_TtC7remindd26REMURLAttachmentCDIngestor
REMFileAttachmentCDIngestor: cdFileAttachment.uti is nil {cdFileAttachment.remObjectID: %@}
REMFileAttachmentCDIngestor: cdFileAttachment.reminder is nil {cdFileAttachment.remObjectID: %@}
REMFileAttachmentCDIngestor: cdFileAttachment.account is nil {cdFileAttachment.remObjectID: %@}
REMImageAttachmentCDIngestor: cdImageAttachment.uti is nil {cdImageAttachment.remObjectID: %@}
REMImageAttachmentCDIngestor: cdImageAttachment.reminder is nil {cdImageAttachment.remObjectID: %@}
REMImageAttachmentCDIngestor: cdImageAttachment.account is nil {cdImageAttachment.remObjectID: %@}
REMURLAttachmentCDIngestor: cdURLAttachment.uti is nil {cdURLAttachment.remObjectID: %@}
REMURLAttachmentCDIngestor: cdURLAttachment.reminder is nil {cdURLAttachment.remObjectID: %@}
REMURLAttachmentCDIngestor: cdURLAttachment.account is nil {cdURLAttachment.remObjectID: %@}
_TtC7remindd18RDClientConnection
xpcDaemon
isUserInteractive
xpcConnection
notificationSubscriptionQueue
keepAliveTransaction
com.apple.remindd.RDClientConnection.shouldKeepAlive
com.apple.remindd.RDClientConnection.shouldNotKeepAlive
No clientProxy obtained.
Unable to get remoteObjectProxy for the app from the daemon. Maybe the client is gone? {error: %s}
Failed to create XPC performer. Is this a barebones daemon / before first unlock?
RDClientConnection: returning sync interface performer from %s
RDClientConnection: returning storePerformer from %s
os_transaction RELEASE {name: %s}
com.apple.remindd.keepAlive[
(UserInteractive)
remindd.RDClientConnection
 clientIdentity=
] xpcConnection=
, userInteractive=
Connection was invalidated {clientIdentity: %{public}s}
Connection was interrupted unexpectedly {clientIdentity: %{public}s}
AAACCOUNTS.com.apple.accountsd
com.apple.private.accounts.allaccounts
com.apple.private.systemmigration.daemonclient
com.apple.suggestd
com.apple.CoreSuggestions.suggest_tool
com.apple.private.calendar.syncclient
com.apple.exchangesync.exchangesyncd
Device is running a non-internal Install. Not providing remindtool access level
Unexpected privateRemindd entitlement format {reminddEntitlements: %{public}s}
Unexpected type for remindd entitlement {entitlement: %{public}s, value: %{public}s, type: %{public}s}
com.apple.siri-distributed-evaluation
com.apple.suggestd.reminders
com.apple.remindd.userInteractive
com.apple.remindd
com.apple.analyticsd
REMXPCDaemon
v40@0:8@"REMStoreContainerToken"16@"NSString"24@?<v@?@"<REMXPCChangeTrackingPerformer>"@"NSError">32
v40@0:8@"REMStoreContainerToken"16@"NSString"24@?<v@?@"<REMXPCDebugPerformer>"@"NSError">32
v48@0:8@"NSString"16@"REMStoreContainerToken"24@"NSString"32@?<v@?@"<REMXPCStorePerformer>"@"NSError">40
v32@0:8@"NSString"16@?<v@?@"<REMXPCSyncInterfacePerformer>"@"NSError">24
v32@0:8@"NSString"16@?<v@?@"<REMXPCIndexingPerformer>"@"NSError">24
REMXPCClient
schedulingStateStorage
performer
scheduledActivityTimeout
_TtC7remindd37RDICCloudSchemaCatchUpSyncXPCActivity
xpcActivity
_TtC7remindd44RDICCloudSchemaCatchUpSyncXPCActivityFactory
os_transaction RELEASE {name: com.apple.remindd.ICCloudSchemaCatchUpSyncController.q_syncRunScheduledActivity}
RDICCloudSchemaCatchUpSyncXPCActivity: Updating scheduler (xpcActivity) criteria {estimatedDuration: %{public}f}
ICCloudSchemaCatchUpSyncController
_TtC7remindd11RDThrottler
allowedOperationsCount
throttleInterval
throttleResetDate
currentIntervalAllowedOperationsCount
Throttler allows and is going to run operation {identifier: %{public}s, op: %{public}s}
Throttler denied operation {identifier: %{public}s, op: %{public}s, remainingTimeInterval: %.*f, throttleResetDate: %{public}s}
REMCDAlarmDateTrigger.generateNonce(): trigger.alarm not set before trying to call generateNonce() {triggerID: %{public}s}
REMCDAlarmTimeIntervalTrigger.generateNonce(): trigger.alarm not set before trying to call generateNonce() {triggerID: %{public}s}
REMCDAlarm.generateNonce(): alarm.reminder not set before trying to call generateNonce() {alarmID: %{public}s}
REMAlarmCDIngestor: Fatal programming fault, was expecting to map dueDateComponents storage value key to CD value key
REMAlarmCDIngestor: Failed to get resolution token map from reminder {reminderID: %{public}s}
REMAlarmCDIngestor: Failed to find the resolution token of 'dueDateComponents' from reminder {reminderID: %{public}s, mapKeys: %{public}s}
orderedIdentifierMap
T@"REMOrderedIdentifierMap",N,D,&
_TtC7remindd19RDCoreBehaviorModel
baseUrl
behaviorRetriever
trained
confidenceThreshold
timer
feedbackVersion
feedbackForRules
rules
_TtC7remindd35RDCoreBehaviorModelTrainingDelegate
trainingDataFrame
intentWords
RDCoreBehaviorFeedback.json
RDCoreBehaviorModel: Failed to encode feedback data
RDCoreBehaviorModel: Failed to save feedback data {error: %s}
RDCoreBehaviorModel: New feedback info saved to {%s}
remindd.RDCoreBehaviorModelTrainingDelegate
ReminderDueDayOfWeek
ReminderContactLabel
ReminderPriority
ReminderTitleIntent
ReminderAlarmLocationLabel
ReminderListIdentifier
com.apple.CoreBehavior.Timing
Reminders
Completion_Status
RDCoreBehaviorModel: invalidating timer since mining task did finish
RDCoreBehaviorModel: Filtered rules {rules.count: %ld, filtered.count: %ld}
remindd/RDCoreBehaviorModel.swift
Failed to cast bmtype {uncasted: 
RDCoreBehaviorModel: CoreBehavior is not up to date
RDCoreBehaviorModel.sqlite
RDCoreBehaviorModel: No existing CoreBehavior
RDCoreBehaviorModel: Removing rule: %s
RDCoreBehaviorModel: top corebehavior predictions: %s
RDCoreBehaviorModel: all corebehavior predictions: %s
RDCoreBehaviorModel: matching rules:
RDCoreBehaviorModel: number of matching rules: %{public}ld
RDCoreBehaviorModel: corebehavior context: %s
RDCoreBehaviorModel: Current feedback version {%lu}, skipping reset to version {%lu}
v16@?0@"NSTimer"8
RDCoreBehaviorModel: CoreBehavior mining task terminating early due to shouldDefer is true
RDCoreBehaviorModel: CoreBehavior mining task terminating early due to time out
RDCoreBehaviorModel: CoreBehavior mining task has run %s seconds
ReminderAlarmLocationLabel:home
ReminderAlarmLocationLabel:work
RDBMMiningTaskDelegate
BMMiningTaskDelegate
v24@0:8@"BMMiningTask"16
v32@0:8@"BMMiningTask"16@"NSArray"24
v32@0:8@"BMMiningTask"16@"NSDictionary"24
v32@0:8@"BMMiningTask"16@"NSSet"24
@"NSSet"32@0:8@"BMMiningTask"16@"NSSet"24
v32@0:8@"BMMiningTask"16@"NSError"24
@"NSArray"24@0:8@"BMMiningTask"16
_TtC7remindd22RDVehicleAlarmProducer
connectedToken
disconnectedToken
com.apple.locationd.vehicle.connected
com.apple.locationd.vehicle.disconnected
Starting RDVehicleAlarmProducer
RDVehicleAlarmProducer.start() must be called exactly once
com.apple.remindd.RDVehicleAarmProducer.locationd.vehicle.notify.
RDVehicleAarmProducer: Couldn't create os_transaction_t for %{public}s
os_transaction RELEASE {name: com.apple.remindd.RDVehicleAarmProducer.locationd.vehicle.notify.%{public}s}
os_transaction INIT {name: com.apple.remindd.RDVehicleAarmProducer.locationd.vehicle.notify.%{public}s}
Did receive vehicle disconnected notification
v12@?0i8
Failed to register notify handler. {status: %u}
VehicleConnectionDidChange
Received vehicle change notification with nil producer
Did receive vehicle notification {name: %{public}s}
Did receive vehicle connected notification
remindd.RDVehicleAlarmProducer
Key in CKRecord's resolution token map is unrecognized {key: %{public}s, recordType: %{public}s, fieldType: %{public}s}
merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}
merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}
repairResolutionTokenMap: did repair resolution token map for {resolutionTokenKey=%{public}s, recordKey=%{public}s, remappedRecordKey=%{public}s}
DidFinishMigration
DidChooseToMigrate
repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}
repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}
repairResolutionTokenMapForImportedRecord -- repair token map for key=%{public}s
repairResolutionTokenMapForImportedRecord - recordID=%{public}s
Unable to merge CR property from CKRecord into coredata object because replicaIDSource isn't available {key: %{public}s, cdObject: %@}
Unable to merge CR property from CKRecord into coredata object {key: %{public}s, cdObject: %@, error: %{public}s}
Error reading from asset URL {key: %{public}s, url: %{public}s, error: %{public}s}
REMCDObjectSystemFieldsMerging: Found a case we are merging down a Unset version number from CK while local object version isn't unset {entity: %{public}s, identifier: %{public}s}
REMCDObjectSystemFieldsMerging: Unknown kind of value in ckRecord[%{public}s] {entity: %{public}s, identifier: %{public}s, value: %s}
REMCDObjectSystemFieldsMerging: Merged updated minimumSupportedVersion as NSNumber from CK record {entity: %{public}s, identifier: %{public}s}
remObjectID is not defined for cdObject {cdObject: %@}
accountID is not defined for cdObject {cdObject: %@}
isConcealed:(markedForDeletion=
Can't create data from object and not able to save it as asset {object: %s}
REMCDObjectSystemFieldsMerging
v32@0:8@"REMCDObject"16@"CKRecord"24
q16@0:8
@24@0:8:16
_TtC7remindd30RDDisabledAccountsEventHandler
unitTest_didReceiveAccountsDidDisable
RDDisabledAccountsEventHandler did reset babysitter for {babysittableWaiterID: %{public}s, accountTypeHost: %{public}s}
RDDisabledAccountsEventHandler did reset accountsListCategorizedCountsCache and hashtagLabelsInCustomSmartListFilterCache
_TtC7remindd22RDXPCIndexingPerformer
remindd.RDXPCIndexingPerformer
Daemon receives reindexSearchableItems {identifiers: %s}
Daemon receives reindexAllSearchableItems
Created by remindd on 
REMXPCIndexingPerformer
v24@0:8@?<v@?>16
v32@0:8@"NSArray"16@?<v@?>24
_TtC7remindd18RDAccountDataMover
remindersBatchSize
accountDataMoverSaveRequestAuthorString
statistics
excludeSharedToMeLists
potentialDenylistItemIDs
_useSourceObjectIDAsExternalID
_copyListSharingStatus
currentSaveRequest
_TtC7remindd23RDReminderDataICSCopier
_TtC7remindd28RDReminderDataCloudKitCopier
_TtC7remindd28RDReminderDataExchangeCopier
RDAccountDataMover: RDReminderDataICSCopier: imported ICS into as reminder {objectID: %{public}@, storage: %@}
RDAccountDataMover: RDReminderDataICSCopier: source reminder exported as ICS {objectID: %{public}@, icsTodo: %@}
Failed to export reminder as ICSTodo and ICSCalendar {reminderID: 
RDAccountDataMover: Attempted to save with a current save request.
RDAccountDataMover: _copySliceOfReminders: Cannot copy reminders because list change item is not tracked and is nil {targetListID: %{public}@}
RDAccountDataMover: Processed copying source reminders {count: %ld}
RDAccountDataMover: _copySliceOfReminders: Source reminder is denylisted to copy to the target list {sourceReminder: %{public}@}
REMReminder.dataCopierFactory: Could not create data copier for account data move because account type is not supported for now {accountTypeHost: %{public}@, reminderID: %{public}@}.
Unhandled account type
default-list-absent
RDAccountDataMover: removeData: done removing data from account {objectID: %{public}@, lists.count: %ld, remindersFromDefaultList: %s}
RDAccountDataMover: removeData: given account is not empty, now remove its lists and reminders {objectID: %{public}@}
RDAccountDataMover: removeData: given account is already empty (no reminder or list count < 2) so we stopped {objectID: %{public}@}
RDAccountDataMover: Failed to create save request.
RDAccountDataMover: Processing source list to consider... {objectID: %{public}@}
RDAccountDataMover: Can't find target list change item with {objectID: %{public}@}
RDAccountDataMover: Source list is denylisted to copy to the target and it does not contain any non-denylisted child reminder {sourceList: %{public}@, targetList: %{public}@}
RDAccountDataMover: Processing target list to copy reminders into {objectID: %{public}@}
RDAccountDataMover: Source lists processed {count: %ld}
RDAccountDataMover: Done copying source list {sourceList: %{public}@, targetList: %{public}@}
RDAccountDataMover: we chose to exclude this source list since someone else owns it {objectID: %{public}@}
RDAccountDataMover: The copy-from account is not a local account {%{public}@}.
RDAccountDataMover: The copy-to account is not a cloud account type {%{public}@}.
RDAccountDataMover: Saved all changes and set .daWasMigrated=YES to cloud account {cloudAccount: %{public}@}
RDAccountDataMover: The copy-from account is an inactivated account {%{public}@}.
RDAccountDataMover: The copy-from account is not a CalDAV account {%{public}@}.
RDAccountDataMover: Copied data from inactivated account, saved all changes and set .daWasMigrated=YES to cloud account {inactivatedAccount: %{public}@, cloudAccount: %{public}@}
_TtC7remindd24RDExtraneousAlarmCleaner
extraneousAlarmCloudConfiguration
isUnitTest
_isDisabled
babysitterOperationDeleteExtraneousAlarms
babysitTarget
_TtCC7remindd24RDExtraneousAlarmCleanerP33_2A672D4ADD7F5091C33DC2731906050413BabysitTarget
com.apple.remindd.RDExtraneousAlarmCleaner.babysitter
RDExtraneousAlarmCleaner: out of range [1, Int.max] deleteCountThreshold = %lu. It will set to 10.
RDExtraneousAlarmCleaner: out of range [0, Int.max] deleteCountLimit = %lu. It will set to 200.
RDExtraneousAlarmCleaner: cleanUpTriggerReductionFactor = %f is larger than 1. It will set to 1.
RDExtraneousAlarmCleaner: cleanUpTriggerReductionFactor = %f is less than 0. It will set to 0.
RDExtraneousAlarmCleaner: userDefaults.lastExtraneousAlarmsProcessedDate = %{public}s
yyyy-MM-dd hh:mm:ssZ
RDExtraneousAlarmCleaner: reminder {ckIdentifier: %{public}s, objectID: %{public}@} does not have identifier
RDExtraneousAlarmCleaner: cannot find reminder {%{public}s}
RDExtraneousAlarmCleaner: reminder {%{public}s} without accountID.
RDExtraneousAlarmCleaner: reminder {%{public}s} without reminderID.
RDExtraneousAlarmCleaner: alarm date trigger {%{public}s} does not have alarm
RDExtraneousAlarmCleaner: alarm {%{public}s} has a trigger not of type REMAlarmDateTrigger
RDExtraneousAlarmCleaner: Unexpectedly could not get an xpcActivity when trying to schedule a new one
RDExtraneousAlarmCleaner: Updating xpcActivity criteria {throttlingInterval: %f, randomizedDelay: %f}
RDExtraneousAlarmCleaner: Updating xpcActivity criteria using backoffThrottleInterval
RDExtraneousAlarmCleaner: Unexpectedly having pending activity on the xpcActivity when trying to create and schedule a new one
RDExtraneousAlarmCleaner.deleteExtraneousAlarms
RDExtraneousAlarmCleaner: Did hit error while deleting extraneous alarms: {error: %{public}s}
RDExtraneousAlarmCleaner: changes userDefaults.useExtraneousAlarmBackOffThrottleInterval to %{bool}d
RDExtraneousAlarmCleaner: number of extraneous alarms deleted: %lu. Total delete time: %.*f s
RDExtraneousAlarmCleaner: number of non-concealed reminders with alarms more than threshold %ld: %ld. Total fetch time: %.*f s
RDExtraneousAlarmCleaner: too early to run extraneous alarms cleanup
Babysitting RDExtraneousAlarmCleaner because it failed too many times {waiterID: %{public}s}.
RDExtraneousAlarmCleaner: random skip extraneous alarms cleanup
RDExtraneousAlarmCleaner: Unexpectedly having an existing non-nil xpcActivity when trying to create and schedule a new one
RDExtraneousAlarmCleaner: q_syncRunScheduledActivity
RDExtraneousAlarmCleaner: Running scheduled XPC activity took %f ms
RDExtraneousAlarmCleaner: Running scheduled XPC activity, let's check if we should delete extraneous alarms
RDExtraneousAlarmCleaner: Starting RDExtraneousAlarmCleaner with lastExtraneousAlarmsProcessedDate = %{public}s
RDExtraneousAlarmCleaner: Some accounts have been logged out or disabled. Resetting babysitter for {waiterID: %{public}s}
RDExtraneousAlarmCleaner: Disabled by rate reducer configuration. Not starting.
remindd.RDExtraneousAlarmCleaner
_TtC7remindd23RDManualSortHintUpdater
accountsAndRemindersChangesSubscription
manualSortHintChangesSubscription
RDManualSortHintUpdater stops.
RDManualSortHintUpdater starts.
RDManualSortHintUpdater failed to fetch REMCDManualSortHint with local IDs {error: %s}
RDManualSortHintUpdater did not replace local IDs in any REMCDManualSortHint.
RDManualSortHintUpdater failed to save changes {error: %s}
RDManualSortHintUpdater replaced local IDs in %s REMCDManualSortHint.
RDManualSortHintUpdater failed to replace local IDs in REMCDManualSortHint {error: %s}
RDManualSortHintUpdater fetched %s REMCDManualSortHint with local IDs.
RDManualSortHintUpdater did not fetch any REMCDManualSortHint with local IDs.
Cannot replaceLocalIDsInREMCDManualSortHint() against a manual sort hint without an associated account {remObjectID: %{public}s}
List Fetch Metadata
Created list fetchRequest {fetchRequest: %@}
List Fetch Count
List Fetch Storages
List Fetch Storages And Parents
List missing account {error: 
_TtC7remindd42RDDynamicSignificantTimeNotificationEngine
xpcEventSetter
currentStatus
dynamicSignificantTimeChangeNotificationEngine
Error updating significantTimeChageNotification {error: %{public}s}
DISABLE significantTimeChageNotification XPC event
DISABLE significantTimeChageNotification XPC event. Skipping because values match
Notification
ENABLE significantTimeChageNotification XPC event
ENABLE significantTimeChageNotification XPC event. Skipping because values match
[fetchReminderLitesOfTemplate] Failed to fetch signed-in accounts {error: %s}
[fetchReminderLitesOfTemplate] Could not fetch manual sort hint of .savedReminders without an accountObjectID {listID: %{public}@, cdReminders.count: %ld}
REMRemindersListDataView.TemplateInvocation: reminders %ld updated %ld inserted %ld
Failed to cast managedObject to REMCDTemplate {objectID: %@}
Failed to get remObjectID from REMCDTemplate {objectID: %@}
Failed to cast managedObject to REMCDSavedReminder {objectID: %@}
Failed to get remObjectID from REMCDSavedReminder {objectID: %@}
@32@0:8@16@24
allDay
ckDirtyFlags
ckIdentifier
ckNeedsInitialFetchFromCloud
ckNeedsToBeFetchedFromCloud
ckParentReminderIdentifier
ckZoneOwnerName
completionDate
creationDate
displayDateTimeZone
displayDateUpdatedForSecondsFromGMT
Tq,N,D
flagged
icsDisplayOrder
icsUrl
notes
T@"REMResolutionTokenMap",N,D,&
resolutionTokenMap_v2_JSON
spotlightIndexCount
startDate
account
T@"NSManagedObject",N,D,&
alarmStorage
T@"NSOrderedSet",N,D,&
children
ckCloudState
T@"REMCKCloudStateInModelVersionV5",N,D,&
hashtags
T@"REMCDListInModelVersionV5",N,D,&
parentAccount
parentReminder
T@"REMCDReminderInZREMCDOBJECT",N,D,&
recurrenceRules
sharedToMeReminderPlaceholder
T@"REMCDReminderInZREMCDREMINDER",N,D,&
reminders
T@"NSMutableOrderedSet",N,D,&
remindersInZREMCDREMINDER
currentLocalVersion
inCloud
latestVersionSyncedToCloud
localVersionDate
reminderInZREMCDREMINDER
savedAttachment
performPostMigrationDataUpdate(in:)
[%s|%s] Did fetch identifier of all REMCDList {listIdentifiers.count: %{public}ld, cumulative elapsedSeconds: %f}
[%s|%s] Did copy reminders from ZREMCDOBJECT SQL table to ZREMCDREMINDER SQL table {list.identifier: %{public}s, topLevelReminders.count: %{public}ld, subtasks.count: %{public}ld, cumulative elapsedSeconds: %f}
[%s|%s] Failed to fetch moID of parentReminder {list.identifier: %{public}s, parentReminderIdentifier: %{public}s}
[%s|%s] Did fetch NSManagedObjectID of reminders in ZREMCDOBJECT SQL table {list.identifier: %{public}s, reminders.count: %{public}ld, cumulative elapsedSeconds: %f}
[%s|%s] Failed to set parentReminder because parentReminder.identifier is nil {list.identifier: %{public}s, reminder.identifier: %{public}s}
_TtC7remindd17RDLocationManager
queue
q_locationManager
v40@0:8@16q24@32
startMonitoring: %s, authStatus: %{public}s
 conservativeEntry:
stopMonitoring: %s
didChangeAuthorization
com.apple.remindd.RDLocationManagerDelegate.
RDLocationManagerDelegate: Couldn't create os_transaction_t for %{public}s
os_transaction RELEASE {name: com.apple.remindd.RDLocationManagerDelegate.%{public}s}
os_transaction INIT {name: com.apple.remindd.RDLocationManagerDelegate.%{public}s}
didChangeAuthorization: {status: %{public}s}
monitoringDidFailFor: {region=%s, error=%s}
didFailWithError: %s
didDetermineState: {state=%s, region=%@}
didExitRegion: %@
RDLocationAlarmProducer didExitRegion: %@
didEnterRegion: %@
RDLocationAlarmProducer didEnterRegion: %@
Radius less than minimum:%s for regionToMonitor:%s
locationManagerDidStart
locationManagerDidStart, reconciling all geofences
daemonLocationBundle() does not have a URL for location bundle, using Bundle.main instead. Location services will not work. This is expected for simulator.
daemonLocationBundle() cannot locate bundle at %s, using Bundle.main instead. Location services will not work. This is expected for simulator.
daemonLocationBundle() successfully obtained from from %s
remindd.RDLocationManager
CLLocationManagerDelegate
v28@0:8@16i24
v40@0:8@"CLLocationManager"16@"CLLocation"24@"CLLocation"32
v32@0:8@"CLLocationManager"16@"NSArray"24
v32@0:8@"CLLocationManager"16@"CLHeading"24
B24@0:8@"CLLocationManager"16
v40@0:8@"CLLocationManager"16q24@"CLRegion"32
v40@0:8@"CLLocationManager"16@"NSArray"24@"CLBeaconRegion"32
v40@0:8@"CLLocationManager"16@"CLBeaconRegion"24@"NSError"32
v40@0:8@"CLLocationManager"16@"NSArray"24@"CLBeaconIdentityConstraint"32
v40@0:8@"CLLocationManager"16@"CLBeaconIdentityConstraint"24@"NSError"32
v32@0:8@"CLLocationManager"16@"CLRegion"24
v32@0:8@"CLLocationManager"16@"NSError"24
v40@0:8@"CLLocationManager"16@"CLRegion"24@"NSError"32
v28@0:8@"CLLocationManager"16i24
v24@0:8@"CLLocationManager"16
v32@0:8@"CLLocationManager"16@"CLVisit"24
originalHashtagID
Reset babysitter for {waiterID: %{public}s, event: %{public}s}
daSymbolicColorName
ckSymbolicColorName
Can't construct REMColor from invalid JSON
_TtC7remindd33REMSavedReminderStorageCDIngestor
%{public}s: '\REMCDSavedReminder.metadata' should not be nil at the end of 'merge(storage:into:changedValueKeys:optionalCoordinator:)' {objectID: %{public}@}
%{public}s: Failed to merge attachments because 'optionalCoordinator' is nil {objectID: %{public}@}
%{public}s: Can't merge saved attachment for saved reminder because cdSavedAttachment.remObjectID is nil {cdSavedReminder.remObjectID: %@, cdSavedAttachment.objectID: %@}
%{public}s: Removing saved attachment from saved reminder {cdSavedReminder.remObjectID: %@, cdSavedAttachment.objectID: %@}
REMSavedReminderStorageCDIngestor:establishRelationship(onStorage:into cdSavedReminder:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}
Updating cdSavedReminder.template {cdSavedReminder: %{public}s, cdTemplate: %{public}s}
Updating cdSavedReminder.account {cdSavedReminder: %{public}s, cdAccount: %{public}s}
%{public}s: cdSavedReminder.account is nil {cdSavedReminder.remObjectID: %@}
%{public}s: cdSavedReminder.template is nil {cdSavedReminder.remObjectID: %@}
_TtC7remindd20RDXPCBarebonesDaemon
Failed to fetch manual sort hint of templates {error: %s}
You should not try to create a CSL using the fetchSmartList API
Found REMCDSmartList with nil `.account` when populating REMSmartListsDataViewInvocationResult
Failed to ingest CD account to account storage when populating REMSmartListsDataViewInvocationResult
_TtC7remindd34RDIntentsRelevantShortcutsHandling
com.apple.remindd.intentsRelevantShortcutsHandling
RelevantShortcuts setting %ld shortcuts
os_transaction INIT {name: com.apple.remindd.todayEngine.start}
RelevantShortcuts set %ld shortcuts
RelevantShortcuts unable to set shortcuts because %s
os_transaction RELEASE {name: com.apple.remindd.intentsRelevantShortcutsHandling}
notificationUserInfoAccountObjectIDKey
notificationUserInfoAccountTypeKey
notificationUserInfoPropertyNameKey
notificationUserInfoPropertyValueKey
l_observers
l_cancellables
Trying to remove observer to RDAccountPropertiesNotifier but input observer is nil
RDAccountPropertiesNotifier cannot unobserve as the observer is not found {uuid: %s}
RDAccountPropertiesNotifier removed observer {uuid: %s}
Trying to add observer to RDAccountPropertiesNotifier but input observer is nil
RDAccountPropertiesNotifier added observer {uuid: %s}
Received RDStoreControllerREMAccountPropertiesDidUpdate has no userInfo
Received RDStoreControllerREMAccountPropertiesDidUpdate has no account REMObjectID in the userInfo
Received RDStoreControllerREMAccountPropertiesDidUpdate has no account type in the userInfo
Received RDStoreControllerREMAccountPropertiesDidUpdate has no property name in the userInfo
objectID
type
Cannot convert to ICCloudContextSyncReason from unknown REMXPCSyncInterfaceSyncReason: %s
_TtC7remindd35RDExecutionIntervalThrottlingPolicy
yyyy-MM-dd hh:mm:ss
RDExecutionIntervalThrottlingPolicy: Updated last executed date {identifier: %{public}s, date: %{public}s}
RDExecutionIntervalThrottlingPolicy: Calculating reset date {identifier: %{public}s, lastExecuted: %{public}s, result: %{public}s}
SerializationVersion
REMCDManualSortHint+CloudKit: newlyCreatedRecord(): {ckIdentifier: %{public}s, listTypeRawValue: %{public}hd}
HintDataIncludingRemindersInPrimaryAccountOnlyAsBytes
HintDataIncludingRemindersInPrimaryAccountOnlyAsAsset
HintDataExcludingRemindersInLocalAccountAsBytes
HintDataExcludingRemindersInLocalAccountAsAsset
newlyCreatedRecord: Failed to serialize/deserialize hintData in REMCDManualSortHint {ckIdentifier: %{public}s, list type: %s, listID: %s, error: %{public}s}
Unable to support REMCDManualSortHint serialization version introduced in a subsequent release
REMCDManualSortHint.mergeData(from record:accountID:) will insert pending post-save action '.notify_SharedToMeListPinnedStateDidBecomeStale' {ckIdentifier: %{public}s, eTag: %{public}s}
Skip merging for different in eTag
mergeData: Invalid remoteHintData for REMCDManualSortHint {ckIdentifier: %{public}s, list type: %s, listID: %s, dataSerializationVersion: %s, error: %{public}s}
mergeData: Invalid hintData in REMCDManualSortHint {ckIdentifier: %{public}s, list type: %s, listID: %s, error: %{public}s}
name
remindd.RDUserNotificationCenter
userNotificationCenter willPresent
Unknown notification action. {actionIdentifier: %s}
Unknown notification type from content. {content: %@}
Forwarding .shareListUpdateNotification response to sharedListUpdateNotificationDelegate
Forwarding .assignmentNotification response to assignmentNotificationDelegate
Forwarding .beforeFirstUnlock notification response to beforeFirstUnlockReminderDelegate
remindd didn't expect to receive actions from .caldavSharedList. {response: %@}
remindd didn't expect to receive actions from .todayNotificationBadge. {response: %@}
remindd didn't expect to receive actions from .todayNotification. {response: %@}
Forwarding .reminderAlarm notification response to reminderAlarmDelegate
_TtC7remindd24RDUserNotificationCenter
reminderAlarmDelegate
beforeFirstUnlockReminderDelegate
assignmentNotificationDelegate
sharedListUpdateNotificationDelegate
v52@0:8@16@24@32B40@?44
v16@?0@"NSArray"8
RDUserNotificationRetainingReferences
Issuing: notificationCenter.add(request) {identifier: %{public}s, skipBanner: %{public}s, userInfo: %s}
Strategy: no existing notification {identifier: %{public}s, useReplaceInsteadOfAdd: false}
Unable to get UNMutableNotificationContent from UNNotificationContent {notification: %@}
Strategy: !alreadyRetained {identifier: %{public}s, useReplaceInsteadOfAdd: false}
Strategy: alreadyRetained && !contentChanged, nothing to do {identifier: %{public}s}
Issuing: replaceContentForRequest() {identifier: %{public}s}
Strategy: alreadyRetained && contentChanged {identifier: %{public}s, useReplaceInsteadOfAdd: true}
Strategy: alreadyRetained && recurring reminder {identifier: %{public}s, useReplaceInsteadOfAdd: false}
Determine useReplaceInsteadOfAdd {identifier: %s, deliveredNotifications: %s}
retainNotification content replaced {error: %s}
retainNotification request added {error: %s}
Issuing: showNotification notificationCenter.add(request) {identifier: %{public}s}
showNotification request added {error: %s}
userNotificationCenter openSettingsForNotification, but we don't have any settings pane yet so bye ;)
Unknown notification authorization status
User denied notification access
User hasn't been prompted for notification access
Unable to create UNMutableNotificationContent from UNNotificationContent
Issuing: replaceContentForRequest {identifier: %{public}s}
Issuing: removeDeliveredNotifications since retain count is zero {identifier: %{public}s}
releaseNotification: {identifier: %{public}s, userInfo = %s}
releaseNotification: replaced content {identifier: %{public}s, error: %s}
UNUserNotificationCenterDelegate
v40@0:8@"UNUserNotificationCenter"16@"UNNotification"24@?<v@?Q>32
v40@0:8@"UNUserNotificationCenter"16@"UNNotificationResponse"24@?<v@?>32
v32@0:8@"UNUserNotificationCenter"16@"UNNotification"24
NSObject
_TtC7remindd21RDAccountManualSortID
ckContainerID
localUUID
<RDAccountManualSortID: {ckContainerID: 
Failed to fetch manual sort hint {list type: %s, listID: %s, error: %s}
REMCDReminder.displayDateSortDescriptor should not be nil
Failed to fetch specific host account when getting manualSortIDAdapter for {accountID: %{public}@, error: %{public}s}
Failed to fetch signed-in accounts when getting manualSortIDAdapter for {error: %{public}s}
No primary active CloudKit account found when trying to fetch reminders in REMRemindersListDataView invocation with .manualWithSortHint sorting style
Failed to fetch reminders from reminderLites. Not returning initial reminder {error: %{public}s}
fetchRemindersDue cdReminders %s
fetchRemindersDue predicate %s
fetchRemindersDue objectIDs %s
Attempted to fetch duplicate initial reminders {subtask.objectID: %{public}@}
Attempted to fetch duplicate initial reminders {reminderLite.objectID: %{public}@}
Failed to get remObjectID from REMCDReminder {objectID: %@}
You should not try to create a CSL from REMRemindersListDataView+RDInvocable
Failed to fetch REMCDSmartList for pre-defined smart list type {smart list type: %{public}s, error: %{public}s}
REMCDSmartList for pre-defined smart list type not found {pre-defined smart list type: %{public}s}
Matching manual sort hint not found {list type: %s, listID: %s, accountObjectID: %s, error: %s}
%{public}s; UserInfo=%s; PublicUserInfo=%{public}s
_TtC7remindd25RDReplicaManagerUtilities
Skipping replica manager update. Version in database is newer {inputVersion: %llu, currentVersion: %llu}
_TtC7remindd19RDManualSortIDCache
cacheQueue
cacheContext
accountChangesSubscription
RDManualSortIDCache starts observing account changes
RDManualSortIDCache cancels observing account changes
Dropping unsupported criterion for searching REMCDList. {criterion: %s}
Parent list has nil remObjectID {list moid: 
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/Store/REMCDList+Fetching.swift
REMCDList's parentList is unexpectedly deleted {identifier: %s}
List has nil account {listID: 
Account has nil remObjectID {account moid: 
_TtC7remindd29RDDACalDAVShareRequestHandler
RDDACalDAVShareRequestHandler: Creating a DADREMShareResponseDelegate to call onto respondToShareRequest() {DATransaction.id: %s, accountID: %s, calendarURL: %s}
DADREMShareResponseDelegate has completed, but DATransaction was nil?! {error: %s}
DADREMShareResponseDelegate has completed with DATransaction {transactionId: %s, error: %s}
DADREMShareResponseDelegate has done calling XPC completion, but DATransaction was nil?! {error: %s}
DADREMShareResponseDelegate has done calling XPC completion with DATransaction {transactionId: %s, error: %s}
RDDACalDAVShareRequestHandler: Attempted to call DADREMShareResponseDelegate when DataAccess is disabled, aborting...
RDDACalDAVShareRequestHandler: Trying to call DADREMShareResponseDelegate when DataAccess is not yet up and running, aborting...
RDDACalDAVShareRequestHandler: Trying to call DADREMShareResponseDelegate when DADAgentManager is not yet set up properly, aborting...
RDDACalDAVShareRequestHandler: Trying to call DADREMShareResponseDelegate when DADAgentManager has no active accounts, aborting...
_TtCE7reminddCO19ReminderKitInternal24REMRemindersListDataView15GroupInvocationP33_5EA99FF5FE7301BEB158BAF5BFFE0E3319PolymorphicListItem
unknown or unsupported REM object type for PolymorphicListItem
_TtC7remindd18RDDaemonController
@32@0:8@16@?24
@24@0:8@?16
v40@0:8@16@?24@?32
remindd.RDDaemonController
REMDaemonController
@"<REMXPCChangeTrackingPerformer>"32@0:8@"NSString"16@?<v@?@"NSError">24
@"<REMXPCDebugPerformer>"32@0:8@"NSString"16@?<v@?@"NSError">24
@"<REMXPCDebugPerformer>"24@0:8@?<v@?@"NSError">16
@"<REMXPCStorePerformer>"32@0:8@"NSString"16@?<v@?@"NSError">24
v40@0:8@"NSString"16@?<v@?@"<REMXPCStorePerformer>">24@?<v@?@"NSError">32
@"<REMXPCSyncInterfacePerformer>"32@0:8@"NSString"16@?<v@?@"NSError">24
v40@0:8@"NSString"16@?<v@?@"<REMXPCSyncInterfacePerformer>">24@?<v@?@"NSError">32
@"<REMXPCIndexingPerformer>"32@0:8@"NSString"16@?<v@?@"NSError">24
v40@0:8@"NSString"16@?<v@?@"<REMXPCIndexingPerformer>">24@?<v@?@"NSError">32
_TtC7remindd37RDNewlySharedToMeTagAutoConvertRunner
 RDNewlySharedToMeTagAutoConvertRunner: CoreData error fetching REMCDReminders: {error: %{public}s}
 RDNewlySharedToMeTagAutoConvertRunner: Error autoconverting hashtags. Not deleting activity {error: %{public}s}
 RDNewlySharedToMeTagAutoConvertRunner: Error autoconverting hashtags. Deleting activity anyway {error: %{public}s}
 RDNewlySharedToMeTagAutoConvertRunner: REMCKSharedEntitySyncActivity[%{public}s] had ckIdentifier[%{public}s] that did not correspond to a reminder; deleting activity
 RDNewlySharedToMeTagAutoConvertRunner: REMCKSharedEntitySyncActivity[%{public}s] did not have a ckIdentifier; deleting
Found multiple instances of REMCDSavedReminder with identical objectID {objectID: %@, matches: %ld}
Saved reminder missing account {error: 
Completed by date buckets must use the default completion date descending sorting style
Completed by date buckets must show completed
Completed by date buckets cannot fetch subtasks
{shareResponse: declinded, calendarURL: 
{shareResponse: accepted, calendarURL: 
_TtC7remindd19RDXPCStorePerformer
shareRecordIDToRootRecordID
shareRecordIDToRootRecordIDLock
v104@0:8@16@24@32@40@48@56@64@72Q80B88B92@?96
validatePhantomObjects: Error caught {error: %{public}s}
validatePhantomObjects: Done validating {elapsed: %.*f s, shouldRepair: %{public}s, childrenObjectIDs: %{public}s, phantomIDs: %{public}s}
validatePhantomObjects: Validating {shouldRepair: %{public}s, childrenObjectIDs: %{public}s}
validatePhantomObjects: {objectsWithConcealedParent: %{public}s}
validatePhantomObjects: {disconnected: %{public}s}
repairPhantomObjects: Saving repaired objects... {inputCount: %ld, disconnectedCount: %ld, unsupportedCount: %ld}
repairPhantomObjects: Couldn't get an REMCDObject, skipping {moid: %{public}@}
repairPhantomObjects: Repaired effectiveMiniumSupportedVersion for {remObjectID: %{public}s, newValue: %{public}s}
repairPhantomObjects: Repaired markedForDeletion state for {remObjectID: %{public}s}
repairPhantomObjects: Attempted to repair a non-phantom object which is already concealed {remObjectID: %{public}s}
repairPhantomObjects: Unknown parent key to try to unset {key %{public}s, remObjectiD: %{public}s}
xpcPerformer.isManagedAccount: Error when looking up the ACAccount {acAccountID: %{public}s, error: %{public}s}
xpcPerformer.isManagedAccount: REMError when looking up the ACAccount {acAccountID: %{public}s, error: %{public}s}
xpcPerformer.isManagedAccount: ACAccount.rem_isManagedAppleID result {acAccountID: %{public}s, isManaged: %{bool}d, displayAccount: %{public}@}
Missing account utils for requesting to delete local data.
Missing account utils for requesting to initiate merging local data into sync data {acAccountIdentifier: 
Missing account utils for removing orphaned accounts
Missing account utils for updating account {acAccountID: 
Missing account utils for updating account database
notifyOfInteraction: {personHandle: %s, aliases: %s, contactIdentifier: %s}
Putting event {identifier: %s, reader: %s}
INPerson has no phone numbers or emails. Skipping {person: %@}
INPerson alias has missing value. Skipping {person: %@, handle: %@}
notifyOfInteraction: unknown INPersonHandleType: %{public}ld
INPerson has unknown alias type. Skipping {person: %@, handle: %@}
Cloud Context is not intialized
v28@?0@"NSError"8B16@"NSString"20
com.apple.remindd.RDXPCStorePerformer.acceptShare
Failed to create share. {error: %s}
createShareForObject: Tried to fetch non-existent object {remObjectID: %{public}@}
v24@?0@"CKShare"8@"NSError"16
createShareForObject: Fetching object with ID {objectID: %{public}@}
createShareForObject: Adding mapping for share recordID {recordID: %{private}@}
Found multiple instances of object with identifier: 
Failed to fetch share object. {error: %s}
fetchShareForObject: Tried to fetch non-existent object {remObjectID: %{public}@}
fetchShareForObject: Fetching object with ID {objectID: %{public}@}
mergePolicyTestSaveQueue
Will not save replica managers. Bundle ID is missing
(daemon) SAVE START {author: %{public}s, accountStorage.count: %ld, listStorage.count: %ld, smartListStorages.count: %ld, reminderStorage.count: %ld, changedKeys.count: %ld, replicaManagers.count: %ld
(daemon) SAVE FAIL {saveError: %@}
Converted saveError to remError {saveError: %@, remError: %@}
(daemon) SAVE END {author: %{public}s, accountStorages.count: %ld, listStorages.count: %ld, smartListStorages.count: %ld, reminderStorages.count: %ld, replicaManagers.count: %ld}
Error performing invocation {invocation.name: %s, error: %@}
Invocation does not confrom to RDInvocable {invocation: 
Invocation does not conform to RDInvocable {invocation: %@}
Error performing invocation {invocation: %{public}@, client: %{public}s, error %{public}s}
Finished performing {invocation: %{public}@, client: %{public}s}
Performing invocation {invocation: %{public}@, client: %{public}s, thread: %{public}s, qos: %ld}
Error performing store controller invocation {invocation: %{public}@, client: %{public}s, error %{public}s}
Finished performing store controller invocation  {invocation: %{public}@, client: %{public}s}
Performing store controller invocation {invocation: %{public}@, client: %{public}s, thread: %{public}s, qos: %ld}
Failed to perform fetch {error: %s}
Executing fetch request {fetchRequest: %@}
Finished performing query in daemon {fetchRequest: %@, result: %@}
Performing query in daemon {fetchRequest: %@}
remindd.RDXPCStorePerformer
Deallocating RDXPCStorePerformer
REMXPCStorePerformer
v32@0:8@"REMFetchRequest"16@?<v@?@"REMFetchResult"@"NSError">24
v32@0:8@"REMStoreInvocation"16@?<v@?@"REMStoreInvocationResult"@"NSError">24
v32@0:8@"REMObjectID"16@?<v@?@"REMReplicaManagerSerializedData"@"NSError">24
v40@0:8@"REMObjectID"16@"NSString"24@?<v@?@"NSDictionary"@"NSError">32
v32@0:8@"REMDistributedEvaluationCollectionOptions"16@?<v@?@"NSData"@"NSError">24
v104@0:8@"NSArray"16@"NSArray"24@"NSArray"32@"NSArray"40@"NSArray"48@"NSDictionary"56@"NSDictionary"64@"NSString"72Q80B88B92@?<v@?@"NSError">96
v32@0:8@"REMObjectID"16@?<v@?@"CKShare"@"NSError">24
v40@0:8@"REMObjectID"16@"NSData"24@?<v@?@"CKShare"@"NSError">32
v40@0:8@"CKShare"16@"NSString"24@?<v@?@"NSError">32
v32@0:8@"CKShareMetadata"16@?<v@?B@"NSString"@"NSError">24
v32@0:8@"REMObjectID"16@?<v@?@"REMTemplateContentAttributes"@"NSError">24
v40@0:8@"REMObjectID"16@"REMTemplatePublicLinkConfiguration"24@?<v@?@"REMObjectID"@"NSError">32
v32@0:8@"NSUUID"16@?<v@?@"REMObjectID"@"NSError">24
v28@0:8B16@?<v@?BB@"NSError">20
v36@0:8@"NSString"16B24@?<v@?BB@"NSError">28
v24@0:8@?<v@?B@"NSError">16
v32@0:8@"NSString"16@?<v@?@"<REMXPCSuggestedAttributesPerformer>"@"NSError">24
v32@0:8@"REMObjectID"16@?<v@?@"NSNumber"@"NSError">24
v36@0:8@"NSArray"16B24@?<v@?@"NSArray"@"NSError">28
_TtC7remindd12RDSyncPoller
pollBlock
eventStream
nil lastSyncPoll. Polling
lastSyncPoll < throttingInterval. Not Polling {lastSyncPoll: %{public}s, throttingInterval: %.*f}
lastSyncPoll > configurationInterval. Polling {lastSyncPoll: %{public}s, throttingInterval: %.*f}
Polling sync did finish {error: %{public}s}
HashtagLabelsReferencedByCustomSmartListFiltersInvocation: failed to decode filter {error: %s}
HashtagLabelsReferencedByCustomSmartListFiltersInvocation: failed to decode cache {error: %s}
HashtagLabelsReferencedByCustomSmartListFiltersInvocation: failed to encode cache {error: %s}
HashtagLabelsReferencedByCustomSmartListFiltersInvocation: saving cache {dataSize: %ld}
Unexpected nil name REMCDHashtagLabel from AllHashtagLabelsInvocation {mid: %@}
missing storeController
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/SuggestedAttributes/REMSuggestedAttributesFeatureExtractor+RDInvocable.swift
title,creationDate,list,dueWeekDay,location,intentWord
_TtC7remindd24RDTemplateOperationQueue
isHandlingOperationQueueItems
babysitterOperationHandleIncompleteOperationQueueItems
babysitterOperationHandleIncompleteOperationQueueItemsOnLaunch
_TtCC7remindd24RDTemplateOperationQueueP33_03AEDCAF47C2C623D845E2853D7EEB6713BabysitTarget
com.apple.remindd.RDTemplateOperationQueue.babysitter
RDTemplateOperationQueue: Failed to save managed object context after completing template operation queue item. {templateOperationQueueItem.objectID: %{public}@, error: %{public}s}
RDTemplateOperationQueue: Failed to retrieve template operation queue item by objectID. {templateOperationQueueItem.objectID: %{public}@}
RDTemplateOperationQueue: Completed template operation queue item with top priority. {templateOperationQueueItem.objectID: %{public}@}
RDTemplateOperationQueue: Failed to create template operation for template operation queue item. {templateOperationQueueItem.objectID: %{public}@}
RDTemplateOperationQueue: Failed to complete template operation queue item. {templateOperationQueueItem.objectID: %{public}@, error: %{public}s}
RDTemplateOperationQueue: Handling incomplete template operation queue item with top priority. {templateOperationQueueItem: %{public}@}
RDTemplateOperationQueue: Cannot create template operation without primary active CloudKit account {operationType: %s, templateObjectID: %{public}@, listObjectID: %{public}@}
RDTemplateOperationQueue: Failed to decode '\REMCDTemplateOperationQueueItem.configurationData' as 'REMTemplateConfiguration_Codable'. {templateOperationQueueItem.objectID: %{public}@, error: %{public}s}
com.apple.remindd.RDTemplateOperationQueue
RDTemplateOperationQueue.handleIncompleteOperationQueueItems
RDTemplateOperationQueue: Began handling template operation queue items
RDTemplateOperationQueue: Failed to fetch incomplete template operation queue item with top priority. {error: %{public}s}
RDTemplateOperationQueue: Failed to batch delete completed template operation queue items. {error: %{public}s}
RDTemplateOperationQueue: Batch deleted completed template operation queue items. {deletionCount: %ld}
RDTemplateOperationQueue: Failed to batch complete all incomplete template operation queue items. {error: %{public}s}
RDTemplateOperationQueue: Blocked by babysitter. Batch completed all incomplete template operation queue items. {affectedCount: %ld, isOnLaunch: %s}
RDTemplateOperationQueue: Finished handling template operation queue items {elapsedSeconds: %f}
RDTemplateOperationQueue: Did set up subscriptions
%s: Failed to insert template operation queue item for batch deleting cached public templates {error: %{public}s}
%s: Inserted template operation queue item for batch deleting cached public templates
downloadableCloudConfiguration
_TtC7remindd40RDICCloudConfigurationUpdaterXPCActivity
_TtC7remindd47RDICCloudConfigurationUpdaterXPCActivityFactory
ICCCU: Starting ICCloudConfigurationUpdater
ICCCU: Unexpectedly having an existing non-nil scheduler (xpcActivity) when trying to create and schedule a new one
ICCCU: Unexpectedly could not create an background scheduler (xpcActivity) when trying to schedule a new one
ICCCU: Unexpectedly having pending activity on the background scheduler (xpcActivity) when trying to create and schedule a new one
ICCCU: Running scheduled background activity, let's check if we should download remote cloud configuration file
ICCCU: lastCloudConfigurationDownload == nil, downloading remote config
ICCCU: lastCloudConfigurationDownload < throttingInterval, not downloading remote config {lastCloudConfigurationDownload: %{public}s, throttingInterval: %.*f}
ICCCU: lastCloudConfigurationDownload > configurationInterval, should download remote config {lastCloudConfigurationDownload: %{public}s, throttingInterval: %.*f}
ICCCU-XPCActivity: Updating scheduler (xpcActivity) criteria {inputDelay: %f, randomizedDelay: %f}
ICCloudConfigurationUpdater
_TtC7remindd31RDPublicCloudDatabaseController
isInternetReachable
$__lazy_storage_$_ckContainerWithPublicDatabase
%{public}s: Fetching CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}
%{public}s: Will fetch publicCloudObject from public cloud database {recordName: %{public}s}
%{public}s: [fetchRecordsResultBlock] Failed to fetch CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}
%{public}s: [perRecordResultBlock] Failed to fetch CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}
%{public}s: Failed to initialize publicCloudObject from CKRecord {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}
%{public}s: Did initialize publicCloudObject from CKRecord {recordName: %{public}s, elapsedSeconds: %f}
%{public}s: Did fetch CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}
%{public}s: Deleting CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}
%{public}s: Will delete CKRecord for publicCloudObject {recordName: %{public}s}
%{public}s: [modifyRecordsResultBlock] Failed to delete CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}
%{public}s: [perRecordDeleteBlock] Failed to delete CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}
%{public}s: Did delete CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}
%{public}s: Failed to create CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}
%{public}s: Saving CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}
%{public}s: Will save CKRecord for publicCloudObject {recordName: %{public}s}
%{public}s: [modifyRecordsResultBlock] Failed to save CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}
%{public}s: [perRecordSaveBlock] Failed to save CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}
%{public}s: Did save CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}
_TtC7remindd19RDObjectDescription
_TtC7remindd23RDLocationAlarmProducer
locationManager
alarmDatabaseDidChange, reconciling all geofences
Reminder has no displayDate, firing geofence as active
Reminder has displayDate that's in the past or same day, firing geofence as active as usual {displayDate.date: %s}
Reminder has displayDate that's in the future, firing geofence as passive instead of active. {displayDate.date: %s}
locationManager hasn't started. Not reconciling geofences.
reconcileAllGeofences setToAdd = %s
reconcileAllGeofences setToRemove = %s
reconcileAllGeofences existingSet = %s
reconcileAllGeofences desiredSet = %s
locationManager started, reconciling all geofences
Starting location alarm producer {producer: %s}
remindd.RDLocationAlarmProducer
com.apple.remindd.RDLocationAlarmProducer.
RDLocationAlarmProducer: Couldn't create os_transaction_t for %{public}s
os_transaction INIT {name: com.apple.remindd.RDLocationAlarmProducer.%{public}s}
os_transaction RELEASE {name: com.apple.remindd.RDLocationAlarmProducer.%{public}s}
unknown proximity
RDICCloudContextCryptoStringProviding
@"NSString"32@0:8@"NSString"16@"NSData"24
InitiallyNilError
T@"NSError",N,R
NilValueError
InvalidValueError
AccountAbsentError
@64@0:8@16q24@32@40@?48@?56
successHandler
errorHandler
currentValueSubject
T@"<_TtP7remindd20ObservingAccountInfo_>",N,R,Vaccount
T@"OS_dispatch_queue",N,R,VcallbackQueue
_TtCC7remindd29RDAccountPersonIDSaltObserverP33_E6769D87973B1BC8029E74FBB6A323F311AccountInfo
T@"REMObjectID",N,R,VobjectID
Tq,N,R,Vtype
remindd.RDAccountPersonIDSaltObserver
<RDAccountPersonIDSaltObserver uuid:
@"NSUUID"16@0:8
_TtC7reminddP33_B5AC59DA85A1771DB62C8FFA793A471252_RDManualSortIDPrimaryCloudKitAccountHashKeyProvider
hashKeyForManualSortID
_TtC7remindd37RDManualSortIDUnitTestHashKeyProvider
cdAccount
We don't currently support providing hash key other than cloudkit accounts. This log indicates there's some programming errors to pass on an incorrect account object {account: %{public}s}
_TtC7remindd20RDDynamicXPCActivity
shouldDefer
asyncHandler
l_pendingCriteria
RDDynamicXPCActivity UPDATE END pendingCriteria == newCriteria {identifier: %{public}s}
RDDynamicXPCActivity UPDATE START {identifier: %{public}s, newCriteria: %{public}s}
RDDynamicXPCActivity UPDATE executed on deallocated instance {identifier: %{public}s}
RDDynamicXPCActivity unexpected state {identifier: %{public}s, state: %ld}
RDDynamicXPCActivity should defer {identifier: %{public}s}
RDDynamicXPCActivity UPDATE
RDDynamicXPCActivity UPDATE RUN {identifier: %{public}s
RDDynamicXPCActivity UPDATE END Updated {identifier: %{public}s, newCriteria: %{public}s}
RDDynamicXPCActivity RUN ERROR. setState(XPC_ACTIVITY_STATE_CONTINUE) failed {identifier: %{public}s}
RDDynamicXPCActivity RUN START {identifier: %{public}s}
RDDynamicXPCActivity RUN ERROR. setState(XPC_ACTIVITY_STATE_DONE) failed {identifier: %{public}s}
RDDynamicXPCActivity RUN END {identifier: %{public}s, completionStatus: %{public}s}
Clearing l_pendingCriteria
RDDynamicXPCActivity UNREGISTER {identifier: %{public}s}
RDDynamicXPCActivity CHECKIN executed on deallocated instance {identifier: %{public}s}
RDDynamicXPCActivity CHECKIN ERROR unexpected state {identifier: %{public}s, state: %ld}
RDDynamicXPCActivity CHECKIN
RDDynamicXPCActivity CHECKIN RUN {identifier: %{public}s}
RDDynamicXPCActivity CHECKIN CHECKIN {identifier: %{public}s}
RDDynamicXPCActivity registered more than once {identifier: %{public}s}
allCheckedInActivities called more than once
_TtC7remindd51RDTemplateOperationCreateOrUpdateTemplatePublicLink
%{public}s: Failed to revert template's mostRecentPublicLinkUpdateRequestDate {templateObjectID: %{public}@, hasPublicLinkPriorToTemplateOperation: %{public}s, elapsedSeconds: %f}
%{public}s: Reverted template's mostRecentPublicLinkUpdateRequestDate {templateObjectID: %{public}@, hasPublicLinkPriorToTemplateOperation: %{public}s, elapsedSeconds: %f}
%{public}s: Failed to generate content for template's public link. {templateObjectID: %{public}@, hasPublicLinkPriorToTemplateOperation: %{public}s, error: %{public}s, elapsedSeconds: %f}
%{public}s: Generated content for template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, elapsedSeconds: %f}
%{public}s: Failed to revert template's mostRecentPublicLinkUpdateRequestDate {templateObjectID: %{public}@, hasPublicLinkPriorToTemplateOperation: %{public}s, error: %{public}s, elapsedSeconds: %f}
%{public}s: Failed to upload content of template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, error: %{public}s, elapsedSeconds: %f}
%{public}s: Failed to save template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, error: %{public}s, elapsedSeconds: %f}
%{public}s: Saved template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, publicLink: %{public}s, elapsedSeconds: %f}
%{public}s: Uploaded content of template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, elapsedSeconds: %f}
_TtC7reminddP33_47683DF374725731FC8E32F1ED7CD18633RDRootEntityNameByEntityNameCache
cacheKey
ManagedObjectContext missing persistentStoreCoordinator -- Can't get REMFetchResultToken {managedObjectContext: 
ManagedObjectContext missing persistentStoreCoordinator -- Can't get REMFetchResultToken {managedObjectContext: %@}
Store has no transactions. Not getting tokens {store: %@}
Failed to fetch object with ID {moc: %@, objectID: %@, error: %s}
The objectID's store does not exist in the PSC of MOC. This is an account store just got removed? {moc: %@, psc: %s, storeID: %s, objectID: %@, error: %s}
Tried to fetch transactions from managedObjectContext without persistentStoreCoordinator {managedObjectContext: 
Tried to fetch transactions from managedObjectContext without persistentStoreCoordinator {managedObjectContext: %@}
Failed to get transaction from CoreData. No error. {invocation: 
Failed to get transaction from CoreData. No error. {invocation: %@}
Fetched all transactions {allTransactions.count: %ld, sourceToken: %@}
Fetched transactions for store {transactions.count: %ld, store.identifier: %s, store.url: %s, historyToken: %s}
DADBuddyStateObserver(Swift extension) hasPassedBuddyFuture fulfilled
DADSystemAvailabilityChecker(Swift extension) systemAvailableFuture fulfilled
_TtC7remindd20RDDisplayDateUpdater
significantTimeNotificationStream
remindd.RDDisplayDateUpdater
UpdateDisplayDates END {store: %@}
UpdateDisplayDates BEGIN {store: %@}
Failed to update display dates {error: %s}
Not saving since there are no changes {totalUpdatedCount: %ld}
UpdateDisplayDates: Saving last objects {updatedObjectsCount: %ld, totalUpdatedCount: %ld}
UpdateDisplayDates: Saving batch {updatedObjectsCount: %ld, totalUpdatedCount: %ld}
Updating display dates in all stores due to significant time change
REMCDSavedAttachment+CloudKit: mergeData(from:accountID:) Failed to update file asset {savedAttachment: %{public}s, error: %{public}s}
REMCDSavedAttachment+CloudKit: Unexpectedly got cdSavedAttachment.reminder == nil in newlyCreatedRecord() (key=.savedReminder) {savedAttachment: %{public}s}
REMCDSavedAttachment+CloudKit: newlyCreatedRecord() (key=.savedReminder) unsetting savedReminder CK reference as the saved attachment is markedForDeletion {savedAttachment: %{public}s}
REMCDSavedAttachment+CloudKit: newlyCreatedRecord() Failed to compute file URL {savedAttachment: %{public}s, error: %{public}s}
Saved reminder is marked for deletion but saved attachment is not {savedAttachmentID: %{public}s, savedReminderID: %{public}s}
Fixing broken references for saved attachment {savedAttachmentID: %{public}s, savedReminderID: %{public}s}
_TtC7reminddP33_D24FF474DB5580E044D1611A227FBE0734ReminderIDsMergeableOrderingHelper
orderingByListID
listsWithOrdering
_TtC7reminddP33_D24FF474DB5580E044D1611A227FBE0728ReminderIDsMergeableOrdering
orderingChanged
needsSortReminders
data
$__lazy_storage_$_orderedSet
minCompletionDate
custom smart list missing parent account
REMRemindersListBatchDeleteInvocation: updating REMCDList ordering {listID: %s, orderingChanged: %s, needsSortReminders: %s}
Failed to decode reminderIDsMergeableOrdering {error: %s}
ReminderIDsMergeableOrderingHelper orderedSet count: %ld -> %ld
Moving subtask IDs to reflect top level ordering. {subtaskIDs: %s, parentID: %s}
Found subtasks not to be deleted; make them top level instead. {subtaskID: %@, parentID: %s}
_TtC7remindd47RDStoreControllerMigrator_IsPinnedByCurrentUser
%s: END {store: %{public}s, updateCount = %{public}ld, elapsedSeconds: %{public}f}
_TtC7remindd8RDDaemon
xpcClientConnectionListener
disabledAccountsEventHandler
alarmEngine
todayEngine
timelineEngine
assignmentNotificationEngine
hashtagLabelUpdater
stalePinnedListsEventHandler
staleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler
templateOperationQueue
applicationShortcutEngine
coreSuggestionController
housekeepingActivityScheduler
cloudConfigurationUpdater
cloudSchemaCatchUpSyncController
syncActivityNotificationEngine
sharedInlineTagAutoConvertEngine
extraneousAlarmsCollector
manualSortHintUpdater
_TtC7remindd17RDBarebonesDaemon
Reminder barebones daemon started
xpcClientConnectionListener.
Reminder daemon started
RDDisabledAccountsEventHandler
remindd.RDDaemon
_TtC7remindd28RDImageDeduplicationActivity
_TtCC7remindd28RDImageDeduplicationActivity30RDImageDeduplicationExecutable
globalAnalytics
analytics
logPrefix
_TtCCC7remindd28RDImageDeduplicationActivity30RDImageDeduplicationExecutableP33_1753FA1DE56C6C0B2640C3779781310922PreprocessedAttachment
attachment
attachmentIdentifier
sourceURL
destinationURL
fileWasCopied
_TtCCC7remindd28RDImageDeduplicationActivity30RDImageDeduplicationExecutableP33_1753FA1DE56C6C0B2640C3779781310914LocalAnalytics
successes
failures
startTime
_TtCCC7remindd28RDImageDeduplicationActivity30RDImageDeduplicationExecutableP33_1753FA1DE56C6C0B2640C3779781310912CrashCleaner
_TtCC7remindd28RDImageDeduplicationActivityP33_1753FA1DE56C6C0B2640C3779781310948RDImageDeduplicationActivityExecutionDateStorage
[%{public}s] skipping execute because sentinel file exists
[%{public}s] configuration validation fail - cannot execute because configurations.imageDeduplicationApproximatePerRunDeleteLimit is 0
.imageDeduplicationComplete
RDImageDeduplicationActivity.execute
[%{public}s] finish execute()
bytesSuccessfullyHandled
com.apple.reminders.ImageDeduplication
[RDImageDeduplicationActivity] Successfully migrated %{public}ld attachments, finding %{public}ld duplicates, saving %{public}s. Took %s
[%{public}s] finished without deeming complete {errorEncountered: %{bool,public}d, quota remaining: %{public}ld}
[%{public}s] finished with some delete quota remaining: container deemed clean
[%{public}s] no delete limit left {perRunDeleteLimit: %{public}ld}
[%{public}s] Could not create destination directory for hashed attachments {accountID: %{public}@; error: %s}
[%{public}s] Error fetching attachments {error: %s}
[RDImageDeduplicationExecutable] Could not save managedObjectContext {error: %s, accountID: %{public}@}
[%{public}s] Migrated from {%s} to {%s} with sha512sum '%{public}s' {attachmentID: %{public}s}
[RDImageDeduplicationExecutable] Could not delete file <%s> after deduplication. Leaving in place {error: %s, attachmentID: %{public}s, accountID: %{public}@}
[RDImageDeduplicationExecutable] Could not copy file for deduplication. Skipping {error: %s, attachmentID: %{public}s, accountID: %{public}@}
[RDImageDeduplicationExecutable] Failed to migrate from {%s} because sha512Sum failed {attachmentID: %{public}s, accountID: %{public}@}
[RDImageDeduplicationExecutable] Attachment had null fileName {attachmentID: %{public}s, accountID: %{public}@}
[RDImageDeduplicationExecutable] Attachment had null identifier {managedObjectID: %{public}s, accountID: %{public}@}
[%{public}s] Cleaned after crash {accountID: %{public}s, attachmentID: %{public}s
[%{public}s] Purging attachment failed {accountID: %{public}s, attachmentID: %{public}s, error: %@}
[%{public}s] Attachment was not migrated {accountID: %{public}s, attachmentID: %{public}s}
[%{public}s] Invalid cache key {cacheKey: %{public}s
RDImageDeduplicationExecutionDateStorage.updateLastExecutedDate(for:) must work with RDImageDeduplicationActivity only {executable: %{public}s}
RDImageDeduplicationExecutionDateStorage.lastExecutedDate(for:) must work with RDImageDeduplicationActivity only {executable: %{public}s}
remindd.RDImageDeduplicationActivity
_TtC7remindd24REMListStorageCDIngestor
REMListStorageCDIngestor: merge(storage:into cdList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}
Failed to copy reminders from template to list because 'storage.accountID' does not belong a CloudKit account. {storage.objectID: 
, storage.templateID: 
REMListStorageCDIngestor: merge(storage:into cdList:...) Unhandled sharingStatus {objectID: %{public}@, sharingStatus.rawValue: %{public}ld}
Actually really doing nothing for a merge on .remindersICSDisplayOrderChanged
Actually really doing nothing for a merge on .reminderIDsOrderingHints
mergeOrderedSet(): REMCDList.reminderIDsMergeableOrdering data is nil. Serializing from inutput orderedSet directly. {objectID: %@}
mergeOrderedSet(): Failed to merge ordered set for list {list.objectID: %@, key: %s}: %s
mergeOrderedSet(): Merge not supported for REMCDList.reminderIDsMergeableOrdering for now, directly serializing from input orderedSet. {objectID: %@, count: %ld}
Serialized to json data from REMListStorage.reminderIDsMergeableOrdering during ingesting. {objectID: %@}
Removing sharee from list {list.objectID: %@, shareeobjectID: %@}
Removing calDAVNotification from list {list.objectID: %@, calDAVNotificationobjectID: %@}
Failed to copy reminders from template to list due to invalid 'cdAccount.storeControllerManagedObjectContext' {cdAccount.remObjectID: 
Failed to copy reminders from template to list due to invalid templateID.entityName {templateID: 
REMListStorageCDIngestor: mutateOrdering(...) cannot proceed because storage.reminderIDsMergeableOrdering is nil {objectID: %{public}@, key: %{public}s}
REMListStorageCDIngestor:mutateOrdering - number of reminderIDsOrderingHints {count: %ld}
REMListStorageCDIngestor: mutateOrdering(...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}
Cannot get any REMCDList from the ordered set of reminders in the list.
Some reminders have changes in .icsDisplayOrder so ICS display orders is taking precedence as the true sort hint - {list: %@}
q24@?0@8@16
backPropagateOrderingChangesToICSDisplayOrder: Failed to obtain an managedObjextContext from a changed reminder
Back propagated ordering changes to CD reminders - {changes: %s}
backPropagateOrderingChangesToICSDisplayOrder: Failed to pre-fetch changing reminders
Produced empty change logs when trying to back propagated ordering changes to CD reminders, maybe a bug or should shortcut earlier.
Back propagating ordering changes: display order has gone too large in first try. Going to reset from 1 {maxDisplayOrder: %lu, largestDisplayOrder: %lu}
Going to back propagate ordering changes to CD reminders {remindersCount: %ld, startIndexToKeepUntouched: %ld, maxDisplayOrder: %lu}
REMListStorageCDIngestor: establishRelationship(onStorage:into cdList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}
Updating list.parentList {list: %s, parentList: %s}
Updating list.parentAccount {list: %s, account: %s}
Updating list.account {list: %s, account: %s}
REMListStorageCDIngestor: cdList.account is nil {cdList.remObjectID: %@}
REMListStorageCDIngestor: storage(from:) Unhandled sharingStatus {objectID: %{public}@, sharingStatus.rawValue: %{public}ld}
REMListStorageCDIngestor: cdList.reminderIDsMergeableOrdering is nil, replacing with `Data()` {cdList.remObjectID: %@}
Error occured when mapping object from %{public}s to %{public}s {error: %s}
_TtC7remindd29RDManualSortIDPersistenceHost
accountTypeHost
manualSortIDHashKeyProvider
_TtC7remindd55RDUserInitiatedHashtagLabelApprovalTagAutoConvertRunner
onlyConvertIncompleteReminders
 RDUserInitiatedHashtagLabelApprovalTagAutoConvertRunner: Error fetching other reminders containing canonicalName for activity[%{public}s] {error: %{public}s}
 RDUserInitiatedHashtagLabelApprovalTagAutoConvertRunner: activity[%{public}s] has nil ckIdentifier. Deleting without further action
 RDUserInitiatedHashtagLabelApprovalTagAutoConvertRunner: Error autoConverting %{public}s on reminder[%{public}s] {error: %{public}s}
v5_Migrating_to_ZREMCDREMINDER
v6_Migrated_to_ZREMCDREMINDER
_TtC7remindd14RDAccountUtils
_TtCC7remindd14RDAccountUtils32InactivatedICloudCalDavDataMover
store
_TtCC7remindd14RDAccountUtils22LocalDataToICloudMover
com.apple.remindd.accountUtils.accountDataMover
RDAccountUtils.LocalDataToICloudMover: Local account emptied {stats: %{public}s}.
RDAccountUtils.LocalDataToICloudMover: Completed moving data from local to iCloud {target: %{public}@, acAccountIdentifier: %{public}@, stats: %{public}s}
RDAccountUtils.fetchAccountWithAppleAccount: No .calDav iCloud REMAccount found at all {accountIdentifier: %{public}@}
RDAccountUtils.fetchAccountWithAppleAccount: Found an active .calDav iCloud REMAccount {objectID: %{public}@, accountIdentifier: %{public}@}.
RDAccountUtils.fetchAccountWithAppleAccount: Found a .calDav iCloud REMAccount but it is inactive {objectID: %{public}@, accountIdentifier: %{public}@}
RDAccountUtils.fetchAccountWithAppleAccount: Found an active CloudKit REMAccount {objectID: %{public}@, accountIdentifier: %{public}@}.
childCalDAVIdentifierEnabledForReminders: Can't get display account from input {input: %{public}@}
RDAccountUtils: Not an UUID {uuidString: %{public}s}
RDAccountUtils.fetchAccountWithAppleAccount: Failed to get the display account {accountIdentifier: %{public}@}.
RDAccountUtils.fetchAccountWithAppleAccount: Given ACAccount is not Apple account {accountIdentifier: %{public}@}.
RDAccountUtils.fetchAccountWithAppleAccount: Reminders is not enabled for the given ACAccount {accountIdentifier: %{public}@}.
RDAccountUtils.InactivatedICloudCalDavDataMover: The inactivated CalDAV account is now emptied after the data move {stats: %{public}s}.
RDAccountUtils.InactivatedICloudCalDavDataMover: Completed moving data from the inactivated iCloud CalDAV account to CloudKit {ckAccount: %{public}@, acAccountIdentifier: %{public}@, stats: %{public}s}
RDAccountUtils.InactivatedICloudCalDavDataMover: Found an inactivated non-empy iCloud CalDAV account, now going to perform data move... {remObjectID: %{public}@, acAccountIdentifier: %{public}@}
RDAccountUtils.InactivatedICloudCalDavDataMover: Found an inactivated iCloud CalDAV account but it is empty, we're done {remObjectID: %{public}@, acAccountIdentifier: %{public}@}
RDAccountUtils.fetchInactiveCalDavAccount: Didn't find any .calDav iCloud REMAccount {appleACAccountID: %{public}s}
RDAccountUtils.fetchInactiveCalDavAccount: Didn't find an inactve .calDav iCloud REMAccount but found an active one {appleACAccountID: %{public}s}
RDAccountUtils.fetchInactiveCalDavAccount: Found an inactive .calDav iCloud REMAccount {appleACAccountID: %{public}s}
RDAccountUtils: Missing store controller, can't stop ICCC.
RDAccountUtils: Missing ICCC, can't stop ICCC.
RDAccountUtils: Disabled ICCC
RDAccountUtils: Missing store controller, can't start ICCC.
RDAccountUtils: Missing ICCC, can't start ICCC.
RDAccountUtils: Enabled ICCC
RDAccountUtils: _initializeAllAccounts: Missing store controller.
RDAccountUtils: _initializeAllAccounts: RDAccountInitializer.initializeAllAccounts() finished, calling completion.
RDAccountUtils: _initializeAllAccounts: Calling RDAccountInitializer.initializeAllAccounts()
Failed to create store because the XPC daemon is gone
Failed to create store because storeController does not support accountUtils
ACAccount type is not supported or reminders dataclass is not enabled {accountID: %{public}s, accountType: %{public}s}
UpdateAccountWithACAccount: Can't figure out REMAccountType for ACAccountType {acAccountType: %{public}s}
UpdateAccountWithACAccount: Resolved non-Apple account identifier enabled for Reminders from displayACAccount: {resolved: %{public}s, displayACAccount: %{public}@}.
UpdateAccountWithACAccount: Will process non-Apple account {displayAccountID: %{public}s, accountType: %{public}s}
UpdateAccountWithACAccount: AppleAccount {accountID: %{public}s} is ineligible for CloudKit Reminders, will process it as iCloud CalDAV
UpdateAccountWithACAccount: Got an Apple ID, not eligible for CloudKit reminders. Will only process iCloud CalDAV account for it {accountID: %{public}s}
UpdateAccountWithACAccount: Will not fetch migration state {accountID: %{public}s}
UpdateAccountWithACAccount: Will process iCloud CalDAV account {accountID: %{public}s, didChooseToMigrate: %{bool}d}
UpdateAccountWithACAccount: Will process CloudKit account {accountID: %{public}s, type: %{public}s, didChooseToMigrate: %{bool}d, shouldShowCloudKitAccount: %{bool}d, didFinishMigration: %{public}s}
UpdateAccountWithACAccount: setting shouldMigrateInactivatedICloudCalDavData to true {displayAccountID: %{public}s}
Store controller missing for checking whether migration has failed
Display ACAccount ID is not an UUID {displayACAccountID: %s}
UpdateAccountWithACAccount: Try to update account object {accountID: %{public}s}
Missing Cloud Context and not be able to fetch migration state
Missing cloud context for fetching migration state {accountID: %{public}s}
Fetch migration state from user record {accountID: %{public}s}
Cache migration state in ACAccount object {accountID: %{public}s}
Failed to fetch user record. Let's assume the account is not migrated {accountID: %{public}s}
Received migration state from user record {accountID: %{public}s}
Error updating migration flags for ACAccount {acAccount: %@, error: %s}
Migration state cache saved {accountID: %{public}s}
UpdateAccountWithACAccount: Failed to fetch migration status. Assume the account is un-migrated {error: %s, accountID: %{public}s}
UpdateAccountWithACAccount: Migration state fetched {accountID: %{public}s}
Error updating migration flags for ACAccount {acAccount: %{public}@, error: %s}
nonCloudKitAccountIdentifierEnabledForReminders: Can't get display account from input {input: %{public}@}
UpdateAccountsWithAccountInfos: Updating account object {accountID: %{public}s}
UpdateAccountsWithAccountInfos: Saving account object changes
UpdateAccountsWithAccountInfos: Failed to create UUID object, account ignored {accountID: %{public}s}
UpdateAccountsWithAccountInfos won't create inactive accounts unless it is CloudKit {name: %s, accountID: %{public}s, type: %{public}s}
UpdateAccountsWithAccountInfos will flip `inactive` state of account {newState: %{public}s, accountID: %{public}s, type: %{public}s}
UpdateAccountsWithAccountInfos is creating account object {name: %s, accountID: %{public}s, type: %{public}s}
UpdateAccountsWithAccountInfos: Unexpected account type, account ignored. {accountName: %s, accountID: %{public}s, expectedType: %ld, actualType: %ld}
UpdateAccountsWithAccountInfos is updating existing account object {name: %s, accountID: %{public}s, type: %ld}
UpdateAccountsWithAccountInfos is going to delete account {accountName: %s, accountID: %{public}s, type: %ld}.
UpdateAccountsWithAccountInfos: Account object changes saved
UpdateAccountsWithAccountInfos: Error saving context after adding account {error: %s}
UpdateAccountWithACAccount: inserting to daemonUserDefaults.acAccountIdentifiersToMigrateInactivatedCalDavData {displayAccountID: %{public}s}
Found ACAccount without identifier
ACAccount type not allowlisted, assume it's CalDAV {typeIdentifier: %s}
RDAccountUtils: Unexpected call to remAccountType(from:) with ACAccountTypeIdentifierAppleAccount {AC-identifier: %{public}s}
Failed to create REMStore for requestToMergeLocalDataIntoSyncData
Error occurred when trying to delete local data {error: 
RDAccountUtils: requestToDeleteLocalData: Error occurred when trying to delete local data {error: %{public}s}
RDAccountUtils: requestToDeleteLocalData: Local account emptied {stats: %{public}s}.
RDAccountUtils: requestToMergeLocalDataIntoSyncData: Could not find an Apple ACAccount for {acAccountIdentifier: %{public}s}
Error occurred when trying to move data from local to iCloud {acAccountIdentifier: 
RDAccountUtils: requestToMergeLocalDataIntoSyncData: Error occurred when trying to move data from local to iCloud {acAccountIdentifier: %{public}s error: %{public}s}
RDAccountUtils: requestToMergeLocalDataIntoSyncData: icloud account store does not exists yet, will move local data later {acAccountIdentifier: %{public}s}
Local account is empty error occurred when trying to move data from local to iCloud {acAccountIdentifier: 
RDAccountUtils: requestToMergeLocalDataIntoSyncData: Local account is empty, we won't move local data to cloud {acAccountIdentifier: %{public}s}.
RDAccountUtils: requestToMergeLocalDataIntoSyncData: icloud account store already exists, move local data now {acAccountIdentifier: %{public}s}
RDAccountUtils: requestToMergeLocalDataIntoSyncData {acAccountIdentifier: %{public}s}
Failed to create REMStore for removing orphaned accounts
RDAccountUtils: Remove orphaned accounts
Couldn't fetch accounts from ACAccountStore.
RDAccountUtils: Couldn't fetch accounts from ACAccountStore. Not able to determine orphaned accounts.
Failed to remove accounts which are no longer signed-in
Failed to fetch accounts which are no longer signed-in {error: %s}
Removing orphaned accounts {accounts: %s}
No orphaned accounts to remove.
RDAccountUtils: Trying to remove orphaned accounts
Orphaned accounts removed
DADMain is disabled after we stop monitoring agents. Will not try re-starting agents.
No ACAccount is found for updating account object {acAccountID: 
Failed to create REMStore for updating account object {acAccountID: 
RDAccountUtils: Updating account {accountID: %{public}s}
Failed to create REMStore for updating account database
RDAccountUtils: Updating system accounts
No reminders accounts is found
RDAccountUtils: Finished updating account {accountID: %{public}@}
Failed to update some or all of the system accounts {error: %s}
RDAccountUtils: Completed updating system accounts, calling updateAccountsAndFetchMigrationState completion {didAddOrRemoveAccounts: %{bool}d, didUpdateAccounts: %{bool}d, error: %s}
Failed to restart DA monitoring agents
Purge ACAccount migration state cache
Error saving ACAccount {error: %s}
No ACAccount is found for updating migration state {acAccountID: %{public}s}
RDAccountUtils: Process migration state change
Failed to create REMStore for migrating preferred default list
Can't migrate default list ID {error: %s}
Default list is CalDAV but has no external identifer
Default list with unrecognized external identifier (missing slash) {externalIdentifier: 
Default list with unrecognized external identifier (invalid UUID) {externalIdentifier: 
Failed to create REMStore for process migration state change
reminder.list.daIsEventOnlyContainer
reminder.list.daIsNotificationsCollection
account.inactive
%{public}s:prepareForDeletion() '\REMCDSavedAttachment.storeControllerManagedObjectContext' should not be nil {savedAttachmentID: %{public}s}
%{public}s:prepareForDeletion() '\REMCDSavedAttachment.identifier' should not be nil {moid: %{public}@}
%{public}s:prepareForDeletion() '\REMCDSavedAttachment.account' should not be nil {moid: %{public}s}
%{public}s:prepareForDeletion() '\REMCDSavedAttachment.account.identifier' should not be nil {moid: %{public}s}
%{public}s:prepareForDeletion() {savedAttachmentID: %{public}s}
Created reminder fetchRequest {fetchRequest: %@}
Due date sorting missing due date
Given cdReminders should not contain any element that is not a REMCDReminder.
newCloudObject: Unknown alarm trigger type {type: %{public}s}
mergeData: Unknown trigger type {type: %s}
ReferenceFrameString
DateComponentsData
Alarm is marked for deletion but alarm trigger is not {alarmTriggerID: %{public}s, alarmID: %{public}s}
Fixing broken references for alarmTrigger {alarmTriggerID: %{public}s, alarmID: %{public}s}
alarmReferenceCKRecordType
Record.type is date but this is not a date trigger {type: %s}
Record.type is location but this is not a location trigger {type: %s}
Record.type is time interval but this is not a time interval trigger {type: %s}
Record.type is vehicle but this is not a vehicle trigger {type: %s}
_TtC7remindd26RDStoreControllerAnalytics
q_fetchCounts
q_saveCounts
q_postEventWorkItem
enabled
storeControllerReadWriteEventName
remindd.RDStoreControllerAnalytics
com.apple.remindd.storecontroller.readwrite
totalReminderCount
softDeletedReminderCount
incompleteReminderCount
sharedListsCount
parentReminderCount
flaggedReminderCount
structuredTagCount
nonDeletedAlarmCount
softDeletedAlarmCount
incompleteLocationAlarmsCount
incompleteTimeAlarmsCount
_TtC7remindd32RDSuggestedAttributesAutoTrainer
persistentStorage
storeControllerObserverToken
Starting RDSuggestedAttributesAutoTrainer
Started RDSuggestedAttributesAutoTrainer more than once
Scheduling XPCActivity before start()
RDSuggestedAttributesAutoTrainer schedule {isDatabaseDirty: %{bool}d, assumeDatabaseDirty: %{bool}d}
Error getting latest FetchResultToken. Returning q_isDatabaseDirty == false {error: %{public}s}
RDSuggestedAttributesAutoTrainer TRAIN END {results: %{public}s}
RDSuggestedAttributesAutoTrainer TRAIN START
Cannot obtain the associated persistent store of the given hashtag
REMCDHashtagLabel.createHashtagLabel: Cannot obtain the associated persistent store of the given hashtag {hashtagID: %{public}s, hashtagAccountID: %{public}s}
Hashtag does not have matching account identifier with the given persistent store
REMCDHashtagLabel.createHashtagLabel: Hashtag does not have matching account identifier with its persistent store {hashtagID: %{public}s, hashtagAccountID: %{public}s, pStoreAccountID: %{public}s}
_TtC7remindd56RDStoreControllerMigrator_AccountIdentifierHashtagLabels
AccountIdentifierHashtagLabelsMigrator {store: %{public}s} accountIdentifier is nil, skip migration
AccountIdentifierHashtagLabelsMigrator BEGIN {store: %{public}s}
AccountIdentifierHashtagLabelsMigrator END {store: %{public}s, migrated hashtag labels count = %ld}
AccountIdentifierHashtagLabelsMigrator with error: %s
Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}
Failed to encode the result of RDSwiftInvocable {error: %s, invocation: %s}
Dropping unsupported criterion for searching REMCDSmartList. {criterion: %s}
Error ingesting cdSmartList.parentList into list storage {error: %s}
REMSmartCDList's parentList is unexpectedly deleted {identifier: %{public}s}
must only fetch smart list type that is either hasPredefinedObjectID or specify a custom objectID to match
Unexpected usage of cdSmartList(smartListType:objectID:in:...) - you must either fetch smart list of a type which hasPredefinedObjectID, or specify an objectID to match {smartListType: %{public}s}
fetching smart list returned more than one result {type: %s objectID: %s, count: %s}
Unexpected smart list type to fetch by predefined objectIDs
Unexpected smart list type to fetch by predefined objectIDs {smartListType: %{public}s}
BOGUS! Practically cdSmartListsHavingCustomObjectID(...) is meant to be used for fetching CSLs only {smartListType: %{public}s, objectID: %{public}@}
Smart list type with predefined objectIDs should not be fetched by cdSmartListsHavingCustomObjectID()
Smart list type with predefined objectIDs should not be fetched by cdSmartListsHavingCustomObjectID() {smartListType: %{public}s}
expecting a valid REMAccount for a custom smart list
REMCDAccount.recordName() cannot be determined because it is called before .ckUserRecordName is initialized {account: %{public}s}
We aren't supposed to call REMCDAccount.newCloudObject(for:accountID:context:) on sync down, as CloudKit accounts creation is always managed internally by RDAccountUtils {accountID: %{public}s, recordID: %{public}s}
REMCDAccount.sortChildrenObjects() Not expected to be called practically {account: %{public}s}
Missing store controller for processing migration state change {accountID: %{public}s}
Missing cloud context for processing migration state change {accountID: %{public}s}
Missing account utils for processing migration state change {accountID: %{public}s}
Migration state did change {accountID: %{public}s, didChooseMigration: %{bool}d, didFinishMigration: %{bool}d}
mergeMigrationState(fromRecord:) - Printing resolution tokens for debugging upon toggling didFinishMigration->FALSE - {didChooseToMigrate: (record=%s, CD=%s), didFinishMigration: (record=%s, CD=%s)}
ERROR mergeMigrationState(fromRecord:) - Trying to merge account record that toggles didFinishMigration->FALSE after finishing migration {isAccountRecord: %{bool}d, accountID: %{public}s}
mergeMigrationState(fromRecord:) - Toggling didFinishMigration->FALSE {isAccountRecord: %{bool}d, accountID: %{public}s, didChooseToMigrateChanged: %{bool}d, didChooseToMigrate: %{bool}d}
MERGE.LOCAL: cleanUpAfterLocalObjectMerge: This REMCDAccount has no remObjectID (ckIdentifier: %{public}s, externalIdentifier: %{public}s).
MERGE.LOCAL: cleanUpAfterLocalObjectMerge: This REMCDAccount has no listIDsMergeableOrdering (accountID: %{public}@).
MERGE.LOCAL: Clean up account.listIDsOrdering {listIDs.to.remove: %s}
MERGE.LOCAL: cleanUpAfterLocalObjectMerge: This REMCDAccount has nil lists (accountID: %{public}@).
B20@0:8B16
v32@0:8@16B24B28
REMCDAccount+CloudKit: Could not proceed to upsertOrderedIdentifiersForAccountListView() because storeController isn't available {account: %{public}s}
REMCDAccount+CloudKit: Could not proceed to upsertOrderedIdentifiersForAccountListView() because there is problem finding the persistent store for the account {account: %{public}s}
REMCDAccount+CloudKit: Sorted intermixed ordered IDs for CSLs and Lists in REMCDAccountListData {account: %{public}s, #csls: %ld, #lists: %ld}
REMCDAccount+CloudKit: Not sorting child smartLists becuase REMCDAccount.mutableOrderedSetValue(forKey: smartLists) is nil
REMCDAccount+CloudKit: Sorted CSLs into account.smartLists {account: %{public}s, #csls: %ld}
REMCDAccount+CloudKit: Sort ordered set account.smartLists - after - {smartLists: %s}
REMCDAccount+CloudKit: Sort ordered set account.smartLists - before - {smartLists: %s, ordering: %@}
Not sorting child lists becuase REMCDAccount.mutableOrderedSetValue(forKey: lists) is nil
Sort ordered set account.lists - after - {lists: %s}
Sort ordered set account.lists - before - {lists: %s, ordering: %@}
SharedListIDsToOwnerNames
Failed to encode ckSharedObjectOwnerNames in JSON {error: %s}
Invalid ckSharedObjectOwnerName entry {objectIdentifier: %s, ownerName: %s}
Failed to create a new listIDsMergeableOrdering when trying to update listIDsMergableOrdering for missing list(s)
Tried to update listIDsMergableOrdering for missing list but list has no identifier {list: %@}
Unable to create new listIDsMergeableOrdering because replicaIDSource isn't available {key: %{public}s, cdObject: %@}
Deserializing listIDsMergeableOrdering from cdAccount listIDsMergeableOrdering data {recordID: %s}
REMCDAccount.mergeData(from): Could not post RDStoreControllerREMAccountPropertiesDidUpdate due to unexpected values {accountID: %{public}s, changedValue: %s}
REMCDAccount.mergeData(from): Synced and merged account .personIDSalt change from CloudKit record {accountID: %{public}s}
Deserializing listIDsMergeableOrdering from account record listIDsMergeableOrdering data {recordID: %s}
Succesfully processed migration state change after merging CK user record
Failed to process migration state change after merging CK user record {error: %s}
listTypeRawValue
listID
hintData
lastAccessedSinceReferenceDate
Ti,N,D
concatenatedContainerIDsWithLocalContainerIDPrefix
concatenatedElementIDsWithLocalElementIDPrefix
.internalTestTool
.peopleInteraction
.userInteractive
.readWriteLocalInternal
.readWritePublic
com.apple.private.dark-wake-push
com.apple.private.xpc.domain-extension
com.apple.private.DistributedEvaluation.RecordAccess-com.apple.reminders.des
com.apple.private.des-service
com.apple.security.exception.shared-preference.read-only
com.apple.security.temporary-exception.shared-preference.read-only
com.apple.security.exception.shared-preference.read-write
com.apple.security.temporary-exception.shared-preference.read-write
com.apple.symptom_diagnostics.report
com.apple.private.tcc.manager.check-by-audit-token
com.apple.private.tcc.allow.overridable
com.apple.private.tcc.allow
com.apple.security.exception.mach-lookup.global-name
com.apple.security.temporary-exception.mach-lookup.global-name
application-identifier
com.apple.application-identifier
Can't construct REMResolutionTokenMap from invalid JSON
Can't construct REMResolutionToken from invalid JSON
modificationTime
_TtC7remindd25RDTodayNotificationEngine
bannerTimeEventStream
badgeEventStream
dynamicSignificantTimeNotificationEngine
todayNotificationTimeObserver
badgeCountCriteriaObserver
Failed to fetch reminder count. Failed to update today badge {error: %s}
Updating application badge. {includeToday: %s, count: %ld}
RDTodayNotificationEngine: started updateApplicationBadge
Posted today badge notification. {includeToday: %s, count: %ld}
Unable to post today badge notification. {error: %s}
User doesn't want today notifications at all. Not adding next time event.
Error fetching scheduled reminders when getting nextReminderDueDateMidnight {error: %s}
No time in todayTimeCandidates is in the future. Not adding next time event. {todayTimeCandidates: %s}
Scheduled next todayNotification fire date {nextFireDate: %{public}s}
Deciding when to wake up for the next TodayNotification {todayTimeCandidates: %s, now: %s}
RDTodayNotificationEngine: started addNextBannerTimeEvent
User doesn't want today notifications at all. Not posting today notification.
Unable to find last fire date. Not firing Today Notification. {todayNotificationFireTime: %{public}s, now: %{public}s}
Current time is >%{public}fs after desired fire time. Not firing Today Notification {lastFireDate: %{public}s, now: %{public}s}
Unable to fetch REMTodayDataView. Not posting any todayNotification. {error: %s}
No all-day reminder whose lastBannerPresentationDate is before their own dueDate (at TodayNotificationFireTime). Not posting TodayNotification.
No reminderIDs found in Today smart list. Not posting TodayNotification.
No reminders in Today view. Not showing today notification.
REMRemindersListDataView.fetchScheduled up to now fetched AllDay reminders. {count: %ld}
RDTodayNotificationEngine: started postTodayNotificationIfApplicable
TodayNotificationEngine has updated lastBannerPresentationDate {reminderIDs: %{public}s, lastBannerPresentationDate: %{public}s}
TodayNotificationEngine is unable to update lastBannerPresentationDate {reminderIDs: %{public}s, error: %s}
Failed to compute current hour when posting analytics to event com.apple.reminders.notification with {type: today}
today
RDTodayNotificationEngine: Posted Today notification {body: %s}
RDTodayNotificationEngine: Unable to post Today notification {error: %s}
Evaluating whether to trigger TodayNotification {reminderID: %{public}@, lastPresentationTime: %{public}s, fireDate: %{public}s, now: %{public}s}
com.apple.remindd.todayEngine.start
v16@?0@"NSDateComponents"8
Starting RDTodayNotificationEngine
RDTodayNotificationEngine.start() must be called exactly once
os_transaction RELEASE {name: com.apple.remindd.todayEngine.start}
Received storeController changed notification after RDTodayNotificationEngine was deallocated
com.apple.remindd.todayEngine.storeControllerChange
os_transaction INIT {name: com.apple.remindd.todayEngine.storeControllerChange}
os_transaction RELEASE {name: com.apple.remindd.todayEngine.storeControllerChange}
Received streamBadgeCountCriteria callback on deallocated RDTodayNotificationEngine
com.apple.remindd.todayEngine.streamBadgeCountCriteriaObserver
os_transaction INIT {name: com.apple.remindd.todayEngine.streamBadgeCountCriteriaObserver}
includeToday: %s
os_transaction RELEASE {name: com.apple.remindd.todayEngine.streamBadgeCountCriteriaObserver}
Received RDTimeEventHandler event on deallocated RDTodayNotificationEngine
com.apple.remindd.todayEngine.badgeEventStream
os_transaction INIT {name: com.apple.remindd.todayEngine.badgeEventStream}
todayNotificationBadge event triggered
os_transaction RELEASE {name: com.apple.remindd.todayEngine.badgeEventStream}
Received streamTodayNotificationFireTime callback on deallocated RDTodayNotificationEngine
com.apple.remindd.todayEngine.todayNotificationTimeObserver
os_transaction INIT {name: com.apple.remindd.todayEngine.todayNotificationTimeObserver}
streamTodayNotificationFireTime: %s
os_transaction RELEASE {name: com.apple.remindd.todayEngine.todayNotificationTimeObserver}
com.apple.remindd.todayEngine.bannerTimeEventStream
os_transaction INIT {name: com.apple.remindd.todayEngine.bannerTimeEventStream}
todayNotification XPC Event triggered
os_transaction RELEASE {name: com.apple.remindd.todayEngine.bannerTimeEventStream}
_TtC7remindd22RDManagedObjectIDCache
_TtC7remindd50RDPrimaryActiveCloudKitAccountManagedObjectIDCache
_TtC7remindd21RDPredefinedObjectKey
Tq,N,R
_TtC7remindd32RDPredefinedManagedObjectIDCache
_TtC7remindd58RDPredefinedSmartListAndManualOrderingManagedObjectIDCache
remindd.RDPredefinedObjectKey
RDManagedObjectIDCacheProtocol
_TtC7remindd21RDElementManualSortID
ckElementID
_TtC7remindd13RDAlarmEngine
producers
consumers
Unable to get infer RDProducerAlarmTrigger enum from trigger {trigger: %@}
This is an incorrect use of API. peopleInteraction origin takes an additional parameter that cannot be deduced solely by the REMAlarm. You need to create the origin enum manually
AlarmEngine didn't expect to receive actions of this type. {type: %s, response: %@}
Error trying to retrieve reminder {notificationIdentifier: %{public}s, error: %s}
Unexpected .viewRemindersInList action for notification type .remindersAlarm
Unexpected .declineAssignment action for notification type .reminderAlarm
Unexpected .viewAssignmentInList action for notification type .reminderAlarm
Unexpected .addToReminders action for notification type .reminderAlarm
Handle notification action for reminder {reminderID: %{public}@, action: %{public}s}
Processing notification response {actionIdentifier: %{public}s, notificationIdentifier: %{public}s}
Updated reminder successfully. {actionIdentifier: %{public}s, reminderID: %@}
Save error. Failed to save updates from notification response {error: %s , reminderID: %{public}@, actionIdentifier: %{public}s}
Finished starting alarmEngine {engine: %s, producers.count: %ld}
Starting alarmEngine {engine: %s, producers.count: %ld, consumers.count: %ld}
remindd/RDAlarmEngine.swift
Started RDAlarmEngine twice -- Crashing
com.apple.remindd.RDAlarmEgnine.alarmDatabaseDidChange
Received store changes with deallocated alarm engine
os_transaction INIT {name: com.apple.remindd.RDAlarmEgnine.alarmDatabaseDidChange}
Triggered alarmEngine database did change. Notifying producers
os_transaction RELEASE {name: com.apple.remindd.RDAlarmEgnine.alarmDatabaseDidChange}
os_transaction RELEASE {name: com.apple.remindd.RDAlarmEngineAssembly}
RDAlarmEngine:debouncePolicy: DB load is '%s', debounce interval to use: %f s, stats: {average: %f, #sample: %ld}
REMRemindersListDataView.AssignedInvocation: cdAssignment has no ckAssigneeIdentifier {identifier: %s}
REMRemindersListDataView.AssignedInvocation: cdAssignment has no identifier %@
REMRemindersListDataView.AssignedInvocation: cdAssignment has no owning reminder {identifier: %s}
REMRemindersListDataView.AssignedInvocation - Got a shared to/from me list that doesn't have the current user in the sharee list, huh?! {listID: %{public}s}
Unknown or undefined account type in AccountsListDataView
_TtC7remindd15RDDatabaseSaver
RDDatabaseSaver: Found more than 1 primary cloudkit account storage in array {accountIDs: %{public}s}
Unexpected use of REMStoreModeEventKitSync to edit/insert/remove CloudKit account(s)
RDDatabaseSaver: Unexpected use of REMStoreModeEventKitSync to edit/insert/remove CloudKit account(s) {author: %{public}s, clientIdentity: %{public}s}
RDDatabaseSaver: ingestionCoordinator.run()
RDDatabaseSaver: managedObjectContext.save()
SAVE END {request.author: %{public}s, clientIdentity: %{public}s, containerURL: %{public}s}
RDDatabaseSaver: Attempt to ingest REMReminderStorage with unexpected '\REMReminderStorage.objectID.entityName' {author: %{public}s, clientIdentity: %{public}s, reminderStorage.objectID: %{public}@}
RDDatabaseSaver: Error performing removeAccountStores(withIdentifiers:). {error: %{public}s}
RDDatabaseSaver: Removed account stores {clientIdentity: %{public}s, accountIdentifiers: %{public}s}
RDDatabaseSaver: These accounts are marked for removal {clientIdentity: %{public}s, accountIdentifiers: %{public}s}
unknown mode
RDDatabaseSaver: createMissingAccountStores did not add any new store because stores for all accounts are already present.
RDDatabaseSaver: createMissingAccountStores did add some new stores.
DADREMUserNotificationPresenting: content must be kind of UNMutableNotificationContent
DADREMUserNotificationPresenting: show notification for DA {identifier: %{public}s, category: %{public}s, content.userInfo: %s}
_TtC7remindd12RDDataAccess
dataAccessRequestsQueue
remStoreProvider
userNotificationCenterProvider
_TtC7reminddP33_9540E3B410C6F96B6B224FD2AED82F7B28RDDataAccessREMStoreProvider
@40@0:8@16@?24@?32
rdDaemonController
_TtC7reminddP33_9540E3B410C6F96B6B224FD2AED82F7B46RDDataAccessUserNotificationPresentingProvider
Implementation of REMDAAccountPropertiesObserving must be actually RDAccountPersonIDSaltObserver
You should set up a RDStoreControllerNotificationCenter and work queue before starting RDDataAccess in order to observe reminders database.
Received store changes with deallocated RDDataAccess!
RDDataAccess: Received store controller changes!
RDDataAccess RDDARequest.updateContentsOfAllFolders {accountIDs: %{public}s}
BehaviorManager says dataAccess is not enabled {dataAccessEnabled: false}
Did query DataAccess Enabled status {dataAccessEnabled: true}
RDDataAccess: Did add pending request {from: %{public}s}.
com.apple.remindd.dataaccess.launch
os_transaction INIT {name: com.apple.remindd.dataaccess.launch}
RDDataAccess is starting...
com.apple.remindd.dataaccess.agentManager.load
os_transaction RELEASE {name: com.apple.remindd.dataaccess.launch}
RDDataAccess finished starting (note that DADAgentManager may not have done loading up yet)
os_transaction INIT {name: com.apple.remindd.dataaccess.agentManager.load}
RDDataAccess has done waitForSystemAvailability, now adding to operation queue to bootstrap DADAgentManager
os_transaction RELEASE {name: com.apple.remindd.dataaccess.agentManager.load}
RDDataAccess has done _loadAndStartMonitoringAgents on DADAgentManager
remindd/RDDataAccess.swift
You must first call RDDataAccess.setup(...) to set up a RDDaemonController before accessing RDDataAccess.shared
You must first call RDDataAccess.setup(...) to set up a rdUserNotificationCenter that conforms to DADREMUserNotificationPresenting before accessing RDDataAccess.shared
You must first call RDDataAccess.setup(...) to set up a rdStoreControllerNotificationCenter before accessing RDDataAccess.shared
REMDAAccountPropertiesObserving
DADREMStoreProvider
@"REMStore"16@0:8
@"REMSaveRequest"16@0:8
@"<REMDAAccountPropertiesObserving>"40@0:8@"OS_dispatch_queue"16@?<v@?@"NSData">24@?<v@?@"NSError">32
v24@0:8@"<REMDAAccountPropertiesObserving>"16
B24@0:8@"NSError"16
DADREMUserNotificationPresentingProvider
@"<DADREMUserNotificationPresenting>"16@0:8
DADREMUserNotificationContent
title
body
v24@?0@"NSData"8@"NSError"16
v16@?0@"CKRequestInfo"8
_TtC15InvernessClient15InvernessClient
serviceName
container
databaseType
qualityOfService
requestCompletedBlock
-inf
type.googleapis.com
google.protobuf.Duration
google.protobuf.Type
google.protobuf.Field
google.protobuf.Enum
google.protobuf.EnumValue
google.protobuf.Option
_TtCV13SwiftProtobuf20Google_Protobuf_TypeP33_6F98CA5B40D5770487A5728B8BE8E47F13_StorageClass
_name
_fields
_oneofs
_sourceContext
_TtCV13SwiftProtobuf20Google_Protobuf_EnumP33_6F98CA5B40D5770487A5728B8BE8E47F13_StorageClass
_enumvalue
_TtCV13SwiftProtobuf22Google_Protobuf_OptionP33_6F98CA5B40D5770487A5728B8BE8E47F13_StorageClass
_value
value
number
enumvalue
syntax
CARDINALITY_UNKNOWN
CARDINALITY_OPTIONAL
CARDINALITY_REQUIRED
CARDINALITY_REPEATED
TYPE_UNKNOWN
TYPE_DOUBLE
TYPE_FLOAT
TYPE_INT64
TYPE_UINT64
TYPE_INT32
TYPE_FIXED64
TYPE_FIXED32
TYPE_BOOL
TYPE_STRING
TYPE_GROUP
TYPE_MESSAGE
TYPE_BYTES
TYPE_UINT32
TYPE_ENUM
TYPE_SFIXED32
TYPE_SFIXED64
TYPE_SINT32
TYPE_SINT64
kind
cardinality
oneof_index
packed
json_name
default_value
oneofs
SYNTAX_PROTO2
SYNTAX_PROTO3
_TtC13SwiftProtobuf15DoubleFormatter
doubleFormatString
work
google.protobuf.Empty
fieldNumber
fieldName
messageType
google.protobuf.DoubleValue
google.protobuf.FloatValue
google.protobuf.Int64Value
google.protobuf.UInt64Value
google.protobuf.Int32Value
google.protobuf.UInt32Value
google.protobuf.BoolValue
google.protobuf.StringValue
google.protobuf.BytesValue
SwiftProtobuf/BinaryDecoder.swift
Somehow BinaryDecoding unwound more objects than it started
org.swift.protobuf.typeRegistry
google.protobuf.Timestamp
seconds
nanos
google.protobuf.SourceContext
file_name
google.protobuf.Api
google.protobuf.Method
google.protobuf.Mixin
_TtCV13SwiftProtobuf19Google_Protobuf_ApiP33_CEA2A4FA6D1C07D784D5EE9B6CE9521113_StorageClass
_methods
_version
_mixins
_syntax
root
request_type_url
request_streaming
response_type_url
response_streaming
methods
version
source_context
mixins
\u00
"NaN"
"Infinity"
"-Infinity"
_TtC13SwiftProtobuf17AnyMessageStorage
_typeURL
SwiftProtobuf/JSONScanner.swift
Fatal error
Somehow JSONDecoding unwound more objects than it started
#json: 
google.protobuf.FieldMask
paths
key value 
false
true
SimpleExtensionMap(
_TtC13SwiftProtobufP33_ACE262E8B2F1F7C26CC1ADDF6C99D01E10InternPool
interned
google.protobuf.Struct
google.protobuf.Value
google.protobuf.ListValue
_TtCV13SwiftProtobuf21Google_Protobuf_ValueP33_D700BA243E574A08E6B851AAC52D261C13_StorageClass
_kind
SwiftProtobuf/TextFormatEncodingVisitor.swift
values
null_value
number_value
string_value
bool_value
struct_value
list_value
fields
NULL_VALUE
google.protobuf.Any
SwiftProtobuf/Message+TextFormatAdditions.swift
SwiftProtobuf/Google_Protobuf_Any+Extensions.swift
type_url
UnparentedObjectsMigration BEGIN {store: %@}
Failed to save delete batch. Migration error {deleteError: %@}
UnparentedObjectsMigration End {store: %@, countDeleted: %ld}
rem_log_fault_if(![NSStringFromClass([REMCDAuxiliaryChangeInfo class]) isEqualToString:NSStringFromClass(self)]) -- A subclass of REMCDAuxiliaryChangeInfo called '- [REMCDAuxiliaryChangeInfo cdEntityName]'. The subclass should override this method. {callstack: %@}
Could not get method for selector %@ on target %@
Store missing url. Failed to populate RDStoreControllerAccountIdentifier {store: %{public}@}
Error fetching accounts. Failed to populate RDStoreControllerAccountIdentifier {error: %{public}@}
No account found in store {store: %{public}@}
Account has nil identifier. Failed to populate RDStoreControllerAccountIdentifier {account: %{public}@}
Populating RDStoreControllerAccountIdentifier {store: %{public}@, identifier: %{public}@}
Processing cloud batch (%d of %@) in throttling level (%d of %d): %@
Switching to cloud throttling level (%d of %d): %@
Resetting cloud throttling policy to the first level: %@
Trying to add zoneID without an account ID
Trying to add zoneID with an empty account ID
Trying to add nil zoneID.
Trying to remove zoneID without an account ID
Trying to remove zoneID with an empty account ID
ICCloudContext INIT {supportsCloudKitSyncing: %ld, syncSettingsSupportsCloudKitSyncing: %ld, storeControllerSupportsCloudKitSyncing: %ld}
os_transaction INIT {name: com.apple.remindd.cloudkit.launch.pending.DADSystemAvailabilityChecker}
ICCC: Done waiting DADSystemAvailabilityChecker upon daemon launch and now try to bootstrapSyncingOnLaunchIfSystemReady.
os_transaction RELEASE {name: com.apple.remindd.cloudkit.launch.pending.DADSystemAvailabilityChecker}
os_transaction INIT {name: com.apple.remindd.cloudkit.launch.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver}
ICCC: Received RDAccountInitializer.DidCompleteInitializeAllAccountsNotification upon daemon launch and now try to bootstrapSyncingOnLaunchIfSystemReady.
os_transaction RELEASE {name: com.apple.remindd.cloudkit.launch.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver}
ICCC: Observing RDAccountInitializer.DidCompleteInitializeAllAccountsNotification on daemon launch before we enable syncing.
ICCC: Actually running bootstrapSyncingOnLaunchIfSystemReady to bootstrap CloudKit syncing.
ICCC: bootstrapSyncingOnLaunchIfSystemReady: Not ready to bootstrap syncing yet {isSystemAvailableForSyncing=%d, pendingAccountInitializerCompleteOnLaunch=%d}
Not passed buddy. ICCC now registers for buddy.
ICCC received buddy finished notification.
ICCC now unregisters buddy observer.
[%{public}@] Cannot proceed because account.identifier is nil
[%{public}@] Cannot proceed because aaAccount.aa_altDSID is nil {accountIdentifier: %{public}@}
[%{public}@] ICCloudContext does not conform to RDICCloudContextCryptoStringProviding - should implement it in a Swift extension
Attempting to look up AAAccount while system is not ready {hasPassedBuddy: %d, isSystemAvailableForSyncing: %d}
Updating CK account personID due to primary CK account salt set {account.identifier: %{public}@, oldPersonID: %{public}@, newPersonID: %{public}@}
No personID update made upon primary CK account salt set {ckAccounts.count: %ld, salt: %@}
Unsetting CK account personID due to primary CK account salt error {account.identifier: %{public}@, origPersonID: %{public}@, origPersonIDSalt: %@}
No personID update made upon primary CK account salt update error {ckAccounts.count: %ld, error: %{public}@}
ICCC is already observing primary CK account personIDSalt changes with RDAccountPersonIDSaltObserver {observer: %{public}@}
ICCC no longer available upon our RDAccountPersonIDSaltObserver success handler is called
ICCC received a primary CK account personIDSalt change or initial value {observer: %{public}@}
ICCC no longer available upon our RDAccountPersonIDSaltObserver error handler is called
ICCC received a primary CK account personIDSalt error {observer: %{public}@, saltError: %{public}@}
Clearing cloud containers.
containerForAccountID: accountID is nil
containerForAccountID: accountID is empty
Could not set affectedStores for mergeLocalObjectsFetchContext because we can't find persistent store for accountIdentifier: %{public}@
Could not set affectedStores for mergeLocalObjectsWriteContext because we can't find persistent store for accountIdentifier: %{public}@
filterNonUploadableChangedManagedObjectIDs: objectIDs with nil entity name: %{public}@
filterNonUploadableChangedManagedObjectIDs: objectIDs with nil store id: %{public}@
[%{public}@] Passing in nil '%s'
isReadyToSyncWithActiveAccountAvailable: accountStatusNumberByAccountID is empty, withActiveAccountAvailable = NO, containersByAccountID is not empty
OS version sent from server is in the incorrect format. Should be majorVersion,minorVersion,patchVersion
Current version of the OS (%{public}@) is not supported for sync. Needs at least (%{public}@)
Re-gain internet connection after losing it for a short time. Not going to sync. (throttled)
Cloud context found an internet connection.
Cloud context lost an internet connection.
Reachability sync finished {error: %{public}@}
CloudKit account status may have changed
Operation queue has 0 operations
Operation queue has %d operation(s):%{public}@
Adding os_state handler: %{public}s
Processing os_state handler: %{public}s
Error serializing state data for "%{public}s": %{public}@
Error serializing state data for "%{public}s": data size greater than UINT32_MAX
accountID is nil or empty in receivedZoneNotFound: %{public}@ %{public}@, accountID: %{public}@
Zone not found %{public}@ %{public}@
Shared zone not found %{public}@ %{public}@
Not generating PersonIDSalt because the sync reason wasn't initiated by the user {reason: %@}
Cannot generate PersonIDSalt because there's no primary CK account, shouldn't even call this function
SYNC[FULL] START {reason: %{public}@}
os_transaction INIT {name: %{public}@}
os_transaction RELEASE {name: %{public}@}
SYNC[FULL] FAIL - store controller syncing disabled
SYNC[FULL] FAIL - no CloudKit account
SYNC[FULL] FAIL - not ready {readinessDescription: %{public}@}
SYNC[FULL] FAIL - no network connection
cloudkit.full
SYNC[FULL] CONTINUE - Trying to sync with fetching disabled, so only pushing. {isFetchingEnabled: %d, discretionary: %d, cloudDirtyToken: %{public}@}
SYNC[FULL] FAIL {error: %{public}@}
SYNC[FULL] {duration: %.4f}
SYNC[FULL] CONTINUE - Performing full sync {syncReason: %{public}@, discretionary: %d, cloudDirtyToken: %{public}@}
Bypassing babysitter against SYNC[FULL], which failed too many times, because sync was user initiated {syncReason: %{public}@, waiterID: %{public}@}
Babysitting SYNC[FULL] because it failed too many times {syncReason: %{public}@, waiterID: %{public}@}
SYNC[FULL] FAIL {error: %{public}@, syncReason: %{public}@}
SYNC[FULL] END {duration: %.4f, syncReason: %{public}@}
SYNC[FULL] - PersonIDSalt generated for primary CK account.
SYNC[FULL] CONTINUE - List of accountIDs that need to perform CloudSchemaCatchUpSync: {%{public}@}
_syncWithReason: Error fetching database changes during full sync {fetchDatabaseChangesError: %{public}@}
_syncWithReason: Fetched database changes for full sync
_syncWithReason: Error fetching record zone changes during full sync {fetchRecordZoneChangesError: %{public}@}
_syncWithReason: Fetched record zone changes for full sync
_syncWithReason: Error while processing for full sync {processingErrors.first: %{public}@}
_syncWithReason: Processed everything for full sync
cancelEverything: Performing cleanup in ICCC.
Timed out when cancelling the cloud operations. Performing cleanup anyway.
Zone IDs that need to resume fetching: fetching=%{public}@; needingFetch=%{public}@
Deleting record zones (markZonesAsUserPurged=%d) in account ID %{public}@: %{public}@
Trying to deleteRecordZonesWithZoneIDs with empty accountID.
Error deleting zones in account ID %{public}@: {operationError: %{public}@}
Deleted record zones in account ID %{public}@: {deletedRecordZoneIDs: %{public}@}
Finishing operations for record ID %{public}@
All operations finished for record ID %{public}@
Waiting on operation %{public}@ for record ID %{public}@
Updating CloudKit account status
Updating CloudKit account status for account: %{public}@
Error updating account status for account: %{public}@, %@
CloudKit account status changed to %{public}@ for account: %{public}@
No change in CloudKit status %{public}@ for account: %{public}@
Remove stale account status for accountIDs: %{public}@
Remove stale database scope string needing retry fetch changes for accountIDs: %{public}@
Fetching user record in cloud context {operation: %{public}@}
Fetched user record in cloud context {userRecord: %{private}@}
Per-record error fetching user record {userRecordError: %{public}@}
Fetch user record operation completed: %{public}@
Error fetching user record: %{public}@
Trying to fetchUserRecordWithAccountID with empty accountID.
updateUserRecordWithAccountID: accountID is nil or empty
Error fetching user record ID: %{public}@, error: %@
rem_log_fault_if(recordID == nil) -- Trying to fetch a cloud object {recordType: %{public}@, accountID: %{public}@} without a record ID
rem_log_fault_if(accountID == nil) -- Trying to fetch a cloud object {recordType: %{public}@, recordID: %{public}@} without an account ID
Adding operations to fetch %ld records
Account ID is required to create fetch record operations.
No record IDs to fetch, no fetch record operation is created for accountID: %{public}@
Fetching records with operation group %{public}@
Grouping fetch requests for %d %{public}@ records into %d batches
Creating %{public}@
Will fetch %{public}@ %{public}@
operationToFetchRecordIDs:database operation.perRecordCompletionBlock with nil recordID
Progress fetching %{public}@: %d%% %{public}@
accountID is nil or empty in fetchOperation:fetchRecord: %{public}@, accountID: %{public}@
Tried to fetch record that doesn't exist in account ID %{public}@: %{public}@ %{public}@
Failed to fetch in account ID %{public}@: %{public}@ %{public}@: %{public}@
Fetched in account ID %{public}@: %@ %{public}@
Error fetching {operation: %{public}@, error: %{public}@}
Finished {operatin: %{public}@}
didFetchShare: Cannot get CK account {ckIdentifier: %{public}@} for {record: %{public}@, nil rootRecordType}
No root record type in share %@ for %{public}@, default shareUserRecordName %@
No root record type in share %@ for %{public}@, shareCreatorRecordName %@
didFetchShare: Cannot get CK account {ckIdentifier: %{public}@} for newPlaceholderObjectForRecordID {record: %{public}@, rootRecordType: %{public}@}
Received share %{public}@ for %{public}@ %{public}@
Received share for unknown object: %{public}@
Received a share with no root record ID: %{public}@
Error deleting shares for objects in account ID %{public}@
Will Delete Shares in account ID %{public}@ for %lu Objects:
Will delete share in account ID %{public}@ for %@
SYNC[SyncAfterDeleteShare] START}
SYNC[SyncAfterDeleteShare] END
Creating modify operations: Account ID is required to create operations.
No cloud objects to save or delete or delelet-share, no modify record operation is created for accountID: %{public}@
Creating operations to push %ld records for account ID %{public}@
Creating operations to delete %ld records for account ID %{public}@
Creating operations to delete %ld share records for account ID %{public}@
Record to delete share from doesn't have a server share %{public}@ for accountID %{public}@
No root record ID when trying to delete share for %{public}@ for account ID %{public}@
Record size (%lu bytes) exceeds CloudKit limit for record: %{public}@
Grouping modify operations into %ld batches
Modifying records with operation group %{public}@
Batching with recordsToSave:%@ recordsToDelete:%@, maxRecordCountPerBatch:%lu, maxRecordSizePerBatch:%lu
Ending batch because an impossible batch was detected ICCloudContext. Alarm: %{public}@ AlarmTrigger: %{public}@
Adding Alarm/AlarmTrigger pair to batch: %@ %@
Ending batch because Alarm/AlarmTrigger pair does not fit isCountOK: %d Alarm: %@ AlarmTrigger: %@
Ending batch because an impossible batch was detected ICCloudContext: %{public}@
Adding record to save batch: %@
Ending batch because record does not fit: %@
Adding record to delete batch: %@
Ending batch because we're out of records
Ending batch because we've reached maxRecordCountPerBatch
Finished batch with batchRecordsToSave:%@ batchRecordIDsToDelete:%@
About to create modify operation for database: %{public}@
Creating modify operation %{public}@
Will push %@ %{public}@
Will delete %{public}@ %{public}@
Progress pushing %@: %d%%
accountID is nil or empty in modifyRecordsOperation:perSaveRecordCompletion %{public}@, accountID: %{public}@
Pushed account ID %{public}@: %@ %{public}@
accountID is nil or empty in modifyRecordsOperation:recordWasDeletedWithRecordID %{public}@, accountID: %{public}@
Record was deleted but the cloud object no longer exists in our database for modifyRecordsOperation:recordWasDeletedWithRecordID:... {accountID: %{public}@, prefetchRecordID: %{public}@, opeartion: %{public}@}
Deleted share in account ID %{public}@: %{public}@ %{public}@
Deleted record in account ID %{public}@: %{public}@ %{public}@
Actually deleting object in account ID %{public}@: %{public}@ with supportsDeletionByTTL = false from local DB upon completion of CKModifyRecordsOperation.
Unknown item deleting share in account ID %{public}@: %{public}@ for %@ %{public}@
Zone not found deleting share in account ID %{public}@: %{public}@ for %@ %{public}@
Error deleting share in account ID %{public}@: %{public}@ for %@ %{public}@: %{public}@
No record on server to delete in account ID %{public}@: %{public}@ %{public}@
Reference violation in account ID %{public}@: for %{public}@ %{public}@
Batch request failed in account ID %{public}@: for deleting %{public}@ %{public}@
Error deleting record in account ID %{public}@: %{public}@ %{public}@: %{public}@
Error modifying records, canceling dependent operations: %{public}@
Partial error for modify operation %{public}@: %{public}@
Error modifying records %{public}@: %{public}@
Finished modify operation %{public}@
accountID is nil or empty in handleGenericPartialFailuresForError %{public}@, accountID: %{public}@
Unexpected item id %{public}@
User exceeded iCloud quota in account ID %{public}@
User deleted zone in account ID %{public}@: %{public}@
Error topologically sorting records: %{public}@
Ignoring this object that doesn't have an account id: %{public}@, %{public}@
No record ID when trying to modify record
Trying to modify two instances of the same object %{public}@
Continue to save context while having custom validation failures for %{public}@
Run exclusively operation start: {%{public}@}
Run exclusively operations end: {%{public}@}
rem_log_fault_if(partialError.code != CKErrorPartialFailure) -- Called -partialFailure:containsError with a non-partialFailure.
%{public}@
Trying to create operationToSaveZonesForZoneIDs with empty accountID.
Will save zone %{public}@ %{public}@
Error saving zones %{public}@: %{public}@
Saved record zones %{public}@
Saved record zone %{public}@ %{public}@
contextDidSave excludes author: %{public}@
Enqueued %ld object IDs because of coredata changes
contextDidSave processingSelectorDelayer.requestFire for author: %{public}@
Coalescing ICNSBlockOperation name=%{public}@
Processing objects with operation %{public}p
Adding process objects operation %{public}p. allDirtyObjects=%d
Process operation %{public}p waiting on %ld other operations
Running process all dirty objects operation.
SYNC[COREDATA] START {operationName: %{public}@, syncReason: %{public}@}
os_transaction INIT {name: com.apple.remindd.cloudkit.sync.coredata}
os_transaction RELEASE {name: com.apple.remindd.cloudkit.sync.coredata}
SYNC[COREDATA] ERROR - no CloudKit account
SYNC[COREDATA] ERROR - is pendingAccountInitializerCompleteOnLaunch {idsToProc.count: %d, idsToRetry.count: %d, readinessDescription: %{public}@}
SYNC[COREDATA] ERROR - not ready {readinessDescription: %{public}@}
SYNC[COREDATA] ERROR - network isn't reachable
SYNC[COREDATA] ERROR - upload is suspended
SYNC[COREDATA] FAIL
cloudkit.coredata
Bypassing babysitter against processPendingCloudObjects, which failed too many times, because sync was user initiated {operationName: %{public}@, syncReason: %{public}@, waiterID: %{public}@}
Babysitting processPendingCloudObjects because it failed too many times {operationName: %{public}@, syncReason: %{public}@, waiterID: %{public}@}
accountID is nil or empty in processPendingCloudObjectsWithOperationName:syncReason:completionHandler: operationName: %{public}@, syncReason: %{public}@, accountID: %{public}@
SYNC[COREDATA] END(DEFERRED due to MERGE.LOCAL needs to happen before we can processObjectIDs) {operationName: %{public}@, syncReason: %{public}@, duration: %.4f, numIDsToProcessAddingToRetry: %ld, pendingAccountIdentifiers: %{public}@}
SYNC[COREDATA] CONTINUE {operationName: %{public}@, syncReason: %{public}@, objectIDsToProcess.count: %ld, retryIDsCount: %ld}
SYNC[COREDATA] FAIL {duration: %.4f, errors.first: %{public}@, errors.count: %ld}
SYNC[COREDATA] END {operationName: %{public}@, syncReason: %{public}@, duration: %.4f}
MERGE.LOCAL: Trying to call addOperationToMergeLocalObjectsWithCompletionHandler: when system has not passed buddy or system-migrator {hasPassedBuddy: %d, isSystemAvailableForSyncing: %d}
MERGE.LOCAL: (MergeLocalObjectsContext) Could not find CK account matching {accountIdentifier: %{public}@}
MERGE.LOCAL: (MergeLocalObjectsContext) Account needs to merge local objects {accountIdentifier: %{public}@}
MERGE.LOCAL: (MergeLocalObjectsContext) Account does not need to merge local objects {accountIdentifier: %{public}@, isInactive: %d}
MERGE.LOCAL: (MergeLocalObjectsContext) Account is not ready to merge local objects {mergeContext: %{public}@}
MERGE.LOCAL: (MergeLocalObjectsContext) Populated merge contexts {elapsed: %.4f s, accountIdentifiers: %{public}@}
MERGE.LOCAL: No need to merge local objects or no objectIDsInCloud (someAccountsNeedToMergeLocalObjects: %d)
MERGE.LOCAL: This account cannot merge local objects at this time, will schedule retry if needed (mergeContext: %{public}@)
MERGE.LOCAL: Scheduling retry, if we are within limit (currentRetryCount: %d).
MERGE.LOCAL: Maximum retry count reached for Merge.Local, aborting
MERGE.LOCAL: Maximum retry count previously reached, aborting {lastMaxRetry: {date: %@, build: %@}, currentBuild: %@}
MERGE.LOCAL[COREDATA] START
os_transaction INIT {name: com.apple.remindd.cloudkit.merge.local.coredata}
os_transaction RELEASE {name: com.apple.remindd.cloudkit.merge.local.coredata}
MERGE.LOCAL[COREDATA] CONTINUE {keys.count: %ld}
MERGE.LOCAL: Here's the objectIDs to fetch and process (accountID: %{public}@, eligibleObjectIDs: %{public}@).
MERGE.LOCAL[COREDATA] Account not found with accountID %{public}@
MERGE.LOCAL[COREDATA] MERGE SAVE FAILED! for accountID %{public}@
MERGE.LOCAL[COREDATA] MERGE LOCAL SAVED for accountID %{public}@.
MERGE.LOCAL[COREDATA] END {duration: %.4f}
MERGE.LOCAL: Unsetting .daWasMigrated (accountIdentifier=%{public}@, flagSaved=1)
MERGE.LOCAL: ...found an existingLocalObjectToMerge (objectMID=%{public}@, localObjectMID=%{public}@)
MERGE.LOCAL: ...mergeWithLocalObject (didMerge=%{public}@)
MERGE.LOCAL: ...no matching existingLocalObjectToMerge (objectMID=%{public}@)
MERGE.LOCAL: final step to clean up account and lists, then save... (accountIdentifier=%{public}@)
MERGE.LOCAL: Collected error upon merge local objects completion: {error: %{public}@}.
Retrying to process %d cloud objects
Processing %lu cloud objects, now going to fetch from CD and submit items to operation queue
_processFetchedCloudObjectsWithObjectIDs with nil store for managedObjectID %{public}@
_processFetchedCloudObjectsWithObjectIDs with nil or empty storeID for managedObjectID %{public}@
_processFetchedCloudObjectsWithObjectIDs with nil or empty accountID for managedObjectID %{public}@, storeID %{public}@, accountID: %{public}@
fetched REMCKCloudState with cloudObject.accountID is nil or empty: %{public}@, cloudState: %{public}@, cloudObject: %@
Processing %lu cloud objects for accountID %{public}@
Cannot fault-in object while processing cloudObjectIDs {error: %{public}@, cloudObjectID: %{public}@}
Found non-REMCDObject to process. Skipping {objectID: %{public}@}
BOGUS: Unrecognized subclass of REMCDObject but shouldSyncToCloud=YES. Not saving this object to the cloud {class: %{public}@, objectID: %{public}@}
This REMCDObject subclass has shouldSyncToCloud=NO. Not saving this object to the cloud {class: %{public}@}
Not syncing object because it's missing mandatory fields: %@
_processCloudObjects adding fetch&/modify cloud objects operation to operation queue: %{public}@
SYNC[APS] ERROR - Disabled or not ready {readinessDescription: %{public}@}
SYNC[APS] CONTINUE {notification.class: %{public}@, subscriptionID: %{public}@}
SYNC[APS] CONTINUE - Cannot handle this CKDatabaseNotification because subscriptionOwnerUserRecordID is nil or empty, skipping {databaseNotification: %{public}@, subscriptionOwnerUserRecordID: %{public}@}
SYNC[APS] CONTINUE - Received CloudKit database notification {debounceableDatabaseNotification: %{public}@, notificationID: %{public}@}
SYNC[APS] CONTINUE - coalesced databaseNotificationSet.count: %lu
SYNC[APS] SKIP - Notification debounced and coalesced {notificationID: %{public}@}
SYNC[APS] FAULT - Received database notificiation (%{public}@), but expected %{public}@
SYNC[APS] NOOP - Not handling CloudKit database notification %{public}@
SYNC[APS] CONTINUE - Fired from APS debouncer to execute CKDatabaseNotification handler {databaseNotification: %{public}@}
SYNC[APS] CONTINUE - Found a container with subscription owner user recordID for the CKDatabaseNotification {scope: %{public}@, userRecordName: %{public}@}
rem_log_fault_if(database == nil) -- SYNC[APS] CONTINUE - [container databaseWithDatabaseScope:databaseScope] is nil unexpectedly, bailing out APS sync
Unexpected nil accountID calling into _handleDatabaseNotification:database:accountID:completionHandler:
...SYNC[APS] Handling CloudKit database notification, with potential debounced scopes from other notifications {databaseNotification: %{public}@, accountID: %{public}@, catchUpSync: %d}
...SYNC[APS] ERROR fetching database changes during aps notification sync {error: %{public}@}
...SYNC[APS] Fetched database changes for aps notification sync
...SYNC[APS] ERROR fetching record zone changes during aps notification sync {error: %{public}@}
...SYNC[APS] Fetched record zone changes for aps notification zone
...SYNC[APS] ERROR processing for aps notification sync {processingErrors.first: %{public}@}
...SYNC[APS] Handled CloudKit database notification {databaseNotification: %{public}@}
Filtering out account ID %{public}@ from needing fetch changes since there is no corresponding container.
accountID is nil or empty in fetchRecordZoneChangesForAccountZoneIDs %{public}@, accountID: %{public}@
Waiting for previous fetch zone changes operation to finish %{public}@
fetch record zone changes operation waiting for previous fetch zone changes operation to finish %{public}@
Not adding operation to queue. isFinished=%d isExecuting=%d isCancelled=%d %{public}@
Trying to populate operationsToFetchRecordZoneChangesForZoneIDs with nil or empty accountID.
Account shouldPerformCloudSchemaCatchUpSync. Will set CKFetchRecordZoneChangesConfiguration.previousServerChangeToken = nil {accountID: %{public}@, zoneIDs: %@}
Filtered the current users zone from being fetched from the shared db.
Filtered the current users RemindersMigration zone from being fetched from the private db.
Fetching record zone changes with operation group %{public}@
Will set CKFetchRecordZoneChangesConfiguration.previousServerChangeToken = nil {databaseScope: %@, zoneIDs: %@}
operationToFetchRecordZoneChangesForZoneIDs with nil or empty accountID.
Not trying to sync the default record zone in account ID %{public}@.
operationToFetchRecordZoneChangesForZoneIDs existingOperation %{public}@ with nil or empty accountID.
Found existing operation with superset zone configuration in account ID %{public}@: %{public}@
isZoneConfigurations: existingConfiguration %{public}@ with nil previousServerChangeToken
accountID is nil or empty in newOperationToFetchRecordZoneChangesWithZoneConfigurations %{public}@, accountID: %{public}@
Fetch changes operation %{public}@ with %{public}@ took %f s
Creating fetch changes operation in account ID %{public}@: %{public}@
accountID is nil or empty in fetchRecordZoneChangesOperation %{public}@, accountID: %{public}@
Fetched changes for record zone %{public}@ %{public}@ in account ID %{public}@
Server change token expired for zone %{public}@ %{public}@ in account ID %{public}@
User deleted zone %{public}@ %{public}@ in account ID %{public}@
Non-fatal error fetching zone changes for zone %{public}@ %{public}@ in account ID %{public}@: %{public}@
Error fetching zone changes %{public}@ %{public}@ in account ID %{public}@: %{public}@
accountID is nil or empty in fetchRecordZoneChangesOperationDidComplete %{public}@, accountID: %{public}@
Fetched zone changes in account ID %{public}@: %{public}@
Fetch changes operation had partial failure in account ID %{public}@: %{public}@
Non-fatal error fetching zone changes in account ID %{public}@: %{public}@: %{public}@
Error fetching zone changes in account ID %{public}@: %{public}@: %{public}@
[fetchRecordZoneChangesOperation:recordWasChangedWithRecordID:record:error:context:] accountID is nil or empty %{public}@, accountID: %{public}@
[fetchRecordZoneChangesOperation:recordWasChangedWithRecordID:record:error:context:] Error fetching record for account ID %{public}@: %{public}@ %@ %{public}@
[fetchRecordZoneChangesOperation:recordWasChangedWithRecordID:record:error:context:] Fetching record with nil record for account ID %{public}@: %{public}@ %{public}@
[fetchRecordZoneChangesOperation:recordWasChangedWithRecordID:record:error:context:] Record changed {accountID: %{public}@, record: %@, operation: %{public}@}
[fetchRecordZoneChangesOperation:recordWasChangedWithRecordID:record:error:context:] No account after record changed {accountID: %{public}@, operation: %{public}@}
accountID is nil or empty in fetchRecordZoneChangesOperation:recordWasDeletedWithRecordID: %{public}@, accountID: %{public}@
Share was deleted in accountID %{public}@: %{public}@ %{public}@
Record was deleted in accountID %{public}@: %{public}@ %{public}@
Record was deleted but the cloud object no longer exists in our database for fetchRecordZoneChangesOperation:recordWasDeletedWithRecordID:... {accountID: %{public}@, prefetchRecordID: %{public}@, opeartion: %{public}@}
Zone change token updated %{public}@ %{public}@ %{public}@
Sorted children objects after fetching RecordZoneChanges {sortedRecordIDs: %{public}@}
rem_log_fault_if(ckRecordIDs.count > 0) -- Some record IDs marked as needing to sort children are left not sorted {ckRecordIDs: %{public}@}
ICCloudContext Polling Timer Fired
Polling timer fired
Adding private and shared cloud databases for account: %{public}@
Fetching database changes with operation group %{public}@
accountID is nil or empty in operationToFetchDatabaseChangesForDatabase %{public}@, accountID: %{public}@
Account shouldPerformCloudSchemaCatchUpSync. Will create CKFetchDatabaseChangesOperation with nil previousServerChangeToken {accountID: %{public}@, databaseScope: %@}
Creating fetch database changes operation for account %{public}@, %{public}@
Database changes operation %{public}@ will wait for %{public}@
Zone changed for account %{public}@, %{public}@ %{public}@
Shared zone was deleted for account ID %{public}@: %{public}@
Deleting shared %@ for zoneID %{public}@, accountID %{public}@
Not deleting shared %@ in wrong zone %{public}@ for zone ID %{public}@, accountID %{public}@
Zone was deleted for account %{public}@, %{public}@ %{public}@
Callback for operation in shared database says private zone was deleted %{public}@: %{public}@
Database change token updated for account %{public}@, %{public}@ %{public}@
accountID is nil in fetchDatabaseChangesOperation:finishedWithServerChangeToken:accountID:error:completionHandler: %{public}@ %{public}@
Fetched database changes for account %{public}@, %{public}@
Database changes server change token expired for account %{public}@, %{public}@
Operation to fetch database changes was cancelled for account %{public}@, %{public}@
Operation to fetch database changes failed with no network connection for account %{public}@, %{public}@
Error fetching database changes for account %{public}@, %{public}@: %@
%@: Maximum retry count reached, aborting (maxRetryCount: %lu)
Error fetching database changes, canceling dependent operations: %{public}@
Loaded zone fetch state: zonesNeedingFetchChanges=%{public}@
Saving zone fetch state: zonesNeedingFetchChanges=%@
Clearing zone fetch state
Updating subscriptions
updateSubscriptions: Trying to get ACAccount appleAccountUtilities when system has not passed buddy or system-migrator {hasPassedBuddy: %d, isSystemAvailableForSyncing: %d}
accountID is nil or empty in updateSubscriptionsWithCompletionHandler: database %{public}@, accountID: %{public}@
Not fetching subscriptions for %{public}@, already subscribed to %{public}@
Not sure if subscribed to %{public}@
Fetching subscriptions %{public}@
Fetched subscription %{public}@ %{public}@
accountID is nil or empty in fetchSubscriptionsForDatabase: %{public}@, accountID: %{public}@
Error fetching subscriptions %{public}@: %{public}@
Fetched subscriptions %{public}@
accountID is nil or empty in saveSubscriptionsForDatabase: %{public}@, accountID: %{public}@
Not saving subscriptions for %{public}@, already subscribed to %{public}@
Saving subscription %{public}@ %{public}@
Error saving subscriptions %{public}@: %{public}@
Saved subscriptions %{public}@
Saved subscription %{public}@ %{public}@
accountID is nil or empty in saveSubscriptionsForDatabase modifySubscriptionsCompletionBlock %{public}@, accountID: %{public}@
Loaded subscribed subscription IDs last updated time from user defaults {timestamp: %{public}@, date: %{public}@, validityPeriod: %{public}@}
Loaded subscribed subscription IDs from user defaults: %@
Persisting subscribed subscription ID to user defaults {subscriptionID: %{public}@}
Clearing subscribed subscription IDs
os_transaction INIT {name: com.apple.remindd.cloudkit.updateCloudContextState}
rem_log_fault_if(syncReason == nil) -- No sync reason passed to updateCloudContextStateWithSyncOption
Not updating cloud context state because it's disabled {%{public}@}
Updating cloud context state. %{public}@ and internet %{public}@. {syncReason: %{public}@, option: %{public}@}
Bypassing babysitter against updateCloudContextState, which failed too many times, because sync was user initiated {syncReason: %{public}@, waiterID: %{public}@}
Babysitting updateCloudContextState because it failed too many times {syncReason: %{public}@, waiterID: %{public}@}
os_transaction RELEASE {name: com.apple.remindd.cloudkit.updateCloudContextState}
No longer in foreground after updating cloud context state
No longer reachable after updating cloud context state
Not ready to sync after updating cloud context state: %{public}@
Syncing enabled after updating account status
WARNING: LOOKATME: UpdateCloudContextState: CK account is inactive but didChooseToMigrate=YES && didFinishMigration=NO, try FetchUserRecord again... {accountID: %{public}@}
UpdateCloudContextState: UpdateCloudContextStateSyncOptionForced, shouldSync = %d
UpdateCloudContextState: Triggering a sync {syncReason: %{public}@, syncOption: %{public}@}
UpdateCloudContextState: Sync completed {syncReason: %{public}@, error: %@}
UpdateCloudContextState: Going to fetch user record with accountIdentifier: %{public}@ before sync {syncReason: %{public}@}
UpdateCloudContextState: Error fetching user record with accountIdentifier: %{public}@: %{public}@
UpdateCloudContextState: Fetched user record with accountIdentifier: %{public}@: %{private}@
error fetching all long lived operation IDs: %{public}@, accountID: %{public}@
error fetching long lived operation, ID: %{public}@ error: %{public}@ accountID: %{public}@
Not adding long-lived operation because it's finished: %{public}@, accountID: %{public}@
Not adding long-lived operation because it's cancelled: %{public}@, accountID: %{public}@
Adding long-lived operation back to the queue: %{public}@, accountID: %{public}@
Marking cloud as dirty {newToken: %{public}@}
Clearing cloud dirty {currentToken: %{public}@, cloudDirtyToken: %{public}@}
NOT clearing cloud dirty {currentToken: %{public}@, cloudDirtyToken: %{public}@}
Incrementing retry count for %{public}@ from %d to %d
Clearing retry count for %{public}@
ICCC: Not retrying because we have no internet connection
ICCC: Not retrying because we're not ready: %{public}@
ICCC: Starting a retry timer if necessary for error: %{public}@
Using backoff time for retry (%.0fs)
Retrying operations after %ds
CloudKit Retry
Retry timer fired, but we have no internet connection
Retry timer fired, but we're not ready to sync: %{public}@
Retrying operations
Retrying to update subscriptions
Retrying to save record zones
Retrying CKFetchDatabaseChangesOperation databaseScopes: %{public}@
CKFetchDatabaseChangesOperation: Error occured when retrying to sync {error: %@}
CKFetchDatabaseChangesOperation: Retry sync completed.
Retrying to fetch record zone changes
Retrying to process changes
CloudSchemaCatchUpSync: Retrying catch up sync for accounts: %{public}@
CloudSchemaCatchUpSync: Error occured when retrying to catch-up sync {error: %@}
CloudSchemaCatchUpSync: Retry catch-up sync completed.
MERGE.LOCAL: Retrying to merge local objects
MERGE.LOCAL: Error occured when retrying to merge local objects {error: %@}
MERGE.LOCAL: Retry merging local objects completed.
Retry calling UpdateCloudContext after accountsDidChange and RDAccountInitializer completed works.
Saving server change token for %{public}@ %{public}@: %{public}@
accountID is nil in saveServerChangeToken:forRecordZoneID:databaseScope:accountID: %{public}@ %{public}@
saveServerChangeToken: The cloudKitAccount is nil for accountID %{public}@
Trying to save server change token without an account {accounts: [%@], primaryACAccount: %@, acAccounts: [%@], isReadyToSync: %d}
accountID is nil in serverChangeTokenForRecordZoneID:databaseScope:accountID: %{public}@ %{public}@
Couldn't find account to obtain server change token with account ID: %@
Deleting server change token for %{public}@ %{public}@
accountID is nil in deleteServerChangeTokenForRecordZoneID:databaseScope:accountID: %{public}@ %{public}@
Couldn't find account to obtain server change token with account ID: %{public}@
Deleting all server change tokens
Deleting all server data
deleteAllApplicationDataFromServerWithAccountID: accountID is nil or empty
Failed to fetch user record in account: %{public}@ for updating
Failed to update user record for resetting migration state {error: %{public}@}
Successfully cleaned user record
Primary CK account may have just been disabled, force run observePrimaryCloudKitAccountPersonIDSaltChanges to invoke the 'errorHandler' to unset personIDs in non-primary CK accounts
rem_log_fault_if(self.accountPersonIDSaltObserver != nil) -- accountPersonIDSaltObserver should not be created from -_accountsDidEnableOrDisable if the primary CK account is absent or inactive
ICCC received accountsDidDisable from RDStoreController.
ICCC: Stopping all CloudKit operations after deleting CloudKit account
ICCC received accountsDidEnable from RDStoreController.
os_transaction INIT {name: com.apple.remindd.cloudkit.accountsDidEnable.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver}
ICCC: Received RDAccountInitializer.DidCompleteInitializeAllAccountsNotification after accountsDidEnable.
os_transaction RELEASE {name: com.apple.remindd.cloudkit.accountsDidChange.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver}
ICCC: Observing DidCompleteInitializeAllAccountsNotification on accountsDidEnable.
ICCC: RDAccountInitializer failed, so we won't UpdateCloudContext after accountsDidChange: {error: %{public}@}
ICCC: Calling -didCompleteInitializeAllAccounts:
ICCC still disabled after accountsDidChange and DidCompleteInitializeAllAccountsNotification, will retry UpdateCloudContext in a few seconds... {%{public}@}
ICCC: Now call UpdateCloudContext after accountsDidChange and RDAccountInitializer completed works.
Cloud context received application will enter foreground notification
Push connection established with iCloud
Failed to get push token: %{public}@
SYNC[APS]
SYNC[APS] START {topic: %{public}@}
os_transaction INIT {name: com.apple.remindd.cloudkit.sync.aps}
os_transaction RELEASE {name: com.apple.remindd.cloudkit.sync.aps}
SYNC[APS] FAIL - unexpected aps topic {topic: %{public}@}
SYNC[APS] FAIL - CKNotification failed to parse APS message {apsTopic: %{public}@}
cloudkit.aps
Babysitting APS's didReceiveIncomingMessage because it failed too many times {waiterID: %{public}@}
SYNC[APS] PUSH FAIL {error: %{public}@}
SYNC[APS] END {duration: %.4f}
Force-setting migration state {didChooseToMigrate: %d, didFinishMigration: %d, createZoneIfFinishMigration: %d, accountID = %{public}@
Force-setting migration state: cannot get display account for force-setting migration state
Force-setting migration state: display account: %{public}@
Force-setting migration state: set %{public}@ zone for accountID: %{public}@
Completed save record zone Reminders for force-setting migration state
Force-setting migration state: Reminders zone creation failed with error: %@
Timeout creating zone record for force-setting migration state
Fetched user record for force-setting migration state in accountID: %{public}@, {record: %@}
Force-setting migration state: create an account record for force-setting migration with id: %{public}@
Fetched account record for force-setting migration state {record: %@}
Timeout fetching user / account record for force-setting migration state
Completed modify records operation for force-setting migration state
Failed to modify records operation for force-setting migration state {error: %{public}@}
Suspend upload
Resume upload
Checking if we should adjust APS debouncer interval according to migration state of {account: %{public}@, didChooseToMigrate: %d, didFinishMigration: %d}
Setting APS debouncer interval to %f
CloudSchemaCatchUpSync: Account needs to perform cloud schema catch up sync {accountID: %{public}@, persistenceCloudSchemaVersion: %lld, runtimeCloudSchemaVersion: %lld}
CloudSchemaCatchUpSync: Account needs to schedule a cloud schema catch up sync {accountID: %{public}@, runtimeCloudSchemaVersion: %lld}
CloudSchemaCatchUpSync: No ICCloudSchemaCatchUpSyncController given to the ICCloudContext, cannot schedule cloud schema catch up sync with system {accountID: %{public}@, runtimeCloudSchemaVersion: %lld}
CloudSchemaCatchUpSync: Account does not need a cloud schema catch up sync {accountID: %{public}@, runtimeCloudSchemaVersion: %lld}
...SYNC[%{public}@] CloudSchemaCatchUpSync: completed successfully, persistenceCloudSchemaVersion bumped {accountIdentifier: %{public}@, didUpdate: %d, buildVersion: %{public}@, debugLabel: %{public}@}
...SYNC[%{public}@] CloudSchemaCatchUpSync: completed with error but max retry reached, persistenceCloudSchemaVersion bumped {error: %{public}@, buildVersion: %{public}@, debugLabel: %{public}@}
...SYNC[%{public}@] CloudSchemaCatchUpSync: completed with error, persistenceCloudSchemaVersion not bumped yet, will retry later {error: %{public}@, buildVersion: %{public}@, debugLabel: %{public}@}
CloudSchemaCatchUpSync: Maximum retry count reached, aborting (maxRetryCount: %lu)
CloudSchemaCatchUpSync completed with error, will retry later (currentRetryCount: %d)
MergeLocalObjectsContext.validate:(MERGE.LOCAL) Account does not need to merge local objects {accountIdentifier: %{public}@}
MergeLocalObjectsContext.validate:(MERGE.LOCAL) This CK account has never attempted migration, how come? {accountIdentifier: %{public}@}
MergeLocalObjectsContext.validate:(MERGE.LOCAL) Gathering all cloud objectIDs that should run attempt merging local objects {accountIdentifier: %{public}@}
rem_log_fault_if(managedObjectContext.affectedStores.count != 1) -- MergeLocalObjectsContext: Must set affectedStores on the MoC used to validate with the given cdAccount
rem_log_fault_if(![managedObjectContext.affectedStores.firstObject.identifier isEqual:cdAccount.objectID.persistentStore.identifier]) -- MergeLocalObjectsContext: The MoC has a different affectedStores set than the given cdAccount's store
rem_log_fault_if(![NSStringFromClass([REMCDAlarmTrigger class]) isEqualToString:NSStringFromClass(self)]) -- A subclass of REMCDAlarmTrigger called '- [REMCDAlarmTrigger cdEntityName]'. The subclass should override this method. {callstack: %@}
Should not unset the tombstone field .reminderIdentifier of an REMCDHashtag {cdHashtag: %{public}@}
[%{public}@] checkResourceIsReachableAndReturnError returned false {attachmentID: %{public}@, accountID: %{public}@, error: %@}
Error purging account file directory for {accountID: %{public}@, code: %ld, error: %@, url: %{public}@}
Purged account file directory and its content for {accountID: %{public}@, url: %{public}@}
[%{public}@] checkResourceIsReachableAndReturnError returned false {accountID: %{public}@, error: %@}
Error purging attachment directory for {attachmentID: %{public}@, accountID: %{public}@, code: %ld, error: %@, url: %{public}@}
Purged attachment directory and its content for {attachmentID: %{public}@, accountID: %{public}@, url: %{public}@}
[%{public}@] checkResourceIsReachableAndReturnError failed {attachmentID: %{public}@, accountID: %{public}@, error: %@}
Error purging hashed attachment file for {fileName: %{public}@, accountID: %{public}@, code: %ld, error: %@, url: %{public}@}
Purged hashed attachment file for {fileName: %{public}@, accountID: %{public}@, url: %{public}@}
[%{public}@] Can't get files with {accountID: %{public}@, error: %@}
[%{public}@] Can't get file URL resource with {accountID: %{public}@, fileURL: %@, error: %@}
[%{public}@] Found attachment directory {attachmentID: %{public}@, accountID: %{public}@}
Configuration has no version
Configuration version (%ld) is not the expected version (%ld)
Checking cached configuration
Using cached remote configuration
Cache directory is unavailable for reading configuration cache
Using default configuration
ICCloudConfiguration: Start downloading configuration from {remoteURL: %{public}@}
Unable to download remote configuration.
ICCloudConfiguration: Received remote configuration
ICCloudConfiguration: Applying remote configuration
ICCloudConfiguration: Updating locally cached configuration {cacheURL: %{public}@}
Not able to write remote configuration to cache. {writeError: %{public}@}
Cache directory is unavailable for writing configuration cache
Error serializing plist data to dictionary: %@
Connected to remote configuration plist server but got back non 200 response: %{public}@
Error downloading remote configuration plist: %{public}@
Loading cloud configuration {configurationURL: %{public}@}
Failed to load cloud configuration dictionary {configurationURL: %{public}@}
Trying to create a cloud configuration with no minimum client version
Trying to create a cloud configuration with no throttling levels
Trying to create a cloud configuration with no max inline asset size
Trying to create a cloud configuration with no max attachments per note
Trying to create a cloud configuration with no max sub attachments per attachment
Trying to create a cloud configuration with no max attachment size
Validation Failure: Tried to move reminders accross lists in an unsupported account {fromList.identifier: %{public}@, toList.identifier: %{public}@, account.identifier: %{public}@}
Validation Failure: Tried to move reminders accross shared lists in an unsupported account {fromList.identifier: %{public}@, toList.identifier: %{public}@, account.identifier: %{public}@}
Validation Failure: Tried to create nested subtasks {list.identifier: %{public}@, parentReminder.identifier: %{public}@, reminder.identifier: %{public}@}
Validation Failure: Tried to set a subtask on a different list to its parent reminder {parentList.identifier: %{public}@, list.identifier: %{public}@, parentReminder.identifier: %{public}@, reminder.identifier: %{public}@}
Validation Failure: Subtasks are left on a different list to its parent reminder {subtask.list.identifier: %{public}@, list.identifier: %{public}@, subtask.identifier: %{public}@, reminder.identifier: %{public}@}
Validation Update: Moving reminder to another list nullifies assignee in its assignments {assignment.identifier: %{public}@, reminder.identifier: %{public}@, fromList.identifier: %{public}@, toList.identifier: %{public}@, account.identifier: %{public}@}
Validation Update: Moving reminder to another list nullifies origiantor in its assignments {assignment.identifier: %{public}@, reminder.identifier: %{public}@, fromList.identifier: %{public}@, toList.identifier: %{public}@, account.identifier: %{public}@}
Validation Update: Assignee in disallowed status and hence will be nullified {assignment.identifier: %{public}@, reminder.identifier: %{public}@, account.identifier: %{public}@}
Validation Update: Originator in disallowed status and hence will be nullified {assignment.identifier: %{public}@, reminder.identifier: %{public}@, account.identifier: %{public}@}
Validation WARNING: Attempt to move a reminder with assignments to a different list while supportsMoveAcrossSharedLists=NO {reminder.identifier: %{public}@, fromList.identifier: %{public}@, toList.identifier: %{public}@, account.identifier: %{public}@}
rem_log_fault_if(self.willSave_handledUpdateDisplayDate) -- Unexpected case to have deleted alarms after markExtraneousAlarmsForDeletion() but already handled updateDisplayDate {remObjectID: %{public}@}
rem_log_fault_if(![NSStringFromClass([REMCDAuxiliaryReminderChangeInfo class]) isEqualToString:NSStringFromClass(self)]) -- A subclass of REMCDAuxiliaryReminderChangeInfo called '- [REMCDAuxiliaryReminderChangeInfo cdEntityName]'. The subclass should override this method. {callstack: %@}
Failed to create directory %@: %{public}@
File %@ already exists and is not a directory!
rem_log_fault_if(![NSStringFromClass([REMCDRootEntityObject class]) isEqualToString:NSStringFromClass(self)]) -- A subclass of REMCDRootEntityObject called '- [REMCDRootEntityObject cdEntityName]'. The subclass should override this method. {callstack: %@}
Calling -isConnectedToAccountObject: on REMCDSharedToMeReminderPlaceholder is unexpected as this is not a class that should be updated or saved directly from a save request {callstack: %{public}@}
Error creating unarchiver: %@
You are not allowed to lowLevelRemoveFromParent a non-custom smart list from parent
Error creating unarchiver: %{public}@
Trying to get an object from a nil object ID: %{public}@
Unable to find object from objectID: %{public}@
Error finding object from objectID: %{public}@, %{public}@
Error obtaining permanent object ID for objects with error: %{public}@
Error obtaining permanent object ID for %{public}@: %{public}@
ICCloudSchemaCatchUpSyncContext: computing `shouldPerformCloudSchemaCatchUpSync` {isNeeded: YES, supported: %d, debugForceSupported: %d, schedulingState: %ld}
ICCloudSchemaCatchUpSyncContext: Initiated with an invalid scheduling state value (%ld), assume shouldPerformCloudSchemaCatchUpSync=YES
Called isAbstract on REMCDObject. This is an abstract core data model super class. {callstack: %@}
SET %@ <- %@
REMSupportedVersionUpdating: didChangeValueForKey:[%{public}@] calling _markObjectDirtyForSupportedVersionValidation on {remObjectID: %{public}@}
[%{public}@] Model type is not supposed to use or set resolutionTokenMap {objectID: %{public}@}
[%{public}@] Model type does allow setResolutionTokenMap, you are good {objectID: %{public}@}
2022:-[REMCDObject willSave]: Attempting to save a %{public}@ object without an identifier {moid: %{public}@}
Validation Failure: We have a REMCDObject that is not a REMCDAccount and is missing an account relationship {entity: %{public}@, identifier: %{public}@}
validateForInsert_Swift FAILED {error: %{public}@}
Validation Failure: Tried to move lists accross accounts {fromAccount.identifier: %{public}@, toAccount.identifier: %{public}@}
validateForUpdate_Swift FAILED {error: %{public}@}
Validation Failure: %{public}@ {%{public}@, %{public}@, %{public}@} and its parent {%{public}@, %{public}@, %{public}@, %{public}@} have different zones
Mark shared-to-me root %{public}@ for deletion and recursively deleted all child objects from local database
Begin recursiveMarkForDeletion:%{public}@ from %{public}@
Deleting orphan object %{public}@ permanently from local database
Not recursiveMarkForDeletion for %{public}@ because isDelete == self.markedForDeletion
Unexpected nil remObjectID when recursively traversing object tree. {self.objectID = %@, visitedMap = %@}
Unexpected cyclic graph when recursively traversing object tree. {self.remObjectID = %@, visitedMap = %@}
Failed to fetch objects in {relationship: %{public}@} of object {type: %{public}@}
Skipped traverseObjectTreeUsingVisitedMap for {remObjectID: %@, managedObjectID: %@}
Continue recursiveMarkForDeletion:%@ from %@
Stopping recurssion because isDeleted == self.markedForDeletion
Don't know how to handle property %{public}@ of entity %{public}@ to avoid constraint violation before marking for deletion
REMSupportedVersionUpdating: Changing minimumSupportedVersion on %{public}@ is not currently allowed {identifier: %{public}@}
REMSupportedVersionUpdating: setMinimumSupportedVersion {newValue: %{public}@, oldValue: %{public}@, remObjectID: %{public}@}
REMSupportedVersionUpdating: setMinimumSupportedVersion: calling _markObjectDirtyForSupportedVersionValidation on {remObjectID: %{public}@}
REMSupportedVersionUpdating: Setting effectiveMinimumSupportedVersion on %{public}@ is not currently allowed {identifier: %{public}@}
REMSupportedVersionUpdating: Abstract method called for -parentEffectiveMinimumSupportedVersion {class: %{public}@, callstack: %{public}@}
REMSupportedVersionUpdating: Abstract method called for -keyPathsForValuesAffectingEffectiveMinimumSupportedVersion {class: %{public}@, callstack: %{public}@}
REMSupportedVersionUpdating: Not actually adding dirty object to managedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion because this CoreData object is being deleted {ic_loggingIdentifier: %{public}@}
rem_log_fault_if(dirtySet == nil) -- REMSupportedVersionUpdating: Failed to obtain managedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion from storeControllerManagedObjectContext {storeControllerManagedObjectContext: %{public}@}
REMSupportedVersionUpdating: validateEffectiveMinimumSupportedVersion cannot process %{public}@ because it does not currently allow object supported version {identifier: %{public}@}
REMSupportedVersionUpdating: validateEffectiveMinimumSupportedVersion indicates that my descendants should also be validated since my effective version changed {myVersion: %lld, parentEffectiveVersion: %lld, oldValue: %lld, remObjectID: %{public}@}
A subclass of REMCDObject called '- [REMCDObject cdEntityName]'. REMCDObject class does not have a corresponding Core Data entity. The subclass should override this method. {callstack: %@}
Missing requirements to get alarmDateTrigger {accountID: %{public}@, alarmID: %{public}@}
rem_log_fault_if(!entityName) -- Unexpected error: found entity with no name
Error fetching objects from (%ld) object IDs: %{public}@
Error fetching %{public}@ (predicate=%@ sortDescriptors=%{public}@): %{public}@
Nil objects array fetching %{public}@ (predicate=%@ sortDescriptors=%{public}@ context=%{public}@)
ICCSCU: isCloudSchemaCatchUpSyncNeeded? {accountIdentifier: %{public}@, persistence: %lld, runtime: %lld}
ICCSCU: cloudSchemaCatchUpSyncDidComplete: Will update account.persistenceCloudSchemaVersion {accountIdentifier: %{public}@, persistence: %lld, runtime: %lld}
ICCSCU: cloudSchemaCatchUpSyncDidComplete: persistenceCloudSchemaVersion is already >= kRuntimeCloudSchemaVersion, stopping {accountIdentifier: %{public}@, persistence: %lld, runtime: %lld}
ICCSCU: cloudSchemaCatchUpSyncDidComplete: ckAccount.persistenceCloudSchemaVersion updated SUCCESS {accountID: %{public}@}
ICCSCU: cloudSchemaCatchUpSyncDidComplete: Update ckAccount.persistenceCloudSchemaVersion FAILED {accountID: %{public}@}
ICCSCU: this cloud object is an entity that needs to run CloudSchemaCatchUpSync {entity: %{public}@, identifier: %{public}@, persistenceVersion: %lld, runtimeVersion: %lld}
rem_log_fault_if(!context) -- Expected non-nil value for managedObjectContext
Nil cloud state for %@. Sorry. Fixing now.
Failed to find cloud account for %@ %@
_setCKIdentifierIfNecessary: .identifier.UUIDString is nil %{public}@ %{public}@ %{public}@
_setCKIdentifierIfNecessary: .ckIdentifier is still nil %{public}@ %{public}@ %{public}@
(object.ckIdentifier: %{public}@, accountID: %{public}@) is in batchFetchHelper missing cache
(object.ckIdentifier: %{public}@, accountID: %{public}@) does not correspond to a batchFetchHelper cachedManagedObject
objectWithRecordID: (object.ckIdentifier: %{public}@, accountID: %{public}@) with nil account
objectWithRecordID: (object.ckIdentifier: %{public}@, accountID: %{public}@) has nil account even after fixed up
objectWithCKIdentifier zone mismatched: { recordName: %{public}@, zoneOwner: %{public}@ }, but found zoneOwner: %{public}@
Missing ckIdentifier. Failed to get failedToSyncCount
Missing ckIdentifier. Failed to set failedToSyncCount
Missing ckIdentifier. Failed to get numberOfPushAttemptstoWaitCount
Missing ckIdentifier. Failed to set numberOfPushAttemptstoWaitCount
%@ failed to be pushed. Incrementing failedToSyncCount, failure (%d/%d) before being temporarily ignored. (%d/%d) before deleting change tokens and full re-sync. %@
Decrementing failure counts for %@, %d push attempts before it is retried. %@
Failed to sync %@ %d times. Now resetting failure counts, deleting change tokens, and trying full re-sync. %@
%@ failed to be pushed %d times. Max number of retries is %d. It will now be ignored for %d push attempts. %@
CKIdentifier is undefined. This should not happen since [_setCKIdentifierIfNecessary] should set it already { class: %{public}@, objectID: %{public}@, identifier: %{public}@}
Trying to get recordID with no context %{public}@ %{public}@
Trying to get recordID with no record name %{public}@ %{public}@
Trying to get recordID with empty record name %{public}@ %{public}@
Trying to get recordID with no zone name %{public}@ %{public}@
Returning NO for -_isInICloudAccount because the account of this CD object has disabled syncing {self: %@, account: %@}
Cannot get CK account for newCloudObjectForRecord {record: %{public}@, accountID: %{public}@, class: %{public}@}
newObjectWithCKIdentifier attempted to create an instance from an abstract entity {class: %{public}@, ckIdentifier: %{public}@}
rem_log_fault_if(!entityName) -- Unexpected error: cdEntityName name not defined
rem_log_fault_if(!entityName) -- Unexpected error: entity name not defined
newObjectWithCKIdentifier attempted to create a REMCDAccount CD object with ckIdentifier: %{public}@}
newObjectWithCKIdentifier attempted to create a non REMCDAccount CD object with nil account {class: %{public}@, ckIdentifier: %{public}@}
newObjectWithCKIdentifier attempted to create a CD object with nil account ckIdentifier {class: %{public}@, ckIdentifier: %{public}@}
rem_log_fault_if(!newObject) -- Unexpected error: Could not create and insert new object with {entity: %{public}@, ckIdentifier: %{public}@, account.ckID: %{public}@}
Unable to decode UUID string %@, will generate a random one. Expect something not working.
rem_log_fault_if(!batchFetchHelper) -- Unexpected error: batchFetchHelper not defined
Creating REMCDObject for CloudKit: %{public}@ .identifier=%{public}@ .ckIdentifier=%{public}@ .daCalendarItemUniqueIdentifier=%{public}@ .account.ckIdentifier=%{public}@
Should not call +allCloudObjectsPredicate on the abstract 'REMCDObject' class as a unified predicate for both REMCDAccount and non-REMCDAccount does not exist. Returning nil predicate... {stack: %{public}@}
Trying to create record without record ID for %@
Not creating cross-zone parent record relationship from %{public}@ %{public}@ to parent %{public}@ %{public}@
Error encoding resolution token map of CDObject {CDObject: %@}
rem_log_fault_if(![record.recordType isEqual:self.recordType]) -- Record type {%{public}@} to be merged must match object record type {%{public}@}
Setting %{public}@ marked for deletion when merging data from record
Setting mergeDataRefusedToMergeMarkedForDeletion=YES for %{public}@ when merging data from record
Setting mergeDataRevertedLocallyMarkedForDeletion=YES for %{public}@ when merging data from record
REMCDObjectSystemFieldsMerging: Calling +mergeSystemPropertiesIntoCDObject:fromCKRecord: {class: %@, identifier: %@}
REMCDObjectSystemFieldsMerging: Duck typing failed to work. We are expecting REMCDObject must be conforming to REMCDObjectSystemFieldsMerging {class: %{public}@, identifier: %{public}@}
Shared object was deleted %@
Marking %@ for deletion after being deleted from cloud by another device
accountID is nil or empty in objectFailedToBePushedToCloudWithOperation %{public}@, accountID: %{public}@
Invalid cached server record in account ID %{public}@: %@ %{public}@: %@
Server record changed (needs refetch) in account ID %{public}@: %@ %@: %@
Server record changed in account ID %{public}@: %@ %{public}@: %@
Server record changed with no server record in the error in account ID %{public}@: %{public}@ %{public}@: %@
Reference violation for server record in account ID %{public}@: %@ %{public}@: %{public}@
Error pushing in account ID %{public}@: %@ %{public}@: %@
Tried to cache a record that is older than or equal to our current version: %@
Object fetched from cloud and is an entity that should perform CloudSchemaCatchUpSync, force merging data from CKRecord {accountID: %{public}@, remObjectID: %{public}@}
Record fetched from server is older or equal to the saved record on device: %@
Object fetched does not have a share removing our severShare: %@
Not merging fetched record with same change tag %@
Deleting shared %@ because it no longer exists in cloud
Error writing temporary asset file: %@
Error creating temporary assets directory: %@
Error deleting file for temporary asset: %@
Error while enumerating all temporary asset files: %@
Error deleting temporary asset file: %@
Trying to purge CDObject with a read only persistent store {CDObject: %@}
Marking %@ for deletion
Unmarking %@ for deletion
Setting markedForDeletion %d on {identifier: %{public}@, cdEntity: %{public}@}
updateParentReferenceIfNecessary: self.parentCloudObject.recordID is nil %{public}@ %{public}@ %{public}@ %{public}@ %{public}@
Server record for %@ has no parent, but expects one. Re-saving record.
Server record for %@ parent %@ is different from expected parent %@. Re-saving record.
Updating sharees for %@ is not supported
No server share for %@, setting to %@
Existing server share for %@ %@ has the same change tag as %@
Existing server share for %@ %@ is newer than %@
Replacing old server share for %@ %@ with %@
Undeleting shared %@
setCkServerRecord: Clearing serverRecord for: %{public}@
Update shared object's owner names {class: %@, ownerName: %@}
Missing managed object context for updating owner name for %@ %@
Missing account for updating owner name for %@ %@
Missing account.ckIdentifier for updating owner name for %@ %@
Error decoding resolution token map of CDObject {CDObject: %@}
isEligibleInCloudObjectForLocalObjectMerge: found an REMCDObject that isInCloud && shouldAttemptLocalObjectMerge {objectID: %{public}@, hasServerRecord: %{public}@}
isEligibleInCloudObjectForLocalObjectMerge: this REMCDObject is NOT isInCloud {objectID: %{public}@, hasServerRecord: %{public}@}
Called cdEntityName on REMCDAudioAttachment. We don't have a way to create these from the API. How did we get here?
REMCDHashtagLabel.validateForInsert: { id: %{public}@, name: %@, uuidForChangeTracking: %{public}@ } with invalid nil or empty accountIdentifier: %{public}@
REMCDHashtagLabel.validateForInsert_Swift: { id: %{public}@, name: %@, uuidForTracking: %{public}@, error: %{public}@ }
Cannot return an -remChangedObjectID because this REMCDHashtagLabel object has no UUID {mid: %{public}@}
Warning: Calling super (REMCDObject's) -isConnectedToAccountObject:, make sure this model class implements proper connection to the account to avoid being auto marked as deleted {self: %@}.
Not an REM change tracking allowlisted entity, excluding this entity from change tracking? (%{public}@)
Changed object does not conform to REMChangeTrackingIdentifiable is excluded from change tracking (%{public}@)
JSONPropertiesMigration BEGIN {store: %@}
Failed to fetch objects. Migration failed {error: %@}
Saving batch {updatedObjectsCount: %ld, totalMigratedCount: %ld}
Failed to save batch. Migration error {error: %@}
Failed to save last object. Migration error {error: %@}
JSONPropertiesMigration END {totalMigratedCount: %ld, totalListCount: %ld, migratedAccount: %d. migratedListsCount: %ld, store: %@}
Unable to create REMCRMergeableOrderedSet. Skipipng listIDsMergeableOrdering migration {error: %@, cdAccount: %@}
Failed to create NSUUID from item in legacyOrderedSet. Skipping {item: %@}
Unable to migrate legacyOrderedSet. Skipping listIDsMergeableOrdering migration {error: %@, cdAccount: %@}
cdList missing account. Skipping reminderListOrdering migration {cdList: %@}
Unable to create REMCRMergeableOrderedSet. Skipipng reminderListOrdering migration {error: %@, cdList: %@}
Unable to migrate legacyOrderedSet. Skipping reminderListOrdering migration {error: %@, cdList: %@}
earliestChangeTokenForAccountID: COREDATA NSPersistentHistoryChangeRequest FAILED {author: %{public}@, error: %@}
earliestChangeTokenForAccountID: could not get a PHT token from fetch result {author: %{public}@, nsTransactions: %@}
CT Implementation: getTrackingStateWithClientID:%@
CT Implementation: saveTrackingState {state: %@, clientID: %{public}@}
Couldn't archive REMChangeToken to save tracking state for {clientID: %{public}@, encodeError: %@}
Couldn't get a persistence store to save tracking state for {clientID: %{public}@}
Failed to save tracking state to CoreData with error %@
rem_log_fault_if(transactionFetchLimit > 0 && entityNames.count > 0) -- transactionFetchLimit and entityNames are incompatible with each other and cannot be set at the same time
Failed to find entity name in -fetchHistoryAfterToken:entityName: {name: %{public}@}
Could not encode CD object into plist data {objectID: %@, error: %@, dictionary: %@}
rem_log_fault_if(!error) -- Attempting to get errorChangeSet with nil error.
COREDATA NSPersistentHistoryChangeRequest FAILED {author: %{public}@, error: %@}
rem_log_fault_if(!historyResult) -- Failed to get HistoryResult from request {request: %@}
COREDATA NSPersistentHistoryChangeRequest EXECUTED {author: %{public}@, txn.count: %llu}
REMNSPersistentHistoryTransaction has no storeID {transaction: %@}
Failed to get account objectID from storeID {storeID: %@}
Failed to get entity name from persistent history change {change: %@}
Changed object does not conform to REMChangeTrackingIdentifiable, skip resolving objectID {mID: %{public}@, change: %@}
Changed object has nil remChangedObjectID {mID: %{public}@, change: %@, managedObject: %@}
We may have found a race condition where object got deleted in context before we could fetch a deletion change history! {mID: %@}
Could not find the REMChangedObjectIdentifying ID of the managed object previously deleted in the same change set {mID: %@, change: %@}
rem_log_fault_if(!res) -- nil persistent history result {request: %@}
Failed fetch request to get REMCDTrackingState for {clientID: %{public}@, error: %@}
rem_log_fault_if(cdTrackingStates.count > 1) -- Unexpectedly found more than 1 entry of REMCDTrackingState for {clientID: %{public}@}
Unexpected nil lastConsumedChangeTokenData from the fetched REMCDTrackingState entry for {clientName: %@, accountIdentifier: %@}
Couldn't unarchive REMChangeToken from an REMCDTrackingState for {clientName: %@, accountIdentifier: %@, decodeError: %@}
Failed fetch request to get REMCDAuxiliaryChangeInfo {identifier: %@, error: %@}
Could not find REMCDAuxiliaryChangeInfo with {identifier: %@}
-[REMCDObjectTreeProcessorDelegate preprocessTreeNode:] Unknown node type {type: %{public}@}
rem_log_fault_if(sharedSettings != nil) -- Sync settings have already been initialized. {sharedSettings: %@}
[%{public}@] prepareForDeletion {attachmentID: %{public}@}
[%{public}@] Cannot obtain RDStoreControllerManagedObjectContext from attachment {attachmentID: %{public}@}
[%{public}@] Cannot obtain identifier from attachment {moid: %{public}@}
[%{public}@] Cannot obtain account identifier from attachment {attachmentID: %{public}@}
rem_log_fault_if(!backingCDObject) -- invalid nil value for '%s'
REMCDObjectEffectiveVersionValidationDelegateImpl.preprocessTreeNode: Failed to fetch managed object {mid: %{public}@, error: %{public}@}
REMCDObjectEffectiveVersionValidationDelegateImpl.preprocessTreeNode: Unexpected non-REMCDObject {mid: %{public}@, managedObject.class: %{public}@}
REMCDObjectEffectiveVersionValidationDelegateImpl.preprocessTreeNode: Unexpected non-REMCDObject {mid: %{public}@}
REMCDObjectEffectiveVersionValidationDelegateImpl.preprocessTreeNode: Incorrect node type passed to REMCDObjectEffectiveVersionValidationDelegateImpl {type: %{public}@}
REMCDObjectEffectiveVersionValidationDelegateImpl.processBatchOfTreeNodes: SAVE COREDATA ERROR {author: %{public}@, nodesToFlush.count: %ld, update.count: %ld, error: %{public}@}
REMCDObjectEffectiveVersionValidationDelegateImpl.processBatchOfTreeNodes: SAVE COREDATA {author: %{public}@, nodesToFlush.count: %ld, update.count: %ld}
REMCDObjectEffectiveVersionValidationDelegateImpl.processBatchOfTreeNodes: No changes in MoC, no need to save {author: %{public}@, nodesToFlush.count: %ld}
-[REMCDObjectTreeProcessorDelegate processBatchOfTreeNodes:] Unexpectedly processes a node with nil REMCDObject {node: %{public}@}
manual processBatchOfTreeNodes does not actually save
Called fetchRequest on REMCDObject. This will only fetch objects in SQLite table named 'ZREMCDOBJECT', but not those in other SQLite tables. {callstack: %@}
Trying to insert object in mutableArray at negative index %ld
Trying to insert object in mutableArray at index (%ld) greater than count (%ld)
rem_log_fault_if(!entityName) -- Nil NSManagedObject.entity.name {mangedObject: %@}
Error fetching server change tokens: %@
Using existing share for %@
No existing share for %@
Trying to get root record for %@, but we don't have a server record. This likely won't work.
Created share %@ with existing share reference for %@
Created share %@ for %@
Trying to populate share %@ with no record type for %@
Checking for an existing share for %@
Checking for share on %@ serverShare=%@ serverRecord.share=%@
Have a share that wasn't persisted for %@
Not checking parent object %@ for %@ because it's not in the same zone (object in %@ and parent in %@)
Preparing share %@ for %@
Finished waiting for operations before preparing share for %@
rem_log_fault_if(!object) -- invalid nil value for '%s'
No root record for %@
Retrying to save share for %@
Using saved server share when retrying %@
Trying to saveShare with nil or empty accountID: ckIdentifier: %{public}@, share: %@, rootRecordID: %@
Saving Share: %@ with root record: %@ %{public}@ %{public}@
Partial failure saving share for %@ %@
Error saving share for %@ when saving record ID %@ %@: %@
Saving server record %@ for %@ %@
Saving server share %@ for %@ %@
Server record %@ is not a share %@
No server record from error saving share for %@ %@ %@
Error saving share %@ for %@ %@: %@
Saved share %@ %@
No CKShare or error returned for %@ %@
Trying to fetchShareIfNecessaryForObject with nil or empty accountID: object ckIdentifier: %{public}@
Need to fetch share %@ for %@
Fetching share %@ with %@
Fetched share %@ %{public}@ %{public}@
Error fetching share %@ %@: %@
Setting server share on %{public}@ %{public}@ %@
Couldn't find cloud object for share %@
No record type in share %@
No root record reference for share %@
didStopSharing: Invalid arguments, share or recordID must be non-nil.
User stopped sharing %@ %@
User removed themselves from shared %@ %@
Accepting share for metadata %@
Accepting share: Accounts detected. Fetching container and accountID.
Accepting share: Single account or unable to fetch container. Using containerWithIdentifier.
Accepting share: Unable to fetch account ID. Using primaryCloudKitAccountInContext. userRecordName=%{public}@, containers.count=%lu
Accepting share: Couldn't find container for metadata %@
Accepting share: Couldn't find account id for container %@
Accepting share: Found existing object %@ for share metadata %@
Accepting share: No existing object for share metadata %@
containerForUserRecordID accountIDs=%{public}@
containerForUserRecordID containerUserRecordName=%{public}@
Must have an account ID to get container.
rem_log_fault_if(!shareURL) -- invalid nil value for '%s'
Accepting shared object at URL: %@, account ID = %{public}@
Error accepting share at URL %@ %@: %@
Share accepted for URL %@ %@
Fetching record from share %@, account ID = %@
Error fetching record from share %@: %@
Fetched record from share %@
Using share from per-share completion block %@: %@
Falling back to share from metadata %@: %@
No root record when accepting share: %@
Accepting %@ with %@
SAVE COREDATA ERROR {author: %{public}@, insert.count: %ld, update.count: %ld, delete.count: %ld, error: %{public}@}
SAVE COREDATA {author: %{public}@, insert.count: %ld, update.count: %ld, delete.count: %ld}
Performed save with nil author
COREDATA REQUEST {author: %{public}@, request: %@}
COREDATA REQUEST ERROR {author: %{public}@, request: %{public}@, error: %{public}@}
FETCH COREDATA REQUEST {author: %{public}@, request: %@}
FETCH COREDATA ERROR {author: %{public}@, entityName: %{public}@, error: %{public}@}
BATCH FETCH COREDATA {elapsedTime: %.9lf, author: %{public}@, entityName: %{public}@, result.count: %ld, affectedStores.count: %ld, persistentStoreCoordinator.persistentStores.count: %ld, propsToFetch.count: %ld, fetchBatchSize: %ld}
FETCH COREDATA {elapsedTime: %.9lf, author: %{public}@, entityName: %{public}@, result.count: %ld, affectedStores.count: %ld, persistentStoreCoordinator.persistentStores.count: %ld, propsToFetch.count: %ld}
Performed fetch with nil author
FETCH COUNT COREDATA REQUEST {author: %{public}@, request: %@}
FETCH COUNT COREDATA ERROR {author: %{public}@, entityName: %{public}@, error: %{public}@}
FETCH COUNT COREDATA {elapsedTime: %.9lf, author: %{public}@, entityName: %{public}@, count: %ld, affectedStores.count: %ld, persistentStoreCoordinator.persistentStores.count: %ld}
Entity has nil name {entity: %{public}@}
[entity-height-in-MoM-tree] node.entity=%{public}@, node.entity.relationships=%{public}@
sTopologicallyWeightedEntities = %{public}@
REMSupportedVersionUpdating: VALIDATING dirty MOIDs for effectiveMinimumSupportedVersion {author: %{public}@, dirtyObjectIDs.count: %ld}
Failed to fetch dirty object for effectiveMinimumSupportedVersion validation {managedObjectID: %{public}@, error: %{public}@}
Dirty object for effectiveMinimumSupportedVersion validation is not REMCDObject {managedObjectID: %{public}@}
REMSupportedVersionUpdating: VALIDATION COMPLETED for effectiveMinimumSupportedVersion {author: %{public}@, subtrees.count: %ld, elapsed: %.4f s}
[%{public}@] Failed to acquire persistentStore for account identifier [%{public}@]
[%{public}@] Failed to fetch existing attachments in account [%{public}@] with sha512Sums [%{public}@]. Not purging any attachments for this account.
[%{public}@] Failed to obtain RDStoreController
[%{public}@] Failed to obtain fileIOWorkerQueue
[%{public}@] after save {attachmentIDs.count: %ld}
[%{public}@] Purge attachment files failed {accountID: %{public}@, code: %ld, error: %@, attachmentIDs: %{public}@, purged: %{public}@}
[%{public}@] Purged attachment files for {accountID: %{public}@, attachmentIDs.count: %ld, purged.count: %ld}
[%{public}@] Purge attachment files failed {accountID: %{public}@, code: %ld, error: %@, fileNames: %{public}@, purged: %{public}@}
[%{public}@] Purged attachment files for {accountID: %{public}@, fileNames.count: %ld, purged.count: %ld}
Not going to create CoreSpotlight delegate for store description because it doesn't exist in the PSC {coordinator: %@}
CoreSpotlight delegates are not activated. Will delay starting delegates {store: %@, coordinator: %@, associatedDelegate: %@}
Failed to create RDCoreDataCoreSpotlightDelegate {exception: %@, storeDescription: %@}
The store doesn't have coreSpotlightExporter {store: %@, coordinator: %@}
Failed to remove Spotlight indices for store {error: %@, store: %@, coordinator: %@}
CoreSpotlight indexing is not enabled. Skipping activating CoreSpotlight delegates.
CoreSpotlight delegates has already been activated. -activateCoreSpotlightDelegates should be called only once.
Activating CoreSpotlight delegates {coordinator: %@}
The store does not have an associated CoreSpotlight delegate. This is expected if (and only if) the store has been requested to be removed. {store: %@, coordinator: %@}
The store already has an active CoreSpotlight delegate {store: %@, coordinator: %@, activeDelegate: %@, associatedDelegate: %@}
Executing pending reindex all request {coordinator: %@}
Executing pending reindex items request {coordinator: %@, identifiers: %@}
Stopping CoreSpotlight delegates {coordinator: %@, stores: %@}
The store does not have an active CoreSpotlight delegate {store: %@, coordinator: %@}
The store does not have an associated CoreSpotlight delegate {store: %@, coordinator: %@}
Received request to -reindexAllSearchableItems {coordinator: %@}
The spotlight delegates are not activated yet. Going to defer reindexing all. {coordinator: %@}
Received request to -reindexSearchableItemsWithIdentifiers: {coordinator: %@, identifiers: %@}
The spotlight delegates are not activated yet. Going to defer reindexing items. {coordinator: %@}
Starting CoreSpotlight delegate {store: %@, coordinator: %@, delegate: %@}
The store still doesn't have active CoreSpotlight delegate after kicking start the associated delegate {store: %@, coordinator: %@, associatedDelegate: %@}
rem_log_fault_if(![NSStringFromClass([REMCDAttachment class]) isEqualToString:NSStringFromClass(self)]) -- A subclass of REMCDAttachment called '- [REMCDAttachment cdEntityName]'. The subclass should override this method. {callstack: %@}
Canceling operation: %@
[init] Error occured when loading accounts from disk {error: %{public}@}
[init] Error occured trying to delete all spotlight indices. Will not enable CoreSpotlight delegates {error: %{public}@}
Deallocating RDStoreController {pointer: %p, containerURL: %{private}@}
[loadAccountStoresFromDisk] Failed to discover account identifiers on disk. {error: %{public}@}
[loadAccountStoresFromDisk] Number of PSC loaded stores is not the same as our account store map entry count! {pscStoresCount: %ld, accountStoreMapCount: %ld}
[loadPPTStoreStatus] Found ppt sentinel. Marking as PPTStore {pptSentinelURL: %{private}@}
[loadPPTStoreStatus] Store was marked as PPT but sentinel is gone. Marking a non-PPTStore {pptSentinelURL: %{private}@}
Before getting files from URL {url: %{private}@}
Done getting files from URL {url: %{private}@, count: %ld}
[discoverAccountStoreURLsFromFilesOnDisk] Failed to get file size {file: %{public}@, error: %{public}@}
[discoverAccountStoreURLsFromFilesOnDisk] Failed to fetch store metadata for sqlite file due to disk full {file: %{public}@, error: %{public}@}
[discoverAccountStoreURLsFromFilesOnDisk] Failed to fetch store metadata for sqlite file {file: %{public}@, error: %{public}@}
[discoverAccountStoreURLsFromFilesOnDisk] Considering sqlite store on disk... {storeURL: %{public}@, identifier: %{public}@, isInit: %d, markedAsDeleted: %d, supported: %d}
[discoverAccountStoreURLsFromFilesOnDisk] The store sqlite file is neither initialized or marked as deleted. The file is probably corrupted. Will delete the file if <= 4096 bytes (i.e. empty) {file: %{public}@, url: %{public}@}
[discoverAccountStoreURLsFromFilesOnDisk] Unsupported storeURL. DELETING {store: %{public}@, identifier: %{public}@, url: %{public}@}
[discoverAccountStoreURLsFromFilesOnDisk] WARNING that we're loading a large database exceeding 50MB, large database is suboptimal in every way {fileSize: %lu, store: %{public}@, identifier: %{public}@, url: %{public}@}
[discoverAccountStoreURLsFromFilesOnDisk] Found sqlite file in RDStoreController.databaseDirectoryURL doesn't have prefix RDPathComponentStoreFilePrefix {file: %{public}@}
[discoverAccountStoreURLsFromFilesOnDisk] Failed to get filename from sqlite file in RDStoreController.databaseDirectoryURL {file: %{public}@}
[discoverAccountStoreURLsFromFilesOnDisk] Deleted store files marked for deletion in previous launches {removed.stores.count: %ld, removed.files.count: %ld}
[discoverAccountStoreURLsFromFilesOnDisk] Failed to delete (some) store files marked for deletion in previous launches {storesToRemove.count: %ld, removed.files.count: %ld, error: %{public}@}
[discoverAccountStoreURLsFromFilesOnDisk] Finished discovering account identifiers on disk {file.count: %ld, storeURLs.count: %ld, deletedStores.count: %ld}
[discoverAccountStoreURLsFromFilesOnDisk] Failed to enumerate files in RDStoreController.databaseDirectoryURL - Failed to load accounts from disk {error: %{public}@, databaseDirectoryURL: %{private}@}
[loadAccountStoresFromDisk] Added store URL to pending batch {url: %@}
[loadAccountStoresFromDisk] Flusing batch {idx: %ld, batch: %ld, storeURLs.count: %ld}
[loadAccountStoresFromDisk] Loaded accounts from disk {batch: %ld, batchSize: %ld, urls: %{public}@, accountIdentifiers: %{public}@}
[loadAccountStoresFromDisk] Failed to load accountStoreFromDisk. {batch: %ld, batchSize: %ld, urls: %{public}@, error: %{public}@}
[loadAccountStoresFromDisk] Loaded an account store with no store identifier, can't add to store controller {store: %{public}@}
[loadAccountStoresFromDisk] candidates stores to validate... {candidateStores.count: %ld}
[loadDummyStoreIfNeeded] Local store is not loaded to the PSC. Probably it's corrupted and failed to load. Going to delete the file and reload again. {error: %{public}@}
[loadDummyStoreIfNeeded] Failed to delete local store file {error: %{public}@}
[loadDummyStoreIfNeeded] Failed to load local store {error: %{public}@}
[loadDummyStoreIfNeeded] Re-created and loaded local store {store: %{public}@}
[loadDummyStoreIfNeeded] Still unable to load local store after deleting and reloading.
[addValidatedStoresToAccountStoreMapWithStores] Impossible: Unexpected nil store from validStoresByAccountIDs map {accountID: %{public}@}
[addValidatedStoresToAccountStoreMapWithStores] Found duplicated stores for the same account, treating one of them as invalid {accountID: %{public}@, valid: storeid=%{public}@ %@, invalid: storeid=%{public}@ %@}
[addValidatedStoresToAccountStoreMapWithStores] Adding valid store to accountStoreMap {accountID: %{public}@, store.URL: %{public}@}
[addValidatedStoresToAccountStoreMapWithStores] Processing invalid stores, either to delete immediately or mark as deleted {shouldDeleteInvalidStoresImmediately: %d, count: %ld}
[_validateAccountStores] RDCDAccountTypeKey from [REMCDAccount fetchRequest] yields no result unexpectedly {accountID: %{public}@, store: %@}
[_validateAccountStores] Found corrupted store with unkwown account type {accountID: %{public}@, store: %@}
[_validateAccountStores] Found duplicated stores for the same account, treating one of them as invalid {accountID: %{public}@, valid: storeid=%{public}@ %@, invalid: storeid=%{public}@ %@}
[_validateAccountStores] Found store with no REMCDAccount. Going to disconnect and destroy {store: %@}
[_validateAccountStores] Found corrupted store with %ld REMCDAccount objects {accountIDs: %{public}@, store: %@}
[_validateAccountStores] Error fetching account ID from store {error: %{public}@, store: %@}
[_validateAccountStores] Validate results {input.count: %ld, valid.count: %ld, invalid.count: %ld, valid.accountIDs: %{public}@}
[_deduplicateLocalAccountStore] {storeToDrop: %{public}@, store1: {id=%{public}@, lastEdit=%{public}@}, store2: {id=%{public}@, lastEdit=%{public}@}
[removeFromPersistentStoreCoordinatorAndDeleteImmediately] Attempted to delete stores immediately in situations other than -init. Abort. {isolated: %d}
[removeFromPersistentStoreCoordinatorAndDeleteImmediately] Removed store from PSC {storeURL: %{public}@}
[removeFromPersistentStoreCoordinatorAndDeleteImmediately] Failed to remove store from PSC {storeURL: %{public}@, error: %{public}@}
[removeFromPersistentStoreCoordinatorAndDeleteImmediately] Deleted store files immeidately {count: %ld}
[removeFromPersistentStoreCoordinatorAndDeleteImmediately] Failed to delete (some) store files immeidately {error: %{public}@}
[MIGRATE STORES] BEGIN {stores.count: %ld}
RDStoreControllerMigrator: [MIGRATE STORE] Store URL is nil {identifier: %{public}@}
RDStoreControllerMigrator: [MIGRATE STORE] Skipping local dummy store {storeURL: %{public}@}
RDStoreControllerMigrator: [MIGRATE STORE] BEGIN {storeURL: %{public}@}
RDStoreControllerMigrator: [MIGRATE STORE] END {storeURL: %{public}@}
RDStoreControllerMigrator: [MIGRATE STORE] Did update stores metadata
RDStoreControllerMigrator: [MIGRATE STORE] ERROR: Failed to flush stores metadata {error: %{public}@, updatedStores: %@}
RDStoreControllerMigrator: [MIGRATE STORES] END {updatedStoreURLs.count: %ld, updatedStoreURLs: %{public}@}
[_removeFilesOfStoresAtURLs] Failed to get store directory content from {storeDir: %{public}@, store.url: %{public}@, error: %{public}@}
[_removeFilesOfStoresAtURLs] Obtained store directory content from {storeDir: %{public}@, store.url: %{public}@}
[_removeFilesOfStoresAtURLs] Obtained store directory content cached for {storeDir: %{public}@, store.url: %{public}@}
[_removeFilesOfStoresAtURLs] Unexpected nil store directory URL {store.url: %{public}@}
[_removeFilesOfStoresAtURLs] Removed store file {filename: %{public}@, storeUrl: %{public}@}
[_removeFilesOfStoresAtURLs] Failed to remove store file at {filename: %{public}@, storeUrl: %{public}@, error: %{public}@}
[addValidatedStoresToAccountStoreMapWithStores] storeURL or invalidStoreBackupURL is nil {storeURL: %@, backupURL: %@}
[addValidatedStoresToAccountStoreMapWithStores] Error backing up invalid store sqlite {store: id=%{public}@ %@, backupURL: %@}
[addValidatedStoresToAccountStoreMapWithStores] Error backing up invalid store sqlite-wal {store: id=%{public}@ %@, backupURL: %@}
[addValidatedStoresToAccountStoreMapWithStores] Error backing up invalid store sqlite-shm {store: id=%{public}@ %@, backupURL: %@}
[addValidatedStoresToAccountStoreMapWithStores] Created back up of invalid store {store: id=%{public}@ %@, backupURL: %@}
Creating clones of store before performing staged lightweight migration for store. {storeURL: %{public}@, isInternalInstall: %{public}@, storeBackupURL: %{public}@, storeCloneURL: %{public}@}
Failed to create clone of store before performing staged lightweight migration for store. {storeURL: %{public}@, destinationStoreURL: %{public}@, error: %{public}@}
Created clone of store before performing staged lightweight migration for store. {storeURL: %{public}@, destinationStoreURL: %{public}@}
Failed to perform staged lightweight migration on store clone. {storeURL: %{public}@, storeCloneURL: %{public}@, error: %{public}@}
Performed staged lightweight migration on store clone. Will replace store with store clone. {storeURL: %{public}@, storeCloneURL: %{public}@}
Failed to replace store with store clone. {storeURL: %{public}@, storeCloneURL: %{public}@, error: %{public}@}
Failed to delete stores. {storeURLsToDelete: %{public}@, error: %{public}@}
Deleted stores. {storeURLsToDelete: %{public}@}
[_persistentStoreConnectionPoolMaxSizeWithTotalStoreCount] {totalStoreCount: %ld, result: %ld}
Error fetching stores from account types {error: %{public}@, types: %{public}@}
[createAccountStoresWithIdentifiers] Identifier already loaded -- skipping {identifier: %{public}@}
[createAccountStoresWithIdentifiers] No account is missing. No need to load missing accounts
[createAccountStoresWithIdentifiers] Add persistentStores BEGIN {identifiersToAdd.count: %ld, accountStoreMap.count: %ld, connectionPoolMaxSize: %ld}
[createAccountStoresWithIdentifiers] Failed to set account identifier into metata {identifier: %{public}@, error: %@, store: %@}
[createAccountStoresWithIdentifiers] Add persistentStores END {accountStoreMap.count: %ld, newStores.count: %ld, lastError: %{public}@}
[createOrLoadAccountStores] Trying to load more stores than the maximum we allow. Bailing. {limit: %ld, loaded.count: %ld}
[createOrLoadAccountStores] WARNING We are now loading more stores than the maximum limit. Allowed though because we have passed the initial load-from-disk stage. {limit: %ld, loaded.count: %ld}
[createOrLoadAccountStores] Will add store {storeURL: %{public}@, optionsOverride: %{public}@}
[createOrLoadAccountStores] didAdd store {fileName: %{public}@, connectionPoolMaxSize: %{public}@, addedStoreDescription: %@}
[createOrLoadAccountStores] Failed to add store {error: %@, fileName: %{public}@}
[removeAccountStoresWithIdentifiers] Tried to remove store for unknown account -- skipping {accountIdentifier: %{public}@}
[removeAccountStoresWithIdentifiers] Going to remove store for account {accountIdentifier: %{public}@, store: %@}
[removeAccountStoresWithIdentifiers] Successfully removed store for account {accountIdentifier: %{public}@}
[removeAccountStoresWithIdentifiers] Failed to remove store for account {accountIdentifier: %{public}@}
[markAccountStoreDeleted] Marking account store as deleted {store: %@}
[markAccountStoreDeleted] Failed to mark account store as deleted {store: %@, error: %{public}@}
[markAccountStoreDeleted] Failed to obtain accountIdentifier from store {accountIdentifier: %{public}@, store: %@}
[markAccountStoreDeleted] Deleting spotlight indices {store: %@}
[markAccountStoreDeleted] Going to delete objects for entity {entity: %@, store: %@}
[markAccountStoreDeleted] Failed to delete objects for entity {entity: %@, store: %@, error: %{public}@}
[markAccountStoreDeleted] Done deleting objects for entity {entity: %@, store: %@}
[markAccountStoreDeleted] Errors purging account files {error: %@, accountID: %{public}@, store: %@}
[markAccountStoreDeleted] Purged account files for {accountID: %{public}@, store: %@}
RDStoreController nukeData. *** NOTE *** This will only mark database files as deleted without actually deleting the files, as deleting database files while remindd is running is likely to cause a CoreData crash. The files will be deleted the next time remindd launches, or you can run `remindtool nuke`, or manually kill remindd and delete the whole container directory. {containerURL: %@, accountIDToDatabaseFileNameMap: %@}
RDStoreController nukeData completed {allSuccess: %ld, error: %{public}@}
Failed to set query generation token to current {error: %{public}@}
Deleting object from database because it's marked for deletion and its deletion has synced: %@
Error purging deleted objects: %{public}@
[RDStoreController requestFreeSpaceToLoadAccountStores] Files from URL {url: %{private}@, count: %ld, error: %@}
[RDStoreController requestFreeSpaceToLoadAccountStores] Failed to get file size {file: %{public}@, error: %{public}@}
[RDStoreController requestFreeSpaceToLoadAccountStores] File size is {file: %@, size: %@}
[RDStoreController requestFreeSpaceToLoadAccountStores] Trying to request free space (multiplied) {space: %llu, multiplier: %llu}
[RDStoreController requestFreeSpaceToLoadAccountStores] Aborted requesting free space, dispatch to call completion directly
didFetchUserRecord: %@
Received an error that a zone (%{public}@) wasn't found. Re-uploading everything for that zone for accountID %{public}@.
accountID is nil in cloudContext:receivedZoneNotFound:accountID: zoneID %{public}@
Deleting shared %@ for accountID %{public}@
Not deleting shared %@ in wrong zone %{public}@ for account ID %{public}@
userDidDeleteRecordZoneWithID: %{public}@, accountID:%{public}@
accountID is nil in cloudContext:userDidDeleteRecordZoneWithID:accountID: zoneID %{public}@
Error saving after notes zone deleted by user: %@
%@ (%@) hasn't been fully pushed to the cloud. Not deleting.
didFailPushingExceededStorageQuotaForContext: %@, accountID: %{public}@
Deleted object {managedObjectID: %@}
Inserted object {managedObjectID: %@}
Updated object {managedObjectID: %@}
Not creating an RDAccountPersonIDSaltObserver because the system is not ready to retrieve the primary cloudkit account
Not creating an RDAccountPersonIDSaltObserver because primary cloudkit account is not available. Notifying caller explicitly to handle RDAccountPersonIDSaltObserver.AccountAbsentError... {accountID: %{public}@, inactive: %d}
Created an RDAccountPersonIDSaltObserver and added to accountPropertiesNotifier {observerID: %@, accountObjID: %@}
Failed to create an RDAccountPersonIDSaltObserver to add to accountPropertiesNotifier {accountObjID: %@}
Removed RDAccountPersonIDSaltObserver from accountPropertiesNotifier {observerID: %@}
Failed to list contents of store directory {error: %{public}@}
Existing contents of stores diretory:
Store %d: %@
Account storage invocation caches invalidated {reason: %{public}@}
PopulateDefaultValuesMigration BEGIN {store: %@}
Non-optional attribute has no default value. Skipping {entityName: %@, attributeName: %@}
Attribute belongs to super entity. Skipping {entityName: %@, attributeName: %@}
PopulateDefaultValues BEGIN {entity: %@, attributeName: %@}
PopulateDefaultValues END {entity: %@, attributeName: %@, updated.count: %@}
PopulateDefaultValues ERROR {updateError: %@, entity: %@, attributeName: %@}
PopulateDefaultValuesMigration END {store: %@, populateAttributeNames: %@}
rem_log_fault_if(!ckIdentifier) -- invalid nil value for '%s'
rem_log_fault_if(!accountIdentifier) -- invalid nil value for '%s'
Cannot obtain permanent ID for %{public}@ with error: %{public}@
managedObjectContext should not be nil in BatchFatchHelper._canObtainPermanentIDForObject for %{public}@
ICBatchFetchHelper does not need to fetch %{public}@ as it is in missingCKIdentifierCache
ICBatchFetchHelper does not need to fetch %{public}@ as it is already in managedObjectIDCache
ICBatchFetchHelper found object %{public}@ with nil accountIdentifier
Cannot obtain permanent ID for %{public}@
managedObjectContext should not be nil in BatchFatchHelper._flush
%{public}@ perform dispatch block sync took %f s
%{public}@ flush (onCurrentQueue = %d) took %f s
ICBatchFetchHelper: existingObjectWithID %{public}@ with error %{public}@
ICBatchFetchHelper: existingObjectWithID %{public}@ is nil
managedObjectContext should not be nil in BatchFatchHelper.cachedManagedObjectForCKIdentifier for %{public}@
ICBatchFetchHelper: %{public}@ is not in cachedManagedObjectForCKIdentifier
Number of dispatch blocks not run in ICBatchFetchHelper : %lu
REMCDObjectTreeProcessor: START traversing post-order from {rootNode: %{public}@, batchSize: %ld}
REMCDObjectTreeProcessor: 
CYCLIC REFERENCE in object tree detected! Tail node has already been flushed before {tailNode: %{public}@}
REMCDObjectTreeProcessor: 
STATUS {traversalStack.count: %ld, flushQueue.count: %ld, flushed.count: %ld, tailNode: %{public}@}
REMCDObjectTreeProcessor: END traversal for {processed.count: %ld, elapsed: %.4f s, rootNode: %{public}@}
REMCDObjectTreeProcessor: 
FLUSHING {count: %ld}
Error saving context (%{public}@): %{public}@
Error saving context: %{public}@
Saved context: %{public}@
CKParentReminderIdentifierMigration BEGIN {store: %@}
CKParentReminderIdentifierMigration ERROR {updateError: %{public}@}
CKParentReminderIdentifierMigration END {store: %@, updated.count: %ld}
PersonIDSaltGenerator failed to generate random salt with exception: %@.
Failed to fetch CD accounts: %@
Found extended account without CK user record name: %@
Failed to fetch cloud-based accounts: %@
Trying to get a primary active CloudKit account but can't find any
Trying to get a primary active CloudKit account based on the assumption that there should only be at most 1 active (primary) .cloudKit account type object but multiple was found {count: %lu, first.identifier: %@}
CloudKitUtils: No CloudKit REMCDAccount found in the database
CloudKitUtils: Trying to get the primary iCloud ACAccount but can't find any
CloudKitUtils: Found a CloudKit REMCDAccount that matches the primary iCloud ACAccount {cdAccount: %{public}@, acAccount: %{public}@}
CloudKitUtils: Found a PPT fixture CK account, ASSUMED to be matching the primary iCloud ACAccount {cdAccount: %{public}@, acAccount: %{public}@}
CloudKitUtils: Found a primary CloudKit REMCDAccount that does NOT match with the primary iCloud ACAccount, this is unexpected {cdAccount: %{public}@, acAccount: %{public}@}
CloudKitUtils: Found a non-primary CloudKit REMCDAccount that matches the primary iCloud ACAccount, this is unexpected {cdAccount: %{public}@, acAccount: %{public}@}
-accountWithCKIdentifier: fetched an inactive account {ckIdentifier: %{public}@}
cloudKitAccountWithCKIdentifier with nil or empty ckIdentifier
cloudKitAccountWithCKIdentifier with nil context
cloudKitAccountWithCKIdentifier: not in cache, ckIdentifier: %{public}@, all ckIdentifiers: %{public}@
cloudKitAccountWithCKIdentifier: nil context, ckIdentifier: %{public}@, all ckIdentifiers: %{public}@
rem_log_fault_if(![[self accountTypeHost] isPrimaryCloudKit]) -- Generating PersonIDSalt is supported on the primary CloudKit account only
generateAndSavePersonIDSaltIfNeeded...: Could not generate random salt due to system error {accountID: %{public}@}
generateAndSavePersonIDSaltIfNeeded...: Posted RDStoreControllerREMAccountPropertiesDidUpdate {accountID: %{public}@, salt: %@}
generateAndSavePersonIDSaltIfNeeded...: Could not post RDStoreControllerREMAccountPropertiesDidUpdate due to unexpected values {accountID: %{public}@, salt: %@}
generateAndSavePersonIDSaltIfNeeded...: Account .personIDSalt is already set {accountID: %{public}@, salt: %@}
Found cloudKit account without ckIdentifier: %{public}@
DisplayDateMigration BEGIN {store: %@}
DisplayDateMigration END {store: %@}
$s7remindd24RetainedMainDaemonObjectP
So8NSStringC
$sSY
$ss21_ObjectiveCBridgeableP
_pSgG
So17OS_os_transaction_pSg
ySS_yptG
SgXw
qd__SgXwz_
Rld__Cr__lXX
Ieggn_
y_So17OS_dispatch_queueCG
ypSg
_pSg
_pSg
So17OS_dispatch_queueC
ySaySo24REMContactRepresentationCG_G
SgXw
qd__SgXwz_SaySo24REMContactRepresentationCG_
Rld__Cr__lXX
SaySo24REMContactRepresentationCGIeggn_
SaySo24REMContactRepresentationCG
yShy
GADG
yShy
GAEGG
yShy
GAFGGSo17OS_dispatch_queueCG
yShy
GSgXw
_pIegzo_
ySbG
ySaySo17NSManagedObjectIDCGG
ySDySS
_pGG
ySaySo17NSManagedObjectIDC06objectC0_
4datatGG
SaySo17NSManagedObjectIDC06objectC0_
4datatG
SDySS
SaySo17NSManagedObjectIDCG
ySaySo24REMContactRepresentationCG_G
So7NSErrorC
$s10Foundation21_BridgedStoredNSErrorP
$s10Foundation18_ErrorCodeProtocolP
So11REMObjectIDC
ypSiSpy
GSbIgnyyd_
So8NSObjectCSg
SDySo17NSManagedObjectIDC
ypyp
Ignnd_
_pSgIeggg_
_pSgIegng_
_pSgIeggg_
_pSgIeggg_
_pSgIeggg_
$ss12CaseIterableP
$s7remindd23TantorMigrationAPIAsyncP
ySi_
So13CKRecordValue_p
So15REMCDAssignmentCm
So15REMCDAssignmentC
So10CKRecordIDC
Sbz_Xx
ySo11REMObjectIDC
_pGIegg_
XDXMT
yyXlG
So17NSManagedObjectIDC
So17NSManagedObjectIDCSg
So17NSManagedObjectIDCSgz_Xx
SSSg
So8NSObjectC
So8REMColorCm
SDySSypG
So24REMContactRepresentationCm
So8REMColorCSg
Sg_ABt
So11REMObjectIDCSg
SDySo11REMObjectIDCSSGSg
SaySo11REMObjectIDCG
So22UNNotificationResponseC
ySo11REMObjectIDCSo11REMReminderC_G
SbIegy_Sg
SaySo9REMShareeCG
So7REMListC
So17OS_dispatch_groupC
ySo13REMAssignmentCSo11REMReminderC_G
ySS_So8NSObjectCtG
So29REMDAChangedModelObjectResult_p
ySo11REMObjectIDCSaySo13REMAssignmentCG_G
SDySo7REMListCSaySo11REMReminderCGG
SaySo11REMReminderCG
SDySo11REMObjectIDCSaySo13REMAssignmentCGG
SaySo13REMAssignmentCG
ySS_So8NSStringCtG
So29DABabysitterRegistrationTokenCSg
SbSgIegy_Sg
So14REMChangeTokenCSg
SgXw
SaySo25REMDAChangeTrackingHelperCG
SbSg
ySdG
yShyxGc
ShyxG
SayySb_ShyxGtcG
ySo8NSNumberCG
So5NSSetCIeyByy_
So5NSSetCIeyBy_
c_SiSdt
$s7remindd11Completable33_D969633BE2061D27916D1A5EBAC77335LLP
SnySiG
ySo13REMCDReminderCG
So17RDStoreControllerCSgXw
_pSgXw
So24REMAppleAccountUtilitiesC
$s7remindd15PersonIDHashingP
$s7remindd45RDExchangeAccountComplimentaryServiceDelegateP
GSo17OS_dispatch_queueCG
So21DADBuddyStateObserverCSg
So17OS_os_transaction_p
So18REMAccountTypeHostCSbIeggd_
So17OS_dispatch_queueCG
SgXw
SgXwz_Xx
So6NSDataC
SaySSG
SDySSSaySSGG
SDySSSdG
yS2S_G
yS2SG
20serializationVersion_t
SS3key_
yS2S_G20serializationVersiont
yS2S_G20serializationVersion_t
So22REMStoreContainerTokenCSg
_pSgXw
So10NSMapTableCySo5NSURLCSo17RDStoreControllerCG
So7NSErrorCSgIeyBy_
_yptG
So7NSArrayCSo7NSErrorCSgIeyByy_
3key_ShySSG5valuetSg
So19REMCDFileAttachmentC
3key_ShySSG5valuet
SaySo19REMCDFileAttachmentCG
So11REMObjectIDCSgSo7NSErrorCSgIeyByy_
So11REMObjectIDCSg
_pSgIeggg_
So21REMTemplatePublicLinkCSgSo7NSErrorCSgIeyByy_
So21REMTemplatePublicLinkCSg
_pSgIeggg_
So7NSArrayCSgSo7NSErrorCSgIeyByy_
_pSgIegg_
SayypGSg
_pSgIeggg_
So15CNKeyDescriptor_p
So18CNContactFormatterC
So9CNContactCSpy
GIggy_
So14CNLabeledValueC
IeyB_
So16CLCircularRegionC
Ieg_
So7NSArrayCIeyBy_
SaySSGIegg_
ySo8CLRegionC_G
_pSg
So9ACAccountC
_pSgz_Xx
So14ICCloudContextC
SiSo12NSDictionaryCSgSo7NSErrorCSgIeyByyy_
SDyS2SG
SiSDyS2SGSg
_pSgIegygg_
SDyS2SGz_Xx
_pIegg_
SiIegy_
So11REMCDObjectC
So14NSFetchRequestC
So11REMObjectIDC07accountB0_
19completionPredicate
09concealedE0t
ySo13REMCDReminderC
ySo10REMCDAlarmCGG
So10REMCDAlarmC
ySo17REMCDAlarmTriggerCGG
So12DABabysitterC
8listType_SS0A2IDt
So15NSManagedObjectC
So13NSXPCListenerC
So29SBSApplicationShortcutServiceC
ySS_So14NSSecureCoding_ptG
So14NSSecureCoding_p
$s7remindd12AlarmWrapper33_21DE925B29389F3F365F2E7E031C4B64LLP
$s7remindd12NonceBearing33_21DE925B29389F3F365F2E7E031C4B64LLP
$s7remindd17NonceBearingAlarm33_21DE925B29389F3F365F2E7E031C4B64LLP
SdSg
$s7remindd24RDSwiftInvocableProtocolP
$s7remindd13RDEventStreamP
$s7remindd17RDTimeEventStreamP
$s7remindd35RDSharedInlineTagAutoConvertHandlerP
So22NSManagedObjectContextC
So23RDPersistentStoreLookup_p
ShySo12REMCDHashtagCG
So17REMCDHashtagLabelC
SaySo17REMCDHashtagLabelCG
ySo17REMCDHashtagLabelC
So17REMCDHashtagLabelC_
ySo11REMObjectIDCShySSGG
ySo12REMCDHashtagC_G
So18NSAttributedStringC
Gz_Xx
XDXMT
ShySo15NSManagedObjectCG
So12REMTTHashtagC
$s7remindd23DataAccessSyncPerformerP
So8REMStoreCyKc
SgXw
So8CKRecordCSgSo7NSErrorCSgIeyByy_
So8CKRecordCSg
_pSgIeggg_
So12NSDictionaryCSgSo7NSErrorCSgIeyByy_
SDySS
_pSgIeggg_
So18REMMigrationResultCSgSo7NSErrorCSgIeyByy_
So18REMMigrationResultCSg
_pSgIeggg_
So18REMMigrationResultCSg
So18REMMigrationResultCSgz_Xx
Sg_ABt
ySo10REMHashtagC_G
ySo13REMCDReminderCGG
So13REMCDReminderCSg
So10REMCDAlarmCm
So22REMAlarmVehicleTriggerC
So24REMCDAlarmVehicleTriggerC
$s7remindd10CDIngestorP
So23REMAlarmLocationTriggerC
So25REMCDAlarmLocationTriggerC
So19REMAlarmDateTriggerC
So21REMCDAlarmDateTriggerC
So27REMAlarmTimeIntervalTriggerC
So29REMCDAlarmTimeIntervalTriggerC
SS10identifier_t
3pid_SSSg16bundleIdentifierAC11processName
11accessLevelSb17isUserInteractivet
So18REMTemplateStorageC
SgSg
SgSg
Sg_ABt
SgSg_ACt
SgSg
ySo14REMCDSmartListCGG
ySo9REMCDListCGG
SaySo9REMCDListCG
ySo9REMCDListCG
yXlXp
So20NSFetchRequestResult_p
ySo9REMCDListCGG
ySo11REMCDObjectCG
SaySo14REMCDSmartListCG
ySo14REMCDSmartListCG
ySo14REMCDSmartListCGG
SgSg_ACt
SDySSSaySo17REMManualOrderingCGG
G_So15NSManagedObjectCtG
G_ABtG
GACG
ySo11REMObjectIDCSo15NSManagedObjectCG
ySo11REMObjectIDC_G
ySo11REMObjectIDCSo11REMCDObjectCG
ySo11REMCDObjectCG_So15NSManagedObjectCtG
ySo11REMCDObjectCG_ACtG
ySo11REMCDObjectCGADG
ySo11REMCDObjectCG
ySo11REMCDObjectCGG
ySo11REMCDObjectCGG
ySo11REMCDObjectCGG
ySo11REMObjectIDCG
ySo12REMCDAccountCG_So15NSManagedObjectCtG
ySo12REMCDAccountCG_ACtG
ySo12REMCDAccountCGADG
ySo12REMCDAccountCG
SaySo12REMCDAccountCG
ySo12REMCDAccountCGG
ySo12REMCDAccountCGG
ySo12REMCDAccountCGG
SaySo17REMManualOrderingCG
ySo13REMCDReminderCGG
ySSG
15dataSourceAlarm_
8fireDatetSg
15dataSourceAlarm_
8fireDatet
ySo17REMCDAlarmTriggerCG
ySo17REMCDAlarmTriggerCGG
ySo11REMObjectIDC
ySo11REMObjectIDC
ySo11REMObjectIDCSo12REMCDAccountCG
ySo12REMCDAccountCG
ySo12REMCDAccountCGG
ySo11REMCDObjectCG
ySo11REMObjectIDCSo13REMCDReminderCG
ySo13REMCDReminderCG
ySo14REMCDSmartListCGG
ySo9REMCDListCGG
ySo24REMCDAlarmVehicleTriggerCGG
SDySSSaySo13REMAttachmentCGG
G_So15NSManagedObjectCtG
G_ABtG
GACG
SaySo13REMAttachmentCG
ySo25REMCDAlarmLocationTriggerCGG
SDySSSaySo9REMShareeCGG
ySo11REMCDShareeCG_So15NSManagedObjectCtG
ySo11REMCDShareeCG_ACtG
ySo11REMCDShareeCGADG
ySo11REMCDShareeCG
SaySo11REMCDShareeCG
ySo11REMCDShareeCGG
ySo11REMCDShareeCGG
ySo11REMCDShareeCGG
SDySSSaySo21REMCalDAVNotificationCGG
ySo23REMCDCalDAVNotificationCG_So15NSManagedObjectCtG
ySo23REMCDCalDAVNotificationCG_ACtG
ySo23REMCDCalDAVNotificationCGADG
ySo23REMCDCalDAVNotificationCG
SaySo23REMCDCalDAVNotificationCG
ySo23REMCDCalDAVNotificationCGG
ySo23REMCDCalDAVNotificationCGG
ySo23REMCDCalDAVNotificationCGG
SaySo21REMCalDAVNotificationCG
ySo17REMAccountStorageCG
SDySSSaySo18REMTemplateStorageCGG
G_So15NSManagedObjectCtG
G_ABtG
GACG
SaySo18REMTemplateStorageCG
SDySSSaySo19REMSmartListStorageCGG
ySo14REMCDSmartListCG_So15NSManagedObjectCtG
ySo14REMCDSmartListCG_ACtG
ySo14REMCDSmartListCGADG
ySo14REMCDSmartListCGG
SaySo19REMSmartListStorageCG
SDySSSaySo18REMReminderStorageCGG
G_So15NSManagedObjectCtG
G_ABtG
GACG
SaySo18REMReminderStorageCG
ySo13REMCDReminderCG_So15NSManagedObjectCtG
ySo13REMCDReminderCG_ACtG
ySo13REMCDReminderCGADG
ySo13REMCDReminderCG
SaySo13REMCDReminderCG
ySo13REMCDReminderCGG
ySo13REMCDReminderCGG
ySo13REMCDReminderCGG
SDySSSaySo14REMListStorageCGG
ySo9REMCDListCG_So15NSManagedObjectCtG
ySo9REMCDListCG_ACtG
ySo9REMCDListCGADG
ySo9REMCDListCGG
SaySo14REMListStorageCG
SDySSSaySo17REMAccountStorageCGG
SaySo17REMAccountStorageCG
So11REMReminderC_
So11REMReminderC_
ySo8NSNumberCG
Sg_ABt
SgSg_ACt
ySo10CKRecordIDCACG
ySo22UNNotificationCategoryCG
So28RDAccountPropertiesObserving_p
_pSg
ySo11REMObjectIDCSo7REMListCG
ySo6BMRuleCG
ySo19NSEntityDescriptionCG
ySo15NSManagedObjectCG
ySo11REMObjectIDCSo14REMListStorageCG
ySo11REMObjectIDCSo17REMAccountStorageCG
SDySSSaySo8REMAlarmCGG
ySo10REMCDAlarmCG_So15NSManagedObjectCtG
ySo10REMCDAlarmCG_ACtG
ySo10REMCDAlarmCGADG
ySo10REMCDAlarmCG
SaySo10REMCDAlarmCG
ySo10REMCDAlarmCGG
ySo10REMCDAlarmCGG
ySo10REMCDAlarmCGG
SaySo8REMAlarmCG
SDySSSaySo13REMAssignmentCGG
ySo15REMCDAssignmentCG_So15NSManagedObjectCtG
ySo15REMCDAssignmentCG_ACtG
ySo15REMCDAssignmentCGADG
ySo15REMCDAssignmentCG
SaySo15REMCDAssignmentCG
ySo15REMCDAssignmentCGG
ySo15REMCDAssignmentCGG
ySo15REMCDAssignmentCGG
SDySSSaySo16REMURLAttachmentCGG
ySo18REMCDURLAttachmentCG_So15NSManagedObjectCtG
ySo18REMCDURLAttachmentCG_ACtG
ySo18REMCDURLAttachmentCGADG
ySo18REMCDURLAttachmentCG
SaySo18REMCDURLAttachmentCG
ySo18REMCDURLAttachmentCGG
ySo18REMCDURLAttachmentCGG
ySo18REMCDURLAttachmentCGG
SaySo16REMURLAttachmentCG
SDySSSaySo18REMImageAttachmentCGG
ySo20REMCDImageAttachmentCG_So15NSManagedObjectCtG
ySo20REMCDImageAttachmentCG_ACtG
ySo20REMCDImageAttachmentCGADG
ySo20REMCDImageAttachmentCG
SaySo20REMCDImageAttachmentCG
ySo20REMCDImageAttachmentCGG
ySo20REMCDImageAttachmentCGG
ySo20REMCDImageAttachmentCGG
SaySo18REMImageAttachmentCG
SDySSSaySo17REMFileAttachmentCGG
ySo19REMCDFileAttachmentCG_So15NSManagedObjectCtG
ySo19REMCDFileAttachmentCG_ACtG
ySo19REMCDFileAttachmentCGADG
ySo19REMCDFileAttachmentCG
ySo19REMCDFileAttachmentCGG
ySo19REMCDFileAttachmentCGG
ySo19REMCDFileAttachmentCGG
SaySo17REMFileAttachmentCG
SDySSSaySo10REMHashtagCGG
ySo12REMCDHashtagCG_So15NSManagedObjectCtG
ySo12REMCDHashtagCG_ACtG
ySo12REMCDHashtagCGADG
ySo12REMCDHashtagCG
SaySo12REMCDHashtagCG
ySo12REMCDHashtagCGG
ySo12REMCDHashtagCGG
ySo12REMCDHashtagCGG
SaySo10REMHashtagCG
SDySSSaySo17REMRecurrenceRuleCGG
ySo19REMCDRecurrenceRuleCG_So15NSManagedObjectCtG
ySo19REMCDRecurrenceRuleCG_ACtG
ySo19REMCDRecurrenceRuleCGADG
ySo19REMCDRecurrenceRuleCG
SaySo19REMCDRecurrenceRuleCG
ySo19REMCDRecurrenceRuleCGG
ySo19REMCDRecurrenceRuleCGG
ySo19REMCDRecurrenceRuleCGG
SaySo17REMRecurrenceRuleCG
So10BMItemTypeC
ySo10BMItemTypeCG
SDySSSaySo27REMAlarmTimeIntervalTriggerCGG
ySo29REMCDAlarmTimeIntervalTriggerCG_So15NSManagedObjectCtG
ySo29REMCDAlarmTimeIntervalTriggerCG_ACtG
ySo29REMCDAlarmTimeIntervalTriggerCGADG
ySo29REMCDAlarmTimeIntervalTriggerCG
SaySo29REMCDAlarmTimeIntervalTriggerCG
ySo29REMCDAlarmTimeIntervalTriggerCGG
ySo29REMCDAlarmTimeIntervalTriggerCGG
ySo29REMCDAlarmTimeIntervalTriggerCGG
SaySo27REMAlarmTimeIntervalTriggerCG
SDySSSaySo19REMAlarmDateTriggerCGG
ySo21REMCDAlarmDateTriggerCG_So15NSManagedObjectCtG
ySo21REMCDAlarmDateTriggerCG_ACtG
ySo21REMCDAlarmDateTriggerCGADG
ySo21REMCDAlarmDateTriggerCG
SaySo21REMCDAlarmDateTriggerCG
ySo21REMCDAlarmDateTriggerCGG
ySo21REMCDAlarmDateTriggerCGG
ySo21REMCDAlarmDateTriggerCGG
SaySo19REMAlarmDateTriggerCG
SDySSSaySo23REMAlarmLocationTriggerCGG
ySo25REMCDAlarmLocationTriggerCG_So15NSManagedObjectCtG
ySo25REMCDAlarmLocationTriggerCG_ACtG
ySo25REMCDAlarmLocationTriggerCGADG
ySo25REMCDAlarmLocationTriggerCG
SaySo25REMCDAlarmLocationTriggerCG
ySo25REMCDAlarmLocationTriggerCGG
ySo25REMCDAlarmLocationTriggerCGG
ySo25REMCDAlarmLocationTriggerCGG
SaySo23REMAlarmLocationTriggerCG
SDySSSaySo22REMAlarmVehicleTriggerCGG
ySo24REMCDAlarmVehicleTriggerCG_So15NSManagedObjectCtG
ySo24REMCDAlarmVehicleTriggerCG_ACtG
ySo24REMCDAlarmVehicleTriggerCGADG
ySo24REMCDAlarmVehicleTriggerCG
SaySo24REMCDAlarmVehicleTriggerCG
ySo24REMCDAlarmVehicleTriggerCGG
ySo24REMCDAlarmVehicleTriggerCGG
ySo24REMCDAlarmVehicleTriggerCGG
SaySo22REMAlarmVehicleTriggerCG
ySo13REMAssignmentCG
ySo10REMHashtagCG
ySo12REMCDHashtagCG
ySo17REMCDHashtagLabelCG
ShySSSgG
ySo11REMObjectIDCSo10REMHashtagCG
ySo12REMCDHashtagCG
ySo12REMCDHashtagCGG
ySo34REMCDSharedToMeReminderPlaceholderCGG
ySo13REMAssignmentCSo11REMReminderCG
ySo17NSManagedObjectIDCSo15REMCDAssignmentCG
ySo11REMObjectIDCSo8NSNumberCG
ShySo11REMObjectIDCG
ySo11REMObjectIDCSo9REMCDListCG
ySo11REMObjectIDCSo9CNContactCG
So6BMItemC
ySo6BMItemCG
ySo8NSStringCG
ySuG
ySo11REMCDShareeCG
_pSg
ySo17NSManagedObjectIDCSo27REMSharedEntitySyncActivityCG
$s7remindd30REMPreferredDefaultListStorageP
So21REMDaemonUserDefaultsC
ySo9REMCDListCGG
So14REMCDSmartListCm
So14REMCDSmartListC
So17NSPersistentStoreC
XDXMT
$s7remindd13RDJSONCodableP
So7NSCoderC
SaySDySSypGG
SaySayypGG
SS3key_yp5valuetSg
SayypG
ySDySSypGG
So31NSCoreDataCoreSpotlightDelegateC
So14CNContactStoreCSg
ytIegr_
_pSgIegg_Sg
SS10identifier_SS11descriptiont
_pSgXw
$s7remindd29RDHashtagLabelUpdaterDelegateP
So34REMCDSharedToMeReminderPlaceholderC
ySo34REMCDSharedToMeReminderPlaceholderCSo13REMCDReminderCSgG
So12REMCDHashtagC
ySo12REMCDHashtagCSSSgG
ySo12REMCDHashtagCSo13REMCDReminderCSgG
ShySo12REMCDHashtagCGSg
ySo17REMCDHashtagLabelCShySo0A0CGSgG
So28REMDAChangedIdentifierResult_p
ySo12REMCDHashtagC
SDySSSaySo12REMCDHashtagCGG
ySo12REMCDHashtagCGG
y_ACy_
yShy
GAGGGGGSo17OS_dispatch_queueCG
y_ADy_AAy_
yShy
GAGGGGGSo17OS_dispatch_queueCG
y_AEy_ABy_
yShy
GAHGGGGSo17OS_dispatch_queueCG
GAPG
y_AAy_
yShy
GAEGGG
y_ABy_
yShy
GAFGGGG
y_ACy_
yShy
GAGGGGGSo17OS_dispatch_queueCG
yShy
GADG
yShy
GAEGG
yShy
GIeggn_
So17OS_dispatch_queueC_
$s7remindd25AlarmTriggerRepresentableP
So8REMAlarmC
_pSg
SDySo11REMObjectIDC
ShySo11REMCDObjectCG
SgXw
SgXwz_Xx
_pIegn_
SDySo11REMObjectIDC
ShySo12REMCDAccountCG
SDySo11REMObjectIDC
Gz_Xx
ShySo11REMObjectIDCGz_Xx
_pIegn_
SDySo11REMObjectIDC
Gz_Xx
ShySo13REMCDReminderCG
_pSg
So11REMObjectIDC3key_yp5valuetSg
So11REMObjectIDC3key_yp5valuet
$s7remindd35RDStaledFileAttachmentCleanupStatesP
$s7remindd43RDStaledFileAttachmentCleanupConfigurationsP
$s7remindd54RDStaledFileAttachmentCleanupThrottleIntervalProvidingP
$s7remindd54RDStaledFileAttachmentCleanupRateReduceFactorProvidingP
$s7remindd43RDStaledFileAttachmentCleanupLimitProvidingP
_pSg
_pSg
yShy
So15REMCDAttachmentC
So13REMAttachmentC
$s7remindd25RDDARequestsQueueDelegateP
_pSgXw
So19REMSmartListStorageC
$s7remindd35RDSharedListNotificationContentTypeP
So12NSOrderedSetCSg
GGSo17OS_dispatch_queueCG
GGSo17OS_dispatch_queueCGAJG
XDXMT
GSo17OS_dispatch_queueCG
y_AAy_
yShy
GAEGG
_pSgG
_pSgG
So12REMCDHashtagCm
So7REMListCSg
SDySo24REMContactRepresentationCSo9CNContactCSgG
So14CNContactStoreC
So12NSDictionaryCSgyc
GSo17OS_dispatch_queueCG
SDySo11REMObjectIDCSo9CNContactCG
$s7remindd28RDApplicationShortcutUpdaterP
$s7remindd19RDXPCEventInterfaceP
ySS_So13OS_xpc_object_ptc
yyKc
SgXw
_ShySo19NSEntityDescriptionCGt
XDXMT
ySo17REMCDHashtagLabelCGG
ySo17REMCDHashtagLabelCSSSgG
So13REMCDReminderC
ySo13REMCDReminderCG
SaySo11REMCDObjectCG
ySo13REMCDReminderCG
ySo13REMCDReminderCGG
ySo13REMCDReminderCGG
ySi3key_SaySo13REMCDReminderCG5valuetG
Si3key_SaySo13REMCDReminderCG5valuet
3key_SaySo13REMCDReminderCG5valuetG
3key_SaySo13REMCDReminderCG5valuet
ySiG
_pSg
So41REMDistributedEvaluationCollectionOptionsC
SiSg
SaySaySdGG
Sg_ABt
SaySdG
yycSg
SgXw
$s7remindd43RDContactInteractionAlarmProducerDataSourceP
$s7remindd47RDContactInteractionAlarmProducerSessionManagerP
_pXo
ySSSgG
ySSSgGG
_So24REMContactRepresentationCtG
So23REMOrderedIdentifierMapCSg
_pSgXw
So20NSNotificationCenterC
_pSgXw
$s7remindd42RDICCloudExtraneousAlarmsCollectorDelegateP
$s7remindd38RDICCloudExtraneousAlarmsSyncPerformerP
$s7remindd48RDICCloudExtraneousAlarmsCollectorConfigurationsP
$s7remindd47RDICCloudExtraneousAlarmsCollectorStatesStorageP
So17OS_dispatch_queueCGG
So17OS_dispatch_queueCGGAFG
SgXw
SgXwz_Xx
ySo21REMCDAlarmDateTriggerC
ySo21REMCDAlarmDateTriggerCG
ySo21REMCDAlarmDateTriggerCSo0A0CSgG
So17OS_dispatch_groupCSg
ShySSG
So17OS_dispatch_groupCSgz_Xx
So11REMReminderC
So39_REMNSPersistentHistoryTrackingAbstractC
So37RDStoreControllerManagedObjectContextCIeyBy_
So37RDStoreControllerManagedObjectContextCIegg_
5today_t
$s7remindd29CDAuxiliaryReminderChangeInfoP
So18REMReminderStorageC
ySS_So8NSNumberCtG
ySSSo8NSObjectCG
ShySo15REMCDAssignmentCG
ySo13REMAssignmentC_G
So13REMAssignmentCm
$s7remindd29RDTimelineEngineProcessorTypeP
ySay
GSo17OS_dispatch_queueCG
ySay
GSo17OS_dispatch_queueCGSay
GGGSo17OS_dispatch_queueCG
GGGSo17OS_dispatch_queueCGSay
GGGSo17OS_dispatch_queueCGSay
GGGSo17OS_dispatch_queueCGSay
_pGG
yShy
GSo17OS_dispatch_queueCGAEG
yShy
GSo17OS_dispatch_queueCG
yShy
GSo17OS_dispatch_queueCGAFGG
yShy
GSo17OS_dispatch_queueCGAGGGytG
yShy
GSo17OS_dispatch_queueCGAHGGytG
yShy
GSo17OS_dispatch_queueCGAIGGytG
_pGG
SgXw
ySay
GGGSo17OS_dispatch_queueCGSay
_pGG
yAqIGG
ySay
SgXw
GIeggn_
SaySo17REMRecurrenceRuleCGSg
5lower_AA5uppert
So21REMCDRootEntityObjectC
_pGIegg_
ySo20UNNotificationActionCSgG
ySo8NSNumberC_SStG
SDySo8NSNumberCSSG
ySSG
ySS_SdtG
ySS5title_SS4listtG
So17RDStoreControllerCSg
So17REMAccountStorageC
SDySS
SDySo11REMObjectIDCSuG
SSSg_SSt
SgXw
SgXwz_Xx
So24OS_dispatch_source_timer_p
ShySo11REMObjectIDCG11reminderIDs_
13showCompletedt
So13REMAssignmentC
ySo15REMCDAssignmentCG
Sayy
ySo18REMMigrationResultC
_pGcG
ySo18REMMigrationResultC
_pGSg
So19REMCDMigrationStateC
ySo19REMCDMigrationStateCG
So22NSManagedObjectContextCSo19REMCDMigrationStateCSgIggg_
SaySo11REMObjectIDCGSg
ySo18REMMigrationResultC
_pGIegg_
SbSd
_pSgIegyyg_
3key_
5valuetSg
3key_
5valuet
ySo19REMCDMigrationStateCGG
$s7remindd50RDSharedListActivityNotificationEngineUserDefaultsP
ShySo11REMCDShareeCGSg
yShy
GABy_
y_AKy_AHGGAFGGGGGSo17OS_dispatch_queueCG
yShy
y_AJy_AFGGADGGGG
yShy
GAAy_
y_AJy_AGGGAEGGGGG
yShy
GACy_
y_AAy_
y_AKy_AIGGAGGGGGGSo17OS_dispatch_queueCG
yShy
GADy_
y_ABy_
y_ALy_AJGGAHGGGGGSo17OS_dispatch_queueCG
GAUG
y_ABy_
yShy
GGGAEG
yShy
y_AAy_
yShy
y_ACy_
yShy
GGGAFGG
y_ADy_
yShy
GGGAGGGG
yShy
yShy
yShy
G_GSo17OS_dispatch_queueCG
yShy
G_GSo17OS_dispatch_queueCGG
SgXw
So17OS_dispatch_queueC_
GIeggn_
SS3key_
_p5valuet
So21UNNotificationContentC
So24UNUserNotificationCenterCSgIegg_
Ieg_Sg
So17NSManagedObjectIDC06objectC0_
4datat
SDySSSo13REMCDReminderCG
yShy
GAFGGG
yShy
GAGGGGSo17OS_dispatch_queueCG
GIeggn_
So11NLTokenizerCSg
$s7remindd21RDKeybagStateProviderP
$s7remindd24RDKeyBagEventsControllerP
So17REMCDHashtagLabelCSg
So11REMObjectIDC04listB0_
13showCompletedt
_pSgXw
So27REMUserDefaultsObserveToken_pSg
So8REMStoreC
SgXw
So7CKShareCSg
ySSSgG
ySSSo14NSSecureCoding_pG
yS2SG
ySSSay
ySo9REMCDListCGGG
ySSSay
ySo14REMCDSmartListCGGG
ySSSay
G_So15NSManagedObjectCt
G_So15NSManagedObjectCtG
ySSSay
ySo11REMCDObjectCGGG
ySo11REMCDObjectCG_So15NSManagedObjectCt
ySo11REMCDObjectCG_So15NSManagedObjectCtG
So17REMManualOrderingC_Say
ySo17REMManualOrderingC_Say
yyyKcG
ySo11REMObjectIDCSDySSypGG
ySSSay
ySo12REMCDAccountCGGG
ySo12REMCDAccountCG_So15NSManagedObjectCt
ySo12REMCDAccountCG_So15NSManagedObjectCtG
ySSSo8NSStringCG
_So24REMContactRepresentationCt
_So24REMContactRepresentationCtG
_ypt
15dataSourceAlarm_
8fireDatetG
ySo17REMCDAlarmTriggerCG
ySsG
ySo11REMObjectIDCSay
ySo12REMCDAccountCG
ySo12REMCDAccountCGG
ySdG
ySo11REMObjectIDCSay
ySSSaySSGG
ySSSdG
ySo14REMCDSmartListCG
ySo14REMCDSmartListCGG
ySo11REMObjectIDC
ySo24REMCDAlarmVehicleTriggerCG
ySSSay
G_So15NSManagedObjectCt
G_So15NSManagedObjectCtG
So13REMAttachmentC_Say
ySo13REMAttachmentC_Say
_So8CLRegionCt
_So8CLRegionCtG
ySo25REMCDAlarmLocationTriggerCG
ySSSo8CLRegionCG
ySSSo8NSNumberCG
Si8fileSize_Sb7dedupedt
ySi8fileSize_Sb7dedupedtG
SS8cacheKey_
9accountIDAB010attachmentD0t
ySS8cacheKey_
9accountIDAC010attachmentD0tG
ySS8cacheKey_
9accountIDAD010attachmentD0t
ySS8cacheKey_
9accountIDAC010attachmentD0t
ShyABGG
ySSSay
ySo11REMCDShareeCGGG
ySo11REMCDShareeCG_So15NSManagedObjectCt
ySo11REMCDShareeCG_So15NSManagedObjectCtG
So9REMShareeC_Say
ySo9REMShareeC_Say
ySSSay
ySo23REMCDCalDAVNotificationCGGG
ySo23REMCDCalDAVNotificationCG_So15NSManagedObjectCt
ySo23REMCDCalDAVNotificationCG_So15NSManagedObjectCtG
So21REMCalDAVNotificationC_Say
ySo21REMCalDAVNotificationC_Say
ySSSay
G_So15NSManagedObjectCt
G_So15NSManagedObjectCtG
So18REMTemplateStorageC_Say
ySo18REMTemplateStorageC_Say
ySo14REMCDSmartListCG_So15NSManagedObjectCt
ySo14REMCDSmartListCG_So15NSManagedObjectCtG
So19REMSmartListStorageC_Say
ySo19REMSmartListStorageC_Say
ySSSay
G_So15NSManagedObjectCt
G_So15NSManagedObjectCtG
So18REMReminderStorageC_Say
ySo18REMReminderStorageC_Say
ySSSay
ySo13REMCDReminderCGGG
ySo13REMCDReminderCG_So15NSManagedObjectCt
ySo13REMCDReminderCG_So15NSManagedObjectCtG
So18REMReminderStorageC_Say
ySo18REMReminderStorageC_Say
ySo9REMCDListCG_So15NSManagedObjectCt
ySo9REMCDListCG_So15NSManagedObjectCtG
ySSSg_SStG
So13REMCDReminderC_Su_Sutt
ySo13REMCDReminderC_Su_SuttG
ySo17NSManagedObjectIDC
ySo11REMObjectIDCSiG
So14REMListStorageC_Say
ySo14REMListStorageC_Say
ySo11REMObjectIDCSuG
SSSg_
_ABtt
ySSSg_
_ACttG
So17REMAccountStorageC_Say
ySo17REMAccountStorageC_Say
ySSSo19REMCDReplicaManagerCG
ySo11REMReminderC_
ySSSiG
yytG
ySo19REMCDMigrationStateCG
ySSySo22NSManagedObjectContextCKcG
SaySo17NSManagedObjectIDCGG
So17NSManagedObjectIDCG
ySSSo24NSPersistentHistoryTokenCG
SayABGG
_AAt
ySaySdGG
SS_Sdt
ySo19REMCDReplicaManagerCG
ySSSo31REMReplicaManagerSerializedDataCG
ySSSay
So28RDAccountPropertiesObserving_pG
ySo21REMCDAlarmDateTriggerCG
ySo13REMCDReminderCSo12REMCDAccountCSgG
So13REMCDReminderCG
SaySo21REMCDAlarmDateTriggerCGG
ySb_Shy
yySb_Shy
GtcG
ySo17NSManagedObjectIDCG
ySSypG
ySSSo13REMCDReminderCG
ySo13REMCDReminderCGG
ySo11REMObjectIDCSaySo13REMCDReminderCGG
ySSSay
ySo10REMCDAlarmCGGG
ySo10REMCDAlarmCG_So15NSManagedObjectCt
ySo10REMCDAlarmCG_So15NSManagedObjectCtG
So8REMAlarmC_Say
ySo8REMAlarmC_Say
ySSSay
ySo15REMCDAssignmentCGGG
ySo15REMCDAssignmentCG_So15NSManagedObjectCt
ySo15REMCDAssignmentCG_So15NSManagedObjectCtG
So13REMAssignmentC_Say
ySo13REMAssignmentC_Say
ySSSay
ySo18REMCDURLAttachmentCGGG
ySo18REMCDURLAttachmentCG_So15NSManagedObjectCt
ySo18REMCDURLAttachmentCG_So15NSManagedObjectCtG
So16REMURLAttachmentC_Say
ySo16REMURLAttachmentC_Say
ySSSay
ySo20REMCDImageAttachmentCGGG
ySo20REMCDImageAttachmentCG_So15NSManagedObjectCt
ySo20REMCDImageAttachmentCG_So15NSManagedObjectCtG
So18REMImageAttachmentC_Say
ySo18REMImageAttachmentC_Say
ySSSay
ySo19REMCDFileAttachmentCGGG
ySo19REMCDFileAttachmentCG_So15NSManagedObjectCt
ySo19REMCDFileAttachmentCG_So15NSManagedObjectCtG
So17REMFileAttachmentC_Say
ySo17REMFileAttachmentC_Say
ySSSay
ySo12REMCDHashtagCGGG
ySo12REMCDHashtagCG_So15NSManagedObjectCt
ySo12REMCDHashtagCG_So15NSManagedObjectCtG
So10REMHashtagC_Say
ySo10REMHashtagC_Say
ySSSay
ySo19REMCDRecurrenceRuleCGGG
ySo19REMCDRecurrenceRuleCG_So15NSManagedObjectCt
ySo19REMCDRecurrenceRuleCG_So15NSManagedObjectCtG
So17REMRecurrenceRuleC_Say
ySo17REMRecurrenceRuleC_Say
ySo19REMCDFileAttachmentCG
ySo19REMCDFileAttachmentCGG
ySo19REMCDFileAttachmentCG
ySSSay
ySo29REMCDAlarmTimeIntervalTriggerCGGG
ySo29REMCDAlarmTimeIntervalTriggerCG_So15NSManagedObjectCt
ySo29REMCDAlarmTimeIntervalTriggerCG_So15NSManagedObjectCtG
So27REMAlarmTimeIntervalTriggerC_Say
ySo27REMAlarmTimeIntervalTriggerC_Say
ySSSay
ySo21REMCDAlarmDateTriggerCGGG
ySo21REMCDAlarmDateTriggerCG_So15NSManagedObjectCt
ySo21REMCDAlarmDateTriggerCG_So15NSManagedObjectCtG
So19REMAlarmDateTriggerC_Say
ySo19REMAlarmDateTriggerC_Say
ySSSay
ySo25REMCDAlarmLocationTriggerCGGG
ySo25REMCDAlarmLocationTriggerCG_So15NSManagedObjectCt
ySo25REMCDAlarmLocationTriggerCG_So15NSManagedObjectCtG
So23REMAlarmLocationTriggerC_Say
ySo23REMAlarmLocationTriggerC_Say
ySSSay
ySo24REMCDAlarmVehicleTriggerCGGG
ySo24REMCDAlarmVehicleTriggerCG_So15NSManagedObjectCt
ySo24REMCDAlarmVehicleTriggerCG_So15NSManagedObjectCtG
So22REMAlarmVehicleTriggerC_Say
ySo22REMAlarmVehicleTriggerC_Say
ySayypGG
ySo18REMMigrationResultC
_pGc
ySo18REMMigrationResultC
_pGcG
ySo17REMCDHashtagLabelC_
ySo17REMCDHashtagLabelCG
ySSSaySo12REMCDHashtagCGG
ySo12REMCDHashtagCG
ShySSGG
ySSSo17REMCDHashtagLabelCG
ySSSay
ySo11REMObjectIDCSgG
ySo10REMCDAlarmCG
So11REMObjectIDC_SDySSSo8NSNumberCGt
ySo11REMObjectIDC_SDySSSo8NSNumberCGtG
ySo15REMCDAttachmentCG
ySo15REMCDAttachmentCGG
ySo15REMCDAttachmentCG
ySb_Shy
yySb_Shy
GtcG
ySb_ShySo8NSNumberCGtc
yySb_ShySo8NSNumberCGtcG
ySo7REMListCSDySo13REMAssignmentCSo11REMReminderCGG
ySo11REMObjectIDCypG
ySo15REMCDAssignmentCG
ySo15REMCDAssignmentCGG
So11REMObjectIDC_ypt
ySo11REMObjectIDCSo10REMAccountCG
ySo14REMCDSmartListC
_Say
SgSaySo14REMCDSmartListCGG
SgSaySo9REMCDListCGG
ySiSaySo13REMCDReminderCGG
SaySo13REMCDReminderCGG
ySaySiGG
SaySiG
ySSSaySS5title_SS4listtGG
SS5title_SS4listt
ySSShySo11REMObjectIDCGG
ySSShy
SaySo13REMCDReminderCGG
ySo11REMObjectIDCSgSo13REMCDReminderCG
ySSShy
SDySSShy
yS2dG
ySSSDyS2dGG
ySo9REMShareeC_GG
ySo9REMShareeC_G
Si_Sit
ySi_SitG
yS2iG
ySo9REMShareeC_GG
ySo9REMShareeC_G
ySo24REMContactRepresentationCSo9CNContactCSgG
ySay
ySo8NSNumberCSSG
ySo8NSObjectCyXlG
ySuG
ySo9REMCDListCG
ySSSo11REMCDShareeCG
SS_ypt
So11REMObjectIDCSg_SSt
ySo11REMObjectIDCSg_SStG
ySaySo8NSObjectCGG
SaySo8NSObjectCG
So24REMContactRepresentationC_
ySo24REMContactRepresentationC_
ySo17NSManagedObjectIDC06objectC0_
4datatG
_ShySo19NSEntityDescriptionCGtG
ySpy
Gz_SpySo8NSObjectCSgGSgzSpyypGSgztc
ySSSgG
SaySSGIegr_
SSIego_
SDyS2SGIegr_
SaySo11REMObjectIDCSgGIegr_
$s7remindd10StringTypeP
So11NSPredicateCSg
So10REMHashtagC
So25NSUbiquitousKeyValueStoreC
So8NSNumberCSg
So34REMTemplatePublicLinkConfigurationC
GGSg
So17REMRecurrenceRuleC
So19REMCDRecurrenceRuleC
SaySo8NSNumberCG
So15REMCDAttachmentCm
$s7remindd38RDStalePinnedListsEventHandlerDelegateP
_pSgXw
So17OS_dispatch_queueCGG
So17OS_dispatch_queueCGGAFG
SgXw
SgXwz_Xx
XDXMT
yS2SGSg
SgXw
SDySo11REMObjectIDC
_pSgIeggg_
So12REMChangeSetC
_pSgIeggg_
So22REMChangeTrackingStateCSg
_pSgIeggg_
So12NSDictionaryCSo7NSErrorCSgIeyByy_
So12REMChangeSetCSo7NSErrorCSgIeyByy_
So22REMChangeTrackingStateCSgSo7NSErrorCSgIeyByy_
$s7remindd88RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandlerDelegateP
_pSgXw
SgXw
SgXwz_Xx
XDXMT
So8NSBundleC
SDySSySo22NSManagedObjectContextCKcG
SDySSSo8NSObjectCGSg
So22NSManagedObjectContextCyt
_pIegnrzo_
SDySo11REMObjectIDCShySSGG
SayyyKcG
SDySS
SDySo11REMObjectIDCSo15NSManagedObjectCG
SDySo11REMObjectIDCSDySSypGG
$s7remindd21CDAuxiliaryChangeInfoP
$s7remindd29RDTimeAlarmProducerDataSourceP
$s7remindd16RDFireDateSourceP
SgXw
$s7remindd19RDXPCDaemonProtocolP
SgXw
SgXw
SgXwz_Xx
_pSg
$s7remindd25RDCoreSuggestionsHandlingP
So37SGSuggestionsServiceRemindersProtocol_p
ySo13REMCDReminderCG24adjustedContentPredicate_
010completionD0t
SaySo11REMObjectIDCG11reminderIDs_
Sg19completedBeforeDatet
6filter_So11REMObjectIDC07accountC0
Sg19completedBeforeDatet
SaySo11REMObjectIDCG7listIDs_
Sg19completedBeforeDatet
ShySo13REMCDReminderCGSg
GIegr_
SaySo11REMObjectIDCG_
SgAEt
SaySo11REMObjectIDCG_
6filter_So11REMObjectIDC07accountC0
13showCompletedt
13showCompleted_
5todayt
So11REMObjectIDC08reminderB0_
13showCompletedt
SaySo11REMObjectIDCG_
Sg8dueStartAE0C3Endt
SaySo11REMObjectIDCG_
19completionPredicate
09concealedD0t
SaySSSgG
So22NSManagedObjectContextCSg
So14REMListStorageC
SaySo11REMObjectIDCG_Sbt
ySo13REMCDReminderCG_Sbt
So11REMObjectIDC04listB0_Sb17includingSubtaskst
So11REMObjectIDC04listB0_Sb17includingSubtasksSu22creationDateWithinDayst
So11REMObjectIDC04listB0_t
13showCompleted_t
ShySo11REMObjectIDCG11reminderIDs_t
SaySSG_So11REMObjectIDCSgt
So11REMObjectIDC_
18concealedPredicatet
SaySSG13ckIdentifiers_t
Sb14onlyIncomplete_t
SS13canonicalName_Sb14onlyIncompletet
Sg3key_SaySo14REMCDSmartListCG5valuet
Sg3key_SaySo9REMCDListCG5valuet
So17RDStoreControllerC
So9REMShareeCSg
_So24REMContactRepresentationCtGSg
So37RDStoreControllerManagedObjectContextCSay
_So24REMContactRepresentationCtG
_pIggrzo_
So37RDStoreControllerManagedObjectContextC
_pSg
ySo13REMCDReminderCG_G
_pSg
15dataSourceAlarm_
8fireDatetGSg
So37RDStoreControllerManagedObjectContextCSay
15dataSourceAlarm_
8fireDatetG
_pIggrzo_
So17REMCDAlarmTriggerC
ySSG
ySo17REMCDAlarmTriggerCG_G
So12REMCDAccountCSg
So12REMCDAccountC
So10REMCDAlarmCSg
So9REMCDListCSg
So9REMCDListC
yypG
ytSg
So37RDStoreControllerManagedObjectContextCyt
_pIggrzo_
ySo12REMCDAccountCG
ySo12REMCDAccountCG_G
ySo14REMCDSmartListCG
ySo14REMCDSmartListCG_G
ySo9REMCDListCG
ySo9REMCDListCG_G
tGSg
So37RDStoreControllerManagedObjectContextCSay
_pIggrzo_
ySo24REMCDAlarmVehicleTriggerCG
ySo24REMCDAlarmVehicleTriggerCG_G
ySo24REMCDAlarmVehicleTriggerCGG
_So8CLRegionCtGSg
So37RDStoreControllerManagedObjectContextCSay
_So8CLRegionCtG
_pIggrzo_
_pSg
ySo25REMCDAlarmLocationTriggerCG
ySo25REMCDAlarmLocationTriggerCG_G
ySo25REMCDAlarmLocationTriggerCGG
So37RDStoreControllerManagedObjectContextCSb
_pIggrzo_
So19REMFetchResultTokenCSg
So37RDStoreControllerManagedObjectContextCSo19REMFetchResultTokenC
_pIggrzo_
So37RDStoreControllerManagedObjectContextCSay
_pIggrzo_
So37RDStoreControllerManagedObjectContextCSay
_pIggrzo_
SDySSSo31REMReplicaManagerSerializedDataCGSg
So37RDStoreControllerManagedObjectContextCSDySSSo31REMReplicaManagerSerializedDataCG
_pIggrzo_
_SDySo11REMObjectIDCypGtSg
So37RDStoreControllerManagedObjectContextC
_SDySo11REMObjectIDCypGt
_pIggrzo_
So24REMStoreInvocationResultCSg
So37RDStoreControllerManagedObjectContextCSo24REMStoreInvocationResultC
_pIggrzo_
So14REMFetchResultCSg
So37RDStoreControllerManagedObjectContextCSo14REMFetchResultC
_pIggrzo_
ySo21REMCDAlarmDateTriggerCGG
So37RDStoreControllerManagedObjectContextCSaySo11REMObjectIDCG
_pIggrzo_
SaySSGSg
So37RDStoreControllerManagedObjectContextCSaySSG
_pIggrzo_
ySo12REMCDHashtagCG_G
SaySo15REMHashtagLabelCGSg
So37RDStoreControllerManagedObjectContextCSaySo15REMHashtagLabelCG
_pIggrzo_
ySo34REMCDSharedToMeReminderPlaceholderCG
ySo34REMCDSharedToMeReminderPlaceholderCG_G
SS_So20RDHasCKDatabaseScope_So8CKRecordCXctSg
So37RDStoreControllerManagedObjectContextCSS_So20RDHasCKDatabaseScope_So8CKRecordCXct
_pIggrzo_
SDyS2SGSgSg
So37RDStoreControllerManagedObjectContextCSDyS2SGSg
_pIggrzo_
SaySo11REMObjectIDC_SDySSSo8NSNumberCGtGSg
So37RDStoreControllerManagedObjectContextCSaySo11REMObjectIDC_SDySSSo8NSNumberCGtG
_pIggrzo_
SaySo17REMAccountStorageCGSg
So37RDStoreControllerManagedObjectContextCSaySo17REMAccountStorageCG
_pIggrzo_
So37RDStoreControllerManagedObjectContextCSay
_pIggrzo_
XDXMT
ySo11REMObjectIDC
ySDy
SDySSShy
GGGGG
ySo11REMObjectIDC
ySDy
SDySSShy
GGGGGIegg_
_SDySSShy
GGtG
ySS_Shy
ySDy
SDySSShy
GGGG
ySay
ySay
ySo9REMShareeCG
ySo9REMShareeC_GG
SDySSSbG
XDXMT
So19REMCDRecurrenceRuleCm
ySo11REMCDObjectCGG
$s7remindd15CDIngestableKeyP
24CDIngestableCoreDataType
36CDIngestableOrderableRelationshipKey
27CDIngestableRelationshipKey
40CDIngestableRelationshipOrderingValueKey
20CDIngestableValueKey
So21REMCalDAVNotificationC
So23REMCDCalDAVNotificationC
$s7remindd9FireValueP
$s7remindd39CollectAndCoalescedOutputWithInputCountP
$s7remindd33AccountTypeHostProvidingFireValueP
$s7remindd33AccountObjectIDProvidingFireValueP
So19NSEntityDescriptionC
_So17OS_os_transaction_pSgtG
_So17OS_os_transaction_pSgtGSo0A15_dispatch_queueCG
y_AAy_
_So17OS_os_transaction_pSgtGSo0A15_dispatch_queueCGShy
y_ABy_AAy_
_So17OS_os_transaction_pSgtGSo0A15_dispatch_queueCGShy
SSz_Xx
_So17OS_os_transaction_pSgt
So17OS_os_transaction_pSgShy
GIegngo_
ShySo17REMAccountStorageCG
ySo17REMAccountStorageC_G
ShySo19NSEntityDescriptionCG
ySo19NSEntityDescriptionC_G
SbShy
GIegyg_
GSgXw
yxGSgXwz_
_SHRzlXX
ShySo17NSManagedObjectIDCG
SayShy
ACGG
ADGG
_So17OS_os_transaction_pSgtG
AEGG
_So17OS_os_transaction_pSgtGSo0A15_dispatch_queueCG
y_AAy_
AEGG
_So17OS_os_transaction_pSgtGSo0A15_dispatch_queueCGShy
So17OS_os_transaction_pSgShy
GIegngo_
yShy
GAFG
GSgXw
yxGSgXwz_
_SHRzlXX
SbShy
GIegyg_
ySo8NSNumberCGSgXw
yxGSgXwz_So8NSNumberC_SHRzlXX
SbShySo8NSNumberCGIegyg_
SgXw
_ShySo19NSEntityDescriptionCGtSg
So18REMAccountTypeHostC
So12EKEventStoreC
So18NSValueTransformerC
$s7remindd27REMSharedActivityJournalingP
SaySo14CKRecordZoneIDCG
So13NSFileManagerC
_pSg
ySo14CKRecordZoneIDCSo0aB0C_G
$s7remindd43RDUserInteractionSessionManagerUserDefaultsP
So24REMContactRepresentationC_
yyXlXpG
SaySayyXlGG
$s7remindd32RDAccountInitializerUserDefaultsP
$s7remindd28RDAccountInitializerObserverP
7remindd32RDAccountInitializerUserDefaults_p
yytGG
ytIegn_
So10REMAccountC
So14NSNotificationCIeyBy_
$s7remindd37RDCentralizedTaskAfterDelaySchedulingP
$s7remindd43RDCentralizedTaskAfterDelaySchedulerFactoryP
13SchedulerType
13SchedulerType
QzSg
$s7remindd22RDHousekeepingActivityP
$s7remindd38RDHousekeepingRateReducerConfigurationP
$s7remindd42RDHousekeepingXPCActivityCriteriaProvidingP
$s7remindd33RDCentralizedTaskSchedulerFactoryP
So18REMResolutionTokenCSg
yShy
GSo17OS_dispatch_queueCG
yxGSgXw
yxGSgXwz_x_
RzlXX
Si_SNy
$s7remindd24RDAttachmentFileProviderP
So16REMURLAttachmentC
So17REMFileAttachmentC
So18REMImageAttachmentC
$s7remindd34RDManualSortIDCacheContextDelegateP
So7NSCacheCySo11REMObjectIDC
_pSgXw
$s7remindd34RDManualSortIDCacheReadOnlyContextP
$s7remindd38RDManualSortIDCacheReadAndWriteContextP
$s7remindd14RDThrottleableP
$s7remindd18RDThrottlingPolicyP
$s7remindd12RDThrottlingP
So9REMShareeC
So11REMCDShareeC
yXlSgXw
yxcSg
yx_G
So13NSMergePolicyC
SaySo15NSManagedObjectCG
$s7remindd35REMAccountsListDataViewUserDefaultsP
ySo21NSPropertyDescriptionC_G
_So19REMFetchResultTokenCtSg
3key_Si5valuetSg
3key_Say
G5valuet
3key_Si5valuet
Se_SEp
So19REMFetchResultTokenC
$s7remindd36RDApplicationShortcutEngineInterfaceP
_pSg
_pSg
So17REMManualOrderingC
ySSG
ySSG
3key_Say
G5valuetSg
3key_Say
G5valuet
3key_AA5valuetSg
3key_AA5valuet
3key_
5valuetSg
3key_
5valuet
3key_SayAAG5valuetSg
3key_SayAAG5valuet
SaySiGSg
So24REMTemplateConfigurationC
$s7remindd26REMAttachmentRepresentableP
So18REMCDURLAttachmentC
So20REMCDImageAttachmentC
_pSgXw
So15NSXPCConnectionC
$s7remindd26RDClientConnectionDelegateP
So12REMXPCClient_p
So23REMXPCIndexingPerformer_pSgSo7NSErrorCSgIeyByy_
So28REMXPCSyncInterfacePerformer_pSgSo7NSErrorCSgIeyByy_
So20REMXPCStorePerformer_pSgSo7NSErrorCSgIeyByy_
So20REMXPCDebugPerformer_pSgSo7NSErrorCSgIeyByy_
So29REMXPCChangeTrackingPerformer_pSgSo7NSErrorCSgIeyByy_
ypXp
$s7remindd36RDICCloudSchemaCatchUpSyncSchedulingP
$s7remindd42RDICCloudSchemaCatchUpSyncSchedulerFactoryP
$s7remindd35RDICCloudSchemaCatchUpSyncPerformerP
So46ICCloudSchemaCatchUpSyncSchedulingStateStorage_p
_pSgXw
yxGSgXw
yxGSgXwz_x_
RzlXX
$s7remindd33RDApplicationShortcutListProviderP
$s7remindd41RDApplicationShortcutListProviderDelegateP
$ss12IdentifiableP
ShySo6BMItemCG
So19BMBehaviorRetrieverCSg
So7NSTimerCSg
SDySSSDyS2dGG
ySSSo6BMRuleCG
ySSGSg
So27BMTaskSpecificEventProvider_p
ySd_SdtG
Sd7support_Sd10confidenceSS11descriptiont
Sd7support_Sd10confidenceSS11descriptiontG
Sd7support_Sd10confidenceSS11descriptiontG
Sd7support_Sd10confidenceSS11descriptiontG
ySuSd7support_Sd10confidenceSS11descriptiontG
ySSSd7support_Sd10confidenceSS11descriptiontG
Sd7support_Sd10confidenceSS11descriptiontG
So12BMMiningTaskC
XDXMT
_Sd7supportSd10confidenceSS11descriptiont
_Sd7supportSd10confidenceSS11descriptiont
_Sd7supportSd10confidenceSS11descriptiont
Sb_Sd7supportSd10confidenceSS11descriptiont
Su_Sd7supportSd10confidenceSS11descriptiont
SS_Sd7supportSd10confidenceSS11descriptiont
_Sd7supportSd10confidenceSS11descriptiont
SDyS2dG
$s7remindd32RDVehicleAlarmProducerDataSourceP
SgXw
SgXwz_Xx
Iegg_
$s7remindd17REMCDObjectFieldsP
$s7remindd32REMCDObjectResolutionTokenFieldsP
$s7remindd17REMCRSerializableP
So13CKRecordValue_pSg
yShy
GcSg
SSSg
_pIegozo_
yShy
So14REMSaveRequestCSg
$s7remindd20RDReminderDataCopierP
_pSg
$s7remindd29RDExtraneousAlarmUserDefaultsP
So35ICCloudConfigurationExtraneousAlarm_p
3key_SaySo21REMCDAlarmDateTriggerCG5valuetSg
3key_SaySo21REMCDAlarmDateTriggerCG5valuet
SgXw
SgXw
yShy
GAFGGSo17OS_dispatch_queueCG
yShy
GAGGGSo17OS_dispatch_queueCGAMG
SayAAGG
SS3key_
5valuet
$s7remindd53RDDynamicSignificantTimeNotificationEngineEventSetterP
$s7remindd10CDFetchingP
SaySo28REMNullableObjectIDProviding_pG
So28REMNullableObjectIDProviding_p
ySnySiGG
3key_SaySo17NSManagedObjectIDCG5valuetSg
3key_SaySo17NSManagedObjectIDCG5valuet
$s7remindd25RDLocationManagerDelegateP
$s7remindd21RDLocationManagerTypeP
_pSgXw
So17CLLocationManagerCSg
So8CLRegionC
$s7remindd24RDBabysitCrashDetectableP
$s7remindd14RDBabysittableP
$s7remindd12RDBabysitterP
$s7remindd38RDIntentsRelevantShortcutsHandlingTypeP
$s7remindd28RDAccountPropertiesObservingP
$s7remindd20ObservingAccountInfoP
So28RDAccountPropertiesObserving_pG
GSo17OS_dispatch_queueCG
XDXMT
$s7remindd22RDExecutionDateStorageP
$s7remindd35RDExecutionDatePossessingExecutableP
$s7remindd28RDUserNotificationPresentingP
$s7remindd32RDUserNotificationCenterDelegateP
_pSgXw
So24UNUserNotificationCenterC
SaySo14UNNotificationCGIegg_
SaySo14UNNotificationCG
So28UNMutableNotificationContentC
So22UNNotificationSettingsC
XDXMT
Sg14remindersCount_
13showCompletedSay
G0A0t
yS2SGSg_
So11REMObjectIDC013accountObjectB0_t
So19REMCDReplicaManagerC
SaySo19REMCDReplicaManagerCG
So31REMReplicaManagerSerializedDataC
SaySo13REMCDReminderCGG
So11REMObjectIDC_Sb21includePinnedSublistst
So11REMObjectIDC_SaySSGt
SS_So11REMObjectIDCSgt
$s7remindd25RDAccountHostnameProviderP
So13DATransactionCSg
So27DADREMShareResponseDelegateC
SDySSSay
18representativeDate_Say
G4dayst
9startDate_Say
G4dayst
$s7remindd12RDExecutableP
SaySSG10accountIDs_t
SS11calendarURL_SS9accountIDy
_pSgc10completiont
SDySo10CKRecordIDCABG
So20ICCloudConfigurationC
So7NSErrorCSgIeyByy_
_pSgIegyg_
AASo7NSErrorCSgIeyByyy_
_pSgIegyyg_
So14INPersonHandleCSg
SaySo14INPersonHandleCGSg
So28REMTemplateContentAttributesCSgSo7NSErrorCSgIeyByy_
So8NSStringCSgSo7NSErrorCSgIeyByyy_
So25ICCollaborationControllerC
So15CKShareMetadataC
SbSSSg
_pSgIegygg_
_pSgSbSSSgIeggyg_
So7CKShareCSgSo7NSErrorCSgIeyByy_
SgXw
SgXwz_Xx
So7CKShareCSg
_pSgIeggg_
Gz_Xx
ySo11REMObjectIDCSo31REMReplicaManagerSerializedDataC_G
So24REMStoreInvocationResultCSgSo7NSErrorCSgIeyByy_
_pSg
_pSg
$s7remindd24RDSyncPollerUserDefaultsP
$s7remindd25RDSyncPollerConfigurationP
SgXw
$s7remindd35REMHashtagLabelDataViewUserDefaultsP
$s7remindd32RDTemplateOperationQueueDelegateP
$s7remindd19RDTemplateOperationP
_pSgXw
_pSg
SgXw
SgXwz_Xx
So29DABabysitterRegistrationTokenCSgz_Xx
XDXMT
GSo17OS_dispatch_queueCG
SayxG
SDyxSayxGG
SDyxq_G
SDyq_SdG
Shyq_G
$s7remindd41RDICCloudConfigurationUpdaterUserDefaultsP
$s7remindd38RDICCloudConfigurationUpdateSchedulingP
$s7remindd44RDICCloudConfigurationUpdateSchedulerFactoryP
So32ICCloudConfigurationDownloadable_p
yxGSgXw
yxGSgXwz_x_
RzlXX
$s7remindd33RDPublicCloudDatabaseControllableP
Sbyc
So11CKContainerCSg
xXMT
_pGIegn_
XDXMT
_pGIegg_
SaySsG
$s7remindd33RDLocationAlarmProducerDataSourceP
$s7remindd16RDCLRegionSourceP
7remindd20ObservingAccountInfo_p
ySo6NSDataCc
ySo7NSErrorCc
ySo6NSDataC
So6NSDataCIeyBy_
So7NSErrorCIeyBy_
ySo6NSDataC
GSo17OS_dispatch_queueCG
So6NSDataCIegg_
So7NSErrorCIegg_
XDXMT
SgXw
$s7remindd19RDPublicCloudObjectP
$s7remindd30RDManualSortIDHashKeyProvidingP
$s7remindd27RDCentralizedTaskSchedulingP
$s7remindd22RDAnyActivitySchedulerP
SgXw
SgXwz_Xx
So13OS_xpc_object_p
Iegy_
_pIegyzo_
ySo21REMTemplatePublicLinkC
_pGIegg_
XDXMT
ySo8NSStringCSo12NSDictionaryCG
SDyS2SGSg
SDyS2SGSgz_Xx
SaySo30NSPersistentHistoryTransactionCG
So24NSPersistentHistoryTokenCSg
So21DADBuddyStateObserverCSgz_Xx
So21DADBuddyStateObserverCXDXMT
GIegn_
So21DADBuddyStateObserverC
GIegy_
So28DADSystemAvailabilityCheckerCXDXMT
So17RDStoreControllerCSgXwz_Xx
XDXMT
So19NSMutableOrderedSetCSgSg
SaySo12NSDictionaryCG
SaySDySS
9startDate_Say
G4dayst
XDXMT
$s7remindd16RDDaemonProtocolP
yShy
yAdEGG
$s7remindd26RDImageDeduplicationStatesP
$s7remindd42RDImageDeduplicationActivityConfigurationsP
$s7remindd53RDImageDeduplicationActivityThrottleIntervalProvidingP
$s7remindd53RDImageDeduplicationActivityRateReduceFactorProvidingP
$s7remindd42RDImageDeduplicationActivityLimitProvidingP
SaySi8fileSize_Sb7dedupedtG
12attachmentID_So09REMObjectB0C07accountB0t
9sourceURL_
12attachmentIDSo09REMObjectD0C07accountD0t
_p5error_
12attachmentIDSo09REMObjectC0C07accountC0t
_p5error_
9sourceURL
12attachmentIDSo09REMObjectE0C07accountE0t
So19REMCDFileAttachmentC10attachment_So11REMObjectIDC07accountE0t
SS8cacheKey_
9accountIDAB010attachmentD0tSg
SS8cacheKey_
9accountIDAB010attachmentD0
_p5errort
ySS8cacheKey_
9accountIDAC010attachmentD0t
SaySS8cacheKey_
9accountIDAB010attachmentD0tG
SS8cacheKey_t
ShySo11REMCDShareeCG
ShySo23REMCDCalDAVNotificationCG
So11REMCDShareeCm
So9REMShareeCm
So23REMCDCalDAVNotificationCm
So21REMCalDAVNotificationCm
So9REMCDListCm
So14REMListStorageCm
So10REMHashtagCm
So8REMAlarmCm
So13REMAttachmentCm
So17REMRecurrenceRuleCm
So12REMCDAccountCm
So17REMAccountStorageCm
So13REMCDReminderCm
So18REMReminderStorageCm
So17REMCDHashtagLabelCm
SSSgm
So17NSManagedObjectIDCm
ySS_ySo22NSManagedObjectContextCKctG
ShySSGSg
So22NSManagedObjectContextC
_pIeggzo_
S2bSaySSG
_pSgIegyygg_
SuSgIegy_
SuSg
SuSgz_Xx
$s7remindd47RDSharedInlineTagAutoConvertHandler_BatchRunnerP
SaySo16NSSortDescriptorCG
So17REMCDAlarmTriggerCm
SDySSSiG
SDySSSo8NSNumberCG
$s7remindd49RDSuggestedAttributesAutoTrainerPersistentStorageP
SgXw
XDXMT
$s7remindd11RDInvocableP
$s7remindd26RDStoreControllerInvocableP
$s7remindd27AnyRDSwiftInvocableProtocolP
y_SiG
4type_So11REMObjectIDC07accountC0t
4type_So11REMObjectIDC06objectC0t
So11REMObjectIDC011groupObjectB0_Sb21includePinnedSublistst
ySo8NSStringC_G
$s7remindd30RDClientAccessLevelTruthSourceP
$ss25ExpressibleByArrayLiteralP
$ss10SetAlgebraP
$ss9OptionSetP
SDySSSDySSypGG
ySSSo18REMResolutionTokenCSgG
SaySo11REMObjectIDCGz_Xx
SgXw
ySo11REMObjectIDCSo015NSManagedObjectB0CG
So17NSManagedObjectIDCG
$s7remindd16RDAlarmProducingP
$s7remindd16RDAlarmConsumingP
$s7remindd23RDAlarmProducerDelegateP
9operation_SSSg9sessionId
Sg0B9BeginTimet
SgXw
So8REMAlarmC_SSSgt
SiSg14completedCount_
13showCompletedSay
G6groupst
So32DADREMUserNotificationPresenting_p
So20DADREMLocalDBWatcherCSgXw
So7DADMainCSg
q_Sg
_pSgIegng_
So11CKContainerC
ySo13CKRequestInfoCSgcSg
$s15InvernessClient9InvocableP
$s13SwiftProtobuf14ExtensionFieldP
Say8BaseType
$s13SwiftProtobuf17AnyExtensionFieldP
8RawValueSYQz
$s13SwiftProtobuf16SelectiveVisitorP
ySRy
ySbG
ySfG
_pSg
_pXmTSg
$s13SwiftProtobuf19_ProtoNameProvidingP
$s13SwiftProtobuf12ExtensionMapP
$s13SwiftProtobuf7MessageP
$s13SwiftProtobuf26_MessageImplementationBaseP
_pXpSg
_pSg
Si3key_
_p5valuetSg
SDySi
$s13SwiftProtobuf7DecoderP
$s13SwiftProtobuf19AnyMessageExtensionP
_pXp
_pSg
_A13At
_pXmT
ySS_
_pXptG
$s13SwiftProtobuf9FieldTypeP
8BaseType
$s13SwiftProtobuf10MapKeyTypeP
$s13SwiftProtobuf12MapValueTypeP
$s13SwiftProtobuf7VisitorP
$s13SwiftProtobuf18_CustomJSONCodableP
$s13SwiftProtobuf4EnumP
$s13SwiftProtobuf17ExtensibleMessageP
SDySi
ySi_
SDySiSay
_pGG
ySiSay
_pGG
_pSg
$ss30ExpressibleByDictionaryLiteralP
SaySRy
SDySi
5proto_t
5proto_AA4jsont
5proto_SayAAG7aliasest
SDySS
_pXpG
_pSg
_pSg
_rawValue
_os_unfair_lock_opaque
RawValue
_ObjectiveCType
_nsError
location
length
Code
_ErrorType
RawValue
AllCases
unknownFields
_storage
archivePath
credential
embeddedTestData
dsID
baseURL
hostname
mmeAuthToken
partition
success
error
timeElapsed
isObserver
listsMigrated
remindersMigrated
message
retryCount
user
UNRECOGNIZED
none
dryRun
disableSharing
saveOriginalJson
userInitiated
noCleanup
defined
isTerminated
nextInvocationInSeconds
invocationCount
failureCount
options
result
invocable
_source
_disableCache
_state
_result
_log
_options
_userInitiated
_simulatedError
_nextStep
_logs
assignedDate
ckAssigneeIdentifier
ckOriginatorIdentifier
owningReminderIdentifier
reminder
status
AllCases
RawValue
templateObjectID
publicCloudDatabaseController
isUnitTestMode
badgeEmblem
color
name
publicLinkExpirationDate
publicLinkURLUUID
savedReminders
sortingStyle
AllCases
RawValue
accountID
rem_accountObjectID
accountDescription
babysitterOperationRefreshFromLastConsumed
babysitterOperationRefreshFromLastConsumedOnLaunch
analyticsCrashDetected
babysitTarget
queue
userNotificationCenter
storeControllerNotificationCenter
daemonController
storeController
manualTestRun
storeControllerObservationToken
started
cloudKitAccountsDidChangeSubscriptions
currentUserShareParticipantIDsOverrideByListID
windowSize
thresholdForNewWindow
averageInterval
numOfSamples
measurements
lastFire
queue
handler
debouncingPolicy
loadFactor
label
isEnabled
pendingWorkItem
pendingValues
pendingCompletionBlocks
coalescedUpdates
debouncer
databaseScope
subscriptionOwnerUserRecordName
interval
debounceFirstFire
constant
loadFunction
dateTriggers
locationTriggers
timeIntervalTriggers
vehicleTriggers
dateTimeInterval
address
contactLabel
latitude
locationUID
longitude
mapKitHandle
proximity
radius
referenceFrameString
routing
title
timeInterval
event
setPersonIDAuthor
storeController
delegate
personIDSaltObserver
pendingSystemAvailable
bootstrapCancellables
storeControllerEventCancellables
systemAvailabilityCheckerBlockingQueue
appleAccountUtilities
notSupported
missingKey
invalidData
RawValue
storeController
storeContainerToken
notificationCenter
locationManager
xpcDaemon
storeControllerByContainerURL
manualHashtagLabelUpdater
accountID
uuidForChangeTracking
ckIdentifier
erroredAttachments
byUUID
byList
beforeLastAccessed
operationType
xpcListener
xpcListenerUserInteractive
xpcDaemon
listenerQueue
clientConnectionDidClosePublisher
clientConnections
clientConnectionDidClosePassthroughSubject
applicationShortcutService
applicationShortcutServiceQueue
alarm
cachedNonce
Performer
Performer
storeController
storeObjectContext
batchSizePerQuery
metrics
reminder
field
onlySpecificCanonicalName
persistentStoreLookup
error
analytics
activitiesProcessed
distinctRemindersHandled
hashtagsCreated
startingTimestamp
endingTimestamp
title
notes
AllCases
invalidActivityType
couldNotAcquireREMObjectID
coreDataFetchError
hashtagIngestionError
couldNotExtractDocumentFromField
attribute
name
objectUUID
queue
storeController
discretionaryCloudKitThrottler
cloudKitThrottler
dataAccessThrottler
dataAccessRequestsWriter
storeProvider
clientIdentity
clientConnection
fetchPublicCloudObjectResultMock
success
failure
objectID
creationDate
alarmTriggers
dueDateComponents
flagged
hashtags
notesDocumentData
priority
recurrenceRules
startDateComponents
title
titleDocumentData
contactHandlesData
acknowledgedDate
alarmUID
dueDateResolutionTokenAsNonce
originalAlarmUID
reminder
triggerID
AllCases
RawValue
accountID
alarmID
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
objectID
timeInterval
dateComponents
structuredLocation
proximity
event
AllCases
RawValue
remindd
reminddWithoutPID
xctest
templatePublicLinkTTL
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
accountID
parentAccountID
objectID
minimumSupportedVersion
configuration
name
color
badgeEmblem
showingLargeAttachments
sortingStyle
unsavedManualOrdering
AllCases
RawValue
daemonUserDefaults
l_preferredDefaultListObjectIDUrl
l_preferredDefaultListID
lock
badgeEmblem
color
filterData
mostRecentTargetTemplateIdentifier
name
parentAccount
parentList
showingLargeAttachments
smartListType
sortingStyle
pinnedDate
AllCases
RawValue
isLaunching
managedObjectContext
persistentStore
dicts
arrays
Performer
$__lazy_storage_$_contactStore
shouldStart
notEligible
ingestionFailure
missingReminder
missingTitle
other
processingQueue
storeController
daemonController
timeGroupingStrategy
delegate
started
cloudAccountsDidChangeCancellable
hashtagInsertEventCancellables
highPrioritySubscriptionTransactionRegistrar
lowPrioritySubscriptionTransactionRegistrar
babysitterOperationRefreshFromLastConsumed
babysitterOperationRefreshFromLastConsumedOnLaunch
analyticsCrashDetected
babysitTarget
changeTrackingClientName
accountID
rem_accountObjectID
accountDescription
objectIdentifier
hashtagName
accountID
reminderID
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
objectID
trigger
acknowledgedDate
alarmUID
originalAlarmUID
AllCases
RawValue
persistenceHost
cache
accountManualSortIDsOption
allSignedInAccounts
hostAccountOnly
xpcActivityAllowBattery
xpcActivityIsCPUIntensive
xpcActivityIsDiskIntensive
rateReducerConfiguration
identifier
executionDateStorage
babysitter
storeController
configurations
states
executable
name
perRunDeleteLimit
backingStorage
backingConfiguration
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
accountID
reminderID
objectID
AllCases
RawValue
identifier
dispatchQueue
delegate
requestChannelReader
pendingRequests
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
accountID
parentAccountID
parentListID
objectID
minimumSupportedVersion
smartListType
sortingStyle
pinnedDate
manualOrdering
name
color
badgeEmblem
filterData
showingLargeAttachments
AllCases
RawValue
fetchRange
none
nilDate
nonNilDate
managedObjectContext
copyRemindersInTemplateToREMList
copyRemindersInPublicTemplateToREMList
copyRemindersInREMListToTemplate
copyRemindersInCustomSmartListToTemplate
batchDeleteCachedPublicTemplates
RawValue
configuration
handler
cancellables
babysitTarget
babysitterOperationDidLaunch
babysitterOperationStoreDidChange
analyticsCrashDetected
storeController
scheduler
initialScheduledTriggerDelay
debounceTimeout
launch
storeDidChange
RawValue
creationDate
name
reminder
sharedToMeReminderCKIdentifier
type
AllCases
RawValue
queue
configurationSource
cancellables
cachedList
cachedEditingSessionID
storePerformer
cachedMLModels
cachedContacts
contactStore
cloudTrainingOverridesSource
localTrainingOverridesSource
cloudHarvestingOverridesSource
localHarvestingOverridesSource
embeddingResult
sentenceEmbeddingModelResult
intentionalWordModelResult
coreBehaviorModelResult
coreSuggestionHandler
queue
started
alarmHandlers
eventInterface
token
name
body
uuid
userVisible
date
Performer
badgeEmblem
color
creationDate
lastModifiedDate
mostRecentPublicLinkUpdateRequestDate
name
parentAccount
publicLinkConfigurationData
publicLinkCreationDate
publicLinkExpirationDate
publicLinkLastModifiedDate
publicLinkURLUUID
sortingStyle
sourceListIDURL
AllCases
RawValue
storeController
clientIdentity
salt
timezone
options
embeddingsURL
reminderTitleEmbeddings
accounts
systemLanguage
systemTimeZoneName
systemTimeZoneOffset
isShared
isGroup
title
titleFuzzedEmbeddings
reminders
embeddings
revision
language
creationDate
creationDayOfWeek
completionDayOfWeek
dueDayOfWeek
displayDayOfWeek
titleSaltedHash
sentence2Vec
universalGrammar
filteredStopWords
displayDate
completionDate
alarmDates
isFlagged
priority
locationAlarmIdentifier
locationAlarmProximity
recurrenceDescription
attachmentUTIs
hasRemindMeWhenMessaging
isParentTask
isSubtask
hasUserActivity
date
type
lists
eventHandler
notificationName
notifyToken
significantTimeChangeNotification
RawValue
dataSource
delegate
queue
userInteractionSessionManager
shouldNotifyOfInteractionWithPeopleNotifyToken
shouldNotifyOfInteractionWithPeople
Performer
transactionRegistrar
keyBagStateChangeCancellable
operationType
templateObjectID
storeController
scheduler
syncPerformer
configurations
statesStorage
notificationCenter
delegate
extraneousAlarmsPendingSyncUpDeleteSubscription
debouncerOSTransaction
clientIdentity
unknown
complete
titleMayHaveDirtyHashtag
notesMayHaveDirtyHashtag
cascadeHashtagLabelApproval
AllCases
RawValue
notificationCenter
queue
beforeFirstUnlockNotificationEngine
daemonController
clientIdentity
doNothing
notificationCenterOnly
showBanner
Performer
storeController
Performer
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
accountID
listID
parentReminderID
subtaskIDsToUndelete
hashtagIDsToUndelete
siriFoundInAppsUserConfirmation
objectID
daCalendarItemUniqueIdentifier
externalIdentifier
externalModificationTag
daSyncToken
daPushKey
minimumSupportedVersion
titleDocumentData
titleDocument
completed
completionDate
priority
flagged
creationDate
lastModifiedDate
recurrenceRules
startDateComponents
dueDateComponents
timeZone
allDay
notesDocumentData
notesDocument
attachments
alarms
assignments
hashtags
contactHandles
icsDisplayOrder
icsUrl
importedICSData
userActivity
siriFoundInAppsData
lastBannerPresentationDate
primaryLocaleInferredFromLastUsedKeyboard
AllCases
RawValue
processingQueue
storeController
processors
debounceTimeInSeconds
publisher
transactionRegistrar
listIdentifier
displayDateDate
displayDateIsAllDay
dueDateComponents
recurrenceRules
journalEntries
reminders
loggingName
handler
processingQueue
processor
separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix
separatorInConcatenatedElementIDsWithLocalElementIDPrefix
Performer
list
title
count
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
listIDsMergeableOrdering
listsDADisplayOrderChanged
lists
listIDsToUndelete
smartListIDsToUndelete
objectID
type
name
listIDsMergeableOrderingData
pinnedListsManualOrdering
templatesManualOrdering
markedForRemoval
personID
personIDSalt
didChooseToMigrate
didChooseToMigrateLocally
didFinishMigration
persistenceCloudSchemaVersion
inactive
externalIdentifier
externalModificationTag
daSyncToken
daPushKey
daConstraintsDescriptionPath
daAllowsCalendarAddDeleteModify
daSupportsSharedCalendars
daWasMigrated
minimumSupportedVersion
debugSyncDisabled
AllCases
RawValue
queue
notificationCenter
Performer
accountID
reminderID
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
assigneeID
originatorID
objectID
assignedDate
status
ckAssigneeIdentifier
ckOriginatorIdentifier
owningReminderIdentifier
AllCases
RawValue
storeController
accountID
state
completionHandlers
lock
migrationResult
invocationCount
failureCount
isTerminated
stateRestored
dismissed
disableCache
waitingForReachability
wasUserInitiated
idle
active
completed
failed
RawValue
__debug_fetchedJournalEntries
__debug_processedJournalEntries
__debug_staleObjectIDs
scheduler
storeController
userNotificationCenter
userDefaults
cancellables
appliedEngineConfiguration
_started
journalUpdatesSubscriptionTransactionRegistrar
accountSignInOrOutSubscriptionTransactionRegistrar
activityDate
activityType
authorCKIdentifier
reminder
consumeOnStart
delayConsumeOnStart
consumeFromStoreChanges
storeChangesCoalescingPeriod
debugMode
queue
$__lazy_storage_$_wordTokenizer
lockStatePublisher
lockState
hasUnlockedSinceBootPublisher
hasUnlockedSinceBoot
lockStateSubject
hasUnlockedSinceBootSubject
unknown
unlocked
locked
locking
disabled
unlockInProgress
inGracePeriod
inAssertDelay
inBioUnlock
clientConnection
journalEntries
reminders
badgeEmblem
color
effectiveMinimumSupportedAppVersion
identifier
lastModifiedDate
minimumSupportedAppVersion
mostRecentPublicLinkUpdateRequestDate
name
publicLinkURLUUID
publicLinkConfigurationData
publicLinkCreationDate
publicLinkLastModifiedDate
publicLinkExpirationDate
resolutionTokenMap_v3_JSONData
sortingStyle
AllCases
RawValue
operationType
applicationShortcutLists
delegate
queue
storeControllerNotificationCenter
storeControllerObservationToken
preferredDefaultListIDObservationToken
store
isStarted
badgeEmblem
color
isGroup
lastUserAccessDate
mostRecentTargetTemplateIdentifier
name
parentAccount
parentList
reminderIDsMergeableOrdering
reminderIDsMergeableOrderingAsset
reminderIDs
reminderIDsAsset
sortingStyle
pinnedDate
AllCases
RawValue
alarmIDs
allDay
attachmentIDs
assignmentIDs
completed
completionDate
contactHandles
creationDate
dueDate
flagged
hashtagIDs
icsUrl
importedICSData
lastModifiedDate
list
notesDocument
notesDocumentAsset
parentReminder
priority
recurrenceRuleIDs
startDate
timeZone
titleDocument
titleDocumentAsset
userActivity
AllCases
RawValue
predicate
accountID
reminderID
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
objectID
creationDate
name
type
AllCases
RawValue
keyValueStore
changedKeys
reason
valueChanged
initialSync
quotaViolation
primaryAccountChanged
metadata
parentSavedReminderIdentifier
template
AllCases
RawValue
templateObjectID
templatePublicLinkConfiguration
remindersCountLimit
templatePublicContentPreviewTTL
queue
name
xpcEventStream
xpcEventStreamToken
eventHandler
rawValue
operationType
templateObjectID
targetListObjectID
store
limitPerSave
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
dayOfTheWeek
weekNumber
accountID
reminderID
objectID
recurrenceEnd
frequency
interval
firstDayOfTheWeek
daysOfTheWeek
daysOfTheMonth
daysOfTheYear
weeksOfTheYear
monthsOfTheYear
setPositions
AllCases
RawValue
reminder
AllCases
RawValue
height
width
fileName
fileSize
metadata
metadataAsset
lock
alreadyPosted
Performer
delegate
storeController
scheduler
debounceInterval
notificationCenter
cancellables
osTransactionForHandlingEvent
osTransactionForDebouncingEvent
isHandlingEvent
isDebouncingEvent
queue
storeControllerNotificationCenter
storeControllerNotificationCenterToken
widgetRefresh
implementation
delegate
storeController
scheduler
debounceInterval
notificationCenter
cancellables
osTransactionForHandlingEvent
osTransactionForDebouncingEvent
isHandlingEvent
isDebouncingEvent
metadata
modelName
bundle
allModelVersionIdentifiers
postMigrationDataUpdateByModelVersionIdentifier
storeURL
crashDetectedAnalyticsEventName
applyCRDTsWithoutMerging
noSideEffectChanges
clientIdentity
differentialPrivacyRecorder
changedKeys
persistentStoreLookup
managedObjectContext
mode
syncToCloudKit
upsertBlocks
establishRelationshipBlocks
mutateRelationshipOrderingBlocks
afterSaveActionBlocks
ingestionContextsByAccountIdentifier
accountIdentifier
persistentStore
fetchedObjectsMap
insertedObjectsMap
cdChangedValuesMap
queue
timeEventStream
dataSource
beforeFirstUnlockNotificationEngine
started
delegate
daemon
storeController
debugPerformer
syncInterfacePerformerFactory
dataAccessRequestsWriter
indexingPerformer
contactInteractionWriter
coreSuggestionsHandler
service
generic_fetchByObjectIDs
generic_fetchByPredicate
generic_fetchByList
generic_fetchByParentReminderIDs
generic_fetchByObjectIDsDue
export_fetchByList
remindersList_fetchAll
remindersList_stableSorting_fetchAll
remindersList_fetchParentsOnly
remindersList_fetchSubtasks
smartListScheduled
smartListFlagged
smartListToday
smartListToday_fetchOnlyCompleted
smartListAllReminders
customSmartList_fetchAll
searchResults
searchResults_fetchOnlyCompleted
tagged
tagged_fetchAll
template_fetchByList
dataaccess_fetchByExternalIdentifiers
dataaccess_fetchByDACalendarItemUniqueIdentifiers
tipKit_fetchCompletedRemindersInList
eventKitBridging_fetchRemindersInLists
eventKitBridging_fetchIncompleteRemindersInLists
eventKitBridging_fetchCompletedRemindersInLists
withDateAlarmsCountExceeding
siriSearch
analytics_fetchAllRemindersInAccount
analytics_fetchAllIncompleteRemindersInAccount
analytics_fetchAllFlaggedRemindersInAccount
analytics_fetchRemindersWithSubtasksInAccount
debug_stats_fetchRemindersInAccount
batchDeleteCompleted
customSmartList_batchDeleteCompleted
reminders_batchDeleteCompleted
inlineHashtagAutoConvertEngine_havingHashtagPrefixCharacterByCKIdentifiers
autoConvertSharedInlineTagsMigrator_sharedRemindersWithTitleOrNotesHashtags
autoConvertSharedInlineTags_allHavingHashtagInTitleOrNotes
smartListScheduled_fetchOnlyCompleted
smartListFlagged_fetchAll
smartListToday_filterNearby
smartListAllReminders_fetchOnlyCompleted
smartListSiriFoundInApps
smartListCompleted
accountsList_allIncompleteReminders
tagged_fetchUntagged
spotlightIndexing_isEligible
complication
tipKit_fetchAllUncompletedReminders
tipKit_fetchAllCompletedReminders
alarmEngine_containingContactHandles
todayNotificationEngine_todayNotification
performance_dynamicSignificantTimeNotificationEngine
suggestedAttributes_all
suggestedAttributes_hasRecurrenceRules
debug_65046250_fetchPhantomReminders
timelineEngine_allDueReminders
incompleteOrCompletedAfter
completedBeforeOrOn
incompleteOrCompletedObjectIDs
incomplete
completed
notSpecified
markedForDeletion
excludeConcealed
includeConcealed
excludeConcealedExceptUnsupported
excludeConcealedExceptUnsupportedButPhantomOk
isUnsupported
list
parentReminder
alarmStorage
attachments
recurrenceRules
assignments
hashtags
AllCases
RawValue
Performer
iCloud
local
other
RawValue
queue
daemonController
storeController
debug_currentUserSharee
clientIdentity
fetchByPublicLinkURLUUID
badgeEmblem
color
encodedSavedReminders
name
publicLinkURLUUID
sortingStyle
AllCases
RawValue
Performer
publicLinkURLUUID
publicCloudDatabaseController
isUnitTestMode
endDate
frequency
interval
occurrenceCount
setPositions
daysOfTheMonth
daysOfTheWeek
daysOfTheYear
firstDayOfTheWeek
monthsOfTheYear
weeksOfTheYear
reminder
AllCases
RawValue
moveAcrossAccount
nonExistentValue
nonExistentRelationship
AllCases
RawValue
accountID
listID
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
objectID
uuidString
hostURL
externalIdentifier
externalModificationTag
daSyncToken
daPushKey
AllCases
RawValue
didCleanUpManualSortHintOnMarkingForDeletion
defaultPublicLinkURLHostname
storeController
label
lock
observers
debouncer
uuid
token
observeOption
queue
handler
entityDescription
qualityOfService
accountInfo
accountTypeHost
objectID
output
inputCount
allowedEntityNames
allREMCDObjects
Output
store
Performer
userDefaults
Performer
latitude
longitude
radius
locationUID
AllCases
RawValue
store
storeController
appleAccountUtilities
userDefaults
handler
queue
activities
processQueue
activityExecutionQueue
storeController
backgroundSchedulerFactory
backgroundScheduler
label
clientIdentity
accountsDidDisableCancellable
reduceFactor
delay
minimumDelay
allowBattery
isCPUIntensive
isDiskIntensive
xpcActivity
SchedulerType
Performer
latitude
longitude
radius
locationUID
pastDue
allDay
morning
afternoon
tonight
unknown
AllCases
RawValue
file
image
metadata
fileSize
width
height
accountManualSortIDByAccountIDCache
elementManualSortIDByReminderIDCache
delegate
accountID
listID
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
objectID
displayName
firstName
middleName
lastName
namePrefix
nameSuffix
nickname
address
status
accessLevel
AllCases
RawValue
name
counter
osTransaction
lock
identifier
queue
target
eventHandler
reader
operationType
templateObjectID
targetListObjectID
store
limitPerSave
Performer
modelObject
listAndGroup
smartList
reminderCounts
token
queue
listProvider
shortcutUpdater
accountID
notificationCenter
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
objectID
modifiedDate
AllCases
RawValue
dayOfTheWeek
weekNumber
daysOfTheMonth
daysOfTheWeek
daysOfTheYear
endDateInterval
firstDayOfTheWeek
frequency
interval
monthsOfTheYear
setPositions
weeksOfTheYear
templateObjectID
sourceListObjectID
accountObjectID
templateConfiguration
store
limitPerSave
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
accountID
reminderID
objectID
fileSize
fileURL
isTemporaryFileURL
width
height
metadata
AllCases
RawValue
delegate
clientIdentity
xpcDaemon
isUserInteractive
xpcConnection
notificationSubscriptionQueue
keepAliveTransaction
cancellables
queue
backgroundScheduler
backgroundSchedulerFactory
schedulingStateStorage
performer
scheduledActivityTimeout
storeController
xpcActivity
SchedulerType
allowedOperationsCount
throttleInterval
identifier
queue
throttleResetDate
currentIntervalAllowedOperationsCount
baseUrl
behaviorRetriever
trained
confidenceThreshold
timer
feedbackVersion
feedbackForRules
rules
trainingDataFrame
intentWords
metrics
minedRuleCount
filteredOutRulesCount
minRelativeSupport
completed
version
contact
listId
dueDayOfWeek
alarmLocation
titleIntent
isWeekend
flagged
priority
dayOfWeek
hourOfDay
listID
queue
dataSource
delegate
connectedToken
disconnectedToken
started
minimumSupportedVersion
AllCases
RawValue
unitTest_didReceiveAccountsDidDisable
cancellables
storeController
remindersBatchSize
accountDataMoverSaveRequestAuthorString
store
statistics
excludeSharedToMeLists
potentialDenylistItemIDs
_useSourceObjectIDAsExternalID
_copyListSharingStatus
currentSaveRequest
listsChanged
remindersChanged
queue
extraneousAlarmCloudConfiguration
storeController
userDefaults
isUnitTest
_isDisabled
babysitterOperationDeleteExtraneousAlarms
babysitTarget
analyticsCrashDetected
accountsDidDisableCancellable
xpcActivity
clientIdentity
storeController
storeControllerNotificationCenter
scheduler
debounceInterval
notificationCenter
accountsAndRemindersChangesSubscription
manualSortHintChangesSubscription
clientIdentity
topLevelSavedReminderIdentifiers
subtaskIdentifiersByTopLevelSavedReminderIdentifier
savedReminderByIdentifier
savedURLAttachmentsBySavedReminderIdentifier
topLevelSavedReminderIdentifierBySubtaskIdentifier
RawValue
queue
storeController
xpcEventSetter
currentStatus
Performer
queue
delegate
q_locationManager
type
name
originalHashtagID
value
range
names
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
accountID
listID
objectID
parentReminderID
minimumSupportedVersion
titleDocumentData
titleDocument
priority
flagged
creationDate
recurrenceRules
startDateComponents
dueDateComponents
timeZone
allDay
notesDocumentData
notesDocument
attachments
alarms
hashtags
contactHandles
AllCases
RawValue
listID
displayName
dateRange
lock
l_observers
l_cancellables
executable
throttleInterval
eTag
hintDataExcludingRemindersInLocalAccountAsAsset
hintDataExcludingRemindersInLocalAccountAsBytes
hintDataIncludingRemindersInPrimaryAccountOnlyAsAsset
hintDataIncludingRemindersInPrimaryAccountOnlyAsBytes
lastAccessed
listID
listType
serializationVersion
AllCases
RawValue
queue
reminderAlarmDelegate
beforeFirstUnlockReminderDelegate
assignmentNotificationDelegate
sharedListUpdateNotificationDelegate
notificationCenter
ckContainerID
localUUID
accountTypeHost
persistenceHost
displayDate
priority
creationDate
title
manualWithSortHint
manual
hostAccount
primaryCloudKitAccount
accountID
bundleID
serializedData
cacheQueue
cacheContext
accountChangesSubscription
Performer
generic_fetchTopLevelListsAndGroupsInAccount
generic_fetchListsAndGroupsInAccount
generic_fetchListsAndSublistsInAccount
generic_fetchListsInGroup
generic_fetchByObjectIDs
generic_fetchByManagedObjectIDs
smartList_fetchAllSharedListsInAccount
template_fetchListsWithMostRecentTargetTemplateIdentifierByCurrentUser
dataAccess_fetchListsInAccount
dataAccess_fetchByExternalIdentifier
dataAccess_fetchByObjectIDsIncludingSpecialContainer
changeTracking_fetchByObjectIDsIncludingConcealed
userActivity_fetchByExternalIdentifier
analytics_fetchSharedListInAnyStateInAccount
analytics_fetchAllGroupsInAccount
siriSearch
generic
generic_verifyDefaultList
generic_fallbackDefaultLists
ui_applicationShortcuts
ui_settingsDefaultList
pinned_isPinnedByCurrentUser
pinned_isSharedToMe
pinned_hasPinnedDate
template_isSharedAndHasMostRecentTargetTemplateIdentifierByCurrentUser
template_isSharedToMe
eventKitBridging_fetchLists
spotlightIndexing_isEligible
debug_65046250_fetchPhantomLists
tipKit_fetchLists
tipKit_fetchListsWithCustomBadge
batchDelete_fetchAll
Performer
modelObject
list
smartList
xpcDaemon
clientIdentity
storeContainerToken
storeObjectContext
Performer
year
updateContentsOfAllFolders
acceptCalDAVShare
rejectCalDAVShare
storeController
clientIdentity
storeProvider
dataAccessRequestsWriter
contactInteractionWriter
coreSuggestionsHandler
publicCloudDatabaseController
shareRecordIDToRootRecordID
shareRecordIDToRootRecordIDLock
queue
userDefaults
pollBlock
eventStream
configuration
Performer
labels
token
Performer
publicCloudDatabaseController
delegate
storeController
daemonController
scheduler
clientConnectionDidClosePublisher
cancellables
osTransaction
isHandlingOperationQueueItems
babysitterOperationHandleIncompleteOperationQueueItems
babysitterOperationHandleIncompleteOperationQueueItemsOnLaunch
analyticsCrashDetected
babysitTarget
missingContainerForTopLevelElement
missingLastModifiedForContainer
topLevelElements
secondaryLevelElementsByTopLevelElement
containerByTopLevelElement
lastModifiedByContainer
containers
downloadableCloudConfiguration
queue
userDefaults
backgroundScheduler
backgroundSchedulerFactory
delay
xpcActivity
SchedulerType
isInternetReachable
transactionRegistrar
$__lazy_storage_$_ckContainerWithPublicDatabase
queue
delegate
locationManager
dataSource
uuid
account
callbackQueue
successHandler
errorHandler
propertyName
currentValueSubject
cancellables
objectID
type
initialNilValue
invalid
unexpectedNilValue
accountAbsent
hashKeyForManualSortID
cdAccount
Performer
identifier
name
color
AllCases
RawValue
identifier
shouldDefer
asyncHandler
l_pendingCriteria
lock
SuggestedAttributesAutoTrainer
ICCloudConfigurationUpdater
ICCloudSchemaCatchUpSyncController
RDHousekeepingActivityScheduler
RDExtranesousAlarmCleaner
UnitTests
complete
pendingWork
noWork
error
intervalInfo
priority
allowBattery
requireScreenSleep
shouldWakeDevice
expectedDuration
isCPUIntensive
isMemoryIntensive
isDiskIntensive
mayRebootDevice
requireSignificantUserInactivity
requireNetworkConnectivity
requireInexpensiveNetworkConnectivity
powerNap
communicatesWithPairedDevice
desiredMotionState
requiredProtectionClasses
AllCases
RawValue
interval
repeating
delay
gracePeriod
maintenance
utility
stationary
walking
running
cycling
automotive
automotiveMoving
automotiveStationary
classA
classB
classC
templateObjectID
templatePublicLinkConfiguration
publicCloudDatabaseController
isUnitTestMode
remindersCountLimit
templatePublicLinkTTL
cacheKey
storeController
significantTimeNotificationStream
Performer
fileAsset
fileName
lastModifiedDate
metadata
metadataAsset
savedReminder
type
AllCases
RawValue
attachmentTypeRawValue
fileName
identifier
metadata
AllCases
RawValue
Performer
orderingByListID
listsWithOrdering
orderingChanged
needsSortReminders
data
$__lazy_storage_$_orderedSet
Performer
xpcDaemon
xpcClientConnectionListener
disabledAccountsEventHandler
alarmEngine
todayEngine
timelineEngine
assignmentNotificationEngine
hashtagLabelUpdater
stalePinnedListsEventHandler
staleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler
templateOperationQueue
applicationShortcutEngine
coreSuggestionController
suggestedAttributesAutoTrainer
widgetRefresh
housekeepingActivityScheduler
cloudConfigurationUpdater
cloudSchemaCatchUpSyncController
syncActivityNotificationEngine
sharedInlineTagAutoConvertEngine
extraneousAlarmsCollector
extraneousAlarmCleaner
manualSortHintUpdater
xpcActivityAllowBattery
xpcActivityIsCPUIntensive
xpcActivityIsDiskIntensive
rateReducerConfiguration
identifier
executionDateStorage
babysitter
storeController
configurations
states
executable
name
perRunDeleteLimit
globalAnalytics
analytics
logPrefix
attachment
accountID
attachmentIdentifier
sha512Sum
fileSize
sourceURL
destinationURL
fileWasCopied
successes
failures
startTime
managedObjectContext
backingStorage
nullIdentifier
nullFileName
sha512SumFailed
copyFailed
removeFailed
errors
invalidCacheKey
attachmentWasNotMigrated
purgeFailed
backingConfiguration
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
reminderIDsMergeableOrdering
remindersICSDisplayOrderChanged
reminders
accountID
childListIDsToUndelete
childSmartListIDsToUndelete
parentAccountID
parentListID
reminderIDsToUndelete
sharedOwnerID
objectID
externalIdentifier
externalModificationTag
daSyncToken
daPushKey
daExternalIdentificationTag
daBulkRequests
daDisplayOrder
daIsEventOnlyContainer
daIsReadOnly
daIsImmutable
daIsNotificationsCollection
minimumSupportedVersion
isGroup
lastUserAccessDate
name
color
badgeEmblem
showingLargeAttachments
reminderIDsMergeableOrderingData
reminderIDsOrderingHints
templateID
sharedOwnerName
sharedOwnerAddress
sharingStatus
sharees
calDAVNotifications
sortingStyle
pinnedDate
AllCases
RawValue
identifier
accountTypeHost
manualSortIDHashKeyProvider
storeObjectContext
onlyConvertIncompleteReminders
v2_DefaultValues
v3_Release_2021
v4_Release_2022
v5_Migrating_to_ZREMCDREMINDER
v6_Migrated_to_ZREMCDREMINDER
v2022_C
AllCases
xpcDaemon
storeController
storeContainerToken
store
objectID
didChooseToMigrate
didFinishMigration
identifier
name
type
active
delete
debugSyncDisabled
RawValue
smartListAssigned
smartListAssigned_fetchOnlyCompleted
identifier
status
ckAssigneeIdentifier
assignedDate
AllCases
RawValue
Performer
address
contactLabel
latitude
locationUID
longitude
mapKitHandle
proximity
radius
referenceFrameString
routing
title
AllCases
RawValue
q_fetchCounts
q_saveCounts
q_postEventWorkItem
enabled
queue
storeControllerReadWriteEventName
queue
storeControllerNotificationCenter
store
persistentStorage
storeControllerObserverToken
xpcActivity
started
smartListTypeHavingPredefinedObjectID
smartListTypeHavingUniqueObjectID
siriSearch
generic_fetchTopLevelCustomSmartListsInAccount
generic_fetchCustomSmartListsInGroup
pinned_nonCustomSmartListsWithUserDefinedVisibilityInAccount
template_fetchCustomSmartListsWithMostRecentTargetTemplateIdentifier
analytics_fetchCustomSmartListsInAccount
generic_fetchAllCustomSmartLists
pinned_pinnedCustomSmartLists
tipKit_fetchAllCustomSmartLists
hashtagLabelDataView_fetchAllCustomSmartLists
didChooseToMigrate
didFinishMigration
listIDsMergeableOrdering
listIDsMergeableOrderingAsset
personIDSalt
sharedListIDsToOwnerNames
AllCases
RawValue
rawValue
ArrayLiteralElement
RawValue
Element
queue
bannerTimeEventStream
badgeEventStream
userNotificationCenter
storeControllerNotificationCenter
daemonController
dynamicSignificantTimeNotificationEngine
storeControllerObservationToken
started
todayNotificationTimeObserver
badgeCountCriteriaObserver
Performer
accountID
objectID
ckElementID
localUUID
accountID
producers
consumers
queue
storeControllerNotificationCenter
storeControllerNotificationCenterToken
beforeFirstUnlockNotificationEngine
daemonController
started
temporal
location
vehicle
peopleInteraction
reminder
origin
type
firesBeforeFirstUnlock
alarm
active
passive
Performer
identifier
ckServerShareData
AllCases
RawValue
queue
storeController
mode
dataAccessRequestsQueue
remStoreProvider
userNotificationCenterProvider
storeControllerNotificationCenter
storeControllerNotificationCenterToken
rdDaemonController
storeController
userNotificationCenter
invokeOperationFailedInitialization
invokeResponseMissing
invokeArgumentContainsUnattachedAssets
publicDatabase
privateDatabase
organizationDatabase
serviceName
container
databaseType
qualityOfService
requestCompletedBlock
data
indentString
ValueType
value
protobufExtension
alwaysPrintEnumsAsInts
trailingGarbage
truncated
invalidUTF8
malformedProtobuf
missingRequiredFields
internalExtensionError
messageDepthLimit
source
index
numberFormatter
recursionLimit
recursionBudget
ignoreUnknownFields
messageDepthLimit
discardUnknownFields
seconds
nanos
unknownFields
anyTranscodeFailure
timestampRange
durationRange
fieldMaskConversion
missingFieldNames
missingValue
data
unknownField
failure
malformedNumber
numberRange
malformedMap
malformedBool
malformedString
invalidUTF8
missingFieldNames
schemaMismatch
unrecognizedEnumValue
illegalNull
unquotedMapKey
leadingZero
truncated
malformedDuration
malformedTimestamp
malformedFieldMask
trailingGarbage
conflictingOneOf
messageDepthLimit
scanner
options
fieldCount
isMapKey
fieldNameMap
RawValue
AllCases
UNRECOGNIZED
proto2
proto3
unknownFields
_storage
kind
cardinality
number
name
typeURL
oneofIndex
packed
options
jsonName
defaultValue
typeUnknown
typeDouble
typeFloat
typeInt64
typeUint64
typeInt32
typeFixed64
typeFixed32
typeBool
typeString
typeGroup
typeMessage
typeBytes
typeUint32
typeEnum
typeSfixed32
typeSfixed64
typeSint32
typeSint64
unknown
optional
required
repeated
_name
_fields
_oneofs
_options
_sourceContext
_syntax
_enumvalue
_value
doubleFormatString
work
unknownFields
separator
encoder
options
messageDepthLimit
ignoreUnknownFields
encoder
typeMismatch
malformedWellKnownTypeJSON
malformedAnyField
scanner
fieldCount
terminator
fieldNameMap
messageType
varint
fixed64
lengthDelimited
startGroup
endGroup
fixed32
RawValue
values
fieldNumber
fieldName
messageType
value
unknownFields
available
fieldStartP
fieldEndP
consumed
fieldWireFormat
fieldNumber
extensions
groupFieldNumber
options
recursionBudget
unknownData
unknownOverride
malformedText
malformedNumber
trailingGarbage
truncated
invalidUTF8
schemaMismatch
missingFieldNames
unknownField
unrecognizedEnumValue
conflictingOneOf
internalExtensionError
hasher
anyTranscodeFailure
missingRequiredFields
BaseType
seconds
nanos
unknownFields
fileName
unknownFields
unknownFields
_storage
name
requestTypeURL
requestStreaming
responseTypeURL
responseStreaming
options
syntax
root
_name
_methods
_options
_version
_sourceContext
_mixins
_syntax
data
separator
doubleFormatter
_typeURL
state
binary
message
contentJSON
encoder
nameMap
options
paths
unknownFields
extensions
doubleFormatter
encoder
nameMap
nameResolver
extensions
ArrayLiteralElement
fields
serializedSize
Value
interned
internPool
numberToNameMap
protoToNumberMap
jsonToNumberMap
same
standard
unique
aliased
json
proto
utf8Buffer
nameString
string
staticString
RawValue
AllCases
UNRECOGNIZED
nullValue
fields
unknownFields
_storage
numberValue
stringValue
boolValue
structValue
listValue
values
_kind
pointer
unknownFields
_storage
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>20A241133</string>
<key>CFBundleAllowMixedLocalizations</key>
<true/>
<key>CFBundleDisplayName</key>
<string>Reminders</string>
<key>CFBundleIdentifier</key>
<string>com.apple.remindd</string>
<key>CFBundleName</key>
<string>remindd</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>iPhoneSimulator</string>
</array>
<key>CFBundleVersion</key>
<string>845</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>14A5270i</string>
<key>DTPlatformName</key>
<string>iphonesimulator</string>
<key>DTPlatformVersion</key>
<string>16.2</string>
<key>DTSDKBuild</key>
<string>20C47</string>
<key>DTSDKName</key>
<string>iphonesimulator16.2.internal</string>
<key>DTXcode</key>
<string>1400</string>
<key>DTXcodeBuild</key>
<string>14A5270i</string>
<key>MinimumOSVersion</key>
<string>16.2</string>
<key>UIDeviceFamily</key>
<array>
<integer>1</integer>
<integer>2</integer>
</array>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.remindd</string>
<key>aps-connection-initiate</key>
<true/>
<key>aps-environment</key>
<string>production</string>
<key>com.apple.CommCenter.fine-grained</key>
<array>
<string>data-allowed-write</string>
<string>spi</string>
</array>
<key>com.apple.CoreRoutine.LocationOfInterest</key>
<true/>
<key>com.apple.application-identifier</key>
<string>com.apple.remindd</string>
<key>com.apple.authkit.client.private</key>
<true/>
<key>com.apple.chronoservices</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.developer.aps-environment</key>
<string>production</string>
<key>com.apple.developer.icloud-container-environment</key>
<string>Production</string>
<key>com.apple.developer.icloud-container-identifiers</key>
<array>
<string>com.apple.reminders</string>
<string>com.apple.reminders.fdb</string>
</array>
<key>com.apple.developer.icloud-services</key>
<array>
<string>CloudKit</string>
</array>
<key>com.apple.developer.ubiquity-container-identifiers</key>
<string></string>
<key>com.apple.locationd.effective_bundle</key>
<true/>
<key>com.apple.locationd.region_proxy_service</key>
<true/>
<key>com.apple.managedconfiguration.profiled-access</key>
<true/>
<key>com.apple.mobile.deleted.AllowFreeSpace</key>
<true/>
<key>com.apple.nano.nanoregistry.generalaccess</key>
<true/>
<key>com.apple.private.CacheDelete</key>
<array>
<string>PURGE_ENTITLEMENT</string>
<string>CLIENT_ENTITLEMENT</string>
</array>
<key>com.apple.private.DistributedEvaluation.RecordAccess-com.apple.reminders.des</key>
<true/>
<key>com.apple.private.MobileGestalt.AllowedProtectedKeys</key>
<array>
<string>UniqueDeviceID</string>
</array>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.aps-client-cert-access</key>
<true/>
<key>com.apple.private.aps-connection-initiate</key>
<true/>
<key>com.apple.private.attribution.implicitly-assumed-identity</key>
<dict>
<key>type</key>
<string>bundleID</string>
<key>value</key>
<string>com.apple.reminders</string>
</dict>
<key>com.apple.private.calendar.changeIdTrackingOverride</key>
<true/>
<key>com.apple.private.calendar.syncclient</key>
<true/>
<key>com.apple.private.canGetAppLinkInfo</key>
<true/>
<key>com.apple.private.cloudkit.customAccounts</key>
<true/>
<key>com.apple.private.cloudkit.masquerade</key>
<true/>
<key>com.apple.private.cloudkit.setEnvironment</key>
<true/>
<key>com.apple.private.cloudkit.spi</key>
<true/>
<key>com.apple.private.cloudkit.systemService</key>
<true/>
<key>com.apple.private.corespotlight.internal</key>
<true/>
<key>com.apple.private.dark-wake-push</key>
<true/>
<key>com.apple.private.dprivacyd.allow</key>
<true/>
<key>com.apple.private.kernel.override-cpumon</key>
<true/>
<key>com.apple.private.network.socket-delegate</key>
<true/>
<key>com.apple.private.push-to-wake</key>
<true/>
<key>com.apple.private.secure-apsclientv2</key>
<true/>
<key>com.apple.private.suggestions.reminders</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceLiverpool</string>
</array>
<key>com.apple.private.tcc.allow.overridable</key>
<array>
<string>kTCCServiceCalendar</string>
<string>kTCCServiceAddressBook</string>
</array>
<key>com.apple.private.tcc.kill-on-assumed-identity-authorization-change</key>
<true/>
<key>com.apple.private.tcc.manager.check-by-audit-token</key>
<array>
<string>kTCCServiceReminders</string>
</array>
<key>com.apple.private.usernotifications.bundle-identifiers</key>
<array>
<string>com.apple.reminders</string>
<string>com.apple.NanoReminders</string>
</array>
<key>com.apple.private.xpc.domain-extension</key>
<true/>
<key>com.apple.security.application-groups</key>
<array>
<string>group.com.apple.reminders</string>
</array>
<key>com.apple.security.exception.files.absolute-path.read-only</key>
<array>
<string>/usr/libexec</string>
<string>/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.lsd.iconscache/</string>
</array>
<key>com.apple.security.exception.files.absolute-path.read-write</key>
<array/>
<key>com.apple.security.exception.files.home-relative-path.read-only</key>
<array>
<string>Library/Caches/com.apple.itunesstored/url-resolution.plist</string>
<string>Library/Caches/com.apple.AppleAccount/</string>
</array>
<key>com.apple.security.exception.files.home-relative-path.read-write</key>
<array>
<string>Library/Reminders/</string>
<string>Library/Caches/com.apple.remindd/</string>
<string>Library/Logs/CrashReporter/Reminders/</string>
<string>Library/HTTPStorages/com.apple.remindd/</string>
</array>
<key>com.apple.security.exception.iokit-user-client-class</key>
<array>
<string>RootDomainUserClient</string>
</array>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.iconservices</string>
<string>com.apple.coreduetd.knowledge</string>
<string>com.apple.siri-distributed-evaluation</string>
<string>com.apple.suggestd.reminders</string>
<string>com.apple.remindd</string>
<string>com.apple.cloudd</string>
<string>com.apple.apsd</string>
<string>com.apple.usernotifications.usernotificationservice</string>
<string>com.apple.analyticsd</string>
<string>com.apple.spotlight.IndexAgent</string>
<string>com.apple.managedconfiguration.profiled</string>
<string>com.apple.frontboard.systemappservices</string>
<string>com.apple.appconduitd.device-connection</string>
<string>com.apple.contactsd</string>
<string>com.apple.routined.registration</string>
<string>com.apple.mobileactivationd</string>
<string>com.apple.chronoservices</string>
<string>com.apple.cache_delete</string>
<string>com.apple.cache_delete.public</string>
<string>com.apple.SBUserNotification</string>
<string>com.apple.mobile.keybagd.xpc</string>
<string>com.apple.mobile.keybagd.UserManager.xpc</string>
<string>com.apple.mobile.usermanagerd.xpc</string>
</array>
<key>com.apple.security.exception.shared-preference.read-only</key>
<array>
<string>com.apple.UIKit</string>
<string>com.apple.nanobuddy</string>
<string>com.apple.persistentconnection</string>
<string>com.apple.purplebuddy</string>
<string>com.apple.DataAccess.BehaviorOptions</string>
</array>
<key>com.apple.security.exception.shared-preference.read-write</key>
<array>
<string>com.apple.remindd.babysitter</string>
<string>com.apple.remindd</string>
<string>group.com.apple.reminders</string>
<string>com.apple.persistentconnection-mcc</string>
</array>
<key>com.apple.security.exception.sysctl.read-only</key>
<array>
<string>hw.perflevel0.physicalcpu_max</string>
</array>
<key>com.apple.security.network.client</key>
<true/>
<key>com.apple.security.temporary-exception.mach-lookup.global-name</key>
<array>
<string>com.apple.coreduetd.knowledge</string>
<string>com.apple.routined.registration</string>
<string>com.apple.siri-distributed-evaluation</string>
<string>com.apple.suggestd.reminders</string>
<string>com.apple.cloudd</string>
<string>com.apple.apsd</string>
<string>com.apple.analyticsd</string>
<string>com.apple.dprivacyd</string>
<string>com.apple.mobile.keybagd.xpc</string>
<string>com.apple.mobile.keybagd.UserManager.xpc</string>
<string>com.apple.mobile.usermanagerd.xpc</string>
</array>
<key>com.apple.security.ts.application-group-support</key>
<true/>
<key>com.apple.security.ts.asset-access</key>
<true/>
<key>com.apple.security.ts.cloudkit-client</key>
<true/>
<key>com.apple.security.ts.location-services</key>
<true/>
<key>com.apple.security.ts.power-assertions</key>
<true/>
<key>com.apple.security.ts.springboard-services</key>
<true/>
<key>com.apple.security.ts.tmpdir</key>
<string>com.apple.remindd</string>
<key>com.apple.springboard.shortcutitems.fullaccess</key>
<true/>
<key>com.apple.symptom_diagnostics.report</key>
<true/>
<key>com.apple.trial.client</key>
<array>
<string>210</string>
</array>
<key>seatbelt-profiles</key>
<array>
<string>temporary-sandbox</string>
</array>
</dict>
</plist>
Assignment
Assignment
name
account
account
account
name
name
children
account
Alarm
Alarm
SmartList
SmartList
canonicalName
recencyDate
name
Hashtag
Hashtag
Template
Template
template
template
List
List
Reminder
Reminder
SavedReminder
SavedReminder
Attachment
Attachment
alarm
alarm.reminder
alarm
alarm.reminder
alarm
alarm.reminder
zh-Hans
zh-Hant
RecurrenceRule
RecurrenceRule
parentAccount
parentAccount
Rappels 
ManualSortHint
SavedAttachment
SavedAttachment
account
reminder
reminder
AlarmTrigger
AlarmTrigger
Account
Account
ckCloudState
MigrateRequest
MigrateResponse
EmptyRequest
BasicResponse
PingRequest
PingResponse
null
false
true
alse
infinity
infinity
infinity
null
false
true
null
null
@(#)PROGRAM:remindd  PROJECT:ReminderKit-
ffffff
hhhhthx
@oDA
main
barebonesDaemon
dataaccess
remindd
RetainedMainDaemonObject
REMAccountType
REMStoreMode
os_unfair_lock_s
Scope
NCKDatabaseScope
ICCloudContextSyncReason
REMSharedEntitySyncActivityType
REMXPCSyncInterfaceSyncReason
REMObjectIsConnectedState
URLResourceKey
NNSURLResourceKey
Foundation
CloudKit
_NSRange
REMSmartListUserDefinedVisibility
REMSmartListType
REMReminderNextThirdsHour
NLTag
NLTagScheme
__C_Synthesized
CKError
NCKErrorCode
ComparisonResult
NNSComparisonResult
DACalendarShareResponse
REMAlarmVehicleTriggerEvent
REMManualOrderingListType
REMListSharingStatus
BMMiningTaskCompletionStatus
QualityOfService
NNSQualityOfService
NaturalLanguage
Code
NCKErrorCode
;W_g
StartMigrationRequest
StartMigrationResponse
UnmigrateRequest
UnmigrateResponse
OneOf_Source
Credential
OneOf_Result
Details
Error
MigrateRequest
Option
User
MigrateResponse
NextStep
EmptyRequest
BasicResponse
PingRequest
PingResponse
TantorMigrationAPIAsyncClient
TantorMigrationAPIAsync
_StorageClass
remindd
Fields
RDTemplateOperationRevokeTemplatePublicLink
mostRecentPublicLinkUpdateRequestDate
publicLinkURLUUID
publicLinkCreationDate
publicLinkLastModifiedDate
publicLinkExpirationDate
lastAccessedSinceReferenceDate
listTypeRawValue
listID
concatenatedContainerIDsWithLocalContainerIDPrefix
concatenatedElementIDsWithLocalElementIDPrefix
account.identifier
RDApplicationShortcutAssembly
CKRecordField
RDPublicTemplate
ChangeTrackingAccountProvider
RDAssignmentNotificationEngine
BabysitTarget
RDDebouncing
LoadFactor
RDDebouncer
RDDebouncerWithNumber
RDDebounceableCKDatabaseNotification
RDDebouncerWithCKDatabaseNotification
Policy
Interval
%-=28
RDSavedAlarmVehicleTrigger
RDSavedAlarmTimeIntervalTrigger
RDSavedAlarmLocationTrigger
RDSavedAlarmDateTrigger
RDSavedAlarmTriggers
CodingKeys
REMCDReminder
Completable
RDExchangeAccountComplimentaryService
PersonIDHashing
RDExchangeAccountComplimentaryServiceDelegate
identifier
personID
DataDeserializationError
DataSerializationError
DataSerializationVersion
h"lx
daemonStatus
containerStats
testInitialSync
remindd
RDXPCDebugPerformer
DebugPerformerManualHashtagLabelUpdaterDelegate
DebugPerformerMockDABabysittableAccount
ckIdentifier
uuidForChangeTracking
identifier
account.identifier
lastAccessedSinceReferenceDate
markedForDeletion
listTypeRawValue
listID
account
ManualSortHintFetchRequest
ImageReversionError
SharedEntitySyncActivityFetchOption
RDTemplateOperationCopyRemindersFromCustomSmartListToTemplate
REMCDAccountListData
remindd
RDClientConnectionListener
RDSpringBoardApplicationShortcutUpdater
remindd
AlarmWrapper
NonceBearing
NonceBearingAlarm
DueDateVerifiableAlarm
DueDateNonVerifiableAlarm
RDEventStream
RDTimeEventStream
RDSharedInlineTagAutoConvertHandler
RDSharedInlineTagAutoConvertStoreHandler
Batcher
ReminderFieldConverter
FieldToHandle
Metrics
canonicalName
self
activityTypeRawValue
CandidateHashtag
AutoConversionError
UnfinishedMetrics
DataAccessSyncPerformer
RDXPCSyncInterfacePerformerFactory
RDXPCSyncInterfacePerformer
RDPublicCloudDatabaseControllerMock
FetchPublicCloudObjectResultMock
CDObjectID
!*05<
RDSavedReminder
CodingKeys
displayDateDate
title
completed
dueDate
parentReminder
identifier
list
RDAssignmentNotificationEngineAssembly
remindd
Fields
REMAlarmTriggerCDIngestor
REMAlarmTimeIntervalTriggerCDIngestor
REMAlarmDateTriggerCDIngestor_ObjC
REMAlarmDateTriggerCDIngestor
REMAlarmLocationTriggerCDIngestor
REMAlarmVehicleTriggerCDIngestor
ValueKey
RelationshipKey
RDClientIdentity
%.7@IO
!)1<G`@
!(.49@
!(.49'
$(-5<@
$(-5<k
&/57=BGPX]ck
&/57=BGPX]c
REMTemplateStorageCDIngestor
lastModifiedDate
sourceListIDURL
creationDate
identifier
RelationshipKey
ValueKey
REMListsDataViewInvocation_fetchListsInAccount
REMListsDataViewInvocation_fetchListsInGroup
REMListsDataViewInvocation_fetchByObjectIDs
REMListsDataViewInvocation_fetchDefaultList
REMListsDataViewInvocation_fetchDefaultListRequiringCloudKit
REMListsDataViewInvocation_fetchUserSelectableDefaultLists
REMListsDataViewInvocation_dataAccessFetchListsInAccount
REMListsDataViewInvocation_dataAccessFetchByObjectID
REMListsDataViewInvocation_dataAccessFetchByExternalIdentifier
REMListsDataViewInvocation_changeTrackingFetchByObjectIDIncludingConcealed
REMListsDataViewInvocation_userActivityFetchByExternalIdentifier
REMListsDataViewInvocation_debugFetchPhantomLists
REMListsDataViewInvocation_fetchByTemplateObjectID
REMPreferredDefaultListStorage
REMDaemonUserDefaultsPreferredListStorageAdapter
MockInMemoryPreferredDefaultListStorage
identifier
account
parentAccount
!(?/7
remindd
Fields
RDStoreControllerMigrator_AutoConvertSharedInlineTags
Runner
title
titleDocument
notes
notesDocument
ckServerShareData
ckServerRecordData
ckZoneOwnerName
identifier
ckIdentifier
list
account
RDJSONCodable
RDJSONCoder
RDCoreDataCoreSpotlightDelegate
AttributeSetCreationError
RDHashtagLabelUpdater
BabysitTarget
ChangeTrackingAccountProvider
RDHashtagLabelUpdaterDelegate
ManualHashtagLabelUpdaterDelegate
RDHashtagLabelRepairer
reminder
identifier
sharedToMeReminderCKIdentifier
hashtags
account
name
creationDate
account.identifier
HashtagTombstone
REMCDAlarmTimeIntervalTrigger
REMCDAlarmDateTrigger
REMCDAlarmLocationTrigger
REMCDAlarmVehicleTrigger
REMAlarmCDIngestor
AlarmTriggerRepresentable
RelationshipKey
ValueKey
RDManualSortIDAdapter
AccountManualSortIDsOption
REMDaemonUserDefaults
ICCloudConfiguration
RDStaledFileAttachmentCleanupStates
RDStaledFileAttachmentCleanupConfigurations
RDStaledFileAttachmentCleanupThrottleIntervalProviding
RDStaledFileAttachmentCleanupRateReduceFactorProviding
RDStaledFileAttachmentCleanupLimitProviding
identifier
RDStaledFileAttachmentCleanupActivity
RDStaledFileAttachmentCleanupActivityExecutable
RDStaledFileAttachmentCleanupExecutionDateStorage
type
RDStaledFileAttachmentCleanupRateReducer
reminder.account.identifier
REMSavedAttachmentCDIngestor
RelationshipKey
ValueKey
RDDARequestsQueueDelegate
RDDARequestsQueue
%)<.5
REMSmartListStorageCDIngestor
RelationshipKey
ValueKey
RDSharedListNotificationContentType
hashtags
alarmStorage
flagged
priority
displayDateDate
displayDateIsAllDay
account
list
completed
identifier
ReminderIDsWithMatchingHashtagsProvider
DateFilterAction
REMCDTemplateOperationQueueItem
OperationType
RDSharedInlineTagAutoConvertEngine
BabysitTarget
Configuration
UpdateReason
REMContactRepresentation
remindd
Fields
account.identifier
RDXPCSuggestedAttributesPerformer
MLModels
ConfigurationSource
RDDispatchQueue_ObjC
RDAlarmCoreSuggestionsConsumer
RDApplicationShortcutUpdater
RDTodayNotificationAssembly
xpc_event
RDXPCEventInterface
RDXPCEventStream
SystemXPCEventInterface
Token
AlarmHandler
Alarm
RDStoreControllerMigrator_DiacriticsInsensitiveHashtagLabels
canonicalName
hashtags
name
REMCDReminder
identifier
'.4:AIQ
Fields
 '/6<AIRY`flry
DistributedEvaluation
RDStoreControllerExporter
AlarmDate
Reminder
FuzzedEmbeddings
List
Account
ExportResult
CodingKeys
none
enter
leave
RDNotifydEventStream
NotificationName
RDContactInteractionAlarmProducerDataSource
RDContactInteractionAlarmProducerSessionManager
RDContactInteractionAlarmProducer
accountID
orderedIdentifierMap
RDFirstUnlockManager
RDTemplateOperationBatchDeleteCachedPublicTemplates
ICCloudConfiguration
REMDaemonUserDefaults
RDICCloudExtraneousAlarmsCollector
RDICCloudExtraneousAlarmsCollectorDelegate
RDICCloudExtraneousAlarmsSyncPerformer
RDICCloudExtraneousAlarmsCollectorConfigurations
RDICCloudExtraneousAlarmsCollectorStatesStorage
alarm.dueDateResolutionTokenAsNonce
identifier
alarm
REMCKSharedEntitySyncActivity
remindd
accountIdentifier
activityDate
authorUserRecordIDString
ckIdentifier
sharedEntityName
ActivityType
RDAlarmNotificationConsumer
BannerBehavior
REMCDSavedReminder
REMNSPersistentHistoryTracking
"(+/6?EKSYbhkqv}
REMReminderStorageCDIngestor
CDAuxiliaryReminderChangeInfo
RelationshipKey
ValueKey
timelineEngine
RDTimelineEngineProcessorType
RDTimelineEngine
identifier
displayDateDate
displayDateIsAllDay
dueDate
timeZone
list
recurrenceRules
RDTimelineEngineReminder
RDAddedReminderNotificationContent
RDRelevantShortcutsProcessor
REMCDManualSortHint
ModelSkippedError
SampleTooSmallError
KeyTuple
!'-/7:@CIOV]elry
REMAccountStorageCDIngestor
RelationshipOrderingValueKey
OrderableRelationshipKey
RelationshipKey
ValueKey
RDBeforeFirstUnlockNotificationEngine
REMAccountsDataViewInvocation_fetchAll
REMAccountsDataViewInvocation_fetchPrimaryActiveCloudKitAccount
REMAccountsDataViewInvocation_fetchActiveCloudKitAccountObjectIDs
REMAccountsDataViewInvocation_fetchByObjectID
REMAccountsDataViewInvocation_fetchByExternalIdentifier
REMAssignmentCDIngestor
identifier
RelationshipKey
ValueKey
state
isTerminated
RDMigrationClient
State
accountIdentifier
REMDaemonUserDefaults
RDSharedListActivityNotificationEngineUserDefaults
RDSharedListActivityNotificationsEngine
EngineConfiguration
JournalEntryUpdateItem
ckIdentifier
title
completed
list
creationDate
activityTypeRawValue
activityDate
RDDifferentialPrivacyRecorder
RDKeybagStateProvider
RDKeybagStateProviderFactory
_FixedKeybagStateProvider
RDKeyBagEventsController
RDKeybagLockState
type
account.identifier
sharedToMeReminderCKIdentifier
reminder
reminder.ckIdentifier
hashtagLabel
RDStoreControllerCloudKitNetworkActivityObserver
RDCompletedReminderNotificationContent
!%+17>DL5
!$(+.5
!$(+.
sourceListIDURL
parentAccount.identifier
identifier
creationDate
RDTemplateOperationCopyRemindersFromREMListToTemplate
RDDataStoreApplicationShortcutListProvider
$,2:BIQ
#)/3@
%-5=V
account.identifier
name
remindd
Fields
identifier
parentReminder
"+39?FKTZ^bent|
account.identifier
title
dueDate
allDay
timeZone
Fields
StringType
TypedPredicate
REMHashtagCDIngestor
RelationshipKey
ValueKey
RDSynchronizedKeyValueStore
ChangeEvent
Reason
Fields
RDTemplateOperationCreateTemplatePublicContentPreview
RDXPCActivityTimeEventStream
Name
RDTemplateOperationCopyRemindersFromPublicTemplateToREMList
!&@/8
REMRecurrenceRuleCDIngestor
DayOfWeek
RelationshipKey
ValueKey
CodingKeys
remindd
BaseFields
URLFields
FileFields
ImageFields
notifyd
RDLaunchAnalytics
title
RDStalePinnedListsEventHandlerDelegate
RDStalePinnedListsEventHandler
777777777
7777777
7777777/7777777/
RDWidgetRefreshEngine
RDXPCChangeTrackingPerformer
RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandlerDelegate
RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler
identifier
mostRecentTargetTemplateIdentifierByCurrentUser
creationDate
RDSavedURLAttachment
CodingKeys
RDStagedLightweightCoreDataMigrationCoordinator
BabysitTarget
CDIngestionCoordinator
IngestionContext
CDAuxiliaryChangeInfo
CoreDataType
REMAlarmTimeIntervalTrigger
REMAlarmDateTrigger
RDTimeAlarmProducerDataSource
RDFireDateSource
RDTimeAlarmProducer
RDXPCDaemonProtocol
RDXPCDaemon
RDCoreSuggestionsHandling
RDCoreSuggestionsController
=ggB
title
notes
list.sharingStatus
list.markedForDeletion
list.parentList
list.parentList.markedForDeletion
parentReminder
parentReminder.markedForDeletion
completed
identifier
completionDate
account.identifier
account.inactive
list.daIsEventOnlyContainer
list.daIsNotificationsCollection
ckIdentifier
displayDateDate
list.identifier
markedForDeletion
recurrenceRules
children
flagged
daCalendarItemUniqueIdentifier
creationDate
lastModifiedDate
allDay
alarmStorage
contactHandles
dueDate
externalIdentifier
hashtags
parentReminder.identifier
list
priority
remObjectID
self
RelationshipKey
ConcealedPredicate
CompletionPredicate
Predicates
type
identifier
inactive
externalIdentifier
name
daPushKey
daSyncToken
effectiveMinimumSupportedAppVersion
externalModificationTag
minimumSupportedAppVersion
resolutionTokenMap_v3_JSONData
daAllowsCalendarAddDeleteModify
daConstraintsDescriptionPath
daSupportsSharedCalendars
daWasMigrated
debugSyncDisabled
didChooseToMigrate
didChooseToMigrateLocally
didFinishMigration
listIDsMergeableOrdering_v2
persistenceCloudSchemaVersion
personID
personIDSalt_v1
AccountSortOrder
alarmProalarmProducer
RDAlarmProducerDataSource
identifier
account.identifier
alarm.reminder.list.daIsEventOnlyContainer
alarm.reminder.list.daIsNotificationsCollection
account.inactive
alarm.reminder.completed
isExtraneous
markedForDeletion
alarm.isExtraneous
alarm.markedForDeletion
alarm.originalAlarmUID
ckDirtyFlags
alarm.ckDirtyFlags
alarm.reminder.identifier
RDStoreControllerMigrator_MostRecentTargetTemplateIdentifierByCurrentUser
mostRecentTargetTemplateIdentifier
publicLinkURLUUID
Predicates
RDSuggestedAttributeCache
REMEventKitBridgingDataViewInvocation_fetchLists
REMEventKitBridgingDataViewInvocation_fetchReminders
REMEventKitBridgingDataViewInvocation_fetchIncompleteRemindersWithDueDate
REMEventKitBridgingDataViewInvocation_fetchCompletedRemindersWithCompletionDate
priorityRawValue
creationDate
isCompleted
operationTypeRawValue
templateIdentifier
RDTemplateOperationDownloadPublicTemplate
#'07@I
remindd
Fields
canonicalName
hashtags
name
recencyDate
CDIngestableKey
CDIngestor
CDIngestableStorageType CDIngestableCoreDataType CDIngestableValueKey CDIngestableRelationshipKey CDIngestableOrderableRelationshipKey CDIngestableRelationshipOrderingValueKey
CDIngestionValidationError
NoRelationshipOrderingValueKey
CDIngestorPredefinedIngestableKey
NoOrderableRelationshipKey
REMCalDAVNotificationCDIngestor
RelationshipKey
ValueKey
REMCDTemplate
"+28>EJSW[_bkqw}
$,3;CLS^bhloz
FireValue
RDStoreControllerNotificationCenter
CollectAndCoalescedOutputWithInputCount
Output
AccountTypeHostProvidingFireValue
AccountObjectIDProvidingFireValue
ChangedAccountFireValue
ChangedEntityFireValue
Observer
Token
CollectAndCoalescedChangedEntitiesWithInputCount
ChangedAccountInfo
EntityFilterOption
RDBogusCalendarCleaner
RDDecodeFromJSONDataValueTransformer
REMSharedActivityJournaling
REMDaemonUserDefaults
RDUserInteractionSessionManagerUserDefaults
RDUserInteractionSessionManager
remindd
RDAccountInitializer
DidCompleteInitializeAllAccountsObserver
RDCentralizedTaskAfterDelayScheduling
RDCentralizedTaskAfterDelaySchedulerFactory
RDHousekeepingActivityScheduler
RateReducer
RDHousekeepingActivity
RDHousekeepingRateReducerConfiguration
RDHousekeepingXPCActivityCriteriaProviding
RDJitteredMinimumDelayXPCActivity
RDJitteredMinimumDelayXPCActivityFactory
displayDateDate
displayDateTimeZone
displayDateIsAllDay
RDStoreController
RDAttachmentFileProvider
FileMetadata
ImageMetadata
URLMetadata
RDSavedAttachment
CodingKeys
dueDate
list
priority
creationDate
title
RDManualSortIDCacheContextDelegate
RDManualSortIDCacheContext
RDManualSortIDCacheReadOnlyContext
RDManualSortIDCacheReadAndWriteContext
RDThrottleable
RDThrottlingPolicy
RDThrottling
!(;.3
REMShareeCDIngestor
RelationshipKey
ValueKey
RDTransactionRegistrar
Reader
Writer
RDChannel
 @=c
REMRemindersDataViewInvocation_fetchByListID
REMRemindersDataViewInvocation_fetchByParentReminderID
REMRemindersDataViewInvocation_fetchByParentReminderIDs
REMRemindersDataViewInvocation_fetchReminderIDsByParentReminderID
REMRemindersDataViewInvocation_fetchByObjectID
REMRemindersDataViewInvocation_fetchByPredicateDescriptor
REMRemindersDataViewInvocation_fetchByExternalIdentifier
REMRemindersDataViewInvocation_fetchByDACalendarItemUniqueIdentifier
REMRemindersDataViewInvocation_fetchRemindersCountByListID
REMRemindersDataViewInvocation_fetchRemindersCountByParentReminderID
REMAssignmentsDataViewInvocation_fetchByObjectID
REMHashtagsDataViewInvocation_fetchByObjectID
identifier
account
reminder
dueDate
list
priority
creationDate
title
RDStoreControllerMigrator_UnsetCKDirtyFlagsInNonCKAccounts
RDTemplateOperationCopyRemindersFromTemplateToREMList
RDMergePolicy
REMDaemonUserDefaults
REMAccountsListDataViewUserDefaults
PolymorphicListItem
Model
name
Cache
CodingKeys
PersistentHistoryTruncationHandler
RDApplicationShortcutEngineInterface
RDApplicationShortcutEngine
REMManualOrderingCDIngestor
RelationshipKey
ValueKey
!'08
RDSavedRecurrenceRule
RDSavedDayOfWeek
CodingKeys
RDTemplateOperationCopyRemindersToTemplate
lastModifiedDate
REMCDURLAttachment
REMCDFileAttachment
remindd
REMAttachmentRepresentable
REMAttachmentCDIngestor
REMFileAttachmentCDIngestor
REMImageAttachmentCDIngestor
REMURLAttachmentCDIngestor
RelationshipKey
ValueKey
remindd
RDClientConnection
RDClientConnectionDelegate
RDICCloudSchemaCatchUpSyncScheduling
RDICCloudSchemaCatchUpSyncSchedulerFactory
RDICCloudSchemaCatchUpSyncPerformer
RDICCloudSchemaCatchUpSyncController
RDICCloudSchemaCatchUpSyncXPCActivity
RDICCloudSchemaCatchUpSyncXPCActivityFactory
RDThrottler
RDApplicationShortcutListProvider
RDApplicationShortcutListProviderDelegate
RDCoreBehaviorModel
RDCoreBehaviorModelTrainingDelegate
Result
Prediction
Context
Feedback
CodingKeys
RDVehicleAlarmProducerDataSource
RDVehicleAlarmProducer
REMCRMergeableOrderedSet
REMCRMergeableStringDocument
remindd
REMCDObjectFields
REMCDObjectResolutionTokenFields
REMCRSerializable
Fields
RDDisabledAccountsEventHandler
RDXPCIndexingPerformer
RDAccountDataMover
RDReminderDataCopier
RDReminderDataICSCopier
RDReminderDataCloudKitCopier
RDReminderDataExchangeCopier
Statistics
REMDaemonUserDefaults
RDExtraneousAlarmUserDefaults
RDExtraneousAlarmCleaner
BabysitTarget
identifier
alarm
alarm.reminder.identifier
account
RDManualSortHintUpdater
RDSavedReminders
CodingKeys
REMListFetchExecutor
list
parentAccount
name
RDDynamicSignificantTimeNotificationEngineEventSetter
RDDynamicSignificantTimeNotificationEngine
XPCEventSetter
CDFetching
creationDate
priority
displayDateDate
title
account
identifier
parentSavedReminderIdentifier
REMCDReminderInZREMCDOBJECT
REMCDReminderInZREMCDREMINDER
REMCDListInModelVersionV5
REMCKCloudStateInModelVersionV5
MigrateRemindersFromZREMCDOBJECTToZREMCDREMINDER
locationManager
remindd
RDLocationManagerDelegate
RDLocationManagerType
RDLocationManager
RDSavedHashtag
CodingKeys
DABabysitter
RDBabysitCrashDetectable
RDBabysittable
RDBabysitter
RDMentionsExtractor
Candidate
ExtractionResult
REMColor
'08;AFMV^ci
REMSavedReminderStorageCDIngestor
lastModifiedDate
RelationshipKey
ValueKey
RDXPCBarebonesDaemon
REMTemplatesDataViewInvocation_fetchTemplatesInAccount
REMTemplatesDataViewInvocation_fetchByObjectIDs
REMSmartListsDataViewInvocation_fetchSmartList
REMSmartListsDataViewInvocation_fetchAllCustomSmartLists
REMSmartListsDataViewInvocation_fetchCustomSmartListsInAccount
REMSmartListsDataViewInvocation_fetchCustomSmartListsInGroup
RDIntentsRelevantShortcutsHandlingType
RDIntentsRelevantShortcutsHandling
RDIntentsRelevantShortcutsHandlingItem
RDAccountPropertiesNotifier
REMTipKitDataViewInvocation_fetchListsCount
REMTipKitDataViewInvocation_fetchListsWithCustomBadgeCount
REMTipKitDataViewInvocation_fetchUncompletedRemindersCount
REMTipKitDataViewInvocation_fetchCompletedRemindersCount
REMTipKitDataViewInvocation_fetchCompletedRemindersCountInList
REMTipKitDataViewInvocation_fetchCustomSmartListsCount
REMTipKitDataViewInvocation_fetchHashtagsCount
RDExecutionDateStorage
RDExecutionDatePossessingExecutable
RDExecutionIntervalThrottlingPolicy
Fields
remindd
RDUserNotificationPresenting
RDUserNotificationCenterDelegate
RDUserNotificationCenter
local
RDAccountManualSortID
identifier
type
personID
personIDSalt_v1
%:ORc
&Vchildren
identifier
completed
priority
displayDateDate
title
displayDateIsAllDay
displayDateTimeZone
SortingStyle
Utilities
ManualSortHintPersistenceHost
RDReplicaManagerUtilities
identifier
RDReplicaManagerPayload
RDManualSortIDCache
list
parentReminder
!)3;CKX`jrz
$+29ELU\cmt{
$+29ELW^eqx
parentList
parentList.markedForDeletion
isGroup
account.identifier
account.inactive
daIsEventOnlyContainer
daIsNotificationsCollection
badgeEmblem
name
identifier
parentAccount.identifier
sharingStatus
externalIdentifier
mostRecentTargetTemplateIdentifierByCurrentUser
pinnedDate
isPinnedByCurrentUser
sharees
parentList.identifier
parentAccount
remObjectID
self
Predicates
REMAppleAccountUtilities
RDAccountHostnameProvider
RDDACalDAVShareRequestHandler
PolymorphicListItem
Model
RDDaemonController
RDNewlySharedToMeTagAutoConvertRunner
ckIdentifier
self
metadata
parentSavedReminderIdentifier
template.identifier
hasLocationTriggersOrVehicleEventTriggers
hasHashtags
displayDateDate
identifier
completionDate
EraAndYear
RDExecutable
RDDARequest
remindd
RDXPCStorePerformer
identifier
REMDaemonUserDefaults
ICCloudConfiguration
RDSyncPollerUserDefaults
RDSyncPollerConfiguration
RDSyncPoller
REMDaemonUserDefaults
REMHashtagLabelDataViewUserDefaults
filterData
Cache
CodingKeys
RDTemplateOperationQueueDelegate
RDTemplateOperation
RDTemplateOperationQueue
BabysitTarget
ValidationError
 @l<
RDManualSortHint
REMDaemonUserDefaults
RDICCloudConfigurationUpdaterUserDefaults
RDICCloudConfigurationUpdateScheduling
RDICCloudConfigurationUpdateSchedulerFactory
RDICCloudConfigurationUpdater
RDICCloudConfigurationUpdaterXPCActivity
RDICCloudConfigurationUpdaterXPCActivityFactory
RDPublicCloudDatabaseControllable
RDPublicCloudDatabaseController
RDObjectDescription
REMAlarmLocationTrigger
RDLocationAlarmProducerDataSource
RDCLRegionSource
RDLocationAlarmProducer
ICCloudContext
RDAccountPersonIDSaltObserver
AccountInfo
SaltValueError
RDPublicCloudObject
RDManualSortIDHashKeyProviding
_RDManualSortIDPrimaryCloudKitAccountHashKeyProvider
RDManualSortIDUnitTestHashKeyProvider
name
list
ListKey
Z^bhD
048>
;?CI;
`dhnE
159?
RDCentralizedTaskScheduling
RDCentralizedTaskSchedulerFactory
SchedulerType
RDAnyActivityScheduler
RDDynamicXPCActivity
Criteria
CompletionStatus
Identifier
ProtectionClass
MotionState
Priority
IntervalInfo
RDTemplateOperationCreateOrUpdateTemplatePublicLink
mostRecentPublicLinkUpdateRequestDate
publicLinkURLUUID
publicLinkLastModifiedDate
publicLinkExpirationDate
publicLinkCreationDate
RDRootEntityNameByEntityNameCache
RDDisplayDateUpdater
displayDateTimeZone
displayDateUpdatedForSecondsFromGMT
Fields
lastModifiedDate
attachmentTypeRawValue
account.identifier
reminder.template.identifier
reminder.identifier
ReminderIDsMergeableOrderingHelper
ReminderIDsMergeableOrdering
completionDate
RDStoreControllerMigrator_IsPinnedByCurrentUser
sharingStatus
isPinnedByCurrentUser
RDDaemonProtocol
RDDaemon
RDBarebonesDaemon
REMDaemonUserDefaults
ICCloudConfiguration
RDImageDeduplicationStates
RDImageDeduplicationActivityConfigurations
RDImageDeduplicationActivityThrottleIntervalProviding
RDImageDeduplicationActivityRateReduceFactorProviding
RDImageDeduplicationActivityLimitProviding
identifier
RDImageDeduplicationActivity
RDImageDeduplicationExecutable
sha512Sum
PreprocessedAttachment
LocalAnalytics
CrashCleaner
RDImageDeduplicationActivityExecutionDateStorage
DeduplicationError
type
RDImageDeduplicationActivityRateReducer
CrashCleanError
CompositeError
 )28@IPW]`diqx~
REMListStorageCDIngestor
identifier
parentReminder
creationDate
icsDisplayOrder
RelationshipOrderingValueKey
OrderableRelationshipKey
RelationshipKey
ValueKey
RDManualSortIDPersistenceHost
RDUserInitiatedHashtagLabelApprovalTagAutoConvertRunner
ReminderDataModelVersion
accountUtils
RDAccountUtils
InactivatedICloudCalDavDataMover
LocalDataToICloudMover
AccountInfo
ACAccountProperty
NoInactivatedICloudCalDavREMAccountError
DidNotChooseToMigrationCloudKitError
NoCloudKitREMAccountError
LocalAccountIsEmptyError
TargetAccountIsNonEmptyError
NoICloudREMAccountError
status
account.identifier
reminder.completed
reminder.identifier
reminder.completionDate
Predicates
RDSharedInlineTagAutoConvertHandler_BatchRunner
REMCDSavedAttachment
REMReminderFetchExecutor
dueDate
list
priority
creationDate
title
REMSiriSearchLimitedDataViewInvocation_fetchReminders
%-=28
remindd
LocationFields
RDStoreControllerAnalytics
REMDaemonUserDefaults
RDSuggestedAttributesAutoTrainerPersistentStorage
RDSuggestedAttributesAutoTrainer
REMCDPublicTemplate
RDStoreControllerMigrator_AccountIdentifierHashtagLabels
RDInvocable
RDStoreControllerInvocable
RDSwiftInvocableProtocol
Performer
AnyRDSwiftInvocableProtocol
#+3=ER
$-4@
!(18DsmartListType
parentAccount.identifier
mostRecentTargetTemplateIdentifier
pinnedDate
parentList.identifier
parentList
name
identifier
account.identifier
parentAccount
Predicates
remindd
Fields
RDReminderDataPostMigrationHandler
 $(,048<@DGL
NSXPCConnection
RDClientAccessLevelTruthSource
RDClientAccessLevel
REMResolutionToken
REMResolutionTokenMap
RDTodayNotificationEngine
remindd
RDManagedObjectIDCache
RDPrimaryActiveCloudKitAccountManagedObjectIDCache
RDPredefinedObjectKey
RDPredefinedManagedObjectIDCache
RDPredefinedSmartListAndManualOrderingManagedObjectIDCache
RDElementManualSortID
account
identifier
ckIdentifier
externalIdentifier
alarmEngine
RDAlarmProducing
RDAlarmConsuming
RDAlarmProducerDelegate
RDAlarmEngine
RDProducerAlarmOrigin
RDDataSourceAlarm
RDProducerAlarm
RDProducerAlarmType
list
parentReminder
sharedListPropertyKey
RDDatabaseSaver
remindd
RDDataAccess
RDDataAccessREMStoreProvider
RDDataAccessUserNotificationPresentingProvider
InvernessClientError
DatabaseType
InvernessClient
Invocable
TextFormatEncoder
AnyExtensionField
ExtensionField
ValueType
OptionalExtensionField
RepeatedExtensionField
PackedExtensionField
OptionalEnumExtensionField
RepeatedEnumExtensionField
PackedEnumExtensionField
OptionalMessageExtensionField
RepeatedMessageExtensionField
OptionalGroupExtensionField
RepeatedGroupExtensionField
SwiftProtobuf
JSONEncodingOptions
SelectiveVisitor
BinaryDecodingError
JSONScanner
BinaryDecodingOptions
Google_Protobuf_Duration
_ProtoNameProviding
JSONEncodingError
UnknownStorage
JSONDecodingError
JSONDecoder
Google_Protobuf_Syntax
Google_Protobuf_Type
Google_Protobuf_Field
Kind
Cardinality
Google_Protobuf_Enum
Google_Protobuf_EnumValue
Google_Protobuf_Option
_StorageClass
DoubleFormatter
Google_Protobuf_Empty
ExtensionMap
Message
_MessageImplementationBase
JSONMapEncodingVisitor
JSONDecodingOptions
BinaryEncodingVisitor
BinaryEncodingMessageSetVisitor
AnyUnpackError
TextFormatDecoder
WireFormat
ExtensionFieldValueSet
Decoder
AnyMessageExtension
MessageExtension
Google_Protobuf_DoubleValue
Google_Protobuf_FloatValue
Google_Protobuf_Int64Value
Google_Protobuf_UInt64Value
Google_Protobuf_Int32Value
Google_Protobuf_UInt32Value
Google_Protobuf_BoolValue
Google_Protobuf_StringValue
Google_Protobuf_BytesValue
BinaryDecoder
TextFormatDecodingError
HashVisitor
BinaryEncodingError
Internal
FieldType
BaseType
MapKeyType
MapValueType
ProtobufFloat
ProtobufDouble
ProtobufInt32
ProtobufInt64
ProtobufUInt32
ProtobufUInt64
ProtobufSInt32
ProtobufSInt64
ProtobufFixed32
ProtobufFixed64
ProtobufSFixed32
ProtobufSFixed64
ProtobufBool
ProtobufString
ProtobufBytes
Visitor
Google_Protobuf_Timestamp
_CustomJSONCodable
Google_Protobuf_SourceContext
"/<I
Google_Protobuf_Api
Google_Protobuf_Method
Google_Protobuf_Mixin
_StorageClass
JSONEncoder
AnyMessageStorage
InternalState
JSONEncodingVisitor
Google_Protobuf_FieldMask
Enum
''''''''''''''''''
''''''''
''''''''''''''
''''''''''''''''''''''''''''''
TextFormatScanner
ExtensibleMessage
TextFormatEncodingVisitor
SimpleExtensionMap
BinaryEncodingSizeVisitor
BinaryEncodingMessageSetSizeVisitor
InternPool
_NameMap
NameDescription
Name
Names
NameString
Google_Protobuf_NullValue
Google_Protobuf_Struct
Google_Protobuf_Value
OneOf_Kind
Google_Protobuf_ListValue
_StorageClass
@BinaryEncoder
Google_Protobuf_Any
ReminderKitAdditions
RDStoreControllerMigrator_RemoveOrphanedLists
RDStoreControllerMigrator
NSObject
ModelObjectConversions
CoreDataProperties
REMCDAuxiliaryChangeInfo
ICSelectorDelayer
REMCDAuxiliaryReminderChangeMoveInfo
RDStoreControllerMigrator_AccountIdentifierMetadata
ICCloudThrottlingPolicy
REMCKSharedObjectOwnerName
REMCDImageAttachment
ICCloudContext
APSConnectionDelegate
DABabysittable
ICREMCDAccountMergeLocalObjectsContext
ICCloudContextSyncMetrics
ICLoggable
REMCDAlarmTrigger
RDHasCKDatabaseScope
REMCDHashtag
REMRDSpotlightIndexInvalidating
RDAttachmentFileManager
_ICCloudConfigurationStorage
ICCloudConfigurationProtocol
ICCloudConfigurationDownloadable
ICCloudConfigurationExtraneousAlarm
ICCloudConfigurationStaledFileAttachmentCleanup
ICCloudConfigurationImageDeduplication
ICCloudConfiguration
ICCloudConfigurationExtraneousAlarmCollector
_ICCloudDefaultValuesConfigurationStorage
REMCDReminder
REMAlarmsProviding
REMRDSpotlightIndexProviding
RDDiskSpaceUtils
CoreDataProperties_Private
REMCDAuxiliaryReminderChangeInfo
REMCDAlarmVehicleTrigger
RDFileManager
REMCDRootEntityObject
REMCDList
CKRecordSystemFieldsTransformer
CKShareSystemFieldsTransformer
REMCDAlarmTimeIntervalTrigger
REMCDAlarmLocationTrigger
REMCDMigrationState
ICCloudSchemaCatchUpSyncContext
REMCDReplicaManager
Phantom
REMCDObject
REMThrowingObjectIDProviding
REMNullableObjectIDProviding
REMSupportedVersionParentEffectiveVersionProviding
REMSupportedVersionProviding
REMSupportedVersionUpdating
REMChangeTrackingIdentifiable
REMCDCalDAVNotification
ICNSBlockOperation
ICUtilities
SaveExtension
ICCloudSchemaCatchUpSyncSchedulingStateStorage
ICUserDefaults
IC_Private
REMCDAlarm
ICCloudSchemaCompatibilityUtils
CloudKit
ICCloudObject
REMCDAudioAttachment
REMCDAccount
reminddAdditions
REMCDHashtagLabel
REMCDAuxiliaryReminderChangeDeleteInfo
CoreDataProcessingAdditions
RDStoreControllerMigrator_JSONProperties
_REMNSPersistentHistoryTrackingAbstract
REMCKCloudState
REMCDObjectTreeProcessorDelegateFactory
REMCDRecurrenceRule
ICSyncSettings
REMCDFileAttachment
REMCDSharee
REMCDObjectEffectiveVersionValidationNode
REMCDObjectProcessableTreeNode
REMCDObjectIdentifiableTreeNode
REMCDObjectEffectiveVersionValidationDelegateImpl
REMCDObjectTreeProcessorDelegate
_REMCDObjectEffectiveVersionManualValidationNode
_REMCDObjectEffectiveVersionManualValidationDelegateImpl
REMCDAssignment
REMCDSharedToMeReminderPlaceholder
REMCDSmartList
REMCKServerChangeToken
REMCDAlarmDateTrigger
ICCollaborationController
RDStoreControllerValidationPolicy
RDStoreControllerManagedObjectContext
RDStoreController
RDCoreSpotlightDelegateManager
REMCDChangeTrackingState
REMCDURLAttachment
REMCDAttachment
ICCloudContextDelegate
REMChangeTrackingOptionsProviding
RDPersistentStoreLookup
InMemoryPrimaryActiveCKAccountREMObjectID
AccountStorageCaching
RDPersistentStoreLookupForREMCDObject
ICDataExtensions
ICCloudThrottlingLevel
RDStoreControllerMigrator_PopulateDefaultValues
ICReachability
_REMCKIdentifierAccountIdentifierPair
ICBatchFetchHelper
REMCDObjectTreeProcessor
RDStoreControllerMigrator_CKParentReminderIdentifier
PersonIDSaltGenerator
CloudKitUtils
NSValueTransformer_JSON_REMResoutionTokenMap
NSSecureUnarchiveFromDataTransformer_REMResolutionTokenMap
NSSecureUnarchiveFromDataTransformer_REMColor
NSSecureUnarchiveFromDataTransformer_REMOrderedIdentifierMap
RDStoreControllerMigrator_DisplayDate
parent
raise:format:
dateByAddingComponents:toDate:options:
cloudKitMergeLocalLastDateMaxRetryReached
updateDisplayDateWithDueDateComponents:alarm:alarmsProviding:
initWithPreviousServerChangeToken:
setServerChangeTokenData:
dateByAddingTimeInterval:
mainContainerURL
fetchLongLivedOperationWithID:completionHandler:
cloudKitMetrics
setNotificationInfo:
notificationFromRemoteNotificationDictionary:
distantFuture
dateByAddingUnit:value:toDate:options:
resultType
rangeOfString:
managedObjectClassName
isOperatingSystemAtLeastVersion:
setChangeTokenUpdatedBlock:
notificationID
distantPast
setFetchAllChanges:
dateFormatFromTemplate:options:locale:
cloudKitResultsLimitPerSyncOperation
setChanges:
notificationType
isOptional
initWithRecordID:action:
dateFromComponents:
cloudKitSchemaCatchUpSyncLastScheduledDate
setCkCloudState:
doubleForKey:
setObject:atIndexedSubscript:
addBarrierBlock:
dateWithTimeIntervalSince1970:
cloudKitSchemaCatchUpSyncLastSuccessBuildVersion
initWithRecordName:zoneID:
dateWithTimeIntervalSinceReferenceDate:
setFetchDatabaseChangesCompletionBlock:
batchUpdateRequestWithEntityName:
cloudKitSchemaCatchUpSyncLastSuccessDate
setShouldSendContentAvailable:
path
blockOperationWithBlock:
retryLaterErrorWithInterval:
initWithRecordType:recordID:
supportsMoveAcrossLists
pathExtension
initWithRecordZoneIDs:configurationsByRecordZoneID:
boolForKey:
cloudKitSchemaCatchUpSyncSchedulingState
supportsMoveAcrossSharedLists
initWithRecordZonesToSave:recordZoneIDsToDelete:
setFetchNewestChangesFirst:
debugForceSupportCloudKitSchemaCatchUpSyncBackgroundScheduling
addCkServerChangeTokensObject:
initWithRecordsToSave:recordIDsToDelete:
setFetchRecordZoneChangesCompletionBlock:
debugSimulateSqliteFull
reverseObjectEnumerator
duration
addDependency:
setFetchRecordsCompletionBlock:
uppercaseString
decodeExternalIdentifierForMarkedForDeletionObject:
recordChangeTag
setFetchRequest:
isSandboxEnvironment
setObjectIdentifier:
bundleID
initWithRootRecord:
setFetchSubscriptionCompletionBlock:
sync
rootRecordID
numberWithBool:
initWithRootRecord:shareID:
size
addExecutionBlock:
bytes
enableAutoGenerateCKPersonIDSalt
setClientName:
numberWithDouble:
initWithShareMetadatas:
recordIDs
fetchRequestWithEntityName:
cStringUsingEncoding:
numberWithInt:
recordIDsToDelete
fetchUserRecordIDWithCompletionHandler:
numberWithInteger:
initWithStorage:
sortedArrayUsingComparator:
synchronize
cloudkitCollaboration
encodeExternalIdentifierForMarkedForDeletionObject:
numberWithLongLong:
addObserver:forKeyPath:options:context:
setCloudKitMergeLocalLastBuildVersionMaxRetryReached:
isSharedWithShareeCount:sharingStatus:
systemBuildVersion
saveRecordZone:completionHandler:
encodeSystemFieldsWithCoder:
numberWithShort:
setCloudKitMergeLocalLastDateMaxRetryReached:
numberWithUnsignedInteger:
encodedData
setOwnerName:
defaultSessionConfiguration
addObserverForName:object:queue:usingBlock:
systemTimeZone
completionBlock
isSubclassOfClass:
setCloudKitSchemaCatchUpSyncLastScheduledDate:
numberWithUnsignedLong:
initWithSubscriptionID:
setParent:
defaultTimeZone
setCloudKitSchemaCatchUpSyncLastSuccessBuildVersion:
components:fromDate:
callStackSymbols
initWithSubscriptionsToSave:subscriptionIDsToDelete:
setStoreID:
numberWithUnsignedLongLong:
entities
recordZoneIDs
componentsJoinedByString:
defaultValue
setCloudKitSchemaCatchUpSyncLastSuccessDate:
addOperations:waitUntilFinished:
componentsSeparatedByString:
fileExistsAtPath:isDirectory:
setCloudKitSchemaCatchUpSyncSchedulingState:
persistentStoreDescriptionWithURL:
recordZonesToSave
callingParticipant
isValid
entityDescriptionWithContext:
recordsToSave
configurationsByRecordZoneID
entityForName:inManagedObjectContext:
persistentStoreForURL:
objectAtIndex:
objectAtIndexedSubscript:
standardUserDefaults
fileURLWithPath:
setPerRecordCompletionBlock:
entityNamesToIncludeFromTrackingWithOptionProvider:
cancel
temporaryMLModelURL
setSuspended:
enumerateKeysAndObjectsUsingBlock:
cancelAllOperations
setPerRecordDeleteBlock:
startAccessingSecurityScopedResource
keyEnumerator
setPerRecordProgressBlock:
setConfiguration:
initWithUUIDString:
objectEnumerator
finishEncoding
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
setPerRecordSaveBlock:
validationErrorDifferentZoneObjectID:zoneOwnerName:parentObjectID:parentZoneOwnerName:
initWithZoneID:
enumeratorAtURL:includingPropertiesForKeys:options:errorHandler:
registerDefaults:
mergedModelFromBundles:
validationErrorListHasNoAccount:
cancelPreviousPerformRequestsWithTarget:
timeIntervalSinceDate:
error
initWithZoneName:
setPerShareCompletionBlock:
deleteHistoryBeforeDate:
validationErrorMoveFromAccount:toAccount:objectID:
timeIntervalSinceNow
deleteHistoryBeforeToken:
metadataForPersistentStoreOfType:URL:options:error:
validationErrorMoveReminderFromList:toList:inAccount:
containerIdentifier
timeIntervalSinceReferenceDate
secondsFromGMT
caseInsensitiveCompare:
setInternal_ChangeTransaction:
startSpotlightIndexing
validationErrorNestedSubtask:parentReminderID:
setContextName:
errorChangeSetWithError:
methodForSelector:
fireDate
validationErrorSubtaskAndParentNotOnSameList:parentReminderID:
containerWithIdentifier:
_removeAllPersistentStores:
insertNewObjectForEntityForName:inManagedObjectContext:
statusCode
metrics
postEventWithName:payload:error:performAutoBugCaptureOnError:
setTimeStyle:
objectIDWithUUID:entityName:
insertObject:atIndex:
deleteRule
containsObject:
timeZoneWithName:
_resolveAccountID:
objectIDsForRelationshipNamed:
changedManagedObjectID
stopAccessingSecurityScopedResource
containsString:
setCurrentLocalVersion:
intValue
valueForKeyPath:
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
setTimestamp:
errorWithDomain:code:userInfo:
pptSentinelURLInContainerURL:
timestamp
errorWithREMChangeErrorCode:
indexOfObject:inSortedRange:options:usingComparator:
stopSpotlightIndexing
contextName
setToken:
token
errorWithREMChangeErrorCode:underlyingError:
predicateWithFormat:
rem_dataWithRandomBytesWithLength:
checkResourceIsReachableAndReturnError:
intersectSet:
MLModelURL
indexesOfObjectsPassingTest:
_setEnabledTopics:
rem_dateComponentsWithDateUsingArchivingTimeZone:isAllDay:
initForReadingFromData:error:
tombstone
intersectsSet:
copy
waitUntilAllOperationsAreFinished
setPreviousServerChangeToken:
URLByAppendingPathComponent:
exceptionWithName:reason:userInfo:
tooManyLoadedStoresError
getResourceValue:forKey:error:
setTransactionNumber:
topic
setPrimitiveValue:forKey:
URLByAppendingPathComponent:isDirectory:
sessionWithConfiguration:
rem_dateWithDateComponentsUsingArchivingTimeZone:
initRequiringSecureCoding:
setLastConsumedChangeToken:
setDateStyle:
topologicallySortRecords:withError:
URLByAppendingPathExtension:
setProcessID:
group
rem_formatterWithTimeZone:
setDay:
setAcceptSharesCompletionBlock:
dependencies
URLByDeletingLastPathComponent
rem_hasPrefixCaseInsensitive:
executeRequest:withContext:error:
previousServerChangeToken
weakToStrongObjectsMapTable
coreSpotlightExporter
allObjects
URLByDeletingPathExtension
storeID
willAccessValueForKey:
setDebugForceSupportCloudKitSchemaCatchUpSyncBackgroundScheduling:
allValues
destinationEntity
URLByResolvingSymlinksInPath
countByEnumeratingWithState:objects:count:
isCancelled
dictionary
willChangeValueForKey:
transactionNumber
dictionaryForKey:
objectsAtIndexes:
rem_isFirstString:equalToSecondString:
setLatestVersionSyncedToCloud:
appendFormat:
dictionaryWithCapacity:
stringByAddingPercentEncodingWithAllowedCharacters:
primitiveValueForKey:
lastConsumedChangeToken
URLForDirectory:inDomain:appropriateForURL:create:error:
appendString:
stringByAppendingFormat:
dictionaryWithContentsOfURL:
initWithCapacity:
dictionaryWithObject:forKey:
stringByAppendingPathExtension:
setQueryGenerationFromToken:error:
stringByAppendingString:
dictionaryWithObjects:forKeys:count:
setLocalVersionDate:
initWithChangeTransactions:
aa_accountClass
stringByDeletingPathExtension
aa_altDSID
lastPathComponent
stringForKey:
URLHostAllowedCharacterSet
didAccessValueForKey:
writeToURL:error:
processID
URLWithString:
absoluteString
removeCkServerChangeTokensObject:
writeToURL:options:error:
UTF8String
obtainPermanentIDsForObjects:error:
unarchivedObjectOfClass:fromData:error:
removeCkSharedObjectOwnerNamesObject:
hasPrefix:
unionSet:
operatingSystemVersionString
setMarkZonesAsUserPurged:
UUID
setWithArray:
UUIDString
lastTransactionTimestampWithManagedObjectContext:affectedStores:
stringWithFormat:
uniquenessConstraints
initWithData:
removeLastObject
setWithCapacity:
setDiscretionary:
operationID
setRecordWasChangedBlock:
stringWithString:
removeMuteNotificationOptionsForSharedList:
initWithData:encoding:
setWithObject:
setRecordWithIDWasDeletedBlock:
removeObject:
setMaxConcurrentOperationCount:
setWithObjects:
strongToStrongObjectsMapTable
setRecordZoneChangeTokensUpdatedBlock:
currentLocale
hashTableWithOptions:
_accountType
initWithDate:allDay:timeZone:
arrayByAddingObject:
setWithSet:
setRecordZoneFetchCompletionBlock:
removeObjectForKey:
arrayByAddingObjectsFromArray:
_accountTypeMaskWithBitMask:
setZoneName:
hierarchicalRootRecordID
currentQueryGenerationToken
setRecordZoneWithIDChangedBlock:
isEqualToData:
removeObjectsInArray:
arrayWithArray:
set_sourceApplicationBundleIdentifier:
setRecordZoneWithIDWasDeletedBlock:
isEqualToDate:
arrayWithCapacity:
removeObjectsInRange:
removeObserver:
arrayWithObject:
isEqualToDictionary:
didMarkForDeletingOnNextLanuchWithPersistentStore:deletedObjectIDs:
isEqualToString:
unsafeUntilSystemReady_allICloudACAccounts
arrayWithObjects:count:
removeObserver:forKeyPath:
promptUserToFileBugWithAlertMessage:bugTitle:bugDescription:
setDoesRelativeDateFormatting:
isExecuting
unsafeUntilSystemReady_allICloudAccountsWithCloudKitEnabled
initWithEnvironmentName:namedDelegatePort:queue:
didRemoveInvalidPersistentStoreOnInitWithStore:
setDouble:forKey:
propertiesByName
operations
fetchAllLongLivedOperationIDsWithCompletionHandler:
subscriptionID
didRemoveStoreFilesOnInitWithURLs:
accountOverrideInfo
isFinished
fetchAllSubscriptionsOperation
subscriptionOwnerUserRecordID
clientNamesOfREMCDChangeTrackingStateWhichShouldNotBeResetUponPersistentHistoryTruncation
data
propertiesToFetch
dataTaskWithURL:completionHandler:
subscriptionsToSave
dataUsingEncoding:
initWithFormat:arguments:
unsignedIntValue
substringFromIndex:
attributeType
localizedDescription
unsignedIntegerValue
fetchCurrentUserRecordOperation
setResultsLimit:
substringWithRange:
attributesByName
localizedStringForStatusCode:
setModifyRecordZonesCompletionBlock:
author
accountStatusWithCompletionHandler:
setModifyRecordsCompletionBlock:
orderedSetWithArray:
setModifySubscriptionsCompletionBlock:
longLongValue
superentity
accountStoresFailToLoadWithError:
quantity
setBundleID:
initWithPersistentHistoryChange:
resolveObjectIDWithUUID:entityName:
setByAddingObject:
resourceURL
nextObject
lowercaseString
cloudKitMergeLocalLastBuildVersionMaxRetryReached
base64EncodedStringWithOptions:
addPrivateOptions:
rem_shouldUseShortCompleteString
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
migrateStoreIfNeeded:metadata:
migrateStore:
ic_prettyDescriptionWithTabLevel:
ic_setNonNilObject:forKey:
ic_addKey:forNonNilObject:
isConnectedToAccountObject:
fetchRequest
accountIdentifier
T@"NSString",C,D,N
canonicalName
firstOccurrenceCreationDate
T@"NSDate",C,D,N
name
recencyDate
uuidForChangeTracking
T@"NSUUID",C,D,N
hashtags
T@"NSSet",&,D,N
isAbstract
cdEntityName
shouldSyncToCloud
databaseScope
Ts,D,N
ownerName
serverChangeTokenData
T@"NSData",&,D,N
zoneName
account
T@"REMCDAccount",&,D,N
badgeEmblem
color
T@"REMColor",&,D,N
filterData
showingLargeAttachments
TB,D,N
smartListType
sortingStyle
pinnedDate
mostRecentTargetTemplateIdentifier
T@"NSUUID",&,D,N
parentAccount
parentList
T@"REMCDList",&,D,N
init
dealloc
initWithTarget:selector:delay:waitToFireUntilRequestsStop:callOnMainThread:
requestFire
fireImmediately
callTargetSelector
isScheduledToFire
cancelPreviousFireRequests
_cancelFireRequests
target
setTarget:
selector
setSelector:
delay
setDelay:
waitToFireUntilRequestsStop
setWaitToFireUntilRequestsStop:
callOnMainThread
setCallOnMainThread:
requestQueue
setRequestQueue:
fireBlock
setFireBlock:
.cxx_destruct
_waitToFireUntilRequestsStop
_callOnMainThread
_target
_selector
_delay
_requestQueue
_fireBlock
T@,W,N,V_target
T:,N,V_selector
TB,N,V_waitToFireUntilRequestsStop
TB,N,V_callOnMainThread
T@"NSObject<OS_dispatch_queue>",&,N,V_requestQueue
T@?,C,N,V_fireBlock
Td,V_delay
TB,R,N
ic_objectsFromObjectIDs:propertiesToFetch:relationshipKeyPathsForPrefetching:context:
ic_resultsMatchingPredicate:sortDescriptors:resultType:fetchBatchSize:propertiesToFetch:relationshipKeyPathsForPrefetching:context:
migrateStore:metadata:
resetPolicy
resetSavedPolicyState
initWithThrottlingLevels:resetInterval:
incrementBatchCount
changeLevelIfNecessary
batchInterval
currentLevel
startPolicyResetTimer
loadSavedPolicyState
savePolicyState
throttlingLevels
setThrottlingLevels:
resetInterval
setResetInterval:
icUserDefaults
setIcUserDefaults:
currentBatchCount
setCurrentBatchCount:
currentLevelIndex
setCurrentLevelIndex:
policyStartDate
setPolicyStartDate:
policyResetTimer
setPolicyResetTimer:
_throttlingLevels
_resetInterval
_icUserDefaults
_currentBatchCount
_currentLevelIndex
_policyStartDate
_policyResetTimer
T@"ICUserDefaults",&,N,V_icUserDefaults
TQ,N,V_currentBatchCount
T@"NSArray",&,N,V_throttlingLevels
TQ,N,V_currentLevelIndex
T@"ICCloudThrottlingLevel",R,N
Td,V_resetInterval
T@"NSDate",&,V_policyStartDate
T@"NSTimer",&,V_policyResetTimer
Td,R,N
T@"NSString",R,N
ic_addZoneID:forAccountID:
ic_removeZoneID:forAccountID:
contextDidSave:
reachabilityChanged:
cloudKitAccountChanged:
updateConfiguration
updateSelectorDelayers
handleUnrecoverableError
conformsToRDICCloudContextCryptoStringProviding
processPendingCloudObjects
recordTypes
retryOperationsIfNecessary
observeValueForKeyPath:ofObject:change:context:
processingQueue
filterNonUploadableChangedManagedObjectIDs:cloudKitStoreIdentifiers:
isNonUploadingTransactionAuthor:
_systemBuildVersion
_cloudObjectClassesByRecordType
_recordTypesToSortChildrenAfterFetch
appZoneID
migrationZoneID
metadataZoneID
allCloudObjectIDsOfClassesPassingTest:inContext:
allDirtyCloudObjectIDsInContext:
errorForDisabledCloudSyncing
errorFromErrors:
errorFromOperations:
userRecordNameForContainer:
batchRecordsToSave:delete:maxRecordCountPerBatch:maxRecordSizePerBatch:withBlock:
sortedRecords:
objectsByAccount:
objectsByDatabaseScope:
recursivelyFixCrossZoneRelationship:perObjectHandler:
deduplicatedRecordsForCloudObjects:
haveZoneIDsInAccountZoneIDs:
errorsFromError:
saveAndFaultIfFailWithContext:shouldTakeServerAsTruth:logDescription:
addRunExclusivelyOperations:operationQueue:
faultAndPromptToFileRadarWithICTap2RadarType:title:description:logMessage:
promptToFileRadarWithICTap2RadarType:title:description:logMessage:additionalFaultMessage:
faultAndPromptToFileRadarWithICTap2RadarType:logMessage:
errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessaryForOperationQueue:
_performLocalObjectMergeWithEligibleObjectIDs:cloudKitAccount:managedObjectContext:error:
isZoneConfigurations:subsetOfZoneConfigurations:
zoneInfosFromZoneIDs:
zoneIDsFromZoneInfos:
babysittableWaiterID
connection:didReceivePublicToken:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveToken:forInfo:
connection:didReceiveURLToken:forInfo:
connection:didReceiveURLTokenError:forInfo:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didSendOutgoingMessage:
connection:didFailToSendOutgoingMessage:error:
connection:didChangeConnectedStatus:
connectionDidReconnect:
connection:channelSubscriptionsFailedWithFailures:
waiterID
initWithStoreController:
bootstrapSyncingOnLaunchIfSystemReady
registerForBuddy
pq_unregisterForBuddy
unsafeUntilSystemReady_hashedAccountPersonIDForAccount:usingSalt:
primaryCloudKitAccountPersonIDSaltDidSetWithSalt:
primaryCloudKitAccountPersonIDSaltDidFailToSetWithError:
observePrimaryCloudKitAccountPersonIDSaltChanges
unobservePrimaryCloudKitAccountPersonIDSaltChanges
containersByAccountID
clearContainers
containerForAccountID:
containerAccountIDsDescription
accountIDForDatabase:
newBackgroundContext
contextWithQueryGenerationTokenEnabled:
context
contextWithBatchFetchHelper
performAndWaitContextWithBatchFetchHelper:
mergeLocalObjectsFetchContextAffectingStoreOf:
mergeLocalObjectsWriteContextAffectingStoreOf:
internalContextWithBatchFetchHelper
serverChangeTokenContext
batchFetchHelperWithContext:
notificationContainsCloudContextInternalChangesOnly:
cloudKitAccountsInContext:
primaryCloudKitAccountInContext:
readinessLoggingDescription
isReadyToSyncWithActiveAccountAvailable:
isReadyToSync
isCloudKitAccountAvailable
isCloudKitAccountAvailableRequiringActive:
_isCloudKitAccountAvailableWithManagedObjectContext:requireActive:
disableCloudSyncingIfCurrentVersionNotSuppported
cloudObjectClassesByRecordType
hasPendingOperations
printOperationQueue
addStateHandlerWithName:stateBlock:
addStateHandler
status
configurationDump
allZoneIDs
receivedZoneNotFound:operation:
_generateAndSavePersonIDSaltIfNeeded:
syncWithReason:discretionary:completionHandler:
_syncWithReason:completionHandler:
cancelEverythingWithCompletionHandler:
clearPendingActivity
configureOperation:
deleteRecordZonesWithZoneIDs:accountID:markZonesAsUserPurged:completionHandler:
isFetchingAllRecordZones
isInternetReachable
timeIntervalToRetryAfterFromError:
canRetryImmediatelyAfterError:
finishOperationsForRecordID:completionHandler:
accountStatusNumberByAccountID
setAccountStatusNumberByAccountID:
accountStatusFromAccountStatusNumber:
setAccountStatus:forAccountID:
updateAccountStatusWithCompletionHandler:
removeStaleAccountStatus
removeStaleFetchDatabaseRetryMetadata
accountStatusByAccountIDDescription
unitTest_accountStatusNumberForAccountID:
unitTest_setAccountStatus:forAccountID:
fetchUserRecordOperationWithContainer:completionHandler:
fetchUserRecordOperationWithAccountID:completionHandler:
fetchUserRecordWithContainer:completionHandler:
fetchUserRecordWithAccountID:completionHandler:
operationQueueFetchUserRecordWithAccountID:completionHandler:
updateUserRecordWithAccountID:updateFunction:completionHandler:
existingCloudObjectForRecord:accountID:context:
existingCloudObjectForRecordID:recordType:accountID:context:
newCloudObjectForRecord:accountID:context:
newPlaceholderObjectForRecordID:account:recordType:context:
fetchRecordIDs:accountID:operationGroupName:runExclusively:completionHandler:
addFetchOperationsForRecordIDs:accountID:operationGroupName:runExclusively:completionHandler:
operationsToFetchRecordIDs:operationGroupName:accountID:
operationsToFetchRecordIDs:database:
operationToFetchRecordIDs:database:
fetchOperation:progressChangedWithRecordID:progress:
fetchOperation:recordWasFetchedWithRecordID:record:error:
fetchOperation:didCompleteWithRecordsByRecordID:error:
didFetchShare:accountID:context:
deleteSharesForObjects:completionHandler:
deleteSharesForObjects:accountID:completionHandler:
fetchAndCompletionOperationWithDeleteShareObjects:accountID:dependencyOperations:completionHandler:
operationsToModifyRecordsForCloudObjectsToSave:delete:deleteShares:operationGroupName:addDependencies:accountID:
operationsToModifyRecordsToSave:delete:rootRecordIDsByShareID:database:
operationToModifyRecordsToSave:delete:rootRecordIDsByShareID:database:
addCallbackBlocksToModifyRecordsOperation:rootRecordIDsByShareID:
modifyRecordsOperation:recordWasSavedWithRecordID:record:context:onProcessingQueue:error:
modifyRecordsOperation:recordWasDeletedWithRecordID:rootRecordIDsByShareID:onProcessingQueue:error:
modifyRecordsOperation:didCompleteWithError:
handleGenericPartialFailuresForError:operation:
partialError:containsErrorCode:
addDependenciesForModifyRecordsOperation:
errorAndPromptToFileRadarWithICTap2RadarTypeTooManyOperationsInOperationQueueIfNecessary
operationToSaveZonesIfNecessaryForAccountID:
operationToSaveZonesForZoneIDs:accountID:
_addOperationToProcessBlockWithOperationName:processBlock:
addOperationToProcessObjectsWithOperationName:syncReason:completionHandler:
processPendingCloudObjectsWithOperationName:
processPendingCloudObjectsWithOperationName:syncReason:completionHandler:
addProcessLocalObjectsOperationToMergeLocalObjectsWithCompletionHandler:
_scheduleRetryMergeLocalObjects
processLocalObjectMergeEligibleObjectIDs:operationQueue:completionHandler:
processAllDirtyCloudObjectsWithSyncReason:completionHandler:
retryProcessingCloudObjects
processObjectIDs:operationQueue:completionHandler:
_processFetchedCloudObjectsWithObjectIDs:usingBlock:
_processFetchedCloudObjectsWithObjectIDs:withManagedObjectContext:usingBlock:
_isRecognizedCloudObjectClass:
_processCloudObjectIDs:operationQueue:completionHandler:
handleNotification:completionHandler:
handleDatabaseNotification:completionHandler:
_handleDatabaseNotification:database:accountID:completionHandler:
validateAccountZoneIDsNeedingFetchChanges
fetchRecordZoneChangesWithReason:cloudSchemaCatchUpSyncContextMap:completionHandler:
fetchRecordZoneChangesForZoneIDs:accountID:reason:completionHandler:
fetchRecordZoneChangesForAccountZoneIDs:reason:cloudSchemaCatchUpSyncContextMap:completionHandler:
addOperationsToFetchRecordZoneChangesForAccountZoneIDs:reason:cloudSchemaCatchUpSyncContextMap:completionHandler:
operationsToFetchRecordZoneChangesForZoneIDs:accountID:cloudSchemaCatchUpSyncContextMap:
operationToFetchRecordZoneChangesForZoneIDs:database:ignoreServerChangeTokens:
newOperationToFetchRecordZoneChangesWithZoneConfigurations:database:
fetchRecordZoneChangesOperation:completedFetchForZoneID:serverChangeToken:batchFetchHelper:error:
fetchRecordZoneChangesOperationDidComplete:error:
fetchRecordZoneChangesOperation:recordWasChangedWithRecordID:record:error:context:
fetchRecordZoneChangesOperation:recordWasDeletedWithRecordID:recordType:context:
fetchRecordZoneChangesOperation:zoneID:accountID:changeTokenUpdated:batchFetchHelper:
_performSortingChildrenObjectsAfterFetchingInBlockOfManagedObjectContext:fetchHasFullyCompleted:accountID:
firePollingSyncRequest
fetchDatabaseChangesWithReason:cloudSchemaCatchUpSyncContextMap:completionHandler:
fetchDatabaseChangesForDatabases:reason:cloudSchemaCatchUpSyncContextMap:completionHandler:
operationToFetchDatabaseChangesForDatabase:cloudSchemaCatchUpSyncContextMap:completionHandler:
fetchDatabaseChangesOperation:recordZoneWithIDChanged:accountID:
sharedZoneWasDeleted:accountID:
fetchDatabaseChangesOperation:recordZoneWithIDWasDeleted:accountID:
fetchDatabaseChangesOperation:changeTokenUpdated:accountID:
fetchDatabaseChangesOperation:finishedWithServerChangeToken:accountID:error:completionHandler:
retryCountFetchDatabaseChangesOperationTypeForAccountID:dataScopeString:
loadZoneFetchState
saveZoneFetchState
clearZoneFetchState
subscriptionForDatabase:
setupAPSConnection
updateSubscriptionsWithCompletionHandler:
fetchSubscriptionsForDatabase:completionHandler:
saveSubscriptionsForDatabase:completionHandler:
loadSubscribedSubscriptionIDs
addSubscribedSubscriptionIDs:accountID:
clearSubscribedSubscriptionIDs
isInForeground
updateCloudContextStateWithSyncOption:syncReason:withCompletionHandler:
updateCloudContextStateWithReason:
checkForLongLivedOperations
_existingCloudDirtyToken
_markCloudAsDirtyAndReturnToken
_clearCloudDirtyForToken:
incrementRetryCountForOperationType:
clearRetryCountForOperationType:
incrementOrClearRetryCountForOperationType:error:
errorCodesToIgnoreForBackoffTimer
shouldIgnoreErrorForBackoffTimer:operationType:
startRetryTimerIfNecessaryWithError:
saveServerChangeToken:forRecordZoneID:databaseScope:accountID:
serverChangeTokenForRecordZoneID:databaseScope:accountID:
deleteServerChangeTokenForRecordZoneID:databaseScope:accountID:
deleteAllServerChangeTokens
deleteAllApplicationDataFromServerWithAccountID:completion:
saveServerChangeToken:forChangedZonesInDatabase:accountID:
deleteServerChangeTokenForChangedZonesInDatabase:accountID:
serverChangeTokenForChangedZonesInDatabase:accountID:
shouldPollCloudKitWhenLaunchingAndBackgrounding
_accountsDidEnableOrDisable
accountsDidDisable
accountsDidEnable
didCompleteInitializeAllAccounts:
applicationDidEnterBackground
applicationWillTerminate
applicationWillEnterForeground
setMigrationStateToDidChooseToMigrate:didFinishMigration:createZoneAccountIfFinishMigration:accountID:completionHandler:
migrationStateDidChange:didFinishMigration:
adjustAPSNotificationDebouncerInterval
adjustAPSNotificationDebouncerIntervalWithMigrationState:
setUpCloudSchemaCatchUpSyncContextMapWithAccountIDs:
setUpCloudSchemaCatchUpSyncContextMapWithAccountIDs:outBackgroundScheduledCatchUpSyncContextMap:
didCompleteCloudSchemaCatchUpSyncWithContextMap:error:syncTypeLabel:debugLogLabel:
retryPerformingCloudSchemaCatchUpSync
storeController
cloudContextDelegate
setCloudContextDelegate:
fetchOperationsPending
needsToUpdateSubscriptions
setNeedsToUpdateSubscriptions:
qualityOfService
setQualityOfService:
discretionaryNetworkBehavior
setDiscretionaryNetworkBehavior:
isDisabled
setDisabled:
setProcessingQueue:
operationQueue
setOperationQueue:
appleAccountUtilities
setAppleAccountUtilities:
lastSyncMetrics
setLastSyncMetrics:
hasPassedBuddy
setHasPassedBuddy:
isSystemAvailableForSyncing
setIsSystemAvailableForSyncing:
objectIDsToRetry
setObjectIDsToRetry:
hasRetryTimer
setHasRetryTimer:
retryTimer
setRetryTimer:
retryCountsByOperationType
setRetryCountsByOperationType:
databaseScopeStringsNeedingRetryFetchChangesByAccountID
setDatabaseScopeStringsNeedingRetryFetchChangesByAccountID:
isDisabledInternal
setDisabledInternal:
needsToProcessAllDirtyObjects
setNeedsToProcessAllDirtyObjects:
objectIDsToProcess
setObjectIDsToProcess:
processingSelectorDelayer
setProcessingSelectorDelayer:
pollingSelectorDelayer
setPollingSelectorDelayer:
didAddObservers
setDidAddObservers:
isFetchingEnabled
setFetchingEnabled:
syncDisabledByServer
setSyncDisabledByServer:
uploadSuspended
setUploadSuspended:
supportsCloudKitSyncing
setSupportsCloudKitSyncing:
shouldUnregisterBuddy
setShouldUnregisterBuddy:
setContainersByAccountID:
containersByAccountIDLock
setContainersByAccountIDLock:
accountZoneIDsNeedingFetchChanges
setAccountZoneIDsNeedingFetchChanges:
accountZoneIDsFetchingChanges
setAccountZoneIDsFetchingChanges:
accountZoneIDsNeedingToBeSaved
setAccountZoneIDsNeedingToBeSaved:
subscribedSubscriptionIDsByAccountID
setSubscribedSubscriptionIDsByAccountID:
subscribedSubscriptionIDsLastModifiedDate
setSubscribedSubscriptionIDsLastModifiedDate:
didCheckForLongLivedOperations
setDidCheckForLongLivedOperations:
discretionaryNetwork
setDiscretionaryNetwork:
automaticallyRetryNetworkFailures
setAutomaticallyRetryNetworkFailures:
timeoutIntervalForResource
setTimeoutIntervalForResource:
apsTopic
setApsTopic:
apsConnection
setApsConnection:
apsNotificationHandlingDebouncer
setApsNotificationHandlingDebouncer:
accountChangedNotificationHandlingDebouncer
setAccountChangedNotificationHandlingDebouncer:
wasInternetReachable
setWasInternetReachable:
lastSyncSinceInternetReachable
setLastSyncSinceInternetReachable:
buddyStateObserver
setBuddyStateObserver:
pendingAccountInitializerCompleteOnLaunch
setPendingAccountInitializerCompleteOnLaunch:
accountInitializerDidCompleteOnLaunchObserver
setAccountInitializerDidCompleteOnLaunchObserver:
needsToMergeLocalObjects
setNeedsToMergeLocalObjects:
needsToUpdateCloudContextOnAccountsDidChange
setNeedsToUpdateCloudContextOnAccountsDidChange:
accountInitializerDidCompleteOnAccountsDidChangeObserver
setAccountInitializerDidCompleteOnAccountsDidChangeObserver:
accountInitializerDidCompleteOnAccountsDidChangeObserverLock
setAccountInitializerDidCompleteOnAccountsDidChangeObserverLock:
recognizedCloudObjectClasses
setRecognizedCloudObjectClasses:
accountPersonIDSaltObserver
setAccountPersonIDSaltObserver:
unitTest_notificationCenter
setUnitTest_notificationCenter:
cloudSchemaCatchUpSyncController
setCloudSchemaCatchUpSyncController:
_fetchOperationsPending
_needsToUpdateSubscriptions
_disabled
_hasPassedBuddy
_isSystemAvailableForSyncing
_hasRetryTimer
_disabledInternal
_needsToProcessAllDirtyObjects
_didAddObservers
_fetchingEnabled
_syncDisabledByServer
_uploadSuspended
_supportsCloudKitSyncing
_shouldUnregisterBuddy
_didCheckForLongLivedOperations
_discretionaryNetwork
_automaticallyRetryNetworkFailures
_wasInternetReachable
_pendingAccountInitializerCompleteOnLaunch
_needsToMergeLocalObjects
_needsToUpdateCloudContextOnAccountsDidChange
_containersByAccountIDLock
_accountInitializerDidCompleteOnAccountsDidChangeObserverLock
_storeController
_cloudContextDelegate
_qualityOfService
_discretionaryNetworkBehavior
_processingQueue
_operationQueue
_appleAccountUtilities
_lastSyncMetrics
_objectIDsToRetry
_retryTimer
_retryCountsByOperationType
_databaseScopeStringsNeedingRetryFetchChangesByAccountID
_objectIDsToProcess
_processingSelectorDelayer
_pollingSelectorDelayer
_containersByAccountID
_accountZoneIDsNeedingFetchChanges
_accountZoneIDsFetchingChanges
_accountZoneIDsNeedingToBeSaved
_subscribedSubscriptionIDsByAccountID
_subscribedSubscriptionIDsLastModifiedDate
_timeoutIntervalForResource
_apsTopic
_apsConnection
_apsNotificationHandlingDebouncer
_accountChangedNotificationHandlingDebouncer
_lastSyncSinceInternetReachable
_buddyStateObserver
_accountInitializerDidCompleteOnLaunchObserver
_accountInitializerDidCompleteOnAccountsDidChangeObserver
_recognizedCloudObjectClasses
_accountPersonIDSaltObserver
_unitTest_notificationCenter
_cloudSchemaCatchUpSyncController
T@"NSObject<OS_dispatch_queue>",&,N,V_processingQueue
T@"NSOperationQueue",&,N,V_operationQueue
T@"REMAppleAccountUtilities",&,N,V_appleAccountUtilities
T@"ICCloudContextSyncMetrics",&,V_lastSyncMetrics
TB,N,V_hasPassedBuddy
TB,N,V_isSystemAvailableForSyncing
T@"NSMutableSet",&,N,V_objectIDsToRetry
TB,V_hasRetryTimer
T@"NSTimer",&,V_retryTimer
T@"NSMutableDictionary",&,N,V_retryCountsByOperationType
T@"NSMutableDictionary",&,N,V_databaseScopeStringsNeedingRetryFetchChangesByAccountID
T@"NSDictionary",&,N
disabledInternal
TB,GisDisabledInternal,V_disabledInternal
T@"NSDictionary",R,N
TB,N,V_needsToProcessAllDirtyObjects
T@"NSMutableSet",&,N,V_objectIDsToProcess
T@"ICSelectorDelayer",&,V_processingSelectorDelayer
T@"ICSelectorDelayer",&,V_pollingSelectorDelayer
TB,N,V_didAddObservers
fetchingEnabled
TB,N,GisFetchingEnabled,V_fetchingEnabled
TB,N,V_syncDisabledByServer
TB,N,V_uploadSuspended
TB,N,V_supportsCloudKitSyncing
TB,N,V_shouldUnregisterBuddy
T@"NSDictionary",&,N,V_containersByAccountID
T{os_unfair_lock_s=I},N,V_containersByAccountIDLock
T@"NSMutableDictionary",&,N,V_accountZoneIDsNeedingFetchChanges
T@"NSMutableDictionary",&,N,V_accountZoneIDsFetchingChanges
T@"NSMutableDictionary",&,N,V_accountZoneIDsNeedingToBeSaved
T@"NSDictionary",&,V_subscribedSubscriptionIDsByAccountID
T@"NSDate",&,V_subscribedSubscriptionIDsLastModifiedDate
TB,N,V_didCheckForLongLivedOperations
TB,N,V_discretionaryNetwork
TB,N,V_automaticallyRetryNetworkFailures
Td,N,V_timeoutIntervalForResource
T@"NSString",&,N,V_apsTopic
T@"APSConnection",&,N,V_apsConnection
T@"_TtC7remindd37RDDebouncerWithCKDatabaseNotification",&,N,V_apsNotificationHandlingDebouncer
T@"_TtC7remindd21RDDebouncerWithNumber",&,N,V_accountChangedNotificationHandlingDebouncer
TB,N,V_wasInternetReachable
Td,N,V_lastSyncSinceInternetReachable
T@"DADBuddyStateObserver",&,N,V_buddyStateObserver
TB,N,V_pendingAccountInitializerCompleteOnLaunch
T@"RDAccountInitializerDidCompleteInitializeAllAccountsObserver",&,N,V_accountInitializerDidCompleteOnLaunchObserver
TB,N,V_needsToMergeLocalObjects
TB,N,V_needsToUpdateCloudContextOnAccountsDidChange
T@"RDAccountInitializerDidCompleteInitializeAllAccountsObserver",&,N,V_accountInitializerDidCompleteOnAccountsDidChangeObserver
T{os_unfair_lock_s=I},N,V_accountInitializerDidCompleteOnAccountsDidChangeObserverLock
T@"NSMutableDictionary",&,N,V_recognizedCloudObjectClasses
T@"RDAccountPersonIDSaltObserver",&,N,V_accountPersonIDSaltObserver
T@"NSNotificationCenter",&,N,V_unitTest_notificationCenter
T@"<ICCloudSchemaCatchUpSyncController>",&,N,V_cloudSchemaCatchUpSyncController
T@"RDStoreController",R,N,V_storeController
T@"<ICCloudContextDelegate>",W,N,V_cloudContextDelegate
TB,R,N,V_fetchOperationsPending
TB,V_needsToUpdateSubscriptions
Tq,N,V_qualityOfService
TQ,N,V_discretionaryNetworkBehavior
disabled
TB,GisDisabled,V_disabled
initWithAccountIdentifier:
validateWithAccount:
shouldRetryMergeLocalObjects
loggableDescription
setAccountIdentifier:
objectIDsOfClassesEligibleForLocalObjectMerge
setObjectIDsOfClassesEligibleForLocalObjectMerge:
wasMigrated
setWasMigrated:
didNotFinishMigration
setDidNotFinishMigration:
needsToFetchUserRecord
setNeedsToFetchUserRecord:
isInactive
setIsInactive:
didChooseToMigrate
setDidChooseToMigrate:
_wasMigrated
_didNotFinishMigration
_needsToFetchUserRecord
_isInactive
_didChooseToMigrate
_accountIdentifier
_objectIDsOfClassesEligibleForLocalObjectMerge
T@"NSSet",&,N,V_objectIDsOfClassesEligibleForLocalObjectMerge
TB,N,V_wasMigrated
TB,N,V_didNotFinishMigration
TB,N,V_needsToFetchUserRecord
TB,N,V_isInactive
TB,N,V_didChooseToMigrate
T@"NSString",&,N,V_accountIdentifier
initWithSyncReason:
dictionaryRepresentation
finishWithSuccess:
syncReason
setSyncReason:
fetchedRecordCount
setFetchedRecordCount:
deletedRecordsCount
setDeletedRecordsCount:
modifiedRecordCount
setModifiedRecordCount:
processedRecordCount
setProcessedRecordCount:
bytesDownloaded
setBytesDownloaded:
bytesUploaded
setBytesUploaded:
operationCount
setOperationCount:
saveCount
setSaveCount:
averageRecordsPerSecond
setAverageRecordsPerSecond:
cloudKitDuration
setCloudKitDuration:
success
setSuccess:
startDate
setStartDate:
endDate
setEndDate:
_success
_syncReason
_fetchedRecordCount
_deletedRecordsCount
_modifiedRecordCount
_processedRecordCount
_bytesDownloaded
_bytesUploaded
_operationCount
_saveCount
_averageRecordsPerSecond
_cloudKitDuration
_startDate
_endDate
T@"NSString",&,V_syncReason
Tq,V_fetchedRecordCount
Tq,V_deletedRecordsCount
Tq,V_modifiedRecordCount
Tq,V_processedRecordCount
Tq,V_bytesDownloaded
Tq,V_bytesUploaded
Tq,V_operationCount
Tq,V_saveCount
Tq,V_averageRecordsPerSecond
Td,V_cloudKitDuration
TB,V_success
T@"NSDate",&,V_startDate
T@"NSDate",&,V_endDate
allDay
ckParentReminderIdentifier
completed
completionDate
contactHandles
creationDate
daCalendarItemUniqueIdentifier
displayDateDate
displayDateIsAllDay
displayDateTimeZone
displayDateUpdatedForSecondsFromGMT
Tq,D,N
dueDate
flagged
icsDisplayOrder
icsUrl
T@"NSURL",C,D,N
importedICSData
lastBannerPresentationDate
lastModifiedDate
notes
notesDocument
priority
siriFoundInAppsData
timeZone
title
titleDocument
userActivity
spotlightIndexCount
alarmStorage
T@"NSOrderedSet",&,D,N
assignments
attachments
children
list
parentReminder
T@"REMCDReminder",&,D,N
recurrenceRules
sharedToMeReminderPlaceholder
T@"REMCDSharedToMeReminderPlaceholder",&,D,N
ic_loggingIdentifier
ic_loggingValues
ic_shortLoggingOperationName
isTemporal
setAlarm:
ic_loggingDescriptionIncludingBrackets:
ic_loggingDescription
rd_ckDatabaseScope
ic_isOwnedByCurrentUser
ic_isEqual:
propertiesThatShouldTriggerReindexing
spotlightObjectToReindex
setReminderIdentifier:
initWithContainerURL:
filesDirectoryURL
URLForAccountFileDirectory:
URLForAttachmentDirectory:accountID:
URLForHashedAttachmentDirectory:
URLForAttachmentFile:accountID:fileName:sha512Sum:
URLForHashedAttachmentFileInAccount:sha512Sum:fileExtension:
URLForHashedAttachmentFileInAccount:sha512SumWithFileExtension:
updateAttachmentFile:accountID:fileName:sha512Sum:fileURL:keepSource:error:
purgeFilesForAccountWithAccountID:error:
purgeAttachmentFilesWithAttachmentIDs:accountID:error:
purgeAttachmentFilesWithSha512SumsAndExtensions:accountID:error:
attachmentIDsFromAttachmentDirectoryWithAccountID:error:
containerURL
_containerURL
T@"NSURL",R,N,V_containerURL
fileName
fileSize
sha512Sum
throttlingPolicy
pollingInterval
maxInlineAssetSizeBytes
maximumAttachmentSizeMB
maxAttachmentsPerNote
maxSubAttachmentsPerAttachment
resultsLimitPerSyncOperation
fetchBatchSize
fetchCacheCountLimit
minimumClientVersion
reachabilityChangeSyncThrottleInterval
launchAndSignificantTimeChangePollThrottleInterval
persistedSubscriptionIDsValidityPeriod
apsDebouncerDefaultInterval
apsDebouncerMigrationInProgressInterval
apsDebouncerWatchDefaultInterval
apsDebouncerWatchMigrationInProgressInterval
accountChangedDebouncerInterval
mergeLocalObjectsInitialRetryInterval
mergeLocalObjectsMaximumRetryCount
mergeLocalObjectsRetryStartOverThrottleInterval
cloudSchemaCatchUpSyncInitialRetryInterval
cloudSchemaCatchUpSyncMaximumRetryCount
fetchDatabaseChangesOperationPerScopePerAccountMaximumRetryCount
objectEffectiveVersionValidationFlushBatchSize
suggestedAttributesTrainingOverrides
suggestedAttributesHarvestingOverrides
manualSortHintClientSideExpiration
manualSortHintLastAccessedUpdatePolicy
templatePublicLinkTTL
templatePublicLinkOperationTimeoutInterval
alarmIDsLimitPerReminder
tapToRadarThrottlingInterval
housekeepingActivityMinimumDelay
T@"ICCloudThrottlingPolicy",R
Td,R
T@"NSNumber",R
T@"NSString",R
T@"NSDictionary",R
downloadRemoteConfiguration
cloudConfigurationDownloadThrottleInterval
extraneousAlarmsCleanUpTriggerReductionFactor
extraneousAlarmsDeleteCountLimit
extraneousAlarmsDeleteCountThreshold
extraneousAlarmsBackoffThrottleInterval
extraneousAlarmsThrottleInterval
staledFileAttachmentCleanupDefaultThrottleInterval
staledFileAttachmentCleanupBackoffThrottleInterval
staledFileAttachmentCleanupRateReduceFactor
staledFileAttachmentCleanupPerRunDeleteLimit
imageDeduplicationDefaultThrottleInterval
imageDeduplicationBackoffThrottleInterval
imageDeduplicationRateReduceFactor
imageDeduplicationApproximatePerRunDeleteLimit
setMinimumClientVersion:
setThrottlingPolicy:
setPollingInterval:
setMaxInlineAssetSizeBytes:
setMaximumAttachmentSizeMB:
setMaxAttachmentsPerNote:
setMaxSubAttachmentsPerAttachment:
setResultsLimitPerSyncOperation:
setFetchBatchSize:
setFetchCacheCountLimit:
setReachabilityChangeSyncThrottleInterval:
setLaunchAndSignificantTimeChangePollThrottleInterval:
setPersistedSubscriptionIDsValidityPeriod:
setApsDebouncerDefaultInterval:
setApsDebouncerMigrationInProgressInterval:
setApsDebouncerWatchDefaultInterval:
setApsDebouncerWatchMigrationInProgressInterval:
setAccountChangedDebouncerInterval:
setMergeLocalObjectsInitialRetryInterval:
setMergeLocalObjectsMaximumRetryCount:
setMergeLocalObjectsRetryStartOverThrottleInterval:
setCloudSchemaCatchUpSyncInitialRetryInterval:
setCloudSchemaCatchUpSyncMaximumRetryCount:
setFetchDatabaseChangesOperationPerScopePerAccountMaximumRetryCount:
setObjectEffectiveVersionValidationFlushBatchSize:
setSuggestedAttributesTrainingOverrides:
setSuggestedAttributesHarvestingOverrides:
setManualSortHintClientSideExpiration:
setManualSortHintLastAccessedUpdatePolicy:
setTemplatePublicLinkTTL:
setTemplatePublicLinkOperationTimeoutInterval:
setAlarmIDsLimitPerReminder:
setTapToRadarThrottlingInterval:
setHousekeepingActivityMinimumDelay:
setCloudConfigurationDownloadThrottleInterval:
setExtraneousAlarmsCleanUpTriggerReductionFactor:
setExtraneousAlarmsDeleteCountLimit:
setExtraneousAlarmsDeleteCountThreshold:
setExtraneousAlarmsBackoffThrottleInterval:
setExtraneousAlarmsThrottleInterval:
extraneousAlarmsCollectorDebounceInterval
setExtraneousAlarmsCollectorDebounceInterval:
setStaledFileAttachmentCleanupDefaultThrottleInterval:
setStaledFileAttachmentCleanupBackoffThrottleInterval:
setStaledFileAttachmentCleanupRateReduceFactor:
setStaledFileAttachmentCleanupPerRunDeleteLimit:
setImageDeduplicationDefaultThrottleInterval:
setImageDeduplicationBackoffThrottleInterval:
setImageDeduplicationRateReduceFactor:
setImageDeduplicationApproximatePerRunDeleteLimit:
_minimumClientVersion
_throttlingPolicy
_pollingInterval
_maxInlineAssetSizeBytes
_maximumAttachmentSizeMB
_maxAttachmentsPerNote
_maxSubAttachmentsPerAttachment
_resultsLimitPerSyncOperation
_fetchBatchSize
_fetchCacheCountLimit
_reachabilityChangeSyncThrottleInterval
_launchAndSignificantTimeChangePollThrottleInterval
_persistedSubscriptionIDsValidityPeriod
_apsDebouncerDefaultInterval
_apsDebouncerMigrationInProgressInterval
_apsDebouncerWatchDefaultInterval
_apsDebouncerWatchMigrationInProgressInterval
_accountChangedDebouncerInterval
_mergeLocalObjectsInitialRetryInterval
_mergeLocalObjectsMaximumRetryCount
_mergeLocalObjectsRetryStartOverThrottleInterval
_cloudSchemaCatchUpSyncInitialRetryInterval
_cloudSchemaCatchUpSyncMaximumRetryCount
_fetchDatabaseChangesOperationPerScopePerAccountMaximumRetryCount
_objectEffectiveVersionValidationFlushBatchSize
_suggestedAttributesTrainingOverrides
_suggestedAttributesHarvestingOverrides
_manualSortHintClientSideExpiration
_manualSortHintLastAccessedUpdatePolicy
_templatePublicLinkTTL
_templatePublicLinkOperationTimeoutInterval
_alarmIDsLimitPerReminder
_tapToRadarThrottlingInterval
_housekeepingActivityMinimumDelay
_cloudConfigurationDownloadThrottleInterval
_extraneousAlarmsCleanUpTriggerReductionFactor
_extraneousAlarmsDeleteCountLimit
_extraneousAlarmsDeleteCountThreshold
_extraneousAlarmsBackoffThrottleInterval
_extraneousAlarmsThrottleInterval
_extraneousAlarmsCollectorDebounceInterval
_staledFileAttachmentCleanupDefaultThrottleInterval
_staledFileAttachmentCleanupBackoffThrottleInterval
_staledFileAttachmentCleanupRateReduceFactor
_staledFileAttachmentCleanupPerRunDeleteLimit
_imageDeduplicationDefaultThrottleInterval
_imageDeduplicationBackoffThrottleInterval
_imageDeduplicationRateReduceFactor
_imageDeduplicationApproximatePerRunDeleteLimit
T@"NSString",&,V_minimumClientVersion
T@"ICCloudThrottlingPolicy",&,V_throttlingPolicy
Td,V_pollingInterval
TQ,V_maxInlineAssetSizeBytes
T@"NSNumber",&,V_maximumAttachmentSizeMB
TQ,V_maxAttachmentsPerNote
TQ,V_maxSubAttachmentsPerAttachment
TQ,V_resultsLimitPerSyncOperation
TQ,V_fetchBatchSize
TQ,V_fetchCacheCountLimit
Td,V_reachabilityChangeSyncThrottleInterval
Td,V_launchAndSignificantTimeChangePollThrottleInterval
Td,V_persistedSubscriptionIDsValidityPeriod
Td,V_apsDebouncerDefaultInterval
Td,V_apsDebouncerMigrationInProgressInterval
Td,V_apsDebouncerWatchDefaultInterval
Td,V_apsDebouncerWatchMigrationInProgressInterval
Td,V_accountChangedDebouncerInterval
Td,V_mergeLocalObjectsInitialRetryInterval
TQ,V_mergeLocalObjectsMaximumRetryCount
Td,V_mergeLocalObjectsRetryStartOverThrottleInterval
Td,V_cloudSchemaCatchUpSyncInitialRetryInterval
TQ,V_cloudSchemaCatchUpSyncMaximumRetryCount
TQ,V_fetchDatabaseChangesOperationPerScopePerAccountMaximumRetryCount
TQ,V_objectEffectiveVersionValidationFlushBatchSize
T@"NSDictionary",&,V_suggestedAttributesTrainingOverrides
T@"NSDictionary",&,V_suggestedAttributesHarvestingOverrides
Td,V_manualSortHintClientSideExpiration
T@"NSString",&,V_manualSortHintLastAccessedUpdatePolicy
Td,V_templatePublicLinkTTL
Td,V_templatePublicLinkOperationTimeoutInterval
TQ,V_alarmIDsLimitPerReminder
Td,V_tapToRadarThrottlingInterval
Td,V_housekeepingActivityMinimumDelay
Td,V_cloudConfigurationDownloadThrottleInterval
T@"NSNumber",&,V_extraneousAlarmsCleanUpTriggerReductionFactor
TQ,V_extraneousAlarmsDeleteCountLimit
TQ,V_extraneousAlarmsDeleteCountThreshold
Td,V_extraneousAlarmsBackoffThrottleInterval
Td,V_extraneousAlarmsThrottleInterval
Td,V_extraneousAlarmsCollectorDebounceInterval
Td,V_staledFileAttachmentCleanupDefaultThrottleInterval
Td,V_staledFileAttachmentCleanupBackoffThrottleInterval
T@"NSNumber",&,V_staledFileAttachmentCleanupRateReduceFactor
TQ,V_staledFileAttachmentCleanupPerRunDeleteLimit
Td,V_imageDeduplicationDefaultThrottleInterval
Td,V_imageDeduplicationBackoffThrottleInterval
T@"NSNumber",&,V_imageDeduplicationRateReduceFactor
TQ,V_imageDeduplicationApproximatePerRunDeleteLimit
sharedConfiguration
isConfigurationValid:
defaultConfigurationURL
setDefaultConfigurationURL:
cachedConfigurationURL
availableConfigurationURLs
loadLocalConfigurationFile
downloadConfigurationFromRemoteURL:completionHandler:
loadConfigurationFromURL:
setConfigurationFromDictionary:
forwardingTargetForSelector:
valueForUndefinedKey:
setValue:forUndefinedKey:
storage
setStorage:
session
setSession:
_storage
_session
Td,D
T@"NSNumber",&,D
TQ,D
T@"_ICCloudConfigurationStorage",&,V_storage
T@"NSURLSession",&,V_session
T@"ICCloudThrottlingPolicy",R,D
Td,R,D
TQ,R,D
T@"NSNumber",R,D
T@"NSString",R,D
T@"NSDictionary",R,D
objectIdentifier
willChangeList:toList:
validateForInsert:
validateForUpdate:
willSave
markExtraneousAlarmsForDeletion
didSave
alarms
incrementSpotlightIndexCount
setList:
_validateMoveAcrossLists:
_validateMoveAcrossSharedLists:
_validateForReminderTreeConsistency:
_validateAssignmentsForInvalidSharees:
displayDate
setDisplayDate:
displayDateUtils
updateDisplayDate
updateDisplayDateWithAlarm:
previousList
setPreviousList:
willSave_handledExtraneousAlarmsMarking
setWillSave_handledExtraneousAlarmsMarking:
willSave_handledUpdateDisplayDate
setWillSave_handledUpdateDisplayDate:
_displayDateUtils
T@"REMCDList",&,N,VpreviousList
TB,N,VwillSave_handledExtraneousAlarmsMarking
T@"REMDisplayDate",&,N
T@"REMDisplayDateUtils",R,&,N,V_displayDateUtils
TB,N,VwillSave_handledUpdateDisplayDate
requestFreeSpace:atPath:effortLevel:queue:completionBlock:
object
T@"REMCDRootEntityObject",&,D,N
reminder
template
T@"REMCDTemplate",&,D,N
savedReminder
T@"REMCDSavedReminder",&,D,N
savedAttachment
T@"REMCDSavedAttachment",&,D,N
parentEffectiveMinimumSupportedVersion
debug_lowLevelRemoveFromParent
keyPathsForValuesAffectingEffectiveMinimumSupportedVersion
uuidString
hostURL
owner
createDirectoryIfNecessary:
ic_defaultDatabaseScopeForOwnerName:
daysOfTheMonth
daysOfTheWeek
daysOfTheYear
firstDayOfTheWeek
frequency
interval
monthsOfTheYear
occurrenceCount
setPositions
weeksOfTheYear
validateForDelete:
reminderIDsMergeableOrdering
setReminderIDsMergeableOrdering:
compare:
_parentZoneMismatchErrorDebugDescription
isShared
dueDateComponents
setDueDateComponents:
startDateComponents
setStartDateComponents:
displayOrder
setDisplayOrder:
timeZoneFromName:
dueDateComponentsWithDueDate:isAllDay:timeZoneName:
T@"NSDateComponents",C,N
T@"NSArray",R,N
TQ,N
timeInterval
Td,D,N
clientName
lastConsumedChangeTokenData
lastConsumedDate
reminderIdentifier
sharedToMeReminderCKIdentifier
type
hashtagLabel
T@"REMCDHashtagLabel",&,D,N
transformedValueClass
transformedValue:
reverseTransformedValue:
oldExternalIdentifier
oldListIdentifier
identifier
managerData
version
ic_obtainPermanentObjectIDIfNecessary
ic_permanentObjectID
ic_postNotificationOnMainThreadWithName:
ic_postNotificationOnMainThreadAfterSaveWithName:
ic_objectFromObjectID:context:
ic_objectsFromObjectIDs:context:
ic_objectIDsFromObjects:
ic_permanentObjectIDsFromObjects:
ic_objectsMatchingPredicate:sortDescriptors:context:
ic_objectsMatchingPredicate:sortDescriptors:propertiesToFetch:relationshipKeyPathsForPrefetching:context:
ic_objectsMatchingPredicate:context:
ic_objectIDsMatchingPredicate:sortDescriptors:context:
ic_objectIDsMatchingPredicate:context:
ic_dictionariesMatchingPredicate:propertiesToFetch:context:
initWithAccountIdentifier:schedulingStateStorage:managedObjectContext:
_computeShouldPerformCloudSchemaCatchUpSyncFrom:storeController:
isCloudSchemaCatchUpSyncNeeded
setIsCloudSchemaCatchUpSyncNeeded:
shouldPerformCloudSchemaCatchUpSync
setShouldPerformCloudSchemaCatchUpSync:
persistenceCloudSchemaVersion
setPersistenceCloudSchemaVersion:
_isCloudSchemaCatchUpSyncNeeded
_shouldPerformCloudSchemaCatchUpSync
_persistenceCloudSchemaVersion
TB,N,V_isCloudSchemaCatchUpSyncNeeded
TB,N,V_shouldPerformCloudSchemaCatchUpSync
Tq,N,V_persistenceCloudSchemaVersion
isPhantom
awakeFromInsert
awakeFromFetch
didTurnIntoFault
didChangeValueForKey:
shouldUseResolutionTokenMapForMergingData
willSave_Swift
didSave_Swift
validateForInsert_Swift:
validateForUpdate_Swift:
relationshipsEligibleForEffectiveMinimumSupportedVersionPropagationWithEntity:
newObjectID
objectIDWithUUID:
conformsToREMChangeTrackingIdentifiable
remObjectID
T@"REMObjectID",R,N
remObjectIDWithError:
isUnsupported
minimumSupportedVersion
effectiveMinimumSupportedVersion
Tq,R,N
setMinimumSupportedVersion:
Tq,N
validateEffectiveMinimumSupportedVersionApplyingChange:
remChangedObjectID
storeControllerManagedObjectContext
isConcealed
isPlaceholder
setResolutionTokenMap:
resolutionTokenMap
setResolutionTokenMapData:
resolutionTokenMapData
jsonDataFromResolutionTokenMap:
resolutionTokenMapFromJsonData:
createResolutionTokenMapIfNecessary
setAccount:
_validateZoneOwnerNamesWithLogPrefix:error:
shouldMarkAsDeletedInsteadOfDeletingImmediately
updateDeletedFlagAccordingToOrphanState:
traverseObjectTreeUsingVisitedMap:handler:
recursiveMarkForDeletion:usingVisitedMap:
deleteAllChildrenFromLocalDatabase
allChildObjects
fixValueBeforeMarkingForDeletionForKey:
fixValueBeforeUnmarkingForDeletionForKey:
_allowsObjectSupportedVersion
setEffectiveMinimumSupportedVersion:
_markDirtyForEffectiveMinimumSupportedVersionValidation
previousAccount
setPreviousAccount:
hack_resolutionTokenMapCopy
setHack_resolutionTokenMapCopy:
hack_willSaveHandled
setHack_willSaveHandled:
hack_didHandleShouldSyncUpDelete
setHack_didHandleShouldSyncUpDelete:
cached_CDResolutionMap
setCached_CDResolutionMap:
spotlightIndexCountUpdated
setSpotlightIndexCountUpdated:
validateForInsertion_handledJournalEntries
setValidateForInsertion_handledJournalEntries:
validateForUpdate_handledJournalEntries
setValidateForUpdate_handledJournalEntries:
_ckServerRecord
_ckServerShare
_mergeDataRefusedToMergeMarkedForDeletion
_mergeDataRevertedLocallyMarkedForDeletion
T@"REMCDAccount",&,N,VpreviousAccount
T@"REMResolutionTokenMap",&,N,Vhack_resolutionTokenMapCopy
TB,N,Vhack_willSaveHandled
TB,N,Vhack_didHandleShouldSyncUpDelete
T@"REMResolutionTokenMap",&,N,Vcached_CDResolutionMap
TB,N,VspotlightIndexCountUpdated
TB,N,VvalidateForInsertion_handledJournalEntries
TB,N,VvalidateForUpdate_handledJournalEntries
T@"RDStoreControllerManagedObjectContext",R,N
T@"REMResolutionTokenMap",&,N
T@"NSData",&,N
_removesDependenciesAfterFinish
canCoalesceWithOperation:
isProcessObjectsForContextDidSaveOperation
modelObject
schedulingState
setSchedulingState:
lastScheduledDate
setLastScheduledDate:
debugForceSupportBackgroundScheduling
setDebugForceSupportBackgroundScheduling:
T@"NSDate",&,N
TB,N
initWithCloudSchemaCatchUpSyncSchedulingStateStorage:
userDefaults
cloudSchemaCatchUpSyncSchedulingStateStorage
setCloudSchemaCatchUpSyncSchedulingStateStorage:
_cloudSchemaCatchUpSyncSchedulingStateStorage
T@"<ICCloudSchemaCatchUpSyncSchedulingStateStorage>",&,N,V_cloudSchemaCatchUpSyncSchedulingStateStorage
ic_isToday
ic_isYesterday
ic_localDateWithSeconds
ic_shortFormattedDate
ic_briefFormattedDate
ic_isEarlierThanDate:
ic_isLaterThanDate:
_ic_objectsFromObjectIDs:propertiesToFetch:relationshipKeyPathsForPrefetching:context:
_ic_resultsMatchingPredicate:sortDescriptors:resultType:fetchBatchSize:propertiesToFetch:relationshipKeyPathsForPrefetching:context:
isSnooze
setReminder:
didHandleMarkingExtraneousAlarmDuringWillSave
setDidHandleMarkingExtraneousAlarmDuringWillSave:
TB,N,VdidHandleMarkingExtraneousAlarmDuringWillSave
shouldCascadeMarkAsDeleteInto:forRelationship:
isCloudSchemaCatchUpSyncNeededForAccountIdentifier:context:outPersistenceCloudSchemaVersion:
cloudSchemaCatchUpSyncDidCompleteWithAccountIdentifier:context:
isCloudSchemaCatchUpSyncNeededForExistingCloudObject:persistenceCloudSchemaVersion:
persistenceCloudSchemaVersionWithAccountIdentifier:context:
ckCloudState
mergeSystemPropertiesIntoCDObject:fromCKRecord:
clearTransformedCKServerValueCachesOnDidTurnIntoFault
insertCloudStateOnAwakeFromInsert
insertCloudStateIfNeededOnAwakeFromFetch
cloudAccount
accountCKIdentifier
setCkNeedsToBeFetchedFromCloud:
_setCKIdentifierIfNecessary
shouldSyncUpDelete
setShouldSyncUpDeleteIfNeeded
updateChangeCount
clearChangeCount
clearServerRecord
ckIdentifierFromRecordName:
failedToSyncCount
setFailedToSyncCount:
numberOfPushAttemptsToWaitCount
setNumberOfPushAttemptsToWaitCount:
incrementFailureCounts
decrementFailureCounts
deleteChangeTokensAndReSync
resetFailureCounts
shouldBeIgnoredForSync
recordName
recordZoneName
ckZoneOwnerName
recordID
recordType
needsToBeDeletedFromCloud
_isInICloudAccount
isInICloudAccount
isValidObject
recursivelyFixCrossZoneRelationshipWithVisitedMap:perObjectHandler:
newlyCreatedRecord
mergeDataFromRecord:accountID:
needsToBePushedToCloud
forcePushToCloud
hasSuccessfullyPushedLatestVersionToCloud
needsToFetchAfterServerRecordChanged:
objectWasDeletedFromCloud
objectWasDeletedFromCloudByAnotherDevice
objectWillBePushedToCloudWithOperation:
objectFailedToBePushedToCloudWithOperation:recordID:error:
objectWasPushedToCloudWithOperation:serverRecord:
objectWasFetchedFromCloudWithRecord:accountID:
objectWasFetchedButDoesNotExistInCloud
sortChildrenObjects
isDeletable
shouldBeDeletedFromLocalDatabaseUnlessByThisDevice:
deleteFromLocalDatabase
objectsToBeDeletedBeforeThisObject
fixBrokenReferences
fixValuesOfKeysWithUniqueConstraintBeforeSettingMarkedForDeletion:
markForDeletion
lowLevelMarkForDeletion
markObjectDirtyAfterMarkedForDeletion
unmarkForDeletion
lowLevelUnmarkForDeletion
markObjectDirtyAfterUnmarkedForDeletion
__lowLevelMarkForDeletion
setMarkedForDeletion:
supportsDeletionByTTL
debug_fixValuesOfKeysWithUniqueConstraintBeforeSettingMarkedForDeletion:
debug_lowLevelMarkForDeletion
debug_markObjectDirtyAfterMarkedForDeletion
debug_lowLevelUnmarkForDeletion
debug_markObjectDirtyAfterUnmarkedForDeletion
parentCloudObject
updateParentReferenceIfNecessary
needsToDeleteShare
canBeSharedViaICloud
isSharedViaICloud
canBeRootShareObject
isOwnedByCurrentUser
isSharedRootObject
isSharedReadOnly
serverShareCheckingParent
shareTitle
shareType
currentUserShareParticipantID
updateObjectWithShare:
setServerShareIfNewer:
didAcceptShare:
restoreParentReferenceAfterUnmarkingForDeletion
versionForOperation:
setVersion:forOperation:
isPushingSameOrLaterThanVersion:
setDeletedByThisDevice:
deletedByThisDevice
setInCloud:
isInCloud
setCkServerRecord:
ckServerRecord
updateSharedObjectOwnerName:
setCkServerShare:
ckServerShare
hasAllMandatoryFields
loggingDescription
shortLoggingDescription
cloudKitReferenceWithRecordIDAndValidateAction:
getResolutionTokenMapFromRecord:
generateReolutionTokenMapForTestingWithKeys:
isMergeableWithLocalObject
existingLocalObjectToMergeWithPredicate:
mergeWithLocalObject:
cleanUpAfterLocalObjectMerge
mergeDataRefusedToMergeMarkedForDeletion
mergeDataRevertedLocallyMarkedForDeletion
conformsToICCloudObject
ckRecordKeyForMinimumSupportedVersion
objectWithRecordID:accountID:context:
failureCountQueue
failedToSyncCountsByCKIdentifier
numberOfPushAttemptsToWaitByCKIdentifier
existingCloudObjectForRecordID:accountID:context:
newCloudObjectForRecord:account:context:
newObjectWithCKRecordName:context:account:
newObjectWithCKIdentifier:context:account:
newPlaceholderObjectForRecordID:account:context:
allCloudObjectsPredicate
allCloudObjectsInContext:
allCloudObjectIDsInContext:
allDirtyCloudObjectsPredicate
keyPathsForValuesAffectingNeedsToBePushedToCloud
needsToReFetchServerRecordValue:
temporaryAssets
assetForData:
temporaryAssetDirectoryURL
deleteTemporaryAssetFilesForOperation:
deleteTemporaryFilesForAsset:
deleteAllTemporaryAssetFilesForAllObjects
keyPathsForValuesAffectingNeedsToBeDeletedFromCloud
keyPathsForValuesAffectingCanBeSharedViaICloud
keyPathsForValuesAffectingIsSharedViaICloud
keyPathsForValuesAffectingIsSharedReadOnly
keyPathsForValuesAffectingServerShareCheckingParent
versionsByOperationQueue
versionsByRecordIDByOperation
deletedByThisDeviceOperationQueue
deletedByThisDeviceSet
resetAllDeletedByThisDeviceProperties
recordSystemFieldsTransformer
shareSystemFieldsTransformer
objectCkZoneOwnerNameFromCKRecordZoneID:
shouldAttemptLocalObjectMerge
ckNeedsToBeFetchedFromCloud
className
objectID
TB,R
inCloud
TB,N,GisInCloud
T@"CKRecord",&,N
T@"CKShare",&,N
primitiveCkZoneOwnerName
T@"NSString",&,D,N
predicateForCloudKitAccountsWithKeyPathPrefix:
accountTypeHost
setPersonIDSalt:
personIDSalt
listIDsMergeableOrdering
setListIDsMergeableOrdering:
postAccountPropertyChangeNotificationWithKey:changedValue:
_accountTypeHost
height
width
rem_isDiskFullSQLError
didCleanUpManualSortHintOnDeletion
setDidCleanUpManualSortHintOnDeletion:
wasDeletedDueToUserInitiatedChanges
setWasDeletedDueToUserInitiatedChanges:
didEnqueueApprovalCascade
setDidEnqueueApprovalCascade:
TB,N,VdidCleanUpManualSortHintOnDeletion
TB,N,VwasDeletedDueToUserInitiatedChanges
TB,N,VdidEnqueueApprovalCascade
initWithPersistentHistoryTransaction:
migrateTokenResolutionMapInObject:
migrateCRDTsInObject:
migrateCRDTsInAccount:
migrateCRDTsInList:
reminderIDsMergeableOrderingReplicaIDSourceWithAccountID:listID:
totalMigratedCount
setTotalMigratedCount:
totalListCount
setTotalListCount:
migratedAccount
setMigratedAccount:
migratedListsCount
setMigratedListsCount:
_migratedAccount
_totalMigratedCount
_totalListCount
_migratedListsCount
TQ,N,V_totalMigratedCount
TQ,N,V_totalListCount
TB,N,V_migratedAccount
TQ,N,V_migratedListsCount
withManagedObjectContext:
currentChangeToken
currentChangeTokenForAccountTypes:
currentChangeTokenForAccountID:
earliestChangeTokenForAccountID:
getTrackingStateWithClientID:completionHandler:
saveTrackingState:withClientID:completionHandler:
fetchHistoryAfterDate:entityNames:transactionFetchLimit:completionHandler:
fetchHistoryAfterToken:entityNames:transactionFetchLimit:completionHandler:
_fetchRequestWithPredicateUsingEntityNames:managedObjectContext:error:
deleteHistoryBeforeDate:completionHandler:
deleteHistoryBeforeToken:completionHandler:
fetchAuxiliaryChangeInfos:completionHandler:
_persistenceStoreForAccountID:
_persistenceStoresForAccountTypes:
_accountIdentifierForPersistenceStoreID:
_persistenceStoreIDForAccountID:
_persistenceStoreIDsForAccountTypes:
_accountIDForPersistenceStoreID:
_currentREMChangeTokenFromNSPersistentStores:persistentStoreCoordinator:
_errorChangeSetWithError:
_resultChangeSetByExecutingRequest:managedObjectContext:error:
_resolveObjectIDsInChanges:deletedObjectsIDMap:inManagedObjectContext:
_executeDeleteHistoryRequest:
_fetchCDTrackingStateWithClientID:andPerformBlock:
_changeTokenFromCDTrackingState:error:
_fetchCDAuxiliaryChangeInfosWithObjectID:inManagedObjectContext:error:
cachedAccountIDsByStoreIDsMap
setCachedAccountIDsByStoreIDsMap:
_cachedAccountIDsByStoreIDsMap
T@"NSCache",&,N,V_cachedAccountIDsByStoreIDsMap
defaultRelationshipKeyPathsForPrefetching
cloudObject
T@"NSManagedObject<ICCloudObject>",R,N
objectTreeProcessorDelegateFactoryWithTreeNode:
ic_removeAllCKCompletionBlocksButNotTheNSOperationCompletionBlock_50200031
ic_shortLoggingDescription
ic_intersectsRecordZoneIDSet:
ic_shouldDependOnCKFetchRecordZoneChangesOperation:
initSharedSettingsWithOptions:
sharedSettings
hasOptions:
initWithOptions:
hasAnyOptions:
options
setOptions:
_options
TQ,N,V_options
prepareForDeletion
childrenNodes
expanded
setExpanded:
markAsExpanded
managedObjectID
setManagedObjectID:
backingCDObject
setBackingCDObject:
_managedObjectID
_backingCDObject
T@"NSManagedObjectID",&,N,V_managedObjectID
T@"REMCDObject",&,N,V_backingCDObject
TB,N,Vexpanded
preprocessTreeNode:
processBatchOfTreeNodes:
initWithManagedObjectContext:
managedObjectContext
setManagedObjectContext:
_managedObjectContext
T@"RDStoreControllerManagedObjectContext",W,N,V_managedObjectContext
isShareeActivelyParticipatingWithSharee:
dateComponentsData
entity
subclassesOfREMCDObjectRepresentingRootCoreDataEntities
subclassNamesOfREMCDObjectRepresentingRootCoreDataEntities
ckDirtyFlags
ckIdentifier
ckNeedsInitialFetchFromCloud
ckServerRecordData
ckServerShareData
externalIdentifier
effectiveMinimumSupportedAppVersion
markedForDeletion
minimumSupportedAppVersion
externalModificationTag
daSyncToken
daPushKey
T@"REMCKCloudState",&,D,N
resolutionTokenMap_v2_JSON
T@"REMResolutionTokenMap",&,D,N
resolutionTokenMap_v3_JSONData
acknowledgedDate
alarmUID
isExtraneous
originalAlarmUID
dueDateResolutionTokenAsNonce
trigger
T@"REMCDAlarmTrigger",&,D,N
ic_randomObject
ic_objectPassingTest:
ic_containsObjectPassingTest:
ic_objectsPassingTest:
ic_objectsOfClass:
ic_arrayByGroupingIntoArraysWithMaxCount:
ic_indexOfSortedObject:insertionIndex:usingComparator:
ic_indexIsValid:
ic_objectBefore:
ic_objectAfter:
ic_objectBefore:wrap:
ic_objectAfter:wrap:
ic_arrayByAddingNonNilObject:
ic_arrayByAddingObjectsFromNonNilArray:
ic_map:
T@,R,N
ic_addNonNilObject:
ic_addObjectsFromNonNilArray:
ic_insertNonNilObject:atIndex:
ic_removeRecordsWithSameCKRecordIDInRecords:
currentLocalVersion
latestVersionSyncedToCloud
localVersionDate
ic_prettyLoggingDescription
ic_loggingDescriptionFromLoggable:isPretty:
didCleanUpManualSortHintOnMarkingForDeletion
setDidCleanUpManualSortHintOnMarkingForDeletion:
TB,N,VdidCleanUpManualSortHintOnMarkingForDeletion
address
contactLabel
latitude
longitude
mapKitHandle
proximity
radius
referenceFrameString
routing
locationUID
addServerChangeTokenForAccount:ckServerChangeToken:zoneID:databaseScope:context:
serverChangeTokenForAccount:zoneID:databaseScope:context:
serverChangeTokensMatchingPredicate:inContext:
serverChangeToken
setServerChangeToken:
_serverChangeToken
T@"CKServerChangeToken",&,N,V_serverChangeToken
event
failureCount
retryCount
state
timeElapsed
isTerminated
initWithCloudContext:
fetchShareForObjectWithManagedObjectID:
createShareForObjectWithManagedObjectID:appIconData:queue:completionHandler:
rootRecordForObject:
newShareForObject:
populateShare:withObject:
existingShareForObject:
prepareShare:forObject:completionHandler:
saveShare:forObject:completionHandler:
saveShare:withRootRecord:object:completionHandler:
fetchShareIfNecessaryForObject:completionHandler:
didSaveShare:accountID:queue:completionHandler:
saveServerShare:accountID:completionHandler:
objectForShare:accountID:context:
didStopSharing:accountID:queue:completionHandler:
didStopSharingRecordID:accountID:queue:completionHandler:
didStopSharing:recordID:accountID:queue:completionHandler:
acceptShareWithMetadata:callbackQueue:completionHandler:
containerForUserRecordID:
acceptShareWithMetadata:container:accountID:fetchObjectWithCompletionHandler:
cloudContext
setCloudContext:
objectContext
setObjectContext:
_cloudContext
_objectContext
T@"ICCloudContext",&,N,V_cloudContext
T@"NSManagedObjectContext",&,N,V_objectContext
initWithShouldValidateMoveAcrossSharedList:saveShouldContinueIfCustomValidationFailed:
shouldValidateMoveAcrossSharedList
saveShouldContinueIfCustomValidationFailed
customValidationFailed
setCustomValidationFailed:
_shouldValidateMoveAcrossSharedList
_saveShouldContinueIfCustomValidationFailed
_customValidationFailed
TB,R,N,V_shouldValidateMoveAcrossSharedList
TB,R,N,V_saveShouldContinueIfCustomValidationFailed
TB,N,V_customValidationFailed
save:
executeRequest:error:
executeFetchRequest:error:
countForFetchRequest:error:
_setAllowsExpandedUserInfoKeys:
_heightOfEntityNodeInMOMTreeForEffectiveMinimumSupportedVersionPropagation:heightMap:
topologicallyWeightedEntitiesForEffectiveMinimumSupportedVersionPropagation
managedObjectIDsSortedByTopologicalWeightsForEffectiveMinimumSupportedVersionPropagation:
hasPendingListNameRelatedChanges
setAffectedStoresWithAccountIdentifier:
persistentStoreOfAccountWithAccountID:
containerShouldSortChildrenAfterFetchingWithRecordID:
managedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion
validateDirtyEffectiveMinimumSupportedVersions
_validateDirtyEffectiveMinimumSupportedVersionsWithBatchSize:isManualValidation:
coreDataSave:
proposePurgingFileAttachmentWithSha512Sum:fileExtension:account:
rejectPurgingFileAttachmentWithSha512Sum:fileExtension:account:
fileAttachmentIdentifiersToPurgeByAccountIdentifier
candidateFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier
confirmedFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier
confirmOrRejectFilePurgeCandidatesThatMightBeDeduplicatedAcrossMultipleAttachments
purgeDeletedFileAttachments
notifyDidMarkExtraneousAlarmsPendingToSyncUpDelete
_rem_setAllowsExpandedUserInfoKeys:
_debug_managedObjectIDsSortedByTopologicalWeightsForEffectiveMinimumSupportedVersionPropagation:
_unittest_validateDirtyEffectiveMinimumSupportedVersionsManually
setStoreController:
validationPolicy
setValidationPolicy:
affectedStores
setAffectedStores:
batchFetchHelper
setBatchFetchHelper:
cloudSchemaCatchUpSyncContextsByAccountIdentifier
setCloudSchemaCatchUpSyncContextsByAccountIdentifier:
shouldSortChildrenAfterFetching
setShouldSortChildrenAfterFetching:
recordIDsToSortChildrenAfterFetching
setRecordIDsToSortChildrenAfterFetching:
setManagedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion:
setFileAttachmentIdentifiersToPurgeByAccountIdentifier:
pendingPostSaveActions
setPendingPostSaveActions:
_unittest_awakeCounts
set_unittest_awakeCounts:
_unitTest_purgeDeletedFileAttachmentsDidComplete
set_unitTest_purgeDeletedFileAttachmentsDidComplete:
setCandidateFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier:
setConfirmedFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier:
_shouldSortChildrenAfterFetching
_validationPolicy
_affectedStores
_batchFetchHelper
_cloudSchemaCatchUpSyncContextsByAccountIdentifier
_recordIDsToSortChildrenAfterFetching
_managedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion
_fileAttachmentIdentifiersToPurgeByAccountIdentifier
_pendingPostSaveActions
__unittest_awakeCounts
__unitTest_purgeDeletedFileAttachmentsDidComplete
_candidateFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier
_confirmedFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier
T@"NSMutableDictionary",&,N,V_candidateFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier
T@"NSMutableDictionary",&,N,V_confirmedFileAttachmentSha512SumsAndExtensionsToPurgeByAccountIdentifier
T@"RDStoreController",W,N,V_storeController
T@"RDStoreControllerValidationPolicy",&,N,V_validationPolicy
T@"NSArray",&,N,V_affectedStores
T@"ICBatchFetchHelper",&,N,V_batchFetchHelper
T@"NSDictionary",&,N,V_cloudSchemaCatchUpSyncContextsByAccountIdentifier
TB,N,V_shouldSortChildrenAfterFetching
T@"NSMutableSet",&,N,V_recordIDsToSortChildrenAfterFetching
T@"NSMutableSet",&,N,V_managedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion
T@"NSMutableDictionary",&,N,V_fileAttachmentIdentifiersToPurgeByAccountIdentifier
TQ,N,V_pendingPostSaveActions
T@"NSDictionary",&,N,V__unittest_awakeCounts
T@?,C,N,V__unitTest_purgeDeletedFileAttachmentsDidComplete
rd_associatedCoreSpotlightDelegate
setRd_associatedCoreSpotlightDelegate:
T@"NSCoreDataCoreSpotlightDelegate",&,N
initWithIsolated:coordinator:
validateIndexVersionWithCompletionHandler:
createAndAttachCoreSpotlightDelegateForStoreWithDescription:
deleteIndicesForStore:
activateCoreSpotlightDelegates
stopCoreSpotlightDelegatesForStores:
reindexAllSearchableItems
reindexSearchableItemsWithIdentifiers:
_startCoreSpotlightDelegate:forStore:
enableCoreSpotlightIndexing
setEnableCoreSpotlightIndexing:
persistentStoreCoordinator
isActivated
setIsActivated:
pendingReindexAll
setPendingReindexAll:
pendingReindexIdentifiers
earlyStoppedStoreIdentifiers
_enableCoreSpotlightIndexing
_isActivated
_pendingReindexAll
_persistentStoreCoordinator
_pendingReindexIdentifiers
_earlyStoppedStoreIdentifiers
T@"NSPersistentStoreCoordinator",R,N,V_persistentStoreCoordinator
TB,N,V_isActivated
TB,N,V_pendingReindexAll
T@"NSMutableSet",R,N,V_pendingReindexIdentifiers
T@"NSMutableSet",R,N,V_earlyStoppedStoreIdentifiers
TB,N,V_enableCoreSpotlightIndexing
ckUserRecordName
daAllowsCalendarAddDeleteModify
daConstraintsDescriptionPath
daSupportsSharedCalendars
daWasMigrated
didChooseToMigrateLocally
didFinishMigration
inactive
listIDsMergeableOrdering_v2
personID
personIDSalt_v1
ckServerChangeTokens
ckSharedObjectOwnerNames
lists
reminders
smartLists
templates
debugSyncDisabled
accessLevel
displayName
firstName
lastName
middleName
namePrefix
nameSuffix
nickname
owningListIdentifier
originatedAssignments
existingOperationToDeleteRecordID:
containsOperationToDeleteRecordID:
existingOperationToFetchRecordID:
containsOperationToFetchRecordID:
existingOperationToSaveRecordID:
containsOperationToSaveRecordID:
iterativelyCancelDependentOperations:
cloudContextHasPendingOperationsDidChange:
managedObjectContextDidSave:
managedObjectModel
storeFileNameWithStoreName:
isDummyStoreURL:
persistentStoreOptions
entityNamesToIncludeFromTracking
unittest_setLoadAndValidateAccountStoresBatchSize:
cloudContext:userDidDeleteRecordZoneWithID:accountID:
cloudContext:receivedZoneNotFound:accountID:
cloudContext:sharedZoneWasDeleted:accountID:
cloudContext:didFetchUserRecord:accountID:
didFailPushingExceededStorageQuotaForContext:accountID:
storeForAccountIdentifier:
initWithIsolated:containerURL:
initWithIsolated:containerURL:accountStoreManagementDelegate:
databaseDirectoryURL
databaseBackupDirectoryURL
databaseStagedMigrationDirectoryURL
storeURLWithName:
storeBackupURLWithFileName:
invalidStoreBackupURLWithFileName:
_makePersistentStoreCoordinator
l_loadAccountStoresFromDiskDeletingFilesMarkedDeleted:shouldDeleteInvalidStoresImmediately:error:
l_loadPPTStoreStatus
_discoverAccountStoreURLsFromFilesOnDiskDeletingFilesMarkedDeleted:error:
l_loadAccountStoresFromDiskAndValidateInBatchesWithStoreURLs:shouldDeleteInvalidStoresImmediately:error:
l_loadBatchOfAccountStoresFromDiskAndValidateWithStoreURLs:processedStoreIdentifiers:shouldDeleteInvalidStoresImmediately:connectionPoolMaxSize:error:
l_loadDummyStoreIfNeeded
l_addValidatedStoresToAccountStoreMapWithStores:shouldDeleteInvalidStoresImmediately:
_validateAccountStores:outValidStoresByAccountIDs:outInvalidStores:outLocalAccountStores:
_deduplicateStore:withStore:isLocalAccountType:managedObjectContext:
_deduplicateLocalAccountStore:withStore:managedObjectContext:
l_removeFromPersistentStoreCoordinatorAndDeleteImmediatelyWithStores:
l_performManualStoreMigrations:
_removeFilesOfStoresAtURLs:outRemovedFileURLs:error:
_backupInvalidStores:outBackUpFailedStores:
_performStagedLightweightMigrationIfNeededForAccountStoresWithURLs:persistentStoreDescriptionOptionsOverride:
_performStagedLightweightMigrationIfNeededForAccountStoreWithURL:persistentStoreDescriptionOptionsOverride:migrationCoordinator:
_persistentStoreConnectionPoolMaxSizeWithTotalStoreCount:
accountIdentifierForStoreID:
storesForAccountTypes:
createAccountStoresWithIdentifiers:didAddNewStores:error:
l_createAccountStoresWithIdentifiers:didAddNewStores:error:
l_createOrLoadAccountStoresWithURLs:persistentStoreDescriptionOptionsOverride:isCreatingStores:error:
l_setAccountIdentifier:intoMetadataOfCreatedStore:error:
l_activateCoreSpotlightDelegates
removeAccountStoresWithIdentifiers:error:
l_removeAccountStoresWithIdentifiers:deletedObjectIDs:error:
l_markAccountStoreDeletedAndDeleteData:deletedObjectIDs:error:
_postDidRemoveAccountStoresNotificationWithDeletedObjectIDs:
fileIOWorkerQueue
readableURLForMLModel
writableURLForMLModelWithError:
temporaryURLForMLModelWithError:
_writableURLForMLModelForURL:error:
nukeDataWithError:
invalidateStoreConnectionsWithError:
newBackgroundContextWithAuthor:enableQueryGenerationToken:
newBackgroundContextWithAuthor:
purgeDeletedObjectsWithCompletionHandler:
requestFreeSpaceToLoadAccountStoresWithQueue:completionBlock:
notificationContainsInternalChangesOnly:
notificationContainsChangeTrackingChangesOnly:
startObservingCloudKitNetworkActivityWithObserver:
_cleanUpCloudKitNetworkActivityObservers
_notifyCloudKitNetworkActivityObservers:
deleteCloudObjectIfFullyPushed:
observePrimaryCloudKitAccountPersonIDSaltChangesOnQueue:successHandler:errorHandler:
unobservePrimaryCloudKitAccountPersonIDSaltChanges:
logStoresDirectoryContents
status:
containerStats
_populateCountForEntity:withinCDAccount:statsAccumulator:errorAccumulator:
_set_cloudContext:
supportsAccountUtils
supportsAlarmEngine
supportsTimelineEngine
supportsAssignmentNotificationEngine
supportsHashtagLabelUpdater
supportsStalePinnedListsEventHandler
supportsTemplateOperation
supportsCoreSpotlightIndexing
supportsSyncingToCloudKit
supportsCloudSchemaCatchUpSyncBackgroundScheduling
supportsApplicationShortcuts
supportsSuggestedAttributes
supportsWidgetRefresh
supportsSyncActivityNotificationEngine
supportsSharedInlineTagAutoConvertEngine
unittest_setEnableCoreSpotlightIndexing:
unittest_countKeysInAccountStoreMap
accountPropertiesNotifier
setAccountPropertiesNotifier:
attachmentFileManager
setContainerURL:
isolated
setIsolated:
accountUtils
setAccountUtils:
hasFailedLoadingAccountStoresFromDiskDueToDiskFull
setHasFailedLoadingAccountStoresFromDiskDueToDiskFull:
containsLargeDatabases
setContainsLargeDatabases:
containsOnlySmallDatabases
setContainsOnlySmallDatabases:
accountStoreManagementDelegate
setAccountStoreManagementDelegate:
supportsLocalInternalAccount
setSupportsLocalInternalAccount:
ivarLock
setIvarLock:
mergePolicy
setMergePolicy:
l_accountStoreMap
setL_accountStoreMap:
l_accountStorageCacheByObjectIDs
setL_accountStorageCacheByObjectIDs:
l_accountExternalIdentifiersToObjectIDsMap
setL_accountExternalIdentifiersToObjectIDsMap:
l_allGenericAccountsObjectIDs
setL_allGenericAccountsObjectIDs:
coreSpotlightDelegateManager
isInitializing
setIsInitializing:
isPPTStore
setIsPPTStore:
setSupportsSuggestedAttributes:
cloudKitNetworkActivityObservers
setCloudKitNetworkActivityObservers:
l_primaryActiveCloudKitAccountREMObjectID
setL_primaryActiveCloudKitAccountREMObjectID:
_isolated
_hasFailedLoadingAccountStoresFromDiskDueToDiskFull
_containsLargeDatabases
_containsOnlySmallDatabases
_supportsLocalInternalAccount
_isInitializing
_isPPTStore
_supportsSuggestedAttributes
_ivarLock
_accountPropertiesNotifier
_attachmentFileManager
_accountUtils
_accountStoreManagementDelegate
_mergePolicy
_l_accountStoreMap
_l_accountStorageCacheByObjectIDs
_l_accountExternalIdentifiersToObjectIDsMap
_l_allGenericAccountsObjectIDs
_coreSpotlightDelegateManager
_cloudKitNetworkActivityObservers
_l_primaryActiveCloudKitAccountREMObjectID
T{os_unfair_lock_s=I},N,V_ivarLock
T@"NSMergePolicy",&,N,V_mergePolicy
T@"NSURL",&,N,V_containerURL
T@"NSURL",R,N
T@"NSMapTable",&,N,V_l_accountStoreMap
T@"NSMapTable",&,N,V_l_accountStorageCacheByObjectIDs
T@"NSMapTable",&,N,V_l_accountExternalIdentifiersToObjectIDsMap
T@"NSHashTable",&,N,V_l_allGenericAccountsObjectIDs
TB,N,V_isolated
T@"RDCoreSpotlightDelegateManager",R,N,V_coreSpotlightDelegateManager
TB,N,V_isInitializing
TB,N,V_hasFailedLoadingAccountStoresFromDiskDueToDiskFull
TB,N,V_containsLargeDatabases
TB,N,V_containsOnlySmallDatabases
TB,N,V_isPPTStore
TB,N,V_supportsLocalInternalAccount
TB,N,V_supportsSuggestedAttributes
T@"NSMutableSet",&,N,V_cloudKitNetworkActivityObservers
T@"REMObjectID",&,N,V_l_primaryActiveCloudKitAccountREMObjectID
T@"RDAccountPropertiesNotifier",&,N,V_accountPropertiesNotifier
T@"RDAttachmentFileManager",R,N,V_attachmentFileManager
T@"RDAccountUtils",&,N,V_accountUtils
T@"<RDStoreControllerAccountStoreManagementDelegate>",W,N,V_accountStoreManagementDelegate
inMemoryPrimaryActiveCKAccountREMObjectID
updateInMemoryPrimaryActiveCKAccountREMObjectIDIfNecessary:
accountStoragesForAccountObjectIDs:
setAccountStorages:forAccountObjectIDs:
accountStoragesForAccountExternalIdentifiers:
setAccountStorages:forAccountExternalIdentifiers:
accountStoragesForAllGenericAccounts
setAccountStoragesForAllGenericAccountsWithStorages:
l_accountStoragesForAccountObjectIDs:
l_setAccountStorages:forAccountObjectIDs:
l_invalidateAccountStorageCaches:
init:
persistentStore
setPersistentStore:
_persistentStore
T@"NSPersistentStore",W,N,V_persistentStore
length
transcribedText
ic_stringValue
metadata
daBulkRequests
daDisplayOrder
daExternalIdentificationTag
daIsEventOnlyContainer
daIsImmutable
daIsNotificationsCollection
daIsReadOnly
isGroup
lastUserAccessDate
reminderIDsMergeableOrdering_v2_JSON
sharedOwnerAddress
sharedOwnerName
sharingStatus
isPinnedByCurrentUser
mostRecentTargetTemplateIdentifierByCurrentUser
calDAVNotifications
childLists
sharedOwner
T@"REMCDSharee",&,D,N
sharees
childSmartLists
initWithBatchInterval:numberOfBatches:
setBatchInterval:
numberOfBatches
setNumberOfBatches:
_batchInterval
_numberOfBatches
Td,N,V_batchInterval
TQ,N,V_numberOfBatches
reachabilityWithHostName:
reachabilityWithAddress:
reachabilityForInternetConnection
sharedReachabilityForInternetConnection
reachabilityForLocalWiFi
startNotifier
stopNotifier
localWiFiStatusForFlags:
networkStatusForFlags:
connectionRequired
currentReachabilityStatus
_alwaysReturnLocalWiFiStatus
_reachabilityRef
initWithCkIdentifier:accountIdentifier:
_ckIdentifier
T@"NSString",R,N,V_ckIdentifier
T@"NSString",R,N,V_accountIdentifier
initWithQueue:managedObjectContext:batchSize:cacheCountLimit:
_canObtainPermanentIDForObject:context:ckIdentifierAccountIdentifierPair:
_flush
_dispatchBlockApplyingBackPressureIfNeeded:
addCKIdentifiers:accountIdentifier:dispatchBlock:
addCKIdentifiers:accountIdentifier:onCurrentQueue:dispatchBlock:
addDispatchBlock:
flush
flushOnCurrentQueue:
isMissingCKIdentifier:accountIdentifier:
cachedManagedObjectForCKIdentifier:accountIdentifier:
setCachedManagedObject:forCKIdentifier:accountIdentifier:
removeCachedManagedObjectForCKIdentifier:accountIdentifier:
batchSize
setBatchSize:
ckIdentifierAccountPairs
setCkIdentifierAccountPairs:
dispatchBlocks
setDispatchBlocks:
managedObjectIDCache
setManagedObjectIDCache:
missingCKIdentifierAccountPairCache
setMissingCKIdentifierAccountPairCache:
queue
setQueue:
_batchSize
_ckIdentifierAccountPairs
_dispatchBlocks
_managedObjectIDCache
_missingCKIdentifierAccountPairCache
_queue
Tq,V_batchSize
T@"NSMutableSet",&,N,V_ckIdentifierAccountPairs
T@"NSManagedObjectContext",W,N,V_managedObjectContext
T@"NSMutableArray",&,N,V_dispatchBlocks
T@"NSCache",&,N,V_managedObjectIDCache
T@"NSCache",&,N,V_missingCKIdentifierAccountPairCache
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
alarm
T@"REMCDAlarm",&,D,N
initWithTraversalOrder:batchSize:delegate:
traverse:
traverseByPostOrder:
_flushIfNeeded:
_flushRemaining:
traversalOrder
delegate
setDelegate:
_traversalOrder
_delegate
TQ,R,N,V_traversalOrder
TQ,R,N,V_batchSize
T@"<REMCDObjectTreeProcessorDelegate>",W,N,V_delegate
ic_debugName
setIc_debugName:
ic_save
ic_saveWithLogDescription:
ic_performBlock:andPerformBlockOnMainThread:
ic_performBlockAndWait:andPerformBlockAndWaitOnMainThread:
T@"NSString",&,N
assignedDate
ckAssigneeIdentifier
ckOriginatorIdentifier
owningReminderIdentifier
assignee
originator
randomSalt
generateAndSavePersonIDSaltIfNeededWithContext:
initialize
_fetchCloudKitAccountsInContext:
allCloudKitAccountsInContext:
countCloudBasedAccountsInContext:
_groundTruth_primaryActiveCloudKitAccountInContext:
unsafeUntilSystemReady_primaryCloudKitAccountInContext:appleAccountUtilities:
accountWithCKIdentifier:context:
cloudKitAccountWithCKIdentifier:context:
clearAppleCloudKitTable
_unitTest_randomPersonIDSalt
accountsMatchingPredicate:context:
accountByCKIdentifierFrom:
allowsReverseTransformation
processInfo
processIdentifier
isSetupUser
initWithBundleIdentifier:
initWithDaemonController:
sharedInstance
daemonUserDefaults
serviceForReminders
defaultCenter
sharedListActivityNotifications_demoMode
stopObserving
confirmReminderByRecordId:withCompletion:
confirmRealtimeReminder:withCompletion:
rejectReminderByRecordId:withCompletion:
rejectRealtimeReminder:withCompletion:
reminderAlarmTriggeredForRecordId:withCompletion:
allRemindersLimitedTo:withCompletion:
reminderTitleForContent:withCompletion:
logUserCreatedReminderTitle:withCompletion:
acAccountIdentifiersToMigrateInactivatedCalDavData
setAcAccountIdentifiersToMigrateInactivatedCalDavData:
acAccountIdentifierToMergeLocalDataIntoSyncData
setAcAccountIdentifierToMergeLocalDataIntoSyncData:
uuid
callbackQueue
propertyName
notify:
showNotificationWithIdentifier:content:completion:
calDAVSharedListNotificationContentWithList:
supportsSecureCoding
eventsForTypes:error:
cloudKitNetworkActivityDidUpdate:
syncTimeout
setSyncTimeout:
queuesRequestsIfBusy
setQueuesRequestsIfBusy:
isEnabledWithError:
keepDirty:
isHarvestingSupported
foundInStringForRecordId:style:withCompletion:
encodeWithCoder:
initWithCoder:
copyWithZone:
logMetricAutocompleteResult:recordId:contactIdentifier:bundleId:
logMetricContactSearchResult:recordId:contactIdentifier:bundleId:
logMetricAutocompleteUserSelectedRecordId:contactIdentifier:bundleId:
logMetricContactSearchResultSelected:contactIdentifier:bundleId:
logMetricSuggestedContactDetailUsed:contactIdentifier:bundleId:
logMetricSuggestedContactDetailShown:contactIdentifier:bundleId:
logMetricContactCreated:contactIdentifier:bundleId:
logMetricSearchResultsIncludedPureSuggestionWithBundleId:
logEventInteractionForEventWithUniqueKey:interface:actionType:
logEventInteractionForEventWithExternalIdentifier:interface:actionType:
logSuggestionInteractionForRecordId:interface:actionType:
initWithDateComponents:
addAlarmWithTrigger:
initWithStructuredLocation:proximity:
initWithTimeInterval:
initWithEvent:
initWithTitle:locationUID:latitude:longitude:radius:address:routing:referenceFrameString:contactLabel:mapKitHandle:
lastObject
indexOfObjectPassingTest:
count
moveObjectsAtIndexes:toIndex:
_forceDisableFullRemindersSorting
sortWithOptions:usingComparator:
URIRepresentation
orderedSet
replicaIDSource
initWithReplicaIDSource:orderedSet:
initWithUUID:entityName:
addObject:
setCkIdentifier:
setStatus:
setOwningReminderIdentifier:
encryptedValues
objectForKeyedSubscript:
setCkOriginatorIdentifier:
setOriginator:
setCkAssigneeIdentifier:
setAssignee:
setAssignedDate:
publicLinkURLUUID
performBlock:
performBlockAndWait:
mostRecentPublicLinkUpdateRequestDate
setPublicLinkConfigurationData:
updateForKey:
publicLinkCreationDate
publicLinkLastModifiedDate
publicLinkExpirationDate
setPublicLinkExpirationDate:
setPublicLinkLastModifiedDate:
setPublicLinkCreationDate:
setPublicLinkURLUUID:
setMostRecentPublicLinkUpdateRequestDate:
setEntity:
setPredicate:
setSortDescriptors:
existingObjectWithID:error:
lastAccessedSinceReferenceDate
setLastAccessedSinceReferenceDate:
listTypeRawValue
listID
concatenatedContainerIDsWithLocalContainerIDPrefix
concatenatedElementIDsWithLocalElementIDPrefix
setConcatenatedElementIDsWithLocalElementIDPrefix:
setConcatenatedContainerIDsWithLocalContainerIDPrefix:
setListID:
setListTypeRawValue:
setPropertiesToFetch:
__swift_objectForKeyedSubscript:
internalErrorWithDebugDescription:
invalidParameterErrorWithDescription:
fileURL
JSONObjectWithData:options:error:
initWithContentsOfURL:options:error:
initWithZoneName:ownerName:databaseScope:
entityName
noSuchObjectErrorWithObjectID:
initWithObjectID:accountID:reminderID:url:metadata:
setAttachments:
initWithObjectID:accountID:name:
setColor:
setBadgeEmblem:
setParentAccountID:
setSortingStyle:
accountID
setAccountID:
rem_accountObjectID
setRem_accountObjectID:
accountDescription
setAccountDescription:
fetchRemindersWithObjectIDs:error:
initWithStore:
assignmentContext
saveWithQueue:completion:
removeAllAssignments
actionIdentifier
updateReminder:
shareeContext
titleAsString
setTitle:
setBody:
initWithDomain:code:userInfo:
isOriginatorNullified
shortName
originatorID
fetchChangesSinceLastConsumed
sinceToken
upToToken
changedModelObjectsOfModelClass:ofChangeType:
markChangesConsumed
isCompleted
assigneeID
currentAssignment
reminderID
fetchActiveCloudKitAccountObjectIDsWithFetchOption:error:
initWithREMDAAccount:clientName:withREMStore:entityNames:
fetchAndInitializeChangeTrackingStateIfNeeded
sharedBabysitter
babySatErrorWithOperationName:
tokenByRegisteringAccount:forOperationWithName:
enableAssignmentNotifications
markChangesConsumed:
giveAccountWithIDAnotherChance:
debouncingInterval
setDebouncingInterval:
initWithDebouncingInterval:queue:handler:
fire:completion:
setDatabaseScope:
subscriptionOwnerUserRecordName
setSubscriptionOwnerUserRecordName:
initWithDatabaseScope:subscriptionOwnerUserRecordName:
dateComponents
rem_dateWithDateComponents:timeZone:
structuredLocation
setPersonID:
accountStore
accountWithIdentifier:
accountType
username
enableHashingUserIdentifiablesWithPersonIDSalt
isExchange
dataWithJSONObject:options:error:
daemonVersion:
daemonPid:
daemonStatus:completion:
containerURL:
containerStats:
nukeDatabase:
testInitialSyncWithAccountName:completion:
testReinitializeCloudKitWithAccountIdentifier:completionHandler:
testFlagAccountForInactivatedCalDAVDataMigrationWithAccountIdentifier:completionHandler:
cancelCloudKitSync:
cloudKitStatus:
fireDebugNotificationWithText:identifier:categoryIdentifier:reference:isRemove:completion:
fetchGeofencesWithCompletion:
removeGeofenceWithUUID:completion:
addGeofenceWithLatitude:longitude:radius:uuid:completion:
simulateCoreLocationEnterRegionWithIdentifier:completion:
simulateCoreLocationExitRegionWithIdentifier:completion:
persistenceStoreIDForAccountID:completion:
lowLevelMarkForDeletionWithObjectID:shouldSetDirtyFlags:shouldRemoveFromParent:completion:
lowLevelUnmarkForDeletionWithObjectID:shouldSetDirtyFlags:completion:
markAndDeleteExtraneousAlarmsFromReminderID:shouldSetDirtyFlags:completion:
setDueDateResolutionTokenNonceForAlarmID:nonce:shouldSetDirtyFlags:completion:
setDueDateResolutionTokenNonceForReminderID:nonce:shouldSetDirtyFlags:completion:
crashDaemonWithMessage:
fetchContactsMatching:completion:
createIsolatedStoreContainerWithCompletion:
destroyIsolatedStoreContainerWithToken:completion:
dataAccessStatusReports:
registerBabysitterWith:completion:
resetBabysitterWithRestrictedAccountID:completion:
downloadContainerWithAccountID:outputDir:completion:
purgeCKRecordWithRecordType:identifier:completion:
fetchAllManualSortHintsWithDetails:completion:
fetchManualSortHintWithListType:listID:completion:
removeManualSortHintWithIdentifier:completion:
resetAllManualSortHintsWithCompletion:
resetManualSortHintWithIdentifier:completion:
resetManualSortHintWithListType:listID:completion:
resetManualSortHintBeforeLastAccessed:completion:
updateManualSortHintWithIdentifier:lastAccessed:completion:
setupManualHashtagLabelUpdater
refreshHashtagLabelsImmediately
handleIncompleteTemplateOperationQueueItemsImmediately
immediatelyCreateOrUpdatePublicLinkOfTemplateWithTemplateObjectID:configuration:completion:
immediatelyRevokePublicLinkOfTemplateWithTemplateObjectID:completion:
synchronous_revertImageAttachmentsToUnDeduped:completion:
validateHashtagLabelsWithoutHashtagWithRepair:completion:
validateHashtagLabelsWithConcealedHashtagsWithRepair:completion:
validateHashtagsWithoutHashtagLabelWithRepair:completion:
validateHashtagsWithMismatchedHashtagsWithRepair:completion:
validateHashtagsWithSharedToMeReminderCKIdentifierAndMismatchedReminderCKIdentifierWithRepair:completion:
validateSharedToMeReminderPlaceholdersWithRepair:completion:
fetchAccountListOrderedIdentifiersWithAccountID:completion:
fetchAllSharedEntitySyncActivities:
addSharedEntitySyncActivityWithActivity:completion:
removeAllSharedEntitySyncActivityWithCompletion:
removeSharedEntitySyncActivityWithUUIDForChangeTracking:completion:
removeSharedEntitySyncActivitiesWithCKIdentifier:completion:
updateMinimumSupportedVersionWithObjectID:minimumSupportedVersion:completion:
updateRemCurrentRuntimeVersionDebuggingOverride:
initWithInteger:
setRemCurrentRuntimeVersionDebuggingOverride:
initWithEntityName:
predicateWithFormat:argumentArray:
setFetchLimit:
deleteObject:
setUuidForChangeTracking:
initWithEntity:insertIntoManagedObjectContext:
assignObject:toPersistentStore:
activityDate
setActivityDate:
activityType
setActivityTypeRawValue:
authorUserRecordIDString
setAuthorUserRecordIDString:
ckParentCloudObjectEntityName
setCkParentCloudObjectEntityName:
ckParentCloudObjectIdentifier
setCkParentCloudObjectIdentifier:
sharedEntityName
setSharedEntityName:
initWithAccountIdentifier:activityDate:activityType:authorUserRecordIDString:ckParentCloudObjectEntityName:ckParentCloudObjectIdentifier:ckIdentifier:sharedEntityName:uuidForChangeTracking:
activityTypeRawValue
orderedIdentifiers
setRelationshipKeyPathsForPrefetching:
defaultManager
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
copyItemAtURL:toURL:error:
setSha512Sum:
removeItemAtURL:error:
cancelledError
isMainThread
setIdentifier:
setETag:
setHintData:
setSerializationVersion:
setDateFormat:
hintData
stringFromDate:
eTag
serializationVersion
databaseWithDatabaseScope:
deleteRecordWithID:completionHandler:
unsafeUntilSystemReady_primaryICloudACAccount
registerAccount:forOperationWithName:
sharedManager
stateString
urlForIsolatedContainerWithIdentifier:
objectForKey:
initWithIdentifier:
descriptorForRequiredKeysForStyle:
initWithKeysToFetch:
setStyle:
enumerateContactsWithFetchRequest:error:usingBlock:
predicateForContactsMatchingName:
stringFromContact:
phoneNumbers
value
stringValue
emailAddresses
setDueDateResolutionTokenAsNonce:
setCkDirtyFlags:
hasChanges
setTransactionAuthor:
initWithCenter:radius:identifier:
setNotifyOnEntry:
setNotifyOnExit:
retainNotificationWithIdentifier:reference:content:skipBanner:completion:
releaseNotificationWithIdentifier:reference:completion:
setCategoryIdentifier:
errorSanitizedForXPCFromError:
unsafeUntilSystemReady_icloudACAccountMatchingAccountIdentifier:
displayAccount
_unsetMigrationFlagsWithACAccount:inStore:completionHandler:
fetchAccountWithObjectID:error:
updateAccount:
removeFromStore
saveSynchronouslyWithError:
isCloudKit
initWithFetchRequest:
setResultType:
result
setCkUserRecordName:
setListIDsMergeableOrdering_v2:
setCkServerChangeTokens:
setCkSharedObjectOwnerNames:
setLists:
setReminders:
refreshObject:mergeChanges:
stringRepresentation
expressionForKeyPath:
expressionForFunction:arguments:
setExpression:
setName:
setExpressionResultType:
setReturnsObjectsAsFaults:
setPropertiesToGroupBy:
environment
arguments
lastExtraneousAlarmsProcessedDate
useExtraneousAlarmBackOffThrottleInterval
statusReportWithCompletionBlock:
shouldSaveCompleted
initWithSmartListType:objectID:createIfNeeded:
smartListStorages
accountStorages
parentListStorages
smartListsFromSmartListStorages:accountStorages:parentListStorages:store:
listener:shouldAcceptNewConnection:
_setQueue:
resume
invalidate
updateDynamicApplicationShortcutItems:forBundleIdentifier:
setType:
setLocalizedTitle:
initWithType:
setIcon:
setUserInfo:
isDeleted
transactionAuthor
setIsExtraneous:
removeAlarmStorageObject:
fetchResultTokenToDiffAgainst
setCanonicalName:
initWithObjectID:accountID:reminderID:type:name:
initWithAccountID:objectID:property:
documentFromSerializedData:replicaIDSource:forKey:ofObjectID:
attributedString
rem_enumerateHashtagInRange:options:usingBlock:
string
initWithKey:ascending:
insertedObjects
updatedObjects
deletedObjects
syncCloudKitWithReason:discretionary:bypassThrottler:completion:
restartCloudKitSyncWithReason:bypassThrottler:completion:
syncDataAccessAccountsWithAccountIDs:bypassThrottler:completion:
deleteApplicationDataFromCloudKitWithAccountID:completion:
migrateICloudCalDavToCloudKitWithAccountID:disableCache:userInitiated:completion:
debugDownloadMigrationCacheWithAccountID:completion:
fetchUserRecordWithAccountID:completion:
setMigrationStateToDidChooseToMigrate:didFinishMigration:createZoneAccountIfFinishMigration:accountID:completion:
fetchServerRecordFor:completion:
observeCloudKitNetworkActivityChanges
newCloudContainerForAccountID:
privateCloudDatabase
predicateWithValue:
performQuery:inZoneWithID:completionHandler:
setDidChooseToMigrateLocally:
displayDateWithDueDateComponents:alarms:
initWithTrigger:
serializedData
archivedData
shouldIncludeHashtags
shouldIncludeAlarmTriggersBasedOnDateOrTimeInterval
shouldIncludeAlarmTriggersBasedOnLocationOrVehicle
shouldIncludeContactsHandleData
startingDueDate
endingDueDate
descriptors
text
textMatching
parentReminderID
objectIDs
setOriginalAlarmUID:
setAlarmUID:
setAcknowledgedDate:
ckRecordType
storageFrom:accountID:alarmID:
setTimeInterval:
setDateComponentsData:
setLocationUID:
setLatitude:
setLongitude:
setRadius:
setAddress:
setRouting:
setReferenceFrameString:
setContactLabel:
setMapKitHandle:
setProximity:
setEvent:
unexpectedNilPropertyWithClass:property:
initWithObjectID:dateComponents:
initWithObjectID:event:
initWithTitle:locationUID:
initWithObjectID:structuredLocation:proximity:
initWithObjectID:timeInterval:
configuration
sourceListID
mergeWithMap:forKey:
setShowingLargeAttachments:
urlRepresentation
sourceListIDURL
isPersisted
setCreationDate:
setSourceListIDURL:
setLastModifiedDate:
initWithContext:
setOperationTypeRawValue:
setPriorityRawValue:
setTemplateIdentifier:
setListIdentifier:
setConfigurationData:
setMostRecentTargetTemplateIdentifierByCurrentUser:
entitiesByName
isKindOfEntity:
unsavedManualOrdering
topLevelElementIDs
localInternalAccountID
unauthorizedErrorWithMissingEntitlement:requestedAccessLevel:currentAccesslevel:
changedValues
validationErrorMoveAcrossAccount:
getTokenForKey:
setToken:forKey:
relationshipsByName
isOrdered
mutableOrderedSetValueForKey:
setOwningListIdentifier:
setOwner:
parentAccountID
setParentAccount:
parentListID
hashtagIDsToUndelete
subtaskIDsToUndelete
smartListIDsToUndelete
listIDsToUndelete
_debug_cdOriginatorLinked
_debug_cdAssigneeLinked
generateNonce
setPublicLink:
setIsPersisted:
setPreferredDefaultListID:
preferredDefaultListID
setPreferredDefaultListObjectIDUrl:
preferredDefaultListObjectIDUrl
initWithAccountStorages:listStorages:objectIDs:
isPrimaryCloudKit
displayNameFromListName:isPlaceholder:
managedObjectIDForURIRepresentation:
templateObjectID
accountObjectID
externalIdentifiers
debug_useInMemoryPreferredDefaultListStorage
groupObjectID
zoneID
setPinnedDate:
setSmartListType:
share
setParentList:
setMostRecentTargetTemplateIdentifier:
setFilterData:
setCkZoneOwnerName:
setCkServerRecordData:
setCkServerShareData:
setNotesDocument:
setTitleDocument:
__swift_setObject:forKeyedSubscript:
integerValue
initWithConcurrencyType:
setPersistentStoreCoordinator:
setUndoManager:
setRetainsRegisteredObjects:
allowsKeyedCoding
encodeBool:forKey:
encodeInt:forKey:
encodeInteger:forKey:
encodeDouble:forKey:
encodeObject:forKey:
initWithFetchResultTokenToDiffAgainst:
deleteAllIndicesIfVersionOutdatedWithCompletionHandler:
indexName
bundleIdentifier
protectionClass
attributeSetForObject:
deleteAllIndicesWithCompletionHandler:
reindexAllSearchableItemsWithAcknowledgementHandler:
reindexSearchableItemsWithIdentifiers:acknowledgementHandler:
shouldStart
setShouldStart:
initForStoreWithDescription:coordinator:
initWithName:protectionClass:bundleIdentifier:
searchableIndex:reindexSearchableItemsWithIdentifiers:acknowledgementHandler:
searchableIndex:reindexAllSearchableItemsWithAcknowledgementHandler:
domainIdentifier
deleteSearchableItemsWithDomainIdentifiers:completionHandler:
attributeDictionary
initWithAttributes:
setContentType:
setDisplayName:
setProviderDataTypeIdentifiers:
evaluateWithObject:
emails
phones
notesAsString
setComment:
setCompletionDate:
setContentCreationDate:
setContentModificationDate:
isRecurrent
setContactKeywords:
setRankingHint:
setHashtags:
setNamedLocation:
setFullyFormattedAddress:
isAllDay
setAllDay:
date
setDueDate:
spotlightIndexVersion
deleteAllSearchableItemsWithCompletionHandler:
setSpotlightIndexVersion:
addHashtags:
setRecencyDate:
setFirstOccurrenceCreationDate:
setSharedToMeReminderCKIdentifier:
removeHashtags:
initWithName:canonicalName:firstOccurrenceCreationDate:recencyDate:uuidForChangeTracking:
changedIdentifiersOfModelClass:ofChangeType:
changeSet
applyFilterByTransactionAuthors:isExclusion:
initWithTrigger:objectID:
setObject:forKey:
initWithAccountType:
supportsAttachments
housekeepingingActivityScheduler
setStaledFileAttachmentCleanupContainerDeemedClean:
staledFileAttachmentCleanupContainerDeemedClean
setStaledFileAttachmentCleanupLastExecutionDate:
staledFileAttachmentCleanupLastExecutionDate
doubleValue
manualOrdering
initWithObjectID:accountID:smartListType:
setParentListID:
setDisplayDateIsAllDay:
setPriority:
.cxx_construct
operationTypeRawValue
priorityRawValue
listIdentifier
templateIdentifier
initWithPhones:emails:
fileExistsAtPath:
setObject:forKeyedSubscript:
preWarmModels
performSwiftInvocation:withParametersData:storages:completion:
valueForKey:
utilityQueue
xpcDefaultQueue
siriFoundInAppsListID
removeHashtagsObject:
addHashtagsObject:
activityTypeDescription
isInserted
lastModifiedUserRecordID
participants
participantID
creatorUserRecordID
modificationDate
initWithArray:
hack_overrideReminderIDsOrderingWithOrderedObjectIDs:
publicLinkConfigurationData
savedReminders
TT_gzipDeflate
includeSystemLanguage
includeSystemTimezone
includeAccountType
internalDescription
includeListNames
includeListNameFuzzedEmbeddings
includeListGroupInfo
creationDateWithinDays
dominantLanguageForString:
initWithTagSchemes:
setString:
wordEmbeddingForLanguage:
revision
embeddingWithContentsOfURL:error:
dimension
relevantWordTagsIncludeOtherWord
includeDayOfWeek
includeDates
includeReminderTitles
includeReminderTitleSaltedHash
includeReminderTitleFuzzedEmbeddings
includeIsFlagged
includePriority
includeRecurrenceInfo
includeAttachmentUTIs
includeRemindMeWhenMessagingInfo
includeUserActivityInfo
includeSubtaskInfo
includeAlarmDates
dateResolutionInSeconds
iCalendarDescription
localizedStringForLabel:
includeReminderTitleCategorySentence2Vec
includeReminderTitleCategoryUniversalGrammar
includeReminderTitleCategoryFilteredStopWords
rd_isExcludedFromBackup
setRd_isExcludedFromBackup:
matchesContactRepresentation:
orderedIdentifierMap
setOrderedIdentifierMap:
mergeChangesFromRemoteContextSave:intoContexts:
setExtraneousAlarmsCollectorContainerDeemedClean:
extraneousAlarmsCollectorContainerDeemedClean
setAuthor:
setUpdateLastModifiedDates:
setSyncToCloudKit:
setLastBannerPresentationDate:
request
rem_dateComponentsWithDate:timeZone:isAllDay:
parentSavedReminderIdentifier
setParentSavedReminderIdentifier:
setParentReminder:
validationErrorUndeleteHashtagFromAnotherReminder:expectedReminderID:
mergedWithDocument:error:
archivedDictionaryData
setUserActivity:
setImportedICSData:
setIcsUrl:
setIcsDisplayOrder:
setContactHandles:
setFlagged:
setCompleted:
setNotes:
setSiriFoundInAppsData:
setDaPushKey:
setDaSyncToken:
setExternalModificationTag:
setExternalIdentifier:
setDaCalendarItemUniqueIdentifier:
primaryLocaleInferredFromLastUsedKeyboard
initWithObjectID:listID:accountID:
setParentReminderID:
setTitleDocumentData:
setTitleAsStringByCDIngestor:
setRecurrenceRules:
setTimeZone:
setNotesDocumentData:
setNotesAsStringByCDIngestor:
setAlarms:
representationFromData:
setAssignments:
domain
code
userInfo
userActivityWithDictionaryData:error:
setOldExternalIdentifier:
setOldListIdentifier:
setReturnsDistinctResults:
setThreadIdentifier:
soundWithAlertType:
setSound:
unexpectedError
categoryWithIdentifier:actions:intentIdentifiers:options:
setHiddenPreviewsBodyPlaceholder:
iconWithSystemImageName:
actionWithIdentifier:title:options:icon:
setActions:
setCategorySummaryFormat:
body
legacyNotificationIdentifier
setShouldPreventNotificationDismissalAfterDefaultAction:
setInterruptionLevel:
initWithUnsignedInt:
initWithCGImage:scale:orientation:
globallyUniqueString
attachmentWithIdentifier:URL:options:error:
setDate:
setShouldHideTime:
nextThirdsHourFromHour:
rem_isWeekendDateComponents
fetchDefaultListWithError:
setCoreBehaviorTrainingParameters:
supportsTaskSpecificEvents
setBestKForKNN:
setDidFinishMigration:
setInactive:
listIDsMergeableOrderingReplicaIDSource
setDebugSyncDisabled:
setDaWasMigrated:
setDaSupportsSharedCalendars:
setDaAllowsCalendarAddDeleteModify:
setDaConstraintsDescriptionPath:
localAccountID
mergedOrderedSetWithOrderedSet:error:
initWithReplicaIDSource:serializedData:error:
hasDeserializedListIDsMergeableOrdering
listIDsMergeableOrderingData
serializedListIDsMergeableOrdering
pinnedListsManualOrdering
templatesManualOrdering
listsDADisplayOrderChanged
enumerateObjectsUsingBlock:
isLocal
isCalDav
setListsDADisplayOrderChanged:
firstObject
sortedArrayWithOptions:usingComparator:
setDaDisplayOrder:
initWithObjectID:type:name:nullableListIDsMergeableOrdering:
setListIDsMergeableOrderingData:
lastPresentAlarmDate
nextScheduledAlarmDate
setNextScheduledAlarmDate:
setLastPresentAlarmDate:
content
initWithStorages:
fetchOption
initWithAccountIDs:
fetchREMObjectIDOnly
purpose
noPrimaryActiveCloudKitAccountError
initWithStore:storage:
nullifiedRelationshipErrorWithRelationshipName:
nullifiedOriginatorAssignmentWithObjectID:accountID:reminderID:assigneeID:status:assignedDate:
set_debug_cdAssigneeLinked:
set_debug_cdOriginatorLinked:
initWithObjectID:accountID:reminderID:assigneeID:originatorID:status:assignedDate:
initRecurrenceRuleWithObjectID:accountID:reminderID:frequency:interval:firstDayOfTheWeek:daysOfTheWeek:daysOfTheMonth:monthsOfTheYear:weeksOfTheYear:daysOfTheYear:setPositions:end:
recurrenceEndWithEndDate:
dayOfWeek:weekNumber:
reachabilityChangedWithNotification:
addObserver:selector:name:object:
unsafeUntilSystemReady_iCloudAccountCalDavServiceWithAccountID:
firstMatchInString:options:range:
numberOfRanges
rangeAtIndex:
cloudKitMigrationDelayAfterError
initWithState:IsObserver:timeElapsed:listsMigrated:remindersMigrated:log:
cloudKitMigrationObserverPollingInterval
remindersMigrated
listsMigrated
isObserver
cloudKitMigrationMaxNumInvocations
cloudKitMigrationMaxNumFailures
setState:
setRetryCount:
setFailureCount:
setIsTerminated:
cloudKitMigrationSimulatedError
cloudKitMigrationDisableCleanUp
initWithPattern:options:error:
requestUUID
setSyncActivityNotificationEngine_accountSignInTime:
syncActivityNotificationEngine_accountSignInTime
getNotificationSettingsWithCompletionHandler:
muteNotificationOptionsForSharedList:
objectWithID:
setHashtagLabel:
isObsolete
updateNetworkActivityWithValue:
initWithObjectIDs:
listStorages
listsFromAccountStorages:listStorages:store:requestedListIDs:
observePreferredDefaultListIDWithBlock:
setIsGroup:
setSharingStatus:
setSharedOwner:
setSharees:
currentUserParticipant
addShareesObject:
userIdentity
lookupInfo
emailAddress
phoneNumber
nameComponents
permission
setAccessLevel:
acceptanceStatus
rem_addingTel
rem_addingMailto
setFirstName:
setMiddleName:
setLastName:
setNamePrefix:
setNameSuffix:
setNickname:
givenName
familyName
initWithType:subpredicates:
removeListsObject:
reminderIDsMergeableOrderingFromReminderIDUUIDStringsJSONData:error:
reminderIDUUIDStringsJSONDataFromReminderIDsMergeableOrdering:error:
update
removeRemindersObject:
addRemindersObject:
andPredicateWithSubpredicates:
setIsPinnedByCurrentUser:
setLastUserAccessDate:
ckShortDescription
initWithSet:
cloudKitMaxNumAlarmIDsInReminderCKRecordDebugOverride
addAlarmStorageObject:
addRecurrenceRulesObject:
removeRecurrenceRules:
removeAlarmStorage:
initWithReplicaIDSource:string:
mutableDocument
initWithString:
wipeAndReplaceWithString:
setCkParentReminderIdentifier:
isTemporaryID
markedForRemoval
invalidateICloudACAccounts
postNotificationName:object:
initWithObjectID:accountID:reminderID:type:name:creationDate:
defaultStore
setTemplate:
setMetadata:
setDisplayDateDate:
setHasHashtags:
setHasLocationTriggersOrVehicleEventTriggers:
initWithShort:
reset
fetchListWithObjectID:error:
updateList:
addReminderWithTitle:toListChangeItem:reminderObjectID:
insertReminderChangeItem:afterReminderChangeItem:
subtaskContext
addReminderWithTitle:toReminderSubtaskContextChangeItem:reminderObjectID:
attachmentContext
addURLAttachmentWithURL:
setSetPositions:
setMonthsOfTheYear:
setWeeksOfTheYear:
setDaysOfTheYear:
setDaysOfTheMonth:
setDaysOfTheWeek:
dayOfTheWeek
weekNumber
setFirstDayOfTheWeek:
setInterval:
setFrequency:
recurrenceEnd
setOccurrenceCount:
recurrenceEndWithOccurrenceCount:
setUti:
initWithFileURL:
setHeight:
setWidth:
setFileSize:
setFileName:
setUrl:
cloudkit
currentChangeToken:
currentChangeTokenForAccountTypes:completion:
currentChangeTokenForAccountID:completion:
earliestChangeTokenForAccountID:completion:
getTrackingStateWithClientID:completion:
objectIDWithURL:
stagedMigrationsInfoForPersistentStoreAt:
shouldPerformStagedLightweightMigrationForStoreAtStoreURL:
performStagedLightweightMigrationForStoreAtStoreURL:persistentStoreDescriptionOptionsOverride:postMigrationDataUpdatesTransactionAuthor:error:
cloneStoreAtSourceStoreURL:destinationStoreURL:error:
persistentStores
removePersistentStore:error:
initWithURL:
setShouldMigrateStoreAutomatically:
setShouldInferMappingModelAutomatically:
setShouldAddStoreAsynchronously:
initWithManagedObjectModel:
addPersistentStoreWithDescription:completionHandler:
setOption:forKey:
versionIdentifiers
isConfiguration:compatibleWithStoreMetadata:
accountStoreMissingError:
attachmentPushedToiCloudForType:
isOverdue
alarmEngine
strongToWeakObjectsMapTable
siriFoundInAppsUserConfirmation
currentCalendar
setAlarmStorage:
setChildren:
setDaIsNotificationsCollection:
setDaIsEventOnlyContainer:
orPredicateWithSubpredicates:
initWithKey:ascending:reverseNullOrder:
setFetchOffset:
setResolutionTokenMap_v3_JSONData:
setMinimumSupportedAppVersion:
setEffectiveMinimumSupportedAppVersion:
initWithContactRepresentation:
disableAlarmEngineDataSourcePrefetching
initWithStringValue:
isLikePhoneNumber:
initWithEntity:
setPropertiesToUpdate:
capabilities
supportsAssignments
matchesInString:options:range:
range
escapedPatternForString:
stringByReplacingMatchesInString:options:range:withTemplate:
baseLanguageFromLanguage:
listIDs
setIsCompleted:
internetNotReachableError
notPredicateWithSubpredicate:
keyPath
localizedStandardCompare:
initWithKey:ascending:selector:
setHostURL:
setUuidString:
initCalDAVNotificationWithObjectID:accountID:listID:uuidString:hostURL:externalIdentifier:externalModificationTag:
initWithURL:configuration:creationDate:lastModifiedDate:expirationDate:canBeUpdated:
archivedDataWithRootObject:requiringSecureCoding:error:
handleNotification:
currentThread
userRecordID
undateify
allKeys
sharedCloudDatabase
fetchAllRecordZonesOperation
setFetchRecordZonesCompletionBlock:
setCompletionBlock:
setDatabase:
addOperation:
isDefaultRecordZoneID
CKDescriptionPropertiesWithPublic:private:shouldExpand:
containsAssetValues
valueStore
rootDatabasePath
moveItemAtURL:toURL:error:
addEntriesFromDictionary:
array
userInteractionsData
setUserInteractionsData:
DidCompleteInitializeAllAccountsNotification
initWithHandler:queue:
observe
unobserve
fetchAccountsWithError:
isCloudBased
unsafeUntilSystemReady_allCloudKitRemindersEnabledICloudACAccounts
aa_isAccountClass:
isDatabaseMigrated
_addLocalAccountWithName:accountObjectID:
fetchListsWithError:
localAccountDefaultListID
addListWithName:toAccountChangeItem:listObjectID:
__addAccountWithType:name:accountObjectID:
postNotification:
removeObserver:name:object:
setAttachmentTypeRawValue:
attachmentTypeRawValue
initWithObjectID:accountID:reminderID:UTI:fileSize:fileURL:data:
initWithObjectID:accountID:reminderID:UTI:fileSize:fileURL:data:width:height:
ascending
initWithOrderedIdentifiers:
removeAllObjects
setCountLimit:
throttledErrorWithRemainingTimeInterval:
initShareeWithObjectID:accountID:listID:displayName:firstName:middleName:lastName:namePrefix:nameSuffix:nickname:address:status:accessLevel:
includeConcealedObjects
initWithAccountStorages:listStorages:reminderStorages:objectIDs:
allowConcealedObjects
initWithHashtags:
initWithAssignments:
storeProperty:forKey:
daCalendarItemUniqueIdentifiers
listObjectID
predicateDescriptor
sortDescriptors
includeIncomplete
includeCompleted
parentReminderIDs
includeUnsupported
includingSubtasks
setIncludesSubentities:
initWithAttachment:objectID:accountID:reminderID:
addAttachment:
defaultMergePolicy
initWithMergeType:
resolveConflicts:error:
sourceObject
persistedSnapshot
cachedSnapshot
resolutionTokenMapWithJSONData:keyMap:
getTokenKeys
setValue:forKey:
databaseObject
constraint
constraintConflictWithIdentifier:constraint:
constraintValues
conflictingObjects
supportsCRDTs
notesReplicaIDSourceWithAccountID:reminderID:
titleReplicaIDSourceWithAccountID:reminderID:
listIDsMergeableOrderingReplicaIDSourceWithAccountID:
changes
changeType
changedObjectID
updatedProperties
supportsPinnedLists
isPinned
accountsListCategorizedCountsCache
setAccountsListCategorizedCountsCache:
showRemindersAsOverdue
isDate:overdueAtReferenceDate:allDay:showAllDayRemindersAsOverdue:
customContext
supportsCustomSmartLists
dataRepresentationWithError:
currentPersistentHistoryTokenFromStores:
initWithPersistentHistoryToken:
setLastConsumedChangeTokenData:
setLastConsumedDate:
refreshAllObjects
listType
reminderStorages
remindersFromAccountStorages:listStorages:reminderStorages:store:requestedReminderIDs:
resolutionTokenKeyForChangedKeyInREMReminderChangeItemOfREMCDSavedReminder:
attachmentRepresentationAndReturnError:
changeTrackingPerformerWithStoreContainerToken:reason:completion:
debugPerformerWithStoreContainerToken:reason:completion:
storePerformerWithProcessName:storeContainerToken:reason:completion:
syncInterfacePerformerWithReason:completion:
indexingPerformerWithReason:completion:
remoteObjectProxyWithErrorHandler:
xpcPerformerUnavailableErrorWithDescription:
serviceName
setExportedObject:
interface
setExportedInterface:
setRemoteObjectInterface:
setInterruptionHandler:
setInvalidationHandler:
valueForEntitlement:
auditToken
isInternalInstall
boolValue
scheduleBackgroundActivity
rem_now
antecedent
consequent
miningTask:filteredRulesForExtractedRules:
miningTaskDidFinish:
miningTask:didExtractRules:
taskSpecificEventProvidersForMiningTask:
taskSpecificItemWithIdentifier:valueClass:
itemWithType:numberValue:
initWithStartDate:endDate:item:
itemWithType:stringValue:
initWithUnsignedInteger:
completionStatus
coreAnalyticsDict
support
hourOfDaySlot
isWeekend
dayOfWeek
hourOfDay
initWithURL:taskSpecificItemTypes:
retrieveRulesWithSupport:confidence:filters:
confidence
initWithAntecedent:consequent:support:confidence:
initWithStorageURL:types:targetTypes:samplingInterval:absoluteSupport:confidence:
mine
scheduledTimerWithTimeInterval:repeats:block:
terminateEarly
miningTask:didExtractEvents:
miningTask:didExtractBaskets:
miningTask:didMinePatterns:
miningTask:didError:
compareAndMergeWithMap:forKey:
forceMergeFromMap:forKey:
initTokenWithDefaultValueIfNecessaryForKey:
testIndexDummyItemWithCompletion:
initWithItemContentType:
localizedStringFromDate:dateStyle:timeStyle:
setContentDescription:
initWithUniqueIdentifier:domainIdentifier:attributeSet:
indexSearchableItems:completionHandler:
saveRequest
updateReminderChangeItem:fromICSTodo:icsCalendar:isNew:withOptions:
exportICSCalendarFromReminders:
components
_trackedListChangeItemForObjectID:
addReminderWithTitle:toListChangeItem:
setRemindersICSDisplayOrderChanged:
trackedReminderChangeItems
fetchRemindersWithError:
removeFromParent
trackedListChangeItems
removeFromList
supportsGroups
addListWithName:toAccountChangeItem:
copyListDataFrom:
isSharedToMe
rem_compare:
extraneousAlarmCleaner
setUseExtraneousAlarmBackOffThrottleInterval:
setLastExtraneousAlarmsProcessedDate:
rem_isAllDayDateComponents
nextRecurrentDueDateAfter:dueDate:timeZone:allDay:recurrenceRules:
database
initWithIncompleteReminderCounts:scheduledCount:
initWithMetadata:
sortDescriptorSortingByOrderingInAccountAscending:
initWithCount:
initWithListStorages:
initWithAccountStorages:listStorages:reminderStorages:requestedObjectIDs:metadata:
modifiedDate
uncommitedElementsAccountID
secondaryLevelElementIDsByTopLevelElementID
initWithRequestedObjectIDs:
shortValue
notSupportedError
initWithTemplateObjectID:
setObject:
setSavedAttachment:
setSavedReminder:
setReminderInZREMCDREMINDER:
setCkNeedsInitialFetchFromCloud:
setDisplayDateTimeZone:
setDisplayDateUpdatedForSecondsFromGMT:
setResolutionTokenMap_v2_JSON:
setSpotlightIndexCount:
setSharedToMeReminderPlaceholder:
locationManager:didEnterRegion:
locationManager:didExitRegion:
locationManager:didDetermineState:forRegion:
locationManager:didFailWithError:
locationManager:monitoringDidFailForRegion:withError:
locationManagerDidChangeAuthorization:
setOnBehalfOfBundleId:
startMonitoringForRegion:
authorizationStatus
conservativeEntry
notifyOnEntry
notifyOnExit
stopMonitoringForRegion:
minimumRegionMonitoringDistance
monitoredRegions
initWithEffectiveBundle:delegate:onQueue:
locationBundleURL
mainBundle
locationManager:didUpdateToLocation:fromLocation:
locationManager:didUpdateLocations:
locationManager:didUpdateHeading:
locationManagerShouldDisplayHeadingCalibration:
locationManager:didRangeBeacons:inRegion:
locationManager:rangingBeaconsDidFailForRegion:withError:
locationManager:didRangeBeacons:satisfyingConstraint:
locationManager:didFailRangingBeaconsForConstraint:error:
locationManager:didChangeAuthorizationStatus:
locationManager:didStartMonitoringForRegion:
locationManagerDidPauseLocationUpdates:
locationManagerDidResumeLocationUpdates:
locationManager:didFinishDeferredUpdatesWithError:
locationManager:didVisit:
initWithDASymbolicColorName:daHexString:
initWithRed:green:blue:alpha:colorSpace:daSymbolicColorName:daHexString:ckSymbolicColorName:
titleReplicaIDSource
notesReplicaIDSource
initWithTemplateStorages:
createIfNeeded
initWithSmartListStorages:
initWithSmartListStorages:accountStorages:parentListStorages:
setRelevantShortcuts:completionHandler:
initWithIdentifier:displayString:
initWithStartDate:endDate:
initWithShortcut:
setShortcutRole:
setWidgetKind:
setRelevanceProviders:
notificationUserInfoAccountObjectIDKey
notificationUserInfoAccountTypeKey
notificationUserInfoPropertyNameKey
notificationUserInfoPropertyValueKey
observeWithObserver:
unobserveWithObserver:
tipKitCachedCountOfHashtags
setTipKitCachedCountOfHashtags:
tipKitCachedCountOfCustomSmartLists
setTipKitCachedCountOfCustomSmartLists:
tipKitCachedCountOfUncompletedReminders
setTipKitCachedCountOfUncompletedReminders:
tipKitCachedCountOfListsWithCustomBadge
setTipKitCachedCountOfListsWithCustomBadge:
tipKitCachedCountOfLists
setTipKitCachedCountOfLists:
notification
initWithQueue:notificationCenter:
userNotificationCenter:willPresentNotification:withCompletionHandler:
userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:
userNotificationCenter:openSettingsForNotification:
getDeliveredNotificationsWithCompletionHandler:
requestWithIdentifier:content:trigger:destinations:
addNotificationRequest:withCompletionHandler:
mutableCopy
replaceContentForRequestWithIdentifier:replacementContent:completionHandler:
subtitle
categoryIdentifier
setWantsNotificationResponsesDelivered
setNotificationCategories:
requestWithIdentifier:content:trigger:
removeDeliveredNotificationsWithIdentifiers:
addRecurrenceRule:
nextRecurrentAdvanceAmountForDateComponents:afterDate:
removeAlarm:
rem_dateComponentsByAddingTimeInterval:
hashtagContext
addHashtagWithType:name:
setPersonIDSalt_v1:
utility
applicationShortcut
write
siriKit
read
dataAccess
container
migration
stagedLightweightCoreDataMigration
inlineTagAutoConvertEngine
suggestedAttributes
changeTracking
search
timelineEngine
setManagerData:
setVersion:
initWithManagerData:version:
attachmentPushedToiCloudForUTType:
unsafeUntilSystemReady_displayedHostnameOfICloudACAccountWithAccountIdentifier:
initWithAccountID:calendarID:
setRemXPCCompletion:
sharedMain
addToOperationsQueueDisabledCheckAndGoBlock:wrappedBlock:
transactionId
respondToShareRequestWithResponse:
rem_storeProvider
activeAgents
syncChangeTrackingPerformerWithReason:errorHandler:
syncDebugPerformerWithReason:errorHandler:
syncDebugPerformerWithErrorHandler:
syncStorePerformerWithReason:errorHandler:
asyncStorePerformerWithReason:loadHandler:errorHandler:
syncSyncInterfacePerformerWithReason:errorHandler:
asyncSyncInterfacePerformerWithReason:loadHandler:errorHandler:
syncIndexingPerformerWithReason:errorHandler:
asyncIndexingPerformerWithReason:loadHandler:errorHandler:
hasLocationTriggersOrVehicleEventTriggers
hasHashtags
executeFetchRequest:completion:
performInvocation:completion:
fetchReplicaManagerForAccountID:completion:
fetchReplicaManagersForAccountID:bundleID:completion:
compressedDistributedEvaluationDataWithOptions:completion:
saveAccountStorages:listStorages:smartListStorages:templateStorages:reminderStorages:changedKeys:replicaManagers:author:mode:synchronously:syncToCloudKit:completion:
fetchShareForObjectWithID:completion:
createShareForObjectWithID:appIconData:completion:
updateShare:accountID:completion:
stopShare:accountID:completion:
addCKShareObserverIfNeededForAccountID:completion:
acceptShareWithMetadata:completion:
acceptCalDAVShareWithCalendarURL:acAccountID:completion:
rejectCalDAVShareWithCalendarURL:acAccountID:completion:
fetchContentAttributesOfTemplateWithObjectID:completion:
createOrUpdatePublicLinkForTemplateWithObjectID:configuration:completion:
createPublicContentPreviewOfTemplateWithObjectID:configuration:completion:
revokePublicLinkForTemplateWithObjectID:completion:
downloadPublicTemplateWithPublicLinkURLUUID:completion:
notifyOfInteractionWithPeople:completion:
updateAccountsAndFetchMigrationState:completion:
updateAccountWithACAccountID:restartDA:completion:
removeOrphanedAccountWithCompletion:
requestToMergeLocalDataIntoSyncDataWithAccountIdentifier:completion:
requestToDeleteSyncDataWithAccountIdentifier:completion:
requestToDeleteLocalDataWithCompletion:
uncachedSuggestedAttributesPerformerWithReason:completion:
anchoredBubbleEnabledWithCompletion:
MCIsManagedAccountWithObjectID:completion:
requestToUpdateClientConnectionsWithShouldKeepAlive:
validatePhantomObjectsWith:shouldRepair:completion:
catchObjCException:error:
MCIsManaged
initWithBool:
personHandle
aliases
contactIdentifier
initWithReminderCount:hasDisplayDate:hasHashtags:hasLocationTriggersOrVehicleEventTriggers:hasImageAttachments:
saveErrorWithCoreDataError:
initWithResultData:storages:latestFetchResultToken:
fetchExecutor
setLastSyncPoll:
lastSyncPoll
triggerThrottledSyncWithReason:discretionary:completion:
initWithName:
setHashtagLabelsInCustomSmartListFilterCache:
hashtagLabelsInCustomSmartListFilterCache
configurationData
fetchPrimaryActiveCloudKitAccountREMObjectIDWithError:
setLastCloudConfigurationDownload:
lastCloudConfigurationDownload
initWithRecordIDs:
setQueuePriority:
publicCloudDatabase
setContainer:
setTimeoutIntervalForRequest:
setQuantity:
setExpectedSendSize:
setExpectedReceiveSize:
setGroup:
newCloudContainerWithPublicCloudDatabase
setSavePolicy:
center
geoReferenceFrame
setGeoReferenceFrame:
setConservativeEntry:
base64EncodedHMACStringFromString:usingSalt:
InitiallyNilError
NilValueError
InvalidValueError
AccountAbsentError
initWithAccountObjectID:accountType:initialSaltValue:callbackQueue:successHandler:errorHandler:
setPropertyName:
subentities
initWithPersistentHistoryTokens:
persistentStoreForIdentifier:
persistentHistoryTokens
fetchHistoryAfterDate:
fetchHistoryAfterToken:
initWithQueue:
setBuddyDidFinishHandler:
start
stop
waitForSyncEngineSystemAvailabilityBlockingQueue:completionQueue:completionBlock:
updateDisplayDatesIn:
minusSet:
indexOfObject:
compareCurrentChangeTokenToLastConsumedWithResult:error:
initWithMachServiceName:
stringFromByteCount:countStyle:
setUsesSignificantDigits:
setMinimumSignificantDigits:
setMaximumSignificantDigits:
stringForObjectValue:
createFileAtPath:contents:attributes:
setImageDeduplicationLegacyAttachmentsMarkedForDeletion:
imageDeduplicationLegacyAttachmentsMarkedForDeletion
setImageDeduplicationLastExecutionDate:
imageDeduplicationLastExecutionDate
templateID
setSharedOwnerAddress:
setSharedOwnerName:
setDaIsImmutable:
setDaIsReadOnly:
dataWithPropertyList:format:options:error:
setDaBulkRequests:
setDaExternalIdentificationTag:
hasDeserializedReminderIDsMergeableOrdering
reminderIDsMergeableOrderingData
remindersICSDisplayOrderChanged
reminderIDsOrderingHints
sharedOwnerID
reminderIDsToUndelete
childSmartListIDsToUndelete
childListIDsToUndelete
initWithObjectID:accountID:name:isGroup:reminderIDsMergeableOrderingData:
setSharedOwnerID:
setIsPlaceholder:
setCurrentUserShareParticipantID:
propertyListWithData:options:format:error:
setCalDAVNotifications:
createCoordinatorForMigratingReminderDataWithClientNamesOfREMCDChangeTrackingStateWhichShouldNotBeResetUponPersistentHistoryTruncation:
bundleForClass:
setMode:
isEnabledForDataclass:
rem_isEligibleForCloudKitReminders
accountDescriptionWithACAccount:
saveDidChooseToMigrate:didFinishMigration:toACAccount:inStore:completionHandler:
__addAccountWithType:name:
setObjectID:
changedKeys
disableMonitoringAgents
aa_accountsEnabledForDataclass:
isActive
fetchAccountsIncludingInactive:error:
enableMonitoringAgentsWithToken:
saveAccount:withCompletionHandler:
setAccountProperty:forKey:
rem_didChooseToMigrate
initWithDueDateCounts:
initWithSubtaskCounts:
sortDescriptorSortingByOrderingInListAscending:
initWithDueDate:count:
initWithReminderStorages:
compareObject:toObject:
dueAfter
dueBefore
hasLocation
location
fetchPrimaryActiveCloudKitAccountWithError:
initWithStore:account:storage:
alarmReferenceCKRecordType
recordFetchWith:
recordSaveWith:
postSummaryFor:
fetchResultTokenFromDataRepresentation:error:
initWithQueue:store:
setLastSuggestedAttributesAutoTrainingToken:
lastSuggestedAttributesAutoTrainingToken
encodedSavedReminders
setEncodedSavedReminders:
supportsSubtasks
noSuchSmartListErrorWithSmartListType:
listsFromAccountStorages:listStorages:store:
initWithStore:account:parentList:storage:
mergeMigrationStateFromRecord:
mutableOrderedSet
removeObjectAtIndex:
immutableOrderedSet
clearUserRecord:
writeMigrationStateTo:didChooseToMigrate:didFinishMigration:
initWithOrderedSet:
addObjectsFromArray:
indexOfEqualObject:
setReplicaManagerProvider:
unauthorizedErrorWithMissingEntitlement:
objc_toJSONString
newObjectFromJSONObject:
objc_newObjectFromJSONString:
initWithDictionary:
initWithMap:
initWithCounter:modificationTime:replicaID:
todayNotificationFireTime
shouldIncludeRemindersDueTodayInBadgeCount
setBadge:
streamTodayNotificationFireTime:
streamShouldIncludeRemindersDueTodayInBadgeCount:
snoozeFromDueDateForFutureIntegralMultipleOfTimeInterval:
snoozeToNextThirds
snoozeFromNowForTimeInterval:
snoozeForever
orderValueWithAssignedDate:objectIdentifier:
processName
postNotificationName:object:userInfo:
_isAddingExtraPrimaryCKAccountForTesting
isNonPrimaryCloudKit
validationErrorRemoveAccountBeingInserted:
validationErrorRemoveAccountBeingActivated:
rem_storeForDataAccess
rem_supportsClearingOrphanedStores
rem_saveRequestForDataAccess
rd_observePrimaryCloudKitAccountPersonIDSaltChangesOnQueue:successHandler:errorHandler:
rd_unobservePrimaryCloudKitAccountPersonIDSaltChanges:
rd_isPersonIDSaltInitiallyNilError:
rd_base64EncodedHMACStringFromString:usingPersonIDSalt:
rem_notificationPresentingForDataAccess
remindersDatabaseDidChange
updateContentsOfAllFoldersForAccountIDs:
isDataAccessEnabled
vendDaemons:
waitForSystemAvailabilityWithCompletionBlock:completionQueue:
setRem_storeProvider:
sharedDBWatcher
setRem_localDBWatcher:
setRem_userNotificationPresentingProvider:
setRem_xpcEventHandler:
_loadAndStartMonitoringAgents:
rem_localDBWatcher
initWithServiceName:functionName:serializedRequest:
setFunctionInvokeCompletionBlock:
organizationCloudDatabase
setRequestCompletedBlock:
v24@0:8Q16
B16@0:8
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@24
v32@0:8@"NSPersistentStore"16@"NSMutableDictionary"24
v24@0:8@16
@24@0:8Q16
@48@0:8@16:24d32B40B44
v16@0:8
:16@0:8
v24@0:8:16
d16@0:8
v24@0:8d16
v20@0:8B16
@?16@0:8
v24@0:8@?16
@"NSObject<OS_dispatch_queue>"
@48@0:8@16@24@32@40
@72@0:8@16@24Q32Q40@48@56@64
@32@0:8@16d24
@"NSArray"
@"ICUserDefaults"
@"NSDate"
@"NSTimer"
@32@0:8@16@24
@32@0:8@?16@24
@24@0:8@16
v56@0:8@16@24Q32Q40@?48
v32@0:8@16@?24
v36@0:8@16B24@28
v48@0:8Q16@24@32@40
v52@0:8Q16@24@32@40B48
v32@0:8Q16@24
B48@0:8@16@24@32^@40
B32@0:8@16@24
v48@0:8@16@24@32@40
v40@0:8@16@24@32
v28@0:8@16B24
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v40@0:8@"APSConnection"16@"NSData"24@"APSAppTokenInfo"32
v40@0:8@"APSConnection"16@"APSURLToken"24@"APSURLTokenInfo"32
v40@0:8@"APSConnection"16@"NSError"24@"APSURLTokenInfo"32
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
v32@0:8@"APSConnection"16@"NSArray"24
@20@0:8B16
B20@0:8B16
B28@0:8@16B24
v32@0:8r*16@?24
v36@0:8@16B24@?28
v44@0:8@16@24B32@?36
d24@0:8@16
q24@0:8@16
v32@0:8q16@24
@32@0:8@16@?24
v40@0:8@16@?24@?32
@40@0:8@16@24@32
v52@0:8@16@24@32B40@?44
v40@0:8@16@24d32
v40@0:8@16@24@?32
@48@0:8@16@24@32@?40
@60@0:8@16@24@32@40B48@52
v60@0:8@16@24@32@40B48@52
v52@0:8@16@24@32B40@44
B32@0:8@16q24
v48@0:8@16@24@32@?40
@36@0:8@16@24B32
v56@0:8@16@24@32@40@48
@40@0:8@16@24@?32
v56@0:8@16@24@32@40@?48
v40@0:8q16@24@?32
v48@0:8@16@24q32@40
@40@0:8@16q24@32
v40@0:8@16q24@32
v48@0:8@16@24@32^v40
v44@0:8B16B20B24@28@?36
v24@0:8B16B20
q16@0:8
v24@0:8q16
{os_unfair_lock_s=I}16@0:8
v20@0:8{os_unfair_lock_s=I}16
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"RDStoreController"
@"<ICCloudContextDelegate>"
@"NSOperationQueue"
@"REMAppleAccountUtilities"
@"ICCloudContextSyncMetrics"
@"NSMutableSet"
@"NSMutableDictionary"
@"ICSelectorDelayer"
@"NSDictionary"
@"NSString"
@"APSConnection"
@"_TtC7remindd37RDDebouncerWithCKDatabaseNotification"
@"_TtC7remindd21RDDebouncerWithNumber"
@"DADBuddyStateObserver"
@"RDAccountInitializerDidCompleteInitializeAllAccountsObserver"
@"RDAccountPersonIDSaltObserver"
@"NSNotificationCenter"
@"<ICCloudSchemaCatchUpSyncController>"
@"NSSet"
@"NSDictionary"16@0:8
@"<REMRDSpotlightIndexProviding>"16@0:8
@"NSSet"16@0:8
B68@0:8@16@24@32@40@48B56^@60
B32@0:8@16^@24
@40@0:8@16@24^@32
@32@0:8@16^@24
@"NSURL"
@"ICCloudThrottlingPolicy"16@0:8
@"NSNumber"16@0:8
@"ICCloudThrottlingPolicy"
@"NSNumber"
@"_ICCloudConfigurationStorage"
@"NSURLSession"
@"NSArray"16@0:8
B24@0:8^@16
@"REMDisplayDateUtils"
@"REMCDList"
v56@0:8Q16@24Q32@40@?48
@36@0:8@16B24@28
@56@0:8@16@24@32@40@48
@"REMObjectID"16@0:8
@"REMObjectID"24@0:8@"NSUUID"16
@24@0:8^@16
@"REMObjectID"24@0:8^@16
@"NSArray"24@0:8@"NSEntityDescription"16
@"<REMChangedObjectIdentifying>"16@0:8
v28@0:8B16@20
@"CKRecord"
@"CKShare"
@"REMCDAccount"
@"REMResolutionTokenMap"
@"NSDate"16@0:8
v24@0:8@"NSDate"16
@"<ICCloudSchemaCatchUpSyncSchedulingStateStorage>"
B40@0:8@16@24^q32
q32@0:8@16@24
q24@0:8q16
@"CKRecordID"16@0:8
@"CKRecord"16@0:8
v32@0:8@"NSMutableSet"16@?<v@?@"<ICCloudObject>"@"CKRecord">24
v32@0:8@"CKRecord"16@"NSString"24
v24@0:8@"CKModifyRecordsOperation"16
v32@0:8@"CKModifyRecordsOperation"16@"CKRecord"24
v40@0:8@"CKModifyRecordsOperation"16@"CKRecordID"24@"NSError"32
@"NSManagedObjectID"16@0:8
@40@0:8@"CKRecordID"16@"NSString"24@"NSManagedObjectContext"32
@40@0:8@"CKRecord"16@"NSString"24@"NSManagedObjectContext"32
@40@0:8@"CKRecord"16@"REMCDAccount"24@"NSManagedObjectContext"32
@40@0:8@"CKRecordID"16@"REMCDAccount"24@"NSManagedObjectContext"32
@"NSArray"24@0:8@"NSManagedObjectContext"16
@"REMAccountTypeHost"
@24@0:8q16
v48@0:8@16@24Q32@?40
@"NSCache"
B24@0:8Q16
@"<REMCDObjectTreeNodeIdentifierProtocol>"16@0:8
@"NSManagedObjectID"
@"REMCDObject"
B24@0:8@"<REMCDObjectProcessableTreeNode>"16
v24@0:8@"NSArray"16
@"RDStoreControllerManagedObjectContext"
@24@0:8@?16
B24@0:8@?16
@24@0:8#16
Q40@0:8@16o^Q24@?32
B24@0:8q16
@28@0:8@16B24
v32@0:8@16q24
@56@0:8@16@24@32q40@48
@48@0:8@16@24q32@40
@"CKServerChangeToken"
@"ICCloudContext"
@"NSManagedObjectContext"
@24@0:8B16B20
Q32@0:8@16@24
Q32@0:8@16^@24
Q28@0:8Q16B24
@"RDStoreControllerValidationPolicy"
@"ICBatchFetchHelper"
@28@0:8B16@20
@"NSPersistentStoreCoordinator"
v40@0:8@"ICCloudContext"16@"CKRecordZoneID"24@"NSString"32
v40@0:8@"ICCloudContext"16@"CKRecord"24@"NSString"32
v32@0:8@"ICCloudContext"16@"NSString"24
@"NSPersistentStore"24@0:8@"NSString"16
@36@0:8B16@20@28
B32@0:8B16B20^@24
@28@0:8B16^@20
B36@0:8@16B24^@28
B52@0:8@16@24B32Q36^@44
v48@0:8@16^@24^@32^@40
@44@0:8@16@24B32@36
B40@0:8@16^@24^@32
v32@0:8@16^@24
Q24@0:8Q16
B40@0:8@16^B24^@32
B44@0:8@16@24B32^@36
B40@0:8@16@24^@32
@40@0:8@16@?24@?32
v48@0:8#16@24@32@40
@"RDAccountPropertiesNotifier"
@"RDAttachmentFileManager"
@"RDAccountUtils"
@"<RDStoreControllerAccountStoreManagementDelegate>"
@"NSMergePolicy"
@"NSMapTable"
@"NSHashTable"
@"RDCoreSpotlightDelegateManager"
@"REMObjectID"
@"NSPersistentStore"
@32@0:8d16Q24
@24@0:8r^{sockaddr_in=CCS{in_addr=I}[8c]}16
q20@0:8I16
^{__SCNetworkReachability=}
@48@0:8@16@24Q32Q40
B40@0:8@16@24@32
@"NSMutableArray"
@40@0:8Q16Q24@32
@"<REMCDObjectTreeProcessorDelegate>"
v32@0:8@?16@?24
Q24@0:8@16
RDStoreControllerMigrator_RemoveUnparentedObjects
account == NULL
%@%@ = %@
v32@?0@8@16^B24
REMCDHashtagLabel
REMCDAuxiliaryChangeInfo
REMCKServerChangeToken
REMCDSmartList
com.apple.reminders.coalescer.requests
REMCDAuxiliaryReminderChangeMoveInfo
ICCloudBatchIntervalDidChangeNotification
ThrottlingPolicyCurrentBatchCount
ThrottlingPolicyCurrentLevelIndex
ThrottlingPolicyStartTime
unlimited
REMCKSharedObjectOwnerName
com.apple.remindd.cloudkit.sync.crashDetected
com.apple.reminders.cloud.waiting
Account
RemindersMigration
Metadata
CloudKitAccountStatus
CloudKitZonesNeedingFetchChanges
CloudKitAccountZonesNeedingFetchChanges
CloudDirtyUUIDKey
ZoneName
OwnerName
SubscriptionIDs
SubscriptionIDsLastModifiedDate
CloudKitLastSyncSinceInternetReachable
RootRecord
RootRecordType
ICCloudContextFetchRecordChangeOperationDidFinishNotification
ICCloudContextHasPendingOperationsDidChangeNotification
operationCount
ICCloudContextUnrecoverableErrorNotification
com.apple.reminders.cloud
Errors
com.apple.icloud-container.
com.apple.remindd.ICCloudContext.setPersonID
com.apple.remindd.ICCloudContext.setPersonIDSalt
com.apple.remindd.ICCloudContext.mergeLocalObjects
CloudKitUpdateCloudContextState
SYNC[FULL]
SYNC[APS]
SYNC[COREDATA]
PRIMARY-CLOUDKIT
unitTest_ICCloudContextPrimaryCloudKitAccountPersonIDSaltDidSetNotification
unitTest_ICCloudContextPrimaryCloudKitAccountPersonIDSaltDidFailToSetNotification
not syncing
v16@?0@"NSSet"8
com.apple.remindd.cloudkit.launch.pending.accounts.initializer
com.apple.remindd.cloudkit.launch.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver
v16@?0@"NSNotification"8
%@.%@
Saved personID changes on CK accounts upon primary CK account salt set (salt: %@)
Saved personID changes on CK accounts upon salt update error (error: %@)
Attempt to create CKContainer for Local/LocalInternal account: %@
{ %@ }
transactionAuthor
'%s' is unexpectedly nil
v32@?0@"REMCDAccount"8Q16^B24
syncDisabledByServer=%d accountAvailable=%d storeControllerSupportCloudKitSyncing=%d icSyncSetting=%d isDisabled=(%d %d) isSystemAvailableForSyncing=%d passedBuddy=%d pendingAccountInitializerCompleteOnLaunch=%d CKAccountStatusByAccountID=%@ ckContainerAccountIDs=%@
v32@?0@"NSString"8@"NSNumber"16^B24
v32@?0q8@"NSString"16@"NSError"24
v20@?0B8@"NSSet"12
^{os_state_data_s=I(?=b32I){os_state_data_decoder_s=[64c][64c]}[64c][0C]}16@?0^{os_state_hints_s=I*II}8
Cloud Context
%@ %@
operations
@"NSDictionary"8@?0
Syncing in progress
No Sync in progress
runtimeCloudKitSchemaVersion
accountIdentifier: %@ -> version: %ld
cloudKitSchemaCatchUpSyncLastSuccessDate
cloudKitSchemaCatchUpSyncLastSuccessBuildVersion
cloudKitSchemaCatchUpSyncSchedulingState
cloudKitSchemaCatchUpSyncLastScheduledDate
throttlingPolicy.processingInterval
minimumClientOSSupportedByServer
pollingInterval
reachabilityChangeSyncThrottleInterval
resultsLimitPerSyncOperation
numberOfRecordsToProcessBeforeSaving
fetchBatchSize
persistedSubscriptionIDsValidityPeriod
mergeLocalObjectsInitialRetryInterval
mergeLocalObjectsMaximumRetryCount
mergeLocalObjectsRetryStartOverThrottleInterval
cloudSchemaCatchUpSyncInitialRetryInterval
cloudSchemaCatchUpSyncMaximumRetryCount
fetchDatabaseChangesOperationPerScopePerAccountMaximumRetryCount
objectEffectiveVersionValidationFlushBatchSize
manualSortHintClientSideExpiration
manualSortHintLastAccessedUpdatePolicy
_systemBuildVersion
com.apple.remindd.cloudkit.sync.full[%@]
FULL
syncReason=%@
v32@?0@"NSString"8@"NSMutableSet"16^B24
deleting record zones
v32@?0@"NSArray"8@"NSArray"16@"NSError"24
DeleteRecordZones
Cloud syncing is not enabled.
v32@?0@"CKRecordID"8@"NSError"16^B24
v24@?0q8@"NSError"16
v32@?0@"NSString"8@"CKContainer"16^B24
v24@?0@"NSString"8^B16
%@ (%@, %@)
v32@?0@"CKRecord"8@"CKRecordID"16@"NSError"24
FetchUserRecord
v32@?0@"NSNumber"8@"NSArray"16^B24
FetchIndividualRecords
v24@?0@"CKRecordID"8d16
fetch records operation %@
v16@?0@"NSManagedObjectContext"8
v32@?0@"NSString"8@"NSArray"16^B24
v32@?0@"REMCDObject"8Q16^B24
DeleteShares
SyncAfterDeleteShare
B32@?0@"REMCDObject"8Q16^B24
v24@?0@"<ICCloudObject>"8@"CKRecord"16
Records with cross zone relationship are found. Will try to delete old records and upload new records. {count: %lu}
ModifyRecords
Oversized CloudKit Record
v32@?0@"CKOperation"8Q16^B24
@16@?0@"CKRecord"8
v32@?0Q8@"NSArray"16@"NSArray"24
v32@?0@"CKRecordID"8@"CKRecord"16@"NSError"24
v24@?0@"CKRecord"8d16
pushing record for account ID %@: %@
finished modify (save) operation with error(s)
v32@?0@8@"NSError"16^B24
Record counts[%lu] after sorting[%lu] in ICCloudContext were not equal
Fail to save context for %@
@16@?0@"NSOperation"8
You encountered a serious bug in remindd. Will you please file a Radar?
REM: %@
Please run 'remindtool diagnose --privacy normal' and attach the generated diagnose tar file to the radar (However, if you do not wish to disclose your reminders database, run `remindtool diagnose` instead so the database ie excluded).
Too many operations in ICCC operation queue. {count: %lu}
, operations: 
SaveRecordZones
com.apple.remindd.cloudkit.sync.coredata
v32@?0@"ACAccount"8Q16^B24
v32@?0@"NSString"8@"ICREMCDAccountMergeLocalObjectsContext"16^B24
Merge.Local
com.apple.remindd.cloudkit.merge.local.coredata
v32@?0@"NSString"8@"NSSet"16^B24
unset .daWasMigrated
merged objects
v24@?0@"NSDictionary"8@"RDStoreControllerManagedObjectContext"16
REMCKCloudState
v32@?0@"NSString"8@"NSMutableArray"16^B24
SaveChangedObjects
Asking to fetch changes for:
 account ID: %@, zone IDs: %@.
FetchRecordZoneChanges
record changed
v16@?0@"RDStoreControllerManagedObjectContext"8
v24@?0@"CKRecordID"8@"NSString"16
zone change token updated
v32@?0@"CKRecordZoneID"8@"CKServerChangeToken"16@"NSData"24
record zone fetch completion
v44@?0@"CKRecordZoneID"8@"CKServerChangeToken"16@"NSData"24B32@"NSError"36
fetch record zone changes completion
FetchDatabaseChanges
v16@?0@"CKRecordZoneID"8
v16@?0@"CKServerChangeToken"8
v28@?0@"CKServerChangeToken"8B16@"NSError"20
ckZoneOwnerName == %@
deleting shared zone
CKFetchDatabaseChangesOperation_%@_%@
DatabaseSubscription-%@
v24@?0@"CKDatabase"8@"NSError"16
SaveSubscriptions
com.apple.remindd.cloudkit.updateCloudContextState
Foreground
Background
reachable
not reachable
v24@?0@"CKOperation"8@"NSError"16
B32@?0@"NSError"8Q16^B24
Subscriptions
Retrying
zone changes
(name: %@, id: %@, inactive: %d)
(name: %@, id: %@, class: %@)
(name: %@, id: %@)
saving server change token
deleting server change token
deleting all server change tokens
v16@?0@"CKRecord"8
PollCloudKitWhenLaunchingAndBackgrounding
com.apple.remindd.cloudkit.accountsDidEnable.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver
com.apple.remindd.cloudkit.sync.aps
v24@?0@"CKRecordZone"8@"NSError"16
%@/%@
CloudSchemaCatchUpSync
ICCloudContext
cdAccount.remObjectID
[cdAccount.remObjectID.uuid.UUIDString isEqualToString:self.accountIdentifier]
B32@?0#8Q16^B24
(accountIdentifier: %@, didChooseToMigrate: %d, wasMigrated: %d, didNotFinishMigration: %d, needsToFetchUserRecord: %d, isInactive: %d)
reason
fetchedRecordCount
deletedRecordsCount
modifiedRecordCount
processedRecordCount
averageRecordsPerSecond
saveCount
duration
%.4f
REMCDReminder
isExecuting
isFinished
%@-%@
alarm
hashtagLabel
Attachments
Files/
Attachment-
Account-
REMCDFileAttachment
CloudConfigurationPath
ICCloudConfigurationChangedNotification
throttlingPolicy
throttlingPolicyResetIntervalSeconds
count
intervalSeconds
maxInlineAssetSizeBytes
maxAttachmentsPerNote
maxSubAttachmentsPerAttachment
pollingIntervalSeconds
fetchCacheCountLimit
maximumAttachmentSizeMB
minimumClientVersions
configurationVersion
launchAndSignificantTimeChangePollThrottleIntervalV2
cloudConfigurationDownloadThrottleInterval
apsDebouncerDefaultInterval
apsDebouncerMigrationInProgressInterval
apsDebouncerWatchDefaultInterval
apsDebouncerWatchMigrationInProgressInterval
accountChangedDebouncerInterval
extraneousAlarmsCleanUpTriggerReductionFactor
extraneousAlarmsDeleteCountLimit
extraneousAlarmsDeleteCountThreshold
extraneousAlarmsBackoffThrottleInterval
extraneousAlarmsThrottleInterval
extraneousAlarmsCollectorDebounceInterval
staledFileAttachmentCleanupDefaultThrottleInterval
staledFileAttachmentCleanupBackoffThrottleInterval
staledFileAttachmentCleanupRateReduceFactor
staledFileAttachmentCleanupPerRunDeleteLimit
imageDeduplicationDefaultThrottleInterval
imageDeduplicationBackoffThrottleInterval
imageDeduplicationRateReduceFactor
imageDeduplicationApproximatePerRunDeleteLimit
suggestedAttributesTrainingOverrides
suggestedAttributesHarvestingOverrides
templatePublicLinkOperationTimeoutInterval
alarmIDsLimitPerReminder
tapToRadarThrottlingInterval
housekeepingActivityMinimumDelay
9,0,0
https://configuration.apple.com/configurations/internetservices/cloudkit/reminders-1.0.plist
B32@?0@"NSURL"8Q16^B24
Normal
RemoteConfiguration
plist
CloudConfigurations
v12@?0B8
v32@?0@"NSData"8@"NSURLResponse"16@"NSError"24
coreBehavior
support
embedding
enabledOniOS
enabledOnmacOS
anchoredBubble
defaultWordDistanceScale
overrideLocalWordDistanceScale
relativeSupport
neighborsToConsider
month
list
assignments
REMCDAuxiliaryReminderChangeInfo
REMCDCalDAVNotification
REMCDObject
<%@ %@>
<%@ %@ %@>
REMCDRecurrenceRule
reminderIDsOrdering
reminderIDsMergeableOrdering_v2_JSON
sharees.count: %lu, sharingStatus: %d
<ServerChangeToken %@>
REMCDAlarmTimeIntervalTrigger
REMCDChangeTrackingState
REMCDHashtag
parentList
com.apple.remindd.RDAccountPropertiesErrorDomain
REMCDReplicaManager
B32@?0@"NSManagedObject"8Q16^B24
resolutionTokenMapData
Inserting
Updating
B16@?0@"REMCDObject"8
REMCD
Failed to create REMObjectID: REMCDObject.identifier or REMCDObject.entity.name is nil.
com.apple.reminders
Abstract method called -[%@ %@]
com.apple.reminderkit
default
cccc
SELF in %@
Deleted
Imported
ResolutionTokenMap
MinimumSupportedAppVersion
com.apple.reminders.cloud.failure-counts
MethodCalledOnAbstractClass
Should not call +allCloudObjectsPredicate on the abstract 'REMCDObject'
ckDirtyFlags > 0
Cross-zone parent record relationship found. Resetting ckServerRecord. { class: %@, recordID: %@, parentClass: %@, parentRecordID: %@ }
recursivelyFixCrossZoneRelationshipWithVisitedMap
Placeholder %@ { %@ } forcePushToCloud
Placeholder forcePushToCloud
TemporaryAssetFiles
B24@?0@"NSURL"8@"NSError"16
isSharedViaICloud
cloudAccount.accountType
ckServerShare
ckServerRecord
parentCloudObject.isSharedViaICloud
serverShareCheckingParent
serverShare
com.apple.reminders.cloud.versions-by-operation
com.apple.reminders.cloud.deleted-by-this-device
objectIdentifier == %@
needsToBePushedToCloud
needsToBeDeletedFromCloud
hasAllMandatoryFields
failedToSyncCount
numberOfPushAttemptsToWaitCount
REMCDAudioAttachment
FRZC
CreateFetchZoneChanges
deleteSharesForObjectsFetchAndCompletion
FetchCompletion
FetchDatabaseChangesCompletion
FetchZoneChangesCompletion
FinishOperations
ProcessCompletion
ProcessCompletionForOperations
ProcessDirtyObjects
ProcessLocalObjects
ProcessObjectsForContextDidSave
ProcessObjectsForReachabilityChanged
ProcessObjectsForRetryOperations
CFZC
DSOFC
FDCC
FZCC
POCS
PORC
PORO
personIDSalt_v1
type IN %@
REMCDAttachment
REMCDImageAttachment
lists
REMCDAuxiliaryReminderChangeDeleteInfo
RDStoreControllerMigrator_JSONProperties
changedEntity
You must override %@ in a subclass
v32@?0@"NSManagedObjectContext"8@"REMCDChangeTrackingState"16^@24
Failed to find entity name in -fetchHistoryAfterToken:entityName.
%K IN %@
Attempting to get errorChangeSet with nil error.
clientName == %@ AND accountIdentifier == %@
object
(none)
v32@?0@"CKRecordZoneID"8@"CKFetchRecordZoneChangesConfiguration"16^B24
serverChangeToken
backingCDObject
v32@?0@8Q16^B24
AccountsDidChange
ApplicationWillEnterForeground
CloudKitAccountChanged
CloudSchemaCatchUpSyncBackgroundActivity
ExtraneousAlarmsCollector
InitWithStoreController
Poll
PushNotification
AccountsDidChangeCancelEverything
ReachabilityChanged
DeleteRecordZonesWithZoneIDs
RetryCKFetchDatabaseChangesOperation
RetryCloudSchemaCatchUpSync
RetryMergeLocalObjects
SyncAfterAcceptShare
TestInitialSync
UnrecoverableError
SyncInterface(AppDelegate)
SyncInterface(DebugMenu)
SyncInterface(RemindtoolCloudKitDeleteAll)
SyncInterface(RemindtoolCloudKitRestart)
SyncInterface(RemindtoolCloudKitSync)
SyncInterface(SignificantTimeChange)
SyncInterface(UpdateAccounts)
REMCDAlarmDateTrigger
v32@?0#8Q16^B24
REMCDAlarm
B32@?0@8Q16^B24
<%@ 
UNKNOWN_IDENTIFIER
%@ = %@
 %@=%@
v32@?0@"NSString"8@16^B24
REMCDAlarmLocationTrigger
account == %@
zoneName == %@
ownerName == %@
databaseScope == %ld
zoneName
REMCDAlarmVehicleTrigger
REMCDMigrationState
The object we want to share is not found (objectID: %@}
v24@?0@"CKShare"8@"NSData"16
Failed to create share for object {object: %@}
Trying to populate share %@ with no record ID for %@
populateShare with nil recordID
Saving Share
SaveShare
FetchShare
shareURL
v32@?0@"CKShareMetadata"8@"CKShare"16@"NSError"24
FetchRecordForAcceptedShare
AcceptShare
RDStoreControllerManagedObjectContextDidMarkExtraneousAlarmsPendingToSyncUpDeleteNotification
RDStoreControllerManagedObjectContextNotificationTransactionAuthorKey
com.apple.remindd.SharedToMeList.pinnedStateDidBecomeStale
com.apple.remindd.SharedToMeList.mostRecentTargetTemplateIdentifierByCurrentUserDidBecomeStale
com.apple.reminder.list.name.siri_data_changed
nil author
destinationEntity.name
q24@?0@"NSManagedObjectID"8@"NSManagedObjectID"16
%@[%@] - %@
v32@?0@"NSManagedObjectID"8Q16^B24
sha512Sum
REMCDAccount
REMCDSharee
B32@?0@"CKRecord"8Q16^B24
RDStoreControllerDidEnableAccountsNotification
RDStoreControllerDidEnableAccountsNotificationAccountStoragesKey
RDStoreControllerDidDisableAccountsNotification
RDStoreControllerDidDisableAccountsNotificationAccountStoragesKey
RDStoreControllerREMAccountPropertiesDidUpdateNotification
RDStoreControllerDidRemoveAccountStoresNotification
RDStoreControllerAccountIdentifier
local
Data-
Stores/
Stores-Backup/
Stores-StagedMigration/
RDMarkedForDeletion
%@%@.sqlite
%@--%@.sqlite
loadAccountStoresFromDisk
sqlite
lastPathComponent
com.apple.remindd.RDStoreController.addValidatedStoresToAccountStoreMapWithStores
com.apple.remindd.RDStoreController.validateAccounts
UUIDString
sqlite-wal
sqlite-shm
v24@?0@"NSPersistentStore"8^B16
com.apple.remindd.RDStoreController.storesForAccounts
removeAccountStoresWithIdentifiers
com.apple.remindd.RDStoreController.fileIOWorker
Failed to create mlModelsContainerURL {url: %@}
(nil)
nukeData
invalidateStoreConnections
com.apple.RDStoreController.purgeDeleted
markedForDeletion == YES
com.apple.RDStoreController.ckFetchUser
merged migration state from user record
com.apple.RDStoreController.ckZoneNotFound
cleared server records for all cloud objects
com.apple.RDStoreController.ckSharedZoneWasDeleted
deleted all local database objects after shared zone was deleted
com.apple.RDStoreController.ckDeleteZone
managedObjectContextDidSave(REMCDAccount-changed) {self: %p, keys: %@}
com.apple.remindd.RDStoreController.observePrimaryCloudKitAccountPersonIDSaltChanges
accountStore.%@
{storeID: %@, URL: %@, connectionPoolMaxSize: %@, stagedMigrations: %@}
{storeID: %@, URL: %@}
accountExternalIDsMap.%@
accountStorageCache.keys
accountStorageCache.hasAllGenericAccounts
containerURL
isolated
primaryActiveCKAccountID
remCurrentRuntimeVersion
supportsAccountUtils
supportsAlarmEngine
supportsTimelineEngine
supportsAssignmentNotificationEngine
supportsCoreSpotlightIndexing
supportsSyncingToCloudKit
supportsApplicationShortcuts
supportsLocalInternalAccount
supportsSuggestedAttributes
supportsSyncActivityNotificationEngine
supportsSharedInlineTagAutoConvertEngine
com.apple.RDStoreController.logStoresDirectoryContents
%K == %@
Cannot fetch CD account with identifier %@
ERRORS
account[%@].%@.count
<%@ %@
 changeTag=%@
 share=%@
REMCDURLAttachment
REMCDList
<batchInterval=%d numberOfBatches=%d>
RDStoreControllerMigrator_PopulateDefaultValues
%K == NULL
%@.%@(%@)
kNetworkReachabilityChangedNotification
(ckIdentifier: %@, accountIdentifier: %@)
ckIdentifier IN %@
REMCDAlarmTrigger
REMCDObjectTreeProcessor: Unsupported traversal order {%ld}
RDStoreControllerMigrator_CKParentReminderIdentifier
%K != NULL
REMCDAssignment
55CF9DED-2785-46E1-9991-04987805FEE7
Setting account .personIDSalt {accountID: %@, salt: %@, resolutionToken: %@}
REMCDSharedToMeReminderPlaceholder
RDStoreControllerMigrator_DisplayDate
LAUNCH remindd {pid: %d}
INSearchForNotebookItemsIntent
assignedDate
ckAssigneeIdentifier
ckOriginatorIdentifier
owningReminderIdentifier
status
publicLinkURLUUID
disabled
badgeEmblem
color
publicLinkExpirationDate
savedReminders
sortingStyle
file
image
Sentence2Vec
UniversalGrammar
FilteredStopWords
acknowledgedDate
alarmUID
dueDateResolutionTokenAsNonce
originalAlarmUID
triggerID
alarmID
trigger
assigneeID
originatorID
childListIDsToUndelete
childSmartListIDsToUndelete
parentAccountID
parentListID
reminderIDsToUndelete
sharedOwnerID
reminderIDsMergeableOrdering
remindersICSDisplayOrderChanged
externalIdentifier
externalModificationTag
daSyncToken
daPushKey
daExternalIdentificationTag
daBulkRequests
daDisplayOrder
daIsEventOnlyContainer
daIsReadOnly
daIsImmutable
daIsNotificationsCollection
minimumSupportedVersion
isGroup
lastUserAccessDate
showingLargeAttachments
reminderIDsMergeableOrderingData
reminderIDsOrderingHints
templateID
sharedOwnerName
sharedOwnerAddress
sharingStatus
sharees
calDAVNotifications
pinnedDate
listIDsToUndelete
smartListIDsToUndelete
listIDsMergeableOrdering
listsDADisplayOrderChanged
listIDsMergeableOrderingData
pinnedListsManualOrdering
templatesManualOrdering
markedForRemoval
personID
personIDSalt
didChooseToMigrate
didChooseToMigrateLocally
didFinishMigration
persistenceCloudSchemaVersion
inactive
daConstraintsDescriptionPath
daAllowsCalendarAddDeleteModify
daSupportsSharedCalendars
daWasMigrated
debugSyncDisabled
fileSize
fileURL
isTemporaryFileURL
modifiedDate
recurrenceEnd
frequency
interval
firstDayOfTheWeek
daysOfTheWeek
daysOfTheMonth
daysOfTheYear
weeksOfTheYear
monthsOfTheYear
setPositions
width
height
parentReminderID
subtaskIDsToUndelete
hashtagIDsToUndelete
siriFoundInAppsUserConfirmation
daCalendarItemUniqueIdentifier
titleDocumentData
titleDocument
completed
priority
lastModifiedDate
startDateComponents
dueDateComponents
timeZone
notesDocumentData
notesDocument
attachments
alarms
contactHandles
importedICSData
userActivity
siriFoundInAppsData
lastBannerPresentationDate
primaryLocaleInferredFromLastUsedKeyboard
configuration
unsavedManualOrdering
dateComponents
smartListType
manualOrdering
filterData
event
structuredLocation
proximity
timeInterval
displayName
firstName
middleName
lastName
namePrefix
nameSuffix
nickname
address
accessLevel
uuidString
hostURL
nonExistentRelationship
nonExistentValue
mostRecentTargetTemplateIdentifier
mostRecentPublicLinkUpdateRequestDate
publicLinkConfigurationData
publicLinkCreationDate
publicLinkLastModifiedDate
sourceListIDURL
reminderIDsMergeableOrderingAsset
reminderIDs
reminderIDsAsset
alarmIDs
attachmentIDs
assignmentIDs
dueDate
hashtagIDs
notesDocumentAsset
recurrenceRuleIDs
titleDocumentAsset
parentSavedReminderIdentifier
template
listIDsMergeableOrderingAsset
sharedListIDsToOwnerNames
firstOccurrenceCreationDate
uuidForChangeTracking
launch
store did change
sharedToMeReminderCKIdentifier
SignificantTimeChangeNotification
effectiveMinimumSupportedAppVersion
minimumSupportedAppVersion
resolutionTokenMap_v3_JSONData
MERGE.LOCAL: The local reminder we are adding to the CK list is unexpectedly having non-nil primitiveCKZoneOwnerName: 
File
Image
fileName
metadataAsset
alarm.reminder.identifier
encodedSavedReminders
endDate
occurrenceCount
Reminders 
Lembretes 
Recordatoris 
Podsjetnici 
ipom
nky 
mindelser 
Herinneringen 
Muistutukset 
Erinnerungen 
keztet
Pengingat 
Promemoria 
Peringatan 
minnelser 
Przypomnienia 
Mementouri 
Pripomienky 
Recordatorios 
msat
lar 
c nh
Where are my reminders?
Onde est
o meus lembretes?
On s
n els meus recordatoris?
Gdje su moji podsjetnici?
Kde jsou m
ipom
nky?
Hvor er mine p
mindelser?
Waar zijn mij herinneringen?
Miss
 muistutukseni ovat?
 sont mes rappels
 sont mes rappels?
Wo sind meine Erinnerungen?
Hol vannak az eml
keztet
Di mana pengingat saya?
Dove sono i miei promemoria?
Mana peringatan saya?
Hvor er p
minnelsene mine?
Gdzie s
 moje przypomnienia?
Onde est
o os meus lembretes?
Unde sunt mementourile mele?
Kde s
 moje pripomienky?
nde est
n mis recordatorios?
Var 
r mina p
minnelser?
msat
m nerede?
i nh
The creator of this list has upgraded these reminders.
O criador desta lista atualizou esses lembretes.
usuari que ha creat aquesta llista ha actualitzat els recordatoris.
Autor ovog popisa nadogradio je podsjetnike.
rce tohoto seznamu aktualizoval tyto p
ipom
nky.
Opretteren af denne liste har opdateret p
mindelserne.
De maker van deze lijst heeft deze herinneringen bijgewerkt.
n listan luoja on p
ivitt
nyt n
 muistutukset.
Le cr
ateur de cette liste a actualis
 ces rappels.
Der Ersteller dieser Liste hat diese Erinnerungen aktualisiert.
A lista k
je friss
tette ezeket az eml
keztet
ket.
Pembuat daftar tersebut telah meningkatkan pengingat ini.
Il creatore dell
elenco ha aggiornato i promemoria.
Pencipta senarai ini telah mengemas kini peringatan ini.
Oppretteren av denne listen har oppgradert disse p
minnelsene.
rca listy uaktualni
 przypomnienia
O criador desta lista atualizou estes lembretes.
Creatorul acestei liste a f
cut upgrade pentru aceste mementouri.
Autor tohto zoznamu aktualizoval tieto pripomienky.
El usuario que ha creado esta lista ha actualizado estos recordatorios.
Personen som skapade listan har uppgraderat dessa p
minnelser.
Bu listeyi olu
turan ki
i bu an
msat
kseltti.
o danh s
ch n
ng c
p nh
ng l
i nh
latitude
longitude
radius
locationUID
topLevelSavedReminderIdentifiers
subtaskIdentifiersByTopLevelSavedReminderIdentifier
savedReminderByIdentifier
savedURLAttachmentsBySavedReminderIdentifier
eTag
hintDataExcludingRemindersInLocalAccountAsAsset
hintDataExcludingRemindersInLocalAccountAsBytes
hintDataIncludingRemindersInPrimaryAccountOnlyAsAsset
hintDataIncludingRemindersInPrimaryAccountOnlyAsBytes
lastAccessed
listType
serializationVersion
com.apple.UNNotificationDismissActionIdentifier
com.apple.remindd.reminderAlarm.debugDismiss
com.apple.remindd.reminderAlarm.markAsCompleted
com.apple.remindd.reminderAlarm.snoozeOneHour
com.apple.remindd.reminderAlarm.snoozeOneDay
com.apple.remindd.reminderAlarm.snoozeToNextThirds
com.apple.remindd.reminderAlarm.snoozeToNextWeekend
com.apple.remindd.siriFoundInApps.addToReminders
com.apple.remindd.assignmentNotification.viewAssignmentInList
com.apple.remindd.assignmentNotification.declineAssignment
com.apple.remindd.sharedListUpdateNotification.viewRemindersInList
REMCDTemplateOperationQueueItem
com.apple.remindd.suggestedAttributesAutoTrainer
com.apple.remindd.ICCloudConfigurationUpdater
com.apple.remindd.ICCloudSchemaCatchUpSyncController
com.apple.remindd.RDHousekeepingActivityScheduler
com.apple.remindd.RDExtraneousAlarmCleaner
com.apple.remindd.UnitTests
complete
pendingWork
noWork
error
fileAsset
savedReminder
attachmentTypeRawValue
Date
Location
TimeInterval
Vehicle
contactLabel
mapKitHandle
referenceFrameString
routing
ckServerShareData
Remindd Launch
getrlimit(RLIMIT_NOFILE) = (%{public}s, %{public}s)
DataAccess.Requests.Channel
v16@?0@"<OS_xpc_object>"8
com.apple.notifyd.matching
Not Running DataAccess
DataAccess.Requests.Queue
Running DataAccess
com.apple.alarm
v32@?0Q8Q16Q24
Could not load some of our databases due to disk full. Going to run a barebones daemon.
Running in the buddy setup user. Going to run a barebones daemon.
BarebonesDaemon dropping XPC RDDynamicXPCActivity {identifier: %{public}s}
com.apple.remindd.xpcEvents
os_transaction INIT {name: com.apple.remindd.xpcEvents}
os_transaction RELEASE {name: com.apple.remindd.xpcEvents}
Unknown RDFreeSpaceResult value
remindd couldn't get the requested free space to load account stores, will terminate after {delay: %ld}
RDStoreController.requestFreeSpaceToLoadAccountStores did not succeed {result: %lu, requested: %llu, available: %llu}
Notifying stores must refresh due to relaunching upon requested free space to load account stores
remindd is now exiting in response to requested free space to load account stores {requested: %llu, available: %llu}
RDStoreController.requestFreeSpaceToLoadAccountStores completes with .success but still doesn't have enough space {requested: %llu, available: %llu}
remindd raised signal (%d) in try to terminate asap
remindd is now exiting after failure to get requested disk space to load account stores in hope to get relaunched in some better future
BarebonesDaemon (DiskFull) dropping XPC RDDynamicXPCActivity {identifier: %{public}s}
Unexpected eventHandler queue {self.queue: %@, queue: %@}
Replacing existing eventHandler in Reader. This is usually a programmer error. {identifier: %s}
Dropping reader message because target has been deallocated {identifier: %s}
remindd/RDXPCEventStream.swift
There must be exactly one XPCEventStream instance per run
Triggered proactiveExitStream.eventHandler. Exiting... {name: com.apple.remindd.xpcEvents}
Contact Interaction
RDSharedInlineTagAutoConvertEngineAssembly is disabled because supportsSharedInlineTagAutoConvertEngine feature flag is off
RDSyncActivityNotificationEngine is disabled because sharedListNotifications feature flag is off
Widget refresh disabled because not supported by store controller
Suggested attributes disabled because not supported by store controller
suggestedAttributesAutoTrainer
Application shortcut engine is disabled because store controller does not support application shortcuts
RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler is disabled because store controller does not support it
RDTemplateOperationQueue is disabled because store controller does not support it
com.apple.remindd.RDPublicCloudDatabaseController
RDStalePinnedListsEventHandler is disabled because store controller does not support it
RDHashtagLabelUpdater is disabled because store controller does not support it
Assignment notification engine is disabled because store controller does not support it
AssignmentNotifEngine
Timeline engine is disabled because store controller does not support it.
Alarm and today engines are disabled because store controller does not support them
com.apple.remindd.today-notification
Starting RDTodayNotificationAssembly
todayNotificationEngine
com.apple.remindd.RDAlarmEngineAssembly
com.apple.remindd.time-alarm
Starting alarm engine assembly
os_transaction INIT {name: com.apple.remindd.RDAlarmEngineAssembly}
notificationConsumer
Failed to register notify token for _REMStoreShouldNotifyOfInteractionWithPeopleNotificationName {status: %u}
Starting RDAssignmentNotificationEngineAssembly
refreshFromLastConsumed
refreshFromLastConsumedOnLaunch
com.apple.remindd.assignmentNotificationEngine.crashDetected
AssignmentNotificationEngine
handleIncompleteOperationQueueItems
handleIncompleteOperationQueueItemsOnLaunch
com.apple.remindd.RDTemplateOperationQueue.crashDetected
TemplateOperationQueue
CloudSchemaCatchUpSyncController: q_repairSchedulingStateIfNeeded(): schedulingState is .scheduled but we don't have a lastScheduledDate, force re-scheduling now
CloudSchemaCatchUpSyncController: q_repairSchedulingStateIfNeeded(): It had been too long since we scheudled the background activity and catch up sync still hasn't ran yet, force running the activity manually now {timeout: %{public}f, lastScheduledDate: %{public}s}
CloudSchemaCatchUpSyncController: SchedulingState is not .scheduled when trying to call q_syncRunScheduledActivity(), bailing out {schedulingState: %{public}ld}
CloudSchemaCatchUpSyncController: Unexpected nil RDICCloudSchemaCatchUpSyncPerformer (ICCloudContext), bailing out from q_syncRunScheduledActivity()
com.apple.remindd.ICCloudSchemaCatchUpSyncController.q_syncRunScheduledActivity
os_transaction INIT {name: com.apple.remindd.ICCloudSchemaCatchUpSyncController.q_syncRunScheduledActivity}
CloudSchemaCatchUpSyncController: Running scheduled background activity...
CloudSchemaCatchUpSyncController: backgroundScheduler is unexpectedly not instantiated yet when calling q_scheduleBackgroundActivity(), bailing out
CloudSchemaCatchUpSyncController: SchedulingState is not .unset so no need to schedule another one {schedulingState: %{public}ld, hasPendingActivity: %{bool,public}d}
CloudSchemaCatchUpSyncController: Updated background activity (xpcActivity) criteria
CloudSchemaCatchUpSyncController: Already having a pending activity with the background scheduler (xpcActivity) so no need to schedule another one {schedulingState: (%{public}ld)}
CloudSchemaCatchUpSyncController: Instantiated a background scheduler (xpcActivity) upon q_start
CloudSchemaCatchUpSyncController: backgroundScheduler has already instantiated, duplicate call to q_start?
CloudSchemaCatchUpSyncController: Starting
RDICCloudExtraneousAlarmsCollector
 RDSyncActivityEngine: Starting in demo mode
com.apple.remindd.RDSyncActivityEngine.JournalUpdatesSubscription
com.apple.remindd.RDSyncActivityEngine.AccountSignInOrOutSubscription
deleteExtraneousAlarms
com.apple.remindd.extraneousAlarmCleaner.crashDetected
extraneousAlarmCleaner
Notifying stores did change
Sandbox: realpath(%s) failed %{public}d (%s)
Sandbox: confstr() for type %{public}d failed %{public}d (%s)
Sandbox: TMPDIR=%s
Sandbox: _set_user_dir_suffix() failed %{public}d (%@)
com.apple.remindd.launch
os_transaction INIT {name: com.apple.remindd.launch}
os_transaction RELEASE {name: com.apple.remindd.launch}
CKRecordValue
RDPersistentStoreLookup
@"NSPersistentStore"24@0:8@"NSString"16
OS_os_transaction
REMUserDefaultsObserveToken
SGSuggestionsServiceRemindersProtocol
v32@0:8Q16@?24
v32@0:8@"SGRecordId"16@?<v@?@"NSError">24
v32@0:8@"SGReminder"16@?<v@?@"NSError">24
v32@0:8Q16@?<v@?@"NSArray"@"NSError">24
v32@0:8@"NSString"16@?<v@?@"NSString"@"NSError">24
v32@0:8@"NSString"16@?<v@?@"NSError">24
_TtP7remindd32RDAccountInitializerUserDefaults_
@16@0:8
acAccountIdentifiersToMigrateInactivatedCalDavData
T@"NSArray",N,C
acAccountIdentifierToMergeLocalDataIntoSyncData
T@"NSString",N,C
@"NSArray"16@0:8
v24@0:8@"NSArray"16
@"NSString"16@0:8
v24@0:8@"NSString"16
ICCloudSchemaCatchUpSyncSchedulingStateStorage
schedulingState
Tq,N
lastScheduledDate
T@"NSDate",N,C
debugForceSupportBackgroundScheduling
@"NSDate"16@0:8
v24@0:8@"NSDate"16
ICCloudConfigurationExtraneousAlarm
d16@0:8
@"NSNumber"16@0:8
RDAccountPropertiesObserving
uuid
T@"NSUUID",N,R
callbackQueue
T@"OS_dispatch_queue",N,R
T@"<_TtP7remindd20ObservingAccountInfo_>",N,R
propertyName
T@"NSString",N,R
@"OS_dispatch_queue"16@0:8
@"<_TtP7remindd20ObservingAccountInfo_>"16@0:8
ICCloudConfigurationDownloadable
_TtP7remindd20ObservingAccountInfo_
T@"REMObjectID",N,R
@"REMObjectID"16@0:8
DADREMUserNotificationPresenting
v40@0:8@16@24@?32
v40@0:8@"NSString"16@"<DADREMUserNotificationContent>"24@?<v@?@"NSError">32
@"<DADREMUserNotificationContent>"24@0:8@"REMList"16
OS_xpc_object
NSSecureCoding
supportsSecureCoding
NSFetchRequestResult
BMTaskSpecificEventProvider
@32@0:8@16^@24
@"NSArray"32@0:8@"NSSet"16^@24
v24@0:8@"NSNumber"16
REMDAChangedIdentifierResult
CNKeyDescriptor
REMDAChangedModelObjectResult
REMNullableObjectIDProviding
@"REMObjectID"24@0:8@"NSUUID"16
cdEntityName
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
hash
T#,N,R
debugDescription
B24@0:8@"Protocol"16
_SGSuggestionsServiceBaseProtocol
_SGSuggestionsServiceFoundInAppsProtocol
v36@0:8@16C24@?28
v36@0:8@"SGRecordId"16C24@?<v@?@"NSString"@"NSError">28
NSCoding
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
NSCopying
@24@0:8^{_NSZone=}16
_SGSuggestionsServiceMetricsProtocol
v44@0:8i16@20@28@36
v40@0:8@16@24@32
v32@0:8@16S24S28
v44@0:8i16@"SGRecordId"20@"NSString"28@"NSString"36
v40@0:8@"SGRecordId"16@"NSString"24@"NSString"32
v32@0:8@"NSString"16S24S28
v32@0:8@"SGRecordId"16S24S28
B32@?0@8q16^B24
[implSort] pre-sort: moved object {objectID: %@, from: %ld, to: %ld}
[implSort] pre-sort: we have more than 1 sorting hints but we currently only support to accomate 1 {count: %ld}
[implSort] Objects are already in correct order. Will skip sorting
[implSort] Performing full CD mutableOrderedSet.sort {total.count: %ld}
[implSort] _forceDisableFullRemindersSorting = YES so we will abort from running mutableOrderedSet.sort now.
[implSort] LOOKATME: Pre-sorted but full CD mutableOrderedSet.sort still needed.
[implSort] Unexpected CD object in ordered set {object: %s}
[implSort] Count of CD objects is not same as that of the Ordering Map {allCDObjects#: %ld, orderingIndexMap#: %ld}
relationship contains non-REMCDObject objects
could not get a sorting order from object
Invalid UUID found in REMCRMergeableOrderedSet<NSString> when converting it to REMCRMergeableOrderedSet<REMObjectID> {uuidString: %@}
submitAllHubbleKPIs
StartMigrationRequest.Credential
StartMigrationResponse.Details
StartMigrationResponse.Error
MigrateRequest.User
MigrateResponse.Details
MigrateResponse.Error
MigrateResponse.NextStep
UnmigrateResponse.Details
UnmigrateResponse.Error
_TtC7remindd29TantorMigrationAPIAsyncClient
invocable
_TtCV7remindd21StartMigrationRequestP33_482F8E23FC1B6897A29C6FDC02F90B4F13_StorageClass
_source
_disableCache
_TtCV7remindd22StartMigrationResponseP33_482F8E23FC1B6897A29C6FDC02F90B4F13_StorageClass
_state
_result
_log
_TtCV7remindd14MigrateRequestP33_482F8E23FC1B6897A29C6FDC02F90B4F13_StorageClass
_options
_userInitiated
_simulatedError
_TtCV7remindd15MigrateResponseP33_482F8E23FC1B6897A29C6FDC02F90B4F13_StorageClass
_nextStep
_logs
_TtCV7remindd17UnmigrateResponseP33_482F8E23FC1B6897A29C6FDC02F90B4F13_StorageClass
message
success
time_elapsed
logs
NONE
defined
is_terminated
next_invocation_in_seconds
invocation_count
failure_count
retry_count
is_observer
lists_migrated
reminders_migrated
state
next_step
dsID
partition
DRY_RUN
DISABLE_SHARING
SAVE_ORIGINAL_JSON
USER_INITIATED
NO_CLEANUP
user
archivePath
embeddedTestData
user_initiated
simulated_error
baseURL
hostname
mmeAuthToken
credential
disableCache
RelevantShortcutsProcessor
com.apple.remindd.RDTimelineEngine
newCloudObject: %{public}s with account: %{public}s having nil ckIdentifier
OwningReminderIdentifier
Cannot convert to a UUID from CKRecord to owningReminderIdentifier {ckIdentifier: %s}
EncryptedOriginatorIdentifier
Originator object (REMCDSharee) does not exist (yet) when merging data from Assignment CKRecord: {ckIdentifier: %s, originatorID: %s}
EncryptedAssigneeIdentifier
Assignee object (REMCDSharee) does not exist (yet) when merging data from Assignment CKRecord: {ckIdentifier: %s, assigneeID: %s}
Reminder is marked for deletion but assignment is not {assignmentID: %{public}s, reminderID: %{public}s}
Fixing broken references for assignment {assignmentID: %{public}s, reminderID: %{public}s}
MERGE.LOCAL: Perhaps you should not try to call cleanUpAfterLocalObjectMerge() for %s.
B24@0:8@16
@40@0:8@16@24@32
Trying to merge CKRecord to an object without MOC
newOrExistingObject with reference recordID %{public}@ with nil accountCKIdentfiier
MERGE.LOCAL: Perhaps you should not try to call merge(withLocalObject:) for %s.
MERGE.LOCAL: Perhaps you should not try to call existingLocalObjectToMerge() for %s.
ckIdentifier == %@
_TtC7remindd43RDTemplateOperationRevokeTemplatePublicLink
templateObjectID
publicCloudDatabaseController
isUnitTestMode
%{public}s: Failed to fetch template {templateObjectID: %{public}@, error: %{public}s, elapsedSeconds: %f}
%{public}s: Start execution {templateObjectID: %{public}@}
%{public}s: Failed to delete content of template's public link {templateObjectID: %{public}@, recordName: %{public}s, error: %{public}s, elapsedSeconds: %f}
%{public}s: Deleted content of template's public link {templateObjectID: %{public}@, recordName: %{public}s, elapsedSeconds: %f}
%{public}s: Failed to reset template's public link to nil {templateObjectID: %{public}@, error: %{public}s, elapsedSeconds: %f}
%{public}s: Reset template's public link to nil {templateObjectID: %{public}@, elapsedSeconds: %f}
%{public}s: Finished execution {templateObjectID: %{public}@, elapsedSeconds: %f}
%{public}s: Attempted to call completion more than once
fetching manual sort hint object ID returned more than one result {listType: %s listID: %s, count: %s}
Deleting manual sort hints for listType (
) is not supported
DELETE(-soft) manual sort hint (listType: %hd, listID: %{public}s, identifier: %{public}s)
Attempted to compute 'REMCDManualSortHint.ListType.supportsDeleting()' for unknown 'listType'. {listType.rawValue: %hd}
Deleting manual sort hint for listType (
_TtC7remindd29RDApplicationShortcutAssembly
applicationShortcut
Failed to initialize RDPublicTemplate from ckRecord because ckRecord.recordType is not "
" {ckRecord.recordType: 
PublicLinkURLUUID
Failed to initialize RDPublicTemplate from ckRecord because ckRecord["publicLinkURLUUID"] is not a non-nil String
PublicLinkExpirationDate
Failed to initialize RDPublicTemplate from ckRecord because ckRecord["publicLinkExpirationDate"] is not a non-nil Date
Failed to initialize RDPublicTemplate from ckRecord because ckRecord["name"] is not a non-nil String
Failed to initialize RDPublicTemplate from ckRecord because ckRecord["savedReminders"] is not a non-nil CKAsset
Failed to initialize RDPublicTemplate from ckRecord because fileURL of CKAsset for saved reminders is nil
RDJSONDecoding can't encode input string as utf8 data {class: %s}
RDJSONDecoding can't decode JSON {class: %s, error: %s}
Invalid JSONSerialization.jsonObject return value {class: %s}
SavedReminderOfPublicTemplate
REMCDPublicTemplate
_TtC7reminddP33_38651BD03EE367A00C80EB4E8CAA4E4629ChangeTrackingAccountProvider
rem_accountObjectID
accountDescription
T@"REMObjectID",N,&,Vrem_accountObjectID
_TtC7remindd30RDAssignmentNotificationEngine
babysitterOperationRefreshFromLastConsumed
babysitterOperationRefreshFromLastConsumedOnLaunch
analyticsCrashDetected
userNotificationCenter
storeControllerNotificationCenter
daemonController
manualTestRun
storeControllerObservationToken
started
cloudKitAccountsDidChangeSubscriptions
currentUserShareParticipantIDsOverrideByListID
_TtCC7remindd30RDAssignmentNotificationEngine13BabysitTarget
RDAssignmentNotificationEngine: Completing action handler by calling completionHandler now.
RDAssignmentNotificationEngine doesn't expect to receive actions of this type. {type: %s, response: %@}
RDAssignmentNotificationEngine: Unexpected action %s for notification type .assignmentNotification
RDAssignmentNotificationEngine: Error trying to retrieve reminder {reminderIDs: %s, error: %s}
v16@?0@"NSError"8
RDAssignmentNotificationEngine: Processing assignment notification response {actionIdentifier:%s, reminderIDs: %s}
RDAssignmentNotificationEngine: Updated reminder successfully. {actionIdentifier: %s, reminderIDs: %s}
RDAssignmentNotificationEngine: Save error. Failed to save updates from notification response {error: %s , reminderIDs: %s, actionIdentifier: %s}
com.apple.remindd.assignmentNotificationEngine.babysitter
RDAssignmentNotificationEngine: List has no sharee, huh? {listID: %{public}@}
RDAssignmentNotificationEngine: Can't find any item to populate, this is not expected {map: %s}
com.apple.remindd.assignmentNotification.
RDAssignmentNotificationEngine: Populating assignment notification content with all nullified originators {listID: %{public}@, assignedCount: %ld, selected: %{public}s}
RDAssignmentNotificationEngine: Populating assignment notification content {listID: %{public}@, assignedCount: %ld, originatorCount: %ld, selected: %{public}s}
com.apple.remindd.userAction
Posted Assignment Notification
RDAssignmentNotificationEngine: Posted Assignment notification {listID: %{public}@, count: %ld}
RDAssignmentNotificationEngine: Unable to post Assignment notification {error: %s, listID: %{public}@, count: %ld}
RDAssignmentNotificationEngine: Programming fault: {%s}
Unknown combination of number of assignments and orignators.
You must have at least 1 assignment and 1 originator.
RDAssignmentNotificationEngine: Couldn't match the sharee object of the originator and it is not nullified {reminderID: %{public}@, assignment: %{public}s}
RDAssignmentNotificationEngine: The originator has absolutely no hint of how to display a formatted name... {assignment: %{public}s}
RDAssignmentNotificationEngine: No since-token from change tracking {account: %{public}s}
RDAssignmentNotificationEngine: No updated change token from change tracking (no changes) {account: %{public}s, since: %{public}@}
RDAssignmentNotificationEngine: No inserted assignments found in change {since: %{public}@, upTo: %{public}@}
RDAssignmentNotificationEngine: Error ocurred when fetching inserted assignments' reminders {error: %s}
RDAssignmentNotificationEngine: Processing change set {account: %{public}s, since: %{public}@, upTo: %{public}@}
RDAssignmentNotificationEngine: User opts to not posting assignment notifications, mark change set as consumed right away {account: %{public}s, since: %{public}@, upTo: %{public}@}
RDAssignmentNotificationEngine: Current user is not participating the list of this inserted assignment {list: %{public}@}
RDAssignmentNotificationEngine: Can't find the correspinding inserted assignments from the reminderID, how come? {reminder: %{public}@}
RDAssignmentNotificationEngine: This is an inserted assignment we want to notify {list: %{public}@, reminder: %{public}@, assignment: %{public}@}
RDAssignmentNotificationEngine: Should have selected only the ONE most recent current assignment, not multiple {reminder: %{public}@}
RDAssignmentNotificationEngine: Reminder is already completed, skipping from showing assignment notification {reminder: %{public}@}
RDAssignmentNotificationEngine: Tracked insertion is not an REMAssignment, huh? {inserted: %s}
RDAssignmentNotificationEngine: Failed to fetch CloudKit accounts. Not tracking changes. {error: %{public}s}
RDAssignmentNotificationEngine: Not tracking changes since there is no logged in or enabled CloudKit account.
com.apple.remindd.assignmentNotificationEngine
Babysitting RDAssignmentNotificationEngine because it failed too many times {waiterID: %{public}s}.
RDAssignmentNotificationEngine: User has disabled assignment notifications.
<%@>: %ld inserted assignments
RDAssignmentNotificationEngine: Assignments to notify in this change set {stats: %{public}s}
RDAssignmentNotificationEngine: No assignment to notify in this change set
RDAssignmentNotificationEngine: No account eligible for assignment change tracking, no assignment to notify.
RDAssignmentNotificationEngine: Mark to current token as consumed due to Babysitting {account: %{public}s, token: %{public}s}
RDAssignmentNotificationEngine.start() must be called exactly once
com.apple.remindd.assignmentNotificationEngine.start
RDAssignmentNotificationEngine: dispatch to call refreshFromLastConsumedOnLaunchIfNeeded {after: %ld}
os_transaction INIT {name: com.apple.remindd.assignmentNotificationEngine.start}
Starting RDAssignmentNotificationEngine
os_transaction RELEASE {name: com.apple.remindd.assignmentNotificationEngine.start}
RDAssignmentNotificationEngine: refreshFromLastConsumedOnLaunchIfNeeded completed {refreshed: %s}
RDAssignmentNotificationEngine: Failed to compareCurrentChangeTokenToLastConsumed {account: %{public}s, error: %s}
Received storeController changed notification after RDAssignmentNotificationEngine was deallocated
com.apple.remindd.assignmentNotificationEngine.storeControllerChange
os_transaction INIT {name: com.apple.remindd.assignmentNotificationEngine.storeControllerChange}
os_transaction RELEASE {name: com.apple.remindd.assignmentNotificationEngine.storeControllerChange}
RDAssignmentNotificationEngine: (Re-)initialized changeTrackingHelpers upon enabled/disabled CloudKit account(s).
RDAssignmentNotificationEngine: Reset babysitter upon enabled/disabled CloudKit account(s) for {waiterID: %{public}s}
REMDAAccountProviding
#16@0:8
superclass
description
_TtC7remindd12RDDebouncing
_TtCC7remindd12RDDebouncing10LoadFactor
windowSize
thresholdForNewWindow
averageInterval
numOfSamples
measurements
lastFire
debouncingPolicy
loadFactor
label
isEnabled
pendingWorkItem
pendingValues
pendingCompletionBlocks
coalescedUpdates
_TtC7remindd21RDDebouncerWithNumber
v24@0:8d16
@40@0:8d16@24@?32
debouncer
debouncingInterval
Td,N
_TtC7remindd36RDDebounceableCKDatabaseNotification
@32@0:8q16@24
databaseScope
subscriptionOwnerUserRecordName
Tq,N,VdatabaseScope
_TtC7remindd37RDDebouncerWithCKDatabaseNotification
remindd.RDDebouncerWithCKDatabaseNotification
remindd.RDDebounceableCKDatabaseNotification
(databaseScope: 
, subscriptionOwnerUserRecordName: 
remindd.RDDebouncerWithNumber
remindd.RDDebouncer
Failed to create saved alarm trigger from invalid type {alarm.trigger: 
Failed to create savedDateAlarmTrigger from {dateComponents: 
dateTimeInterval
locationTriggers
timeIntervalTriggers
_TtC7remindd37RDExchangeAccountComplimentaryService
setPersonIDAuthor
personIDSaltObserver
pendingSystemAvailable
bootstrapCancellables
storeControllerEventCancellables
systemAvailabilityCheckerBlockingQueue
appleAccountUtilities
com.apple.remindd.ExchACS.accountSetPersonID.author
com.apple.remindd.ExchACS.launch.systemAvailabilityBlockingQueue
com.apple.remindd.ExchACS.launch.pending.pendingSystemAvailable
ExchACS: Couldn't create os_transaction_t for waiting pendingSystemAvailable
os_transaction INIT {name: com.apple.remindd.ExchACS.launch.pendingSystemAvailable}
ExchACS: Received 'ExchangeAccountDidChange', gonna reset the personIDSaltObserver {observer: %{public}s}
ExchACS: Received DidCompleteInitializeAllAccountsNotification
ExchACS: StoreController is nil when observePrimaryCloudKitAccountPersonIDSaltChanges() is invoked
ExchACS is not observing primary CK account personIDSalt changes this time as we have no exchange account right now
v16@?0@"NSData"8
ExchACS failed to start observing primary CK account personIDSalt changes {debugTrackingUUID: %{public}s}
ExchACS is now observing primary CK account personIDSalt changes {debugTrackingUUID: %{public}s, observer: %{public}s}
ExchACS is already observing personIDSalt changes with RDAccountPersonIDSaltObserver {observer: %{public}s}
ExchACS: Trying to call observePrimaryCloudKitAccountPersonIDSaltChanges() while still pending system to be available
ExchACS received a primary CK account personIDSalt error {debugTrackingUUID: %{public}s, saltError: %{public}s}
ExchACS failed to reset account personID to nil {accountIDs: %{public}s, saltError: %{public}s, saveError: %s}
ExchACS will reset account personID to nil {accountID: %{public}s, origPersonID: %s, saltError: %{public}s}
ExchACS failed to fetch Exchange accounts from database {error: %s}
ExchACS received a primary CK account personIDSalt change or initial value {debugTrackingUUID: %{public}s}
ExchACS failed to saved account personID {accountIDs: %{public}s, saveError: %s}
ExchACS failed to generate a hashed personID from the salt {accountID: %{public}s}
ExchACS will save update to account personID {accountIDs: %{public}s, newPersonID: %s, oldPersonID: %s}
ExchACS: hashedAccountPersonID: account: %s, nonNilUsername = %s
os_transaction RELEASE {name: com.apple.remindd.ExchACS.launch.pendingSystemAvailable}
ExchACS: Done waiting for system to become available upon daemon launch, now trying to observe for primary CK account PersonIDSalt changes
topLevelElementIDs
secondaryLevelElementIDsByTopLevelElementID
topLevelElementIDsByContainerID
lastModifiedByContainerID
_TtC7remindd19RDXPCDebugPerformer
storeContainerToken
notificationCenter
storeControllerByContainerURL
manualHashtagLabelUpdater
v24@0:8@?16
v28@0:8B16@?20
v60@0:8@16@24@32@40B48@?52
v56@0:8d16d24d32@40@?48
v40@0:8@16B24B28@?32
v36@0:8@16B24@?28
v44@0:8@16d24B32@?36
v40@0:8@16q24@?32
v24@0:8q16
_TtC7reminddP33_A793612D66A4A6A32EDDE79136FC5A3847DebugPerformerManualHashtagLabelUpdaterDelegate
_TtC7reminddP33_A793612D66A4A6A32EDDE79136FC5A3839DebugPerformerMockDABabysittableAccount
remindd.DebugPerformerMockDABabysittableAccount
init()
RDXPCDebugPerformer: updateRemCurrentRuntimeVersionDebuggingOverride initiated
updateMinimumSupportedVersion
RDXPCDebugPerformer: updateMinimumSupportedVersion initiated
identifier == %@
 object with identifier 
RDXPCDebugPerformer: removeSharedEntitySyncActivities initiated
removeSharedEntitySyncActivitiesWithCKIdentifier
removeSharedEntitySyncActivityWithUUIDForChangeTracking
removeAllSharedEntitySyncActivity
There are more than one sync activity for given uuidForChangeTracking: 
RDXPCDebugPerformer: removeSharedEntitySyncActivityWithUUID initiated
RDXPCDebugPerformer: removeSharedEntitySyncActivityWithActivities initiated
requestedAccountIdentifier
Persistent store not found for accountIdentifier. Did you change containers without also changing accountIdentifer?
Persistent store not found for accountIdentifier %s
addSharedEntitySyncActivity
RDXPCDebugPerformer: addSharedEntitySyncActivity initiated
fetchAllSharedEntitySyncActivities
RDXPCDebugPerformer: fetchAllSharedEntitySyncActivities initiated
fetchAccountListOrderedIdentifiers
RDXPCDebugPerformer: fetchAccountListOrderedIdentifiers initiated
validateSharedToMeReminderPlaceholder
RDXPCDebugPerformer: validateSharedToMeReminderPlaceholders initiated
validateHashtagWithSharedToMeReminderCKIdentifierAndMismatchedReminderCKIdentifier
RDXPCDebugPerformer: validateHashtagsWithSharedToMeReminderCKIdentifierAndMismatchedReminderCKIdentifier initiated
validateHashtagWithMismatchedHashtags
RDXPCDebugPerformer: validateHashtagLabelsWithMismatchedHashtags initiated
validateHashtagsWithoutHashtagLabel
RDXPCDebugPerformer: validateHashtagsWithoutHashtagLabel initiated
validateHashtagLabelsWithConcealedHashtags
RDXPCDebugPerformer: validateHashtagLabelsWithConcealedHashtags initiated
validateHashtagLabelsWithoutHashtag
RDXPCDebugPerformer: validateHashtagLabelsWithoutHashtag initiated
revertImageAttachmentsToUnDeduped
RDXPCDebugPerformer: revertImageAttachmentsToUnDeduped failed to get identifier from attachment
RDXPCDebugPerformer: revertImageAttachmentsToUnDeduped failed to get account from attachment
RDXPCDebugPerformer: revertImageAttachmentsToUnDeduped failed to get fileName from attachment
RDXPCDebugPerformer: revertImageAttachmentsToUnDeduped failed to get sha512Sum from attachment
REMXPCDebugPerformer.synchronous_revertImageAttachments could not clean up file { sha512Sum: %s, error: %s }
immediatelyRevokePublicLinkOfTemplate
immediatelyCreateOrUpdatePublicLinkOfTemplate
handleIncompleteTemplateOperationQueueItemsImmediately
RDXPCDebugPerformer: Failed to copy reminders from REMList to REMTemplate {error: %s}
missing xpcDaemon
RDXPCDebugPerformer: Failed to refresh hashtag labels; missing manualHashtagLabelUpdater
RDXPCDebugPerformer: Failed to set up manual hashtag label updater; missing xpcDaemon
updateManualSortHint
RDXPCDebugPerformer: updateManualSortHint initiated
resetManualSortHintWithBeforeLastAccessed
RDXPCDebugPerformer: %s initiated
Incorrect REMCDManualSortHint.ListType: 
resetAllManualSortHintWithListID
resetManualSortHintWithIdentifier
resetAllManualSortHints
removeManualSortHint
RDXPCDebugPerformer: removeManualSortHint initiated
fetchManualSortHintWithListTypeID
containerIDsWithLocalContainerIDPrefix
elementIDsWithLocalElementIDPrefix
invalid recordType: 
ckServerRecordData
fetchCKIdentifierForPurging
account has no CKContainer
v24@?0@"CKRecordID"8@"NSError"16
deletion of CKRecord failed: 
fetch resulted in too many items
fetch resulted in zero REMCDObjects
fetched object must be marked for deletion, but is not
fetched object has no account.identifier
fetched object has no CKRecord
nil RDStoreController.cloudContext
RDXPCDebugPerformer: CloudContext is nil -- can't sync to cloudKit
nil accountIdentifier
RDXPCDebugPerformer: downloadContainer accountIdentifier is nil -- can't download cloudKit container
downloadContainer
isCloudKitAccount fails for 
RDXPCDebugPerformer: downloadContainer: isCloudKitAccount fails for accountIdentifier { %s }, error: { %s }
 not CloudKit accountIdentifier
RDXPCDebugPerformer: downloadContainer accountIdentifier { %s } is not from CloudKit account
RDXPCDebugPerformer: Called resetBabysitter {waiterID: %s}
RDXPCDebugPerformer: Called registerBabysitter {waiterID: %s}
RDXPCDebugPerformer: Failed to delete isolated container {error: %@, token: %@}
RDXPCDebugPerformer: Destroyed isolated container {token: %@, url: %s}
RDXPCDebugPerformer: Destroying an isolated container that still has live references to it - can be normal {token: %@, url: %s}
RDXPCDebugPerformer: Request to destroy isolated container {token: %@, storeControllers: %@}
RDXPCDebugPerformer: Created isolated store {token: %@}
v24@?0@"CNContact"8^B16
RDXPCDebugPerformer called crash {message: %@}
setDueDateResolutionTokenNonceForReminderID
RDXPCDebugPerformer: setDueDateResolutionTokenNonceForReminderID {reminderID: %{public}@, shouldSetDirtyFlags: %{public}s}
RDXPCDebugPerformer: setDueDateResolutionTokenNonceForReminderID: Saved changes {reminderID: %{public}s, alarmsUpdated.count: %ld, shouldSetDirtyFlags: %{public}s}
Reminder has no non-delete non-snooze temporal alarm
Reminder has no alarm
setDueDateResolutionTokenNonceForAlarmID
RDXPCDebugPerformer: setDueDateResolutionTokenNonceForAlarmID {alarmID: %{public}@, shouldSetDirtyFlags: %{public}s}
RDXPCDebugPerformer: setDueDateResolutionTokenNonceForAlarmID: Saved changes {alarmID: %{public}s, shouldSetDirtyFlags: %{public}s}
markAndDeleteExtraneousAlarmsFromReminderID
RDXPCDebugPerformer: markAndDeleteExtraneousAlarmsFromReminderID {reminderID: %{public}@, shouldSetDirtyFlags: %{public}s}
.remindtool(markAndDeleteExtraneousAlarmsFromReminderID)
RDXPCDebugPerformer: markAndDeleteExtraneousAlarmsFromReminderID is only supported in DEBUG build
RDXPCDebugPerformer: lowLevelUnmarkForDeletion {shouldSetDirtyFlags: %{public}s, objectID: %{public}@}
lowLevelMarkForDeletionWithObjectID
lowLevelUnmarkForDeletion
RDXPCDebugPerformer: %{public}s: Saved updating .markedForDeletion flag {shouldSetDirtyFlags: %{public}s, objectID: %{public}s}
lowLevelMarkForDeletion
RDXPCDebugPerformer: lowLevelMarkForDeletion {shouldSetDirtyFlags: %{public}s, objectID: %{public}@}
RDXPCDebugPerformer: persistenceStoreID for {accountID: %@}
RDXPCDebugPerformer: Debug: addGeofence {center=(%.*f,%.*f), r=%.*f, UUID=%s}
RDXPCDebugPerformer: Debug: removeGeofence {UUID=%s}
RDXPCDebugPerformer: Debug: fetchGeofences
RDXPCDebugPerformer: fireDebugNotification initiated with text: %s
storeController.disabled (ppt mode?)
cloudContext == nil
No CloudKit Account
CloudKit Account is not active
StoreController has CloudKit disabled. Running in ppt mode?
RDXPCDebugPerformer: Failed cancelCloudKitSync {error: %@}
StoreController missing CloudContext
testFlagAccountForInactivatedCalDAVDataMigration: No iCloud account signed in with the given ACAccount identifier 
self.xpcDaemon is nil
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/XPCPerformers/RDXPCDebugPerformer.swift
testFlagAccountForInactivatedCalDAVDataMigration: Failed to call RDAccountInitializer.initializeAllAccounts()
testFlagAccountForInactivatedCalDAVDataMigration
RDXPCDebugPerformer: testFlagAccountForInactivatedCalDAVDataMigration called initializeAllAccounts()
RDXPCDebugPerformer: testFlagAccountForInactivatedCalDAVDataMigration updated user defaults `acAccountIdentifiersToMigrateInactivatedCalDavData` {accountIdentifier: %{public}@}
RDXPCDebugPerformer: testFlagAccountForInactivatedCalDAVDataMigration initiated {accountIdentifier: %{public}s}
No iCloud account signed in with the given ACAccount identifier 
v20@?0B8@"NSError"12
RDXPCDebugPerformer: testReinitializeCloudKit initiated {accountIdentifier: %{public}s}
StoreController missing AccountUtils
RDXPCDebugPerformer: testReinitializeCloudKit: CloudKit disabled.
RDXPCDebugPerformer: testReinitializeCloudKit: Done ACAccont migration flags unset {acAccount: %@}
RDXPCDebugPerformer: testReinitializeCloudKit: ERROR unsetting ACAccount migration flags {acAccount: %@, error: %s}
RDXPCDebugPerformer: testReinitializeCloudKit: REM account removed from DB. CloudKit re-enabled. {objectID: %@}
RDXPCDebugPerformer: testReinitializeCloudKit: CloudKit cancelEverything completed.
RDXPCDebugPerformer: testReinitializeCloudKit: Completed updateState() for accountIdentifier: %s, didAddAccount: %{bool}d, didUpdateAccount: %{bool}d, updateAccountError: %s
RDXPCDebugPerformer: Failed testReinitializeCloudKit {error: %@}
RDXPCDebugPerformer: testInitialSync initiated
RDXPCDebugPerformer: Failed testInitialSync {error: %@}
Multiple accounts found with that name {accountIDs: 
Account has no objectID
Unsupported account type {accountID: 
Account is inactive {accountID: 
Account not found
prepare.cancelCloudKit.duration
prepare.deletedCDObjects.count
prepare.deleteCDObject.duration
prepare.deleteCKCloudState.count
prepare.deleteCKCloudState.duration
prepare.resetAccount.success
sync.totalDuration
RDXPCDebugPerformer: Failed to nuke database {error: %@}
RDXPCDebugPerformer: nukeDatabase initiated
].REMCDReminder.Incomplete_And_NotDeleted.count
].REMCDReminder.Incomplete_And_Deleted.count
].REMCDReminder.Completed_And_NotDeleted.count
].REMCDReminder.Completed_And_Deleted.count
Cannot get cdAccount from %s for extra container stats
remindd/TypedPredicate.swift
Failed to create cdPropertyKey for keyPath: 
].REMCDAlarmTrigger.ExtraneousAlarmsReminders(
].REMCDAlarmTrigger.ExtraneousNonSnoozeDateAlarms.count
].REMCDAlarm.Concealed.count
].REMCDAlarmTrigger.Concealed.count
storeController.
userDefaults.lastExtraneousAlarmsProcessedDate
userDefaults.useExtraneousAlarmBackOffThrottleInterval
Babysitter report is empty
cloudContext.readinessLoggingDescription
cloudContext.configuration.
cloudContext.lastSyncMetrics.
v16@?0@"NSDictionary"8
remindd.RDXPCDebugPerformer
Error reverting FileAttachments: 
REMXPCDebugPerformer
v24@0:8@?<v@?@"NSString">16
v28@0:8B16@?<v@?@"NSDictionary"@"NSError">20
v24@0:8@?<v@?@"NSURL">16
v24@0:8@?<v@?@"NSDictionary"@"NSError">16
v24@0:8@?<v@?@"NSError">16
v32@0:8@"NSString"16@?<v@?q@"NSDictionary"@"NSError">24
v24@0:8@?<v@?@"NSString"@"NSDictionary"@"NSError">16
v60@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40B48@?<v@?@"NSError">52
v32@0:8@"REMObjectID"16@?<v@?@"NSString">24
v40@0:8@"REMObjectID"16B24B28@?<v@?@"NSError">32
v36@0:8@"REMObjectID"16B24@?<v@?@"NSError">28
v44@0:8@"REMObjectID"16d24B32@?<v@?@"NSError">36
v24@0:8@?<v@?@"NSArray">16
v56@0:8d16d24d32@"NSUUID"40@?<v@?>48
v32@0:8@"NSUUID"16@?<v@?>24
v32@0:8@"NSString"16@?<v@?>24
v32@0:8@"NSString"16@?<v@?@"NSArray">24
v24@0:8@?<v@?@"REMStoreContainerToken"@"NSError">16
v32@0:8@"REMStoreContainerToken"16@?<v@?@"NSError">24
v24@0:8@?<v@?@"NSArray"@"NSError">16
v40@0:8@"NSString"16@"NSURL"24@?<v@?@"NSError">32
v40@0:8@"NSString"16@"NSUUID"24@?<v@?@"NSError">32
v28@0:8B16@?<v@?@"NSArray"@"NSError">20
v40@0:8@"NSString"16@"NSString"24@?<v@?@"NSArray"@"NSError">32
v32@0:8@"NSUUID"16@?<v@?@"NSError">24
v40@0:8@"NSString"16@"NSString"24@?<v@?@"NSError">32
v32@0:8@"NSDate"16@?<v@?@"NSError">24
v40@0:8@"NSUUID"16@"NSDate"24@?<v@?@"NSError">32
v40@0:8@"REMObjectID"16@"REMTemplatePublicLinkConfiguration"24@?<v@?@"REMTemplatePublicLink"@"NSError">32
v32@0:8@"REMObjectID"16@?<v@?@"REMObjectID"@"NSError">24
v32@0:8@"NSArray"16@?<v@?@"NSError">24
v32@0:8@"NSUUID"16@?<v@?@"NSArray"@"NSError">24
v32@0:8@"REMSharedEntitySyncActivity"16@?<v@?@"NSError">24
v40@0:8@"REMObjectID"16q24@?<v@?@"NSError">32
_TtC7remindd61RDTemplateOperationCopyRemindersFromCustomSmartListToTemplate
operationType
_TtC7remindd26RDClientConnectionListener
xpcListener
xpcListenerUserInteractive
listenerQueue
clientConnectionDidClosePublisher
clientConnections
clientConnectionDidClosePassthroughSubject
B32@0:8@16@24
Connection count: %ld
New client connection {connection: %{public}@, queue: %{public}@}
Connection requested as UserInteractive but is missing the entitlement. Using xpc Queue {connection: %@}
clientConnection.accessLevel has no read/write access {clientConnection: %{public}@}
clientConnection.accessLevel == .none. Rejecting connection {clientConnection: %{public}@}
Client connection closed: %@
remindd.RDClientConnectionListener
NSXPCListenerDelegate
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
_TtC7remindd39RDSpringBoardApplicationShortcutUpdater
applicationShortcutService
applicationShortcutServiceQueue
v8@?0
Application shortcut update requested for lists {lists: %s}
Updating application shortcuts for lists {lists: %s}
AddReminderToList
actionURLAbsoluteString
Invalidating RDSpringBoardApplicationShortcutUpdater's application shortcut service
REMCDReminder.markExtraneousAlarmsForDeletion(): Reminder has <= 1 alarm, stopping early {reminderID: %{public}s}
REMCDReminder.markExtraneousAlarmsForDeletion()
REMCDReminder.markExtraneousAlarmsForDeletion() {reminderID: %{public}s, author: %{public}s}
_TtC7reminddP33_21DE925B29389F3F365F2E7E031C4B6422DueDateVerifiableAlarm
_TtC7reminddP33_21DE925B29389F3F365F2E7E031C4B6425DueDateNonVerifiableAlarm
cachedNonce
REMCDReminder.ExtraneousAlarmsMarker: Reminder has <= 1 dueDateNonVerifiableAlarms so no need to scan for extraneous items {reminderID: %s}
REMCDReminder.ExtraneousAlarmsMarker: markExtraneousAlarmsForDeletion: (dueDateNonVerifiableAlarms) {total: %ld, deleted: %ld, reminderID: %s}
com.apple.remindd.markExtraneousAlarmsForDeletion
nonVerifiable
REMCDReminder.ExtraneousAlarmsMarker: Reminder has <= 1 dueDateVerifiableAlarms so no need to scan for extraneous items {reminderID: %s}
REMCDReminder.ExtraneousAlarmsMarker: markExtraneousAlarmsForDeletion: (dueDateVerifiableAlarms) {total: %ld, deleted: %ld, reminderID: %s}
verifiable
REMCDAlarm.markAsExtraneousAndDelete(): Alarm is outdated but dirty flags is not .none, skipping {remObjectID: %{public}s, dirtyFlags: %{public}hd}
REMCDAlarm.markAsExtraneousAndDelete(): Outdated alarm is marked extraneous and deleted {remObjectID: %{public}s}
REMCDReminder.ExtraneousAlarmsMarker: Populating dueDate verifiable alarm {remObjectID: %s, nonce: %f}
REMCDReminder.ExtraneousAlarmsMarker: Populating legacy alarm {remObjectID: %s, fallbackNonce: %f}
REMCDReminderExtraneousAlarmsMarking
_TtC7remindd40RDSharedInlineTagAutoConvertStoreHandler
_TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler7Batcher
storeObjectContext
batchSizePerQuery
metrics
_TtCC7remindd40RDSharedInlineTagAutoConvertStoreHandler22ReminderFieldConverter
reminder
field
onlySpecificCanonicalName
persistentStoreLookup
reminder.account
 RDSharedInlineTagAutoConvertHandler.Runner: Reminder[%{public}s] is missing %ld HashtagLabels[%{public}s]
v40@?0@"REMTTHashtag"8{_NSRange=QQ}16^B32
 RDSharedInlineTagAutoConvertHandler.Runner: REMTTHashtag objectIdentifier[%{public}s] does not represent a valid UUID
remindd.ReminderFieldConverter
 RDSharedInlineTagAutoConvertHandler.Batcher: CoreData error fetching REMCKSharedEntitySyncActivities. Error: %{public}s
 RDSharedInlineTagAutoConvertStoreHandler.Batcher FINISH ALL:
 RDSharedInlineTagAutoConvertStoreHandler.Batcher: START ALL
%s %s
com.apple.remindd.sharedInlineTagAutoConversion
activitiesProcessed
distinctRemindersHandled
metrics: activities processed = 
, distinct Reminders handled = 
Hashtags created = 
 RDSharedInlineTagAutoConvertStoreHandler.Batcher: Error saving at end of consumeJournalUpdates {error: %{public}s}
 RDSharedInlineTagAutoConvertStoreHandler.Batcher: FINISH .sharedToMe
 RDSharedInlineTagAutoConvertStoreHandler.Batcher: START .sharedToMe
 RDSharedInlineTagAutoConvertStoreHandler.Batcher: FINISH .userInitiated
 RDSharedInlineTagAutoConvertStoreHandler.Batcher: START .userInitiated
_TtC7remindd34RDXPCSyncInterfacePerformerFactory
discretionaryCloudKitThrottler
cloudKitThrottler
dataAccessThrottler
dataAccessRequestsWriter
_TtC7remindd27RDXPCSyncInterfacePerformer
v44@0:8B16B20B24@28@?36
storeProvider
clientConnection
remindd.RDXPCSyncInterfacePerformer
Perform has no clientConnection. Is this really an XPC call? Without a real XPC call, I cannot ask the storeController to actively notify anything.
Received request to observe CloudKit traffic {clientConnection: %@}
Failed to fetch object. {objectID: %@, error: %s}
fetchServerRecord: Tried to fetch non-existent object {remObjectID: %{public}@}
Force set migration state
Can't set migration state
CloudContext is nil -- can't set migration state
Can't clear migration state cache
AccountUtils is nil -- can't clear migration state cache
accountIdentifier is nil
setMigrationStateToDidChooseToMigrate: accountIdentifier is nil
setMigrationStateToDidChooseToMigrate
setMigrationStateToDidChooseToMigrate: isCloudKitAccount fails for accountIdentifier { %s }, error: { %s }
not CloudKit accountIdentifier
setMigrationStateToDidChooseToMigrate: accountIdentifier { %s } is not from CloudKit account
Use primary account as default for calling set migration state
Failed to set migration state {error: %s, didChooseToMigrate: %{bool}d, didFinishMigration: %{bool}d, createZoneAccountIfFinishMigration: %{bool}d
Manual fetch user record
CloudContext is nil
CloudContext is nil -- can't fetch user record
fetchUserRecord: accountIdentifier is nil
fetchUserRecord: isCloudKitAccount fails for accountIdentifier { %s }, error: { %s }
fetchUserRecord: accountIdentifier { %s } is not from CloudKit account
v24@?0@"CKRecord"8@"NSError"16
Use primary account as default for fetching user record
debugDownloadMigrationCache: accountIdentifier is nil
v24@?0@"NSArray"8@"NSError"16
Use primary account as default for debug downloading migration cache
Can't fetch migration cache records: 
migrateICloudCalDavToCloudKit: Couldn't determine the display account ID for setting flag didChooseToMigrateLocally {accountID: %{public}@}
migrateICloudCalDavToCloudKit: Failed to set flag didChooseToMigrateLocally before migration {accountID: %{public}@, error: %{public}s}
migrateICloudCalDavToCloudKit: Account flag didChooseToMigrateLocally is already true {displayACAccountID: %{public}@, accountID: %{public}@}
migrateICloudCalDavToCloudKit: Saved flag didChooseToMigrateLocally before migration {displayACAccountID: %{public}@, accountID: %{public}@}
migrateICloudCalDavToCloudKit: Failed to save flag didChooseToMigrateLocally before migration {displayACAccountID: %{public}@, accountID: %{public}@, error: %{public}s}
Reset migration state
deleteApplicationDataFromCloudKit: accountIdentifier is nil
deleteApplicationDataFromCloudKit
deleteApplicationDataFromCloudKit: isCloudKitAccount fails for accountIdentifier { %s }, error: { %s }
deleteApplicationDataFromCloudKit: accountIdentifier { %s } is not from CloudKit account
Primary account found - calling unmigration service for the account
Unknown unmigration error
Failed to unmigrate account - server returned error
Server unmigration succeed {timeElapsed: %f}
Delete Application data from CloudKit
CloudContext is nil -- can't delete server data
nil RDStoreController.accountUtils
Missing account utils -- can't purge migration state cache
Failed to delete application data from server {error: %s}
Failed to purge migration state cache {error: %s}
(daemon) Requested trigger DataAccess sync {accountIDs: %s}
(daemon) Trigger DataAccess sync {accountIDs: %s}
XPCSyncInterface.RestartCloudKitSync: Requested Restart CloudKit sync
Unsupported sync reason - 
XPCSyncInterface.RestartCloudKitSync: Unsupported sync reason - %s
XPCSyncInterface.RestartCloudKitSync: Bypassed throttler and restart CloudKit sync now {reason: %{public}s}
XPCSyncInterface.RestartCloudKitSync: CloudContext is nil -- can't restart cloudkit sync
XPCSyncInterface.RestartCloudKitSync: Restart CloudKit sync {reason: %{public}s}
XPCSyncInterface.RestartCloudKitSync: Done cancelling works in ICCC and now calls updateCloudContextStateWithSyncOption {reason: %{public}s}
XPCSyncInterface.SyncCloudKit: Requested Trigger CloudKit sync {discretionary: %{bool}d, reason: %{public}s}
XPCSyncInterface.SyncCloudKit: Unsupported sync reason - %s
XPCSyncInterface.SyncCloudKit: Dropping CloudKit sync Request {discretionary: %{bool}d, reason: %{public}s}
XPCSyncInterface.SyncCloudKit: Bypassed throttler and run sync now {discretionary: %{bool}d, reason: %{public}s}
XPCSyncInterface.SyncCloudKit: CloudContext is nil -- can't sync to cloudKit
XPCSyncInterface.SyncCloudKit: Trigger CloudKit sync {discretionary: %{bool}d, reason: %{public}s}
XPCSyncInterface.SyncCloudKit: Sync interface cloudkit sync finished with error {error: %s}
XPCSyncInterface.SyncCloudKit: CloudKit Sync did finish {discretionary: %{bool}d, reason: %{public}s}
CloudKit Sync - Discretionary
REMXPCSyncInterfacePerformer
v40@0:8@"NSString"16B24B28@?<v@?@"NSError">32
v36@0:8@"NSString"16B24@?<v@?@"NSError">28
v36@0:8@"NSArray"16B24@?<v@?@"NSError">28
v40@0:8@"REMObjectID"16B24B28@?<v@?@"REMMigrationResult"@"NSError">32
v32@0:8@"NSString"16@?<v@?@"NSDictionary"@"NSError">24
v32@0:8@"NSString"16@?<v@?@"CKRecord"@"NSError">24
v44@0:8B16B20B24@"NSString"28@?<v@?@"NSError">36
v32@0:8@"REMObjectID"16@?<v@?@"CKRecord"@"NSError">24
_TtC7remindd35RDPublicCloudDatabaseControllerMock
fetchPublicCloudObjectResultMock
Failed to initialize RDSavedReminder from reminderStorage because 'reminderStorage.titleDocument()' is nil {reminderStorage.objectID: 
contactHandlesData
unknown type
Display date predicate missing parameter: startingDueDate and/or endingDueDate
Display date predicate missing parameter: endingDueDate
Display date predicate missing parameter: startingDueDate
Predicate missing parameter: descriptors
Predicate missing parameter: text
unknown textMatching
Predicate missing parameter: startingDueDate and/or endingDueDate
Predicate missing parameter: endingDueDate
Predicate missing parameter: startingDueDate
Predicate missing parameter: parentReminderID
Predicate missing parameter: objectIDs
Predicate missing parameter: listID
_TtC7remindd38RDAssignmentNotificationEngineAssembly
OriginalAlarmUID
DueDateResolutionTokenAsNonce
AcknowledgedDate
Reminder is marked for deletion but alarm is not {alarmID: %{public}s, reminderID: %{public}s}
Fixing broken references for alarm {alarmID: %{public}s, reminderID: %{public}s}
ckRecordType
_TtC7remindd25REMAlarmTriggerCDIngestor
accountID
_TtC7remindd37REMAlarmTimeIntervalTriggerCDIngestor
_TtC7remindd34REMAlarmDateTriggerCDIngestor_ObjC
_TtC7remindd29REMAlarmDateTriggerCDIngestor
_TtC7remindd33REMAlarmLocationTriggerCDIngestor
_TtC7remindd32REMAlarmVehicleTriggerCDIngestor
Failed to code cdAlarmTrigger {error: %{public}s}
dateComponentsData
REMAlarmDateTriggerCDIngestor: cdAlarmDateTrigger.dateComponentsData is nil {cdAlarmDateTrigger.remObjectID: %@}
Failed to decode Trigger date components data
com.apple.xctest
com.apple.remindd.
REMCDSavedReminder
T@"NSData",N,D,C
T@"NSDate",N,D,C
T@"NSString",N,D,C
T@"NSNumber",N,D,&
displayDateDate
displayDateIsAllDay
hasHashtags
hasLocationTriggersOrVehicleEventTriggers
T@"NSUUID",N,D,C
T@"REMCDTemplate",N,D,&
T@"NSSet",N,D,C
_TtC7remindd28REMTemplateStorageCDIngestor
templatePublicLinkTTL
resolutionTokenMap
REMTemplateStorageCDIngestor: merge(storage:into cdTemplate:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}
%{public}s: '\REMCDTemplate.name' should not be nil at the end of 'merge(storage:into:changedValueKeys:optionalCoordinator:)' {storage.objectID: %{public}@, storage.name: %s}
Failed to insert template operation queue item because 'storage.accountID' does not belong a CloudKit account. {storage.objectID: 
}, storage.accountID: 
Failed to insert template operation queue item for copying reminders to template because 'storage.configuration' is nil. {storage.objectID: 
storeControllerManagedObjectContext
REMTemplateStorageCDIngestor: changedValueKeys should not include 'configuration' because storage.isPersisted is true {objectID: %{public}@, keys: %{public}s}
REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with unsupported key path {objectID: %{public}s, propertyKeyPath: %{public}s}}
REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with unsupported propertyKeyPath {objectID: %{public}s, propertyKeyPath: %{public}s}}
Unknown ingestable key {key: %s}
Failed to copy reminders to template due to invalid 'cdAccount.storeControllerManagedObjectContext' {cdAccount.remObjectID: 
Failed to copy reminders to template because 'templateConfiguration.sourceListID' does not belong to either REMList or REMSmartList {templateConfiguration.sourceListID: 
Failed to update 'mostRecentTargetTemplateIdentifier' of source list because 'sourceListID' does not belong to either REMList or REMSmartList {sourceListID: 
Fetched more than expected number of CD objects than the given IDs: 
Unknown root entity name for objectID {objectID: 
Failed to get entity for CDObject {remObjectID: 
Failed to get entity for CDObject {remObjectID: %@, CDObject: %s}
CoreData entity not found for remObjectID.entity {remObjectID: 
, momEntityNames: 
CoreData entity not found for remObjectID.entity {remObjectID: %@, CDObject: %s, momEntityNames: %s}
ObjectID entity is not a subentity of the requested CDObject's entity {remObjectID: 
ObjectID entity is not a subentity of the requested CDObject's entity {remObjectID: %@, CDObject: %s}
cdEntity.name != entityName. Performing lookup {remObjectID: %@, CDObject: %s}
REMTemplateStorageCDIngestor: storage.unsavedManualOrdering should not be nil when calling `mergeManualOrdering(storage:coordinator:)` {templateObjectID: %{public}@}
REMTemplateStorageCDIngestor: ingesting manual ordering {templateObjectID: %{public}@, top-level elements count: %ld}
Ingest() {ingestable.count: %ld, ingestor: %{public}s, accountIdentifiers: %{public}s}
Programming error, ingestionContextsByAccountIdentifier is uninitialized for 
Tried to perform after-save action with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}
Could not find the changed keys & values to perform after-save action -- bail {author: %{public}s, cdObjectID: %s}
[%{public}s] Processing changed ingestables {count: %ld, CDType: %{public}s, accountIdentifier: %{public}s}
Swift/Dictionary.swift
Fetching pending objects from database {cdPendingObjectIDs.count: %ld}
Swift/NativeDictionary.swift
Duplicate values for key: '
REMCDManualSortHint
mutateRelationshipOrdering
Tried to mutate ordering in relationships with non-existent target object -- bail {author: 
Tried to mutate ordering in relationships with non-existent target object -- bail {author: %{public}s, cdObjectID: %s}
Should not happen since REMManualOrdering has no orderable relationship.
establishRelationships
Tried to establish relationship with non-existing object -- skipping {author: 
Tried to establish relationship with non-existing object -- skipping {author: %{public}s, cdObjectID: %s}
Tried to establish realtionship with non-existent target object -- bail {author: 
, relationshipObjectID: 
Tried to establish realtionship with non-existent target object -- bail {author: %{public}s, cdObjectID: %s, relationshipObjectID: %s}
[%{public}s] UPDATE RELATIONSHIPS {author: %{public}s, objectID: %{public}@, changedRelationshipKeys: %{public}s}
Missing relationship {key: 
Missing relationship {key: %s, objectID: %s}
Mismatching class for relationship {key: 
, expectedType: 
Mismatching class for relationship {key: %s, expectedType: %s, found: %s}
com.apple.private.remindd
Operation denied {requestedAccessLevel: %{public}s, currentAccesslevel: %{public}s}
[%{public}s] updateChangeCount() skipped {syncToCloudKit: %{bool}d, immutableType: %{bool}d, objectID: %{public}@, changedValues.keys: %{public}s}
[%{public}s] UPDATE VALUES {author: %{public}s, objectID: %{public}@, managedObjectID: %@, changedKeys: %{public}s}, syncToCloudKit: %{bool}d}
Client doesn't have permission to write key {changedValueKey: %{public}s}
[%{public}s] INSERT {author: %{public}s, objectID: %{public}@, managedObjectID: %@}
Skipping fetch during upsert {CDType: %s}
Performing fetch during upsert {CDType: %s}
Unknown validation error (
CDIngestableValueKey is expected to define 'objectID' for every kind of CDIngestors {CDType: %{public}s}
CDIngestableRelationshipKey is expected to define 'accountID' for every kind of CDIngestors (except REMCDAccount) {CDType: %{public}s}
Skipping afterSaveAction() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}
REMCDSavedAttachment
Skipping mutateRelationshipOrdering() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}
Tried to mutate ordering of a non-existing relationship -- bail {author: 
, orderableRelationhipKey:
Tried to mutate ordering of a non-existing relationship -- bail {author: %{public}s, cdObjectID: %s, orderableRelationhipKey: %s}
Tried to mutate a relationship that is not ordered -- bail {author: 
Tried to mutate a relationship that is not ordered -- bail {author: %{public}s, cdObjectID: %s, orderableRelationhipKey: %s}
[%{public}s] Updating relationship ordering {author: %{public}s, objectID: %{public}@, changedValueKey: %{public}s, orderableRelationshipKey: %{public}s}
Not mutating ordering because mutableOrderedSet for relationship is nil {orderableRelationshipKey: %s}
Skipping establishRelationships() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}
[%{public}s] Skipping merge() and updateChangeCount() since this ingestable is immutable and is not a new insertion {objectID: %{public}@}
This should not happen as REMSharee has no ordering relationship.
This should not happen as REMCalDAVNotification has no ordering relationship.
Should not happen since REMTemplateStorage have no orderable relationship.
REMTemplateStorageCDIngestor: establishRelationship(onStorage:into cdTemplate:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}
Updating cdTemplate.parentAccount {cdTemplate: %{public}s, parentAccount: %{public}s}
Updating cdTemplate.account {cdTemplate: %{public}s, account: %{public}s}
%{public}s: Did reset '\REMCDList.mostRecentTargetTemplateIdentifier' to nil {mostRecentTargetTemplateIdentifier: %{public}s}
%{public}s: Did not find REMCDList and REMCDSmartList with matching 'mostRecentTargetTemplateIdentifier' {mostRecentTargetTemplateIdentifier: %{public}s}
%{public}s: Did reset '\REMCDSmartList.mostRecentTargetTemplateIdentifier' to nil {mostRecentTargetTemplateIdentifier: %{public}s}
Should not happen since REMSmartListStorage have no orderable relationship.
REMSavedReminderStorageCDIngestor: Should not happen since REMReminderStorage have no orderable relationship.
Should not happen since REMReminderStorage have no orderable relationship.
This should not happen as REMAlarm has no ordering relationship.
This should not happen as REMAssignment has no ordering relationship.
Should not happen since attachments have no orderable relationship.
This should not happen as REMHashtag has no ordering relationship.
This should not happen as REMRecurrenceRule have no orderable relationship.
Should not happen since alarm triggers have no orderable relationship.
REMAlarmTriggerCDIngestor.establishRelationship: Setting alarm.dueDateResolutionTokenAsNonce {nonce: %{public}.*f, alarmID: %{public}s, triggerID: %{public}s}
REMTemplateStorageCDIngestor: cdTemplate.account is nil {cdTemplate.remObjectID: %{public}@}
REMTemplateStorageCDIngestor: cdTemplate.name is nil {cdTemplate.remObjectID: %{public}@}
REMNonceGenerating
_TtC7remindd48REMDaemonUserDefaultsPreferredListStorageAdapter
daemonUserDefaults
_TtC7remindd39MockInMemoryPreferredDefaultListStorage
l_preferredDefaultListObjectIDUrl
l_preferredDefaultListID
Template missing account {error: 
ShowingLargeAttachments
REMCDSmartList is not expected to be shared, we shouldn't upload it for non-owner (smartListID: %{public}s)
IsLinkedToAccount
MostRecentTargetTemplateIdentifier
v32@0:8@16@24
RDJSONCoder failed to encode object as JSON {class: %s, error: %s}
RDJSONEncoder can't encode output string as utf8 data
SmartList (ckIdentifier: %{public}s) does not have a sorting style
SmartList (ckIdentifier: %{public}s) does not have smart list type
REMCDObjectMergeConflictResolving
ICCloudObject
v32@0:8@16@?24
@"CKRecordID"16@0:8
@"CKRecord"16@0:8
v32@0:8@"NSMutableSet"16@?<v@?@"<ICCloudObject>"@"CKRecord">24
v32@0:8@"CKRecord"16@"NSString"24
v24@0:8@"CKModifyRecordsOperation"16
v32@0:8@"CKModifyRecordsOperation"16@"CKRecord"24
v40@0:8@"CKModifyRecordsOperation"16@"CKRecordID"24@"NSError"32
@"NSManagedObjectID"16@0:8
@40@0:8@"CKRecordID"16@"NSString"24@"NSManagedObjectContext"32
@40@0:8@"CKRecord"16@"NSString"24@"NSManagedObjectContext"32
@40@0:8@"CKRecord"16@"REMCDAccount"24@"NSManagedObjectContext"32
@40@0:8@"CKRecordID"16@"REMCDAccount"24@"NSManagedObjectContext"32
@"NSArray"24@0:8@"NSManagedObjectContext"16
@32@0:8:16@24
Q16@0:8
RDHasCKDatabaseScope
_TtC7remindd53RDStoreControllerMigrator_AutoConvertSharedInlineTags
_TtCC7remindd53RDStoreControllerMigrator_AutoConvertSharedInlineTagsP33_6756D8040FA0DE7AE12E7CF0AECBEDFA6Runner
isLaunching
managedObjectContext
RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner FINISH {successfulMigrationCount: %ld, failedMigrationCount: %ld, persistentStore: %{public}s}
RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner BEGIN {persistentStore: %{public}s}
RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner failed to fetch Reminders {error: %{public}s}
RDStoreControllerMigrator_AutoConvertSharedInlineTags.Runner failed to save {error: %{public}s}
Reminder[%{public}s] conversion failed for field %{public}s {error: %{public}s}
Reminder[%{public}s] conversion succeeded for field %{public}s
RDStoreControllerMigrator_AutoConvertSharedInlineTags: Skipping persistentStore since its account is not a CK account {persistentStore: %{public}s}
RDStoreControllerMigrator_AutoConvertSharedInlineTags.OnlyCKPersistentStoreLookup: Could not fetch REMCDAccount from persistentStore {error: %{public}s}
RDStoreControllerMigrator
v32@0:8@"NSPersistentStore"16@"NSMutableDictionary"24
_TtC7reminddP33_673FACCCF2F505342EF4BC86AF8BFBA711RDJSONCoder
v28@0:8B16@20
v28@0:8i16@20
v32@0:8q16@24
v32@0:8d16@24
dicts
arrays
allowsKeyedCoding
JSON encode error: expected at least one dict
JSON encode error: expected at least one array
_TtC7remindd31RDCoreDataCoreSpotlightDelegate
$__lazy_storage_$_contactStore
shouldStart
TB,N,VshouldStart
cdList.identifier: 
Successfully indexed list {list: %{public}s, CSSearchableItemAttributeSet.identifier: %{public}s
Evaluating TypedPredicate with nil NSPredicate against object {object: %@}
cdReminder.identifier: 
Successfully indexed reminder {reminder: %{public}s, CSSearchableItemAttributeSet.identifier: %{public}s
Unexpected error {error: %s}
Couldn't create CSSearchableItemAttributeSet for reminder. {%{public}s}
Not indexing reminder because it is not eligible. {%{public}s}
Missing title. Skipping for indexing. {%{public}s}
Unable to ingest object into storage. {%{public}s, error: %s}
Device spotlight index is outdated, removing the index. {device: %ld, required: %ld}
CoreSpotlight deleteAllSearchableItems done, upgrading spotlightIndexVersion to %ld
Error occured trying to deleteAllSearchableItems {error: %s}
_TtC7remindd21RDHashtagLabelUpdater
timeGroupingStrategy
cloudAccountsDidChangeCancellable
hashtagInsertEventCancellables
highPrioritySubscriptionTransactionRegistrar
lowPrioritySubscriptionTransactionRegistrar
changeTrackingClientName
_TtCC7remindd21RDHashtagLabelUpdaterP33_45435200B10504FC9CF3E682DD4A9AA213BabysitTarget
_TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA229ChangeTrackingAccountProvider
v16@0:8
T@"REMObjectID",N,R,Vrem_accountObjectID
_TtC7reminddP33_45435200B10504FC9CF3E682DD4A9AA233ManualHashtagLabelUpdaterDelegate
_TtC7remindd22RDHashtagLabelRepairer
remindd.ChangeTrackingAccountProvider
com.apple.remindd.RDHashtagLabelUpdater.babysitter
RDHashtagLabelUpdater.associate(hashtagLabel:to:): Impossible. Should be able to get first occurrence hashtag as empty array or those with nil name should have been filtered {hashtags: %{public}s}
RDHashtagLabelUpdater.associate(hashtagLabel:to:): Impossible. Should be able to get most recently created date as empty array or those with nil name should have been filtered {hashtags: %{public}s}
RDHashtagLabelUpdater.associate(hashtagLabel:to:): updated hashtag label recencyDate {new-recencyDate: %s}
RDHashtagLabelUpdater.associate(hashtagLabel:to:): updated hashtag label first occurrence {canonicalName: %s, new-name: %s, new-firstOccurrenceCreationDate: %s}
RDHashtagLabelRepairer removes sharedToMeReminerPlaceholder[%s] with reminderID[%s]
REMCDHashtagLabelRepairer: failed to fetch sharedToMeReminderPlaceholder from database {error: %s}
RDHashtagLabelRepairer: Impossible as hashtag[%{public}s] without sharedToMeReminderCKIdentifier
RDHashtagLabelRepairer: reminder[%s] is not found in database. It may not be sync down yet.
RDHashtagLabelRepairer: fixes hashtag[%s] with sharedToMeReminderCKIdentifier[%s] and original reminder id [%s]
RDHashtagLabelUpdater: failed to fetch reminders from database {error: %s}
REMCDHashtagLabelRepairer: failed to fetch hashtag with sharedToMeReminderCKIdentifier, reminder and mismatchedReminder from database {error: %s}
RDHashtagLabelRepairer: Hashtag[%{public}s] without name
RDHashtagLabelRepairer: updates hashtag [%s] from old label canonical name [%s] to new canonical name [%s]
REMCDHashtagLabelRepairer: hashtag[%{public}s] without name
REMCDHashtagLabelRepairer: hashtag[%{public}s] without accountIdentifier
RDHashtagLabelUpdater: failed to create hashtag label with {hashtag: %{public}s, error: %s}
RDHashtagLabelUpdater: failed to fetch hashtag labels from database {error: %s}
REMCDHashtagLabelRepairer: failed to fetch all hashtag label with mismatched hashtag name from database {error: %s}
RDHashtagLabelRepairer: updates hashtag[%s] with label[%s]
REMCDHashtagLabelRepairer: failed to fetch hashtag from database {error: %s}
RDHashtagLabelRepairer: removes hashtags with isConcealed for hashtag label [%s]: %s
REMCDHashtagLabelRepairer: failed to fetch hashtag label with concealed hashtag from database {error: %s}
RDHashtagLabelRepairer: removes hashtag label without hashtag: %s
REMCDHashtagLabelRepairer: failed to fetch hashtag label from database {error: %s}
Babysitting RDHashtagLabelUpdater because it failed too many times {waiterID: %{public}s}.
RDHashtagLabelUpdater: No account eligible for hashtag change tracking
RDHashtagLabelUpdater: No since-token from change tracking {account: %{public}s}
RDHashtagLabelUpdater: No updated change token from change tracking (no changes) {account: %{public}s, since: %{public}@}
RDHashtagLabelUpdater: Marked change set consumed {account: %{public}s, since: %{public}@, upTo: %{public}@}
RDHashtagLabelUpdater: Failed to save hashtage label for %s
RDHashtagLabelUpdater: Unexpected nil change set when trying to filter in ICCC authors {account: %{public}s}
RDHashtagLabelUpdater: Processing change set {account: %{public}s, since: %{public}@, upTo: %{public}@}
RDHashtagLabelUpdater: Tracked insertion is not an REMObjectID, huh? {inserted: %s}
RDHashtagLabelUpdater: Tracked insertion is not an REMSharedToMeReminderPlaceholder, huh? {inserted: %s}
RDHashtagLabelUpdater: Tracked deletion is not an REMDAHashtagTombstone (or nil) huh? {deleted: %s}
RDHashtagLabelUpdater: Tracked deletion tombstone does not contain an objectIdentifier, huh? {deleted: %s}
RDHashtagLabelUpdater: Tracked deletion tombstone does not contain the hashtag name, huh? {deleted: %s}
RDHashtagLabelUpdater: Saving changes - insert: %ld, update: %ld, delete: %ld
RDHashtagLabelUpdater: No shared reminder placeholders found in change {since: %{public}@, upTo: %{public}@}
RDHashtagLabelUpdater: inserted sharedToMeReminderPlaceHolder IDs: %{public}s
RDHashtagLabelUpdater: No ICCC deleted hashtags found in change {since: %{public}@, upTo: %{public}@}
RDHashtagLabelUpdater: deleted hashtag IDs by ICCC: %{public}s
RDHashtagLabelUpdater: No user initiated deleted hashtags found in change {since: %{public}@, upTo: %{public}@}
RDHashtagLabelUpdater: deleted hashtag IDs initiated by user: %{public}s
RDHashtagLabelUpdater: No inserted hashtags found in change {since: %{public}@, upTo: %{public}@}
RDHashtagLabelUpdater: inserted hashtag IDs: %s
RDHashtagLabelUpdater: Cannot create hashtag label for hashtag: %{public}s
RDHashtagLabelUpdater created new hashtag label {canonicalName: %s, firstHashtag.objectID: %{public}s}
RDHashtagLabelUpdater updated hashtags that need to be associated to shared-to-me-reminders {hashtagsNeedAssociatingToReminder.count: %ld, shared-to-me-reminders.count: %ld}
RDHashtagLabelUpdater: Impossible to get here, nil canonical name should have been filtered
RDHashtagLabelUpdater processing inserted hashtags: %s
RDHashtagLabelUpdater: REMCDHashtagLabel with nil accountIdentifier: %{public}s
RDHashtagLabelUpdater: failed to fetch hashtag from database {error: %s}
RDHashtagLabelUpdater deleted hashtag label {canonicalName: %s}
RDHashtagLabelUpdater updated hashtag label recency date {canonicalName: %s, new-recencyDate: %s}
RDHashtagLabelUpdater: Cannot find a non-nil next occurrence hashtag name. We have non empty hashtagLabel.hashtags but we can't find one with non-nil name.
RDHashtagLabelUpdater updated hashtag label name to next occurrence {canonicalName: %s, nextOccurrenceHashtagName: %s}
RDHashtagLabelUpdater: Impossible to get here, concealed hashtag[%s] with nil name should have been filtered
RDHashtagLabelUpdater processing hashtag tombstones {canonicalName: %s, deletedIDs: %{public}s}
RDHashtagLabelUpdater: Unexpected hashtag with nil or empty name %{public}s
RDHashtagLabelUpdater process shared to me reminders: %{public}s
RDHashtagLabelUpdater: failed to fetch unassociated hashtags with sharedToMEReminderCkIdentifier from database {error: %s}
RDHashtagLabelUpdater: failed to fetch sharedToMeReminderPlaceholder from database {error: %s}
RDHashtagLabelUpdater: Mark to current token as consumed due to Babysitting {account: %{public}s, token: %{public}s}
RDHashtagLabelUpdater: Not tracking changes since there's no active cloudkit account logged in or enabled
RDHashtagLabelUpdater: active accounts supporting hashtags: %{public}s
RDHashtagLabelUpdater.start() must be called exactly once
com.apple.remindd.RDHashtagLabelUpdater
com.apple.remindd.RDHashtagLabelUpdater.start
RDHashtagLabelUpdater: dispatch to call refreshFromLastConsumedOnLaunchIfNeeded {after: %ld}
os_transaction INIT {name: com.apple.remindd.RDHashtagLabelUpdater.start}
Starting RDHashtagLabelUpdater
os_transaction RELEASE {name: com.apple.remindd.RDHashtagLabelUpdater.start}
RDHashtagLabelUpdater: refreshFromLastConsumedOnLaunchIfNeeded completed {refreshed: %s}
RDHashtagLabelUpdater: Failed to compareCurrentChangeTokenToLastConsumed {account: %{public}s, error: %s}
RDStoreControllerNotificationCenter.isHighPriority: Unknown QoS, handling it like `default`. {qualityOfService: %{public}ld}
RDHashtagLabelUpdater: (Re-)initialized changeTrackingHelpers upon enabled/disabled CloudKit account(s).
RDHashtagLabelUpdater: Reset babysitter upon enabled/disabled CloudKit account(s) for {waiterID: %{public}s}
com.apple.remindd.RDHashtagLabelUpdater.highPrioritySubscription
com.apple.remindd.RDHashtagLabelUpdater.lowPrioritySubscription
com.apple.remindd.RDHashtagLabelUpdater.crashDetected
HashtagLabelUpdater
com.apple.remindd.RDHashtagLabelUpdater.hashtagInsertEventScheduler
_TtC7remindd18REMAlarmCDIngestor
reminderID
Unhandled trigger type {trigger: 
REMAlarmCDIngestor: cdAlarm.trigger is nil {cdAlarm.remObjectID: %@}
Trigger is not AlarmTriggerRepresentable {cdTrigger: 
_TtC7remindd21RDManualSortIDAdapter
persistenceHost
cache
accountManualSortIDsOption
Invalid persistenceHost.identifier (
), cannot proceed to fetch account for RDManualSortIDAdapter.accountManualSortIDsForSignedInAccounts(in:)
RDManualSortIDAdapter > initialized
_TtC7remindd37RDStaledFileAttachmentCleanupActivity
xpcActivityAllowBattery
xpcActivityIsCPUIntensive
xpcActivityIsDiskIntensive
rateReducerConfiguration
executionDateStorage
babysitter
storeController
configurations
states
executable
_TtCC7remindd37RDStaledFileAttachmentCleanupActivityP33_CF681C231151F2D660185D6C75ABF25747RDStaledFileAttachmentCleanupActivityExecutable
perRunDeleteLimit
_TtCC7remindd37RDStaledFileAttachmentCleanupActivityP33_CF681C231151F2D660185D6C75ABF25749RDStaledFileAttachmentCleanupExecutionDateStorage
backingStorage
[%{public}s] configuration validation fail - cannot execute because configurations.staledFileAttachmentCleanupPerRunDeleteLimit is 0
RDStaledFileAttachmentCleanupExecutionDateStorage.updateLastExecutedDate(for:) must work with RDStaledFileAttachmentCleanupActivity only {executable: %{public}s}
RDStaledFileAttachmentCleanupExecutionDateStorage.lastExecutedDate(for:) must work with RDStaledFileAttachmentCleanupActivity only {executable: %{public}s}
[%{public}s] failed to fetch saved attachment UUIDs from database {error: %{public}s}
[%{public}s] failed to fetch file attachment UUIDs from database {error: %{public}s}
[%{public}s] failed to fetch accounts from database {error: %{public}s}
RDStaledFileAttachmentCleanupActivity.execute
[%{public}s] start execute()
[%{public}s] no staled attachment left, container deemed clean
[%{public}s] there's no account supporting attachments, completing execution
[%{public}s] no staled attachment found for {accountID: %{public}@}
[%{public}s] no delete limit left {perRunDeleteLimit: %lu}
[%{public}s] some purge wasn't successful {purged.count: %ld, accountID: %{public}@}
[%{public}s] purge was successful {purged.count: %ld, accountID: %{public}@}
[%{public}s] going to purge staled attachments {to-purge.count: %ld, limit-left: %ld, total-staled: %ld, accountID: %{public}@}
remindd.RDStaledFileAttachmentCleanupActivity
_TtC7remindd28REMSavedAttachmentCDIngestor
storeControllerManagedObjectContext.storeController
Failed to merge storage into cdSavedAttachment because storage is an unhandled type of attachment {storage: 
%{public}s: Failed to merge storage into cdSavedAttachment because storage is an unhandled type of attachment {storage: %{public}@}
%{public}s: Merged storage into cdSavedAttachment {storage: %{public}@}
%{public}@: Should not happen since saved attachments have no orderable relationship to mutate.
%{public}@: Should not happen since saved attachments have no orderable relationship.
_TtC7remindd17RDDARequestsQueue
identifier
dispatchQueue
requestChannelReader
pendingRequests
RDDARequestsQueue: Draining {identifier: %s, count: %ld, hasDelegate: %{bool}d}.
RDDARequestsQueue: Appending new request {identifier: %s, request: %s, hasDelegate: %{bool}d}.
_TtC7remindd29REMSmartListStorageCDIngestor
REMSmartListStorageCDIngestor: merge(storage:into cdSmartList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}
Ingesting smart list storage {storage.smartListType: %{public}s, storage.objectID: %{public}@, changedValueKeys: %{public}s}
storage.manualOrdering should not be nil when calling `mergeManualOrdering(storage:coordinator:)` {smart list: %{public}@, smart list type: %{public}s}
ingesting manual ordering {smart list: %{public}@, smart list type: %{public}s, top-level elements count: %ld}
REMSmartListStorageCDIngestor: establishRelationship(onStorage:into cdSmartList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}
Updating smartList.parentList {smartList: %s, parentList: %s}
Updating smartList.parentAccount {smartList: %{public}s, parentAccount: %{public}s}
Updating smartList.account {smartList: %{public}s, account: %{public}s}
REMSmartListStorageCDIngestor: cdSmartList.account is nil {cdSmartList.remObjectID: %{public}@}
REMSmartListStorageCDIngestor: cdSmartList.smartListType is nil {cdSmartList.remObjectID: %{public}@}
Unable to initialize REMSmartListType with stringValue 
batchDeleteCachedPublicTemplates
copyRemindersInCustomSmartListToTemplate
copyRemindersInREMListToTemplate
copyRemindersInPublicTemplateToREMList
copyRemindersInTemplateToREMList
REMCDTemplateOperationQueueItem <
operationTypeRawValue: 
templateObjectID: 
_TtC7remindd34RDSharedInlineTagAutoConvertEngine
handler
cancellables
_TtCC7remindd34RDSharedInlineTagAutoConvertEngineP33_5B5B2EA781175C6DB341AB3D5E32460613BabysitTarget
babysitterOperationDidLaunch
babysitterOperationStoreDidChange
com.apple.remindd.RDSharedInlineTagAutoConvertEngine.babysitter
RDTemplateOperationQueue: Reset babysitter upon enabled/disabled CloudKit account(s) for {waiterID: %{public}s}
Babysitting RDSharedInlineTagAutoConvertEngine because it failed too many times {waiterID: %{public}s}
com.apple.remindd.RDSharedInlineTagAutoConvertEngine.crashDetected
 RDSharedInlineTagAutoConvertEngine is already started. Multiple calls to `start()` were made.
 RDSharedInlineTagAutoConvertEngine Started
 RDSharedInlineTagAutoConvertEngine Starting...
com.apple.remindd.RDSharedInlineTagAutoConvertEngine.storeControllerDidChange
os_transaction INIT {name: %{public}s}
 RDSharedInlineTagAutoConvertEngine: Finished journal consumption due to %{public}s
 RDSharedInlineTagAutoConvertEngine: Starting journal consumption due to %{public}s
os_transaction RELEASE {name: %{public}s}
Can't construct REMContactRepresentation from invalid JSON
HousekeepingActivityScheduler
executeImageDeduplication
[%{public}s] configurations.imageDeduplicationApproximatePerRunDeleteLimit is 0
executeStaledFileAttachmentCleanup
[%{public}s] configurations.staledFileAttachmentCleanupPerRunDeleteLimit is 0
account.identifier
SharedToMeReminderCKIdentifier
REMCDHashtag+CloudKit: mergeData(from:) unexpected nil record['SharedToMeReminderCKIdentifier'] when record['Reminder'] is nil and hashtag not markedForDeletion, the former must present otherwise we have no way to associate the tag to the reminder {hashtag: %{public}s}
REMCDHashtag+CloudKit: mergeData(from:) merged to cdHashtag.reminder from SharedToMeReminderCKIdentifier {hashtag: %{public}s, sharedToMeReminderCKIdentifier: %{public}s}
REMCDHashtag+CloudKit: mergeData(from:) hashtag is markedForDeletion so we should not try to merge SharedToMeReminderCKIdentifier {hashtag: %{public}s}
REMCDHashtag+CloudKit: mergeData(from:) merged to cdHashtag.reminder from a CK reference {hashtag: %{public}s, reminderIdentifier: %{public}s, markedForDeletion: %{public}s}
REMCDHashtag+CloudKit: mergeData(from:) unexpected nil cdReminder.remObjectID when merging cdHashtag.reminder {hashtag: %{public}s, reminderIdentifier: %{public}s}
Hashtag does not have a name
Hashtag does not have creation date
REMCDHashtag+CloudKit: Unexpectedly got cdHashtag.reminder == nil in newlyCreatedRecord() (key=.sharedToMeReminderCKIdentifier) {hashtag: %{public}s, reminder: %{public}s}
REMCDHashtag+CloudKit: newlyCreatedRecord() will write to SharedToMeReminderCKIdentifier only if the tag was created by a participant {owner?: %{public}s, isShared?: %{public}s, hashtag: %{public}s, reminder: %{public}s}
REMCDHashtag+CloudKit: newlyCreatedRecord() (key=.sharedToMeReminderCKIdentifier) unsetting SharedToMeReminderCKIdentifier as the hashtag is markedForDeletion {hashtag: %{public}s}
REMCDHashtag+CloudKit: Unexpectedly got cdHashtag.reminder == nil in newlyCreatedRecord() (key=.reminder) {hashtag: %{public}s}
REMCDHashtag+CloudKit: newlyCreatedRecord() will set up a CK reference only if the tag was created by the owner {owner?: %{public}s, hashtag: %{public}s, reminder: %{public}s}
REMCDHashtag+CloudKit: newlyCreatedRecord() (key=.reminder) unsetting reminder CK reference as the hashtag is markedForDeletion {hashtag: %{public}s}
Reminder is marked for deletion but hashtag is not {hashtagID: %{public}s, reminderID: %{public}s}
Fixing broken references for hashtag {hashtagID: %{public}s, reminderID: %{public}s}
_TtC7remindd33RDXPCSuggestedAttributesPerformer
v48@0:8@16@24@32@?40
configurationSource
cachedList
cachedEditingSessionID
storePerformer
cachedMLModels
cachedContacts
contactStore
remindd.RDXPCSuggestedAttributesPerformer
Prewarming models
Loaded MLModels {models: %{public}s}
Sugested Attribute Performer failed loading embedding config
Unrecognized embedding method: 
 in Suugested Attribute Performer
Deallocating SuggestedAttributesPerformer
REMXPCSuggestedAttributesPerformer
v48@0:8@"REMStoreSwiftInvocation"16@"NSData"24@"NSDictionary"32@?<v@?@"REMStoreSwiftInvocationResult"@"NSError">40
_TtC7remindd20RDDispatchQueue_ObjC
utilityQueue
xpcDefaultQueue
com.apple.remindd.xpc.default
com.apple.remindd.background
com.apple.remindd.discretionary
com.apple.remindd.xpc.listener
com.apple.remindd.save
com.apple.remindd.xpc.ui.
com.apple.remindd.utility
com.apple.remindd.xpc.notification
_TtC7remindd30RDAlarmCoreSuggestionsConsumer
coreSuggestionHandler
RDAlarmCoreSuggestionsConsumer consume %ld producerAlarms
_TtC7remindd27RDTodayNotificationAssembly
_TtC7remindd16RDXPCEventStream
alarmHandlers
eventInterface
_TtCC7remindd16RDXPCEventStreamP33_42BD93B4E4BDBF740267D11659A1191423SystemXPCEventInterface
<XPCEventStream.Token: 
Not scheduling alarm because timeIntervalInSeconds > Int64.max
UserVisible
Setting xpc event {xpc_event: %s, date: %s}
Not scheduling alarm becuase dateInNanoSeconds > Int64.max
Starting XPC Event Stream
Tried to start XPCEventStream twice. Crashing...
Received xpc_event missing name {xpc_event: %s}
com.apple.remindd.xpcalarm
os_transaction RELEASE {name: com.apple.remindd.xpcalarm}
os_transaction INIT {name: com.apple.remindd.xpcalarm}
Delivering xpc_event to handlers {handlers.count: %ld}
Received xpc_event with no handlers -- Dropping {xpc_event: %s}
Unsetting alarm {eventName: %s}
Received xpc event {xpc_event: %s}
_TtC7remindd60RDStoreControllerMigrator_DiacriticsInsensitiveHashtagLabels
DiacriticsInsensitiveHashtagLabelsMigrator BEGIN {store: %{public}s}
DiacriticsInsensitiveHashtagLabelsMigrator END {store: %{public}s, existing hashtag labels count = %ld, newly created hashtag labels count: %ld}
DiacriticsInsensitiveHashtagLabelsMigrator with error: %s
DiacriticsInsensitiveHashtagLabelsMigrator: hashtag [%{public}s] does not have canonicalName
DiacriticsInsensitiveHashtagLabelsMigrator: Failed to create hashtag label with hashtag [%{public}s] {error: %{public}s}
DiacriticsInsensitiveHashtagLabelsMigrator: hashtag label '%@' is already in database
DiacriticsInsensitiveHashtagLabelsMigrator: hashtag [%{public}s] does not match hashtag label name '%s'
DiacriticsInsensitiveHashtagLabelsMigrator: process hashtag label '%s' with hashtags: %ld
remindd1
insertNewJournalEntriesIfEligible()
 %s: Object is not eligible for journaling {remObjectID: %{public}s}
 %s: Unable to unwrap optional storeControllerManagedObjectContext {remObjectID: %{public}s}
 %s: Considering reminder activity {remObjectID: %{public}s}
 %s: 
 Failure - Insertion of new `%{public}s` sync activity for shared entity {remObjectID: %{public}s}
 %s: 
 Success - Insertion of new `%{public}s` sync activity for shared entity {remObjectID: %{public}s}
makeObject(for:)
 %s: An unexpected error occurred {remObjectID: %{public}s, description: %{public}s}
 REMSharedActivityJournaling: Unable to get list from reminder {reminderObjectID: %{public}s, isConcealed: %s}
 REMSharedActivityJournaling: Unable to get ckServerRecord for reminder {reminderObjectID: %{public}s}
 REMSharedActivityJournaling: Unable to get ckServerShare from reminder's list. Assuming unit testing and returning userRecordID {reminderObjectID: %{public}s, listObjectID: %{public}s}
 REMSharedActivityJournaling: Unable to get a participant for the reminder's author {authorID: %{public}s, reminderObjectID: %{public}s}
 REMSharedActivityJournaling: Unable to get lastModifiedUserRecordID from reminder {reminderObjectID: %{public}s}
 REMSharedActivityJournaling: Unable to get creatorUserRecordID from reminder {reminderObjectID: %{public}s}
isEligibleForJournaling
 %s: Object is not eligible for journaling {isSharedViaICloud: %s}
 %s: Object is not eligible for journaling - transactionAuthor: %{public}s
 %s: Object is not eligible for journaling {isAuthoredByCurrentUser: %s}
 %s: Object is not eligible for journaling {isConcealed: %s}
: Unable to get authorUserID for reminder {reminderObjectID: %{public}s}
 REMSharedActivityJournaling: Unable to get currentUserShareParticipantID from reminder. Assuming unit testing and returning CKCurrentUserDefaultName {reminderObjectID: %{public}s}
REMCDModelNSManagedObjectSwiftHooks
REMCDTemplate.mergeData(from record:accountID:) will insert pending post-save action '.notify_SharedToMeListPinnedStateDidBecomeStale' due to change in 'sourceListIDURL' {ckIdentifier: %{public}s, markedForDeletion: %{public}s, sourceListIDURL: %{public}s}
REMCDTemplate will not be used to represent a public template, which is fetched from a template's public link, and is not expected to be shared, we shouldn't upload it for non-owner (templateID: %{public}s)
PublicLinkLastModifiedDate
PublicLinkCreationDate
PublicLinkConfigurationData
MostRecentPublicLinkUpdateRequestDate
LastModifiedDate
Template (ckIdentifier: %{public}s) does not have a sorting style
_TtCO7remindd25RDStoreControllerExporter21DistributedEvaluation
salt
timezone
options
embeddingsURL
reminderTitleEmbeddings
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/RDStoreControllerExporter.swift
DES unrecognized embedding
Failed to load embedding config for Distributed Evaluation
DES recipe has includeReminderTitleCategoryFilteredStopWords = true, but failed initializing embedding for {lang: %s}
DES recipe has includeReminderTitleCategoryUniversalGrammar = true, but failed initializing embedding for {lang: %s}
DES recipe has includeReminderTitleCategorySentence2Vec = true, but failed initializing embedding for {lang: %s}
systemTimeZoneName
systemTimeZoneOffset
creationDayOfWeek
completionDayOfWeek
displayDayOfWeek
titleFuzzedEmbeddings
universalGrammar
filteredStopWords
locationAlarmIdentifier
locationAlarmProximity
recurrenceDescription
hasRemindMeWhenMessaging
%{public}s#rd_isExcludedFromBackup.get : Failed to retrieve URL resource values {url: %{public}s, error: %{public}s}
%{public}s#rd_isExcludedFromBackup.set : Failed to set URL resource values {url: %{public}s, error: %{public}s}
remindd
v20@0:8B16
rd_isExcludedFromBackup
TB,N
_TtC7remindd20RDNotifydEventStream
notificationName
notifyToken
Dropped notification becuase we don't have an event handler {notificationName: %s}
Deallocating notifyd stream {notificationName: %s}
Failed to register for notifyd notification {notificationName: %s, status: %u}
Registered notifyd notification {notificationName: %s}
Received notifyd notification after event stream was deallocated {name: %s}
notifydEventStream
Received notifyd notification {name: %s}
_TtC7remindd33RDContactInteractionAlarmProducer
dataSource
delegate
userInteractionSessionManager
shouldNotifyOfInteractionWithPeopleNotifyToken
shouldNotifyOfInteractionWithPeople
Producer did produce alarms {producer: %s, alarms.count: %ld}
shouldNotifyOfInteractionWithPeopleNotifyToken is invalid. Failed to update state {token: %d, value: %{bool}d}
Failed to update or post update to _REMStoreShouldNotifyOfInteractionWithPeopleNotificationName {notifySetStateStatus: %u,  notifyPostStatus: %u, value: %{bool}d}
shouldNotifyOfInteractionWithPeople value changed. Updating state {previousValue: %{bool}d, value: %{bool}d}
Starting people interaction alarm producer {producer: %s}
remindd.RDContactInteractionAlarmProducer
com.apple.remindd.RDContactInteractionAlarmProducer.didReceiveContactEvent
RDContactInteractionAlarmProducer received contact event
os_transaction INIT {name: com.apple.remindd.RDContactInteractionAlarmProducer.didReceiveContactEvent
os_transaction RELEASE {name: com.apple.remindd.RDContactInteractionAlarmProducer.didReceiveContactEvent
com.apple.remindd.RDContactInteractionAlarmProducer.contactStoreQuery
RDContactInteractionAlarmProducer.REMContactsProvider
Resolving contact names for newlySeenContactReps {newlySeenContactReps: %s}
os_transaction INIT {name: com.apple.remindd.RDContactInteractionAlarmProducer.contactStoreQuery}
DataSource returned alarms for contact interaction. {count: %ld}
DataSource returned no alarms for contact interaction. Done {contacts: %s}
All contactReps interacted with are recently-checkedIn already. Not producing anything. {contactRepresentation: %s}
didInteract.contacts is empty. Skipping
os_transaction RELEASE {name: com.apple.remindd.RDContactInteractionAlarmProducer.contactStoreQuery}
Producing alarms for contact interaction {activeCount: %ld, totalCount: %ld}
dataSource returned alarms that don't match any input contactReps {reminderID: %@, newlySeenContactReps: %s}
_TtC7remindd20RDFirstUnlockManager
transactionRegistrar
keyBagStateChangeCancellable
_TtC7remindd51RDTemplateOperationBatchDeleteCachedPublicTemplates
%s: Finished execution {deletionCount: %ld, elapsedSeconds: %f}
%s: Start execution
_TtC7remindd34RDICCloudExtraneousAlarmsCollector
scheduler
syncPerformer
statesStorage
extraneousAlarmsPendingSyncUpDeleteSubscription
debouncerOSTransaction
com.apple.remindd.RDICCloudExtraneousAlarmsCollector.runHandlerOnInit
RDICCloudExtraneousAlarmsCollector: started, subscribed to DidMarkExtraneousAlarmsPendingToSyncUpDelete {debounceInterval(randomized): %s}
os_transaction INIT {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.runHandlerOnInit}
os_transaction RELEASE {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.handleEvent}
com.apple.remindd.RDICCloudExtraneousAlarmsCollector.syncUpExtraneousAlarmDeletions
RDICCloudExtraneousAlarmsCollector: Unexpected nil RDICCloudExtraneousAlarmsSyncPerformer (ICCloudContext), bailing out from syncUp()
com.apple.remindd.RDICCloudExtraneousAlarmsCollector.syncUp
os_transaction INIT {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.syncUp}
os_transaction RELEASE {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.syncUp}
RDICCloudExtraneousAlarmsCollector: failed to fetch or save {error: %s}
RDICCloudExtraneousAlarmsCollector: set `statesStorage.extraneousAlarmsCollectorContainerDeemedClean` = %{bool}d
RDICCloudExtraneousAlarmsCollector: will continue to run because fetched triggers.count=%ld > deleteLimit=%ld
RDICCloudExtraneousAlarmsCollector: applied and saved REMCDObjectDirtyFlagsNeedDelete dirty flags to %ld alarm and triggers.
RDICCloudExtraneousAlarmsCollector: none of the fetched alarm triggers should apply REMCDObjectDirtyFlagsNeedDelete.
RDICCloudExtraneousAlarmsCollector: fetched extraneous alarm triggers {triggers.count: %ld, deleteLimit: %ld}
RDICCloudExtraneousAlarmsCollector: fetched 0 extraneous alarm triggers.
RDICCloudExtraneousAlarmsCollector: fetched an extraneous trigger without an alarm, skipping {triggerID: %s}
RDICCloudExtraneousAlarmsCollector: fetched an extraneous trigger/alarm without identifier, skipping {triggerID: %s, alarmID: %s}
RDICCloudExtraneousAlarmsCollector: Should not be producing DidMarkExtraneousAlarmsPendingToSyncUpDelete notification from transactions of RDICCloudExtraneousAlarmsCollector
com.apple.remindd.RDICCloudExtraneousAlarmsCollector.handleEvent
os_transaction INIT {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.handleEvent}
os_transaction RELEASE {name: com.apple.remindd.RDICCloudExtraneousAlarmsCollector.runHandlerOnInit}
RDICCloudExtraneousAlarmsCollector: stopped.
cascadeHashtagLabelApproval
{accountIdentifier: %@, activityType: %@, ckIdentifier: %@, sharedEntityName: %@, uuidForChangeTracking: %@
notesMayHaveDirtyHashtag
titleMayHaveDirtyHashtag
Cannot return a -remObjectID because REMCKSharedEntitySyncActivity does not have a UUID for change tracking {%@}
remActivityTypeToREMCKActivityType(_:)
 %s: An unexpected error occurred: unknown activityType: %{public}s
insertNewSyncActivity(using:into:)
 REMCKSharedEntitySyncActivity:%s | Unable to get storeController from RDStoreControllerManagedObjectContext
 REMCKSharedEntitySyncActivity:%s | Unable to get persistentStore for accountIdentifier.
makeActivityObject()
 %s: An unexpected error occurred {description: %{public}s, activityObject: %{public}s}
REMChangeTrackingIdentifiable
@"<REMChangedObjectIdentifying>"16@0:8
_TtC7remindd27RDAlarmNotificationConsumer
beforeFirstUnlockNotificationEngine
com.apple.remindd.RDAlarmNotificationConsumer.updateLastBannerPresentationDate
os_transaction INIT {name: com.apple.remindd.RDAlarmNotificationConsumer.updateLastBannerPresentationDate, producer: %{public}s}
Unable to update lastBannerPresentationDate reminder is Phantom {reminderID: %{public}@}
Updating lastBannerPresentationDate {reminderIDs: %{public}s, lastBannerPresentationDate: %{public}s}
RDAlarmNotificationConsumer skipping retain on alarm because already retained alarm for reminder in this consumeAlarms() run { identifier: %{public}s identifiersPresentedInThisRun:%{public}s }
RDAlarmNotificationConsumer {identifier: %{public}s createSet: %s, count: %{public}ld}
RDAlarmNotificationConsumer {identifier: %{public}s allowedSet: %s, count %{public}ld}
com.apple.remindd.RDAlarmNotificationConsumer.consumeAlarms
os_transaction INIT {name: com.apple.remindd.RDAlarmNotificationConsumer.consumeAlarms, producer: %{public}s}
os_transaction RELEASE {name: com.apple.remindd.RDAlarmNotificationConsumer.consumeAlarms, producer: %{public}s}
os_transaction RELEASE {name: com.apple.remindd.RDAlarmNotificationConsumer.updateLastBannerPresentationDate, producer: %{public}s}
Updated lastBannerPresentationDate {reminderIDs: %{public}s, lastBannerPresentationDate: %{public}s}
Unable to update lastBannerPresentationDate {reminderIDs: %{public}s, error: %s}
RDAlarmNotificationConsumer {identifier: %{public}s removeSet: %s, count: %{public}ld}
RDAlarmNotificationConsumer {identifier: %{public}s currentSet: %s, count: %{public}ld}
notificationCenter.releaseNotification {identifier: %{public}s}
notificationCenter.retainNotification {reminderID: %{public}@, skipBanner: %{public}s, content: %@}
notificationCenter.retainNotification will not be called because lastBannerPresentationDate is too recent {reminderID: %{public}@}
bannerBehavior determined {bannerBehavior: %{public}s, reminderID: %{public}@}
Not presenting reminderAlarm banner for SiriFoundInApps reminders. {reminderID: %@}
Unable to determine fireDate. An alarm without fireDate shouldn't have reached here. {alarm: %@, reminder: %s}
allowBanner? {lastBannerPresentationDate: %{public}s, fireDate: %{public}s, now: %{public}s, showBanner: %{public}s}
peopleInteraction
Failed to compute current hour when posting analytics to event com.apple.reminders.notification with {type: %s}
com.apple.reminders.notification
RDAlarmNotificationConsumer: Posted Alarm notification {reminderID: %{public}@}
RDAlarmNotificationConsumer: Unable to post Alarm notification {error: %s}
B16@0:8
isAbstract
_TtC7remindd30REMNSPersistentHistoryTracking
remindd.REMNSPersistentHistoryTracking
Scheduled by day must use the default displayDate ascending sorting style
Failed to group reminders by due date
Scheduled by day cannot fetch subtasks
Reminder has no oldList, no auxiliary reminder change info is needed {reminder.isInserted: %{bool,public}d, reminder: %{public}s, newList: %{public}s, isDeleted: %{bool,public}d}
Cannot add auxiliary reminder change info because storeControllerManagedObjectContext is nil
Failed to add auxiliary reminder change info due to error: %{public}s, isDeleted: %{bool,public}d
Adding an auxiliary reminder change DELETE info {reminder: %{public}s, oldList: %{public}s, newList: %s, isDeleted: %{bool,public}d}
Adding an auxiliary reminder change MOVE info {reminder: %{public}s, oldList: %{public}s, newList: %{public}s, isDeleted: %{bool,public}d}
_TtC7remindd28REMReminderStorageCDIngestor
REMReminderStorageCDIngestor:establishRelationship(onStorage:into cdReminder:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}
Updating reminder.list {reminder: %{public}s, list: %{public}s}
Undeleting hashtag {hashtagID: %{public}@, reminder: %{public}s}
Updating reminder.account {reminder: %{public}s, account: %{public}s}
Can't merge documents for reminder because remObjectID is nil {reminder.objectID: %@, key: %s}
Failed to merge documents for reminder {reminder.objectID: %@, key: %s}: %s
REMReminderStorageCDIngestor: merge(storage:into cdReminder:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}
Differential privacy common words collection
Title POS data collection
other_token_count
com.apple.reminders.created
Removing alarm from reminder {reminder.objectID: %@, alarm.objectID: %@}
Removing assignment from reminder {reminder.objectID: %@, assignment.objectID: %@}
Can't merge attachment for reminder because cdAttachment.remObjectID is nil {cdReminder.objectID: %@, cdAttachment.objectID: %@}
Removing attachment from reminder {reminder.objectID: %@, attachment.objectID: %@}
Removing hashtag from reminder {reminder.objectID: %@, hashtag.objectID: %@}
structured_tag_count
inline_tag_count
Can't merge recurrence rule for reminder because cdRecurrenceRule.remObjectID is nil {cdReminder.objectID: %@, cdRecurrenceRule.objectID: %@}
Removing recurrenceRule from reminder {reminder.objectID: %@, recurrenceRule.objectID: %@}
REMReminderStorageCDIngestor: cdReminder.account is nil {cdReminder.remObjectID: %@}
Error occured when mapping object from %s to %s {error: %s}
Found a dangling assignment with nullified assignee, we will skip it from the reminder.assignments {objectID: %s, originator: %s, assignee: %s, reminderID: %s}
Tried to insert an auxiliary change info before the related CD object is unlinked from its account. Bailing {author: 
Tried to insert an auxiliary change info before the related CD object is unlinked from its account. Bailing {author: %{public}s, cdType: %s}.
Tried to insert an auxiliary change info but storeController is nil. Bailing {author: 
Tried to insert an auxiliary change info but storeController is nil. Bailing {author: %{public}s, cdType: %s}.
Inserted %s {author: %{public}s}
REMCDReminderSwiftHooks
v32@0:8@"REMCDList"16@"REMCDList"24
_TtC7remindd16RDTimelineEngine
processors
debounceTimeInSeconds
publisher
TimelineEngine started with processors: %{public}s
TimelineEngine could not fetch reminders because %s
TimelineEngine fetched %ld reminders and returning %ld
TimelineEngine could not handle database changes because %s
Unable to create notification content with 0 reminders.
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/SharedListActivityNotificationsEngine/NotificationContentTypes/RDAddedReminderNotificationContent.swift
Unable to get title from reminder
Unable to get name from list
com.apple.remindd.sharedListReminderAddedNotification.multiple
com.apple.remindd.sharedListReminderAddedNotification.single
You must have at least 1 reminder to create notification body {numberOfReminders: 
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/SharedListActivityNotificationsEngine/RDSharedListActivityNotificationsEngine.swift
entry.account.remObjectID
entry.list.remObjectID
first journal entry
_TtC7remindd28RDRelevantShortcutsProcessor
loggingName
processingQueue
processor
%{public}s filtered %ld reminders down to %ld
TB,N,R
separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix
separatorInConcatenatedElementIDsWithLocalElementIDPrefix
Failed to update lastAccessed in REMCDManualSortHint {objectID: %s, error: %s}
Updated lastAccessed in REMCDManualSortHint {objectID: %s}
com.apple.remindd.sharedListReminderCompletedNotification.single
com.apple.remindd.sharedListReminderCompletedNotification.multiple
com.apple.remindd.beforeFirstUnlock
largecircle.fill.circle
com.apple.remindd.reminderAlarm
com.apple.remindd.assignmentNotification.single
Trying to create a shared list update notification without reminderIDs. Returning empty content. {reminderIDs: %s}
Trying to create a shared list update notification with inconsistent reminderIDs in parameters. Returning empty content. {reminderIDs: %s}
Trying to create a shared list update notification content without a list. Returning empty content. {reminderIDs: %s}
Trying to create a shared list update notification with 0 reminderIDs. Returning empty content. {reminderIDs: %s}
Trying to create an assignment notification content without reminderIDs. Returning empty content. {reminderIDs: %s}
Trying to create an assignment notification content with inconsistent reminderIDs in parameters. Returning empty content. {reminderIDs: %s}
Trying to create an assignment notification content without a list. Returning empty content. {reminderIDs: %s}
com.apple.remindd.assignmentNotification.multiple
Trying to create an assignment notification content with 0 reminderIDs. Returning empty content. {reminderIDs: %s}
(caldavSharedList) Trying to create a notificationContent with a list whose objectID doesn't match with the listID in the enum. Returning empty content. {list.objectID: %s, enum.listID: %@}
com.apple.remindd.dataaccess.caldav.sharedList
com.apple.remindd.todayNotificationBadge
com.apple.remindd.todayNotification
Trying to create a notificationContent without a reminder. Returning empty content. {notificationIdentifier: %s}
Setting BLTBulletinContextKeyWatchLegacyMapKey to %s
Error creating UNNotificationAttachment from UIImage {error: %s}
fetching reminders for training batch by batch {batchsize: %ld}
failed saving embedding config file to %s
embedding config file saved to %s
Training REMFilteredTitleEmbedding with %s
Done with fetching reminders for training. %ld distinct reminders fetched
com.apple.remindd.training
due_weekday_accuracy
location_accuracy
corebehavior
CoreBehavior terminated early. Retrying with support = %lu
Failed to save kNN model
kNN model training time: %{public}f
best k for kNN model is %{public}ld
trainEvaluatekNN started at %{public}s
REMSuggestedAttributesTrainer: failed to save anchoredBubbleModel to %s
REMSuggestedAttributesTrainer: anchoredBubbleModel saved to %s
REMSuggestedAttributesTrainer: tuning anchoredBubbleModel
REMSuggestedAttributesTrainer: anchoredBubbleModel using .defaultWordDistanceScale
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/SuggestedAttributes/REMSuggestedAttributesTrainer+RDInvocable.swift
_TtC7remindd27REMAccountStorageCDIngestor
REMAccountStorageCDIngestor: merge(storage:into cdAccount:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}
Actually really doing nothing for a merge on .listsDADisplayOrderChanged
NSManagedObjectContext missing author when updating account.type {storage: %@}
Creating Extraneous Local Account {author: %s}
Can't merge list ordering for account because remObjectID is nil {account.objectID: %@, key: %s}
Failed to merge ordered set for {objectID: %@, key: %s, error: %s}
serializedListIDsMergeableOrdering must be called only if hasDeserializedListIDsMergeableOrdering
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/PropertiesCoreDataConversion/CDIngestable/REMAccountStorage+CDIngestor.swift
Serialized to data from REMListStorage.listIDsMergeableOrdering during ingesting. {objectID: %{public}@}
failed to ingest manual ordering of pinned lists because feature flag for pinned lists is not enabled.
storage.pinnedListsManualOrdering should not be nil when calling `mergePinnedListsManualOrdering(storage:coordinator:)` {account: %{public}@}
ingesting manual ordering of pinned lists {account: %{public}@, top-level elements count: %ld}
storage.templatesManualOrdering should not be nil when calling `mergeTemplatesManualOrdering(storage:coordinator:)` {account: %{public}@}
ingesting manual ordering of templates {account: %{public}@, top-level elements count: %ld}
REMCDAccountStorage+CDIngestor: Could not post RDStoreControllerREMAccountPropertiesDidUpdate due to unexpected values {remObjectID: %s, changedKey: %s, changedValue: %s}
REMAccountStorageCDIngestor: mutateOrdering(...) cannot proceed because storage.listIDsMergeableOrdering is nil {objectID: %{public}@, key: %{public}s}
v32@?0@"NSString"8Q16^B24
REMAccountStorage+CDIngestor.mutateOrdering(): Could not proceed to upsertOrderedIdentifiersForAccountListView() because there is problem finding the persistent store for the account {account: %{public}s}
REMAccountStorage+CDIngestor.mutateOrdering(): Sorted intermixed ordered IDs for CSLs and Lists in REMCDAccountListData {account: %{public}s, #csls: %ld, #lists: %ld}
REMAccountStorage+CDIngestor.mutateOrdering(): Sorted account.smartLists {account: %{public}s, #smartLists: %ld}
sorting ordered set account.lists - after - {account: %@, lists: %s}
sorting ordered set account.lists - before - {account: %@, lists: %s}
REMAccountStorageCDIngestor: mutateOrdering() cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}
Cannot get any REMCDAccount from the ordered set of lists in the account.
Some lists have changes in .daDisplayOrder so DA display orders is taking precedence as the true sort hint - {account: %@}
v32@?0@"REMObjectID"8Q16^B24
Back propagated ordering changes to CD lists - {changes: %s}
Going to back propagate ordering changes to CD lists {listsCount: %ld}
REMAccountStorageCDIngestor: cdAccount.listIDsMergeableOrdering is nil, replacing with empty `Data()` {cdAccount.remObjectID: %{public}@}
Unexpected nil mergeable ordering data {objectID: %@, key: %s}
Failed to deserialize CR ordered set {objectID: %@, key: %s}: %s
_TtC7remindd37RDBeforeFirstUnlockNotificationEngine
Completing action handler by calling completionHandler now.
RDBeforeFirstUnlockNotificationEngine didn't expect to receive actions of this type. {type: %s, response: %@}
Handled dismissal of before first unlock notification successfully.
Unexpected action for notification type .beforeFirstUnlock {action: %s}
Processing notification response {actionIdentifier: %s, action: %s}
RDBeforeFirstUnlockNotificationEngine: Updating nextScheduledAlarmDate as we got a new future alarm date.
Posted Before First Unlock Notification
RDBeforeFirstUnlockNotificationEngine: Posted Before First Unlock notification
RDBeforeFirstUnlockNotificationEngine: Unable to post Before First Unlock notification {error: %s}
RDBeforeFirstUnlockNotificationEngine: Not going to presenting before first unlock notification as we don't have a due date.
RDBeforeFirstUnlockNotificationEngine: Scheduling to present before first unlock notification at a future time.
RDBeforeFirstUnlockNotificationEngine: Presenting before first unlock notification now because we have already passed the due date.
RDBeforeFirstUnlockNotificationEngine: Presenting before first unlock notification as we're now due.
RDBeforeFirstUnlockNotificationEngine: Going to update lastPresentAlarmDate based on delivered notifications.
RDBeforeFirstUnlockNotificationEngine: Found %ld delivered notifications, %ld considered for lastPresentAlarmDate.
Prefer using the store controller invoke() instead of this MoC invoke() for REMAccountsDataViewInvocation_fetchByExternalIdentifier
Couldn't fetch all requested accounts {extIds: %s, name: %s}
Putting account storages fetched from DB to cache {extIds: %s, name: %s}
None of the requested accounts could be fetched {extIds: %s, name: %s}
Fetching account storage by ExtID {input#: %ld, hit#: %ld, miss#: %ld, name: %s}
Couldn't fetch all requested accounts {objIDs: %s, name: %s}
Putting account storages fetched from DB to cache {objIDs: %s, name: %s}
None of the requested accounts could be fetched {objIDs: %s, name: %s}
Fetching account storage by ObjectID {input#: %ld, hit#: %ld, miss#: %ld, name: %s}
Unknown fetch type for REMAccountsDataViewInvocation_fetchActiveCloudKitAccountObjectIDs.invoke()
REMAccountsDataViewInvocation_fetchActiveCloudKitAccountObjectIDs: Unknown REMActiveCloudKitAccountFetchOption %{public}ld
Should not be calling REMAccountsDataViewInvocation_fetchPrimaryActiveCloudKitAccount.invoke(in managedObjectContext:)
Unexpectedly calling the invoke() with the MoC instead of with the storeController for REMAccountsDataViewInvocation_fetchPrimaryActiveCloudKitAccount
No need to fetching account storage because no active primary CK account is enabled {name: %s}
Unexpectedly fetched more than 1 account storage with inMemoryPrimaryActiveCKAccountREMObjectID()
Putting account storage fetched from primaryActiveCloudKitAccountOptimized() to storage cache {accountID: %@, name: %s}
Fetching account storage by ObjectID {input: %@, hit?: %ld, name: %s}
Unexpected nil primary active cloudkit account while inMemoryPrimaryActiveCKAccountREMObjectID() is non-nil
unknown purpose
Putting all generic account storages fetched from DB to cache {fetched#: %ld, name: %s}
Couldn't fetch all generic account storages from database {name: %s}
Fetching all generic account storages {cached#: %ld, name: %s}
account.storeControllerManagedObjectContext is nil
Unable to fetch manual ordering ID for tagged smart list without hash key provider
Creating tagged smart list with empty storage because tagged smart list not found due to error {error: %s}
_TtC7remindd23REMAssignmentCDIngestor
REMAssignmentCDIngestor: cdAssignment.reminder is nil {cdAssignment.remObjectID: %@}
REMAssignmentCDIngestor: cdAssignment.owningReminderIdentifier of this markedForDeletion assignment is nil {cdAssignment.remObjectID: %@}
REMAssignmentCDIngestor: cdAssignment.account is nil {cdAssignment.remObjectID: %@}
REMAssignmentCDIngestor: nullifiedRelationship assignee {assignmentID: %{public}@, reminderID: %{public}@}
REMAssignmentCDIngestor: assignee status is disallowed {assignmentID: %{public}@, reminderID: %{public}@}, assignee.status: %hd
REMAssignmentCDIngestor: assignee not belongs to the same list to the reminder's {assignmentID: %{public}@, candidateAssignee.list: %{public}s, assignment.reminder.list: %{public}s}
storage(from cdAssignment:): originator of this assignment was nullified {objectID: %{public}@, reminderID: %{public}@}
REMAssignmentCDIngestor: originator not belongs to the same list to the reminder's {cdAssignment.remObjectID: %{public}@, candidateOriginator.list: %s, assignment.reminder.list: %s}
REMAssignmentCDIngestor: originator status is disallowed {assignmentID: %{public}@, reminderID: %{public}@, originator.status: %hd}
REMAssignmentCDIngestor: cdAssignment.ckAssigneeIdentifier is nil {cdAssignment.remObjectID: %@}
REMAssignmentCDIngestor: Can't create UUID from ckAssigneeIdentifier {cdAssignment.remObjectID: %@}
Cannot get managedObjectContext from the given REMCDAssignment
FETCH COREDATA originatorIDFromCKOriginatorIdentifier() fetched sharee {uuid: %{public}s, result: %@, assignment: %s}
FETCH COREDATA originatorIDFromCKOriginatorIdentifier() sharee not found {uuid: %{public}s, assignment: %s}
FETCH COREDATA assigneeIDFromCKAssigneeIdentifier() fetched sharee {uuid: %{public}s, result: %@, assignment: %s}
FETCH COREDATA assigneeIDFromCKAssigneeIdentifier() sharee not found {uuid: %{public}s, assignment: %s}
_TtC7remindd17RDMigrationClient
v24@0:8@16
completionHandlers
migrationResult
invocationCount
failureCount
stateRestored
dismissed
waitingForReachability
wasUserInitiated
Creating new migration client {accountID: %{public}@}
Migration: account ID not found in the ACAccount store, will try to migrate anyway but expect failure {accountID: %{public}@}
com.apple.remindd.migration-fetchState
Internet is not available. Will resume migration when we have reachability {accountID: %{public}s}
migration-resume
No CloudKit account with Reminders enabled for the given account ID that matches this migration client {accountID: 
, cloudKitAccountObjectIDs: 
^https?://p([0-9]+)
Failed to determine user CalDAV partition
Making request to inverness for migration {accountID: %{public}s}
Migration call will use {partition: %u, serviceURLPrefix: %{public}s, accountID: %{public}s}
Setting up migration service call {accountID: %{public}s}
Invalid response from migrate request {accountID: %{public}s}
Migration server error {error: %{public}s, accountID: %{public}s}
We are an observer and will poll again in a %{public}f seconds {accountID: %{public}s}
Migration service response received {json: %{public}s, accountID: %{public}s}
Migrate request failed {error: %{public}@, accountID: %{public}s}
Migration client is told to dismiss. Ignore server response. {accountID: %{public}s}
com.apple.remindd.cloudKitMigration.finished
remindersMigrated
Client will retry migration {delay: %{public}f, invocationCount: %{public}ld, failureCount: %{public}ld, accountID: %{public}s}
Client terminated migration after 
 invocations and 
 failures. Migration terminated for 
Client terminated migration after too many retries {invocationCount: %{public}ld, failureCount: %{public}ld, accountID: %{public}s}
No next-step info from Server. Client will fallback to handle retry by itself {accountID: %{public}s}
Server instructed to retry migration {delay: %{public}d, invocationCount: %{public}d, failureCount: %{public}d, accountID: %{public}s}
Server terminated migration after 
Server terminated migration after too many retries {accountID: %{public}s, invocationCount: %{public}d, failureCount: %{public}d}
re-enable CloudKit account object and delete CalDAV account
No RDAccountUtils is found. Unable to %{public}s
RDAccountUtils will %{public}s {accountID: %{public}s}
re-create CalDAV account object and hide CloudKit account
com.apple.remindd.cloudKitMigration.revertToCalDAV
Reloaded accounts succesfully {accountID: %{public}s}
Failed to %{public}s {error: %{public}s, accountID: %{public}s}
Retry migration after delay {delay: %{public}f, accountID: %{public}s}
Cancel delayed retry becaue migration client was dismissed {accountID: %{public}s}
Failed saving migration state {error: %{public}s}
Can't find CoreData store for saving CloudKit account migration state {accountID: %{public}s}
reminders-migration
Creating Inverness client {accountID: %{public}s}
Completed Inverness request {requestUUID: %{public}s, accountID: %{public}@}
Completing migration {accountID: %{public}s, error: %{public}s}
Completing migration {accountID: %{public}s, result: %{public}@}
Migration failed
Making request to inverness for unmigration {accountID: %{public}s}
Setting up unmigration service call {accountID: %{public}s}
No response from unmigration service
Invalid unmigration response
Unmigration service returned error: 
com.apple.remindd.migration-purge
Purge all migration clients' states
Failed to delete migration state entities from the database {error: %{public}s}
Notify all migration clients to dismiss
com.apple.remindd.migration-client
com.apple.remindd.migration-resume-all
Resume all uncompleted migration processes
Failed to fetch migration states. Assume no active migration sessions
Wake up migration client {accountID: %{public}s}
_TtC7remindd39RDSharedListActivityNotificationsEngine
__debug_fetchedJournalEntries
__debug_processedJournalEntries
__debug_staleObjectIDs
appliedEngineConfiguration
_started
journalUpdatesSubscriptionTransactionRegistrar
accountSignInOrOutSubscriptionTransactionRegistrar
 RDSyncActivityEngine: Unexpected notification type {type: %s, response: %@}
 RDSyncActivityEngine: Unexpected action %s for notification type .sharedListAddedReminderNotification
 RDSyncActivityEngine: Processing shared list update notification {actionIdentifier:%s, reminderIDs: %s
consumeOnStart: 
, delayConsumeOnStart: 
, consumeFromStoreChanges: 
, storeChangesCoalescingPeriod: 
authorCKIdentifier
 RDSyncActivityEngine is already started! Multiple calls to `start()` were made.
 RDSyncActivityEngine is in manual testing mode. All subscribed hooks are disabled.
 RDSyncActivityEngine Started
 RDSyncActivityEngine: Startup Parameter Summary: {%s}
 RDSyncActivityEngine Starting...
 RDSyncActivityEngine - Unable to consume journal updates {error: %{public}s}
 RDSyncActivityEngine - Finished journal consumption
 RDSyncActivityEngine - Starting journal consumption
 RDSyncActivityEngine: Notification processing blocked by feature flag. Enable the `sharedListNotifications` flag to post user notifications.
 RDSyncActivityEngine: Skipping journal entry processing, no changes to process
com.apple.remindd.sharedListActivityNotification.
v16@?0@"UNNotificationSettings"8
Posted Shared List Activity Notification
 RDSyncActivityEngine: Posted Shared List Activity notification {identifier: %{public}s, body: %{public}s}
 RDSyncActivityEngine: Unable to post Shared List Activity notification {error: %s, identifier: %{public}s, body: %{public}s}
 RDSyncActivityEngine: Notifications posted successfully
 RDSyncActivityEngine: Processing entries - %ld
 RDSyncActivityEngine: Entry is not eligible for notifications {%{public}s}
 RDSyncActivityEngine: Received a journal entry with an unknown activity type {type: %{public}s}
 RDSyncActivityEngine: Received a journal entry with an unsupported activity type {type: %{public}s}
list.remObjectID
 RDSyncActivityEngine: Unsupported notification type: %{public}ld
 RDSyncActivityEngine: Deleted journal entries: %ld
 RDSyncActivityEngine: Up-to-date! No journal entries to delete
 RDSyncActivityEngine: Deleting journal entries
 RDSyncActivityEngine: Fetch Success - Consumed entries: %{public}ld
 RDSyncActivityEngine: Starting Fetch
 RDSyncActivityEngine: Unable to get ckIdentifier for reminder {identifier: %{public}s}
 RDSyncActivityEngine: Unable to make activity object for journal entry {identifier: %{public}s}
com.apple.remindd.RDSharedListActivityNotificationsEngine.journalEntryChangesEventScheduler
 RDSyncActivityEngine: received request to consume from storeDidChange
 RDSyncActivityEngine: Received request consume from engine start
 RDSyncActivityEngine: Account Signed Out {identifier: %{public}@, time: %{public}s}
 RDSyncActivityEngine - logged sign out event for {accountID: %{public}@}
 RDSyncActivityEngine - Error trying to clean up stale accoutns last enabled dates from user default upon `%{public}s` {error: %{public}s}
 RDSyncActivityEngine - Cleaned up stale accounts last enabled dates from user default upon `%{public}s` {accountIDs: %{public}s}
 RDSyncActivityEngine: Account Signed In {identifier: %{public}@, time: %{public}s}
 RDSyncActivityEngine - logged sign in event for {accountID: %{public}@}
_TtC7remindd29RDDifferentialPrivacyRecorder
$__lazy_storage_$_wordTokenizer
_TtC7remindd28RDKeybagStateProviderFactory
_TtC7reminddP33_99AA7822DE37A602875DE59F14E9E1BD25_FixedKeybagStateProvider
lockStatePublisher
lockState
hasUnlockedSinceBootPublisher
hasUnlockedSinceBoot
lockStateSubject
hasUnlockedSinceBootSubject
unlockInProgress
_TtC7remindd48RDStoreControllerCloudKitNetworkActivityObserver
isObsolete
remindd.RDStoreControllerCloudKitNetworkActivityObserver
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/SharedListActivityNotificationsEngine/NotificationContentTypes/RDCompletedReminderNotificationContent.swift
Found multiple instances of REMCDTemplate with identical objectID {objectID: %@, matches: %ld}
_TtC7remindd53RDTemplateOperationCopyRemindersFromREMListToTemplate
_TtC7remindd42RDDataStoreApplicationShortcutListProvider
applicationShortcutLists
preferredDefaultListIDObservationToken
isStarted
Removing RDDataStoreApplicationShortcutListProvider observer on store controller
v16@?0@"REMObjectID"8
RDDataStoreApplicationShortcutListProvider must be started at most once
Unable to fetch lists to use as application shortcuts {error: %s}
Received preferred default list ID changed after RDDataStoreApplicationShortcutListProvider was deallocated
Received store controller change notification after RDDataStoreApplicationShortcutListProvider was deallocated
(store.url = %@, store.identifier = %@)
remindd/REMCDList+CloudKit.swift
Can not instantiate REMCDList, should never happen
LastUserAccessDate
ReminderIDsMergeableOrdering
ReminderIDsMergeableOrderingAsset
ReminderIDsAsset
com.apple.reminders.list
Failed to update REMCDList with CKShare: managed object context is nil {list: %@, CKShare: %s}
Removing sharees {count: %ld}
Share stopped, clear sharing information and sharees
unknown permission
unknown acceptanceStatus
REMCDList.update(with share: CKShare?) will insert pending post-save action '.notify_SharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserDidBecomeStale' {ckIdentifier: %{public}s}
REMCDList.update(with share: CKShare?) will insert pending post-save action '.notify_SharedToMeListPinnedStateDidBecomeStale' {ckIdentifier: %{public}s}
Update list's sharing information and sharees with new CKShare {list: %@, share: %s}
(ckCloudState.inCloud == NULL OR ckCloudState.inCloud == 0)
MERGE.LOCAL: ...REMCDList.existingLocalObjectToMerge found a matching local REMCDList! {self: %{public}s, matched: %{public}s}
MERGE.LOCAL: ...Should not attempt to find existing local object for this concealed list, race condition? {self: %{public}s %{public}s}
A local reminder should not have non-nil ckZoneOwnerName
MERGE.LOCAL: ...done merging local list to the cloud list, now delete the local object {local.list: %{public}s, cloud.list: %{public}s}
MERGE.LOCAL: Error decoding reminder IDs ordered set and thus not able to add local reminders and sort child reminders {error : %s}
MERGE.LOCAL: ...updating reminderIDs ordering and re-sorting with added reminders {list: %{public}s}
MERGE.LOCAL: ...this local reminder is not matched/merged so we're adding it to the list {local.reminder: %{public}s, local.list: %{public}s, cloud.list: %{public}s}
MERGE.LOCAL: ...deleting isConcealed local reminder permanently {reminder: %{public}s %{public}s}
MERGE.LOCAL: The target CK list we are merging local reminders to is unexpectedly having non-nil ckZoneOwnerName. We are supposed to disallow merging into shared list {
A local reminder should not merge into a shared list
MERGE.LOCAL: ...childReminders is unexpectedly nil {self: %{public}s}
MERGE.LOCAL: ...this REMCDList should not try to merge with itself! {self: %{public}s, local: %{public}s}
MERGE.LOCAL: ...Should not attempt to merge with a concealed local list, race condition or corrupted database? {self: %{public}s, local: %{public}s %{public}s}
Down-casted Array element failed to match the target type
Expected 
NSArray element failed to match the Swift Array Element type
Expected 
REMObjectID_Codable
%K == NO AND %K <= %@
markedForDeletion
%K == YES OR %K > %@
ReferenceWritableKeyPath<REMCDSavedReminder, Optional<Data>>
PartialKeyPath<REMCDSavedReminder>
PartialKeyPath<REMCDTemplate>
(PreprocessedAttachment in _1753FA1DE56C6C0B2640C37797813109)
REMCDAccountListData
PartialKeyPath<REMCDAccountListData>
(REMCDReminderInZREMCDREMINDER in _D34138B4849670DACE6F1B1A25800AC4)
(REMCDListInModelVersionV5 in _D34138B4849670DACE6F1B1A25800AC4)
REMCKSharedEntitySyncActivity
REMSmartList_Codable
(PolymorphicListItem in _F1336D37D702B2C1BEEF72784365A110)
REMAccount_Codable
(PolymorphicListItem in _5EA99FF5FE7301BEB158BAF5BFFE0E33)
REMReminder_Codable
Not sorting child reminders becuase REMCDList.mutableOrderedSetValue(forKey: reminders) is nil
Sorting child reminders deferred {listRecordID: %{public}@}
MERGE.LOCAL: ...no matching local reminder found for cloud reminder {reminder: %{public}s, list: %{public}s}
MERGE.LOCAL: ...AFTER merging local reminder to cloud reminder (success: %{public}s, cloud: %{public}s, local: %{public}s, list: %{public}s}
MERGE.LOCAL: ...BEFORE merging local reminder to cloud reminder {cloud: %{public}s, local: %{public}s, list: %{public}s}
Tried to update listIDsMergableOrdering after fetching share / undeleting list but list has no parent account {listID: %{public}s}
REMCDList.mergeData(from record:accountID:) Unhandled sharingStatus {ckIdentifier: %{public}s, sharingStatus.rawValue: %{public}ld}
REMCDList.mergeData(from record:accountID:) will insert pending post-save action '.notify_SharedToMeListPinnedStateDidBecomeStale' {ckIdentifier: %{public}s}
Failed to create replicaIDSource when decoding mergeable ordered set for reminder IDS {cdList: %@}
Failed to decode mergeable ordered set for reminder IDS {error: %s, cdList: %@}
REMCDList.mergeData(from record:accountID:) will insert pending post-save action '.notify_SharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserDidBecomeStale' {ckIdentifier: %{public}s}
Failed to parse UUID strings JSON data {error: %s}
Deserializing reminderIDsMergeableOrdering from readMaybeBigStringOrderedSet() {recordID: %s}
Error decoding reminder IDs ordered set and thus not able to sort child reminders {error : %s}
REMCDList+CloudKit.sortChildReminders(): deserialized reminderIDsMergeableOrdering from data {remObjID: %s}
(DueDateVerifiableAlarm in _21DE925B29389F3F365F2E7E031C4B64)
(DueDateNonVerifiableAlarm in _21DE925B29389F3F365F2E7E031C4B64)
TitleDocumentAsset
RecurrenceRuleIDs
NotesDocumentAsset
Create Reminder CK record {self: %{public}s %{public}s} has %ld alarms exceeding limit %ld
MERGE.LOCAL: ......REMCDReminder.existingLocalObjectToMerge found a matching local REMCDReminder! {self: %{public}s, matched: %{public}s}
MERGE.LOCAL: ...Should not attempt to find existing local object for this concealed reminder, race condition? {self: %{public}s %{public}s}
MERGE.LOCAL: ...done merging local reminder to the cloud reminder, now delete the local object {local.reminder: %{public}s, cloud.reminder: %{public}s}
MERGE.LOCAL: ......adding local recurrence rules to the cloud reminder {local.rrules.count: %ld}.
merge(withLocalObject): We do actually expect recurrence-rules to support markForDeletion.
MERGE.LOCAL: ......removing original recurrence rules of the cloud reminder {cloud.rrules.count: %ld}.
MERGE.LOCAL: ......adding local alarms to the cloud reminder {local.alarms.count: %ld}.
MERGE.LOCAL: ......merge(withLocalObject): We expect alarms to support markForDeletion.
MERGE.LOCAL: ......removing original alarms of the cloud reminder {cloud.alarms.count: %ld}.
MERGE.LOCAL: ......server copy is newer, keep server data and delete local. {cloud: %{public}s, local: %{public}s, cloud.lastmod: %{public}s, local.lastmod: %{public}s}
MERGE.LOCAL: ......should not try to merge with itself! {self: %{public}s, local: %{public}s}
MERGE.LOCAL: ...Should not attempt to merge with a concealed local reminder, race condition or corrupted database? {self: %{public}s, local: %{public}s %{public}s}
Parent reminder is marked for deletion but this reminer is not {reminderID: %{public}s, parentReminder: %{public}s}
List is marked for deletion but this reminer is not {reminderIwD: %{public}s, list: %{public}s}
Fixing broken references for reminder {reminderID: %s, list: %{public}s, parentReminder: %{public}s}
remindd3
remindd4
@24@0:8@16
T@"CKRecord",N,&
Unable to deserialize CR property from CKRecord because replicaIDSource isn't available {key: %{public}s, cdObject: %@}
Failed to deserialize CRDT property {objectID: %{public}s, key: %{public}s}
validateAndFixupReminderTree: Reminder is detached from lists. Nothing needs to be done.
validateAndFixupReminderTree: Can't resolve the root of the reminder tree. {ckIdentifier: %{public}s}
validateAndFixupReminderTree: Going to update mismatched lists of remaining children attached to root.
validateAndFixupReminderTree: Going to update old children.
validateAndFixupReminderTree: Going to update newly computed children.
validateAndFixupReminderTree: Different in resolvedRoot.[
RootPlaceHolder mismatches ckZoneOwnerName
validateAndFixupReminderTree: ...Updated {root.list: %s}
validateAndFixupReminderTree: ...Updated {root.parent: nil}
validateAndFixupReminderTree: Going to update root. {objectID: %s}
validateAndFixupReminderTree {resolvedRoot: %s, childReminders: %{public}s}
validateAndFixupReminderTree: Detected a loop in reminder tree in CK server data. Selecting a stable root.
validateAndFixupReminderTree: {allConnectedReminders: %{public}s}
validateAndFixupReminderTree {rootMap: %{public}s}
validateAndFixupReminderTree {potentiallyConnectedReminders: %{public}s}
validateAndFixupReminderTree: Reminder has new root.
validateAndFixupReminderTree: Reminder has old root.
validateAndFixupReminderTree: There seems to be a multi-layer subtask tree in the database because the current reminder had both parent and children. Totally unexpected because the save request should have been rejected. {objectID: %s}
validateAndFixupReminderTree: There seems to be a multi-layer subtask tree in the database because the new root had both parent and children. Totally unexpected because the save request should have been rejected. {rootID: %s}
validateAndFixupReminderTree: Detected a loop in the new reminder tree. Multiple client may have raced. Going to fix the tree locally.
validateAndFixupReminderTree: Current reminder tree looks good. Skipping the fixup.
validateAndFixupReminderTree: Neither parent nor list is changed. Nothing needs to be done.
validateAndFixupReminderTree: Reminder has parent but no list. Assuming self.list = parent.list.
validateAndFixupReminderTree BEGIN {objectID: %s, parentID: %s, listID: %s}
validateAndFixupReminderTree: Different in child[
UpdateChildren mismatches ckZoneOwnerName
validateAndFixupReminderTree: ......Updated {child.list: %s}
validateAndFixupReminderTree: ......Updated {child.parent: %s}
validateAndFixupReminderTree: ...Going to update child. {objectID: %s}
findReminderRoot: This reminder has no parent. The root is self. {%{public}s => %{public}s}
findReminderRoot: Recursively found the root. {%{public}s => %{public}s}
findReminderRoot: Already visited this reminder. There is a loop. Assuming root is self. {%{public}s => %{public}s}
findReminderRoot: Root already computed. {%{public}s => %{public}s}
findReminderRoot BEGIN {id: %{public}s}
findReminderRoot END {id: %{public}s}
addSubtree: ckIdentifier is nil {objectID: %s}
canSkipFixupReminderTree: Moving across parent. We can't skip the validation because self's children may have been flattened to siblings in previous saves.
canSkipFixupReminderTree: Child list mismatch. Need to fixup.
canSkipFixupReminderTree: List changed and has children. Need to validate children.
canSkipFixupReminderTree: Multiple layers of subtasks. Need to flatten.
canSkipFixupReminderTree: Sibling list mismatch. Need to fixup.
canSkipFixupReminderTree: Parent changed list. Need to validate siblings.
validateAndFixupReminderTree END {objectID: %s, parentID: %s, listID: %s}
Trying to create REMCDSharedToMeReminderPlaceholder to a reminder object without MOC
REMCDReminder+CloudKit: Could not create REMCDSharedToMeReminderPlaceholder because storeController isn't available {reminder: %{public}s}
REMCDReminder+CloudKit: Could not create REMCDSharedToMeReminderPlaceholder because accountIdentifier is nil where account %{public}s nil and account.identifier %{public}s nil, {reminder: %{public}s}
REMCDReminder+CloudKit: Could not create REMCDSharedToMeReminderPlaceholder because there is problem finding the persistent store for the accountIdentifier %{public}s and the reminder {reminder: %{public}s}
Creating REMCDSharedToMeReminderPlaceholder for CloudKit: %{public}s
primaryActiveCloudKitAccountOptimized: Unexpectedly the primaryActiveCloudKitAccount.objectID() isTemporary, current design is to defer setting the account NSManagedObjectID cache until after saved {remObjectID: %{public}@}
updatePrimaryActiveCloudKitAccount: ATTENTION Someone is trying to inactivate an existing CK account {remObjectID: %{public}s}
updatePrimaryActiveCloudKitAccount: Writing RDPrimaryActiveCloudKitAccountManagedObjectIDCache with updated CD account {remObjectID: %{public}@, mid: %{public}@}
updatePrimaryActiveCloudKitAccount: Clearing RDPredefinedSmartListAndManualOrderingManagedObjectIDCache with nil input account
updatePrimaryActiveCloudKitAccount: Clearing RDPrimaryActiveCloudKitAccountManagedObjectIDCache with nil input account
primaryActiveCloudKitAccountREMObjectID: Cannot get the RDStoreController from RDStoreControllerManagedObjectContext. Fallback to call REMCDAccount._groundTruth_primaryActiveCloudKitAccountInContext(in:).
primaryActiveCloudKitAccountREMObjectID: {elapsed: %f}
primaryCloudKitAccountDidEnable: Passed in an account storage that is not .primaryCloudKit {remObjectID: %{public}@, type: %ld}
primaryCloudKitAccountDidEnable: Primary CloudKit account added or activated, setting inMemoryPrimaryActiveCKAccountREMObjectID {newAccountID: %{public}@}
primaryCloudKitAccountDidEnable: A primary active CloudKit account already exists (inMemoryPrimaryActiveCKAccountREMObjectID != nil) when we are adding or activating another different CloudKit account, we will still update the in-memory value {currentAccountID: %{public}s, newAccountID: %{public}@}
primaryCloudKitAccountDidEnable: Passed in an account storage that is markedForRemoval or inactive {remObjectID: %{public}@}
Released all cached CloudKit REMCD accounts
cloudKitAccountsDidChange(cloudKitAccountsChange: %{public}s)
__unitTest_RDStoreControllerPrimaryCloudKitAccountDidEnableOrDisableNotification
primaryCloudKitAccountDidDisable: Passed in an account storage that is not .primaryCloudKit {remObjectID: %{public}@, type: %ld}
primaryCloudKitAccountDidDisable: Passed in an account storage that is neither markedForRemoval nor inactive {remObjectID: %{public}@}
primaryCloudKitAccountDidDisable: A different primary active CloudKit account already exists (inMemoryPrimaryActiveCKAccountREMObjectID != nil) when we are removing or deactivating another different CloudKit account, not updating the in-memory value in this case {currentAccountID: %{public}s, removedAccountID: %{public}@}
primaryCloudKitAccountDidDisable: Primary CloudKit account removed or deactivated, unsetting both inMemoryPrimaryActiveCKAccountREMObjectID and clear its NSManagedObjectID cache {removing: %{public}@}
primaryActiveCloudKitAccountOptimized: Cannot get the RDStoreController from RDStoreControllerManagedObjectContext. Fallback to call REMCDAccount._groundTruth_primaryActiveCloudKitAccountInContext(in:).
primaryActiveCloudKitAccountOptimized: Returning nil because inMemoryPrimaryActiveCKAccountREMObjectID is nil {elapsed: %f}
primaryActiveCloudKitAccountOptimized: Unexpectedly fetched no active CK account from persistence. Should have returned early for nil inMemoryPrimaryActiveCKAccountREMObjectID if no active CK account is signed in. Indicates there is a bug.
primaryActiveCloudKitAccountOptimized: RDPrimaryActiveCloudKitAccountManagedObjectIDCache miss + write (after cache-write) {elapsed: %f (from start)}
primaryActiveCloudKitAccountOptimized: Unexpectedly primary CK REMCDAccount's objectID() isTemporary, should have saved the CD account before trying to access it via this API {remObjectID: %{public}@}
primaryActiveCloudKitAccountOptimized: Mismatching cdAccount.remObjectID with inMemoryPrimaryActiveCKAccountREMObjectID {cdAccount.remObjectID: %{public}s, in-memory: %{public}@}
primaryActiveCloudKitAccountOptimized: RDPrimaryActiveCloudKitAccountManagedObjectIDCache miss (before cache-write) {elapsed: %f}
primaryActiveCloudKitAccountOptimized: RDPrimaryActiveCloudKitAccountManagedObjectIDCache hit {elapsed: %f, mid: %@}
_TtC7remindd20REMHashtagCDIngestor
REMHashtagCDIngestor: cdHashtag.reminder is nil when nil reminder reference is not legit {cdHashtag.remObjectID: %@}
reminderIdentifier
REMHashtagCDIngestor: cdHashtag.reminderIdentifier is nil {cdHashtag.remObjectID: %{public}@, markedForDeletion: %{public}s, cdHashtag.sharedToMeReminderCKIdentifier: %{public}s}
REMHashtagCDIngestor: cdHashtag.account is nil {cdHashtag.remObjectID: %{public}@}
_TtC7remindd27RDSynchronizedKeyValueStore
keyValueStore
NSUbiquitousKeyValueStoreChangeReasonKey from notification.userInfo
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/RDSynchronizedKeyValueStore/RDSynchronizedKeyValueStore.swift
RDSynchronizedKeyValueStore.storeDidChangeExternally: Error decoding notification content: %s
Decode ChangeEvent.Reason from UBKVS changeReason: 
NSUbiquitousKeyValueStoreChangedKeysKey from notification.userInfo
RDSynchronizedKeyValueStore.storeDidChangeExternally[%{public}s]: Received notification {reason: %{public}s}
REMCDSavedReminder will not be used to represent a reminder in a public template, which is fetched from a template's public link, and is not expected to be shared. It shouldn't be uploaded for non-owner (savedReminderID: %{public}s)
REMCDSavedReminder+CloudKit: Unexpectedly got cdSavedReminder.template == nil in newlyCreatedRecord() (key=.template) {savedReminder: %{public}s}
REMCDSavedReminder+CloudKit: newlyCreatedRecord() (key=.template) unsetting template CK reference as the saved reminder is markedForDeletion {savedReminder: %{public}s}
ParentSavedReminderIdentifier
Template is marked for deletion but saved reminder is not {savedReminderID: %{public}s, templateID: %{public}s}
Fixing broken references for saved reminder {savedReminderID: %{public}s, templateID: %{public}s}
REMCDSavedReminder+CloudKit: Failed to decode `\REMCDSavedReminder.metadata` as `RDSavedReminder` {savedReminderID: %{public}s}
_TtC7remindd53RDTemplateOperationCreateTemplatePublicContentPreview
templatePublicLinkConfiguration
remindersCountLimit
templatePublicContentPreviewTTL
%{public}s: Failed to create preview of template's public content. {templateObjectID: %{public}@, privacy: .public), error: %{public}s, elapsedSeconds: %f}
%{public}s: Saved preview in cache {previewObjectID: %{public}@, elapsedSeconds: %f}
%{public}s: Start execution {templateObjectID: %{public}@, templatePublicLinkConfiguration: %{public}@, remindersCountLimit: %ld}
%{public}s: Finished execution {templateObjectID: %{public}@, templatePublicLinkConfiguration: %{public}@, remindersCountLimit: %ld, elapsedSeconds: %f}
_TtC7remindd28RDXPCActivityTimeEventStream
xpcEventStream
xpcEventStreamToken
eventHandler
Registering Time Event Handler
XPCActivityTimeEventStream received event {xpc_event: %s}
Unregistering xpcEventStreamToken {xpcEventStreamToken: %s}
Adding XPC time event {date: %{public}s}
_TtC7remindd59RDTemplateOperationCopyRemindersFromPublicTemplateToREMList
targetListObjectID
%{public}s: Finished execution {templateObjectID: %{public}@, targetListObjectID: %{public}@, limitPerSave: %ld, elapsedSeconds: %f}
%{public}s: Deleted REMCDPublicTemplate in Core Data store {templateObjectID: %{public}@, elapsedSeconds: %f}
%{public}s: Fetched saved reminders in public template {templateObjectID: %{public}@, topLevelRemindersCount: %ld, elapsedSeconds: %f}
%{public}s: Start execution {templateObjectID: %{public}@, targetListObjectID: %{public}@, limitPerSave: %ld}
%{public}s: Copied %ld out of %ld top-level reminders to target list {templateObjectID: %{public}@, targetListObjectID: %{public}@, elapsedSeconds: %f}
attachmentContext
_TtC7remindd27REMRecurrenceRuleCDIngestor
REMRecurrenceRuleCDIngestor: cdRecurrenceRule.reminder is nil {cdRecurrenceRule.remObjectID: %@}
REMRecurrenceRuleCDIngestor: cdRecurrenceRule.account is nil {cdRecurrenceRule.remObjectID: %@}
newCloudObject: Unknown attachment type {type: %s}
mergeData: Unknown attachment type {type: %s}
Reminder is marked for deletion but attachment is not {attachmentID: %{public}s, reminderID: %{public}s}
Fixing broken references for attachment {attachmentID: %{public}s, reminderID: %{public}s}
Not a file attachment {Type: %s}
No store controller for updating file attachment {record: %@}
File attachment has no remObjectID {record: %@}
File attachment has no account {remObjectID: %{public}@, record: %@}
Record.type is image but this is not an image attachment {type: %s}
Record.type is file but this is not a file attachment object {type: %s}
Filename is not a string {value: %s}
No store controller for updating file attachment {remObjectID: %{public}@, accountUUID: (%{public}s, record: %@}
File asset missing for file attachment {remObjectID: %{public}@, accountUUID: (%{public}s, record: %@}
File asset missing fileURL for file attachment {remObjectID: %{public}@, accountUUID: %{public}s, record: %@}
Could not generate sha512Sum from file asset {remObjectID: %{public}@, accountUUID: %{public}s, record: %@}
Failed to update attachment file {error: %s, remObjectID: %{public}@, accountUUID: (%{public}s, record: %@}
Record.type is url but this is not a URL attachment {type: %s}
remindd2
T@"REMColor",N,D,&
TB,N,D
T@"NSURL",N,D,C
T@"REMCDAccount",N,D,&
Failed to get name from xpc event. Not posting analytics for notifyd notification
_TtC7remindd17RDLaunchAnalytics
lock
alreadyPosted
LAUNCH EVENT {client: %{public}s, reason: %{public}s}
_TtC7remindd30RDStalePinnedListsEventHandler
debounceInterval
osTransactionForHandlingEvent
osTransactionForDebouncingEvent
isHandlingEvent
isDebouncingEvent
%s: Finished debouncing event
com.apple.remindd.RDStalePinnedListsEventHandler.debounceEvent
%s: Started debouncing event
%s: Failed to handle event {error: %{public}s}
%s: Updated pin state {list: %{public}s, isPinnedByCurrentUser: %{bool,public}d}
%s: Did fetch lists shared to current user {count: %{public}ld, objectIDs: %{public}s)}
%s: Did fetch pinned lists' manual ordering {identifiersInPinnedListsOrdering: %{public}s}
RDStalePinnedListsEventHandler.handleEvent
%s: Finished handling event
com.apple.remindd.RDStalePinnedListsEventHandler.handleEvent
%s: Started handling event
_TtC7remindd21RDWidgetRefreshEngine
storeControllerNotificationCenterToken
widgetRefresh
RDWidgetRefreshEngine: Unknown QoS. {qualityOfService: %{public}ld}
requested widget refresh
_TtC7remindd28RDXPCChangeTrackingPerformer
v32@0:8q16@?24
v48@0:8@16@24Q32@?40
implementation
v24@?0@"NSDictionary"8@"NSError"16
fetchAuxiliaryChangeInfos with {auxiliaryChangeInfoObjectIDs: %{public}s}
fetchHistory after {date: %{public}s}
fetchHistory after {token: %{public}s}
v24@?0@"REMChangeSet"8@"NSError"16
saveTrackingState with {clientID: %{public}s, trackingState: %{public}s}
v24@?0@"REMChangeTrackingState"8@"NSError"16
getTrackingState with {clientID: %{public}s}
remindd.RDXPCChangeTrackingPerformer
earliestChangeToken for {accountID: %{public}s}
currentChangeToken for {accountID: %{public}s}
currentChangeToken for {accountTypes: %ld}
currentChangeToken initiated
REMXPCChangeTrackingPerformer
v24@0:8@?<v@?@"REMChangeToken">16
v32@0:8q16@?<v@?@"REMChangeToken">24
v32@0:8@"NSString"16@?<v@?@"REMChangeToken">24
v32@0:8@"<REMChangeTrackingClientIdentifying>"16@?<v@?@"REMChangeTrackingState"@"NSError">24
v40@0:8@"REMChangeTrackingState"16@"<REMChangeTrackingClientIdentifying>"24@?<v@?@"NSError">32
v48@0:8@"REMChangeToken"16@"NSArray"24Q32@?<v@?@"REMChangeSet"@"NSError">40
v48@0:8@"NSDate"16@"NSArray"24Q32@?<v@?@"REMChangeSet"@"NSError">40
v32@0:8@"REMChangeToken"16@?<v@?@"NSError">24
v32@0:8@"NSArray"16@?<v@?@"NSDictionary"@"NSError">24
_TtC7remindd80RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler
com.apple.remindd.RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler.debounceEvent
%s: Updated mostRecentTargetTemplateIdentifierByCurrentUser of shared-to-me list {list: %{public}s, mostRecentTargetTemplateIdentifierByCurrentUser: %{public}s}
%s: Did fetch expected mapping of 'mostRecentTargetTemplateIdentifierByCurrentUser' by 'sourceListIdentifier' {mapping: %{public}s}
RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler.handleEvent
com.apple.remindd.RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler.handleEvent
_TtC7remindd47RDStagedLightweightCoreDataMigrationCoordinator
B48@0:8@16@24@32^@40
B40@0:8@16@24^@32
modelName
bundle
allModelVersionIdentifiers
postMigrationDataUpdateByModelVersionIdentifier
_TtCC7remindd47RDStagedLightweightCoreDataMigrationCoordinatorP33_D88389F778BE955B340162F613733C4913BabysitTarget
storeURL
crashDetectedAnalyticsEventName
remindd.BabysitTarget
com.apple.remindd.RDStagedLightweightCoreDataMigrationCoordinator.babysitter:
remindd.RDStagedLightweightCoreDataMigrationCoordinator
No file exists at sourceStoreURL {sourceStoreURL: 
Path extension of sourceStoreURL is not 'sqlite' {sourceStoreURL: 
Path extension of destinationStoreURL is not 'sqlite' {destinationStoreURL: 
A file already exists at destinationStoreURL {destinationStoreURL: 
sourceStoreURL and destinationStoreURL should be different {sourceStoreURL: 
, destinationStoreURL: 
com.apple.remindd.RDStagedLightweightCoreDataMigrationCoordinator.crashDetected
Did perform staged lightweight migration {storeURL: %{public}s, modelName: %{public}s, finalVersionIdentifier: %{public}s, elapsedSeconds: %f}
Will perform staged lightweight migration {storeURL: %{public}s, modelName: %{public}s, initialVersionIdentifier: %{public}s, persistentStoreDescriptionOptionsOverride: %s}
Failed to load destinationModel {modelName: 
, destinationVersionIdentifier: 
Failed to remove persistent store from persistent store coordinator after staged migration {storeURL: %{public}s, error: %{public}s}
Did perform post-migration data update {storeURL: %{public}s, modelName: %{public}s, versionIdentifier: %{public}s, elapsedSeconds: %f}
Will perform post-migration data update {storeURL: %{public}s, modelName: %{public}s, versionIdentifier: %{public}s}
com.apple.remindd.RDStagedLightweightCoreDataMigrationCoordinator.StagedMigrationsInfo
sourceVersionIdentifier
destinationVersionIdentifier
postMigrationDataUpdate.time
v24@?0@"NSPersistentStoreDescription"8@"NSError"16
'storeURL' is not supported by this migration coordinator {storeURL: 
, coordinator.modelName: 
Failed to find managed object model with matching version identifier {storeURL: %{public}s, modelName: %{public}s}
Found managed object model with matching version identifier {storeURL: %{public}s, modelName: %{public}s, versionIdentifier: %{public}s}
Found compatible managed object model of store {storeURL: %{public}s, modelName: %{public}s, versionIdentifier: %{public}s}
performStagedLightweightMigrationForStore
Failed to fetch metadata for storeURL {storeURL: %{public}s, error: %{public}s}
DABabysittable
_TtC7remindd22CDIngestionCoordinator
applyCRDTsWithoutMerging
noSideEffectChanges
differentialPrivacyRecorder
changedKeys
mode
syncToCloudKit
upsertBlocks
establishRelationshipBlocks
mutateRelationshipOrderingBlocks
afterSaveActionBlocks
ingestionContextsByAccountIdentifier
_TtCC7remindd22CDIngestionCoordinator16IngestionContext
accountIdentifier
persistentStore
fetchedObjectsMap
insertedObjectsMap
cdChangedValuesMap
Persistent store not found for some ingestables, the store may have been removed before this save request. Aborting the entire save for integrity. {accountIdentifier: %{public}s}
Could not convert accountIdentifier to CDObjectID to initializeIngestionContexts {accountIdentifier: 
Could not convert accountIdentifier to CDObjectID to initializeIngestionContexts {accountIdentifier: %{public}s}
deleteOrphaned()
[%{public}s] Updated objects to inspect for orphan {count: %ld}
[fetchIndexedAccount] Invalid accountIdentifier, cannot construct CDObjectID {accountIdentifier: 
[fetchIndexedAccount] Invalid accountIdentifier without matching ingestionContext {accountIdentifier: 
activityDate
activityTypeRawValue
authorUserRecordIDString
ckParentCloudObjectEntityName
ckParentCloudObjectIdentifier
sharedEntityName
_TtC7remindd19RDTimeAlarmProducer
timeEventStream
Alarm trigger did change for time alarm producer
com.apple.remindd.RDTimeAlarmProducer.reload
RDTimeAlarmProducer.reload
RDAlarmProducerDataSource.fetchAllTimeDataSourceAlarms
os_transaction INIT {name: com.apple.remindd.RDTimeAlarmProducer.reload}
os_transaction RELEASE {name: com.apple.remindd.RDTimeAlarmProducer.reload}
RDTimeAlarmProducer.start() must be called before setupTimers
RDTimeAlarmProducer.addNextAlarmTimeEvent
No alarm with future fireDate -- Done
Next alarm is in the past -- Not adding event {fireDate: %{public}s}
Scheduling next alarm {fireDate: %{public}s, nextAlarm: %s, reminderID: %{public}@, recurrent: %{public}s, overdue: %{public}s}
RDTimeAlarmProducer is setting up the timers
RDTimeAlarmProducer.start() must be called before fireExpiredAlarms
RDTimeAlarmProducer.produceExpiredAlarms
RDTimeAlarmProducer is firing expired alarms, count = %ld
RDTimeAlarmProducer is firing expired alarms
RDTimeAlarmProducer expiredAlarm {reminderID: %{public}@, fireDate: %{public}s alarmType: %{public}s, recurrent: %{public}s}
Starting time alarm producer {producer: %s}
RDTimeAlarmProducer.start() must be called exactly once
Received RDTimeEventHandler event on deallocated RDTimeAlarmProducer
remindd.RDTimeAlarmProducer
Tried to fire timeInterval alarm with nil dueDate {reminder: %s}
_TtC7remindd11RDXPCDaemon
daemon
debugPerformer
syncInterfacePerformerFactory
indexingPerformer
contactInteractionWriter
coreSuggestionsHandler
Tried to create REMStore after RDXPCDaemon was deallocated
storeControllerForStoreContainerToken
remindd.RDXPCDaemon
_TtC7remindd27RDCoreSuggestionsController
service
Done processing expiredReminders, counts {expire: %ld, error: %ld}
Unable to find siriFoundInAppsData. {reminderID: %@}
Reminder is not in SiriFoundInApps list {reminderID: %@, listID: %@}
Unable to get SGRecordId from siriFoundInAppsData. {reminderID: %@, siriFoundInAppsData.count: %ld}
Processing %ld expiredReminders {reminders: %s}
CoreSuggestions reminderAlarmTriggered(for:) completed
CoreSuggestions reminderAlarmTriggered(for:) completed with error {error: %s}
Done processing reminderStorages, counts {confirm: %ld, reject: %ld, none: %ld, error: %ld, irrelevant: %ld}
unknown siriFoundInAppsUserConfirmation
CoreSuggestions rejectReminder sent {sgRecordID: %@}
CoreSuggestions confirmReminder sent {sgRecordID: %@}
Processing %ld reminderStorages {reminderStorages: %s}
CoreSuggestions confirmReminder completed
CoreSuggestions confirmReminder completed with error {error: %s}
CoreSuggestions rejectReminder completed
CoreSuggestions rejectReminder completed with error {error: %s}
Searching by spotlightItemIdentifier in CoreData is unsupported
Searching REMCDReminder by location is unsupported. {criteria: %s}
$a.trigger.entity = %@
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/Store/REMCDReminder+Fetching.swift
Failed to pre-fetch reminders to mutate ordering; This save will be slow
Pre-fetching {result.count: %ld}
Reminder missing account {error: 
alarmStorage.trigger
Unexpected .localInternal in AccountsListDataView
Fetched customSmartLists(for:in:) that contain duplicated smart lists {keys: %{public}s}
Fetched a REMCDSmartList from customSmartLists(for:in:) that has nil remObjectID {accountID: 
Fetched topLevelListsAndGroups that contain duplicated lists {keys: %{public}s}
Fetched a REMCDList from topLevelListsAndGroups that has nil remObjectID {accountID: 
_TtC7remindd25RDAlarmProducerDataSource
debug_currentUserSharee
clientIdentity
Did hit error while producing alarms. Returning empty array {error: %s}
Failed to perform managedObjectContext operation {error: %@, managedObjectContext: %@}
Fetched reminder is missing contact handle. Skipping {reminderID: %{public}@}
Fetched reminder is not assigned to current user. Skipping {reminderID: %{public}@}
RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter fireDate is earlier than now for alarm. Skipping {alarmID: %{public}@ nowDate: %{public}@}
RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter is using default fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@}
RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter is calculating fireDate for overdue recurring alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@ nextFireDate: %{public}@}
RDTimeAlarmProducerDataSource: nextProducerAlarmFiringAfter alarm {alarmID: %{public}@ isSnooze: %{public}s isRecurring: %{public}s}
RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore fireDate is later than now for alarm. Skipping {alarmID: %{public}@ nowDate: %{public}@}
RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore fireDate is earlier than ackDate for alarm. Skipping {alarmID: %{public}@ finalFireDate: %{public}@ ackDate: %{public}@}
RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore is using default fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@}
RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore is calculating fireDate for alarm {alarmID: %{public}@ dataSourceAlarm.fireDate: %{public}@ previousFireDate: %{public}@}
RDTimeAlarmProducerDataSource: expiredProducerAlarmsBefore alarm {alarmID: %{public}@ isSnooze: %{public}s isRecurring: %{public}s}
TimeDataSourceAlarms: Failed to get REMReminder, REMAlarm or triggerEvent from cdTrigger -- skipping {cdTrigger: %@}
VehicleDataSourceAlarms: Failed to get REMReminder, REMAlarm or triggerEvent from cdTrigger -- skipping {cdTrigger: %@}
LocationDataSourceAlarms: Failed to get cdAlarm from trigger. {cdTrigger: %@}
LocationDataSourceAlarms: Failed to get reminderID from cdAlarm.reminder. {cdAlarm: %@}
LocationDataSourceAlarms: Failed to get remReminder from dataView result {reminderID: %{public}@}
LocationDataSourceAlarms: Failed to get remAlarm from remReminder.alarms {alarmID: %{public}s}
LocationDataSourceAlarms: remAlarm.trigger is not a RDCLRegionSource (REMAlarmLocationTrigger) {remAlarm.trigger: %@}
LocationDataSourceAlarms: Unable to get CLRegion from remAlarm.trigger {remAlarm.trigger: %@, reminderID: %{public}@}
LocationDataSourceAlarms: remReminder is not assigned to current user. Skipping {reminderID: %{public}@}
_TtC7remindd73RDStoreControllerMigrator_MostRecentTargetTemplateIdentifierByCurrentUser
%s: BEGIN {store: %{public}s}
%s: FAILED {store: %{public}s, error: %{public}s}
%s: END {store: %{public}s, elapsedSeconds: %{public}f}
mostRecentTargetTemplateIdentifierByCurrentUser
%s: Set '\REMCDList.mostRecentTargetTemplateIdentifierByCurrentUser' of some shared lists to nil {store: %{public}s, count = %{public}ld, elapsedSeconds: %{public}f}
%s: Fetched '\REMCDTemplate.identifier' of all non-deleted templates in persistent stores {store: %{public}s, count = %{public}ld, elapsedSeconds: %{public}f}
%s: Copied value of '\REMCDList.mostRecentTargetTemplateIdentifier' to '\REMCDList.mostRecentTargetTemplateIdentifierByCurrentUser' via 'NSBatchUpdateRequest' {store: %{public}s, count = %{public}ld, elapsedSeconds: %{public}f}
_TtC7remindd25RDSuggestedAttributeCache
RDSuggestedAttributeCache: Recording %{public}s suggestion from %{public}s with value: %s
RDSuggestedAttributeCache: Posting suggestion metric for %ld suggestions
com.apple.reminders.EditingFinished
RDSuggestedAttributeCache: Sugestion record {%s}
RDSuggestedAttributeCache: Comparing cached suggestions with true values {%s} from the commited reminder
RDSuggestedAttributeCache: Comparing cached suggestions with true value {%s} from the commited reminder
No cached value found for session: %s list: %s
Loading cached list: %s for session: %s
REMSuggestedAttributesHarvester.MentionsExtractionInvocation should not be called with 'parameters.listID', which belongs to list representation of a template. {parameters.listID: %{public}@}
loaded parameter: %s
loaded model in invocation
metadata
T@"REMCDSavedReminder",N,D,&
_TtC7remindd41RDTemplateOperationDownloadPublicTemplate
%{public}s: Start execution {recordName: %{public}s}
%{public}s: Failed to download public template {recordName: %{public}s, error: %{public}s, elapsedSeconds: %f}
%{public}s: Downloaded public template {recordName: %{public}s, elapsedSeconds: %f}
%{public}s: Failed to save public template in cache {recordName: %{public}s, error: %{public}s, elapsedSeconds: %f}
%{public}s: Saved public template in cache {recordName: %{public}s, elapsedSeconds: %f}
%{public}s: Finished execution {recordName: %{public}s, elapsedSeconds: %f}
FirstDayOfTheWeek
Reminder is marked for deletion but recurrence rule is not {recurrenceRuleID: %{public}s, reminderID: %{public}s}
Fixing broken references for recurrence rule {recurrenceRuleID: %{public}s, reminderID: %{public}s}
$hashtag.reminder
Failed to compute subQueryPredicate for REMCDHashtagLabel.Predicates.withConcealedHashtag
Unexpected nil canonical name REMCDHashtagLabel from hashtagLabelNames(from: ) {mid: %{public}@}
Skipping HashtagLabel with nil canonicalName in hashtagIDsByCanonicalNames(from:) {mid: %{public}@}
Skipping HashtagLabel with nil canonicalName in reminderIDsByHashtagLabelNames(from:) {mid: %{public}@}
Skipping nil HashtagLabel in reminderIDsByHashtagLabelNames(from:)
Skipping HashtagLabel with nil name in reminderIDsByHashtagLabelNames(from:) {mid: %{public}@}
Should not call keysForImmutable(ingestor:) for mutable ingestable type {ingestor: %s}
Tried to create CDIngestableKey array without changedKeys, the ingestable may be missing an REMChangedKeysObserver in the change item {type: %{public}s}
_TtC7remindd31REMCalDAVNotificationCDIngestor
.daPushKey should not be practically used in REMCalDAVNotification
.daSyncToken should not be practically used in REMCalDAVNotification
REMCalDAVNotificationCDIngestor: cdCalDAVNotification.owner is nil {cdCalDAVNotification.remObjectID: %@}
REMCalDAVNotificationCDIngestor: cdCalDAVNotification.account is nil {cdCalDAVNotification.remObjectID: %@}
Failed to get '\REMCDTemplate.publicLinkConfiguration' due to error upon decoding '\REMCDTemplate.publicLinkConfigurationData' as 'REMTemplatePublicLinkConfiguration' {remObjectID: %{public}s, error: %{public}s}
Failed to set '\REMCDTemplate.publicLinkConfiguration' due to error upon encoding 'newValue' as 'Data' {remObjectID: %{public}s, newValue: %{public}@, error: %{public}s}
didCleanUpManualSortHintOnMarkingForDeletion
defaultPublicLinkURLHostname
REMCDTemplate: Attempted to call 'setPropertyAndUpdateResolutionTokenMap(propertyKeyPath:to:)' with newValue, which has incorrect type {objectID: %{public}s, keyPath: %{public}s}}
cleanUpManualSortHintIfNeeded: Unexpectedly nil template account.remObjectID {templateID: %{public}s}
cleanUpManualSortHintIfNeeded: Template was deleted due to non-user-initiated changes, cleanup is not needed {templateID: %{public}s}
cleanUpManualSortHintIfNeeded: Failed to delete manual sort hint of CSL being deleted {templateID: %{public}s, error: %s}
cleanUpManualSortHintIfNeeded: Template was deleted due to user-initiated changes, will delete its associated sort hint {templateID: %{public}s}
/reminders/template/
%s: Failed to compute public link URL {templateID: %{public}s, publicLinkURLUUID: %{public}s, hostname: %{public}s, isUsingDisplayedHostnameOfACAccount: %{public}s}
%s: Computed public link URL {templateID: %{public}s, publicLinkURL: %{public}s, isUsingDisplayedHostnameOfACAccount: %{public}s}
REMCDModelSwiftHooks
_TtC7remindd35RDStoreControllerNotificationCenter
observers
RDStoreControllerNotificationCenter: Incorrect usage of rem_pipeLineOfAccountsDidEnableOrDisable() {label: %{public}s}
accountsDidDisable
accountsDidEnable
os_transaction RELEASE {name: com.apple.remindd.storeControllerNotificationCenter.%{public}sPublisher}, label: %{public}s
com.apple.remindd.storeControllerNotificationCenter.
os_transaction INIT {name: com.apple.remindd.storeControllerNotificationCenter.%{public}sPublisher}, label: %{public}s
RDStoreControllerNotificationCenter.%{public}s[%{public}s]: Received notification that has no %{public}s in the user info
RDStoreControllerNotificationCenter.%{public}s[%{public}s]: Received notification {author: %{public}s}
com.apple.remindd.storeControllerNotificationCenter
os_transaction INIT {name: com.apple.remindd.storeControllerNotificationCenter}, label: %s
RDStoreControllerNotificationCenter: Store notification is ICCC or change tracking internal changes only. Skipping.
os_transaction RELEASE {name: com.apple.remindd.storeControllerNotificationCenter}, label: %s
RDStoreControllerNotificationCenter.handleNotification: Unknown QoS, handling it like `default`. {qualityOfService: %{public}ld}
Firing latest value after delay {coalescedUpdates: %ld, value: %s, completionBlocks: %ld, debouncer: %s}
Cancelling pending work item {debouncer: %s}
RDDebouncer.sampleFire: First fire sampled {label: %s}
RDDebouncer.sampleFire: Sample exceeds threshold for starting a new window, resetting load measurements {label: %s, elapsed: %f, threshold: %f}
No measurements to dequeue from to get the oldest sample value when updating load factor
RDDebouncer.sampleFire: Sampled {label: %s, elapsed: %f, n: %ld}
com.apple.remindd.rddebouncer
os_transaction INIT {name: com.apple.remindd.rddebouncer}, label: %s
loadFactor wasn't properly initialized even with debouncing interval option set to .loadFunction
os_transaction RELEASE {name: com.apple.remindd.rddebouncer}, label: %s
Failed to cast userInfo[%{public}s] to Set<NSManagedObjectID>
Entity in the given filter option not recognized in managedObjectContext {entityName: %{public}s, managedObjectModel: %s}
os_transaction RELEASE {name: com.apple.remindd.storeControllerNotificationCenter.storeDidChangePublisher}, label: %{public}s
com.apple.remindd.storeControllerNotificationCenter.storeDidChangePublisher
os_transaction INIT {name: com.apple.remindd.storeControllerNotificationCenter.storeDidChangePublisher}, label: %{public}s
RDStoreControllerNotificationCenter.storeControllerDidChange[%{public}s]: Received notification {author: %{public}s}
Received store did change notification but observer is deallocated
_TtC7remindd22RDBogusCalendarCleaner
cleanUpManualSortHintIfNeeded: Unexpectedly having a non-custom smart-list getting markedForDeletion {type: %{public}s, remObjectID: %{public}s}
cleanUpManualSortHintIfNeeded: Unexpectedly nil smart list remObjectID {type: %{public}s}
cleanUpManualSortHintIfNeeded: Unexpectedly nil smart list account.remObjectID {type: %{public}s, smartListUUIDString: %{public}s}
cleanUpManualSortHintIfNeeded: CSL was deleted due to non-user-initiated changes, cleanup is not needed {listID: %{public}s}
cleanUpManualSortHintIfNeeded: Failed to delete manual sort hint of CSL being deleted {listID: %{public}s, error: %s}
cleanUpManualSortHintIfNeeded: CSL was deleted due to user-initiated changes, will delete its associated sort hint {listID: %{public}s}
reminders %ld updated %ld inserted %ld
Failed to  CKContainer for accountID {accountID: 
Failed to fetch CKContainer for accountID {accountID: %s}
Downloading records in zone %@
Failed in fetchChangesOp.recordWasChangedBlock {recordID: %{public}s, error: %s}
Failed to serialize record {record: %s, error: %s}
Not pulling in CKPackage, the db of which lives at %s
ListIDsMergeableOrderingAsset
ListIDsMergeableOrdering
com.apple.remindd.RDCloudDebuggingUtils
DecodedListIDsMergeableOrdering
Error fetching record zones {error: %s}
_TtC7remindd31RDUserInteractionSessionManager
userDefaults
No checked-in -- Checking in {interaction: %@}
timeout expired -- reset check-in {interaction: %@}
timeout hasn't expired -- don't check-in {interaction: %@}
Failed to encode stored for checkIns {error: %{public}s, interaction: %@}
CheckIn not found -- Adding new one {interaction: %@, date: %s}
Replacing existing checkIn {interaction: %@, date: %s}
Failed to encode checkIns -- encodging empty array {error: %{public}s}
No stored checkIns -- returning empty array
Failed to decode stored checkIns -- returning empty array {error: %{public}s}
Failed to decoded encoded CheckIns -- return empty array {error: %{public}s}
Unexpected count for checkIn {count: %ld}
alarm.reminder.completed
alarm.reminder.completionDate
_TtC7remindd20RDAccountInitializer
DidCompleteInitializeAllAccountsNotification
RDAccountInitializerDidCompleteInitializeAllAccountsObserver
@32@0:8@?16@24
RDAccountInitializer: Error occured trying to initialize local accounts {error: %{public}s}
RDAccountInitializer: updateLocalAccountActiveStatus: Let's ensure local account is active as there's no cloud account signed in.
RDAccountInitializer: updateLocalAccountActiveStatus: Let's ensure local account is inactive (if empty) as we have some cloud accounts.
RDAccountInitializer: Setting account inactive value {accountID: %{public}@, inactive: %{public}s}
RDAccountInitializer: Not handling account data moves because we have not passed buddy or system data migrator
RDAccountInitializer: No iCloud account signed in or not enabled Reminders.
RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: Data move not needed as no merge action flag was not set by the DCO.
RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: The DCO flagged identifier is not the same as that of the current primary iCloud account. Something went wrong or we've found a race condition, don't move data {flagged: %{public}s, primary: %{public}s}.
RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: Error occurred when trying to move data from local to iCloud {flagged: %{public}s error: %{public}s}
RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: No iCloud REM account found in database, we can't move data. {flagged: %{public}s}.
RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: Local account is empty, we won't move local data to cloud {flagged: %{public}s}.
RDAccountInitializer: moveLocalDataToCloudAccountIfNeeded: DCO has set the merge action flag asking us to move data to cloud, let's move on... {flagged: %{public}s}
RDAccountInitializer: removeInactivatedCalDavAccountIfNeeded: There's no inactivated CalDAV account store to remove, we're done {appleAccountIdentifier: %{public}s}.
RDAccountInitializer: removeInactivatedCalDavAccountIfNeeded: Removed inactivated CalDAV account store {remAccountObjID: %{public}@, appleAccountIdentifier: %{public}s}.
RDAccountInitializer: removeInactivatedCalDavAccountIfNeeded save failed {error: %s, appleAccountIdentifier: %{public}s}
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: No need to 'migrate' inactivated CalDAV data as no signal flag is set.
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: No need to 'migrate' inactivated CalDAV data no signal flag is set for account %{public}s.
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: Error occurred when trying to move data from inactivated iCloud CalDav to CloudKit account {aaAccountIdentifier: %{public}s, error: %s}
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: cloudKitAccount.didChooseToMigrate should be true at this point but it isn't, something went wrong and we can't move data {aaAccountIdentifier: %{public}s}.
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: No CloudKit REM account found in database, something went wrong and we can't move data {aaAccountIdentifier: %{public}s}.
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: No inactive iCloud CalDAV account was found, no need to move data {aaAccountIdentifier: %{public}s}.
RDAccountInitializer: migrateInactivatedCalDavDataIfNeeded: AccountUtil has set the flag indicating we should try to 'migrate' inactivated CalDAV data to CloudKit if any {aaAccountIdentifier: %{public}s}.
RDAccountInitializer: We are still in buddy
RDAccountInitializer: System data migration has not finished
RDAccountInitializer: No local account is found or created
RDAccountInitializer: Creating default list for local account {accountID: %{public}@}
RDAccountInitializer: This should never happen: the store told us there's no lists in this account but we did find a list with the default list ID {listID: %{public}@}
RDAccountInitializer: Creating local account {changeItem: %@}
StoreController not supportsLocalInternalAccount. Skipping initializeLocalInternalAccountIfNeeded
RDAccountInitializer: Creating SiriFoundInApps list {listChangeItem: %@}
RDAccountInitializer: Creating localInternal account {accountChangeItem: %@}
Failed to query whether Extraneous Local Account is empty. Skipping {accountObjID: %{public}@, account: %@}
Extraneous Local Account is not empty. Not Removing {accountObjID: %{public}@, account: %@}
com.apple.remindd.extraneousLocalAccountRemoved
Extraneous Local Account is empty. Removing {accountObjID: %{public}@, account: %@}
Removing Extraneous Local Accounts {candidateAccounts.count: %ld}
RDAccountInitializer: Posting notification initialized all accounts done.
RDAccountInitializer: Posting notification initialized all accounts failed.
RDAccountInitializerDidCompleteInitializeAllAccounts
com.apple.reminders.RDAccountInitializer
RDAccountInitializer: No need to update in-memory PrimaryActiveCKAccountCaches {current: %{public}s
RDAccountInitializer: Calling updateInMemoryPrimaryActiveCKAccountCachesIfNeeded with {remObjectID: %{public}s, managedObjectID: %{public}s}
remindd.DidCompleteInitializeAllAccountsObserver
remindd.RDAccountInitializer
_TtP7remindd28RDAccountInitializerObserver_
activities
processQueue
activityExecutionQueue
backgroundSchedulerFactory
backgroundScheduler
accountsDidDisableCancellable
reduceFactor
_TtC7remindd33RDJitteredMinimumDelayXPCActivity
delay
minimumDelay
allowBattery
isCPUIntensive
isDiskIntensive
_TtC7remindd40RDJitteredMinimumDelayXPCActivityFactory
Obtained babysitter token for {waiterID: %{public}s, executable: %{public}s}
Released babysitter token for {waiterID: %{public}s, executable: %{public}s}
Babysitting operation because it failed too many times {operation: %{public}s, waiterID: %{public}s}
RDJitteredMinimumDelayXPCActivity: Updating scheduler (xpcActivity) criteria {inputDelay: %f, jitteredMinimumDelay: %f}
RDHousekeepingActivityScheduler: reduceFactor=(%f) is larger than 1. It will set to 1.
RDHousekeepingActivityScheduler: reduceFactor(=%f) is less than 0. It will set to 0.
RDHousekeepingActivityScheduler: Some accounts have been logged out or disabled. Resetting babysitter for {waiterID: %{public}s}
RDHousekeepingActivityScheduler: Unexpectedly could not get a scheduler (xpcActivity) when trying to schedule a new one
RDHousekeepingActivityScheduler: Activity with smallest throttling interval {identifier: %{public}s, due: %{public}s, interval: %.*f}
RDHousekeepingActivityScheduler: Must have at least 1 activity to call q_updateBackgroundActivityCriteria()
RDHousekeepingActivityScheduler: Unexpectedly having pending activity on the scheduler (xpcActivity) when trying to create and schedule a new one
RDHousekeepingActivityScheduler: aq_syncRunScheduledActivity
RDHousekeepingActivityScheduler: Running scheduled background activity took %f ms
RDHousekeepingActivityScheduler: Running scheduled background activity
RDHousekeepingActivityScheduler: Trying to execute activity {identifier: %{public}s, lastExecuted: %{public}s}
RDHousekeepingActivityScheduler: Activity [%{public}s] failed with error {%{public}s}
RDHousekeepingActivityScheduler: Activity [%{public}s] is babysat, skipping...
RDHousekeepingActivityScheduler: Activity [%{public}s] is throttled, skipping... {resetDate: %{public}s}
RDHousekeepingActivityScheduler: activity %s decided that it doesn't want to run at this moment
RDHousekeepingActivityScheduler: activity %s randomly disallowed by rate reducer
RDHousekeepingActivityScheduler: Unexpectedly having an existing non-nil backgroundScheduler when trying to create and schedule a new one
RDHousekeepingActivityScheduler: Starting
RDHousekeepingActivityScheduler: No activities registered, we are not starting
today data view unable to group %ld reminders %s
B24@0:8^@16
enqueueApprovalCascade: Failed to cascade HashtagLabel approval due to nil canonicalName {uuidForChangeTracking: %{public}s}
enqueueApprovalCascade: Failed to acquire handle to managedObjectContext {canonicalName: %s}
enqueueApprovalCascade: Failed to acquire handle to account identifier for HashtagLabel {canonicalName: %s}
cleanUpManualSortHintIfNeeded: Deleted hashtag label has nil canonicalName, abort cleanup
cleanUpManualSortHintIfNeeded: Hashtag label was deleted due to non-user-initiated changes, cleanup is not needed {canonicalName: %s}
cleanUpManualSortHintIfNeeded: No accountIdentifier when the hashtag label is deleted {canonicalName: %s}
cleanUpManualSortHintIfNeeded: Fail to fetch CK account when the hashtag label is deleted {canonicalName: %s, accountIdentifier: %{public}s}
cleanUpManualSortHintIfNeeded: Could not obtain manualSortIDHashKeyProvider in the CK account when the hashtag label is deleted {canonicalName: %s, accountIdentifier: %{public}s}
cleanUpManualSortHintIfNeeded: Failed to delete manual sort hint of hashtag label being deleted {canonicalName: %s, error: %s}
cleanUpManualSortHintIfNeeded: Hashtag label was deleted due to user-initiated changes, will delete all associated sort hints for the label {canonicalName: %s}
account.remObjectID
savedReminder.remObjectID
Failed to initialize RDSavedAttachment because 'cdSavedAttachment.attachmentTypeRawValue' is not supported {attachmentTypeRawValue: 
cdAccount.managedObjectContext is nil for REMCDAccountListData.upsert(orderedIdentifiers:account:into:)
_TtC7remindd26RDManualSortIDCacheContext
accountManualSortIDByAccountIDCache
elementManualSortIDByReminderIDCache
RDManualSortIDCacheContext > cleared all
RDManualSortIDCacheContext > initialized
operationTypeRawValue
Ts,N,D
priorityRawValue
isCompleted
templateIdentifier
listIdentifier
configurationData
_TtC7remindd19REMShareeCDIngestor
REMShareeCDIngestor: cdSharee.list is nil {cdSharee.remObjectID: %@}
REMShareeCDIngestor: cdSharee.account is nil {cdSharee.remObjectID: %@}
_TtC7remindd22RDTransactionRegistrar
counter
osTransaction
RDTransactionRegistrar[%{public}s]: Transaction count decremented to {count: %ld}
RDTransactionRegistrar[%{public}s]: Trying to decrement counter to negative, grounding to zero {count: %ld, n: %ld}
RDTransactionRegistrar[%{public}s]: Transaction count is zero when osTransaction is not nil
RDTransactionRegistrar[%{public}s]: Transaction count is not zero when osTransaction is nil {count: %ld}
RDTransactionRegistrar[%{public}s]: Transaction count is negative {count: %ld}
RDTransactionRegistrar[%{public}s]: Transaction count incremented to {count: %ld}
target
reader
Unexpected entity name {entityName: 
REMRemindersDataViewInvocation_fetchByObjectID: Failed due to attempt to fetch by 'objectIDs' with unexpected entity name {entityName: %{public}s}
Every objectID in 'objectIDs' should have the same entity name.
REMRemindersDataViewInvocation_fetchByObjectID: Failed due to attempt to fetch by 'objectIDs' with multiple entity names.
_TtC7remindd58RDStoreControllerMigrator_UnsetCKDirtyFlagsInNonCKAccounts
UnsetCKDirtyFlagsInNonCKAccounts {store: %{public}s} accountIdentifier is nil, skip migration
UnsetCKDirtyFlagsInNonCKAccounts BEGIN {store: %{public}s}
UnsetCKDirtyFlagsInNonCKAccounts END {store: %{public}s, migrated ckDirtyFlagsInNonCKAccounts, accountIdentifier = %s, count = %ld}
UnsetCKDirtyFlagsInNonCKAccounts with accountIdentifier = %s, error: %s
UnsetCKDirtyFlagsInNonCKAccounts {store: %{public}s} with {account: %s} is not a CK account, skip migration
_TtC7remindd53RDTemplateOperationCopyRemindersFromTemplateToREMList
RDTemplateOperationCopyRemindersFromTemplateToREMList: Finished execution {templateObjectID: %{public}@, targetListObjectID: %{public}@, limitPerSave: %ld, elapsedSeconds: %f}
%{public}s: Fetched reminders in template {templateObjectID: %{public}@, topLevelRemindersCount: %ld, elapsedSeconds: %f}
RDTemplateOperationCopyRemindersFromTemplateToREMList: Start execution {templateObjectID: %{public}@, targetListObjectID: %{public}@, limitPerSave: %ld}
RDTemplateOperationCopyRemindersFromTemplateToREMList: Copied %ld out of %ld top-level reminders to target list {templateObjectID: %{public}@, targetListObjectID: %{public}@, elapsedSeconds: %f}
%{public}s: Copied attachment into reminderChangeItem {reminderChangeItem.remObjectID: %{public}@, cdSavedAttachment.remObjectID: %{public}s, copiedAttachment: %{public}@}
_TtC7remindd13RDMergePolicy
@24@0:8Q16
B32@0:8@16^@24
RDMergePolicy: Unknown conflict or non-REMCDObject merge conflict is not handled by remindd {conflict: %s}
RDMergePolicy: Neither persisted or cached snapshot is defined {conflict: %s}
RDMergePolicy: Resolution token map missing from the CDObject snapshot, don't know how to resolve conflict {conflict: %s
RDMergePolicy: Cannot decode data to resolution token map from the CDObject snapshot, don't know how to resolve conflict {conflict: %s
RDMergePolicy: skip merging key because it does not exist in the snapshot {key: %s, remObjectID: %s}
RDMergePolicy: Resolution token map says we shouldn't merge key: {key: %s, remObjectID: %s}
RDMergePolicy: Missing managed object context for resolving merge conflict {key: %s, remObjectID: %s}
RDMergePolicy: Going to merge key: {key: %s, remObjectID: %s}
listIDsMergeableOrdering_v2
RDMergePolicy: Error occured while trying to merge ordered set for: {key: %s, remObjectID: %s}
RDMergePolicy: let's check if we need to merge this key: {key: %s, remObjectID: %s}
<not-remcdobject>
RDMergePolicy: Constraint conflict is not handled by remindd, and expect some confusing error message from CoreData {constraint: %s, constraintValues: %s}
RDMergePolicy: Missing managed object context for resolving sharee constraint conflict {conflict: %{public}s}
RDMergePolicy: Some conflicting objects are not hashtag for resolving hashtag constraint conflict {conflict: %{public}s}
RDMergePolicy: Missing managed object context for resolving hashtag constraint conflict {conflict: %{public}s}
RDMergPolicy: context-level constraint conflict is unexpected and not handled for resolving hashtag constraint conflict {conflict: %{public}s}
RDMergPolicy: databaseObject is not a REMCDHashtag for resolving hashtag constraint conflict {conflict: %{public}s}
RDMergePolicy: cdReminder has no remObjectID {key: %s, cdReminder.objectID: %@}
RDMergePolicy: Could not get a replicaIDSource for reminder for key {key: %s, remObjectID: %@}
RDMergePolicy: Store snapshot document data is nil for the mergeable string document key {key: %s, remObjectID: %@}
RDMergePolicy: Failed to get the reminder remObjectID from the CDReminder {cdReminder: %@}
RDMergePolicy: Failed to get the account remObjectID from the CDReminder {cdReminder: %@}
RDMergePolicy: Unexpected reminder property key to get a replicaIDSource for it {key: %s}
RDMergePolicy: Store snapshot reminderIDs ordering data is nil for key {key: %s, remObjectID: %s}
RDMergePolicy: Deserialized reminderIDsMergeableOrdering from data {remObjectID: %s}
RDMergePolicy: cdAccount has no remObjectID {key: %s, cdAccount.objectID: %@}
RDMergePolicy: Could not get a replicaIDSource for account for key {key: %s, remObjectID: %@}
RDMergePolicy: Deserialized listIDsMergeableOrdering ordering from data {remObjectID: %s}
RDMergePolicy: Store snapshot listIDs ordering data is nil for key {key: %s, remObjectID: %@}
RDMergePolicy: Failed to get the account remObjectID from the CDAccount {cdAccount: %@}
RDMergePolicy: Unexpected account property key to get a replicaIDSource for it {key: %s}
RDMergePolicy: Merge policy type is not compatible with this merge policy, please use defaultMergePolicy() instead.
_TtCE7reminddCC19ReminderKitInternal23REMAccountsListDataView10InvocationP33_F1336D37D702B2C1BEEF72784365A11019PolymorphicListItem
modelObject
remObjectID
Trying to call accountChildGroup() when modelObject isn't a group
Skipping transaction becuase it contains no changes {transaction: %@}
Skipping change becuase it's not update {change: %@}
Skipping change unhandled type {objectID: %@}
Failed to cast managedObject to REMCDReminder {objectID: %@}
Updated reminder has no list -- skipping {reminder: %s}
Failed to cast managedObject to REMCDList {objectID: %@}
Failed to get remObjectID from REMCDList {objectID: %@}
Failed to cast managedObject to REMCDAccount {objectID: %@}
Failed to get remObjectID from REMCDAccount {objectID: %@}
Ignorning account change becuase it didn't update the name
Failed to fetch manual sort hint of pinned lists {error: %s}
REMAccountsListDataView.Invocation no cache
REMAccountsListDataView.Invocation unable to decode cache
Unable to encode accounts list cache %s
REMAccountsListDataView.ReminderCounts Saving cache data size %ld
Reminder missing list identifier. Skipping {reminder.identifier: %{public}s}
Computing reminders count in every list by fetching reminders as dictionaries {postFetchPredicateTypes: %s}
Computing reminders count in every list by fetching reminders as an array of REMCDReminder {postFetchPredicateTypes: %s}
REMAccountsListDataView.Invocation fetchCounts() failed to fetch custom smart lists {error: %s}
Trying to call accountChildListOrSmartList() when modelObject is a group
Trying to call groupChildListOrSmartList() when modelObject is a group
unknown or unsupported REM object type for REMAccountsListDataView.ListItem
Unable to decode accounts list cache
REMObjectIDIdentifiable
performPostMigrationDataUpdate(in:clientNamesOfREMCDChangeTrackingStateWhichShouldNotBeResetUponPersistentHistoryTruncation:)
[%s|%s] Did reset change tracking state {accountIdentifier: %{public}s, clientName: %{public}s, lastConsumedDate: %{public}s}
_TtC7remindd27RDApplicationShortcutEngine
listProvider
shortcutUpdater
RDApplicationShortcutEngine has no provider; not updating shortcuts
Updating application shortcuts from RDApplicationShortcutEngine {lists: %{public}s}
_TtC7remindd27REMManualOrderingCDIngestor
Cannot merge REMManualOrdering into cdManualSortHint, failed to find cdAccount from accountID: 
REMManualOrderingCDIngestor.accountID does not match with that of given in merge(storage:into:cdAccount:) {storage.accountID: 
, storage.objectID: 
, cdAccount.identifier: 
Error upon merging manual ordering {list type: %s, listID: %s, error: %s}
merging manual ordering {list type: %s, list ID: %s, top-level reminders count: %ld}
REMCDManualSortHintDidContainIDsWithLocalPrefix
REMManualOrderingCDIngestor.merge(storage:into:cdAccount:) does not know how to handle unknown list type: 
_TtC7remindd42RDTemplateOperationCopyRemindersToTemplate
sourceListObjectID
accountObjectID
templateConfiguration
limitPerSave
%{public}s: fetchRemindersInSourceList(in:) should be overridden by subclass
%{public}s: Skipped copying attachment into cdSavedReminder because attachment belongs to an unhandled subclass of REMAttachment {cdSavedReminder.remObjectID: %{public}s, sourceAttachment: %{public}@}
%{public}s: Copied attachment into cdSavedReminder {cdSavedReminder.remObjectID: %{public}s, sourceAttachment: %{public}@, savedAttachment: %{public}@}
%{public}s: Finished execution {templateObjectID: %{public}@, sourceListObjectID: %{public}@, limitPerSave: %ld, elapsedSeconds: %f}
%{public}s: Failed to fetch manual sort hint of template {templateObjectID: %{public}@}
%{public}s: Fetched reminders in source list {sourceListObjectID: %{public}@, topLevelRemindersCount: %ld, elapsedSeconds: %f}
%{public}s: Start execution {templateObjectID: %{public}@, sourceListObjectID: %{public}@, limitPerSave: %ld}
%{public}s: Copied %ld out of %ld top-level reminders to template {templateObjectID: %{public}@, sourceListObjectID: %{public}@, elapsedSeconds: %f}
@24@0:8^@16
_TtC7remindd23REMAttachmentCDIngestor
_TtC7remindd27REMFileAttachmentCDIngestor
_TtC7remindd28REMImageAttachmentCDIngestor
_TtC7remindd26REMURLAttachmentCDIngestor
REMFileAttachmentCDIngestor: cdFileAttachment.uti is nil {cdFileAttachment.remObjectID: %@}
REMFileAttachmentCDIngestor: cdFileAttachment.reminder is nil {cdFileAttachment.remObjectID: %@}
REMFileAttachmentCDIngestor: cdFileAttachment.account is nil {cdFileAttachment.remObjectID: %@}
REMImageAttachmentCDIngestor: cdImageAttachment.uti is nil {cdImageAttachment.remObjectID: %@}
REMImageAttachmentCDIngestor: cdImageAttachment.reminder is nil {cdImageAttachment.remObjectID: %@}
REMImageAttachmentCDIngestor: cdImageAttachment.account is nil {cdImageAttachment.remObjectID: %@}
REMURLAttachmentCDIngestor: cdURLAttachment.uti is nil {cdURLAttachment.remObjectID: %@}
REMURLAttachmentCDIngestor: cdURLAttachment.reminder is nil {cdURLAttachment.remObjectID: %@}
REMURLAttachmentCDIngestor: cdURLAttachment.account is nil {cdURLAttachment.remObjectID: %@}
_TtC7remindd18RDClientConnection
xpcDaemon
isUserInteractive
xpcConnection
notificationSubscriptionQueue
keepAliveTransaction
com.apple.remindd.RDClientConnection.shouldKeepAlive
com.apple.remindd.RDClientConnection.shouldNotKeepAlive
No clientProxy obtained.
Unable to get remoteObjectProxy for the app from the daemon. Maybe the client is gone? {error: %s}
Failed to create XPC performer. Is this a barebones daemon / before first unlock?
RDClientConnection: returning sync interface performer from %s
RDClientConnection: returning storePerformer from %s
os_transaction RELEASE {name: %s}
com.apple.remindd.keepAlive[
(UserInteractive)
remindd.RDClientConnection
 clientIdentity=
] xpcConnection=
, userInteractive=
Connection was invalidated {clientIdentity: %{public}s}
Connection was interrupted unexpectedly {clientIdentity: %{public}s}
AAACCOUNTS.com.apple.accountsd
com.apple.private.accounts.allaccounts
com.apple.private.systemmigration.daemonclient
com.apple.suggestd
com.apple.CoreSuggestions.suggest_tool
com.apple.private.calendar.syncclient
com.apple.exchangesync.exchangesyncd
Device is running a non-internal Install. Not providing remindtool access level
Unexpected privateRemindd entitlement format {reminddEntitlements: %{public}s}
Unexpected type for remindd entitlement {entitlement: %{public}s, value: %{public}s, type: %{public}s}
com.apple.siri-distributed-evaluation
com.apple.suggestd.reminders
com.apple.remindd.userInteractive
com.apple.remindd
com.apple.analyticsd
REMXPCDaemon
v40@0:8@"REMStoreContainerToken"16@"NSString"24@?<v@?@"<REMXPCChangeTrackingPerformer>"@"NSError">32
v40@0:8@"REMStoreContainerToken"16@"NSString"24@?<v@?@"<REMXPCDebugPerformer>"@"NSError">32
v48@0:8@"NSString"16@"REMStoreContainerToken"24@"NSString"32@?<v@?@"<REMXPCStorePerformer>"@"NSError">40
v32@0:8@"NSString"16@?<v@?@"<REMXPCSyncInterfacePerformer>"@"NSError">24
v32@0:8@"NSString"16@?<v@?@"<REMXPCIndexingPerformer>"@"NSError">24
REMXPCClient
schedulingStateStorage
performer
scheduledActivityTimeout
_TtC7remindd37RDICCloudSchemaCatchUpSyncXPCActivity
xpcActivity
_TtC7remindd44RDICCloudSchemaCatchUpSyncXPCActivityFactory
os_transaction RELEASE {name: com.apple.remindd.ICCloudSchemaCatchUpSyncController.q_syncRunScheduledActivity}
RDICCloudSchemaCatchUpSyncXPCActivity: Updating scheduler (xpcActivity) criteria {estimatedDuration: %{public}f}
ICCloudSchemaCatchUpSyncController
_TtC7remindd11RDThrottler
allowedOperationsCount
throttleInterval
throttleResetDate
currentIntervalAllowedOperationsCount
Throttler allows and is going to run operation {identifier: %{public}s, op: %{public}s}
Throttler denied operation {identifier: %{public}s, op: %{public}s, remainingTimeInterval: %.*f, throttleResetDate: %{public}s}
REMCDAlarmDateTrigger.generateNonce(): trigger.alarm not set before trying to call generateNonce() {triggerID: %{public}s}
REMCDAlarmTimeIntervalTrigger.generateNonce(): trigger.alarm not set before trying to call generateNonce() {triggerID: %{public}s}
REMCDAlarm.generateNonce(): alarm.reminder not set before trying to call generateNonce() {alarmID: %{public}s}
REMAlarmCDIngestor: Fatal programming fault, was expecting to map dueDateComponents storage value key to CD value key
REMAlarmCDIngestor: Failed to get resolution token map from reminder {reminderID: %{public}s}
REMAlarmCDIngestor: Failed to find the resolution token of 'dueDateComponents' from reminder {reminderID: %{public}s, mapKeys: %{public}s}
orderedIdentifierMap
T@"REMOrderedIdentifierMap",N,D,&
_TtC7remindd19RDCoreBehaviorModel
baseUrl
behaviorRetriever
trained
confidenceThreshold
timer
feedbackVersion
feedbackForRules
rules
_TtC7remindd35RDCoreBehaviorModelTrainingDelegate
trainingDataFrame
intentWords
RDCoreBehaviorFeedback.json
RDCoreBehaviorModel: Failed to encode feedback data
RDCoreBehaviorModel: Failed to save feedback data {error: %s}
RDCoreBehaviorModel: New feedback info saved to {%s}
remindd.RDCoreBehaviorModelTrainingDelegate
ReminderDueDayOfWeek
ReminderContactLabel
ReminderPriority
ReminderTitleIntent
ReminderAlarmLocationLabel
ReminderListIdentifier
com.apple.CoreBehavior.Timing
Reminders
Completion_Status
RDCoreBehaviorModel: invalidating timer since mining task did finish
RDCoreBehaviorModel: Filtered rules {rules.count: %ld, filtered.count: %ld}
remindd/RDCoreBehaviorModel.swift
Failed to cast bmtype {uncasted: 
RDCoreBehaviorModel: CoreBehavior is not up to date
RDCoreBehaviorModel.sqlite
RDCoreBehaviorModel: No existing CoreBehavior
RDCoreBehaviorModel: Removing rule: %s
RDCoreBehaviorModel: top corebehavior predictions: %s
RDCoreBehaviorModel: all corebehavior predictions: %s
RDCoreBehaviorModel: matching rules:
RDCoreBehaviorModel: number of matching rules: %{public}ld
RDCoreBehaviorModel: corebehavior context: %s
RDCoreBehaviorModel: Current feedback version {%lu}, skipping reset to version {%lu}
v16@?0@"NSTimer"8
RDCoreBehaviorModel: CoreBehavior mining task terminating early due to shouldDefer is true
RDCoreBehaviorModel: CoreBehavior mining task terminating early due to time out
RDCoreBehaviorModel: CoreBehavior mining task has run %s seconds
ReminderAlarmLocationLabel:home
ReminderAlarmLocationLabel:work
RDBMMiningTaskDelegate
BMMiningTaskDelegate
v24@0:8@"BMMiningTask"16
v32@0:8@"BMMiningTask"16@"NSArray"24
v32@0:8@"BMMiningTask"16@"NSDictionary"24
v32@0:8@"BMMiningTask"16@"NSSet"24
@"NSSet"32@0:8@"BMMiningTask"16@"NSSet"24
v32@0:8@"BMMiningTask"16@"NSError"24
@"NSArray"24@0:8@"BMMiningTask"16
_TtC7remindd22RDVehicleAlarmProducer
connectedToken
disconnectedToken
com.apple.locationd.vehicle.connected
com.apple.locationd.vehicle.disconnected
Starting RDVehicleAlarmProducer
RDVehicleAlarmProducer.start() must be called exactly once
com.apple.remindd.RDVehicleAarmProducer.locationd.vehicle.notify.
RDVehicleAarmProducer: Couldn't create os_transaction_t for %{public}s
os_transaction RELEASE {name: com.apple.remindd.RDVehicleAarmProducer.locationd.vehicle.notify.%{public}s}
os_transaction INIT {name: com.apple.remindd.RDVehicleAarmProducer.locationd.vehicle.notify.%{public}s}
Did receive vehicle disconnected notification
v12@?0i8
Failed to register notify handler. {status: %u}
VehicleConnectionDidChange
Received vehicle change notification with nil producer
Did receive vehicle notification {name: %{public}s}
Did receive vehicle connected notification
remindd.RDVehicleAlarmProducer
Key in CKRecord's resolution token map is unrecognized {key: %{public}s, recordType: %{public}s, fieldType: %{public}s}
merge() did repair resolution token map for {recordType=%{public}s, recordID=%{public}s}
merge() did repair resolution token map but since the record & CD object are in deleted state we will avoid uploading changes {recordType: %{public}s, recordID=%{public}s}
repairResolutionTokenMap: did repair resolution token map for {resolutionTokenKey=%{public}s, recordKey=%{public}s, remappedRecordKey=%{public}s}
DidFinishMigration
DidChooseToMigrate
repairResolutionTokenMap: CKRecord's resolution token map is undefined or corrupted, will try to create a new one {recordType: %{public}s, recordID=%{public}s}
repairResolutionTokenMap: repairResolutionTokenMapForImportedRecord() must have initialized the CD object's token map, this indicates a programmming fault {recordType: %{public}s, recordID=%{public}s}
repairResolutionTokenMapForImportedRecord -- repair token map for key=%{public}s
repairResolutionTokenMapForImportedRecord - recordID=%{public}s
Unable to merge CR property from CKRecord into coredata object because replicaIDSource isn't available {key: %{public}s, cdObject: %@}
Unable to merge CR property from CKRecord into coredata object {key: %{public}s, cdObject: %@, error: %{public}s}
Error reading from asset URL {key: %{public}s, url: %{public}s, error: %{public}s}
REMCDObjectSystemFieldsMerging: Found a case we are merging down a Unset version number from CK while local object version isn't unset {entity: %{public}s, identifier: %{public}s}
REMCDObjectSystemFieldsMerging: Unknown kind of value in ckRecord[%{public}s] {entity: %{public}s, identifier: %{public}s, value: %s}
REMCDObjectSystemFieldsMerging: Merged updated minimumSupportedVersion as NSNumber from CK record {entity: %{public}s, identifier: %{public}s}
remObjectID is not defined for cdObject {cdObject: %@}
accountID is not defined for cdObject {cdObject: %@}
isConcealed:(markedForDeletion=
Can't create data from object and not able to save it as asset {object: %s}
REMCDObjectSystemFieldsMerging
v32@0:8@"REMCDObject"16@"CKRecord"24
q16@0:8
@24@0:8:16
_TtC7remindd30RDDisabledAccountsEventHandler
unitTest_didReceiveAccountsDidDisable
RDDisabledAccountsEventHandler did reset babysitter for {babysittableWaiterID: %{public}s, accountTypeHost: %{public}s}
RDDisabledAccountsEventHandler did reset accountsListCategorizedCountsCache and hashtagLabelsInCustomSmartListFilterCache
_TtC7remindd22RDXPCIndexingPerformer
remindd.RDXPCIndexingPerformer
Daemon receives reindexSearchableItems {identifiers: %s}
Daemon receives reindexAllSearchableItems
Created by remindd on 
REMXPCIndexingPerformer
v24@0:8@?<v@?>16
v32@0:8@"NSArray"16@?<v@?>24
_TtC7remindd18RDAccountDataMover
remindersBatchSize
accountDataMoverSaveRequestAuthorString
statistics
excludeSharedToMeLists
potentialDenylistItemIDs
_useSourceObjectIDAsExternalID
_copyListSharingStatus
currentSaveRequest
_TtC7remindd23RDReminderDataICSCopier
_TtC7remindd28RDReminderDataCloudKitCopier
_TtC7remindd28RDReminderDataExchangeCopier
RDAccountDataMover: RDReminderDataICSCopier: imported ICS into as reminder {objectID: %{public}@, storage: %@}
RDAccountDataMover: RDReminderDataICSCopier: source reminder exported as ICS {objectID: %{public}@, icsTodo: %@}
Failed to export reminder as ICSTodo and ICSCalendar {reminderID: 
RDAccountDataMover: Attempted to save with a current save request.
RDAccountDataMover: _copySliceOfReminders: Cannot copy reminders because list change item is not tracked and is nil {targetListID: %{public}@}
RDAccountDataMover: Processed copying source reminders {count: %ld}
RDAccountDataMover: _copySliceOfReminders: Source reminder is denylisted to copy to the target list {sourceReminder: %{public}@}
REMReminder.dataCopierFactory: Could not create data copier for account data move because account type is not supported for now {accountTypeHost: %{public}@, reminderID: %{public}@}.
Unhandled account type
default-list-absent
RDAccountDataMover: removeData: done removing data from account {objectID: %{public}@, lists.count: %ld, remindersFromDefaultList: %s}
RDAccountDataMover: removeData: given account is not empty, now remove its lists and reminders {objectID: %{public}@}
RDAccountDataMover: removeData: given account is already empty (no reminder or list count < 2) so we stopped {objectID: %{public}@}
RDAccountDataMover: Failed to create save request.
RDAccountDataMover: Processing source list to consider... {objectID: %{public}@}
RDAccountDataMover: Can't find target list change item with {objectID: %{public}@}
RDAccountDataMover: Source list is denylisted to copy to the target and it does not contain any non-denylisted child reminder {sourceList: %{public}@, targetList: %{public}@}
RDAccountDataMover: Processing target list to copy reminders into {objectID: %{public}@}
RDAccountDataMover: Source lists processed {count: %ld}
RDAccountDataMover: Done copying source list {sourceList: %{public}@, targetList: %{public}@}
RDAccountDataMover: we chose to exclude this source list since someone else owns it {objectID: %{public}@}
RDAccountDataMover: The copy-from account is not a local account {%{public}@}.
RDAccountDataMover: The copy-to account is not a cloud account type {%{public}@}.
RDAccountDataMover: Saved all changes and set .daWasMigrated=YES to cloud account {cloudAccount: %{public}@}
RDAccountDataMover: The copy-from account is an inactivated account {%{public}@}.
RDAccountDataMover: The copy-from account is not a CalDAV account {%{public}@}.
RDAccountDataMover: Copied data from inactivated account, saved all changes and set .daWasMigrated=YES to cloud account {inactivatedAccount: %{public}@, cloudAccount: %{public}@}
_TtC7remindd24RDExtraneousAlarmCleaner
extraneousAlarmCloudConfiguration
isUnitTest
_isDisabled
babysitterOperationDeleteExtraneousAlarms
babysitTarget
_TtCC7remindd24RDExtraneousAlarmCleanerP33_2A672D4ADD7F5091C33DC2731906050413BabysitTarget
com.apple.remindd.RDExtraneousAlarmCleaner.babysitter
RDExtraneousAlarmCleaner: out of range [1, Int.max] deleteCountThreshold = %lu. It will set to 10.
RDExtraneousAlarmCleaner: out of range [0, Int.max] deleteCountLimit = %lu. It will set to 200.
RDExtraneousAlarmCleaner: cleanUpTriggerReductionFactor = %f is larger than 1. It will set to 1.
RDExtraneousAlarmCleaner: cleanUpTriggerReductionFactor = %f is less than 0. It will set to 0.
RDExtraneousAlarmCleaner: userDefaults.lastExtraneousAlarmsProcessedDate = %{public}s
yyyy-MM-dd hh:mm:ssZ
RDExtraneousAlarmCleaner: reminder {ckIdentifier: %{public}s, objectID: %{public}@} does not have identifier
RDExtraneousAlarmCleaner: cannot find reminder {%{public}s}
RDExtraneousAlarmCleaner: reminder {%{public}s} without accountID.
RDExtraneousAlarmCleaner: reminder {%{public}s} without reminderID.
RDExtraneousAlarmCleaner: alarm date trigger {%{public}s} does not have alarm
RDExtraneousAlarmCleaner: alarm {%{public}s} has a trigger not of type REMAlarmDateTrigger
RDExtraneousAlarmCleaner: Unexpectedly could not get an xpcActivity when trying to schedule a new one
RDExtraneousAlarmCleaner: Updating xpcActivity criteria {throttlingInterval: %f, randomizedDelay: %f}
RDExtraneousAlarmCleaner: Updating xpcActivity criteria using backoffThrottleInterval
RDExtraneousAlarmCleaner: Unexpectedly having pending activity on the xpcActivity when trying to create and schedule a new one
RDExtraneousAlarmCleaner.deleteExtraneousAlarms
RDExtraneousAlarmCleaner: Did hit error while deleting extraneous alarms: {error: %{public}s}
RDExtraneousAlarmCleaner: changes userDefaults.useExtraneousAlarmBackOffThrottleInterval to %{bool}d
RDExtraneousAlarmCleaner: number of extraneous alarms deleted: %lu. Total delete time: %.*f s
RDExtraneousAlarmCleaner: number of non-concealed reminders with alarms more than threshold %ld: %ld. Total fetch time: %.*f s
RDExtraneousAlarmCleaner: too early to run extraneous alarms cleanup
Babysitting RDExtraneousAlarmCleaner because it failed too many times {waiterID: %{public}s}.
RDExtraneousAlarmCleaner: random skip extraneous alarms cleanup
RDExtraneousAlarmCleaner: Unexpectedly having an existing non-nil xpcActivity when trying to create and schedule a new one
RDExtraneousAlarmCleaner: q_syncRunScheduledActivity
RDExtraneousAlarmCleaner: Running scheduled XPC activity took %f ms
RDExtraneousAlarmCleaner: Running scheduled XPC activity, let's check if we should delete extraneous alarms
RDExtraneousAlarmCleaner: Starting RDExtraneousAlarmCleaner with lastExtraneousAlarmsProcessedDate = %{public}s
RDExtraneousAlarmCleaner: Some accounts have been logged out or disabled. Resetting babysitter for {waiterID: %{public}s}
RDExtraneousAlarmCleaner: Disabled by rate reducer configuration. Not starting.
remindd.RDExtraneousAlarmCleaner
_TtC7remindd23RDManualSortHintUpdater
accountsAndRemindersChangesSubscription
manualSortHintChangesSubscription
RDManualSortHintUpdater stops.
RDManualSortHintUpdater starts.
RDManualSortHintUpdater failed to fetch REMCDManualSortHint with local IDs {error: %s}
RDManualSortHintUpdater did not replace local IDs in any REMCDManualSortHint.
RDManualSortHintUpdater failed to save changes {error: %s}
RDManualSortHintUpdater replaced local IDs in %s REMCDManualSortHint.
RDManualSortHintUpdater failed to replace local IDs in REMCDManualSortHint {error: %s}
RDManualSortHintUpdater fetched %s REMCDManualSortHint with local IDs.
RDManualSortHintUpdater did not fetch any REMCDManualSortHint with local IDs.
Cannot replaceLocalIDsInREMCDManualSortHint() against a manual sort hint without an associated account {remObjectID: %{public}s}
List Fetch Metadata
Created list fetchRequest {fetchRequest: %@}
List Fetch Count
List Fetch Storages
List Fetch Storages And Parents
List missing account {error: 
_TtC7remindd42RDDynamicSignificantTimeNotificationEngine
xpcEventSetter
currentStatus
dynamicSignificantTimeChangeNotificationEngine
Error updating significantTimeChageNotification {error: %{public}s}
DISABLE significantTimeChageNotification XPC event
DISABLE significantTimeChageNotification XPC event. Skipping because values match
Notification
ENABLE significantTimeChageNotification XPC event
ENABLE significantTimeChageNotification XPC event. Skipping because values match
[fetchReminderLitesOfTemplate] Failed to fetch signed-in accounts {error: %s}
[fetchReminderLitesOfTemplate] Could not fetch manual sort hint of .savedReminders without an accountObjectID {listID: %{public}@, cdReminders.count: %ld}
REMRemindersListDataView.TemplateInvocation: reminders %ld updated %ld inserted %ld
Failed to cast managedObject to REMCDTemplate {objectID: %@}
Failed to get remObjectID from REMCDTemplate {objectID: %@}
Failed to cast managedObject to REMCDSavedReminder {objectID: %@}
Failed to get remObjectID from REMCDSavedReminder {objectID: %@}
@32@0:8@16@24
allDay
ckDirtyFlags
ckIdentifier
ckNeedsInitialFetchFromCloud
ckNeedsToBeFetchedFromCloud
ckParentReminderIdentifier
ckZoneOwnerName
completionDate
creationDate
displayDateTimeZone
displayDateUpdatedForSecondsFromGMT
Tq,N,D
flagged
icsDisplayOrder
icsUrl
notes
T@"REMResolutionTokenMap",N,D,&
resolutionTokenMap_v2_JSON
spotlightIndexCount
startDate
account
T@"NSManagedObject",N,D,&
alarmStorage
T@"NSOrderedSet",N,D,&
children
ckCloudState
T@"REMCKCloudStateInModelVersionV5",N,D,&
hashtags
T@"REMCDListInModelVersionV5",N,D,&
parentAccount
parentReminder
T@"REMCDReminderInZREMCDOBJECT",N,D,&
recurrenceRules
sharedToMeReminderPlaceholder
T@"REMCDReminderInZREMCDREMINDER",N,D,&
reminders
T@"NSMutableOrderedSet",N,D,&
remindersInZREMCDREMINDER
currentLocalVersion
inCloud
latestVersionSyncedToCloud
localVersionDate
reminderInZREMCDREMINDER
savedAttachment
performPostMigrationDataUpdate(in:)
[%s|%s] Did fetch identifier of all REMCDList {listIdentifiers.count: %{public}ld, cumulative elapsedSeconds: %f}
[%s|%s] Did copy reminders from ZREMCDOBJECT SQL table to ZREMCDREMINDER SQL table {list.identifier: %{public}s, topLevelReminders.count: %{public}ld, subtasks.count: %{public}ld, cumulative elapsedSeconds: %f}
[%s|%s] Failed to fetch moID of parentReminder {list.identifier: %{public}s, parentReminderIdentifier: %{public}s}
[%s|%s] Did fetch NSManagedObjectID of reminders in ZREMCDOBJECT SQL table {list.identifier: %{public}s, reminders.count: %{public}ld, cumulative elapsedSeconds: %f}
[%s|%s] Failed to set parentReminder because parentReminder.identifier is nil {list.identifier: %{public}s, reminder.identifier: %{public}s}
_TtC7remindd17RDLocationManager
queue
q_locationManager
v40@0:8@16q24@32
startMonitoring: %s, authStatus: %{public}s
 conservativeEntry:
stopMonitoring: %s
didChangeAuthorization
com.apple.remindd.RDLocationManagerDelegate.
RDLocationManagerDelegate: Couldn't create os_transaction_t for %{public}s
os_transaction RELEASE {name: com.apple.remindd.RDLocationManagerDelegate.%{public}s}
os_transaction INIT {name: com.apple.remindd.RDLocationManagerDelegate.%{public}s}
didChangeAuthorization: {status: %{public}s}
monitoringDidFailFor: {region=%s, error=%s}
didFailWithError: %s
didDetermineState: {state=%s, region=%@}
didExitRegion: %@
RDLocationAlarmProducer didExitRegion: %@
didEnterRegion: %@
RDLocationAlarmProducer didEnterRegion: %@
Radius less than minimum:%s for regionToMonitor:%s
locationManagerDidStart
locationManagerDidStart, reconciling all geofences
daemonLocationBundle() does not have a URL for location bundle, using Bundle.main instead. Location services will not work. This is expected for simulator.
daemonLocationBundle() cannot locate bundle at %s, using Bundle.main instead. Location services will not work. This is expected for simulator.
daemonLocationBundle() successfully obtained from from %s
remindd.RDLocationManager
CLLocationManagerDelegate
v28@0:8@16i24
v40@0:8@"CLLocationManager"16@"CLLocation"24@"CLLocation"32
v32@0:8@"CLLocationManager"16@"NSArray"24
v32@0:8@"CLLocationManager"16@"CLHeading"24
B24@0:8@"CLLocationManager"16
v40@0:8@"CLLocationManager"16q24@"CLRegion"32
v40@0:8@"CLLocationManager"16@"NSArray"24@"CLBeaconRegion"32
v40@0:8@"CLLocationManager"16@"CLBeaconRegion"24@"NSError"32
v40@0:8@"CLLocationManager"16@"NSArray"24@"CLBeaconIdentityConstraint"32
v40@0:8@"CLLocationManager"16@"CLBeaconIdentityConstraint"24@"NSError"32
v32@0:8@"CLLocationManager"16@"CLRegion"24
v32@0:8@"CLLocationManager"16@"NSError"24
v40@0:8@"CLLocationManager"16@"CLRegion"24@"NSError"32
v28@0:8@"CLLocationManager"16i24
v24@0:8@"CLLocationManager"16
v32@0:8@"CLLocationManager"16@"CLVisit"24
originalHashtagID
Reset babysitter for {waiterID: %{public}s, event: %{public}s}
daSymbolicColorName
ckSymbolicColorName
Can't construct REMColor from invalid JSON
_TtC7remindd33REMSavedReminderStorageCDIngestor
%{public}s: '\REMCDSavedReminder.metadata' should not be nil at the end of 'merge(storage:into:changedValueKeys:optionalCoordinator:)' {objectID: %{public}@}
%{public}s: Failed to merge attachments because 'optionalCoordinator' is nil {objectID: %{public}@}
%{public}s: Can't merge saved attachment for saved reminder because cdSavedAttachment.remObjectID is nil {cdSavedReminder.remObjectID: %@, cdSavedAttachment.objectID: %@}
%{public}s: Removing saved attachment from saved reminder {cdSavedReminder.remObjectID: %@, cdSavedAttachment.objectID: %@}
REMSavedReminderStorageCDIngestor:establishRelationship(onStorage:into cdSavedReminder:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}
Updating cdSavedReminder.template {cdSavedReminder: %{public}s, cdTemplate: %{public}s}
Updating cdSavedReminder.account {cdSavedReminder: %{public}s, cdAccount: %{public}s}
%{public}s: cdSavedReminder.account is nil {cdSavedReminder.remObjectID: %@}
%{public}s: cdSavedReminder.template is nil {cdSavedReminder.remObjectID: %@}
_TtC7remindd20RDXPCBarebonesDaemon
Failed to fetch manual sort hint of templates {error: %s}
You should not try to create a CSL using the fetchSmartList API
Found REMCDSmartList with nil `.account` when populating REMSmartListsDataViewInvocationResult
Failed to ingest CD account to account storage when populating REMSmartListsDataViewInvocationResult
_TtC7remindd34RDIntentsRelevantShortcutsHandling
com.apple.remindd.intentsRelevantShortcutsHandling
RelevantShortcuts setting %ld shortcuts
os_transaction INIT {name: com.apple.remindd.todayEngine.start}
RelevantShortcuts set %ld shortcuts
RelevantShortcuts unable to set shortcuts because %s
os_transaction RELEASE {name: com.apple.remindd.intentsRelevantShortcutsHandling}
notificationUserInfoAccountObjectIDKey
notificationUserInfoAccountTypeKey
notificationUserInfoPropertyNameKey
notificationUserInfoPropertyValueKey
l_observers
l_cancellables
Trying to remove observer to RDAccountPropertiesNotifier but input observer is nil
RDAccountPropertiesNotifier cannot unobserve as the observer is not found {uuid: %s}
RDAccountPropertiesNotifier removed observer {uuid: %s}
Trying to add observer to RDAccountPropertiesNotifier but input observer is nil
RDAccountPropertiesNotifier added observer {uuid: %s}
Received RDStoreControllerREMAccountPropertiesDidUpdate has no userInfo
Received RDStoreControllerREMAccountPropertiesDidUpdate has no account REMObjectID in the userInfo
Received RDStoreControllerREMAccountPropertiesDidUpdate has no account type in the userInfo
Received RDStoreControllerREMAccountPropertiesDidUpdate has no property name in the userInfo
objectID
type
Cannot convert to ICCloudContextSyncReason from unknown REMXPCSyncInterfaceSyncReason: %s
_TtC7remindd35RDExecutionIntervalThrottlingPolicy
yyyy-MM-dd hh:mm:ss
RDExecutionIntervalThrottlingPolicy: Updated last executed date {identifier: %{public}s, date: %{public}s}
RDExecutionIntervalThrottlingPolicy: Calculating reset date {identifier: %{public}s, lastExecuted: %{public}s, result: %{public}s}
SerializationVersion
REMCDManualSortHint+CloudKit: newlyCreatedRecord(): {ckIdentifier: %{public}s, listTypeRawValue: %{public}hd}
HintDataIncludingRemindersInPrimaryAccountOnlyAsBytes
HintDataIncludingRemindersInPrimaryAccountOnlyAsAsset
HintDataExcludingRemindersInLocalAccountAsBytes
HintDataExcludingRemindersInLocalAccountAsAsset
newlyCreatedRecord: Failed to serialize/deserialize hintData in REMCDManualSortHint {ckIdentifier: %{public}s, list type: %s, listID: %s, error: %{public}s}
Unable to support REMCDManualSortHint serialization version introduced in a subsequent release
REMCDManualSortHint.mergeData(from record:accountID:) will insert pending post-save action '.notify_SharedToMeListPinnedStateDidBecomeStale' {ckIdentifier: %{public}s, eTag: %{public}s}
Skip merging for different in eTag
mergeData: Invalid remoteHintData for REMCDManualSortHint {ckIdentifier: %{public}s, list type: %s, listID: %s, dataSerializationVersion: %s, error: %{public}s}
mergeData: Invalid hintData in REMCDManualSortHint {ckIdentifier: %{public}s, list type: %s, listID: %s, error: %{public}s}
name
remindd.RDUserNotificationCenter
userNotificationCenter willPresent
Unknown notification action. {actionIdentifier: %s}
Unknown notification type from content. {content: %@}
Forwarding .shareListUpdateNotification response to sharedListUpdateNotificationDelegate
Forwarding .assignmentNotification response to assignmentNotificationDelegate
Forwarding .beforeFirstUnlock notification response to beforeFirstUnlockReminderDelegate
remindd didn't expect to receive actions from .caldavSharedList. {response: %@}
remindd didn't expect to receive actions from .todayNotificationBadge. {response: %@}
remindd didn't expect to receive actions from .todayNotification. {response: %@}
Forwarding .reminderAlarm notification response to reminderAlarmDelegate
_TtC7remindd24RDUserNotificationCenter
reminderAlarmDelegate
beforeFirstUnlockReminderDelegate
assignmentNotificationDelegate
sharedListUpdateNotificationDelegate
v52@0:8@16@24@32B40@?44
v16@?0@"NSArray"8
RDUserNotificationRetainingReferences
Issuing: notificationCenter.add(request) {identifier: %{public}s, skipBanner: %{public}s, userInfo: %s}
Strategy: no existing notification {identifier: %{public}s, useReplaceInsteadOfAdd: false}
Unable to get UNMutableNotificationContent from UNNotificationContent {notification: %@}
Strategy: !alreadyRetained {identifier: %{public}s, useReplaceInsteadOfAdd: false}
Strategy: alreadyRetained && !contentChanged, nothing to do {identifier: %{public}s}
Issuing: replaceContentForRequest() {identifier: %{public}s}
Strategy: alreadyRetained && contentChanged {identifier: %{public}s, useReplaceInsteadOfAdd: true}
Strategy: alreadyRetained && recurring reminder {identifier: %{public}s, useReplaceInsteadOfAdd: false}
Determine useReplaceInsteadOfAdd {identifier: %s, deliveredNotifications: %s}
retainNotification content replaced {error: %s}
retainNotification request added {error: %s}
Issuing: showNotification notificationCenter.add(request) {identifier: %{public}s}
showNotification request added {error: %s}
userNotificationCenter openSettingsForNotification, but we don't have any settings pane yet so bye ;)
Unknown notification authorization status
User denied notification access
User hasn't been prompted for notification access
Unable to create UNMutableNotificationContent from UNNotificationContent
Issuing: replaceContentForRequest {identifier: %{public}s}
Issuing: removeDeliveredNotifications since retain count is zero {identifier: %{public}s}
releaseNotification: {identifier: %{public}s, userInfo = %s}
releaseNotification: replaced content {identifier: %{public}s, error: %s}
UNUserNotificationCenterDelegate
v40@0:8@"UNUserNotificationCenter"16@"UNNotification"24@?<v@?Q>32
v40@0:8@"UNUserNotificationCenter"16@"UNNotificationResponse"24@?<v@?>32
v32@0:8@"UNUserNotificationCenter"16@"UNNotification"24
NSObject
_TtC7remindd21RDAccountManualSortID
ckContainerID
localUUID
<RDAccountManualSortID: {ckContainerID: 
Failed to fetch manual sort hint {list type: %s, listID: %s, error: %s}
REMCDReminder.displayDateSortDescriptor should not be nil
Failed to fetch specific host account when getting manualSortIDAdapter for {accountID: %{public}@, error: %{public}s}
Failed to fetch signed-in accounts when getting manualSortIDAdapter for {error: %{public}s}
No primary active CloudKit account found when trying to fetch reminders in REMRemindersListDataView invocation with .manualWithSortHint sorting style
Failed to fetch reminders from reminderLites. Not returning initial reminder {error: %{public}s}
fetchRemindersDue cdReminders %s
fetchRemindersDue predicate %s
fetchRemindersDue objectIDs %s
Attempted to fetch duplicate initial reminders {subtask.objectID: %{public}@}
Attempted to fetch duplicate initial reminders {reminderLite.objectID: %{public}@}
Failed to get remObjectID from REMCDReminder {objectID: %@}
You should not try to create a CSL from REMRemindersListDataView+RDInvocable
Failed to fetch REMCDSmartList for pre-defined smart list type {smart list type: %{public}s, error: %{public}s}
REMCDSmartList for pre-defined smart list type not found {pre-defined smart list type: %{public}s}
Matching manual sort hint not found {list type: %s, listID: %s, accountObjectID: %s, error: %s}
%{public}s; UserInfo=%s; PublicUserInfo=%{public}s
_TtC7remindd25RDReplicaManagerUtilities
Skipping replica manager update. Version in database is newer {inputVersion: %llu, currentVersion: %llu}
_TtC7remindd19RDManualSortIDCache
cacheQueue
cacheContext
accountChangesSubscription
RDManualSortIDCache starts observing account changes
RDManualSortIDCache cancels observing account changes
Dropping unsupported criterion for searching REMCDList. {criterion: %s}
Parent list has nil remObjectID {list moid: 
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/Store/REMCDList+Fetching.swift
REMCDList's parentList is unexpectedly deleted {identifier: %s}
List has nil account {listID: 
Account has nil remObjectID {account moid: 
_TtC7remindd29RDDACalDAVShareRequestHandler
RDDACalDAVShareRequestHandler: Creating a DADREMShareResponseDelegate to call onto respondToShareRequest() {DATransaction.id: %s, accountID: %s, calendarURL: %s}
DADREMShareResponseDelegate has completed, but DATransaction was nil?! {error: %s}
DADREMShareResponseDelegate has completed with DATransaction {transactionId: %s, error: %s}
DADREMShareResponseDelegate has done calling XPC completion, but DATransaction was nil?! {error: %s}
DADREMShareResponseDelegate has done calling XPC completion with DATransaction {transactionId: %s, error: %s}
RDDACalDAVShareRequestHandler: Attempted to call DADREMShareResponseDelegate when DataAccess is disabled, aborting...
RDDACalDAVShareRequestHandler: Trying to call DADREMShareResponseDelegate when DataAccess is not yet up and running, aborting...
RDDACalDAVShareRequestHandler: Trying to call DADREMShareResponseDelegate when DADAgentManager is not yet set up properly, aborting...
RDDACalDAVShareRequestHandler: Trying to call DADREMShareResponseDelegate when DADAgentManager has no active accounts, aborting...
_TtCE7reminddCO19ReminderKitInternal24REMRemindersListDataView15GroupInvocationP33_5EA99FF5FE7301BEB158BAF5BFFE0E3319PolymorphicListItem
unknown or unsupported REM object type for PolymorphicListItem
_TtC7remindd18RDDaemonController
@32@0:8@16@?24
@24@0:8@?16
v40@0:8@16@?24@?32
remindd.RDDaemonController
REMDaemonController
@"<REMXPCChangeTrackingPerformer>"32@0:8@"NSString"16@?<v@?@"NSError">24
@"<REMXPCDebugPerformer>"32@0:8@"NSString"16@?<v@?@"NSError">24
@"<REMXPCDebugPerformer>"24@0:8@?<v@?@"NSError">16
@"<REMXPCStorePerformer>"32@0:8@"NSString"16@?<v@?@"NSError">24
v40@0:8@"NSString"16@?<v@?@"<REMXPCStorePerformer>">24@?<v@?@"NSError">32
@"<REMXPCSyncInterfacePerformer>"32@0:8@"NSString"16@?<v@?@"NSError">24
v40@0:8@"NSString"16@?<v@?@"<REMXPCSyncInterfacePerformer>">24@?<v@?@"NSError">32
@"<REMXPCIndexingPerformer>"32@0:8@"NSString"16@?<v@?@"NSError">24
v40@0:8@"NSString"16@?<v@?@"<REMXPCIndexingPerformer>">24@?<v@?@"NSError">32
_TtC7remindd37RDNewlySharedToMeTagAutoConvertRunner
 RDNewlySharedToMeTagAutoConvertRunner: CoreData error fetching REMCDReminders: {error: %{public}s}
 RDNewlySharedToMeTagAutoConvertRunner: Error autoconverting hashtags. Not deleting activity {error: %{public}s}
 RDNewlySharedToMeTagAutoConvertRunner: Error autoconverting hashtags. Deleting activity anyway {error: %{public}s}
 RDNewlySharedToMeTagAutoConvertRunner: REMCKSharedEntitySyncActivity[%{public}s] had ckIdentifier[%{public}s] that did not correspond to a reminder; deleting activity
 RDNewlySharedToMeTagAutoConvertRunner: REMCKSharedEntitySyncActivity[%{public}s] did not have a ckIdentifier; deleting
Found multiple instances of REMCDSavedReminder with identical objectID {objectID: %@, matches: %ld}
Saved reminder missing account {error: 
Completed by date buckets must use the default completion date descending sorting style
Completed by date buckets must show completed
Completed by date buckets cannot fetch subtasks
{shareResponse: declinded, calendarURL: 
{shareResponse: accepted, calendarURL: 
_TtC7remindd19RDXPCStorePerformer
shareRecordIDToRootRecordID
shareRecordIDToRootRecordIDLock
v104@0:8@16@24@32@40@48@56@64@72Q80B88B92@?96
validatePhantomObjects: Error caught {error: %{public}s}
validatePhantomObjects: Done validating {elapsed: %.*f s, shouldRepair: %{public}s, childrenObjectIDs: %{public}s, phantomIDs: %{public}s}
validatePhantomObjects: Validating {shouldRepair: %{public}s, childrenObjectIDs: %{public}s}
validatePhantomObjects: {objectsWithConcealedParent: %{public}s}
validatePhantomObjects: {disconnected: %{public}s}
repairPhantomObjects: Saving repaired objects... {inputCount: %ld, disconnectedCount: %ld, unsupportedCount: %ld}
repairPhantomObjects: Couldn't get an REMCDObject, skipping {moid: %{public}@}
repairPhantomObjects: Repaired effectiveMiniumSupportedVersion for {remObjectID: %{public}s, newValue: %{public}s}
repairPhantomObjects: Repaired markedForDeletion state for {remObjectID: %{public}s}
repairPhantomObjects: Attempted to repair a non-phantom object which is already concealed {remObjectID: %{public}s}
repairPhantomObjects: Unknown parent key to try to unset {key %{public}s, remObjectiD: %{public}s}
xpcPerformer.isManagedAccount: Error when looking up the ACAccount {acAccountID: %{public}s, error: %{public}s}
xpcPerformer.isManagedAccount: REMError when looking up the ACAccount {acAccountID: %{public}s, error: %{public}s}
xpcPerformer.isManagedAccount: ACAccount.rem_isManagedAppleID result {acAccountID: %{public}s, isManaged: %{bool}d, displayAccount: %{public}@}
Missing account utils for requesting to delete local data.
Missing account utils for requesting to initiate merging local data into sync data {acAccountIdentifier: 
Missing account utils for removing orphaned accounts
Missing account utils for updating account {acAccountID: 
Missing account utils for updating account database
notifyOfInteraction: {personHandle: %s, aliases: %s, contactIdentifier: %s}
Putting event {identifier: %s, reader: %s}
INPerson has no phone numbers or emails. Skipping {person: %@}
INPerson alias has missing value. Skipping {person: %@, handle: %@}
notifyOfInteraction: unknown INPersonHandleType: %{public}ld
INPerson has unknown alias type. Skipping {person: %@, handle: %@}
Cloud Context is not intialized
v28@?0@"NSError"8B16@"NSString"20
com.apple.remindd.RDXPCStorePerformer.acceptShare
Failed to create share. {error: %s}
createShareForObject: Tried to fetch non-existent object {remObjectID: %{public}@}
v24@?0@"CKShare"8@"NSError"16
createShareForObject: Fetching object with ID {objectID: %{public}@}
createShareForObject: Adding mapping for share recordID {recordID: %{private}@}
Found multiple instances of object with identifier: 
Failed to fetch share object. {error: %s}
fetchShareForObject: Tried to fetch non-existent object {remObjectID: %{public}@}
fetchShareForObject: Fetching object with ID {objectID: %{public}@}
mergePolicyTestSaveQueue
Will not save replica managers. Bundle ID is missing
(daemon) SAVE START {author: %{public}s, accountStorage.count: %ld, listStorage.count: %ld, smartListStorages.count: %ld, reminderStorage.count: %ld, changedKeys.count: %ld, replicaManagers.count: %ld
(daemon) SAVE FAIL {saveError: %@}
Converted saveError to remError {saveError: %@, remError: %@}
(daemon) SAVE END {author: %{public}s, accountStorages.count: %ld, listStorages.count: %ld, smartListStorages.count: %ld, reminderStorages.count: %ld, replicaManagers.count: %ld}
Error performing invocation {invocation.name: %s, error: %@}
Invocation does not confrom to RDInvocable {invocation: 
Invocation does not conform to RDInvocable {invocation: %@}
Error performing invocation {invocation: %{public}@, client: %{public}s, error %{public}s}
Finished performing {invocation: %{public}@, client: %{public}s}
Performing invocation {invocation: %{public}@, client: %{public}s, thread: %{public}s, qos: %ld}
Error performing store controller invocation {invocation: %{public}@, client: %{public}s, error %{public}s}
Finished performing store controller invocation  {invocation: %{public}@, client: %{public}s}
Performing store controller invocation {invocation: %{public}@, client: %{public}s, thread: %{public}s, qos: %ld}
Failed to perform fetch {error: %s}
Executing fetch request {fetchRequest: %@}
Finished performing query in daemon {fetchRequest: %@, result: %@}
Performing query in daemon {fetchRequest: %@}
remindd.RDXPCStorePerformer
Deallocating RDXPCStorePerformer
REMXPCStorePerformer
v32@0:8@"REMFetchRequest"16@?<v@?@"REMFetchResult"@"NSError">24
v32@0:8@"REMStoreInvocation"16@?<v@?@"REMStoreInvocationResult"@"NSError">24
v32@0:8@"REMObjectID"16@?<v@?@"REMReplicaManagerSerializedData"@"NSError">24
v40@0:8@"REMObjectID"16@"NSString"24@?<v@?@"NSDictionary"@"NSError">32
v32@0:8@"REMDistributedEvaluationCollectionOptions"16@?<v@?@"NSData"@"NSError">24
v104@0:8@"NSArray"16@"NSArray"24@"NSArray"32@"NSArray"40@"NSArray"48@"NSDictionary"56@"NSDictionary"64@"NSString"72Q80B88B92@?<v@?@"NSError">96
v32@0:8@"REMObjectID"16@?<v@?@"CKShare"@"NSError">24
v40@0:8@"REMObjectID"16@"NSData"24@?<v@?@"CKShare"@"NSError">32
v40@0:8@"CKShare"16@"NSString"24@?<v@?@"NSError">32
v32@0:8@"CKShareMetadata"16@?<v@?B@"NSString"@"NSError">24
v32@0:8@"REMObjectID"16@?<v@?@"REMTemplateContentAttributes"@"NSError">24
v40@0:8@"REMObjectID"16@"REMTemplatePublicLinkConfiguration"24@?<v@?@"REMObjectID"@"NSError">32
v32@0:8@"NSUUID"16@?<v@?@"REMObjectID"@"NSError">24
v28@0:8B16@?<v@?BB@"NSError">20
v36@0:8@"NSString"16B24@?<v@?BB@"NSError">28
v24@0:8@?<v@?B@"NSError">16
v32@0:8@"NSString"16@?<v@?@"<REMXPCSuggestedAttributesPerformer>"@"NSError">24
v32@0:8@"REMObjectID"16@?<v@?@"NSNumber"@"NSError">24
v36@0:8@"NSArray"16B24@?<v@?@"NSArray"@"NSError">28
_TtC7remindd12RDSyncPoller
pollBlock
eventStream
nil lastSyncPoll. Polling
lastSyncPoll < throttingInterval. Not Polling {lastSyncPoll: %{public}s, throttingInterval: %.*f}
lastSyncPoll > configurationInterval. Polling {lastSyncPoll: %{public}s, throttingInterval: %.*f}
Polling sync did finish {error: %{public}s}
HashtagLabelsReferencedByCustomSmartListFiltersInvocation: failed to decode filter {error: %s}
HashtagLabelsReferencedByCustomSmartListFiltersInvocation: failed to decode cache {error: %s}
HashtagLabelsReferencedByCustomSmartListFiltersInvocation: failed to encode cache {error: %s}
HashtagLabelsReferencedByCustomSmartListFiltersInvocation: saving cache {dataSize: %ld}
Unexpected nil name REMCDHashtagLabel from AllHashtagLabelsInvocation {mid: %@}
missing storeController
/Library/Caches/com.apple.xbs/Sources/ReminderKit_Support_Sim/remindd/SuggestedAttributes/REMSuggestedAttributesFeatureExtractor+RDInvocable.swift
title,creationDate,list,dueWeekDay,location,intentWord
_TtC7remindd24RDTemplateOperationQueue
isHandlingOperationQueueItems
babysitterOperationHandleIncompleteOperationQueueItems
babysitterOperationHandleIncompleteOperationQueueItemsOnLaunch
_TtCC7remindd24RDTemplateOperationQueueP33_03AEDCAF47C2C623D845E2853D7EEB6713BabysitTarget
com.apple.remindd.RDTemplateOperationQueue.babysitter
RDTemplateOperationQueue: Failed to save managed object context after completing template operation queue item. {templateOperationQueueItem.objectID: %{public}@, error: %{public}s}
RDTemplateOperationQueue: Failed to retrieve template operation queue item by objectID. {templateOperationQueueItem.objectID: %{public}@}
RDTemplateOperationQueue: Completed template operation queue item with top priority. {templateOperationQueueItem.objectID: %{public}@}
RDTemplateOperationQueue: Failed to create template operation for template operation queue item. {templateOperationQueueItem.objectID: %{public}@}
RDTemplateOperationQueue: Failed to complete template operation queue item. {templateOperationQueueItem.objectID: %{public}@, error: %{public}s}
RDTemplateOperationQueue: Handling incomplete template operation queue item with top priority. {templateOperationQueueItem: %{public}@}
RDTemplateOperationQueue: Cannot create template operation without primary active CloudKit account {operationType: %s, templateObjectID: %{public}@, listObjectID: %{public}@}
RDTemplateOperationQueue: Failed to decode '\REMCDTemplateOperationQueueItem.configurationData' as 'REMTemplateConfiguration_Codable'. {templateOperationQueueItem.objectID: %{public}@, error: %{public}s}
com.apple.remindd.RDTemplateOperationQueue
RDTemplateOperationQueue.handleIncompleteOperationQueueItems
RDTemplateOperationQueue: Began handling template operation queue items
RDTemplateOperationQueue: Failed to fetch incomplete template operation queue item with top priority. {error: %{public}s}
RDTemplateOperationQueue: Failed to batch delete completed template operation queue items. {error: %{public}s}
RDTemplateOperationQueue: Batch deleted completed template operation queue items. {deletionCount: %ld}
RDTemplateOperationQueue: Failed to batch complete all incomplete template operation queue items. {error: %{public}s}
RDTemplateOperationQueue: Blocked by babysitter. Batch completed all incomplete template operation queue items. {affectedCount: %ld, isOnLaunch: %s}
RDTemplateOperationQueue: Finished handling template operation queue items {elapsedSeconds: %f}
RDTemplateOperationQueue: Did set up subscriptions
%s: Failed to insert template operation queue item for batch deleting cached public templates {error: %{public}s}
%s: Inserted template operation queue item for batch deleting cached public templates
downloadableCloudConfiguration
_TtC7remindd40RDICCloudConfigurationUpdaterXPCActivity
_TtC7remindd47RDICCloudConfigurationUpdaterXPCActivityFactory
ICCCU: Starting ICCloudConfigurationUpdater
ICCCU: Unexpectedly having an existing non-nil scheduler (xpcActivity) when trying to create and schedule a new one
ICCCU: Unexpectedly could not create an background scheduler (xpcActivity) when trying to schedule a new one
ICCCU: Unexpectedly having pending activity on the background scheduler (xpcActivity) when trying to create and schedule a new one
ICCCU: Running scheduled background activity, let's check if we should download remote cloud configuration file
ICCCU: lastCloudConfigurationDownload == nil, downloading remote config
ICCCU: lastCloudConfigurationDownload < throttingInterval, not downloading remote config {lastCloudConfigurationDownload: %{public}s, throttingInterval: %.*f}
ICCCU: lastCloudConfigurationDownload > configurationInterval, should download remote config {lastCloudConfigurationDownload: %{public}s, throttingInterval: %.*f}
ICCCU-XPCActivity: Updating scheduler (xpcActivity) criteria {inputDelay: %f, randomizedDelay: %f}
ICCloudConfigurationUpdater
_TtC7remindd31RDPublicCloudDatabaseController
isInternetReachable
$__lazy_storage_$_ckContainerWithPublicDatabase
%{public}s: Fetching CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}
%{public}s: Will fetch publicCloudObject from public cloud database {recordName: %{public}s}
%{public}s: [fetchRecordsResultBlock] Failed to fetch CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}
%{public}s: [perRecordResultBlock] Failed to fetch CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}
%{public}s: Failed to initialize publicCloudObject from CKRecord {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}
%{public}s: Did initialize publicCloudObject from CKRecord {recordName: %{public}s, elapsedSeconds: %f}
%{public}s: Did fetch CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}
%{public}s: Deleting CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}
%{public}s: Will delete CKRecord for publicCloudObject {recordName: %{public}s}
%{public}s: [modifyRecordsResultBlock] Failed to delete CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}
%{public}s: [perRecordDeleteBlock] Failed to delete CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}
%{public}s: Did delete CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}
%{public}s: Failed to create CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}
%{public}s: Saving CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}
%{public}s: Will save CKRecord for publicCloudObject {recordName: %{public}s}
%{public}s: [modifyRecordsResultBlock] Failed to save CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}
%{public}s: [perRecordSaveBlock] Failed to save CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f, error: %{public}s}
%{public}s: Did save CKRecord for publicCloudObject {recordName: %{public}s, elapsedSeconds: %f}
_TtC7remindd19RDObjectDescription
_TtC7remindd23RDLocationAlarmProducer
locationManager
alarmDatabaseDidChange, reconciling all geofences
Reminder has no displayDate, firing geofence as active
Reminder has displayDate that's in the past or same day, firing geofence as active as usual {displayDate.date: %s}
Reminder has displayDate that's in the future, firing geofence as passive instead of active. {displayDate.date: %s}
locationManager hasn't started. Not reconciling geofences.
reconcileAllGeofences setToAdd = %s
reconcileAllGeofences setToRemove = %s
reconcileAllGeofences existingSet = %s
reconcileAllGeofences desiredSet = %s
locationManager started, reconciling all geofences
Starting location alarm producer {producer: %s}
remindd.RDLocationAlarmProducer
com.apple.remindd.RDLocationAlarmProducer.
RDLocationAlarmProducer: Couldn't create os_transaction_t for %{public}s
os_transaction INIT {name: com.apple.remindd.RDLocationAlarmProducer.%{public}s}
os_transaction RELEASE {name: com.apple.remindd.RDLocationAlarmProducer.%{public}s}
unknown proximity
RDICCloudContextCryptoStringProviding
@"NSString"32@0:8@"NSString"16@"NSData"24
InitiallyNilError
T@"NSError",N,R
NilValueError
InvalidValueError
AccountAbsentError
@64@0:8@16q24@32@40@?48@?56
successHandler
errorHandler
currentValueSubject
T@"<_TtP7remindd20ObservingAccountInfo_>",N,R,Vaccount
T@"OS_dispatch_queue",N,R,VcallbackQueue
_TtCC7remindd29RDAccountPersonIDSaltObserverP33_E6769D87973B1BC8029E74FBB6A323F311AccountInfo
T@"REMObjectID",N,R,VobjectID
Tq,N,R,Vtype
remindd.RDAccountPersonIDSaltObserver
<RDAccountPersonIDSaltObserver uuid:
@"NSUUID"16@0:8
_TtC7reminddP33_B5AC59DA85A1771DB62C8FFA793A471252_RDManualSortIDPrimaryCloudKitAccountHashKeyProvider
hashKeyForManualSortID
_TtC7remindd37RDManualSortIDUnitTestHashKeyProvider
cdAccount
We don't currently support providing hash key other than cloudkit accounts. This log indicates there's some programming errors to pass on an incorrect account object {account: %{public}s}
_TtC7remindd20RDDynamicXPCActivity
shouldDefer
asyncHandler
l_pendingCriteria
RDDynamicXPCActivity UPDATE END pendingCriteria == newCriteria {identifier: %{public}s}
RDDynamicXPCActivity UPDATE START {identifier: %{public}s, newCriteria: %{public}s}
RDDynamicXPCActivity UPDATE executed on deallocated instance {identifier: %{public}s}
RDDynamicXPCActivity unexpected state {identifier: %{public}s, state: %ld}
RDDynamicXPCActivity should defer {identifier: %{public}s}
RDDynamicXPCActivity UPDATE
RDDynamicXPCActivity UPDATE RUN {identifier: %{public}s
RDDynamicXPCActivity UPDATE END Updated {identifier: %{public}s, newCriteria: %{public}s}
RDDynamicXPCActivity RUN ERROR. setState(XPC_ACTIVITY_STATE_CONTINUE) failed {identifier: %{public}s}
RDDynamicXPCActivity RUN START {identifier: %{public}s}
RDDynamicXPCActivity RUN ERROR. setState(XPC_ACTIVITY_STATE_DONE) failed {identifier: %{public}s}
RDDynamicXPCActivity RUN END {identifier: %{public}s, completionStatus: %{public}s}
Clearing l_pendingCriteria
RDDynamicXPCActivity UNREGISTER {identifier: %{public}s}
RDDynamicXPCActivity CHECKIN executed on deallocated instance {identifier: %{public}s}
RDDynamicXPCActivity CHECKIN ERROR unexpected state {identifier: %{public}s, state: %ld}
RDDynamicXPCActivity CHECKIN
RDDynamicXPCActivity CHECKIN RUN {identifier: %{public}s}
RDDynamicXPCActivity CHECKIN CHECKIN {identifier: %{public}s}
RDDynamicXPCActivity registered more than once {identifier: %{public}s}
allCheckedInActivities called more than once
_TtC7remindd51RDTemplateOperationCreateOrUpdateTemplatePublicLink
%{public}s: Failed to revert template's mostRecentPublicLinkUpdateRequestDate {templateObjectID: %{public}@, hasPublicLinkPriorToTemplateOperation: %{public}s, elapsedSeconds: %f}
%{public}s: Reverted template's mostRecentPublicLinkUpdateRequestDate {templateObjectID: %{public}@, hasPublicLinkPriorToTemplateOperation: %{public}s, elapsedSeconds: %f}
%{public}s: Failed to generate content for template's public link. {templateObjectID: %{public}@, hasPublicLinkPriorToTemplateOperation: %{public}s, error: %{public}s, elapsedSeconds: %f}
%{public}s: Generated content for template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, elapsedSeconds: %f}
%{public}s: Failed to revert template's mostRecentPublicLinkUpdateRequestDate {templateObjectID: %{public}@, hasPublicLinkPriorToTemplateOperation: %{public}s, error: %{public}s, elapsedSeconds: %f}
%{public}s: Failed to upload content of template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, error: %{public}s, elapsedSeconds: %f}
%{public}s: Failed to save template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, error: %{public}s, elapsedSeconds: %f}
%{public}s: Saved template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, publicLink: %{public}s, elapsedSeconds: %f}
%{public}s: Uploaded content of template's public link {templateObjectID: %{public}@, recordName: %{public}s, hasPublicLinkPriorToTemplateOperation: %{public}s, elapsedSeconds: %f}
_TtC7reminddP33_47683DF374725731FC8E32F1ED7CD18633RDRootEntityNameByEntityNameCache
cacheKey
ManagedObjectContext missing persistentStoreCoordinator -- Can't get REMFetchResultToken {managedObjectContext: 
ManagedObjectContext missing persistentStoreCoordinator -- Can't get REMFetchResultToken {managedObjectContext: %@}
Store has no transactions. Not getting tokens {store: %@}
Failed to fetch object with ID {moc: %@, objectID: %@, error: %s}
The objectID's store does not exist in the PSC of MOC. This is an account store just got removed? {moc: %@, psc: %s, storeID: %s, objectID: %@, error: %s}
Tried to fetch transactions from managedObjectContext without persistentStoreCoordinator {managedObjectContext: 
Tried to fetch transactions from managedObjectContext without persistentStoreCoordinator {managedObjectContext: %@}
Failed to get transaction from CoreData. No error. {invocation: 
Failed to get transaction from CoreData. No error. {invocation: %@}
Fetched all transactions {allTransactions.count: %ld, sourceToken: %@}
Fetched transactions for store {transactions.count: %ld, store.identifier: %s, store.url: %s, historyToken: %s}
DADBuddyStateObserver(Swift extension) hasPassedBuddyFuture fulfilled
DADSystemAvailabilityChecker(Swift extension) systemAvailableFuture fulfilled
_TtC7remindd20RDDisplayDateUpdater
significantTimeNotificationStream
remindd.RDDisplayDateUpdater
UpdateDisplayDates END {store: %@}
UpdateDisplayDates BEGIN {store: %@}
Failed to update display dates {error: %s}
Not saving since there are no changes {totalUpdatedCount: %ld}
UpdateDisplayDates: Saving last objects {updatedObjectsCount: %ld, totalUpdatedCount: %ld}
UpdateDisplayDates: Saving batch {updatedObjectsCount: %ld, totalUpdatedCount: %ld}
Updating display dates in all stores due to significant time change
REMCDSavedAttachment+CloudKit: mergeData(from:accountID:) Failed to update file asset {savedAttachment: %{public}s, error: %{public}s}
REMCDSavedAttachment+CloudKit: Unexpectedly got cdSavedAttachment.reminder == nil in newlyCreatedRecord() (key=.savedReminder) {savedAttachment: %{public}s}
REMCDSavedAttachment+CloudKit: newlyCreatedRecord() (key=.savedReminder) unsetting savedReminder CK reference as the saved attachment is markedForDeletion {savedAttachment: %{public}s}
REMCDSavedAttachment+CloudKit: newlyCreatedRecord() Failed to compute file URL {savedAttachment: %{public}s, error: %{public}s}
Saved reminder is marked for deletion but saved attachment is not {savedAttachmentID: %{public}s, savedReminderID: %{public}s}
Fixing broken references for saved attachment {savedAttachmentID: %{public}s, savedReminderID: %{public}s}
_TtC7reminddP33_D24FF474DB5580E044D1611A227FBE0734ReminderIDsMergeableOrderingHelper
orderingByListID
listsWithOrdering
_TtC7reminddP33_D24FF474DB5580E044D1611A227FBE0728ReminderIDsMergeableOrdering
orderingChanged
needsSortReminders
data
$__lazy_storage_$_orderedSet
minCompletionDate
custom smart list missing parent account
REMRemindersListBatchDeleteInvocation: updating REMCDList ordering {listID: %s, orderingChanged: %s, needsSortReminders: %s}
Failed to decode reminderIDsMergeableOrdering {error: %s}
ReminderIDsMergeableOrderingHelper orderedSet count: %ld -> %ld
Moving subtask IDs to reflect top level ordering. {subtaskIDs: %s, parentID: %s}
Found subtasks not to be deleted; make them top level instead. {subtaskID: %@, parentID: %s}
_TtC7remindd47RDStoreControllerMigrator_IsPinnedByCurrentUser
%s: END {store: %{public}s, updateCount = %{public}ld, elapsedSeconds: %{public}f}
_TtC7remindd8RDDaemon
xpcClientConnectionListener
disabledAccountsEventHandler
alarmEngine
todayEngine
timelineEngine
assignmentNotificationEngine
hashtagLabelUpdater
stalePinnedListsEventHandler
staleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler
templateOperationQueue
applicationShortcutEngine
coreSuggestionController
housekeepingActivityScheduler
cloudConfigurationUpdater
cloudSchemaCatchUpSyncController
syncActivityNotificationEngine
sharedInlineTagAutoConvertEngine
extraneousAlarmsCollector
manualSortHintUpdater
_TtC7remindd17RDBarebonesDaemon
Reminder barebones daemon started
xpcClientConnectionListener.
Reminder daemon started
RDDisabledAccountsEventHandler
remindd.RDDaemon
_TtC7remindd28RDImageDeduplicationActivity
_TtCC7remindd28RDImageDeduplicationActivity30RDImageDeduplicationExecutable
globalAnalytics
analytics
logPrefix
_TtCCC7remindd28RDImageDeduplicationActivity30RDImageDeduplicationExecutableP33_1753FA1DE56C6C0B2640C3779781310922PreprocessedAttachment
attachment
attachmentIdentifier
sourceURL
destinationURL
fileWasCopied
_TtCCC7remindd28RDImageDeduplicationActivity30RDImageDeduplicationExecutableP33_1753FA1DE56C6C0B2640C3779781310914LocalAnalytics
successes
failures
startTime
_TtCCC7remindd28RDImageDeduplicationActivity30RDImageDeduplicationExecutableP33_1753FA1DE56C6C0B2640C3779781310912CrashCleaner
_TtCC7remindd28RDImageDeduplicationActivityP33_1753FA1DE56C6C0B2640C3779781310948RDImageDeduplicationActivityExecutionDateStorage
[%{public}s] skipping execute because sentinel file exists
[%{public}s] configuration validation fail - cannot execute because configurations.imageDeduplicationApproximatePerRunDeleteLimit is 0
.imageDeduplicationComplete
RDImageDeduplicationActivity.execute
[%{public}s] finish execute()
bytesSuccessfullyHandled
com.apple.reminders.ImageDeduplication
[RDImageDeduplicationActivity] Successfully migrated %{public}ld attachments, finding %{public}ld duplicates, saving %{public}s. Took %s
[%{public}s] finished without deeming complete {errorEncountered: %{bool,public}d, quota remaining: %{public}ld}
[%{public}s] finished with some delete quota remaining: container deemed clean
[%{public}s] no delete limit left {perRunDeleteLimit: %{public}ld}
[%{public}s] Could not create destination directory for hashed attachments {accountID: %{public}@; error: %s}
[%{public}s] Error fetching attachments {error: %s}
[RDImageDeduplicationExecutable] Could not save managedObjectContext {error: %s, accountID: %{public}@}
[%{public}s] Migrated from {%s} to {%s} with sha512sum '%{public}s' {attachmentID: %{public}s}
[RDImageDeduplicationExecutable] Could not delete file <%s> after deduplication. Leaving in place {error: %s, attachmentID: %{public}s, accountID: %{public}@}
[RDImageDeduplicationExecutable] Could not copy file for deduplication. Skipping {error: %s, attachmentID: %{public}s, accountID: %{public}@}
[RDImageDeduplicationExecutable] Failed to migrate from {%s} because sha512Sum failed {attachmentID: %{public}s, accountID: %{public}@}
[RDImageDeduplicationExecutable] Attachment had null fileName {attachmentID: %{public}s, accountID: %{public}@}
[RDImageDeduplicationExecutable] Attachment had null identifier {managedObjectID: %{public}s, accountID: %{public}@}
[%{public}s] Cleaned after crash {accountID: %{public}s, attachmentID: %{public}s
[%{public}s] Purging attachment failed {accountID: %{public}s, attachmentID: %{public}s, error: %@}
[%{public}s] Attachment was not migrated {accountID: %{public}s, attachmentID: %{public}s}
[%{public}s] Invalid cache key {cacheKey: %{public}s
RDImageDeduplicationExecutionDateStorage.updateLastExecutedDate(for:) must work with RDImageDeduplicationActivity only {executable: %{public}s}
RDImageDeduplicationExecutionDateStorage.lastExecutedDate(for:) must work with RDImageDeduplicationActivity only {executable: %{public}s}
remindd.RDImageDeduplicationActivity
_TtC7remindd24REMListStorageCDIngestor
REMListStorageCDIngestor: merge(storage:into cdList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, keys: %{public}s}
Failed to copy reminders from template to list because 'storage.accountID' does not belong a CloudKit account. {storage.objectID: 
, storage.templateID: 
REMListStorageCDIngestor: merge(storage:into cdList:...) Unhandled sharingStatus {objectID: %{public}@, sharingStatus.rawValue: %{public}ld}
Actually really doing nothing for a merge on .remindersICSDisplayOrderChanged
Actually really doing nothing for a merge on .reminderIDsOrderingHints
mergeOrderedSet(): REMCDList.reminderIDsMergeableOrdering data is nil. Serializing from inutput orderedSet directly. {objectID: %@}
mergeOrderedSet(): Failed to merge ordered set for list {list.objectID: %@, key: %s}: %s
mergeOrderedSet(): Merge not supported for REMCDList.reminderIDsMergeableOrdering for now, directly serializing from input orderedSet. {objectID: %@, count: %ld}
Serialized to json data from REMListStorage.reminderIDsMergeableOrdering during ingesting. {objectID: %@}
Removing sharee from list {list.objectID: %@, shareeobjectID: %@}
Removing calDAVNotification from list {list.objectID: %@, calDAVNotificationobjectID: %@}
Failed to copy reminders from template to list due to invalid 'cdAccount.storeControllerManagedObjectContext' {cdAccount.remObjectID: 
Failed to copy reminders from template to list due to invalid templateID.entityName {templateID: 
REMListStorageCDIngestor: mutateOrdering(...) cannot proceed because storage.reminderIDsMergeableOrdering is nil {objectID: %{public}@, key: %{public}s}
REMListStorageCDIngestor:mutateOrdering - number of reminderIDsOrderingHints {count: %ld}
REMListStorageCDIngestor: mutateOrdering(...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}
Cannot get any REMCDList from the ordered set of reminders in the list.
Some reminders have changes in .icsDisplayOrder so ICS display orders is taking precedence as the true sort hint - {list: %@}
q24@?0@8@16
backPropagateOrderingChangesToICSDisplayOrder: Failed to obtain an managedObjextContext from a changed reminder
Back propagated ordering changes to CD reminders - {changes: %s}
backPropagateOrderingChangesToICSDisplayOrder: Failed to pre-fetch changing reminders
Produced empty change logs when trying to back propagated ordering changes to CD reminders, maybe a bug or should shortcut earlier.
Back propagating ordering changes: display order has gone too large in first try. Going to reset from 1 {maxDisplayOrder: %lu, largestDisplayOrder: %lu}
Going to back propagate ordering changes to CD reminders {remindersCount: %ld, startIndexToKeepUntouched: %ld, maxDisplayOrder: %lu}
REMListStorageCDIngestor: establishRelationship(onStorage:into cdList:...) cannot proceed because storage.resolutionTokenMap is nil {objectID: %{public}@, key: %{public}s}
Updating list.parentList {list: %s, parentList: %s}
Updating list.parentAccount {list: %s, account: %s}
Updating list.account {list: %s, account: %s}
REMListStorageCDIngestor: cdList.account is nil {cdList.remObjectID: %@}
REMListStorageCDIngestor: storage(from:) Unhandled sharingStatus {objectID: %{public}@, sharingStatus.rawValue: %{public}ld}
REMListStorageCDIngestor: cdList.reminderIDsMergeableOrdering is nil, replacing with `Data()` {cdList.remObjectID: %@}
Error occured when mapping object from %{public}s to %{public}s {error: %s}
_TtC7remindd29RDManualSortIDPersistenceHost
accountTypeHost
manualSortIDHashKeyProvider
_TtC7remindd55RDUserInitiatedHashtagLabelApprovalTagAutoConvertRunner
onlyConvertIncompleteReminders
 RDUserInitiatedHashtagLabelApprovalTagAutoConvertRunner: Error fetching other reminders containing canonicalName for activity[%{public}s] {error: %{public}s}
 RDUserInitiatedHashtagLabelApprovalTagAutoConvertRunner: activity[%{public}s] has nil ckIdentifier. Deleting without further action
 RDUserInitiatedHashtagLabelApprovalTagAutoConvertRunner: Error autoConverting %{public}s on reminder[%{public}s] {error: %{public}s}
v5_Migrating_to_ZREMCDREMINDER
v6_Migrated_to_ZREMCDREMINDER
_TtC7remindd14RDAccountUtils
_TtCC7remindd14RDAccountUtils32InactivatedICloudCalDavDataMover
store
_TtCC7remindd14RDAccountUtils22LocalDataToICloudMover
com.apple.remindd.accountUtils.accountDataMover
RDAccountUtils.LocalDataToICloudMover: Local account emptied {stats: %{public}s}.
RDAccountUtils.LocalDataToICloudMover: Completed moving data from local to iCloud {target: %{public}@, acAccountIdentifier: %{public}@, stats: %{public}s}
RDAccountUtils.fetchAccountWithAppleAccount: No .calDav iCloud REMAccount found at all {accountIdentifier: %{public}@}
RDAccountUtils.fetchAccountWithAppleAccount: Found an active .calDav iCloud REMAccount {objectID: %{public}@, accountIdentifier: %{public}@}.
RDAccountUtils.fetchAccountWithAppleAccount: Found a .calDav iCloud REMAccount but it is inactive {objectID: %{public}@, accountIdentifier: %{public}@}
RDAccountUtils.fetchAccountWithAppleAccount: Found an active CloudKit REMAccount {objectID: %{public}@, accountIdentifier: %{public}@}.
childCalDAVIdentifierEnabledForReminders: Can't get display account from input {input: %{public}@}
RDAccountUtils: Not an UUID {uuidString: %{public}s}
RDAccountUtils.fetchAccountWithAppleAccount: Failed to get the display account {accountIdentifier: %{public}@}.
RDAccountUtils.fetchAccountWithAppleAccount: Given ACAccount is not Apple account {accountIdentifier: %{public}@}.
RDAccountUtils.fetchAccountWithAppleAccount: Reminders is not enabled for the given ACAccount {accountIdentifier: %{public}@}.
RDAccountUtils.InactivatedICloudCalDavDataMover: The inactivated CalDAV account is now emptied after the data move {stats: %{public}s}.
RDAccountUtils.InactivatedICloudCalDavDataMover: Completed moving data from the inactivated iCloud CalDAV account to CloudKit {ckAccount: %{public}@, acAccountIdentifier: %{public}@, stats: %{public}s}
RDAccountUtils.InactivatedICloudCalDavDataMover: Found an inactivated non-empy iCloud CalDAV account, now going to perform data move... {remObjectID: %{public}@, acAccountIdentifier: %{public}@}
RDAccountUtils.InactivatedICloudCalDavDataMover: Found an inactivated iCloud CalDAV account but it is empty, we're done {remObjectID: %{public}@, acAccountIdentifier: %{public}@}
RDAccountUtils.fetchInactiveCalDavAccount: Didn't find any .calDav iCloud REMAccount {appleACAccountID: %{public}s}
RDAccountUtils.fetchInactiveCalDavAccount: Didn't find an inactve .calDav iCloud REMAccount but found an active one {appleACAccountID: %{public}s}
RDAccountUtils.fetchInactiveCalDavAccount: Found an inactive .calDav iCloud REMAccount {appleACAccountID: %{public}s}
RDAccountUtils: Missing store controller, can't stop ICCC.
RDAccountUtils: Missing ICCC, can't stop ICCC.
RDAccountUtils: Disabled ICCC
RDAccountUtils: Missing store controller, can't start ICCC.
RDAccountUtils: Missing ICCC, can't start ICCC.
RDAccountUtils: Enabled ICCC
RDAccountUtils: _initializeAllAccounts: Missing store controller.
RDAccountUtils: _initializeAllAccounts: RDAccountInitializer.initializeAllAccounts() finished, calling completion.
RDAccountUtils: _initializeAllAccounts: Calling RDAccountInitializer.initializeAllAccounts()
Failed to create store because the XPC daemon is gone
Failed to create store because storeController does not support accountUtils
ACAccount type is not supported or reminders dataclass is not enabled {accountID: %{public}s, accountType: %{public}s}
UpdateAccountWithACAccount: Can't figure out REMAccountType for ACAccountType {acAccountType: %{public}s}
UpdateAccountWithACAccount: Resolved non-Apple account identifier enabled for Reminders from displayACAccount: {resolved: %{public}s, displayACAccount: %{public}@}.
UpdateAccountWithACAccount: Will process non-Apple account {displayAccountID: %{public}s, accountType: %{public}s}
UpdateAccountWithACAccount: AppleAccount {accountID: %{public}s} is ineligible for CloudKit Reminders, will process it as iCloud CalDAV
UpdateAccountWithACAccount: Got an Apple ID, not eligible for CloudKit reminders. Will only process iCloud CalDAV account for it {accountID: %{public}s}
UpdateAccountWithACAccount: Will not fetch migration state {accountID: %{public}s}
UpdateAccountWithACAccount: Will process iCloud CalDAV account {accountID: %{public}s, didChooseToMigrate: %{bool}d}
UpdateAccountWithACAccount: Will process CloudKit account {accountID: %{public}s, type: %{public}s, didChooseToMigrate: %{bool}d, shouldShowCloudKitAccount: %{bool}d, didFinishMigration: %{public}s}
UpdateAccountWithACAccount: setting shouldMigrateInactivatedICloudCalDavData to true {displayAccountID: %{public}s}
Store controller missing for checking whether migration has failed
Display ACAccount ID is not an UUID {displayACAccountID: %s}
UpdateAccountWithACAccount: Try to update account object {accountID: %{public}s}
Missing Cloud Context and not be able to fetch migration state
Missing cloud context for fetching migration state {accountID: %{public}s}
Fetch migration state from user record {accountID: %{public}s}
Cache migration state in ACAccount object {accountID: %{public}s}
Failed to fetch user record. Let's assume the account is not migrated {accountID: %{public}s}
Received migration state from user record {accountID: %{public}s}
Error updating migration flags for ACAccount {acAccount: %@, error: %s}
Migration state cache saved {accountID: %{public}s}
UpdateAccountWithACAccount: Failed to fetch migration status. Assume the account is un-migrated {error: %s, accountID: %{public}s}
UpdateAccountWithACAccount: Migration state fetched {accountID: %{public}s}
Error updating migration flags for ACAccount {acAccount: %{public}@, error: %s}
nonCloudKitAccountIdentifierEnabledForReminders: Can't get display account from input {input: %{public}@}
UpdateAccountsWithAccountInfos: Updating account object {accountID: %{public}s}
UpdateAccountsWithAccountInfos: Saving account object changes
UpdateAccountsWithAccountInfos: Failed to create UUID object, account ignored {accountID: %{public}s}
UpdateAccountsWithAccountInfos won't create inactive accounts unless it is CloudKit {name: %s, accountID: %{public}s, type: %{public}s}
UpdateAccountsWithAccountInfos will flip `inactive` state of account {newState: %{public}s, accountID: %{public}s, type: %{public}s}
UpdateAccountsWithAccountInfos is creating account object {name: %s, accountID: %{public}s, type: %{public}s}
UpdateAccountsWithAccountInfos: Unexpected account type, account ignored. {accountName: %s, accountID: %{public}s, expectedType: %ld, actualType: %ld}
UpdateAccountsWithAccountInfos is updating existing account object {name: %s, accountID: %{public}s, type: %ld}
UpdateAccountsWithAccountInfos is going to delete account {accountName: %s, accountID: %{public}s, type: %ld}.
UpdateAccountsWithAccountInfos: Account object changes saved
UpdateAccountsWithAccountInfos: Error saving context after adding account {error: %s}
UpdateAccountWithACAccount: inserting to daemonUserDefaults.acAccountIdentifiersToMigrateInactivatedCalDavData {displayAccountID: %{public}s}
Found ACAccount without identifier
ACAccount type not allowlisted, assume it's CalDAV {typeIdentifier: %s}
RDAccountUtils: Unexpected call to remAccountType(from:) with ACAccountTypeIdentifierAppleAccount {AC-identifier: %{public}s}
Failed to create REMStore for requestToMergeLocalDataIntoSyncData
Error occurred when trying to delete local data {error: 
RDAccountUtils: requestToDeleteLocalData: Error occurred when trying to delete local data {error: %{public}s}
RDAccountUtils: requestToDeleteLocalData: Local account emptied {stats: %{public}s}.
RDAccountUtils: requestToMergeLocalDataIntoSyncData: Could not find an Apple ACAccount for {acAccountIdentifier: %{public}s}
Error occurred when trying to move data from local to iCloud {acAccountIdentifier: 
RDAccountUtils: requestToMergeLocalDataIntoSyncData: Error occurred when trying to move data from local to iCloud {acAccountIdentifier: %{public}s error: %{public}s}
RDAccountUtils: requestToMergeLocalDataIntoSyncData: icloud account store does not exists yet, will move local data later {acAccountIdentifier: %{public}s}
Local account is empty error occurred when trying to move data from local to iCloud {acAccountIdentifier: 
RDAccountUtils: requestToMergeLocalDataIntoSyncData: Local account is empty, we won't move local data to cloud {acAccountIdentifier: %{public}s}.
RDAccountUtils: requestToMergeLocalDataIntoSyncData: icloud account store already exists, move local data now {acAccountIdentifier: %{public}s}
RDAccountUtils: requestToMergeLocalDataIntoSyncData {acAccountIdentifier: %{public}s}
Failed to create REMStore for removing orphaned accounts
RDAccountUtils: Remove orphaned accounts
Couldn't fetch accounts from ACAccountStore.
RDAccountUtils: Couldn't fetch accounts from ACAccountStore. Not able to determine orphaned accounts.
Failed to remove accounts which are no longer signed-in
Failed to fetch accounts which are no longer signed-in {error: %s}
Removing orphaned accounts {accounts: %s}
No orphaned accounts to remove.
RDAccountUtils: Trying to remove orphaned accounts
Orphaned accounts removed
DADMain is disabled after we stop monitoring agents. Will not try re-starting agents.
No ACAccount is found for updating account object {acAccountID: 
Failed to create REMStore for updating account object {acAccountID: 
RDAccountUtils: Updating account {accountID: %{public}s}
Failed to create REMStore for updating account database
RDAccountUtils: Updating system accounts
No reminders accounts is found
RDAccountUtils: Finished updating account {accountID: %{public}@}
Failed to update some or all of the system accounts {error: %s}
RDAccountUtils: Completed updating system accounts, calling updateAccountsAndFetchMigrationState completion {didAddOrRemoveAccounts: %{bool}d, didUpdateAccounts: %{bool}d, error: %s}
Failed to restart DA monitoring agents
Purge ACAccount migration state cache
Error saving ACAccount {error: %s}
No ACAccount is found for updating migration state {acAccountID: %{public}s}
RDAccountUtils: Process migration state change
Failed to create REMStore for migrating preferred default list
Can't migrate default list ID {error: %s}
Default list is CalDAV but has no external identifer
Default list with unrecognized external identifier (missing slash) {externalIdentifier: 
Default list with unrecognized external identifier (invalid UUID) {externalIdentifier: 
Failed to create REMStore for process migration state change
reminder.list.daIsEventOnlyContainer
reminder.list.daIsNotificationsCollection
account.inactive
%{public}s:prepareForDeletion() '\REMCDSavedAttachment.storeControllerManagedObjectContext' should not be nil {savedAttachmentID: %{public}s}
%{public}s:prepareForDeletion() '\REMCDSavedAttachment.identifier' should not be nil {moid: %{public}@}
%{public}s:prepareForDeletion() '\REMCDSavedAttachment.account' should not be nil {moid: %{public}s}
%{public}s:prepareForDeletion() '\REMCDSavedAttachment.account.identifier' should not be nil {moid: %{public}s}
%{public}s:prepareForDeletion() {savedAttachmentID: %{public}s}
Created reminder fetchRequest {fetchRequest: %@}
Due date sorting missing due date
Given cdReminders should not contain any element that is not a REMCDReminder.
newCloudObject: Unknown alarm trigger type {type: %{public}s}
mergeData: Unknown trigger type {type: %s}
ReferenceFrameString
DateComponentsData
Alarm is marked for deletion but alarm trigger is not {alarmTriggerID: %{public}s, alarmID: %{public}s}
Fixing broken references for alarmTrigger {alarmTriggerID: %{public}s, alarmID: %{public}s}
alarmReferenceCKRecordType
Record.type is date but this is not a date trigger {type: %s}
Record.type is location but this is not a location trigger {type: %s}
Record.type is time interval but this is not a time interval trigger {type: %s}
Record.type is vehicle but this is not a vehicle trigger {type: %s}
_TtC7remindd26RDStoreControllerAnalytics
q_fetchCounts
q_saveCounts
q_postEventWorkItem
enabled
storeControllerReadWriteEventName
remindd.RDStoreControllerAnalytics
com.apple.remindd.storecontroller.readwrite
totalReminderCount
softDeletedReminderCount
incompleteReminderCount
sharedListsCount
parentReminderCount
flaggedReminderCount
structuredTagCount
nonDeletedAlarmCount
softDeletedAlarmCount
incompleteLocationAlarmsCount
incompleteTimeAlarmsCount
_TtC7remindd32RDSuggestedAttributesAutoTrainer
persistentStorage
storeControllerObserverToken
Starting RDSuggestedAttributesAutoTrainer
Started RDSuggestedAttributesAutoTrainer more than once
Scheduling XPCActivity before start()
RDSuggestedAttributesAutoTrainer schedule {isDatabaseDirty: %{bool}d, assumeDatabaseDirty: %{bool}d}
Error getting latest FetchResultToken. Returning q_isDatabaseDirty == false {error: %{public}s}
RDSuggestedAttributesAutoTrainer TRAIN END {results: %{public}s}
RDSuggestedAttributesAutoTrainer TRAIN START
Cannot obtain the associated persistent store of the given hashtag
REMCDHashtagLabel.createHashtagLabel: Cannot obtain the associated persistent store of the given hashtag {hashtagID: %{public}s, hashtagAccountID: %{public}s}
Hashtag does not have matching account identifier with the given persistent store
REMCDHashtagLabel.createHashtagLabel: Hashtag does not have matching account identifier with its persistent store {hashtagID: %{public}s, hashtagAccountID: %{public}s, pStoreAccountID: %{public}s}
_TtC7remindd56RDStoreControllerMigrator_AccountIdentifierHashtagLabels
AccountIdentifierHashtagLabelsMigrator {store: %{public}s} accountIdentifier is nil, skip migration
AccountIdentifierHashtagLabelsMigrator BEGIN {store: %{public}s}
AccountIdentifierHashtagLabelsMigrator END {store: %{public}s, migrated hashtag labels count = %ld}
AccountIdentifierHashtagLabelsMigrator with error: %s
Failed to decode the parameters of RDSwiftInvocable {error: %s, invocation: %s}
Failed to encode the result of RDSwiftInvocable {error: %s, invocation: %s}
Dropping unsupported criterion for searching REMCDSmartList. {criterion: %s}
Error ingesting cdSmartList.parentList into list storage {error: %s}
REMSmartCDList's parentList is unexpectedly deleted {identifier: %{public}s}
must only fetch smart list type that is either hasPredefinedObjectID or specify a custom objectID to match
Unexpected usage of cdSmartList(smartListType:objectID:in:...) - you must either fetch smart list of a type which hasPredefinedObjectID, or specify an objectID to match {smartListType: %{public}s}
fetching smart list returned more than one result {type: %s objectID: %s, count: %s}
Unexpected smart list type to fetch by predefined objectIDs
Unexpected smart list type to fetch by predefined objectIDs {smartListType: %{public}s}
BOGUS! Practically cdSmartListsHavingCustomObjectID(...) is meant to be used for fetching CSLs only {smartListType: %{public}s, objectID: %{public}@}
Smart list type with predefined objectIDs should not be fetched by cdSmartListsHavingCustomObjectID()
Smart list type with predefined objectIDs should not be fetched by cdSmartListsHavingCustomObjectID() {smartListType: %{public}s}
expecting a valid REMAccount for a custom smart list
REMCDAccount.recordName() cannot be determined because it is called before .ckUserRecordName is initialized {account: %{public}s}
We aren't supposed to call REMCDAccount.newCloudObject(for:accountID:context:) on sync down, as CloudKit accounts creation is always managed internally by RDAccountUtils {accountID: %{public}s, recordID: %{public}s}
REMCDAccount.sortChildrenObjects() Not expected to be called practically {account: %{public}s}
Missing store controller for processing migration state change {accountID: %{public}s}
Missing cloud context for processing migration state change {accountID: %{public}s}
Missing account utils for processing migration state change {accountID: %{public}s}
Migration state did change {accountID: %{public}s, didChooseMigration: %{bool}d, didFinishMigration: %{bool}d}
mergeMigrationState(fromRecord:) - Printing resolution tokens for debugging upon toggling didFinishMigration->FALSE - {didChooseToMigrate: (record=%s, CD=%s), didFinishMigration: (record=%s, CD=%s)}
ERROR mergeMigrationState(fromRecord:) - Trying to merge account record that toggles didFinishMigration->FALSE after finishing migration {isAccountRecord: %{bool}d, accountID: %{public}s}
mergeMigrationState(fromRecord:) - Toggling didFinishMigration->FALSE {isAccountRecord: %{bool}d, accountID: %{public}s, didChooseToMigrateChanged: %{bool}d, didChooseToMigrate: %{bool}d}
MERGE.LOCAL: cleanUpAfterLocalObjectMerge: This REMCDAccount has no remObjectID (ckIdentifier: %{public}s, externalIdentifier: %{public}s).
MERGE.LOCAL: cleanUpAfterLocalObjectMerge: This REMCDAccount has no listIDsMergeableOrdering (accountID: %{public}@).
MERGE.LOCAL: Clean up account.listIDsOrdering {listIDs.to.remove: %s}
MERGE.LOCAL: cleanUpAfterLocalObjectMerge: This REMCDAccount has nil lists (accountID: %{public}@).
B20@0:8B16
v32@0:8@16B24B28
REMCDAccount+CloudKit: Could not proceed to upsertOrderedIdentifiersForAccountListView() because storeController isn't available {account: %{public}s}
REMCDAccount+CloudKit: Could not proceed to upsertOrderedIdentifiersForAccountListView() because there is problem finding the persistent store for the account {account: %{public}s}
REMCDAccount+CloudKit: Sorted intermixed ordered IDs for CSLs and Lists in REMCDAccountListData {account: %{public}s, #csls: %ld, #lists: %ld}
REMCDAccount+CloudKit: Not sorting child smartLists becuase REMCDAccount.mutableOrderedSetValue(forKey: smartLists) is nil
REMCDAccount+CloudKit: Sorted CSLs into account.smartLists {account: %{public}s, #csls: %ld}
REMCDAccount+CloudKit: Sort ordered set account.smartLists - after - {smartLists: %s}
REMCDAccount+CloudKit: Sort ordered set account.smartLists - before - {smartLists: %s, ordering: %@}
Not sorting child lists becuase REMCDAccount.mutableOrderedSetValue(forKey: lists) is nil
Sort ordered set account.lists - after - {lists: %s}
Sort ordered set account.lists - before - {lists: %s, ordering: %@}
SharedListIDsToOwnerNames
Failed to encode ckSharedObjectOwnerNames in JSON {error: %s}
Invalid ckSharedObjectOwnerName entry {objectIdentifier: %s, ownerName: %s}
Failed to create a new listIDsMergeableOrdering when trying to update listIDsMergableOrdering for missing list(s)
Tried to update listIDsMergableOrdering for missing list but list has no identifier {list: %@}
Unable to create new listIDsMergeableOrdering because replicaIDSource isn't available {key: %{public}s, cdObject: %@}
Deserializing listIDsMergeableOrdering from cdAccount listIDsMergeableOrdering data {recordID: %s}
REMCDAccount.mergeData(from): Could not post RDStoreControllerREMAccountPropertiesDidUpdate due to unexpected values {accountID: %{public}s, changedValue: %s}
REMCDAccount.mergeData(from): Synced and merged account .personIDSalt change from CloudKit record {accountID: %{public}s}
Deserializing listIDsMergeableOrdering from account record listIDsMergeableOrdering data {recordID: %s}
Succesfully processed migration state change after merging CK user record
Failed to process migration state change after merging CK user record {error: %s}
listTypeRawValue
listID
hintData
lastAccessedSinceReferenceDate
Ti,N,D
concatenatedContainerIDsWithLocalContainerIDPrefix
concatenatedElementIDsWithLocalElementIDPrefix
.internalTestTool
.peopleInteraction
.userInteractive
.readWriteLocalInternal
.readWritePublic
com.apple.private.dark-wake-push
com.apple.private.xpc.domain-extension
com.apple.private.DistributedEvaluation.RecordAccess-com.apple.reminders.des
com.apple.private.des-service
com.apple.security.exception.shared-preference.read-only
com.apple.security.temporary-exception.shared-preference.read-only
com.apple.security.exception.shared-preference.read-write
com.apple.security.temporary-exception.shared-preference.read-write
com.apple.symptom_diagnostics.report
com.apple.private.tcc.manager.check-by-audit-token
com.apple.private.tcc.allow.overridable
com.apple.private.tcc.allow
com.apple.security.exception.mach-lookup.global-name
com.apple.security.temporary-exception.mach-lookup.global-name
application-identifier
com.apple.application-identifier
Can't construct REMResolutionTokenMap from invalid JSON
Can't construct REMResolutionToken from invalid JSON
modificationTime
_TtC7remindd25RDTodayNotificationEngine
bannerTimeEventStream
badgeEventStream
dynamicSignificantTimeNotificationEngine
todayNotificationTimeObserver
badgeCountCriteriaObserver
Failed to fetch reminder count. Failed to update today badge {error: %s}
Updating application badge. {includeToday: %s, count: %ld}
RDTodayNotificationEngine: started updateApplicationBadge
Posted today badge notification. {includeToday: %s, count: %ld}
Unable to post today badge notification. {error: %s}
User doesn't want today notifications at all. Not adding next time event.
Error fetching scheduled reminders when getting nextReminderDueDateMidnight {error: %s}
No time in todayTimeCandidates is in the future. Not adding next time event. {todayTimeCandidates: %s}
Scheduled next todayNotification fire date {nextFireDate: %{public}s}
Deciding when to wake up for the next TodayNotification {todayTimeCandidates: %s, now: %s}
RDTodayNotificationEngine: started addNextBannerTimeEvent
User doesn't want today notifications at all. Not posting today notification.
Unable to find last fire date. Not firing Today Notification. {todayNotificationFireTime: %{public}s, now: %{public}s}
Current time is >%{public}fs after desired fire time. Not firing Today Notification {lastFireDate: %{public}s, now: %{public}s}
Unable to fetch REMTodayDataView. Not posting any todayNotification. {error: %s}
No all-day reminder whose lastBannerPresentationDate is before their own dueDate (at TodayNotificationFireTime). Not posting TodayNotification.
No reminderIDs found in Today smart list. Not posting TodayNotification.
No reminders in Today view. Not showing today notification.
REMRemindersListDataView.fetchScheduled up to now fetched AllDay reminders. {count: %ld}
RDTodayNotificationEngine: started postTodayNotificationIfApplicable
TodayNotificationEngine has updated lastBannerPresentationDate {reminderIDs: %{public}s, lastBannerPresentationDate: %{public}s}
TodayNotificationEngine is unable to update lastBannerPresentationDate {reminderIDs: %{public}s, error: %s}
Failed to compute current hour when posting analytics to event com.apple.reminders.notification with {type: today}
today
RDTodayNotificationEngine: Posted Today notification {body: %s}
RDTodayNotificationEngine: Unable to post Today notification {error: %s}
Evaluating whether to trigger TodayNotification {reminderID: %{public}@, lastPresentationTime: %{public}s, fireDate: %{public}s, now: %{public}s}
com.apple.remindd.todayEngine.start
v16@?0@"NSDateComponents"8
Starting RDTodayNotificationEngine
RDTodayNotificationEngine.start() must be called exactly once
os_transaction RELEASE {name: com.apple.remindd.todayEngine.start}
Received storeController changed notification after RDTodayNotificationEngine was deallocated
com.apple.remindd.todayEngine.storeControllerChange
os_transaction INIT {name: com.apple.remindd.todayEngine.storeControllerChange}
os_transaction RELEASE {name: com.apple.remindd.todayEngine.storeControllerChange}
Received streamBadgeCountCriteria callback on deallocated RDTodayNotificationEngine
com.apple.remindd.todayEngine.streamBadgeCountCriteriaObserver
os_transaction INIT {name: com.apple.remindd.todayEngine.streamBadgeCountCriteriaObserver}
includeToday: %s
os_transaction RELEASE {name: com.apple.remindd.todayEngine.streamBadgeCountCriteriaObserver}
Received RDTimeEventHandler event on deallocated RDTodayNotificationEngine
com.apple.remindd.todayEngine.badgeEventStream
os_transaction INIT {name: com.apple.remindd.todayEngine.badgeEventStream}
todayNotificationBadge event triggered
os_transaction RELEASE {name: com.apple.remindd.todayEngine.badgeEventStream}
Received streamTodayNotificationFireTime callback on deallocated RDTodayNotificationEngine
com.apple.remindd.todayEngine.todayNotificationTimeObserver
os_transaction INIT {name: com.apple.remindd.todayEngine.todayNotificationTimeObserver}
streamTodayNotificationFireTime: %s
os_transaction RELEASE {name: com.apple.remindd.todayEngine.todayNotificationTimeObserver}
com.apple.remindd.todayEngine.bannerTimeEventStream
os_transaction INIT {name: com.apple.remindd.todayEngine.bannerTimeEventStream}
todayNotification XPC Event triggered
os_transaction RELEASE {name: com.apple.remindd.todayEngine.bannerTimeEventStream}
_TtC7remindd22RDManagedObjectIDCache
_TtC7remindd50RDPrimaryActiveCloudKitAccountManagedObjectIDCache
_TtC7remindd21RDPredefinedObjectKey
Tq,N,R
_TtC7remindd32RDPredefinedManagedObjectIDCache
_TtC7remindd58RDPredefinedSmartListAndManualOrderingManagedObjectIDCache
remindd.RDPredefinedObjectKey
RDManagedObjectIDCacheProtocol
_TtC7remindd21RDElementManualSortID
ckElementID
_TtC7remindd13RDAlarmEngine
producers
consumers
Unable to get infer RDProducerAlarmTrigger enum from trigger {trigger: %@}
This is an incorrect use of API. peopleInteraction origin takes an additional parameter that cannot be deduced solely by the REMAlarm. You need to create the origin enum manually
AlarmEngine didn't expect to receive actions of this type. {type: %s, response: %@}
Error trying to retrieve reminder {notificationIdentifier: %{public}s, error: %s}
Unexpected .viewRemindersInList action for notification type .remindersAlarm
Unexpected .declineAssignment action for notification type .reminderAlarm
Unexpected .viewAssignmentInList action for notification type .reminderAlarm
Unexpected .addToReminders action for notification type .reminderAlarm
Handle notification action for reminder {reminderID: %{public}@, action: %{public}s}
Processing notification response {actionIdentifier: %{public}s, notificationIdentifier: %{public}s}
Updated reminder successfully. {actionIdentifier: %{public}s, reminderID: %@}
Save error. Failed to save updates from notification response {error: %s , reminderID: %{public}@, actionIdentifier: %{public}s}
Finished starting alarmEngine {engine: %s, producers.count: %ld}
Starting alarmEngine {engine: %s, producers.count: %ld, consumers.count: %ld}
remindd/RDAlarmEngine.swift
Started RDAlarmEngine twice -- Crashing
com.apple.remindd.RDAlarmEgnine.alarmDatabaseDidChange
Received store changes with deallocated alarm engine
os_transaction INIT {name: com.apple.remindd.RDAlarmEgnine.alarmDatabaseDidChange}
Triggered alarmEngine database did change. Notifying producers
os_transaction RELEASE {name: com.apple.remindd.RDAlarmEgnine.alarmDatabaseDidChange}
os_transaction RELEASE {name: com.apple.remindd.RDAlarmEngineAssembly}
RDAlarmEngine:debouncePolicy: DB load is '%s', debounce interval to use: %f s, stats: {average: %f, #sample: %ld}
REMRemindersListDataView.AssignedInvocation: cdAssignment has no ckAssigneeIdentifier {identifier: %s}
REMRemindersListDataView.AssignedInvocation: cdAssignment has no identifier %@
REMRemindersListDataView.AssignedInvocation: cdAssignment has no owning reminder {identifier: %s}
REMRemindersListDataView.AssignedInvocation - Got a shared to/from me list that doesn't have the current user in the sharee list, huh?! {listID: %{public}s}
Unknown or undefined account type in AccountsListDataView
_TtC7remindd15RDDatabaseSaver
RDDatabaseSaver: Found more than 1 primary cloudkit account storage in array {accountIDs: %{public}s}
Unexpected use of REMStoreModeEventKitSync to edit/insert/remove CloudKit account(s)
RDDatabaseSaver: Unexpected use of REMStoreModeEventKitSync to edit/insert/remove CloudKit account(s) {author: %{public}s, clientIdentity: %{public}s}
RDDatabaseSaver: ingestionCoordinator.run()
RDDatabaseSaver: managedObjectContext.save()
SAVE END {request.author: %{public}s, clientIdentity: %{public}s, containerURL: %{public}s}
RDDatabaseSaver: Attempt to ingest REMReminderStorage with unexpected '\REMReminderStorage.objectID.entityName' {author: %{public}s, clientIdentity: %{public}s, reminderStorage.objectID: %{public}@}
RDDatabaseSaver: Error performing removeAccountStores(withIdentifiers:). {error: %{public}s}
RDDatabaseSaver: Removed account stores {clientIdentity: %{public}s, accountIdentifiers: %{public}s}
RDDatabaseSaver: These accounts are marked for removal {clientIdentity: %{public}s, accountIdentifiers: %{public}s}
unknown mode
RDDatabaseSaver: createMissingAccountStores did not add any new store because stores for all accounts are already present.
RDDatabaseSaver: createMissingAccountStores did add some new stores.
DADREMUserNotificationPresenting: content must be kind of UNMutableNotificationContent
DADREMUserNotificationPresenting: show notification for DA {identifier: %{public}s, category: %{public}s, content.userInfo: %s}
_TtC7remindd12RDDataAccess
dataAccessRequestsQueue
remStoreProvider
userNotificationCenterProvider
_TtC7reminddP33_9540E3B410C6F96B6B224FD2AED82F7B28RDDataAccessREMStoreProvider
@40@0:8@16@?24@?32
rdDaemonController
_TtC7reminddP33_9540E3B410C6F96B6B224FD2AED82F7B46RDDataAccessUserNotificationPresentingProvider
Implementation of REMDAAccountPropertiesObserving must be actually RDAccountPersonIDSaltObserver
You should set up a RDStoreControllerNotificationCenter and work queue before starting RDDataAccess in order to observe reminders database.
Received store changes with deallocated RDDataAccess!
RDDataAccess: Received store controller changes!
RDDataAccess RDDARequest.updateContentsOfAllFolders {accountIDs: %{public}s}
BehaviorManager says dataAccess is not enabled {dataAccessEnabled: false}
Did query DataAccess Enabled status {dataAccessEnabled: true}
RDDataAccess: Did add pending request {from: %{public}s}.
com.apple.remindd.dataaccess.launch
os_transaction INIT {name: com.apple.remindd.dataaccess.launch}
RDDataAccess is starting...
com.apple.remindd.dataaccess.agentManager.load
os_transaction RELEASE {name: com.apple.remindd.dataaccess.launch}
RDDataAccess finished starting (note that DADAgentManager may not have done loading up yet)
os_transaction INIT {name: com.apple.remindd.dataaccess.agentManager.load}
RDDataAccess has done waitForSystemAvailability, now adding to operation queue to bootstrap DADAgentManager
os_transaction RELEASE {name: com.apple.remindd.dataaccess.agentManager.load}
RDDataAccess has done _loadAndStartMonitoringAgents on DADAgentManager
remindd/RDDataAccess.swift
You must first call RDDataAccess.setup(...) to set up a RDDaemonController before accessing RDDataAccess.shared
You must first call RDDataAccess.setup(...) to set up a rdUserNotificationCenter that conforms to DADREMUserNotificationPresenting before accessing RDDataAccess.shared
You must first call RDDataAccess.setup(...) to set up a rdStoreControllerNotificationCenter before accessing RDDataAccess.shared
REMDAAccountPropertiesObserving
DADREMStoreProvider
@"REMStore"16@0:8
@"REMSaveRequest"16@0:8
@"<REMDAAccountPropertiesObserving>"40@0:8@"OS_dispatch_queue"16@?<v@?@"NSData">24@?<v@?@"NSError">32
v24@0:8@"<REMDAAccountPropertiesObserving>"16
B24@0:8@"NSError"16
DADREMUserNotificationPresentingProvider
@"<DADREMUserNotificationPresenting>"16@0:8
DADREMUserNotificationContent
title
body
v24@?0@"NSData"8@"NSError"16
v16@?0@"CKRequestInfo"8
_TtC15InvernessClient15InvernessClient
serviceName
container
databaseType
qualityOfService
requestCompletedBlock
-inf
type.googleapis.com
google.protobuf.Duration
google.protobuf.Type
google.protobuf.Field
google.protobuf.Enum
google.protobuf.EnumValue
google.protobuf.Option
_TtCV13SwiftProtobuf20Google_Protobuf_TypeP33_6F98CA5B40D5770487A5728B8BE8E47F13_StorageClass
_name
_fields
_oneofs
_sourceContext
_TtCV13SwiftProtobuf20Google_Protobuf_EnumP33_6F98CA5B40D5770487A5728B8BE8E47F13_StorageClass
_enumvalue
_TtCV13SwiftProtobuf22Google_Protobuf_OptionP33_6F98CA5B40D5770487A5728B8BE8E47F13_StorageClass
_value
value
number
enumvalue
syntax
CARDINALITY_UNKNOWN
CARDINALITY_OPTIONAL
CARDINALITY_REQUIRED
CARDINALITY_REPEATED
TYPE_UNKNOWN
TYPE_DOUBLE
TYPE_FLOAT
TYPE_INT64
TYPE_UINT64
TYPE_INT32
TYPE_FIXED64
TYPE_FIXED32
TYPE_BOOL
TYPE_STRING
TYPE_GROUP
TYPE_MESSAGE
TYPE_BYTES
TYPE_UINT32
TYPE_ENUM
TYPE_SFIXED32
TYPE_SFIXED64
TYPE_SINT32
TYPE_SINT64
kind
cardinality
oneof_index
packed
json_name
default_value
oneofs
SYNTAX_PROTO2
SYNTAX_PROTO3
_TtC13SwiftProtobuf15DoubleFormatter
doubleFormatString
work
google.protobuf.Empty
fieldNumber
fieldName
messageType
google.protobuf.DoubleValue
google.protobuf.FloatValue
google.protobuf.Int64Value
google.protobuf.UInt64Value
google.protobuf.Int32Value
google.protobuf.UInt32Value
google.protobuf.BoolValue
google.protobuf.StringValue
google.protobuf.BytesValue
SwiftProtobuf/BinaryDecoder.swift
Somehow BinaryDecoding unwound more objects than it started
org.swift.protobuf.typeRegistry
google.protobuf.Timestamp
seconds
nanos
google.protobuf.SourceContext
file_name
google.protobuf.Api
google.protobuf.Method
google.protobuf.Mixin
_TtCV13SwiftProtobuf19Google_Protobuf_ApiP33_CEA2A4FA6D1C07D784D5EE9B6CE9521113_StorageClass
_methods
_version
_mixins
_syntax
root
request_type_url
request_streaming
response_type_url
response_streaming
methods
version
source_context
mixins
\u00
"NaN"
"Infinity"
"-Infinity"
_TtC13SwiftProtobuf17AnyMessageStorage
_typeURL
SwiftProtobuf/JSONScanner.swift
Fatal error
Somehow JSONDecoding unwound more objects than it started
#json: 
google.protobuf.FieldMask
paths
key value 
false
true
SimpleExtensionMap(
_TtC13SwiftProtobufP33_ACE262E8B2F1F7C26CC1ADDF6C99D01E10InternPool
interned
google.protobuf.Struct
google.protobuf.Value
google.protobuf.ListValue
_TtCV13SwiftProtobuf21Google_Protobuf_ValueP33_D700BA243E574A08E6B851AAC52D261C13_StorageClass
_kind
SwiftProtobuf/TextFormatEncodingVisitor.swift
values
null_value
number_value
string_value
bool_value
struct_value
list_value
fields
NULL_VALUE
google.protobuf.Any
SwiftProtobuf/Message+TextFormatAdditions.swift
SwiftProtobuf/Google_Protobuf_Any+Extensions.swift
type_url
UnparentedObjectsMigration BEGIN {store: %@}
Failed to save delete batch. Migration error {deleteError: %@}
UnparentedObjectsMigration End {store: %@, countDeleted: %ld}
rem_log_fault_if(![NSStringFromClass([REMCDAuxiliaryChangeInfo class]) isEqualToString:NSStringFromClass(self)]) -- A subclass of REMCDAuxiliaryChangeInfo called '- [REMCDAuxiliaryChangeInfo cdEntityName]'. The subclass should override this method. {callstack: %@}
Could not get method for selector %@ on target %@
Store missing url. Failed to populate RDStoreControllerAccountIdentifier {store: %{public}@}
Error fetching accounts. Failed to populate RDStoreControllerAccountIdentifier {error: %{public}@}
No account found in store {store: %{public}@}
Account has nil identifier. Failed to populate RDStoreControllerAccountIdentifier {account: %{public}@}
Populating RDStoreControllerAccountIdentifier {store: %{public}@, identifier: %{public}@}
Processing cloud batch (%d of %@) in throttling level (%d of %d): %@
Switching to cloud throttling level (%d of %d): %@
Resetting cloud throttling policy to the first level: %@
Trying to add zoneID without an account ID
Trying to add zoneID with an empty account ID
Trying to add nil zoneID.
Trying to remove zoneID without an account ID
Trying to remove zoneID with an empty account ID
ICCloudContext INIT {supportsCloudKitSyncing: %ld, syncSettingsSupportsCloudKitSyncing: %ld, storeControllerSupportsCloudKitSyncing: %ld}
os_transaction INIT {name: com.apple.remindd.cloudkit.launch.pending.DADSystemAvailabilityChecker}
ICCC: Done waiting DADSystemAvailabilityChecker upon daemon launch and now try to bootstrapSyncingOnLaunchIfSystemReady.
os_transaction RELEASE {name: com.apple.remindd.cloudkit.launch.pending.DADSystemAvailabilityChecker}
os_transaction INIT {name: com.apple.remindd.cloudkit.launch.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver}
ICCC: Received RDAccountInitializer.DidCompleteInitializeAllAccountsNotification upon daemon launch and now try to bootstrapSyncingOnLaunchIfSystemReady.
os_transaction RELEASE {name: com.apple.remindd.cloudkit.launch.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver}
ICCC: Observing RDAccountInitializer.DidCompleteInitializeAllAccountsNotification on daemon launch before we enable syncing.
ICCC: Actually running bootstrapSyncingOnLaunchIfSystemReady to bootstrap CloudKit syncing.
ICCC: bootstrapSyncingOnLaunchIfSystemReady: Not ready to bootstrap syncing yet {isSystemAvailableForSyncing=%d, pendingAccountInitializerCompleteOnLaunch=%d}
Not passed buddy. ICCC now registers for buddy.
ICCC received buddy finished notification.
ICCC now unregisters buddy observer.
[%{public}@] Cannot proceed because account.identifier is nil
[%{public}@] Cannot proceed because aaAccount.aa_altDSID is nil {accountIdentifier: %{public}@}
[%{public}@] ICCloudContext does not conform to RDICCloudContextCryptoStringProviding - should implement it in a Swift extension
Attempting to look up AAAccount while system is not ready {hasPassedBuddy: %d, isSystemAvailableForSyncing: %d}
Updating CK account personID due to primary CK account salt set {account.identifier: %{public}@, oldPersonID: %{public}@, newPersonID: %{public}@}
No personID update made upon primary CK account salt set {ckAccounts.count: %ld, salt: %@}
Unsetting CK account personID due to primary CK account salt error {account.identifier: %{public}@, origPersonID: %{public}@, origPersonIDSalt: %@}
No personID update made upon primary CK account salt update error {ckAccounts.count: %ld, error: %{public}@}
ICCC is already observing primary CK account personIDSalt changes with RDAccountPersonIDSaltObserver {observer: %{public}@}
ICCC no longer available upon our RDAccountPersonIDSaltObserver success handler is called
ICCC received a primary CK account personIDSalt change or initial value {observer: %{public}@}
ICCC no longer available upon our RDAccountPersonIDSaltObserver error handler is called
ICCC received a primary CK account personIDSalt error {observer: %{public}@, saltError: %{public}@}
Clearing cloud containers.
containerForAccountID: accountID is nil
containerForAccountID: accountID is empty
Could not set affectedStores for mergeLocalObjectsFetchContext because we can't find persistent store for accountIdentifier: %{public}@
Could not set affectedStores for mergeLocalObjectsWriteContext because we can't find persistent store for accountIdentifier: %{public}@
filterNonUploadableChangedManagedObjectIDs: objectIDs with nil entity name: %{public}@
filterNonUploadableChangedManagedObjectIDs: objectIDs with nil store id: %{public}@
[%{public}@] Passing in nil '%s'
isReadyToSyncWithActiveAccountAvailable: accountStatusNumberByAccountID is empty, withActiveAccountAvailable = NO, containersByAccountID is not empty
OS version sent from server is in the incorrect format. Should be majorVersion,minorVersion,patchVersion
Current version of the OS (%{public}@) is not supported for sync. Needs at least (%{public}@)
Re-gain internet connection after losing it for a short time. Not going to sync. (throttled)
Cloud context found an internet connection.
Cloud context lost an internet connection.
Reachability sync finished {error: %{public}@}
CloudKit account status may have changed
Operation queue has 0 operations
Operation queue has %d operation(s):%{public}@
Adding os_state handler: %{public}s
Processing os_state handler: %{public}s
Error serializing state data for "%{public}s": %{public}@
Error serializing state data for "%{public}s": data size greater than UINT32_MAX
accountID is nil or empty in receivedZoneNotFound: %{public}@ %{public}@, accountID: %{public}@
Zone not found %{public}@ %{public}@
Shared zone not found %{public}@ %{public}@
Not generating PersonIDSalt because the sync reason wasn't initiated by the user {reason: %@}
Cannot generate PersonIDSalt because there's no primary CK account, shouldn't even call this function
SYNC[FULL] START {reason: %{public}@}
os_transaction INIT {name: %{public}@}
os_transaction RELEASE {name: %{public}@}
SYNC[FULL] FAIL - store controller syncing disabled
SYNC[FULL] FAIL - no CloudKit account
SYNC[FULL] FAIL - not ready {readinessDescription: %{public}@}
SYNC[FULL] FAIL - no network connection
cloudkit.full
SYNC[FULL] CONTINUE - Trying to sync with fetching disabled, so only pushing. {isFetchingEnabled: %d, discretionary: %d, cloudDirtyToken: %{public}@}
SYNC[FULL] FAIL {error: %{public}@}
SYNC[FULL] {duration: %.4f}
SYNC[FULL] CONTINUE - Performing full sync {syncReason: %{public}@, discretionary: %d, cloudDirtyToken: %{public}@}
Bypassing babysitter against SYNC[FULL], which failed too many times, because sync was user initiated {syncReason: %{public}@, waiterID: %{public}@}
Babysitting SYNC[FULL] because it failed too many times {syncReason: %{public}@, waiterID: %{public}@}
SYNC[FULL] FAIL {error: %{public}@, syncReason: %{public}@}
SYNC[FULL] END {duration: %.4f, syncReason: %{public}@}
SYNC[FULL] - PersonIDSalt generated for primary CK account.
SYNC[FULL] CONTINUE - List of accountIDs that need to perform CloudSchemaCatchUpSync: {%{public}@}
_syncWithReason: Error fetching database changes during full sync {fetchDatabaseChangesError: %{public}@}
_syncWithReason: Fetched database changes for full sync
_syncWithReason: Error fetching record zone changes during full sync {fetchRecordZoneChangesError: %{public}@}
_syncWithReason: Fetched record zone changes for full sync
_syncWithReason: Error while processing for full sync {processingErrors.first: %{public}@}
_syncWithReason: Processed everything for full sync
cancelEverything: Performing cleanup in ICCC.
Timed out when cancelling the cloud operations. Performing cleanup anyway.
Zone IDs that need to resume fetching: fetching=%{public}@; needingFetch=%{public}@
Deleting record zones (markZonesAsUserPurged=%d) in account ID %{public}@: %{public}@
Trying to deleteRecordZonesWithZoneIDs with empty accountID.
Error deleting zones in account ID %{public}@: {operationError: %{public}@}
Deleted record zones in account ID %{public}@: {deletedRecordZoneIDs: %{public}@}
Finishing operations for record ID %{public}@
All operations finished for record ID %{public}@
Waiting on operation %{public}@ for record ID %{public}@
Updating CloudKit account status
Updating CloudKit account status for account: %{public}@
Error updating account status for account: %{public}@, %@
CloudKit account status changed to %{public}@ for account: %{public}@
No change in CloudKit status %{public}@ for account: %{public}@
Remove stale account status for accountIDs: %{public}@
Remove stale database scope string needing retry fetch changes for accountIDs: %{public}@
Fetching user record in cloud context {operation: %{public}@}
Fetched user record in cloud context {userRecord: %{private}@}
Per-record error fetching user record {userRecordError: %{public}@}
Fetch user record operation completed: %{public}@
Error fetching user record: %{public}@
Trying to fetchUserRecordWithAccountID with empty accountID.
updateUserRecordWithAccountID: accountID is nil or empty
Error fetching user record ID: %{public}@, error: %@
rem_log_fault_if(recordID == nil) -- Trying to fetch a cloud object {recordType: %{public}@, accountID: %{public}@} without a record ID
rem_log_fault_if(accountID == nil) -- Trying to fetch a cloud object {recordType: %{public}@, recordID: %{public}@} without an account ID
Adding operations to fetch %ld records
Account ID is required to create fetch record operations.
No record IDs to fetch, no fetch record operation is created for accountID: %{public}@
Fetching records with operation group %{public}@
Grouping fetch requests for %d %{public}@ records into %d batches
Creating %{public}@
Will fetch %{public}@ %{public}@
operationToFetchRecordIDs:database operation.perRecordCompletionBlock with nil recordID
Progress fetching %{public}@: %d%% %{public}@
accountID is nil or empty in fetchOperation:fetchRecord: %{public}@, accountID: %{public}@
Tried to fetch record that doesn't exist in account ID %{public}@: %{public}@ %{public}@
Failed to fetch in account ID %{public}@: %{public}@ %{public}@: %{public}@
Fetched in account ID %{public}@: %@ %{public}@
Error fetching {operation: %{public}@, error: %{public}@}
Finished {operatin: %{public}@}
didFetchShare: Cannot get CK account {ckIdentifier: %{public}@} for {record: %{public}@, nil rootRecordType}
No root record type in share %@ for %{public}@, default shareUserRecordName %@
No root record type in share %@ for %{public}@, shareCreatorRecordName %@
didFetchShare: Cannot get CK account {ckIdentifier: %{public}@} for newPlaceholderObjectForRecordID {record: %{public}@, rootRecordType: %{public}@}
Received share %{public}@ for %{public}@ %{public}@
Received share for unknown object: %{public}@
Received a share with no root record ID: %{public}@
Error deleting shares for objects in account ID %{public}@
Will Delete Shares in account ID %{public}@ for %lu Objects:
Will delete share in account ID %{public}@ for %@
SYNC[SyncAfterDeleteShare] START}
SYNC[SyncAfterDeleteShare] END
Creating modify operations: Account ID is required to create operations.
No cloud objects to save or delete or delelet-share, no modify record operation is created for accountID: %{public}@
Creating operations to push %ld records for account ID %{public}@
Creating operations to delete %ld records for account ID %{public}@
Creating operations to delete %ld share records for account ID %{public}@
Record to delete share from doesn't have a server share %{public}@ for accountID %{public}@
No root record ID when trying to delete share for %{public}@ for account ID %{public}@
Record size (%lu bytes) exceeds CloudKit limit for record: %{public}@
Grouping modify operations into %ld batches
Modifying records with operation group %{public}@
Batching with recordsToSave:%@ recordsToDelete:%@, maxRecordCountPerBatch:%lu, maxRecordSizePerBatch:%lu
Ending batch because an impossible batch was detected ICCloudContext. Alarm: %{public}@ AlarmTrigger: %{public}@
Adding Alarm/AlarmTrigger pair to batch: %@ %@
Ending batch because Alarm/AlarmTrigger pair does not fit isCountOK: %d Alarm: %@ AlarmTrigger: %@
Ending batch because an impossible batch was detected ICCloudContext: %{public}@
Adding record to save batch: %@
Ending batch because record does not fit: %@
Adding record to delete batch: %@
Ending batch because we're out of records
Ending batch because we've reached maxRecordCountPerBatch
Finished batch with batchRecordsToSave:%@ batchRecordIDsToDelete:%@
About to create modify operation for database: %{public}@
Creating modify operation %{public}@
Will push %@ %{public}@
Will delete %{public}@ %{public}@
Progress pushing %@: %d%%
accountID is nil or empty in modifyRecordsOperation:perSaveRecordCompletion %{public}@, accountID: %{public}@
Pushed account ID %{public}@: %@ %{public}@
accountID is nil or empty in modifyRecordsOperation:recordWasDeletedWithRecordID %{public}@, accountID: %{public}@
Record was deleted but the cloud object no longer exists in our database for modifyRecordsOperation:recordWasDeletedWithRecordID:... {accountID: %{public}@, prefetchRecordID: %{public}@, opeartion: %{public}@}
Deleted share in account ID %{public}@: %{public}@ %{public}@
Deleted record in account ID %{public}@: %{public}@ %{public}@
Actually deleting object in account ID %{public}@: %{public}@ with supportsDeletionByTTL = false from local DB upon completion of CKModifyRecordsOperation.
Unknown item deleting share in account ID %{public}@: %{public}@ for %@ %{public}@
Zone not found deleting share in account ID %{public}@: %{public}@ for %@ %{public}@
Error deleting share in account ID %{public}@: %{public}@ for %@ %{public}@: %{public}@
No record on server to delete in account ID %{public}@: %{public}@ %{public}@
Reference violation in account ID %{public}@: for %{public}@ %{public}@
Batch request failed in account ID %{public}@: for deleting %{public}@ %{public}@
Error deleting record in account ID %{public}@: %{public}@ %{public}@: %{public}@
Error modifying records, canceling dependent operations: %{public}@
Partial error for modify operation %{public}@: %{public}@
Error modifying records %{public}@: %{public}@
Finished modify operation %{public}@
accountID is nil or empty in handleGenericPartialFailuresForError %{public}@, accountID: %{public}@
Unexpected item id %{public}@
User exceeded iCloud quota in account ID %{public}@
User deleted zone in account ID %{public}@: %{public}@
Error topologically sorting records: %{public}@
Ignoring this object that doesn't have an account id: %{public}@, %{public}@
No record ID when trying to modify record
Trying to modify two instances of the same object %{public}@
Continue to save context while having custom validation failures for %{public}@
Run exclusively operation start: {%{public}@}
Run exclusively operations end: {%{public}@}
rem_log_fault_if(partialError.code != CKErrorPartialFailure) -- Called -partialFailure:containsError with a non-partialFailure.
Trying to create operationToSaveZonesForZoneIDs with empty accountID.
Will save zone %{public}@ %{public}@
Error saving zones %{public}@: %{public}@
Saved record zones %{public}@
Saved record zone %{public}@ %{public}@
contextDidSave excludes author: %{public}@
Enqueued %ld object IDs because of coredata changes
contextDidSave processingSelectorDelayer.requestFire for author: %{public}@
Coalescing ICNSBlockOperation name=%{public}@
Processing objects with operation %{public}p
Adding process objects operation %{public}p. allDirtyObjects=%d
Process operation %{public}p waiting on %ld other operations
Running process all dirty objects operation.
SYNC[COREDATA] START {operationName: %{public}@, syncReason: %{public}@}
os_transaction INIT {name: com.apple.remindd.cloudkit.sync.coredata}
os_transaction RELEASE {name: com.apple.remindd.cloudkit.sync.coredata}
SYNC[COREDATA] ERROR - no CloudKit account
SYNC[COREDATA] ERROR - is pendingAccountInitializerCompleteOnLaunch {idsToProc.count: %d, idsToRetry.count: %d, readinessDescription: %{public}@}
SYNC[COREDATA] ERROR - not ready {readinessDescription: %{public}@}
SYNC[COREDATA] ERROR - network isn't reachable
SYNC[COREDATA] ERROR - upload is suspended
SYNC[COREDATA] FAIL
cloudkit.coredata
Bypassing babysitter against processPendingCloudObjects, which failed too many times, because sync was user initiated {operationName: %{public}@, syncReason: %{public}@, waiterID: %{public}@}
Babysitting processPendingCloudObjects because it failed too many times {operationName: %{public}@, syncReason: %{public}@, waiterID: %{public}@}
accountID is nil or empty in processPendingCloudObjectsWithOperationName:syncReason:completionHandler: operationName: %{public}@, syncReason: %{public}@, accountID: %{public}@
SYNC[COREDATA] END(DEFERRED due to MERGE.LOCAL needs to happen before we can processObjectIDs) {operationName: %{public}@, syncReason: %{public}@, duration: %.4f, numIDsToProcessAddingToRetry: %ld, pendingAccountIdentifiers: %{public}@}
SYNC[COREDATA] CONTINUE {operationName: %{public}@, syncReason: %{public}@, objectIDsToProcess.count: %ld, retryIDsCount: %ld}
SYNC[COREDATA] FAIL {duration: %.4f, errors.first: %{public}@, errors.count: %ld}
SYNC[COREDATA] END {operationName: %{public}@, syncReason: %{public}@, duration: %.4f}
MERGE.LOCAL: Trying to call addOperationToMergeLocalObjectsWithCompletionHandler: when system has not passed buddy or system-migrator {hasPassedBuddy: %d, isSystemAvailableForSyncing: %d}
MERGE.LOCAL: (MergeLocalObjectsContext) Could not find CK account matching {accountIdentifier: %{public}@}
MERGE.LOCAL: (MergeLocalObjectsContext) Account needs to merge local objects {accountIdentifier: %{public}@}
MERGE.LOCAL: (MergeLocalObjectsContext) Account does not need to merge local objects {accountIdentifier: %{public}@, isInactive: %d}
MERGE.LOCAL: (MergeLocalObjectsContext) Account is not ready to merge local objects {mergeContext: %{public}@}
MERGE.LOCAL: (MergeLocalObjectsContext) Populated merge contexts {elapsed: %.4f s, accountIdentifiers: %{public}@}
MERGE.LOCAL: No need to merge local objects or no objectIDsInCloud (someAccountsNeedToMergeLocalObjects: %d)
MERGE.LOCAL: This account cannot merge local objects at this time, will schedule retry if needed (mergeContext: %{public}@)
MERGE.LOCAL: Scheduling retry, if we are within limit (currentRetryCount: %d).
MERGE.LOCAL: Maximum retry count reached for Merge.Local, aborting
MERGE.LOCAL: Maximum retry count previously reached, aborting {lastMaxRetry: {date: %@, build: %@}, currentBuild: %@}
MERGE.LOCAL[COREDATA] START
os_transaction INIT {name: com.apple.remindd.cloudkit.merge.local.coredata}
os_transaction RELEASE {name: com.apple.remindd.cloudkit.merge.local.coredata}
MERGE.LOCAL[COREDATA] CONTINUE {keys.count: %ld}
MERGE.LOCAL: Here's the objectIDs to fetch and process (accountID: %{public}@, eligibleObjectIDs: %{public}@).
MERGE.LOCAL[COREDATA] Account not found with accountID %{public}@
MERGE.LOCAL[COREDATA] MERGE SAVE FAILED! for accountID %{public}@
MERGE.LOCAL[COREDATA] MERGE LOCAL SAVED for accountID %{public}@.
MERGE.LOCAL[COREDATA] END {duration: %.4f}
MERGE.LOCAL: Unsetting .daWasMigrated (accountIdentifier=%{public}@, flagSaved=1)
MERGE.LOCAL: ...found an existingLocalObjectToMerge (objectMID=%{public}@, localObjectMID=%{public}@)
MERGE.LOCAL: ...mergeWithLocalObject (didMerge=%{public}@)
MERGE.LOCAL: ...no matching existingLocalObjectToMerge (objectMID=%{public}@)
MERGE.LOCAL: final step to clean up account and lists, then save... (accountIdentifier=%{public}@)
MERGE.LOCAL: Collected error upon merge local objects completion: {error: %{public}@}.
Retrying to process %d cloud objects
Processing %lu cloud objects, now going to fetch from CD and submit items to operation queue
_processFetchedCloudObjectsWithObjectIDs with nil store for managedObjectID %{public}@
_processFetchedCloudObjectsWithObjectIDs with nil or empty storeID for managedObjectID %{public}@
_processFetchedCloudObjectsWithObjectIDs with nil or empty accountID for managedObjectID %{public}@, storeID %{public}@, accountID: %{public}@
fetched REMCKCloudState with cloudObject.accountID is nil or empty: %{public}@, cloudState: %{public}@, cloudObject: %@
Processing %lu cloud objects for accountID %{public}@
Cannot fault-in object while processing cloudObjectIDs {error: %{public}@, cloudObjectID: %{public}@}
Found non-REMCDObject to process. Skipping {objectID: %{public}@}
BOGUS: Unrecognized subclass of REMCDObject but shouldSyncToCloud=YES. Not saving this object to the cloud {class: %{public}@, objectID: %{public}@}
This REMCDObject subclass has shouldSyncToCloud=NO. Not saving this object to the cloud {class: %{public}@}
Not syncing object because it's missing mandatory fields: %@
_processCloudObjects adding fetch&/modify cloud objects operation to operation queue: %{public}@
SYNC[APS] ERROR - Disabled or not ready {readinessDescription: %{public}@}
SYNC[APS] CONTINUE {notification.class: %{public}@, subscriptionID: %{public}@}
SYNC[APS] CONTINUE - Cannot handle this CKDatabaseNotification because subscriptionOwnerUserRecordID is nil or empty, skipping {databaseNotification: %{public}@, subscriptionOwnerUserRecordID: %{public}@}
SYNC[APS] CONTINUE - Received CloudKit database notification {debounceableDatabaseNotification: %{public}@, notificationID: %{public}@}
SYNC[APS] CONTINUE - coalesced databaseNotificationSet.count: %lu
SYNC[APS] SKIP - Notification debounced and coalesced {notificationID: %{public}@}
SYNC[APS] FAULT - Received database notificiation (%{public}@), but expected %{public}@
SYNC[APS] NOOP - Not handling CloudKit database notification %{public}@
SYNC[APS] CONTINUE - Fired from APS debouncer to execute CKDatabaseNotification handler {databaseNotification: %{public}@}
SYNC[APS] CONTINUE - Found a container with subscription owner user recordID for the CKDatabaseNotification {scope: %{public}@, userRecordName: %{public}@}
rem_log_fault_if(database == nil) -- SYNC[APS] CONTINUE - [container databaseWithDatabaseScope:databaseScope] is nil unexpectedly, bailing out APS sync
Unexpected nil accountID calling into _handleDatabaseNotification:database:accountID:completionHandler:
...SYNC[APS] Handling CloudKit database notification, with potential debounced scopes from other notifications {databaseNotification: %{public}@, accountID: %{public}@, catchUpSync: %d}
...SYNC[APS] ERROR fetching database changes during aps notification sync {error: %{public}@}
...SYNC[APS] Fetched database changes for aps notification sync
...SYNC[APS] ERROR fetching record zone changes during aps notification sync {error: %{public}@}
...SYNC[APS] Fetched record zone changes for aps notification zone
...SYNC[APS] ERROR processing for aps notification sync {processingErrors.first: %{public}@}
...SYNC[APS] Handled CloudKit database notification {databaseNotification: %{public}@}
Filtering out account ID %{public}@ from needing fetch changes since there is no corresponding container.
%{public}@
accountID is nil or empty in fetchRecordZoneChangesForAccountZoneIDs %{public}@, accountID: %{public}@
Waiting for previous fetch zone changes operation to finish %{public}@
fetch record zone changes operation waiting for previous fetch zone changes operation to finish %{public}@
Not adding operation to queue. isFinished=%d isExecuting=%d isCancelled=%d %{public}@
Trying to populate operationsToFetchRecordZoneChangesForZoneIDs with nil or empty accountID.
Account shouldPerformCloudSchemaCatchUpSync. Will set CKFetchRecordZoneChangesConfiguration.previousServerChangeToken = nil {accountID: %{public}@, zoneIDs: %@}
Filtered the current users zone from being fetched from the shared db.
Filtered the current users RemindersMigration zone from being fetched from the private db.
Fetching record zone changes with operation group %{public}@
Will set CKFetchRecordZoneChangesConfiguration.previousServerChangeToken = nil {databaseScope: %@, zoneIDs: %@}
operationToFetchRecordZoneChangesForZoneIDs with nil or empty accountID.
Not trying to sync the default record zone in account ID %{public}@.
operationToFetchRecordZoneChangesForZoneIDs existingOperation %{public}@ with nil or empty accountID.
Found existing operation with superset zone configuration in account ID %{public}@: %{public}@
isZoneConfigurations: existingConfiguration %{public}@ with nil previousServerChangeToken
accountID is nil or empty in newOperationToFetchRecordZoneChangesWithZoneConfigurations %{public}@, accountID: %{public}@
Fetch changes operation %{public}@ with %{public}@ took %f s
Creating fetch changes operation in account ID %{public}@: %{public}@
accountID is nil or empty in fetchRecordZoneChangesOperation %{public}@, accountID: %{public}@
Fetched changes for record zone %{public}@ %{public}@ in account ID %{public}@
Server change token expired for zone %{public}@ %{public}@ in account ID %{public}@
User deleted zone %{public}@ %{public}@ in account ID %{public}@
Non-fatal error fetching zone changes for zone %{public}@ %{public}@ in account ID %{public}@: %{public}@
Error fetching zone changes %{public}@ %{public}@ in account ID %{public}@: %{public}@
accountID is nil or empty in fetchRecordZoneChangesOperationDidComplete %{public}@, accountID: %{public}@
Fetched zone changes in account ID %{public}@: %{public}@
Fetch changes operation had partial failure in account ID %{public}@: %{public}@
Non-fatal error fetching zone changes in account ID %{public}@: %{public}@: %{public}@
Error fetching zone changes in account ID %{public}@: %{public}@: %{public}@
[fetchRecordZoneChangesOperation:recordWasChangedWithRecordID:record:error:context:] accountID is nil or empty %{public}@, accountID: %{public}@
[fetchRecordZoneChangesOperation:recordWasChangedWithRecordID:record:error:context:] Error fetching record for account ID %{public}@: %{public}@ %@ %{public}@
[fetchRecordZoneChangesOperation:recordWasChangedWithRecordID:record:error:context:] Fetching record with nil record for account ID %{public}@: %{public}@ %{public}@
[fetchRecordZoneChangesOperation:recordWasChangedWithRecordID:record:error:context:] Record changed {accountID: %{public}@, record: %@, operation: %{public}@}
[fetchRecordZoneChangesOperation:recordWasChangedWithRecordID:record:error:context:] No account after record changed {accountID: %{public}@, operation: %{public}@}
accountID is nil or empty in fetchRecordZoneChangesOperation:recordWasDeletedWithRecordID: %{public}@, accountID: %{public}@
Share was deleted in accountID %{public}@: %{public}@ %{public}@
Record was deleted in accountID %{public}@: %{public}@ %{public}@
Record was deleted but the cloud object no longer exists in our database for fetchRecordZoneChangesOperation:recordWasDeletedWithRecordID:... {accountID: %{public}@, prefetchRecordID: %{public}@, opeartion: %{public}@}
Zone change token updated %{public}@ %{public}@ %{public}@
Sorted children objects after fetching RecordZoneChanges {sortedRecordIDs: %{public}@}
rem_log_fault_if(ckRecordIDs.count > 0) -- Some record IDs marked as needing to sort children are left not sorted {ckRecordIDs: %{public}@}
ICCloudContext Polling Timer Fired
Polling timer fired
Adding private and shared cloud databases for account: %{public}@
Fetching database changes with operation group %{public}@
accountID is nil or empty in operationToFetchDatabaseChangesForDatabase %{public}@, accountID: %{public}@
Account shouldPerformCloudSchemaCatchUpSync. Will create CKFetchDatabaseChangesOperation with nil previousServerChangeToken {accountID: %{public}@, databaseScope: %@}
Creating fetch database changes operation for account %{public}@, %{public}@
Database changes operation %{public}@ will wait for %{public}@
Zone changed for account %{public}@, %{public}@ %{public}@
Shared zone was deleted for account ID %{public}@: %{public}@
Deleting shared %@ for zoneID %{public}@, accountID %{public}@
Not deleting shared %@ in wrong zone %{public}@ for zone ID %{public}@, accountID %{public}@
Zone was deleted for account %{public}@, %{public}@ %{public}@
Callback for operation in shared database says private zone was deleted %{public}@: %{public}@
Database change token updated for account %{public}@, %{public}@ %{public}@
accountID is nil in fetchDatabaseChangesOperation:finishedWithServerChangeToken:accountID:error:completionHandler: %{public}@ %{public}@
Fetched database changes for account %{public}@, %{public}@
Database changes server change token expired for account %{public}@, %{public}@
Operation to fetch database changes was cancelled for account %{public}@, %{public}@
Operation to fetch database changes failed with no network connection for account %{public}@, %{public}@
Error fetching database changes for account %{public}@, %{public}@: %@
%@: Maximum retry count reached, aborting (maxRetryCount: %lu)
Error fetching database changes, canceling dependent operations: %{public}@
Loaded zone fetch state: zonesNeedingFetchChanges=%{public}@
Saving zone fetch state: zonesNeedingFetchChanges=%@
Clearing zone fetch state
Updating subscriptions
updateSubscriptions: Trying to get ACAccount appleAccountUtilities when system has not passed buddy or system-migrator {hasPassedBuddy: %d, isSystemAvailableForSyncing: %d}
accountID is nil or empty in updateSubscriptionsWithCompletionHandler: database %{public}@, accountID: %{public}@
Not fetching subscriptions for %{public}@, already subscribed to %{public}@
Not sure if subscribed to %{public}@
Fetching subscriptions %{public}@
Fetched subscription %{public}@ %{public}@
accountID is nil or empty in fetchSubscriptionsForDatabase: %{public}@, accountID: %{public}@
Error fetching subscriptions %{public}@: %{public}@
Fetched subscriptions %{public}@
accountID is nil or empty in saveSubscriptionsForDatabase: %{public}@, accountID: %{public}@
Not saving subscriptions for %{public}@, already subscribed to %{public}@
Saving subscription %{public}@ %{public}@
Error saving subscriptions %{public}@: %{public}@
Saved subscriptions %{public}@
Saved subscription %{public}@ %{public}@
accountID is nil or empty in saveSubscriptionsForDatabase modifySubscriptionsCompletionBlock %{public}@, accountID: %{public}@
Loaded subscribed subscription IDs last updated time from user defaults {timestamp: %{public}@, date: %{public}@, validityPeriod: %{public}@}
Loaded subscribed subscription IDs from user defaults: %@
Persisting subscribed subscription ID to user defaults {subscriptionID: %{public}@}
Clearing subscribed subscription IDs
os_transaction INIT {name: com.apple.remindd.cloudkit.updateCloudContextState}
rem_log_fault_if(syncReason == nil) -- No sync reason passed to updateCloudContextStateWithSyncOption
Not updating cloud context state because it's disabled {%{public}@}
Updating cloud context state. %{public}@ and internet %{public}@. {syncReason: %{public}@, option: %{public}@}
Bypassing babysitter against updateCloudContextState, which failed too many times, because sync was user initiated {syncReason: %{public}@, waiterID: %{public}@}
Babysitting updateCloudContextState because it failed too many times {syncReason: %{public}@, waiterID: %{public}@}
os_transaction RELEASE {name: com.apple.remindd.cloudkit.updateCloudContextState}
No longer in foreground after updating cloud context state
No longer reachable after updating cloud context state
Not ready to sync after updating cloud context state: %{public}@
Syncing enabled after updating account status
WARNING: LOOKATME: UpdateCloudContextState: CK account is inactive but didChooseToMigrate=YES && didFinishMigration=NO, try FetchUserRecord again... {accountID: %{public}@}
UpdateCloudContextState: UpdateCloudContextStateSyncOptionForced, shouldSync = %d
UpdateCloudContextState: Triggering a sync {syncReason: %{public}@, syncOption: %{public}@}
UpdateCloudContextState: Sync completed {syncReason: %{public}@, error: %@}
UpdateCloudContextState: Going to fetch user record with accountIdentifier: %{public}@ before sync {syncReason: %{public}@}
UpdateCloudContextState: Error fetching user record with accountIdentifier: %{public}@: %{public}@
UpdateCloudContextState: Fetched user record with accountIdentifier: %{public}@: %{private}@
error fetching all long lived operation IDs: %{public}@, accountID: %{public}@
error fetching long lived operation, ID: %{public}@ error: %{public}@ accountID: %{public}@
Not adding long-lived operation because it's finished: %{public}@, accountID: %{public}@
Not adding long-lived operation because it's cancelled: %{public}@, accountID: %{public}@
Adding long-lived operation back to the queue: %{public}@, accountID: %{public}@
Marking cloud as dirty {newToken: %{public}@}
Clearing cloud dirty {currentToken: %{public}@, cloudDirtyToken: %{public}@}
NOT clearing cloud dirty {currentToken: %{public}@, cloudDirtyToken: %{public}@}
Incrementing retry count for %{public}@ from %d to %d
Clearing retry count for %{public}@
ICCC: Not retrying because we have no internet connection
ICCC: Not retrying because we're not ready: %{public}@
ICCC: Starting a retry timer if necessary for error: %{public}@
Using backoff time for retry (%.0fs)
Retrying operations after %ds
CloudKit Retry
Retry timer fired, but we have no internet connection
Retry timer fired, but we're not ready to sync: %{public}@
Retrying operations
Retrying to update subscriptions
Retrying to save record zones
Retrying CKFetchDatabaseChangesOperation databaseScopes: %{public}@
CKFetchDatabaseChangesOperation: Error occured when retrying to sync {error: %@}
CKFetchDatabaseChangesOperation: Retry sync completed.
Retrying to fetch record zone changes
Retrying to process changes
CloudSchemaCatchUpSync: Retrying catch up sync for accounts: %{public}@
CloudSchemaCatchUpSync: Error occured when retrying to catch-up sync {error: %@}
CloudSchemaCatchUpSync: Retry catch-up sync completed.
MERGE.LOCAL: Retrying to merge local objects
MERGE.LOCAL: Error occured when retrying to merge local objects {error: %@}
MERGE.LOCAL: Retry merging local objects completed.
Retry calling UpdateCloudContext after accountsDidChange and RDAccountInitializer completed works.
Saving server change token for %{public}@ %{public}@: %{public}@
accountID is nil in saveServerChangeToken:forRecordZoneID:databaseScope:accountID: %{public}@ %{public}@
saveServerChangeToken: The cloudKitAccount is nil for accountID %{public}@
Trying to save server change token without an account {accounts: [%@], primaryACAccount: %@, acAccounts: [%@], isReadyToSync: %d}
accountID is nil in serverChangeTokenForRecordZoneID:databaseScope:accountID: %{public}@ %{public}@
Couldn't find account to obtain server change token with account ID: %@
Deleting server change token for %{public}@ %{public}@
accountID is nil in deleteServerChangeTokenForRecordZoneID:databaseScope:accountID: %{public}@ %{public}@
Couldn't find account to obtain server change token with account ID: %{public}@
Deleting all server change tokens
Deleting all server data
deleteAllApplicationDataFromServerWithAccountID: accountID is nil or empty
Failed to fetch user record in account: %{public}@ for updating
Failed to update user record for resetting migration state {error: %{public}@}
Successfully cleaned user record
Primary CK account may have just been disabled, force run observePrimaryCloudKitAccountPersonIDSaltChanges to invoke the 'errorHandler' to unset personIDs in non-primary CK accounts
rem_log_fault_if(self.accountPersonIDSaltObserver != nil) -- accountPersonIDSaltObserver should not be created from -_accountsDidEnableOrDisable if the primary CK account is absent or inactive
ICCC received accountsDidDisable from RDStoreController.
ICCC: Stopping all CloudKit operations after deleting CloudKit account
ICCC received accountsDidEnable from RDStoreController.
os_transaction INIT {name: com.apple.remindd.cloudkit.accountsDidEnable.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver}
ICCC: Received RDAccountInitializer.DidCompleteInitializeAllAccountsNotification after accountsDidEnable.
os_transaction RELEASE {name: com.apple.remindd.cloudkit.accountsDidChange.pending.RDAccountInitializerDidCompleteInitializeAllAccountsObserver}
ICCC: Observing DidCompleteInitializeAllAccountsNotification on accountsDidEnable.
ICCC: RDAccountInitializer failed, so we won't UpdateCloudContext after accountsDidChange: {error: %{public}@}
ICCC: Calling -didCompleteInitializeAllAccounts:
ICCC still disabled after accountsDidChange and DidCompleteInitializeAllAccountsNotification, will retry UpdateCloudContext in a few seconds... {%{public}@}
ICCC: Now call UpdateCloudContext after accountsDidChange and RDAccountInitializer completed works.
Cloud context received application will enter foreground notification
Push connection established with iCloud
Failed to get push token: %{public}@
SYNC[APS]
SYNC[APS] START {topic: %{public}@}
os_transaction INIT {name: com.apple.remindd.cloudkit.sync.aps}
os_transaction RELEASE {name: com.apple.remindd.cloudkit.sync.aps}
SYNC[APS] FAIL - unexpected aps topic {topic: %{public}@}
SYNC[APS] FAIL - CKNotification failed to parse APS message {apsTopic: %{public}@}
cloudkit.aps
Babysitting APS's didReceiveIncomingMessage because it failed too many times {waiterID: %{public}@}
SYNC[APS] PUSH FAIL {error: %{public}@}
SYNC[APS] END {duration: %.4f}
Force-setting migration state {didChooseToMigrate: %d, didFinishMigration: %d, createZoneIfFinishMigration: %d, accountID = %{public}@
Force-setting migration state: cannot get display account for force-setting migration state
Force-setting migration state: display account: %{public}@
Force-setting migration state: set %{public}@ zone for accountID: %{public}@
Completed save record zone Reminders for force-setting migration state
Force-setting migration state: Reminders zone creation failed with error: %@
Timeout creating zone record for force-setting migration state
Fetched user record for force-setting migration state in accountID: %{public}@, {record: %@}
Force-setting migration state: create an account record for force-setting migration with id: %{public}@
Fetched account record for force-setting migration state {record: %@}
Timeout fetching user / account record for force-setting migration state
Completed modify records operation for force-setting migration state
Failed to modify records operation for force-setting migration state {error: %{public}@}
Suspend upload
Resume upload
Checking if we should adjust APS debouncer interval according to migration state of {account: %{public}@, didChooseToMigrate: %d, didFinishMigration: %d}
Setting APS debouncer interval to %f
CloudSchemaCatchUpSync: Account needs to perform cloud schema catch up sync {accountID: %{public}@, persistenceCloudSchemaVersion: %lld, runtimeCloudSchemaVersion: %lld}
CloudSchemaCatchUpSync: Account needs to schedule a cloud schema catch up sync {accountID: %{public}@, runtimeCloudSchemaVersion: %lld}
CloudSchemaCatchUpSync: No ICCloudSchemaCatchUpSyncController given to the ICCloudContext, cannot schedule cloud schema catch up sync with system {accountID: %{public}@, runtimeCloudSchemaVersion: %lld}
CloudSchemaCatchUpSync: Account does not need a cloud schema catch up sync {accountID: %{public}@, runtimeCloudSchemaVersion: %lld}
...SYNC[%{public}@] CloudSchemaCatchUpSync: completed successfully, persistenceCloudSchemaVersion bumped {accountIdentifier: %{public}@, didUpdate: %d, buildVersion: %{public}@, debugLabel: %{public}@}
...SYNC[%{public}@] CloudSchemaCatchUpSync: completed with error but max retry reached, persistenceCloudSchemaVersion bumped {error: %{public}@, buildVersion: %{public}@, debugLabel: %{public}@}
...SYNC[%{public}@] CloudSchemaCatchUpSync: completed with error, persistenceCloudSchemaVersion not bumped yet, will retry later {error: %{public}@, buildVersion: %{public}@, debugLabel: %{public}@}
CloudSchemaCatchUpSync: Maximum retry count reached, aborting (maxRetryCount: %lu)
CloudSchemaCatchUpSync completed with error, will retry later (currentRetryCount: %d)
MergeLocalObjectsContext.validate:(MERGE.LOCAL) Account does not need to merge local objects {accountIdentifier: %{public}@}
MergeLocalObjectsContext.validate:(MERGE.LOCAL) This CK account has never attempted migration, how come? {accountIdentifier: %{public}@}
MergeLocalObjectsContext.validate:(MERGE.LOCAL) Gathering all cloud objectIDs that should run attempt merging local objects {accountIdentifier: %{public}@}
rem_log_fault_if(managedObjectContext.affectedStores.count != 1) -- MergeLocalObjectsContext: Must set affectedStores on the MoC used to validate with the given cdAccount
rem_log_fault_if(![managedObjectContext.affectedStores.firstObject.identifier isEqual:cdAccount.objectID.persistentStore.identifier]) -- MergeLocalObjectsContext: The MoC has a different affectedStores set than the given cdAccount's store
rem_log_fault_if(![NSStringFromClass([REMCDAlarmTrigger class]) isEqualToString:NSStringFromClass(self)]) -- A subclass of REMCDAlarmTrigger called '- [REMCDAlarmTrigger cdEntityName]'. The subclass should override this method. {callstack: %@}
Should not unset the tombstone field .reminderIdentifier of an REMCDHashtag {cdHashtag: %{public}@}
[%{public}@] checkResourceIsReachableAndReturnError returned false {attachmentID: %{public}@, accountID: %{public}@, error: %@}
Error purging account file directory for {accountID: %{public}@, code: %ld, error: %@, url: %{public}@}
Purged account file directory and its content for {accountID: %{public}@, url: %{public}@}
[%{public}@] checkResourceIsReachableAndReturnError returned false {accountID: %{public}@, error: %@}
Error purging attachment directory for {attachmentID: %{public}@, accountID: %{public}@, code: %ld, error: %@, url: %{public}@}
Purged attachment directory and its content for {attachmentID: %{public}@, accountID: %{public}@, url: %{public}@}
[%{public}@] checkResourceIsReachableAndReturnError failed {attachmentID: %{public}@, accountID: %{public}@, error: %@}
Error purging hashed attachment file for {fileName: %{public}@, accountID: %{public}@, code: %ld, error: %@, url: %{public}@}
Purged hashed attachment file for {fileName: %{public}@, accountID: %{public}@, url: %{public}@}
[%{public}@] Can't get files with {accountID: %{public}@, error: %@}
[%{public}@] Can't get file URL resource with {accountID: %{public}@, fileURL: %@, error: %@}
[%{public}@] Found attachment directory {attachmentID: %{public}@, accountID: %{public}@}
Configuration has no version
Configuration version (%ld) is not the expected version (%ld)
Checking cached configuration
Using cached remote configuration
Cache directory is unavailable for reading configuration cache
Using default configuration
ICCloudConfiguration: Start downloading configuration from {remoteURL: %{public}@}
Unable to download remote configuration.
ICCloudConfiguration: Received remote configuration
ICCloudConfiguration: Applying remote configuration
ICCloudConfiguration: Updating locally cached configuration {cacheURL: %{public}@}
Not able to write remote configuration to cache. {writeError: %{public}@}
Cache directory is unavailable for writing configuration cache
Error serializing plist data to dictionary: %@
Connected to remote configuration plist server but got back non 200 response: %{public}@
Error downloading remote configuration plist: %{public}@
Loading cloud configuration {configurationURL: %{public}@}
Failed to load cloud configuration dictionary {configurationURL: %{public}@}
Trying to create a cloud configuration with no minimum client version
Trying to create a cloud configuration with no throttling levels
Trying to create a cloud configuration with no max inline asset size
Trying to create a cloud configuration with no max attachments per note
Trying to create a cloud configuration with no max sub attachments per attachment
Trying to create a cloud configuration with no max attachment size
Validation Failure: Tried to move reminders accross lists in an unsupported account {fromList.identifier: %{public}@, toList.identifier: %{public}@, account.identifier: %{public}@}
Validation Failure: Tried to move reminders accross shared lists in an unsupported account {fromList.identifier: %{public}@, toList.identifier: %{public}@, account.identifier: %{public}@}
Validation Failure: Tried to create nested subtasks {list.identifier: %{public}@, parentReminder.identifier: %{public}@, reminder.identifier: %{public}@}
Validation Failure: Tried to set a subtask on a different list to its parent reminder {parentList.identifier: %{public}@, list.identifier: %{public}@, parentReminder.identifier: %{public}@, reminder.identifier: %{public}@}
Validation Failure: Subtasks are left on a different list to its parent reminder {subtask.list.identifier: %{public}@, list.identifier: %{public}@, subtask.identifier: %{public}@, reminder.identifier: %{public}@}
Validation Update: Moving reminder to another list nullifies assignee in its assignments {assignment.identifier: %{public}@, reminder.identifier: %{public}@, fromList.identifier: %{public}@, toList.identifier: %{public}@, account.identifier: %{public}@}
Validation Update: Moving reminder to another list nullifies origiantor in its assignments {assignment.identifier: %{public}@, reminder.identifier: %{public}@, fromList.identifier: %{public}@, toList.identifier: %{public}@, account.identifier: %{public}@}
Validation Update: Assignee in disallowed status and hence will be nullified {assignment.identifier: %{public}@, reminder.identifier: %{public}@, account.identifier: %{public}@}
Validation Update: Originator in disallowed status and hence will be nullified {assignment.identifier: %{public}@, reminder.identifier: %{public}@, account.identifier: %{public}@}
Validation WARNING: Attempt to move a reminder with assignments to a different list while supportsMoveAcrossSharedLists=NO {reminder.identifier: %{public}@, fromList.identifier: %{public}@, toList.identifier: %{public}@, account.identifier: %{public}@}
rem_log_fault_if(self.willSave_handledUpdateDisplayDate) -- Unexpected case to have deleted alarms after markExtraneousAlarmsForDeletion() but already handled updateDisplayDate {remObjectID: %{public}@}
rem_log_fault_if(![NSStringFromClass([REMCDAuxiliaryReminderChangeInfo class]) isEqualToString:NSStringFromClass(self)]) -- A subclass of REMCDAuxiliaryReminderChangeInfo called '- [REMCDAuxiliaryReminderChangeInfo cdEntityName]'. The subclass should override this method. {callstack: %@}
Failed to create directory %@: %{public}@
File %@ already exists and is not a directory!
rem_log_fault_if(![NSStringFromClass([REMCDRootEntityObject class]) isEqualToString:NSStringFromClass(self)]) -- A subclass of REMCDRootEntityObject called '- [REMCDRootEntityObject cdEntityName]'. The subclass should override this method. {callstack: %@}
Calling -isConnectedToAccountObject: on REMCDSharedToMeReminderPlaceholder is unexpected as this is not a class that should be updated or saved directly from a save request {callstack: %{public}@}
Error creating unarchiver: %@
You are not allowed to lowLevelRemoveFromParent a non-custom smart list from parent
Error creating unarchiver: %{public}@
Trying to get an object from a nil object ID: %{public}@
Unable to find object from objectID: %{public}@
Error finding object from objectID: %{public}@, %{public}@
Error obtaining permanent object ID for objects with error: %{public}@
Error obtaining permanent object ID for %{public}@: %{public}@
ICCloudSchemaCatchUpSyncContext: computing `shouldPerformCloudSchemaCatchUpSync` {isNeeded: YES, supported: %d, debugForceSupported: %d, schedulingState: %ld}
ICCloudSchemaCatchUpSyncContext: Initiated with an invalid scheduling state value (%ld), assume shouldPerformCloudSchemaCatchUpSync=YES
Called isAbstract on REMCDObject. This is an abstract core data model super class. {callstack: %@}
SET %@ <- %@
REMSupportedVersionUpdating: didChangeValueForKey:[%{public}@] calling _markObjectDirtyForSupportedVersionValidation on {remObjectID: %{public}@}
[%{public}@] Model type is not supposed to use or set resolutionTokenMap {objectID: %{public}@}
[%{public}@] Model type does allow setResolutionTokenMap, you are good {objectID: %{public}@}
2022:-[REMCDObject willSave]: Attempting to save a %{public}@ object without an identifier {moid: %{public}@}
Validation Failure: We have a REMCDObject that is not a REMCDAccount and is missing an account relationship {entity: %{public}@, identifier: %{public}@}
validateForInsert_Swift FAILED {error: %{public}@}
Validation Failure: Tried to move lists accross accounts {fromAccount.identifier: %{public}@, toAccount.identifier: %{public}@}
validateForUpdate_Swift FAILED {error: %{public}@}
Validation Failure: %{public}@ {%{public}@, %{public}@, %{public}@} and its parent {%{public}@, %{public}@, %{public}@, %{public}@} have different zones
Mark shared-to-me root %{public}@ for deletion and recursively deleted all child objects from local database
Begin recursiveMarkForDeletion:%{public}@ from %{public}@
Deleting orphan object %{public}@ permanently from local database
Not recursiveMarkForDeletion for %{public}@ because isDelete == self.markedForDeletion
Unexpected nil remObjectID when recursively traversing object tree. {self.objectID = %@, visitedMap = %@}
Unexpected cyclic graph when recursively traversing object tree. {self.remObjectID = %@, visitedMap = %@}
Failed to fetch objects in {relationship: %{public}@} of object {type: %{public}@}
Skipped traverseObjectTreeUsingVisitedMap for {remObjectID: %@, managedObjectID: %@}
Continue recursiveMarkForDeletion:%@ from %@
Stopping recurssion because isDeleted == self.markedForDeletion
Don't know how to handle property %{public}@ of entity %{public}@ to avoid constraint violation before marking for deletion
REMSupportedVersionUpdating: Changing minimumSupportedVersion on %{public}@ is not currently allowed {identifier: %{public}@}
REMSupportedVersionUpdating: setMinimumSupportedVersion {newValue: %{public}@, oldValue: %{public}@, remObjectID: %{public}@}
REMSupportedVersionUpdating: setMinimumSupportedVersion: calling _markObjectDirtyForSupportedVersionValidation on {remObjectID: %{public}@}
REMSupportedVersionUpdating: Setting effectiveMinimumSupportedVersion on %{public}@ is not currently allowed {identifier: %{public}@}
REMSupportedVersionUpdating: Abstract method called for -parentEffectiveMinimumSupportedVersion {class: %{public}@, callstack: %{public}@}
REMSupportedVersionUpdating: Abstract method called for -keyPathsForValuesAffectingEffectiveMinimumSupportedVersion {class: %{public}@, callstack: %{public}@}
REMSupportedVersionUpdating: Not actually adding dirty object to managedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion because this CoreData object is being deleted {ic_loggingIdentifier: %{public}@}
rem_log_fault_if(dirtySet == nil) -- REMSupportedVersionUpdating: Failed to obtain managedObjectIDsHavingDirtyEffectiveMinimumSupportedVersion from storeControllerManagedObjectContext {storeControllerManagedObjectContext: %{public}@}
REMSupportedVersionUpdating: validateEffectiveMinimumSupportedVersion cannot process %{public}@ because it does not currently allow object supported version {identifier: %{public}@}
REMSupportedVersionUpdating: validateEffectiveMinimumSupportedVersion indicates that my descendants should also be validated since my effective version changed {myVersion: %lld, parentEffectiveVersion: %lld, oldValue: %lld, remObjectID: %{public}@}
A subclass of REMCDObject called '- [REMCDObject cdEntityName]'. REMCDObject class does not have a corresponding Core Data entity. The subclass should override this method. {callstack: %@}
Missing requirements to get alarmDateTrigger {accountID: %{public}@, alarmID: %{public}@}
rem_log_fault_if(!entityName) -- Unexpected error: found entity with no name
Error fetching objects from (%ld) object IDs: %{public}@
Error fetching %{public}@ (predicate=%@ sortDescriptors=%{public}@): %{public}@
Nil objects array fetching %{public}@ (predicate=%@ sortDescriptors=%{public}@ context=%{public}@)
ICCSCU: isCloudSchemaCatchUpSyncNeeded? {accountIdentifier: %{public}@, persistence: %lld, runtime: %lld}
ICCSCU: cloudSchemaCatchUpSyncDidComplete: Will update account.persistenceCloudSchemaVersion {accountIdentifier: %{public}@, persistence: %lld, runtime: %lld}
ICCSCU: cloudSchemaCatchUpSyncDidComplete: persistenceCloudSchemaVersion is already >= kRuntimeCloudSchemaVersion, stopping {accountIdentifier: %{public}@, persistence: %lld, runtime: %lld}
ICCSCU: cloudSchemaCatchUpSyncDidComplete: ckAccount.persistenceCloudSchemaVersion updated SUCCESS {accountID: %{public}@}
ICCSCU: cloudSchemaCatchUpSyncDidComplete: Update ckAccount.persistenceCloudSchemaVersion FAILED {accountID: %{public}@}
ICCSCU: this cloud object is an entity that needs to run CloudSchemaCatchUpSync {entity: %{public}@, identifier: %{public}@, persistenceVersion: %lld, runtimeVersion: %lld}
rem_log_fault_if(!context) -- Expected non-nil value for managedObjectContext
Nil cloud state for %@. Sorry. Fixing now.
Failed to find cloud account for %@ %@
_setCKIdentifierIfNecessary: .identifier.UUIDString is nil %{public}@ %{public}@ %{public}@
_setCKIdentifierIfNecessary: .ckIdentifier is still nil %{public}@ %{public}@ %{public}@
(object.ckIdentifier: %{public}@, accountID: %{public}@) is in batchFetchHelper missing cache
(object.ckIdentifier: %{public}@, accountID: %{public}@) does not correspond to a batchFetchHelper cachedManagedObject
objectWithRecordID: (object.ckIdentifier: %{public}@, accountID: %{public}@) with nil account
objectWithRecordID: (object.ckIdentifier: %{public}@, accountID: %{public}@) has nil account even after fixed up
objectWithCKIdentifier zone mismatched: { recordName: %{public}@, zoneOwner: %{public}@ }, but found zoneOwner: %{public}@
Missing ckIdentifier. Failed to get failedToSyncCount
Missing ckIdentifier. Failed to set failedToSyncCount
Missing ckIdentifier. Failed to get numberOfPushAttemptstoWaitCount
Missing ckIdentifier. Failed to set numberOfPushAttemptstoWaitCount
%@ failed to be pushed. Incrementing failedToSyncCount, failure (%d/%d) before being temporarily ignored. (%d/%d) before deleting change tokens and full re-sync. %@
Decrementing failure counts for %@, %d push attempts before it is retried. %@
Failed to sync %@ %d times. Now resetting failure counts, deleting change tokens, and trying full re-sync. %@
%@ failed to be pushed %d times. Max number of retries is %d. It will now be ignored for %d push attempts. %@
CKIdentifier is undefined. This should not happen since [_setCKIdentifierIfNecessary] should set it already { class: %{public}@, objectID: %{public}@, identifier: %{public}@}
Trying to get recordID with no context %{public}@ %{public}@
Trying to get recordID with no record name %{public}@ %{public}@
Trying to get recordID with empty record name %{public}@ %{public}@
Trying to get recordID with no zone name %{public}@ %{public}@
Returning NO for -_isInICloudAccount because the account of this CD object has disabled syncing {self: %@, account: %@}
Cannot get CK account for newCloudObjectForRecord {record: %{public}@, accountID: %{public}@, class: %{public}@}
newObjectWithCKIdentifier attempted to create an instance from an abstract entity {class: %{public}@, ckIdentifier: %{public}@}
rem_log_fault_if(!entityName) -- Unexpected error: cdEntityName name not defined
rem_log_fault_if(!entityName) -- Unexpected error: entity name not defined
newObjectWithCKIdentifier attempted to create a REMCDAccount CD object with ckIdentifier: %{public}@}
newObjectWithCKIdentifier attempted to create a non REMCDAccount CD object with nil account {class: %{public}@, ckIdentifier: %{public}@}
newObjectWithCKIdentifier attempted to create a CD object with nil account ckIdentifier {class: %{public}@, ckIdentifier: %{public}@}
rem_log_fault_if(!newObject) -- Unexpected error: Could not create and insert new object with {entity: %{public}@, ckIdentifier: %{public}@, account.ckID: %{public}@}
Unable to decode UUID string %@, will generate a random one. Expect something not working.
rem_log_fault_if(!batchFetchHelper) -- Unexpected error: batchFetchHelper not defined
Creating REMCDObject for CloudKit: %{public}@ .identifier=%{public}@ .ckIdentifier=%{public}@ .daCalendarItemUniqueIdentifier=%{public}@ .account.ckIdentifier=%{public}@
Should not call +allCloudObjectsPredicate on the abstract 'REMCDObject' class as a unified predicate for both REMCDAccount and non-REMCDAccount does not exist. Returning nil predicate... {stack: %{public}@}
Trying to create record without record ID for %@
Not creating cross-zone parent record relationship from %{public}@ %{public}@ to parent %{public}@ %{public}@
Error encoding resolution token map of CDObject {CDObject: %@}
rem_log_fault_if(![record.recordType isEqual:self.recordType]) -- Record type {%{public}@} to be merged must match object record type {%{public}@}
Setting %{public}@ marked for deletion when merging data from record
Setting mergeDataRefusedToMergeMarkedForDeletion=YES for %{public}@ when merging data from record
Setting mergeDataRevertedLocallyMarkedForDeletion=YES for %{public}@ when merging data from record
REMCDObjectSystemFieldsMerging: Calling +mergeSystemPropertiesIntoCDObject:fromCKRecord: {class: %@, identifier: %@}
REMCDObjectSystemFieldsMerging: Duck typing failed to work. We are expecting REMCDObject must be conforming to REMCDObjectSystemFieldsMerging {class: %{public}@, identifier: %{public}@}
Shared object was deleted %@
Marking %@ for deletion after being deleted from cloud by another device
accountID is nil or empty in objectFailedToBePushedToCloudWithOperation %{public}@, accountID: %{public}@
Invalid cached server record in account ID %{public}@: %@ %{public}@: %@
Server record changed (needs refetch) in account ID %{public}@: %@ %@: %@
Server record changed in account ID %{public}@: %@ %{public}@: %@
Server record changed with no server record in the error in account ID %{public}@: %{public}@ %{public}@: %@
Reference violation for server record in account ID %{public}@: %@ %{public}@: %{public}@
Error pushing in account ID %{public}@: %@ %{public}@: %@
Tried to cache a record that is older than or equal to our current version: %@
Object fetched from cloud and is an entity that should perform CloudSchemaCatchUpSync, force merging data from CKRecord {accountID: %{public}@, remObjectID: %{public}@}
Record fetched from server is older or equal to the saved record on device: %@
Object fetched does not have a share removing our severShare: %@
Not merging fetched record with same change tag %@
Deleting shared %@ because it no longer exists in cloud
Error writing temporary asset file: %@
Error creating temporary assets directory: %@
Error deleting file for temporary asset: %@
Error while enumerating all temporary asset files: %@
Error deleting temporary asset file: %@
Trying to purge CDObject with a read only persistent store {CDObject: %@}
Marking %@ for deletion
Unmarking %@ for deletion
Setting markedForDeletion %d on {identifier: %{public}@, cdEntity: %{public}@}
updateParentReferenceIfNecessary: self.parentCloudObject.recordID is nil %{public}@ %{public}@ %{public}@ %{public}@ %{public}@
Server record for %@ has no parent, but expects one. Re-saving record.
Server record for %@ parent %@ is different from expected parent %@. Re-saving record.
Updating sharees for %@ is not supported
No server share for %@, setting to %@
Existing server share for %@ %@ has the same change tag as %@
Existing server share for %@ %@ is newer than %@
Replacing old server share for %@ %@ with %@
Undeleting shared %@
setCkServerRecord: Clearing serverRecord for: %{public}@
Update shared object's owner names {class: %@, ownerName: %@}
Missing managed object context for updating owner name for %@ %@
Missing account for updating owner name for %@ %@
Missing account.ckIdentifier for updating owner name for %@ %@
Error decoding resolution token map of CDObject {CDObject: %@}
isEligibleInCloudObjectForLocalObjectMerge: found an REMCDObject that isInCloud && shouldAttemptLocalObjectMerge {objectID: %{public}@, hasServerRecord: %{public}@}
isEligibleInCloudObjectForLocalObjectMerge: this REMCDObject is NOT isInCloud {objectID: %{public}@, hasServerRecord: %{public}@}
Called cdEntityName on REMCDAudioAttachment. We don't have a way to create these from the API. How did we get here?
REMCDHashtagLabel.validateForInsert: { id: %{public}@, name: %@, uuidForChangeTracking: %{public}@ } with invalid nil or empty accountIdentifier: %{public}@
REMCDHashtagLabel.validateForInsert_Swift: { id: %{public}@, name: %@, uuidForTracking: %{public}@, error: %{public}@ }
Cannot return an -remChangedObjectID because this REMCDHashtagLabel object has no UUID {mid: %{public}@}
Warning: Calling super (REMCDObject's) -isConnectedToAccountObject:, make sure this model class implements proper connection to the account to avoid being auto marked as deleted {self: %@}.
Not an REM change tracking allowlisted entity, excluding this entity from change tracking? (%{public}@)
Changed object does not conform to REMChangeTrackingIdentifiable is excluded from change tracking (%{public}@)
JSONPropertiesMigration BEGIN {store: %@}
Failed to fetch objects. Migration failed {error: %@}
Saving batch {updatedObjectsCount: %ld, totalMigratedCount: %ld}
Failed to save batch. Migration error {error: %@}
Failed to save last object. Migration error {error: %@}
JSONPropertiesMigration END {totalMigratedCount: %ld, totalListCount: %ld, migratedAccount: %d. migratedListsCount: %ld, store: %@}
Unable to create REMCRMergeableOrderedSet. Skipipng listIDsMergeableOrdering migration {error: %@, cdAccount: %@}
Failed to create NSUUID from item in legacyOrderedSet. Skipping {item: %@}
Unable to migrate legacyOrderedSet. Skipping listIDsMergeableOrdering migration {error: %@, cdAccount: %@}
cdList missing account. Skipping reminderListOrdering migration {cdList: %@}
Unable to create REMCRMergeableOrderedSet. Skipipng reminderListOrdering migration {error: %@, cdList: %@}
Unable to migrate legacyOrderedSet. Skipping reminderListOrdering migration {error: %@, cdList: %@}
earliestChangeTokenForAccountID: COREDATA NSPersistentHistoryChangeRequest FAILED {author: %{public}@, error: %@}
earliestChangeTokenForAccountID: could not get a PHT token from fetch result {author: %{public}@, nsTransactions: %@}
CT Implementation: getTrackingStateWithClientID:%@
CT Implementation: saveTrackingState {state: %@, clientID: %{public}@}
Couldn't archive REMChangeToken to save tracking state for {clientID: %{public}@, encodeError: %@}
Couldn't get a persistence store to save tracking state for {clientID: %{public}@}
Failed to save tracking state to CoreData with error %@
rem_log_fault_if(transactionFetchLimit > 0 && entityNames.count > 0) -- transactionFetchLimit and entityNames are incompatible with each other and cannot be set at the same time
Failed to find entity name in -fetchHistoryAfterToken:entityName: {name: %{public}@}
Could not encode CD object into plist data {objectID: %@, error: %@, dictionary: %@}
rem_log_fault_if(!error) -- Attempting to get errorChangeSet with nil error.
COREDATA NSPersistentHistoryChangeRequest FAILED {author: %{public}@, error: %@}
rem_log_fault_if(!historyResult) -- Failed to get HistoryResult from request {request: %@}
COREDATA NSPersistentHistoryChangeRequest EXECUTED {author: %{public}@, txn.count: %llu}
REMNSPersistentHistoryTransaction has no storeID {transaction: %@}
Failed to get account objectID from storeID {storeID: %@}
Failed to get entity name from persistent history change {change: %@}
Changed object does not conform to REMChangeTrackingIdentifiable, skip resolving objectID {mID: %{public}@, change: %@}
Changed object has nil remChangedObjectID {mID: %{public}@, change: %@, managedObject: %@}
We may have found a race condition where object got deleted in context before we could fetch a deletion change history! {mID: %@}
Could not find the REMChangedObjectIdentifying ID of the managed object previously deleted in the same change set {mID: %@, change: %@}
rem_log_fault_if(!res) -- nil persistent history result {request: %@}
Failed fetch request to get REMCDTrackingState for {clientID: %{public}@, error: %@}
rem_log_fault_if(cdTrackingStates.count > 1) -- Unexpectedly found more than 1 entry of REMCDTrackingState for {clientID: %{public}@}
Unexpected nil lastConsumedChangeTokenData from the fetched REMCDTrackingState entry for {clientName: %@, accountIdentifier: %@}
Couldn't unarchive REMChangeToken from an REMCDTrackingState for {clientName: %@, accountIdentifier: %@, decodeError: %@}
Failed fetch request to get REMCDAuxiliaryChangeInfo {identifier: %@, error: %@}
Could not find REMCDAuxiliaryChangeInfo with {identifier: %@}
-[REMCDObjectTreeProcessorDelegate preprocessTreeNode:] Unknown node type {type: %{public}@}
rem_log_fault_if(sharedSettings != nil) -- Sync settings have already been initialized. {sharedSettings: %@}
[%{public}@] prepareForDeletion {attachmentID: %{public}@}
[%{public}@] Cannot obtain RDStoreControllerManagedObjectContext from attachment {attachmentID: %{public}@}
[%{public}@] Cannot obtain identifier from attachment {moid: %{public}@}
[%{public}@] Cannot obtain account identifier from attachment {attachmentID: %{public}@}
rem_log_fault_if(!backingCDObject) -- invalid nil value for '%s'
REMCDObjectEffectiveVersionValidationDelegateImpl.preprocessTreeNode: Failed to fetch managed object {mid: %{public}@, error: %{public}@}
REMCDObjectEffectiveVersionValidationDelegateImpl.preprocessTreeNode: Unexpected non-REMCDObject {mid: %{public}@, managedObject.class: %{public}@}
REMCDObjectEffectiveVersionValidationDelegateImpl.preprocessTreeNode: Unexpected non-REMCDObject {mid: %{public}@}
REMCDObjectEffectiveVersionValidationDelegateImpl.preprocessTreeNode: Incorrect node type passed to REMCDObjectEffectiveVersionValidationDelegateImpl {type: %{public}@}
REMCDObjectEffectiveVersionValidationDelegateImpl.processBatchOfTreeNodes: SAVE COREDATA ERROR {author: %{public}@, nodesToFlush.count: %ld, update.count: %ld, error: %{public}@}
REMCDObjectEffectiveVersionValidationDelegateImpl.processBatchOfTreeNodes: SAVE COREDATA {author: %{public}@, nodesToFlush.count: %ld, update.count: %ld}
REMCDObjectEffectiveVersionValidationDelegateImpl.processBatchOfTreeNodes: No changes in MoC, no need to save {author: %{public}@, nodesToFlush.count: %ld}
-[REMCDObjectTreeProcessorDelegate processBatchOfTreeNodes:] Unexpectedly processes a node with nil REMCDObject {node: %{public}@}
manual processBatchOfTreeNodes does not actually save
Called fetchRequest on REMCDObject. This will only fetch objects in SQLite table named 'ZREMCDOBJECT', but not those in other SQLite tables. {callstack: %@}
Trying to insert object in mutableArray at negative index %ld
Trying to insert object in mutableArray at index (%ld) greater than count (%ld)
rem_log_fault_if(!entityName) -- Nil NSManagedObject.entity.name {mangedObject: %@}
Error fetching server change tokens: %@
Using existing share for %@
No existing share for %@
Trying to get root record for %@, but we don't have a server record. This likely won't work.
Created share %@ with existing share reference for %@
Created share %@ for %@
Trying to populate share %@ with no record type for %@
Checking for an existing share for %@
Checking for share on %@ serverShare=%@ serverRecord.share=%@
Have a share that wasn't persisted for %@
Not checking parent object %@ for %@ because it's not in the same zone (object in %@ and parent in %@)
Preparing share %@ for %@
Finished waiting for operations before preparing share for %@
rem_log_fault_if(!object) -- invalid nil value for '%s'
No root record for %@
Retrying to save share for %@
Using saved server share when retrying %@
Trying to saveShare with nil or empty accountID: ckIdentifier: %{public}@, share: %@, rootRecordID: %@
Saving Share: %@ with root record: %@ %{public}@ %{public}@
Partial failure saving share for %@ %@
Error saving share for %@ when saving record ID %@ %@: %@
Saving server record %@ for %@ %@
Saving server share %@ for %@ %@
Server record %@ is not a share %@
No server record from error saving share for %@ %@ %@
Error saving share %@ for %@ %@: %@
Saved share %@ %@
No CKShare or error returned for %@ %@
Trying to fetchShareIfNecessaryForObject with nil or empty accountID: object ckIdentifier: %{public}@
Need to fetch share %@ for %@
Fetching share %@ with %@
Fetched share %@ %{public}@ %{public}@
Error fetching share %@ %@: %@
Setting server share on %{public}@ %{public}@ %@
Couldn't find cloud object for share %@
No record type in share %@
No root record reference for share %@
didStopSharing: Invalid arguments, share or recordID must be non-nil.
User stopped sharing %@ %@
User removed themselves from shared %@ %@
Accepting share for metadata %@
Accepting share: Accounts detected. Fetching container and accountID.
Accepting share: Single account or unable to fetch container. Using containerWithIdentifier.
Accepting share: Unable to fetch account ID. Using primaryCloudKitAccountInContext. userRecordName=%{public}@, containers.count=%lu
Accepting share: Couldn't find container for metadata %@
Accepting share: Couldn't find account id for container %@
Accepting share: Found existing object %@ for share metadata %@
Accepting share: No existing object for share metadata %@
containerForUserRecordID accountIDs=%{public}@
containerForUserRecordID containerUserRecordName=%{public}@
Must have an account ID to get container.
rem_log_fault_if(!shareURL) -- invalid nil value for '%s'
Accepting shared object at URL: %@, account ID = %{public}@
Error accepting share at URL %@ %@: %@
Share accepted for URL %@ %@
Fetching record from share %@, account ID = %@
Error fetching record from share %@: %@
Fetched record from share %@
Using share from per-share completion block %@: %@
Falling back to share from metadata %@: %@
No root record when accepting share: %@
Accepting %@ with %@
SAVE COREDATA ERROR {author: %{public}@, insert.count: %ld, update.count: %ld, delete.count: %ld, error: %{public}@}
SAVE COREDATA {author: %{public}@, insert.count: %ld, update.count: %ld, delete.count: %ld}
Performed save with nil author
COREDATA REQUEST {author: %{public}@, request: %@}
COREDATA REQUEST ERROR {author: %{public}@, request: %{public}@, error: %{public}@}
FETCH COREDATA REQUEST {author: %{public}@, request: %@}
FETCH COREDATA ERROR {author: %{public}@, entityName: %{public}@, error: %{public}@}
BATCH FETCH COREDATA {elapsedTime: %.9lf, author: %{public}@, entityName: %{public}@, result.count: %ld, affectedStores.count: %ld, persistentStoreCoordinator.persistentStores.count: %ld, propsToFetch.count: %ld, fetchBatchSize: %ld}
FETCH COREDATA {elapsedTime: %.9lf, author: %{public}@, entityName: %{public}@, result.count: %ld, affectedStores.count: %ld, persistentStoreCoordinator.persistentStores.count: %ld, propsToFetch.count: %ld}
Performed fetch with nil author
FETCH COUNT COREDATA REQUEST {author: %{public}@, request: %@}
FETCH COUNT COREDATA ERROR {author: %{public}@, entityName: %{public}@, error: %{public}@}
FETCH COUNT COREDATA {elapsedTime: %.9lf, author: %{public}@, entityName: %{public}@, count: %ld, affectedStores.count: %ld, persistentStoreCoordinator.persistentStores.count: %ld}
Entity has nil name {entity: %{public}@}
[entity-height-in-MoM-tree] node.entity=%{public}@, node.entity.relationships=%{public}@
sTopologicallyWeightedEntities = %{public}@
REMSupportedVersionUpdating: VALIDATING dirty MOIDs for effectiveMinimumSupportedVersion {author: %{public}@, dirtyObjectIDs.count: %ld}
Failed to fetch dirty object for effectiveMinimumSupportedVersion validation {managedObjectID: %{public}@, error: %{public}@}
Dirty object for effectiveMinimumSupportedVersion validation is not REMCDObject {managedObjectID: %{public}@}
REMSupportedVersionUpdating: VALIDATION COMPLETED for effectiveMinimumSupportedVersion {author: %{public}@, subtrees.count: %ld, elapsed: %.4f s}
[%{public}@] Failed to acquire persistentStore for account identifier [%{public}@]
[%{public}@] Failed to fetch existing attachments in account [%{public}@] with sha512Sums [%{public}@]. Not purging any attachments for this account.
[%{public}@] Failed to obtain RDStoreController
[%{public}@] Failed to obtain fileIOWorkerQueue
[%{public}@] after save {attachmentIDs.count: %ld}
[%{public}@] Purge attachment files failed {accountID: %{public}@, code: %ld, error: %@, attachmentIDs: %{public}@, purged: %{public}@}
[%{public}@] Purged attachment files for {accountID: %{public}@, attachmentIDs.count: %ld, purged.count: %ld}
[%{public}@] Purge attachment files failed {accountID: %{public}@, code: %ld, error: %@, fileNames: %{public}@, purged: %{public}@}
[%{public}@] Purged attachment files for {accountID: %{public}@, fileNames.count: %ld, purged.count: %ld}
Not going to create CoreSpotlight delegate for store description because it doesn't exist in the PSC {coordinator: %@}
CoreSpotlight delegates are not activated. Will delay starting delegates {store: %@, coordinator: %@, associatedDelegate: %@}
Failed to create RDCoreDataCoreSpotlightDelegate {exception: %@, storeDescription: %@}
The store doesn't have coreSpotlightExporter {store: %@, coordinator: %@}
Failed to remove Spotlight indices for store {error: %@, store: %@, coordinator: %@}
CoreSpotlight indexing is not enabled. Skipping activating CoreSpotlight delegates.
CoreSpotlight delegates has already been activated. -activateCoreSpotlightDelegates should be called only once.
Activating CoreSpotlight delegates {coordinator: %@}
The store does not have an associated CoreSpotlight delegate. This is expected if (and only if) the store has been requested to be removed. {store: %@, coordinator: %@}
The store already has an active CoreSpotlight delegate {store: %@, coordinator: %@, activeDelegate: %@, associatedDelegate: %@}
Executing pending reindex all request {coordinator: %@}
Executing pending reindex items request {coordinator: %@, identifiers: %@}
Stopping CoreSpotlight delegates {coordinator: %@, stores: %@}
The store does not have an active CoreSpotlight delegate {store: %@, coordinator: %@}
The store does not have an associated CoreSpotlight delegate {store: %@, coordinator: %@}
Received request to -reindexAllSearchableItems {coordinator: %@}
The spotlight delegates are not activated yet. Going to defer reindexing all. {coordinator: %@}
Received request to -reindexSearchableItemsWithIdentifiers: {coordinator: %@, identifiers: %@}
The spotlight delegates are not activated yet. Going to defer reindexing items. {coordinator: %@}
Starting CoreSpotlight delegate {store: %@, coordinator: %@, delegate: %@}
The store still doesn't have active CoreSpotlight delegate after kicking start the associated delegate {store: %@, coordinator: %@, associatedDelegate: %@}
rem_log_fault_if(![NSStringFromClass([REMCDAttachment class]) isEqualToString:NSStringFromClass(self)]) -- A subclass of REMCDAttachment called '- [REMCDAttachment cdEntityName]'. The subclass should override this method. {callstack: %@}
Canceling operation: %@
[init] Error occured when loading accounts from disk {error: %{public}@}
[init] Error occured trying to delete all spotlight indices. Will not enable CoreSpotlight delegates {error: %{public}@}
Deallocating RDStoreController {pointer: %p, containerURL: %{private}@}
[loadAccountStoresFromDisk] Failed to discover account identifiers on disk. {error: %{public}@}
[loadAccountStoresFromDisk] Number of PSC loaded stores is not the same as our account store map entry count! {pscStoresCount: %ld, accountStoreMapCount: %ld}
[loadPPTStoreStatus] Found ppt sentinel. Marking as PPTStore {pptSentinelURL: %{private}@}
[loadPPTStoreStatus] Store was marked as PPT but sentinel is gone. Marking a non-PPTStore {pptSentinelURL: %{private}@}
Before getting files from URL {url: %{private}@}
Done getting files from URL {url: %{private}@, count: %ld}
[discoverAccountStoreURLsFromFilesOnDisk] Failed to get file size {file: %{public}@, error: %{public}@}
[discoverAccountStoreURLsFromFilesOnDisk] Failed to fetch store metadata for sqlite file due to disk full {file: %{public}@, error: %{public}@}
[discoverAccountStoreURLsFromFilesOnDisk] Failed to fetch store metadata for sqlite file {file: %{public}@, error: %{public}@}
[discoverAccountStoreURLsFromFilesOnDisk] Considering sqlite store on disk... {storeURL: %{public}@, identifier: %{public}@, isInit: %d, markedAsDeleted: %d, supported: %d}
[discoverAccountStoreURLsFromFilesOnDisk] The store sqlite file is neither initialized or marked as deleted. The file is probably corrupted. Will delete the file if <= 4096 bytes (i.e. empty) {file: %{public}@, url: %{public}@}
[discoverAccountStoreURLsFromFilesOnDisk] Unsupported storeURL. DELETING {store: %{public}@, identifier: %{public}@, url: %{public}@}
[discoverAccountStoreURLsFromFilesOnDisk] WARNING that we're loading a large database exceeding 50MB, large database is suboptimal in every way {fileSize: %lu, store: %{public}@, identifier: %{public}@, url: %{public}@}
[discoverAccountStoreURLsFromFilesOnDisk] Found sqlite file in RDStoreController.databaseDirectoryURL doesn't have prefix RDPathComponentStoreFilePrefix {file: %{public}@}
[discoverAccountStoreURLsFromFilesOnDisk] Failed to get filename from sqlite file in RDStoreController.databaseDirectoryURL {file: %{public}@}
[discoverAccountStoreURLsFromFilesOnDisk] Deleted store files marked for deletion in previous launches {removed.stores.count: %ld, removed.files.count: %ld}
[discoverAccountStoreURLsFromFilesOnDisk] Failed to delete (some) store files marked for deletion in previous launches {storesToRemove.count: %ld, removed.files.count: %ld, error: %{public}@}
[discoverAccountStoreURLsFromFilesOnDisk] Finished discovering account identifiers on disk {file.count: %ld, storeURLs.count: %ld, deletedStores.count: %ld}
[discoverAccountStoreURLsFromFilesOnDisk] Failed to enumerate files in RDStoreController.databaseDirectoryURL - Failed to load accounts from disk {error: %{public}@, databaseDirectoryURL: %{private}@}
[loadAccountStoresFromDisk] Added store URL to pending batch {url: %@}
[loadAccountStoresFromDisk] Flusing batch {idx: %ld, batch: %ld, storeURLs.count: %ld}
[loadAccountStoresFromDisk] Loaded accounts from disk {batch: %ld, batchSize: %ld, urls: %{public}@, accountIdentifiers: %{public}@}
[loadAccountStoresFromDisk] Failed to load accountStoreFromDisk. {batch: %ld, batchSize: %ld, urls: %{public}@, error: %{public}@}
[loadAccountStoresFromDisk] Loaded an account store with no store identifier, can't add to store controller {store: %{public}@}
[loadAccountStoresFromDisk] candidates stores to validate... {candidateStores.count: %ld}
[loadDummyStoreIfNeeded] Local store is not loaded to the PSC. Probably it's corrupted and failed to load. Going to delete the file and reload again. {error: %{public}@}
[loadDummyStoreIfNeeded] Failed to delete local store file {error: %{public}@}
[loadDummyStoreIfNeeded] Failed to load local store {error: %{public}@}
[loadDummyStoreIfNeeded] Re-created and loaded local store {store: %{public}@}
[loadDummyStoreIfNeeded] Still unable to load local store after deleting and reloading.
[addValidatedStoresToAccountStoreMapWithStores] Impossible: Unexpected nil store from validStoresByAccountIDs map {accountID: %{public}@}
[addValidatedStoresToAccountStoreMapWithStores] Found duplicated stores for the same account, treating one of them as invalid {accountID: %{public}@, valid: storeid=%{public}@ %@, invalid: storeid=%{public}@ %@}
[addValidatedStoresToAccountStoreMapWithStores] Adding valid store to accountStoreMap {accountID: %{public}@, store.URL: %{public}@}
[addValidatedStoresToAccountStoreMapWithStores] Processing invalid stores, either to delete immediately or mark as deleted {shouldDeleteInvalidStoresImmediately: %d, count: %ld}
[_validateAccountStores] RDCDAccountTypeKey from [REMCDAccount fetchRequest] yields no result unexpectedly {accountID: %{public}@, store: %@}
[_validateAccountStores] Found corrupted store with unkwown account type {accountID: %{public}@, store: %@}
[_validateAccountStores] Found duplicated stores for the same account, treating one of them as invalid {accountID: %{public}@, valid: storeid=%{public}@ %@, invalid: storeid=%{public}@ %@}
[_validateAccountStores] Found store with no REMCDAccount. Going to disconnect and destroy {store: %@}
[_validateAccountStores] Found corrupted store with %ld REMCDAccount objects {accountIDs: %{public}@, store: %@}
[_validateAccountStores] Error fetching account ID from store {error: %{public}@, store: %@}
[_validateAccountStores] Validate results {input.count: %ld, valid.count: %ld, invalid.count: %ld, valid.accountIDs: %{public}@}
[_deduplicateLocalAccountStore] {storeToDrop: %{public}@, store1: {id=%{public}@, lastEdit=%{public}@}, store2: {id=%{public}@, lastEdit=%{public}@}
[removeFromPersistentStoreCoordinatorAndDeleteImmediately] Attempted to delete stores immediately in situations other than -init. Abort. {isolated: %d}
[removeFromPersistentStoreCoordinatorAndDeleteImmediately] Removed store from PSC {storeURL: %{public}@}
[removeFromPersistentStoreCoordinatorAndDeleteImmediately] Failed to remove store from PSC {storeURL: %{public}@, error: %{public}@}
[removeFromPersistentStoreCoordinatorAndDeleteImmediately] Deleted store files immeidately {count: %ld}
[removeFromPersistentStoreCoordinatorAndDeleteImmediately] Failed to delete (some) store files immeidately {error: %{public}@}
[MIGRATE STORES] BEGIN {stores.count: %ld}
RDStoreControllerMigrator: [MIGRATE STORE] Store URL is nil {identifier: %{public}@}
RDStoreControllerMigrator: [MIGRATE STORE] Skipping local dummy store {storeURL: %{public}@}
RDStoreControllerMigrator: [MIGRATE STORE] BEGIN {storeURL: %{public}@}
RDStoreControllerMigrator: [MIGRATE STORE] END {storeURL: %{public}@}
RDStoreControllerMigrator: [MIGRATE STORE] Did update stores metadata
RDStoreControllerMigrator: [MIGRATE STORE] ERROR: Failed to flush stores metadata {error: %{public}@, updatedStores: %@}
RDStoreControllerMigrator: [MIGRATE STORES] END {updatedStoreURLs.count: %ld, updatedStoreURLs: %{public}@}
[_removeFilesOfStoresAtURLs] Failed to get store directory content from {storeDir: %{public}@, store.url: %{public}@, error: %{public}@}
[_removeFilesOfStoresAtURLs] Obtained store directory content from {storeDir: %{public}@, store.url: %{public}@}
[_removeFilesOfStoresAtURLs] Obtained store directory content cached for {storeDir: %{public}@, store.url: %{public}@}
[_removeFilesOfStoresAtURLs] Unexpected nil store directory URL {store.url: %{public}@}
[_removeFilesOfStoresAtURLs] Removed store file {filename: %{public}@, storeUrl: %{public}@}
[_removeFilesOfStoresAtURLs] Failed to remove store file at {filename: %{public}@, storeUrl: %{public}@, error: %{public}@}
[addValidatedStoresToAccountStoreMapWithStores] storeURL or invalidStoreBackupURL is nil {storeURL: %@, backupURL: %@}
[addValidatedStoresToAccountStoreMapWithStores] Error backing up invalid store sqlite {store: id=%{public}@ %@, backupURL: %@}
[addValidatedStoresToAccountStoreMapWithStores] Error backing up invalid store sqlite-wal {store: id=%{public}@ %@, backupURL: %@}
[addValidatedStoresToAccountStoreMapWithStores] Error backing up invalid store sqlite-shm {store: id=%{public}@ %@, backupURL: %@}
[addValidatedStoresToAccountStoreMapWithStores] Created back up of invalid store {store: id=%{public}@ %@, backupURL: %@}
Creating clones of store before performing staged lightweight migration for store. {storeURL: %{public}@, isInternalInstall: %{public}@, storeBackupURL: %{public}@, storeCloneURL: %{public}@}
Failed to create clone of store before performing staged lightweight migration for store. {storeURL: %{public}@, destinationStoreURL: %{public}@, error: %{public}@}
Created clone of store before performing staged lightweight migration for store. {storeURL: %{public}@, destinationStoreURL: %{public}@}
Failed to perform staged lightweight migration on store clone. {storeURL: %{public}@, storeCloneURL: %{public}@, error: %{public}@}
Performed staged lightweight migration on store clone. Will replace store with store clone. {storeURL: %{public}@, storeCloneURL: %{public}@}
Failed to replace store with store clone. {storeURL: %{public}@, storeCloneURL: %{public}@, error: %{public}@}
Failed to delete stores. {storeURLsToDelete: %{public}@, error: %{public}@}
Deleted stores. {storeURLsToDelete: %{public}@}
[_persistentStoreConnectionPoolMaxSizeWithTotalStoreCount] {totalStoreCount: %ld, result: %ld}
Error fetching stores from account types {error: %{public}@, types: %{public}@}
[createAccountStoresWithIdentifiers] Identifier already loaded -- skipping {identifier: %{public}@}
[createAccountStoresWithIdentifiers] No account is missing. No need to load missing accounts
[createAccountStoresWithIdentifiers] Add persistentStores BEGIN {identifiersToAdd.count: %ld, accountStoreMap.count: %ld, connectionPoolMaxSize: %ld}
[createAccountStoresWithIdentifiers] Failed to set account identifier into metata {identifier: %{public}@, error: %@, store: %@}
[createAccountStoresWithIdentifiers] Add persistentStores END {accountStoreMap.count: %ld, newStores.count: %ld, lastError: %{public}@}
[createOrLoadAccountStores] Trying to load more stores than the maximum we allow. Bailing. {limit: %ld, loaded.count: %ld}
[createOrLoadAccountStores] WARNING We are now loading more stores than the maximum limit. Allowed though because we have passed the initial load-from-disk stage. {limit: %ld, loaded.count: %ld}
[createOrLoadAccountStores] Will add store {storeURL: %{public}@, optionsOverride: %{public}@}
[createOrLoadAccountStores] didAdd store {fileName: %{public}@, connectionPoolMaxSize: %{public}@, addedStoreDescription: %@}
[createOrLoadAccountStores] Failed to add store {error: %@, fileName: %{public}@}
[removeAccountStoresWithIdentifiers] Tried to remove store for unknown account -- skipping {accountIdentifier: %{public}@}
[removeAccountStoresWithIdentifiers] Going to remove store for account {accountIdentifier: %{public}@, store: %@}
[removeAccountStoresWithIdentifiers] Successfully removed store for account {accountIdentifier: %{public}@}
[removeAccountStoresWithIdentifiers] Failed to remove store for account {accountIdentifier: %{public}@}
[markAccountStoreDeleted] Marking account store as deleted {store: %@}
[markAccountStoreDeleted] Failed to mark account store as deleted {store: %@, error: %{public}@}
[markAccountStoreDeleted] Failed to obtain accountIdentifier from store {accountIdentifier: %{public}@, store: %@}
[markAccountStoreDeleted] Deleting spotlight indices {store: %@}
[markAccountStoreDeleted] Going to delete objects for entity {entity: %@, store: %@}
[markAccountStoreDeleted] Failed to delete objects for entity {entity: %@, store: %@, error: %{public}@}
[markAccountStoreDeleted] Done deleting objects for entity {entity: %@, store: %@}
[markAccountStoreDeleted] Errors purging account files {error: %@, accountID: %{public}@, store: %@}
[markAccountStoreDeleted] Purged account files for {accountID: %{public}@, store: %@}
RDStoreController nukeData. *** NOTE *** This will only mark database files as deleted without actually deleting the files, as deleting database files while remindd is running is likely to cause a CoreData crash. The files will be deleted the next time remindd launches, or you can run `remindtool nuke`, or manually kill remindd and delete the whole container directory. {containerURL: %@, accountIDToDatabaseFileNameMap: %@}
RDStoreController nukeData completed {allSuccess: %ld, error: %{public}@}
Failed to set query generation token to current {error: %{public}@}
Deleting object from database because it's marked for deletion and its deletion has synced: %@
Error purging deleted objects: %{public}@
[RDStoreController requestFreeSpaceToLoadAccountStores] Files from URL {url: %{private}@, count: %ld, error: %@}
[RDStoreController requestFreeSpaceToLoadAccountStores] Failed to get file size {file: %{public}@, error: %{public}@}
[RDStoreController requestFreeSpaceToLoadAccountStores] File size is {file: %@, size: %@}
[RDStoreController requestFreeSpaceToLoadAccountStores] Trying to request free space (multiplied) {space: %llu, multiplier: %llu}
[RDStoreController requestFreeSpaceToLoadAccountStores] Aborted requesting free space, dispatch to call completion directly
didFetchUserRecord: %@
Received an error that a zone (%{public}@) wasn't found. Re-uploading everything for that zone for accountID %{public}@.
accountID is nil in cloudContext:receivedZoneNotFound:accountID: zoneID %{public}@
Deleting shared %@ for accountID %{public}@
Not deleting shared %@ in wrong zone %{public}@ for account ID %{public}@
userDidDeleteRecordZoneWithID: %{public}@, accountID:%{public}@
accountID is nil in cloudContext:userDidDeleteRecordZoneWithID:accountID: zoneID %{public}@
Error saving after notes zone deleted by user: %@
%@ (%@) hasn't been fully pushed to the cloud. Not deleting.
didFailPushingExceededStorageQuotaForContext: %@, accountID: %{public}@
Deleted object {managedObjectID: %@}
Inserted object {managedObjectID: %@}
Updated object {managedObjectID: %@}
Not creating an RDAccountPersonIDSaltObserver because the system is not ready to retrieve the primary cloudkit account
Not creating an RDAccountPersonIDSaltObserver because primary cloudkit account is not available. Notifying caller explicitly to handle RDAccountPersonIDSaltObserver.AccountAbsentError... {accountID: %{public}@, inactive: %d}
Created an RDAccountPersonIDSaltObserver and added to accountPropertiesNotifier {observerID: %@, accountObjID: %@}
Failed to create an RDAccountPersonIDSaltObserver to add to accountPropertiesNotifier {accountObjID: %@}
Removed RDAccountPersonIDSaltObserver from accountPropertiesNotifier {observerID: %@}
Failed to list contents of store directory {error: %{public}@}
Existing contents of stores diretory:
Store %d: %@
Account storage invocation caches invalidated {reason: %{public}@}
PopulateDefaultValuesMigration BEGIN {store: %@}
Non-optional attribute has no default value. Skipping {entityName: %@, attributeName: %@}
Attribute belongs to super entity. Skipping {entityName: %@, attributeName: %@}
PopulateDefaultValues BEGIN {entity: %@, attributeName: %@}
PopulateDefaultValues END {entity: %@, attributeName: %@, updated.count: %@}
PopulateDefaultValues ERROR {updateError: %@, entity: %@, attributeName: %@}
PopulateDefaultValuesMigration END {store: %@, populateAttributeNames: %@}
rem_log_fault_if(!ckIdentifier) -- invalid nil value for '%s'
rem_log_fault_if(!accountIdentifier) -- invalid nil value for '%s'
Cannot obtain permanent ID for %{public}@ with error: %{public}@
managedObjectContext should not be nil in BatchFatchHelper._canObtainPermanentIDForObject for %{public}@
ICBatchFetchHelper does not need to fetch %{public}@ as it is in missingCKIdentifierCache
ICBatchFetchHelper does not need to fetch %{public}@ as it is already in managedObjectIDCache
ICBatchFetchHelper found object %{public}@ with nil accountIdentifier
Cannot obtain permanent ID for %{public}@
managedObjectContext should not be nil in BatchFatchHelper._flush
%{public}@ perform dispatch block sync took %f s
%{public}@ flush (onCurrentQueue = %d) took %f s
ICBatchFetchHelper: existingObjectWithID %{public}@ with error %{public}@
ICBatchFetchHelper: existingObjectWithID %{public}@ is nil
managedObjectContext should not be nil in BatchFatchHelper.cachedManagedObjectForCKIdentifier for %{public}@
ICBatchFetchHelper: %{public}@ is not in cachedManagedObjectForCKIdentifier
Number of dispatch blocks not run in ICBatchFetchHelper : %lu
REMCDObjectTreeProcessor: START traversing post-order from {rootNode: %{public}@, batchSize: %ld}
REMCDObjectTreeProcessor: 
CYCLIC REFERENCE in object tree detected! Tail node has already been flushed before {tailNode: %{public}@}
REMCDObjectTreeProcessor: 
STATUS {traversalStack.count: %ld, flushQueue.count: %ld, flushed.count: %ld, tailNode: %{public}@}
REMCDObjectTreeProcessor: END traversal for {processed.count: %ld, elapsed: %.4f s, rootNode: %{public}@}
REMCDObjectTreeProcessor: 
FLUSHING {count: %ld}
Error saving context (%{public}@): %{public}@
Error saving context: %{public}@
Saved context: %{public}@
CKParentReminderIdentifierMigration BEGIN {store: %@}
CKParentReminderIdentifierMigration ERROR {updateError: %{public}@}
CKParentReminderIdentifierMigration END {store: %@, updated.count: %ld}
PersonIDSaltGenerator failed to generate random salt with exception: %@.
Failed to fetch CD accounts: %@
Found extended account without CK user record name: %@
Failed to fetch cloud-based accounts: %@
Trying to get a primary active CloudKit account but can't find any
Trying to get a primary active CloudKit account based on the assumption that there should only be at most 1 active (primary) .cloudKit account type object but multiple was found {count: %lu, first.identifier: %@}
CloudKitUtils: No CloudKit REMCDAccount found in the database
CloudKitUtils: Trying to get the primary iCloud ACAccount but can't find any
CloudKitUtils: Found a CloudKit REMCDAccount that matches the primary iCloud ACAccount {cdAccount: %{public}@, acAccount: %{public}@}
CloudKitUtils: Found a PPT fixture CK account, ASSUMED to be matching the primary iCloud ACAccount {cdAccount: %{public}@, acAccount: %{public}@}
CloudKitUtils: Found a primary CloudKit REMCDAccount that does NOT match with the primary iCloud ACAccount, this is unexpected {cdAccount: %{public}@, acAccount: %{public}@}
CloudKitUtils: Found a non-primary CloudKit REMCDAccount that matches the primary iCloud ACAccount, this is unexpected {cdAccount: %{public}@, acAccount: %{public}@}
-accountWithCKIdentifier: fetched an inactive account {ckIdentifier: %{public}@}
cloudKitAccountWithCKIdentifier with nil or empty ckIdentifier
cloudKitAccountWithCKIdentifier with nil context
cloudKitAccountWithCKIdentifier: not in cache, ckIdentifier: %{public}@, all ckIdentifiers: %{public}@
cloudKitAccountWithCKIdentifier: nil context, ckIdentifier: %{public}@, all ckIdentifiers: %{public}@
rem_log_fault_if(![[self accountTypeHost] isPrimaryCloudKit]) -- Generating PersonIDSalt is supported on the primary CloudKit account only
generateAndSavePersonIDSaltIfNeeded...: Could not generate random salt due to system error {accountID: %{public}@}
generateAndSavePersonIDSaltIfNeeded...: Posted RDStoreControllerREMAccountPropertiesDidUpdate {accountID: %{public}@, salt: %@}
generateAndSavePersonIDSaltIfNeeded...: Could not post RDStoreControllerREMAccountPropertiesDidUpdate due to unexpected values {accountID: %{public}@, salt: %@}
generateAndSavePersonIDSaltIfNeeded...: Account .personIDSalt is already set {accountID: %{public}@, salt: %@}
Found cloudKit account without ckIdentifier: %{public}@
DisplayDateMigration BEGIN {store: %@}
DisplayDateMigration END {store: %@}
$s7remindd24RetainedMainDaemonObjectP
So8NSStringC
$sSY
$ss21_ObjectiveCBridgeableP
_pSgG
So17OS_os_transaction_pSg
ySS_yptG
SgXw
qd__SgXwz_
Rld__Cr__lXX
Ieggn_
y_So17OS_dispatch_queueCG
ypSg
_pSg
_pSg
So17OS_dispatch_queueC
ySaySo24REMContactRepresentationCG_G
SgXw
qd__SgXwz_SaySo24REMContactRepresentationCG_
Rld__Cr__lXX
SaySo24REMContactRepresentationCGIeggn_
SaySo24REMContactRepresentationCG
yShy
GADG
yShy
GAEGG
yShy
GAFGGSo17OS_dispatch_queueCG
yShy
GSgXw
_pIegzo_
ySbG
ySaySo17NSManagedObjectIDCGG
ySDySS
_pGG
ySaySo17NSManagedObjectIDC06objectC0_
4datatGG
SaySo17NSManagedObjectIDC06objectC0_
4datatG
SDySS
SaySo17NSManagedObjectIDCG
ySaySo24REMContactRepresentationCG_G
So7NSErrorC
$s10Foundation21_BridgedStoredNSErrorP
$s10Foundation18_ErrorCodeProtocolP
So11REMObjectIDC
ypSiSpy
GSbIgnyyd_
So8NSObjectCSg
SDySo17NSManagedObjectIDC
ypyp
Ignnd_
_pSgIeggg_
_pSgIegng_
_pSgIeggg_
_pSgIeggg_
_pSgIeggg_
$ss12CaseIterableP
$s7remindd23TantorMigrationAPIAsyncP
ySi_
So13CKRecordValue_p
So15REMCDAssignmentCm
So15REMCDAssignmentC
So10CKRecordIDC
Sbz_Xx
ySo11REMObjectIDC
_pGIegg_
XDXMT
yyXlG
So17NSManagedObjectIDC
So17NSManagedObjectIDCSg
So17NSManagedObjectIDCSgz_Xx
SSSg
So8NSObjectC
So8REMColorCm
SDySSypG
So24REMContactRepresentationCm
So8REMColorCSg
Sg_ABt
So11REMObjectIDCSg
SDySo11REMObjectIDCSSGSg
SaySo11REMObjectIDCG
So22UNNotificationResponseC
ySo11REMObjectIDCSo11REMReminderC_G
SbIegy_Sg
SaySo9REMShareeCG
So7REMListC
So17OS_dispatch_groupC
ySo13REMAssignmentCSo11REMReminderC_G
ySS_So8NSObjectCtG
So29REMDAChangedModelObjectResult_p
ySo11REMObjectIDCSaySo13REMAssignmentCG_G
SDySo7REMListCSaySo11REMReminderCGG
SaySo11REMReminderCG
SDySo11REMObjectIDCSaySo13REMAssignmentCGG
SaySo13REMAssignmentCG
ySS_So8NSStringCtG
So29DABabysitterRegistrationTokenCSg
SbSgIegy_Sg
So14REMChangeTokenCSg
SgXw
SaySo25REMDAChangeTrackingHelperCG
SbSg
ySdG
yShyxGc
ShyxG
SayySb_ShyxGtcG
ySo8NSNumberCG
So5NSSetCIeyByy_
So5NSSetCIeyBy_
c_SiSdt
$s7remindd11Completable33_D969633BE2061D27916D1A5EBAC77335LLP
SnySiG
ySo13REMCDReminderCG
So17RDStoreControllerCSgXw
_pSgXw
So24REMAppleAccountUtilitiesC
$s7remindd15PersonIDHashingP
$s7remindd45RDExchangeAccountComplimentaryServiceDelegateP
GSo17OS_dispatch_queueCG
So21DADBuddyStateObserverCSg
So17OS_os_transaction_p
So18REMAccountTypeHostCSbIeggd_
So17OS_dispatch_queueCG
SgXw
SgXwz_Xx
So6NSDataC
SaySSG
SDySSSaySSGG
SDySSSdG
yS2S_G
yS2SG
20serializationVersion_t
SS3key_
yS2S_G20serializationVersiont
yS2S_G20serializationVersion_t
So22REMStoreContainerTokenCSg
_pSgXw
So10NSMapTableCySo5NSURLCSo17RDStoreControllerCG
So7NSErrorCSgIeyBy_
_yptG
So7NSArrayCSo7NSErrorCSgIeyByy_
3key_ShySSG5valuetSg
So19REMCDFileAttachmentC
3key_ShySSG5valuet
SaySo19REMCDFileAttachmentCG
So11REMObjectIDCSgSo7NSErrorCSgIeyByy_
So11REMObjectIDCSg
_pSgIeggg_
So21REMTemplatePublicLinkCSgSo7NSErrorCSgIeyByy_
So21REMTemplatePublicLinkCSg
_pSgIeggg_
So7NSArrayCSgSo7NSErrorCSgIeyByy_
_pSgIegg_
SayypGSg
_pSgIeggg_
So15CNKeyDescriptor_p
So18CNContactFormatterC
So9CNContactCSpy
GIggy_
So14CNLabeledValueC
IeyB_
So16CLCircularRegionC
Ieg_
So7NSArrayCIeyBy_
SaySSGIegg_
ySo8CLRegionC_G
_pSg
So9ACAccountC
_pSgz_Xx
So14ICCloudContextC
SiSo12NSDictionaryCSgSo7NSErrorCSgIeyByyy_
SDyS2SG
SiSDyS2SGSg
_pSgIegygg_
SDyS2SGz_Xx
_pIegg_
SiIegy_
So11REMCDObjectC
So14NSFetchRequestC
So11REMObjectIDC07accountB0_
19completionPredicate
09concealedE0t
ySo13REMCDReminderC
ySo10REMCDAlarmCGG
So10REMCDAlarmC
ySo17REMCDAlarmTriggerCGG
So12DABabysitterC
8listType_SS0A2IDt
So15NSManagedObjectC
So13NSXPCListenerC
So29SBSApplicationShortcutServiceC
ySS_So14NSSecureCoding_ptG
So14NSSecureCoding_p
$s7remindd12AlarmWrapper33_21DE925B29389F3F365F2E7E031C4B64LLP
$s7remindd12NonceBearing33_21DE925B29389F3F365F2E7E031C4B64LLP
$s7remindd17NonceBearingAlarm33_21DE925B29389F3F365F2E7E031C4B64LLP
SdSg
$s7remindd24RDSwiftInvocableProtocolP
$s7remindd13RDEventStreamP
$s7remindd17RDTimeEventStreamP
$s7remindd35RDSharedInlineTagAutoConvertHandlerP
So22NSManagedObjectContextC
So23RDPersistentStoreLookup_p
ShySo12REMCDHashtagCG
So17REMCDHashtagLabelC
SaySo17REMCDHashtagLabelCG
ySo17REMCDHashtagLabelC
So17REMCDHashtagLabelC_
ySo11REMObjectIDCShySSGG
ySo12REMCDHashtagC_G
So18NSAttributedStringC
Gz_Xx
XDXMT
ShySo15NSManagedObjectCG
So12REMTTHashtagC
$s7remindd23DataAccessSyncPerformerP
So8REMStoreCyKc
SgXw
So8CKRecordCSgSo7NSErrorCSgIeyByy_
So8CKRecordCSg
_pSgIeggg_
So12NSDictionaryCSgSo7NSErrorCSgIeyByy_
SDySS
_pSgIeggg_
So18REMMigrationResultCSgSo7NSErrorCSgIeyByy_
So18REMMigrationResultCSg
_pSgIeggg_
So18REMMigrationResultCSg
So18REMMigrationResultCSgz_Xx
Sg_ABt
ySo10REMHashtagC_G
ySo13REMCDReminderCGG
So13REMCDReminderCSg
So10REMCDAlarmCm
So22REMAlarmVehicleTriggerC
So24REMCDAlarmVehicleTriggerC
$s7remindd10CDIngestorP
So23REMAlarmLocationTriggerC
So25REMCDAlarmLocationTriggerC
So19REMAlarmDateTriggerC
So21REMCDAlarmDateTriggerC
So27REMAlarmTimeIntervalTriggerC
So29REMCDAlarmTimeIntervalTriggerC
SS10identifier_t
3pid_SSSg16bundleIdentifierAC11processName
11accessLevelSb17isUserInteractivet
So18REMTemplateStorageC
SgSg
SgSg
Sg_ABt
SgSg_ACt
SgSg
ySo14REMCDSmartListCGG
ySo9REMCDListCGG
SaySo9REMCDListCG
ySo9REMCDListCG
yXlXp
So20NSFetchRequestResult_p
ySo9REMCDListCGG
ySo11REMCDObjectCG
SaySo14REMCDSmartListCG
ySo14REMCDSmartListCG
ySo14REMCDSmartListCGG
SgSg_ACt
SDySSSaySo17REMManualOrderingCGG
G_So15NSManagedObjectCtG
G_ABtG
GACG
ySo11REMObjectIDCSo15NSManagedObjectCG
ySo11REMObjectIDC_G
ySo11REMObjectIDCSo11REMCDObjectCG
ySo11REMCDObjectCG_So15NSManagedObjectCtG
ySo11REMCDObjectCG_ACtG
ySo11REMCDObjectCGADG
ySo11REMCDObjectCG
ySo11REMCDObjectCGG
ySo11REMCDObjectCGG
ySo11REMCDObjectCGG
ySo11REMObjectIDCG
ySo12REMCDAccountCG_So15NSManagedObjectCtG
ySo12REMCDAccountCG_ACtG
ySo12REMCDAccountCGADG
ySo12REMCDAccountCG
SaySo12REMCDAccountCG
ySo12REMCDAccountCGG
ySo12REMCDAccountCGG
ySo12REMCDAccountCGG
SaySo17REMManualOrderingCG
ySo13REMCDReminderCGG
ySSG
15dataSourceAlarm_
8fireDatetSg
15dataSourceAlarm_
8fireDatet
ySo17REMCDAlarmTriggerCG
ySo17REMCDAlarmTriggerCGG
ySo11REMObjectIDC
ySo11REMObjectIDC
ySo11REMObjectIDCSo12REMCDAccountCG
ySo12REMCDAccountCG
ySo12REMCDAccountCGG
ySo11REMCDObjectCG
ySo11REMObjectIDCSo13REMCDReminderCG
ySo13REMCDReminderCG
ySo14REMCDSmartListCGG
ySo9REMCDListCGG
ySo24REMCDAlarmVehicleTriggerCGG
SDySSSaySo13REMAttachmentCGG
G_So15NSManagedObjectCtG
G_ABtG
GACG
SaySo13REMAttachmentCG
ySo25REMCDAlarmLocationTriggerCGG
SDySSSaySo9REMShareeCGG
ySo11REMCDShareeCG_So15NSManagedObjectCtG
ySo11REMCDShareeCG_ACtG
ySo11REMCDShareeCGADG
ySo11REMCDShareeCG
SaySo11REMCDShareeCG
ySo11REMCDShareeCGG
ySo11REMCDShareeCGG
ySo11REMCDShareeCGG
SDySSSaySo21REMCalDAVNotificationCGG
ySo23REMCDCalDAVNotificationCG_So15NSManagedObjectCtG
ySo23REMCDCalDAVNotificationCG_ACtG
ySo23REMCDCalDAVNotificationCGADG
ySo23REMCDCalDAVNotificationCG
SaySo23REMCDCalDAVNotificationCG
ySo23REMCDCalDAVNotificationCGG
ySo23REMCDCalDAVNotificationCGG
ySo23REMCDCalDAVNotificationCGG
SaySo21REMCalDAVNotificationCG
ySo17REMAccountStorageCG
SDySSSaySo18REMTemplateStorageCGG
G_So15NSManagedObjectCtG
G_ABtG
GACG
SaySo18REMTemplateStorageCG
SDySSSaySo19REMSmartListStorageCGG
ySo14REMCDSmartListCG_So15NSManagedObjectCtG
ySo14REMCDSmartListCG_ACtG
ySo14REMCDSmartListCGADG
ySo14REMCDSmartListCGG
SaySo19REMSmartListStorageCG
SDySSSaySo18REMReminderStorageCGG
G_So15NSManagedObjectCtG
G_ABtG
GACG
SaySo18REMReminderStorageCG
ySo13REMCDReminderCG_So15NSManagedObjectCtG
ySo13REMCDReminderCG_ACtG
ySo13REMCDReminderCGADG
ySo13REMCDReminderCG
SaySo13REMCDReminderCG
ySo13REMCDReminderCGG
ySo13REMCDReminderCGG
ySo13REMCDReminderCGG
SDySSSaySo14REMListStorageCGG
ySo9REMCDListCG_So15NSManagedObjectCtG
ySo9REMCDListCG_ACtG
ySo9REMCDListCGADG
ySo9REMCDListCGG
SaySo14REMListStorageCG
SDySSSaySo17REMAccountStorageCGG
SaySo17REMAccountStorageCG
So11REMReminderC_
So11REMReminderC_
ySo8NSNumberCG
Sg_ABt
SgSg_ACt
ySo10CKRecordIDCACG
ySo22UNNotificationCategoryCG
So28RDAccountPropertiesObserving_p
_pSg
ySo11REMObjectIDCSo7REMListCG
ySo6BMRuleCG
ySo19NSEntityDescriptionCG
ySo15NSManagedObjectCG
ySo11REMObjectIDCSo14REMListStorageCG
ySo11REMObjectIDCSo17REMAccountStorageCG
SDySSSaySo8REMAlarmCGG
ySo10REMCDAlarmCG_So15NSManagedObjectCtG
ySo10REMCDAlarmCG_ACtG
ySo10REMCDAlarmCGADG
ySo10REMCDAlarmCG
SaySo10REMCDAlarmCG
ySo10REMCDAlarmCGG
ySo10REMCDAlarmCGG
ySo10REMCDAlarmCGG
SaySo8REMAlarmCG
SDySSSaySo13REMAssignmentCGG
ySo15REMCDAssignmentCG_So15NSManagedObjectCtG
ySo15REMCDAssignmentCG_ACtG
ySo15REMCDAssignmentCGADG
ySo15REMCDAssignmentCG
SaySo15REMCDAssignmentCG
ySo15REMCDAssignmentCGG
ySo15REMCDAssignmentCGG
ySo15REMCDAssignmentCGG
SDySSSaySo16REMURLAttachmentCGG
ySo18REMCDURLAttachmentCG_So15NSManagedObjectCtG
ySo18REMCDURLAttachmentCG_ACtG
ySo18REMCDURLAttachmentCGADG
ySo18REMCDURLAttachmentCG
SaySo18REMCDURLAttachmentCG
ySo18REMCDURLAttachmentCGG
ySo18REMCDURLAttachmentCGG
ySo18REMCDURLAttachmentCGG
SaySo16REMURLAttachmentCG
SDySSSaySo18REMImageAttachmentCGG
ySo20REMCDImageAttachmentCG_So15NSManagedObjectCtG
ySo20REMCDImageAttachmentCG_ACtG
ySo20REMCDImageAttachmentCGADG
ySo20REMCDImageAttachmentCG
SaySo20REMCDImageAttachmentCG
ySo20REMCDImageAttachmentCGG
ySo20REMCDImageAttachmentCGG
ySo20REMCDImageAttachmentCGG
SaySo18REMImageAttachmentCG
SDySSSaySo17REMFileAttachmentCGG
ySo19REMCDFileAttachmentCG_So15NSManagedObjectCtG
ySo19REMCDFileAttachmentCG_ACtG
ySo19REMCDFileAttachmentCGADG
ySo19REMCDFileAttachmentCG
ySo19REMCDFileAttachmentCGG
ySo19REMCDFileAttachmentCGG
ySo19REMCDFileAttachmentCGG
SaySo17REMFileAttachmentCG
SDySSSaySo10REMHashtagCGG
ySo12REMCDHashtagCG_So15NSManagedObjectCtG
ySo12REMCDHashtagCG_ACtG
ySo12REMCDHashtagCGADG
ySo12REMCDHashtagCG
SaySo12REMCDHashtagCG
ySo12REMCDHashtagCGG
ySo12REMCDHashtagCGG
ySo12REMCDHashtagCGG
SaySo10REMHashtagCG
SDySSSaySo17REMRecurrenceRuleCGG
ySo19REMCDRecurrenceRuleCG_So15NSManagedObjectCtG
ySo19REMCDRecurrenceRuleCG_ACtG
ySo19REMCDRecurrenceRuleCGADG
ySo19REMCDRecurrenceRuleCG
SaySo19REMCDRecurrenceRuleCG
ySo19REMCDRecurrenceRuleCGG
ySo19REMCDRecurrenceRuleCGG
ySo19REMCDRecurrenceRuleCGG
SaySo17REMRecurrenceRuleCG
So10BMItemTypeC
ySo10BMItemTypeCG
SDySSSaySo27REMAlarmTimeIntervalTriggerCGG
ySo29REMCDAlarmTimeIntervalTriggerCG_So15NSManagedObjectCtG
ySo29REMCDAlarmTimeIntervalTriggerCG_ACtG
ySo29REMCDAlarmTimeIntervalTriggerCGADG
ySo29REMCDAlarmTimeIntervalTriggerCG
SaySo29REMCDAlarmTimeIntervalTriggerCG
ySo29REMCDAlarmTimeIntervalTriggerCGG
ySo29REMCDAlarmTimeIntervalTriggerCGG
ySo29REMCDAlarmTimeIntervalTriggerCGG
SaySo27REMAlarmTimeIntervalTriggerCG
SDySSSaySo19REMAlarmDateTriggerCGG
ySo21REMCDAlarmDateTriggerCG_So15NSManagedObjectCtG
ySo21REMCDAlarmDateTriggerCG_ACtG
ySo21REMCDAlarmDateTriggerCGADG
ySo21REMCDAlarmDateTriggerCG
SaySo21REMCDAlarmDateTriggerCG
ySo21REMCDAlarmDateTriggerCGG
ySo21REMCDAlarmDateTriggerCGG
ySo21REMCDAlarmDateTriggerCGG
SaySo19REMAlarmDateTriggerCG
SDySSSaySo23REMAlarmLocationTriggerCGG
ySo25REMCDAlarmLocationTriggerCG_So15NSManagedObjectCtG
ySo25REMCDAlarmLocationTriggerCG_ACtG
ySo25REMCDAlarmLocationTriggerCGADG
ySo25REMCDAlarmLocationTriggerCG
SaySo25REMCDAlarmLocationTriggerCG
ySo25REMCDAlarmLocationTriggerCGG
ySo25REMCDAlarmLocationTriggerCGG
ySo25REMCDAlarmLocationTriggerCGG
SaySo23REMAlarmLocationTriggerCG
SDySSSaySo22REMAlarmVehicleTriggerCGG
ySo24REMCDAlarmVehicleTriggerCG_So15NSManagedObjectCtG
ySo24REMCDAlarmVehicleTriggerCG_ACtG
ySo24REMCDAlarmVehicleTriggerCGADG
ySo24REMCDAlarmVehicleTriggerCG
SaySo24REMCDAlarmVehicleTriggerCG
ySo24REMCDAlarmVehicleTriggerCGG
ySo24REMCDAlarmVehicleTriggerCGG
ySo24REMCDAlarmVehicleTriggerCGG
SaySo22REMAlarmVehicleTriggerCG
ySo13REMAssignmentCG
ySo10REMHashtagCG
ySo12REMCDHashtagCG
ySo17REMCDHashtagLabelCG
ShySSSgG
ySo11REMObjectIDCSo10REMHashtagCG
ySo12REMCDHashtagCG
ySo12REMCDHashtagCGG
ySo34REMCDSharedToMeReminderPlaceholderCGG
ySo13REMAssignmentCSo11REMReminderCG
ySo17NSManagedObjectIDCSo15REMCDAssignmentCG
ySo11REMObjectIDCSo8NSNumberCG
ShySo11REMObjectIDCG
ySo11REMObjectIDCSo9REMCDListCG
ySo11REMObjectIDCSo9CNContactCG
So6BMItemC
ySo6BMItemCG
ySo8NSStringCG
ySuG
ySo11REMCDShareeCG
_pSg
ySo17NSManagedObjectIDCSo27REMSharedEntitySyncActivityCG
$s7remindd30REMPreferredDefaultListStorageP
So21REMDaemonUserDefaultsC
ySo9REMCDListCGG
So14REMCDSmartListCm
So14REMCDSmartListC
So17NSPersistentStoreC
XDXMT
$s7remindd13RDJSONCodableP
So7NSCoderC
SaySDySSypGG
SaySayypGG
SS3key_yp5valuetSg
SayypG
ySDySSypGG
So31NSCoreDataCoreSpotlightDelegateC
So14CNContactStoreCSg
ytIegr_
_pSgIegg_Sg
SS10identifier_SS11descriptiont
_pSgXw
$s7remindd29RDHashtagLabelUpdaterDelegateP
So34REMCDSharedToMeReminderPlaceholderC
ySo34REMCDSharedToMeReminderPlaceholderCSo13REMCDReminderCSgG
So12REMCDHashtagC
ySo12REMCDHashtagCSSSgG
ySo12REMCDHashtagCSo13REMCDReminderCSgG
ShySo12REMCDHashtagCGSg
ySo17REMCDHashtagLabelCShySo0A0CGSgG
So28REMDAChangedIdentifierResult_p
ySo12REMCDHashtagC
SDySSSaySo12REMCDHashtagCGG
ySo12REMCDHashtagCGG
y_ACy_
yShy
GAGGGGGSo17OS_dispatch_queueCG
y_ADy_AAy_
yShy
GAGGGGGSo17OS_dispatch_queueCG
y_AEy_ABy_
yShy
GAHGGGGSo17OS_dispatch_queueCG
GAPG
y_AAy_
yShy
GAEGGG
y_ABy_
yShy
GAFGGGG
y_ACy_
yShy
GAGGGGGSo17OS_dispatch_queueCG
yShy
GADG
yShy
GAEGG
yShy
GIeggn_
So17OS_dispatch_queueC_
$s7remindd25AlarmTriggerRepresentableP
So8REMAlarmC
_pSg
SDySo11REMObjectIDC
ShySo11REMCDObjectCG
SgXw
SgXwz_Xx
_pIegn_
SDySo11REMObjectIDC
ShySo12REMCDAccountCG
SDySo11REMObjectIDC
Gz_Xx
ShySo11REMObjectIDCGz_Xx
_pIegn_
SDySo11REMObjectIDC
Gz_Xx
ShySo13REMCDReminderCG
_pSg
So11REMObjectIDC3key_yp5valuetSg
So11REMObjectIDC3key_yp5valuet
$s7remindd35RDStaledFileAttachmentCleanupStatesP
$s7remindd43RDStaledFileAttachmentCleanupConfigurationsP
$s7remindd54RDStaledFileAttachmentCleanupThrottleIntervalProvidingP
$s7remindd54RDStaledFileAttachmentCleanupRateReduceFactorProvidingP
$s7remindd43RDStaledFileAttachmentCleanupLimitProvidingP
_pSg
_pSg
yShy
So15REMCDAttachmentC
So13REMAttachmentC
$s7remindd25RDDARequestsQueueDelegateP
_pSgXw
So19REMSmartListStorageC
$s7remindd35RDSharedListNotificationContentTypeP
So12NSOrderedSetCSg
GGSo17OS_dispatch_queueCG
GGSo17OS_dispatch_queueCGAJG
XDXMT
GSo17OS_dispatch_queueCG
y_AAy_
yShy
GAEGG
_pSgG
_pSgG
So12REMCDHashtagCm
So7REMListCSg
SDySo24REMContactRepresentationCSo9CNContactCSgG
So14CNContactStoreC
So12NSDictionaryCSgyc
GSo17OS_dispatch_queueCG
SDySo11REMObjectIDCSo9CNContactCG
$s7remindd28RDApplicationShortcutUpdaterP
$s7remindd19RDXPCEventInterfaceP
ySS_So13OS_xpc_object_ptc
yyKc
SgXw
_ShySo19NSEntityDescriptionCGt
XDXMT
ySo17REMCDHashtagLabelCGG
ySo17REMCDHashtagLabelCSSSgG
So13REMCDReminderC
ySo13REMCDReminderCG
SaySo11REMCDObjectCG
ySo13REMCDReminderCG
ySo13REMCDReminderCGG
ySo13REMCDReminderCGG
ySi3key_SaySo13REMCDReminderCG5valuetG
Si3key_SaySo13REMCDReminderCG5valuet
3key_SaySo13REMCDReminderCG5valuetG
3key_SaySo13REMCDReminderCG5valuet
ySiG
_pSg
So41REMDistributedEvaluationCollectionOptionsC
SiSg
SaySaySdGG
Sg_ABt
SaySdG
yycSg
SgXw
$s7remindd43RDContactInteractionAlarmProducerDataSourceP
$s7remindd47RDContactInteractionAlarmProducerSessionManagerP
_pXo
ySSSgG
ySSSgGG
_So24REMContactRepresentationCtG
So23REMOrderedIdentifierMapCSg
_pSgXw
So20NSNotificationCenterC
_pSgXw
$s7remindd42RDICCloudExtraneousAlarmsCollectorDelegateP
$s7remindd38RDICCloudExtraneousAlarmsSyncPerformerP
$s7remindd48RDICCloudExtraneousAlarmsCollectorConfigurationsP
$s7remindd47RDICCloudExtraneousAlarmsCollectorStatesStorageP
So17OS_dispatch_queueCGG
So17OS_dispatch_queueCGGAFG
SgXw
SgXwz_Xx
ySo21REMCDAlarmDateTriggerC
ySo21REMCDAlarmDateTriggerCG
ySo21REMCDAlarmDateTriggerCSo0A0CSgG
So17OS_dispatch_groupCSg
ShySSG
So17OS_dispatch_groupCSgz_Xx
So11REMReminderC
So39_REMNSPersistentHistoryTrackingAbstractC
So37RDStoreControllerManagedObjectContextCIeyBy_
So37RDStoreControllerManagedObjectContextCIegg_
5today_t
$s7remindd29CDAuxiliaryReminderChangeInfoP
So18REMReminderStorageC
ySS_So8NSNumberCtG
ySSSo8NSObjectCG
ShySo15REMCDAssignmentCG
ySo13REMAssignmentC_G
So13REMAssignmentCm
$s7remindd29RDTimelineEngineProcessorTypeP
ySay
GSo17OS_dispatch_queueCG
ySay
GSo17OS_dispatch_queueCGSay
GGGSo17OS_dispatch_queueCG
GGGSo17OS_dispatch_queueCGSay
GGGSo17OS_dispatch_queueCGSay
GGGSo17OS_dispatch_queueCGSay
_pGG
yShy
GSo17OS_dispatch_queueCGAEG
yShy
GSo17OS_dispatch_queueCG
yShy
GSo17OS_dispatch_queueCGAFGG
yShy
GSo17OS_dispatch_queueCGAGGGytG
yShy
GSo17OS_dispatch_queueCGAHGGytG
yShy
GSo17OS_dispatch_queueCGAIGGytG
_pGG
SgXw
ySay
GGGSo17OS_dispatch_queueCGSay
_pGG
yAqIGG
ySay
SgXw
GIeggn_
SaySo17REMRecurrenceRuleCGSg
5lower_AA5uppert
So21REMCDRootEntityObjectC
_pGIegg_
ySo20UNNotificationActionCSgG
ySo8NSNumberC_SStG
SDySo8NSNumberCSSG
ySSG
ySS_SdtG
ySS5title_SS4listtG
So17RDStoreControllerCSg
So17REMAccountStorageC
SDySS
SDySo11REMObjectIDCSuG
SSSg_SSt
SgXw
SgXwz_Xx
So24OS_dispatch_source_timer_p
ShySo11REMObjectIDCG11reminderIDs_
13showCompletedt
So13REMAssignmentC
ySo15REMCDAssignmentCG
Sayy
ySo18REMMigrationResultC
_pGcG
ySo18REMMigrationResultC
_pGSg
So19REMCDMigrationStateC
ySo19REMCDMigrationStateCG
So22NSManagedObjectContextCSo19REMCDMigrationStateCSgIggg_
SaySo11REMObjectIDCGSg
ySo18REMMigrationResultC
_pGIegg_
SbSd
_pSgIegyyg_
3key_
5valuetSg
3key_
5valuet
ySo19REMCDMigrationStateCGG
$s7remindd50RDSharedListActivityNotificationEngineUserDefaultsP
ShySo11REMCDShareeCGSg
yShy
GABy_
y_AKy_AHGGAFGGGGGSo17OS_dispatch_queueCG
yShy
y_AJy_AFGGADGGGG
yShy
GAAy_
y_AJy_AGGGAEGGGGG
yShy
GACy_
y_AAy_
y_AKy_AIGGAGGGGGGSo17OS_dispatch_queueCG
yShy
GADy_
y_ABy_
y_ALy_AJGGAHGGGGGSo17OS_dispatch_queueCG
GAUG
y_ABy_
yShy
GGGAEG
yShy
y_AAy_
yShy
y_ACy_
yShy
GGGAFGG
y_ADy_
yShy
GGGAGGGG
yShy
yShy
yShy
G_GSo17OS_dispatch_queueCG
yShy
G_GSo17OS_dispatch_queueCGG
SgXw
So17OS_dispatch_queueC_
GIeggn_
SS3key_
_p5valuet
So21UNNotificationContentC
So24UNUserNotificationCenterCSgIegg_
Ieg_Sg
So17NSManagedObjectIDC06objectC0_
4datat
SDySSSo13REMCDReminderCG
yShy
GAFGGG
yShy
GAGGGGSo17OS_dispatch_queueCG
GIeggn_
So11NLTokenizerCSg
$s7remindd21RDKeybagStateProviderP
$s7remindd24RDKeyBagEventsControllerP
So17REMCDHashtagLabelCSg
So11REMObjectIDC04listB0_
13showCompletedt
_pSgXw
So27REMUserDefaultsObserveToken_pSg
So8REMStoreC
SgXw
So7CKShareCSg
ySSSgG
ySSSo14NSSecureCoding_pG
yS2SG
ySSSay
ySo9REMCDListCGGG
ySSSay
ySo14REMCDSmartListCGGG
ySSSay
G_So15NSManagedObjectCt
G_So15NSManagedObjectCtG
ySSSay
ySo11REMCDObjectCGGG
ySo11REMCDObjectCG_So15NSManagedObjectCt
ySo11REMCDObjectCG_So15NSManagedObjectCtG
So17REMManualOrderingC_Say
ySo17REMManualOrderingC_Say
yyyKcG
ySo11REMObjectIDCSDySSypGG
ySSSay
ySo12REMCDAccountCGGG
ySo12REMCDAccountCG_So15NSManagedObjectCt
ySo12REMCDAccountCG_So15NSManagedObjectCtG
ySSSo8NSStringCG
_So24REMContactRepresentationCt
_So24REMContactRepresentationCtG
_ypt
15dataSourceAlarm_
8fireDatetG
ySo17REMCDAlarmTriggerCG
ySsG
ySo11REMObjectIDCSay
ySo12REMCDAccountCG
ySo12REMCDAccountCGG
ySdG
ySo11REMObjectIDCSay
ySSSaySSGG
ySSSdG
ySo14REMCDSmartListCG
ySo14REMCDSmartListCGG
ySo11REMObjectIDC
ySo24REMCDAlarmVehicleTriggerCG
ySSSay
G_So15NSManagedObjectCt
G_So15NSManagedObjectCtG
So13REMAttachmentC_Say
ySo13REMAttachmentC_Say
_So8CLRegionCt
_So8CLRegionCtG
ySo25REMCDAlarmLocationTriggerCG
ySSSo8CLRegionCG
ySSSo8NSNumberCG
Si8fileSize_Sb7dedupedt
ySi8fileSize_Sb7dedupedtG
SS8cacheKey_
9accountIDAB010attachmentD0t
ySS8cacheKey_
9accountIDAC010attachmentD0tG
ySS8cacheKey_
9accountIDAD010attachmentD0t
ySS8cacheKey_
9accountIDAC010attachmentD0t
ShyABGG
ySSSay
ySo11REMCDShareeCGGG
ySo11REMCDShareeCG_So15NSManagedObjectCt
ySo11REMCDShareeCG_So15NSManagedObjectCtG
So9REMShareeC_Say
ySo9REMShareeC_Say
ySSSay
ySo23REMCDCalDAVNotificationCGGG
ySo23REMCDCalDAVNotificationCG_So15NSManagedObjectCt
ySo23REMCDCalDAVNotificationCG_So15NSManagedObjectCtG
So21REMCalDAVNotificationC_Say
ySo21REMCalDAVNotificationC_Say
ySSSay
G_So15NSManagedObjectCt
G_So15NSManagedObjectCtG
So18REMTemplateStorageC_Say
ySo18REMTemplateStorageC_Say
ySo14REMCDSmartListCG_So15NSManagedObjectCt
ySo14REMCDSmartListCG_So15NSManagedObjectCtG
So19REMSmartListStorageC_Say
ySo19REMSmartListStorageC_Say
ySSSay
G_So15NSManagedObjectCt
G_So15NSManagedObjectCtG
So18REMReminderStorageC_Say
ySo18REMReminderStorageC_Say
ySSSay
ySo13REMCDReminderCGGG
ySo13REMCDReminderCG_So15NSManagedObjectCt
ySo13REMCDReminderCG_So15NSManagedObjectCtG
So18REMReminderStorageC_Say
ySo18REMReminderStorageC_Say
ySo9REMCDListCG_So15NSManagedObjectCt
ySo9REMCDListCG_So15NSManagedObjectCtG
ySSSg_SStG
So13REMCDReminderC_Su_Sutt
ySo13REMCDReminderC_Su_SuttG
ySo17NSManagedObjectIDC
ySo11REMObjectIDCSiG
So14REMListStorageC_Say
ySo14REMListStorageC_Say
ySo11REMObjectIDCSuG
SSSg_
_ABtt
ySSSg_
_ACttG
So17REMAccountStorageC_Say
ySo17REMAccountStorageC_Say
ySSSo19REMCDReplicaManagerCG
ySo11REMReminderC_
ySSSiG
yytG
ySo19REMCDMigrationStateCG
ySSySo22NSManagedObjectContextCKcG
SaySo17NSManagedObjectIDCGG
So17NSManagedObjectIDCG
ySSSo24NSPersistentHistoryTokenCG
SayABGG
_AAt
ySaySdGG
SS_Sdt
ySo19REMCDReplicaManagerCG
ySSSo31REMReplicaManagerSerializedDataCG
ySSSay
So28RDAccountPropertiesObserving_pG
ySo21REMCDAlarmDateTriggerCG
ySo13REMCDReminderCSo12REMCDAccountCSgG
So13REMCDReminderCG
SaySo21REMCDAlarmDateTriggerCGG
ySb_Shy
yySb_Shy
GtcG
ySo17NSManagedObjectIDCG
ySSypG
ySSSo13REMCDReminderCG
ySo13REMCDReminderCGG
ySo11REMObjectIDCSaySo13REMCDReminderCGG
ySSSay
ySo10REMCDAlarmCGGG
ySo10REMCDAlarmCG_So15NSManagedObjectCt
ySo10REMCDAlarmCG_So15NSManagedObjectCtG
So8REMAlarmC_Say
ySo8REMAlarmC_Say
ySSSay
ySo15REMCDAssignmentCGGG
ySo15REMCDAssignmentCG_So15NSManagedObjectCt
ySo15REMCDAssignmentCG_So15NSManagedObjectCtG
So13REMAssignmentC_Say
ySo13REMAssignmentC_Say
ySSSay
ySo18REMCDURLAttachmentCGGG
ySo18REMCDURLAttachmentCG_So15NSManagedObjectCt
ySo18REMCDURLAttachmentCG_So15NSManagedObjectCtG
So16REMURLAttachmentC_Say
ySo16REMURLAttachmentC_Say
ySSSay
ySo20REMCDImageAttachmentCGGG
ySo20REMCDImageAttachmentCG_So15NSManagedObjectCt
ySo20REMCDImageAttachmentCG_So15NSManagedObjectCtG
So18REMImageAttachmentC_Say
ySo18REMImageAttachmentC_Say
ySSSay
ySo19REMCDFileAttachmentCGGG
ySo19REMCDFileAttachmentCG_So15NSManagedObjectCt
ySo19REMCDFileAttachmentCG_So15NSManagedObjectCtG
So17REMFileAttachmentC_Say
ySo17REMFileAttachmentC_Say
ySSSay
ySo12REMCDHashtagCGGG
ySo12REMCDHashtagCG_So15NSManagedObjectCt
ySo12REMCDHashtagCG_So15NSManagedObjectCtG
So10REMHashtagC_Say
ySo10REMHashtagC_Say
ySSSay
ySo19REMCDRecurrenceRuleCGGG
ySo19REMCDRecurrenceRuleCG_So15NSManagedObjectCt
ySo19REMCDRecurrenceRuleCG_So15NSManagedObjectCtG
So17REMRecurrenceRuleC_Say
ySo17REMRecurrenceRuleC_Say
ySo19REMCDFileAttachmentCG
ySo19REMCDFileAttachmentCGG
ySo19REMCDFileAttachmentCG
ySSSay
ySo29REMCDAlarmTimeIntervalTriggerCGGG
ySo29REMCDAlarmTimeIntervalTriggerCG_So15NSManagedObjectCt
ySo29REMCDAlarmTimeIntervalTriggerCG_So15NSManagedObjectCtG
So27REMAlarmTimeIntervalTriggerC_Say
ySo27REMAlarmTimeIntervalTriggerC_Say
ySSSay
ySo21REMCDAlarmDateTriggerCGGG
ySo21REMCDAlarmDateTriggerCG_So15NSManagedObjectCt
ySo21REMCDAlarmDateTriggerCG_So15NSManagedObjectCtG
So19REMAlarmDateTriggerC_Say
ySo19REMAlarmDateTriggerC_Say
ySSSay
ySo25REMCDAlarmLocationTriggerCGGG
ySo25REMCDAlarmLocationTriggerCG_So15NSManagedObjectCt
ySo25REMCDAlarmLocationTriggerCG_So15NSManagedObjectCtG
So23REMAlarmLocationTriggerC_Say
ySo23REMAlarmLocationTriggerC_Say
ySSSay
ySo24REMCDAlarmVehicleTriggerCGGG
ySo24REMCDAlarmVehicleTriggerCG_So15NSManagedObjectCt
ySo24REMCDAlarmVehicleTriggerCG_So15NSManagedObjectCtG
So22REMAlarmVehicleTriggerC_Say
ySo22REMAlarmVehicleTriggerC_Say
ySayypGG
ySo18REMMigrationResultC
_pGc
ySo18REMMigrationResultC
_pGcG
ySo17REMCDHashtagLabelC_
ySo17REMCDHashtagLabelCG
ySSSaySo12REMCDHashtagCGG
ySo12REMCDHashtagCG
ShySSGG
ySSSo17REMCDHashtagLabelCG
ySSSay
ySo11REMObjectIDCSgG
ySo10REMCDAlarmCG
So11REMObjectIDC_SDySSSo8NSNumberCGt
ySo11REMObjectIDC_SDySSSo8NSNumberCGtG
ySo15REMCDAttachmentCG
ySo15REMCDAttachmentCGG
ySo15REMCDAttachmentCG
ySb_Shy
yySb_Shy
GtcG
ySb_ShySo8NSNumberCGtc
yySb_ShySo8NSNumberCGtcG
ySo7REMListCSDySo13REMAssignmentCSo11REMReminderCGG
ySo11REMObjectIDCypG
ySo15REMCDAssignmentCG
ySo15REMCDAssignmentCGG
So11REMObjectIDC_ypt
ySo11REMObjectIDCSo10REMAccountCG
ySo14REMCDSmartListC
_Say
SgSaySo14REMCDSmartListCGG
SgSaySo9REMCDListCGG
ySiSaySo13REMCDReminderCGG
SaySo13REMCDReminderCGG
ySaySiGG
SaySiG
ySSSaySS5title_SS4listtGG
SS5title_SS4listt
ySSShySo11REMObjectIDCGG
ySSShy
SaySo13REMCDReminderCGG
ySo11REMObjectIDCSgSo13REMCDReminderCG
ySSShy
SDySSShy
yS2dG
ySSSDyS2dGG
ySo9REMShareeC_GG
ySo9REMShareeC_G
Si_Sit
ySi_SitG
yS2iG
ySo9REMShareeC_GG
ySo9REMShareeC_G
ySo24REMContactRepresentationCSo9CNContactCSgG
ySay
ySo8NSNumberCSSG
ySo8NSObjectCyXlG
ySuG
ySo9REMCDListCG
ySSSo11REMCDShareeCG
SS_ypt
So11REMObjectIDCSg_SSt
ySo11REMObjectIDCSg_SStG
ySaySo8NSObjectCGG
SaySo8NSObjectCG
So24REMContactRepresentationC_
ySo24REMContactRepresentationC_
ySo17NSManagedObjectIDC06objectC0_
4datatG
_ShySo19NSEntityDescriptionCGtG
ySpy
Gz_SpySo8NSObjectCSgGSgzSpyypGSgztc
ySSSgG
SaySSGIegr_
SSIego_
SDyS2SGIegr_
SaySo11REMObjectIDCSgGIegr_
$s7remindd10StringTypeP
So11NSPredicateCSg
So10REMHashtagC
So25NSUbiquitousKeyValueStoreC
So8NSNumberCSg
So34REMTemplatePublicLinkConfigurationC
GGSg
So17REMRecurrenceRuleC
So19REMCDRecurrenceRuleC
SaySo8NSNumberCG
So15REMCDAttachmentCm
$s7remindd38RDStalePinnedListsEventHandlerDelegateP
_pSgXw
So17OS_dispatch_queueCGG
So17OS_dispatch_queueCGGAFG
SgXw
SgXwz_Xx
XDXMT
yS2SGSg
SgXw
SDySo11REMObjectIDC
_pSgIeggg_
So12REMChangeSetC
_pSgIeggg_
So22REMChangeTrackingStateCSg
_pSgIeggg_
So12NSDictionaryCSo7NSErrorCSgIeyByy_
So12REMChangeSetCSo7NSErrorCSgIeyByy_
So22REMChangeTrackingStateCSgSo7NSErrorCSgIeyByy_
$s7remindd88RDStaleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandlerDelegateP
_pSgXw
SgXw
SgXwz_Xx
XDXMT
So8NSBundleC
SDySSySo22NSManagedObjectContextCKcG
SDySSSo8NSObjectCGSg
So22NSManagedObjectContextCyt
_pIegnrzo_
SDySo11REMObjectIDCShySSGG
SayyyKcG
SDySS
SDySo11REMObjectIDCSo15NSManagedObjectCG
SDySo11REMObjectIDCSDySSypGG
$s7remindd21CDAuxiliaryChangeInfoP
$s7remindd29RDTimeAlarmProducerDataSourceP
$s7remindd16RDFireDateSourceP
SgXw
$s7remindd19RDXPCDaemonProtocolP
SgXw
SgXw
SgXwz_Xx
_pSg
$s7remindd25RDCoreSuggestionsHandlingP
So37SGSuggestionsServiceRemindersProtocol_p
ySo13REMCDReminderCG24adjustedContentPredicate_
010completionD0t
SaySo11REMObjectIDCG11reminderIDs_
Sg19completedBeforeDatet
6filter_So11REMObjectIDC07accountC0
Sg19completedBeforeDatet
SaySo11REMObjectIDCG7listIDs_
Sg19completedBeforeDatet
ShySo13REMCDReminderCGSg
GIegr_
SaySo11REMObjectIDCG_
SgAEt
SaySo11REMObjectIDCG_
6filter_So11REMObjectIDC07accountC0
13showCompletedt
13showCompleted_
5todayt
So11REMObjectIDC08reminderB0_
13showCompletedt
SaySo11REMObjectIDCG_
Sg8dueStartAE0C3Endt
SaySo11REMObjectIDCG_
19completionPredicate
09concealedD0t
SaySSSgG
So22NSManagedObjectContextCSg
So14REMListStorageC
SaySo11REMObjectIDCG_Sbt
ySo13REMCDReminderCG_Sbt
So11REMObjectIDC04listB0_Sb17includingSubtaskst
So11REMObjectIDC04listB0_Sb17includingSubtasksSu22creationDateWithinDayst
So11REMObjectIDC04listB0_t
13showCompleted_t
ShySo11REMObjectIDCG11reminderIDs_t
SaySSG_So11REMObjectIDCSgt
So11REMObjectIDC_
18concealedPredicatet
SaySSG13ckIdentifiers_t
Sb14onlyIncomplete_t
SS13canonicalName_Sb14onlyIncompletet
Sg3key_SaySo14REMCDSmartListCG5valuet
Sg3key_SaySo9REMCDListCG5valuet
So17RDStoreControllerC
So9REMShareeCSg
_So24REMContactRepresentationCtGSg
So37RDStoreControllerManagedObjectContextCSay
_So24REMContactRepresentationCtG
_pIggrzo_
So37RDStoreControllerManagedObjectContextC
_pSg
ySo13REMCDReminderCG_G
_pSg
15dataSourceAlarm_
8fireDatetGSg
So37RDStoreControllerManagedObjectContextCSay
15dataSourceAlarm_
8fireDatetG
_pIggrzo_
So17REMCDAlarmTriggerC
ySSG
ySo17REMCDAlarmTriggerCG_G
So12REMCDAccountCSg
So12REMCDAccountC
So10REMCDAlarmCSg
So9REMCDListCSg
So9REMCDListC
yypG
ytSg
So37RDStoreControllerManagedObjectContextCyt
_pIggrzo_
ySo12REMCDAccountCG
ySo12REMCDAccountCG_G
ySo14REMCDSmartListCG
ySo14REMCDSmartListCG_G
ySo9REMCDListCG
ySo9REMCDListCG_G
tGSg
So37RDStoreControllerManagedObjectContextCSay
_pIggrzo_
ySo24REMCDAlarmVehicleTriggerCG
ySo24REMCDAlarmVehicleTriggerCG_G
ySo24REMCDAlarmVehicleTriggerCGG
_So8CLRegionCtGSg
So37RDStoreControllerManagedObjectContextCSay
_So8CLRegionCtG
_pIggrzo_
_pSg
ySo25REMCDAlarmLocationTriggerCG
ySo25REMCDAlarmLocationTriggerCG_G
ySo25REMCDAlarmLocationTriggerCGG
So37RDStoreControllerManagedObjectContextCSb
_pIggrzo_
So19REMFetchResultTokenCSg
So37RDStoreControllerManagedObjectContextCSo19REMFetchResultTokenC
_pIggrzo_
So37RDStoreControllerManagedObjectContextCSay
_pIggrzo_
So37RDStoreControllerManagedObjectContextCSay
_pIggrzo_
SDySSSo31REMReplicaManagerSerializedDataCGSg
So37RDStoreControllerManagedObjectContextCSDySSSo31REMReplicaManagerSerializedDataCG
_pIggrzo_
_SDySo11REMObjectIDCypGtSg
So37RDStoreControllerManagedObjectContextC
_SDySo11REMObjectIDCypGt
_pIggrzo_
So24REMStoreInvocationResultCSg
So37RDStoreControllerManagedObjectContextCSo24REMStoreInvocationResultC
_pIggrzo_
So14REMFetchResultCSg
So37RDStoreControllerManagedObjectContextCSo14REMFetchResultC
_pIggrzo_
ySo21REMCDAlarmDateTriggerCGG
So37RDStoreControllerManagedObjectContextCSaySo11REMObjectIDCG
_pIggrzo_
SaySSGSg
So37RDStoreControllerManagedObjectContextCSaySSG
_pIggrzo_
ySo12REMCDHashtagCG_G
SaySo15REMHashtagLabelCGSg
So37RDStoreControllerManagedObjectContextCSaySo15REMHashtagLabelCG
_pIggrzo_
ySo34REMCDSharedToMeReminderPlaceholderCG
ySo34REMCDSharedToMeReminderPlaceholderCG_G
SS_So20RDHasCKDatabaseScope_So8CKRecordCXctSg
So37RDStoreControllerManagedObjectContextCSS_So20RDHasCKDatabaseScope_So8CKRecordCXct
_pIggrzo_
SDyS2SGSgSg
So37RDStoreControllerManagedObjectContextCSDyS2SGSg
_pIggrzo_
SaySo11REMObjectIDC_SDySSSo8NSNumberCGtGSg
So37RDStoreControllerManagedObjectContextCSaySo11REMObjectIDC_SDySSSo8NSNumberCGtG
_pIggrzo_
SaySo17REMAccountStorageCGSg
So37RDStoreControllerManagedObjectContextCSaySo17REMAccountStorageCG
_pIggrzo_
So37RDStoreControllerManagedObjectContextCSay
_pIggrzo_
XDXMT
ySo11REMObjectIDC
ySDy
SDySSShy
GGGGG
ySo11REMObjectIDC
ySDy
SDySSShy
GGGGGIegg_
_SDySSShy
GGtG
ySS_Shy
ySDy
SDySSShy
GGGG
ySay
ySay
ySo9REMShareeCG
ySo9REMShareeC_GG
SDySSSbG
XDXMT
So19REMCDRecurrenceRuleCm
ySo11REMCDObjectCGG
$s7remindd15CDIngestableKeyP
24CDIngestableCoreDataType
36CDIngestableOrderableRelationshipKey
27CDIngestableRelationshipKey
40CDIngestableRelationshipOrderingValueKey
20CDIngestableValueKey
So21REMCalDAVNotificationC
So23REMCDCalDAVNotificationC
$s7remindd9FireValueP
$s7remindd39CollectAndCoalescedOutputWithInputCountP
$s7remindd33AccountTypeHostProvidingFireValueP
$s7remindd33AccountObjectIDProvidingFireValueP
So19NSEntityDescriptionC
_So17OS_os_transaction_pSgtG
_So17OS_os_transaction_pSgtGSo0A15_dispatch_queueCG
y_AAy_
_So17OS_os_transaction_pSgtGSo0A15_dispatch_queueCGShy
y_ABy_AAy_
_So17OS_os_transaction_pSgtGSo0A15_dispatch_queueCGShy
SSz_Xx
_So17OS_os_transaction_pSgt
So17OS_os_transaction_pSgShy
GIegngo_
ShySo17REMAccountStorageCG
ySo17REMAccountStorageC_G
ShySo19NSEntityDescriptionCG
ySo19NSEntityDescriptionC_G
SbShy
GIegyg_
GSgXw
yxGSgXwz_
_SHRzlXX
ShySo17NSManagedObjectIDCG
SayShy
ACGG
ADGG
_So17OS_os_transaction_pSgtG
AEGG
_So17OS_os_transaction_pSgtGSo0A15_dispatch_queueCG
y_AAy_
AEGG
_So17OS_os_transaction_pSgtGSo0A15_dispatch_queueCGShy
So17OS_os_transaction_pSgShy
GIegngo_
yShy
GAFG
GSgXw
yxGSgXwz_
_SHRzlXX
SbShy
GIegyg_
ySo8NSNumberCGSgXw
yxGSgXwz_So8NSNumberC_SHRzlXX
SbShySo8NSNumberCGIegyg_
SgXw
_ShySo19NSEntityDescriptionCGtSg
So18REMAccountTypeHostC
So12EKEventStoreC
So18NSValueTransformerC
$s7remindd27REMSharedActivityJournalingP
SaySo14CKRecordZoneIDCG
So13NSFileManagerC
_pSg
ySo14CKRecordZoneIDCSo0aB0C_G
$s7remindd43RDUserInteractionSessionManagerUserDefaultsP
So24REMContactRepresentationC_
yyXlXpG
SaySayyXlGG
$s7remindd32RDAccountInitializerUserDefaultsP
$s7remindd28RDAccountInitializerObserverP
7remindd32RDAccountInitializerUserDefaults_p
yytGG
ytIegn_
So10REMAccountC
So14NSNotificationCIeyBy_
$s7remindd37RDCentralizedTaskAfterDelaySchedulingP
$s7remindd43RDCentralizedTaskAfterDelaySchedulerFactoryP
13SchedulerType
13SchedulerType
QzSg
$s7remindd22RDHousekeepingActivityP
$s7remindd38RDHousekeepingRateReducerConfigurationP
$s7remindd42RDHousekeepingXPCActivityCriteriaProvidingP
$s7remindd33RDCentralizedTaskSchedulerFactoryP
So18REMResolutionTokenCSg
yShy
GSo17OS_dispatch_queueCG
yxGSgXw
yxGSgXwz_x_
RzlXX
Si_SNy
$s7remindd24RDAttachmentFileProviderP
So16REMURLAttachmentC
So17REMFileAttachmentC
So18REMImageAttachmentC
$s7remindd34RDManualSortIDCacheContextDelegateP
So7NSCacheCySo11REMObjectIDC
_pSgXw
$s7remindd34RDManualSortIDCacheReadOnlyContextP
$s7remindd38RDManualSortIDCacheReadAndWriteContextP
$s7remindd14RDThrottleableP
$s7remindd18RDThrottlingPolicyP
$s7remindd12RDThrottlingP
So9REMShareeC
So11REMCDShareeC
yXlSgXw
yxcSg
yx_G
So13NSMergePolicyC
SaySo15NSManagedObjectCG
$s7remindd35REMAccountsListDataViewUserDefaultsP
ySo21NSPropertyDescriptionC_G
_So19REMFetchResultTokenCtSg
3key_Si5valuetSg
3key_Say
G5valuet
3key_Si5valuet
Se_SEp
So19REMFetchResultTokenC
$s7remindd36RDApplicationShortcutEngineInterfaceP
_pSg
_pSg
So17REMManualOrderingC
ySSG
ySSG
3key_Say
G5valuetSg
3key_Say
G5valuet
3key_AA5valuetSg
3key_AA5valuet
3key_
5valuetSg
3key_
5valuet
3key_SayAAG5valuetSg
3key_SayAAG5valuet
SaySiGSg
So24REMTemplateConfigurationC
$s7remindd26REMAttachmentRepresentableP
So18REMCDURLAttachmentC
So20REMCDImageAttachmentC
_pSgXw
So15NSXPCConnectionC
$s7remindd26RDClientConnectionDelegateP
So12REMXPCClient_p
So23REMXPCIndexingPerformer_pSgSo7NSErrorCSgIeyByy_
So28REMXPCSyncInterfacePerformer_pSgSo7NSErrorCSgIeyByy_
So20REMXPCStorePerformer_pSgSo7NSErrorCSgIeyByy_
So20REMXPCDebugPerformer_pSgSo7NSErrorCSgIeyByy_
So29REMXPCChangeTrackingPerformer_pSgSo7NSErrorCSgIeyByy_
ypXp
$s7remindd36RDICCloudSchemaCatchUpSyncSchedulingP
$s7remindd42RDICCloudSchemaCatchUpSyncSchedulerFactoryP
$s7remindd35RDICCloudSchemaCatchUpSyncPerformerP
So46ICCloudSchemaCatchUpSyncSchedulingStateStorage_p
_pSgXw
yxGSgXw
yxGSgXwz_x_
RzlXX
$s7remindd33RDApplicationShortcutListProviderP
$s7remindd41RDApplicationShortcutListProviderDelegateP
$ss12IdentifiableP
ShySo6BMItemCG
So19BMBehaviorRetrieverCSg
So7NSTimerCSg
SDySSSDyS2dGG
ySSSo6BMRuleCG
ySSGSg
So27BMTaskSpecificEventProvider_p
ySd_SdtG
Sd7support_Sd10confidenceSS11descriptiont
Sd7support_Sd10confidenceSS11descriptiontG
Sd7support_Sd10confidenceSS11descriptiontG
Sd7support_Sd10confidenceSS11descriptiontG
ySuSd7support_Sd10confidenceSS11descriptiontG
ySSSd7support_Sd10confidenceSS11descriptiontG
Sd7support_Sd10confidenceSS11descriptiontG
So12BMMiningTaskC
XDXMT
_Sd7supportSd10confidenceSS11descriptiont
_Sd7supportSd10confidenceSS11descriptiont
_Sd7supportSd10confidenceSS11descriptiont
Sb_Sd7supportSd10confidenceSS11descriptiont
Su_Sd7supportSd10confidenceSS11descriptiont
SS_Sd7supportSd10confidenceSS11descriptiont
_Sd7supportSd10confidenceSS11descriptiont
SDyS2dG
$s7remindd32RDVehicleAlarmProducerDataSourceP
SgXw
SgXwz_Xx
Iegg_
$s7remindd17REMCDObjectFieldsP
$s7remindd32REMCDObjectResolutionTokenFieldsP
$s7remindd17REMCRSerializableP
So13CKRecordValue_pSg
yShy
GcSg
SSSg
_pIegozo_
yShy
So14REMSaveRequestCSg
$s7remindd20RDReminderDataCopierP
_pSg
$s7remindd29RDExtraneousAlarmUserDefaultsP
So35ICCloudConfigurationExtraneousAlarm_p
3key_SaySo21REMCDAlarmDateTriggerCG5valuetSg
3key_SaySo21REMCDAlarmDateTriggerCG5valuet
SgXw
SgXw
yShy
GAFGGSo17OS_dispatch_queueCG
yShy
GAGGGSo17OS_dispatch_queueCGAMG
SayAAGG
SS3key_
5valuet
$s7remindd53RDDynamicSignificantTimeNotificationEngineEventSetterP
$s7remindd10CDFetchingP
SaySo28REMNullableObjectIDProviding_pG
So28REMNullableObjectIDProviding_p
ySnySiGG
3key_SaySo17NSManagedObjectIDCG5valuetSg
3key_SaySo17NSManagedObjectIDCG5valuet
$s7remindd25RDLocationManagerDelegateP
$s7remindd21RDLocationManagerTypeP
_pSgXw
So17CLLocationManagerCSg
So8CLRegionC
$s7remindd24RDBabysitCrashDetectableP
$s7remindd14RDBabysittableP
$s7remindd12RDBabysitterP
$s7remindd38RDIntentsRelevantShortcutsHandlingTypeP
$s7remindd28RDAccountPropertiesObservingP
$s7remindd20ObservingAccountInfoP
So28RDAccountPropertiesObserving_pG
GSo17OS_dispatch_queueCG
XDXMT
$s7remindd22RDExecutionDateStorageP
$s7remindd35RDExecutionDatePossessingExecutableP
$s7remindd28RDUserNotificationPresentingP
$s7remindd32RDUserNotificationCenterDelegateP
_pSgXw
So24UNUserNotificationCenterC
SaySo14UNNotificationCGIegg_
SaySo14UNNotificationCG
So28UNMutableNotificationContentC
So22UNNotificationSettingsC
XDXMT
Sg14remindersCount_
13showCompletedSay
G0A0t
yS2SGSg_
So11REMObjectIDC013accountObjectB0_t
So19REMCDReplicaManagerC
SaySo19REMCDReplicaManagerCG
So31REMReplicaManagerSerializedDataC
SaySo13REMCDReminderCGG
So11REMObjectIDC_Sb21includePinnedSublistst
So11REMObjectIDC_SaySSGt
SS_So11REMObjectIDCSgt
$s7remindd25RDAccountHostnameProviderP
So13DATransactionCSg
So27DADREMShareResponseDelegateC
SDySSSay
18representativeDate_Say
G4dayst
9startDate_Say
G4dayst
$s7remindd12RDExecutableP
SaySSG10accountIDs_t
SS11calendarURL_SS9accountIDy
_pSgc10completiont
SDySo10CKRecordIDCABG
So20ICCloudConfigurationC
So7NSErrorCSgIeyByy_
_pSgIegyg_
AASo7NSErrorCSgIeyByyy_
_pSgIegyyg_
So14INPersonHandleCSg
SaySo14INPersonHandleCGSg
So28REMTemplateContentAttributesCSgSo7NSErrorCSgIeyByy_
So8NSStringCSgSo7NSErrorCSgIeyByyy_
So25ICCollaborationControllerC
So15CKShareMetadataC
SbSSSg
_pSgIegygg_
_pSgSbSSSgIeggyg_
So7CKShareCSgSo7NSErrorCSgIeyByy_
SgXw
SgXwz_Xx
So7CKShareCSg
_pSgIeggg_
Gz_Xx
ySo11REMObjectIDCSo31REMReplicaManagerSerializedDataC_G
So24REMStoreInvocationResultCSgSo7NSErrorCSgIeyByy_
_pSg
_pSg
$s7remindd24RDSyncPollerUserDefaultsP
$s7remindd25RDSyncPollerConfigurationP
SgXw
$s7remindd35REMHashtagLabelDataViewUserDefaultsP
$s7remindd32RDTemplateOperationQueueDelegateP
$s7remindd19RDTemplateOperationP
_pSgXw
_pSg
SgXw
SgXwz_Xx
So29DABabysitterRegistrationTokenCSgz_Xx
XDXMT
GSo17OS_dispatch_queueCG
SayxG
SDyxSayxGG
SDyxq_G
SDyq_SdG
Shyq_G
$s7remindd41RDICCloudConfigurationUpdaterUserDefaultsP
$s7remindd38RDICCloudConfigurationUpdateSchedulingP
$s7remindd44RDICCloudConfigurationUpdateSchedulerFactoryP
So32ICCloudConfigurationDownloadable_p
yxGSgXw
yxGSgXwz_x_
RzlXX
$s7remindd33RDPublicCloudDatabaseControllableP
Sbyc
So11CKContainerCSg
xXMT
_pGIegn_
XDXMT
_pGIegg_
SaySsG
$s7remindd33RDLocationAlarmProducerDataSourceP
$s7remindd16RDCLRegionSourceP
7remindd20ObservingAccountInfo_p
ySo6NSDataCc
ySo7NSErrorCc
ySo6NSDataC
So6NSDataCIeyBy_
So7NSErrorCIeyBy_
ySo6NSDataC
GSo17OS_dispatch_queueCG
So6NSDataCIegg_
So7NSErrorCIegg_
XDXMT
SgXw
$s7remindd19RDPublicCloudObjectP
$s7remindd30RDManualSortIDHashKeyProvidingP
$s7remindd27RDCentralizedTaskSchedulingP
$s7remindd22RDAnyActivitySchedulerP
SgXw
SgXwz_Xx
So13OS_xpc_object_p
Iegy_
_pIegyzo_
ySo21REMTemplatePublicLinkC
_pGIegg_
XDXMT
ySo8NSStringCSo12NSDictionaryCG
SDyS2SGSg
SDyS2SGSgz_Xx
SaySo30NSPersistentHistoryTransactionCG
So24NSPersistentHistoryTokenCSg
So21DADBuddyStateObserverCSgz_Xx
So21DADBuddyStateObserverCXDXMT
GIegn_
So21DADBuddyStateObserverC
GIegy_
So28DADSystemAvailabilityCheckerCXDXMT
So17RDStoreControllerCSgXwz_Xx
XDXMT
So19NSMutableOrderedSetCSgSg
SaySo12NSDictionaryCG
SaySDySS
9startDate_Say
G4dayst
XDXMT
$s7remindd16RDDaemonProtocolP
yShy
yAdEGG
$s7remindd26RDImageDeduplicationStatesP
$s7remindd42RDImageDeduplicationActivityConfigurationsP
$s7remindd53RDImageDeduplicationActivityThrottleIntervalProvidingP
$s7remindd53RDImageDeduplicationActivityRateReduceFactorProvidingP
$s7remindd42RDImageDeduplicationActivityLimitProvidingP
SaySi8fileSize_Sb7dedupedtG
12attachmentID_So09REMObjectB0C07accountB0t
9sourceURL_
12attachmentIDSo09REMObjectD0C07accountD0t
_p5error_
12attachmentIDSo09REMObjectC0C07accountC0t
_p5error_
9sourceURL
12attachmentIDSo09REMObjectE0C07accountE0t
So19REMCDFileAttachmentC10attachment_So11REMObjectIDC07accountE0t
SS8cacheKey_
9accountIDAB010attachmentD0tSg
SS8cacheKey_
9accountIDAB010attachmentD0
_p5errort
ySS8cacheKey_
9accountIDAC010attachmentD0t
SaySS8cacheKey_
9accountIDAB010attachmentD0tG
SS8cacheKey_t
ShySo11REMCDShareeCG
ShySo23REMCDCalDAVNotificationCG
So11REMCDShareeCm
So9REMShareeCm
So23REMCDCalDAVNotificationCm
So21REMCalDAVNotificationCm
So9REMCDListCm
So14REMListStorageCm
So10REMHashtagCm
So8REMAlarmCm
So13REMAttachmentCm
So17REMRecurrenceRuleCm
So12REMCDAccountCm
So17REMAccountStorageCm
So13REMCDReminderCm
So18REMReminderStorageCm
So17REMCDHashtagLabelCm
SSSgm
So17NSManagedObjectIDCm
ySS_ySo22NSManagedObjectContextCKctG
ShySSGSg
So22NSManagedObjectContextC
_pIeggzo_
S2bSaySSG
_pSgIegyygg_
SuSgIegy_
SuSg
SuSgz_Xx
$s7remindd47RDSharedInlineTagAutoConvertHandler_BatchRunnerP
SaySo16NSSortDescriptorCG
So17REMCDAlarmTriggerCm
SDySSSiG
SDySSSo8NSNumberCG
$s7remindd49RDSuggestedAttributesAutoTrainerPersistentStorageP
SgXw
XDXMT
$s7remindd11RDInvocableP
$s7remindd26RDStoreControllerInvocableP
$s7remindd27AnyRDSwiftInvocableProtocolP
y_SiG
4type_So11REMObjectIDC07accountC0t
4type_So11REMObjectIDC06objectC0t
So11REMObjectIDC011groupObjectB0_Sb21includePinnedSublistst
ySo8NSStringC_G
$s7remindd30RDClientAccessLevelTruthSourceP
$ss25ExpressibleByArrayLiteralP
$ss10SetAlgebraP
$ss9OptionSetP
SDySSSDySSypGG
ySSSo18REMResolutionTokenCSgG
SaySo11REMObjectIDCGz_Xx
SgXw
ySo11REMObjectIDCSo015NSManagedObjectB0CG
So17NSManagedObjectIDCG
$s7remindd16RDAlarmProducingP
$s7remindd16RDAlarmConsumingP
$s7remindd23RDAlarmProducerDelegateP
9operation_SSSg9sessionId
Sg0B9BeginTimet
SgXw
So8REMAlarmC_SSSgt
SiSg14completedCount_
13showCompletedSay
G6groupst
So32DADREMUserNotificationPresenting_p
So20DADREMLocalDBWatcherCSgXw
So7DADMainCSg
q_Sg
_pSgIegng_
So11CKContainerC
ySo13CKRequestInfoCSgcSg
$s15InvernessClient9InvocableP
$s13SwiftProtobuf14ExtensionFieldP
Say8BaseType
$s13SwiftProtobuf17AnyExtensionFieldP
8RawValueSYQz
$s13SwiftProtobuf16SelectiveVisitorP
ySRy
ySbG
ySfG
_pSg
_pXmTSg
$s13SwiftProtobuf19_ProtoNameProvidingP
$s13SwiftProtobuf12ExtensionMapP
$s13SwiftProtobuf7MessageP
$s13SwiftProtobuf26_MessageImplementationBaseP
_pXpSg
_pSg
Si3key_
_p5valuetSg
SDySi
$s13SwiftProtobuf7DecoderP
$s13SwiftProtobuf19AnyMessageExtensionP
_pXp
_pSg
_A13At
_pXmT
ySS_
_pXptG
$s13SwiftProtobuf9FieldTypeP
8BaseType
$s13SwiftProtobuf10MapKeyTypeP
$s13SwiftProtobuf12MapValueTypeP
$s13SwiftProtobuf7VisitorP
$s13SwiftProtobuf18_CustomJSONCodableP
$s13SwiftProtobuf4EnumP
$s13SwiftProtobuf17ExtensibleMessageP
SDySi
ySi_
SDySiSay
_pGG
ySiSay
_pGG
_pSg
$ss30ExpressibleByDictionaryLiteralP
SaySRy
SDySi
5proto_t
5proto_AA4jsont
5proto_SayAAG7aliasest
SDySS
_pXpG
_pSg
_pSg
_rawValue
_os_unfair_lock_opaque
RawValue
_ObjectiveCType
_nsError
location
length
Code
_ErrorType
RawValue
AllCases
unknownFields
_storage
archivePath
credential
embeddedTestData
dsID
baseURL
hostname
mmeAuthToken
partition
success
error
timeElapsed
isObserver
listsMigrated
remindersMigrated
message
retryCount
user
UNRECOGNIZED
none
dryRun
disableSharing
saveOriginalJson
userInitiated
noCleanup
defined
isTerminated
nextInvocationInSeconds
invocationCount
failureCount
options
result
invocable
_source
_disableCache
_state
_result
_log
_options
_userInitiated
_simulatedError
_nextStep
_logs
assignedDate
ckAssigneeIdentifier
ckOriginatorIdentifier
owningReminderIdentifier
reminder
status
AllCases
RawValue
templateObjectID
publicCloudDatabaseController
isUnitTestMode
badgeEmblem
color
name
publicLinkExpirationDate
publicLinkURLUUID
savedReminders
sortingStyle
AllCases
RawValue
accountID
rem_accountObjectID
accountDescription
babysitterOperationRefreshFromLastConsumed
babysitterOperationRefreshFromLastConsumedOnLaunch
analyticsCrashDetected
babysitTarget
queue
userNotificationCenter
storeControllerNotificationCenter
daemonController
storeController
manualTestRun
storeControllerObservationToken
started
cloudKitAccountsDidChangeSubscriptions
currentUserShareParticipantIDsOverrideByListID
windowSize
thresholdForNewWindow
averageInterval
numOfSamples
measurements
lastFire
queue
handler
debouncingPolicy
loadFactor
label
isEnabled
pendingWorkItem
pendingValues
pendingCompletionBlocks
coalescedUpdates
debouncer
databaseScope
subscriptionOwnerUserRecordName
interval
debounceFirstFire
constant
loadFunction
dateTriggers
locationTriggers
timeIntervalTriggers
vehicleTriggers
dateTimeInterval
address
contactLabel
latitude
locationUID
longitude
mapKitHandle
proximity
radius
referenceFrameString
routing
title
timeInterval
event
setPersonIDAuthor
storeController
delegate
personIDSaltObserver
pendingSystemAvailable
bootstrapCancellables
storeControllerEventCancellables
systemAvailabilityCheckerBlockingQueue
appleAccountUtilities
notSupported
missingKey
invalidData
RawValue
storeController
storeContainerToken
notificationCenter
locationManager
xpcDaemon
storeControllerByContainerURL
manualHashtagLabelUpdater
accountID
uuidForChangeTracking
ckIdentifier
erroredAttachments
byUUID
byList
beforeLastAccessed
operationType
xpcListener
xpcListenerUserInteractive
xpcDaemon
listenerQueue
clientConnectionDidClosePublisher
clientConnections
clientConnectionDidClosePassthroughSubject
applicationShortcutService
applicationShortcutServiceQueue
alarm
cachedNonce
Performer
Performer
storeController
storeObjectContext
batchSizePerQuery
metrics
reminder
field
onlySpecificCanonicalName
persistentStoreLookup
error
analytics
activitiesProcessed
distinctRemindersHandled
hashtagsCreated
startingTimestamp
endingTimestamp
title
notes
AllCases
invalidActivityType
couldNotAcquireREMObjectID
coreDataFetchError
hashtagIngestionError
couldNotExtractDocumentFromField
attribute
name
objectUUID
queue
storeController
discretionaryCloudKitThrottler
cloudKitThrottler
dataAccessThrottler
dataAccessRequestsWriter
storeProvider
clientIdentity
clientConnection
fetchPublicCloudObjectResultMock
success
failure
objectID
creationDate
alarmTriggers
dueDateComponents
flagged
hashtags
notesDocumentData
priority
recurrenceRules
startDateComponents
title
titleDocumentData
contactHandlesData
acknowledgedDate
alarmUID
dueDateResolutionTokenAsNonce
originalAlarmUID
reminder
triggerID
AllCases
RawValue
accountID
alarmID
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
objectID
timeInterval
dateComponents
structuredLocation
proximity
event
AllCases
RawValue
remindd
reminddWithoutPID
xctest
templatePublicLinkTTL
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
accountID
parentAccountID
objectID
minimumSupportedVersion
configuration
name
color
badgeEmblem
showingLargeAttachments
sortingStyle
unsavedManualOrdering
AllCases
RawValue
daemonUserDefaults
l_preferredDefaultListObjectIDUrl
l_preferredDefaultListID
lock
badgeEmblem
color
filterData
mostRecentTargetTemplateIdentifier
name
parentAccount
parentList
showingLargeAttachments
smartListType
sortingStyle
pinnedDate
AllCases
RawValue
isLaunching
managedObjectContext
persistentStore
dicts
arrays
Performer
$__lazy_storage_$_contactStore
shouldStart
notEligible
ingestionFailure
missingReminder
missingTitle
other
processingQueue
storeController
daemonController
timeGroupingStrategy
delegate
started
cloudAccountsDidChangeCancellable
hashtagInsertEventCancellables
highPrioritySubscriptionTransactionRegistrar
lowPrioritySubscriptionTransactionRegistrar
babysitterOperationRefreshFromLastConsumed
babysitterOperationRefreshFromLastConsumedOnLaunch
analyticsCrashDetected
babysitTarget
changeTrackingClientName
accountID
rem_accountObjectID
accountDescription
objectIdentifier
hashtagName
accountID
reminderID
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
objectID
trigger
acknowledgedDate
alarmUID
originalAlarmUID
AllCases
RawValue
persistenceHost
cache
accountManualSortIDsOption
allSignedInAccounts
hostAccountOnly
xpcActivityAllowBattery
xpcActivityIsCPUIntensive
xpcActivityIsDiskIntensive
rateReducerConfiguration
identifier
executionDateStorage
babysitter
storeController
configurations
states
executable
name
perRunDeleteLimit
backingStorage
backingConfiguration
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
accountID
reminderID
objectID
AllCases
RawValue
identifier
dispatchQueue
delegate
requestChannelReader
pendingRequests
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
accountID
parentAccountID
parentListID
objectID
minimumSupportedVersion
smartListType
sortingStyle
pinnedDate
manualOrdering
name
color
badgeEmblem
filterData
showingLargeAttachments
AllCases
RawValue
fetchRange
none
nilDate
nonNilDate
managedObjectContext
copyRemindersInTemplateToREMList
copyRemindersInPublicTemplateToREMList
copyRemindersInREMListToTemplate
copyRemindersInCustomSmartListToTemplate
batchDeleteCachedPublicTemplates
RawValue
configuration
handler
cancellables
babysitTarget
babysitterOperationDidLaunch
babysitterOperationStoreDidChange
analyticsCrashDetected
storeController
scheduler
initialScheduledTriggerDelay
debounceTimeout
launch
storeDidChange
RawValue
creationDate
name
reminder
sharedToMeReminderCKIdentifier
type
AllCases
RawValue
queue
configurationSource
cancellables
cachedList
cachedEditingSessionID
storePerformer
cachedMLModels
cachedContacts
contactStore
cloudTrainingOverridesSource
localTrainingOverridesSource
cloudHarvestingOverridesSource
localHarvestingOverridesSource
embeddingResult
sentenceEmbeddingModelResult
intentionalWordModelResult
coreBehaviorModelResult
coreSuggestionHandler
queue
started
alarmHandlers
eventInterface
token
name
body
uuid
userVisible
date
Performer
badgeEmblem
color
creationDate
lastModifiedDate
mostRecentPublicLinkUpdateRequestDate
name
parentAccount
publicLinkConfigurationData
publicLinkCreationDate
publicLinkExpirationDate
publicLinkLastModifiedDate
publicLinkURLUUID
sortingStyle
sourceListIDURL
AllCases
RawValue
storeController
clientIdentity
salt
timezone
options
embeddingsURL
reminderTitleEmbeddings
accounts
systemLanguage
systemTimeZoneName
systemTimeZoneOffset
isShared
isGroup
title
titleFuzzedEmbeddings
reminders
embeddings
revision
language
creationDate
creationDayOfWeek
completionDayOfWeek
dueDayOfWeek
displayDayOfWeek
titleSaltedHash
sentence2Vec
universalGrammar
filteredStopWords
displayDate
completionDate
alarmDates
isFlagged
priority
locationAlarmIdentifier
locationAlarmProximity
recurrenceDescription
attachmentUTIs
hasRemindMeWhenMessaging
isParentTask
isSubtask
hasUserActivity
date
type
lists
eventHandler
notificationName
notifyToken
significantTimeChangeNotification
RawValue
dataSource
delegate
queue
userInteractionSessionManager
shouldNotifyOfInteractionWithPeopleNotifyToken
shouldNotifyOfInteractionWithPeople
Performer
transactionRegistrar
keyBagStateChangeCancellable
operationType
templateObjectID
storeController
scheduler
syncPerformer
configurations
statesStorage
notificationCenter
delegate
extraneousAlarmsPendingSyncUpDeleteSubscription
debouncerOSTransaction
clientIdentity
unknown
complete
titleMayHaveDirtyHashtag
notesMayHaveDirtyHashtag
cascadeHashtagLabelApproval
AllCases
RawValue
notificationCenter
queue
beforeFirstUnlockNotificationEngine
daemonController
clientIdentity
doNothing
notificationCenterOnly
showBanner
Performer
storeController
Performer
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
accountID
listID
parentReminderID
subtaskIDsToUndelete
hashtagIDsToUndelete
siriFoundInAppsUserConfirmation
objectID
daCalendarItemUniqueIdentifier
externalIdentifier
externalModificationTag
daSyncToken
daPushKey
minimumSupportedVersion
titleDocumentData
titleDocument
completed
completionDate
priority
flagged
creationDate
lastModifiedDate
recurrenceRules
startDateComponents
dueDateComponents
timeZone
allDay
notesDocumentData
notesDocument
attachments
alarms
assignments
hashtags
contactHandles
icsDisplayOrder
icsUrl
importedICSData
userActivity
siriFoundInAppsData
lastBannerPresentationDate
primaryLocaleInferredFromLastUsedKeyboard
AllCases
RawValue
processingQueue
storeController
processors
debounceTimeInSeconds
publisher
transactionRegistrar
listIdentifier
displayDateDate
displayDateIsAllDay
dueDateComponents
recurrenceRules
journalEntries
reminders
loggingName
handler
processingQueue
processor
separatorInConcatenatedContainerIDsWithLocalContainerIDPrefix
separatorInConcatenatedElementIDsWithLocalElementIDPrefix
Performer
list
title
count
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
listIDsMergeableOrdering
listsDADisplayOrderChanged
lists
listIDsToUndelete
smartListIDsToUndelete
objectID
type
name
listIDsMergeableOrderingData
pinnedListsManualOrdering
templatesManualOrdering
markedForRemoval
personID
personIDSalt
didChooseToMigrate
didChooseToMigrateLocally
didFinishMigration
persistenceCloudSchemaVersion
inactive
externalIdentifier
externalModificationTag
daSyncToken
daPushKey
daConstraintsDescriptionPath
daAllowsCalendarAddDeleteModify
daSupportsSharedCalendars
daWasMigrated
minimumSupportedVersion
debugSyncDisabled
AllCases
RawValue
queue
notificationCenter
Performer
accountID
reminderID
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
assigneeID
originatorID
objectID
assignedDate
status
ckAssigneeIdentifier
ckOriginatorIdentifier
owningReminderIdentifier
AllCases
RawValue
storeController
accountID
state
completionHandlers
lock
migrationResult
invocationCount
failureCount
isTerminated
stateRestored
dismissed
disableCache
waitingForReachability
wasUserInitiated
idle
active
completed
failed
RawValue
__debug_fetchedJournalEntries
__debug_processedJournalEntries
__debug_staleObjectIDs
scheduler
storeController
userNotificationCenter
userDefaults
cancellables
appliedEngineConfiguration
_started
journalUpdatesSubscriptionTransactionRegistrar
accountSignInOrOutSubscriptionTransactionRegistrar
activityDate
activityType
authorCKIdentifier
reminder
consumeOnStart
delayConsumeOnStart
consumeFromStoreChanges
storeChangesCoalescingPeriod
debugMode
queue
$__lazy_storage_$_wordTokenizer
lockStatePublisher
lockState
hasUnlockedSinceBootPublisher
hasUnlockedSinceBoot
lockStateSubject
hasUnlockedSinceBootSubject
unknown
unlocked
locked
locking
disabled
unlockInProgress
inGracePeriod
inAssertDelay
inBioUnlock
clientConnection
journalEntries
reminders
badgeEmblem
color
effectiveMinimumSupportedAppVersion
identifier
lastModifiedDate
minimumSupportedAppVersion
mostRecentPublicLinkUpdateRequestDate
name
publicLinkURLUUID
publicLinkConfigurationData
publicLinkCreationDate
publicLinkLastModifiedDate
publicLinkExpirationDate
resolutionTokenMap_v3_JSONData
sortingStyle
AllCases
RawValue
operationType
applicationShortcutLists
delegate
queue
storeControllerNotificationCenter
storeControllerObservationToken
preferredDefaultListIDObservationToken
store
isStarted
badgeEmblem
color
isGroup
lastUserAccessDate
mostRecentTargetTemplateIdentifier
name
parentAccount
parentList
reminderIDsMergeableOrdering
reminderIDsMergeableOrderingAsset
reminderIDs
reminderIDsAsset
sortingStyle
pinnedDate
AllCases
RawValue
alarmIDs
allDay
attachmentIDs
assignmentIDs
completed
completionDate
contactHandles
creationDate
dueDate
flagged
hashtagIDs
icsUrl
importedICSData
lastModifiedDate
list
notesDocument
notesDocumentAsset
parentReminder
priority
recurrenceRuleIDs
startDate
timeZone
titleDocument
titleDocumentAsset
userActivity
AllCases
RawValue
predicate
accountID
reminderID
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
objectID
creationDate
name
type
AllCases
RawValue
keyValueStore
changedKeys
reason
valueChanged
initialSync
quotaViolation
primaryAccountChanged
metadata
parentSavedReminderIdentifier
template
AllCases
RawValue
templateObjectID
templatePublicLinkConfiguration
remindersCountLimit
templatePublicContentPreviewTTL
queue
name
xpcEventStream
xpcEventStreamToken
eventHandler
rawValue
operationType
templateObjectID
targetListObjectID
store
limitPerSave
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
dayOfTheWeek
weekNumber
accountID
reminderID
objectID
recurrenceEnd
frequency
interval
firstDayOfTheWeek
daysOfTheWeek
daysOfTheMonth
daysOfTheYear
weeksOfTheYear
monthsOfTheYear
setPositions
AllCases
RawValue
reminder
AllCases
RawValue
height
width
fileName
fileSize
metadata
metadataAsset
lock
alreadyPosted
Performer
delegate
storeController
scheduler
debounceInterval
notificationCenter
cancellables
osTransactionForHandlingEvent
osTransactionForDebouncingEvent
isHandlingEvent
isDebouncingEvent
queue
storeControllerNotificationCenter
storeControllerNotificationCenterToken
widgetRefresh
implementation
delegate
storeController
scheduler
debounceInterval
notificationCenter
cancellables
osTransactionForHandlingEvent
osTransactionForDebouncingEvent
isHandlingEvent
isDebouncingEvent
metadata
modelName
bundle
allModelVersionIdentifiers
postMigrationDataUpdateByModelVersionIdentifier
storeURL
crashDetectedAnalyticsEventName
applyCRDTsWithoutMerging
noSideEffectChanges
clientIdentity
differentialPrivacyRecorder
changedKeys
persistentStoreLookup
managedObjectContext
mode
syncToCloudKit
upsertBlocks
establishRelationshipBlocks
mutateRelationshipOrderingBlocks
afterSaveActionBlocks
ingestionContextsByAccountIdentifier
accountIdentifier
persistentStore
fetchedObjectsMap
insertedObjectsMap
cdChangedValuesMap
queue
timeEventStream
dataSource
beforeFirstUnlockNotificationEngine
started
delegate
daemon
storeController
debugPerformer
syncInterfacePerformerFactory
dataAccessRequestsWriter
indexingPerformer
contactInteractionWriter
coreSuggestionsHandler
service
generic_fetchByObjectIDs
generic_fetchByPredicate
generic_fetchByList
generic_fetchByParentReminderIDs
generic_fetchByObjectIDsDue
export_fetchByList
remindersList_fetchAll
remindersList_stableSorting_fetchAll
remindersList_fetchParentsOnly
remindersList_fetchSubtasks
smartListScheduled
smartListFlagged
smartListToday
smartListToday_fetchOnlyCompleted
smartListAllReminders
customSmartList_fetchAll
searchResults
searchResults_fetchOnlyCompleted
tagged
tagged_fetchAll
template_fetchByList
dataaccess_fetchByExternalIdentifiers
dataaccess_fetchByDACalendarItemUniqueIdentifiers
tipKit_fetchCompletedRemindersInList
eventKitBridging_fetchRemindersInLists
eventKitBridging_fetchIncompleteRemindersInLists
eventKitBridging_fetchCompletedRemindersInLists
withDateAlarmsCountExceeding
siriSearch
analytics_fetchAllRemindersInAccount
analytics_fetchAllIncompleteRemindersInAccount
analytics_fetchAllFlaggedRemindersInAccount
analytics_fetchRemindersWithSubtasksInAccount
debug_stats_fetchRemindersInAccount
batchDeleteCompleted
customSmartList_batchDeleteCompleted
reminders_batchDeleteCompleted
inlineHashtagAutoConvertEngine_havingHashtagPrefixCharacterByCKIdentifiers
autoConvertSharedInlineTagsMigrator_sharedRemindersWithTitleOrNotesHashtags
autoConvertSharedInlineTags_allHavingHashtagInTitleOrNotes
smartListScheduled_fetchOnlyCompleted
smartListFlagged_fetchAll
smartListToday_filterNearby
smartListAllReminders_fetchOnlyCompleted
smartListSiriFoundInApps
smartListCompleted
accountsList_allIncompleteReminders
tagged_fetchUntagged
spotlightIndexing_isEligible
complication
tipKit_fetchAllUncompletedReminders
tipKit_fetchAllCompletedReminders
alarmEngine_containingContactHandles
todayNotificationEngine_todayNotification
performance_dynamicSignificantTimeNotificationEngine
suggestedAttributes_all
suggestedAttributes_hasRecurrenceRules
debug_65046250_fetchPhantomReminders
timelineEngine_allDueReminders
incompleteOrCompletedAfter
completedBeforeOrOn
incompleteOrCompletedObjectIDs
incomplete
completed
notSpecified
markedForDeletion
excludeConcealed
includeConcealed
excludeConcealedExceptUnsupported
excludeConcealedExceptUnsupportedButPhantomOk
isUnsupported
list
parentReminder
alarmStorage
attachments
recurrenceRules
assignments
hashtags
AllCases
RawValue
Performer
iCloud
local
other
RawValue
queue
daemonController
storeController
debug_currentUserSharee
clientIdentity
fetchByPublicLinkURLUUID
badgeEmblem
color
encodedSavedReminders
name
publicLinkURLUUID
sortingStyle
AllCases
RawValue
Performer
publicLinkURLUUID
publicCloudDatabaseController
isUnitTestMode
endDate
frequency
interval
occurrenceCount
setPositions
daysOfTheMonth
daysOfTheWeek
daysOfTheYear
firstDayOfTheWeek
monthsOfTheYear
weeksOfTheYear
reminder
AllCases
RawValue
moveAcrossAccount
nonExistentValue
nonExistentRelationship
AllCases
RawValue
accountID
listID
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
objectID
uuidString
hostURL
externalIdentifier
externalModificationTag
daSyncToken
daPushKey
AllCases
RawValue
didCleanUpManualSortHintOnMarkingForDeletion
defaultPublicLinkURLHostname
storeController
label
lock
observers
debouncer
uuid
token
observeOption
queue
handler
entityDescription
qualityOfService
accountInfo
accountTypeHost
objectID
output
inputCount
allowedEntityNames
allREMCDObjects
Output
store
Performer
userDefaults
Performer
latitude
longitude
radius
locationUID
AllCases
RawValue
store
storeController
appleAccountUtilities
userDefaults
handler
queue
activities
processQueue
activityExecutionQueue
storeController
backgroundSchedulerFactory
backgroundScheduler
label
clientIdentity
accountsDidDisableCancellable
reduceFactor
delay
minimumDelay
allowBattery
isCPUIntensive
isDiskIntensive
xpcActivity
SchedulerType
Performer
latitude
longitude
radius
locationUID
pastDue
allDay
morning
afternoon
tonight
unknown
AllCases
RawValue
file
image
metadata
fileSize
width
height
accountManualSortIDByAccountIDCache
elementManualSortIDByReminderIDCache
delegate
accountID
listID
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
objectID
displayName
firstName
middleName
lastName
namePrefix
nameSuffix
nickname
address
status
accessLevel
AllCases
RawValue
name
counter
osTransaction
lock
identifier
queue
target
eventHandler
reader
operationType
templateObjectID
targetListObjectID
store
limitPerSave
Performer
modelObject
listAndGroup
smartList
reminderCounts
token
queue
listProvider
shortcutUpdater
accountID
notificationCenter
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
objectID
modifiedDate
AllCases
RawValue
dayOfTheWeek
weekNumber
daysOfTheMonth
daysOfTheWeek
daysOfTheYear
endDateInterval
firstDayOfTheWeek
frequency
interval
monthsOfTheYear
setPositions
weeksOfTheYear
templateObjectID
sourceListObjectID
accountObjectID
templateConfiguration
store
limitPerSave
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
accountID
reminderID
objectID
fileSize
fileURL
isTemporaryFileURL
width
height
metadata
AllCases
RawValue
delegate
clientIdentity
xpcDaemon
isUserInteractive
xpcConnection
notificationSubscriptionQueue
keepAliveTransaction
cancellables
queue
backgroundScheduler
backgroundSchedulerFactory
schedulingStateStorage
performer
scheduledActivityTimeout
storeController
xpcActivity
SchedulerType
allowedOperationsCount
throttleInterval
identifier
queue
throttleResetDate
currentIntervalAllowedOperationsCount
baseUrl
behaviorRetriever
trained
confidenceThreshold
timer
feedbackVersion
feedbackForRules
rules
trainingDataFrame
intentWords
metrics
minedRuleCount
filteredOutRulesCount
minRelativeSupport
completed
version
contact
listId
dueDayOfWeek
alarmLocation
titleIntent
isWeekend
flagged
priority
dayOfWeek
hourOfDay
listID
queue
dataSource
delegate
connectedToken
disconnectedToken
started
minimumSupportedVersion
AllCases
RawValue
unitTest_didReceiveAccountsDidDisable
cancellables
storeController
remindersBatchSize
accountDataMoverSaveRequestAuthorString
store
statistics
excludeSharedToMeLists
potentialDenylistItemIDs
_useSourceObjectIDAsExternalID
_copyListSharingStatus
currentSaveRequest
listsChanged
remindersChanged
queue
extraneousAlarmCloudConfiguration
storeController
userDefaults
isUnitTest
_isDisabled
babysitterOperationDeleteExtraneousAlarms
babysitTarget
analyticsCrashDetected
accountsDidDisableCancellable
xpcActivity
clientIdentity
storeController
storeControllerNotificationCenter
scheduler
debounceInterval
notificationCenter
accountsAndRemindersChangesSubscription
manualSortHintChangesSubscription
clientIdentity
topLevelSavedReminderIdentifiers
subtaskIdentifiersByTopLevelSavedReminderIdentifier
savedReminderByIdentifier
savedURLAttachmentsBySavedReminderIdentifier
topLevelSavedReminderIdentifierBySubtaskIdentifier
RawValue
queue
storeController
xpcEventSetter
currentStatus
Performer
queue
delegate
q_locationManager
type
name
originalHashtagID
value
range
names
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
accountID
listID
objectID
parentReminderID
minimumSupportedVersion
titleDocumentData
titleDocument
priority
flagged
creationDate
recurrenceRules
startDateComponents
dueDateComponents
timeZone
allDay
notesDocumentData
notesDocument
attachments
alarms
hashtags
contactHandles
AllCases
RawValue
listID
displayName
dateRange
lock
l_observers
l_cancellables
executable
throttleInterval
eTag
hintDataExcludingRemindersInLocalAccountAsAsset
hintDataExcludingRemindersInLocalAccountAsBytes
hintDataIncludingRemindersInPrimaryAccountOnlyAsAsset
hintDataIncludingRemindersInPrimaryAccountOnlyAsBytes
lastAccessed
listID
listType
serializationVersion
AllCases
RawValue
queue
reminderAlarmDelegate
beforeFirstUnlockReminderDelegate
assignmentNotificationDelegate
sharedListUpdateNotificationDelegate
notificationCenter
ckContainerID
localUUID
accountTypeHost
persistenceHost
displayDate
priority
creationDate
title
manualWithSortHint
manual
hostAccount
primaryCloudKitAccount
accountID
bundleID
serializedData
cacheQueue
cacheContext
accountChangesSubscription
Performer
generic_fetchTopLevelListsAndGroupsInAccount
generic_fetchListsAndGroupsInAccount
generic_fetchListsAndSublistsInAccount
generic_fetchListsInGroup
generic_fetchByObjectIDs
generic_fetchByManagedObjectIDs
smartList_fetchAllSharedListsInAccount
template_fetchListsWithMostRecentTargetTemplateIdentifierByCurrentUser
dataAccess_fetchListsInAccount
dataAccess_fetchByExternalIdentifier
dataAccess_fetchByObjectIDsIncludingSpecialContainer
changeTracking_fetchByObjectIDsIncludingConcealed
userActivity_fetchByExternalIdentifier
analytics_fetchSharedListInAnyStateInAccount
analytics_fetchAllGroupsInAccount
siriSearch
generic
generic_verifyDefaultList
generic_fallbackDefaultLists
ui_applicationShortcuts
ui_settingsDefaultList
pinned_isPinnedByCurrentUser
pinned_isSharedToMe
pinned_hasPinnedDate
template_isSharedAndHasMostRecentTargetTemplateIdentifierByCurrentUser
template_isSharedToMe
eventKitBridging_fetchLists
spotlightIndexing_isEligible
debug_65046250_fetchPhantomLists
tipKit_fetchLists
tipKit_fetchListsWithCustomBadge
batchDelete_fetchAll
Performer
modelObject
list
smartList
xpcDaemon
clientIdentity
storeContainerToken
storeObjectContext
Performer
year
updateContentsOfAllFolders
acceptCalDAVShare
rejectCalDAVShare
storeController
clientIdentity
storeProvider
dataAccessRequestsWriter
contactInteractionWriter
coreSuggestionsHandler
publicCloudDatabaseController
shareRecordIDToRootRecordID
shareRecordIDToRootRecordIDLock
queue
userDefaults
pollBlock
eventStream
configuration
Performer
labels
token
Performer
publicCloudDatabaseController
delegate
storeController
daemonController
scheduler
clientConnectionDidClosePublisher
cancellables
osTransaction
isHandlingOperationQueueItems
babysitterOperationHandleIncompleteOperationQueueItems
babysitterOperationHandleIncompleteOperationQueueItemsOnLaunch
analyticsCrashDetected
babysitTarget
missingContainerForTopLevelElement
missingLastModifiedForContainer
topLevelElements
secondaryLevelElementsByTopLevelElement
containerByTopLevelElement
lastModifiedByContainer
containers
downloadableCloudConfiguration
queue
userDefaults
backgroundScheduler
backgroundSchedulerFactory
delay
xpcActivity
SchedulerType
isInternetReachable
transactionRegistrar
$__lazy_storage_$_ckContainerWithPublicDatabase
queue
delegate
locationManager
dataSource
uuid
account
callbackQueue
successHandler
errorHandler
propertyName
currentValueSubject
cancellables
objectID
type
initialNilValue
invalid
unexpectedNilValue
accountAbsent
hashKeyForManualSortID
cdAccount
Performer
identifier
name
color
AllCases
RawValue
identifier
shouldDefer
asyncHandler
l_pendingCriteria
lock
SuggestedAttributesAutoTrainer
ICCloudConfigurationUpdater
ICCloudSchemaCatchUpSyncController
RDHousekeepingActivityScheduler
RDExtranesousAlarmCleaner
UnitTests
complete
pendingWork
noWork
error
intervalInfo
priority
allowBattery
requireScreenSleep
shouldWakeDevice
expectedDuration
isCPUIntensive
isMemoryIntensive
isDiskIntensive
mayRebootDevice
requireSignificantUserInactivity
requireNetworkConnectivity
requireInexpensiveNetworkConnectivity
powerNap
communicatesWithPairedDevice
desiredMotionState
requiredProtectionClasses
AllCases
RawValue
interval
repeating
delay
gracePeriod
maintenance
utility
stationary
walking
running
cycling
automotive
automotiveMoving
automotiveStationary
classA
classB
classC
templateObjectID
templatePublicLinkConfiguration
publicCloudDatabaseController
isUnitTestMode
remindersCountLimit
templatePublicLinkTTL
cacheKey
storeController
significantTimeNotificationStream
Performer
fileAsset
fileName
lastModifiedDate
metadata
metadataAsset
savedReminder
type
AllCases
RawValue
attachmentTypeRawValue
fileName
identifier
metadata
AllCases
RawValue
Performer
orderingByListID
listsWithOrdering
orderingChanged
needsSortReminders
data
$__lazy_storage_$_orderedSet
Performer
xpcDaemon
xpcClientConnectionListener
disabledAccountsEventHandler
alarmEngine
todayEngine
timelineEngine
assignmentNotificationEngine
hashtagLabelUpdater
stalePinnedListsEventHandler
staleSharedToMeListMostRecentTargetTemplateIdentifierByCurrentUserEventHandler
templateOperationQueue
applicationShortcutEngine
coreSuggestionController
suggestedAttributesAutoTrainer
widgetRefresh
housekeepingActivityScheduler
cloudConfigurationUpdater
cloudSchemaCatchUpSyncController
syncActivityNotificationEngine
sharedInlineTagAutoConvertEngine
extraneousAlarmsCollector
extraneousAlarmCleaner
manualSortHintUpdater
xpcActivityAllowBattery
xpcActivityIsCPUIntensive
xpcActivityIsDiskIntensive
rateReducerConfiguration
identifier
executionDateStorage
babysitter
storeController
configurations
states
executable
name
perRunDeleteLimit
globalAnalytics
analytics
logPrefix
attachment
accountID
attachmentIdentifier
sha512Sum
fileSize
sourceURL
destinationURL
fileWasCopied
successes
failures
startTime
managedObjectContext
backingStorage
nullIdentifier
nullFileName
sha512SumFailed
copyFailed
removeFailed
errors
invalidCacheKey
attachmentWasNotMigrated
purgeFailed
backingConfiguration
CDIngestableStorageType
CDIngestableCoreDataType
CDIngestableValueKey
CDIngestableRelationshipKey
CDIngestableOrderableRelationshipKey
CDIngestableRelationshipOrderingValueKey
reminderIDsMergeableOrdering
remindersICSDisplayOrderChanged
reminders
accountID
childListIDsToUndelete
childSmartListIDsToUndelete
parentAccountID
parentListID
reminderIDsToUndelete
sharedOwnerID
objectID
externalIdentifier
externalModificationTag
daSyncToken
daPushKey
daExternalIdentificationTag
daBulkRequests
daDisplayOrder
daIsEventOnlyContainer
daIsReadOnly
daIsImmutable
daIsNotificationsCollection
minimumSupportedVersion
isGroup
lastUserAccessDate
name
color
badgeEmblem
showingLargeAttachments
reminderIDsMergeableOrderingData
reminderIDsOrderingHints
templateID
sharedOwnerName
sharedOwnerAddress
sharingStatus
sharees
calDAVNotifications
sortingStyle
pinnedDate
AllCases
RawValue
identifier
accountTypeHost
manualSortIDHashKeyProvider
storeObjectContext
onlyConvertIncompleteReminders
v2_DefaultValues
v3_Release_2021
v4_Release_2022
v5_Migrating_to_ZREMCDREMINDER
v6_Migrated_to_ZREMCDREMINDER
v2022_C
AllCases
xpcDaemon
storeController
storeContainerToken
store
objectID
didChooseToMigrate
didFinishMigration
identifier
name
type
active
delete
debugSyncDisabled
RawValue
smartListAssigned
smartListAssigned_fetchOnlyCompleted
identifier
status
ckAssigneeIdentifier
assignedDate
AllCases
RawValue
Performer
address
contactLabel
latitude
locationUID
longitude
mapKitHandle
proximity
radius
referenceFrameString
routing
title
AllCases
RawValue
q_fetchCounts
q_saveCounts
q_postEventWorkItem
enabled
queue
storeControllerReadWriteEventName
queue
storeControllerNotificationCenter
store
persistentStorage
storeControllerObserverToken
xpcActivity
started
smartListTypeHavingPredefinedObjectID
smartListTypeHavingUniqueObjectID
siriSearch
generic_fetchTopLevelCustomSmartListsInAccount
generic_fetchCustomSmartListsInGroup
pinned_nonCustomSmartListsWithUserDefinedVisibilityInAccount
template_fetchCustomSmartListsWithMostRecentTargetTemplateIdentifier
analytics_fetchCustomSmartListsInAccount
generic_fetchAllCustomSmartLists
pinned_pinnedCustomSmartLists
tipKit_fetchAllCustomSmartLists
hashtagLabelDataView_fetchAllCustomSmartLists
didChooseToMigrate
didFinishMigration
listIDsMergeableOrdering
listIDsMergeableOrderingAsset
personIDSalt
sharedListIDsToOwnerNames
AllCases
RawValue
rawValue
ArrayLiteralElement
RawValue
Element
queue
bannerTimeEventStream
badgeEventStream
userNotificationCenter
storeControllerNotificationCenter
daemonController
dynamicSignificantTimeNotificationEngine
storeControllerObservationToken
started
todayNotificationTimeObserver
badgeCountCriteriaObserver
Performer
accountID
objectID
ckElementID
localUUID
accountID
producers
consumers
queue
storeControllerNotificationCenter
storeControllerNotificationCenterToken
beforeFirstUnlockNotificationEngine
daemonController
started
temporal
location
vehicle
peopleInteraction
reminder
origin
type
firesBeforeFirstUnlock
alarm
active
passive
Performer
identifier
ckServerShareData
AllCases
RawValue
queue
storeController
mode
dataAccessRequestsQueue
remStoreProvider
userNotificationCenterProvider
storeControllerNotificationCenter
storeControllerNotificationCenterToken
rdDaemonController
storeController
userNotificationCenter
invokeOperationFailedInitialization
invokeResponseMissing
invokeArgumentContainsUnattachedAssets
publicDatabase
privateDatabase
organizationDatabase
serviceName
container
databaseType
qualityOfService
requestCompletedBlock
data
indentString
ValueType
value
protobufExtension
alwaysPrintEnumsAsInts
trailingGarbage
truncated
invalidUTF8
malformedProtobuf
missingRequiredFields
internalExtensionError
messageDepthLimit
source
index
numberFormatter
recursionLimit
recursionBudget
ignoreUnknownFields
messageDepthLimit
discardUnknownFields
seconds
nanos
unknownFields
anyTranscodeFailure
timestampRange
durationRange
fieldMaskConversion
missingFieldNames
missingValue
data
unknownField
failure
malformedNumber
numberRange
malformedMap
malformedBool
malformedString
invalidUTF8
missingFieldNames
schemaMismatch
unrecognizedEnumValue
illegalNull
unquotedMapKey
leadingZero
truncated
malformedDuration
malformedTimestamp
malformedFieldMask
trailingGarbage
conflictingOneOf
messageDepthLimit
scanner
options
fieldCount
isMapKey
fieldNameMap
RawValue
AllCases
UNRECOGNIZED
proto2
proto3
unknownFields
_storage
kind
cardinality
number
name
typeURL
oneofIndex
packed
options
jsonName
defaultValue
typeUnknown
typeDouble
typeFloat
typeInt64
typeUint64
typeInt32
typeFixed64
typeFixed32
typeBool
typeString
typeGroup
typeMessage
typeBytes
typeUint32
typeEnum
typeSfixed32
typeSfixed64
typeSint32
typeSint64
unknown
optional
required
repeated
_name
_fields
_oneofs
_options
_sourceContext
_syntax
_enumvalue
_value
doubleFormatString
work
unknownFields
separator
encoder
options
messageDepthLimit
ignoreUnknownFields
encoder
typeMismatch
malformedWellKnownTypeJSON
malformedAnyField
scanner
fieldCount
terminator
fieldNameMap
messageType
varint
fixed64
lengthDelimited
startGroup
endGroup
fixed32
RawValue
values
fieldNumber
fieldName
messageType
value
unknownFields
available
fieldStartP
fieldEndP
consumed
fieldWireFormat
fieldNumber
extensions
groupFieldNumber
options
recursionBudget
unknownData
unknownOverride
malformedText
malformedNumber
trailingGarbage
truncated
invalidUTF8
schemaMismatch
missingFieldNames
unknownField
unrecognizedEnumValue
conflictingOneOf
internalExtensionError
hasher
anyTranscodeFailure
missingRequiredFields
BaseType
seconds
nanos
unknownFields
fileName
unknownFields
unknownFields
_storage
name
requestTypeURL
requestStreaming
responseTypeURL
responseStreaming
options
syntax
root
_name
_methods
_options
_version
_sourceContext
_mixins
_syntax
data
separator
doubleFormatter
_typeURL
state
binary
message
contentJSON
encoder
nameMap
options
paths
unknownFields
extensions
doubleFormatter
encoder
nameMap
nameResolver
extensions
ArrayLiteralElement
fields
serializedSize
Value
interned
internPool
numberToNameMap
protoToNumberMap
jsonToNumberMap
same
standard
unique
aliased
json
proto
utf8Buffer
nameString
string
staticString
RawValue
AllCases
UNRECOGNIZED
nullValue
fields
unknownFields
_storage
numberValue
stringValue
boolValue
structValue
listValue
values
_kind
pointer
unknownFields
_storage
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>BuildMachineOSBuild</key>
<string>20A241133</string>
<key>CFBundleAllowMixedLocalizations</key>
<true/>
<key>CFBundleDisplayName</key>
<string>Reminders</string>
<key>CFBundleIdentifier</key>
<string>com.apple.remindd</string>
<key>CFBundleName</key>
<string>remindd</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>iPhoneSimulator</string>
</array>
<key>CFBundleVersion</key>
<string>845</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>14A5270i</string>
<key>DTPlatformName</key>
<string>iphonesimulator</string>
<key>DTPlatformVersion</key>
<string>16.2</string>
<key>DTSDKBuild</key>
<string>20C47</string>
<key>DTSDKName</key>
<string>iphonesimulator16.2.internal</string>
<key>DTXcode</key>
<string>1400</string>
<key>DTXcodeBuild</key>
<string>14A5270i</string>
<key>MinimumOSVersion</key>
<string>16.2</string>
<key>UIDeviceFamily</key>
<array>
<integer>1</integer>
<integer>2</integer>
</array>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.remindd</string>
<key>aps-connection-initiate</key>
<true/>
<key>aps-environment</key>
<string>production</string>
<key>com.apple.CommCenter.fine-grained</key>
<array>
<string>data-allowed-write</string>
<string>spi</string>
</array>
<key>com.apple.CoreRoutine.LocationOfInterest</key>
<true/>
<key>com.apple.application-identifier</key>
<string>com.apple.remindd</string>
<key>com.apple.authkit.client.private</key>
<true/>
<key>com.apple.chronoservices</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.developer.aps-environment</key>
<string>production</string>
<key>com.apple.developer.icloud-container-environment</key>
<string>Production</string>
<key>com.apple.developer.icloud-container-identifiers</key>
<array>
<string>com.apple.reminders</string>
<string>com.apple.reminders.fdb</string>
</array>
<key>com.apple.developer.icloud-services</key>
<array>
<string>CloudKit</string>
</array>
<key>com.apple.developer.ubiquity-container-identifiers</key>
<string></string>
<key>com.apple.locationd.effective_bundle</key>
<true/>
<key>com.apple.locationd.region_proxy_service</key>
<true/>
<key>com.apple.managedconfiguration.profiled-access</key>
<true/>
<key>com.apple.mobile.deleted.AllowFreeSpace</key>
<true/>
<key>com.apple.nano.nanoregistry.generalaccess</key>
<true/>
<key>com.apple.private.CacheDelete</key>
<array>
<string>PURGE_ENTITLEMENT</string>
<string>CLIENT_ENTITLEMENT</string>
</array>
<key>com.apple.private.DistributedEvaluation.RecordAccess-com.apple.reminders.des</key>
<true/>
<key>com.apple.private.MobileGestalt.AllowedProtectedKeys</key>
<array>
<string>UniqueDeviceID</string>
</array>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.aps-client-cert-access</key>
<true/>
<key>com.apple.private.aps-connection-initiate</key>
<true/>
<key>com.apple.private.attribution.implicitly-assumed-identity</key>
<dict>
<key>type</key>
<string>bundleID</string>
<key>value</key>
<string>com.apple.reminders</string>
</dict>
<key>com.apple.private.calendar.changeIdTrackingOverride</key>
<true/>
<key>com.apple.private.calendar.syncclient</key>
<true/>
<key>com.apple.private.canGetAppLinkInfo</key>
<true/>
<key>com.apple.private.cloudkit.customAccounts</key>
<true/>
<key>com.apple.private.cloudkit.masquerade</key>
<true/>
<key>com.apple.private.cloudkit.setEnvironment</key>
<true/>
<key>com.apple.private.cloudkit.spi</key>
<true/>
<key>com.apple.private.cloudkit.systemService</key>
<true/>
<key>com.apple.private.corespotlight.internal</key>
<true/>
<key>com.apple.private.dark-wake-push</key>
<true/>
<key>com.apple.private.dprivacyd.allow</key>
<true/>
<key>com.apple.private.kernel.override-cpumon</key>
<true/>
<key>com.apple.private.network.socket-delegate</key>
<true/>
<key>com.apple.private.push-to-wake</key>
<true/>
<key>com.apple.private.secure-apsclientv2</key>
<true/>
<key>com.apple.private.suggestions.reminders</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceLiverpool</string>
</array>
<key>com.apple.private.tcc.allow.overridable</key>
<array>
<string>kTCCServiceCalendar</string>
<string>kTCCServiceAddressBook</string>
</array>
<key>com.apple.private.tcc.kill-on-assumed-identity-authorization-change</key>
<true/>
<key>com.apple.private.tcc.manager.check-by-audit-token</key>
<array>
<string>kTCCServiceReminders</string>
</array>
<key>com.apple.private.usernotifications.bundle-identifiers</key>
<array>
<string>com.apple.reminders</string>
<string>com.apple.NanoReminders</string>
</array>
<key>com.apple.private.xpc.domain-extension</key>
<true/>
<key>com.apple.security.application-groups</key>
<array>
<string>group.com.apple.reminders</string>
</array>
<key>com.apple.security.exception.files.absolute-path.read-only</key>
<array>
<string>/usr/libexec</string>
<string>/private/var/containers/Shared/SystemGroup/systemgroup.com.apple.lsd.iconscache/</string>
</array>
<key>com.apple.security.exception.files.absolute-path.read-write</key>
<array/>
<key>com.apple.security.exception.files.home-relative-path.read-only</key>
<array>
<string>Library/Caches/com.apple.itunesstored/url-resolution.plist</string>
<string>Library/Caches/com.apple.AppleAccount/</string>
</array>
<key>com.apple.security.exception.files.home-relative-path.read-write</key>
<array>
<string>Library/Reminders/</string>
<string>Library/Caches/com.apple.remindd/</string>
<string>Library/Logs/CrashReporter/Reminders/</string>
<string>Library/HTTPStorages/com.apple.remindd/</string>
</array>
<key>com.apple.security.exception.iokit-user-client-class</key>
<array>
<string>RootDomainUserClient</string>
</array>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.iconservices</string>
<string>com.apple.coreduetd.knowledge</string>
<string>com.apple.siri-distributed-evaluation</string>
<string>com.apple.suggestd.reminders</string>
<string>com.apple.remindd</string>
<string>com.apple.cloudd</string>
<string>com.apple.apsd</string>
<string>com.apple.usernotifications.usernotificationservice</string>
<string>com.apple.analyticsd</string>
<string>com.apple.spotlight.IndexAgent</string>
<string>com.apple.managedconfiguration.profiled</string>
<string>com.apple.frontboard.systemappservices</string>
<string>com.apple.appconduitd.device-connection</string>
<string>com.apple.contactsd</string>
<string>com.apple.routined.registration</string>
<string>com.apple.mobileactivationd</string>
<string>com.apple.chronoservices</string>
<string>com.apple.cache_delete</string>
<string>com.apple.cache_delete.public</string>
<string>com.apple.SBUserNotification</string>
<string>com.apple.mobile.keybagd.xpc</string>
<string>com.apple.mobile.keybagd.UserManager.xpc</string>
<string>com.apple.mobile.usermanagerd.xpc</string>
</array>
<key>com.apple.security.exception.shared-preference.read-only</key>
<array>
<string>com.apple.UIKit</string>
<string>com.apple.nanobuddy</string>
<string>com.apple.persistentconnection</string>
<string>com.apple.purplebuddy</string>
<string>com.apple.DataAccess.BehaviorOptions</string>
</array>
<key>com.apple.security.exception.shared-preference.read-write</key>
<array>
<string>com.apple.remindd.babysitter</string>
<string>com.apple.remindd</string>
<string>group.com.apple.reminders</string>
<string>com.apple.persistentconnection-mcc</string>
</array>
<key>com.apple.security.exception.sysctl.read-only</key>
<array>
<string>hw.perflevel0.physicalcpu_max</string>
</array>
<key>com.apple.security.network.client</key>
<true/>
<key>com.apple.security.temporary-exception.mach-lookup.global-name</key>
<array>
<string>com.apple.coreduetd.knowledge</string>
<string>com.apple.routined.registration</string>
<string>com.apple.siri-distributed-evaluation</string>
<string>com.apple.suggestd.reminders</string>
<string>com.apple.cloudd</string>
<string>com.apple.apsd</string>
<string>com.apple.analyticsd</string>
<string>com.apple.dprivacyd</string>
<string>com.apple.mobile.keybagd.xpc</string>
<string>com.apple.mobile.keybagd.UserManager.xpc</string>
<string>com.apple.mobile.usermanagerd.xpc</string>
</array>
<key>com.apple.security.ts.application-group-support</key>
<true/>
<key>com.apple.security.ts.asset-access</key>
<true/>
<key>com.apple.security.ts.cloudkit-client</key>
<true/>
<key>com.apple.security.ts.location-services</key>
<true/>
<key>com.apple.security.ts.power-assertions</key>
<true/>
<key>com.apple.security.ts.springboard-services</key>
<true/>
<key>com.apple.security.ts.tmpdir</key>
<string>com.apple.remindd</string>
<key>com.apple.springboard.shortcutitems.fullaccess</key>
<true/>
<key>com.apple.symptom_diagnostics.report</key>
<true/>
<key>com.apple.trial.client</key>
<array>
<string>210</string>
</array>
<key>seatbelt-profiles</key>
<array>
<string>temporary-sandbox</string>
</array>
</dict>
</plist>
T@Fv
Assignment
Assignment
name
account
account
account
name
name
children
account
Alarm
Alarm
SmartList
SmartList
canonicalName
recencyDate
name
Hashtag
Hashtag
Template
Template
template
template
List
List
Reminder
Reminder
SavedReminder
SavedReminder
Attachment
Attachment
alarm
alarm.reminder
alarm
alarm.reminder
alarm
alarm.reminder
zh-Hans
zh-Hant
RecurrenceRule
RecurrenceRule
parentAccount
parentAccount
Rappels 
ManualSortHint
SavedAttachment
SavedAttachment
account
reminder
reminder
AlarmTrigger
AlarmTrigger
Account
Account
ckCloudState
MigrateRequest
MigrateResponse
EmptyRequest
BasicResponse
PingRequest
PingResponse
null
false
true
alse
infinity
infinity
infinity
null
false
true
null
null
