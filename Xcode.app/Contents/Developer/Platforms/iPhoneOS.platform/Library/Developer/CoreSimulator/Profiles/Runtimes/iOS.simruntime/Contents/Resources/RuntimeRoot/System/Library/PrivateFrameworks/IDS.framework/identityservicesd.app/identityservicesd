@(#)PROGRAM:identityservicesd  PROJECT:IDSAgent-1000
?333333
?333333
BAACert
APNSMessageDeliveryClass
IDSMessageStore
BTOutOfBandKey
PNRInfo
CTPNR
T@"CKContainer",R,N,V_container
CTPNRForSIM:
T@"IDSQueryKeyTransparencyContext",R,N,V_keyTransparencyContext
ContactsUtilities
T@"NSArray",C,V_responseEntries
DSID
T@"NSArray",R,C
FTMessageDelivery_oversized
T@"NSArray",R,N,V_radarKeywords
GDR_oversized
T@"NSData",C,N,V_groupIdentifer
GroupStatus_oversized
T@"NSData",C,V_senderExternalIP
IDCertificate
T@"NSData",R,N,V_phoneSignature
IDSCoreAnalyticsWiProxConnectionEvent:duration:resultCode:
T@"NSDate",&,N,V_expirationDate
IDSDSession
T@"NSDate",C,N,V_expirationDate
IDSFirewall
T@"NSHashTable",&,N,V_listeners
IDSMagnetCorruptionDetailedEvent:correctRawBytesSinceLastCorruption:discardedRawBytes:recoveryTimeInMs:linkType:
T@"NSNumber",&,N,V_localNATType
IDSQuickRelayEventType:eventSubType:duration:resultCode:providerType:transportType:interfaceType:skeEnabled:isInitiator:protocolVersion:retryCount:serviceName:subServiceName:participantCount:
T@"NSNumber",C,V_requiredUpdate
IDSRealTimeEncryptionServiceName:activeParticipants:membershipChangeMKMTimeDelta:
T@"NSNumber",C,V_responseOrigin
IDSServerMessaging
T@"NSString",&,N,V_buildVersion
IDSSocketPairConnectionTCPInfoLinkType:currentRTT:bandwidth:
T@"NSString",&,N,V_localPartyID
IDSWiProxDidConnectToPeer:resultCode:
T@"NSString",&,V_deviceUniqueID
IDSWiProxDidSendData:
T@"NSString",C,N,V_carrierNonce
IMEI
T@"NSString",C,N,V_serialNumber
IPVersion
T@"NSString",C,V_encryptionType
InvalidateStableKeyMaterialInFrameworkCache:
T@"NSString",C,V_responseUserID
KTAccountKeyForServiceIdentifier:
T@"NSUUID",C,N,SsetUUID:,V_uuid
KTLoggableData
T@,&,N,V_object
MEID
TB,N,V_hasUnregisteredContainer
NRPairing
TB,N,V_migrated
OTRController
TB,N,V_shouldStopBTDatagramLink
OTREncryptData:OTRToken:priority:error:
TB,N,V_supportsCloudConnections
OTRStore
TB,N,V_verboseFunctionalLogging
OTRToken
TB,R,N,V_closed
PNRReadyStateChanged:
TC,N,V_linkType
PNRRequestSentWithRequestData:
TI,N,V_SSRCSend
QRAllocator
TI,V_encryption
RTCSessionPromiseWithBatchingInterval:
TS,N,V_reqCount
RealTimeEncryptionController_oversize
Td,N,V_connectionSetupStartTime
SHA256Data
Td,N,V_timeSent
SIMForIdentifier:
Tq,N,V_attempts
SIMInformationDidChange
Tq,N,V_priority
SIMResponder
Tq,R,N,V_status
SMSMechanismWithContext:
Tq,V_deviceTime
SSRCSend
_URIsToRegisterForRegistration:
SessionController
__imFirstObject
StringAsKeyIndex:
_accountingHour
T*,N,V_localKeyMaterial
_actionByTarget
T@"<CUTMetricLogger>",R,N,V_internalMetricLogger
_activityPolicy
T@"<FTMessageDeliveryProtocol>",&,N,V_messageDelivery
_alwaysSkipSelf
T@"<FTPasswordManager>",R,N,V_passwordManager
_avoidMainQueue
T@"<IDSActivityPushListenerDelegate>",W,N,V_delegate
_broadcastQueue
T@"<IDSBaseMessageSigningSession>",C
_callID
T@"<IDSDAccountControllerDelegate>",&,N,V_delegate
_centralManager
T@"<IDSDRegistrationControl>",R,N,V_registrationControl
_checkMessageHashForData:identifier:isRetry:delayedCommitBlock:
T@"<IDSDSession><IDSDSessionAWDMetrics>",W,N,V_delegate
_cleanupAccount
T@"<IDSDXPCDaemonCollaboratorProvider>",&,N,V_collaboratorProvider
_cleanupIncomingFilesDirectory:
T@"<IDSDaemonMIGQueryInterfaceDelegate>",W,V_delegate
_cleanupOutgoingExpiredMessages
T@"<IDSDuetInterfaceDelegate>",W,N,V_delegate
_closed
T@"<IDSIDStatusDependencyProvider>",&,N,V_dependencyProvider
_commCenterDead
T@"<IDSLinkDelegate>",W
_config
T@"<IDSLinkDelegate>",W,V_delegate
_controlChannelVersionCacheLock
T@"<IDSMPFullDeviceIdentityContainerEncrypter>",R,N,V_fullDeviceIdentityContainerEncrypter
_createTimerForTopic:withDelay:
T@"<IDSMadridAckTrackerDelegate>",&,N,V_delegate
_currentGetHandlesRegistrations
T@"<IDSNRDeviceBridgeDelegate>",W,N,V_delegate
_currentPromise
T@"<IDSPeerIDPushHandler>",&,N,V_pushHandler
_defaultQueuedBroadcastAttempts
T@"<IDSPeerIDQueryHandlerDataSource>",&,N,V_dataSource
_deviceIsAsleep
T@"<IDSPersistentMapDelegate>",W,N,V_delegate
_deviceRecordForCloudKitRecord:
T@"<IDSPersistentMapPersister>",&,N,V_originPersister
_dumpServiceMap
T@"<IDSPhoneNumberValidationStateMachineLockdownManager>",&,N,V_lockdownManager
_encryptPayload
T@"<IDSPhoneUserRegistryDeviceSupport>",R,N,V_deviceSupport
_ensureIdentity:savedIndentity:protectionClass:didSaveIdentity:
T@"<IDSPluginNanoRegistryProtocol>",&,N,V_plugin
_errorCodeForRegistrationError:
T@"<IDSPreflightStackStore>",R,N,V_preflightStackStore
_events
T@"<IDSRapportDeliveryControllerDelegate>",W,N,V_delegate
_expiry
T@"<IDSRegistrationHashProcessorDelegate>",W,N,V_delegate
_fixedInterface
T@"<IDSSocketPairConnectionDelegate>",W,N,V_delegate
_gameCenterShouldSigninOnModify
T@"<IDSTemporaryPhoneUserExpirationManagerDelegate>",W,N,V_delegate
_groupIDToSKMRecoveryRetryCount
T@"<IDSUTunDeliveryControllerDelegate>",W,N,V_delegate
_groups
T@"<IDSUser>",&,N,V_user
_headerOverhead
T@"<IDSXPCReunionSync>",&,N,V_reunionSyncCollaborator
_identityClassC
T@"<_IDSSessionConnectionDelegate>",W,N,V_delegate
_identityLoaded
T@"CNContactStore",&,N,V_contactStore
_invalidateMessagesDequeueTimer
T@"CUTDeferredTaskQueue",R,N,V_cleanupAbsintheTask
_inviteSentTime
T@"CUTDeferredTaskQueue",R,N,V_processUsageNotificationsTask
_isAbsintheV3EnabledByServerBag
T@"CUTDeferredTaskQueue",R,N,V_sendDeregistrationTask
_isBuddyShowing
T@"CUTDeferredTaskQueue",R,N,V_storeAccountTask
_isFinalMessage
T@"CUTPromise",&,N,V_migrationPromise
_isReplayError:
T@"CUTUnsafePromise",&,N,V_currentDeviceRecordsPromise
_isUnderFirstDataProtectionLock
T@"ENGroupID",&,N,V_groupID
_keyDiversifier
T@"FTMessageDelivery",R,N,V_messageDelivery
_kickoffExpirationTimerForInfo:
T@"FTMessageDelivery_DualMode",&,N,V_dualInterfaceidQueryMessageDelivery
_lastConnection
T@"IDSAccountRepair",&,N,V_accountRepair
_lastPacketTime
T@"IDSAckStateMachine",R,N,V_ackStateMachine
_latestLinkType
T@"IDSActivityPushListener",&,N,V_pushListener
_linkID
T@"IDSAuthenticationCertificate",R,N,V_phoneAuthenticationCertificate
_loaded
T@"IDSBaseMessage",R
_lookupEndpoint
T@"IDSCTAdapter",&,N,V_ctAdapter
_manateeRetries
T@"IDSCTPNRValidationMechanism",R,N
_mayBringUpWiFi
T@"IDSCertifiedDeliveryReplayCommitter",R,N,V_replayStateCommitter
_midSynchronize
T@"IDSCloudKitKeyElectionStore",R,N,V_cloudKitElectionStore
_migrationBlock
T@"IDSCloudKitKeyTransparencyStore",R,N,V_keyTransparencyStore
_needsMigration
T@"IDSConnectivityMonitor",&,N,V_connectivityMonitor
_nominateBlocks
T@"IDSContactsUtilities",&,N,V_contactUtilities
_noteRegistrationIdentityUpdate
T@"IDSDAccount",R,N
_notifySuccess:
T@"IDSDAccountController",R,N
_object
T@"IDSDGroupContextNotifyingObserver",&,N,V_observer
_originalbtUUID
T@"IDSDGroupStatusNotificationControllerBroadcaster",R,N,V_broadcaster
_pairingManager
T@"IDSDServiceController",R,N
_participantMirageHandshakeBlob
T@"IDSDSessionActiveParticipantsCache",&,N,V_cache
_peerID
T@"IDSDSessionInvitationManager",&,N,V_invitationManager
_pendingPeerMap
T@"IDSDSessionMessenger",&,N,V_messenger
_phoneNumberValidationStartDate
T@"IDSDXPCPairedDeviceManager",&,N,V_pairedDeviceManagerCollaborator
_pipePeripheral
T@"IDSDaemon",&,N,V_idsDaemon
_plistCachePath
T@"IDSDatabase",R,&,N,V_database
_pluginRequests
T@"IDSDestination",C,V_destinations
_postHomeNumberNotificationBeforeAlertForIdentifier:forcefully:
T@"IDSDeviceConnectionInfo",&,N,V_deviceConnectionInfo
_previousLocalStableKeyMaterial
T@"IDSEncryptedData",R,N,V_encryptedResult
_processIncomingRemoteResourceTransferMessage:guid:context:specificOriginator:broadcastTopic:toIdentifier:topic:messageContext:
T@"IDSEncryptionQueue",&,N,V_syncQueue
_pseudonymAlias
T@"IDSEncryptionQueueManager",&,N,V_queueManager
_queues
T@"IDSEndpointCapabilities",&,N,V_deviceCapabilities
_rateLimitingKeyForURI:service:
T@"IDSFrequentURISuggester",&,N,V_uriSuggester
_reason
T@"IDSGameCenterData",&,N
_registeredDeserializationError
T@"IDSGenericConnectionID",&,N,V_connectionID
_relaySessionID
T@"IDSGroupEncryptionKeyManager",&,N
_reloadSettings
T@"IDSGroupEncryptionKeyMaterial",&,N,V_previousLocalStableKeyMaterial
_removeAccount:
T@"IDSGroupServerKeyElectionStore",R,N,V_groupServerElectionStore
_removeDevicePreferencesHandler
T@"IDSHeartbeatCenter",&,N,V_heartbeatCenter
_resetVariables
T@"IDSKTAccountKeyManager",R,N,V_accountKeyManager
_responseOrigin
T@"IDSKTGossipPolicySpecification",&,N,V_spec
_responseUserID
T@"IDSKTRegistrationData",&,N,V_unregisteredKTData
_resultExpected
T@"IDSKVStore",&,N,V_kvStore
_scheduleDependentRegistrations
T@"IDSKeyTransparencyVerifier",&,N,V_keyTransparencyVerifier
T@"IDSKeyTransparencyVerifier",R,N,V_transparencyVerifier
_selfInstanceID
T@"IDSKeychainWrapper",&,N,V_keychainWrapper
_sender
T@"IDSLinkManager",R,N,V_linkManager
_serverHeartBeatTimerHitOnMain:
T@"IDSMPFullDeviceIdentityContainer",&,N,V_registeredIdentityContainer
_serviceIndexToKTRegDataConfigs
T@"IDSMPFullDeviceIdentityContainerEncrypter",R,N,V_fullDeviceIdentityContainerEncrypter
_sessionStorage
T@"IDSMPFullLegacyIdentity",&,N,V_identityClassC
_setHourlyTimer
T@"IDSMPFullLegacyIdentity",&,N,V_localUnauthenticatedFullIdentity
_shouldAllowLiveMessageDelivery
T@"IDSMPFullLegacyIdentity",&,N,V_unSavedidentityClassC
_shouldReplaceLocalDestination:
T@"IDSMPFullLegacyIdentity",R,N,V_localFullIdentity
_signOutDomain:
T@"IDSMPPublicLegacyIdentity",&,N,V_remoteUnauthenticatedPublicIdentity
_startAllocateRequestForDevice:
T@"IDSMessageHashChecker",R,N,V_messageHashChecker
_startEchoTimer
T@"IDSNGMKeyLoadingErrorContainer",R,N,V_errorContainer
_startQRConnectionWithDefaults:
T@"IDSNRBluetoothLinkPreferences",&,N,V_bluetoothLinkPreferences
_status
T@"IDSNRDeviceIdentifier",R,&,N,V_deviceIdentifier
_submitAWDMetric:withContainer:
T@"IDSNRDeviceManager",R,N,V_nrDeviceManager
_suspendTraffic
T@"IDSNRDeviceMonitor",&,N,V_nrDeviceMonitor
_temporaryPhoneUserSynchronizer
T@"IDSNRDevicePreferencesHandler",&,N,V_nrDevicePreferencesHandler
_timeSubscribed
T@"IDSOTRController",&,N,V_OTRController
_topics
T@"IDSOpportunisticCache",&,N,V_cache
_unsentOutgoingMessagesUpToLimit:byteLimit:priority:accountUUID:wantsPayload:requireDuet:localDestinationDeviceID:messageTypes:
T@"IDSPairedDeviceRepository",R,N,V_pairedDeviceRepository
_updateHandles:
T@"IDSPeerIDManager",&,N,V_peerIDManager
_updatePseudonymsFromEmailInfo:
T@"IDSPeerIDManager",R,N,V_peerIDManager
_useStunMICheck
T@"IDSPeerMessage",&,N,V_messageToSend
_userHasDisabledSMSRegistration
T@"IDSPersistentMap",&,N,V_persistentMap
_utunController
T@"IDSPhoneNumberValidationModeArbiter",&,N,V_arbiter
_validationData
T@"IDSPhoneUser",&,N,V_phoneUser
_writeSuspended
T@"IDSPreflightStack",C,N
absintheRetries
T@"IDSProtoKeyTransparencyTrustedServiceSignatures",R,N,V_signatures
account
T@"IDSPublicIdentityCache",R,N,V_publicIdentityCache
accountRemoved:
T@"IDSPublicKeyStorage",R,N,V_publicKeyStorage
accountUniqueID
T@"IDSPushHandler",&,N,V_persistentEnrollmentHandler
accountWithServiceName:loginID:
T@"IDSPushHandler",R,N
ackStateMachine
T@"IDSQuickSwitchHelper",&,N,V_quickSwitchHelper
activityMonitor
T@"IDSRateLimiter",&,N,V_firewallRateLimiter
addServiceType:
T@"IDSRateLimiter",&,N,V_negativeRegistrationUpdateCache
address
T@"IDSRateLimiter",&,N,V_registrationAttemptRateLimiter
aliases
T@"IDSRateLimiter",&,N,V_simDeactivationRequestRateLimiter
allTraditionallyPairedUniqueIDs
T@"IDSRateLimiter",&,N,V_wideWindowSMSTimeoutRateLimiter
allowForceFetch
T@"IDSRealTimeEncryptionIdentity",R,C,V_forPublicIdentity
appValueForKey:
T@"IDSRealTimeEncryptionIdentity",R,N,V_previousIdentityForDevice
appleID
T@"IDSRegistration",R,N,V_registrationInfo
applicationPublicDeviceIdentity
T@"IDSRegistrationController",&,N,V_registrationController
arbiter
T@"IDSRegistrationHashProcessor",R,N,V_queryUpdateNotifier
arrayWithArray:
T@"IDSRegistrationKeyManager",&,N,V_registrationKeyManager
T@"IDSRegistrationKeyManager",R,N,V_registrationKeyManager
basePhoneNumber
T@"IDSRegistrationKeychainManager",&,N,V_registrationKeychainManager
broadcastAccountInfoChangedTask
T@"IDSRegistrationReasonTracker",&,N,V_registrationReasonTracker
bypassSizeCheck
T@"IDSRemoteCredential",&,N,V_syncCredential
cancelOpportunisticDataOnService:withIdentifier:messageContext:
T@"IDSRestrictions",&,N,V_restrictions
capabilityFlags
T@"IDSSIMResponder",&,N,V_SIMResponder
channel
T@"IDSServerBag",&,N,V_bag
cleanUpExpiredMasterKeyMaterial
T@"IDSServerBag",&,N,V_serverBag
clearApplicationPublicIdentitys
T@"IDSServiceProperties",R,N
clientUniquePID
T@"IDSSockAddrWrapper",C,N,V_localSA
clusterByUpdatingGroupID:error:
T@"IDSSockAddrWrapper",R,&,N,V_localAddress
command
T@"IDSSockAddrWrapperPair",C,N,V_addressPair
completionQueue
T@"IDSStallDetector",&,N,V_outgoingStallDetector
compressionInfo
T@"IDSSystemAccountUserSynchronizer",&,N,V_systemAccountUserSynchronizer
connect
T@"IDSTemporaryPhoneUser",&,N,V_user
connectQRServer
T@"IDSTemporaryPhoneUserCredential",&,N,V_credential
connectionTimer
T@"IDSTemporaryPhoneUserSynchronizer",&,N,V_temporaryPhoneUserSynchronizer
containsObject:
T@"IDSTransparentEndpointViewer",R,N,V_transparentEndpointViewer
containsString:
T@"IDSURI",R,N,V_fromURI
continuityClientInstanceCreated
T@"IDSURI",R,N,V_remoteURI
controlChannelVersionForCbuuid:
T@"IDSUTunConnection",&,N,V_cloudConnection
copyPeerWithID:
T@"IDSUTunControlChannelIdentityPair",&,N,V_identityPair
T@"IDSUTunDeliveryController",&,N,V_utunDeliveryController
currentMetricCollectorForTopic:
T@"IDSUserProperties",&,N,V_properties
dataWithLength:
T@"IDSUserStore",R,N
dealloc
T@"IDSValidationQueue",R,V_validationQueue
defaultLinkType
T@"IDSXPCConnection",&,N,V_clientConnection
defaultPeerConnectivityChanged:
T@"IDSXPCConnection",R,N,V_connection
deserializeSessionInfoMetadata:
T@"IMDispatchTimer",&,N,V_repairTimer
destinationWithAlias:pushToken:
T@"IMMultiQueue",&,N,V_multiQueue
devicePublicKey
T@"IMSystemMonitor",&,N,V_systemMonitor
deviceSignature
T@"IMTimer",&,N,V_connectionTimer
deviceWithUniqueID:updatedUUID:
T@"IMTimer",&,N,V_inviteTimer
didCreateGroup:
T@"IMTimer",&,N,V_packetLossTimer
disableAccount:
T@"IMUserDefaults",&,N,V_userDefaults
doCheckSuspendTrafficForDevice:
T@"NSArray",&,N,V_adHocServiceNames
duetIdentifiers
T@"NSArray",&,N,V_aggregateMessages
enableOTRForDefaultPairedDevice
T@"NSArray",&,N,V_appleIDPrimaryDependentRegistrations
encryptedResult
T@"NSArray",&,N,V_dependentRegistrations
encryptionBlock
T@"NSArray",&,N,V_endpoints
endSessionTimer
T@"NSArray",&,N,V_lackAll
enqueueMessage:
T@"NSArray",&,N,V_pseudonyms
expirationPhase
T@"NSArray",&,N,V_requireAll
fetchAllEntries
T@"NSArray",&,N,V_requiredLackOfCapabilities
fetchPhoneUserSubscriptionSourceWithRequestUUID:messageContext:
T@"NSArray",&,N,V_serviceDuetIdentifiers
fileForOptions:
T@"NSArray",&,N,V_tokens
firstOutgoingPacketTime:forMKI:
T@"NSArray",&,N,V_vettedEmails
fromURI
T@"NSArray",C,N,V_dependentRegistrations
generateLinkReport:forceReport:
T@"NSArray",C,N,V_responseMechanisms
T@"NSArray",C,SsetURIs:,V_uris
getBytes:range:
T@"NSArray",C,V_accessoryRequests
getPairedDevicesWithCompletion:
T@"NSArray",C,V_recipients
gossipEnabledServiceIdentifiers
T@"NSArray",C,V_responseConsentTokens
groupIDToStableKeyMaterialCache
T@"NSArray",C,V_responseServiceUserIDs
handleRegistrationSMSSuccessfullyDeliveredWithTelephonyTimeout:
T@"NSArray",C,V_responseSpamMessages
hardwareVersion
T@"NSArray",C,V_spamMessages
hasEndedSession
T@"NSArray",R,C,D,N
hasMatchingURIs
T@"NSArray",R,N,V_activeRegistrations
hasParticipantID:participantID:
T@"NSArray",R,N,V_endpoints
healthDebugging
T@"NSArray",R,N,V_radarQueryParameter
iCloudIdentitiesFromIdentities:
T@"NSArray",R,N,V_subscribedURIs
idsKeychainWrapperDataProtectionClassFromIMDataProtectionClass:
T@"NSArray",R,N,V_validationMechanisms
initWithConnectionID:protocol:keyMaterialLength:isCloudEnabled:
T@"NSArray",R,W,N
initWithDouble:
T@"NSData",&,N,V_accountBlob
initWithLength:
T@"NSData",&,N,V_cert
initWithOTRController:OTRToken:
T@"NSData",&,N,V_controlChannelCachedSYN
initWithPhoneNumber:phoneToken:
T@"NSData",&,N,V_dataToEncrypt
initWithRegistrationKeyManager:
T@"NSData",&,N,V_forwardingTicket
initWithString:
T@"NSData",&,N,V_localBlob
internalCleanup
T@"NSData",&,N,V_localICEData
invalidateTimer
T@"NSData",&,N,V_localSKEData
isEmpty
T@"NSData",&,N,V_ngmPublicIdentity
isEqualToArray:
T@"NSData",&,N,V_participantData
isFamilyService
T@"NSData",&,N,V_participantMirageHandshakeBlob
isKnown
T@"NSData",&,N,V_pushToken
isLocal
T@"NSData",&,N,V_remoteBlob
isPiscoDisabled
T@"NSData",&,N,V_remoteICEData
isQuickSwitchingToAnotherDevice
T@"NSData",&,N,V_remoteSKEData
isSessionReady:
T@"NSData",&,N,V_token
isSharedSession
T@"NSData",C
isValid
T@"NSData",C,N,V_BAACert
T@"NSData",C,N,V_groupPayload
keyRoll
T@"NSData",C,N,V_intermediateRootCert
keyType
T@"NSData",C,N,V_publicIdentityData
keychainManager
T@"NSData",C,N,V_pushToken
T@"NSData",C,N,V_responseAbsintheResponse
kvStore
T@"NSData",C,N,V_responseCertificateData
lackAll
T@"NSData",C,N,V_scoringNonce
link:didWiFiNWPathFlagsChanged:
T@"NSData",C,V_IDSSessionID
localIdentities
T@"NSData",C,V_activeRelayIP
localSA
T@"NSData",C,V_authenticationDataSig
loginID
T@"NSData",C,V_data
mainAccountGuid
T@"NSData",C,V_deviceScore
markAllMessageAsPendingDeleteForAccounts:withDestinationDevice:
T@"NSData",C,V_engramID
materialContent
T@"NSData",C,V_existingRelaySessionToken
members
T@"NSData",C,V_forwardingSig
mergePolicyType
T@"NSData",C,V_inferredExternalIP
messageDelivery
T@"NSData",C,V_messageUUID
messagePriority
T@"NSData",C,V_payloadMetadata
migrateToSecureStorageForClassA
T@"NSData",C,V_previousRelayIP
missingIdentity
T@"NSData",C,V_relayIP
natType
T@"NSData",C,V_relaySessionID
nextSendSMSDate
T@"NSData",C,V_relaySessionToken
nrDeviceManager
T@"NSData",C,V_requestID
numberWithBool:
T@"NSData",C,V_responseCertificate
numberWithLong:
T@"NSData",C,V_targetSessionToken
onTransportThread_UpdateProtocolQualityOfService:linkID:isGood:
T@"NSData",C,V_validationData
optedIn
T@"NSData",R,C,V_encryptedDataBlob
originPersister
T@"NSData",R,N,V_accountKey
packetsReceived
T@"NSData",R,N,V_certificateSigningRequest
pairedDeviceManagerCollaborator
T@"NSData",R,N,V_deviceData
participantData
T@"NSData",R,N,V_encryptedDataBlob
passwordManager
T@"NSData",R,N,V_loggableData
payload
T@"NSData",R,N,V_publicLegacyIdentityData
peerMap
T@"NSData",R,N,V_publicNGMPrekeyData
phoneBookNumber
T@"NSData",R,N,V_resultData
T@"NSData",R,N,V_signedData
prepareControlChannelForDeviceConnectionInfo:genericConnection:
T@"NSDate",&,N
previousRelayIP
T@"NSDate",&,N,V_lastDisconnection
processAckForSocketPairMessage:
T@"NSDate",&,N,V_nextSendSMSDate
promise
T@"NSDate",&,N,V_registrationStateChangedDate
protobufReceived:withGUID:forTopic:toIdentifier:fromID:context:
T@"NSDate",&,N,V_startConnectingDate
protocolVersion
T@"NSDate",&,V_expirationDate
pseudonymForPseudonymURIString:
T@"NSDate",C,N,V_nextRegistrationDate
publicClassAKey
T@"NSDate",C,V_enqueuedDate
publicClassDKey
T@"NSDate",C,V_responseCertificateExpiration
qrError
T@"NSDate",R,V_creationDate
queryLinkProbingStatus:options:
T@"NSDictionary",&,N,V_attributes
queueStatistics
T@"NSDictionary",&,N,V_contextInfo
T@"NSDictionary",&,N,V_defaultPairedDependentRegistrations
realmByListener
T@"NSDictionary",&,N,V_deviceSignatureByService
receivedGroupStableKeyMaterial:fromPushToken:sessionID:groupID:
T@"NSDictionary",&,N,V_entitlements
registerAccount:messageContext:
T@"NSDictionary",&,N,V_ktRegDataByServiceType
registerPluginForGroup:options:
T@"NSDictionary",&,N,V_payload
registrationStateChangedCounter
T@"NSDictionary",&,N,V_relayCancel
relaySessionKey
T@"NSDictionary",&,N,V_relayUpdate
remoteHostAwake
T@"NSDictionary",&,N,V_sessionToBlockMap
removeListener:
T@"NSDictionary",&,N,V_subservicesByPrimaryService
removeObserver:
T@"NSDictionary",C,N,V_regionServerContext
replayCommitter
T@"NSDictionary",C,V_additionalDictionary
request
T@"NSDictionary",C,V_deliveryStatusContext
resetSMSCounter
T@"NSDictionary",C,V_privateDeviceData
responseEntries
T@"NSDictionary",C,V_responseExtraInfo
responseMessage
T@"NSDictionary",C,V_responseSpamMessage
retainArguments
T@"NSDictionary",R
rtcType
T@"NSDictionary",R,D,N
T@"NSDictionary",R,N,V_KTAccountKeyByService
T@"NSDictionary",R,N,V_cumulativeIncomingStatistics
sampleMkMCollectionToBroadcast:
T@"NSDictionary",R,N,V_optInEligibleKTApplicationToIDSServiceIdentifier
scopeID
T@"NSDictionary",R,N,V_serviceToVerifier
selfURI
T@"NSError",&,N,V_error
sendOnePerToken
T@"NSError",&,N,V_identityToRegisterError
sendRealTimeEncryptionMasterKeyMaterial:toGroup:messageContext:
T@"NSError",&,N,V_registeredKeychainError
service
T@"NSError",&,N,V_unregisteredDeserializationError
serviceNameToControlCategoryMap
T@"NSError",R,N,V_error
sessionStarted:
T@"NSMapTable",&,N,V_actionByTarget
setAccessCount:
T@"NSMutableArray",&,N,V_applicationPublicIdentitys
setAccessoryID:
T@"NSMutableArray",&,N,V_candidateEmails
setAccountGUID:
T@"NSMutableArray",&,N,V_handlers
setAccountType:
T@"NSMutableArray",&,N,V_observerProxies
setActivityMonitorEntitlements:
T@"NSMutableArray",&,N,V_queryQueue
setAuthenticationDataAuthToken:
T@"NSMutableArray",&,N,V_requests
setBroadcastID:
T@"NSMutableArray",&,N,V_trustedServices
setChunkNumber:
T@"NSMutableArray",&,N,V_validationContextQueue
setContextInfo:
T@"NSMutableArray",R,N,V_registeredPairedDeviceDidConnectBlockPairs
setCsr:
T@"NSMutableDictionary",&,N
setCurrentInFlightSyncAttempts:
T@"NSMutableDictionary",&,N,V_backingCache
setDefaultPairedDeviceEndpoint:
T@"NSMutableDictionary",&,N,V_cachedIsSameSIM
setDeviceScore:
T@"NSMutableDictionary",&,N,V_clientDataUpdateBlocks
setDidRegisterWithKTAccountKey:
T@"NSMutableDictionary",&,N,V_clientRemoteObjectsByTopic
setDisplayName:
T@"NSMutableDictionary",&,N,V_currentInFlightSyncAttempts
setEnvironment:
T@"NSMutableDictionary",&,N,V_endpointMap
setForceKeyRoll:withCompletion:
T@"NSMutableDictionary",&,N,V_extraCompletionBlocks
setForcedLocal:
T@"NSMutableDictionary",&,N,V_keychainCache
setGeo:
T@"NSMutableDictionary",&,N,V_purgeClientDataBlocks
setGroupStreamInfo:sessionInfo:
T@"NSMutableDictionary",&,N,V_queueMap
setHasMoreData:
T@"NSMutableDictionary",&,N,V_recentlyBlockedHandles
setInteresting:
T@"NSMutableDictionary",&,N,V_serviceIndexToKeyConfigs
setIsConnected:
T@"NSMutableDictionary",&,N,V_timerMap
setIsSuspended:
T@"NSMutableDictionary",&,N,V_usersToTimers
setKey:
T@"NSMutableDictionary",&,V_pushTokenToQRSessionID
setLastSentAck:
T@"NSMutableDictionary",R,&,N,V_serviceConnectionCache
setMergePolicy:
T@"NSMutableDictionary",R,N,V_events
setMessageType:
T@"NSMutableDictionary",R,N,V_groupIDToDesiredMaterialSet
setNSUUID:onDeviceWithUniqueID:
T@"NSMutableDictionary",R,N,V_groupMemberPushTokens
setOpenSocketCompletionHandler:
T@"NSMutableOrderedSet",C,V_aggregateMessages
setPacketsSent:
T@"NSMutableSet",&,N,V_completionBlocks
setPhoneNumber:
T@"NSMutableSet",&,N,V_gossipRecipients
setPreferences:
T@"NSMutableSet",&,N,V_initialSyncClientIDs
setProcessName:
T@"NSMutableSet",&,N,V_reunionSyncClientIDs
setPushHandler:
T@"NSMutableSet",&,N,V_servicesPreferringInfraWiFi
setReadHandler:
T@"NSMutableSet",&,V_individualPeerMessages
setRegistrationKeychainManager:
T@"NSMutableSet",&,V_responses
setRelayUpdate:
T@"NSMutableSet",R,N,V_groups
setRemoteNATIP:
T@"NSNumber",&,N,V_command
setResponseHBI:
T@"NSNumber",&,N,V_domainHash
setRunningSimpleAuthentication:
T@"NSNumber",&,N,V_inputBytesPerSecond
setServiceData:
T@"NSNumber",&,N,V_isOptIn
setServiceType:
T@"NSNumber",&,N,V_maxConcurrentStreams
setSharedState:
T@"NSNumber",&,N,V_packetsPerSecond
setShouldRegisterUsingDSHandle:
T@"NSNumber",&,N,V_participantID
setSpamMessage:
T@"NSNumber",&,N,V_qrReason
setSubActivity:
T@"NSNumber",&,N,V_remoteUseCloudPairedControlChannel
setTargetToken:
T@"NSNumber",&,N,V_responseStatus
setTopicStringToSubscribedInfo:
T@"NSNumber",&,N,V_shouldHaveRegisteredIdentity
setUnderlyingSocketPairMessage:
T@"NSNumber",&,N,V_validateContextTTL
setUri:
T@"NSNumber",C,N,V_applicationVersion
setWantsAppAck:
T@"NSNumber",C,N,V_dependentRegistrationResponseCode
shouldBlackOutDeviceWithCbuuid:
T@"NSNumber",C,N,V_isC2K
shouldSendAsAttachment:maxSize:
T@"NSNumber",C,N,V_pnrReason
signInResponder
T@"NSNumber",C,N,V_responseTTL
signingServiceIdentityWithType:
T@"NSNumber",C,V_allocateType
softwareVersion
T@"NSNumber",C,V_capabilityFlags
startOTRNegotiationWithDeviceIfNeeded:token:reset:errorHandler:
T@"NSNumber",C,V_command
stopConnection:
T@"NSNumber",C,V_deliveryMinimumTime
storedSubscriptionsForActivity:
T@"NSNumber",C,V_errorCode
stringFromDate:
T@"NSNumber",C,V_infoAttribute
success
T@"NSNumber",C,V_ipPreference
supportsHarmony
T@"NSNumber",C,V_isLightweightParticipant
systemDidUnlock
T@"NSNumber",C,V_isSharedSession
systemWillSleep
T@"NSNumber",C,V_maxCompatibilityVersion
trustedServices
T@"NSNumber",C,V_minCompatibilityVersion
ttlCache:didCacheObject:forKey:
T@"NSNumber",C,V_pairingProtocolVersion
unregisterAgent
T@"NSNumber",C,V_provider
unregisterMultiplexerTransport:
T@"NSNumber",C,V_qrError
updateHeartbeat
T@"NSNumber",C,V_relayExpiryTimeStamp
updateServerDesiredKeyMaterials
T@"NSNumber",C,V_relayPort
urgentPriorityMessageStatistics
T@"NSNumber",C,V_responseVersion
useConnection:withFirstMessage:
T@"NSNumber",C,V_sendMode
userVisibleName
T@"NSNumber",C,V_storedSize
validateListenerForLocalObject:
T@"NSNumber",C,V_wantsDeliveryStatus
validationQueue
T@"NSNumber",R,N,V_dataLength
vifName
T@"NSObject<OS_dispatch_queue>",&,N,V_backingQueue
wantsBinaryPush
T@"NSObject<OS_dispatch_queue>",&,N,V_ivarQueue
wideWindowSMSTimeoutRateLimiter
T@"NSObject<OS_dispatch_queue>",&,N,V_opportunisticQueue
.cxx_destruct
BTLink
KeyTransparency
CTAdapter
SIM:didUpdateRegistrationState:
CTPNRByConsentCompletion
T@"CUTDeferredTaskQueue",R,N,V_sendAuthenticateRegistrationTask
ConnectivityMonitor
T@"KTVerifier",R,N,V_KTVerifier
CrossLayerLogging
T@"NSArray",C,V_responseHandles
ENID
T@"NSArray",R,N
FZIDType
T@"NSData",&,N,V_publicIdentity
GroupSessionKeyValueDelivery
T@"NSData",C,V_responseEngramID
HTTPMessageDeliveryClass
T@"NSData",R,N,V_deviceMetadata
IDQueryCompletedWithFromURI:idStatusUpdates:service:success:error:
T@"NSData",R,V_publicPreKeyData
IDSCoreAnalyticsWiProxDidSendData:
T@"NSDate",&,N,V_lastConnection
IDSDeviceConnectionForService:wasSuccessful:clientInitTime:clientOpenSocketCompletionTime:daemonOpenSocketTime:daemonOpenSocketCompletionTime:firstPacketReceiveTime:connectionInitTime:
T@"NSDictionary",C,V_selfHandle
IDSGenericConnectionForLink:connectionSetupStartTime:firstPacketReceiveTime:connectionType:success:errorCode:
T@"NSMutableSet",&,N,V_sessions
IDSQRAllocation:result:hasRecipientAccepted:payloadSize:topic:service:
T@"NSNumber",C,V_linkSuggestion
IDSRealTimeEncryptionServiceName:activeParticipants:firstReceivedPacketMKMtimeDelta:
T@"NSNumber",C,V_responseExpiry
IDSRealTimeEncryptionServiceName:activeParticipants:missingPrekeys:
T@"NSNumber",C,V_responseStatus
IDSSessionID
T@"NSString",&,N,V_cbuuidString
IDSVersion
T@"NSString",&,N,V_resourcePath
IDSWiProxDidDisconnectFromPeer:resultCode:
T@"NSString",C,N,V_absintheUDID
IDStatusQueryController
T@"NSString",C,N,V_connectionID
IMSI
T@"NSString",C,V_conversationID
IPsecLink
T@"NSString",C,V_productVersion
KTAccountKeyByService
T@"NSString",R,N,V_smsSignature
KTDeviceSignature
T@"QRStreamInfo",&,V_streamInfo
KTVerifier
T@?,C,N,V_block
NGMVersion
TB,N,V_isNearby
OSVersion
TB,N,V_shouldAllowCloudDelivery
OTRDecryptData:OTRToken:priority:error:
TB,N,V_shouldSupressRepairLogic
OTRSessionNegotiation:priority:duration:result:
TB,N,V_usedMMCS
OTRTestCallback:time:error:
TB,R,N,V_active
PLMN
TB,V_bypassDuet
PNRReasonByUserID
TI,N,V_SSRCRecv
PNRResponseReceivedWithResponseData:
TI,N,V_category
QRAllocator_oversized
TS,N,V_localCID
RealTimeEncryptionController
T^{__SecKey=},N,V_pushPublicKey
SHA1HexString
Td,N,V_duration
SIM:didDeactivateWithInfo:
Ti,N,V_keyIndex
SIMIdentifier
Tq,N,V_linkType
SIMPhoneUserSynchronizer
Tq,N,V_wrapMode
SMSLessMechanism
Tq,R,V_wrapMode
SSRCRecv
ServerMaterialExchange
__closeDatabase
StableEncryptionController
_accountBuilder
T#,R
_accountsLoaded
T*,R,N
_active
T@"<CUTMetricLogger>",R,N,V_productionMetricLogger
_activityStatus
T@"<FTPasswordManager>",&,N,V_passwordManager
_authenticateMessageForRequest:
T@"<IDSAPNSAckTrackerDelegate>",&,N,V_delegate
_broadcastBlock
T@"<IDSActivityStateProvider>",&,N,V_stateProvider
_btUUID
T@"<IDSCoalesceMessageQueueManagerDelegate>",W,V_delegate
_cbuuid
T@"<IDSDGroupContextNotifyingObserverDelegate>",&,N,V_delegate
_checkAndRunClientChannelTests:
T@"<IDSDSession>",W,N,V_delegate
_checksumFailed
T@"<IDSDSignInResponderDeviceSupport>",R,N,V_deviceSupport
_cleanupExpiredIncomingMessages
T@"<IDSDaemonMIGInterfaceDelegate>",W,V_delegate
_cleanupIncomingMessageDatabase
T@"<IDSDeviceCertificationRepairDelegate>",W,N,V_delegate
_cleanupOutgoingMessageDatabase
T@"<IDSGroupServerPushHandler>",&,N,V_pushHandler
_cloudKitRecordForDeviceRecord:
T@"<IDSKeyTransparencyRegistrationDataSource>",R,N,V_registrationDataSource
_commandContext
T@"<IDSLinkDelegate>",W,V_alternateDelegate
_controlChannel
T@"<IDSMPFullDeviceIdentityContainerEncrypter>",&,N,V_fullDeviceIdentityEncrypter
_conversationID
T@"<IDSMPFullDeviceIdentitySigner>",R,N,V_fullDeviceIdentitySigner
_criticalLoadPairedDeviceArray:
T@"<IDSMultiplexerTransportParticipantIDConverter>",&,N
_currentMetrics
T@"<IDSPeerIDNetworkChangeNotifier>",&,N,V_networkChangeNotifier
_decodeMapData:
T@"<IDSPeerIDQueryHandler>",&,N,V_queryHandler
_deviceIDToPeer
T@"<IDSPeerIDQueryHandlerDelegate>",W,N,V_delegate
_deviceMetadata
T@"<IDSPersistentMapPersister>",&,N,V_destinationPersister
_deviceUniqueID
T@"<IDSPersistentMapPersister>",&,N,V_persister
_enableStrictSecureDecodingMode
T@"<IDSPhoneNumberValidationStateMachineMessageDelivery>",&,N,V_httpMessageDelivery
_encryptionType
T@"<IDSPipelineComponent>",&,N,V_nextComponent
_errorByService
T@"<IDSPreflightStackStore>",&,N,V_preflighStackStore
_errorContainer
T@"<IDSPrioritizedTokenList>",&,N,V_prioritizedTokenList
_expirationDate
T@"<IDSRapportDeliveryControllerRapportClient>",&,N,V_rapportClient
_firstIncomingSYNSequenceNumber
T@"<IDSRegistrationKeyManagerKeyPairProvider>",&,N,V_keyPairProvider
_fromID
T@"<IDSTTLCacheDelegate>",W,N,V_delegate
_groupIDToMKMRecoveryRetryCount
T@"<IDSUTunConnectionDelegate>",W,N,V_delegate
_groupIdentifer
T@"<IDSUTunPeerDelegate>",W,N,V_delegate
_handlePseudonymProvisionError:
T@"<IDSUser>",R,N,V_phoneUser
_identityClassA
T@"<IMUserDefaults>",&,N,V_userDefaults
_identityClassD
T@"CKRecordZone",&,N,V_cachedRecordZone
_inUseUsernames
T@"CUTDeferredTaskQueue",R,N,V_broadcastAccountInfoChangedTask
_inviteRecvTime
T@"CUTDeferredTaskQueue",R,N,V_processAvailableNotificationsTask
_inviteTimedOut
T@"CUTDeferredTaskQueue",R,N,V_reallyUpdateRegistrationHeartbeatTask
_isBeingRemoved
T@"CUTDeferredTaskQueue",R,N,V_sendRegistrationTask
_isCloudEnabled
T@"CUTPromise",&,N,V_currentPromise
_isPendingFetch
T@"CUTPromiseSeal",&,N,V_seal
_isSMSWarningUp
T@"ENGroupContext",&,N,V_messagesGroupContext
_iterateOverConnectedListeners:
T@"FTMessageDelivery",&,N,V_messageDelivery
_keychainSchema
T@"FTMessageDelivery",R,V_messageDelivery
_ktLoggableData
T@"FTUserConfiguration",&,N,V_userConfiguration
_lastKnownAccountIDToPushTokens
T@"IDSAccountSync",&,N,V_accountSync
_lastResyncTime
T@"IDSActivityMonitorStateManager",&,N,V_stateManager
_legacyIdentity
T@"IDSAuthenticationCertificate",R,N,V_authenticationCertificate
_linkSuggestion
T@"IDSBaseMessage",&,N,V_message
_localMaterials
T@"IDSCTAdapter",&,N,V_CTAdapter
_mainID
T@"IDSCTPNR",&,N,V_CTPNR
_mapByStrippingMetadataFromMap:
T@"IDSCertifiedDeliveryReplayCommitter",R,N,V_replayCommitter
_membershipURIs
T@"IDSCloudKitContainer",R,N,V_ckContainer
_migrateFromSinglePairedDeviceToMultipleWithKeychainDictionary:
T@"IDSCloudKitKeyTransparencyDeviceRecord",&,N,V_lastSuccessfulUpsertDeviceRecord
_needsHandshake
T@"IDSConnectionContext",&,N,V_connectionContext
_negativeTTLForURI:fromService:
T@"IDSConnectivityMonitorMetricProperties",&,N,V_properties
_nonCloudWaking
T@"IDSCurrentServerTime",R,N
_noteShouldSynchronizeServices:
T@"IDSDAccountController",&,N,V_accountController
_nrMonitorQueue
T@"IDSDAccountController",R,N,V_accountController
_onlyAllowReads
T@"IDSDGroupStatusNotificationController",&,N,V_groupStatusNotificationController
_otrInitialized
T@"IDSDServiceController",&,N,V_serviceController
_params
T@"IDSDServiceController",R,N,V_serviceController
_peerCN
T@"IDSDSessionController",R,N,V_sessionController
_pendingDequeue
T@"IDSDSessionKeyValueDelivery",R,N,V_keyValueDelivery
_phoneAuthenticationCertificate
T@"IDSDSessionSharedState",&,N,V_sharedState
_phoneSignature
T@"IDSDXPCPairing",&,N,V_pairingCollaborator
_pipeRegistered
T@"IDSDataMigrationTracker",&,N,V_migrationTracker
_plugin
T@"IDSDeliveryController",&,N,V_deliveryController
_policy
T@"IDSDeviceCertificationRepair",&,N,V_deviceCertificationRepair
_powerlogDictionaryForPriority:
T@"IDSDuetInterface",&,N,V_duetInterface
_processAllocationStatusResult:
T@"IDSEncryptionQueue",&,N,V_defaultQueue
_productVersion
T@"IDSEncryptionQueue",&,N,V_urgentQueue
_publicIdentity
T@"IDSEndpoint",&,N,V_endpoint
_randomTemporaryPathWithSuffix:
T@"IDSFirewallStore",&,N,V_firewallStore
_reAuthenticate
T@"IDSGFTMetricsCollector",R,N,V_metricsCollector
_receiveHandler
T@"IDSGenericConnection",&,N,V_connection
_registrationAttemptRateLimiter
T@"IDSGroupEncryptionController",R,N,V_realTimeEncryptionController
_reload
T@"IDSGroupEncryptionKeyMaterial",&,N,V_currentLocalStableKeyMaterial
_remoteKeyToParticipantIDToData
T@"IDSGroupServer",&,N,V_groupServer
_removeDataFromKeychainForIdentifier:dataProtectionClass:error:
T@"IDSHCInfo",&,N,V_compressionInfo
_requiredUpdate
T@"IDSIDStatusQueryController",&,N,V_IDStatusQueryController
_responseExpiry
T@"IDSKTGossipPolicy",&,N,V_gossipPolicy
_responseStatus
T@"IDSKTRegistrationData",&,N,V_registeredKTData
_restoreMonitor
T@"IDSKTRegistrationDataManager",&,N,V_ktRegistrationDataManager
_saveToKeychain
T@"IDSKeyTransparencyPolicy",R,N,V_policy
_scheduledBlock
T@"IDSKeyTransparencyVerifier",&,N,V_transparencyVerifier
_sdCopy
T@"IDSKeychainKeyElectionStore",R,N,V_keychainElectionStore
_sendPublicKeyEncryptedMessage:
T@"IDSKeychainWrapper",R,N,V_keychainWrapper
_server
T@"IDSMPFullDeviceIdentityContainer",&,N,V_previousRegisteredIdentityContainer
_serverSim2Host
T@"IDSMPFullDeviceIdentityContainer",&,N,V_unregisteredIdentityContainer
_serviceMinCompatibilityVersion
T@"IDSMPFullLegacyIdentity",&,N,V_identityClassA
_setClientType:
T@"IDSMPFullLegacyIdentity",&,N,V_identityClassD
_shouldAddECKeysForServiceType:
T@"IDSMPFullLegacyIdentity",&,N,V_unSavedidentityClassA
_shouldHaveUnregisteredIdentity
T@"IDSMPFullLegacyIdentity",&,N,V_unSavedidentityClassD
_shouldReplyWithCertifiedDeliveryReceiptForDecryptionErrorType:
T@"IDSMPPublicDeviceIdentityContainer",&,N,V_identity
_sponsorAccount
T@"IDSMPPublicLegacyIdentity",R,N,V_remotePublicIdentity
_startDateMutex
T@"IDSMessageHashStore",&,N,V_messageHashStore
_startNetworkInterfaceListener:
T@"IDSNGMKeyRollingTicket",&,N,V_unappliedRollingTicket
_statisticsLock
T@"IDSNRDeviceBridge",&,N,V_idsNRDeviceBridge
_stopTrackingUserIntentOfAlias:
T@"IDSNRDeviceIdentifier",R,N,V_deviceIdentifier
_subscribedURIs
T@"IDSNRDeviceMonitor",&,N,V_deviceMonitor
_syncCredential
T@"IDSNRDevicePreferences",&,N,V_nrDevicePreferences
_terminusNearby
T@"IDSNanoRegistryPluginManager",&,N,V_idsNRPluginManager
_tokens
T@"IDSOTRController",R,N,V_OTRController
_totalBytesSent
T@"IDSOpportunisticCache",&,N,V_opportunisticCache
_updateCallerIDToTemporaryPhone
T@"IDSPairingManager",&,N,V_pairingManager
_updateListener
T@"IDSPeerIDManager",R,N
_updateSendData
T@"IDSPeerIDManager",W,N,V_peerIDManager
_usedCachedData
T@"IDSPersistentMap",&,N,V_peerMap
_userID
T@"IDSPersistentMapMergePolicy",&,N,V_mergePolicy
_validExpiryForURI:fromService:
T@"IDSPhoneNumberValidationStateMachine",R,N,V_phoneNumberValidator
_weight
T@"IDSPhoneUser",R,N,V_user
_zoneID
T@"IDSProtoKeyTransparencyLoggableData",&,N,V_ktLoggableData
abusive
T@"IDSProtobuf",&,N,V_protobuf
accountIdentity
T@"IDSPublicKeyStorage",&,N,V_publicKeyStorage
accountSecurityLevelForAccount:
T@"IDSPublicKeyStorageCache",&,N,V_cache
accountUpdated:
T@"IDSPushHandler",&,N,V_pushHandler
accountsChanged
T@"IDSQuickRelayAllocateMessage",C,V_request
activatePairedDeviceWithCBUUID:
T@"IDSRateLimiter",&,N,V_failedTokenCache
addMessageHash:
T@"IDSRateLimiter",&,N,V_loadingRateLimiter
additionalQueryStringParameters
T@"IDSRateLimiter",&,N,V_rateLimiter
adminID
T@"IDSRateLimiter",&,N,V_selfHealRateLimiter
allKeys
T@"IDSRateLimiter",&,N,V_smallWindowSMSTimeoutRateLimiter
allowAnyNetwork
T@"IDSRateLimiter",R,N,V_rateLimiter
allowedServices
T@"IDSRealTimeEncryptionIdentity",R,N,V_identityForDevice
appendToString:
T@"IDSRegistration",R,N
applicationData
T@"IDSRegistrationConductor",R,N,V_registrationConductor
applicationPublicIdentitysCount
T@"IDSRegistrationController",R,N,V_registrationController
areAllAliasesSelectedOnAccount:
T@"IDSRegistrationKeyConfig",&,N,V_config
backoffProvider
T@"IDSRegistrationKeyManager",R,N,V_keyManager
base64EncodedStringWithOptions:
T@"IDSRegistrationKeyManagerIdentityDataSource",&,N,V_identityDataSource
bindTo:
T@"IDSRegistrationProperties",&,N,V_registrationProperties
bundleForClass:
T@"IDSRegistrationReasonTracker",R,N
cachedIsSameSIM
T@"IDSRestoreMonitor",&,N,V_restoreMonitor
candidateEmails
T@"IDSSIMPhoneUserSynchronizer",&,N,V_SIMPhoneUserSynchronizer
center:succeededAuthentication:
T@"IDSServer",R,N,V_server
checksumEnabled
T@"IDSServerBag",&,N,V_idsServerBag
cleanupSession:
T@"IDSServerBag",R,N,V_serverBag
clearIdentities
T@"IDSSigningKeyDiversifier",R,N,V_keyDiversifier
cloudConnection
T@"IDSSockAddrWrapper",C,N,V_remoteSA
coalesceDelayForTopic:sendMode:
T@"IDSSockAddrWrapper",R,&,N,V_remoteAddress
completionBlock
T@"IDSSocketPairMessage",&,N,V_underlyingSocketPairMessage
compressPayload
T@"IDSSystemAccountAdapter",&,N,V_systemAccountAdapter
confirmedEmails
T@"IDSTTLCache",&,N,V_ttlCache
connectDuration
T@"IDSTemporaryPhoneUser",R,V_user
connection:connectivityChanged:
T@"IDSTemporaryPhoneUserExpirationManager",&,N,V_expirationManager
connectionsByID
T@"IDSTransactionQueue",&,N,V_transactionQueue
containsPairedDeviceWithCBUUID:
T@"IDSURI",R,N,V_URI
context
T@"IDSURI",R,N,V_localURI
controlCategory
T@"IDSURI",R,N,V_toURI
conversationKey
T@"IDSUTunControlChannel",&,N,V_controlChannel
copyTo:
T@"IDSUTunController",&,N,V_utunController
currentEntries:
T@"IDSUserAccountSynchronizer",&,N,V_userAccountSynchronizer
daemonConnected
T@"IDSUserStore",&,N,V_userStore
T@"IDSUserStore",R,N,V_userStore
decryptionBlock
T@"IDSValidationSession",&,N,V_validationSession
defaultPairedDeviceIdentityPair
T@"IDSXPCConnection",&,N,V_connection
dequeueMessage:
T@"IMDispatchTimer",&,N,V_phoneRepairTimer
destinationURIs
T@"IMLockdownManager",&,N,V_lockdownManager
deviceHeartbeat
T@"IMNetworkAvailability",&,N,V_availability
deviceRecertificationCompleted:
T@"IMSystemMonitor",R,N,V_systemMonitor
deviceUniqueIDs
T@"IMTimer",&,N,V_endSessionTimer
devices
T@"IMTimer",&,N,V_lastSendSMSTimer
didReceiveData:
T@"IMTimer",&,N,V_restoreTimer
disallowRefresh
T@"NSArray",&,N,V_activityMonitorEntitlements
dropAllMessagesWithoutAnyAllowedClassifierForDevice:completion:
T@"NSArray",&,N,V_aggregatableMessages
emptyStatesLock
T@"NSArray",&,N,V_aliasStrings
enabledAccounts
T@"NSArray",&,N,V_authenticationResponses
encryptedValues
T@"NSArray",&,N,V_duetIdentifiersOverride
encryptionState
T@"NSArray",&,N,V_interesting
endTime
T@"NSArray",&,N,V_primaryRegistrationURIs
existingRelayIP
T@"NSArray",&,N,V_publishedStreams
fakeMKMWrapping
T@"NSArray",&,N,V_requiredCapabilities
fetchPeerVerificationInfoForApplication:forURIs:withCompletion:
T@"NSArray",&,N,V_serverMessagingEntitlements
fetchRegistrationStatusProvider
T@"NSArray",&,N,V_supportedMessageTypes
firstIncomingPacketTime:forMKI:
T@"NSArray",&,N,V_uris
flushLinkProbingStatus:options:
T@"NSArray",&,V_events
generateLegacyIdentityWithIdentifier:dataProtectionClass:error:
T@"NSArray",C,N,V_keyTransparencyEnrolledURIs
generationError
T@"NSArray",C,N,V_uris
getAudioEnabled
T@"NSArray",C,V_accessoryIDs
getKeyTransparencyOptInEligiblityForApplication:withCompletion:
T@"NSArray",C,V_duetIdentifiersOverride
getParticipantsForGroup:ofType:
T@"NSArray",C,V_responseAccessTokens
groupID
T@"NSArray",C,V_responseRegistrations
groupSessionKeyValueDeliveryProviderCollaboratorWithCompletion:
T@"NSArray",C,V_responseServices
handleRegistrationStateChanged:
T@"NSArray",C,V_services
hasBuildVersion
T@"NSArray",R
hasEntitlement:
T@"NSArray",R,C,V_kms
hasOutdatedSKI:
T@"NSArray",R,N,V_eligibleServiceIdentifiers
hasSpaceForAggregatableMessage:
T@"NSArray",R,N,V_masterKeyMaterials
heartbeatCenter
T@"NSArray",R,N,V_stableKeyMaterials
identityVersion
T@"NSArray",R,N,V_trackedRegistrations
idsResponseCode
T@"NSArray",R,V_combinedMessages
initWithDictionary:sharedState:
T@"NSData",&,N,V_ENID
initWithFormat:
T@"NSData",&,N,V_bluetoothMACAddress
initWithName:qosClass:specific:
T@"NSData",&,N,V_clientContextData
initWithPayload:legacyIdentity:
T@"NSData",&,N,V_data
initWithQueue:connection:userStore:accountController:ctAdapter:
T@"NSData",&,N,V_deviceSignature
initWithSendMode:topic:maxSize:
T@"NSData",&,N,V_fromIdentity
initWithZoneID:
T@"NSData",&,N,V_localCallInfoData
internal_nukeTransparencyState:
T@"NSData",&,N,V_localNATIP
isDeviceInDualPhoneIdentityMode
T@"NSData",&,N,V_metadataBlob
isEngramEnabled
T@"NSData",&,N,V_outOfBandKey
isEqualToValue:
T@"NSData",&,N,V_participantInfo
isGuest
T@"NSData",&,N,V_publicKeyData
isLinkSuspended
T@"NSData",&,N,V_quickRelaySessionToken
isOptIn
T@"NSData",&,N,V_remoteCallInfoData
isProxy
T@"NSData",&,N,V_remoteNATIP
isReady
T@"NSData",&,N,V_signature
isSetup
T@"NSData",&,V_data
isSupportedEngramVersionNumber:
T@"NSData",C,N
isiCloudAccountMatchingAccount:
T@"NSData",C,N,V_absintheHello
keyPairProvider
T@"NSData",C,N,V_helloMessage
keySalt
T@"NSData",C,N,V_payload
keychainAdapter
T@"NSData",C,N,V_pushCert
keychainWrapper
T@"NSData",C,N,V_registrationCert
ktDataSignature
T@"NSData",C,N,V_responseAbsintheServKey
labelID
T@"NSData",C,N,V_responseSessionInfo
launchPromptWithButton:defaultUrl:alternateButton:alternateUrl:
T@"NSData",C,N,V_sessionInfoRequest
localCN
T@"NSData",C,V_accessToken
localKeyToEntry
T@"NSData",C,V_activeRelaySessionToken
lockdownManager
T@"NSData",C,V_csr
lowercaseString
T@"NSData",C,V_dataToEncrypt
mainAccountUUID
T@"NSData",C,V_encryptedData
markAllOutgoingMessagesAsUnsent
T@"NSData",C,V_existingRelayIP
maxSize
T@"NSData",C,V_existingRelaySignature
mergeID
T@"NSData",C,V_fromIdentity
message
T@"NSData",C,V_key
messageIdentifier:alternateCallbackID:forAccount:willSendToDestinations:skippedDestinations:registrationPropertyToDestinations:
T@"NSData",C,V_pairingToken
messageSenderID
T@"NSData",C,V_previousAccessToken
migrateToSecureStorageForClassC
T@"NSData",C,V_recipientPushToken
mostRecentIDSRegistrationReason
T@"NSData",C,V_relayIPv6
negativeRegistrationUpdateCache
T@"NSData",C,V_relaySessionKey
T@"NSData",C,V_relaySoftwareVersion
nrDeviceMonitor
T@"NSData",C,V_responseAdminAcccessToken
numberWithChar:
T@"NSData",C,V_signature
observerProxies
T@"NSData",C,V_targetToken
opportunisticDeliveryController
T@"NSData",R,C,V_encryptedData
options
T@"NSData",R,N
packetLossTimer
T@"NSData",R,N,V_cert
pairWithSPPLink
T@"NSData",R,N,V_data
pairing
T@"NSData",R,N,V_deviceKey
participantInfo
T@"NSData",R,N,V_encryptedMirageHandshakeBlob
passwordUpdated
T@"NSData",R,N,V_payloadMetadata
payloadMetadata
T@"NSData",R,N,V_publicNGMIdentityData
peripheral:didDiscoverServices:
T@"NSData",R,N,V_pushToken
phoneNumberValidationRetryCount
T@"NSData",R,N,V_serverKey
portMap
T@"NSData",R,N,V_transparencyBlob
preventNewQuery
T@"NSDate",&,N,V_evictionDate
privateDeviceDataForKVSSuccess:
T@"NSDate",&,N,V_lastSelfVerifyDate
processFairplayHostSessionInfo:
T@"NSDate",&,N,V_phoneNumberValidationStartDate
protectionClass
T@"NSDate",&,N,V_smsSendDate
protocolChecker
T@"NSDate",&,N,V_validateContextDate
prototypingOnly
T@"NSDate",C,N,V_dependentRegistrationsTTL
pseudonymURIMap
T@"NSDate",C,N,V_registrationDate
publicClassCKey
T@"NSDate",C,V_expirationDate
pushCertificate
T@"NSDate",R,N
queryAndSubmitStatusForAccounts
T@"NSDictionary",&,N,V_accountKeyByService
queryRetryNumberForBadSignature
T@"NSDictionary",&,N,V_clientDatasByServiceType
queuedIncomingMessageDictionary
T@"NSDictionary",&,N,V_dataProviderByRealm
realTimeEncryptionPublicKeyData
T@"NSDictionary",&,N,V_destinationsLightweightStatus
receivedAPNSAckForMessage:guid:
T@"NSDictionary",&,N,V_endpointsToEncryptedData
registerAccount
T@"NSDictionary",&,N,V_errorByService
registerInfo:requireSilentAuth:
T@"NSDictionary",&,N,V_migrationContext
registrationHBI
T@"NSDictionary",&,N,V_preferences
relayIP
T@"NSDictionary",&,N,V_relayInitiate
release
T@"NSDictionary",&,N,V_resourceMetadata
removeDelegate:
T@"NSDictionary",&,N,V_subscribedStreams
removeMessages:
T@"NSDictionary",&,N,V_urisToParticipantIDs
removeParticipantsForSessionID:
T@"NSDictionary",C,N,V_remoteDeviceEncryptionInfo
reportFirstMKMReceivedFromPush:
T@"NSDictionary",C,V_authenticationInfo
resetAndResynchronizeEverything
T@"NSDictionary",C,V_message
responseCommand
T@"NSDictionary",C,V_protobuf
responseHandles
T@"NSDictionary",C,V_responseIdentities
responseVersion
T@"NSDictionary",C,V_spamMessage
retries
T@"NSDictionary",R,&,N
T@"NSDictionary",R,N
T@"NSDictionary",R,N,V_accountInfo
saPortHostOrder
T@"NSDictionary",R,N,V_cumulativeOutgoingStatistics
saveIdentityContainer:withIdentifier:dataProtectionClass:error:
T@"NSDictionary",R,N,V_serviceToOptInManager
sdNumberNoClose
T@"NSError",&,N,V_connectError
sendKeyMaterialMessageDataOverQR:toDestination:completionBlock:
T@"NSError",&,N,V_generationError
sendPublicKeyToGroup:sessionID:
T@"NSError",&,N,V_registeredDeserializationError
seqSend
T@"NSError",&,N,V_rollingError
serviceAllowLiveMessageDelivery
T@"NSError",&,N,V_unregisteredKeychainError
sessionDuration
T@"NSMapTable",&,N,V_CTPNRByConsentCompletion
T@"NSMapTable",&,N,V_realmByListener
setAccessToken:
T@"NSMutableArray",&,N,V_cachedDataForClient
setAccountBlob:
T@"NSMutableArray",&,N,V_daemonClients
setAccountSync:
T@"NSMutableArray",&,N,V_infos
setAccountUUID:
T@"NSMutableArray",&,N,V_peripheralManagers
setAddressPair:
T@"NSMutableArray",&,N,V_registrations
setBag:
T@"NSMutableArray",&,N,V_serviceSignatures
setCancellable:
T@"NSMutableArray",&,N,V_uris
setClientReady:
T@"NSMutableArray",R,N,V_handlers
setCountryCode:
T@"NSMutableArray",R,N,V_registrations
setCurrentDeviceRecordsPromise:
T@"NSMutableDictionary",&,N,V_PNRReasonByUserID
setCurrentSize:
T@"NSMutableDictionary",&,N,V_backingStore
setDeviceModel:
T@"NSMutableDictionary",&,N,V_cachedTokensBySessionID
setDidFallback:
T@"NSMutableDictionary",&,N,V_clientRemoteObjectByActivity
setDidWakeHint:
T@"NSMutableDictionary",&,N,V_completionBlocksToURIsMap
setEndpointMap:
T@"NSMutableDictionary",&,N,V_disasterModeTokens
setExpiryEpoch:
T@"NSMutableDictionary",&,N,V_endpointQueryListeners
setForceLegacy:
T@"NSMutableDictionary",&,N,V_incomingDataFragments
setFullDeviceIdentityEncrypter:
T@"NSMutableDictionary",&,N,V_listenersByActivity
setGroupServer:
T@"NSMutableDictionary",&,N,V_pushTokenToSKMsMapping
setHasKeyIndex:
T@"NSMutableDictionary",&,N,V_rateLimitMap
setIdsPriority:
T@"NSMutableDictionary",&,N,V_serviceIndexToKTRegDataConfigs
setInviteTimer:
T@"NSMutableDictionary",&,N,V_stateMachineByUserID
setIsInitiator:
T@"NSMutableDictionary",&,N,V_topicStringToSubscribedInfo
setIsTemporary:
T@"NSMutableDictionary",&,N,V_validationInfoByMechanism
setKeyTransparencyEnrolledURIs:
T@"NSMutableDictionary",R,&,N,V_connectionsByID
setLastSentSeq:
T@"NSMutableDictionary",R,N,V_cachedMap
setMessageData:
T@"NSMutableDictionary",R,N,V_groupIDToCapabilityToParticipantPushTokens
setMessageUUID:
T@"NSMutableDictionary",R,N,V_groupIDToStableKeyMaterialCache
setNetworkCode:
T@"NSMutableDictionary",R,N,V_localKeyToEntry
setPNRDelegate:
T@"NSMutableSet",&,N,V_aliases
setPersistentEnrollmentHandler:
T@"NSMutableSet",&,N,V_familyHandles
setPid:
T@"NSMutableSet",&,N,V_highPriorityConnectionSendingSet
setPrimaryRegistrationDSHandle:
T@"NSMutableSet",&,N,V_listeningOnActivities
setProductName:
T@"NSMutableSet",&,N,V_serviceTypes
setRateLimiter:
T@"NSMutableSet",&,N,V_userConsentDeniedForCTPNR
setRegisteredIdentityContainer:
T@"NSMutableSet",&,V_pendingResponseTokens
setRelayCancel:
T@"NSMutableSet",C,N,V_stableKeyMaterials
setRemoteDeviceVersion:version:
T@"NSMutableSet",R,N,V_localMaterials
setRepairTimer:
T@"NSNumber",&,N,V_commandContext
setResponseTTL:
T@"NSNumber",&,N,V_generationCounter
setServerMessagingEntitlements:
T@"NSNumber",&,N,V_isInitiator
setServiceName:
T@"NSNumber",&,N,V_joinType
setServicesPreferringInfraWiFi:
T@"NSNumber",&,N,V_outputBytesPerSecond
setShouldBoost:
T@"NSNumber",&,N,V_parentVersion
setSmsSendDate:
T@"NSNumber",&,N,V_qrError
setStoredIncomingFamilyMessage:
T@"NSNumber",&,N,V_remoteNATType
setSubservicesByPrimaryService:
T@"NSNumber",&,N,V_remoteUsePhoneContinuityLocalMessage
setTestOptions:
T@"NSNumber",&,N,V_sendMode
setTtl:
T@"NSNumber",&,N,V_shouldHaveUnregisteredIdentity
setUrgentQueue:
T@"NSNumber",C,N,V_IDSVersion
setWakingPushPriority:forTopic:
T@"NSNumber",C,N,V_dependentRegistrationAuthRetries
setWithObjects:
T@"NSNumber",C,N,V_identityVersion
shouldProtectTrafficUsingClassA
T@"NSNumber",C,N,V_phoneNumberValidationRetryCount
signData:error:
T@"NSNumber",C,N,V_responseStatus
signingIdentity
T@"NSNumber",C,V_allocateProtocolVersion
T@"NSNumber",C,V_attemptCount
startLocalSetup
T@"NSNumber",C,V_chunkNumber
stopAdvertising
T@"NSNumber",C,V_dataLength
stopTrackingActiveRegistration:
T@"NSNumber",C,V_deliveryTime
stringByAppendingPathComponent:
T@"NSNumber",C,V_groupMemberCount
succeed
T@"NSNumber",C,V_invitationRetryCount
supportsHandoff
T@"NSNumber",C,V_isInternal
systemDidLogout
T@"NSNumber",C,V_isNewUPlusOneSession
systemSupportsRegistrationInfo:
T@"NSNumber",C,V_linkScore
timeout
T@"NSNumber",C,V_messageType
T@"NSNumber",C,V_originalTimestamp
ttlCache:didEvictObject:forKey:
T@"NSNumber",C,V_priority
unregisterInfo:
T@"NSNumber",C,V_pushPriority
updateAuthorizationCredentials:token:forAccount:messageContext:
T@"NSNumber",C,V_qrReason
updateRelevantEncryptedDataBlob
T@"NSNumber",C,V_relayHighPriorityPort
uppercaseString
T@"NSNumber",C,V_responseHBI
T@"NSNumber",C,V_selfAllocationCount
userAgentString
T@"NSNumber",C,V_serviceMinCompatibilityVersion
usersWithRealm:
T@"NSNumber",C,V_version
validateProfile
T@"NSNumber",R,N,V_NGMVersion
version
T@"NSNumber",R,N,V_transparencyStatus
wantsAPSRetries
T@"NSObject<OS_dispatch_queue>",&,N,V_callbackQueue
warning
T@"NSObject<OS_dispatch_queue>",&,N,V_nrMonitorQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_priorityQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
T@"NSObject<OS_dispatch_queue>",&,N,V_registrationQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_saveQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_serialPersistQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_xpcQueue
T@"NSObject<OS_dispatch_queue>",N
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
T@"NSObject<OS_dispatch_source>",&,N,V_databaseCloseTimer
T@"NSObject<OS_dispatch_source>",&,N,V_evictionTimer
T@"NSObject<OS_dispatch_source>",&,N,V_saveTimer
T@"NSObject<OS_nw_connection>",&,N,V_nwConnection
T@"NSObject<OS_nw_connection>",&,N,V_serviceConnection
T@"NSObject<OS_nw_endpoint>",&,N,V_defaultPairedDeviceEndpoint
T@"NSObject<OS_nw_service_connector>",&,N,V_cloudServiceConnector
T@"NSObject<OS_nw_service_connector>",&,N,V_serviceConnector
T@"NSSet",&,N
T@"NSSet",&,N,V_allowedTrafficClasses
T@"NSSet",&,N,V_decodableClasses
T@"NSSet",&,N,V_destinations
T@"NSSet",&,N,V_familyDevices
T@"NSSet",&,N,V_familyMembers
T@"NSSet",&,N,V_impactedServices
T@"NSSet",&,N,V_policyTrafficClassifiers
T@"NSSet",&,N,V_topicsToListenOn
T@"NSSet",C,N,V_masterKeyIdentifiersReceivedByClient
T@"NSSet",C,N,V_masterKeyMaterials
T@"NSSet",C,N,V_membershipURIs
T@"NSSet",C,N,V_stableKeyIdentifiersSentToClient
T@"NSSet",R,N
T@"NSSet",R,N,V_allAdHocServices
T@"NSSet",R,N,V_gossipEnabledServiceIdentifiers
T@"NSSet",R,N,V_membershipURIs
T@"NSSet",R,V_serverDesiredMaterials
T@"NSString",&
T@"NSString",&,N
T@"NSString",&,N,SsetDSHandle:,V_dsHandle
T@"NSString",&,N,V_accountDescription
T@"NSString",&,N,V_accountDisplayName
T@"NSString",&,N,V_accountID
T@"NSString",&,N,V_activity
T@"NSString",&,N,V_activitySubActivity
T@"NSString",&,N,V_activityTopic
T@"NSString",&,N,V_appleID
T@"NSString",&,N,V_buildOfIdentityGeneration
T@"NSString",&,N,V_buildOfUnregisteredIdentityGeneration
T@"NSString",&,N,V_bundleID
T@"NSString",&,N,V_cbuuid
T@"NSString",&,N,V_clientID
T@"NSString",&,N,V_clientProcessName
T@"NSString",&,N,V_controlChannelVersion
T@"NSString",&,N,V_countryCode
T@"NSString",&,N,V_deviceID
T@"NSString",&,N,V_deviceModel
T@"NSString",&,N,V_deviceName
T@"NSString",&,N,V_directory
T@"NSString",&,N,V_featureID
T@"NSString",&,N,V_filePath
T@"NSString",&,N,V_fromID
T@"NSString",&,N,V_groupID
T@"NSString",&,N,V_guid
T@"NSString",&,N,V_hardwareVersion
T@"NSString",&,N,V_identifier
T@"NSString",&,N,V_key
T@"NSString",&,N,V_localCN
T@"NSString",&,N,V_messageID
T@"NSString",&,N,V_messageSenderID
T@"NSString",&,N,V_messageUUID
T@"NSString",&,N,V_migrationDefaultKey
T@"NSString",&,N,V_name
T@"NSString",&,N,V_networkCode
T@"NSString",&,N,V_osVersion
T@"NSString",&,N,V_pairedDeviceCBUUIDString
T@"NSString",&,N,V_participantID
T@"NSString",&,N,V_peerCN
T@"NSString",&,N,V_personalCBUUIDString
T@"NSString",&,N,V_phoneBookNumber
T@"NSString",&,N,V_phoneNumber
T@"NSString",&,N,V_plistCachePath
T@"NSString",&,N,V_primaryRegistrationDSHandle
T@"NSString",&,N,V_productName
T@"NSString",&,N,V_pseudonymAlias
T@"NSString",&,N,V_relaySessionID
T@"NSString",&,N,V_remotePartyID
T@"NSString",&,N,V_responseMessage
T@"NSString",&,N,V_responsePresenceTopic
T@"NSString",&,N,V_scopeID
T@"NSString",&,N,V_service
T@"NSString",&,N,V_serviceIdentifier
T@"NSString",&,N,V_serviceName
T@"NSString",&,N,V_servicePushTopic
T@"NSString",&,N,V_serviceType
T@"NSString",&,N,V_sessionID
T@"NSString",&,N,V_signature
T@"NSString",&,N,V_subActivity
T@"NSString",&,N,V_subService
T@"NSString",&,N,V_temporaryPhoneEmail
T@"NSString",&,N,V_toDeviceID
T@"NSString",&,N,V_toURI
T@"NSString",&,N,V_topic
T@"NSString",&,N,V_uniqueID
T@"NSString",&,N,V_userID
T@"NSString",&,N,V_userUniqueIdentifier
T@"NSString",&,N,V_userVisibleName
T@"NSString",&,V_capability
T@"NSString",&,V_cbuuid
T@"NSString",&,V_homePlmn
T@"NSString",C
T@"NSString",C,N
T@"NSString",C,N,V_IMEI
T@"NSString",C,N,V_IMSI
T@"NSString",C,N,V_MEID
T@"NSString",C,N,V_PLMN
T@"NSString",C,N,V_UDID
T@"NSString",C,N,V_authToken
T@"NSString",C,N,V_awdTopic
T@"NSString",C,N,V_btUUID
T@"NSString",C,N,V_cbuuid
T@"NSString",C,N,V_clientID
T@"NSString",C,N,V_deviceName
T@"NSString",C,N,V_deviceUniqueID
T@"NSString",C,N,V_environment
T@"NSString",C,N,V_filename
T@"NSString",C,N,V_fromID
T@"NSString",C,N,V_groupID
T@"NSString",C,N,V_hardwareVersion
T@"NSString",C,N,V_idsDeviceConnectionUUID
T@"NSString",C,N,V_idsUserID
T@"NSString",C,N,V_keyPairSignature
T@"NSString",C,N,V_mainID
T@"NSString",C,N,V_messageUUID
T@"NSString",C,N,V_originalbtUUID
T@"NSString",C,N,V_osVersion
T@"NSString",C,N,V_outgoingStallDetectorName
T@"NSString",C,N,V_participantID
T@"NSString",C,N,V_peerResponseIdentifier
T@"NSString",C,N,V_profileID
T@"NSString",C,N,V_protocolVersion
T@"NSString",C,N,V_queueOneIdentifier
T@"NSString",C,N,V_regionBasePhoneNumber
T@"NSString",C,N,V_regionID
T@"NSString",C,N,V_remoteConnectionGUID
T@"NSString",C,N,V_responseCarrierToken
T@"NSString",C,N,V_responseDeviceScoreNonce
T@"NSString",C,N,V_responseMessage
T@"NSString",C,N,V_sessionID
T@"NSString",C,N,V_softwareVersion
T@"NSString",C,N,V_testData
T@"NSString",C,N,V_testOptions
T@"NSString",C,N,V_topic
T@"NSString",C,N,V_uniqueID
T@"NSString",C,N,V_vifName
T@"NSString",C,V_OSVersion
T@"NSString",C,V_accessoryID
T@"NSString",C,V_accountGUID
T@"NSString",C,V_adminID
T@"NSString",C,V_alternateGUID
T@"NSString",C,V_anonymizedSenderID
T@"NSString",C,V_appID
T@"NSString",C,V_authToken
T@"NSString",C,V_authenticationDataAuthToken
T@"NSString",C,V_authenticationDataUserID
T@"NSString",C,V_basePhoneNumber
T@"NSString",C,V_controlChannelVersion
T@"NSString",C,V_countryCode
T@"NSString",C,V_deviceName
T@"NSString",C,V_deviceScoreNonce
T@"NSString",C,V_errorMessage
T@"NSString",C,V_expiry
T@"NSString",C,V_forwardingSigAlgorithm
T@"NSString",C,V_fromID
T@"NSString",C,V_geo
T@"NSString",C,V_groupID
T@"NSString",C,V_guid
T@"NSString",C,V_hardwareVersion
T@"NSString",C,V_identifier
T@"NSString",C,V_language
T@"NSString",C,V_localDestinationDeviceUUID
T@"NSString",C,V_mainAccountGuid
T@"NSString",C,V_messageID
T@"NSString",C,V_model
T@"NSString",C,V_networkCode
T@"NSString",C,V_osVersion
T@"NSString",C,V_peerResponseIdentifier
T@"NSString",C,V_productBuildVersion
T@"NSString",C,V_productName
T@"NSString",C,V_profileID
T@"NSString",C,V_protocol
T@"NSString",C,V_queueOneIdentifier
T@"NSString",C,V_realm
T@"NSString",C,V_regionID
T@"NSString",C,V_relayBuildVersion
T@"NSString",C,V_reportingDataBlob
T@"NSString",C,V_requestIDStr
T@"NSString",C,V_requiredForMessaging
T@"NSString",C,V_responseAccessoryID
T@"NSString",C,V_responseBasePhoneNumber
T@"NSString",C,V_responseMessage
T@"NSString",C,V_responseRegionID
T@"NSString",C,V_route
T@"NSString",C,V_sender
T@"NSString",C,V_senderURI
T@"NSString",C,V_serviceUserID
T@"NSString",C,V_sessionIDStr
T@"NSString",C,V_sigAlgorithm
T@"NSString",C,V_softwareVersion
T@"NSString",C,V_sourcePeerID
T@"NSString",C,V_targetPeerID
T@"NSString",C,V_targetService
T@"NSString",C,V_tempUserID
T@"NSString",C,V_topic
T@"NSString",C,V_unknownSenderURI
T@"NSString",C,V_userAgent
T@"NSString",C,V_userHandle
T@"NSString",C,V_userID
T@"NSString",C,V_weight
T@"NSString",R
T@"NSString",R,&,N
T@"NSString",R,&,N,V_localConnectionGUID
T@"NSString",R,C
T@"NSString",R,C,N,V_account
T@"NSString",R,C,N,V_name
T@"NSString",R,C,N,V_service
T@"NSString",R,C,V_linkID
T@"NSString",R,GlinkTypeString
T@"NSString",R,N
T@"NSString",R,N,V_DSID
T@"NSString",R,N,V_IMSI
T@"NSString",R,N,V_OTRToken
T@"NSString",R,N,V_PLMN
T@"NSString",R,N,V_destination
T@"NSString",R,N,V_errorCode
T@"NSString",R,N,V_guid
T@"NSString",R,N,V_identifier
T@"NSString",R,N,V_instanceID
T@"NSString",R,N,V_labelID
T@"NSString",R,N,V_peerIDManagerToken
T@"NSString",R,N,V_phoneNumber
T@"NSString",R,N,V_phoneToken
T@"NSString",R,N,V_portString
T@"NSString",R,N,V_promptMessage
T@"NSString",R,N,V_promptTitle
T@"NSString",R,N,V_radarClassification
T@"NSString",R,N,V_radarComponentId
T@"NSString",R,N,V_radarComponentName
T@"NSString",R,N,V_radarComponentVersion
T@"NSString",R,N,V_radarDescription
T@"NSString",R,N,V_radarReproducibility
T@"NSString",R,N,V_radarTitle
T@"NSString",R,N,V_recordID
T@"NSString",R,N,V_serverErrorDetail
T@"NSString",R,N,V_service
T@"NSString",R,N,V_serviceIdentifier
T@"NSString",R,N,V_signingTimestamp
T@"NSString",R,N,V_token
T@"NSString",R,N,V_userName
T@"NSString",R,N,V_username
T@"NSString",R,V_linkID
T@"NSString",R,V_pipePeripheralUUIDString
T@"NSString",V_buildVersion
T@"NSString",V_identifier
T@"NSString",V_productName
T@"NSUUID",&,N,V_clientUUID
T@"NSUUID",&,N,V_deviceIdentifier
T@"NSUUID",C,V_deviceUniqueID
T@"NSUUID",C,V_instanceID
T@"NSUUID",R,N
T@"NSUUID",R,N,V_nrDeviceIdentifier
T@"NSUUID",R,V_uuid
T@"NSUbiquitousKeyValueStore",&,N,V_kvStore
T@"NSXPCConnection",&,N,V_connection
T@"NSXPCListener",&,N,V_listener
T@"RPCompanionLinkClient",R,N,V_companionLinkClient
T@"TransparencyDaemon",&,N,V_transparencyDaemon
T@"UNUserNotificationCenter",&,N,V_notificationCenter
T@"_IDSSessionConnection",&,N,V_connection
T@,&,N,V_currentLocalMasterKeyMaterial
T@,&,N,V_listenerID
T@,&,N,V_nextLocalMasterKeyMaterial
T@,&,N,V_sessionController
T@,R,N
T@?,C,N,V_accountBuilder
T@?,C,N,V_automaticResetBlock
T@?,C,N,V_backoffProvider
T@?,C,N,V_broadcastBlock
T@?,C,N,V_completionBlock
T@?,C,N,V_decryptionBlock
T@?,C,N,V_encryptionBlock
T@?,C,N,V_fallbackBlock
T@?,C,N,V_inFlightHeartbeatBlock
T@?,C,N,V_inFlightResetBlock
T@?,C,N,V_inFlightSMSTimeoutBlock
T@?,C,N,V_invalidationHandler
T@?,C,N,V_migrationBlock
T@?,C,N,V_openSocketCompletionHandler
T@?,C,N,V_otrTestBlock
T@?,C,N,V_packetBufferHandler
T@?,C,N,V_progressBlock
T@?,C,N,V_readHandler
T@?,C,N,V_resolvedEndpointsDidUpdateHandler
T@?,C,N,V_scheduledBlock
T@?,C,N,V_sendBlock
T@?,C,N,V_timerBlock
T@?,C,N,V_validationMessageSendBlock
T@?,C,N,V_willSendBlock
T@?,C,N,V_writeHandler
T@?,C,V_ackBlock
T@?,C,V_completionBlock
T@?,C,V_connectReadyHandler
T@?,R,N,V_fileCleanupBlock
T@?,R,N,V_queryCompletionBlock
T@?,R,N,V_readHandler
TAB,N,V_connectionTimerCleared
TAB,N,V_endSessionTimerCleared
TAB,N,V_inviteTimerCleared
TB,N
TB,N,V_activityStatus
TB,N,V_allowPairingIdentities
TB,N,V_allowProxyQueries
TB,N,V_allowRegenerateRegisteredIdentity
TB,N,V_alwaysSkipSelf
TB,N,V_avoidMainQueue
TB,N,V_avoidMainQueueOverrideToNO
TB,N,V_broadcastNeedsClientAck
TB,N,V_broadcastPerformed
TB,N,V_bypassDuet
TB,N,V_cachedManateeAvailability
TB,N,V_checksumEnabled
TB,N,V_checksumFailed
TB,N,V_clientReady
TB,N,V_commCenterDead
TB,N,V_completedMigration
TB,N,V_compressPayload
TB,N,V_compressed
TB,N,V_connecting
TB,N,V_deniedToSend
TB,N,V_didFallback
TB,N,V_didInvalidate
TB,N,V_didReceiveReestablishmentRequest
TB,N,V_didReceiveSIMSetupCompleteNotification
TB,N,V_didRegisterWithKTAccountKey
TB,N,V_didWakeHint
TB,N,V_disableEncryption
TB,N,V_disableRemoteDeviceEncryption
TB,N,V_disabledAutomatically
TB,N,V_disallowQueryRefresh
TB,N,V_displayingAddNumberPrompt
TB,N,V_enableOTR
TB,N,V_enableQuickRelay
TB,N,V_enableSKE
TB,N,V_enableSingleChannelDirectMode
TB,N,V_encryptionEnabled
TB,N,V_encryptionInitialized
TB,N,V_entitledForAllTopics
TB,N,V_expectsPeerResponse
TB,N,V_fakeMKMWrapping
TB,N,V_finishedRegistration
TB,N,V_forceAttachmentMessage
TB,N,V_forceInternetInvitation
TB,N,V_forceLegacy
TB,N,V_forceLegacyPK
TB,N,V_forceOnePerFanout
TB,N,V_forceRoll
TB,N,V_hasAcceptedSMSRequest
TB,N,V_hasBeenProvisioned
TB,N,V_hasEndedSession
TB,N,V_hasMatchingURIs
TB,N,V_hasMoreData
TB,N,V_hasNotifiedSuccess
TB,N,V_hasRegisteredContainer
TB,N,V_inviteNeedsDelivery
TB,N,V_isAdvertising
TB,N,V_isAltAccountPairing
TB,N,V_isAlwaysConnected
TB,N,V_isBeingHandedOff
TB,N,V_isBeingRemoved
TB,N,V_isBuildingContext
TB,N,V_isClassCConnected
TB,N,V_isCloudConnected
TB,N,V_isCloudEnabled
TB,N,V_isConnected
TB,N,V_isControlChannel
TB,N,V_isDefaultPairedDevice
TB,N,V_isDefaultPairedDevicePairedLocally
TB,N,V_isDefaultPairedDevicePairedRemotely
TB,N,V_isDefaultUser
TB,N,V_isDirectMsgChannel
TB,N,V_isDisabled
TB,N,V_isInServerBackoffMode
TB,N,V_isInUPlusOneMode
TB,N,V_isInitiator
TB,N,V_isJoinAllocation
TB,N,V_isLocalSetUpInProgress
TB,N,V_isMagnetIndicatingPeerIsAwake
TB,N,V_isMigratedSignature
TB,N,V_isNegotiating
TB,N,V_isPeerAlwaysConnected
TB,N,V_isPendingFetch
TB,N,V_isPublicKeyDistributed
TB,N,V_isReady
TB,N,V_isReadyForEncrypting
TB,N,V_isRealTime
TB,N,V_isRegistered
TB,N,V_isRegistrationActive
TB,N,V_isReinitiate
TB,N,V_isSMSWarningUp
TB,N,V_isScreenSharingSession
TB,N,V_isSuspended
TB,N,V_isTestRunning
TB,N,V_isVideoPaused
TB,N,V_linkLayerConnected
TB,N,V_listening
TB,N,V_localSetupInProgress
TB,N,V_manualQueueRemoval
TB,N,V_midSynchronize
TB,N,V_needsMigration
TB,N,V_needsProvisioning
TB,N,V_needsRenewal
TB,N,V_needsToCheckPhoneNumberState
TB,N,V_nonCloudWaking
TB,N,V_nonWaking
TB,N,V_onlyAllowReads
TB,N,V_pairWithSPPLink
TB,N,V_pendingCloudEnable
TB,N,V_pendingDependentCheck
TB,N,V_pluginImplementsWatchDidStartAdvertising
TB,N,V_pluginImplementsWatchDidStopAdvertising
TB,N,V_remoteAssumeRemoteDeviceEncryption
TB,N,V_requireBluetooth
TB,N,V_requireLocalWiFi
TB,N,V_runningSimpleAuthentication
TB,N,V_sendOnePerToken
TB,N,V_sentToRemotes
TB,N,V_serviceAllowLiveMessageDelivery
TB,N,V_serviceAllowLocalDelivery
TB,N,V_serviceAllowProxyDelivery
TB,N,V_serviceAllowWiProxDelivery
TB,N,V_serviceIsDSBased
TB,N,V_serviceUseiMessageCallerID
TB,N,V_serviceWantsReflectedSend
TB,N,V_serviceWantsTinkerDevices
TB,N,V_sharedSession
TB,N,V_sharedSessionHasJoined
TB,N,V_shouldAllowLiveMessageDelivery
TB,N,V_shouldAutoRegisterAllHandles
TB,N,V_shouldConnectToQRServer
TB,N,V_shouldEnforceRemoteTimeout
TB,N,V_shouldIncludeDefaultDevice
TB,N,V_shouldListen
TB,N,V_shouldPostNotifications
TB,N,V_shouldProtectTrafficUsingClassA
TB,N,V_shouldQuickSwitchAfterIPSecConnected
TB,N,V_shouldRegisterUsingDSHandle
TB,N,V_shouldReregOnManateeAvailability
TB,N,V_shouldSetAllowlistUUIDForStreamingSocket
TB,N,V_shouldUseAbsinthe
TB,N,V_shouldUseCrossLayerLogging
TB,N,V_shouldUseIPsecLink
TB,N,V_shouldUseIPsecLinkForDefaultPairedDevice
TB,N,V_silentlyFailMessagesOnSwitch
TB,N,V_storedIncomingFamilyMessage
TB,N,V_success
TB,N,V_successful
TB,N,V_supportsLegacyOTRSessionToken
TB,N,V_suspendTraffic
TB,N,V_suspended
TB,N,V_terminusConnected
TB,N,V_terminusNearby
TB,N,V_terminusRegistered
TB,N,V_transient
TB,N,V_useBTDatagramPipe
TB,N,V_usePairingKey
TB,N,V_useQRDirectly
TB,N,V_useSecureQRControlMessage
TB,N,V_useStunMICheck
TB,N,V_validationContextDisabled
TB,N,V_verbosePerformanceLogging
TB,N,V_waitingForMigration
TB,N,V_wantsAppAck
TB,N,V_wantsCertifiedDelivery
TB,N,V_wantsDeliveryStatus
TB,N,V_wantsFirewallDonation
TB,N,V_wasInitiallySetupUsingIDSPairing
TB,N,V_wasPrimary
TB,R
TB,R,N
TB,R,N,V_allowBackup
TB,R,N,V_avoidMainQueue
TB,R,N,V_disableRegistration
TB,R,N,V_disallowCellularInterface
TB,R,N,V_disallowWifiInterface
TB,R,N,V_enableOTR
TB,R,N,V_forMessaging
TB,R,N,V_forRefresh
TB,R,N,V_forSending
TB,R,N,V_forceLegacy
TB,R,N,V_fullyAckd
TB,R,N,V_hasHardDeregistered
TB,R,N,V_hasMetadata
TB,R,N,V_hasPreferWiFiRequest
TB,R,N,V_isAsleep
TB,R,N,V_isAudioPaused
TB,R,N,V_isClassCConnected
TB,R,N,V_isCloudEnabled
TB,R,N,V_isConnected
TB,R,N,V_isEnabled
TB,R,N,V_isForced
TB,R,N,V_isIssuingDependentCheck
TB,R,N,V_isLoaded
TB,R,N,V_isNearby
TB,R,N,V_isPoweredOn
TB,R,N,V_isRegistered
TB,R,N,V_missingIdentity
TB,R,N,V_missingPrekey
TB,R,N,V_preventNewQuery
TB,R,N,V_resultExpected
TB,R,N,V_usedCachedData
TB,R,N,V_usedLastResortCache
TB,R,V_requireSignature
TB,V_abusive
TB,V_alwaysSkipSelf
TB,V_compressPayload
TB,V_encryptPayload
TB,V_enforceRemoteTimeouts
TB,V_expectsPeerResponse
TB,V_fireAndForget
TB,V_forcedLocal
TB,V_hasReceivedAPSDAck
TB,V_ignoreMaxRetryCount
TB,V_isBlackholed
TB,V_isFinalMessage
TB,V_isForced
TB,V_isJunked
TB,V_isLocal
TB,V_ktCapable
TB,V_liveMessageDelivery
TB,V_nonCloudWaking
TB,V_nonWaking
TB,V_requireBluetooth
TB,V_requireLocalWiFi
TB,V_responseValidated
TB,V_resultExpected
TB,V_sent
TB,V_useDictAsTopLevel
TB,V_wantsAppAck
TB,V_wantsCertifiedDelivery
TB,V_wantsDeliveryStatus
TB,V_wantsFirewallDonation
TB,V_wantsProgress
TB,V_wantsResponse
TC,N,V_activityPolicy
TC,N,V_latestLinkType
TC,N,V_loggingSequenceIncoming
TC,N,V_loggingSequenceOutgoing
TC,N,V_pushPriority
TC,R,N,V_dataProtectionClass
TI,N
TI,N,V_callID
TI,N,V_currentOutgoingFragmentedMessageID
TI,N,V_dataProtectionClass
TI,N,V_expectedNextIncomingSequenceNumber
TI,N,V_expectedNextOutgoingSequenceNumber
TI,N,V_firstIncomingSYNSequenceNumber
TI,N,V_fragmentationSize
TI,N,V_invitationRetryCount
TI,N,V_ktVersion
TI,N,V_lastSentAck
TI,N,V_lastSentSeq
TI,N,V_maxAllowedMessageSize
TI,N,V_messageID
TI,N,V_messageSequenceNumber
TI,N,V_negotiationCount
TI,N,V_ngmVersion
TI,N,V_numberOfAttemptsWithoutSuccessfulSend
TI,N,V_numberOfPreflights
TI,N,V_numberOfSuccessfulSends
TI,N,V_peerProtocolVersion
TI,N,V_quickRelayRequestsCount
TI,N,V_seqRecvStart
TI,N,V_seqSend
TI,N,V_seqSendStart
TI,N,V_serviceAdHocType
TI,N,V_state
TI,N,V_status
TI,N,V_uint32Key
TI,R,N
TI,R,N,V_groupSessionState
TI,R,N,V_keyType
TI,R,N,V_metadataSize
TI,R,N,V_numberOfBroadcastCacheMKM
TQ,N
TQ,N,V_bytesReceived
TQ,N,V_bytesSent
TQ,N,V_capabilityFlags
TQ,N,V_connectionCountHint
TQ,N,V_encryptionType
TQ,N,V_initialProcessTime
TQ,N,V_initialServerTime
TQ,N,V_localConnectionType
TQ,N,V_maxQueueSize
TQ,N,V_maxSize
TQ,N,V_mergePolicyType
TQ,N,V_minCompatibilityVersion
TQ,N,V_operation
TQ,N,V_packetsReceived
TQ,N,V_packetsSent
TQ,N,V_pairingProtocolVersion
TQ,N,V_policy
TQ,N,V_remoteConnectionType
TQ,N,V_sentMessageDataSize
TQ,R
TQ,R,N
TQ,R,N,V_clientUniquePID
TQ,R,N,V_currentDefaultDeviceLinkType
TQ,R,V_forParticipantID
TQ,R,V_headerOverhead
TQ,R,V_state
TS,N,V_remoteCID
TS,N,V_seqRecvStart
TS,N,V_seqSend
TS,N,V_seqSendStart
TS,N,V_serviceMinCompatibilityVersion
TS,R
TS,R,N
TS,R,N,V_keyIndex
T^[16C],N
T^[16C],R,N
T^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]},R,N,V_packetBuffer
T^{?={tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}{tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}},R,N
T^{IDSPortMap=[1024Q]QS},R,N
T^{SimpleUInt32ToObjectTable=i^{SimpleUInt32ToObjectTableElement}i},R,N
T^{_SecOTRSession=},N,V_backingOTRSessionRef
T^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v},N,V_newPg
T^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v},N,V_parentPg
T^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v},N,V_privateKey
T^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v},N,V_publicKey
T^{__SecKey=},N,V_fullIdentity
T^{__SecKey=},N,V_identity
T^{__SecKey=},N,V_publicIdentity
T^{__SecKey=},N,V_pushKey
Tc,N,V_firstGossipChance
Tc,N,V_maxRecipientMemory
Tc,N,V_subsequentGossipChance
Td,N,V_automaticResetInterval
Td,N,V_connectionInitTime
Td,N,V_connectionTimeout
Td,N,V_databaseLastUpdateTime
Td,N,V_endSessionTimeout
Td,N,V_endTime
Td,N,V_expiryEpoch
Td,N,V_firstDataPacketReceiveTime
Td,N,V_firstPacketReceiveTime
Td,N,V_inviteSentTime
Td,N,V_inviteTimeout
Td,N,V_lastBagRepairInterval
Td,N,V_lastCloudConnectedTime
Td,N,V_lastPacketTime
Td,N,V_lastStartTime
Td,N,V_lastSuccessfulSentTime
Td,N,V_linkLayerDisconnectTime
Td,N,V_notificationDelayInSeconds
Td,N,V_reestablishmentRequestReceiveTime
Td,N,V_selfVerifyThrottleTime
Td,N,V_startTime
Td,N,V_suspendTrafficCheckTime
Td,N,V_timeConnected
Td,N,V_timeDisconnected
Td,N,V_timeEnqueued
Td,N,V_timeSubscribed
Td,N,V_timestamp
Td,N,V_ttlInSeconds
Td,N,V_writeCoalescingDelay
Td,N,V_writeCoalescingLeeway
Td,R
Td,R,N
Td,R,N,V_creationTime
Td,R,N,V_rtt
Td,R,N,V_timestamp
Td,V_delay
Ti,N,V_absintheRetries
Ti,N,V_accountType
Ti,N,V_continuityConnectCount
Ti,N,V_excessiveCachingCount
Ti,N,V_excessiveCachingReportCounter
Ti,N,V_keyMaterialLength
Ti,N,V_manateeRetries
Ti,N,V_registrationType
Ti,N,V_responseStatus
Ti,N,V_retries
Ti,N,V_sd
Ti,N,V_sdCopy
Ti,N,V_sdNumberNoClose
Ti,N,V_sdOriginal
Ti,N,V_srtpProtocolVersion
Ti,N,V_stateFlags
Ti,N,V_supportedServicesToken
Ti,N,V_utunSocket
Ti,N,V_version
Ti,R
Ti,R,N
Ti,R,N,V_protocol
Ti,R,V_type
Ti,V_messageServerTimestamp
Tq,N,V_accessCount
Tq,N,V_activityTimestamp
Tq,N,V_broadcastID
Tq,N,V_clientType
Tq,N,V_command
Tq,N,V_compressionState
Tq,N,V_dataProtectionClass
Tq,N,V_idsPriority
Tq,N,V_messageCount
Tq,N,V_messagePriority
Tq,N,V_messageType
Tq,N,V_mostRecentIDSRegistrationReason
Tq,N,V_reason
Tq,N,V_registrationStateChangedCounter
Tq,N,V_registrationStatus
Tq,N,V_responseCode
Tq,N,V_socketTrafficClass
Tq,N,V_state
Tq,N,V_stateFlags
Tq,N,V_status
Tq,N,V_subsystem
Tq,N,V_transparencyVersion
Tq,N,V_transportType
Tq,N,V_ttl
Tq,R,N
Tq,R,N,V_alertType
Tq,R,N,V_encryptionType
Tq,R,N,V_mechanism
Tq,R,N,V_messageState
Tq,R,N,V_priority
Tq,R,N,V_transportType
Tq,R,N,V_versionNumber
Tq,R,V_expirationPhase
Tq,V_currentSize
Tq,V_maxSize
Tq,V_priority
Tq,V_reportAction
Tq,V_status
Tq,V_transparencyVersion
Tr*,N,V_specific
Tr*,R,N,V_metadata
T{?={tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}{tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}},N,V_encryptionStateStruct
T{_opaque_pthread_mutex_t=q[56c]},N,V_lock
T{os_unfair_lock_s=I},N,V_emptyStatesLock
T{os_unfair_lock_s=I},N,V_lock
T{os_unfair_lock_s=I},N,V_usersToTimersLock
UDID
URIWithPrefixedURI:
URIs
URLWithString:
UTF8String
UTunConnection
UTunPeer
UUID
UUIDString
WRMLinkRecommendation:primaryLinkType:magnetState:infraWiFiState:
XPCAdapter
_ACAccountWithTypeIdentifier:matchingCriteria:completion:
_ACAccountWithTypeIdentifier:matchingCriteria:error:
_BAACert
_BAACertTTLInMinutesFromServerBag
_BAAFetchTimeoutFromServerBag
_CTAdapter
_CTPNR
_CTPNRByConsentCompletion
_DSAuthIDForPushToken:
_DSID
_ENID
_FTCopyOptionallyGzippedData
_FTDataFromBase64String
_FTDataFromHexString
_FTOptionallyDecompressData
_FTStringFromBaseData
_FZBestGuessFZIDType
_FZIDType
_IDFromFZIDType:
_IDSDataFromBase64String:
_IDSEndpointTransparencyStatesForKTLoggableDatas:index:
_IDSEndpointTransparencyVerificationStateForKTResult:
_IDSPowerLogDictionary:info:
_IDSProtoKeyTransparencyTrustedDeviceForKeyTransparencyIndex:entry:
_IDSSessionID
_IDSVersion
_IDStatusForURI:fromService:
_IDStatusQueryController
_IDsFromURIs
_IMEI
_IMSI
_IMTransferServiceController
_KTAccountKeyByService
_KTAccountKeySigningTimeoutFromServerBag
_KTDataForIDSKeyTransparencyEntry:
_KTDatasForIDSKeyTransparencyEntries:
_KTDatasForIDSProtoKeyTransparencyTrustedDevices:serviceIdentifier:
_KTVerifier
_MEID
_MKMOverPushTime
_MKMOverQRQUICTime
_MKMOverQRTime
_NGMVersion
_OSVersion
_OTRController
_OTREnableTimerFiredOnMain
_OTRToken
_PLMN
_PNRReasonByUserID
_SIMPhoneUserSynchronizer
_SIMResponder
_SIMSetupDidComplete
_SSRCRecv
_SSRCSend
_UDID
_URI
_URIFromFZIDType:
_URIsFromIDs
_UTunDeliveryController
_WiFiBringUpCounter
__IMStripPotentialTokenURIs
__cleanupValidationInfoForSubsystemMechanism:
__dumpState
__failValidationQueueForSubsystemMechanism:
__failValidationQueueWithErrorResponseCode:forSubsystemMechanism:
__flushValidationQueueForSubsystemMechanism:
__imArrayByApplyingBlock:
__imArrayByFilteringWithBlock:
__imDataWithHexString:
__imDataWithRandomBytes:
__imDictionaryByFilteringWithBlock:
__imForEach:
__imHexString
__imRandomizeArray
__imSetByApplyingBlock:
__imSetFromArray
__mainThreadPostNotificationName:object:
__pairedDeviceStateUpdated
__purgeCachedCertsForSubsystemMechanism:
__queueValidationMessage:subsystem:sendBlock:
__reallySendAuthenticateRegistration
__reallySendDeregistration
__reallySendRegistration
__reallyUpdateRegistrationHeartbeat
__removeFromQueue:subsystem:
__saveStoreForDataProtectionClass:
__saveToKeychain
__sendMessage:
__setupServer
_absintheHello
_absintheRetries
_absintheUDID
_abusive
_acceptIncomingPushes
_acceptedDeviceToken
_acceptedDeviceUniqueID
_accessCount
_accessPairedDevicesInCriticalSectionWithBlock:
_accessToken
_accessoryID
_accessoryIDs
_accessoryRequests
_account
_accountBlob
_accountController
_accountDescription
_accountDisplayName
_accountGUID
_accountID
_accountIDMap
_accountIDMapLock
_accountIDs
_accountInfo
_accountKey
_accountKeyByService
_accountKeyManager
_accountRepair
_accountSync
_accountType
_accountsForUser:
_accountsWithService:
_accumulateStats:intoMessages:andBytes:
_ackBlock
_ackMessageWithSequenceNumber:forDeviceID:priority:dataProtectionClass:connectionType:guid:
_ackStateMachine
_activeAppleIDAccount
_activePairedDeviceCBUUID
_activeRegistrations
_activeRelayIP
_activeRelaySessionToken
_activity
_activityMonitorEntitlements
_activitySubActivity
_activityTimestamp
_activityTopic
_adHocServiceNames
_addAccount:
_addAccountDuringInitialSetup:
_addAliases:
_addAllocateRequestForDevice:requestID:
_addAllocationForSession:allocation:
_addCompletionBlock:forURIs:fromURI:fromService:context:
_addConnectStatus:relaySessionID:previousTime:qrReason:previousError:previousRelayIP:previousAccessToken:
_addEarlyListener:
_addIncomingGUIDsWithGuid:isLocal:hasLock:
_addIncomingMessageSize:forTopic:
_addMessageSize:forTopic:direction:dataProtectionClass:isResource:
_addMessageToStatistics:
_addOutgoingMessageSize:forTopic:dataProtectionClass:isResource:
_addPairedDevice:
_addPairedDevice:withInfo:completion:
_addPhoneNumbersToAccount:withNonPreferredPhoneAccounts:
_addPseudonym:
_addRemotePacketOutage
_addRequestWithID:cert:sig:csr:tag:
_addResponseToCache:sessionInfo:modifiedMessage:
_addStatsFromDict:toAggregate:
_addUser:
_additionalDictionary
_addressPair
_addressRetransmissionInterval
_adminID
_admissionDeniedTopics
_advertiseNow
_advertisingTypes
_aggregatableMessages
_aggregateMessages
_alertForHomeNumberIfNeededForSIMIdentifier:withPhoneNumber:
_alertType
_aliasStrings
_aliases
_allAdHocServices
_allCloudConnectionsAreIdle
_allConnectionsAreIdle
_allUserIntentWithDefaultReason:
_allocateProtocolVersion
_allocateResponses
_allocateType
_allocationTimeout
_allocations
_allowBackup
_allowHomeNumberForUser:simCarrierIdentifiers:userCarrierIdentifiers:
_allowPairingIdentities
_allowProxyQueries
_allowRegenerateRegisteredIdentity
_allowedTrafficClasses
_alternateDelegate
_alternateGUID
_anonymizedSenderID
_anyDeviceUsingSubService:superService:
_appID
_appearsToBeDSID
_appearsToBeEmail
_appearsToBePhoneNumber
_appearsToBePseudonymID
_appleID
_appleIDPrimaryDependentRegistrations
_applicationKeyManager
_applicationPublicIdentitys
_applicationVersion
_arbiter
_arrayForKey:
_assertQuickRelayForCloudMessaging
_assertedRealTimeMode
_asyncCleanupExpiredEntriesIfNeeded
_attachOrphanedPhoneAliases:toRecipientAccounts:withAccountsToEnable:
_attemptCount
_attemptToKickoffExpirationTimerForUser:
_attempts
_attributes
_authDSMessageForRegistration:realm:
_authMessageCompletionWithRegistration:withOverallSuccessBlock:overallFailure:
_authMessageForRegistration:
_authSubsystemForInfo:
_authToken
_authUsersMessageForRegistration:realm:
_authenticateAccount
_authenticationCertificate
_authenticationCerts
_authenticationDataAuthToken
_authenticationDataSig
_authenticationDataUserID
_authenticationInfo
_authenticationResponses
_authkitQueue
_automaticResetBlock
_automaticResetInterval
_availability
_availabilityCheck
_availableNotifications
_avoidMainQueueOverrideToNO
_awdStartTimestamp
_awdTopic
_awdUniqueId
_backingCache
_backingOTRSessionRef
_backingQueue
_backingStore
_backoffProvider
_bag
_bagLoaded:
_bagReloaded:
_basePhoneNumber
_baseRegistrationHBI
_baseSocketPairConnection
_bestGuessURI
_bestGuessURIFromCanicalizedID
_birthDate
_block
_blocksOnLinkConnect
_bluetoothLinkPreferences
_bluetoothMACAddress
_breakDictionaryIntoMultipleChunks:chunkSize:
_bringUpWiFi:
_broadcastAccountInfoChanged
_broadcastAccountInfoChangedTask
_broadcastAccountMessageBlock:
_broadcastID
_broadcastNeedsClientAck
_broadcastPendingMessageUpdateForMessage:fromID:toIdentifier:forTopic:messageContext:
_broadcastPerformed
_broadcastSessionStartWithSocket:
_broadcaster
_btLinkManager
_btuuidToSessionID
_buildOfIdentityGeneration
_buildOfUnregisteredIdentityGeneration
_buildVersion
_builderAvoidMainQueue:forceLegacy:
_bundleID
_bypassDuet
_bypassUTun
_bytes
_bytesReceived
_bytesSent
_cache
_cachedBytes
_cachedClientData
_cachedDataForClient
_cachedIsSameSIM
_cachedManateeAvailability
_cachedMap
_cachedNumberOfActiveParticipants
_cachedRecordZone
_cachedResultsForURIs:fromURI:fromService:
_cachedTokensBySessionID
_calculateRandomDelayForCloudMessagingRequest
_callBlocksWithResult:registrations:error:
_callDelegateWithBlock:
_callHandlerWithMessage:resetDataConnections:shouldObliterate:decryptionFailed:shouldTriggerCorruptionRecovery:
_callPairedDeviceDidConnectBlocksForUniqueID:withError:
_callStateChanged
_callbackEncryptionFailed
_callbackQueue
_callbackResetDataConnections
_callbackShouldObliterate
_callbackShouldTriggerCorruptionRecovery
_callingToken
_canBulkMessageWithParameters:
_canBulkMessageWithPriority:adHocServiceType:
_canDeliverSMSNow
_canReportMetric:
_canSendMessageLocally:toDestinations:withCommand:
_canSendMessageWithAccount:toDestination:
_canSendNonUrgentInternetMessageForTopic:
_cancelConnectionAndResetDataConnections:shouldObliterate:encryptionFailure:shouldTriggerCorruptionRecovery:
_cancelExpirationTimerForUser:
_cancelScheduledHeartbeat
_cancelScheduledSMSTimeout
_canceledConnection
_candidateEmails
_capability
_capabilityFlags
_captureDiagnosticsForFailedRegistration:registrationError:
_carrierNonce
_category
_cbuuidString
_cbuuidToBTOutOfBandKeyDictionary
_cbuuidToLinks
_cbuuidsWithIsPairingValue:
_cellularDataStatusListenerStarted
_cert
_certForFromURI:
_certificateSigningRequest
_changedSinceLastSave
_channelDataCachedTime
_checkAndSendCachedDataForClient:
_checkAndStartConnection
_checkAndUnassertRealTimeMode
_checkAndUpdateDBIfRequiredForClass:
_checkAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:
_checkContinuityEntitlementForMessageContext:
_checkEntitlement:forAccountWithID:messageContext:
_checkFastDormancy
_checkIfDupeAndNoteGuid:local:topic:
_checkIfDupeAndNoteGuid:local:topic:forceNoteGuid:
_checkIfPushMessageSizeGreaterThanMaxLimit:maxLimit:
_checkOverRegistrations
_checkRegistration
_checkRegistrationStatus
_checkSendNewMessage
_checkServicesPreferringInfraWiFi:
_checkTechChange
_checkWPContinuitySetup
_checksumEnabled
_chunkNumber
_ckContainer
_cleanUpAccountCredentialForRemovedAccount:
_cleanUpAccountCredentialStore
_cleanUpOutgoingMessageDatabaseAndClearStatementCache
_cleanupAbsintheTask
_cleanupConnection
_cleanupContinuityPeerMaps:
_cleanupFailedElectionWithFullAccountIdentityCluster:
_cleanupIncomingFilesDirectories
_cleanupKeychain
_cleanupLegacyAccounts
_cleanupLegacyLocalAccounts
_cleanupListenerWithPid:
_cleanupLocalAccounts
_cleanupOutgoingMessages
_cleanupOutgoingQWSMessages
_cleanupQuickRelaySession
_cleanupResponses
_cleanupRunawayClientOutgoingMessages
_cleanupSessionConnection
_cleanupSocketPairConnection
_cleanupTime
_cleanupUntrackedValidators
_clearChannel
_clearCloudDisableTimer
_clearConnectionTimer
_clearConsentDenialsForUniqueIdentifier:
_clearDatabaseCloseTimer
_clearDisableTimer
_clearEndSessionTimeoutTimer
_clearForcedGDRCount
_clearForcedGDRDate
_clearGDRState
_clearIDSState
_clearInvitationTimer
_clearLastFallbackWithReason:
_clearPacketLossTimer
_clearPairedDeviceDidConnectBlocksForUniqueID:
_clearQueueForTopic:
_clearSMSDeliveryTimeout
_clearSendingPowerAssertionWithReason:
_clearTimerForTopic:
_clientChannel
_clientChannelConnectTime
_clientChannelUUID
_clientConnection
_clientContextData
_clientDataUpdateBlocks
_clientDatasByServiceType
_clientErrorForKTResult:underlyingError:
_clientErrorWithCode:debugDescription:underlyingError:
_clientID
_clientProcessName
_clientReady
_clientRemoteObjectByActivity
_clientRemoteObjectsByTopic
_clientType
_clientUUID
_clientUniquePID
_closeSocketToDevice:
_closeSockets
_cloudConnection
_cloudDisableTimer
_cloudDisableTimerFired:
_cloudKitContainer
_cloudKitElectionStore
_cloudPairingBeforeFirstUnlock
_cloudServiceConnector
_coalesceMessageQueueManager
_coalesceQueueManager
_collaboratorProvider
_combinedMessages
_combinedServicesForAllDevices
_command
_commandIsSessionCommand:
_commandIsSessionGroupSessionCommand:
_commands
_compactKeyMaterialMessage:isOutgoing:groupID:
_companionLinkClient
_companionLinkClientForDeviceIdentifier:completion:
_completedMigration
_completionActivity
_completionBlock
_completionBlocks
_completionBlocksForURIs:fromURI:fromService:forRefresh:
_completionBlocksToURIsMap
_completionHandler
_completionQueue
_compressPayload
_compressed
_compressionInfo
_compressionState
_compressionTime
_configurePushHandler
_connType
_connectError
_connectNow
_connectQRDirectlyToClientChannel:
_connectReadyHandler
_connectSocketDescriptor:toClientChannel:
_connectedSocket
_connectedStates
_connecting
_connection
_connectionActive
_connectionClaimed
_connectionContext
_connectionCountHint
_connectionEnableAudio
_connectionForPriority:messageType:dataProtectionClass:
_connectionID
_connectionInfos
_connectionInitTime
_connectionQueue
_connectionRequestStartTime
_connectionSetupStartTime
_connectionSuspended
_connectionTimedOut
_connectionTimeout
_connectionTimer
_connectionTimerCleared
_connectionTimerFiredOnMain
_connectionTypeForConnection:
_connectionsByID
_connectionsTableByLocalRemotePortKey
_connectivityChanged
_connectivityChangedForDefaultDevice:isCloudConnected:
_connectivityDelegates
_connectivityMonitor
_constructAccountInfo:
_constructDeliveryPipeline
_contactStore
_contactUtilities
_container
_contextInfo
_continuity
_continuityConnectCount
_continuityPeerLock
_controlChannelCachedSYN
_controlChannelEncryptionDisabled
_controlChannelVersion
_controlChannelVersionCache
_copyDeviceRecord:toCloudKitRecordRef:
_copyDirectMessagingMetadataForRemoteObject:
_copyForEnumerating
_copyLookupSecVerificationIdentity
_copyPairedDevice
_copyPeerWithID:
_copyPowerlogDictionaryWithOutgoingStats:incomingStats:
_copyStatisticsDict:
_correctFramesSinceLastCorruption
_correctRawBytesSinceLastCorruption
_countOfMessagesQueuedOfType:matchingCriteria:
_countryCode
_createAccountKeysWithFullAccountIdentity:serviceTypeNames:oldCluster:completion:
_createAccountWithDictionary:service:uniqueID:
_createAndEnableExistingSystemAccounts
_createDispatchData
_createFirewallRecordsFromSQLRecords:
_createGroupSessionActiveParticipantsFromParticipants:pushTokenForParticipants:
_createHashingDeviceIdentityEncrypter
_createKTTrustedDeviceForKVSisRegistered:
_createOneWayParticipantDictionaryFromMappedParticipantsDict:
_createOutgoingMessageRecordsFromSQLRecords:includeMessagePayloads:
_createPeerFromDeviceID:
_createPeerFromDeviceInfo:
_createRegistrationProperties:maxCompatibilityVersion:BTOutOfBandKey:supportsIPsecWithSPPLink:bluetoothMACAddress:
_createSessionInfoFromResponsePayload:
_createSimpleConnectionData
_createStallDetectorWithName:
_createWiFiManagerClient
_createZoneIfNeededUsingTimeIntervalForRequest:isNonDiscretionary:completion:
_createiTunesAccountFromSystemIfNeeded
_creationDate
_creationTime
_credential
_criticalActivatePairedDeviceWithCBUUID:
_criticalActivePairedDevice
_criticalAllPairedDevices
_criticalIsCountingDown
_criticalPairedDeviceWithCBUUID:
_criticalPerformPairedDeviceActivationWithCBUUID:
_criticalPerformPairedDeviceDeactivation
_criticalPerformTransactionWithBlock:
_criticalPersistState
_criticalPurgeSecuredEncryptionKeysForAllPairedDevices
_criticalPutPairedDevice:
_criticalRemovePairedDeviceWithCBUUID:
_criticalUpdatePairedDevice:isActive:
_criticalUpdatePairedDeviceWithCBUUID:deviceInfoPayload:
_criticalUpdatePairedDeviceWithCBUUID:deviceUniqueID:buildVersion:productVersion:productName:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:
_criticalUpdatePairedDeviceWithCBUUID:iCloudURIs:pushToken:
_criticalUpdatePairedDeviceWithCBUUID:pairingType:
_criticalUpdatePairedDeviceWithCBUUID:supportIPsec:
_cryptorForBlobs
_csr
_ctAdapter
_cumulativeIncomingStatistics
_cumulativeOutgoingStatistics
_currentAuthentications
_currentDataLength
_currentDateString
_currentDefaultDeviceLinkType
_currentDeviceRecordsPromise
_currentForcedGDRCount
_currentGenerationCounter
_currentGetDependentRegistrationBlocks
_currentGetDependentRegistrations
_currentGetHandlesBlocks
_currentInFlightSyncAttempts
_currentIncomingPacket
_currentLink
_currentLocalMasterKeyMaterial
_currentLocalStableKeyMaterial
_currentLocalTime
_currentMessageData
_currentOTRTimer
_currentOutgoingDataIndex
_currentOutgoingFragmentedMessageID
_currentOutgoingPacket
_currentPeerVerificationResultsForQueriedIndex:ticket:
_currentRegistrations
_currentSecondsIntoDay
_currentSessionStateCounter
_currentSize
_currentStorageRetriesPerTopic
_currentSubServicesForDevice:superService:
_currentVerificationResultsForRegisteredIndex:ticket:
_daemonClients
_daemonWillShutdown:
_dailyTimer
_dailyTimerHandler
_data
_dataBlobEncryptionManager
_dataChannel
_dataChannelPendingTx
_dataForKey:
_dataLength
_dataProtectedIncomingMessages
_dataProtectionClass
_dataProviderByRealm
_dataReadyHandler
_dataReceivedWithoutMessageCount
_dataSource
_dataToEncrypt
_database
_databaseCloseTimer
_databaseLastUpdateTime
_datagramPipeRegistration
_dateLastRegistered
_dateOfLastHandlesCheck
_datePassed:
_dateSentLastHTTPMessage
_deathTimerToTopicMap
_decodableClasses
_decryptAOverCMessage:topic:fromDeviceID:error:
_decryptData:encrypter:pkType:isRetry:priority:replayKey:completion:
_decryptData:usingIdentifier:isRetry:
_decryptData:usingIdentifier:isRetry:error:
_decryptEngramMessage:groupID:senderToken:fromID:guid:messageContext:
_decryptOTREncrtypedMessage:
_decryptPublicKeyEncryptedMessage:completionBlock:
_decryptReceivedDataBlobsUsingSKMs
_decryptionBlock
_decryptionRetryIntervalForError:
_dedupBehaviorForMessage:
_defaultCloudConnectionForAck
_defaultConnectionForAck
_defaultDeviceCbuuid
_defaultDirectConnections
_defaultPairedDependentRegistrations
_defaultPairedDeviceEndpoint
_defaultPeerConnectedDeferred
_defaultPeerSetPreferInfraWiFi:services:
_defaultQueue
_default_queue
_deferToQueue:after:block:
_deferredRegisters
_deferredUpdateCapabilities
_delay
_delayedDefaultDeviceAllocateRequest
_delegate
_delegateMap
_delegateQueue
_delegate_DidEvictObject:forKey:
_delegate_didCacheObject:forKey:
_delegate_shouldEvictObject:forKey:
_delegate_shouldTTLCacheEvictExpiredItems
_delegate_willReturnCachedObject:forKey:completion:
_deleteIdentityAtKeyIndex:error:
_deliveryController
_deliveryHandlersByUUID
_deliveryMinimumTime
_deliveryQueue
_deliveryStatusContext
_deliveryTime
_demoMode
_deniedToSend
_dependencyProvider
_dependentRegistrationAuthRetries
_dependentRegistrationPropertyForKey:serviceIdentifier:pushToken:
_dependentRegistrationResponseCode
_dependentRegistrations
_dependentRegistrationsForDefaultPairedDevice:includingCurrentDevice:includingTinker:
_dependentRegistrationsForDefaultPairedDevice:includingTinker:
_dependentRegistrationsTTL
_dequeueMessages
_dequeueMessagesTimerDidFire:
_dequeueMessagesTimerInterval
_dequeueNextMessageFromOutgoingQueue
_dequeuePendingQueryIfPossible
_dequeuePendingRequestsIfNecessary
_dequeueTimer
_dequeueTimerFiredOnMain:
_deregisterDeviceCenterNotifications
_destination
_destinationAddress
_destinationCountForURIsAndTokens:
_destinationPersister
_destinations
_destinationsLightweightStatus
_destroyFairplayDeviceSession
_destroyFairplayHostSession
_detectedMigrationNeeded
_deviceAbsintheIMEI
_deviceAbsintheMEID
_deviceAbsintheSerialNumber
_deviceAbsintheUDID
_deviceCanRegisterPresently
_deviceCapabilities
_deviceCertificationRepair
_deviceConnectionInfo
_deviceConnectionInfoTableByCbuuid
_deviceConnectionInfoTableByCbuuidLock
_deviceData
_deviceID
_deviceIDChangedNotification:
_deviceIDForPeer:
_deviceIDToAllocRequests
_deviceIDToCurrentLink
_deviceIDToGlobalLinkUp
_deviceIDToPeerLock
_deviceIDToSubServicesMap
_deviceIDToUDPDestinations
_deviceIdentifier
_deviceIdentifierKeychainID
_deviceKey
_deviceModel
_deviceMonitor
_deviceName
_deviceProperties
_deviceScore
_deviceScoreNonce
_deviceSignature
_deviceSignatureByService
_deviceSupport
_deviceTime
_deviceWithIdentifier:error:
_devices
_dictionaryForKey:
_didFallback
_didInvalidate
_didReceiveData:
_didReceiveReestablishmentRequest
_didReceiveSIMSetupCompleteNotification
_didRegisterWithKTAccountKey
_didWakeHint
_directConnections
_directory
_disableAccountWithUniqueID:
_disableEncryption
_disableOTRForDefaultPairedPeer:
_disablePrimaryAccountWithUniqueID:userAction:
_disableRegistration
_disableRemoteDeviceEncryption
_disableTimer
_disableTimerFired:
_disabledAutomatically
_disallowCellularInterface
_disallowQueryRefresh
_disallowWifiInterface
_disasterModeTokenForURI:
_disasterModeTokens
_discardAllocation:
_discardMessage:forURIs:service:
_discardedRawBytes
_discoveredDeviceIDsLock
_discoveredDevices
_dispatchCounterInfraWiFi
_dispatchDeferredPrekeyRequestForGroupID:previousParticipantsPushTokens:currentActiveParticipants:sessionID:
_dispatchDeferredPrekeyRequestForGroupID:previousParticipantsPushTokens:currentActiveParticipants:sessionID:waitingParticipantsTokens:
_dispatchIncomingAllocateResponse:isFromCache:requestOptions:
_dispatchRenewPrekeyTimer
_displayingAddNumberPrompt
_doCheckPendingKeyMaterialsAndSendKeyRecoveryRequestForMKM:forSKM:forDevice:forGroupID:
_doesDefaultDevicePreferInfraWiFi
_doesMessageContainValidCombination:
_domainHash
_dropLocalCache:
_dropLocalCacheForGroupID:compeltion:
_dropQueuedBroadcastsForServices:priority:
_dsHandle
_dualInterfaceidQueryMessageDelivery
_duetIdentifiersOverride
_duetInterface
_dumpLogs
_dumpLogs:isDownstream:
_duration
_duringInit
_dynamicStore
_echoTimer
_eligibleServiceIdentifiers
_emptyMessagesForURIs:service:
_emptyStates
_emptyStatesLock
_enableAccountWithUniqueID:
_enableOTR
_enableOTRForDefaultPairedDevice
_enableQuickRelay
_enableSKE
_enableSingleChannelDirectMode
_enabled
_enabledAccounts
_encodeMap:
_encryptData:withEncryptedAttributes:encrypter:priority:completion:
_encryptData:withEncryptedAttributes:usedIdentifier:error:
_encryptDataWithOTR:token:
_encryptedData
_encryptedDataBlob
_encryptedMirageHandshakeBlob
_encryptedResult
_encryption
_encryptionBlock
_encryptionController
_encryptionEnabled
_encryptionInitialized
_encryptionSequenceNumbers
_encryptionState
_encryptionStateStruct
_endDate
_endSession
_endSessionTimedOut
_endSessionTimeout
_endSessionTimer
_endSessionTimerCleared
_endSessionTimerFiredOnMain
_endTime
_endpoint
_endpointMap
_endpointQueryListeners
_endpointSubscriptionForGroup
_endpointUpdateTimer
_endpoints
_endpointsForService:fromURI:toURI:ignoreExpiration:
_endpointsToEncryptedData
_enforceRemoteTimeouts
_engramID
_enqueueBlock:identifier:withTimeout:forKey:
_enqueueInvocation:
_enqueueInvocationWithPriority:priority:
_enqueueInvocationWithSync:xpcMessage:
_enqueuedDate
_ensureGroupStableKeyMaterialCacheForGroup:
_ensureProfileQueriesAreReadyForRegistratration:
_entitledForActivity:
_entitledForAllTopics
_entitledForTopic:
_entitlements
_enumeratePrimaryAccountsOfType:block:
_environment
_eraseNGMIdentityFromKeychain:
_error
_errorCode
_errorForMissingEntitlement:
_errorMessage
_evictionDate
_evictionTimer
_excessiveCachingCount
_excessiveCachingReportCounter
_existingRelayIP
_existingRelaySessionToken
_existingRelaySignature
_expectedNextIncomingSequenceNumber
_expectedNextOutgoingSequenceNumber
_expectsPeerResponse
_expirationManager
_expirationPhase
_expireTimer:
_expiryEpoch
_extraCompletionBlocks
_extraConnectionCount
_extraConnections
_extractFieldBytesFromMetadata:ofSize:packetBuffer:
_faceTimeToken
_failPromisesWithError:
_failSavedMessageCleanly:withResponseCode:
_failSavedMessagesCleanly:withResponseCode:
_failedToGeneratedPublicDataForNGMIdentity
_failedTokenCache
_failureReasonMessageFromECError:andLegacyError:
_fairplayAuthState
_fakeMKMWrapping
_fallbackBlock
_fallbackMessages
_fallbackTimeoutForService:
_fallbackTimer
_fallbackTimerFired
_fallbackTimerFiredOnMain
_familyDevices
_familyDidUpdate:
_familyHandles
_familyMembers
_featureID
_fetchAccountEntitlements:listenerID:inContext:
_fetchAllLocalKnownGroups:
_fetchCachedObjectForKey:completion:
_fetchCurrentKVS
_fetchExpiredEntriesFromKVS
_fetchExpiryDatesIfNecessary
_fetchPresenceCapabilityForServiceTypes:withCompletion:
_fetchTokenForRegistrationInfo:failIfNotSilent:failureBlock:
_fetchVerificationInfoForService:forURIs:withCompletion:
_fileCleanupBlock
_filePath
_filename
_filterSelfAllocationsForSessionID:
_findAllocationForSessionID:requestIDStr:
_findAllocationListForSessionID:
_finishedRegistration
_fireAndForget
_firewallNotificationCenter
_firewallRateLimiter
_firewallStore
_firstAccountInStore:withType:matchingCriteria:
_firstDataPacketReceiveTime
_firstGossipChance
_firstMKMReceivedTime
_firstMKMSentTime
_firstPacketReceiveTime
_firstPacketReceivedTime
_fixedInterfaceDestination
_flush
_flushBroadcastQueuesForServices:existingServices:
_flushMessagesAll:response:
_flushTokensForRegisteredURIs:
_forMessaging
_forParticipantID
_forPublicIdentity
_forRefresh
_forSending
_forceAttachmentForMessage:
_forceAttachmentMessage
_forceInternetInvitation
_forceLegacy
_forceLegacyPK
_forceOnePerFanout
_forceRoll
_forceVerificationWithIndex:ticket:completion:
_forcedGDRTokens
_forcedLocal
_forwardPacketBuffer:fromDeviceUniqueID:cbuuid:
_forwardSendMessageToAccountWithSendParameters:service:threadContext:guid:dataProtectionClass:willSendBlock:progressBlock:completionBlock:
_forwardingSig
_forwardingSigAlgorithm
_forwardingTicket
_fragmentationSize
_fromIDFromDevice:withCBUUID:uniqueID:
_fromIDs
_fromIdentity
_fromURI
_ftNetworkSupport
_fulfillOrFailPromiseSeal:basedOnIndex:KTResult:ktLoggableDatas:optedIn:error:
_fulfillPromisesWithPhoneNumber:token:
_fullAccountIdentityWithError:
_fullClusterFromData:error:
_fullClusterWithAccountIdentityClusterWithAccountIdentity:fullAdminServiceIdentities:fullSigningServiceIdentities:error:
_fullDeviceIdentityContainerEncrypter
_fullDeviceIdentityEncrypter
_fullDeviceIdentitySigner
_fullIdentity
_fullServiceIdentityAdminWithAccountIdentity:type:error:
_fullServiceIdentitySigningWithAccountIdentity:type:error:
_fullyAckd
_gdrCenter
_generateIdentityWithExistingIdentity:identifier:dataProtectionClass:
_generateKTRegistrationData:
_generateKeys:
_generateMKMBlobForQRFromMessage:account:destination:fromID:
_generateUnregisteredIdentityWithExistingLegacyIdentity:existingNGMIdentity:
_generationCounter
_generationError
_geo
_geoRegion
_getAndUpdateParticipantsWaitingForKeyMaterialsForGroup:waitingParticipants:addedParticipantsDiff:currentParticipantsPushTokens:participantType:
_getClientChannelconnectHandlerForDestination:
_getClientUUIDForDestination:
_getCombinedSoftwareID:
_getCurrentAccountClusterWithCompletion:
_getCurrentState:
_getDependentHeartbeatTimer
_getErrorCodeFromAllocationStatus:
_getGroupID:
_getHighestPriorityMechanism
_getIDSAWDLoggingInstance
_getIDSLinkTypeString:
_getKeyFromType:
_getKeysForServiceTypeName:completion:
_getMessageCompletionCurrentEntries:withCompletion:
_getNewLinkOptionsForActiveParticipantInfoRequest
_getNextExpirationDate
_getPendingClientUUIDForDestination:
_getPublicMessageProtectionDataForIdentity:
_getPushTokenFromParticipantID:participantID:
_getQuickRelayIPPreference:
_getResponse:relaySessionID:
_getResponseForQRSessionID:sessionID:index:
_getResponseFromQRGroupID:
_getSelfAllocationFromCache:
_getSetofStandardParticipantsForGroup:
_getStallDetectorForConnection:deviceConnecionInfo:
_getStatusMessageFromStatusCode:
_getTypeFromDataKey:
_gossipEnabledServiceIdentifiers
_gossipPolicy
_gossipRecipients
_grappaDeviceSessionID
_grappaHostSessionID
_groupFromPublicDataRepresentation:completion:
_groupFromServerResponse:context:groupID:error:resultCode:resultDictionary:allEntries:completion:
_groupID
_groupIDToCapabilityToParticipantPushTokens
_groupIDToDesiredMaterialSet
_groupIDToInitialKeyMaterialDistributionTimeoutBlock
_groupIDToIsDeferredPreKeyRequestPending
_groupIDToIsKeyMaterialRecoveryRunning
_groupIDToKeyMaterialCache
_groupIDToLocalParticipantID
_groupIDToMKMExpirationTimer
_groupIDToMKMExpirationTimerBlock
_groupIDToMKMRollTimer
_groupIDToMKMRollTimerBlock
_groupIDToResetKeyMaterialCacheTimer
_groupIDToStableKeyMaterialCache
_groupIDToTypeToParticipantsPushTokens
_groupMasterKeyCollectionToBroadcastForDestinationURI:shouldIncludePeerKeys:
_groupMemberCount
_groupMemberPushTokens
_groupPayload
_groupServer
_groupServerElectionStore
_groupSessionState
_groupStatusNotificationController
_groupStatusNotificationParams
_groupWithDeviceIdentity:parent:groupInfo:error:
_guid
_guidToDeliveryAcknowledgementBlock
_guidToSendCompletionBlock
_hadInfraWiFiTraffic
_handleAccessoryMessageForID:msg:service:fromID:fromIdentity:completionBlock:
_handleAction:forAccounts:
_handleBecomingEmpty
_handleBecomingEmptyForDataProtectionClass:
_handleBecomingEmptyOfCloudMessages
_handleCBUUIDDidConnect:isDefaultPairedDevice:isAlwaysConnected:
_handleCBUUIDFailToConnect:withReason:
_handleClientDeath:
_handleDiscoveredDevice:
_handleEchoTimer
_handleFairplayAuthenticationFailure
_handleForceRepairRegistrationActionForAccounts:
_handleIncomingAllocateResponse:isFromCache:requestOptions:
_handleIncomingAttachmentMessage:forTopic:fromID:certifiedDeliveryContext:completionBlock:
_handleIncomingIDSMessageEvent:options:
_handleIncomingPushMessage:forTopic:fromID:messageContext:
_handleKTOptInStatusUpdateError:
_handleKVSUpdateResponseForTrustedDevices:withSuccessfulKVSSync:
_handleLostDevice:
_handleMessagesForURIs:originalURIs:service:fromID:fromCoalesceQueue:withQueryCompletion:
_handleMkmExpirationTimerForGroup:
_handleMkmRollTimerForGroup:
_handleNegotiationTimeout
_handleNetworkChanges:
_handleOTRDecryptionError:
_handleOTRDecryptionSuccess:
_handleReIdentifyActionForAccounts:
_handleReProvisionActionForAccounts:
_handleReRegisterActionForAccounts:
_handleSpaceBecomingAvailableForUrgentLocalMessagesWithDataProtectionClasses:withMessageTypes:
_handleTransparencySignatureResponse:error:
_handleUpdate:forActivity:
_handleValidateCredentialsActionForAccounts:
_handleWRMLinkRecommendation:
_handlers
_handshakeCounter
_hardwareVersion
_has
_hasAcceptedSMSRequest
_hasActiveAppleIDBasedAccountOnService:
_hasAllEncryptionKeys
_hasBeenProvisioned
_hasBudgetForForcedGDR
_hasCheckedMigrationThisLaunch
_hasCurrentAuthenticationsOrRegistrations
_hasDelayedNoConnectivityNotification
_hasEndedSession
_hasFixedDestination
_hasGlobalLinkConnectingOrConnected
_hasHardDeregistered
_hasLoadedPairedDevices
_hasMatchingURIs
_hasMetadata
_hasMoreData
_hasNonUrgentInternetSendingBudget
_hasNotifiedSuccess
_hasOngoingAuthentications
_hasPreferWiFiRequest
_hasProcessedMessagesAfterFirstUnlock
_hasReachedMaxNumberOfRetries:
_hasReceivedAPSDAck
_hasRegeneratedSecuredEncryptionKeys
_hasRegisteredContainer
_hasRegistration:inQueue:
_hasReportedReceivedMKM
_hasSessionInfoRequiredKeys:
_hasSpaceAvailable
_hasThresholdReachedForSMSTimeoutForIdentifier:
_hasUnregisteredContainer
_hash
_haveQueuedMessageForRegistration:inQueueForKey:
_headerData
_heartBeat
_heartbeatCenter
_heartbeatTimerFiredOnMain
_helloMessage
_highPriorityConnectionSendingSet
_homeKitMessageDelivery
_homePlmn
_hourlyTimer
_hourlyTimerHandler
_httpMessageDelivery
_iMessageToken
_idStatusCache
_identifier
_identifierForValidator:
_identity
_identityDataErrorPairForDataProtectionClass:
_identityDataSource
_identityForDevice
_identityGenerated:
_identityPair
_identityRebuilt:
_identityRegenerationDelay
_identityToRegisterError
_identityVersion
_idsDaemon
_idsDataChannelClientPID
_idsDeviceConnectionUUID
_idsNRDeviceBridge
_idsNRPluginManager
_idsPriority
_idsServerBag
_idsSessionIDToqrSessionID
_idsUserID
_ignoreIncomingPushes
_ignoreMaxRetryCount
_ignoreUTunChannelWriteSignal
_im_normalizedURIString
_impactedServices
_inFlightHeartbeatBlock
_inFlightMessageCountLowWaterMark
_inFlightResetBlock
_inFlightSMSTimeoutBlock
_inUseProfileIDs
_incomingDataFragments
_incomingEncryptionTableBySSRC
_incomingLocalPowerAssertion
_incomingLocalPowerAssertionClients
_incomingLocalPowerAssertionLock
_incomingMessageIdentifierForMessageUUID:messagePayload:
_incomingMessageMultiQueue
_incomingMessageStorageDictionaryForPayload:topic:deviceID:btUUID:command:messageUUID:sequenceNumber:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:
_incomingPacketBuffer
_incomingResourceTransfers
_incomingServiceMap
_incomingServiceMapUpdateCounter
_incrementForcedGDRCount
_incrementMessagesFromStorageForTopic:
_individualPeerMessages
_inferredExternalIP
_inflightMessageCount
_inflightMessageCountForClass:
_inflightMessageCountForType:
_inflightStorageRequests
_infoAttribute
_infos
_initWithLoginID:service:uniqueID:accountType:accountConfig:primaryAccount:isAdHocAccount:
_initialLinkType
_initialProcessTime
_initialServerTime
_initialSyncClientIDs
_initializeParticipantsWaitingForInitialKeyMaterialsForGroup:
_initializePlugin
_initializePluginWithClass:
_initiatorsAcceptedSessionsWithToken
_inputBytesPerSecond
_insertTrustedDeviceToKVS:
_instanceID
_interesting
_intermediateRootCert
_internalMetricLogger
_internalQueue
_invalidateClientChannel:
_invalidateSession:isExpiryPurging:
_invalidationHandler
_invitationManager
_invitationRetryCount
_invitationStore
_inviteNeedsDelivery
_inviteTimeout
_inviteTimer
_inviteTimerCleared
_inviteTimerFiredOnMain
_ipPreference
_ipsecQueue
_isAccountInfoRegistered:
_isAccountRelevantForRegistrationPush:
_isAdvertising
_isAltAccountPairing
_isAlwaysConnected
_isAsleep
_isAudioPaused
_isAwaitingUserSelectionDuringSetup
_isBAAOptionEnabledByServerBag
_isBeingHandedOff
_isBlackholed
_isBuildingContext
_isBulkingStorageMessagesForService:
_isC2K
_isCentral
_isClassAStoreAvailable
_isClassCConnected
_isClassCStoreAvailable
_isClassDStoreAvailable
_isCleanupMeantForTheRightSession:clientChannelUUID:
_isCloudConnected
_isConnected
_isControlChannel
_isDefaultDeviceNearby
_isDefaultDeviceOnPhoneCall
_isDefaultDeviceUsingBTLink
_isDefaultPairedDevice
_isDefaultPairedDevicePairedLocally
_isDefaultPairedDevicePairedRemotely
_isDefaultUser
_isDeviceInAccountRegistration:forService:
_isDirectMsgChannel
_isDisabled
_isDisabledService:
_isDiscoveredOverWiFi:
_isDuplicateResponse:newResponse:
_isEnabled
_isEncryptionKeyRegenerationSupportedByCapabilityFlags:
_isEntitledForPreferInfraWiFiForServices:error:
_isFastSync
_isFinishedBlock
_isForced
_isGFTService
_isHardReset
_isIPSecLinkEnabled
_isIPsecSupportedByCapabilityFlags:
_isInDualPhoneIdentityModeForSims:
_isInServerBackoffMode
_isInUPlusOneMode
_isInitiator
_isInternal
_isInternalInstall
_isInvalidated
_isIssuingDependentCheck
_isJoinAllocation
_isJunked
_isKTRegistrationData:forServiceIndex:inTrustedDevices:
_isKeyTransparencyDisabledViaServerBag
_isKeyTransparencyEnabledViaDefaults
_isKeyTransparencyEnabledViaServerBag
_isKeychainError:withOSStatus:
_isLightweightParticipant
_isLinkForDefaultPeerConnected
_isListening
_isLoaded
_isLoading
_isLocal
_isLocalDeviceSafeviewAdviserInitiatorOnLoboMacOrLaterAndRemoteDeviceIsPreTiboAnyPlatform
_isLocalSetUpInProgress
_isMagnetConnection
_isMagnetIndicatingPeerIsAwake
_isMigratedSignature
_isNGMKeyType
_isNearby
_isNegotiating
_isNewUPlusOneSession
_isOptIn
_isPairedToDevice:
_isPasswordPromptPermissibleDuringAuthentication
_isPeerAlwaysConnected
_isPendingResetOfKeyRegenerationFlag
_isPhoneNumberAuthenticationDuringBuddyAllowed
_isPhoneNumberIdentificationSupported
_isPipeConnectingOrConnected
_isPoweredOn
_isPublicKeyDistributed
_isQuickSwitchingMutex
_isQuickSwitchingToAnotherDevice
_isReady
_isReadyForEncrypting
_isRealTime
_isRegistered
_isRegistrationActive
_isReinitiate
_isScreenSharingSession
_isSecKeyType
_isSecurelyStoringIdentity:withExpectedProtectionClass:
_isSending
_isServerMaterialExchangeEnabled
_isSetup
_isSharedSession
_isSimulateResetLoopTest
_isSpamReportingV1ServerDisabled
_isSupportIPsecLinkFlagSet
_isSuspended
_isTestRunning
_isTinkerFlagSet
_isTinkerPairedInCapabilityFlags:
_isTopicBeingRateLimited:
_isTrustedCandidate:index:givenTrustedDevices:
_isUserSubscriptionSelectionStillPending
_isUsingAccount:
_isValidDestination:
_isValidPushToken:
_isVideoPaused
_isWiFiBroughtUp
_isWiProxPeer
_issueAsyncCoreTelephonyPhoneNumberValidationRequestWithPushToken:mechanism:
_issueCriticalDependentCheck
_issueDependentCheck
_issueForcedDependentCheckIfPossible
_issuingDependentCheck
_issuingHandlesCheck
_iterateByRealm:block:
_ivarQueue
_joinGroupSessionPending
_joinNotificationDeliveryTimeoutBlock
_joinRecvTime
_joinSendEndTime
_joinSendStartTime
_joinStartTime
_joinType
_kernelTime
_key
_keyData
_keyForURIs:service:
_keyIDToParticipantID
_keyIndex
_keyManager
_keyMaterial
_keyMaterialLength
_keyPairProvider
_keyPairSignature
_keyTransparencyAccountKeyFromRegistrationMessage:service:URI:
_keyTransparencyContext
_keyTransparencyDeviceSignatureFromRegistrationMessage:service:URI:
_keyTransparencyEnrolledURIs
_keyTransparencyEntriesForEndpoints:
_keyTransparencyLoggableDataFromRegistrationMessage:service:URI:
_keyTransparencyServiceIdentifierForTransparencyApplication:
_keyTransparencyStore
_keyTransparencyTicketForService:fromURI:toURI:
_keyTransparencyURIPrefixForServiceIdentifier:
_keyTransparencyVerifier
_keyTransparencyVerifierForServiceIdentifier:
_keyType
_keyValueDelivery
_keychainAccountFromBaseIdentifier:
_keychainCache
_keychainElectionStore
_keychainEntryForCluster:
_keychainIdentifier
_keychainMigrationComplete:
_keychainWrapper
_keychain_comparisonValue
_keychain_isEqual:
_kickRemoteCacheWipe
_kickoffOTRNegotiationWithDevice:token:negotiationData:
_kms
_ktApplicationForKTRegistrationIndex:
_ktCapable
_ktDataNeedsUpdate:
_ktRegDataByServiceType
_ktRegistrationDataIndexForKTApplication:
_ktRegistrationDataManager
_ktVersion
_kvStore
_labelID
_lackAll
_language
_lastBagRepairInterval
_lastCloudConnectedTime
_lastConnectedTime
_lastDateCheck
_lastDisconnection
_lastDownstreamDumpLogTime
_lastFallback
_lastIsNearbyBecameTrue
_lastKnownGroupIDToPushTokens
_lastNewMagnetCorruptionTime
_lastPrintTime
_lastReceivedMessageTimePerTopic
_lastRepairIntervalFromPrefs
_lastSelfVerifyDate
_lastSendSMSTimer
_lastSendSMSTimerFiredOnMain
_lastSentAck
_lastSentDefaultDeviceCloudConnectivity
_lastSentDefaultDeviceConnectivity
_lastSentDefaultDeviceNearby
_lastSentDefaultPeerConnectivity
_lastSentSeq
_lastSocketActivityTime
_lastStallDetectLogTime
_lastStartTime
_lastSuccessfulSentTime
_lastSuccessfulUpsertDeviceRecord
_lastUpstreamDumpLogTime
_launchServiceOnDemand:
_legacyAccountsOnService:
_lightweightParticipantSync:
_linkIDToDatagramLink
_linkIDToLink
_linkIDsAlwaysConnected
_linkIDsConnecting
_linkIDsDisconnecting
_linkKeyForLink:
_linkLayerConnected
_linkLayerDisconnectTime
_linkManager
_linkProtocol
_linkScore
_linkSuspended
_linkType
_listenForMGChanges
_listener
_listenerBundleIDs
_listenerCachedCommands
_listenerCachedServices
_listenerCapabilities
_listenerCommands
_listenerEntitlements
_listenerID
_listenerIDs
_listenerLocalObjects
_listenerLock
_listenerNotificationServices
_listenerServices
_listeners
_listenersByActivity
_listening
_listeningForRegStateChanges
_listeningOnActivities
_liveMessageDelivery
_loadAndDeserializeBuildOfIdentityGenerationForItemName:
_loadAndEnableStoredAccounts
_loadAndEnableStoredLegacyAccounts
_loadCache
_loadClassAIdentityIfNeeded:
_loadClassCIdentityIfNeeded:
_loadClassDIdentityIfNeeded:
_loadContainerWithIdentifier:serializationDidChage:deserializationDidFail:needsEncryptionIdentityRoll:error:
_loadGossipRecipients
_loadIdentityWithIdentifier:serializationDidChage:deserializationDidFail:error:
_loadIfNeeded
_loadIfNeeded:
_loadLegacyCache
_loadLegacyIdentityWithIdentifier:serializationDidChange:deserializationDidFail:error:
_loadPairedDevicePropertiesIfNeeded
_loadService:
_loadServices
_loadSubServiceWithName:usingService:completionBlock:
_loadSubServices
_loadingRateLimiter
_localAccountSetupCompleted
_localAddress
_localBlob
_localCID
_localCIDSet
_localCN
_localCallInfoData
_localCell
_localConnectionGUID
_localConnectionType
_localContext
_localDestinationDeviceUUID
_localDetectedCorruption
_localDeviceIdentifier
_localDevicePrivateData
_localDevicePushToken
_localFullIdentity
_localICEData
_localIncomingGUIDs
_localIncomingGUIDsLock
_localKeyMaterial
_localKeyToEntry
_localNATIP
_localNATType
_localPartyID
_localPushTopics
_localSA
_localSKEData
_localServices
_localSetupInProgress
_localURI
_localUnauthenticatedFullIdentity
_localWiFiAddressUsedForDefaultDevice
_localizedServicesAccessStringForDevice:serviceMessage:
_localizedServicesUsageStringForDevice:useSingular:
_lock
_lockdownManager
_lockdownStateChanged:
_lockedPeerMap
_lockedRemoteObjectsWithNotificationService:entitlement:command:capabilities:
_lockedRemoteObjectsWithService:entitlement:command:capabilities:
_lockedRemoteObjectsWithService:entitlement:command:capabilities:ignoreService:
_lockedRemoteObjectsWithService:entitlement:command:capabilities:ignoreService:useNotificationServices:
_lockedRemoteObjectsWithService:entitlements:command:capabilities:ignoreService:useNotificationServices:
_locked_ensureGroupMasterKeyMaterialCacheForGroup:
_locked_printBroadcastAttemptMapForPriority:service:
_locked_updateParticipantsWaitingForKeyMaterialsIfNeededForGroupID:remoteToken:previousRemotePublicKey:newRemotePublicKey:
_logPackets
_logRequestInPowerDictionaryForService:preferences:
_loggableData
_loggingFlags
_loggingSequenceIncoming
_loggingSequenceOutgoing
_lookupDateForURI:fromService:
_lookupIDStatusForURIs:fromIdentity:fromURI:fromService:lightQuery:allowQuery:forceQuery:bypassLimit:completionBlock:
_lookupIdentityWithLastResortFallback:
_lookupNGMVerificationIdentityShouldUseLastResort:usedLastResort:
_magnetCorruptionRecoveryMode
_mainAccountGuid
_managedPrefsNotification:
_managerQueue
_manualQueueRemoval
_mapByAddingMetadataToMap:
_markSecuredEncryptionKeysAsRegenerated:
_masterKeyIdentifiersReceivedByClient
_masterKeyMaterials
_maxAllowedMessageSize
_maxCompatibilityVersion
_maxConcurrentStreams
_maxMessagesForRunawayClientConsideration
_maxOutgoingDatabasesSizeInMB
_maxPayloadSizeForMessage:
_maxQueueSize
_maxRecipientMemory
_maxSelectedButVettedGracePeriod
_maxSize
_maximumNextStoredLoadTime
_md5Hash
_mechanism
_mechanismForSubsystem:
_membersForGroup
_membersLightweightStatusDict
_membershipChangeEventTime
_mergeCloudKitTrustedDevices:accountKeyTrustedDevices:
_mergeParticipantID2PushTokenMapping:sourceResponse:mappingChange:
_mergePolicy
_mergePolicyType
_message
_messageCount
_messageDelivery
_messageHasValidEncryptionStatus:
_messageHashChecker
_messageHashStore
_messageID
_messageIsAllowedToSendMessageOnTopic:
_messagePriority
_messageQueue
_messageResponseHandler
_messageSenderID
_messageSequenceNumber
_messageServerTimestamp
_messageState
_messageStoreClass
_messageStoreForDataProtectionClass:
_messageStores
_messageTimedOut:localMessage:
_messageToSend
_messageType
_messageTypeForConnection:
_messageTypeSupportedForCloudConnection:
_messageUUID
_messages
_messagesGroupContext
_messagesGroupContextWithCompletion:
_messagesReceivedDuringStorage
_messenger
_metadata
_metadataBlob
_metadataData
_metadataSize
_metadataWithEndpoint:ECSuccess:legacySuccess:ECError:legacyError:
_metricCollectors
_metrics
_metricsCollector
_migrateIdentity:toProtectionClass:
_migrateLegacyAccounts
_migrateLegacyAccounts1
_migrateLegacyAccounts2
_migrateRegisteredIdentityFromClassDtoClassCIfNeeded
_migrateRegistrationIfNeeded
_migrateSecuredEncryptionKeys
_migrated
_migrationContext
_migrationDefaultKey
_migrationPromise
_migrationTracker
_migrationTypeForKeychainDictionary:
_minCompatibilityVersion
_minReportFileOpenTimeInterval
_minimumNextStoredLoadTime
_missingDeviceIdentity:
_missingIdentity
_missingPrekey
_mkmAcknowledgementTimeout
_mkmExpireDuration
_mkmRollDuration
_mkmRollTimerFiredForGroup:sessionID:
_mmcsUploader
_model
_modifyDomainWithUsername:
_modifyGameCenterAccountPropertiesForUsername:
_mostRecentIDSRegistrationReason
_multiQueue
_multiplexerEnabled
_multiplexerTransport
_multiwayFTMessageSendTimeout
_mutateSuccessfulSyncIndicatorOnKTLoggableDatas:forIndex:
_mutex
_name
_nanoConnectedFallbackTimeoutForService:
_nanoDisconnectedFallbackTimeoutForService:
_nearbyChangedForDefaultDevice
_neededRegistrationType
_needsEncryptionIdentityRoll:
_needsProvisioning
_needsReRegister
_needsRenewal
_needsToCheckPhoneNumberState
_negativeRegistrationUpdateCache
_negotiationCount
_negotiationTimer
_negotiationTimerFiredOnMain
_networkChangeNotifier
_networkCode
_networkRelayRegisterDeviceWithCBUUID:properties:shouldPairDirectlyOverIPsec:
_networkRelayRegisterDeviceWithCBUUID:wasInitiallySetupUsingIDSPairing:maxCompatibilityVersion:BTOutOfBandKey:supportsIPsecWithSPPLink:bluetoothMACAddress:
_newCompanionLinkClient
_newGlobalLinkForDeviceUniqueID:cbuuid:options:
_newKeyEventTime
_newKeyForValues:priority:
_newPg
_newServiceSupported
_newSetupInfoWithContext:
_newSocket
_newUDPGlobalLinkForDeviceUniqueID:cbuuid:
_newUDPLinkForDeviceUniqueID:cbuuid:IPVersion:port:
_nextComponent
_nextIndex
_nextLocalMasterKeyMaterial
_nextMessageID
_nextRegistrationDate
_nextRegistrationHeartbeatTime
_nextRemoteInstanceIDIndex
_nextSendSMSDate
_nextStreamID
_ngmPublicIdentity
_ngmVersion
_niceToSocketCommand:
_no_timeout_fetchKeyTransparencyDeviceRecordsWithCompletion:
_no_timeout_no_cache_fetchKeyTransparencyDeviceRecords
_no_timeout_nukeKeyTransparencyDeviceRecordsWithCompletion:
_no_timeout_upsertKeyTransparencyDeviceRecord:recordsToModify:recordsToDelete:completion:
_no_timeout_verifyEncryptionPrerequisitesWithCompletion:
_nominateRequestStartTime
_nonBTAllowedForClientID:
_nonThreadSafeIsConnected
_nonThreadSafeSocketOptions
_nonThreadSafeStopConnection
_nonUrgentInternetLastAttempt
_nonUrgentInternetSendProbabilityForCurrentWindow
_nonUrgentInternetSendTimer
_nonUrgentInternetSendTimerFired
_nonWaking
_noteActionType:forService:serviceType:requestor:
_noteDecryptionFailureForGroup:completion:
_noteItemFromStorage:
_noteJoinNotificationDidDeliverWithSuccess:
_noteJoinNotificationWillSend
_noteKeyMaterialDidSendToDestination:groupID:withSuccess:
_noteKeyMaterialNotNeededForDestination:groupID:
_noteLastItemFromStorage:
_noteNewAvailableNotification:
_noteNewUsageNotification:
_noteReceivedResourceTransferUUID:
_noteRegistration
_noteRegistrationAttemptForIdentifier:withRegistrationInfo:
_noteShouldSynchronizeTinkerDeviceInfo
_noteSourceDidDiscoverEndpointMap:forLocalURI:
_noteSuccessfulToken:profileID:selfID:forRegistrationInfo:wasFetched:
_notificationBodyForService:URI:
_notificationCenter
_notificationDelayInSeconds
_notificationIconIdentifierForService:
_notificationLimitPerPeriod
_notificationLimitTimePeriod
_notificationShouldRedirect
_notificationSupportURL
_notificationTitleForService:
_notifier
_notifiers
_notifyAllRegistrationSuccess:
_notifyAllSuccessfulRegistrations:
_notifyAuthenticating:
_notifyAuthenticationFailure:responseCode:registrationError:error:info:
_notifyAuthenticationSuccess:
_notifyClientDelegatesWithBlock:
_notifyClientsSessionStopped
_notifyDelegateAboutClosedConnection
_notifyDelegatesAddedLocalDevice:
_notifyDelegatesDevicePairedToDevice:
_notifyDelegatesDeviceUnpairedFromDevice:
_notifyDelegatesWithBlock:
_notifyDeregistrationStarting:
_notifyDict
_notifyEmailQueryFailure:responseCode:registrationError:error:info:
_notifyEmailQuerySuccess:emailInfo:
_notifyFailureWithError:
_notifyFailureWithError:registration:identifier:
_notifyFamilyServicesOfUpdate
_notifyHomeNumberSuccessForUser:
_notifyIDSAuthenticationSuccess:
_notifyIDSNanoRegistryPluginManagerOnWatch:
_notifyInitialRegionQuerySuccess:
_notifyListenersAndSetDependentRegistrations:onRegistrationInfo:
_notifyListenersWithChanges:
_notifyNeedsNewIdentification
_notifyNeedsNewRegistration
_notifyParticipantID2PushTokenMappingChange:
_notifyProvisionFailure:responseCode:registrationError:error:fatal:info:
_notifyReachableDone
_notifyRegenerateDelay
_notifyRegionValidationFailure:responseCode:registrationError:error:info:
_notifyRegionValidationSuccess:regionID:phoneNumber:context:verified:
_notifyRegistrationFailure:error:info:
_notifyRegistrationFailure:responseCode:registrationError:error:info:
_notifyRegistrationIdentitiesUpdated
_notifyRegistrationListenersAccountDidUpdateRegisteredDevices
_notifyRegistrationStarting:
_notifyRegistrationSuccess:
_notifyRegistrationUpdated:
_notifySuccess:token:identifier:
_notifyTinkerServicesOfPairedDevice:withBlock:
_notifyToken
_notifyURIToParticipantIDMappingChange:
_notifyUnregisteredIdentityRegenerated
_notifyWhenConnectionReceivesBytes
_notifyWirelessRadioManagerAboutLinkChange:
_now
_nrDeviceIdentifier
_nrDeviceIdentifierWithCBUUID:
_nrDeviceManager
_nrDeviceMonitor
_nrDevicePreferences
_nrDevicePreferencesHandler
_numQueriesThisHourByTopLevelService
_numberForKey:
_numberOfAttemptsWithoutSuccessfulSend
_numberOfBroadcastCacheMKM
_numberOfMatchesForCandidates:index:trustedDevices:
_numberOfOutagesSinceInterval:
_numberOfPreflights
_numberOfSuccessfulSends
_nwConnection
_objectForKey:
_observer
_observerProxies
_onQueueStartOTRNegotiationWithDeviceIfNeeded:token:reset:errorHandler:
_openSocketCalled
_openSocketCompletionHandler
_operation
_opportunisticCache
_opportunisticDeliveryController
_opportunisticQueue
_optInEligibleKTApplicationToIDSServiceIdentifier
_optionallyDecryptMessage:completionBlock:
_optionallyDecryptMessage:encryptedData:forGroupID:forTopic:fromID:certifiedDeliveryContext:completionBlock:
_optionallyDecryptMessage:encryptedData:forGroupID:forTopic:fromID:certifiedDeliveryContext:isLiveRetry:completionBlock:
_originPersister
_originalTimestamp
_osVersion
_otrTestBlock
_otrTimer
_otrTokenIdentifier
_outOfBandKey
_outgoingData
_outgoingEncryptionTableBySSRC
_outgoingMessageArray
_outgoingMessageArrayLock
_outgoingMessages
_outgoingPriorityMessages
_outgoingServiceMap
_outgoingStallDetector
_outgoingStallDetectorName
_outputBytesPerSecond
_overallSendTimestamp
_packetBuffer
_packetBufferArray
_packetBufferHandler
_packetLossTimer
_packetsPerSecond
_packetsReceived
_packetsSent
_pairWithSPPLink
_pairedDeviceCBUUIDString
_pairedDeviceCBUUIDs
_pairedDeviceInfoRequestCountdown
_pairedDeviceManagerCollaborator
_pairedDeviceRepository
_pairedDeviceUUID
_pairedDevices
_pairedDevicesFromPropertyDictionaries:
_pairedDevicesLock
_pairingCollaborator
_pairingDeviceCBUUIDs
_pairingProtocolVersion
_pairingStateToken
_pairingToken
_parentPg
_parentVersion
_parentalControls
_parseHandlesInfo:currentAliases:currentVettedAliases:
_parseQuickRelayDefaults:gropuID:
_participantData
_participantID
_participantInfo
_participantsForCypher:completion:
_participantsForDestinations:completion:
_participantsForGroup
_participantsInfoForGroup
_participantsWaitingForInitialKeyMaterials
_participantsWaitingForKeyMaterials
_participantsWaitingForStableKeyMaterials
_passwordManager
_payload
_payloadFromDecryptedData:
_payloadMetadata
_peerConnectBlocksMap
_peerFailureBlocksMap
_peerIDKeysForService:andFromURI:
_peerIDManager
_peerIDManagerToken
_peerListMap
_peerMap
_peerProtocolVersion
_peerResponseIdentifier
_pendingAccountInfoBroadcast
_pendingCloudEnable
_pendingDataReceive
_pendingDataSend
_pendingDependentCheck
_pendingDeregistration
_pendingHandlesCheck
_pendingHeartbeat
_pendingIdentityRegeneration
_pendingIncomingAttachments
_pendingMasterKeyMaterials
_pendingOfflineMessages
_pendingOutgoingAttachments
_pendingOutgoingBytesForClass:
_pendingPipes
_pendingReIdentify
_pendingReRegister
_pendingRecipientsAcceptedSessions
_pendingResponseTokens
_pendingStableKeyMaterials
_pendingStorageRequests
_performCacheModifyingBlock:
_performCacheReadingBlock:
_performCorrectServerRequestForTemporaryPhoneRegistration:sentAuthentication:sentIDSAction:
_performDuetCheckAndSendForAccount:sendParameters:logString:fromQueue:completionBlock:
_performDuetCheckAndSendForServiceIdentifier:serviceDuetIdentifiers:sendParameters:logString:fromQueue:completionBlock:
_performEvictionSweep
_performFallbackIfNecessary:
_performHighestPriorityPreflightVerification
_performInitialHousekeeping
_performLockedBlock:
_performSetup
_performTransactionInCriticalSectionWithBlock:
_performedForcedGDRDatePeriod
_peripheralManager
_peripheralManagers
_persistAccounts:
_persistTopic:
_persistedTopics
_persistentEnrollmentHandler
_persistentMap
_persister
_personalCBUUIDString
_phoneBookNumber
_phoneNumber
_phoneNumberRepairInterval
_phoneNumberRepairIntervalForCount:
_phoneNumberRepairMaxInterval
_phoneNumberRepairTimerHit:
_phoneNumberValidationRetryCount
_phoneNumberValidator
_phoneRepairTimer
_phoneToken
_phoneUser
_phoneUserWithCredentials
_pidSuspended:
_pipe
_pipeManager
_pipePeripheralUUIDString
_pipelineHandleMessage:forURIs:service:
_pipelineHandleMessage:forURIs:service:withCompletion:
_pipelinesHandleMessagesToCoalesce:forService:sendMode:
_plistFilePath
_pluginImplementsWatchDidStartAdvertising
_pluginImplementsWatchDidStopAdvertising
_pnrOngoing
_pnrReason
_policyTrafficClassifiers
_popHighestPriorityPreflightVerification
_portDidBecomeInvalid
_portMap
_portString
_postAliveNotification
_postAvailableNotificationForSessions:appleID:aliases:deviceName:serviceTypes:blockMap:
_postNotificationForURI:onService:withBody:title:iconIdentifier:
_postPendingConsentAlerts
_postUsageNotificationForSessions:appleID:aliases:deviceName:deviceModel:deviceCapabilities:serviceTypes:
_postUserNotificationWithTitle:message:identifier:completionHandler:
_postedFirstHostStateChange
_powerLogServices:prefersInfraWifi:
_powerLogTimerDefault
_powerLogTimerSockets
_powerLogTimerSync
_powerLogTimerUrgent
_power_log_queue
_powerlogDictionaryForSockets
_powerlogTransportStats
_preKeyRequestDelayDuration
_preferCellularForCallSetup
_preferences
_preferencesLock
_preferencesOnDomain:
_preferredAddressFamily
_preflighStackStore
_preflightStackStore
_prekeyAckCountForGroup
_prekeyExpireDuration
_prepareConnectionInfoWithCBUUID:deviceUniqueID:shouldUseIPsecLink:identityPair:remoteDeviceEncryptionInfo:
_presentInternalVerificationAlertWithText:
_prevBPS
_preventNewQuery
_previousAccessToken
_previousBytesReceived
_previousBytesSent
_previousCorruptionsDetected
_previousIdentityForDevice
_previousPacketsDropped
_previousPacketsReceived
_previousPacketsSent
_previousPrekeyExpireDuration
_previousRegisteredIdentityContainer
_previousRelayIP
_previousRemoteInstanceIDs
_previousReportFileOpenTime
_previousReportTime
_primaryAccountExistsForService:withURI:
_primaryRegistrationDSHandle
_primaryRegistrationURIs
_prioritizedTokenList
_priority
_priorityForConnection:
_priorityQueue
_priorityToCompletionBlocks
_priorityToTimeoutBlocks
_privateDeviceData
_privateKey
_processAvailableNotifications
_processAvailableNotificationsTask
_processBytesAvailable
_processDecryptedMessage:
_processDefaultInvitationContextMessage:deliveredWithError:resultCode:resultDictionary:
_processDeletingMessagesWithPriority:reason:responseCode:allowedTrafficClasses:
_processDisallowedMessages
_processGetHandlesMessage:registrations:deliveredWithError:resultCode:resultDictionary:allowPasswordPrompt:
_processIncomingDataMessage:
_processIncomingLocalMessage:topic:command:deviceID:btUUID:context:storedGUID:priority:connectionType:didWakeHint:
_processIncomingMessage:
_processIncomingPacket
_processIncomingRawMessage:
_processIncomingRemoteMessage:forTopic:fromID:storedGuid:messageContext:
_processIncomingResourceTransferMessage:messageUUID:streamID:topic:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:isDefaultPairedDevice:didWakeHint:
_processLMCommandPacket:fromLink:deviceUniqueID:cbuuid:
_processLinkChangeForDefaultDeviceFrom:to:
_processLocalMessagesWithAccountUUIDs:priority:dataProtectionClass:
_processLocalMessagesWithAccountUUIDs:priority:dataProtectionClass:messageTypes:
_processMessage:withSequenceNumberBlock:
_processMessageError:topLevelMessage:error:messageID:service:serviceType:token:fromIdentifier:toIdentifier:groupID:completionBlock:
_processMessageResponse:error:resultCode:toURI:fromURI:service:fromIdentity:
_processMessageResponseForMessage:withError:resultCode:toURI:fromURI:service:fromIdentity:
_processMessagesUponUnpairing
_processNameToServiceName:
_processNonMessagingPayloadWithCommand:dictionaryPayload:senderToken:topic:toIdentifier:fromID:peerResponseIdentifier:guid:service:idsMessageContext:messageContext:
_processOutgoingNonUrgentInternetMessages
_processOutgoingPacket
_processQueuedBroadcastsForServices:priority:forceRetry:
_processReceivedDependentRegistration:oldDependentRegistrations:
_processRegionValidationMessage:deliveredWithError:resultCode:resultDictionary:
_processRegistrationMessage:sentRegistrations:descriptionString:actionID:actionString:isDeregister:deliveredWithError:resultCode:resultDictionary:
_processSelfAllocations:allocation:
_processStoredIncomingLocalMessage:
_processStoredIncomingLocalMessages
_processStoredIncomingMessages
_processStoredIncomingRemoteMessagesWithGUIDs:ignoringGUIDs:lastTimeInterval:
_processStoredMessagesIncludingClassD:
_processStoredOutgoingUrgentMessagesProcessLocalAccounts:
_processStunBindingRequest:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:
_processStunBindingResponse:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:
_processStunDataIndication:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:packetBuffer:fromDeviceUniqueID:cbuuid:
_processStunEchoRequest:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:
_processStunEchoResponse:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:
_processStunPacket:fromDevice:arrivalTime:fromDeviceUniqueID:cbuuid:
_processTime
_processUsageNotifications
_processUsageNotificationsTask
_productBuildVersion
_productName
_productionMetricLogger
_profileID
_progressBlock
_promises
_promptMessage
_promptTitle
_properties
_propertyDictionariesFromPairedDevices:
_protectedCachedKeyMaterialsForDestination:pushToken:forGroup:outURIs:includePeers:
_protobuf
_protocol
_protocolVersion
_provTemporaryPhoneMessageForRegistration:
_provider
_provisionedTemporaryUser
_pruneExpiredStatusUnknownEntries
_pruneInvalidAndLocalPushTokensFromTokens:
_pruneLightweightParticipantsForGroupID:forTokens:
_pruneTrustedDevice:givenEligibleServiceIdentifiers:
_pseudonyms
_publicDataRepresentationForGroup:completion:
_publicIdentityCache
_publicIdentityData
_publicKey
_publicKeyData
_publicKeyForDevice
_publicKeyStorage
_publicLegacyIdentityData
_publicNGMIdentityData
_publicNGMPrekeyData
_publicPreKeyData
_publish
_publishedStreams
_purgeAllocation
_purgeCancelBlock
_purgeClientDataBlocks
_purgeEnqueueBlock
_purgeMap
_purgePreviousIdentityDelay
_purgePreviousIdentityFromMemoryAndKeychain
_purgePreviousIdentityTimer
_purgePreviousIdentityTimerFired
_purgePreviousIdentityTimerFiredOnMain
_purgeSecuredEncryptionKeysForAllPairedDevices
_purgeTimer
_purgeTimerFiredOnMain
_pushCert
_pushHandler
_pushKey
_pushListener
_pushPriority
_pushPublicKey
_pushToken
_pushTokenToQRSessionID
_pushTokenToSKMsMapping
_pushTokenToURIForGroup
_pushTopics
_putMessageCompletionWithCompletion:
_qrError
_qrEventsForRTCReports
_qrReason
_queryCompletionBlock
_queryGroupServerENID:withPreviousEntries:completion:
_queryHandler
_queryInitialInvitationContextForRegistration:
_queryPolicy
_queryQueue
_queryUpdateNotifier
_queryValidatedEmailsForRegistration:allowPasswordPrompt:completionBlock:
_queue
_queueForImplicitPriority:
_queueForKey:
_queueForPriority:
_queueManager
_queueMap
_queueMessage:service:dataToEncrypt:withEncryptedAttributes:fromID:fromIdentity:toID:toPeople:originallyToPeople:canUseLargePayload:sendOnePerToken:registrationProperties:fakeMessage:alwaysSkipSelf:disallowRefresh:prioritizedTokenList:wantsFirewallDonation:destinationObject:willSendBlock:completionBlock:fromCoalesceQueue:
_queueNextOutgoingData
_queueOneIdentifier
_queuedAuthentications
_queuedBroadcastAttempts
_queuedRegistrations
_quickRelayRequestsCount
_quickRelaySessionToken
_quickSwitchHelper
_radarClassification
_radarComponentId
_radarComponentName
_radarComponentVersion
_radarDescription
_radarKeywords
_radarQueryParameter
_radarReproducibility
_radarTitle
_randomizedIdentityRegenerationInterval
_rapportClient
_rapportSendWithSendParameters:completionBlock:
_rateLimitMap
_rateLimiter
_read:maxLength:
_readFromDataChannel:size:withFlags:isSynced:
_readHandler
_realTimeEncryptionController
_reallyUpdateRegistrationHeartbeatTask
_realm
_realmByListener
_realtimeEncryptionQueue
_rebuildRegistrationInfo:
_recalculateTopics
_receiveData:forKey:fromParticipant:
_receiveFromNWConnection:
_receiveHandlerBeingCalled
_receivedReinitiateBringupAckMessage:fromID:
_receivedReinitiateBringupMessage:fromID:
_receivedReinitiateRequestMessage:fromID:
_receivedReinitiateTeardownAckMessage:fromID:
_receivedReinitiateTeardownMessage:fromID:
_receivedResourceTransferUUIDs
_recentKeyLoadingErrors
_recentlyBlockedHandles
_recipientDataSize
_recipientPushToken
_recipients
_recordID
_recordIDForDeviceRecord:
_recordType
_recursiveLock
_reestablishmentRequestReceiveTime
_refreshIPsecStatus
_refreshLocalAccounts
_refreshRegistration
_regenerateIdentityTimer
_regenerateIdentityTimerFired
_regenerateIdentityTimerFiredOnMain
_regenerateSecuredEncryptionKeys
_regionBasePhoneNumber
_regionID
_regionServerContext
_registerAccount
_registerAccountsWithRemoteInfo:
_registerEndpointQueryCompletionBlock
_registerForAllRegistrationsSucceeded
_registerForCheckpointAndVacuumDB
_registerForDeviceCenterNotifications
_registerForLockdownNotifications
_registerForNetworkAvailableNotification
_registerSysdiagnoseBlock
_registeredAccountIDs
_registeredForPush
_registeredForPushes
_registeredIdentityContainer
_registeredIdentityTimestamps
_registeredKTData
_registeredKeychainError
_registeredPairedDeviceDidConnectBlockPairs
_registration:needsRenewal:
_registrationAbilityChanged:
_registrationCert
_registrationConductor
_registrationControl
_registrationControlStatus
_registrationController
_registrationData
_registrationDataSource
_registrationDate
_registrationHeartbeatDate
_registrationHeartbeatTimer
_registrationInfo
_registrationIsAuthenticating:
_registrationKeyManager
_registrationKeychainManager
_registrationListeners
_registrationNeedsAuthentication:
_registrationProperties
_registrationQueue
_registrationReasonTracker
_registrationStateChangedCounter
_registrationStateChangedDate
_registrationStatus
_registrationType
_registrations
_registrationsPendingHeartbeat
_relayBuildVersion
_relayCancel
_relayExpiryTimeStamp
_relayHighPriorityPort
_relayIP
_relayIPv6
_relayInitiate
_relayPort
_relaySessionKey
_relaySessionToken
_relaySoftwareVersion
_relayUpdate
_reloadFromDictionary:
_remoteAddress
_remoteAddressArray
_remoteAssumeRemoteDeviceEncryption
_remoteBlob
_remoteCID
_remoteCallInfoData
_remoteCell
_remoteConnectionGUID
_remoteConnectionType
_remoteContext
_remoteDeviceEncryptionInfo
_remoteHostAwake
_remoteICEData
_remoteIncomingGUIDs
_remoteInstanceID
_remoteNATIP
_remoteNATType
_remotePacketOutageTimes
_remotePartyID
_remotePublicIdentity
_remoteSA
_remoteSKEData
_remoteURI
_remoteUnauthenticatedPublicIdentity
_remoteUseCloudPairedControlChannel
_remoteUsePhoneContinuityLocalMessage
_removeAccount:messageContext:
_removeAliases:withReason:
_removeAllAllocationsForSessionID:
_removeAllLinksForDeviceID:
_removeAllPseudonyms
_removeAllocateRequestForDevice:requestID:
_removeAndDeregisterAccount:
_removeAndDeregisterAccount:messageContext:
_removeAuthenticationCredentials
_removeAuthenticationCredentialsIncludingAuthToken:
_removeCompletionBlocksForURIs:fromURI:fromService:forRefresh:
_removeEarlyListener:
_removeFromKeychain
_removeLinkForDeviceID:linkKey:verifyWithLink:
_removeListener:
_removeListenerObject:
_removeLocalListenerObject:
_removeMessageForRegistration:fromQueueForKey:
_removeMessageFromStatistics:
_removeObjectForKey:
_removeObjectsForKeysFromKVS:
_removeOldPersistence
_removePeerFromDeviceID:
_removePrimaryAccount:
_removePseudonym:
_removePseudonyms:
_removeSocketPairMessage:localMessage:reason:detailedError:responseCode:
_removeSocketPairMessage:localMessage:reason:responseCode:
_removeUser:
_renewTokenForRegistrationInfo:forceRenewal:failIfNotSilent:
_repairAccountsWithSuccessfulPhoneNumberRegistration
_repairAccountsWithSuccessfullAppleIDRegistrationForDSID:service:
_repairPhoneNumberAccounts
_repairTimer
_repairTimerHit:
_repairiTunesBasedAccounts
_replayCommitter
_replayStateCommitter
_reportAction
_reportAndRemoveForConnectionUUID:
_reportOTRTestResult:setupTime:result:
_reportPreferInfraWiFiToPowerLogs:
_reportRTC
_reportedMKMOverQRArrivalTime
_reportedRateLimitedThisHour
_reportedReceivedMKMFromPush
_reportedReceivedMKMFromQR
_reporterFd
_reporterFile
_reporterTimer
_reportingDataBlob
_reqCount
_request
_requestID
_requestIDStr
_requestIDToAllocateTime
_requestIDToPreferredLocalInterface
_requestIDToSession
_requestKeyMaterialForGroup:sessionID:toSpecificMembers:shouldTrackDistribution:shouldIncludeCachedPeerKeyMaterial:requireMKM:requireSKM:
_requestKeyMaterialForGroup:sessionID:toSpecificMembers:shouldTrackDistribution:shouldIncludeCachedPeerKeyMaterial:requireMKM:requireSKM:isFirstSession:
_requestKeyMaterialForGroup:sessionID:toSpecificMembers:shouldTrackDistribution:shouldIncludeCachedPeerKeyMaterial:shouldGenerateMKM:requireMKM:requireSKM:isFirstSession:
_requestPairedDeviceInfo
_requestPairedDeviceInfoAfterDelay:
_requestUserConsentForPhoneNumberValidationWithCompletion:
_requestors
_requests
_requeueMessages:
_requeueSendingMessage:
_requireAll
_requireBT
_requireBluetooth
_requireLocalWiFi
_requireSignature
_requiredCapabilities
_requiredForMessaging
_requiredLackOfCapabilities
_reregister
_reregisterAndReProvision
_reregisterAndReProvisionForEDULoginWithUsername:
_reregisterAndReidentify:
_reregisterAndReidentify:account:
_reregisterAndReidentify:account:messageContext:
_resetBroadcastQueuesForServices:
_resetCommunicationStateBeforeQuickSwitchDeactivatePairedDevices:withCompletionBlock:
_resetFallbackTimeout:useNextFallback:
_resetMagnetCorruptionMetrics
_resetPhoneNumberRepairCounter
_resetPreferences
_resetPreferences:
_resetQueuedBroadcastsForServices:priority:
_resetRateLimitersForSMSTimeoutForIdentifier:
_resetTimeout:
_resetTimerForTopic:withDelay:
_resettingIncomingResourceTransfers
_resolvedEndpointsDidUpdateHandler
_resourceAvailabilityChangedForIdentifiers:
_resourceAvailabilityChangedForIdentifiers:priorities:dataProtectionClasses:
_resourceAvailabilityChangedForIdentifiers:priorities:dataProtectionClasses:messageTypes:
_resourceAvailabilityChangedForIdentifiers:priority:dataProtectionClass:
_resourceAvailabilityChangedForIdentifiers:priority:dataProtectionClass:messageTypes:
_resourceMetadata
_resourcePath
_resourceTransferUUIDAlreaadyReceived:
_respondToAppleCareRequestID:withMessageContext:error:
_respondToRegistrationControlWithRequestID:status:messageContext:error:
_response
_responseAbsintheResponse
_responseAbsintheServKey
_responseAccessTokens
_responseAccessoryID
_responseAdminAcccessToken
_responseBasePhoneNumber
_responseCarrierToken
_responseCertificate
_responseCertificateData
_responseCertificateExpiration
_responseCleanupTimer
_responseCode
_responseConsentTokens
_responseDeviceScoreNonce
_responseEngramID
_responseEntries
_responseExtraInfo
_responseHBI
_responseHandles
_responseHasCachedURI:groupID:sessionID:
_responseIdentities
_responseMechanisms
_responseMessage
_responsePresenceTopic
_responseRegionID
_responseRegistrations
_responseServiceUserIDs
_responseServices
_responseSessionInfo
_responseSpamMessage
_responseSpamMessages
_responseTTL
_responseValidated
_responseVersion
_responses
_restoreTimer
_restrictions
_resultData
_resumeGDRReAuthenticateIfNecessary
_resumeResourceTransfers
_resumingIncomingResourceTransfers
_resyncing
_retries
_retrieveKeyIndex
_retryRegister
_retrying_loadLegacyIdentityWithIdentifier:serializationDidChange:deserializationDidFail:error:
_reunionSyncClientIDs
_reunionSyncCollaborator
_rollAccountKeyWithFullCluster:completion:
_rollDieForNonUrgentInternetSend
_rollingError
_route
_rtt
_run
_runCleanupWithExpirationInterval:
_runningSimpleAuthentication
_save
_saveAndNotifyGDRUpdate
_saveCache
_saveCancelBlock
_saveClassXIdentity:savedIdentity:protectionClass:savedUnsavedIdentity:
_saveEnqueueBlock
_saveNow
_saveQueue
_saveSubServices
_saveTimer
_saveTimerFiredOnMain
_saveToKeychainWithDictionary:
_scanningTypes
_scheduleHeartbeat:
_schedulePurgeOfPreviousIdentityAfterDelay:
_scheduleRegenerationOfRegisteredIdentityAfterDelay:
_scheduleRescueHeartBeat
_scheduleSMSTimeout:
_scopeID
_scoringNonce
_screenSharingToken
_sdNumberNoClose
_sdOriginal
_seal
_selectBestLink:
_selectDefaultMic
_selfAllocationCount
_selfAllocations
_selfHandle
_selfHealRateLimiter
_selfVerifyThrottleTime
_sendABCForFailureForIdentifier:WithEvent:context:
_sendAWDMetricsForAllocation:status:hasRecipientAccepted:
_sendAbsintheValidationCertRequestIfNeededForSubsystem:
_sendAcceptMessageWithContext:connectionData:
_sendAccountSyncMessage:withPersistentKey:
_sendAckForMessage:
_sendAheadGroup:withContext:
_sendAllocateRequest:
_sendAsAttachmentForMessage:payloadData:
_sendAttachmentWithGuid:service:topic:originalCommand:additionalDictionary:encryptedData:toToken:toID:fromID:fromIdentity:canUseLargePayload:expirationDate:destinationObject:ackBlock:completionBlock:
_sendAuthenticateRegistration:
_sendAuthenticateRegistrationTask
_sendAuthenticationRequest:forceNew:
_sendAuthenticationRequest:forceNew:failIfNotSilent:
_sendAuthenticationRequest:forceNew:forceRenewal:failIfNotSilent:
_sendBAAValidationRequestIfNeededForSubsystem:
_sendBlock
_sendCancelInvitationToDestinations:withData:
_sendCertifiedDeliveryReceiptIfNeededForMessage:service:failureReason:failureReasonMessage:
_sendClientDecryptedDatabBlobs:type:forParticipant:
_sendConnectedLinkInfoToAVC
_sendConnectionCheckRequest
_sendDataViaNWConnection:isLargeTransfer:
_sendDeregistration:
_sendDeregistrationTask
_sendEncryptedMessage:
_sendErrorDictionary:onService:fromID:fromIdentity:toID:toToken:topic:sendCompletionBlock:
_sendErrorMessage:fromID:toDestinations:usingAccountWithUniqueID:useDictAsTopLevel:dataToEncrypt:wantsResponse:timeout:command:priority:completionBlock:
_sendExpiredAckForMessage:
_sendFTFanoutMessage:service:fromID:toPeople:fromIdentity:completionBlock:
_sendFTMessage:service:fromID:toID:toToken:toSessionToken:toPeople:fromIdentity:completionBlock:
_sendFanoutMessage:account:toGroupMembers:fromID:command:commandContext:toGroup:sessionID:reason:waitForMadridAcks:isUPlusOne:isInitiator:requiredCapabilites:requiredLackOfCapabilities:completionBlock:
_sendFanoutMessage:account:toGroupMembers:fromID:command:toGroup:sessionID:reason:isUPlusOne:isInitiator:
_sendFanoutMessage:account:toGroupMembers:fromID:command:toGroup:sessionID:reason:isUPlusOne:isInitiator:requiredCapabilites:requiredLackOfCapabilities:
_sendIDQueryRequest:fromIdentity:fromURI:fromService:completionBlock:
_sendIDSAuthRequest:forInfo:
_sendIDSAuthenticationForRegistration:
_sendIDSAuthenticationOrRegistrationIfNeeded:
_sendIDStatusChanges:forService:URI:success:error:
_sendInvitationMessageToDestinations:withOptions:contextData:declineOnError:connectionData:
_sendInvitationWithOptions:data:declineOnError:
_sendKTOptInStatusUpdateForRegistration:withOptInStatus:withCompletion:
_sendKeepAliveRequest:
_sendKeyMaterialsToGroup:sessionID:toSpecificMembers:shouldIncludeCachedPeerKeyMaterial:requireMKM:requireSKM:
_sendKeyRecoveryRequestForPendingKeys:requireMKM:requireSKM:forDevice:
_sendLinkSelectionPreference:linkScore:ipPreference:
_sendLocalDeliveryMessagesForAccountUUID:threadContext:priority:dataProtectionClass:
_sendLocalDeliveryMessagesForAccountUUID:threadContext:priority:messageTypes:dataProtectionClass:
_sendLocallyWithSendParameters:service:uriToLocalDestination:data:protobuf:threadContext:progressBlock:completionBlock:
_sendLocallyWithSendParameters:uriToLocalDestination:data:protobuf:completionBlock:
_sendMessage:dataToEncrypt:withEncryptedAttributes:onService:fromID:fromIdentity:toID:toPeople:canUseLargePayload:sendOnePerToken:allowPartialSendsToSucceed:registrationProperties:fakeMessage:alwaysSkipSelf:disallowRefresh:prioritizedTokenList:wantsFirewallDonation:destinationObject:willSendBlock:completionBlock:firstAttemptDate:fromCoalesceQueue:withQueryCompletion:
_sendMessage:toDestination:forGroup:sessionID:command:timeout:shouldExpire:useQR:completion:completionBlock:
_sendMessageCheckpointIfNecessary:checkpoint:service:additionalInformation:
_sendMessageCounter
_sendMessageDictionary:lastRetryInterval:dataToEncrypt:withEncryptedAttributes:onService:wantsResponse:canUseLargePayload:sendOnePerToken:allowPartialSendsToSucceed:highPriority:fireAndForget:expirationDate:enforceRemoteTimeouts:messageID:fromID:fromIdentity:toID:toPeople:accessToken:topic:registrationProperties:fakeMessage:alwaysSkipSelf:pushPriority:ignoreMaxRetryCount:disallowRefresh:originalTimestamp:prioritizedTokenList:wantsFirewallDonation:destinationObject:deliveryTime:deliveryMinimumTime:sendMode:ackBlock:willSendBlock:sendCompletionBlock:
_sendMessageHandler
_sendMessageWithSendParameters:threadContext:onObject:willSendBlock:progressBlock:completionBlock:
_sendMessageWithSendParametersOnMainThread:filteredDestinations:data:compressedData:protobufToSend:willSendBlock:completionBlock:
_sendMode
_sendNominateRequest
_sendOTREncryptedMessage:useEncryption:streamID:forPriority:flag:token:
_sendOTREncryptionQueue:streamID:
_sendOnePerToken
_sendPacketBuffer:toDeviceUniqueID:cbuuid:link:
_sendParticipantMappingUpdateToClient:forLinkID:shouldReplace:
_sendPreflightVerificationIfNeeded
_sendPreflightVerificationWithIMSI:PLMN:
_sendPseudonymMessageOperation:forURI:pseudonymURI:properties:requestProperties:forRegistration:completionBlock:
_sendQREventToAVC:
_sendRegistrationAsDeregister:
_sendRegistrationTask
_sendRemotelyWithSendParameters:data:protobuf:willSendBlock:completionBlock:
_sendRenewedPrekeysToGroups
_sendSMSVerificationWithMechanism:
_sendServerStorageMessageForTopic:retryCount:
_sendSessionEndWithData:
_sendSessionInfoResponseErrorToClient:
_sendSinglePathMessage:toDestinations:withCommand:forceLocalDelivery:messageGUID:fromID:willSendBlock:completionBlock:
_sendSocketMessage:
_sendSocketMessage:ignoreSequenceNumber:
_sendSuspended
_sendTime
_sendToConnectedSocket
_sendUDPLinkInterfaceAddresses:toDeviceID:isRetransmission:isReply:
_sendValidationRequestForSubsystem:
_senderExternalIP
_senderURI
_sendingKeysToMembers:
_sendingMessageCountForClass:
_sendingMessageCountForType:
_sendingMessageStatisticsForClass:
_sendingMessages
_sendingOfflineActiveParticipantInfoRequest:
_sendingPowerAssertion
_sendingPriorityMessage
_sent
_sentAWDReport
_sentMessageDataSize
_sentToRemotes
_seqRecvStart
_seqSend
_seqSendStart
_serialNumber
_serialPersistQueue
_serializeAndPersistApplicationKeyIdentitiesDeleteIfNull:
_serializeAndPersistBuildOfIdentityGeneration:itemName:
_serializeAndPersistIdentityContainer:identityIdentifier:deleteIfNull:
_serializeAndPersistKTRegistrationDataDeleteIfNull:
_serverBag
_serverBagBoolForKey:withDefaultValue:
_serverDesiredKeyMaterialsFromGroupEncryptionController
_serverDesiredKeyMaterialsSigner
_serverDesiredMaterials
_serverErrorDetail
_serverHeartBeat:
_serverHeartBeatTimerHit:
_serverKey
_serverMessagingEntitlements
_serverSpecifiedJoinNotificationDeliveryTimeout
_service
_serviceAdHocType
_serviceAllowLiveMessageDelivery
_serviceAllowLocalDelivery
_serviceAllowProxyDelivery
_serviceAllowWiProxDelivery
_serviceConnection
_serviceConnectionCache
_serviceConnector
_serviceController
_serviceDuetIdentifiers
_serviceIdentifier
_serviceIdentifierCount
_serviceIndexToKeyConfigs
_serviceIsDSBased
_serviceName
_serviceNameToControlCategoryMap
_serviceNameToStreamIDMap
_servicePushTopic
_serviceQueueForKey:
_serviceSignatures
_serviceToOptInManager
_serviceToVerifier
_serviceType
_serviceTypes
_serviceUseiMessageCallerID
_serviceUserID
_serviceWantsReflectedSend
_serviceWantsTinkerDevices
_services
_servicesChanged
_servicesPreferringInfraWiFi
_servicesRemoved:
_servicesToNameMap
_servicesToTopicMap
_servicesWithPreferences
_sessionController
_sessionID
_sessionIDMultiQueue
_sessionIDStr
_sessionInfoMetaData
_sessionInfoRequest
_sessionInfoRequiredKeys
_sessionInfoToToken
_sessionKeyStorage
_sessionStartWithSocketDescriptor:
_sessionStartedCalled
_sessionToAllocations
_sessionToBlockMap
_sessionToLocalParticipantID
_sessionWithInstanceID:messageContext:requiredEntitlement:
_sessionWithUniqueID:messageContext:requiredEntitlement:
_sessions
_setBestLinkToCurrent:
_setCloudConnectionConnected:forPeer:
_setCreatedAt:forConnectionUUID:
_setDailyTimer
_setDatabaseCloseTimer
_setDatabaseCloseTimerOnIvarQueue
_setDisasterModeToken:forURI:
_setInitialLinkType:
_setIsDisabled:forService:
_setIsQuickSwitchingToAnotherDevice:
_setKeychainData:withServiceName:withAccountKey:withIDSRegistrationAccesssGroup:error:
_setLinkPreferences:
_setLinkProtocol:
_setOTREnableTimer
_setObject:forKey:
_setPurgeTimer
_setQueue:
_setQueue:forKey:
_setResponseForQRGroupID:groupID:
_setSMSDeliveryTimeout:
_setSaveTimer
_setSessionInfoRequiredKeys
_setUserIntentState:forAlias:withReason:
_setValidationStatus:error:forAlias:info:addToCurrentHandlesIfNeeded:forceAdd:
_setValidationStatus:error:forAlias:info:addToCurrentHandlesIfNeeded:forceAdd:aliasProperties:
_setupAccount
_setupAdHocAccounts
_setupAdHocAccountsForPrimaryAccount:
_setupAllocation:fromURI:sessionID:isSessionIDRemoteDeviceID:options:prevConnectStatus:requestUUID:connectReadyHandler:withPreferredLocalInterface:
_setupForCurrentSubscriptionState
_setupForLocal
_setupHandlers
_setupLinkedAccounts
_setupListenerConnection:listenerID:pid:setupInfo:entitlements:setupCompletionBlock:
_setupLocalAccounts
_setupNewAllocation:sessionID:isSessionIDRemoteDeviceID:fromIdentity:fromURI:fromService:options:connectReadyHandler:withPreferredLocalInterface:forAdditionalAllocation:
_setupPairedSystemContext
_setupRestoreTimer
_setupTokens
_setupUsingRemoteInfo
_sharedSession
_sharedSessionHasJoined
_sharedState
_shouldAWDLogMessage:
_shouldAbortOnMissingTopic
_shouldAllowCloudDelivery
_shouldAssertRealTimeMode
_shouldAutoBugCaptureForECError:
_shouldAutoRegisterAllHandles
_shouldBringWiFiDown
_shouldBroadcastAllValidMkMs
_shouldBypassRepairLogic
_shouldCallbackOnCancel
_shouldConnectToQRServer
_shouldDropMessageForIncomingDecryptionErrorType:
_shouldDropMessageForIncomingErrorMessageWithDecryptionErrorType:
_shouldEnforceRemoteTimeout
_shouldForgetCachedPeerTokensForDecryptionErrorType:withOriginalDecryptionError:
_shouldForgetCachedPeerTokensForIncomingRemoteDecryptionErrorType:
_shouldHaveRegisteredIdentity
_shouldIgnoreAutoBugCaptureForECFailure:
_shouldIgnoreAutoBugCaptureForLegacyFailure:
_shouldIgnoreMPError:
_shouldIncludeDefaultDevice
_shouldIncludeDefaultDeviceAsDestinationForMessageForFromID:service:
_shouldKeepWiFiUp
_shouldLaunchClientForCapabilities:
_shouldListen
_shouldLogTransportStats
_shouldMessageBeProxied:service:
_shouldNotSetupPhoneNumberRepairTimer
_shouldPostNotifications
_shouldProtectTrafficUsingClassA
_shouldQuickSwitchAfterIPSecConnected
_shouldRegenerateRegisteredIdentity
_shouldRegisterUsingDSHandle
_shouldRejectMessageOnCrossAccountService:fromSender:
_shouldRejectMessageOnFamilyService:fromSender:
_shouldReplyWithRemoteDecryptionErrorMessageForDecryptionErrorType:
_shouldRequeryHandles
_shouldReregOnManateeAvailability
_shouldRetryForDecryptionErrorType:
_shouldSendHasSpaceAvailable
_shouldSendMKMOverQR
_shouldServiceBeDisabledOnSignOut:forDomain:
_shouldServiceBeEnabledOnSignIn:forDomain:
_shouldSetAllowlistUUIDForStreamingSocket
_shouldStartBTLinkManager
_shouldStopBTDatagramLink
_shouldStoreBeforeFirstUnlockIncomingLocalMessage:from:forTopic:
_shouldSubmitMetricsBasedOnDate:isInitiator:
_shouldSubmitMetricsForThisSession
_shouldSubmitRegistrationCompletedForServiceIdentifier:
_shouldSubmitRegistrationCompletedMetricForRegistration:
_shouldSupressRepairLogic
_shouldUseAbsinthe
_shouldUseAbsintheV3
_shouldUseAbsintheV4
_shouldUseBAACertOption
_shouldUseBAAOnly
_shouldUseCrossLayerLogging
_shouldUseCurrentResponse:cachedMessage:
_shouldUseDebugPiscoLogging
_shouldUseIPsecLink
_shouldUseIPsecLinkForDefaultPairedDevice
_shouldUseNWFraming
_shrunkenServiceIdentifiers
_shuttingDown
_shuttingDownSim2Host
_sigAlgorithm
_signData:withType:error:
_signInDomain:withUsername:authToken:password:accountInfo:accountStatus:handles:
_signInResponder
_signalDidUpdateEndpoints
_signature
_signatureTypeForSigningAlgorithm:
_signatures
_signedData
_signingTimestamp
_silentlyFailMessagesOnSwitch
_simDeactivationRequestRateLimiter
_simulateCrashWithErrorString:
_skeData
_smallWindowSMSTimeoutRateLimiter
_smsDeliveryClear
_smsSendDate
_smsSignature
_smsSignatures
_sockAddrPairTable
_socketConnection
_socketDescriptor
_socketOptionsForDevice:uniqueID:pushToken:connectionSuffix:
_socketToNiceCommand:
_socketTrafficClass
_softwareVersion
_sortedArrayFromCBUUIDSet:
_sourceAddress
_sourceInterfaceIndex
_sourcePeerID
_spamMessage
_spamMessages
_spec
_specific
_specificEntitlementCount
_specificEntitlements
_specificOriginatorFromID:senderToken:accountUniqueID:
_splitDestinations:intoLocalDestinations:remoteDestinations:rapportDestinations:sendParameters:
_splitDestinations:intoLocalDestinations:remoteDestinations:threadContext:sendParameters:
_sponsorAlias
_srtpProtocolVersion
_stableKeyIdentifiersSentToClient
_stableKeyMaterials
_startAndSetupSocketPairConnection:capabilityFlags:instanceID:serviceMinCompatibilityVersion:socketDescriptor:
_startAutomaticCacheResetTimerIfNeeded
_startCellularDataStatusListener:
_startCleanupTimer
_startCloudDisableTimerIfNecessary
_startConnectingDate
_startConnection
_startConnectionEcho:
_startConnectionForContinuityPeer
_startDate
_startDisableTimerIfNecessary
_startEvictionTimerIfNeeded
_startExtendedTimeoutTimerForTopic:
_startKeyRecoveryForMKM:forSKM:forDevice:forGroupID:
_startMessagesDequeueMessagesTimer
_startMkmExpirationTimer:forGroupID:block:
_startMkmRollTimer:forGroupID:block:
_startNRDeviceMonitor:
_startNWConnectinForIPsecCase:controlChannelVersion:capabilityFlags:instanceID:serviceMinCompatibilityVersion:
_startPowerLogTimersForAllPriorities
_startPushHandlingLocked
_startQRConnectionForSession:isInitiatorsAcceptedSession:withLocalInterfacePreference:
_startQueryDateByTopLevelService
_startQueryForURIs:fromIdentity:fromURI:fromService:context:completionBlock:
_startRegistrationHeartbeat
_startReporter
_startRetryForKey:withAction:
_startTime
_startTimeoutTimerForTopic:
_startUDPLinkHandshakeForDefaultDevice:immediately:
_startedAsUPlusOneSession
_state
_stateFlags
_stateMachineByUserID
_stateMachineTimedOut:
_stateManager
_stateProvider
_statistics
_stopAdvertising
_stopAllPendingActions
_stopEchoTimer
_stopEvictionTimer
_stopEvictionTimerIfEmpty
_stopMkmExpirationTimerForGroup:
_stopMkmRollTimerForGroup:
_stopPushHandling
_stopRegistrationAgent
_stopRegistrationHeartbeat
_storageLock
_storageTimer
_storageTimerFired
_storeAccountTask
_storeAccounts
_storeData:forIdentifier:completion:
_storeGossipRecipients
_storeIncomingClassADataMesageIfNeeded:topic:sequenceNumber:
_storeIncomingClassCDataMessageIfNeeded:topic:sequenceNumber:
_storeMappingFromPushTokenToURIs:fromID:service:cert:forGroup:
_storePendingKeyMaterial:stableKeyMaterial:hasValidMKM:hasValidSKM:forDevice:
_storedIncomingFamilyMessage
_storedSize
_streamIDToServiceNameMap
_streamIDToTopic
_streamIDToTopicLock
_streamInfo
_strictlyUnarchivedObjectOfClasses:fromData:error:
_stringForKey:
_stringRepresentationForRealm:
_stringRepresentationOfUserRealm:
_stripFZIDPrefix
_stripPotentialTokenURIWithToken:
_strippedAccountInfo:
_subActivity
_subService
_submitGDRReponseToAWDWithResultCode:error:
_submitIDSSessionAWDMetric:withContainer:
_submitLastResortCacheMetricForGUID:service:
_submitMagnetCorruptionMetricsToAWD
_submitMetricForTrustedDeviceEnrollmentWithKVSResult:kvsSyncTimeInterval:
_submitMetricsForTrustedDeviceEnrollmentWithCloudKitResult:cloudKitOperationTimeInterval:accountKeyResult:accountKeyOperationTimeInterval:
_submitMetricsForTrustedDeviceVerificationWithCloudKitResult:cloudKitOperationTimeInterval:accountKeyResult:accountKeyOperationTimeInterval:index:entries:
_submitNoLastFromStorageMetricForService:
_submitRegistrationAccountStatusMetric
_submitRegistrationAccountStatusMetric:
_submitRegistrationCompletedMetricWithRegistration:success:registrationError:
_subscribeForInfo:withDescription:resolvedTokens:withCompletion:
_subscribeToWRMForLinkRecommendation:
_subscribedStreams
_subscriptionSourceNumberForContext:
_subsequentGossipChance
_subservicesByPrimaryService
_subsystem
_success
_successful
_successfulRegistrations
_summaryReportBaseTime
_supportDynamicServices
_supportDynamicServicesOptimization
_supportUnauthenticatedUser
_supportedMessageTypes
_supportedServicesToken
_supportsCloudConnections
_supportsLegacyOTRSessionToken
_supressClientNotifications
_suspendBTLink:cbuuid:
_suspendOTRSessionsWithProtectionClass:
_suspendTrafficCheckTime
_suspended
_switchedToUPlusMany
_syncConnectionForAck
_syncDirectConnections
_syncQueue
_syncQueuedBroadcastAttempts
_syncTinkerDeviceInfo
_sync_queue
_systemAccountAdapter
_systemAccountRepresentationOfACAccount:DSIDKey:
_systemAccountUserSynchronizer
_systemAccountWithIdentifier:DSIDKey:criteria:completion:
_systemAccountWithIdentifier:DSIDKey:criteria:error:
_systemConfigurationPrefsChanged
_systemIsFastUserSwitched
_systemMonitor
_targetPeerID
_targetService
_targetSessionToken
_targetToken
_tempPhoneCredentials
_tempUserID
_temporaryPhoneEmail
_terminate
_terminusConnected
_terminusRegistered
_testData
_testDeviceConnectionInfo
_testOptions
_timeBase
_timeConnected
_timeDisconnected
_timeEnqueued
_timeInterval
_timeSent
_timeoutTimer
_timeoutTimerFired
_timeoutTimerFiredOnMain
_timer
_timerBlock
_timerFired
_timerFired:
_timerFiredOnMain
_timerIdentifierFromBaseIdentifier:
_timerMap
_timestamp
_timingEvents
_toDeviceID
_toURI
_token
_tokenToOTREncryptionQueue
_tokenToOTRError
_tokenURIForToken:uri:
_tokenURINegativeCache
_topic
_topicAllowsNoEncryption:fromIdentifier:
_topicStringToSubscribedInfo
_topicsToListenOn
_totalBytesReceived
_totalDeliveredMessagesInfraWiFi
_totalPacketsDropped
_totalPacketsReceived
_totalPacketsReceivedClientSockets
_totalPacketsReceivedInfraWiFi
_totalPacketsSent
_totalReceivedRawBytes
_totalRepairCountFromPrefs
_trackedRegistrations
_traffic
_trafficClassLock
_transactionQueue
_transferServicesController
_transient
_transparencyBlob
_transparencyDaemon
_transparencyStatus
_transparencyTicketForQueryResultsWithIndex:verificationState:entries:
_transparencyVerifier
_transparencyVersion
_transparentEndpointViewer
_transportType
_triggerStallDetectionLogsForDetector:withEvent:
_trustedDeviceForRegistrations:transparencyLoggableDatasByServiceType:transparencyDeviceSignaturesByServiceType:
_trustedServices
_tryToSendSMSIdentification
_ttl
_ttlCache
_ttlInSeconds
_type
_typeToKeyIDToEncryptedData
_typeToParticipantIDToDecryptedDataBlob
_udpLink
_uint32Key
_unSavedidentityClassA
_unSavedidentityClassC
_unSavedidentityClassD
_unappliedRollingTicket
_underlyingSocketPairMessage
_uniqueID
_unknownSenderURI
_unloadServiceWithName:
_unpersistTopic:
_unpublish
_unregisterAccount
_unregistered130RetryInterval
_unregisteredDeserializationError
_unregisteredIdentityContainer
_unregisteredKTData
_unregisteredKeychainError
_unsentOutgoingMessagesUpToLimit:byteLimit:priority:accountUUID:wantsPayload:requireDuet:localDestinationDeviceID:
_unsubscribeFromWRMForLinkRecommendation
_unvalidateAliases:
_updateAccountWithAccountInfo:
_updateActiveLightweightParticipants:
_updateActiveParticipants:
_updateActiveStateForAllPairedDevices
_updateActiveStateForAllPairedDevices:
_updateAllActiveParticipantsInfoFromParticipants:standardParticipantsPushTokens:lightweightParticipantsPushTokens:groupID:
_updateCacheWithStatusUpdates:fromURI:fromService:success:hadError:negativeCacheHints:
_updateCapabilities
_updateDependentRegistrationTimerFiredOnMain
_updateDependentRegistrations
_updateDeviceProperties
_updateDictionary:addMessageSize:addMessageCount:
_updateDirectMessagingMetadataForRemoteObject:shouldBroadcastForRemoteObject:
_updateDomainWithUsername:accountInfo:
_updateExpiry:forUser:
_updateLightweightParticipants:forGroup:sessionID:
_updateLinkTransportAddress:localAddress:remoteAddress:
_updateListenerIfNeeded
_updateLocalSetupInProgressState:
_updateNonUrgentInternetSendTimer
_updateNotifyState
_updatePairedDevice:pairingType:completion:
_updatePairedState:
_updateParentalSettings
_updatePerformedForcedGDRDate
_updatePhoneNumberCallerID
_updatePreferredAccountWithAccountInfo:withAccountSyncCommand:
_updatePseudonymExpiryEpoch:
_updatePushCommandsLocked
_updatePushState
_updateRegistrationHeartbeat
_updateRegistrationStatusWithError:info:
_updateRelevantEncryptedDataBlobForSession:
_updateSessionsForAllRegisteredURIs
_updateSessionsWithRegisteredURIs:
_updateSessionsWithRegisteredURIs:retryIfNotRegistered:
_updateStandardParticipants:forGroup:sessionID:
_updateStorageTimerWithInterval:
_updateSubServicesForDevice:superService:newSubservices:
_updateTimerForTopic:sendMode:
_updateTinkerDeviceWithURIs:pushToken:
_updateUsersForCurrentUsers:updatedUsers:
_updateVettedAliases:emailInfo:addToCurrentHandlesIfNeeded:
_urgentCloudConnectionForAck
_urgentConnectionForAck
_urgentDirectConnections
_urgentQueue
_urgentQueuedBroadcastAttempts
_urgent_queue
_uriSuggester
_uriToParticipantID:
_uris
_urisToParticipantIDs
_usageNotifications
_useBTDatagramPipe
_useDictAsTopLevel
_useNamedOTRSessionToken
_usePairingKey
_useQRDirectly
_useSecureQRControlMessage
_useSharedOTRSession
_useSkywalkChannel
_usedLastResortCache
_usedMMCS
_user
_userAccountSynchronizer
_userAgent
_userConfiguration
_userConsentDeniedForCTPNR
_userDefaults
_userHandle
_userIntentDictForAlias:
_userName
_userStore
_userUniqueIdentifier
_userVisibleName
_username
_usersToHeartbeatDatesMap
_usersToTimers
_usersToTimersLock
_utunControlMessageFairplayDeviceInfo
_utunControlMessageFairplayDeviceSessionInfo:grappaDeviceSessionInfoSize:
_utunControlMessageFairplayHostSessionInfo:deviceType:protocolVersion:
_utunDeliveryController
_utunSocket
_uuid
_uuidFromNSStringToNSData:
_validAccountForIncomingMessageSentToIdentifier:service:outPseudonym:
_validSIMStateForRegistration
_validateAliases:
_validateAliases:validateAlreadyValid:
_validateCachedGroup:isParentOfGroup:completion:
_validateContextDate
_validateContextTTL
_validateDecryptionParametersWithError:
_validateParametersWithFullIdentityToUse:fullIdentity:publicIdentity:inputData:identifier:forDecryption:
_validatePreferences:forService:
_validateRegionID:phoneNumber:registration:
_validationContextDisabled
_validationContextQueue
_validationInfoByMechanism
_validationInfoForSubsystem:createIfNil:
_validationMechanisms
_validationMessageSendBlock
_validationQueue
_validationSession
_validationStatusForAlias:
_valueOfProperty:forURI:pushToken:fromURI:service:
_verboseFunctionalLogging
_verbosePerformanceLogging
_verifier
_verifyKeyTransparencyOfRegisteredIndex:verificationState:entry:
_version
_versionNumber
_versionNumberForPersistedMap:
_vettedEmails
_vifMaxPendingPackets
_vifName
_vifShouldReadMultiple
_vifUseChannel
_waitForDefaultPairedDevice
_waitingForMigration
_wakingPushPriorityStore
_wantsAppAck
_wantsCertifiedDelivery
_wantsDeliveryStatus
_wantsFirewallDonation
_wantsProgress
_wantsResponse
_wasInitiallySetupUsingIDSPairing
_wasPrimary
_wideWindowSMSTimeoutRateLimiter
_willSendBlock
_wipeLegacyCache
_wpLinkManager
_wrapData:error:
_wrapMode
_writeAccountDefaults:force:
_writeAccountDefaults:force:interestedSubservices:
_writeCoalescingDelay
_writeCoalescingLeeway
_writeHandler
_writeLock
_writeSocketIsResumed
_xpcQueue
abortTransfer
absintheHello
absintheUDID
absintheValidationSessionOnQueue:withCompletion:
acceptIncomingGrantRequests
acceptInvitation
acceptInvitation:
acceptInvitation:messageContext:
acceptInvitation:withData:
acceptInvitation:withData:messageContext:
acceptInvitationWithData:
accessCount
accessToken
accessoryDataReceived:withGUID:forTopic:toIdentifier:fromID:context:
accessoryID
accessoryIDs
accessoryReportMessageReceived:accessoryID:controllerID:withGUID:forTopic:toIdentifier:fromID:context:
accessoryRequests
account:accountInfoChanged:
account:aliasesChanged:
account:dependentDevicesUpdated:
account:dependentDevicesUpdatedUponReconnect:
account:didUpdateRegisteredDevices:
account:displayNameChanged:
account:localDeviceAdded:
account:localDeviceRemoved:
account:loginChanged:
account:profileChanged:
account:pseudonymsChanged:
account:registrationStatusInfoChanged:
account:vettedAliasesChanged:
accountAdded:
accountAndAdHocAccounts
accountBlob
accountBuilder
accountCleanup
accountController
accountControllerDidFinishLoadingAccounts:
accountDescription
accountDisabled:onService:
accountDisplayName
accountEnabled:onService:
accountGUID
accountHealableErrors
accountID
accountIdentityClusterForRegistrationWithCompletion:
accountIdentityElector
accountInfo
accountInfoWithCompletionHandler:
accountKey
accountKeyByService
accountKeyManager
accountOnService:withAliasURI:
accountOnService:withLoginID:
accountOnService:withVettedAliasURI:
accountProperties
accountPropertyForKey:
accountPublicKey
accountRepair
accountSetupInfo
accountStore
accountSync
accountSyncMinCompatibilityVersion
accountType
accountTypeWithAccountTypeIdentifier:
accountTypeWithAccountTypeIdentifier:error:
accountTypeWithIdentifier:completion:
accountUUID
accountUniqueIDsWithType:
accountUpdate
accountWithIdentifier:localObject:requiredEntitlement:
accountWithServiceName:aliasURI:
accountWithServiceName:myID:
accountWithUniqueID:
accounts
accountsChanged:forTopic:
accountsDebugging
accountsLoaded
accountsOfAdHocType:
accountsOnService:
accountsOnService:withType:
accountsWithAccountType:
accountsWithType:
accumulativePreferencesForAllServices
ackBlock
ackUpdatesForActivity:
acknowledgeMessageWithGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:
acknowledgeMessageWithGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:messageContext:
acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:
acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:messageContext:
acknowledgeOutgoingMessageWithGUID:alternateCallbackID:forAccountWithUniqueID:
acknowledgeOutgoingMessageWithGUID:alternateCallbackID:forAccountWithUniqueID:messageContext:
acknowledgeSessionID:clientID:
acknowledgeSessionID:clientID:messageContext:
actionByTarget
activateRegistration
activateWithCompletion:
activateWithValidationData:serverKey:scoringNonce:
active
activeDevices
activePairedDevice
activePairedDeviceHasPairingType:
activeParticipantsForGroup:
activeRegistrations
activeRegistrationsMatchingUserID:
activeRegistrationsOfType:
activeRegistrationsToRegister
activeRelayIP
activeRelaySessionToken
activeURIsFromURI:service:
activity
activityMonitorCollaboratorForXPCDaemon:
activityMonitorCollaboratorWithCompletion:
activityMonitorEntitlements
activityMonitorManager:receivedUpdate:forActivity:
activityPolicy
activityStateMonitor
activityStatus
activitySubActivity
activityTimestamp
activityTopic
adHocAccounts
adHocServiceNames
adHocServiceType
adHocServicesForIdentifier:
addAccount:
addAccountWithLoginID:serviceName:uniqueID:accountType:accountInfo:
addAccountWithLoginID:serviceName:uniqueID:accountType:accountInfo:messageContext:
addActionListener:
addActionListener:forRealm:
addAggregatableMessage:
addAggregateMessage:
addAlias:
addAliases:
addAliases:toAccount:
addAliases:toAccount:messageContext:
addAllocation:
addApplicationPublicIdentity:
addAuthUserID:certificate:privateKey:publicKey:
addAvailableNotificationForSession:appleID:alias:deviceName:serviceType:completionBlock:
addBlock:forKey:description:
addBlock:withTimeout:forKey:description:
addBlockForRegistrationCompletion:
addBlockToAggregatableMessage:forURIs:trackingSet:guid:
addBlockToAggregateMessage:forURIs:messageQueue:guid:
addBlockToAggregateMessage:guid:
addBlockToMMLMessage:guid:
addBlocksOnLinkConnect:
addCandidateEmail:
addClientDataUpdateBlock:forToken:
addCompletionBlock:forSession:
addCompletionBlock:forToken:
addCompletionBlock:forUniqueIdentifier:
addConnectivityDelegate:
addContinuityPeer:btUUID:connectBlock:failureBlock:
addData:withError:
addDelegate:
addDeliveryHandler:uuid:
addEndpointQueryCompletionBlock:forToken:queue:
addEntries:forImpactedServices:category:isDonated:
addEntries:withCompletion:
addEntriesFromDictionary:
addEvent:
addIdentity:forToken:uri:service:error:
addIdentityData:forToken:uri:service:error:
addIndex:
addListener:
addListener:forActivity:
addListener:topics:commands:queue:
addListener:wakingTopics:opportunisticTopics:nonWakingTopics:commands:queue:
addLocalPairedDevice:BTOutOfBandKey:shouldPairDirectlyOverIPsec:pairingType:bluetoothMACAddress:
addMessage:toFanout:
addNotificationRequest:withCompletionHandler:
addOTRSessionBlock:sessionBlock:key:
addObject:
addObjectsFromArray:
addObserver:forKeyPath:options:context:
addObserver:selector:name:object:
addOperation:
addOpportunisticData:serviceName:accountUniqueID:identifier:options:completion:
addPairedDevice:
addPairedDevice:completion:
addPairedDevice:shouldPairDirectlyOverIPsec:
addPairedDeviceWithCBUUID:pairingType:
addPairedDeviceWithInfo:completion:
addPhoneAuthenticationCertificate:withUserID:
addPhoneNumberValidationRequestor:
addPreferWiFiRequest
addPrimaryAccount:
addPurgeClientDataBlock:forToken:
addQREventForRTCReport:
addQuickRelayRequest
addRegistration:
addRegistrationInfo:
addRegistrationListener:
addRequestWithID:cert:
addRequestWithID:sig:csr:tag:
addServiceSignatures:
addSession:
addTarget:actionBlock:
addToBlockedList:forCategory:
addTokenURI:forProperty:toRegistrationPropertyToDestinationsMap:
addTokenURINegativeCacheClearBlock
addTrustedServices:
addUTunPeerWithDeviceUniqueID:btuuid:
addUris:
addUsageNotificationForSession:appleID:alias:deviceName:hardwareVersion:deviceCapabilities:serviceType:
addUserNotification:listener:
addUserNotification:listener:completionHandler:
additionalDictionary
additionalInfo
additionalInternalHeaders
additionalMessageHeaders
additionalMessageHeadersForOutgoingPush
addressPair
adminAccessTokens:error:
adminServiceIdentityWithType:
admissionPolicyChangedForTopic:allowed:
aggregatableMessages
aggregateMessages
alertType
aliasStrings
all:
allAdHocServices
allExpiredOutgoingMessages:
allFamilyServices
allInterestedQueryServices
allKeysForObject:
allObjects
allOutgoingMessagesByGUID:
allOutgoingMessagesOnAccountGUID:localDestinationDeviceID:
allOutgoingMessagesPendingDeleteWithLimit:
allPairedDevices
allPairedDevicesWithType:
allPairedUniqueIDs
allParticipantsInfoForGroup:
allPrimaryServices
allServices
allServicesStrings
allServicesWithAdHocServiceType:
allTinkerServices
allUnsentOutgoingMessagesForAccounts:localDestinationDeviceID:hardLimit:
allUnsentOutgoingMessagesForAccounts:localDestinationDeviceID:priority:hardLimit:
allUnsentOutgoingMessagesForAccounts:localDestinationDeviceID:priority:hardLimit:wantsPayload:messageType:success:
allUnsentOutgoingMessagesForAccounts:priority:localDestinationDeviceID:hardLimit:
allValues
allocWithZone:
allocateProtocolVersion
allocateType
allocationDone:sessionInfo:
allowBackup
allowCloudDelivery
allowCrossAccountMessages
allowDualDelivery
allowLocalDelivery
allowMessageData:
allowMessageData:withDelayedCommitBlock:
allowPairingIdentities
allowPartialSendsToSucceed
allowPendingMessagesForInactiveDevice
allowProxyQueries
allowRegenerateRegisteredIdentity
allowSendingMessagesToInactiveDevice
allowWakingMessages
allowWiProxDelivery
allowedCapabilities
allowedTrafficClasses
allowsDuplicates
allowsServerProvidedLenientAnisetteTimeout
alternateCallbackID
alternateDelegate
alternateGUID
alwaysSkipSelf
anisetteHeadersTimeout
anonymizedSenderID
anyObject
appBoolForKey:
appContext
appID
appendBytes:length:
appendData:
appendFormat:
appendItem:
appendMessage:receiverError:
appendMiddleware:
appendString:
appleCare
appleCareSignInUserName:DSID:authToken:requestID:
appleCareSignInUserName:DSID:authToken:requestID:messageContext:
appleCareSignOutUserWithRequestID:
appleCareSignOutUserWithRequestID:messageContext:
appleIDAccountOnService:
appleIDNotificationCenter
appleIDPrimaryDependentRegistrations
applecareResponseForRequestID:withError:
applicationKeyIndex
applicationPublicIdentityAtIndex:
applicationPublicIdentityType
applicationPublicIdentitys
applicationVersion
apsEnvironmentName
archivedDataWithRootObject:requiringSecureCoding:error:
areAllSelectedAliasesRegisteredOnAccount:
areDataProtectionKeysAvailableForService:withDataProtectionClass:fromDevice:
array
arrayByAddingObject:
arrayByAddingObjectsFromArray:
arrayByApplyingSelector:
arrayWithCapacity:
arrayWithObject:
arrayWithObjects:
arrayWithObjects:count:
assertRunningOnMain
assertRunningWithPriority:
assertTransportThreadRealTimeMode:completionHandler:
associateServiceName:withStreamID:remoteInstanceID:remoteInstanceIDChanged:
asyncQueueForPriority:
attemptCount
attemptPresentationOfExpirationAlertForUser:
attemptPresentationOfNearExpirationAlertForUser:
attempts
attributes
attributesOfItemAtPath:error:
authKitAccountUpdate:
authKitAccountWithAppleID:
authKitAccountWithDSID:
authToken
authTokenChanged:forAccount:
authTokenChanged:forAccount:messageContext:
authenticateAccount
authenticateAccount:
authenticateAccount:messageContext:
authenticatePhoneUser
authenticatePhoneUserWithRequest:
authenticatePhoneWithRequestUUID:
authenticatePhoneWithRequestUUID:messageContext:
authenticateRegistration:
authenticateRegistration:forceNewToken:
authenticateRegistration:forceNewToken:requireSilentAuth:
authenticateRegistration:forceRenewal:requireSilentAuth:
authenticateRegistration:requireSilentAuth:
authenticationCert
authenticationCertForID:
authenticationCertificate
authenticationCertificateForUser:
authenticationChanged
authenticationChangedForAccount:
authenticationDataAuthToken
authenticationDataSig
authenticationDataUserID
authenticationInfo
authenticationResponses
authenticationToken
autoBugCaptureWithCompletion:
automaticResetBlock
automaticResetInterval
autorelease
availability
availabilityTimerCancel
avcReceiveMKMTime:forMKI:isGeneratedLocally:
avoidMainQueue
avoidMainQueueOverrideToNO
awdLogger
awdMetricsForConnectionUUID:
awdTopic
baaOnlyValidationSessionOnQueue:withCompletion:
backingCache
backingOTRSessionRef
backingQueue
backingStore
bagKey
bagReloaded:
bagURL
batchSign:forType:error:
batchSignDatas:withType:error:
batchSignDatas:withType:onQueue:error:
batchSignDatas:withType:onQueue:withCompletion:
bestCallID
block
blockedEntriesForCategory:
bluetoothLinkPreferences
bluetoothMACAddress
bonjourDeliveryController
boolForKey:
boolValue
broadcastAttemptQueueFromPriority:
broadcastBlock
broadcastGroupSessionParticipantDataUpdate:onTopic:toIdentifier:fromID:
broadcastGroupSessionParticipantUpdate:onTopic:toIdentifier:fromID:context:
broadcastID
broadcastNeedsClientAck
broadcastPerformed
broadcastProxyForTargets:messageContext:protocol:
broadcaster
broadcasterForEntitlement:messageContext:
broadcasterForLocalObject:messageContext:
broadcasterForTarget:messageContext:
broadcasterForTopic:entitlement:command:messageContext:
broadcasterForTopic:entitlement:messageContext:
broadcasterForTopic:ignoreServiceListener:messageContext:
broadcasterForTopic:messageContext:
broadcasterWithMessageContext:
btUUID
buildOfIdentityGeneration
buildOfUnregisteredIdentityGeneration
buildRTCSummaryReport
buildValidationCredentialsIfNeeded
buildValidationCredentialsIfNeededForSubsystem:
buildVersion
builderWithPublicKeyStorage:peerIDManager:accountController:registrationKeyManager:rateLimiter:OTRController:serviceController:avoidMainQueue:forceLegacy:
bulkedPayload
bumpEvictionDateToSecondsFromNow:
bundleID
bypassDuet
bypassHomeNumberCarrierCheck
bypassLimit
bypassRegistrationControlStatusCheck
bypassStorage
byteOffset
bytes
bytesReceived
bytesSent
cache
cacheIdentity:forDeviceID:andPushToken:
cacheIncomingGroup:completion:
cacheObject:forKey:
cachedDataForClient
cachedDisabledByService
cachedIDStatusForID:fromURI:fromService:
cachedIDStatusForID:fromURI:fromService:respectExpiry:
cachedIdentityForDeviceID:
cachedManateeAvailability
cachedMap
cachedMasterKeyMaterialCollection
cachedRecordZone
cachedStableKeyMaterialCollection
cachedTokensBySessionID
callAllAckBlocks
callAllIndividualCompletionBlocksWithDeliveryContext:
callID
callStackSymbols
callbackQueue
callingSupported
canCombineWithMessage:
canCompleteRegistration
canForceFamilyFetch
canGossipOnService:
canRegister
canSendRegistration
canStartRegistrationForAccountType:
canUseLargePayload
cancel
cancelActionsForRegistrationInfo:
cancelAllocationTimeoutTimer
cancelBlockOnLinkConnectWithID:cancelSucceeded:
cancelBlocksOnLinkConnect
cancelConnection
cancelInvitation
cancelInvitation:
cancelInvitation:messageContext:
cancelInvitation:withData:
cancelInvitation:withData:messageContext:
cancelInvitation:withRemoteEndedReasonOverride:
cancelInvitation:withRemoteEndedReasonOverride:messageContext:
cancelInvitationWithData:
cancelInvitationWithRemoteEndedReasonOverride:
cancelItemWithIdentifier:service:
cancelItemWithIdentifier:service:messageContext:
cancelMessage:
cancelMessageID:
cancelMessageWithSequenceNumber:streamID:messageUUID:cancelReason:
cancelOpportunisticDataOnService:withIdentifier:
cancelPendingExecutions
cancelPeripheralConnection:
cancelPreviousPerformRequestsWithTarget:selector:object:
cancelReason
cancelRegisterActionsForRegistrationInfo:
cancelled
capabilities
capability
carrierBundleInformationDidChange
carrierBundleValueFromAllSIMsForKey:ofType:withFallback:
carrierNonce
caseInsensitiveCompare:
category
cbuuid
cbuuidString
cbuuidUUID
cbuuidsOfPairedDevices
cbuuidsOfPairingDevices
cellularRadioAccessTechnologyDidChange:
cellularSoMaskDidChange:
center:allSucceededRegistrations:
center:failedAuthentication:error:info:
center:failedCurrentEmailsRequest:error:info:
center:failedIDSAuthentication:error:info:
center:failedIdentification:error:
center:failedRegionValidation:error:info:
center:failedRegistration:error:info:
center:startedAuthenticating:
center:succeededCurrentEmailsRequest:emailInfo:
center:succeededIDSAuthentication:
center:succeededIdentification:phoneNumber:token:
center:succeededInitialRegionQuery:
center:succeededLinkHandlesConfirmation:emailAddress:
center:succeededRegionValidation:regionID:phoneNumber:extraContext:verified:
center:succeededRegistration:
centerNeedsNewIdentification:
centerUpdatedRegistrationIdentities:
centralManager:connectionEventDidOccur:forPeripheral:
centralManager:didConnectPeripheral:
centralManager:didDisconnectPeripheral:error:
centralManager:didDiscoverPeripheral:advertisementData:RSSI:
centralManager:didFailToConnectPeripheral:error:
centralManager:didUpdateANCSAuthorizationForPeripheral:
centralManager:willRestoreState:
centralManagerDidUpdateState:
centralRegListener
cert
certificateSigningRequest
certifiedDeliveryRTS
certifiedDeliveryVersion
changeCreatedAt:
charValue
characterAtIndex:
characterSetWithCharactersInString:
checkAndCallSessionStart
checkAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:
checkConnectivityState:
checkContactsForDestination:
checkHeartbeat
checkIfListeningForActivity:completion:
checkLocalConnectivityForSession:withCompletionBlock:
checkNetworkAvailabilityForSession:completionBlock:
checkOptInEligibilityForApplication:andFetchSelfVerificationRequestIDWithCompletion:
checkRestorationState
checkServerStorageForService:withCompletion:
checkServiceCompability:localMessage:
checkSuspendTrafficForDevice:wait:
checkTransportLogWithReason:
checkpointAndVacuumDB
checkpointAndVacuumDBWithDataProtectionClass:
checksumFailed
chunkNumber
ckContainer
class
classStorageBecameAvailable:
classesForStrictUnarchiving
cleanUpAccountsBasedOnInUseUsernamesBlock:profileIDBlock:completionBlock:
cleanUpAccountsWithUsername:orProfileID:basedOnInUseUsernames:profileIDs:completionBlock:
cleanUpCachedMappings:
cleanUpMasterKeyMaterialUsingPredicate:
cleanupAbsintheTask
cleanupAccount
cleanupExpiredEntriesIfNeeded
cleanupSession:messageContext:
cleanupSession:shouldCleanSessionStatus:
cleanupSessionWithChannelDestination:clientChannelUUID:
cleanupSessionWithCleanStatus:
cleanupSessionWithInstanceID:
cleanupSessionWithInstanceID:messageContext:
cleanupSessionsForClient:
cleanupSocketsForClient:
cleanupValidationInfoForSubsystemMechanism:
cleanupWithError:
clearAdmissionCheckCache
clearAllPendingResponseTokens
clearAllPreflightStacks
clearAllTimers
clearCache
clearCacheAndPersistImmediately:
clearCacheWithCompletion:
clearConsentDenialsForPhoneUser:
clearConsentDenialsForRegistration:
clearDisplayName
clearIDSState
clearIDSStateWithMessageContext:
clearItem:
clearKTDatas
clearKeychainWithError:
clearLocalCID:
clearNonExpirationFollowUps
clearPNRReasonForUserUniqueIdentifier:
clearQueueForSubsystem:
clearServiceSignatures
clearState:
clearStatementCache
clearStats
clearTrustedServices
clearUris
clientAtIndex:isEntitledToAccessService:forEntitlement:shouldWarn:
clientChannelConnected
clientChannelUUID
clientConnection
clientContextData
clientDataUpdateBlocks
clientDatasByServiceType
clientDatasForRegistrations:keyStore:keyTransparencyVerifier:
clientID
clientInfo
clientInstanceCreatedWithMessageContext:
clientInstancesRemoved
clientProcessName
clientProcessReceivedMessage:messageSize:deltaTime:priority:
clientReady
clientRemoteObjectByActivity
clientRemoteObjectsByTopic
clientType
clientUUID
closeDataConnectionWithDeviceConnectionInfo:options:
closeDatabase
closeSocketWithOptions:
closeSocketWithOptions:messageContext:
closeSocketWithOptions:queue:completionHandler:
closed
cloudCircleStatusError:
cloudKitAccountStatusChanged:
cloudKitElectionStore
cloudPairedIDForDeviceID:
cloudRelayRegisteredAccountWithError:
cloudServiceConnector
clusterWithDataRepresentation:error:
clusterWithFullAccountIdentity:fullAdminServiceIdentities:fullSigningServiceIdentities:error:
coalesceDelayOverride
coalesceQueueExistsForTopic:
code
collaboratorProvider
collectForTimeBase:anonymize:
combineWithMessage:
combinedMessages
commCenterDead
commandContext
commandToHandlerBlock
commitBlock
commitStateForKey:
companionLinkClient
compare:
compareAgainstData:
completedMigration
completionBlocks
completionBlocksToURIsMap
components:fromDate:
componentsJoinedByString:
componentsSeparatedByString:
compressed
compressionState
conference:cancelRelayRequest:requestDict:
conference:closeConnectionForCallID:
conference:didChangeLocalVariablesForCallID:
conference:didReceiveARPLData:withCallID:
conference:didReceiveData:forCallID:
conference:didStartSession:withCallID:error:
conference:didStartSession:withUserInfo:
conference:didStopWithCallID:error:
conference:didStopWithCallID:error:callMetadata:
conference:inititiateRelayRequest:requestDict:
conference:isRemoteAudioBelowThreshold:
conference:localAudioEnabled:forCallID:error:
conference:localIPChange:withCallID:
conference:receivedFirstRemoteFrameForCallID:
conference:receivedNoRemotePacketsForTime:callID:
conference:reinitializeCallForCallID:
conference:remoteAudioEnabled:forCallID:
conference:remoteAudioPaused:callID:
conference:remoteCallingModeChanged:forCallID:
conference:remoteScreenAttributesChanged:callID:
conference:remoteVideoAttributesChanged:callID:
conference:remoteVideoPaused:callID:
conference:sendRelayUpdate:updateDict:
conference:updateInputFrequencyLevel:
conference:updateInputMeterLevel:
conference:updateOutputFrequencyLevel:
conference:updateOutputMeterLevel:
conference:videoQualityNotificationForCallID:isDegraded:isRemote:
conference:withCallID:didPauseAudio:error:
conference:withCallID:didPauseVideo:error:
conference:withCallID:isSendingAudio:error:
conference:withCallID:networkHint:
conference:withCallID:remoteMediaStalled:
config
configuration
configurationForOptions:
configureAsMacNotificationCenterObserver:withPushToWakeTopics:
conformsToProtocol:
connectError
connectGlobalLinkForDevice:sessionInfo:connectReadyHandler:withLocalInterfacePreference:
connectOnMainQueueToPeer:
connectPairedDevice:
connectPairedDeviceWithID:completion:
connectPeripheral:options:
connectQRServer:withPreferredLocalInterface:
connectReadyHandler
connectToPeer:
connectWithProtocoHandler
connectWithSessionInfo:interfaceAddress:joinSession:completionHandler:withLocalInterfacePreference:
connectWithTransportThread
connected
connecting
connection
connection:dataReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:isCompressed:didWakeHint:
connection:didReceiveData:
connection:didReceiveData:withIdentifier:
connection:didReceiveDataMessage:
connection:didStart:error:
connection:messageReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:isCompressed:didWakeHint:
connection:protobufReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:isCompressed:didWakeHint:
connection:receivedAppLevelAckWithTopic:fromID:messageID:peerResponseIdentifier:
connection:receivedData:
connectionBecameEmpty
connectionBecameEmpty:
connectionComplete:withResponse:
connectionContext
connectionCountHint
connectionDidClose
connectionDidClose:
connectionDidReachInFlightMessageLowWaterMark:
connectionDidReceiveBytes:
connectionDidStop:error:
connectionHasSpaceForMessages:dataProtectionClass:
connectionID
connectionInfoForCallID:
connectionInfoWithState:
connectionInitTime
connectionIsEmpty:
connectionIsEmptyOfCloudMessages:
connectionSetupStartTime
connectionTimeout
connectionTimerCleared
connectionType
connectionsTableByLocalRemotePortKey
connectivityMonitor
consentTokens:error:
constructRAResponseDictionary:
constructRAResponseDictionaryForServices:completionHandler:
contactStore
contactType
contactUtilities
contactsAssociationID
contactsLastUpdatedDate
contactsSharingState
container
containerStorageItemNameForContainerIdentityIdentifier:
containerStorageItemNameForContainerIdentityIdentifier:applicationKeyIndex:
containerStorageItemNameForIsRegisteredAtApplicationKeyIndex:
containerStorageItemNameForKTDataAtKeyIndex:isRegistered:
containerWithIdentifier:
containsMechanisms
containsMessageHash:
containsObjectIdenticalTo:
contextInfo
continueWithResult:
continuityClientInstanceCreatedWithMessageContext:
continuityConnectCount
continuityConnectToPeer:
continuityConnectToPeer:messageContext:
continuityDidConnectToPeer:withError:
continuityDidDisconnectFromPeer:withError:
continuityDidDiscoverPeerWithData:fromPeer:
continuityDidDiscoverType:withData:fromPeer:
continuityDidFailToStartAdvertisingOfType:withError:
continuityDidFailToStartScanningForType:withError:
continuityDidLosePeer:
continuityDidLosePeer:forType:
continuityDidStartAdvertisingOfType:
continuityDidStartScanningForType:
continuityDidStartTrackingPeer:error:
continuityDidStartTrackingPeer:forType:error:
continuityDidStopAdvertisingOfType:
continuityDidStopAdvertisingOfType:withError:
continuityDidStopScanningForType:
continuityDidStopTrackingPeer:
continuityDidStopTrackingPeer:forType:
continuityDidUpdateStateToState:
continuityDisconnectFromPeer:
continuityDisconnectFromPeer:messageContext:
continuityStartAdvertisingOfType:withData:withOptions:
continuityStartAdvertisingOfType:withData:withOptions:messageContext:
continuityStartScanningForType:withData:mask:
continuityStartScanningForType:withData:mask:boostedScan:duplicates:
continuityStartScanningForType:withData:mask:boostedScan:duplicates:messageContext:
continuityStartScanningForType:withData:mask:messageContext:
continuityStartScanningForType:withData:mask:peers:
continuityStartScanningForType:withData:mask:peers:boostedScan:duplicates:
continuityStartScanningForType:withData:mask:peers:boostedScan:duplicates:messageContext:
continuityStartScanningForType:withData:mask:peers:messageContext:
continuityStartTrackingPeer:forType:
continuityStartTrackingPeer:forType:messageContext:
continuityStopAdvertisingOfType:
continuityStopAdvertisingOfType:messageContext:
continuityStopScanningForType:
continuityStopScanningForType:messageContext:
continuityStopTrackingPeer:forType:
continuityStopTrackingPeer:forType:messageContext:
controlChannel
controlChannelCachedSYN
controlChannelVersion
conversationGroup
conversationGroupWithConversationKey:fromPublicData:publicKey:signature:groupID:parent:parentPublicKey:forwardingTicket:sponsor:error:
conversationGroupWithParent:members:sponsorAlias:sponsor:applicationData:error:
conversationGroupWithUpdatedGroupID:error:
conversationID
conversationSponsorPairFromPublicData:publicKey:signature:groupID:parent:parentPublicKey:forwardingTicket:fullDeviceIdentity:error:
copy
copyCacheDictionaryRepresentation
copyCacheWithBlock:
copyCurrentNetworkInterfaces
copyDictionaryRepresentation
copyDirectMessagingInfo
copyEndpoint
copyHandlersForEnumerating
copyIdentity
copyIdentityFromKeychainWithApplicationKeyIndex:error:
copyItemAtPath:toPath:error:
copyKTRegistrationDataToRegisterForKeyIndex:isRegistered:withError:
copyKTRegistrationDataToRegisterForKeyIndex:withError:
copyKeyListForAppID:
copyLinkStatsDict
copyMultipleForCurrentKeys:appID:
copyOTRTestBlock:
copyOpportunisticCacheWithBlock:
copyPublicIdentityDataToRegisterForKeyIndex:withError:
copyPushIdentity
copyRegistrationKeyPairForIdentifier:publicKey:privateKey:keyPairSignature:isMigratedSignature:isUpgradePending:
copySendParameters
copySessionObjectForToken:
copySharedDeviceManager
copyValueForKey:appID:
copyWithZone:
count
countByEnumeratingWithState:objects:count:
countForDataMessageType:
countForDataProtectionClass:
countryCode
createAPNSMessageDelivery
createAliasForParticipantID:salt:
createAliasForParticipantID:salt:relayGroupID:relaySessionID:
createAliasForParticipantID:salt:sessionID:
createAliasForParticipantID:salt:sessionID:messageContext:
createAliasForParticipantID:salt:sessionID:relayGroupID:relaySessionID:
createConnectionData:dataReadyHandler:
createConnectionData:handler:
createConnectionDataForDevice:localPartyID:dataReadyHandler:
createConnectionWithIdentifier:priority:shouldUseIPsecLink:dataProtectionClass:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
createFanoutFromMessage:forService:fromIdentity:withMaxSize:chunkNumber:firstMessage:
createGroupWithParticipants:sharedApplicationData:completion:
createHTTPMessageDelivery
createIdentityForApplicationKeyIndex:error:
createKeyMaterialForGroup:sessionID:
createMessageFragmentsFromOriginalMessage:withFragmentedMessageID:fragmentSize:
createOriginalMessageFromFragmentedMessages:
createRealTimeEncryptionFullIdentityForDevice:completionBlock:
createRegistrationStatusProvider
createServiceConnectionWithServiceName:invalidationHandler:terminationHandler:peerEventHandler:peerQueue:
createStableKeyMaterialAndSendToFrameworkForGroup:sessionID:
createStableKeyMaterialForGroup:sessionID:
createdAt
creationDate
creationTime
credential
credentialForUser:
ctAdapter
cumulativeIncomingStatistics
cumulativeOutgoingStatistics
currentAliasState:
currentAverageRTT
currentCache
currentCacheForService:
currentCellularSignalStrength:signalRaw:signalStrength:signalGrade:
currentCellularSignalStrength:signalStrength:signalGrade:
currentDate
currentDefaultDeviceLinkType
currentDevice
currentDeviceRecordsPromise
currentDonatedEntries:
currentECVersionWithBlock:
currentFetchCount
currentHandler
currentInFlightSyncAttempts
currentItem
currentLinkType:
currentLinkType:andRATType:forDeviceID:
currentLocalKeyTransparencyEligibleServiceIdentifiers
currentLocalKeyTransparencyEnrolledURIsForServiceIdentifier:
currentLocalMasterKeyMaterial
currentLocalStableKeyMaterial
currentMessage
currentOutgoingFragmentedMessageID
currentPeerVerificationResultsForQueriedIndex:ticket:
currentPeerVerificationResultsForURIVerificationMap:forService:withCompletion:
currentPreflightStack
currentPromise
currentResult
currentRunLoop
currentSIMsWithError:
currentServerTimeInterval
currentSize
currentSubscriptionsForActivity:
currentSubscriptionsForActivity:completion:
currentTime
currentVerificationResultsForRegisteredIndex:ticket:
cypher
daemon
daemonCapabilities
daemonClients
daemonDeathResend
daemonDisconnected
daemonInterface:shouldGrantAccessForPID:auditToken:portName:listenerConnection:setupInfo:setupResponse:
daemonMIGInterface
daemonMIGQueryInterface
daemonXPCInterface
daemon_oversized
data
dataForIdentifier:
dataForIdentifier:error:
dataForKey:
dataForKey:error:
dataForService:identifier:
dataIndicationToBuffer:outputLength:data:dataLen:keyData:remainingLength:
dataLength
dataLengthFromHeaderData:
dataProtectionClass
dataProtectionClassWithError:
dataProviderByRealm
dataReceived:withGUID:forTopic:toIdentifier:fromID:context:
dataRepresentation
dataRepresentationForNGMVersion:
dataRepresentationWithError:
dataSource
dataToEncrypt
dataUsageBundleID
dataUsageBundleIdentifier
dataUsingEncoding:
dataWithBytes:length:
dataWithBytesNoCopy:length:freeWhenDone:
dataWithContentsOfURL:options:error:
dataWithData:
dataWithPropertyList:format:options:error:
database
databaseCloseTimer
databaseLastUpdateTime
databaseSizeBiggerThanThreshold:
databaseSizeInMB
date
dateByAddingTimeInterval:
dateLastRegistered
dateScreenLightLastChanged
dateWithTimeIntervalSince1970:
dateWithTimeIntervalSinceNow:
dateWithTimeIntervalSinceReferenceDate:
deactivateAndPurgeIdentify
deactivateAndPurgeIdentifyForAccount:
deactivateAndPurgeIdentifyForAccount:messageContext:
deactivatePairedDevices
deactivateRegistration
debugDescription
declineInvitation
declineInvitation:
declineInvitation:messageContext:
declineInvitation:withData:
declineInvitation:withData:messageContext:
declineInvitationWithData:
declineInvitationWithData:forceFromID:additionalMessageAttributes:
decodableClasses
decodeBoolForKey:
decodeDoubleForKey:
decodeIntegerForKey:
decodeObjectForKey:
decodeObjectOfClass:forKey:
decodeObjectOfClasses:forKey:
decryptData:keyID:sequenceNumber:error:
decryptData:onQueue:error:
decryptData:usingIdentifier:isRetry:onQueue:error:
decryptData:usingIdentifier:onQueue:isRetry:replayKey:withCompletion:
decryptData:withPublicDeviceIdentityContainer:error:usingIdentifier:isRetry:
decryptData:withPublicDeviceIdentityContainer:usingIdentifier:isRetry:
decryptDataWithAESKey:data:
decryptLocalDeliveryPayload:forService:withDataProtectionClass:fromDevice:encryptionType:priority:error:
decryptMessageData:myURI:fromURI:token:groupID:encryptionType:isLiveRetry:replayKey:completionBlock:
decryptedBlobOverQUIC:
decryptedData
decryptedDataForKey:
defaultBroadcaster
defaultCenter
defaultCloudPriorityMessageStatistics
defaultDelayForSendMode:
defaultLogger
defaultManager
defaultPairedDependentRegistration
defaultPairedDependentRegistrationIncludingTinker:
defaultPairedDependentRegistrations
defaultPairedDeviceDestination
defaultPairedDeviceEndpoint
defaultPeerClassCConnectivityDidChange:
defaultPeerCloudConnectivityChanged:
defaultPeerDropDisallowedMessages
defaultPeerIsCloudConnected
defaultPeerIsConnected
defaultPeerIsNearby
defaultPeerLinkTypeChanged:
defaultPeerMagnetIndicationOfAwakeStateChanged:
defaultPeerNearbyChanged:
defaultPeerSetLinkPreferences:
defaultPeerSetPreferInfraWiFi:services:
defaultPeerSetWantsQuickRelayRequest:
defaultPeerSupportsDirectMessaging:isObliterating:
defaultPeerUnpairStart
defaultPersisterForIdentifier:dataProtectionClass:
defaultPriorityMessageStatistics
defaultQueue
delay
delayedSave
delayedSaveSettings
delegate
deleteAllCachedValuesForGroupWithID:WithCompletion:
deleteAllKnownGroupsWithCompletion:
deleteAllMessagesWithAccountGUID:
deleteCache
deleteDatabase
deleteEntriesBeforeDate:afterDate:error:
deleteExpiredIncomingMessagesOlderThan:withLimit:
deleteIncomingMessageWithGUID:
deleteKeyTransparencyDeviceRecordsForPushToken:completion:
deleteOutgoingMessageWithGUID:alternateGUID:
deleteOutgoingMessageWithGUID:alternateGUID:classDDatabase:
deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:
deletePairedDevice:
deletePairedDeviceWithID:completion:
deletePostponedMessages
deletePostponedMessages:classDDatabase:
delivery
deliveryAcknowledgementBlock
deliveryController
deliveryController:dataReceived:topic:command:deviceID:btUUID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:didWakeHint:
deliveryController:device:supportsDirectMessaging:isObliterating:
deliveryController:didReceiveMessage:topic:command:deviceID:messageID:
deliveryController:foundNearbyIPsecCapableDeviceWithUniqueID:
deliveryController:messageReceived:topic:command:deviceID:btUUID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:didWakeHint:
deliveryController:protobufReceived:topic:command:deviceID:btUUID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:didWakeHint:
deliveryController:receivedAppLevelAckWithTopic:deviceID:btUUID:messageID:peerResponseIdentifier:priority:connectionType:
deliveryController:uniqueID:isCloudConnected:
deliveryController:uniqueID:isConnected:
deliveryController:uniqueID:isNearby:
deliveryControllerHasSpaceforNonUrgentMessages:priority:dataProtectionClass:
deliveryControllerHasSpaceforNonUrgentMessages:priority:dataProtectionClass:ofTypes:
deliveryControllerHasSpaceforUrgentMessages:dataProtectionClass:ofTypes:
deliveryControllerQueuedIncomingMessageDictionary:
deliveryError
deliveryMinimumTime
deliveryStats:
deliveryStatusContext
deliveryTime
delivery_oversized
deniedToSend
denyIncomingGrantRequests
dependencyProvider
dependentRegistration:findDeviceUniqueID:btID:forURI:token:supportsLiveDelivery:
dependentRegistration:hasDependentRegistrationWithURI:token:
dependentRegistrationAuthRetries
dependentRegistrationMatchingUUID:
dependentRegistrationMatchingUUID:includingTinker:
dependentRegistrationResponseCode
dependentRegistrations
dependentRegistrationsIncludingCurrentDevice
dependentRegistrationsIncludingTinker:
dependentRegistrationsTTL
dequeueBroadcastWithID:forMessageUUID:service:priority:
description
descriptionForArray:options:
descriptionForData:options:
descriptionForDataProtectionClass:
descriptionForDictionary:options:
descriptionForObject:options:
descriptorForRequiredKeysForStyle:
destination
destinationCorrelationIdentifier
destinationIsDefaultPairedDevice:
destinationIsGuestDevice:
destinationPersister
destinationWithDestinations:
destinationWithStrings:
destinations
destinationsContainFromID:
destinationsExcludingSelfForDestinations:
destinationsLightweightStatus
destinationsMustBeInContacts
detectorWithName:
device:nsuuidChanged:
deviceCapabilities
deviceCertificateForService:uri:
deviceCertificationRepair
deviceChangedForDeviceID:isNearby:isConnected:isCloudConnected:completionHandler:
deviceColor
deviceConnectionInfo
deviceData
deviceHeartbeatCenter
deviceID
deviceIDForPushToken:
deviceIdToHealableErrors
deviceIdentifier
deviceIdentifierDidChange:
deviceIdentityFromDataRepresentation:publicAdminServiceIdentity:error:
deviceIdentityWithFullAdminServiceIdentity:error:
deviceInformationString
deviceIsAsleepDidChange:isAsleep:
deviceIsClassCConnectedDidChange:isClassCConnected:
deviceIsCloudConnectedDidChange:isCloudConnected:
deviceIsConnectedDidChange:isConnected:
deviceIsEnabledDidChange:isEnabled:
deviceIsNearbyDidChange:isNearby:
deviceIsRegisteredDidChange:isRegistered:
deviceKey
deviceLinkTypeDidChange:linkType:
deviceMetadata
deviceModel
deviceMonitor
deviceName
deviceNameForDeviceID:
devicePairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:
deviceRegionInfo
deviceScore
deviceScoreNonce
deviceScoreWithCompletion:
deviceSetupCompleted
deviceSetupStarted
deviceSignatureByService
deviceState
deviceSupport
deviceTime
deviceToDeviceEncryptionAvailability
deviceType
deviceUniqueID
devicesHashForURI:andService:
dhKey
diceRoll
dictionary
dictionaryForKey:
dictionaryMetric
dictionaryRepresentation
dictionaryRepresentationWithUncompressedData
dictionaryWithCapacity:
dictionaryWithDictionary:
dictionaryWithKeyArray:defaultValue:
dictionaryWithObject:forKey:
dictionaryWithObjects:forKeys:count:
dictionaryWithObjectsAndKeys:
didAddPairedDevice:
didAuthenticatePhoneWithAuthenticationCertificateData:requestUUID:error:
didCacheGroup:
didCacheGroup:completion:
didConnectControlChannelForDeviceConnectionInfo:connection:error:
didCreateGroup:completion:
didCreateMKM:
didDataRepresentationFormatChangeFromDataRepresentation:error:
didFallback
didFetchPhoneUserSubscriptionSource:requestUUID:error:
didFirstLoadPersistentMap:
didFlushCacheForService:remoteURI:fromURI:guid:
didGeneratePhoneAuthenticationSignature:nonce:certificates:labelIDs:inputData:requestUUID:error:
didInvalidate
didReceiveBlockedIndicationForLink:reason:
didReceiveCurrentCellularSignalRaw:signalStrength:signalGrade:
didReceiveDataMessage:
didReceiveDecryptionFailureForGroup:
didReceiveDecryptionFailureForGroup:completion:
didReceiveEndpointsUpdate:forGroup:sessionID:
didReceiveReestablishmentRequest
didReceiveRegistrationIdentityUpdate
didReceiveRegistrationIdentityUpdateWithCompletion:
didReceiveSIMSetupCompleteNotification
didRegisterWithKTAccountKey
didRemovePairedDevice:
didRequestCarrierTokenString:requestUUID:error:
didSendJoin
didSendKeyMaterial:duration:
didSendOpportunisticDataWithIdentifier:onAccount:toIDs:
didSessionReinitiated
didSetPhoneUserSubscriptionSource:requestUUID:error:
didSwitchActivePairedDevice:
didSwitchActivePairedDevice:forService:wasHandled:
didUpdateGroup:withNewGroup:
didUpdateGroup:withNewGroup:completion:
didUpdateMembers:forGroup:sessionID:lightweightStatusDict:hasChangedStandardMembers:newlyAddedMembers:
didUpdatePairedDevice:
didUpdateParticipants:ofType:forGroup:sessionID:
didUpdateProtocolForPairedDevice:
didWakeHint
differsFromPhoneNumber:
directory
disableAccount:messageContext:
disableAccountWithUniqueID:
disableAliasValidation
disableCloudConnectionForReason:
disableConnectionForReason:shouldWait:
disableDevice:
disableEncryption
disableOnLowRAMDevice
disablePrimaryAccountWithUniqueID:
disableRegistration
disableRemoteDeviceEncryption
disableTemporaryPhoneAlias:withCompletion:
disabledOnTinkerWatch
disallowCellularInterface
disallowFirewallAutoEnroll
disallowQueryRefresh
disallowWifiInterface
disasterModeTokens
disconnectActivePairedDevice
disconnectActivePairedDevice:
disconnectFromPeer:
disconnectGlobalLinkForDevice:completionHandler:
disconnectOnMainQueueFromPeer:
disconnectWithCompletionHandler:
displayIDs
displayName
displayingAddNumberPrompt
ditchMemoryPolicy
diversifier
diversifyPrivateKey:withDocumentIdentifier:trackingPreventionSalt:error:
domain
domainHash
dontFilterSelfMessagesForUnknownDevice
doubleForKey:
doubleValue
dropAllMessagesWithoutAnyAllowedClassifier
dropDisallowedMessages
dropIPPackets:linkID:payloadArray:
dropIPPackets:payloadArray:
dropMessageIfDropPointIsDetectedWithSendParameters:
dropMessageIndicatorCommand
dropQueuedBroadcastsForServices:
dsAuthID
dsHandle
dsID
dsid
dualInterfaceidQueryMessageDelivery
dualSIMCapabilityEnabled
duetIdentifiersOverride
duetIdentifiersOverrideForAccountWithGUID:priority:
duetInterface
duetInterface:resourceAvailabilityChangedForIdentifiers:
dumpServiceMap
duration
earlierDate:
effectiveIdentifier
effectiveMaxPayloadSizeIfCanUseLargePayload:
eligibleServiceIdentifiers
email
emailAddresses
emailsToRegister
enableAccount:
enableAccount:messageContext:
enableAccountWithUniqueID:
enableCloudConnection
enableCloudConnectionForDefaultPairedDevice:
enableConnection
enableConnectionForDefaultPairedDevice:
enableDevice:
enableHomeNumber
enableOTR
enablePrimaryAccountWithUniqueID:
enablePushHandler:
enableQuickRelay
enableSKE
enableSingleChannelDirectMode
enableTemporaryPhoneAlias:withCompletion:
enableUPlusOneSessionForTransition:
enabledAccountsOnService:
enabledOnlyOnStandaloneDevices
enabledOnlyWhenPaired
enclosureColor
encodeBool:forKey:
encodeDouble:forKey:
encodeInteger:forKey:
encodeObject:forKey:
encodeWithCoder:
encodedData
encryptControlChannelForStoredIdentities
encryptData:onQueue:error:
encryptData:sequenceNumber:error:
encryptData:withEncryptedAttributes:onQueue:withCompletion:
encryptData:withEncryptedAttributes:usedIdentifier:error:
encryptData:withEncryptedAttributes:usedIdentifier:onQueue:error:
encryptData:withEncryptedAttributes:withPublicDeviceIdentityContainer:usedIdentifier:error:
encryptData:withEncryptedAttributes:withPublicDeviceIdentityContainer:usingIdentifier:error:
encryptDataWithAESKey:data:
encryptLocalDeliveryPayload:toDevice:forService:withDataProtectionClass:encryptionType:priority:error:
encryptPayload
encrypted
encryptedAttributes
encryptedData
encryptedDataBlob
encryptedMirageHandshakeBlob
encrypterWithDeviceID:
encrypterWithEndpoint:
encrypterWithLocalURI:remoteURI:pushToken:service:cert:
encrypterWithOTRToken:
encryption
encryptionAttributes
encryptionClassAKey
encryptionClassCKey
encryptionClassDKey
encryptionController
encryptionEnabled
encryptionInitialized
encryptionSequenceNumberForGroupID:
encryptionStateStruct
encryptionType
endAllSessionsForService:withReason:
endCollector
endFairplayAuthenticationForDeviceWithCbuuid:
endSession
endSession:
endSession:messageContext:
endSession:withData:
endSession:withData:messageContext:
endSessionTimeout
endSessionTimerCleared
endSessionWithData:
endSessionWithReason:
endpoint
endpointCount
endpointForPushToken:URI:service:fromURI:
endpointMap
endpointQueryListeners
endpointState
endpoints
endpointsForURIs:fromURI:service:fromIdentity:filterBehavior:allowRefresh:
endpointsForURIs:service:fromURI:
endpointsForURIs:service:fromURI:ignoringTTL:
endpointsForURIs:serviceIdentifier:localURI:completion:queue:
endpointsToEncryptedData
enforceRemoteTimeouts
engram
engramDataReceived:withGUID:forTopic:toIdentifier:fromID:context:
engramID
engramKeyStoreDidUpdateIdentities:
enqueueBroadcast:forTopic:entitlement:command:capabilities:messageContext:
enqueueExecutionWithTarget:afterDelay:
enqueueIncomingMessageBroadcast:broadcastData:forTopic:entitlement:command:capabilities:messageContext:
enqueueMessage:forTopic:sendMode:
enqueueQueryBlock:cleanup:
enqueuedDate
ensureCommunicationWithActivePairedDeviceIsPossible
ensureDatabaseIsInitialized
ensureLocalSetupInProgressConsistencyAfterQWS
entitledForAllTopics
entitlementDictionary:isEntitledToAccessService:forEntitlement:forAccount:shouldWarn:
entitlements
entryFromPublicDataRepresentation:error:
enumerateContactsWithFetchRequest:error:usingBlock:
enumerateKeysAndObjectsUsingBlock:
enumerateObjectsUsingBlock:
enumerateObjectsWithOptions:usingBlock:
environment
eraseFromKeyChain:
error
error:
errorByService
errorCode
errorContainer
errorContainerToReport
errorForMissingEntitlement:
errorMessage
errorToReportForECError:
errorToReportForLegacyError:
errorWithDomain:code:userInfo:
event:
events
evictCachedObjectForKey:
evictionDate
evictionTimer
excessiveCachingCount
excessiveCachingReportCounter
executeReadyItemsWithBlock:
executeSynchronouslyOnCallbackQueue:
existingAccountIdentityClusterWithCompletion:
existingAccountOnService:withType:loginID:
existingFullDeviceIdentityWithCompletion:
existingRelaySessionToken
existingRelaySignature
expectedNextIncomingSequenceNumber
expectedNextOutgoingSequenceNumber
expectedRemoteKeyTransparencyEligibilityForServiceIdentifier:pushToken:
expectingMoreResponses
expectsPeerResponse
expirationDate
expirationInterval
expirationManager
expirationManager:didExpireUser:
expirationManager:nearingExpirationForUser:
expireDate
expiry
expiryDate
expiryEpoch
extraCompletionBlocks
faceTimeAudioSupported
faceTimeMultiwaySupported
faceTimeNonWiFiEntitled
faceTimeSupported
failWithError:
failedDecryptingMessage:reason:forGroupID:onService:
failedDecryptingMessage:reason:forGroupID:onService:messageContext:
failedPromiseWithError:
failedTokenCache
fakeIncomingPushForUserID:style:service:
fakeMessage
fallbackBlock
familyDevices
familyHandles
familyManager
familyMembers
familyName
fanoutEncryptionManager
featureID
fetchAccountEligibilityForDeviceToDeviceEncryptionWithCompletion:
fetchAccountIdentityItemWithCompletion:
fetchAllKnownGroups:
fetchAuthTokenForProfileID:username:service:outRequestID:completionBlock:
fetchCachedManateeAvailability
fetchCachedObjectForKey:completion:
fetchEndpointCacheStateForServiceIdentifier:localURI:remoteURI:completion:
fetchFamilyWithFamilyRequest:
fetchFullClusterWithIdentifier:error:
fetchGroupWithGroupID:completion:
fetchGroupWithID:completion:
fetchKTEligibleServices
fetchKTRegistrationStatusWithCompletion:
fetchKeyTransparencyDeviceRecordsWithCompletion:
fetchLatestGroupWithStableID:completion:
fetchLocalDeviceTrustCircleEligibilityWithCompletion:
fetchLocalDeviceTrustCircleEligibleServiceIdentifiersWithCompletion:
fetchOpportunisticCacheWithError:
fetchPhoneUserSubscriptionSourceWithRequestUUID:
fetchPresenceCapability:
fetchPrivateClientDataDescriptionForService:completion:
fetchPrivateDeviceDataDescription:
fetchRemoteAccountsOfServiceTypes:withCompletionBlock:
fetchSelfVerificationInfoForApplication:withCompletion:
fetchShouldReregisterForManateeAvailability:
fetchStoredUserDescriptions:
fetchTransparentEndpointsForServiceIdentifier:localURI:remoteURI:verifyAgainstTrustCircle:completion:
fetchTrustedDevicesFromKVS
fetchVerifierKVSTrustedDevicesWithCompletion:
fetchXPCStateDescriptionForProcesses:withCompletion:
fileCleanupBlock
fileExistsAtPath:
filePath
fileSystemRepresentation
fileTypeForOptions:
fileURLWithPath:
fileURLWithPathComponents:
fileXfer
filename
filteredArrayUsingPredicate:
filteredSetUsingPredicate:
finalDestinations
finalizedMessageDictionaryIfDone
findAllocateResponseForSessionID:FromURI:
findDefaultPeerToForceOTRNegotiation:priority:completionBlock:
findDeviceUniqueID:btID:forURI:token:supportsLiveDelivery:
finishDecoding
finishedProvisioningPseudonym:success:error:forRequestUUID:
finishedQueryWithInfo:forURIs:fromURI:service:
finishedRegistration
finishedRenewingPseudonym:success:error:requestUUID:
finishedReportingRequestUUID:withError:
finishedRevokingPseudonymWithSuccess:error:requestUUID:
finishedSigningForRequest:signedData:error:
finishedTrackingAPNSAcksWithURIs:guid:
finishedTrackingMadridAcksWithContext:uris:guid:
finishedVerifyingSignedDataForRequest:success:error:
fireAndForget
fireDate
firewallCollaboratorForXPCDaemon:
firewallCollaboratorWithCompletion:
firewallDatabaseAllowsFromID:mergeID:service:
firewallNotificationCenter
firewallNotificationStyle
firewallRateLimiter
firewallStore
first
firstDataPacketReceiveTime
firstGossipChance
firstGossipChanceFromBag
firstIncomingSYNSequenceNumber
firstObject
firstObjectCommonWithArray:
firstPacketReceiveTime
fixedInterface
fixedInterfaceDestination
flags
flagsString
flushAllMessagesForReason:
flushBuffer:
flushBuffer:toDeviceUniqueID:cbuuid:
flushCoalesceQueueForTopic:
flushLinkProbingStatus:
flushProxy:
forEachAdhocAccount:
forMessaging
forParticipantID
forPublicIdentity
forRefresh
forSending
forceAccountRenewalOnService:
forceAttachmentMessage
forceBagLoad
forceCellular
forceCheckAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:
forceEncryptionOff
forceFamilyFetch
forceFlushOnDeliveryReceipt
forceHTTPQueriesOnly
forceInternetInvitation
forceKVSSync
forceLegacy
forceLegacyPK
forceOTRNegotiation:priority:completionBlock:
forceOTRNegotiationForTopic:priority:completionBlock:
forceOnePerFanout
forceRefresh
forceRemoveAccount:
forceRemoveAccount:messageContext:
forceRemoveUser:silently:
forceRepairAccounts:
forceRoll
forceSyncKVS
forceTriggerStallDetectedBlockWithEventName:
forceValidateUUID:uri:completionBlock:
forceVerificationWithIndex:ticket:completion:
forcedLocal
forgetDeviceWithID:completion:
forgetPeerTokensForService:
forgetPeerTokensForURI:fromURI:service:
forgetSessionTokensForURI:fromURI:service:
formAndEncryptDataBlob:type:
formattedKeyForTopic:sendMode:
forwardingSig
forwardingSigAlgorithm
forwardingTicket
fragmentIndex
fragmentationSize
fragmentedMessageID
fromID
fromIDForCBUUID:deviceID:
fromIdentity
fulfillWithValue:
fulfilledPromiseWithValue:
fullAccountIdentity
fullAccountIdentityWithError:
fullDeviceIdentityContainer
fullDeviceIdentityContainerEncrypter
fullDeviceIdentityContainerUsableForKeyType:
fullDeviceIdentityEncrypter
fullDeviceIdentitySigner
fullIdentity
fullIdentityForKeyIndex:
fullMessageProtectionIdentity
fullMessageProtectionIdentityForDataProtectionClass:
fullServiceIdentitiesSigning
fullServiceIdentityWithFullAccountIdentity:type:error:
gameCenterData
gameCenterModifyForUserName:
gameCenterModifyForUserName:messageContext:
gameCenterPropertiesFromAccountWithUsername:
gameCenterService
gameCenterSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:
gameCenterSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:messageContext:
gameCenterSignInWithUsername:authToken:password:accountInfo:accountStatus:handles:
gameCenterSignOut
gameCenterSignOutWithMessageContext:
gatherLocalDeviceInfoWithCompletionBlock:
gdrCenter
gdrReAuthenticateIfNecessary
generateCSRForUserID:
generateDeliveryReceipt
generateIdentityContainerWithIdentifier:existingLegacyIdentity:existingNGMIdentity:dataProtectionClass:nonLegacyError:error:
generateLinkReport:isCurrentLink:
generatePhoneAuthenticationSignatureOverData:withRequestUUID:
generatePhoneAuthenticationSignatureOverData:withRequestUUID:messageContext:
generation
generationCounter
getAccountKeysAndSignDataForServices:
getActiveParticipants:pushTokenForParticipants:isLightweightParticipant:
getAdditionalAllocationForAddress:selfAddress:relaySessionID:allocateType:qrReason:previousTime:previousError:previousRelayIP:previousAccessToken:requestSelfAllocation:isSessionIDRemoteDeviceID:withPreferredRemoteInterface:withPreferredLocalInterface:
getAllAllowedEntriesForCategory:
getAllKeyValueDeliveryLocalMaterialSetForGroupID:
getAllocateResponse:groupID:
getAllocation
getAppID
getAttribute:attribute:
getBytes:length:
getCString:maxLength:encoding:
getCallerCert
getCountOfPendingRecipientsAcceptedSessions
getCountOfSessionToAllocations
getDataByKey:
getDeliveryStats
getDeliveryStatsWithMessageContext:
getDependentRegistrations:completionBlock:
getDesiredMaterialSetForEncryptedData
getDonatedAllowedEntriesForCategory:
getEncryptionKeyID
getFromService
getGLClassWithOptions:
getKeychainData:service:account:accessGroup:error:
getKeysForServiceTypeName:completion:
getLightweightStatusDictForGroup:
getLinkInformationForDevice:completionHandler:
getLocalDeviceInfoWithCompletion:
getLocalIncomingPowerAssertion:queue:
getLocalParticipantIDForRelaySessionID:
getMembersForGroup:
getMostRecentIDSRegistrationReason
getOptInState
getOrCreateMessageStoreForDataProtectionClass:
getPNRReasonForUserUniqueIdentifier:
getPairedDeviceInfoWithCompletion:
getPairingDevicesWithCompletion:
getPairingRecordsWithCompletion:
getParticipantIDForAlias:salt:
getParticipantIDForAlias:salt:sessionID:
getParticipantIDForAlias:salt:sessionID:messageContext:
getParticipantsForGroup:
getParticipantsInfoForGroup:
getParticipantsWaitingForInitialKeyMaterials:
getParticipantsWaitingForKeyMaterials:
getParticipantsWaitingForStableKeyMaterials:
getProgressUpdateForIdentifier:service:
getProgressUpdateForIdentifier:service:messageContext:
getPushTokenForRelaySessionID:relaySessionID:
getPushTokenFromParticipantID:participantID:
getPushTokensFromParticipantIDs:participantIDs:
getQuickRelayAllocateOptions:
getRegisteredIdentities
getRelaySessionIDForIDSSessionID:pushToken:
getServerProviderForIDSSessionID:
getSessionInfo:relayGroupID:relaySessionID:options:
getSessionInfo:relaySessionID:requestType:options:
getSessionInfoFromDefaults:groupID:
getStableKeyIdentifiersSentToClient
getTransmittableBytes:withPrefixByte:
getURIFromParticipantID:participantID:
getURIFromPushToken:forGroup:
getUUIDBytes:
getValidatePeerResult:uuid:completionBlock:
givenName
globalLinkErrorToSessionEndReason:
gossipPolicy
gossipRecipients
gossipSTHPayloadForDestinations:forServiceIdentifier:fromID:
groupContext
groupContext:didCacheGroup:
groupContext:didCreateGroup:
groupContext:didReceiveDecryptionFailureForGroup:
groupContext:didUpdateGroup:withNewGroup:
groupContext:fetchGroupWithID:completion:
groupContext:upsertGroupWithInfo:previousGroup:completion:
groupContextController
groupContextDidReceiveRegistrationIdentityUpdate:
groupContextForProtectionSpace:withCompletion:
groupCrypto
groupCryptoMinVersionNumber
groupData
groupFromPublicDataRepresentation:completion:
groupFromPublicDataRepresentation:inContext:completion:
groupIDToCapabilityToParticipantPushTokens
groupIDToDesiredMaterialSet
groupIdentifer
groupMasterKeyCollectionToBroadcastForDestinationURI:
groupMemberCount
groupMemberPushTokens
groupMembers
groupName
groupPayload
groupServer
groupServerElectionStore
groupSessionDidTerminate:
groupSessionEnded:withReason:error:
groupSessionGroupIDs
groupSessionKeyValueDeliveryProviderCollaboratorForXPCDaemon:
groupSessionState
groupShareReceived:withGUID:forTopic:toIdentifier:fromID:context:
groupStatusNotificationController
groups
guid
hadStandalonePreferences
handleAVConferenceError:
handleAllocateRequestFailureForDevice:requestID:errorCode:
handleCellularRATChange
handleFailureInFunction:file:lineNumber:description:
handleFailureInMethod:object:file:lineNumber:description:
handleGroupSessionKeyValues:
handleIPPayload:bytesLength:source:destination:upperProtocol:forDeviceConnectionInfo:flush:callerShouldStop:
handleInFirewallAllowList:
handleIncomingPacket:fromDeviceToken:
handleIncomingSMSForResponse:
handleIncomingUpdate:onActivity:completion:
handleKVSUpdate:
handleMessageToCoalesce:forTopic:sendMode:
handleNetworkAddressChanges:hasIPv6AddressChange:
handleOTRNegotiationComplete:
handleOTRNegotiationTimeout:
handleRateLimitingResponseForTopic:ttr:
handleReceivedIncomingMessageData:identifier:context:
handleRegistrationSMSDeliveryFailed
handleRegistrationSMSDeliveryFailedWithShouldBypassRetry:
handleRegistrationUpdateForHash:localURI:remoteURI:service:guid:forceUpdate:
handleResponseDictionary:
handleResponseHeaders:
handleSIMInserted
handleSIMRemoved
handleTransparencySignatureResponse:error:
handleUtunChannelRead:limit:
handleUtunChannelWrite:source:destination:upperProtocol:bytes:bytesLen:
handler:didReceiveMessage:forTopic:fromID:messageContext:
handler:didReceiveMessage:forUnknownTopic:messageContext:
handler:flushCacheForURIs:
handler:isConnectedChanged:
handler:profile:deviceUpdated:service:
handler:profileHandlesUpdated:status:allowGDR:
handler:pushTokenChanged:
handler:receivedNoStorageResponseForTopic:messageContext:
handler:receivedOfflineMessagePendingForTopic:messageContext:
handler:reloadBag:
handler:requestedPromptThroughPushWithTitle:message:defaultButton:defaultUrl:alternateButton:alternateUrl:
handler:requestedSysdiagnoseWithTapToRadarPushPayload:
handler:reregisterUserID:style:service:
handlers
handlesFromFamilyMember:
hardDeregister
hardDeregisterWithMessageContext:
hasAcceptedSMSRequest
hasActionForTarget:
hasActiveSMSAccount
hasActiveSubscription
hasAliasURI:
hasAllEncryptionKeys
hasAllPublicKeys
hasAnyEntitlements
hasBeenExpiredForAtLeast:
hasBeenProvisioned
hasCachedMasterKeyIdentifier:
hasCachedStableKeyIdentifier:
hasClientReceivedMasterKeyIdentifier:
hasClientReceivedStableKeyIdentifier:
hasDependentRegistrationWithURI:token:
hasDeviceSignature
hasEntitlementForPushReplay
hasEverRegistered
hasForcedReRegistered
hasHardDeregistered
hasKeyIndex
hasKtLoggableData
hasKtVersion
hasMessagableOTRSessionForToken:
hasMetadata
hasMoreData
hasNgmPublicIdentity
hasNgmVersion
hasNotifiedSuccess
hasPeerTokensForURI:fromURI:service:
hasPeerTokensForURIs:fromURI:service:
hasPerformedMigration
hasPreferWiFiRequest
hasPrefix:
hasProductName
hasProperty:forURI:pushToken:fromURI:service:
hasPublicIdentity
hasPublicKeyForURI:pushToken:fromURI:service:
hasPushToken
hasQueryResultsForURI:fromURI:service:
hasReceivedAPSDAck
hasRegisteredContainer
hasRequiredKeys:
hasSentinel
hasService:forAnyOfEntitlements:
hasService:forEntitlement:
hasServiceIdentifier
hasSignature
hasSpaceForAggregateMessage:
hasSpaceForCloudMessagesWithPriority:dataProtectionClass:
hasSpaceForMessagesWithDataProtectionClass:
hasSpaceForMessagesWithPriority:dataProtectionClass:
hasSpaceForMessagesWithPriority:dataProtectionClass:messageType:
hasStatus
hasSuffix:
hasTimestamp
hasTransparencyVersion
hasUnregisteredContainer
hasUnregisteredIdentity
hasUnregisteredKTData
hasValidStatusForURI:fromURI:fromService:
hasVettedAliasURI:
hash
hashForString:
hasiCloudAccount
havePreviouslyGossipedToURI:
headerDataSize
headerOverhead
headersBySigningData:serverTimestamp:error:
healSelfForApplication:withHealableErrors:withCompletion:
healableState
healthDebug
heartbeat
helloMessage
highPriority
highPriorityConnectionSendingSet
holdCommitBlock:andDecryptedData:withEncryptedAttributes:forKey:
homeKitGetAdminAccessTokensWithServiceUserID:accessoryID:pairingToken:
homeKitGetAdminAccessTokensWithServiceUserID:accessoryID:pairingToken:messageContext:
homeKitGetConsentTokensWithServiceUserID:accessoryIDs:adminID:
homeKitGetConsentTokensWithServiceUserID:accessoryIDs:adminID:messageContext:
homeKitGetServiceUserIDs
homeKitGetServiceUserIDsWithMessageContext:
homeKitGetUserAccessTokensWithServiceUserID:userID:userHandle:accessoryRequests:
homeKitGetUserAccessTokensWithServiceUserID:userID:userHandle:accessoryRequests:messageContext:
homeKitPayload
homeKitRefreshUserAccessTokensWithServiceUserID:userID:accessoryRequests:
homeKitRefreshUserAccessTokensWithServiceUserID:userID:accessoryRequests:messageContext:
homeNumberSecondsUntilExpiration
homePlmn
host
hostState
hour
httpMessageDelivery
iCloud
iCloudAccountDoesMatchAccountForIdentifier:
iCloudBasedService
iCloudIdentities
iCloudModifyForUserName:
iCloudModifyForUserName:messageContext:
iCloudModifyForUsername:
iCloudService
iCloudSignInHackWithUserName:password:
iCloudSignInHackWithUserName:password:messageContext:
iCloudSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:
iCloudSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:messageContext:
iCloudSignInWithUsername:authToken:password:accountInfo:accountStatus:handles:
iCloudSignOut
iCloudSignOutHack
iCloudSignOutHackWithMessageContext:
iCloudSignOutWithMessageContext:
iCloudSystemAccountWithCompletion:
iCloudSystemAccountWithError:
iCloudURIs
iCloudUpdateForUserName:accountInfo:
iCloudUpdateForUserName:accountInfo:messageContext:
iCloudUpdateForUsername:accountInfo:
iMessageReportSpamCheckUnknownResponseForRequestID:status:abusive:delay:withError:
iMessageSpam
iMessageSupported
iTunesService
iTunesSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:
iTunesSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:messageContext:
iTunesSignInWithUsername:authToken:password:accountInfo:accountStatus:handles:
iTunesSignOut
iTunesSignOutWithMessageContext:
iTunesSystemAccountWithCompletion:
iTunesSystemAccountWithError:
iconAtPath:
iconForApplicationIdentifier:
idInfoResultForURIs:service:fromURI:infoType:infoOptions:idStatusUpdates:
idStatusQueryController
idWithAccount:service:name:
identifier
identifierForFullCluster:
identifyPhoneNumberForRequestor:queue:
identities
identity
identityClassA
identityClassC
identityClassD
identityContainerDeserializationError
identityData
identityDataForToken:uri:service:error:
identityDataSource
identityForDevice
identityForToken:uri:service:error:
identityPair
identityPrivateKey
identityPublicKey
identityServiceTypeName
identityServicesSupported
identityToRegisterError
identityWithAccess:usageIdentifier:error:
identityWithData:error:
identityWithDataProtectionClass:error:
identityWithDataRepresentation:error:
identityWithError:
identityWithIdentityData:prekeyData:error:
identityWithLegacyFullIdentity:ngmFullDeviceIdentity:ngmVersion:error:
idsDaemon
idsDeviceConnectionUUID
idsDeviceIdentifier
idsNRDeviceBridge
idsNRPluginManager
idsPriority
idsServerBag
idsUserID
ids_secureUnarchiveObjectOfClass:withData:
ignoreMaxRetryCount
imDataProtectionClassFromDataProtectionClass:
impactedServices
impactedServicesForService:withCompletion:
inFlightHeartbeatBlock
inFlightMessageCount
inFlightMessageCountLowWaterMark
inFlightMessages
inFlightResetBlock
inFlightSMSTimeoutBlock
incomingAccountSyncMessage:
incomingAccountSyncMessage:messageContext:
incomingDataFragments
incomingEncryptionTableBySSRC
incomingEventWithTimestamp:duration:processTime:compressionTime:kernelTime:bytes:
incomingFilePath
incomingInvitation:withGUID:forTopic:toIdentifier:fromID:context:
incomingInvitationUpdate:withGUID:forTopic:toIdentifier:fromID:context:
incomingMessagesUpToLimit:messageTransportType:success:
incomingStorageRequestForTopic:primary:messageContext:
incomingSyncMessage:
incrementMessageCount
incrementSendCountForDestination:
index
indexOfObject:
indexOfObjectIdenticalTo:
indexesOfObjectsPassingTest:
individualPeerMessages
inferredExternalIP
inflightServerStorageStateMachineForTopic:
infoAttribute
infoForIDs:fromIdentity:fromURI:fromService:infoType:infoOptions:lightQuery:allowQuery:completion:
infos
init
init:
initAdHocAccountWithLoginID:service:uniqueID:accountType:accountConfig:primaryAccount:
initForReadingFromData:error:
initForTesting
initOnDiskCacheWithContainerURL:Queue:
initQRStreamInfo:subscribedStreams:generationCounter:maxConcurrentStreams:
initRequiringSecureCoding:
initWithAccount:destinations:options:
initWithAccount:destinations:options:availabilityCheck:
initWithAccount:service:name:
initWithAccountController:peerIDManager:negativeRegistrationUpdateCache:registrationKeyManager:
initWithAccountController:serviceController:passwordManager:registrationConductor:deviceSupport:registrationControl:registrationController:userStore:
initWithAccountController:serviceController:restrictions:registrationController:
initWithAccountController:systemAccountAdapter:userDefaults:
initWithAccountIdentity:dataSource:queue:
initWithAccountIdentity:paricipants:sharedApplicationData:
initWithAccountKey:deviceKey:
initWithAccountKey:serverLoggableDatas:
initWithAccountType:serviceIdentifier:doesExist:isEnabled:isUserDisabled:isiCloudSignedIn:doesMatchiCloudAccount:isiTunesSignedIn:registrationError:registrationErrorReason:registrationStatus:accountRegistrationStatus:hasEverRegistered:lastRegistrationFailureError:timeIntervalSinceLastRegistrationFailure:timeIntervalSinceLastRegistrationSuccess:accountSecurityLevel:areAllAliasesSelected:areAllSelectedAliasesRegistered:numberOfSelected:numberOfVetted:numberOfUnselectReasonUnknown:numberOfUnselectReasonAlertDenial:numberOfUnselectReasonClientCall:numberOfUnselectReasonBadAlias:numberOfUnselectReasonUpdateInfo:isProdEnvironment:
initWithAddressPair:protocol:
initWithApplication:
initWithApplication:registrationData:
initWithArray:
initWithArray:copyItems:
initWithAssociationID:sharingState:lastUpdatedDate:
initWithBag:
initWithBase64EncodedString:options:
initWithBlocks:qraAWDBlock:qraCONBlock:qraDISBlock:
initWithBroadcastBlock:needsClientAck:messageUUID:priority:senderID:sequenceNumber:
initWithBroadcastQueue:
initWithBundleID:
initWithBundleIdentifier:
initWithBytes:length:
initWithBytes:length:encoding:
initWithBytes:length:loggingPrefixString:
initWithBytesBuffer:bufferSize:metadata:metadataSize:
initWithBytesNoCopy:length:deallocator:
initWithBytesNoCopy:length:freeWhenDone:
initWithCBUUID:pairingType:
initWithCBUUID:publicIdentityDataClassA:classC:classD:
initWithCTPNR:preflightStackStore:
initWithCTPNR:preflightStackStore:HTTPDelivery:pushHandler:lockdownManager:systemMonitor:arbiter:systemAccountAdapter:
initWithCache:accountController:
initWithCache:sessionID:
initWithCalendarIdentifier:
initWithCapabilitiesMap:
initWithCapacity:
initWithCapacity:queue:block:
initWithCertifiedDeliveryContext:
initWithCertifiedDeliveryContext:queryHash:
initWithClientData:
initWithCoder:
initWithConfiguration:
initWithConnection:clientProcessName:UTunDeliveryController:duetInterface:
initWithConnection:protocol:alreadyConfigured:forceSecureCoding:
initWithConnectionID:protocol:isCloudEnabled:
initWithContainer:serverBag:kvStore:queue:
initWithContentsOfFile:
initWithConversationGroup:deviceIdentity:participants:
initWithCorrectFramesSinceLastCorruption:correctRawBytesSinceLastCorruption:discardedRawBytes:recoveryTimeInMs:linkType:
initWithData:
initWithData:encoding:
initWithData:encryptedAttributes:withCommitState:
initWithData:encryption:capability:
initWithData:encryptionType:payloadMetadata:
initWithData:identifier:serviceName:accountUniqueID:options:
initWithDataProtectionClass:
initWithDataProtectionClass:filename:
initWithDataRepresentation:
initWithDataRepresentation:error:
initWithDatabase:
initWithDelegate:
initWithDelegate:dataSource:
initWithDelegate:dataSource:dualMessageDelivery:networkChangeNotifier:pushHandler:
initWithDelegate:forGroupID:sessionID:metricsCollector:
initWithDelegate:pairedDevice:
initWithDelegate:queue:
initWithDeliveryController:userDefaults:idsServerBag:
initWithDestination:
initWithDeviceData:deviceMetadata:recordID:
initWithDeviceIdentifier:
initWithDeviceIdentifier:delegate:
initWithDeviceIdentifier:delegate:queue:
initWithDeviceIdentifier:delegate:startMonitor:
initWithDeviceIdentifier:portString:dataProtectionClass:
initWithDeviceIdentityContainerEncrypter:messageHashChecker:
initWithDeviceName:privateDeviceData:
initWithDeviceUniqueID:cbuuid:
initWithDeviceUniqueID:cbuuid:receiveHandler:
initWithDictionary:
initWithDictionary:copyItems:
initWithDictionary:service:uniqueID:
initWithDictionary:serviceName:isInitiator:uniqueID:accountID:destinations:
initWithDictionary:sharedState:messenger:
initWithDictionaryRepresentation:
initWithDomain:code:userInfo:
initWithDuration:result:hasRecipientAccepted:payloadSize:topic:service:
initWithEligibleServiceIdentifiers:signatures:
initWithEncryptedBlobData:type:requireSignature:
initWithEncryptedData:type:forPublicIdentity:forParticipantID:
initWithEncryptedResult:dataLength:fileCleanupBlock:
initWithEncryptionContext:encryptionKeySize:
initWithEncryptionController:
initWithEncryptionController:transferServicesController:
initWithEncryptionType:
initWithEncryptionType:usedLastResortCache:usedCachedData:
initWithEndpoint:fullDeviceIdentityContainerEncrypter:replayCommitter:forceLegacyPK:
initWithEndpoint:fullDeviceIdentitySigner:keyType:keyDiversifier:
initWithEndpoints:keyTransparencyContext:
initWithEntitlements:
initWithError:
initWithErrorCode:timeIntervalSinceAuthenticationParameterRequest:
initWithErrorContainer:missingIdentity:missingPrekey:
initWithFamilyRequest:
initWithFeatureID:scopeID:expiryEpoch:allowedServices:
initWithFilePath:
initWithFilename:
initWithFirst:second:
initWithFlags:options:timeout:wifiTimeout:completionBlock:
initWithFromServerStorage:certifiedDeliveryContext:identifier:
initWithGUID:service:certifiedDeliveryVersion:certifiedDeliveryRTS:senderToken:
initWithGUID:service:certifiedDeliveryVersion:certifiedDeliveryRTS:senderToken:failureReason:failureReasonMessage:
initWithGUID:service:certifiedDeliveryVersion:certifiedDeliveryRTS:senderToken:localURI:remoteURI:
initWithGUID:service:certifiedDeliveryVersion:certifiedDeliveryRTS:senderToken:localURI:remoteURI:replayKey:
initWithGUID:service:messageDelivery:completionActivity:coalesceQueueManager:
initWithGossipPolicy:transparencyVerifier:gossipEnabledServices:
initWithGossipSpecification:
initWithGroupInfo:groupID:cypher:
initWithGroupUUID:isInitiator:participantIdentifier:participantDestinationID:participantUpdateType:participantUpdateSubtype:fromServer:serverDate:participantData:clientContextData:members:participantIDs:relaySessionID:
initWithGroupUUID:participantIdentifier:isKnown:participantURI:pushToken:
initWithGuid:
initWithGuid:endedReason:genericError:gameKitError:conferenceMiscError:callDuration:isNetworkEnabled:isNetworkActive:isNetworkReachable:networkCheckResult:dataRate:gksError:connectDuration:remoteNetworkConnection:localNetworkConnection:connectionType:usesRelay:currentNATType:remoteNATType:relayConnectDuration:isInitiator:linkQuality:gksReturnCode:
initWithGuid:numberOfRecipients:
initWithGuid:numberOfRecipients:remoteSessionEndReason:
initWithGuid:protocolVersionNumber:serviceName:clientType:
initWithGuid:protocolVersionNumber:serviceName:clientType:isQREnabled:isUsingQRDirectly:isInitiator:isScreenSharingSessionType:isWithDefaultPairedDevice:transportType:linkType:linkProtocol:endedReason:destinationType:durationOfSession:durationToConnect:isNetworkEnabled:isNetworkActive:isNetworkReachable:isWifiInterfaceDisallowed:isCellularInterfaceDisallowed:
initWithGuid:registrationError:validationDuration:numberOfSMSSent:
initWithGuid:smsRoundTripDuration:
initWithGuid:success:connectionType:resultCode:registrationError:genericError:URLError:POSIXError:
initWithGuid:success:connectionType:resultCode:registrationError:isPhoneUser:isDSUser:genericError:URLError:POSIXError:
initWithGuid:success:connectionType:resultCode:registrationType:genericError:URLError:POSIXError:
initWithGuid:success:connectionType:resultCode:registrationType:isHeartbeatRegister:heartbeatDelay:genericError:URLError:POSIXError:
initWithHighPriority:
initWithIMSI:PLMN:validationMechanisms:
initWithIdentifier:
initWithIdentifier:btUUID:uniqueID:shouldUseIPsecLink:isNearby:isClassCConnected:
initWithIdentifier:dataProtectionClass:keychainWrapper:systemMonitor:
initWithIdentifier:dataProtectionClass:keychainWrapper:systemMonitor:fileDirectory:
initWithIdentifier:initialMembershipURIs:automaticResetBlock:queue:
initWithIdentifier:initialMembershipURIs:automaticResetInterval:automaticResetBlock:queue:
initWithIdentifier:keychainWrapper:systemMonitor:
initWithIdentifier:queue:
initWithIdentifier:socketPriority:btUUID:uniqueID:incomingServiceMap:outgoingServiceMap:isCloudEnabled:shouldUseIPsecLink:
initWithIdentifier:timeout:
initWithIdentifier:versionNumber:decodableClasses:dataProtectionClass:mergePolicy:migrationBlock:
initWithIdentifier:versionNumber:decodableClasses:mergePolicy:writeCoalescingDelay:writeCoalescingLeeway:persister:migrationBlock:allowBackup:
initWithIdentifier:versionNumber:decodableClasses:migrationBlock:
initWithIdentifier:versionNumber:decodableClasses:persister:migrationBlock:
initWithIdentifier:versionNumber:decodableClasses:persister:migrationBlock:allowBackup:
initWithIdentityData:
initWithIdentityDataSource:
initWithIdentityDataSource:transparencyDaemon:
initWithInactiveTime:linkType:priorLinkType:
initWithIndex:
initWithIndex:groupID:participantID:
initWithInfo:uris:service:maxSize:
initWithInput:initialValue:
initWithKMs:type:forPublicIdentity:forParticipantID:
initWithKeyMaterial:keySalt:keyIndex:groupID:generationCounter:participantID:
initWithKeyMaterial:keySalt:keyIndex:groupID:participantID:
initWithKeyOptions:valueOptions:capacity:
initWithKeyTransparencyVersion:cloudKitSuccess:cloudKitErrorDomain:cloudKitErrorCode:cloudKitUnderlyingErrorDomain:cloudKitUnderlyingErrorCode:cloudKitOperationTimeInterval:accountKeySuccess:accountKeyErrorDomain:accountKeyErrorCode:accountKeyUnderlyingErrorDomain:accountKeyUnderlyingErrorCode:accountKeyOperationTimeInterval:
initWithKeyTransparencyVersion:cloudKitSuccess:cloudKitErrorDomain:cloudKitErrorCode:cloudKitUnderlyingErrorDomain:cloudKitUnderlyingErrorCode:cloudKitOperationTimeInterval:accountKeySuccess:accountKeyErrorDomain:accountKeyErrorCode:accountKeyUnderlyingErrorDomain:accountKeyUnderlyingErrorCode:accountKeyOperationTimeInterval:numberOfTotalDevices:numberOfCandidateDevices:numberOfMatchesFromCloudKit:numberOfMatchesFromAccountKey:
initWithKeyTransparencyVersion:kvsSuccess:kvsErrorDomain:kvsErrorCode:kvsSyncTimeInterval:kvsUnderlyingErrorDomain:kvsUnderlyingErrorCode:
initWithKeyType:keyDiversifier:service:serviceController:fullDeviceIdentitySigner:
initWithKeychainElectionStore:cloudKitElectionStore:groupServerElectionStore:
initWithKeychainWrapper:
initWithKeychainWrapper:uriSuggester:
initWithKeysToFetch:
initWithLabelID:
initWithLabelID:phoneBookNumber:
initWithLabelID:phoneBookNumber:isDefaultUser:countryCode:networkCode:
initWithLimit:timeLimit:
initWithLocalAddress:remoteAddress:
initWithLocalFullIdentity:remotePublicIdentity:
initWithLocaleIdentifier:
initWithLoginID:service:uniqueID:accountType:accountConfig:
initWithMMCSUploader:
initWithMPIdentityIdentifier:
initWithMachServiceName:
initWithMasterKeyMaterials:membershipURIs:
initWithMessage:data:protobuf:fromID:toDestinations:accountGUID:useDictAsTopLevel:dataToEncrypt:encryptPayload:compressPayload:wantsResponse:expirationDate:enforceRemoteTimeouts:command:wantsDeliveryStatus:deliveryStatusContext:messageUUID:priority:guid:alternateGUID:identifier:forcedLocal:peerResponseIdentifier:expectsPeerResponse:wantsAppAck:fireAndForget:nonWaking:nonCloudWaking:storedSize:duetIdentifiersOverride:bypassDuet:mainAccountGuid:localDestinationDeviceUUID:enqueuedDate:messageType:alwaysSkipSelf:pushPriority:queueOneIdentifier:liveMessageDelivery:requireBluetooth:requireLocalWiFi:sent:wantsProgress:ignoreMaxRetryCount:wantsCertifiedDelivery:originalTimestamp:wantsFirewallDonation:sendMode:
initWithMessage:fromID:topic:guid:isLocal:
initWithMessage:resumeResourceTransfers:receiverError:
initWithMessage:subsystem:sendBlock:
initWithMessageDelivery:
initWithMessageDelivery:passwordManager:
initWithMessageDelivery:pushHandler:keyTransparencyVerifier:
initWithNRDeviceManager:pairedDeviceRepository:
initWithName:
initWithName:address:andTestTransport:
initWithNotificationCenter:serverBag:
initWithObject:key:
initWithObjects:
initWithObjectsAndKeys:
initWithOriginPersister:destinationPersister:
initWithOriginPersister:destinationPersister:userDefaults:
initWithPNRReason:mechanism:
initWithPacketBuffer:metadata:metadataSize:
initWithPairedDevice:capabilityFlags:
initWithPairedDevice:deviceInfoPayload:
initWithPairedDevice:deviceUniqueID:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:privateData:
initWithPairedDevice:iCloudURIs:pushToken:
initWithPairedDevice:isActive:
initWithPairedDevice:pairingType:
initWithPairedDevice:supportIPsec:
initWithPairingManager:
initWithPairingManager:serviceController:accountController:pushHandler:userDefaults:remoteCredential:
initWithParent:userInfo:
initWithPasswordManager:
initWithPath:
initWithPath:storeName:dataProtectionClass:
initWithPayload:command:
initWithPeerIDManager:
initWithPeerIDManager:IDStatusQueryController:
initWithPeerIDManager:accountController:
initWithPeerIDManager:fullDeviceIdentityContainerEncrypter:rateLimiter:replayCommitter:publicIdentityCache:avoidMainQueue:
initWithPeerIDManager:fullDeviceIdentitySigner:rateLimiter:publicIdentityCache:avoidMainQueue:
initWithPeerIDManager:registrationKeyManager:OTRController:publicKeyStorage:accountController:serviceController:queueManager:failedTokenCache:
initWithPeerMessage:service:fromIdentity:maxSize:
initWithPersister:
initWithPhoneAuthenticationCertificate:
initWithPhoneUser:
initWithPhoneUser:authenticationCertificate:
initWithPhoneUser:expirationDate:finishedRegistration:
initWithPipe:useSkywalkChannel:withDeviceUniqueID:cbuuid:
initWithPipe:withDeviceUniqueID:cbuuid:
initWithPolicy:serviceToVerifier:keyManager:store:registrationDataSource:internalMetricLogger:productionMetricLogger:accountKeyManager:serviceToKTOptInManager:
initWithPolicyBlock:
initWithPreferedType:
initWithPrefixedURI:
initWithPresenceIdentifier:
initWithProperties:
initWithProperties:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:
initWithProtectionSpace:
initWithProtobufData:type:isResponse:
initWithPublicKeyStorage:accountController:fullDeviceIdentityContainerEncrypter:rateLimiter:forceLegacy:
initWithPublicKeyStorage:peerIDManager:accountController:registrationKeyManager:rateLimiter:OTRController:serviceController:avoidMainQueue:forceLegacy:
initWithPublicLegacyIdentityData:publicNGMIdentityData:publicNGMPrekeyData:NGMVersion:
initWithPublicPreKeyData:wrapMode:creationDate:
initWithPushHandler:lockdownManager:heartbeatCenter:ftNetworkSupport:sendMessageHandlerBlock:messageResponseHandlerBlock:
initWithPushHandler:queryHandler:persistentMap:keyTransparencyVerifier:userDefaults:
initWithPushHandler:validationMessageSendBlock:
initWithPushPayload:
initWithPushToken:loggableData:signedData:
initWithPushToken:verificationState:
initWithQuery:
initWithQueryCache:
initWithQueryCompletionBlock:queue:
initWithQueue:
initWithQueue:backoffProvider:block:
initWithQueue:block:
initWithQueue:connection:
initWithQueue:connection:activityMonitorStateManager:
initWithQueue:connection:messageDelivery:pushHandler:
initWithQueue:connection:opportunisticCache:
initWithQueue:connection:transparencyVerifier:
initWithQueue:idsDaemon:serviceController:pairingManager:quickSwitchHelper:accountController:utunController:utunDeliveryController:
initWithQueue:interval:repeats:handlerBlock:
initWithQueue:interval:repeats:userInfo:handlerBlock:
initWithQueue:mechanism:
initWithQueue:messageDelivery:
initWithQueue:persister:registrationKeychainManager:
initWithQueue:syncOntoMain:collaboratorProvider:takingOverAndResumingConnection:
initWithQueue:syncOntoMain:takingOverAndResumingConnection:
initWithQueue:ttlInSeconds:
initWithQueue:userStore:
initWithQueue:userStore:deviceSupport:
initWithQueue:userStore:server:phoneNumberValidator:deviceSupport:
initWithRapportClient:
initWithReadHandler:
initWithReason:guid:service:additionalInformation:
initWithReason:mappedStreamID:serviceName:
initWithRecordName:zoneID:
initWithRecordType:predicate:
initWithRecordType:recordID:
initWithRecordZoneIDs:
initWithRecordZonesToSave:recordZoneIDsToDelete:
initWithRecordsToSave:recordIDsToDelete:
initWithRecoveryTime:
initWithRegistrationKeyManager:messageHashStore:usePairingKey:
initWithRegistrationType:registrationControlStatus:isInterestingRegion:
initWithRegistrationType:serviceIdentifier:wasSuccessful:registrationError:circleStatus:
initWithRequest:
initWithRequestID:
initWithResourceAtPath:metadata:sequenceNumber:streamID:expectsPeerResponse:wantsAppAck:compressPayload:compressed:didWakeHint:peerResponseIdentifier:messageUUID:expiryDate:
initWithResponse:
initWithResponse:cleanupTime:
initWithResponseCode:deviceID:
initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:
initWithResponseCode:error:lastCall:
initWithRestoreMonitor:systemMonitor:
initWithResultData:serverKey:signingTimestamp:error:
initWithSMSSignature:
initWithSecOTRSessionRef:
initWithSending:refresh:messaging:resultExpected:preventNewQuery:
initWithSending:refresh:messaging:resultExpected:preventNewQuery:isForced:
initWithSequenceNumber:
initWithSequenceNumber:streamID:expectsPeerResponse:wantsAppAck:compressed:didWakeHint:peerResponseIdentifier:messageUUID:data:expiryDate:
initWithSequenceNumber:streamID:expectsPeerResponse:wantsAppAck:compressed:didWakeHint:peerResponseIdentifier:messageUUID:expiryDate:protobuf:
initWithSequenceNumber:streamID:peerResponseIdentifier:
initWithServerBag:
initWithServerBag:KTAccountKeyByService:
initWithService:accountType:fromStorage:serverTimestamp:localTimeDelta:
initWithService:fromURI:toURI:
initWithService:isFromDefaultPairedDevice:messageSize:linkType:priority:
initWithService:isToDefaultPairedDevice:closeError:socketError:bytesSent:packetsSent:bytesReceived:packetsReceived:
initWithService:isToDefaultPairedDevice:messageSize:linkType:deliveryError:RTT:priority:
initWithService:isToDefaultPairedDevice:messageSize:linkType:priority:
initWithService:isToDefaultPairedDevice:openError:socketError:
initWithService:linkType:wasPrimary:timeTaken:numberProcessed:
initWithService:priority:duration:result:
initWithServiceController:firewallStore:
initWithServiceController:registrationController:systemAccountAdapter:deviceSupport:
initWithServiceDictionary:
initWithServiceIdentifier:
initWithServiceIdentifier:accountKey:URI:
initWithServiceIdentifier:localURI:subscribedURIs:queue:
initWithServiceIdentifier:messageSize:deltaTime:priority:
initWithServiceName:queue:
initWithSessionController:realTimeEncryptionController:broadcaster:
initWithSet:
initWithShouldAllowProxyQueries:peerIDManager:userDefaults:statusDepencencyProvider:
initWithSignatureRequests:
initWithSockAddr:
initWithSocket:queue:delegate:
initWithSocket:queue:delegate:priority:connectionID:linkType:
initWithSocket:queue:delegate:priority:identifier:
initWithStableGroupID:generation:
initWithStableGroupID:groupServerEntry:
initWithStableKeyMaterials:
initWithStandardPolicy:
initWithStartDate:endDate:endpointCount:usedPipeline:usedMMCS:responseCode:
initWithStateProvider:messageDelivery:peerIDManager:accountController:serviceController:pushListener:
initWithStateProvider:messageDelivery:peerIDManager:accountController:serviceController:queue:
initWithStatus:user:authenticationCertificate:
initWithStoreIdentifier:type:
initWithSubActivity:pushToken:serverTimestamp:clientContext:isDeviceOnline:
initWithSuccess:
initWithSuccess:serverProvidedSMT:error:
initWithSuiteName:
initWithSyncedLoggableDatas:uriToServerLoggableDatas:
initWithSystemAccountAdapter:userStore:migrationTracker:queue:
initWithSystemMonitor:keychainWrapper:loadingRateLimiter:identityDataSource:allowPairingIdentities:allowRegenerateRegisteredIdentity:keyPairProvider:ktRegistrationDataManager:
initWithTarget:connection:protocol:forceSecureCoding:offMainThread:
initWithTargetToken:sessionToken:targetPeerID:encryptedData:wantsDeliveryStatus:wantsCertifiedDelivery:ackBlock:completionBlock:
initWithTicket:accountKey:
initWithTimeInterval:
initWithTimeInterval:name:shouldWake:target:selector:userInfo:
initWithTimeInterval:name:shouldWake:target:selector:userInfo:useCurrentRunLoop:
initWithTimeIntervalSince1970:
initWithTimeIntervalSinceNow:
initWithTimer:
initWithTimerBlock:
initWithTimestamp:duration:processTime:compressionTime:kernelTime:bytes:
initWithTimestamp:duration:processTime:compressionTime:sendTime:bytes:
initWithTimestamp:kernelTime:bytes:
initWithTitle:message:
initWithTitle:promptMessage:
initWithToken:
initWithTopLevelService:count:timeSinceStart:
initWithTopic:isPrimary:
initWithTopic:keyManager:
initWithTopic:sendMode:
initWithTransparencyStatus:transparencyBlob:
initWithType:
initWithType:context:
initWithType:eventSubType:duration:resultCode:providerType:transportType:interfaceType:skeEnabled:isInitiator:protocolVersion:retryCount:serviceName:subServiceName:participantCount:
initWithURI:andLastSeenDate:
initWithURI:clientData:KTLoggableData:KTDeviceSignature:mismatchedAccountFlag:ktCapableFlag:pushToken:sessionToken:expireDate:refreshDate:anonymizedSenderID:verifiedBusiness:serializedPublicMessageProtectionIdentity:senderCorrelationIdentifier:queryTimeInterval:serializedNGMDeviceIdentity:serializedNGMDevicePrekey:serializedApplicationPublicKey:familyEndpointData:gameCenterData:
initWithURI:expirationDate:selected:
initWithURI:maskedURI:properties:
initWithURI:status:endpoints:ktData:gameCenterData:
initWithUUID:
initWithUUID:publicPreKeyData:wrapMode:creationDate:
initWithUUIDBytes:
initWithUUIDString:
initWithUnprefixedURI:
initWithUsedLastResortCache:usedCachedData:
initWithUser:
initWithUser:alertType:
initWithUser:credential:
initWithUser:expirationPhase:
initWithUser:phoneSignature:certificateSigningRequest:pushToken:
initWithUser:properties:
initWithUserDefaults:
initWithUserName:DSID:
initWithUserStore:
initWithUserStore:accountController:serviceController:migrationTracker:restrictions:queue:
initWithUserStore:accountController:serviceController:migrationTracker:userDefaults:restrictions:ctAdapter:queue:accountBuilder:
initWithUserStore:ctAdapter:
initWithUserStore:delegate:
initWithUserStore:queue:lockdownManager:systemMonitor:CTAdapter:userConfiguration:registrationController:pairingManager:
initWithUsername:DSID:
initWithValidationMessageSendBlock:
initWithVersion:encrypted:shouldEncrypt:protectionClass:streamID:priority:sequenceNumber:data:
initWithVersion:encrypted:streamID:priority:sequenceNumber:fileXfer:data:
initWithVersionNumber:
initWithWPLinkManager:withIdentifier:
initWithWithFullIdentityDataClassA:classC:classD:
initWithZoneName:ownerName:
initWithiCloudID:appleID:handles:devices:
initialLocalSyncCompletedForServices:
initialLocalSyncCompletedForServices:messageContext:
initialLocalSyncStartedForServices:
initialLocalSyncStartedForServices:messageContext:
initialProcessTime
initialServerTime
initialSyncClientIDs
initialSyncInProgress
initialize
initializeKVS
initializeNewCall
initializePluginWithClass:
initializeWithCompletion:
initiateQuickSwitchToDeviceWithCBUUID:force:completionBlock:
injectFakePacket:
injectFakePacketInBTLink:cbuuid:
inputBytesPerSecond
insertDictionary:forKey:
insertObject:atIndex:
installMethods
instanceID
intValue
integerForKey:
integerValue
interalTestingCollaboratorWithCompletion:
interesting
interestingRegistrationProperties
interface
interfaceAddressWithTransmittedBytes:length:withLocalInterfaceName:
interfaceWithProtocol:
intermediateRootCert
internalMetricLogger
internalMigrationVersionOnDatabase
internalOpenSocketWithDestination:localSA:remoteSA:protocol:trafficClass:completionHandler:
internalStartConnectionWithEndpoint:service:parameters:serviceConnector:completionHandler:
internalTestingCollaboratorForXPCDaemon:
internal_fetchEndpointCacheStateForServiceIdentifier:localURI:remoteURI:completion:
internal_fetchTransparentEndpointsForServiceIdentifier:localURI:remoteURI:verifyAgainstTrustCircle:completion:
internal_fetchVerifierKVSTrustedDevicesWithCompletion:
internal_kickVerificationForServiceIdentifier:localURI:remoteURI:completion:
internal_removeAllKVSTrustedDevices:
intersectSet:
intersectsSet:
invalidate
invalidateAllocation:
invalidateKeyMaterialByKeyIndexes:
invalidateLatestResponse:qrReason:previousError:
invalidateSession:isExpiryPurging:
invalidateTimeoutTimer
invalidationHandler
invisibleAliases
invitationDeclined
invitationManager
invitationRetryCount
inviteDictionaryForCallID:remoteInviteDictionary:nonCellularCandidateTimeout:block:queue:
inviteNeedsDelivery
inviteSentTime
inviteTimeout
inviteTimer
inviteTimerCleared
invocationWithMethodSignature:
ipPreference
isAbsintheV4Enabled
isAccountsFrameworkAvailable
isActivated
isActive
isActivityMonitorSupported
isAdHocAccount
isAdvertising
isAllowed:category:
isAllowed:category:isDonated:
isAltAccountPairing
isAlwaysConnected
isAlwaysPairAsTinker
isAnySIMInserted
isAnySIMUsable
isAsleep
isAudioPaused
isAvailable
isBAACertDisabled
isBeingHandedOff
isBeingRemoved
isBlackholed
isBuddyShowing
isBuildingContext
isBuildingContextForSubsystem:
isC2KEquipment
isCDMA
isCarrierInstall
isClassCConnected
isCloudConnected
isCloudEnabled
isCommandExcluded:forService:
isConnected
isConnectedToDeviceID:
isControlChannel
isCountingDown
isCurrentDevicePairedOrPairing
isCurrentDeviceTinkerConfiguredWatch
isDebugPiscoLoggingEnabled
isDefaultPairedDevice
isDefaultPairedDeviceFromID:accountUniqueID:serviceName:
isDefaultPairedDevicePairedLocally
isDefaultPairedDevicePairedRemotely
isDefaultPairedDeviceStartingToEncrypt
isDefaultUser
isDefaultVoiceSIM
isDeviceAccountStateKeyTransparencyEligible
isDeviceAuthenticated
isDeviceBlackedOut
isDeviceDiscovered:
isDeviceInManualPhoneSelectionMode
isDeviceRegistered
isDeviceScoringEnabled
isDevicesIdentifierEqualTo:
isDirectMsgChannel
isDisabled
isDone
isDoneSending
isDroppingMadridMessages
isEnabled
isEnabledAccount:
isEqual:
isEqualToAppleUser:
isEqualToAttributedString:
isEqualToCloudKitKeyTransparencyDeviceRecord:
isEqualToContext:
isEqualToData:
isEqualToDate:
isEqualToDictionary:
isEqualToIgnoringCase:
isEqualToKeyTransparencyEntry:
isEqualToKeyTransparencyIndex:
isEqualToKeyTransparencyVerificationState:
isEqualToNumber:
isEqualToPeerIDValue:
isEqualToPhoneUser:
isEqualToSet:
isEqualToSockAddrWrapperPair:
isEqualToString:
isEqualToTemporaryPhoneUser:
isEqualToURI:
isEqualToUser:
isEqualToUserProperties:
isEqualToWrapper:
isExpired
isFakingEveryUnlockAsFirstUnlock
isFastUserSwitched
isFinalMessage
isFinished
isFirewallEnabled
isFirewallEnabledForService:
isFirewallOn
isFirewallOnForService:
isForced
isForcefulECCEnabled
isForcefulLegacyEnabled
isForcingAttachmentMessage
isForcingOnePerFanout
isGeneratedLocally
isGreenTea
isIDSMessage
isIdentical:
isIdenticalToUser:
isIdle
isInCloudCircleWithError:
isInDebilitatedMode
isInMultiUserMode
isInServerBackoffMode
isInUPlusOneMode
isInitializedForScoring
isInitializedForSigning
isInitiator
isInteractionNotAllowedError:
isInternal
isInternalInstall
isInvalid
isInvalidated
isInvitationService
isIssuingDependentCheck
isItemNotFoundError:
isJoinAllocation
isJunked
isKeyTransparencyAccountKeyCircleDisabled
isKeyTransparencyAccountKeyCircleEnabled
isKeyTransparencyAggressiveVerificationScheduleEnabled
isKeyTransparencyAnalyticsEnabled
isKeyTransparencyCloudKitCircleDisabled
isKeyTransparencyCloudKitCircleEnabled
isKeyTransparencyDisabled
isKeyTransparencyEnabled
isKeyTransparencyEnabledForServiceIdentifier:
isKeyTransparencyEnabledForServiceType:
isKeyTransparencyPeerVerificationAllowedWithoutEnrollment
isKeyTransparencyRTCAnalyticsEnabled
isKeyTransparencySFAnalyticsEnabled
isKeyTransparencyTrustCircleAllowedWithoutEnrollment
isKeyTransparencyTrustCircleEnabled
isKeyTransparencyUIEnabled
isKeyTransparencyXPCActivityEnabled
isKindOfClass:
isLightweightParticipant
isListeningOnActivity:
isLiveDeliveryWarmUpEnabled
isLoaded
isLoading
isLocalSetUpInProgress
isLocalSetupEnabled
isMMLMessage
isMagnetIndicatingPeerIsAwake
isMemberOfClass:
isMessageFromSelfForFromID:service:
isMigratedKeyPairSignature
isMigratedSignature
isMigrationRequiredForKeychainDictionary:
isMissingAnyPublicKeyForPairedDeviceWithCBUUID:
isMultipleAuthCertCapable
isNearby
isNegotiating
isNetworkInitiated
isNewUPlusOneSession
isNull
isOnTelephonyCall
isOptedInForServiceIdentifier:
isPNRNumber:andPhoneBookNumber:differentEnoughFromSIMIdentifier:toReregisterWithNewNumber:
isPNRSupported
isPaired
isPairing
isParentOfCluster:
isParentOfGroup:
isPeerAlwaysConnected
isPeerForPhoneContinuityLocalMessage:
isPendingFetch
isPhoneNumber:equivalentToExistingPhoneNumber:
isPhoneNumberEmergencyNumber:
isPoweredOn
isPrefightEnabledByServerBag
isPresent
isProductionEnvironment
isPublicKeyDistributed
isQueryRetryForBadSignatureEnabled
isReadyForEncrypting
isRealTime
isRegistered
isRegistering:
isRegistrationActive
isReinitiate
isResponse
isRoaming
isSIMReady
isSMSWarningUp
isScanningOrAdvertising
isScoringSupported
isScreenLit
isScreenSharingSession
isSentToClient
isServerAvailable
isServerBackoffModeActive
isSessionNegotiating:
isSessionStoreAvailableForDataProtectionClass:
isSigningSupported
isSubsetOfSet:
isSupported
isSuspended
isTemporary
isTerminusConnected
isTerminusConnectedOverBluetooth
isTerminusNearby
isTerminusRegistered
isTestRunning
isThreadDataSeparated
isTokenURI
isTraditionalDevicePairedOrPairing
isTraditionalLocalSetupEnabled
isUPlusOne
isURIAvailabeInAllocateResponse:uri:
isUnderDataProtectionLock
isUnderFirstDataProtectionLock
isUnderLock
isUpgradePendingError:
isUsableForSending
isUserDisabled
isUsingAbsintheV3
isUsingAbsintheV4
isUsingBAA
isUsingSecureStorageForClassA
isUsingSecureStorageForClassC
isValidSignature:forMessage:forType:error:
isValidationModeLegacy
isValidationModeShortCircuitingPreflight
isValidationModeUsingPreflight
isVideoPaused
isWebTunnelMessage
isWiFiUsable
isWithDefaultPairedDevice
isWritePushPayloadsToDiskEnabled
isiCloudHSA2
isiCloudSignedIn
isiTunesSignedIn
issueDependentIDQueriesWithCompletionBlock:
issueGetDependentAndGetHandlesRequest
issueGetDependentRequest
issueGetDependentRequestForAccount:
ivarQueue
joinCycleForToken:
joinGroupSession:withOptions:
joinGroupSession:withOptions:messageContext:
joinType
joinWithOptions:
kernelTestEventWithTimestamp:kernelTime:bytes:
keyDiversifier
keyElectionStore
keyForToken:uri:service:
keyIndex
keyIndexAsString:
keyManager
keyMaterial
keyMaterialCacheToGroup:
keyMaterialLength
keyPairSignature
keyRollingTicketWithError:
keyTransparencyAccountKeyFetchMetricDeviceID
keyTransparencyCKContainerExpiryOverride
keyTransparencyCKContainerExpiryTime
keyTransparencyCollaboratorForXPCDaemon:
keyTransparencyCollaboratorWithCompletion:
keyTransparencyContext
keyTransparencyEnrolledURIs
keyTransparencyFirstGossipChance
keyTransparencyMaximumVerificationsPerXPCActivity
keyTransparencyStore
keyTransparencySubsequentGossipChance
keyTransparencyVerifier
keyTransparencyVersionNumberForServiceType:
keyTransparencyVersionNumberToRegisterForServiceType:
keyTransparencyXPCActivityIntervalInSeconds
keyValueDelivery
keyValueDeliveryForSessionID:completionHandler:
keychain
keychainAccessGroupForVersion:
keychainAccountForVersion:
keychainCache
keychainDictionaryWithPairedDevices:
keychainElectionStore
keychainServiceForVersion:
kickAnyUnfinishedSynchronization
kickGetDependentForAccount:
kickGetDependentForAccount:messageContext:
kickMissedTemporaryAlerts
kickProgressBlock
kickProgressBlockForMessageID:
kickRepair
kickRepairForAllRegistrationsSucceeded:
kickVerificationForServiceIdentifier:localURI:remoteURI:completion:
kickiCloudRepair
ktCapable
ktCapableFlag
ktDataForRegistration
ktLoggableData
ktPublicAccountKey
ktRegDataByServiceType
ktRegistrationDataIndex
ktRegistrationDataManager
ktVerifier
ktVersion
language
largestEnquedMessagesAccountUUIDOverThreshold:
largestEnquedMessagesAmountAccountUUID
largestPayloadSizeAccountUUID
lastBagRepairInterval
lastCall
lastCloudConnectedTime
lastConnection
lastCourierAck
lastDestinationReceived
lastDestinationSent
lastDisconnection
lastGDRDate
lastObject
lastPacketTime
lastPathComponent
lastPrKey
lastReceivedMessageTimeForTopic:
lastRegistrationFailureDate
lastRegistrationFailureError
lastRegistrationSuccessDate
lastSeen
lastSelfVerifyDate
lastSendSMSTimer
lastSentAck
lastSentSeq
lastSocketActivityTime
lastStartTime
lastSuccessfulSentTime
lastSuccessfulUpsertDeviceRecord
latestCachedGroupWithStableID:completion:
latestLinkType
latestMessageProtectionFullIdentityForDataProtectionClass:
launchDarwinNotification
launchMachServiceNotification
launchOnDemandServicesForQueuedBroadcastAttempts
launchSim2HostServer
launchWithRequest:context:
leaveGroupSession:options:
leaveGroupSession:participantInfo:options:
leaveGroupSession:participantInfo:options:messageContext:
legacyFullIdentity
legacyPreferencesDomain
legacyPublicIdentity
legacyPublicKeyEncryptData:withEncryptedAttributes:toEndpoint:priority:error:
legacyStorageItemNameForContainerIdentityIdentifier:
legacyUTunBTLinkManagerDefaultPeerCloudConnectivityChanged:
legacyUTunBTLinkManagerDefaultPeerConnectivityChanged:
legacyUTunBTLinkManagerDefaultPeerNearbyChanged:
legacyVersion
length
lengthOfBytesUsingEncoding:
limitDataInDictionary:forService:
link:didAddQREvent:
link:didCellularMTUChange:
link:didCellularNWPathFlagsChanged:
link:didConnectForDeviceUniqueID:cbuuid:
link:didConnectOverCloud:cbuuid:
link:didConnectUnderlyingLink:linkUUID:localAttributes:remoteAttributes:
link:didDefaultUnderlyingLinkChangeSucceeded:currentDefaultLinkID:
link:didDisconnectForDeviceUniqueID:cbuuid:
link:didDisconnectOverCloud:cbuuid:
link:didDisconnectUnderlyingLinkID:linkUUID:reason:
link:didFailToConnectOverCloud:cbuuid:
link:didGetLinkProbingStatus:
link:didMitigateCollision:
link:didRATChange:
link:didReceiveDebugDataForClient:dataType:
link:didReceiveEncryptedDataBlobs:
link:didReceiveEncryptionInformation:
link:didReceiveErrorIndicationWithCode:
link:didReceiveKeyMaterialMessageData:fromParticipantIDs:toParticipantID:
link:didReceiveMappedParticipantsDict:forLinkID:
link:didReceiveMaterialInfo:material:
link:didReceiveMembershipChangedInformation:
link:didReceivePacket:fromDeviceUniqueID:cbuuid:
link:didReceiveParticipantUpdate:status:
link:didReceivePluginDisconnect:
link:didReceivePluginRegistration:pluginName:
link:didReceivePluginUnregistration:pluginName:
link:didReceiveReportEvent:
link:didReceiveRequestToPurgeRegistration:
link:didReceiveSKEData:
link:didReceiveSessionInfo:relayGroupID:relaySessionID:status:
link:didReceiveSessionStateCounter:
link:didReceiveSessionStats:relayGroupID:relaySessionID:success:
link:didReiceiveChildConnectionID:forLinkID:
link:didSoMaskChange:
link:hasSpaceAvailable:deviceUniqueID:cbuuid:
link:hostAwakeDidChange:deviceUniqueID:cbuuid:
linkForCBUUID:
linkID
linkLayerConnected
linkLayerDisconnectTime
linkManager
linkQualityForInterfaceType:
linkScore
linkSuggestion
linkTransactionIDMismatchDetected:
linkType
linkTypeString
linkedAccounts
linkedServiceNames
linkedServicesForService:
listener
listener:shouldAcceptNewConnection:
listenerForLocalObject:
listenerID
listenerWithName:
listeners
listenersByActivity
listening
listeningOnActivities
liveMessageDelivery
liveMigration
loadAliasUserIntentMetadataIfNeeded
loadAndCheckStatus
loadDeviceProperties
loadIdentitiesWithSerializationDidChange:deserializationDidFail:identityGenerated:
loadIdentityContainerWithIdentifier:withLegacyFallback:serializationDidChange:deserializationDidFail:needsEncryptionIdentityRoll:nonLegacyError:error:
loadIsIdentityRegisteredForApplicationKeyIndex:error:
loadKTRegistrationDataForKeyIndex:isRegistered:error:
loadKTRegistrationDatasWithShouldGenerateKTData:
loadLegacyIdentityWithIdentifier:serializationDidChange:error:
loadNumberOfPreflightAttempts
loadNumberOfSuccessfulValidationSends
loadPairedDevices
loadPairedDevicesFromStorage
loadPairingIdentities:
loadServiceDictionaries
loadStoreForDataProtectionClass:
loadStoredAccounts
loadWithCompletion:
loadingRateLimiter
localAccountOnService:
localAccountSetupCompleted
localAddress
localBlob
localCID
localCallInfoData
localCell
localConnectionGUID
localConnectionType
localContext
localDelivery
localDeliveryQueue
localDestinationDeviceUUID
localDevice
localDeviceRecord
localDidJoin
localFullIdentity
localICEData
localIdentitiesFromIdentities:
localKeyMaterial
localMasterKeyCollectionToBroadcastForDestinationURI:
localMaterials
localMessageState
localNATIP
localNATType
localObject
localObjectDiedNotification:
localPairingResponseForRequestID:withError:
localPairingResponseForRequestID:withError:pairedDevices:
localParticipantIDForGroupID:
localPartyID
localPhoneAuthenticationCertificates
localSKEData
localSetUpCompleted
localSetUpStarted
localSetupCompleted
localSetupInProgress
localSetupStarted
localSetupUnpair
localSetupUnpairStart
localURI
localUnauthenticatedFullIdentity
localizedCaseInsensitiveCompare:
localizedCaseInsensitiveContainsString:
localizedStringWithFormat:
lock
lockContinuityPeer:btUUID:
lockedContinuityPeerID:
logAccessWarningForAccount:withService:entitlement:clientEntitlements:logMessage:
logAccessWarningForClientAtIndex:withService:entitlement:logMessage:
logCurrentTransportStatsAndResetTimers
logEncryptionErrorForToken:deviceID:forURI:fromURI:forService:messageData:type:
logEncryptionErrorForToken:deviceID:forURI:fromURI:forService:messageData:type:encrypt:remote:priority:
logFailureInfo
logHardFailureForEventNamed:withAttributes:
logMetric:
logMetric:withName:
logRemoteDecryptionErrorForToken:deviceID:forURI:fromURI:forService:messageData:type:
logResultForEvent:hardFailure:result:
logSoftFailureForEventNamed:withAttributes:
logState
logToRegistration
loggableData
loggableDatas
loggableOverviewForKey:
loggableOverviewForTopic:
logger
loggerWithCategory:
loggingSequenceIncoming
loggingSequenceOutgoing
longLongValue
longValue
lowRAMDevice
mainID
makeObjectsPerformSelector:
manageDesignatedDestinations:relayGroupID:relaySessionID:withType:sessionStateCounter:
manageDesignatedDestinationsWithSessionID:relayGroupID:relaySessionID:destinations:withType:sessionStateCounter:
manageDesignatedMembers:forGroup:sessionID:withType:
manageDesignatedMembers:forGroup:sessionID:withType:messageContext:
manageDesignatedMembers:withType:
manager:cbuuidDidConnect:isAlwaysConnected:
manager:cbuuidDidDisconnect:
manager:cbuuidDidDiscover:
manager:cbuuidDidFailToConnect:withReason:
manager:didPairedDeviceChange:
manager:didPowerStateChange:
manager:linkDidConnect:
manager:linkDidDisconnect:
manateeRetries
manateeRetryCount
manualQueueRemoval
mapArray:onQueue:withBlock:completion:onQueue:
mapArray:withBlock:completion:onQueue:
mapDictionary:onQueue:withBlock:completion:onQueue:
mapDictionary:withBlock:completion:onQueue:
mapMKI:toPushToken:
mapMKIFromMaterial:token:
mappedStreamID
markAllOutgoingMessagesAsUnsentForLocalDestination:
markAsSelectedAlias:
markAsUnselectedAlias:withReason:
markAsUnvettedAlias:
markAsVettedAlias:
markAsWasSelectedAlias:
markGossipForURI:
markInvalid
markLocalDestinationDeviceUUIDForAccounts:deviceUUID:
markOutgoingMessageWithGUID:asSent:
markOutgoingMessagesAsUnsentForDestination:
markOutgoingMessagesAsUnsentIncludingClassD:
markSelfVerifyBecauseOfPeer
marketingNameForModel:
maskedURI
masterKeyIdentifiersReceivedByClient
masterKeyMaterialForGroup:
masterKeyMaterials
matchesIMSI:PLMN:
matchingContactsForURI:
materialDataByID
materialInfoError:
materialType
maxAllowableNumberOfPreflightRequests
maxAllowableNumberOfSuccessfullySentVerifications
maxAllowableNumberOfValidationAttemptsWhileNoneHaveSentSuccessfully
maxAllowedMessageSize
maxCompatibilityVersion
maxConcurrentStreams
maxLargeMessageSize
maxMessageSize
maxQueueSize
maxRecipientMemory
maxRecipientMemoryFromBag
maxRemoteMessagingPayloadSize
maxTimeoutRetries
mechanism
membershipChange
membershipURIs
mergeFrom:
mergeKeychainCacheDataIntoDictionary:forService:
mergeKeychainCacheIntoDictionary:
mergePolicy
messageBody
messageBodyUsingCache
messageCount
messageDeliveredForService:isToDefaultPairedDevice:messageSize:linkType:deliveryError:RTT:priority:
messageDeliveryFactory
messageHashChecker
messageHashStore
messageID
messageIdentifier:alternateCallbackID:forAccount:updatedWithResponseCode:error:lastCall:context:
messageIdentifier:forTopic:toIdentifier:fromIdentifier:hasBeenDeliveredWithContext:
messageMetadataWithEndpoint:ECSuccess:legacySuccess:ECError:legacyError:
messageReceived:withGUID:withPayload:forTopic:toIdentifier:fromID:context:
messageReceivedForService:isFromDefaultPairedDevice:messageSize:linkType:priority:
messageSentForService:isToDefaultPairedDevice:messageSize:linkType:priority:
messageSequenceNumber
messageServerTimestamp
messageState
messageStoreForDataProtectionClass:
messageStoreMigrator
messageStores
messageToSend
messageType
messageUUID
messageWithData:
messageWithHeaderData:data:
messages
messagesGroupContext
messenger
metadata
metadataBlob
metadataSize
metricCollectors
metricReportIdentifier
metricsCollector
midSynchronize
migrateClassA
migrateClassC
migrateClassD
migrateKeychainDictionary:
migrated
migrationBlock
migrationContext
migrationDefaultKey
migrationPromise
migrationTracker
minCompatibilityVersion
minimumIntervalBetweenValidationAttempts
minusSet:
minute
mismatchedAccountFlag
missingPrekey
mmlsFromAggregates:service:sendMode:guid:
mobileCountryCode
mobileNetworkCode
model
modernIdentity
modernIncomingFilePath
moveItemAtPath:toPath:error:
multiQueue
multiwaySupported
mutableBytes
mutableCopy
muted
name
nameForContactMatchingURI:
nanoRegistryPluginManager
needsMigration
needsProvisioning
needsPublicDataUpdatedForKeyIndex:
needsPublicDataUpdatedForKeyIndex:ktRegistrationKeyIndex:
needsRenewal
needsToCheckPhoneNumberState
negotiationCount
networkChangeNotifier
networkCheckOverrideBehavior
networkCode
networkPlmn
networkStateChangedForLogTransportHint:
networkingIsAvailable:
newDetectorWithName:stallDetectedBlock:stallWarningBlock:
newDeviceIdentifierWithBluetoothUUID:
newPg
newRemoteCredential
newSendMessageContext
newSocketWithIPVersion:wantsAWDL:wantsWiFi:wantsCellular:
nextAvailableLocalCID
nextByte
nextComponent
nextLocalMasterKeyMaterial
nextMessage
nextRegistrationDate
nextSocketPairMessageNotOnServices:
ngmFullDeviceIdentity
ngmPublicDeviceIdentity
ngmPublicIdentity
ngmVersion
ngmVersionFromDataRepresentation:
nonBluetoothAvailableForBundleId:
nonCloudWaking
nonRetainingArray
nonStandardMessageHeadersForOutgoingPush
nonWaking
nonWifiFaceTimeAvailable
normalizedURIStrings
noteBlockedMessageFromId:service:
noteClientReceiptOfMasterKeyIdentifier:
noteClientReceiptOfStableKeyIdentifier:
noteIncomingID:fromService:
noteIncomingLocalMessageForService:
noteIncomingMessageForService:
noteItem:
noteKeyGenerationForMetric
noteMessageReceivedForService:accountType:fromStorage:serverTimestamp:localTimeDelta:
noteOutgoingFallbackMessageForService:serviceType:requestor:
noteOutgoingMessageForService:serviceType:requestor:
noteOutgoingServerMessageForService:serviceType:requestor:
notePeerToken:forURI:fromURI:service:
notePhoneNumberRegistrationReset
notePublicIdentityDidRegisterKTData:forKeyIndex:
notePublicIdentityDidRegisterKeyData:forKeyIndex:
notePublicIdentityDidRegisterLegacyData:ngmIdentityData:ngmPrekeyData:keyIndexToIdentityData:keyIndexToKTRegData:
noteQueryForService:requestor:
noteQueryRequestForService:requestor:
noteReceivedGroupMasterKeyMaterialCollection:
noteReceivedGroupMasterKeyMaterials:URIs:sessionID:
noteRegistrationStateChanged
noteResponseForToken:
noteServerStorageStateMachineEndedFor:linkType:wasPrimary:timeTaken:numberProcessed:
noteShouldFetchRemoteAccountInfoForAllServices
noteShouldSynchronizeAllServices
noteShouldSynchronizePreferredAccount
noteShouldSynchronizeTinkerDeviceInfo
noteSuccessfulKVSSyncOfTrustedDevices:
notificationCenter
notificationCenterDidDisappear
notificationCenterWillAppear
notificationDelayInSeconds
notifyClients:
notifyJoinToGroup:members:params:fromAccount:fromID:sessionID:isUPlusOne:completionBlock:
notifyJoinToSpecificMembersOfGroup:members:params:fromAccount:fromID:sessionID:isUPlusOne:requiredCapabilites:requiredLackOfCapabilities:
notifyLeaveToGroup:members:params:fromAccount:fromID:sessionID:isUPlusOne:
notifyLeaveToSpecificMembersOfGroup:members:params:fromAccount:fromID:sessionID:isUPlusOne:requiredCapabilites:requiredLackOfCapabilities:
notifyListenersEngramKeyStoreDidUpdateIdentities
notifyStableKeyMaterialsReceivedForGroup:sessionID:
notifyWatchDidStartAdvertisingWithPeripheralManager:
notifyWatchDidStopAdvertisingWithPeripheralManager:
notifyWatchToStartAdvertising
notifyWatchToStopAdvertising
nrDeviceBridge:defaultPeerClassCConnectivityDidChange:
nrDeviceBridge:defaultPeerCloudConnectivityDidChange:
nrDeviceBridge:defaultPeerConnectivityDidChange:
nrDeviceBridge:defaultPeerNearbyDidChange:
nrDeviceBridge:deviceMagnetIndicationOfAwakeStateDidChange:
nrDeviceBridge:linkType:
nrDeviceIdentifier
nrDevicePreferences
nrDevicePreferencesHandler
nrMonitorQueue
nukeKeyTransparencyDeviceRecordsWithCompletion:
nukeKeyTransparencyStateWithCompletion:
nukeTransparencyStateWithCompletion:
null
numberFromString:
numberOfAttemptsWithoutSuccessfulSend
numberOfBroadcastCacheMKM
numberOfPreflights
numberOfSuccessfulSends
numberWithDouble:
numberWithInt:
numberWithInteger:
numberWithLongLong:
numberWithShort:
numberWithUnsignedChar:
numberWithUnsignedInt:
numberWithUnsignedInteger:
numberWithUnsignedLong:
numberWithUnsignedLongLong:
numberWithUnsignedShort:
nwConnection
object
objectAtIndex:
objectAtIndexedSubscript:
objectForKey:
objectForKey:inDomain:
objectForKeyedSubscript:
obliterateConnectionInfo
obliterateConnectionInfoForCBUUID:
obliterateConnectionInfoForCBUUID:completionBlock:completionQueue:
obliterateConnectionInfoWithCompletionBlock:completionQueue:
observeValueForKeyPath:ofObject:change:context:
observer
onParticipantID2PushTokenMappingChange:
onTransportThread_CurrentCellularSignalStrength:signalRaw:signalStrength:signalGrade:
onTransportThread_DropIPPackets:linkID:payloadArray:
onTransportThread_PerServiceDataTransferredForDevice:services:
onTransportThread_SendKeyMaterialMessage:relayGroupID:keyMaterialMessageData:destinationURIs:completionHandler:
onTransportThread_SendSKEData:skeData:completionHandler:
onTransportThread_SendToGlobalLinkWithSessionID:packetBuffer:
onTransportThread_SendToGlobalLinkWithSessionID:packetBufferArray:arraySize:
onTransportThread_SendWithConnectionContext:packetBuffer:
onTransportThread_SetDefaultUnderlyingLink:linkID:
onTransportThread_SetPacketNotificationFilter:linkID:uniqueTag:isEnabled:
onTransportThread_StopBTDatagramLinkForDefaultPairedDevice
onTransportThread_StopKeepAlive:linkIDs:
onTransportThread_createAliasForParticipantID:salt:sessionID:relayGroupID:relaySessionID:
onTransportThread_flushLinkProbingStatus:options:
onTransportThread_getLinkType:
onTransportThread_getSessionInfo:relayGroupID:relaySessionID:options:
onTransportThread_manageDesignatedDestinationsWithSessionID:relayGroupID:relaySessionID:destinations:withType:sessionStateCounter:
onTransportThread_participantIDForAlias:salt:sessionID:relayGroupID:relaySessionID:
onTransportThread_queryLinkProbingStatus:options:
onTransportThread_receiveJoinNotificationFromAParticipant:
onTransportThread_registerPluginForGroup:relayGroupID:relaySessionID:options:
onTransportThread_removeParticipantIDsWithSessionID:relayGroupID:relaySessionID:participantIDs:sessionStateCounter:
onTransportThread_requestChildConnectionIDForLinkID:sessionID:relayGroupID:relaySessionID:
onTransportThread_requestMaterialsForSession:participantIDs:materialType:
onTransportThread_sendConnectedLinkInfoToAVCForSessionID:
onTransportThread_sendStatsRequestWithOptions:options:
onTransportThread_setClientUniquePID:sessionID:relayGroupID:relaySessionID:
onTransportThread_setRemoteDeviceVersion:version:
onTransportThread_setServerDesiredMaterialsForSession:materials:signer:
onTransportThread_setUPlusOneModeForSessionID:isUPlusOneEnabled:
onTransportThread_setWiFiAssistState:isWiFiAssistEnabled:
onTransportThread_startLinkProbing:options:
onTransportThread_stopLinkProbing:options:
onTransportThread_updateParticipantType:forSessionID:relayGroupID:relaySessionID:sessionStateCounter:
onTransportThread_updateSessionParticipants:relayGroupID:relaySessionID:participants:
onTransportThread_updateSessionURIToParticipantIDs:relayGroupID:relaySessionID:sessionInfo:
onURI2ParticipantIDMappingChange:allocateResponse:
oneToOneECCQuicktestEncryptionWithData:completion:
onlyAllowReads
openSocketCompletionHandler
openSocketToDevice:
openSocketWithOptions:
openSocketWithOptions:messageContext:
openSocketWithOptions:queue:completionHandler:
openedSocket:forHandlerID:error:
operation
opportunistic
opportunisticCache
opportunisticCollaboratorForXPCDaemon:
opportunisticCollaboratorWithCompletion:
opportunisticDataReceived:withIdentifier:fromID:context:
opportunisticQueue
optInEligibleKTApplicationToIDSServiceIdentifier
originalGUID
originalTimestamp
originalbtUUID
originalfromID
osChannelInfoLog
osVersion
otrTestBlock
outOfBandKey
outgoingEncryptionTableBySSRC
outgoingEventWithTimestamp:duration:processTime:compressionTime:sendTime:bytes:
outgoingMessagesWithEnqueueDateOlderThan:notToDestinationDeviceID:andLimit:
outgoingStallDetector
outgoingStallDetectorName
output
outputBytesPerSecond
overrideSendOnePerTokenForService:
ownerParticipantId
packetBuffer
packetBufferHandler
packetsPerSecond
packetsSent
pairWithFirst:second:
pairedDevice
pairedDeviceBuildVersion
pairedDeviceCBUUIDString
pairedDeviceForUniqueID:
pairedDeviceHandlesWithPairingType:
pairedDeviceManagerCollaboratorForXPCDaemon:
pairedDeviceManagerCollaboratorWithCompletion:
pairedDeviceMaxCompatibilityVersion
pairedDeviceMinCompatibilityVersion
pairedDevicePairingProtocolVersion
pairedDevicePairingType
pairedDevicePrivateData
pairedDeviceProductName
pairedDeviceProductVersion
pairedDevicePublicClassAKey
pairedDevicePublicClassCKey
pairedDevicePublicKey
pairedDevicePushToken
pairedDeviceRecords
pairedDeviceRepo
pairedDeviceRepository
pairedDeviceServiceMinCompatibilityVersion
pairedDeviceUUIDString
pairedDeviceUniqueID
pairedDeviceWithCBUUID:
pairedDeviceWithoutSecuredEncryptionKeys
pairedDeviceiCloudURIs
pairedDevicesInfo:
pairedDevicesWithIsPairingValue:
pairingCollaborator
pairingCollaboratorForXPCDaemon:
pairingCollaboratorWithCompletion:
pairingManager
pairingProtocolDebug
pairingProtocolVersion
pairingToken
pairingType
parentPg
parentVersion
participantID
participantIDForAlias:salt:
participantIDForAlias:salt:relayGroupID:relaySessionID:
participantIDForAlias:salt:sessionID:relayGroupID:relaySessionID:
participantIDToAliasConverter
participantIDs
participantIDsForURIs:group:
participantIdentifier
participantInfoByURIForGroup:
participantMirageHandshakeBlob
participantPushToken
participantURI
participantUpdatedForSession:
participants
participantsByAlias:
participantsForCypher:completion:
participantsForGroupID:
participantsForSessionID:
participantsFromEndpoints:
passThroughMessagesFromStorage
passwordChanged:forAccount:
passwordChanged:forAccount:messageContext:
passwordUpdatedForAccount:
passwordUpdatedForAccount:messageContext:
pathWithComponents:
peer
peer:dataReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:didWakeHint:
peer:messageReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:didWakeHint:
peer:protobufReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:didWakeHint:
peer:receivedAppLevelAckWithTopic:fromID:messageID:peerResponseIdentifier:priority:connectionType:
peerCN
peerCloudConnectivityChanged:
peerCloudConnectivityChanged:isCloudConnected:
peerConnectivityChanged:
peerHasSpaceForNonUrgentMessages:priority:dataProtectionClass:
peerHasSpaceForNonUrgentMessages:priority:dataProtectionClass:withTypes:
peerHasSpaceForUrgentMessages:dataProtectionClass:withTypes:
peerIDKeyWithService:fromURI:toURI:
peerIDManager
peerIDManagerToken
peerIDValueWithEndpoints:keyTransparencyContext:
peerNearbyStateChanged:forceNotify:
peerProtocolVersion
peerResponseIdentifier
pendingCloudEnable
pendingContinuityPeerID:
pendingDependentCheck
pendingIncomingMessageWithGUID:forTopic:toIdentifier:fromID:context:
pendingResponseTokens
perServiceDataReceivedForDevice:services:
perServiceDataSentForDevice:services:
perServiceDataTransferredForDevice:services:
performAsyncBlock:
performAsyncBlock:priority:
performBlock:
performBlock:afterDelay:
performBlock:priority:dataProtectionClass:
performBlock:waitUntilDone:
performBlock:withImplicitPriority:
performBlockDefaultPriority:
performBlockForAllConnections:
performBlockForDirectConnections:
performBlockMainQueue:
performBlockMainQueue:afterTimeMSec:
performBlockSYNCHRONOUSLYWithPriority:priority:
performBlockSyncPriority:
performBlockSynchronouslyForAllConnections:
performBlockUrgentPriority:
performBlockWithPriority:priority:
performBlocksOnLinkConnect
performCleanUpWithCompletion:
performMigrationIfNeeded
performOTRSessionBlock:token:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
performSyncBlock:
performSyncBlock:priority:
peripheral:didDiscoverCharacteristicsForService:error:
peripheral:didDiscoverDescriptorsForCharacteristic:error:
peripheral:didDiscoverIncludedServicesForService:error:
peripheral:didModifyServices:
peripheral:didOpenL2CAPChannel:error:
peripheral:didReadRSSI:error:
peripheral:didUpdateNotificationStateForCharacteristic:error:
peripheral:didUpdateValueForCharacteristic:error:
peripheral:didUpdateValueForDescriptor:error:
peripheral:didWriteValueForCharacteristic:error:
peripheral:didWriteValueForDescriptor:error:
peripheralDidUpdateName:
peripheralDidUpdateRSSI:error:
peripheralIsReadyToSendWriteWithoutResponse:
peripheralManager:central:didSubscribeToCharacteristic:
peripheralManager:central:didUnsubscribeFromCharacteristic:
peripheralManager:didAddService:error:
peripheralManager:didOpenL2CAPChannel:error:
peripheralManager:didPublishL2CAPChannel:error:
peripheralManager:didReceiveReadRequest:
peripheralManager:didReceiveWriteRequests:
peripheralManager:didUnpublishL2CAPChannel:error:
peripheralManager:willRestoreState:
peripheralManagerDidStartAdvertising:error:
peripheralManagerDidUpdateState:
peripheralManagerIsReadyToUpdateSubscribers:
peripheralManagers
persistData:forKey:error:
persistImmediately
persistNumberOfPreflightAttempts:
persistNumberOfSuccessfulValidationSends:
persistPendingInvitation:forService:withUniqueID:
persistPendingInvitation:forService:withUniqueID:messageContext:
persistReceivedInvitation:forService:withUniqueID:
persistReceivedInvitation:forService:withUniqueID:messageContext:
persistUsersImmediately
persistedPendingInvitationsForService:
persistedProperties
persistedReceivedInvitationsForService:
persistentEnrollmentHandler
persistentMap
persister
personalCBUUIDString
phaseForExpirationDate:
phoneAuthenticationCertificate
phoneAuthenticationCertificatePrivateKey
phoneAuthenticationCertificatePublicKey
phoneAuthenticationCertificateSigningRequestForUser:
phoneNumber
phoneNumberValidationMode
phoneNumberValidationPreflightTestData
phoneNumberValidationStartDate
phoneNumberValidator
phoneNumberWithStringValue:
phoneNumbers
phoneRepair
phoneRepairTimer
phoneSignature
phoneSubscriptionWithLabelID:
phoneSubscriptionWithSIM:
phoneToken
phoneUser
phoneUserWithUpdatedDefaultUser:countryCode:networkCode:
phoneUserWithUpdatedPhoneNumber:
phoneUserWithUpdatedPhoneNumber:phoneBookNumber:
pipelineFromComponents:
plistCachePath
plugin
pluginImplementsWatchDidStartAdvertising
pluginImplementsWatchDidStopAdvertising
pnrReason
pointerValue
policy
policyTrafficClassifiers
populateMergeIDForEntries:withCompletion:
popupPromptWithTitle:message:defaultButton:defaultUrl:alternateButton:alternatrUrl:completion:
port
portString
postAccountUserNotificationWith:completion:
postNewDeviceNotification:iCloudSignIn:iMessageSignIn:facetimeSignIn:forAppleID:
postNotificationForURI:onService:shouldRateLimit:command:
postNotificationName:object:userInfo:
predicateForContactsMatchingEmailAddress:
predicateForContactsMatchingPhoneNumber:
predicateForURI:
predicateWithBlock:
predicateWithValue:
preferences
preferencesDomain
preferencesForService:
preferredAccountChanged:
prefixedURI
preflighStackStore
preflightShortCircuitMechanismOverride
preflightStackByPoppingMechanism
preflightStackForIdentifier:
preflightStackStore
preflightTestDataOverride
prekeyData
prepareDefaultPairedConnectionInfoWithDeviceUniqueID:shouldUseIPsecLink:
prepareForQuickSwitch
prependItem:
presentSuccessAlertForUser:
previousAccessToken
previousFullDeviceIdentityContainer
previousFullMessageProtectionIdentity
previousIdentityForDevice
previousLocalStableKeyMaterial
previousRegisteredIdentityContainer
primaryAccount
primaryAccountForAdHocAccount:
primaryAccountUniqueID
primaryRegistration
primaryRegistrationDSHandle
primaryRegistrationURIs
primaryServiceForAdhocServiceType:
primaryServiceName
principalClass
printCurrent
printInfo
prioritizeMemoryPolicy
prioritizedTokenList
prioritizedTokens
priority
priorityQueue
privateCloudDatabase
privateData
privateDeviceData
privateKey
processAllocationErrorStatus:errorCode:
processAvailableNotificationsTask
processCompressionRequest:fromDeviceConnectionInfo:
processCompressionResponse:fromDeviceConnectionInfo:
processDirectMessagingCapability:
processDirectMessagingInfo:
processFairplayDeviceInfo:
processFairplayDeviceSessionInfo:
processIncomingGroupSessionMessage:fromToken:fromID:toID:topic:idsMessageContext:
processIncomingInvitationWithPayload:topic:fromToken:fromID:toID:idsMessageContext:messageContext:
processIncomingKeyMaterialsRecoveryRequest:fromDevice:fromID:groupID:sessionID:serverDate:requireMKM:requireSKM:
processIncomingParticipantDataUpdateMessage:fromToken:fromID:toID:topic:idsMessageContext:
processIncomingParticipantUpdateMessage:fromToken:fromID:toID:topic:idsMessageContext:
processIncomingPrekeyAckForGroup:
processIncomingSessionAcceptMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionCancelMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionDeclineMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionEndMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionReinitiateMessage:fromToken:fromID:idsMessageContext:
processInfo
processName
processNegotiationData:deviceUniqueID:token:negotiationCount:
processOTRNegotiationMessage:
processRemoteConnectionData:completionHandler:
processRemoteConnectionDataForDevice:remoteConnectionData:completionHandler:
processStoredIncomingMessage:
processSuspendOTRNegotiationMessage:
processUsageNotificationsTask
processedDictionaryForDisk:andMemory:
processedQRMKMPayloadFromData:forGroupID:account:remoteURI:localURI:tokens:completionHandler:
produceBytes:
productBuildVersion
productName
productOSVersion
productVersion
productionMetricLogger
profileID
progressBlock
progressBlockForSendParameters:messageContext:topic:forObject:
promptMessage
promptTitle
properties
propertiesForDeviceWithUniqueID:
propertiesForUser:
propertyListWithData:options:format:error:
propsByupdatingDisableRegistration:
protectedHashOfMessageData:error:
protobuf
protocol
provider
provisionPseudonymFor:withURI:properties:requestProperties:completionBlock:
provisionPseudonymForURI:onAccount:withProperties:requestProperties:requestUUID:
provisionPseudonymForURI:onAccount:withProperties:requestProperties:requestUUID:messageContext:
provisionPseudonymForURI:properties:requestProperties:completionBlock:
pseudonymAlias
pseudonyms
publicAccountClusterWithError:
publicDataRepresentationForGroup:completion:
publicDataRepresentationForGroup:inContext:completion:
publicDataRepresentationWithError:
publicDataRepresentationWithSponsor:error:
publicDeviceIdentity
publicDeviceIdentityContainer
publicDeviceIdentityContainerForDeviceID:
publicDeviceIdentityWithError:
publicIdentifier
publicIdentity
publicIdentityCache
publicIdentityData
publicIdentityDataFromLocalFullIdentity
publicIdentityFromData:
publicIdentityWithError:
publicKey
publicKeyBatchSignDatas:withSignatureType:keyType:keyDiversifier:service:priority:error:
publicKeyBatchSignDatas:withSignatureType:service:priority:error:
publicKeyData
publicKeyDecryptData:fromEndpoint:pkType:priority:error:
publicKeyDecryptData:fromEndpoint:pkType:priority:replayKey:completionBlock:
publicKeyDecryptData:fromURI:identity:toURI:pushToken:service:priority:isRetry:replayKey:publicKeyType:completionBlock:avoidMainQueue:
publicKeyDecryptData:toDeviceID:priority:publicKeyType:completionBlock:
publicKeyDecryptData:toDeviceID:publicKeyType:priority:error:
publicKeyEncryptData:withEncryptedAttributes:fromURI:identity:toURI:pushToken:service:priority:completionBlock:forceLegacy:avoidMainQueue:
publicKeyEncryptData:withEncryptedAttributes:toDeviceID:priority:publicKeyType:completionBlock:
publicKeyEncryptData:withEncryptedAttributes:toDeviceID:publicKeyType:priority:error:
publicKeyEncryptData:withEncryptedAttributes:toEndpoint:usedEncryptionType:priority:error:
publicKeyForDeviceID:
publicKeyForURI:pushToken:fromURI:service:
publicKeySignData:withSignatureType:keyType:keyDiversifier:service:priority:error:
publicKeySignData:withSignatureType:service:priority:error:
publicKeyStorage
publicKeyVerifySignedData:matchesData:forSignatureType:endpoint:priority:error:
publicKeyVerifySignedData:matchesData:forSignatureType:endpoint:withKeyType:keyDiversifier:priority:error:
publicKeyVerifySignedData:matchesData:forSignatureType:identity:forURI:pushToken:service:localURI:priority:completion:avoidMainQueue:
publicKeyVerifySignedData:matchesData:forSignatureType:identity:toURI:pushToken:service:localURI:withKeyType:keyDiversifier:priority:completion:avoidMainQueue:
publicKeys
publicLegacyIdentityData
publicMessageProtectionData
publicMessageProtectionDataToRegisterForClassA
publicMessageProtectionDataToRegisterForClassC
publicMessageProtectionDataToRegisterForClassD
publicMessageProtectionDeviceIdentityContainerToRegister:
publicMessageProtectionIdentityDataToRegisterWithError:
publicNGMIdentityData
publicNGMPrekeyData
publicName
publicPreKeyData
publicServiceIdentityAdminWithError:
publishGroupForKey:data:signature:forwardingSig:ENID:version:completion:
publishedStreams
purgeCachedCertsForSubsystemMechanism:
purgeClientDataBlocks
purgeData
purgeFromKeychain:
purgeMessageProtectionIdentity
purgeOldKeyMaterial
purgeQUICConnectionsForParticipants:
purgeSecuredEncryptionKeysForAllPairedDevices
pushAckTimestamp
pushHandler
pushHandlerForAPSDelegatePort
pushListener
pushListener:receivedUpdatePush:
pushMessage:
pushPriority
pushPrivateKey
pushPublicKey
pushToWakeDisabled
pushToken
pushTokenForDeviceID:
pushTokenLookup:forGroup:sessionID:fromID:account:completionBlock:
pushTokenToQRSessionID
pushTokenToSKMsMapping
pushTopic
qGroupContextWithDeviceIdentity:completion:
qSetupSeal
qrReason
query
queryCompletionBlock
queryGroupServerForENID:withCompletion:
queryHandler
queryInitialInvitationContextForRegistration:
queryLinkProbingStatus:
queryQueue
queryRetry
queryRetryIntervalForBadSignature
queryService
queryTimeInterval
queryUpdateNotifier
queryValidatedEmailsForRegistration:allowPasswordPrompt:completionBlock:
queue
queueBuildingValidationDataIfNecessaryForMessage:subsystem:withQueueCompletion:sendBlock:
queueForPriority:
queueManager
queueManager:receivedMessagesToSend:forTopic:sendMode:
queueMap
queueOneIdentifier
queuedMessages
quickRelayRequestsCount
quickRelaySessionToken
quickSwitchHelper
radarClassification
radarComponentId
radarComponentName
radarComponentVersion
radarDescription
radarKeywords
radarQueryParameter
radarReproducibility
radarTitle
radioAccessTechnology
rangeOfString:
rapportClient
rapportClient:didDiscoverDevice:
rapportClient:didLoseDevice:
rapportClient:didReceiveMessage:fromID:
rapportDeliveryController
rateLimitMap
rateLimiter
reIdentify
reRegisterWithUserID:action:service:
reRegisterWithUserID:action:service:messageContext:
read:inputLength:
readFrom:
readFromConnection
readHandler
realTimeEncryptionController
realTimeEncryptionPublicKeyDataForDevice:
realTimeEncryptionPublicKeyForDevice:
realTimeEncryptionPublicKeyWrappingMode
realTimeEncryptionPublicWrapModeForDevice:
reallyUpdateRegistrationHeartbeatTask
realm
realmPrefixedIdentifier
reason
reasonCode
recalculatePhoneRepairTimer
receiveAndDecryptEncryptedDataBlobs:
receiveControlChannelMessage:fromCbuuid:deviceUniqueID:
receiveDictionaryData:forType:fromParticipant:
receiveFileTransfer:topic:path:requestURLString:ownerID:sourceAppID:signature:decryptionKey:fileSize:progressBlock:completionBlock:
receiveJoinNotificationFromAParticipant
receiveJoinNotificationFromAParticipant:
receiveMembershipChangedInformation:
receivedAcceptMessage:fromID:
receivedAndSetKeyMaterial:stableKeyMaterial:forDevice:fromID:groupID:sessionID:fromSender:error:forMKM:forSKM:
receivedCancelMessage:fromID:
receivedDeclineMessage:fromID:
receivedDirectMsgSocketRequestForService:stream:flags:
receivedEndMessage:fromID:
receivedErrorWithContext:
receivedGroupSessionParticipantDataUpdate:forTopic:toIdentifier:fromID:
receivedGroupSessionParticipantUpdate:forTopic:toIdentifier:fromID:context:
receivedKMOverPushFromToken:
receivedKMOverPushViaCacheForToken:
receivedKMOverQRFromToken:
receivedKMOverQUICFromToken:
receivedMetadataForDirectMessaging:
receivedPreKeyOverPush
receivedPreKeyOverQUIC
receivedRateLimitingResponseForTopic:ttr:
receivedReinitiateMessage:fromID:
receivedRemoteConnectionData:
receivedSessionMessage:fromID:
receivedUnknownKMOverPushViaCache:
receivedUnverifiedKMOverQUICFromToken:
recentlyBlockedEntries:
recentlyBlockedHandles
recertifyDeviceIfNeeded
recievedLastMessageFromStorageForTopic:
recievedMessageFromStorageForTopic:
recievedNoStorageResponseForTopic:messageContext:
recipientPushToken
recipients
reconnectSession
reconnectSessionWithUniqueID:
reconnectSessionWithUniqueID:messageContext:
reconnectWithLocalAddress:
recordID
recordName
recordWithDeviceData:deviceMetadata:recordID:
recvKeyMaterial:
recvMembershipChangeEventWithReason:completionHandler:
recvStableKeyMaterialForFrameworkCache:
redeliverMessagesForDevice:completion:
reduceWithCompletion:
reestablishmentRequestReceiveTime
refreshAdHocServiceNames
refreshBundleIDs
refreshDate
refreshIDInfo
refreshPairedDeviceEncryptionKeys
refreshRegistrationForAccount:
refreshUserAccessTokens:error:
refreshVettedAliases
regenerateDeviceIdentifier
regeneratePairingIdentitiesIncludingClassD:
regenerateRegisteredIdentity
regenerateRegisteredIdentityWithMessageContext:
regeneration
regionBasePhoneNumber
regionID
regionServerContext
registerAccount:
registerAgent
registerClientChannel
registerClientChannelDestination:connectHandler:
registerDevice:properties:queue:completionBlock:
registerEndpoint:type:priority:options:
registerEventID:options:handler:
registerForNotificationsOnServices:
registerForNotificationsOnServices:messageContext:
registerForRegistrationAccountStatusMetric
registerInfo:
registerMultiplexerTransport
registerMultiplexerTransport:
registerPairedDeviceWithUniqueID:didConnectBlock:
registerPluginForGroup:options:messageContext:
registerPluginForGroup:relayGroupID:relaySessionID:options:
registerPluginWithOptions:
registerPluginWithOptions:relayGroupID:relaySessionID:
registerResultBlock:
registered
registeredAccountsOnService:
registeredDeserializationError
registeredDeviceFromDependentRegistrationDictionary:
registeredDevices
registeredIdentityContainer
registeredIdentityTimestampsWithBlock:
registeredKTData
registeredKeychainError
registeredObjectForProtocol:
registeredPairedDeviceDidConnectBlockPairs
registeredPhoneNumbers
registration
registrationAccountStatusMetricForAccount:
registrationAccountStatusMetricForNonexistentAccountWithType:serviceIdentifier:
registrationAttemptRateLimiter
registrationAuthKit
registrationBroadcasterForTopic:messageContext:
registrationCenter
registrationCert
registrationCollaboratorForXPCDaemon:
registrationCollaboratorWithCompletion:
registrationCompletedForRegistrationType:serviceIdentifier:wasSuccessful:registrationError:
registrationConductor
registrationControl
registrationControlGetRegistrationStateForRegistrationType:requestID:
registrationControlGetRegistrationStateForRegistrationType:requestID:messageContext:
registrationControlResponseForRequestID:withError:
registrationControlSetRegistrationStateForRegistrationType:toState:requestID:
registrationControlSetRegistrationStateForRegistrationType:toState:requestID:messageContext:
registrationControlStatusResponseForRequestID:requestID:withError:
registrationController
registrationController:allRegistrationsSucceeded:
registrationController:deregistrationSucceeded:
registrationController:deregistrationWillStart:
registrationController:registrationFailed:error:info:
registrationController:registrationSucceeded:
registrationController:registrationUpdated:
registrationController:registrationWillStart:
registrationControllerNeedsNewRegistration:
registrationData
registrationDataNeedsUpdate
registrationDataSource
registrationDate
registrationError
registrationErrorReason
registrationFailedForAccount:needsDeletion:
registrationHashProcessor:didFlushCacheForService:remoteURI:localURI:guid:
registrationKeyManager
registrationKeychainManager
registrationListener
registrationProperties
registrationPushManager
registrationQueue
registrationReasonTracker
registrationState
registrationStateChangedDate
registrationStateForRegistrationType:error:
registrationStatus
registrationSupported
registrationSupportedForRegistration:
registrationType
registrationWithServiceType:registrationType:value:
registration_oversized
registrations
regularPackets
reinitiate
reissuePersistedRequests
relayBuildVersion
relayCancel
relayExpiryTimeStamp
relayHighPriorityPort
relayIPv6
relayInitiate
relayPort
relaySessionID
relaySessionToken
relaySoftwareVersion
relayUpdate
releaseBroadcastAttemptQueue:
releasePortIfNecessary:port:
reliablyRequestKeyMaterialForGroup:sessionID:
reloadAdHocServices
reloadFromKeychain
reloadSettings
reloadUsers
reloadUsersForRealm:
remoteAddress
remoteAssumeRemoteDeviceEncryption
remoteBlob
remoteCID
remoteCallInfoData
remoteCell
remoteConnectionGUID
remoteConnectionType
remoteContext
remoteDetectedCorruption
remoteDeviceEncryptionInfo
remoteDevicesForIDs:fromIdentity:fromURI:fromService:lightQuery:allowQuery:completionBlock:
remoteDidBecomeActive:
remoteDidJoin:
remoteICEData
remoteNATIP
remoteNATType
remoteObjectDiedNotification:
remoteObjectProxy
remotePartyID
remotePublicIdentity
remoteSA
remoteSKEData
remoteURI
remoteUnauthenticatedPublicIdentity
remoteUseCloudPairedControlChannel
remoteUsePhoneContinuityLocalMessage
removeAccount:
removeAccountForGroup:
removeActionListener:
removeActiveParticipant:forGroup:
removeAliases:
removeAliases:fromAccount:
removeAliases:fromAccount:messageContext:
removeAllAggregatableMessages
removeAllCachedSessionsFromMainQueue
removeAllDonatedEntries:
removeAllEntries
removeAllEntries:
removeAllEntries:forImpactedServices:category:
removeAllEntriesWithCategory:
removeAllKVSEntries
removeAllKVSTrustedDevices:
removeAllObjects
removeAllQuickRelayRequests
removeAllRegistrations
removeAppValueForKey:
removeAuthTokenAllowingGracePeriodForProfileID:username:
removeBlockForIdentifier:
removeCachedEntriesForService:
removeCachedIdentityForPushToken:
removeCandidateEmail:
removeClientDataUpdateBlockForToken:
removeCompletionBlockForToken:
removeCompletionBlockForUniqueIdentifier:
removeConnection:fromDeviceConnectionInfo:removeCode:removeReason:
removeConnectionWithConnectionName:completionHandler:
removeConnectivityDelegate:
removeDataForIdentifier:dataProtectionClass:error:
removeDataWithIdentifier:serviceName:withError:
removeDeliveryHandler:
removeDonatedEntries:withCompletion:
removeEndpointQueryCompletionBlockForToken:
removeEntries:forImpactedServices:category:isDonated:
removeEntries:withCompletion:
removeEntriesWithCategory:isDonated:
removeEntryForKey:
removeExpiredPrekeys
removeFirstObject
removeFromKeychain
removeFromQueue:subsystem:
removeFullClusterWithIdentifier:error:
removeIdentityContainer:withIdentifier:dataProtectionClass:error:
removeIdentityWithApplicationKeyIndex:error:
removeItemAtPath:error:
removeKTRegistrationDataForKeyIndex:isRegistered:error:
removeKeychainDataOnService:account:error:
removeLegacyIdentity:withIdentifier:dataProtectionClass:error:
removeLink:
removeListener:forActivity:
removeListenerObject:
removeLocalActiveParticipantForGroup:
removeLocalListenerObject:
removeLocalPairedDevice:
removeNegotiationTimer
removeObject:
removeObjectAtIndex:
removeObjectForKey:
removeObjectIdenticalTo:
removeObjectsAtIndexes:
removeObjectsForKeys:
removeObjectsInArray:
removeObjectsInRange:
removeObserver:forKeyPath:context:
removeObserver:name:object:
removeOpportunisticDataForIdentifier:serviceName:completion:
removePairedDeviceWithCBUUID:
removeParticipantIDs:
removeParticipantIDs:forGroup:sessionID:
removeParticipantIDs:forGroup:sessionID:messageContext:
removeParticipantIDs:relayGroupID:relaySessionID:sessionStateCounter:
removeParticipantIDsWithSessionID:relayGroupID:relaySessionID:participantIDs:sessionStateCounter:
removePendingInvitation:forService:
removePendingInvitation:forService:messageContext:
removePendingMessagesForProtectionClass:
removePhoneNumberValidationRequestor:
removePreferWiFiRequest
removePurgeClientDataBlockForToken:
removeQuickRelayRequest
removeReceivedInvitation:forService:
removeReceivedInvitation:forService:messageContext:
removeRegistration:
removeRegistrationInfo:
removeRegistrationListener:
removeSessionKeyForAllTokenFromMainQueue
removeSessionKeyForToken:
removeSubscriptionForActivity:subActivity:
removeTarget:
removeTemporaryPhoneAlias:withCompletion:
removeUTunPeerWithDeviceUniqueID:btuuid:reason:shouldWait:
removeUTunPeerWithSessionID:reason:shouldWait:
removeWakingPushPriorityForServices:
renewPseudonym:forRegistration:forUpdatedExpiryEpoch:requestProperties:completionBlock:
renewPseudonym:forUpdatedExpiryEpoch:requestProperties:completionBlock:
renewPseudonym:onAccount:forUpdatedExpiryEpoch:requestProperties:requestUUID:
renewPseudonym:onAccount:forUpdatedExpiryEpoch:requestProperties:requestUUID:messageContext:
repairAccounts
repairAccountsWithMessageContext:
repairService:withPrimaryUserName:
repairTimer
repairiCloudBasedAccounts
replaceBytesInRange:withBytes:length:
replaceEntries:replaceAll:withCompletion:
replaceObjectAtIndex:withObject:
replayKey
replayStateCommitter
reportAWDAllocatorEvent:relayProviderType:transport:localRAT:duration:idsSessionID:reportingDataBlob:isInitiator:
reportAccountKeyFetchMetricForService:withSuccess:isAccountMismatch:withError:
reportAction
reportAction:ofTempURI:fromURI:onAccount:requestUUID:
reportAction:ofTempURI:fromURI:onAccount:requestUUID:messageContext:
reportAction:ofTempURI:fromURI:registration:withCompletion:
reportAction:ofTempURI:fromURI:withCompletion:
reportAndRemoveForConnectionUUID:
reportEncryptionSideMetricWithEndpoint:ECSuccess:legacySuccess:ECError:legacyError:
reportFirstMKMReceivedFromQR:
reportJoinReceivedOverPushFromToken:
reportMKMReceivedOverPushFromToken:material:
reportMKMReceivedOverPushViaCacheForParticipantID:material:
reportMKMReceivedOverQRFromToken:material:
reportMessageMetricWithMetadata:ECSuccess:legacySuccess:command:decryptedEqual:triedLastResort:ECError:legacyError:fromDestination:
reportMetric
reportPreKeyReceivedOverPushFromToken:
reportPrekeyAckStatus:
reportSpamMessage:selfURI:registration:
reportSpamMessage:serviceIdentifier:
reportSpamMessage:serviceIdentifier:messageContext:
reportSpamMessage:toURI:
reportSpamMessage:toURI:registration:
reportSpamWithMessages:selfURI:registration:
reportSpamWithMessages:toURI:
reportSpamWithMessages:toURI:registration:
reportTimeDifferenceBetweenFirstPacketAndMKI:forMKI:service:activeParticipants:
reportToAWD:connectionType:error:
reportiMessageSpam:toURI:
reportiMessageSpam:toURI:messageContext:
reportiMessageSpamCheckUnknown:count:completionBlock:
reportiMessageSpamCheckUnknown:count:requestID:
reportiMessageSpamCheckUnknown:count:requestID:messageContext:
reportiMessageUnknownSender:messageID:isBlackholed:isJunked:messageServerTimestamp:selfURI:registration:
reportiMessageUnknownSender:messageID:isBlackholed:isJunked:messageServerTimestamp:toURI:
reportiMessageUnknownSender:messageID:isBlackholed:isJunked:messageServerTimestamp:toURI:messageContext:
reportiMessageUnknownSender:messageID:isBlackholed:isJunked:messageServerTimestamp:toURI:registration:
reportingDataBlob
reqCount
requestActiveParticipantsForGroupSession:
requestActiveParticipantsForGroupSession:messageContext:
requestAllocationForRecipient:
requestAuthTokenForProfileID:username:service:badPassword:showForgotPassword:forceRenewal:failIfNotSilent:outRequestID:completionBlock:
requestCarrierTokenForSubscriptionSource:IMEI:carrierNonce:requestUUID:
requestCarrierTokenForSubscriptionSource:IMEI:carrierNonce:requestUUID:messageContext:
requestChildConnectionIDForLinkID:relayGroupID:relaySessionID:
requestChildConnectionIDForLinkID:sessionID:relayGroupID:relaySessionID:
requestEncryptionKeyForGroup:participants:
requestEncryptionKeyForGroup:participants:messageContext:
requestEncryptionKeyForParticipantIDs:
requestGenerationOfUnregisteredKTRegDataWithPublicIdentityData:applicationKeyManager:
requestID
requestIDStatusForID:fromIdentity:fromURI:fromService:lightQuery:allowQuery:completionBlock:
requestIDStatusForIDs:fromIdentity:fromURI:fromService:lightQuery:allowQuery:forceQuery:bypassLimit:completionBlock:
requestIDStatusForURIs:service:lightQuery:allowQuery:completionBlock:
requestIDStr
requestKeyMaterialForGroup:sessionID:
requestKeyMaterialForGroup:sessionID:shouldGenerateMKM:
requestKeyMaterialForGroup:sessionID:toSpecificMembers:requireMKM:requireSKM:
requestLength
requestMaterialsForParticipantIDs:materialType:
requestMaterialsForSession:participantIDs:materialType:
requestPendingKeyMaterialsForGroup:sessionID:
requestPublicKeysForRealTimeEncryption:forAccountWithID:
requestPublicKeysForRealTimeEncryption:forAccountWithID:messageContext:
requestRealTimeEncryptionMasterKeyMaterial:forGroup:
requestRealTimeEncryptionMasterKeyMaterial:forGroup:messageContext:
requestSelectedSubscriptionsWithCompletion:
requestSessionInfoWithOptions:
requestTimeoutInterval
requestURIsForParticipantIDs:withRequestID:
requestURIsForParticipantIDs:withRequestID:forGroupSession:
requestURIsForParticipantIDs:withRequestID:forGroupSession:messageContext:
requestUnselectedTemporaryPhoneAliasesWithCompletion:
requestUserConsentToValidatePhoneNumberForCTPNR:completion:
requestWithIdentifier:content:trigger:
requestedKM
requests
requireAll
requireAllRegistrationProperties
requireBluetooth
requireLackOfRegistrationProperties
requireLocalWiFi
requireSignature
requiredCapabilities
requiredForMessaging
requiredKeys
requiredLackOfCapabilities
requiredMissingCapabilities
requiredUpdate
requiresKeychainMigration
requiresPushTokenKeys
reregister
reset
resetAllConnectionsForDevice:
resetAllSessions
resetCacheWithNewMembershipURIs:
resetClientMasterKeyIdentifierReceipts
resetCommunicationStateBeforeQuickSwitchWithCompletionBlock:
resetDevicePrekey
resetExpiryForUser:
resetGossipState
resetIPsecTCPConnection:forDeviceConnectionInfo:
resetKeyMaterialCacheTimerIfNeeded:
resetKeyMaterialLocalSentStatus:
resetKeysForGroup:shouldRemoveCurrentParticipants:
resetMKMCacheAfterTimeoutForGroup:
resetMKMLocalSentStatus:
resetPreferencesForAllServices
resetRealTimeEncryptionKeys:forGroup:
resetRealTimeEncryptionKeys:forGroup:messageContext:
resetRemoteMasterKeyMaterialCacheAndCancelResetInterval
resetRemoteStableKeyMaterialCache
resetSKMCache
resetSKMLocalSentStatus:
resetSKMSentToClientStatus
resetTCPConnection:forDeviceConnectionInfo:
resetUTunTCPConnection:forDeviceConnectionInfo:
resolvedEndpoints
resolvedEndpointsDidUpdateHandler
resourceMetadata
resourcePath
respondToRegistrationControlActionWithRequestID:messageContext:error:
respondsToSelector:
response
responseAbsintheResponse
responseAbsintheServKey
responseAccessTokens
responseAccessoryID
responseAdminAcccessToken
responseAlertInfo
responseBasePhoneNumber
responseCarrierToken
responseCertificate
responseCertificateData
responseCertificateExpiration
responseCode
responseConsentTokens
responseDeviceScoreNonce
responseEngramID
responseError
responseExpiry
responseExtraInfo
responseHBI
responseIdentities
responseMechanisms
responseOrigin
responsePresenceTopic
responseRegionID
responseRegistrations
responseServiceUserIDs
responseServices
responseSessionInfo
responseSpamMessage
responseSpamMessages
responseStatus
responseTTL
responseTimeStamp
responseToken
responseUserID
responseValidated
responses
restoreMonitor
restoreTimer
restrictions
result
resultData
resultExpected
resume
resumeConnectivity
resumeMessageWithSequenceNumber:streamID:messageUUID:nextByteOffset:
resumeOTRNegotiation
resumeSessionNegotiation
resumeSocketWithOptions:shouldLogCall:
retain
retainCount
retractLockscreenAlerts
retrieveCurrentVerifiedTLTSTH:
retrieveLocalUDID
retrievePeripheralsWithIdentifiers:
retryCount
retryInAirplaneMode
retryTimeForKey:attempts:
reunionSyncClientIDs
reunionSyncCollaborator
reunionSyncCollaboratorForClientProcessName:withCompletion:
reunionSyncCollaboratorWithClientProcessName:forXPCDaemon:
reunionSyncCompletedForServices:requestID:
reunionSyncCompletedForServices:withCompletion:
reunionSyncInProgress
reunionSyncStartedForServices:requestID:
reunionSyncStartedForServices:withCompletion:
revokePseudonym:forRegistration:requestProperties:completionBlock:
revokePseudonym:onAccount:requestProperties:requestUUID:
revokePseudonym:onAccount:requestProperties:requestUUID:messageContext:
revokePseudonym:requestProperties:completionBlock:
rollAccountIdentityWithCompletion:
rollAccountKeyWithCompletion:
rollFullDeviceIdentityWithCluster:error:
rollNewKeysAfterResettingPrekeysForGroups:withReason:
rolledAccountIdenityWithError:
rolledClusterWithFullAccountIdentity:fullAdminServiceIdentities:fullSigningServiceIdentities:error:
rollingError
route
rtcNormalizeTime:
runCleanupWithExpirationInterval:
runConnectivityCheckWithCompletionBlock:
runIndividuallyWithInput:
runWithInput:
runningSimpleAuthentication
saveData:allowBackup:
saveData:forIdentifier:allowSync:allowBackup:dataProtectionClass:error:
saveData:forIdentifier:allowSync:dataProtectionClass:error:
saveData:forIdentifier:dataProtectionClass:withCompletion:
saveDevicePropertiesWithOldKeys:
saveIsRegistered:forApplicationKeyIndex:error:
saveKTRegistrationData:forKeyIndex:isRegistered:error:
saveLegacyIdentity:withIdentifier:dataProtectionClass:error:
saveOpportunisticCache:withError:
savePairedDevices:
saveQueue
saveTimer
saveToKeychain
saveTracking
scalablePipeManager:didRegisterEndpoint:error:
scalablePipeManager:didUnregisterEndpoint:
scalablePipeManager:pipeDidConnect:
scalablePipeManager:pipeDidDisconnect:error:
scalablePipeManagerDidUpdateState:
scheduleNextKVSSync
scheduledBlock
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
scoringNonce
screenLocked
screenSaverDidStart
screenSaverDidStop
screenUnlocked
sdCopy
sdOriginal
seal
sealMessage:signedByFullIdentity:error:
sealMessage:withEncryptedAttributes:signedByFullIdentity:usedIdentityWithIdentifier:error:
sealMessage:withEncryptedAttributes:signedByFullIdentity:usingIdentitiesWithIdentifier:error:
second
securityLevelForAccount:
selectDataForDestination:
selectServicesForKeychainCacheFromDictionary:
selectSubscription:withCompletion:
selectedPhoneNumberRegistrationSubscriptionLabels
selectedPhoneNumberRegistrationSubscriptionWithError:
selectedSubscriptionLabelDidChange:
self
selfAllocationCount
selfHandle
selfHealRateLimiter
selfInstanceID
selfVerifyThrottleTime
sendAccountSyncMessage:messageID:queueOneIdentifier:allowCloudFallback:completionBlock:
sendAckForMessageWithSequenceNumber:
sendAckForMessageWithSequenceNumber:priority:dataProtectionClass:connectionType:
sendAllocationRequest
sendAllocationRequest:
sendAllocationRequest:options:
sendAllocationRequest:options:messageContext:
sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:
sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:messageContext:
sendAuthenticateRegistrationTask
sendBlock
sendCancelInvitationMessage
sendCancelInvitationToDestinations:remoteEndReason:data:
sendCertifiedDeliveryReceipt:
sendCertifiedDeliveryReceipt:serviceName:
sendCertifiedDeliveryReceipt:serviceName:messageContext:
sendConnectedLinkInfoToAVC
sendConnectedLinkInfoToAVCForSessionID:
sendData:
sendData:forCallID:encrypted:
sendData:forKey:encryption:capability:withCompletion:
sendData:peerID:
sendData:service:protobuf:resourcePath:resourceMetadata:priority:dataProtectionClass:nonWaking:nonCloudWaking:requireBluetooth:requireLocalWiFi:queueOneIdentifier:expirationDate:enforceRemoteTimeouts:expectsPeerResponse:wantsAppAck:compressPayload:compressed:peerResponseIdentifier:messageID:topic:awdTopic:command:fromID:uriToDeviceID:localDeviceDestinationDeviceUUID:bypassDuet:duetIdentifiersOverride:messageType:fallbackBlock:progressBlock:completionBlock:
sendData:toPeer:
sendDataMessage:
sendDataMessage:canFragment:
sendDeactivationRequestWithSIM:Info:
sendDeregistration:
sendDeregistrationTask
sendEventID:event:destinationID:options:completion:
sendFakePushFromFile:completion:
sendFanouts:guidToDeliveryAcknowledgementBlock:guidToSendCompletionBlock:forURIs:messageQueue:
sendFilePath:topic:userInfo:transferID:encryptFile:progressBlock:completionBlock:
sendFilePath:topic:userInfo:transferID:sourceAppID:encryptFile:progressBlock:completionBlock:
sendHardDeregisterCompletionBlock:
sendIDSMessage:service:topic:completionBlock:
sendInvitation:withData:declineOnError:
sendInvitation:withData:declineOnError:messageContext:
sendInvitation:withOptions:
sendInvitation:withOptions:messageContext:
sendInvitationWithData:declineOnError:
sendInvitationWithOptions:declineOnError:
sendKeyMaterialMessage:relayGroupID:keyMaterialMessageData:destinationURIs:completionHandler:
sendKeyMaterialMessage:toDestination:
sendKeyMaterialMessageData:relayGroupID:destinationURIs:completionHandler:
sendKeyMaterialsRecoveryRequestToDevice:fromID:groupID:sessionID:requireMKM:requireSKM:
sendKeyMaterialsRecoveryRequestToDevice:fromID:participantID:groupID:sessionID:requireMKM:requireSKM:
sendKeyMaterialsRecoveryRequestToGroup:requireMKM:requireSKM:
sendKeyMaterialsRecoveryRequestToParticipants:senderID:groupID:sessionID:requireMKM:requireSKM:
sendKeyMaterialsToLocal:sessionID:
sendKeyMaterialsToWaitingParticipantsForGroup:sessionID:
sendMMLs:guidToDeliveryAcknowledgementBlock:guidToSendCompletionBlock:forService:sendMode:messageQueue:
sendMessage:
sendMessage:messageID:topic:command:destinationIDs:completionBlock:
sendMessage:params:bulkedPayload:fromID:toDestinations:useDictAsTopLevel:dataToEncrypt:encryptPayload:wantsResponse:expirationDate:command:wantsDeliveryStatus:wantsCertifiedDelivery:deliveryStatusContext:messageUUID:priority:localDelivery:disallowRefresh:willSendBlock:completionBlock:
sendMessage:priority:messageType:
sendMessage:toDestinations:withCommand:
sendMessage:toDestinations:withCommand:fromID:
sendMessage:toDestinations:withCommand:fromID:willSendBlock:completionBlock:
sendMessage:toDeviceIdentifier:completionBlock:
sendMessage:withCommand:
sendMessageData:onTopic:withOptions:identifier:completion:
sendMessageDictionary:messageID:dataToEncrypt:withEncryptedAttributes:onService:wantsResponse:expirationDate:enforceRemoteTimeouts:canUseLargePayload:sendOnePerToken:allowPartialSendsToSucceed:priority:fireAndForget:fromID:fromIdentity:toPeople:accessToken:topic:registrationProperties:fakeMessage:alwaysSkipSelf:pushPriority:ignoreMaxRetryCount:disallowRefresh:originalTimestamp:prioritizedTokenList:wantsFirewallDonation:destinationObject:deliveryTime:deliveryMinimumTime:sendMode:ackBlock:willSendBlock:sendCompletionBlock:
sendMessageWithCategory:type:payload:error:
sendMessageWithIDSSendParameters:messageContext:threadContext:progressBlock:onObject:
sendMessageWithSendParameters:
sendMessageWithSendParameters:messageContext:
sendMessageWithSendParameters:service:threadContext:willSendBlock:progressBlock:completionBlock:
sendMessageWithSendParameters:willSendBlock:completionBlock:
sendMetric:
sendMode
sendMonitorMessage
sendOTRNegotiationMessage:negotiationCount:negotiationData:
sendOpportunisticData:onService:usingAccountWithUniqueID:withIdentifier:options:
sendOpportunisticData:onService:usingAccountWithUniqueID:withIdentifier:options:messageContext:
sendOpportunisticData:toDestination:
sendOpportunisticDataIfNeededToDestination:completion:
sendOptInUpdateForApplications:withCompletion:
sendPacketBuffer:destination:toDeviceID:
sendPacketBuffer:toDeviceUniqueID:cbuuid:
sendPacketBufferArray:arraySize:toDeviceUniqueID:cbuuid:
sendPendingKeyMaterialsToGroup:sessionID:forDevice:fromID:
sendPersistedFile:userInfo:toDestinations:usingAccountWithUniqueID:identifier:
sendPrekeyRequestToDestination:group:sessionID:
sendPrekeyRequestToGroup:sessionID:
sendPriorityMessage:
sendPublicKeyToDestination:group:sessionID:
sendRTCMetricWithStartDate:endDate:endpointCount:usedPipeline:usedMMCS:responseCode:
sendRealTimeEncryptionMKMRecoveryRequest:toGroup:
sendRealTimeEncryptionMasterKeyMaterial:toGroup:
sendRealTimeMediaPrekey:toGroup:
sendRealTimeMediaPrekey:toGroup:messageContext:
sendRegistration:
sendRegistrationTask
sendReinitiateMessageWithSubcommand:
sendReset
sendSKEData:
sendSKEData:skeData:completionHandler:
sendServerMessage:command:completionBlock:
sendServerMessage:command:usingAccountWithUniqueID:
sendServerMessage:command:usingAccountWithUniqueID:messageContext:
sendSessionMessage:toDestinations:
sendSessionMessage:toDestinations:forSessionWithUniqueID:
sendSessionMessage:toDestinations:forSessionWithUniqueID:messageContext:
sendStatsRequest:
sendStatsRequest:options:
sendSuspendOTRNegotiationMessage:
sendValidateCredential:withDeliveryCompletionBlock:
sendXPCObject:
sender
senderCorrelationIdentifier
senderCorrelationIdentifierForURI:fromURI:service:
senderCorrelationIdentifierForURI:pushToken:fromURI:service:
senderExternalIP
senderToken
senderURI
sendingMessageStatistics
sent
sentMessageDataSize
sentToDevice:
sentToRemotes
seqRecvStart
seqSendStart
sequenceNumber
serialNumber
serialPersistQueue
serializeAndPersistIdentitiesDeleteIfNull:
serializeAndPersistKTDatasDeleteIfNull:
serializedLegacyPublicIdentity
serializedNGMDevicePrekey
serializedPublicLegacyIdentity
server
serverBackoffModeMaxSenderRetries
serverBackoffModeReceiverRetryInterval
serverBag
serverBagForBagType:
serverDesiredKeyMaterials
serverDesiredMaterials
serverDiedForConference:
serverErrorDetail
serverKey
serverLoggableDatas
serverMessagingCollaboratorForXPCDaemon:
serverMessagingCollaboratorWithCompletion:
serverMessagingEntitlements
serverStorageStateMachine
serverTime
service:familyInfoUpdated:
service:linkedDevicesUpdated:
service:tinkerDeviceAdded:
service:tinkerDeviceRemoved:
service:tinkerDeviceUpdated:
serviceAdHocType
serviceAllowLocalDelivery
serviceAllowProxyDelivery
serviceAllowWiProxDelivery
serviceConnection
serviceConnectionCache
serviceConnector
serviceConnectorServiceForAccount
serviceController
serviceData
serviceDuetIdentifiers
serviceIdentifier
serviceIndexToKTRegDataConfigs
serviceIndexToKeyConfigs
serviceIsDSBased
serviceLoader
serviceMinCompatibilityVersion
serviceName
servicePushTopic
serviceRestrictionsChanged:
serviceSignatures
serviceSignaturesAtIndex:
serviceSignaturesCount
serviceSignaturesType
serviceString
serviceToOptInManager
serviceToVerifier
serviceType
serviceTypes
serviceTypesFromRegistrations:
serviceTypesFromRegistrations:withRegistrationType:
serviceUseiMessageCallerID
serviceUserID
serviceUserIDs:error:
serviceWantsReflectedSend
serviceWantsTinkerDevices
serviceWithIdentifier:
serviceWithName:
serviceWithPushTopic:
services
servicesPreferringInfraWiFi
session:audioEnabled:
session:didCreateParticipantIDAlias:forParticipantID:salt:
session:didReceiveActiveLightweightParticipants:success:
session:didReceiveActiveParticipants:success:
session:didReceiveBlockedParticipantIDs:withCode:withType:isTruncated:
session:didReceiveData:dataType:forParticipant:
session:didReceiveDataBlob:forParticipant:
session:didReceiveKeyMaterial:
session:didReceiveParticipantID:forParticipantIDAlias:salt:
session:didReceiveParticipantIDs:withCode:managementType:
session:didReceiveQueryBlockedParticipantIDs:withCode:isTruncated:
session:didReceiveReport:
session:didReceiveServerErrorCode:
session:didReceiveURIsForParticipantIDs:withRequestID:
session:didRegisterPluginAllocationInfo:
session:didRemoveParticipantIDs:withCode:isTruncated:
session:didUnregisterPluginAllocationInfo:
session:hasOutdatedSKI:
session:invitationSentToTokens:shouldBreakBeforeMake:
session:muted:
session:participantDidJoinGroupWithInfo:
session:participantDidLeaveGroupWithInfo:
session:shouldInvalidateKeyMaterialByKeyIndexes:
sessionAcceptReceived:fromID:withData:
sessionAcceptReceivedWithAWDGUID:
sessionAcceptSentWithAWDGUID:
sessionCancelReceived:fromID:withData:
sessionCancelReceivedWithAWDGUID:
sessionCancelSentWithAWDGUID:numberOfRecipients:remoteSessionEndReason:
sessionCompletedWithAWDGUID:protocolVersionNumber:serviceName:clientType:isQREnabled:isUsingQRDirectly:isInitiator:isScreenSharingSessionType:isWithDefaultPairedDevice:transportType:linkType:linkProtocol:endedReason:destinationType:durationOfSession:durationToConnect:isNetworkEnabled:isNetworkActive:isNetworkReachable:isWifiInterfaceDisallowed:isCellularInterfaceDisallowed:
sessionConnectedWithAWDGUID:
sessionController
sessionDeclineReceived:fromID:withData:
sessionDeclineReceivedWithAWDGUID:
sessionDeclineSentWithAWDGUID:
sessionDidJoinGroup:participantInfo:error:
sessionDidJoinGroup:participantUpdateDictionary:error:
sessionDidJoinGroup:participantsInfo:error:
sessionDidLeaveGroup:error:
sessionDidReceiveParticipantUpgrade:participantType:error:
sessionEndReceived:fromID:withData:
sessionEnded:withReason:error:
sessionEndedWithGuid:endedReason:genericError:gameKitError:conferenceMiscError:callDuration:isNetworkEnabled:isNetworkActive:isNetworkReachable:networkCheckResult:dataRate:gksError:connectDuration:remoteNetworkConnection:localNetworkConnection:connectionType:usesRelay:currentNATType:remoteNATType:relayConnectDuration:isInitiator:linkQuality:gksReturnCode:
sessionForceInternetInvitation
sessionID
sessionIDForAlias:salt:
sessionIDStr
sessionIDforPeer:
sessionInfoRequest
sessionInvitationReceivedWithAWDGUID:
sessionInvitationReceivedWithPayload:forTopic:sessionID:toIdentifier:fromID:transportType:
sessionInvitationSentWithAWDGUID:numberOfRecipients:
sessionKeyForToken:
sessionMessageReceived:fromID:withData:
sessionNegotiationCount:
sessionNetworkAvailabilityCheckOverrideBehavior
sessionReinitiateConnectedWithAWDGUID:
sessionReinitiateRequestedWithAWDGUID:
sessionReinitiateStartedWithAWDGUID:
sessionStartTimeWithToken:
sessionStartedWithAWDGUID:protocolVersionNumber:serviceName:clientType:
sessionToBlockMap
sessionToken
sessionTokenForURI:pushToken:fromURI:service:expirationDate:refreshDate:fromIdentity:includeSelfDevice:
sessionTokensForURIs:fromURI:service:fromIdentity:includeSelfDevice:fullyRemoveSelfDevice:
sessionTokensForURIs:fromURI:service:fromIdentity:includeSelfDevice:fullyRemoveSelfDevice:allowRefresh:
sessionWithGroupID:
sessionWithGroupUUID:
sessionWithInstanceID:
sessionWithUniqueID:
sessions
setAbsintheHello:
setAbsintheRetries:
setAbsintheUDID:
setAbusive:
setAcceptedRelaySession:
setAcceptedRelaySession:options:
setAcceptedRelaySession:relaySessionID:options:
setAccessoryIDs:
setAccessoryRequests:
setAccount:fromID:forGroup:
setAccountBuilder:
setAccountController:
setAccountDescription:
setAccountDisplayName:
setAccountID:
setAccountKeyByService:
setAccountRepair:
setAccountStatus:forProfileID:username:service:
setAckBlock:
setAction:
setActionByTarget:
setActive:
setActiveParticipantURIs:
setActiveRelayIP:
setActiveRelaySessionToken:
setActivity:
setActivityPolicy:
setActivityStatus:
setActivitySubActivity:
setActivityTimestamp:
setActivityTopic:
setAdHocServiceNames:
setAdditionalDictionary:
setAdminID:
setAggregatableMessages:
setAggregateMessages:
setAliasStrings:
setAliases:
setAllocateProtocolVersion:
setAllocateType:
setAllowPairingIdentities:
setAllowProxyQueries:
setAllowRegenerateRegisteredIdentity:
setAllowedTrafficClasses:
setAllowedTrafficClassifiersForDevice:classifiers:completion:
setAllowsLinkLocal:
setAlternateCallbackID:
setAlternateDelegate:
setAlternateGUID:
setAlwaysConnectedForCBUUID:
setAlwaysSkipSelf:
setAnonymizedSenderID:
setAppBool:forKey:
setAppID:
setAppValue:forKey:
setAppleID:
setAppleIDPrimaryDependentRegistrations:
setAppleIDWithDSID:inUse:forService:
setApplicationPublicIdentitys:
setApplicationVersion:
setArbiter:
setArgument:atIndex:
setAttemptCount:
setAttempts:
setAttributes:
setAudioEnabled:
setAudioEnabled:forSessionWithUniqueID:
setAudioEnabled:forSessionWithUniqueID:messageContext:
setAuthToken:
setAuthTokenForProfileID:username:service:authToken:selfHandle:accountStatus:outRequestID:completionBlock:
setAuthenticationCert:
setAuthenticationCert:forID:
setAuthenticationCertificate:forUser:
setAuthenticationDataSig:
setAuthenticationDataUserID:
setAuthenticationInfo:
setAuthenticationResponses:
setAuthenticationToken:
setAutomaticResetBlock:
setAutomaticResetInterval:
setAvailability:
setAvoidMainQueue:
setAvoidMainQueueOverrideToNO:
setAwdTopic:
setBAACert:
setBackingCache:
setBackingOTRSessionRef:
setBackingQueue:
setBackingStore:
setBackoffProvider:
setBasePhoneNumber:
setBlock:
setBluetoothLinkPreferences:
setBluetoothLinkPreferences:inputbps:outputbps:
setBluetoothMACAddress:
setBody:
setBroadcastBlock:
setBroadcastNeedsClientAck:
setBroadcastPerformed:
setBtUUID:
setBuild:
setBuildOfIdentityGeneration:
setBuildOfUnregisteredIdentityGeneration:
setBuildVersion:
setBulkedPayload:
setBundleID:
setByAddingObject:
setByAddingObjectsFromArray:
setByAddingObjectsFromSet:
setBypassDuet:
setBypassSizeCheck:
setBypassStorage:
setByteCompletedCount:
setByteMovementDelayThreshold:
setByteTotalCount:
setBytesReceived:
setBytesSent:
setCTAdapter:
setCTPNR:
setCTPNRByConsentCompletion:
setCache:
setCachedDataForClient:
setCachedDisabledByService:
setCachedIDStatus:ForID:fromURI:fromService:
setCachedIsSameSIM:
setCachedManateeAvailability:
setCachedRecordZone:
setCachedTokensBySessionID:
setCallID:
setCallbackQueue:
setCancelled:
setCapability:
setCapabilityFlags:
setCarrierNonce:
setCategory:
setCbuuid:
setCbuuidString:
setCert:
setChecksumEnabled:
setChecksumFailed:
setClearStateOnLaunch:
setClientConnection:
setClientContextData:
setClientDataUpdateBlocks:
setClientDatasByServiceType:
setClientID:
setClientInfo:
setClientInitTime:forConnectionUUID:
setClientOpenSocketCompletionTime:forConnectionUUID:
setClientProcessName:
setClientRemoteObjectByActivity:
setClientRemoteObjectsByTopic:
setClientType:
setClientUUID:
setClientUniquePID:
setClientUniquePID:sessionID:relayGroupID:relaySessionID:
setCloudConnection:
setCloudServiceConnector:
setCollaboratorProvider:
setCommCenterDead:
setCommand:
setCommandContext:
setCommands:forListener:
setCompletedMigration:
setCompletedUnitCount:
setCompletionBlock:
setCompletionBlocks:
setCompletionBlocksToURIsMap:
setCompletionQueue:
setCompressPayload:
setCompressed:
setCompressionInfo:
setCompressionState:
setConfig:
setConnectError:
setConnectReadyHandler:
setConnecting:
setConnection:
setConnectionContext:
setConnectionCountHint:
setConnectionID:
setConnectionInitTime:
setConnectionInitTime:forConnectionUUID:
setConnectionSetupStartTime:
setConnectionTimeout:
setConnectionTimer
setConnectionTimer:
setConnectionTimerCleared:
setConnectivityMonitor:
setContactStore:
setContactUtilities:
setContainer:
setContext:
setContinuityConnectCount:
setControlChannel:
setControlChannelCachedSYN:
setControlChannelVersion:
setConversationID:
setCredential:
setCredential:forUser:
setCtAdapter:
setCurrentLocalMasterKeyMaterial:
setCurrentLocalStableKeyMaterial:
setCurrentOutgoingFragmentedMessageID:
setCurrentPreflightStack:
setCurrentPromise:
setDSAuthID:
setDSHandle:
setDaemonClients:
setDaemonOpenSocketCompletionTime:forConnectionUUID:
setDaemonOpenSocketTime:forConnectionUUID:
setDaemonRootDirectory:
setData:
setDataLength:
setDataProtectionClass:
setDataProvider:forRealm:
setDataProviderByRealm:
setDataSource:
setDataToEncrypt:
setDatabaseCloseTimer:
setDatabaseLastUpdateTime:
setDateFormat:
setDecodableClasses:
setDecodingFailurePolicy:
setDecryptionBlock:
setDefaultActionURL:
setDefaultPairedDependentRegistrations:
setDefaultQueue:
setDefaultUnderlyingLink:
setDefaultUnderlyingLink:linkID:
setDelay:
setDelegate:
setDelegateOnMainQueue:
setDeliveryAcknowledgementBlock:
setDeliveryController:
setDeliveryMinimumTime:
setDeliveryStatusContext:
setDeliveryTime:
setDeniedToSend:
setDependencyProvider:
setDependentRegistrationAuthRetries:
setDependentRegistrationResponseCode:
setDependentRegistrations:
setDependentRegistrationsTTL:
setDestinationAddress:isFixedDestination:fromAddress:
setDestinationAddress:localIfIndex:isFixedDestination:fromAddress:
setDestinationAddressToDeviceIDMap:
setDestinationCorrelationIdentifier:
setDestinationDevice:
setDestinationPersister:
setDestinations:
setDestinationsLightweightStatus:
setDeviceBTUUID:
setDeviceCapabilities:
setDeviceCertificationRepair:
setDeviceConnectionInfo:
setDeviceFoundHandler:
setDeviceID:
setDeviceIdentifier:
setDeviceLostHandler:
setDeviceMonitor:
setDeviceName:
setDeviceScoreNonce:
setDeviceSignature:
setDeviceSignatureByService:
setDeviceTime:
setDeviceUniqueID:
setDeviceUniqueIDToCBUUID:
setDictionary:forKey:
setDidInvalidate:
setDidReceiveReestablishmentRequest:
setDidReceiveSIMSetupCompleteNotification:
setDirectory:
setDisableEncryption:
setDisableRemoteDeviceEncryption:
setDisallowQueryRefresh:
setDisallowRefresh:
setDisallowRetry:
setDisasterModeTokens:
setDiscretionaryNetworkBehavior:
setDispatchQueue:
setDisplayIDs:
setDisplayingAddNumberPrompt:
setDomainHash:
setDouble:forKey:
setDualInterfaceidQueryMessageDelivery:
setDuetIdentifiersOverride:
setDuetInterface:
setDuration:
setECVersion:withCompletion:
setENID:
setEmail:
setEmptyStatesLock:
setEnableCriticalReliability:
setEnableOTR:
setEnableQuickRelay:
setEnableSKE:
setEnableSingleChannelDirectMode:
setEnabled:
setEnabled:withReason:
setEncryptPayload:
setEncryptedData:
setEncryption:
setEncryptionBlock:
setEncryptionEnabled:
setEncryptionInitialized:
setEncryptionStateStruct:
setEncryptionType:
setEndSessionTimeout:
setEndSessionTimeoutTimer
setEndSessionTimer:
setEndSessionTimerCleared:
setEndTime:
setEndpoint:
setEndpointQueryListeners:
setEndpointState:
setEndpointTransparencyStates:
setEndpoints:
setEndpointsToEncryptedData:
setEnforceRemoteTimeouts:
setEngramID:
setEnqueuedDate:
setEntitledForAllTopics:
setEntitlements:
setError:
setErrorByService:
setErrorCode:
setErrorMessage:
setEvents:
setEvictionDate:
setEvictionTimer:
setExcessiveCachingCount:
setExcessiveCachingReportCounter:
setExistingRelayIP:
setExistingRelaySessionToken:
setExistingRelaySignature:
setExpectedNextIncomingSequenceNumber:
setExpectedNextOutgoingSequenceNumber:
setExpectsPeerResponse:
setExpiration:onFanout:withMessage:
setExpirationDate:
setExpirationManager:
setExpiry:
setExportedInterface:
setExportedObject:
setExtraCompletionBlocks:
setFailedTokenCache:
setFakeMKMWrapping:
setFallbackBlock:
setFamilyDevices:
setFamilyHandles:
setFamilyMembers:
setFanoutEncryptionManager:
setFeatureID:
setFetchRecordZonesCompletionBlock:
setFileOperationKind:
setFilePath:
setFileURL:
setFilename:
setFinalDestinations:
setFinishedRegistration:
setFireAndForget:
setFireTimeInterval:
setFirewallRateLimiter:
setFirewallStore:
setFirstDataPacketReceiveTime:
setFirstGossipChance:
setFirstIncomingSYNSequenceNumber:
setFirstPacketReceiveTime:
setFirstPacketReceiveTime:forConnectionUUID:
setFlags:
setForceAttachmentMessage:
setForceCellular:
setForceInternetInvitation:
setForceLegacyPK:
setForceOnePerFanout:
setForceRoll:
setForwardingSig:
setForwardingSigAlgorithm:
setForwardingTicket:
setFragmentationSize:
setFromID:
setFromIdentity:
setFullIdentity:
setGUID:
setGameCenterData:
setGenerationCounter:
setGenerationError:
setGossipPolicy:
setGossipRecipients:
setGroupData:
setGroupID:
setGroupIdentifer:
setGroupMemberCount:
setGroupName:
setGroupPayload:
setGroupStatusNotificationController:
setGuid:
setHandlers:
setHandlesForProfileID:username:service:handles:
setHardwareVersion:
setHasAcceptedSMSRequest:
setHasBeenProvisioned:
setHasDefaultAction:
setHasEndedSession:
setHasKtVersion:
setHasMatchingURIs:
setHasNgmVersion:
setHasNotifiedSuccess:
setHasPendingAllocation:
setHasPendingAllocation:forIDSSession:
setHasReceivedAPSDAck:
setHasRegisteredContainer:
setHasSpaceAvailable:
setHasStatus:
setHasTimestamp:
setHasTransparencyVersion:
setHasUnregisteredContainer:
setHeartbeatCenter:
setHelloMessage:
setHighPriority:
setHighPriorityConnectionSendingSet:
setHomePlmn:
setHttpMessageDelivery:
setIDCertificate:
setIDSSessionID:
setIDSVersion:
setIDStatusQueryController:
setIMEI:
setIMSI:
setIcon:
setIdentifier:
setIdentity:
setIdentityClassA:
setIdentityClassC:
setIdentityClassD:
setIdentityDataSource:
setIdentityPair:
setIdentityPrivateKey:
setIdentityToRegisterError:
setIdentityVersion:
setIdsDaemon:
setIdsDeviceConnectionUUID:
setIdsNRDeviceBridge:
setIdsNRPluginManager:
setIdsResponseCode:
setIdsServerBag:
setIdsUserID:
setIgnoreMaxRetryCount:
setImpactedServices:
setImportanceLevel:
setInFlightHeartbeatBlock:
setInFlightMessageCountLowWaterMark:
setInFlightResetBlock:
setInFlightSMSTimeoutBlock:
setIncomingDataFragments:
setIndividualPeerMessages:
setInferredExternalIP:
setInfoAttribute:
setInfos:
setInitialProcessTime:
setInitialServerTime:
setInitialSyncClientIDs:
setInitialSyncInProgress:forClientID:
setInitiatorsAcceptedToken:pushToken:
setInputBytesPerSecond:
setInstanceID:
setInterestingRegistrationProperties:
setIntermediateRootCert:
setInterruptionHandler:
setInvalidationHandler:
setInvitationManager:
setInvitationRetryCount:
setInvitationTimer
setInviteNeedsDelivery:
setInviteSentTime:
setInviteTimeout:
setInviteTimerCleared:
setInviteTimetout:forSessionWithUniqueID:
setInviteTimetout:forSessionWithUniqueID:messageContext:
setIpPreference:
setIsAdvertising:
setIsAltAccountPairing:
setIsAlwaysConnected:
setIsAudioEnabled:
setIsBeingHandedOff:
setIsBeingRemoved:
setIsBlackholed:
setIsBuildingContext:
setIsCDMA:
setIsClassCConnected:
setIsCloudConnected:
setIsCloudEnabled:
setIsControlChannel:
setIsDTLSEnabled:
setIsDefaultPairedDevice:
setIsDefaultPairedDevicePairedLocally:
setIsDefaultPairedDevicePairedRemotely:
setIsDefaultUser:
setIsDeviceInDualPhoneIdentityMode:
setIsDeviceInManualPhoneSelectionMode:
setIsDirectMsgChannel:
setIsDisabled:
setIsDonated:
setIsFinalMessage:
setIsForced:
setIsInServerBackoffMode:
setIsInUPlusOneMode:
setIsInternal:
setIsJoinAllocation:
setIsJunked:
setIsKeyExchangeEnabled:
setIsLightweightParticipant:
setIsLocal:
setIsLocalSetUpInProgress:
setIsMagnetIndicatingPeerIsAwake:
setIsMigratedSignature:
setIsNearby:
setIsNegotiating:
setIsNewUPlusOneSession:
setIsOnPhoneCall:forDeviceID:
setIsOptIn:
setIsPeerAlwaysConnected:
setIsPendingFetch:
setIsProxiedOutgoingMessage:
setIsPublicKeyDistributed:
setIsReady:
setIsReadyForEncrypting:
setIsRealTime:
setIsRegistered:
setIsRegistrationActive:
setIsReinitiate:
setIsSMSWarningUp:
setIsScreenSharingSession:
setIsSentToClient:
setIsSharedSession:
setIsTestRunning:
setIsUPlusOne:
setIsUserDisabled:
setIsVideoEnabled:
setIsVideoPaused:
setIvarQueue:
setJoinType:
setKeyIndex:
setKeyMaterialLength:
setKeyPairProvider:
setKeyPairSignature:
setKeyTransparencyVerifier:
setKeychainCache:
setKeychainData:service:account:accessGroup:allowSync:error:
setKeychainWrapper:
setKind:
setKtApplicationToKTRegStatus:
setKtCapable:
setKtDataForRegistration:
setKtDataSignature:
setKtLoggableData:
setKtPublicAccountKey:
setKtRegDataByServiceType:
setKtRegistrationDataManager:
setKtVersion:
setKvStore:
setLackAll:
setLanguage:
setLastBagRepairInterval:
setLastCall:
setLastCloudConnectedTime:
setLastConnection:
setLastCourierAck:
setLastDestinationSent:
setLastDisconnection:
setLastPacketTime:
setLastSelfVerifyDate:
setLastSendSMSTimer:
setLastStartTime:
setLastSuccessfulSentTime:
setLastSuccessfulUpsertDeviceRecord:
setLatestLinkType:
setLength:
setLinkLayerConnected:
setLinkLayerDisconnectTime:
setLinkPreferences:
setLinkPreferences:service:
setLinkPreferences:service:messageContext:
setLinkScore:
setLinkSuggestion:
setLinkType:
setListener:
setListenerID:
setListenerServices:commands:capabilities:
setListenerServices:commands:capabilities:messageContext:
setListeners:
setListenersByActivity:
setListening:
setListeningOnActivities:
setLiveMessageDelivery:
setLoadingRateLimiter:
setLocalBlob:
setLocalCID:
setLocalCN:
setLocalCallInfoData:
setLocalConnectionType:
setLocalContext:
setLocalDelivery:
setLocalDestinationDeviceUUID:
setLocalDeviceUpdatedHandler:
setLocalICEData:
setLocalKeyMaterial:
setLocalNATIP:
setLocalNATType:
setLocalParticipantID:forGroupID:
setLocalPartyID:
setLocalSA:
setLocalSKEData:
setLocalSetupInProgress:
setLocalUnauthenticatedFullIdentity:
setLocale:
setLock:
setLockdownManager:
setLogToRegistration:
setLoggingSequenceIncoming:
setLoggingSequenceOutgoing:
setLoginID:
setMEID:
setMainAccountGuid:
setMainAccountUUID:
setMainID:
setManateeRetries:
setManualQueueRemoval:
setMasterKeyIdentifiersReceivedByClient:
setMasterKeyMaterials:
setMaxAllowedMessageSize:
setMaxChunkSize:
setMaxCompatibilityVersion:
setMaxConcurrentMessages:
setMaxConcurrentStreams:
setMaxQueueSize:
setMaxRecipientMemory:
setMaxSize:
setMembers:forGroup:sessionID:lightweightStatusDict:
setMembershipURIs:
setMergeID:
setMergePolicyType:
setMessage:
setMessageCount:
setMessageDelivery:
setMessageHashStore:
setMessageID:
setMessagePriority:
setMessageSenderID:
setMessageSequenceNumber:
setMessageServerTimestamp:
setMessageToSend:
setMessagesGroupContext:
setMessenger:
setMetadataBlob:
setMidSynchronize:
setMigrated:
setMigrationBlock:
setMigrationContext:
setMigrationDefaultKey:
setMigrationPromise:
setMigrationTracker:
setMinCompatibilityVersion:
setModel:
setModifyRecordZonesCompletionBlock:
setModifyRecordsCompletionBlock:
setMostRecentIDSRegistrationReason:
setMultiQueue:
setMultiple:remove:appID:
setMuted:
setMuted:forSessionWithUniqueID:
setMuted:forSessionWithUniqueID:messageContext:
setNSUUID:onDeviceWithUniqueID:forService:
setNSUUID:onDeviceWithUniqueID:forService:messageContext:
setName:
setNeedsMigration:
setNeedsProvisioning:
setNeedsRenewal:
setNeedsToCheckPhoneNumberState:
setNegativeRegistrationUpdateCache:
setNegotiationCount:
setNegotiationTimer
setNetworkChangeNotifier:
setNewPg:
setNextByte:
setNextComponent:
setNextLocalMasterKeyMaterial:
setNextRegistrationDate:
setNextSendSMSDate:
setNgmPublicIdentity:
setNgmVersion:
setNonCloudWaking:
setNonWaking:
setNotificationCenter:
setNotificationDelayInSeconds:
setNotifyWhenConnectionReceivesBytes:
setNrDeviceMonitor:
setNrDevicePreferences:
setNrDevicePreferencesHandler:
setNrMonitorQueue:
setNumberOfAttemptsWithoutSuccessfulSend:
setNumberOfPreflights:
setNumberOfSuccessfulSends:
setNwConnection:
setOSVersion:
setOTRController:
setOTREncryptionBlock:decryptionBlock:
setOTRTestBlockFromCompletionBlock:token:
setObject:
setObject:forKey:
setObject:forKeyedSubscript:
setObserver:
setObserverProxies:
setOnlyAllowReads:
setOperation:
setOpportunisticCache:
setOpportunisticQueue:
setOptedIn:
setOptions:
setOriginPersister:
setOriginalTimestamp:
setOriginalbtUUID:
setOriginalfromID:
setOsVersion:
setOtrTestBlock:
setOutOfBandKey:
setOutgoingStallDetector:
setOutgoingStallDetectorName:
setOutputBytesPerSecond:
setPLMN:
setPNRReason:forUserUniqueIdentifier:
setPNRReasonByUserID:
setPacketBufferHandler:
setPacketBufferReadHandler:
setPacketLossTimer:
setPacketNotificationFilter:linkID:uniqueTag:isEnabled:
setPacketNotificationFilter:uniqueTag:isEnabled:
setPacketsPerSecond:
setPacketsReceived:
setPairWithSPPLink:
setPairedDeviceCBUUIDString:
setPairedDeviceInfo:
setPairedDeviceInfo:messageContext:
setPairedDeviceManagerCollaborator:
setPairingCollaborator:
setPairingManager:
setPairingProtocolVersion:
setPairingToken:
setParentPg:
setParentVersion:
setParticipantData:
setParticipantID:
setParticipantIDToAliasConverter:
setParticipantInfo:
setParticipantMirageHandshakeBlob:
setParticipantType:relayGroupID:relaySessionID:sessionStateCounter:
setPassword:forUsername:onService:
setPassword:forUsername:onService:messageContext:
setPasswordForProfileID:username:service:password:outRequestID:completionBlock:
setPasswordManager:
setPausable:
setPayload:
setPayloadMetadata:
setPeerCN:
setPeerCN:callID:
setPeerIDManager:
setPeerMap:
setPeerProtocolVersion:
setPeerProtocolVersion:forCallID:
setPeerResponseIdentifier:
setPendingCloudEnable:
setPendingCloudFlagOnDefaultPeer
setPendingDependentCheck:
setPendingResponseTokens:
setPeripheralManagers:
setPersistentMap:
setPersister:
setPersonalCBUUIDString:
setPhoneBookNumber:
setPhoneNumberValidationRetryCount:
setPhoneNumberValidationStartDate:
setPhoneRepairTimer:
setPhoneUser:
setPhoneUserSubscriptionSource:withRequestUUID:
setPhoneUserSubscriptionSource:withRequestUUID:messageContext:
setPlistCachePath:
setPlugin:
setPluginImplementsWatchDidStartAdvertising:
setPluginImplementsWatchDidStopAdvertising:
setPnrReason:
setPolicy:
setPolicyTrafficClassifiers:
setPort:
setPredicate:
setPreferInfraWiFi:
setPreferInfraWiFi:service:
setPreferInfraWiFi:service:messageContext:
setPreferInfraWiFi:services:
setPreferInfraWiFiRequest:services:
setPreferences:forSessionWithUniqueID:
setPreferences:forSessionWithUniqueID:messageContext:
setPreflighStackStore:
setPreflightStack:forIdentifier:
setPreviousAccessToken:
setPreviousLocalStableKeyMaterial:
setPreviousRegisteredIdentityContainer:
setPreviousRelayIP:
setPrimaryRegistrationURIs:
setPrioritizedTokenList:
setPriority:
setPriorityQueue:
setPrivateDeviceData:
setPrivateKey:
setProduct:
setProductBuildVersion:
setProductVersion:
setProfileID:
setProgressBlock:
setProperties:
setProperties:forUser:
setProtobuf:
setProtocol:
setProtocolVersion:
setProvider:
setPseudonymAlias:
setPseudonyms:
setPublicIdentity:
setPublicIdentityData:
setPublicKey:
setPublicKeyData:
setPublicKeyStorage:
setPublishedStreams:
setPurgeAtExpiration:
setPurgeClientDataBlocks:
setPushCertificate:
setPushHandlerPort:
setPushListener:
setPushPriority:
setPushPrivateKey:
setPushPublicKey:
setPushToken:
setPushTokenToQRSessionID:
setPushTokenToSKMsMapping:
setPushTopic:
setQrError:
setQrReason:
setQueryCompletionBlock:
setQueryHandler:
setQueryQueue:
setQueue:
setQueueManager:
setQueueMap:
setQueueOneIdentifier:
setQuickRelayRequest:
setQuickRelayRequestsCount:
setQuickRelaySessionToken:
setQuickSwitchHelper:
setRapportClient:
setRateLimitMap:
setRealTimeEncryptionPublicKey:forDevice:fromID:groupID:sessionID:serverDate:wrapMode:
setRealm:
setRealmByListener:
setReason:
setRecentlyBlockedHandles:
setRecipientPushToken:
setRecipients:
setRecordFetchedBlock:
setReducerBlock:
setReestablishmentRequestReceiveTime:
setRegionBasePhoneNumber:
setRegionID:
setRegionServerContext:
setRegistered:
setRegisteredDeserializationError:
setRegisteredKTData:
setRegisteredKeychainError:
setRegistrationAttemptRateLimiter:
setRegistrationCert:
setRegistrationController:
setRegistrationDate:
setRegistrationKeyManager:
setRegistrationProperties:
setRegistrationQueue:
setRegistrationReasonTracker:
setRegistrationStateChangedCounter:
setRegistrationStateChangedDate:
setRegistrationStatus:
setRegistrationStatus:error:alertInfo:
setRegistrationType:
setRegistrations:
setRelayBuildVersion:
setRelayExpiryTimeStamp:
setRelayHighPriorityPort:
setRelayIP:
setRelayIPv6:
setRelayInitiate:
setRelayPort:
setRelaySessionID:
setRelaySessionKey:
setRelaySessionToken:
setRelaySoftwareVersion:
setRemoteAssumeRemoteDeviceEncryption:
setRemoteBlob:
setRemoteCID:
setRemoteCallInfoData:
setRemoteConnectionGUID:
setRemoteConnectionType:
setRemoteContext:
setRemoteDeviceEncryptionInfo:
setRemoteDeviceVersion:
setRemoteICEData:
setRemoteInstanceID:
setRemoteNATType:
setRemoteObjectInterface:
setRemotePartyID:
setRemoteSA:
setRemoteSKEData:
setRemoteUnauthenticatedPublicIdentity:
setRemoteUseCloudPairedControlChannel:
setRemoteUsePhoneContinuityLocalMessage:
setReply:
setReportAction:
setReportingDataBlob:
setRepresentedApplicationBundle:
setReqCount:
setRequest:
setRequestID:
setRequestIDStr:
setRequestIDToSession:idsSessionID:
setRequests:
setRequireAll:
setRequireAllRegistrationProperties:
setRequireBT:
setRequireBluetooth:
setRequireLackOfRegistrationProperties:
setRequireLocalWiFi:
setRequireUserInteraction:
setRequiredCapabilities:
setRequiredCapabilities:requiredLackOfCapabilities:
setRequiredCapabilities:requiredLackOfCapabilities:forSessionWithUniqueID:
setRequiredCapabilities:requiredLackOfCapabilities:forSessionWithUniqueID:messageContext:
setRequiredForMessaging:
setRequiredLackOfCapabilities:
setRequiredUpdate:
setResolvedEndpointsDidUpdateHandler:
setResourceMetadata:
setResourcePath:
setResponseAbsintheResponse:
setResponseAbsintheServKey:
setResponseAccessTokens:
setResponseAccessoryID:
setResponseAdminAcccessToken:
setResponseAlertInfo:
setResponseBasePhoneNumber:
setResponseCarrierToken:
setResponseCertificate:
setResponseCertificateData:
setResponseCertificateExpiration:
setResponseCode:
setResponseConsentTokens:
setResponseDeviceScoreNonce:
setResponseEngramID:
setResponseEntries:
setResponseError:
setResponseExpiry:
setResponseExtraInfo:
setResponseHandles:
setResponseIdentities:
setResponseMechanisms:
setResponseMessage:
setResponseOrigin:
setResponsePresenceTopic:
setResponseRegionID:
setResponseRegistrations:
setResponseServiceUserIDs:
setResponseServices:
setResponseSessionInfo:
setResponseSpamMessage:
setResponseSpamMessages:
setResponseStatus:
setResponseTimeStamp:
setResponseUserID:
setResponseValidated:
setResponseVersion:
setResponses:
setRestoreMonitor:
setRestoreTimer:
setRestrictions:
setResultExpected:
setResumeResourceTransfers:
setRetries:
setRetryCount:
setRetryInAirplaneMode:
setReunionSyncClientIDs:
setReunionSyncCollaborator:
setReunionSyncInProgress:forClientID:
setRollingError:
setRoute:
setSIMPhoneUserSynchronizer:
setSIMResponder:
setSMSSignature:mainID:
setSSRCRecv:
setSSRCSend:
setSavePolicy:
setSaveQueue:
setSaveTimer:
setScheduledBlock:
setScopeID:
setScoringNonce:
setSd:
setSdCopy:
setSdNumberNoClose:
setSdOriginal:
setSeal:
setSelectedPhoneNumberRegistrationSubscriptionLabels:
setSelectedPhoneNumberRegistrationSubscriptionNumber:
setSelectedSubscriptions:withCompletion:
setSelector:
setSelfAllocationCount:
setSelfHandle:
setSelfHealRateLimiter:
setSelfURI:
setSelfVerifyThrottleTime:
setSendBlock:
setSendMode:
setSendOnePerToken:
setSender:
setSenderExternalIP:
setSenderURI:
setSent:
setSentMessageDataSize:
setSentToRemotes:
setSeqRecvStart:
setSeqSend:
setSeqSendStart:
setSequenceNumber:
setSerialNumber:
setSerialPersistQueue:
setServerBag:
setServerDesiredKeyMaterials:signer:
setServerDesiredMaterialsForSession:materials:signer:
setService:
setServiceAdHocType:
setServiceAllowLiveMessageDelivery:
setServiceAllowLocalDelivery:
setServiceAllowProxyDelivery:
setServiceAllowWiProxDelivery:
setServiceConnection:
setServiceConnector:
setServiceController:
setServiceDuetIdentifiers:
setServiceIdentifier:
setServiceIndexToKTRegDataConfigs:
setServiceIndexToKeyConfigs:
setServiceIsDSBased:
setServiceMinCompatibilityVersion:
setServiceName:forConnectionUUID:
setServicePushTopic:
setServiceSignatures:
setServiceTypes:
setServiceUseiMessageCallerID:
setServiceUserID:
setServiceWantsReflectedSend:
setServiceWantsTinkerDevices:
setServices:
setSessionController:
setSessionForceInternetInvitation:
setSessionID:
setSessionIDStr:
setSessionInfoRequest:
setSessionNegotiationComplete:
setSessionNegotiationStart:
setSessionReady:
setSessionToBlockMap:
setSessions:
setSharedSession:
setSharedSessionHasJoined:
setShouldAllowCloudDelivery:
setShouldAllowLiveMessageDelivery:
setShouldAutoRegisterAllHandles:
setShouldConnectToQRServer:
setShouldEnforceRemoteTimeout:
setShouldHaveRegisteredIdentity:
setShouldHaveUnregisteredIdentity:
setShouldIncludeDefaultDevice:
setShouldListen:
setShouldListen:forActivity:completion:
setShouldPostNotifications:
setShouldProtectTrafficUsingClassA:
setShouldQuickSwitchAfterIPSecConnected:
setShouldReregOnManateeAvailability:
setShouldSetAllowlistUUIDForStreamingSocket:
setShouldShowSubordinateIcon:
setShouldStartBTLinkManager:
setShouldStopBTDatagramLink:
setShouldSupressRepairLogic:
setShouldUseAbsinthe:
setShouldUseCrossLayerLogging:
setShouldUseIPsecLink:
setShouldUseIPsecLinkForDefaultPairedDevice:
setSigAlgorithm:
setSignature:
setSigningSession:
setSilentlyFailMessagesOnSwitch:
setSimDeactivationRequestRateLimiter:
setSmallWindowSMSTimeoutRateLimiter:
setSocketTrafficClass:
setSoftwareVersion:
setSourcePeerID:
setSpamMessages:
setSpec:
setSpecific:
setSrtpProtocolVersion:
setStableKeyIdentifiersSentToClient:
setStableKeyMaterials:
setStartConnectingDate:
setStartTime:
setState:
setState:forProperty:deviceUniqueID:
setStateFlags:
setStateMachineByUserID:
setStateManager:
setStateProvider:
setStatus:
setStoredActivityTopics:
setStoredSize:
setStreamID:
setStreamInfo:
setSubService:
setSubServiceAccountUUID:
setSubscribedStreams:
setSubsequentGossipChance:
setSubsystem:
setSuccess:
setSuccess:forConnectionUUID:
setSuccessful:
setSuccessfulSync:
setSuperService:
setSupportedMessageTypes:
setSupportedServicesToken:
setSupportsCloudConnections:
setSupportsLegacyOTRSessionToken:
setSuspendTraffic:
setSuspendTrafficCheckTime:
setSuspended:
setSyncCredential:
setSyncQueue:
setSystemAccountAdapter:
setSystemAccountUserSynchronizer:
setSystemMonitor:
setTargetPeerID:
setTargetService:
setTargetSessionToken:
setTempPhoneCredential:forID:
setTempUserID:
setTemporaryPhoneEmail:
setTemporaryPhoneUserSynchronizer:
setTerminusConnected:
setTerminusNearby:
setTerminusRegistered:
setTestData:
setTimeBase:
setTimeBase:forIDSSession:
setTimeConnected:
setTimeDisconnected:
setTimeEnqueued:
setTimeSent:
setTimeSubscribed:
setTimeZone:
setTimeout:
setTimeoutIntervalForRequest:
setTimerBlock:
setTimerMap:
setTimestamp:
setTitle:
setToDeviceID:
setToURI:
setToken:
setTokens:
setTopic:
setTopics:
setTopics:forListener:
setTopicsToListenOn:
setTotalUnitCount:
setTrafficClass:
setTransactionQueue:
setTransient:
setTransparencyDaemon:
setTransparencyVerifier:
setTransparencyVersion:
setTransportType:
setTrustedServices:
setTtlCache:
setTtlInSeconds:
setUDID:
setUPlusOneModeForSessionID:isUPlusOneEnabled:
setURIs:
setUUID:
setUint32Key:
setUnSavedidentityClassA:
setUnSavedidentityClassC:
setUnSavedidentityClassD:
setUnappliedRollingTicket:
setUncompressedData:
setUnderlyingService:
setUniqueID:
setUnknownSenderURI:
setUnregisteredDeserializationError:
setUnregisteredIdentityContainer:
setUnregisteredKTData:
setUnregisteredKeychainError:
setUnverifiedPushTokens:
setUploadedToKVS:
setUriSuggester:
setUris:
setUrisToParticipantIDs:
setUseBTDatagramPipe:
setUseDictAsTopLevel:
setUseDynamicServiceName:
setUsePairingKey:
setUseQRDirectly:
setUseSecureQRControlMessage:
setUseStunMICheck:
setUsedMMCS:
setUser:
setUserAccountSynchronizer:
setUserAgent:
setUserConfiguration:
setUserConsentDeniedForCTPNR:
setUserDefaults:
setUserHandle:
setUserID:
setUserInfo:
setUserInfoObject:forKey:
setUserStore:
setUserUniqueIdentifier:
setUserVisibleName:
setUsersToTimers:
setUsersToTimersLock:
setUsesNotificationCenter:
setUtunController:
setUtunDeliveryController:
setUtunSocket:
setValidateContextDate:
setValidateContextTTL:
setValidationContextDisabled:
setValidationContextQueue:
setValidationData:
setValidationInfoByMechanism:
setValidationMessageSendBlock:
setValidationSession:
setValue:forKey:
setValue:forKey:appID:
setVerboseFunctionalLogging:
setVerboseLogging:
setVerbosePerformanceLogging:
setVerifiedPushTokens:
setVersion:
setVettedEmails:
setVifName:
setWaitingForMigration:
setWakingPushPriority:forTopic:messageContext:
setWakingTopics:opportunisticTopics:nonWakingTopics:forListener:
setWantsCertifiedDelivery:
setWantsDeliveryStatus:
setWantsFirewallDonation:
setWantsMultipleResponses:
setWantsNotificationResponsesDelivered
setWantsProgress:
setWantsResponse:
setWantsRetries:
setWasDisabledAutomatically:
setWasInitiallySetupUsingIDSPairing:
setWasPrimary:
setWasWrittenToConnection:
setWatchesDataProtectionLockState:
setWeight:
setWiFiAssistState:
setWiFiAssistState:isWiFiAssistEnabled:
setWideWindowSMSTimeoutRateLimiter:
setWillSendBlock:
setWithArray:
setWithObject:
setWithSet:
setWorkloop:
setWpConnectionErrorCode:
setWpConnectionErrorDomain:
setWpConnectionErrorUserInfo:
setWrapMode:
setWriteCoalescingDelay:
setWriteCoalescingLeeway:
setWriteHandler:
setXpcQueue:
setZoneID:
set_candidateEmails:
setup
setupAccountWithCompletionBlock:
setupAccountWithLoginID:serviceName:accountType:accountConfig:authToken:password:transactionID:
setupAccountWithLoginID:serviceName:accountType:accountConfig:authToken:password:transactionID:messageContext:
setupActivityMonitorClient:forActivity:
setupCompleteForAccount:transactionID:setupError:
setupCompleteWithInfo:
setupCompletedForPairedDeviceWithID:completion:
setupContainerCache
setupDataConnectionWithDeviceConnectionInfo:options:
setupIPsecLinkForDeviceConnectionInfo:
setupKeys
setupLocalAccountForService:
setupNewAllocation:sessionID:fromIdentity:fromURI:fromService:options:connectReadyHandler:
setupNewAllocationToDevice:options:connectReadyHandler:
setupNewDeviceConnectionInfoForCbuuid:deviceUniqueID:identityPair:remoteDeviceEncryptionInfo:shouldUseIPsecLink:
setupNewIncomingSessionWithOptions:
setupNewOutgoingSessionWithOptions:
setupNewSessionInfoWithToken:
setupNewSessionWithConfiguration:
setupNewSessionWithConfiguration:messageContext:
setupPhoneNumberRepairTimer
setupRealtimeEncryptionController:forAccountWithID:
setupRealtimeEncryptionController:forAccountWithID:messageContext:
setupServerMessagingClient:withUUID:forTopic:
setupUTunForDeviceConnectionInfo:
setupWithLocalURI:remoteURI:pushToken:service:cert:
setupWithLocalURI:remoteURI:pushToken:service:cert:keyType:keyDiversifier:
sharedApplicationData
sharedDefaults
sharedFactory
sharedInstance
sharedInstanceForBagType:
sharedInstanceForDataProtectionClass:
sharedInstanceWithPortName:
sharedSession
sharedSessionHasJoined
sharedState
shortDescription
shortDescriptionForDataProtectionClass:
shortDescriptionForLocalAddress:remoteAddress:
shouldAllowCloudDelivery
shouldAllowLiveMessageDelivery
shouldAllowProxyDelivery
shouldAutoRegisterAllHandles
shouldConnectToQRServer
shouldDisableAccount:
shouldDisableService:
shouldDropMessageIfOutOfFamilyPhoneNumber:forService:withAppleIDAccount:
shouldEnableHomeNumber
shouldEncrypt
shouldEnforceRemoteTimeout
shouldFirewallDropForAllCategories
shouldFirewallDropMessageForFromID:mergeID:service:
shouldForwardErrorForEncryptionType:forceECC:
shouldGossipToURI:
shouldHandleMessageWithUpdateHash:command:
shouldHaveRegisteredIdentity
shouldHaveUnregisteredIdentity
shouldIncludeDefaultDevice
shouldIncludeDefaultDeviceAsDestinationForMessageForFromID:
shouldListen
shouldLoadService:
shouldMinimizeBagCacheTime
shouldNotSyncPhoneNumberAccounts
shouldPairDirectlyOverIPsec
shouldPostNotifications
shouldPreventDuplicateTokensInAllocationForServiceIdentifier:
shouldProxyMessageForService:toIdentifier:
shouldQueryOnEveryQRAllocationForServiceIdentifier:
shouldQueryUpdateOfParams:
shouldQuickSwitchAfterIPSecConnected
shouldReAuthenticateForGDRResultCode:retries:
shouldRegisterOnManateeAvailability
shouldRegisterUsingDSHandle
shouldReplace:
shouldReportMetric
shouldReportUPlusOneKey
shouldReregOnManateeAvailability
shouldReregisterOnManateeAvailabilityWithCompletion:
shouldRollEncryptionIdentity
shouldSelfVerifyBecauseOfPeer
shouldSendToDestination:
shouldSetAllowlistUUIDForStreamingSocket
shouldShowPeerErrorsFor:pushToken:fromURI:service:
shouldShowUsageNotifications
shouldSilentlyFailMessagesOnSwitch
shouldStopBTDatagramLink
shouldSupressRepairLogic
shouldSyncAccounts
shouldSyncTrustCircleAfterSelfQueryForServiceIdentifier:
shouldTTLCacheEvictExpiredItems:
shouldUseAbsinthe
shouldUseCrossLayerLogging
shouldUseIPsecLink
shouldUseIPsecLinkForDefaultPairedDevice
shouldUseIPsecLinkForDefaultPairedDeviceAndLogQuery:
shouldUseSelfTokens
shouldVerifySignatureForMaterialType:
shutDownSim2HostServer
shutdown
sigAlgorithm
sign:forType:error:
signAndProtectMessage:withError:
signData:completionBlock:
signData:serverTimestamp:
signData:usingApplicationKeyIndex:diversifier:error:
signData:withAlgorithm:onService:options:requestUUID:
signData:withAlgorithm:onService:options:requestUUID:messageContext:
signData:withError:
signData:withSignatureType:error:
signData:withType:onQueue:error:
signData:withType:onQueue:withCompletion:
signature
signatureWithObjCTypes:
signatures
signedData
signerWithKeyType:keyDiversifier:service:
signingSession
signingTimestamp
silentlyFailMessagesOnSwitch
silentlySetAuthenticationCertificate:forUser:
silentlySetSelectedPhoneNumberRegistrationSubscriptionLabels:
simDeactivationInfoRateLimitCount
simDeactivationInfoRateLimitInterval
simDeactivationRequestRateLimiter
simulateDecryptionFailure
sizeOfKeysWithValues
slot
slotID
slowCPUDevice
smallDescription
smallWindowSMSTimeoutRateLimiter
smsIDs
smsSendDate
smsSignature
smsSignatureForID:
socket
socketClosedForService:isToDefaultPairedDevice:closeError:socketError:bytesSent:packetsSent:bytesReceived:packetsReceived:
socketOpenedForService:isToDefaultPairedDevice:openError:socketError:
socketPairConnection
socketPairMessage
socketPairMessageWithCommand:streamID:sequenceNumber:messageID:expectsPeerResponse:wantsAppAck:compressPayload:compressed:didWakeHint:peerResponseIdentifier:messageUUID:payload:protobuf:resourcePath:resourceMetadata:expiryDate:
socketTrafficClass
sortUsingComparator:
sortedArrayUsingComparator:
sortedArrayUsingSelector:
sourcePeerID
sourceType
spamMessage
spamMessages
spamReporting
spec
specific
sponsorAlias
srtpProtocolVersion
stableGroupID
stableKeyIdentifiersSentToClient
stableKeyMaterialForGroup:
stableKeyMaterials
stablekeyMaterialCacheToGroup:
standardUserDefaults
start
startAdvertising:
startAdvertisingOfType:withData:
startAdvertisingOfType:withData:withOptions:
startBTDatagramLinkForDeviceUniqueID:cbuuid:
startBagLoad
startCollectingMetricsForServerStorageStateMachineFor:isPrimary:
startCompressionForConnection:deviceConnectionInfo:
startConnectingDate
startConnectionAsInitiator:peerProtocolVersion:errorHandler:
startConnectionForDevice:isInitiator:remotePartyID:useStunMICheck:
startConnectionWithCallID:usingInviteData:isCaller:relayResponseDict:didOriginateRelayRequest:capabilities:error:
startControlChannelWithDevice:endpoint:
startCountingDown
startDataChannelWithDevice:genericConnection:serviceConnectorService:endpoint:
startDatagramLink
startDatagramLinkWithEndpointIdentifier:
startDatagramLinkWithName:
startFairplayAuthenticationForDeviceWithCbuuid:
startGlobalLinkForDevice:
startIdsNRDeviceBridgeAndPreferenceHandlerWithIdentifier:
startKeepAliveTimer:relaySessionID:
startLinkForDeviceUniqueID:cbuuid:
startLinkProbing:
startLinkProbing:options:
startListeningOnActivity:
startListeningOnClientSocket:isRawSocket:
startOTRTest:priority:
startOTRTest:priority:messageContext:
startQRSession
startQueryForURIs:fromIdentity:fromURI:fromService:context:completionBlock:
startQueryForURIs:fromIdentity:fromURI:fromService:forSending:forRefresh:completionBlock:
startQueryForURIs:fromIdentity:fromURI:fromService:forSending:forRefresh:isForced:completionBlock:
startRequestWithCompletionHandler:
startScanningForType:withData:mask:
startScanningForType:withData:mask:boostedScan:duplicates:
startScanningForType:withData:mask:peers:
startScanningForType:withData:mask:peers:boostedScan:duplicates:
startScanningForType:withData:peers:
startTime
startTrackingActiveRegistration:
startTrackingRegisteredAccountID:
startTrackingRegistration:
startUDPGlobalLinkForDevice:
startWithOptions:
state
stateFlags
stateMachineByUserID
stateManager
stateProvider
statistics
statisticsForDataProtectionClass:
status
statusFlags
sthReceivedFromGossipReceipient:
sthsReceivedFromPeers:error:
stop
stopAdvertisingOfType:
stopAnyUnfinishedSynchronization
stopAtAuthentication
stopBTDatagramLinkForDeviceUniqueID:cbuuid:
stopCallID:
stopCollectingMetricsForServerStorageStateMachineFor:
stopDatagramLink
stopDatagramLinkWithEndpointIdentifier:
stopDatagramLinkWithName:
stopGlobalLinkForDevice:
stopIdsNRDeviceBridgeAndPreferenceHandler
stopKeepAlive:
stopKeepAlive:linkIDs:
stopKeepAliveTimer:relaySessionID:
stopLinkForDeviceUniqueID:cbuuid:disconnectWP:
stopLinkProbing:
stopLinkProbing:options:
stopListeningOnActivity:
stopLocalPairingForDeviceWithID:completion:
stopLocalSetup
stopScanningForType:
stopTrackingRegisteredAccountID:
stopTrackingRegistration:
stopUDPGlobalLinkForDevice:
storageIdentifier
storageItemNameForLegacyIdentityIdentifier:
storeAccountIdentityItem:withCompletion:
storeAccountTask
storeActivityDescription:forActivity:
storeEncryptionSequenceNumber:groupID:
storeFullCluster:completion:
storeIncomingMessage:forTopic:fromID:messageUUID:messagePayload:dedupBehavior:completionBlock:
storeIncomingMessage:forTopic:fromID:messageUUID:messagePayload:isLocal:dedupBehavior:completionBlock:
storeItem:withCompletion:
storeOutgoingMessageWithSendParameters:guid:canSend:canBypassSimilarMessages:fromQueue:completionBlock:
storeSessionKey:token:
storeSubscription:forActivity:
storeUpdates:forActivity:
storedActivityTopics
storedDescriptionForActivity:
storedIncomingFamilyMessage
storedSize
storedUpdatesForActivity:
stream:handleEvent:
streamID
streamInfo
streamWithParticipantID:streamArray:anyParticipant:anyStream:
string
stringByAppendingFormat:
stringByAppendingString:
stringByPaddingToLength:withString:startingAtIndex:
stringByRemovingCharactersFromSet:
stringByReplacingOccurrencesOfString:withString:
stringByResolvingAndStandardizingPath
stringComponentsForServiceConnectorService:
stringForKey:
stringFromContact:style:
stringGUID
stringGUIDForObject:
stringValue
stringWithCString:encoding:
stringWithFormat:
stringWithLTREmbedding
stringWithUTF8String:
strongToStrongObjectsMapTable
stunRequestToBuffer:outputLength:transactionID:reqCount:userName:usernameLen:sendTime:keyData:remainingLength:
stunResponseToBuffer:outputLength:transactionID:reqCount:echoTime:delay:keyData:remainingLength:
subActivity
subService
sub_services
subarrayWithRange:
subdataWithRange:
submitAWDMetricsForIDSSessionAcceptReceived
submitAWDMetricsForIDSSessionAcceptSent
submitAWDMetricsForIDSSessionCancelReceived
submitAWDMetricsForIDSSessionCancelSentWithRemoteEndReason:numberOfRecipients:
submitAWDMetricsForIDSSessionCompleted
submitAWDMetricsForIDSSessionConnected
submitAWDMetricsForIDSSessionDeclineReceived
submitAWDMetricsForIDSSessionDeclineSent
submitAWDMetricsForIDSSessionInvitationReceived
submitAWDMetricsForIDSSessionInvitationSentWithNumberOfRecipients:
submitAWDMetricsForIDSSessionReinitiateConnected
submitAWDMetricsForIDSSessionReinitiateRequested
submitAWDMetricsForIDSSessionReinitiateStarted
submitAWDMetricsForIDSSessionStarted
submitAWDMetricsForIDSSessionWithEndReason:
subscribeForInfo:onActivity:withCompletion:
subscribeInfo:forActivity:withCompletion:
subscribedStreams
subscribedURIs
subscriptionSlot
subsequentGossipChance
subsequentGossipChanceFromBag
subservicesByPrimaryService
substringFromIndex:
substringToIndex:
subsystem
successful
superAccount
superService
superclass
supportIPsec
supportedMessageTypes
supportedServicesToken
supportedVersion
supportsAnimojiV2
supportsAppleIDIdentification
supportsApplePay
supportsCloudConnections
supportsDeviceToDeviceEncryption
supportsFMDV2
supportsHDRdecoding
supportsHEIFEncoding
supportsIdentification
supportsKeySharing
supportsLegacyOTRSessionToken
supportsMMS
supportsMessageOfType:
supportsReinitiate
supportsSMS
supportsSMSIdentification
supportsSecureCoding
supportsSimultaneousVoiceAndDataRightNow
supportsTethering
supportsUWB
supportsVenice
suspendLink:
suspendOTRNegotiation:
suspendSessionNegotiation:askedByPairedDevice:
suspendSocketWithOptions:
suspendTraffic
suspendTrafficCheckTime
suspended
switchActivePairedDeviceWithID:completion:
syncCacheWithKeychain
syncCloudPriorityMessageStatistics
syncCredential
syncPriorityMessageStatistics
syncQueue
syncQueueForPriority:
synchronize
synchronizeAccountsWithRemoteInfo:service:
synchronizeAppID:
synchronizeWithCompletionHandler:
sysdiagnose_keyTransparency
sysdiagnose_oversized
systemAccountAdapter
systemAccountUserSynchronizer
systemApplicationDidBecomeActive
systemApplicationDidEnterBackground
systemApplicationDidResume
systemApplicationDidResumeForEventsOnly
systemApplicationDidSuspend
systemApplicationDidSuspendForEventsOnly
systemApplicationWillEnterForeground
systemApplicationWillResignActive
systemDidBecomeIdle
systemDidBecomeUnidle
systemDidEnterDataProtectionLock
systemDidEnterMemoryPressure
systemDidFastUserSwitchIn
systemDidFastUserSwitchOut
systemDidFinishMigration
systemDidLeaveDataProtectionLock
systemDidLeaveFirstDataProtectionLock
systemDidLeaveMemoryPressure
systemDidLock
systemDidStartBackup
systemDidStopBackup
systemDidWake
systemIsShuttingDown
systemMonitor
systemMonitorAdapter
systemRestoreStateDidChange
systemScreenDidPowerDown
systemScreenDidPowerUp
systemSupportsPhoneNumberRegistration
systemSupportsServiceType:accountType:isTemporary:
systemSupportsServiceType:registrationType:
systemWillShutdown
tapToRadarWithTitle:message:context:completion:
targetPeerID
targetService
targetSessionToken
targetToken
tbsKTIDSRegistrationData
tearDownEncryptionForDeviceUniqueID:cbuuid:
tempPhoneCredentialForID:
tempUserID
temporaryPhoneEmail
temporaryPhoneUserSynchronizer
temporaryPhoneUserWithFinishedRegistration
temporaryPhoneUserWithNotifiedSuccess
temporaryPhoneUserWithUpdatedExpirationDate:
terminateCallDueToIdleClientForLink:
terminateStateMachineForTopic:
terminusConnected
terminusNearby
terminusRegistered
testCloudQRConnection:
testCloudQRConnection:messageContext:
testData
testOptions
test_receiveData:forKey:fromParticipant:
then:
threadSafeServiceWithAccountUniqueID:
ticket
timeConnected
timeDisconnected
timeEnqueued
timeIntervalSince1970
timeIntervalSinceDate:
timeIntervalSinceNow
timeIntervalSinceReferenceDate
timeOfEvent
timeSent
timeSinceDateOnAccount:
timeSinceLastRegistrationFailureOnAccount:
timeSinceLastRegistrationSuccessOnAccount:
timeSubscribed
timeToCacheNegativeResultsForService:
timeToCacheResultsForIDStatus:forService:
timeToCacheURI:fromURI:service:forStatus:
timeToCacheUnknownResultsForService:
timeToSend
timeZoneForSecondsFromGMT:
timedOutWaitingForSMS
timerBlock
timerMap
timestamp
timing
tinkerMessagingOnly
toDeviceID
toURI
token
tokenURINegativeCacheItemForTokenURI:service:
tokens
topMechanism
topic
topicForStreamID:
topicStringToSubscribedInfo
topicsToListenOn
totalBytes
totalBytesReceived
totalFragmentCount
totalPacketsReceivedForDevice:services:
totalPacketsSentForDevice:services:
trackMMLMessages:forURIs:
trackMMLMessages:forURIs:messageQueue:
trackMessages:forURIs:
trackMessages:forURIs:messageQueue:
trackedRegistrations
trackingPreventionSecret
trafficClassesChanged
transactionID
transactionQueue
transient
translateServiceName:toStreamID:createIfNotFound:mappingCreated:remoteInstanceID:remoteInstanceIDChanged:
translateStreamID:toServiceName:remoteInstanceID:remoteInstanceIDChanged:
transparencyBlob
transparencyDaemon
transparencyGetKTSignatures:complete:
transparencyStatus
transparencyTicketForQueryResultsWithIndex:verificationState:entries:localURI:
transparencyTicketForRegistrationWithIndex:verificationState:entry:
transparencyTicketsForURIs:service:fromURI:
transparencyVerifier
transparencyVerifierSharedInstance
transparencyVersion
transparentEndpointViewer
transportType
triggerAllFirewallNotificationsWithHandle:delay:service:
triggerBTCorruptionRecovery
triggerBTCorruptionRecoveryForCBUUID:
triggerCaptureWithEvent:context:completion:
triggerCaptureWithEvent:destinations:context:completion:
triggerFinalDeregister
triggerFinalDeregisterWithMessageContext:
triggerFirewallDBCleanupWithInterval:
triggerFixedInterfaceLinksDidConnect
triggerKeyRollWithCompletion:
trimmedString
trustedRemoteKeyTransparencySignatureForServiceIdentifier:pushToken:
trustedServicesAtIndex:
trustedServicesCount
trustedServicesType
tryConsumePacketBuffer:
tryForceFamilyFetch
tryForceFamilyFetchWithMessageContext:
tryNextContinuityPeer:
ttlCache
ttlCache:shouldEvictObject:forKey:
ttlCache:willReturnCachedObject:forKey:completion:
ttlInSeconds
tunnelService
type
uTunController
uTunDeliveryController
uint32Key
unSavedidentityClassA
unSavedidentityClassC
unSavedidentityClassD
unappliedRollingTicket
unarchivedObjectOfClasses:fromData:error:
underLimitForItem:
underlyingData
underlyingDataLength
underlyingErrors
underlyingSocketPairMessage
unifiedContactsMatchingPredicate:keysToFetch:error:
uninstallMethods
unionSet:
uniqueAccountGUIDsForUnsentOutgoingMessages:
uniqueID
uniqueIDString
uniqueIDToCbuuidsOfPairingDevicesDictionary
uniqueIdentifier
unknownSenderURI
unlock
unlockAllContinuityPeers
unlockContinuityPeer:
unpairDeviceWithID:completion:
unpairStart
unpairStartForDeviceWithID:completion:
unprefixedIdentifier
unprefixedURI
unregisterAccount
unregisterAccount:
unregisterAccount:messageContext:
unregisterClientChannel
unregisterClientChannelDestination:clientUUID:
unregisterDevice:
unregisterEndpoint:
unregisterPluginForGroup:options:
unregisterPluginForGroup:options:messageContext:
unregisterPluginWithOptions:
unregisteredDeserializationError
unregisteredIdentityContainer
unregisteredKTData
unregisteredKeychainError
unsealMessage:signedByPublicIdentity:error:
unsealMessage:signedByPublicIdentity:usingIdentityWithIdentifier:
unsealMessage:signedByPublicIdentity:usingIdentityWithIdentifier:error:
unselectReasonForAlias:
unselectSubscription:withCompletion:
unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:
unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:dataProtectionClass:
unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:dataProtectionClass:withMessageTypes:
unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:messageTypes:
unsentNonUrgentMessagesForAccountUUID:priority:byteLimit:upToLimit:localDestinationDeviceID:
unsentNonUrgentMessagesForAccountUUID:priority:byteLimit:upToLimit:localDestinationDeviceID:messageTypes:
unsentOutgoingMessagesUpToLimit:priority:localDestinationDeviceID:
unsentOutgoingMessagesUpToLimit:priority:wantsPayload:localDestinationDeviceID:
unsentUrgentAccountUUIDsForMessageTypes:
unsentUrgentAccountUUIDsWithDataProtectionClass:withMessageTypes:
unsignedCharValue
unsignedIntValue
unsignedIntegerValue
unsignedLongLongValue
unsignedLongValue
unsignedShortValue
unsubscribeActivity:andSubActivity:withCompletion:
unsubscribeEndpointsForGroup:
unsubscribeForActivity:subActivity:withCompletion:
unvalidateAliases:
unvalidateAliases:forAccount:
unvalidateAliases:forAccount:messageContext:
updateAccount:withAccountInfo:
updateAccount:withAccountInfo:messageContext:
updateAccountActivation
updateAuthorizationCredentials:token:
updateAuthorizationCredentials:token:forAccount:
updateCreationDateForHash:
updateCriticalReliabilityState
updateDeviceIdentity:error:
updateDevicePropertiesWithDevices:
updateExpiredDependent
updateGroup:withParticipants:sharedApplicationData:completion:
updateGroupStableKeyMaterialCacheForPushToken:SKM:
updateIdentityToDataProtectionClass:error:
updateInternalMigrationVersionOnDatabaseWithValue:
updateKTOptInStatus:withCompletion:
updateKTOptInStatusForRegistration:withOptInStatus:withCompletion:
updateKVSForKTRegistrationData
updateKVSWithCurrentKTRegistrationData
updateKVSWithTrustedDevice:
updateKVSWithTrustedDevices:withCompletion:
updateLightweightMemberTypes:members:triggeredLocally:forGroup:sessionID:
updateLocalPairedDevice:pairingType:
updateMembers:forGroup:sessionID:withContext:messagingCapabilities:triggeredLocally:lightweightStatusDict:
updateMembers:forGroup:sessionID:withContext:messagingCapabilities:triggeredLocally:lightweightStatusDict:messageContext:
updateMembers:toGroup:withContext:params:fromAccount:fromID:sessionID:messagingCapabilities:reason:isUPlusOne:completionBlock:
updateMembers:withContext:messagingCapabilities:triggeredLocally:lightweightStatusDict:
updateNetworkRelayStateForAllPairedDevices
updatePairedDevice:
updatePairedDevice:pairingType:completion:
updatePairedDeviceBuildVersion:productVersion:productName:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:capabilityFlags:deviceUniqueID:
updatePairedDeviceWithCBUUID:deviceInfoPayload:
updatePairedDeviceWithCBUUID:deviceUniqueID:buildVersion:productVersion:productName:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:
updatePairedDeviceWithCBUUID:iCloudURIs:pushToken:
updatePairedDeviceWithCBUUID:pairingType:
updatePairedDeviceWithCBUUID:supportIPsec:
updatePairedDeviceWithID:supportIPsec:completion:
updatePairedDeviceiCloudURIs:pushToken:
updateParticipantData:forGroup:sessionID:withContext:
updateParticipantData:forGroup:sessionID:withContext:messageContext:
updateParticipantData:withContext:
updateParticipantDataToMembers:toGroup:withContext:params:fromAccount:fromID:sessionID:isUPlusOne:
updateParticipantType:forGroup:sessionID:members:triggeredLocally:withContext:lightweightStatusDict:
updateParticipantType:forGroup:sessionID:members:triggeredLocally:withContext:lightweightStatusDict:messageContext:
updateParticipantType:forSessionID:relayGroupID:relaySessionID:sessionStateCounter:
updateParticipantType:members:triggeredLocally:withContext:lightweightStatusDict:
updateParticipants:forSessionID:
updatePreviousUsername:toNewUsername:
updateProtocolQualityOfService:isGood:
updateProtocolQualityOfService:linkID:isGood:
updateRegistrationType:toState:error:
updateServerDesiredKeyMaterialsForGroup:sessionID:
updateServerDesiredKeyValueDeliveryMaterialsNeeded
updateService:withPreferences:
updateSessionParticipants:relayGroupID:relaySessionID:participants:
updateSessionParticipants:relaySessionID:participants:
updateSessionURIToParticipantIDs:relayGroupID:relaySessionID:sessionInfo:
updateStateForDeviceWithUniqueID:
updateSubServices:forService:deviceUniqueID:
updateSubServices:forService:deviceUniqueID:messageContext:
updateTimerInterval:repeats:
updateTopics
updateURIToParticipantIDs:relaySessionID:sessionInfo:
updateUser:
updateUserWithOldUserName:newUserName:
updateUserWithOldUserName:newUserName:messageContext:
updateUserWithOldUsername:newUsername:
updateWithRegisteredTicket:error:
updatecloudDeliveryStateOnDefaultPeer
updatedUserSetForRealm:currentUsers:
uploadData:toEndpoint:onTopic:forGUID:encryptionType:
uploadedToKVS
upsertGroupWithInfo:previousGroup:completion:
upsertKeyTransparencyDeviceRecord:recordsToModify:recordsToDelete:completion:
urgentCloudPriorityMessageStatistics
urgentPackets
urgentQueue
uriSuggester
uris
urisAtIndex:
urisCount
urisToParticipantIDs
urisType
useBTDatagramPipe
useDictAsTopLevel
useFaceTimeCallerID
usePairingKey
useQRDirectly
useSecureQRControlMessage
useStunMICheck
usedCachedData
usedLastResortCache
usedMMCS
usedPipeline
usefulLoggingDescriptionAccountInfos:
useiMessageCallerID
user
userAccessTokens:error:
userAccountSynchronizer
userAgent
userConfiguration
userConsentDeniedForCTPNR
userDefaults
userHandle
userID
userIDArray
userInfo
userName
userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:
userNotificationCenter:openSettingsForNotification:
userNotificationCenter:willPresentNotification:withCompletionHandler:
userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:
userOptInRequired
userStore
userStore:didAddAuthenticationCertificate:forUser:
userStore:didAddUser:
userStore:didRemoveAuthenticationCertificateForUser:
userStore:didRemoveUser:withAuthenticationCertificate:
userStore:didUpdateUser:
userUniqueIdentifier
userWithUniqueIdentifier:
username
usersToTimers
usersToTimersLock
usersWithRealms:
utilities
utunController
utunDeliveryController
utunSocket
uuid
validNetworkActive
validNetworkEnabled
validNetworkReachable
validSIMStateForRegistration
validateAliases:
validateAliases:forAccount:
validateAliases:forAccount:messageContext:
validateCachedGroup:isParentOfGroup:completion:
validateContextDate
validateContextTTL
validateCredentialsWithDeliveryCompletionBlock:
validateEnrollmentResult:uuid:completionBlock:
validateEnrollmentUri:accountKey:loggableData:insertResponse:error:
validateListenerForLocalObject:andCheckEntitlement:
validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:
validateListenerForLocalObject:andPerformBlock:
validatePeerUri:accountKey:loggableDatas:queryResponse:error:
validateProfileForAccount:
validateProfileForAccount:messageContext:
validateRegion:phoneNumber:forRegistration:
validationContextDisabled
validationContextQueue
validationData
validationInfoByMechanism
validationMechanisms
validationMessageSendBlock
validationMode
validationSession
validationSessionOnQueue:mechanism:withCompletion:
validationStatusForAlias:
validator:failedIdentificationWithRegistrationError:
validator:handleABCEvent:
validator:identifiedPhoneNumber:token:phoneBookNumber:
validators
value
valueForCapability:
valueForEntitlement:
valueForKey:
valueForKeyPath:
valueWithPointer:
vendTokenListForSessionID:
verboseFunctionalLogging
verbosePerformanceLogging
verifierWithEndpoint:keyType:keyDiversifier:
verifierWithLocalURI:remoteURI:pushToken:service:cert:keyType:keyDiversifier:
verifyAndExposeMessage:withError:
verifyAndRevealData:sendingDevice:cypherIdentifier:error:
verifyMessageIntegrityWithKey:inputBuffer:inputLength:
verifySignedData:matchesData:forAlgorithm:onService:tokenUri:options:requestUUID:
verifySignedData:matchesData:forAlgorithm:onService:tokenUri:options:requestUUID:messageContext:
verifySignedData:matchesData:forType:onQueue:error:
verifySignedData:matchesData:forType:onQueue:withCompletion:
verifySignedData:matchesData:forType:withPublicDeviceIdentity:error:
verifySignedData:matchesData:withSecPublicDeviceIdentity:diversifier:error:
verifyState
versionNumber
vettedAliases
vettedEmails
voidAuthenticationTokenAllowingGracePeriod
voidPassword
waitForReply
waitingForMigration
wakeClientForService:stream:flags:
wantsAppAck
wantsBagKey
wantsBodySignature
wantsCertifiedDelivery
wantsCompressedBody
wantsDeliveryStatus
wantsExtraTimeoutRetry
wantsFirewallDonation
wantsHTTPGet
wantsHTTPHeaders
wantsIDSProtocolVersion
wantsIntegerUniqueIDs
wantsLocalReflectedSend
wantsManagedRetries
wantsMultipleResponses
wantsNetworkAvailableHint
wantsPendingMessageUpdates
wantsPhoneNumberAccount
wantsProgress
wantsRemoteErrors
wantsResponse
wantsTinkerDevices
wantsUserAgentInHeaders
wasDisabledAutomatically
wasInitiallySetupUsingIDSPairing
wasPrimary
wasRecentlySelectedAlias:
wasWrittenToConnection
watchDidStartAdvertising
watchDidStopAdvertising
watchOnlyService
watchPairing
weakObjectsHashTable
weakRefWithObject:
weakToStrongObjectsMapTable
weight
wiFiActiveAndReachable
wifiSetupAttemptType:duration:result:client:
willSendBlock
willSendJoin
withUpdatedAllowedServices:
withUpdatedExpiryEpoch:
withUpdatedProperties:
wpConnectionErrorCode
wpConnectionErrorDomain
wpConnectionErrorUserInfo
wpLinkManager
wrapMaterial:error:
wrapMode
wrapperPairWithLocalAddress:remoteAddress:
wrapperWithAddressString:withPortHostOrder:withInterfaceName:
wrapperWithSockAddr:
wrapperWithWrapper:andPortHostOrder:
writeAccountDefaults:
writeBuffer:bufferSize:metaData:metadataSize:moreComing:
writeCoalescingDelay
writeCoalescingLeeway
writeDatagram:datagramSize:metaData:metadataSize:
writeHandler
writeIDSDirectMessageInfo:
writePacketBuffer:metaData:metadataSize:moreComing:
writeTo:
writeToClientChannel:packetBuffer:metaData:metadataSize:
writeToConnection
writeToFile:atomically:
writeToFile:options:error:
xpcObject:objectContext:
xpcObject:objectContext:messageContext:
xpcQueue
zone
id-report-web-approval-status
web-uri
is-approved
dictionary
Registration
IDSFoundation
Report Unknown Sender response: %@
message
IDSDaemon
setting up the realtime encryption controller for the unique ID: %@
Warning
%@ - Could not initialize the realtime encryption controller for the unique ID: %@, ignoring...
sending the device prekey for the unique ID: %@ to group: %@
%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the prekey to group %@...
%@ - Could not find the session for the group: %@
getting public keys for the real-time encryption...
%@ - Could not get the realtime encryption controller
object
xpc-object
public-keys
object-type
object-context
sending the master key material for the unique ID: %@ to group: %@
%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@
v8@?0
sending the master key material recovery request for the unique ID: %@ to group: %@
Request the master key material(MKM) for unique ID: %@ group: %@
resetting all keys for the unique ID: %@ group: %@
OpportunisticCache
v16@?0@"IDSOpportunisticData"8
<%@:%p accessCount: %lld, cache: %@>
com.apple.ids
DeviceHBI
com.apple.conference
forceRandomDeviceHeartbeatInterval
DeviceHeartbeat
forceDeviceHeartbeat
com.apple.identityservices.device-hbi
vc-temporary-get-dependent-interval
MagnetIso
%c MagnetIso(%s)  Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
UnexpectedState
bytesReceived
bytesSent
packetsReceived
packetsSent
<%@:%p; disableRegistration: %@>
disableReg
id-sim-deactivation
device-time
home-plmn
source
code
event-time
network-initiated
dict
network-plmn
roaming
events
*** Lockdown state is expired, ignoring
v24@?0@"IDSDAccount"8@"IDSServiceProperties"16
registration-state-changed-max-count
NRDeviceMonitor
IPsecLinkType
IPsec Link
<%@: %p serviceIdentifier: %@, localURI: %@, subscribedURIs: %@>
v16@?0@"NSDictionary"8
v32@?0@"NSString"8@"IDSURI"16@"NSDictionary"24
/Library/IdentityServices/ids-pub-id.db
PublicIdentityCache
%@-%@-%@
IDSPublicIdentityCache
Adding identity to last resort DB { identity: %@, token: %@, uri: %@, service: %@ }
Checking last resort DB for identity { token: %@, uri: %@, service: %@ }
Found identity in last resort DB { identity: %@, token: %@, uri: %@, service: %@ }
public-identity-clear-time-seconds
public-identity-future-clear-time-seconds
Cleaning last resort DB with date range %@ to %@
x-push-cert
pnv-retry-count
hardware-version
os-version
software-version
device-name
IMSI
PLMN
pnr-reason
test-data
id-preflight
status
mechanisms
mechanism
mechanism-data
SMSLess
<%p> name %@ instanceID [%s] nextStreamID %u
_serviceNameToStreamIDMap %@
_streamIDToServiceNameMap %@
UTunPeerServiceMap
Remote instance ID reset: old [%s] new [%s]
Asked to set remote instanceID for previous ID [%s]
Remote instance ID do not match: old [%s] new [%s]
cannot associate %@ with streamID 0
serviceMap[%@ <=> %lu] serviceNameMismatch %@ streamIDMismatch %@ [%@ <=> %lu]
Unexpected streamID %lu found when asked to translate %@
ServiceMap is at maximum capacity! %lu
IDSDelivery-oversized
Previous Remote Instance IDs (next:%d) {%@}
com.apple.private.alloy.multiplex1
com.apple.private.alloy.willow
com.apple.identityservicesd.aps
Get Service User ID's Completed with response %@
v40@?0@"IDSBaseMessage"8@"NSError"16q24@"NSDictionary"32
Get Admin Access Tokens Completed with response %@
accessory-id
adminAccessTokenDict
access-token
expiry
Get Consent Tokens Completed with response %@
Get User Access Tokens Completed with response %@
v32@?0@"NSString"8Q16^B24
IDSDuet
-[IDSDuetInterface forceCheckAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:]
%p %s Sending IDS message, no CoreDuet on platform
-[IDSDuetInterface checkAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:]
com.apple.icloud.presence.
com.apple.icloud.presence
@16@?0@"IDSURI"8
v64@?0@"NSString"8@"NSDictionary"16@"NSDictionary"24@"NSString"32B40@"NSDictionary"44B52@"NSDictionary"56
@16@?0@8
%@%@
v36@?0I8@"<NSObject>"12^B20^B28
Engram Error
v24@?0@"IDSMPFullAccountIdentityCluster"8Q16
-[IDSAccountIdentityElector _getKeysForServiceTypeName:completion:]_block_invoke
IDSAccountIdentityElector.m
currentCluster.groupID
![newServiceTypeNames containsObject:serviceTypeName]
-[IDSAccountIdentityElector _getKeysForServiceTypeName:completion:]_block_invoke_2
createdCluster.groupID
v24@?0@"IDSCloudKitKeyElectionStoreItem"8@"NSError"16
-[IDSAccountIdentityElector _createAccountKeysWithFullAccountIdentity:serviceTypeNames:oldCluster:completion:]
[oldCluster isParentOfCluster:newCluster]
newPublicCluster
[oldPublicCluster isParentOfCluster:newPublicCluster]
v32@?0@"IDSGroupServerKeyElectionStoreItem"8@"ENGroupID"16@"NSError"24
v24@?0@"IDSMPFullAccountIdentityCluster"8@"NSError"16
__kIDSRegistrationKeyManagerPrivateIdentityRebuiltNotification
__kIDSRegistrationKeyManagerPrivateIdentityGeneratedNotification
__kIDSRegistrationKeyManagerKeychainMigrationComplete
__kIDSRegistrationKeyManagerEncryptionIdentityNeedsRollNotification
build-of-identity-generation
build-of-unregistered-identity-generation
message-protection-public-data-registered
ngm-message-protection-public-data-registered
ngm-message-protection-public-prekey-data-registered
ngm-message-protection-public-data-registered-version
hasRegIdentityContainer
hasUnregIdentityContainer
failedToGeneratedPublicDataForNGMIdentity
registrationKeyManagerRateLimit
ForceRefreshIdentityWithServer
PurgePreviousIdentityInterval
RegenerateIdentityInterval
ShowKeyRollingNotifications
ShowNGMKeyRollingNotifications
IDSRegistrationKeyManager.m
Invalid parameter not satisfying: %@
systemMonitor
keychainWrapper
identityDataSource
KTEnrollmentSignatureUpdated
NGM Key Rolling
Rolling key
Tried and failed to generate new key to roll
Key Rolling
Generating new identity
Failed to generate new identity
Rolled key, did succeed %@
Registered new identity
Failed to compare registered identity
Purged previous identity
Failed to purge previous identity
ClassKeys
We saved our keys, resuming OTR session negotiation
com.apple.identityservicesd.identity-purge
com.apple.identityservicesd.identity-regenerate
CNContact
Contacts
CNPhoneNumber
CNContactIdentifierKey
CNContactStore
IDSDDatabase
Setting IDSOutgoingMessage property %d of %d
New message record [%@] has ID [%lld].
IMDSpotlight
Done with IDSOutgoingMessageRecordAddMessageRecord, lets update Spotlight with this message record.
v16@?0^{CSDBRecordStore=^{__CFString}^{CSDBSqliteDatabase}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFSet}B{?=b1b1}^?^{__CFSet}^{__CFDictionary}^vi{?=ii^q^{__CFSet}}}8
SELECT COUNT(1) FROM outgoing_message WHERE guid = ? AND pending_delete = 0 LIMIT 1;
SELECT COUNT(1) FROM outgoing_message WHERE guid = ? AND alternate_guid = ? AND pending_delete = 0 LIMIT 1;
v32@?0^{CSDBRecordStore=^{__CFString}^{CSDBSqliteDatabase}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFSet}B{?=b1b1}^?^{__CFSet}^{__CFDictionary}^vi{?=ii^q^{__CFSet}}}8^{CSDBSqliteDatabase=^{__CFString}^{CSDBSqliteConnection}^?^?^?^v^?^?B^vi{?=b1b1b1}{_opaque_pthread_mutex_t=q[56c]}i^?^v^{__CFString}I{CSDBLookAsideBufferConfig=iib1}}16^{CSDBSqliteStatement=^{CSDBSqliteConnection}^{sqlite3_stmt}i}24
SELECT DISTINCT account_guid FROM outgoing_message WHERE priority = ? AND is_sent = 0 AND pending_delete = 0 
AND duet_identifiers IS NOT NULL 
AND message_type 
LIMIT ?
v24@?0^{CSDBRecordStore=^{__CFString}^{CSDBSqliteDatabase}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFSet}B{?=b1b1}^?^{__CFSet}^{__CFDictionary}^vi{?=ii^q^{__CFSet}}}8^{CSDBSqliteDatabase=^{__CFString}^{CSDBSqliteConnection}^?^?^?^v^?^?B^vi{?=b1b1b1}{_opaque_pthread_mutex_t=q[56c]}i^?^v^{__CFString}I{CSDBLookAsideBufferConfig=iib1}}16
SELECT duet_identifiers FROM outgoing_message WHERE priority = ? AND is_sent = 0 AND bypass_duet = 0 AND pending_delete = 0 AND account_guid = ? 
SELECT SUM(stored_size) FROM outgoing_message WHERE pending_delete = 0 
SELECT account_guid, count(ROWID) FROM outgoing_message GROUP BY account_guid
SELECT account_guid, MAX(sum_stored_size) FROM (SELECT account_guid, SUM(stored_size) AS sum_stored_size FROM outgoing_message WHERE pending_delete = 0 GROUP BY account_guid ) 
SELECT account_guid, count(ROWID) FROM outgoing_message GROUP BY account_guid ORDER BY count(ROWID) DESC LIMIT 1 
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, wants_firewall_donation, send_mode FROM outgoing_message 
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, wants_firewall_donation, send_mode FROM outgoing_message 
ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, wants_firewall_donation, send_mode 
ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, wants_firewall_donation, send_mode 
WHERE pending_delete = 0 AND guid = ? 
WHERE is_sent = 0 AND pending_delete = 0 AND account_guid = ? 
AND local_destination_device_uuid = ? 
AND local_destination_device_uuid is null 
WHERE is_sent = 0 AND pending_delete = 0 AND expiration_date > 0 AND expiration_date <= ? LIMIT ? 
SELECT DISTINCT account_guid FROM outgoing_message WHERE is_sent = 0 AND pending_delete = 0 LIMIT ? 
WHERE is_sent = 0 AND pending_delete = 0 AND account_guid 
LIMIT ? 
NULL accountGUIDs passed to %s
CFArrayRef IDSOutgoingMessageRecordCopyUnsentMessagesForAccountsAndPriority(NSArray *__strong, int64_t, CFStringRef, int64_t, IDSDatabase *__strong, BOOL)
AND priority = ? 
CFArrayRef IDSOutgoingMessageRecordCopyUnsentMessagesForAccountsAndPriorityAndType(NSArray *__strong, int64_t, CFStringRef, int64_t, IDSDatabase *__strong, BOOL, int64_t, BOOL *)
AND message_type = ? 
NULL accountGUID passed to %s
CFArrayRef IDSOutgoingMessageRecordCopyUnsentMessagesUpToSizeLimit(int64_t, int64_t, int64_t, CFStringRef, BOOL, CFStringRef, IDSDatabase *__strong, BOOL)
SELECT DISTINCT 
 FROM (   SELECT 
  FROM outgoing_message o   WHERE priority = ? AND pending_delete = 0 AND is_sent = 0 AND account_guid = ? AND (bypass_duet = ? OR bypass_duet = ?) 
  ORDER BY ROWID ASC   LIMIT ? ) AS ofilt WHERE (SELECT SUM(stored_size) FROM outgoing_message s where s.ROWID <= ofilt.ROWID) <= ? UNION SELECT 
 FROM outgoing_message   WHERE priority = ? AND pending_delete = 0 AND is_sent = 0 AND account_guid = ? AND (bypass_duet = ? OR bypass_duet = ?) 
  ORDER BY ROWID ASC LIMIT 1 ) 
CFArrayRef IDSOutgoingMessageRecordCopyUnsentMessagesUpToSizeLimitWithTypes(int64_t, int64_t, int64_t, CFStringRef, BOOL, CFStringRef, IDSDatabase *__strong, BOOL, NSArray *__strong)
WHERE priority = ? AND is_sent = 0 AND pending_delete = 0 
AND account_guid = ? 
AND bypass_duet = 0 
ORDER BY ROWID ASC LIMIT ?
UPDATE outgoing_message SET is_sent = ? WHERE guid = ?
UPDATE outgoing_message SET is_sent = 0
UPDATE outgoing_message SET is_sent = 0 WHERE local_destination_device_uuid = ?
Empty/nil accountGUIDs passed to %s
void IDSOutgoingMessageRecordUpdateLocalDestinationDeviceOnAccountsWithUUIDs(NSArray *__strong, NSString *__strong, IDSDatabase *__strong)
UPDATE outgoing_message SET local_destination_device_uuid = ? WHERE is_sent = 0 AND pending_delete = 0 AND account_guid 
void IDSOutgoingMessageRecordUpdatePendingDeleteOnAccountsWithDeviceUUID(NSArray *__strong, NSString *__strong, IDSDatabase *__strong)
UPDATE outgoing_message SET pending_delete = 1 WHERE local_destination_device_uuid = ? AND account_guid 
WHERE pending_delete = 1 LIMIT ? 
WHERE is_sent = 0 AND pending_delete = 0 AND enqueued_date > 0 AND enqueued_date <= ? AND local_destination_device_uuid IS NOT NULL AND local_destination_device_uuid != ? LIMIT ? 
InternalMigration
IDSOutgoingMessageRecord
Deleting postponed message GUIDs
IDSOutgoingMessageRecordDeleteMessage %@ alternateGUID %@
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, wants_firewall_donation, send_mode FROM outgoing_message WHERE guid = ? ORDER BY ROWID ASC;
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, wants_firewall_donation, send_mode FROM outgoing_message WHERE guid = ? AND alternate_guid = ? ORDER BY ROWID ASC;
Could not delete outgoing message from database. Postponing delete. Guid: %@  AlternateGuid: %@
INSERT OR IGNORE INTO outgoing_messages_to_delete (data_protection_class, guid%s;
) VALUES (?, ?)
, alternate_guid) VALUES (?, ?, ?)
Could not postpone delete.
IDSOutgoingMessageRecordDeleteMessageWithQueueOneIdentifier %@
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, wants_firewall_donation, send_mode FROM outgoing_message WHERE queue_one_identifier = ? ORDER BY ROWID ASC;
IDSOutgoingMessageRecordDeleteMessagesForAccount %@
DELETE FROM outgoing_message WHERE account_guid = ? 
NULL message passed to %s
void IDSOutgoingMessageRecordBulkCopy(IDSOutgoingMessageRecordRef, int64_t *, CFStringRef *, CFStringRef *, CFStringRef *, CFStringRef *, CFDataRef *, CFDataRef *, CFDataRef *, CFDataRef *, CFDataRef *, BOOL *, BOOL *, BOOL *, BOOL *, int64_t *, int64_t *, BOOL *, CFDataRef *, CFDataRef *, int64_t *, int64_t *, BOOL *, CFStringRef *, BOOL *, CFStringRef *, BOOL *, BOOL *, BOOL *, BOOL *, BOOL *, int64_t *, CFDataRef *, BOOL *, CFStringRef *, BOOL *, CFStringRef *, BOOL *, CFStringRef *, int64_t *, int64_t *, BOOL *, int64_t *, BOOL *, BOOL *, BOOL *, BOOL *, BOOL *, BOOL *, int64_t *, BOOL *, int64_t *, IDSDatabase *__strong)
<IDSOutgoingMessageRecord %p [%p]>{}
guid
alternate_guid
account_guid
from_identifier
message_data
data
protobuf_data
destinations
data_to_encrypt
encrypt_payload
compress_payload
use_top_level_dict
wants_response
expiration_date
command
wants_delivery_status
delivery_status_context
message_uuid
priority
date
is_sent
identifier
forced_local
peer_response_identifier
expects_peer_response
wants_app_ack
non_waking
fire_and_forget
stored_size
duet_identifiers
bypass_duet
queue_one_identifier
enforce_remote_timeout
main_account_guid
pending_delete
local_destination_device_uuid
enqueued_date
message_type
skip_self
push_priority
non_cloud_waking
live_delivery
require_bluetooth
require_local_wifi
wants_progress
ignore_max_retry_count
wants_certified_delivery
original_timestamp
wants_firewall_donation
send_mode
Database
_IDSOutgoingMessageRecordCreate()
outgoing_message
GUID %@ Fanout %@ (%@) contains:
IDSFanoutFactoryComponent.m
Invalid encryption parameters (using) -- failing {publicDeviceIdentityContainer: %@, fullIdentity: %@, inputDataLength: %llu, identifier: %@}
Encryption
Using full identity: %@
   Public/Private encryption failed with error: %@
Invalid encryption parameters (used) -- failing {publicDeviceIdentityContainer: %@, fullIdentity: %@, inputDataLength: %llu, identifier: %p}
Invalid decryption parameters -- failing {publicDeviceIdentityContainer: %@, fullIdentity: %@, inputDataLength: %llu, identifier: %p}
   Public/Private decryption failed with error: %@
Using previous full identity: %@
v16@?0@"CUTResult"8
GLTKeyDiversification
MessageProtection
Failed to diversify key for signing { tempIdentity: %@, diversifier: %@, mpError: %@ }
No diversifier supplied for an application key. Failing...
LastKeyGeneration
ids_querytime
ids_build
ids_msg_command
ids_decrypt_equal
ids_tried_last_resort
ids_lastgeneration
ids_sender_EC_success
ids_sender_EC_error_domain
ids_sender_EC_enc_error_code
ids_sender_leg_success
ids_sender_leg_error_domain
ids_sender_leg_error_code
ids_recieved_leg_success
ids_recieved_EC_success
ids_EC_error_domain
ids_legacy_error_domain
ids_EC_error_code
ids_legacy_error_code
1to1EC
Failed to setup RTCReporting to report EC metric { error: %@ }
Exception handling _strictlyUnarchivedObjectOfClasses: %@
Failed to get payload metadata {payloadMetadataError: %@, payloadMetadataData: %@}
EC (%@:%@) and Legacy (%@:%@)
Legacy (%@:%@)
EC (%@:%@)
v24@?0@"NSString"8@"NSError"16
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IDSAgent/IDSClientChannelManager.m
IDSClientChannel
FTMessageDelivery
IDSAgent
%@ instance created with a dead file descriptor!
Created with {socket:%d}
v12@?0B8
%@ endSession at %@!
SPConnection
%p: reset the stall detector
originalMessage
v32@?0@8Q16^B24
Error %d received on {socket:%d}
Remote side closed the connection, cleaning up {socket:%d}
Removing pending OTR messages for protection class %u.
Removed %lu pending OTR messages.
v16@?0@"<IDSSocketPairConnectionDelegate>"8
Process stored data message (Encrypted:%u, SN:%u, StreamID:%u).
FragmentedMessage: can't reassemble message from %u pieces
idsotr
Recv OTR message for %@-%ld-%u E:%u SN:%u FI:%u D:%u T:%@
_processBytesAvailable: read %d bytes
Error when receiving bytes, closing connection
Remote side closed the connection, cleaning up
Received message size: %u, maximum allowed size: %u
_processIncomingMessage failed.
BPS: avg %f instant %f
remainingFragments
unknown object in _outgoingMessageArray
Send OTR message for %@ E:%u SN:%u FI:%u T:%{public}@.
Connected socket closed, cannot send data, cleaning up...
No data to send on socket, suspending {socket:%d}
Failed to queue outgoing data - possible message fragmentation issue
{socket:%d} timeout, ignoring ...
got send error %d, cleaning up {socket:%d} ...
totalFragmentCount
fragmentedMessageID
%@ removing {socket:%d} from transport thread!
SocketPairConnection (%p) add OTR blocks (enc:%p dec:%p).
Accounts
ACAccountStore
primaryAccount
personID
dsid
IDSSystemAccountAdapterErrorDomain
<%@: %p username: %@, DSID: %@>
B16@?0@"ACAccount"8
v24@?0@"ACAccount"8@"NSError"16
v24@?0@"ACAccountType"8@"NSError"16
D:%@
ACAccountTypeIdentifierAppleAccount
ACAccountTypeIdentifieriTunesStore
ids-opportunistic-send-percentage
com.apple.ids.opportunisticdeliverycontroller
v16@?0@"IDSDeliveryContext"8
v16@?0@"<IDSDaemonListenerProtocol>"8
IDSDSessionMessenger
Sending MESSAGE to %@, %@ <%@>
%@ - No account with unique ID %@ found to send a message, bailing...
No destinations to send message to, ignoring...
guest-device:
v32@?0@"NSArray"8@"NSArray"16@"NSDictionary"24
IDSDSession
This Phone Continuity session supports the local message. Trying the local...
Sending REINITIATE (subcommand %@) %@ to %@, %@
pS: %llu pR: %llu bS: %llu bR: %llu
x-id-sub-service
x-service-user-id
user-id
user-handle
tokens
id-get-user-token
access-tokens
kt-account-key-signing-timeout
IDSKTAccountKeyManagerErrorDomain
ktAkFetchTimeMetric
KTVersion
%@-%@
Failed
Success
v32@?0@"NSData"8@"NSData"16@"NSError"24
v16@?0@?<v@?>8
id-report-spam
spam-message
General Report Spam response: %@
spam-messages
/System/Library/IdentityServices/Plugins/com.apple.NanoRegistry.bundle
com.apple.IDS.IDSNanoRegistryPluginManager.callbackQ
IDSNanoRegistryPluginManager
Bundle {isAdvertising:%@}
Bundle has no principal class
Failed to initialize bundle
Plugin class is nil
Protocol is nil
Plugin initialized successfully
Plugin does not respond to any useful messages
Plugin failed to initialize
Plugin class "%{public}s" does not conform to protocol
v16@?0@"IDSHeartbeatCenter"8
Server Heartbeat
Need to re-register now
forceHeartbeat
com.apple.identityservices.registration-hbi
forceRandomHeartbeatInterval
forceHeartbeatInterval
vc-registration-hbi
vc-profile-get-default-invitation-context
Default invitation context response: %@
region-id
base-phone-number
extra
validated
time
activity
subactivity
<%@: %p; timeSubscribed: %fL; activity: %@; subActivity: %@>
-Urgent
urgent
-Default
default
-Sync
sync
%@%@%@
%@%@Cloud%@
 Cloud
PipePeripheralUUID
UTunPeer
Initing IDSUTunPeer %p %@
btuuid %@ isDefaultPairedDevice: %@ pipePeripheralUUIDString: %@ waitForDefaultPairedDevice: %@ uniqueID %@ shouldUseIPsecLink: %@
incoming:%@
outgoing:%@
 Deallocing UTunPeer %p
v32@?0@"IDSUTunConnection"8Q16^B24
%@ ignoring btuuid update from %@ to %@
v16@?0@"IDSUTunConnection"8
localDeliveryQueueStatMessageCount
localDeliveryQueueStatBytes
localDeliveryQueueStatDeliveredMessageCount
localDeliveryQueueStatDeliveredBytes
localDeliveryQueueStatsLastDeliveredTime
IDSLocalOutgoingMessageBytes
IDSLocalOutgoingMessages
IDSLocalIncomingMessageBytes
IDSLocalIncomingMessages
IDSLocalLinkType
URGENT
Default
Sync
IDSLocalStatisticsCategory
-[IDSUTunPeer _powerlogDictionaryForPriority:]
%s: self %p reporting stats for %@ %@
IDS Local Network Stats
IDSLocalOutgoingSocketBytes
IDSLocalOutgoingSocketPackets
IDSLocalIncomingSocketBytes
IDSLocalIncomingSocketPackets
Sockets
IDSUTunPeer
-[IDSUTunPeer _powerlogDictionaryForSockets]
%s: self %p reporting stats for sockets %@
Enabling power logging for sockets {_shouldUseIPsecLink: %@}
-[IDSUTunPeer _startPowerLogTimersForAllPriorities]
%s: self %p Enabling power logging for transport stats
-[IDSUTunPeer logCurrentTransportStatsAndResetTimers]
%s: self %p Will log the current transport stats and restart timers.
%@ logCurrentTransportStatsAndResetTimers shouldLog=%@, _shouldUseIPsecLink=%@
LOCALSETUP: %@ has been told to localSetupInProgress %@
enableConnection for peer %@
enableCloudConnection for peer %@
UTunConnection
enable connection %@.
disabling connection %@
disable Connection for peer %@:%p withReason %ld
disable connection %@.
disable cloud connection for peer %@:%p withReason %ld
Client Request
Idle Remove
IDSServicePrefersInfraWifi
Reason
InfraWiFiState
Services
IDS Local InfraWiFi Request
InfraWiFi
_checkServicesPreferringInfraWiFi %u: Service %@ has %llu delivered messages
_checkServicesPreferringInfraWiFi %u: InfraWiFi received %llu -> %llu packets. Client sockets received %llu -> %llu packets. Total delivered %llu -> %llu
_checkServicesPreferringInfraWiFi %u: No message delivered and no client socket packet received for services preferring InfraWiFi - disabling it now
Local Setup is not complete yet - ignore preferInfraWiFi for %@
Local Setup is not complete yet - ignore setLinkPreferences for %{public}@
Bluetooth is required but we are not nearby - failing message %@
Local WiFi is required but we are not discovered by Rapport - failing message %@
%@ %@ %@ isConnected changed to %@
%@ wasConnected? %@ isConnected in aggregate? %@
Enabling %@ Cloud Connections on this peer
_pendingCloudEnable: %@, _supportsCloudConnections: %@, _isPeerAlwaysConnected: %@
%@ LinkManager did connect cbuuid %@ - enabling connections
continuityConnectCount for peer %@ is changed to %d.
manager:cbuuidDidConnect:%@ isAlwaysConnected:%@
Peer %@ is already locked for btUUID %@, ignore peer %@.
Enable peer %@ now. (isDefaultPairedDevice %@   lockedPeer %@)
IGNORING %@ LinkManager did connect cbuuid %@ - enabling connections (%@)
cbuuidDidFailToConnect for peer %@, disabling peer connections!
Skip handling _handleCBUUIDFailToConnect for Phone continuity local message case.
%@ LinkManager did disconnect cbuuid %@ - kicking our disable timer
v16@?0@"IMDispatchTimer"8
gl-cloud-msg-disable-interval
Tearing Down Global Link For %@ Due To Inactivity
%@ isPeerAlwaysConnected is changed to %@
%@ forceOTRNegotiationForTopic is no-op when ipsec is used
id-authenticate-%@
realm-user-id
authentication-data
x-protocol-version
x-ds-client-id
phone-number
IDS Authentication response: %@
cert
alert
IDSKeychainWrapperErrorDomain
IDSKeychainWrapperErrorOSStatus
Class D
Class C
Class A
IDSKeychainWrapper
Loading IDS keychain data with account %@
  => Done loading IDS keychain data (loaded %ld bytes)
Saving IDS keychain data with account %@
 => Done saving IDS keychain data
Device is not in keychain cloud circle {status: %ld, error: %@}
   OTR encryption failed with error: %d
   OTR decryption failed with error: %d
SecOTRSSignAndProtectMessage
Security
SecOTRSVerifyAndExposeMessage
setup-phone-auth-enabled
sim-deactivation-rate-limit-count
sim-deactivation-rate-limit-time
RegisterDuringBuddy
com.apple.IDSRegistrationController
%s: Unable to create preferences handle: %s
-[IDSRegistrationController initWithUserStore:]
Failed to create dynamic store
kScreenSharingChangedNotification
kiMessageChangedNotification
kFaceTimeChangedNotification
kCallingChangedNotification
*** Lockdown state is expired, not allowing registration
signature
HomeNumberBypassServer
Exception: %@ in handler: %@ while executing: %@
com.apple.madrid
com.apple.ess
(%@, %@, %@)
%s (%@)
-[IDSRegistrationController center:succeededRegistration:]
Succeeded HTTP registration with info: %@
-[IDSRegistrationController center:allSucceededRegistrations:]
All succeeded HTTP registrations: %@
-[IDSRegistrationController center:succeededIdentification:phoneNumber:token:]
Succeeded SMS identification with info: %@
-[IDSRegistrationController center:failedIdentification:error:]
Failed SMS identification with info: %@ error: %d
-[IDSRegistrationController center:succeededIDSAuthentication:]
Succeeded IDS Authentication with info: %@
-[IDSRegistrationController center:succeededCurrentEmailsRequest:emailInfo:]
Succeeded Validated Email Query info: %@    Emails: %@
-[IDSRegistrationController center:failedCurrentEmailsRequest:error:info:]
Failed Validated Email Query info: %@  Info: %@
-[IDSRegistrationController center:succeededInitialRegionQuery:]
Succeeded Initial Region Query info: %@
-[IDSRegistrationController center:failedAuthentication:error:info:]
registration info: %@   error: %d  info: %@
-[IDSRegistrationController center:succeededLinkHandlesConfirmation:emailAddress:]
succeeded email confirmation: %@
Add New Phone Number
IDSLocalizable
Home number add alert title; Add New Phone Number
Would you like to add the phone number %@ to use with %@?
Home number add alert message; Would you like to add the phone number %@ to use with iMessage and FaceTime?
Add Number
Home number add alert button
Not Now
Home number add alert cancel button
HomeNumberAdd
v16@?0@"IMUserNotification"8
AggregateMessage
removing token %@ from %@
IDSDelivery
DeliveryContext Timestamp is %@
Processing response %ld for message %@
Message has been removed, Add Honeybee support here to grab logs from the other side who sent this FromURI:%@ ToURI:%@ Token:%@ 
Bad signature {message: %@, localURI: %@, remoteURI: %@, remotePushToken: %@, sessionToken: %@, service: %@}
 current sessionToken: %@
Message was rate limited from the server, failing message (%@ -> %@)
NiceRateLimited
Triggered auto bug capture for rate limiting {session : %@, error: %@}
Unknown Error, Failing message
Msg with GUID: %@ & i:%@ is missing 255s
Chunk: %@
WasLast?: %@
v32@?0@8@16^B24
%@ %@
ngm_public_identity
ngm_version
kt_version
application_public_identity
params
Error retrieving data from last resort cache: { error: %@ }
Flushing peer tokens, in hopes this resolves in the next error
Need to query for encryption but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}
Missing encryption keys -- querying {remoteURI: %@, localURI: %@, service: %@}
Encryption query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}
v28@?0@"IDSMPPublicDeviceIdentityContainer"8B16@"NSError"20
Need to query for decryption but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}
Missing decryption keys, need to query {underLimit: %@, remoteURI: %@, localURI: %@, service: %@}
Decryption query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}
v20@?0B8@"NSError"12
v24@?0@"IDSNGMPublicDeviceIdentity"8@"NSError"16
v24@?0^{__SecKey=}8@"NSError"16
Need to query for signing verification but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}
Missing signing verification key, need to query {underLimit: %@, remoteURI: %@, localURI: %@, service: %@}
Signing verification query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}
Tried to PK to default paired device!! -- failing
Tried to encrypt to nil device ID -- failing
Missing identity to encrypt with {deviceID: %@}
Missing identity to decrypt with {deviceID: %@}
Missing device encryption keys -- querying {deviceID: %@}
Device encryption query completed {success: %@, deviceID: %@}
Error committing replay state for device ID decryption { error: %@ }
Missing device decryption keys -- querying {deviceID: %@}
Device decryption query completed {success: %@, hasKeyAfterQuery: %@, deviceID: %@}
IDSPreflightStack { IMSI: %@, PLMN: %@, mechanisms: %@ }
ccmdttdc
ccmdtcdc
ccmdtpli
ccmdttc
ccmdtdscp
ccmdtipc
ccmdtcp
ccmdtpid
ccmdtpgid
ccmdtsid
ccmdtnhbhe
datablob-context
dataBlobEncryption
%@ has valid SKM: %@ for sessionID: %@
SKM: %@
*** options : %@
ServerMaterialExchange
IDSDSession::init { self: %p, uniqueID: %@, instanceID: %@, isLightweightParticipant: %@}
[!] This session will be suppressing client notifications { self.sharedState.uniqueID: %@ }
SessionFunctionalLogging
SessionPerformanceLogging
com.apple.private.alloy.screensharing
com.apple.ids.Session-ConnectionQueue-%@
com.apple.private.alloy.facetime.mw
com.apple.private.alloy.facetime.multi
com.apple.private.alloy.facetime.video
com.apple.private.alloy.facetime.audio
com.apple.private.alloy.willow.stream
com.apple.private.alloy.amp.potluck
com.apple.private.alloy.itunes
com.apple.private.alloy.%@
com.apple.private.alloy.safeview
com.apple.private.alloy.screensharing.qr
com.apple.private.alloy.tincan.audio
com.apple.private.alloy.phonecontinuity
com.apple.private.alloy.phonecontinuity: set connectionCountHint to: %@
com.apple.private.alloy.carmelsync
com.apple.private.alloy.notes
com.apple.private.alloy.dropin.communication
com.apple.private.alloy.safari.groupactivities
com.apple.private.alloy.gftaastest.communication
use QR directly for %@.
 self.sharedState.connectionCountHint: %lu, [connectionCountHint unsignedIntegerValue]: %lu
outgoing
incoming
Created session (%@) %@ with destinations %@
QuickRelayLinkProtocol
Skip IDSClientChannel because this is a lighweight participant.
Could not create session: %@ because failed to get this device push token for the service: %@
Destinations are %@
IDSDSession::dealloc { self: %p, uniqueID: %@, instanceID: %@ }
Destroyed session %@
<%p> - uniqueID: %@   accountID: %@   service: %@   destinations: %@   transportType: %@
Reliable
Unreliable
GFTMetrics will report %@
time difference between MKM over push and MKM over QR QUIC: %.3f
_reportRTC summary: %@
didReceiveReport, broadcaster: %p for session: %@
No valid RTC reports to report
-[IDSDSession _cleanupSessionConnection]
%s: session %@ connection %p
reportMKMReceived received first MKM at %f time
reportFirstMKMReceivedFromPush: get allocbind RTC report, time of allocbind response: %f, set the duration to %d ms
reportMKMReceivedOverPushViaCacheForParticipantID: token not found for participantID %llu
session:
Client channel connected %@ (connections claimed %lu)
Lost race condition - missing connection for extra connection %lu
v24@?0@"NSString"8@"IDSClientChannel"16
IDSClientChannel has excessively cached too many packets. Invalidating IDSClientChannel...
IDSClientChannel is nil - dropping packetBuffer %p (length %lu) metadata %p metadataSize %d
IDSClientChannel %p closed
writeToClientChannel: there is no real packet or metadata.
SessionLogDumpSimulateCrash
SessionLogDumpSysdiagnose
SessionLogDumpPacketCapture
SessionLogDumplskq
SessionLogDumplsof
Added cachedData - total %lu cached client data to send
greater than threshold:  [clientChannel excessiveCachingCount]: %d
writeToClientChannel: current data cached time: %f
invalid client channel: currentTime: %f, _channelDataCachedTime: %f, dataCachedDuration: %f, clientChannelTimedout: %f
%p: writeHandler: IDSDSession %p
_checkAndSendCachedDataForClient: clear cached data time
Have %lu cached client data to send
_checkAndSendCachedDataForClient: there is no real packet or metadata
generateClientChannelDataTest
generateClientChannelDataTest: wrote %d test metadata (size %u) into client channel %@
overflowClientChannelDataTest
overflowClientChannelDataTest wrote %d test metadata (size %u) into client channel %@
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IDSAgent/IDSDSession.m
got data %ld from socket %d clientChannel %@
<%@> read nonfatal failure errno %d
<%@> read failed errno %d
IDSDataChannels
<%@> read returned 0 bytes errno %d
_connectSocketDescriptor: ClientChannel read error %@
_connectSocketDescriptor: clientType: %u, end session
_connectSocketDescriptor: strongSelf: %p, not ending session because we have not been told to
_connectSocketDescriptor: ClientChannel or Session has been invalidated; not writing
Client channel read packetBuffer %lu metadata_size %lu error %@ for socket %d
Bug in client: Client channel read only metadata for socket session - dropping metadata_size %lu for socket %d
<%@> write failed to send all bytes %d < %d
<%@> write failed connection terminated %d
<%@> write nonfatal failure errno %d
<%@> write failed errno %d
B36@?0^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}8r^v16I24@"NSError"28
v20@?0Q8I16
socket %d connected to IDSClientChannel %p
kClientChannelMetadataType_TotalDatagramCount %u
kClientChannelMetadataType_TotalDatagramCount should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_CurrentDatagramCount %u
kClientChannelMetadataType_CurrentDatagramCount should be 1 byte, not %u bytes, field: %u
got PacketLinkID %d [%013.6lf]
kClientChannelMetadataType_PacketLinkID should be 1 byte, not %u bytes, field: %u
got trafficClass %u [%013.6lf]
kClientChannelMetadataType_TrafficClassKey should be %u byte, not %u bytes, field: %u
got DSCP %u [%013.6lf]
kClientChannelMetadataType_DSCPKey should be %u byte, not %u bytes, field: %u
got invalid streamIDCount %u
got streamIDCount %u
got streamID %u
kClientChannelMetadataType_StreamIDsKey: size mismatch (%u != %u), ignore.
kClientChannelMetadataType_CountPacketKey should be 1 byte, not %u bytes, field: %u
got Channel Priority %u [%013.6lf]
kClientChannelMetadataType_PriorityKey should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_OptOutPriorityFilter should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_TransitionPacketFlag should be 1 byte, not %u bytes, field: %u
got Participant ID %llu [%013.6lf]
kClientChannelMetadataType_PriorityKey should be 8 byte, not %u bytes, field: %u
got probeGroupID %u [%013.6lf]
kClientChannelMetadataType_ProbeGroupIDKey should be 2 byte, not %u bytes, field: %u
got connectedLinkID %d connectedLinkAttributes %u
kClientChannelMetadataType_LinkConnected should be 4 bytes, not %u bytes, field: %u
got disconnectedLinkID %d
kClientChannelMetadataType_LinkDisconnected should be 1 byte, not %u bytes, field: %u
got defaultLinkID %d
kClientChannelMetadataType_DefaultLinkID should be 1 byte, not %u bytes, field: %u
got ratType %u
kClientChannelMetadataType_RATChanged should be 1 bytes, not %u bytes, field: %u
got basebandRegKey %lu (linkID: %d)
kClientChannelMetadataType_BasebandRegistrationKey should be 4 bytes, not %u bytes, field: %u
got kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey %u
kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_BasebandQueueFlushPayloadKey should know its size. needs kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey
got basebandQueueFlush %@
kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_DiscardLinkIDsKey %@
kClientChannelMetadataType_KeepAliveLinksKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_PreConnectionDataSizeKey %u
kClientChannelMetadataType_PreConnectionDataSizeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_PreConnectionDataKey should know its size. needs kClientChannelMetadataType_PreConnectionDataSizeKey
got preConnectionData %@, size:%u bytes.
sendSKEData failed with error: %@. Will retry.
v16@?0@"NSError"8
kClientChannelMetadataType_PreConnectionDataKey should be %u bytes, not %u bytes, field: %u
got updateQoSIsGood %@ (linkID: %d)
kClientChannelMetadataType_UpdateQoSIsGoodKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_QueryRSSI
kClientChannelMetadataType_QueryRSSI should be %u bytes, not %u bytes, field: %u
got maxBitrate %u (linkID: %d)
kClientChannelMetadataType_MaxBitrateKey should be %u bytes, not %u bytes, field: %u
got the process PID %d
kClientChannelMetadataType_ProcessIDKey should be %d byte, not %u bytes, field: %u
kClientChannelMetadataType_DebugDataTransferTypeKey %d
kClientChannelMetadataType_DebugDataTransferTypeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_DebugDataTransferKey got the group ID %@
got kClientChannelMetadataType_EncryptionInfoKey %@ group: %@
kClientChannelMetadataType_EncryptionInfoKey FALSE. We won't pass the encryption information to the client.
kClientChannelMetadataType_EncryptionInfoKey should be 1 byte, not %u bytes, field: %u
got kClientChannelMetadataType_ForceUpdateEncryptionInfoKey
kClientChannelMetadataType_ForceUpdateEncryptionInfoKey coudln't get the group ID for the session %@!
kClientChannelMetadataType_ForceUpdateEncryptionInfoKey should be 1 byte, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_StatsKey.
Couldn't decode kClientChannelMetadataType_StatsKey bytes into NSDictionary
kClientChannelMetadataType_RemoteDeviceVersionKey should be %u bytes, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_SessionInfoKey.
IDSSession
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_SessionInfoKey
got statsID %u
kClientChannelMetadataType_StatsID should be 2 byte, not %u bytes, field: %u
_extractFieldBytesFromMetadata report dictionary: could not read MKI
_extractFieldBytesFromMetadata report dictionary: could not read MKI as UUID
_extractFieldBytesFromMetadata report dictionary: could not read times
kClientChannelMetadataType_PacketUUID should be %u bytes, not %u bytes, field: %u
kClientChannelMetadataType_ExpireTimestamp should be %u bytes, not %u bytes, field: %u
kClientChannelMetadataType_WiFiAssistEnableKey should be %u bytes, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_StartLinkProbingKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StartLinkProbingKey
Couldn't get NSData for kClientChannelMetadataType_StopLinkProbingKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StopLinkProbingKey
Couldn't get NSData for kClientChannelMetadataType_QueryLinkStatusKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_QueryLinkStatusKey
Couldn't get NSData for kClientChannelMetadataType_StatsRequestData.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StatsRequestData
Couldn't get NSData for kClientChannelMetadataType_flushLinkProbingStatusKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_flushLinkProbingStatusKey
Couldn't get valid kClientChannelMetadataType_MKMParticipantIDsKey.
kClientChannelMetadataType_MKMParticipantIDsKey: size: %u, count: %u
Couldn't get URI for MKMParticipantID %llu
participantIDArray: %@
kClientChannelMetadataType_NeedsHBHEncryption should be %u byte, not %u
kClientChannelMetadataType_IsUPlusOneEnabledKey should be %u bytes, not %u bytes, field: %u
kClientChannelMetadataType_EncryptionSequenceNumber should be %u bytes, not %u bytes, field: %u
kClientChannelMetadataType_RetransmittedPacket should be %u byte, not %u
kClientChannelMetadataType_NonRetransmittablePacket should be %u byte, not %u
kClientChannelMetadataType_ChildConnectionID should be %u bytes, not %u bytes
Unknown metadata type: %u
_connectQRDirectlyToClientChannel: ClientChannel read error %@, self.sharedState.state %d
_connectQRDirectlyToClientChannel: state: %u
_connectQRDirectlyToClientChannel: strongSelf: %p, not ending session because we have not been told to.
not sending to UTunController - currentDatagramCount %u totalDatagramCount %u
Can't send more than %u over the compound data channel! totalDatagramCount %u
not sending to UTunController - packetBufferLength %d currentDatagramCount %u totalDatagramCount %u
UnexpectedSendResult
Client channel read datagram_size %lu metadata_size %lu sendResult %s processTime %0.6lf sendTime %0.6lf [%013.6lf]
QR directly connected to IDSClientChannel %p
cachedSessionInfo is nil, requestType: %lu
allocatorOptions
v24@?0@"NSError"8@"NSDictionary"16
%@: requestSessionInfoWithOptions failed! Couldn't get the cached response from QRAllocator.
%@: requestSessionInfoWithOptions for groupID %@ relayGroupID %@ relaySessionID %@
newOptions
%@: requestSessionInfoWithOptions doesn't support the requestType: %ld
%@: _sendingOfflineActiveParticipantInfoRequest for groupID %@ relayGroupID %@ relaySessionID %@
newLinkOptions
connectQRServer failed due to invalid parameter.
User already left group %@; don't connect
connectQRServer for group %@ failed due to missing (params %p, participantID %@, relaySessionID %@, participantData %@)
sessionInfoCopy
Connect to QR server for %@. (sharedSession:%@, isInitiator:%@, isLegacy:%@, clientType:%d)
Connect to QR server failed for %@ with error %@.
failureReport
Connect to QR server succeeded for %@.
Completed send of join notification fanout message { groupID: %@, success: %@ }
v40@?0@"NSArray"8@"NSString"16@"NSString"24C32B36
lightweight participant: create keys
Cannot fan out the join notification to the group, no groupID!
Not in join state, group = %@, state = %d
Failed to receive all APNS courier acks for reliable join notification before timeout -- ending session { groupID: %@ }
Starting timeout block for reliable join notification delivery { groupID: %@, timeout: %f, timeoutBlock: %@ destinations: %@ }
Not starting timeout block for reliable join notification delivery { groupID: %@, timeout: %f, destinations: %@ }
Canceling timeout block for reliable join notification delivery { groupID: %@, timeoutBlock: %@ }
Triggering early execution of timeout block for reliable join notification delivery { groupID: %@, timeoutBlock: %@ }
ids-session-join-reliability-timeout
IPsecLink is enabled. UTun bypass: %@ service: %@, session: %@.
SessionBypassUTun
UTun bypass: %@ service: %@, session: %@.
openSocketToDevice deviceID %@, self.sharedState.useQRDirectly %@, _isFaceTime %@
open socket for session, byPassUtun: %d
v16@?0^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}8
Open socket for session complete (socket: %d, initial link type:%d) (error: %@)
v64@?0@"NSString"8Q16^[16C]24S32i36Q40@"NSObject<OS_nw_connection>"48@"NSError"56
Open socket for session complete (extra #%d) (socket: %d) (error: %@)
sessionID
session-device-socket
sessionStartWithSocketDescriptor socketDescriptor %d, bypassUtun: %@
set initial link type %d for session %@.
session-initial-link-type
received delayed QR connection %@ for an accepted session
Retry sendSKEData failed with error: %@. Give up.
options
-[IDSDSession setHasPendingAllocation:forIDSSession:]
%s IDSSessionID is nil!
v20@?0B8@"NSData"12
%s - We're already listening on socket %d
Starting to listen on raw client socket %d
Cleanup session: %@
REPORT RTC: %@
Releasing the client channel %p
%@ cleanupSessionWithCleanStatus: shouldCleanStatus: %@, _isLightweightParticipant: %@
%@ cleanupSessionWithCleanStatus: no need to clean session status
Deleted localUnauthenticatedFullIdentity from keychain {identity: %@}
Failed to delete localUnauthenticatedFullIdentity from keychain {error: %@, identity: %@}
PrioritizedActiveParticipants
disconnectGlobalLink failed with error %@
Reconnect initiated By TU
Sending END to %@, %@ <%@>
Ending session with data
Ending session
notifyLeaveToGroup and sessionDidLeaveGroup for group session %@
Didn't fan out the leave notification, the group session %@ is already ended!
Cannot fan out the endSession leave notification to the group, no groupID!
The client left the group session. IDSGroupSession can be removed. _groupStatusNotificationParams.participantID = %@
Resetting preferences for service %{public}@
Closing socket for session
Unhooking and closing socket descriptors from TransportThread %@ (possibly not on TransportThread)
utunOptions
protocol
Made options to open socket %@
Notifying client session %@ stopped with reason %d
Session is already ended, ignoring...
Session stopped notification suppressed
Enabling audio ? %@
Muting ? %@
Setting preferences %@
setRequiredCapabilities triggered leave to unsupported members {groupID: %@, needToSendJoin: %@, needToSendLeave: %@}
setRequiredCapabilities not triggering a leave to unsupported members {groupID: %@, needToSendJoin: %@, needToSendLeave: %@, groupSessionState: %d}
%@ session did start %@ with error %@
%@ session did stop with error %@
Data size is bigger than %d, ending call...
Data size is too small, ending call...
Magic number doesn't match 0x%04x, ignoring...
Malloc error while decrypting, ending call...
Stream decryption transform error %d
Received data Viceroy -> Daemon  (after decrypt data hash: %lu)  (length: %lu)
Sending data Daemon -> Viceroy  (before encrypt data hash: %lu seq: %u)  (length: %lu)
Malloc error while encrypting, ending call...
Stream encryption transform error %d
tcpssl
use TCP for QR, port: %u
use TCPSSL for QR, port: %u
<%@> add the new QR event for the RTC report: %@
<%@> _sendQREventToAVC failed to encode qrEvent for group %@ (error: %@)
<%@> link:%@ didDisconnectForDeviceUniqueID:%@ cbuuid:%@
didReceiveMaterialInfo: SME disabled
didReceiveMaterialInfo type: %d, ignoring (handled separately)
didReceiveMaterialInfo received material info: %@
didReceiveMaterialInfo could not decode content. Data: %@
couldNotDecodeContent
didReceiveMaterialInfo received material info content: %@
payload
didReceiveMaterialInfo could not decode payload. Content: %@
couldNotDecodePayload
didReceiveMaterialInfo could not get fromURI for participant %llu
missingFromURI
didReceiveMaterialInfo could not get push token for participant %llu
missingFromToken
didReceiveMaterialInfo could not process material because ownerParticipantId is 0
missingOwnerParticipantID
didReceiveMaterialInfo: could not process material from %llu for group %@ and session %@ since the originator of material is not in group membership: %@
ReceivedFromUnknownMember
didReceiveMaterialInfo failed to verify signature for info: %@ error: %@
failedSignatureVerification
Receiving Key Material (QUIC) [MKM] -- %f
didReceiveMaterialInfo failed processing MKM for participant %llu; payload %@; error: %@
failedProcessingMKM
ids-rtencryption-master-key-material-key
Receiving Key Material (QUIC) [SKM] -- %f
didReceiveMaterialInfo failed processing SKM for participant %llu; payload %@; error: %@
failedProcessingSKM
ids-rtencryption-stable-key-material-key
Receiving Key Material (QUIC) [PreKey] -- %f
public-prekey
didReceiveMaterialInfo could not process preKey for participant %llu; no preKey found in payload %@
missingPreKeyData
wrap-mode
creation-date
didReceiveMaterialInfo could not process preKey for participant %llu; no wrap-mode found in payload %@
missingWrapMode
didReceiveMaterialInfo could not process preKey for participant %llu; no creation-date found in payload %@
missingServerDateTimestamp
didReceiveMaterialInfo unknown material type %d
didReceiveMaterialInfo did not receive signature: %@
missingSignature
didReceiveMaterialInfo ignoring material info; sessionID %@ does not match our sessionID %@
sessionIDMismatch
didReceiveMaterialInfo verifying signature: %@ matchesPayload: %@
<%@> link:%@ didConnectForDeviceUniqueID:%@ cbuuid:%@
<%@> link:%@ didConnectUnderlyingLink:%d linkUUID:%@ localAttributes:%@ remoteAttributes:%@
-[IDSDSession link:didConnectUnderlyingLink:linkUUID:localAttributes:remoteAttributes:]
%s incorrect attribute length: %d
No need to send kClientChannelMetadataType_LinkConnected, <%@> useQR: %@, isFaceTimeCall: %@
<%@> link:%@ didReiceiveChildConnectionID:%@ forLinkID:%d
No need to send kClientChannelMetadataType_ChildConnectionID, <%@> useQR: %@, isFaceTimeCall: %@
v32@?0@"NSNumber"8@"NSString"16^B24
v32@?0@"NSNumber"8@"NSNumber"16^B24
v32@?0@"NSDictionary"8Q16^B24
destinationsContainFromID: %@ is not in the destinations %@
Ignored updateMembers since destinations have not been changed.
updateMembers: newly added destinations: %@
Updated destinations for group %@ to %@ (triggeredLocally %@)
Updated destinations have lightweight status values: %@
Re-allocating due to new member
Resetting keys, sending membership change event for group %@, triggeredLocally: %@
No need to reset keys for group %@, triggeredLocally: %@
manageDesignatedMembers for group %@ to %@
manageDesignatedMembers doesn't have valid cached sessionInfo for group %@
removeParticipantIDs for group %@ to %@
removeParticipantIDs doesn't have valid cached sessionInfo for group %@
updateParticipantType: no valid cached sessionInfo for group %@
setGroupStreamInfo: sessionInfo[kIDSQRAllocateKey_StreamInfoSubscribedStreams]:%@, sessionInfo:%@, streamInfo.subscribedStreams:%@
Client data blob size is greater than push size limitation which is %ld and groupID: %@
Client data blob size %lu is greater than push size limitation %ld
joinGroupSessionError
Participant query in process or defaults are not set for hardcoded QR session info, self.sharedState.groupID: %@, self.sharedState.destinations: %@
invalidateLatestResponse status: %d, reason: %@, error: %@
sessionInfoFromDefaults
disconnectGlobalLink during leaving group session failed: %@
Cannot fan out the leave notification to the group, no groupID!
sendKeyMaterialMessage - message %{private}@ given aliases %@  destination: %@
Message %@ got response code %lu error %@ lastCall %@
sendKeyMaterialData failed with error: %d
v16@?0q8
setServerDesiredKeyMaterials: SME disabled
updateServerDesiredKeyValueDeliveryMaterialsNeeded: SME disabled
updateServerDesiredKeyMaterials: SME disabled
Received the new MKM %lld milleseconds after the membership change event for group %@
mirage-blob
receiveAndDecryptEncryptedDataBlobs: type: %@, blobLength: %lu, standaloneBlob: %@, keyID: %@
v32@?0@"NSUUID"8@"NSData"16^B24
v32@?0@"NSNumber"8@"NSData"16^B24
recvStableKeyMaterialForFrameworkCache for session %@. SKM: %@
requestMaterialsForParticipantIDs for session %@. participantIDs: %@; materialType:%d
requestMaterialsForParticipantIDs: SME disabled
Sending the session info request to update the active participant list...
URI to participantID mapping changed for sessionID: %@
Allocation failure for session %@, status = %d, code = %d
v32@?0@"IDSGroupSessionActiveParticipant"8Q16^B24
Missing push token at index %d. Replacing NSNull with nil.
Couldn't get the URI from the QRAllocate response for participantID: %llu.
not fastSync, return
update active lightweight participants: %@
update active participants: %@
Failed to get URI from QR allocate response
fanout context
IDSDSession read handler called for %@ - result %s
B24@?0^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}8@"<IDSMultiplexerTransportClientConnection>"16
Reinitiate called for session %@
Session %@ reinitiate called, but we don't support reinitiate, enableQuickRelay: %d, useQRDirectly: %d
Session %@ reinitiate called, but our current state is not connected (current state: %u)
Session %@ reinitiate called, but this session is with the default paired device
Session %@ reinitiate: sending request for initiator to kick off reinitiate flow
Session %@ reinitiate: disconnecting global link
disconnectGlobalLink during reinitiate failed with error %@
Unhandled reinitiate subcommand type %@ for session %@
Reinitiate request message received for session %@: %@
Reinitiate teardown message received for session %@: %@
Session %@ received reinitiate teardown message, but we don't support reinitiate
Session %@ received reinitiate teardown message, but our current state is not connected (current state: %u)
Session %@ reinitiate teardown: disconnecting global link
disconnectGlobalLink during reinitiate teardown failed with error %@
Reinitiate teardown ack message received for session %@: %@
Session %@ received reinitiate teardown ack message, but our current state is not reinitiating (current state: %u)
Session %@ reinitiate: setting up new QR allocation
Reinitiate bringup message received for session %@: %@
Session %@ received reinitiate bringup message, but our current state is not reintiating (current state: %u)
Session %@ reinitiate bringup: requesting allocation for recipient
Reinitiate bringup ack message received for session %@: %@
Session %@ received reinitiate bringup ack message, but our current state is not reintiating (current state: %u)
Reinitiate accepted relay-session-id %@
66776766663F02535E35
QRAllocator
 invalid port %d
<%@: %p forParticipantID: %llu forPublicIdentity: %@ encryptedData: %@>
disableEncryptionForData
IDSSockAddrPairTable_Init failed with memory allocation
IDSSockAddrPairTable_Release
[%s-%s] already exists.
failed with realloc
increase capacity %d->%d
added pair [%s-%s], state (%ld), total %d pair(s).
IDSSockAddrPairTable_UpdatePairState - found no match for transactionID %@
IDSSockAddrPairTable_UpdatePairState - update state for [%s-%s] (%ld->%ld)
Nominate connection [%s(%u)-%s] is done, skip.
Nominate connection [%s(%u)-%s].
Nominate new connection [%s(%u)-%s].
Start echo (%d) for [%s(%u)-%s].
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IDSAgent/IDSSockAddrPairTable.m
skip regular binding request
skip nominate binding request
send binding request %@ for [%s(%u)-%s].
failed to send binding request with error (%s)
SATbl
cannot send echo request due to invalid state (%d).
send echo request (count:%d) for %s(%u)-%s.
failed to send echo request with error (%s)
@"CUTUnsafePromise"16@?0@"IDSMPDecryptionResult"8
timestamp
NGMFullPrekey
IDSDaemonShutdownNotification
com.apple.identityservicesd
UseNewThreadArch_v1
IDS Primary Base Queue
IDSDaemon Primary Queue Targets Base Queue
com.apple.pds.xpc.workloop
com.apple.identityservicesd.pds
/Library/IdentityServices/PDS/
GUIDTRACE
OUTGOING-PUSH_FULLY_SENT:%@ SERVICE:%@
ids-persistent-map-metadata
ids-persistent-map
versionNumber
Block on `IDSPersistentMapPolicy` was nil, this should never happen!
@"NSMutableDictionary"24@?0@"NSDictionary"8q16
com.apple.ids.persistent-map.%@.persist
<%@: %p; identifier = %@; cachedMap = %@; persister = %@>
-[IDSPersistentMap setObject:forKey:]
IDSPersistentMap.m
key && obj
-[IDSPersistentMap removeObjectForKey:]
IDSPersistentMap
We're not loaded; ignoring save to disk for cache %@
-[IDSPersistentMap setObject:forKeyedSubscript:]
Loading cache with identifier %@
  => Underlying persister %@ is unavailable; not loading!
  => Loaded cache has %ld keys
Saving cache with identifier %@ => Will save cache to disk with %ld keys
  => Encoding...
  => Done encoding: %ld bytes
  => Skipping encoding, empty
Exception decoding persistent map -- throwing away {exception: %@, identitier: %@}
Error during Decoding %@
com.apple.identityservices.%@
com.apple.identityservicesd.invitation.store
%@-sentInvitations
%@-receivedInvitation
firewall-limit
firewall-time-period
https://support.apple.com
firewall-support-url
firewall-should-redirect
com.apple.Preferences
/System/Library/UserNotifications/Bundles/com.apple.identityservicesd.firewall.bundle
@2x.png
UNUserNotificationCenter
UserNotifications
%@,%@
Unknown Communication
IDSFirewallLocalizable
Firewall alert title
Lockdown Mode blocked iCloud collaboration
Firewall iCloud alert title
Lockdown Mode blocked Apple Pay request
Firewall ApplePay request alert title
Lockdown Mode blocked Apple Card sharing
Firewall ApplePay sharing alert title
Lockdown Mode blocked SharePlay
Firewall SharePlay alert title
Lockdown Mode blocked FaceTime
Firewall FaceTime alert title
Lockdown Mode blocked FaceTime Audio
Firewall FaceTime Audio alert title
Lockdown Mode blocked FaceTime Live Photo
Firewall FaceTime Live Photos alert title
Lockdown Mode blocked Intercom message
Firewall Intercom alert title
Lockdown Mode blocked Screen Sharing
Firewall Screen Sharing alert title
Lockdown Mode blocked Walkie-Talkie
Firewall Walkie-Talkie alert title
Lockdown Mode blocked Classroom
Firewall Classroom alert title
Lockdown Mode blocked purchase request
Firewall iTunes Purchase request alert title
Lockdown Mode blocked Find My
Firewall Find My Device alert title
Lockdown Mode blocked Location Sharing invitation
Firewall Location Sharing alert title
Lockdown Mode blocked Sharing
Firewall GroupKit alert title
Lockdown Mode blocked Home access
Firewall HomeKit alert title
Lockdown Mode blocked camera access
Firewall HomeKit camera alert title
Lockdown Mode blocked Home invitation
Firewall HomeKit Invite alert title
Lockdown Mode blocked Activity Sharing invitation
Firewall Activity Sharing alert title
Lockdown Mode blocked Game Center invitation
Firewall Game Center Invite alert title
Lockdown Mode blocked Health Sharing invitation
Firewall Health Sharing alert title
Lockdown Mode blocked Car Key Sharing invitation
Firewall Car Key Sharing alert title
Lockdown Mode blocked ETA Sharing
Firewall ETA Sharing alert title
Lockdown Mode blocked AirDrop
Firewall AirDrop alert title
Lockdown Mode blocked Photo Stream Invitation
Firewall Photo Stream Invite alert title
Firewall AppleCare Screen Share alert title
Lockdown Mode blocked a Device Inquiry
Firewall AppleCare Settings Share alert title
Lockdown Mode blocked Focus Sharing
Firewall StatusKit alert title
Lockdown Mode blocked ScreenTime Sharing
Firewall ScreenTime alert title
Lockdown Mode blocked Freeform
Firewall Freeform alert title
Lockdown Mode blocked Notes
Firewall Notes alert title
%@ is trying to contact you on %@. Communication was dropped.
Firewall alert body
%@ attempted to collaborate using iCloud.
Firewall iCloud alert body
%@ attempted to request or send a payment.
Firewall ApplePay request alert body
%@ attempted to share Apple Card or transaction information.
Firewall ApplePay sharing alert body
%@ attempted to SharePlay Music.
Firewall SharePlay alert body
%@ attempted to FaceTime.
Firewall Firewall FaceTime alert body
%@ attempted to FaceTime Audio call.
Firewall FaceTime Audio alert body
%@ attempted to share a FaceTime Live Photo.
Firewall FaceTime Live Photos alert body
Someone attempted to send Intercom message from HomePod.
Firewall HomePod Drop-In alert body
%@ attempted to screen share with you.
Firewall Screen Sharing alert body
%@ invited you to Walkie-Talkie.
Firewall Firewall Walkie-Talkie alert body
A teacher attempted to send a command using Classroom.
Firewall Classroom alert body
%@ attempted to request purchase authorization.
Firewall iTunes Purchase Request alert body
Someone attempted to use FindMy to locate an AirTag near you.
Firewall Find My Device alert body
%@ invited you to share your location.
Firewall Location Sharing alert body
%@ attempted to set up a share with you.
Firewall GroupKit alert body
%@ attempted to access a Home.
Firewall HomeKit alert body
%@ attempted to access a camera.
Firewall HomeKit camera alert body
%@ attempted to invite you to a Home.
Firewall HomeKit Invite alert body
Firewall Intercom alert body
%@ invited you to share your Fitness Activity.
Firewall Activity Sharing alert body
%@ invited you to play a game.
Firewall Game Center Invite alert body
%@ invited you to share your health data.
Firewall Health Sharing alert body
%@ invited you to share your Car Key.
Firewall Car Key Sharing alert body
%@ attempted to share their ETA with you.
Firewall ETA Sharing alert body
%@ attempted to share something using AirDrop.
Firewall AirDrop alert body
%@ invited you to a Shared Photo Stream.
Firewall Photo Stream Invite alert body
An AppleCare advisor attempted to view your screen.
Firewall AppleCare Screen Share alert body
An AppleCare advisor attempted to gather information about your Mac.
Firewall AppleCare Settings Share alert body for Mac
An AppleCare advisor attempted to gather information about your iPhone.
Firewall AppleCare Settings Share alert body for iPhone
An AppleCare advisor attempted to gather information about your iPad.
Firewall AppleCare Settings Share alert body for iPad
An AppleCare advisor attempted to gather information about your device.
Firewall AppleCare Settings Share alert body default
Firewall StatusKit alert body
Firewall ScreenTime alert body
%@ attempted to collaborate with you using Freeform.
Firewall Freeform alert body
%@ attempted to collaborate with you using Notes.
Firewall Notes alert body
An unknown contact
Collaboration%@
com.apple.Passbook
com.apple.facetime
com.apple.Home
Screen Sharing%@
Classroom%@
com.apple.MobileStore
com.apple.findmy
Fitness%@
Game Center%@
Health%@
com.apple.Maps
com.apple.AirDropUIRemoteNotification
Photos%@
Apple Care%@
Focus%@
Screen Time%@
Freeform%@
Notes%@
UNNotificationRequest
UNMutableNotificationContent
UNNotificationIcon
com.apple.
%@/%@
com.apple.ids.IDSDGroupStatusNotificationController
GroupStatusNotificationController
Cannot get participantsForGroupID, no groupID!
participantsForGroupID %@ are %@
IDSDGroupStatusNotificationController.m
yyyy-MM-dd HH:mm:ssz
en_US
messageDict
notify Leave To Group
ids-multiway-ftmessage-send-timeout
Server Bag provided us with a send timeout of %f 
Group status notification message callback received { GUID: %@, responseCode: %lu, error: %@, lastCourerAck: %@, lastCall: %@ }
Last Courier ack received for group status notification message { waitForMadridAcks: %@, pendingCompletionBlock: %@ }
Last Madrid ack received for group status notification message { waitForMadridAcks: %@, pendingCompletionBlock: %@ }
No Group, bailing...
Process incoming fanout message: %@, fromToken: %@, fromID: %@, specificOriginator: %@ fromStorage %@
processIncomingParticipantUpdateMessage: We'll drop this participant update message for group %@ since %@ is not in this group!
Receive join from initiator: %@
Couldn't pass the join event to clients. There is no session for group %@ and the join push is not from Initiator.
Passing the join event to client/s. There is no session for group %@ but the join push is from Initiator
processIncomingParticipantDataUpdateMessage: We'll drop this participant update message for group %@ since %@ is not in this group!
Look up peer with URI: %@, push token count: %u
Skipping duplicate token %@
strongSelf->_groupIDToCapabilityToParticipantPushTokens[groupID]
groupID: %@, sessionID: %@, %@
Could not look up the recipients' push tokens, IDs: %@, errors: %@ 
Looked up _groupMemberPushTokens: %@
Cannot find the push tokens, missing recipientIDs.
device:
%s - No account found to build specificOriginator, bailing...
%s - No device found to build specificOriginator, bailing...
%s - No device push token found to build specificOriginator, bailing...
%s - No device identity found to build specificOriginator, bailing...
original fromID %@ -> resulting specificOriginator %@
Couldn't find the tokens for group %@
Coudln't find the URI for the given token for group %@. the pushToken is not NSData.
Coudln't find the URI for the given token %@ for group %@.
Broadcasting receivedGroupSessionParticipantUpdate:forTopic: {topic: %@, update: %@, context: %@}
Did not find a client to handle receivedGroupSessionParticipantUpdate:forTopic: -- dropping broadcast
Broadcasting receivedGroupSessionParticipantDataUpdate:forTopic: {topic: %@, update: %@}
Did not find a client to handle receivedGroupSessionParticipantDataUpdate:forTopic: -- dropping broadcast
No auth token
auth token
No profile ID
profile-id
profileInfo
x-vc-profile-id
x-vc-auth-token
Profile response: %@
com.apple.private.ids.allow-push-replay
com.apple.idstool
plain
encrypted
decrypted
encryptedAgain
decryptedAgain
v28@?0B8@"NSArray"12@"NSError"20
IDSToolTrigger
Session Guid
foo2@apple.com
Foo's New Device
@16@?0@"IDSEndpoint"8
v32@?0@"IDSQueryKeyTransparencyContext"8@"NSArray"16@"NSError"24
v24@?0@"IDSKTVerificationResult"8@"NSError"16
v24@?0@"NSArray"8@"NSError"16
Stored Users:
   DS Realm:
      %@
         %@
   Phone Realm:
   Transient Phone Realm:
%@ => %@
v24@?0@"NSString"8@"NSDictionary"16
12345678-7654-DADA-DADA-DADADADADADA
idstest
localdelivery
devicePrekeys.publicPrekey.timestamp
%@[%lld]
services:
notification services:
entitlements:
commands:
capabilities:
bundle ID:
v60@?0@"IMRemoteObject"8@"NSSet"16@"NSSet"24@"IDSEntitlements"32@"NSSet"40I48@"NSString"52
(null)
Push Token
Session Token
Refresh Date
Expire Date
Legacy Message Protection Version
Legacy Message Protection Identity
NGM Message Protection Version
NGM Message Protection Prekey
KT Loggable Data
KT Device Signature
KT Mismatched Account Flag
KT Capable Flag
%@%@
(None)
Traffic
*** Clearing traffic ***
global-%u
  == Incrementing %@ for service: %@   Requestor: %@  (Count: %d, GlobalCountForAdhocType%u: %@)
outgoing-messages
outgoing-fallback-messages
-fallback
peer%@-message-budget-global-daily-%u
     Server daily global%@ budget is: %@   Current count is: %@
     **** we are over budget
     **** We are over budget - Server daily global budget is: %@   Current count is: %@
peer%@-message-budget-daily-%@
     Server daily%@ budget is: %@   Current count is: %@
     **** We are over budget - Server service%@ budget is: %@   Current count is: %@
peer%@-message-budget-default-daily-%u
     Server daily%@ default budget is: %@   Current count is: %@
     **** We are over budget - Server daily%@ default budget is: %@   Current count is: %@
     No budget specified
outgoing-server-messages
server-message-budget-daily-%@
     Server daily budget is: %@   Current count is: %@
query-requests
query-ui-budget-daily-%@
queries
query-budget-daily-%@
====== IDS Traffic Usage:
   Service: %@
     %@: %@
====== Done
incoming-messages
incoming-local-messages
com.apple.private.ac
iMessage
Temporary Phone Alert iMessage
FaceTime
Temporary Phone Alert FaceTime
%@ and %@
Multiple service format
WatchPairing
Finishing up switching
Calling completion block to finish switching
PreferredAccount
FetchRemote
TinkerDeviceInfo
AccountSyncSyncedServices
@16@?0@"NSString"8
d16@?0q8
v16@?0@?<v@?B>8
com.apple.identityservice.accountsync-%@
v20@?0B8@"NSString"12
-[IDSAccountSync noteShouldSynchronizePreferredAccount]
identityservicesd
@16@?0@"IDSDAccount"8
@16@?0@"NSDictionary"8
B16@?0@8
v16@?0@8
B24@?0@"NSString"8@16
<%@: %p encryptionType: %@, dataLength: %lu>
IDSKeychainKeyElectionStoreErrorDomain
clusterData
group-pai-%@-%@
IDSClientDataErrorDomain
EC Key Loading Failure (iden:%@, pre:%@, reg:%@, unreg:%@)
 (regKeychain %@:%ld)
 (regDeserial %@:%ld)
 (unregKeychain %@:%ld)
 (unregDeserial %@:%ld)
 (generate %@:%ld)
 (rolling %@:%ld)
 (toRegister %@:%ld)
SKPresence
StatusKit
pMpr
pMpo
pTtl
WebTunnel
Web Tunnel Message Completed With Respone Headers %@
AKAccountManager
AuthKit
prod
com.apple.private.alloy.maps
FaceTime_temporary
iMessage_temporary
IDS_temporary
com.apple.private.alloy.electrictouch
@"NSArray"20@?0i8@"NSArray"12
B16@?0@"IDSDAccount"8
v16@?0@"IDSDAccount"8
LastRepairInterval
TotalRepairCount
InitialRepairInterval
phone-registration-retry-interval-seconds
phone-registration-retry-max-interval-seconds
service_identifier
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IDSAgent/IDSBTLELink.m
BTLE
IDSBTLELink
setHasSpaceAvailable %@
didReceiveData length %luB
BTLELink
Received data too big (%lu) - rejecting
Received zero-length data - rejecting
Received data too small (%lu) - rejecting
Data corruption! Checksum check failed (old:%04x new:%04x) data(%d): %@
Data corruption! This data did not decode(%d): %@
%c BTLE      (%s) Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
innerDictionary
auth-token
id-validate-credentials
origin
v16@?0@"CUTAsyncReducerState"8
IDSRapportDeliveryController.m
Any single bonjour message send shouldn't fail the whole send operation
hello (controlChannelVersion: [%@], productName: [%@], productVersion: [%@], productBuildVersion: [%@], model: [%@], protocol: %@ minCompatibilityVersion: %@ maxCompatibilityVersion: %@ deviceUniqueID: %@ instanceID: %@, supportIPsecLink:%@, isTinker: %@)
%@: control message: hello cannot decode controlChannelVersion
IDSNetworking
%@: control message: hello cannot decode productName
%@: control message: hello cannot decode productVersion
%@: control message: hello cannot decode productBuildVersion
%@: control message: hello cannot decode model
UTun
Optional field data byte size: %lu
Instance ID: %@
Device uniqueID: %@
Capability flags: %@
Service minimum compatibility version: %@
Unknown field type: %u
ProtocolVersion: %@, min/max: %@ %@
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IDSAgent/IDSUTunControlMessage.m
getUint32FromBytes, uint32_t should be 4 bytes, not %u bytes, field: %u
getUint64FromBytes, uint64_t should be 8 bytes, not %u bytes, field: %u
getUint16FromBytes, uint16_t should be 2 bytes, not %u bytes, field: %u
IDSTapToRadarLastRequestTime
[%@] Tap-to-Radar: %@ (server error code: %@)
Internal IDS error detected 
Internal IDS Error Detected
An internal IDS error has been detected
IDSPopupPromptLastRequestTime
%@-%ld
SpamReporting
Told to report spam with localObject %@ for service: %@
Process not entitled to report spam
IDS Server reports that general spam reporting v1 is disabled.
Couldn't find account with alias for service {serviceIdentifier: %@, alias: %@}
ids-general-spam-report-v1-is-disabled
Server Bag provided us with v1 spam reporting value isDisabled: %@
version
v24@?0@"ENGroup"8@"NSError"16
v48@?0@"IDSGroupPutMessage"8@"NSError"16q24@"NSDictionary"32@"NSArray"40
v16@?0@"NSArray"8
v48@?0@"IDSGroupGetMessage"8@"NSError"16q24@"NSDictionary"32@"NSArray"40
Unepxcted account key class. Expected IDSAccountIdentity
Unexpected cypher class. Expected IDSConversationGroupCypher
Unepxcted device key class. Expected IDSDeviceIdentity
forwarding-sig
groupID
<%@ %p key: %@, groupID: %@, data.length: %@, signature.length: %@>
IDSCloudKitKeyTransparencyStoreErrorDomain
com.apple.private.ids.kt
com.apple.private.ids.kt-kvs
IDSKeyTransparencyDataZone
IDSKeyTransparencyDeviceRecord
IDSKTDevice
IDSKTMetadata
IDSKTState
IDSKTKVSCreationMetric
IDSKTKVSCreationSuccess
IDSKTKVSQuotaViolation
KVSErrorDomain
KVSErrorCode
<%@: %p deviceData: %@, deviceMetadata: %@ recordID: %@>
v32@?0@"NSArray"8@"NSArray"16@"NSError"24
v24@?0@"NSDictionary"8@"NSError"16
v24@?0B8B12@"NSError"16
Unable to fetch CloudKit account info
Timed out fetching account key transparency eligibility.
v24@?0@"CKAccountInfo"8@"NSError"16
Timed out upserting key transparency device record
Device-to-device encryption is not available
Failed to fetch device-to-device encryption availability status
Unable to create CloudKit record for provided device record
@16@?0@"IDSCloudKitKeyTransparencyDeviceRecord"8
Key transparency device record delete is not implemented
Timed out nuking key transparency device records
Timed out fetching key transparency device records
v16@?0@"CKRecord"8
@16@?0@"CKRecord"8
v24@?0@"CKQueryCursor"8@"NSError"16
KVS not yet loaded.
Failed to sync KVS.
CloudKit
ck-kt-account-timeout
ck-kt-upsert-timeout
ck-kt-time-interval-for-requests
ck-kt-upsert-nondiscretionary
ck-kt-nuke-timeout
ck-kt-nuke-nondiscretionary
ck-kt-fetch-timeout
ck-kt-cache-enabled
ck-kt-cache-ttl
ck-kt-fetch-nondiscretionary
CKCurrentUserDefaultName
CKContainer
CKRecordID
CKRecordZoneID
CKRecord
CKRecordZone
CKFetchRecordZonesOperation
CKModifyRecordZonesOperation
CKModifyRecordsOperation
CKQuery
CKQueryOperation
paired-devices
schema-version
System is shutting down, not creating daemon
Resetting preferences to 0 for all services
dummyService
/Library/IdentityServices/delete/
Failed to create to-be-deleted directory %@ error %@
Failed to move incoming files to to-be-deleted directory %@ error %@ -- delete anyway
Last resort file removal took %0.6lf seconds
Delayed background file removal took %0.6lf seconds
Failed to create incoming files directory %@ error %@
IDS incoming files directory cleanup-on-init took %0.6lf seconds
System did lock
Alerted that duet resource availability has changed.
No more listeners terminating
Shutting down
======================================================================
===== Listener Information ===========================================
     Listener ID: %@ (%d:%@)
   Remote Object: %@
    Local Object: %@
    Entitlements: %@
        Commands: %@
    Capabilities: %@
      Bundle IDs: %@
===================================
agentRequested
TimingLogs
IDSAgent took %f seconds to launch
serviceInfo
enabledAccountsInfo
dependentDevices
linkedDevices
familyInfo
familyDevices
maxMessageSizes
pendingInvitationMap
receivedInvitationMap
deviceIdentifier
activeDeviceUniqueID
Found existing listener %@ for pid %d, cleaning up
Exception handling existing listener cleanup: %@
Tried to set up listener (ID: %@) with empty listener port
Tried to set up listener (port: %@) with empty ID
services
commands
capabilities
bundleID
processName
notificationServices
Setting up connection to listener ID: %@  bundle ID: %@  setupInfo %@ entitlements %@  pid: %d  name: %@  connection: %p notificationServices %@
com.apple.healthd
Exception generating setup information for listener: %@
context
v16@?0Q8
Daemon was hard reset, ignoring incoming request
** Empty local object passed in for listener check
No listener found for local object: %@
Exception performing validated listener block: %@
v32@?0@"IMRemoteObject"8Q16^B24
Tried to remove nil listener object
Removing listener ID: %@
We had %lu %@ before removing listener, now we have %lu. This listener had %lu.
Exception removing listener: %@
Exception removing listener object: %@
Exception removing local listener object: %@
Exception looking up listeners: %@
remoteObjectDiedNotification: %@
localObjectDiedNotification: %@
Resetting link preferences for process %@
networkStateChangedForLogTransportHint:
callservicesd
assistantd
com.apple.private.alloy.siri.proxy
companion_proxy
com.apple.private.alloy.companionproxy
Starting push handling with services %@ waking topics: %@ opportunistic topics: %@ nonwaking topics %@
com.apple.idsdaemon.apsqueue
Updating push handling with services %@ waking topics: %@ opportunistic topics: %@ nonwaking topics: %@
Updating local push handling with topics: %@
CheckResponseStorageFlags
Updating push handling with commands %@
Daemon was hard reset, ignoring broadcast
Service found to find broadcaster %@   topic: %@
com.apple.private.alloy.accountssync
com.apple.private.alloy.health.sync.classc
com.apple.private.alloy.fitnessfriends.icloud
com.apple.private.alloy.fitnessfriends.imessage
v32@?0@"IDSIncomingMessageBroadcast"8Q16^B24
Broadcast: outgoing generic notification %lld
Broadcast: starting to work on outgoing notification id %lld
Daemon was hard reset, not enqueuing broadcast
IDSDaemon: Exception caught broadcasting message: %@
Broadcast: Couldn't find a valid service for the given topic %@
Broadcast: scheduling broadcast %lld on topic %@ to clients needsTargetAck %d targetsAlive %d shouldLaunch %d
Broadcast: broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u
Broadcast: failed to deliver broadcast %lld to targets, enqueueing for later dispatch!
Broadcast: Enqueueing broadcast %lld on topic %@ 
Broadcast: Performing enqueued broadcast %lld for topic %@
Broadcast: Broadcast %lld enqueued at %@ has timed out - Calling timed out broadcast block for topic %@ with nil broadcaster to allow cleanup
Broadcast: enqueued broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u
B16@?0q8
Broadcast: done working on outgoing notification id %lld
v16@?0@"NSObject<OS_xpc_object>"8
Broadcast: Broadcasting xpc wake notification %@ to awaken clients of %@.
IDSClientWake
Broadcast: Broadcasting darwin notification %@ to awaken clients of %@.
Launching on-demand services for queued broadcast attempts
Couldn't find a valid service for the given identifier %@
Broadcast: Received request to drop enqueued broadcast %lld
Broadcast: Dropping enqueued broadcast %lld
Broadcast: Resetting queued broadcasts for services %@ priority %ld 
Broadcast: Processing queued broadcasts for services %@ priority %ld forceRetry %d 
Broadcast: previously enqueued broadcast %lld for service %@ succeeded %d needsClientAck %d forceRetry %d 
Processed queued broadcast attempts - %lu remaining for %@
Dropping queued broadcasts for all services priority %ld
Dropping %@ for %@
Dropped queued broadcasts for all services priority %ld
idstool
accountsd
Allowing wildcard access
IDS access warning: %@ for service: %@ entitlement: %@ client: %@:%@:%d entitlements: %@
IDS access warning: %@ for service: %@ entitlement: %@ account: %@ entitlements: %@
############### Service not found
############### Unknown entitlement type
############### No entitlements found
v24@?0@"NSDictionary"8@"IMLocalObject"16
PID: %d was suspended
Exception handling pid suspension: %@
Incoming listener services %@ commands %@ caps %d
Allowing listener services %@ commands %@ caps %d
Got %@ %@ for localObjectIndex %lu
-[IDSDaemon registerForNotificationsOnServices:messageContext:]_block_invoke
%s: received client request to change notification services from %@ to %@ 
Setting wakingPushPriority %ld for topic %@, was %@
Removing waking push priority for service %@ in store
socket
socket-type
session-socket
received socket %@
IDSDaemon - Could not find session with uniqueID %@ to setup client socket, ignoring...
raw-socket
Incorrect objet type passed in as file descriptor
service
completionHandlerID
opensocket [%@] context=[%@] (handlerID:%@) ***
opensocket was called for a non-default device without nsuuid!!!!!!!!
client directly calling UTUN's openSocketWithOptions
%@ didn't specify any priority for %@. This will use the default priority queue.
client's openSocketWithOptions call returned socket %d, error %@
utun finished connection options[%@] socket(%d) handlerID[%@] error[%@] socketObject[%@]
device-socket
metrics
error
closesocket [%@]
v40@?0Q8Q16Q24Q32
syncMessagesStats
defaultMessagesStats
urgentMessagesStats
urgentCloudMessagesStats
sendingMessageStats
queuedIncomingMessages
linkStats
Broadcasting delivery stats to client
persistPendingInvitation: persisting invitation {%@} for service {%@}
persistPendingInvitation: Cannot persist invitation {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} 
persistReceivedInvitation: persisting invitation {%@} for service {%@}
persistReceivedInvitation: Cannot persist invitation {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} 
removePendingInvitation: removing invitations with identifiers {%@} for service {%@}
removePendingInvitation: Cannot remove invitations {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} 
removeReceivedInvitation: removing invitations with identifiers {%@} for service {%@}
removeReceivedInvitation: Cannot remove invitations {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} 
%@.[%d]
B16@?0@"IDSServiceProperties"8
v36@?0@8@"NSString"16@"NSString"24B32
Accepting Incoming Grant Requests
IDSDaemonMIGInterface auth port died: %@
v24@?0@"NSObject<OS_xpc_object>"8@"NSObject<OS_xpc_object>"16
Incoming peer auth grant request
com.apple.identityservicesd.connection_queue
IDSDaemonMIGInterface: Could not create server with name: %@
_IDSDaemonRunningNotifyToken
IDSDaemonMIGInterface
peer(%d) received XPC_ERROR_CONNECTION_INVALID
peer(%d) received XPC_ERROR_CONNECTION_INTERRUPTED
peer(%d) received XPC_ERROR_TERMINATION_IMMINENT
setup-request
received message from peer(%d): %s
portName
setupInfo
RejectDataSeparatedClients
response
granted
Incoming file descriptor request
SyncReplySupport
received unknown from peer(%d): %s
ids-query-qr-allocate-cloudmessaging
ids-query-qr-allocate-facetime
ids-query-qr-allocate-groupfacetime
ids-query-qr-allocate-homekit
ids-query-qr-allocate-terminus
ids-query-qr-allocate-default
ids-qr-allocate-prevent-duplicate-tokens
com.apple.private.alloy.ids.cloudmessaging
com.apple.private.alloy.terminus
PacketsPerSecond
InputBytesPerSecond
OutputBytesPerSecond
Intent
Timestamp
IDSPowerLogQueue
LinkPreferencesManager
updateService: %{public}@, withPreferences: %{public}@.
Resetting preferences to 0 for service: %{public}@, at time: %{public}@
Cannot update preferences for service: %{public}@ with negative values, preferences: %{public}@.
Getting accumulativePreferencesForAllServices. Service: %{public}@, preferences: %{public}@
forceBTClassic
ServiceName
IDSLinkPreferenceRequest
push_token
trusted_services
buildVersion
productName
transparencyVersion
_IDSEncryptionQueueSync
_MessageEncryptionContextSync
_IDSEncryptionQueueDefault
_MessageEncryptionContextDefault
_IDSEncryptionQueueUrgent
_MessageEncryptionContextUrgent
B16@?0^@8
IDSDXPCFirewall.m
completion
Invalid service name. Could not fetch service properties.
Failed to add entries to allow list.
Failed to remove entries from allow list.
Failed to add entries to the allow list after successfully removing entries.
Failed to fetch donated entries from allow list
Failed to fetch entries from allow list
Failed to remove all donated entries from allow list.
Failed to remove all entries from allow list.
Failed to get recently blocked entries
-[IDSDXPCFirewall populateMergeIDForEntries:withCompletion:]
Failed to query for merge id due to nil local uri or cert
v44@?0@"NSDictionary"8@"NSString"16@"NSString"24B32@"NSError"36
IDSFirewallAllowQuery
GUID %@ Message to send per destination:
IDSMessageFactoryComponent.m
@"CUTUnsafePromise"16@?0@"NSArray"8
IDSEngramKeyStoreErrorDomain
iCloud.com.apple.Engram.Development
kIDSEngramKeyStoreFullDeviceIdentity
Engram key election failed
v40@?0@"IDSMPFullAccountIdentityCluster"8@"IDSMPFullServiceIdentityAdmin"16@"IDSMPFullServiceIdentitySigning"24@"NSError"32
Device is not currently in Keychain Sync Circle. Ensure your device has iCloud Keychain Sync enabled and device is not under first unlock
Engram is disabled on this device
Engram is disabled on this device. Update UserDefaults as described in IMUserDefaults
No registered account identity. Please re-register
Cluster missing full admin identity with type A
Cluster missing public admin identity with type A
Unable to extract device identity from serialized data
Account key rolling not implemented
com.apple.private.alloy.connectivity.monitor
LocalSetup
-[IDSDXPCReunionSync reunionSyncStartedForServices:withCompletion:]
Reunion: %s services: %@
-[IDSDXPCReunionSync reunionSyncCompletedForServices:withCompletion:]
member-appleID-aliases
member-phone-numbers
IDSFamilyManager
Fetching Family
Family Fetch returned with error code: %ld
Device is not part of a family. Will not allow force fetch until family updates.
Pulling out previously stored messages sent to a family service.
Error fetching family, will allow trying again later.
v24@?0@"FAFamilyCircle"8@"NSError"16
Initializing IDS Family Manager
FAFetchFamilyCircleRequest
FamilyCircle
com.apple.family.family_updated
We're doing a  Forced Fetch already, we'll let that continue
Starting Forced Fetch. Fetch count is now at: %d
Notification received for family update.
%p <Control channel: uniqueID[%@] pendingReceive[%d] pendingSend[%d] outgoingMessages[%d] outgoingPriorityMessages[%d] encrypting[%u (pl:%u pr:%u)>
control channel %@
none
disabled
default paired PK
default paired none
remote UNENCRYPTED
remote PK
v52@?0@"NSData"8B16@"NSData"20@"NSDictionary"28@"NSError"36@"IDSDecryptionMetadata"44
cloud paired PK
v20@?0i8@"NSObject<OS_nw_error>"12
v44@?0@"NSData"8B16@"NSData"20@"NSError"28@"IDSEncryptionMetadata"36
control message: OTRNegotiation cannot decode token
<%@:%p local: %@ remote: %@>
id-provision-temporary
vc-profile-id
vc-auth-token
sim-mcc
sim-mnc
x-push-token
temporary-credential
NotifySMS
PhoneNumber
AppleID
HomeNumber
Unrecognized
UnknownError
NoError
BadInvitationContext
AliasInUse
AccountHasNoVettedAliases
AliasNotAvailable
AliasLegacyOrInactive
AccountNotAuthorized
UnconfirmedAlias
ServerRegistrationUnsupported
InvalidLogin
PasswordRequestFailed
LoginFailed
AccountUpdateNeeded
NewPasswordNeeded
PermanentlyBlocked
TemporarilyBlocked
NoDeviceID
NoPushToken
RegistrationCancelled
NotSupported
SMSChargeDeniedByUser
DeliveredTooManySMS
TooManySMSDeliveryFailures
GarbageSMSSignature
GarbagePhoneNumber
ServerNotFound
ServerNotAvailable
UnrecognizedServerError
ServerAuthenticationFailed
MissingAuthenticationCredentials
BadPushToken
NoResultCodeFromServer
RateLimitError
AbsintheServerError
UnsupportedManagedAppleID
UnsupportedManagedAuditorID
UserDisabledSMSAuthentication
UserDisabledSMSRegistration
DeniedByServer
ServerRejectedAuthenticationCredentials
IrreparableServerRejection
NoLegacyPublicKey
PasswordRequestDismissed
NoURIsInRegisterResponse
NoURIsInRegisterRequest
AbsintheDataConstructionFailed
AbsintheCertificateFetchFailed
UnspecifiedMessageDeliveryError
Messenger
Invitation
com.apple.private.alloy
ds-id
IDSTTLCache fetch cached object
v32@?0@"NSString"8@"IDSTTLCacheItem"16^B24
Sysdiagnose-Oversized
Most Recent PNR Reasons %@
Most Recent IDS Registration Reason %ld
@"NSString"8@?0
Recent-Registration-Reasons
ids-groupMKMCache-number-of-broadcast-cache-mkm
ids-groupMKMCache-number-of-broadcast-cache-mkm-slow-cpu
<%@: %p URICount: %lu, MkMCount: %lu>
<%@: %p URIs: %@, MkMs: %@>
Returning MkM collection to broadcast { destinationURI: %@, shouldIncludePeerKeys: %@, collection: %@, self: %@ }
IDSGroupMasterKeyMaterialCache.m
v24@?0@"IDSGroupEncryptionKeyMaterial"8^B16
<%@: %p identifier: %@, currentLocalMkM: %@, nextLocalMkM: %@, URIs: %@, MkMsCount: %lu>
<%@: %p identifier: %@, currentLocalMkM: %@, nextLocalMkM: %@, URIs: %@, MkMs: %@>
vc-profile-validate-invitation-context
Profile validation response: %@
phoneUser
expiration
finished
Provisioned
notifiedSuccess
<%@:%p> uid: %@, pn: %@, expiration: %@, finished : %@
fromURI
toURI
<service:%@,from:%@,to:%@>
IDSValidationSessionErrorDomain
register
absinthe-v3-enabled
absinthe-baa-option-enabled
absinthe-baa-option-enabled-ios13
absinthe-baa-timeout
absinthe-baa-cert-ttl-minutes
<%@ %p isInitializedForSigning: %@, isInitializedForScoring: %@>
absinthe-message
headerDictionary
absinthe-signature
absinthe-serv-key
absinthe-udid
absinthe-serial-number
absinthe-imei
absinthe-meid
true
false
absinthe-v4
absinthe-baa
baa-message
%@:%@
baa-signature
baa-certs
performed-user-intent-migrate
triggeredRemoteSessionVersion
ids-upgrade-triggered-reg-update-msg
IDSDAccountController
Found default paired ID
Did not find fromToken or FromDeviceUniqueID in %@
Did not find an account with that ID
Did not find a default paired device on this account %@
This is the default paired device
This is not the default paired device
ids_authkit
v16@?0@"IDSDAccountController"8
PrototypeMode
IDS-List
@"NSArray"8@?0
Checking %@
 => Account disabled
Account matches: %@
Finding account with service name %@ aliasURI %@
Account matches !
Found no match
Finding account with service name %@ loginID %@
  => No account found for unique ID: %@
Finding account with service name %@ myID %@
P:%@
Account matches!
  => (Thread Safe) Found service: %p (for UID: %@)
  => (Thread Safe) No service found for unique ID: %@
com.apple.private.alloy.sms
Finished setting up local accounts
ImportedLegacyIMAccounts
AuthToken
ActiveAccounts
ImportedLegacyIDSAccounts2
prefDictionary
Persisting %@ accounts
ReRegisteredForDevicesHash
ReRegisteredForDevices
ReRegisterForAliasRepair
DidCleanLegacyAccountPrefs
%@/Library/Preferences/%@.plist
MigratedToNewDisabledState
GDRRequestMadeForRelayRepair
RemovedServices
IDSDAcountController
-[IDSDAccountController loadStoredAccounts]
Clearing legacy domain { domain: %@ }
Loaded legacy accounts { count: %@ }
Enabling legacy accounts { accounts: %@ }
nsuuid
push-token
private-device-data
       found push token in: %@
com.apple.private.alloy.icloudpairing
com.apple.ids.deviceproperties
v32@?0@8@"NSDictionary"16^B24
AKAppleIDAuthenticationController
com.apple.imservice.iMessage
com.apple.imservice.FaceTime
id-provision-alias
featureId
scopeId
allowedServices
expiry-epoch-seconds
userVisibleName
alias
operation
attributes
Missing self identity
self URI
renew
create
delete
Dealloc UDPGlobalLink %@
Invalidate UDPGlobalLink
createConnectionData - localPartyID=%@
invalid link state %s
UDPGlobalLink
processRemoteConnectionData %@
invalid remote connection data
invalid remote connection data, %uB
connection data has unsupported version %d
connection data has IPv4 address (%d/%d) [%s:%u]
skip address pair [%@-%@].
add address pair [%@-%@]
No addresss pair is on same network, cannot connect.
startConnectionForDevice failed due to invalid deviceID=%@
startConnectionForDevice - deviceID=%@ isInitiator=%@ remotePartyID=%@ stunMICheck=%@
startConnectionForDevice failed due to invalid remotePartyID=%@
process delayed nomination request block %p.
Nominated connection matches remotePartyID %s.
add local adress %@
connection blob size (%dB) is too big, skip remaining.
#IPv4 address (%d) reaches max allowed, skip remaining.
failed to create connection data
createConnectionData - done (#ipv4: %d, length: %dB).
Link is invalidated, stop sending connection check request
Start connection check.
Connection check is done.
Connection check is timed out, cannot connect to remote party.
Link is invalidated, stop sending nominate request
_sendNominateRequest failed due to invalid localPartyID %@
Start nominate request.
Nominate request is done.
Nominate request timed out, cannot connect to remote party.
Connection echo is done.
Connection echo timed out.
UDPGlobal
echo timer %p fired (%.6f).
link is invalidated, stop echo timer.
start echo timer %p.
stop echo timer %p.
update result: src[%s], dst[%s].
add result: src[%s], dst[%s].
phone_traffic_class
receive binding request %@ for [%s(%u)-%s].
process nomination request before Accept, this should NOT happen.
receive nominate binding request with remotePartyID %s.
receive nomination request with invalid remotePartyID, ignore.
nominate request with count(%d) matches remoteID %s
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IDSAgent/IDSUDPGlobalLink.m
skip binding response to %s, socket on if_index %d is already connected to %s.
send binding response %@ for [%s(%u)-%s].
send binding response failed with %s
receive binding response %@ for [%s(%u)-%s], RTT(%.3f ms)
Nominated connection(%d) is accepted by remoteParty.
Notifying remote party is reachable for ACCEPT.
receive echo request with invalid count(%d), ignore.
receive echo request (count:%04x) for %s(%u)-%s.
send echo response (count:%04x) for %s(%u)-%s.
send echo response failed with %s
receive old echo response (%d), ignore.
receive invalid echo resopnse.
receive echo response (count:%04x, rtt:%4d ms) for %s(%u)-%s.
receive invalid data indication.
invalid data attr length (%dB).
receive indication data (%zdB) for [%s(%u)-%s].
_processStunPacket failed.
failed to verify message intergrity for stun packet type %04x.
### stun packet type %04x passed MI check.
delay nomination request before Accept.
_processStunPacket - receive invalid STUN message, type (%04X)
send stun data indication (new:%zdB old:%zdB).
sending a packet (%zdB) = %s
%c Global    (%s) Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
didReceivePacket - STUN packet (%zdB) [type:%04X %@]
didReceivePacket - unknown packet (%zdB)
username
<%@:%p> uid: %@ rpi: %@
Unknown
Resetting
Unsupported
Unauthorized
PoweredOff
PoweredOn
WPLinkManager
============= New WPLinkManager %@ starting =============
Created a new WPContinuity instance %@
Invalidating WPContinuity instance %@
client instance created
calling continuityDidUpdateStateToState:%s
all client instances removed, currently scanning: %@   currently advertising: %@
UnexpectedType
  => Stopping advertisement for type: %s
  => Stopping scanning for type: %s
startAdvertisingOfType:%s withData:%@ withOptions:%@
  => Device not powered on
stopAdvertisingOfType:%s
startScanningForType:%s withData:%@ mask:%@ peers: %@
startScanningForType:%s withData:%@ mask:%@
startScanningForType:%s withData:%@ mask:%@ peers:%@ boostedScan:%@ duplicates:%@
startScanningForType:%s withData:%@ mask:%@ boostedScan:%@ duplicates:%@
stopScanningForType:%s
connectToPeer %{public}@, continuity %@
already connected to %{public}@.
already connecting to %{public}@  (Time: %f)
*** starting connection to %{public}@
disconnectFromPeer %{public}@, continuity %{public}@
already disconnecting from %{public}@  (Time: %f)
*** starting disconnected from %{public}@
removing a link %@ with linkID %@
sendData %luB peerID %@
Activity
TetheringTargetPresence
TetheringSourcePresence
EC (%@:%ld) and Legacy (%@:%ld)
Legacy (%@:%ld)
EC (%@:%ld)
Failed encrypting message %@
GUID %@ Encryption information:
IDSEncryptionComponent.m
<%@: %p encryptedDataBlob:%@ type: %d, requireSignature:%@>
Request was missing IMEI or carrier nonce
Unable to set push token or push identity on carrier token request message
Unable to locate SIMs prior to fetching auth cert
B16@?0@"<IDSCTSIM>"8
The selected phone number account is not currently authenticated
Failed to request carrier token from IDS server {resultCode: %@, serverStatus: %@, serverErrorDetail: %@}
IDS phone number authentication SPI requires entitlement: %@
B16@?0@"IDSPseudonym"8
IDSPeerIDManagerFromIdentityUserInfoKey
IDSPeerIDManagerErrorDomain
MessageService
Received IDQueryCompletedWithFromURI for service %@ fromURI %@ fromID %@ isRelevant? %@  errors %@
v32@?0@"NSString"8@"NSError"16^B24
v56@?0@"NSString"8@"NSDictionary"16@"NSDictionary"24@"NSString"32B40@"NSDictionary"44B52
Missing object %@ or key %@ when changing accountInfo
-[IDSDAccount authenticationChanged]
-[IDSDAccount setupAccountWithCompletionBlock:]
IDSDAccount
%@ Asked to look up device unique id for uri %@ and token %@ - failing
%@ Asked to look up device unique id for uri %@ and token %@ in our dependent registrations %@
%@ Asked to look up existince of device with uri %@ and token %@ - failing
%@ Asked to look up existence of device with uri %@ and token %@ in our dependent registrations %@
%@ Asked to look up fromID for CBUUID %@ in %@
Found locked peer %@ for cbUUID %@
Found locked peer %@ for sessionID %@
Couldn't find locked peer %@ for cbUUID %@
CBUUID matched, but uniqueID mismatched. Setting fallback device. { cbuuid: %@, uniqueID: %@ }
Did not find any device in dependentRegistrations that matches lockedPeerID. Service supports live delivery, so falling back to device that matches just cbuuid { cbuuid: %@, lockedPeerID: %@, service: %@ }
Did not find any device in dependentRegistrations that matches {cbuuid: %@, lockedPeerID: %@, count: %ld}
Returning token uri fromID for cbuuid {deviceCBUUID: %@, uniqueID: %@, deviceToken: %@, deviceFromID: %@}
Returning device fromID for cbuuid {deviceCBUUID: %@, uniqueID: %@, uniqueIDOverride: %@}
%@ Asked to look up default paired device dependent registration in %@
%@ found default paired device dependent registration %@
-[IDSDAccount _writeAccountDefaults:force:interestedSubservices:]
IDSDAccount: %p [Service: %@ Login: %@ UniqueID: %@ Account Type: %@ Registration: %@  Registered: %@  Registration Error: %@  Linked Accounts: %@]
IDSDAccount: %p [Service: %@ Login: %@ UniqueID: %@ Account Type: %@ Vetted Aliases: %@ Aliases: %@ Registration: %@  Registered: %@  Registration Error: %@  Last Registration Failure Error: %@  Last Registration Failure Date: %@  Last Registration Success Date: %@  User Unique ID: %@ Linked Accounts: %@]
<%@:%@:%@:%@:%@>
com.apple.private.alloy.bluetoothregistry
com.apple.private.alloy.bluetoothregistryclassc
SyncNSXPCSupport
com.apple.identityservicesd-IDSDXPCDaemonServerXPC
disable-home-number
CKAccountChangedNotification
@16@?0@"IDSRegistration"8
Registration attempted exceeded for user identifier {%@} with current registration state {%ld} of type {%d}
PNR Registration failed for Identifier: %@ Failure: SMS quota exhausted
PNR Registration failed for Identifier: %@ Failure: SMS timeout threshold reached
suppressNonZeroRatedSMSNotifications
FaceTime and iMessage
SMS Registration alert title: FaceTime and iMessage
Your carrier may charge for SMS messages used to activate FaceTime and iMessage.
SMS Registration alert body: Your carrier may charge for SMS messages used to activate FaceTime and iMessage.
SMS Registration alert title: iMessage
Your carrier may charge for SMS messages used to activate iMessage.
SMS Registration alert body: Your carrier may charge for SMS messages used to activate iMessage.
SMS Registration alert title: FaceTime
Your carrier may charge for SMS messages used to activate FaceTime.
SMS Registration alert body: Your carrier may charge for SMS messages used to activate FaceTime.
iCloud
SMS Registration alert title: iCloud
Your carrier may charge for SMS messages used to activate iCloud.
SMS Registration alert body: Your carrier may charge for SMS messages used to activate iCloud.
OK Button Title
Cancel
Cancel Button Title
route
retry-count
engram-id
required-update
sig-algorithm
forwarding-sig-algorithm
id-group-put-key
entries
__kIDSRestrictionsChangedNotification
-[IDSPairingManager _notifyDelegatesWithBlock:]
-[IDSPairingManager _notifyDelegatesDevicePairedToDevice:]
v16@?0@"<IDSPairingManagerDelegate>"8
-[IDSPairingManager _notifyDelegatesDeviceUnpairedFromDevice:]
-[IDSPairingManager _requestPairedDeviceInfo]
%@ -- %@
has-regenerated-secured-encryption-keys
-[IDSPairingManager _hasRegeneratedSecuredEncryptionKeys]
regenerated
UTunDelivery_Default_Sync
UTunDelivery_Default_Default
UTunDelivery_Default_Urgent
UTunDelivery_Default_UrgentCloud
-[IDSPairingManager localDevice]
-[IDSPairingManager gatherLocalDeviceInfoWithCompletionBlock:]
-[IDSPairingManager _updatePairedState:]
-[IDSPairingManager addLocalPairedDevice:BTOutOfBandKey:shouldPairDirectlyOverIPsec:pairingType:bluetoothMACAddress:]
-[IDSPairingManager removeLocalPairedDevice:]
-[IDSPairingManager disconnectActivePairedDevice]
-[IDSPairingManager activatePairedDeviceWithCBUUID:]
-[IDSPairingManager deactivatePairedDevices]
-[IDSPairingManager ensureCommunicationWithActivePairedDeviceIsPossible]
-[IDSPairingManager setPairedDeviceInfo:]
-[IDSPairingManager updatePairedDeviceBuildVersion:productVersion:productName:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:capabilityFlags:deviceUniqueID:]
+[IDSPairingManager devicePairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:]
Already Active
Unknown CBUUID
Keychain Failure
Not Supported
%@ (%d)
<unknown>
coalesce-send-delay
normal
background
scheduled
<%@  ->  count: %ld  time until firing: %f>
labelID
phoneNumber
phoneBookNumber
defaultUser
countryCode
networkCode
<%@:%p> uid: %@ pn: %@, pbn: %@, def: %@
next-key
SHA256withECDSA
Decryption
encrypt
decrypt
******************************************************************
*******************  %@ Error ****************************
***  Priority: %ld
***     Token: %@
*** Device ID: %@
***      From: %@
***        To: %@
  Plain text encryption error? This is non-sensical
Public/Private %@ failed :(
 => Current remote public key data for token: %@
 => Current remote public key data for device: %@
 => Data we tried to %@: %@
 => Is remote: %@
 => Token: %@
  Unknown encryption type error? This is non-sensical
AOVERCEncryption
asked to %@, but key is NULL!
Incoming Encryption Request
Incoming Decryption Request
numberOfSimultaneousOutgoingMessages
APSErrorDomain
ApplePushService
IMTransferServicesController
IMTransferServices
v16@?0@"IDSAppleIDNotificationCenter"8
Yes Button Title
No Button Title
Apple ID alert title: Email Detected, arg1: phone number, arg2: service type
Apple ID alert body: Email link message, arg1: apple ID  arg2: device associated on
Apple ID alert body: Email link message, arg1: apple ID
Add %@ for %@?
Apple ID alert title: Phone Number Detected, arg1: phone number, arg2: service type
Apple ID alert body: Phone number link message, arg1: apple ID, arg2: device name added from
Apple ID alert body: Phone number link message, arg1: apple ID
ServerAlerts
hideUsageNotifications
Browser
browser
device
Apple ID and phone number
Apple ID
phone number
iCloud and %@
iMessage and %@
iCloud, iMessage, and FaceTime
If you recently signed in to this device, you can ignore this notification.
Device Added to Your Account
AAAccountUserNotificationPublisher
AppleAccount
AAAccountUserNotificationContext
HomePod
A %@ now has access to %@. %%@
An %@ now has access to %@. %%@
A(n) DeviceType now has access to service(s). arg1: service name (iCloud, iMessage, Facetime, (any combination)) arg2: User action string 
Your %%@ %@ now being used for %%@ on a new %@.
Your accountType(s) are now being used for services(s) on a new DeviceType., arg1: Account Type (Apple ID, phone number, Combination)  arg2: service  name (iCloud, iMessage, Facetime, (any combination)) 
DisableAliasAvailablePopups
**** Suppressing popup for available alias %@
DisableUsedElsewherePopups
**** Suppressing popup for alias %@  is in use on device %@
v24@?0@"NSString"8^B16
activityTopics
activityUpdates
subscriptions
activityDescriptions
IDSDFirewallMessageStore
Saving database.
Destroying database.
Closed database.
^{__CFString=}8@?0
v16@?0@"CSDBThreadedRecordStore"8
/Library/IdentityServices/
ids-firewall-%@.db
IDSFirewallStore
Creating indexes as needed for faster lookup
CREATE INDEX idx_firewall_handle ON firewall_record (handle); 
CREATE INDEX idx_firewall_category ON firewall_record (category); 
Enabling auto vacuum.
PRAGMA auto_vacuum = 2;
Enabling WAL journal mode.
PRAGMA journal_mode = wal;
Enabling Foreign Key support.
PRAGMA foreign_keys = ON;
The current Firewall database is v%d.  The current schema version is v%d
This DB can be migrated.
firewall_record
handle
merge_id
category
is_donated
last_seen_date
last_modified_date
v36@?0@"NSString"8@"NSString"16@"NSString"24B32
accountWithIdentifier could not find IDSDAccount {identifier: %@, localObject: %@}
accountWithIdentifier failed entitlement check {localObject: %@, entitlement: %@, serviceIdentifier: %@}
auth token changed for account uniqueID %@ localObject %@
password changed for account uniqueID %@ localObject %@
v28@?0@"IDSPseudonym"8B16@"NSError"20
Registering for Registration Account Status Metric
com.apple.ids.registrationaccountstatusmetric
Told to Check In for Registration Account Status Metric with activity %@ 
Got called to checkpoint Registration Account Status Metric run state with non null activity %@
Not entitled to clear IDS state %@
Told to clear IDS state %@
-[IDSDaemon(Account) initialLocalSyncStartedForServices:messageContext:]
Initial: %s services: %@
-[IDSDaemon(Account) initialLocalSyncCompletedForServices:messageContext:]
CloudPairing
 *** Cloud pairing detected setting BTUUID %@   on device ID: %@ **** (From: %@)
 => Ignoring, no change
iCloud Pairing Added
If this was unexpected, please file a radar (Transport) and attach output of 'idstool dump'. See 17180900 for reference
iCloud Pairing Removed
Sending continuity reset to IDS clients
System has left first unlock: processing stored incoming messages.
Attempt to use the Registration Control API's without the correct entitlement, Failing request
Setup
System has left data protection lock: Checking Migration Status
Faking data protection lock as first unlock: Processing stored messages.
System going to sleep
System waking up
IDSDaemon got a wake when it was not asleep! Current sleep state: %d
enable-pseudonym-aliases
enable-report-web-approval-status
gc-min-version
Forcing a bag fetch to refresh EN versioning
v40@?0@"NSString"8@"NSString"16@"NSString"24@"IDSEndpoint"32
ratelimiter-clear-on-success
IDSDelivery has %lu pending offline messages and sees that push is now connected - scheduling a send attempt in %f seconds.
Push is still connected - replaying %lu offline message sends.
Done replaying %lu offline message sends.
Push is NOT still connected - readding %lu offline message sends.
Total offline message sends enqueued: %lu.
ReducedLargePayloadSizeOverhead
Bad signature for message: %@    blowing peer tokens
 targetPeerID: %@
 sourcePeerID: %@
  targetToken: %@
 sessionToken: %@
      service: %@
Message is destined for an accessory with uri %@
accessory:
  Finished sending message: %@  to accessory: %@
Sending To %@
Handling message queue With Fanout for display IDs: %@  (originalURIs: %@)
   Queue: %@
 Flushing message queue
 FromID didn't match some messages, keeping some messages in queue {fromID: %@, toKeep: %@}
Checking the estimated payload size for message not requesting encryption... %d B
Attachment commands must not be forced to send as attachments
 sendAsAttachment? %@ The payload is %lu bytes.
ForceAttachmentMessage
Forcing attachment message default set
We will send %@ individual messages
Emptying message queue for URIs: %@
No queued items to remove for URIs: %@
Removing message from queue for URIs: %@
No queued message matched for removal for URIs: %@
Enqueuing message: %@  to people: %@ service: %@ (original: %@)
send FTMessage: %@   fromID: %@   toID: %@  toToken: %@  toPeople: %@  toMe: %@  delivery status: %@ certified delivery: %@
    Delivered FTMessage: %@ to token: %@
    Delivered FTMessage: %@
                  Result code: %ld
                        To ID: %@
                      From ID: %@
            Result dictionary: %@
                        Error: %@
    Requested Delivery Status: %@
 Requested Certified Delivery: %@
                 Message Body: %@
Sending callback for FTMessage send
Was accessory online?: %@
    Told to send Fanout Message: %@ GUID: %@ isEngram? %@ Chunk: %@ isFinal?: %@ 
Sending %@ with top-level encryption type "%@" and dtls: %@
              To Destinations: %@
Asked to sendAttachmentWithGUID %@  topic %@ toToken %@ toID %@ fromID %@ service: %@
Attachments
    Wrote data to path: %@
Failed to write wrapped data
Failed to create temporary directory
v32@?0Q8Q16Q24
Send attachment message progress updated to %lld of %lld (%lld bps)
Succeeded uploading file transfer: %@
mmcs-owner
mmcs-url
mmcs-signature-hex
idsMessage
Finished sending attachment message %@. Result code: %ld. Error: %@   lastCall: %@
Error cleaning up text attachment path: %@  error: %@
Failed uploading attachment file transfer: %@
Update for uploadFailure message: topic %@  response %ld  error %ld lastCall %@
Failed uploading attachment file transfer
v76@?0@"NSString"8B16@"NSError"20@"NSString"28@"NSString"36@"NSData"44@"NSString"52@"NSData"60q68
  Coalesce queue view : %@
Incoming urgent message for a topic with coalesce messages in queue
Message: %@ to be sent to people: %@   (have tokens: %@). People to query %@
IDSDeliveryController.m
Found messagable people: %@
Query completed: success %@  offline %@  allowPartialSendsToSucceed %@
Query completed but message for IDs %@ has already expired. Failing.
Query failed because the device is offline. Enqueuing for the return of networking since we have timeout time left. Number of offline sends enqueued ahead of us: %lu.
Peer ID manager succeeded lookup for IDs: %@
Peer ID manager failed lookup for IDs: %@   (Errors: %@)
Issuing query for: %@   from: %@
Tokens are being ignored, failing message {msg: %@}
sendIDSMessage called with nil message -- returning
Sending IDSMessage: %@  topic: %@
v16@?0@"IDSBaseMessage"8
service-max-timeout-%@
Server has overridden service maximum timeout: %@, capping message timeout with %@.
Sending messageDictionary: {suppressed} peerMessage %@  wantsResponse %@ timeout %@ fromID: %@ toID %@ toPeople %@ topic %@ toMyself: %@
_sendErrorMessage %@ onService %@ fromID %@ fromIdentity %@ toID %@ toToken %@ topic %@
v24@?0@"NSArray"8@"NSArray"16
Guid %@ full pipeline input: %@
GFTPerfSignpostCollection
AlwaysPopulateFirewall
id-check-unknown
x-hardware-version
x-os-version
x-software-version
sender
count
abusive
delay
MessageSuccess
TerminusConnected
TimeConnected
TimeDisconnected
PersonalCBUUID
PairedDeviceCBUUID
invalidate HCInfo - local(%d,%p->NULL) remote(%d,%p->NULL)
setLocalContext - %p->%p
setRemoteContext - %p->%p
Sysdiagnose
Device %@ cbuuid %@.  Is IDS nearby? %@ Connected? %@. Is terminus nearby? %@ Connected? %@ 
IDS-Connectivity-Status
v32@?0@8@"IDSUTunPeer"16^B24
UTunDelivery
Queried pairedDeviceUUIDString {pairedDeviceUUIDString: %@}
Could not query pairedDeviceUUIDString {isPaired: 0}
NRDeviceMonitor already running for {deviceIdentifier: %@}.
Received devices with unique ids -> cbuuids %@
v32@?0@"NSString"8@"NSString"16^B24
Received device with unique id %@ updated BTUUID: %@
Ignoring update for nil or default paired device BTUUID: %@
Created new peer %@ for uniqueID %@ with btuuid %@
Updating existing peer %@ for uniqueID %@ with btuuid %@
LOCALSETUP: local setup started - clearing all stats
Delivery
LOCALSETUP: Informed that local setup has completed!
LOCALSETUP: Disabling Cloud Connections for QWS
LOCALSETUP: Enabling Cloud Connections
bt-id
session-id
Peer %@ is created from sessionID %@ (peer map: %@)
WARNING: Peer from sessionID %@ shouldn't be created for the default paired device! (deviceInfo: %@) (peer map: %@)
Peer %@ is created from btID %@ (peer map: %@)
OUTGOING-UTUN_DELIVERY:%@ SERVICE:%@
UTUN request to send %{public}@ priority local message payload of data size: %d  guid: %{public}@  expirationDate %@ enforceRemoteTimeout %@ for topic: %{public}@:%{public}@ to deviceIDs (count: %{public}@)
Devlivery
WARNING: A message for the local default paired device has reached the delivery controller but we do not have a peer already for it, It was likley sent before QWS was completed. Purging message. Destination Device: %@, Current Device:%@ 
Skipping device %@ which we already sent to.
UTUN request to send %{public}@ priority local message payload of data size: %d  guid: %{public}@  for topic: %{public}@:%{public}@ to uri %@ deviceID %{public}@ with seq[%u]
WARNING: Unable to create the peer for the device %@
v32@?0@"NSString"8@"NSDictionary"16^B24
Unable to find peer for deviceIDs %@ failing the message.  (Peers: %@)
Attempting to cancel message ID: %@
local account setup complete - has deferred task? %@
calling deferred default peer connected
enableConnectionForDefaultPairedDevice %@
No connection found for default paired device %@.
enableCloudConnectionForDefaultPairedDevice %@
Got topic set update %@
IDSUTunDeliveryController
There is a new session for the local path, skipped removing...
Already have a peer ignoring call to add {deviceUniqueID: %{private}@, btuuid: %{private}@, deviceIDToPeer: %{private}@}
UTunDelivery-Default
DisableOTR
EnableOTR: %@.
v32@?0@"NSString"8@"IDSUTunPeer"16^B24
peer nearby state changed:%@    screenLit:%@   uniqueID:%@   peer-count:%lu
Broadcasting isNearby %@ for %@
peer connectivity changed: %@    uniqueID: %@   map: %@
Broadcasting isConnected %@ for %@
Submitting aggd metric for connected time %f seconds.
com.apple.IDS.LocalConnectedTime
Submitting AWD metric {nearbyToConnectedDurationInMs: %lld ms}.
Broadcasting isCloudConnected %@ for %@
peerHasSpaceForNonUrgentMessages %@ %@ %@ isDefaultPeer? %@
peerHasSpaceForUrgentMessages %@ %@ %@ isDefaultPeer? %@
local account setup has not finished yet - defer default peer connected
default peer connectivity changed: %@ -> %@
default peer connectivity changed but no default peer
default peer nearby changed: %@ -> %@
%@ Did not find default peer device.
cloud connectivity changed for default peer: %@.
defaultPeerMagnetIndicationOfAwakeStateChanged %@
defaultPeerClassCConnectivityDidChange %@
defaultPeerSetPreferInfraWiFi: %@ services: %@
defaultPeerSetPreferInfraWiFi failed due to nil device identifier.
defaultPeerSetLinkPreferences, service: %{public}@
defaultPeerSetLinkPreferences failed due to nil device identifier.
setBluetoothLinkPreferences: service: %{public}@, pps: %d input bps: %d output bps: %d intent: %{public}@
defaultPeerSetWantsQuickRelayRequest: %@
defaultPeerSupportsDirectMessaging: %@
defaultPeerUnpairStart
defaultPeerDropDisallowedMessages
cloud connectivity changed for peer %@: %@.
Tried to process cloud connectivity change with nil peer.
%@ cloud connectivity changed: %@ -> %@
Broadcasting found nearby IPsec device {uniqueID: %@}
Set Enable OTR Timer for 60.0 seconds
OTREnableTimer
Set OTR for defaultPairedDevice: YES.
Set OTR for defaultPairedDevice: NO.
didAddPairedDevice is called.
didRemovePairedDevice is called.
didUpdatePairedDevice is called, enable OTR %@, otrInitialized %@.
Peer %@ is already locked for btUUID %@, ignore peer %@
Lock peer %@ for btUUID %@.
Remove locked peer %@ for btUUID %@
Unlock all peers, clean up.
addContinuityPeer is called for default paired device, please file a bug.
Add new peer %@ for btUUID %@, list %@.
current peer list:%@
Enable peer %@ for btUUID %@.
Peer %@ is already locked for btUUID %@, skip other peers.
No pending peer, bail out.
Search peer in %@. (current peer %@, count %d)
peer %@ has count %d
Found no other peer, stick with peer %@
Try new peer %@, disable peer %@.
Peer's session ID %@ is for the phone continuity local message.
Told to enable OTR for default paired device
Rapport discovered device. {Peer:%@, deviceID:%@}
Rapport lost device. {Peer:%@, deviceID:%@}
v24@?0@"CNContact"8^B16
Class getCNContactStoreClass(void)_block_invoke
IDSContactsUtilities.m
Unable to find class %s
void *ContactsLibrary(void)
Class getCNContactClass(void)_block_invoke
Class getCNPhoneNumberClass(void)_block_invoke
CNContactFormatter
Class getCNContactFormatterClass(void)_block_invoke
NSString *getCNContactEmailAddressesKey(void)
CNContactEmailAddressesKey
NSString *getCNContactPhoneNumbersKey(void)
CNContactPhoneNumbersKey
NSString *getCNContactGivenNameKey(void)
CNContactGivenNameKey
NSString *getCNContactFamilyNameKey(void)
CNContactFamilyNameKey
NSString *getCNContactTypeKey(void)
CNContactTypeKey
CNContactFetchRequest
Class getCNContactFetchRequestClass(void)_block_invoke
<%@: %p SKMCount: %lu>
ids-group-stable-key-material-cache-previous-remote-SKM-key
ids-group-stable-key-material-cache-current-remote-SKM-key
self.pushTokenToSKMsMapping[pushToken]
<%@: %p identifier: %@, currentLocalSKM: %@, previousLocalSKM: %@, SKMsCount: %lu>
<%@: %p identifier: %@, currentLocalSKM: %@, previousLocalSKM: %@, SKMs: %@>
+.%@
-.%@
com.apple.private.alloy.
&.%@
^.%@
BlockBooleanServiceEntitlements
com.apple.%@
NSXPC
Daemon XPC Interface Up
v24@?0@"ENGroupContext"8@"NSError"16
com.apple.identityservicesd.nsxpc.auth
Incoming Daemon XPC Interface with new connection %@
DaemonProxy
We got remote object proxy %@ new observerProxies count: %lu
Daemon Invalidation Handled
Daemon Interruption Handled
Daemon failed to broadcast didCreateGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@
Daemon failed to broadcast didCacheGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@
Daemon failed to broadcast didUpdateGroup {previousGroup: %{private}@, updatedGroup: %{private}@, observerProxy: %{public}@, error:%{public}@}
Daemon failed to broadcast didReceiveDecryptionFailureForGroup {group: %{private}@, observerProxy: %{public}@, error:%{public}@}
Daemon failed to broadcast didReceiveRegistrationIdentityUpdate {observerProxy: %{public}@, error:%{public}@}
endpoints
keyTransparencyContext
<%@: %p endpoints.count: %lu, keyTransparencyContext: %@>
SessionController
Building Message delivery
com.apple.invitation-service
Missing accountID for outgoing session, bailing...
Missing destinations for outgoing session, bailing...
Missing transport type for outgoing session, bailing...
Missing uniqueID for outgoing session, bailing...
Found existing session matching uniqueID -- replacing with new instance { uniqueID: %@, oldInstanceID: %@, newInstanceID: %@ }
Already have an existing session with uniqueID %@, bailing...
Failed to create outgoing session.
Missing accountID for incoming session, bailing...
Missing destinations for incoming session, bailing...
Missing transport type for incoming session, bailing...
Missing uniqueID for incoming session, bailing...
We already have an existing session with unique ID %@, ignoring self invite...
%@ - Failed to create incoming session
Received incoming invitation with payload %@ topic %@ fromToken %@ fromID %@ toID %@ fromStorage %@
No sessionID provided in invitation, bailing...
Missing originator for session invitation, bailing...
Creating IDSSession for incoming invite
Couldn't create session for invite, bailing...
Done with incoming network availability check; networkOkForSession: %@
Missing encryption setup info, bailing...
Wifi connectivity check failed, declining invitation!
Did not find a client that could handle the invitation for service %@, ignoring invitation...
Network availability check indicated that we should not continue to process this session invitation
Process incoming session %@ accept message
Enqueuing incoming session accept block from %@ with key %@
Enqueuing incoming session decline block from %@ with key %@
Process incoming session %@ decline message
Enqueuing incoming session cancel block from %@ with key %@
Process incoming session %@ cancel message
Enqueuing incoming session message block from %@ with key %@
Process incoming session %@ session message
Enqueuing incoming session end block from %@ with key %@
Process incoming session %@ end message
Enqueuing incoming session reinitiate block from %@ with key %@
Process incoming session %@ reinitiate teardown message
disableReceivingMaterialsOverPush
Push
Enqueuing incoming group session message block fromID %@ with the group %@ sessionID %@ (message %@)
Receiving Key Material (%@) [MKM] -- %f
Receiving Key Material (%@) [SKM] -- %f
Storing the master key material %{private}@ stableKeyMaterial: %{private}@ for %@ token %@
not received any valid MKM or MKM for %@ token %@
key material not decrypted
Storing all valid master key materials %{private}@ for %@ token %@
Failed to decrypt a key material in the broadcast group -- skipping the remaining key material
not received any valid remote cached MKMs for %@ token %@
Received the prekey recovery request for group %@ destination %@
Received the key recovery request for group %@, needsToRecoverMKM: %@, needsToRecoverSKM: %@
Receiving Key Material (%@) [PreKey] -- %f
Storing the public key %{private}@ for %@ token %@
Process incoming group session %@ session message
Couldn't find the session %@ to clean up!
Cleaning up session %@, shouldCleanSessionStatus: %@
Cleaning up session based on instanceID { instanceID: %@, correspondingUniqueID: %@ }
IDSDSessionController
skip cleanupSessionWithChannelDestination for destination %@ and clientChannelUUID %@
Cleaning up session(s) for client ID: %@ because it died
Cleaning up session: %@ for client ID: %@
v32@?0@"IDSDSession"8Q16^B24
Cleaning up session(s) for service: %@ with reason %ld
Cleaning up session: %@ for service: %@
IDSDaemonClientID
IDSSessionController
%@ - No account found to build specificOriginator, bailing...
%@ - No device found to build specificOriginator, bailing...
%@ - No device push token found to build specificOriginator, bailing...
%@ - No device identity found to build specificOriginator, bailing...
%@ - No unique ID provided to lookup session, bailing...
%@ - No instance ID provided to lookup session, bailing...
%@ - No group ID provided to lookup session, bailing...
%@ - No group UUID provided to lookup session, bailing...
Updating critical reliability {needsCritical: %@, session: %@}
DMPerformMigrationIfNeeded
DataMigration
ForceRegistration
ForceSMSRegistration
expiry-epoch-milli-sec
md-ids-gdr-day-limit
performedGDROverrides
last24PeriodGDRPerformed
forcedgdrcount
-[IDSDAccount(Registration) _rebuildRegistrationInfo:]
phone-number-registration
pseudonyms
is-user-visible
-[IDSDAccount(Registration) _reregisterAndReProvision]
-[IDSDAccount(Registration) _removeAuthenticationCredentialsIncludingAuthToken:]
-[IDSDAccount(Registration) _reregisterAndReidentify:]
ForcePurgeRegistrationData
Phone Number
Couldn't get bag url
-[IDSDAccount(Registration) _authenticateAccount]
-[IDSDAccount(Registration) authenticateAccount]
-[IDSDAccount(Registration) _registerAccount]
-[IDSDAccount(Registration) registerAccount]
-[IDSDAccount(Registration) _unregisterAccount]
-[IDSDAccount(Registration) unregisterAccount]
-[IDSDAccount(Registration) passwordUpdated]
-[IDSDAccount(Registration) updateAuthorizationCredentials:token:]
-[IDSDAccount(Registration) handler:pushTokenChanged:]
-[IDSDAccount(Registration) handler:reloadBag:]
v28@?0B8@"NSArray"12@"NSString"20
handles
v36@?0@"IDSRegistration"8q16B24@"NSDictionary"28
-[IDSDAccount(Registration) handler:profile:deviceUpdated:service:]
-[IDSDAccount(Registration) handler:profileHandlesUpdated:status:allowGDR:]
registrations
-[IDSDAccount(Registration) registrationController:registrationWillStart:]
-[IDSDAccount(Registration) registrationController:registrationUpdated:]
-[IDSDAccount(Registration) registrationController:registrationSucceeded:]
-[IDSDAccount(Registration) registrationController:registrationFailed:error:info:]
Disabled
Too many SMS attempts, you can re-enable this in Preferences
-[IDSDAccount(Registration) registrationController:deregistrationWillStart:]
-[IDSDAccount(Registration) registrationController:deregistrationSucceeded:]
-[IDSDAccount(Registration) center:startedAuthenticating:]
-[IDSDAccount(Registration) center:succeededAuthentication:]
-[IDSDAccount(Registration) center:failedAuthentication:error:info:]
-[IDSDAccount(Registration) center:succeededCurrentEmailsRequest:emailInfo:]
-[IDSDAccount(Registration) center:succeededRegionValidation:regionID:phoneNumber:extraContext:verified:]
-[IDSDAccount(Registration) center:failedRegionValidation:error:info:]
-[IDSDAccount(Registration) _validateAliases:validateAlreadyValid:]
-[IDSDAccount(Registration) _validateAliases:]
-[IDSDAccount(Registration) validateAliases:]
-[IDSDAccount(Registration) _unvalidateAliases:]
-[IDSDAccount(Registration) unvalidateAliases:]
-[IDSDAccount(Registration) deactivateAndPurgeIdentify]
v44@?0@"IDSRegistration"8q16B24@"NSDictionary"28@"NSError"36
deleted
B16@?0@"NSDictionary"8
psuedonymInfo
kt-opt-in-results
uris
kt-blob
-[IDSDAccount(Registration) validateProfile]
Full returned info for _allUserIntentInfo {service: %@, loginID: %@, current: %@}
IDSDAccount_Registration.m
max-selected-tracking-grace-period
ForcedGDR
Server Bag provided us with %d max forced GDRs
Server Bag has no value for max GDR per day, using the default: %d
gamecenter-signin-on-modify
@"NSDictionary"16@?0@"IDSDAccount"8
iTunes
GameCenter
Invalid
ACAccountTypeIdentifierIdentityServices
IDSActiveStorageStateMachines
ServerStorage
We already have an inflight request for topic %@, checking if we have a backup
We already have a backup request for topic %@, throwing this request away
We already have an inflight request for this topic %@, adding it to the backup queue
This is the first request for topic %@, kicking off a server message for it
We received a 165 from the server for topic %@
We received a last from storage from the server for topic %@
%@-retry-timeout
topic
%@-extend-retry-timeout
Topic %@, has timed out waiting for server response
Topic %@ has recently received a message from storage.  Starting a new extended timer for retry.
We timed out with our request for %@ however we have one in the pending queue, Not retrying and instead letting that take over
%@-force-passthrough-retry
The topic %@ is a pass-through-message service. Not retrying.
We have not used up our remaining retries on topic %@: Used: %d Available: %d
We have used up all available retries for topic %@: Terminating state machine
Finished sending pending message request response for topic %@  [%@]
Failed sending pending message request response for topic %@. Result code %ld. Error %@.
Told to terminate state machine for topic %@
Unable to find a topic timeout timer, This will likely cause a bug
We terminated our state machine for %@, however we have another backed up, kicking off another state machine
Was told to stop, but we didnt have one in progress...
Told about a message from server storage, but we dont have an ongoing metric for it, not able to incriment
  iLen=%d KS=[%s]
 In=[%s]
 Out=[%s]
SRTP
IDSStreamEncryption_Init not enough key material bytes: have %d but need %d
encryption setup (v%d):
send ssrc:%08x start-seq:%04x
recv ssrc:%08x start-seq:%04x
srtp not initialized for transform
srtp rollover counter reached end - hard stop before reusing key
packet with sequence number: %u->%u dropped by replay protection
Malloc Failed to allocate replayWindow!
Malloc Failed to allocate replayWindow->list!
IDSStreamEncryption_LeftShiftReplayList returned NO. seq(%u->%u) = %u
IDSStreamEncryption_SetbitReplayList returned NO. seq(%u->%u) = %u
IDSStreamEncryption_SetbitReplayList after clear returned NO. seq(%u->%u) = %u
packet too old. seq(%u->%u) = -%u
IDSStreamEncryption_GetbitReplayList returned YES. seq(%u->%u) = -%u
IDSStreamEncryption_SetbitReplayList for old packet returned NO. seq(%u->%u) = -%u
CCCrypt failed with status: %d
  counters: [%s]
isInDualSIMIdentifier
@16@?0@"<IDSCTSIM>"8
@16@?0@"IDSTemporaryPhoneUser"8
@"NSString"16@?0@"<IDSCTSIM>"8
personal-public-key-cache
personal-public-key-cache-v1
personal-public-key-cache-v2
personal-public-key-cache-v3
personal-public-key-cache-v4
kIDSPublicKeyStorageToken
====== Personal Key Cache:
   Device ID: %@    Identity: %@   PushToken: %@
PublicKeyStore
Removing key {forURI: %@, fromURI:%@, pushToken: %@}
v40@?0@"NSString"8@"NSData"16@"NSString"24@"NSString"32
com.apple.identityservices.userStore
user
prop
<%@: %p, user: %@, properties: %@>
@"NSDictionary"24@?0@"NSDictionary"8@"NSDictionary"16
<%@: %p, dataProviderByRealm: %@, persistentMap: %@>
@16@?0@"IDSUserDescription"8
v16@?0@"<IDSUserStoreListener>"8
<%@: %p, userID: %@, responseCode: %lld, certLength: %llu>
id-authenticate-multiple-users
authentication-requests
request
auth-cert
authentication-responses
activity-monitor-min-version
-[IDSPairedDevice initWithPairedDevice:deviceUniqueID:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:privateData:]
-[IDSPairedDevice initWithPairedDevice:capabilityFlags:]
-[IDSPairedDevice initWithPairedDevice:deviceInfoPayload:]
-[IDSPairedDevice initWithPairedDevice:isActive:]
-[IDSPairedDevice initWithPairedDevice:supportIPsec:]
-[IDSPairedDevice initWithPairedDevice:pairingType:]
-[IDSPairedDevice initWithPairedDevice:iCloudURIs:pushToken:]
%@ uniqueID = %@, cbuuid = %@, isActive = %@, supportsIPSec = %d, pairingType = %ld
push cert
id-register
validation-data
language
device-score
device-score-nonce
Registration response: %@
next-hbi
registration
auth-certs
sms-signatures
temp-phone-creds
save-identifier
com.apple.identityservicesd.registrationKeychainManager-save
com.apple.identityservices.keychain-manager
%@V%d
KeychainManager
FTServices
** We haven't loaded anything, ignoring save to keychain **
** Saving registration data to keychain: Begin **
  => Adding registration for service: %@  ID: %@  to keychain dictionary
     => Registration %@
    => Not saving, got a nil dictionary representation
  => Adding %lu auth certs for users %@
  => We don't have any auth certs to save
  => Adding %lu SMS signatures
  => We don't have any SMS signatures to save
  => Adding %lu temp phone credentials
  => We don't have any temp phone credentials to save
Unable to build property list data: %@
Saving %d bytes under service: %@   account: %@   accessGroup: %@   saveIdentifier: %d
Unable to save registrations to keychain (error: %d)
** Saving registration data to keychain: Done **
Forcing save of registration objects from keychain dictionary, %d entries  %d auth certs
Flushing registration objects from keychain dictionary, %d entries  %d auth certs
Loaded %d auth certs for users %@
Loaded %d sms signatures
Loaded %d temp phone credentials
Reloading registration objects from keychain dictionary, %d entries
migrated-v0-dictionary
Expected to load %d registration objects, but only loaded %d
Attempting to load V%d keychain blob from service: %@   account: %@   accessGroup: %@
  => Found V%d keychain blob
  => No blob found in keychain
  => Failed to get keychain blob (error: %d)
Unable to parse property list: %@
Removing invalid keychain data (V%d) for service: %@   account: %@
  => Unable to remove invalid keychain blob (error: %d)
Keychain dictionary V%d needs upgrade
Removing old V%d keychain blob after upgrade with service: %@   account: %@
  => Unable to remove keychain blob (error: %d)
Looking up registration with service type: %@  registration type: %@   value: %@
 => Removing first keychain entry, we're over max of %d entries
Removing registration : %@
  => No matching registration found to remove
Removing all registrations
Invalid keychain dict version (%d) -- current is %d
Updating keychain dict to current version (%d)
Keychain dictionary before upgrade : %@
  => Updating from V0 to V1
  => Updating from V1 to V2
Keychain dictionary after upgrade : %@
Unable to upgrade an empty keychain data from V0 to V1
type
main-id
Unable to upgrade an empty keychain data from V1 to V2
phone-number-registration-main-id
Setting IDS auth cert: %p   for ID: %@
Returning SMS sig for ID: %@   signature: %@
Returning SMS IDs: %@
Setting SMS main ID: %@   signature: %@
Returning temp phone credential for ID: %@ cert: %@
Returning temp phone credential for ID: %@ tempCredential: %@
AllowiMessage
AllowsFaceTimeAudio
Home
Personal
use-local-time
com.apple.invitation-registration
v16@?0@"IDSRegistrationCenter"8
======= Registration State =======
     Last sent message: %@
       Last registered: %@
     Message in Flight: %@
       Messages queued: %@
          Queued Auths: %@
            Queued Reg: %@
         Current Auths: %@
           Current Reg: %@
  Recent Registrations: %d
==================================
IDS Authentication failure
IDS registration failure
Email query failure
users
kt-account-key
kt-loggable-data
client-data
device-key-signature
com.apple.registration
overrideRegistrationResponseCode
overrideRegistrationResponseAlert
registerCodeOverride
phoneUserCodeOverrideService
restoredFromBackup
phoneUserCodeOverride
emailUserCodeOverrideService
emailUserCodeOverride
kt-status
Registration SUCCESS for %@ on %@
Bad signature, need to send SMS
B16@?0@"IDSRegistration"8
deregistration
deregister
Sending IDS %@
&amp;amp;
&amp;quot;
&amp;#39;
&amp;gt;
&amp;lt;
com.apple.private.alloy.telephonyutilitiestemporary
com.apple.private.alloy.mediaidstest
com.apple.private.alloy.callhistorysynctemporary
com.apple.private.alloy.musictemporary
sub-services
userDictionary
SIM2
%@ Service hash info for register with timestampGUID: %@ info: %@
IDSRegistrationCenter.m
Sending IDS deregistration
hard deregister
overrideProvisionResponseCode
provisionCodeOverride
info
IDS Authentication failed: %d
v32@?0q8q16@"NSError"24
SIM1
B16@?0@"<IDSUser>"8
v16@?0@"IDSAuthenticateUsersMessage"8
v16@?0@"IDSProvisionTemporaryPhoneMessage"8
IDS Temporary Phone Provisioning failed: %d
Sending IDS Authentication request
UNKNOWN
aliases
Need to re-authenticate
Email query failed
Need to re-register
B16@?0@"IDSBaseMessage"8
action
button
Contact Support...
http://www.apple.com/support/validation/?code=4739-4725-5203&lang=en-us
body
If this is a new Apple ID, you do not need to create another one. To use this Apple ID with iMessage, contact iMessage support with the code below.
Customer Code: 4739-4725-5203
Close
title
Your Apple ID "hello@icloud.com" can't be used to set up iMessage at this time.
suppressServerAlerts
ids-allow-empty-uri-registration
weight
x-id-service
x-required-for-message
x-result-expected
x-is-forced-query
id-query
Missing uris
Handle ID query response: %@
results
LinkManager
added mapping device ID [%@] to destination [%@]
        %s
%7d %s
%3llu msgs %sB pending, %5llu msgs %sB processed
Total
%3llu msgs %sB pending, %5llu msgs %sB processed
None
%5lld pkts %5lld KB  %5llu pkts %5llu KB
%5lld pkts %5lld KB  %5llu pkts %5llu KB
============= New LinkManager %@ starting =============
com.apple.demo-settings
StoreDemoMode
FProgramNumber
ReportFileOpenTimeInterval
Both FixedInterface [%@] and FixedInterfaceDestination [%@] are set. Setting up UDPLink only.
============= Dealloc LinkManager %@ =============
packetsDropped
total
cannot open reporting FIFO file %s, errno=%d
opened FIFO file %s for writing
=======================================================
closed FIFO file %s
                            Since last report (for %.1fs)
Cumulative total
  Combined              Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
                   Dropped %6llu pkts                       %6llu pkts
Streaming Usage Statistics:
%d-%02d-%02d %02d:%02d:%02d.%06d %s  LocalDelivery %s
Connected
Disconnected
LinkReport
Sync priority messages queued:
Sync priority messages queued: %@
Default priority messages queued:
Default priority messages queued: %@
Urgent priority messages queued:
Urgent priority messages queued: %@
Urgent Cloud priority messages queued:
Urgent Cloud priority messages queued: %@
Messages being sent:
Messages being sent: %@
Incoming messages not claimed yet:
Incoming messages not claimed yet:
%3llu msgs
%3llu msgs
Total
%3llu msgs
Total
%3llu msgs
None
_startReporter cannot locate temporary directory
_startReporter cannot open %s
ids-report.
%s%s
removing old fifo file %s
%s%s%u
IDSLinkBTKey
IDSLinkBTDatagramKey
IDSLinkBTLEKey
IDSLinkLocalUDPKey
IDSLinkGlobalUDPKey
IDSLinkGlobalKey
IDSLinkNoneKey
_suspendBTLink %@ -> %@
Not processing _connectivityChangedForDefaultDevice in the IPsecLink path.
_connectivityChangedForDefaultDevice: local(%@ -> %@), cloud(%@ -> %@).
_connectivityChangedForDefaultDevice sending UTunController didConnectForDevice (default)
_connectivityChangedForDefaultDevice sending UTunController didDisconnectForDevice (default)
_connectivityChangedForDefaultDevice NOT(delay) sending legacyUTunBTLinkManagerDefaultPeerConnectivityChanged: %@
_connectivityChangedForDefaultDevice sending legacyUTunBTLinkManagerDefaultPeerConnectivityChanged: %@
_connectivityChangedForDefaultDevice sending legacyUTunBTLinkManagerDefaultPeerCloudConnectivityChanged: %@
_nearbyChangedForDefaultDevice: %@ -> %@
DisableRangeExtension
Ignore LMCommandUDPLinkAddress/Reply due to disabled range extension via defaults.
(prefer) 
(reply) 
received remote UDPLink %@interface address %@%@ through %@
received remote UDPLink interface address doesn't match to the source of the packet - ignoring
will bring up WiFi when losing BTLink
received invalid interface address bytes(%ld) = %@
received remote UDPLink interface down %@through %@
will NOT bring up WiFi when losing BTLink
Remote device reported data corruption
unknown LMCommand %lu received
UDPLink invalidated - stop retransmitting local interface address
already received remote interface address - stop retransmitting local interface address
didn't receive remote interface address for last %.0fs - giving up!
setDestinationAddress nil for %@.
retransmission already scheduled with %.1fs - resetting it to 1s next time
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IDSAgent/IDSLinkManager.m
transmitting UDPLink %@interface address %@%@
cannot send LinkDown when BT is not used - bail out
(reply)
transmitting UDPLink interface down%@
LinkManager requires BT, skip WiFi handshake.
_startUDPLinkHandshakeForDefaultDevice wantsWiFi %@ immediately %@ mayBringUpWiFi %@
_startUDPLinkHandshakeForDefaultDevice Central: wantsWiFi is YES but mayBringUpWiFi is NO - skip!
_startUDPLinkHandshakeForDefaultDevice !Central: wantsWiFi is YES but localWiFi has no IP - skip!
_startUDPLinkHandshakeForDefaultDevice ignoring stale scheduled handshake %@ %@ %.1f seconds ago
WiFi was brought up %.1f seconds ago but it was brought up again later - ignoring this one
WiFi was brought up %.1f seconds ago but still didn't get an IP - Bring it back down
down
don't 
_startUDPLinkHandshakeForDefaultDevice bring %@ WiFi, %@send handshake now
_startUDPLinkHandshakeForDefaultDevice bring %@ WiFi, %@send handshake in %.1f seconds
process link change for default paired device (oldLink:%@, newLink:%@).
Skip wifi handshake due to disabled range extension via defaults.
NoLink
Link type changed from %lu to %lu, current link: %@
IDSLinkType
IDS Local Link
_setBestLinkToCurrent cbuuid %@ _deviceIDToCurrentLink %@ _cbuuidToLinks %@ oldlink %@ newlink %@
set current link from %@ to %@ for cbuuid %@ deviceUniqueID %@
sending UTunController didConnectForDevice %@
sending UTunController didDisconnectForDevice %@
created new UDPLink %@ state %s with %lu interfaces
created new UDPGlobalLink %@ state %s
linkOptions
@"NSString"80@?0@"NSString"8I16@"NSString"20q28S36Q40S48I52@"NSData"56B64B68i72i76
v52@?0I8I12I16I20Q24@"NSString"32@"NSString"40B48
v24@?0@"NSString"8@"NSString"16
created new GlobalLink %@ for session %@ (=> cbuuid), state %s.
a BT/BTLE link
removing %@ from links for device %@
_hasGlobalLinkConnectingOrConnected: _cbuuidToLinks: %@
%@ is still connecting or connected.
com.apple.idslinkmanager.networkinterfacelistener
State:/Network/Interface/[^/]+/IPv[46]
network interface listener started
network interface listener stopped
sending a packet over %@ (%zdB) = %s
dropping a packet (%zdB) over link type (%d), #dropped: %llu.
use %@ for cloud enabled packet.
use %@ for control message
dropped data for device %@
no current link for %@
No current link for %@ -- asking WiProx to connect.
startLocalSetup called
LOCAL-SETUP-STARTED
obliterateConnectionInfo called
reset preferInfraWiFi.
reset last sent default peer states (deviceNearby:%@, deviceConnectivity:%@, deviceCloudConnectivity:%@, peerConnectivity:%@).
reset phone call state.
addPairedDevice for the same UUID %@ - Ignoring
enableConnectionForDefaultPairedDevice YES for cbuuid %@.
connectPairedDevice for unknown UUID %@ - Ignoring
deletePairedDevice for %@
enableConnectionForDefaultPairedDevice NO for cbuuid %@.
deletePairedDevice for unknown UUID %@ - Ignoring
LinkManager requires BT, ignore preferInfraWiFi request.
preferInfraWiFi must not be initiated from this device
switching to preferInfraWiFi mode
preferInfraWiFi requested but no local IP available - ignoring
switching back to Magnet/InfraWiFi mode
LinkManager requires BT: %@.
LinkManager shouldStartBTLinkManager: %@.
No connected BTLE link for cbuuid %@ deviceUniqueID %@ -- asking WiProx to connect.
Already have BTLE link for cbuuid %@ deviceUniqueID %@
Asked to disconnect from cbuuid %@ deviceUniqueID %@
startUDPGlobalLinkForDevice %@
stopUDPGlobalLinkForDevice %@
Remove UDPGlobalLink for device %@
createConnectionDataForDevice - deviceID=%@, localPartyID=%@
No UDPGlobalLink is found
No UDPGlobalLink is found.
processRemoteConnectionDataForDevice - %@
startConnectionForDevice - deviceID=%@ isInitiator=%@ remotePartyID=%@
startBTDatagramLinkForDeviceUniqueID - deviceID %@ cbuuid %@
stopBTDatagramLinkForDeviceUniqueID - deviceID %@ cbuuid %@
stopGlobalLinkForDevice %@ (=> cbuuid)
Remove %@ for session %@
_deviceIDToGlobalLinkUp
IDSGlobalLink is brought down for %@.
Bring down WiFi (currentLinkType:%d).
Magent is connected, skip connecting GlobalLink for %@.
Receive allocate response for request %@, device %@. connectGlobalLinkForDevice with sessionInfo %@.
connectGlobalLinkForDevice: sessionInfo[kIDSQRAllocateKey_StreamInfoSubscribedStreams]:%@
Set alternateDelegate %@ for %@
No GlobalLink is found.
GlobalLink
disconnectGlobalLinkForDevice for  %@
_deviceIDToAllocRequests
allocate request %@ is pending for %@
handleAllocateRequestFailureForDevice - deviceID %@, requestID %@, erroCode %d
setAcceptedRelaySession - sessionID %@, relaySessionID %@.
-[IDSLinkManager setHasPendingAllocation:forIDSSession:]
%s - sessionID %@, hasPendingAllocation %@.
-[IDSLinkManager setTimeBase:forIDSSession:]
%s - sessionID %@, timeBase %@.
sendSKEData - sessionID %@, skeData %d Bytes.
sendSKEData - sessionID %@, there is no link for sendSKEData (links:%@)
there is no link for sendSKEData
sendKeyMaterialMessage - sessionID %@, groupID %@
sendKeyMaterialMessage - sessionID %@, there is no link (links:%@)
setDesiredMaterialsForSession - sessionID %@
setServerDesiredMaterialsForSession - sessionID %@, there is no link (links: %@)
requestMaterialsForParticipantIDs - sessionID %@
setDefaultUnderlyingLink - sessionID %@, linkID:%d.
setPacketNotificationFilter - sessionID %@, linkID:%d, enable:%@.
dropIPPackets - sessionID %@, linkID:%d, payloadArray:%@.
updateProtocolQualityOfService - sessionID %@, linkID:%d, isGood:%@.
stopKeepAlive - sessionID %@, linkIDs:%@.
WiFiAssist enabled: %@
currentCellularSignalStrength - sessionID %@.
startLinkProbing - sessionID %@, options: %@.
stopLinkProbing - sessionID %@, options: %@.
queryLinkProbingStatus - sessionID %@, options: %@.
flushLinkProbingStatus - sessionID %@, options: %@.
sendStatsRequest - sessionID %@, options: %@.
setRemoteDeviceVersion - sessionID %@, version: %u.
receiveJoinNotificationFromAParticipant - sessionID %@.
setUPlusOneModeForSessionID - sessionID %@, isUPlusOneEnabled: %@.
manageDesignatedDestinationsWithSessionID - sessionID %@, sessionStateCounter: %u, destinations: %@, withType: %u
removeParticipantIDsWithSessionID - sessionID %@, sessionStateCounter: %u, participantIDs: %@
get session info for group %@, session %@, options %@
update session participants for group %@, session %@
registerPluginForGroup could not find GlobalLink for session %@
updateSessionURIToParticipantIDs for group %@, session %@
createAliasForParticipantID could not find GlobalLink for session %@
participantIDForAlias could not find GlobalLink for session %@
updateParticipantType %u - sessionID %@
sendConnectedLinkInfoToAVCForSessionID %@
setClientUniquePID could not find GlobalLink for session %@
requestChildConnectionIDForLinkID could not find GlobalLink for session %@
setIsOnPhoneCall %@ for deviceID %@
%@ didConnectForDevice %@
%@ didDisconnectForDevice %@
default device is in preferInfraWiFi handshake, skip notifying BTLink hasSpaceAvailable.
didReceiveSKEData - alternateDelegate:%@, skeData:%d bytes.
didReceiveKeyMaterialMessage - alternateDelegate:%@ from %@ to %@
didReceiveMaterialInfo - alternateDelegate:%@ materialInfo:%@
Not processing didConnectOverCloud in the IPsecLink path.
didConnectOverCloud for %@.
didFailToConnectOverCloud for %@.
didDisconnectOverCloud for %@.
allocation request was delayed, retry...
didConnectUnderlyingLink - alternateDelegate:%@, linkID:%d, linkUUID:%@.
didReiceiveChildConnectionID - alternateDelegate:%@, childConnectionID:%@ linkID:%d
didDisconnectUnderlyingLinkID - alternateDelegate:%@, linkID:%d, linkUUID:%@, reason: %d
didDefaultUnderlyingLinkChangeSucceeded - alternateDelegate:%@, currentDefaultLinkID:%d.
didWiFiNWPathFlagsChanged - alternateDelegate:%@, nwPathFlags:%u.
didCellularNWPathFlagsChanged - alternateDelegate:%@, nwPathFlags:%u.
didRATChange - alternateDelegate:%@, newRAT:%s.
didCellularMTUChange - alternateDelegate:%@, cellular MTU:%u.
terminateCallDueToIdleClientForLink - alternateDelegate:%@
receive session-info for group %@, session %@, status: %u.
didReceiveReportEvent - alternateDelegate:%@, eventDictionary:%@
%@ reported power state change: %@
%@ reported paired device change.
enableConnectionForDefaultPairedDevice NO for currently paired device.
State:/Network/Interface/utun
State:/Network/Interface/pdp_ip
Addresses
_handleNetworkChanges %@ = %@
/IPv4
/IPv6
_handleNetworkChanges _localWiFiAddressUsedForDefaultDevice = %@
receive WiFi IP address, start QR allocation.
LinkType %lu, RATType %lu for non-FaceTime clients
current link type for %@ is %d.
None
Magnet
InfraWifi
QuickRelayWiFi
QuickRelayWWAN
WRM recommends the link type %u, but IDS ignores WRM recommendations per rdar://problem/33602915 discussion
cellular RAT changed, usable: %@.
celluar data is usable, retry QR allocation for %@.
cellular SoMask changed: %u.
t:%@
kDefaultMultiQueueKey
ids-message
v16@?0@"RPCompanionLinkDevice"8
v24@?0@"NSDictionary"8@"NSDictionary"16
init
v32@?0@"RPCompanionLinkClient"8@"NSString"16@"NSError"24
v16@?0@"<IDSRapportClientDelegate>"8
guest-device:%@
v16@?0@"RPCompanionLinkClient"8
We failed to find a rapport destination for the provided deviceIdentifier
RPCompanionLinkClient
Rapport
RPOptionAllowUnauthenticated
RPOptionSenderID
IDSKTGossipPolicy.m
spec
/Library/IdentityServices/ids-gossip.db
GossipCache
gossip-recipient-set
IDSKTGossipPolicy
Error fetching stored gossip recipients { error: %@ }
Error unarchiving stored gossip recipients { error: %@ }
Error archiving stored gossip recipients { error: %@ }
Error storing gossip recipients { error: %@ }
utun-push-fallback-connected-timeout-
utun-push-fallback-disconnected-timeout-
cloud-messaging-on-the-hour-max-delay-in-ms
cloud-messaging-top-of-the-hour-definition-in-seconds
Initing UTunConnection %@ %p
NWFraming
shouldUseNWFramingOverIPsecString: %@
Deallocing UTunConnection %@ %p
<%@: %p, name: %@>
B32@?0@8Q16^B24
IDSUTunConnection
Insufficient space for {dataProtectionClass: %@}, {pendingOutgoingBytes:%lu}, {maxQueueSize:%lu}, {inflightMessageCount:%lu}
%@ changing cbuuid from %@ to %@
%@ ignoring cbuuid update from %@ to %@
%@ enabled state changed: %@ -> %@
com.apple.private.alloy.continuity
Removing continuity message %@
WPConnection failed
%@ Peer awake state changed to YES with %lu pending messages (%lu sending). Kicking queue to service non-waking messages.
-[IDSUTunConnection _nonThreadSafeStopConnection]
%p: %s
OTR is disabled on magnet connection, enable stream encryption.
Found pending or locked continuity peer %@, disable connection for %@.
%@ _startConnection
IDS internally calling UTUN's openSocketWithOptions
%@ IDS internal openSocketWithOptions call returned socket %d, error %@
new local link established
%@ created %@ for socket %d - sending handshake with version %u
%@ resending %lu pending socketpair messages
v32@?0@"IDSSocketPairMessage"8Q16^B24
%@ Failed to open UTun socket, waiting...
UTunConnection receives remote controlChannelVersion %@ instance ID [%s] flags %016llX, use shared OTR session %@, use named OTR session token %@, resume resource transfers %@, new service supported %@, dynamic services %@ service minimum compatibility version %u
%@ openSocket returned with connection to old instance - stop and reconnect
@"NSData"24@?0@"NSData"8@"NSString"16
@"NSData"16@?0@"IDSSocketPairMessage"8
 (non waking)
%@ enqueuing%@ message %@ messageCount %lu - QoS=0x%x
Message with topic %@ has queueOneIdentifier %@, flushing older messages that match.
queue one identifier
Attempting to send nonCloudWaking message on non-magnet connection. Coallescing {guid: %@}
%@ socket buffer is empty, dequeuing a message.  didWakeHint(%d)
%@ Waiting for remote device wake before dequeuing message.
Cancelling messages %@
Client Canceled
All queues are empty
Clearing fallback stickiness due to: %@
Server Bag provided us with a fallback timeout of %f
DisableCloudFallback
   **** cloud fallback disabled ****
ids-local-cloud-fallback-delay
%@ performing cloud fallback for message[%u] %@ which is scheduled to expire %@
%@ - messages in queue in need of fallback, setting timer for: %f
%@ fallback timer fired, fallback queue: %lu
Exception caught handling fallback timer: %@
%@ - messages in queue, setting timer for: %f
%@ - no messages in queue, clearing timer
%@ timeout timer fired, sending queue: %lu %lu
Exception caught handling timeout timer: %@
The destination device for this message did not connected before the timeout fired.
This message was a non-waking message and the destination device for this message did not wake before the timeout fired
This message was written into the connection, but did not receive an ack. Check Bluetooth conditions and that your process is not hung on the receiver.
This message requires class C connection, but the devices are not ClassC connected, because the remote device is locked.
timed out
%@ sending resource transfer cancel message %@
No in flight messages remaining
Message %@ %@ %@ removed, total message count %d - %@
Message on service %@ not allowed! Attempted to send on traffic classes: %@ Permitted traffic classes: %@
Overriding previous decision on message for topic %@ due to feature flag that allows messages will empty traffic classes
v32@?0@"IDSLocalDeliveryMessage"8Q16^B24
remote does not support new service
Server Bag {%@:%d}
%@ Assert QuickRelay after %d ms
%@ utun socket pair connection inFlightMessageCount %lu (max %u) - do not dequeue
v24@?0@"IDSSocketPairMessage"8^B16
v32@?0@"NSArray"8Q16^B24
DisableLocalDelivery
**** Local IDS connectivity is disabled, only using cloud ****
UTunConnection _isCloudEnabled:%@ (%@, messageCount:%d)
%@ is not available, waiting.
No messages waiting for acks
Message with guid %@ not allowed due to its traffic class
IDSUTunConnection-sending-%@
IDSUTunConnection-sending
%@ created sending power assertion %@
Translated message %@ with servicename %@ to streamID %u
Piggybacking message %@ with servicename %@ with incoming streamID %u created %@ (old id %u)
Remote instance changed while receiving message %@ with topic %@ - continue and dispatch reconnect
Non BT usage is not allowed, failing message
Celluar Useage Policy states that BT is required
dequeueMessages check for %@ %u
%@ resource transfer sender %@
%@ cannot read message to deliver for resource transfer %@
cannot read chunk of resource
* Dequeuing for Sending %{public}@ priority local message payload of data size: %lu/%lu   for topic: %{public}@:%{public}@  guid: %{public}@  messageID: %d
Message %@ added to queue, total message count %d, sendingTopics count %d
com.apple.private.alloy.idstool.testservice
DuplicateTestFileMessages
Send duplicate message %@
Clearing power assertion: %@
* Sending message with sequence number %u
with sequenceNumber %u
%@ Sending message[%lu] %@ %@.
-[IDSUTunConnection _addMessageSize:forTopic:direction:dataProtectionClass:isResource:]
%s: statsDictionary is nil for direction %d
%s: priority %d updated direction %d stats %@
Starting messageDequeueTimer
com.apple.identityservices.IDSUTunConnection-dequeueMessages
Request to start messageDequeueTimer ignored -- timer already running
Dequeue Message Timer did Fire -- Dequeueing messages
Requeued %lu sending messages for %@.
OTR negotiation timed out for %@ but remote device doesn't support shared session.
OTR negotiation timed out for %@, retry.
OTR negotiation timed out for %@, clear error state and requeue all messages.
v16@?0@"NSString"8
Enable
Disable
%@ OTR for UTunConnection %p, priority %ld
UTunConnection - No class storage key specified in notification %@
Class %@ storage keys are available, processing %lu pending messages
Encrypted message for token %@  original size: %lu  encrypted size: %lu  elapsed: %.6f
Failed to encrypt UTunConnection message! Error %ld
Send OTR message for %{public}@ E:%u SN:%u.
_sendOTREncryptionQueue: invalid OTR token %@
Encrypted message for device unique ID %@  original size: %lu  encrypted size: %lu
Send public key encrypted message.
com.apple.private.alloy.utunconnection
Send OTR message for %{public}@ E:0.
Waiting OTR session for %04x(%@) ...
Data protection class unavailable
v12@?0I8
OTR session negotiation for %@ is in progress
Session key store is not available for class C, but %@ message (%u) is already stored.
Session key store is not available for class C, holding on to %@ message (%u)
Current pending messages %@
Session key store is not available for class A, but %@ message (%u) is already stored.
Session key store is not available for class A, holding on to %@ message (%u)
Clear OTR error map for %@.
Set OTR error map for %@.
OTR session for %@ is in error state, skip negotiation.
_handleOTRDecryptionError: invalid OTR token %@
Attempt to decrypt invalid message type %u.
*** Recv old OTREncryptedMessage but remote device asserts useSharedOTRSession message %@
*** Recv OTR message with unknown topic, command:%d, sequenceNumber:%u, streamID:%04x, version:%u, priority:%d
Recv OTR message for %{public}@ E:%u SN:%u.
Stored class C OTR message for %@, sequneceNumber:%u.
Decrypted message for %@  original size: %lu  unencrypted size: %lu  elapsed: %.6f
*** OTR session for %@ is not ready.
Stored class A OTR message for %@ sequenceNumber:%u, ignore decryption failure.
Decrypted message for device unique ID %@  original size: %lu  unencrypted size: %lu
Decrypted continuity message, lock peer %@ for btUUID %@.
Failed to decrypt UTunConnection message! Error %ld
Flush all messages for peer %@
Broadcast: Sending ack %@ for received sequence number %d
Sending Expired ack %@ for received sequence number %d
IDSSocketPairCommandResourceTransferMessage requires a messageUUID
IDSSocketPairCommandResourceTransferMessage should be IDSSocketPairResourceTransferMessage
IDSSocketPairCommandResourceTransferMessage received %@ @ incorrect offset %llu (should be @%llu)
IDSSocketPairCommandResourceTransferMessage cannot find receiver for message %@ - asking sender to reset
IDSSocketPairCommandResourceTransferMessage already receiving message %@ @%llu
ResourceTransferReceiverError
ResourceTransferErrorOverride
Aborting resource transfer receiver for %@ after %lf seconds
IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@ (reason %d)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (was sending %llu)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (ignoring nonmatching message %@)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (sender not found)
Got cancel message for incoming file %@ cancelReason %u
Got cancel message for %@ cancelReason %u
Got cancel message for outgoing file %@ cancelReason %u
IDSSocketPairCommandResourceTransferMessage got cancel message for %@ cancelReason %u, but no sender or receiver found
IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@
IDSSocketPairCommandResourceTransferMessage received and completed
IDSSocketPairCommandResourceTransferMessage received - waiting for more
%@ received a message that we cannot accept without encryption! %@
Got incoming data message {dataMessage: %@, rawMessage: %@, command %d, self: %@, didDecrypt: %@}
v16@?0@"NSData"8
Received message has messageUUID %{public}@ peerResponseID %@ expectsPeerResponse? %@ wantsAppAck %@ remoteExpiryDate: %@
Received a message that has passed its expiry date, sending back an expired ack MessageUUID: %@
%@ [%@] received a %d message when it was expecting a handshake!
Incompatible IDS version number!
Incompatible IDS version number - please make sure your build versions match!
Incoming message %@ servicename %@ streamID-found %u newly-created %@ (serviceMapMessage %@)
Cannot create mapping while receiving message %@ with topic %@ - continuing
UTunConnection Error: missing expected message topic!! (no optimization) streamID %u  (topicForStreamID %@)
*************** SERVICEMAP ERROR: FAILED TO GET TOPIC FOR streamID %u ****************
Remote instance changed while receiving message %@ - drop and reconnect
UTunConnection Error: missing expected message topic!! (supports optimization) streamID %u  (topicForStreamID %@)
Incoming message %@ servicename-found %@ streamID %u sequenceNumber %u
Incoming message %@ servicename-found %@ streamID %u
Broadcast: incoming message sequence number %u 
* Receiving local message payload of size: %d for streamID: %d  messageSequenceNumber %d  compressed %@
Broadcast: incoming protobuf sequence number %u 
* Receiving local protobuf %@ for streamID %d  compressed %@
Decompressed local protobuf message data from: %lu  to: %lu
LocalDelivery: IDSSocketPairCommandProtobufMessage received incompatible data message of type %@
* Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
  => Message id %d ACK'd RTT: %f  [instantaneous %f]  time sent: %f
Removing ack'd message[%u] with sequenceNumber %u (index=%lu), message %@ remaining count %lu
  => Message id %d ACK'd but it already timed out...
%@ [%@] received handshake with version %u. We require %u. Needs handshake? %@
Broadcast: incoming app ack sequence number %u 
SocketPairConnection should have consumed this and never pass it up
GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY %@
* GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
GOT SOCKET PAIR COMMAND MESSAGE INCOMING NICE PROXY %@
* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE INCOMMING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
GOT SOCKET PAIR COMMAND INCOMMING IMESSAGE COMMAND %@
* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE iMessage Command Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
DECOMPRESSED IMESSAGE DECRYPTED DATA NOT NIL: %@
Passing %@ Down to UTUN
Got ServiceMapMessage reason %u serviceName %@ streamID %u
Popping dialog to alert the user of the IDS version mismatch
DLCCollectLogs
DiagnosticLogCollection
IDS version mismatch
%@ informed that utun socket pair connection %@ has closed...
%@ informed that IDSNWSocketPairConnection has closed.
message received via local link
%@ connectionBecameEmpty %@
%@ connectionDidReachInFlightMessageLowWaterMark %@
%@ connectionDidReceiveBytes %@
local link did receive bytes
Calling IDSOTRController:startOTRNegotiationWithDeviceIfNeeded to force session negotiation.
_otrTokenToArray: invalid OTR token %@
%@-%u-%1u-%@
%@-%u-%1u
IDSPhoneNumberValidationErrorDomain
<%@: %p state: %@, lastSendDate: %@, numberOfPreflights: %u, numberOfAttemptsWithoutSuccessfulSend: %u, numberOfSuccessfulSends: %u>
BYSetupAssistantDidCompleteSIMSetupNotification
SetupAssistant
overrideSMSTimeout
smsTimeout
com.apple.identityservices.sms-delivery-hbi
Registration attempt
Trying to send phone number validation request { preflights: %d, sends: %d, attemptsWithoutSend: %d }
Failed Sending Phone Number Validation
Failed sending registration Phone Number Validation request #%d, trying again
Failed Phone Number Validation
Failed sending registration Phone Number Validation request #%d, giving up
Phone Number Validation Sending
Succeeded sending registration Phone Number Validation request #%d
Registration SMS
Received registration SMS
Phone Number Validation Timeout
Timed out waiting for Phone Number Validation request #%d
TotalSMSAttempts
TotalPreflightAttempts
Idle
Waiting to Begin
Waiting for Delivery Acknowledgement
Waiting for Response
gdr-max-auth-retries
gdr-auth-retry-interval-seconds
  * Device Name: %@   Service: %@   Hardware: %@   Token: %@   Linked URIs: %@   Identities: %@   Device Data: %@   Sub-services: %@   HSA trusted: %@
IDSGetDependentRegistrationsCenter.m
OTRController
Remove OTR timer %p for %@.
OTR timed out for %@, timer %p.
otr-timer-%@
Set OTR timer %p for %@
Unable to create session from session data
IDSOTR
No public key found for remote device
  => will, send out OTR negotiation data %luB for %@, count:%08x.
_topicFromToken: invalid OTR token %@
_priorityFromToken: invalid OTR token %@
Topic
linkType
wasPrimary
timeTaken
totalProcessed
%@ - No account for service name %@ found to send a message, bailing...
IDSGroupSendAheadObserver
sendAheadGroup { group %@, account %@, destination: %@ }
Send ahead message %@ got response code %lu error %@ lastCall %@
v24@?0@"NSData"8@"NSError"16
Group updated, sending ahead to members { topic : %@ }
service_signatures
IDSDaemon-DM
direct messaging capability not supported by peer
Invalid message size (%lu < %zu)
processing direct messaging info
direct messaging info: resolved version %u (l:%u r:%u)
direct messaging info: peer supports device connection
direct messaging info: peer supports concise ACKs
com.apple.ids.direct-messaging
notifying clients with state: %llu
Received direct messaging connection for service: %@
No services when processing %@
Index when processing %@ : %lu
No objects when processing %@
No local objects when processing %@
No connection when processing %@
No entitlements when processing %@
No allowed services when processing %@
peerIDForDirectMsg
directMsgAllowedForServices
pidForIDSD
completing setup info for %@ : %@, idx %lu, broadcast %d
65AC1229-66CB-4C74-BE47-F5342D60E37E
direct-messaging-socket-received
object-flags
object-recipient
issuing connected socket to client %@
v16@?0@"<IDSDaemonListenerProtocol><IDSSendXPCProtocol>"8
__kIDSOTRKeyStorageClassStorageIsAvailableNotification
__kIDSOTRKeyStorageClassKey
OTRStore
Device first unlocked
Device unlocked
Device locked
Saving OTR session key store
v32@?0@"NSString"8@16^B24
ids-otr-key-storage
Device is under data protection lock, not loading class A session keys
Device is under first data protection lock, not loading class C session keys
Class A store is already loaded ignoring...
Class C store is already loaded ignoring...
Class D store is already loaded ignoring...
Loaded stored class %@ session store
Missing session key dictionary %@ or data protection string %@
Did not find class %@ store to load
%@ - Missing service in token, can't store session key
%@ - Missing service in token, can't retrieve session key
Found session key %p for topic %@
%@ - Missing service in token, can't remove session key
com.apple.identityservices.otr-save-store
com.apple.identityservices.otr-purge-cache
Found session key for token: %@
No session key for token: %@
Saving now
Storing session key for %@.
Removing session key for %@.
removeSessionKeyForAllTokenFromMainQueue
Cleaning up keychain
OTRStore: invalid OTR token %@
%@:state = %d, isFinished = %d, isBeingHandedOff = %d, callID = %d, state = %d, inviteNeedsDelivery = %d
APSConnection
SecIdentityCopyCertificate
SecCertificateCopyCommonNames
IDSSessionConnectionInfo
array_ref = %@
firstCommonName = %@
com.apple.identityservices.idstatuscache
idstatuscache.plist
CacheVersion
IDStatus
NegativeTTL
LookupDate
ValidExpiry
IDSIDStatusQueryController
IDQuery
IDSDaemonQueries
Completed ID query {uri: %@, fromURI: %@, error: %@}
IDSIDQuery
v32@?0@"NSString"8@"NSNumber"16^B24
Purging tokens forURI %@ fromURI %@ fromService %@
Bag disabled -- Not purging tokens forURI %@ fromURI %@ fromService %@
com.apple.identityservices.id-status-cache
No updates, ignoring...
No fromURI, ignoring...
No fromService, ignoring...
Will add valid expiry
Caching ID query responses: %@   date: %f   from URI: %@   from Service: %@ addValidExpiry
Trying to cache Invalid for ourselves, ignoring...
q24@?0@"NSDate"8@"NSDate"16
 => Ignoring update to unknown, just updating the cache
Removing cached entries {service: %@}
 => Bogus ID query for: %@   ignoring this
 => From Service: %@
 => Not looking up... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
unknown
 => Forcing query for URI: %@
com.apple.private.alloy.biz
 => Not looking up... status is Valid
 => Not looking up, query not allowed... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
 => We can't look up, but can piggyback... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
 => Issuing ID query for URIs: %@   (Current status: %d  Last time: %f   Current time: %f  Difference: %f  Needed Difference: %f)
Completed ID query for URI %@ fromURI %@ (Error: %@)
Over %ld hour(s), resetting query per hour(s) count
New start query date %@
We have at least one valid result, returning cached results %@
Device does not have a cert, attempting to proxy the query
Remote ID IDs Query V2 has completed with the following: %@  FromURI: %@ ReturnedService: %@ ReturnedSucesss: %@ ReturnedError: %@ 
Updating Cache  %@
Calling Completion Block  %@
Device does not have a cert {_allowProxyQueries: %@, URIsToQuery: %@}
We're at %@ queries for this hour
We're at %@ queries for this hour, can't do more
(%@)
Triggered auto bug capture for query rate limiting {session : %@, error: %@}
We didn't query anything, returning cached results %@
 => Bogus ID query for: %@   ignoring this request
 => From URI: %@
 *** Missing identity, failing query
 => Bogus ID for: %@   ignoring this
 => Expired status -- returning unknown {URI: %@, fromURI: %@, difference: %f, timeNeeded: %f}
PeerCache
Current cache for service: %@  cache: %@
Empty service or URI to send ID status changes
Sending id status changes %@ for service %@ URI %@ success %@ error %@
Empty uniqueID %@ for adding completion block
Empty completion block for uniqueID %@
Completion block for uniqueID %@ added %@
Empty uniqueID %@ for removing completion block
Removed completion block for uniqueID %@
**** Forcing deleting of peer cache ****
Forcing flush of peer cache
Forcing save of peer cache
Non-string key in cache (service) -- Removing
Non-dict value in cache (service) -- Removing
Corrupted entry in cache (missing dict). Removing entry
Corrupted entry in cache (status). Removing entry
Corrupted entry in cache (lookUpDate). Removing entry
Removing entry with unknown status {URI: %@, URIDict: %@}
Exception processing cache -- deleting {exception: %@}
Loaded cache: %d items
Finished wipe of legacy cache
Saving cache: %d items
client-query-set-unknown-for-purge
  => Invalid URI, below our minimum length: %@
  => Invalid URI, empty: %@
  => Invalid URI, phone number, with no '+' character: %@
  => Invalid URI, email, with no '@' and '.' characters: %@
  => Invalid URI type: %d  URI: %@
client-query-allow-forced
client-query-respect-soft-expiry
device-query-reset-interval-hours-%@
com.apple.private.alloy.arcade
device-queries-per-hour-%@
client-query-allow-bypass-limit
GKSErrorDetailedError
AVConference
GKSErrorReturnCode
<%@: %p forParticipantID:%llu forPublicIdentity:%@ materials:%@ hash:%llu>
v24@?0@"IDSRegistrationPushHandler"8@"NSDictionary"16
bdurl
baurl
md-peer-lookup-negative-cache-time-%@
md-peer-lookup-negative-cache-time
md-peer-lookup-unknown-cache-time-%@
md-peer-lookup-unknown-cache-time
Warning: [[request IDSSessionID] length]: %lu != sizeof(uuid_t): %lu
QRAllocation destroyed
Invalid session. Skip AWD report
access token of allocation for QR session %@ expired (%f > %@). Discard it.
_purgeAllocation: Invalidate allocation
allocation timeout timer cancelled
allocation timed out
Sending server message QR metrics allocation timeout report for session %@ requestID: %@, ua: %@
failed to send server message allocation timeout QR metrics report: error: %@  code: %ld
Finished sending server message allocation timeout QR metrics report for session %@ delivery error %@
Dealloc IDSQuickRelayAllocator %@.
no groupID in %@
session token or address not available: %p %p
Session not found for %@
send keepalive for groupID: %@, sessionID: %@
failed to send keepalive request: error: %@  code: %ld
failed sending allocate request: %@ error: %@  code: %ld
_requestIDToPreferredLocalInterface
translate deviceID: %@
shared session allocation, previous connect status: %p
setTestOptions: IDSGroupSessionForceQRSession
cached response previous connect status, reason/error/token/ip: %u %u %u %@
groupID not set for shared session allocation: %@
_requestIDToSession
QuickRelayServerProvider
QuickRelayServerProvider switch has been deprecated
request allocation for a specific address %@
_setupAllocation: preferredRemoteInterface %@
QuickRelayServerAddress
%@=%@
_setupAllocation QuickRelayServerAddress test option: %@
QuickRelayForceDegraded
_setupAllocation test options: IDSGroupSessionForceDegraded
QuickRelayBlockUPlusOne
_setupAllocation test options: IDSGroupSessionBlockUPlusOneSession
QuickRelayAppleTestingKey
_setupAllocation test options: IDSGroupSessionAppleTestingKey
self->_requestIDToAllocateTime
Full request info for send allocate request, recipient count: %u, request: %@, time: %.6f.
IDSQuickRelayAllocator.m
Stream information to cache, idsSessionID=%@, isJoinAllocation: %@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@
No device found
No push token for device %@
setup allocation for %@ service to device %@
No response found for groupID: %@
use hardcoded session token for group %@, session %@.
No session allocation time: %@ %@
No relay session ID: %p %p
Invalid relay session ID length: %u %u
Invalid relay session UUID: %@ %@
No response for relay sessionID %@
No participant information in %@
No recipientID or push token in %@
merge new participant id %@
%u new participant-id to push token mappings added, %@
No groupID in %@
No QR sessionID in %@
Duplicated responses for sessionID: %@, %@, %@
cached allocation response has issue: %@
message added to cache: %@
use duplicated response
ignore duplicated response
failed to find IDSDSession object for %@
no IDSDSession ID in %@
Should switch from %@ to %@
addConnectStatus, groupID: %@, relaySessionID: %@i, data: %u %u %u %@
No response for groupID: %@
Response is not for sessionID %@, response %@
Cached response modified for relay sessionID %@
response invalidation is supported on internal install only
no response for groupID %@
self allocation in cache: %@
Unable to setup QR allocation for unregistered account for %@ service
missing sessionID to setup a QR allocation
No groupID for shared session %@
found cached allocation response for %@: %@, previous connect status %@
cached allocation response has issue: %@ %@
Expired time: %llu, current time: %llu
Response has expired or about to expire
found no cached allocation response for %@, isAllocateRequestForUnauthorizedUser: %@, shouldUseCachedResponse: %@
trying to change a read-only dictionary
pushToken
look up peer with URI: %@, push token count: %u, prevent duplicates: %@,  tokens: %@
Skipping duplicate %@
could not look up recipient's push tokens, ID: %@, errors: %@ 
Missing expected default paired device's push token %@
No recipient is found.
Missing recipientIDs
Invalid token %@ or idsID %@
token:%@/%@
use QR session info from user defaults: %@.
sessionInfo
no push token for participantID %llu
no response for %@
no participant list in %@
no push token for participantID %@ in response %@
participantID to push token mapping: %@ %@
no push token for participantID %llu in response %@ for group: %@
participantID: %llu, pushToken: %@, group: %@
URI for participant ID %llu in group %@: %@
No URI for participant %@ in group %@
IDSSession ID %@ requested additional allocation for QR Session ID %@, allocateType %d, reason %d
could not find original allocate request to clone %@
No groupID for %@
Ignore self allocation for shared session
requestOptions
could not find original push token to clone for QR session %@
could not find existing recipient to clone
need to do ID query: allocateType: %d, destinations: %@, sessionID: %@, fromURI: %@
Full allocate response payload for RequestID: %@ IDSSessionID: %@ QRSessionID: %@ from cache: %@ with payload %@
failed to compose a QR sessionInfo dict
detected duplicate response. Ignore it.
allocate response modified %@
no allocation for shared session
current response ignored
Recieved allocation from DefaultPairedDeviceID {appID: %@}
Relay expiry time-stamp is NaN: %@
response expired: %16llx %16llx, %@
defaultRemoteDeviceCBUUIDString: %@
allocate response ID %@ is for recipient.
allocate response ID %@ is for initiator and took %0.6lf ms.
allocate response ID %@ is for initiator and took %0.6lf ms, recipient count: %u, response count: %u.
missing allocation status result for initiator
missing recipient push token in allocation status result
missing QR session ID
detects that session %@ has been accepted by device with token %@
join request in process
participant has not joined, ids: %@
useCurrentResponse=%@, sharedSessionHasJoined=%@
participant has joined with cached response
joinWithOptions information: idsSessionID=%@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@, isJoinAllocation = %@
should connect to qr server: %@
Cached stream infomation:  idsSessionID=%@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@
could not find original allocate request %@
set streamInfo from cache: %@, subscribedStreams=%@, publisehdStreams=%@, generationCounter = %@, maxConcurrentStreams = %@
No stream information
isInitiator: %@, pendingRecipientsAcceptedSessions= %@, isCloudAllocation= %@,  useCurrentResponse= %@, isFromCache= %@, subscribedStreams = %@
connecting with sessionInfo %@
recipient waits for session acceptance
self allocation count in response: %u
self allocation: %@
transformed self allocation: %@
failed to get combined-software-id due to invalid parameter.
QR Build Version: %@
remote deviceID: %@
allocate request took: %.6f seconds, extIPAddr: %@.
allocate response is for an auxiliary connection
IPv6Preferred
defaults write to set ipPreference: %d
linkSuggestion
defaults write to set linkSuggestionValue: %d
linkScore
defaults write to set linkScoreValue: %d
Warning: invalid response relaySessionID length = %lu != sizeof(uuid_t) = %lu
missing allocation status result
missing allocateType in response
allocate type is required for allocate protocol version %@
 is missing required attributes %@ in sessionInfo %@
Failed to allocate QR for recipient with token %@ with error %lu
Allocation error response: %@
Allocation failure for session %@, status = %d, code = %d, attempting to retry!
No ids session for ids session id %@
No ids session id for request id %@
No request id
missing response. Skip AWD report
ServerInternalError
BadRequest
MissingRequiredKey
ServerBusy
BadSessionToken
ExpiredSessionToken
Unknown status
 is missing %@, bailling...
No IDSSessionID found for this requestID %@, bailing...
cannot find existing IDSSession %@ to start a connection
bring up GlobalLink link for cloud messaging to %@
passed sessionInfo to IDSSession ID %@ to connect, allocation: %p, %p, session should connectToQRServer: %@
failed to find response for groupID %@
there is no URI list yet. stopped converting URI to Participant ID - %@
v32@?0@"NSString"8@"NSMutableSet"16^B24
failed to find allocation for session %@
IDSSession ID %@ requested for a QR allocation
missing sessionID in requestAllocationForRecipient
found a pending QR allocation for IDSSession %@ with QR session ID %@
there's no pending QR allocation for IDSSession %@
add accepted session %@ with token %@
_initiatorsAcceptedSessionsWithToken
report AWD allocator event %u, transport [%s], RAT [%s], duration %u ms, idsSessionID %@, isInitiator:%@
cleanUpCachedMappings for group %@
invalidate all allocations for IDSSession ID %@
invalid
Add allocation For Session: %@, _sharedSessionHasJoined=%@, %@
_sessionToAllocations
Discard allocation For Session: %@, %@
invalid allocationList
_invalidateSession: %@
_removeAllAllocationsForSessionID: %@, %@
keepalive timer stopped for %@
FixedQuickRelayServerAddress
faied to get address in FixedQuickRelayServerAddress defaults
decoded relay-server-address %@:%u
FixedQuickRelaySessionID
Warning: [decodedUUIDData length]: %lu != sizeof(uuid_t): %lu
decoded base64 relay-session-id %@
FixedQuickRelaySessionToken
decoded base64 relay-session-token %@
FixedQuickRelaySessionKey
decoded base64 relay-session-key %@
 using preallocated tokens from user defaults
Missing a defaults for hardcoded QR session info
disable push handler
enable push handler
received an unexpected message %@
receivedOfflineMessagePendingForTopic: %@
Cannot find allocation for session %@, all allocations: %@
keepalive timer started for %@
keepalive timer not found for %@
cleanup response count: %zu
clean up response for groupID %@
cleanup timer disabled
cleanup timer started
Prefer IPV4
Prefer IPV6
Unknown preference
Error: data length: %lu != sizeof(uuid_t): %lu
deserializeQRConnectStatus failed, bad length: %u %u
Not an UUID
PortMap
found in cur (last = %u) - index=%d shift=%d newShift=%d (cur=%llu, ffsll(~cur)=%d)
found (last = %u) - at index=%d newShift=%d (cur=%llu, ffsll(~cur)=%d)
Number of allocated ports passed high watermark!
Finished capturing AutoBugCapture diagnostics for %@
int IDSPortMap_GetNextAvailablePort(struct IDSPortMap *, uint16_t *)
[Fatal error encountered] %s: ran out of ports to allocate, aborting!!!
can't allocated used port
can't release unallocated port
preflight-enabled
preflight-mechanism-delay
preflight-request-limit
sms-max-retries
sms-max-delivery-retries
overrideMaxSMSRetries
overrideMaxSMSDeliveryRetries
GKVoiceChatServiceErrorDomain
v32@?0@"<NSCopying>"8@16@?<v@?@>24
IDSAsyncMapperQueue
id-validation-cert
Initialize Cert Response: %@
BTLinkManager
============= New BTLinkManager %@ starting =============
using %@ UUID from LinkManager
read pipe peripheral UUID from default: %@
pipe peripheral UUID is nil!  Not setting up BTLinkManager
UseSkywalkChannelToBTServer
UseSkywayChannelToBTServer
IDSBTLinkManager
============= Old BTLinkManager %@ stopping =============
%@ start advertising empty now
stop advertising
using pipe peripheral UUID %@
created pipe peripheral %@
connecting to %@
pipe peripheral is not set. Not connecting
Unregister endpoint identifier: %@
update paired device UUID to %@
processing pending pipe %@
pending pipe %@ matches to paired device
BTLink %@ created
linkDidConnect:%@
could not create a BTLink for %@
pending pipe %@ doesn't match to paired device - releasing it
Change paired device from %@ to %@.
Pipe is registered but not connecting, connect now.
com.apple.ids.datagram
Cannot start datagram link if regular pipe not registered
Registering datagram link type %d endpoint %@ registrationCount 0 => %u
Not registering datagram link endpoint %@ registrationCount %u => %u
Cannot unregister datagram link endpoint %@ - not registered
Unregistering datagram link endpoint %@ registrationCount %u => 0
Not unregistering datagram link endpoint %@ registrationCount %u => %u
%@ didUpdateState %s
%@ didConnectPeripheral %@
%@ didFailToConnectPeripheral %@ err %@
links = %@
%@ didDisconnectPeripheral %@ err %@
%@ didStartAdvertising error %@
 => Pipe did update state: %s
Client
Server
%@ registering for service %@ as %@
skywalk
nsstream
Register endpoint identifier: %@  type: %@  priority: Medium pipeTransport: %@
Unregistering datagram link endpoint %@ registrationCount %@
 => Pipe did register endpoint: %@  error: %@
%@ didRegisterEndpoint id %@ err %@
 => Pipe did unregister endpoint: %@
%@ didUnregisterEndpoint id %@
%@ re-registering for service %@ as %@
Re-register endpoint identifier: %@  type: %@  priority: Medium
 => Pipe did connect: %@
%@ pipeDidConnect %@
%@ got a new pipe for service %@
pipe UUID is nil
pipe UUID is not set yet - deferring verification for %@ until addPairedDevice
new UUID %@ doesn't match to existing UUID %@ - ignoring this new pipe
Pipe UUID %@ match
Link %@ created
Re-registering datagram link type %d endpoint %@ registrationCount %@
could not create a link for %@
 => Pipe did disconnect: %@   error: %@
%@ pipeDidDisconnect %@ err %@
%@ pipe %@ disconnected for service %@
linkDidDisconnect: %@
id-kt-opt-in-out
is-opt-in
Report Spam response: %@
IDSEncryptionErrorType unknown/unhandled error type: %d
neg-token-fail-limit
neg-token-time-limit
v40@?0@"NSData"8@"NSDictionary"16@"NSError"24@"IDSDecryptionMetadata"32
v32@?0@"NSData"8@"NSError"16@"IDSEncryptionMetadata"24
Invalid OTR Encrypt parameters -- failing {inputDataLength: %llu, queue: %@, OTRToken: %@}
   OTR encryption failed with error: %@
Could not find OTR session for token: %@
   OTR decryption failed with error: %@
com.apple.ids.connection.queue
IDSSessionConnection
Cleaning up: %@
connectionData
skeData
callInfoData
Exception caught unarchiving DDResult data: %@   Exception: %@
createConnectionData: requiresWifi = %d, dataReadyHandler = %p, _connectionQueue = %p
_connectionQueue: createConnectionData: requiresWifi = %d, dataReadyHandler = %p, _connection = %@
   AV Response: %@   Error: %@
AVConferenceInviteDataConnectionBlob
AVConferenceInviteDataSKEBlob
AVConferenceInviteDataCallInfoBlob
Got connection data: %p
Connection data error: %@
skeData was nil
callInfoData was nil
_connectionQueue: calling inviteDictionaryForCallID for callID = %d, [connectionInfo peerCN] = %@ 
Calling startConnection
IMAVInterface
Calling startConnectionWithCallID %@, %@, connectionInfo = %@, startError = %@, connectionInfos = %@, [connectionInfo remoteInviteData] = %@
No connection, bailing...
No data to send, bailing...
didStartSession %d for callID %d, error = %@
didStartSession returned a callID we do not recognize %d, what we have %@
didStopWithCallID returned a callID we do not recognize %d, what we have %@
VCCapabilities
GKSRelayParameter_ClientData
GKSRelayParameter_SelfNatType
GKSRelayParameter_SelfBlob
GKSRelayParameter_PeerID
GKSRelayParameter_PeerNatType
GKSRelayParameter_PeerBlob
GKSRelayType
GKSRelayParameter_ConnectionID
GKSRelayParameter_TransactionID
GKSRelayParameter_Token
GKSRelayParameter_PeerRelayIP
GKSRelayParameter_PeerRelayPort
GKSRelayParameter_SelfRelayIP
GKSRelayParameter_SelfRelayPort
GKSRelayParameter_SelfRelayNatIP
GKSRelayParameter_SelfRelayNatPort
GKSRelayParameter_PeerRelayNatIP
GKSRelayParameter_PeerRelayNatPort
GKSRelayParameter_SelfExternalAddr
GKSRelayParameter_PeerExternalAddr
GKSDidStartParameter_ConnType
GKSDidStartParameter_Error
GKSDidStartParameter_CallID
GKSCDXServerAddress
GKSCommNATServerCohortAddress
GKSCommNATServerMain0Address
GKSCommNATServerMain1Address
GKSCommNATServerCohortName
GKSCommNATServerMain0Name
GKSCommNATServerMain1Name
GKSPreEmptiveRelayTimeout
GKSMaxRelayBitrate
GKSICETimeout
GKSNATCheckTimeout
GKSConnectionBlobMaxBytes
GKSNoRemotePacketsTimeout
GKSNetworkConditionsTimeout
Exception caught archiving connectionData, skeData Exception: %@
addDeliveryHandler
unsupportedKey
unsupportedWrapMode
disableEncryption
receiveFirstData
encryptedDataForAllParticipants
firstSendData
pairing-token
id-get-admin-token
RegisteredKeychainErrorDomain
RegisteredKeychainErrorCode
RegisteredDeserializationErrorDomain
RegisteredDeserializationErrorCode
UnregisteredKeychainErrorDomain
UnregisteredKeychainErrorCode
UnregisteredDeserializationErrorDomain
UnregisteredDeserializationErrorCode
GenerationErrorDomain
GenerationErrorCode
RollingErrorDomain
RollingErrorCode
IdentityToRegisterErrorDomain
IdentityToRegisterErrorCode
NGMMissingPrekey
NGMMissingIdentity
ShouldHaveUnregisteredIdentity
ShouldHaveRegisteredIdentity
HasRegisteredIdentity
HasUnregisteredIdentity
Responding to local device info query: %@
Responding to paired device info query: %@
Done with outgoing network availability check; networkOkForSession: %@
Session %@ has ended; NOT sending remote invitations!
Network availability check indicated that we should not attempt to send remote invitation(s)
%@: sendInvitationWithOptions could not find active Wifi connection, ending session with reason %d
Not sending invitation because of missing uniqueID
Failed to send invitation because failed to create unauthenticated public key
SecRandomCopyBytes failed %d (%s), bailing...
pulled out token %@ from destination
skipping destination %@, can't find token
session %@ invitation sent to tokens %@
We are the receiver, we can only DECLINE the invite, not CANCEL
Failed to create data from public public identity {error: %{public}@, publicIdentity: %{private}@}
Failed to create public identity from full identity {error: %{public}@, fullIdentity: %{private}@}
Failed to send IDSSession because failed to create unauthenticatedPublicIdentityData
v24@?0^v8Q16
Failed to create unauthenticated public key because of nil full identity {session: %{private}@}
Failed to get unauthenticated public identity from full identity {error: %{public}@, fullIdentity: %{private}@, session: %{private}@}
Failed to get data from unauthenticated public identity {error: %{public}@, publicIdentity: %{private}@, session: %{private}@}
Failed to create identity from data in invitation accept, bailing...
Unauthenticated invitation accept missing public key, bailing...
Accepted relay-session-id %@.
Accepted relay-session-id %@ waits for QR connection.
DaemonGroupContext
Group context controller starting up
Got Context
Failed to get Context
Incoming Daemon UpsertGroup
Got Deaemon Group Context %@, error %@
Updating Group
Creating New Group
New Group Created %@
Upsert group -- Failed {error: %{public}@, context: %{public}@}
Incoming Daemon FetchGroup {groupID: %{public}@}
Failed to fetch group by groupID {error: %{public}@, groupID: %{public}@}
Failed to get public data representation {error: %{public}@, group: %{public}@}
Failed to get group from public data representation -- missing context {error: %{public}@}
v20@?0@"NSArray"8B16
Failed to get participnats for cypher -- missing context {error: %{public}@}
Failed to validate cached group -- missing context {error: %{public}@}
v24@?0@"NSSet"8@"NSError"16
Notified of update to registration identities; invalidating daemon cache
Noting registration identity update {context: %@, error: %@}
Core Data Load Failed
Core Data Load sucdeeded
Engram is disabled
No output arrays specified for _splitDestinations %@
%@ splitting destinations %@
Splitting out local destinations - looking up device for dest %@
Resolved destination %@ from default paired device constant device %@.
(Class) Destination device uniqueID: %@
(Class) Default paired device uniqueID override %@   uniqueID %@
(Class) Device uniqueID override %@   uniqueID %@
(Class) Found matching device %@
(Class) Didn't find matching device for uniqueID %@
(Class) Resolved destination %@ from default paired device constant device %@.
token:
Splitting out local destinations - token %@ and uri %@
Malformed destination %@
__localURI__
Finding device matching URI %@ and token %@
Found deviceID %@ and btID %@ after first try
Did not find deviceID using account %@
Found deviceID %@
Splitting out local destinations - found device id %@
LiveDeliveryOverPush
Using push instead of Live Delivery while GL warms for device id %@
Device does not support live delivery, falling back to push {deviceID: %@, strippedURI: %@}
Not considering %@ for local. DeviceID is %@  (btID: %@)  and we're not already scanning/advertising. Service allows wiprox? %@
  Local IDS is disabled... not sending locally
Splitting out local destinations - no local device for URI %@, adding to remote
(Class) Dest became nil while trying to split destinations.
(Class) Split out local destinations (%@) remote destinations (%@)
OUTGOING-LOCAL_SEND:%@ SERVICE:%@
Sending message ID (%@) with data length %lu (resource: %@)  [Topic: %@  Local Device IDs: %@]
Ignoring request to fallback forcedLocal %@  localType %@ requireLocalWiFi %@ message %@
(Account) No account found for ID: %@
Fallback won't sent for %@ %@  alreadyFailed %@ alreadySending %@ alreadyComplete %@
Ignoring request to fallback for %@ %@ forcedLocal %@
Ignoring request to fallback for %@ %@ forcedLocal %@ due to budget restrictions.
Fallback send of %@ to %@ %@ completed with responseCode %ld error %@ lastCall %@ - current pending sends local %@ fallback %@
Overwriting previous local failure with remote success
Initiating fallback send for message %@ to %@ %@ from account %@
Attempt to send both DataToEncrypt and Data, dropping data
IDSUTunDeliveryController sendMessage %@ deviceID %@ succeeded? %@ response %ld topic: %@ - current pending sends local %@ fallback %@ account %@
Messaging
Sending via account that's type Local -- forcing local delivery.
self-token:
Couldn't resolve %@ to a valid dependent registration.
Could not construct a destination for %@
Service would like to use iMessage callerID for messages, Attempting to use %@
Service would like to use iMessage callerID for messages however they specified their own FromID, so we will attempt to use that
Sending Resource at path %@ with metadata %@
Compressed message data from: %u  to: %u
Use uncompressed message data (original: %u compressed: %u)
Compressed protobuf data from: %u  to: %u
Use uncompressed protobuf data (original: %u compressed: %u)
sendMessage <<Redacted>>  bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ wantsCertifiedDelivery %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
sendMessage of size %lu  bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ wantsCertifiedDelivery %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
Payload length %lu for topic %@ is too big to send.
Payload length %lu for topic %@ is too big to send as urgent
Attempt to send a file transfer over IDS to a remote destination over File Transfer API. Setting Command
Account %@ was asked to send to %@ with forced local delivery but there are unaddressible remote destinations %@ - failing message.
Account %@ was asked to send to %@ but we were unable to resolve any actual destinations - failing message.
Setting localLastCall to YES for this proxied outgoing message so that the completion does not rely on the local reflection
Local send completion block {responseCode: %ld, error: %@, lastCall: %@, combinedResponseCode: %ld, combinedError: %@, account: %@}
Attempted to send to remote destiantions on a local account, we are allowed to proxy, beginning proxy transaction, The params are %@
The new params we will send locally are are %@
Will Send Block
Completiom Send Block of message called, 
No account found for ID: %@
%@ Remote send completion block with responseCode %ld error %@ lastCall %@
%@ calling combined completion block responseCode %ld error %@ lastCall %@
Sending server message: %@   command: %@   account: %@
Finished sending server message request response for topic %@  [%@]
Failed sending server message request response for topic %@. Result code %ld. Error %@.
device-id
(Instance) Destination device uniqueID: %@
(Instance) Default paired device uniqueID override %@   uniqueID %@
(Instance) Device uniqueID override %@   uniqueID %@
(Instance) Found matching device %@
(Instance) Didn't find matching device for uniqueID %@
(Instance) Resolved destination %@ from default paired device constant device %@.
Found deviceID %@ using primary %@
(Instance) Dest became nil while trying to split destinations.
(Instance) Split out local destinations (%@) remote destinations (%@)
Ignoring request to fallback forcedLocal %@ requireLocalWiFi %@ message %@
Overwriting previous remote failure with local success
service-disable-%@
Server has disabled service: %@, dropping this on the floor
Failing message to: %@   from: %@    invalid caller ID
OUTGOING-REMOTE_SEND:%@ SERVICE:%@
Urgent priority messages should require a response for reliability
Messages that want a response should not be fireAndForget
Disabling IDS-level ack for this message
Compressed IDS bulked payload data from:%u  to:%u
Cannot use encryption with bulked payloads!
Local protobuf data is compresed, use uncompressed protobuf data for remote delivery
Compressed protobuf serialized data from: %u  to: %u
Setting IDS payload with size: %u
Using incompatible combination of wantsEncryptedPayload and dataToEncrypt!
Setting IDS payload to be encrypted.
Registration %@   URIs %@  callerCert %@
Sending message (c = %@) %@ to filteredDestinations %@ (originally %@) for topic %@
Sending message ID (%@) using push to %@ for topic %@
This send requires %@, a lack of %@, and is interested in %@ registration properties
All courier acks have completed, informing the next layer that the message has been sent sucessfully
v16@?0@"NSNumber"8
Attempt to send a file transfer over IDS to a remote destination over File Transfer API. Only MMCS transfer is avaible at this time, uploading file
decryption-key
file-size
attach-mmcs-dict
attach-meta
Upload Complete, Here is the information, %@
 => Send completed with resultCode %ld, send error %@, lastCall %@ for displayIDs %@  messageUUID %@
Added query update hash {hash: %@, fromURI: %@, service: %@}
IDS doesn't support sending protobuf or data to rapport destinations
Registration is not active on account %@, ignoring...
Service would like to use iMessage callerID for messages
Service would like to use iMessage callerID for messages but provided their own FromID, attempting to use that instead
sendMessage { c = %@   fID = %@   fT = %@   g = %@   t = %@   tID = %@ } bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ wantsCertifiedDelivery %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
decryptMessageData length: %lu   myURI %@   fromURI %@   token %@   encryptionType %ld   completionBlock %p
Invalid encryption type -- failing {encryptionType: %@}
Only 1 account exists on this service, We will need to proxy this and include the default paired device as a destination
Found Default paired device %@ 
Comparing %@  To %@ 
These ID's are the same, We will not be proxying this message
disable-live-delivery-%@
disable-live-delivery-all
kt_loggable_data
device_signature
key_index
Multiplex
(unknown: %i)
LocalDevice
IDSRealTimeEncryptionControllerErrorDomain
ids-rtencryption-mkm-expire-duration
ids-rtencryption-mkm-roll-duration
mkmExpirationDuration
ids-rtencryption-prekey-expire-duration
ids-rtencryption-previous-prekey-expire-duration
ids-rtencryption-mkm-broadcast-enabled
enableMKMOverQR
ids-rtencryption-mkm-over-qr-enabled-v2
enabled
ids-rtencryption-mkm-ack-timeout
ids-rtencryption-prekey-req-delay-duration
com.apple.ids.realtimeencryptioncontroller
forceKeyRecoveryLogic
v16@?0@"IDSGroupMasterKeyMaterialCache"8
requestKeyMaterialForGroup %@ sessionID %@ shouldTrackDistribution %@ shouldIncludeCachedPeerKeyMaterial %@ shouldGenerateMKM: %@ requireMKM: %@ requireSKM: %@ toSepcificMembers %@ isFirstSession: %@
IDSGroupEncryptionController.m
requestKeyMaterialForGroup standardParticipantsDestinations: %lu %@
lightweightParticipantsDestinations: %lu %@
standardDestinationSet: %lu %@
givenStandardDestinations: %lu %@
lightweightDestinationSet: %lu %@
givenLightweightDestinations: %lu %@
-[IDSGroupEncryptionController resetMKMCacheAfterTimeoutForGroup:]
-[IDSGroupEncryptionController resetMKMCacheAfterTimeoutForGroup:]_block_invoke
-[IDSGroupEncryptionController resetKeyMaterialCacheTimerIfNeeded:]
_encryptionSequenceNumbers
B24@?0@8@"NSDictionary"16
v32@?0@"NSString"8@"NSMutableArray"16^B24
forceUpdateSKM
sendKeyMaterialsToGroup: requireMKM: %@, requireSKM: %@, Sent MKI %@ to URI: (%@) (pushToken: %@)(protectedMKM size: %lu)(MKM size: %lu)(message dict: %@)
ids-multiway-ftmessage-enforce-remote-timeout
v32@?0@"NSData"8@"NSDictionary"16^B24
disableSendMKMPush
sendMessage: Sent messageID %@ to the destination %@ command %@ (message: %@)
v32@?0@"NSData"8@"IDSRealTimeEncryptionIdentity"16^B24
v32@?0@"NSData"8Q16^B24
q24@?0@"IDSEndpoint"8@"IDSEndpoint"16
fanout-groupID-key
rtallmkmuri
rtmkm
rtskm
rtmpwm
@"NSData"24@?0@"NSData"8^@16
_updateLightweightParticipants: groupID: %@, previous %@, new %@
_updateLightweightParticipants: groupID: %@, added diff %@, removed diff %@
_updateLightweightParticipants - Sending the stable key material to %@ of the group %@ (pending participants %@)
_updateStandardParticipants: groupID: %@, previous %@, new %@
_updateStandardParticipants: groupID: %@, added diff %@, removed diff %@
_updateStandardParticipants - Sending the key material to %@ of the group %@ (pending participants %@)
accessory-ids
admin-id
id-get-consent-token
consent-tokens
SELECT ROWID, data_protection_class, guid, alternate_guid FROM outgoing_messages_to_delete;
data_protection_class
DELETE FROM outgoing_messages_to_delete WHERE ROWID <= ?;
@16@?0@"NSArray"8
    %@  %@
IDS-DB-List
/Library/IdentityServices/files/
outgoing_messages_to_delete
Unexpected datatype. %@ should be of type %@, not %@
Add overflow, dataSize: %lu, kIDSQRAllocateKey_RecipientPushToken length: %lu
Add overflow, dataSize: %lu, kIDSQRAllocateKey_RecipientSessionToken length: %lu
Add overflow, dataSize: %lu, kIDSQRAllocateKey_RecipientURI length: %lu
Add overflow, dataSize: %lu, recipient's kIDSQRAllocateKey_RecipientPushToken length: %lu
Add overflow, dataSize: %lu, recipient's kIDSQRAllocateKey_RecipientSessionToken length: %lu
Add overflow, dataSize: %lu, recipient's kIDSQRAllocateKey_RecipientURI length: %lu
%@:requestID = %@, IDSSessionID = %@ relaySessionID = %@
testOptions changed to: %@
We have exceeded the maximum queue size, dropping message %@
LocalDeliveryQueue
Force dequeuing message %@ (should be manual: %@)
Couldn't construct a socketPairMessage for message %@ topic %@ command %@ - discarding
Starting outgoing network availability check for session %@
Overriding network availability check result! { session: %@, overrideBehavior: %ld }
Bypassing network availability check for incoming session from default paired device { session: %@ }
Network availability check: including WiFi availability
Network availability check: allowing WiFi hotspot
Network availability check: including cellular availability
Time since lights on: %f
Starting availability check with network timeout: %fs   wifi timeout: %fs   flags: %lu   options: %lu
QuickRelay is enabled, skip connection check.
Finished connectivity check with error %@
Failed creating local data, bailing...
SessionUseQRDirectly
inbox.appleid.apple.com
At least one destination is mako {destinationURI: %@, uniqueID: %{public}@, destinations: %@}
phone_enableQR
useBTDatagramPipe
QuickRelay is disabled for service: %@, session: %@.
 (U+1)
QuickRelay is enabled for service: %@%@, session: %@.
Created local unauthenticated full identity {fullIdentity: %{private}@}
Failed to create full identity for unauthenticated destination {destinations: %{private}@}
Failed to create session because failed to create unauthenticated public identity even though key was present
SessionInviteTimeout
Setting connection timeout to %f seconds
SessionConnectionTimeout
EndSessionTimeout
allocateOptions
Failed to create unauthenticated public identity from data becuase data is nil
Failed to create unauthenticated public identity from data {error: %{public}@, data: %{private}@}
B16@?0@"IDSValidationQueueItem"8
q24@?0@"IDSDAccount"8@"IDSDAccount"16
IDSDaemonMIGQueryInterface
Selecting account {forOutsideiCloudMessaging: %@, iCloudUsableForOutside: %@}
Selected local account
Selected account {registeredAccount: %@}
%@ _callStateChanged - no longer on a call, processing %lu pending queries!
%@ - on a call and wifi isn't usable, enqueuing query to avoid mRAB
%@ - too many enqueued queries, dropping this one
%@ - we're on a call but the network is usable, processing query immediately (Usable WiFi: %@)
%@ - we're not on a call or wifi is usable, processing query immediately (Usable WiFi: %@)
Accepting Incoming Grant Query Requests
IDSDaemonMIGQueryInterface auth port died: %@
IDSDaemonMIGQueryInterface: Could not create server with name: %@
service-cache-request
cached-id-status-query
id-status-query
set-id-status
remote-device-status-query
id-status-info-query
Unknown message from peer: (%d):(%@) %s
received unknown from peer(%d):(%@) %s
Could not create reply message for cache request
transactionID
*** Incoming cache query for (service: %@) (transactionID: %@)
Current cache: %d count
cache
Incoming cache query, but %d is not entitled to access the cache
Could not create reply message for cached id status query
respect-expiry
*** Incoming cached ID status query for (respectExpiry: %@)  (service: %@)  (transactionID: %@)  (destinations: %@)
No registered account for service %@, bailing...
No fromURI for account %@
Account: %@  fromURI: %@
Looking up cached value for %@ -> %@
Sending id status results %@
__HandleIDStatusQuery - enqueuing
is-springboard
force
bypass-limit
*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)  (force: %@) (bypass limit: %@)
Found service %@ for serviceName %@
No registered account for service %@
Using %@ from %@ to perform id query.
No URIs or cert after filtering destinations %@, bailing...
Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (error: %@) - replyMessage? %@
client-query-max-per-uri
client-query-max-time-range
Tried forcing, however this destination is not under the limit {destString: %@, rateLimiter: %@}
vc-disable-springboard-queries
No registered account for service after if %@, bailing...
*** Incoming ID status update, from un-entitled proess: %d
destination
*** Incoming ID status update: %d  (service: %@)  (destination: %@)
email:myself
__HandleRemoteDeviceQuery - enqueuing
disallow-query
*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)
__HandleIDInfoQuery - enqueuing
info-types
id-info-options
Failed to load persistent cache data from keychainWrapper {error: %{public}@, identifier: %{public}@, keychainWrapper: %{public}@}
Failed to save persistent cache data to keychainWrapper {error: %{public}@, identifier: %{public}@, data: %{private}@, keychainWrapper: %{public}@}
Tried to purge before available -- returning {self: %@}
/Library/IdentityServices/Persistence/
%@-aesKey
Failed To load key -- returning nil {error: %@, keyIdentifier: %@}
CCCrypt failed -- purging && returning nil {cryptResult: %d}
Failed To remove file {error: %@, path: %@}
Failed To Generate IV {ivResult: %d}
Failed to get a stored key, generating a new key {error: %@, result: %@}
Failed To Generate key {keyResult: %d}
Failed to save key -- returning {keySaveError: %@}
Failed to purge stored key {removeError: %@}
persister-migration-%@
<%@: %p; origin = %@; destination = %@>
GUID %@ Tokens for URI:
IDSMadridEndpointFilterComponent.m
GUID %@ Skipped Destinations:
{ URIs: %@, fromID: %@, service: %@, fromIdentity: %@, alwaysSkipSelf: %@, disallowQueryRefresh: %@, sendOnePerToken: %@, registrationProperties: %@, maxSize: %lu, wantsDeliveryStatus: %@, wantsCertifiedDelivery: %@, wantsFirewallDonation: %@, messageToSend: %@ }
Done with IDSIncomingMessageRecordAddMessageRecord, lets update Spotlight with this message record.
IDSIncomingMessageRecordAddMessageRecordDedup %@
SELECT ROWID, guid, topic, from_id, message_data, date, is_local, message_identifier FROM incoming_message WHERE message_identifier = ? 
Done with IDSIncomingMessageRecordAddMessageRecordDedup, lets update Spotlight with this message record.
IDSIncomingMessageRecord
IDSIncomingMessageRecordAddMessageRecordDedup deduped message with identifier %@. Will use storage guid %@
Setting IDSIncomingMessage property %d of %d
SELECT topic, count(ROWID) FROM incoming_message GROUP BY topic
SELECT ROWID, guid, topic, from_id, message_data, date, is_local, message_identifier FROM incoming_message WHERE is_local = ? ORDER BY ROWID DESC LIMIT ?
IDSIncomingMessageRecordDeleteMessageForGUID %@
SELECT ROWID, guid, topic, from_id, message_data, date, is_local, message_identifier FROM incoming_message WHERE guid = ? ORDER BY ROWID ASC;
IDSIncomingMessageRecordDeleteMessagesOlderThanThreshold %lld
DELETE FROM incoming_message WHERE date < ? LIMIT ?; 
void IDSIncomingMessageRecordBulkCopy(IDSIncomingMessageRecordRef, int64_t *, CFStringRef *, CFStringRef *, CFStringRef *, CFDataRef *, int64_t *, BOOL *, IDSDatabase *__strong)
from_id
is_local
message_identifier
incoming_message
<IDSIncomingMessageRecord %p [%p]>{}
_IDSIncomingMessageRecordCreate()
com.apple.private.imcore.spi.database-access
@16@?0@"IDSPhoneSubscription"8
personal-session-token-cache
personal-session-token-cache-v1
personal-session-token-cache-v2
personal-session-token-cache-v3
personal-session-token-cache-v4
session-tokens
push-tokens
dates-expire
dates-refresh
anonymized-sender-ids
session-token
session-token-expires-seconds
session-token-refresh-seconds
anonymized-sender-id
biz-trusted
kt-mismatch-account-flag
ktbility
peer-id-manager-cleanup-interval
vc-disaster-sender-self-tokens
ForceSelfTokens
***** Forcing self tokens mode *****
Failed to remove peerIDCache v0 {error: %{public}@}
Failed to remove peerIDCache v1 {error: %{public}@}
Failed to remove peerIDCache v2 {error: %{public}@}
Failed to remove peerIDCache v3 {error: %{public}@}
PeerIDManager
Migrated Peer ID persistent map {oldVersionNumber: %ld}
Query cache:
Key: <%{public}@,from:%{private}@,to:%{private}@>
        URI: %@
        Push token: %@
        Session token: %@
        Expire: %@
        Refresh: %@
        Public Key: %@
IDS-list
PeerLookup
   Using disaster mode token for URI: %@   token: %@
   Setting disaster mode token for URI: %@   token: %@
_disasterModeTokens
identities
sender-correlation-identifier
Found identity:
GameCenter data: AssociationID: %@, SharingState: %@, LastUpdatedDate: %@
              device pushToken: %@
                 session token: %@
                           uri: %@
 sender-correlation-identifier: %@
                    clientData: %@
                   device-name: %@
           private-device-data: %@
              kt-loggable-data: %@
                kt-account-key: %@
          device-key-signature: %@
      kt-mismatch-account-flag: %@
               kt-capable-flag: %@
                    showErrors: %@
   No known public key found for token: %@
   No known iMessage public key found for token, skipping this identity: %@
   No known push token found, ignoring
IDSIDRefreshExpiry
IDSIDHardExpiry
                    Overwriting soft TTL with: %ld seconds
                    Overwriting hard TTL with: %ld seconds
   TTL for Service: %@, Uri: %@, refresh: %@, expires: %@,
Returning disaster mode token for from URI: %@   token: %@
B16@?0@"IDSEndpoint"8
Found %@ value: %@  for peer token: %@
** No %@ value found for peer token: %@
URI %@ didn't have remote devices.
URI %@ didn't have a verification request id
** At least one session token expired for: %@, need to get new ones
B16@?0@"IDSPeerIDKey"8
v64@?0@"NSString"8@"NSArray"16@"NSArray"24@"NSDictionary"32@"NSString"40B48@"NSDictionary"52B60
Checking peer token: %@ for URI: %@   (Tokens: %@)
  => We don't have it - clearing that peer's map
Not flushing tokens, we're in debilitated mode
  => Good to go, we have it
Clearing peer and personal caches
Not forgetting tokens, we're in debilitated mode
Forgetting session tokens for URI: %@  from URI: %@  service: %@
Forgetting peer tokens for URI: %@  from URI: %@  service: %@
Forgetting peer tokens for service {service: %@, keys: %@}
Active query for service: %@  from: %@  peers: %@
  Active sessions for: %@, adding...
  Expired session for: %@, skipping...
Empty token for client data update block
Empty client data update block for token: %@
Empty token for removing client data update block
Empty token for purge client data block
Empty purge client data block for token: %@
Empty token for removing purge client data block
Missing context for adding endpoint query completion block -- ignoring request {block: %@, token: %@, queue: %@}
Missing context for removing endpoint query completion block -- ignoring request {token: %@}
Missing context for endpoint request -- returning nil {URIs: %@, serviceIdentifier: %@, localURI: %@, completion: %@, queue: %@}
account
suspendWait
connectionContext
%@/%@/%@
UTunController
%@ returning serviceConnectorServiceForAccountString=%@._account=%@;_service=%@;_name=%@
IDSGenericConnectionID[%@,%@,%@] @%p (%lu)
local[%@] remote[%@]
%u:::%u
-[IDSGenericConnection initWithConnectionID:protocol:keyMaterialLength:isCloudEnabled:]
IDSUTunController.m
0 == SecRandomCopyBytes(kSecRandomDefault, keyMaterialLength, _localKeyMaterial)
TCP info (%u) tcpi_snd_nxt:%08x tcpi_rcv_nxt:%08x (connection: in:%08x out:%08x)
<IDSGenericConnection: id[%@] ports[%@] localGUID[%@] remoteGUID[%@] clientID[%@] proto[%d] sd[%d,%d,%d] error[%@] comp_state[%d] localContext[%d,%p] remoteContext[%d,%p] ( %s%s%s%s%s%s%s%s%s%s%s) (CT:%0.6lf) tcp[%@], readHandler: %p>
opened 
handler-called 
control-sent 
control-received 
reset-sent 
reset-received 
sent-pkt 
received-pkt 
received-data 
canceled 
encryption-enabled 
( %s%s%s%s%s%s)
IDSUTunController
problem: %@ is going to use the main queue.
%@ called nw_service_connector_cancel_active_connection
%@ cannot cancel service connector for connection._serviceConnector=%@;_defaultPairedDeviceEndpoint=%@;serviceConnectionServiceString=%@
Invalidating IDSGenericConnection %@
Cleanup: %@
IDSUTun
collectAllUTunSocketStall
%p %@ Stall detected [%@].
IDSGenericConnection
IDS detected the single UTun socket stall. Please file a bug "Transport|all", and attach a sysdiagnose and the contents of /Library/Logs/CrashReporter from both devices.
2020-01-01
UTun Socket Stall
UTun Socket stall
%p %@ Stall detected [%@] - only netdiagnose
%p %@ Stall detected [%@] - netdiagnose & simulate crash
%p %@ Stall warning [%@]
%p Created the stall detector %@
initWithReadHandler: readHandler: %p, self: %p
 o              [%013.06lf] %18.09f%18.09f%18.09f%18.09f%18ld
 i              [%013.06lf] %18.09f%18.09f%18.09f%18.09f%18ld
 k              [%013.06lf] %18s%18s%18s%18.09f%18ld
com.apple.ids.utuntiminglogger
                [  timestamp  ]        total-time   processing-time  compression-only            kernel             bytes 
customTest
networkingLogDumpFlags
Test
Custom Test 5
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IDSAgent/IDSUTunController.m
2017-01-01
CustomTest6
Custom Test 6
Message to pop up for testing
kUTunConnectionDefaultUrgentOutgoingDetectorName
TestTrigger
ControlChannelAvoidMainQueue
v40@?0@"NSString"8@"<NSObject>"16^B24^B32
kUTunConnectionControlChannelOutgoingDetectorName
UTunDelivery-Default-Urgent
UTunDelivery-Default-Default
kUTunConnectionDefaultDefaultOutgoingDetectorName
 ...
UTun-oversized
%@: created mapping [%@ / %@] <=> [%@] (selfInstanceID[%s] %@)
Cloud
61314
61315
UTunController dup() failed
connect ready for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]
This connection %@ has already been invalidated. Calling _closeSockets.
%@: Connection (%@) was invalidated.
connection event %s for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]
serviceConnection (%p) not same as existing serviceConnection (%p) for genericConnection %@
%@: nw_connection %@ in bad state %s
%@: nw_connection %@ canceled
no error
connect ready for {socket:%d} (ports[%@]), socket error: %d (%s), connection[%@], device[%{public}@]
%@: socket failed (errno=%d)
%@: openSocketCompletionHandler dispatch time %0.6lf seconds
openSocket was never called on connection (%@) within %@ seconds of starting it.  Kill the connection!
openSocket was never called, closing connection
failed to create udp connection for %@
IPsecLink
v28@?0B8@12^B20
%p: control channel got message %@ device conn info:%@
v32@?0@"NSData"8B16B20B24B28
ids multiplex ipsec queue
enableSkywalkStat
kern.skywalk.ring_stat_enable
v24@?0@"NSObject<OS_nw_connection>"8^{__CFError=}16
disableControlChannelLoopFix
ids-control-channel
legacy control channel connect ready {socket:%d}, socket error: %d (%s), device[%{public}@]
resetting all connections
Decryption failure: %u
device %@: socket() failed: errno=%d: %s
UTunController internalOpenSocketWithDestination socket() failed
device %@: can't bind to [%@ @ scopeid=%d]: errno=%d: %s
device %@: can't connect to %@: errno=%d: %s
%@: UTCMType_SetupChannel cannot decode remoteConnectionGUID
%@: UTCMType_SetupChannel cannot decode account
%@: UTCMType_SetupChannel cannot decode service
%@: UTCMType_SetupChannel cannot decode name
%@: got control message: setup channel proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
stale connection
%@: SetupEncryptedChannel cannot decode remoteConnectionGUID
%@: SetupEncryptedChannel cannot decode account
%@: SetupEncryptedChannel cannot decode service
%@: SetupEncryptedChannel cannot decode name
%@: got control message: setup encrypted channel ssrc:%08x startSeq:%04x proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
%@: got control message: close channel localConnectionGUID[%@] remoteConnectionGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
remote close
%@: reset control channel didReceiveReestablishmentRequest NO
com.apple.private.alloy.fignero
com.apple.private.alloy.willow.proxy
UTunSocketProtocolOverride
completionHandlerQueue
completionHandler
replace existing connection
%@: setting up new connection [%@] for ID [%@] deviceInfo[%@]
%@: openSocketWithOptions unable to allocate new port - cannot continue
closeSocketWithOptions called
%@: openSocketWithOptions called for default paired device but no connectionInfo - cannot continue
%@: openSocketWithOptions unable to create new device - cannot continue
%@: scheduled openSocketWithOptions attempt canceled - closeSocket called
%@: openSocketWithOptions attempt canceled - possibly obliteration
Device %@: utun cleaning up device connection for clientID: %@
utun cleaning up device connection info: %@, clientID: %@, connection for service %@
Cleaning up all connections for service
-[IDSUTunController onTransportThread_PerServiceDataTransferredForDevice:services:]
%s: reporting service stats %@
-[IDSUTunController perServiceDataTransferredForDevice:services:]
-[IDSUTunController perServiceDataSentForDevice:services:]
-[IDSUTunController perServiceDataReceivedForDevice:services:]
<null>
UTunController changeInterfaceAvailability socket() failed
[throughput] Now cannot send to device %@
forRefresh
vc-disaster-sender-max-retries
vc-disaster-receiver-retry-interval
id-query-bad-signature-retry-enabled
id-query-bad-signature-retry-interval
id-query-bad-signature-retry-number
DebiliatedMode
***** Forcing debiliated mode *****
com.apple.madrid-lookup
Bag loaded notification! Is in backoff mode changed to %@
iMessage Debilitated Mode
iMessage server has %@ debilitated mode.
entered
left
No block supplied, but is this the first query: %@
First query, but not allowed to start: %@ %@
Adding queued query for URIs: %@   fromURI: %@  service: %@   forRefresh: %@ preventNew: %@ first query: %@
Removing queued query for URIs: %@   fromURI: %@  service: %@ URIs set found in completion block map: %@
URIs
FromIdentity
FromURI
FromService
ForSending
ForMessaging
ResultExpected
IsForced
  *** failing query for URIs: %@    cert: %@   fromURI: %@   fromService: %@
%@ enqueuing work %@. Current queue size is %lu
%@ uh-oh! Our queue is too long %lu. Dropping id query for URIs %@ fromService %@ fromURI %@
Asked to _dequeuePendingQueryIfPossible but we have no queued queries
Tried to _dequeuePendingQueryIfPossible but we currently have %lu in-flight queries
Starting ID query for IDs: %@    from URI: %@   Service: %@
       Identity: %@
               Skipping URI: %@   => already have tokens   (From: %@   Service: %@)
******** Found sentinel alias as from URI: %@, failing *********
******** Found invalid from URI: %@, failing *********
******** Found sentinel alias in query set: %@, failing *********
******** Found malformed email in query set: %@, failing *********
******** Found bad URI type in query set: %@ (%ld), failing *********
******** URI %@ is an emergency number, not performing query ********
******** Not querying URI %@ service is over budget, not performing query ********
The requestedURIsToQuery have already been covered by previous queries! -- Returning {success: %@, checked: %@, requested: %@}
com.apple.ids.query
Service wants to force HTTP queries, setting importance level lower to ensure it doesnt use APS
forceHTTPQueries
*** We are currently forcing HTTP queries due to a default; remove default to re-enable QORP!
The Query Service Is %@
IDSPeerIDLookup
overrideQueryResponseCode
queryCodeOverride
Response identities is not what we expected (%@ instead of NSDictionary) %@, error %@, resultCode %ld
Query completed with error %@. isNetworkError? %@ numNetworkFailures %d
Time is off, considering this an invalid result
Chat
Query time was: %f  (URIs: %@) (service: %@) (fromURI: %@)
uriToError
not 
 We are %@in backoff mode.
 We are %@in self session mode.
 **** We are in backoff mode! Using override for maxRetries %d
Looked up %@   success: %@   error: %@   will retry: %@   retries: %d  tried force cell: %@
               Success: %@
    Found identity for: %lu/%lu
  Tried Force Cellular: %@
Query Time: %f
            Query Time: %f
                  URIs: %@
    responseIdentities: %@
                 error: %@
           shouldRetry: %@   retries: %d   wasOffline: %@
            maxRetries: %d
         Timestamp off: %@
 Max Query Interval: %f
   Query Multiplier: %f
 Base Retry Interval: %f
      Retry Interval: %f
 **** We are in backoff mode! Overriding retry interval %f
 ** Will retry in: %f
 => Retrying query for URIs: %@
  All done query set for: %@   success: %@  allNetworkFailures: %@  entirelyOffline: %@
 **** Every failure was a network failure - forcing the bag to reload
negative-cache-ttl-seconds
  Sending off query for URIs: %@  from URI: %@   service: %@
 ** WiFi link quality is not good, requesting cellular preferred
 => Sending query for URIs: %@  from URI: %@   service: %@
Empty token for completion block
Empty completion block for token: %@
Empty token for removing completion block
%@,%@,%d
We have suffered %ld network failures. Forcing the server bag to reload.
MMCSUploadErrorKey
Failed to write wrapped data { error: %@, randomFileName: %@, data: %@ }
Failed uploading attachment file transfer (failed post-upload encryption)
Failed uploading attachment file transfer (failed upload)
Failed uploading attachment file transfer (could not generate file)
sync_topics_allowed_to_send_immediately
nonurgent_internet_send_interval
nonurgent_internet_send_interval_max_fuzz
*** Over budget, failing sendMessage on service: %@
com.apple.private.alloy.bulletinboard
com.apple.private.alloy.keychainsync
Forcing encryption off for message on %@
Updating listener on %@ willSendToDestinations %@ skipped %@ regPropToDest %@
Updating listener on %@ with responseCode %ld error %@  lastCall %@ - messageContext %@
Silently failing %@ messages due to watch switch
ServerTimeStamps before broadcast is  %f
ServerDate before broadcast is  %@
Found no valid broadcaster for outgoing message %@, cleaning up
account %@ sendMessage with data size: %d to: %@ identifier: %@ guid: %@
account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@
Exception caught forwarding to account: %@
Deleting sent outgoing message with guid %@ after exception
sendMessage - fromID (%@) does not match the account (%@). We are forced to fail this message send.
adhoc type 2
not local type
Daemon sending message with priority %{public}@ guid: %{public}@ identifier %{public}@ to: %@   from: %@   aliases: %@  service type: %{public}@   QoS=0x%x
Proxy outgoing message, setting current paired device as local destination
sendMessage - sending to tinker IDSDefaultPairedDevice. Failing message... { guid: %@, service: %@ }
Default paired watch is Tinker, but sending service is not Tinker aware. If you need to send locally to a Tinker watch, please contact IDS Engineering to have your service reconfigured
Sending message {defaultDestination: %@, messageType: %@, serviceIdentifier: %@}
Didn't find message store for data protection class %@ for %@
Data protection class %@ is unavailable for %@, failing outgoing message
com.apple.ids.trafficclass.nanoregistry.check
com.apple.ids.trafficclass.nanoregistry.configure
com.apple.ids.trafficclass.nanoregistry.update
Telling clients (via IDSResponsePersisted) not to replay this message if the daemon crashes because the %@ priority queue (dataProtectionClass: %@) is full
file persistence - failed to create unique file directory %@ error %@
No sandbox extension for received resource [%@]
file persistence - moved file %@ => %@
file persistence - failed to move file %@ => %@ params %@
This local Message is not for the current device, sending to the database to be taken care of later
A over C encryption has failed to encrypt with error %ld
Store outgoing message {guid: %@, canSendUrgent: %@, forceImmediateSend: %@, hasSpecialTrafficClass: %@}
Persisting message failed guid: %@  params: %@, failing with IDSResponseDataProtectionClassUnavailable
Sending a non-urgent sync message as we have a go ahead based on the server policy
account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@ - non-urgent message has been persisted.
Non-urgent message send %@ will be maintained by us from now on, alerting sender that it's been persisted and scheduled for sending.
message %@ on service %@
Notifying client IDSResponsePersisted(%d) for %@ id %@ alt %@
(Messaging2) No account found for ID: %@
v24@?0@"NSString"8B16B20
_sendLocalDeliveryMessagesForAccountUUID called with no accountUUID.
No space in local delivery queues for messages with priority %@ dataProtectionClass %@, bailing.
Performing query for account UUID %@ priority %@ class %@ Local Device ID %@ 
Got %lu query messages
account %@ _sendLocalDeliveryMessagesForAccountUUID with data size: %d to: %@ identifier: %@ guid: %@
account %@ _sendLocalDeliveryMessagesForAccountUUID: %@ to: %@ identifier: %@ guid: %@
Deleting sent outgoing non-urgent local message with guid %@? %@
Silently failing message with guid %@ due to it being a proxy 
Broadcasting failure of outgoing message %@ that never got processed through the database
Beginning cleanup of outgoing message database
Cleaned up %lu expired messages
IDS outgoing DB past threshold size %d MB, largest payload size account UUID: %@
Ending cleanup of outgoing message database
Runaway Client Detected, Purging messages for given client
max-ids-database-size
max-ids-database-client-enqueued
Beginning cleanup of outgoing message database for quickswitched messages
Ending cleanup of outgoing message database for quickswitched messages
Beginning cleanup of outgoing message database for messages older than 2 days past enqueue date
pendingMessageTimeout
Using Time Interval %f
Ending cleanup of %lu outgoing message database for older than 2 days past enqueue date
Registering for Checkpointing and Vacuum
com.apple.ids.dbvacuum
Told to Check In for Checkpointing and Vacuum with activity %@ 
Got called to checkpoint vacuum DB run state with non null activity %@
*** Over budget, failing sendMessage on account: %@
sendServerMessage updated with responseCode %ld error %@  lastCall %@ - messageContext %@
Daemon Attempting To Send message from account %@ to destinations %@
Attempting to send to more than 1 destination, if this is not possible, this will fail further down the daemon
IDSService
This service supports proxy delivery, which means a local account is allowed to send to a remote destination, allowing this message to send
This service supports sending messages to an inactive device, it is allowed to proceed
Looking at local destination %@
The paired device push token is %@
The paired device UUID is %@
Tried to send opportunistic data without entitlement {localObject: %@, uniqueID: %@}
Received data %@ to be cached and sent opportunistically on service %@
Tried to cancel opportunistic data without entitlement {localObject: %@, identifier: %@}
Cancel opportunistic send {identifier: %@, serviceName: %@}
%li Drop point detected.
Sender's IDSDaemon will drop message.
Daemon received signData request {requestID: %@, data: %@, algo: %ld, service: %@, options: %@}
Daemon dropping request %@ because it is missing required parameter
Daemon dropping request %@ because unentitled
Daemon dropping request %@ because it has a mismatched signing algorithm %ld and key type %ld
Finished signing request... broadcasting { request: %@, signedData: %@, error: %@ }
Daemon received verifySignedData request {requestID: %@, signedData: %@, data: %@, algo: %ld, service: %@, uri: %@, options: %@}
Daemon dropping request %@ because it is not a token URI
Daemon dropping request %@ because it has a mismatched verification algorithm %ld and key type %ld
Daemon dropping request %@ because tokenURI malformed
Daemon dropping request %@ because we are not registered
Finished signing verification request... broadcasting { request: %@, verified: %@, error: %@ }
Message has been dropped at point IDSMessageDropPointDaemon { messageID: %@, type: %@, accountID: %@, fromID: %@ }
(Messaging1) No account found for ID: %@
Client is attempting to send a message under first data protection lock, failing message
Sending Internet IDS Messages before first unlock is no longer supported. Please contact the IDS & Privacy teams to discuss further
Result of can send message with account was no
Destination device is not active for this account
Attempting to send to a local device using modern addressing, however we are not a local account, Swapping out destination for internet style addressing
Cloud destination could not be formed { destination: %@, token: %@, topic: %@, identities: %@ }
FamilyDrop_UnboundPhoneNumber
Sender phone number is not bound to account AppleID.
Switching to using local account since it has the alias corresponding to the fromID: %@
subServiceName %@ subServiceUUID %@
Couldn't find sub-account for service name %@
**** IDSDaemon: Urgent priority messaging requires entitlement for %@, DOWNGRADING MESSAGE PRIORITY TO DEFAULT - violator %@ ****
Client has specified a priority we do not recognize: %lu. Perpetrator: %@. Forcing default priority.
Added query update hash to certified delivery receipt {certifiedDeliveryReceipt: %p, hash: %@, fromURI: %@, service: %@}
sendCertifiedDeliveryReceipt - { certifiedDeliveryContext: %@ }
sendErrorMessage - finding Account
(Messaging) No account found for ID: %@
sendErrorMessage - got account %@
sendErrorMessage - using fromID %@ given aliases %@
account %@ sendErrorMessage: %@ to: %@ - guid %@
Sent outgoing error message with guid %@. Last call? %@
No certified delivery RTS found in payload with cdv { guid: %@, cdv: %ld }
start OTR test for %@
Completed forced OTR negotiation: token is %@, setupTime is %.6f, error==nil is %d
v32@?0@"NSString"8d16@"NSError"24
clean up existing QuickRelay connection for cloud messaging
start a new QuickRelay connection for cloud messaging
Account: %@ does not have alias URI: %@
Finished sending engram decryption failure {responseError: %@, token: %@}
** Failed sending engram decryption failure {responseError: %@, token: %@}
Alerted that local delivery controller now has space for %@ messages at class %@.
Alerted that local delivery controller now has space for %@ messages.
Resource availability changed, identifiers: %@ priorities %@
No space in local delivery queues for these messages.
AccountUUIDs with pending %@ messages %@
_processLocalMessagesWithAccountUUIDs with number of accountUUIDs %d priority %@ class %@
_processLocalMessagesWithAccountUUIDs accountUUIDs %@ priority %@ class %@
No pending non-urgent local messages to send, returning
Skipping invalid accountUUID %@ for account %@
non-urgent
Performing duet check for priority %@ for account %@ serviceIdentifier %@ duetIdentifiers %@ bypassDuet %@  logString: %@
Non-urgent internet send timer fired.
Scheduling a non-urgent internet send timer if needed. Existing timer fire date? %@
timeInterval for _nonUrgentInternetSendTimer as %f + %f = %f
Checking _hasNonUrgentInternetSendingBudget, fireDate is %@, %f
Last non-urgent internet send was too recent...waiting until next lock or non-urgent internet send to try again. Next fire date is %@.
md-low-priority-send-window-constraints
Non-urgent internet send probability windows are not specified in the server bag - returning 1.0
Non-urgent internet send probability windows is not of the correct type! Returning probability = 1.0. %@
Non-urgent internet send probability window is not of the correct type! %@
start-time
end-time
probability
We are currently in send window (%@, %@, %@). The time is currently %ld
Last non-urgent internet message attempt %ld is in this window - forcing probability to 0.0
Non-urgent internet send probability window is not fully defined: (%@, %@, %@)
Using non-urgent internet send probability %f for the current window.
Rolling die to attempt non-urgent internet send. Last check was %ld seconds ago. Probability = %f.
Probability is 0, cannot send.
Probability is >= 1, can send.
Rolled the die - can send? %@
_canSendNonUrgentInternetMessageForTopic 
Push is not connected - skipping send attempt.
We can't send further non-urgent internet messages in this window, skipping.
Server Bag policy for sending message immediately for topic - %@ does not exist. This message will proceed with default behavior
_processOutgoingNonUrgentInternetMessages
Lack budget to perform non-urgent internet send, skipping.
Processing stored %lu non-urgent internet outgoing messages
Not combining encrypted message - %@
Reduced outgoing non-urgent internet messages from %lu to %lu (omitted %lu).
sendNonUrgentInternetMessage - finding Account
Deleting non-urgent internet outgoing message with guid %@
Deleting non-urgent internet outgoing combinedMessage with guid %@
No account found for ID: %@ - can't send %@
sendNonUrgentInternetMessage - got account %@
Sending individual non-urgent internet message %@
Deleting sent non-urgent internet outgoing sole message with guid %@? %@. Error? %@ response code %ld
v16@?0@"IDSDOutgoingMessage"8
account %@ sendNonUrgentInternetMessage: bulked: %lu to: %@ identifier: %@ guid: %@
Deleting sent non-urgent internet message with guid %@? %@. Error? %@ response code %ld
ec-%@-%ld legacy-%@-%ld
ec-%@-%ld
legacy-%@-%ld
mailto:support@apple.com
mailto:info@apple.com
mailto:alert@apple.com
.apple.com
disable-message-checkpointing
MessageCheckpointing
At checkpoint %ld for guid %@. Wants checkpointing %@ disabled by bag key %@
topLevelPayload
Incoming message for topic: %@  but no service found
No account found for topic: %@   toURI: %@
Noting peer token {shouldNoteToken: %@, token: %@, service: %@, fromIdentifier: %@}
Decrypting message %@ of encryption type "%@"
NGMDebug
EC message came in, processing metric {ECSuccess: %@, legacySuccess: %@, command: %@}
Blowing away local peer cache for peer tokens for URI: %@
Retrying decryption for message %@ in %f seconds
** Had decryption error: %d { guid: %@, error: %@ }
Finished sending decryption error: %d, %@  to token: %@
** Failed sending decryption error: %d, %@ to token: %@
Incoming message attachment data: %p ID: %@  from: %@ fromMe: %@
EC overflow message came in, processing metric {ECSuccess: %@, legacySuccess: %@, command: %@}
Finished sending decryption error: %d %@ to token: %@
** Failed sending decryption error: %d %@ to token: %@
messageDictionary: %@
 => Settled on signature: %@
 => Missing fields from dictionary, returning error
Finished sending download (bad field) error: %d %@ to token: %@
** Failed sending download (bad field) error: %d %@ to token: %@
Attachment data download updated to %lld of %lld (%lld bps)
retrieved message data for incoming attachent message
Failed to grab message data for message ID: %@ from: %@ error %@
v44@?0@"NSString"8@"NSString"16B24@"NSError"28@"NSString"36
IDS-receive-%@
IncomingPacketAssertionShortTimer
INCOMING-LOCAL_DELIVERY:%@ SERVICE:%@ didWakeHint:%d
Broadcast: Processing incoming local message storage guid %@ real message guid %@ topic %@ command %@ didWakeHint %d
-[IDSDaemon(Messaging) _processIncomingLocalMessage:topic:command:deviceID:btUUID:context:storedGUID:priority:connectionType:didWakeHint:]
%s: could not find IDSServiceProperties for topic %@
IDSDeviceDidWakeHintTopic
IDSDeviceDidWakeHintGUID
IDS Local Message Received
Found sender correlation identifier { guid: %@, senderCorrelationIdentifier: %@, fromID: %@, token: %@ }
The Account Was %@
pair
The message that will be broadcast is %@
Proxy message original parameters {messageUUID: %@, destinations: %@, targettingAccount: %@}
Will Send Block After Send
Message Send After Transposing
Incoming proxy nice message for broadcast
Received local proxy message %@ is a duplicate. Ignoring.
PROXY BROADCASTING BLOCK %@ Guid %@ Topic %@ ToID %@ fromID %@
%s: Unknown incoming local message type received, %lu
Broadcast: incoming local message %@ requires client ack, broadcast ID %lld
Processing stored incoming local message %@ topic %@
IDSIncomingLocalMessageService
IDSIncomingLocalMessageDeviceID
IDSIncomingLocalMessageBTUUID
IDSIncomingLocalMessageCommand
IDSIncomingLocalMessagePayload
IDSIncomingLocalMessageContext
Using fromID for this message as %@
We failed to decrypt class A data on a class C service even when we had keys, Please collect logs and file a bug: Original Command: %@ From Device: %@ Service: %@ GUID: %@
AoverC
Class A key not avaialble for message %@ on topic %@
-[IDSDaemon(Messaging) _processStoredIncomingLocalMessages]
-[IDSDaemon(Messaging) _processStoredIncomingRemoteMessagesWithGUIDs:ignoringGUIDs:lastTimeInterval:]
%s: GUIDs count %lu
q24@?0@"IDSDIncomingMessage"8@"IDSDIncomingMessage"16
Processing %lu stored incoming remote messages {shouldRepeat %@}
 => Deferring message, service wants messages after first unlock only
Finished processing stored incoming messages
Processing stored %lu outgoing messages due to unpairing. Priority %@
Found stored outgoing message from account with guid %@ which no longer exists or is not local type.
Finished processing stored outgoing messages due to unpairing. Priority %@
Revision lock forced failure
Destination device has unpaired
Processing stored outgoing urgent messages LocalOnly: %@
Processing stored %lu outgoing urgent priority messages
Found stored outgoing message from account with guid %@ which no longer exists.
account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for with data size: %d to: %@ identifier: %@ guid: %@
account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for message: %@ to: %@ identifier: %@ guid: %@
Deleting sent outgoing urgent message with guid %@? %@
Old outgoing message %@ has no relevant account, cleaning up.
Finished processing stored outgoing messages
Handling Space Becoming available for urgent local messages
Processing Error
 => Empty message for message ID: %@
 => No error!?
 => OTR un-supported error for messageID: %@
 => Remote encryption credentials are invalid failure for messageID: %@
 => Remote identity encryption failure for messageID: %@
 => Remote Identity decryption failure for messageID: %@
 => Pair decryption failure for messageID: %@
 => Silient Pair decryption failure for messageID: %@
 => Pair encryption failure for messageID: %@
 => Remote attachment download failure for messageID: %@
IDSLogLevelLow
Noted decryption failure for engram group {group: %@, noteError: %@}
 => Engram stale decryption failure for messageID: %@
Broadcasting Group Share Message brodcast block
 => Engram fetch group decryption failure for messageID: %@
Received unknown/unhandled error type: %d
No session ID provided in the message for command code %@, discarding message...
Couldn't find session with ID %@ for command code %@, discarding message...
Received session invitation fromID %@, processing message %@
Received accept response fromID %@, processing message %@
Received decline response fromID %@, processing message %@
Received cancel response fromID %@, processing message %@
Received session message fromID %@, processing message %@
Received session end message fromID %@, processing message %@
Received session reinitiate message fromID %@, processing message %@
Received group session message fromID %@, processing message %@
We received an IDS Message that had an original command key, however its command was not FTCommandIDAttachmentMessage
_processIncomingRemoteMessage: %@ fromID: %@ forTopic: %@ storedGUID %@
DROPPING MADRID MESSAGE: %@ fromID: %@ forTopic: %@ storedGUID %@
Found no service for topic! %@
Message %@ is coming from an account that is not permited to send to this device. Sender Was: %@
Ignoring filtered list for own aliases. {Alias: %@; Account: %@;}
Told to filter message %@ from %@
Dropping message %@ from %@ because it is not on the cross-account allowlist and is coming from %@
Message specifies an expiration date %@ %@
Message %@ for topic %@ has expired! Dropping.
Received remote message %@ is a duplicate. Ignoring.
INCOMING-APS_DELIVERY:%@ SERVICE:%@
Received registration update message on tunnel service, ignoring...
Processing received message for which we couldn't find a relevant account, cleaning it up. { messageUUID: %@, storedGuid: %@, toIdentifier: %@, message: %@ }
Sent certified delivery receipt for filtered message { success: %ld, context: %@ }
Broadcasting the receipt of message %@  (%@)  (topic: %@)
Persisting failed for message %@  (%@)  (topic: %@)
IDSFamily_DropIncomingNonFamilyMessage
Performing validity check for message %@ sent to family service.
IDS Family member count is zero, trying to fetch family again. Will retry message after fetch completes. Sending incoming family message to storage.
IDS Family member count is zero, but out of fetches to fetch family again, this message %@ will likely fail.
Family Message %@ is coming from an account that is not in the family. Sender was: %@
Message %@ sent to family service passed validity requirements.
Device is NOT in our account registrations, It should be, Can we force a GDR?
Issuing forced GDR & sending message to storage
No forced GDR is possible
Unknown devices, but GDR attempt exchasuted
Message %@ is coming from an account that is firewalled from talking to this device. Sender Was: %@
Firewalled message %@ is coming for session.
Ending session for service %@ with groupID %@
Finished handling decryption {GUID: %@, URI: %@, SenderCorrelationIdentifier: %@, topLevelPayload: %@}
Dropping message! {guid: %{private}@, processError: %@, decryptionError %@
Overflow attachment (with original command %@) -- checking for original payload? %@
Pulled out original payload %@ or bulked payload %@ from attachment message, using original command.
Found rawBulkedData
For command %@ we have unpacked dictionaryPayload? %@ protobufPayload? %@ dataPayload? %@ bulkedPayloads? %@
Hit exception %@ trying to deserialize payloads
Broadcast will include message context %@
Found Topic %@  with all accounts %@ and Going to use account %@
Forwarding Message To Local Device to Process and Broadcast
About To Send Message Over Local Link
PROXY: Will Send Block
PROXY: Completion Block %ld, %@, %@
We received a message on a service that is local only, we have kicked off a forwarding of the message if necessary, we can delete this message from our database
Broadcasting HomeKit Message top
Broadcasting HomeKit Message brodcast block
Broadcasting HomeKit Report Message top
Broadcasting HomeKit Report Message brodcast block
Broadcasting Incoming Invitation Message top
Broadcasting Incoming Invitation Message block
Broadcasting Incoming Invitation Update Message top
Broadcasting Incoming Invitation Update Message block
Broadcasting GroupShare Message top
Received IDS remote error (120) for client that can not hanlde it %@ %@
Received IDS message payload is empty, not delivering %@ %@
Broadcasting for received message with guid %{public}@   broadcast topic: %{public}@  (topic: %{public}@)
No broadcaster found - deleting incoming message %@ on topic %@ with no listeners
No broadcast desired for command %@ topic %@ -- deleting message with guid %@
Processing bulked payload ...
Shouldn't broadcast for this command %@ for received message %@ with guid %@
v28@?0@"NSError"8@"NSDictionary"16B24
No Message Error, Processing Imediatly
v32@?0@"NSDictionary"8@"NSError"16@"IDSCertifiedDeliveryContext"24
  => Adding a delay of %f seconds to iCloud Pairing Messages
CloudPairingDelay
  => Processing immediately
Under first data protection lock. Sending message to storage. { guid: %@ }
Processing message for stored guid %@
Under first data protection lock and message already stored -- ignoring {GUID: %@, storedGuid: %@}
No broadcaster found - dropping update for incoming pending message %@ on topic %@ with no listeners
_decryptEngramMessage, group task {context: %@, error: %@}
_decryptEngramMessage, fetched group {group: %@, fetchError: %@
Told to decrypt: %@
AES128
decryptedData: %@ error: %@ decryptionError: %@
decryptedDict: %@
_decryptEngramMessage, no Group, bailing...
Received an IDS Payload for a Resource Tranfer over the Internet, looking at it
Payload is %@
DictIS %@
File Has Been Downloaded to %@
com.apple.identityservices.deliver
SocketPairMessage
Failed to issue sandbox extension for file [%@]
Message is from server storage %@
Storing item from server storage %@  (%@)
Persisting failed for message %@  (%@)
Storage timer fired, guids we need to process: %@
We're under first data protection lock. Holding messages and not sending to clients.
Scheduling a storage invalidation timer in: %f
Noting item from storage (%@)
Noting last item from storage (%@)
Hinting service to check transport log {service: %@, reason: connected}
Failed to hint service to check transport log {service: %@, reason: connected}
IDSPushHandler signaled isConnected %d
handler %@ didReceiveMessage: %@ fromID: %@ forTopic: %@ context: %p
Given message list from server. Dissecting into %ld individual messages
Submessage command is not recognized -- dropping. {subMessageCommand: %@, subMessage: %@}
Encryption failed with error %@
Incoming message %p on service %@ command %@
Received a message over Bonjour Delivery that we can't process! -- dropping {service: %{public}@, command: %{public}@, deviceID: %{private}@, message: %{private}@}
-[IDSDaemon(Messaging) _incomingMessageStorageDictionaryForPayload:topic:deviceID:btUUID:command:messageUUID:sequenceNumber:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:]
%s: invalid topic for saving incoming message, ignoring!
-[IDSDaemon(Messaging) _shouldStoreBeforeFirstUnlockIncomingLocalMessage:from:forTopic:]
%s: invalid parameters for saving incoming message, ignoring!
Incoming A over C message but keys are not available, sending to storage
Stored incoming message under first lock for service %@ with guid %@. Success: %d
Incoming protobuf %p on service %@ command %@
Received local protobuf %@ is a duplicate. Ignoring.
Failed to decrypt AoverC message -- dropping {topic: %@, error: %@}
Incoming data %p on service %@ command %@
Received local data %@ is a duplicate. Ignoring.
Received local message %@ is a duplicate. Ignoring.
Incoming app level ack on service %@
Received cancel request for message %@ from localObject %p
Sending not started update to listener on %@ with responseCode %ld error %@ - 0/0 bytes
Sending update to listener on %@ with responseCode %ld error %@ - %@/%@ bytes
Broadcasting update to listener on %@ with responseCode %ld error %@ %@/%@ bytes
v40@?0@"IDSDeliveryContext"8@"NSNumber"16@"NSNumber"24B32B36
Cannot ack message locally without proper priority value (%d)
Please file a radar! Could not ack message with sequence number %u for peer %@ priority %ld
Received acknowledgement for outgoing message %@ alternateCallbackID %@ from localObject %p
Broadcast: Received acknowledgement for message stored as %{public}@ real guid %{public}@ from localObject %p processName %{public}@
Broadcast: message %@ got client ack, sending IDS ack to sender, broadcast ID %lld, sequence number %u 
Message on %@ with storage guid %@ experienced broadcast time %@
Received acknowledgement for message %@ from localObject %p
Request to send app-level ack for message %@ to %@ from localObject %p
Sent app-level ack with guid %@. Last call? %@
continuity
Local
The delivery path for message with guid %@ is %@, service: %@
Cloud Fallback
Only 1 account exists on this service, We will need to proxy this message to our local device for broadcast
Not Proxying this message %@ payload is currently a typing indicator
Only 1 account exists on this service, We will need to proxy this and include the default device as a destination for the message as well
file persistence - destination file exists %@
file persistence - failed to move and failed to copy file %@ => %@ (error %@)
file persistence - failed to remove original file %@ (error %@)
incoming-message-cleanup-threshold
Blocklist
filtering message for handle: %@ = %@
InitialContextQueue
ProfileValidationQueue
AuthenticationQueue
Region Validation failed
Authentication failure
FaceTimeLocalizable
Default context query failed
Region validation failed
v84@?0@"NSString"8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56@"NSNumber"64B72B76B80
v72@?0@"NSString"8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56@"NSNumber"64
<%@:%p> cert: %@
IDSPipelineParameter
IDSPipelineComponent.m
Subclasses must implement runIndividuallyWithInput
@"CUTUnsafePromise"16@?0@"<IDSPipelineParameter>"8
PairedDevice
apple
-[IDSPairedDeviceKeychainPersister _saveToKeychainWithDictionary:]
-[IDSPairedDeviceKeychainPersister _removeFromKeychain]
kt-reg-state-change
kt-sig-resp
IDSKTRegistrationDataManagerErrorDomain
v24@?0@"TransparencyIDSRegistrationResponse"8@"NSError"16
IDSDaemonPriorityQueueSync
IDSDaemonPriorityQueueDefault
IDSDaemonPriorityQueueUrgent
id-get-service-user-id
service-user-id
serviceUserIDDict
com.apple.identityservices.serviceDisablement
@"IDSDAccount"20@?0@"IDSServiceProperties"8i16
@16@?0@"<IDSUser>"8
@"IMPair"16@?0@"<IDSCTSIM>"8
@"IMPair"16@?0@"IDSPhoneUser"8
%@ Current existing accounts {existingIdentifierByService: %@}
%@ Current disabled accounts {disabledByService: %@}
IDSUserAccountSynchronizer.m
registration-date
next-registration-date
needs-renewal
invitation-version
ids-version
identity-version
cdma
identity-rsa-pair-signature
environment
temporary-phone-email
region-base-phone-number
region-server-context
dependant-registrations
self-handle
dependant-registrations-ttl
dependant-registrations-response-code
dependant-registrations-auth-retries
kt-uris
ids-user-id
ids-registration-cert
ids-authentication-cert
user-unique-identifier
context-info
service-identifier
should-rereg-on-manatee
did-reg-with-kt-account-key
bindings
updated
removed
Registration info (%p): [Status: %@] [Type: %@] [Device Name: %@] [Service Type: %@] [Env: %@] [Main ID: %@] [AppleID: %@] [UserID: %@] [C2K: %@] [Push Token: %@] [Region ID: %@] [Base Number: %@] [URIs: %@] [Candidates: %@] [Auth Cert: %p] [Reg Cert: %p] [Profile ID: %@] [Auth User ID: %@] [User Unique ID: %@] [Account Key: %@]
Registration info (%p): [Status: %@] [Type: %@] [Device Name: %@] [Service Type: %@] [Env: %@] [Main ID: %@] [AppleID: %@] [UserID: %@] [C2K: %@] [Push Token: %@] [Region ID: %@] [Base Number: %@] [URIs: %@] [Candidates: %@] [Auth Cert: %p] [Reg Cert: %p] [Profile ID: %@] [Auth User ID: %@] [Registration Date: %@] [Heartbeat Date: %@] [User Unique ID: %@] [Account Key: %@]
IDSDeviceConnectionAWDMetrics
Can't find AWD metrics for %@
Final Report - %@
There is no metric dictionary for %@, %@
_kIDSDServiceControllerServicesChangedNotification
_kIDSDServiceControllerServicesRemovedNotification
SubServicesMap
Version
com.apple.ids.subservices
com.apple.private.alloy.keysharing
com.apple.private.alloy.harmony.pushprovisioning
B8@?0
-[IDSPairedDeviceRepository _criticalPerformPairedDeviceDeactivation]
-[IDSPairedDeviceRepository _criticalPerformPairedDeviceActivationWithCBUUID:]
HASH:%@
id-group-get-key
IDSTapToRadarPushPayload.m
pushPayload
id-report-unknown
message-id
sender-uri
time-of-message
message-is-blackholed
message-is-junked
IDSGroupServerKeyElectionStoreErrorDomain
IDSMessageStore-%@
IDSDMessageStore
ids.db
ids-%@.db
The current IDS database is v%d.  The current schema version is v%d
Beginning migration.  The IDS db is currently at v%d, upgrading to v%d.
REINDEX
Reindexing the DB worked.
Reindexing the DB failed with SQLite result: %d
Database vacuum success
IDSDMessageStore vacuum failed!
IDSDMessageStore final integrity check failed!
Final integrity check success
Post-reindex integrity check success
Initial integrity check success
Adding fields to support iMessage on IDS
Unable to drop legacy table
Successfully dropped legacy table
DROP TABLE outgoing_message
Adding field to support sending iMessage from aliases
Adding support for high priority messages
Flushing stale messages to enable database
DROP TABLE incoming_message
Flushing potentially old stale messages
Updating outgoing_message to have all needed fields
Updating outgoing_message to have is_sent column
Updating outgoing_message to have new send types and options.
Flushing stale outgoing_messages.
Adding indexes on message guid
Unable to add outgoing_message guid index
Successfully added outgoing_message guid index
CREATE INDEX outgoing_message_guid_idx ON outgoing_message(guid);
Unable to add incoming_message guid index
Successfully added incoming_message guid index
CREATE INDEX incoming_message_guid_idx ON incoming_message(guid);
Adding expiration date support
Adding app level ack
Adding compress option
Adding nonWaking, fireAndForget, queueOneIdentifier option
Outgoing message priority changes
AlternateGUID support
isLocal added to incoming message record
Duet columns, payload size added to outgoing message record
CREATE INDEX IF NOT EXISTS outgoing_message_guid_idx ON outgoing_message(guid);
CREATE INDEX IF NOT EXISTS incoming_message_guid_idx ON incoming_message(guid);
Add enforce_remote_timeout column to outgoing_message
INTEGER DEFAULT 0
Create table outgoing_messages_to_delete
Adding indexes on account_guid, priority and is_send
Unable to add outgoing_message similar message query index
Successfully added outgoing_message similar message query index
CREATE INDEX outgoing_message_similarity_idx ON outgoing_message(account_guid, priority, is_sent);
Add main_account_guid column to outgoing_message
TEXT
Add pending_delete column to outgoing_message
Add message_type column to outgoing_message
Setting a reasonable timeout on messages which are missing them
UPDATE outgoing_message SET expiration_date = %lld WHERE expiration_date = 0;
Unable to set expiration date on messages
Successfully added expiration date on messages
Add skip_self column to outgoing_message
Add nonCloudWaking column to outgoing_message
Add wants progress column to outgoing_message
Add ignoreMaxRetryCount column to outgoing_message
Add wantsCertifiedDelivery column to outgoing_message
Add originalTimestamp column to outgoing_message
Adding message_identifier column to incoming_message
Unable to add incoming_message message_identifier index
Successfully added incoming_message message_identifier index
CREATE INDEX incoming_message_message_identifier_idx ON incoming_message(message_identifier);
Dropping old bypass_duet messages
Unable to drop bypass_duet messages
Successfully dropped bypass_duet messages
DELETE FROM outgoing_message where bypass_duet = 1;
Add push_priority column to outgoing_message
Add send_mode column to outgoing_message
Add wants_firewall_donation column to outgoing_message
Downgrading to a build with a different IDS database version is unsupported :(
vacuum
IDS DB migration took %f seconds.
%@ SQLiteResult: %d SQLite Message: %s
No migration block to execute!
Cannot perform _IDSDatabaseAddColumnOfTypeToTable(%@, %@, %@)
SELECT %@ FROM %@
The %@ column already exists on %@, skipping this step.
IDS DB migration failed to add column %@ to the %@ table.
Added %@ column to the %@ table.
ALTER TABLE %@ ADD COLUMN %@ %@;
IDSRTEncryptionController
%p: Returned the random publicKeyData %@ for the simulator
%p: This IDSRealTimeEncryptionIdentity is expired. (now: %@, expirationDate: %@)
We were unable to update the cache. Possibly because the device doesn't exist. Look at the logs to know for sure. {uuid: %@}
(Daemon) dropAllMessagesWithoutAnyAllowedClassifierForDevice (device ID: %@)
q24@?0@"NSUUID"8@"NSUUID"16
PairDirectlyOverIPsec
(Daemon) Told to add a paired device %@
(Daemon) Reset communication with currently active paired device before adding a new paired device: %@
(Daemon) Told to add a paired device but there is no need to reset communication with the currently active paired device. {activeCBUUID: %{private}@, cbuuidString: %{private}@}
@16@?0@"IDSProtoKeyTransparencyTrustedDevice"8
id-initialize-validation
session-info-request
absinthe-hello
Initialize Validation Response: %@
session-info
absinthe-response
@"IMTimer"24@?0@8:16
com.apple.identityservicesd-backup-check
id-get-handles
Handle query response: %@
IDS Firewall System Starting Up
Performing initial database housekeeping
  => Setting cache size
  => Invalidating caches
Is firewall enabled %@
Should firewall drop for all categories %@
Entries for category %u: %@
IDS-Firewall-DB
Closing database.
Scheduling Cleanup Timer
Scheduling timer called
ids-firewall-record-expiration-time-in-seconds
Removing entries older than %@
SimpleUInt32ToObjectTable_SetObjectForKey
SimpleUInt32ToObjectTable_ObjectForKey_NoRetain
SimpleUInt32ToObjectTable_RemoveObjectForKey
SimpleNSStringToObjectTable_SetObjectForKey
SimpleNSStringToObjectTable_ObjectForKey_NoRetain
SimpleNSStringToObjectTable_RemoveObjectForKey
IDSPhoneUserRegistryErrorDomain
<%@: %p phoneUser: %@ authenticationCertificate: %@>
This device is not currently authenticated for a phone user
This device does not support phone number authentication
public_identity
Gelato
unregistered-message-protection-key
message-protection-key
previous-message-protection-key
container-unregistered-message-protection-key
container-message-protection-key
container-previous-message-protection-key
container-application-key-is-registered
container-unregistered-ktsignaturedata
container-registered-ktsignaturedata
message-protection-class-a-key
message-protection-class-c-key
message-protection-class-d-key
NGMVersionOverride
+[IDSRegistrationKeyManagerIdentityDataSource storageItemNameForLegacyIdentityIdentifier:]
IDSRegistrationKeyManagerIdentityDataSource.m
+[IDSRegistrationKeyManagerIdentityDataSource legacyStorageItemNameForContainerIdentityIdentifier:]
+[IDSRegistrationKeyManagerIdentityDataSource containerStorageItemNameForContainerIdentityIdentifier:]
+[IDSRegistrationKeyManagerIdentityDataSource containerStorageItemNameForContainerIdentityIdentifier:applicationKeyIndex:]
%@-%u
IDSNWSocketPairConnectionProtocol
i16@?0@"NSObject<OS_nw_framer>"8
Q16@?0@"NSObject<OS_nw_framer>"8
Q28@?0*8Q16B24
IDSNWSocketPairConnection
IDSNWSocketPairConnectionProtocol returning -- no header.
IDSNWSocketPairConnectionProtocol read message_length:%u (0x%x), type:%u (0x%x)
IDSNWSocketPairConnectionProtocol returning partial data.
v36@?0@"NSObject<OS_nw_framer>"8@"NSObject<OS_nw_protocol_metadata>"16Q24B32
%@ Succesful nw_connection_create_with_connected_socket_and_parameters
%@ _nwConnection is nil.
%@ Connection: nw_path_t is NULL, dissabling cross-layer logging.
%@ Connection from listener is ready.
%@ Listening connection closed.
%@ Listening connection state: %d
%@ Ending session
%@ Read %u bytes
%@ nw_connection_receive_message Error %@, isFinal %@
Scheduling next _receiveFromNWConnection for %@
v36@?0@"NSObject<OS_dispatch_data>"8@"NSObject<OS_nw_content_context>"16B24@"NSObject<OS_nw_error>"28
%@ nw_connection_receive_message of type %u
Sending message to uppper layers. 
%@ Sending message to uppper layers.
%@ Wrote %u bytes.
%@ Error %@! Could not write data to nw_connection.
v16@?0@"NSObject<OS_nw_error>"8
<%@: %p preKey=%@>
reg-hash-time-since-gdr
Registered device missing public key! -- aborting hash {device: %@}
Local device missing public key! -- aborting hash
Received unsupported query update hash {version: %d, hash: %@}
Query update hash does not match, we should clear {remoteHash: %@, localHash: %@}
Query update hashes match -- doing nothing {version: %d, remoteHash: %@, localHash: %@}
 => Purging Peer ID Cache for: %@   caller URI: %@   service: %@
Received too many registration updates, ignoring {remoteURI: %@, service: %@, localURI: %@, guid: %@}
q24@?0@"NSData"8@"NSData"16
start-count
DevicePolicy
started policy for %@, devices: %@
checking blackout for %@
repeated fairplay failure blackout lifted (elapse %0.6lf > window %0.1d)
blackout due to repeated fairplay failure (blackout ending in %0.6lf seconds)
iMessageSpam
Told to report iMessage spam with localObject %@
Process not entitled to report iMessage spam
Couldn't find iMessage account with alias %@
Told to report iMessage unknown sender with localObject %@
Process not entitled to report iMessage unknown sender
Told to check unknown sender with localObject %@
Process not entitled to check unknown sender
v36@?0q8B16d20@"NSError"28
<%@:%p user: %@, credential: %@>
<%@:%p user: %@>
v16@?0@"<IDSTemporaryPhoneUserTransaction>"8
carrier-nonce
imei
id-get-esat
esim-auth-token
BTLink
retrieved os channel %p from pipe %@
CFWriteStreamCopyProperty(kCFStreamPropertySocketNativeHandle) failed with pipe %@
retrieved native socket %d from pipe %@
fcntl failed with socket %d
hostState
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IDSAgent/IDSBTLink.m
releasing pipe %@
ReportDataCorruption
/bin/cp /dev/uart.log /tmp/uart-%.06f.log
IDSBTLink
Downstream
Upstream
Start collecting logs due to %@ Magnet corruption
Downstream data corruption
Upstream data corruption
DontSubmitDataCorruptionToAggd
DontSubmitDataCorruptionToAggd is set. Not submitting to aggd
submitting aggd metric - MagnetDataCorruption
com.apple.IDS.MagnetDataCorruption
submitting IDSMagnetCorruptionDetailedEvent: correctFramesSinceLastCorruption = %lld, correctRawBytesSinceLastCorruption = %lld, discardedRawBytes = %lld, magnetDataCorruptionRecoveryTimeInMs = %lld ms
Remote device detected data corruption
-[IDSBTLink flushBuffer:]
IDSBTLink.m
direction == IDSLinkDirectionTransmit || direction == IDSLinkDirectionReceive
nil peer
asleep
awake
BT reports %@ as (%@) interpreting as awake? %@.
Link manager read %d/%d bytes during resync %c
Link manager recv(resync) %zd errno %d - closing connection
Magnet corruption! received %dB with %dB buffer. Resync incoming stream done! content = %@
DontSubmitDataCorruptionToAggd is set. Not submitting MagnetDataCorruptionRecoveryTimeInMs = %lld ms to aggd
submitting aggd metric - MagnetDataCorruptionRecoveryTimeInMs = %lld ms
com.apple.IDS.MagnetDataCorruptionRecoveryTimeInMs
received %dB with %dB buffer. Continue resyncing incoming stream. content = %@
Link manager recv %zd errno %d - closing connection
Magnet corruption! Bad packet length found. Initiate resync incoming stream! (last recv %d/%u) data(%d) = %{public}@
Magnet corruption! Link manager received %d byte packet (last recv %d/%u) with bad checksum (old:%04x new %04x). Initiate resync incoming stream! data(%d) %@
Magnet corruption! This packet(%dB) (last recv %d/%u) did not decode! data(%d) %@
Link manager received zero byte packet (total recv:%d)
ready but already suspended
Ready to write into pipe %@
Link manager send2 errno %d
%c Magnet    (%s) Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
BTLink is now suspended
BTLink is now resumed
Custom Test 9 - Packet injected into the BT Layer.
Full response info for GUID %@ Finished MML %@ with result code: %ld error: %@ result dictionary: %@ message body: %@
IDSMadridAckTracker.m
Full response info for GUID %@ Finished Fanout %@ with result code: %ld error: %@ result dictionary: %@ message body: %@
IDSKeyTransparencyVerifierErrorDomain
kt-disabled
kt-xpc-activity-enabled
kt-xpc-activity-interval
kt-xpc-activity-max-verifications
kt-analytics-enabled
kt-sf-analytics-enabled
kt-rtc-analytics-enabled
kt-self-verify-rate
kt-cloud-kit-enabled
kt-account-key-enabled
SelfHealLimitKey
<%@: %p eligibleServiceIdentifiers.count: %lu, serviceSignatures.count: %lu>
<%@: %p serviceIdentifier: %@, accountKey: %@, URI: %@>
<%@: %p transparencyStatus: %@, transparencyBlob.length: %lu>
<%@: %p pushToken: %@, loggableData.length: %lu, signedData.length:%lu, ktCapable: %@, productName: %@, buildVersion: %@, transparencyVersion: %@>
KTForTopLevelServices
KTForMultiplex1
KTForFaceTime
IDS-KT-List
Key transparency is not enabled
Failed to determine eligibility for the key transparency trust circle
B16@?0@"IDSProtoKeyTransparencyTrustedService"8
The local device is not eligible for key transparency due to account status
Failed to nuke key transparency state
Key Transparency is not enabled.
v24@?0@"KTVerifierResult"8@"NSError"16
@16@?0@"KTLoggableData"8
Peer verification requires non-nil URI and ticket
Invalid index provided (unrecognized service identifier)
v44@?0@"NSString"8Q16B24@"NSArray"28@"NSError"36
Transparency verification resulted in a failure
Transparency verification resulted in a failure which was ignored
Transparency results are currently pending
Received unknown verification result
Mismatched Account
Invalid Service for Opt in
No kt applications provided for opt in status update.
v16@?0@"IDSKTOptInResult"8
No account registered for service.
Failed to get query results.
Key transparency trust circle is not enabled
Provided services are not eligible for the key transparency trust circle
IDSKTAccountKeyFetch
IDSKTAccountKeyFetchService
IDSKTAccountKeyFetchSuccess
IDSKTAccountKeyFetchIsMismatchAccount
akFetchErr
akUnderlyingErr
akUnderlyingErrorDomain
akRegRes
akFetchDID
akFetchPT
KVS sync error unknown.
B16@?0@"IDSKeyTransparencyEntry"8
B16@?0@"IDSProtoKeyTransparencyTrustedDevice"8
im://
mp1://
ftm://
IDSKeyTransparencyVerifier
Key Transparency
Pending
Failure Ignored
id-get-dependent-registrations
Get Dependent Registrations response: %@
NetworkAvailabilityCheckOverrideValue
FixedInterface
FixedInterfaceDestination
DisablePisco
EnableAbsintheV4Option
DisableBAACertOption
EnableDeviceScoring
EnableDebugPiscoLogging
AlwaysPairAsTinker
ForcefulECC
ForcefulLegacy
DisableKeyTransparency
DisableKeyTransparencyCloudKitCircle
DisableKeyTransparencyAccountKeyCircle
EnableKeyTransparencyAggressiveVerificationSchedule
EnableKeyTransparencyUI
IDSKeyTransparencyFirstGossipChanceDefault
IDSKeyTransparencySubsequentGossipChanceDefault
IDSKTAccountKeyFetchMetricDeviceIDDefault
IDSKTAccountKeyFetchMetricDeviceIDExpirationDefault
ForceFlushOnDeliveryReceipt
EveryUnlockAsFirstUnlock
ForceOnePerFanout
DropMadridMessages
BypassHomeNumberCarrierCheck
HomeNumberSecondsUntilExpiration
CoalesceDelayOverride
KeyTransparencyCKContainerExpiryOverride
BypassRegistrationControlStatusCheck
global-bag-config-%@-%@
global-bag-file-%@-%@
global-bag-filetype-%@-%@
FirewallOn
LDMGlobalEnabled
FirewallBlocksAll
FirewallAllowList-
Already have cached invalid results {uri: %@, fromURI: %@, strippedURI: %@, service: %@}
sigs
INSERT INTO firewall_record (handle, merge_id, service, category, is_donated, last_seen_date, last_modified_date) VALUES (?, ?, ?, ?, ?, ?, ?);
UPDATE firewall_record SET merge_id = ?, last_seen_date = ?, last_modified_date = ? WHERE handle = ? AND category = ? AND is_donated = ?;
DELETE FROM firewall_record WHERE handle 
AND category = ?
DELETE FROM firewall_record WHERE merge_id 
AND category = ? AND is_donated = ?;
DELETE FROM firewall_record WHERE category = ? AND is_donated = ?
DELETE FROM firewall_record WHERE category = ?
SELECT COUNT(1) FROM firewall_record WHERE handle = ? AND category = ? AND is_donated = ?LIMIT 1;
SELECT COUNT(1) FROM firewall_record WHERE handle = ? AND category = ?LIMIT 1;
SELECT COUNT(1) FROM firewall_record WHERE merge_id = ? AND category = ?LIMIT 1;
SELECT DISTINCT handle, last_seen_date, is_donated, merge_id FROM firewall_record WHERE category = ?;
SELECT DISTINCT handle, last_seen_date, is_donated, merge_id FROM firewall_record WHERE category = ? AND is_donated = 1;
DELETE from firewall_record WHERE last_seen_date < ? AND is_donated = 0; 
setupNewSession configuration: %@
cleanup session %@ local object %@
Could not find session with uniqueID %@ to clean up, ignoring...
cleanup session instance %@ local object %@
Could not find session with instanceID %@ to clean up, ignoring...
sendInvitation %@
%@ - Could not find session with uniqueID %@ to send invitation, ignoring...
sendInvitation %@ with data %@ declineOnError %@
%@ - Could not find session with uniqueID %@ to send invitation with data to, ignoring...
acceptInvitation %@
%@ - Could not find session with uniqueID %@ to accept invitation, ignoring...
acceptInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to accept invitation with data with, ignoring...
cancelInvitation %@
%@ - Could not find session with uniqueID %@ to cancel invitation, ignoring...
cancelInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to cancel invitation with data with, ignoring...
cancelInvitation %@ with remote ended reason override %u
%@ - Could not find session with uniqueID %@ to cancel invitation with remote ended reason override with, ignoring...
declineInvitation %@
%@ - Could not find session with uniqueID %@ to decline invitation, ignoring...
declineInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to decline invitation with data with, ignoring...
reconnectSessionWithUniqueID %@
%@ - Could not find session with uniqueID %@ to reconnect session, ignoring...
endSession %@
%@ - Could not find session with uniqueID %@ to end session, ignoring...
endSessionWithData %@ (data length %lu)
%@ - Could not find session with uniqueID %@ to end session with data, ignoring...
sendSessionMessage %@ to session %@ with context %@
%@ - Could not find session with uniqueID %@ to send message to, ignoring...
setAudioEnabled:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set audio enabled, ignoring...
setMuted:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set muted, ignoring...
setPreferences:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set preferences, ignoring...
setRequiredCapabilities:requiredCapabilities:forSessionWithUniqueID %@ %@ %@
setInviteTimeout:forSessionWithUniqueID %@ %ld
%@ - Could not find session with uniqueID %@ to set invite timeout, ignoring...
acknowledge sessionID: %@ clientID: %@
%@ - Could not find session with uniqueID %@ to acknowledge session ID, ignoring...
sendAllocationRequest %@
%@ - Operation supported on internal install only
%@ - Could not find session with uniqueID %@ to send allocation request, ignoring...
updateMembers %@, for Group %@, context %@, capabilities %@, triggered locally %@, lightweightStatusDict count:%lu
%@ - Could not find session with uniqueID %@ to update members, ignoring...
manageDesignatedMembers %@, for Group %@, type: %u
removeParticipantIDs %@, for Group %@
%@ - Could not find session with uniqueID %@ to removeParticipantIDs, ignoring...
updateParticipantData %@, for Group %@, context %@
updateParticipantType %u, for Group %@, context %@
%@ - Could not find session with uniqueID %@ to update participantType, ignoring...
joinGroupSession %@, options: %@
%@ - Could not find session with uniqueID %@ to join group session, ignoring...
leaveGroupSession %@, participantInfo: %@ options: %@
%@ - Could not find session with uniqueID %@ to leave group session, ignoring...
requestActiveParticipants for group session: %@
%@ - Could not find session with uniqueID %@ for requestActiveParticipants, ignoring...
requestURIsForParticipantIDs for group session: %@
registerPluginForGroup %@, options: %@
%@ - Could not find session with uniqueID %@ to register plugin, ignoring...
unregisterPluginForGroup %@, options: %@
%@ - Could not find session with uniqueID %@ to unregister plugin, ignoring...
requestEncryptionKeyForGroup %@, for %lu participants %@
%@ - Could not find session with uniqueID %@ to request encryption keys, ignoring...
createAliasForParticipantID %llu salt %@
getParticipantIDForAlias %llu salt %@
REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s
Report Unknown Sender response: %@
setting up the realtime encryption controller for the unique ID: %@
%@ - Could not initialize the realtime encryption controller for the unique ID: %@, ignoring...
sending the device prekey for the unique ID: %@ to group: %@
%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the prekey to group %@...
%@ - Could not find the session for the group: %@
getting public keys for the real-time encryption...
%@ - Could not get the realtime encryption controller
sending the master key material for the unique ID: %@ to group: %@
%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@
sending the master key material recovery request for the unique ID: %@ to group: %@
Request the master key material(MKM) for unique ID: %@ group: %@
resetting all keys for the unique ID: %@ group: %@
Error unarchiving -- dropping {unarchiveError: %@}
Failed to load keychain. Can't sync cache with keychain. {error: %@}
Failed to serialize cache -- Not saving opportunistic cache {error: %@, cache: %@}
Dropped opportunistic cache {err: %@}
Did not find any date to schedule a heart beat, triggering get dependent request
%@ - Using random device heartbeat override value of %d seconds
%@ - Using device heartbeat override value of %d seconds
Expiration dates per user: 
%@ => %@
Next heartbeat date: %@ (in %.0f seconds)
We did not find any heartbeat to schedule
_scheduleDependentRegistrations for %.0f - %@
_scheduleRescueHeartBeat for %.0f
_updateDependentRegistrations fired
Resetting expiry for %@
Not setup yet, ignoring expiry update...
%@ - UserID is empty (%@), ignoring expiry update...
%@ -  updateExpiry failed sanity check. Returning current date + %f seconds expiry was %f
Setting new expiry %@ (seconds %f) for user %@
Not setup yet, ignoring accounts change...
Accounts changed, updating expiry map
Missing userID for account %@, ignoring...
Did not find existing expiry for user %@
Not setup yet, ignoring _fetchExpiryTimeIfNecessary
There is one or more valid accounts but none of them has an expiry date, refreshing the entire list!
Did not delete the heart beat date from the keychain, error: %d
SIM Is not ready for registration, ignoring this.
  => Is CDMA: %@
  => Tracking %d registration(s)
  => Re-HTTP registering registration: %@
  => Registration matches, not re-registering: %@
  => No registrations active
  => Device is not entitled for this, ignoring tech change
After SIM insertion, user denied SMS registration found, changing error {accounts: %@, service: %@
SIM Inserted. Checking to see if we need to re-register due to SIM swap.
  => Re-sending HTTP registration for SMS registration: %@
Registration state changed but we can't register; not enabling phone number accounts
Registration state changed but we've tried this too many times; not enabling phone number accounts
After registration state changed, enabling account: %@ on service: %@
Not enabling account after registration state changed {isUserDisabled: %@, shouldDisableService: %@, registrationError: %ld, account: %@}
Registration state changed processed {withinTimeRange: %@, _registrationStateChangedDate: %@, _registrationStateChangedCounter: %lld}
SIM Removed. Checking to see if we need to re-register due to SIM removal.
  => Sending HTTP *deregistration* for SMS registration: %@
Dealloc'ing IDSNRDeviceBridge {pointer: %p}
NRDeviceMonitor created {deviceIdentifier: %@, pointer: %p}
Could not create NRDeviceMonitor object. {pointer: %p}
isConnected didChange {isConnected: %{public}@, isRegistered: %{public}@, deviceIdentifier: %{private}@}
isNearby didChange {isNearby: %{public}@, isRegistered: %{public}@, deviceIdentifier: %{private}@}
isCloudConnected didChange {isCloudConnected: %{public}@, isRegistered: %{public}@, deviceIdentifier: %{private}@}
isAwake didChange {isAwake: %{public}@, isRegistered: %{public}@, deviceIdentifier: %{private}@}
linkType didChange {linkType: %{public}@, isRegistered: %{public}@ deviceIdentifier: %{private}@}
isClassCConnected didChange {isClassCConnected: %{public}@, isRegistered: %{public}@, deviceIdentifier: %{private}@}
Initializing endpoint subscription {self: %@}
Received endpoints for initial subscription state {self: %@, endpoints: %@}
Endpoints subscription source did discover relevant endpoints {self: %@, localURI: %@@, endpointMap: %@}
Adding identity to last resort DB { identity: %@, token: %@, uri: %@, service: %@ }
Checking last resort DB for identity { token: %@, uri: %@, service: %@ }
Found identity in last resort DB { identity: %@, token: %@, uri: %@, service: %@ }
Cleaning last resort DB with date range %@ to %@
Remote instance ID reset: old [%s] new [%s]
Asked to set remote instanceID for previous ID [%s]
Remote instance ID do not match: old [%s] new [%s]
cannot associate %@ with streamID 0
Unexpected streamID %lu found when asked to translate %@
Previous Remote Instance IDs (next:%d) {%@}
Get Service User ID's Completed with response %@
Get Admin Access Tokens Completed with response %@
Get Consent Tokens Completed with response %@
Get User Access Tokens Completed with response %@
%p %s Sending IDS message, no CoreDuet on platform
Found existing identical subscription for topic %@ with info %@.
No active subscriptions, disabling presence on the server.
Activity unregister for activity topic %@ finished.  Success? %d
The first subscription succeeded, enabling presence on the server.
Activity register for activity topic %@ finished.  Success? %d
Looking up for listeners for update: %@
Alerting listener %@ about update %@
Assign localCID(%04x) from CID set
Clear localCID(%04x) from CID set
Attempt to clear reserved CID 0, skip.
Link is connected, perform a block for %@
Cancelling block by ID needs to pass in ID and success var.
Cancel block by ID succeeded: %@ for %@
Link is connected, cancel a block for %@
ElectAccountIdentity
!setState serviceTypeName=%@
RollAccountKey
CurrentCluster missing GroupIdentifier {currentCluster: %{public}@}
Failed to get fullClusterFromKeychain {accountGroupkey: %{public}@, error: %{public}@}
Failed to update groupID {accountIdentityCluster: %{public}@, groupID: %{public}@, error: %{public}@}
Create account keys
Create Account Key
!setState currentIdentity=%@
!setState serviceTypeNames=%@
!setState oldCluster=%@
Rolling full identity
Creating new full identity
!setState newAccountIdentity=%@
Failed to create new account identity -- Fail {error: %{public}@}
Failed to create adming identity -- Fail {adminServiceIdentity: %{public}@}
Failed to create signingServiceIdenitty -- Fail {signingServiceIdentity: %{public}@}
Created service identities {fullServiceAdminIdentities: %{public}@, fullServiceSigningIdentities: %{public}@}
Rolling old cluster
Creating new cluster
!setState newCluster=%@
!setState existingIdentityGroupName=%@
!setState accountIdentityGroupName=%@
Failed to create publicClusterBlob -- Fail {error: %{public}@}
!setState newGroupID=%@
Failed to fetch item from CloudKit -- Fail {fetchError: %{public}@}
Fetched CloudKit account -- Continue {fetchedCloudKitItem: %{private}@}
Unexpected existingGroupID class -- Fail {fetchedCloudKitItem: %{private}@}
recordName mismatch -- Fail {recordName: %{public}@, existingIdentityGroupName: %{public}@}
Failed to store cluster in keychain -- Fail {storeError: %{public}@, newCluster: %{public}@}
Stored cluster in Keychain
Failed to store in group server {groupServerItem: %{public}@, groupServerError: %{public}@
Stored cluster in GroupServer {groupServerItem: %{public}@}
!setState groupServerGroupID=%@
Failed to save identityItem to CloudKit -- Fail {cloudKitItem: %{public}@, cloudKitSetError: %{public}@}
Updating newCluster groupID {newCluster: %{public}@, groupID: %{public}@}
Stored Cluster in CloudKit -- Done {cluster: %{public}@}
Cleaning up after failed election {cluster %{public}@}
Failed to clean up failed election {cluster: %{public}@, error: %{error}@}
We need a keychain migration -- not saving anything
Failed to save identity {error: %{public}@, identityIdentifier: %ld}
Failed to save identity -- Removing reference from keychain
Removed keychain data for class %{public}@ message protection identity {error: %{public}@}
Failed removing keychain data for class %{public}@ message protection identity {error: %{public}@}
Saving key manager state {self: %@}
Failure to persist identity containers. Clearing in memory keys to force a reload.
Failure to persist identity containers, but clear is rate limited.
Persisting message protection identity container {identityIdentifier: %ld, identityContainer: %{private}@, deleteIfNull: %{public}@}
Persisted identity {identityIdentifier: %ld, identityContainer: %{private}@}
Failed to save identity, possibly corrupted -- removing reference from keychain {error: %{public}@, identityIdentifier: %ld, identityContainer: %{private}@}
Removed identity reference from keychain {identityIdentifier: %ld, identityContainer: %{private}@}
Failed to remove corrupt identity reference from keychain {error: %{public}@, identityIdentifier: %ld, identityContainer: %{private}@}
Removing identity from keychain because deleteIfNull == YES, {identityIdentifier: %ld, identityContainer: %{private}@}
Purged identity and removed it from keychain {identityIdentifier: %ld, identityContainer: %{private}@}
Failed to purge identity or remove keychain reference {error: %{public}@, identityIdentifier: %ld, identityContainer: %{private}@}
Persisting build of identity generation {itemName: %@, buildOfIdentityGeneration: %@}
Failed setting keychain data for build of identity generation {error: %{public}@}
Failed removing keychain data for build of identity generation {error: %{public}@}
Unable to deserialize build of identity generation {itemName: %{public}@, serializedBuildOfIdentityGeneration: %{public}@}
Unable to load message protection identity from keychain {error: %{public}@}
Skipping load class A message protection identity becuase shouldGeneratePairingIdentities == NO
Loaded class A message protection identity {identity: %{private}@, serializationDidChange: %{public}@}
Failed to load class A message protection identity {error: %{public}@}
Skipping load class C message protection identity becuase shouldGeneratePairingIdentities == NO
Loaded class C message protection identity {identity: %{private}@, serializationDidChange: %{public}@}
Failed to load class C message protection identity {error: %{public}@}
Skipping load class D message protection identity becuase shouldGeneratePairingIdentities == NO
Loaded class D message protection identity {identity: %{private}@, serializationDidChange: %{public}@}
Failed to load class D message protection identity {error: %{public}@}
Registration key manager beginning locked load of identities
Loaded registration key pair {publicKey: %@, privateKey: %@, signature: %@, isMigratedSignature: %@, upgradePending: %@}
Unable to load registration key pair; we're under lock, and this requires migration -- we need to migrate
Unable to load a registration key pair {signature: %@, publicKey: %@, privateKey: %@}
We are under first data protection lock, we can not load our identity now
Successfully loaded message protection identity from keychain {_config.registeredIdentityContainer: %{private}@, buildOfGeneration: %@}
Unable to load message protection identity from keychain {error: %{public}@, deserializationDidFail: %{public}@}
We're under lock, and this requires migration -- we need to migrate
Successfully loaded unregistered message protection identity from keychain {_config.unregisteredIdentity: %{private}@, buildOfGeneration: %@}
Unable to load unregistered message protection identity from keychain {error: %{public}@, deserializationDidFail: %{public}@}
Successfully loaded previous message protection identity from keychain {previousMessageProtectionKey: %{private}@}
Unable to load previous message protection identity from keychain {error: %{public}@, previousIdentityDeserializationFailed: %{public}@}
We have no registered or unregistered identity loaded -- generating a new message protection identity {registeredIdentityContainer: %@, unregisteredIdentityContainer: %@, identityDataSource.ngmVersion: %@}
We appear to have already generated a unregistered identity. It seems like it failed on deserialization: %@.
We appear to have already generated a unregistered identity. It seems like it failed reading from keychain: %@.
We appear to have already generated an unregistered identity, but we have no deserialization error or keychain error!
We have no registered identity loaded, but we found an unregistered identity -- no need to generate
We need to regenerate the registered identity
We appear to have already generated a registered identity. It seems like it failed on deserialization: %@.
We appear to have already generated a registered identity. It seems like it failed reading from keychain: %@.
We appear to have already generated an registered identity, but we have no deserialization error or keychain error!
No need to regenerate message protection identity {identity: %@, unregisteredIdentity: %@}
We're under first lock, and this requires migration -- not doing anything here
 ********  DEFAULT SET TO FORCE IDENTITY REFRESH  *******************
 ****************  IDENTITY SERIALIZATION UPDATED  ******************
 ************************  IDENTITY REBUILT  ************************
 *****************  NEEDS ENCRYPTION IDENTITY ROLL  *****************
 ********************************************************************
!!WILL FORCE AN EC KEY ROLL ON NEXT REGISTER!!
!!NO LONGER FORCING EC KEY ROLL!!
Failed generating CSR due to insufficient context {userID: %@, privateKey: %p, publicKey: %@}
Nil full container {config: %{private}@}
Nil previous full container {config: %{private}@}
Failed to get NGM public data from ticket to register -- cancelling roll {ticket: %@, ngmPublicDeviceIdentity: %@, NGMIdentityToRegister: %@, NGMPrekeyToRegister: %@}
Failed to get ticket from identity -- aborting roll {error: %{public}@, fullDeviceIdentity: %@}
!!FORCING A ROLL!!
Failed to get NGM public data to register -- returning nil for EC {ngmPublicDeviceIdentity: %@, NGMIdentityToRegister: %@, NGMPrekeyToRegister: %@}
Failed to get legacy public data to register -- returning nil {error: %{public}@, legacyPublicIdentity: %@}
Failed to get public container from full container -- returning nil publicIdentity to register {error: %{public}@, unregisteredIdentityContainer: %{private}@, registeredIdentityContainer: %{private}@}
Nil full container -- returning nil publicIdentity to register {config: %{private}@}
Returning publicIdentity to register {publicIdentityContainer: %{private}@, unregisteredContainer: %{private}@, registeredContainer: %{private}@}
Immediately returning existing message protection identity {identity: %@}
Created new message protection identity {error: %@, protectionClass: %ld, identity: %@}
Failed to create a new message protection identity! {error: %@, protectionClass: %ld}
No protection identity provided -- not returning public message protection data
Returning serialized public message protection identity {publicIdentity: %@, data: %@}
Failed to serialized public message protection identity {appendError: %@, publicIdentity: %@}
Failed to create public identity from full identity {error: %@, fullIdentity: %@}
No message protection identity present -- not returning message protection identity {error: %{public}@, dataProtectionClass: %d
Generating unregistered identity
generatedIdentityContainer isEqual to registeredIdentityContainer -- no changes {generatedIdentityContainer: %@, registeredIdentityContainer: %@}
generatedIdentityContainer isEqual unregisteredIdentityContainer -- no changes {generatedIdentityContainer: %@, unregisteredIdentityContainer: %@}
generatedIdentityContainer is different from the registered and unregistered container -- has changes -- Updating unregistered container {generatedIdentityContainer: %@}
Generated a new unregistered identity {build: %@}
Failed to generate a new unregistered identity!
Called _generateUnregisteredIdentityWithExistingLegacyIdentity but we have a valid unregisteredIdentity -- no changed {unregisteredIdentityContainer: %@}
Found internet message protection identity in class C -- no need to move it
Moving internet messsage protection identity from class D to class C
Result of moving internet messsage protection identity from D to C is %@
Delaying notification of identity regeneration {delay: %f seconds}
Posting notification of identity regeneration
Skipping notification of identity regeneration; we've already done it
Registration key manager noting registration of keys { legacyData: %@, ngmIdentityData: %@, ngmPrekeyData: %@, keyIndexToIdentityData: %@ }
Failed to get expectedLegacyPublicIdentityData -- Not updating registered data {error: %{public}@, publicUnregisteredIdentityContainer: %{private}@}
Failed to get expectedNGMPublicIdentityData/expectedNGMPublicPrekeyData -- Not updating registered data {error: %{public}@, unappliedRollingTicket: %@, publicUnregisteredIdentityContainer: %{private}@, expectedNGMPublicIdentityData: %{private}@, expectedNGMPublicPrekeyData: %{private}@}
Failed to get publicUnregisteredIdentityContainer -- Not updating registered data {error: %{public}@, unregisteredIdentityContainer: %{private}@}
Completed registration of previously unregistered identity {previousIdentity: %@, identity: %@, buildOfIdentityGeneration: %@}
Completed registration of public identity, but we were unable to apply the rolling ticket {ngmFullDeviceIdentity: %@, unappliedRollingTicket: %@, rollError: %@}
Completed registration of public identity, but it's not the identity we expected {legacyDataMatches: %@, ngmIdentityDataMatches: %@, ngmPrekeyDataMatches: %@}
Saving public legacy message protection data {identifier: %@, data: %@}
Failed to save legacy public message protection data {error: %{public}@, publicData: %{private}@}
Failed to get legacy registered public data {error: %{public}@, publicContainerToRegister: %{private}@}
Saving public ngm message protection identity data {identifier: %@, data: %@}
Failed to save ngm public message protection identity data {error: %{public}@, publicData: %{private}@}
Saving public ngm message protection prekey data {identifier: %@, data: %@}
Failed to save ngm public message protection prekey data {error: %{public}@, publicData: %{private}@}
Failed to get ngm registered public data {error: %{public}@, publicContainerToRegister: %{private}@}
Saving public ngm version data {identifier: %{public}@, ngmVersion: %{public}@, ngmVersionData: %{public}@}
Failed to public ngm version data {error: %{public}@, ngmVersion: %{public}@, ngmVersionData: %{public}@}
Failed to get ngm version from publicContainerToRegister {publicContainerToRegister: %{private}@}
Clearing flag about needing a re-register; it looks to be successful
Removing current message protection identity and key pair
Failed to remove serialized message protection identity from keychain {error: %{public}@}
Failed to remove serialized unregistered message protection identity from keychain {error: %{public}@}
Failed to remove serialized previous message protection identity from keychain {error: %{public}@}
Purging previous message protection identity from memory and keychain
Removed previous identity from memory and keychain {previousIdentity: %{private}@}
Failed to remove previous identity from memory and keychain {error: %{public}@, previousIdentity: %{private}@}
No previous identity to purge -- ignoring request {previousIdentity: %@, identity: %@}
Received notification that KT data needs updating.
Successfully synced KVS with trusted devices. { trustedDevices: %@ }
Failed to sync trusted devices to KVS. Scheduling next sync attempt. { trustedDevices: %@ }
Skipping loadPairingIdentities becuase shouldGeneratePairingIdentities == NO
We saved our keys, resuming OTR session negotiation
Failed remove class A identity -- continuing with otther identities {error: %{public}@, identity: %{private}@}
Failed remove class C identity -- continuing with otther identities {error: %{public}@, identity: %{private}@}
Missing publicLegacyData -- returning NO {error: %{public}@, publicContainer: %{private}@}
Registered legacy data is empty -- returning YES {error: %{public}@, config: %{private}@}
Registered legacy data doesn't match current data -- returning YES {registeredLegacyData: %{private}@, publicLegacyData: %{private}@}
Missing publicNGMIdentityData or publicNGMPrekeyData -- Not checking ngm data {error: %{public}@, publicContainer: %{private}@, publicNGMIdentityData: %{private}@, publicNGMPrekeyData: %{private}@}
Missing ngmVersionData -- not checking ngm data {error: %{public}@, publicContainer: %{private}@}
Registered ngm data is empty -- returning YES { error: %{public}@, config: %{private}@}
Registered ngm identity data doesn't match current data -- returning YES {registeredNGMIdentityData: %{private}@, publicNGMIdentityData: %{private}@}
Registered ngm prekey data doesn't match current data -- returning YES {registeredNGMPrekeyData: %{private}@, publicNGMPrekeyData: %{private}@}
Registered ngm data version is empty -- returning YES {error: %{public}@, config: %{private}@}
Registered ngmVersionData doesn't match current data -- returning YES {registeredNGMVersionData: %{public}@, publicNGMVersionData: %{public}@}
Application service key needs update
KT Registration Data needs update
Failed to get identity data protection class {expectedProtectionClass: %ld, error: %{public}@, identity: %{private}@}
Failed to migrate identity data protection class {error: %{public}@, identity: %{private}@, protectionClass: %ld}
Requesting roll of encryption portion of registered identity
Roll of encryption portion of registered identity requested, but we've already generated an unregistered identity -- ignoring request
returning NO from _shouldRegenerateRegisteredIdentity becuase allowRegenerateRegisteredIdentity == NO
Scheduling timer for purge of previous identity {delay: %f}
Already scheduled timer for purge of previous identity
Purge previous identity timer fired!
Scheduling timer for regneration of registered identity {delay: %f}
Regenerate identity timer fired!
We no longer need to re-generate our identity -- continuing without re-generation
Queried _purgePreviousIdentityDelay {purgeDateNumber: %{public}@, delay: %f}
Queried _identityRegenrationDelay {regenerationIntervalNumber: %{public}@, delay: %f}
Error retrieving contacts {error: %@}
GUID %@ Prioritizing tokens %@
GUID %@ Constructed %lu fanouts
GUID %@ finished constructing fanout %@
%s:%d %{private}@
Invalid encryption parameters (using) -- failing {publicDeviceIdentityContainer: %@, fullIdentity: %@, inputDataLength: %llu, identifier: %@}
Using full identity: %@
   Public/Private encryption failed with error: %@
Invalid encryption parameters (used) -- failing {publicDeviceIdentityContainer: %@, fullIdentity: %@, inputDataLength: %llu, identifier: %p}
NGM encryption failed {error: %@}
Invalid decryption parameters -- failing {publicDeviceIdentityContainer: %@, fullIdentity: %@, inputDataLength: %llu, identifier: %p}
   Public/Private decryption failed with error: %@
Using previous full identity: %@
Failed to diversify key for signing { tempIdentity: %@, diversifier: %@, mpError: %@ }
No diversifier supplied for an application key. Failing...
Found key index has unregistered identity {keyIndex: %u, unregisteredIdentity: %{private}@}
No config for key Index %u %@
No fullIdentity for key Index %u %@
Per service application key manager noting registration of keys { keyIndex: %u, keyData: %{private}@ }
Failed to get config for registered key index {keyIndex: %u}
Failed to get unregistered identity for key index {keyIndex: %u, isRegistered: %@}
Failed to get public unregistered identity for key index {keyIndex: %u, unregisteredIdentity: %{private}@}
Failed to get expected data for key index {keyIndex: %u, unregisteredIdentity: %{private}@, error: %{private}@
Completed registration of previously unregistered identity for key index {keyIndex: %u, unregisteredIdentity: %{private}@}
Completed registration does not match unregistered identity at key index {keyIndex: %u, unregisteredIdentity: %{private}@}
No registered or unregistered identity... generating {keyIndex: %u}
generatedIdentityForKeyIndexFailed {keyIndex: %u, error: %@}
Saving isRegistered value for application key, {keyIndex: %u, isRegistered: %@}
Removing identities from keychain because deleteIfNull == YES and no config present, {keyIndex: %u}
Purged identity and removed it from keychain {keyIndex: %u}
Failed to purge identity or remove keychain reference {error: %{public}@, keyIndex: %u}
Failed to setup RTCReporting to report EC metric { error: %@ }
Exception handling _strictlyUnarchivedObjectOfClasses: %@
Failed to get payload metadata {payloadMetadataError: %@, payloadMetadataData: %@}
Finished capturing AutoBugCapture diagnostics for decryption failure { context: %@, legacySuccess: %@, ECSuccess: %@, error: %@ }
%@ instance created with a dead file descriptor!
Created with {socket:%d}
Dealloc'ing IDSSocketPairConnection without ending the session
%@ endSession at %@!
%p: reset the stall detector
Error %d received on {socket:%d}
Remote side closed the connection, cleaning up {socket:%d}
Removing pending OTR messages for protection class %u.
Removed %lu pending OTR messages.
Process stored data message (Encrypted:%u, SN:%u, StreamID:%u).
FragmentedMessage: can't reassemble message from %u pieces
Recv OTR message for %@-%ld-%u E:%u SN:%u FI:%u D:%u T:%@
_processBytesAvailable: read %d bytes
Error when receiving bytes, closing connection
Remote side closed the connection, cleaning up
Received message size: %u, maximum allowed size: %u
_processIncomingMessage failed.
BPS: avg %f instant %f
unknown object in _outgoingMessageArray
Send OTR message for %@ E:%u SN:%u FI:%u T:%{public}@.
Connected socket closed, cannot send data, cleaning up...
No data to send on socket, suspending {socket:%d}
Failed to queue outgoing data - possible message fragmentation issue
Sent %ld bytes. Remaining outgoingData %lu {socket:%d}
{socket:%d} timeout, ignoring ...
got send error %d, cleaning up {socket:%d} ...
%@ removing {socket:%d} from transport thread!
SocketPairConnection (%p) add OTR blocks (enc:%p dec:%p).
Done checking for system signed in account { identifier: %@, systemAccount: %@ }
Did not find account type { identifier: %@, accountsError: %@ }
Asked to send opportunistic data {identifier: %@, service: %@, uniqueID: %@, options: %@, dataLength: %llu}
Asked to cancel opportunistic data {identifier: %@, service: %@}
Passed dice roll {destination: %@, data: %@}
Message for opportunistic data got response {identifier: %@, guid: %@, responseCode: %lu, error: %@, lastCall: %@}
Sent opportunistic message {identifier: %@, guid: %@, service: %@, accountUUID: %@, destination: %@}
Failed to find account for opportunistic send {identifier: %@, accountUniqueID: %@}
Fetched Opportunistic Send Percentage from Bag {opportunisticSendPercentage: %d}
Could not create IDSPushHandler for session
Sending MESSAGE to %@, %@ <%@>
%@ - No account with unique ID %@ found to send a message, bailing...
My token -> %@
No destinations to send message to, ignoring...
sendMessage - using fromID %@ given aliases %@  destinations: %@
sendMessage - requires lack of properties {requiredLackOfCapabilities: %@}
sendMessage - requires properties {requiredCapabilities: %@}
Message %@ got response code %lu error %@ lastCall %@
This Phone Continuity session supports the local message. Trying the local...
Received MESSAGE %@ from %@, %@
Received END %@ from %@, %@
Sending REINITIATE (subcommand %@) %@ to %@, %@
No device signatures needed, no services were passed in.
Reporting AccountKeyFetchTimeMetric: { Time Interval: %f}
Error getting account key for service: %@
Got all account keys and signatures
Timed out signing device keys and getting account key from Transparency.
General Report Spam response: %@
Bundle {isAdvertising:%@}
Bundle has no principal class
Failed to initialize bundle
Plugin class is nil
Protocol is nil
Plugin initialized successfully
Plugin does not respond to any useful messages
Plugin failed to initialize
Plugin class "%{public}s" does not conform to protocol
Replay committer told to hold block { key: %@, block: %p, dataLength: %ld }
Nil parameter given to replay commiter. Calling block now.
Error committing replay state { error: %@ }
Replay committer told to commit block { key: %@ }
Replay committer committing block { key: %@, block: %p }
Error committing replay state { key: %@, error: %@ }
Starting pending registrations...
Skipping this registration for heartbeat consideration, it is an SMS one - and the SIM is not present: %@
    => %@
   * NOT sent, forcing through the registration controller
   * Registration says it can't register, not registering: %@
   * sent
...Done
Server heartbeat hit
Skipping this registration for heartbeat consideration, it is an Apple ID one - and it apparently can't register: %@
*************** Heartbeat: We need to register now! {timeToNextRegister: %f} *********************
  => *NOT* adding pending registration: %@, we're currently registering
  => adding pending registration: %@
  => *NOT* adding pending registration: %@
Registrations pending heartbeat: %@
Updating registration heartbeat
Posting pending registration heartbeat update
Starting registration heartbeat with interval: %f
                    Time to next registration: %f
                  Setting heartbeat timer for: %f
Stopping registration heartbeat
We missed a heartbeat, we should fire
Updating heartbeats if necessary
Registration state changed, re-checking registrations
Bag reloaded, checking intervals
These differ, reseting timer!
Adding registration info to heartbeat: %@
Removing registration info from heartbeat: %@
Using random heartbeat override value of %d seconds
Using heartbeat override value of %d seconds
Non-sensical heartbeat value: %@ from server, using default: %f
Initing IDSUTunPeer %p %@
btuuid %@ isDefaultPairedDevice: %@ pipePeripheralUUIDString: %@ waitForDefaultPairedDevice: %@ uniqueID %@ shouldUseIPsecLink: %@
 Deallocing UTunPeer %p
Sending message with unexpected data protection class (%d) - using C
Priority is none for performBlock
Priority is %d - defaulting to Urgent
%@ ignoring btuuid update from %@ to %@
sendAckForMessageWithSequenceNumber: class %d priority %d
sendAckForMessageWithSequenceNumber: using connection %@
%s: self %p reporting stats for %@ %@
%s: self %p reporting stats for sockets %@
Enabling power logging for sockets {_shouldUseIPsecLink: %@}
%s: self %p Enabling power logging for transport stats
%s: self %p Will log the current transport stats and restart timers.
%@ logCurrentTransportStatsAndResetTimers shouldLog=%@, _shouldUseIPsecLink=%@
LOCALSETUP: %@ has been told to localSetupInProgress %@
enableConnection for peer %@
enableCloudConnection for peer %@
enable connection %@.
disabling connection %@
disable Connection for peer %@:%p withReason %ld
disable connection %@.
disable cloud connection for peer %@:%p withReason %ld
_checkServicesPreferringInfraWiFi %u: Service %@ has %llu delivered messages
_checkServicesPreferringInfraWiFi %u: InfraWiFi received %llu -> %llu packets. Client sockets received %llu -> %llu packets. Total delivered %llu -> %llu
_checkServicesPreferringInfraWiFi %u: No message delivered and no client socket packet received for services preferring InfraWiFi - disabling it now
Local Setup is not complete yet - ignore preferInfraWiFi for %@
Local Setup is not complete yet - ignore setLinkPreferences for %{public}@
UTUNPeer sendMessage
sendMessage: %@ priority: %@ messageType: %@
Bluetooth is required but we are not nearby - failing message %@
Local WiFi is required but we are not discovered by Rapport - failing message %@
%@ %@ %@ isConnected changed to %@
%@ wasConnected? %@ isConnected in aggregate? %@
Enabling %@ Cloud Connections on this peer
_pendingCloudEnable: %@, _supportsCloudConnections: %@, _isPeerAlwaysConnected: %@
%@ LinkManager did connect cbuuid %@ - enabling connections
continuityConnectCount for peer %@ is changed to %d.
manager:cbuuidDidConnect:%@ isAlwaysConnected:%@
Peer %@ is already locked for btUUID %@, ignore peer %@.
Enable peer %@ now. (isDefaultPairedDevice %@   lockedPeer %@)
IGNORING %@ LinkManager did connect cbuuid %@ - enabling connections (%@)
cbuuidDidFailToConnect for peer %@, disabling peer connections!
Skip handling _handleCBUUIDFailToConnect for Phone continuity local message case.
%@ LinkManager did disconnect cbuuid %@ - kicking our disable timer
Tearing Down Global Link For %@ Due To Inactivity
%@ isPeerAlwaysConnected is changed to %@
%@ forceOTRNegotiationForTopic is no-op when ipsec is used
Loading IDS keychain data with account %@
  => Done loading IDS keychain data (loaded %ld bytes)
Saving IDS keychain data with account %@
 => Done saving IDS keychain data
Device is not in keychain cloud circle {status: %ld, error: %@}
   OTR encryption failed with error: %d
   OTR decryption failed with error: %d
Retrieved opportunistic cache {cache: %@, connection: %@}
Connection not entitled to retrieve opportunistic cache -- failing {connection: %@}
RegisterDuringBuddy feature flag set to YES.  Allowing registration.
Checked whether system setup dependencies are complete { haveDependenciesCompleted: %@, accountType: %@, hasSetupCompleted: %@, isPhoneNumberAuthenticationDuringSetupAllowed: %@, isAppleIDRegistrationDuringSetupAllowed: %@ }
 SIM State says cannot register
 SIM is not inserted, cannot register
 => Checking %@
 => hit!
Registration controller starting up (%@)
*** Lockdown state is expired, not allowing registration
Returning device support registration supported: %@
System does not support SMS identification
System does not support Apple ID identification
We don't support this unknown registration type { registrationType: %d }
System does not support FaceTime
System does not support Calling
System does not support Multiway
System does not support iMessage
System does not support IDS
We don't support this unknown registration service type { serviceType: %@ }
We can't register this: %@
Registration controller register
Registration request: %@  (Environment: %@)
Cannot register, unsupported
Cannot register, invalid push token: %@
Unsupported registration on this system: %@
Cannot register, phone number registration or authentication are disabled { controlStatus: %lld }
Request to register sms identified info: %@
We can try to migrate this guy: %@
Request to register apple ID based info: %@
Sending authentication for registration for new auth token and auth cert: %@
Sending IDS authentication for registration with existing auth token: %@
Sending IDS authentication for registration with existing auth token/cert: %@
Ensuring validation checks for: %@
Registration looks correct, ensuring validation checks: %@
Request to register Home Number for info: %@
Attempting to register unknown registration type (%d): %@
This registration is missing region information, despite being already authenticated, let's fix that: %@
  => We found a good one we can pull from, let's fix ourselves using that: %@
We were told that we're done authentication here, but we have no token... bailing register
...trying to IDS Auth or Register: %@
...we didn't authenticate, and we can't ids authentcate or register. not good!
Request to unregister: %@  (Environment: %@)
Removing registration info from keychain
Failing Home Number registration because no authentication cert on registration: %@
Ignoring registration updated, registration is disabled: %@
Ignoring registration starting, registration is disabled: %@
Registration controller notify registration failure
Ignoring registration failure, registration is disabled: %@
Registration controller notify registration success
Ignoring registration success, registration is disabled: %@
Ignoring succeeded registration, registration is disabled: %@
Finished capturing AutoBugCapture diagnostics for registration failure { context: %@, sessionID: %@, error: %@ }
** Empty vetted emails, we should make sure to query them
Failed HTTP registration with info: %@       error: %d
Ignoring need for new identification, registration is disabled: %@
Ignoring failed identification, registration is disabled: %@
SMS agent requested new identification
Ignoring succeeded IDS Authentication, registration is disabled: %@
Failed IDS Authentication with info: %@ error: %d info: %@
Ignoring failed IDS Authentication, registration is disabled: %@
IDS Authentication failed - Login failed
  This was an SMS reg
This was an apple ID reg
This was a device ID reg
Failed, retry %d
 => Added confirmed emails: %@
Let's re-auth, retry %d
Too many retries, failing
Home Number provision request had expired auth token, renewing {  retries: %d, registration: %@ }
We still have no vetted email response for: %@   waiting....
We still have no default profile response for: %@   waiting....
We already have a region ID, skipping query
We were told that we're done authentication here, but we have no token... not doing anything
This was just a simple auth, we're done here
Ignoring succeeded current emails request, registration is disabled: %@
 * Empty vetted emails, sending off handles gathering
 **** missing auth cert, can't send vetted email request
Empty region ID, querying initial region
Non empty region ID: %@
Not reprovisioning temporary phone because we already have an auth cert for %@
Registration Controller - sending IDS authentication: %@
Ignoring succeeded initial region query, registration is disabled: %@
Registration Controller - succeeded authentication: %@
Ignoring succeeded authentication, registration is disabled: %@
Registration Controller - succeeded region validation - registration info: %@   regionID: %@  phoneNumber: %@  extraContext: %@  verified: %@
Ignoring succeeded region validation, registration is disabled: %@
Ignoring failed authentication, registration is disabled: %@
System not setup, ignoring auth failure and not proceeding
Authentication failed. Notifying, and unregistering %@
Ignoring succeeded link handles confirmation, registration is disabled: %@
Calculated states for _updateNotifyState {foundCalling: %@, foundFaceTime: %@, foundiMessage:%@, foundScreenSharing: %@}
Adding registration to list of tracked registrations: %@
  => Adding registration: %@
Removing registration from list of tracked registrations: %@
Adding registration to list of active registrations: %@
Removing registration from list of active registrations: %@
Device name changed from %@ to %@
Device name was updated from %@ to %@  (Registration: %@)
  => Deferring registration for device name change, we're locked
  => Sending registration for device name change
First unlock, checking deferred registrations: %d
  => Sending deferred registration: %@
Attempting to post Home Number notification before alert { displayingAddNumberPrompt: %@, bypassOngoingPNR: %@, ongoingPNR: %@, phoneUser: %@, tempUser: %@ }
Displaying should add phone number alert
User didn't hit default button on disable phone number alert
User hit no to disable phone number alert -- ignoring
Sending SIM deactivation request for label ID %@
Too many SIM deactivation events. Not sending request %@
Missing MainID, Not sending IDS Authentication/Register for: %@
Missing ProfileID, Not sending IDS Authentication/Register for: %@
Missing regionID, Not sending IDS Authentication/Register for: %@
Missing regionBasePhoneNumber, Not sending IDS Authentication/Register for: %@
Sending IDS Authentication for: %@
Sending IDS Registration for: %@
Not sending IDS Registration or Authentication for: %@
removing token %@ from %@
DeliveryContext Timestamp is %@
Processing response %ld for message %@
Message has been removed, Add Honeybee support here to grab logs from the other side who sent this FromURI:%@ ToURI:%@ Token:%@ 
Bad signature {message: %@, localURI: %@, remoteURI: %@, remotePushToken: %@, sessionToken: %@, service: %@}
 current sessionToken: %@
Message was rate limited from the server, failing message (%@ -> %@)
Triggered auto bug capture for rate limiting {session : %@, error: %@}
Unknown Error, Failing message
Msg with GUID: %@ & i:%@ is missing 255s
Chunk: %@
WasLast?: %@
Error retrieving data from last resort cache: { error: %@ }
Flushing peer tokens, in hopes this resolves in the next error
Need to query for encryption but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}
Missing encryption keys -- querying {remoteURI: %@, localURI: %@, service: %@}
Encryption query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}
Need to query for decryption but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}
Missing decryption keys, need to query {underLimit: %@, remoteURI: %@, localURI: %@, service: %@}
Decryption query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}
Need to query for signing verification but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}
Missing signing verification key, need to query {underLimit: %@, remoteURI: %@, localURI: %@, service: %@}
Signing verification query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}
Tried to PK to default paired device!! -- failing
Tried to encrypt to nil device ID -- failing
Missing identity to encrypt with {deviceID: %@}
Missing identity to decrypt with {deviceID: %@}
Missing device encryption keys -- querying {deviceID: %@}
Device encryption query completed {success: %@, deviceID: %@}
Error committing replay state for device ID decryption { error: %@ }
Missing device decryption keys -- querying {deviceID: %@}
Device decryption query completed {success: %@, hasKeyAfterQuery: %@, deviceID: %@}
%@ has valid SKM: %@ for sessionID: %@
SKM: %@
*** options : %@
There was an error creating the managers for IDSDSession.  Aborting...
IDSDSession::init { self: %p, uniqueID: %@, instanceID: %@, isLightweightParticipant: %@}
[!] This session will be suppressing client notifications { self.sharedState.uniqueID: %@ }
com.apple.private.alloy.phonecontinuity: set connectionCountHint to: %@
use QR directly for %@.
 self.sharedState.connectionCountHint: %lu, [connectionCountHint unsignedIntegerValue]: %lu
Created session (%@) %@ with destinations %@
Skip IDSClientChannel because this is a lighweight participant.
Could not create session: %@ because failed to get this device push token for the service: %@
Destinations are %@
IDSDSession::dealloc { self: %p, uniqueID: %@, instanceID: %@ }
Destroyed session %@
GFTMetrics will report %@
time difference between MKM over push and MKM over QR QUIC: %.3f
_reportRTC summary: %@
didReceiveReport, broadcaster: %p for session: %@
No valid RTC reports to report
%s: session %@ connection %p
reportMKMReceived received first MKM at %f time
reportFirstMKMReceivedFromPush: get allocbind RTC report, time of allocbind response: %f, set the duration to %d ms
reportMKMReceivedOverPushViaCacheForParticipantID: token not found for participantID %llu
<%@> _lightweightParticipantSync: generationCounterLSB: %u, currentGenerationCounterLSB: %u, request up-to-date lightweight participants
Client channel connected %@ (connections claimed %lu)
Lost race condition - missing connection for extra connection %lu
IDSClientChannel has excessively cached too many packets. Invalidating IDSClientChannel...
IDSClientChannel is nil - dropping packetBuffer %p (length %lu) metadata %p metadataSize %d
IDSClientChannel %p closed
writeToClientChannel: there is no real packet or metadata.
Added cachedData - total %lu cached client data to send
greater than threshold:  [clientChannel excessiveCachingCount]: %d
writeToClientChannel: current data cached time: %f
invalid client channel: currentTime: %f, _channelDataCachedTime: %f, dataCachedDuration: %f, clientChannelTimedout: %f
%p: writeHandler: IDSDSession %p
_checkAndSendCachedDataForClient: clear cached data time
Have %lu cached client data to send
_checkAndSendCachedDataForClient: there is no real packet or metadata
generateClientChannelDataTest: wrote %d test metadata (size %u) into client channel %@
overflowClientChannelDataTest wrote %d test metadata (size %u) into client channel %@
got data %ld from socket %d clientChannel %@
<%@> read nonfatal failure errno %d
<%@> read failed errno %d
<%@> read returned 0 bytes errno %d
_connectSocketDescriptor: ClientChannel read error %@
_connectSocketDescriptor: clientType: %u, end session
_connectSocketDescriptor: strongSelf: %p, not ending session because we have not been told to
_connectSocketDescriptor: ClientChannel or Session has been invalidated; not writing
Client channel read packetBuffer %lu metadata_size %lu error %@ for socket %d
Bug in client: Client channel read only metadata for socket session - dropping metadata_size %lu for socket %d
<%@> write failed to send all bytes %d < %d
<%@> write failed connection terminated %d
<%@> write nonfatal failure errno %d
<%@> write failed errno %d
socket %d connected to IDSClientChannel %p
kClientChannelMetadataType_TotalDatagramCount %u
kClientChannelMetadataType_TotalDatagramCount should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_CurrentDatagramCount %u
kClientChannelMetadataType_CurrentDatagramCount should be 1 byte, not %u bytes, field: %u
got PacketLinkID %d [%013.6lf]
kClientChannelMetadataType_PacketLinkID should be 1 byte, not %u bytes, field: %u
got trafficClass %u [%013.6lf]
kClientChannelMetadataType_TrafficClassKey should be %u byte, not %u bytes, field: %u
got DSCP %u [%013.6lf]
kClientChannelMetadataType_DSCPKey should be %u byte, not %u bytes, field: %u
got invalid streamIDCount %u
got streamIDCount %u
got streamID %u
kClientChannelMetadataType_StreamIDsKey: size mismatch (%u != %u), ignore.
kClientChannelMetadataType_CountPacketKey should be 1 byte, not %u bytes, field: %u
got Channel Priority %u [%013.6lf]
kClientChannelMetadataType_PriorityKey should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_OptOutPriorityFilter should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_TransitionPacketFlag should be 1 byte, not %u bytes, field: %u
got Participant ID %llu [%013.6lf]
kClientChannelMetadataType_PriorityKey should be 8 byte, not %u bytes, field: %u
got probeGroupID %u [%013.6lf]
kClientChannelMetadataType_ProbeGroupIDKey should be 2 byte, not %u bytes, field: %u
got connectedLinkID %d connectedLinkAttributes %u
kClientChannelMetadataType_LinkConnected should be 4 bytes, not %u bytes, field: %u
got disconnectedLinkID %d
kClientChannelMetadataType_LinkDisconnected should be 1 byte, not %u bytes, field: %u
got defaultLinkID %d
kClientChannelMetadataType_DefaultLinkID should be 1 byte, not %u bytes, field: %u
got ratType %u
kClientChannelMetadataType_RATChanged should be 1 bytes, not %u bytes, field: %u
got basebandRegKey %lu (linkID: %d)
kClientChannelMetadataType_BasebandRegistrationKey should be 4 bytes, not %u bytes, field: %u
got kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey %u
kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_BasebandQueueFlushPayloadKey should know its size. needs kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey
got basebandQueueFlush %@
kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_DiscardLinkIDsKey %@
kClientChannelMetadataType_KeepAliveLinksKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_PreConnectionDataSizeKey %u
kClientChannelMetadataType_PreConnectionDataSizeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_PreConnectionDataKey should know its size. needs kClientChannelMetadataType_PreConnectionDataSizeKey
got preConnectionData %@, size:%u bytes.
sendSKEData failed with error: %@. Will retry.
kClientChannelMetadataType_PreConnectionDataKey should be %u bytes, not %u bytes, field: %u
got updateQoSIsGood %@ (linkID: %d)
kClientChannelMetadataType_UpdateQoSIsGoodKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_QueryRSSI
kClientChannelMetadataType_QueryRSSI should be %u bytes, not %u bytes, field: %u
got maxBitrate %u (linkID: %d)
kClientChannelMetadataType_MaxBitrateKey should be %u bytes, not %u bytes, field: %u
got the process PID %d
kClientChannelMetadataType_ProcessIDKey should be %d byte, not %u bytes, field: %u
kClientChannelMetadataType_DebugDataTransferTypeKey %d
kClientChannelMetadataType_DebugDataTransferTypeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_DebugDataTransferKey got the group ID %@
got kClientChannelMetadataType_EncryptionInfoKey %@ group: %@
kClientChannelMetadataType_EncryptionInfoKey FALSE. We won't pass the encryption information to the client.
kClientChannelMetadataType_EncryptionInfoKey should be 1 byte, not %u bytes, field: %u
got kClientChannelMetadataType_ForceUpdateEncryptionInfoKey
kClientChannelMetadataType_ForceUpdateEncryptionInfoKey coudln't get the group ID for the session %@!
kClientChannelMetadataType_ForceUpdateEncryptionInfoKey should be 1 byte, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_StatsKey.
Couldn't decode kClientChannelMetadataType_StatsKey bytes into NSDictionary
kClientChannelMetadataType_RemoteDeviceVersionKey should be %u bytes, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_SessionInfoKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_SessionInfoKey
got statsID %u
kClientChannelMetadataType_StatsID should be 2 byte, not %u bytes, field: %u
_extractFieldBytesFromMetadata report dictionary: could not read MKI
_extractFieldBytesFromMetadata report dictionary: could not read MKI as UUID
_extractFieldBytesFromMetadata report dictionary: could not read times
kClientChannelMetadataType_PacketUUID should be %u bytes, not %u bytes, field: %u
kClientChannelMetadataType_ExpireTimestamp should be %u bytes, not %u bytes, field: %u
kClientChannelMetadataType_WiFiAssistEnableKey should be %u bytes, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_StartLinkProbingKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StartLinkProbingKey
Couldn't get NSData for kClientChannelMetadataType_StopLinkProbingKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StopLinkProbingKey
Couldn't get NSData for kClientChannelMetadataType_QueryLinkStatusKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_QueryLinkStatusKey
Couldn't get NSData for kClientChannelMetadataType_StatsRequestData.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StatsRequestData
Couldn't get NSData for kClientChannelMetadataType_flushLinkProbingStatusKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_flushLinkProbingStatusKey
Couldn't get valid kClientChannelMetadataType_MKMParticipantIDsKey.
kClientChannelMetadataType_MKMParticipantIDsKey: size: %u, count: %u
Couldn't get URI for MKMParticipantID %llu
participantIDArray: %@
kClientChannelMetadataType_NeedsHBHEncryption should be %u byte, not %u
kClientChannelMetadataType_IsUPlusOneEnabledKey should be %u bytes, not %u bytes, field: %u
kClientChannelMetadataType_EncryptionSequenceNumber should be %u bytes, not %u bytes, field: %u
kClientChannelMetadataType_RetransmittedPacket should be %u byte, not %u
kClientChannelMetadataType_NonRetransmittablePacket should be %u byte, not %u
kClientChannelMetadataType_ChildConnectionID should be %u bytes, not %u bytes
Unknown metadata type: %u
_connectQRDirectlyToClientChannel: ClientChannel read error %@, self.sharedState.state %d
_connectQRDirectlyToClientChannel: state: %u
_connectQRDirectlyToClientChannel: strongSelf: %p, not ending session because we have not been told to.
not sending to UTunController - currentDatagramCount %u totalDatagramCount %u
Can't send more than %u over the compound data channel! totalDatagramCount %u
not sending to UTunController - packetBufferLength %d currentDatagramCount %u totalDatagramCount %u
Client channel read datagram_size %lu metadata_size %lu sendResult %s processTime %0.6lf sendTime %0.6lf [%013.6lf]
QR directly connected to IDSClientChannel %p
cachedSessionInfo is nil, requestType: %lu
%@: requestSessionInfoWithOptions failed! Couldn't get the cached response from QRAllocator.
%@: requestSessionInfoWithOptions for groupID %@ relayGroupID %@ relaySessionID %@
%@: requestSessionInfoWithOptions doesn't support the requestType: %ld
requestURIsForParticipantIDs: could not find URI for participant id: %@
requestURIsForParticipantIDs: request id %@ found %lu participants.
%@: _sendingOfflineActiveParticipantInfoRequest for groupID %@ relayGroupID %@ relaySessionID %@
formAndEncryptDataBlob: no valid plainDataBlob
couldn't encrypt dataBlob: %@
type: %d, encrypted blob: %@ plain blob: %@, localSKI: %@, encryptedData: %@
connectQRServer failed due to invalid parameter.
User already left group %@; don't connect
connectQRServer for group %@ failed due to missing (params %p, participantID %@, relaySessionID %@, participantData %@)
Connect to QR server for %@. (sharedSession:%@, isInitiator:%@, isLegacy:%@, clientType:%d)
Connect to QR server failed for %@ with error %@.
Sending server message QR metrics report for session %@ end reason %d, ua: %@
Finished sending server message QR metrics report for session %@ delivery error %@
Failed sending server message QR metrics report for session %@, delivery error %@
Connect to QR server succeeded for %@.
Completed send of join notification fanout message { groupID: %@, success: %@ }
lightweight participant: create keys
Cannot fan out the join notification to the group, no groupID!
Not in join state, group = %@, state = %d
Failed to receive all APNS courier acks for reliable join notification before timeout -- ending session { groupID: %@ }
Starting timeout block for reliable join notification delivery { groupID: %@, timeout: %f, timeoutBlock: %@ destinations: %@ }
Not starting timeout block for reliable join notification delivery { groupID: %@, timeout: %f, destinations: %@ }
Canceling timeout block for reliable join notification delivery { groupID: %@, timeoutBlock: %@ }
Triggering early execution of timeout block for reliable join notification delivery { groupID: %@, timeoutBlock: %@ }
IPsecLink is enabled. UTun bypass: %@ service: %@, session: %@.
UTun bypass: %@ service: %@, session: %@.
openSocketToDevice deviceID %@, self.sharedState.useQRDirectly %@, _isFaceTime %@
open socket for session, byPassUtun: %d
Open socket for session complete (socket: %d, initial link type:%d) (error: %@)
Open socket for session complete (extra #%d) (socket: %d) (error: %@)
sessionStartWithSocketDescriptor socketDescriptor %d, bypassUtun: %@
set initial link type %d for session %@.
received delayed QR connection %@ for an accepted session
Retry sendSKEData failed with error: %@. Give up.
%s IDSSessionID is nil!
%s - We're already listening on socket %d
Starting to listen on raw client socket %d
Cleanup session: %@
REPORT RTC: %@
Releasing the client channel %p
%@ cleanupSessionWithCleanStatus: shouldCleanStatus: %@, _isLightweightParticipant: %@
%@ cleanupSessionWithCleanStatus: no need to clean session status
Deleted localUnauthenticatedFullIdentity from keychain {identity: %@}
Failed to delete localUnauthenticatedFullIdentity from keychain {error: %@, identity: %@}
disconnectGlobalLink failed with error %@
Reconnect initiated By TU
Sending END to %@, %@ <%@>
Ending session with data
Ending session
notifyLeaveToGroup and sessionDidLeaveGroup for group session %@
Didn't fan out the leave notification, the group session %@ is already ended!
Cannot fan out the endSession leave notification to the group, no groupID!
The client left the group session. IDSGroupSession can be removed. _groupStatusNotificationParams.participantID = %@
Resetting preferences for service %{public}@
Closing socket for session
Unhooking and closing socket descriptors from TransportThread %@ (possibly not on TransportThread)
Made options to open socket %@
Looking for device unique ID in: %@
  => Push token: %@
    => Found unique ID: %@
  => No unique ID found
Looking for device token in: %@
  => No token found
Notifying client session %@ stopped with reason %d
Session is already ended, ignoring...
Session stopped notification suppressed
Enabling audio ? %@
Muting ? %@
Setting preferences %@
setRequiredCapabilities triggered leave to unsupported members {groupID: %@, needToSendJoin: %@, needToSendLeave: %@}
setRequiredCapabilities not triggering a leave to unsupported members {groupID: %@, needToSendJoin: %@, needToSendLeave: %@, groupSessionState: %d}
%@ session did start %@ with error %@
%@ session did stop with error %@
Session: %@ received error: %@
Invalid error type posted to session: %@   error: %@    class: %@
Ignoring error, we're already dead anyway!
Data size is bigger than %d, ending call...
Data size is too small, ending call...
Magic number doesn't match 0x%04x, ignoring...
Malloc error while decrypting, ending call...
Stream decryption transform error %d
Received data Viceroy -> Daemon  (after decrypt data hash: %lu)  (length: %lu)
Sending data Daemon -> Viceroy  (before encrypt data hash: %lu seq: %u)  (length: %lu)
Malloc error while encrypting, ending call...
Stream encryption transform error %d
use TCP for QR, port: %u
use TCPSSL for QR, port: %u
<%@> add the new QR event for the RTC report: %@
<%@> _sendQREventToAVC failed to encode qrEvent for group %@ (error: %@)
<%@> link:%@ didDisconnectForDeviceUniqueID:%@ cbuuid:%@
didReceiveMaterialInfo: SME disabled
didReceiveMaterialInfo type: %d, ignoring (handled separately)
didReceiveMaterialInfo received material info: %@
didReceiveMaterialInfo could not decode content. Data: %@
didReceiveMaterialInfo received material info content: %@
didReceiveMaterialInfo could not decode payload. Content: %@
didReceiveMaterialInfo could not get fromURI for participant %llu
didReceiveMaterialInfo could not get push token for participant %llu
didReceiveMaterialInfo could not process material because ownerParticipantId is 0
didReceiveMaterialInfo: could not process material from %llu for group %@ and session %@ since the originator of material is not in group membership: %@
didReceiveMaterialInfo failed to verify signature for info: %@ error: %@
Receiving Key Material (QUIC) [MKM] -- %f
didReceiveMaterialInfo failed processing MKM for participant %llu; payload %@; error: %@
Receiving Key Material (QUIC) [SKM] -- %f
didReceiveMaterialInfo failed processing SKM for participant %llu; payload %@; error: %@
Receiving Key Material (QUIC) [PreKey] -- %f
didReceiveMaterialInfo could not process preKey for participant %llu; no preKey found in payload %@
didReceiveMaterialInfo could not process preKey for participant %llu; no wrap-mode found in payload %@
didReceiveMaterialInfo could not process preKey for participant %llu; no creation-date found in payload %@
payload: %@, material.ownerParticipantId: %llu
didReceiveMaterialInfo unknown material type %d
didReceiveMaterialInfo did not receive signature: %@
didReceiveMaterialInfo ignoring material info; sessionID %@ does not match our sessionID %@
didReceiveMaterialInfo verifying signature: %@ matchesPayload: %@
<%@> link:%@ didConnectForDeviceUniqueID:%@ cbuuid:%@
<%@> link:%@ didConnectUnderlyingLink:%d linkUUID:%@ localAttributes:%@ remoteAttributes:%@
%s incorrect attribute length: %d
No need to send kClientChannelMetadataType_LinkConnected, <%@> useQR: %@, isFaceTimeCall: %@
<%@> link:%@ didReiceiveChildConnectionID:%@ forLinkID:%d
No need to send kClientChannelMetadataType_ChildConnectionID, <%@> useQR: %@, isFaceTimeCall: %@
<%@> link:%@ plugin didReceiveRequestToPurgeRegistration:%@
<%@> link:%@ plugin didReceivePluginDisconnect:%@
<%@> link:%@ didReceiveMappedParticipantsDict:%@ for linkID:%d 
didReceiveMappedParticipantsDict: breaking %lu element dict into %lu chunks.
<%@> link: %@ didReceiveEncryptedDataBlobs: %@
didReceiveErrorIndicationWithCode: %u for link: %@ <%@>
destinationsContainFromID: %@ is not in the destinations %@
Ignored updateMembers since destinations have not been changed.
updateMembers: newly added destinations: %@
Updated destinations for group %@ to %@ (triggeredLocally %@)
Updated destinations have lightweight status values: %@
Re-allocating due to new member
Resetting keys, sending membership change event for group %@, triggeredLocally: %@
No need to reset keys for group %@, triggeredLocally: %@
manageDesignatedMembers for group %@ to %@
manageDesignatedMembers doesn't have valid cached sessionInfo for group %@
removeParticipantIDs for group %@ to %@
removeParticipantIDs doesn't have valid cached sessionInfo for group %@
updateParticipantType: remote triggered, no groupID
updateParticipantType: unknown IDSGroupSessionParticipantType: %u
updateParticipantType: no valid cached sessionInfo for group %@
updateParticipantType: to: %@, wasLightweightParticipant: %@, type: %u, lightweightStatusDict: %@
<%@> updateParticipantType: reset MKM status for %@
updateParticipantType: no valid groupID
updateParticipantType: No need to change the type: wasLightweightParticipant: %@, type: %u, current: %@, lightweightStatusDict: %@
setGroupStreamInfo: sessionInfo[kIDSQRAllocateKey_StreamInfoSubscribedStreams]:%@, sessionInfo:%@, streamInfo.subscribedStreams:%@
Client data blob size is greater than push size limitation which is %ld and groupID: %@
joinWithOptions: participantData: %@, participantInfo: %@, handshakeBlob: %@
Participant query in process or defaults are not set for hardcoded QR session info, self.sharedState.groupID: %@, self.sharedState.destinations: %@
invalidateLatestResponse status: %d, reason: %@, error: %@
disconnectGlobalLink during leaving group session failed: %@
Cannot fan out the leave notification to the group, no groupID!
sendKeyMaterialMessage - message %{private}@ given aliases %@  destination: %@
sendKeyMaterialMessage - requires lack of properties {requiredLackOfCapabilities: %@}
sendKeyMaterialMessage - requires properties {requiredCapabilities: %@}
sendKeyMaterialData failed with error: %d
setServerDesiredKeyMaterials: SME disabled
updateServerDesiredKeyValueDeliveryMaterialsNeeded: SME disabled
updateServerDesiredKeyMaterials: SME disabled
Received the new MKM %lld milleseconds after the membership change event for group %@
_sendClientDecryptedDatabBlobs: unsupported type: %d
receiveAndDecryptEncryptedDataBlobs: type: %@, blobLength: %lu, standaloneBlob: %@, keyID: %@
_decryptReceivedEncryptedDataBlobsUsingSKMs, no encryptedBlobTypeCount, return
_decryptReceivedDataBlobsUsingSKMs: _typeToParticipantIDToDecryptedDataBlob count: %llu, _typeToKeyIDToEncryptedData: %@
couldn't decrypt data blob: %@, encryptedDataType: %d error: %@
haven't got keyID: %@
decryptedBlob: %@, keyID: %@, participantID: %@, type: %d
couldn't find valid participantID based on keyID: %@
count: %llu, %@
warning: _decryptReceivedDataBlobsUsingSKMs: couldn't find push token
_decryptReceivedDataBlobsUsingSKMs: no valid URI for participantID: %llu, group: %@
recvStableKeyMaterialForFrameworkCache for session %@. SKM: %@
requestMaterialsForParticipantIDs for session %@. participantIDs: %@; materialType:%d
requestMaterialsForParticipantIDs: SME disabled
Sending the session info request to update the active participant list...
URI to participantID mapping changed for sessionID: %@
Allocation failure for session %@, status = %d, code = %d
Missing push token at index %d. Replacing NSNull with nil.
Couldn't get the URI from the QRAllocate response for participantID: %llu.
not fastSync, return
update active lightweight participants: %@
update active participants: %@
currentLocalParticipantID: %llu, groupID: %@
Failed to get URI from QR allocate response
IDSDSession read handler called for %@ - result %s
Reinitiate called for session %@
Session %@ reinitiate called, but we don't support reinitiate, enableQuickRelay: %d, useQRDirectly: %d
Session %@ reinitiate called, but our current state is not connected (current state: %u)
Session %@ reinitiate called, but this session is with the default paired device
Session %@ reinitiate: sending request for initiator to kick off reinitiate flow
Session %@ reinitiate: disconnecting global link
disconnectGlobalLink during reinitiate failed with error %@
Unhandled reinitiate subcommand type %@ for session %@
Reinitiate request message received for session %@: %@
Reinitiate teardown message received for session %@: %@
Session %@ received reinitiate teardown message, but we don't support reinitiate
Session %@ received reinitiate teardown message, but our current state is not connected (current state: %u)
Session %@ reinitiate teardown: disconnecting global link
disconnectGlobalLink during reinitiate teardown failed with error %@
Reinitiate teardown ack message received for session %@: %@
Session %@ received reinitiate teardown ack message, but our current state is not reinitiating (current state: %u)
Session %@ reinitiate: setting up new QR allocation
Reinitiate bringup message received for session %@: %@
Session %@ received reinitiate bringup message, but our current state is not reintiating (current state: %u)
Session %@ reinitiate bringup: requesting allocation for recipient
Reinitiate bringup ack message received for session %@: %@
Session %@ received reinitiate bringup ack message, but our current state is not reintiating (current state: %u)
Reinitiate accepted relay-session-id %@
 invalid port %d
Failed type check! {key: %@, class: %@}
_wrapData: GFTKeyWrapping not available
IDSServerDesiredEncryptedDataSet: disableEncryptionForData, use plain data: %@
IDSServerDesiredEncryptedDataSet materialDataByID: error: %@
protectedData is nil, return
IDSServerDesiredEncryptedDataSet materialDataByID: encrypted the data for participantID: %llu, remote pub key: %@, data: %@, protectedData: %@
IDSSockAddrPairTable_Init failed with memory allocation
IDSSockAddrPairTable_Release
[%s-%s] already exists.
failed with realloc
increase capacity %d->%d
added pair [%s-%s], state (%ld), total %d pair(s).
IDSSockAddrPairTable_UpdatePairState - found no match for transactionID %@
IDSSockAddrPairTable_UpdatePairState - update state for [%s-%s] (%ld->%ld)
Nominate connection [%s(%u)-%s] is done, skip.
Nominate connection [%s(%u)-%s].
Nominate new connection [%s(%u)-%s].
Start echo (%d) for [%s(%u)-%s].
skip regular binding request
skip nominate binding request
send binding request %@ for [%s(%u)-%s].
failed to send binding request with error (%s)
cannot send echo request due to invalid state (%d).
send echo request (count:%d) for %s(%u)-%s.
failed to send echo request with error (%s)
NLDEBUG: SWIZZLE CALLED!
Quit - notifying about shutdown
Quit - shutting down daemon
Quit - goodbye!
*** Clearing ID status cache ***
*** Reloading Logging Settings ***
Unhandled signal: %d
Failed to set user dir suffix: %{darwin.errno}d
Failed to set io policy: %{darwin.errno}d
Launching IDS with updated queue architecture.
IDSAgent exception caught on main thread: %@
Received APNS Ack for GUID %@
Finished acks for GUID %@ success: %@ error: %@
OUTGOING-PUSH_FULLY_SENT:%@ SERVICE:%@
Finished sending GUID %@ success: %@ error: %@
We're not loaded; ignoring save to disk for cache %@
Loading cache with identifier %@
  => Underlying persister %@ is unavailable; not loading!
  => Loaded cache has %ld keys
Saving cache with identifier %@ => Will save cache to disk with %ld keys
  => Encoding...
  => Done encoding: %ld bytes
  => Skipping encoding, empty
Exception decoding persistent map -- throwing away {exception: %@, identitier: %@}
Error during Decoding %@
Missing KT Opt-In Check entitlement -- failing creation of IDSDXPCRegistration collaborator {connection: %@}
Failed to weak link UNUserNotificationCenter
Notification being posted with a none style { service: %@ }
Overriding URI %@ for pseudonym
Overriding URI %@ with contact name %@
Failed to weak link UN class required to post notification for uri %@
Loading image from %@, Does exist %@
Added firewall notification request {uri: %@, error: %@}
Told to post firewall notification {uri: %@}
Not posting firewall notification because service has a notification style of none {uri: %@, service: %@}
Not posting firewall notification because command is not initiated by the user {uri: %@, command: %@}
Not posting firewall notification because we are over limit {uri: %@}
Will present firewall notification %@
Did receive firewall notification response %@
Sent missing message metric to server { success: %ld, guid: %@, service: %@, reason: %ld, additionalInfo: %@ }
Cannot get participantsForGroupID, no groupID!
Found participants for group %@
notify Leave To Group
Server Bag provided us with a send timeout of %f 
Group status notification requires lack of properties {requiredLackOfCapabilities: %@}
Group status notification requires properties {requiredCapabilities: %@}
Group status notification requires properties -- manual {requiredCapabilites: %@}
Group status notification requires lack of properties -- manual {requiredLackOfCapabilities: %@}
Sending group status notification fanout message { GUID: %@, command: %@, commandContext: %@, waitForMadridAcks: %@, completionBlock: %@ }
Group status notification message callback received { GUID: %@, responseCode: %lu, error: %@, lastCourerAck: %@, lastCall: %@ }
Last Courier ack received for group status notification message { waitForMadridAcks: %@, pendingCompletionBlock: %@ }
Last Madrid ack received for group status notification message { waitForMadridAcks: %@, pendingCompletionBlock: %@ }
Sent messageID %@ to the destination %@ command %@ (account %@, fromID %@)
No Group, bailing...
Process incoming fanout message: %@, fromToken: %@, fromID: %@, specificOriginator: %@ fromStorage %@
Dropping group session participant update due to groupID mismatch { type: %lu, groupID: %@, groupUUID: %@ }
processIncomingParticipantUpdateMessage: We'll drop this participant update message for group %@ since %@ is not in this group!
Dropping group session participant update due to membership mismatch { type: %lu, fromID: %@, destinations: %@ }
Receive join from initiator: %@
Couldn't pass the join event to clients. There is no session for group %@ and the join push is not from Initiator.
Passing the join event to client/s. There is no session for group %@ but the join push is from Initiator
processIncomingParticipantDataUpdateMessage: Dropping due to groupID mismatch { type: %lu, groupID: %@, groupUUID: %@ }
processIncomingParticipantDataUpdateMessage: We'll drop this participant update message for group %@ since %@ is not in this group!
Dropping group session participant data update due to membership mismatch { type: %lu, fromID: %@, destinations: %@ }
Look up peer with URI: %@, push token count: %u
Skipping duplicate token %@
groupID: %@, sessionID: %@, %@
Could not look up the recipients' push tokens, IDs: %@, errors: %@ 
Looked up _groupMemberPushTokens: %@
Cannot find the push tokens, missing recipientIDs.
%s - No account found to build specificOriginator, bailing...
%s - No device found to build specificOriginator, bailing...
%s - No device push token found to build specificOriginator, bailing...
%s - No device identity found to build specificOriginator, bailing...
original fromID %@ -> resulting specificOriginator %@
Couldn't find the tokens for group %@
Coudln't find the URI for the given token for group %@. the pushToken is not NSData.
Coudln't find the URI for the given token %@ for group %@.
Broadcasting receivedGroupSessionParticipantUpdate:forTopic: {topic: %@, update: %@, context: %@}
Did not find a client to handle receivedGroupSessionParticipantUpdate:forTopic: -- dropping broadcast
Broadcasting receivedGroupSessionParticipantDataUpdate:forTopic: {topic: %@, update: %@}
Did not find a client to handle receivedGroupSessionParticipantDataUpdate:forTopic: -- dropping broadcast
plain: %@, encrypted: %@, decrypted: %@
plain: %@, encryptedAgain: %@, decryptedAgain: %@
Asked by idstool to clear caches!
Told to force renew account %@ on service %@
Connection is missing entitlement for replaying pushes
Received nearby change to %@ for device with uniqueID %@
Received connected change to %@ for device with uniqueID %@
Received cloud connected change to %@ for device with uniqueID %@
*** Clearing traffic ***
  == Incrementing %@ for service: %@   Requestor: %@  (Count: %d, GlobalCountForAdhocType%u: %@)
     Server daily global%@ budget is: %@   Current count is: %@
     **** We are over budget - Server daily global budget is: %@   Current count is: %@
     Server daily%@ budget is: %@   Current count is: %@
     **** We are over budget - Server service%@ budget is: %@   Current count is: %@
     Server daily%@ default budget is: %@   Current count is: %@
     **** We are over budget - Server daily%@ default budget is: %@   Current count is: %@
     Server daily budget is: %@   Current count is: %@
     **** we are over budget
     No budget specified
====== IDS Traffic Usage:
   Service: %@
     %@: %@
====== Done
isQuickSwitching set to %@
We're already switched to (cbuuid %@), ignoring request to switch...
Forcing QuickSwitch {activeCBUUID: %{private}@, cbuuid: %{private}@}
Initiating QuickSwitch to (cbuuid %@)
Finishing up switching
QuickSwitch initiated with error: %@
QuickSwitch time %f
Resetting communication before QuickSwitch {shouldDeactivatePairedDevices: %{public}@}
Removing the keychain and in-memory data used for OTR communication.
Resetting all OTR sessions to allow communication with the new active paired device.
Calling completion block to finish switching
beginning watch<>phone account synchronization
No readable saved syncing services -- returning
Loaded syncing services {serviceInstances : %@}
Should continue syncing preferred account
Should continue fetching remote account
Should continue syncing tinker device info
Stopping all pending account sync actions { pending: %@ }
Sent account sync message (message ID: %@) (success: %@)
Note should sync all services
Not syncing preferred account because device %@ is not paired
Not syncing preferred account because device %@ is tinker paired
Note should sync preferred account, Syncing iMessage account now
%s: invalid iMessage account %@
Syncing preferred account for iMessage {guid: %@, uniqueID: %@}
Note should sync preferred account, Syncing FaceTime account now
%s: invalid FaceTime account %@
Syncing preferred account for FaceTime {guid: %@, uniqueID: %@}
Not fetching remote account info because device %@ is not paired
Not fetching remote account info because device %@ is tinker paired
Fetching remote account info {servicesToSync: %@}
Received remote account information {accountInfoMapKey: %@}
Not syncing tinker info because device %@ is not paired
Not syncing tinker info because device %@ is not tinker paired
Not syncing services because device %@ is not paired
Not syncing services because device %@ is tinker paired
Syncing account changes to paired device {serviceIdentifier : %@, guid: %@, accountInfo : %@}
Constructing RA response dictionary for services: %@
Skipping %@, paired device doesn't support syncing of that service
Setting callerID for Apple ID account to phone number {phoneNumber: %@}
Trying to sync only phone number account, but this is disallowed by the service. { service : %@, accountInfo : %@ }
Transmitting phone number
Adding additional phone numbers to sync {phoneNumbersToAdd: %@}
Syncing tinker device info to paired device { guid : %@, uris : %@, pushToken : %@ }
Don't have tinker device info to sync { token : %@, accounts_count : %ld }
Incoming account sync message {command: %@, message: %@}
Received message without command -- dropping
Received account sync incoming Tinker device info while current device is not Tinker paired
Received account sync incoming preferred account info while current device is not traditionally paired
Unrecognized command -- dropping
Synchronizing accounts {service: %@, accountInfo: %@}
No accounts, disabling all
This is an AppleID account on an iCloud based service, not disabling account %@
Disabling account %@
This is an AppleID account on an iCloud based service, not removing account %@
Removing account %@
No accounts in account info, ignoring...
Found valid phone number account %@
Retrieved phone number alias %@
Can't find eligible service, bailing { serviceName : %@, shouldNotSyncPhoneNumberAccounts: %@ }
Didn't find a local account, setting one up
Updating local account {localAccount: %@}
Account info for %@ is not registered, ignoring...
This is an iCloud based service, ignoring Apple ID account
Found valid apple ID account, cleaning up sentinel alias
Found valid Apple ID account, creating real account with remote info %@
  Creating a linked account: %@
Found existing account for service %@ and loginID %@
Incoming preferred account update {incomingDisplayName: %@, incomingAccountInfo: %@}
Service: %@ also wants to use the iMessage CallerID, attempting to update it
Service: %@ wants to use the FaceTime CallerID, attempting to update it
Incoming tinker device info { uris: %@, pushToken: %@ }
Setting expiration timer for temporary user %@ with phase %ld
Removing expiration timer for temporary user %@
Expiration timer fired for temporary user %@
Failed to get name for full account identity cluster {cluster: %{public}@}
Fetching cluster from keychain
!setState keychainClusterIdentifier=%@
Deserialized cluster
Failed to create fullClust from clusterData {clusterData: %{private}@, error: %{public}@}
Deserialized dictionary missing clusterData {deserialized: %{private}@, error: %{public}@}
Unexpected object type in deserialized dictionary {deserialized: %{private}@, error: %{public}@}
Failed to deserialize group keychain data {data: %{private}@, error: %{public}@}
Failed to get keychain data {identifier: %{public}@, error: %{public}@}
Storing cluster in Keychain {fullCluster: %{public}@}
Stored cluster in keychain {fullCluster: %{public}@}
Failed to store cluster in keychain {error: %{public}@}
Failed to serialize cluster data {fullCluster: %{public}@, dictionary: %{private}@, error: %{public}@}
Failed to create data from cluster {fullCluster: %{public}@, error: %{public}@}
Failed to store data in keychain -- Not in Circle {error: %{public}@, identifier: %{public}@}
Removing cluster from keychain
Failed to remove item from keychain {identifier: %{public}@, error: %{public}@}
Failed to create cluster from data {error: %{public}@, data: %{private}@}
Missing legacy identity data from -[<IDSClientDataRegistrationKeyManager> publicMessageProtectionIdentityDataToRegisterWithError:] -- {error: %{public}@, publicIdentityData: %{private}@}
Registering without an NGM key { hasIdentityData: %@, hasPrekeyData: %@, hasRegIdentity: %@, hasUnregIdentity: %@, keychainError: %@, serializationError: %@, generationError: %@, rollingError: %@, dataToRegisterError: %@ }
Finished capturing AutoBugCapture diagnostics for EC key loading failure { context: %@, keyLoadingError: %@, error: %@ }
Adding public key to client data: %@
Game center contacts client data: %@
Game center registration %@ found. Skipping
Missing ngm public identity data from -[<IDSClientDataRegistrationKeyManager> publicMessageProtectionIdentityDataToRegisterWithError:] -- {error: %{public}@, publicNGMIdentityData: %{private}@, publicNGMPrekeyData: %{private}@, publicIdentityData: %{private}@ }
No KT Registration Data found for key index. { serviceType: %@, ktKeyIndex: %u }
Found KT Registration Data for key index. { serviceType: %@, ktKeyIndex: %u, ktRegData: %@ }
Adding kt data signature to IDS client data. { serviceType: %@, ktKeyIndex: %u, ktRegData: %@ }
KT Registration data missing public account key or data signature. { serviceType: %@, ktKeyIndex: %u, ktRegData: %@ }
Fetched StatusKit presence capability with result: %d
Timed out waiting for presence capability
Not checking presence capability because we're not registering multiplex
StatusKit framework not available on this platform
Web Tunnel Message Completed With Respone Headers %@
Constructed registration account status metric { metric: %@ }
Checking if account is candidate for force repair {isUserDisabled: %@, isRegistered: %@, account: %@}
Waiting for migration, not firing timer
Under first lock, not firing timer
Repair timer fired: %@
Bypassing repair -> Safeview?
Bypassing repair -> hasHardDeregistered
Waiting on accounts to load, the account controller isn't ready yet
Notified of registration success for service: %@   registration: %@   account: %@
Kicking phone number accounts repair
Kicking Apple ID iCloud based accounts repair
Kicking Apple ID non-iCloud based accounts matching dsID: %@ repair
   => This was an SMS registration, let's see what we should repair
 => Failed account, let's see if we should kick it (Registration Error: %d)
 => Kicking alternate SMS based account: %@
 => Kicking alternate SMS based linked account: %@
 => Matching Apple ID account on this service is enabled: %@
 => Kicking SMS based account: %@
 => Kicking SMS based linked account: %@
 => Not kicking iCloud SMS based account: %@
 => Kicking iCloud SMS based account: %@
 => Kicking iCloud SMS based linked account: %@
 ** Tried to repair account: %@
 => Done repair attempt
   => This was an AppleID registration, let's see what we should repair
 => DSIDs match to %@, kicking for repair %@
 => Kicking Apple ID based account: %@
 => Kicking Apple ID based linked account: %@
Waiting for migration, not repairing accounts
Account repair timer fired
Cleaning up dead keychain items
Cleaning up keychain items for service: %@
 => Done
Checking disabled account {serviceIdentifier: %@, shouldRepair: %@, registrationError: %lld}
 => Checking manatee retry count { Retry Count: %@, Max Retry: %@ }
 => Trying to register to fix manatee, but reached max retry for manatee reregistration. { account uniqueID: %@, service name: %@ }
 => Trying to register to fix manatee. { account uniqueID: %@, service name: %@ }
 => Enabled, account uniqueID: %@, service name: %@
 => Enabling disabled account, and registering - we're allowed to repair: %@, service name: %@
 => Disabled, skipping: %@, service name: %@
 *** Done
   Checking account for deletion: %@
   Account is primary, it should not be deleted
  => Account does not appear to be primary, disabling it, and deleting it  (%@ <> %@)
   Checking account registration status: %@
   Not attempting repair service/account pair {registrationError: %ld, account: %@}
   Account isn't enabled or registerd -- enabling {isEnabled: %@, unregistered: %@}
   Account appears to be in good form: %@
  => Account does not appear to be primary, we shouldn't be here...  {primaryUserName: %@, loginID: %@, hasActiveAppleIDBasedAccounts: %@}
   Not enabling account due to irreparable registration error {registrationError: %ld, account: %@}
   Account isn't enabled and/or registered -- enabling {isEnabled: %@, unregistered: %@}
  => We have no active SMS registrations, skipping
   Account isn't enabled, enabling local account
 => We have no active apple ID based accounts for service: %@
Creating new account based on existing account with service %@ login ID %@
 => No other signed in AppleID accounts, skipping
Created new iTunes account based on system account { service: %@, account: %@ }
   => Has SMS Account active: %@
Repairing iTunes based accounts if needed (Primary account: %@)
iTunes isn't signed in, no repair needed, signing out
iTunes is signed in -- ignoring request to sign out { systemAccount: %@ }
Repairing iCloud based accounts if needed (Primary account: %@)
iCloud isn't signed in, no repair needed, signing out
iCloud is signed in -- ignoring request to sign out { systemAccount: %@ }
Current repair interval: %f multiplier: %ld index: %ld max: %f
Not setting up repair (registrationSupported: %@) (supportsSMSIdentification: %@)
Loaded last repair date %@
We've missed the next repair date %@, repairing now...
Loaded initial repair date %@
Generated inital repair date %@
Next repair date %@
Resetting phone number repair counter
Phone repair timer hit
 => We sent too many SMS, not retrying, disabling account
 => Garbage SMS signature, disabling
 => This appeared to be a rate limit error, re-registering
 => This appeared to be a server or connectivity error, re-registering
 => We need a new signature (server authentication failed), re-registering
 => We were missing auth credentials, re-registering
 => Not retrying for error: %d, disabling account
 => Default error: %d   disabling
 => Unregistered account, let's see if we can register it
 => account has no vetted aliases, and it's never registered, let's ignore it
 => Unknown account status, let's disable it
 => Authenticated, kicking a register
 => %@
 => *** Other status: %d
setHasSpaceAvailable %@
didReceiveData length %luB
Received data too big (%lu) - rejecting
Received zero-length data - rejecting
Received data too small (%lu) - rejecting
Data corruption! Checksum check failed (old:%04x new:%04x) data(%d): %@
Data corruption! This data did not decode(%d): %@
Bonjour request to send local message {guid: %{public}@, topic: %{public}@, deviceIDs.count: %{public}@ command: %{public}@}
Bonjour send message {guid: %{public}@, topic: %{public}@, deviceID: %{private}@, command: %{public}@}
Bonjour did send message {guid: %{public}@, topic: %{public}@, deviceID: %{private}@}
Bonjour failed to send message {guid: %{public}@, topic: %{public}@, deviceID: %{private}@}
Bonjour did finish sending message {guid: %{public}@, topic: %{public}@, sentDeviceIDs.count: %{private}@
Bonjour failed to send message to any recipient {guid: %{public}@, topic: %{public}@, deviceIDs: %{private}@}
Bonjour received message {guid: %{public}@, topic: %{public}@, deviceID: %{private}@, command: %{public}@}
%@: control message: hello cannot decode controlChannelVersion
%@: control message: hello cannot decode productName
%@: control message: hello cannot decode productVersion
%@: control message: hello cannot decode productBuildVersion
%@: control message: hello cannot decode model
Optional field data byte size: %lu
Instance ID: %@
Device uniqueID: %@
Capability flags: %@
Service minimum compatibility version: %@
Unknown field type: %u
ProtocolVersion: %@, min/max: %@ %@
getUint32FromBytes, uint32_t should be 4 bytes, not %u bytes, field: %u
getUint64FromBytes, uint64_t should be 8 bytes, not %u bytes, field: %u
getUint16FromBytes, uint16_t should be 2 bytes, not %u bytes, field: %u
IDSDRegistrationPushManager now tracking registered account {accountID: %@}
IDSDRegistrationPushManager stopped tracking registered account {accountID: %@}
IDSDRegistrationPushManager is now accepting incoming pushes
IDSDRegistrationPushManager is no longer accepting incoming pushes
Device received sysdiagnose request push {error code: %@, serverErrorDetail: %@, userFacingMessage: %@}
Ignoring sysdiagnose request push (not enough time has passed since last prompt) { now: %f, lastPromptTime: %f, delta: %f }
Device received request for prompt {title: %@, message: %@, default button: %@, default url: %@, alternate button: %@, alternate url: %@}
Ignoring request for prompt (not enough time has passed since last prompt) { now: %f, lastPromptTime: %f, delta: %f }
Registration push manager received registration push
Device received registration push {style: %@, userID: %@, service: %@}
System not setup -- ignoring registration push
Found matching candidate account for registration push {account: %@}
Unhandled action in registration push message {action: %ld}
Registration push manager re-identify
Re-identifying accounts in response to registration push
We can't re-identify a temporary account. Nuking Home Number user %@
Registration push manager re-provision
Re-provisioning accounts in response to registration push
We can't re-provision a temporary account. Nuking Home Number user %@
Registration push manager re-register
Re-registering accounts in response to registration push
Registration push manager repair registration
Repairing registration on accounts in response to registration push
Registration push manager validate credentials
Validating credentials in response to registration push
Received validate credentials response {userID: %@, status: %@, origin: %@, message: %@}
Validate credentials returned an error -- taking no action {status: %@}
Updating registration control state { registrationType: %lld, toState: %lld, err: %d }
Registration control state can't be loaded because the keychain is upgrading { err: %d }
Registration control state item was not present in the keychain
Registration control state can't be loaded because of a keychain error { err: %d }
Loaded registration control state { registrationType: %lld, state: %@, error: %@ }
Told to report spam with localObject %@ for service: %@
Process not entitled to report spam
IDS Server reports that general spam reporting v1 is disabled.
Couldn't find account with alias for service {serviceIdentifier: %@, alias: %@}
Server Bag provided us with v1 spam reporting value isDisabled: %@
Gossip is not enabled for service: %@
Trying to gossip to own device. Will not gossip.
Error retrieving STH from transparencyd: %@
Successfully retrieved STH from transparencyd, will gossip.
Didn't pass dice roll, will not gossip
Sending sth's to transparencyd failed with error: %@
Successfully sent sth's to transparencyd.
Unexpected deviceIdentity class {identity: %{public}@}
Unable to get group.publicRepresentation {groupInfo: %{private}@, groupContext: %{private}@, previousGroup: %{public}@, error: %{public}@}
Unable to create group signature {groupInfo: %{private}@, groupContext: %{private}@, previousGroup: %{public}@, error: %{public}@}
Saved group to group server {groupID: %{private}@}
Saved group to group server { groupID: %{public}@ }
Failed to save group to groupServer {pg: %{private}@, publicGroupRepresentation: %{private}@, signature: %{private}@, forwardingTicket: %{private}@, groupServerError: %{private}@}
responseEngram %@ responseGroupID %@ error %@
Got groups {%@ %@ %@ %@}
Fetched Entry from GroupServer {entry: %{public}@}
Fetched Group from GroupServer {groupID: %{public}@}
Failed to set groupID on created group {entry: %{public}@, group: %{public}@, groupID: %{public}@, error: %{public}@}
Failed to create group from server reponse entry {entry: %{public}@, publicSigningIdentity: %{public}@, error: %{public}@}
Failed to create fetched group, could not create publicSigningIdentity {deviceIdentity: %{public}@, error: %{public}@
Unexpected sponsot accountIdentity {sponsorPublicAccountIdentity: %{public}@}
No sponsor pair {entry.publicKeyData: %{public}@, keyToSponsorPairMap.lenth: %{public}@}
got groups %{public}@
Groups returned from server don't contain expected group {groupID: %{public}@, entries: %{public}@, resultGroup.applicationData: %{private}@}
Failed to get group {groupID: %{public}@, error: %{public}@}
group->groupPublicData -- Start {group: %{private}@}
Failed group->groupPublicData -- unexpected accountIdeneity class {groupContext.accountIdentity: %{public}@, group: %{private}@}
Failed group->groupPublicData -- unexpected cypher {group.cypher: %{public}@, group: %{private}@}
Failed group->groupPublicData -- could not create publicGroupData {error: %{public}@, group: %{private}@}
Failed group->groupPublicData -- could not create signature {error: %{public}@, group: %{private}@}
Failed group->groupPublicData -- could not create data from entry {error: %{public}@, group: %{private}@}
group->groupPublicData -- Success {publicDataRepresentation.length: %{public}@}
group->groupPublicData -- Success {publicDataRepresentation: %{private}@}
groupPublicData->Group -- Start {data: %{private}@}
Failed groupPublicData->Group {error: %{public}@, data: %{private}@}
Failed group->groupPublicData -- unexpected deviceIdentity class {groupContext.accountIdentity: %{public}@, data: %{private}@}
Failed group->groupPublicData -- couldn't get pair from groupData {error: %{public}@, entry: %{private}@}
Failed group->groupPublicData -- no participants {pair: %{private}@}
Failed group->groupPublicData -- Failed to create group {error: %{public}@, entry: %{public}@, pair: %{public}@, sponsor: %{public}@}
Failed group->groupPublicData -- Unexpected sponsor accountKeyClass {sponsor: %{public}@}
group->groupPublicData -- Success {group: %{private}@}
Cypher was not of the expected type, this is a programmer error {cypher : %{public}@}
Unexpected class for deviceParticipantPublicKey {publicKey: %{public}@, participant: %{private}@
Failed to create GroupServerEntry from publicDataRepresentation -- failed to deserialize {error: %{public}@, data: %{private}@}
Failed to create GroupServerEntry dataRepresentation -- Failed to serialize {error: %{public}@, dictionary: %{public}@}
We are under first data protection lock, we cannot initialize KVS.
Unable to convert CloudKit record to device record {cloudKitRecord: %@, deviceData: %@, deviceMetadata: %@}
Unable to convert device record to CloudKit record {deviceRecord: %@}
Cached record zone exists -- continuing without zone fetch {cachedRecordZone: %@}
Completed CloudKit zone fetch {zoneID: %@, recordZonesByID: %@, fetchError: %@}
CloudKit zone not found -- creating it
Completed CloudKit zone modification (save) operation {savedRecordZones: %@, deletedRecordZoneIDs: %@, modifyError: %@}
Failed to create CloudKit zone {modifyError: %@}
Successfully created CloudKit zone
Starting CloudKit operation to create KT zone {operation: %@}
Failed to query CloudKit for available zones {error: %@}
CloudKit zone exists -- no need to create it
Starting CloudKit zone fetch {operation: %@}
No valid CKContainer, returning.
Checking CloudKit device to device encryption prerequisites.
CloudKit device to device encryption prerequisites did not change.
CloudKit device to device encryption prerequisites changed.
Cloudkit device to device encryption is now available.
Determining account eligibility for device-to-device encryption
Account device-to-device encryption eligibility task final block called {timedOut: %@}
Starting device-to-device encryption eligibility task with timeout {timeoutInSeconds: %f}
Starting CloudKit container account info fetch
Completed CloudKit container account info fetch {supportsDeviceToDeviceEncryption: %@, deviceToDeviceEncryptionStatus: %ld, accountInfo: %@, accountInfoError: %@}
Upserting trusted device record { deviceRecord: %@ }, { recordsToModify: %@ }, { recordsToDelete: %@ }
Trusted device upsert task final block called {timedOut: %@}
Starting trusted device upsert task with timeout {timeoutInSeconds: %f}
Last known successful upsert device record is identical to the current request -- short-circuiting without performing upsert {deviceRecord: %@}
Verifying encryption prerequisites for trusted device record upsert
Device to device encryption is not currently available for this CloudKit container -- not upserting trusted device record
Device to device encryption is not currently able to be determined for this CloudKit container -- not upserting trusted device record
Zone creation failed -- not upserting trusted device record
Failed to create CloudKit record from device record {deviceRecord: %@}
Completed CloudKit save record operation {savedRecords: %@, deletedRecordIDs: %@, operationError: %@}
Failed CloudKit save operation for trusted device {error: %@}
CloudKit save operation for trusted device succeeded
Starting CloudKit operation to modify (save) KT record {operation: %@}
Nuking key transparency device records
Key transparency device record nuke task final block called {timedOut: %@}
Starting key transparency device record nuke task with timeout {timeoutInSeconds: %f}
Deleting zone {zoneID: %@}
Completed CloudKit zone modification (delete) operation {savedRecordZones: %@, deletedRecordZoneIDs: %@, modifyError: %@}
Failed to delete CloudKit zone {modifyError: %@}
Successfully deleted CloudKit zone
Starting CloudKit operation to delete KT zone {operation: %@}
Fetching key transparency device records
Key transparency device record fetch task final block called {timedOut: %@}
Starting key transparency device record fetch task with timeout {timeoutInSeconds: %f}
Cache miss for key transparency device records -- starting fetch {promise: %@}
Updated cached promise for key transparency device records {promise: %@}
Setting timer to clean up cached promise for key transparency device records {promise: %@, cleanUpDelay: %f}
Clearing cached promise for key transparency device records {promise: %@}
Cache hit for key transparency device records {promise: %@}
Verifying encryption prerequisites for trusted device records fetch
Device to device encryption is not currently available for this CloudKit container -- not fetching trusted device record
Zone creation failed -- not fetching trusted device record
Fetched CloudKit record of trusted device {record: %@, device: %@, deviceMetadata: %@}
Completed CloudKit query for trusted devices {queryError: %@, cursor: %@ results: %@}
Found device data from CloudKit record {device: %@, deviceMetadata: %@}
Failed CloudKit query for KT loggable data {error: %@, query: %@}
Starting CloudKit operation to query KT records {query: %@, operation: %@}
Received KVS update notification. {Reason: %@}
Received KVS Quota Violation Notification.
Inserting KVS entry {key: %@, value: %@}
KVS has not yet loaded.
Removing KVS entry {key: %@}
Fetching all entries from KVS.
Wiping all entries from KVS.
Trying to force sync KVS.
Failed to force sync KVS.
Successfully force synced KVS.
Failed to weak link %@ from %@!
Unsupported schema version: %@
An unnecessary paired device keychain migration was attempted.
System is shutting down, not creating daemon
Resetting preferences to 0 for all services
Failed to create to-be-deleted directory %@ error %@
Failed to move incoming files to to-be-deleted directory %@ error %@ -- delete anyway
Last resort file removal took %0.6lf seconds
Delayed background file removal took %0.6lf seconds
Failed to create incoming files directory %@ error %@
IDS incoming files directory cleanup-on-init took %0.6lf seconds
System did lock
Alerted that duet resource availability has changed.
No more listeners terminating
Shutting down
IDSAgent took %f seconds to launch
Service info: %@
Enabled accounts info: %@
Dependent devices info: %@
Linked devices info: %@
Family info: %@
Family devices info: %@
Max Message Size: %@
Persisted pending invitations: %@
Persisted received invitations: %@
Active device uniqueID: %@
Found existing listener %@ for pid %d, cleaning up
Exception handling existing listener cleanup: %@
Tried to set up listener (ID: %@) with empty listener port
Tried to set up listener (port: %@) with empty ID
Setting up connection to listener ID: %@  bundle ID: %@  setupInfo %@ entitlements %@  pid: %d  name: %@  connection: %p notificationServices %@
Exception generating setup information for listener: %@
Daemon was hard reset, ignoring incoming request
** Empty local object passed in for listener check
No listener found for local object: %@
Tried to remove nil listener object
Removing listener ID: %@
Removed Apple Care listener
We had %lu %@ before removing listener, now we have %lu. This listener had %lu.
Exception removing listener: %@
Exception removing listener object: %@
Exception removing local listener object: %@
Exception looking up listeners: %@
remoteObjectDiedNotification: %@
localObjectDiedNotification: %@
Resetting link preferences for process %@
Starting push handling with services %@ waking topics: %@ opportunistic topics: %@ nonwaking topics %@
Updating push handling with services %@ waking topics: %@ opportunistic topics: %@ nonwaking topics: %@
Updating local push handling with topics: %@
Updating push handling with commands %@
Daemon was hard reset, ignoring broadcast
Service found to find broadcaster %@   topic: %@
All targets for broadcast %@
Broadcast Priority: %d Service: %@ 
Broadcast ID: %lld
Broadcast: outgoing generic notification %lld
Working on outgoing broadcast
Broadcast: starting to work on outgoing notification id %lld
Daemon was hard reset, not enqueuing broadcast
Broadcast: Couldn't find a valid service for the given topic %@
Broadcast: scheduling broadcast %lld on topic %@ to clients needsTargetAck %d targetsAlive %d shouldLaunch %d
Broadcast: broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u
IDSDaemon: Exception caught broadcasting message: %@
Broadcast: failed to deliver broadcast %lld to targets, enqueueing for later dispatch!
Broadcast: Enqueueing broadcast %lld on topic %@ 
Broadcast: Performing enqueued broadcast %lld for topic %@
Broadcast: Broadcast %lld enqueued at %@ has timed out - Calling timed out broadcast block for topic %@ with nil broadcaster to allow cleanup
Broadcast: enqueued broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u
Broadcast: done working on outgoing notification id %lld
Broadcast: Broadcasting xpc wake notification %@ to awaken clients of %@.
Broadcast: Broadcasting darwin notification %@ to awaken clients of %@.
Launching on-demand services for queued broadcast attempts
Couldn't find a valid service for the given identifier %@
Broadcast: Received request to drop enqueued broadcast %lld
Broadcast: Dropping enqueued broadcast %lld
Broadcast: Resetting queued broadcasts for services %@ priority %ld 
Broadcast: Processing queued broadcasts for services %@ priority %ld forceRetry %d 
Broadcast: previously enqueued broadcast %lld for service %@ succeeded %d needsClientAck %d forceRetry %d 
Processed queued broadcast attempts - %lu remaining for %@
Dropping queued broadcasts for all services priority %ld
Dropping %@ for %@
Dropped queued broadcasts for all services priority %ld
Entitling portName %@ for all services %@
Granting access %d to listener: %@ pid: %d usingSync: YES givenEntitlements: %@ parsedEntitlements: %@
PID: %d was suspended
Exception handling pid suspension: %@
Incoming listener services %@ commands %@ caps %d
Allowing listener services %@ commands %@ caps %d
Got %@ %@ for localObjectIndex %lu
%s: received client request to change notification services from %@ to %@ 
Setting wakingPushPriority %ld for topic %@, was %@
Removing waking push priority for service %@ in store
received socket %@
IDSDaemon - Could not find session with uniqueID %@ to setup client socket, ignoring...
opensocket [%@] context=[%@] (handlerID:%@) ***
opensocket was called for a non-default device without nsuuid!!!!!!!!
client directly calling UTUN's openSocketWithOptions
%@ didn't specify any priority for %@. This will use the default priority queue.
client's openSocketWithOptions call returned socket %d, error %@
utun finished connection options[%@] socket(%d) handlerID[%@] error[%@] socketObject[%@]
closesocket [%@]
Broadcasting delivery stats to client
persistPendingInvitation: persisting invitation {%@} for service {%@}
persistPendingInvitation: Cannot persist invitation {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} 
persistReceivedInvitation: persisting invitation {%@} for service {%@}
persistReceivedInvitation: Cannot persist invitation {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} 
removePendingInvitation: removing invitations with identifiers {%@} for service {%@}
removePendingInvitation: Cannot remove invitations {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} 
removeReceivedInvitation: removing invitations with identifiers {%@} for service {%@}
removeReceivedInvitation: Cannot remove invitations {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} 
broadcasting tinkerDeviceAdded on %@
broadcasting tinkerDeviceRemoved on %@
broadcasting tinkerDeviceUpdated on %@
IDSDaemonMIGInterface auth port died: %@
IDSDaemonMIGInterface: Could not create server with name: %@
peer(%d) received XPC_ERROR_CONNECTION_INVALID
peer(%d) received XPC_ERROR_CONNECTION_INTERRUPTED
peer(%d) received XPC_ERROR_TERMINATION_IMMINENT
Port name request for: %@ from pid: %d granted: %@
Data separated port name request for: %@ from pid: %d -- rejecting %@
Incoming file descriptor request
Data separated request came in to %@ from peer: %@ -- rejecting %@
updateService: %{public}@, withPreferences: %{public}@.
Resetting preferences to 0 for service: %{public}@, at time: %{public}@
Cannot update preferences for service: %{public}@ with negative values, preferences: %{public}@.
Getting accumulativePreferencesForAllServices. Service: %{public}@, preferences: %{public}@
Missing IDS Firewall entitlement -- failing creation of IDSDXPCFirewall collaborator {connection: %@}
Fetching impacted services for service {%@}
Update to category %u addEntries %@
Continuing to adding entries to firewall with queryError %@
Update to category %u removeEntries %@
Update to category %u removeDonatedEntries %@
Update to category %u replaceAllEntries %@
Update to category %u replaceEntries %@
Update to category %u queryError %@ addEntries %@
Fetching all entries for category %u
Update to category %u removeAllDonatedEntries
Update to category %u removeAllEntries
Fetching recently blocked handles for service {%@}
Update to category %u populateMergeIDForEntries %@
%s: No registered account found for service %@. localURI {%@} cert {%@}
Received query result with success {%@} and result {%@}
Populating merge for handles {%@}
Getting endpoints for handles {%@}
Found endpoints for handles {%@} out of requested handles {%@}
Did not query handles due to disabled feature flag
Received update message: %@
GUID %@ Uploading data as attachment for token: %@
GUID %@ Finished sending attachment. Cleaning up temporary file.
GUID %@ finished constructing aggregatable messages
accountIdentitiesClusterForRegistration -- start
Account identity cluster election failed {error: %{public}@}
Tried to get account identity cluster with device not in keychain sync circle {error: %{public}@}
Engram inactive -- not fetching {error: %{public}@}
Existing account identity cluster fetch failed {error: %{public}@}, seal: %{public}@
Tried to get account identity cluster with Engram disabled {error: %{public}@}
existingFullDeviceIdentity -- start
Failed existingFullDeviceIdentity -- missing cluster {error: %{public}@}
Failed existingFullDeviceIdentity -- keychain item not found {error: %{public}@}
Failed existingFullDeviceIdentity -- keychain error getting device identity {error: %{public}@}
Failed getExistingFullDeviceIdentity -- missing fullAdminIdentity {error: %{public}@, cluster: %{public}@}
Failed existingFullDeviceIdentity -- missing publicAdminIdentity {error: %{public}@, fullAdminIdentity: %{public}@}
Failed existingFullDeviceidentity -- failed to create deviceIdentity {error: %{public}@, publicAdminIdentity: %{public}@, data: %{private}@}
existingFullDeviceIdentity -- success {deviceIdentity: %{public}@}
Notifying Engram key store that identities did update {listeners: %@}
IDS is not connected, do not send monitoring message.
Connectivity monitor %@ got response %ld with error %@
Reunion: %s services: %@
ReunionSync has entitlemnt for non-empty service list {entitlement: com.apple.private.ids.prefer-infrawifi, services: %{public}@}
ReunionSync require entitlement for non-empty service list {entitlement: com.apple.private.ids.prefer-infrawifi, services: %{public}@}
Fetching Family
Family Fetch returned with error code: %ld
Device is not part of a family. Will not allow force fetch until family updates.
Pulling out previously stored messages sent to a family service.
Error fetching family, will allow trying again later.
Initializing IDS Family Manager
We're doing a  Forced Fetch already, we'll let that continue
Starting Forced Fetch. Fetch count is now at: %d
Notification received for family update.
broadcasting family update on %@
control channel simulating decryption failure ############### - close socket / call receive handler
UTunController control channel for [%@] connected for {socket:%d} read (getsockopt=%d error=%d: %s)
control channel receiving control message on {socket:%d} ...
UTunController control channel for [%@] disconnected on {socket:%d} recv: errno=%d: %s
UTunController control channel for [%@] disconnected on {socket:%d} recv: connection closed
control channel failed to decrypt (%s) of control channel data: %ld (magnet %u encrypting %u, pairedLocally %u pairedRemotely %u)
Dispatch receiveHandler
receiveHandler is being called, so ignore this one
control channel decrypted (%s) new message (%@, size=%lu  data: %@) (from %lu)
control channel corruption detection heuristic hit - resetting
UTunController control channel for [%{public}@] connected for write {socket:%d} (getsockopt=%d error=%d: %s)
control channel sending control message on {socket:%d} ... (have %lu)
UTunController control channel for [%@] disconnected on send {socket:%d}: errno=%d: %s
control channel sent 0 bytes on {socket:%d} - try again later (%d)
control channel sent %ld bytes on {socket:%d} (%lu left) (s:%d)
control channel finished sending bytes but no message to remove
control channel finished sending bytes no more message send pending
control channel cannot use nil connection
control channel connect ready for nw_connection (%p) %@ {socket:%d}, event error: %@, deviceUniqueID[%{private}@]
control channel connect ready but connection already canceled - exit without TPAddSocket
control channel failure/invalid event but connection already canceled - exit without causing additional cleanup
control channel connection event %s for nw_connection (%p) %@ {socket:%d} event error: %@, deviceUniqueID[%{private}@]
control channel connection %@ canceled, _connection %@, _canceledConnection %@
gatherDataToInvestigate_59608320: connection: %@, _connection: %@
control channel _cancelConnectionAndResetDataConnections _connection %@, _canceledConnection %@
control channel _cancelConnectionAndResetDataConnections missing _connection!
Clearing %@
control channel suspending {socket:%d} (%d) awaiting default paired encryption negotiation
control channel encrypted (%s) new message (%p, size=%lu original size=%u  data: %@) (_sendingPriorityMessage: %d)
control channel failed to encrypt (%s) message [%@] error: %ld (magnet %u encrypting %u, pairedLocally %u pairedRemotely %u)
Handle Fairplay authentication failure...
processOTRNegotiationMessage: totalLength: %u, less than 4
got control message: invalid OTR version number: %d.
control message: OTRNegotiation cannot decode token
processOTRNegotiationMessage: totalLength: %u, dataBytesLeft: %lu
control message: OTRNegotiation cannot decode negotiation data
got control message: OTRNegotiationData (%uB) for %@, count:%08x
IDS Provision Temporary Phone response: %@
Unparseable Home Number expiration: %@
%@ - %@
Could not split the profileId in order to send only the numerical part to AuthKit. profileId: %@
DSID NSNumber extracted from the profile id is null. profileId: %@
Caching object {key: %{private}@, object: %{private}@}
Evicting object {key: %{private}@
Delegate return NO to shouldEvict -- Bail {key: %{private}@}
Tried to evict object that is not in cache {key: %{private}@}
Eviction timer did start {interval: %.6f, leeway: %.6f
Stop eviction timer if empty
Not stopping eviction timer {backingStore.count: %ld}
Stopping eviction timer {backingStore.count: %ld}
Evicting items {currentDate: %{public}@}
Evicting item {key: %{private}@, evictionDate: %{public}@}
Not evicting item {key: %{private}@, evictionDate: %{public}@
Delegate returned NO shouldTTLCacheEvictExpiredItems -- Bail
Cache miss {key: %{private}@
Delegate replace cached object {key: %{private}@, previous: %{private}@, replacement: %{private}@}
Replacement object is nil {key: %{private}@}
Extending TTL for fetched object {key: %{private}@, oldEvictDate: %{public}@, newEvictDate: %{public}@
Most Recent PNR Reasons %@
Most Recent IDS Registration Reason %ld
Got number of broadcast cache MKM bag value {key: %@, value: %u}
Couldn't get broadcast cache MKM bag value, using default value {key used: %@, value: %u}
Created group MkM cache { self: %@ }
Resetting group MkM cache { self: %@ }
Resetting remote MkM cache { self: %@ }
Noted received MkM collection in MkM cache { self: %@ }
Number of peer MkM to broadcast is over maximum permitted value -- introducing sampling { cachedCount: %lu, maximumCountToBroadcast: %u }
Adding next local MkM to collection to broadcast { nextLocalMkM: %@ self: %@ }
Adding remote MkM set to collection to broadcast { remoteMkMSet: %@, self: %@ }
Starting automatic cache reset timer if needed { self: %@, resetInterval: %f, inFlightResetBlock: %@ }
Automatic cache reset timer fired { sself: %@, resetBlock: %@ }
Initializing validation session { self: %@ }
Activating validation session { self: %@, validationData: %@, serverKey: %@, scoringNonce: %@ }
Signing data using validation session { self: %@ }
Scoring device within validation session { self: %@ }
Invalidating validation session { self: %@ }
Found default paired ID
Did not find fromToken or FromDeviceUniqueID in %@
Did not find an account with that ID
Did not find a default paired device on this account %@
This is the default paired device
This is not the default paired device
ids/registration/account-controller/state
Current system account state { iCloudAccount: %@, iTunesAccount: %@ }
Current IDS device state { deviceName: %@, model: %@, productName: %@, productVersion: %@, build: %@, pushToken: %@, pushIdentity: %@, idsUniqueID: %@, prototypeMode: %@, environment: %@ }
Current IDS system monitor state { isSetup: %@, isUnderDataProtectionLock: %@, isUnderFirstDataProtectionLock: %@, systemIsShuttingDown: %@ }
Current IDS message protection state { publicMessageProtectionData: %@ }
Current IDS server bag state { serverBag: %@, isLoaded: %@, isLoading: %@, isServerAvailable: %@, environment: %@ }
Current IDS service capability state { regionInfo: %@, iMessageSupported: %@, faceTimeAudioSupported: %@, faceTimeMultiwaySupported: %@ }
Current IDS phone number validation state { stateMachines: %@ }
Current IDS user store state { userStore: %@ }
Current IDS phone profile state { isPNRSupported: %@, SIMs: %@, selectedTelephonyLabelID: %@ }
Current IDS accounts list:
Current IDS account info dictionaries:
  * Device Name: %@    Service: %@     Hardware: %@    Token: %@   Unique ID: %@   Linked URIs: %@   Device Data: %@   Sub-services: %@   Identities: %@   Client data: %@   public key: %@ HSA trusted: %@
Hard deregister requested
Hard deregister complete, clearing accounts and shutting down daemon
Triggering final deregister
Account with unique ID %@ already removed, ignoring...
Tried to remove a nil account, ignoring...
Tried to remove ad hoc account directly, ignoring... { uniqueID: %@ }
Tried to add a nil account, ignoring...
Account with unique ID %@ already added, ignoring...
Adding account %@
Delaying broadcast for unprovisioned temporary account %@
Broadcaster for account added
Tried to add a nil primary account, ignoring...
Tried to add ad hoc account directly, ignoring... { uniqueID: %@ }
Primary account with unique ID %@ already added, ignoring...
  ** Found existing matching account, removing: %@
Removing linked account: %@
Client requested add account with unique ID %@ (Environment: %@)
Client requested remove account with unique ID %@ (Environment: %@)
Force removing account {account: %@}
Tried to disable a primary account with no unique ID, ignoring...
Tried to disable a primary account we don't know about, ignoring... { uniqueID: %@ }
Tried to disable ad hoc account directly, ignoring... { uniqueID: %@ }
Account with unique ID %@ is already disabled, ignoring...
Tried to disable an account with no unique ID, ignoring...
Tried to disable an account we don't know about, ignoring...
Disable account with uniqueID %@ login ID %@ service %@ called (Environment: %@) %@
Clearing service's cache {serviceIdentifier: %@}
Tried to enable a primary account with no unique ID, ignoring...
Tried to enable a primary account we don't know about, ignoring... { uniqueID: %@ }
Tried to enable ad hoc account directly, ignoring.. { uniqueID: %@ }
Tried to enable a restricted account, ignoring.. { account: %@ }
Account with unique ID %@ is already enabled, ignoring...
Tried to enable an account with no unique ID, ignoring...
Tried to enable an account we don't know about, ignoring...
Tried to enable an account with unsupported type -- ignoring and disabling... { serviceType: %@, accountType: %d }
Enable account with uniqueID %@ login ID %@ service %@ called (Environment: %@) %@
 Will disable similar account with accountID: %@
   Forcing account to disable: %@
Client requested enable account with unique ID %@ (Environment: %@)
Client requested disable account with unique ID %@ (Environment: %@)
 => Account disabled
Account matches: %@
Finding account with service name %@ aliasURI %@
Account matches !
Found no match
Finding account with service name %@ loginID %@
Checking %@
  => No account found for unique ID: %@
Finding account with service name %@ myID %@
Account matches!
Unknown myID type -- type must be a valid domain { myID: %@ }
  => Found **extra** account %@, deleting...
  => Found **mismatched** account %@ ID %@, deleting...
  => Found existing account %@
  => (Thread Safe) Found service: %p (for UID: %@)
  => (Thread Safe) No service found for unique ID: %@
 => Creating a local account for service %@
Setting up local accounts
Finished setting up local accounts
Refreshing local accounts
Cleaning up local account %@
Cleaning up account for local service %@
Using %@ to trigger a re-register
One of the local accounts was registered in the cloud, triggering a re-register to update
Starting local setup
Stopping local setup
 * Tried to setup ad hoc account directly %@, ignoring...
 * No adhoc services for %@, ignoring...
 * Setting up adhoc accounts for %@
Cannot enable adhoc service {service: %@, isTinker: %@, cannotEnableOnTraditionalWatch: %@, cannotEnableOnTinkerWatch: %@}
  => Found **extra** adhoc account %@, deleting...
  => Found **mismatched** adhoc account %@ primary ID %@, deleting...
  => Found existing adhoc account %@
  => Created ad hoc account %@
  => Updating primary account info for %@
  * Enabling account: %@
  * Disabling account: %@
  => Triggering a re-register for primary account
 current service names %@ new service names %@
Setting up ad hoc accounts
 => Done setting up ad hoc accounts
Setting up linked accounts, if necessary
 Service: %@  has linked services: %@
 We already have linked accounts, let's just double check the activation
 * They're not the same, let's fix that
 * Enabling account: %@
 * Disabling account: %@
  ... and enabling it
 => Done setting up linked accounts
Not importing legacy accounts, we've already done this
Importing from domain %@ => %@
Skipping service import: %@, we already have accounts: %@
Legacy Keys: %@
Legacy Preferences: %@
  => Nothing interesting in the accounts, moving along
Importing accounts...
Importing account: %@
Login ID: %@, new login: %@
Exception migrating legacy accounts { service: %@, exception: %@ }
Migrating legacy account found no enabled accounts { legacyDomain : %@ }
Persisting %@ accounts
Computed force register hash {matched: %@, old: %@, new: %@}
Deleting legacy account prefs {path: %@, success: %@, error: %@}
SU cleanup
Scheduling a re-register in %d seconds
Re-register timer hit
We still need to re-register, triggering it now...
We picked %@ to re-register
We've already re-registered, ignoring...
We found a phone number alias on the iMessage account, triggering GDR request for %@
We found a phone number alias on the FaceTime account, triggering GDR request for %@
All services to remove: %@
Setting up local
Not setting up local
Dropped aliases { count: %@ }
Donor accounts { count: %@ }
Adding %@ to %@
Loaded services { count: %@ }
We already have an existing account with for this uniqueID -- not loading { uniqueID: %@, existingAccountInfo: %@, newAccountInfo: %@ }
Failed to create account { uniqueID: %@, service: %@, accountInfo: %@ }
Tried to load account on a device that does not support this service/account type -- dropping! { uniqueID: %@, serviceType: %@, accountType: %d, accountInfo: %@ }
Tried to load a phone number account for a service that does not support phone number accounts -- dropping! { uniqueID: %@, serviceType: %@, accountType: %d, accountInfo: %@ }
Loaded accounts { count: %@ }
Enabling accounts { accounts: %@ }
Performed one time user intent migration on upgrade
Bad preference domain { service: %@ }
Defaults dictionary loaded { domain: %@, accounts: %@, enabledAccounts: %@ }
Failed to create account { service: %@, uniqueID: %@, dicitonary: %@ }
Clearing legacy domain { domain: %@ }
Loaded legacy accounts { count: %@ }
Enabling legacy accounts { accounts: %@ }
  ** Found active SMS based account: %@
Re-registered succesfully, setting force re-register version to %d
Not triggering remote session update, already updated {appIntegerValue: %llu, latestVersion: %llu, interestingServices: %@}
Not triggering remote session update, server bag disabled {bagDisabledValue: %@, appIntegerValue: %llu, latestVersion: %llu, interestingServices: %@}
Triggering remote session update {appIntegerValue: %llu, latestVersion: %llu, interestingServices: %@}
       found push token in: %@
No public key found {deviceID: %@}
No uniqueID provided, can't save uuid %@
New properties after set %@
Finished broadcasting nsuuid %@ to all services
Device Properties - Current UniqueIDs: %@
Device Properties - New Unique IDs: %@
Device Properties - Old Unique IDs: %@
Saving device properties settings: %@   (domain: %@)
Loading device properties
 => Loaded device properties -- found bad keys! {keysToDelete: %@}
 => Loaded device properties %@
 => No device properties loaded
Updating AuthKit for DSID: %@, AKAppleIDServiceType: %ld and inUse: %@
Couldn't find device certificate (service: %@)  (uri: %@)
Couldn't find account (service %@)  (uri: %@)
Dealloc UDPGlobalLink %@
Invalidate UDPGlobalLink
createConnectionData - localPartyID=%@
invalid link state %s
processRemoteConnectionData %@
invalid remote connection data
invalid remote connection data, %uB
connection data has unsupported version %d
connection data has IPv4 address (%d/%d) [%s:%u]
skip address pair [%@-%@].
add address pair [%@-%@]
No addresss pair is on same network, cannot connect.
startConnectionForDevice failed due to invalid deviceID=%@
startConnectionForDevice - deviceID=%@ isInitiator=%@ remotePartyID=%@ stunMICheck=%@
startConnectionForDevice failed due to invalid remotePartyID=%@
process delayed nomination request block %p.
Nominated connection matches remotePartyID %s.
add local adress %@
connection blob size (%dB) is too big, skip remaining.
#IPv4 address (%d) reaches max allowed, skip remaining.
failed to create connection data
createConnectionData - done (#ipv4: %d, length: %dB).
Link is invalidated, stop sending connection check request
Start connection check.
Connection check is done.
Connection check is timed out, cannot connect to remote party.
Link is invalidated, stop sending nominate request
_sendNominateRequest failed due to invalid localPartyID %@
Start nominate request.
Nominate request is done.
Nominate request timed out, cannot connect to remote party.
Connection echo is done.
Connection echo timed out.
echo timer %p fired (%.6f).
link is invalidated, stop echo timer.
start echo timer %p.
stop echo timer %p.
update result: src[%s], dst[%s].
add result: src[%s], dst[%s].
receive binding request %@ for [%s(%u)-%s].
process nomination request before Accept, this should NOT happen.
receive nominate binding request with remotePartyID %s.
receive nomination request with invalid remotePartyID, ignore.
nominate request with count(%d) matches remoteID %s
skip binding response to %s, socket on if_index %d is already connected to %s.
send binding response %@ for [%s(%u)-%s].
send binding response failed with %s
receive binding response %@ for [%s(%u)-%s], RTT(%.3f ms)
Nominated connection(%d) is accepted by remoteParty.
Notifying remote party is reachable for ACCEPT.
receive echo request with invalid count(%d), ignore.
receive echo request (count:%04x) for %s(%u)-%s.
send echo response (count:%04x) for %s(%u)-%s.
send echo response failed with %s
receive old echo response (%d), ignore.
receive invalid echo resopnse.
receive echo response (count:%04x, rtt:%4d ms) for %s(%u)-%s.
receive invalid data indication.
invalid data attr length (%dB).
receive indication data (%zdB) for [%s(%u)-%s].
_processStunPacket failed.
failed to verify message intergrity for stun packet type %04x.
### stun packet type %04x passed MI check.
delay nomination request before Accept.
_processStunPacket - receive invalid STUN message, type (%04X)
send stun data indication (new:%zdB old:%zdB).
sending a packet (%zdB) = %s
didReceivePacket - STUN packet (%zdB) [type:%04X %@]
didReceivePacket - unknown packet (%zdB)
============= New WPLinkManager %@ starting =============
Created a new WPContinuity instance %@
Invalidating WPContinuity instance %@
client instance created
calling continuityDidUpdateStateToState:%s
all client instances removed, currently scanning: %@   currently advertising: %@
  => Stopping advertisement for type: %s
  => Stopping scanning for type: %s
startAdvertisingOfType:%s withData:%@ withOptions:%@
  => Device not powered on
stopAdvertisingOfType:%s
startScanningForType:%s withData:%@ mask:%@ peers: %@
startScanningForType:%s withData:%@ mask:%@
startScanningForType:%s withData:%@ mask:%@ peers:%@ boostedScan:%@ duplicates:%@
startScanningForType:%s withData:%@ mask:%@ boostedScan:%@ duplicates:%@
stopScanningForType:%s
connectToPeer %{public}@, continuity %@
already connected to %{public}@.
already connecting to %{public}@  (Time: %f)
*** starting connection to %{public}@
disconnectFromPeer %{public}@, continuity %{public}@
already disconnecting from %{public}@  (Time: %f)
*** starting disconnected from %{public}@
removing a link %@ with linkID %@
sendData %luB peerID %@
GUID %@ Destination %@ Falling back to legacy encryption { encryptionType: %@, error: %@ }
Finished capturing AutoBugCapture diagnostics for encryption failure { context: %@, ECError: %@, legacyError: %@ }
GUID %@ Destination %@ Failed encryption type %@ with error %@
GUID %@ finished encryption
keyID: %@, type: %d, _encryptedDataBlob: %@, result: %@
Missing phone number authentication entitlement -- failing authenticate phone request {client: %@}
Authenticating phone {uuid: %@, client: %@}
Missing phone number authentication entitlement -- failing phone authentication signature request {client: %@}
Generating phone authentication signature over data {uuid: %@, client: %@, data: %@, length: %lu}
Generated phone authentication signature {phoneUserAuthCerts: %@, publicKey: %@, nonce: %@, signature: %@}
Failed to generate phone authentication signature {error: %@}
Requesting carrier token {uuid: %@, client: %@, subscriptionSource: %@, IMEI: %@, carrierNonce: %@}
Missing phone number authentication entitlement -- failing phone carrier token request {client: %@}
Failed to fetch SIMs {SIMFetchError: %@}
Determined phone number identifier to use for carrier token request {matchingSIM: %@, availableSIMs:%@, phoneUser: %@, phoneAuthenticationCertificate: %@}
Adding phone number account to the carrier token request {phoneUser: %@, phoneAuthenticationCertificate: %@}
Adding Apple ID account to the carrier token request {registration: %@}
Carrier token response received {resultCode: %@, serverStatus: %@, serverErrorDetail: %@, carrierToken: %@}
Missing phone number authentication entitlement -- failing phone user subscription source request {client: %@}
Setting phone user subscription source {uuid: %@, client: %@, subscriptionSource: %@}
Fetching phone user subscription source {uuid: %@, client: %@}
Failed to fetch selected phone number registration subscription { error: %@ }
  Found bad vetted alias, it was my phone number: %@ => %@
  Found unvalidated/failed alias: %@
  Found bad alias: %@ => %@
  Found bad alias, it was my phone number: %@ => %@
Alias set does not match during cleanup {self: %@, registeredButNotStored.count: %d, storedButNotRegistered.count: %d, aliasStrings: %@, aliasesSet: %@}
Account is missing sentinel alias, repairing...
Indicating that we need to re-register for alias repair
  Cleaning up account!!! -- with changes: %@
  Cleaning up expired pseudonyms {pseudonymsToRemove: %@}
Received IDQueryCompletedWithFromURI for service %@ fromURI %@ fromID %@ isRelevant? %@  errors %@
Query failed; re-registering {error code: %d}
Query failed; refreshing credentials {error code: %d}
Setting registration error to %d (%@) from reason %d
IDSDAccount initWithDictionary %@ service %@ uniqueID %@
Tried to create an account with an empty uniqueID (%@)
Tried to create an account with an empty service (%@)
Tried to create an account with unknown account type %d
IDSDAccount initWithLoginID %@ service %@ uniqueID %@ accountType %d
Tried to create an ad hoc account (loginID %@   service %@) with no primary account
Tried to create a primary account using an ad hoc service %@
Dealloc IDSAccount: %@
Missing object %@ or key %@ when changing accountInfo
Display name changed for account: %@    %@ => %@
Requested display name: %@ is not part of valid account aliases: %@, ignoring!
Request to clear Display Name on Account, Removing Display name %@
Account with uniqueID %@ was disabled by user
Setting loginID on account { oldLoginID: %@, newLoginID: %@, self: %@ }
IDSDAccount status %d, calling handler: %@
Can configure account with aliases: %@
* No aliases to configure, nothing to do here
Storing setup handler %p  %@
%@ Asked to look up device unique id for uri %@ and token %@ - failing
%@ Asked to look up device unique id for uri %@ and token %@ in our dependent registrations %@
%@ Asked to look up existince of device with uri %@ and token %@ - failing
%@ Asked to look up existence of device with uri %@ and token %@ in our dependent registrations %@
%@ Asked to look up fromID for CBUUID %@ in %@
Found locked peer %@ for cbUUID %@
Found locked peer %@ for sessionID %@
Couldn't find locked peer %@ for cbUUID %@
CBUUID matched, but uniqueID mismatched. Setting fallback device. { cbuuid: %@, uniqueID: %@ }
Did not find any device in dependentRegistrations that matches lockedPeerID. Service supports live delivery, so falling back to device that matches just cbuuid { cbuuid: %@, lockedPeerID: %@, service: %@ }
Did not find any device in dependentRegistrations that matches {cbuuid: %@, lockedPeerID: %@, count: %ld}
Returning token uri fromID for cbuuid {deviceCBUUID: %@, uniqueID: %@, deviceToken: %@, deviceFromID: %@}
Returning device fromID for cbuuid {deviceCBUUID: %@, uniqueID: %@, uniqueIDOverride: %@}
%@ Asked to look up default paired device dependent registration in %@
%@ found default paired device dependent registration %@
Found duplicate device %@, replaced with newer device %@
Duplicated device %@, ignoring...
Broadcasting registration status info changes
Broadcasting aliases changes
Broadcasting vetted aliases changes
Broadcasting profile changes
Broadcasting loginAs changes
Broadcasting displayName changes
Broadcasting pseudonym changes
Broadcasting account info changes %@
%s returning because duringInit %d isBeingRemoved %d
%@ - write account defaults: %@  (has changes: %@)
%@ - update account with defaults: %@
Current   aliases: %@
Aliases to remove: %@
Aliases to    add: %@
Calling out to linked account: %@
Not reporting tinker disabled service {service: %@}
Broadcaster for localDeviceAdded %@ on account %@
Broadcaster for localDeviceRemoved %@ on account %@
Broadcaster for didUpdatePairedDevice %@ on account %@
Notifying %@ delegate of protocol changes to device
Created IDSDXPCDaemonServer {serviceName: %{public}@, syncSupport: %@}
Incoming XPC connection {newConnection: %{public}@}
Home Number enabled
Home Number disabled
Alerting for finished Home Number registration that has not notified user %@
First unlock, kick accounts check
Received notification that Cloud Kit account status has changed. Checking to see if we need to reregister.
CloudKit device to device encryption has become available. Kicking off account repair.
CloudKit status remains unchanged. Doing nothing.
Device is properly setup
Push handler returned push token: %@
Starting Phone Number Validation request for %@   with token: %@
Missing SIM -- not sending PNR {self: %@, uniqueIdentifier: %@}
User previously denied PNR consent -- not sending PNR {self: %@, PNRuniqueIdentifier: %@}
Adding new validations state machine {self: %@, uniqueIdentifier: %@}
Registration has no corresponding user -- not sending PNR {uniqueIdentifier: %@, registration: %@}
Removing self as a phone number validation requestor {self: %@, uniqueIdentifier: %@}
Noting registration attempt for user identifier {%@} with current registration state {%ld} of type {%d}
Finished capturing AutoBugCapture diagnostics for high registration attempt rate { context: %@, sessionID: %@, error: %@ }
Updating registration info: %@
No registration info present, we must have been cancelled
Not reflecting back succeeded identification, registration is disabled: %@
Suppressing non-zero-rated SMS notification due to presence of internal deafult -- allowing SMS
Unable to post SMS alert during buddy, deferring until device is setup {CTPNR: %@}
User notification allowed Phone Number Validation delivery, sending
User notification denied Phone Number Validation delivery, not sending
Processing pending SMS alerts after restore {CTPNR: %@}
IDSRestrictions - Active: %@
IDSRestrictions - %@ Disabled: %@
Waiting on account activate, the account controller isn't ready yet
 Updating account activation if needed
IDSRestrictions - Disabling account: %@
IDSRestrictions - Re-activating a disabled account: %@
IDSRestrictions -  Manged prefs changed
Notifying all IDS accounts device paired to: %@
Notifying all IDS accounts device unpaired from: %@
%s Set the pending-reset flag back to NO.
%s Could not set the pending-reset flag back to NO.
Able to determine the has-regenerated-secured-encryption-key status. Has regenerated? %@
Unable to determine the has-regenerated-secured-encryption-key status. keychainError: %d
Updated the has-regenerated-secured-encryption-keys flag to: %@  success? %@  keychainError: %d
Removed the has-regenerated-secured-encryption-keys flag from the keychain.
Failed to remove the has-regenerated-secured-encryption-keys flag from the keychain. error = %d
Suspending OTR sessions for protection classes A and C...
Regenerating encryption keys for protection classes A and C...
Suspending OTR session with token: %@
Purged encryption keys for all paired devices. Success: %@
We have all the encryption keys, sending device info back
We're missing their keys but we sent our keys, requesting...
We're missing some keys (A: %p) (C: %p) (D: %p) (locked: %@) (firstLocked: %@)
Missing class A key, waiting for keychain save...
Missing class C key, waiting for keychain save...
Pairing: Missing class D key
%s Updating notify token state to: isPaired %llu
Update notifier state for paired devices
All devices count: %@
Activating a paired device with CBUUID: %@
WARNING: Local pairing is not supported by this platform. Why was %s called?
Result of activating a paired device with CBUUID %@ is %@
Disabling NetworkRelay for all paired devices.
Disabling NetworkRelay device {pairedDeviceUUID: %{private}@, nrIdentifier: %{private}@}
Failed to create IDSNRDeviceIdentifier from pairedDeviceUUID - failed to deactivate device {pairedDeviceUUID: %{private}@}
Update registration status with NetworkRelay for active device and disable non-active devices: %@
Paired device does not support IPsec {cbuuidUUID: %{private}@}
Failed to create IDSNRDeviceIdentifier {cbuuidUUID: %{private}@}
Skipping registerDevice with NetworkRelay as !wasInitiallySetupUsingIDSPairing
Disabling NetworkRelay device {cbuuidUUID: %{private}@, nrIdentifier: %{private}@}
Cannot ensure communication is possible because there is no active paired device.
Requesting information about the new active paired device.
Requesting information about the new active paired device was unnecessary. Communication is possible.
Missing cbuuid for paired device -- skipping {pairedDevice: %{private}@}
Queried shouldUseIPsecLinkForDefaultPairedDevice {shouldUseIPsec: %@, activePairedDevice: %@}
Registering didConnectToPairedDevice block {pair: %@}
Calling didConnectToPairedDeviceBlocks {cbuuid: %@, error: %@, pairs: %@}
Clearing didConnectToPairedDeviceBlocks {cbuuid: %@, pairs: %@}
Received paired device info: %@
%s: received invalid paired device info: %@
%s: invoked when IDSPairingManager did not know about a paired device.
Calling -[NRDeviceManager registerDevice:properties:queue:completionBlock:] {nrDeviceIdentifier: %{private}@, properties: %{private}@, cbuuid: %{private}@}
NRDeviceManager register returned an error -- ignorning it and enabling device {error: %{public}@, cbuuid: %{private}@}
Did register device with NRDeviceManager {nrDeviceIdentifier: %{private}@, cbuuid: %{private}@}
Starting UTunPeer and NRDevice bridge for device with cbuuid: %{private}@}
Failed to create nrDeviceIdentifier -- not registering {cbuuidUUID: %{private}@}
%s setting version %u
Trying to update non-tinker paired device with pushToken %@, uris %@.
Refreshing Paired Device Encryption Keys
Purged all paired device encryption keys. Requesting paired device info...
Requested paired device info. Refresh Complete!
Unable to purge the paired device secured encryption keys.
%s reading version: %u, min/max: %u/%u
PairingManager found nearbyIPsec device
Replacing uniqueID with pairedDeviceUniqueID {uniqueID: %{private}@, pairedDeviceUUIDString: %{private}@}
SupportIPSec status updated.  Should now QuickSwitch to using IPSec.
Finished resetting communication -- Done {uniqueID: %{private}@}
ActivePairedDevice alread marked with supportIPsec -- Done
Device found IPsec nearby but is not active paired device -- Ignoring {pairedDeviceUniqueID: %{private}@, uniqueID: %{private}@}
called _nrDeviceIdentifierWithCBUUID with nil cbuuid
newDeviceIdentifierWithBluetoothUUID return nil {cbuuid: %{private}@}
Coalesce queue manager enqueing message { guid : %@ topic : %@ sendMode : %@ }
Clearing coalesce queue for topic : %@
Flushing coalesce queue for topic : %@
Coalesce queue exists for topic : %@
Creating coalesce queue timer for topic : %@ with delay : %f
Clearing coalesce queue timer for topic : %@
Resetting coalesce queue timer for topic : %@ with delay : %f
Coalesce queue timer fired for topic : %@
Handling server rate limiting response for topic %@ - messages will be held for %ld seconds
*******************  %@ Error ****************************
***  Priority: %ld
***     Token: %@
*** Device ID: %@
***      From: %@
***        To: %@
  Plain text encryption error? This is non-sensical
Public/Private %@ failed :(
 => Current remote public key data for token: %@
 => Current remote public key data for device: %@
 => Data we tried to %@: %@
 => Is remote: %@
 => Token: %@
  Unknown encryption type error? This is non-sensical
******************************************************************
asked to %@, but key is NULL!
Incoming Encryption Request
Incoming Decryption Request
** This is for my phone, ignoring
 => User hit yes, adding and validating
 => User hit no, ignoring
Error posting new device notification.
Posted new device notification.
Storing activity topics: %@
Looking for an active subscription.  Stored activity topics: %@
Activity topic %@ found subscriptions %@
Subscription is in the past, continuing...
Failed to unarchive description: %@
Failed to archive description: %@
Failed to unarchive updates: %@
Returning stored updates: %@
Failed to archive updates: %@
Failed to unarchive subscriptions: %@
Failed to archive subscriptions: %@
Saving database.
Destroying database.
Closed database.
Creating indexes as needed for faster lookup
Enabling auto vacuum.
Enabling WAL journal mode.
Enabling Foreign Key support.
Successfully updated password for account (%@:%@): %@
Successfully updated auth token for account (%@:%@): %@
accountWithIdentifier could not find IDSDAccount {identifier: %@, localObject: %@}
accountWithIdentifier failed entitlement check {localObject: %@, entitlement: %@, serviceIdentifier: %@}
IDSDaemon: SetupAccountWithLoginID %@ serviceName %@ accountType %d accountConfig %@ transactionID %@ localObject %@
Process is not entitled for registration, not setting up account, bailing...
No loginID %@, not setting up account, bailing...
No serviceName %@, not setting up account, bailing...
No service registered for: %@, bailing...
Tried to setup ad hoc account directly, ignoring...
Tried to add account with unknown account type %d, bailing...
  ** Setting auth token for loginID: %@
  ** Setting password for loginID: %@
Creating new account with service name %@ login ID %@
Transaction ID %@  messageContext %@
Notifying listener %@ that account %@  is setup
Registration error %@
Linked account Transaction ID %@  messageContext %@
Notifying listener %@ that linked account %@  is setup
Linked registration error %@
IDSDaemon: AddAccountWithLoginID %@ serviceName %@ uniqueID %@ accountType %d accountInfo %@ localObject %@
Tried to add account with no serviceName %@, bailing...
No service registered for: %@, denying
Unique ID matches but not service name for account %@
Creating new account with service %@ uniqueID %@ login ID %@ accountType %d
Not creating new account, we have existing: %@
IDSDaemon _removeAccount %@ localObject %@
No uniqueID provided, bailing
_removeAndDeregisterAccount %@ localObject %@
Disabling and removing linked account: %@
updateAccount %@ localObject %@
Found blocklisted key in updateAccount call! {process: %@, key: %@}
enableAccount %@ localObject %@
Enabling linked account: %@
disableAccount %@ localObject %@
Disabling linked account: %@
auth token changed for account uniqueID %@ localObject %@
password changed for account uniqueID %@ localObject %@
authenticateAccount uniqueID %@ localObject %@
passwordUpdatedForAccount %@ localObject %@
updateAuthorizationCredentials %@ token %@ account %@ localObject %@
validateProfileForAccount %@ localObject %@
addAliases %@ toAccount %@ localObject %@
removeAliases %@ toAccount %@ localObject %@
validateAliases %@ forAccount %@ localObject %@
unvalidateAliases %@ forAccount %@ localObject %@
provisionPseudonymForURI %@ onAccount %@ withProperties %@ localObject %@
provisionPseudonymForURI -- pseudonyms are disabled by the server!
renewPseudonym %@ onAccount %@ forUpdatedExpiryEpoch %f localObject %@
renewPseudonym -- pseudonyms are disabled by the server!
revokePseudonym %@ onAccount %@ localObject %@
revokePseudonym -- pseudonyms are disabled by the server!
reportAction %d ofTempURI %@ fromURI %@ onAccount %@ requestUUID %@ localObject %@
reportAction -- disabled by the server!
registerAccount %@ localObject %@
unregisterAccount %@ localObject %@
forceRemoveAccount %@ localObject %@
_reregisterAndReidentify %@ account %@ localObject %@
deactivateAndPurgeIdentifyForAccount %@ localObject %@
hard deregister localObject %@
Trigger final deregister localObject %@
Kicking get dependent for account %@ localObject %@
Trigger accounts repair { localObject: %@ }
Registering for Registration Account Status Metric
Told to Check In for Registration Account Status Metric with activity %@ 
Got called to checkpoint Registration Account Status Metric run state with non null activity %@
Not entitled to clear IDS state %@
Told to clear IDS state %@
Initial: %s services: %@
iCloudSignInWithUserName %@ localObject %@
iCloudUpdateForUserName %@ localObject %@
iCloudModifyForUserName %@ localObject %@
iCloudSignOut %@
iTunesSignInWithUserName %@ localObject %@
iTunesSignOut %@
gameCenterSignInWithUserName %@ localObject %@
gameCenterSignOut %@
gameCenterModifyForUserName %@ localObject %@
iCloud sign in hack with userName %@ and password %@ localObject %@
iCloud sign out hack with localObject %@
setPasswordForProfileID localObject %@ {username: %@, password: %p
Finished setting password {success: %@}
Updating sub services %@ for service %@ deviceUniqueID %@
Save paired device info: %@
Setting NSUUID %@ on device with uniqueID %@  current pariedID: %@  service %@ localObject %@
 *** Cloud pairing detected setting BTUUID %@   on device ID: %@ **** (From: %@)
 => Noting it was before first unlock
 => Ignoring, no change
   => Device properties: %@
Sending continuity reset to IDS clients
Received request to regenerate registered identity
Missing key rolling entitlement -- returning early
System did leave first unlock, checking pending if we cloud paired before unlock
   we did! let's update accounts
in a few seconds
   => posting deferred device update
Broadcasting no devices for account %@ even though we have some
System has left first unlock: processing stored incoming messages.
Attempt to use the Registration Control API's without the correct entitlement, Failing request
registrationControlSetRegistrationStateForRegistrationType %@ registrationType %@ localObject %@
System has left data protection lock: Checking Migration Status
Faking data protection lock as first unlock: Processing stored messages.
System going to sleep
System waking up
IDSDaemon got a wake when it was not asleep! Current sleep state: %d
Forcing a bag fetch to refresh EN versioning
IDSDelivery has %lu pending offline messages and sees that push is now connected - scheduling a send attempt in %f seconds.
Push is still connected - replaying %lu offline message sends.
Done replaying %lu offline message sends.
Push is NOT still connected - readding %lu offline message sends.
Total offline message sends enqueued: %lu.
-effectiveMaxPayloadSizeIfCanUseLargePayload: {effectiveSizeToReturn: %ld, canUseLargePayload: %@, ReducedLargePayloadSizeOverhead: %@, courierAllowedLargeSize: %ld, courierAllowedNormalSize: %ld}
Bad signature for message: %@    blowing peer tokens
 targetPeerID: %@
 sourcePeerID: %@
  targetToken: %@
 sessionToken: %@
      service: %@
Message is destined for an accessory with uri %@
  Finished sending message: %@  to accessory: %@
Sending To %@
Handling message queue With Fanout for display IDs: %@  (originalURIs: %@)
   Queue: %@
 Flushing message queue
 FromID didn't match some messages, keeping some messages in queue {fromID: %@, toKeep: %@}
Checking the estimated payload size for message not requesting encryption... %d B
Attachment commands must not be forced to send as attachments
 sendAsAttachment? %@ The payload is %lu bytes.
We will send %@ individual messages
Emptying message queue for URIs: %@
No queued items to remove for URIs: %@
Removing message from queue for URIs: %@
No queued message matched for removal for URIs: %@
Enqueuing message: %@  to people: %@ service: %@ (original: %@)
send FTMessage: %@   fromID: %@   toID: %@  toToken: %@  toPeople: %@  toMe: %@  delivery status: %@ certified delivery: %@
    Delivered FTMessage: %@ to token: %@
    Delivered FTMessage: %@
                  Result code: %ld
                        To ID: %@
                      From ID: %@
            Result dictionary: %@
                        Error: %@
    Requested Delivery Status: %@
 Requested Certified Delivery: %@
                 Message Body: %@
Sending callback for FTMessage send
Was accessory online?: %@
    Told to send Fanout Message: %@ GUID: %@ isEngram? %@ Chunk: %@ isFinal?: %@ 
Sending %@ with top-level encryption type "%@" and dtls: %@
              To Destinations: %@
Asked to sendAttachmentWithGUID %@  topic %@ toToken %@ toID %@ fromID %@ service: %@
    Wrote data to path: %@
Send attachment message progress updated to %lld of %lld (%lld bps)
Succeeded uploading file transfer: %@
Finished sending attachment message %@. Result code: %ld. Error: %@   lastCall: %@
Failed uploading attachment file transfer: %@
Update for uploadFailure message: topic %@  response %ld  error %ld lastCall %@
IDSDeliveryController sendMessage
  Coalesce queue view : %@
Incoming urgent message for a topic with coalesce messages in queue
Preparing to send message: %@ looking up %lu people
Found messagable people: %@
Query completed: success %@  offline %@  allowPartialSendsToSucceed %@
Query completed but message for IDs %@ has already expired. Failing.
Query failed because the device is offline. Enqueuing for the return of networking since we have timeout time left. Number of offline sends enqueued ahead of us: %lu.
Peer ID manager succeeded lookup for IDs: %@
Peer ID manager failed lookup for IDs: %@   (Errors: %@)
Issuing query for: %@   from: %@
Tokens are being ignored, failing message {msg: %@}
sendIDSMessage called with nil message -- returning
Sending IDSMessage: %@  topic: %@
Server has overridden service maximum timeout: %@, capping message timeout with %@.
Sending messageDictionary: {suppressed} peerMessage %@  wantsResponse %@ timeout %@ fromID: %@ toID %@ toPeople %@ topic %@ toMyself: %@
_sendErrorMessage %@ onService %@ fromID %@ fromIdentity %@ toID %@ toToken %@ topic %@
All sends complete
Pipelines done processing all fanouts %@ count %ld for mmlGUID %@
Sending guid %@ through delivery pipeline
GUID %@ Failed with error: %@
GUID %@ Upload failure metric sent with response: %ld error: %ld lastCall: %@
Pipeline done with all fanouts %@
Submitting metric { sendTime: %.4f, endpointCount: %ld, pipeline: %@, mmcs: %@ responseCode: %ld }
IDSDeliveryController received messages to coalesce for topic %@ count %lu
Starting Up
Told all registrations succeeded, calling completion blocks
invalidate HCInfo - local(%d,%p->NULL) remote(%d,%p->NULL)
setLocalContext - %p->%p
setRemoteContext - %p->%p
Device %@ cbuuid %@.  Is IDS nearby? %@ Connected? %@. Is terminus nearby? %@ Connected? %@ 
Queried pairedDeviceUUIDString {pairedDeviceUUIDString: %@}
Could not query pairedDeviceUUIDString {isPaired: 0}
NRDeviceMonitor already running for {deviceIdentifier: %@}.
Received devices with unique ids -> cbuuids %@
Received device with unique id %@ updated BTUUID: %@
Ignoring update for nil or default paired device BTUUID: %@
Created new peer %@ for uniqueID %@ with btuuid %@
Updating existing peer %@ for uniqueID %@ with btuuid %@
LOCALSETUP: local setup started - clearing all stats
LOCALSETUP: Informed that local setup has completed!
LOCALSETUP: Disabling Cloud Connections for QWS
LOCALSETUP: Enabling Cloud Connections
Peer %@ is created from sessionID %@ (peer map: %@)
WARNING: Peer from sessionID %@ shouldn't be created for the default paired device! (deviceInfo: %@) (peer map: %@)
Peer %@ is created from btID %@ (peer map: %@)
UTUN sendData
OUTGOING-UTUN_DELIVERY:%@ SERVICE:%@
UTUN request to send %{public}@ priority local message payload of data size: %d  guid: %{public}@  expirationDate %@ enforceRemoteTimeout %@ for topic: %{public}@:%{public}@ to deviceIDs (count: %{public}@)
WARNING: A message for the local default paired device has reached the delivery controller but we do not have a peer already for it, It was likley sent before QWS was completed. Purging message. Destination Device: %@, Current Device:%@ 
Skipping device %@ which we already sent to.
UTUN request to send %{public}@ priority local message payload of data size: %d  guid: %{public}@  for topic: %{public}@:%{public}@ to uri %@ deviceID %{public}@ with seq[%u]
WARNING: Unable to create the peer for the device %@
Unable to find peer for deviceIDs %@ failing the message.  (Peers: %@)
Attempting to cancel message ID: %@
local account setup complete - has deferred task? %@
calling deferred default peer connected
enableConnectionForDefaultPairedDevice %@
No connection found for default paired device %@.
enableCloudConnectionForDefaultPairedDevice %@
Got topic set update %@
Warning: -[IDSUTunDeliveryController setAllowedTrafficClasses:] called but missing nrDevicePreferencesHandler; allowedTrafficClasses %@
There is a new session for the local path, skipped removing...
Already have a peer ignoring call to add {deviceUniqueID: %{private}@, btuuid: %{private}@, deviceIDToPeer: %{private}@}
EnableOTR: %@.
peer nearby state changed:%@    screenLit:%@   uniqueID:%@   peer-count:%lu
Broadcasting isNearby %@ for %@
peer connectivity changed: %@    uniqueID: %@   map: %@
Broadcasting isConnected %@ for %@
Submitting aggd metric for connected time %f seconds.
Submitting AWD metric {nearbyToConnectedDurationInMs: %lld ms}.
Broadcasting isCloudConnected %@ for %@
peerHasSpaceForNonUrgentMessages %@ %@ %@ isDefaultPeer? %@
peerHasSpaceForUrgentMessages %@ %@ %@ isDefaultPeer? %@
local account setup has not finished yet - defer default peer connected
default peer connectivity changed: %@ -> %@
default peer connectivity changed but no default peer
legacyUTunBTLinkManagerDefaultPeerConnectivityChanged: %@ but using IPsec link - drop callback
default peer nearby changed: %@ -> %@
%@ Did not find default peer device.
legacyUTunBTLinkManagerDefaultPeerNearbyChanged: %@ but using IPsec link - drop callback
cloud connectivity changed for default peer: %@.
legacyUTunBTLinkManagerDefaultPeerCloudConnectivityChanged: %@ but using IPsec link - drop callback
defaultPeerMagnetIndicationOfAwakeStateChanged %@
defaultPeerClassCConnectivityDidChange %@
defaultPeerSetPreferInfraWiFi: %@ services: %@
defaultPeerSetPreferInfraWiFi failed due to nil device identifier.
defaultPeerSetLinkPreferences, service: %{public}@
defaultPeerSetLinkPreferences failed due to nil device identifier.
setBluetoothLinkPreferences: service: %{public}@, pps: %d input bps: %d output bps: %d intent: %{public}@
defaultPeerSetWantsQuickRelayRequest: %@
[IDSUTunDeliveryController defaultPeerSetWantsQuickRelayRequest:] called but missing nrDevicePreferencesHandler
defaultPeerSupportsDirectMessaging: %@
defaultPeerUnpairStart
defaultPeerDropDisallowedMessages
peerCloudConnectivityChanged: %@ but using IPsec link - drop callback
cloud connectivity changed for peer %@: %@.
Tried to process cloud connectivity change with nil peer.
%@ cloud connectivity changed: %@ -> %@
Broadcasting found nearby IPsec device {uniqueID: %@}
Set Enable OTR Timer for 60.0 seconds
Set OTR for defaultPairedDevice: YES.
Set OTR for defaultPairedDevice: NO.
didAddPairedDevice is called.
didRemovePairedDevice is called.
didUpdatePairedDevice is called, enable OTR %@, otrInitialized %@.
Peer %@ is already locked for btUUID %@, ignore peer %@
Lock peer %@ for btUUID %@.
Remove locked peer %@ for btUUID %@
Unlock all peers, clean up.
addContinuityPeer is called for default paired device, please file a bug.
Add new peer %@ for btUUID %@, list %@.
current peer list:%@
Enable peer %@ for btUUID %@.
Peer %@ is already locked for btUUID %@, skip other peers.
No pending peer, bail out.
Search peer in %@. (current peer %@, count %d)
peer %@ has count %d
Found no other peer, stick with peer %@
Try new peer %@, disable peer %@.
Peer's session ID %@ is for the phone continuity local message.
Told to enable OTR for default paired device
Rapport discovered device. {Peer:%@, deviceID:%@}
Rapport lost device. {Peer:%@, deviceID:%@}
No predicate found for URI %@
Fetching contacts for predicate %@
Found contact %@, for URI %@ with error %@
Created group SKM cache { self: %@ }
Resetting group SKM cache { self: %@ }
Resetting remote SKM cache { self: %@ }
updateGroupStableKeyMaterialCacheForPushToken: { self: %@ pushToken: %@, SKM: %@ current SKM: %@, previousSKM: %@ stableKeyMaterials count: %lu}
updateGroupStableKeyMaterialCacheForPushToken: { self: %@ pushToken: %@, remove outdated SKM from cache: stableKeyMaterials count: %lu, %@
Too many services in entitlements! {value: %@, index: %llx}
Daemon XPC Interface Up
Incoming Daemon XPC Interface with new connection %@
We got remote object proxy %@ new observerProxies count: %lu
Daemon Invalidation Handled
Daemon Interruption Handled
Daemon failed to broadcast didCreateGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@
Daemon failed to broadcast didCacheGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@
Daemon failed to broadcast didUpdateGroup {previousGroup: %{private}@, updatedGroup: %{private}@, observerProxy: %{public}@, error:%{public}@}
Daemon failed to broadcast didReceiveDecryptionFailureForGroup {group: %{private}@, observerProxy: %{public}@, error:%{public}@}
Daemon failed to broadcast didReceiveRegistrationIdentityUpdate {observerProxy: %{public}@, error:%{public}@}
GUID %@ Received APNS ack for MML %@
GUID %@ Received APNS ack for Fanout %@
GUID %@ APNS ack received for destination %@
Building Message delivery
Missing accountID for outgoing session, bailing...
Missing destinations for outgoing session, bailing...
Missing transport type for outgoing session, bailing...
Missing uniqueID for outgoing session, bailing...
Found existing session matching uniqueID -- replacing with new instance { uniqueID: %@, oldInstanceID: %@, newInstanceID: %@ }
Already have an existing session with uniqueID %@, bailing...
Failed to create outgoing session.
Missing accountID for incoming session, bailing...
Missing destinations for incoming session, bailing...
Missing transport type for incoming session, bailing...
Missing uniqueID for incoming session, bailing...
We already have an existing session with unique ID %@, ignoring self invite...
%@ - Failed to create incoming session
Received incoming invitation with payload %@ topic %@ fromToken %@ fromID %@ toID %@ fromStorage %@
No sessionID provided in invitation, bailing...
Missing originator for session invitation, bailing...
Creating IDSSession for incoming invite
Enqueuing incoming session invitation block from %@ with key %@
Couldn't create session for invite, bailing...
Done with incoming network availability check; networkOkForSession: %@
Missing encryption setup info, bailing...
Wifi connectivity check failed, declining invitation!
Did not find a client that could handle the invitation for service %@, ignoring invitation...
Network availability check indicated that we should not continue to process this session invitation
Enqueuing incoming session accept block from %@ with key %@
Enqueuing incoming session decline block from %@ with key %@
Enqueuing incoming session cancel block from %@ with key %@
Enqueuing incoming session message block from %@ with key %@
Enqueuing incoming session end block from %@ with key %@
Enqueuing incoming session reinitiate block from %@ with key %@
Enqueuing incoming group session message block fromID %@ with the group %@ sessionID %@ (message %@)
Receiving Key Material (%@) [MKM] -- %f
Receiving Key Material (%@) [SKM] -- %f
Storing the master key material %{private}@ stableKeyMaterial: %{private}@ for %@ token %@
not received any valid MKM or MKM for %@ token %@
key material not decrypted
Storing all valid master key materials %{private}@ for %@ token %@
Failed to decrypt a key material in the broadcast group -- skipping the remaining key material
not received any valid remote cached MKMs for %@ token %@
Received the prekey recovery request for group %@ destination %@
Received the key recovery request for group %@, needsToRecoverMKM: %@, needsToRecoverSKM: %@
Receiving Key Material (%@) [PreKey] -- %f
Storing the public key %{private}@ for %@ token %@
Couldn't find the session %@ to clean up!
Cleaning up session %@, shouldCleanSessionStatus: %@
Cleaning up session based on instanceID { instanceID: %@, correspondingUniqueID: %@ }
skip cleanupSessionWithChannelDestination for destination %@ and clientChannelUUID %@
Cleaning up session(s) for client ID: %@ because it died
Cleaning up session: %@ for client ID: %@
Cleaning up session(s) for service: %@ with reason %ld
Cleaning up session: %@ for service: %@
%@ - No account found to build specificOriginator, bailing...
%@ - No device found to build specificOriginator, bailing...
%@ - No device push token found to build specificOriginator, bailing...
%@ - No device identity found to build specificOriginator, bailing...
%@ - No unique ID provided to lookup session, bailing...
%@ - No instance ID provided to lookup session, bailing...
%@ - No group ID provided to lookup session, bailing...
%@ - No group UUID provided to lookup session, bailing...
Updating critical reliability {needsCritical: %@, session: %@}
Empty phone number after registering
Clearing out current aliases
Adding alias: %@
Setting alias as validated
Account already has phone number added, not adding
Updating preferred account to Home Number {service: %@, oldID: %@, newID: %@}
Ad hoc account %@, can't call %s, ignoring...
Local account %@, can't call %s, ignoring...
Under first lock and keychain upgrade pending, not loading registration for this account
We have no registration info, needs to be created
Our registration types don't match, needs rebuild  (%d vs %d)
Registration type is not supported: %d
Emails are different, we need to rebuild  (%@ vs %@)
Push tokens are different, we need to rebuild  (%@ vs %@)
Didn't find a registration in the keychain for %@ %@
Found pre-existing regionID %@
Found pre-existing base phone number %@
Found pre-existing region context %@
Found pre-existing confirmedEmails emails %@
Setting profileID %@ onto registration
Setting idsUserID (for auth cert), isCDMA, and keyPairSignature on registration using existing registration with the same profileID { keychainRegistration: %@ }
Rebuilding aliases for: %@
 => ignoring failed validation email: %@
Existing region profile: %@
We have a profile, and it's validated!
No region ID, we'll use our profile's
Setting idsUserID (for auth cert), mainID, isCDMA, and keyPairSignature on phone number registration {mainID: %@, isC2K: %@, keyPairSignature: %@}
Created new registration info: %@
Using cached registration info: %@
  We have no URIs registered, and we're not DS based, forcing unregistered
  We have no registration cert, forcing unregistered
Setting profileID %@ onto account
Current aliases: %@   for: %@
 => adding candidate email: %@
Ignoring tinker disabled service {service: %@}
Adding ad hoc service names %@ to %@
Device Controller says I should maybe try to re-register now: %@
This indeed necessitated a re-register, kicking it off: %@
***** Notified that our previous identity was rebuilt from scratch -- purging identity and re-registering { account: %@ }
***** Notified that a new identity was generated -- re-registering { account: %@ }
***** Notified that our identity needs to roll encryption identity -- rolling and re-registering { account: %@ }
***** Keychain migration completed
Account %@ is disabled, ignoring...
****** Forcing Registration, needs migration ******
****** NOT Forcing Registration, we were active, but unregistered, however there's nothing to register: %@ ******
****** Forcing Registration, we were active, but unregistered: %@ ******
Updating vetted aliases to: %@     current: %@   ID: %@
     Added: %@
   Removed: %@
   Registration requires keychain migration, not proceeding
Safely migrating key pair signature over: %@
Registration protocols are empty, this is probably a new install, we'll force a register
Registration identity protocol version is empty, we'll force a server registration   (%@ -> %@)
Registration identity protocol versions different, we'll force a server registration   (%@ -> %@)
Registration identity versions different, we'll force a server registration   (%@ -> %@)
Registration application protocol version is empty, we'll force a server registration   (%@ -> %@)
Registration application protocol versions are different, we'll force a server registration   (%@ -> %@)
Registration key pair signatures are different (%@ -> %@), clearing cert - forcing redentification
Message Protection Public Data Needs Update, we'll force a re-register
Registered but missing an authentication cert, forcing re-register
****** Someone set default for SMS re-register ******
****** Someone set default for HTTP re-register ******
****** Forcing FaceTime Registration ******
Calling account setup handler %p
We were registered but we have no aliases %@ or dsHandle %@
We were registered, but we're missing our private/public identity keys... will reregister: %@
Setting account: %@ to failed registration
Setting account: %@ to unregistered
Setting account: %@ to authenticated  (Reg status: %d)
Setting account: %@ to authenticating  (Reg status: %d) (Waiting for restore)
Setting account: %@ to authenticating  (Reg status: %d) (Waiting for push token)
Setting account: %@ to authenticating  (Reg status: %d)
Setting account: %@ to registering  (Reg status: %d)
Setting account: %@ to registered
  Stop Registration Agent for: %@
Registration is not active on account %@, ignoring...
 => Forwarding to Primary: %@
 => Re-registering and re-provisioning: %@
  ** Removing authentication credentials **
Device is still under first data protection lock, changing request to a deferred re-identification
Daemon reregister/reidentify account
  ** Re-identifying from beginning **
  ** Re-registering **
Device is still under first data protection lock, deferring request
Migration is complete, checking to see if we should re-register now
System started backup: %@
System restore state changed: %@
We had a pending GDR, kicking it off now: %@
Daemon activate account registration
****** Purged keychain data ******
*** Activating registration: %@   Login: %@   Service: %@   Type: %@   Environment: %@   Registration: %@
Registration info is not supported on this device, disabling: %@
   ** Failed enabling registration, disabling... **
Using server: %@:%@
Couldn't get bag url
Priming Server bag
...done
Daemon deactivate account registration
*** Deactivating registration: %@   Login: %@   Service: %@   Type: %@   Environment: %@   Registration: %@
*** simply marking account as unregistered: %@
*** removing registration from keychain: %@
 => Authenticate (Environment: %@) %@
Starting auth for: %@
Asked to authenticate, but haven't received push token yet, waiting... (Mine: %@  APSD: %@)
Client requested re-authenticate (Environment: %@)
Retrying registration, to check for backup state
Migrating Apple ID based registration info: %@
Rebuilding aliases for: %@ (%@)
Daemon register account
Re-register called (Environment: %@) %@
Asked to register, but haven't completed upgrade/restore, current state: %@
We were missing candidate alias: %@, adding it
Asked to register, but haven't received push token yet, waiting... (Mine: %@  APSD: %@  Env: %@)
Client requested re-register: %@ (Environment: %@)
Daemon unregister account
 => Deregister: %@ (Environment: %@)
Client requested de-register (Environment: %@)
Client password updated
Clearing signature, and re-registering
Client updating auth ID: %@  token: %@
... Saving
Informed of push token change to: %@, reregistering (from: %@)
Informed of push token change to: %@, but no need to reregister (from: %@)
Received reload bag push for: %@
 => Reloading iMessage bag
 => Reloading FaceTime bag
 => Reloading FaceTime Audio bag
 => Reloading FaceTime Multiway bag
Not adding registered phone alias to appleID account {uniqueID: %@, phoneAlias: %@}
My current handles: %@
My current vetted handles: %@
My current vetted emails: %@
Asserted Emails: %@
My new aliases: %@
Newly added: %@
 => All handle based account, not showing available notification
 => DS handle based account, not showing available notification
 => Not adding, new handles does not contain this alias
 => Not adding, this is my phone number
** Adding notification for %@  on device %@  on apple ID: %@ for service: %@
Alias was recently selected, just adding {alias: %@}
** Not showing notification, service is not configured to show them
** No new handles!
 => We should auto configure all handles
    Vetted: %@
   Current: %@
      Checking: %@
         => Not in alias strings: %@
         => Not in auto register: %@
         => Already in auto register set
      => Already in alias set
** Auto registering handles: %@
No handles to auto register
 => Ignoring, we're not authenticated for: %@
 => Not updating handles, this is not an apple ID or phone based account for: %@
Not issuing handle gathering, we're in progress now
 => Kicking off handle gathering for: %@
  (currentAliases: %@)
  (currentVettedAliases: %@)
  * Sending handle update request for: %@
Handles query completed with result: %@   account: %@
 *** This was successful, but handles were empty? Ignoring...
 *** Handles query failed, status: %d
Received device updated push for profile: %@   token: %@   service: %@  for: %@
Ignoring update - we have recent registration events
System not setup, ignoring devices updated push for: %@
Device is still under first data protection lock, ignoring for: %@
  Empty user ID, ignoring for: %@
  Unknown profile ID ID, not proceeding for: %@
 => Ignoring a device update from myself for: %@
 => Ignoring, we're not registered for: %@
 => Kicking off device and handles gathering for: %@
Received handles updated push for profile: %@ allowGDR: %@   status: %@   for: %@
System not setup, ignoring handles update push for: %@
  Not an appleID registration, not perfoming GDR for : %@
Received flush cache push for uris: %@
Should retry (resultCode %ld) (retries %d) (%@)
Should reregister then retry (resultCode %ld) (%@)
Should not retry (resultCode %ld) (retries %d) (%@)
iCloud pairing account is usable, updating device properties
iCloud pairing account is not usable, not updating device properties (registered: %@, primaryRegistration: %@, isEnabled: %@)
Device is still under first data protection lock, deferring request for: %@
Not issuing dependancy check, we're not through buddy yet for: %@
Not issuing dependancy check, we're in progress now for: %@
Issued dependent registration check for account: %@   service: %@
Device query completed with   Account ID: %@   service: %@
  => seconds: %f
 *** This is our first dependent handles check, we're just storing them
 *** Devices query failed, retrying in %f
 *** Not notifying for device name: %@  service: %@, we already know about this one!   hardware: %@
 *** Not notifying for device name: %@  service: %@, don't have any valid handles!   hardware: %@
 Queued notification for device name: %@   service: %@  handle: %@ hardware: %@
  Found similar account: %@
We don't have an enabled account for service %@ with %@ as an alias, ignoring...
 Adding notification for device name: %@   service: %@  handle: %@
Flushing cache for: %@
Not registered. Waiting to send the 130 { registrationStatus: %ld, retry: %@, registeredURIs: %@, service: %@ }
Updating active URIs: %@   service: %@
   Sending to active sessions for URI: %@   sessions: %@
   No active sessions from: %@
Succeeded SMS identification with info: %@    number: %@  token: %@
Updating caller ID to phone number: %@
Starting registration for: %@
Updating registration for: %@
Succeeded registering: %@  (newly registered: %@)
Getting GameCenter Data from registration with contextInfo: %@
Saved: %@
vettedAliases: %@
Checking to see if I should confirm aliases for: %@
Aliases that are unvalidated: %@
Forcing a handles query request post-register to pull the current state
Finished registering without profileID, setting profileID %@ onto account
Registration failed for %@   (Error: %d)
Failed, %@ => Disabling service
Server denied registration
Removing keychain info
We've been rate limited, disabling
Absinthe failed, just disabling
Too many SMSs, deactivating me
 => Will retry SMS Registration: %@
 => Resetting status to waiting for auth response: %@
 => Will retry Authentication: %@
 => Not retrying, max retries hit
 => Nuking Home Number user {error: %ld, registration: %@}
 => User has disabled SMS Authentication, disabling the account
 => User has disabled SMS Registration, disabling the account
Broadcasting registration failed for account %@
Needs deletion: %@ (%@)
Deleting account ID: %@
Deregistration succeeded for %@ - %@
Ignoring re-identification request, registration is disabled: %@
Registration controller requested new SMS registration -- starting from scratch
Registration controller requested new SMS registration -- noting that we should re-query handles
Started authenticating for info: %@
Succeeded authentication for info: %@
Updating profileID: %@
Authentication failed for info %@    with error code: %d
Auth failed but we're registered, ignoring...
Removing profileID
Succeeded Validated Email Query info: %@    Emails: %@  (Session: %@)
Succeeded region validation with region ID: %@  phoneNumber: %@  context: %@  verified: %@
Resulting registration info: %@
Failed region validation for registration info: %@      error: %@   info: %@
 => Remove aliases: %@   for: %@
Request to remove aliases: %@
Empty aliases, ignoring
Removing candidate email: %@
Email was candidate, just removing: %@
Removing confirmed email: %@
Alias is registered, needs re-register for: %@
Alias wasn't registered, moving along: %@
Email was unconfirmed, just removing: %@
Client request to remove aliases: %@
 => Add aliases: %@
Empty alias, ignoring
Request to add aliases: %@
 => Found my phone numbers: %@
 => Current aliases: %@
 => Vetted aliases: %@
 => Adding alias: %@  (and as candidate)
Client request to add aliases: %@  account: %@
Request to validate aliases: %@
%@ is already validated %@
Request to validate aliases: %@, but device is not authenticated
%@ needs to be validated
%@ should be registered
Alias all already validated, registered, returning
We're under first lock, not registering aliases: %@
We've recently queried the vetted handles on the account, we'll use the local vetting status (%@)
Client request to validate: %@  account: %@
Request to unlink aliases: %@
Request to unvalidate aliases: %@, but device is not authenticated
Updating vetted handles to remove: %@
 => Final: %@
Client request to unvalidate: %@  account: %@
***** Request to deactivate and purge my identity
 => Unregistering
 => Purging my message protection identity
Client request to refresh valid aliases
Request to refresh valid aliases, but device is not authenticated
Server indicated we are out of sync with pseudonyms, kicking deletion {pseudonym: %@, uniqueID: %@}
Client request to validate profile info: %@   account: %@
Broadcasting refresh registration for account %@
Grace period is still valid -- returing state {service: %@, loginID: %@, alias: %@, now: %@, then: %@}
Updating user intent state {service: %@, loginID: %@, alias: %@, from: %@, to: %@}
Stopping user intent tracking {service: %@, loginID: %@, alias: %@}
Returning _allUserIntentInfo {service: %@, loginID: %@}
Server bag overrided grace period outside acceptable range -- ignoring {gracePeriod: %f}
Server bag overrided default max selected grace period {gracePeriod: %f}
System did leave first unlock, checking pending items
   We had a pending handle request, kicking off
   We had a dependent reg request, kicking off
   We had a pending re-identify request, kicking off
   We had a pending re-register request, kicking off
Using Max GDR in 24 hour period override value of %d 
Server Bag provided us with %d max forced GDRs
Server Bag has no value for max GDR per day, using the default: %d
Checking if loginID update is needed for existing account on service { oldUsername: %@, newUsername: %@, serviceIdentifier: %@ }
Updating loginID on existing account { oldUsername: %@, newUsername: %@, serviceIdentifier: %@, account: %@ }
IDS responding to sign-in { domain: %@, username: %@, token: %@, hasPassword: %@, accountStatus: %@, handles: %@ }
Device has hard deregistered -- ignoring sign-in
No username provided -- ignoring sign-in
Saving status to the account { accountStatus: %@ }
Created new account for sign-in { service: %@, account: %@ }
Updated existing account with account info { service: %@, account: %@ }
Created new linked account for sign-in { service: %@, account: %@ }
Updated existing linked account with account info { service: %@, account: %@ }
IDS responding to sign-out { domain: %@ }
Device has hard deregistered -- ignoring sign-out
Removing account for sign-out { account: %@ }
Skipping removal of non-Apple ID account for sign-out { account: %@ }
IDS responding to updated account info { username: %@, accountInfo: %@ }
 Device has hard deregistered -- ignoring update
Update called but for account other than the primary iCloud -- ignoring update
Update called but for the primary iCloud -- committing update to relevant accounts
Updating matching account (and linked accounts) with account info { account: %@ }
IDS responding to account modification { username: %@ }
Checking IdentityServices accounts to know if we should attempt a repair { foundAccount: %@ }
Auth token found on account -- attempting to kick iCloud repair logic
IDS responding to account modification for GameCenter domain { username: %@ }
Initiating a reregister to update Game Center specific user data. Data stored in IDS {%@}, updated data received from accounts {%@}
Account data is up to date with IDS, ignoring notification
No GameCenter IDSDAccount found with username {%@}. Trying to sign in.
No GameCenter IDSDAccount found with username {%@}. Cannot modify.
We already have an inflight request for topic %@, checking if we have a backup
We already have a backup request for topic %@, throwing this request away
We already have an inflight request for this topic %@, adding it to the backup queue
This is the first request for topic %@, kicking off a server message for it
We received a 165 from the server for topic %@
We received a last from storage from the server for topic %@
Topic %@, has timed out waiting for server response
Topic %@ has recently received a message from storage.  Starting a new extended timer for retry.
We timed out with our request for %@ however we have one in the pending queue, Not retrying and instead letting that take over
The topic %@ is a pass-through-message service. Not retrying.
We have not used up our remaining retries on topic %@: Used: %d Available: %d
We have used up all available retries for topic %@: Terminating state machine
Finished sending pending message request response for topic %@  [%@]
Failed sending pending message request response for topic %@. Result code %ld. Error %@.
Told to terminate state machine for topic %@
Unable to find a topic timeout timer, This will likely cause a bug
We terminated our state machine for %@, however we have another backed up, kicking off another state machine
Was told to stop, but we didnt have one in progress...
Told about a message from server storage, but we dont have an ongoing metric for it, not able to incriment
IDSStreamEncryption_Init not enough key material bytes: have %d but need %d
encryption setup (v%d):
send ssrc:%08x start-seq:%04x
recv ssrc:%08x start-seq:%04x
srtp not initialized for transform
srtp rollover counter reached end - hard stop before reusing key
packet with sequence number: %u->%u dropped by replay protection
Malloc Failed to allocate replayWindow!
Malloc Failed to allocate replayWindow->list!
IDSStreamEncryption_LeftShiftReplayList returned NO. seq(%u->%u) = %u
IDSStreamEncryption_SetbitReplayList returned NO. seq(%u->%u) = %u
IDSStreamEncryption_SetbitReplayList after clear returned NO. seq(%u->%u) = %u
packet too old. seq(%u->%u) = -%u
IDSStreamEncryption_GetbitReplayList returned YES. seq(%u->%u) = -%u
IDSStreamEncryption_SetbitReplayList for old packet returned NO. seq(%u->%u) = -%u
CCCrypt failed with status: %d
Initial state check for Phone numbers
Device identifier differs disabling dual mode {persistedDeviceIdentifier: %@, currentDeviceIdentifier: %@}
Determined if device is in dual phone identity mode { isDualIdentity: %@, multipleInsertedSims: %@, isDeviceInDualPhoneIdentityMode: %@ }
Cannot force remove phone users. { user: %@ }
This device does not support identification -- returning no users
Recognized phone number change without labelID change {labelID: %@, currentUser: %@, newUser: %@}
Recognized SIM property change {currentUser.defaultUser: %@, newUser.defaultUser: %@, currentUser.mcc: %@, newUser.mcc: %@, currentUser.mnc: %@, newUser.mnc: %@}
Finished synchronizing Sims to users {currentUsers: %@, updatedUsers: %@, dualMode: %@, inManualSelectionMode %@, selectedLabelIDs: %@, tempLabelIDs: %@, sims: %@}
Received selectedSubscriptionLabelDidChange
Received SIMInformationDidChange
****** Device isn't in a state that can register right now, bailing
****** Device is not configured yet, bailing
****** Under first lock and keychain upgrade pending, bailing
** Found no tracked Phone Number registration
** Found Tracked Phone Number users: %@
** Dispatching request to re-register via SMS
IDSSIMPhoneUserSynchronizer received an update to the paired tinker device
IDSSimPhoneUserSynchronizer does not support non-tinker devices. isTinkerConfiguredWatch: %d pairingType: %ld
====== Personal Key Cache:
   Device ID: %@    Identity: %@   PushToken: %@
Removing key {forURI: %@, fromURI:%@, pushToken: %@}
Clearing public and personal keys
Migrating user store to new format {oldMap: %@, newMap: %@}
UserStore reloading {realm: %@}
Provider created change set {current: %@, updated: %@, provider: %@}
Updating user {user: %@}
Broadcasting update user {user: %@}
User is not present -- not updating {user: %@}
Silently updating user {user: %@}
Adding user {user: %@}
Broadcasting new user {user: %@}
Removing user {user: %@}
We do not support DS users here at this time! {user: %@}
Tried to set a mismatching credential for user! {credential: %@, user: %@}
Updating user properties {user: %@, props: %@}
Broadcasting update user props {user: %@}
User is not present -- not updating props {user: %@}
Missing activity monitor entitlement -- failing creation of IDSDXPCActivityMonitor collaborator {connection: %@}
Invalid activity monitor entitlement -- failing creation of IDSDXPCActivityMonitor collaborator {connection: %@, activityMonitorEntitlementValue: %@}
Found a non-string activity monitor entitlement value -- failing creation of IDSDXPCActivityMonitor collaborator {connection: %@, activityMonitorEntitlementValue: %@}
Created XPCActivityMonitor {self: %p, activityMonitorEntitlementValue: %@, connection: %@}
Not entitled for activity monitor activity! {self: %p, activity: %@, _activityMonitorEntitlements: %@}
Posting update {self: %p, activity: %@, update: %@}
Adding activity monitor client {self: %p, activity: %@}
Error creating proxy for activity monitor client {self: %p, activity: %@}
Removing activity monitor client {self: %p, activity: %@}
Checking if listening for activity monitor activity {self: %p, activity: %@, isListening: %@}
Setting should listen for activity monitor activity {self: %p, activity: %@, shouldListen: %@}
Activity monitor is currently disabled by the server.
Subscribing for activity monitor session {self: %p, activity: %@, info: %@}
Unsubscribing for activity monitor session {self: %p, activity: %@, subActivity: %@}
Server provided a minimum value for activity monitor which was %ld
%s received nil pairedDevice
Paired device public key A %@
Paired device public key C %@
Paired device public key D %@
Reloading keychain information: %@
** We haven't loaded anything, ignoring save to keychain **
** Saving registration data to keychain: Begin **
  => Adding registration for service: %@  ID: %@  to keychain dictionary
     => Registration %@
    => Dictionary has %lu key-value pairs
    => Not saving, got a nil dictionary representation
Final keychain data array count: %lu
  => Adding %lu auth certs for users %@
  => We don't have any auth certs to save
  => Adding %lu SMS signatures
  => We don't have any SMS signatures to save
  => Adding %lu temp phone credentials
  => We don't have any temp phone credentials to save
Unable to build property list data: %@
Saving %d bytes under service: %@   account: %@   accessGroup: %@   saveIdentifier: %d
Unable to save registrations to keychain (error: %d)
** Saving registration data to keychain: Done **
Forcing save of registration objects from keychain dictionary, %d entries  %d auth certs
Flushing registration objects from keychain dictionary, %d entries  %d auth certs
Loaded %d auth certs for users %@
Loaded %d sms signatures
Loaded %d temp phone credentials
Reloading registration objects from keychain dictionary, %d entries
Expected to load %d registration objects, but only loaded %d
Attempting to load V%d keychain blob from service: %@   account: %@   accessGroup: %@
  => Found V%d keychain blob
  => No blob found in keychain
  => Failed to get keychain blob (error: %d)
Unable to parse property list: %@
Removing invalid keychain data (V%d) for service: %@   account: %@
  => Unable to remove invalid keychain blob (error: %d)
Keychain dictionary V%d needs upgrade
Removing old V%d keychain blob after upgrade with service: %@   account: %@
  => Unable to remove keychain blob (error: %d)
Looking up registration with service type: %@  registration type: %@   value: %@
 => Removing first keychain entry, we're over max of %d entries
Removing registration : %@
  => No matching registration found to remove
Removing all registrations
Invalid keychain dict version (%d) -- current is %d
Updating keychain dict to current version (%d)
Keychain dictionary before upgrade : %@
  => Updating from V0 to V1
  => Updating from V1 to V2
Keychain dictionary after upgrade : %@
Unable to upgrade an empty keychain data from V0 to V1
Unable to upgrade an empty keychain data from V1 to V2
Setting IDS auth cert: %p   for ID: %@
Returning SMS sig for ID: %@   signature: %@
Returning SMS IDs: %@
Setting SMS main ID: %@   signature: %@
Returning temp phone credential for ID: %@ cert: %@
Returning temp phone credential for ID: %@ tempCredential: %@
Posting iMessage allowed value from IDSDaemonCapabilities { allowiMessage: %@, allowFaceTimeAudio: %@, allowFaceTimeMultiway: %@, supportedServicesFlags: %llu }
IDSDaemonCapabilities received bundle info did change callback -- updating capabilities
Processed getDependent queue
IDS registration center notified that Engram key store did update identities; notifying listeners
======= Registration State =======
     Last sent message: %@
       Last registered: %@
     Message in Flight: %@
       Messages queued: %@
          Queued Auths: %@
            Queued Reg: %@
         Current Auths: %@
           Current Reg: %@
  Recent Registrations: %d
==================================
*** Sending message: %@
 *** Too many registrations this last while, we need to come back to try later  (%d of %d)
Kicking dequeue of pending requests
 ** Not sending, we have current authentications in flight, %@
 Sending pending authentication: %@
 No pending authentication
 ** Not sending, we have current registrations in flight, %@
 Sending pending registration: %@
 Removing pending registration, can't register: %@
 No pending registration
 Sending pending deregistration...
We have current authentications or registrations -- canceling pending Absinthe cleanup operations
We have no current authentications or registrations -- enqueueing Absinthe cleanup operation
ids/authenticate/fail
!setGroupState(%llu) main-id=%@
!setGroupState(%llu) service-id=%@
!setGroupState(%llu) successful=%@
!addGroup(%llu) authenticate
ids/authenticate/success
ids/registration/fail
!addGroup(%llu) register
ids/registration/success
IDS registration success
All IDS registrations success
Not reflecting back email query failure, registration is disabled: %@
Not reflecting back email query success, registration is disabled: %@
Registration identities updated; notifying listeners
 => Has registration in queue: %@
Registration center process registration message
Final Active registrations: %@  (For: %@)
Message class: %@  delivered with error: %@  code: %d result: %@   ID: %@
Overriding response code registration message! {overrideResultCode: %ld}
Overriding response alert on specified services! {phoneOverrideService: %@, emailOverrideService: %@}
  Message delivery failed with code: %d
  Message delivery failed with result code: %d  error: %@
Received registration response for: %@   HBI: %@  services: %@
Processing registration response for service { service: %@, status: %@, serverErrorDetail: %{public}@ }
Processing registration response for user { user: %@, service: %@, status: %@, serverErrorDetail: %{public}@ }
No value in response, we're using HBI: %f
Success, next registration date is: %@
Success, Using fallback registration date
*** Matched registration user ID: %@ for user ID: %@
 Result status: %@
 Success!
 *** Server rejected registration { candidateRegistration: %@ }
 *** Server rejected registration permanently { candidateRegistration: %@ }
 *** Need new credentials { candidateRegistration: %@ }
 *** Unhandled status code: %@
 => We have a cert, treating as success
 => We have no cert, treating as failure
Received per-URI status dictionary in register response { service: %@, binding: %@ }
Invalid status returned for a URI in register response -- dropping { service: %@, URI: %@, status: %@ }
KT data returned in register response { service: %@, URI: %@, KTAccountID: %@, KTStatus: %@, KTBlob: %@ }
Received no KTAccount key.
Registration not disabled, saving. { candidateRegistration : %@ }
Registration disabled, not saving. { candidateRegistration : %@ }
Extracted IDs from bindings
Setting number: %@  on registration: %@
Number is empty, not adjusting
 => Adding self handle
 => Adding sentinel, registration doesn't have a self-handle yet
 => Adding sentinel binding
 => Registration is allowed to continue with empty identities
 => ***** No registered identities, failing registration: %@ ******
Success, registered URIs are: %@
KT enrolled URIs are: %@
 Notifying for success of: %@
Registration SUCCESS for %@ on %@
***** Notifying, empty URI response: %@ *****
 ***** Notifying for failure (code: %@:%d) of: %@
 *** We have %d unhandled registrations leftover from this: %@
 All registrations were handled, we're good to go
 *** Absinthe Error from Server ***
 Retries so far: %d  trying again
 Maximum absinthe retries reached, failing registration %@
Server rejected registration permanently; failing all candidate registrations
Server rejected registration; failing all candidate registrations
Bad signature, will refresh credentials for all registrations
Failed constructing validation data
Registration attempt failed with no status code
Registration attempt failed with status code: %d   error: %@   result: %@
Communicating with registration server failed
Registration center send registration message
This is a deregister, and we have no pending deregistration, bailing
Waiting for setup/first unlock to complete before sending registration message -- deferring registration
Push handler returned push token: %@, deferring (%@)
*** We have current (de)registrations, deferring (%@)
*** Lockdown state is expired, not sending %@
*** We have an ongoing authentication, deferring register
Constructing client data objects
Done constructing client data objects {serviceTypes: %@}
   *** Removing registration (from active) from queued/current, it is not possible to register: %@
   *** Removing registration (from queued) from queued/current, it is not possible to register: %@
   => Skipping, we have no auth user ID or cert: %@
environment: %@    token: %@
     already existing phone: %@         already existing appleID: %@   isInDualSIMMode: %@
********* Not adding user dictionary, we already had another phone based registration: %@  (registrations: %@)
Trying to register account without corresponding SIM -- failing {userUniqueIdentifier: %@}
********* Not adding user dictionary, we already had another apple ID based registration: %@  (registrations: %@)
   Adding user dictionary: %@  for service: %@
   ** Not adding user dictionary, already had one: %@  (%@)
   => Adding auth user ID: %@    cert: %@
   Failing registration for user dictionary: %@,  service: %@
   Skipping user dictionary: %@, no URIs   for service: %@
   Services: %@ for register: %@
****** Received registration response: %@
Registering service %@ timestampGUID: %@
Queued %@ for validation (%@)
Sending %@   (ID: %@ Environment: %@)
Not sending %@ we didn't have any authenticated registrations
Registration failed getting client data -- error %@ registration %@
Sending deregistration now...
*** Lockdown state is expired, not sending de-registration
Deferring deregistration for %@
Registration center send hard deregister
Sending hard deregistration now...
Message class: %@  delivered with error: %@  code: %d result: %@
Overriding response code for registration with: %d   remove %@: %@    to stop this
 *** Unauthenticated, need new auth token { auth info: %@ } ***
 *** Unauthenticated, need new auth token { message: %@ }
 *** Server rejected authentication request ***
      User ID: %@
     AuthInfo: %@
Setting auth cert for user ID: %@
Found existing registrations to authenticate: %@
     Authing user with cert {rpi: %@, user: %@, cert: %@}
     Authing user with sig {tag: %@, rpi: %@, user: %@, sigData: %@}
     User lacking cert or credential: %@
Setting auth certs {userID: %@, responseCode: %lld, matchingUser: %@}
Credential for temporary registration is not temporary realm {registration: %@, credential: %@}
Home Number response parsed { success: %lu, cert %@, expiration %@ }
IDS authenticating registration info: %@
    Push handler returned push token: %@
      Service: %@
        Realm: %@
  Environment: %@
Registration center send authenticate registration
*** We have current IDS Authentications, deferring (%@)
*** Lockdown state is expired, not sending IDS Authentication
Queued %@ for validation
Not sending nil IDS Authentication request: %@
Sending IDS Authentication request: %@   (Environment: %@)
Sending report spam message
Sent report spam message (responseMessage: %@) (error: %@) (resultCode: %d) (resultDictionary: %@)
Sending report iMessage unknown sender message
Sent report iMessage unknown sender message (responseMessage: %@) (error: %@) (resultCode: %d) (resultDictionary: %@)
Sending report approved temp handle message
Sent report approved temp handle message (responseMessage: %@) (error: %@) (resultCode: %d) (resultDictionary: %@)
Registration center process handles message
  Received handles query response with result: %d   handles: %@   selfHandle: %@   (actual: %@)   (error: %@)
  Updating %@ with getHandles info
Failing registration, empty get handles response { queuedRegistration : %@ }
Requesting new authentication for registration: %@
Requesting re-registration for registration: %@
Registration center query handles
  => Ignoring query, we have no registration, %@
Added registration %p to getHandles
Adding completion block %p to getHandles queue
Processed getHandles queue
Sending email query for: %@
Provisioning pseudonym {URI: %@, registration: %@}
Too many provisions inflight for this feature -- failing {similiarCount: %d, maxAllowedInFlight: %d, featureID: %@}
Renewing pseudonym {pseudonym: %@, registration: %@}
Revoking pseudonym {pseudonym: %@, registration: %@}
Local time on device and server time are out of sync. Using server time for pseudonym expiry. Local Time: %f, Server Time: %f
Performing pseudonym operation {op: %lu, URI: %@, pseudonymProperties: %@, requestProperties: %@, registration: %@}
  => Ignoring provision, we have no auth cert
  => Ignoring provision, we have no registration, %@
Processed pseudonym message {resultCode: %d, resultDictionary: %@, error: %@}
Updating KT Opt-in status for registration {isOptedIn: %@, registration: %@}
Performing Key Transparency opt-in status update {optInStatus: %@, registration: %@}
  => Ignoring KT Opt In status update, we have no auth cert
  => Ignoring KT Opt In status update, we have no registration, %@
Processed KT opt-in status update message {resultCode: %d, resultDictionary: %@, error: %@}
Requesting validated emails for: %@
  => Ignoring query, we have no auth cert
Sending authenticate registration now...
Registration center authenticate registration
Not sending IDS authentication, we have no main ID for registration: %@
Not sending IDS authentication, we have no profile ID for registration: %@
Not sending IDS authentication, we have no auth token for registration: %@
*** Cannot authenticate, missing SMS signature
Not IDS authenticating, we have no authentication token for: %@
Adding IDS authentication to the queue: %@
 => Really adding
 => Removing old registration info object: %@
 => Simply adding registration info object: %@
Sending registrations now...
Registration center send registration
Not registering, we have no cert for: %@
Not registering, not able to register: %@
Sending registration for %@
Updating registration to the queue (replacing existing): %@
Adding registration to the queue: %@
Registration center send deregistration
Adding deregistration to the queue: %@
Cancelling current registration
Removing current registration: %@
Cancelling queued registration: %@
Removing current registration
Removing current authentication
Cancelling queued authentications
Cancelling queued registration
Token changed, _dequeuePendingRequestsIfNecessary
  * Forcing a reset on the registration count, enough time has passed   %d -> 0
Noting another registration in the last %d minutes, we're now at %d registrations  (Max: %d)
Restarting number of registrations at %d (Max: %d)
No PAC found for user : %@, stopping sim deactivation request
Received invalid message class response { responseMessage: %@ }
SIM deactivation request succeeded with code: %d
SIM deactivation request failed with code: %d
FTResponseActionDoNotRetry: Something is wrong with the request or the request can never succeed.
FTResponseActionRetryWithDelay: The server cannot process the request at this time. Retry after the specified delay.
FTResponseActionRetryWithCorrectedTime: The client's clock is too far off from the server clock.
FTResponseActionRefreshCredentials: Authentication has failed.
FTResponseActionAuthenticationFailed: Authentication has failed.
FTResponseActionPermanentFailure: Something is wrong with the request or the request can never succeed.
Suppressing registration server alert due to presence of internal default
added mapping device ID [%@] to destination [%@]
============= New LinkManager %@ starting =============
Both FixedInterface [%@] and FixedInterfaceDestination [%@] are set. Setting up UDPLink only.
============= Dealloc LinkManager %@ =============
cannot open reporting FIFO file %s, errno=%d
opened FIFO file %s for writing
closed FIFO file %s
%d-%02d-%02d %02d:%02d:%02d.%06d %s  LocalDelivery %s
Sync priority messages queued: %@
Default priority messages queued: %@
Urgent priority messages queued: %@
Urgent Cloud priority messages queued: %@
Messages being sent: %@
Incoming messages not claimed yet:
%3llu msgs
Total
%3llu msgs
None
_startReporter cannot locate temporary directory
_startReporter cannot open %s
removing old fifo file %s
_suspendBTLink %@ -> %@
Not processing _connectivityChangedForDefaultDevice in the IPsecLink path.
_connectivityChangedForDefaultDevice: local(%@ -> %@), cloud(%@ -> %@).
_connectivityChangedForDefaultDevice sending UTunController didConnectForDevice (default)
_connectivityChangedForDefaultDevice sending UTunController didDisconnectForDevice (default)
_connectivityChangedForDefaultDevice NOT(delay) sending legacyUTunBTLinkManagerDefaultPeerConnectivityChanged: %@
_connectivityChangedForDefaultDevice sending legacyUTunBTLinkManagerDefaultPeerConnectivityChanged: %@
_connectivityChangedForDefaultDevice sending legacyUTunBTLinkManagerDefaultPeerCloudConnectivityChanged: %@
_nearbyChangedForDefaultDevice: %@ -> %@
Ignore LMCommandUDPLinkAddress/Reply due to disabled range extension via defaults.
received remote UDPLink %@interface address %@%@ through %@
received remote UDPLink interface address doesn't match to the source of the packet - ignoring
received invalid interface address bytes(%ld) = %@
received remote UDPLink interface down %@through %@
will NOT bring up WiFi when losing BTLink
will bring up WiFi when losing BTLink
Remote device reported data corruption
unknown LMCommand %lu received
UDPLink invalidated - stop retransmitting local interface address
already received remote interface address - stop retransmitting local interface address
didn't receive remote interface address for last %.0fs - giving up!
setDestinationAddress nil for %@.
retransmission already scheduled with %.1fs - resetting it to 1s next time
transmitting UDPLink %@interface address %@%@
cannot send LinkDown when BT is not used - bail out
transmitting UDPLink interface down%@
LinkManager requires BT, skip WiFi handshake.
_startUDPLinkHandshakeForDefaultDevice wantsWiFi %@ immediately %@ mayBringUpWiFi %@
_startUDPLinkHandshakeForDefaultDevice Central: wantsWiFi is YES but mayBringUpWiFi is NO - skip!
_startUDPLinkHandshakeForDefaultDevice !Central: wantsWiFi is YES but localWiFi has no IP - skip!
_startUDPLinkHandshakeForDefaultDevice ignoring stale scheduled handshake %@ %@ %.1f seconds ago
WiFi was brought up %.1f seconds ago but it was brought up again later - ignoring this one
WiFi was brought up %.1f seconds ago but still didn't get an IP - Bring it back down
_startUDPLinkHandshakeForDefaultDevice bring %@ WiFi, %@send handshake now
_startUDPLinkHandshakeForDefaultDevice bring %@ WiFi, %@send handshake in %.1f seconds
process link change for default paired device (oldLink:%@, newLink:%@).
Skip wifi handshake due to disabled range extension via defaults.
Link type changed from %lu to %lu, current link: %@
_setBestLinkToCurrent cbuuid %@ _deviceIDToCurrentLink %@ _cbuuidToLinks %@ oldlink %@ newlink %@
set current link from %@ to %@ for cbuuid %@ deviceUniqueID %@
sending UTunController didConnectForDevice %@
sending UTunController didDisconnectForDevice %@
created new UDPLink %@ state %s with %lu interfaces
created new UDPGlobalLink %@ state %s
created new GlobalLink %@ for session %@ (=> cbuuid), state %s.
removing %@ from links for device %@
_hasGlobalLinkConnectingOrConnected: _cbuuidToLinks: %@
%@ is still connecting or connected.
network interface listener started
network interface listener stopped
sending a packet over %@ (%zdB) = %s
dropping a packet (%zdB) over link type (%d), #dropped: %llu.
use %@ for cloud enabled packet.
use %@ for control message
dropped data for device %@
no current link for %@
No current link for %@ -- asking WiProx to connect.
startLocalSetup called
obliterateConnectionInfo called
reset preferInfraWiFi.
reset last sent default peer states (deviceNearby:%@, deviceConnectivity:%@, deviceCloudConnectivity:%@, peerConnectivity:%@).
reset phone call state.
addPairedDevice for the same UUID %@ - Ignoring
enableConnectionForDefaultPairedDevice YES for cbuuid %@.
connectPairedDevice for unknown UUID %@ - Ignoring
deletePairedDevice for %@
enableConnectionForDefaultPairedDevice NO for cbuuid %@.
deletePairedDevice for unknown UUID %@ - Ignoring
LinkManager requires BT, ignore preferInfraWiFi request.
preferInfraWiFi must not be initiated from this device
switching to preferInfraWiFi mode
preferInfraWiFi requested but no local IP available - ignoring
switching back to Magnet/InfraWiFi mode
LinkManager requires BT: %@.
LinkManager shouldStartBTLinkManager: %@.
No connected BTLE link for cbuuid %@ deviceUniqueID %@ -- asking WiProx to connect.
Already have BTLE link for cbuuid %@ deviceUniqueID %@
Asked to disconnect from cbuuid %@ deviceUniqueID %@
startUDPGlobalLinkForDevice %@
stopUDPGlobalLinkForDevice %@
Remove UDPGlobalLink for device %@
createConnectionDataForDevice - deviceID=%@, localPartyID=%@
No UDPGlobalLink is found.
processRemoteConnectionDataForDevice - %@
startConnectionForDevice - deviceID=%@ isInitiator=%@ remotePartyID=%@
startBTDatagramLinkForDeviceUniqueID - deviceID %@ cbuuid %@
stopBTDatagramLinkForDeviceUniqueID - deviceID %@ cbuuid %@
stopGlobalLinkForDevice %@ (=> cbuuid)
Remove %@ for session %@
IDSGlobalLink is brought down for %@.
Bring down WiFi (currentLinkType:%d).
Magent is connected, skip connecting GlobalLink for %@.
Receive allocate response for request %@, device %@. connectGlobalLinkForDevice with sessionInfo %@.
connectGlobalLinkForDevice: sessionInfo[kIDSQRAllocateKey_StreamInfoSubscribedStreams]:%@
Set alternateDelegate %@ for %@
disconnectGlobalLinkForDevice for  %@
allocate request %@ is pending for %@
handleAllocateRequestFailureForDevice - deviceID %@, requestID %@, erroCode %d
setAcceptedRelaySession - sessionID %@, relaySessionID %@.
%s - sessionID %@, hasPendingAllocation %@.
%s - sessionID %@, timeBase %@.
sendSKEData - sessionID %@, skeData %d Bytes.
sendSKEData - sessionID %@, there is no link for sendSKEData (links:%@)
sendKeyMaterialMessage - sessionID %@, groupID %@
sendKeyMaterialMessage - sessionID %@, there is no link (links:%@)
setDesiredMaterialsForSession - sessionID %@
setServerDesiredMaterialsForSession - sessionID %@, there is no link (links: %@)
requestMaterialsForParticipantIDs - sessionID %@
setDefaultUnderlyingLink - sessionID %@, linkID:%d.
setPacketNotificationFilter - sessionID %@, linkID:%d, enable:%@.
dropIPPackets - sessionID %@, linkID:%d, payloadArray:%@.
updateProtocolQualityOfService - sessionID %@, linkID:%d, isGood:%@.
stopKeepAlive - sessionID %@, linkIDs:%@.
WiFiAssist enabled: %@
currentCellularSignalStrength - sessionID %@.
startLinkProbing - sessionID %@, options: %@.
stopLinkProbing - sessionID %@, options: %@.
queryLinkProbingStatus - sessionID %@, options: %@.
flushLinkProbingStatus - sessionID %@, options: %@.
sendStatsRequest - sessionID %@, options: %@.
setRemoteDeviceVersion - sessionID %@, version: %u.
receiveJoinNotificationFromAParticipant - sessionID %@.
setUPlusOneModeForSessionID - sessionID %@, isUPlusOneEnabled: %@.
manageDesignatedDestinationsWithSessionID - sessionID %@, sessionStateCounter: %u, destinations: %@, withType: %u
removeParticipantIDsWithSessionID - sessionID %@, sessionStateCounter: %u, participantIDs: %@
get session info for group %@, session %@, options %@
update session participants for group %@, session %@
registerPluginForGroup could not find GlobalLink for session %@
updateSessionURIToParticipantIDs for group %@, session %@
createAliasForParticipantID could not find GlobalLink for session %@
participantIDForAlias could not find GlobalLink for session %@
updateParticipantType %u - sessionID %@
sendConnectedLinkInfoToAVCForSessionID %@
setClientUniquePID could not find GlobalLink for session %@
requestChildConnectionIDForLinkID could not find GlobalLink for session %@
setIsOnPhoneCall %@ for deviceID %@
%@ didConnectForDevice %@
%@ didDisconnectForDevice %@
default device is in preferInfraWiFi handshake, skip notifying BTLink hasSpaceAvailable.
didReceiveSKEData - alternateDelegate:%@, skeData:%d bytes.
didReceiveKeyMaterialMessage - alternateDelegate:%@ from %@ to %@
didReceiveMaterialInfo - alternateDelegate:%@ materialInfo:%@
Not processing didConnectOverCloud in the IPsecLink path.
didConnectOverCloud for %@.
didFailToConnectOverCloud for %@.
didDisconnectOverCloud for %@.
allocation request was delayed, retry...
didConnectUnderlyingLink - alternateDelegate:%@, linkID:%d, linkUUID:%@.
didReiceiveChildConnectionID - alternateDelegate:%@, childConnectionID:%@ linkID:%d
didDisconnectUnderlyingLinkID - alternateDelegate:%@, linkID:%d, linkUUID:%@, reason: %d
didDefaultUnderlyingLinkChangeSucceeded - alternateDelegate:%@, currentDefaultLinkID:%d.
didWiFiNWPathFlagsChanged - alternateDelegate:%@, nwPathFlags:%u.
didCellularNWPathFlagsChanged - alternateDelegate:%@, nwPathFlags:%u.
didRATChange - alternateDelegate:%@, newRAT:%s.
didCellularMTUChange - alternateDelegate:%@, cellular MTU:%u.
terminateCallDueToIdleClientForLink - alternateDelegate:%@
receive session-info for group %@, session %@, status: %u.
didReceiveReportEvent - alternateDelegate:%@, eventDictionary:%@
%@ reported power state change: %@
%@ reported paired device change.
enableConnectionForDefaultPairedDevice NO for currently paired device.
_handleNetworkChanges %@ = %@
_handleNetworkChanges _localWiFiAddressUsedForDefaultDevice = %@
receive WiFi IP address, start QR allocation.
LinkType %lu, RATType %lu for non-FaceTime clients
current link type for %@ is %d.
WRM recommends the link type %u, but IDS ignores WRM recommendations per rdar://problem/33602915 discussion
cellular RAT changed, usable: %@.
celluar data is usable, retry QR allocation for %@.
cellular SoMask changed: %u.
Registering for events {eventID: %@, options: %@}
Incoming Rapport message
Rapport connection invalidated
Rapport connection interrupted
Failed to activate companionLinkClient, {Error:%@}
Activated companionLinkClient {self: %@}
Updated local device {device: %@, publicIdentifier: %@}
Start companionLinkClient setup
Dealloc'ing IDSRapportClient
outgoing IDS Message {deviceIentifier: %@, event: %@}
Failed to find companionLinkClient {error: %{public}@, deviceIdentifier: %{private}@}
Found companionLinkClient {deviceIdentifier: %{private}@, client: %{private}@}
Finished sending message {deviceIdentifier: %@, error: %@}
Discovered device %@
Lost device %@
incoming IDS Message {event: %@, options: %@}
Dropping event because it's missing senderID {options: %{private}@, event: %{private}@}
Dropping event because _RPOptionSenderID is undefined {options: %{private}@, event: %{private}@}
Error fetching stored gossip recipients { error: %@ }
Error unarchiving stored gossip recipients { error: %@ }
Error archiving stored gossip recipients { error: %@ }
Error storing gossip recipients { error: %@ }
Initing UTunConnection %@ %p
shouldUseNWFramingOverIPsecString: %@
Deallocing UTunConnection %@ %p
Insufficient space for {dataProtectionClass: %@}, {pendingOutgoingBytes:%lu}, {maxQueueSize:%lu}, {inflightMessageCount:%lu}
%@ changing cbuuid from %@ to %@
%@ ignoring cbuuid update from %@ to %@
%@ enabled state changed: %@ -> %@
Removing continuity message %@
%@ Peer awake state changed to YES with %lu pending messages (%lu sending). Kicking queue to service non-waking messages.
%p: %s
OTR is disabled on magnet connection, enable stream encryption.
Found pending or locked continuity peer %@, disable connection for %@.
%@ _startConnection
IDS internally calling UTUN's openSocketWithOptions
%@ IDS internal openSocketWithOptions call returned socket %d, error %@
%@ created %@ for socket %d - sending handshake with version %u
%@ resending %lu pending socketpair messages
%@ Failed to open UTun socket, waiting...
UTunConnection receives remote controlChannelVersion %@ instance ID [%s] flags %016llX, use shared OTR session %@, use named OTR session token %@, resume resource transfers %@, new service supported %@, dynamic services %@ service minimum compatibility version %u
%@ openSocket returned with connection to old instance - stop and reconnect
UTUNConnection sendMessage
%@ enqueuing%@ message %@ messageCount %lu - QoS=0x%x
Message with topic %@ has queueOneIdentifier %@, flushing older messages that match.
Attempting to send nonCloudWaking message on non-magnet connection. Coallescing {guid: %@}
%@ socket buffer is empty, dequeuing a message.  didWakeHint(%d)
%@ Waiting for remote device wake before dequeuing message.
Cancelling messages %@
Clearing fallback stickiness due to: %@
Server Bag provided us with a fallback timeout of %f
   **** cloud fallback disabled ****
%@ performing cloud fallback for message[%u] %@ which is scheduled to expire %@
%@ - messages in queue in need of fallback, setting timer for: %f
%@ fallback timer fired, fallback queue: %lu
Exception caught handling fallback timer: %@
%@ - messages in queue, setting timer for: %f
%@ - no messages in queue, clearing timer
%@ timeout timer fired, sending queue: %lu %lu
Exception caught handling timeout timer: %@
%@ sending resource transfer cancel message %@
Message %@ %@ %@ removed, total message count %d - %@
Message on service %@ not allowed! Attempted to send on traffic classes: %@ Permitted traffic classes: %@
Overriding previous decision on message for topic %@ due to feature flag that allows messages will empty traffic classes
Server Bag {%@:%d}
%@ Assert QuickRelay after %d ms
%@ utun socket pair connection inFlightMessageCount %lu (max %u) - do not dequeue
%@ _dequeueMessage - %@ messageCount %lu
**** Local IDS connectivity is disabled, only using cloud ****
UTunConnection _isCloudEnabled:%@ (%@, messageCount:%d)
%@ is not available, waiting.
Message with guid %@ not allowed due to its traffic class
%@ created sending power assertion %@
Translated message %@ with servicename %@ to streamID %u
Piggybacking message %@ with servicename %@ with incoming streamID %u created %@ (old id %u)
Remote instance changed while receiving message %@ with topic %@ - continue and dispatch reconnect
Non BT usage is not allowed, failing message
%@ resource transfer sender %@
%@ cannot read message to deliver for resource transfer %@
* Dequeuing for Sending %{public}@ priority local message payload of data size: %lu/%lu   for topic: %{public}@:%{public}@  guid: %{public}@  messageID: %d
Message %@ added to queue, total message count %d, sendingTopics count %d
Send duplicate message %@
Clearing power assertion: %@
* Sending message with sequence number %u
%@ Sending message[%lu] %@ %@.
%s: statsDictionary is nil for direction %d
%s: priority %d updated direction %d stats %@
Starting messageDequeueTimer
Request to start messageDequeueTimer ignored -- timer already running
Dequeue Message Timer did Fire -- Dequeueing messages
Requeued %lu sending messages for %@.
OTR negotiation timed out for %@ but remote device doesn't support shared session.
OTR negotiation timed out for %@, retry.
OTR negotiation timed out for %@, clear error state and requeue all messages.
%@ OTR for UTunConnection %p, priority %ld
UTunConnection - No class storage key specified in notification %@
Class %@ storage keys are available, processing %lu pending messages
Encrypted message for token %@  original size: %lu  encrypted size: %lu  elapsed: %.6f
Failed to encrypt UTunConnection message! Error %ld
Send OTR message for %{public}@ E:%u SN:%u.
_sendOTREncryptionQueue: invalid OTR token %@
Encrypted message for device unique ID %@  original size: %lu  encrypted size: %lu
Send public key encrypted message.
Send OTR message for %{public}@ E:0.
Waiting OTR session for %04x(%@) ...
OTR session negotiation for %@ is in progress
Session key store is not available for class C, but %@ message (%u) is already stored.
Session key store is not available for class C, holding on to %@ message (%u)
Current pending messages %@
Session key store is not available for class A, but %@ message (%u) is already stored.
Session key store is not available for class A, holding on to %@ message (%u)
Clear OTR error map for %@.
Set OTR error map for %@.
OTR session for %@ is in error state, skip negotiation.
_handleOTRDecryptionError: invalid OTR token %@
Attempt to decrypt invalid message type %u.
*** Recv old OTREncryptedMessage but remote device asserts useSharedOTRSession message %@
*** Recv OTR message with unknown topic, command:%d, sequenceNumber:%u, streamID:%04x, version:%u, priority:%d
Recv OTR message for %{public}@ E:%u SN:%u.
Stored class C OTR message for %@, sequneceNumber:%u.
Decrypted message for %@  original size: %lu  unencrypted size: %lu  elapsed: %.6f
*** OTR session for %@ is not ready.
Stored class A OTR message for %@ sequenceNumber:%u, ignore decryption failure.
Decrypted message for device unique ID %@  original size: %lu  unencrypted size: %lu
Decrypted continuity message, lock peer %@ for btUUID %@.
Failed to decrypt UTunConnection message! Error %ld
Flush all messages for peer %@
Broadcast: Sending ack %@ for received sequence number %d
Sending Expired ack %@ for received sequence number %d
Received UUID list adding message UUID %@, purging old UUIDs %@
Received UUID list adding message UUID %@
IDSSocketPairCommandResourceTransferMessage requires a messageUUID
IDSSocketPairCommandResourceTransferMessage should be IDSSocketPairResourceTransferMessage
IDSSocketPairCommandResourceTransferMessage received %@ @ incorrect offset %llu (should be @%llu)
IDSSocketPairCommandResourceTransferMessage cannot find receiver for message %@ - asking sender to reset
Duplicate file transfer setup detected {duplicateUUID: %@}
IDSSocketPairCommandResourceTransferMessage already receiving message %@ @%llu
Aborting resource transfer receiver for %@ after %lf seconds
IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@ (reason %d)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (was sending %llu)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (ignoring nonmatching message %@)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (sender not found)
Got cancel message for incoming file %@ cancelReason %u
Got cancel message for %@ cancelReason %u
Got cancel message for outgoing file %@ cancelReason %u
IDSSocketPairCommandResourceTransferMessage got cancel message for %@ cancelReason %u, but no sender or receiver found
IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@
IDSSocketPairCommandResourceTransferMessage received and completed
IDSSocketPairCommandResourceTransferMessage received - waiting for more
%@ received a message that we cannot accept without encryption! %@
Got incoming data message {dataMessage: %@, rawMessage: %@, command %d, self: %@, didDecrypt: %@}
Received message has messageUUID %{public}@ peerResponseID %@ expectsPeerResponse? %@ wantsAppAck %@ remoteExpiryDate: %@
Received a message that has passed its expiry date, sending back an expired ack MessageUUID: %@
%@ [%@] received a %d message when it was expecting a handshake!
Incompatible IDS version number!
Incompatible IDS version number - please make sure your build versions match!
Incoming message %@ servicename %@ streamID-found %u newly-created %@ (serviceMapMessage %@)
Cannot create mapping while receiving message %@ with topic %@ - continuing
UTunConnection Error: missing expected message topic!! (no optimization) streamID %u  (topicForStreamID %@)
Remote instance changed while receiving message %@ - drop and reconnect
UTunConnection Error: missing expected message topic!! (supports optimization) streamID %u  (topicForStreamID %@)
*************** SERVICEMAP ERROR: FAILED TO GET TOPIC FOR streamID %u ****************
Incoming message %@ servicename-found %@ streamID %u sequenceNumber %u
Incoming message %@ servicename-found %@ streamID %u
Broadcast: incoming message sequence number %u 
* Receiving local message payload of size: %d for streamID: %d  messageSequenceNumber %d  compressed %@
Broadcast: incoming protobuf sequence number %u 
* Receiving local protobuf %@ for streamID %d  compressed %@
Decompressed local protobuf message data from: %lu  to: %lu
LocalDelivery: IDSSocketPairCommandProtobufMessage received incompatible data message of type %@
* Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
  => Message id %d ACK'd RTT: %f  [instantaneous %f]  time sent: %f
Removing ack'd message[%u] with sequenceNumber %u (index=%lu), message %@ remaining count %lu
  => Message id %d ACK'd but it already timed out...
%@ [%@] received handshake with version %u. We require %u. Needs handshake? %@
Broadcast: incoming app ack sequence number %u 
SocketPairConnection should have consumed this and never pass it up
GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY %@
* GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
GOT SOCKET PAIR COMMAND MESSAGE INCOMING NICE PROXY %@
* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE INCOMMING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
GOT SOCKET PAIR COMMAND INCOMMING IMESSAGE COMMAND %@
* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE iMessage Command Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
DECOMPRESSED IMESSAGE DECRYPTED DATA NOT NIL: %@
Passing %@ Down to UTUN
Got ServiceMapMessage reason %u serviceName %@ streamID %u
Popping dialog to alert the user of the IDS version mismatch
%@ informed that utun socket pair connection %@ has closed...
%@ informed that IDSNWSocketPairConnection has closed.
%@ connectionBecameEmpty %@
%@ connectionDidReachInFlightMessageLowWaterMark %@
%@ connectionDidReceiveBytes %@
Calling IDSOTRController:startOTRNegotiationWithDeviceIfNeeded to force session negotiation.
_otrTokenToArray: invalid OTR token %@
Registration is not supported on this device
Scheduling heartbeat in %f seconds
Given a nil CTPNR! { self: %@, CTPNR: %@ }
Phone Number Validation registration agent has sent %d SMSs
Lockdown state: %@
1. Setting SMS status to: IDSSMSIdentificationStatusIdle
Phone Number Validation agent dealloc
Determined whether user subscription selection is still pending { isDualSIM: %@, hasSelectedPhoneNumber: %@, didReceiveSIMSetupCompleteNotification: %@ }
SMS registration center notify failure
2. Setting SMS status to: IDSSMSIdentificationStatusIdle
SMS registration center notify success
3. Setting SMS status to: IDSSMSIdentificationStatusIdle
Device is currently locked down, we're not able to proceed (State: %@)
SIM is not ready to proceed with registration
 SIM State says cannot register, registration State
Lockdown changed
     ==> We're activated, let's go, waiting...
Registering %@ for lockdown changes
Device ID Changed
     ==> We're in a good SIM State, checking heartbeat, waiting...
Received PNRReadyStateNotification { state: %@
CT phone number registration request sent { success: %@, timeout: %@, pushTokenHexEncoding: %@ }
Successfully sent registration request
Failed to send registration request
CT phone number registration response received { data: %@ }
Handling incoming phone number registration response { phoneNumber: %@, signature: %@ }
Received failed status in phone number registration response { status: %@ }
Checking to see if we restored from backup: %@
     ==> Restored from backup, and we need to re-register here, waiting...
     ==> System backup complete, waiting...
     ==> System restore state changed, waiting...
     ==> SIM setup did complete -- kicking heartbeat
     ==> Keychain migration complete, waiting...
Phone Number Validation Request Delivery clear timer fired
We're idle, bailing
Overriding Phone Number Validation Request timeout for registration with: %f   remove %@: %@    to stop this
Attempting to send SMS verification { mechanism: %@ }
Still waiting on timeout to clear for next Phone Number Validation request to be delivered, waiting
4. Setting SMS status to: IDSSMSIdentificationStatusWaitingToBeginSMSIdentityVerification
     ==> We have no push token, bailing, waiting...
6. Setting SMS status to: IDSSMSIdentificationStatusWaitingSMSIdentityVerificationDelivery
We're currently iterating over Preflight mechanisms -- continuing { currentPreflightStack: %@ }
Sending Preflight message
Setting test data on preflight message { testData: %@ }
Setting IMSI and PLMN on preflight message { IMSI: %@, PLMN: %@ }
Received preflight response { error: %@, resultCode: %ld, resultDictionary: %@ }
Sending phone number verification { mechanisms: %@ }
Failed preflight -- failing phone number validation
Preflight unsuccessful -- cancelling scheduled heartbeat
_tryToSendSMSIdentification   state: %d
7. Setting SMS status to: IDSSMSIdentificationStatusWaitingToBeginSMSIdentityVerification
Checking if user has disabled SMS Registration
Phone Number Validation has been disabled by the user
Required user selection has not yet been set and system setup is in progress -- deferring SMS identification
     ==> We're not in the right state to being Phone Number Validation request identification, waiting...
     ==> Device can't register now, waiting...
     ==> SIM is not ready to register, waiting...
Need to request user permission for SMS, but system setup is in progress -- deferring SMS identification
Should notify about Phone Number Validation requests for this carrier
Obtained permission to send SMS from requestor -- kicking identification
Did not obtain permission to send SMS from requestor -- failing registration
Phone Number Validation Request Notification request is up
     ==> Can't send Phone Number Validation requests right now, need to wait for timeout, waiting...
Already completed max number of Preflights; deactivating service { maxPreflights: %d }
Haven't completed max number of Preflights yet { preflights: %d, maxPreflights: %d }
Already sent max number of SMS; deactivating service { maxSMSSends: %d }
Haven't sent max number of SMS yet { sends: %d, maxSMSSends: %d }
8. Setting SMS status to: IDSSMSIdentificationStatusWaitingSMSIdentityVerificationDelivery
Preflight disabled; sending legacy phone number verification
Preflight short-circuiting; sending phone number verification with overrides
Beginning preflight
No requestors are present for delegation of SMS permission
SMS registration handle SMS delivery failed
Registration request failed delivery { preflights: %d, sends: %d, attemptsWithoutSend: %d }
No requestors -- we must have been cancelled
Retrying this validation { attemptsWithoutSuccessfulSend: %d, maxRetries: %d }
9. Setting SMS status to: IDSSMSIdentificationStatusWaitingToBeginSMSIdentityVerification
Not retrying this validation { attemptsWithoutSuccessfulSend: %d, maxRetries: %d, shouldBypassRetry: %@ }
Max retries consumed -- failing phone number validation
10. Setting SMS status to: IDSSMSIdentificationStatusIdle
SMS registration center handle SMS successfully delivered
Registration request successfully delivered
11. Setting SMS status to: IDSSMSIdentificationStatusWaitingSMSIdentityVerificationResponse
Using telephony-provided timeout { telephonyTimeout: %@ }
Setting timeout for Phone Number Validation Request { timeoutInSeconds: %f, minimumReasonableTimeout: %f, defaultTimeout: %f, telephonyTimeout: %@ }
SMS registration center handle incoming SMS
Received registration request response SMS
Phone number: %@     Class: %@
Signature: %@        Class: %@
Discarding registration request response, because we are not in the correct state to accept it
Invalid number provided: %@   Class: %@
Invalid signature provided: %@   Class: %@
12. Setting SMS status to: IDSSMSIdentificationStatusIdle
Resetting Phone Number Validation Attempt counter from %d to 0
Resetting Phone Number Preflight attempts to 0 { _numberOfPreflights : %d }
SMS registration center timed out waiting for SMS
Timed out waiting for Phone Number Validation response
Sending another
Adding phone number valiation requestor { requestor: %@, requestors: %@ }
Removing phone number valiation requestor { requestor: %@, requestors: %@ }
13. Setting SMS status to: IDSSMSIdentificationStatusIdle
Heartbeat
    State: Idle
    State: Waiting to begin Phone Number Validation request identity verification
    State: Waiting for Phone Number Validation request identity delivery
    State: Waiting for Phone Number Validation request identity response
    State: Unknown: %d
     ==> We're idle, ending this heartbeat madness now
     ==> Waiting for identity response, waiting...
     ==> Registration is not supported, skipping heartbeat
     ==> Waiting to begin SMS, starting now
Not getting dependent registrations, we don't have a registration
Not getting dependent registrations, we're not authenticated for: %@
*** Lockdown state is expired, not sending dependent registration check
Adding registration %p to getDependent queue
Adding completion block %p to getDependent queue
Requesting dependent device info for registration: %@
  Received get dependent registration response with result: %d  error: %@
 response for message: %@
   response idsUserID: %@
No GUID for registration %@, when processing getDependentRegistration response
Sending get dependent registration request: %@  (Environment: %@)
We have an outstanding getDependentRegistrations request for userID: %@
Remove OTR timer %p for %@.
OTR timed out for %@, timer %p.
Set OTR timer %p for %@
  => will, send out OTR negotiation data %luB for %@, count:%08x.
_topicFromToken: invalid OTR token %@
_priorityFromToken: invalid OTR token %@
Finished creating MMLs { mmlGUID : %@ count : %ld service : %@ sendMode : %@ }
%@ - No account for service name %@ found to send a message, bailing...
sendAheadGroup { group %@, account %@, destination: %@ }
Send ahead message %@ got response code %lu error %@ lastCall %@
Group updated, sending ahead to members { topic : %@ }
Missing server messaging entitlement -- failing creation of IDSDXPCServerMessaging collaborator {connection: %@}
Invalid server messaging entitlement -- failing creation of IDSDXPCServerMessaging collaborator {connection: %@, serverMessagingEntitlementValue: %@, testToolEntitlementValue: %@}
Found a non-string server messaging entitlement value -- failing creation of IDSDXPCServerMessaging collaborator {connection: %@, serverMessagingEntitlementValue: %@}
Created XPCServerMessaging {self: %p, serverMessagingEntitlementValue: %@, connection: %@}
Not entitled for server messaging topic! {self: %p, topic: %@, _serverMessagingEntitlements: %@}
Adding server messaging client {self: %p, uuid: %@, topic: %@}
Error creating proxy for server messaging client {self: %p, uuid: %@, topic: %@}
Removing server messaging client {self: %p, uuid: %@, topic: %@}
Not entitled to send certified delivery receipt on topic { topic: %@ }
daemon requested sendMessageData { guid: %@, options: %@ }
Received invalid message class response in IDSServerMessaging { responseMessage: %@ }
Sent server message with { responseMessage: %@, messageError: %@, resultCode: %d, resultDictionary: %@ }
Sending server message { guid: %@, topic: %@, message: %@ } 
sendCertifiedDeliveryReceipt given nil certified delivery context
Sending certified delivery receipt to server { topic: %@, guid: %@, context: %@ }
Received incoming server message over push in IDSDXPCServerMessaging { guid: %@, topic: %@, fromID: %@ }
No certified delivery RTS found in server message payload with cdv { guid: %@, cdv: %ld }
Giving message to client { guid: %@, clientUUID: %@ }
No client found for guid { guid: %@, topic: %@ }
Sending pending offline message response to server in IDSServerMessaging { topic: %@ }
direct messaging capability not supported by peer
Invalid message size (%lu < %zu)
processing direct messaging info
direct messaging info: resolved version %u (l:%u r:%u)
direct messaging info: peer supports device connection
direct messaging info: peer supports concise ACKs
notifying clients with state: %llu
Received direct messaging connection for service: %@
No services when processing %@
Index when processing %@ : %lu
No objects when processing %@
No local objects when processing %@
No connection when processing %@
No entitlements when processing %@
No allowed services when processing %@
completing setup info for %@ : %@, idx %lu, broadcast %d
issuing connected socket to client %@
Device first unlocked
Device unlocked
Device locked
Saving OTR session key store
Saving OTR session class %@ store (Success: %@)
Device is under data protection lock, not loading class A session keys
Device is under first data protection lock, not loading class C session keys
Class A store is already loaded ignoring...
Class C store is already loaded ignoring...
Class D store is already loaded ignoring...
Loaded stored class %@ session store
Missing session key dictionary %@ or data protection string %@
Did not find class %@ store to load
%@ - Missing service in token, can't store session key
%@ - Missing service in token, can't retrieve session key
Found session key %p for topic %@
%@ - Missing service in token, can't remove session key
Found session key for token: %@
No session key for token: %@
Saving now
Storing session key for %@.
Removing session key for %@.
removeSessionKeyForAllTokenFromMainQueue
Cleaning up keychain
OTRStore: invalid OTR token %@
array_ref = %@
firstCommonName = %@
Completed ID query {uri: %@, fromURI: %@, error: %@}
Purging tokens forURI %@ fromURI %@ fromService %@
Bag disabled -- Not purging tokens forURI %@ fromURI %@ fromService %@
No updates, ignoring...
No fromURI, ignoring...
No fromService, ignoring...
Will add valid expiry
Caching ID query responses: %@   date: %f   from URI: %@   from Service: %@ addValidExpiry
Trying to cache Invalid for ourselves, ignoring...
 => Ignoring update to unknown, just updating the cache
Removing cached entries {service: %@}
 => From Service: %@
 => Bogus ID query for: %@   ignoring this
 => Not looking up... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
 => Forcing query for URI: %@
 => Not looking up... status is Valid
 => Not looking up, query not allowed... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
 => We can't look up, but can piggyback... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
 => Issuing ID query for URIs: %@   (Current status: %d  Last time: %f   Current time: %f  Difference: %f  Needed Difference: %f)
Completed ID query for URI %@ fromURI %@ (Error: %@)
Over %ld hour(s), resetting query per hour(s) count
New start query date %@
Device does not have a cert, attempting to proxy the query
Remote ID IDs Query V2 has completed with the following: %@  FromURI: %@ ReturnedService: %@ ReturnedSucesss: %@ ReturnedError: %@ 
Updating Cache  %@
Calling Completion Block  %@
Device does not have a cert {_allowProxyQueries: %@, URIsToQuery: %@}
We're at %@ queries for this hour
We have at least one valid result, returning cached results %@
We're at %@ queries for this hour, can't do more
Triggered auto bug capture for query rate limiting {session : %@, error: %@}
We didn't query anything, returning cached results %@
 => Bogus ID query for: %@   ignoring this request
 => From URI: %@
 *** Missing identity, failing query
 => Bogus ID for: %@   ignoring this
 => Expired status -- returning unknown {URI: %@, fromURI: %@, difference: %f, timeNeeded: %f}
Empty service or URI to send ID status changes
Sending id status changes %@ for service %@ URI %@ success %@ error %@
Empty uniqueID %@ for adding completion block
Empty completion block for uniqueID %@
Completion block for uniqueID %@ added %@
Empty uniqueID %@ for removing completion block
Removed completion block for uniqueID %@
**** Forcing deleting of peer cache ****
Forcing flush of peer cache
Forcing save of peer cache
Non-string key in cache (service) -- Removing
Non-dict value in cache (service) -- Removing
Corrupted entry in cache (missing dict). Removing entry
Corrupted entry in cache (status). Removing entry
Corrupted entry in cache (lookUpDate). Removing entry
Removing entry with unknown status {URI: %@, URIDict: %@}
Exception processing cache -- deleting {exception: %@}
Loaded cache: %d items
Finished wipe of legacy cache
Saving cache: %d items
  => Invalid URI, below our minimum length: %@
  => Invalid URI, empty: %@
  => Invalid URI, phone number, with no '+' character: %@
  => Invalid URI, email, with no '@' and '.' characters: %@
  => Invalid URI type: %d  URI: %@
DB version up to date
Updated DB to version 100
IDSServerDesiredKeyMaterialSet: GFTKeyWrapping not available
IDSServerDesiredKeyMaterialSet materialDataByID: could not encrypt the key material for participantID: %llu, remote pub key: %@, mki: %@
IDSServerDesiredKeyMaterialSet materialDataByID: encrypted the key material for participantID: %llu, remote pub key: %@, mki: %@
Handling request sysdiagnose push {userInfo: %@}
Exception caught in IDSRegistrationPushHandler {exception: %@, handler: %@, selector: %@}
Caught exception handling request sysdiagnose push {exception: %@}
Caught exception handling server triggered prompt push {exception: %@}
Handling register push {userInfo: %@}
Caught exception handling register push {exception: %@}
Handling reload bag push {userInfo: %@}
Caught exception handling reload bag push {exception: %@}
Handling handles updated push {userInfo: %@}
Caught exception handling handles updated push {exception: %@}
Handling devices updated push {userInfo: %@}
Caught exception handling devices updated push {exception: %@}
Handling flush cache push {userInfo: %@}
Told by server to flush entire query cache
Caught exception handling flush cache push {exception: %@}
IDSRegistrationPushHandler - Accepting incoming pushes
IDSRegistrationPushHandler - No longer accepting incoming pushes
Activating {xpcDaemon: %{public}@}
clientConnection missing pairing entitlement -- returning nil pairing collaborator {xpcDaemon: %{public}@}
clientConneciton has pairing entitlement -- returning pairing collaborator {xpcDaemon: %{public}@, collaborator: %{public}@}
Get pairingDeviceManager collaborator {xpcDaemon: %{public}@, collaborator: %{public}@
clientConnection missing local pairing entitlement -- returning nil reunion sync collaborator {xpcDaemon: %{public}@}
clientConnection has local pairing entitlement -- continue {xpcDaemon: %{public}@}
clientConnection missing test tool entitlement -- returning nil internal testing collaborator {xpcDaemon: %{public}@}
Warning: [[request IDSSessionID] length]: %lu != sizeof(uuid_t): %lu
QRAllocation destroyed
Invalid session. Skip AWD report
access token of allocation for QR session %@ expired (%f > %@). Discard it.
_purgeAllocation: Invalidate allocation
allocation timeout timer cancelled
allocation timed out
Sending server message QR metrics allocation timeout report for session %@ requestID: %@, ua: %@
failed to send server message allocation timeout QR metrics report: error: %@  code: %ld
Finished sending server message allocation timeout QR metrics report for session %@ delivery error %@
Dealloc IDSQuickRelayAllocator %@.
no groupID in %@
session token or address not available: %p %p
Session not found for %@
send keepalive for groupID: %@, sessionID: %@
failed to send keepalive request: error: %@  code: %ld
failed sending allocate request: %@ error: %@  code: %ld
_setupAllocation:fromURI:sessionID:isSessionIDRemoteDeviceID:options:prevConnectStatus:requestUUID:connectReadyHandler: called {sessionID: %@} options[kIDSQRAllocateKey_IsLightweightParticipant] = %@
translate deviceID: %@
shared session allocation, previous connect status: %p
setTestOptions: IDSGroupSessionForceQRSession
cached response previous connect status, reason/error/token/ip: %u %u %u %@
groupID not set for shared session allocation: %@
QuickRelayServerProvider switch has been deprecated
request allocation for a specific address %@
_setupAllocation: preferredRemoteInterface %@
_setupAllocation QuickRelayServerAddress test option: %@
_setupAllocation test options: IDSGroupSessionForceDegraded
_setupAllocation test options: IDSGroupSessionBlockUPlusOneSession
_setupAllocation test options: IDSGroupSessionAppleTestingKey
Send allocate request, recipient count: %u, requestID: %@, time: %.6f.
Stream information to cache, idsSessionID=%@, isJoinAllocation: %@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@
setupNewAllocationToDevice:options:connectReadyHandler: called {deviceID: %@}
setup allocation for %@ service to device %@
No response found for groupID: %@
_setResponseForQRGroupID:groupID: called {groupID: %@}
Current cached allocation response contains fromURI: %@
getAllocateResponse:groupID called {groupID: %@}
use hardcoded session token for group %@, session %@.
No session allocation time: %@ %@
No relay session ID: %p %p
Invalid relay session ID length: %u %u
Invalid relay session UUID: %@ %@
No response for relay sessionID %@
_mergeParticipantID2PushTokenMapping:sourceResponse:sourceResponse:mappingChange: called
No participant information in %@
No recipientID or push token in %@
merge new participant id %@
%u new participant-id to push token mappings added, %@
_notifyParticipantID2PushTokenMappingChange: called
_notifyURIToParticipantIDMappingChange: %@
No groupID in %@
No QR sessionID in %@
Duplicated responses for sessionID: %@, %@, %@
cached allocation response has issue: %@
use duplicated response
ignore duplicated response
failed to find IDSDSession object for %@
no IDSDSession ID in %@
Should switch from %@ to %@
message added to cache: %@
addConnectStatus, groupID: %@, relaySessionID: %@i, data: %u %u %u %@
No response for groupID: %@
Response is not for sessionID %@, response %@
Cached response modified for relay sessionID %@
response invalidation is supported on internal install only
no response for groupID %@
self allocation in cache: %@
_getSelfAllocationFromCache: allocation is nil {sessinID: %@}
_sendIDQueryRequest:fromIdentity:fromURI:fromService:completionBlock: called { fromService: %@, shouldForceQuery: %@, fromURI: %@, fromIdentity: %p, recipientIDs: %@ }
Current cached allocation response doesn't contain fromURI: %@
_setupNewAllocation: called {sessionID: %@}, isLightweightParticipant = %@, fromURI: %@
Unable to setup QR allocation for unregistered account for %@ service
missing sessionID to setup a QR allocation
No groupID for shared session %@
found cached allocation response for %@: %@, previous connect status %@
cached allocation response has issue: %@ %@
Expired time: %llu, current time: %llu
Response has expired or about to expire
found no cached allocation response for %@, isAllocateRequestForUnauthorizedUser: %@, shouldUseCachedResponse: %@
trying to change a read-only dictionary
look up peer with URI: %@, push token count: %u, prevent duplicates: %@,  tokens: %@
Skipping duplicate %@
could not look up recipient's push tokens, ID: %@, errors: %@ 
Missing expected default paired device's push token %@
use QR session info from user defaults: %@.
no push token for participantID %llu
no response for %@
no participant list in %@
no push token for participantID %@ in response %@
participantID to push token mapping: %@ %@
no push token for participantID %llu in response %@ for group: %@
participantID: %llu, pushToken: %@, group: %@
URI for participant ID %llu in group %@: %@
No URI for participant %@ in group %@
IDSSession ID %@ requested additional allocation for QR Session ID %@, allocateType %d, reason %d
could not find original allocate request to clone %@
No groupID for %@
Ignore self allocation for shared session
could not find original push token to clone for QR session %@
could not find existing recipient to clone
need to do ID query: allocateType: %d, destinations: %@, sessionID: %@, fromURI: %@
Received allocate response for RequestID: %@ IDSSessionID: %@ QRSessionID: %@ from cache: %@
QRserver ipv4: %@:%@, ipv6: %@
QRserver hpp: %@, ipp: %@
failed to compose a QR sessionInfo dict
add localParticipantID: %llu to sessionID: %@ _sessionToLocalParticipantID: %@
detected duplicate response. Ignore it.
allocate response modified %@
no allocation for shared session
current response ignored
Recieved allocation from DefaultPairedDeviceID {appID: %@}
Relay expiry time-stamp is NaN: %@
response expired: %16llx %16llx, %@
defaultRemoteDeviceCBUUIDString: %@
allocate response ID %@ is for recipient.
allocate response ID %@ is for initiator and took %0.6lf ms.
allocate response ID %@ is for initiator and took %0.6lf ms, recipient count: %u, response count: %u.
missing allocation status result for initiator
missing recipient push token in allocation status result
missing QR session ID
detects that session %@ has been accepted by device with token %@
join request in process
participant has not joined, ids: %@
useCurrentResponse=%@, sharedSessionHasJoined=%@
participant has joined with cached response
joinWithOptions information: idsSessionID=%@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@, isJoinAllocation = %@
should connect to qr server: %@
Cached stream infomation:  idsSessionID=%@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@
could not find original allocate request %@
set streamInfo from cache: %@, subscribedStreams=%@, publisehdStreams=%@, generationCounter = %@, maxConcurrentStreams = %@
No stream information
isInitiator: %@, pendingRecipientsAcceptedSessions= %@, isCloudAllocation= %@,  useCurrentResponse= %@, isFromCache= %@, subscribedStreams = %@
connecting with sessionInfo %@
recipient waits for session acceptance
_isDuplicateResponse:newResponse: invalid parameters!
_isDuplicateResponse:newResponse: found duplicate response for QRSessionID: %@
_isDuplicateResponse:newResponse: duplicate response not found.
_processSelfAllocations:allocation: called
self allocation count in response: %u
self allocation: %@
transformed self allocation: %@
_getCombinedSoftwareID: called
failed to get combined-software-id due to invalid parameter.
_createSessionInfoFromResponsePayload: called
QR Build Version: %@
remote deviceID: %@
allocate request took: %.6f seconds, extIPAddr: %@.
allocate response is for an auxiliary connection
defaults write to set ipPreference: %d
defaults write to set linkSuggestionValue: %d
defaults write to set linkScoreValue: %d
Warning: invalid response relaySessionID length = %lu != sizeof(uuid_t) = %lu
missing allocation status result
missing allocateType in response
allocate type is required for allocate protocol version %@
_setSessionInfoRequiredKeys called
 is missing required attributes %@ in sessionInfo %@
_processAllocationStatusResult: called
Failed to allocate QR for recipient with token %@ with error %lu
Allocation error response: %@
Allocation failure for session %@, status = %d, code = %d, attempting to retry!
No ids session for ids session id %@
No ids session id for request id %@
No request id
_sendAWDMetricsForAllocation:status:hasRecipientAccepted: called
missing response. Skip AWD report
_startQRConnectionForSession:isInitiatorsAcceptedSession: called {isInitiator: %@} sessionInfo %@
 is missing %@, bailling...
No IDSSessionID found for this requestID %@, bailing...
cannot find existing IDSSession %@ to start a connection
bring up GlobalLink link for cloud messaging to %@
passed sessionInfo to IDSSession ID %@ to connect, allocation: %p, %p, session should connectToQRServer: %@
failed to find response for groupID %@
_storeMappingFromPushTokenToURIs:fromURI:service:cert:forGroup: called {groupID: %@}
_uriToParticipantID: called sessionInfo %@
there is no URI list yet. stopped converting URI to Participant ID - %@
getRelaySessionIDForIDSSessionID:pushToken: called {sessionID: %@, pushToken: %@}
failed to find allocation for session %@
getPushTokenForRelaySessionID:relaySessionID called {sessionID: %@, relaySessionID: %@}
IDSSession ID %@ requested for a QR allocation
missing sessionID in requestAllocationForRecipient
found a pending QR allocation for IDSSession %@ with QR session ID %@
there's no pending QR allocation for IDSSession %@
setInitiatorsAcceptedToken:pushToken: called {pushToken: %@}
add accepted session %@ with token %@
getServerProviderForIDSSessionID: called {sessionID: %@}
report AWD allocator event %u, transport [%s], RAT [%s], duration %u ms, idsSessionID %@, isInitiator:%@
cleanUpCachedMappings for group %@
invalidate all allocations for IDSSession ID %@
invalidateAllocation: called
Add allocation For Session: %@, _sharedSessionHasJoined=%@, %@
Discard allocation For Session: %@, %@
invalid allocationList
_invalidateSession: %@
_removeAllAllocationsForSessionID: %@, %@
keepalive timer stopped for %@
_findAllocationForSessionID:requestIDStr called {sessionID: %@, requestID: %@}
_findAllocationForSessionID, {sessionID: %@, requestID: %@} not found
faied to get address in FixedQuickRelayServerAddress defaults
decoded relay-server-address %@:%u
Warning: [decodedUUIDData length]: %lu != sizeof(uuid_t): %lu
decoded base64 relay-session-id %@
decoded base64 relay-session-token %@
decoded base64 relay-session-key %@
 using preallocated tokens from user defaults
Missing a defaults for hardcoded QR session info
disable push handler
enable push handler
handler:didReceiveMessage:forTopic:fromID:messageContext: called
received an unexpected message %@
receivedOfflineMessagePendingForTopic: %@
_getGroupID called
_uuidFromNSStringToNSData called
Cannot find allocation for session %@, all allocations: %@
startKeepAliveTimer:relaySessionID called - {sessionID: %@, relaySessionID %@}
keepalive timer started for %@
stopKeepAliveTimer:relaySessionID: called {sessionID: %@, relaySessionID %@}
keepalive timer not found for %@
cleanup response count: %zu
clean up response for groupID %@
cleanup timer disabled
cleanup timer started
Error: data length: %lu != sizeof(uuid_t): %lu
deserializeQRConnectStatus failed, bad length: %u %u
Not an UUID
found in cur (last = %u) - index=%d shift=%d newShift=%d (cur=%llu, ffsll(~cur)=%d)
found (last = %u) - at index=%d newShift=%d (cur=%llu, ffsll(~cur)=%d)
Finished capturing AutoBugCapture diagnostics for %@
[Fatal error encountered] %s: ran out of ports to allocate, aborting!!!
can't allocated used port
can't release unallocated port
Phone number validation mode overridden by user defaults { modeFromDefaults: %ld }
Preflight disabled by server bag override -- falling back to legacy
*********** Override max SMS retries value to %ld
*********** Override max SMS delivery retries value to %ld
============= New BTLinkManager %@ starting =============
using %@ UUID from LinkManager
read pipe peripheral UUID from default: %@
pipe peripheral UUID is nil!  Not setting up BTLinkManager
============= Old BTLinkManager %@ stopping =============
%@ start advertising empty now
stop advertising
using pipe peripheral UUID %@
created pipe peripheral %@
connecting to %@
pipe peripheral is not set. Not connecting
Unregister endpoint identifier: %@
update paired device UUID to %@
processing pending pipe %@
pending pipe %@ matches to paired device
BTLink %@ created
linkDidConnect:%@
could not create a BTLink for %@
pending pipe %@ doesn't match to paired device - releasing it
Change paired device from %@ to %@.
Pipe is registered but not connecting, connect now.
Cannot start datagram link if regular pipe not registered
Registering datagram link type %d endpoint %@ registrationCount 0 => %u
Not registering datagram link endpoint %@ registrationCount %u => %u
Cannot unregister datagram link endpoint %@ - not registered
Unregistering datagram link endpoint %@ registrationCount %u => 0
Not unregistering datagram link endpoint %@ registrationCount %u => %u
%@ didUpdateState %s
%@ didConnectPeripheral %@
%@ didFailToConnectPeripheral %@ err %@
links = %@
%@ didDisconnectPeripheral %@ err %@
%@ didStartAdvertising error %@
 => Pipe did update state: %s
%@ registering for service %@ as %@
Register endpoint identifier: %@  type: %@  priority: Medium pipeTransport: %@
Unregistering datagram link endpoint %@ registrationCount %@
 => Pipe did register endpoint: %@  error: %@
%@ didRegisterEndpoint id %@ err %@
 => Pipe did unregister endpoint: %@
%@ didUnregisterEndpoint id %@
%@ re-registering for service %@ as %@
Re-register endpoint identifier: %@  type: %@  priority: Medium
 => Pipe did connect: %@
%@ pipeDidConnect %@
%@ got a new pipe for service %@
pipe UUID is nil
pipe UUID is not set yet - deferring verification for %@ until addPairedDevice
new UUID %@ doesn't match to existing UUID %@ - ignoring this new pipe
Pipe UUID %@ match
Link %@ created
Re-registering datagram link type %d endpoint %@ registrationCount %@
could not create a link for %@
 => Pipe did disconnect: %@   error: %@
%@ pipeDidDisconnect %@ err %@
%@ pipe %@ disconnected for service %@
linkDidDisconnect: %@
NRDevicePreferences created with NRDeviceIdentifier %@.
Failed to create NRDevicePreferences {deviceIdentifier: %{private}@, nrDeviceIdentifier: %{private}@}
Failed to create NRDeviceIdentifier {deviceIdentifier: %{private}@}
Creating IDSNRDevicePreferencesHandler with nil deviceIdentifier
Calling [NRDevicePreferences deviceSetupStarted:]
Calling [NRDevicePreferences deviceSetupCompleted:]
Called [NRDevicePreferences setQuickRelayRequest:] {wantsQuickRelay: %@}, {quickRelayRequestsCount: %lu}
Report Spam response: %@
IDSEncryptionErrorType unknown/unhandled error type: %d
Asking to convert an error of the wrong domain to an IDSEncryptionErrorType { error: %@ }
Invalid OTR Encrypt parameters -- failing {inputDataLength: %llu, queue: %@, OTRToken: %@}
   OTR encryption failed with error: %@
Could not find OTR session for token: %@
   OTR decryption failed with error: %@
Cleaning up: %@
Exception caught unarchiving DDResult data: %@   Exception: %@
createConnectionData: requiresWifi = %d, dataReadyHandler = %p, _connectionQueue = %p
_connectionQueue: createConnectionData: requiresWifi = %d, dataReadyHandler = %p, _connection = %@
   AV Response: %@   Error: %@
Got connection data: %p
Connection data error: %@
skeData was nil
callInfoData was nil
_connectionQueue: calling inviteDictionaryForCallID for callID = %d, [connectionInfo peerCN] = %@ 
Calling startConnectionWithCallID %@, %@, connectionInfo = %@, startError = %@, connectionInfos = %@, [connectionInfo remoteInviteData] = %@
No connection, bailing...
No data to send, bailing...
didStartSession %d for callID %d, error = %@
didStartSession returned a callID we do not recognize %d, what we have %@
didStopWithCallID returned a callID we do not recognize %d, what we have %@
Exception caught archiving connectionData, skeData Exception: %@
IDSDSessionKeyValueDelivery init: groupID: %@, sessionID: %@
add delivery handler with uuid %@: %@
... already added handler with uuid %@: %@
sending all cached data to new delivery handler
getAllKeyValueDeliveryLocalMaterialSetForGroupID: groupID doesn't match: %@, %@
getAllKeyValueDeliveryLocalMaterialSetForGroupID: %@, _localMaterials: %@
receiveDictionaryData: unsupported key: %u, type: %d
receiveDictionaryData: unsupported wrapMode %ld, return!
receiveDictionaryData: disableEncryptionForData, use plain data: %@
receiveDictionaryData: error: %@
_receiveData: key: %d particitant: %llu
_receiveData: notifying %lu handlers
_updateSendData invalid groupID
_updateSendData: key: %d data: %@ encryptedDataForAllParticipants: %@, encryption: %d capability: %@, remotesPushTokens: %@
_updateSendData: aborting send to %@ for group %@ and session %@ since this destination is not in group membership: %@
encryptedDataForAllParticipants: %@, shouldSendToParticipant: %@
_updateSendData: type: %d, key: %@, publicIdentity: %@, participant: %@, data: %@
_updateSendData: unknown type for capability: %@
_updateSendData: _localMaterials: %@
sendData: send %d with encryption %d: %@
Processing local device info query...
Responding to local device info query: %@
Responding to paired device info query: %@
No legacy connection, bailing...
Trying to send invite to inactive device, ignoring %@...
Using local account, can only send invitation to active device, ignoring %@...
Send invitation with destinations %@ newDestinations %@ pairedDestinations %@ allOtherDestinations %@
Got connection data %@, isScreenSharingSession %@
Done with outgoing network availability check; networkOkForSession: %@
Session %@ has ended; NOT sending remote invitations!
Creating connection data, isScreenSharingSession: %@
Failed to get connection data with error %@, isScreenSharingSession %@
Not ending this session as it's still being connected or already connected
Network availability check indicated that we should not attempt to send remote invitation(s)
%@: sendInvitationWithOptions could not find active Wifi connection, ending session with reason %d
Not sending invitation because of missing uniqueID
Failed to send invitation because failed to create unauthenticated public key
SecRandomCopyBytes failed %d (%s), bailing...
Sending invitation to %@, %@ <%@>
Sent message {isScreenSharingSession: %@, isLegacyOverride: %@, destinations: %@}
pulled out token %@ from destination
skipping destination %@, can't find token
session %@ invitation sent to tokens %@
We are the receiver, we can only DECLINE the invite, not CANCEL
Sending CANCEL %@, %@ <%@>
acceptInvitationWithData isWithDefaultDevice (%@) enableQuickRelay (%@), useQRDirectly (%@), isFaceTime(%@)
No remote blob, bailing...
Failed to get legacy connection data with error %@
At ACCEPT invitaion - from %@, session %@, expecting remote device encryption but remote does not specify
acceptInvitationWithData remoteBlob %@
Failed to get local connection data, bailing...
Sending unauthenticated public identity {publicIdentity: %{private}@}
Failed to create data from public public identity {error: %{public}@, publicIdentity: %{private}@}
Failed to create public identity from full identity {error: %{public}@, fullIdentity: %{private}@}
Sending accept to %@, %@ <%@>
Sending unauthenticated public identity {localUnauthenticatedFullIdentity: %{private}@}
Failed to send IDSSession because failed to create unauthenticatedPublicIdentityData
Malloc error when creating key material, ending call...
Sending accept to %@, %@, <%@>
Sending decline to %@, %@ <%@>
Failed to create unauthenticated public key because of nil full identity {session: %{private}@}
Failed to get unauthenticated public identity from full identity {error: %{public}@, fullIdentity: %{private}@, session: %{private}@}
Failed to get data from unauthenticated public identity {error: %{public}@, publicIdentity: %{private}@, session: %{private}@}
Ignoring incoming accept from %@, session is not waiting for an invite response anymore
Ignoring incoming accept from %@, session is not the initiator
No participantID, bailing...
No message version, bailing...
Setting peer protocol version to %d
receivedAcceptMessage: remoteKeyMaterialLength is not equal to remoteKeyMaterialLength, bailing...
Received accept from %@, session %@, fromToken %@.
Adding %@ to set to cancel
Canceling invitations to %@
Starting screen sharing connection with remote blob
Received accept from %@, session %@, expecting remote device encryption but remote does not specify
Starting connection with remote blob
Accepted relay-session-id %@.
Accepted relay-session-id %@ waits for QR connection.
Received decline %@ from %@, %@
Ignoring Decline from %@, %@, not in destinations: %@
Invite was declined { givenReason: %u }
Invite was declined with reason alias deactivated { fromID: %@, _inviteTokens: %@ }
Suppressing decline, other recipients
Invite was declined, notifying everyone I invited: %@
Received CANCEL %@ from %@, %@
Ignoring CANCEL from %@, %@, not in destinations: %@
Group context controller starting up
Got Context
Failed to get Context
Incoming Daemon UpsertGroup
Got Deaemon Group Context %@, error %@
Updating Group
Creating New Group
New Group Created %@
Upsert group -- Failed {error: %{public}@, context: %{public}@}
Incoming Daemon FetchGroup {groupID: %{public}@}
Failed to fetch group by groupID {error: %{public}@, groupID: %{public}@}
Failed to get public data representation {error: %{public}@, group: %{public}@}
Failed to get group from public data representation -- missing context {error: %{public}@}
Failed to get participnats for cypher -- missing context {error: %{public}@}
Failed to validate cached group -- missing context {error: %{public}@}
Notified of update to registration identities; invalidating daemon cache
Noting registration identity update {context: %@, error: %@}
Core Data Load Failed
Core Data Load sucdeeded
No output arrays specified for _splitDestinations %@
%@ splitting destinations %@
Splitting out local destinations - looking up device for dest %@
Resolved destination %@ from default paired device constant device %@.
(Class) Destination device uniqueID: %@
(Class) Default paired device uniqueID override %@   uniqueID %@
(Class) Device uniqueID override %@   uniqueID %@
(Class) Found matching device %@
(Class) Didn't find matching device for uniqueID %@
(Class) Resolved destination %@ from default paired device constant device %@.
Splitting out local destinations - token %@ and uri %@
Malformed destination %@
Finding device matching URI %@ and token %@
Found deviceID %@ and btID %@ after first try
Did not find deviceID using account %@
Found deviceID %@
Splitting out local destinations - found device id %@
Using push instead of Live Delivery while GL warms for device id %@
Device does not support live delivery, falling back to push {deviceID: %@, strippedURI: %@}
Not considering %@ for local. DeviceID is %@  (btID: %@)  and we're not already scanning/advertising. Service allows wiprox? %@
  Local IDS is disabled... not sending locally
Splitting out local destinations - no local device for URI %@, adding to remote
(Class) Dest became nil while trying to split destinations.
(Class) Split out local destinations (%@) remote destinations (%@)
OUTGOING-LOCAL_SEND:%@ SERVICE:%@
Sending message ID (%@) with data length %lu (resource: %@)  [Topic: %@  Local Device IDs: %@]
Ignoring request to fallback forcedLocal %@  localType %@ requireLocalWiFi %@ message %@
(Account) No account found for ID: %@
Fallback won't sent for %@ %@  alreadyFailed %@ alreadySending %@ alreadyComplete %@
Ignoring request to fallback for %@ %@ forcedLocal %@
Ignoring request to fallback for %@ %@ forcedLocal %@ due to budget restrictions.
Fallback send of %@ to %@ %@ completed with responseCode %ld error %@ lastCall %@ - current pending sends local %@ fallback %@
Overwriting previous local failure with remote success
Initiating fallback send for message %@ to %@ %@ from account %@
Attempt to send both DataToEncrypt and Data, dropping data
IDSUTunDeliveryController sendMessage %@ deviceID %@ succeeded? %@ response %ld topic: %@ - current pending sends local %@ fallback %@ account %@
Sending via account that's type Local -- forcing local delivery.
Couldn't resolve %@ to a valid dependent registration.
Could not construct a destination for %@
Service would like to use iMessage callerID for messages, Attempting to use %@
Service would like to use iMessage callerID for messages however they specified their own FromID, so we will attempt to use that
Sending Resource at path %@ with metadata %@
Compressed message data from: %u  to: %u
Use uncompressed message data (original: %u compressed: %u)
Compressed protobuf data from: %u  to: %u
Use uncompressed protobuf data (original: %u compressed: %u)
sendMessage <<Redacted>>  bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ wantsCertifiedDelivery %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
sendMessage of size %lu  bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ wantsCertifiedDelivery %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
Payload length %lu for topic %@ is too big to send.
Payload length %lu for topic %@ is too big to send as urgent
Attempt to send a file transfer over IDS to a remote destination over File Transfer API. Setting Command
Account %@ was asked to send to %@ with forced local delivery but there are unaddressible remote destinations %@ - failing message.
Account %@ was asked to send to %@ but we were unable to resolve any actual destinations - failing message.
Setting localLastCall to YES for this proxied outgoing message so that the completion does not rely on the local reflection
Local send completion block {responseCode: %ld, error: %@, lastCall: %@, combinedResponseCode: %ld, combinedError: %@, account: %@}
Attempted to send to remote destiantions on a local account, we are allowed to proxy, beginning proxy transaction, The params are %@
The new params we will send locally are are %@
Will Send Block
Completiom Send Block of message called, 
No account found for ID: %@
%@ Remote send completion block with responseCode %ld error %@ lastCall %@
%@ calling combined completion block responseCode %ld error %@ lastCall %@
Sending server message: %@   command: %@   account: %@
Finished sending server message request response for topic %@  [%@]
Failed sending server message request response for topic %@. Result code %ld. Error %@.
(Instance) Destination device uniqueID: %@
(Instance) Default paired device uniqueID override %@   uniqueID %@
(Instance) Device uniqueID override %@   uniqueID %@
(Instance) Found matching device %@
(Instance) Didn't find matching device for uniqueID %@
(Instance) Resolved destination %@ from default paired device constant device %@.
Found deviceID %@ using primary %@
(Instance) Dest became nil while trying to split destinations.
(Instance) Split out local destinations (%@) remote destinations (%@)
Ignoring request to fallback forcedLocal %@ requireLocalWiFi %@ message %@
Overwriting previous remote failure with local success
IDSAccount send remotely
Server has disabled service: %@, dropping this on the floor
Failing message to: %@   from: %@    invalid caller ID
OUTGOING-REMOTE_SEND:%@ SERVICE:%@
Urgent priority messages should require a response for reliability
Messages that want a response should not be fireAndForget
Disabling IDS-level ack for this message
Compressed IDS bulked payload data from:%u  to:%u
Cannot use encryption with bulked payloads!
Local protobuf data is compresed, use uncompressed protobuf data for remote delivery
Compressed protobuf serialized data from: %u  to: %u
Setting IDS payload with size: %u
Using incompatible combination of wantsEncryptedPayload and dataToEncrypt!
Setting IDS payload to be encrypted.
Registration %@   URIs %@  callerCert %@
!setState command=%@
!setState destinations=%@
Sending message (c = %@) %@ to filteredDestinations %@ (originally %@) for topic %@
Sending message ID (%@) using push to %@ for topic %@
This send requires %@, a lack of %@, and is interested in %@ registration properties
All courier acks have completed, informing the next layer that the message has been sent sucessfully
Attempt to send a file transfer over IDS to a remote destination over File Transfer API. Only MMCS transfer is avaible at this time, uploading file
Upload Complete, Here is the information, %@
 => Send completed with resultCode %ld, send error %@, lastCall %@ for displayIDs %@  messageUUID %@
Added query update hash {hash: %@, fromURI: %@, service: %@}
Send completed
Service would like to use iMessage callerID for messages
Service would like to use iMessage callerID for messages but provided their own FromID, attempting to use that instead
sendMessage { c = %@   fID = %@   fT = %@   g = %@   t = %@   tID = %@ } bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ wantsCertifiedDelivery %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
decryptMessageData length: %lu   myURI %@   fromURI %@   token %@   encryptionType %ld   completionBlock %p
Invalid encryption type -- failing {encryptionType: %@}
Only 1 account exists on this service, We will need to proxy this and include the default paired device as a destination
Found Default paired device %@ 
Comparing %@  To %@ 
These ID's are the same, We will not be proxying this message
No unique ID found - generating new one %@
Loaded unique ID %@
Re-generated my uniqueID %@
Got kIDSRTEncryptionMKMExpireDurationBagKey %u
Couldn't get kIDSRTEncryptionMKMExpireDurationBagKey value, using default value of %u
Got kIDSRTEncryptionMKMRollDurationBagKey %u
Couldn't get kIDSRTEncryptionMKMDefaultRollDuration value, using default value of %u
Got key duration value from user defaults write, set _mkmExpirationDuration: %u _mkmRollDuration: %u
Got kIDSRTEncryptionExpireDurationBagKey %u
Couldn't get kIDSRTEncryptionExpireDurationBagKey value, using default value of %u
Got kIDSRTEncryptionPreviousPrekeyExpireDurationBagKey %u
Couldn't get kIDSRTEncryptionPreviousPrekeyExpireDurationBagKey value, using default value of %u
Sending MKM over QR %@ - serverBag: %@, defaults: %@
forceKeyRecoveryLogic default %@ - the first incoming MKM will get dropped and we'll start the key recovery logic for the test...
setAccount: Add the registraion listener for account: %@
setAccount: added the accountID %@ for group %@
setAccount: Remove the registraion listener for account: %@
removeAccountForGroup: removed the account for group %@
requestKeyMaterialForGroup: there is no group session for %@. keyMaterialCache %@
requestKeyMaterialForGroup: requireMKM: %@
requestKeyMaterialForGroup: masterKeyMaterial: %@ shouldGenerateMKM: %@
requestKeyMaterialForGroup: send local MKM %@ to AVC
requestKeyMaterialForGroup: no need to send local MKM %@ to AVC
requestKeyMaterialForGroup: send remote MKM %@ to AVC
requestKeyMaterialForGroup: no need to send remote MKM %@ to AVC
requestKeyMaterialForGroup: send local SKM %@ to framework
requestKeyMaterialForGroup: no need to send local SKM %@ to framework
requestKeyMaterialForGroup: send remote SKM %@ to framework
requestKeyMaterialForGroup: no need to send remote SKM %@ to framework
requestKeyMaterialForGroup: standardDestinationSet: %@
requestKeyMaterialForGroup: givenDestinationSet: %@
requestKeyMaterialForGroup: givenDestinationSet for SKM: %@
requestKeyMaterialForGroup: givenDestinationSet for MKM: %@
_requestKeyMaterialForGroup: skipping _sendKeyMaterialsToGroup for lightweight participants because there are no lightweight participants
_getSetofStandardParticipantsForGroup: found mislabeled participants: %@
Initializing list of participants waiting for initial key materials { groupID: %@, destinations: %@, timeout: %f }
Failed to distribute initial key material distribution to some participants -- ending session { groupID: %@, sessionID: %@, remainingDestinations: %@ }
Not setting initial key material distribution timeout { destinations: %@, timeout: %f }
Removed entry from list of participants waiting for initial key materials { groupID: %@, destination: %@, remainingDestinations: %@, timeoutBlock: %@ }
Failed to send to participant waiting for initial key materials { groupID: %@, destination: %@, remainingDestinations: %@, timeoutBlock: %@ }
Removed unneeded entry from list of participants waiting for initial key materials { groupID: %@, destination: %@, remainingDestinations: %@, timeoutBlock: %@ }
_sendRenewedPrekeysToGroups: %@
_dispatchRenewPrekeyTimer is called. We'll renew prekeys in %d
_dispatchRenewPrekeyTimer - Couldn't find the identity for this device. Couldn't renew the prekey.
_sendKeyRecoveryRequestForPendingKeys: requireMKM: %@, requireSKM: %@, pushToken: %@ pendingKeyMaterialsForRecovery: count: %lu, %@
_sendKeyRecoveryRequestForPendingKeys: send key recovery request to: %@
_doCheckPendingKeyMaterialsAndSendKeyRecoveryRequestForMKM - recovered all _pendingMasterKeyMaterials!
_doCheckPendingKeyMaterialsAndSendKeyRecoveryRequestForMKM - recovered all _pendingStableKeyMaterials!
_doCheckPendingKeyMaterialsAndSendKeyRecoveryRequestForMKM - pushtoken: %@, needMKMRecoveryRequest: %@, needSKMRecoveryRequest: %@, current pendingMasterKeyMaterials %@, MKMRecoveryRetryCount %u, current pendingStableKeyMaterials: %@, SKMRecoveryRetryCount: %u
_doCheckPendingKeyMaterialsAndSendKeyRecoveryRequestForMKM - commonKeyMaterialsForRecovery: %@, MKMRecoveryDictionary: %@, SKMRecoveryDictionary: %@
_doCheckPendingKeyMaterialsAndSendKeyRecoveryRequestForMKM - doesn't needMKMRecoveryRequest or needSKMRecoveryRequest
_doCheckPendingKeyMaterialsAndSendKeyRecoveryRequestForMKM - tried %d. Reset the retryCount
createRealTimeEncryptionFullIdentity for the token %@
createRealTimeEncryptionFullIdentity failed! Please check the account registration status.
createRealTimeEncryptionFullIdentity - found the existed one %@
createRealTimeEncryptionFullIdentity - push token doesn't match, generating a new identity {old: %@}
createRealTimeEncryptionFullIdentity - the previous one %@ is expired
createRealTimeEncryptionFullIdentity - previous pre-key is now expired.
createRealTimeEncryptionFullIdentity - we'll generate the new pre-key %@
Created the full identity %{private}@ will be expired at %@
Created the full identity %{private}@, duration %f seconds, will be expired at %@
realTimeEncryptionPublicKeyData - trying to get my device identity
Need to create the full identity for this device first...
Identity is expired. Need to roll the fresh key.
Couldn't get the identity for this device
Returning public key data: %@
Current ACK'd number of prekey: %@ for group: %@
Report the prekey ACK'd (final count: %@) result for group: %@
%s invalid groupID, return
%s %@, keyMaterial reset timer fired. Resetting stored encryption sequence number during cleanup to 0
%s dispatched keyMaterial reset timer for group: %@
%s _groupIDToResetKeyMaterialCacheTimer: %@
%s invalid groupID!
%s keyMaterial reset timer invalidated for group: %@
%s keyMaterial reset timer not found for group: %@
storing encryption sequence number %llu (old: %llu) for groupID %@ (Client -> *IDSD)
ignoring encryption sequence number %llu (old: %llu) for groupID %@ (Client -> *IDSD)
returning stored encryption sequence number %llu for groupID %@ (Client <- *IDSD)
setRealTimeEncryptionPublicKey: We'll drop this pre-key message for group %@ since %@ is not in this group!
setRealTimeEncryptionPublicKey: public key: %{private}@ serverDate: %@ pushToken: %@ wrapMode: %llu
setRealTimeEncryptionPublicKey: (TEST) done: %{private}@
setRealTimeEncryptionPublicKey: done: %{private}@ fromID %@ pushToken %@
setRealTimeEncryptionPublicKey: will re-send key materials due to detected rolled identity for push token %@
realTimeEncryptionPublicKeyForDevice: %@
realTimeEncryptionPublicKeyForDevice: couldn't find any identity for %@!
realTimeEncryptionPublicKeyDataForDevice: %@
realTimeEncryptionPublicKeyDataForGroup: couldn't find any identity for %@!
realTimeEncryptionPublicWrapModeForDevice: %@
realTimeEncryptionPublicWrapModeForDevice: couldn't find any identity for %@!
publicKeys: %@
sendPrekeyRequestToGroup: %@, (destination: %@)
participantIDsForURIs: did not find participant for uri %@
Found expired MkM { expirationDate: %@, MkM: %@ }
cleanUpExpiredMasterKeyMaterial: Found expired current local MkM { expirationDate: %@, MkM: %@ }
cleanUpExpiredMasterKeyMaterial: Found expired next MkM { expirationDate: %@, MkM: %@ }
expired MKIs for group %@: %@
cleanUpExpiredMasterKeyMaterial: couldn't invalidate MKIs - cannot find session with groupID %@
MKMRoll timer %p fired, block %p.
mkm roll timer %p and block %p are already scheduled.
start mkmRoll timer %p, timeout %d sec, block %p 
stop mkmRollTimer timer %p, block %p.
mkmExpiration timer %p fired, block %p.
mkmExpiration timer %p and block %p are already scheduled.
start mkmExpiration timer %p, groupID: %@, timeout %d sec, block %p 
stop mkmExpiration timer %p, groupID: %@, block %p.
_mkmRollTimerFiredForGroup: %@ sessionID:%@
_mkmRollTimerFiredForGroup: no new current local material. Requesting...
MKM roll timer fired: current MKM: %@, next MKM: %@
createKeyMaterialForGroup: couldn't pass the key material to the session %@
set localParticipantID: %llu for SKM: %@
set localParticipantID: %llu for MKM: %@
participantID changed from %llu to %llu
Failed creating the master key material for the group %@
Created MKM %{private}@, MKS %@, MKI %@ for the group %@, current: %@, next: %@, isFirstLocalGeneratedMKM: %@ for device %@
createKeyMaterialForGroup: _mkmExpireDuration: %d is less than _mkmRollDuration: %d, use _mkmExpireDuration to renew MKM
MKM roll timer fired: duration: %u, groupID: %@
MKM expiration timer fired: isFirstLocalGeneratedMKM: %@, innerKeyMaterialCache: %@
The MKI (%@) has been expired for group: %@, but no need to create new MKMs: group session state %d, active participant: %@
Failed creating the stable key material for the group %@
Created SKM %{private}@, SKS %@, SKI %@ for the group %@, current: %@, previous: %@
createStableKeyMaterialAndSendToFrameworkForGroup: send local SKM %@ to framework
createStableKeyMaterialAndSendToFrameworkForGroup: couldn't find the session %@
sendKeyMaterialsRecoveryRequestToDevice: %@ fromID: %@ groupID: %@ sessionID: %@
sendKeyMaterialsRecoveryRequestToDevice: %@ - failed to get publicIdentityData
sendKeyMaterialsRecoveryRequestToDevice: %@ - failed to get the account for this group! (accountsID %@)
sendKeyMaterialsRecoveryRequestToDevice: could not find session for group %@
sendKeyMaterialsRecoveryRequestToDevice: sending key recovery request for group %@ to participant IDs %@
sendKeyMaterialsRecoveryRequestToDevice: Sent the key recovery request to URI: (%@) (pushToken: %{private}@)(message dict: %{private}@)
sendKeyMaterialsRecoveryRequestToGroup: %@ - failed to get publicIdentityData
sendKeyMaterialsRecoveryRequestToGroup: %@ - failed to get the account for this group! (accountsID %@)
sendKeyMaterialsRecoveryRequestToGroup: %@ requireMKM: %@, requireSKM: %@, (message dict: %{private}@)
sendKeyMaterialsRecoveryRequestToGroup: could not find session for group %@
sendKeyMaterialsRecoveryRequestToGroup: %@ requireMKM: %@, requireSKM: %@, participantIDs: %@
sendKeyMaterialsRecoveryRequestToParticipants: requireMKM: %@, requireSKM: %@, participantIDs: %@, participantsInfo: %@
sendKeyMaterialsRecoveryRequestToParticipants: no need to send MKM request to its own, senderID: %@, groupID: %@, sessionID: %@
processIncomingKeyMaterialsRecoveryRequest: We'll drop this prekey recovery request for group %@ since %@ is not in this group!
processIncomingKeyMaterialsRecoveryRequest: We'll drop this key recovery request for group [%@] since deviceToken [%@] is not in the active participant list!
processIncomingKeyMaterialsRecoveryRequest for group %@, session %@, serverDate %@, pushToken: %@, fromID: %@, message %{private}@
Receiving Key Material (Push, KeyMaterialsRecovery) [PreKey] -- %f
processIncomingKeyMaterialsRecoveryRequest - there is no group session for group %@, session %@. We won't send any MKM/SKM.
_storePendingKeyMaterialForKeyRecovery: _pendingMasterKeyMaterials already has the pending key material (MKI:%@) for %@
_storePendingKeyMaterial: _pendingStableKeyMaterials already has the pending key material (SKI:%@) for %@
_storePendingKeyMaterial: moved the incoming the master key material (MKI:%@) to temporary storage until it gets the prekey for it.
_storePendingKeyMaterial: moved the incoming the stable key material (SKI:%@) to temporary storage until it gets the prekey for it.
receivedAndSetKeyMaterial: %{private}@ SKM: %{private}@ for MKM: %@, for SKM: %@, forDevice: %@ fromID: %@ groupID: %@ sessionID: %@ fromSender: %@ publicKey: %@
receivedAndSetKeyMaterial: We'll drop this MKM %{private}@ for group %@
receivedAndSetKeyMaterial: There is no local full identity.
receivedAndSetKeyMaterial: This MKS data %@ is not %d bytes. skipping...
receivedAndSetKeyMaterial: This MKI UUID data %@ is not %d bytes. skipping...
receivedAndSetKeyMaterial: This MKI %@ is local key material. skipping...
receivedAndSetKeyMaterial: has cached MKM. {MKI: %@}
receivedAndSetKeyMaterial: This SKS data %@ is not %d bytes. skipping...
receivedAndSetKeyMaterial: This SKI UUID data %@ is not %d bytes. skipping...
receivedAndSetKeyMaterial: This SKI %@ is local key. skipping...
receivedAndSetKeyMaterial: has cached SKM. {SKI: %@}
receivedAndSetKeyMaterial: not received any valid MKM or SKM
receivedAndSetKeyMaterial: the simulator can't decrypt protectedMKMData %@
receivedAndSetKeyMaterial: done: MKM: %{private}@ MKS: %@ MKI: %@, participantID: %llu
receivedAndSetKeyMaterial: not delivering key material to client -- already delivered MKI: %@
receivedAndSetKeyMaterial: done: SKM: %{private}@ SKS: %@ SKI: %@, participantID: %llu
receivedAndSetKeyMaterial: not delivering key material to client -- already delivered SKI: %@
requestPendingKeyMaterialsForSession: couldn't find the session %@
noteReceivedGroupMasterKeyMaterials: couldn't find the session %@
noteReceivedGroupMasterKeyMaterials: updated the cache %@ for the group %@
receivedGroupStableKeyMaterials: couldn't find the session %@
receivedGroupStableKeyMaterials: updated the cache %@ for the group %@
notifyStableKeyMaterialsReceivedForGroup: couldn't find the session %@
notifyStableKeyMaterialsReceivedForGroup: keyMaterialCollection.stableKeyMaterials: %@
notifyStableKeyMaterialsReceivedForGroup: add stableKeyMaterial: %@ to updateArray
We never got the key material for the group %@
We don't have any key material for the group %@
We never got the stable key material for the group %@
We don't have any stable key material for the group %@
sendPendingKeyMaterialsToGroup: %@, pendingMasterKeyMaterials: %@
sendPendingKeyMaterialsToGroup: %@ - didn't find any pending keys.
sendPendingKeyMaterialsToGroup: %@ - found the pending key %@
_protectedCachedKeyMaterialsForDestination: keyMaterialCollection is nil for %@ (%@)!
_protectedCachedKeyMaterialsForDestination: returning %@
resetMKMLocalSentStatus: reset MKM %@ status
resetMKMLocalSentStatus: from cache: reset MKM %@ status
resetSKMLocalSentStatus: reset SKM %@ status
resetSKMLocalSentStatus: from cache: reset SKM %@ status
sendKeyMaterialsToGroup: filtering out own push token %@
sendKeyMaterialsToGroup: There is no key material yet for %@. This shouldn't happen... (keyMaterialCache: %@, mkmData: %@)
sendKeyMaterialsToGroup: There is no stable key material yet for %@. This shouldn't happen... (stableKeyMaterialCache: %@, skmData: %@)
sendKeyMaterialsToGroup: both hasValidMKM and hasValidSKM are invalid, return
sendKeyMaterialsToGroup: destinations: %@
sendKeyMaterialsToGroup: requireMKM: %@, requireSKM: %@ no destination specified, return
sendKeyMaterialsToGroup: %@, requireMKM: %@, requireSKM: %@, mkmData: %@, keyMaterialCache: %@, skmData: %@, stableKeyMaterialCache: %@, _participantsForGroup: %@
Found _publicIdentity %@ for pushToken: %@ and publicKey: %@
sendKeyMaterialsToGroup: the test is going to use protectedMKMData %@, publicIdentity %@
Couldn't find the publicIdentity for pushToken: %@
sendKeyMaterialsToGroup: %@ - failed to get the account for this group! (accountsID %@)
sendKeyMaterialsToGroup: aborting send of key material message to %@ for group %@ and session %@ since this destination is not in group membership: %@ (pending participants %@)
MkM message failed to send! { destination: %@, responseCode: %ld }
sendKeyMaterialsToGroup: Sent SKM: %@ to URI: (%@)
sendKeyMaterialsToLocal: not passing the key material to the session %@ because the key material is empty
sendKeyMaterialsToLocal: currentLocalMKM %@ to the session %@
sendKeyMaterialsToLocal: currentLocalMKM %@ to the session %@, but already sent...
sendKeyMaterialsToLocal: couldn't pass the key material to the session %@
Server Bag provided us with should enforce remote timeout %@
reset the device prekey
Removed participantInfo: %@ from group: %@}
Removed active participant { groupID: %@, activeParticipant: %@, participantsForGroup: %@ }
Removed active participant { groupID: %@, participantsInfoForGroup: %@ }
resetKeysForGroup: %@ keyMaterialCache: %@, shouldRemoveCurrentParticipants: %@
unsubscribeEndpointsForGroup: %@ updatedMembers: %@
reportTimeDifferenceBetweenFirstPacketAndMKI: timeDelta: %lld MKI: %@
sendMessage: account: %@ fromID: %@ - failed to get the account forGroup: %@
sendMessage: do not send MKM over push, return
sendMessage: calling _generateMKMBlobForQRFromMessage
sendMessage: sendKeyMaterialMessageDataOverQR completed with %d. completionBlocks called %@ %@, groupID %@, sessionID %@
Failed to generate a blob to send via QR, only using push {session: %@}
Group session encryption message requires lack of properties {requiredLackOfCapabilities: %@}
Group session encryption message requires properties {requiredCapabilities: %@}
Sending group session encryption message { GUID: %@, command: %ld, timeout: %f }
Group session encryption message completion block fired { GUID: %@, command: %ld, responseCode: %lu, lastCall: %@, error: %@ }
sendMessage: sendMessageWithSendParameters completed with %d. completionBlocks called %@ %@, groupID %@, sessionID %@
sendPublicKeyToGroup: failed to get groupID
sendPublicKeyToGroup: %@ - failed to get publicIdentityData
sendPublicKeyToGroup: %@ - failed to get sessionID
sendPublicKeyToGroup: %@, ACK'd: %@ (destination: %@)
sendPublicKeyToGroup: %@ (destination: %@)
sendKeyMaterialsToWaitingParticipantsForGroup - Sending the key material to %@ of the group %@ (pending participants %@)
sendKeyMaterialsToWaitingParticipantsForGroup - didn't send any key materials to %@ of the group %@ (pending participants %@)
Failed to process QRMKM payload {error: %@, endpoint: %@}
Unable to decrypt the incoming MKM QR blob -- returning nil
Decoded QR MKM Payload {decodedPayload: %@}
Expanded QR MKM Payload {expandedPayload: %@}
Unable to generate a QR MKM payload to more than 1 destination -- returning nil {destination: %@}
Unable to generate a QR MKM payload to a non-specific URI -- returning nil {fullDestinationURIString: %@}
No endpoint found to target, not triggering a query -- returning nil {destinationURIString: %@, tokenFromURL: %@, prefixedFromID: %@}
QR MKM payload failed to encrypt -- returning nil {error: %@}
QR MKM payload used legacy encryption -- returning nil {endpointToTarget: %@}
Encoded QR MKM Payload {compactPayload: %@}
updateServerDesiredKeyMaterialsForGroup groupID:%@ sessionID:%@
updateServerDesiredKeyMaterialsForGroup groupID:%@ sessionID:%@: SME disabled
updateServerDesiredKeyMaterialsForGroup will include %lu mkms for up to %lu participants
updateServerDesiredKeyMaterialsForGroup: skip local participant
updateServerDesiredKeyMaterialsForGroup: aborting send of key material message to %@ for group %@ and session %@ since this destination is not in group membership: %@
updateServerDesiredKeyMaterialsForGroup participantId:%llu lightweight:%@ publicIdentity:%@ keyMaterial:%@ nextKeyMaterial:%@ stableKeyMaterial:%@
updateServerDesiredKeyMaterialsForGroup participantId:%llu keyMaterial:%@
updateServerDesiredKeyMaterialsForGroup participantId:%llu stableKeyMaterial:%@
updateServerDesiredKeyMaterialsForGroup: couldn't find sessionID: %@
updateServerDesiredKeyMaterialsForGroup: account: %@ fromID: %@ - failed to get the account forGroup: %@
updateServerDesiredKeyMaterialsForGroup: add encryptedDataBlob: %@
updateServerDesiredKeyMaterialsForGroup: haven't got the blob
updateServerDesiredKeyMaterialsForGroup: add encryptedMirageHandshakeBlob: %@
updateServerDesiredKeyMaterialsForGroup: haven't got the handshake blob
updateServerDesiredKeyMaterialsForGroup: add desiredMaterialSetForEncryptedData: %@
updateServerDesiredKeyMaterialsForGroup: haven't got the desiredMaterialSetForEncryptedData
rollNewKeysAfterResettingPrekeysForGroups: %@ reason: %ld
rollNewKeysAfterResettingPrekeysForGroup: Couldn't find the session for group %@! Coulnd't notifity the device change event
didReceiveEndpointsUpdate: %@ forGroup: %@ - invalidated the previous key rolling timer. Wait %f seconds more again to get more endpoint updates... (previous %@)
didReceiveEndpointsUpdate: %@ forGroup: %@ - roll new keys for the group (previous %@)
didReceiveEndpointsUpdate: %@ forGroup: %@ - nothing changed.(previous %@)
updateLightweightMemberTypes: membersForGroup: %@ for group: %@
updateLightweightMemberTypes: membersLightweightStatusDict: %@ for group: %@
setMembers: %@ forGroup: %@
setMembers: endpointSubscription %p forGroup: %@
ACK'd prekey count is reset to 0 forGroup: %@
setMembers: endpointSubscription: %p initialResolvedEndpoints: %@ error: %@ _lastKnownGroupIDToPushTokens: %@
didUpdateMembers doesn't do anything because hasChangedStandardMembers=NO.
didUpdateMembers to %@, hasChangedStandardMembers: %@
_updateEncryptedDataBlobForGroup: couldn't find session: %@
_dispatchDeferredPrekeyRequestForGroupID - after %f sec, now sending prekey request to group because we still have not delivered key material to participants %@
_dispatchDeferredPrekeyRequestForGroupID - adding participant to destinations for prekey request %@
current standard participants: %@
standard participants: %@
current lightweight participants: %@
_participantsInfoForGroup[groupID]: %@
_participantsForGroup[groupID]: %@
addedParticipantsDiff count = %lu, no need to be added to participantsNeedsKeyMaterial
before processing participantsNeedsKeyMaterial: %@, local: %@
invalid participant push token %@, continue
%@ is mine! don't need to add
waiting praticipant %@ no longer exists! don't need to add
waitingParticipants: %@
_getAndUpdateParticipantsWaitingForKeyMaterialsForGroup: unknown participantType: %ld
newParticipantsReadyForKeys: %@
_participantsWaitingForStableKeyMaterials: %@
_dispatchDeferredPrekeyRequestForGroupID - participants have been updated but we are not yet able to send key material to participants %@
_updateLightweightParticipants: remove standard participant: %@ due to downgrade
_updateLightweightParticipants - didn't send any stable key materials to %@ of the group %@ (pending participants %@)
_updateStandardParticipants: remove lightweight participant: %@ due to upgrade
_updateStandardParticipants - didn't send any key materials to %@ of the group %@ (pending participants %@)
didUpdateParticipants: unknown type: %ld
Account is no longer registered, ending group: %@
didUpdateRegisteredDevices: %@ for account: %@
Clearing postponed messages
Database state:
  Outgoing (account_guid, count)
%@  Incoming (topic, count)
Performing initial database housekeeping
Exception handling message %@, %@
Bad messageData for incoming message %@!
Storing incoming message
Ignoring storeMessage: %@ forTopic: %@ fromID: %@
Bad message data for incoming message %@!
Finished storing message
Hit exception %@ decoding outgoing IDS message!
Hit exception %@ decoding outgoing duet identifier overrides!
Performing MarkingLocalDestiations with accounts %@ and device %@
Marking all pending delete messages for account %@
Ignoring storeOutgoingMessageWithSendParameters: %@ destinations: %@ accountID: %@
Asked to bypass storage for message with GUID %@
Bad destinationData for outgoing message %@! Error: %@
Hit exception %@ encoding outgoing IDS message!
Asked to send Message with guid: %@  database check for similiar messages that should be sent first says %@
We already have message with guid %@ alternate %@ in the database, dropping this redundant resend without calling completion.
deleteOutgoingMessageWithGUID:alternateGUID: {guid: %@, alternateGUID: %@}
Exception performing database block %@
Message store map %@
Unexpected datatype. %@ should be of type %@, not %@
Add overflow, dataSize: %lu, kIDSQRAllocateKey_RecipientPushToken length: %lu
Add overflow, dataSize: %lu, kIDSQRAllocateKey_RecipientSessionToken length: %lu
Add overflow, dataSize: %lu, kIDSQRAllocateKey_RecipientURI length: %lu
Add overflow, dataSize: %lu, recipient's kIDSQRAllocateKey_RecipientPushToken length: %lu
Add overflow, dataSize: %lu, recipient's kIDSQRAllocateKey_RecipientSessionToken length: %lu
Add overflow, dataSize: %lu, recipient's kIDSQRAllocateKey_RecipientURI length: %lu
testOptions changed to: %@
IDSDSessionActiveParticipantsCache adding sessionID %@ participants %@
IDSDSessionActiveParticipantsCache removing sessionID %@
We have exceeded the maximum queue size, dropping message %@
File transfer for message %@ [%@] is already in local delivery queue. Dropping duplicate.
Force dequeuing message %@ (should be manual: %@)
Couldn't construct a socketPairMessage for message %@ topic %@ command %@ - discarding
* No pending messages not on %@
Starting outgoing network availability check for session %@
Overriding network availability check result! { session: %@, overrideBehavior: %ld }
Bypassing network availability check for incoming session from default paired device { session: %@ }
Network availability check: including WiFi availability
Network availability check: allowing WiFi hotspot
Network availability check: including cellular availability
Time since lights on: %f
Starting availability check with network timeout: %fs   wifi timeout: %fs   flags: %lu   options: %lu
QuickRelay is enabled, skip connection check.
Finished connectivity check with error %@
Failed creating local data, bailing...
At least one destination is mako {destinationURI: %@, uniqueID: %{public}@, destinations: %@}
Resolved IDSDSession fromID is not a valid selected alias on the account! This may cause messaging failures. { sessionID: %@, fromID: %@, clientSpecifiedFromID: %@, accountID: %@, accountAliasStrings: %@ }
Resolved IDSDSession fromID { sessionID: %@, fromID: %@, clientSpecifiedFromID: %@, accountID: %@, accountAliasStrings: %@ }
QuickRelay is disabled for service: %@, session: %@.
QuickRelay is enabled for service: %@%@, session: %@.
Created local unauthenticated full identity {fullIdentity: %{private}@}
Failed to create full identity for unauthenticated destination {destinations: %{private}@}
Destinations lightweight status: %@
Failed to create session because failed to create unauthenticated public identity even though key was present
Setting invite timeout to %f seconds
Session invite timed out after %f seconds
Clearing invitation timeout timer
Clearing connection timeout timer
Setting connection timeout to %f seconds
Session connection timed out after %f seconds
Clearing session packet loss timer
Clearing end session timeout timer
Setting end session timeout to %f seconds
End session timed out after %f seconds
Failed to create unauthenticated public identity from data becuase data is nil
Failed to create unauthenticated public identity from data {error: %{public}@, data: %{private}@}
*** Lockdown state is expired, not doing absinthe validation
Selecting account {forOutsideiCloudMessaging: %@, iCloudUsableForOutside: %@}
Selected local account
Selected account {registeredAccount: %@}
%@ _callStateChanged - no longer on a call, processing %lu pending queries!
%@ - on a call and wifi isn't usable, enqueuing query to avoid mRAB
%@ - too many enqueued queries, dropping this one
%@ - we're on a call but the network is usable, processing query immediately (Usable WiFi: %@)
%@ - we're not on a call or wifi is usable, processing query immediately (Usable WiFi: %@)
Accepting Incoming Grant Query Requests
IDSDaemonMIGQueryInterface auth port died: %@
IDSDaemonMIGQueryInterface: Could not create server with name: %@
received message from peer(%d): %s
Unknown message from peer: (%d):(%@) %s
received unknown from peer(%d):(%@) %s
Could not create reply message for cache request
*** Incoming cache query for (service: %@) (transactionID: %@)
Current cache: %d count
Incoming cache query, but %d is not entitled to access the cache
Could not create reply message for cached id status query
*** Incoming cached ID status query for (respectExpiry: %@)  (service: %@)  (transactionID: %@)  (destinations: %@)
No registered account for service %@, bailing...
No fromURI for account %@
Account: %@  fromURI: %@
Looking up cached value for %@ -> %@
Sending id status results %@
__HandleIDStatusQuery - enqueuing
*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)  (force: %@) (bypass limit: %@)
Found service %@ for serviceName %@
No registered account for service %@
Using %@ from %@ to perform id query.
No URIs or cert after filtering destinations %@, bailing...
Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (error: %@) - replyMessage? %@
Tried forcing, however this destination is not under the limit {destString: %@, rateLimiter: %@}
No registered account for service after if %@, bailing...
*** Incoming ID status update, from un-entitled proess: %d
*** Incoming ID status update: %d  (service: %@)  (destination: %@)
__HandleRemoteDeviceQuery - enqueuing
*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)
__HandleIDInfoQuery - enqueuing
Failed to load persistent cache data from keychainWrapper {error: %{public}@, identifier: %{public}@, keychainWrapper: %{public}@}
Failed to save persistent cache data to keychainWrapper {error: %{public}@, identifier: %{public}@, data: %{private}@, keychainWrapper: %{public}@}
Tried to purge before available -- returning {self: %@}
Failed To load key -- returning nil {error: %@, keyIdentifier: %@}
CCCrypt failed -- purging && returning nil {cryptResult: %d}
Failed To remove file {error: %@, path: %@}
Failed To Generate IV {ivResult: %d}
Failed to get a stored key, generating a new key {error: %@, result: %@}
Failed To Generate key {keyResult: %d}
Failed to save key -- returning {keySaveError: %@}
Failed to purge stored key {removeError: %@}
GUID %@ Destination %@ lacks interesting property %@
GUID %@ Destination %@ lacks required property %@
GUID %@ Destination %@ has property %@ we do not want
GUID %@ finished token filtering
Couldn't pull message guid out of %@, using %@
IDSIncomingMessageRecordAddMessageRecordDedup deduped message with identifier %@. Will use storage guid %@
Missing phone number authentication entitlement -- failing creation of IDSDXPCRegistration collaborator {connection: %@}
Allowing bypass entitlement to read from IDSXPCRegistration {connection: %@}
Unable to fetch sims -- returning nil {simFetchError: %@}
Client requested selected subscriptions {subscriptions: %@, selectedLabelIDs: %@, SIMs: %@}
Client requested unselected temporary phone aliases, but not in state where home number is allowed {isiCloudSignedIn: %@, allowHomeNumber: %@}
Client requested unselected temporary phone aliases {descriptions: %@, users: %@}
Writes are disabled -- failing `selectSubscription:`
Writes are disabled -- failing `unselectSubscription:`
Writes are disabled -- failing `setSelectedSubscriptions:`
Writes are disabled -- failing `removeTemporaryPhoneAlias:`
Told to remove temporary URI { uri: %@ }
Writes are disabled -- failing `disableTemporaryPhoneAlias:`
Told to disable temporary URI { uri: %@ }
Writes are disabled -- failing `enableTemporaryPhoneAlias:`
Told to enable temporary URI { uri: %@ }
Failed to remove peerIDCache v0 {error: %{public}@}
Failed to remove peerIDCache v1 {error: %{public}@}
Failed to remove peerIDCache v2 {error: %{public}@}
Failed to remove peerIDCache v3 {error: %{public}@}
Migrated Peer ID persistent map {oldVersionNumber: %ld}
Query cache:
Key: <%{public}@,from:%{private}@,to:%{private}@>
        URI: %@
        Push token: %@
        Session token: %@
        Expire: %@
        Refresh: %@
        Public Key: %@
KT Opt In State: %@
   Using disaster mode token for URI: %@   token: %@
   Setting disaster mode token for URI: %@   token: %@
Found KT status in query result { service: %@, URI: %@, KTAccountID: %@, KTStatus: %@, KTBlob: %@ }
Per-URI KT account identifier is missing from the IDS response, which may cause KT verification failures -- using URI hash instead { KTAccountKey: %@ }
Found identity:
GameCenter data: AssociationID: %@, SharingState: %@, LastUpdatedDate: %@
              device pushToken: %@
                 session token: %@
                           uri: %@
 sender-correlation-identifier: %@
                    clientData: %@
                   device-name: %@
           private-device-data: %@
              kt-loggable-data: %@
                kt-account-key: %@
          device-key-signature: %@
      kt-mismatch-account-flag: %@
               kt-capable-flag: %@
                    showErrors: %@
   No known public key found for token: %@
   No known iMessage public key found for token, skipping this identity: %@
   No known push token found, ignoring
                    Overwriting soft TTL with: %ld seconds
                    Overwriting hard TTL with: %ld seconds
   TTL for Service: %@, Uri: %@, refresh: %@, expires: %@,
Returning disaster mode token for from URI: %@   token: %@
Found %@ value: %@  for peer token: %@
** No %@ value found for peer token: %@
URI %@ didn't have remote devices.
URI %@ didn't have a verification request id
** At least one session token expired for: %@, need to get new ones
Checking peer token: %@ for URI: %@   (Tokens: %@)
  => We don't have it - clearing that peer's map
Not flushing tokens, we're in debilitated mode
  => Good to go, we have it
Clearing peer and personal caches
Not forgetting tokens, we're in debilitated mode
Forgetting session tokens for URI: %@  from URI: %@  service: %@
Forgetting peer tokens for URI: %@  from URI: %@  service: %@
Forgetting peer tokens for service {service: %@, keys: %@}
Active query for service: %@  from: %@  peers: %@
  Active sessions for: %@, adding...
  Expired session for: %@, skipping...
Empty token for client data update block
Empty client data update block for token: %@
Empty token for removing client data update block
Empty token for purge client data block
Empty purge client data block for token: %@
Empty token for removing purge client data block
Missing context for adding endpoint query completion block -- ignoring request {block: %@, token: %@, queue: %@}
Missing context for removing endpoint query completion block -- ignoring request {token: %@}
Missing context for endpoint request -- returning nil {URIs: %@, serviceIdentifier: %@, localURI: %@, completion: %@, queue: %@}
Enqueueing cleanup if needed
Checking to cleanup expired entries if needed {now: %@, val: %@}
%@ returning serviceConnectorServiceForAccountString=%@._account=%@;_service=%@;_name=%@
problem: %@ is going to use the main queue.
%@ called nw_service_connector_cancel_active_connection
%@ cannot cancel service connector for connection._serviceConnector=%@;_defaultPairedDeviceEndpoint=%@;serviceConnectionServiceString=%@
Dealloc'ing IDSGenericConnection without it being invalidated
Invalidating IDSGenericConnection %@
genericConnection for %@ using BT datagram link - stop
%p %@ Stall warning [%@]
%p Created the stall detector %@
initWithReadHandler: readHandler: %p, self: %p
Timing events: (%0.9f to generate)
Custom Test 1 - simple control channel internal fail
Custom Test 2 - reset before control channel internal fail
Custom Test 3 - simulate the control channel connection reset loop
Custom Test 4 - dump logs with flags %08X
Custom Test 5 - simulate reaching file descriptor limit
Custom Test 5 - made new socket %d
Custom Test 6 - pop alert
Custom Test 7 - trigger utun socket stall detection
Custem Test 7 - Couldn't find the detector %@
Custom Test 8 - filling utun os_channel...
Custom Test 8 - filled utun os_channel after %d dummy writes
Custom Test 9 - Inject Corrupted BT packet.
Custom Test 10 - Control Message + main queue deadlock test (avoidMainQueue: %@
Custom Test 10 - skipping test for %@ on %@
Custom Test 10 - about to ask main queue to sync onto TransportThread for %@ on %@
Custom Test 10 - about to sync onto TransportThread for %@ on %@
Custom Test 10 - sync operation on TransportThread for %@ on %@
Custom Test 10 - sync onto TransportThread returned for %@ on %@
Custom Test 10 - telling control channel to encrypt and send message for %@ on %@
Custom Test 10 - asked main queue to sync onto TransportThread for %@ on %@
Custom Test 11 - simulate starting control channel again
Custom Test 12 - Kill all links
Custom Test - unsupported %ld
%@: created the stall detector for %@
%@: created mapping [%@ / %@] <=> [%@] (selfInstanceID[%s] %@)
ids-ipsec: service string %@ needs to have 3 components
ids-ipsec: startDataChannelWithDevice called with generic connection %@ for service %@ and endpoint %@ connection-cache %@
ids-ipsec: calling internalStartConnectionWithEndpoint with cloud option for service %@
Asked to set up a connection when we dont have a paired device!  Aborting...
error creating socket with [%@] [%@]
ids-ipsec: start_request returns error but data channel fine - assuming connected via available block. Error %@
startDataChannelWithDevice: finished with no error, but no socket and no connection
ids-ipsec: service connection (%p) %@ connected for service %@ but no generic connection - saving in cache
Extracted {socket:%d} from internal {socket:%d} of (%p) %@
Failed to extract internal socket of (%p) %@
connect ready for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]
Enabled new connection, cancelling previous instance (%p) %@
This connection %@ has already been invalidated. Calling _closeSockets.
connection event %s for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]
serviceConnection (%p) not same as existing serviceConnection (%p) for genericConnection %@
about to wait for connect ready for {socket:%d}
connect ready for {socket:%d} (ports[%@]), socket error: %d (%s), connection[%@], device[%{public}@]
getsockopt failed %d
Saved sdCopy {socket:%d} of {socket:%d} in %@
%@: openSocketCompletionHandler dispatch time %0.6lf seconds
Skipping header compression for phone continuity
scheduled wait for connect ready for {socket:%d}
openSocket was never called on connection (%@) within %@ seconds of starting it.  Kill the connection!
%@: close channel control message [%@] created for connection %@
ids-ipsec: found service connection %@ in cache for service %@
ids-ipsec: create udp connection %@ for service %@ endpoint %@ localPort %@ remotePort %@
setupIPsecLinkForDeviceConnectionInfo serviceConnector %@ cloudServiceConnector %@
setupNewDeviceConnectionInfoForCbuuid %@ deviceUniqueID %@ shouldUseIPsecLink %@
FairPlay authentication failed, obliterate device connection.
Device %@/%@ (CC:%@) is blacked out due to fairplay failures
Add a block for control channel reestablishment on link connects for %@
Failed to encrypt/decrypt control message with deviceUniqueID %@, try different peer for %@.
deviceUniqueID mismatch (%@!=%@), ignore decryption error.
Successfully decrypted control message, lock peer %@ for cbuuid %@.
%p: control channel got message %@ device conn info:%@
Add a block for initial control channel setup on link connects.
TransportThread initialization failed
sysctl for kern.skywalk.ring_stat_enable failed %d
ids-ipsec: cancelling active connection for %s on %@ with parameters %@
ids-ipsec: starting service connector for %s on %@ with parameters %@
nw_service_connector_start_request returned connection(%p) %@ error %@ for %s
nw_service_connector_start_request returned EEXIST - exit
nw_service_connector_start_request returned EINPROGRESS - exit
didConnectControlChannelForDeviceConnectionInfo called: connection %@ error %@
ids-ipsec: start_request returns error but control channel fine - assuming connected via available block. Error %@
startControlChannelWithDevice: error creating control channel with [%@] [%@]
UTunController control channel for [%@] creation failed: %@
For the fixedInterface case, obliterate the connection.
UTunController control channel for default paired device could not be started for %0.3lf seconds
UTunController calling startControlChannelWithDevice for [%@] after %d seconds
startControlChannelWithDevice: finished with [%@]
startControlChannelWithDevice called but already connecting/connected - force continue %@
startControlChannelWithDevice called but already connecting/connected - returning %@
startControlChannelWithDevice over ipsec path for %@
startControlChannelWithDevice called but pairedDeviceUUIDString is nil.
startControlChannelWithDevice over utun/bt path for %@
startControlChannelWithDevice - waiting for connect ready for %@
legacy control channel connect ready {socket:%d}, socket error: %d (%s), device[%{public}@]
getsockopt failed %d / %s
socket error %d / %s
reset TCP for genericConnection %@ serviceConnection %@
reset TCP for genericConnection %@ using seq:%08x ack:%08x
%@: closing connection %@
closeSocket for %@ using BT datagram link - stop
%@: waiting for first openSocket
%@: incoming packet not enough bytes to parse %d
%@: incoming packet not enough bytes for encryption header %d
%@: encryption expects 0xe000 - packet is corrupt
%@: unable to find decryption context for ssrc:%08x data:[%@%s]
%@: connection %@ is already invalidated for ssrc:%08x - dropping this incoming packet
%@: dropping unknown proto[0x%01x] packet (encrypted) [%@]
%@: dropping unknown proto[0x%01x] packet [%@]
%@: incoming packet not enough bytes for largeCID %d
%@: failed to resolve connection for remoteCID 0x%04x
%@: found connection with mismatched (remoteCID 0x%04x != remoteCID 0x%04x)
%@: remoteContext is nil for remoteCID %d, decompression failed.
%@: IDSHC_DecompressSimple failed (%lu)
%@: incoming packet not enough bytes for UDP header %d
%@: incoming packet not enough bytes for TCP header %d
%@: checksum failed for connection %@
%@: Got TCP %dB (flags[%02X] [%s%s%s%s])) for %u <= %u (connection %@ (%p))
%@: dropping TCP (unencrypted) - expect to be encrypted
Control channel reestablishment request from [%@]
<= data[%@%s]
Control channel setDidReceiveReestablishment %@ after reestablishment request
%@: dropping TCP (unexpected - no first packet) %dB (flags[%02X] [%s%s%s%s])) for %u <= %u
Received the first data packet for %@
Got reset for connection %@
%@: dropping TCP (no connection) %dB (flags[%02X] [%s%s%s%s])) for %u <= %u
%@: dropping UDP (no connection) %dB for %u <= %u
%@: dropping UDP (unencrypted) %dB for %u <= %u
for device %@: binding to [%@ [%@] @ scopeid=%d] iRet=%d (errno=%d)
connecting to [%@ @ scope=%u] %d (%d)
%@: got control message: compression_req %@
%@: UTCMType_CompressionRequest has invalid header length (%lu)
%@: invalid message size for UTCMType_CompressionRequest (%u != %lu)
%@: UTCMType_CompressionRequest cannot decode remoteConnectionGUID
%@: UTCMType_CompressionRequest cannot decode localConnectionGUID
%@: recv compression_req (#:%u remoteCID:%u seq:%u ack:%u)
%@: UTCMType_CompressionRequest cannot decode account
%@: UTCMType_CompressionRequest cannot decode service
%@: UTCMType_CompressionRequest cannot decode name
%@: UTCMType_CompressionRequest found connection mismatch! (localGUID:%@ remoteGUID:%@)
%@: processCompressionRequest resolved connection ports[%@]
%@: sending control message: compression_resp %@
%@: got control message: compression_resp %@
%@: UTCMType_CompressionResponse has invalid header length (%lu)
%@: invalid message size for UTCMType_CompressionResponse (%u != %lu)
%@: UTCMType_CompressionResponse cannot decode remoteConnectionGUID
%@: UTCMType_CompressionResponse cannot decode localConnectionGUID
%@: recv compression_resp (#:%u)
%@: UTCMType_CompressionResponse cannot decode account
%@: UTCMType_CompressionResponse cannot decode service
%@: UTCMType_CompressionResponse cannot decode name
%@: UTCMType_CompressionResponse found connection mismatch! (localGUID:%@ remoteGUID:%@)
%@: processCompressionResponse resolved connection ports[%@]
%@: compression_req (%u) acknowledged!
startCompressionForConnection failed due to invalid parameters
startCompressionForConnection ports[%@]
%@: failed to get local CID
%@: resolved next available localCID 0x%04x
%@: sending control message: compression_req (%@)
%@: control message parsing..
%@: control message too small
%@: UTCMType_EncryptControlChannel missing data
%@: got control message: encrypt control channel flags %d ispairedlocally %d ispairedremotely %d (isencrypting: %d ispairedlocally %d ispairedremotely %d)
%@: UTCMType_SetupChannel insufficient header
%@: UTCMType_SetupChannelForDirectMsg processing request
%@: UTCMType_SetupChannel unexpected remoteGUID/account/service/name lengths (%u, %u, %u, %u)
%@: UTCMType_SetupChannel unexpected size (%u != %lu)
%@: UTCMType_SetupChannel cannot decode account
%@: UTCMType_SetupChannel cannot decode remoteConnectionGUID
%@: UTCMType_SetupChannel cannot decode service
%@: UTCMType_SetupChannel cannot decode name
%@: UTCMType_SetupChannelForDirectMsg flags: %#llx
%@: got control message: setup channel proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
%@: send setup channel message ports[%u:::%u] guid[%s]
%@: SetupEncryptedChannel insufficient header
%@: SetupEncryptedChannel unexpected remoteGUID/account/service/name/key lengths (%u, %u, %u, %u, %u)
%@: SetupEncryptedChannel unexpected size (%u != %lu)
%@: SetupEncryptedChannel cannot decode account
%@: SetupEncryptedChannel cannot decode remoteConnectionGUID
%@: SetupEncryptedChannel cannot decode service
%@: SetupEncryptedChannel cannot decode name
%@: got control message: setup encrypted channel ssrc:%08x startSeq:%04x proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
control message in reply to cleaned up connection
control message not for current connection - assume local is current for now (message is old) and send CloseChannel for remote attempt
control message repeated for current connection - assume local is current and remote reconciled
%@: nonmatching key material length (local:%u remote:%u)
%@: found connection [%@] - remote wins
%@: send setup encrypted channel message ports[%u:::%u] guid[%s] ssrc:%08x startSeq:%04x
%@: UTCMType_CloseChannel insufficient header
%@: UTCMType_CloseChannel unexpected size (%u != %lu)
%@: UTCMType_CloseChannel cannot decode remoteConnectionGUID
%@: UTCMType_CloseChannel cannot decode localConnectionGUID
%@: UTCMType_CloseChannel cannot decode account
%@: UTCMType_CloseChannel cannot decode service
%@: UTCMType_CloseChannel cannot decode name
%@: got control message: close channel localConnectionGUID[%@] remoteConnectionGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
RemoteConnectionGUID doesn't match, but localConnectionGUID does! Why?
%@: control message: hello control channel version is nil
%@: got control message: %@
Control channel checksum failed while receiving Hello. Resetting connection %@
%@: reset control channel didReceiveReestablishmentRequest NO
%@: UTCMType_DirectMsgInfo insufficient header
%@: got control message: direct message info
%@: got invalid control message %d
Service is nil, please provide a valid service name.
%@: UTunSocketProtocolOverride [%@] instead of specified [%@]
%@: found connection [%@] for ID [%@]
%@: early return: bypass utun with readHandler %p for connection [%@]
%@: bypass utun with readHandler %p for connection [%@]
%@: setting up new connection [%@] for ID [%@] deviceInfo[%@]
openSocket for %@ using BT datagram link - start
%@: cannot allocate new port for service %@ name %@
%@: closeSocketWithOptions called with options [%@] (connection %@)
%@: close, but avoid close channel control message
%@: UTunController unable to create new device - cannot continue
prepareDefaultPairedConnectionInfoWithDeviceUniqueID failed due to invalid linkManager
setShouldStartBTForDefaultPairedDevice: %d
_prepareConnectionInfoWithCBUUID: deviceConnectionInfo already exists %@
localdevicecontroller is paired [%@]
checking localdevicecontroller not paired
%@: openSocketWithOptions called with options [%@]
%@: openSocketWithOptions called for default paired device but no connectionInfo - aborting
%@: openSocketWithOptions unable to create new device - cannot continue
Update deviceUniqueID for controlChannel %@
Device %@/%@ is blacked out due to fairplay failures
Canceled a previously scheduled openSocket for %@. Rescheduling openSocket with new options %@.
Add a block for data channel setup on link connects.
%@: scheduled openSocketWithOptions attempt canceled - closeSocket called
%@: openSocketWithOptions attempt canceled - possibly obliteration
Device %@: utun cleaning up device connection for clientID: %@
utun cleaning up device connection info: %@, clientID: %@, connection for service %@
cleanupSocketsForClient: clientID is nil.
closeSocketWithOptions found deviceUniqueID mismatch (%@ != %@), ignore.
Canceled a previously scheduled openSocket for %@. Not scheduling closeSocket.
Add a block for data channel close on link connects.
Rescheduling suspend traffic check in %0.2lf seconds
Suspend traffic check: connections %lu =? suspended connections %lu
Scheduling a suspend traffic check in %0.2lf seconds
Extending suspend traffic check by %0.2lf seconds
%@: suspendSocketWithOptions called with options [%@] (connection %@)
%@: resumeSocketWithOptions called with options [%@] (connection %@)
can't release a reserved port: %u
removeDeviceConnectionInfoForDevice for %@
removeDeviceConnectionInfoForDevice found no match for %@
removeDeviceConnectionInfoForDevice for %@.
removeDeviceConnectionInfoForDevice found no match for %@.
IDSUTunController connectGlobalLinkForDevice preferredLocalInterface: %i
obliterateConnectionInfo called on a device that isnt the default paired device.  Ignoring...
obliterateConnectionInfo failed due to invalid linkManager
obliterateConnectionInfo: clear all connections for cbuuid %@
obliterateConnectionInfo: completionBlock
Clearing control channel
Couldn't find deviceConnection info
addPairedDevice failed due to invalid linkManager
addPairedDevice with cbuuid %@
connectPairedDevice failed due to invalid linkManager
connectPairedDevice with cbuuid %@
deletePairedDevice failed due to invalid linkManager
deletePairedDevice with cbuuid %@
copyLinkStatsDict failed due to invalid linkManager
%s: invalid arguments
%s: reporting service stats %@
getTransmittedPacketsForDevice: cannot find device %@
setPreferInfraWiFi failed due to invalid linkManager
setPreferInfraWiFi %@
setLinkPreferences failed due to invalid linkManager
Drop OTR negotiation message for %@, link is not connected.
Drop suspend OTR negotiation message for %@, link is not connected.
Cannot use invalid interface name [%s]
Cannot get interface state for %s on disconnect
Cannot set interface state to available for %s on disconnect
Set interface availability from %u to %u (0 is available) %s
Cannot open socket for ioctl for %s on disconnect
[throughput] Now cannot send to device %@
localdevicecontroller callback [%@]
ipsec path does not require control channel encryption
control channel already paired
Made reset[%@]
setsockopt on socket (%d) succeeded for traffic class (%d).
setsockopt on socket (%d) failed for traffic class (%d), (error=%d: %s).
sending control message: invalid info length
sending control message: direct msg info
sending control message: encrypt control channel (%d, %d) %@
Bag loaded notification! Is in backoff mode changed to %@
No block supplied, but is this the first query: %@
First query, but not allowed to start: %@ %@
Adding queued query for URIs: %@   fromURI: %@  service: %@   forRefresh: %@ preventNew: %@ first query: %@
Removing queued query for URIs: %@   fromURI: %@  service: %@ URIs set found in completion block map: %@
  *** failing query for URIs: %@    cert: %@   fromURI: %@   fromService: %@
%@ enqueuing work %@. Current queue size is %lu
%@ uh-oh! Our queue is too long %lu. Dropping id query for URIs %@ fromService %@ fromURI %@
Asked to _dequeuePendingQueryIfPossible but we have no queued queries
Tried to _dequeuePendingQueryIfPossible but we currently have %lu in-flight queries
Starting ID query for IDs: %@    from URI: %@   Service: %@
       Identity: %@
               Skipping URI: %@   => already have tokens   (From: %@   Service: %@)
******** Found sentinel alias as from URI: %@, failing *********
******** Found invalid from URI: %@, failing *********
******** Found sentinel alias in query set: %@, failing *********
******** Found malformed email in query set: %@, failing *********
******** Found bad URI type in query set: %@ (%ld), failing *********
******** URI %@ is an emergency number, not performing query ********
******** Not querying URI %@ service is over budget, not performing query ********
The requestedURIsToQuery have already been covered by previous queries! -- Returning {success: %@, checked: %@, requested: %@}
Service wants to force HTTP queries, setting importance level lower to ensure it doesnt use APS
*** We are currently forcing HTTP queries due to a default; remove default to re-enable QORP!
The Query Service Is %@
Overriding response code for query with: %d   remove %@: %@    to stop this
Response identities is not what we expected (%@ instead of NSDictionary) %@, error %@, resultCode %ld
Query completed with error %@. isNetworkError? %@ numNetworkFailures %d
Time is off, considering this an invalid result
Query time was: %f  (URIs: %@) (service: %@) (fromURI: %@)
 We are %@in backoff mode.
 We are %@in self session mode.
 **** We are in backoff mode! Using override for maxRetries %d
               Success: %@
    Found identity for: %lu/%lu
  Tried Force Cellular: %@
Looked up %@   success: %@   error: %@   will retry: %@   retries: %d  tried force cell: %@
Query Time: %f
            Query Time: %f
                  URIs: %@
    responseIdentities: %@
                 error: %@
           shouldRetry: %@   retries: %d   wasOffline: %@
            maxRetries: %d
         Timestamp off: %@
Query used old certificate, retrying
Retries exhausted, not retrying
Server has disabled bad query signature recovery
 Max Query Interval: %f
   Query Multiplier: %f
 Base Retry Interval: %f
      Retry Interval: %f
 **** We are in backoff mode! Overriding retry interval %f
 ** Will retry in: %f
 => Retrying query for URIs: %@
  All done query set for: %@   success: %@  allNetworkFailures: %@  entirelyOffline: %@
 **** Every failure was a network failure - forcing the bag to reload
  Sending off query for URIs: %@  from URI: %@   service: %@
 ** WiFi link quality is not good, requesting cellular preferred
 => Sending query for URIs: %@  from URI: %@   service: %@
Empty token for completion block
Empty completion block for token: %@
Empty token for removing completion block
We have suffered %ld network failures. Forcing the server bag to reload.
Missing IDS Group Session Key Value Delivery entitlement -- failing creation of IDSDXPCGroupSessionKeyValueDeliveryProvider collaborator {connection: %@}
Daemon sendMessage with parameters
*** Over budget, failing sendMessage on service: %@
Forcing encryption off for message on %@
Updating listener on %@ willSendToDestinations %@ skipped %@ regPropToDest %@
Send message with send parameters
Updating listener on %@ with responseCode %ld error %@  lastCall %@ - messageContext %@
Silently failing %@ messages due to watch switch
ServerTimeStamps before broadcast is  %f
ServerDate before broadcast is  %@
Found no valid broadcaster for outgoing message %@, cleaning up
account %@ sendMessage with data size: %d to: %@ identifier: %@ guid: %@
account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@
Exception caught forwarding to account: %@
Deleting sent outgoing message with guid %@ after exception
At least one destination is mako {destinationURI: %@, guid: %{public}@, destinations: %@}
sendMessage - fromID (%@) does not match the account (%@). We are forced to fail this message send.
Daemon sending message with priority %{public}@ guid: %{public}@ identifier %{public}@ to: %@   from: %@   aliases: %@  service type: %{public}@   QoS=0x%x
Proxy outgoing message, setting current paired device as local destination
sendMessage - sending to tinker IDSDefaultPairedDevice. Failing message... { guid: %@, service: %@ }
Sending message {defaultDestination: %@, messageType: %@, serviceIdentifier: %@}
Didn't find message store for data protection class %@ for %@
Data protection class %@ is unavailable for %@, failing outgoing message
Telling clients (via IDSResponsePersisted) not to replay this message if the daemon crashes because the %@ priority queue (dataProtectionClass: %@) is full
file persistence - failed to create unique file directory %@ error %@
No sandbox extension for received resource [%@]
file persistence - moved file %@ => %@
file persistence - failed to move file %@ => %@ params %@
This local Message is not for the current device, sending to the database to be taken care of later
A over C encryption has failed to encrypt with error %ld
Store outgoing message {guid: %@, canSendUrgent: %@, forceImmediateSend: %@, hasSpecialTrafficClass: %@}
Persisting message failed guid: %@  params: %@, failing with IDSResponseDataProtectionClassUnavailable
Sending a non-urgent sync message as we have a go ahead based on the server policy
account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@ - non-urgent message has been persisted.
Non-urgent message send %@ will be maintained by us from now on, alerting sender that it's been persisted and scheduled for sending.
Notifying client IDSResponsePersisted(%d) for %@ id %@ alt %@
(Messaging2) No account found for ID: %@
_sendLocalDeliveryMessagesForAccountUUID called with no accountUUID.
No space in local delivery queues for messages with priority %@ dataProtectionClass %@, bailing.
Performing query for account UUID %@ priority %@ class %@ Local Device ID %@ 
Got %lu query messages
account %@ _sendLocalDeliveryMessagesForAccountUUID with data size: %d to: %@ identifier: %@ guid: %@
account %@ _sendLocalDeliveryMessagesForAccountUUID: %@ to: %@ identifier: %@ guid: %@
Deleting sent outgoing non-urgent local message with guid %@? %@
Silently failing message with guid %@ due to it being a proxy 
Broadcasting failure of outgoing message %@ that never got processed through the database
Beginning cleanup of outgoing message database
Cleaned up %lu expired messages
IDS outgoing DB past threshold size %d MB, largest payload size account UUID: %@
Ending cleanup of outgoing message database
Runaway Client Detected, Purging messages for given client
Beginning cleanup of outgoing message database for quickswitched messages
Ending cleanup of outgoing message database for quickswitched messages
Beginning cleanup of outgoing message database for messages older than 2 days past enqueue date
Using Time Interval %f
Ending cleanup of %lu outgoing message database for older than 2 days past enqueue date
Registering for Checkpointing and Vacuum
Told to Check In for Checkpointing and Vacuum with activity %@ 
Got called to checkpoint vacuum DB run state with non null activity %@
*** Over budget, failing sendMessage on account: %@
sendServerMessage updated with responseCode %ld error %@  lastCall %@ - messageContext %@
Daemon Attempting To Send message from account %@ to destinations %@
Attempting to send to more than 1 destination, if this is not possible, this will fail further down the daemon
This service supports proxy delivery, which means a local account is allowed to send to a remote destination, allowing this message to send
This service supports sending messages to an inactive device, it is allowed to proceed
Looking at local destination %@
The paired device push token is %@
The paired device UUID is %@
Tried to send opportunistic data without entitlement {localObject: %@, uniqueID: %@}
Received data %@ to be cached and sent opportunistically on service %@
Tried to cancel opportunistic data without entitlement {localObject: %@, identifier: %@}
Cancel opportunistic send {identifier: %@, serviceName: %@}
%li Drop point detected.
Sender's IDSDaemon will drop message.
Daemon received signData request {requestID: %@, data: %@, algo: %ld, service: %@, options: %@}
Daemon dropping request %@ because it is missing required parameter
Daemon dropping request %@ because unentitled
Daemon dropping request %@ because it has a mismatched signing algorithm %ld and key type %ld
Finished signing request... broadcasting { request: %@, signedData: %@, error: %@ }
Daemon received verifySignedData request {requestID: %@, signedData: %@, data: %@, algo: %ld, service: %@, uri: %@, options: %@}
Daemon dropping request %@ because it is not a token URI
Daemon dropping request %@ because it has a mismatched verification algorithm %ld and key type %ld
Daemon dropping request %@ because tokenURI malformed
Daemon dropping request %@ because we are not registered
Finished signing verification request... broadcasting { request: %@, verified: %@, error: %@ }
Message has been dropped at point IDSMessageDropPointDaemon { messageID: %@, type: %@, accountID: %@, fromID: %@ }
(Messaging1) No account found for ID: %@
Client is attempting to send a message under first data protection lock, failing message
Result of can send message with account was no
Attempting to send to a local device using modern addressing, however we are not a local account, Swapping out destination for internet style addressing
Cloud destination could not be formed { destination: %@, token: %@, topic: %@, identities: %@ }
Switching to using local account since it has the alias corresponding to the fromID: %@
subServiceName %@ subServiceUUID %@
Couldn't find sub-account for service name %@
**** IDSDaemon: Urgent priority messaging requires entitlement for %@, DOWNGRADING MESSAGE PRIORITY TO DEFAULT - violator %@ ****
Client has specified a priority we do not recognize: %lu. Perpetrator: %@. Forcing default priority.
Added query update hash to certified delivery receipt {certifiedDeliveryReceipt: %p, hash: %@, fromURI: %@, service: %@}
sendCertifiedDeliveryReceipt - { certifiedDeliveryContext: %@ }
sendErrorMessage - finding Account
(Messaging) No account found for ID: %@
sendErrorMessage - got account %@
sendErrorMessage - using fromID %@ given aliases %@
account %@ sendErrorMessage: %@ to: %@ - guid %@
Sent outgoing error message with guid %@. Last call? %@
No certified delivery RTS found in payload with cdv { guid: %@, cdv: %ld }
start OTR test for %@
Completed forced OTR negotiation: token is %@, setupTime is %.6f, error==nil is %d
clean up existing QuickRelay connection for cloud messaging
start a new QuickRelay connection for cloud messaging
Account: %@ does not have alias URI: %@
Finished sending engram decryption failure {responseError: %@, token: %@}
** Failed sending engram decryption failure {responseError: %@, token: %@}
Alerted that local delivery controller now has space for %@ messages at class %@.
Alerted that local delivery controller now has space for %@ messages.
Resource availability changed, identifiers: %@ priorities %@
No space in local delivery queues for these messages.
AccountUUIDs with pending %@ messages %@
_processLocalMessagesWithAccountUUIDs with number of accountUUIDs %d priority %@ class %@
_processLocalMessagesWithAccountUUIDs accountUUIDs %@ priority %@ class %@
No pending non-urgent local messages to send, returning
Skipping invalid accountUUID %@ for account %@
Performing duet check for priority %@ for account %@ serviceIdentifier %@ duetIdentifiers %@ bypassDuet %@  logString: %@
Non-urgent internet send timer fired.
Scheduling a non-urgent internet send timer if needed. Existing timer fire date? %@
timeInterval for _nonUrgentInternetSendTimer as %f + %f = %f
Checking _hasNonUrgentInternetSendingBudget, fireDate is %@, %f
Last non-urgent internet send was too recent...waiting until next lock or non-urgent internet send to try again. Next fire date is %@.
Non-urgent internet send probability windows are not specified in the server bag - returning 1.0
Non-urgent internet send probability windows is not of the correct type! Returning probability = 1.0. %@
Non-urgent internet send probability window is not of the correct type! %@
We are currently in send window (%@, %@, %@). The time is currently %ld
Last non-urgent internet message attempt %ld is in this window - forcing probability to 0.0
Non-urgent internet send probability window is not fully defined: (%@, %@, %@)
Using non-urgent internet send probability %f for the current window.
Rolling die to attempt non-urgent internet send. Last check was %ld seconds ago. Probability = %f.
Probability is 0, cannot send.
Probability is >= 1, can send.
Rolled the die - can send? %@
_canSendNonUrgentInternetMessageForTopic 
Push is not connected - skipping send attempt.
We can't send further non-urgent internet messages in this window, skipping.
Server Bag policy for sending message immediately for topic - %@ does not exist. This message will proceed with default behavior
_processOutgoingNonUrgentInternetMessages
Lack budget to perform non-urgent internet send, skipping.
Processing stored %lu non-urgent internet outgoing messages
Not combining encrypted message - %@
Reduced outgoing non-urgent internet messages from %lu to %lu (omitted %lu).
sendNonUrgentInternetMessage - finding Account
Deleting non-urgent internet outgoing message with guid %@
Deleting non-urgent internet outgoing combinedMessage with guid %@
No account found for ID: %@ - can't send %@
sendNonUrgentInternetMessage - got account %@
Sending individual non-urgent internet message %@
Deleting sent non-urgent internet outgoing sole message with guid %@? %@. Error? %@ response code %ld
account %@ sendNonUrgentInternetMessage: bulked: %lu to: %@ identifier: %@ guid: %@
Deleting sent non-urgent internet message with guid %@? %@. Error? %@ response code %ld
Enqueueing block in multiqueue {key: %@, identifier: %@, queueState: %@}
Enqueueing block in multiqueue {key: %@, identifier: %@}
At checkpoint %ld for guid %@. Wants checkpointing %@ disabled by bag key %@
Incoming message for topic: %@  but no service found
No account found for topic: %@   toURI: %@
Noting peer token {shouldNoteToken: %@, token: %@, service: %@, fromIdentifier: %@}
Decrypting message %@ of encryption type "%@"
EC message came in, processing metric {ECSuccess: %@, legacySuccess: %@, command: %@}
Blowing away local peer cache for peer tokens for URI: %@
Retrying decryption for message %@ in %f seconds
** Had decryption error: %d { guid: %@, error: %@ }
Finished sending decryption error: %d, %@  to token: %@
** Failed sending decryption error: %d, %@ to token: %@
Incoming message attachment data: %p ID: %@  from: %@ fromMe: %@
EC overflow message came in, processing metric {ECSuccess: %@, legacySuccess: %@, command: %@}
Finished sending decryption error: %d %@ to token: %@
** Failed sending decryption error: %d %@ to token: %@
messageDictionary: %@
 => Settled on signature: %@
 => Missing fields from dictionary, returning error
Finished sending download (bad field) error: %d %@ to token: %@
** Failed sending download (bad field) error: %d %@ to token: %@
Attachment data download updated to %lld of %lld (%lld bps)
retrieved message data for incoming attachent message
Failed to grab message data for message ID: %@ from: %@ error %@
INCOMING-LOCAL_DELIVERY:%@ SERVICE:%@ didWakeHint:%d
Broadcast: Processing incoming local message storage guid %@ real message guid %@ topic %@ command %@ didWakeHint %d
%s: could not find IDSServiceProperties for topic %@
Found sender correlation identifier { guid: %@, senderCorrelationIdentifier: %@, fromID: %@, token: %@ }
The Account Was %@
The message that will be broadcast is %@
Proxy message original parameters {messageUUID: %@, destinations: %@, targettingAccount: %@}
Will Send Block After Send
Message Send After Transposing
Incoming proxy nice message for broadcast
Received local proxy message %@ is a duplicate. Ignoring.
PROXY BROADCASTING BLOCK %@ Guid %@ Topic %@ ToID %@ fromID %@
%s: Unknown incoming local message type received, %lu
Broadcast: incoming local message %@ requires client ack, broadcast ID %lld
Processing stored incoming local message %@ topic %@
Using fromID for this message as %@
We failed to decrypt class A data on a class C service even when we had keys, Please collect logs and file a bug: Original Command: %@ From Device: %@ Service: %@ GUID: %@
Class A key not avaialble for message %@ on topic %@
Processing stored incoming remote messages
%s: GUIDs count %lu
Processing %lu stored incoming remote messages {shouldRepeat %@}
 => Deferring message, service wants messages after first unlock only
Finished processing stored incoming messages
Processing stored %lu outgoing messages due to unpairing. Priority %@
Found stored outgoing message from account with guid %@ which no longer exists or is not local type.
Finished processing stored outgoing messages due to unpairing. Priority %@
Processing stored outgoing urgent messages LocalOnly: %@
Processing stored %lu outgoing urgent priority messages
Found stored outgoing message from account with guid %@ which no longer exists.
account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for with data size: %d to: %@ identifier: %@ guid: %@
account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for message: %@ to: %@ identifier: %@ guid: %@
Deleting sent outgoing urgent message with guid %@? %@
Old outgoing message %@ has no relevant account, cleaning up.
Finished processing stored outgoing messages
Handling Space Becoming available for urgent local messages
Processing Error
Noted decryption failure for engram group {group: %@, noteError: %@}
Broadcasting Group Share Message brodcast block
No session ID provided in the message for command code %@, discarding message...
Couldn't find session with ID %@ for command code %@, discarding message...
Received session invitation fromID %@, processing message %@
Received accept response fromID %@, processing message %@
Received decline response fromID %@, processing message %@
Received cancel response fromID %@, processing message %@
Received session message fromID %@, processing message %@
Received session end message fromID %@, processing message %@
Received session reinitiate message fromID %@, processing message %@
Received group session message fromID %@, processing message %@
We received an IDS Message that had an original command key, however its command was not FTCommandIDAttachmentMessage
Checking if this message corresponds to a selected alias {strippedToIdentifier: %@, accountUniqueID: %@, aliasStrings: %@, aliases: %@}
Incoming remote message
_processIncomingRemoteMessage: %@ fromID: %@ forTopic: %@ storedGUID %@
DROPPING MADRID MESSAGE: %@ fromID: %@ forTopic: %@ storedGUID %@
Found no service for topic! %@
Message %@ is coming from an account that is not permited to send to this device. Sender Was: %@
Ignoring filtered list for own aliases. {Alias: %@; Account: %@;}
Told to filter message %@ from %@
Dropping message %@ from %@ because it is not on the cross-account allowlist and is coming from %@
Message specifies an expiration date %@ %@
Message %@ for topic %@ has expired! Dropping.
Received remote message %@ is a duplicate. Ignoring.
INCOMING-APS_DELIVERY:%@ SERVICE:%@
Received registration update message on tunnel service, ignoring...
Processing received message for which we couldn't find a relevant account, cleaning it up. { messageUUID: %@, storedGuid: %@, toIdentifier: %@, message: %@ }
Sent certified delivery receipt for filtered message { success: %ld, context: %@ }
Broadcasting the receipt of message %@  (%@)  (topic: %@)
Persisting failed for message %@  (%@)  (topic: %@)
Performing validity check for message %@ sent to family service.
IDS Family member count is zero, trying to fetch family again. Will retry message after fetch completes. Sending incoming family message to storage.
IDS Family member count is zero, but out of fetches to fetch family again, this message %@ will likely fail.
Family Message %@ is coming from an account that is not in the family. Sender was: %@
Message %@ sent to family service passed validity requirements.
Device is NOT in our account registrations, It should be, Can we force a GDR?
Issuing forced GDR & sending message to storage
No forced GDR is possible
Unknown devices, but GDR attempt exchasuted
Message %@ is coming from an account that is firewalled from talking to this device. Sender Was: %@
Firewalled message %@ is coming for session.
Ending session for service %@ with groupID %@
Finished handling decryption {GUID: %@, URI: %@, SenderCorrelationIdentifier: %@, topLevelPayload: %@}
Dropping message! {guid: %{private}@, processError: %@, decryptionError %@
Overflow attachment (with original command %@) -- checking for original payload? %@
Pulled out original payload %@ or bulked payload %@ from attachment message, using original command.
Found rawBulkedData
For command %@ we have unpacked dictionaryPayload? %@ protobufPayload? %@ dataPayload? %@ bulkedPayloads? %@
Hit exception %@ trying to deserialize payloads
Broadcast will include message context %@
Found Topic %@  with all accounts %@ and Going to use account %@
Forwarding Message To Local Device to Process and Broadcast
About To Send Message Over Local Link
PROXY: Will Send Block
PROXY: Completion Block %ld, %@, %@
We received a message on a service that is local only, we have kicked off a forwarding of the message if necessary, we can delete this message from our database
Broadcasting HomeKit Message top
Broadcasting HomeKit Message brodcast block
Broadcasting HomeKit Report Message top
Broadcasting HomeKit Report Message brodcast block
Broadcasting Incoming Invitation Message top
Broadcasting Incoming Invitation Message block
Broadcasting Incoming Invitation Update Message top
Broadcasting Incoming Invitation Update Message block
Broadcasting GroupShare Message top
Received Sent Ahead Group {groupID: %{public}@}
Cached Sent Ahead Group {error: %{public}@, group: %{private}@}
Received IDS remote error (120) for client that can not hanlde it %@ %@
Received IDS message payload is empty, not delivering %@ %@
Broadcasting for received message with guid %{public}@   broadcast topic: %{public}@  (topic: %{public}@)
No broadcaster found - deleting incoming message %@ on topic %@ with no listeners
Not broadcasting
No broadcast desired for command %@ topic %@ -- deleting message with guid %@
Processing bulked payload ...
Not broadcasting command
Shouldn't broadcast for this command %@ for received message %@ with guid %@
No Message Error, Processing Imediatly
  => Adding a delay of %f seconds to iCloud Pairing Messages
  => Processing immediately
Under first data protection lock. Sending message to storage. { guid: %@ }
Processing message for stored guid %@
Under first data protection lock and message already stored -- ignoring {GUID: %@, storedGuid: %@}
No broadcaster found - dropping update for incoming pending message %@ on topic %@ with no listeners
_decryptEngramMessage, group task {context: %@, error: %@}
_decryptEngramMessage, fetched group {group: %@, fetchError: %@
Told to decrypt: %@
decryptedData: %@ error: %@ decryptionError: %@
decryptedDict: %@
_decryptEngramMessage, no Group, bailing...
Received an IDS Payload for a Resource Tranfer over the Internet, looking at it
Payload is %@
DictIS %@
File Has Been Downloaded to %@
Failed to issue sandbox extension for file [%@]
Storing under first lock
Message is from server storage %@
Storing item from server storage %@  (%@)
Persisting failed for message %@  (%@)
Storage timer fired, guids we need to process: %@
We're under first data protection lock. Holding messages and not sending to clients.
Scheduling a storage invalidation timer in: %f
Noting item from storage (%@)
Noting last item from storage (%@)
Hinting service to check transport log {service: %@, reason: connected}
Failed to hint service to check transport log {service: %@, reason: connected}
IDSPushHandler signaled isConnected %d
handler %@ didReceiveMessage: %@ fromID: %@ forTopic: %@ context: %p
Given message list from server. Dissecting into %ld individual messages
Submessage command is not recognized -- dropping. {subMessageCommand: %@, subMessage: %@}
Encryption failed with error %@
Incoming message %p on service %@ command %@
Received a message over Bonjour Delivery that we can't process! -- dropping {service: %{public}@, command: %{public}@, deviceID: %{private}@, message: %{private}@}
%s: invalid topic for saving incoming message, ignoring!
%s: invalid parameters for saving incoming message, ignoring!
Incoming A over C message but keys are not available, sending to storage
Stored incoming message under first lock for service %@ with guid %@. Success: %d
Incoming protobuf %p on service %@ command %@
Received local protobuf %@ is a duplicate. Ignoring.
Failed to decrypt AoverC message -- dropping {topic: %@, error: %@}
Incoming data %p on service %@ command %@
Received local data %@ is a duplicate. Ignoring.
Received local message %@ is a duplicate. Ignoring.
Incoming app level ack on service %@
Received cancel request for message %@ from localObject %p
Sending not started update to listener on %@ with responseCode %ld error %@ - 0/0 bytes
Sending update to listener on %@ with responseCode %ld error %@ - %@/%@ bytes
Broadcasting update to listener on %@ with responseCode %ld error %@ %@/%@ bytes
Cannot ack message locally without proper priority value (%d)
Please file a radar! Could not ack message with sequence number %u for peer %@ priority %ld
Received acknowledgement for outgoing message %@ alternateCallbackID %@ from localObject %p
Broadcast: Received acknowledgement for message stored as %{public}@ real guid %{public}@ from localObject %p processName %{public}@
Broadcast: message %@ got client ack, sending IDS ack to sender, broadcast ID %lld, sequence number %u 
Message on %@ with storage guid %@ experienced broadcast time %@
Received acknowledgement for message %@ from localObject %p
Request to send app-level ack for message %@ to %@ from localObject %p
Sent app-level ack with guid %@. Last call? %@
The delivery path for message with guid %@ is %@, service: %@
Only 1 account exists on this service, We will need to proxy this message to our local device for broadcast
Not Proxying this message %@ payload is currently a typing indicator
Only 1 account exists on this service, We will need to proxy this and include the default device as a destination for the message as well
Changing Class-A to AOverC for service %@
file persistence - destination file exists %@
file persistence - failed to move and failed to copy file %@ => %@ (error %@)
file persistence - failed to remove original file %@ (error %@)
Not reflecting back initial region query success, registration is disabled: %@
Not reflecting back region validation success, registration is disabled: %@
Notifying of region validation success for registration: %@    region: %@   phone number: %@   context: %@  verified: %@
Not reflecting back started authenticating, registration is disabled: %@
Apple ID registration center notify authentication failure
Not reflecting back authentication failure, registration is disabled: %@
Apple ID registration center notify authentication success
Not reflecting back authentication success, registration is disabled: %@
  Received default invitation context with result: %d  error: %@  result dictionary: %@
  Received region validation response with result: %d  error: %@
Apple ID registration center note successful token
Noting successful token: %p   for profile ID: %@   self handle: %@  wasFetched: %@  registration: %@
About to insert bogus profile ID: %@  ignoring
Empty registration info supplied for password fetch, bailing
Starting renew for %@
Received auth token response for reg: %@
 We have a token, great!
 ** user cancelled, bailing
 ** empty token, bailing
Starting token fetch for %@
Token fetcher finished for registration info: %@
 We have a token, just sending auth
 ** Username/DSID is empty, but we have a token: %@
 ** No token found, requesting it!
Apple ID registration center authentication request
No email present for registration: %@
Not adding this to the queue, we're already trying to authenticate: %@
Fetching password for: %@  (Environment: %@)
Sending region validation request: %@ number: %@ (%@)
Sending initial context request for: %@
Requesting initial context for: %@
Requesting region validation for: %@  number: %@, %@
Kicking off authentication request for: %@
Trying to create temporary user credential with nil argument. Returning nil. { cert: %@ }
Loaded paired device state from keychain but could not decode dictionary.
Paired device properties can't be loaded because the keychain is upgrading.
Didn't find device properties to load
Paired device properties can't be loaded because of a keychain error %d.
%s: Failed to save paired devices to keychain, err: %d
Removing the paired device repository's keychain entry.
%s: Failed to remove paired devices entry from keychain, err: %d
Clearing KT Registration Data.
Checking for unregisterd KT Data.
Found unregistered KT Data for keyIndex. { keyIndex: %@, ktRegistrationData: %@ }
Did not find any unregistered KT Data.
Requesting copy of KTRegistrationData for keyIndex { keyIndex: %u, isRegistered: %@ }
No config for key index { keyIndex: %u, serviceIndexToKTRegConfigs:%@ }
No registered KT Data for key index. { keyIndex: %u, config: %@ }
No unregistered KT Data for key index. { keyIndex: %u, config: %@ }
Trying to load KT Registration Data from keychain.
No unregistered KT data stored in keychain for keyIndex. { keyIndex: %u, error: %@ }
No registered KT data stored in keychain for keyIndex. { keyIndex: %u, error: %@ }
No KT data found in keychain, we need to generate a new one for keyIndex. { keyIndex: %u }
Successfully deserialized unregistered KT Data from keychain for keyIndex, saving to config. { keyIndex: %u }
Failed to deserialize unregisterd KT Data from keychain for keyIndex, need to generate new KT Data. { keyIndex: %u, error: %@ }
Successfully deserialized registered KT Data from keychain for keyIndex, saving to config. { keyIndex: %u }
Failed to deserialize registerd KT Data from keychain for keyIndex, need to generate new KT Data. { keyIndex: %u, error: %@ }
Saving registered KT Data for service key { keyIndex: %u, registeredKTData: %@ }
Removing registered KT Data from keychain because deleteIfNull == YES and no registered config present, {keyIndex: %u}
Saving unregistered KT Data for service key { keyIndex: %u, unregisteredKTData: %@ }
Removing unregistered KT Data from keychain because deleteIfNull == YES and no registered config present, {keyIndex: %u}
KT registration manager noting registration of data { keyIndex: %u, ktDataForRegistration: %@, ktPublicAccountKey: %@, ktDataSignature: %@ }
Failed to get config for registered key index { keyIndex: %u }
Failed to get unregistered KT Data for key index { keyIndex: %u }
Expected KT Data for registration matches what was registered for keyIndex. { keyIndex: %u, expectedKTData: %@ }
expected kt public account key for registrations matches what we registered for keyIndex. { keyIndex: %u, expectedKTPublicAccountKey: %@ }
Expected KT Data Signature for registrations matches what we registered for keyIndex. { keyIndex: %u, expectedKTDataSignature: %@ }
Completed registration of previously unregistered KT Data for key index { keyIndex: %u, ktDataForRegistration: %@, ktPublicAccountKey: %@, ktDataSignature: %@ }
Completed registration does not match unregistered KT Data for key index { keyIndex: %u, expectedKTDataForRegistration: %@, expectedKTPublicAccountKey: %@, expectedKTDataSignature: %@, regKTDataForRegistration: %@, regKTPublicAccountKey: %@, regKTDataSignature: %@ }
Checking if we have unregistered KT Data that is ready to register.
Found key index has unregistered KT Data { keyIndex: %u, unregisteredKTData: %@ }
Unregistered KT Data has necessary fields to register.
Unregistered KT Data does not yet have necessary fields to register.
Creating request for KT registration data.
Adding application key %u to kt-loggable-data for service: %@
Failed to get representation of application key { keyType: %u, error: %@, service: %@ }
Failed to get service application key { keyType: %u, service: %@ }
No KT Application found for key index or registration data is null. { keyIndex: %u, ktRegistrationData: %@ }
Top level service already has relevant KT Data setup. { service: %@ }
No signature requests created.
Handling signature response from transparency.
No response from transparency for signature request. { error: %@, underlyingError: %@ }
No signatures in transparency response, nothing to do. { error: %@, underlyingError: %@ }
No config for key index and KT Application. { keyIndex: %u, KT Application: %@, transparencyResponse: %@, error: %@, underlyingError: %@ }
No unregistered KT data for keyIndex. { keyIndex: %u, ktApplication: %@, error: %@, underlyingError: %@ }
No signature data from KT for KT Application. { keyIndex: %u, ktApplication: %@, error: %@, underlyingError: %@ }
KT data requiring signature not matching between transparency and IDS. { IDSKTData: %@, TransparencyKTData: %@, keyIndex: %u, error: %@, underlyingError: %@ }
No signature or public key provided from transparency for key index. { keyIndex: %u, error: %@, underlyingError: %@ }
KT data for registration and public account key are unchanged from what is registered. No update needed for key index. { keyIndex: %u }
Persisting changes.
Updated unregistered data. Need to upload to KVS.
Updated unregistered data. Need to reregister.
No config found for key index.{ keyIndex: %u }
Unregistered KT Data not yet uploaded to KVS for keyIndex. { keyIndex: %u }
Registered KT Data not yet uploaded to KVS for keyIndex. { keyIndex: %u }
No new trusted devices to insert into KVS.
Asked to create KT Registration Status provider.
No KTApplication found for keyIndex. { keyIndex: %u }
Creating KT Trusted Device for KVS upload. { isRegistered: %@ }
No config found for key index. { keyIndex: %u }
No kt registration data found for key index. { config: %@, keyIndex: %u, isRegistered: %@ }
Unable to create KTTrustedDevice, no services have necessary data.
No config for keyIndex. { keyIndex: %u }
Not yet implemented.
Did remove auth cert -- reidentifying {user: %@}
Mid synchronize -- ignoring
Marshaller is waiting on accounts to load, the account controller isn't ready yet
Waiting on migration -- deferring synchronize
Performing migration if needed
Migration completed, performing synchronize
Synchronizing users to accounts {users: %@}
Removing account for restricted service {uniqueIdentifier: %@, account: %@}
Removing unwanted account for service {account: %@}
Removing unwanted temporary phone account for service {account: %@, isHSA2: %@, allowHomeNumber: %@}
Removing unwanted account for service, user is disabled {account: %@, matchingUser: %@, userProperties: %@}
Migrating account to use users {uniqueIdentifier: %@, account: %@}
Removing account without matching user {uniqueIdentifier: %@, account: %@}
Detected account has mismatching user. Marking for removal {uniqueIdentifier: %@, user: %@, account: %@}
Removing extra account for user without matching user {uniqueIdentifier: %@, account: %@}
Logging current and disabled account info with guid %@
Not creating account for temporary user {isHSA2: %@, allowHomeNumber: %@}
Creating missing accounts for user {uniqueIdentifier: %@, service: %@}
Disabling account {uniqueIdentifier: %@, account: %@}
Can't setup phone number accounts { registrationSupported: %@, supportsSMSIdentification: %@ }
  Read %@: %@  (Class: %@)
Migrating this SMS auth token: %@  mainID: %@
******** We're missing an SMS auth token, this will SMS migration register ******** 
Using existing user mainID: %@   token: %@
Loaded auth cert: %@    ID: %@
Migrating auth cert for IDS User ID: %@
Not migrating cert for user ID, we already have one: %@
keychainDictionary: nil %@
  ** Fixed Self ID to be: %@
  ** Fixed Profile ID to be: %@
Successfully fetched token for account (%@:%@:%@): %@  (Environment: %@)
Successfully %@ token for account (%@:%@): %@  (Environment: %@  New Token: %@)
Voided auth token for account (%@)
Successfully voided password for account (%@:%@): %@  (Environment: %@)
 ... finding emails to register for DS registration based account: %@:%@
 => Added self handle: %@ to URI set
 => **** Missing self handle, not adding ****: %@
 ... finding emails to register for auto register based account: %@:%@
 => Auto adding confirmed emails: %@ to URI set
 => Auto adding vetted emails: %@ to URI set
 => No confirmed emails...
 => Removing DS Handle
 ... finding emails to register for manual handle selection account: %@:%@
 => Added confirmed emails: %@ to URI set
 => Added candidate emails: %@ to URI set
   Device numbers: %@, error: %@
 => Found sentinel alias, stripping
Skipping device number: %@  for service: %@
 => Final emails to register: %@    for service: %@  account: %@
Updating user with correct phoneNumber {user: %@, updatedUser: %@, self: %p}
Can't find AWD metrics for %@
Final Report - %@
There is no metric dictionary for %@, %@
Loading services...
Skipping load of empty service dictionary
Not loading service, invalid dictionary %@ missing identifier
Not loading service %@
... Done!
Loaded service: %@, registering successfully
Skipping unload of service %@
Sub-services - Couldn't find service %@ to load subService %@ with
   %@
Did not find service with serviceName %@, can't update sub-services
Did not find a paired device uniqueID matching %@, can't update sub-services
Current sub-services for device %@: %@
New set of subservices are the same, ignoring update
Updated sub-services map %@
Told to remove %@ but another device still needs it
Posting notification with userInfo %@
Unloading   %@
Loaded sub-services:
Top level map %@
Loading sub-services...
Loaded preferences from disk: %@
Loaded sub services from disk: %@
Stale entries: %@
Cleaned up map: %@
Fixed empty map %@
Combined services %@
No super service provided when updating service list, ignoring update...
Loaded a paired device from storage with an empty/missing CBUUID: %@
Cannot retrieve a paired device with an empty CBUUID.
Cannot retrieve a paired device with CBUUID: %@
Adding a paired device to the repository with CBUUID: %@
Invalid attempt to add the same paired device into a repository. CBUUID: %@
Putting paired device %@
Cannot store a paired device with an empty CBUUID
Removing a paired device from the repository with CBUUID: %@
Cannot remove a paired device with an empty CBUUID.
Attempting to remove an unrecognized paired device, whose CBUUID is %@ {pairedDevices: %{private}@}
Activating paired device with CBUUID: %@
Deactivating paired devices
%s Deactivating paired device with CBUUID: %@
%s Cannot activate an unknown paired device. CBUUID: %@
Purging the secured encryption keys for all paired devices.
Updating a paired device in the repository with CBUUID: %@ with deviceInfoPayload: %@
Cannot apply a device info payload to a paired device with an empty CBUUID.
Could not update the paired device with payload. No device found with CBUUID: %@
Updating a paired device supportIPsec property {cbuuid: %{private}@, supportIPsec: %{public}@}
Cannot update the capability flags of a paired device with an empty CBUUID.
No paired device found with provided CBUUID -- failed to update supportIPsec {cbuuid: %{private}@}
Updated paired device support IPsec {supportIPsec.old: %@, supportIPsec.new: %@}
Updating a paired device with CBUUID: %@ to (deviceUniqueID: %@) (buildVersion: %@) (productVersion: %@) (productName: %@) (pairingProtocolVersion: %u) (minCompatibilityVersion: %u) (maxCompatibilityVersion: %u) (serviceMinCompatibilityVersion: %u)
Cannot update the private data of a paired device with an empty CBUUID.
Could not update the paired device's build version, product version, etc. No device found with CBUUID: %@
Updated paired device build version from: %@ to: %@
Updated paired device product version from: %@ to: %@
Updated paired device product name from: %@ to: %@
Updated paired device uniqueID from: %@ to: %@
Updated paired device pairing protocol from: %u to: %u
Updated paired device min compatibility version from: %u to: %u
Updated paired device max compatibility version from: %u to: %u
Updated paired device service min compatibility version from: %u to: %u
Updating a paired device pairingType property {cbuuid: %{private}@, pairingType: %{public}ld}
No paired device found with provided CBUUID -- failed to update isTinker {cbuuid: %{private}@}
Updated paired device support pairingType {pairingType.old: %ld, pairingType.new: %ld}
Updating a paired device uris, loginID and pushToken properties {cbuuid: %{private}@, uris: %{public}@, pushToken: %{public}@}
No paired device found with provided CBUUID -- failed to update uris and pushToken {cbuuid: %{private}@}
Updated paired device support uris and pushToken {uris.old: %@, uris.new: %@, pushToken.old: %@, pushToken.new: %@}
SharedMessage store %@
Beginning migration.  The IDS db is currently at v%d, upgrading to v%d.
Reindexing the DB worked.
Database vacuum success
Final integrity check success
Post-reindex integrity check success
Initial integrity check success
Adding fields to support iMessage on IDS
Adding field to support sending iMessage from aliases
Adding support for high priority messages
Flushing stale messages to enable database
Flushing potentially old stale messages
Updating outgoing_message to have all needed fields
Updating outgoing_message to have is_sent column
Updating outgoing_message to have new send types and options.
Flushing stale outgoing_messages.
Adding expiration date support
Adding app level ack
Adding compress option
Adding nonWaking, fireAndForget, queueOneIdentifier option
Outgoing message priority changes
AlternateGUID support
isLocal added to incoming message record
Duet columns, payload size added to outgoing message record
Adding indexes on message guid
Add enforce_remote_timeout column to outgoing_message
Create table outgoing_messages_to_delete
Adding indexes on account_guid, priority and is_send
Add main_account_guid column to outgoing_message
Add pending_delete column to outgoing_message
Add message_type column to outgoing_message
Setting a reasonable timeout on messages which are missing them
Add skip_self column to outgoing_message
Add nonCloudWaking column to outgoing_message
Add wants progress column to outgoing_message
Add ignoreMaxRetryCount column to outgoing_message
Add wantsCertifiedDelivery column to outgoing_message
Add originalTimestamp column to outgoing_message
Adding message_identifier column to incoming_message
Dropping old bypass_duet messages
Add push_priority column to outgoing_message
Add send_mode column to outgoing_message
Add wants_firewall_donation column to outgoing_message
The %@ column already exists on %@, skipping this step.
%p: Returned the random publicKeyData %@ for the simulator
%p: This IDSRealTimeEncryptionIdentity is expired. (now: %@, expirationDate: %@)
(Daemon) connectPairedDevice (cbuuid: %@)
(Daemon) setupCompletedForPairedDevice (cbuuid: %@)
(Daemon) getPairingDevices
(Daemon) getPairingDevices yielded CBUUIDs: %@
(Daemon) getPairedDevices
(Daemon) getPairedDevices yielded CBUUIDs: %@
(Daemon) deletePairedDeviceWithID (cbuuid: %@)
(Daemon) stopLocalPairingForDeviceWithID {cbuuid: %{private}@}
(Daemon) unpairDevice (cbuuid: %@)
(Daemon) forgetDevice (cbuuid: %@)
(Daemon) switchActivePairedDevice (cbuuid: %@)
(Daemon) switchToNoActivePairedDevice
(Daemon) redeliverMessagesForDevice (device ID: %@)
(Daemon) setAllowedTrafficClassifiersForDevice (device ID: %@)   (classifiers: %@)
(Daemon) dropAllMessagesWithoutAnyAllowedClassifierForDevice (device ID: %@)
(Daemon) _addPairedDevice:BTOutOfBandKey:completion: (cbuuid: %{private}@, btOutOfBandKey.hash: %{private}@, shouldPairDirectlyOverIPsec: %{public}@, pairingType: %{public}ld, bluetoothMACAddress.hash: %{private}@)
(Daemon) _addPairedDevice: PairDirectlyOverIPsec: %@
(Daemon) Told to add a paired device %@
(Daemon) Reset communication with currently active paired device before adding a new paired device: %@
(Daemon) Told to add a paired device but there is no need to reset communication with the currently active paired device. {activeCBUUID: %{private}@, cbuuidString: %{private}@}
Performing query for forced verification.
Completed query for forced verification. { success: %@, errorDictionary: %@ }
IDS Firewall System Starting Up
  => Setting cache size
  => Invalidating caches
Is firewall enabled %@
Should firewall drop for all categories %@
Entries for category %u: %@
Closing database.
Scheduling Cleanup Timer
Scheduling timer called
Removing entries older than %@
%s: table empty
UI32Table_Set: cannot allocate memory for %@
UI32Table_Set: table resize from %d to %d
UI32Table_Set: replacing object %@ with %@
UI32Table_Set: key %08X at %d (total elements: %d) store object %@
UI32Table_Remove: did not find %08X (from %d entries)
UI32Table_Remove: removing %@ @%d (from %d entries)
NSSTable_Set: cannot allocate memory for %@
NSSTable_Set: table resize from %d to %d
NSSTable_Set: replacing object %@ with %@
NSSTable_Set: key %8@ at %d (total elements: %d) store object %@
NSSTable_Remove: did not find %@ (from %d entries)
NSSTable_Remove: removing %@ @%d (from %d entries)
Fetched phone auth certificate from phone user registry {userAuthCerts: %@}
Failed to generate identity {error: %{public}@, identifier: %{public}@}
Generated identity {identifier: %{public}@, identity: %{private}@}
Attempted to save nil identity -- bail {identifier: %{public}@}
Failed to generate data from identity -- Removing refence from keychain {error: %{public}@, identifier: %{public}@, identity: %{private}@}
Generated data from identity {identifier: %{public}@, identity: %{private}@, data: %{private}@}
Failed to save to keychain -- Failed to save identity {error: %{public}@, identifier: %{public}@, identity: %{private}@, data: %{private}@}
Purged identity {identifier: %{public}@, identity: %{private}@}
Failed to purge identity from keychain -- leaking identity but removing reference to it {error: %{public}@, identifier: %{public}@, identity: %{private}@}
Removed identity reference from keychain {identifier: %{public}@, identity: %{private}@}
Failed to remove identity from keychain {error: %{public}@, identifier: %{public}@, identity: %{private}@}
Generating identity {index: %u}
Failed to generate application identity -- returning container with nil ngm identity {error: %{public}@, index: %u, keyIndex: %u}
Generating identity {identifier: %ld, dataProtectionClass: %ld, existingLegacyIdentity: %{private}@}
Failed to generate ngmIdentity -- returning container with nil ngm identity {error: %{public}@, identifier: %ld, dataProtectionClass: %ld}
Failed to generate legacyIdentity -- returning nil container {error: %{public}@, identifier: %ld, dataProtectionClass: %ld}
Failed to generate fullDeviceContainer -- returning nil {error: %{public}@, identifier: %ld, dataProtectionClass: %ld}
Failed to identity to keychain {error: %{public}@, identifier: %ld, dataProtectionClas: %ld, storageIdentifier: %{public}@, dataToSave: %{private}@, container: %{private}@}
Failed to generate data from container -- not saving {error: %{public}@, identifier: %ld, dataProtectionClass: %ld, container: %{private}@}
Loaded identity on first try -- done {index: %u, firstTry: %{private}@}
Failed to load identity on first try -- retrying {error: %{public}@, index: %u}
Loaded identity on second try -- done {index: %u, secondTry: %{private}@}
Failed to load identity on second try -- falling back to legacy {error: %{public}@, identifier: %u}
Loaded identity container on first try -- done {identifier: %ld, firstTry: %{private}@}
Failed to load identity container on first try -- retrying {error: %{public}@, identifier: %ld}
Loaded identity container on second try -- done {identifier: %ld, secondTry: %{private}@}
Failed to load identity container on second try -- falling back to legacy {error: %{public}@, identifier: %ld}
Failed to migrate container with legacyIdentity {error: %{public}@, identifier: %ld, legacyIdentifier: %ld, legacyIdentity: %{private}@
Loaded legacy identity -- returning container with nil ngmIdentity {identifier: %ld, legacyIdentifier: %ld, container: %{private}@
Failed to create container with legacyIdentity -- returning nil {error: %{public}@, identifier: %ld, legacyIdentifier: %ld, legacyIdentity: %{private}@
Failed to remove legacy identity -- purging {removeError: %{public}@, identifier: %ld, legacyIdentifier: %ld, legacyIdentity: %{private}@
Failed to erase ngm full device identity {ngmError: %@, ngmFullDeviceIdentity: %@}
Purged ngm full device identity {ngmFullDeviceIdentity: %@}
Failed to remove data {blobError: %@, identifier: %@}
Purged key blob from keychain {identifier: %@}
Failed to purge legacy full identity {legacyError: %@, legacyFullIdentity: %@}
Purged legacy full identity {legacyFullIdentity: %@}
Loaded identity on first try {identifier: %{public}@}, serializationDidChange: %{public}@, firstTry: %{private}@}
Failed to load identity on first try -- retrying {error: %{public}@, identifier: %{public}@}
Loaded identity on second try {identifier: %{public}@, serializationDidChange: %{public}@, secondTry: %{private}@}
Failed to load identity on second try {error: %{public}@, identifier: %{public}@}
Failed to load identity from keychain {error: %{public}@, identifier: %{public}@}
Loaded identity data from keychain {identifier: %{public}@, data: %{private}@}
Failed to load identity from data {error: %{public}@, identifier: %{public}@, data: %{private}@}
Loaded identity from keychain data {identifier: %{public}@, identity: %{private}@}
Serialization did NOT change for identity {identity: %{private}@}
Serialization did change for identity {identity: %{private}@, reSerializedData: %{private}@, data: %{private}@}
Faild to get dataRepresentation to determine serializationChange -- Not updating {error: %{public}@, identity: %{private}@}
Failed to load identity container from keychain {error: %{public}@, identifier: %{public}@}
Failed to load identity container from data {error: %{public}@, identifier: %{public}@, data: %{private}@}
Failed to serialize ngmVersion {error: %{public}@, ngmVersion: %ld}
Failed to deserialize ngmVersion from data -- returning 0 {error: %{public}@, dataRepresentation: %{public}@}
IDSNWSocketPairConnectionProtocol returning -- no header.
IDSNWSocketPairConnectionProtocol read message_length:%u (0x%x), type:%u (0x%x)
IDSNWSocketPairConnectionProtocol returning partial data.
%@ Succesful nw_connection_create_with_connected_socket_and_parameters
%@ _nwConnection is nil.
%@ Connection: nw_path_t is NULL, dissabling cross-layer logging.
%@ Connection from listener is ready.
%@ Listening connection closed.
%@ Listening connection state: %d
Dealloc'ing IDSNWSocketPairConnection without ending the session
%@ Ending session
%@ Read %u bytes
%@ nw_connection_receive_message Error %@, isFinal %@
Scheduling next _receiveFromNWConnection for %@
%@ nw_connection_receive_message of type %u
31 {curProtocol: %hhu, prevProtocol: %hhu, curUUID: %{public}.16P, conUUID: %{public}.16P, curPktLen: %u, logSeqn: %hhu}
Sending message to uppper layers. 
%@ Sending message to uppper layers.
30 {curProtocol: %hhu, nextProtocol: %hhu, curUUID: %{public}.16P, conUUID: %{public}.16P, curPktLen: %u, logSeqn: %hhu}
%@ Wrote %u bytes.
%@ Error %@! Could not write data to nw_connection.
State changed for device with no unique ID, ignoring...
Couldn't match default uniqueID to real uniqueID, ignoring...
We didn't find a notify token for %@, adding one...
Found existing notify token %d for name %@
Received device properties state change for device with uniqueID %@ - nearby %@  connected %@  cloud connected %@
Connectivity state changed (old: 0x%x) (new: 0x%x)
Registered device missing public key! -- aborting hash {device: %@}
Local device missing public key! -- aborting hash
Received unsupported query update hash {version: %d, hash: %@}
Query update hash does not match, we should clear {remoteHash: %@, localHash: %@}
Query update hashes match -- doing nothing {version: %d, remoteHash: %@, localHash: %@}
 => Purging Peer ID Cache for: %@   caller URI: %@   service: %@
Received too many registration updates, ignoring {remoteURI: %@, service: %@, localURI: %@, guid: %@}
started policy for %@, devices: %@
checking blackout for %@
repeated fairplay failure blackout lifted (elapse %0.6lf > window %0.1d)
blackout due to repeated fairplay failure (blackout ending in %0.6lf seconds)
Cannot force remove appleID users. { user: %@ }
Waiting on migration -- deferring updateUsers
Migration completed, calling updateUsers
Finished synchronizing SystemAccounts to users {currentUsers: %@, updatedUsers: %@, iCloudAccount: %@, error: %@}
IDSFirewall Update to category %u for GUID %@ addEntries %@
IDSFirewall GUID %@ Not donating to the firewall { wantsFirewallDonation: %@, disallowFirewallAutoEnroll: %@, command: %@
Told to report iMessage spam with localObject %@
Process not entitled to report iMessage spam
Couldn't find iMessage account with alias %@
Told to report iMessage unknown sender with localObject %@
Process not entitled to report iMessage unknown sender
Told to check unknown sender with localObject %@
Process not entitled to check unknown sender
User removed. Prepending transaction %@
Executing temporary phone user transaction %@
Phone user added. Adding transaction %@
Phone user changed. Adding transaction %@
Not provisioning for Home Number because nil authenticationCertificate for user: %@
Not provisioning for Home Number because SIM is still present {user: %@, SIM: %@}
Not provisioning for Home Number because removed SIM is not the default phone SIM on the DSDS phone {user: %@}
Phone user removed. Adding transaction %@
User expired. Prepending transaction %@
retrieved os channel %p from pipe %@
CFWriteStreamCopyProperty(kCFStreamPropertySocketNativeHandle) failed with pipe %@
retrieved native socket %d from pipe %@
fcntl failed with socket %d
releasing pipe %@
Start collecting logs due to %@ Magnet corruption
DontSubmitDataCorruptionToAggd is set. Not submitting to aggd
submitting aggd metric - MagnetDataCorruption
submitting IDSMagnetCorruptionDetailedEvent: correctFramesSinceLastCorruption = %lld, correctRawBytesSinceLastCorruption = %lld, discardedRawBytes = %lld, magnetDataCorruptionRecoveryTimeInMs = %lld ms
Remote device detected data corruption
LMW %d/%d %c =%c (s:%d)
LMW errno %d =%c (s:%d)
BT reports %@ as (%@) interpreting as awake? %@.
Link manager read %d/%d bytes during resync %c
Link manager recv(resync) %zd errno %d - closing connection
Magnet corruption! received %dB with %dB buffer. Resync incoming stream done! content = %@
DontSubmitDataCorruptionToAggd is set. Not submitting MagnetDataCorruptionRecoveryTimeInMs = %lld ms to aggd
submitting aggd metric - MagnetDataCorruptionRecoveryTimeInMs = %lld ms
received %dB with %dB buffer. Continue resyncing incoming stream. content = %@
Link manager recv %zd errno %d - closing connection
LMR2 0/%d/%d/%u %c
Magnet corruption! Link manager received %d byte packet (last recv %d/%u) with bad checksum (old:%04x new %04x). Initiate resync incoming stream! data(%d) %@
LMR %d/%d/%u %c
Magnet corruption! This packet(%dB) (last recv %d/%u) did not decode! data(%d) %@
Link manager received zero byte packet (total recv:%d)
Magnet corruption! Bad packet length found. Initiate resync incoming stream! (last recv %d/%u) data(%d) = %{public}@
ready but already suspended
Ready to write into pipe %@
LMW2 %d/%d %c =%c (s:%d)
Link manager send2 errno %d
BTLink is now suspended
BTLink is now resumed
Custom Test 9 - Packet injected into the BT Layer.
GUID %@ Finished MML %@ with result code: %ld error: %@
GUID %@ Finished Fanout %@ with result code: %ld error: %@
GUID %@ Finished sending to destination %@ { success: %@, code: %ld, error: %@ }
Returning dependent registration property for key { serviceIdentifier: %@, pushToken: %@, foundCandidate: %@, key: %@, value: %@ }
Found trusted key transparency signature { KTLoggableDataSignaturesString: %@ }
Found trusted key transparency signature services { serviceSignatures: %@ }
Returning KT signature for device { serviceIdentifier: %@, pushToken: %@, KTLoggableDataSignaturesString: %@, KTLoggableDataSignature: %@ }
Key transparency flags { serviceIdentifier: %@, pushToken: %@, keyTransparencyFlagsString: %@ }
Returning KT eligibility value { serviceIdentifier: %@, pushToken: %@, keyTransparencyFlagsString: %@, eligibility: %ld }
Checked for iCloud account mismatch { serviceIdentifier: %@, iCloudAccountDoesMatchServiceAccount: %@, iCloudAccount: %@, iCloudAccountError: %@, serviceLoginID: %@, serviceDSID: %@, serviceAccountRegistrationStatus: %@, serviceRegistrationStatus: %ld }
Returning key transparency enrolled URIs { serviceIdentifier: %@, enrolledURIs: %@ }
Returning iCloud sign-in status for key transparency { iCloudAccount: %@, iCloudAccountError: %@ }
Initialized IDSKeyTransparencyVerifier { KTVerifier: %@, application: %@, service: %@, keyTransparencyStore: %@, internalMetricLogger: %@, productionMetricLogger: %@ }
KT Opt In Status: %@
Done fetching local device trust circle eligible service identifiers { eligibleServices: %@, error: %@ }
Key transparency is disabled -- not requesting transparency ticket { serviceIdentifier: %@ }
Local device is not eligible for key transparency due to account status -- not requesting transparency ticket
Local URI is not enrolled in key transparency -- not not requesting transparency ticket { serviceIdentifier: %@, localURI: %@ }
Key transparency is disabled -- not requesting current peer verification results for query { serviceIdentifier: %@ }
Local device is not eligible for key transparency due to account status -- not requesting current peer verification results for query
Key transparency is disabled -- not requesting current verification results for registration { serviceIdentifier: %@ }
Local device is not eligible for key transparency due to account status -- not requesting current verification results for registration
Key transparency is disabled -- not forcing verification results { serviceIdentifier: %@ }
Nuking KT verification state
Done nuking KT verification state { error: %@ }
Key Transparency is disabled for service, not fetching peer verification results. { serviceIdentifier: %@ }
Fetching verification status. { uri: %@, UUID: %@ }
Performing KT verification of query { index: %@, state: %@, entries: %@ }
Calling in to perform KT peer-validation { KTURI: %@, serverKTDataPushTokens: %@
Finished requesting KT ticket for query { KTURI: %@, error: %@, ticket: %@ }
Unable to establish KT URI prefix -- not performing KT verification of query { serviceIdentifier: %@ }
Requesting KT verification results of query { index: %@, ticket: %@ }
Unable to perform peer verification for query { index.URI: %@, ticket: %@ }
Finished KT validate peer result { KTURI: %@, result: %@, error: %@, ticket: %@, optedIn: %@ }
Unable to establish KT URI prefix -- not requesting KT verification of query { serviceIdentifier: %@ }
Forcing KT verification results of trusted devices results { index: %@, ticket: %@ }
Calling in to force KT validation { KTURI: %@ }
Finished KT force validate { KTURI: %@, result: %@, error: %@, ticket: %@, optedIn: %@
Unable to establish KT URI prefix -- forcing KT validation { serviceIdentifier: %@ }
Performing KT verification of registration { index: %@, state: %@, entry: %@ }
Calling in to perform KT enrollment verification { KTURI: %@, KTDataPushToken: %@
Finished requesting KT ticket for registration { KTURI: %@, error: %@, ticket: %@ }
Unable to establish KT URI prefix -- not performing KT verification of registration { serviceIdentifier: %@ }
Requesting KT verification results of registration { index: %@, ticket: %@ }
Finished KT validate enrollment result { KTURI: %@, result: %@, error: %@, ticket: %@, optedIn: %@ }
IDS Service is not eligible for Key Transparency.
Key Transparency application %@ is not eligible for opt-in.
No key transparency applications provided.
No valid key transparency applications provided.
No KT eligible services.
Received KT opt-in result from server {success: %@, error: %@}
Key Transparency is not enabled for service { serviceIdentifier: %@ }
Found opt in manager for service. { serviceIdentifier: %@, optInState: %@ }
No valid opt in manager found for service { serviceIdentifier: %@ }
No service found for KT Application. {KTApplication: %@}
Account is not yet registered for service. No account URI found.
Error fetching verification info from query for own URIs. {Error: %@}
Force syncing KVS for self verification.
Successfully synced KVS.
Failed to sync KVS.
Calling in to note KT synced datas on existing UUID for self-validation { serverKTDataPushTokens: %@, syncedKTDataPushTokens: %@ }
We should try to reregister to heal the account on this device.
KVS is not initialized, we shouldn't heal.
iCloud account and IDS account are mismatched, we shouldn't heal.
Trying to heal account by reregistering.
Currently being rate limited to self heal.
Transparency reports that account key is not yet available, doing nothing.
No matched error found, doing nothing.
Not able to heal at this time.
Checked CloudKit to see if encryption prerequisites have updated. {shouldReregister: %@, error: %@}
Key transparency is disabled -- not enrolling trusted device
Key transparency trust circle is not enabled -- not enrolling trusted device
Local device is not eligible for key transparency on provided services -- not enrolling trusted device
Uploading trusted devices to KVS. { trustedDevices: %@ }
Trusted Device info has no services with data to insert into KVS.
No trusted devices to insert into KVS.
Inserting trusted device with metadata. {trustedDevice: %@, metadata: %@}
Removing entries from KVS. {keys: %@}
KVS entry not of expected type, skipping. {kvsKey: %@}
Failed to create trusted device from KVS entry. {kvsKey: %@}
Fetching expired entries from KVS.
Failed to create device metadata object from KVS entry. {kvsKey: %@}
Found expired entry. {currentTime: %f, trustedDeviceTimestamp: %f, entryKey: %@
Trying to sync KVS.
Successfully synced KVS. {timeInterval: %f
Failed to sync KVS. { timeInterval: %f, error: %@ }
Reporting IDSKTAccountKeyFetchMetric {service: %@, success: %@, isMismatchAccount: %@, regReason: %@, error: %@, metricAttributes: %@}
Logging KT enrollment metric { metric: %@ }
Logging KT verification metric { metric: %@ }
Failed to find verifier for service identifier. { serviceIdentifier: %@ }
Failed to determine KT URI prefix for service identifier! { serviceIdentifier: %@ }
Determined if self-query should be verified { shouldSelfVerify: %@, diceRoll: %@, percentage: %@, bagValue: %@ }
Already have cached invalid results {uri: %@, fromURI: %@, strippedURI: %@, service: %@}
setupNewSession configuration: %@
cleanup session %@ local object %@
Could not find session with uniqueID %@ to clean up, ignoring...
cleanup session instance %@ local object %@
Could not find session with instanceID %@ to clean up, ignoring...
sendInvitation %@
%@ - Could not find session with uniqueID %@ to send invitation, ignoring...
sendInvitation %@ with data %@ declineOnError %@
%@ - Could not find session with uniqueID %@ to send invitation with data to, ignoring...
acceptInvitation %@
%@ - Could not find session with uniqueID %@ to accept invitation, ignoring...
acceptInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to accept invitation with data with, ignoring...
cancelInvitation %@
%@ - Could not find session with uniqueID %@ to cancel invitation, ignoring...
cancelInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to cancel invitation with data with, ignoring...
cancelInvitation %@ with remote ended reason override %u
%@ - Could not find session with uniqueID %@ to cancel invitation with remote ended reason override with, ignoring...
declineInvitation %@
%@ - Could not find session with uniqueID %@ to decline invitation, ignoring...
declineInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to decline invitation with data with, ignoring...
reconnectSessionWithUniqueID %@
%@ - Could not find session with uniqueID %@ to reconnect session, ignoring...
endSession %@
%@ - Could not find session with uniqueID %@ to end session, ignoring...
endSessionWithData %@ (data length %lu)
%@ - Could not find session with uniqueID %@ to end session with data, ignoring...
sendSessionMessage %@ to session %@ with context %@
%@ - Could not find session with uniqueID %@ to send message to, ignoring...
setAudioEnabled:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set audio enabled, ignoring...
setMuted:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set muted, ignoring...
setPreferences:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set preferences, ignoring...
setRequiredCapabilities:requiredCapabilities:forSessionWithUniqueID %@ %@ %@
setInviteTimeout:forSessionWithUniqueID %@ %ld
%@ - Could not find session with uniqueID %@ to set invite timeout, ignoring...
acknowledge sessionID: %@ clientID: %@
%@ - Could not find session with uniqueID %@ to acknowledge session ID, ignoring...
sendAllocationRequest %@
%@ - Operation supported on internal install only
%@ - Could not find session with uniqueID %@ to send allocation request, ignoring...
updateMembers %@, for Group %@, context %@, capabilities %@, triggered locally %@, lightweightStatusDict count:%lu
%@ - Could not find session with uniqueID %@ to update members, ignoring...
manageDesignatedMembers %@, for Group %@, type: %u
removeParticipantIDs %@, for Group %@
%@ - Could not find session with uniqueID %@ to removeParticipantIDs, ignoring...
updateParticipantData %@, for Group %@, context %@
updateParticipantType %u, for Group %@, context %@
%@ - Could not find session with uniqueID %@ to update participantType, ignoring...
joinGroupSession %@, options: %@
%@ - Could not find session with uniqueID %@ to join group session, ignoring...
leaveGroupSession %@, participantInfo: %@ options: %@
%@ - Could not find session with uniqueID %@ to leave group session, ignoring...
requestActiveParticipants for group session: %@
%@ - Could not find session with uniqueID %@ for requestActiveParticipants, ignoring...
requestURIsForParticipantIDs for group session: %@
registerPluginForGroup %@, options: %@
%@ - Could not find session with uniqueID %@ to register plugin, ignoring...
unregisterPluginForGroup %@, options: %@
%@ - Could not find session with uniqueID %@ to unregister plugin, ignoring...
requestEncryptionKeyForGroup %@, for %lu participants %@
%@ - Could not find session with uniqueID %@ to request encryption keys, ignoring...
createAliasForParticipantID %llu salt %@
getParticipantIDForAlias %llu salt %@
IDSReportApprovedTempUser
RealTimeEncryption
IDSNRDeviceIdentifier
NSSecureCoding
NSCoding
NSCopying
IDSNRDeviceManager
IDSNRDeviceProperties
IDSNRDevicePairingProperties
IDSNRLinkPreferences
IDSNRBluetoothLinkPreferences
IDSNRDevicePreferences
IDSNRDeviceMonitor
IDSNREndpoint
IDSOpportunisticCache
IDSDeviceHeartbeatCenter
IMSystemMonitorListener
IDSBTDatagramLink
IDSLink
NSObject
IDSUserProperties
IDSSIMDeactivationInfoMessage
IDSSIMResponder
IDSNRDeviceBridge
IDSNRDeviceMonitorDelegate
IDSEndpointSubscription
IDSPublicIdentityCache
IDSPreflightMessage
IDSUTunPeerServiceMap
HomeKit
IDSDuetInterface
IDSPeerIDQuery
IDSPeerIDPushHandler
IDSActivityMonitorStateManager
IDSActivityPushListenerDelegate
IDSDeviceConnectionInfo
IDSAccountIdentityElector
IDSServerAuthenticatePhoneRequest
IDSServerAuthenticatePhoneResponse
IDSRegistrationKeyManagerKeyPairProvider
IDSRegistrationKeyManager
IDSRegistrationKeyConfig
IDSFrequentURISuggester
IDSDeviceConnection
IDSFanoutFactoryComponent
IDSMPFullDeviceIdentityContainerEncrypter
IDSMPFullDeviceIdentitySigner
IDSPerServiceApplicationKeyConfig
IDSPerServiceApplicationKeyManager
IDSMessageMetricReporter
IDSClientChannelData
IDSClientChannel
IDSClientChannelManager
IDSSocketPairConnection
IDSSocketPairConnectionProtocol
IDSSystemAccount
IDSSystemAccountAdapter
IDSOpportunisticDeliveryController
IDSDSessionMessenger
IDSServiceStatistics
IDSHomeKitCloudRelayUserAccessTokensMessage
IDSKTAccountKeyResult
IDSKTAccountKeyManager
IDSReportGeneralSpamMessage
IDSPluginNanoRegistryProtocol
IDSNanoRegistryPluginManager
IDSCertifiedDeliveryReplayCommitter
IDSHeartbeatCenter
IDSProfileGetDefaultInvitationContext
IDSMMLMessage
IDSActivityDescription
IDSUTunPeer
IDSUTunConnectionDelegate
IDSWPLinkManagerConnectivityDelegate
IDSAuthenticateMessage
IDSKeychainWrapper
IDSSecOTRSession
IDSMMCSUploadResult
IDSDXPCOpportunistic
IDSXPCOpportunistic
IDSRegistrationController
IDSSMSRegistrationCenterListener
IDSAppleIDRegistrationCenterListener
IDSRegistrationCenterListener
IDSEndpointResolverComponent
IDSPeerAggregateMessage
IDSProtoKeyTransparencyLoggableData
IDSGroupStatusNotificationParameters
IDSURIEncrypter
IDSAsyncEncrypter
IDSAsyncDecrypter
IDSAsyncSignatureVerifier
IDSDeviceIDEncrypter
IDSSyncAsyncEncrypter
IDSSyncEncrypter
IDSSyncAsyncDecrypter
IDSSyncDecrypter
IDSPreflightStack
IDSDSession
_IDSSessionConnectionDelegate
IDSSocketPairConnectionDelegate
IDSBaseSocketPairConnectionDelegate
IDSRealTimeEncryptionDelegate
IDSDSessionKeyValueDeliveryDelegate
IDSServerDesiredEncryptedDataSet
IDSServerDesiredMaterialSet
IDSIncomingMessageBroadcast
IDSHashingDeviceIdentityEncrypter
IDSProtoKeyTransparencyTrustedDeviceMetadata
IDSNGMSwizzler
IDSKTAnalyticsLogger
CUTMetricLogger
IDSFanoutSender
IDSMadridAckTrackerDelegate
IDSAPNSAckTrackerDelegate
IDSSigningEncrypter
IDSSyncAsyncSigner
IDSAsyncSigner
IDSSyncSigner
IDSPersistentMapMetadata
IDSPersistentMapMergePolicy
IDSPersistentMap
IDSDXPCKeyTransparency
IDSXPCKeyTransparency
IDSInvitationStore
IDSFirewallNotificationCenter
UNUserNotificationCenterDelegate
IDSMissingMessageMetricReporter
IDSDGroupStatusNotificationController
IDSDGroupStatusNotificationControllerBroadcaster
IDSProfileMessage
IDSEncrypterBuilder
IDSDXPCInternalTesting
IDSXPCInternalTesting
IDSTrafficMonitor
IDSTemporaryPhoneAlertManager
IDSQuickSwitchHelper
IDSAccountSync
IDSEncryptedData
IDSTemporaryPhoneUserExpirationTimerInfo
IDSTemporaryPhoneUserExpirationManager
IDSUserStoreListener
AppleCare
IDSKeychainKeyElectionStore
IDSClientData
IDSClientDataRegistrationKeyManager
IDSClientDataResult
IDSClientDataGenerator
IDSActivityScribeMessage
IDSDAccountMetrics
IDSAccountRepair
IDSMultiplexerGroupSessionTransport
IDSMultiplexerTransport
IDSGroupSessionMultiplexer
IDSProtoKeyTransparencyTrustedServiceSignature
IDSBTLELink
CBPeripheralDelegate
IDSValidateCredentialsMessage
IDSRapportDeliveryController
IDSRapportClientDelegate
IDSRapportDeliveryControllerRapportClient
IDSPeerMessage
IDSUTunControlMessage_Hello
IDSDRegistrationPushManager
IDSRegistrationPushHandlerListener
IDSDRegistrationControl
SpamReporting
IDSKTGossipManager
IDSDGroupContextDataSource
ENGroupContextDataSource
IDSMPConversationGroupEntry
IDSCloudKitKeyTransparencyDeviceRecord
IDSCloudKitKeyTransparencyStore
IDSPairedDeviceKeychainSchema
IDSDaemonProtocol
IDSDaemonListenerProtocol
IDSDaemon
IDSPushHandlerDelegate
IDSUTunDeliveryControllerDelegate
IDSDuetInterfaceDelegate
IDSRapportDeliveryControllerDelegate
IDSPairingManagerDelegate
IDSRegistrationHashProcessorDelegate
IDSDaemonMIGInterface
IDSQuickRelayAllocatorQueryPolicy
IDSPeerAggregatableMessage
IDSDGroupContextNotifyingObserver
ENGroupContextObserverMiddleware
ENGroupContextMiddleware
IDSLinkPreferencesManager
IDSProtoKeyTransparencyTrustedDevice
IDSEncryptionQueue
IDSEncryptionAsyncQueue
IDSEncryptionSyncQueue
IDSEncryptionQueueManager
IDSMessageHashChecker
IDSDXPCFirewall
IDSXPCFirewall
IDSActivityUpdatePush
IDSActivityPushListener
IDSMessageFactoryComponent
IDSEngramKeyStore
IDSConnectivityMonitor
IDSUTunDeliveryControllerConnectivityDelegate
IDSDXPCReunionSync
IDSXPCReunionSync
IDSFamilyManager
IDSUTunControlChannel
IDSUTunControlChannelIdentityPair
IDSProvisionTemporaryPhoneMessage
IDSTTLCache
IDSTTLCacheItem
IDSRegistrationReasonTracker
IDSGroupMasterKeyMaterialCollection
IDSGroupMasterKeyMaterialCache
IDSProfileValidateInvitationContext
IDSTemporaryPhoneUser
IDSUser
IDSPeerIDKey
IDSValidationSession
IDSBaseMessageSigningSession
IDSValidationSigningResult
IDSDecryptionMetadata
IDSEncryptionMetadata
Dependency
IDSDAccountControllerDeviceSupport
IDSDAccountController
IDSProvisionPseudonymMessage
IDSMultiplexerLocalTransport
IDSLocalMultiplexer
IDSUDPGlobalLink
IDSLinkDelegate
IDSAppleUser
Registration
IDSWPLinkManager
WPContinuityDelegate
IDSWPPacketSendingProtocol
IDSEncryptionComponent
IDSServerDesiredEncryptedDataBlobMaterialSet
PhoneNumberValidation
IDSDAccount
IDSDXPCDaemonServer
NSXPCListenerDelegate
IDSDXPCDaemonCollaboratorProvider
IDSRegistrationConductor
ExternalTriggers
IDSDAccountControllerDelegate
IDSRegistrationControllerListener
Notifications
IDSDeviceCertificationRepairDelegate
IDSCTAdapterListener
RestoreTracking
IDSPreflightStackStore
IDSSMSRegistrationCenter
IDSPhoneNumberValidationRequestor
IDSPhoneNumberValidationListener
IDSGroupPutMessage
IDSRestrictions
IDSGenericConnection
IDSPairingManager
IDSCoalesceMessageQueue
IDSCoalesceMessageQueueManager
IDSPhoneUser
IDSGroupServer
IDSGroupServerPushHandler
IDSEncryptionHelpers
IDSAppleIDNotification
IDSAppleIDNotificationCenter
IDSActivityStateProvider
IDSFirewallDatabase
Account
IDSSession
IDSDeliveryController
IDSCoalesceMessageQueueManagerDelegate
IDSCheckUnknownSenderMessage
IDSConnectivityMonitorMetric
CUTRTCMetric
CUTMetric
IDSConnectivityMonitorMetricProperties
IDSDRegistrationListener
IDSLocalDeliveryMessage
IDSHCInfo
IDSUTunDeliveryController
IDSNRDeviceBridgeDelegate
IDSUTunPeerDelegate
IDSContactsUtilities
IDSGroupStableKeyMaterialCollection
IDSGroupStableKeyMaterialCache
IDSEntitlements
IDSGroupContextDaemonProtocol
IDSGroupContextDataSourceDaemonProtocol
IDSGroupContextCacheMiddlewareDaemonProtocol
IDSGroupContextObserverDaemonProtocol
IDSDaemonXPCInterface
IDSDGroupContextNotifyingObserverDelegate
IDSAPNSAckTracker
IDSPeerIDValue
IDSDSessionController
IDSDataMigrationTracker
IDSDSignInResponder
IDSDSignInResponderDeviceSupport
IDSServerStorageStateMachine
IDSSIMPhoneUserSynchronizer
IDSUserStoreProvider
IDSPublicKeyStorageCache
IDSPublicKeyStorage
IDSUserDescription
IDSUserStore
IDSAuthenticateUsersResponse
IDSAuthenticateUsersMessage
IDSDXPCActivityMonitor
IDSActivityMonitorStateManagerListener
IDSXPCActivityMonitor
IDSPairedDevice
IDSRegistrationMessage
IDSAbsintheSignedMessage
IDSRegistrationKeychainManager
KeychainManagerUtilities
IDSDaemonCapabilities
IDSMessageDeliveryFactory
ProviderExtensions
IDSRegistrationCenter
IDSRegistrationCenterMessageDelivery
IDSEngramKeyStoreListener
IDSIDQueryMessage
IDSLinkManager
IDSBTLinkManagerDelegate
IDSWPLinkManagerDelegate
IDSCellularLinkDelegate
IDSRapportClient
IDSTTLCacheDelegate
IDSKTGossipPolicySpecification
IDSKTGossipPolicy
IDSUTunConnection
IDSPhoneNumberValidationStateMachine
IDSPhoneNumberValidationStateMachineMessageDelivery
IDSPhoneNumberValidationStateMachineLockdownManager
IDSPhoneNumberValidationStateMachineDeviceSupport
IDSPhoneNumberIdentification
IDSCTPNRDelegate
Collaborators
IDSGetDependentRegistrationsCenter
IDSOTRSessionInfo
IDSOTRController
IDSMMLBuilder
IDSServerStorageMetricCollector
IDSGroupSendAheadObserver
IDSProtoKeyTransparencyTrustedServiceSignatures
IDSDXPCServerMessaging
IDSXPCServerMessaging
IDSServerMessage
DirectMessaging
IDSOTRKeyStorage
_IDSSessionConnectionInfo
IDSIDStatusDependencyProvider
IDSIDStatusQueryController
IDSDSessionAWDMetrics
IDSDMessageStoreMigrator
IDSServerDesiredKeyMaterialSet
IDSRegistrationPushHandler
IDSBagUtilities
IDSPublicIdentityData
IDSDXPCDaemon
IDSXPCDaemon
QRSelfAllocationArray
TimerWrapper
QRStreamInfo
QRAllocation
IDSAllocateResponseWrapper
IDSQuickRelayAllocator
IDSBlockRetryHandler
IDSPhoneNumberValidationModeArbiter
IDSAsyncMapper
IDSRegistrationCacheStateTransportPolicy
IDSValidationCertificateMessage
IDSBTLinkManager
CBCentralManagerDelegate
CBPeripheralManagerDelegate
CBScalablePipeManagerDelegate
IDSCountdown
IDSKTOptInStatusMessage
IDSNRDevicePreferencesHandler
IDSReportSpamMessage
IDSEncryptionController
IDSOTREncrypter
_IDSSessionConnection
ConferenceDelegate
AVConferenceDelegate
IDSDSessionKeyValueDeliveryLocalEntry
IDSDSessionKeyValueDelivery
IDSXPCGroupSessionKeyValueDelivery
IDSGroupEncryptionController
IDSPeerAccessoryMessage
IDSHomeKitCloudRelayAdminAccessTokenMessage
IDSAckStateMachine
IDSSocketPairConnectionTCPInfo
IDSNGMKeyLoadingErrorContainer
IDSNGMKeyLoadingMetric
IDSDXPCPairedDeviceManager
IDSXPCPairedDeviceManager
IDSDSessionInvitationManager
IDSDGroupContextController
IDSDAccountSendMessageContext
Messaging
IDSProtoKeyTransparencyTrustedService
IDSCurrentDevice
IDSEndpointEncrypter
IDSSyncAsyncSignatureVerifier
IDSSyncSignatureVerifier
IDSDAccountRegistrationListener
IDSHomeKitCloudRelayConsentTokensMessage
IDSDOutgoingMessage
IDSDIncomingMessage
IDSDMessageStore
IDSDMessageStoreMap
IDSQuickRelayAllocateMessage
IDSRegistrationProperties
IDSParticipantsCacheEntryPointer
IDSPrioritizedTokenList
IDSDSessionActiveParticipantsCache
IDSLocalDeliveryQueue
IDSDSessionDefaultAvailabilityCheck
IDSDSessionAvailabilityCheck
IDSDSessionSharedState
IDSValidationQueueItem
IDSValidationInfo
IDSValidationQueue
IDSStatusQueryQueue
IDSDaemonMIGQueryInterface
IDSPersistentMapKeychainPersister
IDSPersistentMapPersister
IDSPersistentMapDiskPersister
IDSPersistentMigratingPersister
IDSMadridEndpointFilterComponent
IDSDeliveryPipelineParameter
IDSEndpointResolverParameter
IDSPipelineParameter
IDSMadridEndpointFilterParameter
IDSFirewallEndpointDonationParameter
IDSEncryptionParameter
IDSMessageFactoryParameter
IDSFanoutFactoryParameter
IDSDXPCRegistration
IDSXPCRegistration
IDSPeerIDManagerEndpointQueryListener
IDSPeerIDManager
IDSPersistentMapDelegate
IDSPeerIDQueryHandlerDelegate
IDSGenericConnectionID
IDSSockAddrWrapperPair
IDSConnectionContext
IDSUTunTimingEventOutgoing
IDSUTunTimingEvent
IDSUTunTimingEventIncoming
IDSUTunTimingEventKernelTest
IDSUTunTimingLogger
IDSUTunController
IDSPeerIDQueryHandler
IDSPhoneUserCredential
IDSUserCredential
IDSAttachmentEncryptionParameter
IDSMMCSUploader
IDSDXPCGroupSessionKeyValueDeliveryProvider
IDSXPCGroupSessionKeyValueDeliveryProvider
IDSAppleIDRegistrationCenter
IDSAppleIDRegistrationCenterMessageDelivery
IDSTemporaryPhoneUserCredential
IDSPipelineComponent
IDSTransferServicesController
IDSPairedDeviceKeychainPersister
IDSPairedDevicePersister
IDSKTRegistrationDataConfig
IDSKTRegistrationDataManager
Continuity
IDSDaemonPriorityQueueController
IDSHomeKitCloudRelayServiceUserIDsMessage
IDSUserAccountSynchronizer
IDSRegistration
IDSDeviceConnectionAWDMetrics
IDSDServiceController
IDSPairedDeviceRepository
IDSGroupGetMessage
IDSTapToRadarPushPayload
IDSReportUnknownSenderMessage
IDSGroupServerKeyElectionStoreItem
IDSGroupServerKeyElectionStore
IDSDatabase
IDSRealTimeEncryptionIdentity
IDSDXPCPairing
IDSXPCPairing
IDSTransparentEndpointViewer
IDSInitializeValidationMessage
IDSRestoreMonitor
IDSProfileGetHandlesMessage
IDSFirewallStore
IDSPhoneUserRegistry
IDSPhoneUserRegistryDeviceSupport
IDSPhoneUserAuthenticationCertificate
IDSProtoApplicationKeyEntry
IDSPeerIDQueryContext
IDSRegistrationKeyManagerIdentityDataSource
IDSNWSocketPairConnection
IDSServerDesiredPreKeyMaterialSet
IDSDevicePropertiesStateNotifier
IDSRegistrationHashProcessor
IDSDevicePolicyController
IDSSystemAccountUserSynchronizer
IDSUserManagement
IDSFirewallEndpointDonationComponent
iMessageSpam
IDSDeviceCertificationRepair
IDSTemporaryPhoneUserAddTransaction
IDSTemporaryPhoneUserTransaction
IDSTemporaryPhoneUserRemoveTransaction
IDSTemporaryPhoneUserSynchronizer
IDSTemporaryPhoneUserExpirationManagerDelegate
IDSGetSIMAuthTokenMessage
IDSBTLink
NSStreamDelegate
IDSMadridAckTracker
IDSKeyTransparencyTrustedDeviceEnrollmentResult
IDSKeyTransparencyIndex
IDSKeyTransparencyVerificationState
IDSKeyTransparencyEntry
IDSKeyTransparencyRegistrationDataSource
IDSKeyTransparencyVerifier
IDSKeyTransparencyPolicy
IDSGetDependentRegistrationMessage
IDSAgentUserDefaults
IDSPeerIDQueryDataSource
IDSPeerIDQueryHandlerDataSource
IDSServer
Session
IDSGroupAgent
@16@0:8
@24@0:8^{_NSZone=}16
B16@0:8
i16@0:8
d16@0:8
v24@0:8@16
q16@0:8
v24@0:8q16
v16@0:8
@"NSString"
v40@0:8@16@24@32
v32@0:8@16@24
@24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@"NSUUID"
v48@0:8@16@24@32@?40
Q16@0:8
v24@0:8Q16
v20@0:8B16
@"NSData"
@"NSNumber"
@"IDSNRBluetoothLinkPreferences"
@"IDSNRDeviceIdentifier"
@"NSSet"
@40@0:8@16@24@32
@36@0:8@16@24C32
C16@0:8
@32@0:8@16@24
@24@0:8^@16
B32@0:8@16^@24
v24@0:8@?16
B24@0:8^@16
B40@0:8@16@24^@32
@"NSMutableDictionary"
@"IDSKeychainWrapper"
@"IDSFrequentURISuggester"
v32@0:8d16@24
@"IMTimer"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
Q40@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16@24@32
Q44@0:8^^{?}16i24@28@36
@28@0:8d16B24
Q40@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16@"NSString"24@"NSString"32
Q44@0:8^^{?}16i24@"NSString"28@"NSString"36
@"NSString"28@0:8d16B24
@"NSDictionary"16@0:8
v24@0:8@"NSString"16
@"<IDSLinkDelegate>"16@0:8
v24@0:8@"<IDSLinkDelegate>"16
@"<IDSLinkDelegate>"
@20@0:8B16
@"NSArray"
@48@0:8@16@24@32@40
v28@0:8i16@?20
@"IDSDAccountController"
@"IDSDServiceController"
@"IDSRegistrationController"
@"IDSRestrictions"
@"NSDate"
v28@0:8@16B24
v28@0:8@16C24
v28@0:8@"IDSNRDeviceMonitor"16B24
v28@0:8@"IDSNRDeviceMonitor"16C24
@36@0:8@16@24B32
v20@0:8C16
@"<IDSNRDeviceBridgeDelegate>"
@"NSObject<OS_dispatch_queue>"
@"IDSNRDeviceMonitor"
@?16@0:8
@"IDSURI"
B56@0:8@16@24@32@40^@48
@48@0:8@16@24@32^@40
@"IDSKVStore"
B24@0:8^[16C]16
B44@0:8@16S24^[16C]28^B36
B44@0:8S16^@20^[16C]28^B36
B60@0:8@16^S24B32^B36^[16C]44^B52
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
[16C]
@"NSMapTable"
[8[16C]]
v48@0:8@16@24@32@40
v56@0:8@16@24@32@40@48
v28@0:8B16@20
@32@0:8@16q24
v56@0:8@16q24@32@40@?48
@"<IDSDuetInterfaceDelegate>"
@"NSMutableSet"
@"NSData"16@0:8
v32@0:8@"IDSActivityPushListener"16@"IDSActivityUpdatePush"24
@64@0:8@16@24@32@40@48@56
v40@0:8@16@24@?32
@"<IDSActivityStateProvider>"
@"IDSActivityPushListener"
@"FTMessageDelivery"
@"IDSPeerIDManager"
^{IDSPortMap=[1024Q]QS}16@0:8
^{SimpleUInt32ToObjectTable=i^{SimpleUInt32ToObjectTableElement}i}16@0:8
^[16C]16@0:8
v24@0:8^[16C]16
S16@0:8
v20@0:8S16
v32@0:8@16^B24
v24@0:8d16
v20@0:8i16
@"IDSSockAddrWrapper"
@"IDSUTunControlChannel"
[2048I]
{IDSPortMap="ports"[1024Q]"totalAllocatedPorts"Q"lastAssignedPort"S}
{SimpleUInt32ToObjectTable="tableSize"i"elements"^{SimpleUInt32ToObjectTableElement}"elementCount"i}
@"NSMutableArray"
{IDSDCI_OutgoingPacketList="genericConnection"[64@]"sources"[64^v]"destinations"[64^v]"upperProtocols"[64C]"bytes"[64^v]"bytesLengths"[64Q]"numPackets"I"nextPacket"I}
@"NSObject<OS_nw_service_connector>"
v32@0:8@16@?24
@40@0:8@16q24^@32
@"IDSKeychainKeyElectionStore"
@"IDSCloudKitKeyElectionStore"
@"IDSGroupServerKeyElectionStore"
@"IDSPhoneUser"
@40@0:8q16@24@32
@"IDSAuthenticationCertificate"
v64@0:8@16^^{__SecKey}24^^{__SecKey}32^@40^B48^B56
v64@0:8@"NSString"16^^{__SecKey}24^^{__SecKey}32^@40^B48^B56
v48@0:8^@16^@24q32^B40
B20@0:8B16
B36@0:8@16q24B32
@72@0:8@16@24@32@40B48B52@56@64
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}20@0:8S16
@24@0:8Q16
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}28@0:8S16^@20
@28@0:8S16^@20
@40@0:8@16q24q32
@20@0:8I16
B32@0:8@16@24
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16@0:8
B24@0:8S16S20
B32@0:8@16q24
@"NSRecursiveLock"
@"IDSNGMKeyLoadingErrorContainer"
@"IDSRegistrationKeyConfig"
@"IMSystemMonitor"
@"IDSRegistrationKeyManagerIdentityDataSource"
@"IDSPerServiceApplicationKeyManager"
@"IDSRateLimiter"
@"<IDSRegistrationKeyManagerKeyPairProvider>"
@"IDSKTRegistrationDataManager"
v24@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16
@"IDSMPFullDeviceIdentityContainer"
@"IDSNGMKeyRollingTicket"
@"IDSMPFullLegacyIdentity"
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}
v76@0:8@16B24@28@36@44@52@60@68
@64@0:8@16@24@32Q40q48@56
@56@0:8@16@24@32@40^@48
@56@0:8@16@24@32^@40^@48
@52@0:8@16@24^@32@40B48
@44@0:8@16@24@32B40
@"NSData"56@0:8@"NSData"16@"NSDictionary"24@"IDSMPPublicDeviceIdentityContainer"32@"NSString"40^@48
@"NSData"56@0:8@"NSData"16@"NSDictionary"24@"IDSMPPublicDeviceIdentityContainer"32^@40^@48
@"NSData"52@0:8@"NSData"16@"IDSMPPublicDeviceIdentityContainer"24^@32@"NSString"40B48
@"CUTUnsafePromise"44@0:8@"NSData"16@"IDSMPPublicDeviceIdentityContainer"24@"NSString"32B40
@44@0:8@16S24@28^@36
B56@0:8@16@24q32@40^@48
B56@0:8@16@24^{__SecKey=}32@40^@48
@"NSData"40@0:8@"NSData"16q24^@32
@"NSData"44@0:8@"NSData"16S24@"IDSSigningKeyDiversifier"28^@36
@"NSArray"40@0:8@"NSArray"16q24^@32
B56@0:8@"NSData"16@"NSData"24q32@"IDSNGMPublicDeviceIdentity"40^@48
B56@0:8@"NSData"16@"NSData"24^{__SecKey=}32@"IDSSigningKeyDiversifier"40^@48
@60@0:8@16@24@32@40@48B56
@"IDSRegistrationKeyManager"
v24@0:8^{__SecKey=}16
^{__SecKey=}16@0:8
^{__SecKey=}
B20@0:8S16
^{__SecKey=}20@0:8S16
^{__SecKey=}28@0:8S16^@20
B28@0:8@16S24
v40@0:8^B16^B24^B32
v28@0:8S16^@20
@56@0:8@16@24@32@40@48
v80@0:8@16@24@32@40B48B52@56@64@72
@40@0:8*16I24r*28I36
@36@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16r*24I32
^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16@0:8
r*16@0:8
I16@0:8
^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}
B40@0:8r^v16I24r^v28I36
B40@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16r^v24I32B36
B44@0:8*16I24r^v28I36B40
B32@0:8@16@?24
@?24@0:8@16
B28@0:8@16B24
v32@0:8@?16@?24
B24@0:8@"IDSSocketPairMessage"16
B28@0:8@"IDSSocketPairMessage"16B24
v24@0:8@"IDSSocketPairMessage"16
v32@0:8@?<@"NSData"@?@"NSData"@"NSString">16@?<@"NSData"@?@"IDSSocketPairMessage">24
@"NSSet"16@0:8
@60@0:8i16@20@28q36@44Q52
v20@0:8I16
q32@0:8*16Q24
@"NSMutableData"
@"<IDSSocketPairConnectionDelegate>"
@"IDSStallDetector"
v48@0:8@16@24@?32@?40
v40@0:8@16@?24@?32
@48@0:8@16@24@?32^@40
@40@0:8@16@?24^@32
@40@0:8@16@24@?32
v64@0:8@16@24@32@40@48@?56
@"IDSOpportunisticCache"
v64@0:8@16@24@32@40@?48@?56
v76@0:8@16@24@32B40@44@52@?60@?68
B40@0:8@16@24@32
[60C]
@"IDSPushHandler"
@"<IDSDSession><IDSDSessionAWDMetrics>"
@"IDSDSessionSharedState"
@"NSDictionary"
{os_unfair_lock_s=I}16@0:8
v20@0:8{os_unfair_lock_s=I}16
@"IDSServerBag"
v24@0:8#16
@"<IDSPluginNanoRegistryProtocol>"
v48@0:8@?16@24@32@40
B32@0:8@16^d24
@"CUTDeferredTaskQueue"
@40@0:8@16@24Q32
@"NSMutableOrderedSet"
v96@0:8@16@24@32@40@48@56B64B68@72@80B88B92
v28@0:8@16I24
v28@0:8@"IDSUTunConnection"16B24
v96@0:8@"IDSUTunConnection"16@"IDSProtobuf"24@"NSString"32@"NSNumber"40@"NSString"48@"NSNumber"56B64B68@"NSString"72@"NSString"80B88B92
v96@0:8@"IDSUTunConnection"16@"NSData"24@"NSString"32@"NSNumber"40@"NSString"48@"NSNumber"56B64B68@"NSString"72@"NSString"80B88B92
v56@0:8@"IDSUTunConnection"16@"NSString"24@"NSString"32@"NSNumber"40@"NSString"48
v28@0:8@"IDSUTunConnection"16I24
v24@0:8@"IDSUTunConnection"16
v36@0:8@16@24B32
v36@0:8@"IDSWPLinkManager"16@"NSString"24B32
v32@0:8@"IDSWPLinkManager"16@"NSString"24
B32@0:8@"IDSWPLinkManager"16@"NSString"24
v40@0:8@"IDSWPLinkManager"16@"NSString"24@"NSError"32
@40@0:8@16q24B32I36
@52@0:8@16@24@32B40B44B48
v36@0:8@?16q24I32
B40@0:8I16q20I28q32
B36@0:8q16I24q28
v40@0:8@16^Q24^Q32
v28@0:8q16B24
v40@0:8@16q24q32
@36@0:8q16q24I32
B24@0:8q16
q24@0:8@16
v32@0:8@16B24B28
v40@0:8@16q24@?32
@"IDSUTunConnection"
@"<IDSUTunPeerDelegate>"
@"IMDispatchTimer"
@"NSObject<OS_dispatch_source>"
@"IDSUTunPeerServiceMap"
B28@0:8@16i24
@24@0:8q16
I24@0:8q16
q20@0:8I16
@32@0:8@16^@24
B52@0:8@16@24B32q36^@44
B56@0:8@16@24B32B36q40^@48
v48@0:8@16@24q32@?40
B40@0:8@16q24^@32
q24@0:8^@16
@24@0:8^{_SecOTRSession=}16
^{_SecOTRSession=}16@0:8
v24@0:8^{_SecOTRSession=}16
^{_SecOTRSession=}
@"IDSEncryptedData"
v24@0:8@?<v@?@"NSDictionary">16
@"IDSXPCConnection"
B20@0:8i16
B32@0:8@16i24B28
v40@0:8@16@24q32
v48@0:8@"IDSSMSRegistrationCenter"16@"IDSRegistration"24@"NSString"32@"NSString"40
v40@0:8@"IDSSMSRegistrationCenter"16@"IDSRegistration"24q32
v24@0:8@"IDSSMSRegistrationCenter"16
v60@0:8@16@24@32@40@48B56
v48@0:8@16@24q32@40
v32@0:8@"IDSAppleIDRegistrationCenter"16@"IDSRegistration"24
v60@0:8@"IDSAppleIDRegistrationCenter"16@"IDSRegistration"24@"NSString"32@"NSString"40@"NSDictionary"48B56
v48@0:8@"IDSAppleIDRegistrationCenter"16@"IDSRegistration"24q32@"NSDictionary"40
v32@0:8@"IDSRegistrationCenter"16@"IDSRegistration"24
v48@0:8@"IDSRegistrationCenter"16@"IDSRegistration"24q32@"NSDictionary"40
v32@0:8@"IDSRegistrationCenter"16@"NSArray"24
v40@0:8@"IDSRegistrationCenter"16@"IDSRegistration"24@"NSArray"32
v24@0:8@"IDSRegistrationCenter"16
v64@0:8@16@24B32B36@40@48@56
B40@0:8@16^B24^B32
v40@0:8@16q24@32
v36@0:8@16B24q28
v32@0:8@16q24
@20@0:8i16
@"IDSUserStore"
@48@0:8@16@24@32Q40
@72@0:8@16@24q32@40@48@56@64
{?="ktVersion"b1"ngmVersion"b1}
v48@0:8@"NSData"16@"NSDictionary"24@"<IDSEncryptionAsyncQueue>"32@?<v@?@"NSData"@"NSError"@"IDSEncryptionMetadata">40
v60@0:8@16@24@32B40@44@?52
v60@0:8@"NSData"16@"NSString"24@"<IDSEncryptionAsyncQueue>"32B40@"IDSCertifiedDeliveryReplayKey"44@?<v@?@"NSData"@"NSDictionary"@"NSError"@"IDSDecryptionMetadata">52
v56@0:8@16@24q32@40@?48
v56@0:8@"NSData"16@"NSData"24q32@"<IDSEncryptionAsyncQueue>"40@?<v@?B@"NSError">48
@52@0:8@16@24@32@40B48
v68@0:8@16@24@32@40@48I56@60
@24@0:8^B16
@48@0:8@16@24^@32^@40
@28@0:8B16^B20
@"IDSCertifiedDeliveryReplayCommitter"
@"IDSPublicIdentityCache"
@"<IDSMPFullDeviceIdentityContainerEncrypter>"
@"<IDSMPFullDeviceIdentitySigner>"
@"IDSSigningKeyDiversifier"
@56@0:8@16@24^@32@40^@48
@"NSData"56@0:8@"NSData"16@"NSDictionary"24^@32@"<IDSEncryptionSyncQueue>"40^@48
@52@0:8@16@24B32@36^@44
@"NSData"52@0:8@"NSData"16@"NSString"24B32@"<IDSEncryptionSyncQueue>"36^@44
@44@0:8@16@24B32^@36
@"IDSPublicKeyStorage"
v36@0:8@16B24@28
v36@0:8@"_IDSSessionConnection"16B24@"NSError"28
v32@0:8@"_IDSSessionConnection"16@"NSError"24
v32@0:8@"_IDSSessionConnection"16@"NSData"24
v36@0:8@16@24I32
v36@0:8@"IDSSocketPairConnection"16@"NSData"24I32
v32@0:8@"IDSSocketPairConnection"16@"IDSSocketPairMessage"24
v24@0:8@"IDSSocketPairConnection"16
v32@0:8@"IDSBaseSocketPairConnection"16@"NSData"24
v24@0:8@"IDSBaseSocketPairConnection"16
v32@0:8@"NSDictionary"16@"IDSDestination"24
v24@0:8@"IDSGroupEncryptionKeyMaterial"16
v24@0:8@"NSArray"16
v24@0:8@"NSError"16
v24@0:8@?<v@?B>16
*16@0:8
@24@0:8d16
v32@0:8Q16@24
v44@0:8@16^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}24r*32I40
v28@0:8i16@20
@36@0:8r^v16I24^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}28
v28@0:8i16i20i24
@28@0:8@16i24
v28@0:8@16i24
v24@0:8i16B20
B48@0:8@16^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}24@32@40
v52@0:8@16c24@28@36@44
v36@0:8@16@24c32
v28@0:8@16S24
v40@0:8@16c24@28C36
v32@0:8@16B24c28
v36@0:8@16@24S32
v40@0:8@16Q24@32
v32@0:8@16c24B28
v36@0:8@16@24C32
v52@0:8@16@24@32@40I48
v52@0:8@16@24@32@40B48
v52@0:8@16@24@32B40@44
v48@0:8S16@20B28@32@40
@32@0:8@16Q24
v32@0:8@16d24
v36@0:8@16i24@28
v28@0:8C16@?20
Q32@0:8Q16@24
v24@0:8i16i20
@"<IDSDSessionAvailabilityCheck>"
@"IDSBaseSocketPairConnection"
@"IDSClientChannel"
@"IDSConnectionContext"
@"IDSGroupStatusNotificationParameters"
[8^{?}]
@"IDSMultiplexerGroupSessionTransport"
@"IDSGroupEncryptionKeyManager"
@"IDSGroupSessionDataCryptor"
@"IDSDSessionInvitationManager"
@"IDSDSessionMessenger"
@"IDSGFTMetricsCollector"
@"IDSDSessionKeyValueDelivery"
@"IDSDGroupStatusNotificationController"
@44@0:8@16i24@28Q36
@"IDSRealTimeEncryptionIdentity"
@56@0:8@?16B24@28q36@44I52
@44@0:8@16@24B32^@?36
@"IDSMPFullDeviceIdentityContainerEncrypter"
@"IDSMessageHashChecker"
{?="timestamp"b1"status"b1}
v24@0:8@"<CUTMetric>"16
v40@0:8@"IDSDeliveryContext"16@"NSArray"24@"NSString"32
v24@0:8@"IDSDeliveryContext"16
v32@0:8@"NSString"16@"NSNumber"24
v32@0:8@"NSArray"16@"NSString"24
v32@0:8@"IDSBaseMessage"16@"NSString"24
v64@0:8@16@24@32@40@48@56
@"NSObject<OS_os_activity>"
@"IDSCoalesceMessageQueueManager"
@"IDSAckStateMachine"
v48@0:8@16q24@32@?40
v48@0:8@"NSData"16q24@"<IDSEncryptionAsyncQueue>"32@?<v@?@"NSData"@"NSError">40
v48@0:8@"NSArray"16q24@"<IDSEncryptionAsyncQueue>"32@?<v@?@"NSArray"@"NSError">40
@48@0:8@16q24@32^@40
@"NSData"48@0:8@"NSData"16q24@"<IDSEncryptionSyncQueue>"32^@40
@"NSArray"48@0:8@"NSArray"16q24@"<IDSEncryptionSyncQueue>"32^@40
@52@0:8I16@20@28@36@44
@24@0:8@?16
@48@0:8@16q24@32@?40
@60@0:8@16q24@32@40@?48B56
@56@0:8@16q24@32@40@?48
@64@0:8@16q24@32q40@48@?56
@84@0:8@16q24@32@40d48d56@64@?72B80
@"<IDSPersistentMapDelegate>"
@"<IDSPersistentMapPersister>"
@"IDSPersistentMapMergePolicy"
v40@0:8@"NSString"16@"NSArray"24@?<v@?@"NSDictionary"@"NSError">32
v32@0:8@"NSString"16@?<v@?@"KTSelfVerificationInfo"@"NSError">24
v40@0:8@"NSString"16@"KTSelfVerificationHealableErrors"24@?<v@?B>32
v32@0:8@"NSString"16@?<v@?B@"NSUUID"@"NSError">24
v32@0:8@"NSDictionary"16@?<v@?@"IDSKTOptInResult">24
v24@0:8@?<v@?@"IDSKTRegistrationStatusProvider">16
@"IDSKeyTransparencyVerifier"
@"IDSPersistentMap"
v40@0:8@"UNUserNotificationCenter"16@"UNNotification"24@?<v@?Q>32
v40@0:8@"UNUserNotificationCenter"16@"UNNotificationResponse"24@?<v@?>32
v32@0:8@"UNUserNotificationCenter"16@"UNNotification"24
v44@0:8@16@24B32@36
@"UNUserNotificationCenter"
@"IDSContactsUtilities"
v76@0:8@16@24@32@40@48@56B64@?68
v84@0:8@16@24@32@40@48@56B64@68@76
v68@0:8@16@24@32@40@48@56B64
v96@0:8@16@24@32@40@48@56@64@72C80B84@?88
v76@0:8@16@24@32@40@48@56@64B72
v88@0:8@16@24@32@40q48@56@64C72B76@80
v104@0:8@16@24@32@40q48@56@64C72B76@80@88@96
v124@0:8@16@24@32@40q48@56@64@72C80B84B88@92@100@108@?116
@"IDSDAccount"
@"IDSDSessionController"
@"IDSGroupEncryptionController"
@"IDSDGroupStatusNotificationControllerBroadcaster"
@80@0:8@16@24@32@40@48@56@64B72B76
@36@0:8I16@20@28
@68@0:8@16@24@32@40@48I56@60
@36@0:8@16I24@28
@"IDSOTRController"
v28@0:8B16@?20
v28@0:8I16@?20
v72@0:8@16@24@32@40@48@56@?64
v52@0:8@16@24@32B40@?44
v44@0:8@16B24B28B32@?36
v44@0:8@16B24B28B32@36
v40@0:8@16d24@32
v32@0:8@"NSData"16@?<v@?@"NSDictionary"@"NSError">24
v24@0:8@?<v@?@"NSArray">16
v28@0:8B16@?<v@?>20
v24@0:8@?<v@?I>16
v28@0:8I16@?<v@?>20
v24@0:8@?<v@?>16
v32@0:8@"NSString"16@?<v@?>24
v48@0:8@"NSString"16@"NSString"24@"NSDictionary"32@?<v@?>40
v72@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSString"56@?<v@?>64
v24@0:8@?<v@?@"NSError">16
v48@0:8@"NSString"16@"IDSURI"24@"IDSURI"32@?<v@?@"IDSQueryKeyTransparencyContext"@"NSArray"@"NSError">40
v52@0:8@"NSString"16@"IDSURI"24@"IDSURI"32B40@?<v@?@"IDSKTVerificationResult"@"NSError">44
v48@0:8@"NSString"16@"IDSURI"24@"IDSURI"32@?<v@?@"NSError">40
v24@0:8@?<v@?@"NSArray"@"NSError">16
v24@0:8@?<v@?B@"NSError">16
v32@0:8@"NSString"16@?<v@?@"NSError">24
v44@0:8@"NSString"16B24B28B32@?<v@?@"NSError">36
v32@0:8@"NSString"16@?<v@?@"NSString"@"NSError">24
v24@0:8@?<v@?@"NSString">16
v32@0:8@"NSArray"16@?<v@?@"NSString">24
v28@0:8B16@?<v@?@"NSError">20
v32@0:8@"NSString"16@?<v@?@"NSMutableArray">24
v44@0:8@"NSString"16B24B28B32@"NSString"36
v40@0:8@"NSString"16d24@"NSString"32
B44@0:8@16@24I32@36
B36@0:8@16I24@28
v36@0:8@16B24@?28
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
d32@0:8@16q24
@"IDSRemoteCredential"
@"IDSPairingManager"
@"IMUserDefaults"
@40@0:8@16q24@32
@"IDSTemporaryPhoneUser"
v40@0:8@"IDSUserStore"16@"<IDSUser>"24@"IDSAuthenticationCertificate"32
v32@0:8@"IDSUserStore"16@"<IDSUser>"24
v40@0:8@"IDSUserStore"16@"IDSAuthenticationCertificate"24@"<IDSUser>"32
@"<IDSTemporaryPhoneUserExpirationManagerDelegate>"
@"IDSPublicIdentityData"24@0:8^@16
@"IDSKTRegistrationData"28@0:8S16^@20
@"NSNumber"24@0:8@"NSString"16
@"IDSNGMKeyLoadingErrorContainer"16@0:8
d24@0:8@16
@28@0:8i16@20
d24@0:8q16
@"IDSSystemAccountAdapter"
@"<IMUserDefaults>"
B24@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16
@24@0:8@"NSString"16
v24@0:8@?<B@?^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}@"<IDSMultiplexerTransportClientConnection>">16
@"IDSGroupEncryptionKeyManager"16@0:8
v24@0:8@"IDSGroupEncryptionKeyManager"16
@"<IDSMultiplexerTransportParticipantIDConverter>"16@0:8
v24@0:8@"<IDSMultiplexerTransportParticipantIDConverter>"16
v24@0:8@"CBPeripheral"16
v32@0:8@"CBPeripheral"16@"NSArray"24
v32@0:8@"CBPeripheral"16@"NSError"24
v40@0:8@"CBPeripheral"16@"NSNumber"24@"NSError"32
v40@0:8@"CBPeripheral"16@"CBService"24@"NSError"32
v40@0:8@"CBPeripheral"16@"CBCharacteristic"24@"NSError"32
v40@0:8@"CBPeripheral"16@"CBDescriptor"24@"NSError"32
v40@0:8@"CBPeripheral"16@"CBL2CAPChannel"24@"NSError"32
@"<IDSWPPacketSendingProtocol>"
v32@0:8@"IDSRapportClient"16@"NSString"24
v40@0:8@"IDSRapportClient"16@"NSDictionary"24@"NSString"32
@"<IDSRapportDeliveryControllerDelegate>"
@"IDSRapportClient"
v24@0:8@"<IDSRapportClientDelegate>"16
v40@0:8@"NSDictionary"16@"NSString"24@?<v@?@"NSError">32
@40@0:8r^v16Q24@32
v72@0:8@16@24@32@40@48@56@64
v32@0:8@"IDSRegistrationPushHandler"16@"NSData"24
v48@0:8@"IDSRegistrationPushHandler"16@"NSString"24@"NSNumber"32@"NSString"40
v32@0:8@"IDSRegistrationPushHandler"16@"NSString"24
v48@0:8@"IDSRegistrationPushHandler"16@"NSString"24@"NSNumber"32@"NSNumber"40
v48@0:8@"IDSRegistrationPushHandler"16@"NSString"24@"NSData"32@"NSString"40
v32@0:8@"IDSRegistrationPushHandler"16@"NSArray"24
v32@0:8@"IDSRegistrationPushHandler"16@"IDSTapToRadarPushPayload"24
v72@0:8@"IDSRegistrationPushHandler"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSString"56@"NSString"64
v32@0:8q16@24
@"IDSRegistrationPushHandler"
B40@0:8q16q24^@32
q32@0:8q16^@24
B52@0:8@16@24@32@40i48
@"IDSKTGossipPolicy"
v48@0:8@"ENGroupContext"16@"_ENGroupInfo"24@"ENGroup"32@?<v@?@"ENGroup"@"NSError">40
v40@0:8@"ENGroupContext"16@"ENGroupID"24@?<v@?@"ENGroup"@"NSError">32
v40@0:8@"ENGroup"16@"ENGroupContext"24@?<v@?@"NSData"@"NSError">32
v40@0:8@"NSData"16@"ENGroupContext"24@?<v@?@"ENGroup"@"NSError">32
v32@0:8@"<ENCypher>"16@?<v@?@"NSArray"B>24
v40@0:8@"ENGroup"16@"ENGroup"24@?<v@?B@"NSError">32
v80@0:8@16@24@32@40q48@56@64@?72
@"IDSGroupServer"
@"ENGroupID"
v32@0:8@16^@24
v36@0:8d16B24@?28
@"CKContainer"
@"CKRecordZone"
@"IDSCloudKitKeyTransparencyDeviceRecord"
@"CUTUnsafePromise"
@"NSUbiquitousKeyValueStore"
Q24@0:8@16
v68@0:8@16@24i32@36@44@52@60
v52@0:8@16@24@32i40@44
v56@0:8@16@24d32@40@48
v56@0:8@16q24@32@40@48
v72@0:8@16@24q32@40@48@56@64
v48@0:8@16q24@32@40
v80@0:8@16@24@32@40@48@56q64q72
v48@0:8@16@24@32q40
v68@0:8@16@24@32@40@48B56@60
v44@0:8@16@24@32S40
v64@0:8S16@20@28@36B44@48@56
v40@0:8Q16@24@32
v40@0:8q16@24@32
v48@0:8q16@24@32@40
v48@0:8q16@24@32B40B44
v56@0:8q16@24@32@40B48B52
v56@0:8@16@24B32B36@40@48
v56@0:8q16@24@32@40@48
v40@0:8q16q24@32
v68@0:8@"NSString"16@"NSString"24i32@"NSDictionary"36@"NSString"44@"NSString"52@"NSString"60
v52@0:8@"NSString"16@"NSString"24@"NSString"32i40@"NSDictionary"44
v32@0:8@"NSString"16@"NSDictionary"24
v32@0:8@"NSString"16@"NSString"24
v40@0:8@"NSString"16@"NSString"24@"NSString"32
v56@0:8@"IDSURI"16@"NSString"24@"IDSPseudonymProperties"32@"IDSPseudonymRequestProperties"40@"NSString"48
v56@0:8@"IDSPseudonym"16@"NSString"24d32@"IDSPseudonymRequestProperties"40@"NSString"48
v48@0:8@"IDSPseudonym"16@"NSString"24@"IDSPseudonymRequestProperties"32@"NSString"40
v56@0:8@"NSData"16q24@"NSString"32@"IDSSigningOptions"40@"NSString"48
v72@0:8@"NSData"16@"NSData"24q32@"NSString"40@"IDSURI"48@"IDSSigningOptions"56@"NSString"64
v32@0:8@"NSNumber"16@"NSString"24
v64@0:8@"NSString"16@"NSString"24@"NSString"32@"NSDictionary"40@"NSNumber"48@"NSArray"56
v40@0:8@"NSString"16@"NSNumber"24@"NSString"32
v32@0:8@"NSData"16@"NSString"24
v48@0:8@"NSNumber"16@"NSString"24@"NSString"32@"NSString"40
v24@0:8@"NSSet"16
v40@0:8@"NSArray"16@"NSString"24@"NSString"32
v24@0:8@"NSDictionary"16
v56@0:8@"NSData"16@"NSString"24@"NSString"32@"NSString"40@"NSDictionary"48
v32@0:8@"NSDictionary"16@"NSString"24
v56@0:8@"NSURL"16@"NSDictionary"24@"NSArray"32@"NSString"40@"NSString"48
v40@0:8@"NSDictionary"16@"NSNumber"24@"NSString"32
v28@0:8B16@"NSString"20
v32@0:8@"NSString"16q24
v48@0:8@"NSDictionary"16q24@"ENGroupID"32@"NSString"40
v56@0:8@"NSString"16@"NSString"24@"NSNumber"32@"NSNumber"40@"NSNumber"48
v80@0:8@"NSString"16@"NSString"24@"NSString"32@"NSNumber"40@"NSNumber"48@"NSNumber"56q64q72
v48@0:8@"NSString"16@"NSString"24@"NSString"32q40
v36@0:8@"NSSet"16@"NSSet"24I32
v32@0:8q16@"NSString"24
v32@0:8@"NSObject<OS_xpc_object>"16@"NSDictionary"24
v36@0:8@"NSString"16@"NSData"24B32
v32@0:8@"NSString"16@"NSData"24
v28@0:8@"NSString"16I24
v40@0:8@"NSData"16@"NSSet"24@"NSString"32
v68@0:8@"NSArray"16@"NSString"24@"NSString"32@"NSData"40@"IDSMessagingCapabilities"48B56@"NSDictionary"60
v44@0:8@"NSArray"16@"NSString"24@"NSString"32S40
v40@0:8@"NSSet"16@"NSString"24@"NSString"32
v48@0:8@"NSData"16@"NSString"24@"NSString"32@"NSData"40
v64@0:8S16@"NSString"20@"NSString"28@"NSArray"36B44@"NSData"48@"NSDictionary"56
v40@0:8@"NSString"16@"NSDictionary"24@"NSDictionary"32
v40@0:8@"NSArray"16@"NSUUID"24@"NSString"32
v32@0:8@"NSString"16@"NSArray"24
v40@0:8@"NSArray"16@"NSArray"24@"NSString"32
v40@0:8Q16@"NSData"24@"NSString"32
v40@0:8q16@"NSData"24@"NSDictionary"32
v40@0:8q16@"NSData"24@"NSData"32
v48@0:8q16@"NSData"24@"NSData"32@"NSArray"40
v48@0:8q16@"NSData"24@"NSData"32B40B44
v56@0:8q16@"NSData"24@"NSData"32@"NSArray"40B48B52
v56@0:8@"NSString"16@"NSString"24B32B36@"NSNumber"40@"NSString"48
v56@0:8q16@"IDSURI"24@"IDSURI"32@"NSString"40@"NSString"48
v40@0:8@"NSString"16@"NSString"24@"NSData"32
v40@0:8@"NSString"16@"NSArray"24@"NSString"32
v48@0:8@"NSString"16@"NSString"24@"NSString"32@"NSArray"40
v40@0:8@"NSString"16@"NSString"24@"NSArray"32
v48@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40
v40@0:8q16q24@"NSString"32
v40@0:8@"NSData"16@"NSString"24@"NSString"32
v80@0:8@16@24@32@40@48@56@64@72
v68@0:8@16@24@32q40@48B56@60
v36@0:8@16I24@28
v44@0:8@16@24I32S36B40
v40@0:8@16@24I32B36
v36@0:8@16S24@28
v40@0:8@16@24I32S36
v48@0:8@16Q24Q32@40
v44@0:8@16@24S32@36
v40@0:8@16@24^B32
v52@0:8@16q24B32d36@44
v44@0:8@16B24@28@36
v36@0:8B16@20@28
v28@0:8B16@"NSDictionary"20
v48@0:8@"NSData"16@"NSString"24@"NSString"32@"NSDictionary"40
v72@0:8@"NSDictionary"16@"NSString"24@"NSDictionary"32@"NSString"40@"NSString"48@"NSString"56@"NSDictionary"64
v64@0:8@"NSData"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56
v80@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSString"56@"NSString"64@"NSDictionary"72
v64@0:8@"NSDictionary"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56
v68@0:8@"NSString"16@"NSString"24@"NSString"32q40@"NSError"48B56@"NSDictionary"60
v64@0:8@"NSString"16@"NSString"24@"NSString"32@"NSArray"40@"NSArray"48@"NSDictionary"56
v56@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSDictionary"48
v40@0:8@"NSString"16d24@"NSError"32
v40@0:8@"NSString"16@"NSString"24@"NSError"32
v32@0:8@"NSData"16@"NSError"24
v40@0:8@"NSData"16@"NSString"24@"NSError"32
v72@0:8@"NSData"16@"NSData"24@"NSArray"32@"NSArray"40@"NSData"48@"NSString"56@"NSError"64
v40@0:8@"NSNumber"16@"NSString"24@"NSError"32
v52@0:8@"NSString"16@"NSDictionary"24@"NSString"32B40@"NSError"44
v64@0:8@"NSDictionary"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSNumber"56
v36@0:8@"NSString"16I24@"NSError"28
v36@0:8@"NSString"16@"NSSet"24B32
v28@0:8@"NSString"16B24
v40@0:8@"NSString"16@"NSArray"24@"NSError"32
v40@0:8@"NSString"16@"NSDictionary"24@"NSError"32
v32@0:8@"NSString"16@"NSError"24
v36@0:8@"NSString"16@"NSArray"24B32
v44@0:8@"NSString"16@"NSArray"24I32S36B40
v40@0:8@"NSString"16@"NSArray"24I32B36
v36@0:8@"NSString"16S24@"NSError"28
v40@0:8@"NSString"16@"NSArray"24I32S36
v40@0:8@"NSString"16@"NSDictionary"24@"NSUUID"32
v32@0:8@"NSString"16@"NSUUID"24
v48@0:8@"NSString"16Q24Q32@"NSData"40
v40@0:8@"NSString"16@"NSData"24@"NSDictionary"32
v44@0:8@"NSString"16@"NSData"24S32@"NSDictionary"36
v56@0:8@"NSDictionary"16@"NSString"24@"NSString"32@"NSString"40@"NSDictionary"48
v48@0:8@"NSDictionary"16@"NSString"24@"NSString"32@"NSString"40
v40@0:8@"NSObject<OS_xpc_object>"16@"NSString"24@"NSError"32
v40@0:8@"NSString"16q24@"NSError"32
v32@0:8q16@"NSError"24
v40@0:8q16@"NSData"24@"NSString"32
v32@0:8@"NSArray"16@"NSError"24
v40@0:8@"NSString"16@"NSString"24^B32
v40@0:8@"NSString"16@"NSError"24@"NSArray"32
v40@0:8q16@"NSString"24@"NSError"32
v52@0:8@"NSString"16q24B32d36@"NSError"44
v44@0:8@"IDSPseudonym"16B24@"NSError"28@"NSString"36
v36@0:8B16@"NSError"20@"NSString"28
v40@0:8@"NSString"16@"NSData"24@"NSError"32
v36@0:8@"NSString"16B24@"NSError"28
B52@0:8@16@24@32@40B48
v32@0:8@"IDSPushHandler"16@"NSData"24
v56@0:8@"IDSPushHandler"16@"NSDictionary"24@"NSString"32@"NSString"40@"IMMessageContext"48
v48@0:8@"IDSPushHandler"16@"NSDictionary"24@"NSString"32@"IMMessageContext"40
v40@0:8@"IDSPushHandler"16@"NSString"24@"IMMessageContext"32
v28@0:8@"IDSPushHandler"16B24
v120@0:8@16@24@32@40@48@56@64B72B76@80@88q96B104q108B116
v36@0:8@16q24I32
v44@0:8@16q24I32@36
v40@0:8@16@24B32B36
v120@0:8@"IDSUTunDeliveryController"16@"IDSProtobuf"24@"NSString"32@"NSNumber"40@"NSString"48@"NSString"56@"NSNumber"64B72B76@"NSString"80@"NSString"88q96B104q108B116
v120@0:8@"IDSUTunDeliveryController"16@"NSData"24@"NSString"32@"NSNumber"40@"NSString"48@"NSString"56@"NSNumber"64B72B76@"NSString"80@"NSString"88q96B104q108B116
v80@0:8@"IDSUTunDeliveryController"16@"NSString"24@"NSString"32@"NSString"40@"NSNumber"48@"NSString"56q64q72
v36@0:8@"IDSUTunDeliveryController"16q24I32
v44@0:8@"IDSUTunDeliveryController"16q24I32@"NSArray"36
v36@0:8@"IDSUTunDeliveryController"16I24@"NSArray"28
v32@0:8@"IDSUTunDeliveryController"16@"NSString"24
v40@0:8@"IDSUTunDeliveryController"16@"NSString"24B32B36
@"NSDictionary"24@0:8@"IDSUTunDeliveryController"16
v32@0:8@"IDSDuetInterface"16@"NSArray"24
v64@0:8@"IDSRapportDeliveryController"16@"NSDictionary"24@"NSString"32@"NSNumber"40@"NSString"48@"NSString"56
v56@0:8@"IDSRegistrationHashProcessor"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48
B60@0:8@16@24i32@36@44@?52
@44@0:8@16@24@32I40
@52@0:8@16@24@32I40B44B48
@48@0:8@16@24@32I40B44
@36@0:8@16B24@28
v60@0:8@?16@24@32@40I48@52
v68@0:8@?16@24@32@40@48I56@60
@48@0:8q16@24@32q40
B20@0:8I16
v48@0:8Q16@24@32@40
B44@0:8Q16@24@32B40
B92@0:8@16i24{?=[8I]}28@60@68@76^@84
v44@0:8@16@24I32@36
@"IMRemoteObjectBroadcaster"
@"IMMultiQueue"
@"IMPair"
@"IMPowerAssertion"
@"IDSDSignInResponder"
@"IDSRegistrationHashProcessor"
@"IDSOpportunisticDeliveryController"
@"IDSInvitationStore"
@"IDSFirewallNotificationCenter"
@"IDSRegistrationConductor"
@"IDSTransparentEndpointViewer"
@"<IDSXPCConnectionProtocol>"
@72@0:8@16@24@32@40B48B52@?56@?64
v32@0:8@"ENGroupContext"16@"ENGroup"24
v40@0:8@"ENGroupContext"16@"ENGroup"24@"ENGroup"32
v24@0:8@"ENGroupContext"16
@"<IDSDGroupContextNotifyingObserverDelegate>"
{?="transparencyVersion"b1}
@36@0:8*16I24*28
v24@0:8r*16
@"IDSEncryptionQueue"
B32@0:8@16^@?24
@"IDSMessageHashStore"
v32@0:8@"NSString"16@?<v@?@"NSSet"@"NSError">24
v32@0:8@"NSArray"16@?<v@?@"NSError">24
v36@0:8@"NSArray"16B24@?<v@?@"NSError">28
@"<IDSActivityPushListenerDelegate>"
B32@0:8@16Q24
@"IDSMMCSUploader"
@"IDSCloudKitContainer"
@"CUTPromiseSeal"
@"NSHashTable"
v36@0:8@"IDSUTunDeliveryController"16@"NSString"24B32
@"IDSUTunDeliveryController"
@"IDSDuetInterface"
v40@0:8@16B24B28B32B36
v32@0:8B16B20B24B28
@28@0:8C16C20I24
@28@0:8*16I24
@"IDSUTunControlChannelIdentityPair"
@"NSObject<OS_nw_connection>"
@"IDSMPPublicLegacyIdentity"
@32@0:8@16d24
@"<IDSTTLCacheDelegate>"
@48@0:8@16@24@?32@40
@56@0:8@16@24d32@?40@48
@28@0:8@16B24
B24@0:8@"<IDSUser>"16
@40@0:8@16@24^@32
@"NSDictionary"40@0:8@"NSData"16@"NSNumber"24^@32
@"NSError"
@32@0:8q16B24B28
@24@0:8B16B20
@36@0:8@16i24@28
@"<IDSDAccountControllerDeviceSupport>"
@"<IDSDAccountControllerDelegate>"
v40@0:8@16@"NSString"24@"NSString"32
B48@0:8@16^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}24@"NSString"32@"NSString"40
v44@0:8@16B24@"NSString"28@"NSString"36
v32@0:8@16@"NSData"24
v48@0:8@16@"NSData"24@"NSArray"32@"NSNumber"40
v40@0:8@16@"IDSQRProtoMaterialInfo"24@"IDSQRProtoMaterial"32
v52@0:8@16c24@"NSUUID"28@"NSDictionary"36@"NSDictionary"44
v40@0:8@16c24@"NSUUID"28C36
v32@0:8@16@"NSDictionary"24
v52@0:8@16@"NSDictionary"24@"NSString"32@"NSString"40I48
v36@0:8@16@"NSDictionary"24S32
v40@0:8@16Q24@"NSString"32
v32@0:8@16@"NSArray"24
v36@0:8@16@"NSDictionary"24c32
v36@0:8@16@"NSUUID"24c32
v40@0:8@16B24@28B36
v36@0:8I16^{sockaddr=CC[14c]}20^{sockaddr=CC[14c]}28
B60@0:8@16@24I32^{sockaddr=CC[14c]}36^{sockaddr=CC[14c]}44d52
B84@0:8@16@24I32^{sockaddr=CC[14c]}36^{sockaddr=CC[14c]}44d52^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}60@68@76
B56@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16@24d32@40@48
v40@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16@24@32
@"IDSUDPLink"
{IDSSockAddrPairTable="iNumPair"i"iMaxNumPair"i"pairs"^{IDSSockAddrPair}"echoCount"i"digestKeyData"[1472C]"digestKeyDataLen"i}
{sockaddr_storage="ss_len"C"ss_family"C"__ss_pad1"[6c]"__ss_align"q"__ss_pad2"[112c]}
v40@0:8i16@20B28q32
Q32@0:8@16@24
Q32@0:8@"NSData"16@"NSUUID"24
@"<WPContinuity>"
@"<IDSWPLinkManagerDelegate>"
B28@0:8q16B24
@"IDSEncryptionController"
@32@0:8@16i24B28
v64@0:8@16^@24^@32@40@48^B56
@64@0:8@16@24@32i40@44@52B60
@60@0:8@16@24@32i40@44@52
@52@0:8@16@24@32i40@44
v56@0:8^@16^@24@32@40^B48
@28@0:8B16B20B24
B24@0:8@?16
@"IDSRegistration"
@"IDSServiceProperties"
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
@"<IDSXPCPairing>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCPairedDeviceManager>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCReunionSync>"32@0:8@"NSString"16@"IDSDXPCDaemon"24
@"<IDSXPCOpportunistic>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCRegistration>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCActivityMonitor>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCServerMessaging>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCKeyTransparency>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCFirewall>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCGroupSessionKeyValueDeliveryProvider>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCInternalTesting>"24@0:8@"IDSDXPCDaemon"16
@"NSXPCListener"
@"IDSDXPCPairing"
@"IDSDXPCPairedDeviceManager"
@"IDSRestoreMonitor"
@"IDSCTAdapter"
@"IDSSIMPhoneUserSynchronizer"
@"IDSSystemAccountUserSynchronizer"
@"IDSTemporaryPhoneUserSynchronizer"
@"IDSUserAccountSynchronizer"
@"IDSHeartbeatCenter"
@"IDSAccountSync"
@"IDSAccountRepair"
@"IDSDeviceCertificationRepair"
@"IDSSIMResponder"
v24@0:8@"IDSDAccountController"16
v32@0:8@"IDSRegistrationController"16@"IDSRegistration"24
v48@0:8@"IDSRegistrationController"16@"IDSRegistration"24q32@"NSDictionary"40
v32@0:8@"IDSRegistrationController"16@"NSArray"24
v24@0:8@"IDSRegistrationController"16
v24@0:8@"IDSDeviceCertificationRepair"16
v28@0:8@"<IDSCTSIM>"16B24
v32@0:8@"<IDSCTSIM>"16@"<IDSCTSimDeactivationInfo>"24
@"IDSPreflightStack"24@0:8@"NSString"16
v32@0:8@"IDSPreflightStack"16@"NSString"24
v32@0:8@"IDSCTPNR"16@?<v@?B>24
v48@0:8@"IDSPhoneNumberValidationStateMachine"16@"NSString"24@"NSString"32@"NSString"40
v32@0:8@"IDSPhoneNumberValidationStateMachine"16q24
@"<IDSPreflightStackStore>"
@"IDSRegistrationReasonTracker"
v60@0:8Q16@24@32@40B48@52
B24@0:8Q16
v40@0:8^I16^I24^I32
B52@0:8@16@24B32q36@44
@48@0:8B16@20@28B36@40
v56@0:8@16B24@28@36B44@48
B72@0:8@16@24@32I40I44I48S52Q56@64
@"IDSCountdown"
@"IDSNRDeviceManager"
@"IDSPairedDeviceRepository"
d32@0:8@16@24
@"<IDSCoalesceMessageQueueManagerDelegate>"
@52@0:8@16@24B32@36@44
@36@0:8B16@20@28
v72@0:8@"NSData"16@"NSData"24@"NSData"32@"NSData"40@"NSData"48@"NSNumber"56@?<v@?@"IDSGroupPutMessage"@"NSError"q@"NSDictionary"@"NSArray">64
v32@0:8@"NSData"16@?<v@?@"IDSGroupGetMessage"@"NSError"q@"NSDictionary"@"NSArray">24
@?32@0:8@16@?24
@?24@0:8@?16
@"<FTMessageDeliveryProtocol>"
@"<IDSGroupServerPushHandler>"
v88@0:8@16@24@32@40@48@56q64B72B76q80
@68@0:8@16@24@32I40q44q52^q60
@68@0:8@16@24I32@36q44q52^@60
v32@0:8@?16@24
@"IDSEndpointCapabilities"
v32@0:8@"IDSActivityDescription"16@"NSString"24
@"IDSActivityDescription"24@0:8@"NSString"16
@"NSArray"24@0:8@"NSString"16
v32@0:8@"IDSActivityInfo"16@"NSString"24
v76@0:8@16@24i32@36@44@52@60@68
v60@0:8@16@24@32i40@44@52
v64@0:8@16@24d32@40@48@56
v64@0:8q16@24@32@40@48@56
v48@0:8q16q24@32@40
v136@0:8@16@24@32q40B48B52B56B60B64q68Q76q84I92i96@100@108B116B120B124B128B132
v148@0:8@16I24I28I32I36@40B48B52B56I60@64@72@80I88I92I96B100@104@112@120B128@132@140
v48@0:8@"IDSCoalesceMessageQueueManager"16@"NSArray"24@"NSString"32@"NSNumber"40
q20@0:8B16
v60@0:8@16@24@32@40B48@?52
v156@0:8@16@24@32@40@48@56@64@72@80B88B92@96B104B108B112@116B124@128@?136@?144B152
v88@0:8@16@24@32@40@48@56@64@72@?80
v132@0:8@16@24@32@40@48@56@64@72@80@88B96@100@108@?116@?124
v168@0:8@16@24@32@40@48@56@64@72B80B84B88@92B100B104B108@112B120@124@?132@?140@148B156@?160
v256@0:8@16d24@32@40@48B56B60B64B68B72B76@80B88@92@100@108@116@124@132@140@148B156B160@164B172B176@180@188B196@200@208@216@224@?232@?240@?248
v80@0:8@16@24@32@40@48@56@64@?72
v244@0:8@16@24@32@40@48B56@60B68B72B76B80q84B92@96@104@112@120@128@136B144B148@152B160B164@168@176B184@188@196@204@212@?220@?228@?236
v56@0:8@16@24q32B40B44q48
@"IDSConnectivityMonitorMetricProperties"
C24@0:8q16
@112@0:8q16S24I28I32B36B40B44B48B52@56@64@72@80@88@96@104
@"IDSSocketPairMessage"
@"IDSProtobuf"
v24@0:8^v16
^v16@0:8
v28@0:8@"IDSNRDeviceBridge"16B24
v28@0:8@"IDSNRDeviceBridge"16C24
v112@0:8@16@24@32@40@48@56B64B68@72@80q88B96q100B108
v72@0:8@16@24@32@40@48q56q64
v28@0:8@"IDSUTunPeer"16B24
v24@0:8@"IDSUTunPeer"16
v112@0:8@"IDSUTunPeer"16@"IDSProtobuf"24@"NSString"32@"NSNumber"40@"NSString"48@"NSNumber"56B64B68@"NSString"72@"NSString"80q88B96q100B108
v112@0:8@"IDSUTunPeer"16@"NSData"24@"NSString"32@"NSNumber"40@"NSString"48@"NSNumber"56B64B68@"NSString"72@"NSString"80q88B96q100B108
v72@0:8@"IDSUTunPeer"16@"NSString"24@"NSString"32@"NSNumber"40@"NSString"48q56q64
v36@0:8@"IDSUTunPeer"16q24I32
v44@0:8@"IDSUTunPeer"16q24I32@"NSArray"36
v36@0:8@"IDSUTunPeer"16I24@"NSArray"28
v228@0:8@16@24@32@40@48q56I64B68B72B76B80@84@92B100B104B108B112B116@120@128@136@144@152@160@168@176B184@188q196@?204@?212@?220
@20@0:8S16
B28@0:8q16I24
v36@0:8@16q24B32
v44@0:8@16@24q32B40
v24@0:8B16B20
@"<IDSUTunDeliveryControllerDelegate>"
@"IDSNRDeviceBridge"
@"IDSNRDevicePreferencesHandler"
@"IDSConnectivityMonitor"
@"CNContactStore"
@"IDSGroupEncryptionKeyMaterial"
^{_SpecificEntitlement=S(?=^SS)C}
v40@0:8@"_ENGroupInfo"16@"ENGroup"24@?<v@?@"ENGroup"@"NSError">32
v32@0:8@"ENGroupID"16@?<v@?@"ENGroup"@"NSError">24
v32@0:8@"ENGroup"16@?<v@?@"NSData"@"NSError">24
v32@0:8@"NSData"16@?<v@?@"ENGroup"@"NSError">24
v32@0:8@"ENStableGroupID"16@?<v@?@"ENGroup">24
v32@0:8@"ENGroupID"16@?<v@?>24
v32@0:8@"ENGroup"16@?<v@?@"NSError">24
v40@0:8@"ENGroup"16@"ENGroup"24@?<v@?@"NSError">32
v24@0:8@"ENGroup"16
v32@0:8@"ENGroup"16@"ENGroup"24
@"NSXPCConnection"
@"IDSDGroupContextNotifyingObserver"
@"<IDSAPNSAckTrackerDelegate>"
@"IDSQueryKeyTransparencyContext"
B28@0:8@16I24
@"CUTPromise"
v36@0:8i16q20@28
v60@0:8q16i24@28@36B44B48@52
v52@0:8q16i24@28@36B44B48
B48@0:8@16@24@32@?40
B48@0:8@16d24@32@?40
B40@0:8@16@24@?32
B28@0:8B16@?20
C24@0:8@16
v32@0:8C16@20C28
v48@0:8q16@24@32@?40
@80@0:8@16@24@32@40@48@56@64@72
v72@0:8q16@24@32@40@48@56@64
@"<FTPasswordManager>"
@"<IDSDSignInResponderDeviceSupport>"
@"<IDSDRegistrationControl>"
@"IDSDeliveryController"
@32@0:8q16@24
@"NSSet"32@0:8q16@"NSSet"24
v28@0:8@"<IDSUser>"16B24
@"IMLockdownManager"
@"FTUserConfiguration"
@"IDSMPPublicDeviceIdentityContainer"
{_opaque_pthread_mutex_t=q[56c]}16@0:8
v80@0:8{_opaque_pthread_mutex_t=q[56c]}16
@"IDSPublicKeyStorageCache"
@"<IDSUser>"
@"IDSUserProperties"
v32@0:8q16@?24
@"IDSRegistrationKeychainManager"
v40@0:8@"IDSActivityMonitorStateManager"16@"IDSActivityUpdate"24@"NSString"32
v36@0:8B16@20@?28
v32@0:8@"<IDSXPCActivityMonitorClient>"16@"NSString"24
v32@0:8@"NSString"16@?<v@?B@"NSError">24
v36@0:8B16@"NSString"20@?<v@?@"NSError">28
v32@0:8@"NSString"16@?<v@?@"NSArray"@"NSError">24
v40@0:8@"IDSActivityInfo"16@"NSString"24@?<v@?@"NSError">32
v40@0:8@"NSString"16@"NSString"24@?<v@?@"NSError">32
@"IDSActivityMonitorStateManager"
@56@0:8@16@24I32I36I40S44@48
v24@0:8@"NSData"16
@"<IDSBaseMessageSigningSession>"16@0:8
v24@0:8@"<IDSBaseMessageSigningSession>"16
@"FTMessageDelivery"16@0:8
B24@0:8@"IDSBaseMessage"16
v24@0:8@"IDSBaseMessage"16
@"IDSBaseMessage"16@0:8
@"NSArray"16@0:8
v24@0:8@"IDSEngramKeyStore"16
v60@0:8@16q24q32@40B48@52
v56@0:8@16q24q32@40@48
q32@0:8#16@?24
v84@0:8@16@24@32@40@48B56@60q68@76
@?40@0:8@16@?24@?32
v56@0:8q16@24@32@40@?48
v60@0:8@16@24@32q40@48B56
B36@0:8@16B24@?28
B56@0:8@16@24@32@40@?48
B56@0:8@16@24d32@40@?48
d24@0:8d16
B72@0:8Q16@24@32@40@48@56@?64
@"<IDSRegistrationCenterMessageDelivery>"
@"IDSGetDependentRegistrationsCenter"
@"IDSValidationQueue"
v28@0:8@"IDSBTLinkManager"16B24
v32@0:8@"IDSBTLinkManager"16@24
v28@0:8@"IDSWPLinkManager"16B24
v32@0:8@"IDSWPLinkManager"16@24
v32@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16@24
v48@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16@24@32@40
B24@0:8B16B20
@44@0:8@16@24Q32S40
Q48@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16@24@32@40
v44@0:8@16@24@?32i40
v36@0:8@16@24i32
v56@0:8@16@24@32@40@?48
v28@0:8@16c24
v36@0:8@16c24I28B32
v36@0:8@16c24@28
v48@0:8@16^i24^i32^i40
v56@0:8@16@24@32@40S48I52
Q56@0:8Q16@24@32@40@48
v48@0:8S16@20@28@36I44
v44@0:8c16@20@28@36
v40@0:8^Q16^I24@32
@"IDSBTLinkManager"
@"IDSWPLinkManager"
[1025c]
^{__SCDynamicStore=}
v40@0:8@"IDSTTLCache"16@24@"NSString"32
v48@0:8@"IDSTTLCache"16@24@"NSString"32@?<v@?@>40
B40@0:8@"IDSTTLCache"16@24@"NSString"32
B24@0:8@"IDSTTLCache"16
@"RPCompanionLinkClient"
@"IDSTTLCache"
c16@0:8
v20@0:8c16
@"IDSKTGossipPolicySpecification"
@72@0:8@16q24@32@40@48@56B64B68
Q20@0:8I16
Q24@0:8q16
v48@0:8i16@20Q28^[16C]36S44
v48@0:8@16Q24^[16C]32S40i44
v28@0:8d16B24
v56@0:8@16@24@32@40q48
v44@0:8Q16@24C32I36B40
v40@0:8Q16@24I32B36
v52@0:8@16B24S28q32i40@44
B36@0:8@16@24I32
v28@0:8B16q20
q20@0:8C16
v68@0:8@16@24S32@36B44B48@52B60B64
@"<IDSUTunConnectionDelegate>"
@"<IDSSocketPairConnectionProtocol>"
@"IDSLocalDeliveryQueue"
[3q]
v24@0:8@"<IDSCTPNRRequestData>"16
v24@0:8@"<IDSCTPNRResponseData>"16
q24@0:8q16
@"<IDSPhoneNumberValidationStateMachineMessageDelivery>"
@"<IDSPhoneNumberValidationStateMachineLockdownManager>"
@"IDSPhoneNumberValidationModeArbiter"
@"IDSCTPNR"
@64@0:8@16@24@32@40@?48@?56
@"IDSDeviceHeartbeatCenter"
@"FTNetworkSupport"
v36@0:8C16@?20@28
v28@0:8C16@20
I24@0:8@16
v36@0:8@16d24C32
v44@0:8@16@24@32I40
v44@0:8@16@24B32@?36
v40@0:8@"<IDSXPCServerMessagingClient>"16@"NSString"24@"NSString"32
v56@0:8@"NSData"16@"NSString"24@"IDSServerMessagingOptions"32@"NSString"40@?<v@?B@"NSError">48
v24@0:8@"IDSCertifiedDeliveryContext"16
v24@0:8^{_dmsg_info=CSCIQ[0C]}16
v40@0:8@16@24Q32
I24@0:8d16
@"IDSRemoteCredential"16@0:8
@"NSDate"16@0:8
@44@0:8B16@20@28@36
v56@0:8@16@24@32B40B44@48
I32@0:8@16@24
v72@0:8@16@24@32@40B48B52B56B60@?64
v64@0:8@16@24@32@40B48B52@?56
v44@0:8I16@20@28@36
I40@0:8@16@24@32
I44@0:8@16@24@32B40
v80@0:8@16@24@32@40Q48@56B64B68@?72
@"<IDSIDStatusDependencyProvider>"
v28@0:8I16@20
v24@0:8@"NSNumber"16
v28@0:8I16@"NSNumber"20
d28@0:8I16@20
v24@0:8@?<v@?@"<IDSXPCPairing>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCPairedDeviceManager>"@"NSError">16
v32@0:8@"NSString"16@?<v@?@"<IDSXPCReunionSync>"@"NSError">24
v24@0:8@?<v@?@"<IDSXPCOpportunistic>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCRegistration>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCActivityMonitor>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCServerMessaging>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCKeyTransparency>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCFirewall>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCGroupSessionKeyValueDeliveryProvider>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCInternalTesting>"@"NSError">16
@44@0:8@16B24@28@36
@"<IDSDXPCDaemonCollaboratorProvider>"
@"<IDSXPCReunionSync>"
@"IDSQuickRelayAllocateMessage"
@"QRSelfAllocationArray"
@"QRStreamInfo"
@80@0:8@16@24@32B40@44^{?=SSIQI*}52@60@?68i76
@40@0:8@16@24^q32
@40@0:8@16@24^B32
B60@0:8@16@24Q32S40S44I48@52
B32@0:8@16S24S28
@84@0:8@16@24B32@36@44@52@60@?68i76B80
@72@0:8@16@24@32@40@48@56@?64
@88@0:8@16I24@28q36S44Q48S56I60@64B72B76i80i84
I20@0:8i16
v32@0:8@16B24i28
v68@0:8I16q20q28I36Q40@48@56B64
@40@0:8@16@?24@?32
v40@0:8@16d24@?32
v48@0:8@16@?24@?32@40
v56@0:8@16@24@?32@?40@48
v24@0:8@"CBCentralManager"16
v32@0:8@"CBCentralManager"16@"NSDictionary"24
v48@0:8@"CBCentralManager"16@"CBPeripheral"24@"NSDictionary"32@"NSNumber"40
v32@0:8@"CBCentralManager"16@"CBPeripheral"24
v40@0:8@"CBCentralManager"16@"CBPeripheral"24@"NSError"32
v40@0:8@"CBCentralManager"16q24@"CBPeripheral"32
v24@0:8@"CBPeripheralManager"16
v32@0:8@"CBPeripheralManager"16@"NSDictionary"24
v32@0:8@"CBPeripheralManager"16@"NSError"24
v40@0:8@"CBPeripheralManager"16@"CBService"24@"NSError"32
v40@0:8@"CBPeripheralManager"16@"CBCentral"24@"CBCharacteristic"32
v32@0:8@"CBPeripheralManager"16@"CBATTRequest"24
v32@0:8@"CBPeripheralManager"16@"NSArray"24
v36@0:8@"CBPeripheralManager"16S24@"NSError"28
v40@0:8@"CBPeripheralManager"16@"CBL2CAPChannel"24@"NSError"32
v24@0:8@"CBScalablePipeManager"16
v40@0:8@"CBScalablePipeManager"16@"NSString"24@"NSError"32
v32@0:8@"CBScalablePipeManager"16@"NSString"24
v32@0:8@"CBScalablePipeManager"16@"CBScalablePipe"24
v40@0:8@"CBScalablePipeManager"16@"CBScalablePipe"24@"NSError"32
@"CBCentralManager"
@"CBPeripheralManager"
@"CBScalablePipeManager"
@"CBPeripheral"
@"<IDSBTLinkManagerDelegate>"
@"IDSNanoRegistryPluginManager"
@"IDSNRDevicePreferences"
@64@0:8@16@24@32^q40q48^@56
@56@0:8@16@24@32q40^@48
@56@0:8@16@24q32q40^@48
v64@0:8@16@24q32q40@48@?56
v96@0:8@16@24@32@40@48@56@64q72@?80B88B92
v104@0:8@16@24@32@40@48@56q64B72@76q84@?92B100
v64@0:8@16@24@32q40q48@?56
@64@0:8@16@24@32q40q48^@56
v56@0:8@16@24q32q40@?48
@56@0:8@16q24@32q40^@48
@68@0:8@16q24I32@36@44q52^@60
v100@0:8@16@24q32@40@48@56@64@72q80@?88B96
v112@0:8@16@24q32@40@48@56@64@72I80@84q92@?100B108
B64@0:8@16@24q32@40q48^@56
B76@0:8@16@24q32@40I48@52q60^@68
@48@0:8@16@24q32^q40
v56@0:8@16@24@32q40@?48
v68@0:8@16@24q32B40q44@52@?60
v32@0:8@?16q24
v72@0:8@16@24@32@40@48@56q64
@"IDSEncryptionQueueManager"
B32@0:8B16I20@?24
@"AVConference"
@"<_IDSSessionConnectionDelegate>"
v40@0:8@16d24q32
v28@0:8@16f24
v40@0:8@16q24B32B36
v44@0:8@16B24q28@36
v44@0:8@16q24B32@36
v32@0:8@16B24I28
v40@0:8@16B24I28@32
v32@0:8@16I24I28
v36@0:8@"AVConference"16q24B32
v36@0:8@"AVConference"16B24@"NSDictionary"28
v40@0:8@"AVConference"16q24@"NSError"32
v32@0:8@"AVConference"16@"NSData"24
v32@0:8@"AVConference"16q24
v40@0:8@"AVConference"16@"VideoAttributes"24q32
v36@0:8@"AVConference"16B24q28
v24@0:8@"AVConference"16
v40@0:8@"AVConference"16q24@"NSDictionary"32
v40@0:8@"AVConference"16q24B32B36
v40@0:8@"AVConference"16@"NSData"24q32
v44@0:8@"AVConference"16B24q28@"NSError"36
v48@0:8@"AVConference"16q24@"NSError"32@"NSDictionary"40
v44@0:8@"AVConference"16q24B32@"NSError"36
v32@0:8@"AVConference"16B24I28
v40@0:8@"AVConference"16B24I28@"NSError"32
v32@0:8@"AVConference"16I24I28
v28@0:8@"AVConference"16I24
v28@0:8@"AVConference"16f24
v28@0:8@"AVConference"16B24
v48@0:8@16I24I28@32@?40
v36@0:8@16I24Q28
v32@0:8@"<IDSXPCGroupSessionKeyValueDeliveryDelegate>"16@"NSUUID"24
v24@0:8@"NSUUID"16
v48@0:8@"NSData"16I24I28@"NSString"32@?<v@?@"NSError">40
v36@0:8@"NSData"16I24Q28
v36@0:8@16i24Q28
i24@0:8@16
@"<IDSDSessionKeyValueDeliveryDelegate>"
v40@0:8@16Q24Q32
v40@0:8Q16Q24Q32
@32@0:8@16B24B28
v24@0:8@?<v@?@"NSDictionary"@"NSError">16
@"ENGroupContext"
v72@0:8@16@24@32@40@48@?56@?64
v56@0:8@16^@24^@32^@40@48
v56@0:8@16@24@32@?40@?48
v148@0:8@16@24@32@40@48B56@60B68B72@76@84B92B96@100@108q116B124B128@?132@?140
v84@0:8@16@24@32@40@48q56B64@68@?76
v56@0:8@16^@24^@32@40@48
v80@0:8@16@24@32@40@48@56@?64@?72
v64@0:8@16@24@32@?40@?48@?56
@"IDSProtoKeyTransparencyLoggableData"
{?="keyIndex"b1}
B56@0:8@"NSData"16@"NSData"24q32@"<IDSEncryptionSyncQueue>"40^@48
@44@0:8@16@24I32@36
@"IDSEndpoint"
v32@0:8@"IDSDAccount"16@"NSArray"24
v48@0:8@16@24@32B40B44
v64@0:8@16@24@32B40B44B48B52B56B60
v60@0:8@16@24@32B40B44B48B52B56
v56@0:8@16@24@32B40B44B48B52
v40@0:8@16B24B28@32
v40@0:8B16B20@24@32
@32@0:8@16@?24
B72@0:8@16@24@32@40@48@56q64
v36@0:8i16@20@?28
v56@0:8@16@24@32@40B48B52
v64@0:8@16@24@32@40@48B56B60
v72@0:8@16@24@32@40@48@56B64B68
B48@0:8@16@24B32B36@40
@84@0:8@16@24@32@40@48@56B64^@68B76B80
@52@0:8@16@24@32^@40B48
v52@0:8@16@24@32B40B44B48
v48@0:8q16@24@32q40
v88@0:8@16@24@32@40q48d56B64B68@?72@?80
v52@0:8@16@24B32@36@44
v60@0:8@16@24@32@40B48@52
@56@0:8@16@24@32@40q48
@312@0:8@16@24@32@40@48@56B64@68B76B80B84@88B96@100B108@112@120q128@136@144@152B160@164B172B176B180B184B188@192@200B208@212@220@228@236B244@248@256B264B268B272B276B280B284B288@292B300@304
@"IDSDestination"
@32@0:8B16q20I28
@40@0:8B16q20I28@32
@28@0:8I16@20
@40@0:8q16@24q32
v32@0:8d16q24
@36@0:8Q16C24^B28
@44@0:8Q16q24B32@36
@40@0:8Q16q24@32
@40@0:8@16@24q32
@48@0:8@16@24q32q40
@68@0:8@16@24q32q40B48q52^B60
v72@0:8@16@24@32@40@48B56C60@?64
v68@0:8@16@24@32@40@48C56@?60
@28@0:8^{__CFArray=}16B24
@48@0:8@16q24@32q40
@28@0:8B16q20
@36@0:8B16q20@28
@64@0:8Q16Q24q32@40B48B52@56
@72@0:8Q16Q24q32@40B48B52@56@64
@64@0:8@16q24Q32Q40@48@56
@56@0:8@16q24Q32Q40@48
v56@0:8@16@24B32B36@40@?48
v32@0:8@?16d24
v28@0:8@?16B24
@"IDSDatabase"
v52@0:8@16B24Q28Q36Q44
v48@0:8@16Q24Q32Q40
v68@0:8@16B24Q28Q36Q44Q52Q60
v52@0:8@16B24Q28Q36q44
v44@0:8@16B24Q28Q36
v76@0:8@16B24Q28Q36Q44Q52Q60Q68
v48@0:8Q16Q24Q32@40
v44@0:8@16Q24Q32I40
v32@0:8I16I20I24I28
v52@0:8Q16I24I28I32@36@44
v32@0:8Q16Q24
v52@0:8@16@24B32d36d44
v56@0:8Q16Q24Q32Q40Q48
v52@0:8@16q24B32d36q44
@"IDSDSessionActiveParticipantsCache"
v32@0:8@"IDSDSession"16@?<v@?B>24
v32@0:8@"IDSDSession"16@?<v@?B@"NSData">24
@"IMNetworkAvailability"
@60@0:8@16@24B32@36@44@52
^{?={tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}{tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}}16@0:8
{?={tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}{tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}}16@0:8
v4608@0:8{?={tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}{tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}}16
@"_IDSSessionConnection"
@"<IDSDSession>"
{?="SRTPSend"{tagSRTPINFO="fSRTPInitialized"i"fSRTPEnded"i"fCancelled"i"xWait"{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}"cWait"{_opaque_pthread_cond_t="__sig"q"__opaque"[40c]}"dwSSRC"I"dwRTPROC"I"wFirstRTPSeq"S"wHighestRTPSeq"S"dwFirstRTCPSeq"I"dwHighestRTCPSeq"I"MasterKey"[16C]"MasterSalt"[14C]"SessionKey"[32C]"SessionSalt"[14C]"dwEncrCountRTPHi"I"dwEncrCountRTPLo"I"dwEncrCountRTCPHi"I"dwEncrCountRTCPLo"I"dwDerivationRate"I"cryptContext"{tagSRTPCryptContext="secAsn1Key"{cssm_data="Length"Q"Data"*}"ccCryptorRef"^{_CCCryptor}"ccContext"[404C]}"wPreCalcSeq"S"pbNextKeyStream"[1600C]"srtpProtocolVersion"i"replayWindow"^{SRTPReplayProtection}}"SRTPRecv"{tagSRTPINFO="fSRTPInitialized"i"fSRTPEnded"i"fCancelled"i"xWait"{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}"cWait"{_opaque_pthread_cond_t="__sig"q"__opaque"[40c]}"dwSSRC"I"dwRTPROC"I"wFirstRTPSeq"S"wHighestRTPSeq"S"dwFirstRTCPSeq"I"dwHighestRTCPSeq"I"MasterKey"[16C]"MasterSalt"[14C]"SessionKey"[32C]"SessionSalt"[14C]"dwEncrCountRTPHi"I"dwEncrCountRTPLo"I"dwEncrCountRTCPHi"I"dwEncrCountRTCPLo"I"dwDerivationRate"I"cryptContext"{tagSRTPCryptContext="secAsn1Key"{cssm_data="Length"Q"Data"*}"ccCryptorRef"^{_CCCryptor}"ccContext"[404C]}"wPreCalcSeq"S"pbNextKeyStream"[1600C]"srtpProtocolVersion"i"replayWindow"^{SRTPReplayProtection}}}
@40@0:8@16q24@?32
@"IDSBaseMessage"
@"IDSValidationSession"
v48@0:8@16q24@?32@?40
v32@0:8q16q24
@28@0:8q16B24
v28@0:8@"NSData"16B24
@48@0:8@16q24@32@40
@56@0:8@16q24@32@40@48
@?<v@?@"NSArray"@"NSArray"@"NSDictionary">16@0:8
@"IDSRegistrationProperties"16@0:8
@"IDSPeerMessage"16@0:8
@"<IDSPrioritizedTokenList>"16@0:8
@"IDSRegistrationProperties"
@"IDSPeerMessage"
@"<IDSPrioritizedTokenList>"
v32@0:8@"IDSPhoneSubscription"16@?<v@?@"NSArray"@"NSError">24
v32@0:8@"NSArray"16@?<v@?@"NSArray"@"NSError">24
v32@0:8@"IDSURI"16@?<v@?B@"NSError">24
v32@0:8@"NSArray"16@?<v@?@"NSDictionary">24
@32@0:8@?16@24
v24@0:8@"IDSPersistentMap"16
@"NSDictionary"48@0:8@"NSDictionary"16@"NSArray"24@"NSString"32@"NSString"40
@56@0:8@16@24@32@40B48B52
@60@0:8@16@24@32@40B48B52B56
@60@0:8@16@24@32@40Q48B56
B48@0:8@16@24@32@40
@76@0:8@16@24@32@40^@48^@56@64B72
d44@0:8@16@24@32I40
q56@0:8@16@24@32@40@48
B56@0:8@16@24@32@40@48
@64@0:8@16@24@32Q40@48@56
B64@0:8@16@24@32@40B48B52@?56
B68@0:8@16@24@32@40B48B52B56@?60
B64@0:8@16@24@32@40@48@?56
v40@0:8@?16@24@32
v56@0:8@16@24@32@?40@48
@"<IDSPeerIDQueryHandler>"
@"<IDSPeerIDPushHandler>"
@36@0:8@16i24i28B32
v32@0:8Q16i24i28
v24@0:8*16
@"IDSGenericConnectionID"
@"IDSSockAddrWrapperPair"
@"IDSHCInfo"
@"NSObject<OS_nw_endpoint>"
@"IDSGenericConnection"
@"IDSDeviceConnectionInfo"
v24@0:8@"NSMutableString"16
@64@0:8d16d24d32d40d48q56
@40@0:8d16d24q32
v72@0:8r^v16Q24^{sockaddr=CC[14c]}32^{sockaddr=CC[14c]}40C48@52B60^B64
C60@0:8@16^{sockaddr=CC[14c]}24^{sockaddr=CC[14c]}32C40r^v44Q52
v56@0:8@16r*24@32@40@?48
B32@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16@24
v56@0:8@16@24@32i40i44@?48
i32@0:8@16@24
v28@0:8^{IDSPortMap=[1024Q]QS}16S24
Q32@0:8@16^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}24
Q36@0:8@16^^{?}24i32
v40@0:8@16@?24@32
{SimpleNSStringToObjectTable="tableSize"i"elements"^{SimpleNSStringToObjectTableElement}"elementCount"i}
@"IDSLinkManager"
B64@0:8@"NSArray"16@"NSData"24@"NSString"32@"NSString"40@"IDSPeerIDQueryContext"48@?<v@?@"NSString"@"NSArray"@"NSArray"@"NSDictionary"@"NSString"B@"NSDictionary"B>56
v32@0:8@?<v@?@"NSString"@"NSArray"@"NSArray"@"NSDictionary"@"NSString"B@"NSDictionary"B>16@"NSString"24
B56@0:8@?16@24@32@40@48
v44@0:8@16@24@32B40
@"FTMessageDelivery_DualMode"
@"<IDSPeerIDNetworkChangeNotifier>"
@"<IDSPeerIDQueryHandlerDelegate>"
@"<IDSPeerIDQueryHandlerDataSource>"
@56@0:8@16@24@32@40Q48
@"IDSTransferServicesController"
v32@0:8@"NSString"16@?<v@?@"<IDSXPCGroupSessionKeyValueDelivery>"@"NSError">24
v40@0:8^@16^@24@32
v64@0:8@16q24@32@40@48@56
v80@0:8@16@24q32@40@48@56@64@72
v96@0:8@16@24@32@40B48@52B60d64@72q80@?88
v48@0:8@?16@24d32@40
B32@0:8q16@24
v92@0:8@16@24@32@40@48@56@64@72q80B88
v40@0:8@16@24d32
v48@0:8q16@24q32@40
v100@0:8B16@20@28@36@44@52@60@68@76@84@?92
B104@0:8@16@24@32@40@48@56@64@72@80@88@96
@88@0:8@16@24@32@40@48@56@64B72B76@80
v56@0:8I16@20q28I36q40@48
v88@0:8@16@24@32@40@48@56q64q72@80
v56@0:8@16@24@32q40@48
B40@0:8@16B24@28B36
B36@0:8@16B24@28
v76@0:8@16@24@32@40I48@?52@?60@?68
v44@0:8@16@24q32I40
v52@0:8@16@24q32@40I48
@?48@0:8@16@24@32@40
B32@0:8@16B24B28
B36@0:8@16B24B28B32
@"<IDSAppleIDRegistrationCenterMessageDelivery>"
@"<IDSPipelineComponent>"24@0:8@"<IDSPipelineComponent>"16
@"CUTUnsafePromise"24@0:8@"<IDSPipelineParameter>"16
@"<IDSPipelineComponent>"
v68@0:8@16@24@32@40B48@?52@?60
B24@0:8@"NSArray"16
@"IDSPairedDeviceKeychainSchema"
@"IDSKTRegistrationData"
@32@0:8S16B20^@24
v24@0:8^B16
S24@0:8@16
B36@0:8@16S24@28
@"TransparencyDaemon"
v64@0:8q16@24@32@40B48B52@56
v56@0:8q16@24@32B40B44@48
v28@0:8@?16I24
@88@0:8@16@24@32@40@48@56@64@72@?80
@"IDSDataMigrationTracker"
B72@0:8@16@24@32@40@48I56I60I64S68
@"<IDSPairedDevicePersister>"
v32@0:8@"NSUUID"16@?<v@?@"NSError">24
v32@0:8@"IDSLocalPairingAddPairedDeviceInfo"16@?<v@?@"NSError">24
v40@0:8@"NSUUID"16q24@?<v@?@"NSError">32
v24@0:8@?<v@?@"IDSLocalPairingLocalDeviceRecord"@"NSDictionary"@"NSError">16
v36@0:8@"NSUUID"16B24@?<v@?@"NSError">28
v40@0:8@"NSString"16@"NSSet"24@?<v@?@"NSError">32
@"IDSDaemon"
@"IDSQuickSwitchHelper"
@"IDSUTunController"
B40@0:8@16@24I32B36
B24@0:8I16B20
B32@0:8@16I24B28
@24@0:8^{__CFArray=}16
@"IDSServer"
@"IDSPhoneNumberValidationStateMachine"
@"<IDSPhoneUserRegistryDeviceSupport>"
@36@0:8B16B20B24B28B32
@40@0:8B16B20B24B28B32B36
@28@0:8q16S24
@24@0:8S16B20
@40@0:8q16q24^@32
B48@0:8@16q24q32^@40
@40@0:8q16^B24^@32
@64@0:8q16@24@32q40^@48^@56
@68@0:8q16B24^B28^B36^B44^@52^@60
B28@0:8S16^@20
B32@0:8B16S20^@24
B40@0:8@16S24B28^@32
B32@0:8S16B20^@24
@48@0:8@16^B24^B32^@40
@56@0:8@16^B24^B32^B40^@48
@52@0:8i16@20@28q36@44
@48@0:8@16@24q32@40
v40@0:8Q16Q24@32
@"<IDSRegistrationHashProcessorDelegate>"
@"IDSFirewallStore"
B24@0:8^B16
@"<IDSDeviceCertificationRepairDelegate>"
@"IDSTemporaryPhoneUserCredential"
v32@0:8@"IDSTemporaryPhoneUserExpirationManager"16@"IDSTemporaryPhoneUser"24
@"IDSTemporaryPhoneUserExpirationManager"
@"IDSTransactionQueue"
v32@0:8@16Q24
v32@0:8@"NSStream"16Q24
v48@0:8@16@24@32^v40
q44@0:8^v16Q24i32^B36
v24@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16
@"CBScalablePipe"
@"<IDSMadridAckTrackerDelegate>"
@"IDSProtoKeyTransparencyTrustedServiceSignatures"
q32@0:8@16@24
@"NSData"32@0:8@"NSString"16@"NSData"24
q32@0:8@"NSString"16@"NSData"24
@88@0:8@16@24@32@40@48@56@64@72@80
v60@0:8@16@24Q32@40B48@52
@32@0:8Q16@24
v48@0:8@16d24@32d40
v64@0:8@16d24@32d40@48@56
Q40@0:8@16@24@32
q24@0:8Q16
@"IDSCloudKitKeyTransparencyStore"
@"IDSKeyTransparencyPolicy"
@"IDSKTAccountKeyManager"
@"<IDSKeyTransparencyRegistrationDataSource>"
@"KTVerifier"
@"<CUTMetricLogger>"
B40@0:8@"NSString"16@"NSString"24@"NSString"32
@"IDSIDStatusQueryController"
v76@0:8@16@24@32@40@48B56@60@68
v52@0:8@16@24@32S40@44
v72@0:8S16@20@28@36B44@48@56@64
softlink:r:path:/System/Library/Frameworks/Contacts.framework/Contacts
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>abs-client</key>
<integer>772496756</integer>
<key>application-identifier</key>
<string>com.apple.identityservicesd</string>
<key>aps-connection-initiate</key>
<true/>
<key>com.apple.BTServer.allowRestrictedServices</key>
<true/>
<key>com.apple.BTServer.appleMfgDataAdvertising</key>
<true/>
<key>com.apple.BTServer.appleMfgDataScanner</key>
<true/>
<key>com.apple.BTServer.le.att</key>
<true/>
<key>com.apple.BTServer.le.pipe</key>
<true/>
<key>com.apple.CommCenter.fine-grained</key>
<array>
<string>data-allowed-write</string>
<string>spi</string>
</array>
<key>com.apple.CompanionLink</key>
<true/>
<key>com.apple.CoreTelephony.DataUsageInfo.allow</key>
<true/>
<key>com.apple.StatusKit.presence.clientID</key>
<string>identityservicesd</string>
<key>com.apple.SystemConfiguration.SCDynamicStore-write-access</key>
<true/>
<key>com.apple.SystemConfiguration.SCPreferences-write-access</key>
<string>YES</string>
<key>com.apple.appleaccount.usernotifications</key>
<true/>
<key>com.apple.asd.client</key>
<string>6624379988</string>
<key>com.apple.authkit.client.private</key>
<true/>
<key>com.apple.bluetooth.internal</key>
<true/>
<key>com.apple.companionappd.connect.allow</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.coreduetd.context</key>
<true/>
<key>com.apple.coretelephony.Calls.allow</key>
<true/>
<key>com.apple.coretelephony.Identity.get</key>
<true/>
<key>com.apple.developer.device-information.user-assigned-device-name</key>
<true/>
<key>com.apple.developer.icloud-container-environment</key>
<string>Production</string>
<key>com.apple.developer.icloud-container-identifiers</key>
<array>
<string>com.apple.private.ids.kt</string>
</array>
<key>com.apple.developer.icloud-services</key>
<array>
<string>CloudKit</string>
</array>
<key>com.apple.gizmoappd.appmanager.allow</key>
<true/>
<key>com.apple.keystore.absinthe</key>
<true/>
<key>com.apple.keystore.sik.access</key>
<true/>
<key>com.apple.managedconfiguration.profiled-access</key>
<true/>
<key>com.apple.mkb.usersession.info</key>
<true/>
<key>com.apple.mobile.deleted.AllowFreeSpace</key>
<true/>
<key>com.apple.mobileactivationd.device-identifiers</key>
<true/>
<key>com.apple.mobileactivationd.spi</key>
<true/>
<key>com.apple.mobilemail.mailservices</key>
<true/>
<key>com.apple.nano.nanoregistry.ids.plugin</key>
<true/>
<key>com.apple.nearbyinteraction.background</key>
<true/>
<key>com.apple.networkd_privileged</key>
<true/>
<key>com.apple.networkrelay.companionLink.isEnabled</key>
<true/>
<key>com.apple.networkrelay.deviceMonitor</key>
<true/>
<key>com.apple.networkrelay.devicePreferences</key>
<true/>
<key>com.apple.networkrelay.devices.read</key>
<true/>
<key>com.apple.networkrelay.devices.write</key>
<true/>
<key>com.apple.payment.all-access</key>
<true/>
<key>com.apple.peerpayment.all-access</key>
<true/>
<key>com.apple.private.FairPlayIOKitUserClient.access</key>
<true/>
<key>com.apple.private.MobileActivation</key>
<array>
<string>RequestReactivation</string>
<string>GetActivationState</string>
</array>
<key>com.apple.private.MobileGestalt.AllowedProtectedKeys</key>
<array>
<string>UniqueDeviceID</string>
<string>SerialNumber</string>
<string>InternationalMobileEquipmentIdentity</string>
<string>MobileEquipmentIdentifier</string>
<string>SysCfg</string>
</array>
<key>com.apple.private.ProvInfoIOKitUserClient.access</key>
<true/>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.appleaccount.app-hidden-from-icloud-settings</key>
<true/>
<key>com.apple.private.cloudkit.buddyAccess</key>
<true/>
<key>com.apple.private.cloudkit.serviceNameForContainerMap</key>
<dict>
<key>com.apple.private.ids.kt</key>
<string>com.apple.private.ids.kt</string>
</dict>
<key>com.apple.private.cloudkit.systemService</key>
<true/>
<key>com.apple.private.communicationsfilter</key>
<true/>
<key>com.apple.private.followup</key>
<true/>
<key>com.apple.private.ids.remotecredentials</key>
<true/>
<key>com.apple.private.ids.remoteurlconnection</key>
<true/>
<key>com.apple.private.imcore.imremoteurlconnection</key>
<true/>
<key>com.apple.private.imcore.imtransferservice</key>
<true/>
<key>com.apple.private.kernel.global-proc-info</key>
<true/>
<key>com.apple.private.keychain.sysbound</key>
<true/>
<key>com.apple.private.lockdown.finegrained-get</key>
<array>
<string>NULL/DevicePrivateKey</string>
<string>NULL/DeviceCertificate</string>
<string>NULL/ActivationPrivateKey</string>
<string>NULL/ActivationState</string>
</array>
<key>com.apple.private.nehelper.privileged</key>
<true/>
<key>com.apple.private.network.interface-control</key>
<true/>
<key>com.apple.private.network.restricted.port.ids_cloud_service_connector</key>
<true/>
<key>com.apple.private.network.restricted.port.ids_service_connector</key>
<true/>
<key>com.apple.private.network.socket-delegate</key>
<true/>
<key>com.apple.private.rtcreportingd</key>
<true/>
<key>com.apple.private.security.storage.IdentityServices</key>
<true/>
<key>com.apple.private.skywalk.observe-stats</key>
<true/>
<key>com.apple.private.skywalk.register-kernel-pipe</key>
<true/>
<key>com.apple.private.skywalk.register-user-pipe</key>
<true/>
<key>com.apple.private.system-keychain</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceLiverpool</string>
<string>kTCCServiceAddressBook</string>
<string>kTCCServiceBluetoothPeripheral</string>
</array>
<key>com.apple.private.ubiquity-additional-kvstore-identifiers</key>
<array>
<string>com.apple.private.ids.kt-kvs</string>
</array>
<key>com.apple.private.usernotifications.bundle-identifiers</key>
<array>
<string>com.apple.identityservicesd.firewall</string>
</array>
<key>com.apple.private.vfs.allow-low-space-writes</key>
<true/>
<key>com.apple.security.attestation.access</key>
<true/>
<key>com.apple.security.exception.files.home-relative-path.read-only</key>
<string>/Library/Caches/PassKit/</string>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.contactsd</string>
<string>com.apple.kvsd</string>
</array>
<key>com.apple.security.exception.sysctl.read-write</key>
<array>
<string>net.link.generic.system.flow_key_trace</string>
</array>
<key>com.apple.security.network.client</key>
<true/>
<key>com.apple.security.network.server</key>
<true/>
<key>com.apple.security.system-groups</key>
<array>
<string>systemgroup.com.apple.pisco.suinfo</string>
</array>
<key>com.apple.seserviced.kmlXpcService</key>
<true/>
<key>com.apple.symptom_diagnostics.report</key>
<true/>
<key>com.apple.telephony.cupolicy-monitor-access</key>
<true/>
<key>com.apple.terminusd.deviceMonitor</key>
<true/>
<key>com.apple.transparency.kt</key>
<true/>
<key>com.apple.wifi.manager-access</key>
<true/>
<key>fairplay-client</key>
<string>1004488730</string>
<key>keychain-access-groups</key>
<array>
<string>ichat</string>
<string>apple</string>
<string>com.apple.apsd</string>
</array>
<key>keychain-cloud-circle</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>identityservicesd</string>
</array>
</dict>
</plist>
abs-client
]t05
application-identifier
com.apple.identityservicesd0
aps-connection-initiate
0/*com.apple.BTServer.allowRestrictedServices
0/*com.apple.BTServer.appleMfgDataAdvertising
0+&com.apple.BTServer.appleMfgDataScanner
com.apple.BTServer.le.att
com.apple.BTServer.le.pipe
0>!com.apple.CommCenter.fine-grained0
data-allowed-write
spi0
com.apple.CompanionLink
00+com.apple.CoreTelephony.DataUsageInfo.allow
0:%com.apple.StatusKit.presence.clientID
identityservicesd0>9com.apple.SystemConfiguration.SCDynamicStore-write-access
0?8com.apple.SystemConfiguration.SCPreferences-write-access
YES0-(com.apple.appleaccount.usernotifications
com.apple.asd.client
66243799880% com.apple.authkit.client.private
com.apple.bluetooth.internal
0*%com.apple.companionappd.connect.allow
com.apple.coreduetd.allow
com.apple.coreduetd.context
0(#com.apple.coretelephony.Calls.allow
0)$com.apple.coretelephony.Identity.get
0E@com.apple.developer.device-information.user-assigned-device-name
0>0com.apple.developer.icloud-container-environment
Production0N0com.apple.developer.icloud-container-identifiers0
com.apple.private.ids.kt01#com.apple.developer.icloud-services0
CloudKit0)$com.apple.gizmoappd.appmanager.allow
com.apple.keystore.absinthe
com.apple.keystore.sik.access
03.com.apple.managedconfiguration.profiled-access
com.apple.mkb.usersession.info
0,'com.apple.mobile.deleted.AllowFreeSpace
03.com.apple.mobileactivationd.device-identifiers
com.apple.mobileactivationd.spi
0&!com.apple.mobilemail.mailservices
0+&com.apple.nano.nanoregistry.ids.plugin
0+&com.apple.nearbyinteraction.background
com.apple.networkd_privileged
03.com.apple.networkrelay.companionLink.isEnabled
0)$com.apple.networkrelay.deviceMonitor
0-(com.apple.networkrelay.devicePreferences
0(#com.apple.networkrelay.devices.read
0)$com.apple.networkrelay.devices.write
com.apple.payment.all-access
0% com.apple.peerpayment.all-access
050com.apple.private.FairPlayIOKitUserClient.access
0O"com.apple.private.MobileActivation0)
RequestReactivation
GetActivationState0
4com.apple.private.MobileGestalt.AllowedProtectedKeys0g
UniqueDeviceIDSerialNumber$InternationalMobileEquipmentIdentity
MobileEquipmentIdentifier
SysCfg050com.apple.private.ProvInfoIOKitUserClient.access
0+&com.apple.private.accounts.allaccounts
0C>com.apple.private.appleaccount.app-hidden-from-icloud-settings
0+&com.apple.private.cloudkit.buddyAccess
0o5com.apple.private.cloudkit.serviceNameForContainerMap
604
com.apple.private.ids.kt
com.apple.private.ids.kt0-(com.apple.private.cloudkit.systemService
0+&com.apple.private.communicationsfilter
com.apple.private.followup
0,'com.apple.private.ids.remotecredentials
0.)com.apple.private.ids.remoteurlconnection
03.com.apple.private.imcore.imremoteurlconnection
0/*com.apple.private.imcore.imtransferservice
0.)com.apple.private.kernel.global-proc-info
0(#com.apple.private.keychain.sysbound
*com.apple.private.lockdown.finegrained-get0`
NULL/DevicePrivateKey
NULL/DeviceCertificate
NULL/ActivationPrivateKey
NULL/ActivationState0*%com.apple.private.nehelper.privileged
00+com.apple.private.network.interface-control
0JEcom.apple.private.network.restricted.port.ids_cloud_service_connector
0D?com.apple.private.network.restricted.port.ids_service_connector
0.)com.apple.private.network.socket-delegate
com.apple.private.rtcreportingd
083com.apple.private.security.storage.IdentityServices
0,'com.apple.private.skywalk.observe-stats
03.com.apple.private.skywalk.register-kernel-pipe
01,com.apple.private.skywalk.register-user-pipe
0&!com.apple.private.system-keychain
com.apple.private.tcc.allow0N
kTCCServiceLiverpool
kTCCServiceAddressBook
kTCCServiceBluetoothPeripheral0[9com.apple.private.ubiquity-additional-kvstore-identifiers0
com.apple.private.ids.kt-kvs0`6com.apple.private.usernotifications.bundle-identifiers0&$com.apple.identityservicesd.firewall01,com.apple.private.vfs.allow-low-space-writes
0*%com.apple.security.attestation.access
0[?com.apple.security.exception.files.home-relative-path.read-only
/Library/Caches/PassKit/0]4com.apple.security.exception.mach-lookup.global-name0%
com.apple.contactsd
com.apple.kvsd0Z.com.apple.security.exception.sysctl.read-write0(&net.link.generic.system.flow_key_trace0&!com.apple.security.network.client
0&!com.apple.security.network.server
0H com.apple.security.system-groups0$"systemgroup.com.apple.pisco.suinfo0'"com.apple.seserviced.kmlXpcService
0)$com.apple.symptom_diagnostics.report
00+com.apple.telephony.cupolicy-monitor-access
0&!com.apple.terminusd.deviceMonitor
com.apple.transparency.kt
com.apple.wifi.manager-access
fairplay-client
100448873008
keychain-access-groups0
ichat
apple
com.apple.apsd0
keychain-cloud-circle
seatbelt-profiles0
identityservicesd
@(#)PROGRAM:identityservicesd  PROJECT:IDSAgent-1000
?333333
333333
?7@Q
BAACert
APNSMessageDeliveryClass
IDSMessageStore
BTOutOfBandKey
PNRInfo
CTPNR
T@"CKContainer",R,N,V_container
CTPNRForSIM:
T@"IDSQueryKeyTransparencyContext",R,N,V_keyTransparencyContext
ContactsUtilities
T@"NSArray",C,V_responseEntries
DSID
T@"NSArray",R,C
FTMessageDelivery_oversized
T@"NSArray",R,N,V_radarKeywords
GDR_oversized
T@"NSData",C,N,V_groupIdentifer
GroupStatus_oversized
T@"NSData",C,V_senderExternalIP
IDCertificate
T@"NSData",R,N,V_phoneSignature
IDSCoreAnalyticsWiProxConnectionEvent:duration:resultCode:
T@"NSDate",&,N,V_expirationDate
IDSDSession
T@"NSDate",C,N,V_expirationDate
IDSFirewall
T@"NSHashTable",&,N,V_listeners
IDSMagnetCorruptionDetailedEvent:correctRawBytesSinceLastCorruption:discardedRawBytes:recoveryTimeInMs:linkType:
T@"NSNumber",&,N,V_localNATType
IDSQuickRelayEventType:eventSubType:duration:resultCode:providerType:transportType:interfaceType:skeEnabled:isInitiator:protocolVersion:retryCount:serviceName:subServiceName:participantCount:
T@"NSNumber",C,V_requiredUpdate
IDSRealTimeEncryptionServiceName:activeParticipants:membershipChangeMKMTimeDelta:
T@"NSNumber",C,V_responseOrigin
IDSServerMessaging
T@"NSString",&,N,V_buildVersion
IDSSocketPairConnectionTCPInfoLinkType:currentRTT:bandwidth:
T@"NSString",&,N,V_localPartyID
IDSWiProxDidConnectToPeer:resultCode:
T@"NSString",&,V_deviceUniqueID
IDSWiProxDidSendData:
T@"NSString",C,N,V_carrierNonce
IMEI
T@"NSString",C,N,V_serialNumber
IPVersion
T@"NSString",C,V_encryptionType
InvalidateStableKeyMaterialInFrameworkCache:
T@"NSString",C,V_responseUserID
KTAccountKeyForServiceIdentifier:
T@"NSUUID",C,N,SsetUUID:,V_uuid
KTLoggableData
T@,&,N,V_object
MEID
TB,N,V_hasUnregisteredContainer
NRPairing
TB,N,V_migrated
OTRController
TB,N,V_shouldStopBTDatagramLink
OTREncryptData:OTRToken:priority:error:
TB,N,V_supportsCloudConnections
OTRStore
TB,N,V_verboseFunctionalLogging
OTRToken
TB,R,N,V_closed
PNRReadyStateChanged:
TC,N,V_linkType
PNRRequestSentWithRequestData:
TI,N,V_SSRCSend
QRAllocator
TI,V_encryption
RTCSessionPromiseWithBatchingInterval:
TS,N,V_reqCount
RealTimeEncryptionController_oversize
Td,N,V_connectionSetupStartTime
SHA256Data
Td,N,V_timeSent
SIMForIdentifier:
Tq,N,V_attempts
SIMInformationDidChange
Tq,N,V_priority
SIMResponder
Tq,R,N,V_status
SMSMechanismWithContext:
Tq,V_deviceTime
SSRCSend
_URIsToRegisterForRegistration:
SessionController
__imFirstObject
StringAsKeyIndex:
_accountingHour
T*,N,V_localKeyMaterial
_actionByTarget
T@"<CUTMetricLogger>",R,N,V_internalMetricLogger
_activityPolicy
T@"<FTMessageDeliveryProtocol>",&,N,V_messageDelivery
_alwaysSkipSelf
T@"<FTPasswordManager>",R,N,V_passwordManager
_avoidMainQueue
T@"<IDSActivityPushListenerDelegate>",W,N,V_delegate
_broadcastQueue
T@"<IDSBaseMessageSigningSession>",C
_callID
T@"<IDSDAccountControllerDelegate>",&,N,V_delegate
_centralManager
T@"<IDSDRegistrationControl>",R,N,V_registrationControl
_checkMessageHashForData:identifier:isRetry:delayedCommitBlock:
T@"<IDSDSession><IDSDSessionAWDMetrics>",W,N,V_delegate
_cleanupAccount
T@"<IDSDXPCDaemonCollaboratorProvider>",&,N,V_collaboratorProvider
_cleanupIncomingFilesDirectory:
T@"<IDSDaemonMIGQueryInterfaceDelegate>",W,V_delegate
_cleanupOutgoingExpiredMessages
T@"<IDSDuetInterfaceDelegate>",W,N,V_delegate
_closed
T@"<IDSIDStatusDependencyProvider>",&,N,V_dependencyProvider
_commCenterDead
T@"<IDSLinkDelegate>",W
_config
T@"<IDSLinkDelegate>",W,V_delegate
_controlChannelVersionCacheLock
T@"<IDSMPFullDeviceIdentityContainerEncrypter>",R,N,V_fullDeviceIdentityContainerEncrypter
_createTimerForTopic:withDelay:
T@"<IDSMadridAckTrackerDelegate>",&,N,V_delegate
_currentGetHandlesRegistrations
T@"<IDSNRDeviceBridgeDelegate>",W,N,V_delegate
_currentPromise
T@"<IDSPeerIDPushHandler>",&,N,V_pushHandler
_defaultQueuedBroadcastAttempts
T@"<IDSPeerIDQueryHandlerDataSource>",&,N,V_dataSource
_deviceIsAsleep
T@"<IDSPersistentMapDelegate>",W,N,V_delegate
_deviceRecordForCloudKitRecord:
T@"<IDSPersistentMapPersister>",&,N,V_originPersister
_dumpServiceMap
T@"<IDSPhoneNumberValidationStateMachineLockdownManager>",&,N,V_lockdownManager
_encryptPayload
T@"<IDSPhoneUserRegistryDeviceSupport>",R,N,V_deviceSupport
_ensureIdentity:savedIndentity:protectionClass:didSaveIdentity:
T@"<IDSPluginNanoRegistryProtocol>",&,N,V_plugin
_errorCodeForRegistrationError:
T@"<IDSPreflightStackStore>",R,N,V_preflightStackStore
_events
T@"<IDSRapportDeliveryControllerDelegate>",W,N,V_delegate
_expiry
T@"<IDSRegistrationHashProcessorDelegate>",W,N,V_delegate
_fixedInterface
T@"<IDSSocketPairConnectionDelegate>",W,N,V_delegate
_gameCenterShouldSigninOnModify
T@"<IDSTemporaryPhoneUserExpirationManagerDelegate>",W,N,V_delegate
_groupIDToSKMRecoveryRetryCount
T@"<IDSUTunDeliveryControllerDelegate>",W,N,V_delegate
_groups
T@"<IDSUser>",&,N,V_user
_headerOverhead
T@"<IDSXPCReunionSync>",&,N,V_reunionSyncCollaborator
_identityClassC
T@"<_IDSSessionConnectionDelegate>",W,N,V_delegate
_identityLoaded
T@"CNContactStore",&,N,V_contactStore
_invalidateMessagesDequeueTimer
T@"CUTDeferredTaskQueue",R,N,V_cleanupAbsintheTask
_inviteSentTime
T@"CUTDeferredTaskQueue",R,N,V_processUsageNotificationsTask
_isAbsintheV3EnabledByServerBag
T@"CUTDeferredTaskQueue",R,N,V_sendDeregistrationTask
_isBuddyShowing
T@"CUTDeferredTaskQueue",R,N,V_storeAccountTask
_isFinalMessage
T@"CUTPromise",&,N,V_migrationPromise
_isReplayError:
T@"CUTUnsafePromise",&,N,V_currentDeviceRecordsPromise
_isUnderFirstDataProtectionLock
T@"ENGroupID",&,N,V_groupID
_keyDiversifier
T@"FTMessageDelivery",R,N,V_messageDelivery
_kickoffExpirationTimerForInfo:
T@"FTMessageDelivery_DualMode",&,N,V_dualInterfaceidQueryMessageDelivery
_lastConnection
T@"IDSAccountRepair",&,N,V_accountRepair
_lastPacketTime
T@"IDSAckStateMachine",R,N,V_ackStateMachine
_latestLinkType
T@"IDSActivityPushListener",&,N,V_pushListener
_linkID
T@"IDSAuthenticationCertificate",R,N,V_phoneAuthenticationCertificate
_loaded
T@"IDSBaseMessage",R
_lookupEndpoint
T@"IDSCTAdapter",&,N,V_ctAdapter
_manateeRetries
T@"IDSCTPNRValidationMechanism",R,N
_mayBringUpWiFi
T@"IDSCertifiedDeliveryReplayCommitter",R,N,V_replayStateCommitter
_midSynchronize
T@"IDSCloudKitKeyElectionStore",R,N,V_cloudKitElectionStore
_migrationBlock
T@"IDSCloudKitKeyTransparencyStore",R,N,V_keyTransparencyStore
_needsMigration
T@"IDSConnectivityMonitor",&,N,V_connectivityMonitor
_nominateBlocks
T@"IDSContactsUtilities",&,N,V_contactUtilities
_noteRegistrationIdentityUpdate
T@"IDSDAccount",R,N
_notifySuccess:
T@"IDSDAccountController",R,N
_object
T@"IDSDGroupContextNotifyingObserver",&,N,V_observer
_originalbtUUID
T@"IDSDGroupStatusNotificationControllerBroadcaster",R,N,V_broadcaster
_pairingManager
T@"IDSDServiceController",R,N
_participantMirageHandshakeBlob
T@"IDSDSessionActiveParticipantsCache",&,N,V_cache
_peerID
T@"IDSDSessionInvitationManager",&,N,V_invitationManager
_pendingPeerMap
T@"IDSDSessionMessenger",&,N,V_messenger
_phoneNumberValidationStartDate
T@"IDSDXPCPairedDeviceManager",&,N,V_pairedDeviceManagerCollaborator
_pipePeripheral
T@"IDSDaemon",&,N,V_idsDaemon
_plistCachePath
T@"IDSDatabase",R,&,N,V_database
_pluginRequests
T@"IDSDestination",C,V_destinations
_postHomeNumberNotificationBeforeAlertForIdentifier:forcefully:
T@"IDSDeviceConnectionInfo",&,N,V_deviceConnectionInfo
_previousLocalStableKeyMaterial
T@"IDSEncryptedData",R,N,V_encryptedResult
_processIncomingRemoteResourceTransferMessage:guid:context:specificOriginator:broadcastTopic:toIdentifier:topic:messageContext:
T@"IDSEncryptionQueue",&,N,V_syncQueue
_pseudonymAlias
T@"IDSEncryptionQueueManager",&,N,V_queueManager
_queues
T@"IDSEndpointCapabilities",&,N,V_deviceCapabilities
_rateLimitingKeyForURI:service:
T@"IDSFrequentURISuggester",&,N,V_uriSuggester
_reason
T@"IDSGameCenterData",&,N
_registeredDeserializationError
T@"IDSGenericConnectionID",&,N,V_connectionID
_relaySessionID
T@"IDSGroupEncryptionKeyManager",&,N
_reloadSettings
T@"IDSGroupEncryptionKeyMaterial",&,N,V_previousLocalStableKeyMaterial
_removeAccount:
T@"IDSGroupServerKeyElectionStore",R,N,V_groupServerElectionStore
_removeDevicePreferencesHandler
T@"IDSHeartbeatCenter",&,N,V_heartbeatCenter
_resetVariables
T@"IDSKTAccountKeyManager",R,N,V_accountKeyManager
_responseOrigin
T@"IDSKTGossipPolicySpecification",&,N,V_spec
_responseUserID
T@"IDSKTRegistrationData",&,N,V_unregisteredKTData
_resultExpected
T@"IDSKVStore",&,N,V_kvStore
_scheduleDependentRegistrations
T@"IDSKeyTransparencyVerifier",&,N,V_keyTransparencyVerifier
T@"IDSKeyTransparencyVerifier",R,N,V_transparencyVerifier
_selfInstanceID
T@"IDSKeychainWrapper",&,N,V_keychainWrapper
_sender
T@"IDSLinkManager",R,N,V_linkManager
_serverHeartBeatTimerHitOnMain:
T@"IDSMPFullDeviceIdentityContainer",&,N,V_registeredIdentityContainer
_serviceIndexToKTRegDataConfigs
T@"IDSMPFullDeviceIdentityContainerEncrypter",R,N,V_fullDeviceIdentityContainerEncrypter
_sessionStorage
T@"IDSMPFullLegacyIdentity",&,N,V_identityClassC
_setHourlyTimer
T@"IDSMPFullLegacyIdentity",&,N,V_localUnauthenticatedFullIdentity
_shouldAllowLiveMessageDelivery
T@"IDSMPFullLegacyIdentity",&,N,V_unSavedidentityClassC
_shouldReplaceLocalDestination:
T@"IDSMPFullLegacyIdentity",R,N,V_localFullIdentity
_signOutDomain:
T@"IDSMPPublicLegacyIdentity",&,N,V_remoteUnauthenticatedPublicIdentity
_startAllocateRequestForDevice:
T@"IDSMessageHashChecker",R,N,V_messageHashChecker
_startEchoTimer
T@"IDSNGMKeyLoadingErrorContainer",R,N,V_errorContainer
_startQRConnectionWithDefaults:
T@"IDSNRBluetoothLinkPreferences",&,N,V_bluetoothLinkPreferences
_status
T@"IDSNRDeviceIdentifier",R,&,N,V_deviceIdentifier
_submitAWDMetric:withContainer:
T@"IDSNRDeviceManager",R,N,V_nrDeviceManager
_suspendTraffic
T@"IDSNRDeviceMonitor",&,N,V_nrDeviceMonitor
_temporaryPhoneUserSynchronizer
T@"IDSNRDevicePreferencesHandler",&,N,V_nrDevicePreferencesHandler
_timeSubscribed
T@"IDSOTRController",&,N,V_OTRController
_topics
T@"IDSOpportunisticCache",&,N,V_cache
_unsentOutgoingMessagesUpToLimit:byteLimit:priority:accountUUID:wantsPayload:requireDuet:localDestinationDeviceID:messageTypes:
T@"IDSPairedDeviceRepository",R,N,V_pairedDeviceRepository
_updateHandles:
T@"IDSPeerIDManager",&,N,V_peerIDManager
_updatePseudonymsFromEmailInfo:
T@"IDSPeerIDManager",R,N,V_peerIDManager
_useStunMICheck
T@"IDSPeerMessage",&,N,V_messageToSend
_userHasDisabledSMSRegistration
T@"IDSPersistentMap",&,N,V_persistentMap
_utunController
T@"IDSPhoneNumberValidationModeArbiter",&,N,V_arbiter
_validationData
T@"IDSPhoneUser",&,N,V_phoneUser
_writeSuspended
T@"IDSPreflightStack",C,N
absintheRetries
T@"IDSProtoKeyTransparencyTrustedServiceSignatures",R,N,V_signatures
account
T@"IDSPublicIdentityCache",R,N,V_publicIdentityCache
accountRemoved:
T@"IDSPublicKeyStorage",R,N,V_publicKeyStorage
accountUniqueID
T@"IDSPushHandler",&,N,V_persistentEnrollmentHandler
accountWithServiceName:loginID:
T@"IDSPushHandler",R,N
ackStateMachine
T@"IDSQuickSwitchHelper",&,N,V_quickSwitchHelper
activityMonitor
T@"IDSRateLimiter",&,N,V_firewallRateLimiter
addServiceType:
T@"IDSRateLimiter",&,N,V_negativeRegistrationUpdateCache
address
T@"IDSRateLimiter",&,N,V_registrationAttemptRateLimiter
aliases
T@"IDSRateLimiter",&,N,V_simDeactivationRequestRateLimiter
allTraditionallyPairedUniqueIDs
T@"IDSRateLimiter",&,N,V_wideWindowSMSTimeoutRateLimiter
allowForceFetch
T@"IDSRealTimeEncryptionIdentity",R,C,V_forPublicIdentity
appValueForKey:
T@"IDSRealTimeEncryptionIdentity",R,N,V_previousIdentityForDevice
appleID
T@"IDSRegistration",R,N,V_registrationInfo
applicationPublicDeviceIdentity
T@"IDSRegistrationController",&,N,V_registrationController
arbiter
T@"IDSRegistrationHashProcessor",R,N,V_queryUpdateNotifier
arrayWithArray:
T@"IDSRegistrationKeyManager",&,N,V_registrationKeyManager
T@"IDSRegistrationKeyManager",R,N,V_registrationKeyManager
basePhoneNumber
T@"IDSRegistrationKeychainManager",&,N,V_registrationKeychainManager
broadcastAccountInfoChangedTask
T@"IDSRegistrationReasonTracker",&,N,V_registrationReasonTracker
bypassSizeCheck
T@"IDSRemoteCredential",&,N,V_syncCredential
cancelOpportunisticDataOnService:withIdentifier:messageContext:
T@"IDSRestrictions",&,N,V_restrictions
capabilityFlags
T@"IDSSIMResponder",&,N,V_SIMResponder
channel
T@"IDSServerBag",&,N,V_bag
cleanUpExpiredMasterKeyMaterial
T@"IDSServerBag",&,N,V_serverBag
clearApplicationPublicIdentitys
T@"IDSServiceProperties",R,N
clientUniquePID
T@"IDSSockAddrWrapper",C,N,V_localSA
clusterByUpdatingGroupID:error:
T@"IDSSockAddrWrapper",R,&,N,V_localAddress
command
T@"IDSSockAddrWrapperPair",C,N,V_addressPair
completionQueue
T@"IDSStallDetector",&,N,V_outgoingStallDetector
compressionInfo
T@"IDSSystemAccountUserSynchronizer",&,N,V_systemAccountUserSynchronizer
connect
T@"IDSTemporaryPhoneUser",&,N,V_user
connectQRServer
T@"IDSTemporaryPhoneUserCredential",&,N,V_credential
connectionTimer
T@"IDSTemporaryPhoneUserSynchronizer",&,N,V_temporaryPhoneUserSynchronizer
containsObject:
T@"IDSTransparentEndpointViewer",R,N,V_transparentEndpointViewer
containsString:
T@"IDSURI",R,N,V_fromURI
continuityClientInstanceCreated
T@"IDSURI",R,N,V_remoteURI
controlChannelVersionForCbuuid:
T@"IDSUTunConnection",&,N,V_cloudConnection
copyPeerWithID:
T@"IDSUTunControlChannelIdentityPair",&,N,V_identityPair
T@"IDSUTunDeliveryController",&,N,V_utunDeliveryController
currentMetricCollectorForTopic:
T@"IDSUserProperties",&,N,V_properties
dataWithLength:
T@"IDSUserStore",R,N
dealloc
T@"IDSValidationQueue",R,V_validationQueue
defaultLinkType
T@"IDSXPCConnection",&,N,V_clientConnection
defaultPeerConnectivityChanged:
T@"IDSXPCConnection",R,N,V_connection
deserializeSessionInfoMetadata:
T@"IMDispatchTimer",&,N,V_repairTimer
destinationWithAlias:pushToken:
T@"IMMultiQueue",&,N,V_multiQueue
devicePublicKey
T@"IMSystemMonitor",&,N,V_systemMonitor
deviceSignature
T@"IMTimer",&,N,V_connectionTimer
deviceWithUniqueID:updatedUUID:
T@"IMTimer",&,N,V_inviteTimer
didCreateGroup:
T@"IMTimer",&,N,V_packetLossTimer
disableAccount:
T@"IMUserDefaults",&,N,V_userDefaults
doCheckSuspendTrafficForDevice:
T@"NSArray",&,N,V_adHocServiceNames
duetIdentifiers
T@"NSArray",&,N,V_aggregateMessages
enableOTRForDefaultPairedDevice
T@"NSArray",&,N,V_appleIDPrimaryDependentRegistrations
encryptedResult
T@"NSArray",&,N,V_dependentRegistrations
encryptionBlock
T@"NSArray",&,N,V_endpoints
endSessionTimer
T@"NSArray",&,N,V_lackAll
enqueueMessage:
T@"NSArray",&,N,V_pseudonyms
expirationPhase
T@"NSArray",&,N,V_requireAll
fetchAllEntries
T@"NSArray",&,N,V_requiredLackOfCapabilities
fetchPhoneUserSubscriptionSourceWithRequestUUID:messageContext:
T@"NSArray",&,N,V_serviceDuetIdentifiers
fileForOptions:
T@"NSArray",&,N,V_tokens
firstOutgoingPacketTime:forMKI:
T@"NSArray",&,N,V_vettedEmails
fromURI
T@"NSArray",C,N,V_dependentRegistrations
generateLinkReport:forceReport:
T@"NSArray",C,N,V_responseMechanisms
T@"NSArray",C,SsetURIs:,V_uris
getBytes:range:
T@"NSArray",C,V_accessoryRequests
getPairedDevicesWithCompletion:
T@"NSArray",C,V_recipients
gossipEnabledServiceIdentifiers
T@"NSArray",C,V_responseConsentTokens
groupIDToStableKeyMaterialCache
T@"NSArray",C,V_responseServiceUserIDs
handleRegistrationSMSSuccessfullyDeliveredWithTelephonyTimeout:
T@"NSArray",C,V_responseSpamMessages
hardwareVersion
T@"NSArray",C,V_spamMessages
hasEndedSession
T@"NSArray",R,C,D,N
hasMatchingURIs
T@"NSArray",R,N,V_activeRegistrations
hasParticipantID:participantID:
T@"NSArray",R,N,V_endpoints
healthDebugging
T@"NSArray",R,N,V_radarQueryParameter
iCloudIdentitiesFromIdentities:
T@"NSArray",R,N,V_subscribedURIs
idsKeychainWrapperDataProtectionClassFromIMDataProtectionClass:
T@"NSArray",R,N,V_validationMechanisms
initWithConnectionID:protocol:keyMaterialLength:isCloudEnabled:
T@"NSArray",R,W,N
initWithDouble:
T@"NSData",&,N,V_accountBlob
initWithLength:
T@"NSData",&,N,V_cert
initWithOTRController:OTRToken:
T@"NSData",&,N,V_controlChannelCachedSYN
initWithPhoneNumber:phoneToken:
T@"NSData",&,N,V_dataToEncrypt
initWithRegistrationKeyManager:
T@"NSData",&,N,V_forwardingTicket
initWithString:
T@"NSData",&,N,V_localBlob
internalCleanup
T@"NSData",&,N,V_localICEData
invalidateTimer
T@"NSData",&,N,V_localSKEData
isEmpty
T@"NSData",&,N,V_ngmPublicIdentity
isEqualToArray:
T@"NSData",&,N,V_participantData
isFamilyService
T@"NSData",&,N,V_participantMirageHandshakeBlob
isKnown
T@"NSData",&,N,V_pushToken
isLocal
T@"NSData",&,N,V_remoteBlob
isPiscoDisabled
T@"NSData",&,N,V_remoteICEData
isQuickSwitchingToAnotherDevice
T@"NSData",&,N,V_remoteSKEData
isSessionReady:
T@"NSData",&,N,V_token
isSharedSession
T@"NSData",C
isValid
T@"NSData",C,N,V_BAACert
T@"NSData",C,N,V_groupPayload
keyRoll
T@"NSData",C,N,V_intermediateRootCert
keyType
T@"NSData",C,N,V_publicIdentityData
keychainManager
T@"NSData",C,N,V_pushToken
T@"NSData",C,N,V_responseAbsintheResponse
kvStore
T@"NSData",C,N,V_responseCertificateData
lackAll
T@"NSData",C,N,V_scoringNonce
link:didWiFiNWPathFlagsChanged:
T@"NSData",C,V_IDSSessionID
localIdentities
T@"NSData",C,V_activeRelayIP
localSA
T@"NSData",C,V_authenticationDataSig
loginID
T@"NSData",C,V_data
mainAccountGuid
T@"NSData",C,V_deviceScore
markAllMessageAsPendingDeleteForAccounts:withDestinationDevice:
T@"NSData",C,V_engramID
materialContent
T@"NSData",C,V_existingRelaySessionToken
members
T@"NSData",C,V_forwardingSig
mergePolicyType
T@"NSData",C,V_inferredExternalIP
messageDelivery
T@"NSData",C,V_messageUUID
messagePriority
T@"NSData",C,V_payloadMetadata
migrateToSecureStorageForClassA
T@"NSData",C,V_previousRelayIP
missingIdentity
T@"NSData",C,V_relayIP
natType
T@"NSData",C,V_relaySessionID
nextSendSMSDate
T@"NSData",C,V_relaySessionToken
nrDeviceManager
T@"NSData",C,V_requestID
numberWithBool:
T@"NSData",C,V_responseCertificate
numberWithLong:
T@"NSData",C,V_targetSessionToken
onTransportThread_UpdateProtocolQualityOfService:linkID:isGood:
T@"NSData",C,V_validationData
optedIn
T@"NSData",R,C,V_encryptedDataBlob
originPersister
T@"NSData",R,N,V_accountKey
packetsReceived
T@"NSData",R,N,V_certificateSigningRequest
pairedDeviceManagerCollaborator
T@"NSData",R,N,V_deviceData
participantData
T@"NSData",R,N,V_encryptedDataBlob
passwordManager
T@"NSData",R,N,V_loggableData
payload
T@"NSData",R,N,V_publicLegacyIdentityData
peerMap
T@"NSData",R,N,V_publicNGMPrekeyData
phoneBookNumber
T@"NSData",R,N,V_resultData
T@"NSData",R,N,V_signedData
prepareControlChannelForDeviceConnectionInfo:genericConnection:
T@"NSDate",&,N
previousRelayIP
T@"NSDate",&,N,V_lastDisconnection
processAckForSocketPairMessage:
T@"NSDate",&,N,V_nextSendSMSDate
promise
T@"NSDate",&,N,V_registrationStateChangedDate
protobufReceived:withGUID:forTopic:toIdentifier:fromID:context:
T@"NSDate",&,N,V_startConnectingDate
protocolVersion
T@"NSDate",&,V_expirationDate
pseudonymForPseudonymURIString:
T@"NSDate",C,N,V_nextRegistrationDate
publicClassAKey
T@"NSDate",C,V_enqueuedDate
publicClassDKey
T@"NSDate",C,V_responseCertificateExpiration
qrError
T@"NSDate",R,V_creationDate
queryLinkProbingStatus:options:
T@"NSDictionary",&,N,V_attributes
queueStatistics
T@"NSDictionary",&,N,V_contextInfo
T@"NSDictionary",&,N,V_defaultPairedDependentRegistrations
realmByListener
T@"NSDictionary",&,N,V_deviceSignatureByService
receivedGroupStableKeyMaterial:fromPushToken:sessionID:groupID:
T@"NSDictionary",&,N,V_entitlements
registerAccount:messageContext:
T@"NSDictionary",&,N,V_ktRegDataByServiceType
registerPluginForGroup:options:
T@"NSDictionary",&,N,V_payload
registrationStateChangedCounter
T@"NSDictionary",&,N,V_relayCancel
relaySessionKey
T@"NSDictionary",&,N,V_relayUpdate
remoteHostAwake
T@"NSDictionary",&,N,V_sessionToBlockMap
removeListener:
T@"NSDictionary",&,N,V_subservicesByPrimaryService
removeObserver:
T@"NSDictionary",C,N,V_regionServerContext
replayCommitter
T@"NSDictionary",C,V_additionalDictionary
request
T@"NSDictionary",C,V_deliveryStatusContext
resetSMSCounter
T@"NSDictionary",C,V_privateDeviceData
responseEntries
T@"NSDictionary",C,V_responseExtraInfo
responseMessage
T@"NSDictionary",C,V_responseSpamMessage
retainArguments
T@"NSDictionary",R
rtcType
T@"NSDictionary",R,D,N
T@"NSDictionary",R,N,V_KTAccountKeyByService
T@"NSDictionary",R,N,V_cumulativeIncomingStatistics
sampleMkMCollectionToBroadcast:
T@"NSDictionary",R,N,V_optInEligibleKTApplicationToIDSServiceIdentifier
scopeID
T@"NSDictionary",R,N,V_serviceToVerifier
selfURI
T@"NSError",&,N,V_error
sendOnePerToken
T@"NSError",&,N,V_identityToRegisterError
sendRealTimeEncryptionMasterKeyMaterial:toGroup:messageContext:
T@"NSError",&,N,V_registeredKeychainError
service
T@"NSError",&,N,V_unregisteredDeserializationError
serviceNameToControlCategoryMap
T@"NSError",R,N,V_error
sessionStarted:
T@"NSMapTable",&,N,V_actionByTarget
setAccessCount:
T@"NSMutableArray",&,N,V_applicationPublicIdentitys
setAccessoryID:
T@"NSMutableArray",&,N,V_candidateEmails
setAccountGUID:
T@"NSMutableArray",&,N,V_handlers
setAccountType:
T@"NSMutableArray",&,N,V_observerProxies
setActivityMonitorEntitlements:
T@"NSMutableArray",&,N,V_queryQueue
setAuthenticationDataAuthToken:
T@"NSMutableArray",&,N,V_requests
setBroadcastID:
T@"NSMutableArray",&,N,V_trustedServices
setChunkNumber:
T@"NSMutableArray",&,N,V_validationContextQueue
setContextInfo:
T@"NSMutableArray",R,N,V_registeredPairedDeviceDidConnectBlockPairs
setCsr:
T@"NSMutableDictionary",&,N
setCurrentInFlightSyncAttempts:
T@"NSMutableDictionary",&,N,V_backingCache
setDefaultPairedDeviceEndpoint:
T@"NSMutableDictionary",&,N,V_cachedIsSameSIM
setDeviceScore:
T@"NSMutableDictionary",&,N,V_clientDataUpdateBlocks
setDidRegisterWithKTAccountKey:
T@"NSMutableDictionary",&,N,V_clientRemoteObjectsByTopic
setDisplayName:
T@"NSMutableDictionary",&,N,V_currentInFlightSyncAttempts
setEnvironment:
T@"NSMutableDictionary",&,N,V_endpointMap
setForceKeyRoll:withCompletion:
T@"NSMutableDictionary",&,N,V_extraCompletionBlocks
setForcedLocal:
T@"NSMutableDictionary",&,N,V_keychainCache
setGeo:
T@"NSMutableDictionary",&,N,V_purgeClientDataBlocks
setGroupStreamInfo:sessionInfo:
T@"NSMutableDictionary",&,N,V_queueMap
setHasMoreData:
T@"NSMutableDictionary",&,N,V_recentlyBlockedHandles
setInteresting:
T@"NSMutableDictionary",&,N,V_serviceIndexToKeyConfigs
setIsConnected:
T@"NSMutableDictionary",&,N,V_timerMap
setIsSuspended:
T@"NSMutableDictionary",&,N,V_usersToTimers
setKey:
T@"NSMutableDictionary",&,V_pushTokenToQRSessionID
setLastSentAck:
T@"NSMutableDictionary",R,&,N,V_serviceConnectionCache
setMergePolicy:
T@"NSMutableDictionary",R,N,V_events
setMessageType:
T@"NSMutableDictionary",R,N,V_groupIDToDesiredMaterialSet
setNSUUID:onDeviceWithUniqueID:
T@"NSMutableDictionary",R,N,V_groupMemberPushTokens
setOpenSocketCompletionHandler:
T@"NSMutableOrderedSet",C,V_aggregateMessages
setPacketsSent:
T@"NSMutableSet",&,N,V_completionBlocks
setPhoneNumber:
T@"NSMutableSet",&,N,V_gossipRecipients
setPreferences:
T@"NSMutableSet",&,N,V_initialSyncClientIDs
setProcessName:
T@"NSMutableSet",&,N,V_reunionSyncClientIDs
setPushHandler:
T@"NSMutableSet",&,N,V_servicesPreferringInfraWiFi
setReadHandler:
T@"NSMutableSet",&,V_individualPeerMessages
setRegistrationKeychainManager:
T@"NSMutableSet",&,V_responses
setRelayUpdate:
T@"NSMutableSet",R,N,V_groups
setRemoteNATIP:
T@"NSNumber",&,N,V_command
setResponseHBI:
T@"NSNumber",&,N,V_domainHash
setRunningSimpleAuthentication:
T@"NSNumber",&,N,V_inputBytesPerSecond
setServiceData:
T@"NSNumber",&,N,V_isOptIn
setServiceType:
T@"NSNumber",&,N,V_maxConcurrentStreams
setSharedState:
T@"NSNumber",&,N,V_packetsPerSecond
setShouldRegisterUsingDSHandle:
T@"NSNumber",&,N,V_participantID
setSpamMessage:
T@"NSNumber",&,N,V_qrReason
setSubActivity:
T@"NSNumber",&,N,V_remoteUseCloudPairedControlChannel
setTargetToken:
T@"NSNumber",&,N,V_responseStatus
setTopicStringToSubscribedInfo:
T@"NSNumber",&,N,V_shouldHaveRegisteredIdentity
setUnderlyingSocketPairMessage:
T@"NSNumber",&,N,V_validateContextTTL
setUri:
T@"NSNumber",C,N,V_applicationVersion
setWantsAppAck:
T@"NSNumber",C,N,V_dependentRegistrationResponseCode
shouldBlackOutDeviceWithCbuuid:
T@"NSNumber",C,N,V_isC2K
shouldSendAsAttachment:maxSize:
T@"NSNumber",C,N,V_pnrReason
signInResponder
T@"NSNumber",C,N,V_responseTTL
signingServiceIdentityWithType:
T@"NSNumber",C,V_allocateType
softwareVersion
T@"NSNumber",C,V_capabilityFlags
startOTRNegotiationWithDeviceIfNeeded:token:reset:errorHandler:
T@"NSNumber",C,V_command
stopConnection:
T@"NSNumber",C,V_deliveryMinimumTime
storedSubscriptionsForActivity:
T@"NSNumber",C,V_errorCode
stringFromDate:
T@"NSNumber",C,V_infoAttribute
success
T@"NSNumber",C,V_ipPreference
supportsHarmony
T@"NSNumber",C,V_isLightweightParticipant
systemDidUnlock
T@"NSNumber",C,V_isSharedSession
systemWillSleep
T@"NSNumber",C,V_maxCompatibilityVersion
trustedServices
T@"NSNumber",C,V_minCompatibilityVersion
ttlCache:didCacheObject:forKey:
T@"NSNumber",C,V_pairingProtocolVersion
unregisterAgent
T@"NSNumber",C,V_provider
unregisterMultiplexerTransport:
T@"NSNumber",C,V_qrError
updateHeartbeat
T@"NSNumber",C,V_relayExpiryTimeStamp
updateServerDesiredKeyMaterials
T@"NSNumber",C,V_relayPort
urgentPriorityMessageStatistics
T@"NSNumber",C,V_responseVersion
useConnection:withFirstMessage:
T@"NSNumber",C,V_sendMode
userVisibleName
T@"NSNumber",C,V_storedSize
validateListenerForLocalObject:
T@"NSNumber",C,V_wantsDeliveryStatus
validationQueue
T@"NSNumber",R,N,V_dataLength
vifName
T@"NSObject<OS_dispatch_queue>",&,N,V_backingQueue
wantsBinaryPush
T@"NSObject<OS_dispatch_queue>",&,N,V_ivarQueue
wideWindowSMSTimeoutRateLimiter
T@"NSObject<OS_dispatch_queue>",&,N,V_opportunisticQueue
.cxx_destruct
BTLink
KeyTransparency
CTAdapter
SIM:didUpdateRegistrationState:
CTPNRByConsentCompletion
T@"CUTDeferredTaskQueue",R,N,V_sendAuthenticateRegistrationTask
ConnectivityMonitor
T@"KTVerifier",R,N,V_KTVerifier
CrossLayerLogging
T@"NSArray",C,V_responseHandles
ENID
T@"NSArray",R,N
FZIDType
T@"NSData",&,N,V_publicIdentity
GroupSessionKeyValueDelivery
T@"NSData",C,V_responseEngramID
HTTPMessageDeliveryClass
T@"NSData",R,N,V_deviceMetadata
IDQueryCompletedWithFromURI:idStatusUpdates:service:success:error:
T@"NSData",R,V_publicPreKeyData
IDSCoreAnalyticsWiProxDidSendData:
T@"NSDate",&,N,V_lastConnection
IDSDeviceConnectionForService:wasSuccessful:clientInitTime:clientOpenSocketCompletionTime:daemonOpenSocketTime:daemonOpenSocketCompletionTime:firstPacketReceiveTime:connectionInitTime:
T@"NSDictionary",C,V_selfHandle
IDSGenericConnectionForLink:connectionSetupStartTime:firstPacketReceiveTime:connectionType:success:errorCode:
T@"NSMutableSet",&,N,V_sessions
IDSQRAllocation:result:hasRecipientAccepted:payloadSize:topic:service:
T@"NSNumber",C,V_linkSuggestion
IDSRealTimeEncryptionServiceName:activeParticipants:firstReceivedPacketMKMtimeDelta:
T@"NSNumber",C,V_responseExpiry
IDSRealTimeEncryptionServiceName:activeParticipants:missingPrekeys:
T@"NSNumber",C,V_responseStatus
IDSSessionID
T@"NSString",&,N,V_cbuuidString
IDSVersion
T@"NSString",&,N,V_resourcePath
IDSWiProxDidDisconnectFromPeer:resultCode:
T@"NSString",C,N,V_absintheUDID
IDStatusQueryController
T@"NSString",C,N,V_connectionID
IMSI
T@"NSString",C,V_conversationID
IPsecLink
T@"NSString",C,V_productVersion
KTAccountKeyByService
T@"NSString",R,N,V_smsSignature
KTDeviceSignature
T@"QRStreamInfo",&,V_streamInfo
KTVerifier
T@?,C,N,V_block
NGMVersion
TB,N,V_isNearby
OSVersion
TB,N,V_shouldAllowCloudDelivery
OTRDecryptData:OTRToken:priority:error:
TB,N,V_shouldSupressRepairLogic
OTRSessionNegotiation:priority:duration:result:
TB,N,V_usedMMCS
OTRTestCallback:time:error:
TB,R,N,V_active
PLMN
TB,V_bypassDuet
PNRReasonByUserID
TI,N,V_SSRCRecv
PNRResponseReceivedWithResponseData:
TI,N,V_category
QRAllocator_oversized
TS,N,V_localCID
RealTimeEncryptionController
T^{__SecKey=},N,V_pushPublicKey
SHA1HexString
Td,N,V_duration
SIM:didDeactivateWithInfo:
Ti,N,V_keyIndex
SIMIdentifier
Tq,N,V_linkType
SIMPhoneUserSynchronizer
Tq,N,V_wrapMode
SMSLessMechanism
Tq,R,V_wrapMode
SSRCRecv
ServerMaterialExchange
__closeDatabase
StableEncryptionController
_accountBuilder
T#,R
_accountsLoaded
T*,R,N
_active
T@"<CUTMetricLogger>",R,N,V_productionMetricLogger
_activityStatus
T@"<FTPasswordManager>",&,N,V_passwordManager
_authenticateMessageForRequest:
T@"<IDSAPNSAckTrackerDelegate>",&,N,V_delegate
_broadcastBlock
T@"<IDSActivityStateProvider>",&,N,V_stateProvider
_btUUID
T@"<IDSCoalesceMessageQueueManagerDelegate>",W,V_delegate
_cbuuid
T@"<IDSDGroupContextNotifyingObserverDelegate>",&,N,V_delegate
_checkAndRunClientChannelTests:
T@"<IDSDSession>",W,N,V_delegate
_checksumFailed
T@"<IDSDSignInResponderDeviceSupport>",R,N,V_deviceSupport
_cleanupExpiredIncomingMessages
T@"<IDSDaemonMIGInterfaceDelegate>",W,V_delegate
_cleanupIncomingMessageDatabase
T@"<IDSDeviceCertificationRepairDelegate>",W,N,V_delegate
_cleanupOutgoingMessageDatabase
T@"<IDSGroupServerPushHandler>",&,N,V_pushHandler
_cloudKitRecordForDeviceRecord:
T@"<IDSKeyTransparencyRegistrationDataSource>",R,N,V_registrationDataSource
_commandContext
T@"<IDSLinkDelegate>",W,V_alternateDelegate
_controlChannel
T@"<IDSMPFullDeviceIdentityContainerEncrypter>",&,N,V_fullDeviceIdentityEncrypter
_conversationID
T@"<IDSMPFullDeviceIdentitySigner>",R,N,V_fullDeviceIdentitySigner
_criticalLoadPairedDeviceArray:
T@"<IDSMultiplexerTransportParticipantIDConverter>",&,N
_currentMetrics
T@"<IDSPeerIDNetworkChangeNotifier>",&,N,V_networkChangeNotifier
_decodeMapData:
T@"<IDSPeerIDQueryHandler>",&,N,V_queryHandler
_deviceIDToPeer
T@"<IDSPeerIDQueryHandlerDelegate>",W,N,V_delegate
_deviceMetadata
T@"<IDSPersistentMapPersister>",&,N,V_destinationPersister
_deviceUniqueID
T@"<IDSPersistentMapPersister>",&,N,V_persister
_enableStrictSecureDecodingMode
T@"<IDSPhoneNumberValidationStateMachineMessageDelivery>",&,N,V_httpMessageDelivery
_encryptionType
T@"<IDSPipelineComponent>",&,N,V_nextComponent
_errorByService
T@"<IDSPreflightStackStore>",&,N,V_preflighStackStore
_errorContainer
T@"<IDSPrioritizedTokenList>",&,N,V_prioritizedTokenList
_expirationDate
T@"<IDSRapportDeliveryControllerRapportClient>",&,N,V_rapportClient
_firstIncomingSYNSequenceNumber
T@"<IDSRegistrationKeyManagerKeyPairProvider>",&,N,V_keyPairProvider
_fromID
T@"<IDSTTLCacheDelegate>",W,N,V_delegate
_groupIDToMKMRecoveryRetryCount
T@"<IDSUTunConnectionDelegate>",W,N,V_delegate
_groupIdentifer
T@"<IDSUTunPeerDelegate>",W,N,V_delegate
_handlePseudonymProvisionError:
T@"<IDSUser>",R,N,V_phoneUser
_identityClassA
T@"<IMUserDefaults>",&,N,V_userDefaults
_identityClassD
T@"CKRecordZone",&,N,V_cachedRecordZone
_inUseUsernames
T@"CUTDeferredTaskQueue",R,N,V_broadcastAccountInfoChangedTask
_inviteRecvTime
T@"CUTDeferredTaskQueue",R,N,V_processAvailableNotificationsTask
_inviteTimedOut
T@"CUTDeferredTaskQueue",R,N,V_reallyUpdateRegistrationHeartbeatTask
_isBeingRemoved
T@"CUTDeferredTaskQueue",R,N,V_sendRegistrationTask
_isCloudEnabled
T@"CUTPromise",&,N,V_currentPromise
_isPendingFetch
T@"CUTPromiseSeal",&,N,V_seal
_isSMSWarningUp
T@"ENGroupContext",&,N,V_messagesGroupContext
_iterateOverConnectedListeners:
T@"FTMessageDelivery",&,N,V_messageDelivery
_keychainSchema
T@"FTMessageDelivery",R,V_messageDelivery
_ktLoggableData
T@"FTUserConfiguration",&,N,V_userConfiguration
_lastKnownAccountIDToPushTokens
T@"IDSAccountSync",&,N,V_accountSync
_lastResyncTime
T@"IDSActivityMonitorStateManager",&,N,V_stateManager
_legacyIdentity
T@"IDSAuthenticationCertificate",R,N,V_authenticationCertificate
_linkSuggestion
T@"IDSBaseMessage",&,N,V_message
_localMaterials
T@"IDSCTAdapter",&,N,V_CTAdapter
_mainID
T@"IDSCTPNR",&,N,V_CTPNR
_mapByStrippingMetadataFromMap:
T@"IDSCertifiedDeliveryReplayCommitter",R,N,V_replayCommitter
_membershipURIs
T@"IDSCloudKitContainer",R,N,V_ckContainer
_migrateFromSinglePairedDeviceToMultipleWithKeychainDictionary:
T@"IDSCloudKitKeyTransparencyDeviceRecord",&,N,V_lastSuccessfulUpsertDeviceRecord
_needsHandshake
T@"IDSConnectionContext",&,N,V_connectionContext
_negativeTTLForURI:fromService:
T@"IDSConnectivityMonitorMetricProperties",&,N,V_properties
_nonCloudWaking
T@"IDSCurrentServerTime",R,N
_noteShouldSynchronizeServices:
T@"IDSDAccountController",&,N,V_accountController
_nrMonitorQueue
T@"IDSDAccountController",R,N,V_accountController
_onlyAllowReads
T@"IDSDGroupStatusNotificationController",&,N,V_groupStatusNotificationController
_otrInitialized
T@"IDSDServiceController",&,N,V_serviceController
_params
T@"IDSDServiceController",R,N,V_serviceController
_peerCN
T@"IDSDSessionController",R,N,V_sessionController
_pendingDequeue
T@"IDSDSessionKeyValueDelivery",R,N,V_keyValueDelivery
_phoneAuthenticationCertificate
T@"IDSDSessionSharedState",&,N,V_sharedState
_phoneSignature
T@"IDSDXPCPairing",&,N,V_pairingCollaborator
_pipeRegistered
T@"IDSDataMigrationTracker",&,N,V_migrationTracker
_plugin
T@"IDSDeliveryController",&,N,V_deliveryController
_policy
T@"IDSDeviceCertificationRepair",&,N,V_deviceCertificationRepair
_powerlogDictionaryForPriority:
T@"IDSDuetInterface",&,N,V_duetInterface
_processAllocationStatusResult:
T@"IDSEncryptionQueue",&,N,V_defaultQueue
_productVersion
T@"IDSEncryptionQueue",&,N,V_urgentQueue
_publicIdentity
T@"IDSEndpoint",&,N,V_endpoint
_randomTemporaryPathWithSuffix:
T@"IDSFirewallStore",&,N,V_firewallStore
_reAuthenticate
T@"IDSGFTMetricsCollector",R,N,V_metricsCollector
_receiveHandler
T@"IDSGenericConnection",&,N,V_connection
_registrationAttemptRateLimiter
T@"IDSGroupEncryptionController",R,N,V_realTimeEncryptionController
_reload
T@"IDSGroupEncryptionKeyMaterial",&,N,V_currentLocalStableKeyMaterial
_remoteKeyToParticipantIDToData
T@"IDSGroupServer",&,N,V_groupServer
_removeDataFromKeychainForIdentifier:dataProtectionClass:error:
T@"IDSHCInfo",&,N,V_compressionInfo
_requiredUpdate
T@"IDSIDStatusQueryController",&,N,V_IDStatusQueryController
_responseExpiry
T@"IDSKTGossipPolicy",&,N,V_gossipPolicy
_responseStatus
T@"IDSKTRegistrationData",&,N,V_registeredKTData
_restoreMonitor
T@"IDSKTRegistrationDataManager",&,N,V_ktRegistrationDataManager
_saveToKeychain
T@"IDSKeyTransparencyPolicy",R,N,V_policy
_scheduledBlock
T@"IDSKeyTransparencyVerifier",&,N,V_transparencyVerifier
_sdCopy
T@"IDSKeychainKeyElectionStore",R,N,V_keychainElectionStore
_sendPublicKeyEncryptedMessage:
T@"IDSKeychainWrapper",R,N,V_keychainWrapper
_server
T@"IDSMPFullDeviceIdentityContainer",&,N,V_previousRegisteredIdentityContainer
_serverSim2Host
T@"IDSMPFullDeviceIdentityContainer",&,N,V_unregisteredIdentityContainer
_serviceMinCompatibilityVersion
T@"IDSMPFullLegacyIdentity",&,N,V_identityClassA
_setClientType:
T@"IDSMPFullLegacyIdentity",&,N,V_identityClassD
_shouldAddECKeysForServiceType:
T@"IDSMPFullLegacyIdentity",&,N,V_unSavedidentityClassA
_shouldHaveUnregisteredIdentity
T@"IDSMPFullLegacyIdentity",&,N,V_unSavedidentityClassD
_shouldReplyWithCertifiedDeliveryReceiptForDecryptionErrorType:
T@"IDSMPPublicDeviceIdentityContainer",&,N,V_identity
_sponsorAccount
T@"IDSMPPublicLegacyIdentity",R,N,V_remotePublicIdentity
_startDateMutex
T@"IDSMessageHashStore",&,N,V_messageHashStore
_startNetworkInterfaceListener:
T@"IDSNGMKeyRollingTicket",&,N,V_unappliedRollingTicket
_statisticsLock
T@"IDSNRDeviceBridge",&,N,V_idsNRDeviceBridge
_stopTrackingUserIntentOfAlias:
T@"IDSNRDeviceIdentifier",R,N,V_deviceIdentifier
_subscribedURIs
T@"IDSNRDeviceMonitor",&,N,V_deviceMonitor
_syncCredential
T@"IDSNRDevicePreferences",&,N,V_nrDevicePreferences
_terminusNearby
T@"IDSNanoRegistryPluginManager",&,N,V_idsNRPluginManager
_tokens
T@"IDSOTRController",R,N,V_OTRController
_totalBytesSent
T@"IDSOpportunisticCache",&,N,V_opportunisticCache
_updateCallerIDToTemporaryPhone
T@"IDSPairingManager",&,N,V_pairingManager
_updateListener
T@"IDSPeerIDManager",R,N
_updateSendData
T@"IDSPeerIDManager",W,N,V_peerIDManager
_usedCachedData
T@"IDSPersistentMap",&,N,V_peerMap
_userID
T@"IDSPersistentMapMergePolicy",&,N,V_mergePolicy
_validExpiryForURI:fromService:
T@"IDSPhoneNumberValidationStateMachine",R,N,V_phoneNumberValidator
_weight
T@"IDSPhoneUser",R,N,V_user
_zoneID
T@"IDSProtoKeyTransparencyLoggableData",&,N,V_ktLoggableData
abusive
T@"IDSProtobuf",&,N,V_protobuf
accountIdentity
T@"IDSPublicKeyStorage",&,N,V_publicKeyStorage
accountSecurityLevelForAccount:
T@"IDSPublicKeyStorageCache",&,N,V_cache
accountUpdated:
T@"IDSPushHandler",&,N,V_pushHandler
accountsChanged
T@"IDSQuickRelayAllocateMessage",C,V_request
activatePairedDeviceWithCBUUID:
T@"IDSRateLimiter",&,N,V_failedTokenCache
addMessageHash:
T@"IDSRateLimiter",&,N,V_loadingRateLimiter
additionalQueryStringParameters
T@"IDSRateLimiter",&,N,V_rateLimiter
adminID
T@"IDSRateLimiter",&,N,V_selfHealRateLimiter
allKeys
T@"IDSRateLimiter",&,N,V_smallWindowSMSTimeoutRateLimiter
allowAnyNetwork
T@"IDSRateLimiter",R,N,V_rateLimiter
allowedServices
T@"IDSRealTimeEncryptionIdentity",R,N,V_identityForDevice
appendToString:
T@"IDSRegistration",R,N
applicationData
T@"IDSRegistrationConductor",R,N,V_registrationConductor
applicationPublicIdentitysCount
T@"IDSRegistrationController",R,N,V_registrationController
areAllAliasesSelectedOnAccount:
T@"IDSRegistrationKeyConfig",&,N,V_config
backoffProvider
T@"IDSRegistrationKeyManager",R,N,V_keyManager
base64EncodedStringWithOptions:
T@"IDSRegistrationKeyManagerIdentityDataSource",&,N,V_identityDataSource
bindTo:
T@"IDSRegistrationProperties",&,N,V_registrationProperties
bundleForClass:
T@"IDSRegistrationReasonTracker",R,N
cachedIsSameSIM
T@"IDSRestoreMonitor",&,N,V_restoreMonitor
candidateEmails
T@"IDSSIMPhoneUserSynchronizer",&,N,V_SIMPhoneUserSynchronizer
center:succeededAuthentication:
T@"IDSServer",R,N,V_server
checksumEnabled
T@"IDSServerBag",&,N,V_idsServerBag
cleanupSession:
T@"IDSServerBag",R,N,V_serverBag
clearIdentities
T@"IDSSigningKeyDiversifier",R,N,V_keyDiversifier
cloudConnection
T@"IDSSockAddrWrapper",C,N,V_remoteSA
coalesceDelayForTopic:sendMode:
T@"IDSSockAddrWrapper",R,&,N,V_remoteAddress
completionBlock
T@"IDSSocketPairMessage",&,N,V_underlyingSocketPairMessage
compressPayload
T@"IDSSystemAccountAdapter",&,N,V_systemAccountAdapter
confirmedEmails
T@"IDSTTLCache",&,N,V_ttlCache
connectDuration
T@"IDSTemporaryPhoneUser",R,V_user
connection:connectivityChanged:
T@"IDSTemporaryPhoneUserExpirationManager",&,N,V_expirationManager
connectionsByID
T@"IDSTransactionQueue",&,N,V_transactionQueue
containsPairedDeviceWithCBUUID:
T@"IDSURI",R,N,V_URI
context
T@"IDSURI",R,N,V_localURI
controlCategory
T@"IDSURI",R,N,V_toURI
conversationKey
T@"IDSUTunControlChannel",&,N,V_controlChannel
copyTo:
T@"IDSUTunController",&,N,V_utunController
currentEntries:
T@"IDSUserAccountSynchronizer",&,N,V_userAccountSynchronizer
daemonConnected
T@"IDSUserStore",&,N,V_userStore
T@"IDSUserStore",R,N,V_userStore
decryptionBlock
T@"IDSValidationSession",&,N,V_validationSession
defaultPairedDeviceIdentityPair
T@"IDSXPCConnection",&,N,V_connection
dequeueMessage:
T@"IMDispatchTimer",&,N,V_phoneRepairTimer
destinationURIs
T@"IMLockdownManager",&,N,V_lockdownManager
deviceHeartbeat
T@"IMNetworkAvailability",&,N,V_availability
deviceRecertificationCompleted:
T@"IMSystemMonitor",R,N,V_systemMonitor
deviceUniqueIDs
T@"IMTimer",&,N,V_endSessionTimer
devices
T@"IMTimer",&,N,V_lastSendSMSTimer
didReceiveData:
T@"IMTimer",&,N,V_restoreTimer
disallowRefresh
T@"NSArray",&,N,V_activityMonitorEntitlements
dropAllMessagesWithoutAnyAllowedClassifierForDevice:completion:
T@"NSArray",&,N,V_aggregatableMessages
emptyStatesLock
T@"NSArray",&,N,V_aliasStrings
enabledAccounts
T@"NSArray",&,N,V_authenticationResponses
encryptedValues
T@"NSArray",&,N,V_duetIdentifiersOverride
encryptionState
T@"NSArray",&,N,V_interesting
endTime
T@"NSArray",&,N,V_primaryRegistrationURIs
existingRelayIP
T@"NSArray",&,N,V_publishedStreams
fakeMKMWrapping
T@"NSArray",&,N,V_requiredCapabilities
fetchPeerVerificationInfoForApplication:forURIs:withCompletion:
T@"NSArray",&,N,V_serverMessagingEntitlements
fetchRegistrationStatusProvider
T@"NSArray",&,N,V_supportedMessageTypes
firstIncomingPacketTime:forMKI:
T@"NSArray",&,N,V_uris
flushLinkProbingStatus:options:
T@"NSArray",&,V_events
generateLegacyIdentityWithIdentifier:dataProtectionClass:error:
T@"NSArray",C,N,V_keyTransparencyEnrolledURIs
generationError
T@"NSArray",C,N,V_uris
getAudioEnabled
T@"NSArray",C,V_accessoryIDs
getKeyTransparencyOptInEligiblityForApplication:withCompletion:
T@"NSArray",C,V_duetIdentifiersOverride
getParticipantsForGroup:ofType:
T@"NSArray",C,V_responseAccessTokens
groupID
T@"NSArray",C,V_responseRegistrations
groupSessionKeyValueDeliveryProviderCollaboratorWithCompletion:
T@"NSArray",C,V_responseServices
handleRegistrationStateChanged:
T@"NSArray",C,V_services
hasBuildVersion
T@"NSArray",R
hasEntitlement:
T@"NSArray",R,C,V_kms
hasOutdatedSKI:
T@"NSArray",R,N,V_eligibleServiceIdentifiers
hasSpaceForAggregatableMessage:
T@"NSArray",R,N,V_masterKeyMaterials
heartbeatCenter
T@"NSArray",R,N,V_stableKeyMaterials
identityVersion
T@"NSArray",R,N,V_trackedRegistrations
idsResponseCode
T@"NSArray",R,V_combinedMessages
initWithDictionary:sharedState:
T@"NSData",&,N,V_ENID
initWithFormat:
T@"NSData",&,N,V_bluetoothMACAddress
initWithName:qosClass:specific:
T@"NSData",&,N,V_clientContextData
initWithPayload:legacyIdentity:
T@"NSData",&,N,V_data
initWithQueue:connection:userStore:accountController:ctAdapter:
T@"NSData",&,N,V_deviceSignature
initWithSendMode:topic:maxSize:
T@"NSData",&,N,V_fromIdentity
initWithZoneID:
T@"NSData",&,N,V_localCallInfoData
internal_nukeTransparencyState:
T@"NSData",&,N,V_localNATIP
isDeviceInDualPhoneIdentityMode
T@"NSData",&,N,V_metadataBlob
isEngramEnabled
T@"NSData",&,N,V_outOfBandKey
isEqualToValue:
T@"NSData",&,N,V_participantInfo
isGuest
T@"NSData",&,N,V_publicKeyData
isLinkSuspended
T@"NSData",&,N,V_quickRelaySessionToken
isOptIn
T@"NSData",&,N,V_remoteCallInfoData
isProxy
T@"NSData",&,N,V_remoteNATIP
isReady
T@"NSData",&,N,V_signature
isSetup
T@"NSData",&,V_data
isSupportedEngramVersionNumber:
T@"NSData",C,N
isiCloudAccountMatchingAccount:
T@"NSData",C,N,V_absintheHello
keyPairProvider
T@"NSData",C,N,V_helloMessage
keySalt
T@"NSData",C,N,V_payload
keychainAdapter
T@"NSData",C,N,V_pushCert
keychainWrapper
T@"NSData",C,N,V_registrationCert
ktDataSignature
T@"NSData",C,N,V_responseAbsintheServKey
labelID
T@"NSData",C,N,V_responseSessionInfo
launchPromptWithButton:defaultUrl:alternateButton:alternateUrl:
T@"NSData",C,N,V_sessionInfoRequest
localCN
T@"NSData",C,V_accessToken
localKeyToEntry
T@"NSData",C,V_activeRelaySessionToken
lockdownManager
T@"NSData",C,V_csr
lowercaseString
T@"NSData",C,V_dataToEncrypt
mainAccountUUID
T@"NSData",C,V_encryptedData
markAllOutgoingMessagesAsUnsent
T@"NSData",C,V_existingRelayIP
maxSize
T@"NSData",C,V_existingRelaySignature
mergeID
T@"NSData",C,V_fromIdentity
message
T@"NSData",C,V_key
messageIdentifier:alternateCallbackID:forAccount:willSendToDestinations:skippedDestinations:registrationPropertyToDestinations:
T@"NSData",C,V_pairingToken
messageSenderID
T@"NSData",C,V_previousAccessToken
migrateToSecureStorageForClassC
T@"NSData",C,V_recipientPushToken
mostRecentIDSRegistrationReason
T@"NSData",C,V_relayIPv6
negativeRegistrationUpdateCache
T@"NSData",C,V_relaySessionKey
T@"NSData",C,V_relaySoftwareVersion
nrDeviceMonitor
T@"NSData",C,V_responseAdminAcccessToken
numberWithChar:
T@"NSData",C,V_signature
observerProxies
T@"NSData",C,V_targetToken
opportunisticDeliveryController
T@"NSData",R,C,V_encryptedData
options
T@"NSData",R,N
packetLossTimer
T@"NSData",R,N,V_cert
pairWithSPPLink
T@"NSData",R,N,V_data
pairing
T@"NSData",R,N,V_deviceKey
participantInfo
T@"NSData",R,N,V_encryptedMirageHandshakeBlob
passwordUpdated
T@"NSData",R,N,V_payloadMetadata
payloadMetadata
T@"NSData",R,N,V_publicNGMIdentityData
peripheral:didDiscoverServices:
T@"NSData",R,N,V_pushToken
phoneNumberValidationRetryCount
T@"NSData",R,N,V_serverKey
portMap
T@"NSData",R,N,V_transparencyBlob
preventNewQuery
T@"NSDate",&,N,V_evictionDate
privateDeviceDataForKVSSuccess:
T@"NSDate",&,N,V_lastSelfVerifyDate
processFairplayHostSessionInfo:
T@"NSDate",&,N,V_phoneNumberValidationStartDate
protectionClass
T@"NSDate",&,N,V_smsSendDate
protocolChecker
T@"NSDate",&,N,V_validateContextDate
prototypingOnly
T@"NSDate",C,N,V_dependentRegistrationsTTL
pseudonymURIMap
T@"NSDate",C,N,V_registrationDate
publicClassCKey
T@"NSDate",C,V_expirationDate
pushCertificate
T@"NSDate",R,N
queryAndSubmitStatusForAccounts
T@"NSDictionary",&,N,V_accountKeyByService
queryRetryNumberForBadSignature
T@"NSDictionary",&,N,V_clientDatasByServiceType
queuedIncomingMessageDictionary
T@"NSDictionary",&,N,V_dataProviderByRealm
realTimeEncryptionPublicKeyData
T@"NSDictionary",&,N,V_destinationsLightweightStatus
receivedAPNSAckForMessage:guid:
T@"NSDictionary",&,N,V_endpointsToEncryptedData
registerAccount
T@"NSDictionary",&,N,V_errorByService
registerInfo:requireSilentAuth:
T@"NSDictionary",&,N,V_migrationContext
registrationHBI
T@"NSDictionary",&,N,V_preferences
relayIP
T@"NSDictionary",&,N,V_relayInitiate
release
T@"NSDictionary",&,N,V_resourceMetadata
removeDelegate:
T@"NSDictionary",&,N,V_subscribedStreams
removeMessages:
T@"NSDictionary",&,N,V_urisToParticipantIDs
removeParticipantsForSessionID:
T@"NSDictionary",C,N,V_remoteDeviceEncryptionInfo
reportFirstMKMReceivedFromPush:
T@"NSDictionary",C,V_authenticationInfo
resetAndResynchronizeEverything
T@"NSDictionary",C,V_message
responseCommand
T@"NSDictionary",C,V_protobuf
responseHandles
T@"NSDictionary",C,V_responseIdentities
responseVersion
T@"NSDictionary",C,V_spamMessage
retries
T@"NSDictionary",R,&,N
T@"NSDictionary",R,N
T@"NSDictionary",R,N,V_accountInfo
saPortHostOrder
T@"NSDictionary",R,N,V_cumulativeOutgoingStatistics
saveIdentityContainer:withIdentifier:dataProtectionClass:error:
T@"NSDictionary",R,N,V_serviceToOptInManager
sdNumberNoClose
T@"NSError",&,N,V_connectError
sendKeyMaterialMessageDataOverQR:toDestination:completionBlock:
T@"NSError",&,N,V_generationError
sendPublicKeyToGroup:sessionID:
T@"NSError",&,N,V_registeredDeserializationError
seqSend
T@"NSError",&,N,V_rollingError
serviceAllowLiveMessageDelivery
T@"NSError",&,N,V_unregisteredKeychainError
sessionDuration
T@"NSMapTable",&,N,V_CTPNRByConsentCompletion
T@"NSMapTable",&,N,V_realmByListener
setAccessToken:
T@"NSMutableArray",&,N,V_cachedDataForClient
setAccountBlob:
T@"NSMutableArray",&,N,V_daemonClients
setAccountSync:
T@"NSMutableArray",&,N,V_infos
setAccountUUID:
T@"NSMutableArray",&,N,V_peripheralManagers
setAddressPair:
T@"NSMutableArray",&,N,V_registrations
setBag:
T@"NSMutableArray",&,N,V_serviceSignatures
setCancellable:
T@"NSMutableArray",&,N,V_uris
setClientReady:
T@"NSMutableArray",R,N,V_handlers
setCountryCode:
T@"NSMutableArray",R,N,V_registrations
setCurrentDeviceRecordsPromise:
T@"NSMutableDictionary",&,N,V_PNRReasonByUserID
setCurrentSize:
T@"NSMutableDictionary",&,N,V_backingStore
setDeviceModel:
T@"NSMutableDictionary",&,N,V_cachedTokensBySessionID
setDidFallback:
T@"NSMutableDictionary",&,N,V_clientRemoteObjectByActivity
setDidWakeHint:
T@"NSMutableDictionary",&,N,V_completionBlocksToURIsMap
setEndpointMap:
T@"NSMutableDictionary",&,N,V_disasterModeTokens
setExpiryEpoch:
T@"NSMutableDictionary",&,N,V_endpointQueryListeners
setForceLegacy:
T@"NSMutableDictionary",&,N,V_incomingDataFragments
setFullDeviceIdentityEncrypter:
T@"NSMutableDictionary",&,N,V_listenersByActivity
setGroupServer:
T@"NSMutableDictionary",&,N,V_pushTokenToSKMsMapping
setHasKeyIndex:
T@"NSMutableDictionary",&,N,V_rateLimitMap
setIdsPriority:
T@"NSMutableDictionary",&,N,V_serviceIndexToKTRegDataConfigs
setInviteTimer:
T@"NSMutableDictionary",&,N,V_stateMachineByUserID
setIsInitiator:
T@"NSMutableDictionary",&,N,V_topicStringToSubscribedInfo
setIsTemporary:
T@"NSMutableDictionary",&,N,V_validationInfoByMechanism
setKeyTransparencyEnrolledURIs:
T@"NSMutableDictionary",R,&,N,V_connectionsByID
setLastSentSeq:
T@"NSMutableDictionary",R,N,V_cachedMap
setMessageData:
T@"NSMutableDictionary",R,N,V_groupIDToCapabilityToParticipantPushTokens
setMessageUUID:
T@"NSMutableDictionary",R,N,V_groupIDToStableKeyMaterialCache
setNetworkCode:
T@"NSMutableDictionary",R,N,V_localKeyToEntry
setPNRDelegate:
T@"NSMutableSet",&,N,V_aliases
setPersistentEnrollmentHandler:
T@"NSMutableSet",&,N,V_familyHandles
setPid:
T@"NSMutableSet",&,N,V_highPriorityConnectionSendingSet
setPrimaryRegistrationDSHandle:
T@"NSMutableSet",&,N,V_listeningOnActivities
setProductName:
T@"NSMutableSet",&,N,V_serviceTypes
setRateLimiter:
T@"NSMutableSet",&,N,V_userConsentDeniedForCTPNR
setRegisteredIdentityContainer:
T@"NSMutableSet",&,V_pendingResponseTokens
setRelayCancel:
T@"NSMutableSet",C,N,V_stableKeyMaterials
setRemoteDeviceVersion:version:
T@"NSMutableSet",R,N,V_localMaterials
setRepairTimer:
T@"NSNumber",&,N,V_commandContext
setResponseTTL:
T@"NSNumber",&,N,V_generationCounter
setServerMessagingEntitlements:
T@"NSNumber",&,N,V_isInitiator
setServiceName:
T@"NSNumber",&,N,V_joinType
setServicesPreferringInfraWiFi:
T@"NSNumber",&,N,V_outputBytesPerSecond
setShouldBoost:
T@"NSNumber",&,N,V_parentVersion
setSmsSendDate:
T@"NSNumber",&,N,V_qrError
setStoredIncomingFamilyMessage:
T@"NSNumber",&,N,V_remoteNATType
setSubservicesByPrimaryService:
T@"NSNumber",&,N,V_remoteUsePhoneContinuityLocalMessage
setTestOptions:
T@"NSNumber",&,N,V_sendMode
setTtl:
T@"NSNumber",&,N,V_shouldHaveUnregisteredIdentity
setUrgentQueue:
T@"NSNumber",C,N,V_IDSVersion
setWakingPushPriority:forTopic:
T@"NSNumber",C,N,V_dependentRegistrationAuthRetries
setWithObjects:
T@"NSNumber",C,N,V_identityVersion
shouldProtectTrafficUsingClassA
T@"NSNumber",C,N,V_phoneNumberValidationRetryCount
signData:error:
T@"NSNumber",C,N,V_responseStatus
signingIdentity
T@"NSNumber",C,V_allocateProtocolVersion
T@"NSNumber",C,V_attemptCount
startLocalSetup
T@"NSNumber",C,V_chunkNumber
stopAdvertising
T@"NSNumber",C,V_dataLength
stopTrackingActiveRegistration:
T@"NSNumber",C,V_deliveryTime
stringByAppendingPathComponent:
T@"NSNumber",C,V_groupMemberCount
succeed
T@"NSNumber",C,V_invitationRetryCount
supportsHandoff
T@"NSNumber",C,V_isInternal
systemDidLogout
T@"NSNumber",C,V_isNewUPlusOneSession
systemSupportsRegistrationInfo:
T@"NSNumber",C,V_linkScore
timeout
T@"NSNumber",C,V_messageType
T@"NSNumber",C,V_originalTimestamp
ttlCache:didEvictObject:forKey:
T@"NSNumber",C,V_priority
unregisterInfo:
T@"NSNumber",C,V_pushPriority
updateAuthorizationCredentials:token:forAccount:messageContext:
T@"NSNumber",C,V_qrReason
updateRelevantEncryptedDataBlob
T@"NSNumber",C,V_relayHighPriorityPort
uppercaseString
T@"NSNumber",C,V_responseHBI
T@"NSNumber",C,V_selfAllocationCount
userAgentString
T@"NSNumber",C,V_serviceMinCompatibilityVersion
usersWithRealm:
T@"NSNumber",C,V_version
validateProfile
T@"NSNumber",R,N,V_NGMVersion
version
T@"NSNumber",R,N,V_transparencyStatus
wantsAPSRetries
T@"NSObject<OS_dispatch_queue>",&,N,V_callbackQueue
warning
T@"NSObject<OS_dispatch_queue>",&,N,V_nrMonitorQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_priorityQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
T@"NSObject<OS_dispatch_queue>",&,N,V_registrationQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_saveQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_serialPersistQueue
T@"NSObject<OS_dispatch_queue>",&,N,V_xpcQueue
T@"NSObject<OS_dispatch_queue>",N
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
T@"NSObject<OS_dispatch_source>",&,N,V_databaseCloseTimer
T@"NSObject<OS_dispatch_source>",&,N,V_evictionTimer
T@"NSObject<OS_dispatch_source>",&,N,V_saveTimer
T@"NSObject<OS_nw_connection>",&,N,V_nwConnection
T@"NSObject<OS_nw_connection>",&,N,V_serviceConnection
T@"NSObject<OS_nw_endpoint>",&,N,V_defaultPairedDeviceEndpoint
T@"NSObject<OS_nw_service_connector>",&,N,V_cloudServiceConnector
T@"NSObject<OS_nw_service_connector>",&,N,V_serviceConnector
T@"NSSet",&,N
T@"NSSet",&,N,V_allowedTrafficClasses
T@"NSSet",&,N,V_decodableClasses
T@"NSSet",&,N,V_destinations
T@"NSSet",&,N,V_familyDevices
T@"NSSet",&,N,V_familyMembers
T@"NSSet",&,N,V_impactedServices
T@"NSSet",&,N,V_policyTrafficClassifiers
T@"NSSet",&,N,V_topicsToListenOn
T@"NSSet",C,N,V_masterKeyIdentifiersReceivedByClient
T@"NSSet",C,N,V_masterKeyMaterials
T@"NSSet",C,N,V_membershipURIs
T@"NSSet",C,N,V_stableKeyIdentifiersSentToClient
T@"NSSet",R,N
T@"NSSet",R,N,V_allAdHocServices
T@"NSSet",R,N,V_gossipEnabledServiceIdentifiers
T@"NSSet",R,N,V_membershipURIs
T@"NSSet",R,V_serverDesiredMaterials
T@"NSString",&
T@"NSString",&,N
T@"NSString",&,N,SsetDSHandle:,V_dsHandle
T@"NSString",&,N,V_accountDescription
T@"NSString",&,N,V_accountDisplayName
T@"NSString",&,N,V_accountID
T@"NSString",&,N,V_activity
T@"NSString",&,N,V_activitySubActivity
T@"NSString",&,N,V_activityTopic
T@"NSString",&,N,V_appleID
T@"NSString",&,N,V_buildOfIdentityGeneration
T@"NSString",&,N,V_buildOfUnregisteredIdentityGeneration
T@"NSString",&,N,V_bundleID
T@"NSString",&,N,V_cbuuid
T@"NSString",&,N,V_clientID
T@"NSString",&,N,V_clientProcessName
T@"NSString",&,N,V_controlChannelVersion
T@"NSString",&,N,V_countryCode
T@"NSString",&,N,V_deviceID
T@"NSString",&,N,V_deviceModel
T@"NSString",&,N,V_deviceName
T@"NSString",&,N,V_directory
T@"NSString",&,N,V_featureID
T@"NSString",&,N,V_filePath
T@"NSString",&,N,V_fromID
T@"NSString",&,N,V_groupID
T@"NSString",&,N,V_guid
T@"NSString",&,N,V_hardwareVersion
T@"NSString",&,N,V_identifier
T@"NSString",&,N,V_key
T@"NSString",&,N,V_localCN
T@"NSString",&,N,V_messageID
T@"NSString",&,N,V_messageSenderID
T@"NSString",&,N,V_messageUUID
T@"NSString",&,N,V_migrationDefaultKey
T@"NSString",&,N,V_name
T@"NSString",&,N,V_networkCode
T@"NSString",&,N,V_osVersion
T@"NSString",&,N,V_pairedDeviceCBUUIDString
T@"NSString",&,N,V_participantID
T@"NSString",&,N,V_peerCN
T@"NSString",&,N,V_personalCBUUIDString
T@"NSString",&,N,V_phoneBookNumber
T@"NSString",&,N,V_phoneNumber
T@"NSString",&,N,V_plistCachePath
T@"NSString",&,N,V_primaryRegistrationDSHandle
T@"NSString",&,N,V_productName
T@"NSString",&,N,V_pseudonymAlias
T@"NSString",&,N,V_relaySessionID
T@"NSString",&,N,V_remotePartyID
T@"NSString",&,N,V_responseMessage
T@"NSString",&,N,V_responsePresenceTopic
T@"NSString",&,N,V_scopeID
T@"NSString",&,N,V_service
T@"NSString",&,N,V_serviceIdentifier
T@"NSString",&,N,V_serviceName
T@"NSString",&,N,V_servicePushTopic
T@"NSString",&,N,V_serviceType
T@"NSString",&,N,V_sessionID
T@"NSString",&,N,V_signature
T@"NSString",&,N,V_subActivity
T@"NSString",&,N,V_subService
T@"NSString",&,N,V_temporaryPhoneEmail
T@"NSString",&,N,V_toDeviceID
T@"NSString",&,N,V_toURI
T@"NSString",&,N,V_topic
T@"NSString",&,N,V_uniqueID
T@"NSString",&,N,V_userID
T@"NSString",&,N,V_userUniqueIdentifier
T@"NSString",&,N,V_userVisibleName
T@"NSString",&,V_capability
T@"NSString",&,V_cbuuid
T@"NSString",&,V_homePlmn
T@"NSString",C
T@"NSString",C,N
T@"NSString",C,N,V_IMEI
T@"NSString",C,N,V_IMSI
T@"NSString",C,N,V_MEID
T@"NSString",C,N,V_PLMN
T@"NSString",C,N,V_UDID
T@"NSString",C,N,V_authToken
T@"NSString",C,N,V_awdTopic
T@"NSString",C,N,V_btUUID
T@"NSString",C,N,V_cbuuid
T@"NSString",C,N,V_clientID
T@"NSString",C,N,V_deviceName
T@"NSString",C,N,V_deviceUniqueID
T@"NSString",C,N,V_environment
T@"NSString",C,N,V_filename
T@"NSString",C,N,V_fromID
T@"NSString",C,N,V_groupID
T@"NSString",C,N,V_hardwareVersion
T@"NSString",C,N,V_idsDeviceConnectionUUID
T@"NSString",C,N,V_idsUserID
T@"NSString",C,N,V_keyPairSignature
T@"NSString",C,N,V_mainID
T@"NSString",C,N,V_messageUUID
T@"NSString",C,N,V_originalbtUUID
T@"NSString",C,N,V_osVersion
T@"NSString",C,N,V_outgoingStallDetectorName
T@"NSString",C,N,V_participantID
T@"NSString",C,N,V_peerResponseIdentifier
T@"NSString",C,N,V_profileID
T@"NSString",C,N,V_protocolVersion
T@"NSString",C,N,V_queueOneIdentifier
T@"NSString",C,N,V_regionBasePhoneNumber
T@"NSString",C,N,V_regionID
T@"NSString",C,N,V_remoteConnectionGUID
T@"NSString",C,N,V_responseCarrierToken
T@"NSString",C,N,V_responseDeviceScoreNonce
T@"NSString",C,N,V_responseMessage
T@"NSString",C,N,V_sessionID
T@"NSString",C,N,V_softwareVersion
T@"NSString",C,N,V_testData
T@"NSString",C,N,V_testOptions
T@"NSString",C,N,V_topic
T@"NSString",C,N,V_uniqueID
T@"NSString",C,N,V_vifName
T@"NSString",C,V_OSVersion
T@"NSString",C,V_accessoryID
T@"NSString",C,V_accountGUID
T@"NSString",C,V_adminID
T@"NSString",C,V_alternateGUID
T@"NSString",C,V_anonymizedSenderID
T@"NSString",C,V_appID
T@"NSString",C,V_authToken
T@"NSString",C,V_authenticationDataAuthToken
T@"NSString",C,V_authenticationDataUserID
T@"NSString",C,V_basePhoneNumber
T@"NSString",C,V_controlChannelVersion
T@"NSString",C,V_countryCode
T@"NSString",C,V_deviceName
T@"NSString",C,V_deviceScoreNonce
T@"NSString",C,V_errorMessage
T@"NSString",C,V_expiry
T@"NSString",C,V_forwardingSigAlgorithm
T@"NSString",C,V_fromID
T@"NSString",C,V_geo
T@"NSString",C,V_groupID
T@"NSString",C,V_guid
T@"NSString",C,V_hardwareVersion
T@"NSString",C,V_identifier
T@"NSString",C,V_language
T@"NSString",C,V_localDestinationDeviceUUID
T@"NSString",C,V_mainAccountGuid
T@"NSString",C,V_messageID
T@"NSString",C,V_model
T@"NSString",C,V_networkCode
T@"NSString",C,V_osVersion
T@"NSString",C,V_peerResponseIdentifier
T@"NSString",C,V_productBuildVersion
T@"NSString",C,V_productName
T@"NSString",C,V_profileID
T@"NSString",C,V_protocol
T@"NSString",C,V_queueOneIdentifier
T@"NSString",C,V_realm
T@"NSString",C,V_regionID
T@"NSString",C,V_relayBuildVersion
T@"NSString",C,V_reportingDataBlob
T@"NSString",C,V_requestIDStr
T@"NSString",C,V_requiredForMessaging
T@"NSString",C,V_responseAccessoryID
T@"NSString",C,V_responseBasePhoneNumber
T@"NSString",C,V_responseMessage
T@"NSString",C,V_responseRegionID
T@"NSString",C,V_route
T@"NSString",C,V_sender
T@"NSString",C,V_senderURI
T@"NSString",C,V_serviceUserID
T@"NSString",C,V_sessionIDStr
T@"NSString",C,V_sigAlgorithm
T@"NSString",C,V_softwareVersion
T@"NSString",C,V_sourcePeerID
T@"NSString",C,V_targetPeerID
T@"NSString",C,V_targetService
T@"NSString",C,V_tempUserID
T@"NSString",C,V_topic
T@"NSString",C,V_unknownSenderURI
T@"NSString",C,V_userAgent
T@"NSString",C,V_userHandle
T@"NSString",C,V_userID
T@"NSString",C,V_weight
T@"NSString",R
T@"NSString",R,&,N
T@"NSString",R,&,N,V_localConnectionGUID
T@"NSString",R,C
T@"NSString",R,C,N,V_account
T@"NSString",R,C,N,V_name
T@"NSString",R,C,N,V_service
T@"NSString",R,C,V_linkID
T@"NSString",R,GlinkTypeString
T@"NSString",R,N
T@"NSString",R,N,V_DSID
T@"NSString",R,N,V_IMSI
T@"NSString",R,N,V_OTRToken
T@"NSString",R,N,V_PLMN
T@"NSString",R,N,V_destination
T@"NSString",R,N,V_errorCode
T@"NSString",R,N,V_guid
T@"NSString",R,N,V_identifier
T@"NSString",R,N,V_instanceID
T@"NSString",R,N,V_labelID
T@"NSString",R,N,V_peerIDManagerToken
T@"NSString",R,N,V_phoneNumber
T@"NSString",R,N,V_phoneToken
T@"NSString",R,N,V_portString
T@"NSString",R,N,V_promptMessage
T@"NSString",R,N,V_promptTitle
T@"NSString",R,N,V_radarClassification
T@"NSString",R,N,V_radarComponentId
T@"NSString",R,N,V_radarComponentName
T@"NSString",R,N,V_radarComponentVersion
T@"NSString",R,N,V_radarDescription
T@"NSString",R,N,V_radarReproducibility
T@"NSString",R,N,V_radarTitle
T@"NSString",R,N,V_recordID
T@"NSString",R,N,V_serverErrorDetail
T@"NSString",R,N,V_service
T@"NSString",R,N,V_serviceIdentifier
T@"NSString",R,N,V_signingTimestamp
T@"NSString",R,N,V_token
T@"NSString",R,N,V_userName
T@"NSString",R,N,V_username
T@"NSString",R,V_linkID
T@"NSString",R,V_pipePeripheralUUIDString
T@"NSString",V_buildVersion
T@"NSString",V_identifier
T@"NSString",V_productName
T@"NSUUID",&,N,V_clientUUID
T@"NSUUID",&,N,V_deviceIdentifier
T@"NSUUID",C,V_deviceUniqueID
T@"NSUUID",C,V_instanceID
T@"NSUUID",R,N
T@"NSUUID",R,N,V_nrDeviceIdentifier
T@"NSUUID",R,V_uuid
T@"NSUbiquitousKeyValueStore",&,N,V_kvStore
T@"NSXPCConnection",&,N,V_connection
T@"NSXPCListener",&,N,V_listener
T@"RPCompanionLinkClient",R,N,V_companionLinkClient
T@"TransparencyDaemon",&,N,V_transparencyDaemon
T@"UNUserNotificationCenter",&,N,V_notificationCenter
T@"_IDSSessionConnection",&,N,V_connection
T@,&,N,V_currentLocalMasterKeyMaterial
T@,&,N,V_listenerID
T@,&,N,V_nextLocalMasterKeyMaterial
T@,&,N,V_sessionController
T@,R,N
T@?,C,N,V_accountBuilder
T@?,C,N,V_automaticResetBlock
T@?,C,N,V_backoffProvider
T@?,C,N,V_broadcastBlock
T@?,C,N,V_completionBlock
T@?,C,N,V_decryptionBlock
T@?,C,N,V_encryptionBlock
T@?,C,N,V_fallbackBlock
T@?,C,N,V_inFlightHeartbeatBlock
T@?,C,N,V_inFlightResetBlock
T@?,C,N,V_inFlightSMSTimeoutBlock
T@?,C,N,V_invalidationHandler
T@?,C,N,V_migrationBlock
T@?,C,N,V_openSocketCompletionHandler
T@?,C,N,V_otrTestBlock
T@?,C,N,V_packetBufferHandler
T@?,C,N,V_progressBlock
T@?,C,N,V_readHandler
T@?,C,N,V_resolvedEndpointsDidUpdateHandler
T@?,C,N,V_scheduledBlock
T@?,C,N,V_sendBlock
T@?,C,N,V_timerBlock
T@?,C,N,V_validationMessageSendBlock
T@?,C,N,V_willSendBlock
T@?,C,N,V_writeHandler
T@?,C,V_ackBlock
T@?,C,V_completionBlock
T@?,C,V_connectReadyHandler
T@?,R,N,V_fileCleanupBlock
T@?,R,N,V_queryCompletionBlock
T@?,R,N,V_readHandler
TAB,N,V_connectionTimerCleared
TAB,N,V_endSessionTimerCleared
TAB,N,V_inviteTimerCleared
TB,N
TB,N,V_activityStatus
TB,N,V_allowPairingIdentities
TB,N,V_allowProxyQueries
TB,N,V_allowRegenerateRegisteredIdentity
TB,N,V_alwaysSkipSelf
TB,N,V_avoidMainQueue
TB,N,V_avoidMainQueueOverrideToNO
TB,N,V_broadcastNeedsClientAck
TB,N,V_broadcastPerformed
TB,N,V_bypassDuet
TB,N,V_cachedManateeAvailability
TB,N,V_checksumEnabled
TB,N,V_checksumFailed
TB,N,V_clientReady
TB,N,V_commCenterDead
TB,N,V_completedMigration
TB,N,V_compressPayload
TB,N,V_compressed
TB,N,V_connecting
TB,N,V_deniedToSend
TB,N,V_didFallback
TB,N,V_didInvalidate
TB,N,V_didReceiveReestablishmentRequest
TB,N,V_didReceiveSIMSetupCompleteNotification
TB,N,V_didRegisterWithKTAccountKey
TB,N,V_didWakeHint
TB,N,V_disableEncryption
TB,N,V_disableRemoteDeviceEncryption
TB,N,V_disabledAutomatically
TB,N,V_disallowQueryRefresh
TB,N,V_displayingAddNumberPrompt
TB,N,V_enableOTR
TB,N,V_enableQuickRelay
TB,N,V_enableSKE
TB,N,V_enableSingleChannelDirectMode
TB,N,V_encryptionEnabled
TB,N,V_encryptionInitialized
TB,N,V_entitledForAllTopics
TB,N,V_expectsPeerResponse
TB,N,V_fakeMKMWrapping
TB,N,V_finishedRegistration
TB,N,V_forceAttachmentMessage
TB,N,V_forceInternetInvitation
TB,N,V_forceLegacy
TB,N,V_forceLegacyPK
TB,N,V_forceOnePerFanout
TB,N,V_forceRoll
TB,N,V_hasAcceptedSMSRequest
TB,N,V_hasBeenProvisioned
TB,N,V_hasEndedSession
TB,N,V_hasMatchingURIs
TB,N,V_hasMoreData
TB,N,V_hasNotifiedSuccess
TB,N,V_hasRegisteredContainer
TB,N,V_inviteNeedsDelivery
TB,N,V_isAdvertising
TB,N,V_isAltAccountPairing
TB,N,V_isAlwaysConnected
TB,N,V_isBeingHandedOff
TB,N,V_isBeingRemoved
TB,N,V_isBuildingContext
TB,N,V_isClassCConnected
TB,N,V_isCloudConnected
TB,N,V_isCloudEnabled
TB,N,V_isConnected
TB,N,V_isControlChannel
TB,N,V_isDefaultPairedDevice
TB,N,V_isDefaultPairedDevicePairedLocally
TB,N,V_isDefaultPairedDevicePairedRemotely
TB,N,V_isDefaultUser
TB,N,V_isDirectMsgChannel
TB,N,V_isDisabled
TB,N,V_isInServerBackoffMode
TB,N,V_isInUPlusOneMode
TB,N,V_isInitiator
TB,N,V_isJoinAllocation
TB,N,V_isLocalSetUpInProgress
TB,N,V_isMagnetIndicatingPeerIsAwake
TB,N,V_isMigratedSignature
TB,N,V_isNegotiating
TB,N,V_isPeerAlwaysConnected
TB,N,V_isPendingFetch
TB,N,V_isPublicKeyDistributed
TB,N,V_isReady
TB,N,V_isReadyForEncrypting
TB,N,V_isRealTime
TB,N,V_isRegistered
TB,N,V_isRegistrationActive
TB,N,V_isReinitiate
TB,N,V_isSMSWarningUp
TB,N,V_isScreenSharingSession
TB,N,V_isSuspended
TB,N,V_isTestRunning
TB,N,V_isVideoPaused
TB,N,V_linkLayerConnected
TB,N,V_listening
TB,N,V_localSetupInProgress
TB,N,V_manualQueueRemoval
TB,N,V_midSynchronize
TB,N,V_needsMigration
TB,N,V_needsProvisioning
TB,N,V_needsRenewal
TB,N,V_needsToCheckPhoneNumberState
TB,N,V_nonCloudWaking
TB,N,V_nonWaking
TB,N,V_onlyAllowReads
TB,N,V_pairWithSPPLink
TB,N,V_pendingCloudEnable
TB,N,V_pendingDependentCheck
TB,N,V_pluginImplementsWatchDidStartAdvertising
TB,N,V_pluginImplementsWatchDidStopAdvertising
TB,N,V_remoteAssumeRemoteDeviceEncryption
TB,N,V_requireBluetooth
TB,N,V_requireLocalWiFi
TB,N,V_runningSimpleAuthentication
TB,N,V_sendOnePerToken
TB,N,V_sentToRemotes
TB,N,V_serviceAllowLiveMessageDelivery
TB,N,V_serviceAllowLocalDelivery
TB,N,V_serviceAllowProxyDelivery
TB,N,V_serviceAllowWiProxDelivery
TB,N,V_serviceIsDSBased
TB,N,V_serviceUseiMessageCallerID
TB,N,V_serviceWantsReflectedSend
TB,N,V_serviceWantsTinkerDevices
TB,N,V_sharedSession
TB,N,V_sharedSessionHasJoined
TB,N,V_shouldAllowLiveMessageDelivery
TB,N,V_shouldAutoRegisterAllHandles
TB,N,V_shouldConnectToQRServer
TB,N,V_shouldEnforceRemoteTimeout
TB,N,V_shouldIncludeDefaultDevice
TB,N,V_shouldListen
TB,N,V_shouldPostNotifications
TB,N,V_shouldProtectTrafficUsingClassA
TB,N,V_shouldQuickSwitchAfterIPSecConnected
TB,N,V_shouldRegisterUsingDSHandle
TB,N,V_shouldReregOnManateeAvailability
TB,N,V_shouldSetAllowlistUUIDForStreamingSocket
TB,N,V_shouldUseAbsinthe
TB,N,V_shouldUseCrossLayerLogging
TB,N,V_shouldUseIPsecLink
TB,N,V_shouldUseIPsecLinkForDefaultPairedDevice
TB,N,V_silentlyFailMessagesOnSwitch
TB,N,V_storedIncomingFamilyMessage
TB,N,V_success
TB,N,V_successful
TB,N,V_supportsLegacyOTRSessionToken
TB,N,V_suspendTraffic
TB,N,V_suspended
TB,N,V_terminusConnected
TB,N,V_terminusNearby
TB,N,V_terminusRegistered
TB,N,V_transient
TB,N,V_useBTDatagramPipe
TB,N,V_usePairingKey
TB,N,V_useQRDirectly
TB,N,V_useSecureQRControlMessage
TB,N,V_useStunMICheck
TB,N,V_validationContextDisabled
TB,N,V_verbosePerformanceLogging
TB,N,V_waitingForMigration
TB,N,V_wantsAppAck
TB,N,V_wantsCertifiedDelivery
TB,N,V_wantsDeliveryStatus
TB,N,V_wantsFirewallDonation
TB,N,V_wasInitiallySetupUsingIDSPairing
TB,N,V_wasPrimary
TB,R
TB,R,N
TB,R,N,V_allowBackup
TB,R,N,V_avoidMainQueue
TB,R,N,V_disableRegistration
TB,R,N,V_disallowCellularInterface
TB,R,N,V_disallowWifiInterface
TB,R,N,V_enableOTR
TB,R,N,V_forMessaging
TB,R,N,V_forRefresh
TB,R,N,V_forSending
TB,R,N,V_forceLegacy
TB,R,N,V_fullyAckd
TB,R,N,V_hasHardDeregistered
TB,R,N,V_hasMetadata
TB,R,N,V_hasPreferWiFiRequest
TB,R,N,V_isAsleep
TB,R,N,V_isAudioPaused
TB,R,N,V_isClassCConnected
TB,R,N,V_isCloudEnabled
TB,R,N,V_isConnected
TB,R,N,V_isEnabled
TB,R,N,V_isForced
TB,R,N,V_isIssuingDependentCheck
TB,R,N,V_isLoaded
TB,R,N,V_isNearby
TB,R,N,V_isPoweredOn
TB,R,N,V_isRegistered
TB,R,N,V_missingIdentity
TB,R,N,V_missingPrekey
TB,R,N,V_preventNewQuery
TB,R,N,V_resultExpected
TB,R,N,V_usedCachedData
TB,R,N,V_usedLastResortCache
TB,R,V_requireSignature
TB,V_abusive
TB,V_alwaysSkipSelf
TB,V_compressPayload
TB,V_encryptPayload
TB,V_enforceRemoteTimeouts
TB,V_expectsPeerResponse
TB,V_fireAndForget
TB,V_forcedLocal
TB,V_hasReceivedAPSDAck
TB,V_ignoreMaxRetryCount
TB,V_isBlackholed
TB,V_isFinalMessage
TB,V_isForced
TB,V_isJunked
TB,V_isLocal
TB,V_ktCapable
TB,V_liveMessageDelivery
TB,V_nonCloudWaking
TB,V_nonWaking
TB,V_requireBluetooth
TB,V_requireLocalWiFi
TB,V_responseValidated
TB,V_resultExpected
TB,V_sent
TB,V_useDictAsTopLevel
TB,V_wantsAppAck
TB,V_wantsCertifiedDelivery
TB,V_wantsDeliveryStatus
TB,V_wantsFirewallDonation
TB,V_wantsProgress
TB,V_wantsResponse
TC,N,V_activityPolicy
TC,N,V_latestLinkType
TC,N,V_loggingSequenceIncoming
TC,N,V_loggingSequenceOutgoing
TC,N,V_pushPriority
TC,R,N,V_dataProtectionClass
TI,N
TI,N,V_callID
TI,N,V_currentOutgoingFragmentedMessageID
TI,N,V_dataProtectionClass
TI,N,V_expectedNextIncomingSequenceNumber
TI,N,V_expectedNextOutgoingSequenceNumber
TI,N,V_firstIncomingSYNSequenceNumber
TI,N,V_fragmentationSize
TI,N,V_invitationRetryCount
TI,N,V_ktVersion
TI,N,V_lastSentAck
TI,N,V_lastSentSeq
TI,N,V_maxAllowedMessageSize
TI,N,V_messageID
TI,N,V_messageSequenceNumber
TI,N,V_negotiationCount
TI,N,V_ngmVersion
TI,N,V_numberOfAttemptsWithoutSuccessfulSend
TI,N,V_numberOfPreflights
TI,N,V_numberOfSuccessfulSends
TI,N,V_peerProtocolVersion
TI,N,V_quickRelayRequestsCount
TI,N,V_seqRecvStart
TI,N,V_seqSend
TI,N,V_seqSendStart
TI,N,V_serviceAdHocType
TI,N,V_state
TI,N,V_status
TI,N,V_uint32Key
TI,R,N
TI,R,N,V_groupSessionState
TI,R,N,V_keyType
TI,R,N,V_metadataSize
TI,R,N,V_numberOfBroadcastCacheMKM
TQ,N
TQ,N,V_bytesReceived
TQ,N,V_bytesSent
TQ,N,V_capabilityFlags
TQ,N,V_connectionCountHint
TQ,N,V_encryptionType
TQ,N,V_initialProcessTime
TQ,N,V_initialServerTime
TQ,N,V_localConnectionType
TQ,N,V_maxQueueSize
TQ,N,V_maxSize
TQ,N,V_mergePolicyType
TQ,N,V_minCompatibilityVersion
TQ,N,V_operation
TQ,N,V_packetsReceived
TQ,N,V_packetsSent
TQ,N,V_pairingProtocolVersion
TQ,N,V_policy
TQ,N,V_remoteConnectionType
TQ,N,V_sentMessageDataSize
TQ,R
TQ,R,N
TQ,R,N,V_clientUniquePID
TQ,R,N,V_currentDefaultDeviceLinkType
TQ,R,V_forParticipantID
TQ,R,V_headerOverhead
TQ,R,V_state
TS,N,V_remoteCID
TS,N,V_seqRecvStart
TS,N,V_seqSend
TS,N,V_seqSendStart
TS,N,V_serviceMinCompatibilityVersion
TS,R
TS,R,N
TS,R,N,V_keyIndex
T^[16C],N
T^[16C],R,N
T^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]},R,N,V_packetBuffer
T^{?={tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}{tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}},R,N
T^{IDSPortMap=[1024Q]QS},R,N
T^{SimpleUInt32ToObjectTable=i^{SimpleUInt32ToObjectTableElement}i},R,N
T^{_SecOTRSession=},N,V_backingOTRSessionRef
T^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v},N,V_newPg
T^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v},N,V_parentPg
T^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v},N,V_privateKey
T^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v},N,V_publicKey
T^{__SecKey=},N,V_fullIdentity
T^{__SecKey=},N,V_identity
T^{__SecKey=},N,V_publicIdentity
T^{__SecKey=},N,V_pushKey
Tc,N,V_firstGossipChance
Tc,N,V_maxRecipientMemory
Tc,N,V_subsequentGossipChance
Td,N,V_automaticResetInterval
Td,N,V_connectionInitTime
Td,N,V_connectionTimeout
Td,N,V_databaseLastUpdateTime
Td,N,V_endSessionTimeout
Td,N,V_endTime
Td,N,V_expiryEpoch
Td,N,V_firstDataPacketReceiveTime
Td,N,V_firstPacketReceiveTime
Td,N,V_inviteSentTime
Td,N,V_inviteTimeout
Td,N,V_lastBagRepairInterval
Td,N,V_lastCloudConnectedTime
Td,N,V_lastPacketTime
Td,N,V_lastStartTime
Td,N,V_lastSuccessfulSentTime
Td,N,V_linkLayerDisconnectTime
Td,N,V_notificationDelayInSeconds
Td,N,V_reestablishmentRequestReceiveTime
Td,N,V_selfVerifyThrottleTime
Td,N,V_startTime
Td,N,V_suspendTrafficCheckTime
Td,N,V_timeConnected
Td,N,V_timeDisconnected
Td,N,V_timeEnqueued
Td,N,V_timeSubscribed
Td,N,V_timestamp
Td,N,V_ttlInSeconds
Td,N,V_writeCoalescingDelay
Td,N,V_writeCoalescingLeeway
Td,R
Td,R,N
Td,R,N,V_creationTime
Td,R,N,V_rtt
Td,R,N,V_timestamp
Td,V_delay
Ti,N,V_absintheRetries
Ti,N,V_accountType
Ti,N,V_continuityConnectCount
Ti,N,V_excessiveCachingCount
Ti,N,V_excessiveCachingReportCounter
Ti,N,V_keyMaterialLength
Ti,N,V_manateeRetries
Ti,N,V_registrationType
Ti,N,V_responseStatus
Ti,N,V_retries
Ti,N,V_sd
Ti,N,V_sdCopy
Ti,N,V_sdNumberNoClose
Ti,N,V_sdOriginal
Ti,N,V_srtpProtocolVersion
Ti,N,V_stateFlags
Ti,N,V_supportedServicesToken
Ti,N,V_utunSocket
Ti,N,V_version
Ti,R
Ti,R,N
Ti,R,N,V_protocol
Ti,R,V_type
Ti,V_messageServerTimestamp
Tq,N,V_accessCount
Tq,N,V_activityTimestamp
Tq,N,V_broadcastID
Tq,N,V_clientType
Tq,N,V_command
Tq,N,V_compressionState
Tq,N,V_dataProtectionClass
Tq,N,V_idsPriority
Tq,N,V_messageCount
Tq,N,V_messagePriority
Tq,N,V_messageType
Tq,N,V_mostRecentIDSRegistrationReason
Tq,N,V_reason
Tq,N,V_registrationStateChangedCounter
Tq,N,V_registrationStatus
Tq,N,V_responseCode
Tq,N,V_socketTrafficClass
Tq,N,V_state
Tq,N,V_stateFlags
Tq,N,V_status
Tq,N,V_subsystem
Tq,N,V_transparencyVersion
Tq,N,V_transportType
Tq,N,V_ttl
Tq,R,N
Tq,R,N,V_alertType
Tq,R,N,V_encryptionType
Tq,R,N,V_mechanism
Tq,R,N,V_messageState
Tq,R,N,V_priority
Tq,R,N,V_transportType
Tq,R,N,V_versionNumber
Tq,R,V_expirationPhase
Tq,V_currentSize
Tq,V_maxSize
Tq,V_priority
Tq,V_reportAction
Tq,V_status
Tq,V_transparencyVersion
Tr*,N,V_specific
Tr*,R,N,V_metadata
T{?={tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}{tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}},N,V_encryptionStateStruct
T{_opaque_pthread_mutex_t=q[56c]},N,V_lock
T{os_unfair_lock_s=I},N,V_emptyStatesLock
T{os_unfair_lock_s=I},N,V_lock
T{os_unfair_lock_s=I},N,V_usersToTimersLock
UDID
URIWithPrefixedURI:
URIs
URLWithString:
UTF8String
UTunConnection
UTunPeer
UUID
UUIDString
WRMLinkRecommendation:primaryLinkType:magnetState:infraWiFiState:
XPCAdapter
_ACAccountWithTypeIdentifier:matchingCriteria:completion:
_ACAccountWithTypeIdentifier:matchingCriteria:error:
_BAACert
_BAACertTTLInMinutesFromServerBag
_BAAFetchTimeoutFromServerBag
_CTAdapter
_CTPNR
_CTPNRByConsentCompletion
_DSAuthIDForPushToken:
_DSID
_ENID
_FTCopyOptionallyGzippedData
_FTDataFromBase64String
_FTDataFromHexString
_FTOptionallyDecompressData
_FTStringFromBaseData
_FZBestGuessFZIDType
_FZIDType
_IDFromFZIDType:
_IDSDataFromBase64String:
_IDSEndpointTransparencyStatesForKTLoggableDatas:index:
_IDSEndpointTransparencyVerificationStateForKTResult:
_IDSPowerLogDictionary:info:
_IDSProtoKeyTransparencyTrustedDeviceForKeyTransparencyIndex:entry:
_IDSSessionID
_IDSVersion
_IDStatusForURI:fromService:
_IDStatusQueryController
_IDsFromURIs
_IMEI
_IMSI
_IMTransferServiceController
_KTAccountKeyByService
_KTAccountKeySigningTimeoutFromServerBag
_KTDataForIDSKeyTransparencyEntry:
_KTDatasForIDSKeyTransparencyEntries:
_KTDatasForIDSProtoKeyTransparencyTrustedDevices:serviceIdentifier:
_KTVerifier
_MEID
_MKMOverPushTime
_MKMOverQRQUICTime
_MKMOverQRTime
_NGMVersion
_OSVersion
_OTRController
_OTREnableTimerFiredOnMain
_OTRToken
_PLMN
_PNRReasonByUserID
_SIMPhoneUserSynchronizer
_SIMResponder
_SIMSetupDidComplete
_SSRCRecv
_SSRCSend
_UDID
_URI
_URIFromFZIDType:
_URIsFromIDs
_UTunDeliveryController
_WiFiBringUpCounter
__IMStripPotentialTokenURIs
__cleanupValidationInfoForSubsystemMechanism:
__dumpState
__failValidationQueueForSubsystemMechanism:
__failValidationQueueWithErrorResponseCode:forSubsystemMechanism:
__flushValidationQueueForSubsystemMechanism:
__imArrayByApplyingBlock:
__imArrayByFilteringWithBlock:
__imDataWithHexString:
__imDataWithRandomBytes:
__imDictionaryByFilteringWithBlock:
__imForEach:
__imHexString
__imRandomizeArray
__imSetByApplyingBlock:
__imSetFromArray
__mainThreadPostNotificationName:object:
__pairedDeviceStateUpdated
__purgeCachedCertsForSubsystemMechanism:
__queueValidationMessage:subsystem:sendBlock:
__reallySendAuthenticateRegistration
__reallySendDeregistration
__reallySendRegistration
__reallyUpdateRegistrationHeartbeat
__removeFromQueue:subsystem:
__saveStoreForDataProtectionClass:
__saveToKeychain
__sendMessage:
__setupServer
_absintheHello
_absintheRetries
_absintheUDID
_abusive
_acceptIncomingPushes
_acceptedDeviceToken
_acceptedDeviceUniqueID
_accessCount
_accessPairedDevicesInCriticalSectionWithBlock:
_accessToken
_accessoryID
_accessoryIDs
_accessoryRequests
_account
_accountBlob
_accountController
_accountDescription
_accountDisplayName
_accountGUID
_accountID
_accountIDMap
_accountIDMapLock
_accountIDs
_accountInfo
_accountKey
_accountKeyByService
_accountKeyManager
_accountRepair
_accountSync
_accountType
_accountsForUser:
_accountsWithService:
_accumulateStats:intoMessages:andBytes:
_ackBlock
_ackMessageWithSequenceNumber:forDeviceID:priority:dataProtectionClass:connectionType:guid:
_ackStateMachine
_activeAppleIDAccount
_activePairedDeviceCBUUID
_activeRegistrations
_activeRelayIP
_activeRelaySessionToken
_activity
_activityMonitorEntitlements
_activitySubActivity
_activityTimestamp
_activityTopic
_adHocServiceNames
_addAccount:
_addAccountDuringInitialSetup:
_addAliases:
_addAllocateRequestForDevice:requestID:
_addAllocationForSession:allocation:
_addCompletionBlock:forURIs:fromURI:fromService:context:
_addConnectStatus:relaySessionID:previousTime:qrReason:previousError:previousRelayIP:previousAccessToken:
_addEarlyListener:
_addIncomingGUIDsWithGuid:isLocal:hasLock:
_addIncomingMessageSize:forTopic:
_addMessageSize:forTopic:direction:dataProtectionClass:isResource:
_addMessageToStatistics:
_addOutgoingMessageSize:forTopic:dataProtectionClass:isResource:
_addPairedDevice:
_addPairedDevice:withInfo:completion:
_addPhoneNumbersToAccount:withNonPreferredPhoneAccounts:
_addPseudonym:
_addRemotePacketOutage
_addRequestWithID:cert:sig:csr:tag:
_addResponseToCache:sessionInfo:modifiedMessage:
_addStatsFromDict:toAggregate:
_addUser:
_additionalDictionary
_addressPair
_addressRetransmissionInterval
_adminID
_admissionDeniedTopics
_advertiseNow
_advertisingTypes
_aggregatableMessages
_aggregateMessages
_alertForHomeNumberIfNeededForSIMIdentifier:withPhoneNumber:
_alertType
_aliasStrings
_aliases
_allAdHocServices
_allCloudConnectionsAreIdle
_allConnectionsAreIdle
_allUserIntentWithDefaultReason:
_allocateProtocolVersion
_allocateResponses
_allocateType
_allocationTimeout
_allocations
_allowBackup
_allowHomeNumberForUser:simCarrierIdentifiers:userCarrierIdentifiers:
_allowPairingIdentities
_allowProxyQueries
_allowRegenerateRegisteredIdentity
_allowedTrafficClasses
_alternateDelegate
_alternateGUID
_anonymizedSenderID
_anyDeviceUsingSubService:superService:
_appID
_appearsToBeDSID
_appearsToBeEmail
_appearsToBePhoneNumber
_appearsToBePseudonymID
_appleID
_appleIDPrimaryDependentRegistrations
_applicationKeyManager
_applicationPublicIdentitys
_applicationVersion
_arbiter
_arrayForKey:
_assertQuickRelayForCloudMessaging
_assertedRealTimeMode
_asyncCleanupExpiredEntriesIfNeeded
_attachOrphanedPhoneAliases:toRecipientAccounts:withAccountsToEnable:
_attemptCount
_attemptToKickoffExpirationTimerForUser:
_attempts
_attributes
_authDSMessageForRegistration:realm:
_authMessageCompletionWithRegistration:withOverallSuccessBlock:overallFailure:
_authMessageForRegistration:
_authSubsystemForInfo:
_authToken
_authUsersMessageForRegistration:realm:
_authenticateAccount
_authenticationCertificate
_authenticationCerts
_authenticationDataAuthToken
_authenticationDataSig
_authenticationDataUserID
_authenticationInfo
_authenticationResponses
_authkitQueue
_automaticResetBlock
_automaticResetInterval
_availability
_availabilityCheck
_availableNotifications
_avoidMainQueueOverrideToNO
_awdStartTimestamp
_awdTopic
_awdUniqueId
_backingCache
_backingOTRSessionRef
_backingQueue
_backingStore
_backoffProvider
_bag
_bagLoaded:
_bagReloaded:
_basePhoneNumber
_baseRegistrationHBI
_baseSocketPairConnection
_bestGuessURI
_bestGuessURIFromCanicalizedID
_birthDate
_block
_blocksOnLinkConnect
_bluetoothLinkPreferences
_bluetoothMACAddress
_breakDictionaryIntoMultipleChunks:chunkSize:
_bringUpWiFi:
_broadcastAccountInfoChanged
_broadcastAccountInfoChangedTask
_broadcastAccountMessageBlock:
_broadcastID
_broadcastNeedsClientAck
_broadcastPendingMessageUpdateForMessage:fromID:toIdentifier:forTopic:messageContext:
_broadcastPerformed
_broadcastSessionStartWithSocket:
_broadcaster
_btLinkManager
_btuuidToSessionID
_buildOfIdentityGeneration
_buildOfUnregisteredIdentityGeneration
_buildVersion
_builderAvoidMainQueue:forceLegacy:
_bundleID
_bypassDuet
_bypassUTun
_bytes
_bytesReceived
_bytesSent
_cache
_cachedBytes
_cachedClientData
_cachedDataForClient
_cachedIsSameSIM
_cachedManateeAvailability
_cachedMap
_cachedNumberOfActiveParticipants
_cachedRecordZone
_cachedResultsForURIs:fromURI:fromService:
_cachedTokensBySessionID
_calculateRandomDelayForCloudMessagingRequest
_callBlocksWithResult:registrations:error:
_callDelegateWithBlock:
_callHandlerWithMessage:resetDataConnections:shouldObliterate:decryptionFailed:shouldTriggerCorruptionRecovery:
_callPairedDeviceDidConnectBlocksForUniqueID:withError:
_callStateChanged
_callbackEncryptionFailed
_callbackQueue
_callbackResetDataConnections
_callbackShouldObliterate
_callbackShouldTriggerCorruptionRecovery
_callingToken
_canBulkMessageWithParameters:
_canBulkMessageWithPriority:adHocServiceType:
_canDeliverSMSNow
_canReportMetric:
_canSendMessageLocally:toDestinations:withCommand:
_canSendMessageWithAccount:toDestination:
_canSendNonUrgentInternetMessageForTopic:
_cancelConnectionAndResetDataConnections:shouldObliterate:encryptionFailure:shouldTriggerCorruptionRecovery:
_cancelExpirationTimerForUser:
_cancelScheduledHeartbeat
_cancelScheduledSMSTimeout
_canceledConnection
_candidateEmails
_capability
_capabilityFlags
_captureDiagnosticsForFailedRegistration:registrationError:
_carrierNonce
_category
_cbuuidString
_cbuuidToBTOutOfBandKeyDictionary
_cbuuidToLinks
_cbuuidsWithIsPairingValue:
_cellularDataStatusListenerStarted
_cert
_certForFromURI:
_certificateSigningRequest
_changedSinceLastSave
_channelDataCachedTime
_checkAndSendCachedDataForClient:
_checkAndStartConnection
_checkAndUnassertRealTimeMode
_checkAndUpdateDBIfRequiredForClass:
_checkAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:
_checkContinuityEntitlementForMessageContext:
_checkEntitlement:forAccountWithID:messageContext:
_checkFastDormancy
_checkIfDupeAndNoteGuid:local:topic:
_checkIfDupeAndNoteGuid:local:topic:forceNoteGuid:
_checkIfPushMessageSizeGreaterThanMaxLimit:maxLimit:
_checkOverRegistrations
_checkRegistration
_checkRegistrationStatus
_checkSendNewMessage
_checkServicesPreferringInfraWiFi:
_checkTechChange
_checkWPContinuitySetup
_checksumEnabled
_chunkNumber
_ckContainer
_cleanUpAccountCredentialForRemovedAccount:
_cleanUpAccountCredentialStore
_cleanUpOutgoingMessageDatabaseAndClearStatementCache
_cleanupAbsintheTask
_cleanupConnection
_cleanupContinuityPeerMaps:
_cleanupFailedElectionWithFullAccountIdentityCluster:
_cleanupIncomingFilesDirectories
_cleanupKeychain
_cleanupLegacyAccounts
_cleanupLegacyLocalAccounts
_cleanupListenerWithPid:
_cleanupLocalAccounts
_cleanupOutgoingMessages
_cleanupOutgoingQWSMessages
_cleanupQuickRelaySession
_cleanupResponses
_cleanupRunawayClientOutgoingMessages
_cleanupSessionConnection
_cleanupSocketPairConnection
_cleanupTime
_cleanupUntrackedValidators
_clearChannel
_clearCloudDisableTimer
_clearConnectionTimer
_clearConsentDenialsForUniqueIdentifier:
_clearDatabaseCloseTimer
_clearDisableTimer
_clearEndSessionTimeoutTimer
_clearForcedGDRCount
_clearForcedGDRDate
_clearGDRState
_clearIDSState
_clearInvitationTimer
_clearLastFallbackWithReason:
_clearPacketLossTimer
_clearPairedDeviceDidConnectBlocksForUniqueID:
_clearQueueForTopic:
_clearSMSDeliveryTimeout
_clearSendingPowerAssertionWithReason:
_clearTimerForTopic:
_clientChannel
_clientChannelConnectTime
_clientChannelUUID
_clientConnection
_clientContextData
_clientDataUpdateBlocks
_clientDatasByServiceType
_clientErrorForKTResult:underlyingError:
_clientErrorWithCode:debugDescription:underlyingError:
_clientID
_clientProcessName
_clientReady
_clientRemoteObjectByActivity
_clientRemoteObjectsByTopic
_clientType
_clientUUID
_clientUniquePID
_closeSocketToDevice:
_closeSockets
_cloudConnection
_cloudDisableTimer
_cloudDisableTimerFired:
_cloudKitContainer
_cloudKitElectionStore
_cloudPairingBeforeFirstUnlock
_cloudServiceConnector
_coalesceMessageQueueManager
_coalesceQueueManager
_collaboratorProvider
_combinedMessages
_combinedServicesForAllDevices
_command
_commandIsSessionCommand:
_commandIsSessionGroupSessionCommand:
_commands
_compactKeyMaterialMessage:isOutgoing:groupID:
_companionLinkClient
_companionLinkClientForDeviceIdentifier:completion:
_completedMigration
_completionActivity
_completionBlock
_completionBlocks
_completionBlocksForURIs:fromURI:fromService:forRefresh:
_completionBlocksToURIsMap
_completionHandler
_completionQueue
_compressPayload
_compressed
_compressionInfo
_compressionState
_compressionTime
_configurePushHandler
_connType
_connectError
_connectNow
_connectQRDirectlyToClientChannel:
_connectReadyHandler
_connectSocketDescriptor:toClientChannel:
_connectedSocket
_connectedStates
_connecting
_connection
_connectionActive
_connectionClaimed
_connectionContext
_connectionCountHint
_connectionEnableAudio
_connectionForPriority:messageType:dataProtectionClass:
_connectionID
_connectionInfos
_connectionInitTime
_connectionQueue
_connectionRequestStartTime
_connectionSetupStartTime
_connectionSuspended
_connectionTimedOut
_connectionTimeout
_connectionTimer
_connectionTimerCleared
_connectionTimerFiredOnMain
_connectionTypeForConnection:
_connectionsByID
_connectionsTableByLocalRemotePortKey
_connectivityChanged
_connectivityChangedForDefaultDevice:isCloudConnected:
_connectivityDelegates
_connectivityMonitor
_constructAccountInfo:
_constructDeliveryPipeline
_contactStore
_contactUtilities
_container
_contextInfo
_continuity
_continuityConnectCount
_continuityPeerLock
_controlChannelCachedSYN
_controlChannelEncryptionDisabled
_controlChannelVersion
_controlChannelVersionCache
_copyDeviceRecord:toCloudKitRecordRef:
_copyDirectMessagingMetadataForRemoteObject:
_copyForEnumerating
_copyLookupSecVerificationIdentity
_copyPairedDevice
_copyPeerWithID:
_copyPowerlogDictionaryWithOutgoingStats:incomingStats:
_copyStatisticsDict:
_correctFramesSinceLastCorruption
_correctRawBytesSinceLastCorruption
_countOfMessagesQueuedOfType:matchingCriteria:
_countryCode
_createAccountKeysWithFullAccountIdentity:serviceTypeNames:oldCluster:completion:
_createAccountWithDictionary:service:uniqueID:
_createAndEnableExistingSystemAccounts
_createDispatchData
_createFirewallRecordsFromSQLRecords:
_createGroupSessionActiveParticipantsFromParticipants:pushTokenForParticipants:
_createHashingDeviceIdentityEncrypter
_createKTTrustedDeviceForKVSisRegistered:
_createOneWayParticipantDictionaryFromMappedParticipantsDict:
_createOutgoingMessageRecordsFromSQLRecords:includeMessagePayloads:
_createPeerFromDeviceID:
_createPeerFromDeviceInfo:
_createRegistrationProperties:maxCompatibilityVersion:BTOutOfBandKey:supportsIPsecWithSPPLink:bluetoothMACAddress:
_createSessionInfoFromResponsePayload:
_createSimpleConnectionData
_createStallDetectorWithName:
_createWiFiManagerClient
_createZoneIfNeededUsingTimeIntervalForRequest:isNonDiscretionary:completion:
_createiTunesAccountFromSystemIfNeeded
_creationDate
_creationTime
_credential
_criticalActivatePairedDeviceWithCBUUID:
_criticalActivePairedDevice
_criticalAllPairedDevices
_criticalIsCountingDown
_criticalPairedDeviceWithCBUUID:
_criticalPerformPairedDeviceActivationWithCBUUID:
_criticalPerformPairedDeviceDeactivation
_criticalPerformTransactionWithBlock:
_criticalPersistState
_criticalPurgeSecuredEncryptionKeysForAllPairedDevices
_criticalPutPairedDevice:
_criticalRemovePairedDeviceWithCBUUID:
_criticalUpdatePairedDevice:isActive:
_criticalUpdatePairedDeviceWithCBUUID:deviceInfoPayload:
_criticalUpdatePairedDeviceWithCBUUID:deviceUniqueID:buildVersion:productVersion:productName:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:
_criticalUpdatePairedDeviceWithCBUUID:iCloudURIs:pushToken:
_criticalUpdatePairedDeviceWithCBUUID:pairingType:
_criticalUpdatePairedDeviceWithCBUUID:supportIPsec:
_cryptorForBlobs
_csr
_ctAdapter
_cumulativeIncomingStatistics
_cumulativeOutgoingStatistics
_currentAuthentications
_currentDataLength
_currentDateString
_currentDefaultDeviceLinkType
_currentDeviceRecordsPromise
_currentForcedGDRCount
_currentGenerationCounter
_currentGetDependentRegistrationBlocks
_currentGetDependentRegistrations
_currentGetHandlesBlocks
_currentInFlightSyncAttempts
_currentIncomingPacket
_currentLink
_currentLocalMasterKeyMaterial
_currentLocalStableKeyMaterial
_currentLocalTime
_currentMessageData
_currentOTRTimer
_currentOutgoingDataIndex
_currentOutgoingFragmentedMessageID
_currentOutgoingPacket
_currentPeerVerificationResultsForQueriedIndex:ticket:
_currentRegistrations
_currentSecondsIntoDay
_currentSessionStateCounter
_currentSize
_currentStorageRetriesPerTopic
_currentSubServicesForDevice:superService:
_currentVerificationResultsForRegisteredIndex:ticket:
_daemonClients
_daemonWillShutdown:
_dailyTimer
_dailyTimerHandler
_data
_dataBlobEncryptionManager
_dataChannel
_dataChannelPendingTx
_dataForKey:
_dataLength
_dataProtectedIncomingMessages
_dataProtectionClass
_dataProviderByRealm
_dataReadyHandler
_dataReceivedWithoutMessageCount
_dataSource
_dataToEncrypt
_database
_databaseCloseTimer
_databaseLastUpdateTime
_datagramPipeRegistration
_dateLastRegistered
_dateOfLastHandlesCheck
_datePassed:
_dateSentLastHTTPMessage
_deathTimerToTopicMap
_decodableClasses
_decryptAOverCMessage:topic:fromDeviceID:error:
_decryptData:encrypter:pkType:isRetry:priority:replayKey:completion:
_decryptData:usingIdentifier:isRetry:
_decryptData:usingIdentifier:isRetry:error:
_decryptEngramMessage:groupID:senderToken:fromID:guid:messageContext:
_decryptOTREncrtypedMessage:
_decryptPublicKeyEncryptedMessage:completionBlock:
_decryptReceivedDataBlobsUsingSKMs
_decryptionBlock
_decryptionRetryIntervalForError:
_dedupBehaviorForMessage:
_defaultCloudConnectionForAck
_defaultConnectionForAck
_defaultDeviceCbuuid
_defaultDirectConnections
_defaultPairedDependentRegistrations
_defaultPairedDeviceEndpoint
_defaultPeerConnectedDeferred
_defaultPeerSetPreferInfraWiFi:services:
_defaultQueue
_default_queue
_deferToQueue:after:block:
_deferredRegisters
_deferredUpdateCapabilities
_delay
_delayedDefaultDeviceAllocateRequest
_delegate
_delegateMap
_delegateQueue
_delegate_DidEvictObject:forKey:
_delegate_didCacheObject:forKey:
_delegate_shouldEvictObject:forKey:
_delegate_shouldTTLCacheEvictExpiredItems
_delegate_willReturnCachedObject:forKey:completion:
_deleteIdentityAtKeyIndex:error:
_deliveryController
_deliveryHandlersByUUID
_deliveryMinimumTime
_deliveryQueue
_deliveryStatusContext
_deliveryTime
_demoMode
_deniedToSend
_dependencyProvider
_dependentRegistrationAuthRetries
_dependentRegistrationPropertyForKey:serviceIdentifier:pushToken:
_dependentRegistrationResponseCode
_dependentRegistrations
_dependentRegistrationsForDefaultPairedDevice:includingCurrentDevice:includingTinker:
_dependentRegistrationsForDefaultPairedDevice:includingTinker:
_dependentRegistrationsTTL
_dequeueMessages
_dequeueMessagesTimerDidFire:
_dequeueMessagesTimerInterval
_dequeueNextMessageFromOutgoingQueue
_dequeuePendingQueryIfPossible
_dequeuePendingRequestsIfNecessary
_dequeueTimer
_dequeueTimerFiredOnMain:
_deregisterDeviceCenterNotifications
_destination
_destinationAddress
_destinationCountForURIsAndTokens:
_destinationPersister
_destinations
_destinationsLightweightStatus
_destroyFairplayDeviceSession
_destroyFairplayHostSession
_detectedMigrationNeeded
_deviceAbsintheIMEI
_deviceAbsintheMEID
_deviceAbsintheSerialNumber
_deviceAbsintheUDID
_deviceCanRegisterPresently
_deviceCapabilities
_deviceCertificationRepair
_deviceConnectionInfo
_deviceConnectionInfoTableByCbuuid
_deviceConnectionInfoTableByCbuuidLock
_deviceData
_deviceID
_deviceIDChangedNotification:
_deviceIDForPeer:
_deviceIDToAllocRequests
_deviceIDToCurrentLink
_deviceIDToGlobalLinkUp
_deviceIDToPeerLock
_deviceIDToSubServicesMap
_deviceIDToUDPDestinations
_deviceIdentifier
_deviceIdentifierKeychainID
_deviceKey
_deviceModel
_deviceMonitor
_deviceName
_deviceProperties
_deviceScore
_deviceScoreNonce
_deviceSignature
_deviceSignatureByService
_deviceSupport
_deviceTime
_deviceWithIdentifier:error:
_devices
_dictionaryForKey:
_didFallback
_didInvalidate
_didReceiveData:
_didReceiveReestablishmentRequest
_didReceiveSIMSetupCompleteNotification
_didRegisterWithKTAccountKey
_didWakeHint
_directConnections
_directory
_disableAccountWithUniqueID:
_disableEncryption
_disableOTRForDefaultPairedPeer:
_disablePrimaryAccountWithUniqueID:userAction:
_disableRegistration
_disableRemoteDeviceEncryption
_disableTimer
_disableTimerFired:
_disabledAutomatically
_disallowCellularInterface
_disallowQueryRefresh
_disallowWifiInterface
_disasterModeTokenForURI:
_disasterModeTokens
_discardAllocation:
_discardMessage:forURIs:service:
_discardedRawBytes
_discoveredDeviceIDsLock
_discoveredDevices
_dispatchCounterInfraWiFi
_dispatchDeferredPrekeyRequestForGroupID:previousParticipantsPushTokens:currentActiveParticipants:sessionID:
_dispatchDeferredPrekeyRequestForGroupID:previousParticipantsPushTokens:currentActiveParticipants:sessionID:waitingParticipantsTokens:
_dispatchIncomingAllocateResponse:isFromCache:requestOptions:
_dispatchRenewPrekeyTimer
_displayingAddNumberPrompt
_doCheckPendingKeyMaterialsAndSendKeyRecoveryRequestForMKM:forSKM:forDevice:forGroupID:
_doesDefaultDevicePreferInfraWiFi
_doesMessageContainValidCombination:
_domainHash
_dropLocalCache:
_dropLocalCacheForGroupID:compeltion:
_dropQueuedBroadcastsForServices:priority:
_dsHandle
_dualInterfaceidQueryMessageDelivery
_duetIdentifiersOverride
_duetInterface
_dumpLogs
_dumpLogs:isDownstream:
_duration
_duringInit
_dynamicStore
_echoTimer
_eligibleServiceIdentifiers
_emptyMessagesForURIs:service:
_emptyStates
_emptyStatesLock
_enableAccountWithUniqueID:
_enableOTR
_enableOTRForDefaultPairedDevice
_enableQuickRelay
_enableSKE
_enableSingleChannelDirectMode
_enabled
_enabledAccounts
_encodeMap:
_encryptData:withEncryptedAttributes:encrypter:priority:completion:
_encryptData:withEncryptedAttributes:usedIdentifier:error:
_encryptDataWithOTR:token:
_encryptedData
_encryptedDataBlob
_encryptedMirageHandshakeBlob
_encryptedResult
_encryption
_encryptionBlock
_encryptionController
_encryptionEnabled
_encryptionInitialized
_encryptionSequenceNumbers
_encryptionState
_encryptionStateStruct
_endDate
_endSession
_endSessionTimedOut
_endSessionTimeout
_endSessionTimer
_endSessionTimerCleared
_endSessionTimerFiredOnMain
_endTime
_endpoint
_endpointMap
_endpointQueryListeners
_endpointSubscriptionForGroup
_endpointUpdateTimer
_endpoints
_endpointsForService:fromURI:toURI:ignoreExpiration:
_endpointsToEncryptedData
_enforceRemoteTimeouts
_engramID
_enqueueBlock:identifier:withTimeout:forKey:
_enqueueInvocation:
_enqueueInvocationWithPriority:priority:
_enqueueInvocationWithSync:xpcMessage:
_enqueuedDate
_ensureGroupStableKeyMaterialCacheForGroup:
_ensureProfileQueriesAreReadyForRegistratration:
_entitledForActivity:
_entitledForAllTopics
_entitledForTopic:
_entitlements
_enumeratePrimaryAccountsOfType:block:
_environment
_eraseNGMIdentityFromKeychain:
_error
_errorCode
_errorForMissingEntitlement:
_errorMessage
_evictionDate
_evictionTimer
_excessiveCachingCount
_excessiveCachingReportCounter
_existingRelayIP
_existingRelaySessionToken
_existingRelaySignature
_expectedNextIncomingSequenceNumber
_expectedNextOutgoingSequenceNumber
_expectsPeerResponse
_expirationManager
_expirationPhase
_expireTimer:
_expiryEpoch
_extraCompletionBlocks
_extraConnectionCount
_extraConnections
_extractFieldBytesFromMetadata:ofSize:packetBuffer:
_faceTimeToken
_failPromisesWithError:
_failSavedMessageCleanly:withResponseCode:
_failSavedMessagesCleanly:withResponseCode:
_failedToGeneratedPublicDataForNGMIdentity
_failedTokenCache
_failureReasonMessageFromECError:andLegacyError:
_fairplayAuthState
_fakeMKMWrapping
_fallbackBlock
_fallbackMessages
_fallbackTimeoutForService:
_fallbackTimer
_fallbackTimerFired
_fallbackTimerFiredOnMain
_familyDevices
_familyDidUpdate:
_familyHandles
_familyMembers
_featureID
_fetchAccountEntitlements:listenerID:inContext:
_fetchAllLocalKnownGroups:
_fetchCachedObjectForKey:completion:
_fetchCurrentKVS
_fetchExpiredEntriesFromKVS
_fetchExpiryDatesIfNecessary
_fetchPresenceCapabilityForServiceTypes:withCompletion:
_fetchTokenForRegistrationInfo:failIfNotSilent:failureBlock:
_fetchVerificationInfoForService:forURIs:withCompletion:
_fileCleanupBlock
_filePath
_filename
_filterSelfAllocationsForSessionID:
_findAllocationForSessionID:requestIDStr:
_findAllocationListForSessionID:
_finishedRegistration
_fireAndForget
_firewallNotificationCenter
_firewallRateLimiter
_firewallStore
_firstAccountInStore:withType:matchingCriteria:
_firstDataPacketReceiveTime
_firstGossipChance
_firstMKMReceivedTime
_firstMKMSentTime
_firstPacketReceiveTime
_firstPacketReceivedTime
_fixedInterfaceDestination
_flush
_flushBroadcastQueuesForServices:existingServices:
_flushMessagesAll:response:
_flushTokensForRegisteredURIs:
_forMessaging
_forParticipantID
_forPublicIdentity
_forRefresh
_forSending
_forceAttachmentForMessage:
_forceAttachmentMessage
_forceInternetInvitation
_forceLegacy
_forceLegacyPK
_forceOnePerFanout
_forceRoll
_forceVerificationWithIndex:ticket:completion:
_forcedGDRTokens
_forcedLocal
_forwardPacketBuffer:fromDeviceUniqueID:cbuuid:
_forwardSendMessageToAccountWithSendParameters:service:threadContext:guid:dataProtectionClass:willSendBlock:progressBlock:completionBlock:
_forwardingSig
_forwardingSigAlgorithm
_forwardingTicket
_fragmentationSize
_fromIDFromDevice:withCBUUID:uniqueID:
_fromIDs
_fromIdentity
_fromURI
_ftNetworkSupport
_fulfillOrFailPromiseSeal:basedOnIndex:KTResult:ktLoggableDatas:optedIn:error:
_fulfillPromisesWithPhoneNumber:token:
_fullAccountIdentityWithError:
_fullClusterFromData:error:
_fullClusterWithAccountIdentityClusterWithAccountIdentity:fullAdminServiceIdentities:fullSigningServiceIdentities:error:
_fullDeviceIdentityContainerEncrypter
_fullDeviceIdentityEncrypter
_fullDeviceIdentitySigner
_fullIdentity
_fullServiceIdentityAdminWithAccountIdentity:type:error:
_fullServiceIdentitySigningWithAccountIdentity:type:error:
_fullyAckd
_gdrCenter
_generateIdentityWithExistingIdentity:identifier:dataProtectionClass:
_generateKTRegistrationData:
_generateKeys:
_generateMKMBlobForQRFromMessage:account:destination:fromID:
_generateUnregisteredIdentityWithExistingLegacyIdentity:existingNGMIdentity:
_generationCounter
_generationError
_geo
_geoRegion
_getAndUpdateParticipantsWaitingForKeyMaterialsForGroup:waitingParticipants:addedParticipantsDiff:currentParticipantsPushTokens:participantType:
_getClientChannelconnectHandlerForDestination:
_getClientUUIDForDestination:
_getCombinedSoftwareID:
_getCurrentAccountClusterWithCompletion:
_getCurrentState:
_getDependentHeartbeatTimer
_getErrorCodeFromAllocationStatus:
_getGroupID:
_getHighestPriorityMechanism
_getIDSAWDLoggingInstance
_getIDSLinkTypeString:
_getKeyFromType:
_getKeysForServiceTypeName:completion:
_getMessageCompletionCurrentEntries:withCompletion:
_getNewLinkOptionsForActiveParticipantInfoRequest
_getNextExpirationDate
_getPendingClientUUIDForDestination:
_getPublicMessageProtectionDataForIdentity:
_getPushTokenFromParticipantID:participantID:
_getQuickRelayIPPreference:
_getResponse:relaySessionID:
_getResponseForQRSessionID:sessionID:index:
_getResponseFromQRGroupID:
_getSelfAllocationFromCache:
_getSetofStandardParticipantsForGroup:
_getStallDetectorForConnection:deviceConnecionInfo:
_getStatusMessageFromStatusCode:
_getTypeFromDataKey:
_gossipEnabledServiceIdentifiers
_gossipPolicy
_gossipRecipients
_grappaDeviceSessionID
_grappaHostSessionID
_groupFromPublicDataRepresentation:completion:
_groupFromServerResponse:context:groupID:error:resultCode:resultDictionary:allEntries:completion:
_groupID
_groupIDToCapabilityToParticipantPushTokens
_groupIDToDesiredMaterialSet
_groupIDToInitialKeyMaterialDistributionTimeoutBlock
_groupIDToIsDeferredPreKeyRequestPending
_groupIDToIsKeyMaterialRecoveryRunning
_groupIDToKeyMaterialCache
_groupIDToLocalParticipantID
_groupIDToMKMExpirationTimer
_groupIDToMKMExpirationTimerBlock
_groupIDToMKMRollTimer
_groupIDToMKMRollTimerBlock
_groupIDToResetKeyMaterialCacheTimer
_groupIDToStableKeyMaterialCache
_groupIDToTypeToParticipantsPushTokens
_groupMasterKeyCollectionToBroadcastForDestinationURI:shouldIncludePeerKeys:
_groupMemberCount
_groupMemberPushTokens
_groupPayload
_groupServer
_groupServerElectionStore
_groupSessionState
_groupStatusNotificationController
_groupStatusNotificationParams
_groupWithDeviceIdentity:parent:groupInfo:error:
_guid
_guidToDeliveryAcknowledgementBlock
_guidToSendCompletionBlock
_hadInfraWiFiTraffic
_handleAccessoryMessageForID:msg:service:fromID:fromIdentity:completionBlock:
_handleAction:forAccounts:
_handleBecomingEmpty
_handleBecomingEmptyForDataProtectionClass:
_handleBecomingEmptyOfCloudMessages
_handleCBUUIDDidConnect:isDefaultPairedDevice:isAlwaysConnected:
_handleCBUUIDFailToConnect:withReason:
_handleClientDeath:
_handleDiscoveredDevice:
_handleEchoTimer
_handleFairplayAuthenticationFailure
_handleForceRepairRegistrationActionForAccounts:
_handleIncomingAllocateResponse:isFromCache:requestOptions:
_handleIncomingAttachmentMessage:forTopic:fromID:certifiedDeliveryContext:completionBlock:
_handleIncomingIDSMessageEvent:options:
_handleIncomingPushMessage:forTopic:fromID:messageContext:
_handleKTOptInStatusUpdateError:
_handleKVSUpdateResponseForTrustedDevices:withSuccessfulKVSSync:
_handleLostDevice:
_handleMessagesForURIs:originalURIs:service:fromID:fromCoalesceQueue:withQueryCompletion:
_handleMkmExpirationTimerForGroup:
_handleMkmRollTimerForGroup:
_handleNegotiationTimeout
_handleNetworkChanges:
_handleOTRDecryptionError:
_handleOTRDecryptionSuccess:
_handleReIdentifyActionForAccounts:
_handleReProvisionActionForAccounts:
_handleReRegisterActionForAccounts:
_handleSpaceBecomingAvailableForUrgentLocalMessagesWithDataProtectionClasses:withMessageTypes:
_handleTransparencySignatureResponse:error:
_handleUpdate:forActivity:
_handleValidateCredentialsActionForAccounts:
_handleWRMLinkRecommendation:
_handlers
_handshakeCounter
_hardwareVersion
_has
_hasAcceptedSMSRequest
_hasActiveAppleIDBasedAccountOnService:
_hasAllEncryptionKeys
_hasBeenProvisioned
_hasBudgetForForcedGDR
_hasCheckedMigrationThisLaunch
_hasCurrentAuthenticationsOrRegistrations
_hasDelayedNoConnectivityNotification
_hasEndedSession
_hasFixedDestination
_hasGlobalLinkConnectingOrConnected
_hasHardDeregistered
_hasLoadedPairedDevices
_hasMatchingURIs
_hasMetadata
_hasMoreData
_hasNonUrgentInternetSendingBudget
_hasNotifiedSuccess
_hasOngoingAuthentications
_hasPreferWiFiRequest
_hasProcessedMessagesAfterFirstUnlock
_hasReachedMaxNumberOfRetries:
_hasReceivedAPSDAck
_hasRegeneratedSecuredEncryptionKeys
_hasRegisteredContainer
_hasRegistration:inQueue:
_hasReportedReceivedMKM
_hasSessionInfoRequiredKeys:
_hasSpaceAvailable
_hasThresholdReachedForSMSTimeoutForIdentifier:
_hasUnregisteredContainer
_hash
_haveQueuedMessageForRegistration:inQueueForKey:
_headerData
_heartBeat
_heartbeatCenter
_heartbeatTimerFiredOnMain
_helloMessage
_highPriorityConnectionSendingSet
_homeKitMessageDelivery
_homePlmn
_hourlyTimer
_hourlyTimerHandler
_httpMessageDelivery
_iMessageToken
_idStatusCache
_identifier
_identifierForValidator:
_identity
_identityDataErrorPairForDataProtectionClass:
_identityDataSource
_identityForDevice
_identityGenerated:
_identityPair
_identityRebuilt:
_identityRegenerationDelay
_identityToRegisterError
_identityVersion
_idsDaemon
_idsDataChannelClientPID
_idsDeviceConnectionUUID
_idsNRDeviceBridge
_idsNRPluginManager
_idsPriority
_idsServerBag
_idsSessionIDToqrSessionID
_idsUserID
_ignoreIncomingPushes
_ignoreMaxRetryCount
_ignoreUTunChannelWriteSignal
_im_normalizedURIString
_impactedServices
_inFlightHeartbeatBlock
_inFlightMessageCountLowWaterMark
_inFlightResetBlock
_inFlightSMSTimeoutBlock
_inUseProfileIDs
_incomingDataFragments
_incomingEncryptionTableBySSRC
_incomingLocalPowerAssertion
_incomingLocalPowerAssertionClients
_incomingLocalPowerAssertionLock
_incomingMessageIdentifierForMessageUUID:messagePayload:
_incomingMessageMultiQueue
_incomingMessageStorageDictionaryForPayload:topic:deviceID:btUUID:command:messageUUID:sequenceNumber:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:
_incomingPacketBuffer
_incomingResourceTransfers
_incomingServiceMap
_incomingServiceMapUpdateCounter
_incrementForcedGDRCount
_incrementMessagesFromStorageForTopic:
_individualPeerMessages
_inferredExternalIP
_inflightMessageCount
_inflightMessageCountForClass:
_inflightMessageCountForType:
_inflightStorageRequests
_infoAttribute
_infos
_initWithLoginID:service:uniqueID:accountType:accountConfig:primaryAccount:isAdHocAccount:
_initialLinkType
_initialProcessTime
_initialServerTime
_initialSyncClientIDs
_initializeParticipantsWaitingForInitialKeyMaterialsForGroup:
_initializePlugin
_initializePluginWithClass:
_initiatorsAcceptedSessionsWithToken
_inputBytesPerSecond
_insertTrustedDeviceToKVS:
_instanceID
_interesting
_intermediateRootCert
_internalMetricLogger
_internalQueue
_invalidateClientChannel:
_invalidateSession:isExpiryPurging:
_invalidationHandler
_invitationManager
_invitationRetryCount
_invitationStore
_inviteNeedsDelivery
_inviteTimeout
_inviteTimer
_inviteTimerCleared
_inviteTimerFiredOnMain
_ipPreference
_ipsecQueue
_isAccountInfoRegistered:
_isAccountRelevantForRegistrationPush:
_isAdvertising
_isAltAccountPairing
_isAlwaysConnected
_isAsleep
_isAudioPaused
_isAwaitingUserSelectionDuringSetup
_isBAAOptionEnabledByServerBag
_isBeingHandedOff
_isBlackholed
_isBuildingContext
_isBulkingStorageMessagesForService:
_isC2K
_isCentral
_isClassAStoreAvailable
_isClassCConnected
_isClassCStoreAvailable
_isClassDStoreAvailable
_isCleanupMeantForTheRightSession:clientChannelUUID:
_isCloudConnected
_isConnected
_isControlChannel
_isDefaultDeviceNearby
_isDefaultDeviceOnPhoneCall
_isDefaultDeviceUsingBTLink
_isDefaultPairedDevice
_isDefaultPairedDevicePairedLocally
_isDefaultPairedDevicePairedRemotely
_isDefaultUser
_isDeviceInAccountRegistration:forService:
_isDirectMsgChannel
_isDisabled
_isDisabledService:
_isDiscoveredOverWiFi:
_isDuplicateResponse:newResponse:
_isEnabled
_isEncryptionKeyRegenerationSupportedByCapabilityFlags:
_isEntitledForPreferInfraWiFiForServices:error:
_isFastSync
_isFinishedBlock
_isForced
_isGFTService
_isHardReset
_isIPSecLinkEnabled
_isIPsecSupportedByCapabilityFlags:
_isInDualPhoneIdentityModeForSims:
_isInServerBackoffMode
_isInUPlusOneMode
_isInitiator
_isInternal
_isInternalInstall
_isInvalidated
_isIssuingDependentCheck
_isJoinAllocation
_isJunked
_isKTRegistrationData:forServiceIndex:inTrustedDevices:
_isKeyTransparencyDisabledViaServerBag
_isKeyTransparencyEnabledViaDefaults
_isKeyTransparencyEnabledViaServerBag
_isKeychainError:withOSStatus:
_isLightweightParticipant
_isLinkForDefaultPeerConnected
_isListening
_isLoaded
_isLoading
_isLocal
_isLocalDeviceSafeviewAdviserInitiatorOnLoboMacOrLaterAndRemoteDeviceIsPreTiboAnyPlatform
_isLocalSetUpInProgress
_isMagnetConnection
_isMagnetIndicatingPeerIsAwake
_isMigratedSignature
_isNGMKeyType
_isNearby
_isNegotiating
_isNewUPlusOneSession
_isOptIn
_isPairedToDevice:
_isPasswordPromptPermissibleDuringAuthentication
_isPeerAlwaysConnected
_isPendingResetOfKeyRegenerationFlag
_isPhoneNumberAuthenticationDuringBuddyAllowed
_isPhoneNumberIdentificationSupported
_isPipeConnectingOrConnected
_isPoweredOn
_isPublicKeyDistributed
_isQuickSwitchingMutex
_isQuickSwitchingToAnotherDevice
_isReady
_isReadyForEncrypting
_isRealTime
_isRegistered
_isRegistrationActive
_isReinitiate
_isScreenSharingSession
_isSecKeyType
_isSecurelyStoringIdentity:withExpectedProtectionClass:
_isSending
_isServerMaterialExchangeEnabled
_isSetup
_isSharedSession
_isSimulateResetLoopTest
_isSpamReportingV1ServerDisabled
_isSupportIPsecLinkFlagSet
_isSuspended
_isTestRunning
_isTinkerFlagSet
_isTinkerPairedInCapabilityFlags:
_isTopicBeingRateLimited:
_isTrustedCandidate:index:givenTrustedDevices:
_isUserSubscriptionSelectionStillPending
_isUsingAccount:
_isValidDestination:
_isValidPushToken:
_isVideoPaused
_isWiFiBroughtUp
_isWiProxPeer
_issueAsyncCoreTelephonyPhoneNumberValidationRequestWithPushToken:mechanism:
_issueCriticalDependentCheck
_issueDependentCheck
_issueForcedDependentCheckIfPossible
_issuingDependentCheck
_issuingHandlesCheck
_iterateByRealm:block:
_ivarQueue
_joinGroupSessionPending
_joinNotificationDeliveryTimeoutBlock
_joinRecvTime
_joinSendEndTime
_joinSendStartTime
_joinStartTime
_joinType
_kernelTime
_key
_keyData
_keyForURIs:service:
_keyIDToParticipantID
_keyIndex
_keyManager
_keyMaterial
_keyMaterialLength
_keyPairProvider
_keyPairSignature
_keyTransparencyAccountKeyFromRegistrationMessage:service:URI:
_keyTransparencyContext
_keyTransparencyDeviceSignatureFromRegistrationMessage:service:URI:
_keyTransparencyEnrolledURIs
_keyTransparencyEntriesForEndpoints:
_keyTransparencyLoggableDataFromRegistrationMessage:service:URI:
_keyTransparencyServiceIdentifierForTransparencyApplication:
_keyTransparencyStore
_keyTransparencyTicketForService:fromURI:toURI:
_keyTransparencyURIPrefixForServiceIdentifier:
_keyTransparencyVerifier
_keyTransparencyVerifierForServiceIdentifier:
_keyType
_keyValueDelivery
_keychainAccountFromBaseIdentifier:
_keychainCache
_keychainElectionStore
_keychainEntryForCluster:
_keychainIdentifier
_keychainMigrationComplete:
_keychainWrapper
_keychain_comparisonValue
_keychain_isEqual:
_kickRemoteCacheWipe
_kickoffOTRNegotiationWithDevice:token:negotiationData:
_kms
_ktApplicationForKTRegistrationIndex:
_ktCapable
_ktDataNeedsUpdate:
_ktRegDataByServiceType
_ktRegistrationDataIndexForKTApplication:
_ktRegistrationDataManager
_ktVersion
_kvStore
_labelID
_lackAll
_language
_lastBagRepairInterval
_lastCloudConnectedTime
_lastConnectedTime
_lastDateCheck
_lastDisconnection
_lastDownstreamDumpLogTime
_lastFallback
_lastIsNearbyBecameTrue
_lastKnownGroupIDToPushTokens
_lastNewMagnetCorruptionTime
_lastPrintTime
_lastReceivedMessageTimePerTopic
_lastRepairIntervalFromPrefs
_lastSelfVerifyDate
_lastSendSMSTimer
_lastSendSMSTimerFiredOnMain
_lastSentAck
_lastSentDefaultDeviceCloudConnectivity
_lastSentDefaultDeviceConnectivity
_lastSentDefaultDeviceNearby
_lastSentDefaultPeerConnectivity
_lastSentSeq
_lastSocketActivityTime
_lastStallDetectLogTime
_lastStartTime
_lastSuccessfulSentTime
_lastSuccessfulUpsertDeviceRecord
_lastUpstreamDumpLogTime
_launchServiceOnDemand:
_legacyAccountsOnService:
_lightweightParticipantSync:
_linkIDToDatagramLink
_linkIDToLink
_linkIDsAlwaysConnected
_linkIDsConnecting
_linkIDsDisconnecting
_linkKeyForLink:
_linkLayerConnected
_linkLayerDisconnectTime
_linkManager
_linkProtocol
_linkScore
_linkSuspended
_linkType
_listenForMGChanges
_listener
_listenerBundleIDs
_listenerCachedCommands
_listenerCachedServices
_listenerCapabilities
_listenerCommands
_listenerEntitlements
_listenerID
_listenerIDs
_listenerLocalObjects
_listenerLock
_listenerNotificationServices
_listenerServices
_listeners
_listenersByActivity
_listening
_listeningForRegStateChanges
_listeningOnActivities
_liveMessageDelivery
_loadAndDeserializeBuildOfIdentityGenerationForItemName:
_loadAndEnableStoredAccounts
_loadAndEnableStoredLegacyAccounts
_loadCache
_loadClassAIdentityIfNeeded:
_loadClassCIdentityIfNeeded:
_loadClassDIdentityIfNeeded:
_loadContainerWithIdentifier:serializationDidChage:deserializationDidFail:needsEncryptionIdentityRoll:error:
_loadGossipRecipients
_loadIdentityWithIdentifier:serializationDidChage:deserializationDidFail:error:
_loadIfNeeded
_loadIfNeeded:
_loadLegacyCache
_loadLegacyIdentityWithIdentifier:serializationDidChange:deserializationDidFail:error:
_loadPairedDevicePropertiesIfNeeded
_loadService:
_loadServices
_loadSubServiceWithName:usingService:completionBlock:
_loadSubServices
_loadingRateLimiter
_localAccountSetupCompleted
_localAddress
_localBlob
_localCID
_localCIDSet
_localCN
_localCallInfoData
_localCell
_localConnectionGUID
_localConnectionType
_localContext
_localDestinationDeviceUUID
_localDetectedCorruption
_localDeviceIdentifier
_localDevicePrivateData
_localDevicePushToken
_localFullIdentity
_localICEData
_localIncomingGUIDs
_localIncomingGUIDsLock
_localKeyMaterial
_localKeyToEntry
_localNATIP
_localNATType
_localPartyID
_localPushTopics
_localSA
_localSKEData
_localServices
_localSetupInProgress
_localURI
_localUnauthenticatedFullIdentity
_localWiFiAddressUsedForDefaultDevice
_localizedServicesAccessStringForDevice:serviceMessage:
_localizedServicesUsageStringForDevice:useSingular:
_lock
_lockdownManager
_lockdownStateChanged:
_lockedPeerMap
_lockedRemoteObjectsWithNotificationService:entitlement:command:capabilities:
_lockedRemoteObjectsWithService:entitlement:command:capabilities:
_lockedRemoteObjectsWithService:entitlement:command:capabilities:ignoreService:
_lockedRemoteObjectsWithService:entitlement:command:capabilities:ignoreService:useNotificationServices:
_lockedRemoteObjectsWithService:entitlements:command:capabilities:ignoreService:useNotificationServices:
_locked_ensureGroupMasterKeyMaterialCacheForGroup:
_locked_printBroadcastAttemptMapForPriority:service:
_locked_updateParticipantsWaitingForKeyMaterialsIfNeededForGroupID:remoteToken:previousRemotePublicKey:newRemotePublicKey:
_logPackets
_logRequestInPowerDictionaryForService:preferences:
_loggableData
_loggingFlags
_loggingSequenceIncoming
_loggingSequenceOutgoing
_lookupDateForURI:fromService:
_lookupIDStatusForURIs:fromIdentity:fromURI:fromService:lightQuery:allowQuery:forceQuery:bypassLimit:completionBlock:
_lookupIdentityWithLastResortFallback:
_lookupNGMVerificationIdentityShouldUseLastResort:usedLastResort:
_magnetCorruptionRecoveryMode
_mainAccountGuid
_managedPrefsNotification:
_managerQueue
_manualQueueRemoval
_mapByAddingMetadataToMap:
_markSecuredEncryptionKeysAsRegenerated:
_masterKeyIdentifiersReceivedByClient
_masterKeyMaterials
_maxAllowedMessageSize
_maxCompatibilityVersion
_maxConcurrentStreams
_maxMessagesForRunawayClientConsideration
_maxOutgoingDatabasesSizeInMB
_maxPayloadSizeForMessage:
_maxQueueSize
_maxRecipientMemory
_maxSelectedButVettedGracePeriod
_maxSize
_maximumNextStoredLoadTime
_md5Hash
_mechanism
_mechanismForSubsystem:
_membersForGroup
_membersLightweightStatusDict
_membershipChangeEventTime
_mergeCloudKitTrustedDevices:accountKeyTrustedDevices:
_mergeParticipantID2PushTokenMapping:sourceResponse:mappingChange:
_mergePolicy
_mergePolicyType
_message
_messageCount
_messageDelivery
_messageHasValidEncryptionStatus:
_messageHashChecker
_messageHashStore
_messageID
_messageIsAllowedToSendMessageOnTopic:
_messagePriority
_messageQueue
_messageResponseHandler
_messageSenderID
_messageSequenceNumber
_messageServerTimestamp
_messageState
_messageStoreClass
_messageStoreForDataProtectionClass:
_messageStores
_messageTimedOut:localMessage:
_messageToSend
_messageType
_messageTypeForConnection:
_messageTypeSupportedForCloudConnection:
_messageUUID
_messages
_messagesGroupContext
_messagesGroupContextWithCompletion:
_messagesReceivedDuringStorage
_messenger
_metadata
_metadataBlob
_metadataData
_metadataSize
_metadataWithEndpoint:ECSuccess:legacySuccess:ECError:legacyError:
_metricCollectors
_metrics
_metricsCollector
_migrateIdentity:toProtectionClass:
_migrateLegacyAccounts
_migrateLegacyAccounts1
_migrateLegacyAccounts2
_migrateRegisteredIdentityFromClassDtoClassCIfNeeded
_migrateRegistrationIfNeeded
_migrateSecuredEncryptionKeys
_migrated
_migrationContext
_migrationDefaultKey
_migrationPromise
_migrationTracker
_migrationTypeForKeychainDictionary:
_minCompatibilityVersion
_minReportFileOpenTimeInterval
_minimumNextStoredLoadTime
_missingDeviceIdentity:
_missingIdentity
_missingPrekey
_mkmAcknowledgementTimeout
_mkmExpireDuration
_mkmRollDuration
_mkmRollTimerFiredForGroup:sessionID:
_mmcsUploader
_model
_modifyDomainWithUsername:
_modifyGameCenterAccountPropertiesForUsername:
_mostRecentIDSRegistrationReason
_multiQueue
_multiplexerEnabled
_multiplexerTransport
_multiwayFTMessageSendTimeout
_mutateSuccessfulSyncIndicatorOnKTLoggableDatas:forIndex:
_mutex
_name
_nanoConnectedFallbackTimeoutForService:
_nanoDisconnectedFallbackTimeoutForService:
_nearbyChangedForDefaultDevice
_neededRegistrationType
_needsEncryptionIdentityRoll:
_needsProvisioning
_needsReRegister
_needsRenewal
_needsToCheckPhoneNumberState
_negativeRegistrationUpdateCache
_negotiationCount
_negotiationTimer
_negotiationTimerFiredOnMain
_networkChangeNotifier
_networkCode
_networkRelayRegisterDeviceWithCBUUID:properties:shouldPairDirectlyOverIPsec:
_networkRelayRegisterDeviceWithCBUUID:wasInitiallySetupUsingIDSPairing:maxCompatibilityVersion:BTOutOfBandKey:supportsIPsecWithSPPLink:bluetoothMACAddress:
_newCompanionLinkClient
_newGlobalLinkForDeviceUniqueID:cbuuid:options:
_newKeyEventTime
_newKeyForValues:priority:
_newPg
_newServiceSupported
_newSetupInfoWithContext:
_newSocket
_newUDPGlobalLinkForDeviceUniqueID:cbuuid:
_newUDPLinkForDeviceUniqueID:cbuuid:IPVersion:port:
_nextComponent
_nextIndex
_nextLocalMasterKeyMaterial
_nextMessageID
_nextRegistrationDate
_nextRegistrationHeartbeatTime
_nextRemoteInstanceIDIndex
_nextSendSMSDate
_nextStreamID
_ngmPublicIdentity
_ngmVersion
_niceToSocketCommand:
_no_timeout_fetchKeyTransparencyDeviceRecordsWithCompletion:
_no_timeout_no_cache_fetchKeyTransparencyDeviceRecords
_no_timeout_nukeKeyTransparencyDeviceRecordsWithCompletion:
_no_timeout_upsertKeyTransparencyDeviceRecord:recordsToModify:recordsToDelete:completion:
_no_timeout_verifyEncryptionPrerequisitesWithCompletion:
_nominateRequestStartTime
_nonBTAllowedForClientID:
_nonThreadSafeIsConnected
_nonThreadSafeSocketOptions
_nonThreadSafeStopConnection
_nonUrgentInternetLastAttempt
_nonUrgentInternetSendProbabilityForCurrentWindow
_nonUrgentInternetSendTimer
_nonUrgentInternetSendTimerFired
_nonWaking
_noteActionType:forService:serviceType:requestor:
_noteDecryptionFailureForGroup:completion:
_noteItemFromStorage:
_noteJoinNotificationDidDeliverWithSuccess:
_noteJoinNotificationWillSend
_noteKeyMaterialDidSendToDestination:groupID:withSuccess:
_noteKeyMaterialNotNeededForDestination:groupID:
_noteLastItemFromStorage:
_noteNewAvailableNotification:
_noteNewUsageNotification:
_noteReceivedResourceTransferUUID:
_noteRegistration
_noteRegistrationAttemptForIdentifier:withRegistrationInfo:
_noteShouldSynchronizeTinkerDeviceInfo
_noteSourceDidDiscoverEndpointMap:forLocalURI:
_noteSuccessfulToken:profileID:selfID:forRegistrationInfo:wasFetched:
_notificationBodyForService:URI:
_notificationCenter
_notificationDelayInSeconds
_notificationIconIdentifierForService:
_notificationLimitPerPeriod
_notificationLimitTimePeriod
_notificationShouldRedirect
_notificationSupportURL
_notificationTitleForService:
_notifier
_notifiers
_notifyAllRegistrationSuccess:
_notifyAllSuccessfulRegistrations:
_notifyAuthenticating:
_notifyAuthenticationFailure:responseCode:registrationError:error:info:
_notifyAuthenticationSuccess:
_notifyClientDelegatesWithBlock:
_notifyClientsSessionStopped
_notifyDelegateAboutClosedConnection
_notifyDelegatesAddedLocalDevice:
_notifyDelegatesDevicePairedToDevice:
_notifyDelegatesDeviceUnpairedFromDevice:
_notifyDelegatesWithBlock:
_notifyDeregistrationStarting:
_notifyDict
_notifyEmailQueryFailure:responseCode:registrationError:error:info:
_notifyEmailQuerySuccess:emailInfo:
_notifyFailureWithError:
_notifyFailureWithError:registration:identifier:
_notifyFamilyServicesOfUpdate
_notifyHomeNumberSuccessForUser:
_notifyIDSAuthenticationSuccess:
_notifyIDSNanoRegistryPluginManagerOnWatch:
_notifyInitialRegionQuerySuccess:
_notifyListenersAndSetDependentRegistrations:onRegistrationInfo:
_notifyListenersWithChanges:
_notifyNeedsNewIdentification
_notifyNeedsNewRegistration
_notifyParticipantID2PushTokenMappingChange:
_notifyProvisionFailure:responseCode:registrationError:error:fatal:info:
_notifyReachableDone
_notifyRegenerateDelay
_notifyRegionValidationFailure:responseCode:registrationError:error:info:
_notifyRegionValidationSuccess:regionID:phoneNumber:context:verified:
_notifyRegistrationFailure:error:info:
_notifyRegistrationFailure:responseCode:registrationError:error:info:
_notifyRegistrationIdentitiesUpdated
_notifyRegistrationListenersAccountDidUpdateRegisteredDevices
_notifyRegistrationStarting:
_notifyRegistrationSuccess:
_notifyRegistrationUpdated:
_notifySuccess:token:identifier:
_notifyTinkerServicesOfPairedDevice:withBlock:
_notifyToken
_notifyURIToParticipantIDMappingChange:
_notifyUnregisteredIdentityRegenerated
_notifyWhenConnectionReceivesBytes
_notifyWirelessRadioManagerAboutLinkChange:
_now
_nrDeviceIdentifier
_nrDeviceIdentifierWithCBUUID:
_nrDeviceManager
_nrDeviceMonitor
_nrDevicePreferences
_nrDevicePreferencesHandler
_numQueriesThisHourByTopLevelService
_numberForKey:
_numberOfAttemptsWithoutSuccessfulSend
_numberOfBroadcastCacheMKM
_numberOfMatchesForCandidates:index:trustedDevices:
_numberOfOutagesSinceInterval:
_numberOfPreflights
_numberOfSuccessfulSends
_nwConnection
_objectForKey:
_observer
_observerProxies
_onQueueStartOTRNegotiationWithDeviceIfNeeded:token:reset:errorHandler:
_openSocketCalled
_openSocketCompletionHandler
_operation
_opportunisticCache
_opportunisticDeliveryController
_opportunisticQueue
_optInEligibleKTApplicationToIDSServiceIdentifier
_optionallyDecryptMessage:completionBlock:
_optionallyDecryptMessage:encryptedData:forGroupID:forTopic:fromID:certifiedDeliveryContext:completionBlock:
_optionallyDecryptMessage:encryptedData:forGroupID:forTopic:fromID:certifiedDeliveryContext:isLiveRetry:completionBlock:
_originPersister
_originalTimestamp
_osVersion
_otrTestBlock
_otrTimer
_otrTokenIdentifier
_outOfBandKey
_outgoingData
_outgoingEncryptionTableBySSRC
_outgoingMessageArray
_outgoingMessageArrayLock
_outgoingMessages
_outgoingPriorityMessages
_outgoingServiceMap
_outgoingStallDetector
_outgoingStallDetectorName
_outputBytesPerSecond
_overallSendTimestamp
_packetBuffer
_packetBufferArray
_packetBufferHandler
_packetLossTimer
_packetsPerSecond
_packetsReceived
_packetsSent
_pairWithSPPLink
_pairedDeviceCBUUIDString
_pairedDeviceCBUUIDs
_pairedDeviceInfoRequestCountdown
_pairedDeviceManagerCollaborator
_pairedDeviceRepository
_pairedDeviceUUID
_pairedDevices
_pairedDevicesFromPropertyDictionaries:
_pairedDevicesLock
_pairingCollaborator
_pairingDeviceCBUUIDs
_pairingProtocolVersion
_pairingStateToken
_pairingToken
_parentPg
_parentVersion
_parentalControls
_parseHandlesInfo:currentAliases:currentVettedAliases:
_parseQuickRelayDefaults:gropuID:
_participantData
_participantID
_participantInfo
_participantsForCypher:completion:
_participantsForDestinations:completion:
_participantsForGroup
_participantsInfoForGroup
_participantsWaitingForInitialKeyMaterials
_participantsWaitingForKeyMaterials
_participantsWaitingForStableKeyMaterials
_passwordManager
_payload
_payloadFromDecryptedData:
_payloadMetadata
_peerConnectBlocksMap
_peerFailureBlocksMap
_peerIDKeysForService:andFromURI:
_peerIDManager
_peerIDManagerToken
_peerListMap
_peerMap
_peerProtocolVersion
_peerResponseIdentifier
_pendingAccountInfoBroadcast
_pendingCloudEnable
_pendingDataReceive
_pendingDataSend
_pendingDependentCheck
_pendingDeregistration
_pendingHandlesCheck
_pendingHeartbeat
_pendingIdentityRegeneration
_pendingIncomingAttachments
_pendingMasterKeyMaterials
_pendingOfflineMessages
_pendingOutgoingAttachments
_pendingOutgoingBytesForClass:
_pendingPipes
_pendingReIdentify
_pendingReRegister
_pendingRecipientsAcceptedSessions
_pendingResponseTokens
_pendingStableKeyMaterials
_pendingStorageRequests
_performCacheModifyingBlock:
_performCacheReadingBlock:
_performCorrectServerRequestForTemporaryPhoneRegistration:sentAuthentication:sentIDSAction:
_performDuetCheckAndSendForAccount:sendParameters:logString:fromQueue:completionBlock:
_performDuetCheckAndSendForServiceIdentifier:serviceDuetIdentifiers:sendParameters:logString:fromQueue:completionBlock:
_performEvictionSweep
_performFallbackIfNecessary:
_performHighestPriorityPreflightVerification
_performInitialHousekeeping
_performLockedBlock:
_performSetup
_performTransactionInCriticalSectionWithBlock:
_performedForcedGDRDatePeriod
_peripheralManager
_peripheralManagers
_persistAccounts:
_persistTopic:
_persistedTopics
_persistentEnrollmentHandler
_persistentMap
_persister
_personalCBUUIDString
_phoneBookNumber
_phoneNumber
_phoneNumberRepairInterval
_phoneNumberRepairIntervalForCount:
_phoneNumberRepairMaxInterval
_phoneNumberRepairTimerHit:
_phoneNumberValidationRetryCount
_phoneNumberValidator
_phoneRepairTimer
_phoneToken
_phoneUser
_phoneUserWithCredentials
_pidSuspended:
_pipe
_pipeManager
_pipePeripheralUUIDString
_pipelineHandleMessage:forURIs:service:
_pipelineHandleMessage:forURIs:service:withCompletion:
_pipelinesHandleMessagesToCoalesce:forService:sendMode:
_plistFilePath
_pluginImplementsWatchDidStartAdvertising
_pluginImplementsWatchDidStopAdvertising
_pnrOngoing
_pnrReason
_policyTrafficClassifiers
_popHighestPriorityPreflightVerification
_portDidBecomeInvalid
_portMap
_portString
_postAliveNotification
_postAvailableNotificationForSessions:appleID:aliases:deviceName:serviceTypes:blockMap:
_postNotificationForURI:onService:withBody:title:iconIdentifier:
_postPendingConsentAlerts
_postUsageNotificationForSessions:appleID:aliases:deviceName:deviceModel:deviceCapabilities:serviceTypes:
_postUserNotificationWithTitle:message:identifier:completionHandler:
_postedFirstHostStateChange
_powerLogServices:prefersInfraWifi:
_powerLogTimerDefault
_powerLogTimerSockets
_powerLogTimerSync
_powerLogTimerUrgent
_power_log_queue
_powerlogDictionaryForSockets
_powerlogTransportStats
_preKeyRequestDelayDuration
_preferCellularForCallSetup
_preferences
_preferencesLock
_preferencesOnDomain:
_preferredAddressFamily
_preflighStackStore
_preflightStackStore
_prekeyAckCountForGroup
_prekeyExpireDuration
_prepareConnectionInfoWithCBUUID:deviceUniqueID:shouldUseIPsecLink:identityPair:remoteDeviceEncryptionInfo:
_presentInternalVerificationAlertWithText:
_prevBPS
_preventNewQuery
_previousAccessToken
_previousBytesReceived
_previousBytesSent
_previousCorruptionsDetected
_previousIdentityForDevice
_previousPacketsDropped
_previousPacketsReceived
_previousPacketsSent
_previousPrekeyExpireDuration
_previousRegisteredIdentityContainer
_previousRelayIP
_previousRemoteInstanceIDs
_previousReportFileOpenTime
_previousReportTime
_primaryAccountExistsForService:withURI:
_primaryRegistrationDSHandle
_primaryRegistrationURIs
_prioritizedTokenList
_priority
_priorityForConnection:
_priorityQueue
_priorityToCompletionBlocks
_priorityToTimeoutBlocks
_privateDeviceData
_privateKey
_processAvailableNotifications
_processAvailableNotificationsTask
_processBytesAvailable
_processDecryptedMessage:
_processDefaultInvitationContextMessage:deliveredWithError:resultCode:resultDictionary:
_processDeletingMessagesWithPriority:reason:responseCode:allowedTrafficClasses:
_processDisallowedMessages
_processGetHandlesMessage:registrations:deliveredWithError:resultCode:resultDictionary:allowPasswordPrompt:
_processIncomingDataMessage:
_processIncomingLocalMessage:topic:command:deviceID:btUUID:context:storedGUID:priority:connectionType:didWakeHint:
_processIncomingMessage:
_processIncomingPacket
_processIncomingRawMessage:
_processIncomingRemoteMessage:forTopic:fromID:storedGuid:messageContext:
_processIncomingResourceTransferMessage:messageUUID:streamID:topic:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:isDefaultPairedDevice:didWakeHint:
_processLMCommandPacket:fromLink:deviceUniqueID:cbuuid:
_processLinkChangeForDefaultDeviceFrom:to:
_processLocalMessagesWithAccountUUIDs:priority:dataProtectionClass:
_processLocalMessagesWithAccountUUIDs:priority:dataProtectionClass:messageTypes:
_processMessage:withSequenceNumberBlock:
_processMessageError:topLevelMessage:error:messageID:service:serviceType:token:fromIdentifier:toIdentifier:groupID:completionBlock:
_processMessageResponse:error:resultCode:toURI:fromURI:service:fromIdentity:
_processMessageResponseForMessage:withError:resultCode:toURI:fromURI:service:fromIdentity:
_processMessagesUponUnpairing
_processNameToServiceName:
_processNonMessagingPayloadWithCommand:dictionaryPayload:senderToken:topic:toIdentifier:fromID:peerResponseIdentifier:guid:service:idsMessageContext:messageContext:
_processOutgoingNonUrgentInternetMessages
_processOutgoingPacket
_processQueuedBroadcastsForServices:priority:forceRetry:
_processReceivedDependentRegistration:oldDependentRegistrations:
_processRegionValidationMessage:deliveredWithError:resultCode:resultDictionary:
_processRegistrationMessage:sentRegistrations:descriptionString:actionID:actionString:isDeregister:deliveredWithError:resultCode:resultDictionary:
_processSelfAllocations:allocation:
_processStoredIncomingLocalMessage:
_processStoredIncomingLocalMessages
_processStoredIncomingMessages
_processStoredIncomingRemoteMessagesWithGUIDs:ignoringGUIDs:lastTimeInterval:
_processStoredMessagesIncludingClassD:
_processStoredOutgoingUrgentMessagesProcessLocalAccounts:
_processStunBindingRequest:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:
_processStunBindingResponse:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:
_processStunDataIndication:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:packetBuffer:fromDeviceUniqueID:cbuuid:
_processStunEchoRequest:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:
_processStunEchoResponse:fromDevice:localIfIndex:localAddress:remmoteAddress:arrivalTime:
_processStunPacket:fromDevice:arrivalTime:fromDeviceUniqueID:cbuuid:
_processTime
_processUsageNotifications
_processUsageNotificationsTask
_productBuildVersion
_productName
_productionMetricLogger
_profileID
_progressBlock
_promises
_promptMessage
_promptTitle
_properties
_propertyDictionariesFromPairedDevices:
_protectedCachedKeyMaterialsForDestination:pushToken:forGroup:outURIs:includePeers:
_protobuf
_protocol
_protocolVersion
_provTemporaryPhoneMessageForRegistration:
_provider
_provisionedTemporaryUser
_pruneExpiredStatusUnknownEntries
_pruneInvalidAndLocalPushTokensFromTokens:
_pruneLightweightParticipantsForGroupID:forTokens:
_pruneTrustedDevice:givenEligibleServiceIdentifiers:
_pseudonyms
_publicDataRepresentationForGroup:completion:
_publicIdentityCache
_publicIdentityData
_publicKey
_publicKeyData
_publicKeyForDevice
_publicKeyStorage
_publicLegacyIdentityData
_publicNGMIdentityData
_publicNGMPrekeyData
_publicPreKeyData
_publish
_publishedStreams
_purgeAllocation
_purgeCancelBlock
_purgeClientDataBlocks
_purgeEnqueueBlock
_purgeMap
_purgePreviousIdentityDelay
_purgePreviousIdentityFromMemoryAndKeychain
_purgePreviousIdentityTimer
_purgePreviousIdentityTimerFired
_purgePreviousIdentityTimerFiredOnMain
_purgeSecuredEncryptionKeysForAllPairedDevices
_purgeTimer
_purgeTimerFiredOnMain
_pushCert
_pushHandler
_pushKey
_pushListener
_pushPriority
_pushPublicKey
_pushToken
_pushTokenToQRSessionID
_pushTokenToSKMsMapping
_pushTokenToURIForGroup
_pushTopics
_putMessageCompletionWithCompletion:
_qrError
_qrEventsForRTCReports
_qrReason
_queryCompletionBlock
_queryGroupServerENID:withPreviousEntries:completion:
_queryHandler
_queryInitialInvitationContextForRegistration:
_queryPolicy
_queryQueue
_queryUpdateNotifier
_queryValidatedEmailsForRegistration:allowPasswordPrompt:completionBlock:
_queue
_queueForImplicitPriority:
_queueForKey:
_queueForPriority:
_queueManager
_queueMap
_queueMessage:service:dataToEncrypt:withEncryptedAttributes:fromID:fromIdentity:toID:toPeople:originallyToPeople:canUseLargePayload:sendOnePerToken:registrationProperties:fakeMessage:alwaysSkipSelf:disallowRefresh:prioritizedTokenList:wantsFirewallDonation:destinationObject:willSendBlock:completionBlock:fromCoalesceQueue:
_queueNextOutgoingData
_queueOneIdentifier
_queuedAuthentications
_queuedBroadcastAttempts
_queuedRegistrations
_quickRelayRequestsCount
_quickRelaySessionToken
_quickSwitchHelper
_radarClassification
_radarComponentId
_radarComponentName
_radarComponentVersion
_radarDescription
_radarKeywords
_radarQueryParameter
_radarReproducibility
_radarTitle
_randomizedIdentityRegenerationInterval
_rapportClient
_rapportSendWithSendParameters:completionBlock:
_rateLimitMap
_rateLimiter
_read:maxLength:
_readFromDataChannel:size:withFlags:isSynced:
_readHandler
_realTimeEncryptionController
_reallyUpdateRegistrationHeartbeatTask
_realm
_realmByListener
_realtimeEncryptionQueue
_rebuildRegistrationInfo:
_recalculateTopics
_receiveData:forKey:fromParticipant:
_receiveFromNWConnection:
_receiveHandlerBeingCalled
_receivedReinitiateBringupAckMessage:fromID:
_receivedReinitiateBringupMessage:fromID:
_receivedReinitiateRequestMessage:fromID:
_receivedReinitiateTeardownAckMessage:fromID:
_receivedReinitiateTeardownMessage:fromID:
_receivedResourceTransferUUIDs
_recentKeyLoadingErrors
_recentlyBlockedHandles
_recipientDataSize
_recipientPushToken
_recipients
_recordID
_recordIDForDeviceRecord:
_recordType
_recursiveLock
_reestablishmentRequestReceiveTime
_refreshIPsecStatus
_refreshLocalAccounts
_refreshRegistration
_regenerateIdentityTimer
_regenerateIdentityTimerFired
_regenerateIdentityTimerFiredOnMain
_regenerateSecuredEncryptionKeys
_regionBasePhoneNumber
_regionID
_regionServerContext
_registerAccount
_registerAccountsWithRemoteInfo:
_registerEndpointQueryCompletionBlock
_registerForAllRegistrationsSucceeded
_registerForCheckpointAndVacuumDB
_registerForDeviceCenterNotifications
_registerForLockdownNotifications
_registerForNetworkAvailableNotification
_registerSysdiagnoseBlock
_registeredAccountIDs
_registeredForPush
_registeredForPushes
_registeredIdentityContainer
_registeredIdentityTimestamps
_registeredKTData
_registeredKeychainError
_registeredPairedDeviceDidConnectBlockPairs
_registration:needsRenewal:
_registrationAbilityChanged:
_registrationCert
_registrationConductor
_registrationControl
_registrationControlStatus
_registrationController
_registrationData
_registrationDataSource
_registrationDate
_registrationHeartbeatDate
_registrationHeartbeatTimer
_registrationInfo
_registrationIsAuthenticating:
_registrationKeyManager
_registrationKeychainManager
_registrationListeners
_registrationNeedsAuthentication:
_registrationProperties
_registrationQueue
_registrationReasonTracker
_registrationStateChangedCounter
_registrationStateChangedDate
_registrationStatus
_registrationType
_registrations
_registrationsPendingHeartbeat
_relayBuildVersion
_relayCancel
_relayExpiryTimeStamp
_relayHighPriorityPort
_relayIP
_relayIPv6
_relayInitiate
_relayPort
_relaySessionKey
_relaySessionToken
_relaySoftwareVersion
_relayUpdate
_reloadFromDictionary:
_remoteAddress
_remoteAddressArray
_remoteAssumeRemoteDeviceEncryption
_remoteBlob
_remoteCID
_remoteCallInfoData
_remoteCell
_remoteConnectionGUID
_remoteConnectionType
_remoteContext
_remoteDeviceEncryptionInfo
_remoteHostAwake
_remoteICEData
_remoteIncomingGUIDs
_remoteInstanceID
_remoteNATIP
_remoteNATType
_remotePacketOutageTimes
_remotePartyID
_remotePublicIdentity
_remoteSA
_remoteSKEData
_remoteURI
_remoteUnauthenticatedPublicIdentity
_remoteUseCloudPairedControlChannel
_remoteUsePhoneContinuityLocalMessage
_removeAccount:messageContext:
_removeAliases:withReason:
_removeAllAllocationsForSessionID:
_removeAllLinksForDeviceID:
_removeAllPseudonyms
_removeAllocateRequestForDevice:requestID:
_removeAndDeregisterAccount:
_removeAndDeregisterAccount:messageContext:
_removeAuthenticationCredentials
_removeAuthenticationCredentialsIncludingAuthToken:
_removeCompletionBlocksForURIs:fromURI:fromService:forRefresh:
_removeEarlyListener:
_removeFromKeychain
_removeLinkForDeviceID:linkKey:verifyWithLink:
_removeListener:
_removeListenerObject:
_removeLocalListenerObject:
_removeMessageForRegistration:fromQueueForKey:
_removeMessageFromStatistics:
_removeObjectForKey:
_removeObjectsForKeysFromKVS:
_removeOldPersistence
_removePeerFromDeviceID:
_removePrimaryAccount:
_removePseudonym:
_removePseudonyms:
_removeSocketPairMessage:localMessage:reason:detailedError:responseCode:
_removeSocketPairMessage:localMessage:reason:responseCode:
_removeUser:
_renewTokenForRegistrationInfo:forceRenewal:failIfNotSilent:
_repairAccountsWithSuccessfulPhoneNumberRegistration
_repairAccountsWithSuccessfullAppleIDRegistrationForDSID:service:
_repairPhoneNumberAccounts
_repairTimer
_repairTimerHit:
_repairiTunesBasedAccounts
_replayCommitter
_replayStateCommitter
_reportAction
_reportAndRemoveForConnectionUUID:
_reportOTRTestResult:setupTime:result:
_reportPreferInfraWiFiToPowerLogs:
_reportRTC
_reportedMKMOverQRArrivalTime
_reportedRateLimitedThisHour
_reportedReceivedMKMFromPush
_reportedReceivedMKMFromQR
_reporterFd
_reporterFile
_reporterTimer
_reportingDataBlob
_reqCount
_request
_requestID
_requestIDStr
_requestIDToAllocateTime
_requestIDToPreferredLocalInterface
_requestIDToSession
_requestKeyMaterialForGroup:sessionID:toSpecificMembers:shouldTrackDistribution:shouldIncludeCachedPeerKeyMaterial:requireMKM:requireSKM:
_requestKeyMaterialForGroup:sessionID:toSpecificMembers:shouldTrackDistribution:shouldIncludeCachedPeerKeyMaterial:requireMKM:requireSKM:isFirstSession:
_requestKeyMaterialForGroup:sessionID:toSpecificMembers:shouldTrackDistribution:shouldIncludeCachedPeerKeyMaterial:shouldGenerateMKM:requireMKM:requireSKM:isFirstSession:
_requestPairedDeviceInfo
_requestPairedDeviceInfoAfterDelay:
_requestUserConsentForPhoneNumberValidationWithCompletion:
_requestors
_requests
_requeueMessages:
_requeueSendingMessage:
_requireAll
_requireBT
_requireBluetooth
_requireLocalWiFi
_requireSignature
_requiredCapabilities
_requiredForMessaging
_requiredLackOfCapabilities
_reregister
_reregisterAndReProvision
_reregisterAndReProvisionForEDULoginWithUsername:
_reregisterAndReidentify:
_reregisterAndReidentify:account:
_reregisterAndReidentify:account:messageContext:
_resetBroadcastQueuesForServices:
_resetCommunicationStateBeforeQuickSwitchDeactivatePairedDevices:withCompletionBlock:
_resetFallbackTimeout:useNextFallback:
_resetMagnetCorruptionMetrics
_resetPhoneNumberRepairCounter
_resetPreferences
_resetPreferences:
_resetQueuedBroadcastsForServices:priority:
_resetRateLimitersForSMSTimeoutForIdentifier:
_resetTimeout:
_resetTimerForTopic:withDelay:
_resettingIncomingResourceTransfers
_resolvedEndpointsDidUpdateHandler
_resourceAvailabilityChangedForIdentifiers:
_resourceAvailabilityChangedForIdentifiers:priorities:dataProtectionClasses:
_resourceAvailabilityChangedForIdentifiers:priorities:dataProtectionClasses:messageTypes:
_resourceAvailabilityChangedForIdentifiers:priority:dataProtectionClass:
_resourceAvailabilityChangedForIdentifiers:priority:dataProtectionClass:messageTypes:
_resourceMetadata
_resourcePath
_resourceTransferUUIDAlreaadyReceived:
_respondToAppleCareRequestID:withMessageContext:error:
_respondToRegistrationControlWithRequestID:status:messageContext:error:
_response
_responseAbsintheResponse
_responseAbsintheServKey
_responseAccessTokens
_responseAccessoryID
_responseAdminAcccessToken
_responseBasePhoneNumber
_responseCarrierToken
_responseCertificate
_responseCertificateData
_responseCertificateExpiration
_responseCleanupTimer
_responseCode
_responseConsentTokens
_responseDeviceScoreNonce
_responseEngramID
_responseEntries
_responseExtraInfo
_responseHBI
_responseHandles
_responseHasCachedURI:groupID:sessionID:
_responseIdentities
_responseMechanisms
_responseMessage
_responsePresenceTopic
_responseRegionID
_responseRegistrations
_responseServiceUserIDs
_responseServices
_responseSessionInfo
_responseSpamMessage
_responseSpamMessages
_responseTTL
_responseValidated
_responseVersion
_responses
_restoreTimer
_restrictions
_resultData
_resumeGDRReAuthenticateIfNecessary
_resumeResourceTransfers
_resumingIncomingResourceTransfers
_resyncing
_retries
_retrieveKeyIndex
_retryRegister
_retrying_loadLegacyIdentityWithIdentifier:serializationDidChange:deserializationDidFail:error:
_reunionSyncClientIDs
_reunionSyncCollaborator
_rollAccountKeyWithFullCluster:completion:
_rollDieForNonUrgentInternetSend
_rollingError
_route
_rtt
_run
_runCleanupWithExpirationInterval:
_runningSimpleAuthentication
_save
_saveAndNotifyGDRUpdate
_saveCache
_saveCancelBlock
_saveClassXIdentity:savedIdentity:protectionClass:savedUnsavedIdentity:
_saveEnqueueBlock
_saveNow
_saveQueue
_saveSubServices
_saveTimer
_saveTimerFiredOnMain
_saveToKeychainWithDictionary:
_scanningTypes
_scheduleHeartbeat:
_schedulePurgeOfPreviousIdentityAfterDelay:
_scheduleRegenerationOfRegisteredIdentityAfterDelay:
_scheduleRescueHeartBeat
_scheduleSMSTimeout:
_scopeID
_scoringNonce
_screenSharingToken
_sdNumberNoClose
_sdOriginal
_seal
_selectBestLink:
_selectDefaultMic
_selfAllocationCount
_selfAllocations
_selfHandle
_selfHealRateLimiter
_selfVerifyThrottleTime
_sendABCForFailureForIdentifier:WithEvent:context:
_sendAWDMetricsForAllocation:status:hasRecipientAccepted:
_sendAbsintheValidationCertRequestIfNeededForSubsystem:
_sendAcceptMessageWithContext:connectionData:
_sendAccountSyncMessage:withPersistentKey:
_sendAckForMessage:
_sendAheadGroup:withContext:
_sendAllocateRequest:
_sendAsAttachmentForMessage:payloadData:
_sendAttachmentWithGuid:service:topic:originalCommand:additionalDictionary:encryptedData:toToken:toID:fromID:fromIdentity:canUseLargePayload:expirationDate:destinationObject:ackBlock:completionBlock:
_sendAuthenticateRegistration:
_sendAuthenticateRegistrationTask
_sendAuthenticationRequest:forceNew:
_sendAuthenticationRequest:forceNew:failIfNotSilent:
_sendAuthenticationRequest:forceNew:forceRenewal:failIfNotSilent:
_sendBAAValidationRequestIfNeededForSubsystem:
_sendBlock
_sendCancelInvitationToDestinations:withData:
_sendCertifiedDeliveryReceiptIfNeededForMessage:service:failureReason:failureReasonMessage:
_sendClientDecryptedDatabBlobs:type:forParticipant:
_sendConnectedLinkInfoToAVC
_sendConnectionCheckRequest
_sendDataViaNWConnection:isLargeTransfer:
_sendDeregistration:
_sendDeregistrationTask
_sendEncryptedMessage:
_sendErrorDictionary:onService:fromID:fromIdentity:toID:toToken:topic:sendCompletionBlock:
_sendErrorMessage:fromID:toDestinations:usingAccountWithUniqueID:useDictAsTopLevel:dataToEncrypt:wantsResponse:timeout:command:priority:completionBlock:
_sendExpiredAckForMessage:
_sendFTFanoutMessage:service:fromID:toPeople:fromIdentity:completionBlock:
_sendFTMessage:service:fromID:toID:toToken:toSessionToken:toPeople:fromIdentity:completionBlock:
_sendFanoutMessage:account:toGroupMembers:fromID:command:commandContext:toGroup:sessionID:reason:waitForMadridAcks:isUPlusOne:isInitiator:requiredCapabilites:requiredLackOfCapabilities:completionBlock:
_sendFanoutMessage:account:toGroupMembers:fromID:command:toGroup:sessionID:reason:isUPlusOne:isInitiator:
_sendFanoutMessage:account:toGroupMembers:fromID:command:toGroup:sessionID:reason:isUPlusOne:isInitiator:requiredCapabilites:requiredLackOfCapabilities:
_sendIDQueryRequest:fromIdentity:fromURI:fromService:completionBlock:
_sendIDSAuthRequest:forInfo:
_sendIDSAuthenticationForRegistration:
_sendIDSAuthenticationOrRegistrationIfNeeded:
_sendIDStatusChanges:forService:URI:success:error:
_sendInvitationMessageToDestinations:withOptions:contextData:declineOnError:connectionData:
_sendInvitationWithOptions:data:declineOnError:
_sendKTOptInStatusUpdateForRegistration:withOptInStatus:withCompletion:
_sendKeepAliveRequest:
_sendKeyMaterialsToGroup:sessionID:toSpecificMembers:shouldIncludeCachedPeerKeyMaterial:requireMKM:requireSKM:
_sendKeyRecoveryRequestForPendingKeys:requireMKM:requireSKM:forDevice:
_sendLinkSelectionPreference:linkScore:ipPreference:
_sendLocalDeliveryMessagesForAccountUUID:threadContext:priority:dataProtectionClass:
_sendLocalDeliveryMessagesForAccountUUID:threadContext:priority:messageTypes:dataProtectionClass:
_sendLocallyWithSendParameters:service:uriToLocalDestination:data:protobuf:threadContext:progressBlock:completionBlock:
_sendLocallyWithSendParameters:uriToLocalDestination:data:protobuf:completionBlock:
_sendMessage:dataToEncrypt:withEncryptedAttributes:onService:fromID:fromIdentity:toID:toPeople:canUseLargePayload:sendOnePerToken:allowPartialSendsToSucceed:registrationProperties:fakeMessage:alwaysSkipSelf:disallowRefresh:prioritizedTokenList:wantsFirewallDonation:destinationObject:willSendBlock:completionBlock:firstAttemptDate:fromCoalesceQueue:withQueryCompletion:
_sendMessage:toDestination:forGroup:sessionID:command:timeout:shouldExpire:useQR:completion:completionBlock:
_sendMessageCheckpointIfNecessary:checkpoint:service:additionalInformation:
_sendMessageCounter
_sendMessageDictionary:lastRetryInterval:dataToEncrypt:withEncryptedAttributes:onService:wantsResponse:canUseLargePayload:sendOnePerToken:allowPartialSendsToSucceed:highPriority:fireAndForget:expirationDate:enforceRemoteTimeouts:messageID:fromID:fromIdentity:toID:toPeople:accessToken:topic:registrationProperties:fakeMessage:alwaysSkipSelf:pushPriority:ignoreMaxRetryCount:disallowRefresh:originalTimestamp:prioritizedTokenList:wantsFirewallDonation:destinationObject:deliveryTime:deliveryMinimumTime:sendMode:ackBlock:willSendBlock:sendCompletionBlock:
_sendMessageHandler
_sendMessageWithSendParameters:threadContext:onObject:willSendBlock:progressBlock:completionBlock:
_sendMessageWithSendParametersOnMainThread:filteredDestinations:data:compressedData:protobufToSend:willSendBlock:completionBlock:
_sendMode
_sendNominateRequest
_sendOTREncryptedMessage:useEncryption:streamID:forPriority:flag:token:
_sendOTREncryptionQueue:streamID:
_sendOnePerToken
_sendPacketBuffer:toDeviceUniqueID:cbuuid:link:
_sendParticipantMappingUpdateToClient:forLinkID:shouldReplace:
_sendPreflightVerificationIfNeeded
_sendPreflightVerificationWithIMSI:PLMN:
_sendPseudonymMessageOperation:forURI:pseudonymURI:properties:requestProperties:forRegistration:completionBlock:
_sendQREventToAVC:
_sendRegistrationAsDeregister:
_sendRegistrationTask
_sendRemotelyWithSendParameters:data:protobuf:willSendBlock:completionBlock:
_sendRenewedPrekeysToGroups
_sendSMSVerificationWithMechanism:
_sendServerStorageMessageForTopic:retryCount:
_sendSessionEndWithData:
_sendSessionInfoResponseErrorToClient:
_sendSinglePathMessage:toDestinations:withCommand:forceLocalDelivery:messageGUID:fromID:willSendBlock:completionBlock:
_sendSocketMessage:
_sendSocketMessage:ignoreSequenceNumber:
_sendSuspended
_sendTime
_sendToConnectedSocket
_sendUDPLinkInterfaceAddresses:toDeviceID:isRetransmission:isReply:
_sendValidationRequestForSubsystem:
_senderExternalIP
_senderURI
_sendingKeysToMembers:
_sendingMessageCountForClass:
_sendingMessageCountForType:
_sendingMessageStatisticsForClass:
_sendingMessages
_sendingOfflineActiveParticipantInfoRequest:
_sendingPowerAssertion
_sendingPriorityMessage
_sent
_sentAWDReport
_sentMessageDataSize
_sentToRemotes
_seqRecvStart
_seqSend
_seqSendStart
_serialNumber
_serialPersistQueue
_serializeAndPersistApplicationKeyIdentitiesDeleteIfNull:
_serializeAndPersistBuildOfIdentityGeneration:itemName:
_serializeAndPersistIdentityContainer:identityIdentifier:deleteIfNull:
_serializeAndPersistKTRegistrationDataDeleteIfNull:
_serverBag
_serverBagBoolForKey:withDefaultValue:
_serverDesiredKeyMaterialsFromGroupEncryptionController
_serverDesiredKeyMaterialsSigner
_serverDesiredMaterials
_serverErrorDetail
_serverHeartBeat:
_serverHeartBeatTimerHit:
_serverKey
_serverMessagingEntitlements
_serverSpecifiedJoinNotificationDeliveryTimeout
_service
_serviceAdHocType
_serviceAllowLiveMessageDelivery
_serviceAllowLocalDelivery
_serviceAllowProxyDelivery
_serviceAllowWiProxDelivery
_serviceConnection
_serviceConnectionCache
_serviceConnector
_serviceController
_serviceDuetIdentifiers
_serviceIdentifier
_serviceIdentifierCount
_serviceIndexToKeyConfigs
_serviceIsDSBased
_serviceName
_serviceNameToControlCategoryMap
_serviceNameToStreamIDMap
_servicePushTopic
_serviceQueueForKey:
_serviceSignatures
_serviceToOptInManager
_serviceToVerifier
_serviceType
_serviceTypes
_serviceUseiMessageCallerID
_serviceUserID
_serviceWantsReflectedSend
_serviceWantsTinkerDevices
_services
_servicesChanged
_servicesPreferringInfraWiFi
_servicesRemoved:
_servicesToNameMap
_servicesToTopicMap
_servicesWithPreferences
_sessionController
_sessionID
_sessionIDMultiQueue
_sessionIDStr
_sessionInfoMetaData
_sessionInfoRequest
_sessionInfoRequiredKeys
_sessionInfoToToken
_sessionKeyStorage
_sessionStartWithSocketDescriptor:
_sessionStartedCalled
_sessionToAllocations
_sessionToBlockMap
_sessionToLocalParticipantID
_sessionWithInstanceID:messageContext:requiredEntitlement:
_sessionWithUniqueID:messageContext:requiredEntitlement:
_sessions
_setBestLinkToCurrent:
_setCloudConnectionConnected:forPeer:
_setCreatedAt:forConnectionUUID:
_setDailyTimer
_setDatabaseCloseTimer
_setDatabaseCloseTimerOnIvarQueue
_setDisasterModeToken:forURI:
_setInitialLinkType:
_setIsDisabled:forService:
_setIsQuickSwitchingToAnotherDevice:
_setKeychainData:withServiceName:withAccountKey:withIDSRegistrationAccesssGroup:error:
_setLinkPreferences:
_setLinkProtocol:
_setOTREnableTimer
_setObject:forKey:
_setPurgeTimer
_setQueue:
_setQueue:forKey:
_setResponseForQRGroupID:groupID:
_setSMSDeliveryTimeout:
_setSaveTimer
_setSessionInfoRequiredKeys
_setUserIntentState:forAlias:withReason:
_setValidationStatus:error:forAlias:info:addToCurrentHandlesIfNeeded:forceAdd:
_setValidationStatus:error:forAlias:info:addToCurrentHandlesIfNeeded:forceAdd:aliasProperties:
_setupAccount
_setupAdHocAccounts
_setupAdHocAccountsForPrimaryAccount:
_setupAllocation:fromURI:sessionID:isSessionIDRemoteDeviceID:options:prevConnectStatus:requestUUID:connectReadyHandler:withPreferredLocalInterface:
_setupForCurrentSubscriptionState
_setupForLocal
_setupHandlers
_setupLinkedAccounts
_setupListenerConnection:listenerID:pid:setupInfo:entitlements:setupCompletionBlock:
_setupLocalAccounts
_setupNewAllocation:sessionID:isSessionIDRemoteDeviceID:fromIdentity:fromURI:fromService:options:connectReadyHandler:withPreferredLocalInterface:forAdditionalAllocation:
_setupPairedSystemContext
_setupRestoreTimer
_setupTokens
_setupUsingRemoteInfo
_sharedSession
_sharedSessionHasJoined
_sharedState
_shouldAWDLogMessage:
_shouldAbortOnMissingTopic
_shouldAllowCloudDelivery
_shouldAssertRealTimeMode
_shouldAutoBugCaptureForECError:
_shouldAutoRegisterAllHandles
_shouldBringWiFiDown
_shouldBroadcastAllValidMkMs
_shouldBypassRepairLogic
_shouldCallbackOnCancel
_shouldConnectToQRServer
_shouldDropMessageForIncomingDecryptionErrorType:
_shouldDropMessageForIncomingErrorMessageWithDecryptionErrorType:
_shouldEnforceRemoteTimeout
_shouldForgetCachedPeerTokensForDecryptionErrorType:withOriginalDecryptionError:
_shouldForgetCachedPeerTokensForIncomingRemoteDecryptionErrorType:
_shouldHaveRegisteredIdentity
_shouldIgnoreAutoBugCaptureForECFailure:
_shouldIgnoreAutoBugCaptureForLegacyFailure:
_shouldIgnoreMPError:
_shouldIncludeDefaultDevice
_shouldIncludeDefaultDeviceAsDestinationForMessageForFromID:service:
_shouldKeepWiFiUp
_shouldLaunchClientForCapabilities:
_shouldListen
_shouldLogTransportStats
_shouldMessageBeProxied:service:
_shouldNotSetupPhoneNumberRepairTimer
_shouldPostNotifications
_shouldProtectTrafficUsingClassA
_shouldQuickSwitchAfterIPSecConnected
_shouldRegenerateRegisteredIdentity
_shouldRegisterUsingDSHandle
_shouldRejectMessageOnCrossAccountService:fromSender:
_shouldRejectMessageOnFamilyService:fromSender:
_shouldReplyWithRemoteDecryptionErrorMessageForDecryptionErrorType:
_shouldRequeryHandles
_shouldReregOnManateeAvailability
_shouldRetryForDecryptionErrorType:
_shouldSendHasSpaceAvailable
_shouldSendMKMOverQR
_shouldServiceBeDisabledOnSignOut:forDomain:
_shouldServiceBeEnabledOnSignIn:forDomain:
_shouldSetAllowlistUUIDForStreamingSocket
_shouldStartBTLinkManager
_shouldStopBTDatagramLink
_shouldStoreBeforeFirstUnlockIncomingLocalMessage:from:forTopic:
_shouldSubmitMetricsBasedOnDate:isInitiator:
_shouldSubmitMetricsForThisSession
_shouldSubmitRegistrationCompletedForServiceIdentifier:
_shouldSubmitRegistrationCompletedMetricForRegistration:
_shouldSupressRepairLogic
_shouldUseAbsinthe
_shouldUseAbsintheV3
_shouldUseAbsintheV4
_shouldUseBAACertOption
_shouldUseBAAOnly
_shouldUseCrossLayerLogging
_shouldUseCurrentResponse:cachedMessage:
_shouldUseDebugPiscoLogging
_shouldUseIPsecLink
_shouldUseIPsecLinkForDefaultPairedDevice
_shouldUseNWFraming
_shrunkenServiceIdentifiers
_shuttingDown
_shuttingDownSim2Host
_sigAlgorithm
_signData:withType:error:
_signInDomain:withUsername:authToken:password:accountInfo:accountStatus:handles:
_signInResponder
_signalDidUpdateEndpoints
_signature
_signatureTypeForSigningAlgorithm:
_signatures
_signedData
_signingTimestamp
_silentlyFailMessagesOnSwitch
_simDeactivationRequestRateLimiter
_simulateCrashWithErrorString:
_skeData
_smallWindowSMSTimeoutRateLimiter
_smsDeliveryClear
_smsSendDate
_smsSignature
_smsSignatures
_sockAddrPairTable
_socketConnection
_socketDescriptor
_socketOptionsForDevice:uniqueID:pushToken:connectionSuffix:
_socketToNiceCommand:
_socketTrafficClass
_softwareVersion
_sortedArrayFromCBUUIDSet:
_sourceAddress
_sourceInterfaceIndex
_sourcePeerID
_spamMessage
_spamMessages
_spec
_specific
_specificEntitlementCount
_specificEntitlements
_specificOriginatorFromID:senderToken:accountUniqueID:
_splitDestinations:intoLocalDestinations:remoteDestinations:rapportDestinations:sendParameters:
_splitDestinations:intoLocalDestinations:remoteDestinations:threadContext:sendParameters:
_sponsorAlias
_srtpProtocolVersion
_stableKeyIdentifiersSentToClient
_stableKeyMaterials
_startAndSetupSocketPairConnection:capabilityFlags:instanceID:serviceMinCompatibilityVersion:socketDescriptor:
_startAutomaticCacheResetTimerIfNeeded
_startCellularDataStatusListener:
_startCleanupTimer
_startCloudDisableTimerIfNecessary
_startConnectingDate
_startConnection
_startConnectionEcho:
_startConnectionForContinuityPeer
_startDate
_startDisableTimerIfNecessary
_startEvictionTimerIfNeeded
_startExtendedTimeoutTimerForTopic:
_startKeyRecoveryForMKM:forSKM:forDevice:forGroupID:
_startMessagesDequeueMessagesTimer
_startMkmExpirationTimer:forGroupID:block:
_startMkmRollTimer:forGroupID:block:
_startNRDeviceMonitor:
_startNWConnectinForIPsecCase:controlChannelVersion:capabilityFlags:instanceID:serviceMinCompatibilityVersion:
_startPowerLogTimersForAllPriorities
_startPushHandlingLocked
_startQRConnectionForSession:isInitiatorsAcceptedSession:withLocalInterfacePreference:
_startQueryDateByTopLevelService
_startQueryForURIs:fromIdentity:fromURI:fromService:context:completionBlock:
_startRegistrationHeartbeat
_startReporter
_startRetryForKey:withAction:
_startTime
_startTimeoutTimerForTopic:
_startUDPLinkHandshakeForDefaultDevice:immediately:
_startedAsUPlusOneSession
_state
_stateFlags
_stateMachineByUserID
_stateMachineTimedOut:
_stateManager
_stateProvider
_statistics
_stopAdvertising
_stopAllPendingActions
_stopEchoTimer
_stopEvictionTimer
_stopEvictionTimerIfEmpty
_stopMkmExpirationTimerForGroup:
_stopMkmRollTimerForGroup:
_stopPushHandling
_stopRegistrationAgent
_stopRegistrationHeartbeat
_storageLock
_storageTimer
_storageTimerFired
_storeAccountTask
_storeAccounts
_storeData:forIdentifier:completion:
_storeGossipRecipients
_storeIncomingClassADataMesageIfNeeded:topic:sequenceNumber:
_storeIncomingClassCDataMessageIfNeeded:topic:sequenceNumber:
_storeMappingFromPushTokenToURIs:fromID:service:cert:forGroup:
_storePendingKeyMaterial:stableKeyMaterial:hasValidMKM:hasValidSKM:forDevice:
_storedIncomingFamilyMessage
_storedSize
_streamIDToServiceNameMap
_streamIDToTopic
_streamIDToTopicLock
_streamInfo
_strictlyUnarchivedObjectOfClasses:fromData:error:
_stringForKey:
_stringRepresentationForRealm:
_stringRepresentationOfUserRealm:
_stripFZIDPrefix
_stripPotentialTokenURIWithToken:
_strippedAccountInfo:
_subActivity
_subService
_submitGDRReponseToAWDWithResultCode:error:
_submitIDSSessionAWDMetric:withContainer:
_submitLastResortCacheMetricForGUID:service:
_submitMagnetCorruptionMetricsToAWD
_submitMetricForTrustedDeviceEnrollmentWithKVSResult:kvsSyncTimeInterval:
_submitMetricsForTrustedDeviceEnrollmentWithCloudKitResult:cloudKitOperationTimeInterval:accountKeyResult:accountKeyOperationTimeInterval:
_submitMetricsForTrustedDeviceVerificationWithCloudKitResult:cloudKitOperationTimeInterval:accountKeyResult:accountKeyOperationTimeInterval:index:entries:
_submitNoLastFromStorageMetricForService:
_submitRegistrationAccountStatusMetric
_submitRegistrationAccountStatusMetric:
_submitRegistrationCompletedMetricWithRegistration:success:registrationError:
_subscribeForInfo:withDescription:resolvedTokens:withCompletion:
_subscribeToWRMForLinkRecommendation:
_subscribedStreams
_subscriptionSourceNumberForContext:
_subsequentGossipChance
_subservicesByPrimaryService
_subsystem
_success
_successful
_successfulRegistrations
_summaryReportBaseTime
_supportDynamicServices
_supportDynamicServicesOptimization
_supportUnauthenticatedUser
_supportedMessageTypes
_supportedServicesToken
_supportsCloudConnections
_supportsLegacyOTRSessionToken
_supressClientNotifications
_suspendBTLink:cbuuid:
_suspendOTRSessionsWithProtectionClass:
_suspendTrafficCheckTime
_suspended
_switchedToUPlusMany
_syncConnectionForAck
_syncDirectConnections
_syncQueue
_syncQueuedBroadcastAttempts
_syncTinkerDeviceInfo
_sync_queue
_systemAccountAdapter
_systemAccountRepresentationOfACAccount:DSIDKey:
_systemAccountUserSynchronizer
_systemAccountWithIdentifier:DSIDKey:criteria:completion:
_systemAccountWithIdentifier:DSIDKey:criteria:error:
_systemConfigurationPrefsChanged
_systemIsFastUserSwitched
_systemMonitor
_targetPeerID
_targetService
_targetSessionToken
_targetToken
_tempPhoneCredentials
_tempUserID
_temporaryPhoneEmail
_terminate
_terminusConnected
_terminusRegistered
_testData
_testDeviceConnectionInfo
_testOptions
_timeBase
_timeConnected
_timeDisconnected
_timeEnqueued
_timeInterval
_timeSent
_timeoutTimer
_timeoutTimerFired
_timeoutTimerFiredOnMain
_timer
_timerBlock
_timerFired
_timerFired:
_timerFiredOnMain
_timerIdentifierFromBaseIdentifier:
_timerMap
_timestamp
_timingEvents
_toDeviceID
_toURI
_token
_tokenToOTREncryptionQueue
_tokenToOTRError
_tokenURIForToken:uri:
_tokenURINegativeCache
_topic
_topicAllowsNoEncryption:fromIdentifier:
_topicStringToSubscribedInfo
_topicsToListenOn
_totalBytesReceived
_totalDeliveredMessagesInfraWiFi
_totalPacketsDropped
_totalPacketsReceived
_totalPacketsReceivedClientSockets
_totalPacketsReceivedInfraWiFi
_totalPacketsSent
_totalReceivedRawBytes
_totalRepairCountFromPrefs
_trackedRegistrations
_traffic
_trafficClassLock
_transactionQueue
_transferServicesController
_transient
_transparencyBlob
_transparencyDaemon
_transparencyStatus
_transparencyTicketForQueryResultsWithIndex:verificationState:entries:
_transparencyVerifier
_transparencyVersion
_transparentEndpointViewer
_transportType
_triggerStallDetectionLogsForDetector:withEvent:
_trustedDeviceForRegistrations:transparencyLoggableDatasByServiceType:transparencyDeviceSignaturesByServiceType:
_trustedServices
_tryToSendSMSIdentification
_ttl
_ttlCache
_ttlInSeconds
_type
_typeToKeyIDToEncryptedData
_typeToParticipantIDToDecryptedDataBlob
_udpLink
_uint32Key
_unSavedidentityClassA
_unSavedidentityClassC
_unSavedidentityClassD
_unappliedRollingTicket
_underlyingSocketPairMessage
_uniqueID
_unknownSenderURI
_unloadServiceWithName:
_unpersistTopic:
_unpublish
_unregisterAccount
_unregistered130RetryInterval
_unregisteredDeserializationError
_unregisteredIdentityContainer
_unregisteredKTData
_unregisteredKeychainError
_unsentOutgoingMessagesUpToLimit:byteLimit:priority:accountUUID:wantsPayload:requireDuet:localDestinationDeviceID:
_unsubscribeFromWRMForLinkRecommendation
_unvalidateAliases:
_updateAccountWithAccountInfo:
_updateActiveLightweightParticipants:
_updateActiveParticipants:
_updateActiveStateForAllPairedDevices
_updateActiveStateForAllPairedDevices:
_updateAllActiveParticipantsInfoFromParticipants:standardParticipantsPushTokens:lightweightParticipantsPushTokens:groupID:
_updateCacheWithStatusUpdates:fromURI:fromService:success:hadError:negativeCacheHints:
_updateCapabilities
_updateDependentRegistrationTimerFiredOnMain
_updateDependentRegistrations
_updateDeviceProperties
_updateDictionary:addMessageSize:addMessageCount:
_updateDirectMessagingMetadataForRemoteObject:shouldBroadcastForRemoteObject:
_updateDomainWithUsername:accountInfo:
_updateExpiry:forUser:
_updateLightweightParticipants:forGroup:sessionID:
_updateLinkTransportAddress:localAddress:remoteAddress:
_updateListenerIfNeeded
_updateLocalSetupInProgressState:
_updateNonUrgentInternetSendTimer
_updateNotifyState
_updatePairedDevice:pairingType:completion:
_updatePairedState:
_updateParentalSettings
_updatePerformedForcedGDRDate
_updatePhoneNumberCallerID
_updatePreferredAccountWithAccountInfo:withAccountSyncCommand:
_updatePseudonymExpiryEpoch:
_updatePushCommandsLocked
_updatePushState
_updateRegistrationHeartbeat
_updateRegistrationStatusWithError:info:
_updateRelevantEncryptedDataBlobForSession:
_updateSessionsForAllRegisteredURIs
_updateSessionsWithRegisteredURIs:
_updateSessionsWithRegisteredURIs:retryIfNotRegistered:
_updateStandardParticipants:forGroup:sessionID:
_updateStorageTimerWithInterval:
_updateSubServicesForDevice:superService:newSubservices:
_updateTimerForTopic:sendMode:
_updateTinkerDeviceWithURIs:pushToken:
_updateUsersForCurrentUsers:updatedUsers:
_updateVettedAliases:emailInfo:addToCurrentHandlesIfNeeded:
_urgentCloudConnectionForAck
_urgentConnectionForAck
_urgentDirectConnections
_urgentQueue
_urgentQueuedBroadcastAttempts
_urgent_queue
_uriSuggester
_uriToParticipantID:
_uris
_urisToParticipantIDs
_usageNotifications
_useBTDatagramPipe
_useDictAsTopLevel
_useNamedOTRSessionToken
_usePairingKey
_useQRDirectly
_useSecureQRControlMessage
_useSharedOTRSession
_useSkywalkChannel
_usedLastResortCache
_usedMMCS
_user
_userAccountSynchronizer
_userAgent
_userConfiguration
_userConsentDeniedForCTPNR
_userDefaults
_userHandle
_userIntentDictForAlias:
_userName
_userStore
_userUniqueIdentifier
_userVisibleName
_username
_usersToHeartbeatDatesMap
_usersToTimers
_usersToTimersLock
_utunControlMessageFairplayDeviceInfo
_utunControlMessageFairplayDeviceSessionInfo:grappaDeviceSessionInfoSize:
_utunControlMessageFairplayHostSessionInfo:deviceType:protocolVersion:
_utunDeliveryController
_utunSocket
_uuid
_uuidFromNSStringToNSData:
_validAccountForIncomingMessageSentToIdentifier:service:outPseudonym:
_validSIMStateForRegistration
_validateAliases:
_validateAliases:validateAlreadyValid:
_validateCachedGroup:isParentOfGroup:completion:
_validateContextDate
_validateContextTTL
_validateDecryptionParametersWithError:
_validateParametersWithFullIdentityToUse:fullIdentity:publicIdentity:inputData:identifier:forDecryption:
_validatePreferences:forService:
_validateRegionID:phoneNumber:registration:
_validationContextDisabled
_validationContextQueue
_validationInfoByMechanism
_validationInfoForSubsystem:createIfNil:
_validationMechanisms
_validationMessageSendBlock
_validationQueue
_validationSession
_validationStatusForAlias:
_valueOfProperty:forURI:pushToken:fromURI:service:
_verboseFunctionalLogging
_verbosePerformanceLogging
_verifier
_verifyKeyTransparencyOfRegisteredIndex:verificationState:entry:
_version
_versionNumber
_versionNumberForPersistedMap:
_vettedEmails
_vifMaxPendingPackets
_vifName
_vifShouldReadMultiple
_vifUseChannel
_waitForDefaultPairedDevice
_waitingForMigration
_wakingPushPriorityStore
_wantsAppAck
_wantsCertifiedDelivery
_wantsDeliveryStatus
_wantsFirewallDonation
_wantsProgress
_wantsResponse
_wasInitiallySetupUsingIDSPairing
_wasPrimary
_wideWindowSMSTimeoutRateLimiter
_willSendBlock
_wipeLegacyCache
_wpLinkManager
_wrapData:error:
_wrapMode
_writeAccountDefaults:force:
_writeAccountDefaults:force:interestedSubservices:
_writeCoalescingDelay
_writeCoalescingLeeway
_writeHandler
_writeLock
_writeSocketIsResumed
_xpcQueue
abortTransfer
absintheHello
absintheUDID
absintheValidationSessionOnQueue:withCompletion:
acceptIncomingGrantRequests
acceptInvitation
acceptInvitation:
acceptInvitation:messageContext:
acceptInvitation:withData:
acceptInvitation:withData:messageContext:
acceptInvitationWithData:
accessCount
accessToken
accessoryDataReceived:withGUID:forTopic:toIdentifier:fromID:context:
accessoryID
accessoryIDs
accessoryReportMessageReceived:accessoryID:controllerID:withGUID:forTopic:toIdentifier:fromID:context:
accessoryRequests
account:accountInfoChanged:
account:aliasesChanged:
account:dependentDevicesUpdated:
account:dependentDevicesUpdatedUponReconnect:
account:didUpdateRegisteredDevices:
account:displayNameChanged:
account:localDeviceAdded:
account:localDeviceRemoved:
account:loginChanged:
account:profileChanged:
account:pseudonymsChanged:
account:registrationStatusInfoChanged:
account:vettedAliasesChanged:
accountAdded:
accountAndAdHocAccounts
accountBlob
accountBuilder
accountCleanup
accountController
accountControllerDidFinishLoadingAccounts:
accountDescription
accountDisabled:onService:
accountDisplayName
accountEnabled:onService:
accountGUID
accountHealableErrors
accountID
accountIdentityClusterForRegistrationWithCompletion:
accountIdentityElector
accountInfo
accountInfoWithCompletionHandler:
accountKey
accountKeyByService
accountKeyManager
accountOnService:withAliasURI:
accountOnService:withLoginID:
accountOnService:withVettedAliasURI:
accountProperties
accountPropertyForKey:
accountPublicKey
accountRepair
accountSetupInfo
accountStore
accountSync
accountSyncMinCompatibilityVersion
accountType
accountTypeWithAccountTypeIdentifier:
accountTypeWithAccountTypeIdentifier:error:
accountTypeWithIdentifier:completion:
accountUUID
accountUniqueIDsWithType:
accountUpdate
accountWithIdentifier:localObject:requiredEntitlement:
accountWithServiceName:aliasURI:
accountWithServiceName:myID:
accountWithUniqueID:
accounts
accountsChanged:forTopic:
accountsDebugging
accountsLoaded
accountsOfAdHocType:
accountsOnService:
accountsOnService:withType:
accountsWithAccountType:
accountsWithType:
accumulativePreferencesForAllServices
ackBlock
ackUpdatesForActivity:
acknowledgeMessageWithGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:
acknowledgeMessageWithGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:messageContext:
acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:
acknowledgeMessageWithStorageGUID:realGUID:forAccountWithUniqueID:broadcastTime:messageSize:priority:broadcastID:connectionType:messageContext:
acknowledgeOutgoingMessageWithGUID:alternateCallbackID:forAccountWithUniqueID:
acknowledgeOutgoingMessageWithGUID:alternateCallbackID:forAccountWithUniqueID:messageContext:
acknowledgeSessionID:clientID:
acknowledgeSessionID:clientID:messageContext:
actionByTarget
activateRegistration
activateWithCompletion:
activateWithValidationData:serverKey:scoringNonce:
active
activeDevices
activePairedDevice
activePairedDeviceHasPairingType:
activeParticipantsForGroup:
activeRegistrations
activeRegistrationsMatchingUserID:
activeRegistrationsOfType:
activeRegistrationsToRegister
activeRelayIP
activeRelaySessionToken
activeURIsFromURI:service:
activity
activityMonitorCollaboratorForXPCDaemon:
activityMonitorCollaboratorWithCompletion:
activityMonitorEntitlements
activityMonitorManager:receivedUpdate:forActivity:
activityPolicy
activityStateMonitor
activityStatus
activitySubActivity
activityTimestamp
activityTopic
adHocAccounts
adHocServiceNames
adHocServiceType
adHocServicesForIdentifier:
addAccount:
addAccountWithLoginID:serviceName:uniqueID:accountType:accountInfo:
addAccountWithLoginID:serviceName:uniqueID:accountType:accountInfo:messageContext:
addActionListener:
addActionListener:forRealm:
addAggregatableMessage:
addAggregateMessage:
addAlias:
addAliases:
addAliases:toAccount:
addAliases:toAccount:messageContext:
addAllocation:
addApplicationPublicIdentity:
addAuthUserID:certificate:privateKey:publicKey:
addAvailableNotificationForSession:appleID:alias:deviceName:serviceType:completionBlock:
addBlock:forKey:description:
addBlock:withTimeout:forKey:description:
addBlockForRegistrationCompletion:
addBlockToAggregatableMessage:forURIs:trackingSet:guid:
addBlockToAggregateMessage:forURIs:messageQueue:guid:
addBlockToAggregateMessage:guid:
addBlockToMMLMessage:guid:
addBlocksOnLinkConnect:
addCandidateEmail:
addClientDataUpdateBlock:forToken:
addCompletionBlock:forSession:
addCompletionBlock:forToken:
addCompletionBlock:forUniqueIdentifier:
addConnectivityDelegate:
addContinuityPeer:btUUID:connectBlock:failureBlock:
addData:withError:
addDelegate:
addDeliveryHandler:uuid:
addEndpointQueryCompletionBlock:forToken:queue:
addEntries:forImpactedServices:category:isDonated:
addEntries:withCompletion:
addEntriesFromDictionary:
addEvent:
addIdentity:forToken:uri:service:error:
addIdentityData:forToken:uri:service:error:
addIndex:
addListener:
addListener:forActivity:
addListener:topics:commands:queue:
addListener:wakingTopics:opportunisticTopics:nonWakingTopics:commands:queue:
addLocalPairedDevice:BTOutOfBandKey:shouldPairDirectlyOverIPsec:pairingType:bluetoothMACAddress:
addMessage:toFanout:
addNotificationRequest:withCompletionHandler:
addOTRSessionBlock:sessionBlock:key:
addObject:
addObjectsFromArray:
addObserver:forKeyPath:options:context:
addObserver:selector:name:object:
addOperation:
addOpportunisticData:serviceName:accountUniqueID:identifier:options:completion:
addPairedDevice:
addPairedDevice:completion:
addPairedDevice:shouldPairDirectlyOverIPsec:
addPairedDeviceWithCBUUID:pairingType:
addPairedDeviceWithInfo:completion:
addPhoneAuthenticationCertificate:withUserID:
addPhoneNumberValidationRequestor:
addPreferWiFiRequest
addPrimaryAccount:
addPurgeClientDataBlock:forToken:
addQREventForRTCReport:
addQuickRelayRequest
addRegistration:
addRegistrationInfo:
addRegistrationListener:
addRequestWithID:cert:
addRequestWithID:sig:csr:tag:
addServiceSignatures:
addSession:
addTarget:actionBlock:
addToBlockedList:forCategory:
addTokenURI:forProperty:toRegistrationPropertyToDestinationsMap:
addTokenURINegativeCacheClearBlock
addTrustedServices:
addUTunPeerWithDeviceUniqueID:btuuid:
addUris:
addUsageNotificationForSession:appleID:alias:deviceName:hardwareVersion:deviceCapabilities:serviceType:
addUserNotification:listener:
addUserNotification:listener:completionHandler:
additionalDictionary
additionalInfo
additionalInternalHeaders
additionalMessageHeaders
additionalMessageHeadersForOutgoingPush
addressPair
adminAccessTokens:error:
adminServiceIdentityWithType:
admissionPolicyChangedForTopic:allowed:
aggregatableMessages
aggregateMessages
alertType
aliasStrings
all:
allAdHocServices
allExpiredOutgoingMessages:
allFamilyServices
allInterestedQueryServices
allKeysForObject:
allObjects
allOutgoingMessagesByGUID:
allOutgoingMessagesOnAccountGUID:localDestinationDeviceID:
allOutgoingMessagesPendingDeleteWithLimit:
allPairedDevices
allPairedDevicesWithType:
allPairedUniqueIDs
allParticipantsInfoForGroup:
allPrimaryServices
allServices
allServicesStrings
allServicesWithAdHocServiceType:
allTinkerServices
allUnsentOutgoingMessagesForAccounts:localDestinationDeviceID:hardLimit:
allUnsentOutgoingMessagesForAccounts:localDestinationDeviceID:priority:hardLimit:
allUnsentOutgoingMessagesForAccounts:localDestinationDeviceID:priority:hardLimit:wantsPayload:messageType:success:
allUnsentOutgoingMessagesForAccounts:priority:localDestinationDeviceID:hardLimit:
allValues
allocWithZone:
allocateProtocolVersion
allocateType
allocationDone:sessionInfo:
allowBackup
allowCloudDelivery
allowCrossAccountMessages
allowDualDelivery
allowLocalDelivery
allowMessageData:
allowMessageData:withDelayedCommitBlock:
allowPairingIdentities
allowPartialSendsToSucceed
allowPendingMessagesForInactiveDevice
allowProxyQueries
allowRegenerateRegisteredIdentity
allowSendingMessagesToInactiveDevice
allowWakingMessages
allowWiProxDelivery
allowedCapabilities
allowedTrafficClasses
allowsDuplicates
allowsServerProvidedLenientAnisetteTimeout
alternateCallbackID
alternateDelegate
alternateGUID
alwaysSkipSelf
anisetteHeadersTimeout
anonymizedSenderID
anyObject
appBoolForKey:
appContext
appID
appendBytes:length:
appendData:
appendFormat:
appendItem:
appendMessage:receiverError:
appendMiddleware:
appendString:
appleCare
appleCareSignInUserName:DSID:authToken:requestID:
appleCareSignInUserName:DSID:authToken:requestID:messageContext:
appleCareSignOutUserWithRequestID:
appleCareSignOutUserWithRequestID:messageContext:
appleIDAccountOnService:
appleIDNotificationCenter
appleIDPrimaryDependentRegistrations
applecareResponseForRequestID:withError:
applicationKeyIndex
applicationPublicIdentityAtIndex:
applicationPublicIdentityType
applicationPublicIdentitys
applicationVersion
apsEnvironmentName
archivedDataWithRootObject:requiringSecureCoding:error:
areAllSelectedAliasesRegisteredOnAccount:
areDataProtectionKeysAvailableForService:withDataProtectionClass:fromDevice:
array
arrayByAddingObject:
arrayByAddingObjectsFromArray:
arrayByApplyingSelector:
arrayWithCapacity:
arrayWithObject:
arrayWithObjects:
arrayWithObjects:count:
assertRunningOnMain
assertRunningWithPriority:
assertTransportThreadRealTimeMode:completionHandler:
associateServiceName:withStreamID:remoteInstanceID:remoteInstanceIDChanged:
asyncQueueForPriority:
attemptCount
attemptPresentationOfExpirationAlertForUser:
attemptPresentationOfNearExpirationAlertForUser:
attempts
attributes
attributesOfItemAtPath:error:
authKitAccountUpdate:
authKitAccountWithAppleID:
authKitAccountWithDSID:
authToken
authTokenChanged:forAccount:
authTokenChanged:forAccount:messageContext:
authenticateAccount
authenticateAccount:
authenticateAccount:messageContext:
authenticatePhoneUser
authenticatePhoneUserWithRequest:
authenticatePhoneWithRequestUUID:
authenticatePhoneWithRequestUUID:messageContext:
authenticateRegistration:
authenticateRegistration:forceNewToken:
authenticateRegistration:forceNewToken:requireSilentAuth:
authenticateRegistration:forceRenewal:requireSilentAuth:
authenticateRegistration:requireSilentAuth:
authenticationCert
authenticationCertForID:
authenticationCertificate
authenticationCertificateForUser:
authenticationChanged
authenticationChangedForAccount:
authenticationDataAuthToken
authenticationDataSig
authenticationDataUserID
authenticationInfo
authenticationResponses
authenticationToken
autoBugCaptureWithCompletion:
automaticResetBlock
automaticResetInterval
autorelease
availability
availabilityTimerCancel
avcReceiveMKMTime:forMKI:isGeneratedLocally:
avoidMainQueue
avoidMainQueueOverrideToNO
awdLogger
awdMetricsForConnectionUUID:
awdTopic
baaOnlyValidationSessionOnQueue:withCompletion:
backingCache
backingOTRSessionRef
backingQueue
backingStore
bagKey
bagReloaded:
bagURL
batchSign:forType:error:
batchSignDatas:withType:error:
batchSignDatas:withType:onQueue:error:
batchSignDatas:withType:onQueue:withCompletion:
bestCallID
block
blockedEntriesForCategory:
bluetoothLinkPreferences
bluetoothMACAddress
bonjourDeliveryController
boolForKey:
boolValue
broadcastAttemptQueueFromPriority:
broadcastBlock
broadcastGroupSessionParticipantDataUpdate:onTopic:toIdentifier:fromID:
broadcastGroupSessionParticipantUpdate:onTopic:toIdentifier:fromID:context:
broadcastID
broadcastNeedsClientAck
broadcastPerformed
broadcastProxyForTargets:messageContext:protocol:
broadcaster
broadcasterForEntitlement:messageContext:
broadcasterForLocalObject:messageContext:
broadcasterForTarget:messageContext:
broadcasterForTopic:entitlement:command:messageContext:
broadcasterForTopic:entitlement:messageContext:
broadcasterForTopic:ignoreServiceListener:messageContext:
broadcasterForTopic:messageContext:
broadcasterWithMessageContext:
btUUID
buildOfIdentityGeneration
buildOfUnregisteredIdentityGeneration
buildRTCSummaryReport
buildValidationCredentialsIfNeeded
buildValidationCredentialsIfNeededForSubsystem:
buildVersion
builderWithPublicKeyStorage:peerIDManager:accountController:registrationKeyManager:rateLimiter:OTRController:serviceController:avoidMainQueue:forceLegacy:
bulkedPayload
bumpEvictionDateToSecondsFromNow:
bundleID
bypassDuet
bypassHomeNumberCarrierCheck
bypassLimit
bypassRegistrationControlStatusCheck
bypassStorage
byteOffset
bytes
bytesReceived
bytesSent
cache
cacheIdentity:forDeviceID:andPushToken:
cacheIncomingGroup:completion:
cacheObject:forKey:
cachedDataForClient
cachedDisabledByService
cachedIDStatusForID:fromURI:fromService:
cachedIDStatusForID:fromURI:fromService:respectExpiry:
cachedIdentityForDeviceID:
cachedManateeAvailability
cachedMap
cachedMasterKeyMaterialCollection
cachedRecordZone
cachedStableKeyMaterialCollection
cachedTokensBySessionID
callAllAckBlocks
callAllIndividualCompletionBlocksWithDeliveryContext:
callID
callStackSymbols
callbackQueue
callingSupported
canCombineWithMessage:
canCompleteRegistration
canForceFamilyFetch
canGossipOnService:
canRegister
canSendRegistration
canStartRegistrationForAccountType:
canUseLargePayload
cancel
cancelActionsForRegistrationInfo:
cancelAllocationTimeoutTimer
cancelBlockOnLinkConnectWithID:cancelSucceeded:
cancelBlocksOnLinkConnect
cancelConnection
cancelInvitation
cancelInvitation:
cancelInvitation:messageContext:
cancelInvitation:withData:
cancelInvitation:withData:messageContext:
cancelInvitation:withRemoteEndedReasonOverride:
cancelInvitation:withRemoteEndedReasonOverride:messageContext:
cancelInvitationWithData:
cancelInvitationWithRemoteEndedReasonOverride:
cancelItemWithIdentifier:service:
cancelItemWithIdentifier:service:messageContext:
cancelMessage:
cancelMessageID:
cancelMessageWithSequenceNumber:streamID:messageUUID:cancelReason:
cancelOpportunisticDataOnService:withIdentifier:
cancelPendingExecutions
cancelPeripheralConnection:
cancelPreviousPerformRequestsWithTarget:selector:object:
cancelReason
cancelRegisterActionsForRegistrationInfo:
cancelled
capabilities
capability
carrierBundleInformationDidChange
carrierBundleValueFromAllSIMsForKey:ofType:withFallback:
carrierNonce
caseInsensitiveCompare:
category
cbuuid
cbuuidString
cbuuidUUID
cbuuidsOfPairedDevices
cbuuidsOfPairingDevices
cellularRadioAccessTechnologyDidChange:
cellularSoMaskDidChange:
center:allSucceededRegistrations:
center:failedAuthentication:error:info:
center:failedCurrentEmailsRequest:error:info:
center:failedIDSAuthentication:error:info:
center:failedIdentification:error:
center:failedRegionValidation:error:info:
center:failedRegistration:error:info:
center:startedAuthenticating:
center:succeededCurrentEmailsRequest:emailInfo:
center:succeededIDSAuthentication:
center:succeededIdentification:phoneNumber:token:
center:succeededInitialRegionQuery:
center:succeededLinkHandlesConfirmation:emailAddress:
center:succeededRegionValidation:regionID:phoneNumber:extraContext:verified:
center:succeededRegistration:
centerNeedsNewIdentification:
centerUpdatedRegistrationIdentities:
centralManager:connectionEventDidOccur:forPeripheral:
centralManager:didConnectPeripheral:
centralManager:didDisconnectPeripheral:error:
centralManager:didDiscoverPeripheral:advertisementData:RSSI:
centralManager:didFailToConnectPeripheral:error:
centralManager:didUpdateANCSAuthorizationForPeripheral:
centralManager:willRestoreState:
centralManagerDidUpdateState:
centralRegListener
cert
certificateSigningRequest
certifiedDeliveryRTS
certifiedDeliveryVersion
changeCreatedAt:
charValue
characterAtIndex:
characterSetWithCharactersInString:
checkAndCallSessionStart
checkAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:
checkConnectivityState:
checkContactsForDestination:
checkHeartbeat
checkIfListeningForActivity:completion:
checkLocalConnectivityForSession:withCompletionBlock:
checkNetworkAvailabilityForSession:completionBlock:
checkOptInEligibilityForApplication:andFetchSelfVerificationRequestIDWithCompletion:
checkRestorationState
checkServerStorageForService:withCompletion:
checkServiceCompability:localMessage:
checkSuspendTrafficForDevice:wait:
checkTransportLogWithReason:
checkpointAndVacuumDB
checkpointAndVacuumDBWithDataProtectionClass:
checksumFailed
chunkNumber
ckContainer
class
classStorageBecameAvailable:
classesForStrictUnarchiving
cleanUpAccountsBasedOnInUseUsernamesBlock:profileIDBlock:completionBlock:
cleanUpAccountsWithUsername:orProfileID:basedOnInUseUsernames:profileIDs:completionBlock:
cleanUpCachedMappings:
cleanUpMasterKeyMaterialUsingPredicate:
cleanupAbsintheTask
cleanupAccount
cleanupExpiredEntriesIfNeeded
cleanupSession:messageContext:
cleanupSession:shouldCleanSessionStatus:
cleanupSessionWithChannelDestination:clientChannelUUID:
cleanupSessionWithCleanStatus:
cleanupSessionWithInstanceID:
cleanupSessionWithInstanceID:messageContext:
cleanupSessionsForClient:
cleanupSocketsForClient:
cleanupValidationInfoForSubsystemMechanism:
cleanupWithError:
clearAdmissionCheckCache
clearAllPendingResponseTokens
clearAllPreflightStacks
clearAllTimers
clearCache
clearCacheAndPersistImmediately:
clearCacheWithCompletion:
clearConsentDenialsForPhoneUser:
clearConsentDenialsForRegistration:
clearDisplayName
clearIDSState
clearIDSStateWithMessageContext:
clearItem:
clearKTDatas
clearKeychainWithError:
clearLocalCID:
clearNonExpirationFollowUps
clearPNRReasonForUserUniqueIdentifier:
clearQueueForSubsystem:
clearServiceSignatures
clearState:
clearStatementCache
clearStats
clearTrustedServices
clearUris
clientAtIndex:isEntitledToAccessService:forEntitlement:shouldWarn:
clientChannelConnected
clientChannelUUID
clientConnection
clientContextData
clientDataUpdateBlocks
clientDatasByServiceType
clientDatasForRegistrations:keyStore:keyTransparencyVerifier:
clientID
clientInfo
clientInstanceCreatedWithMessageContext:
clientInstancesRemoved
clientProcessName
clientProcessReceivedMessage:messageSize:deltaTime:priority:
clientReady
clientRemoteObjectByActivity
clientRemoteObjectsByTopic
clientType
clientUUID
closeDataConnectionWithDeviceConnectionInfo:options:
closeDatabase
closeSocketWithOptions:
closeSocketWithOptions:messageContext:
closeSocketWithOptions:queue:completionHandler:
closed
cloudCircleStatusError:
cloudKitAccountStatusChanged:
cloudKitElectionStore
cloudPairedIDForDeviceID:
cloudRelayRegisteredAccountWithError:
cloudServiceConnector
clusterWithDataRepresentation:error:
clusterWithFullAccountIdentity:fullAdminServiceIdentities:fullSigningServiceIdentities:error:
coalesceDelayOverride
coalesceQueueExistsForTopic:
code
collaboratorProvider
collectForTimeBase:anonymize:
combineWithMessage:
combinedMessages
commCenterDead
commandContext
commandToHandlerBlock
commitBlock
commitStateForKey:
companionLinkClient
compare:
compareAgainstData:
completedMigration
completionBlocks
completionBlocksToURIsMap
components:fromDate:
componentsJoinedByString:
componentsSeparatedByString:
compressed
compressionState
conference:cancelRelayRequest:requestDict:
conference:closeConnectionForCallID:
conference:didChangeLocalVariablesForCallID:
conference:didReceiveARPLData:withCallID:
conference:didReceiveData:forCallID:
conference:didStartSession:withCallID:error:
conference:didStartSession:withUserInfo:
conference:didStopWithCallID:error:
conference:didStopWithCallID:error:callMetadata:
conference:inititiateRelayRequest:requestDict:
conference:isRemoteAudioBelowThreshold:
conference:localAudioEnabled:forCallID:error:
conference:localIPChange:withCallID:
conference:receivedFirstRemoteFrameForCallID:
conference:receivedNoRemotePacketsForTime:callID:
conference:reinitializeCallForCallID:
conference:remoteAudioEnabled:forCallID:
conference:remoteAudioPaused:callID:
conference:remoteCallingModeChanged:forCallID:
conference:remoteScreenAttributesChanged:callID:
conference:remoteVideoAttributesChanged:callID:
conference:remoteVideoPaused:callID:
conference:sendRelayUpdate:updateDict:
conference:updateInputFrequencyLevel:
conference:updateInputMeterLevel:
conference:updateOutputFrequencyLevel:
conference:updateOutputMeterLevel:
conference:videoQualityNotificationForCallID:isDegraded:isRemote:
conference:withCallID:didPauseAudio:error:
conference:withCallID:didPauseVideo:error:
conference:withCallID:isSendingAudio:error:
conference:withCallID:networkHint:
conference:withCallID:remoteMediaStalled:
config
configuration
configurationForOptions:
configureAsMacNotificationCenterObserver:withPushToWakeTopics:
conformsToProtocol:
connectError
connectGlobalLinkForDevice:sessionInfo:connectReadyHandler:withLocalInterfacePreference:
connectOnMainQueueToPeer:
connectPairedDevice:
connectPairedDeviceWithID:completion:
connectPeripheral:options:
connectQRServer:withPreferredLocalInterface:
connectReadyHandler
connectToPeer:
connectWithProtocoHandler
connectWithSessionInfo:interfaceAddress:joinSession:completionHandler:withLocalInterfacePreference:
connectWithTransportThread
connected
connecting
connection
connection:dataReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:isCompressed:didWakeHint:
connection:didReceiveData:
connection:didReceiveData:withIdentifier:
connection:didReceiveDataMessage:
connection:didStart:error:
connection:messageReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:isCompressed:didWakeHint:
connection:protobufReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:isCompressed:didWakeHint:
connection:receivedAppLevelAckWithTopic:fromID:messageID:peerResponseIdentifier:
connection:receivedData:
connectionBecameEmpty
connectionBecameEmpty:
connectionComplete:withResponse:
connectionContext
connectionCountHint
connectionDidClose
connectionDidClose:
connectionDidReachInFlightMessageLowWaterMark:
connectionDidReceiveBytes:
connectionDidStop:error:
connectionHasSpaceForMessages:dataProtectionClass:
connectionID
connectionInfoForCallID:
connectionInfoWithState:
connectionInitTime
connectionIsEmpty:
connectionIsEmptyOfCloudMessages:
connectionSetupStartTime
connectionTimeout
connectionTimerCleared
connectionType
connectionsTableByLocalRemotePortKey
connectivityMonitor
consentTokens:error:
constructRAResponseDictionary:
constructRAResponseDictionaryForServices:completionHandler:
contactStore
contactType
contactUtilities
contactsAssociationID
contactsLastUpdatedDate
contactsSharingState
container
containerStorageItemNameForContainerIdentityIdentifier:
containerStorageItemNameForContainerIdentityIdentifier:applicationKeyIndex:
containerStorageItemNameForIsRegisteredAtApplicationKeyIndex:
containerStorageItemNameForKTDataAtKeyIndex:isRegistered:
containerWithIdentifier:
containsMechanisms
containsMessageHash:
containsObjectIdenticalTo:
contextInfo
continueWithResult:
continuityClientInstanceCreatedWithMessageContext:
continuityConnectCount
continuityConnectToPeer:
continuityConnectToPeer:messageContext:
continuityDidConnectToPeer:withError:
continuityDidDisconnectFromPeer:withError:
continuityDidDiscoverPeerWithData:fromPeer:
continuityDidDiscoverType:withData:fromPeer:
continuityDidFailToStartAdvertisingOfType:withError:
continuityDidFailToStartScanningForType:withError:
continuityDidLosePeer:
continuityDidLosePeer:forType:
continuityDidStartAdvertisingOfType:
continuityDidStartScanningForType:
continuityDidStartTrackingPeer:error:
continuityDidStartTrackingPeer:forType:error:
continuityDidStopAdvertisingOfType:
continuityDidStopAdvertisingOfType:withError:
continuityDidStopScanningForType:
continuityDidStopTrackingPeer:
continuityDidStopTrackingPeer:forType:
continuityDidUpdateStateToState:
continuityDisconnectFromPeer:
continuityDisconnectFromPeer:messageContext:
continuityStartAdvertisingOfType:withData:withOptions:
continuityStartAdvertisingOfType:withData:withOptions:messageContext:
continuityStartScanningForType:withData:mask:
continuityStartScanningForType:withData:mask:boostedScan:duplicates:
continuityStartScanningForType:withData:mask:boostedScan:duplicates:messageContext:
continuityStartScanningForType:withData:mask:messageContext:
continuityStartScanningForType:withData:mask:peers:
continuityStartScanningForType:withData:mask:peers:boostedScan:duplicates:
continuityStartScanningForType:withData:mask:peers:boostedScan:duplicates:messageContext:
continuityStartScanningForType:withData:mask:peers:messageContext:
continuityStartTrackingPeer:forType:
continuityStartTrackingPeer:forType:messageContext:
continuityStopAdvertisingOfType:
continuityStopAdvertisingOfType:messageContext:
continuityStopScanningForType:
continuityStopScanningForType:messageContext:
continuityStopTrackingPeer:forType:
continuityStopTrackingPeer:forType:messageContext:
controlChannel
controlChannelCachedSYN
controlChannelVersion
conversationGroup
conversationGroupWithConversationKey:fromPublicData:publicKey:signature:groupID:parent:parentPublicKey:forwardingTicket:sponsor:error:
conversationGroupWithParent:members:sponsorAlias:sponsor:applicationData:error:
conversationGroupWithUpdatedGroupID:error:
conversationID
conversationSponsorPairFromPublicData:publicKey:signature:groupID:parent:parentPublicKey:forwardingTicket:fullDeviceIdentity:error:
copy
copyCacheDictionaryRepresentation
copyCacheWithBlock:
copyCurrentNetworkInterfaces
copyDictionaryRepresentation
copyDirectMessagingInfo
copyEndpoint
copyHandlersForEnumerating
copyIdentity
copyIdentityFromKeychainWithApplicationKeyIndex:error:
copyItemAtPath:toPath:error:
copyKTRegistrationDataToRegisterForKeyIndex:isRegistered:withError:
copyKTRegistrationDataToRegisterForKeyIndex:withError:
copyKeyListForAppID:
copyLinkStatsDict
copyMultipleForCurrentKeys:appID:
copyOTRTestBlock:
copyOpportunisticCacheWithBlock:
copyPublicIdentityDataToRegisterForKeyIndex:withError:
copyPushIdentity
copyRegistrationKeyPairForIdentifier:publicKey:privateKey:keyPairSignature:isMigratedSignature:isUpgradePending:
copySendParameters
copySessionObjectForToken:
copySharedDeviceManager
copyValueForKey:appID:
copyWithZone:
count
countByEnumeratingWithState:objects:count:
countForDataMessageType:
countForDataProtectionClass:
countryCode
createAPNSMessageDelivery
createAliasForParticipantID:salt:
createAliasForParticipantID:salt:relayGroupID:relaySessionID:
createAliasForParticipantID:salt:sessionID:
createAliasForParticipantID:salt:sessionID:messageContext:
createAliasForParticipantID:salt:sessionID:relayGroupID:relaySessionID:
createConnectionData:dataReadyHandler:
createConnectionData:handler:
createConnectionDataForDevice:localPartyID:dataReadyHandler:
createConnectionWithIdentifier:priority:shouldUseIPsecLink:dataProtectionClass:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
createFanoutFromMessage:forService:fromIdentity:withMaxSize:chunkNumber:firstMessage:
createGroupWithParticipants:sharedApplicationData:completion:
createHTTPMessageDelivery
createIdentityForApplicationKeyIndex:error:
createKeyMaterialForGroup:sessionID:
createMessageFragmentsFromOriginalMessage:withFragmentedMessageID:fragmentSize:
createOriginalMessageFromFragmentedMessages:
createRealTimeEncryptionFullIdentityForDevice:completionBlock:
createRegistrationStatusProvider
createServiceConnectionWithServiceName:invalidationHandler:terminationHandler:peerEventHandler:peerQueue:
createStableKeyMaterialAndSendToFrameworkForGroup:sessionID:
createStableKeyMaterialForGroup:sessionID:
createdAt
creationDate
creationTime
credential
credentialForUser:
ctAdapter
cumulativeIncomingStatistics
cumulativeOutgoingStatistics
currentAliasState:
currentAverageRTT
currentCache
currentCacheForService:
currentCellularSignalStrength:signalRaw:signalStrength:signalGrade:
currentCellularSignalStrength:signalStrength:signalGrade:
currentDate
currentDefaultDeviceLinkType
currentDevice
currentDeviceRecordsPromise
currentDonatedEntries:
currentECVersionWithBlock:
currentFetchCount
currentHandler
currentInFlightSyncAttempts
currentItem
currentLinkType:
currentLinkType:andRATType:forDeviceID:
currentLocalKeyTransparencyEligibleServiceIdentifiers
currentLocalKeyTransparencyEnrolledURIsForServiceIdentifier:
currentLocalMasterKeyMaterial
currentLocalStableKeyMaterial
currentMessage
currentOutgoingFragmentedMessageID
currentPeerVerificationResultsForQueriedIndex:ticket:
currentPeerVerificationResultsForURIVerificationMap:forService:withCompletion:
currentPreflightStack
currentPromise
currentResult
currentRunLoop
currentSIMsWithError:
currentServerTimeInterval
currentSize
currentSubscriptionsForActivity:
currentSubscriptionsForActivity:completion:
currentTime
currentVerificationResultsForRegisteredIndex:ticket:
cypher
daemon
daemonCapabilities
daemonClients
daemonDeathResend
daemonDisconnected
daemonInterface:shouldGrantAccessForPID:auditToken:portName:listenerConnection:setupInfo:setupResponse:
daemonMIGInterface
daemonMIGQueryInterface
daemonXPCInterface
daemon_oversized
data
dataForIdentifier:
dataForIdentifier:error:
dataForKey:
dataForKey:error:
dataForService:identifier:
dataIndicationToBuffer:outputLength:data:dataLen:keyData:remainingLength:
dataLength
dataLengthFromHeaderData:
dataProtectionClass
dataProtectionClassWithError:
dataProviderByRealm
dataReceived:withGUID:forTopic:toIdentifier:fromID:context:
dataRepresentation
dataRepresentationForNGMVersion:
dataRepresentationWithError:
dataSource
dataToEncrypt
dataUsageBundleID
dataUsageBundleIdentifier
dataUsingEncoding:
dataWithBytes:length:
dataWithBytesNoCopy:length:freeWhenDone:
dataWithContentsOfURL:options:error:
dataWithData:
dataWithPropertyList:format:options:error:
database
databaseCloseTimer
databaseLastUpdateTime
databaseSizeBiggerThanThreshold:
databaseSizeInMB
date
dateByAddingTimeInterval:
dateLastRegistered
dateScreenLightLastChanged
dateWithTimeIntervalSince1970:
dateWithTimeIntervalSinceNow:
dateWithTimeIntervalSinceReferenceDate:
deactivateAndPurgeIdentify
deactivateAndPurgeIdentifyForAccount:
deactivateAndPurgeIdentifyForAccount:messageContext:
deactivatePairedDevices
deactivateRegistration
debugDescription
declineInvitation
declineInvitation:
declineInvitation:messageContext:
declineInvitation:withData:
declineInvitation:withData:messageContext:
declineInvitationWithData:
declineInvitationWithData:forceFromID:additionalMessageAttributes:
decodableClasses
decodeBoolForKey:
decodeDoubleForKey:
decodeIntegerForKey:
decodeObjectForKey:
decodeObjectOfClass:forKey:
decodeObjectOfClasses:forKey:
decryptData:keyID:sequenceNumber:error:
decryptData:onQueue:error:
decryptData:usingIdentifier:isRetry:onQueue:error:
decryptData:usingIdentifier:onQueue:isRetry:replayKey:withCompletion:
decryptData:withPublicDeviceIdentityContainer:error:usingIdentifier:isRetry:
decryptData:withPublicDeviceIdentityContainer:usingIdentifier:isRetry:
decryptDataWithAESKey:data:
decryptLocalDeliveryPayload:forService:withDataProtectionClass:fromDevice:encryptionType:priority:error:
decryptMessageData:myURI:fromURI:token:groupID:encryptionType:isLiveRetry:replayKey:completionBlock:
decryptedBlobOverQUIC:
decryptedData
decryptedDataForKey:
defaultBroadcaster
defaultCenter
defaultCloudPriorityMessageStatistics
defaultDelayForSendMode:
defaultLogger
defaultManager
defaultPairedDependentRegistration
defaultPairedDependentRegistrationIncludingTinker:
defaultPairedDependentRegistrations
defaultPairedDeviceDestination
defaultPairedDeviceEndpoint
defaultPeerClassCConnectivityDidChange:
defaultPeerCloudConnectivityChanged:
defaultPeerDropDisallowedMessages
defaultPeerIsCloudConnected
defaultPeerIsConnected
defaultPeerIsNearby
defaultPeerLinkTypeChanged:
defaultPeerMagnetIndicationOfAwakeStateChanged:
defaultPeerNearbyChanged:
defaultPeerSetLinkPreferences:
defaultPeerSetPreferInfraWiFi:services:
defaultPeerSetWantsQuickRelayRequest:
defaultPeerSupportsDirectMessaging:isObliterating:
defaultPeerUnpairStart
defaultPersisterForIdentifier:dataProtectionClass:
defaultPriorityMessageStatistics
defaultQueue
delay
delayedSave
delayedSaveSettings
delegate
deleteAllCachedValuesForGroupWithID:WithCompletion:
deleteAllKnownGroupsWithCompletion:
deleteAllMessagesWithAccountGUID:
deleteCache
deleteDatabase
deleteEntriesBeforeDate:afterDate:error:
deleteExpiredIncomingMessagesOlderThan:withLimit:
deleteIncomingMessageWithGUID:
deleteKeyTransparencyDeviceRecordsForPushToken:completion:
deleteOutgoingMessageWithGUID:alternateGUID:
deleteOutgoingMessageWithGUID:alternateGUID:classDDatabase:
deleteOutgoingMessageWithGUID:alternateGUID:dataProtectionClass:
deletePairedDevice:
deletePairedDeviceWithID:completion:
deletePostponedMessages
deletePostponedMessages:classDDatabase:
delivery
deliveryAcknowledgementBlock
deliveryController
deliveryController:dataReceived:topic:command:deviceID:btUUID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:didWakeHint:
deliveryController:device:supportsDirectMessaging:isObliterating:
deliveryController:didReceiveMessage:topic:command:deviceID:messageID:
deliveryController:foundNearbyIPsecCapableDeviceWithUniqueID:
deliveryController:messageReceived:topic:command:deviceID:btUUID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:didWakeHint:
deliveryController:protobufReceived:topic:command:deviceID:btUUID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:didWakeHint:
deliveryController:receivedAppLevelAckWithTopic:deviceID:btUUID:messageID:peerResponseIdentifier:priority:connectionType:
deliveryController:uniqueID:isCloudConnected:
deliveryController:uniqueID:isConnected:
deliveryController:uniqueID:isNearby:
deliveryControllerHasSpaceforNonUrgentMessages:priority:dataProtectionClass:
deliveryControllerHasSpaceforNonUrgentMessages:priority:dataProtectionClass:ofTypes:
deliveryControllerHasSpaceforUrgentMessages:dataProtectionClass:ofTypes:
deliveryControllerQueuedIncomingMessageDictionary:
deliveryError
deliveryMinimumTime
deliveryStats:
deliveryStatusContext
deliveryTime
delivery_oversized
deniedToSend
denyIncomingGrantRequests
dependencyProvider
dependentRegistration:findDeviceUniqueID:btID:forURI:token:supportsLiveDelivery:
dependentRegistration:hasDependentRegistrationWithURI:token:
dependentRegistrationAuthRetries
dependentRegistrationMatchingUUID:
dependentRegistrationMatchingUUID:includingTinker:
dependentRegistrationResponseCode
dependentRegistrations
dependentRegistrationsIncludingCurrentDevice
dependentRegistrationsIncludingTinker:
dependentRegistrationsTTL
dequeueBroadcastWithID:forMessageUUID:service:priority:
description
descriptionForArray:options:
descriptionForData:options:
descriptionForDataProtectionClass:
descriptionForDictionary:options:
descriptionForObject:options:
descriptorForRequiredKeysForStyle:
destination
destinationCorrelationIdentifier
destinationIsDefaultPairedDevice:
destinationIsGuestDevice:
destinationPersister
destinationWithDestinations:
destinationWithStrings:
destinations
destinationsContainFromID:
destinationsExcludingSelfForDestinations:
destinationsLightweightStatus
destinationsMustBeInContacts
detectorWithName:
device:nsuuidChanged:
deviceCapabilities
deviceCertificateForService:uri:
deviceCertificationRepair
deviceChangedForDeviceID:isNearby:isConnected:isCloudConnected:completionHandler:
deviceColor
deviceConnectionInfo
deviceData
deviceHeartbeatCenter
deviceID
deviceIDForPushToken:
deviceIdToHealableErrors
deviceIdentifier
deviceIdentifierDidChange:
deviceIdentityFromDataRepresentation:publicAdminServiceIdentity:error:
deviceIdentityWithFullAdminServiceIdentity:error:
deviceInformationString
deviceIsAsleepDidChange:isAsleep:
deviceIsClassCConnectedDidChange:isClassCConnected:
deviceIsCloudConnectedDidChange:isCloudConnected:
deviceIsConnectedDidChange:isConnected:
deviceIsEnabledDidChange:isEnabled:
deviceIsNearbyDidChange:isNearby:
deviceIsRegisteredDidChange:isRegistered:
deviceKey
deviceLinkTypeDidChange:linkType:
deviceMetadata
deviceModel
deviceMonitor
deviceName
deviceNameForDeviceID:
devicePairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:
deviceRegionInfo
deviceScore
deviceScoreNonce
deviceScoreWithCompletion:
deviceSetupCompleted
deviceSetupStarted
deviceSignatureByService
deviceState
deviceSupport
deviceTime
deviceToDeviceEncryptionAvailability
deviceType
deviceUniqueID
devicesHashForURI:andService:
dhKey
diceRoll
dictionary
dictionaryForKey:
dictionaryMetric
dictionaryRepresentation
dictionaryRepresentationWithUncompressedData
dictionaryWithCapacity:
dictionaryWithDictionary:
dictionaryWithKeyArray:defaultValue:
dictionaryWithObject:forKey:
dictionaryWithObjects:forKeys:count:
dictionaryWithObjectsAndKeys:
didAddPairedDevice:
didAuthenticatePhoneWithAuthenticationCertificateData:requestUUID:error:
didCacheGroup:
didCacheGroup:completion:
didConnectControlChannelForDeviceConnectionInfo:connection:error:
didCreateGroup:completion:
didCreateMKM:
didDataRepresentationFormatChangeFromDataRepresentation:error:
didFallback
didFetchPhoneUserSubscriptionSource:requestUUID:error:
didFirstLoadPersistentMap:
didFlushCacheForService:remoteURI:fromURI:guid:
didGeneratePhoneAuthenticationSignature:nonce:certificates:labelIDs:inputData:requestUUID:error:
didInvalidate
didReceiveBlockedIndicationForLink:reason:
didReceiveCurrentCellularSignalRaw:signalStrength:signalGrade:
didReceiveDataMessage:
didReceiveDecryptionFailureForGroup:
didReceiveDecryptionFailureForGroup:completion:
didReceiveEndpointsUpdate:forGroup:sessionID:
didReceiveReestablishmentRequest
didReceiveRegistrationIdentityUpdate
didReceiveRegistrationIdentityUpdateWithCompletion:
didReceiveSIMSetupCompleteNotification
didRegisterWithKTAccountKey
didRemovePairedDevice:
didRequestCarrierTokenString:requestUUID:error:
didSendJoin
didSendKeyMaterial:duration:
didSendOpportunisticDataWithIdentifier:onAccount:toIDs:
didSessionReinitiated
didSetPhoneUserSubscriptionSource:requestUUID:error:
didSwitchActivePairedDevice:
didSwitchActivePairedDevice:forService:wasHandled:
didUpdateGroup:withNewGroup:
didUpdateGroup:withNewGroup:completion:
didUpdateMembers:forGroup:sessionID:lightweightStatusDict:hasChangedStandardMembers:newlyAddedMembers:
didUpdatePairedDevice:
didUpdateParticipants:ofType:forGroup:sessionID:
didUpdateProtocolForPairedDevice:
didWakeHint
differsFromPhoneNumber:
directory
disableAccount:messageContext:
disableAccountWithUniqueID:
disableAliasValidation
disableCloudConnectionForReason:
disableConnectionForReason:shouldWait:
disableDevice:
disableEncryption
disableOnLowRAMDevice
disablePrimaryAccountWithUniqueID:
disableRegistration
disableRemoteDeviceEncryption
disableTemporaryPhoneAlias:withCompletion:
disabledOnTinkerWatch
disallowCellularInterface
disallowFirewallAutoEnroll
disallowQueryRefresh
disallowWifiInterface
disasterModeTokens
disconnectActivePairedDevice
disconnectActivePairedDevice:
disconnectFromPeer:
disconnectGlobalLinkForDevice:completionHandler:
disconnectOnMainQueueFromPeer:
disconnectWithCompletionHandler:
displayIDs
displayName
displayingAddNumberPrompt
ditchMemoryPolicy
diversifier
diversifyPrivateKey:withDocumentIdentifier:trackingPreventionSalt:error:
domain
domainHash
dontFilterSelfMessagesForUnknownDevice
doubleForKey:
doubleValue
dropAllMessagesWithoutAnyAllowedClassifier
dropDisallowedMessages
dropIPPackets:linkID:payloadArray:
dropIPPackets:payloadArray:
dropMessageIfDropPointIsDetectedWithSendParameters:
dropMessageIndicatorCommand
dropQueuedBroadcastsForServices:
dsAuthID
dsHandle
dsID
dsid
dualInterfaceidQueryMessageDelivery
dualSIMCapabilityEnabled
duetIdentifiersOverride
duetIdentifiersOverrideForAccountWithGUID:priority:
duetInterface
duetInterface:resourceAvailabilityChangedForIdentifiers:
dumpServiceMap
duration
earlierDate:
effectiveIdentifier
effectiveMaxPayloadSizeIfCanUseLargePayload:
eligibleServiceIdentifiers
email
emailAddresses
emailsToRegister
enableAccount:
enableAccount:messageContext:
enableAccountWithUniqueID:
enableCloudConnection
enableCloudConnectionForDefaultPairedDevice:
enableConnection
enableConnectionForDefaultPairedDevice:
enableDevice:
enableHomeNumber
enableOTR
enablePrimaryAccountWithUniqueID:
enablePushHandler:
enableQuickRelay
enableSKE
enableSingleChannelDirectMode
enableTemporaryPhoneAlias:withCompletion:
enableUPlusOneSessionForTransition:
enabledAccountsOnService:
enabledOnlyOnStandaloneDevices
enabledOnlyWhenPaired
enclosureColor
encodeBool:forKey:
encodeDouble:forKey:
encodeInteger:forKey:
encodeObject:forKey:
encodeWithCoder:
encodedData
encryptControlChannelForStoredIdentities
encryptData:onQueue:error:
encryptData:sequenceNumber:error:
encryptData:withEncryptedAttributes:onQueue:withCompletion:
encryptData:withEncryptedAttributes:usedIdentifier:error:
encryptData:withEncryptedAttributes:usedIdentifier:onQueue:error:
encryptData:withEncryptedAttributes:withPublicDeviceIdentityContainer:usedIdentifier:error:
encryptData:withEncryptedAttributes:withPublicDeviceIdentityContainer:usingIdentifier:error:
encryptDataWithAESKey:data:
encryptLocalDeliveryPayload:toDevice:forService:withDataProtectionClass:encryptionType:priority:error:
encryptPayload
encrypted
encryptedAttributes
encryptedData
encryptedDataBlob
encryptedMirageHandshakeBlob
encrypterWithDeviceID:
encrypterWithEndpoint:
encrypterWithLocalURI:remoteURI:pushToken:service:cert:
encrypterWithOTRToken:
encryption
encryptionAttributes
encryptionClassAKey
encryptionClassCKey
encryptionClassDKey
encryptionController
encryptionEnabled
encryptionInitialized
encryptionSequenceNumberForGroupID:
encryptionStateStruct
encryptionType
endAllSessionsForService:withReason:
endCollector
endFairplayAuthenticationForDeviceWithCbuuid:
endSession
endSession:
endSession:messageContext:
endSession:withData:
endSession:withData:messageContext:
endSessionTimeout
endSessionTimerCleared
endSessionWithData:
endSessionWithReason:
endpoint
endpointCount
endpointForPushToken:URI:service:fromURI:
endpointMap
endpointQueryListeners
endpointState
endpoints
endpointsForURIs:fromURI:service:fromIdentity:filterBehavior:allowRefresh:
endpointsForURIs:service:fromURI:
endpointsForURIs:service:fromURI:ignoringTTL:
endpointsForURIs:serviceIdentifier:localURI:completion:queue:
endpointsToEncryptedData
enforceRemoteTimeouts
engram
engramDataReceived:withGUID:forTopic:toIdentifier:fromID:context:
engramID
engramKeyStoreDidUpdateIdentities:
enqueueBroadcast:forTopic:entitlement:command:capabilities:messageContext:
enqueueExecutionWithTarget:afterDelay:
enqueueIncomingMessageBroadcast:broadcastData:forTopic:entitlement:command:capabilities:messageContext:
enqueueMessage:forTopic:sendMode:
enqueueQueryBlock:cleanup:
enqueuedDate
ensureCommunicationWithActivePairedDeviceIsPossible
ensureDatabaseIsInitialized
ensureLocalSetupInProgressConsistencyAfterQWS
entitledForAllTopics
entitlementDictionary:isEntitledToAccessService:forEntitlement:forAccount:shouldWarn:
entitlements
entryFromPublicDataRepresentation:error:
enumerateContactsWithFetchRequest:error:usingBlock:
enumerateKeysAndObjectsUsingBlock:
enumerateObjectsUsingBlock:
enumerateObjectsWithOptions:usingBlock:
environment
eraseFromKeyChain:
error
error:
errorByService
errorCode
errorContainer
errorContainerToReport
errorForMissingEntitlement:
errorMessage
errorToReportForECError:
errorToReportForLegacyError:
errorWithDomain:code:userInfo:
event:
events
evictCachedObjectForKey:
evictionDate
evictionTimer
excessiveCachingCount
excessiveCachingReportCounter
executeReadyItemsWithBlock:
executeSynchronouslyOnCallbackQueue:
existingAccountIdentityClusterWithCompletion:
existingAccountOnService:withType:loginID:
existingFullDeviceIdentityWithCompletion:
existingRelaySessionToken
existingRelaySignature
expectedNextIncomingSequenceNumber
expectedNextOutgoingSequenceNumber
expectedRemoteKeyTransparencyEligibilityForServiceIdentifier:pushToken:
expectingMoreResponses
expectsPeerResponse
expirationDate
expirationInterval
expirationManager
expirationManager:didExpireUser:
expirationManager:nearingExpirationForUser:
expireDate
expiry
expiryDate
expiryEpoch
extraCompletionBlocks
faceTimeAudioSupported
faceTimeMultiwaySupported
faceTimeNonWiFiEntitled
faceTimeSupported
failWithError:
failedDecryptingMessage:reason:forGroupID:onService:
failedDecryptingMessage:reason:forGroupID:onService:messageContext:
failedPromiseWithError:
failedTokenCache
fakeIncomingPushForUserID:style:service:
fakeMessage
fallbackBlock
familyDevices
familyHandles
familyManager
familyMembers
familyName
fanoutEncryptionManager
featureID
fetchAccountEligibilityForDeviceToDeviceEncryptionWithCompletion:
fetchAccountIdentityItemWithCompletion:
fetchAllKnownGroups:
fetchAuthTokenForProfileID:username:service:outRequestID:completionBlock:
fetchCachedManateeAvailability
fetchCachedObjectForKey:completion:
fetchEndpointCacheStateForServiceIdentifier:localURI:remoteURI:completion:
fetchFamilyWithFamilyRequest:
fetchFullClusterWithIdentifier:error:
fetchGroupWithGroupID:completion:
fetchGroupWithID:completion:
fetchKTEligibleServices
fetchKTRegistrationStatusWithCompletion:
fetchKeyTransparencyDeviceRecordsWithCompletion:
fetchLatestGroupWithStableID:completion:
fetchLocalDeviceTrustCircleEligibilityWithCompletion:
fetchLocalDeviceTrustCircleEligibleServiceIdentifiersWithCompletion:
fetchOpportunisticCacheWithError:
fetchPhoneUserSubscriptionSourceWithRequestUUID:
fetchPresenceCapability:
fetchPrivateClientDataDescriptionForService:completion:
fetchPrivateDeviceDataDescription:
fetchRemoteAccountsOfServiceTypes:withCompletionBlock:
fetchSelfVerificationInfoForApplication:withCompletion:
fetchShouldReregisterForManateeAvailability:
fetchStoredUserDescriptions:
fetchTransparentEndpointsForServiceIdentifier:localURI:remoteURI:verifyAgainstTrustCircle:completion:
fetchTrustedDevicesFromKVS
fetchVerifierKVSTrustedDevicesWithCompletion:
fetchXPCStateDescriptionForProcesses:withCompletion:
fileCleanupBlock
fileExistsAtPath:
filePath
fileSystemRepresentation
fileTypeForOptions:
fileURLWithPath:
fileURLWithPathComponents:
fileXfer
filename
filteredArrayUsingPredicate:
filteredSetUsingPredicate:
finalDestinations
finalizedMessageDictionaryIfDone
findAllocateResponseForSessionID:FromURI:
findDefaultPeerToForceOTRNegotiation:priority:completionBlock:
findDeviceUniqueID:btID:forURI:token:supportsLiveDelivery:
finishDecoding
finishedProvisioningPseudonym:success:error:forRequestUUID:
finishedQueryWithInfo:forURIs:fromURI:service:
finishedRegistration
finishedRenewingPseudonym:success:error:requestUUID:
finishedReportingRequestUUID:withError:
finishedRevokingPseudonymWithSuccess:error:requestUUID:
finishedSigningForRequest:signedData:error:
finishedTrackingAPNSAcksWithURIs:guid:
finishedTrackingMadridAcksWithContext:uris:guid:
finishedVerifyingSignedDataForRequest:success:error:
fireAndForget
fireDate
firewallCollaboratorForXPCDaemon:
firewallCollaboratorWithCompletion:
firewallDatabaseAllowsFromID:mergeID:service:
firewallNotificationCenter
firewallNotificationStyle
firewallRateLimiter
firewallStore
first
firstDataPacketReceiveTime
firstGossipChance
firstGossipChanceFromBag
firstIncomingSYNSequenceNumber
firstObject
firstObjectCommonWithArray:
firstPacketReceiveTime
fixedInterface
fixedInterfaceDestination
flags
flagsString
flushAllMessagesForReason:
flushBuffer:
flushBuffer:toDeviceUniqueID:cbuuid:
flushCoalesceQueueForTopic:
flushLinkProbingStatus:
flushProxy:
forEachAdhocAccount:
forMessaging
forParticipantID
forPublicIdentity
forRefresh
forSending
forceAccountRenewalOnService:
forceAttachmentMessage
forceBagLoad
forceCellular
forceCheckAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:
forceEncryptionOff
forceFamilyFetch
forceFlushOnDeliveryReceipt
forceHTTPQueriesOnly
forceInternetInvitation
forceKVSSync
forceLegacy
forceLegacyPK
forceOTRNegotiation:priority:completionBlock:
forceOTRNegotiationForTopic:priority:completionBlock:
forceOnePerFanout
forceRefresh
forceRemoveAccount:
forceRemoveAccount:messageContext:
forceRemoveUser:silently:
forceRepairAccounts:
forceRoll
forceSyncKVS
forceTriggerStallDetectedBlockWithEventName:
forceValidateUUID:uri:completionBlock:
forceVerificationWithIndex:ticket:completion:
forcedLocal
forgetDeviceWithID:completion:
forgetPeerTokensForService:
forgetPeerTokensForURI:fromURI:service:
forgetSessionTokensForURI:fromURI:service:
formAndEncryptDataBlob:type:
formattedKeyForTopic:sendMode:
forwardingSig
forwardingSigAlgorithm
forwardingTicket
fragmentIndex
fragmentationSize
fragmentedMessageID
fromID
fromIDForCBUUID:deviceID:
fromIdentity
fulfillWithValue:
fulfilledPromiseWithValue:
fullAccountIdentity
fullAccountIdentityWithError:
fullDeviceIdentityContainer
fullDeviceIdentityContainerEncrypter
fullDeviceIdentityContainerUsableForKeyType:
fullDeviceIdentityEncrypter
fullDeviceIdentitySigner
fullIdentity
fullIdentityForKeyIndex:
fullMessageProtectionIdentity
fullMessageProtectionIdentityForDataProtectionClass:
fullServiceIdentitiesSigning
fullServiceIdentityWithFullAccountIdentity:type:error:
gameCenterData
gameCenterModifyForUserName:
gameCenterModifyForUserName:messageContext:
gameCenterPropertiesFromAccountWithUsername:
gameCenterService
gameCenterSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:
gameCenterSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:messageContext:
gameCenterSignInWithUsername:authToken:password:accountInfo:accountStatus:handles:
gameCenterSignOut
gameCenterSignOutWithMessageContext:
gatherLocalDeviceInfoWithCompletionBlock:
gdrCenter
gdrReAuthenticateIfNecessary
generateCSRForUserID:
generateDeliveryReceipt
generateIdentityContainerWithIdentifier:existingLegacyIdentity:existingNGMIdentity:dataProtectionClass:nonLegacyError:error:
generateLinkReport:isCurrentLink:
generatePhoneAuthenticationSignatureOverData:withRequestUUID:
generatePhoneAuthenticationSignatureOverData:withRequestUUID:messageContext:
generation
generationCounter
getAccountKeysAndSignDataForServices:
getActiveParticipants:pushTokenForParticipants:isLightweightParticipant:
getAdditionalAllocationForAddress:selfAddress:relaySessionID:allocateType:qrReason:previousTime:previousError:previousRelayIP:previousAccessToken:requestSelfAllocation:isSessionIDRemoteDeviceID:withPreferredRemoteInterface:withPreferredLocalInterface:
getAllAllowedEntriesForCategory:
getAllKeyValueDeliveryLocalMaterialSetForGroupID:
getAllocateResponse:groupID:
getAllocation
getAppID
getAttribute:attribute:
getBytes:length:
getCString:maxLength:encoding:
getCallerCert
getCountOfPendingRecipientsAcceptedSessions
getCountOfSessionToAllocations
getDataByKey:
getDeliveryStats
getDeliveryStatsWithMessageContext:
getDependentRegistrations:completionBlock:
getDesiredMaterialSetForEncryptedData
getDonatedAllowedEntriesForCategory:
getEncryptionKeyID
getFromService
getGLClassWithOptions:
getKeychainData:service:account:accessGroup:error:
getKeysForServiceTypeName:completion:
getLightweightStatusDictForGroup:
getLinkInformationForDevice:completionHandler:
getLocalDeviceInfoWithCompletion:
getLocalIncomingPowerAssertion:queue:
getLocalParticipantIDForRelaySessionID:
getMembersForGroup:
getMostRecentIDSRegistrationReason
getOptInState
getOrCreateMessageStoreForDataProtectionClass:
getPNRReasonForUserUniqueIdentifier:
getPairedDeviceInfoWithCompletion:
getPairingDevicesWithCompletion:
getPairingRecordsWithCompletion:
getParticipantIDForAlias:salt:
getParticipantIDForAlias:salt:sessionID:
getParticipantIDForAlias:salt:sessionID:messageContext:
getParticipantsForGroup:
getParticipantsInfoForGroup:
getParticipantsWaitingForInitialKeyMaterials:
getParticipantsWaitingForKeyMaterials:
getParticipantsWaitingForStableKeyMaterials:
getProgressUpdateForIdentifier:service:
getProgressUpdateForIdentifier:service:messageContext:
getPushTokenForRelaySessionID:relaySessionID:
getPushTokenFromParticipantID:participantID:
getPushTokensFromParticipantIDs:participantIDs:
getQuickRelayAllocateOptions:
getRegisteredIdentities
getRelaySessionIDForIDSSessionID:pushToken:
getServerProviderForIDSSessionID:
getSessionInfo:relayGroupID:relaySessionID:options:
getSessionInfo:relaySessionID:requestType:options:
getSessionInfoFromDefaults:groupID:
getStableKeyIdentifiersSentToClient
getTransmittableBytes:withPrefixByte:
getURIFromParticipantID:participantID:
getURIFromPushToken:forGroup:
getUUIDBytes:
getValidatePeerResult:uuid:completionBlock:
givenName
globalLinkErrorToSessionEndReason:
gossipPolicy
gossipRecipients
gossipSTHPayloadForDestinations:forServiceIdentifier:fromID:
groupContext
groupContext:didCacheGroup:
groupContext:didCreateGroup:
groupContext:didReceiveDecryptionFailureForGroup:
groupContext:didUpdateGroup:withNewGroup:
groupContext:fetchGroupWithID:completion:
groupContext:upsertGroupWithInfo:previousGroup:completion:
groupContextController
groupContextDidReceiveRegistrationIdentityUpdate:
groupContextForProtectionSpace:withCompletion:
groupCrypto
groupCryptoMinVersionNumber
groupData
groupFromPublicDataRepresentation:completion:
groupFromPublicDataRepresentation:inContext:completion:
groupIDToCapabilityToParticipantPushTokens
groupIDToDesiredMaterialSet
groupIdentifer
groupMasterKeyCollectionToBroadcastForDestinationURI:
groupMemberCount
groupMemberPushTokens
groupMembers
groupName
groupPayload
groupServer
groupServerElectionStore
groupSessionDidTerminate:
groupSessionEnded:withReason:error:
groupSessionGroupIDs
groupSessionKeyValueDeliveryProviderCollaboratorForXPCDaemon:
groupSessionState
groupShareReceived:withGUID:forTopic:toIdentifier:fromID:context:
groupStatusNotificationController
groups
guid
hadStandalonePreferences
handleAVConferenceError:
handleAllocateRequestFailureForDevice:requestID:errorCode:
handleCellularRATChange
handleFailureInFunction:file:lineNumber:description:
handleFailureInMethod:object:file:lineNumber:description:
handleGroupSessionKeyValues:
handleIPPayload:bytesLength:source:destination:upperProtocol:forDeviceConnectionInfo:flush:callerShouldStop:
handleInFirewallAllowList:
handleIncomingPacket:fromDeviceToken:
handleIncomingSMSForResponse:
handleIncomingUpdate:onActivity:completion:
handleKVSUpdate:
handleMessageToCoalesce:forTopic:sendMode:
handleNetworkAddressChanges:hasIPv6AddressChange:
handleOTRNegotiationComplete:
handleOTRNegotiationTimeout:
handleRateLimitingResponseForTopic:ttr:
handleReceivedIncomingMessageData:identifier:context:
handleRegistrationSMSDeliveryFailed
handleRegistrationSMSDeliveryFailedWithShouldBypassRetry:
handleRegistrationUpdateForHash:localURI:remoteURI:service:guid:forceUpdate:
handleResponseDictionary:
handleResponseHeaders:
handleSIMInserted
handleSIMRemoved
handleTransparencySignatureResponse:error:
handleUtunChannelRead:limit:
handleUtunChannelWrite:source:destination:upperProtocol:bytes:bytesLen:
handler:didReceiveMessage:forTopic:fromID:messageContext:
handler:didReceiveMessage:forUnknownTopic:messageContext:
handler:flushCacheForURIs:
handler:isConnectedChanged:
handler:profile:deviceUpdated:service:
handler:profileHandlesUpdated:status:allowGDR:
handler:pushTokenChanged:
handler:receivedNoStorageResponseForTopic:messageContext:
handler:receivedOfflineMessagePendingForTopic:messageContext:
handler:reloadBag:
handler:requestedPromptThroughPushWithTitle:message:defaultButton:defaultUrl:alternateButton:alternateUrl:
handler:requestedSysdiagnoseWithTapToRadarPushPayload:
handler:reregisterUserID:style:service:
handlers
handlesFromFamilyMember:
hardDeregister
hardDeregisterWithMessageContext:
hasAcceptedSMSRequest
hasActionForTarget:
hasActiveSMSAccount
hasActiveSubscription
hasAliasURI:
hasAllEncryptionKeys
hasAllPublicKeys
hasAnyEntitlements
hasBeenExpiredForAtLeast:
hasBeenProvisioned
hasCachedMasterKeyIdentifier:
hasCachedStableKeyIdentifier:
hasClientReceivedMasterKeyIdentifier:
hasClientReceivedStableKeyIdentifier:
hasDependentRegistrationWithURI:token:
hasDeviceSignature
hasEntitlementForPushReplay
hasEverRegistered
hasForcedReRegistered
hasHardDeregistered
hasKeyIndex
hasKtLoggableData
hasKtVersion
hasMessagableOTRSessionForToken:
hasMetadata
hasMoreData
hasNgmPublicIdentity
hasNgmVersion
hasNotifiedSuccess
hasPeerTokensForURI:fromURI:service:
hasPeerTokensForURIs:fromURI:service:
hasPerformedMigration
hasPreferWiFiRequest
hasPrefix:
hasProductName
hasProperty:forURI:pushToken:fromURI:service:
hasPublicIdentity
hasPublicKeyForURI:pushToken:fromURI:service:
hasPushToken
hasQueryResultsForURI:fromURI:service:
hasReceivedAPSDAck
hasRegisteredContainer
hasRequiredKeys:
hasSentinel
hasService:forAnyOfEntitlements:
hasService:forEntitlement:
hasServiceIdentifier
hasSignature
hasSpaceForAggregateMessage:
hasSpaceForCloudMessagesWithPriority:dataProtectionClass:
hasSpaceForMessagesWithDataProtectionClass:
hasSpaceForMessagesWithPriority:dataProtectionClass:
hasSpaceForMessagesWithPriority:dataProtectionClass:messageType:
hasStatus
hasSuffix:
hasTimestamp
hasTransparencyVersion
hasUnregisteredContainer
hasUnregisteredIdentity
hasUnregisteredKTData
hasValidStatusForURI:fromURI:fromService:
hasVettedAliasURI:
hash
hashForString:
hasiCloudAccount
havePreviouslyGossipedToURI:
headerDataSize
headerOverhead
headersBySigningData:serverTimestamp:error:
healSelfForApplication:withHealableErrors:withCompletion:
healableState
healthDebug
heartbeat
helloMessage
highPriority
highPriorityConnectionSendingSet
holdCommitBlock:andDecryptedData:withEncryptedAttributes:forKey:
homeKitGetAdminAccessTokensWithServiceUserID:accessoryID:pairingToken:
homeKitGetAdminAccessTokensWithServiceUserID:accessoryID:pairingToken:messageContext:
homeKitGetConsentTokensWithServiceUserID:accessoryIDs:adminID:
homeKitGetConsentTokensWithServiceUserID:accessoryIDs:adminID:messageContext:
homeKitGetServiceUserIDs
homeKitGetServiceUserIDsWithMessageContext:
homeKitGetUserAccessTokensWithServiceUserID:userID:userHandle:accessoryRequests:
homeKitGetUserAccessTokensWithServiceUserID:userID:userHandle:accessoryRequests:messageContext:
homeKitPayload
homeKitRefreshUserAccessTokensWithServiceUserID:userID:accessoryRequests:
homeKitRefreshUserAccessTokensWithServiceUserID:userID:accessoryRequests:messageContext:
homeNumberSecondsUntilExpiration
homePlmn
host
hostState
hour
httpMessageDelivery
iCloud
iCloudAccountDoesMatchAccountForIdentifier:
iCloudBasedService
iCloudIdentities
iCloudModifyForUserName:
iCloudModifyForUserName:messageContext:
iCloudModifyForUsername:
iCloudService
iCloudSignInHackWithUserName:password:
iCloudSignInHackWithUserName:password:messageContext:
iCloudSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:
iCloudSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:messageContext:
iCloudSignInWithUsername:authToken:password:accountInfo:accountStatus:handles:
iCloudSignOut
iCloudSignOutHack
iCloudSignOutHackWithMessageContext:
iCloudSignOutWithMessageContext:
iCloudSystemAccountWithCompletion:
iCloudSystemAccountWithError:
iCloudURIs
iCloudUpdateForUserName:accountInfo:
iCloudUpdateForUserName:accountInfo:messageContext:
iCloudUpdateForUsername:accountInfo:
iMessageReportSpamCheckUnknownResponseForRequestID:status:abusive:delay:withError:
iMessageSpam
iMessageSupported
iTunesService
iTunesSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:
iTunesSignInWithUserName:authToken:password:accountInfo:accountStatus:handles:messageContext:
iTunesSignInWithUsername:authToken:password:accountInfo:accountStatus:handles:
iTunesSignOut
iTunesSignOutWithMessageContext:
iTunesSystemAccountWithCompletion:
iTunesSystemAccountWithError:
iconAtPath:
iconForApplicationIdentifier:
idInfoResultForURIs:service:fromURI:infoType:infoOptions:idStatusUpdates:
idStatusQueryController
idWithAccount:service:name:
identifier
identifierForFullCluster:
identifyPhoneNumberForRequestor:queue:
identities
identity
identityClassA
identityClassC
identityClassD
identityContainerDeserializationError
identityData
identityDataForToken:uri:service:error:
identityDataSource
identityForDevice
identityForToken:uri:service:error:
identityPair
identityPrivateKey
identityPublicKey
identityServiceTypeName
identityServicesSupported
identityToRegisterError
identityWithAccess:usageIdentifier:error:
identityWithData:error:
identityWithDataProtectionClass:error:
identityWithDataRepresentation:error:
identityWithError:
identityWithIdentityData:prekeyData:error:
identityWithLegacyFullIdentity:ngmFullDeviceIdentity:ngmVersion:error:
idsDaemon
idsDeviceConnectionUUID
idsDeviceIdentifier
idsNRDeviceBridge
idsNRPluginManager
idsPriority
idsServerBag
idsUserID
ids_secureUnarchiveObjectOfClass:withData:
ignoreMaxRetryCount
imDataProtectionClassFromDataProtectionClass:
impactedServices
impactedServicesForService:withCompletion:
inFlightHeartbeatBlock
inFlightMessageCount
inFlightMessageCountLowWaterMark
inFlightMessages
inFlightResetBlock
inFlightSMSTimeoutBlock
incomingAccountSyncMessage:
incomingAccountSyncMessage:messageContext:
incomingDataFragments
incomingEncryptionTableBySSRC
incomingEventWithTimestamp:duration:processTime:compressionTime:kernelTime:bytes:
incomingFilePath
incomingInvitation:withGUID:forTopic:toIdentifier:fromID:context:
incomingInvitationUpdate:withGUID:forTopic:toIdentifier:fromID:context:
incomingMessagesUpToLimit:messageTransportType:success:
incomingStorageRequestForTopic:primary:messageContext:
incomingSyncMessage:
incrementMessageCount
incrementSendCountForDestination:
index
indexOfObject:
indexOfObjectIdenticalTo:
indexesOfObjectsPassingTest:
individualPeerMessages
inferredExternalIP
inflightServerStorageStateMachineForTopic:
infoAttribute
infoForIDs:fromIdentity:fromURI:fromService:infoType:infoOptions:lightQuery:allowQuery:completion:
infos
init
init:
initAdHocAccountWithLoginID:service:uniqueID:accountType:accountConfig:primaryAccount:
initForReadingFromData:error:
initForTesting
initOnDiskCacheWithContainerURL:Queue:
initQRStreamInfo:subscribedStreams:generationCounter:maxConcurrentStreams:
initRequiringSecureCoding:
initWithAccount:destinations:options:
initWithAccount:destinations:options:availabilityCheck:
initWithAccount:service:name:
initWithAccountController:peerIDManager:negativeRegistrationUpdateCache:registrationKeyManager:
initWithAccountController:serviceController:passwordManager:registrationConductor:deviceSupport:registrationControl:registrationController:userStore:
initWithAccountController:serviceController:restrictions:registrationController:
initWithAccountController:systemAccountAdapter:userDefaults:
initWithAccountIdentity:dataSource:queue:
initWithAccountIdentity:paricipants:sharedApplicationData:
initWithAccountKey:deviceKey:
initWithAccountKey:serverLoggableDatas:
initWithAccountType:serviceIdentifier:doesExist:isEnabled:isUserDisabled:isiCloudSignedIn:doesMatchiCloudAccount:isiTunesSignedIn:registrationError:registrationErrorReason:registrationStatus:accountRegistrationStatus:hasEverRegistered:lastRegistrationFailureError:timeIntervalSinceLastRegistrationFailure:timeIntervalSinceLastRegistrationSuccess:accountSecurityLevel:areAllAliasesSelected:areAllSelectedAliasesRegistered:numberOfSelected:numberOfVetted:numberOfUnselectReasonUnknown:numberOfUnselectReasonAlertDenial:numberOfUnselectReasonClientCall:numberOfUnselectReasonBadAlias:numberOfUnselectReasonUpdateInfo:isProdEnvironment:
initWithAddressPair:protocol:
initWithApplication:
initWithApplication:registrationData:
initWithArray:
initWithArray:copyItems:
initWithAssociationID:sharingState:lastUpdatedDate:
initWithBag:
initWithBase64EncodedString:options:
initWithBlocks:qraAWDBlock:qraCONBlock:qraDISBlock:
initWithBroadcastBlock:needsClientAck:messageUUID:priority:senderID:sequenceNumber:
initWithBroadcastQueue:
initWithBundleID:
initWithBundleIdentifier:
initWithBytes:length:
initWithBytes:length:encoding:
initWithBytes:length:loggingPrefixString:
initWithBytesBuffer:bufferSize:metadata:metadataSize:
initWithBytesNoCopy:length:deallocator:
initWithBytesNoCopy:length:freeWhenDone:
initWithCBUUID:pairingType:
initWithCBUUID:publicIdentityDataClassA:classC:classD:
initWithCTPNR:preflightStackStore:
initWithCTPNR:preflightStackStore:HTTPDelivery:pushHandler:lockdownManager:systemMonitor:arbiter:systemAccountAdapter:
initWithCache:accountController:
initWithCache:sessionID:
initWithCalendarIdentifier:
initWithCapabilitiesMap:
initWithCapacity:
initWithCapacity:queue:block:
initWithCertifiedDeliveryContext:
initWithCertifiedDeliveryContext:queryHash:
initWithClientData:
initWithCoder:
initWithConfiguration:
initWithConnection:clientProcessName:UTunDeliveryController:duetInterface:
initWithConnection:protocol:alreadyConfigured:forceSecureCoding:
initWithConnectionID:protocol:isCloudEnabled:
initWithContainer:serverBag:kvStore:queue:
initWithContentsOfFile:
initWithConversationGroup:deviceIdentity:participants:
initWithCorrectFramesSinceLastCorruption:correctRawBytesSinceLastCorruption:discardedRawBytes:recoveryTimeInMs:linkType:
initWithData:
initWithData:encoding:
initWithData:encryptedAttributes:withCommitState:
initWithData:encryption:capability:
initWithData:encryptionType:payloadMetadata:
initWithData:identifier:serviceName:accountUniqueID:options:
initWithDataProtectionClass:
initWithDataProtectionClass:filename:
initWithDataRepresentation:
initWithDataRepresentation:error:
initWithDatabase:
initWithDelegate:
initWithDelegate:dataSource:
initWithDelegate:dataSource:dualMessageDelivery:networkChangeNotifier:pushHandler:
initWithDelegate:forGroupID:sessionID:metricsCollector:
initWithDelegate:pairedDevice:
initWithDelegate:queue:
initWithDeliveryController:userDefaults:idsServerBag:
initWithDestination:
initWithDeviceData:deviceMetadata:recordID:
initWithDeviceIdentifier:
initWithDeviceIdentifier:delegate:
initWithDeviceIdentifier:delegate:queue:
initWithDeviceIdentifier:delegate:startMonitor:
initWithDeviceIdentifier:portString:dataProtectionClass:
initWithDeviceIdentityContainerEncrypter:messageHashChecker:
initWithDeviceName:privateDeviceData:
initWithDeviceUniqueID:cbuuid:
initWithDeviceUniqueID:cbuuid:receiveHandler:
initWithDictionary:
initWithDictionary:copyItems:
initWithDictionary:service:uniqueID:
initWithDictionary:serviceName:isInitiator:uniqueID:accountID:destinations:
initWithDictionary:sharedState:messenger:
initWithDictionaryRepresentation:
initWithDomain:code:userInfo:
initWithDuration:result:hasRecipientAccepted:payloadSize:topic:service:
initWithEligibleServiceIdentifiers:signatures:
initWithEncryptedBlobData:type:requireSignature:
initWithEncryptedData:type:forPublicIdentity:forParticipantID:
initWithEncryptedResult:dataLength:fileCleanupBlock:
initWithEncryptionContext:encryptionKeySize:
initWithEncryptionController:
initWithEncryptionController:transferServicesController:
initWithEncryptionType:
initWithEncryptionType:usedLastResortCache:usedCachedData:
initWithEndpoint:fullDeviceIdentityContainerEncrypter:replayCommitter:forceLegacyPK:
initWithEndpoint:fullDeviceIdentitySigner:keyType:keyDiversifier:
initWithEndpoints:keyTransparencyContext:
initWithEntitlements:
initWithError:
initWithErrorCode:timeIntervalSinceAuthenticationParameterRequest:
initWithErrorContainer:missingIdentity:missingPrekey:
initWithFamilyRequest:
initWithFeatureID:scopeID:expiryEpoch:allowedServices:
initWithFilePath:
initWithFilename:
initWithFirst:second:
initWithFlags:options:timeout:wifiTimeout:completionBlock:
initWithFromServerStorage:certifiedDeliveryContext:identifier:
initWithGUID:service:certifiedDeliveryVersion:certifiedDeliveryRTS:senderToken:
initWithGUID:service:certifiedDeliveryVersion:certifiedDeliveryRTS:senderToken:failureReason:failureReasonMessage:
initWithGUID:service:certifiedDeliveryVersion:certifiedDeliveryRTS:senderToken:localURI:remoteURI:
initWithGUID:service:certifiedDeliveryVersion:certifiedDeliveryRTS:senderToken:localURI:remoteURI:replayKey:
initWithGUID:service:messageDelivery:completionActivity:coalesceQueueManager:
initWithGossipPolicy:transparencyVerifier:gossipEnabledServices:
initWithGossipSpecification:
initWithGroupInfo:groupID:cypher:
initWithGroupUUID:isInitiator:participantIdentifier:participantDestinationID:participantUpdateType:participantUpdateSubtype:fromServer:serverDate:participantData:clientContextData:members:participantIDs:relaySessionID:
initWithGroupUUID:participantIdentifier:isKnown:participantURI:pushToken:
initWithGuid:
initWithGuid:endedReason:genericError:gameKitError:conferenceMiscError:callDuration:isNetworkEnabled:isNetworkActive:isNetworkReachable:networkCheckResult:dataRate:gksError:connectDuration:remoteNetworkConnection:localNetworkConnection:connectionType:usesRelay:currentNATType:remoteNATType:relayConnectDuration:isInitiator:linkQuality:gksReturnCode:
initWithGuid:numberOfRecipients:
initWithGuid:numberOfRecipients:remoteSessionEndReason:
initWithGuid:protocolVersionNumber:serviceName:clientType:
initWithGuid:protocolVersionNumber:serviceName:clientType:isQREnabled:isUsingQRDirectly:isInitiator:isScreenSharingSessionType:isWithDefaultPairedDevice:transportType:linkType:linkProtocol:endedReason:destinationType:durationOfSession:durationToConnect:isNetworkEnabled:isNetworkActive:isNetworkReachable:isWifiInterfaceDisallowed:isCellularInterfaceDisallowed:
initWithGuid:registrationError:validationDuration:numberOfSMSSent:
initWithGuid:smsRoundTripDuration:
initWithGuid:success:connectionType:resultCode:registrationError:genericError:URLError:POSIXError:
initWithGuid:success:connectionType:resultCode:registrationError:isPhoneUser:isDSUser:genericError:URLError:POSIXError:
initWithGuid:success:connectionType:resultCode:registrationType:genericError:URLError:POSIXError:
initWithGuid:success:connectionType:resultCode:registrationType:isHeartbeatRegister:heartbeatDelay:genericError:URLError:POSIXError:
initWithHighPriority:
initWithIMSI:PLMN:validationMechanisms:
initWithIdentifier:
initWithIdentifier:btUUID:uniqueID:shouldUseIPsecLink:isNearby:isClassCConnected:
initWithIdentifier:dataProtectionClass:keychainWrapper:systemMonitor:
initWithIdentifier:dataProtectionClass:keychainWrapper:systemMonitor:fileDirectory:
initWithIdentifier:initialMembershipURIs:automaticResetBlock:queue:
initWithIdentifier:initialMembershipURIs:automaticResetInterval:automaticResetBlock:queue:
initWithIdentifier:keychainWrapper:systemMonitor:
initWithIdentifier:queue:
initWithIdentifier:socketPriority:btUUID:uniqueID:incomingServiceMap:outgoingServiceMap:isCloudEnabled:shouldUseIPsecLink:
initWithIdentifier:timeout:
initWithIdentifier:versionNumber:decodableClasses:dataProtectionClass:mergePolicy:migrationBlock:
initWithIdentifier:versionNumber:decodableClasses:mergePolicy:writeCoalescingDelay:writeCoalescingLeeway:persister:migrationBlock:allowBackup:
initWithIdentifier:versionNumber:decodableClasses:migrationBlock:
initWithIdentifier:versionNumber:decodableClasses:persister:migrationBlock:
initWithIdentifier:versionNumber:decodableClasses:persister:migrationBlock:allowBackup:
initWithIdentityData:
initWithIdentityDataSource:
initWithIdentityDataSource:transparencyDaemon:
initWithInactiveTime:linkType:priorLinkType:
initWithIndex:
initWithIndex:groupID:participantID:
initWithInfo:uris:service:maxSize:
initWithInput:initialValue:
initWithKMs:type:forPublicIdentity:forParticipantID:
initWithKeyMaterial:keySalt:keyIndex:groupID:generationCounter:participantID:
initWithKeyMaterial:keySalt:keyIndex:groupID:participantID:
initWithKeyOptions:valueOptions:capacity:
initWithKeyTransparencyVersion:cloudKitSuccess:cloudKitErrorDomain:cloudKitErrorCode:cloudKitUnderlyingErrorDomain:cloudKitUnderlyingErrorCode:cloudKitOperationTimeInterval:accountKeySuccess:accountKeyErrorDomain:accountKeyErrorCode:accountKeyUnderlyingErrorDomain:accountKeyUnderlyingErrorCode:accountKeyOperationTimeInterval:
initWithKeyTransparencyVersion:cloudKitSuccess:cloudKitErrorDomain:cloudKitErrorCode:cloudKitUnderlyingErrorDomain:cloudKitUnderlyingErrorCode:cloudKitOperationTimeInterval:accountKeySuccess:accountKeyErrorDomain:accountKeyErrorCode:accountKeyUnderlyingErrorDomain:accountKeyUnderlyingErrorCode:accountKeyOperationTimeInterval:numberOfTotalDevices:numberOfCandidateDevices:numberOfMatchesFromCloudKit:numberOfMatchesFromAccountKey:
initWithKeyTransparencyVersion:kvsSuccess:kvsErrorDomain:kvsErrorCode:kvsSyncTimeInterval:kvsUnderlyingErrorDomain:kvsUnderlyingErrorCode:
initWithKeyType:keyDiversifier:service:serviceController:fullDeviceIdentitySigner:
initWithKeychainElectionStore:cloudKitElectionStore:groupServerElectionStore:
initWithKeychainWrapper:
initWithKeychainWrapper:uriSuggester:
initWithKeysToFetch:
initWithLabelID:
initWithLabelID:phoneBookNumber:
initWithLabelID:phoneBookNumber:isDefaultUser:countryCode:networkCode:
initWithLimit:timeLimit:
initWithLocalAddress:remoteAddress:
initWithLocalFullIdentity:remotePublicIdentity:
initWithLocaleIdentifier:
initWithLoginID:service:uniqueID:accountType:accountConfig:
initWithMMCSUploader:
initWithMPIdentityIdentifier:
initWithMachServiceName:
initWithMasterKeyMaterials:membershipURIs:
initWithMessage:data:protobuf:fromID:toDestinations:accountGUID:useDictAsTopLevel:dataToEncrypt:encryptPayload:compressPayload:wantsResponse:expirationDate:enforceRemoteTimeouts:command:wantsDeliveryStatus:deliveryStatusContext:messageUUID:priority:guid:alternateGUID:identifier:forcedLocal:peerResponseIdentifier:expectsPeerResponse:wantsAppAck:fireAndForget:nonWaking:nonCloudWaking:storedSize:duetIdentifiersOverride:bypassDuet:mainAccountGuid:localDestinationDeviceUUID:enqueuedDate:messageType:alwaysSkipSelf:pushPriority:queueOneIdentifier:liveMessageDelivery:requireBluetooth:requireLocalWiFi:sent:wantsProgress:ignoreMaxRetryCount:wantsCertifiedDelivery:originalTimestamp:wantsFirewallDonation:sendMode:
initWithMessage:fromID:topic:guid:isLocal:
initWithMessage:resumeResourceTransfers:receiverError:
initWithMessage:subsystem:sendBlock:
initWithMessageDelivery:
initWithMessageDelivery:passwordManager:
initWithMessageDelivery:pushHandler:keyTransparencyVerifier:
initWithNRDeviceManager:pairedDeviceRepository:
initWithName:
initWithName:address:andTestTransport:
initWithNotificationCenter:serverBag:
initWithObject:key:
initWithObjects:
initWithObjectsAndKeys:
initWithOriginPersister:destinationPersister:
initWithOriginPersister:destinationPersister:userDefaults:
initWithPNRReason:mechanism:
initWithPacketBuffer:metadata:metadataSize:
initWithPairedDevice:capabilityFlags:
initWithPairedDevice:deviceInfoPayload:
initWithPairedDevice:deviceUniqueID:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:privateData:
initWithPairedDevice:iCloudURIs:pushToken:
initWithPairedDevice:isActive:
initWithPairedDevice:pairingType:
initWithPairedDevice:supportIPsec:
initWithPairingManager:
initWithPairingManager:serviceController:accountController:pushHandler:userDefaults:remoteCredential:
initWithParent:userInfo:
initWithPasswordManager:
initWithPath:
initWithPath:storeName:dataProtectionClass:
initWithPayload:command:
initWithPeerIDManager:
initWithPeerIDManager:IDStatusQueryController:
initWithPeerIDManager:accountController:
initWithPeerIDManager:fullDeviceIdentityContainerEncrypter:rateLimiter:replayCommitter:publicIdentityCache:avoidMainQueue:
initWithPeerIDManager:fullDeviceIdentitySigner:rateLimiter:publicIdentityCache:avoidMainQueue:
initWithPeerIDManager:registrationKeyManager:OTRController:publicKeyStorage:accountController:serviceController:queueManager:failedTokenCache:
initWithPeerMessage:service:fromIdentity:maxSize:
initWithPersister:
initWithPhoneAuthenticationCertificate:
initWithPhoneUser:
initWithPhoneUser:authenticationCertificate:
initWithPhoneUser:expirationDate:finishedRegistration:
initWithPipe:useSkywalkChannel:withDeviceUniqueID:cbuuid:
initWithPipe:withDeviceUniqueID:cbuuid:
initWithPolicy:serviceToVerifier:keyManager:store:registrationDataSource:internalMetricLogger:productionMetricLogger:accountKeyManager:serviceToKTOptInManager:
initWithPolicyBlock:
initWithPreferedType:
initWithPrefixedURI:
initWithPresenceIdentifier:
initWithProperties:
initWithProperties:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:
initWithProtectionSpace:
initWithProtobufData:type:isResponse:
initWithPublicKeyStorage:accountController:fullDeviceIdentityContainerEncrypter:rateLimiter:forceLegacy:
initWithPublicKeyStorage:peerIDManager:accountController:registrationKeyManager:rateLimiter:OTRController:serviceController:avoidMainQueue:forceLegacy:
initWithPublicLegacyIdentityData:publicNGMIdentityData:publicNGMPrekeyData:NGMVersion:
initWithPublicPreKeyData:wrapMode:creationDate:
initWithPushHandler:lockdownManager:heartbeatCenter:ftNetworkSupport:sendMessageHandlerBlock:messageResponseHandlerBlock:
initWithPushHandler:queryHandler:persistentMap:keyTransparencyVerifier:userDefaults:
initWithPushHandler:validationMessageSendBlock:
initWithPushPayload:
initWithPushToken:loggableData:signedData:
initWithPushToken:verificationState:
initWithQuery:
initWithQueryCache:
initWithQueryCompletionBlock:queue:
initWithQueue:
initWithQueue:backoffProvider:block:
initWithQueue:block:
initWithQueue:connection:
initWithQueue:connection:activityMonitorStateManager:
initWithQueue:connection:messageDelivery:pushHandler:
initWithQueue:connection:opportunisticCache:
initWithQueue:connection:transparencyVerifier:
initWithQueue:idsDaemon:serviceController:pairingManager:quickSwitchHelper:accountController:utunController:utunDeliveryController:
initWithQueue:interval:repeats:handlerBlock:
initWithQueue:interval:repeats:userInfo:handlerBlock:
initWithQueue:mechanism:
initWithQueue:messageDelivery:
initWithQueue:persister:registrationKeychainManager:
initWithQueue:syncOntoMain:collaboratorProvider:takingOverAndResumingConnection:
initWithQueue:syncOntoMain:takingOverAndResumingConnection:
initWithQueue:ttlInSeconds:
initWithQueue:userStore:
initWithQueue:userStore:deviceSupport:
initWithQueue:userStore:server:phoneNumberValidator:deviceSupport:
initWithRapportClient:
initWithReadHandler:
initWithReason:guid:service:additionalInformation:
initWithReason:mappedStreamID:serviceName:
initWithRecordName:zoneID:
initWithRecordType:predicate:
initWithRecordType:recordID:
initWithRecordZoneIDs:
initWithRecordZonesToSave:recordZoneIDsToDelete:
initWithRecordsToSave:recordIDsToDelete:
initWithRecoveryTime:
initWithRegistrationKeyManager:messageHashStore:usePairingKey:
initWithRegistrationType:registrationControlStatus:isInterestingRegion:
initWithRegistrationType:serviceIdentifier:wasSuccessful:registrationError:circleStatus:
initWithRequest:
initWithRequestID:
initWithResourceAtPath:metadata:sequenceNumber:streamID:expectsPeerResponse:wantsAppAck:compressPayload:compressed:didWakeHint:peerResponseIdentifier:messageUUID:expiryDate:
initWithResponse:
initWithResponse:cleanupTime:
initWithResponseCode:deviceID:
initWithResponseCode:deviceID:currentAverageRTT:isDeviceBlackedOut:localMessageState:
initWithResponseCode:error:lastCall:
initWithRestoreMonitor:systemMonitor:
initWithResultData:serverKey:signingTimestamp:error:
initWithSMSSignature:
initWithSecOTRSessionRef:
initWithSending:refresh:messaging:resultExpected:preventNewQuery:
initWithSending:refresh:messaging:resultExpected:preventNewQuery:isForced:
initWithSequenceNumber:
initWithSequenceNumber:streamID:expectsPeerResponse:wantsAppAck:compressed:didWakeHint:peerResponseIdentifier:messageUUID:data:expiryDate:
initWithSequenceNumber:streamID:expectsPeerResponse:wantsAppAck:compressed:didWakeHint:peerResponseIdentifier:messageUUID:expiryDate:protobuf:
initWithSequenceNumber:streamID:peerResponseIdentifier:
initWithServerBag:
initWithServerBag:KTAccountKeyByService:
initWithService:accountType:fromStorage:serverTimestamp:localTimeDelta:
initWithService:fromURI:toURI:
initWithService:isFromDefaultPairedDevice:messageSize:linkType:priority:
initWithService:isToDefaultPairedDevice:closeError:socketError:bytesSent:packetsSent:bytesReceived:packetsReceived:
initWithService:isToDefaultPairedDevice:messageSize:linkType:deliveryError:RTT:priority:
initWithService:isToDefaultPairedDevice:messageSize:linkType:priority:
initWithService:isToDefaultPairedDevice:openError:socketError:
initWithService:linkType:wasPrimary:timeTaken:numberProcessed:
initWithService:priority:duration:result:
initWithServiceController:firewallStore:
initWithServiceController:registrationController:systemAccountAdapter:deviceSupport:
initWithServiceDictionary:
initWithServiceIdentifier:
initWithServiceIdentifier:accountKey:URI:
initWithServiceIdentifier:localURI:subscribedURIs:queue:
initWithServiceIdentifier:messageSize:deltaTime:priority:
initWithServiceName:queue:
initWithSessionController:realTimeEncryptionController:broadcaster:
initWithSet:
initWithShouldAllowProxyQueries:peerIDManager:userDefaults:statusDepencencyProvider:
initWithSignatureRequests:
initWithSockAddr:
initWithSocket:queue:delegate:
initWithSocket:queue:delegate:priority:connectionID:linkType:
initWithSocket:queue:delegate:priority:identifier:
initWithStableGroupID:generation:
initWithStableGroupID:groupServerEntry:
initWithStableKeyMaterials:
initWithStandardPolicy:
initWithStartDate:endDate:endpointCount:usedPipeline:usedMMCS:responseCode:
initWithStateProvider:messageDelivery:peerIDManager:accountController:serviceController:pushListener:
initWithStateProvider:messageDelivery:peerIDManager:accountController:serviceController:queue:
initWithStatus:user:authenticationCertificate:
initWithStoreIdentifier:type:
initWithSubActivity:pushToken:serverTimestamp:clientContext:isDeviceOnline:
initWithSuccess:
initWithSuccess:serverProvidedSMT:error:
initWithSuiteName:
initWithSyncedLoggableDatas:uriToServerLoggableDatas:
initWithSystemAccountAdapter:userStore:migrationTracker:queue:
initWithSystemMonitor:keychainWrapper:loadingRateLimiter:identityDataSource:allowPairingIdentities:allowRegenerateRegisteredIdentity:keyPairProvider:ktRegistrationDataManager:
initWithTarget:connection:protocol:forceSecureCoding:offMainThread:
initWithTargetToken:sessionToken:targetPeerID:encryptedData:wantsDeliveryStatus:wantsCertifiedDelivery:ackBlock:completionBlock:
initWithTicket:accountKey:
initWithTimeInterval:
initWithTimeInterval:name:shouldWake:target:selector:userInfo:
initWithTimeInterval:name:shouldWake:target:selector:userInfo:useCurrentRunLoop:
initWithTimeIntervalSince1970:
initWithTimeIntervalSinceNow:
initWithTimer:
initWithTimerBlock:
initWithTimestamp:duration:processTime:compressionTime:kernelTime:bytes:
initWithTimestamp:duration:processTime:compressionTime:sendTime:bytes:
initWithTimestamp:kernelTime:bytes:
initWithTitle:message:
initWithTitle:promptMessage:
initWithToken:
initWithTopLevelService:count:timeSinceStart:
initWithTopic:isPrimary:
initWithTopic:keyManager:
initWithTopic:sendMode:
initWithTransparencyStatus:transparencyBlob:
initWithType:
initWithType:context:
initWithType:eventSubType:duration:resultCode:providerType:transportType:interfaceType:skeEnabled:isInitiator:protocolVersion:retryCount:serviceName:subServiceName:participantCount:
initWithURI:andLastSeenDate:
initWithURI:clientData:KTLoggableData:KTDeviceSignature:mismatchedAccountFlag:ktCapableFlag:pushToken:sessionToken:expireDate:refreshDate:anonymizedSenderID:verifiedBusiness:serializedPublicMessageProtectionIdentity:senderCorrelationIdentifier:queryTimeInterval:serializedNGMDeviceIdentity:serializedNGMDevicePrekey:serializedApplicationPublicKey:familyEndpointData:gameCenterData:
initWithURI:expirationDate:selected:
initWithURI:maskedURI:properties:
initWithURI:status:endpoints:ktData:gameCenterData:
initWithUUID:
initWithUUID:publicPreKeyData:wrapMode:creationDate:
initWithUUIDBytes:
initWithUUIDString:
initWithUnprefixedURI:
initWithUsedLastResortCache:usedCachedData:
initWithUser:
initWithUser:alertType:
initWithUser:credential:
initWithUser:expirationPhase:
initWithUser:phoneSignature:certificateSigningRequest:pushToken:
initWithUser:properties:
initWithUserDefaults:
initWithUserName:DSID:
initWithUserStore:
initWithUserStore:accountController:serviceController:migrationTracker:restrictions:queue:
initWithUserStore:accountController:serviceController:migrationTracker:userDefaults:restrictions:ctAdapter:queue:accountBuilder:
initWithUserStore:ctAdapter:
initWithUserStore:delegate:
initWithUserStore:queue:lockdownManager:systemMonitor:CTAdapter:userConfiguration:registrationController:pairingManager:
initWithUsername:DSID:
initWithValidationMessageSendBlock:
initWithVersion:encrypted:shouldEncrypt:protectionClass:streamID:priority:sequenceNumber:data:
initWithVersion:encrypted:streamID:priority:sequenceNumber:fileXfer:data:
initWithVersionNumber:
initWithWPLinkManager:withIdentifier:
initWithWithFullIdentityDataClassA:classC:classD:
initWithZoneName:ownerName:
initWithiCloudID:appleID:handles:devices:
initialLocalSyncCompletedForServices:
initialLocalSyncCompletedForServices:messageContext:
initialLocalSyncStartedForServices:
initialLocalSyncStartedForServices:messageContext:
initialProcessTime
initialServerTime
initialSyncClientIDs
initialSyncInProgress
initialize
initializeKVS
initializeNewCall
initializePluginWithClass:
initializeWithCompletion:
initiateQuickSwitchToDeviceWithCBUUID:force:completionBlock:
injectFakePacket:
injectFakePacketInBTLink:cbuuid:
inputBytesPerSecond
insertDictionary:forKey:
insertObject:atIndex:
installMethods
instanceID
intValue
integerForKey:
integerValue
interalTestingCollaboratorWithCompletion:
interesting
interestingRegistrationProperties
interface
interfaceAddressWithTransmittedBytes:length:withLocalInterfaceName:
interfaceWithProtocol:
intermediateRootCert
internalMetricLogger
internalMigrationVersionOnDatabase
internalOpenSocketWithDestination:localSA:remoteSA:protocol:trafficClass:completionHandler:
internalStartConnectionWithEndpoint:service:parameters:serviceConnector:completionHandler:
internalTestingCollaboratorForXPCDaemon:
internal_fetchEndpointCacheStateForServiceIdentifier:localURI:remoteURI:completion:
internal_fetchTransparentEndpointsForServiceIdentifier:localURI:remoteURI:verifyAgainstTrustCircle:completion:
internal_fetchVerifierKVSTrustedDevicesWithCompletion:
internal_kickVerificationForServiceIdentifier:localURI:remoteURI:completion:
internal_removeAllKVSTrustedDevices:
intersectSet:
intersectsSet:
invalidate
invalidateAllocation:
invalidateKeyMaterialByKeyIndexes:
invalidateLatestResponse:qrReason:previousError:
invalidateSession:isExpiryPurging:
invalidateTimeoutTimer
invalidationHandler
invisibleAliases
invitationDeclined
invitationManager
invitationRetryCount
inviteDictionaryForCallID:remoteInviteDictionary:nonCellularCandidateTimeout:block:queue:
inviteNeedsDelivery
inviteSentTime
inviteTimeout
inviteTimer
inviteTimerCleared
invocationWithMethodSignature:
ipPreference
isAbsintheV4Enabled
isAccountsFrameworkAvailable
isActivated
isActive
isActivityMonitorSupported
isAdHocAccount
isAdvertising
isAllowed:category:
isAllowed:category:isDonated:
isAltAccountPairing
isAlwaysConnected
isAlwaysPairAsTinker
isAnySIMInserted
isAnySIMUsable
isAsleep
isAudioPaused
isAvailable
isBAACertDisabled
isBeingHandedOff
isBeingRemoved
isBlackholed
isBuddyShowing
isBuildingContext
isBuildingContextForSubsystem:
isC2KEquipment
isCDMA
isCarrierInstall
isClassCConnected
isCloudConnected
isCloudEnabled
isCommandExcluded:forService:
isConnected
isConnectedToDeviceID:
isControlChannel
isCountingDown
isCurrentDevicePairedOrPairing
isCurrentDeviceTinkerConfiguredWatch
isDebugPiscoLoggingEnabled
isDefaultPairedDevice
isDefaultPairedDeviceFromID:accountUniqueID:serviceName:
isDefaultPairedDevicePairedLocally
isDefaultPairedDevicePairedRemotely
isDefaultPairedDeviceStartingToEncrypt
isDefaultUser
isDefaultVoiceSIM
isDeviceAccountStateKeyTransparencyEligible
isDeviceAuthenticated
isDeviceBlackedOut
isDeviceDiscovered:
isDeviceInManualPhoneSelectionMode
isDeviceRegistered
isDeviceScoringEnabled
isDevicesIdentifierEqualTo:
isDirectMsgChannel
isDisabled
isDone
isDoneSending
isDroppingMadridMessages
isEnabled
isEnabledAccount:
isEqual:
isEqualToAppleUser:
isEqualToAttributedString:
isEqualToCloudKitKeyTransparencyDeviceRecord:
isEqualToContext:
isEqualToData:
isEqualToDate:
isEqualToDictionary:
isEqualToIgnoringCase:
isEqualToKeyTransparencyEntry:
isEqualToKeyTransparencyIndex:
isEqualToKeyTransparencyVerificationState:
isEqualToNumber:
isEqualToPeerIDValue:
isEqualToPhoneUser:
isEqualToSet:
isEqualToSockAddrWrapperPair:
isEqualToString:
isEqualToTemporaryPhoneUser:
isEqualToURI:
isEqualToUser:
isEqualToUserProperties:
isEqualToWrapper:
isExpired
isFakingEveryUnlockAsFirstUnlock
isFastUserSwitched
isFinalMessage
isFinished
isFirewallEnabled
isFirewallEnabledForService:
isFirewallOn
isFirewallOnForService:
isForced
isForcefulECCEnabled
isForcefulLegacyEnabled
isForcingAttachmentMessage
isForcingOnePerFanout
isGeneratedLocally
isGreenTea
isIDSMessage
isIdentical:
isIdenticalToUser:
isIdle
isInCloudCircleWithError:
isInDebilitatedMode
isInMultiUserMode
isInServerBackoffMode
isInUPlusOneMode
isInitializedForScoring
isInitializedForSigning
isInitiator
isInteractionNotAllowedError:
isInternal
isInternalInstall
isInvalid
isInvalidated
isInvitationService
isIssuingDependentCheck
isItemNotFoundError:
isJoinAllocation
isJunked
isKeyTransparencyAccountKeyCircleDisabled
isKeyTransparencyAccountKeyCircleEnabled
isKeyTransparencyAggressiveVerificationScheduleEnabled
isKeyTransparencyAnalyticsEnabled
isKeyTransparencyCloudKitCircleDisabled
isKeyTransparencyCloudKitCircleEnabled
isKeyTransparencyDisabled
isKeyTransparencyEnabled
isKeyTransparencyEnabledForServiceIdentifier:
isKeyTransparencyEnabledForServiceType:
isKeyTransparencyPeerVerificationAllowedWithoutEnrollment
isKeyTransparencyRTCAnalyticsEnabled
isKeyTransparencySFAnalyticsEnabled
isKeyTransparencyTrustCircleAllowedWithoutEnrollment
isKeyTransparencyTrustCircleEnabled
isKeyTransparencyUIEnabled
isKeyTransparencyXPCActivityEnabled
isKindOfClass:
isLightweightParticipant
isListeningOnActivity:
isLiveDeliveryWarmUpEnabled
isLoaded
isLoading
isLocalSetUpInProgress
isLocalSetupEnabled
isMMLMessage
isMagnetIndicatingPeerIsAwake
isMemberOfClass:
isMessageFromSelfForFromID:service:
isMigratedKeyPairSignature
isMigratedSignature
isMigrationRequiredForKeychainDictionary:
isMissingAnyPublicKeyForPairedDeviceWithCBUUID:
isMultipleAuthCertCapable
isNearby
isNegotiating
isNetworkInitiated
isNewUPlusOneSession
isNull
isOnTelephonyCall
isOptedInForServiceIdentifier:
isPNRNumber:andPhoneBookNumber:differentEnoughFromSIMIdentifier:toReregisterWithNewNumber:
isPNRSupported
isPaired
isPairing
isParentOfCluster:
isParentOfGroup:
isPeerAlwaysConnected
isPeerForPhoneContinuityLocalMessage:
isPendingFetch
isPhoneNumber:equivalentToExistingPhoneNumber:
isPhoneNumberEmergencyNumber:
isPoweredOn
isPrefightEnabledByServerBag
isPresent
isProductionEnvironment
isPublicKeyDistributed
isQueryRetryForBadSignatureEnabled
isReadyForEncrypting
isRealTime
isRegistered
isRegistering:
isRegistrationActive
isReinitiate
isResponse
isRoaming
isSIMReady
isSMSWarningUp
isScanningOrAdvertising
isScoringSupported
isScreenLit
isScreenSharingSession
isSentToClient
isServerAvailable
isServerBackoffModeActive
isSessionNegotiating:
isSessionStoreAvailableForDataProtectionClass:
isSigningSupported
isSubsetOfSet:
isSupported
isSuspended
isTemporary
isTerminusConnected
isTerminusConnectedOverBluetooth
isTerminusNearby
isTerminusRegistered
isTestRunning
isThreadDataSeparated
isTokenURI
isTraditionalDevicePairedOrPairing
isTraditionalLocalSetupEnabled
isUPlusOne
isURIAvailabeInAllocateResponse:uri:
isUnderDataProtectionLock
isUnderFirstDataProtectionLock
isUnderLock
isUpgradePendingError:
isUsableForSending
isUserDisabled
isUsingAbsintheV3
isUsingAbsintheV4
isUsingBAA
isUsingSecureStorageForClassA
isUsingSecureStorageForClassC
isValidSignature:forMessage:forType:error:
isValidationModeLegacy
isValidationModeShortCircuitingPreflight
isValidationModeUsingPreflight
isVideoPaused
isWebTunnelMessage
isWiFiUsable
isWithDefaultPairedDevice
isWritePushPayloadsToDiskEnabled
isiCloudHSA2
isiCloudSignedIn
isiTunesSignedIn
issueDependentIDQueriesWithCompletionBlock:
issueGetDependentAndGetHandlesRequest
issueGetDependentRequest
issueGetDependentRequestForAccount:
ivarQueue
joinCycleForToken:
joinGroupSession:withOptions:
joinGroupSession:withOptions:messageContext:
joinType
joinWithOptions:
kernelTestEventWithTimestamp:kernelTime:bytes:
keyDiversifier
keyElectionStore
keyForToken:uri:service:
keyIndex
keyIndexAsString:
keyManager
keyMaterial
keyMaterialCacheToGroup:
keyMaterialLength
keyPairSignature
keyRollingTicketWithError:
keyTransparencyAccountKeyFetchMetricDeviceID
keyTransparencyCKContainerExpiryOverride
keyTransparencyCKContainerExpiryTime
keyTransparencyCollaboratorForXPCDaemon:
keyTransparencyCollaboratorWithCompletion:
keyTransparencyContext
keyTransparencyEnrolledURIs
keyTransparencyFirstGossipChance
keyTransparencyMaximumVerificationsPerXPCActivity
keyTransparencyStore
keyTransparencySubsequentGossipChance
keyTransparencyVerifier
keyTransparencyVersionNumberForServiceType:
keyTransparencyVersionNumberToRegisterForServiceType:
keyTransparencyXPCActivityIntervalInSeconds
keyValueDelivery
keyValueDeliveryForSessionID:completionHandler:
keychain
keychainAccessGroupForVersion:
keychainAccountForVersion:
keychainCache
keychainDictionaryWithPairedDevices:
keychainElectionStore
keychainServiceForVersion:
kickAnyUnfinishedSynchronization
kickGetDependentForAccount:
kickGetDependentForAccount:messageContext:
kickMissedTemporaryAlerts
kickProgressBlock
kickProgressBlockForMessageID:
kickRepair
kickRepairForAllRegistrationsSucceeded:
kickVerificationForServiceIdentifier:localURI:remoteURI:completion:
kickiCloudRepair
ktCapable
ktCapableFlag
ktDataForRegistration
ktLoggableData
ktPublicAccountKey
ktRegDataByServiceType
ktRegistrationDataIndex
ktRegistrationDataManager
ktVerifier
ktVersion
language
largestEnquedMessagesAccountUUIDOverThreshold:
largestEnquedMessagesAmountAccountUUID
largestPayloadSizeAccountUUID
lastBagRepairInterval
lastCall
lastCloudConnectedTime
lastConnection
lastCourierAck
lastDestinationReceived
lastDestinationSent
lastDisconnection
lastGDRDate
lastObject
lastPacketTime
lastPathComponent
lastPrKey
lastReceivedMessageTimeForTopic:
lastRegistrationFailureDate
lastRegistrationFailureError
lastRegistrationSuccessDate
lastSeen
lastSelfVerifyDate
lastSendSMSTimer
lastSentAck
lastSentSeq
lastSocketActivityTime
lastStartTime
lastSuccessfulSentTime
lastSuccessfulUpsertDeviceRecord
latestCachedGroupWithStableID:completion:
latestLinkType
latestMessageProtectionFullIdentityForDataProtectionClass:
launchDarwinNotification
launchMachServiceNotification
launchOnDemandServicesForQueuedBroadcastAttempts
launchSim2HostServer
launchWithRequest:context:
leaveGroupSession:options:
leaveGroupSession:participantInfo:options:
leaveGroupSession:participantInfo:options:messageContext:
legacyFullIdentity
legacyPreferencesDomain
legacyPublicIdentity
legacyPublicKeyEncryptData:withEncryptedAttributes:toEndpoint:priority:error:
legacyStorageItemNameForContainerIdentityIdentifier:
legacyUTunBTLinkManagerDefaultPeerCloudConnectivityChanged:
legacyUTunBTLinkManagerDefaultPeerConnectivityChanged:
legacyUTunBTLinkManagerDefaultPeerNearbyChanged:
legacyVersion
length
lengthOfBytesUsingEncoding:
limitDataInDictionary:forService:
link:didAddQREvent:
link:didCellularMTUChange:
link:didCellularNWPathFlagsChanged:
link:didConnectForDeviceUniqueID:cbuuid:
link:didConnectOverCloud:cbuuid:
link:didConnectUnderlyingLink:linkUUID:localAttributes:remoteAttributes:
link:didDefaultUnderlyingLinkChangeSucceeded:currentDefaultLinkID:
link:didDisconnectForDeviceUniqueID:cbuuid:
link:didDisconnectOverCloud:cbuuid:
link:didDisconnectUnderlyingLinkID:linkUUID:reason:
link:didFailToConnectOverCloud:cbuuid:
link:didGetLinkProbingStatus:
link:didMitigateCollision:
link:didRATChange:
link:didReceiveDebugDataForClient:dataType:
link:didReceiveEncryptedDataBlobs:
link:didReceiveEncryptionInformation:
link:didReceiveErrorIndicationWithCode:
link:didReceiveKeyMaterialMessageData:fromParticipantIDs:toParticipantID:
link:didReceiveMappedParticipantsDict:forLinkID:
link:didReceiveMaterialInfo:material:
link:didReceiveMembershipChangedInformation:
link:didReceivePacket:fromDeviceUniqueID:cbuuid:
link:didReceiveParticipantUpdate:status:
link:didReceivePluginDisconnect:
link:didReceivePluginRegistration:pluginName:
link:didReceivePluginUnregistration:pluginName:
link:didReceiveReportEvent:
link:didReceiveRequestToPurgeRegistration:
link:didReceiveSKEData:
link:didReceiveSessionInfo:relayGroupID:relaySessionID:status:
link:didReceiveSessionStateCounter:
link:didReceiveSessionStats:relayGroupID:relaySessionID:success:
link:didReiceiveChildConnectionID:forLinkID:
link:didSoMaskChange:
link:hasSpaceAvailable:deviceUniqueID:cbuuid:
link:hostAwakeDidChange:deviceUniqueID:cbuuid:
linkForCBUUID:
linkID
linkLayerConnected
linkLayerDisconnectTime
linkManager
linkQualityForInterfaceType:
linkScore
linkSuggestion
linkTransactionIDMismatchDetected:
linkType
linkTypeString
linkedAccounts
linkedServiceNames
linkedServicesForService:
listener
listener:shouldAcceptNewConnection:
listenerForLocalObject:
listenerID
listenerWithName:
listeners
listenersByActivity
listening
listeningOnActivities
liveMessageDelivery
liveMigration
loadAliasUserIntentMetadataIfNeeded
loadAndCheckStatus
loadDeviceProperties
loadIdentitiesWithSerializationDidChange:deserializationDidFail:identityGenerated:
loadIdentityContainerWithIdentifier:withLegacyFallback:serializationDidChange:deserializationDidFail:needsEncryptionIdentityRoll:nonLegacyError:error:
loadIsIdentityRegisteredForApplicationKeyIndex:error:
loadKTRegistrationDataForKeyIndex:isRegistered:error:
loadKTRegistrationDatasWithShouldGenerateKTData:
loadLegacyIdentityWithIdentifier:serializationDidChange:error:
loadNumberOfPreflightAttempts
loadNumberOfSuccessfulValidationSends
loadPairedDevices
loadPairedDevicesFromStorage
loadPairingIdentities:
loadServiceDictionaries
loadStoreForDataProtectionClass:
loadStoredAccounts
loadWithCompletion:
loadingRateLimiter
localAccountOnService:
localAccountSetupCompleted
localAddress
localBlob
localCID
localCallInfoData
localCell
localConnectionGUID
localConnectionType
localContext
localDelivery
localDeliveryQueue
localDestinationDeviceUUID
localDevice
localDeviceRecord
localDidJoin
localFullIdentity
localICEData
localIdentitiesFromIdentities:
localKeyMaterial
localMasterKeyCollectionToBroadcastForDestinationURI:
localMaterials
localMessageState
localNATIP
localNATType
localObject
localObjectDiedNotification:
localPairingResponseForRequestID:withError:
localPairingResponseForRequestID:withError:pairedDevices:
localParticipantIDForGroupID:
localPartyID
localPhoneAuthenticationCertificates
localSKEData
localSetUpCompleted
localSetUpStarted
localSetupCompleted
localSetupInProgress
localSetupStarted
localSetupUnpair
localSetupUnpairStart
localURI
localUnauthenticatedFullIdentity
localizedCaseInsensitiveCompare:
localizedCaseInsensitiveContainsString:
localizedStringWithFormat:
lock
lockContinuityPeer:btUUID:
lockedContinuityPeerID:
logAccessWarningForAccount:withService:entitlement:clientEntitlements:logMessage:
logAccessWarningForClientAtIndex:withService:entitlement:logMessage:
logCurrentTransportStatsAndResetTimers
logEncryptionErrorForToken:deviceID:forURI:fromURI:forService:messageData:type:
logEncryptionErrorForToken:deviceID:forURI:fromURI:forService:messageData:type:encrypt:remote:priority:
logFailureInfo
logHardFailureForEventNamed:withAttributes:
logMetric:
logMetric:withName:
logRemoteDecryptionErrorForToken:deviceID:forURI:fromURI:forService:messageData:type:
logResultForEvent:hardFailure:result:
logSoftFailureForEventNamed:withAttributes:
logState
logToRegistration
loggableData
loggableDatas
loggableOverviewForKey:
loggableOverviewForTopic:
logger
loggerWithCategory:
loggingSequenceIncoming
loggingSequenceOutgoing
longLongValue
longValue
lowRAMDevice
mainID
makeObjectsPerformSelector:
manageDesignatedDestinations:relayGroupID:relaySessionID:withType:sessionStateCounter:
manageDesignatedDestinationsWithSessionID:relayGroupID:relaySessionID:destinations:withType:sessionStateCounter:
manageDesignatedMembers:forGroup:sessionID:withType:
manageDesignatedMembers:forGroup:sessionID:withType:messageContext:
manageDesignatedMembers:withType:
manager:cbuuidDidConnect:isAlwaysConnected:
manager:cbuuidDidDisconnect:
manager:cbuuidDidDiscover:
manager:cbuuidDidFailToConnect:withReason:
manager:didPairedDeviceChange:
manager:didPowerStateChange:
manager:linkDidConnect:
manager:linkDidDisconnect:
manateeRetries
manateeRetryCount
manualQueueRemoval
mapArray:onQueue:withBlock:completion:onQueue:
mapArray:withBlock:completion:onQueue:
mapDictionary:onQueue:withBlock:completion:onQueue:
mapDictionary:withBlock:completion:onQueue:
mapMKI:toPushToken:
mapMKIFromMaterial:token:
mappedStreamID
markAllOutgoingMessagesAsUnsentForLocalDestination:
markAsSelectedAlias:
markAsUnselectedAlias:withReason:
markAsUnvettedAlias:
markAsVettedAlias:
markAsWasSelectedAlias:
markGossipForURI:
markInvalid
markLocalDestinationDeviceUUIDForAccounts:deviceUUID:
markOutgoingMessageWithGUID:asSent:
markOutgoingMessagesAsUnsentForDestination:
markOutgoingMessagesAsUnsentIncludingClassD:
markSelfVerifyBecauseOfPeer
marketingNameForModel:
maskedURI
masterKeyIdentifiersReceivedByClient
masterKeyMaterialForGroup:
masterKeyMaterials
matchesIMSI:PLMN:
matchingContactsForURI:
materialDataByID
materialInfoError:
materialType
maxAllowableNumberOfPreflightRequests
maxAllowableNumberOfSuccessfullySentVerifications
maxAllowableNumberOfValidationAttemptsWhileNoneHaveSentSuccessfully
maxAllowedMessageSize
maxCompatibilityVersion
maxConcurrentStreams
maxLargeMessageSize
maxMessageSize
maxQueueSize
maxRecipientMemory
maxRecipientMemoryFromBag
maxRemoteMessagingPayloadSize
maxTimeoutRetries
mechanism
membershipChange
membershipURIs
mergeFrom:
mergeKeychainCacheDataIntoDictionary:forService:
mergeKeychainCacheIntoDictionary:
mergePolicy
messageBody
messageBodyUsingCache
messageCount
messageDeliveredForService:isToDefaultPairedDevice:messageSize:linkType:deliveryError:RTT:priority:
messageDeliveryFactory
messageHashChecker
messageHashStore
messageID
messageIdentifier:alternateCallbackID:forAccount:updatedWithResponseCode:error:lastCall:context:
messageIdentifier:forTopic:toIdentifier:fromIdentifier:hasBeenDeliveredWithContext:
messageMetadataWithEndpoint:ECSuccess:legacySuccess:ECError:legacyError:
messageReceived:withGUID:withPayload:forTopic:toIdentifier:fromID:context:
messageReceivedForService:isFromDefaultPairedDevice:messageSize:linkType:priority:
messageSentForService:isToDefaultPairedDevice:messageSize:linkType:priority:
messageSequenceNumber
messageServerTimestamp
messageState
messageStoreForDataProtectionClass:
messageStoreMigrator
messageStores
messageToSend
messageType
messageUUID
messageWithData:
messageWithHeaderData:data:
messages
messagesGroupContext
messenger
metadata
metadataBlob
metadataSize
metricCollectors
metricReportIdentifier
metricsCollector
midSynchronize
migrateClassA
migrateClassC
migrateClassD
migrateKeychainDictionary:
migrated
migrationBlock
migrationContext
migrationDefaultKey
migrationPromise
migrationTracker
minCompatibilityVersion
minimumIntervalBetweenValidationAttempts
minusSet:
minute
mismatchedAccountFlag
missingPrekey
mmlsFromAggregates:service:sendMode:guid:
mobileCountryCode
mobileNetworkCode
model
modernIdentity
modernIncomingFilePath
moveItemAtPath:toPath:error:
multiQueue
multiwaySupported
mutableBytes
mutableCopy
muted
name
nameForContactMatchingURI:
nanoRegistryPluginManager
needsMigration
needsProvisioning
needsPublicDataUpdatedForKeyIndex:
needsPublicDataUpdatedForKeyIndex:ktRegistrationKeyIndex:
needsRenewal
needsToCheckPhoneNumberState
negotiationCount
networkChangeNotifier
networkCheckOverrideBehavior
networkCode
networkPlmn
networkStateChangedForLogTransportHint:
networkingIsAvailable:
newDetectorWithName:stallDetectedBlock:stallWarningBlock:
newDeviceIdentifierWithBluetoothUUID:
newPg
newRemoteCredential
newSendMessageContext
newSocketWithIPVersion:wantsAWDL:wantsWiFi:wantsCellular:
nextAvailableLocalCID
nextByte
nextComponent
nextLocalMasterKeyMaterial
nextMessage
nextRegistrationDate
nextSocketPairMessageNotOnServices:
ngmFullDeviceIdentity
ngmPublicDeviceIdentity
ngmPublicIdentity
ngmVersion
ngmVersionFromDataRepresentation:
nonBluetoothAvailableForBundleId:
nonCloudWaking
nonRetainingArray
nonStandardMessageHeadersForOutgoingPush
nonWaking
nonWifiFaceTimeAvailable
normalizedURIStrings
noteBlockedMessageFromId:service:
noteClientReceiptOfMasterKeyIdentifier:
noteClientReceiptOfStableKeyIdentifier:
noteIncomingID:fromService:
noteIncomingLocalMessageForService:
noteIncomingMessageForService:
noteItem:
noteKeyGenerationForMetric
noteMessageReceivedForService:accountType:fromStorage:serverTimestamp:localTimeDelta:
noteOutgoingFallbackMessageForService:serviceType:requestor:
noteOutgoingMessageForService:serviceType:requestor:
noteOutgoingServerMessageForService:serviceType:requestor:
notePeerToken:forURI:fromURI:service:
notePhoneNumberRegistrationReset
notePublicIdentityDidRegisterKTData:forKeyIndex:
notePublicIdentityDidRegisterKeyData:forKeyIndex:
notePublicIdentityDidRegisterLegacyData:ngmIdentityData:ngmPrekeyData:keyIndexToIdentityData:keyIndexToKTRegData:
noteQueryForService:requestor:
noteQueryRequestForService:requestor:
noteReceivedGroupMasterKeyMaterialCollection:
noteReceivedGroupMasterKeyMaterials:URIs:sessionID:
noteRegistrationStateChanged
noteResponseForToken:
noteServerStorageStateMachineEndedFor:linkType:wasPrimary:timeTaken:numberProcessed:
noteShouldFetchRemoteAccountInfoForAllServices
noteShouldSynchronizeAllServices
noteShouldSynchronizePreferredAccount
noteShouldSynchronizeTinkerDeviceInfo
noteSuccessfulKVSSyncOfTrustedDevices:
notificationCenter
notificationCenterDidDisappear
notificationCenterWillAppear
notificationDelayInSeconds
notifyClients:
notifyJoinToGroup:members:params:fromAccount:fromID:sessionID:isUPlusOne:completionBlock:
notifyJoinToSpecificMembersOfGroup:members:params:fromAccount:fromID:sessionID:isUPlusOne:requiredCapabilites:requiredLackOfCapabilities:
notifyLeaveToGroup:members:params:fromAccount:fromID:sessionID:isUPlusOne:
notifyLeaveToSpecificMembersOfGroup:members:params:fromAccount:fromID:sessionID:isUPlusOne:requiredCapabilites:requiredLackOfCapabilities:
notifyListenersEngramKeyStoreDidUpdateIdentities
notifyStableKeyMaterialsReceivedForGroup:sessionID:
notifyWatchDidStartAdvertisingWithPeripheralManager:
notifyWatchDidStopAdvertisingWithPeripheralManager:
notifyWatchToStartAdvertising
notifyWatchToStopAdvertising
nrDeviceBridge:defaultPeerClassCConnectivityDidChange:
nrDeviceBridge:defaultPeerCloudConnectivityDidChange:
nrDeviceBridge:defaultPeerConnectivityDidChange:
nrDeviceBridge:defaultPeerNearbyDidChange:
nrDeviceBridge:deviceMagnetIndicationOfAwakeStateDidChange:
nrDeviceBridge:linkType:
nrDeviceIdentifier
nrDevicePreferences
nrDevicePreferencesHandler
nrMonitorQueue
nukeKeyTransparencyDeviceRecordsWithCompletion:
nukeKeyTransparencyStateWithCompletion:
nukeTransparencyStateWithCompletion:
null
numberFromString:
numberOfAttemptsWithoutSuccessfulSend
numberOfBroadcastCacheMKM
numberOfPreflights
numberOfSuccessfulSends
numberWithDouble:
numberWithInt:
numberWithInteger:
numberWithLongLong:
numberWithShort:
numberWithUnsignedChar:
numberWithUnsignedInt:
numberWithUnsignedInteger:
numberWithUnsignedLong:
numberWithUnsignedLongLong:
numberWithUnsignedShort:
nwConnection
object
objectAtIndex:
objectAtIndexedSubscript:
objectForKey:
objectForKey:inDomain:
objectForKeyedSubscript:
obliterateConnectionInfo
obliterateConnectionInfoForCBUUID:
obliterateConnectionInfoForCBUUID:completionBlock:completionQueue:
obliterateConnectionInfoWithCompletionBlock:completionQueue:
observeValueForKeyPath:ofObject:change:context:
observer
onParticipantID2PushTokenMappingChange:
onTransportThread_CurrentCellularSignalStrength:signalRaw:signalStrength:signalGrade:
onTransportThread_DropIPPackets:linkID:payloadArray:
onTransportThread_PerServiceDataTransferredForDevice:services:
onTransportThread_SendKeyMaterialMessage:relayGroupID:keyMaterialMessageData:destinationURIs:completionHandler:
onTransportThread_SendSKEData:skeData:completionHandler:
onTransportThread_SendToGlobalLinkWithSessionID:packetBuffer:
onTransportThread_SendToGlobalLinkWithSessionID:packetBufferArray:arraySize:
onTransportThread_SendWithConnectionContext:packetBuffer:
onTransportThread_SetDefaultUnderlyingLink:linkID:
onTransportThread_SetPacketNotificationFilter:linkID:uniqueTag:isEnabled:
onTransportThread_StopBTDatagramLinkForDefaultPairedDevice
onTransportThread_StopKeepAlive:linkIDs:
onTransportThread_createAliasForParticipantID:salt:sessionID:relayGroupID:relaySessionID:
onTransportThread_flushLinkProbingStatus:options:
onTransportThread_getLinkType:
onTransportThread_getSessionInfo:relayGroupID:relaySessionID:options:
onTransportThread_manageDesignatedDestinationsWithSessionID:relayGroupID:relaySessionID:destinations:withType:sessionStateCounter:
onTransportThread_participantIDForAlias:salt:sessionID:relayGroupID:relaySessionID:
onTransportThread_queryLinkProbingStatus:options:
onTransportThread_receiveJoinNotificationFromAParticipant:
onTransportThread_registerPluginForGroup:relayGroupID:relaySessionID:options:
onTransportThread_removeParticipantIDsWithSessionID:relayGroupID:relaySessionID:participantIDs:sessionStateCounter:
onTransportThread_requestChildConnectionIDForLinkID:sessionID:relayGroupID:relaySessionID:
onTransportThread_requestMaterialsForSession:participantIDs:materialType:
onTransportThread_sendConnectedLinkInfoToAVCForSessionID:
onTransportThread_sendStatsRequestWithOptions:options:
onTransportThread_setClientUniquePID:sessionID:relayGroupID:relaySessionID:
onTransportThread_setRemoteDeviceVersion:version:
onTransportThread_setServerDesiredMaterialsForSession:materials:signer:
onTransportThread_setUPlusOneModeForSessionID:isUPlusOneEnabled:
onTransportThread_setWiFiAssistState:isWiFiAssistEnabled:
onTransportThread_startLinkProbing:options:
onTransportThread_stopLinkProbing:options:
onTransportThread_updateParticipantType:forSessionID:relayGroupID:relaySessionID:sessionStateCounter:
onTransportThread_updateSessionParticipants:relayGroupID:relaySessionID:participants:
onTransportThread_updateSessionURIToParticipantIDs:relayGroupID:relaySessionID:sessionInfo:
onURI2ParticipantIDMappingChange:allocateResponse:
oneToOneECCQuicktestEncryptionWithData:completion:
onlyAllowReads
openSocketCompletionHandler
openSocketToDevice:
openSocketWithOptions:
openSocketWithOptions:messageContext:
openSocketWithOptions:queue:completionHandler:
openedSocket:forHandlerID:error:
operation
opportunistic
opportunisticCache
opportunisticCollaboratorForXPCDaemon:
opportunisticCollaboratorWithCompletion:
opportunisticDataReceived:withIdentifier:fromID:context:
opportunisticQueue
optInEligibleKTApplicationToIDSServiceIdentifier
originalGUID
originalTimestamp
originalbtUUID
originalfromID
osChannelInfoLog
osVersion
otrTestBlock
outOfBandKey
outgoingEncryptionTableBySSRC
outgoingEventWithTimestamp:duration:processTime:compressionTime:sendTime:bytes:
outgoingMessagesWithEnqueueDateOlderThan:notToDestinationDeviceID:andLimit:
outgoingStallDetector
outgoingStallDetectorName
output
outputBytesPerSecond
overrideSendOnePerTokenForService:
ownerParticipantId
packetBuffer
packetBufferHandler
packetsPerSecond
packetsSent
pairWithFirst:second:
pairedDevice
pairedDeviceBuildVersion
pairedDeviceCBUUIDString
pairedDeviceForUniqueID:
pairedDeviceHandlesWithPairingType:
pairedDeviceManagerCollaboratorForXPCDaemon:
pairedDeviceManagerCollaboratorWithCompletion:
pairedDeviceMaxCompatibilityVersion
pairedDeviceMinCompatibilityVersion
pairedDevicePairingProtocolVersion
pairedDevicePairingType
pairedDevicePrivateData
pairedDeviceProductName
pairedDeviceProductVersion
pairedDevicePublicClassAKey
pairedDevicePublicClassCKey
pairedDevicePublicKey
pairedDevicePushToken
pairedDeviceRecords
pairedDeviceRepo
pairedDeviceRepository
pairedDeviceServiceMinCompatibilityVersion
pairedDeviceUUIDString
pairedDeviceUniqueID
pairedDeviceWithCBUUID:
pairedDeviceWithoutSecuredEncryptionKeys
pairedDeviceiCloudURIs
pairedDevicesInfo:
pairedDevicesWithIsPairingValue:
pairingCollaborator
pairingCollaboratorForXPCDaemon:
pairingCollaboratorWithCompletion:
pairingManager
pairingProtocolDebug
pairingProtocolVersion
pairingToken
pairingType
parentPg
parentVersion
participantID
participantIDForAlias:salt:
participantIDForAlias:salt:relayGroupID:relaySessionID:
participantIDForAlias:salt:sessionID:relayGroupID:relaySessionID:
participantIDToAliasConverter
participantIDs
participantIDsForURIs:group:
participantIdentifier
participantInfoByURIForGroup:
participantMirageHandshakeBlob
participantPushToken
participantURI
participantUpdatedForSession:
participants
participantsByAlias:
participantsForCypher:completion:
participantsForGroupID:
participantsForSessionID:
participantsFromEndpoints:
passThroughMessagesFromStorage
passwordChanged:forAccount:
passwordChanged:forAccount:messageContext:
passwordUpdatedForAccount:
passwordUpdatedForAccount:messageContext:
pathWithComponents:
peer
peer:dataReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:didWakeHint:
peer:messageReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:didWakeHint:
peer:protobufReceived:topic:command:fromID:messageID:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:messageUUID:priority:isCompressed:connectionType:didWakeHint:
peer:receivedAppLevelAckWithTopic:fromID:messageID:peerResponseIdentifier:priority:connectionType:
peerCN
peerCloudConnectivityChanged:
peerCloudConnectivityChanged:isCloudConnected:
peerConnectivityChanged:
peerHasSpaceForNonUrgentMessages:priority:dataProtectionClass:
peerHasSpaceForNonUrgentMessages:priority:dataProtectionClass:withTypes:
peerHasSpaceForUrgentMessages:dataProtectionClass:withTypes:
peerIDKeyWithService:fromURI:toURI:
peerIDManager
peerIDManagerToken
peerIDValueWithEndpoints:keyTransparencyContext:
peerNearbyStateChanged:forceNotify:
peerProtocolVersion
peerResponseIdentifier
pendingCloudEnable
pendingContinuityPeerID:
pendingDependentCheck
pendingIncomingMessageWithGUID:forTopic:toIdentifier:fromID:context:
pendingResponseTokens
perServiceDataReceivedForDevice:services:
perServiceDataSentForDevice:services:
perServiceDataTransferredForDevice:services:
performAsyncBlock:
performAsyncBlock:priority:
performBlock:
performBlock:afterDelay:
performBlock:priority:dataProtectionClass:
performBlock:waitUntilDone:
performBlock:withImplicitPriority:
performBlockDefaultPriority:
performBlockForAllConnections:
performBlockForDirectConnections:
performBlockMainQueue:
performBlockMainQueue:afterTimeMSec:
performBlockSYNCHRONOUSLYWithPriority:priority:
performBlockSyncPriority:
performBlockSynchronouslyForAllConnections:
performBlockUrgentPriority:
performBlockWithPriority:priority:
performBlocksOnLinkConnect
performCleanUpWithCompletion:
performMigrationIfNeeded
performOTRSessionBlock:token:
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
performSyncBlock:
performSyncBlock:priority:
peripheral:didDiscoverCharacteristicsForService:error:
peripheral:didDiscoverDescriptorsForCharacteristic:error:
peripheral:didDiscoverIncludedServicesForService:error:
peripheral:didModifyServices:
peripheral:didOpenL2CAPChannel:error:
peripheral:didReadRSSI:error:
peripheral:didUpdateNotificationStateForCharacteristic:error:
peripheral:didUpdateValueForCharacteristic:error:
peripheral:didUpdateValueForDescriptor:error:
peripheral:didWriteValueForCharacteristic:error:
peripheral:didWriteValueForDescriptor:error:
peripheralDidUpdateName:
peripheralDidUpdateRSSI:error:
peripheralIsReadyToSendWriteWithoutResponse:
peripheralManager:central:didSubscribeToCharacteristic:
peripheralManager:central:didUnsubscribeFromCharacteristic:
peripheralManager:didAddService:error:
peripheralManager:didOpenL2CAPChannel:error:
peripheralManager:didPublishL2CAPChannel:error:
peripheralManager:didReceiveReadRequest:
peripheralManager:didReceiveWriteRequests:
peripheralManager:didUnpublishL2CAPChannel:error:
peripheralManager:willRestoreState:
peripheralManagerDidStartAdvertising:error:
peripheralManagerDidUpdateState:
peripheralManagerIsReadyToUpdateSubscribers:
peripheralManagers
persistData:forKey:error:
persistImmediately
persistNumberOfPreflightAttempts:
persistNumberOfSuccessfulValidationSends:
persistPendingInvitation:forService:withUniqueID:
persistPendingInvitation:forService:withUniqueID:messageContext:
persistReceivedInvitation:forService:withUniqueID:
persistReceivedInvitation:forService:withUniqueID:messageContext:
persistUsersImmediately
persistedPendingInvitationsForService:
persistedProperties
persistedReceivedInvitationsForService:
persistentEnrollmentHandler
persistentMap
persister
personalCBUUIDString
phaseForExpirationDate:
phoneAuthenticationCertificate
phoneAuthenticationCertificatePrivateKey
phoneAuthenticationCertificatePublicKey
phoneAuthenticationCertificateSigningRequestForUser:
phoneNumber
phoneNumberValidationMode
phoneNumberValidationPreflightTestData
phoneNumberValidationStartDate
phoneNumberValidator
phoneNumberWithStringValue:
phoneNumbers
phoneRepair
phoneRepairTimer
phoneSignature
phoneSubscriptionWithLabelID:
phoneSubscriptionWithSIM:
phoneToken
phoneUser
phoneUserWithUpdatedDefaultUser:countryCode:networkCode:
phoneUserWithUpdatedPhoneNumber:
phoneUserWithUpdatedPhoneNumber:phoneBookNumber:
pipelineFromComponents:
plistCachePath
plugin
pluginImplementsWatchDidStartAdvertising
pluginImplementsWatchDidStopAdvertising
pnrReason
pointerValue
policy
policyTrafficClassifiers
populateMergeIDForEntries:withCompletion:
popupPromptWithTitle:message:defaultButton:defaultUrl:alternateButton:alternatrUrl:completion:
port
portString
postAccountUserNotificationWith:completion:
postNewDeviceNotification:iCloudSignIn:iMessageSignIn:facetimeSignIn:forAppleID:
postNotificationForURI:onService:shouldRateLimit:command:
postNotificationName:object:userInfo:
predicateForContactsMatchingEmailAddress:
predicateForContactsMatchingPhoneNumber:
predicateForURI:
predicateWithBlock:
predicateWithValue:
preferences
preferencesDomain
preferencesForService:
preferredAccountChanged:
prefixedURI
preflighStackStore
preflightShortCircuitMechanismOverride
preflightStackByPoppingMechanism
preflightStackForIdentifier:
preflightStackStore
preflightTestDataOverride
prekeyData
prepareDefaultPairedConnectionInfoWithDeviceUniqueID:shouldUseIPsecLink:
prepareForQuickSwitch
prependItem:
presentSuccessAlertForUser:
previousAccessToken
previousFullDeviceIdentityContainer
previousFullMessageProtectionIdentity
previousIdentityForDevice
previousLocalStableKeyMaterial
previousRegisteredIdentityContainer
primaryAccount
primaryAccountForAdHocAccount:
primaryAccountUniqueID
primaryRegistration
primaryRegistrationDSHandle
primaryRegistrationURIs
primaryServiceForAdhocServiceType:
primaryServiceName
principalClass
printCurrent
printInfo
prioritizeMemoryPolicy
prioritizedTokenList
prioritizedTokens
priority
priorityQueue
privateCloudDatabase
privateData
privateDeviceData
privateKey
processAllocationErrorStatus:errorCode:
processAvailableNotificationsTask
processCompressionRequest:fromDeviceConnectionInfo:
processCompressionResponse:fromDeviceConnectionInfo:
processDirectMessagingCapability:
processDirectMessagingInfo:
processFairplayDeviceInfo:
processFairplayDeviceSessionInfo:
processIncomingGroupSessionMessage:fromToken:fromID:toID:topic:idsMessageContext:
processIncomingInvitationWithPayload:topic:fromToken:fromID:toID:idsMessageContext:messageContext:
processIncomingKeyMaterialsRecoveryRequest:fromDevice:fromID:groupID:sessionID:serverDate:requireMKM:requireSKM:
processIncomingParticipantDataUpdateMessage:fromToken:fromID:toID:topic:idsMessageContext:
processIncomingParticipantUpdateMessage:fromToken:fromID:toID:topic:idsMessageContext:
processIncomingPrekeyAckForGroup:
processIncomingSessionAcceptMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionCancelMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionDeclineMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionEndMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionMessage:fromToken:fromID:idsMessageContext:
processIncomingSessionReinitiateMessage:fromToken:fromID:idsMessageContext:
processInfo
processName
processNegotiationData:deviceUniqueID:token:negotiationCount:
processOTRNegotiationMessage:
processRemoteConnectionData:completionHandler:
processRemoteConnectionDataForDevice:remoteConnectionData:completionHandler:
processStoredIncomingMessage:
processSuspendOTRNegotiationMessage:
processUsageNotificationsTask
processedDictionaryForDisk:andMemory:
processedQRMKMPayloadFromData:forGroupID:account:remoteURI:localURI:tokens:completionHandler:
produceBytes:
productBuildVersion
productName
productOSVersion
productVersion
productionMetricLogger
profileID
progressBlock
progressBlockForSendParameters:messageContext:topic:forObject:
promptMessage
promptTitle
properties
propertiesForDeviceWithUniqueID:
propertiesForUser:
propertyListWithData:options:format:error:
propsByupdatingDisableRegistration:
protectedHashOfMessageData:error:
protobuf
protocol
provider
provisionPseudonymFor:withURI:properties:requestProperties:completionBlock:
provisionPseudonymForURI:onAccount:withProperties:requestProperties:requestUUID:
provisionPseudonymForURI:onAccount:withProperties:requestProperties:requestUUID:messageContext:
provisionPseudonymForURI:properties:requestProperties:completionBlock:
pseudonymAlias
pseudonyms
publicAccountClusterWithError:
publicDataRepresentationForGroup:completion:
publicDataRepresentationForGroup:inContext:completion:
publicDataRepresentationWithError:
publicDataRepresentationWithSponsor:error:
publicDeviceIdentity
publicDeviceIdentityContainer
publicDeviceIdentityContainerForDeviceID:
publicDeviceIdentityWithError:
publicIdentifier
publicIdentity
publicIdentityCache
publicIdentityData
publicIdentityDataFromLocalFullIdentity
publicIdentityFromData:
publicIdentityWithError:
publicKey
publicKeyBatchSignDatas:withSignatureType:keyType:keyDiversifier:service:priority:error:
publicKeyBatchSignDatas:withSignatureType:service:priority:error:
publicKeyData
publicKeyDecryptData:fromEndpoint:pkType:priority:error:
publicKeyDecryptData:fromEndpoint:pkType:priority:replayKey:completionBlock:
publicKeyDecryptData:fromURI:identity:toURI:pushToken:service:priority:isRetry:replayKey:publicKeyType:completionBlock:avoidMainQueue:
publicKeyDecryptData:toDeviceID:priority:publicKeyType:completionBlock:
publicKeyDecryptData:toDeviceID:publicKeyType:priority:error:
publicKeyEncryptData:withEncryptedAttributes:fromURI:identity:toURI:pushToken:service:priority:completionBlock:forceLegacy:avoidMainQueue:
publicKeyEncryptData:withEncryptedAttributes:toDeviceID:priority:publicKeyType:completionBlock:
publicKeyEncryptData:withEncryptedAttributes:toDeviceID:publicKeyType:priority:error:
publicKeyEncryptData:withEncryptedAttributes:toEndpoint:usedEncryptionType:priority:error:
publicKeyForDeviceID:
publicKeyForURI:pushToken:fromURI:service:
publicKeySignData:withSignatureType:keyType:keyDiversifier:service:priority:error:
publicKeySignData:withSignatureType:service:priority:error:
publicKeyStorage
publicKeyVerifySignedData:matchesData:forSignatureType:endpoint:priority:error:
publicKeyVerifySignedData:matchesData:forSignatureType:endpoint:withKeyType:keyDiversifier:priority:error:
publicKeyVerifySignedData:matchesData:forSignatureType:identity:forURI:pushToken:service:localURI:priority:completion:avoidMainQueue:
publicKeyVerifySignedData:matchesData:forSignatureType:identity:toURI:pushToken:service:localURI:withKeyType:keyDiversifier:priority:completion:avoidMainQueue:
publicKeys
publicLegacyIdentityData
publicMessageProtectionData
publicMessageProtectionDataToRegisterForClassA
publicMessageProtectionDataToRegisterForClassC
publicMessageProtectionDataToRegisterForClassD
publicMessageProtectionDeviceIdentityContainerToRegister:
publicMessageProtectionIdentityDataToRegisterWithError:
publicNGMIdentityData
publicNGMPrekeyData
publicName
publicPreKeyData
publicServiceIdentityAdminWithError:
publishGroupForKey:data:signature:forwardingSig:ENID:version:completion:
publishedStreams
purgeCachedCertsForSubsystemMechanism:
purgeClientDataBlocks
purgeData
purgeFromKeychain:
purgeMessageProtectionIdentity
purgeOldKeyMaterial
purgeQUICConnectionsForParticipants:
purgeSecuredEncryptionKeysForAllPairedDevices
pushAckTimestamp
pushHandler
pushHandlerForAPSDelegatePort
pushListener
pushListener:receivedUpdatePush:
pushMessage:
pushPriority
pushPrivateKey
pushPublicKey
pushToWakeDisabled
pushToken
pushTokenForDeviceID:
pushTokenLookup:forGroup:sessionID:fromID:account:completionBlock:
pushTokenToQRSessionID
pushTokenToSKMsMapping
pushTopic
qGroupContextWithDeviceIdentity:completion:
qSetupSeal
qrReason
query
queryCompletionBlock
queryGroupServerForENID:withCompletion:
queryHandler
queryInitialInvitationContextForRegistration:
queryLinkProbingStatus:
queryQueue
queryRetry
queryRetryIntervalForBadSignature
queryService
queryTimeInterval
queryUpdateNotifier
queryValidatedEmailsForRegistration:allowPasswordPrompt:completionBlock:
queue
queueBuildingValidationDataIfNecessaryForMessage:subsystem:withQueueCompletion:sendBlock:
queueForPriority:
queueManager
queueManager:receivedMessagesToSend:forTopic:sendMode:
queueMap
queueOneIdentifier
queuedMessages
quickRelayRequestsCount
quickRelaySessionToken
quickSwitchHelper
radarClassification
radarComponentId
radarComponentName
radarComponentVersion
radarDescription
radarKeywords
radarQueryParameter
radarReproducibility
radarTitle
radioAccessTechnology
rangeOfString:
rapportClient
rapportClient:didDiscoverDevice:
rapportClient:didLoseDevice:
rapportClient:didReceiveMessage:fromID:
rapportDeliveryController
rateLimitMap
rateLimiter
reIdentify
reRegisterWithUserID:action:service:
reRegisterWithUserID:action:service:messageContext:
read:inputLength:
readFrom:
readFromConnection
readHandler
realTimeEncryptionController
realTimeEncryptionPublicKeyDataForDevice:
realTimeEncryptionPublicKeyForDevice:
realTimeEncryptionPublicKeyWrappingMode
realTimeEncryptionPublicWrapModeForDevice:
reallyUpdateRegistrationHeartbeatTask
realm
realmPrefixedIdentifier
reason
reasonCode
recalculatePhoneRepairTimer
receiveAndDecryptEncryptedDataBlobs:
receiveControlChannelMessage:fromCbuuid:deviceUniqueID:
receiveDictionaryData:forType:fromParticipant:
receiveFileTransfer:topic:path:requestURLString:ownerID:sourceAppID:signature:decryptionKey:fileSize:progressBlock:completionBlock:
receiveJoinNotificationFromAParticipant
receiveJoinNotificationFromAParticipant:
receiveMembershipChangedInformation:
receivedAcceptMessage:fromID:
receivedAndSetKeyMaterial:stableKeyMaterial:forDevice:fromID:groupID:sessionID:fromSender:error:forMKM:forSKM:
receivedCancelMessage:fromID:
receivedDeclineMessage:fromID:
receivedDirectMsgSocketRequestForService:stream:flags:
receivedEndMessage:fromID:
receivedErrorWithContext:
receivedGroupSessionParticipantDataUpdate:forTopic:toIdentifier:fromID:
receivedGroupSessionParticipantUpdate:forTopic:toIdentifier:fromID:context:
receivedKMOverPushFromToken:
receivedKMOverPushViaCacheForToken:
receivedKMOverQRFromToken:
receivedKMOverQUICFromToken:
receivedMetadataForDirectMessaging:
receivedPreKeyOverPush
receivedPreKeyOverQUIC
receivedRateLimitingResponseForTopic:ttr:
receivedReinitiateMessage:fromID:
receivedRemoteConnectionData:
receivedSessionMessage:fromID:
receivedUnknownKMOverPushViaCache:
receivedUnverifiedKMOverQUICFromToken:
recentlyBlockedEntries:
recentlyBlockedHandles
recertifyDeviceIfNeeded
recievedLastMessageFromStorageForTopic:
recievedMessageFromStorageForTopic:
recievedNoStorageResponseForTopic:messageContext:
recipientPushToken
recipients
reconnectSession
reconnectSessionWithUniqueID:
reconnectSessionWithUniqueID:messageContext:
reconnectWithLocalAddress:
recordID
recordName
recordWithDeviceData:deviceMetadata:recordID:
recvKeyMaterial:
recvMembershipChangeEventWithReason:completionHandler:
recvStableKeyMaterialForFrameworkCache:
redeliverMessagesForDevice:completion:
reduceWithCompletion:
reestablishmentRequestReceiveTime
refreshAdHocServiceNames
refreshBundleIDs
refreshDate
refreshIDInfo
refreshPairedDeviceEncryptionKeys
refreshRegistrationForAccount:
refreshUserAccessTokens:error:
refreshVettedAliases
regenerateDeviceIdentifier
regeneratePairingIdentitiesIncludingClassD:
regenerateRegisteredIdentity
regenerateRegisteredIdentityWithMessageContext:
regeneration
regionBasePhoneNumber
regionID
regionServerContext
registerAccount:
registerAgent
registerClientChannel
registerClientChannelDestination:connectHandler:
registerDevice:properties:queue:completionBlock:
registerEndpoint:type:priority:options:
registerEventID:options:handler:
registerForNotificationsOnServices:
registerForNotificationsOnServices:messageContext:
registerForRegistrationAccountStatusMetric
registerInfo:
registerMultiplexerTransport
registerMultiplexerTransport:
registerPairedDeviceWithUniqueID:didConnectBlock:
registerPluginForGroup:options:messageContext:
registerPluginForGroup:relayGroupID:relaySessionID:options:
registerPluginWithOptions:
registerPluginWithOptions:relayGroupID:relaySessionID:
registerResultBlock:
registered
registeredAccountsOnService:
registeredDeserializationError
registeredDeviceFromDependentRegistrationDictionary:
registeredDevices
registeredIdentityContainer
registeredIdentityTimestampsWithBlock:
registeredKTData
registeredKeychainError
registeredObjectForProtocol:
registeredPairedDeviceDidConnectBlockPairs
registeredPhoneNumbers
registration
registrationAccountStatusMetricForAccount:
registrationAccountStatusMetricForNonexistentAccountWithType:serviceIdentifier:
registrationAttemptRateLimiter
registrationAuthKit
registrationBroadcasterForTopic:messageContext:
registrationCenter
registrationCert
registrationCollaboratorForXPCDaemon:
registrationCollaboratorWithCompletion:
registrationCompletedForRegistrationType:serviceIdentifier:wasSuccessful:registrationError:
registrationConductor
registrationControl
registrationControlGetRegistrationStateForRegistrationType:requestID:
registrationControlGetRegistrationStateForRegistrationType:requestID:messageContext:
registrationControlResponseForRequestID:withError:
registrationControlSetRegistrationStateForRegistrationType:toState:requestID:
registrationControlSetRegistrationStateForRegistrationType:toState:requestID:messageContext:
registrationControlStatusResponseForRequestID:requestID:withError:
registrationController
registrationController:allRegistrationsSucceeded:
registrationController:deregistrationSucceeded:
registrationController:deregistrationWillStart:
registrationController:registrationFailed:error:info:
registrationController:registrationSucceeded:
registrationController:registrationUpdated:
registrationController:registrationWillStart:
registrationControllerNeedsNewRegistration:
registrationData
registrationDataNeedsUpdate
registrationDataSource
registrationDate
registrationError
registrationErrorReason
registrationFailedForAccount:needsDeletion:
registrationHashProcessor:didFlushCacheForService:remoteURI:localURI:guid:
registrationKeyManager
registrationKeychainManager
registrationListener
registrationProperties
registrationPushManager
registrationQueue
registrationReasonTracker
registrationState
registrationStateChangedDate
registrationStateForRegistrationType:error:
registrationStatus
registrationSupported
registrationSupportedForRegistration:
registrationType
registrationWithServiceType:registrationType:value:
registration_oversized
registrations
regularPackets
reinitiate
reissuePersistedRequests
relayBuildVersion
relayCancel
relayExpiryTimeStamp
relayHighPriorityPort
relayIPv6
relayInitiate
relayPort
relaySessionID
relaySessionToken
relaySoftwareVersion
relayUpdate
releaseBroadcastAttemptQueue:
releasePortIfNecessary:port:
reliablyRequestKeyMaterialForGroup:sessionID:
reloadAdHocServices
reloadFromKeychain
reloadSettings
reloadUsers
reloadUsersForRealm:
remoteAddress
remoteAssumeRemoteDeviceEncryption
remoteBlob
remoteCID
remoteCallInfoData
remoteCell
remoteConnectionGUID
remoteConnectionType
remoteContext
remoteDetectedCorruption
remoteDeviceEncryptionInfo
remoteDevicesForIDs:fromIdentity:fromURI:fromService:lightQuery:allowQuery:completionBlock:
remoteDidBecomeActive:
remoteDidJoin:
remoteICEData
remoteNATIP
remoteNATType
remoteObjectDiedNotification:
remoteObjectProxy
remotePartyID
remotePublicIdentity
remoteSA
remoteSKEData
remoteURI
remoteUnauthenticatedPublicIdentity
remoteUseCloudPairedControlChannel
remoteUsePhoneContinuityLocalMessage
removeAccount:
removeAccountForGroup:
removeActionListener:
removeActiveParticipant:forGroup:
removeAliases:
removeAliases:fromAccount:
removeAliases:fromAccount:messageContext:
removeAllAggregatableMessages
removeAllCachedSessionsFromMainQueue
removeAllDonatedEntries:
removeAllEntries
removeAllEntries:
removeAllEntries:forImpactedServices:category:
removeAllEntriesWithCategory:
removeAllKVSEntries
removeAllKVSTrustedDevices:
removeAllObjects
removeAllQuickRelayRequests
removeAllRegistrations
removeAppValueForKey:
removeAuthTokenAllowingGracePeriodForProfileID:username:
removeBlockForIdentifier:
removeCachedEntriesForService:
removeCachedIdentityForPushToken:
removeCandidateEmail:
removeClientDataUpdateBlockForToken:
removeCompletionBlockForToken:
removeCompletionBlockForUniqueIdentifier:
removeConnection:fromDeviceConnectionInfo:removeCode:removeReason:
removeConnectionWithConnectionName:completionHandler:
removeConnectivityDelegate:
removeDataForIdentifier:dataProtectionClass:error:
removeDataWithIdentifier:serviceName:withError:
removeDeliveryHandler:
removeDonatedEntries:withCompletion:
removeEndpointQueryCompletionBlockForToken:
removeEntries:forImpactedServices:category:isDonated:
removeEntries:withCompletion:
removeEntriesWithCategory:isDonated:
removeEntryForKey:
removeExpiredPrekeys
removeFirstObject
removeFromKeychain
removeFromQueue:subsystem:
removeFullClusterWithIdentifier:error:
removeIdentityContainer:withIdentifier:dataProtectionClass:error:
removeIdentityWithApplicationKeyIndex:error:
removeItemAtPath:error:
removeKTRegistrationDataForKeyIndex:isRegistered:error:
removeKeychainDataOnService:account:error:
removeLegacyIdentity:withIdentifier:dataProtectionClass:error:
removeLink:
removeListener:forActivity:
removeListenerObject:
removeLocalActiveParticipantForGroup:
removeLocalListenerObject:
removeLocalPairedDevice:
removeNegotiationTimer
removeObject:
removeObjectAtIndex:
removeObjectForKey:
removeObjectIdenticalTo:
removeObjectsAtIndexes:
removeObjectsForKeys:
removeObjectsInArray:
removeObjectsInRange:
removeObserver:forKeyPath:context:
removeObserver:name:object:
removeOpportunisticDataForIdentifier:serviceName:completion:
removePairedDeviceWithCBUUID:
removeParticipantIDs:
removeParticipantIDs:forGroup:sessionID:
removeParticipantIDs:forGroup:sessionID:messageContext:
removeParticipantIDs:relayGroupID:relaySessionID:sessionStateCounter:
removeParticipantIDsWithSessionID:relayGroupID:relaySessionID:participantIDs:sessionStateCounter:
removePendingInvitation:forService:
removePendingInvitation:forService:messageContext:
removePendingMessagesForProtectionClass:
removePhoneNumberValidationRequestor:
removePreferWiFiRequest
removePurgeClientDataBlockForToken:
removeQuickRelayRequest
removeReceivedInvitation:forService:
removeReceivedInvitation:forService:messageContext:
removeRegistration:
removeRegistrationInfo:
removeRegistrationListener:
removeSessionKeyForAllTokenFromMainQueue
removeSessionKeyForToken:
removeSubscriptionForActivity:subActivity:
removeTarget:
removeTemporaryPhoneAlias:withCompletion:
removeUTunPeerWithDeviceUniqueID:btuuid:reason:shouldWait:
removeUTunPeerWithSessionID:reason:shouldWait:
removeWakingPushPriorityForServices:
renewPseudonym:forRegistration:forUpdatedExpiryEpoch:requestProperties:completionBlock:
renewPseudonym:forUpdatedExpiryEpoch:requestProperties:completionBlock:
renewPseudonym:onAccount:forUpdatedExpiryEpoch:requestProperties:requestUUID:
renewPseudonym:onAccount:forUpdatedExpiryEpoch:requestProperties:requestUUID:messageContext:
repairAccounts
repairAccountsWithMessageContext:
repairService:withPrimaryUserName:
repairTimer
repairiCloudBasedAccounts
replaceBytesInRange:withBytes:length:
replaceEntries:replaceAll:withCompletion:
replaceObjectAtIndex:withObject:
replayKey
replayStateCommitter
reportAWDAllocatorEvent:relayProviderType:transport:localRAT:duration:idsSessionID:reportingDataBlob:isInitiator:
reportAccountKeyFetchMetricForService:withSuccess:isAccountMismatch:withError:
reportAction
reportAction:ofTempURI:fromURI:onAccount:requestUUID:
reportAction:ofTempURI:fromURI:onAccount:requestUUID:messageContext:
reportAction:ofTempURI:fromURI:registration:withCompletion:
reportAction:ofTempURI:fromURI:withCompletion:
reportAndRemoveForConnectionUUID:
reportEncryptionSideMetricWithEndpoint:ECSuccess:legacySuccess:ECError:legacyError:
reportFirstMKMReceivedFromQR:
reportJoinReceivedOverPushFromToken:
reportMKMReceivedOverPushFromToken:material:
reportMKMReceivedOverPushViaCacheForParticipantID:material:
reportMKMReceivedOverQRFromToken:material:
reportMessageMetricWithMetadata:ECSuccess:legacySuccess:command:decryptedEqual:triedLastResort:ECError:legacyError:fromDestination:
reportMetric
reportPreKeyReceivedOverPushFromToken:
reportPrekeyAckStatus:
reportSpamMessage:selfURI:registration:
reportSpamMessage:serviceIdentifier:
reportSpamMessage:serviceIdentifier:messageContext:
reportSpamMessage:toURI:
reportSpamMessage:toURI:registration:
reportSpamWithMessages:selfURI:registration:
reportSpamWithMessages:toURI:
reportSpamWithMessages:toURI:registration:
reportTimeDifferenceBetweenFirstPacketAndMKI:forMKI:service:activeParticipants:
reportToAWD:connectionType:error:
reportiMessageSpam:toURI:
reportiMessageSpam:toURI:messageContext:
reportiMessageSpamCheckUnknown:count:completionBlock:
reportiMessageSpamCheckUnknown:count:requestID:
reportiMessageSpamCheckUnknown:count:requestID:messageContext:
reportiMessageUnknownSender:messageID:isBlackholed:isJunked:messageServerTimestamp:selfURI:registration:
reportiMessageUnknownSender:messageID:isBlackholed:isJunked:messageServerTimestamp:toURI:
reportiMessageUnknownSender:messageID:isBlackholed:isJunked:messageServerTimestamp:toURI:messageContext:
reportiMessageUnknownSender:messageID:isBlackholed:isJunked:messageServerTimestamp:toURI:registration:
reportingDataBlob
reqCount
requestActiveParticipantsForGroupSession:
requestActiveParticipantsForGroupSession:messageContext:
requestAllocationForRecipient:
requestAuthTokenForProfileID:username:service:badPassword:showForgotPassword:forceRenewal:failIfNotSilent:outRequestID:completionBlock:
requestCarrierTokenForSubscriptionSource:IMEI:carrierNonce:requestUUID:
requestCarrierTokenForSubscriptionSource:IMEI:carrierNonce:requestUUID:messageContext:
requestChildConnectionIDForLinkID:relayGroupID:relaySessionID:
requestChildConnectionIDForLinkID:sessionID:relayGroupID:relaySessionID:
requestEncryptionKeyForGroup:participants:
requestEncryptionKeyForGroup:participants:messageContext:
requestEncryptionKeyForParticipantIDs:
requestGenerationOfUnregisteredKTRegDataWithPublicIdentityData:applicationKeyManager:
requestID
requestIDStatusForID:fromIdentity:fromURI:fromService:lightQuery:allowQuery:completionBlock:
requestIDStatusForIDs:fromIdentity:fromURI:fromService:lightQuery:allowQuery:forceQuery:bypassLimit:completionBlock:
requestIDStatusForURIs:service:lightQuery:allowQuery:completionBlock:
requestIDStr
requestKeyMaterialForGroup:sessionID:
requestKeyMaterialForGroup:sessionID:shouldGenerateMKM:
requestKeyMaterialForGroup:sessionID:toSpecificMembers:requireMKM:requireSKM:
requestLength
requestMaterialsForParticipantIDs:materialType:
requestMaterialsForSession:participantIDs:materialType:
requestPendingKeyMaterialsForGroup:sessionID:
requestPublicKeysForRealTimeEncryption:forAccountWithID:
requestPublicKeysForRealTimeEncryption:forAccountWithID:messageContext:
requestRealTimeEncryptionMasterKeyMaterial:forGroup:
requestRealTimeEncryptionMasterKeyMaterial:forGroup:messageContext:
requestSelectedSubscriptionsWithCompletion:
requestSessionInfoWithOptions:
requestTimeoutInterval
requestURIsForParticipantIDs:withRequestID:
requestURIsForParticipantIDs:withRequestID:forGroupSession:
requestURIsForParticipantIDs:withRequestID:forGroupSession:messageContext:
requestUnselectedTemporaryPhoneAliasesWithCompletion:
requestUserConsentToValidatePhoneNumberForCTPNR:completion:
requestWithIdentifier:content:trigger:
requestedKM
requests
requireAll
requireAllRegistrationProperties
requireBluetooth
requireLackOfRegistrationProperties
requireLocalWiFi
requireSignature
requiredCapabilities
requiredForMessaging
requiredKeys
requiredLackOfCapabilities
requiredMissingCapabilities
requiredUpdate
requiresKeychainMigration
requiresPushTokenKeys
reregister
reset
resetAllConnectionsForDevice:
resetAllSessions
resetCacheWithNewMembershipURIs:
resetClientMasterKeyIdentifierReceipts
resetCommunicationStateBeforeQuickSwitchWithCompletionBlock:
resetDevicePrekey
resetExpiryForUser:
resetGossipState
resetIPsecTCPConnection:forDeviceConnectionInfo:
resetKeyMaterialCacheTimerIfNeeded:
resetKeyMaterialLocalSentStatus:
resetKeysForGroup:shouldRemoveCurrentParticipants:
resetMKMCacheAfterTimeoutForGroup:
resetMKMLocalSentStatus:
resetPreferencesForAllServices
resetRealTimeEncryptionKeys:forGroup:
resetRealTimeEncryptionKeys:forGroup:messageContext:
resetRemoteMasterKeyMaterialCacheAndCancelResetInterval
resetRemoteStableKeyMaterialCache
resetSKMCache
resetSKMLocalSentStatus:
resetSKMSentToClientStatus
resetTCPConnection:forDeviceConnectionInfo:
resetUTunTCPConnection:forDeviceConnectionInfo:
resolvedEndpoints
resolvedEndpointsDidUpdateHandler
resourceMetadata
resourcePath
respondToRegistrationControlActionWithRequestID:messageContext:error:
respondsToSelector:
response
responseAbsintheResponse
responseAbsintheServKey
responseAccessTokens
responseAccessoryID
responseAdminAcccessToken
responseAlertInfo
responseBasePhoneNumber
responseCarrierToken
responseCertificate
responseCertificateData
responseCertificateExpiration
responseCode
responseConsentTokens
responseDeviceScoreNonce
responseEngramID
responseError
responseExpiry
responseExtraInfo
responseHBI
responseIdentities
responseMechanisms
responseOrigin
responsePresenceTopic
responseRegionID
responseRegistrations
responseServiceUserIDs
responseServices
responseSessionInfo
responseSpamMessage
responseSpamMessages
responseStatus
responseTTL
responseTimeStamp
responseToken
responseUserID
responseValidated
responses
restoreMonitor
restoreTimer
restrictions
result
resultData
resultExpected
resume
resumeConnectivity
resumeMessageWithSequenceNumber:streamID:messageUUID:nextByteOffset:
resumeOTRNegotiation
resumeSessionNegotiation
resumeSocketWithOptions:shouldLogCall:
retain
retainCount
retractLockscreenAlerts
retrieveCurrentVerifiedTLTSTH:
retrieveLocalUDID
retrievePeripheralsWithIdentifiers:
retryCount
retryInAirplaneMode
retryTimeForKey:attempts:
reunionSyncClientIDs
reunionSyncCollaborator
reunionSyncCollaboratorForClientProcessName:withCompletion:
reunionSyncCollaboratorWithClientProcessName:forXPCDaemon:
reunionSyncCompletedForServices:requestID:
reunionSyncCompletedForServices:withCompletion:
reunionSyncInProgress
reunionSyncStartedForServices:requestID:
reunionSyncStartedForServices:withCompletion:
revokePseudonym:forRegistration:requestProperties:completionBlock:
revokePseudonym:onAccount:requestProperties:requestUUID:
revokePseudonym:onAccount:requestProperties:requestUUID:messageContext:
revokePseudonym:requestProperties:completionBlock:
rollAccountIdentityWithCompletion:
rollAccountKeyWithCompletion:
rollFullDeviceIdentityWithCluster:error:
rollNewKeysAfterResettingPrekeysForGroups:withReason:
rolledAccountIdenityWithError:
rolledClusterWithFullAccountIdentity:fullAdminServiceIdentities:fullSigningServiceIdentities:error:
rollingError
route
rtcNormalizeTime:
runCleanupWithExpirationInterval:
runConnectivityCheckWithCompletionBlock:
runIndividuallyWithInput:
runWithInput:
runningSimpleAuthentication
saveData:allowBackup:
saveData:forIdentifier:allowSync:allowBackup:dataProtectionClass:error:
saveData:forIdentifier:allowSync:dataProtectionClass:error:
saveData:forIdentifier:dataProtectionClass:withCompletion:
saveDevicePropertiesWithOldKeys:
saveIsRegistered:forApplicationKeyIndex:error:
saveKTRegistrationData:forKeyIndex:isRegistered:error:
saveLegacyIdentity:withIdentifier:dataProtectionClass:error:
saveOpportunisticCache:withError:
savePairedDevices:
saveQueue
saveTimer
saveToKeychain
saveTracking
scalablePipeManager:didRegisterEndpoint:error:
scalablePipeManager:didUnregisterEndpoint:
scalablePipeManager:pipeDidConnect:
scalablePipeManager:pipeDidDisconnect:error:
scalablePipeManagerDidUpdateState:
scheduleNextKVSSync
scheduledBlock
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
scoringNonce
screenLocked
screenSaverDidStart
screenSaverDidStop
screenUnlocked
sdCopy
sdOriginal
seal
sealMessage:signedByFullIdentity:error:
sealMessage:withEncryptedAttributes:signedByFullIdentity:usedIdentityWithIdentifier:error:
sealMessage:withEncryptedAttributes:signedByFullIdentity:usingIdentitiesWithIdentifier:error:
second
securityLevelForAccount:
selectDataForDestination:
selectServicesForKeychainCacheFromDictionary:
selectSubscription:withCompletion:
selectedPhoneNumberRegistrationSubscriptionLabels
selectedPhoneNumberRegistrationSubscriptionWithError:
selectedSubscriptionLabelDidChange:
self
selfAllocationCount
selfHandle
selfHealRateLimiter
selfInstanceID
selfVerifyThrottleTime
sendAccountSyncMessage:messageID:queueOneIdentifier:allowCloudFallback:completionBlock:
sendAckForMessageWithSequenceNumber:
sendAckForMessageWithSequenceNumber:priority:dataProtectionClass:connectionType:
sendAllocationRequest
sendAllocationRequest:
sendAllocationRequest:options:
sendAllocationRequest:options:messageContext:
sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:
sendAppAckWithGUID:toDestination:forAccountWithUniqueID:connectionType:messageContext:
sendAuthenticateRegistrationTask
sendBlock
sendCancelInvitationMessage
sendCancelInvitationToDestinations:remoteEndReason:data:
sendCertifiedDeliveryReceipt:
sendCertifiedDeliveryReceipt:serviceName:
sendCertifiedDeliveryReceipt:serviceName:messageContext:
sendConnectedLinkInfoToAVC
sendConnectedLinkInfoToAVCForSessionID:
sendData:
sendData:forCallID:encrypted:
sendData:forKey:encryption:capability:withCompletion:
sendData:peerID:
sendData:service:protobuf:resourcePath:resourceMetadata:priority:dataProtectionClass:nonWaking:nonCloudWaking:requireBluetooth:requireLocalWiFi:queueOneIdentifier:expirationDate:enforceRemoteTimeouts:expectsPeerResponse:wantsAppAck:compressPayload:compressed:peerResponseIdentifier:messageID:topic:awdTopic:command:fromID:uriToDeviceID:localDeviceDestinationDeviceUUID:bypassDuet:duetIdentifiersOverride:messageType:fallbackBlock:progressBlock:completionBlock:
sendData:toPeer:
sendDataMessage:
sendDataMessage:canFragment:
sendDeactivationRequestWithSIM:Info:
sendDeregistration:
sendDeregistrationTask
sendEventID:event:destinationID:options:completion:
sendFakePushFromFile:completion:
sendFanouts:guidToDeliveryAcknowledgementBlock:guidToSendCompletionBlock:forURIs:messageQueue:
sendFilePath:topic:userInfo:transferID:encryptFile:progressBlock:completionBlock:
sendFilePath:topic:userInfo:transferID:sourceAppID:encryptFile:progressBlock:completionBlock:
sendHardDeregisterCompletionBlock:
sendIDSMessage:service:topic:completionBlock:
sendInvitation:withData:declineOnError:
sendInvitation:withData:declineOnError:messageContext:
sendInvitation:withOptions:
sendInvitation:withOptions:messageContext:
sendInvitationWithData:declineOnError:
sendInvitationWithOptions:declineOnError:
sendKeyMaterialMessage:relayGroupID:keyMaterialMessageData:destinationURIs:completionHandler:
sendKeyMaterialMessage:toDestination:
sendKeyMaterialMessageData:relayGroupID:destinationURIs:completionHandler:
sendKeyMaterialsRecoveryRequestToDevice:fromID:groupID:sessionID:requireMKM:requireSKM:
sendKeyMaterialsRecoveryRequestToDevice:fromID:participantID:groupID:sessionID:requireMKM:requireSKM:
sendKeyMaterialsRecoveryRequestToGroup:requireMKM:requireSKM:
sendKeyMaterialsRecoveryRequestToParticipants:senderID:groupID:sessionID:requireMKM:requireSKM:
sendKeyMaterialsToLocal:sessionID:
sendKeyMaterialsToWaitingParticipantsForGroup:sessionID:
sendMMLs:guidToDeliveryAcknowledgementBlock:guidToSendCompletionBlock:forService:sendMode:messageQueue:
sendMessage:
sendMessage:messageID:topic:command:destinationIDs:completionBlock:
sendMessage:params:bulkedPayload:fromID:toDestinations:useDictAsTopLevel:dataToEncrypt:encryptPayload:wantsResponse:expirationDate:command:wantsDeliveryStatus:wantsCertifiedDelivery:deliveryStatusContext:messageUUID:priority:localDelivery:disallowRefresh:willSendBlock:completionBlock:
sendMessage:priority:messageType:
sendMessage:toDestinations:withCommand:
sendMessage:toDestinations:withCommand:fromID:
sendMessage:toDestinations:withCommand:fromID:willSendBlock:completionBlock:
sendMessage:toDeviceIdentifier:completionBlock:
sendMessage:withCommand:
sendMessageData:onTopic:withOptions:identifier:completion:
sendMessageDictionary:messageID:dataToEncrypt:withEncryptedAttributes:onService:wantsResponse:expirationDate:enforceRemoteTimeouts:canUseLargePayload:sendOnePerToken:allowPartialSendsToSucceed:priority:fireAndForget:fromID:fromIdentity:toPeople:accessToken:topic:registrationProperties:fakeMessage:alwaysSkipSelf:pushPriority:ignoreMaxRetryCount:disallowRefresh:originalTimestamp:prioritizedTokenList:wantsFirewallDonation:destinationObject:deliveryTime:deliveryMinimumTime:sendMode:ackBlock:willSendBlock:sendCompletionBlock:
sendMessageWithCategory:type:payload:error:
sendMessageWithIDSSendParameters:messageContext:threadContext:progressBlock:onObject:
sendMessageWithSendParameters:
sendMessageWithSendParameters:messageContext:
sendMessageWithSendParameters:service:threadContext:willSendBlock:progressBlock:completionBlock:
sendMessageWithSendParameters:willSendBlock:completionBlock:
sendMetric:
sendMode
sendMonitorMessage
sendOTRNegotiationMessage:negotiationCount:negotiationData:
sendOpportunisticData:onService:usingAccountWithUniqueID:withIdentifier:options:
sendOpportunisticData:onService:usingAccountWithUniqueID:withIdentifier:options:messageContext:
sendOpportunisticData:toDestination:
sendOpportunisticDataIfNeededToDestination:completion:
sendOptInUpdateForApplications:withCompletion:
sendPacketBuffer:destination:toDeviceID:
sendPacketBuffer:toDeviceUniqueID:cbuuid:
sendPacketBufferArray:arraySize:toDeviceUniqueID:cbuuid:
sendPendingKeyMaterialsToGroup:sessionID:forDevice:fromID:
sendPersistedFile:userInfo:toDestinations:usingAccountWithUniqueID:identifier:
sendPrekeyRequestToDestination:group:sessionID:
sendPrekeyRequestToGroup:sessionID:
sendPriorityMessage:
sendPublicKeyToDestination:group:sessionID:
sendRTCMetricWithStartDate:endDate:endpointCount:usedPipeline:usedMMCS:responseCode:
sendRealTimeEncryptionMKMRecoveryRequest:toGroup:
sendRealTimeEncryptionMasterKeyMaterial:toGroup:
sendRealTimeMediaPrekey:toGroup:
sendRealTimeMediaPrekey:toGroup:messageContext:
sendRegistration:
sendRegistrationTask
sendReinitiateMessageWithSubcommand:
sendReset
sendSKEData:
sendSKEData:skeData:completionHandler:
sendServerMessage:command:completionBlock:
sendServerMessage:command:usingAccountWithUniqueID:
sendServerMessage:command:usingAccountWithUniqueID:messageContext:
sendSessionMessage:toDestinations:
sendSessionMessage:toDestinations:forSessionWithUniqueID:
sendSessionMessage:toDestinations:forSessionWithUniqueID:messageContext:
sendStatsRequest:
sendStatsRequest:options:
sendSuspendOTRNegotiationMessage:
sendValidateCredential:withDeliveryCompletionBlock:
sendXPCObject:
sender
senderCorrelationIdentifier
senderCorrelationIdentifierForURI:fromURI:service:
senderCorrelationIdentifierForURI:pushToken:fromURI:service:
senderExternalIP
senderToken
senderURI
sendingMessageStatistics
sent
sentMessageDataSize
sentToDevice:
sentToRemotes
seqRecvStart
seqSendStart
sequenceNumber
serialNumber
serialPersistQueue
serializeAndPersistIdentitiesDeleteIfNull:
serializeAndPersistKTDatasDeleteIfNull:
serializedLegacyPublicIdentity
serializedNGMDevicePrekey
serializedPublicLegacyIdentity
server
serverBackoffModeMaxSenderRetries
serverBackoffModeReceiverRetryInterval
serverBag
serverBagForBagType:
serverDesiredKeyMaterials
serverDesiredMaterials
serverDiedForConference:
serverErrorDetail
serverKey
serverLoggableDatas
serverMessagingCollaboratorForXPCDaemon:
serverMessagingCollaboratorWithCompletion:
serverMessagingEntitlements
serverStorageStateMachine
serverTime
service:familyInfoUpdated:
service:linkedDevicesUpdated:
service:tinkerDeviceAdded:
service:tinkerDeviceRemoved:
service:tinkerDeviceUpdated:
serviceAdHocType
serviceAllowLocalDelivery
serviceAllowProxyDelivery
serviceAllowWiProxDelivery
serviceConnection
serviceConnectionCache
serviceConnector
serviceConnectorServiceForAccount
serviceController
serviceData
serviceDuetIdentifiers
serviceIdentifier
serviceIndexToKTRegDataConfigs
serviceIndexToKeyConfigs
serviceIsDSBased
serviceLoader
serviceMinCompatibilityVersion
serviceName
servicePushTopic
serviceRestrictionsChanged:
serviceSignatures
serviceSignaturesAtIndex:
serviceSignaturesCount
serviceSignaturesType
serviceString
serviceToOptInManager
serviceToVerifier
serviceType
serviceTypes
serviceTypesFromRegistrations:
serviceTypesFromRegistrations:withRegistrationType:
serviceUseiMessageCallerID
serviceUserID
serviceUserIDs:error:
serviceWantsReflectedSend
serviceWantsTinkerDevices
serviceWithIdentifier:
serviceWithName:
serviceWithPushTopic:
services
servicesPreferringInfraWiFi
session:audioEnabled:
session:didCreateParticipantIDAlias:forParticipantID:salt:
session:didReceiveActiveLightweightParticipants:success:
session:didReceiveActiveParticipants:success:
session:didReceiveBlockedParticipantIDs:withCode:withType:isTruncated:
session:didReceiveData:dataType:forParticipant:
session:didReceiveDataBlob:forParticipant:
session:didReceiveKeyMaterial:
session:didReceiveParticipantID:forParticipantIDAlias:salt:
session:didReceiveParticipantIDs:withCode:managementType:
session:didReceiveQueryBlockedParticipantIDs:withCode:isTruncated:
session:didReceiveReport:
session:didReceiveServerErrorCode:
session:didReceiveURIsForParticipantIDs:withRequestID:
session:didRegisterPluginAllocationInfo:
session:didRemoveParticipantIDs:withCode:isTruncated:
session:didUnregisterPluginAllocationInfo:
session:hasOutdatedSKI:
session:invitationSentToTokens:shouldBreakBeforeMake:
session:muted:
session:participantDidJoinGroupWithInfo:
session:participantDidLeaveGroupWithInfo:
session:shouldInvalidateKeyMaterialByKeyIndexes:
sessionAcceptReceived:fromID:withData:
sessionAcceptReceivedWithAWDGUID:
sessionAcceptSentWithAWDGUID:
sessionCancelReceived:fromID:withData:
sessionCancelReceivedWithAWDGUID:
sessionCancelSentWithAWDGUID:numberOfRecipients:remoteSessionEndReason:
sessionCompletedWithAWDGUID:protocolVersionNumber:serviceName:clientType:isQREnabled:isUsingQRDirectly:isInitiator:isScreenSharingSessionType:isWithDefaultPairedDevice:transportType:linkType:linkProtocol:endedReason:destinationType:durationOfSession:durationToConnect:isNetworkEnabled:isNetworkActive:isNetworkReachable:isWifiInterfaceDisallowed:isCellularInterfaceDisallowed:
sessionConnectedWithAWDGUID:
sessionController
sessionDeclineReceived:fromID:withData:
sessionDeclineReceivedWithAWDGUID:
sessionDeclineSentWithAWDGUID:
sessionDidJoinGroup:participantInfo:error:
sessionDidJoinGroup:participantUpdateDictionary:error:
sessionDidJoinGroup:participantsInfo:error:
sessionDidLeaveGroup:error:
sessionDidReceiveParticipantUpgrade:participantType:error:
sessionEndReceived:fromID:withData:
sessionEnded:withReason:error:
sessionEndedWithGuid:endedReason:genericError:gameKitError:conferenceMiscError:callDuration:isNetworkEnabled:isNetworkActive:isNetworkReachable:networkCheckResult:dataRate:gksError:connectDuration:remoteNetworkConnection:localNetworkConnection:connectionType:usesRelay:currentNATType:remoteNATType:relayConnectDuration:isInitiator:linkQuality:gksReturnCode:
sessionForceInternetInvitation
sessionID
sessionIDForAlias:salt:
sessionIDStr
sessionIDforPeer:
sessionInfoRequest
sessionInvitationReceivedWithAWDGUID:
sessionInvitationReceivedWithPayload:forTopic:sessionID:toIdentifier:fromID:transportType:
sessionInvitationSentWithAWDGUID:numberOfRecipients:
sessionKeyForToken:
sessionMessageReceived:fromID:withData:
sessionNegotiationCount:
sessionNetworkAvailabilityCheckOverrideBehavior
sessionReinitiateConnectedWithAWDGUID:
sessionReinitiateRequestedWithAWDGUID:
sessionReinitiateStartedWithAWDGUID:
sessionStartTimeWithToken:
sessionStartedWithAWDGUID:protocolVersionNumber:serviceName:clientType:
sessionToBlockMap
sessionToken
sessionTokenForURI:pushToken:fromURI:service:expirationDate:refreshDate:fromIdentity:includeSelfDevice:
sessionTokensForURIs:fromURI:service:fromIdentity:includeSelfDevice:fullyRemoveSelfDevice:
sessionTokensForURIs:fromURI:service:fromIdentity:includeSelfDevice:fullyRemoveSelfDevice:allowRefresh:
sessionWithGroupID:
sessionWithGroupUUID:
sessionWithInstanceID:
sessionWithUniqueID:
sessions
setAbsintheHello:
setAbsintheRetries:
setAbsintheUDID:
setAbusive:
setAcceptedRelaySession:
setAcceptedRelaySession:options:
setAcceptedRelaySession:relaySessionID:options:
setAccessoryIDs:
setAccessoryRequests:
setAccount:fromID:forGroup:
setAccountBuilder:
setAccountController:
setAccountDescription:
setAccountDisplayName:
setAccountID:
setAccountKeyByService:
setAccountRepair:
setAccountStatus:forProfileID:username:service:
setAckBlock:
setAction:
setActionByTarget:
setActive:
setActiveParticipantURIs:
setActiveRelayIP:
setActiveRelaySessionToken:
setActivity:
setActivityPolicy:
setActivityStatus:
setActivitySubActivity:
setActivityTimestamp:
setActivityTopic:
setAdHocServiceNames:
setAdditionalDictionary:
setAdminID:
setAggregatableMessages:
setAggregateMessages:
setAliasStrings:
setAliases:
setAllocateProtocolVersion:
setAllocateType:
setAllowPairingIdentities:
setAllowProxyQueries:
setAllowRegenerateRegisteredIdentity:
setAllowedTrafficClasses:
setAllowedTrafficClassifiersForDevice:classifiers:completion:
setAllowsLinkLocal:
setAlternateCallbackID:
setAlternateDelegate:
setAlternateGUID:
setAlwaysConnectedForCBUUID:
setAlwaysSkipSelf:
setAnonymizedSenderID:
setAppBool:forKey:
setAppID:
setAppValue:forKey:
setAppleID:
setAppleIDPrimaryDependentRegistrations:
setAppleIDWithDSID:inUse:forService:
setApplicationPublicIdentitys:
setApplicationVersion:
setArbiter:
setArgument:atIndex:
setAttemptCount:
setAttempts:
setAttributes:
setAudioEnabled:
setAudioEnabled:forSessionWithUniqueID:
setAudioEnabled:forSessionWithUniqueID:messageContext:
setAuthToken:
setAuthTokenForProfileID:username:service:authToken:selfHandle:accountStatus:outRequestID:completionBlock:
setAuthenticationCert:
setAuthenticationCert:forID:
setAuthenticationCertificate:forUser:
setAuthenticationDataSig:
setAuthenticationDataUserID:
setAuthenticationInfo:
setAuthenticationResponses:
setAuthenticationToken:
setAutomaticResetBlock:
setAutomaticResetInterval:
setAvailability:
setAvoidMainQueue:
setAvoidMainQueueOverrideToNO:
setAwdTopic:
setBAACert:
setBackingCache:
setBackingOTRSessionRef:
setBackingQueue:
setBackingStore:
setBackoffProvider:
setBasePhoneNumber:
setBlock:
setBluetoothLinkPreferences:
setBluetoothLinkPreferences:inputbps:outputbps:
setBluetoothMACAddress:
setBody:
setBroadcastBlock:
setBroadcastNeedsClientAck:
setBroadcastPerformed:
setBtUUID:
setBuild:
setBuildOfIdentityGeneration:
setBuildOfUnregisteredIdentityGeneration:
setBuildVersion:
setBulkedPayload:
setBundleID:
setByAddingObject:
setByAddingObjectsFromArray:
setByAddingObjectsFromSet:
setBypassDuet:
setBypassSizeCheck:
setBypassStorage:
setByteCompletedCount:
setByteMovementDelayThreshold:
setByteTotalCount:
setBytesReceived:
setBytesSent:
setCTAdapter:
setCTPNR:
setCTPNRByConsentCompletion:
setCache:
setCachedDataForClient:
setCachedDisabledByService:
setCachedIDStatus:ForID:fromURI:fromService:
setCachedIsSameSIM:
setCachedManateeAvailability:
setCachedRecordZone:
setCachedTokensBySessionID:
setCallID:
setCallbackQueue:
setCancelled:
setCapability:
setCapabilityFlags:
setCarrierNonce:
setCategory:
setCbuuid:
setCbuuidString:
setCert:
setChecksumEnabled:
setChecksumFailed:
setClearStateOnLaunch:
setClientConnection:
setClientContextData:
setClientDataUpdateBlocks:
setClientDatasByServiceType:
setClientID:
setClientInfo:
setClientInitTime:forConnectionUUID:
setClientOpenSocketCompletionTime:forConnectionUUID:
setClientProcessName:
setClientRemoteObjectByActivity:
setClientRemoteObjectsByTopic:
setClientType:
setClientUUID:
setClientUniquePID:
setClientUniquePID:sessionID:relayGroupID:relaySessionID:
setCloudConnection:
setCloudServiceConnector:
setCollaboratorProvider:
setCommCenterDead:
setCommand:
setCommandContext:
setCommands:forListener:
setCompletedMigration:
setCompletedUnitCount:
setCompletionBlock:
setCompletionBlocks:
setCompletionBlocksToURIsMap:
setCompletionQueue:
setCompressPayload:
setCompressed:
setCompressionInfo:
setCompressionState:
setConfig:
setConnectError:
setConnectReadyHandler:
setConnecting:
setConnection:
setConnectionContext:
setConnectionCountHint:
setConnectionID:
setConnectionInitTime:
setConnectionInitTime:forConnectionUUID:
setConnectionSetupStartTime:
setConnectionTimeout:
setConnectionTimer
setConnectionTimer:
setConnectionTimerCleared:
setConnectivityMonitor:
setContactStore:
setContactUtilities:
setContainer:
setContext:
setContinuityConnectCount:
setControlChannel:
setControlChannelCachedSYN:
setControlChannelVersion:
setConversationID:
setCredential:
setCredential:forUser:
setCtAdapter:
setCurrentLocalMasterKeyMaterial:
setCurrentLocalStableKeyMaterial:
setCurrentOutgoingFragmentedMessageID:
setCurrentPreflightStack:
setCurrentPromise:
setDSAuthID:
setDSHandle:
setDaemonClients:
setDaemonOpenSocketCompletionTime:forConnectionUUID:
setDaemonOpenSocketTime:forConnectionUUID:
setDaemonRootDirectory:
setData:
setDataLength:
setDataProtectionClass:
setDataProvider:forRealm:
setDataProviderByRealm:
setDataSource:
setDataToEncrypt:
setDatabaseCloseTimer:
setDatabaseLastUpdateTime:
setDateFormat:
setDecodableClasses:
setDecodingFailurePolicy:
setDecryptionBlock:
setDefaultActionURL:
setDefaultPairedDependentRegistrations:
setDefaultQueue:
setDefaultUnderlyingLink:
setDefaultUnderlyingLink:linkID:
setDelay:
setDelegate:
setDelegateOnMainQueue:
setDeliveryAcknowledgementBlock:
setDeliveryController:
setDeliveryMinimumTime:
setDeliveryStatusContext:
setDeliveryTime:
setDeniedToSend:
setDependencyProvider:
setDependentRegistrationAuthRetries:
setDependentRegistrationResponseCode:
setDependentRegistrations:
setDependentRegistrationsTTL:
setDestinationAddress:isFixedDestination:fromAddress:
setDestinationAddress:localIfIndex:isFixedDestination:fromAddress:
setDestinationAddressToDeviceIDMap:
setDestinationCorrelationIdentifier:
setDestinationDevice:
setDestinationPersister:
setDestinations:
setDestinationsLightweightStatus:
setDeviceBTUUID:
setDeviceCapabilities:
setDeviceCertificationRepair:
setDeviceConnectionInfo:
setDeviceFoundHandler:
setDeviceID:
setDeviceIdentifier:
setDeviceLostHandler:
setDeviceMonitor:
setDeviceName:
setDeviceScoreNonce:
setDeviceSignature:
setDeviceSignatureByService:
setDeviceTime:
setDeviceUniqueID:
setDeviceUniqueIDToCBUUID:
setDictionary:forKey:
setDidInvalidate:
setDidReceiveReestablishmentRequest:
setDidReceiveSIMSetupCompleteNotification:
setDirectory:
setDisableEncryption:
setDisableRemoteDeviceEncryption:
setDisallowQueryRefresh:
setDisallowRefresh:
setDisallowRetry:
setDisasterModeTokens:
setDiscretionaryNetworkBehavior:
setDispatchQueue:
setDisplayIDs:
setDisplayingAddNumberPrompt:
setDomainHash:
setDouble:forKey:
setDualInterfaceidQueryMessageDelivery:
setDuetIdentifiersOverride:
setDuetInterface:
setDuration:
setECVersion:withCompletion:
setENID:
setEmail:
setEmptyStatesLock:
setEnableCriticalReliability:
setEnableOTR:
setEnableQuickRelay:
setEnableSKE:
setEnableSingleChannelDirectMode:
setEnabled:
setEnabled:withReason:
setEncryptPayload:
setEncryptedData:
setEncryption:
setEncryptionBlock:
setEncryptionEnabled:
setEncryptionInitialized:
setEncryptionStateStruct:
setEncryptionType:
setEndSessionTimeout:
setEndSessionTimeoutTimer
setEndSessionTimer:
setEndSessionTimerCleared:
setEndTime:
setEndpoint:
setEndpointQueryListeners:
setEndpointState:
setEndpointTransparencyStates:
setEndpoints:
setEndpointsToEncryptedData:
setEnforceRemoteTimeouts:
setEngramID:
setEnqueuedDate:
setEntitledForAllTopics:
setEntitlements:
setError:
setErrorByService:
setErrorCode:
setErrorMessage:
setEvents:
setEvictionDate:
setEvictionTimer:
setExcessiveCachingCount:
setExcessiveCachingReportCounter:
setExistingRelayIP:
setExistingRelaySessionToken:
setExistingRelaySignature:
setExpectedNextIncomingSequenceNumber:
setExpectedNextOutgoingSequenceNumber:
setExpectsPeerResponse:
setExpiration:onFanout:withMessage:
setExpirationDate:
setExpirationManager:
setExpiry:
setExportedInterface:
setExportedObject:
setExtraCompletionBlocks:
setFailedTokenCache:
setFakeMKMWrapping:
setFallbackBlock:
setFamilyDevices:
setFamilyHandles:
setFamilyMembers:
setFanoutEncryptionManager:
setFeatureID:
setFetchRecordZonesCompletionBlock:
setFileOperationKind:
setFilePath:
setFileURL:
setFilename:
setFinalDestinations:
setFinishedRegistration:
setFireAndForget:
setFireTimeInterval:
setFirewallRateLimiter:
setFirewallStore:
setFirstDataPacketReceiveTime:
setFirstGossipChance:
setFirstIncomingSYNSequenceNumber:
setFirstPacketReceiveTime:
setFirstPacketReceiveTime:forConnectionUUID:
setFlags:
setForceAttachmentMessage:
setForceCellular:
setForceInternetInvitation:
setForceLegacyPK:
setForceOnePerFanout:
setForceRoll:
setForwardingSig:
setForwardingSigAlgorithm:
setForwardingTicket:
setFragmentationSize:
setFromID:
setFromIdentity:
setFullIdentity:
setGUID:
setGameCenterData:
setGenerationCounter:
setGenerationError:
setGossipPolicy:
setGossipRecipients:
setGroupData:
setGroupID:
setGroupIdentifer:
setGroupMemberCount:
setGroupName:
setGroupPayload:
setGroupStatusNotificationController:
setGuid:
setHandlers:
setHandlesForProfileID:username:service:handles:
setHardwareVersion:
setHasAcceptedSMSRequest:
setHasBeenProvisioned:
setHasDefaultAction:
setHasEndedSession:
setHasKtVersion:
setHasMatchingURIs:
setHasNgmVersion:
setHasNotifiedSuccess:
setHasPendingAllocation:
setHasPendingAllocation:forIDSSession:
setHasReceivedAPSDAck:
setHasRegisteredContainer:
setHasSpaceAvailable:
setHasStatus:
setHasTimestamp:
setHasTransparencyVersion:
setHasUnregisteredContainer:
setHeartbeatCenter:
setHelloMessage:
setHighPriority:
setHighPriorityConnectionSendingSet:
setHomePlmn:
setHttpMessageDelivery:
setIDCertificate:
setIDSSessionID:
setIDSVersion:
setIDStatusQueryController:
setIMEI:
setIMSI:
setIcon:
setIdentifier:
setIdentity:
setIdentityClassA:
setIdentityClassC:
setIdentityClassD:
setIdentityDataSource:
setIdentityPair:
setIdentityPrivateKey:
setIdentityToRegisterError:
setIdentityVersion:
setIdsDaemon:
setIdsDeviceConnectionUUID:
setIdsNRDeviceBridge:
setIdsNRPluginManager:
setIdsResponseCode:
setIdsServerBag:
setIdsUserID:
setIgnoreMaxRetryCount:
setImpactedServices:
setImportanceLevel:
setInFlightHeartbeatBlock:
setInFlightMessageCountLowWaterMark:
setInFlightResetBlock:
setInFlightSMSTimeoutBlock:
setIncomingDataFragments:
setIndividualPeerMessages:
setInferredExternalIP:
setInfoAttribute:
setInfos:
setInitialProcessTime:
setInitialServerTime:
setInitialSyncClientIDs:
setInitialSyncInProgress:forClientID:
setInitiatorsAcceptedToken:pushToken:
setInputBytesPerSecond:
setInstanceID:
setInterestingRegistrationProperties:
setIntermediateRootCert:
setInterruptionHandler:
setInvalidationHandler:
setInvitationManager:
setInvitationRetryCount:
setInvitationTimer
setInviteNeedsDelivery:
setInviteSentTime:
setInviteTimeout:
setInviteTimerCleared:
setInviteTimetout:forSessionWithUniqueID:
setInviteTimetout:forSessionWithUniqueID:messageContext:
setIpPreference:
setIsAdvertising:
setIsAltAccountPairing:
setIsAlwaysConnected:
setIsAudioEnabled:
setIsBeingHandedOff:
setIsBeingRemoved:
setIsBlackholed:
setIsBuildingContext:
setIsCDMA:
setIsClassCConnected:
setIsCloudConnected:
setIsCloudEnabled:
setIsControlChannel:
setIsDTLSEnabled:
setIsDefaultPairedDevice:
setIsDefaultPairedDevicePairedLocally:
setIsDefaultPairedDevicePairedRemotely:
setIsDefaultUser:
setIsDeviceInDualPhoneIdentityMode:
setIsDeviceInManualPhoneSelectionMode:
setIsDirectMsgChannel:
setIsDisabled:
setIsDonated:
setIsFinalMessage:
setIsForced:
setIsInServerBackoffMode:
setIsInUPlusOneMode:
setIsInternal:
setIsJoinAllocation:
setIsJunked:
setIsKeyExchangeEnabled:
setIsLightweightParticipant:
setIsLocal:
setIsLocalSetUpInProgress:
setIsMagnetIndicatingPeerIsAwake:
setIsMigratedSignature:
setIsNearby:
setIsNegotiating:
setIsNewUPlusOneSession:
setIsOnPhoneCall:forDeviceID:
setIsOptIn:
setIsPeerAlwaysConnected:
setIsPendingFetch:
setIsProxiedOutgoingMessage:
setIsPublicKeyDistributed:
setIsReady:
setIsReadyForEncrypting:
setIsRealTime:
setIsRegistered:
setIsRegistrationActive:
setIsReinitiate:
setIsSMSWarningUp:
setIsScreenSharingSession:
setIsSentToClient:
setIsSharedSession:
setIsTestRunning:
setIsUPlusOne:
setIsUserDisabled:
setIsVideoEnabled:
setIsVideoPaused:
setIvarQueue:
setJoinType:
setKeyIndex:
setKeyMaterialLength:
setKeyPairProvider:
setKeyPairSignature:
setKeyTransparencyVerifier:
setKeychainCache:
setKeychainData:service:account:accessGroup:allowSync:error:
setKeychainWrapper:
setKind:
setKtApplicationToKTRegStatus:
setKtCapable:
setKtDataForRegistration:
setKtDataSignature:
setKtLoggableData:
setKtPublicAccountKey:
setKtRegDataByServiceType:
setKtRegistrationDataManager:
setKtVersion:
setKvStore:
setLackAll:
setLanguage:
setLastBagRepairInterval:
setLastCall:
setLastCloudConnectedTime:
setLastConnection:
setLastCourierAck:
setLastDestinationSent:
setLastDisconnection:
setLastPacketTime:
setLastSelfVerifyDate:
setLastSendSMSTimer:
setLastStartTime:
setLastSuccessfulSentTime:
setLastSuccessfulUpsertDeviceRecord:
setLatestLinkType:
setLength:
setLinkLayerConnected:
setLinkLayerDisconnectTime:
setLinkPreferences:
setLinkPreferences:service:
setLinkPreferences:service:messageContext:
setLinkScore:
setLinkSuggestion:
setLinkType:
setListener:
setListenerID:
setListenerServices:commands:capabilities:
setListenerServices:commands:capabilities:messageContext:
setListeners:
setListenersByActivity:
setListening:
setListeningOnActivities:
setLiveMessageDelivery:
setLoadingRateLimiter:
setLocalBlob:
setLocalCID:
setLocalCN:
setLocalCallInfoData:
setLocalConnectionType:
setLocalContext:
setLocalDelivery:
setLocalDestinationDeviceUUID:
setLocalDeviceUpdatedHandler:
setLocalICEData:
setLocalKeyMaterial:
setLocalNATIP:
setLocalNATType:
setLocalParticipantID:forGroupID:
setLocalPartyID:
setLocalSA:
setLocalSKEData:
setLocalSetupInProgress:
setLocalUnauthenticatedFullIdentity:
setLocale:
setLock:
setLockdownManager:
setLogToRegistration:
setLoggingSequenceIncoming:
setLoggingSequenceOutgoing:
setLoginID:
setMEID:
setMainAccountGuid:
setMainAccountUUID:
setMainID:
setManateeRetries:
setManualQueueRemoval:
setMasterKeyIdentifiersReceivedByClient:
setMasterKeyMaterials:
setMaxAllowedMessageSize:
setMaxChunkSize:
setMaxCompatibilityVersion:
setMaxConcurrentMessages:
setMaxConcurrentStreams:
setMaxQueueSize:
setMaxRecipientMemory:
setMaxSize:
setMembers:forGroup:sessionID:lightweightStatusDict:
setMembershipURIs:
setMergeID:
setMergePolicyType:
setMessage:
setMessageCount:
setMessageDelivery:
setMessageHashStore:
setMessageID:
setMessagePriority:
setMessageSenderID:
setMessageSequenceNumber:
setMessageServerTimestamp:
setMessageToSend:
setMessagesGroupContext:
setMessenger:
setMetadataBlob:
setMidSynchronize:
setMigrated:
setMigrationBlock:
setMigrationContext:
setMigrationDefaultKey:
setMigrationPromise:
setMigrationTracker:
setMinCompatibilityVersion:
setModel:
setModifyRecordZonesCompletionBlock:
setModifyRecordsCompletionBlock:
setMostRecentIDSRegistrationReason:
setMultiQueue:
setMultiple:remove:appID:
setMuted:
setMuted:forSessionWithUniqueID:
setMuted:forSessionWithUniqueID:messageContext:
setNSUUID:onDeviceWithUniqueID:forService:
setNSUUID:onDeviceWithUniqueID:forService:messageContext:
setName:
setNeedsMigration:
setNeedsProvisioning:
setNeedsRenewal:
setNeedsToCheckPhoneNumberState:
setNegativeRegistrationUpdateCache:
setNegotiationCount:
setNegotiationTimer
setNetworkChangeNotifier:
setNewPg:
setNextByte:
setNextComponent:
setNextLocalMasterKeyMaterial:
setNextRegistrationDate:
setNextSendSMSDate:
setNgmPublicIdentity:
setNgmVersion:
setNonCloudWaking:
setNonWaking:
setNotificationCenter:
setNotificationDelayInSeconds:
setNotifyWhenConnectionReceivesBytes:
setNrDeviceMonitor:
setNrDevicePreferences:
setNrDevicePreferencesHandler:
setNrMonitorQueue:
setNumberOfAttemptsWithoutSuccessfulSend:
setNumberOfPreflights:
setNumberOfSuccessfulSends:
setNwConnection:
setOSVersion:
setOTRController:
setOTREncryptionBlock:decryptionBlock:
setOTRTestBlockFromCompletionBlock:token:
setObject:
setObject:forKey:
setObject:forKeyedSubscript:
setObserver:
setObserverProxies:
setOnlyAllowReads:
setOperation:
setOpportunisticCache:
setOpportunisticQueue:
setOptedIn:
setOptions:
setOriginPersister:
setOriginalTimestamp:
setOriginalbtUUID:
setOriginalfromID:
setOsVersion:
setOtrTestBlock:
setOutOfBandKey:
setOutgoingStallDetector:
setOutgoingStallDetectorName:
setOutputBytesPerSecond:
setPLMN:
setPNRReason:forUserUniqueIdentifier:
setPNRReasonByUserID:
setPacketBufferHandler:
setPacketBufferReadHandler:
setPacketLossTimer:
setPacketNotificationFilter:linkID:uniqueTag:isEnabled:
setPacketNotificationFilter:uniqueTag:isEnabled:
setPacketsPerSecond:
setPacketsReceived:
setPairWithSPPLink:
setPairedDeviceCBUUIDString:
setPairedDeviceInfo:
setPairedDeviceInfo:messageContext:
setPairedDeviceManagerCollaborator:
setPairingCollaborator:
setPairingManager:
setPairingProtocolVersion:
setPairingToken:
setParentPg:
setParentVersion:
setParticipantData:
setParticipantID:
setParticipantIDToAliasConverter:
setParticipantInfo:
setParticipantMirageHandshakeBlob:
setParticipantType:relayGroupID:relaySessionID:sessionStateCounter:
setPassword:forUsername:onService:
setPassword:forUsername:onService:messageContext:
setPasswordForProfileID:username:service:password:outRequestID:completionBlock:
setPasswordManager:
setPausable:
setPayload:
setPayloadMetadata:
setPeerCN:
setPeerCN:callID:
setPeerIDManager:
setPeerMap:
setPeerProtocolVersion:
setPeerProtocolVersion:forCallID:
setPeerResponseIdentifier:
setPendingCloudEnable:
setPendingCloudFlagOnDefaultPeer
setPendingDependentCheck:
setPendingResponseTokens:
setPeripheralManagers:
setPersistentMap:
setPersister:
setPersonalCBUUIDString:
setPhoneBookNumber:
setPhoneNumberValidationRetryCount:
setPhoneNumberValidationStartDate:
setPhoneRepairTimer:
setPhoneUser:
setPhoneUserSubscriptionSource:withRequestUUID:
setPhoneUserSubscriptionSource:withRequestUUID:messageContext:
setPlistCachePath:
setPlugin:
setPluginImplementsWatchDidStartAdvertising:
setPluginImplementsWatchDidStopAdvertising:
setPnrReason:
setPolicy:
setPolicyTrafficClassifiers:
setPort:
setPredicate:
setPreferInfraWiFi:
setPreferInfraWiFi:service:
setPreferInfraWiFi:service:messageContext:
setPreferInfraWiFi:services:
setPreferInfraWiFiRequest:services:
setPreferences:forSessionWithUniqueID:
setPreferences:forSessionWithUniqueID:messageContext:
setPreflighStackStore:
setPreflightStack:forIdentifier:
setPreviousAccessToken:
setPreviousLocalStableKeyMaterial:
setPreviousRegisteredIdentityContainer:
setPreviousRelayIP:
setPrimaryRegistrationURIs:
setPrioritizedTokenList:
setPriority:
setPriorityQueue:
setPrivateDeviceData:
setPrivateKey:
setProduct:
setProductBuildVersion:
setProductVersion:
setProfileID:
setProgressBlock:
setProperties:
setProperties:forUser:
setProtobuf:
setProtocol:
setProtocolVersion:
setProvider:
setPseudonymAlias:
setPseudonyms:
setPublicIdentity:
setPublicIdentityData:
setPublicKey:
setPublicKeyData:
setPublicKeyStorage:
setPublishedStreams:
setPurgeAtExpiration:
setPurgeClientDataBlocks:
setPushCertificate:
setPushHandlerPort:
setPushListener:
setPushPriority:
setPushPrivateKey:
setPushPublicKey:
setPushToken:
setPushTokenToQRSessionID:
setPushTokenToSKMsMapping:
setPushTopic:
setQrError:
setQrReason:
setQueryCompletionBlock:
setQueryHandler:
setQueryQueue:
setQueue:
setQueueManager:
setQueueMap:
setQueueOneIdentifier:
setQuickRelayRequest:
setQuickRelayRequestsCount:
setQuickRelaySessionToken:
setQuickSwitchHelper:
setRapportClient:
setRateLimitMap:
setRealTimeEncryptionPublicKey:forDevice:fromID:groupID:sessionID:serverDate:wrapMode:
setRealm:
setRealmByListener:
setReason:
setRecentlyBlockedHandles:
setRecipientPushToken:
setRecipients:
setRecordFetchedBlock:
setReducerBlock:
setReestablishmentRequestReceiveTime:
setRegionBasePhoneNumber:
setRegionID:
setRegionServerContext:
setRegistered:
setRegisteredDeserializationError:
setRegisteredKTData:
setRegisteredKeychainError:
setRegistrationAttemptRateLimiter:
setRegistrationCert:
setRegistrationController:
setRegistrationDate:
setRegistrationKeyManager:
setRegistrationProperties:
setRegistrationQueue:
setRegistrationReasonTracker:
setRegistrationStateChangedCounter:
setRegistrationStateChangedDate:
setRegistrationStatus:
setRegistrationStatus:error:alertInfo:
setRegistrationType:
setRegistrations:
setRelayBuildVersion:
setRelayExpiryTimeStamp:
setRelayHighPriorityPort:
setRelayIP:
setRelayIPv6:
setRelayInitiate:
setRelayPort:
setRelaySessionID:
setRelaySessionKey:
setRelaySessionToken:
setRelaySoftwareVersion:
setRemoteAssumeRemoteDeviceEncryption:
setRemoteBlob:
setRemoteCID:
setRemoteCallInfoData:
setRemoteConnectionGUID:
setRemoteConnectionType:
setRemoteContext:
setRemoteDeviceEncryptionInfo:
setRemoteDeviceVersion:
setRemoteICEData:
setRemoteInstanceID:
setRemoteNATType:
setRemoteObjectInterface:
setRemotePartyID:
setRemoteSA:
setRemoteSKEData:
setRemoteUnauthenticatedPublicIdentity:
setRemoteUseCloudPairedControlChannel:
setRemoteUsePhoneContinuityLocalMessage:
setReply:
setReportAction:
setReportingDataBlob:
setRepresentedApplicationBundle:
setReqCount:
setRequest:
setRequestID:
setRequestIDStr:
setRequestIDToSession:idsSessionID:
setRequests:
setRequireAll:
setRequireAllRegistrationProperties:
setRequireBT:
setRequireBluetooth:
setRequireLackOfRegistrationProperties:
setRequireLocalWiFi:
setRequireUserInteraction:
setRequiredCapabilities:
setRequiredCapabilities:requiredLackOfCapabilities:
setRequiredCapabilities:requiredLackOfCapabilities:forSessionWithUniqueID:
setRequiredCapabilities:requiredLackOfCapabilities:forSessionWithUniqueID:messageContext:
setRequiredForMessaging:
setRequiredLackOfCapabilities:
setRequiredUpdate:
setResolvedEndpointsDidUpdateHandler:
setResourceMetadata:
setResourcePath:
setResponseAbsintheResponse:
setResponseAbsintheServKey:
setResponseAccessTokens:
setResponseAccessoryID:
setResponseAdminAcccessToken:
setResponseAlertInfo:
setResponseBasePhoneNumber:
setResponseCarrierToken:
setResponseCertificate:
setResponseCertificateData:
setResponseCertificateExpiration:
setResponseCode:
setResponseConsentTokens:
setResponseDeviceScoreNonce:
setResponseEngramID:
setResponseEntries:
setResponseError:
setResponseExpiry:
setResponseExtraInfo:
setResponseHandles:
setResponseIdentities:
setResponseMechanisms:
setResponseMessage:
setResponseOrigin:
setResponsePresenceTopic:
setResponseRegionID:
setResponseRegistrations:
setResponseServiceUserIDs:
setResponseServices:
setResponseSessionInfo:
setResponseSpamMessage:
setResponseSpamMessages:
setResponseStatus:
setResponseTimeStamp:
setResponseUserID:
setResponseValidated:
setResponseVersion:
setResponses:
setRestoreMonitor:
setRestoreTimer:
setRestrictions:
setResultExpected:
setResumeResourceTransfers:
setRetries:
setRetryCount:
setRetryInAirplaneMode:
setReunionSyncClientIDs:
setReunionSyncCollaborator:
setReunionSyncInProgress:forClientID:
setRollingError:
setRoute:
setSIMPhoneUserSynchronizer:
setSIMResponder:
setSMSSignature:mainID:
setSSRCRecv:
setSSRCSend:
setSavePolicy:
setSaveQueue:
setSaveTimer:
setScheduledBlock:
setScopeID:
setScoringNonce:
setSd:
setSdCopy:
setSdNumberNoClose:
setSdOriginal:
setSeal:
setSelectedPhoneNumberRegistrationSubscriptionLabels:
setSelectedPhoneNumberRegistrationSubscriptionNumber:
setSelectedSubscriptions:withCompletion:
setSelector:
setSelfAllocationCount:
setSelfHandle:
setSelfHealRateLimiter:
setSelfURI:
setSelfVerifyThrottleTime:
setSendBlock:
setSendMode:
setSendOnePerToken:
setSender:
setSenderExternalIP:
setSenderURI:
setSent:
setSentMessageDataSize:
setSentToRemotes:
setSeqRecvStart:
setSeqSend:
setSeqSendStart:
setSequenceNumber:
setSerialNumber:
setSerialPersistQueue:
setServerBag:
setServerDesiredKeyMaterials:signer:
setServerDesiredMaterialsForSession:materials:signer:
setService:
setServiceAdHocType:
setServiceAllowLiveMessageDelivery:
setServiceAllowLocalDelivery:
setServiceAllowProxyDelivery:
setServiceAllowWiProxDelivery:
setServiceConnection:
setServiceConnector:
setServiceController:
setServiceDuetIdentifiers:
setServiceIdentifier:
setServiceIndexToKTRegDataConfigs:
setServiceIndexToKeyConfigs:
setServiceIsDSBased:
setServiceMinCompatibilityVersion:
setServiceName:forConnectionUUID:
setServicePushTopic:
setServiceSignatures:
setServiceTypes:
setServiceUseiMessageCallerID:
setServiceUserID:
setServiceWantsReflectedSend:
setServiceWantsTinkerDevices:
setServices:
setSessionController:
setSessionForceInternetInvitation:
setSessionID:
setSessionIDStr:
setSessionInfoRequest:
setSessionNegotiationComplete:
setSessionNegotiationStart:
setSessionReady:
setSessionToBlockMap:
setSessions:
setSharedSession:
setSharedSessionHasJoined:
setShouldAllowCloudDelivery:
setShouldAllowLiveMessageDelivery:
setShouldAutoRegisterAllHandles:
setShouldConnectToQRServer:
setShouldEnforceRemoteTimeout:
setShouldHaveRegisteredIdentity:
setShouldHaveUnregisteredIdentity:
setShouldIncludeDefaultDevice:
setShouldListen:
setShouldListen:forActivity:completion:
setShouldPostNotifications:
setShouldProtectTrafficUsingClassA:
setShouldQuickSwitchAfterIPSecConnected:
setShouldReregOnManateeAvailability:
setShouldSetAllowlistUUIDForStreamingSocket:
setShouldShowSubordinateIcon:
setShouldStartBTLinkManager:
setShouldStopBTDatagramLink:
setShouldSupressRepairLogic:
setShouldUseAbsinthe:
setShouldUseCrossLayerLogging:
setShouldUseIPsecLink:
setShouldUseIPsecLinkForDefaultPairedDevice:
setSigAlgorithm:
setSignature:
setSigningSession:
setSilentlyFailMessagesOnSwitch:
setSimDeactivationRequestRateLimiter:
setSmallWindowSMSTimeoutRateLimiter:
setSocketTrafficClass:
setSoftwareVersion:
setSourcePeerID:
setSpamMessages:
setSpec:
setSpecific:
setSrtpProtocolVersion:
setStableKeyIdentifiersSentToClient:
setStableKeyMaterials:
setStartConnectingDate:
setStartTime:
setState:
setState:forProperty:deviceUniqueID:
setStateFlags:
setStateMachineByUserID:
setStateManager:
setStateProvider:
setStatus:
setStoredActivityTopics:
setStoredSize:
setStreamID:
setStreamInfo:
setSubService:
setSubServiceAccountUUID:
setSubscribedStreams:
setSubsequentGossipChance:
setSubsystem:
setSuccess:
setSuccess:forConnectionUUID:
setSuccessful:
setSuccessfulSync:
setSuperService:
setSupportedMessageTypes:
setSupportedServicesToken:
setSupportsCloudConnections:
setSupportsLegacyOTRSessionToken:
setSuspendTraffic:
setSuspendTrafficCheckTime:
setSuspended:
setSyncCredential:
setSyncQueue:
setSystemAccountAdapter:
setSystemAccountUserSynchronizer:
setSystemMonitor:
setTargetPeerID:
setTargetService:
setTargetSessionToken:
setTempPhoneCredential:forID:
setTempUserID:
setTemporaryPhoneEmail:
setTemporaryPhoneUserSynchronizer:
setTerminusConnected:
setTerminusNearby:
setTerminusRegistered:
setTestData:
setTimeBase:
setTimeBase:forIDSSession:
setTimeConnected:
setTimeDisconnected:
setTimeEnqueued:
setTimeSent:
setTimeSubscribed:
setTimeZone:
setTimeout:
setTimeoutIntervalForRequest:
setTimerBlock:
setTimerMap:
setTimestamp:
setTitle:
setToDeviceID:
setToURI:
setToken:
setTokens:
setTopic:
setTopics:
setTopics:forListener:
setTopicsToListenOn:
setTotalUnitCount:
setTrafficClass:
setTransactionQueue:
setTransient:
setTransparencyDaemon:
setTransparencyVerifier:
setTransparencyVersion:
setTransportType:
setTrustedServices:
setTtlCache:
setTtlInSeconds:
setUDID:
setUPlusOneModeForSessionID:isUPlusOneEnabled:
setURIs:
setUUID:
setUint32Key:
setUnSavedidentityClassA:
setUnSavedidentityClassC:
setUnSavedidentityClassD:
setUnappliedRollingTicket:
setUncompressedData:
setUnderlyingService:
setUniqueID:
setUnknownSenderURI:
setUnregisteredDeserializationError:
setUnregisteredIdentityContainer:
setUnregisteredKTData:
setUnregisteredKeychainError:
setUnverifiedPushTokens:
setUploadedToKVS:
setUriSuggester:
setUris:
setUrisToParticipantIDs:
setUseBTDatagramPipe:
setUseDictAsTopLevel:
setUseDynamicServiceName:
setUsePairingKey:
setUseQRDirectly:
setUseSecureQRControlMessage:
setUseStunMICheck:
setUsedMMCS:
setUser:
setUserAccountSynchronizer:
setUserAgent:
setUserConfiguration:
setUserConsentDeniedForCTPNR:
setUserDefaults:
setUserHandle:
setUserID:
setUserInfo:
setUserInfoObject:forKey:
setUserStore:
setUserUniqueIdentifier:
setUserVisibleName:
setUsersToTimers:
setUsersToTimersLock:
setUsesNotificationCenter:
setUtunController:
setUtunDeliveryController:
setUtunSocket:
setValidateContextDate:
setValidateContextTTL:
setValidationContextDisabled:
setValidationContextQueue:
setValidationData:
setValidationInfoByMechanism:
setValidationMessageSendBlock:
setValidationSession:
setValue:forKey:
setValue:forKey:appID:
setVerboseFunctionalLogging:
setVerboseLogging:
setVerbosePerformanceLogging:
setVerifiedPushTokens:
setVersion:
setVettedEmails:
setVifName:
setWaitingForMigration:
setWakingPushPriority:forTopic:messageContext:
setWakingTopics:opportunisticTopics:nonWakingTopics:forListener:
setWantsCertifiedDelivery:
setWantsDeliveryStatus:
setWantsFirewallDonation:
setWantsMultipleResponses:
setWantsNotificationResponsesDelivered
setWantsProgress:
setWantsResponse:
setWantsRetries:
setWasDisabledAutomatically:
setWasInitiallySetupUsingIDSPairing:
setWasPrimary:
setWasWrittenToConnection:
setWatchesDataProtectionLockState:
setWeight:
setWiFiAssistState:
setWiFiAssistState:isWiFiAssistEnabled:
setWideWindowSMSTimeoutRateLimiter:
setWillSendBlock:
setWithArray:
setWithObject:
setWithSet:
setWorkloop:
setWpConnectionErrorCode:
setWpConnectionErrorDomain:
setWpConnectionErrorUserInfo:
setWrapMode:
setWriteCoalescingDelay:
setWriteCoalescingLeeway:
setWriteHandler:
setXpcQueue:
setZoneID:
set_candidateEmails:
setup
setupAccountWithCompletionBlock:
setupAccountWithLoginID:serviceName:accountType:accountConfig:authToken:password:transactionID:
setupAccountWithLoginID:serviceName:accountType:accountConfig:authToken:password:transactionID:messageContext:
setupActivityMonitorClient:forActivity:
setupCompleteForAccount:transactionID:setupError:
setupCompleteWithInfo:
setupCompletedForPairedDeviceWithID:completion:
setupContainerCache
setupDataConnectionWithDeviceConnectionInfo:options:
setupIPsecLinkForDeviceConnectionInfo:
setupKeys
setupLocalAccountForService:
setupNewAllocation:sessionID:fromIdentity:fromURI:fromService:options:connectReadyHandler:
setupNewAllocationToDevice:options:connectReadyHandler:
setupNewDeviceConnectionInfoForCbuuid:deviceUniqueID:identityPair:remoteDeviceEncryptionInfo:shouldUseIPsecLink:
setupNewIncomingSessionWithOptions:
setupNewOutgoingSessionWithOptions:
setupNewSessionInfoWithToken:
setupNewSessionWithConfiguration:
setupNewSessionWithConfiguration:messageContext:
setupPhoneNumberRepairTimer
setupRealtimeEncryptionController:forAccountWithID:
setupRealtimeEncryptionController:forAccountWithID:messageContext:
setupServerMessagingClient:withUUID:forTopic:
setupUTunForDeviceConnectionInfo:
setupWithLocalURI:remoteURI:pushToken:service:cert:
setupWithLocalURI:remoteURI:pushToken:service:cert:keyType:keyDiversifier:
sharedApplicationData
sharedDefaults
sharedFactory
sharedInstance
sharedInstanceForBagType:
sharedInstanceForDataProtectionClass:
sharedInstanceWithPortName:
sharedSession
sharedSessionHasJoined
sharedState
shortDescription
shortDescriptionForDataProtectionClass:
shortDescriptionForLocalAddress:remoteAddress:
shouldAllowCloudDelivery
shouldAllowLiveMessageDelivery
shouldAllowProxyDelivery
shouldAutoRegisterAllHandles
shouldConnectToQRServer
shouldDisableAccount:
shouldDisableService:
shouldDropMessageIfOutOfFamilyPhoneNumber:forService:withAppleIDAccount:
shouldEnableHomeNumber
shouldEncrypt
shouldEnforceRemoteTimeout
shouldFirewallDropForAllCategories
shouldFirewallDropMessageForFromID:mergeID:service:
shouldForwardErrorForEncryptionType:forceECC:
shouldGossipToURI:
shouldHandleMessageWithUpdateHash:command:
shouldHaveRegisteredIdentity
shouldHaveUnregisteredIdentity
shouldIncludeDefaultDevice
shouldIncludeDefaultDeviceAsDestinationForMessageForFromID:
shouldListen
shouldLoadService:
shouldMinimizeBagCacheTime
shouldNotSyncPhoneNumberAccounts
shouldPairDirectlyOverIPsec
shouldPostNotifications
shouldPreventDuplicateTokensInAllocationForServiceIdentifier:
shouldProxyMessageForService:toIdentifier:
shouldQueryOnEveryQRAllocationForServiceIdentifier:
shouldQueryUpdateOfParams:
shouldQuickSwitchAfterIPSecConnected
shouldReAuthenticateForGDRResultCode:retries:
shouldRegisterOnManateeAvailability
shouldRegisterUsingDSHandle
shouldReplace:
shouldReportMetric
shouldReportUPlusOneKey
shouldReregOnManateeAvailability
shouldReregisterOnManateeAvailabilityWithCompletion:
shouldRollEncryptionIdentity
shouldSelfVerifyBecauseOfPeer
shouldSendToDestination:
shouldSetAllowlistUUIDForStreamingSocket
shouldShowPeerErrorsFor:pushToken:fromURI:service:
shouldShowUsageNotifications
shouldSilentlyFailMessagesOnSwitch
shouldStopBTDatagramLink
shouldSupressRepairLogic
shouldSyncAccounts
shouldSyncTrustCircleAfterSelfQueryForServiceIdentifier:
shouldTTLCacheEvictExpiredItems:
shouldUseAbsinthe
shouldUseCrossLayerLogging
shouldUseIPsecLink
shouldUseIPsecLinkForDefaultPairedDevice
shouldUseIPsecLinkForDefaultPairedDeviceAndLogQuery:
shouldUseSelfTokens
shouldVerifySignatureForMaterialType:
shutDownSim2HostServer
shutdown
sigAlgorithm
sign:forType:error:
signAndProtectMessage:withError:
signData:completionBlock:
signData:serverTimestamp:
signData:usingApplicationKeyIndex:diversifier:error:
signData:withAlgorithm:onService:options:requestUUID:
signData:withAlgorithm:onService:options:requestUUID:messageContext:
signData:withError:
signData:withSignatureType:error:
signData:withType:onQueue:error:
signData:withType:onQueue:withCompletion:
signature
signatureWithObjCTypes:
signatures
signedData
signerWithKeyType:keyDiversifier:service:
signingSession
signingTimestamp
silentlyFailMessagesOnSwitch
silentlySetAuthenticationCertificate:forUser:
silentlySetSelectedPhoneNumberRegistrationSubscriptionLabels:
simDeactivationInfoRateLimitCount
simDeactivationInfoRateLimitInterval
simDeactivationRequestRateLimiter
simulateDecryptionFailure
sizeOfKeysWithValues
slot
slotID
slowCPUDevice
smallDescription
smallWindowSMSTimeoutRateLimiter
smsIDs
smsSendDate
smsSignature
smsSignatureForID:
socket
socketClosedForService:isToDefaultPairedDevice:closeError:socketError:bytesSent:packetsSent:bytesReceived:packetsReceived:
socketOpenedForService:isToDefaultPairedDevice:openError:socketError:
socketPairConnection
socketPairMessage
socketPairMessageWithCommand:streamID:sequenceNumber:messageID:expectsPeerResponse:wantsAppAck:compressPayload:compressed:didWakeHint:peerResponseIdentifier:messageUUID:payload:protobuf:resourcePath:resourceMetadata:expiryDate:
socketTrafficClass
sortUsingComparator:
sortedArrayUsingComparator:
sortedArrayUsingSelector:
sourcePeerID
sourceType
spamMessage
spamMessages
spamReporting
spec
specific
sponsorAlias
srtpProtocolVersion
stableGroupID
stableKeyIdentifiersSentToClient
stableKeyMaterialForGroup:
stableKeyMaterials
stablekeyMaterialCacheToGroup:
standardUserDefaults
start
startAdvertising:
startAdvertisingOfType:withData:
startAdvertisingOfType:withData:withOptions:
startBTDatagramLinkForDeviceUniqueID:cbuuid:
startBagLoad
startCollectingMetricsForServerStorageStateMachineFor:isPrimary:
startCompressionForConnection:deviceConnectionInfo:
startConnectingDate
startConnectionAsInitiator:peerProtocolVersion:errorHandler:
startConnectionForDevice:isInitiator:remotePartyID:useStunMICheck:
startConnectionWithCallID:usingInviteData:isCaller:relayResponseDict:didOriginateRelayRequest:capabilities:error:
startControlChannelWithDevice:endpoint:
startCountingDown
startDataChannelWithDevice:genericConnection:serviceConnectorService:endpoint:
startDatagramLink
startDatagramLinkWithEndpointIdentifier:
startDatagramLinkWithName:
startFairplayAuthenticationForDeviceWithCbuuid:
startGlobalLinkForDevice:
startIdsNRDeviceBridgeAndPreferenceHandlerWithIdentifier:
startKeepAliveTimer:relaySessionID:
startLinkForDeviceUniqueID:cbuuid:
startLinkProbing:
startLinkProbing:options:
startListeningOnActivity:
startListeningOnClientSocket:isRawSocket:
startOTRTest:priority:
startOTRTest:priority:messageContext:
startQRSession
startQueryForURIs:fromIdentity:fromURI:fromService:context:completionBlock:
startQueryForURIs:fromIdentity:fromURI:fromService:forSending:forRefresh:completionBlock:
startQueryForURIs:fromIdentity:fromURI:fromService:forSending:forRefresh:isForced:completionBlock:
startRequestWithCompletionHandler:
startScanningForType:withData:mask:
startScanningForType:withData:mask:boostedScan:duplicates:
startScanningForType:withData:mask:peers:
startScanningForType:withData:mask:peers:boostedScan:duplicates:
startScanningForType:withData:peers:
startTime
startTrackingActiveRegistration:
startTrackingRegisteredAccountID:
startTrackingRegistration:
startUDPGlobalLinkForDevice:
startWithOptions:
state
stateFlags
stateMachineByUserID
stateManager
stateProvider
statistics
statisticsForDataProtectionClass:
status
statusFlags
sthReceivedFromGossipReceipient:
sthsReceivedFromPeers:error:
stop
stopAdvertisingOfType:
stopAnyUnfinishedSynchronization
stopAtAuthentication
stopBTDatagramLinkForDeviceUniqueID:cbuuid:
stopCallID:
stopCollectingMetricsForServerStorageStateMachineFor:
stopDatagramLink
stopDatagramLinkWithEndpointIdentifier:
stopDatagramLinkWithName:
stopGlobalLinkForDevice:
stopIdsNRDeviceBridgeAndPreferenceHandler
stopKeepAlive:
stopKeepAlive:linkIDs:
stopKeepAliveTimer:relaySessionID:
stopLinkForDeviceUniqueID:cbuuid:disconnectWP:
stopLinkProbing:
stopLinkProbing:options:
stopListeningOnActivity:
stopLocalPairingForDeviceWithID:completion:
stopLocalSetup
stopScanningForType:
stopTrackingRegisteredAccountID:
stopTrackingRegistration:
stopUDPGlobalLinkForDevice:
storageIdentifier
storageItemNameForLegacyIdentityIdentifier:
storeAccountIdentityItem:withCompletion:
storeAccountTask
storeActivityDescription:forActivity:
storeEncryptionSequenceNumber:groupID:
storeFullCluster:completion:
storeIncomingMessage:forTopic:fromID:messageUUID:messagePayload:dedupBehavior:completionBlock:
storeIncomingMessage:forTopic:fromID:messageUUID:messagePayload:isLocal:dedupBehavior:completionBlock:
storeItem:withCompletion:
storeOutgoingMessageWithSendParameters:guid:canSend:canBypassSimilarMessages:fromQueue:completionBlock:
storeSessionKey:token:
storeSubscription:forActivity:
storeUpdates:forActivity:
storedActivityTopics
storedDescriptionForActivity:
storedIncomingFamilyMessage
storedSize
storedUpdatesForActivity:
stream:handleEvent:
streamID
streamInfo
streamWithParticipantID:streamArray:anyParticipant:anyStream:
string
stringByAppendingFormat:
stringByAppendingString:
stringByPaddingToLength:withString:startingAtIndex:
stringByRemovingCharactersFromSet:
stringByReplacingOccurrencesOfString:withString:
stringByResolvingAndStandardizingPath
stringComponentsForServiceConnectorService:
stringForKey:
stringFromContact:style:
stringGUID
stringGUIDForObject:
stringValue
stringWithCString:encoding:
stringWithFormat:
stringWithLTREmbedding
stringWithUTF8String:
strongToStrongObjectsMapTable
stunRequestToBuffer:outputLength:transactionID:reqCount:userName:usernameLen:sendTime:keyData:remainingLength:
stunResponseToBuffer:outputLength:transactionID:reqCount:echoTime:delay:keyData:remainingLength:
subActivity
subService
sub_services
subarrayWithRange:
subdataWithRange:
submitAWDMetricsForIDSSessionAcceptReceived
submitAWDMetricsForIDSSessionAcceptSent
submitAWDMetricsForIDSSessionCancelReceived
submitAWDMetricsForIDSSessionCancelSentWithRemoteEndReason:numberOfRecipients:
submitAWDMetricsForIDSSessionCompleted
submitAWDMetricsForIDSSessionConnected
submitAWDMetricsForIDSSessionDeclineReceived
submitAWDMetricsForIDSSessionDeclineSent
submitAWDMetricsForIDSSessionInvitationReceived
submitAWDMetricsForIDSSessionInvitationSentWithNumberOfRecipients:
submitAWDMetricsForIDSSessionReinitiateConnected
submitAWDMetricsForIDSSessionReinitiateRequested
submitAWDMetricsForIDSSessionReinitiateStarted
submitAWDMetricsForIDSSessionStarted
submitAWDMetricsForIDSSessionWithEndReason:
subscribeForInfo:onActivity:withCompletion:
subscribeInfo:forActivity:withCompletion:
subscribedStreams
subscribedURIs
subscriptionSlot
subsequentGossipChance
subsequentGossipChanceFromBag
subservicesByPrimaryService
substringFromIndex:
substringToIndex:
subsystem
successful
superAccount
superService
superclass
supportIPsec
supportedMessageTypes
supportedServicesToken
supportedVersion
supportsAnimojiV2
supportsAppleIDIdentification
supportsApplePay
supportsCloudConnections
supportsDeviceToDeviceEncryption
supportsFMDV2
supportsHDRdecoding
supportsHEIFEncoding
supportsIdentification
supportsKeySharing
supportsLegacyOTRSessionToken
supportsMMS
supportsMessageOfType:
supportsReinitiate
supportsSMS
supportsSMSIdentification
supportsSecureCoding
supportsSimultaneousVoiceAndDataRightNow
supportsTethering
supportsUWB
supportsVenice
suspendLink:
suspendOTRNegotiation:
suspendSessionNegotiation:askedByPairedDevice:
suspendSocketWithOptions:
suspendTraffic
suspendTrafficCheckTime
suspended
switchActivePairedDeviceWithID:completion:
syncCacheWithKeychain
syncCloudPriorityMessageStatistics
syncCredential
syncPriorityMessageStatistics
syncQueue
syncQueueForPriority:
synchronize
synchronizeAccountsWithRemoteInfo:service:
synchronizeAppID:
synchronizeWithCompletionHandler:
sysdiagnose_keyTransparency
sysdiagnose_oversized
systemAccountAdapter
systemAccountUserSynchronizer
systemApplicationDidBecomeActive
systemApplicationDidEnterBackground
systemApplicationDidResume
systemApplicationDidResumeForEventsOnly
systemApplicationDidSuspend
systemApplicationDidSuspendForEventsOnly
systemApplicationWillEnterForeground
systemApplicationWillResignActive
systemDidBecomeIdle
systemDidBecomeUnidle
systemDidEnterDataProtectionLock
systemDidEnterMemoryPressure
systemDidFastUserSwitchIn
systemDidFastUserSwitchOut
systemDidFinishMigration
systemDidLeaveDataProtectionLock
systemDidLeaveFirstDataProtectionLock
systemDidLeaveMemoryPressure
systemDidLock
systemDidStartBackup
systemDidStopBackup
systemDidWake
systemIsShuttingDown
systemMonitor
systemMonitorAdapter
systemRestoreStateDidChange
systemScreenDidPowerDown
systemScreenDidPowerUp
systemSupportsPhoneNumberRegistration
systemSupportsServiceType:accountType:isTemporary:
systemSupportsServiceType:registrationType:
systemWillShutdown
tapToRadarWithTitle:message:context:completion:
targetPeerID
targetService
targetSessionToken
targetToken
tbsKTIDSRegistrationData
tearDownEncryptionForDeviceUniqueID:cbuuid:
tempPhoneCredentialForID:
tempUserID
temporaryPhoneEmail
temporaryPhoneUserSynchronizer
temporaryPhoneUserWithFinishedRegistration
temporaryPhoneUserWithNotifiedSuccess
temporaryPhoneUserWithUpdatedExpirationDate:
terminateCallDueToIdleClientForLink:
terminateStateMachineForTopic:
terminusConnected
terminusNearby
terminusRegistered
testCloudQRConnection:
testCloudQRConnection:messageContext:
testData
testOptions
test_receiveData:forKey:fromParticipant:
then:
threadSafeServiceWithAccountUniqueID:
ticket
timeConnected
timeDisconnected
timeEnqueued
timeIntervalSince1970
timeIntervalSinceDate:
timeIntervalSinceNow
timeIntervalSinceReferenceDate
timeOfEvent
timeSent
timeSinceDateOnAccount:
timeSinceLastRegistrationFailureOnAccount:
timeSinceLastRegistrationSuccessOnAccount:
timeSubscribed
timeToCacheNegativeResultsForService:
timeToCacheResultsForIDStatus:forService:
timeToCacheURI:fromURI:service:forStatus:
timeToCacheUnknownResultsForService:
timeToSend
timeZoneForSecondsFromGMT:
timedOutWaitingForSMS
timerBlock
timerMap
timestamp
timing
tinkerMessagingOnly
toDeviceID
toURI
token
tokenURINegativeCacheItemForTokenURI:service:
tokens
topMechanism
topic
topicForStreamID:
topicStringToSubscribedInfo
topicsToListenOn
totalBytes
totalBytesReceived
totalFragmentCount
totalPacketsReceivedForDevice:services:
totalPacketsSentForDevice:services:
trackMMLMessages:forURIs:
trackMMLMessages:forURIs:messageQueue:
trackMessages:forURIs:
trackMessages:forURIs:messageQueue:
trackedRegistrations
trackingPreventionSecret
trafficClassesChanged
transactionID
transactionQueue
transient
translateServiceName:toStreamID:createIfNotFound:mappingCreated:remoteInstanceID:remoteInstanceIDChanged:
translateStreamID:toServiceName:remoteInstanceID:remoteInstanceIDChanged:
transparencyBlob
transparencyDaemon
transparencyGetKTSignatures:complete:
transparencyStatus
transparencyTicketForQueryResultsWithIndex:verificationState:entries:localURI:
transparencyTicketForRegistrationWithIndex:verificationState:entry:
transparencyTicketsForURIs:service:fromURI:
transparencyVerifier
transparencyVerifierSharedInstance
transparencyVersion
transparentEndpointViewer
transportType
triggerAllFirewallNotificationsWithHandle:delay:service:
triggerBTCorruptionRecovery
triggerBTCorruptionRecoveryForCBUUID:
triggerCaptureWithEvent:context:completion:
triggerCaptureWithEvent:destinations:context:completion:
triggerFinalDeregister
triggerFinalDeregisterWithMessageContext:
triggerFirewallDBCleanupWithInterval:
triggerFixedInterfaceLinksDidConnect
triggerKeyRollWithCompletion:
trimmedString
trustedRemoteKeyTransparencySignatureForServiceIdentifier:pushToken:
trustedServicesAtIndex:
trustedServicesCount
trustedServicesType
tryConsumePacketBuffer:
tryForceFamilyFetch
tryForceFamilyFetchWithMessageContext:
tryNextContinuityPeer:
ttlCache
ttlCache:shouldEvictObject:forKey:
ttlCache:willReturnCachedObject:forKey:completion:
ttlInSeconds
tunnelService
type
uTunController
uTunDeliveryController
uint32Key
unSavedidentityClassA
unSavedidentityClassC
unSavedidentityClassD
unappliedRollingTicket
unarchivedObjectOfClasses:fromData:error:
underLimitForItem:
underlyingData
underlyingDataLength
underlyingSocketPairMessage
unifiedContactsMatchingPredicate:keysToFetch:error:
uninstallMethods
unionSet:
uniqueAccountGUIDsForUnsentOutgoingMessages:
uniqueID
uniqueIDString
uniqueIDToCbuuidsOfPairingDevicesDictionary
uniqueIdentifier
unknownSenderURI
unlock
unlockAllContinuityPeers
unlockContinuityPeer:
unpairDeviceWithID:completion:
unpairStart
unpairStartForDeviceWithID:completion:
unprefixedIdentifier
unprefixedURI
unregisterAccount
unregisterAccount:
unregisterAccount:messageContext:
unregisterClientChannel
unregisterClientChannelDestination:clientUUID:
unregisterDevice:
unregisterEndpoint:
unregisterPluginForGroup:options:
unregisterPluginForGroup:options:messageContext:
unregisterPluginWithOptions:
unregisteredDeserializationError
unregisteredIdentityContainer
unregisteredKTData
unregisteredKeychainError
unsealMessage:signedByPublicIdentity:error:
unsealMessage:signedByPublicIdentity:usingIdentityWithIdentifier:
unsealMessage:signedByPublicIdentity:usingIdentityWithIdentifier:error:
unselectReasonForAlias:
unselectSubscription:withCompletion:
unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:
unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:dataProtectionClass:
unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:dataProtectionClass:withMessageTypes:
unsentNonUrgentAccountUUIDsRequiringDuetOverrides:priority:messageTypes:
unsentNonUrgentMessagesForAccountUUID:priority:byteLimit:upToLimit:localDestinationDeviceID:
unsentNonUrgentMessagesForAccountUUID:priority:byteLimit:upToLimit:localDestinationDeviceID:messageTypes:
unsentOutgoingMessagesUpToLimit:priority:localDestinationDeviceID:
unsentOutgoingMessagesUpToLimit:priority:wantsPayload:localDestinationDeviceID:
unsentUrgentAccountUUIDsForMessageTypes:
unsentUrgentAccountUUIDsWithDataProtectionClass:withMessageTypes:
unsignedCharValue
unsignedIntValue
unsignedIntegerValue
unsignedLongLongValue
unsignedLongValue
unsignedShortValue
unsubscribeActivity:andSubActivity:withCompletion:
unsubscribeEndpointsForGroup:
unsubscribeForActivity:subActivity:withCompletion:
unvalidateAliases:
unvalidateAliases:forAccount:
unvalidateAliases:forAccount:messageContext:
updateAccount:withAccountInfo:
updateAccount:withAccountInfo:messageContext:
updateAccountActivation
updateAuthorizationCredentials:token:
updateAuthorizationCredentials:token:forAccount:
updateCreationDateForHash:
updateCriticalReliabilityState
updateDeviceIdentity:error:
updateDevicePropertiesWithDevices:
updateExpiredDependent
updateGroup:withParticipants:sharedApplicationData:completion:
updateGroupStableKeyMaterialCacheForPushToken:SKM:
updateIdentityToDataProtectionClass:error:
updateInternalMigrationVersionOnDatabaseWithValue:
updateKTOptInStatus:withCompletion:
updateKTOptInStatusForRegistration:withOptInStatus:withCompletion:
updateKVSForKTRegistrationData
updateKVSWithCurrentKTRegistrationData
updateKVSWithTrustedDevice:
updateKVSWithTrustedDevices:withCompletion:
updateLightweightMemberTypes:members:triggeredLocally:forGroup:sessionID:
updateLocalPairedDevice:pairingType:
updateMembers:forGroup:sessionID:withContext:messagingCapabilities:triggeredLocally:lightweightStatusDict:
updateMembers:forGroup:sessionID:withContext:messagingCapabilities:triggeredLocally:lightweightStatusDict:messageContext:
updateMembers:toGroup:withContext:params:fromAccount:fromID:sessionID:messagingCapabilities:reason:isUPlusOne:completionBlock:
updateMembers:withContext:messagingCapabilities:triggeredLocally:lightweightStatusDict:
updateNetworkRelayStateForAllPairedDevices
updatePairedDevice:
updatePairedDevice:pairingType:completion:
updatePairedDeviceBuildVersion:productVersion:productName:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:capabilityFlags:deviceUniqueID:
updatePairedDeviceWithCBUUID:deviceInfoPayload:
updatePairedDeviceWithCBUUID:deviceUniqueID:buildVersion:productVersion:productName:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:
updatePairedDeviceWithCBUUID:iCloudURIs:pushToken:
updatePairedDeviceWithCBUUID:pairingType:
updatePairedDeviceWithCBUUID:supportIPsec:
updatePairedDeviceWithID:supportIPsec:completion:
updatePairedDeviceiCloudURIs:pushToken:
updateParticipantData:forGroup:sessionID:withContext:
updateParticipantData:forGroup:sessionID:withContext:messageContext:
updateParticipantData:withContext:
updateParticipantDataToMembers:toGroup:withContext:params:fromAccount:fromID:sessionID:isUPlusOne:
updateParticipantType:forGroup:sessionID:members:triggeredLocally:withContext:lightweightStatusDict:
updateParticipantType:forGroup:sessionID:members:triggeredLocally:withContext:lightweightStatusDict:messageContext:
updateParticipantType:forSessionID:relayGroupID:relaySessionID:sessionStateCounter:
updateParticipantType:members:triggeredLocally:withContext:lightweightStatusDict:
updateParticipants:forSessionID:
updatePreviousUsername:toNewUsername:
updateProtocolQualityOfService:isGood:
updateProtocolQualityOfService:linkID:isGood:
updateRegistrationType:toState:error:
updateServerDesiredKeyMaterialsForGroup:sessionID:
updateServerDesiredKeyValueDeliveryMaterialsNeeded
updateService:withPreferences:
updateSessionParticipants:relayGroupID:relaySessionID:participants:
updateSessionParticipants:relaySessionID:participants:
updateSessionURIToParticipantIDs:relayGroupID:relaySessionID:sessionInfo:
updateStateForDeviceWithUniqueID:
updateSubServices:forService:deviceUniqueID:
updateSubServices:forService:deviceUniqueID:messageContext:
updateTimerInterval:repeats:
updateTopics
updateURIToParticipantIDs:relaySessionID:sessionInfo:
updateUser:
updateUserWithOldUserName:newUserName:
updateUserWithOldUserName:newUserName:messageContext:
updateUserWithOldUsername:newUsername:
updateWithRegisteredTicket:error:
updatecloudDeliveryStateOnDefaultPeer
updatedUserSetForRealm:currentUsers:
uploadData:toEndpoint:onTopic:forGUID:encryptionType:
uploadedToKVS
upsertGroupWithInfo:previousGroup:completion:
upsertKeyTransparencyDeviceRecord:recordsToModify:recordsToDelete:completion:
urgentCloudPriorityMessageStatistics
urgentPackets
urgentQueue
uriSuggester
uris
urisAtIndex:
urisCount
urisToParticipantIDs
urisType
useBTDatagramPipe
useDictAsTopLevel
useFaceTimeCallerID
usePairingKey
useQRDirectly
useSecureQRControlMessage
useStunMICheck
usedCachedData
usedLastResortCache
usedMMCS
usedPipeline
usefulLoggingDescriptionAccountInfos:
useiMessageCallerID
user
userAccessTokens:error:
userAccountSynchronizer
userAgent
userConfiguration
userConsentDeniedForCTPNR
userDefaults
userHandle
userID
userIDArray
userInfo
userName
userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:
userNotificationCenter:openSettingsForNotification:
userNotificationCenter:willPresentNotification:withCompletionHandler:
userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:
userOptInRequired
userStore
userStore:didAddAuthenticationCertificate:forUser:
userStore:didAddUser:
userStore:didRemoveAuthenticationCertificateForUser:
userStore:didRemoveUser:withAuthenticationCertificate:
userStore:didUpdateUser:
userUniqueIdentifier
userWithUniqueIdentifier:
username
usersToTimers
usersToTimersLock
usersWithRealms:
utilities
utunController
utunDeliveryController
utunSocket
uuid
validNetworkActive
validNetworkEnabled
validNetworkReachable
validSIMStateForRegistration
validateAliases:
validateAliases:forAccount:
validateAliases:forAccount:messageContext:
validateCachedGroup:isParentOfGroup:completion:
validateContextDate
validateContextTTL
validateCredentialsWithDeliveryCompletionBlock:
validateEnrollmentResult:uuid:completionBlock:
validateEnrollmentUri:accountKey:loggableData:insertResponse:error:
validateListenerForLocalObject:andCheckEntitlement:
validateListenerForLocalObject:andCheckEntitlement:forAccessToServiceWithIdentifier:
validateListenerForLocalObject:andPerformBlock:
validatePeerUri:accountKey:loggableDatas:queryResponse:error:
validateProfileForAccount:
validateProfileForAccount:messageContext:
validateRegion:phoneNumber:forRegistration:
validationContextDisabled
validationContextQueue
validationData
validationInfoByMechanism
validationMechanisms
validationMessageSendBlock
validationMode
validationSession
validationSessionOnQueue:mechanism:withCompletion:
validationStatusForAlias:
validator:failedIdentificationWithRegistrationError:
validator:handleABCEvent:
validator:identifiedPhoneNumber:token:phoneBookNumber:
validators
value
valueForCapability:
valueForEntitlement:
valueForKey:
valueForKeyPath:
valueWithPointer:
vendTokenListForSessionID:
verboseFunctionalLogging
verbosePerformanceLogging
verifierWithEndpoint:keyType:keyDiversifier:
verifierWithLocalURI:remoteURI:pushToken:service:cert:keyType:keyDiversifier:
verifyAndExposeMessage:withError:
verifyAndRevealData:sendingDevice:cypherIdentifier:error:
verifyMessageIntegrityWithKey:inputBuffer:inputLength:
verifySignedData:matchesData:forAlgorithm:onService:tokenUri:options:requestUUID:
verifySignedData:matchesData:forAlgorithm:onService:tokenUri:options:requestUUID:messageContext:
verifySignedData:matchesData:forType:onQueue:error:
verifySignedData:matchesData:forType:onQueue:withCompletion:
verifySignedData:matchesData:forType:withPublicDeviceIdentity:error:
verifySignedData:matchesData:withSecPublicDeviceIdentity:diversifier:error:
verifyState
versionNumber
vettedAliases
vettedEmails
voidAuthenticationTokenAllowingGracePeriod
voidPassword
waitForReply
waitingForMigration
wakeClientForService:stream:flags:
wantsAppAck
wantsBagKey
wantsBodySignature
wantsCertifiedDelivery
wantsCompressedBody
wantsDeliveryStatus
wantsExtraTimeoutRetry
wantsFirewallDonation
wantsHTTPGet
wantsHTTPHeaders
wantsIDSProtocolVersion
wantsIntegerUniqueIDs
wantsLocalReflectedSend
wantsManagedRetries
wantsMultipleResponses
wantsNetworkAvailableHint
wantsPendingMessageUpdates
wantsPhoneNumberAccount
wantsProgress
wantsRemoteErrors
wantsResponse
wantsTinkerDevices
wantsUserAgentInHeaders
wasDisabledAutomatically
wasInitiallySetupUsingIDSPairing
wasPrimary
wasRecentlySelectedAlias:
wasWrittenToConnection
watchDidStartAdvertising
watchDidStopAdvertising
watchOnlyService
watchPairing
weakObjectsHashTable
weakRefWithObject:
weakToStrongObjectsMapTable
weight
wiFiActiveAndReachable
wifiSetupAttemptType:duration:result:client:
willSendBlock
willSendJoin
withUpdatedAllowedServices:
withUpdatedExpiryEpoch:
withUpdatedProperties:
wpConnectionErrorCode
wpConnectionErrorDomain
wpConnectionErrorUserInfo
wpLinkManager
wrapMaterial:error:
wrapMode
wrapperPairWithLocalAddress:remoteAddress:
wrapperWithAddressString:withPortHostOrder:withInterfaceName:
wrapperWithSockAddr:
wrapperWithWrapper:andPortHostOrder:
writeAccountDefaults:
writeBuffer:bufferSize:metaData:metadataSize:moreComing:
writeCoalescingDelay
writeCoalescingLeeway
writeDatagram:datagramSize:metaData:metadataSize:
writeHandler
writeIDSDirectMessageInfo:
writePacketBuffer:metaData:metadataSize:moreComing:
writeTo:
writeToClientChannel:packetBuffer:metaData:metadataSize:
writeToConnection
writeToFile:atomically:
writeToFile:options:error:
xpcObject:objectContext:
xpcObject:objectContext:messageContext:
xpcQueue
zone
id-report-web-approval-status
web-uri
is-approved
dictionary
Registration
IDSFoundation
Report Unknown Sender response: %@
message
IDSDaemon
setting up the realtime encryption controller for the unique ID: %@
Warning
%@ - Could not initialize the realtime encryption controller for the unique ID: %@, ignoring...
sending the device prekey for the unique ID: %@ to group: %@
%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the prekey to group %@...
%@ - Could not find the session for the group: %@
getting public keys for the real-time encryption...
%@ - Could not get the realtime encryption controller
object
xpc-object
public-keys
object-type
object-context
sending the master key material for the unique ID: %@ to group: %@
%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@
v8@?0
sending the master key material recovery request for the unique ID: %@ to group: %@
Request the master key material(MKM) for unique ID: %@ group: %@
resetting all keys for the unique ID: %@ group: %@
OpportunisticCache
v16@?0@"IDSOpportunisticData"8
<%@:%p accessCount: %lld, cache: %@>
com.apple.ids
DeviceHBI
com.apple.conference
forceRandomDeviceHeartbeatInterval
DeviceHeartbeat
forceDeviceHeartbeat
com.apple.identityservices.device-hbi
vc-temporary-get-dependent-interval
MagnetIso
%c MagnetIso(%s)  Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
UnexpectedState
bytesReceived
bytesSent
packetsReceived
packetsSent
<%@:%p; disableRegistration: %@>
disableReg
id-sim-deactivation
device-time
home-plmn
source
code
event-time
network-initiated
dict
network-plmn
roaming
events
*** Lockdown state is expired, ignoring
v24@?0@"IDSDAccount"8@"IDSServiceProperties"16
registration-state-changed-max-count
NRDeviceMonitor
IPsecLinkType
IPsec Link
<%@: %p serviceIdentifier: %@, localURI: %@, subscribedURIs: %@>
v16@?0@"NSDictionary"8
v32@?0@"NSString"8@"IDSURI"16@"NSDictionary"24
/Library/IdentityServices/ids-pub-id.db
PublicIdentityCache
%@-%@-%@
IDSPublicIdentityCache
Adding identity to last resort DB { identity: %@, token: %@, uri: %@, service: %@ }
Checking last resort DB for identity { token: %@, uri: %@, service: %@ }
Found identity in last resort DB { identity: %@, token: %@, uri: %@, service: %@ }
public-identity-clear-time-seconds
public-identity-future-clear-time-seconds
Cleaning last resort DB with date range %@ to %@
x-push-cert
pnv-retry-count
hardware-version
os-version
software-version
device-name
IMSI
PLMN
pnr-reason
test-data
id-preflight
status
mechanisms
mechanism
mechanism-data
SMSLess
<%p> name %@ instanceID [%s] nextStreamID %u
_serviceNameToStreamIDMap %@
_streamIDToServiceNameMap %@
UTunPeerServiceMap
Remote instance ID reset: old [%s] new [%s]
Asked to set remote instanceID for previous ID [%s]
Remote instance ID do not match: old [%s] new [%s]
cannot associate %@ with streamID 0
serviceMap[%@ <=> %lu] serviceNameMismatch %@ streamIDMismatch %@ [%@ <=> %lu]
Unexpected streamID %lu found when asked to translate %@
ServiceMap is at maximum capacity! %lu
IDSDelivery-oversized
Previous Remote Instance IDs (next:%d) {%@}
com.apple.private.alloy.multiplex1
com.apple.private.alloy.willow
com.apple.identityservicesd.aps
Get Service User ID's Completed with response %@
v40@?0@"IDSBaseMessage"8@"NSError"16q24@"NSDictionary"32
Get Admin Access Tokens Completed with response %@
accessory-id
adminAccessTokenDict
access-token
expiry
Get Consent Tokens Completed with response %@
Get User Access Tokens Completed with response %@
v32@?0@"NSString"8Q16^B24
IDSDuet
-[IDSDuetInterface forceCheckAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:]
%p %s Sending IDS message, no CoreDuet on platform
-[IDSDuetInterface checkAvailabilityForValues:priority:logString:fromQueue:withCompletionBlock:]
com.apple.icloud.presence.
com.apple.icloud.presence
@16@?0@"IDSURI"8
v64@?0@"NSString"8@"NSDictionary"16@"NSDictionary"24@"NSString"32B40@"NSDictionary"44B52@"NSDictionary"56
@16@?0@8
%@%@
v36@?0I8@"<NSObject>"12^B20^B28
Engram Error
v24@?0@"IDSMPFullAccountIdentityCluster"8Q16
-[IDSAccountIdentityElector _getKeysForServiceTypeName:completion:]_block_invoke
IDSAccountIdentityElector.m
currentCluster.groupID
![newServiceTypeNames containsObject:serviceTypeName]
-[IDSAccountIdentityElector _getKeysForServiceTypeName:completion:]_block_invoke_2
createdCluster.groupID
v24@?0@"IDSCloudKitKeyElectionStoreItem"8@"NSError"16
-[IDSAccountIdentityElector _createAccountKeysWithFullAccountIdentity:serviceTypeNames:oldCluster:completion:]
[oldCluster isParentOfCluster:newCluster]
newPublicCluster
[oldPublicCluster isParentOfCluster:newPublicCluster]
v32@?0@"IDSGroupServerKeyElectionStoreItem"8@"ENGroupID"16@"NSError"24
v24@?0@"IDSMPFullAccountIdentityCluster"8@"NSError"16
__kIDSRegistrationKeyManagerPrivateIdentityRebuiltNotification
__kIDSRegistrationKeyManagerPrivateIdentityGeneratedNotification
__kIDSRegistrationKeyManagerKeychainMigrationComplete
__kIDSRegistrationKeyManagerEncryptionIdentityNeedsRollNotification
build-of-identity-generation
build-of-unregistered-identity-generation
message-protection-public-data-registered
ngm-message-protection-public-data-registered
ngm-message-protection-public-prekey-data-registered
ngm-message-protection-public-data-registered-version
hasRegIdentityContainer
hasUnregIdentityContainer
failedToGeneratedPublicDataForNGMIdentity
registrationKeyManagerRateLimit
ForceRefreshIdentityWithServer
PurgePreviousIdentityInterval
RegenerateIdentityInterval
ShowKeyRollingNotifications
ShowNGMKeyRollingNotifications
IDSRegistrationKeyManager.m
Invalid parameter not satisfying: %@
systemMonitor
keychainWrapper
identityDataSource
KTEnrollmentSignatureUpdated
NGM Key Rolling
Rolling key
Tried and failed to generate new key to roll
Key Rolling
Generating new identity
Failed to generate new identity
Rolled key, did succeed %@
Registered new identity
Failed to compare registered identity
Purged previous identity
Failed to purge previous identity
ClassKeys
We saved our keys, resuming OTR session negotiation
com.apple.identityservicesd.identity-purge
com.apple.identityservicesd.identity-regenerate
CNContact
Contacts
CNPhoneNumber
CNContactIdentifierKey
CNContactStore
IDSDDatabase
Setting IDSOutgoingMessage property %d of %d
New message record [%@] has ID [%lld].
IMDSpotlight
Done with IDSOutgoingMessageRecordAddMessageRecord, lets update Spotlight with this message record.
v16@?0^{CSDBRecordStore=^{__CFString}^{CSDBSqliteDatabase}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFSet}B{?=b1b1}^?^{__CFSet}^{__CFDictionary}^vi{?=ii^q^{__CFSet}}}8
SELECT COUNT(1) FROM outgoing_message WHERE guid = ? AND pending_delete = 0 LIMIT 1;
SELECT COUNT(1) FROM outgoing_message WHERE guid = ? AND alternate_guid = ? AND pending_delete = 0 LIMIT 1;
v32@?0^{CSDBRecordStore=^{__CFString}^{CSDBSqliteDatabase}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFSet}B{?=b1b1}^?^{__CFSet}^{__CFDictionary}^vi{?=ii^q^{__CFSet}}}8^{CSDBSqliteDatabase=^{__CFString}^{CSDBSqliteConnection}^?^?^?^v^?^?B^vi{?=b1b1b1}{_opaque_pthread_mutex_t=q[56c]}i^?^v^{__CFString}I{CSDBLookAsideBufferConfig=iib1}}16^{CSDBSqliteStatement=^{CSDBSqliteConnection}^{sqlite3_stmt}i}24
SELECT DISTINCT account_guid FROM outgoing_message WHERE priority = ? AND is_sent = 0 AND pending_delete = 0 
AND duet_identifiers IS NOT NULL 
AND message_type 
LIMIT ?
v24@?0^{CSDBRecordStore=^{__CFString}^{CSDBSqliteDatabase}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFSet}B{?=b1b1}^?^{__CFSet}^{__CFDictionary}^vi{?=ii^q^{__CFSet}}}8^{CSDBSqliteDatabase=^{__CFString}^{CSDBSqliteConnection}^?^?^?^v^?^?B^vi{?=b1b1b1}{_opaque_pthread_mutex_t=q[56c]}i^?^v^{__CFString}I{CSDBLookAsideBufferConfig=iib1}}16
SELECT duet_identifiers FROM outgoing_message WHERE priority = ? AND is_sent = 0 AND bypass_duet = 0 AND pending_delete = 0 AND account_guid = ? 
SELECT SUM(stored_size) FROM outgoing_message WHERE pending_delete = 0 
SELECT account_guid, count(ROWID) FROM outgoing_message GROUP BY account_guid
SELECT account_guid, MAX(sum_stored_size) FROM (SELECT account_guid, SUM(stored_size) AS sum_stored_size FROM outgoing_message WHERE pending_delete = 0 GROUP BY account_guid ) 
SELECT account_guid, count(ROWID) FROM outgoing_message GROUP BY account_guid ORDER BY count(ROWID) DESC LIMIT 1 
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, wants_firewall_donation, send_mode FROM outgoing_message 
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, wants_firewall_donation, send_mode FROM outgoing_message 
ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, wants_firewall_donation, send_mode 
ROWID, guid, alternate_guid, account_guid, from_identifier, NULL AS message_data, NULL AS data, NULL AS protobuf_data, destinations, NULL AS data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, wants_firewall_donation, send_mode 
WHERE pending_delete = 0 AND guid = ? 
WHERE is_sent = 0 AND pending_delete = 0 AND account_guid = ? 
AND local_destination_device_uuid = ? 
AND local_destination_device_uuid is null 
WHERE is_sent = 0 AND pending_delete = 0 AND expiration_date > 0 AND expiration_date <= ? LIMIT ? 
SELECT DISTINCT account_guid FROM outgoing_message WHERE is_sent = 0 AND pending_delete = 0 LIMIT ? 
WHERE is_sent = 0 AND pending_delete = 0 AND account_guid 
LIMIT ? 
NULL accountGUIDs passed to %s
CFArrayRef IDSOutgoingMessageRecordCopyUnsentMessagesForAccountsAndPriority(NSArray *__strong, int64_t, CFStringRef, int64_t, IDSDatabase *__strong, BOOL)
AND priority = ? 
CFArrayRef IDSOutgoingMessageRecordCopyUnsentMessagesForAccountsAndPriorityAndType(NSArray *__strong, int64_t, CFStringRef, int64_t, IDSDatabase *__strong, BOOL, int64_t, BOOL *)
AND message_type = ? 
NULL accountGUID passed to %s
CFArrayRef IDSOutgoingMessageRecordCopyUnsentMessagesUpToSizeLimit(int64_t, int64_t, int64_t, CFStringRef, BOOL, CFStringRef, IDSDatabase *__strong, BOOL)
SELECT DISTINCT 
 FROM (   SELECT 
  FROM outgoing_message o   WHERE priority = ? AND pending_delete = 0 AND is_sent = 0 AND account_guid = ? AND (bypass_duet = ? OR bypass_duet = ?) 
  ORDER BY ROWID ASC   LIMIT ? ) AS ofilt WHERE (SELECT SUM(stored_size) FROM outgoing_message s where s.ROWID <= ofilt.ROWID) <= ? UNION SELECT 
 FROM outgoing_message   WHERE priority = ? AND pending_delete = 0 AND is_sent = 0 AND account_guid = ? AND (bypass_duet = ? OR bypass_duet = ?) 
  ORDER BY ROWID ASC LIMIT 1 ) 
CFArrayRef IDSOutgoingMessageRecordCopyUnsentMessagesUpToSizeLimitWithTypes(int64_t, int64_t, int64_t, CFStringRef, BOOL, CFStringRef, IDSDatabase *__strong, BOOL, NSArray *__strong)
WHERE priority = ? AND is_sent = 0 AND pending_delete = 0 
AND account_guid = ? 
AND bypass_duet = 0 
ORDER BY ROWID ASC LIMIT ?
UPDATE outgoing_message SET is_sent = ? WHERE guid = ?
UPDATE outgoing_message SET is_sent = 0
UPDATE outgoing_message SET is_sent = 0 WHERE local_destination_device_uuid = ?
Empty/nil accountGUIDs passed to %s
void IDSOutgoingMessageRecordUpdateLocalDestinationDeviceOnAccountsWithUUIDs(NSArray *__strong, NSString *__strong, IDSDatabase *__strong)
UPDATE outgoing_message SET local_destination_device_uuid = ? WHERE is_sent = 0 AND pending_delete = 0 AND account_guid 
void IDSOutgoingMessageRecordUpdatePendingDeleteOnAccountsWithDeviceUUID(NSArray *__strong, NSString *__strong, IDSDatabase *__strong)
UPDATE outgoing_message SET pending_delete = 1 WHERE local_destination_device_uuid = ? AND account_guid 
WHERE pending_delete = 1 LIMIT ? 
WHERE is_sent = 0 AND pending_delete = 0 AND enqueued_date > 0 AND enqueued_date <= ? AND local_destination_device_uuid IS NOT NULL AND local_destination_device_uuid != ? LIMIT ? 
InternalMigration
IDSOutgoingMessageRecord
Deleting postponed message GUIDs
IDSOutgoingMessageRecordDeleteMessage %@ alternateGUID %@
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, wants_firewall_donation, send_mode FROM outgoing_message WHERE guid = ? ORDER BY ROWID ASC;
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, wants_firewall_donation, send_mode FROM outgoing_message WHERE guid = ? AND alternate_guid = ? ORDER BY ROWID ASC;
Could not delete outgoing message from database. Postponing delete. Guid: %@  AlternateGuid: %@
INSERT OR IGNORE INTO outgoing_messages_to_delete (data_protection_class, guid%s;
) VALUES (?, ?)
, alternate_guid) VALUES (?, ?, ?)
Could not postpone delete.
IDSOutgoingMessageRecordDeleteMessageWithQueueOneIdentifier %@
SELECT ROWID, guid, alternate_guid, account_guid, from_identifier, message_data, data, protobuf_data, destinations, data_to_encrypt, encrypt_payload, compress_payload, use_top_level_dict, wants_response, expiration_date, command, wants_delivery_status, delivery_status_context, message_uuid, priority, date, is_sent, identifier, forced_local, peer_response_identifier, expects_peer_response, wants_app_ack, non_waking, fire_and_forget, stored_size, duet_identifiers, bypass_duet, queue_one_identifier, enforce_remote_timeout, main_account_guid, pending_delete, local_destination_device_uuid, enqueued_date, message_type, skip_self, push_priority, non_cloud_waking, live_delivery, require_bluetooth, require_local_wifi, wants_progress, ignore_max_retry_count, wants_certified_delivery, original_timestamp, wants_firewall_donation, send_mode FROM outgoing_message WHERE queue_one_identifier = ? ORDER BY ROWID ASC;
IDSOutgoingMessageRecordDeleteMessagesForAccount %@
DELETE FROM outgoing_message WHERE account_guid = ? 
NULL message passed to %s
void IDSOutgoingMessageRecordBulkCopy(IDSOutgoingMessageRecordRef, int64_t *, CFStringRef *, CFStringRef *, CFStringRef *, CFStringRef *, CFDataRef *, CFDataRef *, CFDataRef *, CFDataRef *, CFDataRef *, BOOL *, BOOL *, BOOL *, BOOL *, int64_t *, int64_t *, BOOL *, CFDataRef *, CFDataRef *, int64_t *, int64_t *, BOOL *, CFStringRef *, BOOL *, CFStringRef *, BOOL *, BOOL *, BOOL *, BOOL *, BOOL *, int64_t *, CFDataRef *, BOOL *, CFStringRef *, BOOL *, CFStringRef *, BOOL *, CFStringRef *, int64_t *, int64_t *, BOOL *, int64_t *, BOOL *, BOOL *, BOOL *, BOOL *, BOOL *, BOOL *, int64_t *, BOOL *, int64_t *, IDSDatabase *__strong)
<IDSOutgoingMessageRecord %p [%p]>{}
guid
alternate_guid
account_guid
from_identifier
message_data
data
protobuf_data
destinations
data_to_encrypt
encrypt_payload
compress_payload
use_top_level_dict
wants_response
expiration_date
command
wants_delivery_status
delivery_status_context
message_uuid
priority
date
is_sent
identifier
forced_local
peer_response_identifier
expects_peer_response
wants_app_ack
non_waking
fire_and_forget
stored_size
duet_identifiers
bypass_duet
queue_one_identifier
enforce_remote_timeout
main_account_guid
pending_delete
local_destination_device_uuid
enqueued_date
message_type
skip_self
push_priority
non_cloud_waking
live_delivery
require_bluetooth
require_local_wifi
wants_progress
ignore_max_retry_count
wants_certified_delivery
original_timestamp
wants_firewall_donation
send_mode
Database
_IDSOutgoingMessageRecordCreate()
outgoing_message
GUID %@ Fanout %@ (%@) contains:
IDSFanoutFactoryComponent.m
Invalid encryption parameters (using) -- failing {publicDeviceIdentityContainer: %@, fullIdentity: %@, inputDataLength: %llu, identifier: %@}
Encryption
Using full identity: %@
   Public/Private encryption failed with error: %@
Invalid encryption parameters (used) -- failing {publicDeviceIdentityContainer: %@, fullIdentity: %@, inputDataLength: %llu, identifier: %p}
Invalid decryption parameters -- failing {publicDeviceIdentityContainer: %@, fullIdentity: %@, inputDataLength: %llu, identifier: %p}
   Public/Private decryption failed with error: %@
Using previous full identity: %@
v16@?0@"CUTResult"8
GLTKeyDiversification
MessageProtection
Failed to diversify key for signing { tempIdentity: %@, diversifier: %@, mpError: %@ }
No diversifier supplied for an application key. Failing...
LastKeyGeneration
ids_querytime
ids_build
ids_msg_command
ids_decrypt_equal
ids_tried_last_resort
ids_lastgeneration
ids_sender_EC_success
ids_sender_EC_error_domain
ids_sender_EC_enc_error_code
ids_sender_leg_success
ids_sender_leg_error_domain
ids_sender_leg_error_code
ids_recieved_leg_success
ids_recieved_EC_success
ids_EC_error_domain
ids_legacy_error_domain
ids_EC_error_code
ids_legacy_error_code
1to1EC
Failed to setup RTCReporting to report EC metric { error: %@ }
Exception handling _strictlyUnarchivedObjectOfClasses: %@
Failed to get payload metadata {payloadMetadataError: %@, payloadMetadataData: %@}
EC (%@:%@) and Legacy (%@:%@)
Legacy (%@:%@)
EC (%@:%@)
v24@?0@"NSString"8@"NSError"16
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IDSAgent/IDSClientChannelManager.m
IDSClientChannel
FTMessageDelivery
IDSAgent
%@ instance created with a dead file descriptor!
Created with {socket:%d}
v12@?0B8
%@ endSession at %@!
SPConnection
%p: reset the stall detector
originalMessage
v32@?0@8Q16^B24
Error %d received on {socket:%d}
Remote side closed the connection, cleaning up {socket:%d}
Removing pending OTR messages for protection class %u.
Removed %lu pending OTR messages.
v16@?0@"<IDSSocketPairConnectionDelegate>"8
Process stored data message (Encrypted:%u, SN:%u, StreamID:%u).
FragmentedMessage: can't reassemble message from %u pieces
idsotr
Recv OTR message for %@-%ld-%u E:%u SN:%u FI:%u D:%u T:%@
_processBytesAvailable: read %d bytes
Error when receiving bytes, closing connection
Remote side closed the connection, cleaning up
Received message size: %u, maximum allowed size: %u
_processIncomingMessage failed.
BPS: avg %f instant %f
remainingFragments
unknown object in _outgoingMessageArray
Send OTR message for %@ E:%u SN:%u FI:%u T:%{public}@.
Connected socket closed, cannot send data, cleaning up...
No data to send on socket, suspending {socket:%d}
Failed to queue outgoing data - possible message fragmentation issue
{socket:%d} timeout, ignoring ...
got send error %d, cleaning up {socket:%d} ...
totalFragmentCount
fragmentedMessageID
%@ removing {socket:%d} from transport thread!
SocketPairConnection (%p) add OTR blocks (enc:%p dec:%p).
Accounts
ACAccountStore
primaryAccount
personID
dsid
IDSSystemAccountAdapterErrorDomain
<%@: %p username: %@, DSID: %@>
B16@?0@"ACAccount"8
v24@?0@"ACAccount"8@"NSError"16
v24@?0@"ACAccountType"8@"NSError"16
D:%@
ACAccountTypeIdentifierAppleAccount
ACAccountTypeIdentifieriTunesStore
ids-opportunistic-send-percentage
com.apple.ids.opportunisticdeliverycontroller
v16@?0@"IDSDeliveryContext"8
v16@?0@"<IDSDaemonListenerProtocol>"8
IDSDSessionMessenger
Sending MESSAGE to %@, %@ <%@>
%@ - No account with unique ID %@ found to send a message, bailing...
No destinations to send message to, ignoring...
guest-device:
v32@?0@"NSArray"8@"NSArray"16@"NSDictionary"24
IDSDSession
This Phone Continuity session supports the local message. Trying the local...
Sending REINITIATE (subcommand %@) %@ to %@, %@
pS: %llu pR: %llu bS: %llu bR: %llu
x-id-sub-service
x-service-user-id
user-id
user-handle
tokens
id-get-user-token
access-tokens
kt-account-key-signing-timeout
IDSKTAccountKeyManagerErrorDomain
ktAkFetchTimeMetric
KTVersion
%@-%@
Failed
Success
v32@?0@"NSData"8@"NSData"16@"NSError"24
v16@?0@?<v@?>8
id-report-spam
spam-message
General Report Spam response: %@
spam-messages
/System/Library/IdentityServices/Plugins/com.apple.NanoRegistry.bundle
com.apple.IDS.IDSNanoRegistryPluginManager.callbackQ
IDSNanoRegistryPluginManager
Bundle {isAdvertising:%@}
Bundle has no principal class
Failed to initialize bundle
Plugin class is nil
Protocol is nil
Plugin initialized successfully
Plugin does not respond to any useful messages
Plugin failed to initialize
Plugin class "%{public}s" does not conform to protocol
v16@?0@"IDSHeartbeatCenter"8
Server Heartbeat
Need to re-register now
forceHeartbeat
com.apple.identityservices.registration-hbi
forceRandomHeartbeatInterval
forceHeartbeatInterval
vc-registration-hbi
vc-profile-get-default-invitation-context
Default invitation context response: %@
region-id
base-phone-number
extra
validated
time
activity
subactivity
<%@: %p; timeSubscribed: %fL; activity: %@; subActivity: %@>
-Urgent
urgent
-Default
default
-Sync
sync
%@%@%@
%@%@Cloud%@
 Cloud
PipePeripheralUUID
UTunPeer
Initing IDSUTunPeer %p %@
btuuid %@ isDefaultPairedDevice: %@ pipePeripheralUUIDString: %@ waitForDefaultPairedDevice: %@ uniqueID %@ shouldUseIPsecLink: %@
incoming:%@
outgoing:%@
 Deallocing UTunPeer %p
v32@?0@"IDSUTunConnection"8Q16^B24
%@ ignoring btuuid update from %@ to %@
v16@?0@"IDSUTunConnection"8
localDeliveryQueueStatMessageCount
localDeliveryQueueStatBytes
localDeliveryQueueStatDeliveredMessageCount
localDeliveryQueueStatDeliveredBytes
localDeliveryQueueStatsLastDeliveredTime
IDSLocalOutgoingMessageBytes
IDSLocalOutgoingMessages
IDSLocalIncomingMessageBytes
IDSLocalIncomingMessages
IDSLocalLinkType
URGENT
Default
Sync
IDSLocalStatisticsCategory
-[IDSUTunPeer _powerlogDictionaryForPriority:]
%s: self %p reporting stats for %@ %@
IDS Local Network Stats
IDSLocalOutgoingSocketBytes
IDSLocalOutgoingSocketPackets
IDSLocalIncomingSocketBytes
IDSLocalIncomingSocketPackets
Sockets
IDSUTunPeer
-[IDSUTunPeer _powerlogDictionaryForSockets]
%s: self %p reporting stats for sockets %@
Enabling power logging for sockets {_shouldUseIPsecLink: %@}
-[IDSUTunPeer _startPowerLogTimersForAllPriorities]
%s: self %p Enabling power logging for transport stats
-[IDSUTunPeer logCurrentTransportStatsAndResetTimers]
%s: self %p Will log the current transport stats and restart timers.
%@ logCurrentTransportStatsAndResetTimers shouldLog=%@, _shouldUseIPsecLink=%@
LOCALSETUP: %@ has been told to localSetupInProgress %@
enableConnection for peer %@
enableCloudConnection for peer %@
UTunConnection
enable connection %@.
disabling connection %@
disable Connection for peer %@:%p withReason %ld
disable connection %@.
disable cloud connection for peer %@:%p withReason %ld
Client Request
Idle Remove
IDSServicePrefersInfraWifi
Reason
InfraWiFiState
Services
IDS Local InfraWiFi Request
InfraWiFi
_checkServicesPreferringInfraWiFi %u: Service %@ has %llu delivered messages
_checkServicesPreferringInfraWiFi %u: InfraWiFi received %llu -> %llu packets. Client sockets received %llu -> %llu packets. Total delivered %llu -> %llu
_checkServicesPreferringInfraWiFi %u: No message delivered and no client socket packet received for services preferring InfraWiFi - disabling it now
Local Setup is not complete yet - ignore preferInfraWiFi for %@
Local Setup is not complete yet - ignore setLinkPreferences for %{public}@
Bluetooth is required but we are not nearby - failing message %@
Local WiFi is required but we are not discovered by Rapport - failing message %@
%@ %@ %@ isConnected changed to %@
%@ wasConnected? %@ isConnected in aggregate? %@
Enabling %@ Cloud Connections on this peer
_pendingCloudEnable: %@, _supportsCloudConnections: %@, _isPeerAlwaysConnected: %@
%@ LinkManager did connect cbuuid %@ - enabling connections
continuityConnectCount for peer %@ is changed to %d.
manager:cbuuidDidConnect:%@ isAlwaysConnected:%@
Peer %@ is already locked for btUUID %@, ignore peer %@.
Enable peer %@ now. (isDefaultPairedDevice %@   lockedPeer %@)
IGNORING %@ LinkManager did connect cbuuid %@ - enabling connections (%@)
cbuuidDidFailToConnect for peer %@, disabling peer connections!
Skip handling _handleCBUUIDFailToConnect for Phone continuity local message case.
%@ LinkManager did disconnect cbuuid %@ - kicking our disable timer
v16@?0@"IMDispatchTimer"8
gl-cloud-msg-disable-interval
Tearing Down Global Link For %@ Due To Inactivity
%@ isPeerAlwaysConnected is changed to %@
%@ forceOTRNegotiationForTopic is no-op when ipsec is used
id-authenticate-%@
realm-user-id
authentication-data
x-protocol-version
x-ds-client-id
phone-number
IDS Authentication response: %@
cert
alert
IDSKeychainWrapperErrorDomain
IDSKeychainWrapperErrorOSStatus
Class D
Class C
Class A
IDSKeychainWrapper
Loading IDS keychain data with account %@
  => Done loading IDS keychain data (loaded %ld bytes)
Saving IDS keychain data with account %@
 => Done saving IDS keychain data
Device is not in keychain cloud circle {status: %ld, error: %@}
   OTR encryption failed with error: %d
   OTR decryption failed with error: %d
SecOTRSSignAndProtectMessage
Security
SecOTRSVerifyAndExposeMessage
setup-phone-auth-enabled
sim-deactivation-rate-limit-count
sim-deactivation-rate-limit-time
RegisterDuringBuddy
com.apple.IDSRegistrationController
%s: Unable to create preferences handle: %s
-[IDSRegistrationController initWithUserStore:]
Failed to create dynamic store
kScreenSharingChangedNotification
kiMessageChangedNotification
kFaceTimeChangedNotification
kCallingChangedNotification
*** Lockdown state is expired, not allowing registration
signature
HomeNumberBypassServer
Exception: %@ in handler: %@ while executing: %@
com.apple.madrid
com.apple.ess
(%@, %@, %@)
%s (%@)
-[IDSRegistrationController center:succeededRegistration:]
Succeeded HTTP registration with info: %@
-[IDSRegistrationController center:allSucceededRegistrations:]
All succeeded HTTP registrations: %@
-[IDSRegistrationController center:succeededIdentification:phoneNumber:token:]
Succeeded SMS identification with info: %@
-[IDSRegistrationController center:failedIdentification:error:]
Failed SMS identification with info: %@ error: %d
-[IDSRegistrationController center:succeededIDSAuthentication:]
Succeeded IDS Authentication with info: %@
-[IDSRegistrationController center:succeededCurrentEmailsRequest:emailInfo:]
Succeeded Validated Email Query info: %@    Emails: %@
-[IDSRegistrationController center:failedCurrentEmailsRequest:error:info:]
Failed Validated Email Query info: %@  Info: %@
-[IDSRegistrationController center:succeededInitialRegionQuery:]
Succeeded Initial Region Query info: %@
-[IDSRegistrationController center:failedAuthentication:error:info:]
registration info: %@   error: %d  info: %@
-[IDSRegistrationController center:succeededLinkHandlesConfirmation:emailAddress:]
succeeded email confirmation: %@
Add New Phone Number
IDSLocalizable
Home number add alert title; Add New Phone Number
Would you like to add the phone number %@ to use with %@?
Home number add alert message; Would you like to add the phone number %@ to use with iMessage and FaceTime?
Add Number
Home number add alert button
Not Now
Home number add alert cancel button
HomeNumberAdd
v16@?0@"IMUserNotification"8
AggregateMessage
removing token %@ from %@
IDSDelivery
DeliveryContext Timestamp is %@
Processing response %ld for message %@
Message has been removed, Add Honeybee support here to grab logs from the other side who sent this FromURI:%@ ToURI:%@ Token:%@ 
Bad signature {message: %@, localURI: %@, remoteURI: %@, remotePushToken: %@, sessionToken: %@, service: %@}
 current sessionToken: %@
Message was rate limited from the server, failing message (%@ -> %@)
NiceRateLimited
Triggered auto bug capture for rate limiting {session : %@, error: %@}
Unknown Error, Failing message
Msg with GUID: %@ & i:%@ is missing 255s
Chunk: %@
WasLast?: %@
v32@?0@8@16^B24
%@ %@
ngm_public_identity
ngm_version
kt_version
application_public_identity
params
Error retrieving data from last resort cache: { error: %@ }
Flushing peer tokens, in hopes this resolves in the next error
Need to query for encryption but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}
Missing encryption keys -- querying {remoteURI: %@, localURI: %@, service: %@}
Encryption query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}
v28@?0@"IDSMPPublicDeviceIdentityContainer"8B16@"NSError"20
Need to query for decryption but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}
Missing decryption keys, need to query {underLimit: %@, remoteURI: %@, localURI: %@, service: %@}
Decryption query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}
v20@?0B8@"NSError"12
v24@?0@"IDSNGMPublicDeviceIdentity"8@"NSError"16
v24@?0^{__SecKey=}8@"NSError"16
Need to query for signing verification but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}
Missing signing verification key, need to query {underLimit: %@, remoteURI: %@, localURI: %@, service: %@}
Signing verification query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}
Tried to PK to default paired device!! -- failing
Tried to encrypt to nil device ID -- failing
Missing identity to encrypt with {deviceID: %@}
Missing identity to decrypt with {deviceID: %@}
Missing device encryption keys -- querying {deviceID: %@}
Device encryption query completed {success: %@, deviceID: %@}
Error committing replay state for device ID decryption { error: %@ }
Missing device decryption keys -- querying {deviceID: %@}
Device decryption query completed {success: %@, hasKeyAfterQuery: %@, deviceID: %@}
IDSPreflightStack { IMSI: %@, PLMN: %@, mechanisms: %@ }
ccmdttdc
ccmdtcdc
ccmdtpli
ccmdttc
ccmdtdscp
ccmdtipc
ccmdtcp
ccmdtpid
ccmdtpgid
ccmdtsid
ccmdtnhbhe
datablob-context
dataBlobEncryption
%@ has valid SKM: %@ for sessionID: %@
SKM: %@
*** options : %@
ServerMaterialExchange
IDSDSession::init { self: %p, uniqueID: %@, instanceID: %@, isLightweightParticipant: %@}
[!] This session will be suppressing client notifications { self.sharedState.uniqueID: %@ }
SessionFunctionalLogging
SessionPerformanceLogging
com.apple.private.alloy.screensharing
com.apple.ids.Session-ConnectionQueue-%@
com.apple.private.alloy.facetime.mw
com.apple.private.alloy.facetime.multi
com.apple.private.alloy.facetime.video
com.apple.private.alloy.facetime.audio
com.apple.private.alloy.willow.stream
com.apple.private.alloy.amp.potluck
com.apple.private.alloy.itunes
com.apple.private.alloy.%@
com.apple.private.alloy.safeview
com.apple.private.alloy.screensharing.qr
com.apple.private.alloy.tincan.audio
com.apple.private.alloy.phonecontinuity
com.apple.private.alloy.phonecontinuity: set connectionCountHint to: %@
com.apple.private.alloy.carmelsync
com.apple.private.alloy.notes
com.apple.private.alloy.dropin.communication
com.apple.private.alloy.safari.groupactivities
com.apple.private.alloy.gftaastest.communication
use QR directly for %@.
 self.sharedState.connectionCountHint: %lu, [connectionCountHint unsignedIntegerValue]: %lu
outgoing
incoming
Created session (%@) %@ with destinations %@
QuickRelayLinkProtocol
Skip IDSClientChannel because this is a lighweight participant.
Could not create session: %@ because failed to get this device push token for the service: %@
Destinations are %@
IDSDSession::dealloc { self: %p, uniqueID: %@, instanceID: %@ }
Destroyed session %@
<%p> - uniqueID: %@   accountID: %@   service: %@   destinations: %@   transportType: %@
Reliable
Unreliable
GFTMetrics will report %@
time difference between MKM over push and MKM over QR QUIC: %.3f
_reportRTC summary: %@
didReceiveReport, broadcaster: %p for session: %@
No valid RTC reports to report
-[IDSDSession _cleanupSessionConnection]
%s: session %@ connection %p
reportMKMReceived received first MKM at %f time
reportFirstMKMReceivedFromPush: get allocbind RTC report, time of allocbind response: %f, set the duration to %d ms
reportMKMReceivedOverPushViaCacheForParticipantID: token not found for participantID %llu
session:
Client channel connected %@ (connections claimed %lu)
Lost race condition - missing connection for extra connection %lu
v24@?0@"NSString"8@"IDSClientChannel"16
IDSClientChannel has excessively cached too many packets. Invalidating IDSClientChannel...
IDSClientChannel is nil - dropping packetBuffer %p (length %lu) metadata %p metadataSize %d
IDSClientChannel %p closed
writeToClientChannel: there is no real packet or metadata.
SessionLogDumpSimulateCrash
SessionLogDumpSysdiagnose
SessionLogDumpPacketCapture
SessionLogDumplskq
SessionLogDumplsof
Added cachedData - total %lu cached client data to send
greater than threshold:  [clientChannel excessiveCachingCount]: %d
writeToClientChannel: current data cached time: %f
invalid client channel: currentTime: %f, _channelDataCachedTime: %f, dataCachedDuration: %f, clientChannelTimedout: %f
%p: writeHandler: IDSDSession %p
_checkAndSendCachedDataForClient: clear cached data time
Have %lu cached client data to send
_checkAndSendCachedDataForClient: there is no real packet or metadata
generateClientChannelDataTest
generateClientChannelDataTest: wrote %d test metadata (size %u) into client channel %@
overflowClientChannelDataTest
overflowClientChannelDataTest wrote %d test metadata (size %u) into client channel %@
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IDSAgent/IDSDSession.m
got data %ld from socket %d clientChannel %@
<%@> read nonfatal failure errno %d
<%@> read failed errno %d
IDSDataChannels
<%@> read returned 0 bytes errno %d
_connectSocketDescriptor: ClientChannel read error %@
_connectSocketDescriptor: clientType: %u, end session
_connectSocketDescriptor: strongSelf: %p, not ending session because we have not been told to
_connectSocketDescriptor: ClientChannel or Session has been invalidated; not writing
Client channel read packetBuffer %lu metadata_size %lu error %@ for socket %d
Bug in client: Client channel read only metadata for socket session - dropping metadata_size %lu for socket %d
<%@> write failed to send all bytes %d < %d
<%@> write failed connection terminated %d
<%@> write nonfatal failure errno %d
<%@> write failed errno %d
B36@?0^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}8r^v16I24@"NSError"28
v20@?0Q8I16
socket %d connected to IDSClientChannel %p
kClientChannelMetadataType_TotalDatagramCount %u
kClientChannelMetadataType_TotalDatagramCount should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_CurrentDatagramCount %u
kClientChannelMetadataType_CurrentDatagramCount should be 1 byte, not %u bytes, field: %u
got PacketLinkID %d [%013.6lf]
kClientChannelMetadataType_PacketLinkID should be 1 byte, not %u bytes, field: %u
got trafficClass %u [%013.6lf]
kClientChannelMetadataType_TrafficClassKey should be %u byte, not %u bytes, field: %u
got DSCP %u [%013.6lf]
kClientChannelMetadataType_DSCPKey should be %u byte, not %u bytes, field: %u
got invalid streamIDCount %u
got streamIDCount %u
got streamID %u
kClientChannelMetadataType_StreamIDsKey: size mismatch (%u != %u), ignore.
kClientChannelMetadataType_CountPacketKey should be 1 byte, not %u bytes, field: %u
got Channel Priority %u [%013.6lf]
kClientChannelMetadataType_PriorityKey should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_OptOutPriorityFilter should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_TransitionPacketFlag should be 1 byte, not %u bytes, field: %u
got Participant ID %llu [%013.6lf]
kClientChannelMetadataType_PriorityKey should be 8 byte, not %u bytes, field: %u
got probeGroupID %u [%013.6lf]
kClientChannelMetadataType_ProbeGroupIDKey should be 2 byte, not %u bytes, field: %u
got connectedLinkID %d connectedLinkAttributes %u
kClientChannelMetadataType_LinkConnected should be 4 bytes, not %u bytes, field: %u
got disconnectedLinkID %d
kClientChannelMetadataType_LinkDisconnected should be 1 byte, not %u bytes, field: %u
got defaultLinkID %d
kClientChannelMetadataType_DefaultLinkID should be 1 byte, not %u bytes, field: %u
got ratType %u
kClientChannelMetadataType_RATChanged should be 1 bytes, not %u bytes, field: %u
got basebandRegKey %lu (linkID: %d)
kClientChannelMetadataType_BasebandRegistrationKey should be 4 bytes, not %u bytes, field: %u
got kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey %u
kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_BasebandQueueFlushPayloadKey should know its size. needs kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey
got basebandQueueFlush %@
kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_DiscardLinkIDsKey %@
kClientChannelMetadataType_KeepAliveLinksKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_PreConnectionDataSizeKey %u
kClientChannelMetadataType_PreConnectionDataSizeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_PreConnectionDataKey should know its size. needs kClientChannelMetadataType_PreConnectionDataSizeKey
got preConnectionData %@, size:%u bytes.
sendSKEData failed with error: %@. Will retry.
v16@?0@"NSError"8
kClientChannelMetadataType_PreConnectionDataKey should be %u bytes, not %u bytes, field: %u
got updateQoSIsGood %@ (linkID: %d)
kClientChannelMetadataType_UpdateQoSIsGoodKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_QueryRSSI
kClientChannelMetadataType_QueryRSSI should be %u bytes, not %u bytes, field: %u
got maxBitrate %u (linkID: %d)
kClientChannelMetadataType_MaxBitrateKey should be %u bytes, not %u bytes, field: %u
got the process PID %d
kClientChannelMetadataType_ProcessIDKey should be %d byte, not %u bytes, field: %u
kClientChannelMetadataType_DebugDataTransferTypeKey %d
kClientChannelMetadataType_DebugDataTransferTypeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_DebugDataTransferKey got the group ID %@
got kClientChannelMetadataType_EncryptionInfoKey %@ group: %@
kClientChannelMetadataType_EncryptionInfoKey FALSE. We won't pass the encryption information to the client.
kClientChannelMetadataType_EncryptionInfoKey should be 1 byte, not %u bytes, field: %u
got kClientChannelMetadataType_ForceUpdateEncryptionInfoKey
kClientChannelMetadataType_ForceUpdateEncryptionInfoKey coudln't get the group ID for the session %@!
kClientChannelMetadataType_ForceUpdateEncryptionInfoKey should be 1 byte, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_StatsKey.
Couldn't decode kClientChannelMetadataType_StatsKey bytes into NSDictionary
kClientChannelMetadataType_RemoteDeviceVersionKey should be %u bytes, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_SessionInfoKey.
IDSSession
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_SessionInfoKey
got statsID %u
kClientChannelMetadataType_StatsID should be 2 byte, not %u bytes, field: %u
_extractFieldBytesFromMetadata report dictionary: could not read MKI
_extractFieldBytesFromMetadata report dictionary: could not read MKI as UUID
_extractFieldBytesFromMetadata report dictionary: could not read times
kClientChannelMetadataType_PacketUUID should be %u bytes, not %u bytes, field: %u
kClientChannelMetadataType_ExpireTimestamp should be %u bytes, not %u bytes, field: %u
kClientChannelMetadataType_WiFiAssistEnableKey should be %u bytes, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_StartLinkProbingKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StartLinkProbingKey
Couldn't get NSData for kClientChannelMetadataType_StopLinkProbingKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StopLinkProbingKey
Couldn't get NSData for kClientChannelMetadataType_QueryLinkStatusKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_QueryLinkStatusKey
Couldn't get NSData for kClientChannelMetadataType_StatsRequestData.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StatsRequestData
Couldn't get NSData for kClientChannelMetadataType_flushLinkProbingStatusKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_flushLinkProbingStatusKey
Couldn't get valid kClientChannelMetadataType_MKMParticipantIDsKey.
kClientChannelMetadataType_MKMParticipantIDsKey: size: %u, count: %u
Couldn't get URI for MKMParticipantID %llu
participantIDArray: %@
kClientChannelMetadataType_NeedsHBHEncryption should be %u byte, not %u
kClientChannelMetadataType_IsUPlusOneEnabledKey should be %u bytes, not %u bytes, field: %u
kClientChannelMetadataType_EncryptionSequenceNumber should be %u bytes, not %u bytes, field: %u
kClientChannelMetadataType_RetransmittedPacket should be %u byte, not %u
kClientChannelMetadataType_NonRetransmittablePacket should be %u byte, not %u
kClientChannelMetadataType_ChildConnectionID should be %u bytes, not %u bytes
Unknown metadata type: %u
_connectQRDirectlyToClientChannel: ClientChannel read error %@, self.sharedState.state %d
_connectQRDirectlyToClientChannel: state: %u
_connectQRDirectlyToClientChannel: strongSelf: %p, not ending session because we have not been told to.
not sending to UTunController - currentDatagramCount %u totalDatagramCount %u
Can't send more than %u over the compound data channel! totalDatagramCount %u
not sending to UTunController - packetBufferLength %d currentDatagramCount %u totalDatagramCount %u
UnexpectedSendResult
Client channel read datagram_size %lu metadata_size %lu sendResult %s processTime %0.6lf sendTime %0.6lf [%013.6lf]
QR directly connected to IDSClientChannel %p
cachedSessionInfo is nil, requestType: %lu
allocatorOptions
v24@?0@"NSError"8@"NSDictionary"16
%@: requestSessionInfoWithOptions failed! Couldn't get the cached response from QRAllocator.
%@: requestSessionInfoWithOptions for groupID %@ relayGroupID %@ relaySessionID %@
newOptions
%@: requestSessionInfoWithOptions doesn't support the requestType: %ld
%@: _sendingOfflineActiveParticipantInfoRequest for groupID %@ relayGroupID %@ relaySessionID %@
newLinkOptions
connectQRServer failed due to invalid parameter.
User already left group %@; don't connect
connectQRServer for group %@ failed due to missing (params %p, participantID %@, relaySessionID %@, participantData %@)
sessionInfoCopy
Connect to QR server for %@. (sharedSession:%@, isInitiator:%@, isLegacy:%@, clientType:%d)
Connect to QR server failed for %@ with error %@.
failureReport
Connect to QR server succeeded for %@.
Completed send of join notification fanout message { groupID: %@, success: %@ }
v40@?0@"NSArray"8@"NSString"16@"NSString"24C32B36
lightweight participant: create keys
Cannot fan out the join notification to the group, no groupID!
Not in join state, group = %@, state = %d
Failed to receive all APNS courier acks for reliable join notification before timeout -- ending session { groupID: %@ }
Starting timeout block for reliable join notification delivery { groupID: %@, timeout: %f, timeoutBlock: %@ destinations: %@ }
Not starting timeout block for reliable join notification delivery { groupID: %@, timeout: %f, destinations: %@ }
Canceling timeout block for reliable join notification delivery { groupID: %@, timeoutBlock: %@ }
Triggering early execution of timeout block for reliable join notification delivery { groupID: %@, timeoutBlock: %@ }
ids-session-join-reliability-timeout
IPsecLink is enabled. UTun bypass: %@ service: %@, session: %@.
SessionBypassUTun
UTun bypass: %@ service: %@, session: %@.
openSocketToDevice deviceID %@, self.sharedState.useQRDirectly %@, _isFaceTime %@
open socket for session, byPassUtun: %d
v16@?0^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}8
Open socket for session complete (socket: %d, initial link type:%d) (error: %@)
v64@?0@"NSString"8Q16^[16C]24S32i36Q40@"NSObject<OS_nw_connection>"48@"NSError"56
Open socket for session complete (extra #%d) (socket: %d) (error: %@)
sessionID
session-device-socket
sessionStartWithSocketDescriptor socketDescriptor %d, bypassUtun: %@
set initial link type %d for session %@.
session-initial-link-type
received delayed QR connection %@ for an accepted session
Retry sendSKEData failed with error: %@. Give up.
options
-[IDSDSession setHasPendingAllocation:forIDSSession:]
%s IDSSessionID is nil!
v20@?0B8@"NSData"12
%s - We're already listening on socket %d
Starting to listen on raw client socket %d
Cleanup session: %@
REPORT RTC: %@
Releasing the client channel %p
%@ cleanupSessionWithCleanStatus: shouldCleanStatus: %@, _isLightweightParticipant: %@
%@ cleanupSessionWithCleanStatus: no need to clean session status
Deleted localUnauthenticatedFullIdentity from keychain {identity: %@}
Failed to delete localUnauthenticatedFullIdentity from keychain {error: %@, identity: %@}
PrioritizedActiveParticipants
disconnectGlobalLink failed with error %@
Reconnect initiated By TU
Sending END to %@, %@ <%@>
Ending session with data
Ending session
notifyLeaveToGroup and sessionDidLeaveGroup for group session %@
Didn't fan out the leave notification, the group session %@ is already ended!
Cannot fan out the endSession leave notification to the group, no groupID!
The client left the group session. IDSGroupSession can be removed. _groupStatusNotificationParams.participantID = %@
Resetting preferences for service %{public}@
Closing socket for session
Unhooking and closing socket descriptors from TransportThread %@ (possibly not on TransportThread)
utunOptions
protocol
Made options to open socket %@
Notifying client session %@ stopped with reason %d
Session is already ended, ignoring...
Session stopped notification suppressed
Enabling audio ? %@
Muting ? %@
Setting preferences %@
setRequiredCapabilities triggered leave to unsupported members {groupID: %@, needToSendJoin: %@, needToSendLeave: %@}
setRequiredCapabilities not triggering a leave to unsupported members {groupID: %@, needToSendJoin: %@, needToSendLeave: %@, groupSessionState: %d}
%@ session did start %@ with error %@
%@ session did stop with error %@
Data size is bigger than %d, ending call...
Data size is too small, ending call...
Magic number doesn't match 0x%04x, ignoring...
Malloc error while decrypting, ending call...
Stream decryption transform error %d
Received data Viceroy -> Daemon  (after decrypt data hash: %lu)  (length: %lu)
Sending data Daemon -> Viceroy  (before encrypt data hash: %lu seq: %u)  (length: %lu)
Malloc error while encrypting, ending call...
Stream encryption transform error %d
tcpssl
use TCP for QR, port: %u
use TCPSSL for QR, port: %u
<%@> add the new QR event for the RTC report: %@
<%@> _sendQREventToAVC failed to encode qrEvent for group %@ (error: %@)
<%@> link:%@ didDisconnectForDeviceUniqueID:%@ cbuuid:%@
didReceiveMaterialInfo: SME disabled
didReceiveMaterialInfo type: %d, ignoring (handled separately)
didReceiveMaterialInfo received material info: %@
didReceiveMaterialInfo could not decode content. Data: %@
couldNotDecodeContent
didReceiveMaterialInfo received material info content: %@
payload
didReceiveMaterialInfo could not decode payload. Content: %@
couldNotDecodePayload
didReceiveMaterialInfo could not get fromURI for participant %llu
missingFromURI
didReceiveMaterialInfo could not get push token for participant %llu
missingFromToken
didReceiveMaterialInfo could not process material because ownerParticipantId is 0
missingOwnerParticipantID
didReceiveMaterialInfo: could not process material from %llu for group %@ and session %@ since the originator of material is not in group membership: %@
ReceivedFromUnknownMember
didReceiveMaterialInfo failed to verify signature for info: %@ error: %@
failedSignatureVerification
Receiving Key Material (QUIC) [MKM] -- %f
didReceiveMaterialInfo failed processing MKM for participant %llu; payload %@; error: %@
failedProcessingMKM
ids-rtencryption-master-key-material-key
Receiving Key Material (QUIC) [SKM] -- %f
didReceiveMaterialInfo failed processing SKM for participant %llu; payload %@; error: %@
failedProcessingSKM
ids-rtencryption-stable-key-material-key
Receiving Key Material (QUIC) [PreKey] -- %f
public-prekey
didReceiveMaterialInfo could not process preKey for participant %llu; no preKey found in payload %@
missingPreKeyData
wrap-mode
creation-date
didReceiveMaterialInfo could not process preKey for participant %llu; no wrap-mode found in payload %@
missingWrapMode
didReceiveMaterialInfo could not process preKey for participant %llu; no creation-date found in payload %@
missingServerDateTimestamp
didReceiveMaterialInfo unknown material type %d
didReceiveMaterialInfo did not receive signature: %@
missingSignature
didReceiveMaterialInfo ignoring material info; sessionID %@ does not match our sessionID %@
sessionIDMismatch
didReceiveMaterialInfo verifying signature: %@ matchesPayload: %@
<%@> link:%@ didConnectForDeviceUniqueID:%@ cbuuid:%@
<%@> link:%@ didConnectUnderlyingLink:%d linkUUID:%@ localAttributes:%@ remoteAttributes:%@
-[IDSDSession link:didConnectUnderlyingLink:linkUUID:localAttributes:remoteAttributes:]
%s incorrect attribute length: %d
No need to send kClientChannelMetadataType_LinkConnected, <%@> useQR: %@, isFaceTimeCall: %@
<%@> link:%@ didReiceiveChildConnectionID:%@ forLinkID:%d
No need to send kClientChannelMetadataType_ChildConnectionID, <%@> useQR: %@, isFaceTimeCall: %@
v32@?0@"NSNumber"8@"NSString"16^B24
v32@?0@"NSNumber"8@"NSNumber"16^B24
v32@?0@"NSDictionary"8Q16^B24
destinationsContainFromID: %@ is not in the destinations %@
Ignored updateMembers since destinations have not been changed.
updateMembers: newly added destinations: %@
Updated destinations for group %@ to %@ (triggeredLocally %@)
Updated destinations have lightweight status values: %@
Re-allocating due to new member
Resetting keys, sending membership change event for group %@, triggeredLocally: %@
No need to reset keys for group %@, triggeredLocally: %@
manageDesignatedMembers for group %@ to %@
manageDesignatedMembers doesn't have valid cached sessionInfo for group %@
removeParticipantIDs for group %@ to %@
removeParticipantIDs doesn't have valid cached sessionInfo for group %@
updateParticipantType: no valid cached sessionInfo for group %@
setGroupStreamInfo: sessionInfo[kIDSQRAllocateKey_StreamInfoSubscribedStreams]:%@, sessionInfo:%@, streamInfo.subscribedStreams:%@
Client data blob size is greater than push size limitation which is %ld and groupID: %@
Client data blob size %lu is greater than push size limitation %ld
joinGroupSessionError
Participant query in process or defaults are not set for hardcoded QR session info, self.sharedState.groupID: %@, self.sharedState.destinations: %@
invalidateLatestResponse status: %d, reason: %@, error: %@
sessionInfoFromDefaults
disconnectGlobalLink during leaving group session failed: %@
Cannot fan out the leave notification to the group, no groupID!
sendKeyMaterialMessage - message %{private}@ given aliases %@  destination: %@
Message %@ got response code %lu error %@ lastCall %@
sendKeyMaterialData failed with error: %d
v16@?0q8
setServerDesiredKeyMaterials: SME disabled
updateServerDesiredKeyValueDeliveryMaterialsNeeded: SME disabled
updateServerDesiredKeyMaterials: SME disabled
Received the new MKM %lld milleseconds after the membership change event for group %@
mirage-blob
receiveAndDecryptEncryptedDataBlobs: type: %@, blobLength: %lu, standaloneBlob: %@, keyID: %@
v32@?0@"NSUUID"8@"NSData"16^B24
v32@?0@"NSNumber"8@"NSData"16^B24
recvStableKeyMaterialForFrameworkCache for session %@. SKM: %@
requestMaterialsForParticipantIDs for session %@. participantIDs: %@; materialType:%d
requestMaterialsForParticipantIDs: SME disabled
Sending the session info request to update the active participant list...
URI to participantID mapping changed for sessionID: %@
Allocation failure for session %@, status = %d, code = %d
v32@?0@"IDSGroupSessionActiveParticipant"8Q16^B24
Missing push token at index %d. Replacing NSNull with nil.
Couldn't get the URI from the QRAllocate response for participantID: %llu.
not fastSync, return
update active lightweight participants: %@
update active participants: %@
Failed to get URI from QR allocate response
fanout context
IDSDSession read handler called for %@ - result %s
B24@?0^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}8@"<IDSMultiplexerTransportClientConnection>"16
Reinitiate called for session %@
Session %@ reinitiate called, but we don't support reinitiate, enableQuickRelay: %d, useQRDirectly: %d
Session %@ reinitiate called, but our current state is not connected (current state: %u)
Session %@ reinitiate called, but this session is with the default paired device
Session %@ reinitiate: sending request for initiator to kick off reinitiate flow
Session %@ reinitiate: disconnecting global link
disconnectGlobalLink during reinitiate failed with error %@
Unhandled reinitiate subcommand type %@ for session %@
Reinitiate request message received for session %@: %@
Reinitiate teardown message received for session %@: %@
Session %@ received reinitiate teardown message, but we don't support reinitiate
Session %@ received reinitiate teardown message, but our current state is not connected (current state: %u)
Session %@ reinitiate teardown: disconnecting global link
disconnectGlobalLink during reinitiate teardown failed with error %@
Reinitiate teardown ack message received for session %@: %@
Session %@ received reinitiate teardown ack message, but our current state is not reinitiating (current state: %u)
Session %@ reinitiate: setting up new QR allocation
Reinitiate bringup message received for session %@: %@
Session %@ received reinitiate bringup message, but our current state is not reintiating (current state: %u)
Session %@ reinitiate bringup: requesting allocation for recipient
Reinitiate bringup ack message received for session %@: %@
Session %@ received reinitiate bringup ack message, but our current state is not reintiating (current state: %u)
Reinitiate accepted relay-session-id %@
66776766663F02535E35
QRAllocator
 invalid port %d
<%@: %p forParticipantID: %llu forPublicIdentity: %@ encryptedData: %@>
disableEncryptionForData
IDSSockAddrPairTable_Init failed with memory allocation
IDSSockAddrPairTable_Release
[%s-%s] already exists.
failed with realloc
increase capacity %d->%d
added pair [%s-%s], state (%ld), total %d pair(s).
IDSSockAddrPairTable_UpdatePairState - found no match for transactionID %@
IDSSockAddrPairTable_UpdatePairState - update state for [%s-%s] (%ld->%ld)
Nominate connection [%s(%u)-%s] is done, skip.
Nominate connection [%s(%u)-%s].
Nominate new connection [%s(%u)-%s].
Start echo (%d) for [%s(%u)-%s].
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IDSAgent/IDSSockAddrPairTable.m
skip regular binding request
skip nominate binding request
send binding request %@ for [%s(%u)-%s].
failed to send binding request with error (%s)
SATbl
cannot send echo request due to invalid state (%d).
send echo request (count:%d) for %s(%u)-%s.
failed to send echo request with error (%s)
@"CUTUnsafePromise"16@?0@"IDSMPDecryptionResult"8
timestamp
NGMFullPrekey
IDSDaemonShutdownNotification
com.apple.identityservicesd
UseNewThreadArch_v1
IDS Primary Base Queue
IDSDaemon Primary Queue Targets Base Queue
com.apple.pds.xpc.workloop
com.apple.identityservicesd.pds
/Library/IdentityServices/PDS/
GUIDTRACE
OUTGOING-PUSH_FULLY_SENT:%@ SERVICE:%@
ids-persistent-map-metadata
ids-persistent-map
versionNumber
Block on `IDSPersistentMapPolicy` was nil, this should never happen!
@"NSMutableDictionary"24@?0@"NSDictionary"8q16
com.apple.ids.persistent-map.%@.persist
<%@: %p; identifier = %@; cachedMap = %@; persister = %@>
-[IDSPersistentMap setObject:forKey:]
IDSPersistentMap.m
key && obj
-[IDSPersistentMap removeObjectForKey:]
IDSPersistentMap
We're not loaded; ignoring save to disk for cache %@
-[IDSPersistentMap setObject:forKeyedSubscript:]
Loading cache with identifier %@
  => Underlying persister %@ is unavailable; not loading!
  => Loaded cache has %ld keys
Saving cache with identifier %@ => Will save cache to disk with %ld keys
  => Encoding...
  => Done encoding: %ld bytes
  => Skipping encoding, empty
Exception decoding persistent map -- throwing away {exception: %@, identitier: %@}
Error during Decoding %@
com.apple.identityservices.%@
com.apple.identityservicesd.invitation.store
%@-sentInvitations
%@-receivedInvitation
firewall-limit
firewall-time-period
https://support.apple.com
firewall-support-url
firewall-should-redirect
com.apple.Preferences
/System/Library/UserNotifications/Bundles/com.apple.identityservicesd.firewall.bundle
@2x.png
UNUserNotificationCenter
UserNotifications
%@,%@
Unknown Communication
IDSFirewallLocalizable
Firewall alert title
Lockdown Mode blocked iCloud collaboration
Firewall iCloud alert title
Lockdown Mode blocked Apple Pay request
Firewall ApplePay request alert title
Lockdown Mode blocked Apple Card sharing
Firewall ApplePay sharing alert title
Lockdown Mode blocked SharePlay
Firewall SharePlay alert title
Lockdown Mode blocked FaceTime
Firewall FaceTime alert title
Lockdown Mode blocked FaceTime Audio
Firewall FaceTime Audio alert title
Lockdown Mode blocked FaceTime Live Photo
Firewall FaceTime Live Photos alert title
Lockdown Mode blocked Intercom message
Firewall Intercom alert title
Lockdown Mode blocked Screen Sharing
Firewall Screen Sharing alert title
Lockdown Mode blocked Walkie-Talkie
Firewall Walkie-Talkie alert title
Lockdown Mode blocked Classroom
Firewall Classroom alert title
Lockdown Mode blocked purchase request
Firewall iTunes Purchase request alert title
Lockdown Mode blocked Find My
Firewall Find My Device alert title
Lockdown Mode blocked Location Sharing invitation
Firewall Location Sharing alert title
Lockdown Mode blocked Sharing
Firewall GroupKit alert title
Lockdown Mode blocked Home access
Firewall HomeKit alert title
Lockdown Mode blocked camera access
Firewall HomeKit camera alert title
Lockdown Mode blocked Home invitation
Firewall HomeKit Invite alert title
Lockdown Mode blocked Activity Sharing invitation
Firewall Activity Sharing alert title
Lockdown Mode blocked Game Center invitation
Firewall Game Center Invite alert title
Lockdown Mode blocked Health Sharing invitation
Firewall Health Sharing alert title
Lockdown Mode blocked Car Key Sharing invitation
Firewall Car Key Sharing alert title
Lockdown Mode blocked ETA Sharing
Firewall ETA Sharing alert title
Lockdown Mode blocked AirDrop
Firewall AirDrop alert title
Lockdown Mode blocked Photo Stream Invitation
Firewall Photo Stream Invite alert title
Firewall AppleCare Screen Share alert title
Lockdown Mode blocked a Device Inquiry
Firewall AppleCare Settings Share alert title
Lockdown Mode blocked Focus Sharing
Firewall StatusKit alert title
Lockdown Mode blocked ScreenTime Sharing
Firewall ScreenTime alert title
Lockdown Mode blocked Freeform
Firewall Freeform alert title
Lockdown Mode blocked Notes
Firewall Notes alert title
%@ is trying to contact you on %@. Communication was dropped.
Firewall alert body
%@ attempted to collaborate using iCloud.
Firewall iCloud alert body
%@ attempted to request or send a payment.
Firewall ApplePay request alert body
%@ attempted to share Apple Card or transaction information.
Firewall ApplePay sharing alert body
%@ attempted to SharePlay Music.
Firewall SharePlay alert body
%@ attempted to FaceTime.
Firewall Firewall FaceTime alert body
%@ attempted to FaceTime Audio call.
Firewall FaceTime Audio alert body
%@ attempted to share a FaceTime Live Photo.
Firewall FaceTime Live Photos alert body
Someone attempted to send Intercom message from HomePod.
Firewall HomePod Drop-In alert body
%@ attempted to screen share with you.
Firewall Screen Sharing alert body
%@ invited you to Walkie-Talkie.
Firewall Firewall Walkie-Talkie alert body
A teacher attempted to send a command using Classroom.
Firewall Classroom alert body
%@ attempted to request purchase authorization.
Firewall iTunes Purchase Request alert body
Someone attempted to use FindMy to locate an AirTag near you.
Firewall Find My Device alert body
%@ invited you to share your location.
Firewall Location Sharing alert body
%@ attempted to set up a share with you.
Firewall GroupKit alert body
%@ attempted to access a Home.
Firewall HomeKit alert body
%@ attempted to access a camera.
Firewall HomeKit camera alert body
%@ attempted to invite you to a Home.
Firewall HomeKit Invite alert body
Firewall Intercom alert body
%@ invited you to share your Fitness Activity.
Firewall Activity Sharing alert body
%@ invited you to play a game.
Firewall Game Center Invite alert body
%@ invited you to share your health data.
Firewall Health Sharing alert body
%@ invited you to share your Car Key.
Firewall Car Key Sharing alert body
%@ attempted to share their ETA with you.
Firewall ETA Sharing alert body
%@ attempted to share something using AirDrop.
Firewall AirDrop alert body
%@ invited you to a Shared Photo Stream.
Firewall Photo Stream Invite alert body
An AppleCare advisor attempted to view your screen.
Firewall AppleCare Screen Share alert body
An AppleCare advisor attempted to gather information about your Mac.
Firewall AppleCare Settings Share alert body for Mac
An AppleCare advisor attempted to gather information about your iPhone.
Firewall AppleCare Settings Share alert body for iPhone
An AppleCare advisor attempted to gather information about your iPad.
Firewall AppleCare Settings Share alert body for iPad
An AppleCare advisor attempted to gather information about your device.
Firewall AppleCare Settings Share alert body default
Firewall StatusKit alert body
Firewall ScreenTime alert body
%@ attempted to collaborate with you using Freeform.
Firewall Freeform alert body
%@ attempted to collaborate with you using Notes.
Firewall Notes alert body
An unknown contact
Collaboration%@
com.apple.Passbook
com.apple.facetime
com.apple.Home
Screen Sharing%@
Classroom%@
com.apple.MobileStore
com.apple.findmy
Fitness%@
Game Center%@
Health%@
com.apple.Maps
com.apple.AirDropUIRemoteNotification
Photos%@
Apple Care%@
Focus%@
Screen Time%@
Freeform%@
Notes%@
UNNotificationRequest
UNMutableNotificationContent
UNNotificationIcon
com.apple.
%@/%@
com.apple.ids.IDSDGroupStatusNotificationController
GroupStatusNotificationController
Cannot get participantsForGroupID, no groupID!
participantsForGroupID %@ are %@
IDSDGroupStatusNotificationController.m
yyyy-MM-dd HH:mm:ssz
en_US
messageDict
notify Leave To Group
ids-multiway-ftmessage-send-timeout
Server Bag provided us with a send timeout of %f 
Group status notification message callback received { GUID: %@, responseCode: %lu, error: %@, lastCourerAck: %@, lastCall: %@ }
Last Courier ack received for group status notification message { waitForMadridAcks: %@, pendingCompletionBlock: %@ }
Last Madrid ack received for group status notification message { waitForMadridAcks: %@, pendingCompletionBlock: %@ }
No Group, bailing...
Process incoming fanout message: %@, fromToken: %@, fromID: %@, specificOriginator: %@ fromStorage %@
processIncomingParticipantUpdateMessage: We'll drop this participant update message for group %@ since %@ is not in this group!
Receive join from initiator: %@
Couldn't pass the join event to clients. There is no session for group %@ and the join push is not from Initiator.
Passing the join event to client/s. There is no session for group %@ but the join push is from Initiator
processIncomingParticipantDataUpdateMessage: We'll drop this participant update message for group %@ since %@ is not in this group!
Look up peer with URI: %@, push token count: %u
Skipping duplicate token %@
strongSelf->_groupIDToCapabilityToParticipantPushTokens[groupID]
groupID: %@, sessionID: %@, %@
Could not look up the recipients' push tokens, IDs: %@, errors: %@ 
Looked up _groupMemberPushTokens: %@
Cannot find the push tokens, missing recipientIDs.
device:
%s - No account found to build specificOriginator, bailing...
%s - No device found to build specificOriginator, bailing...
%s - No device push token found to build specificOriginator, bailing...
%s - No device identity found to build specificOriginator, bailing...
original fromID %@ -> resulting specificOriginator %@
Couldn't find the tokens for group %@
Coudln't find the URI for the given token for group %@. the pushToken is not NSData.
Coudln't find the URI for the given token %@ for group %@.
Broadcasting receivedGroupSessionParticipantUpdate:forTopic: {topic: %@, update: %@, context: %@}
Did not find a client to handle receivedGroupSessionParticipantUpdate:forTopic: -- dropping broadcast
Broadcasting receivedGroupSessionParticipantDataUpdate:forTopic: {topic: %@, update: %@}
Did not find a client to handle receivedGroupSessionParticipantDataUpdate:forTopic: -- dropping broadcast
No auth token
auth token
No profile ID
profile-id
profileInfo
x-vc-profile-id
x-vc-auth-token
Profile response: %@
com.apple.private.ids.allow-push-replay
com.apple.idstool
plain
encrypted
decrypted
encryptedAgain
decryptedAgain
v28@?0B8@"NSArray"12@"NSError"20
IDSToolTrigger
Session Guid
foo2@apple.com
Foo's New Device
@16@?0@"IDSEndpoint"8
v32@?0@"IDSQueryKeyTransparencyContext"8@"NSArray"16@"NSError"24
v24@?0@"IDSKTVerificationResult"8@"NSError"16
v24@?0@"NSArray"8@"NSError"16
Stored Users:
   DS Realm:
      %@
         %@
   Phone Realm:
   Transient Phone Realm:
%@ => %@
v24@?0@"NSString"8@"NSDictionary"16
12345678-7654-DADA-DADA-DADADADADADA
idstest
localdelivery
devicePrekeys.publicPrekey.timestamp
%@[%lld]
services:
notification services:
entitlements:
commands:
capabilities:
bundle ID:
v60@?0@"IMRemoteObject"8@"NSSet"16@"NSSet"24@"IDSEntitlements"32@"NSSet"40I48@"NSString"52
(null)
Push Token
Session Token
Refresh Date
Expire Date
Legacy Message Protection Version
Legacy Message Protection Identity
NGM Message Protection Version
NGM Message Protection Prekey
KT Loggable Data
KT Device Signature
KT Mismatched Account Flag
KT Capable Flag
%@%@
(None)
Traffic
*** Clearing traffic ***
global-%u
  == Incrementing %@ for service: %@   Requestor: %@  (Count: %d, GlobalCountForAdhocType%u: %@)
outgoing-messages
outgoing-fallback-messages
-fallback
peer%@-message-budget-global-daily-%u
     Server daily global%@ budget is: %@   Current count is: %@
     **** we are over budget
     **** We are over budget - Server daily global budget is: %@   Current count is: %@
peer%@-message-budget-daily-%@
     Server daily%@ budget is: %@   Current count is: %@
     **** We are over budget - Server service%@ budget is: %@   Current count is: %@
peer%@-message-budget-default-daily-%u
     Server daily%@ default budget is: %@   Current count is: %@
     **** We are over budget - Server daily%@ default budget is: %@   Current count is: %@
     No budget specified
outgoing-server-messages
server-message-budget-daily-%@
     Server daily budget is: %@   Current count is: %@
query-requests
query-ui-budget-daily-%@
queries
query-budget-daily-%@
====== IDS Traffic Usage:
   Service: %@
     %@: %@
====== Done
incoming-messages
incoming-local-messages
com.apple.private.ac
iMessage
Temporary Phone Alert iMessage
FaceTime
Temporary Phone Alert FaceTime
%@ and %@
Multiple service format
WatchPairing
Finishing up switching
Calling completion block to finish switching
PreferredAccount
FetchRemote
TinkerDeviceInfo
AccountSyncSyncedServices
@16@?0@"NSString"8
d16@?0q8
v16@?0@?<v@?B>8
com.apple.identityservice.accountsync-%@
v20@?0B8@"NSString"12
-[IDSAccountSync noteShouldSynchronizePreferredAccount]
identityservicesd
@16@?0@"IDSDAccount"8
@16@?0@"NSDictionary"8
B16@?0@8
v16@?0@8
B24@?0@"NSString"8@16
<%@: %p encryptionType: %@, dataLength: %lu>
IDSKeychainKeyElectionStoreErrorDomain
clusterData
group-pai-%@-%@
IDSClientDataErrorDomain
EC Key Loading Failure (iden:%@, pre:%@, reg:%@, unreg:%@)
 (regKeychain %@:%ld)
 (regDeserial %@:%ld)
 (unregKeychain %@:%ld)
 (unregDeserial %@:%ld)
 (generate %@:%ld)
 (rolling %@:%ld)
 (toRegister %@:%ld)
SKPresence
StatusKit
pMpr
pMpo
pTtl
WebTunnel
Web Tunnel Message Completed With Respone Headers %@
AKAccountManager
AuthKit
prod
com.apple.private.alloy.maps
FaceTime_temporary
iMessage_temporary
IDS_temporary
com.apple.private.alloy.electrictouch
@"NSArray"20@?0i8@"NSArray"12
B16@?0@"IDSDAccount"8
v16@?0@"IDSDAccount"8
LastRepairInterval
TotalRepairCount
InitialRepairInterval
phone-registration-retry-interval-seconds
phone-registration-retry-max-interval-seconds
service_identifier
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IDSAgent/IDSBTLELink.m
BTLE
IDSBTLELink
setHasSpaceAvailable %@
didReceiveData length %luB
BTLELink
Received data too big (%lu) - rejecting
Received zero-length data - rejecting
Received data too small (%lu) - rejecting
Data corruption! Checksum check failed (old:%04x new:%04x) data(%d): %@
Data corruption! This data did not decode(%d): %@
%c BTLE      (%s) Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
innerDictionary
auth-token
id-validate-credentials
origin
v16@?0@"CUTAsyncReducerState"8
IDSRapportDeliveryController.m
Any single bonjour message send shouldn't fail the whole send operation
hello (controlChannelVersion: [%@], productName: [%@], productVersion: [%@], productBuildVersion: [%@], model: [%@], protocol: %@ minCompatibilityVersion: %@ maxCompatibilityVersion: %@ deviceUniqueID: %@ instanceID: %@, supportIPsecLink:%@, isTinker: %@)
%@: control message: hello cannot decode controlChannelVersion
IDSNetworking
%@: control message: hello cannot decode productName
%@: control message: hello cannot decode productVersion
%@: control message: hello cannot decode productBuildVersion
%@: control message: hello cannot decode model
UTun
Optional field data byte size: %lu
Instance ID: %@
Device uniqueID: %@
Capability flags: %@
Service minimum compatibility version: %@
Unknown field type: %u
ProtocolVersion: %@, min/max: %@ %@
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IDSAgent/IDSUTunControlMessage.m
getUint32FromBytes, uint32_t should be 4 bytes, not %u bytes, field: %u
getUint64FromBytes, uint64_t should be 8 bytes, not %u bytes, field: %u
getUint16FromBytes, uint16_t should be 2 bytes, not %u bytes, field: %u
IDSTapToRadarLastRequestTime
[%@] Tap-to-Radar: %@ (server error code: %@)
Internal IDS error detected 
Internal IDS Error Detected
An internal IDS error has been detected
IDSPopupPromptLastRequestTime
%@-%ld
SpamReporting
Told to report spam with localObject %@ for service: %@
Process not entitled to report spam
IDS Server reports that general spam reporting v1 is disabled.
Couldn't find account with alias for service {serviceIdentifier: %@, alias: %@}
ids-general-spam-report-v1-is-disabled
Server Bag provided us with v1 spam reporting value isDisabled: %@
version
v24@?0@"ENGroup"8@"NSError"16
v48@?0@"IDSGroupPutMessage"8@"NSError"16q24@"NSDictionary"32@"NSArray"40
v16@?0@"NSArray"8
v48@?0@"IDSGroupGetMessage"8@"NSError"16q24@"NSDictionary"32@"NSArray"40
Unepxcted account key class. Expected IDSAccountIdentity
Unexpected cypher class. Expected IDSConversationGroupCypher
Unepxcted device key class. Expected IDSDeviceIdentity
forwarding-sig
groupID
<%@ %p key: %@, groupID: %@, data.length: %@, signature.length: %@>
IDSCloudKitKeyTransparencyStoreErrorDomain
com.apple.private.ids.kt
com.apple.private.ids.kt-kvs
IDSKeyTransparencyDataZone
IDSKeyTransparencyDeviceRecord
IDSKTDevice
IDSKTMetadata
IDSKTState
IDSKTKVSCreationMetric
IDSKTKVSCreationSuccess
IDSKTKVSQuotaViolation
KVSErrorDomain
KVSErrorCode
<%@: %p deviceData: %@, deviceMetadata: %@ recordID: %@>
v32@?0@"NSArray"8@"NSArray"16@"NSError"24
v24@?0@"NSDictionary"8@"NSError"16
v24@?0B8B12@"NSError"16
Unable to fetch CloudKit account info
Timed out fetching account key transparency eligibility.
v24@?0@"CKAccountInfo"8@"NSError"16
Timed out upserting key transparency device record
Device-to-device encryption is not available
Failed to fetch device-to-device encryption availability status
Unable to create CloudKit record for provided device record
@16@?0@"IDSCloudKitKeyTransparencyDeviceRecord"8
Key transparency device record delete is not implemented
Timed out nuking key transparency device records
Timed out fetching key transparency device records
v16@?0@"CKRecord"8
@16@?0@"CKRecord"8
v24@?0@"CKQueryCursor"8@"NSError"16
KVS not yet loaded.
Failed to sync KVS.
CloudKit
ck-kt-account-timeout
ck-kt-upsert-timeout
ck-kt-time-interval-for-requests
ck-kt-upsert-nondiscretionary
ck-kt-nuke-timeout
ck-kt-nuke-nondiscretionary
ck-kt-fetch-timeout
ck-kt-cache-enabled
ck-kt-cache-ttl
ck-kt-fetch-nondiscretionary
CKCurrentUserDefaultName
CKContainer
CKRecordID
CKRecordZoneID
CKRecord
CKRecordZone
CKFetchRecordZonesOperation
CKModifyRecordZonesOperation
CKModifyRecordsOperation
CKQuery
CKQueryOperation
paired-devices
schema-version
System is shutting down, not creating daemon
Resetting preferences to 0 for all services
dummyService
/Library/IdentityServices/delete/
Failed to create to-be-deleted directory %@ error %@
Failed to move incoming files to to-be-deleted directory %@ error %@ -- delete anyway
Last resort file removal took %0.6lf seconds
Delayed background file removal took %0.6lf seconds
Failed to create incoming files directory %@ error %@
IDS incoming files directory cleanup-on-init took %0.6lf seconds
System did lock
Alerted that duet resource availability has changed.
No more listeners terminating
Shutting down
======================================================================
===== Listener Information ===========================================
     Listener ID: %@ (%d:%@)
   Remote Object: %@
    Local Object: %@
    Entitlements: %@
        Commands: %@
    Capabilities: %@
      Bundle IDs: %@
===================================
agentRequested
TimingLogs
IDSAgent took %f seconds to launch
serviceInfo
enabledAccountsInfo
dependentDevices
linkedDevices
familyInfo
familyDevices
maxMessageSizes
pendingInvitationMap
receivedInvitationMap
deviceIdentifier
activeDeviceUniqueID
Found existing listener %@ for pid %d, cleaning up
Exception handling existing listener cleanup: %@
Tried to set up listener (ID: %@) with empty listener port
Tried to set up listener (port: %@) with empty ID
services
commands
capabilities
bundleID
processName
notificationServices
Setting up connection to listener ID: %@  bundle ID: %@  setupInfo %@ entitlements %@  pid: %d  name: %@  connection: %p notificationServices %@
com.apple.healthd
Exception generating setup information for listener: %@
context
v16@?0Q8
Daemon was hard reset, ignoring incoming request
** Empty local object passed in for listener check
No listener found for local object: %@
Exception performing validated listener block: %@
v32@?0@"IMRemoteObject"8Q16^B24
Tried to remove nil listener object
Removing listener ID: %@
We had %lu %@ before removing listener, now we have %lu. This listener had %lu.
Exception removing listener: %@
Exception removing listener object: %@
Exception removing local listener object: %@
Exception looking up listeners: %@
remoteObjectDiedNotification: %@
localObjectDiedNotification: %@
Resetting link preferences for process %@
networkStateChangedForLogTransportHint:
callservicesd
assistantd
com.apple.private.alloy.siri.proxy
companion_proxy
com.apple.private.alloy.companionproxy
Starting push handling with services %@ waking topics: %@ opportunistic topics: %@ nonwaking topics %@
com.apple.idsdaemon.apsqueue
Updating push handling with services %@ waking topics: %@ opportunistic topics: %@ nonwaking topics: %@
Updating local push handling with topics: %@
CheckResponseStorageFlags
Updating push handling with commands %@
Daemon was hard reset, ignoring broadcast
Service found to find broadcaster %@   topic: %@
com.apple.private.alloy.accountssync
com.apple.private.alloy.health.sync.classc
com.apple.private.alloy.fitnessfriends.icloud
com.apple.private.alloy.fitnessfriends.imessage
v32@?0@"IDSIncomingMessageBroadcast"8Q16^B24
Broadcast: outgoing generic notification %lld
Broadcast: starting to work on outgoing notification id %lld
Daemon was hard reset, not enqueuing broadcast
IDSDaemon: Exception caught broadcasting message: %@
Broadcast: Couldn't find a valid service for the given topic %@
Broadcast: scheduling broadcast %lld on topic %@ to clients needsTargetAck %d targetsAlive %d shouldLaunch %d
Broadcast: broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u
Broadcast: failed to deliver broadcast %lld to targets, enqueueing for later dispatch!
Broadcast: Enqueueing broadcast %lld on topic %@ 
Broadcast: Performing enqueued broadcast %lld for topic %@
Broadcast: Broadcast %lld enqueued at %@ has timed out - Calling timed out broadcast block for topic %@ with nil broadcaster to allow cleanup
Broadcast: enqueued broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u
B16@?0q8
Broadcast: done working on outgoing notification id %lld
v16@?0@"NSObject<OS_xpc_object>"8
Broadcast: Broadcasting xpc wake notification %@ to awaken clients of %@.
IDSClientWake
Broadcast: Broadcasting darwin notification %@ to awaken clients of %@.
Launching on-demand services for queued broadcast attempts
Couldn't find a valid service for the given identifier %@
Broadcast: Received request to drop enqueued broadcast %lld
Broadcast: Dropping enqueued broadcast %lld
Broadcast: Resetting queued broadcasts for services %@ priority %ld 
Broadcast: Processing queued broadcasts for services %@ priority %ld forceRetry %d 
Broadcast: previously enqueued broadcast %lld for service %@ succeeded %d needsClientAck %d forceRetry %d 
Processed queued broadcast attempts - %lu remaining for %@
Dropping queued broadcasts for all services priority %ld
Dropping %@ for %@
Dropped queued broadcasts for all services priority %ld
idstool
accountsd
Allowing wildcard access
IDS access warning: %@ for service: %@ entitlement: %@ client: %@:%@:%d entitlements: %@
IDS access warning: %@ for service: %@ entitlement: %@ account: %@ entitlements: %@
############### Service not found
############### Unknown entitlement type
############### No entitlements found
v24@?0@"NSDictionary"8@"IMLocalObject"16
PID: %d was suspended
Exception handling pid suspension: %@
Incoming listener services %@ commands %@ caps %d
Allowing listener services %@ commands %@ caps %d
Got %@ %@ for localObjectIndex %lu
-[IDSDaemon registerForNotificationsOnServices:messageContext:]_block_invoke
%s: received client request to change notification services from %@ to %@ 
Setting wakingPushPriority %ld for topic %@, was %@
Removing waking push priority for service %@ in store
socket
socket-type
session-socket
received socket %@
IDSDaemon - Could not find session with uniqueID %@ to setup client socket, ignoring...
raw-socket
Incorrect objet type passed in as file descriptor
service
completionHandlerID
opensocket [%@] context=[%@] (handlerID:%@) ***
opensocket was called for a non-default device without nsuuid!!!!!!!!
client directly calling UTUN's openSocketWithOptions
%@ didn't specify any priority for %@. This will use the default priority queue.
client's openSocketWithOptions call returned socket %d, error %@
utun finished connection options[%@] socket(%d) handlerID[%@] error[%@] socketObject[%@]
device-socket
metrics
error
closesocket [%@]
v40@?0Q8Q16Q24Q32
syncMessagesStats
defaultMessagesStats
urgentMessagesStats
urgentCloudMessagesStats
sendingMessageStats
queuedIncomingMessages
linkStats
Broadcasting delivery stats to client
persistPendingInvitation: persisting invitation {%@} for service {%@}
persistPendingInvitation: Cannot persist invitation {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} 
persistReceivedInvitation: persisting invitation {%@} for service {%@}
persistReceivedInvitation: Cannot persist invitation {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} 
removePendingInvitation: removing invitations with identifiers {%@} for service {%@}
removePendingInvitation: Cannot remove invitations {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} 
removeReceivedInvitation: removing invitations with identifiers {%@} for service {%@}
removeReceivedInvitation: Cannot remove invitations {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} 
%@.[%d]
B16@?0@"IDSServiceProperties"8
v36@?0@8@"NSString"16@"NSString"24B32
Accepting Incoming Grant Requests
IDSDaemonMIGInterface auth port died: %@
v24@?0@"NSObject<OS_xpc_object>"8@"NSObject<OS_xpc_object>"16
Incoming peer auth grant request
com.apple.identityservicesd.connection_queue
IDSDaemonMIGInterface: Could not create server with name: %@
_IDSDaemonRunningNotifyToken
IDSDaemonMIGInterface
peer(%d) received XPC_ERROR_CONNECTION_INVALID
peer(%d) received XPC_ERROR_CONNECTION_INTERRUPTED
peer(%d) received XPC_ERROR_TERMINATION_IMMINENT
setup-request
received message from peer(%d): %s
portName
setupInfo
RejectDataSeparatedClients
response
granted
Incoming file descriptor request
SyncReplySupport
received unknown from peer(%d): %s
ids-query-qr-allocate-cloudmessaging
ids-query-qr-allocate-facetime
ids-query-qr-allocate-groupfacetime
ids-query-qr-allocate-homekit
ids-query-qr-allocate-terminus
ids-query-qr-allocate-default
ids-qr-allocate-prevent-duplicate-tokens
com.apple.private.alloy.ids.cloudmessaging
com.apple.private.alloy.terminus
PacketsPerSecond
InputBytesPerSecond
OutputBytesPerSecond
Intent
Timestamp
IDSPowerLogQueue
LinkPreferencesManager
updateService: %{public}@, withPreferences: %{public}@.
Resetting preferences to 0 for service: %{public}@, at time: %{public}@
Cannot update preferences for service: %{public}@ with negative values, preferences: %{public}@.
Getting accumulativePreferencesForAllServices. Service: %{public}@, preferences: %{public}@
forceBTClassic
ServiceName
IDSLinkPreferenceRequest
push_token
trusted_services
buildVersion
productName
transparencyVersion
_IDSEncryptionQueueSync
_MessageEncryptionContextSync
_IDSEncryptionQueueDefault
_MessageEncryptionContextDefault
_IDSEncryptionQueueUrgent
_MessageEncryptionContextUrgent
B16@?0^@8
IDSDXPCFirewall.m
completion
Invalid service name. Could not fetch service properties.
Failed to add entries to allow list.
Failed to remove entries from allow list.
Failed to add entries to the allow list after successfully removing entries.
Failed to fetch donated entries from allow list
Failed to fetch entries from allow list
Failed to remove all donated entries from allow list.
Failed to remove all entries from allow list.
Failed to get recently blocked entries
-[IDSDXPCFirewall populateMergeIDForEntries:withCompletion:]
Failed to query for merge id due to nil local uri or cert
v44@?0@"NSDictionary"8@"NSString"16@"NSString"24B32@"NSError"36
IDSFirewallAllowQuery
GUID %@ Message to send per destination:
IDSMessageFactoryComponent.m
@"CUTUnsafePromise"16@?0@"NSArray"8
IDSEngramKeyStoreErrorDomain
iCloud.com.apple.Engram.Development
kIDSEngramKeyStoreFullDeviceIdentity
Engram key election failed
v40@?0@"IDSMPFullAccountIdentityCluster"8@"IDSMPFullServiceIdentityAdmin"16@"IDSMPFullServiceIdentitySigning"24@"NSError"32
Device is not currently in Keychain Sync Circle. Ensure your device has iCloud Keychain Sync enabled and device is not under first unlock
Engram is disabled on this device
Engram is disabled on this device. Update UserDefaults as described in IMUserDefaults
No registered account identity. Please re-register
Cluster missing full admin identity with type A
Cluster missing public admin identity with type A
Unable to extract device identity from serialized data
Account key rolling not implemented
com.apple.private.alloy.connectivity.monitor
LocalSetup
-[IDSDXPCReunionSync reunionSyncStartedForServices:withCompletion:]
Reunion: %s services: %@
-[IDSDXPCReunionSync reunionSyncCompletedForServices:withCompletion:]
member-appleID-aliases
member-phone-numbers
IDSFamilyManager
Fetching Family
Family Fetch returned with error code: %ld
Device is not part of a family. Will not allow force fetch until family updates.
Pulling out previously stored messages sent to a family service.
Error fetching family, will allow trying again later.
v24@?0@"FAFamilyCircle"8@"NSError"16
Initializing IDS Family Manager
FAFetchFamilyCircleRequest
FamilyCircle
com.apple.family.family_updated
We're doing a  Forced Fetch already, we'll let that continue
Starting Forced Fetch. Fetch count is now at: %d
Notification received for family update.
%p <Control channel: uniqueID[%@] pendingReceive[%d] pendingSend[%d] outgoingMessages[%d] outgoingPriorityMessages[%d] encrypting[%u (pl:%u pr:%u)>
control channel %@
none
disabled
default paired PK
default paired none
remote UNENCRYPTED
remote PK
v52@?0@"NSData"8B16@"NSData"20@"NSDictionary"28@"NSError"36@"IDSDecryptionMetadata"44
cloud paired PK
v20@?0i8@"NSObject<OS_nw_error>"12
v44@?0@"NSData"8B16@"NSData"20@"NSError"28@"IDSEncryptionMetadata"36
control message: OTRNegotiation cannot decode token
<%@:%p local: %@ remote: %@>
id-provision-temporary
vc-profile-id
vc-auth-token
sim-mcc
sim-mnc
x-push-token
temporary-credential
NotifySMS
PhoneNumber
AppleID
HomeNumber
Unrecognized
UnknownError
NoError
BadInvitationContext
AliasInUse
AccountHasNoVettedAliases
AliasNotAvailable
AliasLegacyOrInactive
AccountNotAuthorized
UnconfirmedAlias
ServerRegistrationUnsupported
InvalidLogin
PasswordRequestFailed
LoginFailed
AccountUpdateNeeded
NewPasswordNeeded
PermanentlyBlocked
TemporarilyBlocked
NoDeviceID
NoPushToken
RegistrationCancelled
NotSupported
SMSChargeDeniedByUser
DeliveredTooManySMS
TooManySMSDeliveryFailures
GarbageSMSSignature
GarbagePhoneNumber
ServerNotFound
ServerNotAvailable
UnrecognizedServerError
ServerAuthenticationFailed
MissingAuthenticationCredentials
BadPushToken
NoResultCodeFromServer
RateLimitError
AbsintheServerError
UnsupportedManagedAppleID
UnsupportedManagedAuditorID
UserDisabledSMSAuthentication
UserDisabledSMSRegistration
DeniedByServer
ServerRejectedAuthenticationCredentials
IrreparableServerRejection
NoLegacyPublicKey
PasswordRequestDismissed
NoURIsInRegisterResponse
NoURIsInRegisterRequest
AbsintheDataConstructionFailed
AbsintheCertificateFetchFailed
UnspecifiedMessageDeliveryError
Messenger
Invitation
com.apple.private.alloy
ds-id
IDSTTLCache fetch cached object
v32@?0@"NSString"8@"IDSTTLCacheItem"16^B24
Sysdiagnose-Oversized
Most Recent PNR Reasons %@
Most Recent IDS Registration Reason %ld
@"NSString"8@?0
Recent-Registration-Reasons
ids-groupMKMCache-number-of-broadcast-cache-mkm
ids-groupMKMCache-number-of-broadcast-cache-mkm-slow-cpu
<%@: %p URICount: %lu, MkMCount: %lu>
<%@: %p URIs: %@, MkMs: %@>
Returning MkM collection to broadcast { destinationURI: %@, shouldIncludePeerKeys: %@, collection: %@, self: %@ }
IDSGroupMasterKeyMaterialCache.m
v24@?0@"IDSGroupEncryptionKeyMaterial"8^B16
<%@: %p identifier: %@, currentLocalMkM: %@, nextLocalMkM: %@, URIs: %@, MkMsCount: %lu>
<%@: %p identifier: %@, currentLocalMkM: %@, nextLocalMkM: %@, URIs: %@, MkMs: %@>
vc-profile-validate-invitation-context
Profile validation response: %@
phoneUser
expiration
finished
Provisioned
notifiedSuccess
<%@:%p> uid: %@, pn: %@, expiration: %@, finished : %@
fromURI
toURI
<service:%@,from:%@,to:%@>
IDSValidationSessionErrorDomain
register
absinthe-v3-enabled
absinthe-baa-option-enabled
absinthe-baa-option-enabled-ios13
absinthe-baa-timeout
absinthe-baa-cert-ttl-minutes
<%@ %p isInitializedForSigning: %@, isInitializedForScoring: %@>
absinthe-message
headerDictionary
absinthe-signature
absinthe-serv-key
absinthe-udid
absinthe-serial-number
absinthe-imei
absinthe-meid
true
false
absinthe-v4
absinthe-baa
baa-message
%@:%@
baa-signature
baa-certs
performed-user-intent-migrate
triggeredRemoteSessionVersion
ids-upgrade-triggered-reg-update-msg
IDSDAccountController
Found default paired ID
Did not find fromToken or FromDeviceUniqueID in %@
Did not find an account with that ID
Did not find a default paired device on this account %@
This is the default paired device
This is not the default paired device
ids_authkit
v16@?0@"IDSDAccountController"8
PrototypeMode
IDS-List
@"NSArray"8@?0
Checking %@
 => Account disabled
Account matches: %@
Finding account with service name %@ aliasURI %@
Account matches !
Found no match
Finding account with service name %@ loginID %@
  => No account found for unique ID: %@
Finding account with service name %@ myID %@
P:%@
Account matches!
  => (Thread Safe) Found service: %p (for UID: %@)
  => (Thread Safe) No service found for unique ID: %@
com.apple.private.alloy.sms
Finished setting up local accounts
ImportedLegacyIMAccounts
AuthToken
ActiveAccounts
ImportedLegacyIDSAccounts2
prefDictionary
Persisting %@ accounts
ReRegisteredForDevicesHash
ReRegisteredForDevices
ReRegisterForAliasRepair
DidCleanLegacyAccountPrefs
%@/Library/Preferences/%@.plist
MigratedToNewDisabledState
GDRRequestMadeForRelayRepair
RemovedServices
IDSDAcountController
-[IDSDAccountController loadStoredAccounts]
Clearing legacy domain { domain: %@ }
Loaded legacy accounts { count: %@ }
Enabling legacy accounts { accounts: %@ }
nsuuid
push-token
private-device-data
       found push token in: %@
com.apple.private.alloy.icloudpairing
com.apple.ids.deviceproperties
v32@?0@8@"NSDictionary"16^B24
AKAppleIDAuthenticationController
com.apple.imservice.iMessage
com.apple.imservice.FaceTime
id-provision-alias
featureId
scopeId
allowedServices
expiry-epoch-seconds
userVisibleName
alias
operation
attributes
Missing self identity
self URI
renew
create
delete
Dealloc UDPGlobalLink %@
Invalidate UDPGlobalLink
createConnectionData - localPartyID=%@
invalid link state %s
UDPGlobalLink
processRemoteConnectionData %@
invalid remote connection data
invalid remote connection data, %uB
connection data has unsupported version %d
connection data has IPv4 address (%d/%d) [%s:%u]
skip address pair [%@-%@].
add address pair [%@-%@]
No addresss pair is on same network, cannot connect.
startConnectionForDevice failed due to invalid deviceID=%@
startConnectionForDevice - deviceID=%@ isInitiator=%@ remotePartyID=%@ stunMICheck=%@
startConnectionForDevice failed due to invalid remotePartyID=%@
process delayed nomination request block %p.
Nominated connection matches remotePartyID %s.
add local adress %@
connection blob size (%dB) is too big, skip remaining.
#IPv4 address (%d) reaches max allowed, skip remaining.
failed to create connection data
createConnectionData - done (#ipv4: %d, length: %dB).
Link is invalidated, stop sending connection check request
Start connection check.
Connection check is done.
Connection check is timed out, cannot connect to remote party.
Link is invalidated, stop sending nominate request
_sendNominateRequest failed due to invalid localPartyID %@
Start nominate request.
Nominate request is done.
Nominate request timed out, cannot connect to remote party.
Connection echo is done.
Connection echo timed out.
UDPGlobal
echo timer %p fired (%.6f).
link is invalidated, stop echo timer.
start echo timer %p.
stop echo timer %p.
update result: src[%s], dst[%s].
add result: src[%s], dst[%s].
phone_traffic_class
receive binding request %@ for [%s(%u)-%s].
process nomination request before Accept, this should NOT happen.
receive nominate binding request with remotePartyID %s.
receive nomination request with invalid remotePartyID, ignore.
nominate request with count(%d) matches remoteID %s
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IDSAgent/IDSUDPGlobalLink.m
skip binding response to %s, socket on if_index %d is already connected to %s.
send binding response %@ for [%s(%u)-%s].
send binding response failed with %s
receive binding response %@ for [%s(%u)-%s], RTT(%.3f ms)
Nominated connection(%d) is accepted by remoteParty.
Notifying remote party is reachable for ACCEPT.
receive echo request with invalid count(%d), ignore.
receive echo request (count:%04x) for %s(%u)-%s.
send echo response (count:%04x) for %s(%u)-%s.
send echo response failed with %s
receive old echo response (%d), ignore.
receive invalid echo resopnse.
receive echo response (count:%04x, rtt:%4d ms) for %s(%u)-%s.
receive invalid data indication.
invalid data attr length (%dB).
receive indication data (%zdB) for [%s(%u)-%s].
_processStunPacket failed.
failed to verify message intergrity for stun packet type %04x.
### stun packet type %04x passed MI check.
delay nomination request before Accept.
_processStunPacket - receive invalid STUN message, type (%04X)
send stun data indication (new:%zdB old:%zdB).
sending a packet (%zdB) = %s
%c Global    (%s) Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
didReceivePacket - STUN packet (%zdB) [type:%04X %@]
didReceivePacket - unknown packet (%zdB)
username
<%@:%p> uid: %@ rpi: %@
Unknown
Resetting
Unsupported
Unauthorized
PoweredOff
PoweredOn
WPLinkManager
============= New WPLinkManager %@ starting =============
Created a new WPContinuity instance %@
Invalidating WPContinuity instance %@
client instance created
calling continuityDidUpdateStateToState:%s
all client instances removed, currently scanning: %@   currently advertising: %@
UnexpectedType
  => Stopping advertisement for type: %s
  => Stopping scanning for type: %s
startAdvertisingOfType:%s withData:%@ withOptions:%@
  => Device not powered on
stopAdvertisingOfType:%s
startScanningForType:%s withData:%@ mask:%@ peers: %@
startScanningForType:%s withData:%@ mask:%@
startScanningForType:%s withData:%@ mask:%@ peers:%@ boostedScan:%@ duplicates:%@
startScanningForType:%s withData:%@ mask:%@ boostedScan:%@ duplicates:%@
stopScanningForType:%s
connectToPeer %{public}@, continuity %@
already connected to %{public}@.
already connecting to %{public}@  (Time: %f)
*** starting connection to %{public}@
disconnectFromPeer %{public}@, continuity %{public}@
already disconnecting from %{public}@  (Time: %f)
*** starting disconnected from %{public}@
removing a link %@ with linkID %@
sendData %luB peerID %@
Activity
TetheringTargetPresence
TetheringSourcePresence
EC (%@:%ld) and Legacy (%@:%ld)
Legacy (%@:%ld)
EC (%@:%ld)
Failed encrypting message %@
GUID %@ Encryption information:
IDSEncryptionComponent.m
<%@: %p encryptedDataBlob:%@ type: %d, requireSignature:%@>
Request was missing IMEI or carrier nonce
Unable to set push token or push identity on carrier token request message
Unable to locate SIMs prior to fetching auth cert
B16@?0@"<IDSCTSIM>"8
The selected phone number account is not currently authenticated
Failed to request carrier token from IDS server {resultCode: %@, serverStatus: %@, serverErrorDetail: %@}
IDS phone number authentication SPI requires entitlement: %@
B16@?0@"IDSPseudonym"8
IDSPeerIDManagerFromIdentityUserInfoKey
IDSPeerIDManagerErrorDomain
MessageService
Received IDQueryCompletedWithFromURI for service %@ fromURI %@ fromID %@ isRelevant? %@  errors %@
v32@?0@"NSString"8@"NSError"16^B24
v56@?0@"NSString"8@"NSDictionary"16@"NSDictionary"24@"NSString"32B40@"NSDictionary"44B52
Missing object %@ or key %@ when changing accountInfo
-[IDSDAccount authenticationChanged]
-[IDSDAccount setupAccountWithCompletionBlock:]
IDSDAccount
%@ Asked to look up device unique id for uri %@ and token %@ - failing
%@ Asked to look up device unique id for uri %@ and token %@ in our dependent registrations %@
%@ Asked to look up existince of device with uri %@ and token %@ - failing
%@ Asked to look up existence of device with uri %@ and token %@ in our dependent registrations %@
%@ Asked to look up fromID for CBUUID %@ in %@
Found locked peer %@ for cbUUID %@
Found locked peer %@ for sessionID %@
Couldn't find locked peer %@ for cbUUID %@
CBUUID matched, but uniqueID mismatched. Setting fallback device. { cbuuid: %@, uniqueID: %@ }
Did not find any device in dependentRegistrations that matches lockedPeerID. Service supports live delivery, so falling back to device that matches just cbuuid { cbuuid: %@, lockedPeerID: %@, service: %@ }
Did not find any device in dependentRegistrations that matches {cbuuid: %@, lockedPeerID: %@, count: %ld}
Returning token uri fromID for cbuuid {deviceCBUUID: %@, uniqueID: %@, deviceToken: %@, deviceFromID: %@}
Returning device fromID for cbuuid {deviceCBUUID: %@, uniqueID: %@, uniqueIDOverride: %@}
%@ Asked to look up default paired device dependent registration in %@
%@ found default paired device dependent registration %@
-[IDSDAccount _writeAccountDefaults:force:interestedSubservices:]
IDSDAccount: %p [Service: %@ Login: %@ UniqueID: %@ Account Type: %@ Registration: %@  Registered: %@  Registration Error: %@  Linked Accounts: %@]
IDSDAccount: %p [Service: %@ Login: %@ UniqueID: %@ Account Type: %@ Vetted Aliases: %@ Aliases: %@ Registration: %@  Registered: %@  Registration Error: %@  Last Registration Failure Error: %@  Last Registration Failure Date: %@  Last Registration Success Date: %@  User Unique ID: %@ Linked Accounts: %@]
<%@:%@:%@:%@:%@>
com.apple.private.alloy.bluetoothregistry
com.apple.private.alloy.bluetoothregistryclassc
SyncNSXPCSupport
com.apple.identityservicesd-IDSDXPCDaemonServerXPC
disable-home-number
CKAccountChangedNotification
@16@?0@"IDSRegistration"8
Registration attempted exceeded for user identifier {%@} with current registration state {%ld} of type {%d}
PNR Registration failed for Identifier: %@ Failure: SMS quota exhausted
PNR Registration failed for Identifier: %@ Failure: SMS timeout threshold reached
suppressNonZeroRatedSMSNotifications
FaceTime and iMessage
SMS Registration alert title: FaceTime and iMessage
Your carrier may charge for SMS messages used to activate FaceTime and iMessage.
SMS Registration alert body: Your carrier may charge for SMS messages used to activate FaceTime and iMessage.
SMS Registration alert title: iMessage
Your carrier may charge for SMS messages used to activate iMessage.
SMS Registration alert body: Your carrier may charge for SMS messages used to activate iMessage.
SMS Registration alert title: FaceTime
Your carrier may charge for SMS messages used to activate FaceTime.
SMS Registration alert body: Your carrier may charge for SMS messages used to activate FaceTime.
iCloud
SMS Registration alert title: iCloud
Your carrier may charge for SMS messages used to activate iCloud.
SMS Registration alert body: Your carrier may charge for SMS messages used to activate iCloud.
OK Button Title
Cancel
Cancel Button Title
route
retry-count
engram-id
required-update
sig-algorithm
forwarding-sig-algorithm
id-group-put-key
entries
__kIDSRestrictionsChangedNotification
-[IDSPairingManager _notifyDelegatesWithBlock:]
-[IDSPairingManager _notifyDelegatesDevicePairedToDevice:]
v16@?0@"<IDSPairingManagerDelegate>"8
-[IDSPairingManager _notifyDelegatesDeviceUnpairedFromDevice:]
-[IDSPairingManager _requestPairedDeviceInfo]
%@ -- %@
has-regenerated-secured-encryption-keys
-[IDSPairingManager _hasRegeneratedSecuredEncryptionKeys]
regenerated
UTunDelivery_Default_Sync
UTunDelivery_Default_Default
UTunDelivery_Default_Urgent
UTunDelivery_Default_UrgentCloud
-[IDSPairingManager localDevice]
-[IDSPairingManager gatherLocalDeviceInfoWithCompletionBlock:]
-[IDSPairingManager _updatePairedState:]
-[IDSPairingManager addLocalPairedDevice:BTOutOfBandKey:shouldPairDirectlyOverIPsec:pairingType:bluetoothMACAddress:]
-[IDSPairingManager removeLocalPairedDevice:]
-[IDSPairingManager disconnectActivePairedDevice]
-[IDSPairingManager activatePairedDeviceWithCBUUID:]
-[IDSPairingManager deactivatePairedDevices]
-[IDSPairingManager ensureCommunicationWithActivePairedDeviceIsPossible]
-[IDSPairingManager setPairedDeviceInfo:]
-[IDSPairingManager updatePairedDeviceBuildVersion:productVersion:productName:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:capabilityFlags:deviceUniqueID:]
+[IDSPairingManager devicePairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:]
Already Active
Unknown CBUUID
Keychain Failure
Not Supported
%@ (%d)
<unknown>
coalesce-send-delay
normal
background
scheduled
<%@  ->  count: %ld  time until firing: %f>
labelID
phoneNumber
phoneBookNumber
defaultUser
countryCode
networkCode
<%@:%p> uid: %@ pn: %@, pbn: %@, def: %@
next-key
SHA256withECDSA
Decryption
encrypt
decrypt
******************************************************************
*******************  %@ Error ****************************
***  Priority: %ld
***     Token: %@
*** Device ID: %@
***      From: %@
***        To: %@
  Plain text encryption error? This is non-sensical
Public/Private %@ failed :(
 => Current remote public key data for token: %@
 => Current remote public key data for device: %@
 => Data we tried to %@: %@
 => Is remote: %@
 => Token: %@
  Unknown encryption type error? This is non-sensical
AOVERCEncryption
asked to %@, but key is NULL!
Incoming Encryption Request
Incoming Decryption Request
numberOfSimultaneousOutgoingMessages
APSErrorDomain
ApplePushService
IMTransferServicesController
IMTransferServices
v16@?0@"IDSAppleIDNotificationCenter"8
Yes Button Title
No Button Title
Apple ID alert title: Email Detected, arg1: phone number, arg2: service type
Apple ID alert body: Email link message, arg1: apple ID  arg2: device associated on
Apple ID alert body: Email link message, arg1: apple ID
Add %@ for %@?
Apple ID alert title: Phone Number Detected, arg1: phone number, arg2: service type
Apple ID alert body: Phone number link message, arg1: apple ID, arg2: device name added from
Apple ID alert body: Phone number link message, arg1: apple ID
ServerAlerts
hideUsageNotifications
Browser
browser
device
Apple ID and phone number
Apple ID
phone number
iCloud and %@
iMessage and %@
iCloud, iMessage, and FaceTime
If you recently signed in to this device, you can ignore this notification.
Device Added to Your Account
AAAccountUserNotificationPublisher
AppleAccount
AAAccountUserNotificationContext
HomePod
A %@ now has access to %@. %%@
An %@ now has access to %@. %%@
A(n) DeviceType now has access to service(s). arg1: service name (iCloud, iMessage, Facetime, (any combination)) arg2: User action string 
Your %%@ %@ now being used for %%@ on a new %@.
Your accountType(s) are now being used for services(s) on a new DeviceType., arg1: Account Type (Apple ID, phone number, Combination)  arg2: service  name (iCloud, iMessage, Facetime, (any combination)) 
DisableAliasAvailablePopups
**** Suppressing popup for available alias %@
DisableUsedElsewherePopups
**** Suppressing popup for alias %@  is in use on device %@
v24@?0@"NSString"8^B16
activityTopics
activityUpdates
subscriptions
activityDescriptions
IDSDFirewallMessageStore
Saving database.
Destroying database.
Closed database.
^{__CFString=}8@?0
v16@?0@"CSDBThreadedRecordStore"8
/Library/IdentityServices/
ids-firewall-%@.db
IDSFirewallStore
Creating indexes as needed for faster lookup
CREATE INDEX idx_firewall_handle ON firewall_record (handle); 
CREATE INDEX idx_firewall_category ON firewall_record (category); 
Enabling auto vacuum.
PRAGMA auto_vacuum = 2;
Enabling WAL journal mode.
PRAGMA journal_mode = wal;
Enabling Foreign Key support.
PRAGMA foreign_keys = ON;
The current Firewall database is v%d.  The current schema version is v%d
This DB can be migrated.
firewall_record
handle
merge_id
category
is_donated
last_seen_date
last_modified_date
v36@?0@"NSString"8@"NSString"16@"NSString"24B32
accountWithIdentifier could not find IDSDAccount {identifier: %@, localObject: %@}
accountWithIdentifier failed entitlement check {localObject: %@, entitlement: %@, serviceIdentifier: %@}
auth token changed for account uniqueID %@ localObject %@
password changed for account uniqueID %@ localObject %@
v28@?0@"IDSPseudonym"8B16@"NSError"20
Registering for Registration Account Status Metric
com.apple.ids.registrationaccountstatusmetric
Told to Check In for Registration Account Status Metric with activity %@ 
Got called to checkpoint Registration Account Status Metric run state with non null activity %@
Not entitled to clear IDS state %@
Told to clear IDS state %@
-[IDSDaemon(Account) initialLocalSyncStartedForServices:messageContext:]
Initial: %s services: %@
-[IDSDaemon(Account) initialLocalSyncCompletedForServices:messageContext:]
CloudPairing
 *** Cloud pairing detected setting BTUUID %@   on device ID: %@ **** (From: %@)
 => Ignoring, no change
iCloud Pairing Added
If this was unexpected, please file a radar (Transport) and attach output of 'idstool dump'. See 17180900 for reference
iCloud Pairing Removed
Sending continuity reset to IDS clients
System has left first unlock: processing stored incoming messages.
Attempt to use the Registration Control API's without the correct entitlement, Failing request
Setup
System has left data protection lock: Checking Migration Status
Faking data protection lock as first unlock: Processing stored messages.
System going to sleep
System waking up
IDSDaemon got a wake when it was not asleep! Current sleep state: %d
enable-pseudonym-aliases
enable-report-web-approval-status
gc-min-version
Forcing a bag fetch to refresh EN versioning
v40@?0@"NSString"8@"NSString"16@"NSString"24@"IDSEndpoint"32
ratelimiter-clear-on-success
IDSDelivery has %lu pending offline messages and sees that push is now connected - scheduling a send attempt in %f seconds.
Push is still connected - replaying %lu offline message sends.
Done replaying %lu offline message sends.
Push is NOT still connected - readding %lu offline message sends.
Total offline message sends enqueued: %lu.
ReducedLargePayloadSizeOverhead
Bad signature for message: %@    blowing peer tokens
 targetPeerID: %@
 sourcePeerID: %@
  targetToken: %@
 sessionToken: %@
      service: %@
Message is destined for an accessory with uri %@
accessory:
  Finished sending message: %@  to accessory: %@
Sending To %@
Handling message queue With Fanout for display IDs: %@  (originalURIs: %@)
   Queue: %@
 Flushing message queue
 FromID didn't match some messages, keeping some messages in queue {fromID: %@, toKeep: %@}
Checking the estimated payload size for message not requesting encryption... %d B
Attachment commands must not be forced to send as attachments
 sendAsAttachment? %@ The payload is %lu bytes.
ForceAttachmentMessage
Forcing attachment message default set
We will send %@ individual messages
Emptying message queue for URIs: %@
No queued items to remove for URIs: %@
Removing message from queue for URIs: %@
No queued message matched for removal for URIs: %@
Enqueuing message: %@  to people: %@ service: %@ (original: %@)
send FTMessage: %@   fromID: %@   toID: %@  toToken: %@  toPeople: %@  toMe: %@  delivery status: %@ certified delivery: %@
    Delivered FTMessage: %@ to token: %@
    Delivered FTMessage: %@
                  Result code: %ld
                        To ID: %@
                      From ID: %@
            Result dictionary: %@
                        Error: %@
    Requested Delivery Status: %@
 Requested Certified Delivery: %@
                 Message Body: %@
Sending callback for FTMessage send
Was accessory online?: %@
    Told to send Fanout Message: %@ GUID: %@ isEngram? %@ Chunk: %@ isFinal?: %@ 
Sending %@ with top-level encryption type "%@" and dtls: %@
              To Destinations: %@
Asked to sendAttachmentWithGUID %@  topic %@ toToken %@ toID %@ fromID %@ service: %@
Attachments
    Wrote data to path: %@
Failed to write wrapped data
Failed to create temporary directory
v32@?0Q8Q16Q24
Send attachment message progress updated to %lld of %lld (%lld bps)
Succeeded uploading file transfer: %@
mmcs-owner
mmcs-url
mmcs-signature-hex
idsMessage
Finished sending attachment message %@. Result code: %ld. Error: %@   lastCall: %@
Error cleaning up text attachment path: %@  error: %@
Failed uploading attachment file transfer: %@
Update for uploadFailure message: topic %@  response %ld  error %ld lastCall %@
Failed uploading attachment file transfer
v76@?0@"NSString"8B16@"NSError"20@"NSString"28@"NSString"36@"NSData"44@"NSString"52@"NSData"60q68
  Coalesce queue view : %@
Incoming urgent message for a topic with coalesce messages in queue
Message: %@ to be sent to people: %@   (have tokens: %@). People to query %@
IDSDeliveryController.m
Found messagable people: %@
Query completed: success %@  offline %@  allowPartialSendsToSucceed %@
Query completed but message for IDs %@ has already expired. Failing.
Query failed because the device is offline. Enqueuing for the return of networking since we have timeout time left. Number of offline sends enqueued ahead of us: %lu.
Peer ID manager succeeded lookup for IDs: %@
Peer ID manager failed lookup for IDs: %@   (Errors: %@)
Issuing query for: %@   from: %@
Tokens are being ignored, failing message {msg: %@}
sendIDSMessage called with nil message -- returning
Sending IDSMessage: %@  topic: %@
v16@?0@"IDSBaseMessage"8
service-max-timeout-%@
Server has overridden service maximum timeout: %@, capping message timeout with %@.
Sending messageDictionary: {suppressed} peerMessage %@  wantsResponse %@ timeout %@ fromID: %@ toID %@ toPeople %@ topic %@ toMyself: %@
_sendErrorMessage %@ onService %@ fromID %@ fromIdentity %@ toID %@ toToken %@ topic %@
v24@?0@"NSArray"8@"NSArray"16
Guid %@ full pipeline input: %@
GFTPerfSignpostCollection
AlwaysPopulateFirewall
id-check-unknown
x-hardware-version
x-os-version
x-software-version
sender
count
abusive
delay
MessageSuccess
TerminusConnected
TimeConnected
TimeDisconnected
PersonalCBUUID
PairedDeviceCBUUID
invalidate HCInfo - local(%d,%p->NULL) remote(%d,%p->NULL)
setLocalContext - %p->%p
setRemoteContext - %p->%p
Sysdiagnose
Device %@ cbuuid %@.  Is IDS nearby? %@ Connected? %@. Is terminus nearby? %@ Connected? %@ 
IDS-Connectivity-Status
v32@?0@8@"IDSUTunPeer"16^B24
UTunDelivery
Queried pairedDeviceUUIDString {pairedDeviceUUIDString: %@}
Could not query pairedDeviceUUIDString {isPaired: 0}
NRDeviceMonitor already running for {deviceIdentifier: %@}.
Received devices with unique ids -> cbuuids %@
v32@?0@"NSString"8@"NSString"16^B24
Received device with unique id %@ updated BTUUID: %@
Ignoring update for nil or default paired device BTUUID: %@
Created new peer %@ for uniqueID %@ with btuuid %@
Updating existing peer %@ for uniqueID %@ with btuuid %@
LOCALSETUP: local setup started - clearing all stats
Delivery
LOCALSETUP: Informed that local setup has completed!
LOCALSETUP: Disabling Cloud Connections for QWS
LOCALSETUP: Enabling Cloud Connections
bt-id
session-id
Peer %@ is created from sessionID %@ (peer map: %@)
WARNING: Peer from sessionID %@ shouldn't be created for the default paired device! (deviceInfo: %@) (peer map: %@)
Peer %@ is created from btID %@ (peer map: %@)
OUTGOING-UTUN_DELIVERY:%@ SERVICE:%@
UTUN request to send %{public}@ priority local message payload of data size: %d  guid: %{public}@  expirationDate %@ enforceRemoteTimeout %@ for topic: %{public}@:%{public}@ to deviceIDs (count: %{public}@)
Devlivery
WARNING: A message for the local default paired device has reached the delivery controller but we do not have a peer already for it, It was likley sent before QWS was completed. Purging message. Destination Device: %@, Current Device:%@ 
Skipping device %@ which we already sent to.
UTUN request to send %{public}@ priority local message payload of data size: %d  guid: %{public}@  for topic: %{public}@:%{public}@ to uri %@ deviceID %{public}@ with seq[%u]
WARNING: Unable to create the peer for the device %@
v32@?0@"NSString"8@"NSDictionary"16^B24
Unable to find peer for deviceIDs %@ failing the message.  (Peers: %@)
Attempting to cancel message ID: %@
local account setup complete - has deferred task? %@
calling deferred default peer connected
enableConnectionForDefaultPairedDevice %@
No connection found for default paired device %@.
enableCloudConnectionForDefaultPairedDevice %@
Got topic set update %@
IDSUTunDeliveryController
There is a new session for the local path, skipped removing...
Already have a peer ignoring call to add {deviceUniqueID: %{private}@, btuuid: %{private}@, deviceIDToPeer: %{private}@}
UTunDelivery-Default
DisableOTR
EnableOTR: %@.
v32@?0@"NSString"8@"IDSUTunPeer"16^B24
peer nearby state changed:%@    screenLit:%@   uniqueID:%@   peer-count:%lu
Broadcasting isNearby %@ for %@
peer connectivity changed: %@    uniqueID: %@   map: %@
Broadcasting isConnected %@ for %@
Submitting aggd metric for connected time %f seconds.
com.apple.IDS.LocalConnectedTime
Submitting AWD metric {nearbyToConnectedDurationInMs: %lld ms}.
Broadcasting isCloudConnected %@ for %@
peerHasSpaceForNonUrgentMessages %@ %@ %@ isDefaultPeer? %@
peerHasSpaceForUrgentMessages %@ %@ %@ isDefaultPeer? %@
local account setup has not finished yet - defer default peer connected
default peer connectivity changed: %@ -> %@
default peer connectivity changed but no default peer
default peer nearby changed: %@ -> %@
%@ Did not find default peer device.
cloud connectivity changed for default peer: %@.
defaultPeerMagnetIndicationOfAwakeStateChanged %@
defaultPeerClassCConnectivityDidChange %@
defaultPeerSetPreferInfraWiFi: %@ services: %@
defaultPeerSetPreferInfraWiFi failed due to nil device identifier.
defaultPeerSetLinkPreferences, service: %{public}@
defaultPeerSetLinkPreferences failed due to nil device identifier.
setBluetoothLinkPreferences: service: %{public}@, pps: %d input bps: %d output bps: %d intent: %{public}@
defaultPeerSetWantsQuickRelayRequest: %@
defaultPeerSupportsDirectMessaging: %@
defaultPeerUnpairStart
defaultPeerDropDisallowedMessages
cloud connectivity changed for peer %@: %@.
Tried to process cloud connectivity change with nil peer.
%@ cloud connectivity changed: %@ -> %@
Broadcasting found nearby IPsec device {uniqueID: %@}
Set Enable OTR Timer for 60.0 seconds
OTREnableTimer
Set OTR for defaultPairedDevice: YES.
Set OTR for defaultPairedDevice: NO.
didAddPairedDevice is called.
didRemovePairedDevice is called.
didUpdatePairedDevice is called, enable OTR %@, otrInitialized %@.
Peer %@ is already locked for btUUID %@, ignore peer %@
Lock peer %@ for btUUID %@.
Remove locked peer %@ for btUUID %@
Unlock all peers, clean up.
addContinuityPeer is called for default paired device, please file a bug.
Add new peer %@ for btUUID %@, list %@.
current peer list:%@
Enable peer %@ for btUUID %@.
Peer %@ is already locked for btUUID %@, skip other peers.
No pending peer, bail out.
Search peer in %@. (current peer %@, count %d)
peer %@ has count %d
Found no other peer, stick with peer %@
Try new peer %@, disable peer %@.
Peer's session ID %@ is for the phone continuity local message.
Told to enable OTR for default paired device
Rapport discovered device. {Peer:%@, deviceID:%@}
Rapport lost device. {Peer:%@, deviceID:%@}
v24@?0@"CNContact"8^B16
Class getCNContactStoreClass(void)_block_invoke
IDSContactsUtilities.m
Unable to find class %s
void *ContactsLibrary(void)
Class getCNContactClass(void)_block_invoke
Class getCNPhoneNumberClass(void)_block_invoke
CNContactFormatter
Class getCNContactFormatterClass(void)_block_invoke
NSString *getCNContactEmailAddressesKey(void)
CNContactEmailAddressesKey
NSString *getCNContactPhoneNumbersKey(void)
CNContactPhoneNumbersKey
NSString *getCNContactGivenNameKey(void)
CNContactGivenNameKey
NSString *getCNContactFamilyNameKey(void)
CNContactFamilyNameKey
NSString *getCNContactTypeKey(void)
CNContactTypeKey
CNContactFetchRequest
Class getCNContactFetchRequestClass(void)_block_invoke
<%@: %p SKMCount: %lu>
ids-group-stable-key-material-cache-previous-remote-SKM-key
ids-group-stable-key-material-cache-current-remote-SKM-key
self.pushTokenToSKMsMapping[pushToken]
<%@: %p identifier: %@, currentLocalSKM: %@, previousLocalSKM: %@, SKMsCount: %lu>
<%@: %p identifier: %@, currentLocalSKM: %@, previousLocalSKM: %@, SKMs: %@>
+.%@
-.%@
com.apple.private.alloy.
&.%@
^.%@
BlockBooleanServiceEntitlements
com.apple.%@
NSXPC
Daemon XPC Interface Up
v24@?0@"ENGroupContext"8@"NSError"16
com.apple.identityservicesd.nsxpc.auth
Incoming Daemon XPC Interface with new connection %@
DaemonProxy
We got remote object proxy %@ new observerProxies count: %lu
Daemon Invalidation Handled
Daemon Interruption Handled
Daemon failed to broadcast didCreateGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@
Daemon failed to broadcast didCacheGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@
Daemon failed to broadcast didUpdateGroup {previousGroup: %{private}@, updatedGroup: %{private}@, observerProxy: %{public}@, error:%{public}@}
Daemon failed to broadcast didReceiveDecryptionFailureForGroup {group: %{private}@, observerProxy: %{public}@, error:%{public}@}
Daemon failed to broadcast didReceiveRegistrationIdentityUpdate {observerProxy: %{public}@, error:%{public}@}
endpoints
keyTransparencyContext
<%@: %p endpoints.count: %lu, keyTransparencyContext: %@>
SessionController
Building Message delivery
com.apple.invitation-service
Missing accountID for outgoing session, bailing...
Missing destinations for outgoing session, bailing...
Missing transport type for outgoing session, bailing...
Missing uniqueID for outgoing session, bailing...
Found existing session matching uniqueID -- replacing with new instance { uniqueID: %@, oldInstanceID: %@, newInstanceID: %@ }
Already have an existing session with uniqueID %@, bailing...
Failed to create outgoing session.
Missing accountID for incoming session, bailing...
Missing destinations for incoming session, bailing...
Missing transport type for incoming session, bailing...
Missing uniqueID for incoming session, bailing...
We already have an existing session with unique ID %@, ignoring self invite...
%@ - Failed to create incoming session
Received incoming invitation with payload %@ topic %@ fromToken %@ fromID %@ toID %@ fromStorage %@
No sessionID provided in invitation, bailing...
Missing originator for session invitation, bailing...
Creating IDSSession for incoming invite
Couldn't create session for invite, bailing...
Done with incoming network availability check; networkOkForSession: %@
Missing encryption setup info, bailing...
Wifi connectivity check failed, declining invitation!
Did not find a client that could handle the invitation for service %@, ignoring invitation...
Network availability check indicated that we should not continue to process this session invitation
Process incoming session %@ accept message
Enqueuing incoming session accept block from %@ with key %@
Enqueuing incoming session decline block from %@ with key %@
Process incoming session %@ decline message
Enqueuing incoming session cancel block from %@ with key %@
Process incoming session %@ cancel message
Enqueuing incoming session message block from %@ with key %@
Process incoming session %@ session message
Enqueuing incoming session end block from %@ with key %@
Process incoming session %@ end message
Enqueuing incoming session reinitiate block from %@ with key %@
Process incoming session %@ reinitiate teardown message
disableReceivingMaterialsOverPush
Push
Enqueuing incoming group session message block fromID %@ with the group %@ sessionID %@ (message %@)
Receiving Key Material (%@) [MKM] -- %f
Receiving Key Material (%@) [SKM] -- %f
Storing the master key material %{private}@ stableKeyMaterial: %{private}@ for %@ token %@
not received any valid MKM or MKM for %@ token %@
key material not decrypted
Storing all valid master key materials %{private}@ for %@ token %@
Failed to decrypt a key material in the broadcast group -- skipping the remaining key material
not received any valid remote cached MKMs for %@ token %@
Received the prekey recovery request for group %@ destination %@
Received the key recovery request for group %@, needsToRecoverMKM: %@, needsToRecoverSKM: %@
Receiving Key Material (%@) [PreKey] -- %f
Storing the public key %{private}@ for %@ token %@
Process incoming group session %@ session message
Couldn't find the session %@ to clean up!
Cleaning up session %@, shouldCleanSessionStatus: %@
Cleaning up session based on instanceID { instanceID: %@, correspondingUniqueID: %@ }
IDSDSessionController
skip cleanupSessionWithChannelDestination for destination %@ and clientChannelUUID %@
Cleaning up session(s) for client ID: %@ because it died
Cleaning up session: %@ for client ID: %@
v32@?0@"IDSDSession"8Q16^B24
Cleaning up session(s) for service: %@ with reason %ld
Cleaning up session: %@ for service: %@
IDSDaemonClientID
IDSSessionController
%@ - No account found to build specificOriginator, bailing...
%@ - No device found to build specificOriginator, bailing...
%@ - No device push token found to build specificOriginator, bailing...
%@ - No device identity found to build specificOriginator, bailing...
%@ - No unique ID provided to lookup session, bailing...
%@ - No instance ID provided to lookup session, bailing...
%@ - No group ID provided to lookup session, bailing...
%@ - No group UUID provided to lookup session, bailing...
Updating critical reliability {needsCritical: %@, session: %@}
DMPerformMigrationIfNeeded
DataMigration
ForceRegistration
ForceSMSRegistration
expiry-epoch-milli-sec
md-ids-gdr-day-limit
performedGDROverrides
last24PeriodGDRPerformed
forcedgdrcount
-[IDSDAccount(Registration) _rebuildRegistrationInfo:]
phone-number-registration
pseudonyms
is-user-visible
-[IDSDAccount(Registration) _reregisterAndReProvision]
-[IDSDAccount(Registration) _removeAuthenticationCredentialsIncludingAuthToken:]
-[IDSDAccount(Registration) _reregisterAndReidentify:]
ForcePurgeRegistrationData
Phone Number
Couldn't get bag url
-[IDSDAccount(Registration) _authenticateAccount]
-[IDSDAccount(Registration) authenticateAccount]
-[IDSDAccount(Registration) _registerAccount]
-[IDSDAccount(Registration) registerAccount]
-[IDSDAccount(Registration) _unregisterAccount]
-[IDSDAccount(Registration) unregisterAccount]
-[IDSDAccount(Registration) passwordUpdated]
-[IDSDAccount(Registration) updateAuthorizationCredentials:token:]
-[IDSDAccount(Registration) handler:pushTokenChanged:]
-[IDSDAccount(Registration) handler:reloadBag:]
v28@?0B8@"NSArray"12@"NSString"20
handles
v36@?0@"IDSRegistration"8q16B24@"NSDictionary"28
-[IDSDAccount(Registration) handler:profile:deviceUpdated:service:]
-[IDSDAccount(Registration) handler:profileHandlesUpdated:status:allowGDR:]
registrations
-[IDSDAccount(Registration) registrationController:registrationWillStart:]
-[IDSDAccount(Registration) registrationController:registrationUpdated:]
-[IDSDAccount(Registration) registrationController:registrationSucceeded:]
-[IDSDAccount(Registration) registrationController:registrationFailed:error:info:]
Disabled
Too many SMS attempts, you can re-enable this in Preferences
-[IDSDAccount(Registration) registrationController:deregistrationWillStart:]
-[IDSDAccount(Registration) registrationController:deregistrationSucceeded:]
-[IDSDAccount(Registration) center:startedAuthenticating:]
-[IDSDAccount(Registration) center:succeededAuthentication:]
-[IDSDAccount(Registration) center:failedAuthentication:error:info:]
-[IDSDAccount(Registration) center:succeededCurrentEmailsRequest:emailInfo:]
-[IDSDAccount(Registration) center:succeededRegionValidation:regionID:phoneNumber:extraContext:verified:]
-[IDSDAccount(Registration) center:failedRegionValidation:error:info:]
-[IDSDAccount(Registration) _validateAliases:validateAlreadyValid:]
-[IDSDAccount(Registration) _validateAliases:]
-[IDSDAccount(Registration) validateAliases:]
-[IDSDAccount(Registration) _unvalidateAliases:]
-[IDSDAccount(Registration) unvalidateAliases:]
-[IDSDAccount(Registration) deactivateAndPurgeIdentify]
v44@?0@"IDSRegistration"8q16B24@"NSDictionary"28@"NSError"36
deleted
B16@?0@"NSDictionary"8
psuedonymInfo
kt-opt-in-results
uris
kt-blob
-[IDSDAccount(Registration) validateProfile]
Full returned info for _allUserIntentInfo {service: %@, loginID: %@, current: %@}
IDSDAccount_Registration.m
max-selected-tracking-grace-period
ForcedGDR
Server Bag provided us with %d max forced GDRs
Server Bag has no value for max GDR per day, using the default: %d
gamecenter-signin-on-modify
@"NSDictionary"16@?0@"IDSDAccount"8
iTunes
GameCenter
Invalid
ACAccountTypeIdentifierIdentityServices
IDSActiveStorageStateMachines
ServerStorage
We already have an inflight request for topic %@, checking if we have a backup
We already have a backup request for topic %@, throwing this request away
We already have an inflight request for this topic %@, adding it to the backup queue
This is the first request for topic %@, kicking off a server message for it
We received a 165 from the server for topic %@
We received a last from storage from the server for topic %@
%@-retry-timeout
topic
%@-extend-retry-timeout
Topic %@, has timed out waiting for server response
Topic %@ has recently received a message from storage.  Starting a new extended timer for retry.
We timed out with our request for %@ however we have one in the pending queue, Not retrying and instead letting that take over
%@-force-passthrough-retry
The topic %@ is a pass-through-message service. Not retrying.
We have not used up our remaining retries on topic %@: Used: %d Available: %d
We have used up all available retries for topic %@: Terminating state machine
Finished sending pending message request response for topic %@  [%@]
Failed sending pending message request response for topic %@. Result code %ld. Error %@.
Told to terminate state machine for topic %@
Unable to find a topic timeout timer, This will likely cause a bug
We terminated our state machine for %@, however we have another backed up, kicking off another state machine
Was told to stop, but we didnt have one in progress...
Told about a message from server storage, but we dont have an ongoing metric for it, not able to incriment
  iLen=%d KS=[%s]
 In=[%s]
 Out=[%s]
SRTP
IDSStreamEncryption_Init not enough key material bytes: have %d but need %d
encryption setup (v%d):
send ssrc:%08x start-seq:%04x
recv ssrc:%08x start-seq:%04x
srtp not initialized for transform
srtp rollover counter reached end - hard stop before reusing key
packet with sequence number: %u->%u dropped by replay protection
Malloc Failed to allocate replayWindow!
Malloc Failed to allocate replayWindow->list!
IDSStreamEncryption_LeftShiftReplayList returned NO. seq(%u->%u) = %u
IDSStreamEncryption_SetbitReplayList returned NO. seq(%u->%u) = %u
IDSStreamEncryption_SetbitReplayList after clear returned NO. seq(%u->%u) = %u
packet too old. seq(%u->%u) = -%u
IDSStreamEncryption_GetbitReplayList returned YES. seq(%u->%u) = -%u
IDSStreamEncryption_SetbitReplayList for old packet returned NO. seq(%u->%u) = -%u
CCCrypt failed with status: %d
  counters: [%s]
isInDualSIMIdentifier
@16@?0@"<IDSCTSIM>"8
@16@?0@"IDSTemporaryPhoneUser"8
@"NSString"16@?0@"<IDSCTSIM>"8
personal-public-key-cache
personal-public-key-cache-v1
personal-public-key-cache-v2
personal-public-key-cache-v3
personal-public-key-cache-v4
kIDSPublicKeyStorageToken
====== Personal Key Cache:
   Device ID: %@    Identity: %@   PushToken: %@
PublicKeyStore
Removing key {forURI: %@, fromURI:%@, pushToken: %@}
v40@?0@"NSString"8@"NSData"16@"NSString"24@"NSString"32
com.apple.identityservices.userStore
user
prop
<%@: %p, user: %@, properties: %@>
@"NSDictionary"24@?0@"NSDictionary"8@"NSDictionary"16
<%@: %p, dataProviderByRealm: %@, persistentMap: %@>
@16@?0@"IDSUserDescription"8
v16@?0@"<IDSUserStoreListener>"8
<%@: %p, userID: %@, responseCode: %lld, certLength: %llu>
id-authenticate-multiple-users
authentication-requests
request
auth-cert
authentication-responses
activity-monitor-min-version
-[IDSPairedDevice initWithPairedDevice:deviceUniqueID:pairingProtocolVersion:minCompatibilityVersion:maxCompatibilityVersion:serviceMinCompatibilityVersion:privateData:]
-[IDSPairedDevice initWithPairedDevice:capabilityFlags:]
-[IDSPairedDevice initWithPairedDevice:deviceInfoPayload:]
-[IDSPairedDevice initWithPairedDevice:isActive:]
-[IDSPairedDevice initWithPairedDevice:supportIPsec:]
-[IDSPairedDevice initWithPairedDevice:pairingType:]
-[IDSPairedDevice initWithPairedDevice:iCloudURIs:pushToken:]
%@ uniqueID = %@, cbuuid = %@, isActive = %@, supportsIPSec = %d, pairingType = %ld
push cert
id-register
validation-data
language
device-score
device-score-nonce
Registration response: %@
next-hbi
registration
auth-certs
sms-signatures
temp-phone-creds
save-identifier
com.apple.identityservicesd.registrationKeychainManager-save
com.apple.identityservices.keychain-manager
%@V%d
KeychainManager
FTServices
** We haven't loaded anything, ignoring save to keychain **
** Saving registration data to keychain: Begin **
  => Adding registration for service: %@  ID: %@  to keychain dictionary
     => Registration %@
    => Not saving, got a nil dictionary representation
  => Adding %lu auth certs for users %@
  => We don't have any auth certs to save
  => Adding %lu SMS signatures
  => We don't have any SMS signatures to save
  => Adding %lu temp phone credentials
  => We don't have any temp phone credentials to save
Unable to build property list data: %@
Saving %d bytes under service: %@   account: %@   accessGroup: %@   saveIdentifier: %d
Unable to save registrations to keychain (error: %d)
** Saving registration data to keychain: Done **
Forcing save of registration objects from keychain dictionary, %d entries  %d auth certs
Flushing registration objects from keychain dictionary, %d entries  %d auth certs
Loaded %d auth certs for users %@
Loaded %d sms signatures
Loaded %d temp phone credentials
Reloading registration objects from keychain dictionary, %d entries
migrated-v0-dictionary
Expected to load %d registration objects, but only loaded %d
Attempting to load V%d keychain blob from service: %@   account: %@   accessGroup: %@
  => Found V%d keychain blob
  => No blob found in keychain
  => Failed to get keychain blob (error: %d)
Unable to parse property list: %@
Removing invalid keychain data (V%d) for service: %@   account: %@
  => Unable to remove invalid keychain blob (error: %d)
Keychain dictionary V%d needs upgrade
Removing old V%d keychain blob after upgrade with service: %@   account: %@
  => Unable to remove keychain blob (error: %d)
Looking up registration with service type: %@  registration type: %@   value: %@
 => Removing first keychain entry, we're over max of %d entries
Removing registration : %@
  => No matching registration found to remove
Removing all registrations
Invalid keychain dict version (%d) -- current is %d
Updating keychain dict to current version (%d)
Keychain dictionary before upgrade : %@
  => Updating from V0 to V1
  => Updating from V1 to V2
Keychain dictionary after upgrade : %@
Unable to upgrade an empty keychain data from V0 to V1
type
main-id
Unable to upgrade an empty keychain data from V1 to V2
phone-number-registration-main-id
Setting IDS auth cert: %p   for ID: %@
Returning SMS sig for ID: %@   signature: %@
Returning SMS IDs: %@
Setting SMS main ID: %@   signature: %@
Returning temp phone credential for ID: %@ cert: %@
Returning temp phone credential for ID: %@ tempCredential: %@
AllowiMessage
AllowsFaceTimeAudio
Home
Personal
use-local-time
com.apple.invitation-registration
v16@?0@"IDSRegistrationCenter"8
======= Registration State =======
     Last sent message: %@
       Last registered: %@
     Message in Flight: %@
       Messages queued: %@
          Queued Auths: %@
            Queued Reg: %@
         Current Auths: %@
           Current Reg: %@
  Recent Registrations: %d
==================================
IDS Authentication failure
IDS registration failure
Email query failure
users
kt-account-key
kt-loggable-data
client-data
device-key-signature
com.apple.registration
overrideRegistrationResponseCode
overrideRegistrationResponseAlert
registerCodeOverride
phoneUserCodeOverrideService
restoredFromBackup
phoneUserCodeOverride
emailUserCodeOverrideService
emailUserCodeOverride
kt-status
Registration SUCCESS for %@ on %@
Bad signature, need to send SMS
B16@?0@"IDSRegistration"8
deregistration
deregister
Sending IDS %@
&amp;amp;
&amp;quot;
&amp;#39;
&amp;gt;
&amp;lt;
com.apple.private.alloy.telephonyutilitiestemporary
com.apple.private.alloy.mediaidstest
com.apple.private.alloy.callhistorysynctemporary
com.apple.private.alloy.musictemporary
sub-services
userDictionary
SIM2
%@ Service hash info for register with timestampGUID: %@ info: %@
IDSRegistrationCenter.m
Sending IDS deregistration
hard deregister
overrideProvisionResponseCode
provisionCodeOverride
info
IDS Authentication failed: %d
v32@?0q8q16@"NSError"24
SIM1
B16@?0@"<IDSUser>"8
v16@?0@"IDSAuthenticateUsersMessage"8
v16@?0@"IDSProvisionTemporaryPhoneMessage"8
IDS Temporary Phone Provisioning failed: %d
Sending IDS Authentication request
UNKNOWN
aliases
Need to re-authenticate
Email query failed
Need to re-register
B16@?0@"IDSBaseMessage"8
action
button
Contact Support...
http://www.apple.com/support/validation/?code=4739-4725-5203&lang=en-us
body
If this is a new Apple ID, you do not need to create another one. To use this Apple ID with iMessage, contact iMessage support with the code below.
Customer Code: 4739-4725-5203
Close
title
Your Apple ID "hello@icloud.com" can't be used to set up iMessage at this time.
suppressServerAlerts
ids-allow-empty-uri-registration
weight
x-id-service
x-required-for-message
x-result-expected
x-is-forced-query
id-query
Missing uris
Handle ID query response: %@
results
LinkManager
added mapping device ID [%@] to destination [%@]
        %s
%7d %s
%3llu msgs %sB pending, %5llu msgs %sB processed
Total
%3llu msgs %sB pending, %5llu msgs %sB processed
None
%5lld pkts %5lld KB  %5llu pkts %5llu KB
%5lld pkts %5lld KB  %5llu pkts %5llu KB
============= New LinkManager %@ starting =============
com.apple.demo-settings
StoreDemoMode
FProgramNumber
ReportFileOpenTimeInterval
Both FixedInterface [%@] and FixedInterfaceDestination [%@] are set. Setting up UDPLink only.
============= Dealloc LinkManager %@ =============
packetsDropped
total
cannot open reporting FIFO file %s, errno=%d
opened FIFO file %s for writing
=======================================================
closed FIFO file %s
                            Since last report (for %.1fs)
Cumulative total
  Combined              Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
                   Dropped %6llu pkts                       %6llu pkts
Streaming Usage Statistics:
%d-%02d-%02d %02d:%02d:%02d.%06d %s  LocalDelivery %s
Connected
Disconnected
LinkReport
Sync priority messages queued:
Sync priority messages queued: %@
Default priority messages queued:
Default priority messages queued: %@
Urgent priority messages queued:
Urgent priority messages queued: %@
Urgent Cloud priority messages queued:
Urgent Cloud priority messages queued: %@
Messages being sent:
Messages being sent: %@
Incoming messages not claimed yet:
Incoming messages not claimed yet:
%3llu msgs
%3llu msgs
Total
%3llu msgs
Total
%3llu msgs
None
_startReporter cannot locate temporary directory
_startReporter cannot open %s
ids-report.
%s%s
removing old fifo file %s
%s%s%u
IDSLinkBTKey
IDSLinkBTDatagramKey
IDSLinkBTLEKey
IDSLinkLocalUDPKey
IDSLinkGlobalUDPKey
IDSLinkGlobalKey
IDSLinkNoneKey
_suspendBTLink %@ -> %@
Not processing _connectivityChangedForDefaultDevice in the IPsecLink path.
_connectivityChangedForDefaultDevice: local(%@ -> %@), cloud(%@ -> %@).
_connectivityChangedForDefaultDevice sending UTunController didConnectForDevice (default)
_connectivityChangedForDefaultDevice sending UTunController didDisconnectForDevice (default)
_connectivityChangedForDefaultDevice NOT(delay) sending legacyUTunBTLinkManagerDefaultPeerConnectivityChanged: %@
_connectivityChangedForDefaultDevice sending legacyUTunBTLinkManagerDefaultPeerConnectivityChanged: %@
_connectivityChangedForDefaultDevice sending legacyUTunBTLinkManagerDefaultPeerCloudConnectivityChanged: %@
_nearbyChangedForDefaultDevice: %@ -> %@
DisableRangeExtension
Ignore LMCommandUDPLinkAddress/Reply due to disabled range extension via defaults.
(prefer) 
(reply) 
received remote UDPLink %@interface address %@%@ through %@
received remote UDPLink interface address doesn't match to the source of the packet - ignoring
will bring up WiFi when losing BTLink
received invalid interface address bytes(%ld) = %@
received remote UDPLink interface down %@through %@
will NOT bring up WiFi when losing BTLink
Remote device reported data corruption
unknown LMCommand %lu received
UDPLink invalidated - stop retransmitting local interface address
already received remote interface address - stop retransmitting local interface address
didn't receive remote interface address for last %.0fs - giving up!
setDestinationAddress nil for %@.
retransmission already scheduled with %.1fs - resetting it to 1s next time
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IDSAgent/IDSLinkManager.m
transmitting UDPLink %@interface address %@%@
cannot send LinkDown when BT is not used - bail out
(reply)
transmitting UDPLink interface down%@
LinkManager requires BT, skip WiFi handshake.
_startUDPLinkHandshakeForDefaultDevice wantsWiFi %@ immediately %@ mayBringUpWiFi %@
_startUDPLinkHandshakeForDefaultDevice Central: wantsWiFi is YES but mayBringUpWiFi is NO - skip!
_startUDPLinkHandshakeForDefaultDevice !Central: wantsWiFi is YES but localWiFi has no IP - skip!
_startUDPLinkHandshakeForDefaultDevice ignoring stale scheduled handshake %@ %@ %.1f seconds ago
WiFi was brought up %.1f seconds ago but it was brought up again later - ignoring this one
WiFi was brought up %.1f seconds ago but still didn't get an IP - Bring it back down
down
don't 
_startUDPLinkHandshakeForDefaultDevice bring %@ WiFi, %@send handshake now
_startUDPLinkHandshakeForDefaultDevice bring %@ WiFi, %@send handshake in %.1f seconds
process link change for default paired device (oldLink:%@, newLink:%@).
Skip wifi handshake due to disabled range extension via defaults.
NoLink
Link type changed from %lu to %lu, current link: %@
IDSLinkType
IDS Local Link
_setBestLinkToCurrent cbuuid %@ _deviceIDToCurrentLink %@ _cbuuidToLinks %@ oldlink %@ newlink %@
set current link from %@ to %@ for cbuuid %@ deviceUniqueID %@
sending UTunController didConnectForDevice %@
sending UTunController didDisconnectForDevice %@
created new UDPLink %@ state %s with %lu interfaces
created new UDPGlobalLink %@ state %s
linkOptions
@"NSString"80@?0@"NSString"8I16@"NSString"20q28S36Q40S48I52@"NSData"56B64B68i72i76
v52@?0I8I12I16I20Q24@"NSString"32@"NSString"40B48
v24@?0@"NSString"8@"NSString"16
created new GlobalLink %@ for session %@ (=> cbuuid), state %s.
a BT/BTLE link
removing %@ from links for device %@
_hasGlobalLinkConnectingOrConnected: _cbuuidToLinks: %@
%@ is still connecting or connected.
com.apple.idslinkmanager.networkinterfacelistener
State:/Network/Interface/[^/]+/IPv[46]
network interface listener started
network interface listener stopped
sending a packet over %@ (%zdB) = %s
dropping a packet (%zdB) over link type (%d), #dropped: %llu.
use %@ for cloud enabled packet.
use %@ for control message
dropped data for device %@
no current link for %@
No current link for %@ -- asking WiProx to connect.
startLocalSetup called
LOCAL-SETUP-STARTED
obliterateConnectionInfo called
reset preferInfraWiFi.
reset last sent default peer states (deviceNearby:%@, deviceConnectivity:%@, deviceCloudConnectivity:%@, peerConnectivity:%@).
reset phone call state.
addPairedDevice for the same UUID %@ - Ignoring
enableConnectionForDefaultPairedDevice YES for cbuuid %@.
connectPairedDevice for unknown UUID %@ - Ignoring
deletePairedDevice for %@
enableConnectionForDefaultPairedDevice NO for cbuuid %@.
deletePairedDevice for unknown UUID %@ - Ignoring
LinkManager requires BT, ignore preferInfraWiFi request.
preferInfraWiFi must not be initiated from this device
switching to preferInfraWiFi mode
preferInfraWiFi requested but no local IP available - ignoring
switching back to Magnet/InfraWiFi mode
LinkManager requires BT: %@.
LinkManager shouldStartBTLinkManager: %@.
No connected BTLE link for cbuuid %@ deviceUniqueID %@ -- asking WiProx to connect.
Already have BTLE link for cbuuid %@ deviceUniqueID %@
Asked to disconnect from cbuuid %@ deviceUniqueID %@
startUDPGlobalLinkForDevice %@
stopUDPGlobalLinkForDevice %@
Remove UDPGlobalLink for device %@
createConnectionDataForDevice - deviceID=%@, localPartyID=%@
No UDPGlobalLink is found
No UDPGlobalLink is found.
processRemoteConnectionDataForDevice - %@
startConnectionForDevice - deviceID=%@ isInitiator=%@ remotePartyID=%@
startBTDatagramLinkForDeviceUniqueID - deviceID %@ cbuuid %@
stopBTDatagramLinkForDeviceUniqueID - deviceID %@ cbuuid %@
stopGlobalLinkForDevice %@ (=> cbuuid)
Remove %@ for session %@
_deviceIDToGlobalLinkUp
IDSGlobalLink is brought down for %@.
Bring down WiFi (currentLinkType:%d).
Magent is connected, skip connecting GlobalLink for %@.
Receive allocate response for request %@, device %@. connectGlobalLinkForDevice with sessionInfo %@.
connectGlobalLinkForDevice: sessionInfo[kIDSQRAllocateKey_StreamInfoSubscribedStreams]:%@
Set alternateDelegate %@ for %@
No GlobalLink is found.
GlobalLink
disconnectGlobalLinkForDevice for  %@
_deviceIDToAllocRequests
allocate request %@ is pending for %@
handleAllocateRequestFailureForDevice - deviceID %@, requestID %@, erroCode %d
setAcceptedRelaySession - sessionID %@, relaySessionID %@.
-[IDSLinkManager setHasPendingAllocation:forIDSSession:]
%s - sessionID %@, hasPendingAllocation %@.
-[IDSLinkManager setTimeBase:forIDSSession:]
%s - sessionID %@, timeBase %@.
sendSKEData - sessionID %@, skeData %d Bytes.
sendSKEData - sessionID %@, there is no link for sendSKEData (links:%@)
there is no link for sendSKEData
sendKeyMaterialMessage - sessionID %@, groupID %@
sendKeyMaterialMessage - sessionID %@, there is no link (links:%@)
setDesiredMaterialsForSession - sessionID %@
setServerDesiredMaterialsForSession - sessionID %@, there is no link (links: %@)
requestMaterialsForParticipantIDs - sessionID %@
setDefaultUnderlyingLink - sessionID %@, linkID:%d.
setPacketNotificationFilter - sessionID %@, linkID:%d, enable:%@.
dropIPPackets - sessionID %@, linkID:%d, payloadArray:%@.
updateProtocolQualityOfService - sessionID %@, linkID:%d, isGood:%@.
stopKeepAlive - sessionID %@, linkIDs:%@.
WiFiAssist enabled: %@
currentCellularSignalStrength - sessionID %@.
startLinkProbing - sessionID %@, options: %@.
stopLinkProbing - sessionID %@, options: %@.
queryLinkProbingStatus - sessionID %@, options: %@.
flushLinkProbingStatus - sessionID %@, options: %@.
sendStatsRequest - sessionID %@, options: %@.
setRemoteDeviceVersion - sessionID %@, version: %u.
receiveJoinNotificationFromAParticipant - sessionID %@.
setUPlusOneModeForSessionID - sessionID %@, isUPlusOneEnabled: %@.
manageDesignatedDestinationsWithSessionID - sessionID %@, sessionStateCounter: %u, destinations: %@, withType: %u
removeParticipantIDsWithSessionID - sessionID %@, sessionStateCounter: %u, participantIDs: %@
get session info for group %@, session %@, options %@
update session participants for group %@, session %@
registerPluginForGroup could not find GlobalLink for session %@
updateSessionURIToParticipantIDs for group %@, session %@
createAliasForParticipantID could not find GlobalLink for session %@
participantIDForAlias could not find GlobalLink for session %@
updateParticipantType %u - sessionID %@
sendConnectedLinkInfoToAVCForSessionID %@
setClientUniquePID could not find GlobalLink for session %@
requestChildConnectionIDForLinkID could not find GlobalLink for session %@
setIsOnPhoneCall %@ for deviceID %@
%@ didConnectForDevice %@
%@ didDisconnectForDevice %@
default device is in preferInfraWiFi handshake, skip notifying BTLink hasSpaceAvailable.
didReceiveSKEData - alternateDelegate:%@, skeData:%d bytes.
didReceiveKeyMaterialMessage - alternateDelegate:%@ from %@ to %@
didReceiveMaterialInfo - alternateDelegate:%@ materialInfo:%@
Not processing didConnectOverCloud in the IPsecLink path.
didConnectOverCloud for %@.
didFailToConnectOverCloud for %@.
didDisconnectOverCloud for %@.
allocation request was delayed, retry...
didConnectUnderlyingLink - alternateDelegate:%@, linkID:%d, linkUUID:%@.
didReiceiveChildConnectionID - alternateDelegate:%@, childConnectionID:%@ linkID:%d
didDisconnectUnderlyingLinkID - alternateDelegate:%@, linkID:%d, linkUUID:%@, reason: %d
didDefaultUnderlyingLinkChangeSucceeded - alternateDelegate:%@, currentDefaultLinkID:%d.
didWiFiNWPathFlagsChanged - alternateDelegate:%@, nwPathFlags:%u.
didCellularNWPathFlagsChanged - alternateDelegate:%@, nwPathFlags:%u.
didRATChange - alternateDelegate:%@, newRAT:%s.
didCellularMTUChange - alternateDelegate:%@, cellular MTU:%u.
terminateCallDueToIdleClientForLink - alternateDelegate:%@
receive session-info for group %@, session %@, status: %u.
didReceiveReportEvent - alternateDelegate:%@, eventDictionary:%@
%@ reported power state change: %@
%@ reported paired device change.
enableConnectionForDefaultPairedDevice NO for currently paired device.
State:/Network/Interface/utun
State:/Network/Interface/pdp_ip
Addresses
_handleNetworkChanges %@ = %@
/IPv4
/IPv6
_handleNetworkChanges _localWiFiAddressUsedForDefaultDevice = %@
receive WiFi IP address, start QR allocation.
LinkType %lu, RATType %lu for non-FaceTime clients
current link type for %@ is %d.
None
Magnet
InfraWifi
QuickRelayWiFi
QuickRelayWWAN
WRM recommends the link type %u, but IDS ignores WRM recommendations per rdar://problem/33602915 discussion
cellular RAT changed, usable: %@.
celluar data is usable, retry QR allocation for %@.
cellular SoMask changed: %u.
t:%@
kDefaultMultiQueueKey
ids-message
v16@?0@"RPCompanionLinkDevice"8
v24@?0@"NSDictionary"8@"NSDictionary"16
init
v32@?0@"RPCompanionLinkClient"8@"NSString"16@"NSError"24
v16@?0@"<IDSRapportClientDelegate>"8
guest-device:%@
v16@?0@"RPCompanionLinkClient"8
We failed to find a rapport destination for the provided deviceIdentifier
RPCompanionLinkClient
Rapport
RPOptionAllowUnauthenticated
RPOptionSenderID
IDSKTGossipPolicy.m
spec
/Library/IdentityServices/ids-gossip.db
GossipCache
gossip-recipient-set
IDSKTGossipPolicy
Error fetching stored gossip recipients { error: %@ }
Error unarchiving stored gossip recipients { error: %@ }
Error archiving stored gossip recipients { error: %@ }
Error storing gossip recipients { error: %@ }
utun-push-fallback-connected-timeout-
utun-push-fallback-disconnected-timeout-
cloud-messaging-on-the-hour-max-delay-in-ms
cloud-messaging-top-of-the-hour-definition-in-seconds
Initing UTunConnection %@ %p
NWFraming
shouldUseNWFramingOverIPsecString: %@
Deallocing UTunConnection %@ %p
<%@: %p, name: %@>
B32@?0@8Q16^B24
IDSUTunConnection
Insufficient space for {dataProtectionClass: %@}, {pendingOutgoingBytes:%lu}, {maxQueueSize:%lu}, {inflightMessageCount:%lu}
%@ changing cbuuid from %@ to %@
%@ ignoring cbuuid update from %@ to %@
%@ enabled state changed: %@ -> %@
com.apple.private.alloy.continuity
Removing continuity message %@
WPConnection failed
%@ Peer awake state changed to YES with %lu pending messages (%lu sending). Kicking queue to service non-waking messages.
-[IDSUTunConnection _nonThreadSafeStopConnection]
%p: %s
OTR is disabled on magnet connection, enable stream encryption.
Found pending or locked continuity peer %@, disable connection for %@.
%@ _startConnection
IDS internally calling UTUN's openSocketWithOptions
%@ IDS internal openSocketWithOptions call returned socket %d, error %@
new local link established
%@ created %@ for socket %d - sending handshake with version %u
%@ resending %lu pending socketpair messages
v32@?0@"IDSSocketPairMessage"8Q16^B24
%@ Failed to open UTun socket, waiting...
UTunConnection receives remote controlChannelVersion %@ instance ID [%s] flags %016llX, use shared OTR session %@, use named OTR session token %@, resume resource transfers %@, new service supported %@, dynamic services %@ service minimum compatibility version %u
%@ openSocket returned with connection to old instance - stop and reconnect
@"NSData"24@?0@"NSData"8@"NSString"16
@"NSData"16@?0@"IDSSocketPairMessage"8
 (non waking)
%@ enqueuing%@ message %@ messageCount %lu - QoS=0x%x
Message with topic %@ has queueOneIdentifier %@, flushing older messages that match.
queue one identifier
Attempting to send nonCloudWaking message on non-magnet connection. Coallescing {guid: %@}
%@ socket buffer is empty, dequeuing a message.  didWakeHint(%d)
%@ Waiting for remote device wake before dequeuing message.
Cancelling messages %@
Client Canceled
All queues are empty
Clearing fallback stickiness due to: %@
Server Bag provided us with a fallback timeout of %f
DisableCloudFallback
   **** cloud fallback disabled ****
ids-local-cloud-fallback-delay
%@ performing cloud fallback for message[%u] %@ which is scheduled to expire %@
%@ - messages in queue in need of fallback, setting timer for: %f
%@ fallback timer fired, fallback queue: %lu
Exception caught handling fallback timer: %@
%@ - messages in queue, setting timer for: %f
%@ - no messages in queue, clearing timer
%@ timeout timer fired, sending queue: %lu %lu
Exception caught handling timeout timer: %@
The destination device for this message did not connected before the timeout fired.
This message was a non-waking message and the destination device for this message did not wake before the timeout fired
This message was written into the connection, but did not receive an ack. Check Bluetooth conditions and that your process is not hung on the receiver.
This message requires class C connection, but the devices are not ClassC connected, because the remote device is locked.
timed out
%@ sending resource transfer cancel message %@
No in flight messages remaining
Message %@ %@ %@ removed, total message count %d - %@
Message on service %@ not allowed! Attempted to send on traffic classes: %@ Permitted traffic classes: %@
Overriding previous decision on message for topic %@ due to feature flag that allows messages will empty traffic classes
v32@?0@"IDSLocalDeliveryMessage"8Q16^B24
remote does not support new service
Server Bag {%@:%d}
%@ Assert QuickRelay after %d ms
%@ utun socket pair connection inFlightMessageCount %lu (max %u) - do not dequeue
v24@?0@"IDSSocketPairMessage"8^B16
v32@?0@"NSArray"8Q16^B24
DisableLocalDelivery
**** Local IDS connectivity is disabled, only using cloud ****
UTunConnection _isCloudEnabled:%@ (%@, messageCount:%d)
%@ is not available, waiting.
No messages waiting for acks
Message with guid %@ not allowed due to its traffic class
IDSUTunConnection-sending-%@
IDSUTunConnection-sending
%@ created sending power assertion %@
Translated message %@ with servicename %@ to streamID %u
Piggybacking message %@ with servicename %@ with incoming streamID %u created %@ (old id %u)
Remote instance changed while receiving message %@ with topic %@ - continue and dispatch reconnect
Non BT usage is not allowed, failing message
Celluar Useage Policy states that BT is required
dequeueMessages check for %@ %u
%@ resource transfer sender %@
%@ cannot read message to deliver for resource transfer %@
cannot read chunk of resource
* Dequeuing for Sending %{public}@ priority local message payload of data size: %lu/%lu   for topic: %{public}@:%{public}@  guid: %{public}@  messageID: %d
Message %@ added to queue, total message count %d, sendingTopics count %d
com.apple.private.alloy.idstool.testservice
DuplicateTestFileMessages
Send duplicate message %@
Clearing power assertion: %@
* Sending message with sequence number %u
with sequenceNumber %u
%@ Sending message[%lu] %@ %@.
-[IDSUTunConnection _addMessageSize:forTopic:direction:dataProtectionClass:isResource:]
%s: statsDictionary is nil for direction %d
%s: priority %d updated direction %d stats %@
Starting messageDequeueTimer
com.apple.identityservices.IDSUTunConnection-dequeueMessages
Request to start messageDequeueTimer ignored -- timer already running
Dequeue Message Timer did Fire -- Dequeueing messages
Requeued %lu sending messages for %@.
OTR negotiation timed out for %@ but remote device doesn't support shared session.
OTR negotiation timed out for %@, retry.
OTR negotiation timed out for %@, clear error state and requeue all messages.
v16@?0@"NSString"8
Enable
Disable
%@ OTR for UTunConnection %p, priority %ld
UTunConnection - No class storage key specified in notification %@
Class %@ storage keys are available, processing %lu pending messages
Encrypted message for token %@  original size: %lu  encrypted size: %lu  elapsed: %.6f
Failed to encrypt UTunConnection message! Error %ld
Send OTR message for %{public}@ E:%u SN:%u.
_sendOTREncryptionQueue: invalid OTR token %@
Encrypted message for device unique ID %@  original size: %lu  encrypted size: %lu
Send public key encrypted message.
com.apple.private.alloy.utunconnection
Send OTR message for %{public}@ E:0.
Waiting OTR session for %04x(%@) ...
Data protection class unavailable
v12@?0I8
OTR session negotiation for %@ is in progress
Session key store is not available for class C, but %@ message (%u) is already stored.
Session key store is not available for class C, holding on to %@ message (%u)
Current pending messages %@
Session key store is not available for class A, but %@ message (%u) is already stored.
Session key store is not available for class A, holding on to %@ message (%u)
Clear OTR error map for %@.
Set OTR error map for %@.
OTR session for %@ is in error state, skip negotiation.
_handleOTRDecryptionError: invalid OTR token %@
Attempt to decrypt invalid message type %u.
*** Recv old OTREncryptedMessage but remote device asserts useSharedOTRSession message %@
*** Recv OTR message with unknown topic, command:%d, sequenceNumber:%u, streamID:%04x, version:%u, priority:%d
Recv OTR message for %{public}@ E:%u SN:%u.
Stored class C OTR message for %@, sequneceNumber:%u.
Decrypted message for %@  original size: %lu  unencrypted size: %lu  elapsed: %.6f
*** OTR session for %@ is not ready.
Stored class A OTR message for %@ sequenceNumber:%u, ignore decryption failure.
Decrypted message for device unique ID %@  original size: %lu  unencrypted size: %lu
Decrypted continuity message, lock peer %@ for btUUID %@.
Failed to decrypt UTunConnection message! Error %ld
Flush all messages for peer %@
Broadcast: Sending ack %@ for received sequence number %d
Sending Expired ack %@ for received sequence number %d
IDSSocketPairCommandResourceTransferMessage requires a messageUUID
IDSSocketPairCommandResourceTransferMessage should be IDSSocketPairResourceTransferMessage
IDSSocketPairCommandResourceTransferMessage received %@ @ incorrect offset %llu (should be @%llu)
IDSSocketPairCommandResourceTransferMessage cannot find receiver for message %@ - asking sender to reset
IDSSocketPairCommandResourceTransferMessage already receiving message %@ @%llu
ResourceTransferReceiverError
ResourceTransferErrorOverride
Aborting resource transfer receiver for %@ after %lf seconds
IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@ (reason %d)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (was sending %llu)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (ignoring nonmatching message %@)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (sender not found)
Got cancel message for incoming file %@ cancelReason %u
Got cancel message for %@ cancelReason %u
Got cancel message for outgoing file %@ cancelReason %u
IDSSocketPairCommandResourceTransferMessage got cancel message for %@ cancelReason %u, but no sender or receiver found
IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@
IDSSocketPairCommandResourceTransferMessage received and completed
IDSSocketPairCommandResourceTransferMessage received - waiting for more
%@ received a message that we cannot accept without encryption! %@
Got incoming data message {dataMessage: %@, rawMessage: %@, command %d, self: %@, didDecrypt: %@}
v16@?0@"NSData"8
Received message has messageUUID %{public}@ peerResponseID %@ expectsPeerResponse? %@ wantsAppAck %@ remoteExpiryDate: %@
Received a message that has passed its expiry date, sending back an expired ack MessageUUID: %@
%@ [%@] received a %d message when it was expecting a handshake!
Incompatible IDS version number!
Incompatible IDS version number - please make sure your build versions match!
Incoming message %@ servicename %@ streamID-found %u newly-created %@ (serviceMapMessage %@)
Cannot create mapping while receiving message %@ with topic %@ - continuing
UTunConnection Error: missing expected message topic!! (no optimization) streamID %u  (topicForStreamID %@)
*************** SERVICEMAP ERROR: FAILED TO GET TOPIC FOR streamID %u ****************
Remote instance changed while receiving message %@ - drop and reconnect
UTunConnection Error: missing expected message topic!! (supports optimization) streamID %u  (topicForStreamID %@)
Incoming message %@ servicename-found %@ streamID %u sequenceNumber %u
Incoming message %@ servicename-found %@ streamID %u
Broadcast: incoming message sequence number %u 
* Receiving local message payload of size: %d for streamID: %d  messageSequenceNumber %d  compressed %@
Broadcast: incoming protobuf sequence number %u 
* Receiving local protobuf %@ for streamID %d  compressed %@
Decompressed local protobuf message data from: %lu  to: %lu
LocalDelivery: IDSSocketPairCommandProtobufMessage received incompatible data message of type %@
* Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
  => Message id %d ACK'd RTT: %f  [instantaneous %f]  time sent: %f
Removing ack'd message[%u] with sequenceNumber %u (index=%lu), message %@ remaining count %lu
  => Message id %d ACK'd but it already timed out...
%@ [%@] received handshake with version %u. We require %u. Needs handshake? %@
Broadcast: incoming app ack sequence number %u 
SocketPairConnection should have consumed this and never pass it up
GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY %@
* GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
GOT SOCKET PAIR COMMAND MESSAGE INCOMING NICE PROXY %@
* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE INCOMMING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
GOT SOCKET PAIR COMMAND INCOMMING IMESSAGE COMMAND %@
* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE iMessage Command Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
DECOMPRESSED IMESSAGE DECRYPTED DATA NOT NIL: %@
Passing %@ Down to UTUN
Got ServiceMapMessage reason %u serviceName %@ streamID %u
Popping dialog to alert the user of the IDS version mismatch
DLCCollectLogs
DiagnosticLogCollection
IDS version mismatch
%@ informed that utun socket pair connection %@ has closed...
%@ informed that IDSNWSocketPairConnection has closed.
message received via local link
%@ connectionBecameEmpty %@
%@ connectionDidReachInFlightMessageLowWaterMark %@
%@ connectionDidReceiveBytes %@
local link did receive bytes
Calling IDSOTRController:startOTRNegotiationWithDeviceIfNeeded to force session negotiation.
_otrTokenToArray: invalid OTR token %@
%@-%u-%1u-%@
%@-%u-%1u
IDSPhoneNumberValidationErrorDomain
<%@: %p state: %@, lastSendDate: %@, numberOfPreflights: %u, numberOfAttemptsWithoutSuccessfulSend: %u, numberOfSuccessfulSends: %u>
BYSetupAssistantDidCompleteSIMSetupNotification
SetupAssistant
overrideSMSTimeout
smsTimeout
com.apple.identityservices.sms-delivery-hbi
Registration attempt
Trying to send phone number validation request { preflights: %d, sends: %d, attemptsWithoutSend: %d }
Failed Sending Phone Number Validation
Failed sending registration Phone Number Validation request #%d, trying again
Failed Phone Number Validation
Failed sending registration Phone Number Validation request #%d, giving up
Phone Number Validation Sending
Succeeded sending registration Phone Number Validation request #%d
Registration SMS
Received registration SMS
Phone Number Validation Timeout
Timed out waiting for Phone Number Validation request #%d
TotalSMSAttempts
TotalPreflightAttempts
Idle
Waiting to Begin
Waiting for Delivery Acknowledgement
Waiting for Response
gdr-max-auth-retries
gdr-auth-retry-interval-seconds
  * Device Name: %@   Service: %@   Hardware: %@   Token: %@   Linked URIs: %@   Identities: %@   Device Data: %@   Sub-services: %@   HSA trusted: %@
IDSGetDependentRegistrationsCenter.m
OTRController
Remove OTR timer %p for %@.
OTR timed out for %@, timer %p.
otr-timer-%@
Set OTR timer %p for %@
Unable to create session from session data
IDSOTR
No public key found for remote device
  => will, send out OTR negotiation data %luB for %@, count:%08x.
_topicFromToken: invalid OTR token %@
_priorityFromToken: invalid OTR token %@
Topic
linkType
wasPrimary
timeTaken
totalProcessed
%@ - No account for service name %@ found to send a message, bailing...
IDSGroupSendAheadObserver
sendAheadGroup { group %@, account %@, destination: %@ }
Send ahead message %@ got response code %lu error %@ lastCall %@
v24@?0@"NSData"8@"NSError"16
Group updated, sending ahead to members { topic : %@ }
service_signatures
IDSDaemon-DM
direct messaging capability not supported by peer
Invalid message size (%lu < %zu)
processing direct messaging info
direct messaging info: resolved version %u (l:%u r:%u)
direct messaging info: peer supports device connection
direct messaging info: peer supports concise ACKs
com.apple.ids.direct-messaging
notifying clients with state: %llu
Received direct messaging connection for service: %@
No services when processing %@
Index when processing %@ : %lu
No objects when processing %@
No local objects when processing %@
No connection when processing %@
No entitlements when processing %@
No allowed services when processing %@
peerIDForDirectMsg
directMsgAllowedForServices
pidForIDSD
completing setup info for %@ : %@, idx %lu, broadcast %d
65AC1229-66CB-4C74-BE47-F5342D60E37E
direct-messaging-socket-received
object-flags
object-recipient
issuing connected socket to client %@
v16@?0@"<IDSDaemonListenerProtocol><IDSSendXPCProtocol>"8
__kIDSOTRKeyStorageClassStorageIsAvailableNotification
__kIDSOTRKeyStorageClassKey
OTRStore
Device first unlocked
Device unlocked
Device locked
Saving OTR session key store
v32@?0@"NSString"8@16^B24
ids-otr-key-storage
Device is under data protection lock, not loading class A session keys
Device is under first data protection lock, not loading class C session keys
Class A store is already loaded ignoring...
Class C store is already loaded ignoring...
Class D store is already loaded ignoring...
Loaded stored class %@ session store
Missing session key dictionary %@ or data protection string %@
Did not find class %@ store to load
%@ - Missing service in token, can't store session key
%@ - Missing service in token, can't retrieve session key
Found session key %p for topic %@
%@ - Missing service in token, can't remove session key
com.apple.identityservices.otr-save-store
com.apple.identityservices.otr-purge-cache
Found session key for token: %@
No session key for token: %@
Saving now
Storing session key for %@.
Removing session key for %@.
removeSessionKeyForAllTokenFromMainQueue
Cleaning up keychain
OTRStore: invalid OTR token %@
%@:state = %d, isFinished = %d, isBeingHandedOff = %d, callID = %d, state = %d, inviteNeedsDelivery = %d
APSConnection
SecIdentityCopyCertificate
SecCertificateCopyCommonNames
IDSSessionConnectionInfo
array_ref = %@
firstCommonName = %@
com.apple.identityservices.idstatuscache
idstatuscache.plist
CacheVersion
IDStatus
NegativeTTL
LookupDate
ValidExpiry
IDSIDStatusQueryController
IDQuery
IDSDaemonQueries
Completed ID query {uri: %@, fromURI: %@, error: %@}
IDSIDQuery
v32@?0@"NSString"8@"NSNumber"16^B24
Purging tokens forURI %@ fromURI %@ fromService %@
Bag disabled -- Not purging tokens forURI %@ fromURI %@ fromService %@
com.apple.identityservices.id-status-cache
No updates, ignoring...
No fromURI, ignoring...
No fromService, ignoring...
Will add valid expiry
Caching ID query responses: %@   date: %f   from URI: %@   from Service: %@ addValidExpiry
Trying to cache Invalid for ourselves, ignoring...
q24@?0@"NSDate"8@"NSDate"16
 => Ignoring update to unknown, just updating the cache
Removing cached entries {service: %@}
 => Bogus ID query for: %@   ignoring this
 => From Service: %@
 => Not looking up... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
unknown
 => Forcing query for URI: %@
com.apple.private.alloy.biz
 => Not looking up... status is Valid
 => Not looking up, query not allowed... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
 => We can't look up, but can piggyback... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
 => Issuing ID query for URIs: %@   (Current status: %d  Last time: %f   Current time: %f  Difference: %f  Needed Difference: %f)
Completed ID query for URI %@ fromURI %@ (Error: %@)
Over %ld hour(s), resetting query per hour(s) count
New start query date %@
We have at least one valid result, returning cached results %@
Device does not have a cert, attempting to proxy the query
Remote ID IDs Query V2 has completed with the following: %@  FromURI: %@ ReturnedService: %@ ReturnedSucesss: %@ ReturnedError: %@ 
Updating Cache  %@
Calling Completion Block  %@
Device does not have a cert {_allowProxyQueries: %@, URIsToQuery: %@}
We're at %@ queries for this hour
We're at %@ queries for this hour, can't do more
(%@)
Triggered auto bug capture for query rate limiting {session : %@, error: %@}
We didn't query anything, returning cached results %@
 => Bogus ID query for: %@   ignoring this request
 => From URI: %@
 *** Missing identity, failing query
 => Bogus ID for: %@   ignoring this
 => Expired status -- returning unknown {URI: %@, fromURI: %@, difference: %f, timeNeeded: %f}
PeerCache
Current cache for service: %@  cache: %@
Empty service or URI to send ID status changes
Sending id status changes %@ for service %@ URI %@ success %@ error %@
Empty uniqueID %@ for adding completion block
Empty completion block for uniqueID %@
Completion block for uniqueID %@ added %@
Empty uniqueID %@ for removing completion block
Removed completion block for uniqueID %@
**** Forcing deleting of peer cache ****
Forcing flush of peer cache
Forcing save of peer cache
Non-string key in cache (service) -- Removing
Non-dict value in cache (service) -- Removing
Corrupted entry in cache (missing dict). Removing entry
Corrupted entry in cache (status). Removing entry
Corrupted entry in cache (lookUpDate). Removing entry
Removing entry with unknown status {URI: %@, URIDict: %@}
Exception processing cache -- deleting {exception: %@}
Loaded cache: %d items
Finished wipe of legacy cache
Saving cache: %d items
client-query-set-unknown-for-purge
  => Invalid URI, below our minimum length: %@
  => Invalid URI, empty: %@
  => Invalid URI, phone number, with no '+' character: %@
  => Invalid URI, email, with no '@' and '.' characters: %@
  => Invalid URI type: %d  URI: %@
client-query-allow-forced
client-query-respect-soft-expiry
device-query-reset-interval-hours-%@
com.apple.private.alloy.arcade
device-queries-per-hour-%@
client-query-allow-bypass-limit
GKSErrorDetailedError
AVConference
GKSErrorReturnCode
<%@: %p forParticipantID:%llu forPublicIdentity:%@ materials:%@ hash:%llu>
v24@?0@"IDSRegistrationPushHandler"8@"NSDictionary"16
bdurl
baurl
md-peer-lookup-negative-cache-time-%@
md-peer-lookup-negative-cache-time
md-peer-lookup-unknown-cache-time-%@
md-peer-lookup-unknown-cache-time
Warning: [[request IDSSessionID] length]: %lu != sizeof(uuid_t): %lu
QRAllocation destroyed
Invalid session. Skip AWD report
access token of allocation for QR session %@ expired (%f > %@). Discard it.
_purgeAllocation: Invalidate allocation
allocation timeout timer cancelled
allocation timed out
Sending server message QR metrics allocation timeout report for session %@ requestID: %@, ua: %@
failed to send server message allocation timeout QR metrics report: error: %@  code: %ld
Finished sending server message allocation timeout QR metrics report for session %@ delivery error %@
Dealloc IDSQuickRelayAllocator %@.
no groupID in %@
session token or address not available: %p %p
Session not found for %@
send keepalive for groupID: %@, sessionID: %@
failed to send keepalive request: error: %@  code: %ld
failed sending allocate request: %@ error: %@  code: %ld
_requestIDToPreferredLocalInterface
translate deviceID: %@
shared session allocation, previous connect status: %p
setTestOptions: IDSGroupSessionForceQRSession
cached response previous connect status, reason/error/token/ip: %u %u %u %@
groupID not set for shared session allocation: %@
_requestIDToSession
QuickRelayServerProvider
QuickRelayServerProvider switch has been deprecated
request allocation for a specific address %@
_setupAllocation: preferredRemoteInterface %@
QuickRelayServerAddress
%@=%@
_setupAllocation QuickRelayServerAddress test option: %@
QuickRelayForceDegraded
_setupAllocation test options: IDSGroupSessionForceDegraded
QuickRelayBlockUPlusOne
_setupAllocation test options: IDSGroupSessionBlockUPlusOneSession
QuickRelayAppleTestingKey
_setupAllocation test options: IDSGroupSessionAppleTestingKey
self->_requestIDToAllocateTime
Full request info for send allocate request, recipient count: %u, request: %@, time: %.6f.
IDSQuickRelayAllocator.m
Stream information to cache, idsSessionID=%@, isJoinAllocation: %@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@
No device found
No push token for device %@
setup allocation for %@ service to device %@
No response found for groupID: %@
use hardcoded session token for group %@, session %@.
No session allocation time: %@ %@
No relay session ID: %p %p
Invalid relay session ID length: %u %u
Invalid relay session UUID: %@ %@
No response for relay sessionID %@
No participant information in %@
No recipientID or push token in %@
merge new participant id %@
%u new participant-id to push token mappings added, %@
No groupID in %@
No QR sessionID in %@
Duplicated responses for sessionID: %@, %@, %@
cached allocation response has issue: %@
message added to cache: %@
use duplicated response
ignore duplicated response
failed to find IDSDSession object for %@
no IDSDSession ID in %@
Should switch from %@ to %@
addConnectStatus, groupID: %@, relaySessionID: %@i, data: %u %u %u %@
No response for groupID: %@
Response is not for sessionID %@, response %@
Cached response modified for relay sessionID %@
response invalidation is supported on internal install only
no response for groupID %@
self allocation in cache: %@
Unable to setup QR allocation for unregistered account for %@ service
missing sessionID to setup a QR allocation
No groupID for shared session %@
found cached allocation response for %@: %@, previous connect status %@
cached allocation response has issue: %@ %@
Expired time: %llu, current time: %llu
Response has expired or about to expire
found no cached allocation response for %@, isAllocateRequestForUnauthorizedUser: %@, shouldUseCachedResponse: %@
trying to change a read-only dictionary
pushToken
look up peer with URI: %@, push token count: %u, prevent duplicates: %@,  tokens: %@
Skipping duplicate %@
could not look up recipient's push tokens, ID: %@, errors: %@ 
Missing expected default paired device's push token %@
No recipient is found.
Missing recipientIDs
Invalid token %@ or idsID %@
token:%@/%@
use QR session info from user defaults: %@.
sessionInfo
no push token for participantID %llu
no response for %@
no participant list in %@
no push token for participantID %@ in response %@
participantID to push token mapping: %@ %@
no push token for participantID %llu in response %@ for group: %@
participantID: %llu, pushToken: %@, group: %@
URI for participant ID %llu in group %@: %@
No URI for participant %@ in group %@
IDSSession ID %@ requested additional allocation for QR Session ID %@, allocateType %d, reason %d
could not find original allocate request to clone %@
No groupID for %@
Ignore self allocation for shared session
requestOptions
could not find original push token to clone for QR session %@
could not find existing recipient to clone
need to do ID query: allocateType: %d, destinations: %@, sessionID: %@, fromURI: %@
Full allocate response payload for RequestID: %@ IDSSessionID: %@ QRSessionID: %@ from cache: %@ with payload %@
failed to compose a QR sessionInfo dict
detected duplicate response. Ignore it.
allocate response modified %@
no allocation for shared session
current response ignored
Recieved allocation from DefaultPairedDeviceID {appID: %@}
Relay expiry time-stamp is NaN: %@
response expired: %16llx %16llx, %@
defaultRemoteDeviceCBUUIDString: %@
allocate response ID %@ is for recipient.
allocate response ID %@ is for initiator and took %0.6lf ms.
allocate response ID %@ is for initiator and took %0.6lf ms, recipient count: %u, response count: %u.
missing allocation status result for initiator
missing recipient push token in allocation status result
missing QR session ID
detects that session %@ has been accepted by device with token %@
join request in process
participant has not joined, ids: %@
useCurrentResponse=%@, sharedSessionHasJoined=%@
participant has joined with cached response
joinWithOptions information: idsSessionID=%@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@, isJoinAllocation = %@
should connect to qr server: %@
Cached stream infomation:  idsSessionID=%@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@
could not find original allocate request %@
set streamInfo from cache: %@, subscribedStreams=%@, publisehdStreams=%@, generationCounter = %@, maxConcurrentStreams = %@
No stream information
isInitiator: %@, pendingRecipientsAcceptedSessions= %@, isCloudAllocation= %@,  useCurrentResponse= %@, isFromCache= %@, subscribedStreams = %@
connecting with sessionInfo %@
recipient waits for session acceptance
self allocation count in response: %u
self allocation: %@
transformed self allocation: %@
failed to get combined-software-id due to invalid parameter.
QR Build Version: %@
remote deviceID: %@
allocate request took: %.6f seconds, extIPAddr: %@.
allocate response is for an auxiliary connection
IPv6Preferred
defaults write to set ipPreference: %d
linkSuggestion
defaults write to set linkSuggestionValue: %d
linkScore
defaults write to set linkScoreValue: %d
Warning: invalid response relaySessionID length = %lu != sizeof(uuid_t) = %lu
missing allocation status result
missing allocateType in response
allocate type is required for allocate protocol version %@
 is missing required attributes %@ in sessionInfo %@
Failed to allocate QR for recipient with token %@ with error %lu
Allocation error response: %@
Allocation failure for session %@, status = %d, code = %d, attempting to retry!
No ids session for ids session id %@
No ids session id for request id %@
No request id
missing response. Skip AWD report
ServerInternalError
BadRequest
MissingRequiredKey
ServerBusy
BadSessionToken
ExpiredSessionToken
Unknown status
 is missing %@, bailling...
No IDSSessionID found for this requestID %@, bailing...
cannot find existing IDSSession %@ to start a connection
bring up GlobalLink link for cloud messaging to %@
passed sessionInfo to IDSSession ID %@ to connect, allocation: %p, %p, session should connectToQRServer: %@
failed to find response for groupID %@
there is no URI list yet. stopped converting URI to Participant ID - %@
v32@?0@"NSString"8@"NSMutableSet"16^B24
failed to find allocation for session %@
IDSSession ID %@ requested for a QR allocation
missing sessionID in requestAllocationForRecipient
found a pending QR allocation for IDSSession %@ with QR session ID %@
there's no pending QR allocation for IDSSession %@
add accepted session %@ with token %@
_initiatorsAcceptedSessionsWithToken
report AWD allocator event %u, transport [%s], RAT [%s], duration %u ms, idsSessionID %@, isInitiator:%@
cleanUpCachedMappings for group %@
invalidate all allocations for IDSSession ID %@
invalid
Add allocation For Session: %@, _sharedSessionHasJoined=%@, %@
_sessionToAllocations
Discard allocation For Session: %@, %@
invalid allocationList
_invalidateSession: %@
_removeAllAllocationsForSessionID: %@, %@
keepalive timer stopped for %@
FixedQuickRelayServerAddress
faied to get address in FixedQuickRelayServerAddress defaults
decoded relay-server-address %@:%u
FixedQuickRelaySessionID
Warning: [decodedUUIDData length]: %lu != sizeof(uuid_t): %lu
decoded base64 relay-session-id %@
FixedQuickRelaySessionToken
decoded base64 relay-session-token %@
FixedQuickRelaySessionKey
decoded base64 relay-session-key %@
 using preallocated tokens from user defaults
Missing a defaults for hardcoded QR session info
disable push handler
enable push handler
received an unexpected message %@
receivedOfflineMessagePendingForTopic: %@
Cannot find allocation for session %@, all allocations: %@
keepalive timer started for %@
keepalive timer not found for %@
cleanup response count: %zu
clean up response for groupID %@
cleanup timer disabled
cleanup timer started
Prefer IPV4
Prefer IPV6
Unknown preference
Error: data length: %lu != sizeof(uuid_t): %lu
deserializeQRConnectStatus failed, bad length: %u %u
Not an UUID
PortMap
found in cur (last = %u) - index=%d shift=%d newShift=%d (cur=%llu, ffsll(~cur)=%d)
found (last = %u) - at index=%d newShift=%d (cur=%llu, ffsll(~cur)=%d)
Number of allocated ports passed high watermark!
Finished capturing AutoBugCapture diagnostics for %@
int IDSPortMap_GetNextAvailablePort(struct IDSPortMap *, uint16_t *)
[Fatal error encountered] %s: ran out of ports to allocate, aborting!!!
can't allocated used port
can't release unallocated port
preflight-enabled
preflight-mechanism-delay
preflight-request-limit
sms-max-retries
sms-max-delivery-retries
overrideMaxSMSRetries
overrideMaxSMSDeliveryRetries
GKVoiceChatServiceErrorDomain
v32@?0@"<NSCopying>"8@16@?<v@?@>24
IDSAsyncMapperQueue
id-validation-cert
Initialize Cert Response: %@
BTLinkManager
============= New BTLinkManager %@ starting =============
using %@ UUID from LinkManager
read pipe peripheral UUID from default: %@
pipe peripheral UUID is nil!  Not setting up BTLinkManager
UseSkywalkChannelToBTServer
UseSkywayChannelToBTServer
IDSBTLinkManager
============= Old BTLinkManager %@ stopping =============
%@ start advertising empty now
stop advertising
using pipe peripheral UUID %@
created pipe peripheral %@
connecting to %@
pipe peripheral is not set. Not connecting
Unregister endpoint identifier: %@
update paired device UUID to %@
processing pending pipe %@
pending pipe %@ matches to paired device
BTLink %@ created
linkDidConnect:%@
could not create a BTLink for %@
pending pipe %@ doesn't match to paired device - releasing it
Change paired device from %@ to %@.
Pipe is registered but not connecting, connect now.
com.apple.ids.datagram
Cannot start datagram link if regular pipe not registered
Registering datagram link type %d endpoint %@ registrationCount 0 => %u
Not registering datagram link endpoint %@ registrationCount %u => %u
Cannot unregister datagram link endpoint %@ - not registered
Unregistering datagram link endpoint %@ registrationCount %u => 0
Not unregistering datagram link endpoint %@ registrationCount %u => %u
%@ didUpdateState %s
%@ didConnectPeripheral %@
%@ didFailToConnectPeripheral %@ err %@
links = %@
%@ didDisconnectPeripheral %@ err %@
%@ didStartAdvertising error %@
 => Pipe did update state: %s
Client
Server
%@ registering for service %@ as %@
skywalk
nsstream
Register endpoint identifier: %@  type: %@  priority: Medium pipeTransport: %@
Unregistering datagram link endpoint %@ registrationCount %@
 => Pipe did register endpoint: %@  error: %@
%@ didRegisterEndpoint id %@ err %@
 => Pipe did unregister endpoint: %@
%@ didUnregisterEndpoint id %@
%@ re-registering for service %@ as %@
Re-register endpoint identifier: %@  type: %@  priority: Medium
 => Pipe did connect: %@
%@ pipeDidConnect %@
%@ got a new pipe for service %@
pipe UUID is nil
pipe UUID is not set yet - deferring verification for %@ until addPairedDevice
new UUID %@ doesn't match to existing UUID %@ - ignoring this new pipe
Pipe UUID %@ match
Link %@ created
Re-registering datagram link type %d endpoint %@ registrationCount %@
could not create a link for %@
 => Pipe did disconnect: %@   error: %@
%@ pipeDidDisconnect %@ err %@
%@ pipe %@ disconnected for service %@
linkDidDisconnect: %@
id-kt-opt-in-out
is-opt-in
Report Spam response: %@
IDSEncryptionErrorType unknown/unhandled error type: %d
neg-token-fail-limit
neg-token-time-limit
v40@?0@"NSData"8@"NSDictionary"16@"NSError"24@"IDSDecryptionMetadata"32
v32@?0@"NSData"8@"NSError"16@"IDSEncryptionMetadata"24
Invalid OTR Encrypt parameters -- failing {inputDataLength: %llu, queue: %@, OTRToken: %@}
   OTR encryption failed with error: %@
Could not find OTR session for token: %@
   OTR decryption failed with error: %@
com.apple.ids.connection.queue
IDSSessionConnection
Cleaning up: %@
connectionData
skeData
callInfoData
Exception caught unarchiving DDResult data: %@   Exception: %@
createConnectionData: requiresWifi = %d, dataReadyHandler = %p, _connectionQueue = %p
_connectionQueue: createConnectionData: requiresWifi = %d, dataReadyHandler = %p, _connection = %@
   AV Response: %@   Error: %@
AVConferenceInviteDataConnectionBlob
AVConferenceInviteDataSKEBlob
AVConferenceInviteDataCallInfoBlob
Got connection data: %p
Connection data error: %@
skeData was nil
callInfoData was nil
_connectionQueue: calling inviteDictionaryForCallID for callID = %d, [connectionInfo peerCN] = %@ 
Calling startConnection
IMAVInterface
Calling startConnectionWithCallID %@, %@, connectionInfo = %@, startError = %@, connectionInfos = %@, [connectionInfo remoteInviteData] = %@
No connection, bailing...
No data to send, bailing...
didStartSession %d for callID %d, error = %@
didStartSession returned a callID we do not recognize %d, what we have %@
didStopWithCallID returned a callID we do not recognize %d, what we have %@
VCCapabilities
GKSRelayParameter_ClientData
GKSRelayParameter_SelfNatType
GKSRelayParameter_SelfBlob
GKSRelayParameter_PeerID
GKSRelayParameter_PeerNatType
GKSRelayParameter_PeerBlob
GKSRelayType
GKSRelayParameter_ConnectionID
GKSRelayParameter_TransactionID
GKSRelayParameter_Token
GKSRelayParameter_PeerRelayIP
GKSRelayParameter_PeerRelayPort
GKSRelayParameter_SelfRelayIP
GKSRelayParameter_SelfRelayPort
GKSRelayParameter_SelfRelayNatIP
GKSRelayParameter_SelfRelayNatPort
GKSRelayParameter_PeerRelayNatIP
GKSRelayParameter_PeerRelayNatPort
GKSRelayParameter_SelfExternalAddr
GKSRelayParameter_PeerExternalAddr
GKSDidStartParameter_ConnType
GKSDidStartParameter_Error
GKSDidStartParameter_CallID
GKSCDXServerAddress
GKSCommNATServerCohortAddress
GKSCommNATServerMain0Address
GKSCommNATServerMain1Address
GKSCommNATServerCohortName
GKSCommNATServerMain0Name
GKSCommNATServerMain1Name
GKSPreEmptiveRelayTimeout
GKSMaxRelayBitrate
GKSICETimeout
GKSNATCheckTimeout
GKSConnectionBlobMaxBytes
GKSNoRemotePacketsTimeout
GKSNetworkConditionsTimeout
Exception caught archiving connectionData, skeData Exception: %@
addDeliveryHandler
unsupportedKey
unsupportedWrapMode
disableEncryption
receiveFirstData
encryptedDataForAllParticipants
firstSendData
pairing-token
id-get-admin-token
RegisteredKeychainErrorDomain
RegisteredKeychainErrorCode
RegisteredDeserializationErrorDomain
RegisteredDeserializationErrorCode
UnregisteredKeychainErrorDomain
UnregisteredKeychainErrorCode
UnregisteredDeserializationErrorDomain
UnregisteredDeserializationErrorCode
GenerationErrorDomain
GenerationErrorCode
RollingErrorDomain
RollingErrorCode
IdentityToRegisterErrorDomain
IdentityToRegisterErrorCode
NGMMissingPrekey
NGMMissingIdentity
ShouldHaveUnregisteredIdentity
ShouldHaveRegisteredIdentity
HasRegisteredIdentity
HasUnregisteredIdentity
Responding to local device info query: %@
Responding to paired device info query: %@
Done with outgoing network availability check; networkOkForSession: %@
Session %@ has ended; NOT sending remote invitations!
Network availability check indicated that we should not attempt to send remote invitation(s)
%@: sendInvitationWithOptions could not find active Wifi connection, ending session with reason %d
Not sending invitation because of missing uniqueID
Failed to send invitation because failed to create unauthenticated public key
SecRandomCopyBytes failed %d (%s), bailing...
pulled out token %@ from destination
skipping destination %@, can't find token
session %@ invitation sent to tokens %@
We are the receiver, we can only DECLINE the invite, not CANCEL
Failed to create data from public public identity {error: %{public}@, publicIdentity: %{private}@}
Failed to create public identity from full identity {error: %{public}@, fullIdentity: %{private}@}
Failed to send IDSSession because failed to create unauthenticatedPublicIdentityData
v24@?0^v8Q16
Failed to create unauthenticated public key because of nil full identity {session: %{private}@}
Failed to get unauthenticated public identity from full identity {error: %{public}@, fullIdentity: %{private}@, session: %{private}@}
Failed to get data from unauthenticated public identity {error: %{public}@, publicIdentity: %{private}@, session: %{private}@}
Failed to create identity from data in invitation accept, bailing...
Unauthenticated invitation accept missing public key, bailing...
Accepted relay-session-id %@.
Accepted relay-session-id %@ waits for QR connection.
DaemonGroupContext
Group context controller starting up
Got Context
Failed to get Context
Incoming Daemon UpsertGroup
Got Deaemon Group Context %@, error %@
Updating Group
Creating New Group
New Group Created %@
Upsert group -- Failed {error: %{public}@, context: %{public}@}
Incoming Daemon FetchGroup {groupID: %{public}@}
Failed to fetch group by groupID {error: %{public}@, groupID: %{public}@}
Failed to get public data representation {error: %{public}@, group: %{public}@}
Failed to get group from public data representation -- missing context {error: %{public}@}
v20@?0@"NSArray"8B16
Failed to get participnats for cypher -- missing context {error: %{public}@}
Failed to validate cached group -- missing context {error: %{public}@}
v24@?0@"NSSet"8@"NSError"16
Notified of update to registration identities; invalidating daemon cache
Noting registration identity update {context: %@, error: %@}
Core Data Load Failed
Core Data Load sucdeeded
Engram is disabled
No output arrays specified for _splitDestinations %@
%@ splitting destinations %@
Splitting out local destinations - looking up device for dest %@
Resolved destination %@ from default paired device constant device %@.
(Class) Destination device uniqueID: %@
(Class) Default paired device uniqueID override %@   uniqueID %@
(Class) Device uniqueID override %@   uniqueID %@
(Class) Found matching device %@
(Class) Didn't find matching device for uniqueID %@
(Class) Resolved destination %@ from default paired device constant device %@.
token:
Splitting out local destinations - token %@ and uri %@
Malformed destination %@
__localURI__
Finding device matching URI %@ and token %@
Found deviceID %@ and btID %@ after first try
Did not find deviceID using account %@
Found deviceID %@
Splitting out local destinations - found device id %@
LiveDeliveryOverPush
Using push instead of Live Delivery while GL warms for device id %@
Device does not support live delivery, falling back to push {deviceID: %@, strippedURI: %@}
Not considering %@ for local. DeviceID is %@  (btID: %@)  and we're not already scanning/advertising. Service allows wiprox? %@
  Local IDS is disabled... not sending locally
Splitting out local destinations - no local device for URI %@, adding to remote
(Class) Dest became nil while trying to split destinations.
(Class) Split out local destinations (%@) remote destinations (%@)
OUTGOING-LOCAL_SEND:%@ SERVICE:%@
Sending message ID (%@) with data length %lu (resource: %@)  [Topic: %@  Local Device IDs: %@]
Ignoring request to fallback forcedLocal %@  localType %@ requireLocalWiFi %@ message %@
(Account) No account found for ID: %@
Fallback won't sent for %@ %@  alreadyFailed %@ alreadySending %@ alreadyComplete %@
Ignoring request to fallback for %@ %@ forcedLocal %@
Ignoring request to fallback for %@ %@ forcedLocal %@ due to budget restrictions.
Fallback send of %@ to %@ %@ completed with responseCode %ld error %@ lastCall %@ - current pending sends local %@ fallback %@
Overwriting previous local failure with remote success
Initiating fallback send for message %@ to %@ %@ from account %@
Attempt to send both DataToEncrypt and Data, dropping data
IDSUTunDeliveryController sendMessage %@ deviceID %@ succeeded? %@ response %ld topic: %@ - current pending sends local %@ fallback %@ account %@
Messaging
Sending via account that's type Local -- forcing local delivery.
self-token:
Couldn't resolve %@ to a valid dependent registration.
Could not construct a destination for %@
Service would like to use iMessage callerID for messages, Attempting to use %@
Service would like to use iMessage callerID for messages however they specified their own FromID, so we will attempt to use that
Sending Resource at path %@ with metadata %@
Compressed message data from: %u  to: %u
Use uncompressed message data (original: %u compressed: %u)
Compressed protobuf data from: %u  to: %u
Use uncompressed protobuf data (original: %u compressed: %u)
sendMessage <<Redacted>>  bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ wantsCertifiedDelivery %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
sendMessage of size %lu  bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ wantsCertifiedDelivery %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
Payload length %lu for topic %@ is too big to send.
Payload length %lu for topic %@ is too big to send as urgent
Attempt to send a file transfer over IDS to a remote destination over File Transfer API. Setting Command
Account %@ was asked to send to %@ with forced local delivery but there are unaddressible remote destinations %@ - failing message.
Account %@ was asked to send to %@ but we were unable to resolve any actual destinations - failing message.
Setting localLastCall to YES for this proxied outgoing message so that the completion does not rely on the local reflection
Local send completion block {responseCode: %ld, error: %@, lastCall: %@, combinedResponseCode: %ld, combinedError: %@, account: %@}
Attempted to send to remote destiantions on a local account, we are allowed to proxy, beginning proxy transaction, The params are %@
The new params we will send locally are are %@
Will Send Block
Completiom Send Block of message called, 
No account found for ID: %@
%@ Remote send completion block with responseCode %ld error %@ lastCall %@
%@ calling combined completion block responseCode %ld error %@ lastCall %@
Sending server message: %@   command: %@   account: %@
Finished sending server message request response for topic %@  [%@]
Failed sending server message request response for topic %@. Result code %ld. Error %@.
device-id
(Instance) Destination device uniqueID: %@
(Instance) Default paired device uniqueID override %@   uniqueID %@
(Instance) Device uniqueID override %@   uniqueID %@
(Instance) Found matching device %@
(Instance) Didn't find matching device for uniqueID %@
(Instance) Resolved destination %@ from default paired device constant device %@.
Found deviceID %@ using primary %@
(Instance) Dest became nil while trying to split destinations.
(Instance) Split out local destinations (%@) remote destinations (%@)
Ignoring request to fallback forcedLocal %@ requireLocalWiFi %@ message %@
Overwriting previous remote failure with local success
service-disable-%@
Server has disabled service: %@, dropping this on the floor
Failing message to: %@   from: %@    invalid caller ID
OUTGOING-REMOTE_SEND:%@ SERVICE:%@
Urgent priority messages should require a response for reliability
Messages that want a response should not be fireAndForget
Disabling IDS-level ack for this message
Compressed IDS bulked payload data from:%u  to:%u
Cannot use encryption with bulked payloads!
Local protobuf data is compresed, use uncompressed protobuf data for remote delivery
Compressed protobuf serialized data from: %u  to: %u
Setting IDS payload with size: %u
Using incompatible combination of wantsEncryptedPayload and dataToEncrypt!
Setting IDS payload to be encrypted.
Registration %@   URIs %@  callerCert %@
Sending message (c = %@) %@ to filteredDestinations %@ (originally %@) for topic %@
Sending message ID (%@) using push to %@ for topic %@
This send requires %@, a lack of %@, and is interested in %@ registration properties
All courier acks have completed, informing the next layer that the message has been sent sucessfully
v16@?0@"NSNumber"8
Attempt to send a file transfer over IDS to a remote destination over File Transfer API. Only MMCS transfer is avaible at this time, uploading file
decryption-key
file-size
attach-mmcs-dict
attach-meta
Upload Complete, Here is the information, %@
 => Send completed with resultCode %ld, send error %@, lastCall %@ for displayIDs %@  messageUUID %@
Added query update hash {hash: %@, fromURI: %@, service: %@}
IDS doesn't support sending protobuf or data to rapport destinations
Registration is not active on account %@, ignoring...
Service would like to use iMessage callerID for messages
Service would like to use iMessage callerID for messages but provided their own FromID, attempting to use that instead
sendMessage { c = %@   fID = %@   fT = %@   g = %@   t = %@   tID = %@ } bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ wantsCertifiedDelivery %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
decryptMessageData length: %lu   myURI %@   fromURI %@   token %@   encryptionType %ld   completionBlock %p
Invalid encryption type -- failing {encryptionType: %@}
Only 1 account exists on this service, We will need to proxy this and include the default paired device as a destination
Found Default paired device %@ 
Comparing %@  To %@ 
These ID's are the same, We will not be proxying this message
disable-live-delivery-%@
disable-live-delivery-all
kt_loggable_data
device_signature
key_index
Multiplex
(unknown: %i)
LocalDevice
IDSRealTimeEncryptionControllerErrorDomain
ids-rtencryption-mkm-expire-duration
ids-rtencryption-mkm-roll-duration
mkmExpirationDuration
ids-rtencryption-prekey-expire-duration
ids-rtencryption-previous-prekey-expire-duration
ids-rtencryption-mkm-broadcast-enabled
enableMKMOverQR
ids-rtencryption-mkm-over-qr-enabled-v2
enabled
ids-rtencryption-mkm-ack-timeout
ids-rtencryption-prekey-req-delay-duration
com.apple.ids.realtimeencryptioncontroller
forceKeyRecoveryLogic
v16@?0@"IDSGroupMasterKeyMaterialCache"8
requestKeyMaterialForGroup %@ sessionID %@ shouldTrackDistribution %@ shouldIncludeCachedPeerKeyMaterial %@ shouldGenerateMKM: %@ requireMKM: %@ requireSKM: %@ toSepcificMembers %@ isFirstSession: %@
IDSGroupEncryptionController.m
requestKeyMaterialForGroup standardParticipantsDestinations: %lu %@
lightweightParticipantsDestinations: %lu %@
standardDestinationSet: %lu %@
givenStandardDestinations: %lu %@
lightweightDestinationSet: %lu %@
givenLightweightDestinations: %lu %@
-[IDSGroupEncryptionController resetMKMCacheAfterTimeoutForGroup:]
-[IDSGroupEncryptionController resetMKMCacheAfterTimeoutForGroup:]_block_invoke
-[IDSGroupEncryptionController resetKeyMaterialCacheTimerIfNeeded:]
_encryptionSequenceNumbers
B24@?0@8@"NSDictionary"16
v32@?0@"NSString"8@"NSMutableArray"16^B24
forceUpdateSKM
sendKeyMaterialsToGroup: requireMKM: %@, requireSKM: %@, Sent MKI %@ to URI: (%@) (pushToken: %@)(protectedMKM size: %lu)(MKM size: %lu)(message dict: %@)
ids-multiway-ftmessage-enforce-remote-timeout
v32@?0@"NSData"8@"NSDictionary"16^B24
disableSendMKMPush
sendMessage: Sent messageID %@ to the destination %@ command %@ (message: %@)
v32@?0@"NSData"8@"IDSRealTimeEncryptionIdentity"16^B24
v32@?0@"NSData"8Q16^B24
q24@?0@"IDSEndpoint"8@"IDSEndpoint"16
fanout-groupID-key
rtallmkmuri
rtmkm
rtskm
rtmpwm
@"NSData"24@?0@"NSData"8^@16
_updateLightweightParticipants: groupID: %@, previous %@, new %@
_updateLightweightParticipants: groupID: %@, added diff %@, removed diff %@
_updateLightweightParticipants - Sending the stable key material to %@ of the group %@ (pending participants %@)
_updateStandardParticipants: groupID: %@, previous %@, new %@
_updateStandardParticipants: groupID: %@, added diff %@, removed diff %@
_updateStandardParticipants - Sending the key material to %@ of the group %@ (pending participants %@)
accessory-ids
admin-id
id-get-consent-token
consent-tokens
SELECT ROWID, data_protection_class, guid, alternate_guid FROM outgoing_messages_to_delete;
data_protection_class
DELETE FROM outgoing_messages_to_delete WHERE ROWID <= ?;
@16@?0@"NSArray"8
    %@  %@
IDS-DB-List
/Library/IdentityServices/files/
outgoing_messages_to_delete
Unexpected datatype. %@ should be of type %@, not %@
Add overflow, dataSize: %lu, kIDSQRAllocateKey_RecipientPushToken length: %lu
Add overflow, dataSize: %lu, kIDSQRAllocateKey_RecipientSessionToken length: %lu
Add overflow, dataSize: %lu, kIDSQRAllocateKey_RecipientURI length: %lu
Add overflow, dataSize: %lu, recipient's kIDSQRAllocateKey_RecipientPushToken length: %lu
Add overflow, dataSize: %lu, recipient's kIDSQRAllocateKey_RecipientSessionToken length: %lu
Add overflow, dataSize: %lu, recipient's kIDSQRAllocateKey_RecipientURI length: %lu
%@:requestID = %@, IDSSessionID = %@ relaySessionID = %@
testOptions changed to: %@
We have exceeded the maximum queue size, dropping message %@
LocalDeliveryQueue
Force dequeuing message %@ (should be manual: %@)
Couldn't construct a socketPairMessage for message %@ topic %@ command %@ - discarding
Starting outgoing network availability check for session %@
Overriding network availability check result! { session: %@, overrideBehavior: %ld }
Bypassing network availability check for incoming session from default paired device { session: %@ }
Network availability check: including WiFi availability
Network availability check: allowing WiFi hotspot
Network availability check: including cellular availability
Time since lights on: %f
Starting availability check with network timeout: %fs   wifi timeout: %fs   flags: %lu   options: %lu
QuickRelay is enabled, skip connection check.
Finished connectivity check with error %@
Failed creating local data, bailing...
SessionUseQRDirectly
inbox.appleid.apple.com
At least one destination is mako {destinationURI: %@, uniqueID: %{public}@, destinations: %@}
phone_enableQR
useBTDatagramPipe
QuickRelay is disabled for service: %@, session: %@.
 (U+1)
QuickRelay is enabled for service: %@%@, session: %@.
Created local unauthenticated full identity {fullIdentity: %{private}@}
Failed to create full identity for unauthenticated destination {destinations: %{private}@}
Failed to create session because failed to create unauthenticated public identity even though key was present
SessionInviteTimeout
Setting connection timeout to %f seconds
SessionConnectionTimeout
EndSessionTimeout
allocateOptions
Failed to create unauthenticated public identity from data becuase data is nil
Failed to create unauthenticated public identity from data {error: %{public}@, data: %{private}@}
B16@?0@"IDSValidationQueueItem"8
q24@?0@"IDSDAccount"8@"IDSDAccount"16
IDSDaemonMIGQueryInterface
Selecting account {forOutsideiCloudMessaging: %@, iCloudUsableForOutside: %@}
Selected local account
Selected account {registeredAccount: %@}
%@ _callStateChanged - no longer on a call, processing %lu pending queries!
%@ - on a call and wifi isn't usable, enqueuing query to avoid mRAB
%@ - too many enqueued queries, dropping this one
%@ - we're on a call but the network is usable, processing query immediately (Usable WiFi: %@)
%@ - we're not on a call or wifi is usable, processing query immediately (Usable WiFi: %@)
Accepting Incoming Grant Query Requests
IDSDaemonMIGQueryInterface auth port died: %@
IDSDaemonMIGQueryInterface: Could not create server with name: %@
service-cache-request
cached-id-status-query
id-status-query
set-id-status
remote-device-status-query
id-status-info-query
Unknown message from peer: (%d):(%@) %s
received unknown from peer(%d):(%@) %s
Could not create reply message for cache request
transactionID
*** Incoming cache query for (service: %@) (transactionID: %@)
Current cache: %d count
cache
Incoming cache query, but %d is not entitled to access the cache
Could not create reply message for cached id status query
respect-expiry
*** Incoming cached ID status query for (respectExpiry: %@)  (service: %@)  (transactionID: %@)  (destinations: %@)
No registered account for service %@, bailing...
No fromURI for account %@
Account: %@  fromURI: %@
Looking up cached value for %@ -> %@
Sending id status results %@
__HandleIDStatusQuery - enqueuing
is-springboard
force
bypass-limit
*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)  (force: %@) (bypass limit: %@)
Found service %@ for serviceName %@
No registered account for service %@
Using %@ from %@ to perform id query.
No URIs or cert after filtering destinations %@, bailing...
Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (error: %@) - replyMessage? %@
client-query-max-per-uri
client-query-max-time-range
Tried forcing, however this destination is not under the limit {destString: %@, rateLimiter: %@}
vc-disable-springboard-queries
No registered account for service after if %@, bailing...
*** Incoming ID status update, from un-entitled proess: %d
destination
*** Incoming ID status update: %d  (service: %@)  (destination: %@)
email:myself
__HandleRemoteDeviceQuery - enqueuing
disallow-query
*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)
__HandleIDInfoQuery - enqueuing
info-types
id-info-options
Failed to load persistent cache data from keychainWrapper {error: %{public}@, identifier: %{public}@, keychainWrapper: %{public}@}
Failed to save persistent cache data to keychainWrapper {error: %{public}@, identifier: %{public}@, data: %{private}@, keychainWrapper: %{public}@}
Tried to purge before available -- returning {self: %@}
/Library/IdentityServices/Persistence/
%@-aesKey
Failed To load key -- returning nil {error: %@, keyIdentifier: %@}
CCCrypt failed -- purging && returning nil {cryptResult: %d}
Failed To remove file {error: %@, path: %@}
Failed To Generate IV {ivResult: %d}
Failed to get a stored key, generating a new key {error: %@, result: %@}
Failed To Generate key {keyResult: %d}
Failed to save key -- returning {keySaveError: %@}
Failed to purge stored key {removeError: %@}
persister-migration-%@
<%@: %p; origin = %@; destination = %@>
GUID %@ Tokens for URI:
IDSMadridEndpointFilterComponent.m
GUID %@ Skipped Destinations:
{ URIs: %@, fromID: %@, service: %@, fromIdentity: %@, alwaysSkipSelf: %@, disallowQueryRefresh: %@, sendOnePerToken: %@, registrationProperties: %@, maxSize: %lu, wantsDeliveryStatus: %@, wantsCertifiedDelivery: %@, wantsFirewallDonation: %@, messageToSend: %@ }
Done with IDSIncomingMessageRecordAddMessageRecord, lets update Spotlight with this message record.
IDSIncomingMessageRecordAddMessageRecordDedup %@
SELECT ROWID, guid, topic, from_id, message_data, date, is_local, message_identifier FROM incoming_message WHERE message_identifier = ? 
Done with IDSIncomingMessageRecordAddMessageRecordDedup, lets update Spotlight with this message record.
IDSIncomingMessageRecord
IDSIncomingMessageRecordAddMessageRecordDedup deduped message with identifier %@. Will use storage guid %@
Setting IDSIncomingMessage property %d of %d
SELECT topic, count(ROWID) FROM incoming_message GROUP BY topic
SELECT ROWID, guid, topic, from_id, message_data, date, is_local, message_identifier FROM incoming_message WHERE is_local = ? ORDER BY ROWID DESC LIMIT ?
IDSIncomingMessageRecordDeleteMessageForGUID %@
SELECT ROWID, guid, topic, from_id, message_data, date, is_local, message_identifier FROM incoming_message WHERE guid = ? ORDER BY ROWID ASC;
IDSIncomingMessageRecordDeleteMessagesOlderThanThreshold %lld
DELETE FROM incoming_message WHERE date < ? LIMIT ?; 
void IDSIncomingMessageRecordBulkCopy(IDSIncomingMessageRecordRef, int64_t *, CFStringRef *, CFStringRef *, CFStringRef *, CFDataRef *, int64_t *, BOOL *, IDSDatabase *__strong)
from_id
is_local
message_identifier
incoming_message
<IDSIncomingMessageRecord %p [%p]>{}
_IDSIncomingMessageRecordCreate()
com.apple.private.imcore.spi.database-access
@16@?0@"IDSPhoneSubscription"8
personal-session-token-cache
personal-session-token-cache-v1
personal-session-token-cache-v2
personal-session-token-cache-v3
personal-session-token-cache-v4
session-tokens
push-tokens
dates-expire
dates-refresh
anonymized-sender-ids
session-token
session-token-expires-seconds
session-token-refresh-seconds
anonymized-sender-id
biz-trusted
kt-mismatch-account-flag
ktbility
peer-id-manager-cleanup-interval
vc-disaster-sender-self-tokens
ForceSelfTokens
***** Forcing self tokens mode *****
Failed to remove peerIDCache v0 {error: %{public}@}
Failed to remove peerIDCache v1 {error: %{public}@}
Failed to remove peerIDCache v2 {error: %{public}@}
Failed to remove peerIDCache v3 {error: %{public}@}
PeerIDManager
Migrated Peer ID persistent map {oldVersionNumber: %ld}
Query cache:
Key: <%{public}@,from:%{private}@,to:%{private}@>
        URI: %@
        Push token: %@
        Session token: %@
        Expire: %@
        Refresh: %@
        Public Key: %@
IDS-list
PeerLookup
   Using disaster mode token for URI: %@   token: %@
   Setting disaster mode token for URI: %@   token: %@
_disasterModeTokens
identities
sender-correlation-identifier
Found identity:
GameCenter data: AssociationID: %@, SharingState: %@, LastUpdatedDate: %@
              device pushToken: %@
                 session token: %@
                           uri: %@
 sender-correlation-identifier: %@
                    clientData: %@
                   device-name: %@
           private-device-data: %@
              kt-loggable-data: %@
                kt-account-key: %@
          device-key-signature: %@
      kt-mismatch-account-flag: %@
               kt-capable-flag: %@
                    showErrors: %@
   No known public key found for token: %@
   No known iMessage public key found for token, skipping this identity: %@
   No known push token found, ignoring
IDSIDRefreshExpiry
IDSIDHardExpiry
                    Overwriting soft TTL with: %ld seconds
                    Overwriting hard TTL with: %ld seconds
   TTL for Service: %@, Uri: %@, refresh: %@, expires: %@,
Returning disaster mode token for from URI: %@   token: %@
B16@?0@"IDSEndpoint"8
Found %@ value: %@  for peer token: %@
** No %@ value found for peer token: %@
URI %@ didn't have remote devices.
URI %@ didn't have a verification request id
** At least one session token expired for: %@, need to get new ones
B16@?0@"IDSPeerIDKey"8
v64@?0@"NSString"8@"NSArray"16@"NSArray"24@"NSDictionary"32@"NSString"40B48@"NSDictionary"52B60
Checking peer token: %@ for URI: %@   (Tokens: %@)
  => We don't have it - clearing that peer's map
Not flushing tokens, we're in debilitated mode
  => Good to go, we have it
Clearing peer and personal caches
Not forgetting tokens, we're in debilitated mode
Forgetting session tokens for URI: %@  from URI: %@  service: %@
Forgetting peer tokens for URI: %@  from URI: %@  service: %@
Forgetting peer tokens for service {service: %@, keys: %@}
Active query for service: %@  from: %@  peers: %@
  Active sessions for: %@, adding...
  Expired session for: %@, skipping...
Empty token for client data update block
Empty client data update block for token: %@
Empty token for removing client data update block
Empty token for purge client data block
Empty purge client data block for token: %@
Empty token for removing purge client data block
Missing context for adding endpoint query completion block -- ignoring request {block: %@, token: %@, queue: %@}
Missing context for removing endpoint query completion block -- ignoring request {token: %@}
Missing context for endpoint request -- returning nil {URIs: %@, serviceIdentifier: %@, localURI: %@, completion: %@, queue: %@}
account
suspendWait
connectionContext
%@/%@/%@
UTunController
%@ returning serviceConnectorServiceForAccountString=%@._account=%@;_service=%@;_name=%@
IDSGenericConnectionID[%@,%@,%@] @%p (%lu)
local[%@] remote[%@]
%u:::%u
-[IDSGenericConnection initWithConnectionID:protocol:keyMaterialLength:isCloudEnabled:]
IDSUTunController.m
0 == SecRandomCopyBytes(kSecRandomDefault, keyMaterialLength, _localKeyMaterial)
TCP info (%u) tcpi_snd_nxt:%08x tcpi_rcv_nxt:%08x (connection: in:%08x out:%08x)
<IDSGenericConnection: id[%@] ports[%@] localGUID[%@] remoteGUID[%@] clientID[%@] proto[%d] sd[%d,%d,%d] error[%@] comp_state[%d] localContext[%d,%p] remoteContext[%d,%p] ( %s%s%s%s%s%s%s%s%s%s%s) (CT:%0.6lf) tcp[%@], readHandler: %p>
opened 
handler-called 
control-sent 
control-received 
reset-sent 
reset-received 
sent-pkt 
received-pkt 
received-data 
canceled 
encryption-enabled 
( %s%s%s%s%s%s)
IDSUTunController
problem: %@ is going to use the main queue.
%@ called nw_service_connector_cancel_active_connection
%@ cannot cancel service connector for connection._serviceConnector=%@;_defaultPairedDeviceEndpoint=%@;serviceConnectionServiceString=%@
Invalidating IDSGenericConnection %@
Cleanup: %@
IDSUTun
collectAllUTunSocketStall
%p %@ Stall detected [%@].
IDSGenericConnection
IDS detected the single UTun socket stall. Please file a bug "Transport|all", and attach a sysdiagnose and the contents of /Library/Logs/CrashReporter from both devices.
2020-01-01
UTun Socket Stall
UTun Socket stall
%p %@ Stall detected [%@] - only netdiagnose
%p %@ Stall detected [%@] - netdiagnose & simulate crash
%p %@ Stall warning [%@]
%p Created the stall detector %@
initWithReadHandler: readHandler: %p, self: %p
 o              [%013.06lf] %18.09f%18.09f%18.09f%18.09f%18ld
 i              [%013.06lf] %18.09f%18.09f%18.09f%18.09f%18ld
 k              [%013.06lf] %18s%18s%18s%18.09f%18ld
com.apple.ids.utuntiminglogger
                [  timestamp  ]        total-time   processing-time  compression-only            kernel             bytes 
customTest
networkingLogDumpFlags
Test
Custom Test 5
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IDSAgent/IDSUTunController.m
2017-01-01
CustomTest6
Custom Test 6
Message to pop up for testing
kUTunConnectionDefaultUrgentOutgoingDetectorName
TestTrigger
ControlChannelAvoidMainQueue
v40@?0@"NSString"8@"<NSObject>"16^B24^B32
kUTunConnectionControlChannelOutgoingDetectorName
UTunDelivery-Default-Urgent
UTunDelivery-Default-Default
kUTunConnectionDefaultDefaultOutgoingDetectorName
 ...
UTun-oversized
%@: created mapping [%@ / %@] <=> [%@] (selfInstanceID[%s] %@)
Cloud
61314
61315
UTunController dup() failed
connect ready for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]
This connection %@ has already been invalidated. Calling _closeSockets.
%@: Connection (%@) was invalidated.
connection event %s for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]
serviceConnection (%p) not same as existing serviceConnection (%p) for genericConnection %@
%@: nw_connection %@ in bad state %s
%@: nw_connection %@ canceled
no error
connect ready for {socket:%d} (ports[%@]), socket error: %d (%s), connection[%@], device[%{public}@]
%@: socket failed (errno=%d)
%@: openSocketCompletionHandler dispatch time %0.6lf seconds
openSocket was never called on connection (%@) within %@ seconds of starting it.  Kill the connection!
openSocket was never called, closing connection
failed to create udp connection for %@
IPsecLink
v28@?0B8@12^B20
%p: control channel got message %@ device conn info:%@
v32@?0@"NSData"8B16B20B24B28
ids multiplex ipsec queue
enableSkywalkStat
kern.skywalk.ring_stat_enable
v24@?0@"NSObject<OS_nw_connection>"8^{__CFError=}16
disableControlChannelLoopFix
ids-control-channel
legacy control channel connect ready {socket:%d}, socket error: %d (%s), device[%{public}@]
resetting all connections
Decryption failure: %u
device %@: socket() failed: errno=%d: %s
UTunController internalOpenSocketWithDestination socket() failed
device %@: can't bind to [%@ @ scopeid=%d]: errno=%d: %s
device %@: can't connect to %@: errno=%d: %s
%@: UTCMType_SetupChannel cannot decode remoteConnectionGUID
%@: UTCMType_SetupChannel cannot decode account
%@: UTCMType_SetupChannel cannot decode service
%@: UTCMType_SetupChannel cannot decode name
%@: got control message: setup channel proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
stale connection
%@: SetupEncryptedChannel cannot decode remoteConnectionGUID
%@: SetupEncryptedChannel cannot decode account
%@: SetupEncryptedChannel cannot decode service
%@: SetupEncryptedChannel cannot decode name
%@: got control message: setup encrypted channel ssrc:%08x startSeq:%04x proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
%@: got control message: close channel localConnectionGUID[%@] remoteConnectionGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
remote close
%@: reset control channel didReceiveReestablishmentRequest NO
com.apple.private.alloy.fignero
com.apple.private.alloy.willow.proxy
UTunSocketProtocolOverride
completionHandlerQueue
completionHandler
replace existing connection
%@: setting up new connection [%@] for ID [%@] deviceInfo[%@]
%@: openSocketWithOptions unable to allocate new port - cannot continue
closeSocketWithOptions called
%@: openSocketWithOptions called for default paired device but no connectionInfo - cannot continue
%@: openSocketWithOptions unable to create new device - cannot continue
%@: scheduled openSocketWithOptions attempt canceled - closeSocket called
%@: openSocketWithOptions attempt canceled - possibly obliteration
Device %@: utun cleaning up device connection for clientID: %@
utun cleaning up device connection info: %@, clientID: %@, connection for service %@
Cleaning up all connections for service
-[IDSUTunController onTransportThread_PerServiceDataTransferredForDevice:services:]
%s: reporting service stats %@
-[IDSUTunController perServiceDataTransferredForDevice:services:]
-[IDSUTunController perServiceDataSentForDevice:services:]
-[IDSUTunController perServiceDataReceivedForDevice:services:]
<null>
UTunController changeInterfaceAvailability socket() failed
[throughput] Now cannot send to device %@
forRefresh
vc-disaster-sender-max-retries
vc-disaster-receiver-retry-interval
id-query-bad-signature-retry-enabled
id-query-bad-signature-retry-interval
id-query-bad-signature-retry-number
DebiliatedMode
***** Forcing debiliated mode *****
com.apple.madrid-lookup
Bag loaded notification! Is in backoff mode changed to %@
iMessage Debilitated Mode
iMessage server has %@ debilitated mode.
entered
left
No block supplied, but is this the first query: %@
First query, but not allowed to start: %@ %@
Adding queued query for URIs: %@   fromURI: %@  service: %@   forRefresh: %@ preventNew: %@ first query: %@
Removing queued query for URIs: %@   fromURI: %@  service: %@ URIs set found in completion block map: %@
URIs
FromIdentity
FromURI
FromService
ForSending
ForMessaging
ResultExpected
IsForced
  *** failing query for URIs: %@    cert: %@   fromURI: %@   fromService: %@
%@ enqueuing work %@. Current queue size is %lu
%@ uh-oh! Our queue is too long %lu. Dropping id query for URIs %@ fromService %@ fromURI %@
Asked to _dequeuePendingQueryIfPossible but we have no queued queries
Tried to _dequeuePendingQueryIfPossible but we currently have %lu in-flight queries
Starting ID query for IDs: %@    from URI: %@   Service: %@
       Identity: %@
               Skipping URI: %@   => already have tokens   (From: %@   Service: %@)
******** Found sentinel alias as from URI: %@, failing *********
******** Found invalid from URI: %@, failing *********
******** Found sentinel alias in query set: %@, failing *********
******** Found malformed email in query set: %@, failing *********
******** Found bad URI type in query set: %@ (%ld), failing *********
******** URI %@ is an emergency number, not performing query ********
******** Not querying URI %@ service is over budget, not performing query ********
The requestedURIsToQuery have already been covered by previous queries! -- Returning {success: %@, checked: %@, requested: %@}
com.apple.ids.query
Service wants to force HTTP queries, setting importance level lower to ensure it doesnt use APS
forceHTTPQueries
*** We are currently forcing HTTP queries due to a default; remove default to re-enable QORP!
The Query Service Is %@
IDSPeerIDLookup
overrideQueryResponseCode
queryCodeOverride
Response identities is not what we expected (%@ instead of NSDictionary) %@, error %@, resultCode %ld
Query completed with error %@. isNetworkError? %@ numNetworkFailures %d
Time is off, considering this an invalid result
Chat
Query time was: %f  (URIs: %@) (service: %@) (fromURI: %@)
uriToError
not 
 We are %@in backoff mode.
 We are %@in self session mode.
 **** We are in backoff mode! Using override for maxRetries %d
Looked up %@   success: %@   error: %@   will retry: %@   retries: %d  tried force cell: %@
               Success: %@
    Found identity for: %lu/%lu
  Tried Force Cellular: %@
Query Time: %f
            Query Time: %f
                  URIs: %@
    responseIdentities: %@
                 error: %@
           shouldRetry: %@   retries: %d   wasOffline: %@
            maxRetries: %d
         Timestamp off: %@
 Max Query Interval: %f
   Query Multiplier: %f
 Base Retry Interval: %f
      Retry Interval: %f
 **** We are in backoff mode! Overriding retry interval %f
 ** Will retry in: %f
 => Retrying query for URIs: %@
  All done query set for: %@   success: %@  allNetworkFailures: %@  entirelyOffline: %@
 **** Every failure was a network failure - forcing the bag to reload
negative-cache-ttl-seconds
  Sending off query for URIs: %@  from URI: %@   service: %@
 ** WiFi link quality is not good, requesting cellular preferred
 => Sending query for URIs: %@  from URI: %@   service: %@
Empty token for completion block
Empty completion block for token: %@
Empty token for removing completion block
%@,%@,%d
We have suffered %ld network failures. Forcing the server bag to reload.
MMCSUploadErrorKey
Failed to write wrapped data { error: %@, randomFileName: %@, data: %@ }
Failed uploading attachment file transfer (failed post-upload encryption)
Failed uploading attachment file transfer (failed upload)
Failed uploading attachment file transfer (could not generate file)
sync_topics_allowed_to_send_immediately
nonurgent_internet_send_interval
nonurgent_internet_send_interval_max_fuzz
*** Over budget, failing sendMessage on service: %@
com.apple.private.alloy.bulletinboard
com.apple.private.alloy.keychainsync
Forcing encryption off for message on %@
Updating listener on %@ willSendToDestinations %@ skipped %@ regPropToDest %@
Updating listener on %@ with responseCode %ld error %@  lastCall %@ - messageContext %@
Silently failing %@ messages due to watch switch
ServerTimeStamps before broadcast is  %f
ServerDate before broadcast is  %@
Found no valid broadcaster for outgoing message %@, cleaning up
account %@ sendMessage with data size: %d to: %@ identifier: %@ guid: %@
account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@
Exception caught forwarding to account: %@
Deleting sent outgoing message with guid %@ after exception
sendMessage - fromID (%@) does not match the account (%@). We are forced to fail this message send.
adhoc type 2
not local type
Daemon sending message with priority %{public}@ guid: %{public}@ identifier %{public}@ to: %@   from: %@   aliases: %@  service type: %{public}@   QoS=0x%x
Proxy outgoing message, setting current paired device as local destination
sendMessage - sending to tinker IDSDefaultPairedDevice. Failing message... { guid: %@, service: %@ }
Default paired watch is Tinker, but sending service is not Tinker aware. If you need to send locally to a Tinker watch, please contact IDS Engineering to have your service reconfigured
Sending message {defaultDestination: %@, messageType: %@, serviceIdentifier: %@}
Didn't find message store for data protection class %@ for %@
Data protection class %@ is unavailable for %@, failing outgoing message
com.apple.ids.trafficclass.nanoregistry.check
com.apple.ids.trafficclass.nanoregistry.configure
com.apple.ids.trafficclass.nanoregistry.update
Telling clients (via IDSResponsePersisted) not to replay this message if the daemon crashes because the %@ priority queue (dataProtectionClass: %@) is full
file persistence - failed to create unique file directory %@ error %@
No sandbox extension for received resource [%@]
file persistence - moved file %@ => %@
file persistence - failed to move file %@ => %@ params %@
This local Message is not for the current device, sending to the database to be taken care of later
A over C encryption has failed to encrypt with error %ld
Store outgoing message {guid: %@, canSendUrgent: %@, forceImmediateSend: %@, hasSpecialTrafficClass: %@}
Persisting message failed guid: %@  params: %@, failing with IDSResponseDataProtectionClassUnavailable
Sending a non-urgent sync message as we have a go ahead based on the server policy
account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@ - non-urgent message has been persisted.
Non-urgent message send %@ will be maintained by us from now on, alerting sender that it's been persisted and scheduled for sending.
message %@ on service %@
Notifying client IDSResponsePersisted(%d) for %@ id %@ alt %@
(Messaging2) No account found for ID: %@
v24@?0@"NSString"8B16B20
_sendLocalDeliveryMessagesForAccountUUID called with no accountUUID.
No space in local delivery queues for messages with priority %@ dataProtectionClass %@, bailing.
Performing query for account UUID %@ priority %@ class %@ Local Device ID %@ 
Got %lu query messages
account %@ _sendLocalDeliveryMessagesForAccountUUID with data size: %d to: %@ identifier: %@ guid: %@
account %@ _sendLocalDeliveryMessagesForAccountUUID: %@ to: %@ identifier: %@ guid: %@
Deleting sent outgoing non-urgent local message with guid %@? %@
Silently failing message with guid %@ due to it being a proxy 
Broadcasting failure of outgoing message %@ that never got processed through the database
Beginning cleanup of outgoing message database
Cleaned up %lu expired messages
IDS outgoing DB past threshold size %d MB, largest payload size account UUID: %@
Ending cleanup of outgoing message database
Runaway Client Detected, Purging messages for given client
max-ids-database-size
max-ids-database-client-enqueued
Beginning cleanup of outgoing message database for quickswitched messages
Ending cleanup of outgoing message database for quickswitched messages
Beginning cleanup of outgoing message database for messages older than 2 days past enqueue date
pendingMessageTimeout
Using Time Interval %f
Ending cleanup of %lu outgoing message database for older than 2 days past enqueue date
Registering for Checkpointing and Vacuum
com.apple.ids.dbvacuum
Told to Check In for Checkpointing and Vacuum with activity %@ 
Got called to checkpoint vacuum DB run state with non null activity %@
*** Over budget, failing sendMessage on account: %@
sendServerMessage updated with responseCode %ld error %@  lastCall %@ - messageContext %@
Daemon Attempting To Send message from account %@ to destinations %@
Attempting to send to more than 1 destination, if this is not possible, this will fail further down the daemon
IDSService
This service supports proxy delivery, which means a local account is allowed to send to a remote destination, allowing this message to send
This service supports sending messages to an inactive device, it is allowed to proceed
Looking at local destination %@
The paired device push token is %@
The paired device UUID is %@
Tried to send opportunistic data without entitlement {localObject: %@, uniqueID: %@}
Received data %@ to be cached and sent opportunistically on service %@
Tried to cancel opportunistic data without entitlement {localObject: %@, identifier: %@}
Cancel opportunistic send {identifier: %@, serviceName: %@}
%li Drop point detected.
Sender's IDSDaemon will drop message.
Daemon received signData request {requestID: %@, data: %@, algo: %ld, service: %@, options: %@}
Daemon dropping request %@ because it is missing required parameter
Daemon dropping request %@ because unentitled
Daemon dropping request %@ because it has a mismatched signing algorithm %ld and key type %ld
Finished signing request... broadcasting { request: %@, signedData: %@, error: %@ }
Daemon received verifySignedData request {requestID: %@, signedData: %@, data: %@, algo: %ld, service: %@, uri: %@, options: %@}
Daemon dropping request %@ because it is not a token URI
Daemon dropping request %@ because it has a mismatched verification algorithm %ld and key type %ld
Daemon dropping request %@ because tokenURI malformed
Daemon dropping request %@ because we are not registered
Finished signing verification request... broadcasting { request: %@, verified: %@, error: %@ }
Message has been dropped at point IDSMessageDropPointDaemon { messageID: %@, type: %@, accountID: %@, fromID: %@ }
(Messaging1) No account found for ID: %@
Client is attempting to send a message under first data protection lock, failing message
Sending Internet IDS Messages before first unlock is no longer supported. Please contact the IDS & Privacy teams to discuss further
Result of can send message with account was no
Destination device is not active for this account
Attempting to send to a local device using modern addressing, however we are not a local account, Swapping out destination for internet style addressing
Cloud destination could not be formed { destination: %@, token: %@, topic: %@, identities: %@ }
FamilyDrop_UnboundPhoneNumber
Sender phone number is not bound to account AppleID.
Switching to using local account since it has the alias corresponding to the fromID: %@
subServiceName %@ subServiceUUID %@
Couldn't find sub-account for service name %@
**** IDSDaemon: Urgent priority messaging requires entitlement for %@, DOWNGRADING MESSAGE PRIORITY TO DEFAULT - violator %@ ****
Client has specified a priority we do not recognize: %lu. Perpetrator: %@. Forcing default priority.
Added query update hash to certified delivery receipt {certifiedDeliveryReceipt: %p, hash: %@, fromURI: %@, service: %@}
sendCertifiedDeliveryReceipt - { certifiedDeliveryContext: %@ }
sendErrorMessage - finding Account
(Messaging) No account found for ID: %@
sendErrorMessage - got account %@
sendErrorMessage - using fromID %@ given aliases %@
account %@ sendErrorMessage: %@ to: %@ - guid %@
Sent outgoing error message with guid %@. Last call? %@
No certified delivery RTS found in payload with cdv { guid: %@, cdv: %ld }
start OTR test for %@
Completed forced OTR negotiation: token is %@, setupTime is %.6f, error==nil is %d
v32@?0@"NSString"8d16@"NSError"24
clean up existing QuickRelay connection for cloud messaging
start a new QuickRelay connection for cloud messaging
Account: %@ does not have alias URI: %@
Finished sending engram decryption failure {responseError: %@, token: %@}
** Failed sending engram decryption failure {responseError: %@, token: %@}
Alerted that local delivery controller now has space for %@ messages at class %@.
Alerted that local delivery controller now has space for %@ messages.
Resource availability changed, identifiers: %@ priorities %@
No space in local delivery queues for these messages.
AccountUUIDs with pending %@ messages %@
_processLocalMessagesWithAccountUUIDs with number of accountUUIDs %d priority %@ class %@
_processLocalMessagesWithAccountUUIDs accountUUIDs %@ priority %@ class %@
No pending non-urgent local messages to send, returning
Skipping invalid accountUUID %@ for account %@
non-urgent
Performing duet check for priority %@ for account %@ serviceIdentifier %@ duetIdentifiers %@ bypassDuet %@  logString: %@
Non-urgent internet send timer fired.
Scheduling a non-urgent internet send timer if needed. Existing timer fire date? %@
timeInterval for _nonUrgentInternetSendTimer as %f + %f = %f
Checking _hasNonUrgentInternetSendingBudget, fireDate is %@, %f
Last non-urgent internet send was too recent...waiting until next lock or non-urgent internet send to try again. Next fire date is %@.
md-low-priority-send-window-constraints
Non-urgent internet send probability windows are not specified in the server bag - returning 1.0
Non-urgent internet send probability windows is not of the correct type! Returning probability = 1.0. %@
Non-urgent internet send probability window is not of the correct type! %@
start-time
end-time
probability
We are currently in send window (%@, %@, %@). The time is currently %ld
Last non-urgent internet message attempt %ld is in this window - forcing probability to 0.0
Non-urgent internet send probability window is not fully defined: (%@, %@, %@)
Using non-urgent internet send probability %f for the current window.
Rolling die to attempt non-urgent internet send. Last check was %ld seconds ago. Probability = %f.
Probability is 0, cannot send.
Probability is >= 1, can send.
Rolled the die - can send? %@
_canSendNonUrgentInternetMessageForTopic 
Push is not connected - skipping send attempt.
We can't send further non-urgent internet messages in this window, skipping.
Server Bag policy for sending message immediately for topic - %@ does not exist. This message will proceed with default behavior
_processOutgoingNonUrgentInternetMessages
Lack budget to perform non-urgent internet send, skipping.
Processing stored %lu non-urgent internet outgoing messages
Not combining encrypted message - %@
Reduced outgoing non-urgent internet messages from %lu to %lu (omitted %lu).
sendNonUrgentInternetMessage - finding Account
Deleting non-urgent internet outgoing message with guid %@
Deleting non-urgent internet outgoing combinedMessage with guid %@
No account found for ID: %@ - can't send %@
sendNonUrgentInternetMessage - got account %@
Sending individual non-urgent internet message %@
Deleting sent non-urgent internet outgoing sole message with guid %@? %@. Error? %@ response code %ld
v16@?0@"IDSDOutgoingMessage"8
account %@ sendNonUrgentInternetMessage: bulked: %lu to: %@ identifier: %@ guid: %@
Deleting sent non-urgent internet message with guid %@? %@. Error? %@ response code %ld
ec-%@-%ld legacy-%@-%ld
ec-%@-%ld
legacy-%@-%ld
mailto:support@apple.com
mailto:info@apple.com
mailto:alert@apple.com
.apple.com
disable-message-checkpointing
MessageCheckpointing
At checkpoint %ld for guid %@. Wants checkpointing %@ disabled by bag key %@
topLevelPayload
Incoming message for topic: %@  but no service found
No account found for topic: %@   toURI: %@
Noting peer token {shouldNoteToken: %@, token: %@, service: %@, fromIdentifier: %@}
Decrypting message %@ of encryption type "%@"
NGMDebug
EC message came in, processing metric {ECSuccess: %@, legacySuccess: %@, command: %@}
Blowing away local peer cache for peer tokens for URI: %@
Retrying decryption for message %@ in %f seconds
** Had decryption error: %d { guid: %@, error: %@ }
Finished sending decryption error: %d, %@  to token: %@
** Failed sending decryption error: %d, %@ to token: %@
Incoming message attachment data: %p ID: %@  from: %@ fromMe: %@
EC overflow message came in, processing metric {ECSuccess: %@, legacySuccess: %@, command: %@}
Finished sending decryption error: %d %@ to token: %@
** Failed sending decryption error: %d %@ to token: %@
messageDictionary: %@
 => Settled on signature: %@
 => Missing fields from dictionary, returning error
Finished sending download (bad field) error: %d %@ to token: %@
** Failed sending download (bad field) error: %d %@ to token: %@
Attachment data download updated to %lld of %lld (%lld bps)
retrieved message data for incoming attachent message
Failed to grab message data for message ID: %@ from: %@ error %@
v44@?0@"NSString"8@"NSString"16B24@"NSError"28@"NSString"36
IDS-receive-%@
IncomingPacketAssertionShortTimer
INCOMING-LOCAL_DELIVERY:%@ SERVICE:%@ didWakeHint:%d
Broadcast: Processing incoming local message storage guid %@ real message guid %@ topic %@ command %@ didWakeHint %d
-[IDSDaemon(Messaging) _processIncomingLocalMessage:topic:command:deviceID:btUUID:context:storedGUID:priority:connectionType:didWakeHint:]
%s: could not find IDSServiceProperties for topic %@
IDSDeviceDidWakeHintTopic
IDSDeviceDidWakeHintGUID
IDS Local Message Received
Found sender correlation identifier { guid: %@, senderCorrelationIdentifier: %@, fromID: %@, token: %@ }
The Account Was %@
pair
The message that will be broadcast is %@
Proxy message original parameters {messageUUID: %@, destinations: %@, targettingAccount: %@}
Will Send Block After Send
Message Send After Transposing
Incoming proxy nice message for broadcast
Received local proxy message %@ is a duplicate. Ignoring.
PROXY BROADCASTING BLOCK %@ Guid %@ Topic %@ ToID %@ fromID %@
%s: Unknown incoming local message type received, %lu
Broadcast: incoming local message %@ requires client ack, broadcast ID %lld
Processing stored incoming local message %@ topic %@
IDSIncomingLocalMessageService
IDSIncomingLocalMessageDeviceID
IDSIncomingLocalMessageBTUUID
IDSIncomingLocalMessageCommand
IDSIncomingLocalMessagePayload
IDSIncomingLocalMessageContext
Using fromID for this message as %@
We failed to decrypt class A data on a class C service even when we had keys, Please collect logs and file a bug: Original Command: %@ From Device: %@ Service: %@ GUID: %@
AoverC
Class A key not avaialble for message %@ on topic %@
-[IDSDaemon(Messaging) _processStoredIncomingLocalMessages]
-[IDSDaemon(Messaging) _processStoredIncomingRemoteMessagesWithGUIDs:ignoringGUIDs:lastTimeInterval:]
%s: GUIDs count %lu
q24@?0@"IDSDIncomingMessage"8@"IDSDIncomingMessage"16
Processing %lu stored incoming remote messages {shouldRepeat %@}
 => Deferring message, service wants messages after first unlock only
Finished processing stored incoming messages
Processing stored %lu outgoing messages due to unpairing. Priority %@
Found stored outgoing message from account with guid %@ which no longer exists or is not local type.
Finished processing stored outgoing messages due to unpairing. Priority %@
Revision lock forced failure
Destination device has unpaired
Processing stored outgoing urgent messages LocalOnly: %@
Processing stored %lu outgoing urgent priority messages
Found stored outgoing message from account with guid %@ which no longer exists.
account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for with data size: %d to: %@ identifier: %@ guid: %@
account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for message: %@ to: %@ identifier: %@ guid: %@
Deleting sent outgoing urgent message with guid %@? %@
Old outgoing message %@ has no relevant account, cleaning up.
Finished processing stored outgoing messages
Handling Space Becoming available for urgent local messages
Processing Error
 => Empty message for message ID: %@
 => No error!?
 => OTR un-supported error for messageID: %@
 => Remote encryption credentials are invalid failure for messageID: %@
 => Remote identity encryption failure for messageID: %@
 => Remote Identity decryption failure for messageID: %@
 => Pair decryption failure for messageID: %@
 => Silient Pair decryption failure for messageID: %@
 => Pair encryption failure for messageID: %@
 => Remote attachment download failure for messageID: %@
IDSLogLevelLow
Noted decryption failure for engram group {group: %@, noteError: %@}
 => Engram stale decryption failure for messageID: %@
Broadcasting Group Share Message brodcast block
 => Engram fetch group decryption failure for messageID: %@
Received unknown/unhandled error type: %d
No session ID provided in the message for command code %@, discarding message...
Couldn't find session with ID %@ for command code %@, discarding message...
Received session invitation fromID %@, processing message %@
Received accept response fromID %@, processing message %@
Received decline response fromID %@, processing message %@
Received cancel response fromID %@, processing message %@
Received session message fromID %@, processing message %@
Received session end message fromID %@, processing message %@
Received session reinitiate message fromID %@, processing message %@
Received group session message fromID %@, processing message %@
We received an IDS Message that had an original command key, however its command was not FTCommandIDAttachmentMessage
_processIncomingRemoteMessage: %@ fromID: %@ forTopic: %@ storedGUID %@
DROPPING MADRID MESSAGE: %@ fromID: %@ forTopic: %@ storedGUID %@
Found no service for topic! %@
Message %@ is coming from an account that is not permited to send to this device. Sender Was: %@
Ignoring filtered list for own aliases. {Alias: %@; Account: %@;}
Told to filter message %@ from %@
Dropping message %@ from %@ because it is not on the cross-account allowlist and is coming from %@
Message specifies an expiration date %@ %@
Message %@ for topic %@ has expired! Dropping.
Received remote message %@ is a duplicate. Ignoring.
INCOMING-APS_DELIVERY:%@ SERVICE:%@
Received registration update message on tunnel service, ignoring...
Processing received message for which we couldn't find a relevant account, cleaning it up. { messageUUID: %@, storedGuid: %@, toIdentifier: %@, message: %@ }
Sent certified delivery receipt for filtered message { success: %ld, context: %@ }
Broadcasting the receipt of message %@  (%@)  (topic: %@)
Persisting failed for message %@  (%@)  (topic: %@)
IDSFamily_DropIncomingNonFamilyMessage
Performing validity check for message %@ sent to family service.
IDS Family member count is zero, trying to fetch family again. Will retry message after fetch completes. Sending incoming family message to storage.
IDS Family member count is zero, but out of fetches to fetch family again, this message %@ will likely fail.
Family Message %@ is coming from an account that is not in the family. Sender was: %@
Message %@ sent to family service passed validity requirements.
Device is NOT in our account registrations, It should be, Can we force a GDR?
Issuing forced GDR & sending message to storage
No forced GDR is possible
Unknown devices, but GDR attempt exchasuted
Message %@ is coming from an account that is firewalled from talking to this device. Sender Was: %@
Firewalled message %@ is coming for session.
Ending session for service %@ with groupID %@
Finished handling decryption {GUID: %@, URI: %@, SenderCorrelationIdentifier: %@, topLevelPayload: %@}
Dropping message! {guid: %{private}@, processError: %@, decryptionError %@
Overflow attachment (with original command %@) -- checking for original payload? %@
Pulled out original payload %@ or bulked payload %@ from attachment message, using original command.
Found rawBulkedData
For command %@ we have unpacked dictionaryPayload? %@ protobufPayload? %@ dataPayload? %@ bulkedPayloads? %@
Hit exception %@ trying to deserialize payloads
Broadcast will include message context %@
Found Topic %@  with all accounts %@ and Going to use account %@
Forwarding Message To Local Device to Process and Broadcast
About To Send Message Over Local Link
PROXY: Will Send Block
PROXY: Completion Block %ld, %@, %@
We received a message on a service that is local only, we have kicked off a forwarding of the message if necessary, we can delete this message from our database
Broadcasting HomeKit Message top
Broadcasting HomeKit Message brodcast block
Broadcasting HomeKit Report Message top
Broadcasting HomeKit Report Message brodcast block
Broadcasting Incoming Invitation Message top
Broadcasting Incoming Invitation Message block
Broadcasting Incoming Invitation Update Message top
Broadcasting Incoming Invitation Update Message block
Broadcasting GroupShare Message top
Received IDS remote error (120) for client that can not hanlde it %@ %@
Received IDS message payload is empty, not delivering %@ %@
Broadcasting for received message with guid %{public}@   broadcast topic: %{public}@  (topic: %{public}@)
No broadcaster found - deleting incoming message %@ on topic %@ with no listeners
No broadcast desired for command %@ topic %@ -- deleting message with guid %@
Processing bulked payload ...
Shouldn't broadcast for this command %@ for received message %@ with guid %@
v28@?0@"NSError"8@"NSDictionary"16B24
No Message Error, Processing Imediatly
v32@?0@"NSDictionary"8@"NSError"16@"IDSCertifiedDeliveryContext"24
  => Adding a delay of %f seconds to iCloud Pairing Messages
CloudPairingDelay
  => Processing immediately
Under first data protection lock. Sending message to storage. { guid: %@ }
Processing message for stored guid %@
Under first data protection lock and message already stored -- ignoring {GUID: %@, storedGuid: %@}
No broadcaster found - dropping update for incoming pending message %@ on topic %@ with no listeners
_decryptEngramMessage, group task {context: %@, error: %@}
_decryptEngramMessage, fetched group {group: %@, fetchError: %@
Told to decrypt: %@
AES128
decryptedData: %@ error: %@ decryptionError: %@
decryptedDict: %@
_decryptEngramMessage, no Group, bailing...
Received an IDS Payload for a Resource Tranfer over the Internet, looking at it
Payload is %@
DictIS %@
File Has Been Downloaded to %@
com.apple.identityservices.deliver
SocketPairMessage
Failed to issue sandbox extension for file [%@]
Message is from server storage %@
Storing item from server storage %@  (%@)
Persisting failed for message %@  (%@)
Storage timer fired, guids we need to process: %@
We're under first data protection lock. Holding messages and not sending to clients.
Scheduling a storage invalidation timer in: %f
Noting item from storage (%@)
Noting last item from storage (%@)
Hinting service to check transport log {service: %@, reason: connected}
Failed to hint service to check transport log {service: %@, reason: connected}
IDSPushHandler signaled isConnected %d
handler %@ didReceiveMessage: %@ fromID: %@ forTopic: %@ context: %p
Given message list from server. Dissecting into %ld individual messages
Submessage command is not recognized -- dropping. {subMessageCommand: %@, subMessage: %@}
Encryption failed with error %@
Incoming message %p on service %@ command %@
Received a message over Bonjour Delivery that we can't process! -- dropping {service: %{public}@, command: %{public}@, deviceID: %{private}@, message: %{private}@}
-[IDSDaemon(Messaging) _incomingMessageStorageDictionaryForPayload:topic:deviceID:btUUID:command:messageUUID:sequenceNumber:wantsAppAck:expectsPeerResponse:peerResponseIdentifier:]
%s: invalid topic for saving incoming message, ignoring!
-[IDSDaemon(Messaging) _shouldStoreBeforeFirstUnlockIncomingLocalMessage:from:forTopic:]
%s: invalid parameters for saving incoming message, ignoring!
Incoming A over C message but keys are not available, sending to storage
Stored incoming message under first lock for service %@ with guid %@. Success: %d
Incoming protobuf %p on service %@ command %@
Received local protobuf %@ is a duplicate. Ignoring.
Failed to decrypt AoverC message -- dropping {topic: %@, error: %@}
Incoming data %p on service %@ command %@
Received local data %@ is a duplicate. Ignoring.
Received local message %@ is a duplicate. Ignoring.
Incoming app level ack on service %@
Received cancel request for message %@ from localObject %p
Sending not started update to listener on %@ with responseCode %ld error %@ - 0/0 bytes
Sending update to listener on %@ with responseCode %ld error %@ - %@/%@ bytes
Broadcasting update to listener on %@ with responseCode %ld error %@ %@/%@ bytes
v40@?0@"IDSDeliveryContext"8@"NSNumber"16@"NSNumber"24B32B36
Cannot ack message locally without proper priority value (%d)
Please file a radar! Could not ack message with sequence number %u for peer %@ priority %ld
Received acknowledgement for outgoing message %@ alternateCallbackID %@ from localObject %p
Broadcast: Received acknowledgement for message stored as %{public}@ real guid %{public}@ from localObject %p processName %{public}@
Broadcast: message %@ got client ack, sending IDS ack to sender, broadcast ID %lld, sequence number %u 
Message on %@ with storage guid %@ experienced broadcast time %@
Received acknowledgement for message %@ from localObject %p
Request to send app-level ack for message %@ to %@ from localObject %p
Sent app-level ack with guid %@. Last call? %@
continuity
Local
The delivery path for message with guid %@ is %@, service: %@
Cloud Fallback
Only 1 account exists on this service, We will need to proxy this message to our local device for broadcast
Not Proxying this message %@ payload is currently a typing indicator
Only 1 account exists on this service, We will need to proxy this and include the default device as a destination for the message as well
file persistence - destination file exists %@
file persistence - failed to move and failed to copy file %@ => %@ (error %@)
file persistence - failed to remove original file %@ (error %@)
incoming-message-cleanup-threshold
Blocklist
filtering message for handle: %@ = %@
InitialContextQueue
ProfileValidationQueue
AuthenticationQueue
Region Validation failed
Authentication failure
FaceTimeLocalizable
Default context query failed
Region validation failed
v84@?0@"NSString"8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56@"NSNumber"64B72B76B80
v72@?0@"NSString"8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56@"NSNumber"64
<%@:%p> cert: %@
IDSPipelineParameter
IDSPipelineComponent.m
Subclasses must implement runIndividuallyWithInput
@"CUTUnsafePromise"16@?0@"<IDSPipelineParameter>"8
PairedDevice
apple
-[IDSPairedDeviceKeychainPersister _saveToKeychainWithDictionary:]
-[IDSPairedDeviceKeychainPersister _removeFromKeychain]
kt-reg-state-change
kt-sig-resp
IDSKTRegistrationDataManagerErrorDomain
v24@?0@"TransparencyIDSRegistrationResponse"8@"NSError"16
IDSDaemonPriorityQueueSync
IDSDaemonPriorityQueueDefault
IDSDaemonPriorityQueueUrgent
id-get-service-user-id
service-user-id
serviceUserIDDict
com.apple.identityservices.serviceDisablement
@"IDSDAccount"20@?0@"IDSServiceProperties"8i16
@16@?0@"<IDSUser>"8
@"IMPair"16@?0@"<IDSCTSIM>"8
@"IMPair"16@?0@"IDSPhoneUser"8
%@ Current existing accounts {existingIdentifierByService: %@}
%@ Current disabled accounts {disabledByService: %@}
IDSUserAccountSynchronizer.m
registration-date
next-registration-date
needs-renewal
invitation-version
ids-version
identity-version
cdma
identity-rsa-pair-signature
environment
temporary-phone-email
region-base-phone-number
region-server-context
dependant-registrations
self-handle
dependant-registrations-ttl
dependant-registrations-response-code
dependant-registrations-auth-retries
kt-uris
ids-user-id
ids-registration-cert
ids-authentication-cert
user-unique-identifier
context-info
service-identifier
should-rereg-on-manatee
did-reg-with-kt-account-key
bindings
updated
removed
Registration info (%p): [Status: %@] [Type: %@] [Device Name: %@] [Service Type: %@] [Env: %@] [Main ID: %@] [AppleID: %@] [UserID: %@] [C2K: %@] [Push Token: %@] [Region ID: %@] [Base Number: %@] [URIs: %@] [Candidates: %@] [Auth Cert: %p] [Reg Cert: %p] [Profile ID: %@] [Auth User ID: %@] [User Unique ID: %@] [Account Key: %@]
Registration info (%p): [Status: %@] [Type: %@] [Device Name: %@] [Service Type: %@] [Env: %@] [Main ID: %@] [AppleID: %@] [UserID: %@] [C2K: %@] [Push Token: %@] [Region ID: %@] [Base Number: %@] [URIs: %@] [Candidates: %@] [Auth Cert: %p] [Reg Cert: %p] [Profile ID: %@] [Auth User ID: %@] [Registration Date: %@] [Heartbeat Date: %@] [User Unique ID: %@] [Account Key: %@]
IDSDeviceConnectionAWDMetrics
Can't find AWD metrics for %@
Final Report - %@
There is no metric dictionary for %@, %@
_kIDSDServiceControllerServicesChangedNotification
_kIDSDServiceControllerServicesRemovedNotification
SubServicesMap
Version
com.apple.ids.subservices
com.apple.private.alloy.keysharing
com.apple.private.alloy.harmony.pushprovisioning
B8@?0
-[IDSPairedDeviceRepository _criticalPerformPairedDeviceDeactivation]
-[IDSPairedDeviceRepository _criticalPerformPairedDeviceActivationWithCBUUID:]
HASH:%@
id-group-get-key
IDSTapToRadarPushPayload.m
pushPayload
id-report-unknown
message-id
sender-uri
time-of-message
message-is-blackholed
message-is-junked
IDSGroupServerKeyElectionStoreErrorDomain
IDSMessageStore-%@
IDSDMessageStore
ids.db
ids-%@.db
The current IDS database is v%d.  The current schema version is v%d
Beginning migration.  The IDS db is currently at v%d, upgrading to v%d.
REINDEX
Reindexing the DB worked.
Reindexing the DB failed with SQLite result: %d
Database vacuum success
IDSDMessageStore vacuum failed!
IDSDMessageStore final integrity check failed!
Final integrity check success
Post-reindex integrity check success
Initial integrity check success
Adding fields to support iMessage on IDS
Unable to drop legacy table
Successfully dropped legacy table
DROP TABLE outgoing_message
Adding field to support sending iMessage from aliases
Adding support for high priority messages
Flushing stale messages to enable database
DROP TABLE incoming_message
Flushing potentially old stale messages
Updating outgoing_message to have all needed fields
Updating outgoing_message to have is_sent column
Updating outgoing_message to have new send types and options.
Flushing stale outgoing_messages.
Adding indexes on message guid
Unable to add outgoing_message guid index
Successfully added outgoing_message guid index
CREATE INDEX outgoing_message_guid_idx ON outgoing_message(guid);
Unable to add incoming_message guid index
Successfully added incoming_message guid index
CREATE INDEX incoming_message_guid_idx ON incoming_message(guid);
Adding expiration date support
Adding app level ack
Adding compress option
Adding nonWaking, fireAndForget, queueOneIdentifier option
Outgoing message priority changes
AlternateGUID support
isLocal added to incoming message record
Duet columns, payload size added to outgoing message record
CREATE INDEX IF NOT EXISTS outgoing_message_guid_idx ON outgoing_message(guid);
CREATE INDEX IF NOT EXISTS incoming_message_guid_idx ON incoming_message(guid);
Add enforce_remote_timeout column to outgoing_message
INTEGER DEFAULT 0
Create table outgoing_messages_to_delete
Adding indexes on account_guid, priority and is_send
Unable to add outgoing_message similar message query index
Successfully added outgoing_message similar message query index
CREATE INDEX outgoing_message_similarity_idx ON outgoing_message(account_guid, priority, is_sent);
Add main_account_guid column to outgoing_message
TEXT
Add pending_delete column to outgoing_message
Add message_type column to outgoing_message
Setting a reasonable timeout on messages which are missing them
UPDATE outgoing_message SET expiration_date = %lld WHERE expiration_date = 0;
Unable to set expiration date on messages
Successfully added expiration date on messages
Add skip_self column to outgoing_message
Add nonCloudWaking column to outgoing_message
Add wants progress column to outgoing_message
Add ignoreMaxRetryCount column to outgoing_message
Add wantsCertifiedDelivery column to outgoing_message
Add originalTimestamp column to outgoing_message
Adding message_identifier column to incoming_message
Unable to add incoming_message message_identifier index
Successfully added incoming_message message_identifier index
CREATE INDEX incoming_message_message_identifier_idx ON incoming_message(message_identifier);
Dropping old bypass_duet messages
Unable to drop bypass_duet messages
Successfully dropped bypass_duet messages
DELETE FROM outgoing_message where bypass_duet = 1;
Add push_priority column to outgoing_message
Add send_mode column to outgoing_message
Add wants_firewall_donation column to outgoing_message
Downgrading to a build with a different IDS database version is unsupported :(
vacuum
IDS DB migration took %f seconds.
%@ SQLiteResult: %d SQLite Message: %s
No migration block to execute!
Cannot perform _IDSDatabaseAddColumnOfTypeToTable(%@, %@, %@)
SELECT %@ FROM %@
The %@ column already exists on %@, skipping this step.
IDS DB migration failed to add column %@ to the %@ table.
Added %@ column to the %@ table.
ALTER TABLE %@ ADD COLUMN %@ %@;
IDSRTEncryptionController
%p: Returned the random publicKeyData %@ for the simulator
%p: This IDSRealTimeEncryptionIdentity is expired. (now: %@, expirationDate: %@)
We were unable to update the cache. Possibly because the device doesn't exist. Look at the logs to know for sure. {uuid: %@}
(Daemon) dropAllMessagesWithoutAnyAllowedClassifierForDevice (device ID: %@)
q24@?0@"NSUUID"8@"NSUUID"16
PairDirectlyOverIPsec
(Daemon) Told to add a paired device %@
(Daemon) Reset communication with currently active paired device before adding a new paired device: %@
(Daemon) Told to add a paired device but there is no need to reset communication with the currently active paired device. {activeCBUUID: %{private}@, cbuuidString: %{private}@}
@16@?0@"IDSProtoKeyTransparencyTrustedDevice"8
id-initialize-validation
session-info-request
absinthe-hello
Initialize Validation Response: %@
session-info
absinthe-response
@"IMTimer"24@?0@8:16
com.apple.identityservicesd-backup-check
id-get-handles
Handle query response: %@
IDS Firewall System Starting Up
Performing initial database housekeeping
  => Setting cache size
  => Invalidating caches
Is firewall enabled %@
Should firewall drop for all categories %@
Entries for category %u: %@
IDS-Firewall-DB
Closing database.
Scheduling Cleanup Timer
Scheduling timer called
ids-firewall-record-expiration-time-in-seconds
Removing entries older than %@
SimpleUInt32ToObjectTable_SetObjectForKey
SimpleUInt32ToObjectTable_ObjectForKey_NoRetain
SimpleUInt32ToObjectTable_RemoveObjectForKey
SimpleNSStringToObjectTable_SetObjectForKey
SimpleNSStringToObjectTable_ObjectForKey_NoRetain
SimpleNSStringToObjectTable_RemoveObjectForKey
IDSPhoneUserRegistryErrorDomain
<%@: %p phoneUser: %@ authenticationCertificate: %@>
This device is not currently authenticated for a phone user
This device does not support phone number authentication
public_identity
Gelato
unregistered-message-protection-key
message-protection-key
previous-message-protection-key
container-unregistered-message-protection-key
container-message-protection-key
container-previous-message-protection-key
container-application-key-is-registered
container-unregistered-ktsignaturedata
container-registered-ktsignaturedata
message-protection-class-a-key
message-protection-class-c-key
message-protection-class-d-key
NGMVersionOverride
+[IDSRegistrationKeyManagerIdentityDataSource storageItemNameForLegacyIdentityIdentifier:]
IDSRegistrationKeyManagerIdentityDataSource.m
+[IDSRegistrationKeyManagerIdentityDataSource legacyStorageItemNameForContainerIdentityIdentifier:]
+[IDSRegistrationKeyManagerIdentityDataSource containerStorageItemNameForContainerIdentityIdentifier:]
+[IDSRegistrationKeyManagerIdentityDataSource containerStorageItemNameForContainerIdentityIdentifier:applicationKeyIndex:]
%@-%u
IDSNWSocketPairConnectionProtocol
i16@?0@"NSObject<OS_nw_framer>"8
Q16@?0@"NSObject<OS_nw_framer>"8
Q28@?0*8Q16B24
IDSNWSocketPairConnection
IDSNWSocketPairConnectionProtocol returning -- no header.
IDSNWSocketPairConnectionProtocol read message_length:%u (0x%x), type:%u (0x%x)
IDSNWSocketPairConnectionProtocol returning partial data.
v36@?0@"NSObject<OS_nw_framer>"8@"NSObject<OS_nw_protocol_metadata>"16Q24B32
%@ Succesful nw_connection_create_with_connected_socket_and_parameters
%@ _nwConnection is nil.
%@ Connection: nw_path_t is NULL, dissabling cross-layer logging.
%@ Connection from listener is ready.
%@ Listening connection closed.
%@ Listening connection state: %d
%@ Ending session
%@ Read %u bytes
%@ nw_connection_receive_message Error %@, isFinal %@
Scheduling next _receiveFromNWConnection for %@
v36@?0@"NSObject<OS_dispatch_data>"8@"NSObject<OS_nw_content_context>"16B24@"NSObject<OS_nw_error>"28
%@ nw_connection_receive_message of type %u
Sending message to uppper layers. 
%@ Sending message to uppper layers.
%@ Wrote %u bytes.
%@ Error %@! Could not write data to nw_connection.
v16@?0@"NSObject<OS_nw_error>"8
<%@: %p preKey=%@>
reg-hash-time-since-gdr
Registered device missing public key! -- aborting hash {device: %@}
Local device missing public key! -- aborting hash
Received unsupported query update hash {version: %d, hash: %@}
Query update hash does not match, we should clear {remoteHash: %@, localHash: %@}
Query update hashes match -- doing nothing {version: %d, remoteHash: %@, localHash: %@}
 => Purging Peer ID Cache for: %@   caller URI: %@   service: %@
Received too many registration updates, ignoring {remoteURI: %@, service: %@, localURI: %@, guid: %@}
q24@?0@"NSData"8@"NSData"16
start-count
DevicePolicy
started policy for %@, devices: %@
checking blackout for %@
repeated fairplay failure blackout lifted (elapse %0.6lf > window %0.1d)
blackout due to repeated fairplay failure (blackout ending in %0.6lf seconds)
iMessageSpam
Told to report iMessage spam with localObject %@
Process not entitled to report iMessage spam
Couldn't find iMessage account with alias %@
Told to report iMessage unknown sender with localObject %@
Process not entitled to report iMessage unknown sender
Told to check unknown sender with localObject %@
Process not entitled to check unknown sender
v36@?0q8B16d20@"NSError"28
<%@:%p user: %@, credential: %@>
<%@:%p user: %@>
v16@?0@"<IDSTemporaryPhoneUserTransaction>"8
carrier-nonce
imei
id-get-esat
esim-auth-token
BTLink
retrieved os channel %p from pipe %@
CFWriteStreamCopyProperty(kCFStreamPropertySocketNativeHandle) failed with pipe %@
retrieved native socket %d from pipe %@
fcntl failed with socket %d
hostState
/Library/Caches/com.apple.xbs/Sources/IdentityServices_Sim/IDSAgent/IDSBTLink.m
releasing pipe %@
ReportDataCorruption
/bin/cp /dev/uart.log /tmp/uart-%.06f.log
IDSBTLink
Downstream
Upstream
Start collecting logs due to %@ Magnet corruption
Downstream data corruption
Upstream data corruption
DontSubmitDataCorruptionToAggd
DontSubmitDataCorruptionToAggd is set. Not submitting to aggd
submitting aggd metric - MagnetDataCorruption
com.apple.IDS.MagnetDataCorruption
submitting IDSMagnetCorruptionDetailedEvent: correctFramesSinceLastCorruption = %lld, correctRawBytesSinceLastCorruption = %lld, discardedRawBytes = %lld, magnetDataCorruptionRecoveryTimeInMs = %lld ms
Remote device detected data corruption
-[IDSBTLink flushBuffer:]
IDSBTLink.m
direction == IDSLinkDirectionTransmit || direction == IDSLinkDirectionReceive
nil peer
asleep
awake
BT reports %@ as (%@) interpreting as awake? %@.
Link manager read %d/%d bytes during resync %c
Link manager recv(resync) %zd errno %d - closing connection
Magnet corruption! received %dB with %dB buffer. Resync incoming stream done! content = %@
DontSubmitDataCorruptionToAggd is set. Not submitting MagnetDataCorruptionRecoveryTimeInMs = %lld ms to aggd
submitting aggd metric - MagnetDataCorruptionRecoveryTimeInMs = %lld ms
com.apple.IDS.MagnetDataCorruptionRecoveryTimeInMs
received %dB with %dB buffer. Continue resyncing incoming stream. content = %@
Link manager recv %zd errno %d - closing connection
Magnet corruption! Bad packet length found. Initiate resync incoming stream! (last recv %d/%u) data(%d) = %{public}@
Magnet corruption! Link manager received %d byte packet (last recv %d/%u) with bad checksum (old:%04x new %04x). Initiate resync incoming stream! data(%d) %@
Magnet corruption! This packet(%dB) (last recv %d/%u) did not decode! data(%d) %@
Link manager received zero byte packet (total recv:%d)
ready but already suspended
Ready to write into pipe %@
Link manager send2 errno %d
%c Magnet    (%s) Tx %6llu pkts %@B %@bps     %6llu pkts %@B
                        Rx %6llu pkts %@B %@bps     %6llu pkts %@B
BTLink is now suspended
BTLink is now resumed
Custom Test 9 - Packet injected into the BT Layer.
Full response info for GUID %@ Finished MML %@ with result code: %ld error: %@ result dictionary: %@ message body: %@
IDSMadridAckTracker.m
Full response info for GUID %@ Finished Fanout %@ with result code: %ld error: %@ result dictionary: %@ message body: %@
IDSKeyTransparencyVerifierErrorDomain
kt-disabled
kt-xpc-activity-enabled
kt-xpc-activity-interval
kt-xpc-activity-max-verifications
kt-analytics-enabled
kt-sf-analytics-enabled
kt-rtc-analytics-enabled
kt-self-verify-rate
kt-cloud-kit-enabled
kt-account-key-enabled
SelfHealLimitKey
<%@: %p eligibleServiceIdentifiers.count: %lu, serviceSignatures.count: %lu>
<%@: %p serviceIdentifier: %@, accountKey: %@, URI: %@>
<%@: %p transparencyStatus: %@, transparencyBlob.length: %lu>
<%@: %p pushToken: %@, loggableData.length: %lu, signedData.length:%lu, ktCapable: %@, productName: %@, buildVersion: %@, transparencyVersion: %@>
KTForTopLevelServices
KTForMultiplex1
KTForFaceTime
IDS-KT-List
Key transparency is not enabled
Failed to determine eligibility for the key transparency trust circle
B16@?0@"IDSProtoKeyTransparencyTrustedService"8
The local device is not eligible for key transparency due to account status
Failed to nuke key transparency state
Key Transparency is not enabled.
v24@?0@"KTVerifierResult"8@"NSError"16
@16@?0@"KTLoggableData"8
Peer verification requires non-nil URI and ticket
Invalid index provided (unrecognized service identifier)
v44@?0@"NSString"8Q16B24@"NSArray"28@"NSError"36
Transparency verification resulted in a failure
Transparency verification resulted in a failure which was ignored
Transparency results are currently pending
Received unknown verification result
Mismatched Account
Invalid Service for Opt in
No kt applications provided for opt in status update.
v16@?0@"IDSKTOptInResult"8
No account registered for service.
Failed to get query results.
Key transparency trust circle is not enabled
Provided services are not eligible for the key transparency trust circle
IDSKTAccountKeyFetch
IDSKTAccountKeyFetchService
IDSKTAccountKeyFetchSuccess
IDSKTAccountKeyFetchIsMismatchAccount
akFetchErr
akUnderlyingErr
akUnderlyingErrorDomain
akRegRes
akFetchDID
akFetchPT
KVS sync error unknown.
B16@?0@"IDSKeyTransparencyEntry"8
B16@?0@"IDSProtoKeyTransparencyTrustedDevice"8
im://
mp1://
ftm://
IDSKeyTransparencyVerifier
Key Transparency
Pending
Failure Ignored
id-get-dependent-registrations
Get Dependent Registrations response: %@
NetworkAvailabilityCheckOverrideValue
FixedInterface
FixedInterfaceDestination
DisablePisco
EnableAbsintheV4Option
DisableBAACertOption
EnableDeviceScoring
EnableDebugPiscoLogging
AlwaysPairAsTinker
ForcefulECC
ForcefulLegacy
DisableKeyTransparency
DisableKeyTransparencyCloudKitCircle
DisableKeyTransparencyAccountKeyCircle
EnableKeyTransparencyAggressiveVerificationSchedule
EnableKeyTransparencyUI
IDSKeyTransparencyFirstGossipChanceDefault
IDSKeyTransparencySubsequentGossipChanceDefault
IDSKTAccountKeyFetchMetricDeviceIDDefault
IDSKTAccountKeyFetchMetricDeviceIDExpirationDefault
ForceFlushOnDeliveryReceipt
EveryUnlockAsFirstUnlock
ForceOnePerFanout
DropMadridMessages
BypassHomeNumberCarrierCheck
HomeNumberSecondsUntilExpiration
CoalesceDelayOverride
KeyTransparencyCKContainerExpiryOverride
BypassRegistrationControlStatusCheck
global-bag-config-%@-%@
global-bag-file-%@-%@
global-bag-filetype-%@-%@
FirewallOn
LDMGlobalEnabled
FirewallBlocksAll
FirewallAllowList-
Already have cached invalid results {uri: %@, fromURI: %@, strippedURI: %@, service: %@}
sigs
INSERT INTO firewall_record (handle, merge_id, service, category, is_donated, last_seen_date, last_modified_date) VALUES (?, ?, ?, ?, ?, ?, ?);
UPDATE firewall_record SET merge_id = ?, last_seen_date = ?, last_modified_date = ? WHERE handle = ? AND category = ? AND is_donated = ?;
DELETE FROM firewall_record WHERE handle 
AND category = ?
DELETE FROM firewall_record WHERE merge_id 
AND category = ? AND is_donated = ?;
DELETE FROM firewall_record WHERE category = ? AND is_donated = ?
DELETE FROM firewall_record WHERE category = ?
SELECT COUNT(1) FROM firewall_record WHERE handle = ? AND category = ? AND is_donated = ?LIMIT 1;
SELECT COUNT(1) FROM firewall_record WHERE handle = ? AND category = ?LIMIT 1;
SELECT COUNT(1) FROM firewall_record WHERE merge_id = ? AND category = ?LIMIT 1;
SELECT DISTINCT handle, last_seen_date, is_donated, merge_id FROM firewall_record WHERE category = ?;
SELECT DISTINCT handle, last_seen_date, is_donated, merge_id FROM firewall_record WHERE category = ? AND is_donated = 1;
DELETE from firewall_record WHERE last_seen_date < ? AND is_donated = 0; 
setupNewSession configuration: %@
cleanup session %@ local object %@
Could not find session with uniqueID %@ to clean up, ignoring...
cleanup session instance %@ local object %@
Could not find session with instanceID %@ to clean up, ignoring...
sendInvitation %@
%@ - Could not find session with uniqueID %@ to send invitation, ignoring...
sendInvitation %@ with data %@ declineOnError %@
%@ - Could not find session with uniqueID %@ to send invitation with data to, ignoring...
acceptInvitation %@
%@ - Could not find session with uniqueID %@ to accept invitation, ignoring...
acceptInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to accept invitation with data with, ignoring...
cancelInvitation %@
%@ - Could not find session with uniqueID %@ to cancel invitation, ignoring...
cancelInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to cancel invitation with data with, ignoring...
cancelInvitation %@ with remote ended reason override %u
%@ - Could not find session with uniqueID %@ to cancel invitation with remote ended reason override with, ignoring...
declineInvitation %@
%@ - Could not find session with uniqueID %@ to decline invitation, ignoring...
declineInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to decline invitation with data with, ignoring...
reconnectSessionWithUniqueID %@
%@ - Could not find session with uniqueID %@ to reconnect session, ignoring...
endSession %@
%@ - Could not find session with uniqueID %@ to end session, ignoring...
endSessionWithData %@ (data length %lu)
%@ - Could not find session with uniqueID %@ to end session with data, ignoring...
sendSessionMessage %@ to session %@ with context %@
%@ - Could not find session with uniqueID %@ to send message to, ignoring...
setAudioEnabled:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set audio enabled, ignoring...
setMuted:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set muted, ignoring...
setPreferences:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set preferences, ignoring...
setRequiredCapabilities:requiredCapabilities:forSessionWithUniqueID %@ %@ %@
setInviteTimeout:forSessionWithUniqueID %@ %ld
%@ - Could not find session with uniqueID %@ to set invite timeout, ignoring...
acknowledge sessionID: %@ clientID: %@
%@ - Could not find session with uniqueID %@ to acknowledge session ID, ignoring...
sendAllocationRequest %@
%@ - Operation supported on internal install only
%@ - Could not find session with uniqueID %@ to send allocation request, ignoring...
updateMembers %@, for Group %@, context %@, capabilities %@, triggered locally %@, lightweightStatusDict count:%lu
%@ - Could not find session with uniqueID %@ to update members, ignoring...
manageDesignatedMembers %@, for Group %@, type: %u
removeParticipantIDs %@, for Group %@
%@ - Could not find session with uniqueID %@ to removeParticipantIDs, ignoring...
updateParticipantData %@, for Group %@, context %@
updateParticipantType %u, for Group %@, context %@
%@ - Could not find session with uniqueID %@ to update participantType, ignoring...
joinGroupSession %@, options: %@
%@ - Could not find session with uniqueID %@ to join group session, ignoring...
leaveGroupSession %@, participantInfo: %@ options: %@
%@ - Could not find session with uniqueID %@ to leave group session, ignoring...
requestActiveParticipants for group session: %@
%@ - Could not find session with uniqueID %@ for requestActiveParticipants, ignoring...
requestURIsForParticipantIDs for group session: %@
registerPluginForGroup %@, options: %@
%@ - Could not find session with uniqueID %@ to register plugin, ignoring...
unregisterPluginForGroup %@, options: %@
%@ - Could not find session with uniqueID %@ to unregister plugin, ignoring...
requestEncryptionKeyForGroup %@, for %lu participants %@
%@ - Could not find session with uniqueID %@ to request encryption keys, ignoring...
createAliasForParticipantID %llu salt %@
getParticipantIDForAlias %llu salt %@
REQUIRED_ATTRIBUTE - Warning, missing %@ to add to %s
Report Unknown Sender response: %@
setting up the realtime encryption controller for the unique ID: %@
%@ - Could not initialize the realtime encryption controller for the unique ID: %@, ignoring...
sending the device prekey for the unique ID: %@ to group: %@
%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the prekey to group %@...
%@ - Could not find the session for the group: %@
getting public keys for the real-time encryption...
%@ - Could not get the realtime encryption controller
sending the master key material for the unique ID: %@ to group: %@
%@ - Could not get the realtime encryption controller for the unique ID: %@, failing to send the master key material to group: %@
sending the master key material recovery request for the unique ID: %@ to group: %@
Request the master key material(MKM) for unique ID: %@ group: %@
resetting all keys for the unique ID: %@ group: %@
Error unarchiving -- dropping {unarchiveError: %@}
Failed to load keychain. Can't sync cache with keychain. {error: %@}
Failed to serialize cache -- Not saving opportunistic cache {error: %@, cache: %@}
Dropped opportunistic cache {err: %@}
Did not find any date to schedule a heart beat, triggering get dependent request
%@ - Using random device heartbeat override value of %d seconds
%@ - Using device heartbeat override value of %d seconds
Expiration dates per user: 
%@ => %@
Next heartbeat date: %@ (in %.0f seconds)
We did not find any heartbeat to schedule
_scheduleDependentRegistrations for %.0f - %@
_scheduleRescueHeartBeat for %.0f
_updateDependentRegistrations fired
Resetting expiry for %@
Not setup yet, ignoring expiry update...
%@ - UserID is empty (%@), ignoring expiry update...
%@ -  updateExpiry failed sanity check. Returning current date + %f seconds expiry was %f
Setting new expiry %@ (seconds %f) for user %@
Not setup yet, ignoring accounts change...
Accounts changed, updating expiry map
Missing userID for account %@, ignoring...
Did not find existing expiry for user %@
Not setup yet, ignoring _fetchExpiryTimeIfNecessary
There is one or more valid accounts but none of them has an expiry date, refreshing the entire list!
Did not delete the heart beat date from the keychain, error: %d
SIM Is not ready for registration, ignoring this.
  => Is CDMA: %@
  => Tracking %d registration(s)
  => Re-HTTP registering registration: %@
  => Registration matches, not re-registering: %@
  => No registrations active
  => Device is not entitled for this, ignoring tech change
After SIM insertion, user denied SMS registration found, changing error {accounts: %@, service: %@
SIM Inserted. Checking to see if we need to re-register due to SIM swap.
  => Re-sending HTTP registration for SMS registration: %@
Registration state changed but we can't register; not enabling phone number accounts
Registration state changed but we've tried this too many times; not enabling phone number accounts
After registration state changed, enabling account: %@ on service: %@
Not enabling account after registration state changed {isUserDisabled: %@, shouldDisableService: %@, registrationError: %ld, account: %@}
Registration state changed processed {withinTimeRange: %@, _registrationStateChangedDate: %@, _registrationStateChangedCounter: %lld}
SIM Removed. Checking to see if we need to re-register due to SIM removal.
  => Sending HTTP *deregistration* for SMS registration: %@
Dealloc'ing IDSNRDeviceBridge {pointer: %p}
NRDeviceMonitor created {deviceIdentifier: %@, pointer: %p}
Could not create NRDeviceMonitor object. {pointer: %p}
isConnected didChange {isConnected: %{public}@, isRegistered: %{public}@, deviceIdentifier: %{private}@}
isNearby didChange {isNearby: %{public}@, isRegistered: %{public}@, deviceIdentifier: %{private}@}
isCloudConnected didChange {isCloudConnected: %{public}@, isRegistered: %{public}@, deviceIdentifier: %{private}@}
isAwake didChange {isAwake: %{public}@, isRegistered: %{public}@, deviceIdentifier: %{private}@}
linkType didChange {linkType: %{public}@, isRegistered: %{public}@ deviceIdentifier: %{private}@}
isClassCConnected didChange {isClassCConnected: %{public}@, isRegistered: %{public}@, deviceIdentifier: %{private}@}
Initializing endpoint subscription {self: %@}
Received endpoints for initial subscription state {self: %@, endpoints: %@}
Endpoints subscription source did discover relevant endpoints {self: %@, localURI: %@@, endpointMap: %@}
Adding identity to last resort DB { identity: %@, token: %@, uri: %@, service: %@ }
Checking last resort DB for identity { token: %@, uri: %@, service: %@ }
Found identity in last resort DB { identity: %@, token: %@, uri: %@, service: %@ }
Cleaning last resort DB with date range %@ to %@
Remote instance ID reset: old [%s] new [%s]
Asked to set remote instanceID for previous ID [%s]
Remote instance ID do not match: old [%s] new [%s]
cannot associate %@ with streamID 0
Unexpected streamID %lu found when asked to translate %@
Previous Remote Instance IDs (next:%d) {%@}
Get Service User ID's Completed with response %@
Get Admin Access Tokens Completed with response %@
Get Consent Tokens Completed with response %@
Get User Access Tokens Completed with response %@
%p %s Sending IDS message, no CoreDuet on platform
Found existing identical subscription for topic %@ with info %@.
No active subscriptions, disabling presence on the server.
Activity unregister for activity topic %@ finished.  Success? %d
The first subscription succeeded, enabling presence on the server.
Activity register for activity topic %@ finished.  Success? %d
Looking up for listeners for update: %@
Alerting listener %@ about update %@
Assign localCID(%04x) from CID set
Clear localCID(%04x) from CID set
Attempt to clear reserved CID 0, skip.
Link is connected, perform a block for %@
Cancelling block by ID needs to pass in ID and success var.
Cancel block by ID succeeded: %@ for %@
Link is connected, cancel a block for %@
ElectAccountIdentity
!setState serviceTypeName=%@
RollAccountKey
CurrentCluster missing GroupIdentifier {currentCluster: %{public}@}
Failed to get fullClusterFromKeychain {accountGroupkey: %{public}@, error: %{public}@}
Failed to update groupID {accountIdentityCluster: %{public}@, groupID: %{public}@, error: %{public}@}
Create account keys
Create Account Key
!setState currentIdentity=%@
!setState serviceTypeNames=%@
!setState oldCluster=%@
Rolling full identity
Creating new full identity
!setState newAccountIdentity=%@
Failed to create new account identity -- Fail {error: %{public}@}
Failed to create adming identity -- Fail {adminServiceIdentity: %{public}@}
Failed to create signingServiceIdenitty -- Fail {signingServiceIdentity: %{public}@}
Created service identities {fullServiceAdminIdentities: %{public}@, fullServiceSigningIdentities: %{public}@}
Rolling old cluster
Creating new cluster
!setState newCluster=%@
!setState existingIdentityGroupName=%@
!setState accountIdentityGroupName=%@
Failed to create publicClusterBlob -- Fail {error: %{public}@}
!setState newGroupID=%@
Failed to fetch item from CloudKit -- Fail {fetchError: %{public}@}
Fetched CloudKit account -- Continue {fetchedCloudKitItem: %{private}@}
Unexpected existingGroupID class -- Fail {fetchedCloudKitItem: %{private}@}
recordName mismatch -- Fail {recordName: %{public}@, existingIdentityGroupName: %{public}@}
Failed to store cluster in keychain -- Fail {storeError: %{public}@, newCluster: %{public}@}
Stored cluster in Keychain
Failed to store in group server {groupServerItem: %{public}@, groupServerError: %{public}@
Stored cluster in GroupServer {groupServerItem: %{public}@}
!setState groupServerGroupID=%@
Failed to save identityItem to CloudKit -- Fail {cloudKitItem: %{public}@, cloudKitSetError: %{public}@}
Updating newCluster groupID {newCluster: %{public}@, groupID: %{public}@}
Stored Cluster in CloudKit -- Done {cluster: %{public}@}
Cleaning up after failed election {cluster %{public}@}
Failed to clean up failed election {cluster: %{public}@, error: %{error}@}
We need a keychain migration -- not saving anything
Failed to save identity {error: %{public}@, identityIdentifier: %ld}
Failed to save identity -- Removing reference from keychain
Removed keychain data for class %{public}@ message protection identity {error: %{public}@}
Failed removing keychain data for class %{public}@ message protection identity {error: %{public}@}
Saving key manager state {self: %@}
Failure to persist identity containers. Clearing in memory keys to force a reload.
Failure to persist identity containers, but clear is rate limited.
Persisting message protection identity container {identityIdentifier: %ld, identityContainer: %{private}@, deleteIfNull: %{public}@}
Persisted identity {identityIdentifier: %ld, identityContainer: %{private}@}
Failed to save identity, possibly corrupted -- removing reference from keychain {error: %{public}@, identityIdentifier: %ld, identityContainer: %{private}@}
Removed identity reference from keychain {identityIdentifier: %ld, identityContainer: %{private}@}
Failed to remove corrupt identity reference from keychain {error: %{public}@, identityIdentifier: %ld, identityContainer: %{private}@}
Removing identity from keychain because deleteIfNull == YES, {identityIdentifier: %ld, identityContainer: %{private}@}
Purged identity and removed it from keychain {identityIdentifier: %ld, identityContainer: %{private}@}
Failed to purge identity or remove keychain reference {error: %{public}@, identityIdentifier: %ld, identityContainer: %{private}@}
Persisting build of identity generation {itemName: %@, buildOfIdentityGeneration: %@}
Failed setting keychain data for build of identity generation {error: %{public}@}
Failed removing keychain data for build of identity generation {error: %{public}@}
Unable to deserialize build of identity generation {itemName: %{public}@, serializedBuildOfIdentityGeneration: %{public}@}
Unable to load message protection identity from keychain {error: %{public}@}
Skipping load class A message protection identity becuase shouldGeneratePairingIdentities == NO
Loaded class A message protection identity {identity: %{private}@, serializationDidChange: %{public}@}
Failed to load class A message protection identity {error: %{public}@}
Skipping load class C message protection identity becuase shouldGeneratePairingIdentities == NO
Loaded class C message protection identity {identity: %{private}@, serializationDidChange: %{public}@}
Failed to load class C message protection identity {error: %{public}@}
Skipping load class D message protection identity becuase shouldGeneratePairingIdentities == NO
Loaded class D message protection identity {identity: %{private}@, serializationDidChange: %{public}@}
Failed to load class D message protection identity {error: %{public}@}
Registration key manager beginning locked load of identities
Loaded registration key pair {publicKey: %@, privateKey: %@, signature: %@, isMigratedSignature: %@, upgradePending: %@}
Unable to load registration key pair; we're under lock, and this requires migration -- we need to migrate
Unable to load a registration key pair {signature: %@, publicKey: %@, privateKey: %@}
We are under first data protection lock, we can not load our identity now
Successfully loaded message protection identity from keychain {_config.registeredIdentityContainer: %{private}@, buildOfGeneration: %@}
Unable to load message protection identity from keychain {error: %{public}@, deserializationDidFail: %{public}@}
We're under lock, and this requires migration -- we need to migrate
Successfully loaded unregistered message protection identity from keychain {_config.unregisteredIdentity: %{private}@, buildOfGeneration: %@}
Unable to load unregistered message protection identity from keychain {error: %{public}@, deserializationDidFail: %{public}@}
Successfully loaded previous message protection identity from keychain {previousMessageProtectionKey: %{private}@}
Unable to load previous message protection identity from keychain {error: %{public}@, previousIdentityDeserializationFailed: %{public}@}
We have no registered or unregistered identity loaded -- generating a new message protection identity {registeredIdentityContainer: %@, unregisteredIdentityContainer: %@, identityDataSource.ngmVersion: %@}
We appear to have already generated a unregistered identity. It seems like it failed on deserialization: %@.
We appear to have already generated a unregistered identity. It seems like it failed reading from keychain: %@.
We appear to have already generated an unregistered identity, but we have no deserialization error or keychain error!
We have no registered identity loaded, but we found an unregistered identity -- no need to generate
We need to regenerate the registered identity
We appear to have already generated a registered identity. It seems like it failed on deserialization: %@.
We appear to have already generated a registered identity. It seems like it failed reading from keychain: %@.
We appear to have already generated an registered identity, but we have no deserialization error or keychain error!
No need to regenerate message protection identity {identity: %@, unregisteredIdentity: %@}
We're under first lock, and this requires migration -- not doing anything here
 ********  DEFAULT SET TO FORCE IDENTITY REFRESH  *******************
 ****************  IDENTITY SERIALIZATION UPDATED  ******************
 ************************  IDENTITY REBUILT  ************************
 *****************  NEEDS ENCRYPTION IDENTITY ROLL  *****************
 ********************************************************************
!!WILL FORCE AN EC KEY ROLL ON NEXT REGISTER!!
!!NO LONGER FORCING EC KEY ROLL!!
Failed generating CSR due to insufficient context {userID: %@, privateKey: %p, publicKey: %@}
Nil full container {config: %{private}@}
Nil previous full container {config: %{private}@}
Failed to get NGM public data from ticket to register -- cancelling roll {ticket: %@, ngmPublicDeviceIdentity: %@, NGMIdentityToRegister: %@, NGMPrekeyToRegister: %@}
Failed to get ticket from identity -- aborting roll {error: %{public}@, fullDeviceIdentity: %@}
!!FORCING A ROLL!!
Failed to get NGM public data to register -- returning nil for EC {ngmPublicDeviceIdentity: %@, NGMIdentityToRegister: %@, NGMPrekeyToRegister: %@}
Failed to get legacy public data to register -- returning nil {error: %{public}@, legacyPublicIdentity: %@}
Failed to get public container from full container -- returning nil publicIdentity to register {error: %{public}@, unregisteredIdentityContainer: %{private}@, registeredIdentityContainer: %{private}@}
Nil full container -- returning nil publicIdentity to register {config: %{private}@}
Returning publicIdentity to register {publicIdentityContainer: %{private}@, unregisteredContainer: %{private}@, registeredContainer: %{private}@}
Immediately returning existing message protection identity {identity: %@}
Created new message protection identity {error: %@, protectionClass: %ld, identity: %@}
Failed to create a new message protection identity! {error: %@, protectionClass: %ld}
No protection identity provided -- not returning public message protection data
Returning serialized public message protection identity {publicIdentity: %@, data: %@}
Failed to serialized public message protection identity {appendError: %@, publicIdentity: %@}
Failed to create public identity from full identity {error: %@, fullIdentity: %@}
No message protection identity present -- not returning message protection identity {error: %{public}@, dataProtectionClass: %d
Generating unregistered identity
generatedIdentityContainer isEqual to registeredIdentityContainer -- no changes {generatedIdentityContainer: %@, registeredIdentityContainer: %@}
generatedIdentityContainer isEqual unregisteredIdentityContainer -- no changes {generatedIdentityContainer: %@, unregisteredIdentityContainer: %@}
generatedIdentityContainer is different from the registered and unregistered container -- has changes -- Updating unregistered container {generatedIdentityContainer: %@}
Generated a new unregistered identity {build: %@}
Failed to generate a new unregistered identity!
Called _generateUnregisteredIdentityWithExistingLegacyIdentity but we have a valid unregisteredIdentity -- no changed {unregisteredIdentityContainer: %@}
Found internet message protection identity in class C -- no need to move it
Moving internet messsage protection identity from class D to class C
Result of moving internet messsage protection identity from D to C is %@
Delaying notification of identity regeneration {delay: %f seconds}
Posting notification of identity regeneration
Skipping notification of identity regeneration; we've already done it
Registration key manager noting registration of keys { legacyData: %@, ngmIdentityData: %@, ngmPrekeyData: %@, keyIndexToIdentityData: %@ }
Failed to get expectedLegacyPublicIdentityData -- Not updating registered data {error: %{public}@, publicUnregisteredIdentityContainer: %{private}@}
Failed to get expectedNGMPublicIdentityData/expectedNGMPublicPrekeyData -- Not updating registered data {error: %{public}@, unappliedRollingTicket: %@, publicUnregisteredIdentityContainer: %{private}@, expectedNGMPublicIdentityData: %{private}@, expectedNGMPublicPrekeyData: %{private}@}
Failed to get publicUnregisteredIdentityContainer -- Not updating registered data {error: %{public}@, unregisteredIdentityContainer: %{private}@}
Completed registration of previously unregistered identity {previousIdentity: %@, identity: %@, buildOfIdentityGeneration: %@}
Completed registration of public identity, but we were unable to apply the rolling ticket {ngmFullDeviceIdentity: %@, unappliedRollingTicket: %@, rollError: %@}
Completed registration of public identity, but it's not the identity we expected {legacyDataMatches: %@, ngmIdentityDataMatches: %@, ngmPrekeyDataMatches: %@}
Saving public legacy message protection data {identifier: %@, data: %@}
Failed to save legacy public message protection data {error: %{public}@, publicData: %{private}@}
Failed to get legacy registered public data {error: %{public}@, publicContainerToRegister: %{private}@}
Saving public ngm message protection identity data {identifier: %@, data: %@}
Failed to save ngm public message protection identity data {error: %{public}@, publicData: %{private}@}
Saving public ngm message protection prekey data {identifier: %@, data: %@}
Failed to save ngm public message protection prekey data {error: %{public}@, publicData: %{private}@}
Failed to get ngm registered public data {error: %{public}@, publicContainerToRegister: %{private}@}
Saving public ngm version data {identifier: %{public}@, ngmVersion: %{public}@, ngmVersionData: %{public}@}
Failed to public ngm version data {error: %{public}@, ngmVersion: %{public}@, ngmVersionData: %{public}@}
Failed to get ngm version from publicContainerToRegister {publicContainerToRegister: %{private}@}
Clearing flag about needing a re-register; it looks to be successful
Removing current message protection identity and key pair
Failed to remove serialized message protection identity from keychain {error: %{public}@}
Failed to remove serialized unregistered message protection identity from keychain {error: %{public}@}
Failed to remove serialized previous message protection identity from keychain {error: %{public}@}
Purging previous message protection identity from memory and keychain
Removed previous identity from memory and keychain {previousIdentity: %{private}@}
Failed to remove previous identity from memory and keychain {error: %{public}@, previousIdentity: %{private}@}
No previous identity to purge -- ignoring request {previousIdentity: %@, identity: %@}
Received notification that KT data needs updating.
Successfully synced KVS with trusted devices. { trustedDevices: %@ }
Failed to sync trusted devices to KVS. Scheduling next sync attempt. { trustedDevices: %@ }
Skipping loadPairingIdentities becuase shouldGeneratePairingIdentities == NO
We saved our keys, resuming OTR session negotiation
Failed remove class A identity -- continuing with otther identities {error: %{public}@, identity: %{private}@}
Failed remove class C identity -- continuing with otther identities {error: %{public}@, identity: %{private}@}
Missing publicLegacyData -- returning NO {error: %{public}@, publicContainer: %{private}@}
Registered legacy data is empty -- returning YES {error: %{public}@, config: %{private}@}
Registered legacy data doesn't match current data -- returning YES {registeredLegacyData: %{private}@, publicLegacyData: %{private}@}
Missing publicNGMIdentityData or publicNGMPrekeyData -- Not checking ngm data {error: %{public}@, publicContainer: %{private}@, publicNGMIdentityData: %{private}@, publicNGMPrekeyData: %{private}@}
Missing ngmVersionData -- not checking ngm data {error: %{public}@, publicContainer: %{private}@}
Registered ngm data is empty -- returning YES { error: %{public}@, config: %{private}@}
Registered ngm identity data doesn't match current data -- returning YES {registeredNGMIdentityData: %{private}@, publicNGMIdentityData: %{private}@}
Registered ngm prekey data doesn't match current data -- returning YES {registeredNGMPrekeyData: %{private}@, publicNGMPrekeyData: %{private}@}
Registered ngm data version is empty -- returning YES {error: %{public}@, config: %{private}@}
Registered ngmVersionData doesn't match current data -- returning YES {registeredNGMVersionData: %{public}@, publicNGMVersionData: %{public}@}
Application service key needs update
KT Registration Data needs update
Failed to get identity data protection class {expectedProtectionClass: %ld, error: %{public}@, identity: %{private}@}
Failed to migrate identity data protection class {error: %{public}@, identity: %{private}@, protectionClass: %ld}
Requesting roll of encryption portion of registered identity
Roll of encryption portion of registered identity requested, but we've already generated an unregistered identity -- ignoring request
returning NO from _shouldRegenerateRegisteredIdentity becuase allowRegenerateRegisteredIdentity == NO
Scheduling timer for purge of previous identity {delay: %f}
Already scheduled timer for purge of previous identity
Purge previous identity timer fired!
Scheduling timer for regneration of registered identity {delay: %f}
Regenerate identity timer fired!
We no longer need to re-generate our identity -- continuing without re-generation
Queried _purgePreviousIdentityDelay {purgeDateNumber: %{public}@, delay: %f}
Queried _identityRegenrationDelay {regenerationIntervalNumber: %{public}@, delay: %f}
Error retrieving contacts {error: %@}
GUID %@ Prioritizing tokens %@
GUID %@ Constructed %lu fanouts
GUID %@ finished constructing fanout %@
%s:%d %{private}@
Invalid encryption parameters (using) -- failing {publicDeviceIdentityContainer: %@, fullIdentity: %@, inputDataLength: %llu, identifier: %@}
Using full identity: %@
   Public/Private encryption failed with error: %@
Invalid encryption parameters (used) -- failing {publicDeviceIdentityContainer: %@, fullIdentity: %@, inputDataLength: %llu, identifier: %p}
NGM encryption failed {error: %@}
Invalid decryption parameters -- failing {publicDeviceIdentityContainer: %@, fullIdentity: %@, inputDataLength: %llu, identifier: %p}
   Public/Private decryption failed with error: %@
Using previous full identity: %@
Failed to diversify key for signing { tempIdentity: %@, diversifier: %@, mpError: %@ }
No diversifier supplied for an application key. Failing...
Found key index has unregistered identity {keyIndex: %u, unregisteredIdentity: %{private}@}
No config for key Index %u %@
No fullIdentity for key Index %u %@
Per service application key manager noting registration of keys { keyIndex: %u, keyData: %{private}@ }
Failed to get config for registered key index {keyIndex: %u}
Failed to get unregistered identity for key index {keyIndex: %u, isRegistered: %@}
Failed to get public unregistered identity for key index {keyIndex: %u, unregisteredIdentity: %{private}@}
Failed to get expected data for key index {keyIndex: %u, unregisteredIdentity: %{private}@, error: %{private}@
Completed registration of previously unregistered identity for key index {keyIndex: %u, unregisteredIdentity: %{private}@}
Completed registration does not match unregistered identity at key index {keyIndex: %u, unregisteredIdentity: %{private}@}
No registered or unregistered identity... generating {keyIndex: %u}
generatedIdentityForKeyIndexFailed {keyIndex: %u, error: %@}
Saving isRegistered value for application key, {keyIndex: %u, isRegistered: %@}
Removing identities from keychain because deleteIfNull == YES and no config present, {keyIndex: %u}
Purged identity and removed it from keychain {keyIndex: %u}
Failed to purge identity or remove keychain reference {error: %{public}@, keyIndex: %u}
Failed to setup RTCReporting to report EC metric { error: %@ }
Exception handling _strictlyUnarchivedObjectOfClasses: %@
Failed to get payload metadata {payloadMetadataError: %@, payloadMetadataData: %@}
Finished capturing AutoBugCapture diagnostics for decryption failure { context: %@, legacySuccess: %@, ECSuccess: %@, error: %@ }
%@ instance created with a dead file descriptor!
Created with {socket:%d}
Dealloc'ing IDSSocketPairConnection without ending the session
%@ endSession at %@!
%p: reset the stall detector
Error %d received on {socket:%d}
Remote side closed the connection, cleaning up {socket:%d}
Removing pending OTR messages for protection class %u.
Removed %lu pending OTR messages.
Process stored data message (Encrypted:%u, SN:%u, StreamID:%u).
FragmentedMessage: can't reassemble message from %u pieces
Recv OTR message for %@-%ld-%u E:%u SN:%u FI:%u D:%u T:%@
_processBytesAvailable: read %d bytes
Error when receiving bytes, closing connection
Remote side closed the connection, cleaning up
Received message size: %u, maximum allowed size: %u
_processIncomingMessage failed.
BPS: avg %f instant %f
unknown object in _outgoingMessageArray
Send OTR message for %@ E:%u SN:%u FI:%u T:%{public}@.
Connected socket closed, cannot send data, cleaning up...
No data to send on socket, suspending {socket:%d}
Failed to queue outgoing data - possible message fragmentation issue
Sent %ld bytes. Remaining outgoingData %lu {socket:%d}
{socket:%d} timeout, ignoring ...
got send error %d, cleaning up {socket:%d} ...
%@ removing {socket:%d} from transport thread!
SocketPairConnection (%p) add OTR blocks (enc:%p dec:%p).
Done checking for system signed in account { identifier: %@, systemAccount: %@ }
Did not find account type { identifier: %@, accountsError: %@ }
Asked to send opportunistic data {identifier: %@, service: %@, uniqueID: %@, options: %@, dataLength: %llu}
Asked to cancel opportunistic data {identifier: %@, service: %@}
Passed dice roll {destination: %@, data: %@}
Message for opportunistic data got response {identifier: %@, guid: %@, responseCode: %lu, error: %@, lastCall: %@}
Sent opportunistic message {identifier: %@, guid: %@, service: %@, accountUUID: %@, destination: %@}
Failed to find account for opportunistic send {identifier: %@, accountUniqueID: %@}
Fetched Opportunistic Send Percentage from Bag {opportunisticSendPercentage: %d}
Could not create IDSPushHandler for session
Sending MESSAGE to %@, %@ <%@>
%@ - No account with unique ID %@ found to send a message, bailing...
My token -> %@
No destinations to send message to, ignoring...
sendMessage - using fromID %@ given aliases %@  destinations: %@
sendMessage - requires lack of properties {requiredLackOfCapabilities: %@}
sendMessage - requires properties {requiredCapabilities: %@}
Message %@ got response code %lu error %@ lastCall %@
This Phone Continuity session supports the local message. Trying the local...
Received MESSAGE %@ from %@, %@
Received END %@ from %@, %@
Sending REINITIATE (subcommand %@) %@ to %@, %@
No device signatures needed, no services were passed in.
Reporting AccountKeyFetchTimeMetric: { Time Interval: %f}
Error getting account key for service: %@
Got all account keys and signatures
Timed out signing device keys and getting account key from Transparency.
General Report Spam response: %@
Bundle {isAdvertising:%@}
Bundle has no principal class
Failed to initialize bundle
Plugin class is nil
Protocol is nil
Plugin initialized successfully
Plugin does not respond to any useful messages
Plugin failed to initialize
Plugin class "%{public}s" does not conform to protocol
Replay committer told to hold block { key: %@, block: %p, dataLength: %ld }
Nil parameter given to replay commiter. Calling block now.
Error committing replay state { error: %@ }
Replay committer told to commit block { key: %@ }
Replay committer committing block { key: %@, block: %p }
Error committing replay state { key: %@, error: %@ }
Starting pending registrations...
Skipping this registration for heartbeat consideration, it is an SMS one - and the SIM is not present: %@
    => %@
   * NOT sent, forcing through the registration controller
   * Registration says it can't register, not registering: %@
   * sent
...Done
Server heartbeat hit
Skipping this registration for heartbeat consideration, it is an Apple ID one - and it apparently can't register: %@
*************** Heartbeat: We need to register now! {timeToNextRegister: %f} *********************
  => *NOT* adding pending registration: %@, we're currently registering
  => adding pending registration: %@
  => *NOT* adding pending registration: %@
Registrations pending heartbeat: %@
Updating registration heartbeat
Posting pending registration heartbeat update
Starting registration heartbeat with interval: %f
                    Time to next registration: %f
                  Setting heartbeat timer for: %f
Stopping registration heartbeat
We missed a heartbeat, we should fire
Updating heartbeats if necessary
Registration state changed, re-checking registrations
Bag reloaded, checking intervals
These differ, reseting timer!
Adding registration info to heartbeat: %@
Removing registration info from heartbeat: %@
Using random heartbeat override value of %d seconds
Using heartbeat override value of %d seconds
Non-sensical heartbeat value: %@ from server, using default: %f
Initing IDSUTunPeer %p %@
btuuid %@ isDefaultPairedDevice: %@ pipePeripheralUUIDString: %@ waitForDefaultPairedDevice: %@ uniqueID %@ shouldUseIPsecLink: %@
 Deallocing UTunPeer %p
Sending message with unexpected data protection class (%d) - using C
Priority is none for performBlock
Priority is %d - defaulting to Urgent
%@ ignoring btuuid update from %@ to %@
sendAckForMessageWithSequenceNumber: class %d priority %d
sendAckForMessageWithSequenceNumber: using connection %@
%s: self %p reporting stats for %@ %@
%s: self %p reporting stats for sockets %@
Enabling power logging for sockets {_shouldUseIPsecLink: %@}
%s: self %p Enabling power logging for transport stats
%s: self %p Will log the current transport stats and restart timers.
%@ logCurrentTransportStatsAndResetTimers shouldLog=%@, _shouldUseIPsecLink=%@
LOCALSETUP: %@ has been told to localSetupInProgress %@
enableConnection for peer %@
enableCloudConnection for peer %@
enable connection %@.
disabling connection %@
disable Connection for peer %@:%p withReason %ld
disable connection %@.
disable cloud connection for peer %@:%p withReason %ld
_checkServicesPreferringInfraWiFi %u: Service %@ has %llu delivered messages
_checkServicesPreferringInfraWiFi %u: InfraWiFi received %llu -> %llu packets. Client sockets received %llu -> %llu packets. Total delivered %llu -> %llu
_checkServicesPreferringInfraWiFi %u: No message delivered and no client socket packet received for services preferring InfraWiFi - disabling it now
Local Setup is not complete yet - ignore preferInfraWiFi for %@
Local Setup is not complete yet - ignore setLinkPreferences for %{public}@
UTUNPeer sendMessage
sendMessage: %@ priority: %@ messageType: %@
Bluetooth is required but we are not nearby - failing message %@
Local WiFi is required but we are not discovered by Rapport - failing message %@
%@ %@ %@ isConnected changed to %@
%@ wasConnected? %@ isConnected in aggregate? %@
Enabling %@ Cloud Connections on this peer
_pendingCloudEnable: %@, _supportsCloudConnections: %@, _isPeerAlwaysConnected: %@
%@ LinkManager did connect cbuuid %@ - enabling connections
continuityConnectCount for peer %@ is changed to %d.
manager:cbuuidDidConnect:%@ isAlwaysConnected:%@
Peer %@ is already locked for btUUID %@, ignore peer %@.
Enable peer %@ now. (isDefaultPairedDevice %@   lockedPeer %@)
IGNORING %@ LinkManager did connect cbuuid %@ - enabling connections (%@)
cbuuidDidFailToConnect for peer %@, disabling peer connections!
Skip handling _handleCBUUIDFailToConnect for Phone continuity local message case.
%@ LinkManager did disconnect cbuuid %@ - kicking our disable timer
Tearing Down Global Link For %@ Due To Inactivity
%@ isPeerAlwaysConnected is changed to %@
%@ forceOTRNegotiationForTopic is no-op when ipsec is used
Loading IDS keychain data with account %@
  => Done loading IDS keychain data (loaded %ld bytes)
Saving IDS keychain data with account %@
 => Done saving IDS keychain data
Device is not in keychain cloud circle {status: %ld, error: %@}
   OTR encryption failed with error: %d
   OTR decryption failed with error: %d
Retrieved opportunistic cache {cache: %@, connection: %@}
Connection not entitled to retrieve opportunistic cache -- failing {connection: %@}
RegisterDuringBuddy feature flag set to YES.  Allowing registration.
Checked whether system setup dependencies are complete { haveDependenciesCompleted: %@, accountType: %@, hasSetupCompleted: %@, isPhoneNumberAuthenticationDuringSetupAllowed: %@, isAppleIDRegistrationDuringSetupAllowed: %@ }
 SIM State says cannot register
 SIM is not inserted, cannot register
 => Checking %@
 => hit!
Registration controller starting up (%@)
*** Lockdown state is expired, not allowing registration
Returning device support registration supported: %@
System does not support SMS identification
System does not support Apple ID identification
We don't support this unknown registration type { registrationType: %d }
System does not support FaceTime
System does not support Calling
System does not support Multiway
System does not support iMessage
System does not support IDS
We don't support this unknown registration service type { serviceType: %@ }
We can't register this: %@
Registration controller register
Registration request: %@  (Environment: %@)
Cannot register, unsupported
Cannot register, invalid push token: %@
Unsupported registration on this system: %@
Cannot register, phone number registration or authentication are disabled { controlStatus: %lld }
Request to register sms identified info: %@
We can try to migrate this guy: %@
Request to register apple ID based info: %@
Sending authentication for registration for new auth token and auth cert: %@
Sending IDS authentication for registration with existing auth token: %@
Sending IDS authentication for registration with existing auth token/cert: %@
Ensuring validation checks for: %@
Registration looks correct, ensuring validation checks: %@
Request to register Home Number for info: %@
Attempting to register unknown registration type (%d): %@
This registration is missing region information, despite being already authenticated, let's fix that: %@
  => We found a good one we can pull from, let's fix ourselves using that: %@
We were told that we're done authentication here, but we have no token... bailing register
...trying to IDS Auth or Register: %@
...we didn't authenticate, and we can't ids authentcate or register. not good!
Request to unregister: %@  (Environment: %@)
Removing registration info from keychain
Failing Home Number registration because no authentication cert on registration: %@
Ignoring registration updated, registration is disabled: %@
Ignoring registration starting, registration is disabled: %@
Registration controller notify registration failure
Ignoring registration failure, registration is disabled: %@
Registration controller notify registration success
Ignoring registration success, registration is disabled: %@
Ignoring succeeded registration, registration is disabled: %@
Finished capturing AutoBugCapture diagnostics for registration failure { context: %@, sessionID: %@, error: %@ }
** Empty vetted emails, we should make sure to query them
Failed HTTP registration with info: %@       error: %d
Ignoring need for new identification, registration is disabled: %@
Ignoring failed identification, registration is disabled: %@
SMS agent requested new identification
Ignoring succeeded IDS Authentication, registration is disabled: %@
Failed IDS Authentication with info: %@ error: %d info: %@
Ignoring failed IDS Authentication, registration is disabled: %@
IDS Authentication failed - Login failed
  This was an SMS reg
This was an apple ID reg
This was a device ID reg
Failed, retry %d
 => Added confirmed emails: %@
Let's re-auth, retry %d
Too many retries, failing
Home Number provision request had expired auth token, renewing {  retries: %d, registration: %@ }
We still have no vetted email response for: %@   waiting....
We still have no default profile response for: %@   waiting....
We already have a region ID, skipping query
We were told that we're done authentication here, but we have no token... not doing anything
This was just a simple auth, we're done here
Ignoring succeeded current emails request, registration is disabled: %@
 * Empty vetted emails, sending off handles gathering
 **** missing auth cert, can't send vetted email request
Empty region ID, querying initial region
Non empty region ID: %@
Not reprovisioning temporary phone because we already have an auth cert for %@
Registration Controller - sending IDS authentication: %@
Ignoring succeeded initial region query, registration is disabled: %@
Registration Controller - succeeded authentication: %@
Ignoring succeeded authentication, registration is disabled: %@
Registration Controller - succeeded region validation - registration info: %@   regionID: %@  phoneNumber: %@  extraContext: %@  verified: %@
Ignoring succeeded region validation, registration is disabled: %@
Ignoring failed authentication, registration is disabled: %@
System not setup, ignoring auth failure and not proceeding
Authentication failed. Notifying, and unregistering %@
Ignoring succeeded link handles confirmation, registration is disabled: %@
Calculated states for _updateNotifyState {foundCalling: %@, foundFaceTime: %@, foundiMessage:%@, foundScreenSharing: %@}
Adding registration to list of tracked registrations: %@
  => Adding registration: %@
Removing registration from list of tracked registrations: %@
Adding registration to list of active registrations: %@
Removing registration from list of active registrations: %@
Device name changed from %@ to %@
Device name was updated from %@ to %@  (Registration: %@)
  => Deferring registration for device name change, we're locked
  => Sending registration for device name change
First unlock, checking deferred registrations: %d
  => Sending deferred registration: %@
Attempting to post Home Number notification before alert { displayingAddNumberPrompt: %@, bypassOngoingPNR: %@, ongoingPNR: %@, phoneUser: %@, tempUser: %@ }
Displaying should add phone number alert
User didn't hit default button on disable phone number alert
User hit no to disable phone number alert -- ignoring
Sending SIM deactivation request for label ID %@
Too many SIM deactivation events. Not sending request %@
Missing MainID, Not sending IDS Authentication/Register for: %@
Missing ProfileID, Not sending IDS Authentication/Register for: %@
Missing regionID, Not sending IDS Authentication/Register for: %@
Missing regionBasePhoneNumber, Not sending IDS Authentication/Register for: %@
Sending IDS Authentication for: %@
Sending IDS Registration for: %@
Not sending IDS Registration or Authentication for: %@
removing token %@ from %@
DeliveryContext Timestamp is %@
Processing response %ld for message %@
Message has been removed, Add Honeybee support here to grab logs from the other side who sent this FromURI:%@ ToURI:%@ Token:%@ 
Bad signature {message: %@, localURI: %@, remoteURI: %@, remotePushToken: %@, sessionToken: %@, service: %@}
 current sessionToken: %@
Message was rate limited from the server, failing message (%@ -> %@)
Triggered auto bug capture for rate limiting {session : %@, error: %@}
Unknown Error, Failing message
Msg with GUID: %@ & i:%@ is missing 255s
Chunk: %@
WasLast?: %@
Error retrieving data from last resort cache: { error: %@ }
Flushing peer tokens, in hopes this resolves in the next error
Need to query for encryption but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}
Missing encryption keys -- querying {remoteURI: %@, localURI: %@, service: %@}
Encryption query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}
Need to query for decryption but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}
Missing decryption keys, need to query {underLimit: %@, remoteURI: %@, localURI: %@, service: %@}
Decryption query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}
Need to query for signing verification but should avoid main -- failing {remoteURI: %@, localURI: %@, service: %@}
Missing signing verification key, need to query {underLimit: %@, remoteURI: %@, localURI: %@, service: %@}
Signing verification query completed {success: %@, remoteURI: %@, localURI: %@, service: %@}
Tried to PK to default paired device!! -- failing
Tried to encrypt to nil device ID -- failing
Missing identity to encrypt with {deviceID: %@}
Missing identity to decrypt with {deviceID: %@}
Missing device encryption keys -- querying {deviceID: %@}
Device encryption query completed {success: %@, deviceID: %@}
Error committing replay state for device ID decryption { error: %@ }
Missing device decryption keys -- querying {deviceID: %@}
Device decryption query completed {success: %@, hasKeyAfterQuery: %@, deviceID: %@}
%@ has valid SKM: %@ for sessionID: %@
SKM: %@
*** options : %@
There was an error creating the managers for IDSDSession.  Aborting...
IDSDSession::init { self: %p, uniqueID: %@, instanceID: %@, isLightweightParticipant: %@}
[!] This session will be suppressing client notifications { self.sharedState.uniqueID: %@ }
com.apple.private.alloy.phonecontinuity: set connectionCountHint to: %@
use QR directly for %@.
 self.sharedState.connectionCountHint: %lu, [connectionCountHint unsignedIntegerValue]: %lu
Created session (%@) %@ with destinations %@
Skip IDSClientChannel because this is a lighweight participant.
Could not create session: %@ because failed to get this device push token for the service: %@
Destinations are %@
IDSDSession::dealloc { self: %p, uniqueID: %@, instanceID: %@ }
Destroyed session %@
GFTMetrics will report %@
time difference between MKM over push and MKM over QR QUIC: %.3f
_reportRTC summary: %@
didReceiveReport, broadcaster: %p for session: %@
No valid RTC reports to report
%s: session %@ connection %p
reportMKMReceived received first MKM at %f time
reportFirstMKMReceivedFromPush: get allocbind RTC report, time of allocbind response: %f, set the duration to %d ms
reportMKMReceivedOverPushViaCacheForParticipantID: token not found for participantID %llu
<%@> _lightweightParticipantSync: generationCounterLSB: %u, currentGenerationCounterLSB: %u, request up-to-date lightweight participants
Client channel connected %@ (connections claimed %lu)
Lost race condition - missing connection for extra connection %lu
IDSClientChannel has excessively cached too many packets. Invalidating IDSClientChannel...
IDSClientChannel is nil - dropping packetBuffer %p (length %lu) metadata %p metadataSize %d
IDSClientChannel %p closed
writeToClientChannel: there is no real packet or metadata.
Added cachedData - total %lu cached client data to send
greater than threshold:  [clientChannel excessiveCachingCount]: %d
writeToClientChannel: current data cached time: %f
invalid client channel: currentTime: %f, _channelDataCachedTime: %f, dataCachedDuration: %f, clientChannelTimedout: %f
%p: writeHandler: IDSDSession %p
_checkAndSendCachedDataForClient: clear cached data time
Have %lu cached client data to send
_checkAndSendCachedDataForClient: there is no real packet or metadata
generateClientChannelDataTest: wrote %d test metadata (size %u) into client channel %@
overflowClientChannelDataTest wrote %d test metadata (size %u) into client channel %@
got data %ld from socket %d clientChannel %@
<%@> read nonfatal failure errno %d
<%@> read failed errno %d
<%@> read returned 0 bytes errno %d
_connectSocketDescriptor: ClientChannel read error %@
_connectSocketDescriptor: clientType: %u, end session
_connectSocketDescriptor: strongSelf: %p, not ending session because we have not been told to
_connectSocketDescriptor: ClientChannel or Session has been invalidated; not writing
Client channel read packetBuffer %lu metadata_size %lu error %@ for socket %d
Bug in client: Client channel read only metadata for socket session - dropping metadata_size %lu for socket %d
<%@> write failed to send all bytes %d < %d
<%@> write failed connection terminated %d
<%@> write nonfatal failure errno %d
<%@> write failed errno %d
socket %d connected to IDSClientChannel %p
kClientChannelMetadataType_TotalDatagramCount %u
kClientChannelMetadataType_TotalDatagramCount should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_CurrentDatagramCount %u
kClientChannelMetadataType_CurrentDatagramCount should be 1 byte, not %u bytes, field: %u
got PacketLinkID %d [%013.6lf]
kClientChannelMetadataType_PacketLinkID should be 1 byte, not %u bytes, field: %u
got trafficClass %u [%013.6lf]
kClientChannelMetadataType_TrafficClassKey should be %u byte, not %u bytes, field: %u
got DSCP %u [%013.6lf]
kClientChannelMetadataType_DSCPKey should be %u byte, not %u bytes, field: %u
got invalid streamIDCount %u
got streamIDCount %u
got streamID %u
kClientChannelMetadataType_StreamIDsKey: size mismatch (%u != %u), ignore.
kClientChannelMetadataType_CountPacketKey should be 1 byte, not %u bytes, field: %u
got Channel Priority %u [%013.6lf]
kClientChannelMetadataType_PriorityKey should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_OptOutPriorityFilter should be 1 byte, not %u bytes, field: %u
kClientChannelMetadataType_TransitionPacketFlag should be 1 byte, not %u bytes, field: %u
got Participant ID %llu [%013.6lf]
kClientChannelMetadataType_PriorityKey should be 8 byte, not %u bytes, field: %u
got probeGroupID %u [%013.6lf]
kClientChannelMetadataType_ProbeGroupIDKey should be 2 byte, not %u bytes, field: %u
got connectedLinkID %d connectedLinkAttributes %u
kClientChannelMetadataType_LinkConnected should be 4 bytes, not %u bytes, field: %u
got disconnectedLinkID %d
kClientChannelMetadataType_LinkDisconnected should be 1 byte, not %u bytes, field: %u
got defaultLinkID %d
kClientChannelMetadataType_DefaultLinkID should be 1 byte, not %u bytes, field: %u
got ratType %u
kClientChannelMetadataType_RATChanged should be 1 bytes, not %u bytes, field: %u
got basebandRegKey %lu (linkID: %d)
kClientChannelMetadataType_BasebandRegistrationKey should be 4 bytes, not %u bytes, field: %u
got kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey %u
kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_BasebandQueueFlushPayloadKey should know its size. needs kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey
got basebandQueueFlush %@
kClientChannelMetadataType_BasebandQueueFlushPayloadSizeKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_DiscardLinkIDsKey %@
kClientChannelMetadataType_KeepAliveLinksKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_PreConnectionDataSizeKey %u
kClientChannelMetadataType_PreConnectionDataSizeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_PreConnectionDataKey should know its size. needs kClientChannelMetadataType_PreConnectionDataSizeKey
got preConnectionData %@, size:%u bytes.
sendSKEData failed with error: %@. Will retry.
kClientChannelMetadataType_PreConnectionDataKey should be %u bytes, not %u bytes, field: %u
got updateQoSIsGood %@ (linkID: %d)
kClientChannelMetadataType_UpdateQoSIsGoodKey should be %u bytes, not %u bytes, field: %u
got kClientChannelMetadataType_QueryRSSI
kClientChannelMetadataType_QueryRSSI should be %u bytes, not %u bytes, field: %u
got maxBitrate %u (linkID: %d)
kClientChannelMetadataType_MaxBitrateKey should be %u bytes, not %u bytes, field: %u
got the process PID %d
kClientChannelMetadataType_ProcessIDKey should be %d byte, not %u bytes, field: %u
kClientChannelMetadataType_DebugDataTransferTypeKey %d
kClientChannelMetadataType_DebugDataTransferTypeKey should be 1 bytes, not %u bytes, field: %u
kClientChannelMetadataType_DebugDataTransferKey got the group ID %@
got kClientChannelMetadataType_EncryptionInfoKey %@ group: %@
kClientChannelMetadataType_EncryptionInfoKey FALSE. We won't pass the encryption information to the client.
kClientChannelMetadataType_EncryptionInfoKey should be 1 byte, not %u bytes, field: %u
got kClientChannelMetadataType_ForceUpdateEncryptionInfoKey
kClientChannelMetadataType_ForceUpdateEncryptionInfoKey coudln't get the group ID for the session %@!
kClientChannelMetadataType_ForceUpdateEncryptionInfoKey should be 1 byte, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_StatsKey.
Couldn't decode kClientChannelMetadataType_StatsKey bytes into NSDictionary
kClientChannelMetadataType_RemoteDeviceVersionKey should be %u bytes, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_SessionInfoKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_SessionInfoKey
got statsID %u
kClientChannelMetadataType_StatsID should be 2 byte, not %u bytes, field: %u
_extractFieldBytesFromMetadata report dictionary: could not read MKI
_extractFieldBytesFromMetadata report dictionary: could not read MKI as UUID
_extractFieldBytesFromMetadata report dictionary: could not read times
kClientChannelMetadataType_PacketUUID should be %u bytes, not %u bytes, field: %u
kClientChannelMetadataType_ExpireTimestamp should be %u bytes, not %u bytes, field: %u
kClientChannelMetadataType_WiFiAssistEnableKey should be %u bytes, not %u bytes, field: %u
Couldn't get NSData for kClientChannelMetadataType_StartLinkProbingKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StartLinkProbingKey
Couldn't get NSData for kClientChannelMetadataType_StopLinkProbingKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StopLinkProbingKey
Couldn't get NSData for kClientChannelMetadataType_QueryLinkStatusKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_QueryLinkStatusKey
Couldn't get NSData for kClientChannelMetadataType_StatsRequestData.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_StatsRequestData
Couldn't get NSData for kClientChannelMetadataType_flushLinkProbingStatusKey.
There was a problem creating NSDictionary from NSData for kClientChannelMetadataType_flushLinkProbingStatusKey
Couldn't get valid kClientChannelMetadataType_MKMParticipantIDsKey.
kClientChannelMetadataType_MKMParticipantIDsKey: size: %u, count: %u
Couldn't get URI for MKMParticipantID %llu
participantIDArray: %@
kClientChannelMetadataType_NeedsHBHEncryption should be %u byte, not %u
kClientChannelMetadataType_IsUPlusOneEnabledKey should be %u bytes, not %u bytes, field: %u
kClientChannelMetadataType_EncryptionSequenceNumber should be %u bytes, not %u bytes, field: %u
kClientChannelMetadataType_RetransmittedPacket should be %u byte, not %u
kClientChannelMetadataType_NonRetransmittablePacket should be %u byte, not %u
kClientChannelMetadataType_ChildConnectionID should be %u bytes, not %u bytes
Unknown metadata type: %u
_connectQRDirectlyToClientChannel: ClientChannel read error %@, self.sharedState.state %d
_connectQRDirectlyToClientChannel: state: %u
_connectQRDirectlyToClientChannel: strongSelf: %p, not ending session because we have not been told to.
not sending to UTunController - currentDatagramCount %u totalDatagramCount %u
Can't send more than %u over the compound data channel! totalDatagramCount %u
not sending to UTunController - packetBufferLength %d currentDatagramCount %u totalDatagramCount %u
Client channel read datagram_size %lu metadata_size %lu sendResult %s processTime %0.6lf sendTime %0.6lf [%013.6lf]
QR directly connected to IDSClientChannel %p
cachedSessionInfo is nil, requestType: %lu
%@: requestSessionInfoWithOptions failed! Couldn't get the cached response from QRAllocator.
%@: requestSessionInfoWithOptions for groupID %@ relayGroupID %@ relaySessionID %@
%@: requestSessionInfoWithOptions doesn't support the requestType: %ld
requestURIsForParticipantIDs: could not find URI for participant id: %@
requestURIsForParticipantIDs: request id %@ found %lu participants.
%@: _sendingOfflineActiveParticipantInfoRequest for groupID %@ relayGroupID %@ relaySessionID %@
formAndEncryptDataBlob: no valid plainDataBlob
couldn't encrypt dataBlob: %@
type: %d, encrypted blob: %@ plain blob: %@, localSKI: %@, encryptedData: %@
connectQRServer failed due to invalid parameter.
User already left group %@; don't connect
connectQRServer for group %@ failed due to missing (params %p, participantID %@, relaySessionID %@, participantData %@)
Connect to QR server for %@. (sharedSession:%@, isInitiator:%@, isLegacy:%@, clientType:%d)
Connect to QR server failed for %@ with error %@.
Sending server message QR metrics report for session %@ end reason %d, ua: %@
Finished sending server message QR metrics report for session %@ delivery error %@
Failed sending server message QR metrics report for session %@, delivery error %@
Connect to QR server succeeded for %@.
Completed send of join notification fanout message { groupID: %@, success: %@ }
lightweight participant: create keys
Cannot fan out the join notification to the group, no groupID!
Not in join state, group = %@, state = %d
Failed to receive all APNS courier acks for reliable join notification before timeout -- ending session { groupID: %@ }
Starting timeout block for reliable join notification delivery { groupID: %@, timeout: %f, timeoutBlock: %@ destinations: %@ }
Not starting timeout block for reliable join notification delivery { groupID: %@, timeout: %f, destinations: %@ }
Canceling timeout block for reliable join notification delivery { groupID: %@, timeoutBlock: %@ }
Triggering early execution of timeout block for reliable join notification delivery { groupID: %@, timeoutBlock: %@ }
IPsecLink is enabled. UTun bypass: %@ service: %@, session: %@.
UTun bypass: %@ service: %@, session: %@.
openSocketToDevice deviceID %@, self.sharedState.useQRDirectly %@, _isFaceTime %@
open socket for session, byPassUtun: %d
Open socket for session complete (socket: %d, initial link type:%d) (error: %@)
Open socket for session complete (extra #%d) (socket: %d) (error: %@)
sessionStartWithSocketDescriptor socketDescriptor %d, bypassUtun: %@
set initial link type %d for session %@.
received delayed QR connection %@ for an accepted session
Retry sendSKEData failed with error: %@. Give up.
%s IDSSessionID is nil!
%s - We're already listening on socket %d
Starting to listen on raw client socket %d
Cleanup session: %@
REPORT RTC: %@
Releasing the client channel %p
%@ cleanupSessionWithCleanStatus: shouldCleanStatus: %@, _isLightweightParticipant: %@
%@ cleanupSessionWithCleanStatus: no need to clean session status
Deleted localUnauthenticatedFullIdentity from keychain {identity: %@}
Failed to delete localUnauthenticatedFullIdentity from keychain {error: %@, identity: %@}
disconnectGlobalLink failed with error %@
Reconnect initiated By TU
Sending END to %@, %@ <%@>
Ending session with data
Ending session
notifyLeaveToGroup and sessionDidLeaveGroup for group session %@
Didn't fan out the leave notification, the group session %@ is already ended!
Cannot fan out the endSession leave notification to the group, no groupID!
The client left the group session. IDSGroupSession can be removed. _groupStatusNotificationParams.participantID = %@
Resetting preferences for service %{public}@
Closing socket for session
Unhooking and closing socket descriptors from TransportThread %@ (possibly not on TransportThread)
Made options to open socket %@
Looking for device unique ID in: %@
  => Push token: %@
    => Found unique ID: %@
  => No unique ID found
Looking for device token in: %@
  => No token found
Notifying client session %@ stopped with reason %d
Session is already ended, ignoring...
Session stopped notification suppressed
Enabling audio ? %@
Muting ? %@
Setting preferences %@
setRequiredCapabilities triggered leave to unsupported members {groupID: %@, needToSendJoin: %@, needToSendLeave: %@}
setRequiredCapabilities not triggering a leave to unsupported members {groupID: %@, needToSendJoin: %@, needToSendLeave: %@, groupSessionState: %d}
%@ session did start %@ with error %@
%@ session did stop with error %@
Session: %@ received error: %@
Invalid error type posted to session: %@   error: %@    class: %@
Ignoring error, we're already dead anyway!
Data size is bigger than %d, ending call...
Data size is too small, ending call...
Magic number doesn't match 0x%04x, ignoring...
Malloc error while decrypting, ending call...
Stream decryption transform error %d
Received data Viceroy -> Daemon  (after decrypt data hash: %lu)  (length: %lu)
Sending data Daemon -> Viceroy  (before encrypt data hash: %lu seq: %u)  (length: %lu)
Malloc error while encrypting, ending call...
Stream encryption transform error %d
use TCP for QR, port: %u
use TCPSSL for QR, port: %u
<%@> add the new QR event for the RTC report: %@
<%@> _sendQREventToAVC failed to encode qrEvent for group %@ (error: %@)
<%@> link:%@ didDisconnectForDeviceUniqueID:%@ cbuuid:%@
didReceiveMaterialInfo: SME disabled
didReceiveMaterialInfo type: %d, ignoring (handled separately)
didReceiveMaterialInfo received material info: %@
didReceiveMaterialInfo could not decode content. Data: %@
didReceiveMaterialInfo received material info content: %@
didReceiveMaterialInfo could not decode payload. Content: %@
didReceiveMaterialInfo could not get fromURI for participant %llu
didReceiveMaterialInfo could not get push token for participant %llu
didReceiveMaterialInfo could not process material because ownerParticipantId is 0
didReceiveMaterialInfo: could not process material from %llu for group %@ and session %@ since the originator of material is not in group membership: %@
didReceiveMaterialInfo failed to verify signature for info: %@ error: %@
Receiving Key Material (QUIC) [MKM] -- %f
didReceiveMaterialInfo failed processing MKM for participant %llu; payload %@; error: %@
Receiving Key Material (QUIC) [SKM] -- %f
didReceiveMaterialInfo failed processing SKM for participant %llu; payload %@; error: %@
Receiving Key Material (QUIC) [PreKey] -- %f
didReceiveMaterialInfo could not process preKey for participant %llu; no preKey found in payload %@
didReceiveMaterialInfo could not process preKey for participant %llu; no wrap-mode found in payload %@
didReceiveMaterialInfo could not process preKey for participant %llu; no creation-date found in payload %@
payload: %@, material.ownerParticipantId: %llu
didReceiveMaterialInfo unknown material type %d
didReceiveMaterialInfo did not receive signature: %@
didReceiveMaterialInfo ignoring material info; sessionID %@ does not match our sessionID %@
didReceiveMaterialInfo verifying signature: %@ matchesPayload: %@
<%@> link:%@ didConnectForDeviceUniqueID:%@ cbuuid:%@
<%@> link:%@ didConnectUnderlyingLink:%d linkUUID:%@ localAttributes:%@ remoteAttributes:%@
%s incorrect attribute length: %d
No need to send kClientChannelMetadataType_LinkConnected, <%@> useQR: %@, isFaceTimeCall: %@
<%@> link:%@ didReiceiveChildConnectionID:%@ forLinkID:%d
No need to send kClientChannelMetadataType_ChildConnectionID, <%@> useQR: %@, isFaceTimeCall: %@
<%@> link:%@ plugin didReceiveRequestToPurgeRegistration:%@
<%@> link:%@ plugin didReceivePluginDisconnect:%@
<%@> link:%@ didReceiveMappedParticipantsDict:%@ for linkID:%d 
didReceiveMappedParticipantsDict: breaking %lu element dict into %lu chunks.
<%@> link: %@ didReceiveEncryptedDataBlobs: %@
didReceiveErrorIndicationWithCode: %u for link: %@ <%@>
destinationsContainFromID: %@ is not in the destinations %@
Ignored updateMembers since destinations have not been changed.
updateMembers: newly added destinations: %@
Updated destinations for group %@ to %@ (triggeredLocally %@)
Updated destinations have lightweight status values: %@
Re-allocating due to new member
Resetting keys, sending membership change event for group %@, triggeredLocally: %@
No need to reset keys for group %@, triggeredLocally: %@
manageDesignatedMembers for group %@ to %@
manageDesignatedMembers doesn't have valid cached sessionInfo for group %@
removeParticipantIDs for group %@ to %@
removeParticipantIDs doesn't have valid cached sessionInfo for group %@
updateParticipantType: remote triggered, no groupID
updateParticipantType: unknown IDSGroupSessionParticipantType: %u
updateParticipantType: no valid cached sessionInfo for group %@
updateParticipantType: to: %@, wasLightweightParticipant: %@, type: %u, lightweightStatusDict: %@
<%@> updateParticipantType: reset MKM status for %@
updateParticipantType: no valid groupID
updateParticipantType: No need to change the type: wasLightweightParticipant: %@, type: %u, current: %@, lightweightStatusDict: %@
setGroupStreamInfo: sessionInfo[kIDSQRAllocateKey_StreamInfoSubscribedStreams]:%@, sessionInfo:%@, streamInfo.subscribedStreams:%@
Client data blob size is greater than push size limitation which is %ld and groupID: %@
joinWithOptions: participantData: %@, participantInfo: %@, handshakeBlob: %@
Participant query in process or defaults are not set for hardcoded QR session info, self.sharedState.groupID: %@, self.sharedState.destinations: %@
invalidateLatestResponse status: %d, reason: %@, error: %@
disconnectGlobalLink during leaving group session failed: %@
Cannot fan out the leave notification to the group, no groupID!
sendKeyMaterialMessage - message %{private}@ given aliases %@  destination: %@
sendKeyMaterialMessage - requires lack of properties {requiredLackOfCapabilities: %@}
sendKeyMaterialMessage - requires properties {requiredCapabilities: %@}
sendKeyMaterialData failed with error: %d
setServerDesiredKeyMaterials: SME disabled
updateServerDesiredKeyValueDeliveryMaterialsNeeded: SME disabled
updateServerDesiredKeyMaterials: SME disabled
Received the new MKM %lld milleseconds after the membership change event for group %@
_sendClientDecryptedDatabBlobs: unsupported type: %d
receiveAndDecryptEncryptedDataBlobs: type: %@, blobLength: %lu, standaloneBlob: %@, keyID: %@
_decryptReceivedEncryptedDataBlobsUsingSKMs, no encryptedBlobTypeCount, return
_decryptReceivedDataBlobsUsingSKMs: _typeToParticipantIDToDecryptedDataBlob count: %llu, _typeToKeyIDToEncryptedData: %@
couldn't decrypt data blob: %@, encryptedDataType: %d error: %@
haven't got keyID: %@
decryptedBlob: %@, keyID: %@, participantID: %@, type: %d
couldn't find valid participantID based on keyID: %@
count: %llu, %@
warning: _decryptReceivedDataBlobsUsingSKMs: couldn't find push token
_decryptReceivedDataBlobsUsingSKMs: no valid URI for participantID: %llu, group: %@
recvStableKeyMaterialForFrameworkCache for session %@. SKM: %@
requestMaterialsForParticipantIDs for session %@. participantIDs: %@; materialType:%d
requestMaterialsForParticipantIDs: SME disabled
Sending the session info request to update the active participant list...
URI to participantID mapping changed for sessionID: %@
Allocation failure for session %@, status = %d, code = %d
Missing push token at index %d. Replacing NSNull with nil.
Couldn't get the URI from the QRAllocate response for participantID: %llu.
not fastSync, return
update active lightweight participants: %@
update active participants: %@
currentLocalParticipantID: %llu, groupID: %@
Failed to get URI from QR allocate response
IDSDSession read handler called for %@ - result %s
Reinitiate called for session %@
Session %@ reinitiate called, but we don't support reinitiate, enableQuickRelay: %d, useQRDirectly: %d
Session %@ reinitiate called, but our current state is not connected (current state: %u)
Session %@ reinitiate called, but this session is with the default paired device
Session %@ reinitiate: sending request for initiator to kick off reinitiate flow
Session %@ reinitiate: disconnecting global link
disconnectGlobalLink during reinitiate failed with error %@
Unhandled reinitiate subcommand type %@ for session %@
Reinitiate request message received for session %@: %@
Reinitiate teardown message received for session %@: %@
Session %@ received reinitiate teardown message, but we don't support reinitiate
Session %@ received reinitiate teardown message, but our current state is not connected (current state: %u)
Session %@ reinitiate teardown: disconnecting global link
disconnectGlobalLink during reinitiate teardown failed with error %@
Reinitiate teardown ack message received for session %@: %@
Session %@ received reinitiate teardown ack message, but our current state is not reinitiating (current state: %u)
Session %@ reinitiate: setting up new QR allocation
Reinitiate bringup message received for session %@: %@
Session %@ received reinitiate bringup message, but our current state is not reintiating (current state: %u)
Session %@ reinitiate bringup: requesting allocation for recipient
Reinitiate bringup ack message received for session %@: %@
Session %@ received reinitiate bringup ack message, but our current state is not reintiating (current state: %u)
Reinitiate accepted relay-session-id %@
 invalid port %d
Failed type check! {key: %@, class: %@}
_wrapData: GFTKeyWrapping not available
IDSServerDesiredEncryptedDataSet: disableEncryptionForData, use plain data: %@
IDSServerDesiredEncryptedDataSet materialDataByID: error: %@
protectedData is nil, return
IDSServerDesiredEncryptedDataSet materialDataByID: encrypted the data for participantID: %llu, remote pub key: %@, data: %@, protectedData: %@
IDSSockAddrPairTable_Init failed with memory allocation
IDSSockAddrPairTable_Release
[%s-%s] already exists.
failed with realloc
increase capacity %d->%d
added pair [%s-%s], state (%ld), total %d pair(s).
IDSSockAddrPairTable_UpdatePairState - found no match for transactionID %@
IDSSockAddrPairTable_UpdatePairState - update state for [%s-%s] (%ld->%ld)
Nominate connection [%s(%u)-%s] is done, skip.
Nominate connection [%s(%u)-%s].
Nominate new connection [%s(%u)-%s].
Start echo (%d) for [%s(%u)-%s].
skip regular binding request
skip nominate binding request
send binding request %@ for [%s(%u)-%s].
failed to send binding request with error (%s)
cannot send echo request due to invalid state (%d).
send echo request (count:%d) for %s(%u)-%s.
failed to send echo request with error (%s)
NLDEBUG: SWIZZLE CALLED!
Quit - notifying about shutdown
Quit - shutting down daemon
Quit - goodbye!
*** Clearing ID status cache ***
*** Reloading Logging Settings ***
Unhandled signal: %d
Failed to set user dir suffix: %{darwin.errno}d
Failed to set io policy: %{darwin.errno}d
Launching IDS with updated queue architecture.
IDSAgent exception caught on main thread: %@
Received APNS Ack for GUID %@
Finished acks for GUID %@ success: %@ error: %@
OUTGOING-PUSH_FULLY_SENT:%@ SERVICE:%@
Finished sending GUID %@ success: %@ error: %@
We're not loaded; ignoring save to disk for cache %@
Loading cache with identifier %@
  => Underlying persister %@ is unavailable; not loading!
  => Loaded cache has %ld keys
Saving cache with identifier %@ => Will save cache to disk with %ld keys
  => Encoding...
  => Done encoding: %ld bytes
  => Skipping encoding, empty
Exception decoding persistent map -- throwing away {exception: %@, identitier: %@}
Error during Decoding %@
Missing KT Opt-In Check entitlement -- failing creation of IDSDXPCRegistration collaborator {connection: %@}
Failed to weak link UNUserNotificationCenter
Notification being posted with a none style { service: %@ }
Overriding URI %@ for pseudonym
Overriding URI %@ with contact name %@
Failed to weak link UN class required to post notification for uri %@
Loading image from %@, Does exist %@
Added firewall notification request {uri: %@, error: %@}
Told to post firewall notification {uri: %@}
Not posting firewall notification because service has a notification style of none {uri: %@, service: %@}
Not posting firewall notification because command is not initiated by the user {uri: %@, command: %@}
Not posting firewall notification because we are over limit {uri: %@}
Will present firewall notification %@
Did receive firewall notification response %@
Sent missing message metric to server { success: %ld, guid: %@, service: %@, reason: %ld, additionalInfo: %@ }
Cannot get participantsForGroupID, no groupID!
Found participants for group %@
notify Leave To Group
Server Bag provided us with a send timeout of %f 
Group status notification requires lack of properties {requiredLackOfCapabilities: %@}
Group status notification requires properties {requiredCapabilities: %@}
Group status notification requires properties -- manual {requiredCapabilites: %@}
Group status notification requires lack of properties -- manual {requiredLackOfCapabilities: %@}
Sending group status notification fanout message { GUID: %@, command: %@, commandContext: %@, waitForMadridAcks: %@, completionBlock: %@ }
Group status notification message callback received { GUID: %@, responseCode: %lu, error: %@, lastCourerAck: %@, lastCall: %@ }
Last Courier ack received for group status notification message { waitForMadridAcks: %@, pendingCompletionBlock: %@ }
Last Madrid ack received for group status notification message { waitForMadridAcks: %@, pendingCompletionBlock: %@ }
Sent messageID %@ to the destination %@ command %@ (account %@, fromID %@)
No Group, bailing...
Process incoming fanout message: %@, fromToken: %@, fromID: %@, specificOriginator: %@ fromStorage %@
Dropping group session participant update due to groupID mismatch { type: %lu, groupID: %@, groupUUID: %@ }
processIncomingParticipantUpdateMessage: We'll drop this participant update message for group %@ since %@ is not in this group!
Dropping group session participant update due to membership mismatch { type: %lu, fromID: %@, destinations: %@ }
Receive join from initiator: %@
Couldn't pass the join event to clients. There is no session for group %@ and the join push is not from Initiator.
Passing the join event to client/s. There is no session for group %@ but the join push is from Initiator
processIncomingParticipantDataUpdateMessage: Dropping due to groupID mismatch { type: %lu, groupID: %@, groupUUID: %@ }
processIncomingParticipantDataUpdateMessage: We'll drop this participant update message for group %@ since %@ is not in this group!
Dropping group session participant data update due to membership mismatch { type: %lu, fromID: %@, destinations: %@ }
Look up peer with URI: %@, push token count: %u
Skipping duplicate token %@
groupID: %@, sessionID: %@, %@
Could not look up the recipients' push tokens, IDs: %@, errors: %@ 
Looked up _groupMemberPushTokens: %@
Cannot find the push tokens, missing recipientIDs.
%s - No account found to build specificOriginator, bailing...
%s - No device found to build specificOriginator, bailing...
%s - No device push token found to build specificOriginator, bailing...
%s - No device identity found to build specificOriginator, bailing...
original fromID %@ -> resulting specificOriginator %@
Couldn't find the tokens for group %@
Coudln't find the URI for the given token for group %@. the pushToken is not NSData.
Coudln't find the URI for the given token %@ for group %@.
Broadcasting receivedGroupSessionParticipantUpdate:forTopic: {topic: %@, update: %@, context: %@}
Did not find a client to handle receivedGroupSessionParticipantUpdate:forTopic: -- dropping broadcast
Broadcasting receivedGroupSessionParticipantDataUpdate:forTopic: {topic: %@, update: %@}
Did not find a client to handle receivedGroupSessionParticipantDataUpdate:forTopic: -- dropping broadcast
plain: %@, encrypted: %@, decrypted: %@
plain: %@, encryptedAgain: %@, decryptedAgain: %@
Asked by idstool to clear caches!
Told to force renew account %@ on service %@
Connection is missing entitlement for replaying pushes
Received nearby change to %@ for device with uniqueID %@
Received connected change to %@ for device with uniqueID %@
Received cloud connected change to %@ for device with uniqueID %@
*** Clearing traffic ***
  == Incrementing %@ for service: %@   Requestor: %@  (Count: %d, GlobalCountForAdhocType%u: %@)
     Server daily global%@ budget is: %@   Current count is: %@
     **** We are over budget - Server daily global budget is: %@   Current count is: %@
     Server daily%@ budget is: %@   Current count is: %@
     **** We are over budget - Server service%@ budget is: %@   Current count is: %@
     Server daily%@ default budget is: %@   Current count is: %@
     **** We are over budget - Server daily%@ default budget is: %@   Current count is: %@
     Server daily budget is: %@   Current count is: %@
     **** we are over budget
     No budget specified
====== IDS Traffic Usage:
   Service: %@
     %@: %@
====== Done
isQuickSwitching set to %@
We're already switched to (cbuuid %@), ignoring request to switch...
Forcing QuickSwitch {activeCBUUID: %{private}@, cbuuid: %{private}@}
Initiating QuickSwitch to (cbuuid %@)
Finishing up switching
QuickSwitch initiated with error: %@
QuickSwitch time %f
Resetting communication before QuickSwitch {shouldDeactivatePairedDevices: %{public}@}
Removing the keychain and in-memory data used for OTR communication.
Resetting all OTR sessions to allow communication with the new active paired device.
Calling completion block to finish switching
beginning watch<>phone account synchronization
No readable saved syncing services -- returning
Loaded syncing services {serviceInstances : %@}
Should continue syncing preferred account
Should continue fetching remote account
Should continue syncing tinker device info
Stopping all pending account sync actions { pending: %@ }
Sent account sync message (message ID: %@) (success: %@)
Note should sync all services
Not syncing preferred account because device %@ is not paired
Not syncing preferred account because device %@ is tinker paired
Note should sync preferred account, Syncing iMessage account now
%s: invalid iMessage account %@
Syncing preferred account for iMessage {guid: %@, uniqueID: %@}
Note should sync preferred account, Syncing FaceTime account now
%s: invalid FaceTime account %@
Syncing preferred account for FaceTime {guid: %@, uniqueID: %@}
Not fetching remote account info because device %@ is not paired
Not fetching remote account info because device %@ is tinker paired
Fetching remote account info {servicesToSync: %@}
Received remote account information {accountInfoMapKey: %@}
Not syncing tinker info because device %@ is not paired
Not syncing tinker info because device %@ is not tinker paired
Not syncing services because device %@ is not paired
Not syncing services because device %@ is tinker paired
Syncing account changes to paired device {serviceIdentifier : %@, guid: %@, accountInfo : %@}
Constructing RA response dictionary for services: %@
Skipping %@, paired device doesn't support syncing of that service
Setting callerID for Apple ID account to phone number {phoneNumber: %@}
Trying to sync only phone number account, but this is disallowed by the service. { service : %@, accountInfo : %@ }
Transmitting phone number
Adding additional phone numbers to sync {phoneNumbersToAdd: %@}
Syncing tinker device info to paired device { guid : %@, uris : %@, pushToken : %@ }
Don't have tinker device info to sync { token : %@, accounts_count : %ld }
Incoming account sync message {command: %@, message: %@}
Received message without command -- dropping
Received account sync incoming Tinker device info while current device is not Tinker paired
Received account sync incoming preferred account info while current device is not traditionally paired
Unrecognized command -- dropping
Synchronizing accounts {service: %@, accountInfo: %@}
No accounts, disabling all
This is an AppleID account on an iCloud based service, not disabling account %@
Disabling account %@
This is an AppleID account on an iCloud based service, not removing account %@
Removing account %@
No accounts in account info, ignoring...
Found valid phone number account %@
Retrieved phone number alias %@
Can't find eligible service, bailing { serviceName : %@, shouldNotSyncPhoneNumberAccounts: %@ }
Didn't find a local account, setting one up
Updating local account {localAccount: %@}
Account info for %@ is not registered, ignoring...
This is an iCloud based service, ignoring Apple ID account
Found valid apple ID account, cleaning up sentinel alias
Found valid Apple ID account, creating real account with remote info %@
  Creating a linked account: %@
Found existing account for service %@ and loginID %@
Incoming preferred account update {incomingDisplayName: %@, incomingAccountInfo: %@}
Service: %@ also wants to use the iMessage CallerID, attempting to update it
Service: %@ wants to use the FaceTime CallerID, attempting to update it
Incoming tinker device info { uris: %@, pushToken: %@ }
Setting expiration timer for temporary user %@ with phase %ld
Removing expiration timer for temporary user %@
Expiration timer fired for temporary user %@
Failed to get name for full account identity cluster {cluster: %{public}@}
Fetching cluster from keychain
!setState keychainClusterIdentifier=%@
Deserialized cluster
Failed to create fullClust from clusterData {clusterData: %{private}@, error: %{public}@}
Deserialized dictionary missing clusterData {deserialized: %{private}@, error: %{public}@}
Unexpected object type in deserialized dictionary {deserialized: %{private}@, error: %{public}@}
Failed to deserialize group keychain data {data: %{private}@, error: %{public}@}
Failed to get keychain data {identifier: %{public}@, error: %{public}@}
Storing cluster in Keychain {fullCluster: %{public}@}
Stored cluster in keychain {fullCluster: %{public}@}
Failed to store cluster in keychain {error: %{public}@}
Failed to serialize cluster data {fullCluster: %{public}@, dictionary: %{private}@, error: %{public}@}
Failed to create data from cluster {fullCluster: %{public}@, error: %{public}@}
Failed to store data in keychain -- Not in Circle {error: %{public}@, identifier: %{public}@}
Removing cluster from keychain
Failed to remove item from keychain {identifier: %{public}@, error: %{public}@}
Failed to create cluster from data {error: %{public}@, data: %{private}@}
Missing legacy identity data from -[<IDSClientDataRegistrationKeyManager> publicMessageProtectionIdentityDataToRegisterWithError:] -- {error: %{public}@, publicIdentityData: %{private}@}
Registering without an NGM key { hasIdentityData: %@, hasPrekeyData: %@, hasRegIdentity: %@, hasUnregIdentity: %@, keychainError: %@, serializationError: %@, generationError: %@, rollingError: %@, dataToRegisterError: %@ }
Finished capturing AutoBugCapture diagnostics for EC key loading failure { context: %@, keyLoadingError: %@, error: %@ }
Adding public key to client data: %@
Game center contacts client data: %@
Game center registration %@ found. Skipping
Missing ngm public identity data from -[<IDSClientDataRegistrationKeyManager> publicMessageProtectionIdentityDataToRegisterWithError:] -- {error: %{public}@, publicNGMIdentityData: %{private}@, publicNGMPrekeyData: %{private}@, publicIdentityData: %{private}@ }
No KT Registration Data found for key index. { serviceType: %@, ktKeyIndex: %u }
Found KT Registration Data for key index. { serviceType: %@, ktKeyIndex: %u, ktRegData: %@ }
Adding kt data signature to IDS client data. { serviceType: %@, ktKeyIndex: %u, ktRegData: %@ }
KT Registration data missing public account key or data signature. { serviceType: %@, ktKeyIndex: %u, ktRegData: %@ }
Fetched StatusKit presence capability with result: %d
Timed out waiting for presence capability
Not checking presence capability because we're not registering multiplex
StatusKit framework not available on this platform
Web Tunnel Message Completed With Respone Headers %@
Constructed registration account status metric { metric: %@ }
Checking if account is candidate for force repair {isUserDisabled: %@, isRegistered: %@, account: %@}
Waiting for migration, not firing timer
Under first lock, not firing timer
Repair timer fired: %@
Bypassing repair -> Safeview?
Bypassing repair -> hasHardDeregistered
Waiting on accounts to load, the account controller isn't ready yet
Notified of registration success for service: %@   registration: %@   account: %@
Kicking phone number accounts repair
Kicking Apple ID iCloud based accounts repair
Kicking Apple ID non-iCloud based accounts matching dsID: %@ repair
   => This was an SMS registration, let's see what we should repair
 => Failed account, let's see if we should kick it (Registration Error: %d)
 => Kicking alternate SMS based account: %@
 => Kicking alternate SMS based linked account: %@
 => Matching Apple ID account on this service is enabled: %@
 => Kicking SMS based account: %@
 => Kicking SMS based linked account: %@
 => Not kicking iCloud SMS based account: %@
 => Kicking iCloud SMS based account: %@
 => Kicking iCloud SMS based linked account: %@
 ** Tried to repair account: %@
 => Done repair attempt
   => This was an AppleID registration, let's see what we should repair
 => DSIDs match to %@, kicking for repair %@
 => Kicking Apple ID based account: %@
 => Kicking Apple ID based linked account: %@
Waiting for migration, not repairing accounts
Account repair timer fired
Cleaning up dead keychain items
Cleaning up keychain items for service: %@
 => Done
Checking disabled account {serviceIdentifier: %@, shouldRepair: %@, registrationError: %lld}
 => Checking manatee retry count { Retry Count: %@, Max Retry: %@ }
 => Trying to register to fix manatee, but reached max retry for manatee reregistration. { account uniqueID: %@, service name: %@ }
 => Trying to register to fix manatee. { account uniqueID: %@, service name: %@ }
 => Enabled, account uniqueID: %@, service name: %@
 => Enabling disabled account, and registering - we're allowed to repair: %@, service name: %@
 => Disabled, skipping: %@, service name: %@
 *** Done
   Checking account for deletion: %@
   Account is primary, it should not be deleted
  => Account does not appear to be primary, disabling it, and deleting it  (%@ <> %@)
   Checking account registration status: %@
   Not attempting repair service/account pair {registrationError: %ld, account: %@}
   Account isn't enabled or registerd -- enabling {isEnabled: %@, unregistered: %@}
   Account appears to be in good form: %@
  => Account does not appear to be primary, we shouldn't be here...  {primaryUserName: %@, loginID: %@, hasActiveAppleIDBasedAccounts: %@}
   Not enabling account due to irreparable registration error {registrationError: %ld, account: %@}
   Account isn't enabled and/or registered -- enabling {isEnabled: %@, unregistered: %@}
  => We have no active SMS registrations, skipping
   Account isn't enabled, enabling local account
 => We have no active apple ID based accounts for service: %@
Creating new account based on existing account with service %@ login ID %@
 => No other signed in AppleID accounts, skipping
Created new iTunes account based on system account { service: %@, account: %@ }
   => Has SMS Account active: %@
Repairing iTunes based accounts if needed (Primary account: %@)
iTunes isn't signed in, no repair needed, signing out
iTunes is signed in -- ignoring request to sign out { systemAccount: %@ }
Repairing iCloud based accounts if needed (Primary account: %@)
iCloud isn't signed in, no repair needed, signing out
iCloud is signed in -- ignoring request to sign out { systemAccount: %@ }
Current repair interval: %f multiplier: %ld index: %ld max: %f
Not setting up repair (registrationSupported: %@) (supportsSMSIdentification: %@)
Loaded last repair date %@
We've missed the next repair date %@, repairing now...
Loaded initial repair date %@
Generated inital repair date %@
Next repair date %@
Resetting phone number repair counter
Phone repair timer hit
 => We sent too many SMS, not retrying, disabling account
 => Garbage SMS signature, disabling
 => This appeared to be a rate limit error, re-registering
 => This appeared to be a server or connectivity error, re-registering
 => We need a new signature (server authentication failed), re-registering
 => We were missing auth credentials, re-registering
 => Not retrying for error: %d, disabling account
 => Default error: %d   disabling
 => Unregistered account, let's see if we can register it
 => account has no vetted aliases, and it's never registered, let's ignore it
 => Unknown account status, let's disable it
 => Authenticated, kicking a register
 => %@
 => *** Other status: %d
setHasSpaceAvailable %@
didReceiveData length %luB
Received data too big (%lu) - rejecting
Received zero-length data - rejecting
Received data too small (%lu) - rejecting
Data corruption! Checksum check failed (old:%04x new:%04x) data(%d): %@
Data corruption! This data did not decode(%d): %@
Bonjour request to send local message {guid: %{public}@, topic: %{public}@, deviceIDs.count: %{public}@ command: %{public}@}
Bonjour send message {guid: %{public}@, topic: %{public}@, deviceID: %{private}@, command: %{public}@}
Bonjour did send message {guid: %{public}@, topic: %{public}@, deviceID: %{private}@}
Bonjour failed to send message {guid: %{public}@, topic: %{public}@, deviceID: %{private}@}
Bonjour did finish sending message {guid: %{public}@, topic: %{public}@, sentDeviceIDs.count: %{private}@
Bonjour failed to send message to any recipient {guid: %{public}@, topic: %{public}@, deviceIDs: %{private}@}
Bonjour received message {guid: %{public}@, topic: %{public}@, deviceID: %{private}@, command: %{public}@}
%@: control message: hello cannot decode controlChannelVersion
%@: control message: hello cannot decode productName
%@: control message: hello cannot decode productVersion
%@: control message: hello cannot decode productBuildVersion
%@: control message: hello cannot decode model
Optional field data byte size: %lu
Instance ID: %@
Device uniqueID: %@
Capability flags: %@
Service minimum compatibility version: %@
Unknown field type: %u
ProtocolVersion: %@, min/max: %@ %@
getUint32FromBytes, uint32_t should be 4 bytes, not %u bytes, field: %u
getUint64FromBytes, uint64_t should be 8 bytes, not %u bytes, field: %u
getUint16FromBytes, uint16_t should be 2 bytes, not %u bytes, field: %u
IDSDRegistrationPushManager now tracking registered account {accountID: %@}
IDSDRegistrationPushManager stopped tracking registered account {accountID: %@}
IDSDRegistrationPushManager is now accepting incoming pushes
IDSDRegistrationPushManager is no longer accepting incoming pushes
Device received sysdiagnose request push {error code: %@, serverErrorDetail: %@, userFacingMessage: %@}
Ignoring sysdiagnose request push (not enough time has passed since last prompt) { now: %f, lastPromptTime: %f, delta: %f }
Device received request for prompt {title: %@, message: %@, default button: %@, default url: %@, alternate button: %@, alternate url: %@}
Ignoring request for prompt (not enough time has passed since last prompt) { now: %f, lastPromptTime: %f, delta: %f }
Registration push manager received registration push
Device received registration push {style: %@, userID: %@, service: %@}
System not setup -- ignoring registration push
Found matching candidate account for registration push {account: %@}
Unhandled action in registration push message {action: %ld}
Registration push manager re-identify
Re-identifying accounts in response to registration push
We can't re-identify a temporary account. Nuking Home Number user %@
Registration push manager re-provision
Re-provisioning accounts in response to registration push
We can't re-provision a temporary account. Nuking Home Number user %@
Registration push manager re-register
Re-registering accounts in response to registration push
Registration push manager repair registration
Repairing registration on accounts in response to registration push
Registration push manager validate credentials
Validating credentials in response to registration push
Received validate credentials response {userID: %@, status: %@, origin: %@, message: %@}
Validate credentials returned an error -- taking no action {status: %@}
Updating registration control state { registrationType: %lld, toState: %lld, err: %d }
Registration control state can't be loaded because the keychain is upgrading { err: %d }
Registration control state item was not present in the keychain
Registration control state can't be loaded because of a keychain error { err: %d }
Loaded registration control state { registrationType: %lld, state: %@, error: %@ }
Told to report spam with localObject %@ for service: %@
Process not entitled to report spam
IDS Server reports that general spam reporting v1 is disabled.
Couldn't find account with alias for service {serviceIdentifier: %@, alias: %@}
Server Bag provided us with v1 spam reporting value isDisabled: %@
Gossip is not enabled for service: %@
Trying to gossip to own device. Will not gossip.
Error retrieving STH from transparencyd: %@
Successfully retrieved STH from transparencyd, will gossip.
Didn't pass dice roll, will not gossip
Sending sth's to transparencyd failed with error: %@
Successfully sent sth's to transparencyd.
Unexpected deviceIdentity class {identity: %{public}@}
Unable to get group.publicRepresentation {groupInfo: %{private}@, groupContext: %{private}@, previousGroup: %{public}@, error: %{public}@}
Unable to create group signature {groupInfo: %{private}@, groupContext: %{private}@, previousGroup: %{public}@, error: %{public}@}
Saved group to group server {groupID: %{private}@}
Saved group to group server { groupID: %{public}@ }
Failed to save group to groupServer {pg: %{private}@, publicGroupRepresentation: %{private}@, signature: %{private}@, forwardingTicket: %{private}@, groupServerError: %{private}@}
responseEngram %@ responseGroupID %@ error %@
Got groups {%@ %@ %@ %@}
Fetched Entry from GroupServer {entry: %{public}@}
Fetched Group from GroupServer {groupID: %{public}@}
Failed to set groupID on created group {entry: %{public}@, group: %{public}@, groupID: %{public}@, error: %{public}@}
Failed to create group from server reponse entry {entry: %{public}@, publicSigningIdentity: %{public}@, error: %{public}@}
Failed to create fetched group, could not create publicSigningIdentity {deviceIdentity: %{public}@, error: %{public}@
Unexpected sponsot accountIdentity {sponsorPublicAccountIdentity: %{public}@}
No sponsor pair {entry.publicKeyData: %{public}@, keyToSponsorPairMap.lenth: %{public}@}
got groups %{public}@
Groups returned from server don't contain expected group {groupID: %{public}@, entries: %{public}@, resultGroup.applicationData: %{private}@}
Failed to get group {groupID: %{public}@, error: %{public}@}
group->groupPublicData -- Start {group: %{private}@}
Failed group->groupPublicData -- unexpected accountIdeneity class {groupContext.accountIdentity: %{public}@, group: %{private}@}
Failed group->groupPublicData -- unexpected cypher {group.cypher: %{public}@, group: %{private}@}
Failed group->groupPublicData -- could not create publicGroupData {error: %{public}@, group: %{private}@}
Failed group->groupPublicData -- could not create signature {error: %{public}@, group: %{private}@}
Failed group->groupPublicData -- could not create data from entry {error: %{public}@, group: %{private}@}
group->groupPublicData -- Success {publicDataRepresentation.length: %{public}@}
group->groupPublicData -- Success {publicDataRepresentation: %{private}@}
groupPublicData->Group -- Start {data: %{private}@}
Failed groupPublicData->Group {error: %{public}@, data: %{private}@}
Failed group->groupPublicData -- unexpected deviceIdentity class {groupContext.accountIdentity: %{public}@, data: %{private}@}
Failed group->groupPublicData -- couldn't get pair from groupData {error: %{public}@, entry: %{private}@}
Failed group->groupPublicData -- no participants {pair: %{private}@}
Failed group->groupPublicData -- Failed to create group {error: %{public}@, entry: %{public}@, pair: %{public}@, sponsor: %{public}@}
Failed group->groupPublicData -- Unexpected sponsor accountKeyClass {sponsor: %{public}@}
group->groupPublicData -- Success {group: %{private}@}
Cypher was not of the expected type, this is a programmer error {cypher : %{public}@}
Unexpected class for deviceParticipantPublicKey {publicKey: %{public}@, participant: %{private}@
Failed to create GroupServerEntry from publicDataRepresentation -- failed to deserialize {error: %{public}@, data: %{private}@}
Failed to create GroupServerEntry dataRepresentation -- Failed to serialize {error: %{public}@, dictionary: %{public}@}
We are under first data protection lock, we cannot initialize KVS.
Unable to convert CloudKit record to device record {cloudKitRecord: %@, deviceData: %@, deviceMetadata: %@}
Unable to convert device record to CloudKit record {deviceRecord: %@}
Cached record zone exists -- continuing without zone fetch {cachedRecordZone: %@}
Completed CloudKit zone fetch {zoneID: %@, recordZonesByID: %@, fetchError: %@}
CloudKit zone not found -- creating it
Completed CloudKit zone modification (save) operation {savedRecordZones: %@, deletedRecordZoneIDs: %@, modifyError: %@}
Failed to create CloudKit zone {modifyError: %@}
Successfully created CloudKit zone
Starting CloudKit operation to create KT zone {operation: %@}
Failed to query CloudKit for available zones {error: %@}
CloudKit zone exists -- no need to create it
Starting CloudKit zone fetch {operation: %@}
No valid CKContainer, returning.
Checking CloudKit device to device encryption prerequisites.
CloudKit device to device encryption prerequisites did not change.
CloudKit device to device encryption prerequisites changed.
Cloudkit device to device encryption is now available.
Determining account eligibility for device-to-device encryption
Account device-to-device encryption eligibility task final block called {timedOut: %@}
Starting device-to-device encryption eligibility task with timeout {timeoutInSeconds: %f}
Starting CloudKit container account info fetch
Completed CloudKit container account info fetch {supportsDeviceToDeviceEncryption: %@, deviceToDeviceEncryptionStatus: %ld, accountInfo: %@, accountInfoError: %@}
Upserting trusted device record { deviceRecord: %@ }, { recordsToModify: %@ }, { recordsToDelete: %@ }
Trusted device upsert task final block called {timedOut: %@}
Starting trusted device upsert task with timeout {timeoutInSeconds: %f}
Last known successful upsert device record is identical to the current request -- short-circuiting without performing upsert {deviceRecord: %@}
Verifying encryption prerequisites for trusted device record upsert
Device to device encryption is not currently available for this CloudKit container -- not upserting trusted device record
Device to device encryption is not currently able to be determined for this CloudKit container -- not upserting trusted device record
Zone creation failed -- not upserting trusted device record
Failed to create CloudKit record from device record {deviceRecord: %@}
Completed CloudKit save record operation {savedRecords: %@, deletedRecordIDs: %@, operationError: %@}
Failed CloudKit save operation for trusted device {error: %@}
CloudKit save operation for trusted device succeeded
Starting CloudKit operation to modify (save) KT record {operation: %@}
Nuking key transparency device records
Key transparency device record nuke task final block called {timedOut: %@}
Starting key transparency device record nuke task with timeout {timeoutInSeconds: %f}
Deleting zone {zoneID: %@}
Completed CloudKit zone modification (delete) operation {savedRecordZones: %@, deletedRecordZoneIDs: %@, modifyError: %@}
Failed to delete CloudKit zone {modifyError: %@}
Successfully deleted CloudKit zone
Starting CloudKit operation to delete KT zone {operation: %@}
Fetching key transparency device records
Key transparency device record fetch task final block called {timedOut: %@}
Starting key transparency device record fetch task with timeout {timeoutInSeconds: %f}
Cache miss for key transparency device records -- starting fetch {promise: %@}
Updated cached promise for key transparency device records {promise: %@}
Setting timer to clean up cached promise for key transparency device records {promise: %@, cleanUpDelay: %f}
Clearing cached promise for key transparency device records {promise: %@}
Cache hit for key transparency device records {promise: %@}
Verifying encryption prerequisites for trusted device records fetch
Device to device encryption is not currently available for this CloudKit container -- not fetching trusted device record
Zone creation failed -- not fetching trusted device record
Fetched CloudKit record of trusted device {record: %@, device: %@, deviceMetadata: %@}
Completed CloudKit query for trusted devices {queryError: %@, cursor: %@ results: %@}
Found device data from CloudKit record {device: %@, deviceMetadata: %@}
Failed CloudKit query for KT loggable data {error: %@, query: %@}
Starting CloudKit operation to query KT records {query: %@, operation: %@}
Received KVS update notification. {Reason: %@}
Received KVS Quota Violation Notification.
Inserting KVS entry {key: %@, value: %@}
KVS has not yet loaded.
Removing KVS entry {key: %@}
Fetching all entries from KVS.
Wiping all entries from KVS.
Trying to force sync KVS.
Failed to force sync KVS.
Successfully force synced KVS.
Failed to weak link %@ from %@!
Unsupported schema version: %@
An unnecessary paired device keychain migration was attempted.
System is shutting down, not creating daemon
Resetting preferences to 0 for all services
Failed to create to-be-deleted directory %@ error %@
Failed to move incoming files to to-be-deleted directory %@ error %@ -- delete anyway
Last resort file removal took %0.6lf seconds
Delayed background file removal took %0.6lf seconds
Failed to create incoming files directory %@ error %@
IDS incoming files directory cleanup-on-init took %0.6lf seconds
System did lock
Alerted that duet resource availability has changed.
No more listeners terminating
Shutting down
IDSAgent took %f seconds to launch
Service info: %@
Enabled accounts info: %@
Dependent devices info: %@
Linked devices info: %@
Family info: %@
Family devices info: %@
Max Message Size: %@
Persisted pending invitations: %@
Persisted received invitations: %@
Active device uniqueID: %@
Found existing listener %@ for pid %d, cleaning up
Exception handling existing listener cleanup: %@
Tried to set up listener (ID: %@) with empty listener port
Tried to set up listener (port: %@) with empty ID
Setting up connection to listener ID: %@  bundle ID: %@  setupInfo %@ entitlements %@  pid: %d  name: %@  connection: %p notificationServices %@
Exception generating setup information for listener: %@
Daemon was hard reset, ignoring incoming request
** Empty local object passed in for listener check
No listener found for local object: %@
Tried to remove nil listener object
Removing listener ID: %@
Removed Apple Care listener
We had %lu %@ before removing listener, now we have %lu. This listener had %lu.
Exception removing listener: %@
Exception removing listener object: %@
Exception removing local listener object: %@
Exception looking up listeners: %@
remoteObjectDiedNotification: %@
localObjectDiedNotification: %@
Resetting link preferences for process %@
Starting push handling with services %@ waking topics: %@ opportunistic topics: %@ nonwaking topics %@
Updating push handling with services %@ waking topics: %@ opportunistic topics: %@ nonwaking topics: %@
Updating local push handling with topics: %@
Updating push handling with commands %@
Daemon was hard reset, ignoring broadcast
Service found to find broadcaster %@   topic: %@
All targets for broadcast %@
Broadcast Priority: %d Service: %@ 
Broadcast ID: %lld
Broadcast: outgoing generic notification %lld
Working on outgoing broadcast
Broadcast: starting to work on outgoing notification id %lld
Daemon was hard reset, not enqueuing broadcast
Broadcast: Couldn't find a valid service for the given topic %@
Broadcast: scheduling broadcast %lld on topic %@ to clients needsTargetAck %d targetsAlive %d shouldLaunch %d
Broadcast: broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u
IDSDaemon: Exception caught broadcasting message: %@
Broadcast: failed to deliver broadcast %lld to targets, enqueueing for later dispatch!
Broadcast: Enqueueing broadcast %lld on topic %@ 
Broadcast: Performing enqueued broadcast %lld for topic %@
Broadcast: Broadcast %lld enqueued at %@ has timed out - Calling timed out broadcast block for topic %@ with nil broadcaster to allow cleanup
Broadcast: enqueued broadcast %lld of topic %@ doesn't find target with service %@ entitlement %@ command %@ capabilities %u
Broadcast: done working on outgoing notification id %lld
Broadcast: Broadcasting xpc wake notification %@ to awaken clients of %@.
Broadcast: Broadcasting darwin notification %@ to awaken clients of %@.
Launching on-demand services for queued broadcast attempts
Couldn't find a valid service for the given identifier %@
Broadcast: Received request to drop enqueued broadcast %lld
Broadcast: Dropping enqueued broadcast %lld
Broadcast: Resetting queued broadcasts for services %@ priority %ld 
Broadcast: Processing queued broadcasts for services %@ priority %ld forceRetry %d 
Broadcast: previously enqueued broadcast %lld for service %@ succeeded %d needsClientAck %d forceRetry %d 
Processed queued broadcast attempts - %lu remaining for %@
Dropping queued broadcasts for all services priority %ld
Dropping %@ for %@
Dropped queued broadcasts for all services priority %ld
Entitling portName %@ for all services %@
Granting access %d to listener: %@ pid: %d usingSync: YES givenEntitlements: %@ parsedEntitlements: %@
PID: %d was suspended
Exception handling pid suspension: %@
Incoming listener services %@ commands %@ caps %d
Allowing listener services %@ commands %@ caps %d
Got %@ %@ for localObjectIndex %lu
%s: received client request to change notification services from %@ to %@ 
Setting wakingPushPriority %ld for topic %@, was %@
Removing waking push priority for service %@ in store
received socket %@
IDSDaemon - Could not find session with uniqueID %@ to setup client socket, ignoring...
opensocket [%@] context=[%@] (handlerID:%@) ***
opensocket was called for a non-default device without nsuuid!!!!!!!!
client directly calling UTUN's openSocketWithOptions
%@ didn't specify any priority for %@. This will use the default priority queue.
client's openSocketWithOptions call returned socket %d, error %@
utun finished connection options[%@] socket(%d) handlerID[%@] error[%@] socketObject[%@]
closesocket [%@]
Broadcasting delivery stats to client
persistPendingInvitation: persisting invitation {%@} for service {%@}
persistPendingInvitation: Cannot persist invitation {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} 
persistReceivedInvitation: persisting invitation {%@} for service {%@}
persistReceivedInvitation: Cannot persist invitation {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} 
removePendingInvitation: removing invitations with identifiers {%@} for service {%@}
removePendingInvitation: Cannot remove invitations {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} 
removeReceivedInvitation: removing invitations with identifiers {%@} for service {%@}
removeReceivedInvitation: Cannot remove invitations {%@} for service {%@} isInvitationService {%@}, isMessagingEntitled {%@} 
broadcasting tinkerDeviceAdded on %@
broadcasting tinkerDeviceRemoved on %@
broadcasting tinkerDeviceUpdated on %@
IDSDaemonMIGInterface auth port died: %@
IDSDaemonMIGInterface: Could not create server with name: %@
peer(%d) received XPC_ERROR_CONNECTION_INVALID
peer(%d) received XPC_ERROR_CONNECTION_INTERRUPTED
peer(%d) received XPC_ERROR_TERMINATION_IMMINENT
Port name request for: %@ from pid: %d granted: %@
Data separated port name request for: %@ from pid: %d -- rejecting %@
Incoming file descriptor request
Data separated request came in to %@ from peer: %@ -- rejecting %@
updateService: %{public}@, withPreferences: %{public}@.
Resetting preferences to 0 for service: %{public}@, at time: %{public}@
Cannot update preferences for service: %{public}@ with negative values, preferences: %{public}@.
Getting accumulativePreferencesForAllServices. Service: %{public}@, preferences: %{public}@
Missing IDS Firewall entitlement -- failing creation of IDSDXPCFirewall collaborator {connection: %@}
Fetching impacted services for service {%@}
Update to category %u addEntries %@
Continuing to adding entries to firewall with queryError %@
Update to category %u removeEntries %@
Update to category %u removeDonatedEntries %@
Update to category %u replaceAllEntries %@
Update to category %u replaceEntries %@
Update to category %u queryError %@ addEntries %@
Fetching all entries for category %u
Update to category %u removeAllDonatedEntries
Update to category %u removeAllEntries
Fetching recently blocked handles for service {%@}
Update to category %u populateMergeIDForEntries %@
%s: No registered account found for service %@. localURI {%@} cert {%@}
Received query result with success {%@} and result {%@}
Populating merge for handles {%@}
Getting endpoints for handles {%@}
Found endpoints for handles {%@} out of requested handles {%@}
Did not query handles due to disabled feature flag
Received update message: %@
GUID %@ Uploading data as attachment for token: %@
GUID %@ Finished sending attachment. Cleaning up temporary file.
GUID %@ finished constructing aggregatable messages
accountIdentitiesClusterForRegistration -- start
Account identity cluster election failed {error: %{public}@}
Tried to get account identity cluster with device not in keychain sync circle {error: %{public}@}
Engram inactive -- not fetching {error: %{public}@}
Existing account identity cluster fetch failed {error: %{public}@}, seal: %{public}@
Tried to get account identity cluster with Engram disabled {error: %{public}@}
existingFullDeviceIdentity -- start
Failed existingFullDeviceIdentity -- missing cluster {error: %{public}@}
Failed existingFullDeviceIdentity -- keychain item not found {error: %{public}@}
Failed existingFullDeviceIdentity -- keychain error getting device identity {error: %{public}@}
Failed getExistingFullDeviceIdentity -- missing fullAdminIdentity {error: %{public}@, cluster: %{public}@}
Failed existingFullDeviceIdentity -- missing publicAdminIdentity {error: %{public}@, fullAdminIdentity: %{public}@}
Failed existingFullDeviceidentity -- failed to create deviceIdentity {error: %{public}@, publicAdminIdentity: %{public}@, data: %{private}@}
existingFullDeviceIdentity -- success {deviceIdentity: %{public}@}
Notifying Engram key store that identities did update {listeners: %@}
IDS is not connected, do not send monitoring message.
Connectivity monitor %@ got response %ld with error %@
Reunion: %s services: %@
ReunionSync has entitlemnt for non-empty service list {entitlement: com.apple.private.ids.prefer-infrawifi, services: %{public}@}
ReunionSync require entitlement for non-empty service list {entitlement: com.apple.private.ids.prefer-infrawifi, services: %{public}@}
Fetching Family
Family Fetch returned with error code: %ld
Device is not part of a family. Will not allow force fetch until family updates.
Pulling out previously stored messages sent to a family service.
Error fetching family, will allow trying again later.
Initializing IDS Family Manager
We're doing a  Forced Fetch already, we'll let that continue
Starting Forced Fetch. Fetch count is now at: %d
Notification received for family update.
broadcasting family update on %@
control channel simulating decryption failure ############### - close socket / call receive handler
UTunController control channel for [%@] connected for {socket:%d} read (getsockopt=%d error=%d: %s)
control channel receiving control message on {socket:%d} ...
UTunController control channel for [%@] disconnected on {socket:%d} recv: errno=%d: %s
UTunController control channel for [%@] disconnected on {socket:%d} recv: connection closed
control channel failed to decrypt (%s) of control channel data: %ld (magnet %u encrypting %u, pairedLocally %u pairedRemotely %u)
Dispatch receiveHandler
receiveHandler is being called, so ignore this one
control channel decrypted (%s) new message (%@, size=%lu  data: %@) (from %lu)
control channel corruption detection heuristic hit - resetting
UTunController control channel for [%{public}@] connected for write {socket:%d} (getsockopt=%d error=%d: %s)
control channel sending control message on {socket:%d} ... (have %lu)
UTunController control channel for [%@] disconnected on send {socket:%d}: errno=%d: %s
control channel sent 0 bytes on {socket:%d} - try again later (%d)
control channel sent %ld bytes on {socket:%d} (%lu left) (s:%d)
control channel finished sending bytes but no message to remove
control channel finished sending bytes no more message send pending
control channel cannot use nil connection
control channel connect ready for nw_connection (%p) %@ {socket:%d}, event error: %@, deviceUniqueID[%{private}@]
control channel connect ready but connection already canceled - exit without TPAddSocket
control channel failure/invalid event but connection already canceled - exit without causing additional cleanup
control channel connection event %s for nw_connection (%p) %@ {socket:%d} event error: %@, deviceUniqueID[%{private}@]
control channel connection %@ canceled, _connection %@, _canceledConnection %@
gatherDataToInvestigate_59608320: connection: %@, _connection: %@
control channel _cancelConnectionAndResetDataConnections _connection %@, _canceledConnection %@
control channel _cancelConnectionAndResetDataConnections missing _connection!
Clearing %@
control channel suspending {socket:%d} (%d) awaiting default paired encryption negotiation
control channel encrypted (%s) new message (%p, size=%lu original size=%u  data: %@) (_sendingPriorityMessage: %d)
control channel failed to encrypt (%s) message [%@] error: %ld (magnet %u encrypting %u, pairedLocally %u pairedRemotely %u)
Handle Fairplay authentication failure...
processOTRNegotiationMessage: totalLength: %u, less than 4
got control message: invalid OTR version number: %d.
control message: OTRNegotiation cannot decode token
processOTRNegotiationMessage: totalLength: %u, dataBytesLeft: %lu
control message: OTRNegotiation cannot decode negotiation data
got control message: OTRNegotiationData (%uB) for %@, count:%08x
IDS Provision Temporary Phone response: %@
Unparseable Home Number expiration: %@
%@ - %@
Could not split the profileId in order to send only the numerical part to AuthKit. profileId: %@
DSID NSNumber extracted from the profile id is null. profileId: %@
Caching object {key: %{private}@, object: %{private}@}
Evicting object {key: %{private}@
Delegate return NO to shouldEvict -- Bail {key: %{private}@}
Tried to evict object that is not in cache {key: %{private}@}
Eviction timer did start {interval: %.6f, leeway: %.6f
Stop eviction timer if empty
Not stopping eviction timer {backingStore.count: %ld}
Stopping eviction timer {backingStore.count: %ld}
Evicting items {currentDate: %{public}@}
Evicting item {key: %{private}@, evictionDate: %{public}@}
Not evicting item {key: %{private}@, evictionDate: %{public}@
Delegate returned NO shouldTTLCacheEvictExpiredItems -- Bail
Cache miss {key: %{private}@
Delegate replace cached object {key: %{private}@, previous: %{private}@, replacement: %{private}@}
Replacement object is nil {key: %{private}@}
Extending TTL for fetched object {key: %{private}@, oldEvictDate: %{public}@, newEvictDate: %{public}@
Most Recent PNR Reasons %@
Most Recent IDS Registration Reason %ld
Got number of broadcast cache MKM bag value {key: %@, value: %u}
Couldn't get broadcast cache MKM bag value, using default value {key used: %@, value: %u}
Created group MkM cache { self: %@ }
Resetting group MkM cache { self: %@ }
Resetting remote MkM cache { self: %@ }
Noted received MkM collection in MkM cache { self: %@ }
Number of peer MkM to broadcast is over maximum permitted value -- introducing sampling { cachedCount: %lu, maximumCountToBroadcast: %u }
Adding next local MkM to collection to broadcast { nextLocalMkM: %@ self: %@ }
Adding remote MkM set to collection to broadcast { remoteMkMSet: %@, self: %@ }
Starting automatic cache reset timer if needed { self: %@, resetInterval: %f, inFlightResetBlock: %@ }
Automatic cache reset timer fired { sself: %@, resetBlock: %@ }
Initializing validation session { self: %@ }
Activating validation session { self: %@, validationData: %@, serverKey: %@, scoringNonce: %@ }
Signing data using validation session { self: %@ }
Scoring device within validation session { self: %@ }
Invalidating validation session { self: %@ }
Found default paired ID
Did not find fromToken or FromDeviceUniqueID in %@
Did not find an account with that ID
Did not find a default paired device on this account %@
This is the default paired device
This is not the default paired device
ids/registration/account-controller/state
Current system account state { iCloudAccount: %@, iTunesAccount: %@ }
Current IDS device state { deviceName: %@, model: %@, productName: %@, productVersion: %@, build: %@, pushToken: %@, pushIdentity: %@, idsUniqueID: %@, prototypeMode: %@, environment: %@ }
Current IDS system monitor state { isSetup: %@, isUnderDataProtectionLock: %@, isUnderFirstDataProtectionLock: %@, systemIsShuttingDown: %@ }
Current IDS message protection state { publicMessageProtectionData: %@ }
Current IDS server bag state { serverBag: %@, isLoaded: %@, isLoading: %@, isServerAvailable: %@, environment: %@ }
Current IDS service capability state { regionInfo: %@, iMessageSupported: %@, faceTimeAudioSupported: %@, faceTimeMultiwaySupported: %@ }
Current IDS phone number validation state { stateMachines: %@ }
Current IDS user store state { userStore: %@ }
Current IDS phone profile state { isPNRSupported: %@, SIMs: %@, selectedTelephonyLabelID: %@ }
Current IDS accounts list:
Current IDS account info dictionaries:
  * Device Name: %@    Service: %@     Hardware: %@    Token: %@   Unique ID: %@   Linked URIs: %@   Device Data: %@   Sub-services: %@   Identities: %@   Client data: %@   public key: %@ HSA trusted: %@
Hard deregister requested
Hard deregister complete, clearing accounts and shutting down daemon
Triggering final deregister
Account with unique ID %@ already removed, ignoring...
Tried to remove a nil account, ignoring...
Tried to remove ad hoc account directly, ignoring... { uniqueID: %@ }
Tried to add a nil account, ignoring...
Account with unique ID %@ already added, ignoring...
Adding account %@
Delaying broadcast for unprovisioned temporary account %@
Broadcaster for account added
Tried to add a nil primary account, ignoring...
Tried to add ad hoc account directly, ignoring... { uniqueID: %@ }
Primary account with unique ID %@ already added, ignoring...
  ** Found existing matching account, removing: %@
Removing linked account: %@
Client requested add account with unique ID %@ (Environment: %@)
Client requested remove account with unique ID %@ (Environment: %@)
Force removing account {account: %@}
Tried to disable a primary account with no unique ID, ignoring...
Tried to disable a primary account we don't know about, ignoring... { uniqueID: %@ }
Tried to disable ad hoc account directly, ignoring... { uniqueID: %@ }
Account with unique ID %@ is already disabled, ignoring...
Tried to disable an account with no unique ID, ignoring...
Tried to disable an account we don't know about, ignoring...
Disable account with uniqueID %@ login ID %@ service %@ called (Environment: %@) %@
Clearing service's cache {serviceIdentifier: %@}
Tried to enable a primary account with no unique ID, ignoring...
Tried to enable a primary account we don't know about, ignoring... { uniqueID: %@ }
Tried to enable ad hoc account directly, ignoring.. { uniqueID: %@ }
Tried to enable a restricted account, ignoring.. { account: %@ }
Account with unique ID %@ is already enabled, ignoring...
Tried to enable an account with no unique ID, ignoring...
Tried to enable an account we don't know about, ignoring...
Tried to enable an account with unsupported type -- ignoring and disabling... { serviceType: %@, accountType: %d }
Enable account with uniqueID %@ login ID %@ service %@ called (Environment: %@) %@
 Will disable similar account with accountID: %@
   Forcing account to disable: %@
Client requested enable account with unique ID %@ (Environment: %@)
Client requested disable account with unique ID %@ (Environment: %@)
Checking %@
 => Account disabled
Account matches: %@
Finding account with service name %@ aliasURI %@
Account matches !
Found no match
Finding account with service name %@ loginID %@
  => No account found for unique ID: %@
Finding account with service name %@ myID %@
Account matches!
Unknown myID type -- type must be a valid domain { myID: %@ }
  => Found **extra** account %@, deleting...
  => Found **mismatched** account %@ ID %@, deleting...
  => Found existing account %@
  => (Thread Safe) Found service: %p (for UID: %@)
  => (Thread Safe) No service found for unique ID: %@
 => Creating a local account for service %@
Setting up local accounts
Finished setting up local accounts
Refreshing local accounts
Cleaning up local account %@
Cleaning up account for local service %@
Using %@ to trigger a re-register
One of the local accounts was registered in the cloud, triggering a re-register to update
Starting local setup
Stopping local setup
 * Tried to setup ad hoc account directly %@, ignoring...
 * No adhoc services for %@, ignoring...
 * Setting up adhoc accounts for %@
Cannot enable adhoc service {service: %@, isTinker: %@, cannotEnableOnTraditionalWatch: %@, cannotEnableOnTinkerWatch: %@}
  => Found **extra** adhoc account %@, deleting...
  => Found **mismatched** adhoc account %@ primary ID %@, deleting...
  => Found existing adhoc account %@
  => Created ad hoc account %@
  => Updating primary account info for %@
  * Enabling account: %@
  * Disabling account: %@
  => Triggering a re-register for primary account
 current service names %@ new service names %@
Setting up ad hoc accounts
 => Done setting up ad hoc accounts
Setting up linked accounts, if necessary
 Service: %@  has linked services: %@
 We already have linked accounts, let's just double check the activation
 * They're not the same, let's fix that
 * Enabling account: %@
 * Disabling account: %@
  ... and enabling it
 => Done setting up linked accounts
Not importing legacy accounts, we've already done this
Importing from domain %@ => %@
Skipping service import: %@, we already have accounts: %@
Legacy Keys: %@
Legacy Preferences: %@
  => Nothing interesting in the accounts, moving along
Importing accounts...
Importing account: %@
Login ID: %@, new login: %@
Exception migrating legacy accounts { service: %@, exception: %@ }
Migrating legacy account found no enabled accounts { legacyDomain : %@ }
Persisting %@ accounts
Computed force register hash {matched: %@, old: %@, new: %@}
Deleting legacy account prefs {path: %@, success: %@, error: %@}
SU cleanup
Scheduling a re-register in %d seconds
Re-register timer hit
We still need to re-register, triggering it now...
We picked %@ to re-register
We've already re-registered, ignoring...
We found a phone number alias on the iMessage account, triggering GDR request for %@
We found a phone number alias on the FaceTime account, triggering GDR request for %@
All services to remove: %@
Setting up local
Not setting up local
Dropped aliases { count: %@ }
Donor accounts { count: %@ }
Adding %@ to %@
Loaded services { count: %@ }
We already have an existing account with for this uniqueID -- not loading { uniqueID: %@, existingAccountInfo: %@, newAccountInfo: %@ }
Failed to create account { uniqueID: %@, service: %@, accountInfo: %@ }
Tried to load account on a device that does not support this service/account type -- dropping! { uniqueID: %@, serviceType: %@, accountType: %d, accountInfo: %@ }
Tried to load a phone number account for a service that does not support phone number accounts -- dropping! { uniqueID: %@, serviceType: %@, accountType: %d, accountInfo: %@ }
Loaded accounts { count: %@ }
Enabling accounts { accounts: %@ }
Performed one time user intent migration on upgrade
Bad preference domain { service: %@ }
Defaults dictionary loaded { domain: %@, accounts: %@, enabledAccounts: %@ }
Failed to create account { service: %@, uniqueID: %@, dicitonary: %@ }
Clearing legacy domain { domain: %@ }
Loaded legacy accounts { count: %@ }
Enabling legacy accounts { accounts: %@ }
  ** Found active SMS based account: %@
Re-registered succesfully, setting force re-register version to %d
Not triggering remote session update, already updated {appIntegerValue: %llu, latestVersion: %llu, interestingServices: %@}
Not triggering remote session update, server bag disabled {bagDisabledValue: %@, appIntegerValue: %llu, latestVersion: %llu, interestingServices: %@}
Triggering remote session update {appIntegerValue: %llu, latestVersion: %llu, interestingServices: %@}
       found push token in: %@
No public key found {deviceID: %@}
No uniqueID provided, can't save uuid %@
New properties after set %@
Finished broadcasting nsuuid %@ to all services
Device Properties - Current UniqueIDs: %@
Device Properties - New Unique IDs: %@
Device Properties - Old Unique IDs: %@
Saving device properties settings: %@   (domain: %@)
Loading device properties
 => Loaded device properties -- found bad keys! {keysToDelete: %@}
 => Loaded device properties %@
 => No device properties loaded
Updating AuthKit for DSID: %@, AKAppleIDServiceType: %ld and inUse: %@
Couldn't find device certificate (service: %@)  (uri: %@)
Couldn't find account (service %@)  (uri: %@)
Dealloc UDPGlobalLink %@
Invalidate UDPGlobalLink
createConnectionData - localPartyID=%@
invalid link state %s
processRemoteConnectionData %@
invalid remote connection data
invalid remote connection data, %uB
connection data has unsupported version %d
connection data has IPv4 address (%d/%d) [%s:%u]
skip address pair [%@-%@].
add address pair [%@-%@]
No addresss pair is on same network, cannot connect.
startConnectionForDevice failed due to invalid deviceID=%@
startConnectionForDevice - deviceID=%@ isInitiator=%@ remotePartyID=%@ stunMICheck=%@
startConnectionForDevice failed due to invalid remotePartyID=%@
process delayed nomination request block %p.
Nominated connection matches remotePartyID %s.
add local adress %@
connection blob size (%dB) is too big, skip remaining.
#IPv4 address (%d) reaches max allowed, skip remaining.
failed to create connection data
createConnectionData - done (#ipv4: %d, length: %dB).
Link is invalidated, stop sending connection check request
Start connection check.
Connection check is done.
Connection check is timed out, cannot connect to remote party.
Link is invalidated, stop sending nominate request
_sendNominateRequest failed due to invalid localPartyID %@
Start nominate request.
Nominate request is done.
Nominate request timed out, cannot connect to remote party.
Connection echo is done.
Connection echo timed out.
echo timer %p fired (%.6f).
link is invalidated, stop echo timer.
start echo timer %p.
stop echo timer %p.
update result: src[%s], dst[%s].
add result: src[%s], dst[%s].
receive binding request %@ for [%s(%u)-%s].
process nomination request before Accept, this should NOT happen.
receive nominate binding request with remotePartyID %s.
receive nomination request with invalid remotePartyID, ignore.
nominate request with count(%d) matches remoteID %s
skip binding response to %s, socket on if_index %d is already connected to %s.
send binding response %@ for [%s(%u)-%s].
send binding response failed with %s
receive binding response %@ for [%s(%u)-%s], RTT(%.3f ms)
Nominated connection(%d) is accepted by remoteParty.
Notifying remote party is reachable for ACCEPT.
receive echo request with invalid count(%d), ignore.
receive echo request (count:%04x) for %s(%u)-%s.
send echo response (count:%04x) for %s(%u)-%s.
send echo response failed with %s
receive old echo response (%d), ignore.
receive invalid echo resopnse.
receive echo response (count:%04x, rtt:%4d ms) for %s(%u)-%s.
receive invalid data indication.
invalid data attr length (%dB).
receive indication data (%zdB) for [%s(%u)-%s].
_processStunPacket failed.
failed to verify message intergrity for stun packet type %04x.
### stun packet type %04x passed MI check.
delay nomination request before Accept.
_processStunPacket - receive invalid STUN message, type (%04X)
send stun data indication (new:%zdB old:%zdB).
sending a packet (%zdB) = %s
didReceivePacket - STUN packet (%zdB) [type:%04X %@]
didReceivePacket - unknown packet (%zdB)
============= New WPLinkManager %@ starting =============
Created a new WPContinuity instance %@
Invalidating WPContinuity instance %@
client instance created
calling continuityDidUpdateStateToState:%s
all client instances removed, currently scanning: %@   currently advertising: %@
  => Stopping advertisement for type: %s
  => Stopping scanning for type: %s
startAdvertisingOfType:%s withData:%@ withOptions:%@
  => Device not powered on
stopAdvertisingOfType:%s
startScanningForType:%s withData:%@ mask:%@ peers: %@
startScanningForType:%s withData:%@ mask:%@
startScanningForType:%s withData:%@ mask:%@ peers:%@ boostedScan:%@ duplicates:%@
startScanningForType:%s withData:%@ mask:%@ boostedScan:%@ duplicates:%@
stopScanningForType:%s
connectToPeer %{public}@, continuity %@
already connected to %{public}@.
already connecting to %{public}@  (Time: %f)
*** starting connection to %{public}@
disconnectFromPeer %{public}@, continuity %{public}@
already disconnecting from %{public}@  (Time: %f)
*** starting disconnected from %{public}@
removing a link %@ with linkID %@
sendData %luB peerID %@
GUID %@ Destination %@ Falling back to legacy encryption { encryptionType: %@, error: %@ }
Finished capturing AutoBugCapture diagnostics for encryption failure { context: %@, ECError: %@, legacyError: %@ }
GUID %@ Destination %@ Failed encryption type %@ with error %@
GUID %@ finished encryption
keyID: %@, type: %d, _encryptedDataBlob: %@, result: %@
Missing phone number authentication entitlement -- failing authenticate phone request {client: %@}
Authenticating phone {uuid: %@, client: %@}
Missing phone number authentication entitlement -- failing phone authentication signature request {client: %@}
Generating phone authentication signature over data {uuid: %@, client: %@, data: %@, length: %lu}
Generated phone authentication signature {phoneUserAuthCerts: %@, publicKey: %@, nonce: %@, signature: %@}
Failed to generate phone authentication signature {error: %@}
Requesting carrier token {uuid: %@, client: %@, subscriptionSource: %@, IMEI: %@, carrierNonce: %@}
Missing phone number authentication entitlement -- failing phone carrier token request {client: %@}
Failed to fetch SIMs {SIMFetchError: %@}
Determined phone number identifier to use for carrier token request {matchingSIM: %@, availableSIMs:%@, phoneUser: %@, phoneAuthenticationCertificate: %@}
Adding phone number account to the carrier token request {phoneUser: %@, phoneAuthenticationCertificate: %@}
Adding Apple ID account to the carrier token request {registration: %@}
Carrier token response received {resultCode: %@, serverStatus: %@, serverErrorDetail: %@, carrierToken: %@}
Missing phone number authentication entitlement -- failing phone user subscription source request {client: %@}
Setting phone user subscription source {uuid: %@, client: %@, subscriptionSource: %@}
Fetching phone user subscription source {uuid: %@, client: %@}
Failed to fetch selected phone number registration subscription { error: %@ }
  Found bad vetted alias, it was my phone number: %@ => %@
  Found unvalidated/failed alias: %@
  Found bad alias: %@ => %@
  Found bad alias, it was my phone number: %@ => %@
Alias set does not match during cleanup {self: %@, registeredButNotStored.count: %d, storedButNotRegistered.count: %d, aliasStrings: %@, aliasesSet: %@}
Account is missing sentinel alias, repairing...
Indicating that we need to re-register for alias repair
  Cleaning up account!!! -- with changes: %@
  Cleaning up expired pseudonyms {pseudonymsToRemove: %@}
Received IDQueryCompletedWithFromURI for service %@ fromURI %@ fromID %@ isRelevant? %@  errors %@
Query failed; re-registering {error code: %d}
Query failed; refreshing credentials {error code: %d}
Setting registration error to %d (%@) from reason %d
IDSDAccount initWithDictionary %@ service %@ uniqueID %@
Tried to create an account with an empty uniqueID (%@)
Tried to create an account with an empty service (%@)
Tried to create an account with unknown account type %d
IDSDAccount initWithLoginID %@ service %@ uniqueID %@ accountType %d
Tried to create an ad hoc account (loginID %@   service %@) with no primary account
Tried to create a primary account using an ad hoc service %@
Dealloc IDSAccount: %@
Missing object %@ or key %@ when changing accountInfo
Display name changed for account: %@    %@ => %@
Requested display name: %@ is not part of valid account aliases: %@, ignoring!
Request to clear Display Name on Account, Removing Display name %@
Account with uniqueID %@ was disabled by user
Setting loginID on account { oldLoginID: %@, newLoginID: %@, self: %@ }
IDSDAccount status %d, calling handler: %@
Can configure account with aliases: %@
* No aliases to configure, nothing to do here
Storing setup handler %p  %@
%@ Asked to look up device unique id for uri %@ and token %@ - failing
%@ Asked to look up device unique id for uri %@ and token %@ in our dependent registrations %@
%@ Asked to look up existince of device with uri %@ and token %@ - failing
%@ Asked to look up existence of device with uri %@ and token %@ in our dependent registrations %@
%@ Asked to look up fromID for CBUUID %@ in %@
Found locked peer %@ for cbUUID %@
Found locked peer %@ for sessionID %@
Couldn't find locked peer %@ for cbUUID %@
CBUUID matched, but uniqueID mismatched. Setting fallback device. { cbuuid: %@, uniqueID: %@ }
Did not find any device in dependentRegistrations that matches lockedPeerID. Service supports live delivery, so falling back to device that matches just cbuuid { cbuuid: %@, lockedPeerID: %@, service: %@ }
Did not find any device in dependentRegistrations that matches {cbuuid: %@, lockedPeerID: %@, count: %ld}
Returning token uri fromID for cbuuid {deviceCBUUID: %@, uniqueID: %@, deviceToken: %@, deviceFromID: %@}
Returning device fromID for cbuuid {deviceCBUUID: %@, uniqueID: %@, uniqueIDOverride: %@}
%@ Asked to look up default paired device dependent registration in %@
%@ found default paired device dependent registration %@
Found duplicate device %@, replaced with newer device %@
Duplicated device %@, ignoring...
Broadcasting registration status info changes
Broadcasting aliases changes
Broadcasting vetted aliases changes
Broadcasting profile changes
Broadcasting loginAs changes
Broadcasting displayName changes
Broadcasting pseudonym changes
Broadcasting account info changes %@
%s returning because duringInit %d isBeingRemoved %d
%@ - write account defaults: %@  (has changes: %@)
%@ - update account with defaults: %@
Current   aliases: %@
Aliases to remove: %@
Aliases to    add: %@
Calling out to linked account: %@
Not reporting tinker disabled service {service: %@}
Broadcaster for localDeviceAdded %@ on account %@
Broadcaster for localDeviceRemoved %@ on account %@
Broadcaster for didUpdatePairedDevice %@ on account %@
Notifying %@ delegate of protocol changes to device
Created IDSDXPCDaemonServer {serviceName: %{public}@, syncSupport: %@}
Incoming XPC connection {newConnection: %{public}@}
Home Number enabled
Home Number disabled
Alerting for finished Home Number registration that has not notified user %@
First unlock, kick accounts check
Received notification that Cloud Kit account status has changed. Checking to see if we need to reregister.
CloudKit device to device encryption has become available. Kicking off account repair.
CloudKit status remains unchanged. Doing nothing.
Device is properly setup
Push handler returned push token: %@
Starting Phone Number Validation request for %@   with token: %@
Missing SIM -- not sending PNR {self: %@, uniqueIdentifier: %@}
User previously denied PNR consent -- not sending PNR {self: %@, PNRuniqueIdentifier: %@}
Adding new validations state machine {self: %@, uniqueIdentifier: %@}
Registration has no corresponding user -- not sending PNR {uniqueIdentifier: %@, registration: %@}
Removing self as a phone number validation requestor {self: %@, uniqueIdentifier: %@}
Noting registration attempt for user identifier {%@} with current registration state {%ld} of type {%d}
Finished capturing AutoBugCapture diagnostics for high registration attempt rate { context: %@, sessionID: %@, error: %@ }
Updating registration info: %@
No registration info present, we must have been cancelled
Not reflecting back succeeded identification, registration is disabled: %@
Suppressing non-zero-rated SMS notification due to presence of internal deafult -- allowing SMS
Unable to post SMS alert during buddy, deferring until device is setup {CTPNR: %@}
User notification allowed Phone Number Validation delivery, sending
User notification denied Phone Number Validation delivery, not sending
Processing pending SMS alerts after restore {CTPNR: %@}
IDSRestrictions - Active: %@
IDSRestrictions - %@ Disabled: %@
Waiting on account activate, the account controller isn't ready yet
 Updating account activation if needed
IDSRestrictions - Disabling account: %@
IDSRestrictions - Re-activating a disabled account: %@
IDSRestrictions -  Manged prefs changed
Notifying all IDS accounts device paired to: %@
Notifying all IDS accounts device unpaired from: %@
%s Set the pending-reset flag back to NO.
%s Could not set the pending-reset flag back to NO.
Able to determine the has-regenerated-secured-encryption-key status. Has regenerated? %@
Unable to determine the has-regenerated-secured-encryption-key status. keychainError: %d
Updated the has-regenerated-secured-encryption-keys flag to: %@  success? %@  keychainError: %d
Removed the has-regenerated-secured-encryption-keys flag from the keychain.
Failed to remove the has-regenerated-secured-encryption-keys flag from the keychain. error = %d
Suspending OTR sessions for protection classes A and C...
Regenerating encryption keys for protection classes A and C...
Suspending OTR session with token: %@
Purged encryption keys for all paired devices. Success: %@
We have all the encryption keys, sending device info back
We're missing their keys but we sent our keys, requesting...
We're missing some keys (A: %p) (C: %p) (D: %p) (locked: %@) (firstLocked: %@)
Missing class A key, waiting for keychain save...
Missing class C key, waiting for keychain save...
Pairing: Missing class D key
%s Updating notify token state to: isPaired %llu
Update notifier state for paired devices
All devices count: %@
Activating a paired device with CBUUID: %@
WARNING: Local pairing is not supported by this platform. Why was %s called?
Result of activating a paired device with CBUUID %@ is %@
Disabling NetworkRelay for all paired devices.
Disabling NetworkRelay device {pairedDeviceUUID: %{private}@, nrIdentifier: %{private}@}
Failed to create IDSNRDeviceIdentifier from pairedDeviceUUID - failed to deactivate device {pairedDeviceUUID: %{private}@}
Update registration status with NetworkRelay for active device and disable non-active devices: %@
Paired device does not support IPsec {cbuuidUUID: %{private}@}
Failed to create IDSNRDeviceIdentifier {cbuuidUUID: %{private}@}
Skipping registerDevice with NetworkRelay as !wasInitiallySetupUsingIDSPairing
Disabling NetworkRelay device {cbuuidUUID: %{private}@, nrIdentifier: %{private}@}
Cannot ensure communication is possible because there is no active paired device.
Requesting information about the new active paired device.
Requesting information about the new active paired device was unnecessary. Communication is possible.
Missing cbuuid for paired device -- skipping {pairedDevice: %{private}@}
Queried shouldUseIPsecLinkForDefaultPairedDevice {shouldUseIPsec: %@, activePairedDevice: %@}
Registering didConnectToPairedDevice block {pair: %@}
Calling didConnectToPairedDeviceBlocks {cbuuid: %@, error: %@, pairs: %@}
Clearing didConnectToPairedDeviceBlocks {cbuuid: %@, pairs: %@}
Received paired device info: %@
%s: received invalid paired device info: %@
%s: invoked when IDSPairingManager did not know about a paired device.
Calling -[NRDeviceManager registerDevice:properties:queue:completionBlock:] {nrDeviceIdentifier: %{private}@, properties: %{private}@, cbuuid: %{private}@}
NRDeviceManager register returned an error -- ignorning it and enabling device {error: %{public}@, cbuuid: %{private}@}
Did register device with NRDeviceManager {nrDeviceIdentifier: %{private}@, cbuuid: %{private}@}
Starting UTunPeer and NRDevice bridge for device with cbuuid: %{private}@}
Failed to create nrDeviceIdentifier -- not registering {cbuuidUUID: %{private}@}
%s setting version %u
Trying to update non-tinker paired device with pushToken %@, uris %@.
Refreshing Paired Device Encryption Keys
Purged all paired device encryption keys. Requesting paired device info...
Requested paired device info. Refresh Complete!
Unable to purge the paired device secured encryption keys.
%s reading version: %u, min/max: %u/%u
PairingManager found nearbyIPsec device
Replacing uniqueID with pairedDeviceUniqueID {uniqueID: %{private}@, pairedDeviceUUIDString: %{private}@}
SupportIPSec status updated.  Should now QuickSwitch to using IPSec.
Finished resetting communication -- Done {uniqueID: %{private}@}
ActivePairedDevice alread marked with supportIPsec -- Done
Device found IPsec nearby but is not active paired device -- Ignoring {pairedDeviceUniqueID: %{private}@, uniqueID: %{private}@}
called _nrDeviceIdentifierWithCBUUID with nil cbuuid
newDeviceIdentifierWithBluetoothUUID return nil {cbuuid: %{private}@}
Coalesce queue manager enqueing message { guid : %@ topic : %@ sendMode : %@ }
Clearing coalesce queue for topic : %@
Flushing coalesce queue for topic : %@
Coalesce queue exists for topic : %@
Creating coalesce queue timer for topic : %@ with delay : %f
Clearing coalesce queue timer for topic : %@
Resetting coalesce queue timer for topic : %@ with delay : %f
Coalesce queue timer fired for topic : %@
Handling server rate limiting response for topic %@ - messages will be held for %ld seconds
*******************  %@ Error ****************************
***  Priority: %ld
***     Token: %@
*** Device ID: %@
***      From: %@
***        To: %@
  Plain text encryption error? This is non-sensical
Public/Private %@ failed :(
 => Current remote public key data for token: %@
 => Current remote public key data for device: %@
 => Data we tried to %@: %@
 => Is remote: %@
 => Token: %@
  Unknown encryption type error? This is non-sensical
******************************************************************
asked to %@, but key is NULL!
Incoming Encryption Request
Incoming Decryption Request
** This is for my phone, ignoring
 => User hit yes, adding and validating
 => User hit no, ignoring
Error posting new device notification.
Posted new device notification.
Storing activity topics: %@
Looking for an active subscription.  Stored activity topics: %@
Activity topic %@ found subscriptions %@
Subscription is in the past, continuing...
Failed to unarchive description: %@
Failed to archive description: %@
Failed to unarchive updates: %@
Returning stored updates: %@
Failed to archive updates: %@
Failed to unarchive subscriptions: %@
Failed to archive subscriptions: %@
Saving database.
Destroying database.
Closed database.
Creating indexes as needed for faster lookup
Enabling auto vacuum.
Enabling WAL journal mode.
Enabling Foreign Key support.
Successfully updated password for account (%@:%@): %@
Successfully updated auth token for account (%@:%@): %@
accountWithIdentifier could not find IDSDAccount {identifier: %@, localObject: %@}
accountWithIdentifier failed entitlement check {localObject: %@, entitlement: %@, serviceIdentifier: %@}
IDSDaemon: SetupAccountWithLoginID %@ serviceName %@ accountType %d accountConfig %@ transactionID %@ localObject %@
Process is not entitled for registration, not setting up account, bailing...
No loginID %@, not setting up account, bailing...
No serviceName %@, not setting up account, bailing...
No service registered for: %@, bailing...
Tried to setup ad hoc account directly, ignoring...
Tried to add account with unknown account type %d, bailing...
  ** Setting auth token for loginID: %@
  ** Setting password for loginID: %@
Creating new account with service name %@ login ID %@
Transaction ID %@  messageContext %@
Notifying listener %@ that account %@  is setup
Registration error %@
Linked account Transaction ID %@  messageContext %@
Notifying listener %@ that linked account %@  is setup
Linked registration error %@
IDSDaemon: AddAccountWithLoginID %@ serviceName %@ uniqueID %@ accountType %d accountInfo %@ localObject %@
Tried to add account with no serviceName %@, bailing...
No service registered for: %@, denying
Unique ID matches but not service name for account %@
Creating new account with service %@ uniqueID %@ login ID %@ accountType %d
Not creating new account, we have existing: %@
IDSDaemon _removeAccount %@ localObject %@
No uniqueID provided, bailing
_removeAndDeregisterAccount %@ localObject %@
Disabling and removing linked account: %@
updateAccount %@ localObject %@
Found blocklisted key in updateAccount call! {process: %@, key: %@}
enableAccount %@ localObject %@
Enabling linked account: %@
disableAccount %@ localObject %@
Disabling linked account: %@
auth token changed for account uniqueID %@ localObject %@
password changed for account uniqueID %@ localObject %@
authenticateAccount uniqueID %@ localObject %@
passwordUpdatedForAccount %@ localObject %@
updateAuthorizationCredentials %@ token %@ account %@ localObject %@
validateProfileForAccount %@ localObject %@
addAliases %@ toAccount %@ localObject %@
removeAliases %@ toAccount %@ localObject %@
validateAliases %@ forAccount %@ localObject %@
unvalidateAliases %@ forAccount %@ localObject %@
provisionPseudonymForURI %@ onAccount %@ withProperties %@ localObject %@
provisionPseudonymForURI -- pseudonyms are disabled by the server!
renewPseudonym %@ onAccount %@ forUpdatedExpiryEpoch %f localObject %@
renewPseudonym -- pseudonyms are disabled by the server!
revokePseudonym %@ onAccount %@ localObject %@
revokePseudonym -- pseudonyms are disabled by the server!
reportAction %d ofTempURI %@ fromURI %@ onAccount %@ requestUUID %@ localObject %@
reportAction -- disabled by the server!
registerAccount %@ localObject %@
unregisterAccount %@ localObject %@
forceRemoveAccount %@ localObject %@
_reregisterAndReidentify %@ account %@ localObject %@
deactivateAndPurgeIdentifyForAccount %@ localObject %@
hard deregister localObject %@
Trigger final deregister localObject %@
Kicking get dependent for account %@ localObject %@
Trigger accounts repair { localObject: %@ }
Registering for Registration Account Status Metric
Told to Check In for Registration Account Status Metric with activity %@ 
Got called to checkpoint Registration Account Status Metric run state with non null activity %@
Not entitled to clear IDS state %@
Told to clear IDS state %@
Initial: %s services: %@
iCloudSignInWithUserName %@ localObject %@
iCloudUpdateForUserName %@ localObject %@
iCloudModifyForUserName %@ localObject %@
iCloudSignOut %@
iTunesSignInWithUserName %@ localObject %@
iTunesSignOut %@
gameCenterSignInWithUserName %@ localObject %@
gameCenterSignOut %@
gameCenterModifyForUserName %@ localObject %@
iCloud sign in hack with userName %@ and password %@ localObject %@
iCloud sign out hack with localObject %@
setPasswordForProfileID localObject %@ {username: %@, password: %p
Finished setting password {success: %@}
Updating sub services %@ for service %@ deviceUniqueID %@
Save paired device info: %@
Setting NSUUID %@ on device with uniqueID %@  current pariedID: %@  service %@ localObject %@
 *** Cloud pairing detected setting BTUUID %@   on device ID: %@ **** (From: %@)
 => Noting it was before first unlock
 => Ignoring, no change
   => Device properties: %@
Sending continuity reset to IDS clients
Received request to regenerate registered identity
Missing key rolling entitlement -- returning early
System did leave first unlock, checking pending if we cloud paired before unlock
   we did! let's update accounts
in a few seconds
   => posting deferred device update
Broadcasting no devices for account %@ even though we have some
System has left first unlock: processing stored incoming messages.
Attempt to use the Registration Control API's without the correct entitlement, Failing request
registrationControlSetRegistrationStateForRegistrationType %@ registrationType %@ localObject %@
System has left data protection lock: Checking Migration Status
Faking data protection lock as first unlock: Processing stored messages.
System going to sleep
System waking up
IDSDaemon got a wake when it was not asleep! Current sleep state: %d
Forcing a bag fetch to refresh EN versioning
IDSDelivery has %lu pending offline messages and sees that push is now connected - scheduling a send attempt in %f seconds.
Push is still connected - replaying %lu offline message sends.
Done replaying %lu offline message sends.
Push is NOT still connected - readding %lu offline message sends.
Total offline message sends enqueued: %lu.
-effectiveMaxPayloadSizeIfCanUseLargePayload: {effectiveSizeToReturn: %ld, canUseLargePayload: %@, ReducedLargePayloadSizeOverhead: %@, courierAllowedLargeSize: %ld, courierAllowedNormalSize: %ld}
Bad signature for message: %@    blowing peer tokens
 targetPeerID: %@
 sourcePeerID: %@
  targetToken: %@
 sessionToken: %@
      service: %@
Message is destined for an accessory with uri %@
  Finished sending message: %@  to accessory: %@
Sending To %@
Handling message queue With Fanout for display IDs: %@  (originalURIs: %@)
   Queue: %@
 Flushing message queue
 FromID didn't match some messages, keeping some messages in queue {fromID: %@, toKeep: %@}
Checking the estimated payload size for message not requesting encryption... %d B
Attachment commands must not be forced to send as attachments
 sendAsAttachment? %@ The payload is %lu bytes.
We will send %@ individual messages
Emptying message queue for URIs: %@
No queued items to remove for URIs: %@
Removing message from queue for URIs: %@
No queued message matched for removal for URIs: %@
Enqueuing message: %@  to people: %@ service: %@ (original: %@)
send FTMessage: %@   fromID: %@   toID: %@  toToken: %@  toPeople: %@  toMe: %@  delivery status: %@ certified delivery: %@
    Delivered FTMessage: %@ to token: %@
    Delivered FTMessage: %@
                  Result code: %ld
                        To ID: %@
                      From ID: %@
            Result dictionary: %@
                        Error: %@
    Requested Delivery Status: %@
 Requested Certified Delivery: %@
                 Message Body: %@
Sending callback for FTMessage send
Was accessory online?: %@
    Told to send Fanout Message: %@ GUID: %@ isEngram? %@ Chunk: %@ isFinal?: %@ 
Sending %@ with top-level encryption type "%@" and dtls: %@
              To Destinations: %@
Asked to sendAttachmentWithGUID %@  topic %@ toToken %@ toID %@ fromID %@ service: %@
    Wrote data to path: %@
Send attachment message progress updated to %lld of %lld (%lld bps)
Succeeded uploading file transfer: %@
Finished sending attachment message %@. Result code: %ld. Error: %@   lastCall: %@
Failed uploading attachment file transfer: %@
Update for uploadFailure message: topic %@  response %ld  error %ld lastCall %@
IDSDeliveryController sendMessage
  Coalesce queue view : %@
Incoming urgent message for a topic with coalesce messages in queue
Preparing to send message: %@ looking up %lu people
Found messagable people: %@
Query completed: success %@  offline %@  allowPartialSendsToSucceed %@
Query completed but message for IDs %@ has already expired. Failing.
Query failed because the device is offline. Enqueuing for the return of networking since we have timeout time left. Number of offline sends enqueued ahead of us: %lu.
Peer ID manager succeeded lookup for IDs: %@
Peer ID manager failed lookup for IDs: %@   (Errors: %@)
Issuing query for: %@   from: %@
Tokens are being ignored, failing message {msg: %@}
sendIDSMessage called with nil message -- returning
Sending IDSMessage: %@  topic: %@
Server has overridden service maximum timeout: %@, capping message timeout with %@.
Sending messageDictionary: {suppressed} peerMessage %@  wantsResponse %@ timeout %@ fromID: %@ toID %@ toPeople %@ topic %@ toMyself: %@
_sendErrorMessage %@ onService %@ fromID %@ fromIdentity %@ toID %@ toToken %@ topic %@
All sends complete
Pipelines done processing all fanouts %@ count %ld for mmlGUID %@
Sending guid %@ through delivery pipeline
GUID %@ Failed with error: %@
GUID %@ Upload failure metric sent with response: %ld error: %ld lastCall: %@
Pipeline done with all fanouts %@
Submitting metric { sendTime: %.4f, endpointCount: %ld, pipeline: %@, mmcs: %@ responseCode: %ld }
IDSDeliveryController received messages to coalesce for topic %@ count %lu
Starting Up
Told all registrations succeeded, calling completion blocks
invalidate HCInfo - local(%d,%p->NULL) remote(%d,%p->NULL)
setLocalContext - %p->%p
setRemoteContext - %p->%p
Device %@ cbuuid %@.  Is IDS nearby? %@ Connected? %@. Is terminus nearby? %@ Connected? %@ 
Queried pairedDeviceUUIDString {pairedDeviceUUIDString: %@}
Could not query pairedDeviceUUIDString {isPaired: 0}
NRDeviceMonitor already running for {deviceIdentifier: %@}.
Received devices with unique ids -> cbuuids %@
Received device with unique id %@ updated BTUUID: %@
Ignoring update for nil or default paired device BTUUID: %@
Created new peer %@ for uniqueID %@ with btuuid %@
Updating existing peer %@ for uniqueID %@ with btuuid %@
LOCALSETUP: local setup started - clearing all stats
LOCALSETUP: Informed that local setup has completed!
LOCALSETUP: Disabling Cloud Connections for QWS
LOCALSETUP: Enabling Cloud Connections
Peer %@ is created from sessionID %@ (peer map: %@)
WARNING: Peer from sessionID %@ shouldn't be created for the default paired device! (deviceInfo: %@) (peer map: %@)
Peer %@ is created from btID %@ (peer map: %@)
UTUN sendData
OUTGOING-UTUN_DELIVERY:%@ SERVICE:%@
UTUN request to send %{public}@ priority local message payload of data size: %d  guid: %{public}@  expirationDate %@ enforceRemoteTimeout %@ for topic: %{public}@:%{public}@ to deviceIDs (count: %{public}@)
WARNING: A message for the local default paired device has reached the delivery controller but we do not have a peer already for it, It was likley sent before QWS was completed. Purging message. Destination Device: %@, Current Device:%@ 
Skipping device %@ which we already sent to.
UTUN request to send %{public}@ priority local message payload of data size: %d  guid: %{public}@  for topic: %{public}@:%{public}@ to uri %@ deviceID %{public}@ with seq[%u]
WARNING: Unable to create the peer for the device %@
Unable to find peer for deviceIDs %@ failing the message.  (Peers: %@)
Attempting to cancel message ID: %@
local account setup complete - has deferred task? %@
calling deferred default peer connected
enableConnectionForDefaultPairedDevice %@
No connection found for default paired device %@.
enableCloudConnectionForDefaultPairedDevice %@
Got topic set update %@
Warning: -[IDSUTunDeliveryController setAllowedTrafficClasses:] called but missing nrDevicePreferencesHandler; allowedTrafficClasses %@
There is a new session for the local path, skipped removing...
Already have a peer ignoring call to add {deviceUniqueID: %{private}@, btuuid: %{private}@, deviceIDToPeer: %{private}@}
EnableOTR: %@.
peer nearby state changed:%@    screenLit:%@   uniqueID:%@   peer-count:%lu
Broadcasting isNearby %@ for %@
peer connectivity changed: %@    uniqueID: %@   map: %@
Broadcasting isConnected %@ for %@
Submitting aggd metric for connected time %f seconds.
Submitting AWD metric {nearbyToConnectedDurationInMs: %lld ms}.
Broadcasting isCloudConnected %@ for %@
peerHasSpaceForNonUrgentMessages %@ %@ %@ isDefaultPeer? %@
peerHasSpaceForUrgentMessages %@ %@ %@ isDefaultPeer? %@
local account setup has not finished yet - defer default peer connected
default peer connectivity changed: %@ -> %@
default peer connectivity changed but no default peer
legacyUTunBTLinkManagerDefaultPeerConnectivityChanged: %@ but using IPsec link - drop callback
default peer nearby changed: %@ -> %@
%@ Did not find default peer device.
legacyUTunBTLinkManagerDefaultPeerNearbyChanged: %@ but using IPsec link - drop callback
cloud connectivity changed for default peer: %@.
legacyUTunBTLinkManagerDefaultPeerCloudConnectivityChanged: %@ but using IPsec link - drop callback
defaultPeerMagnetIndicationOfAwakeStateChanged %@
defaultPeerClassCConnectivityDidChange %@
defaultPeerSetPreferInfraWiFi: %@ services: %@
defaultPeerSetPreferInfraWiFi failed due to nil device identifier.
defaultPeerSetLinkPreferences, service: %{public}@
defaultPeerSetLinkPreferences failed due to nil device identifier.
setBluetoothLinkPreferences: service: %{public}@, pps: %d input bps: %d output bps: %d intent: %{public}@
defaultPeerSetWantsQuickRelayRequest: %@
[IDSUTunDeliveryController defaultPeerSetWantsQuickRelayRequest:] called but missing nrDevicePreferencesHandler
defaultPeerSupportsDirectMessaging: %@
defaultPeerUnpairStart
defaultPeerDropDisallowedMessages
peerCloudConnectivityChanged: %@ but using IPsec link - drop callback
cloud connectivity changed for peer %@: %@.
Tried to process cloud connectivity change with nil peer.
%@ cloud connectivity changed: %@ -> %@
Broadcasting found nearby IPsec device {uniqueID: %@}
Set Enable OTR Timer for 60.0 seconds
Set OTR for defaultPairedDevice: YES.
Set OTR for defaultPairedDevice: NO.
didAddPairedDevice is called.
didRemovePairedDevice is called.
didUpdatePairedDevice is called, enable OTR %@, otrInitialized %@.
Peer %@ is already locked for btUUID %@, ignore peer %@
Lock peer %@ for btUUID %@.
Remove locked peer %@ for btUUID %@
Unlock all peers, clean up.
addContinuityPeer is called for default paired device, please file a bug.
Add new peer %@ for btUUID %@, list %@.
current peer list:%@
Enable peer %@ for btUUID %@.
Peer %@ is already locked for btUUID %@, skip other peers.
No pending peer, bail out.
Search peer in %@. (current peer %@, count %d)
peer %@ has count %d
Found no other peer, stick with peer %@
Try new peer %@, disable peer %@.
Peer's session ID %@ is for the phone continuity local message.
Told to enable OTR for default paired device
Rapport discovered device. {Peer:%@, deviceID:%@}
Rapport lost device. {Peer:%@, deviceID:%@}
No predicate found for URI %@
Fetching contacts for predicate %@
Found contact %@, for URI %@ with error %@
Created group SKM cache { self: %@ }
Resetting group SKM cache { self: %@ }
Resetting remote SKM cache { self: %@ }
updateGroupStableKeyMaterialCacheForPushToken: { self: %@ pushToken: %@, SKM: %@ current SKM: %@, previousSKM: %@ stableKeyMaterials count: %lu}
updateGroupStableKeyMaterialCacheForPushToken: { self: %@ pushToken: %@, remove outdated SKM from cache: stableKeyMaterials count: %lu, %@
Too many services in entitlements! {value: %@, index: %llx}
Daemon XPC Interface Up
Incoming Daemon XPC Interface with new connection %@
We got remote object proxy %@ new observerProxies count: %lu
Daemon Invalidation Handled
Daemon Interruption Handled
Daemon failed to broadcast didCreateGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@
Daemon failed to broadcast didCacheGroup {group: %{private}@, observerProxy: %{public}@, error: %{public}@
Daemon failed to broadcast didUpdateGroup {previousGroup: %{private}@, updatedGroup: %{private}@, observerProxy: %{public}@, error:%{public}@}
Daemon failed to broadcast didReceiveDecryptionFailureForGroup {group: %{private}@, observerProxy: %{public}@, error:%{public}@}
Daemon failed to broadcast didReceiveRegistrationIdentityUpdate {observerProxy: %{public}@, error:%{public}@}
GUID %@ Received APNS ack for MML %@
GUID %@ Received APNS ack for Fanout %@
GUID %@ APNS ack received for destination %@
Building Message delivery
Missing accountID for outgoing session, bailing...
Missing destinations for outgoing session, bailing...
Missing transport type for outgoing session, bailing...
Missing uniqueID for outgoing session, bailing...
Found existing session matching uniqueID -- replacing with new instance { uniqueID: %@, oldInstanceID: %@, newInstanceID: %@ }
Already have an existing session with uniqueID %@, bailing...
Failed to create outgoing session.
Missing accountID for incoming session, bailing...
Missing destinations for incoming session, bailing...
Missing transport type for incoming session, bailing...
Missing uniqueID for incoming session, bailing...
We already have an existing session with unique ID %@, ignoring self invite...
%@ - Failed to create incoming session
Received incoming invitation with payload %@ topic %@ fromToken %@ fromID %@ toID %@ fromStorage %@
No sessionID provided in invitation, bailing...
Missing originator for session invitation, bailing...
Creating IDSSession for incoming invite
Enqueuing incoming session invitation block from %@ with key %@
Couldn't create session for invite, bailing...
Done with incoming network availability check; networkOkForSession: %@
Missing encryption setup info, bailing...
Wifi connectivity check failed, declining invitation!
Did not find a client that could handle the invitation for service %@, ignoring invitation...
Network availability check indicated that we should not continue to process this session invitation
Enqueuing incoming session accept block from %@ with key %@
Enqueuing incoming session decline block from %@ with key %@
Enqueuing incoming session cancel block from %@ with key %@
Enqueuing incoming session message block from %@ with key %@
Enqueuing incoming session end block from %@ with key %@
Enqueuing incoming session reinitiate block from %@ with key %@
Enqueuing incoming group session message block fromID %@ with the group %@ sessionID %@ (message %@)
Receiving Key Material (%@) [MKM] -- %f
Receiving Key Material (%@) [SKM] -- %f
Storing the master key material %{private}@ stableKeyMaterial: %{private}@ for %@ token %@
not received any valid MKM or MKM for %@ token %@
key material not decrypted
Storing all valid master key materials %{private}@ for %@ token %@
Failed to decrypt a key material in the broadcast group -- skipping the remaining key material
not received any valid remote cached MKMs for %@ token %@
Received the prekey recovery request for group %@ destination %@
Received the key recovery request for group %@, needsToRecoverMKM: %@, needsToRecoverSKM: %@
Receiving Key Material (%@) [PreKey] -- %f
Storing the public key %{private}@ for %@ token %@
Couldn't find the session %@ to clean up!
Cleaning up session %@, shouldCleanSessionStatus: %@
Cleaning up session based on instanceID { instanceID: %@, correspondingUniqueID: %@ }
skip cleanupSessionWithChannelDestination for destination %@ and clientChannelUUID %@
Cleaning up session(s) for client ID: %@ because it died
Cleaning up session: %@ for client ID: %@
Cleaning up session(s) for service: %@ with reason %ld
Cleaning up session: %@ for service: %@
%@ - No account found to build specificOriginator, bailing...
%@ - No device found to build specificOriginator, bailing...
%@ - No device push token found to build specificOriginator, bailing...
%@ - No device identity found to build specificOriginator, bailing...
%@ - No unique ID provided to lookup session, bailing...
%@ - No instance ID provided to lookup session, bailing...
%@ - No group ID provided to lookup session, bailing...
%@ - No group UUID provided to lookup session, bailing...
Updating critical reliability {needsCritical: %@, session: %@}
Empty phone number after registering
Clearing out current aliases
Adding alias: %@
Setting alias as validated
Account already has phone number added, not adding
Updating preferred account to Home Number {service: %@, oldID: %@, newID: %@}
Ad hoc account %@, can't call %s, ignoring...
Local account %@, can't call %s, ignoring...
Under first lock and keychain upgrade pending, not loading registration for this account
We have no registration info, needs to be created
Our registration types don't match, needs rebuild  (%d vs %d)
Registration type is not supported: %d
Emails are different, we need to rebuild  (%@ vs %@)
Push tokens are different, we need to rebuild  (%@ vs %@)
Didn't find a registration in the keychain for %@ %@
Found pre-existing regionID %@
Found pre-existing base phone number %@
Found pre-existing region context %@
Found pre-existing confirmedEmails emails %@
Setting profileID %@ onto registration
Setting idsUserID (for auth cert), isCDMA, and keyPairSignature on registration using existing registration with the same profileID { keychainRegistration: %@ }
Rebuilding aliases for: %@
 => ignoring failed validation email: %@
Existing region profile: %@
We have a profile, and it's validated!
No region ID, we'll use our profile's
Setting idsUserID (for auth cert), mainID, isCDMA, and keyPairSignature on phone number registration {mainID: %@, isC2K: %@, keyPairSignature: %@}
Created new registration info: %@
Using cached registration info: %@
  We have no URIs registered, and we're not DS based, forcing unregistered
  We have no registration cert, forcing unregistered
Setting profileID %@ onto account
Current aliases: %@   for: %@
 => adding candidate email: %@
Ignoring tinker disabled service {service: %@}
Adding ad hoc service names %@ to %@
Device Controller says I should maybe try to re-register now: %@
This indeed necessitated a re-register, kicking it off: %@
***** Notified that our previous identity was rebuilt from scratch -- purging identity and re-registering { account: %@ }
***** Notified that a new identity was generated -- re-registering { account: %@ }
***** Notified that our identity needs to roll encryption identity -- rolling and re-registering { account: %@ }
***** Keychain migration completed
Account %@ is disabled, ignoring...
****** Forcing Registration, needs migration ******
****** NOT Forcing Registration, we were active, but unregistered, however there's nothing to register: %@ ******
****** Forcing Registration, we were active, but unregistered: %@ ******
Updating vetted aliases to: %@     current: %@   ID: %@
     Added: %@
   Removed: %@
   Registration requires keychain migration, not proceeding
Safely migrating key pair signature over: %@
Registration protocols are empty, this is probably a new install, we'll force a register
Registration identity protocol version is empty, we'll force a server registration   (%@ -> %@)
Registration identity protocol versions different, we'll force a server registration   (%@ -> %@)
Registration identity versions different, we'll force a server registration   (%@ -> %@)
Registration application protocol version is empty, we'll force a server registration   (%@ -> %@)
Registration application protocol versions are different, we'll force a server registration   (%@ -> %@)
Registration key pair signatures are different (%@ -> %@), clearing cert - forcing redentification
Message Protection Public Data Needs Update, we'll force a re-register
Registered but missing an authentication cert, forcing re-register
****** Someone set default for SMS re-register ******
****** Someone set default for HTTP re-register ******
****** Forcing FaceTime Registration ******
Calling account setup handler %p
We were registered but we have no aliases %@ or dsHandle %@
We were registered, but we're missing our private/public identity keys... will reregister: %@
Setting account: %@ to failed registration
Setting account: %@ to unregistered
Setting account: %@ to authenticated  (Reg status: %d)
Setting account: %@ to authenticating  (Reg status: %d) (Waiting for restore)
Setting account: %@ to authenticating  (Reg status: %d) (Waiting for push token)
Setting account: %@ to authenticating  (Reg status: %d)
Setting account: %@ to registering  (Reg status: %d)
Setting account: %@ to registered
  Stop Registration Agent for: %@
Registration is not active on account %@, ignoring...
 => Forwarding to Primary: %@
 => Re-registering and re-provisioning: %@
  ** Removing authentication credentials **
Device is still under first data protection lock, changing request to a deferred re-identification
Daemon reregister/reidentify account
  ** Re-identifying from beginning **
  ** Re-registering **
Device is still under first data protection lock, deferring request
Migration is complete, checking to see if we should re-register now
System started backup: %@
System restore state changed: %@
We had a pending GDR, kicking it off now: %@
Daemon activate account registration
****** Purged keychain data ******
*** Activating registration: %@   Login: %@   Service: %@   Type: %@   Environment: %@   Registration: %@
Registration info is not supported on this device, disabling: %@
   ** Failed enabling registration, disabling... **
Using server: %@:%@
Couldn't get bag url
Priming Server bag
...done
Daemon deactivate account registration
*** Deactivating registration: %@   Login: %@   Service: %@   Type: %@   Environment: %@   Registration: %@
*** simply marking account as unregistered: %@
*** removing registration from keychain: %@
 => Authenticate (Environment: %@) %@
Starting auth for: %@
Asked to authenticate, but haven't received push token yet, waiting... (Mine: %@  APSD: %@)
Client requested re-authenticate (Environment: %@)
Retrying registration, to check for backup state
Migrating Apple ID based registration info: %@
Rebuilding aliases for: %@ (%@)
Daemon register account
Re-register called (Environment: %@) %@
Asked to register, but haven't completed upgrade/restore, current state: %@
We were missing candidate alias: %@, adding it
Asked to register, but haven't received push token yet, waiting... (Mine: %@  APSD: %@  Env: %@)
Client requested re-register: %@ (Environment: %@)
Daemon unregister account
 => Deregister: %@ (Environment: %@)
Client requested de-register (Environment: %@)
Client password updated
Clearing signature, and re-registering
Client updating auth ID: %@  token: %@
... Saving
Informed of push token change to: %@, reregistering (from: %@)
Informed of push token change to: %@, but no need to reregister (from: %@)
Received reload bag push for: %@
 => Reloading iMessage bag
 => Reloading FaceTime bag
 => Reloading FaceTime Audio bag
 => Reloading FaceTime Multiway bag
Not adding registered phone alias to appleID account {uniqueID: %@, phoneAlias: %@}
My current handles: %@
My current vetted handles: %@
My current vetted emails: %@
Asserted Emails: %@
My new aliases: %@
Newly added: %@
 => All handle based account, not showing available notification
 => DS handle based account, not showing available notification
 => Not adding, new handles does not contain this alias
 => Not adding, this is my phone number
** Adding notification for %@  on device %@  on apple ID: %@ for service: %@
Alias was recently selected, just adding {alias: %@}
** Not showing notification, service is not configured to show them
** No new handles!
 => We should auto configure all handles
    Vetted: %@
   Current: %@
      Checking: %@
         => Not in alias strings: %@
         => Not in auto register: %@
         => Already in auto register set
      => Already in alias set
** Auto registering handles: %@
No handles to auto register
 => Ignoring, we're not authenticated for: %@
 => Not updating handles, this is not an apple ID or phone based account for: %@
Not issuing handle gathering, we're in progress now
 => Kicking off handle gathering for: %@
  (currentAliases: %@)
  (currentVettedAliases: %@)
  * Sending handle update request for: %@
Handles query completed with result: %@   account: %@
 *** This was successful, but handles were empty? Ignoring...
 *** Handles query failed, status: %d
Received device updated push for profile: %@   token: %@   service: %@  for: %@
Ignoring update - we have recent registration events
System not setup, ignoring devices updated push for: %@
Device is still under first data protection lock, ignoring for: %@
  Empty user ID, ignoring for: %@
  Unknown profile ID ID, not proceeding for: %@
 => Ignoring a device update from myself for: %@
 => Ignoring, we're not registered for: %@
 => Kicking off device and handles gathering for: %@
Received handles updated push for profile: %@ allowGDR: %@   status: %@   for: %@
System not setup, ignoring handles update push for: %@
  Not an appleID registration, not perfoming GDR for : %@
Received flush cache push for uris: %@
Should retry (resultCode %ld) (retries %d) (%@)
Should reregister then retry (resultCode %ld) (%@)
Should not retry (resultCode %ld) (retries %d) (%@)
iCloud pairing account is usable, updating device properties
iCloud pairing account is not usable, not updating device properties (registered: %@, primaryRegistration: %@, isEnabled: %@)
Device is still under first data protection lock, deferring request for: %@
Not issuing dependancy check, we're not through buddy yet for: %@
Not issuing dependancy check, we're in progress now for: %@
Issued dependent registration check for account: %@   service: %@
Device query completed with   Account ID: %@   service: %@
  => seconds: %f
 *** This is our first dependent handles check, we're just storing them
 *** Devices query failed, retrying in %f
 *** Not notifying for device name: %@  service: %@, we already know about this one!   hardware: %@
 *** Not notifying for device name: %@  service: %@, don't have any valid handles!   hardware: %@
 Queued notification for device name: %@   service: %@  handle: %@ hardware: %@
  Found similar account: %@
We don't have an enabled account for service %@ with %@ as an alias, ignoring...
 Adding notification for device name: %@   service: %@  handle: %@
Flushing cache for: %@
Not registered. Waiting to send the 130 { registrationStatus: %ld, retry: %@, registeredURIs: %@, service: %@ }
Updating active URIs: %@   service: %@
   Sending to active sessions for URI: %@   sessions: %@
   No active sessions from: %@
Succeeded SMS identification with info: %@    number: %@  token: %@
Updating caller ID to phone number: %@
Starting registration for: %@
Updating registration for: %@
Succeeded registering: %@  (newly registered: %@)
Getting GameCenter Data from registration with contextInfo: %@
Saved: %@
vettedAliases: %@
Checking to see if I should confirm aliases for: %@
Aliases that are unvalidated: %@
Forcing a handles query request post-register to pull the current state
Finished registering without profileID, setting profileID %@ onto account
Registration failed for %@   (Error: %d)
Failed, %@ => Disabling service
Server denied registration
Removing keychain info
We've been rate limited, disabling
Absinthe failed, just disabling
Too many SMSs, deactivating me
 => Will retry SMS Registration: %@
 => Resetting status to waiting for auth response: %@
 => Will retry Authentication: %@
 => Not retrying, max retries hit
 => Nuking Home Number user {error: %ld, registration: %@}
 => User has disabled SMS Authentication, disabling the account
 => User has disabled SMS Registration, disabling the account
Broadcasting registration failed for account %@
Needs deletion: %@ (%@)
Deleting account ID: %@
Deregistration succeeded for %@ - %@
Ignoring re-identification request, registration is disabled: %@
Registration controller requested new SMS registration -- starting from scratch
Registration controller requested new SMS registration -- noting that we should re-query handles
Started authenticating for info: %@
Succeeded authentication for info: %@
Updating profileID: %@
Authentication failed for info %@    with error code: %d
Auth failed but we're registered, ignoring...
Removing profileID
Succeeded Validated Email Query info: %@    Emails: %@  (Session: %@)
Succeeded region validation with region ID: %@  phoneNumber: %@  context: %@  verified: %@
Resulting registration info: %@
Failed region validation for registration info: %@      error: %@   info: %@
 => Remove aliases: %@   for: %@
Request to remove aliases: %@
Empty aliases, ignoring
Removing candidate email: %@
Email was candidate, just removing: %@
Removing confirmed email: %@
Alias is registered, needs re-register for: %@
Alias wasn't registered, moving along: %@
Email was unconfirmed, just removing: %@
Client request to remove aliases: %@
 => Add aliases: %@
Empty alias, ignoring
Request to add aliases: %@
 => Found my phone numbers: %@
 => Current aliases: %@
 => Vetted aliases: %@
 => Adding alias: %@  (and as candidate)
Client request to add aliases: %@  account: %@
Request to validate aliases: %@
%@ is already validated %@
Request to validate aliases: %@, but device is not authenticated
%@ needs to be validated
%@ should be registered
Alias all already validated, registered, returning
We're under first lock, not registering aliases: %@
We've recently queried the vetted handles on the account, we'll use the local vetting status (%@)
Client request to validate: %@  account: %@
Request to unlink aliases: %@
Request to unvalidate aliases: %@, but device is not authenticated
Updating vetted handles to remove: %@
 => Final: %@
Client request to unvalidate: %@  account: %@
***** Request to deactivate and purge my identity
 => Unregistering
 => Purging my message protection identity
Client request to refresh valid aliases
Request to refresh valid aliases, but device is not authenticated
Server indicated we are out of sync with pseudonyms, kicking deletion {pseudonym: %@, uniqueID: %@}
Client request to validate profile info: %@   account: %@
Broadcasting refresh registration for account %@
Grace period is still valid -- returing state {service: %@, loginID: %@, alias: %@, now: %@, then: %@}
Updating user intent state {service: %@, loginID: %@, alias: %@, from: %@, to: %@}
Stopping user intent tracking {service: %@, loginID: %@, alias: %@}
Returning _allUserIntentInfo {service: %@, loginID: %@}
Server bag overrided grace period outside acceptable range -- ignoring {gracePeriod: %f}
Server bag overrided default max selected grace period {gracePeriod: %f}
System did leave first unlock, checking pending items
   We had a pending handle request, kicking off
   We had a dependent reg request, kicking off
   We had a pending re-identify request, kicking off
   We had a pending re-register request, kicking off
Using Max GDR in 24 hour period override value of %d 
Server Bag provided us with %d max forced GDRs
Server Bag has no value for max GDR per day, using the default: %d
Checking if loginID update is needed for existing account on service { oldUsername: %@, newUsername: %@, serviceIdentifier: %@ }
Updating loginID on existing account { oldUsername: %@, newUsername: %@, serviceIdentifier: %@, account: %@ }
IDS responding to sign-in { domain: %@, username: %@, token: %@, hasPassword: %@, accountStatus: %@, handles: %@ }
Device has hard deregistered -- ignoring sign-in
No username provided -- ignoring sign-in
Saving status to the account { accountStatus: %@ }
Created new account for sign-in { service: %@, account: %@ }
Updated existing account with account info { service: %@, account: %@ }
Created new linked account for sign-in { service: %@, account: %@ }
Updated existing linked account with account info { service: %@, account: %@ }
IDS responding to sign-out { domain: %@ }
Device has hard deregistered -- ignoring sign-out
Removing account for sign-out { account: %@ }
Skipping removal of non-Apple ID account for sign-out { account: %@ }
IDS responding to updated account info { username: %@, accountInfo: %@ }
 Device has hard deregistered -- ignoring update
Update called but for account other than the primary iCloud -- ignoring update
Update called but for the primary iCloud -- committing update to relevant accounts
Updating matching account (and linked accounts) with account info { account: %@ }
IDS responding to account modification { username: %@ }
Checking IdentityServices accounts to know if we should attempt a repair { foundAccount: %@ }
Auth token found on account -- attempting to kick iCloud repair logic
IDS responding to account modification for GameCenter domain { username: %@ }
Initiating a reregister to update Game Center specific user data. Data stored in IDS {%@}, updated data received from accounts {%@}
Account data is up to date with IDS, ignoring notification
No GameCenter IDSDAccount found with username {%@}. Trying to sign in.
No GameCenter IDSDAccount found with username {%@}. Cannot modify.
We already have an inflight request for topic %@, checking if we have a backup
We already have a backup request for topic %@, throwing this request away
We already have an inflight request for this topic %@, adding it to the backup queue
This is the first request for topic %@, kicking off a server message for it
We received a 165 from the server for topic %@
We received a last from storage from the server for topic %@
Topic %@, has timed out waiting for server response
Topic %@ has recently received a message from storage.  Starting a new extended timer for retry.
We timed out with our request for %@ however we have one in the pending queue, Not retrying and instead letting that take over
The topic %@ is a pass-through-message service. Not retrying.
We have not used up our remaining retries on topic %@: Used: %d Available: %d
We have used up all available retries for topic %@: Terminating state machine
Finished sending pending message request response for topic %@  [%@]
Failed sending pending message request response for topic %@. Result code %ld. Error %@.
Told to terminate state machine for topic %@
Unable to find a topic timeout timer, This will likely cause a bug
We terminated our state machine for %@, however we have another backed up, kicking off another state machine
Was told to stop, but we didnt have one in progress...
Told about a message from server storage, but we dont have an ongoing metric for it, not able to incriment
IDSStreamEncryption_Init not enough key material bytes: have %d but need %d
encryption setup (v%d):
send ssrc:%08x start-seq:%04x
recv ssrc:%08x start-seq:%04x
srtp not initialized for transform
srtp rollover counter reached end - hard stop before reusing key
packet with sequence number: %u->%u dropped by replay protection
Malloc Failed to allocate replayWindow!
Malloc Failed to allocate replayWindow->list!
IDSStreamEncryption_LeftShiftReplayList returned NO. seq(%u->%u) = %u
IDSStreamEncryption_SetbitReplayList returned NO. seq(%u->%u) = %u
IDSStreamEncryption_SetbitReplayList after clear returned NO. seq(%u->%u) = %u
packet too old. seq(%u->%u) = -%u
IDSStreamEncryption_GetbitReplayList returned YES. seq(%u->%u) = -%u
IDSStreamEncryption_SetbitReplayList for old packet returned NO. seq(%u->%u) = -%u
CCCrypt failed with status: %d
Initial state check for Phone numbers
Device identifier differs disabling dual mode {persistedDeviceIdentifier: %@, currentDeviceIdentifier: %@}
Determined if device is in dual phone identity mode { isDualIdentity: %@, multipleInsertedSims: %@, isDeviceInDualPhoneIdentityMode: %@ }
Cannot force remove phone users. { user: %@ }
This device does not support identification -- returning no users
Recognized phone number change without labelID change {labelID: %@, currentUser: %@, newUser: %@}
Recognized SIM property change {currentUser.defaultUser: %@, newUser.defaultUser: %@, currentUser.mcc: %@, newUser.mcc: %@, currentUser.mnc: %@, newUser.mnc: %@}
Finished synchronizing Sims to users {currentUsers: %@, updatedUsers: %@, dualMode: %@, inManualSelectionMode %@, selectedLabelIDs: %@, tempLabelIDs: %@, sims: %@}
Received selectedSubscriptionLabelDidChange
Received SIMInformationDidChange
****** Device isn't in a state that can register right now, bailing
****** Device is not configured yet, bailing
****** Under first lock and keychain upgrade pending, bailing
** Found no tracked Phone Number registration
** Found Tracked Phone Number users: %@
** Dispatching request to re-register via SMS
IDSSIMPhoneUserSynchronizer received an update to the paired tinker device
IDSSimPhoneUserSynchronizer does not support non-tinker devices. isTinkerConfiguredWatch: %d pairingType: %ld
====== Personal Key Cache:
   Device ID: %@    Identity: %@   PushToken: %@
Removing key {forURI: %@, fromURI:%@, pushToken: %@}
Clearing public and personal keys
Migrating user store to new format {oldMap: %@, newMap: %@}
UserStore reloading {realm: %@}
Provider created change set {current: %@, updated: %@, provider: %@}
Updating user {user: %@}
Broadcasting update user {user: %@}
User is not present -- not updating {user: %@}
Silently updating user {user: %@}
Adding user {user: %@}
Broadcasting new user {user: %@}
Removing user {user: %@}
We do not support DS users here at this time! {user: %@}
Tried to set a mismatching credential for user! {credential: %@, user: %@}
Updating user properties {user: %@, props: %@}
Broadcasting update user props {user: %@}
User is not present -- not updating props {user: %@}
Missing activity monitor entitlement -- failing creation of IDSDXPCActivityMonitor collaborator {connection: %@}
Invalid activity monitor entitlement -- failing creation of IDSDXPCActivityMonitor collaborator {connection: %@, activityMonitorEntitlementValue: %@}
Found a non-string activity monitor entitlement value -- failing creation of IDSDXPCActivityMonitor collaborator {connection: %@, activityMonitorEntitlementValue: %@}
Created XPCActivityMonitor {self: %p, activityMonitorEntitlementValue: %@, connection: %@}
Not entitled for activity monitor activity! {self: %p, activity: %@, _activityMonitorEntitlements: %@}
Posting update {self: %p, activity: %@, update: %@}
Adding activity monitor client {self: %p, activity: %@}
Error creating proxy for activity monitor client {self: %p, activity: %@}
Removing activity monitor client {self: %p, activity: %@}
Checking if listening for activity monitor activity {self: %p, activity: %@, isListening: %@}
Setting should listen for activity monitor activity {self: %p, activity: %@, shouldListen: %@}
Activity monitor is currently disabled by the server.
Subscribing for activity monitor session {self: %p, activity: %@, info: %@}
Unsubscribing for activity monitor session {self: %p, activity: %@, subActivity: %@}
Server provided a minimum value for activity monitor which was %ld
%s received nil pairedDevice
Paired device public key A %@
Paired device public key C %@
Paired device public key D %@
Reloading keychain information: %@
** We haven't loaded anything, ignoring save to keychain **
** Saving registration data to keychain: Begin **
  => Adding registration for service: %@  ID: %@  to keychain dictionary
     => Registration %@
    => Dictionary has %lu key-value pairs
    => Not saving, got a nil dictionary representation
Final keychain data array count: %lu
  => Adding %lu auth certs for users %@
  => We don't have any auth certs to save
  => Adding %lu SMS signatures
  => We don't have any SMS signatures to save
  => Adding %lu temp phone credentials
  => We don't have any temp phone credentials to save
Unable to build property list data: %@
Saving %d bytes under service: %@   account: %@   accessGroup: %@   saveIdentifier: %d
Unable to save registrations to keychain (error: %d)
** Saving registration data to keychain: Done **
Forcing save of registration objects from keychain dictionary, %d entries  %d auth certs
Flushing registration objects from keychain dictionary, %d entries  %d auth certs
Loaded %d auth certs for users %@
Loaded %d sms signatures
Loaded %d temp phone credentials
Reloading registration objects from keychain dictionary, %d entries
Expected to load %d registration objects, but only loaded %d
Attempting to load V%d keychain blob from service: %@   account: %@   accessGroup: %@
  => Found V%d keychain blob
  => No blob found in keychain
  => Failed to get keychain blob (error: %d)
Unable to parse property list: %@
Removing invalid keychain data (V%d) for service: %@   account: %@
  => Unable to remove invalid keychain blob (error: %d)
Keychain dictionary V%d needs upgrade
Removing old V%d keychain blob after upgrade with service: %@   account: %@
  => Unable to remove keychain blob (error: %d)
Looking up registration with service type: %@  registration type: %@   value: %@
 => Removing first keychain entry, we're over max of %d entries
Removing registration : %@
  => No matching registration found to remove
Removing all registrations
Invalid keychain dict version (%d) -- current is %d
Updating keychain dict to current version (%d)
Keychain dictionary before upgrade : %@
  => Updating from V0 to V1
  => Updating from V1 to V2
Keychain dictionary after upgrade : %@
Unable to upgrade an empty keychain data from V0 to V1
Unable to upgrade an empty keychain data from V1 to V2
Setting IDS auth cert: %p   for ID: %@
Returning SMS sig for ID: %@   signature: %@
Returning SMS IDs: %@
Setting SMS main ID: %@   signature: %@
Returning temp phone credential for ID: %@ cert: %@
Returning temp phone credential for ID: %@ tempCredential: %@
Posting iMessage allowed value from IDSDaemonCapabilities { allowiMessage: %@, allowFaceTimeAudio: %@, allowFaceTimeMultiway: %@, supportedServicesFlags: %llu }
IDSDaemonCapabilities received bundle info did change callback -- updating capabilities
Processed getDependent queue
IDS registration center notified that Engram key store did update identities; notifying listeners
======= Registration State =======
     Last sent message: %@
       Last registered: %@
     Message in Flight: %@
       Messages queued: %@
          Queued Auths: %@
            Queued Reg: %@
         Current Auths: %@
           Current Reg: %@
  Recent Registrations: %d
==================================
*** Sending message: %@
 *** Too many registrations this last while, we need to come back to try later  (%d of %d)
Kicking dequeue of pending requests
 ** Not sending, we have current authentications in flight, %@
 Sending pending authentication: %@
 No pending authentication
 ** Not sending, we have current registrations in flight, %@
 Sending pending registration: %@
 Removing pending registration, can't register: %@
 No pending registration
 Sending pending deregistration...
We have current authentications or registrations -- canceling pending Absinthe cleanup operations
We have no current authentications or registrations -- enqueueing Absinthe cleanup operation
ids/authenticate/fail
!setGroupState(%llu) main-id=%@
!setGroupState(%llu) service-id=%@
!setGroupState(%llu) successful=%@
!addGroup(%llu) authenticate
ids/authenticate/success
ids/registration/fail
!addGroup(%llu) register
ids/registration/success
IDS registration success
All IDS registrations success
Not reflecting back email query failure, registration is disabled: %@
Not reflecting back email query success, registration is disabled: %@
Registration identities updated; notifying listeners
 => Has registration in queue: %@
Registration center process registration message
Final Active registrations: %@  (For: %@)
Message class: %@  delivered with error: %@  code: %d result: %@   ID: %@
Overriding response code registration message! {overrideResultCode: %ld}
Overriding response alert on specified services! {phoneOverrideService: %@, emailOverrideService: %@}
  Message delivery failed with code: %d
  Message delivery failed with result code: %d  error: %@
Received registration response for: %@   HBI: %@  services: %@
Processing registration response for service { service: %@, status: %@, serverErrorDetail: %{public}@ }
Processing registration response for user { user: %@, service: %@, status: %@, serverErrorDetail: %{public}@ }
No value in response, we're using HBI: %f
Success, next registration date is: %@
Success, Using fallback registration date
*** Matched registration user ID: %@ for user ID: %@
 Result status: %@
 Success!
 *** Server rejected registration { candidateRegistration: %@ }
 *** Server rejected registration permanently { candidateRegistration: %@ }
 *** Need new credentials { candidateRegistration: %@ }
 *** Unhandled status code: %@
 => We have a cert, treating as success
 => We have no cert, treating as failure
Received per-URI status dictionary in register response { service: %@, binding: %@ }
Invalid status returned for a URI in register response -- dropping { service: %@, URI: %@, status: %@ }
KT data returned in register response { service: %@, URI: %@, KTAccountID: %@, KTStatus: %@, KTBlob: %@ }
Received no KTAccount key.
Registration not disabled, saving. { candidateRegistration : %@ }
Registration disabled, not saving. { candidateRegistration : %@ }
Extracted IDs from bindings
Setting number: %@  on registration: %@
Number is empty, not adjusting
 => Adding self handle
 => Adding sentinel, registration doesn't have a self-handle yet
 => Adding sentinel binding
 => Registration is allowed to continue with empty identities
 => ***** No registered identities, failing registration: %@ ******
Success, registered URIs are: %@
KT enrolled URIs are: %@
 Notifying for success of: %@
Registration SUCCESS for %@ on %@
***** Notifying, empty URI response: %@ *****
 ***** Notifying for failure (code: %@:%d) of: %@
 *** We have %d unhandled registrations leftover from this: %@
 All registrations were handled, we're good to go
 *** Absinthe Error from Server ***
 Retries so far: %d  trying again
 Maximum absinthe retries reached, failing registration %@
Server rejected registration permanently; failing all candidate registrations
Server rejected registration; failing all candidate registrations
Bad signature, will refresh credentials for all registrations
Failed constructing validation data
Registration attempt failed with no status code
Registration attempt failed with status code: %d   error: %@   result: %@
Communicating with registration server failed
Registration center send registration message
This is a deregister, and we have no pending deregistration, bailing
Waiting for setup/first unlock to complete before sending registration message -- deferring registration
Push handler returned push token: %@, deferring (%@)
*** We have current (de)registrations, deferring (%@)
*** Lockdown state is expired, not sending %@
*** We have an ongoing authentication, deferring register
Constructing client data objects
Done constructing client data objects {serviceTypes: %@}
   *** Removing registration (from active) from queued/current, it is not possible to register: %@
   *** Removing registration (from queued) from queued/current, it is not possible to register: %@
   => Skipping, we have no auth user ID or cert: %@
environment: %@    token: %@
     already existing phone: %@         already existing appleID: %@   isInDualSIMMode: %@
********* Not adding user dictionary, we already had another phone based registration: %@  (registrations: %@)
Trying to register account without corresponding SIM -- failing {userUniqueIdentifier: %@}
********* Not adding user dictionary, we already had another apple ID based registration: %@  (registrations: %@)
   Adding user dictionary: %@  for service: %@
   ** Not adding user dictionary, already had one: %@  (%@)
   => Adding auth user ID: %@    cert: %@
   Failing registration for user dictionary: %@,  service: %@
   Skipping user dictionary: %@, no URIs   for service: %@
   Services: %@ for register: %@
****** Received registration response: %@
Registering service %@ timestampGUID: %@
Queued %@ for validation (%@)
Sending %@   (ID: %@ Environment: %@)
Not sending %@ we didn't have any authenticated registrations
Registration failed getting client data -- error %@ registration %@
Sending deregistration now...
*** Lockdown state is expired, not sending de-registration
Deferring deregistration for %@
Registration center send hard deregister
Sending hard deregistration now...
Message class: %@  delivered with error: %@  code: %d result: %@
Overriding response code for registration with: %d   remove %@: %@    to stop this
 *** Unauthenticated, need new auth token { auth info: %@ } ***
 *** Unauthenticated, need new auth token { message: %@ }
 *** Server rejected authentication request ***
      User ID: %@
     AuthInfo: %@
Setting auth cert for user ID: %@
Found existing registrations to authenticate: %@
     Authing user with cert {rpi: %@, user: %@, cert: %@}
     Authing user with sig {tag: %@, rpi: %@, user: %@, sigData: %@}
     User lacking cert or credential: %@
Setting auth certs {userID: %@, responseCode: %lld, matchingUser: %@}
Credential for temporary registration is not temporary realm {registration: %@, credential: %@}
Home Number response parsed { success: %lu, cert %@, expiration %@ }
IDS authenticating registration info: %@
    Push handler returned push token: %@
      Service: %@
        Realm: %@
  Environment: %@
Registration center send authenticate registration
*** We have current IDS Authentications, deferring (%@)
*** Lockdown state is expired, not sending IDS Authentication
Queued %@ for validation
Not sending nil IDS Authentication request: %@
Sending IDS Authentication request: %@   (Environment: %@)
Sending report spam message
Sent report spam message (responseMessage: %@) (error: %@) (resultCode: %d) (resultDictionary: %@)
Sending report iMessage unknown sender message
Sent report iMessage unknown sender message (responseMessage: %@) (error: %@) (resultCode: %d) (resultDictionary: %@)
Sending report approved temp handle message
Sent report approved temp handle message (responseMessage: %@) (error: %@) (resultCode: %d) (resultDictionary: %@)
Registration center process handles message
  Received handles query response with result: %d   handles: %@   selfHandle: %@   (actual: %@)   (error: %@)
  Updating %@ with getHandles info
Failing registration, empty get handles response { queuedRegistration : %@ }
Requesting new authentication for registration: %@
Requesting re-registration for registration: %@
Registration center query handles
  => Ignoring query, we have no registration, %@
Added registration %p to getHandles
Adding completion block %p to getHandles queue
Processed getHandles queue
Sending email query for: %@
Provisioning pseudonym {URI: %@, registration: %@}
Too many provisions inflight for this feature -- failing {similiarCount: %d, maxAllowedInFlight: %d, featureID: %@}
Renewing pseudonym {pseudonym: %@, registration: %@}
Revoking pseudonym {pseudonym: %@, registration: %@}
Local time on device and server time are out of sync. Using server time for pseudonym expiry. Local Time: %f, Server Time: %f
Performing pseudonym operation {op: %lu, URI: %@, pseudonymProperties: %@, requestProperties: %@, registration: %@}
  => Ignoring provision, we have no auth cert
  => Ignoring provision, we have no registration, %@
Processed pseudonym message {resultCode: %d, resultDictionary: %@, error: %@}
Updating KT Opt-in status for registration {isOptedIn: %@, registration: %@}
Performing Key Transparency opt-in status update {optInStatus: %@, registration: %@}
  => Ignoring KT Opt In status update, we have no auth cert
  => Ignoring KT Opt In status update, we have no registration, %@
Processed KT opt-in status update message {resultCode: %d, resultDictionary: %@, error: %@}
Requesting validated emails for: %@
  => Ignoring query, we have no auth cert
Sending authenticate registration now...
Registration center authenticate registration
Not sending IDS authentication, we have no main ID for registration: %@
Not sending IDS authentication, we have no profile ID for registration: %@
Not sending IDS authentication, we have no auth token for registration: %@
*** Cannot authenticate, missing SMS signature
Not IDS authenticating, we have no authentication token for: %@
Adding IDS authentication to the queue: %@
 => Really adding
 => Removing old registration info object: %@
 => Simply adding registration info object: %@
Sending registrations now...
Registration center send registration
Not registering, we have no cert for: %@
Not registering, not able to register: %@
Sending registration for %@
Updating registration to the queue (replacing existing): %@
Adding registration to the queue: %@
Registration center send deregistration
Adding deregistration to the queue: %@
Cancelling current registration
Removing current registration: %@
Cancelling queued registration: %@
Removing current registration
Removing current authentication
Cancelling queued authentications
Cancelling queued registration
Token changed, _dequeuePendingRequestsIfNecessary
  * Forcing a reset on the registration count, enough time has passed   %d -> 0
Noting another registration in the last %d minutes, we're now at %d registrations  (Max: %d)
Restarting number of registrations at %d (Max: %d)
No PAC found for user : %@, stopping sim deactivation request
Received invalid message class response { responseMessage: %@ }
SIM deactivation request succeeded with code: %d
SIM deactivation request failed with code: %d
FTResponseActionDoNotRetry: Something is wrong with the request or the request can never succeed.
FTResponseActionRetryWithDelay: The server cannot process the request at this time. Retry after the specified delay.
FTResponseActionRetryWithCorrectedTime: The client's clock is too far off from the server clock.
FTResponseActionRefreshCredentials: Authentication has failed.
FTResponseActionAuthenticationFailed: Authentication has failed.
FTResponseActionPermanentFailure: Something is wrong with the request or the request can never succeed.
Suppressing registration server alert due to presence of internal default
added mapping device ID [%@] to destination [%@]
============= New LinkManager %@ starting =============
Both FixedInterface [%@] and FixedInterfaceDestination [%@] are set. Setting up UDPLink only.
============= Dealloc LinkManager %@ =============
cannot open reporting FIFO file %s, errno=%d
opened FIFO file %s for writing
closed FIFO file %s
%d-%02d-%02d %02d:%02d:%02d.%06d %s  LocalDelivery %s
Sync priority messages queued: %@
Default priority messages queued: %@
Urgent priority messages queued: %@
Urgent Cloud priority messages queued: %@
Messages being sent: %@
Incoming messages not claimed yet:
%3llu msgs
Total
%3llu msgs
None
_startReporter cannot locate temporary directory
_startReporter cannot open %s
removing old fifo file %s
_suspendBTLink %@ -> %@
Not processing _connectivityChangedForDefaultDevice in the IPsecLink path.
_connectivityChangedForDefaultDevice: local(%@ -> %@), cloud(%@ -> %@).
_connectivityChangedForDefaultDevice sending UTunController didConnectForDevice (default)
_connectivityChangedForDefaultDevice sending UTunController didDisconnectForDevice (default)
_connectivityChangedForDefaultDevice NOT(delay) sending legacyUTunBTLinkManagerDefaultPeerConnectivityChanged: %@
_connectivityChangedForDefaultDevice sending legacyUTunBTLinkManagerDefaultPeerConnectivityChanged: %@
_connectivityChangedForDefaultDevice sending legacyUTunBTLinkManagerDefaultPeerCloudConnectivityChanged: %@
_nearbyChangedForDefaultDevice: %@ -> %@
Ignore LMCommandUDPLinkAddress/Reply due to disabled range extension via defaults.
received remote UDPLink %@interface address %@%@ through %@
received remote UDPLink interface address doesn't match to the source of the packet - ignoring
received invalid interface address bytes(%ld) = %@
received remote UDPLink interface down %@through %@
will NOT bring up WiFi when losing BTLink
will bring up WiFi when losing BTLink
Remote device reported data corruption
unknown LMCommand %lu received
UDPLink invalidated - stop retransmitting local interface address
already received remote interface address - stop retransmitting local interface address
didn't receive remote interface address for last %.0fs - giving up!
setDestinationAddress nil for %@.
retransmission already scheduled with %.1fs - resetting it to 1s next time
transmitting UDPLink %@interface address %@%@
cannot send LinkDown when BT is not used - bail out
transmitting UDPLink interface down%@
LinkManager requires BT, skip WiFi handshake.
_startUDPLinkHandshakeForDefaultDevice wantsWiFi %@ immediately %@ mayBringUpWiFi %@
_startUDPLinkHandshakeForDefaultDevice Central: wantsWiFi is YES but mayBringUpWiFi is NO - skip!
_startUDPLinkHandshakeForDefaultDevice !Central: wantsWiFi is YES but localWiFi has no IP - skip!
_startUDPLinkHandshakeForDefaultDevice ignoring stale scheduled handshake %@ %@ %.1f seconds ago
WiFi was brought up %.1f seconds ago but it was brought up again later - ignoring this one
WiFi was brought up %.1f seconds ago but still didn't get an IP - Bring it back down
_startUDPLinkHandshakeForDefaultDevice bring %@ WiFi, %@send handshake now
_startUDPLinkHandshakeForDefaultDevice bring %@ WiFi, %@send handshake in %.1f seconds
process link change for default paired device (oldLink:%@, newLink:%@).
Skip wifi handshake due to disabled range extension via defaults.
Link type changed from %lu to %lu, current link: %@
_setBestLinkToCurrent cbuuid %@ _deviceIDToCurrentLink %@ _cbuuidToLinks %@ oldlink %@ newlink %@
set current link from %@ to %@ for cbuuid %@ deviceUniqueID %@
sending UTunController didConnectForDevice %@
sending UTunController didDisconnectForDevice %@
created new UDPLink %@ state %s with %lu interfaces
created new UDPGlobalLink %@ state %s
created new GlobalLink %@ for session %@ (=> cbuuid), state %s.
removing %@ from links for device %@
_hasGlobalLinkConnectingOrConnected: _cbuuidToLinks: %@
%@ is still connecting or connected.
network interface listener started
network interface listener stopped
sending a packet over %@ (%zdB) = %s
dropping a packet (%zdB) over link type (%d), #dropped: %llu.
use %@ for cloud enabled packet.
use %@ for control message
dropped data for device %@
no current link for %@
No current link for %@ -- asking WiProx to connect.
startLocalSetup called
obliterateConnectionInfo called
reset preferInfraWiFi.
reset last sent default peer states (deviceNearby:%@, deviceConnectivity:%@, deviceCloudConnectivity:%@, peerConnectivity:%@).
reset phone call state.
addPairedDevice for the same UUID %@ - Ignoring
enableConnectionForDefaultPairedDevice YES for cbuuid %@.
connectPairedDevice for unknown UUID %@ - Ignoring
deletePairedDevice for %@
enableConnectionForDefaultPairedDevice NO for cbuuid %@.
deletePairedDevice for unknown UUID %@ - Ignoring
LinkManager requires BT, ignore preferInfraWiFi request.
preferInfraWiFi must not be initiated from this device
switching to preferInfraWiFi mode
preferInfraWiFi requested but no local IP available - ignoring
switching back to Magnet/InfraWiFi mode
LinkManager requires BT: %@.
LinkManager shouldStartBTLinkManager: %@.
No connected BTLE link for cbuuid %@ deviceUniqueID %@ -- asking WiProx to connect.
Already have BTLE link for cbuuid %@ deviceUniqueID %@
Asked to disconnect from cbuuid %@ deviceUniqueID %@
startUDPGlobalLinkForDevice %@
stopUDPGlobalLinkForDevice %@
Remove UDPGlobalLink for device %@
createConnectionDataForDevice - deviceID=%@, localPartyID=%@
No UDPGlobalLink is found.
processRemoteConnectionDataForDevice - %@
startConnectionForDevice - deviceID=%@ isInitiator=%@ remotePartyID=%@
startBTDatagramLinkForDeviceUniqueID - deviceID %@ cbuuid %@
stopBTDatagramLinkForDeviceUniqueID - deviceID %@ cbuuid %@
stopGlobalLinkForDevice %@ (=> cbuuid)
Remove %@ for session %@
IDSGlobalLink is brought down for %@.
Bring down WiFi (currentLinkType:%d).
Magent is connected, skip connecting GlobalLink for %@.
Receive allocate response for request %@, device %@. connectGlobalLinkForDevice with sessionInfo %@.
connectGlobalLinkForDevice: sessionInfo[kIDSQRAllocateKey_StreamInfoSubscribedStreams]:%@
Set alternateDelegate %@ for %@
disconnectGlobalLinkForDevice for  %@
allocate request %@ is pending for %@
handleAllocateRequestFailureForDevice - deviceID %@, requestID %@, erroCode %d
setAcceptedRelaySession - sessionID %@, relaySessionID %@.
%s - sessionID %@, hasPendingAllocation %@.
%s - sessionID %@, timeBase %@.
sendSKEData - sessionID %@, skeData %d Bytes.
sendSKEData - sessionID %@, there is no link for sendSKEData (links:%@)
sendKeyMaterialMessage - sessionID %@, groupID %@
sendKeyMaterialMessage - sessionID %@, there is no link (links:%@)
setDesiredMaterialsForSession - sessionID %@
setServerDesiredMaterialsForSession - sessionID %@, there is no link (links: %@)
requestMaterialsForParticipantIDs - sessionID %@
setDefaultUnderlyingLink - sessionID %@, linkID:%d.
setPacketNotificationFilter - sessionID %@, linkID:%d, enable:%@.
dropIPPackets - sessionID %@, linkID:%d, payloadArray:%@.
updateProtocolQualityOfService - sessionID %@, linkID:%d, isGood:%@.
stopKeepAlive - sessionID %@, linkIDs:%@.
WiFiAssist enabled: %@
currentCellularSignalStrength - sessionID %@.
startLinkProbing - sessionID %@, options: %@.
stopLinkProbing - sessionID %@, options: %@.
queryLinkProbingStatus - sessionID %@, options: %@.
flushLinkProbingStatus - sessionID %@, options: %@.
sendStatsRequest - sessionID %@, options: %@.
setRemoteDeviceVersion - sessionID %@, version: %u.
receiveJoinNotificationFromAParticipant - sessionID %@.
setUPlusOneModeForSessionID - sessionID %@, isUPlusOneEnabled: %@.
manageDesignatedDestinationsWithSessionID - sessionID %@, sessionStateCounter: %u, destinations: %@, withType: %u
removeParticipantIDsWithSessionID - sessionID %@, sessionStateCounter: %u, participantIDs: %@
get session info for group %@, session %@, options %@
update session participants for group %@, session %@
registerPluginForGroup could not find GlobalLink for session %@
updateSessionURIToParticipantIDs for group %@, session %@
createAliasForParticipantID could not find GlobalLink for session %@
participantIDForAlias could not find GlobalLink for session %@
updateParticipantType %u - sessionID %@
sendConnectedLinkInfoToAVCForSessionID %@
setClientUniquePID could not find GlobalLink for session %@
requestChildConnectionIDForLinkID could not find GlobalLink for session %@
setIsOnPhoneCall %@ for deviceID %@
%@ didConnectForDevice %@
%@ didDisconnectForDevice %@
default device is in preferInfraWiFi handshake, skip notifying BTLink hasSpaceAvailable.
didReceiveSKEData - alternateDelegate:%@, skeData:%d bytes.
didReceiveKeyMaterialMessage - alternateDelegate:%@ from %@ to %@
didReceiveMaterialInfo - alternateDelegate:%@ materialInfo:%@
Not processing didConnectOverCloud in the IPsecLink path.
didConnectOverCloud for %@.
didFailToConnectOverCloud for %@.
didDisconnectOverCloud for %@.
allocation request was delayed, retry...
didConnectUnderlyingLink - alternateDelegate:%@, linkID:%d, linkUUID:%@.
didReiceiveChildConnectionID - alternateDelegate:%@, childConnectionID:%@ linkID:%d
didDisconnectUnderlyingLinkID - alternateDelegate:%@, linkID:%d, linkUUID:%@, reason: %d
didDefaultUnderlyingLinkChangeSucceeded - alternateDelegate:%@, currentDefaultLinkID:%d.
didWiFiNWPathFlagsChanged - alternateDelegate:%@, nwPathFlags:%u.
didCellularNWPathFlagsChanged - alternateDelegate:%@, nwPathFlags:%u.
didRATChange - alternateDelegate:%@, newRAT:%s.
didCellularMTUChange - alternateDelegate:%@, cellular MTU:%u.
terminateCallDueToIdleClientForLink - alternateDelegate:%@
receive session-info for group %@, session %@, status: %u.
didReceiveReportEvent - alternateDelegate:%@, eventDictionary:%@
%@ reported power state change: %@
%@ reported paired device change.
enableConnectionForDefaultPairedDevice NO for currently paired device.
_handleNetworkChanges %@ = %@
_handleNetworkChanges _localWiFiAddressUsedForDefaultDevice = %@
receive WiFi IP address, start QR allocation.
LinkType %lu, RATType %lu for non-FaceTime clients
current link type for %@ is %d.
WRM recommends the link type %u, but IDS ignores WRM recommendations per rdar://problem/33602915 discussion
cellular RAT changed, usable: %@.
celluar data is usable, retry QR allocation for %@.
cellular SoMask changed: %u.
Registering for events {eventID: %@, options: %@}
Incoming Rapport message
Rapport connection invalidated
Rapport connection interrupted
Failed to activate companionLinkClient, {Error:%@}
Activated companionLinkClient {self: %@}
Updated local device {device: %@, publicIdentifier: %@}
Start companionLinkClient setup
Dealloc'ing IDSRapportClient
outgoing IDS Message {deviceIentifier: %@, event: %@}
Failed to find companionLinkClient {error: %{public}@, deviceIdentifier: %{private}@}
Found companionLinkClient {deviceIdentifier: %{private}@, client: %{private}@}
Finished sending message {deviceIdentifier: %@, error: %@}
Discovered device %@
Lost device %@
incoming IDS Message {event: %@, options: %@}
Dropping event because it's missing senderID {options: %{private}@, event: %{private}@}
Dropping event because _RPOptionSenderID is undefined {options: %{private}@, event: %{private}@}
Error fetching stored gossip recipients { error: %@ }
Error unarchiving stored gossip recipients { error: %@ }
Error archiving stored gossip recipients { error: %@ }
Error storing gossip recipients { error: %@ }
Initing UTunConnection %@ %p
shouldUseNWFramingOverIPsecString: %@
Deallocing UTunConnection %@ %p
Insufficient space for {dataProtectionClass: %@}, {pendingOutgoingBytes:%lu}, {maxQueueSize:%lu}, {inflightMessageCount:%lu}
%@ changing cbuuid from %@ to %@
%@ ignoring cbuuid update from %@ to %@
%@ enabled state changed: %@ -> %@
Removing continuity message %@
%@ Peer awake state changed to YES with %lu pending messages (%lu sending). Kicking queue to service non-waking messages.
%p: %s
OTR is disabled on magnet connection, enable stream encryption.
Found pending or locked continuity peer %@, disable connection for %@.
%@ _startConnection
IDS internally calling UTUN's openSocketWithOptions
%@ IDS internal openSocketWithOptions call returned socket %d, error %@
%@ created %@ for socket %d - sending handshake with version %u
%@ resending %lu pending socketpair messages
%@ Failed to open UTun socket, waiting...
UTunConnection receives remote controlChannelVersion %@ instance ID [%s] flags %016llX, use shared OTR session %@, use named OTR session token %@, resume resource transfers %@, new service supported %@, dynamic services %@ service minimum compatibility version %u
%@ openSocket returned with connection to old instance - stop and reconnect
UTUNConnection sendMessage
%@ enqueuing%@ message %@ messageCount %lu - QoS=0x%x
Message with topic %@ has queueOneIdentifier %@, flushing older messages that match.
Attempting to send nonCloudWaking message on non-magnet connection. Coallescing {guid: %@}
%@ socket buffer is empty, dequeuing a message.  didWakeHint(%d)
%@ Waiting for remote device wake before dequeuing message.
Cancelling messages %@
Clearing fallback stickiness due to: %@
Server Bag provided us with a fallback timeout of %f
   **** cloud fallback disabled ****
%@ performing cloud fallback for message[%u] %@ which is scheduled to expire %@
%@ - messages in queue in need of fallback, setting timer for: %f
%@ fallback timer fired, fallback queue: %lu
Exception caught handling fallback timer: %@
%@ - messages in queue, setting timer for: %f
%@ - no messages in queue, clearing timer
%@ timeout timer fired, sending queue: %lu %lu
Exception caught handling timeout timer: %@
%@ sending resource transfer cancel message %@
Message %@ %@ %@ removed, total message count %d - %@
Message on service %@ not allowed! Attempted to send on traffic classes: %@ Permitted traffic classes: %@
Overriding previous decision on message for topic %@ due to feature flag that allows messages will empty traffic classes
Server Bag {%@:%d}
%@ Assert QuickRelay after %d ms
%@ utun socket pair connection inFlightMessageCount %lu (max %u) - do not dequeue
%@ _dequeueMessage - %@ messageCount %lu
**** Local IDS connectivity is disabled, only using cloud ****
UTunConnection _isCloudEnabled:%@ (%@, messageCount:%d)
%@ is not available, waiting.
Message with guid %@ not allowed due to its traffic class
%@ created sending power assertion %@
Translated message %@ with servicename %@ to streamID %u
Piggybacking message %@ with servicename %@ with incoming streamID %u created %@ (old id %u)
Remote instance changed while receiving message %@ with topic %@ - continue and dispatch reconnect
Non BT usage is not allowed, failing message
%@ resource transfer sender %@
%@ cannot read message to deliver for resource transfer %@
* Dequeuing for Sending %{public}@ priority local message payload of data size: %lu/%lu   for topic: %{public}@:%{public}@  guid: %{public}@  messageID: %d
Message %@ added to queue, total message count %d, sendingTopics count %d
Send duplicate message %@
Clearing power assertion: %@
* Sending message with sequence number %u
%@ Sending message[%lu] %@ %@.
%s: statsDictionary is nil for direction %d
%s: priority %d updated direction %d stats %@
Starting messageDequeueTimer
Request to start messageDequeueTimer ignored -- timer already running
Dequeue Message Timer did Fire -- Dequeueing messages
Requeued %lu sending messages for %@.
OTR negotiation timed out for %@ but remote device doesn't support shared session.
OTR negotiation timed out for %@, retry.
OTR negotiation timed out for %@, clear error state and requeue all messages.
%@ OTR for UTunConnection %p, priority %ld
UTunConnection - No class storage key specified in notification %@
Class %@ storage keys are available, processing %lu pending messages
Encrypted message for token %@  original size: %lu  encrypted size: %lu  elapsed: %.6f
Failed to encrypt UTunConnection message! Error %ld
Send OTR message for %{public}@ E:%u SN:%u.
_sendOTREncryptionQueue: invalid OTR token %@
Encrypted message for device unique ID %@  original size: %lu  encrypted size: %lu
Send public key encrypted message.
Send OTR message for %{public}@ E:0.
Waiting OTR session for %04x(%@) ...
OTR session negotiation for %@ is in progress
Session key store is not available for class C, but %@ message (%u) is already stored.
Session key store is not available for class C, holding on to %@ message (%u)
Current pending messages %@
Session key store is not available for class A, but %@ message (%u) is already stored.
Session key store is not available for class A, holding on to %@ message (%u)
Clear OTR error map for %@.
Set OTR error map for %@.
OTR session for %@ is in error state, skip negotiation.
_handleOTRDecryptionError: invalid OTR token %@
Attempt to decrypt invalid message type %u.
*** Recv old OTREncryptedMessage but remote device asserts useSharedOTRSession message %@
*** Recv OTR message with unknown topic, command:%d, sequenceNumber:%u, streamID:%04x, version:%u, priority:%d
Recv OTR message for %{public}@ E:%u SN:%u.
Stored class C OTR message for %@, sequneceNumber:%u.
Decrypted message for %@  original size: %lu  unencrypted size: %lu  elapsed: %.6f
*** OTR session for %@ is not ready.
Stored class A OTR message for %@ sequenceNumber:%u, ignore decryption failure.
Decrypted message for device unique ID %@  original size: %lu  unencrypted size: %lu
Decrypted continuity message, lock peer %@ for btUUID %@.
Failed to decrypt UTunConnection message! Error %ld
Flush all messages for peer %@
Broadcast: Sending ack %@ for received sequence number %d
Sending Expired ack %@ for received sequence number %d
Received UUID list adding message UUID %@, purging old UUIDs %@
Received UUID list adding message UUID %@
IDSSocketPairCommandResourceTransferMessage requires a messageUUID
IDSSocketPairCommandResourceTransferMessage should be IDSSocketPairResourceTransferMessage
IDSSocketPairCommandResourceTransferMessage received %@ @ incorrect offset %llu (should be @%llu)
IDSSocketPairCommandResourceTransferMessage cannot find receiver for message %@ - asking sender to reset
Duplicate file transfer setup detected {duplicateUUID: %@}
IDSSocketPairCommandResourceTransferMessage already receiving message %@ @%llu
Aborting resource transfer receiver for %@ after %lf seconds
IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@ (reason %d)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (was sending %llu)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (ignoring nonmatching message %@)
IDSSocketPairCommandResourceTransferMessage got resume message for %@ @ %llu (sender not found)
Got cancel message for incoming file %@ cancelReason %u
Got cancel message for %@ cancelReason %u
Got cancel message for outgoing file %@ cancelReason %u
IDSSocketPairCommandResourceTransferMessage got cancel message for %@ cancelReason %u, but no sender or receiver found
IDSSocketPairCommandResourceTransferMessage could not create receiver from message %@
IDSSocketPairCommandResourceTransferMessage received and completed
IDSSocketPairCommandResourceTransferMessage received - waiting for more
%@ received a message that we cannot accept without encryption! %@
Got incoming data message {dataMessage: %@, rawMessage: %@, command %d, self: %@, didDecrypt: %@}
Received message has messageUUID %{public}@ peerResponseID %@ expectsPeerResponse? %@ wantsAppAck %@ remoteExpiryDate: %@
Received a message that has passed its expiry date, sending back an expired ack MessageUUID: %@
%@ [%@] received a %d message when it was expecting a handshake!
Incompatible IDS version number!
Incompatible IDS version number - please make sure your build versions match!
Incoming message %@ servicename %@ streamID-found %u newly-created %@ (serviceMapMessage %@)
Cannot create mapping while receiving message %@ with topic %@ - continuing
UTunConnection Error: missing expected message topic!! (no optimization) streamID %u  (topicForStreamID %@)
Remote instance changed while receiving message %@ - drop and reconnect
UTunConnection Error: missing expected message topic!! (supports optimization) streamID %u  (topicForStreamID %@)
*************** SERVICEMAP ERROR: FAILED TO GET TOPIC FOR streamID %u ****************
Incoming message %@ servicename-found %@ streamID %u sequenceNumber %u
Incoming message %@ servicename-found %@ streamID %u
Broadcast: incoming message sequence number %u 
* Receiving local message payload of size: %d for streamID: %d  messageSequenceNumber %d  compressed %@
Broadcast: incoming protobuf sequence number %u 
* Receiving local protobuf %@ for streamID %d  compressed %@
Decompressed local protobuf message data from: %lu  to: %lu
LocalDelivery: IDSSocketPairCommandProtobufMessage received incompatible data message of type %@
* Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
  => Message id %d ACK'd RTT: %f  [instantaneous %f]  time sent: %f
Removing ack'd message[%u] with sequenceNumber %u (index=%lu), message %@ remaining count %lu
  => Message id %d ACK'd but it already timed out...
%@ [%@] received handshake with version %u. We require %u. Needs handshake? %@
Broadcast: incoming app ack sequence number %u 
SocketPairConnection should have consumed this and never pass it up
GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY %@
* GOT SOCKET PAIR COMMAND MESSAGE OUTGOING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
GOT SOCKET PAIR COMMAND MESSAGE INCOMING NICE PROXY %@
* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE INCOMMING NICE PROXY Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
GOT SOCKET PAIR COMMAND INCOMMING IMESSAGE COMMAND %@
* (PROCESSED) GOT SOCKET PAIR COMMAND MESSAGE iMessage Command Receiving local data payload of size: %d   for streamID: %d  messageSequenceNumber %d  compressed %@
DECOMPRESSED IMESSAGE DECRYPTED DATA NOT NIL: %@
Passing %@ Down to UTUN
Got ServiceMapMessage reason %u serviceName %@ streamID %u
Popping dialog to alert the user of the IDS version mismatch
%@ informed that utun socket pair connection %@ has closed...
%@ informed that IDSNWSocketPairConnection has closed.
%@ connectionBecameEmpty %@
%@ connectionDidReachInFlightMessageLowWaterMark %@
%@ connectionDidReceiveBytes %@
Calling IDSOTRController:startOTRNegotiationWithDeviceIfNeeded to force session negotiation.
_otrTokenToArray: invalid OTR token %@
Registration is not supported on this device
Scheduling heartbeat in %f seconds
Given a nil CTPNR! { self: %@, CTPNR: %@ }
Phone Number Validation registration agent has sent %d SMSs
Lockdown state: %@
1. Setting SMS status to: IDSSMSIdentificationStatusIdle
Phone Number Validation agent dealloc
Determined whether user subscription selection is still pending { isDualSIM: %@, hasSelectedPhoneNumber: %@, didReceiveSIMSetupCompleteNotification: %@ }
SMS registration center notify failure
2. Setting SMS status to: IDSSMSIdentificationStatusIdle
SMS registration center notify success
3. Setting SMS status to: IDSSMSIdentificationStatusIdle
Device is currently locked down, we're not able to proceed (State: %@)
SIM is not ready to proceed with registration
 SIM State says cannot register, registration State
Lockdown changed
     ==> We're activated, let's go, waiting...
Registering %@ for lockdown changes
Device ID Changed
     ==> We're in a good SIM State, checking heartbeat, waiting...
Received PNRReadyStateNotification { state: %@
CT phone number registration request sent { success: %@, timeout: %@, pushTokenHexEncoding: %@ }
Successfully sent registration request
Failed to send registration request
CT phone number registration response received { data: %@ }
Handling incoming phone number registration response { phoneNumber: %@, signature: %@ }
Received failed status in phone number registration response { status: %@ }
Checking to see if we restored from backup: %@
     ==> Restored from backup, and we need to re-register here, waiting...
     ==> System backup complete, waiting...
     ==> System restore state changed, waiting...
     ==> SIM setup did complete -- kicking heartbeat
     ==> Keychain migration complete, waiting...
Phone Number Validation Request Delivery clear timer fired
We're idle, bailing
Overriding Phone Number Validation Request timeout for registration with: %f   remove %@: %@    to stop this
Attempting to send SMS verification { mechanism: %@ }
Still waiting on timeout to clear for next Phone Number Validation request to be delivered, waiting
4. Setting SMS status to: IDSSMSIdentificationStatusWaitingToBeginSMSIdentityVerification
     ==> We have no push token, bailing, waiting...
6. Setting SMS status to: IDSSMSIdentificationStatusWaitingSMSIdentityVerificationDelivery
We're currently iterating over Preflight mechanisms -- continuing { currentPreflightStack: %@ }
Sending Preflight message
Setting test data on preflight message { testData: %@ }
Setting IMSI and PLMN on preflight message { IMSI: %@, PLMN: %@ }
Received preflight response { error: %@, resultCode: %ld, resultDictionary: %@ }
Sending phone number verification { mechanisms: %@ }
Failed preflight -- failing phone number validation
Preflight unsuccessful -- cancelling scheduled heartbeat
_tryToSendSMSIdentification   state: %d
7. Setting SMS status to: IDSSMSIdentificationStatusWaitingToBeginSMSIdentityVerification
Checking if user has disabled SMS Registration
Phone Number Validation has been disabled by the user
Required user selection has not yet been set and system setup is in progress -- deferring SMS identification
     ==> We're not in the right state to being Phone Number Validation request identification, waiting...
     ==> Device can't register now, waiting...
     ==> SIM is not ready to register, waiting...
Need to request user permission for SMS, but system setup is in progress -- deferring SMS identification
Should notify about Phone Number Validation requests for this carrier
Obtained permission to send SMS from requestor -- kicking identification
Did not obtain permission to send SMS from requestor -- failing registration
Phone Number Validation Request Notification request is up
     ==> Can't send Phone Number Validation requests right now, need to wait for timeout, waiting...
Already completed max number of Preflights; deactivating service { maxPreflights: %d }
Haven't completed max number of Preflights yet { preflights: %d, maxPreflights: %d }
Already sent max number of SMS; deactivating service { maxSMSSends: %d }
Haven't sent max number of SMS yet { sends: %d, maxSMSSends: %d }
8. Setting SMS status to: IDSSMSIdentificationStatusWaitingSMSIdentityVerificationDelivery
Preflight disabled; sending legacy phone number verification
Preflight short-circuiting; sending phone number verification with overrides
Beginning preflight
No requestors are present for delegation of SMS permission
SMS registration handle SMS delivery failed
Registration request failed delivery { preflights: %d, sends: %d, attemptsWithoutSend: %d }
No requestors -- we must have been cancelled
Retrying this validation { attemptsWithoutSuccessfulSend: %d, maxRetries: %d }
9. Setting SMS status to: IDSSMSIdentificationStatusWaitingToBeginSMSIdentityVerification
Not retrying this validation { attemptsWithoutSuccessfulSend: %d, maxRetries: %d, shouldBypassRetry: %@ }
Max retries consumed -- failing phone number validation
10. Setting SMS status to: IDSSMSIdentificationStatusIdle
SMS registration center handle SMS successfully delivered
Registration request successfully delivered
11. Setting SMS status to: IDSSMSIdentificationStatusWaitingSMSIdentityVerificationResponse
Using telephony-provided timeout { telephonyTimeout: %@ }
Setting timeout for Phone Number Validation Request { timeoutInSeconds: %f, minimumReasonableTimeout: %f, defaultTimeout: %f, telephonyTimeout: %@ }
SMS registration center handle incoming SMS
Received registration request response SMS
Phone number: %@     Class: %@
Signature: %@        Class: %@
Discarding registration request response, because we are not in the correct state to accept it
Invalid number provided: %@   Class: %@
Invalid signature provided: %@   Class: %@
12. Setting SMS status to: IDSSMSIdentificationStatusIdle
Resetting Phone Number Validation Attempt counter from %d to 0
Resetting Phone Number Preflight attempts to 0 { _numberOfPreflights : %d }
SMS registration center timed out waiting for SMS
Timed out waiting for Phone Number Validation response
Sending another
Adding phone number valiation requestor { requestor: %@, requestors: %@ }
Removing phone number valiation requestor { requestor: %@, requestors: %@ }
13. Setting SMS status to: IDSSMSIdentificationStatusIdle
Heartbeat
    State: Idle
    State: Waiting to begin Phone Number Validation request identity verification
    State: Waiting for Phone Number Validation request identity delivery
    State: Waiting for Phone Number Validation request identity response
    State: Unknown: %d
     ==> We're idle, ending this heartbeat madness now
     ==> Waiting for identity response, waiting...
     ==> Registration is not supported, skipping heartbeat
     ==> Waiting to begin SMS, starting now
Not getting dependent registrations, we don't have a registration
Not getting dependent registrations, we're not authenticated for: %@
*** Lockdown state is expired, not sending dependent registration check
Adding registration %p to getDependent queue
Adding completion block %p to getDependent queue
Requesting dependent device info for registration: %@
  Received get dependent registration response with result: %d  error: %@
 response for message: %@
   response idsUserID: %@
No GUID for registration %@, when processing getDependentRegistration response
Sending get dependent registration request: %@  (Environment: %@)
We have an outstanding getDependentRegistrations request for userID: %@
Remove OTR timer %p for %@.
OTR timed out for %@, timer %p.
Set OTR timer %p for %@
  => will, send out OTR negotiation data %luB for %@, count:%08x.
_topicFromToken: invalid OTR token %@
_priorityFromToken: invalid OTR token %@
Finished creating MMLs { mmlGUID : %@ count : %ld service : %@ sendMode : %@ }
%@ - No account for service name %@ found to send a message, bailing...
sendAheadGroup { group %@, account %@, destination: %@ }
Send ahead message %@ got response code %lu error %@ lastCall %@
Group updated, sending ahead to members { topic : %@ }
Missing server messaging entitlement -- failing creation of IDSDXPCServerMessaging collaborator {connection: %@}
Invalid server messaging entitlement -- failing creation of IDSDXPCServerMessaging collaborator {connection: %@, serverMessagingEntitlementValue: %@, testToolEntitlementValue: %@}
Found a non-string server messaging entitlement value -- failing creation of IDSDXPCServerMessaging collaborator {connection: %@, serverMessagingEntitlementValue: %@}
Created XPCServerMessaging {self: %p, serverMessagingEntitlementValue: %@, connection: %@}
Not entitled for server messaging topic! {self: %p, topic: %@, _serverMessagingEntitlements: %@}
Adding server messaging client {self: %p, uuid: %@, topic: %@}
Error creating proxy for server messaging client {self: %p, uuid: %@, topic: %@}
Removing server messaging client {self: %p, uuid: %@, topic: %@}
Not entitled to send certified delivery receipt on topic { topic: %@ }
daemon requested sendMessageData { guid: %@, options: %@ }
Received invalid message class response in IDSServerMessaging { responseMessage: %@ }
Sent server message with { responseMessage: %@, messageError: %@, resultCode: %d, resultDictionary: %@ }
Sending server message { guid: %@, topic: %@, message: %@ } 
sendCertifiedDeliveryReceipt given nil certified delivery context
Sending certified delivery receipt to server { topic: %@, guid: %@, context: %@ }
Received incoming server message over push in IDSDXPCServerMessaging { guid: %@, topic: %@, fromID: %@ }
No certified delivery RTS found in server message payload with cdv { guid: %@, cdv: %ld }
Giving message to client { guid: %@, clientUUID: %@ }
No client found for guid { guid: %@, topic: %@ }
Sending pending offline message response to server in IDSServerMessaging { topic: %@ }
direct messaging capability not supported by peer
Invalid message size (%lu < %zu)
processing direct messaging info
direct messaging info: resolved version %u (l:%u r:%u)
direct messaging info: peer supports device connection
direct messaging info: peer supports concise ACKs
notifying clients with state: %llu
Received direct messaging connection for service: %@
No services when processing %@
Index when processing %@ : %lu
No objects when processing %@
No local objects when processing %@
No connection when processing %@
No entitlements when processing %@
No allowed services when processing %@
completing setup info for %@ : %@, idx %lu, broadcast %d
issuing connected socket to client %@
Device first unlocked
Device unlocked
Device locked
Saving OTR session key store
Saving OTR session class %@ store (Success: %@)
Device is under data protection lock, not loading class A session keys
Device is under first data protection lock, not loading class C session keys
Class A store is already loaded ignoring...
Class C store is already loaded ignoring...
Class D store is already loaded ignoring...
Loaded stored class %@ session store
Missing session key dictionary %@ or data protection string %@
Did not find class %@ store to load
%@ - Missing service in token, can't store session key
%@ - Missing service in token, can't retrieve session key
Found session key %p for topic %@
%@ - Missing service in token, can't remove session key
Found session key for token: %@
No session key for token: %@
Saving now
Storing session key for %@.
Removing session key for %@.
removeSessionKeyForAllTokenFromMainQueue
Cleaning up keychain
OTRStore: invalid OTR token %@
array_ref = %@
firstCommonName = %@
Completed ID query {uri: %@, fromURI: %@, error: %@}
Purging tokens forURI %@ fromURI %@ fromService %@
Bag disabled -- Not purging tokens forURI %@ fromURI %@ fromService %@
No updates, ignoring...
No fromURI, ignoring...
No fromService, ignoring...
Will add valid expiry
Caching ID query responses: %@   date: %f   from URI: %@   from Service: %@ addValidExpiry
Trying to cache Invalid for ourselves, ignoring...
 => Ignoring update to unknown, just updating the cache
Removing cached entries {service: %@}
 => From Service: %@
 => Bogus ID query for: %@   ignoring this
 => Not looking up... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
 => Forcing query for URI: %@
 => Not looking up... status is Valid
 => Not looking up, query not allowed... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
 => We can't look up, but can piggyback... current status: %d  current time: %f   last looked up: %f  difference: %f  difference needed: %f
 => Issuing ID query for URIs: %@   (Current status: %d  Last time: %f   Current time: %f  Difference: %f  Needed Difference: %f)
Completed ID query for URI %@ fromURI %@ (Error: %@)
Over %ld hour(s), resetting query per hour(s) count
New start query date %@
Device does not have a cert, attempting to proxy the query
Remote ID IDs Query V2 has completed with the following: %@  FromURI: %@ ReturnedService: %@ ReturnedSucesss: %@ ReturnedError: %@ 
Updating Cache  %@
Calling Completion Block  %@
Device does not have a cert {_allowProxyQueries: %@, URIsToQuery: %@}
We're at %@ queries for this hour
We have at least one valid result, returning cached results %@
We're at %@ queries for this hour, can't do more
Triggered auto bug capture for query rate limiting {session : %@, error: %@}
We didn't query anything, returning cached results %@
 => Bogus ID query for: %@   ignoring this request
 => From URI: %@
 *** Missing identity, failing query
 => Bogus ID for: %@   ignoring this
 => Expired status -- returning unknown {URI: %@, fromURI: %@, difference: %f, timeNeeded: %f}
Empty service or URI to send ID status changes
Sending id status changes %@ for service %@ URI %@ success %@ error %@
Empty uniqueID %@ for adding completion block
Empty completion block for uniqueID %@
Completion block for uniqueID %@ added %@
Empty uniqueID %@ for removing completion block
Removed completion block for uniqueID %@
**** Forcing deleting of peer cache ****
Forcing flush of peer cache
Forcing save of peer cache
Non-string key in cache (service) -- Removing
Non-dict value in cache (service) -- Removing
Corrupted entry in cache (missing dict). Removing entry
Corrupted entry in cache (status). Removing entry
Corrupted entry in cache (lookUpDate). Removing entry
Removing entry with unknown status {URI: %@, URIDict: %@}
Exception processing cache -- deleting {exception: %@}
Loaded cache: %d items
Finished wipe of legacy cache
Saving cache: %d items
  => Invalid URI, below our minimum length: %@
  => Invalid URI, empty: %@
  => Invalid URI, phone number, with no '+' character: %@
  => Invalid URI, email, with no '@' and '.' characters: %@
  => Invalid URI type: %d  URI: %@
DB version up to date
Updated DB to version 100
IDSServerDesiredKeyMaterialSet: GFTKeyWrapping not available
IDSServerDesiredKeyMaterialSet materialDataByID: could not encrypt the key material for participantID: %llu, remote pub key: %@, mki: %@
IDSServerDesiredKeyMaterialSet materialDataByID: encrypted the key material for participantID: %llu, remote pub key: %@, mki: %@
Handling request sysdiagnose push {userInfo: %@}
Exception caught in IDSRegistrationPushHandler {exception: %@, handler: %@, selector: %@}
Caught exception handling request sysdiagnose push {exception: %@}
Caught exception handling server triggered prompt push {exception: %@}
Handling register push {userInfo: %@}
Caught exception handling register push {exception: %@}
Handling reload bag push {userInfo: %@}
Caught exception handling reload bag push {exception: %@}
Handling handles updated push {userInfo: %@}
Caught exception handling handles updated push {exception: %@}
Handling devices updated push {userInfo: %@}
Caught exception handling devices updated push {exception: %@}
Handling flush cache push {userInfo: %@}
Told by server to flush entire query cache
Caught exception handling flush cache push {exception: %@}
IDSRegistrationPushHandler - Accepting incoming pushes
IDSRegistrationPushHandler - No longer accepting incoming pushes
Activating {xpcDaemon: %{public}@}
clientConnection missing pairing entitlement -- returning nil pairing collaborator {xpcDaemon: %{public}@}
clientConneciton has pairing entitlement -- returning pairing collaborator {xpcDaemon: %{public}@, collaborator: %{public}@}
Get pairingDeviceManager collaborator {xpcDaemon: %{public}@, collaborator: %{public}@
clientConnection missing local pairing entitlement -- returning nil reunion sync collaborator {xpcDaemon: %{public}@}
clientConnection has local pairing entitlement -- continue {xpcDaemon: %{public}@}
clientConnection missing test tool entitlement -- returning nil internal testing collaborator {xpcDaemon: %{public}@}
Warning: [[request IDSSessionID] length]: %lu != sizeof(uuid_t): %lu
QRAllocation destroyed
Invalid session. Skip AWD report
access token of allocation for QR session %@ expired (%f > %@). Discard it.
_purgeAllocation: Invalidate allocation
allocation timeout timer cancelled
allocation timed out
Sending server message QR metrics allocation timeout report for session %@ requestID: %@, ua: %@
failed to send server message allocation timeout QR metrics report: error: %@  code: %ld
Finished sending server message allocation timeout QR metrics report for session %@ delivery error %@
Dealloc IDSQuickRelayAllocator %@.
no groupID in %@
session token or address not available: %p %p
Session not found for %@
send keepalive for groupID: %@, sessionID: %@
failed to send keepalive request: error: %@  code: %ld
failed sending allocate request: %@ error: %@  code: %ld
_setupAllocation:fromURI:sessionID:isSessionIDRemoteDeviceID:options:prevConnectStatus:requestUUID:connectReadyHandler: called {sessionID: %@} options[kIDSQRAllocateKey_IsLightweightParticipant] = %@
translate deviceID: %@
shared session allocation, previous connect status: %p
setTestOptions: IDSGroupSessionForceQRSession
cached response previous connect status, reason/error/token/ip: %u %u %u %@
groupID not set for shared session allocation: %@
QuickRelayServerProvider switch has been deprecated
request allocation for a specific address %@
_setupAllocation: preferredRemoteInterface %@
_setupAllocation QuickRelayServerAddress test option: %@
_setupAllocation test options: IDSGroupSessionForceDegraded
_setupAllocation test options: IDSGroupSessionBlockUPlusOneSession
_setupAllocation test options: IDSGroupSessionAppleTestingKey
Send allocate request, recipient count: %u, requestID: %@, time: %.6f.
Stream information to cache, idsSessionID=%@, isJoinAllocation: %@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@
setupNewAllocationToDevice:options:connectReadyHandler: called {deviceID: %@}
setup allocation for %@ service to device %@
No response found for groupID: %@
_setResponseForQRGroupID:groupID: called {groupID: %@}
Current cached allocation response contains fromURI: %@
getAllocateResponse:groupID called {groupID: %@}
use hardcoded session token for group %@, session %@.
No session allocation time: %@ %@
No relay session ID: %p %p
Invalid relay session ID length: %u %u
Invalid relay session UUID: %@ %@
No response for relay sessionID %@
_mergeParticipantID2PushTokenMapping:sourceResponse:sourceResponse:mappingChange: called
No participant information in %@
No recipientID or push token in %@
merge new participant id %@
%u new participant-id to push token mappings added, %@
_notifyParticipantID2PushTokenMappingChange: called
_notifyURIToParticipantIDMappingChange: %@
No groupID in %@
No QR sessionID in %@
Duplicated responses for sessionID: %@, %@, %@
cached allocation response has issue: %@
use duplicated response
ignore duplicated response
failed to find IDSDSession object for %@
no IDSDSession ID in %@
Should switch from %@ to %@
message added to cache: %@
addConnectStatus, groupID: %@, relaySessionID: %@i, data: %u %u %u %@
No response for groupID: %@
Response is not for sessionID %@, response %@
Cached response modified for relay sessionID %@
response invalidation is supported on internal install only
no response for groupID %@
self allocation in cache: %@
_getSelfAllocationFromCache: allocation is nil {sessinID: %@}
_sendIDQueryRequest:fromIdentity:fromURI:fromService:completionBlock: called { fromService: %@, shouldForceQuery: %@, fromURI: %@, fromIdentity: %p, recipientIDs: %@ }
Current cached allocation response doesn't contain fromURI: %@
_setupNewAllocation: called {sessionID: %@}, isLightweightParticipant = %@, fromURI: %@
Unable to setup QR allocation for unregistered account for %@ service
missing sessionID to setup a QR allocation
No groupID for shared session %@
found cached allocation response for %@: %@, previous connect status %@
cached allocation response has issue: %@ %@
Expired time: %llu, current time: %llu
Response has expired or about to expire
found no cached allocation response for %@, isAllocateRequestForUnauthorizedUser: %@, shouldUseCachedResponse: %@
trying to change a read-only dictionary
look up peer with URI: %@, push token count: %u, prevent duplicates: %@,  tokens: %@
Skipping duplicate %@
could not look up recipient's push tokens, ID: %@, errors: %@ 
Missing expected default paired device's push token %@
use QR session info from user defaults: %@.
no push token for participantID %llu
no response for %@
no participant list in %@
no push token for participantID %@ in response %@
participantID to push token mapping: %@ %@
no push token for participantID %llu in response %@ for group: %@
participantID: %llu, pushToken: %@, group: %@
URI for participant ID %llu in group %@: %@
No URI for participant %@ in group %@
IDSSession ID %@ requested additional allocation for QR Session ID %@, allocateType %d, reason %d
could not find original allocate request to clone %@
No groupID for %@
Ignore self allocation for shared session
could not find original push token to clone for QR session %@
could not find existing recipient to clone
need to do ID query: allocateType: %d, destinations: %@, sessionID: %@, fromURI: %@
Received allocate response for RequestID: %@ IDSSessionID: %@ QRSessionID: %@ from cache: %@
QRserver ipv4: %@:%@, ipv6: %@
QRserver hpp: %@, ipp: %@
failed to compose a QR sessionInfo dict
add localParticipantID: %llu to sessionID: %@ _sessionToLocalParticipantID: %@
detected duplicate response. Ignore it.
allocate response modified %@
no allocation for shared session
current response ignored
Recieved allocation from DefaultPairedDeviceID {appID: %@}
Relay expiry time-stamp is NaN: %@
response expired: %16llx %16llx, %@
defaultRemoteDeviceCBUUIDString: %@
allocate response ID %@ is for recipient.
allocate response ID %@ is for initiator and took %0.6lf ms.
allocate response ID %@ is for initiator and took %0.6lf ms, recipient count: %u, response count: %u.
missing allocation status result for initiator
missing recipient push token in allocation status result
missing QR session ID
detects that session %@ has been accepted by device with token %@
join request in process
participant has not joined, ids: %@
useCurrentResponse=%@, sharedSessionHasJoined=%@
participant has joined with cached response
joinWithOptions information: idsSessionID=%@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@, isJoinAllocation = %@
should connect to qr server: %@
Cached stream infomation:  idsSessionID=%@, publishedStreams=%@, subscribedStreams=%@, generationCounter=%@, maxConcurrentStreams=%@
could not find original allocate request %@
set streamInfo from cache: %@, subscribedStreams=%@, publisehdStreams=%@, generationCounter = %@, maxConcurrentStreams = %@
No stream information
isInitiator: %@, pendingRecipientsAcceptedSessions= %@, isCloudAllocation= %@,  useCurrentResponse= %@, isFromCache= %@, subscribedStreams = %@
connecting with sessionInfo %@
recipient waits for session acceptance
_isDuplicateResponse:newResponse: invalid parameters!
_isDuplicateResponse:newResponse: found duplicate response for QRSessionID: %@
_isDuplicateResponse:newResponse: duplicate response not found.
_processSelfAllocations:allocation: called
self allocation count in response: %u
self allocation: %@
transformed self allocation: %@
_getCombinedSoftwareID: called
failed to get combined-software-id due to invalid parameter.
_createSessionInfoFromResponsePayload: called
QR Build Version: %@
remote deviceID: %@
allocate request took: %.6f seconds, extIPAddr: %@.
allocate response is for an auxiliary connection
defaults write to set ipPreference: %d
defaults write to set linkSuggestionValue: %d
defaults write to set linkScoreValue: %d
Warning: invalid response relaySessionID length = %lu != sizeof(uuid_t) = %lu
missing allocation status result
missing allocateType in response
allocate type is required for allocate protocol version %@
_setSessionInfoRequiredKeys called
 is missing required attributes %@ in sessionInfo %@
_processAllocationStatusResult: called
Failed to allocate QR for recipient with token %@ with error %lu
Allocation error response: %@
Allocation failure for session %@, status = %d, code = %d, attempting to retry!
No ids session for ids session id %@
No ids session id for request id %@
No request id
_sendAWDMetricsForAllocation:status:hasRecipientAccepted: called
missing response. Skip AWD report
_startQRConnectionForSession:isInitiatorsAcceptedSession: called {isInitiator: %@} sessionInfo %@
 is missing %@, bailling...
No IDSSessionID found for this requestID %@, bailing...
cannot find existing IDSSession %@ to start a connection
bring up GlobalLink link for cloud messaging to %@
passed sessionInfo to IDSSession ID %@ to connect, allocation: %p, %p, session should connectToQRServer: %@
failed to find response for groupID %@
_storeMappingFromPushTokenToURIs:fromURI:service:cert:forGroup: called {groupID: %@}
_uriToParticipantID: called sessionInfo %@
there is no URI list yet. stopped converting URI to Participant ID - %@
getRelaySessionIDForIDSSessionID:pushToken: called {sessionID: %@, pushToken: %@}
failed to find allocation for session %@
getPushTokenForRelaySessionID:relaySessionID called {sessionID: %@, relaySessionID: %@}
IDSSession ID %@ requested for a QR allocation
missing sessionID in requestAllocationForRecipient
found a pending QR allocation for IDSSession %@ with QR session ID %@
there's no pending QR allocation for IDSSession %@
setInitiatorsAcceptedToken:pushToken: called {pushToken: %@}
add accepted session %@ with token %@
getServerProviderForIDSSessionID: called {sessionID: %@}
report AWD allocator event %u, transport [%s], RAT [%s], duration %u ms, idsSessionID %@, isInitiator:%@
cleanUpCachedMappings for group %@
invalidate all allocations for IDSSession ID %@
invalidateAllocation: called
Add allocation For Session: %@, _sharedSessionHasJoined=%@, %@
Discard allocation For Session: %@, %@
invalid allocationList
_invalidateSession: %@
_removeAllAllocationsForSessionID: %@, %@
keepalive timer stopped for %@
_findAllocationForSessionID:requestIDStr called {sessionID: %@, requestID: %@}
_findAllocationForSessionID, {sessionID: %@, requestID: %@} not found
faied to get address in FixedQuickRelayServerAddress defaults
decoded relay-server-address %@:%u
Warning: [decodedUUIDData length]: %lu != sizeof(uuid_t): %lu
decoded base64 relay-session-id %@
decoded base64 relay-session-token %@
decoded base64 relay-session-key %@
 using preallocated tokens from user defaults
Missing a defaults for hardcoded QR session info
disable push handler
enable push handler
handler:didReceiveMessage:forTopic:fromID:messageContext: called
received an unexpected message %@
receivedOfflineMessagePendingForTopic: %@
_getGroupID called
_uuidFromNSStringToNSData called
Cannot find allocation for session %@, all allocations: %@
startKeepAliveTimer:relaySessionID called - {sessionID: %@, relaySessionID %@}
keepalive timer started for %@
stopKeepAliveTimer:relaySessionID: called {sessionID: %@, relaySessionID %@}
keepalive timer not found for %@
cleanup response count: %zu
clean up response for groupID %@
cleanup timer disabled
cleanup timer started
Error: data length: %lu != sizeof(uuid_t): %lu
deserializeQRConnectStatus failed, bad length: %u %u
Not an UUID
found in cur (last = %u) - index=%d shift=%d newShift=%d (cur=%llu, ffsll(~cur)=%d)
found (last = %u) - at index=%d newShift=%d (cur=%llu, ffsll(~cur)=%d)
Finished capturing AutoBugCapture diagnostics for %@
[Fatal error encountered] %s: ran out of ports to allocate, aborting!!!
can't allocated used port
can't release unallocated port
Phone number validation mode overridden by user defaults { modeFromDefaults: %ld }
Preflight disabled by server bag override -- falling back to legacy
*********** Override max SMS retries value to %ld
*********** Override max SMS delivery retries value to %ld
============= New BTLinkManager %@ starting =============
using %@ UUID from LinkManager
read pipe peripheral UUID from default: %@
pipe peripheral UUID is nil!  Not setting up BTLinkManager
============= Old BTLinkManager %@ stopping =============
%@ start advertising empty now
stop advertising
using pipe peripheral UUID %@
created pipe peripheral %@
connecting to %@
pipe peripheral is not set. Not connecting
Unregister endpoint identifier: %@
update paired device UUID to %@
processing pending pipe %@
pending pipe %@ matches to paired device
BTLink %@ created
linkDidConnect:%@
could not create a BTLink for %@
pending pipe %@ doesn't match to paired device - releasing it
Change paired device from %@ to %@.
Pipe is registered but not connecting, connect now.
Cannot start datagram link if regular pipe not registered
Registering datagram link type %d endpoint %@ registrationCount 0 => %u
Not registering datagram link endpoint %@ registrationCount %u => %u
Cannot unregister datagram link endpoint %@ - not registered
Unregistering datagram link endpoint %@ registrationCount %u => 0
Not unregistering datagram link endpoint %@ registrationCount %u => %u
%@ didUpdateState %s
%@ didConnectPeripheral %@
%@ didFailToConnectPeripheral %@ err %@
links = %@
%@ didDisconnectPeripheral %@ err %@
%@ didStartAdvertising error %@
 => Pipe did update state: %s
%@ registering for service %@ as %@
Register endpoint identifier: %@  type: %@  priority: Medium pipeTransport: %@
Unregistering datagram link endpoint %@ registrationCount %@
 => Pipe did register endpoint: %@  error: %@
%@ didRegisterEndpoint id %@ err %@
 => Pipe did unregister endpoint: %@
%@ didUnregisterEndpoint id %@
%@ re-registering for service %@ as %@
Re-register endpoint identifier: %@  type: %@  priority: Medium
 => Pipe did connect: %@
%@ pipeDidConnect %@
%@ got a new pipe for service %@
pipe UUID is nil
pipe UUID is not set yet - deferring verification for %@ until addPairedDevice
new UUID %@ doesn't match to existing UUID %@ - ignoring this new pipe
Pipe UUID %@ match
Link %@ created
Re-registering datagram link type %d endpoint %@ registrationCount %@
could not create a link for %@
 => Pipe did disconnect: %@   error: %@
%@ pipeDidDisconnect %@ err %@
%@ pipe %@ disconnected for service %@
linkDidDisconnect: %@
NRDevicePreferences created with NRDeviceIdentifier %@.
Failed to create NRDevicePreferences {deviceIdentifier: %{private}@, nrDeviceIdentifier: %{private}@}
Failed to create NRDeviceIdentifier {deviceIdentifier: %{private}@}
Creating IDSNRDevicePreferencesHandler with nil deviceIdentifier
Calling [NRDevicePreferences deviceSetupStarted:]
Calling [NRDevicePreferences deviceSetupCompleted:]
Called [NRDevicePreferences setQuickRelayRequest:] {wantsQuickRelay: %@}, {quickRelayRequestsCount: %lu}
Report Spam response: %@
IDSEncryptionErrorType unknown/unhandled error type: %d
Asking to convert an error of the wrong domain to an IDSEncryptionErrorType { error: %@ }
Invalid OTR Encrypt parameters -- failing {inputDataLength: %llu, queue: %@, OTRToken: %@}
   OTR encryption failed with error: %@
Could not find OTR session for token: %@
   OTR decryption failed with error: %@
Cleaning up: %@
Exception caught unarchiving DDResult data: %@   Exception: %@
createConnectionData: requiresWifi = %d, dataReadyHandler = %p, _connectionQueue = %p
_connectionQueue: createConnectionData: requiresWifi = %d, dataReadyHandler = %p, _connection = %@
   AV Response: %@   Error: %@
Got connection data: %p
Connection data error: %@
skeData was nil
callInfoData was nil
_connectionQueue: calling inviteDictionaryForCallID for callID = %d, [connectionInfo peerCN] = %@ 
Calling startConnectionWithCallID %@, %@, connectionInfo = %@, startError = %@, connectionInfos = %@, [connectionInfo remoteInviteData] = %@
No connection, bailing...
No data to send, bailing...
didStartSession %d for callID %d, error = %@
didStartSession returned a callID we do not recognize %d, what we have %@
didStopWithCallID returned a callID we do not recognize %d, what we have %@
Exception caught archiving connectionData, skeData Exception: %@
IDSDSessionKeyValueDelivery init: groupID: %@, sessionID: %@
add delivery handler with uuid %@: %@
... already added handler with uuid %@: %@
sending all cached data to new delivery handler
getAllKeyValueDeliveryLocalMaterialSetForGroupID: groupID doesn't match: %@, %@
getAllKeyValueDeliveryLocalMaterialSetForGroupID: %@, _localMaterials: %@
receiveDictionaryData: unsupported key: %u, type: %d
receiveDictionaryData: unsupported wrapMode %ld, return!
receiveDictionaryData: disableEncryptionForData, use plain data: %@
receiveDictionaryData: error: %@
_receiveData: key: %d particitant: %llu
_receiveData: notifying %lu handlers
_updateSendData invalid groupID
_updateSendData: key: %d data: %@ encryptedDataForAllParticipants: %@, encryption: %d capability: %@, remotesPushTokens: %@
_updateSendData: aborting send to %@ for group %@ and session %@ since this destination is not in group membership: %@
encryptedDataForAllParticipants: %@, shouldSendToParticipant: %@
_updateSendData: type: %d, key: %@, publicIdentity: %@, participant: %@, data: %@
_updateSendData: unknown type for capability: %@
_updateSendData: _localMaterials: %@
sendData: send %d with encryption %d: %@
Processing local device info query...
Responding to local device info query: %@
Responding to paired device info query: %@
No legacy connection, bailing...
Trying to send invite to inactive device, ignoring %@...
Using local account, can only send invitation to active device, ignoring %@...
Send invitation with destinations %@ newDestinations %@ pairedDestinations %@ allOtherDestinations %@
Got connection data %@, isScreenSharingSession %@
Done with outgoing network availability check; networkOkForSession: %@
Session %@ has ended; NOT sending remote invitations!
Creating connection data, isScreenSharingSession: %@
Failed to get connection data with error %@, isScreenSharingSession %@
Not ending this session as it's still being connected or already connected
Network availability check indicated that we should not attempt to send remote invitation(s)
%@: sendInvitationWithOptions could not find active Wifi connection, ending session with reason %d
Not sending invitation because of missing uniqueID
Failed to send invitation because failed to create unauthenticated public key
SecRandomCopyBytes failed %d (%s), bailing...
Sending invitation to %@, %@ <%@>
Sent message {isScreenSharingSession: %@, isLegacyOverride: %@, destinations: %@}
pulled out token %@ from destination
skipping destination %@, can't find token
session %@ invitation sent to tokens %@
We are the receiver, we can only DECLINE the invite, not CANCEL
Sending CANCEL %@, %@ <%@>
acceptInvitationWithData isWithDefaultDevice (%@) enableQuickRelay (%@), useQRDirectly (%@), isFaceTime(%@)
No remote blob, bailing...
Failed to get legacy connection data with error %@
At ACCEPT invitaion - from %@, session %@, expecting remote device encryption but remote does not specify
acceptInvitationWithData remoteBlob %@
Failed to get local connection data, bailing...
Sending unauthenticated public identity {publicIdentity: %{private}@}
Failed to create data from public public identity {error: %{public}@, publicIdentity: %{private}@}
Failed to create public identity from full identity {error: %{public}@, fullIdentity: %{private}@}
Sending accept to %@, %@ <%@>
Sending unauthenticated public identity {localUnauthenticatedFullIdentity: %{private}@}
Failed to send IDSSession because failed to create unauthenticatedPublicIdentityData
Malloc error when creating key material, ending call...
Sending accept to %@, %@, <%@>
Sending decline to %@, %@ <%@>
Failed to create unauthenticated public key because of nil full identity {session: %{private}@}
Failed to get unauthenticated public identity from full identity {error: %{public}@, fullIdentity: %{private}@, session: %{private}@}
Failed to get data from unauthenticated public identity {error: %{public}@, publicIdentity: %{private}@, session: %{private}@}
Ignoring incoming accept from %@, session is not waiting for an invite response anymore
Ignoring incoming accept from %@, session is not the initiator
No participantID, bailing...
No message version, bailing...
Setting peer protocol version to %d
receivedAcceptMessage: remoteKeyMaterialLength is not equal to remoteKeyMaterialLength, bailing...
Received accept from %@, session %@, fromToken %@.
Adding %@ to set to cancel
Canceling invitations to %@
Starting screen sharing connection with remote blob
Received accept from %@, session %@, expecting remote device encryption but remote does not specify
Starting connection with remote blob
Accepted relay-session-id %@.
Accepted relay-session-id %@ waits for QR connection.
Received decline %@ from %@, %@
Ignoring Decline from %@, %@, not in destinations: %@
Invite was declined { givenReason: %u }
Invite was declined with reason alias deactivated { fromID: %@, _inviteTokens: %@ }
Suppressing decline, other recipients
Invite was declined, notifying everyone I invited: %@
Received CANCEL %@ from %@, %@
Ignoring CANCEL from %@, %@, not in destinations: %@
Group context controller starting up
Got Context
Failed to get Context
Incoming Daemon UpsertGroup
Got Deaemon Group Context %@, error %@
Updating Group
Creating New Group
New Group Created %@
Upsert group -- Failed {error: %{public}@, context: %{public}@}
Incoming Daemon FetchGroup {groupID: %{public}@}
Failed to fetch group by groupID {error: %{public}@, groupID: %{public}@}
Failed to get public data representation {error: %{public}@, group: %{public}@}
Failed to get group from public data representation -- missing context {error: %{public}@}
Failed to get participnats for cypher -- missing context {error: %{public}@}
Failed to validate cached group -- missing context {error: %{public}@}
Notified of update to registration identities; invalidating daemon cache
Noting registration identity update {context: %@, error: %@}
Core Data Load Failed
Core Data Load sucdeeded
No output arrays specified for _splitDestinations %@
%@ splitting destinations %@
Splitting out local destinations - looking up device for dest %@
Resolved destination %@ from default paired device constant device %@.
(Class) Destination device uniqueID: %@
(Class) Default paired device uniqueID override %@   uniqueID %@
(Class) Device uniqueID override %@   uniqueID %@
(Class) Found matching device %@
(Class) Didn't find matching device for uniqueID %@
(Class) Resolved destination %@ from default paired device constant device %@.
Splitting out local destinations - token %@ and uri %@
Malformed destination %@
Finding device matching URI %@ and token %@
Found deviceID %@ and btID %@ after first try
Did not find deviceID using account %@
Found deviceID %@
Splitting out local destinations - found device id %@
Using push instead of Live Delivery while GL warms for device id %@
Device does not support live delivery, falling back to push {deviceID: %@, strippedURI: %@}
Not considering %@ for local. DeviceID is %@  (btID: %@)  and we're not already scanning/advertising. Service allows wiprox? %@
  Local IDS is disabled... not sending locally
Splitting out local destinations - no local device for URI %@, adding to remote
(Class) Dest became nil while trying to split destinations.
(Class) Split out local destinations (%@) remote destinations (%@)
OUTGOING-LOCAL_SEND:%@ SERVICE:%@
Sending message ID (%@) with data length %lu (resource: %@)  [Topic: %@  Local Device IDs: %@]
Ignoring request to fallback forcedLocal %@  localType %@ requireLocalWiFi %@ message %@
(Account) No account found for ID: %@
Fallback won't sent for %@ %@  alreadyFailed %@ alreadySending %@ alreadyComplete %@
Ignoring request to fallback for %@ %@ forcedLocal %@
Ignoring request to fallback for %@ %@ forcedLocal %@ due to budget restrictions.
Fallback send of %@ to %@ %@ completed with responseCode %ld error %@ lastCall %@ - current pending sends local %@ fallback %@
Overwriting previous local failure with remote success
Initiating fallback send for message %@ to %@ %@ from account %@
Attempt to send both DataToEncrypt and Data, dropping data
IDSUTunDeliveryController sendMessage %@ deviceID %@ succeeded? %@ response %ld topic: %@ - current pending sends local %@ fallback %@ account %@
Sending via account that's type Local -- forcing local delivery.
Couldn't resolve %@ to a valid dependent registration.
Could not construct a destination for %@
Service would like to use iMessage callerID for messages, Attempting to use %@
Service would like to use iMessage callerID for messages however they specified their own FromID, so we will attempt to use that
Sending Resource at path %@ with metadata %@
Compressed message data from: %u  to: %u
Use uncompressed message data (original: %u compressed: %u)
Compressed protobuf data from: %u  to: %u
Use uncompressed protobuf data (original: %u compressed: %u)
sendMessage <<Redacted>>  bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ wantsCertifiedDelivery %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
sendMessage of size %lu  bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ wantsCertifiedDelivery %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
Payload length %lu for topic %@ is too big to send.
Payload length %lu for topic %@ is too big to send as urgent
Attempt to send a file transfer over IDS to a remote destination over File Transfer API. Setting Command
Account %@ was asked to send to %@ with forced local delivery but there are unaddressible remote destinations %@ - failing message.
Account %@ was asked to send to %@ but we were unable to resolve any actual destinations - failing message.
Setting localLastCall to YES for this proxied outgoing message so that the completion does not rely on the local reflection
Local send completion block {responseCode: %ld, error: %@, lastCall: %@, combinedResponseCode: %ld, combinedError: %@, account: %@}
Attempted to send to remote destiantions on a local account, we are allowed to proxy, beginning proxy transaction, The params are %@
The new params we will send locally are are %@
Will Send Block
Completiom Send Block of message called, 
No account found for ID: %@
%@ Remote send completion block with responseCode %ld error %@ lastCall %@
%@ calling combined completion block responseCode %ld error %@ lastCall %@
Sending server message: %@   command: %@   account: %@
Finished sending server message request response for topic %@  [%@]
Failed sending server message request response for topic %@. Result code %ld. Error %@.
(Instance) Destination device uniqueID: %@
(Instance) Default paired device uniqueID override %@   uniqueID %@
(Instance) Device uniqueID override %@   uniqueID %@
(Instance) Found matching device %@
(Instance) Didn't find matching device for uniqueID %@
(Instance) Resolved destination %@ from default paired device constant device %@.
Found deviceID %@ using primary %@
(Instance) Dest became nil while trying to split destinations.
(Instance) Split out local destinations (%@) remote destinations (%@)
Ignoring request to fallback forcedLocal %@ requireLocalWiFi %@ message %@
Overwriting previous remote failure with local success
IDSAccount send remotely
Server has disabled service: %@, dropping this on the floor
Failing message to: %@   from: %@    invalid caller ID
OUTGOING-REMOTE_SEND:%@ SERVICE:%@
Urgent priority messages should require a response for reliability
Messages that want a response should not be fireAndForget
Disabling IDS-level ack for this message
Compressed IDS bulked payload data from:%u  to:%u
Cannot use encryption with bulked payloads!
Local protobuf data is compresed, use uncompressed protobuf data for remote delivery
Compressed protobuf serialized data from: %u  to: %u
Setting IDS payload with size: %u
Using incompatible combination of wantsEncryptedPayload and dataToEncrypt!
Setting IDS payload to be encrypted.
Registration %@   URIs %@  callerCert %@
!setState command=%@
!setState destinations=%@
Sending message (c = %@) %@ to filteredDestinations %@ (originally %@) for topic %@
Sending message ID (%@) using push to %@ for topic %@
This send requires %@, a lack of %@, and is interested in %@ registration properties
All courier acks have completed, informing the next layer that the message has been sent sucessfully
Attempt to send a file transfer over IDS to a remote destination over File Transfer API. Only MMCS transfer is avaible at this time, uploading file
Upload Complete, Here is the information, %@
 => Send completed with resultCode %ld, send error %@, lastCall %@ for displayIDs %@  messageUUID %@
Added query update hash {hash: %@, fromURI: %@, service: %@}
Send completed
Service would like to use iMessage callerID for messages
Service would like to use iMessage callerID for messages but provided their own FromID, attempting to use that instead
sendMessage { c = %@   fID = %@   fT = %@   g = %@   t = %@   tID = %@ } bulkedPayload %@ fromID %@   toDestinations %@   useDictAsTopLevel %@  encryptPayload %@  wantsResponse %@  timeout %f  command %@ wantsDeliveryStatus %@ wantsCertifiedDelivery %@ deliveryStatusContext %@ messageUUID %@  priority %@ localDelivery %@  completionBlock %p
decryptMessageData length: %lu   myURI %@   fromURI %@   token %@   encryptionType %ld   completionBlock %p
Invalid encryption type -- failing {encryptionType: %@}
Only 1 account exists on this service, We will need to proxy this and include the default paired device as a destination
Found Default paired device %@ 
Comparing %@  To %@ 
These ID's are the same, We will not be proxying this message
No unique ID found - generating new one %@
Loaded unique ID %@
Re-generated my uniqueID %@
Got kIDSRTEncryptionMKMExpireDurationBagKey %u
Couldn't get kIDSRTEncryptionMKMExpireDurationBagKey value, using default value of %u
Got kIDSRTEncryptionMKMRollDurationBagKey %u
Couldn't get kIDSRTEncryptionMKMDefaultRollDuration value, using default value of %u
Got key duration value from user defaults write, set _mkmExpirationDuration: %u _mkmRollDuration: %u
Got kIDSRTEncryptionExpireDurationBagKey %u
Couldn't get kIDSRTEncryptionExpireDurationBagKey value, using default value of %u
Got kIDSRTEncryptionPreviousPrekeyExpireDurationBagKey %u
Couldn't get kIDSRTEncryptionPreviousPrekeyExpireDurationBagKey value, using default value of %u
Sending MKM over QR %@ - serverBag: %@, defaults: %@
forceKeyRecoveryLogic default %@ - the first incoming MKM will get dropped and we'll start the key recovery logic for the test...
setAccount: Add the registraion listener for account: %@
setAccount: added the accountID %@ for group %@
setAccount: Remove the registraion listener for account: %@
removeAccountForGroup: removed the account for group %@
requestKeyMaterialForGroup: there is no group session for %@. keyMaterialCache %@
requestKeyMaterialForGroup: requireMKM: %@
requestKeyMaterialForGroup: masterKeyMaterial: %@ shouldGenerateMKM: %@
requestKeyMaterialForGroup: send local MKM %@ to AVC
requestKeyMaterialForGroup: no need to send local MKM %@ to AVC
requestKeyMaterialForGroup: send remote MKM %@ to AVC
requestKeyMaterialForGroup: no need to send remote MKM %@ to AVC
requestKeyMaterialForGroup: send local SKM %@ to framework
requestKeyMaterialForGroup: no need to send local SKM %@ to framework
requestKeyMaterialForGroup: send remote SKM %@ to framework
requestKeyMaterialForGroup: no need to send remote SKM %@ to framework
requestKeyMaterialForGroup: standardDestinationSet: %@
requestKeyMaterialForGroup: givenDestinationSet: %@
requestKeyMaterialForGroup: givenDestinationSet for SKM: %@
requestKeyMaterialForGroup: givenDestinationSet for MKM: %@
_requestKeyMaterialForGroup: skipping _sendKeyMaterialsToGroup for lightweight participants because there are no lightweight participants
_getSetofStandardParticipantsForGroup: found mislabeled participants: %@
Initializing list of participants waiting for initial key materials { groupID: %@, destinations: %@, timeout: %f }
Failed to distribute initial key material distribution to some participants -- ending session { groupID: %@, sessionID: %@, remainingDestinations: %@ }
Not setting initial key material distribution timeout { destinations: %@, timeout: %f }
Removed entry from list of participants waiting for initial key materials { groupID: %@, destination: %@, remainingDestinations: %@, timeoutBlock: %@ }
Failed to send to participant waiting for initial key materials { groupID: %@, destination: %@, remainingDestinations: %@, timeoutBlock: %@ }
Removed unneeded entry from list of participants waiting for initial key materials { groupID: %@, destination: %@, remainingDestinations: %@, timeoutBlock: %@ }
_sendRenewedPrekeysToGroups: %@
_dispatchRenewPrekeyTimer is called. We'll renew prekeys in %d
_dispatchRenewPrekeyTimer - Couldn't find the identity for this device. Couldn't renew the prekey.
_sendKeyRecoveryRequestForPendingKeys: requireMKM: %@, requireSKM: %@, pushToken: %@ pendingKeyMaterialsForRecovery: count: %lu, %@
_sendKeyRecoveryRequestForPendingKeys: send key recovery request to: %@
_doCheckPendingKeyMaterialsAndSendKeyRecoveryRequestForMKM - recovered all _pendingMasterKeyMaterials!
_doCheckPendingKeyMaterialsAndSendKeyRecoveryRequestForMKM - recovered all _pendingStableKeyMaterials!
_doCheckPendingKeyMaterialsAndSendKeyRecoveryRequestForMKM - pushtoken: %@, needMKMRecoveryRequest: %@, needSKMRecoveryRequest: %@, current pendingMasterKeyMaterials %@, MKMRecoveryRetryCount %u, current pendingStableKeyMaterials: %@, SKMRecoveryRetryCount: %u
_doCheckPendingKeyMaterialsAndSendKeyRecoveryRequestForMKM - commonKeyMaterialsForRecovery: %@, MKMRecoveryDictionary: %@, SKMRecoveryDictionary: %@
_doCheckPendingKeyMaterialsAndSendKeyRecoveryRequestForMKM - doesn't needMKMRecoveryRequest or needSKMRecoveryRequest
_doCheckPendingKeyMaterialsAndSendKeyRecoveryRequestForMKM - tried %d. Reset the retryCount
createRealTimeEncryptionFullIdentity for the token %@
createRealTimeEncryptionFullIdentity failed! Please check the account registration status.
createRealTimeEncryptionFullIdentity - found the existed one %@
createRealTimeEncryptionFullIdentity - push token doesn't match, generating a new identity {old: %@}
createRealTimeEncryptionFullIdentity - the previous one %@ is expired
createRealTimeEncryptionFullIdentity - previous pre-key is now expired.
createRealTimeEncryptionFullIdentity - we'll generate the new pre-key %@
Created the full identity %{private}@ will be expired at %@
Created the full identity %{private}@, duration %f seconds, will be expired at %@
realTimeEncryptionPublicKeyData - trying to get my device identity
Need to create the full identity for this device first...
Identity is expired. Need to roll the fresh key.
Couldn't get the identity for this device
Returning public key data: %@
Current ACK'd number of prekey: %@ for group: %@
Report the prekey ACK'd (final count: %@) result for group: %@
%s invalid groupID, return
%s %@, keyMaterial reset timer fired. Resetting stored encryption sequence number during cleanup to 0
%s dispatched keyMaterial reset timer for group: %@
%s _groupIDToResetKeyMaterialCacheTimer: %@
%s invalid groupID!
%s keyMaterial reset timer invalidated for group: %@
%s keyMaterial reset timer not found for group: %@
storing encryption sequence number %llu (old: %llu) for groupID %@ (Client -> *IDSD)
ignoring encryption sequence number %llu (old: %llu) for groupID %@ (Client -> *IDSD)
returning stored encryption sequence number %llu for groupID %@ (Client <- *IDSD)
setRealTimeEncryptionPublicKey: We'll drop this pre-key message for group %@ since %@ is not in this group!
setRealTimeEncryptionPublicKey: public key: %{private}@ serverDate: %@ pushToken: %@ wrapMode: %llu
setRealTimeEncryptionPublicKey: (TEST) done: %{private}@
setRealTimeEncryptionPublicKey: done: %{private}@ fromID %@ pushToken %@
setRealTimeEncryptionPublicKey: will re-send key materials due to detected rolled identity for push token %@
realTimeEncryptionPublicKeyForDevice: %@
realTimeEncryptionPublicKeyForDevice: couldn't find any identity for %@!
realTimeEncryptionPublicKeyDataForDevice: %@
realTimeEncryptionPublicKeyDataForGroup: couldn't find any identity for %@!
realTimeEncryptionPublicWrapModeForDevice: %@
realTimeEncryptionPublicWrapModeForDevice: couldn't find any identity for %@!
publicKeys: %@
sendPrekeyRequestToGroup: %@, (destination: %@)
participantIDsForURIs: did not find participant for uri %@
Found expired MkM { expirationDate: %@, MkM: %@ }
cleanUpExpiredMasterKeyMaterial: Found expired current local MkM { expirationDate: %@, MkM: %@ }
cleanUpExpiredMasterKeyMaterial: Found expired next MkM { expirationDate: %@, MkM: %@ }
expired MKIs for group %@: %@
cleanUpExpiredMasterKeyMaterial: couldn't invalidate MKIs - cannot find session with groupID %@
MKMRoll timer %p fired, block %p.
mkm roll timer %p and block %p are already scheduled.
start mkmRoll timer %p, timeout %d sec, block %p 
stop mkmRollTimer timer %p, block %p.
mkmExpiration timer %p fired, block %p.
mkmExpiration timer %p and block %p are already scheduled.
start mkmExpiration timer %p, groupID: %@, timeout %d sec, block %p 
stop mkmExpiration timer %p, groupID: %@, block %p.
_mkmRollTimerFiredForGroup: %@ sessionID:%@
_mkmRollTimerFiredForGroup: no new current local material. Requesting...
MKM roll timer fired: current MKM: %@, next MKM: %@
createKeyMaterialForGroup: couldn't pass the key material to the session %@
set localParticipantID: %llu for SKM: %@
set localParticipantID: %llu for MKM: %@
participantID changed from %llu to %llu
Failed creating the master key material for the group %@
Created MKM %{private}@, MKS %@, MKI %@ for the group %@, current: %@, next: %@, isFirstLocalGeneratedMKM: %@ for device %@
createKeyMaterialForGroup: _mkmExpireDuration: %d is less than _mkmRollDuration: %d, use _mkmExpireDuration to renew MKM
MKM roll timer fired: duration: %u, groupID: %@
MKM expiration timer fired: isFirstLocalGeneratedMKM: %@, innerKeyMaterialCache: %@
The MKI (%@) has been expired for group: %@, but no need to create new MKMs: group session state %d, active participant: %@
Failed creating the stable key material for the group %@
Created SKM %{private}@, SKS %@, SKI %@ for the group %@, current: %@, previous: %@
createStableKeyMaterialAndSendToFrameworkForGroup: send local SKM %@ to framework
createStableKeyMaterialAndSendToFrameworkForGroup: couldn't find the session %@
sendKeyMaterialsRecoveryRequestToDevice: %@ fromID: %@ groupID: %@ sessionID: %@
sendKeyMaterialsRecoveryRequestToDevice: %@ - failed to get publicIdentityData
sendKeyMaterialsRecoveryRequestToDevice: %@ - failed to get the account for this group! (accountsID %@)
sendKeyMaterialsRecoveryRequestToDevice: could not find session for group %@
sendKeyMaterialsRecoveryRequestToDevice: sending key recovery request for group %@ to participant IDs %@
sendKeyMaterialsRecoveryRequestToDevice: Sent the key recovery request to URI: (%@) (pushToken: %{private}@)(message dict: %{private}@)
sendKeyMaterialsRecoveryRequestToGroup: %@ - failed to get publicIdentityData
sendKeyMaterialsRecoveryRequestToGroup: %@ - failed to get the account for this group! (accountsID %@)
sendKeyMaterialsRecoveryRequestToGroup: %@ requireMKM: %@, requireSKM: %@, (message dict: %{private}@)
sendKeyMaterialsRecoveryRequestToGroup: could not find session for group %@
sendKeyMaterialsRecoveryRequestToGroup: %@ requireMKM: %@, requireSKM: %@, participantIDs: %@
sendKeyMaterialsRecoveryRequestToParticipants: requireMKM: %@, requireSKM: %@, participantIDs: %@, participantsInfo: %@
sendKeyMaterialsRecoveryRequestToParticipants: no need to send MKM request to its own, senderID: %@, groupID: %@, sessionID: %@
processIncomingKeyMaterialsRecoveryRequest: We'll drop this prekey recovery request for group %@ since %@ is not in this group!
processIncomingKeyMaterialsRecoveryRequest: We'll drop this key recovery request for group [%@] since deviceToken [%@] is not in the active participant list!
processIncomingKeyMaterialsRecoveryRequest for group %@, session %@, serverDate %@, pushToken: %@, fromID: %@, message %{private}@
Receiving Key Material (Push, KeyMaterialsRecovery) [PreKey] -- %f
processIncomingKeyMaterialsRecoveryRequest - there is no group session for group %@, session %@. We won't send any MKM/SKM.
_storePendingKeyMaterialForKeyRecovery: _pendingMasterKeyMaterials already has the pending key material (MKI:%@) for %@
_storePendingKeyMaterial: _pendingStableKeyMaterials already has the pending key material (SKI:%@) for %@
_storePendingKeyMaterial: moved the incoming the master key material (MKI:%@) to temporary storage until it gets the prekey for it.
_storePendingKeyMaterial: moved the incoming the stable key material (SKI:%@) to temporary storage until it gets the prekey for it.
receivedAndSetKeyMaterial: %{private}@ SKM: %{private}@ for MKM: %@, for SKM: %@, forDevice: %@ fromID: %@ groupID: %@ sessionID: %@ fromSender: %@ publicKey: %@
receivedAndSetKeyMaterial: We'll drop this MKM %{private}@ for group %@
receivedAndSetKeyMaterial: There is no local full identity.
receivedAndSetKeyMaterial: This MKS data %@ is not %d bytes. skipping...
receivedAndSetKeyMaterial: This MKI UUID data %@ is not %d bytes. skipping...
receivedAndSetKeyMaterial: This MKI %@ is local key material. skipping...
receivedAndSetKeyMaterial: has cached MKM. {MKI: %@}
receivedAndSetKeyMaterial: This SKS data %@ is not %d bytes. skipping...
receivedAndSetKeyMaterial: This SKI UUID data %@ is not %d bytes. skipping...
receivedAndSetKeyMaterial: This SKI %@ is local key. skipping...
receivedAndSetKeyMaterial: has cached SKM. {SKI: %@}
receivedAndSetKeyMaterial: not received any valid MKM or SKM
receivedAndSetKeyMaterial: the simulator can't decrypt protectedMKMData %@
receivedAndSetKeyMaterial: done: MKM: %{private}@ MKS: %@ MKI: %@, participantID: %llu
receivedAndSetKeyMaterial: not delivering key material to client -- already delivered MKI: %@
receivedAndSetKeyMaterial: done: SKM: %{private}@ SKS: %@ SKI: %@, participantID: %llu
receivedAndSetKeyMaterial: not delivering key material to client -- already delivered SKI: %@
requestPendingKeyMaterialsForSession: couldn't find the session %@
noteReceivedGroupMasterKeyMaterials: couldn't find the session %@
noteReceivedGroupMasterKeyMaterials: updated the cache %@ for the group %@
receivedGroupStableKeyMaterials: couldn't find the session %@
receivedGroupStableKeyMaterials: updated the cache %@ for the group %@
notifyStableKeyMaterialsReceivedForGroup: couldn't find the session %@
notifyStableKeyMaterialsReceivedForGroup: keyMaterialCollection.stableKeyMaterials: %@
notifyStableKeyMaterialsReceivedForGroup: add stableKeyMaterial: %@ to updateArray
We never got the key material for the group %@
We don't have any key material for the group %@
We never got the stable key material for the group %@
We don't have any stable key material for the group %@
sendPendingKeyMaterialsToGroup: %@, pendingMasterKeyMaterials: %@
sendPendingKeyMaterialsToGroup: %@ - didn't find any pending keys.
sendPendingKeyMaterialsToGroup: %@ - found the pending key %@
_protectedCachedKeyMaterialsForDestination: keyMaterialCollection is nil for %@ (%@)!
_protectedCachedKeyMaterialsForDestination: returning %@
resetMKMLocalSentStatus: reset MKM %@ status
resetMKMLocalSentStatus: from cache: reset MKM %@ status
resetSKMLocalSentStatus: reset SKM %@ status
resetSKMLocalSentStatus: from cache: reset SKM %@ status
sendKeyMaterialsToGroup: filtering out own push token %@
sendKeyMaterialsToGroup: There is no key material yet for %@. This shouldn't happen... (keyMaterialCache: %@, mkmData: %@)
sendKeyMaterialsToGroup: There is no stable key material yet for %@. This shouldn't happen... (stableKeyMaterialCache: %@, skmData: %@)
sendKeyMaterialsToGroup: both hasValidMKM and hasValidSKM are invalid, return
sendKeyMaterialsToGroup: destinations: %@
sendKeyMaterialsToGroup: requireMKM: %@, requireSKM: %@ no destination specified, return
sendKeyMaterialsToGroup: %@, requireMKM: %@, requireSKM: %@, mkmData: %@, keyMaterialCache: %@, skmData: %@, stableKeyMaterialCache: %@, _participantsForGroup: %@
Found _publicIdentity %@ for pushToken: %@ and publicKey: %@
sendKeyMaterialsToGroup: the test is going to use protectedMKMData %@, publicIdentity %@
Couldn't find the publicIdentity for pushToken: %@
sendKeyMaterialsToGroup: %@ - failed to get the account for this group! (accountsID %@)
sendKeyMaterialsToGroup: aborting send of key material message to %@ for group %@ and session %@ since this destination is not in group membership: %@ (pending participants %@)
MkM message failed to send! { destination: %@, responseCode: %ld }
sendKeyMaterialsToGroup: Sent SKM: %@ to URI: (%@)
sendKeyMaterialsToLocal: not passing the key material to the session %@ because the key material is empty
sendKeyMaterialsToLocal: currentLocalMKM %@ to the session %@
sendKeyMaterialsToLocal: currentLocalMKM %@ to the session %@, but already sent...
sendKeyMaterialsToLocal: couldn't pass the key material to the session %@
Server Bag provided us with should enforce remote timeout %@
reset the device prekey
Removed participantInfo: %@ from group: %@}
Removed active participant { groupID: %@, activeParticipant: %@, participantsForGroup: %@ }
Removed active participant { groupID: %@, participantsInfoForGroup: %@ }
resetKeysForGroup: %@ keyMaterialCache: %@, shouldRemoveCurrentParticipants: %@
unsubscribeEndpointsForGroup: %@ updatedMembers: %@
reportTimeDifferenceBetweenFirstPacketAndMKI: timeDelta: %lld MKI: %@
sendMessage: account: %@ fromID: %@ - failed to get the account forGroup: %@
sendMessage: do not send MKM over push, return
sendMessage: calling _generateMKMBlobForQRFromMessage
sendMessage: sendKeyMaterialMessageDataOverQR completed with %d. completionBlocks called %@ %@, groupID %@, sessionID %@
Failed to generate a blob to send via QR, only using push {session: %@}
Group session encryption message requires lack of properties {requiredLackOfCapabilities: %@}
Group session encryption message requires properties {requiredCapabilities: %@}
Sending group session encryption message { GUID: %@, command: %ld, timeout: %f }
Group session encryption message completion block fired { GUID: %@, command: %ld, responseCode: %lu, lastCall: %@, error: %@ }
sendMessage: sendMessageWithSendParameters completed with %d. completionBlocks called %@ %@, groupID %@, sessionID %@
sendPublicKeyToGroup: failed to get groupID
sendPublicKeyToGroup: %@ - failed to get publicIdentityData
sendPublicKeyToGroup: %@ - failed to get sessionID
sendPublicKeyToGroup: %@, ACK'd: %@ (destination: %@)
sendPublicKeyToGroup: %@ (destination: %@)
sendKeyMaterialsToWaitingParticipantsForGroup - Sending the key material to %@ of the group %@ (pending participants %@)
sendKeyMaterialsToWaitingParticipantsForGroup - didn't send any key materials to %@ of the group %@ (pending participants %@)
Failed to process QRMKM payload {error: %@, endpoint: %@}
Unable to decrypt the incoming MKM QR blob -- returning nil
Decoded QR MKM Payload {decodedPayload: %@}
Expanded QR MKM Payload {expandedPayload: %@}
Unable to generate a QR MKM payload to more than 1 destination -- returning nil {destination: %@}
Unable to generate a QR MKM payload to a non-specific URI -- returning nil {fullDestinationURIString: %@}
No endpoint found to target, not triggering a query -- returning nil {destinationURIString: %@, tokenFromURL: %@, prefixedFromID: %@}
QR MKM payload failed to encrypt -- returning nil {error: %@}
QR MKM payload used legacy encryption -- returning nil {endpointToTarget: %@}
Encoded QR MKM Payload {compactPayload: %@}
updateServerDesiredKeyMaterialsForGroup groupID:%@ sessionID:%@
updateServerDesiredKeyMaterialsForGroup groupID:%@ sessionID:%@: SME disabled
updateServerDesiredKeyMaterialsForGroup will include %lu mkms for up to %lu participants
updateServerDesiredKeyMaterialsForGroup: skip local participant
updateServerDesiredKeyMaterialsForGroup: aborting send of key material message to %@ for group %@ and session %@ since this destination is not in group membership: %@
updateServerDesiredKeyMaterialsForGroup participantId:%llu lightweight:%@ publicIdentity:%@ keyMaterial:%@ nextKeyMaterial:%@ stableKeyMaterial:%@
updateServerDesiredKeyMaterialsForGroup participantId:%llu keyMaterial:%@
updateServerDesiredKeyMaterialsForGroup participantId:%llu stableKeyMaterial:%@
updateServerDesiredKeyMaterialsForGroup: couldn't find sessionID: %@
updateServerDesiredKeyMaterialsForGroup: account: %@ fromID: %@ - failed to get the account forGroup: %@
updateServerDesiredKeyMaterialsForGroup: add encryptedDataBlob: %@
updateServerDesiredKeyMaterialsForGroup: haven't got the blob
updateServerDesiredKeyMaterialsForGroup: add encryptedMirageHandshakeBlob: %@
updateServerDesiredKeyMaterialsForGroup: haven't got the handshake blob
updateServerDesiredKeyMaterialsForGroup: add desiredMaterialSetForEncryptedData: %@
updateServerDesiredKeyMaterialsForGroup: haven't got the desiredMaterialSetForEncryptedData
rollNewKeysAfterResettingPrekeysForGroups: %@ reason: %ld
rollNewKeysAfterResettingPrekeysForGroup: Couldn't find the session for group %@! Coulnd't notifity the device change event
didReceiveEndpointsUpdate: %@ forGroup: %@ - invalidated the previous key rolling timer. Wait %f seconds more again to get more endpoint updates... (previous %@)
didReceiveEndpointsUpdate: %@ forGroup: %@ - roll new keys for the group (previous %@)
didReceiveEndpointsUpdate: %@ forGroup: %@ - nothing changed.(previous %@)
updateLightweightMemberTypes: membersForGroup: %@ for group: %@
updateLightweightMemberTypes: membersLightweightStatusDict: %@ for group: %@
setMembers: %@ forGroup: %@
setMembers: endpointSubscription %p forGroup: %@
ACK'd prekey count is reset to 0 forGroup: %@
setMembers: endpointSubscription: %p initialResolvedEndpoints: %@ error: %@ _lastKnownGroupIDToPushTokens: %@
didUpdateMembers doesn't do anything because hasChangedStandardMembers=NO.
didUpdateMembers to %@, hasChangedStandardMembers: %@
_updateEncryptedDataBlobForGroup: couldn't find session: %@
_dispatchDeferredPrekeyRequestForGroupID - after %f sec, now sending prekey request to group because we still have not delivered key material to participants %@
_dispatchDeferredPrekeyRequestForGroupID - adding participant to destinations for prekey request %@
current standard participants: %@
standard participants: %@
current lightweight participants: %@
_participantsInfoForGroup[groupID]: %@
_participantsForGroup[groupID]: %@
addedParticipantsDiff count = %lu, no need to be added to participantsNeedsKeyMaterial
before processing participantsNeedsKeyMaterial: %@, local: %@
invalid participant push token %@, continue
%@ is mine! don't need to add
waiting praticipant %@ no longer exists! don't need to add
waitingParticipants: %@
_getAndUpdateParticipantsWaitingForKeyMaterialsForGroup: unknown participantType: %ld
newParticipantsReadyForKeys: %@
_participantsWaitingForStableKeyMaterials: %@
_dispatchDeferredPrekeyRequestForGroupID - participants have been updated but we are not yet able to send key material to participants %@
_updateLightweightParticipants: remove standard participant: %@ due to downgrade
_updateLightweightParticipants - didn't send any stable key materials to %@ of the group %@ (pending participants %@)
_updateStandardParticipants: remove lightweight participant: %@ due to upgrade
_updateStandardParticipants - didn't send any key materials to %@ of the group %@ (pending participants %@)
didUpdateParticipants: unknown type: %ld
Account is no longer registered, ending group: %@
didUpdateRegisteredDevices: %@ for account: %@
Clearing postponed messages
Database state:
  Outgoing (account_guid, count)
%@  Incoming (topic, count)
Performing initial database housekeeping
Exception handling message %@, %@
Bad messageData for incoming message %@!
Storing incoming message
Ignoring storeMessage: %@ forTopic: %@ fromID: %@
Bad message data for incoming message %@!
Finished storing message
Hit exception %@ decoding outgoing IDS message!
Hit exception %@ decoding outgoing duet identifier overrides!
Performing MarkingLocalDestiations with accounts %@ and device %@
Marking all pending delete messages for account %@
Ignoring storeOutgoingMessageWithSendParameters: %@ destinations: %@ accountID: %@
Asked to bypass storage for message with GUID %@
Bad destinationData for outgoing message %@! Error: %@
Hit exception %@ encoding outgoing IDS message!
Asked to send Message with guid: %@  database check for similiar messages that should be sent first says %@
We already have message with guid %@ alternate %@ in the database, dropping this redundant resend without calling completion.
deleteOutgoingMessageWithGUID:alternateGUID: {guid: %@, alternateGUID: %@}
Exception performing database block %@
Message store map %@
Unexpected datatype. %@ should be of type %@, not %@
Add overflow, dataSize: %lu, kIDSQRAllocateKey_RecipientPushToken length: %lu
Add overflow, dataSize: %lu, kIDSQRAllocateKey_RecipientSessionToken length: %lu
Add overflow, dataSize: %lu, kIDSQRAllocateKey_RecipientURI length: %lu
Add overflow, dataSize: %lu, recipient's kIDSQRAllocateKey_RecipientPushToken length: %lu
Add overflow, dataSize: %lu, recipient's kIDSQRAllocateKey_RecipientSessionToken length: %lu
Add overflow, dataSize: %lu, recipient's kIDSQRAllocateKey_RecipientURI length: %lu
testOptions changed to: %@
IDSDSessionActiveParticipantsCache adding sessionID %@ participants %@
IDSDSessionActiveParticipantsCache removing sessionID %@
We have exceeded the maximum queue size, dropping message %@
File transfer for message %@ [%@] is already in local delivery queue. Dropping duplicate.
Force dequeuing message %@ (should be manual: %@)
Couldn't construct a socketPairMessage for message %@ topic %@ command %@ - discarding
* No pending messages not on %@
Starting outgoing network availability check for session %@
Overriding network availability check result! { session: %@, overrideBehavior: %ld }
Bypassing network availability check for incoming session from default paired device { session: %@ }
Network availability check: including WiFi availability
Network availability check: allowing WiFi hotspot
Network availability check: including cellular availability
Time since lights on: %f
Starting availability check with network timeout: %fs   wifi timeout: %fs   flags: %lu   options: %lu
QuickRelay is enabled, skip connection check.
Finished connectivity check with error %@
Failed creating local data, bailing...
At least one destination is mako {destinationURI: %@, uniqueID: %{public}@, destinations: %@}
Resolved IDSDSession fromID is not a valid selected alias on the account! This may cause messaging failures. { sessionID: %@, fromID: %@, clientSpecifiedFromID: %@, accountID: %@, accountAliasStrings: %@ }
Resolved IDSDSession fromID { sessionID: %@, fromID: %@, clientSpecifiedFromID: %@, accountID: %@, accountAliasStrings: %@ }
QuickRelay is disabled for service: %@, session: %@.
QuickRelay is enabled for service: %@%@, session: %@.
Created local unauthenticated full identity {fullIdentity: %{private}@}
Failed to create full identity for unauthenticated destination {destinations: %{private}@}
Destinations lightweight status: %@
Failed to create session because failed to create unauthenticated public identity even though key was present
Setting invite timeout to %f seconds
Session invite timed out after %f seconds
Clearing invitation timeout timer
Clearing connection timeout timer
Setting connection timeout to %f seconds
Session connection timed out after %f seconds
Clearing session packet loss timer
Clearing end session timeout timer
Setting end session timeout to %f seconds
End session timed out after %f seconds
Failed to create unauthenticated public identity from data becuase data is nil
Failed to create unauthenticated public identity from data {error: %{public}@, data: %{private}@}
*** Lockdown state is expired, not doing absinthe validation
Selecting account {forOutsideiCloudMessaging: %@, iCloudUsableForOutside: %@}
Selected local account
Selected account {registeredAccount: %@}
%@ _callStateChanged - no longer on a call, processing %lu pending queries!
%@ - on a call and wifi isn't usable, enqueuing query to avoid mRAB
%@ - too many enqueued queries, dropping this one
%@ - we're on a call but the network is usable, processing query immediately (Usable WiFi: %@)
%@ - we're not on a call or wifi is usable, processing query immediately (Usable WiFi: %@)
Accepting Incoming Grant Query Requests
IDSDaemonMIGQueryInterface auth port died: %@
IDSDaemonMIGQueryInterface: Could not create server with name: %@
received message from peer(%d): %s
Unknown message from peer: (%d):(%@) %s
received unknown from peer(%d):(%@) %s
Could not create reply message for cache request
*** Incoming cache query for (service: %@) (transactionID: %@)
Current cache: %d count
Incoming cache query, but %d is not entitled to access the cache
Could not create reply message for cached id status query
*** Incoming cached ID status query for (respectExpiry: %@)  (service: %@)  (transactionID: %@)  (destinations: %@)
No registered account for service %@, bailing...
No fromURI for account %@
Account: %@  fromURI: %@
Looking up cached value for %@ -> %@
Sending id status results %@
__HandleIDStatusQuery - enqueuing
*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)  (force: %@) (bypass limit: %@)
Found service %@ for serviceName %@
No registered account for service %@
Using %@ from %@ to perform id query.
No URIs or cert after filtering destinations %@, bailing...
Received status query updates (idStatusUpdates: %@)  (updateFromURI: %@)  (updateService: %@)  (success: %@)  (error: %@) - replyMessage? %@
Tried forcing, however this destination is not under the limit {destString: %@, rateLimiter: %@}
No registered account for service after if %@, bailing...
*** Incoming ID status update, from un-entitled proess: %d
*** Incoming ID status update: %d  (service: %@)  (destination: %@)
__HandleRemoteDeviceQuery - enqueuing
*** Incoming ID status query  (service: %@)  (transactionID: %@)  (destinations: %@)   (sb: %@)
__HandleIDInfoQuery - enqueuing
Failed to load persistent cache data from keychainWrapper {error: %{public}@, identifier: %{public}@, keychainWrapper: %{public}@}
Failed to save persistent cache data to keychainWrapper {error: %{public}@, identifier: %{public}@, data: %{private}@, keychainWrapper: %{public}@}
Tried to purge before available -- returning {self: %@}
Failed To load key -- returning nil {error: %@, keyIdentifier: %@}
CCCrypt failed -- purging && returning nil {cryptResult: %d}
Failed To remove file {error: %@, path: %@}
Failed To Generate IV {ivResult: %d}
Failed to get a stored key, generating a new key {error: %@, result: %@}
Failed To Generate key {keyResult: %d}
Failed to save key -- returning {keySaveError: %@}
Failed to purge stored key {removeError: %@}
GUID %@ Destination %@ lacks interesting property %@
GUID %@ Destination %@ lacks required property %@
GUID %@ Destination %@ has property %@ we do not want
GUID %@ finished token filtering
Couldn't pull message guid out of %@, using %@
IDSIncomingMessageRecordAddMessageRecordDedup deduped message with identifier %@. Will use storage guid %@
Missing phone number authentication entitlement -- failing creation of IDSDXPCRegistration collaborator {connection: %@}
Allowing bypass entitlement to read from IDSXPCRegistration {connection: %@}
Unable to fetch sims -- returning nil {simFetchError: %@}
Client requested selected subscriptions {subscriptions: %@, selectedLabelIDs: %@, SIMs: %@}
Client requested unselected temporary phone aliases, but not in state where home number is allowed {isiCloudSignedIn: %@, allowHomeNumber: %@}
Client requested unselected temporary phone aliases {descriptions: %@, users: %@}
Writes are disabled -- failing `selectSubscription:`
Writes are disabled -- failing `unselectSubscription:`
Writes are disabled -- failing `setSelectedSubscriptions:`
Writes are disabled -- failing `removeTemporaryPhoneAlias:`
Told to remove temporary URI { uri: %@ }
Writes are disabled -- failing `disableTemporaryPhoneAlias:`
Told to disable temporary URI { uri: %@ }
Writes are disabled -- failing `enableTemporaryPhoneAlias:`
Told to enable temporary URI { uri: %@ }
Failed to remove peerIDCache v0 {error: %{public}@}
Failed to remove peerIDCache v1 {error: %{public}@}
Failed to remove peerIDCache v2 {error: %{public}@}
Failed to remove peerIDCache v3 {error: %{public}@}
Migrated Peer ID persistent map {oldVersionNumber: %ld}
Query cache:
Key: <%{public}@,from:%{private}@,to:%{private}@>
        URI: %@
        Push token: %@
        Session token: %@
        Expire: %@
        Refresh: %@
        Public Key: %@
KT Opt In State: %@
   Using disaster mode token for URI: %@   token: %@
   Setting disaster mode token for URI: %@   token: %@
Found KT status in query result { service: %@, URI: %@, KTAccountID: %@, KTStatus: %@, KTBlob: %@ }
Per-URI KT account identifier is missing from the IDS response, which may cause KT verification failures -- using URI hash instead { KTAccountKey: %@ }
Found identity:
GameCenter data: AssociationID: %@, SharingState: %@, LastUpdatedDate: %@
              device pushToken: %@
                 session token: %@
                           uri: %@
 sender-correlation-identifier: %@
                    clientData: %@
                   device-name: %@
           private-device-data: %@
              kt-loggable-data: %@
                kt-account-key: %@
          device-key-signature: %@
      kt-mismatch-account-flag: %@
               kt-capable-flag: %@
                    showErrors: %@
   No known public key found for token: %@
   No known iMessage public key found for token, skipping this identity: %@
   No known push token found, ignoring
                    Overwriting soft TTL with: %ld seconds
                    Overwriting hard TTL with: %ld seconds
   TTL for Service: %@, Uri: %@, refresh: %@, expires: %@,
Returning disaster mode token for from URI: %@   token: %@
Found %@ value: %@  for peer token: %@
** No %@ value found for peer token: %@
URI %@ didn't have remote devices.
URI %@ didn't have a verification request id
** At least one session token expired for: %@, need to get new ones
Checking peer token: %@ for URI: %@   (Tokens: %@)
  => We don't have it - clearing that peer's map
Not flushing tokens, we're in debilitated mode
  => Good to go, we have it
Clearing peer and personal caches
Not forgetting tokens, we're in debilitated mode
Forgetting session tokens for URI: %@  from URI: %@  service: %@
Forgetting peer tokens for URI: %@  from URI: %@  service: %@
Forgetting peer tokens for service {service: %@, keys: %@}
Active query for service: %@  from: %@  peers: %@
  Active sessions for: %@, adding...
  Expired session for: %@, skipping...
Empty token for client data update block
Empty client data update block for token: %@
Empty token for removing client data update block
Empty token for purge client data block
Empty purge client data block for token: %@
Empty token for removing purge client data block
Missing context for adding endpoint query completion block -- ignoring request {block: %@, token: %@, queue: %@}
Missing context for removing endpoint query completion block -- ignoring request {token: %@}
Missing context for endpoint request -- returning nil {URIs: %@, serviceIdentifier: %@, localURI: %@, completion: %@, queue: %@}
Enqueueing cleanup if needed
Checking to cleanup expired entries if needed {now: %@, val: %@}
%@ returning serviceConnectorServiceForAccountString=%@._account=%@;_service=%@;_name=%@
problem: %@ is going to use the main queue.
%@ called nw_service_connector_cancel_active_connection
%@ cannot cancel service connector for connection._serviceConnector=%@;_defaultPairedDeviceEndpoint=%@;serviceConnectionServiceString=%@
Dealloc'ing IDSGenericConnection without it being invalidated
Invalidating IDSGenericConnection %@
genericConnection for %@ using BT datagram link - stop
%p %@ Stall warning [%@]
%p Created the stall detector %@
initWithReadHandler: readHandler: %p, self: %p
Timing events: (%0.9f to generate)
Custom Test 1 - simple control channel internal fail
Custom Test 2 - reset before control channel internal fail
Custom Test 3 - simulate the control channel connection reset loop
Custom Test 4 - dump logs with flags %08X
Custom Test 5 - simulate reaching file descriptor limit
Custom Test 5 - made new socket %d
Custom Test 6 - pop alert
Custom Test 7 - trigger utun socket stall detection
Custem Test 7 - Couldn't find the detector %@
Custom Test 8 - filling utun os_channel...
Custom Test 8 - filled utun os_channel after %d dummy writes
Custom Test 9 - Inject Corrupted BT packet.
Custom Test 10 - Control Message + main queue deadlock test (avoidMainQueue: %@
Custom Test 10 - skipping test for %@ on %@
Custom Test 10 - about to ask main queue to sync onto TransportThread for %@ on %@
Custom Test 10 - about to sync onto TransportThread for %@ on %@
Custom Test 10 - sync operation on TransportThread for %@ on %@
Custom Test 10 - sync onto TransportThread returned for %@ on %@
Custom Test 10 - telling control channel to encrypt and send message for %@ on %@
Custom Test 10 - asked main queue to sync onto TransportThread for %@ on %@
Custom Test 11 - simulate starting control channel again
Custom Test 12 - Kill all links
Custom Test - unsupported %ld
%@: created the stall detector for %@
%@: created mapping [%@ / %@] <=> [%@] (selfInstanceID[%s] %@)
ids-ipsec: service string %@ needs to have 3 components
ids-ipsec: startDataChannelWithDevice called with generic connection %@ for service %@ and endpoint %@ connection-cache %@
ids-ipsec: calling internalStartConnectionWithEndpoint with cloud option for service %@
Asked to set up a connection when we dont have a paired device!  Aborting...
error creating socket with [%@] [%@]
ids-ipsec: start_request returns error but data channel fine - assuming connected via available block. Error %@
startDataChannelWithDevice: finished with no error, but no socket and no connection
ids-ipsec: service connection (%p) %@ connected for service %@ but no generic connection - saving in cache
Extracted {socket:%d} from internal {socket:%d} of (%p) %@
Failed to extract internal socket of (%p) %@
connect ready for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]
Enabled new connection, cancelling previous instance (%p) %@
This connection %@ has already been invalidated. Calling _closeSockets.
connection event %s for nw_connection (%p) %@ {socket:%d} (ports[%@]), event error: %@, connection[%@], device[%{public}@]
serviceConnection (%p) not same as existing serviceConnection (%p) for genericConnection %@
about to wait for connect ready for {socket:%d}
connect ready for {socket:%d} (ports[%@]), socket error: %d (%s), connection[%@], device[%{public}@]
getsockopt failed %d
Saved sdCopy {socket:%d} of {socket:%d} in %@
%@: openSocketCompletionHandler dispatch time %0.6lf seconds
Skipping header compression for phone continuity
scheduled wait for connect ready for {socket:%d}
openSocket was never called on connection (%@) within %@ seconds of starting it.  Kill the connection!
%@: close channel control message [%@] created for connection %@
ids-ipsec: found service connection %@ in cache for service %@
ids-ipsec: create udp connection %@ for service %@ endpoint %@ localPort %@ remotePort %@
setupIPsecLinkForDeviceConnectionInfo serviceConnector %@ cloudServiceConnector %@
setupNewDeviceConnectionInfoForCbuuid %@ deviceUniqueID %@ shouldUseIPsecLink %@
FairPlay authentication failed, obliterate device connection.
Device %@/%@ (CC:%@) is blacked out due to fairplay failures
Add a block for control channel reestablishment on link connects for %@
Failed to encrypt/decrypt control message with deviceUniqueID %@, try different peer for %@.
deviceUniqueID mismatch (%@!=%@), ignore decryption error.
Successfully decrypted control message, lock peer %@ for cbuuid %@.
%p: control channel got message %@ device conn info:%@
Add a block for initial control channel setup on link connects.
TransportThread initialization failed
sysctl for kern.skywalk.ring_stat_enable failed %d
ids-ipsec: cancelling active connection for %s on %@ with parameters %@
ids-ipsec: starting service connector for %s on %@ with parameters %@
nw_service_connector_start_request returned connection(%p) %@ error %@ for %s
nw_service_connector_start_request returned EEXIST - exit
nw_service_connector_start_request returned EINPROGRESS - exit
didConnectControlChannelForDeviceConnectionInfo called: connection %@ error %@
ids-ipsec: start_request returns error but control channel fine - assuming connected via available block. Error %@
startControlChannelWithDevice: error creating control channel with [%@] [%@]
UTunController control channel for [%@] creation failed: %@
For the fixedInterface case, obliterate the connection.
UTunController control channel for default paired device could not be started for %0.3lf seconds
UTunController calling startControlChannelWithDevice for [%@] after %d seconds
startControlChannelWithDevice: finished with [%@]
startControlChannelWithDevice called but already connecting/connected - force continue %@
startControlChannelWithDevice called but already connecting/connected - returning %@
startControlChannelWithDevice over ipsec path for %@
startControlChannelWithDevice called but pairedDeviceUUIDString is nil.
startControlChannelWithDevice over utun/bt path for %@
startControlChannelWithDevice - waiting for connect ready for %@
legacy control channel connect ready {socket:%d}, socket error: %d (%s), device[%{public}@]
getsockopt failed %d / %s
socket error %d / %s
reset TCP for genericConnection %@ serviceConnection %@
reset TCP for genericConnection %@ using seq:%08x ack:%08x
%@: closing connection %@
closeSocket for %@ using BT datagram link - stop
%@: waiting for first openSocket
%@: incoming packet not enough bytes to parse %d
%@: incoming packet not enough bytes for encryption header %d
%@: encryption expects 0xe000 - packet is corrupt
%@: unable to find decryption context for ssrc:%08x data:[%@%s]
%@: connection %@ is already invalidated for ssrc:%08x - dropping this incoming packet
%@: dropping unknown proto[0x%01x] packet (encrypted) [%@]
%@: dropping unknown proto[0x%01x] packet [%@]
%@: incoming packet not enough bytes for largeCID %d
%@: failed to resolve connection for remoteCID 0x%04x
%@: found connection with mismatched (remoteCID 0x%04x != remoteCID 0x%04x)
%@: remoteContext is nil for remoteCID %d, decompression failed.
%@: IDSHC_DecompressSimple failed (%lu)
%@: incoming packet not enough bytes for UDP header %d
%@: incoming packet not enough bytes for TCP header %d
%@: checksum failed for connection %@
%@: Got TCP %dB (flags[%02X] [%s%s%s%s])) for %u <= %u (connection %@ (%p))
%@: dropping TCP (unencrypted) - expect to be encrypted
Control channel reestablishment request from [%@]
<= data[%@%s]
Control channel setDidReceiveReestablishment %@ after reestablishment request
%@: dropping TCP (unexpected - no first packet) %dB (flags[%02X] [%s%s%s%s])) for %u <= %u
Received the first data packet for %@
Got reset for connection %@
%@: dropping TCP (no connection) %dB (flags[%02X] [%s%s%s%s])) for %u <= %u
%@: dropping UDP (no connection) %dB for %u <= %u
%@: dropping UDP (unencrypted) %dB for %u <= %u
for device %@: binding to [%@ [%@] @ scopeid=%d] iRet=%d (errno=%d)
connecting to [%@ @ scope=%u] %d (%d)
%@: got control message: compression_req %@
%@: UTCMType_CompressionRequest has invalid header length (%lu)
%@: invalid message size for UTCMType_CompressionRequest (%u != %lu)
%@: UTCMType_CompressionRequest cannot decode remoteConnectionGUID
%@: UTCMType_CompressionRequest cannot decode localConnectionGUID
%@: recv compression_req (#:%u remoteCID:%u seq:%u ack:%u)
%@: UTCMType_CompressionRequest cannot decode account
%@: UTCMType_CompressionRequest cannot decode service
%@: UTCMType_CompressionRequest cannot decode name
%@: UTCMType_CompressionRequest found connection mismatch! (localGUID:%@ remoteGUID:%@)
%@: processCompressionRequest resolved connection ports[%@]
%@: sending control message: compression_resp %@
%@: got control message: compression_resp %@
%@: UTCMType_CompressionResponse has invalid header length (%lu)
%@: invalid message size for UTCMType_CompressionResponse (%u != %lu)
%@: UTCMType_CompressionResponse cannot decode remoteConnectionGUID
%@: UTCMType_CompressionResponse cannot decode localConnectionGUID
%@: recv compression_resp (#:%u)
%@: UTCMType_CompressionResponse cannot decode account
%@: UTCMType_CompressionResponse cannot decode service
%@: UTCMType_CompressionResponse cannot decode name
%@: UTCMType_CompressionResponse found connection mismatch! (localGUID:%@ remoteGUID:%@)
%@: processCompressionResponse resolved connection ports[%@]
%@: compression_req (%u) acknowledged!
startCompressionForConnection failed due to invalid parameters
startCompressionForConnection ports[%@]
%@: failed to get local CID
%@: resolved next available localCID 0x%04x
%@: sending control message: compression_req (%@)
%@: control message parsing..
%@: control message too small
%@: UTCMType_EncryptControlChannel missing data
%@: got control message: encrypt control channel flags %d ispairedlocally %d ispairedremotely %d (isencrypting: %d ispairedlocally %d ispairedremotely %d)
%@: UTCMType_SetupChannel insufficient header
%@: UTCMType_SetupChannelForDirectMsg processing request
%@: UTCMType_SetupChannel unexpected remoteGUID/account/service/name lengths (%u, %u, %u, %u)
%@: UTCMType_SetupChannel unexpected size (%u != %lu)
%@: UTCMType_SetupChannel cannot decode account
%@: UTCMType_SetupChannel cannot decode remoteConnectionGUID
%@: UTCMType_SetupChannel cannot decode service
%@: UTCMType_SetupChannel cannot decode name
%@: UTCMType_SetupChannelForDirectMsg flags: %#llx
%@: got control message: setup channel proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
%@: send setup channel message ports[%u:::%u] guid[%s]
%@: SetupEncryptedChannel insufficient header
%@: SetupEncryptedChannel unexpected remoteGUID/account/service/name/key lengths (%u, %u, %u, %u, %u)
%@: SetupEncryptedChannel unexpected size (%u != %lu)
%@: SetupEncryptedChannel cannot decode account
%@: SetupEncryptedChannel cannot decode remoteConnectionGUID
%@: SetupEncryptedChannel cannot decode service
%@: SetupEncryptedChannel cannot decode name
%@: got control message: setup encrypted channel ssrc:%08x startSeq:%04x proto:%d ports[%u:::%u] remoteGUID[%@] forLocalGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
control message in reply to cleaned up connection
control message not for current connection - assume local is current for now (message is old) and send CloseChannel for remote attempt
control message repeated for current connection - assume local is current and remote reconciled
%@: nonmatching key material length (local:%u remote:%u)
%@: found connection [%@] - remote wins
%@: send setup encrypted channel message ports[%u:::%u] guid[%s] ssrc:%08x startSeq:%04x
%@: UTCMType_CloseChannel insufficient header
%@: UTCMType_CloseChannel unexpected size (%u != %lu)
%@: UTCMType_CloseChannel cannot decode remoteConnectionGUID
%@: UTCMType_CloseChannel cannot decode localConnectionGUID
%@: UTCMType_CloseChannel cannot decode account
%@: UTCMType_CloseChannel cannot decode service
%@: UTCMType_CloseChannel cannot decode name
%@: got control message: close channel localConnectionGUID[%@] remoteConnectionGUID[%@] account:[%@] service[%@] name[%@] for connection[%@] deviceInfo[%@]
RemoteConnectionGUID doesn't match, but localConnectionGUID does! Why?
%@: control message: hello control channel version is nil
%@: got control message: %@
Control channel checksum failed while receiving Hello. Resetting connection %@
%@: reset control channel didReceiveReestablishmentRequest NO
%@: UTCMType_DirectMsgInfo insufficient header
%@: got control message: direct message info
%@: got invalid control message %d
Service is nil, please provide a valid service name.
%@: UTunSocketProtocolOverride [%@] instead of specified [%@]
%@: found connection [%@] for ID [%@]
%@: early return: bypass utun with readHandler %p for connection [%@]
%@: bypass utun with readHandler %p for connection [%@]
%@: setting up new connection [%@] for ID [%@] deviceInfo[%@]
openSocket for %@ using BT datagram link - start
%@: cannot allocate new port for service %@ name %@
%@: closeSocketWithOptions called with options [%@] (connection %@)
%@: close, but avoid close channel control message
%@: UTunController unable to create new device - cannot continue
prepareDefaultPairedConnectionInfoWithDeviceUniqueID failed due to invalid linkManager
setShouldStartBTForDefaultPairedDevice: %d
_prepareConnectionInfoWithCBUUID: deviceConnectionInfo already exists %@
localdevicecontroller is paired [%@]
checking localdevicecontroller not paired
%@: openSocketWithOptions called with options [%@]
%@: openSocketWithOptions called for default paired device but no connectionInfo - aborting
%@: openSocketWithOptions unable to create new device - cannot continue
Update deviceUniqueID for controlChannel %@
Device %@/%@ is blacked out due to fairplay failures
Canceled a previously scheduled openSocket for %@. Rescheduling openSocket with new options %@.
Add a block for data channel setup on link connects.
%@: scheduled openSocketWithOptions attempt canceled - closeSocket called
%@: openSocketWithOptions attempt canceled - possibly obliteration
Device %@: utun cleaning up device connection for clientID: %@
utun cleaning up device connection info: %@, clientID: %@, connection for service %@
cleanupSocketsForClient: clientID is nil.
closeSocketWithOptions found deviceUniqueID mismatch (%@ != %@), ignore.
Canceled a previously scheduled openSocket for %@. Not scheduling closeSocket.
Add a block for data channel close on link connects.
Rescheduling suspend traffic check in %0.2lf seconds
Suspend traffic check: connections %lu =? suspended connections %lu
Scheduling a suspend traffic check in %0.2lf seconds
Extending suspend traffic check by %0.2lf seconds
%@: suspendSocketWithOptions called with options [%@] (connection %@)
%@: resumeSocketWithOptions called with options [%@] (connection %@)
can't release a reserved port: %u
removeDeviceConnectionInfoForDevice for %@
removeDeviceConnectionInfoForDevice found no match for %@
removeDeviceConnectionInfoForDevice for %@.
removeDeviceConnectionInfoForDevice found no match for %@.
IDSUTunController connectGlobalLinkForDevice preferredLocalInterface: %i
obliterateConnectionInfo called on a device that isnt the default paired device.  Ignoring...
obliterateConnectionInfo failed due to invalid linkManager
obliterateConnectionInfo: clear all connections for cbuuid %@
obliterateConnectionInfo: completionBlock
Clearing control channel
Couldn't find deviceConnection info
addPairedDevice failed due to invalid linkManager
addPairedDevice with cbuuid %@
connectPairedDevice failed due to invalid linkManager
connectPairedDevice with cbuuid %@
deletePairedDevice failed due to invalid linkManager
deletePairedDevice with cbuuid %@
copyLinkStatsDict failed due to invalid linkManager
%s: invalid arguments
%s: reporting service stats %@
getTransmittedPacketsForDevice: cannot find device %@
setPreferInfraWiFi failed due to invalid linkManager
setPreferInfraWiFi %@
setLinkPreferences failed due to invalid linkManager
Drop OTR negotiation message for %@, link is not connected.
Drop suspend OTR negotiation message for %@, link is not connected.
Cannot use invalid interface name [%s]
Cannot get interface state for %s on disconnect
Cannot set interface state to available for %s on disconnect
Set interface availability from %u to %u (0 is available) %s
Cannot open socket for ioctl for %s on disconnect
[throughput] Now cannot send to device %@
localdevicecontroller callback [%@]
ipsec path does not require control channel encryption
control channel already paired
Made reset[%@]
setsockopt on socket (%d) succeeded for traffic class (%d).
setsockopt on socket (%d) failed for traffic class (%d), (error=%d: %s).
sending control message: invalid info length
sending control message: direct msg info
sending control message: encrypt control channel (%d, %d) %@
Bag loaded notification! Is in backoff mode changed to %@
No block supplied, but is this the first query: %@
First query, but not allowed to start: %@ %@
Adding queued query for URIs: %@   fromURI: %@  service: %@   forRefresh: %@ preventNew: %@ first query: %@
Removing queued query for URIs: %@   fromURI: %@  service: %@ URIs set found in completion block map: %@
  *** failing query for URIs: %@    cert: %@   fromURI: %@   fromService: %@
%@ enqueuing work %@. Current queue size is %lu
%@ uh-oh! Our queue is too long %lu. Dropping id query for URIs %@ fromService %@ fromURI %@
Asked to _dequeuePendingQueryIfPossible but we have no queued queries
Tried to _dequeuePendingQueryIfPossible but we currently have %lu in-flight queries
Starting ID query for IDs: %@    from URI: %@   Service: %@
       Identity: %@
               Skipping URI: %@   => already have tokens   (From: %@   Service: %@)
******** Found sentinel alias as from URI: %@, failing *********
******** Found invalid from URI: %@, failing *********
******** Found sentinel alias in query set: %@, failing *********
******** Found malformed email in query set: %@, failing *********
******** Found bad URI type in query set: %@ (%ld), failing *********
******** URI %@ is an emergency number, not performing query ********
******** Not querying URI %@ service is over budget, not performing query ********
The requestedURIsToQuery have already been covered by previous queries! -- Returning {success: %@, checked: %@, requested: %@}
Service wants to force HTTP queries, setting importance level lower to ensure it doesnt use APS
*** We are currently forcing HTTP queries due to a default; remove default to re-enable QORP!
The Query Service Is %@
Overriding response code for query with: %d   remove %@: %@    to stop this
Response identities is not what we expected (%@ instead of NSDictionary) %@, error %@, resultCode %ld
Query completed with error %@. isNetworkError? %@ numNetworkFailures %d
Time is off, considering this an invalid result
Query time was: %f  (URIs: %@) (service: %@) (fromURI: %@)
 We are %@in backoff mode.
 We are %@in self session mode.
 **** We are in backoff mode! Using override for maxRetries %d
               Success: %@
    Found identity for: %lu/%lu
  Tried Force Cellular: %@
Looked up %@   success: %@   error: %@   will retry: %@   retries: %d  tried force cell: %@
Query Time: %f
            Query Time: %f
                  URIs: %@
    responseIdentities: %@
                 error: %@
           shouldRetry: %@   retries: %d   wasOffline: %@
            maxRetries: %d
         Timestamp off: %@
Query used old certificate, retrying
Retries exhausted, not retrying
Server has disabled bad query signature recovery
 Max Query Interval: %f
   Query Multiplier: %f
 Base Retry Interval: %f
      Retry Interval: %f
 **** We are in backoff mode! Overriding retry interval %f
 ** Will retry in: %f
 => Retrying query for URIs: %@
  All done query set for: %@   success: %@  allNetworkFailures: %@  entirelyOffline: %@
 **** Every failure was a network failure - forcing the bag to reload
  Sending off query for URIs: %@  from URI: %@   service: %@
 ** WiFi link quality is not good, requesting cellular preferred
 => Sending query for URIs: %@  from URI: %@   service: %@
Empty token for completion block
Empty completion block for token: %@
Empty token for removing completion block
We have suffered %ld network failures. Forcing the server bag to reload.
Missing IDS Group Session Key Value Delivery entitlement -- failing creation of IDSDXPCGroupSessionKeyValueDeliveryProvider collaborator {connection: %@}
Daemon sendMessage with parameters
*** Over budget, failing sendMessage on service: %@
Forcing encryption off for message on %@
Updating listener on %@ willSendToDestinations %@ skipped %@ regPropToDest %@
Send message with send parameters
Updating listener on %@ with responseCode %ld error %@  lastCall %@ - messageContext %@
Silently failing %@ messages due to watch switch
ServerTimeStamps before broadcast is  %f
ServerDate before broadcast is  %@
Found no valid broadcaster for outgoing message %@, cleaning up
account %@ sendMessage with data size: %d to: %@ identifier: %@ guid: %@
account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@
Exception caught forwarding to account: %@
Deleting sent outgoing message with guid %@ after exception
At least one destination is mako {destinationURI: %@, guid: %{public}@, destinations: %@}
sendMessage - fromID (%@) does not match the account (%@). We are forced to fail this message send.
Daemon sending message with priority %{public}@ guid: %{public}@ identifier %{public}@ to: %@   from: %@   aliases: %@  service type: %{public}@   QoS=0x%x
Proxy outgoing message, setting current paired device as local destination
sendMessage - sending to tinker IDSDefaultPairedDevice. Failing message... { guid: %@, service: %@ }
Sending message {defaultDestination: %@, messageType: %@, serviceIdentifier: %@}
Didn't find message store for data protection class %@ for %@
Data protection class %@ is unavailable for %@, failing outgoing message
Telling clients (via IDSResponsePersisted) not to replay this message if the daemon crashes because the %@ priority queue (dataProtectionClass: %@) is full
file persistence - failed to create unique file directory %@ error %@
No sandbox extension for received resource [%@]
file persistence - moved file %@ => %@
file persistence - failed to move file %@ => %@ params %@
This local Message is not for the current device, sending to the database to be taken care of later
A over C encryption has failed to encrypt with error %ld
Store outgoing message {guid: %@, canSendUrgent: %@, forceImmediateSend: %@, hasSpecialTrafficClass: %@}
Persisting message failed guid: %@  params: %@, failing with IDSResponseDataProtectionClassUnavailable
Sending a non-urgent sync message as we have a go ahead based on the server policy
account %@ sendMessage: %@ to: %@ identifier: %@ guid: %@ - non-urgent message has been persisted.
Non-urgent message send %@ will be maintained by us from now on, alerting sender that it's been persisted and scheduled for sending.
Notifying client IDSResponsePersisted(%d) for %@ id %@ alt %@
(Messaging2) No account found for ID: %@
_sendLocalDeliveryMessagesForAccountUUID called with no accountUUID.
No space in local delivery queues for messages with priority %@ dataProtectionClass %@, bailing.
Performing query for account UUID %@ priority %@ class %@ Local Device ID %@ 
Got %lu query messages
account %@ _sendLocalDeliveryMessagesForAccountUUID with data size: %d to: %@ identifier: %@ guid: %@
account %@ _sendLocalDeliveryMessagesForAccountUUID: %@ to: %@ identifier: %@ guid: %@
Deleting sent outgoing non-urgent local message with guid %@? %@
Silently failing message with guid %@ due to it being a proxy 
Broadcasting failure of outgoing message %@ that never got processed through the database
Beginning cleanup of outgoing message database
Cleaned up %lu expired messages
IDS outgoing DB past threshold size %d MB, largest payload size account UUID: %@
Ending cleanup of outgoing message database
Runaway Client Detected, Purging messages for given client
Beginning cleanup of outgoing message database for quickswitched messages
Ending cleanup of outgoing message database for quickswitched messages
Beginning cleanup of outgoing message database for messages older than 2 days past enqueue date
Using Time Interval %f
Ending cleanup of %lu outgoing message database for older than 2 days past enqueue date
Registering for Checkpointing and Vacuum
Told to Check In for Checkpointing and Vacuum with activity %@ 
Got called to checkpoint vacuum DB run state with non null activity %@
*** Over budget, failing sendMessage on account: %@
sendServerMessage updated with responseCode %ld error %@  lastCall %@ - messageContext %@
Daemon Attempting To Send message from account %@ to destinations %@
Attempting to send to more than 1 destination, if this is not possible, this will fail further down the daemon
This service supports proxy delivery, which means a local account is allowed to send to a remote destination, allowing this message to send
This service supports sending messages to an inactive device, it is allowed to proceed
Looking at local destination %@
The paired device push token is %@
The paired device UUID is %@
Tried to send opportunistic data without entitlement {localObject: %@, uniqueID: %@}
Received data %@ to be cached and sent opportunistically on service %@
Tried to cancel opportunistic data without entitlement {localObject: %@, identifier: %@}
Cancel opportunistic send {identifier: %@, serviceName: %@}
%li Drop point detected.
Sender's IDSDaemon will drop message.
Daemon received signData request {requestID: %@, data: %@, algo: %ld, service: %@, options: %@}
Daemon dropping request %@ because it is missing required parameter
Daemon dropping request %@ because unentitled
Daemon dropping request %@ because it has a mismatched signing algorithm %ld and key type %ld
Finished signing request... broadcasting { request: %@, signedData: %@, error: %@ }
Daemon received verifySignedData request {requestID: %@, signedData: %@, data: %@, algo: %ld, service: %@, uri: %@, options: %@}
Daemon dropping request %@ because it is not a token URI
Daemon dropping request %@ because it has a mismatched verification algorithm %ld and key type %ld
Daemon dropping request %@ because tokenURI malformed
Daemon dropping request %@ because we are not registered
Finished signing verification request... broadcasting { request: %@, verified: %@, error: %@ }
Message has been dropped at point IDSMessageDropPointDaemon { messageID: %@, type: %@, accountID: %@, fromID: %@ }
(Messaging1) No account found for ID: %@
Client is attempting to send a message under first data protection lock, failing message
Result of can send message with account was no
Attempting to send to a local device using modern addressing, however we are not a local account, Swapping out destination for internet style addressing
Cloud destination could not be formed { destination: %@, token: %@, topic: %@, identities: %@ }
Switching to using local account since it has the alias corresponding to the fromID: %@
subServiceName %@ subServiceUUID %@
Couldn't find sub-account for service name %@
**** IDSDaemon: Urgent priority messaging requires entitlement for %@, DOWNGRADING MESSAGE PRIORITY TO DEFAULT - violator %@ ****
Client has specified a priority we do not recognize: %lu. Perpetrator: %@. Forcing default priority.
Added query update hash to certified delivery receipt {certifiedDeliveryReceipt: %p, hash: %@, fromURI: %@, service: %@}
sendCertifiedDeliveryReceipt - { certifiedDeliveryContext: %@ }
sendErrorMessage - finding Account
(Messaging) No account found for ID: %@
sendErrorMessage - got account %@
sendErrorMessage - using fromID %@ given aliases %@
account %@ sendErrorMessage: %@ to: %@ - guid %@
Sent outgoing error message with guid %@. Last call? %@
No certified delivery RTS found in payload with cdv { guid: %@, cdv: %ld }
start OTR test for %@
Completed forced OTR negotiation: token is %@, setupTime is %.6f, error==nil is %d
clean up existing QuickRelay connection for cloud messaging
start a new QuickRelay connection for cloud messaging
Account: %@ does not have alias URI: %@
Finished sending engram decryption failure {responseError: %@, token: %@}
** Failed sending engram decryption failure {responseError: %@, token: %@}
Alerted that local delivery controller now has space for %@ messages at class %@.
Alerted that local delivery controller now has space for %@ messages.
Resource availability changed, identifiers: %@ priorities %@
No space in local delivery queues for these messages.
AccountUUIDs with pending %@ messages %@
_processLocalMessagesWithAccountUUIDs with number of accountUUIDs %d priority %@ class %@
_processLocalMessagesWithAccountUUIDs accountUUIDs %@ priority %@ class %@
No pending non-urgent local messages to send, returning
Skipping invalid accountUUID %@ for account %@
Performing duet check for priority %@ for account %@ serviceIdentifier %@ duetIdentifiers %@ bypassDuet %@  logString: %@
Non-urgent internet send timer fired.
Scheduling a non-urgent internet send timer if needed. Existing timer fire date? %@
timeInterval for _nonUrgentInternetSendTimer as %f + %f = %f
Checking _hasNonUrgentInternetSendingBudget, fireDate is %@, %f
Last non-urgent internet send was too recent...waiting until next lock or non-urgent internet send to try again. Next fire date is %@.
Non-urgent internet send probability windows are not specified in the server bag - returning 1.0
Non-urgent internet send probability windows is not of the correct type! Returning probability = 1.0. %@
Non-urgent internet send probability window is not of the correct type! %@
We are currently in send window (%@, %@, %@). The time is currently %ld
Last non-urgent internet message attempt %ld is in this window - forcing probability to 0.0
Non-urgent internet send probability window is not fully defined: (%@, %@, %@)
Using non-urgent internet send probability %f for the current window.
Rolling die to attempt non-urgent internet send. Last check was %ld seconds ago. Probability = %f.
Probability is 0, cannot send.
Probability is >= 1, can send.
Rolled the die - can send? %@
_canSendNonUrgentInternetMessageForTopic 
Push is not connected - skipping send attempt.
We can't send further non-urgent internet messages in this window, skipping.
Server Bag policy for sending message immediately for topic - %@ does not exist. This message will proceed with default behavior
_processOutgoingNonUrgentInternetMessages
Lack budget to perform non-urgent internet send, skipping.
Processing stored %lu non-urgent internet outgoing messages
Not combining encrypted message - %@
Reduced outgoing non-urgent internet messages from %lu to %lu (omitted %lu).
sendNonUrgentInternetMessage - finding Account
Deleting non-urgent internet outgoing message with guid %@
Deleting non-urgent internet outgoing combinedMessage with guid %@
No account found for ID: %@ - can't send %@
sendNonUrgentInternetMessage - got account %@
Sending individual non-urgent internet message %@
Deleting sent non-urgent internet outgoing sole message with guid %@? %@. Error? %@ response code %ld
account %@ sendNonUrgentInternetMessage: bulked: %lu to: %@ identifier: %@ guid: %@
Deleting sent non-urgent internet message with guid %@? %@. Error? %@ response code %ld
Enqueueing block in multiqueue {key: %@, identifier: %@, queueState: %@}
Enqueueing block in multiqueue {key: %@, identifier: %@}
At checkpoint %ld for guid %@. Wants checkpointing %@ disabled by bag key %@
Incoming message for topic: %@  but no service found
No account found for topic: %@   toURI: %@
Noting peer token {shouldNoteToken: %@, token: %@, service: %@, fromIdentifier: %@}
Decrypting message %@ of encryption type "%@"
EC message came in, processing metric {ECSuccess: %@, legacySuccess: %@, command: %@}
Blowing away local peer cache for peer tokens for URI: %@
Retrying decryption for message %@ in %f seconds
** Had decryption error: %d { guid: %@, error: %@ }
Finished sending decryption error: %d, %@  to token: %@
** Failed sending decryption error: %d, %@ to token: %@
Incoming message attachment data: %p ID: %@  from: %@ fromMe: %@
EC overflow message came in, processing metric {ECSuccess: %@, legacySuccess: %@, command: %@}
Finished sending decryption error: %d %@ to token: %@
** Failed sending decryption error: %d %@ to token: %@
messageDictionary: %@
 => Settled on signature: %@
 => Missing fields from dictionary, returning error
Finished sending download (bad field) error: %d %@ to token: %@
** Failed sending download (bad field) error: %d %@ to token: %@
Attachment data download updated to %lld of %lld (%lld bps)
retrieved message data for incoming attachent message
Failed to grab message data for message ID: %@ from: %@ error %@
INCOMING-LOCAL_DELIVERY:%@ SERVICE:%@ didWakeHint:%d
Broadcast: Processing incoming local message storage guid %@ real message guid %@ topic %@ command %@ didWakeHint %d
%s: could not find IDSServiceProperties for topic %@
Found sender correlation identifier { guid: %@, senderCorrelationIdentifier: %@, fromID: %@, token: %@ }
The Account Was %@
The message that will be broadcast is %@
Proxy message original parameters {messageUUID: %@, destinations: %@, targettingAccount: %@}
Will Send Block After Send
Message Send After Transposing
Incoming proxy nice message for broadcast
Received local proxy message %@ is a duplicate. Ignoring.
PROXY BROADCASTING BLOCK %@ Guid %@ Topic %@ ToID %@ fromID %@
%s: Unknown incoming local message type received, %lu
Broadcast: incoming local message %@ requires client ack, broadcast ID %lld
Processing stored incoming local message %@ topic %@
Using fromID for this message as %@
We failed to decrypt class A data on a class C service even when we had keys, Please collect logs and file a bug: Original Command: %@ From Device: %@ Service: %@ GUID: %@
Class A key not avaialble for message %@ on topic %@
Processing stored incoming remote messages
%s: GUIDs count %lu
Processing %lu stored incoming remote messages {shouldRepeat %@}
 => Deferring message, service wants messages after first unlock only
Finished processing stored incoming messages
Processing stored %lu outgoing messages due to unpairing. Priority %@
Found stored outgoing message from account with guid %@ which no longer exists or is not local type.
Finished processing stored outgoing messages due to unpairing. Priority %@
Processing stored outgoing urgent messages LocalOnly: %@
Processing stored %lu outgoing urgent priority messages
Found stored outgoing message from account with guid %@ which no longer exists.
account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for with data size: %d to: %@ identifier: %@ guid: %@
account %@ _processStoredOutgoingUrgentMessagesProcessLocalAccounts for message: %@ to: %@ identifier: %@ guid: %@
Deleting sent outgoing urgent message with guid %@? %@
Old outgoing message %@ has no relevant account, cleaning up.
Finished processing stored outgoing messages
Handling Space Becoming available for urgent local messages
Processing Error
Noted decryption failure for engram group {group: %@, noteError: %@}
Broadcasting Group Share Message brodcast block
No session ID provided in the message for command code %@, discarding message...
Couldn't find session with ID %@ for command code %@, discarding message...
Received session invitation fromID %@, processing message %@
Received accept response fromID %@, processing message %@
Received decline response fromID %@, processing message %@
Received cancel response fromID %@, processing message %@
Received session message fromID %@, processing message %@
Received session end message fromID %@, processing message %@
Received session reinitiate message fromID %@, processing message %@
Received group session message fromID %@, processing message %@
We received an IDS Message that had an original command key, however its command was not FTCommandIDAttachmentMessage
Checking if this message corresponds to a selected alias {strippedToIdentifier: %@, accountUniqueID: %@, aliasStrings: %@, aliases: %@}
Incoming remote message
_processIncomingRemoteMessage: %@ fromID: %@ forTopic: %@ storedGUID %@
DROPPING MADRID MESSAGE: %@ fromID: %@ forTopic: %@ storedGUID %@
Found no service for topic! %@
Message %@ is coming from an account that is not permited to send to this device. Sender Was: %@
Ignoring filtered list for own aliases. {Alias: %@; Account: %@;}
Told to filter message %@ from %@
Dropping message %@ from %@ because it is not on the cross-account allowlist and is coming from %@
Message specifies an expiration date %@ %@
Message %@ for topic %@ has expired! Dropping.
Received remote message %@ is a duplicate. Ignoring.
INCOMING-APS_DELIVERY:%@ SERVICE:%@
Received registration update message on tunnel service, ignoring...
Processing received message for which we couldn't find a relevant account, cleaning it up. { messageUUID: %@, storedGuid: %@, toIdentifier: %@, message: %@ }
Sent certified delivery receipt for filtered message { success: %ld, context: %@ }
Broadcasting the receipt of message %@  (%@)  (topic: %@)
Persisting failed for message %@  (%@)  (topic: %@)
Performing validity check for message %@ sent to family service.
IDS Family member count is zero, trying to fetch family again. Will retry message after fetch completes. Sending incoming family message to storage.
IDS Family member count is zero, but out of fetches to fetch family again, this message %@ will likely fail.
Family Message %@ is coming from an account that is not in the family. Sender was: %@
Message %@ sent to family service passed validity requirements.
Device is NOT in our account registrations, It should be, Can we force a GDR?
Issuing forced GDR & sending message to storage
No forced GDR is possible
Unknown devices, but GDR attempt exchasuted
Message %@ is coming from an account that is firewalled from talking to this device. Sender Was: %@
Firewalled message %@ is coming for session.
Ending session for service %@ with groupID %@
Finished handling decryption {GUID: %@, URI: %@, SenderCorrelationIdentifier: %@, topLevelPayload: %@}
Dropping message! {guid: %{private}@, processError: %@, decryptionError %@
Overflow attachment (with original command %@) -- checking for original payload? %@
Pulled out original payload %@ or bulked payload %@ from attachment message, using original command.
Found rawBulkedData
For command %@ we have unpacked dictionaryPayload? %@ protobufPayload? %@ dataPayload? %@ bulkedPayloads? %@
Hit exception %@ trying to deserialize payloads
Broadcast will include message context %@
Found Topic %@  with all accounts %@ and Going to use account %@
Forwarding Message To Local Device to Process and Broadcast
About To Send Message Over Local Link
PROXY: Will Send Block
PROXY: Completion Block %ld, %@, %@
We received a message on a service that is local only, we have kicked off a forwarding of the message if necessary, we can delete this message from our database
Broadcasting HomeKit Message top
Broadcasting HomeKit Message brodcast block
Broadcasting HomeKit Report Message top
Broadcasting HomeKit Report Message brodcast block
Broadcasting Incoming Invitation Message top
Broadcasting Incoming Invitation Message block
Broadcasting Incoming Invitation Update Message top
Broadcasting Incoming Invitation Update Message block
Broadcasting GroupShare Message top
Received Sent Ahead Group {groupID: %{public}@}
Cached Sent Ahead Group {error: %{public}@, group: %{private}@}
Received IDS remote error (120) for client that can not hanlde it %@ %@
Received IDS message payload is empty, not delivering %@ %@
Broadcasting for received message with guid %{public}@   broadcast topic: %{public}@  (topic: %{public}@)
No broadcaster found - deleting incoming message %@ on topic %@ with no listeners
Not broadcasting
No broadcast desired for command %@ topic %@ -- deleting message with guid %@
Processing bulked payload ...
Not broadcasting command
Shouldn't broadcast for this command %@ for received message %@ with guid %@
No Message Error, Processing Imediatly
  => Adding a delay of %f seconds to iCloud Pairing Messages
  => Processing immediately
Under first data protection lock. Sending message to storage. { guid: %@ }
Processing message for stored guid %@
Under first data protection lock and message already stored -- ignoring {GUID: %@, storedGuid: %@}
No broadcaster found - dropping update for incoming pending message %@ on topic %@ with no listeners
_decryptEngramMessage, group task {context: %@, error: %@}
_decryptEngramMessage, fetched group {group: %@, fetchError: %@
Told to decrypt: %@
decryptedData: %@ error: %@ decryptionError: %@
decryptedDict: %@
_decryptEngramMessage, no Group, bailing...
Received an IDS Payload for a Resource Tranfer over the Internet, looking at it
Payload is %@
DictIS %@
File Has Been Downloaded to %@
Failed to issue sandbox extension for file [%@]
Storing under first lock
Message is from server storage %@
Storing item from server storage %@  (%@)
Persisting failed for message %@  (%@)
Storage timer fired, guids we need to process: %@
We're under first data protection lock. Holding messages and not sending to clients.
Scheduling a storage invalidation timer in: %f
Noting item from storage (%@)
Noting last item from storage (%@)
Hinting service to check transport log {service: %@, reason: connected}
Failed to hint service to check transport log {service: %@, reason: connected}
IDSPushHandler signaled isConnected %d
handler %@ didReceiveMessage: %@ fromID: %@ forTopic: %@ context: %p
Given message list from server. Dissecting into %ld individual messages
Submessage command is not recognized -- dropping. {subMessageCommand: %@, subMessage: %@}
Encryption failed with error %@
Incoming message %p on service %@ command %@
Received a message over Bonjour Delivery that we can't process! -- dropping {service: %{public}@, command: %{public}@, deviceID: %{private}@, message: %{private}@}
%s: invalid topic for saving incoming message, ignoring!
%s: invalid parameters for saving incoming message, ignoring!
Incoming A over C message but keys are not available, sending to storage
Stored incoming message under first lock for service %@ with guid %@. Success: %d
Incoming protobuf %p on service %@ command %@
Received local protobuf %@ is a duplicate. Ignoring.
Failed to decrypt AoverC message -- dropping {topic: %@, error: %@}
Incoming data %p on service %@ command %@
Received local data %@ is a duplicate. Ignoring.
Received local message %@ is a duplicate. Ignoring.
Incoming app level ack on service %@
Received cancel request for message %@ from localObject %p
Sending not started update to listener on %@ with responseCode %ld error %@ - 0/0 bytes
Sending update to listener on %@ with responseCode %ld error %@ - %@/%@ bytes
Broadcasting update to listener on %@ with responseCode %ld error %@ %@/%@ bytes
Cannot ack message locally without proper priority value (%d)
Please file a radar! Could not ack message with sequence number %u for peer %@ priority %ld
Received acknowledgement for outgoing message %@ alternateCallbackID %@ from localObject %p
Broadcast: Received acknowledgement for message stored as %{public}@ real guid %{public}@ from localObject %p processName %{public}@
Broadcast: message %@ got client ack, sending IDS ack to sender, broadcast ID %lld, sequence number %u 
Message on %@ with storage guid %@ experienced broadcast time %@
Received acknowledgement for message %@ from localObject %p
Request to send app-level ack for message %@ to %@ from localObject %p
Sent app-level ack with guid %@. Last call? %@
The delivery path for message with guid %@ is %@, service: %@
Only 1 account exists on this service, We will need to proxy this message to our local device for broadcast
Not Proxying this message %@ payload is currently a typing indicator
Only 1 account exists on this service, We will need to proxy this and include the default device as a destination for the message as well
Changing Class-A to AOverC for service %@
file persistence - destination file exists %@
file persistence - failed to move and failed to copy file %@ => %@ (error %@)
file persistence - failed to remove original file %@ (error %@)
Not reflecting back initial region query success, registration is disabled: %@
Not reflecting back region validation success, registration is disabled: %@
Notifying of region validation success for registration: %@    region: %@   phone number: %@   context: %@  verified: %@
Not reflecting back started authenticating, registration is disabled: %@
Apple ID registration center notify authentication failure
Not reflecting back authentication failure, registration is disabled: %@
Apple ID registration center notify authentication success
Not reflecting back authentication success, registration is disabled: %@
  Received default invitation context with result: %d  error: %@  result dictionary: %@
  Received region validation response with result: %d  error: %@
Apple ID registration center note successful token
Noting successful token: %p   for profile ID: %@   self handle: %@  wasFetched: %@  registration: %@
About to insert bogus profile ID: %@  ignoring
Empty registration info supplied for password fetch, bailing
Starting renew for %@
Received auth token response for reg: %@
 We have a token, great!
 ** user cancelled, bailing
 ** empty token, bailing
Starting token fetch for %@
Token fetcher finished for registration info: %@
 We have a token, just sending auth
 ** Username/DSID is empty, but we have a token: %@
 ** No token found, requesting it!
Apple ID registration center authentication request
No email present for registration: %@
Not adding this to the queue, we're already trying to authenticate: %@
Fetching password for: %@  (Environment: %@)
Sending region validation request: %@ number: %@ (%@)
Sending initial context request for: %@
Requesting initial context for: %@
Requesting region validation for: %@  number: %@, %@
Kicking off authentication request for: %@
Trying to create temporary user credential with nil argument. Returning nil. { cert: %@ }
Loaded paired device state from keychain but could not decode dictionary.
Paired device properties can't be loaded because the keychain is upgrading.
Didn't find device properties to load
Paired device properties can't be loaded because of a keychain error %d.
%s: Failed to save paired devices to keychain, err: %d
Removing the paired device repository's keychain entry.
%s: Failed to remove paired devices entry from keychain, err: %d
Clearing KT Registration Data.
Checking for unregisterd KT Data.
Found unregistered KT Data for keyIndex. { keyIndex: %@, ktRegistrationData: %@ }
Did not find any unregistered KT Data.
Requesting copy of KTRegistrationData for keyIndex { keyIndex: %u, isRegistered: %@ }
No config for key index { keyIndex: %u, serviceIndexToKTRegConfigs:%@ }
No registered KT Data for key index. { keyIndex: %u, config: %@ }
No unregistered KT Data for key index. { keyIndex: %u, config: %@ }
Trying to load KT Registration Data from keychain.
No unregistered KT data stored in keychain for keyIndex. { keyIndex: %u, error: %@ }
No registered KT data stored in keychain for keyIndex. { keyIndex: %u, error: %@ }
No KT data found in keychain, we need to generate a new one for keyIndex. { keyIndex: %u }
Successfully deserialized unregistered KT Data from keychain for keyIndex, saving to config. { keyIndex: %u }
Failed to deserialize unregisterd KT Data from keychain for keyIndex, need to generate new KT Data. { keyIndex: %u, error: %@ }
Successfully deserialized registered KT Data from keychain for keyIndex, saving to config. { keyIndex: %u }
Failed to deserialize registerd KT Data from keychain for keyIndex, need to generate new KT Data. { keyIndex: %u, error: %@ }
Saving registered KT Data for service key { keyIndex: %u, registeredKTData: %@ }
Removing registered KT Data from keychain because deleteIfNull == YES and no registered config present, {keyIndex: %u}
Saving unregistered KT Data for service key { keyIndex: %u, unregisteredKTData: %@ }
Removing unregistered KT Data from keychain because deleteIfNull == YES and no registered config present, {keyIndex: %u}
KT registration manager noting registration of data { keyIndex: %u, ktDataForRegistration: %@, ktPublicAccountKey: %@, ktDataSignature: %@ }
Failed to get config for registered key index { keyIndex: %u }
Failed to get unregistered KT Data for key index { keyIndex: %u }
Expected KT Data for registration matches what was registered for keyIndex. { keyIndex: %u, expectedKTData: %@ }
expected kt public account key for registrations matches what we registered for keyIndex. { keyIndex: %u, expectedKTPublicAccountKey: %@ }
Expected KT Data Signature for registrations matches what we registered for keyIndex. { keyIndex: %u, expectedKTDataSignature: %@ }
Completed registration of previously unregistered KT Data for key index { keyIndex: %u, ktDataForRegistration: %@, ktPublicAccountKey: %@, ktDataSignature: %@ }
Completed registration does not match unregistered KT Data for key index { keyIndex: %u, expectedKTDataForRegistration: %@, expectedKTPublicAccountKey: %@, expectedKTDataSignature: %@, regKTDataForRegistration: %@, regKTPublicAccountKey: %@, regKTDataSignature: %@ }
Checking if we have unregistered KT Data that is ready to register.
Found key index has unregistered KT Data { keyIndex: %u, unregisteredKTData: %@ }
Unregistered KT Data has necessary fields to register.
Unregistered KT Data does not yet have necessary fields to register.
Creating request for KT registration data.
Adding application key %u to kt-loggable-data for service: %@
Failed to get representation of application key { keyType: %u, error: %@, service: %@ }
Failed to get service application key { keyType: %u, service: %@ }
No KT Application found for key index or registration data is null. { keyIndex: %u, ktRegistrationData: %@ }
Top level service already has relevant KT Data setup. { service: %@ }
No signature requests created.
Handling signature response from transparency.
No response from transparency for signature request. { error: %@, underlyingError: %@ }
No signatures in transparency response, nothing to do. { error: %@, underlyingError: %@ }
No config for key index and KT Application. { keyIndex: %u, KT Application: %@, transparencyResponse: %@, error: %@, underlyingError: %@ }
No unregistered KT data for keyIndex. { keyIndex: %u, ktApplication: %@, error: %@, underlyingError: %@ }
No signature data from KT for KT Application. { keyIndex: %u, ktApplication: %@, error: %@, underlyingError: %@ }
KT data requiring signature not matching between transparency and IDS. { IDSKTData: %@, TransparencyKTData: %@, keyIndex: %u, error: %@, underlyingError: %@ }
No signature or public key provided from transparency for key index. { keyIndex: %u, error: %@, underlyingError: %@ }
KT data for registration and public account key are unchanged from what is registered. No update needed for key index. { keyIndex: %u }
Persisting changes.
Updated unregistered data. Need to upload to KVS.
Updated unregistered data. Need to reregister.
No config found for key index.{ keyIndex: %u }
Unregistered KT Data not yet uploaded to KVS for keyIndex. { keyIndex: %u }
Registered KT Data not yet uploaded to KVS for keyIndex. { keyIndex: %u }
No new trusted devices to insert into KVS.
Asked to create KT Registration Status provider.
No KTApplication found for keyIndex. { keyIndex: %u }
Creating KT Trusted Device for KVS upload. { isRegistered: %@ }
No config found for key index. { keyIndex: %u }
No kt registration data found for key index. { config: %@, keyIndex: %u, isRegistered: %@ }
Unable to create KTTrustedDevice, no services have necessary data.
No config for keyIndex. { keyIndex: %u }
Not yet implemented.
Did remove auth cert -- reidentifying {user: %@}
Mid synchronize -- ignoring
Marshaller is waiting on accounts to load, the account controller isn't ready yet
Waiting on migration -- deferring synchronize
Performing migration if needed
Migration completed, performing synchronize
Synchronizing users to accounts {users: %@}
Removing account for restricted service {uniqueIdentifier: %@, account: %@}
Removing unwanted account for service {account: %@}
Removing unwanted temporary phone account for service {account: %@, isHSA2: %@, allowHomeNumber: %@}
Removing unwanted account for service, user is disabled {account: %@, matchingUser: %@, userProperties: %@}
Migrating account to use users {uniqueIdentifier: %@, account: %@}
Removing account without matching user {uniqueIdentifier: %@, account: %@}
Detected account has mismatching user. Marking for removal {uniqueIdentifier: %@, user: %@, account: %@}
Removing extra account for user without matching user {uniqueIdentifier: %@, account: %@}
Logging current and disabled account info with guid %@
Not creating account for temporary user {isHSA2: %@, allowHomeNumber: %@}
Creating missing accounts for user {uniqueIdentifier: %@, service: %@}
Disabling account {uniqueIdentifier: %@, account: %@}
Can't setup phone number accounts { registrationSupported: %@, supportsSMSIdentification: %@ }
  Read %@: %@  (Class: %@)
Migrating this SMS auth token: %@  mainID: %@
******** We're missing an SMS auth token, this will SMS migration register ******** 
Using existing user mainID: %@   token: %@
Loaded auth cert: %@    ID: %@
Migrating auth cert for IDS User ID: %@
Not migrating cert for user ID, we already have one: %@
keychainDictionary: nil %@
  ** Fixed Self ID to be: %@
  ** Fixed Profile ID to be: %@
Successfully fetched token for account (%@:%@:%@): %@  (Environment: %@)
Successfully %@ token for account (%@:%@): %@  (Environment: %@  New Token: %@)
Voided auth token for account (%@)
Successfully voided password for account (%@:%@): %@  (Environment: %@)
 ... finding emails to register for DS registration based account: %@:%@
 => Added self handle: %@ to URI set
 => **** Missing self handle, not adding ****: %@
 ... finding emails to register for auto register based account: %@:%@
 => Auto adding confirmed emails: %@ to URI set
 => Auto adding vetted emails: %@ to URI set
 => No confirmed emails...
 => Removing DS Handle
 ... finding emails to register for manual handle selection account: %@:%@
 => Added confirmed emails: %@ to URI set
 => Added candidate emails: %@ to URI set
   Device numbers: %@, error: %@
 => Found sentinel alias, stripping
Skipping device number: %@  for service: %@
 => Final emails to register: %@    for service: %@  account: %@
Updating user with correct phoneNumber {user: %@, updatedUser: %@, self: %p}
Can't find AWD metrics for %@
Final Report - %@
There is no metric dictionary for %@, %@
Loading services...
Skipping load of empty service dictionary
Not loading service, invalid dictionary %@ missing identifier
Not loading service %@
... Done!
Loaded service: %@, registering successfully
Skipping unload of service %@
Sub-services - Couldn't find service %@ to load subService %@ with
   %@
Did not find service with serviceName %@, can't update sub-services
Did not find a paired device uniqueID matching %@, can't update sub-services
Current sub-services for device %@: %@
New set of subservices are the same, ignoring update
Updated sub-services map %@
Told to remove %@ but another device still needs it
Posting notification with userInfo %@
Unloading   %@
Loaded sub-services:
Top level map %@
Loading sub-services...
Loaded preferences from disk: %@
Loaded sub services from disk: %@
Stale entries: %@
Cleaned up map: %@
Fixed empty map %@
Combined services %@
No super service provided when updating service list, ignoring update...
Loaded a paired device from storage with an empty/missing CBUUID: %@
Cannot retrieve a paired device with an empty CBUUID.
Cannot retrieve a paired device with CBUUID: %@
Adding a paired device to the repository with CBUUID: %@
Invalid attempt to add the same paired device into a repository. CBUUID: %@
Putting paired device %@
Cannot store a paired device with an empty CBUUID
Removing a paired device from the repository with CBUUID: %@
Cannot remove a paired device with an empty CBUUID.
Attempting to remove an unrecognized paired device, whose CBUUID is %@ {pairedDevices: %{private}@}
Activating paired device with CBUUID: %@
Deactivating paired devices
%s Deactivating paired device with CBUUID: %@
%s Cannot activate an unknown paired device. CBUUID: %@
Purging the secured encryption keys for all paired devices.
Updating a paired device in the repository with CBUUID: %@ with deviceInfoPayload: %@
Cannot apply a device info payload to a paired device with an empty CBUUID.
Could not update the paired device with payload. No device found with CBUUID: %@
Updating a paired device supportIPsec property {cbuuid: %{private}@, supportIPsec: %{public}@}
Cannot update the capability flags of a paired device with an empty CBUUID.
No paired device found with provided CBUUID -- failed to update supportIPsec {cbuuid: %{private}@}
Updated paired device support IPsec {supportIPsec.old: %@, supportIPsec.new: %@}
Updating a paired device with CBUUID: %@ to (deviceUniqueID: %@) (buildVersion: %@) (productVersion: %@) (productName: %@) (pairingProtocolVersion: %u) (minCompatibilityVersion: %u) (maxCompatibilityVersion: %u) (serviceMinCompatibilityVersion: %u)
Cannot update the private data of a paired device with an empty CBUUID.
Could not update the paired device's build version, product version, etc. No device found with CBUUID: %@
Updated paired device build version from: %@ to: %@
Updated paired device product version from: %@ to: %@
Updated paired device product name from: %@ to: %@
Updated paired device uniqueID from: %@ to: %@
Updated paired device pairing protocol from: %u to: %u
Updated paired device min compatibility version from: %u to: %u
Updated paired device max compatibility version from: %u to: %u
Updated paired device service min compatibility version from: %u to: %u
Updating a paired device pairingType property {cbuuid: %{private}@, pairingType: %{public}ld}
No paired device found with provided CBUUID -- failed to update isTinker {cbuuid: %{private}@}
Updated paired device support pairingType {pairingType.old: %ld, pairingType.new: %ld}
Updating a paired device uris, loginID and pushToken properties {cbuuid: %{private}@, uris: %{public}@, pushToken: %{public}@}
No paired device found with provided CBUUID -- failed to update uris and pushToken {cbuuid: %{private}@}
Updated paired device support uris and pushToken {uris.old: %@, uris.new: %@, pushToken.old: %@, pushToken.new: %@}
SharedMessage store %@
Beginning migration.  The IDS db is currently at v%d, upgrading to v%d.
Reindexing the DB worked.
Database vacuum success
Final integrity check success
Post-reindex integrity check success
Initial integrity check success
Adding fields to support iMessage on IDS
Adding field to support sending iMessage from aliases
Adding support for high priority messages
Flushing stale messages to enable database
Flushing potentially old stale messages
Updating outgoing_message to have all needed fields
Updating outgoing_message to have is_sent column
Updating outgoing_message to have new send types and options.
Flushing stale outgoing_messages.
Adding expiration date support
Adding app level ack
Adding compress option
Adding nonWaking, fireAndForget, queueOneIdentifier option
Outgoing message priority changes
AlternateGUID support
isLocal added to incoming message record
Duet columns, payload size added to outgoing message record
Adding indexes on message guid
Add enforce_remote_timeout column to outgoing_message
Create table outgoing_messages_to_delete
Adding indexes on account_guid, priority and is_send
Add main_account_guid column to outgoing_message
Add pending_delete column to outgoing_message
Add message_type column to outgoing_message
Setting a reasonable timeout on messages which are missing them
Add skip_self column to outgoing_message
Add nonCloudWaking column to outgoing_message
Add wants progress column to outgoing_message
Add ignoreMaxRetryCount column to outgoing_message
Add wantsCertifiedDelivery column to outgoing_message
Add originalTimestamp column to outgoing_message
Adding message_identifier column to incoming_message
Dropping old bypass_duet messages
Add push_priority column to outgoing_message
Add send_mode column to outgoing_message
Add wants_firewall_donation column to outgoing_message
The %@ column already exists on %@, skipping this step.
%p: Returned the random publicKeyData %@ for the simulator
%p: This IDSRealTimeEncryptionIdentity is expired. (now: %@, expirationDate: %@)
(Daemon) connectPairedDevice (cbuuid: %@)
(Daemon) setupCompletedForPairedDevice (cbuuid: %@)
(Daemon) getPairingDevices
(Daemon) getPairingDevices yielded CBUUIDs: %@
(Daemon) getPairedDevices
(Daemon) getPairedDevices yielded CBUUIDs: %@
(Daemon) deletePairedDeviceWithID (cbuuid: %@)
(Daemon) stopLocalPairingForDeviceWithID {cbuuid: %{private}@}
(Daemon) unpairDevice (cbuuid: %@)
(Daemon) forgetDevice (cbuuid: %@)
(Daemon) switchActivePairedDevice (cbuuid: %@)
(Daemon) switchToNoActivePairedDevice
(Daemon) redeliverMessagesForDevice (device ID: %@)
(Daemon) setAllowedTrafficClassifiersForDevice (device ID: %@)   (classifiers: %@)
(Daemon) dropAllMessagesWithoutAnyAllowedClassifierForDevice (device ID: %@)
(Daemon) _addPairedDevice:BTOutOfBandKey:completion: (cbuuid: %{private}@, btOutOfBandKey.hash: %{private}@, shouldPairDirectlyOverIPsec: %{public}@, pairingType: %{public}ld, bluetoothMACAddress.hash: %{private}@)
(Daemon) _addPairedDevice: PairDirectlyOverIPsec: %@
(Daemon) Told to add a paired device %@
(Daemon) Reset communication with currently active paired device before adding a new paired device: %@
(Daemon) Told to add a paired device but there is no need to reset communication with the currently active paired device. {activeCBUUID: %{private}@, cbuuidString: %{private}@}
Performing query for forced verification.
Completed query for forced verification. { success: %@, errorDictionary: %@ }
IDS Firewall System Starting Up
  => Setting cache size
  => Invalidating caches
Is firewall enabled %@
Should firewall drop for all categories %@
Entries for category %u: %@
Closing database.
Scheduling Cleanup Timer
Scheduling timer called
Removing entries older than %@
%s: table empty
UI32Table_Set: cannot allocate memory for %@
UI32Table_Set: table resize from %d to %d
UI32Table_Set: replacing object %@ with %@
UI32Table_Set: key %08X at %d (total elements: %d) store object %@
UI32Table_Remove: did not find %08X (from %d entries)
UI32Table_Remove: removing %@ @%d (from %d entries)
NSSTable_Set: cannot allocate memory for %@
NSSTable_Set: table resize from %d to %d
NSSTable_Set: replacing object %@ with %@
NSSTable_Set: key %8@ at %d (total elements: %d) store object %@
NSSTable_Remove: did not find %@ (from %d entries)
NSSTable_Remove: removing %@ @%d (from %d entries)
Fetched phone auth certificate from phone user registry {userAuthCerts: %@}
Failed to generate identity {error: %{public}@, identifier: %{public}@}
Generated identity {identifier: %{public}@, identity: %{private}@}
Attempted to save nil identity -- bail {identifier: %{public}@}
Failed to generate data from identity -- Removing refence from keychain {error: %{public}@, identifier: %{public}@, identity: %{private}@}
Generated data from identity {identifier: %{public}@, identity: %{private}@, data: %{private}@}
Failed to save to keychain -- Failed to save identity {error: %{public}@, identifier: %{public}@, identity: %{private}@, data: %{private}@}
Purged identity {identifier: %{public}@, identity: %{private}@}
Failed to purge identity from keychain -- leaking identity but removing reference to it {error: %{public}@, identifier: %{public}@, identity: %{private}@}
Removed identity reference from keychain {identifier: %{public}@, identity: %{private}@}
Failed to remove identity from keychain {error: %{public}@, identifier: %{public}@, identity: %{private}@}
Generating identity {index: %u}
Failed to generate application identity -- returning container with nil ngm identity {error: %{public}@, index: %u, keyIndex: %u}
Generating identity {identifier: %ld, dataProtectionClass: %ld, existingLegacyIdentity: %{private}@}
Failed to generate ngmIdentity -- returning container with nil ngm identity {error: %{public}@, identifier: %ld, dataProtectionClass: %ld}
Failed to generate legacyIdentity -- returning nil container {error: %{public}@, identifier: %ld, dataProtectionClass: %ld}
Failed to generate fullDeviceContainer -- returning nil {error: %{public}@, identifier: %ld, dataProtectionClass: %ld}
Failed to identity to keychain {error: %{public}@, identifier: %ld, dataProtectionClas: %ld, storageIdentifier: %{public}@, dataToSave: %{private}@, container: %{private}@}
Failed to generate data from container -- not saving {error: %{public}@, identifier: %ld, dataProtectionClass: %ld, container: %{private}@}
Loaded identity on first try -- done {index: %u, firstTry: %{private}@}
Failed to load identity on first try -- retrying {error: %{public}@, index: %u}
Loaded identity on second try -- done {index: %u, secondTry: %{private}@}
Failed to load identity on second try -- falling back to legacy {error: %{public}@, identifier: %u}
Loaded identity container on first try -- done {identifier: %ld, firstTry: %{private}@}
Failed to load identity container on first try -- retrying {error: %{public}@, identifier: %ld}
Loaded identity container on second try -- done {identifier: %ld, secondTry: %{private}@}
Failed to load identity container on second try -- falling back to legacy {error: %{public}@, identifier: %ld}
Failed to migrate container with legacyIdentity {error: %{public}@, identifier: %ld, legacyIdentifier: %ld, legacyIdentity: %{private}@
Loaded legacy identity -- returning container with nil ngmIdentity {identifier: %ld, legacyIdentifier: %ld, container: %{private}@
Failed to create container with legacyIdentity -- returning nil {error: %{public}@, identifier: %ld, legacyIdentifier: %ld, legacyIdentity: %{private}@
Failed to remove legacy identity -- purging {removeError: %{public}@, identifier: %ld, legacyIdentifier: %ld, legacyIdentity: %{private}@
Failed to erase ngm full device identity {ngmError: %@, ngmFullDeviceIdentity: %@}
Purged ngm full device identity {ngmFullDeviceIdentity: %@}
Failed to remove data {blobError: %@, identifier: %@}
Purged key blob from keychain {identifier: %@}
Failed to purge legacy full identity {legacyError: %@, legacyFullIdentity: %@}
Purged legacy full identity {legacyFullIdentity: %@}
Loaded identity on first try {identifier: %{public}@}, serializationDidChange: %{public}@, firstTry: %{private}@}
Failed to load identity on first try -- retrying {error: %{public}@, identifier: %{public}@}
Loaded identity on second try {identifier: %{public}@, serializationDidChange: %{public}@, secondTry: %{private}@}
Failed to load identity on second try {error: %{public}@, identifier: %{public}@}
Failed to load identity from keychain {error: %{public}@, identifier: %{public}@}
Loaded identity data from keychain {identifier: %{public}@, data: %{private}@}
Failed to load identity from data {error: %{public}@, identifier: %{public}@, data: %{private}@}
Loaded identity from keychain data {identifier: %{public}@, identity: %{private}@}
Serialization did NOT change for identity {identity: %{private}@}
Serialization did change for identity {identity: %{private}@, reSerializedData: %{private}@, data: %{private}@}
Faild to get dataRepresentation to determine serializationChange -- Not updating {error: %{public}@, identity: %{private}@}
Failed to load identity container from keychain {error: %{public}@, identifier: %{public}@}
Failed to load identity container from data {error: %{public}@, identifier: %{public}@, data: %{private}@}
Failed to serialize ngmVersion {error: %{public}@, ngmVersion: %ld}
Failed to deserialize ngmVersion from data -- returning 0 {error: %{public}@, dataRepresentation: %{public}@}
IDSNWSocketPairConnectionProtocol returning -- no header.
IDSNWSocketPairConnectionProtocol read message_length:%u (0x%x), type:%u (0x%x)
IDSNWSocketPairConnectionProtocol returning partial data.
%@ Succesful nw_connection_create_with_connected_socket_and_parameters
%@ _nwConnection is nil.
%@ Connection: nw_path_t is NULL, dissabling cross-layer logging.
%@ Connection from listener is ready.
%@ Listening connection closed.
%@ Listening connection state: %d
Dealloc'ing IDSNWSocketPairConnection without ending the session
%@ Ending session
%@ Read %u bytes
%@ nw_connection_receive_message Error %@, isFinal %@
Scheduling next _receiveFromNWConnection for %@
%@ nw_connection_receive_message of type %u
31 {curProtocol: %hhu, prevProtocol: %hhu, curUUID: %{public}.16P, conUUID: %{public}.16P, curPktLen: %u, logSeqn: %hhu}
Sending message to uppper layers. 
%@ Sending message to uppper layers.
30 {curProtocol: %hhu, nextProtocol: %hhu, curUUID: %{public}.16P, conUUID: %{public}.16P, curPktLen: %u, logSeqn: %hhu}
%@ Wrote %u bytes.
%@ Error %@! Could not write data to nw_connection.
State changed for device with no unique ID, ignoring...
Couldn't match default uniqueID to real uniqueID, ignoring...
We didn't find a notify token for %@, adding one...
Found existing notify token %d for name %@
Received device properties state change for device with uniqueID %@ - nearby %@  connected %@  cloud connected %@
Connectivity state changed (old: 0x%x) (new: 0x%x)
Registered device missing public key! -- aborting hash {device: %@}
Local device missing public key! -- aborting hash
Received unsupported query update hash {version: %d, hash: %@}
Query update hash does not match, we should clear {remoteHash: %@, localHash: %@}
Query update hashes match -- doing nothing {version: %d, remoteHash: %@, localHash: %@}
 => Purging Peer ID Cache for: %@   caller URI: %@   service: %@
Received too many registration updates, ignoring {remoteURI: %@, service: %@, localURI: %@, guid: %@}
started policy for %@, devices: %@
checking blackout for %@
repeated fairplay failure blackout lifted (elapse %0.6lf > window %0.1d)
blackout due to repeated fairplay failure (blackout ending in %0.6lf seconds)
Cannot force remove appleID users. { user: %@ }
Waiting on migration -- deferring updateUsers
Migration completed, calling updateUsers
Finished synchronizing SystemAccounts to users {currentUsers: %@, updatedUsers: %@, iCloudAccount: %@, error: %@}
IDSFirewall Update to category %u for GUID %@ addEntries %@
IDSFirewall GUID %@ Not donating to the firewall { wantsFirewallDonation: %@, disallowFirewallAutoEnroll: %@, command: %@
Told to report iMessage spam with localObject %@
Process not entitled to report iMessage spam
Couldn't find iMessage account with alias %@
Told to report iMessage unknown sender with localObject %@
Process not entitled to report iMessage unknown sender
Told to check unknown sender with localObject %@
Process not entitled to check unknown sender
User removed. Prepending transaction %@
Executing temporary phone user transaction %@
Phone user added. Adding transaction %@
Phone user changed. Adding transaction %@
Not provisioning for Home Number because nil authenticationCertificate for user: %@
Not provisioning for Home Number because SIM is still present {user: %@, SIM: %@}
Not provisioning for Home Number because removed SIM is not the default phone SIM on the DSDS phone {user: %@}
Phone user removed. Adding transaction %@
User expired. Prepending transaction %@
retrieved os channel %p from pipe %@
CFWriteStreamCopyProperty(kCFStreamPropertySocketNativeHandle) failed with pipe %@
retrieved native socket %d from pipe %@
fcntl failed with socket %d
releasing pipe %@
Start collecting logs due to %@ Magnet corruption
DontSubmitDataCorruptionToAggd is set. Not submitting to aggd
submitting aggd metric - MagnetDataCorruption
submitting IDSMagnetCorruptionDetailedEvent: correctFramesSinceLastCorruption = %lld, correctRawBytesSinceLastCorruption = %lld, discardedRawBytes = %lld, magnetDataCorruptionRecoveryTimeInMs = %lld ms
Remote device detected data corruption
LMW %d/%d %c =%c (s:%d)
LMW errno %d =%c (s:%d)
BT reports %@ as (%@) interpreting as awake? %@.
Link manager read %d/%d bytes during resync %c
Link manager recv(resync) %zd errno %d - closing connection
Magnet corruption! received %dB with %dB buffer. Resync incoming stream done! content = %@
DontSubmitDataCorruptionToAggd is set. Not submitting MagnetDataCorruptionRecoveryTimeInMs = %lld ms to aggd
submitting aggd metric - MagnetDataCorruptionRecoveryTimeInMs = %lld ms
received %dB with %dB buffer. Continue resyncing incoming stream. content = %@
Link manager recv %zd errno %d - closing connection
LMR2 0/%d/%d/%u %c
Magnet corruption! Link manager received %d byte packet (last recv %d/%u) with bad checksum (old:%04x new %04x). Initiate resync incoming stream! data(%d) %@
LMR %d/%d/%u %c
Magnet corruption! This packet(%dB) (last recv %d/%u) did not decode! data(%d) %@
Link manager received zero byte packet (total recv:%d)
Magnet corruption! Bad packet length found. Initiate resync incoming stream! (last recv %d/%u) data(%d) = %{public}@
ready but already suspended
Ready to write into pipe %@
LMW2 %d/%d %c =%c (s:%d)
Link manager send2 errno %d
BTLink is now suspended
BTLink is now resumed
Custom Test 9 - Packet injected into the BT Layer.
GUID %@ Finished MML %@ with result code: %ld error: %@
GUID %@ Finished Fanout %@ with result code: %ld error: %@
GUID %@ Finished sending to destination %@ { success: %@, code: %ld, error: %@ }
Returning dependent registration property for key { serviceIdentifier: %@, pushToken: %@, foundCandidate: %@, key: %@, value: %@ }
Found trusted key transparency signature { KTLoggableDataSignaturesString: %@ }
Found trusted key transparency signature services { serviceSignatures: %@ }
Returning KT signature for device { serviceIdentifier: %@, pushToken: %@, KTLoggableDataSignaturesString: %@, KTLoggableDataSignature: %@ }
Key transparency flags { serviceIdentifier: %@, pushToken: %@, keyTransparencyFlagsString: %@ }
Returning KT eligibility value { serviceIdentifier: %@, pushToken: %@, keyTransparencyFlagsString: %@, eligibility: %ld }
Checked for iCloud account mismatch { serviceIdentifier: %@, iCloudAccountDoesMatchServiceAccount: %@, iCloudAccount: %@, iCloudAccountError: %@, serviceLoginID: %@, serviceDSID: %@, serviceAccountRegistrationStatus: %@, serviceRegistrationStatus: %ld }
Returning key transparency enrolled URIs { serviceIdentifier: %@, enrolledURIs: %@ }
Returning iCloud sign-in status for key transparency { iCloudAccount: %@, iCloudAccountError: %@ }
Initialized IDSKeyTransparencyVerifier { KTVerifier: %@, application: %@, service: %@, keyTransparencyStore: %@, internalMetricLogger: %@, productionMetricLogger: %@ }
KT Opt In Status: %@
Done fetching local device trust circle eligible service identifiers { eligibleServices: %@, error: %@ }
Key transparency is disabled -- not requesting transparency ticket { serviceIdentifier: %@ }
Local device is not eligible for key transparency due to account status -- not requesting transparency ticket
Local URI is not enrolled in key transparency -- not not requesting transparency ticket { serviceIdentifier: %@, localURI: %@ }
Key transparency is disabled -- not requesting current peer verification results for query { serviceIdentifier: %@ }
Local device is not eligible for key transparency due to account status -- not requesting current peer verification results for query
Key transparency is disabled -- not requesting current verification results for registration { serviceIdentifier: %@ }
Local device is not eligible for key transparency due to account status -- not requesting current verification results for registration
Key transparency is disabled -- not forcing verification results { serviceIdentifier: %@ }
Nuking KT verification state
Done nuking KT verification state { error: %@ }
Key Transparency is disabled for service, not fetching peer verification results. { serviceIdentifier: %@ }
Fetching verification status. { uri: %@, UUID: %@ }
Performing KT verification of query { index: %@, state: %@, entries: %@ }
Calling in to perform KT peer-validation { KTURI: %@, serverKTDataPushTokens: %@
Finished requesting KT ticket for query { KTURI: %@, error: %@, ticket: %@ }
Unable to establish KT URI prefix -- not performing KT verification of query { serviceIdentifier: %@ }
Requesting KT verification results of query { index: %@, ticket: %@ }
Unable to perform peer verification for query { index.URI: %@, ticket: %@ }
Finished KT validate peer result { KTURI: %@, result: %@, error: %@, ticket: %@, optedIn: %@ }
Unable to establish KT URI prefix -- not requesting KT verification of query { serviceIdentifier: %@ }
Forcing KT verification results of trusted devices results { index: %@, ticket: %@ }
Calling in to force KT validation { KTURI: %@ }
Finished KT force validate { KTURI: %@, result: %@, error: %@, ticket: %@, optedIn: %@
Unable to establish KT URI prefix -- forcing KT validation { serviceIdentifier: %@ }
Performing KT verification of registration { index: %@, state: %@, entry: %@ }
Calling in to perform KT enrollment verification { KTURI: %@, KTDataPushToken: %@
Finished requesting KT ticket for registration { KTURI: %@, error: %@, ticket: %@ }
Unable to establish KT URI prefix -- not performing KT verification of registration { serviceIdentifier: %@ }
Requesting KT verification results of registration { index: %@, ticket: %@ }
Finished KT validate enrollment result { KTURI: %@, result: %@, error: %@, ticket: %@, optedIn: %@ }
IDS Service is not eligible for Key Transparency.
Key Transparency application %@ is not eligible for opt-in.
No key transparency applications provided.
No valid key transparency applications provided.
No KT eligible services.
Received KT opt-in result from server {success: %@, error: %@}
Key Transparency is not enabled for service { serviceIdentifier: %@ }
Found opt in manager for service. { serviceIdentifier: %@, optInState: %@ }
No valid opt in manager found for service { serviceIdentifier: %@ }
No service found for KT Application. {KTApplication: %@}
Account is not yet registered for service. No account URI found.
Error fetching verification info from query for own URIs. {Error: %@}
Force syncing KVS for self verification.
Successfully synced KVS.
Failed to sync KVS.
Calling in to note KT synced datas on existing UUID for self-validation { serverKTDataPushTokens: %@, syncedKTDataPushTokens: %@ }
We should try to reregister to heal the account on this device.
KVS is not initialized, we shouldn't heal.
iCloud account and IDS account are mismatched, we shouldn't heal.
Trying to heal account by reregistering.
Currently being rate limited to self heal.
Transparency reports that account key is not yet available, doing nothing.
No matched error found, doing nothing.
Not able to heal at this time.
Checked CloudKit to see if encryption prerequisites have updated. {shouldReregister: %@, error: %@}
Key transparency is disabled -- not enrolling trusted device
Key transparency trust circle is not enabled -- not enrolling trusted device
Local device is not eligible for key transparency on provided services -- not enrolling trusted device
Uploading trusted devices to KVS. { trustedDevices: %@ }
Trusted Device info has no services with data to insert into KVS.
No trusted devices to insert into KVS.
Inserting trusted device with metadata. {trustedDevice: %@, metadata: %@}
Removing entries from KVS. {keys: %@}
KVS entry not of expected type, skipping. {kvsKey: %@}
Failed to create trusted device from KVS entry. {kvsKey: %@}
Fetching expired entries from KVS.
Failed to create device metadata object from KVS entry. {kvsKey: %@}
Found expired entry. {currentTime: %f, trustedDeviceTimestamp: %f, entryKey: %@
Trying to sync KVS.
Successfully synced KVS. {timeInterval: %f
Failed to sync KVS. { timeInterval: %f, error: %@ }
Reporting IDSKTAccountKeyFetchMetric {service: %@, success: %@, isMismatchAccount: %@, regReason: %@, error: %@, metricAttributes: %@}
Logging KT enrollment metric { metric: %@ }
Logging KT verification metric { metric: %@ }
Failed to find verifier for service identifier. { serviceIdentifier: %@ }
Failed to determine KT URI prefix for service identifier! { serviceIdentifier: %@ }
Determined if self-query should be verified { shouldSelfVerify: %@, diceRoll: %@, percentage: %@, bagValue: %@ }
Already have cached invalid results {uri: %@, fromURI: %@, strippedURI: %@, service: %@}
setupNewSession configuration: %@
cleanup session %@ local object %@
Could not find session with uniqueID %@ to clean up, ignoring...
cleanup session instance %@ local object %@
Could not find session with instanceID %@ to clean up, ignoring...
sendInvitation %@
%@ - Could not find session with uniqueID %@ to send invitation, ignoring...
sendInvitation %@ with data %@ declineOnError %@
%@ - Could not find session with uniqueID %@ to send invitation with data to, ignoring...
acceptInvitation %@
%@ - Could not find session with uniqueID %@ to accept invitation, ignoring...
acceptInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to accept invitation with data with, ignoring...
cancelInvitation %@
%@ - Could not find session with uniqueID %@ to cancel invitation, ignoring...
cancelInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to cancel invitation with data with, ignoring...
cancelInvitation %@ with remote ended reason override %u
%@ - Could not find session with uniqueID %@ to cancel invitation with remote ended reason override with, ignoring...
declineInvitation %@
%@ - Could not find session with uniqueID %@ to decline invitation, ignoring...
declineInvitation %@ with data %@
%@ - Could not find session with uniqueID %@ to decline invitation with data with, ignoring...
reconnectSessionWithUniqueID %@
%@ - Could not find session with uniqueID %@ to reconnect session, ignoring...
endSession %@
%@ - Could not find session with uniqueID %@ to end session, ignoring...
endSessionWithData %@ (data length %lu)
%@ - Could not find session with uniqueID %@ to end session with data, ignoring...
sendSessionMessage %@ to session %@ with context %@
%@ - Could not find session with uniqueID %@ to send message to, ignoring...
setAudioEnabled:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set audio enabled, ignoring...
setMuted:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set muted, ignoring...
setPreferences:forSessionWithUniqueID %@ %@
%@ - Could not find session with uniqueID %@ to set preferences, ignoring...
setRequiredCapabilities:requiredCapabilities:forSessionWithUniqueID %@ %@ %@
setInviteTimeout:forSessionWithUniqueID %@ %ld
%@ - Could not find session with uniqueID %@ to set invite timeout, ignoring...
acknowledge sessionID: %@ clientID: %@
%@ - Could not find session with uniqueID %@ to acknowledge session ID, ignoring...
sendAllocationRequest %@
%@ - Operation supported on internal install only
%@ - Could not find session with uniqueID %@ to send allocation request, ignoring...
updateMembers %@, for Group %@, context %@, capabilities %@, triggered locally %@, lightweightStatusDict count:%lu
%@ - Could not find session with uniqueID %@ to update members, ignoring...
manageDesignatedMembers %@, for Group %@, type: %u
removeParticipantIDs %@, for Group %@
%@ - Could not find session with uniqueID %@ to removeParticipantIDs, ignoring...
updateParticipantData %@, for Group %@, context %@
updateParticipantType %u, for Group %@, context %@
%@ - Could not find session with uniqueID %@ to update participantType, ignoring...
joinGroupSession %@, options: %@
%@ - Could not find session with uniqueID %@ to join group session, ignoring...
leaveGroupSession %@, participantInfo: %@ options: %@
%@ - Could not find session with uniqueID %@ to leave group session, ignoring...
requestActiveParticipants for group session: %@
%@ - Could not find session with uniqueID %@ for requestActiveParticipants, ignoring...
requestURIsForParticipantIDs for group session: %@
registerPluginForGroup %@, options: %@
%@ - Could not find session with uniqueID %@ to register plugin, ignoring...
unregisterPluginForGroup %@, options: %@
%@ - Could not find session with uniqueID %@ to unregister plugin, ignoring...
requestEncryptionKeyForGroup %@, for %lu participants %@
%@ - Could not find session with uniqueID %@ to request encryption keys, ignoring...
createAliasForParticipantID %llu salt %@
getParticipantIDForAlias %llu salt %@
IDSReportApprovedTempUser
RealTimeEncryption
IDSNRDeviceIdentifier
NSSecureCoding
NSCoding
NSCopying
IDSNRDeviceManager
IDSNRDeviceProperties
IDSNRDevicePairingProperties
IDSNRLinkPreferences
IDSNRBluetoothLinkPreferences
IDSNRDevicePreferences
IDSNRDeviceMonitor
IDSNREndpoint
IDSOpportunisticCache
IDSDeviceHeartbeatCenter
IMSystemMonitorListener
IDSBTDatagramLink
IDSLink
NSObject
IDSUserProperties
IDSSIMDeactivationInfoMessage
IDSSIMResponder
IDSNRDeviceBridge
IDSNRDeviceMonitorDelegate
IDSEndpointSubscription
IDSPublicIdentityCache
IDSPreflightMessage
IDSUTunPeerServiceMap
HomeKit
IDSDuetInterface
IDSPeerIDQuery
IDSPeerIDPushHandler
IDSActivityMonitorStateManager
IDSActivityPushListenerDelegate
IDSDeviceConnectionInfo
IDSAccountIdentityElector
IDSServerAuthenticatePhoneRequest
IDSServerAuthenticatePhoneResponse
IDSRegistrationKeyManagerKeyPairProvider
IDSRegistrationKeyManager
IDSRegistrationKeyConfig
IDSFrequentURISuggester
IDSDeviceConnection
IDSFanoutFactoryComponent
IDSMPFullDeviceIdentityContainerEncrypter
IDSMPFullDeviceIdentitySigner
IDSPerServiceApplicationKeyConfig
IDSPerServiceApplicationKeyManager
IDSMessageMetricReporter
IDSClientChannelData
IDSClientChannel
IDSClientChannelManager
IDSSocketPairConnection
IDSSocketPairConnectionProtocol
IDSSystemAccount
IDSSystemAccountAdapter
IDSOpportunisticDeliveryController
IDSDSessionMessenger
IDSServiceStatistics
IDSHomeKitCloudRelayUserAccessTokensMessage
IDSKTAccountKeyResult
IDSKTAccountKeyManager
IDSReportGeneralSpamMessage
IDSPluginNanoRegistryProtocol
IDSNanoRegistryPluginManager
IDSCertifiedDeliveryReplayCommitter
IDSHeartbeatCenter
IDSProfileGetDefaultInvitationContext
IDSMMLMessage
IDSActivityDescription
IDSUTunPeer
IDSUTunConnectionDelegate
IDSWPLinkManagerConnectivityDelegate
IDSAuthenticateMessage
IDSKeychainWrapper
IDSSecOTRSession
IDSMMCSUploadResult
IDSDXPCOpportunistic
IDSXPCOpportunistic
IDSRegistrationController
IDSSMSRegistrationCenterListener
IDSAppleIDRegistrationCenterListener
IDSRegistrationCenterListener
IDSEndpointResolverComponent
IDSPeerAggregateMessage
IDSProtoKeyTransparencyLoggableData
IDSGroupStatusNotificationParameters
IDSURIEncrypter
IDSAsyncEncrypter
IDSAsyncDecrypter
IDSAsyncSignatureVerifier
IDSDeviceIDEncrypter
IDSSyncAsyncEncrypter
IDSSyncEncrypter
IDSSyncAsyncDecrypter
IDSSyncDecrypter
IDSPreflightStack
IDSDSession
_IDSSessionConnectionDelegate
IDSSocketPairConnectionDelegate
IDSBaseSocketPairConnectionDelegate
IDSRealTimeEncryptionDelegate
IDSDSessionKeyValueDeliveryDelegate
IDSServerDesiredEncryptedDataSet
IDSServerDesiredMaterialSet
IDSIncomingMessageBroadcast
IDSHashingDeviceIdentityEncrypter
IDSProtoKeyTransparencyTrustedDeviceMetadata
IDSNGMSwizzler
IDSKTAnalyticsLogger
CUTMetricLogger
IDSFanoutSender
IDSMadridAckTrackerDelegate
IDSAPNSAckTrackerDelegate
IDSSigningEncrypter
IDSSyncAsyncSigner
IDSAsyncSigner
IDSSyncSigner
IDSPersistentMapMetadata
IDSPersistentMapMergePolicy
IDSPersistentMap
IDSDXPCKeyTransparency
IDSXPCKeyTransparency
IDSInvitationStore
IDSFirewallNotificationCenter
UNUserNotificationCenterDelegate
IDSMissingMessageMetricReporter
IDSDGroupStatusNotificationController
IDSDGroupStatusNotificationControllerBroadcaster
IDSProfileMessage
IDSEncrypterBuilder
IDSDXPCInternalTesting
IDSXPCInternalTesting
IDSTrafficMonitor
IDSTemporaryPhoneAlertManager
IDSQuickSwitchHelper
IDSAccountSync
IDSEncryptedData
IDSTemporaryPhoneUserExpirationTimerInfo
IDSTemporaryPhoneUserExpirationManager
IDSUserStoreListener
AppleCare
IDSKeychainKeyElectionStore
IDSClientData
IDSClientDataRegistrationKeyManager
IDSClientDataResult
IDSClientDataGenerator
IDSActivityScribeMessage
IDSDAccountMetrics
IDSAccountRepair
IDSMultiplexerGroupSessionTransport
IDSMultiplexerTransport
IDSGroupSessionMultiplexer
IDSProtoKeyTransparencyTrustedServiceSignature
IDSBTLELink
CBPeripheralDelegate
IDSValidateCredentialsMessage
IDSRapportDeliveryController
IDSRapportClientDelegate
IDSRapportDeliveryControllerRapportClient
IDSPeerMessage
IDSUTunControlMessage_Hello
IDSDRegistrationPushManager
IDSRegistrationPushHandlerListener
IDSDRegistrationControl
SpamReporting
IDSKTGossipManager
IDSDGroupContextDataSource
ENGroupContextDataSource
IDSMPConversationGroupEntry
IDSCloudKitKeyTransparencyDeviceRecord
IDSCloudKitKeyTransparencyStore
IDSPairedDeviceKeychainSchema
IDSDaemonProtocol
IDSDaemonListenerProtocol
IDSDaemon
IDSPushHandlerDelegate
IDSUTunDeliveryControllerDelegate
IDSDuetInterfaceDelegate
IDSRapportDeliveryControllerDelegate
IDSPairingManagerDelegate
IDSRegistrationHashProcessorDelegate
IDSDaemonMIGInterface
IDSQuickRelayAllocatorQueryPolicy
IDSPeerAggregatableMessage
IDSDGroupContextNotifyingObserver
ENGroupContextObserverMiddleware
ENGroupContextMiddleware
IDSLinkPreferencesManager
IDSProtoKeyTransparencyTrustedDevice
IDSEncryptionQueue
IDSEncryptionAsyncQueue
IDSEncryptionSyncQueue
IDSEncryptionQueueManager
IDSMessageHashChecker
IDSDXPCFirewall
IDSXPCFirewall
IDSActivityUpdatePush
IDSActivityPushListener
IDSMessageFactoryComponent
IDSEngramKeyStore
IDSConnectivityMonitor
IDSUTunDeliveryControllerConnectivityDelegate
IDSDXPCReunionSync
IDSXPCReunionSync
IDSFamilyManager
IDSUTunControlChannel
IDSUTunControlChannelIdentityPair
IDSProvisionTemporaryPhoneMessage
IDSTTLCache
IDSTTLCacheItem
IDSRegistrationReasonTracker
IDSGroupMasterKeyMaterialCollection
IDSGroupMasterKeyMaterialCache
IDSProfileValidateInvitationContext
IDSTemporaryPhoneUser
IDSUser
IDSPeerIDKey
IDSValidationSession
IDSBaseMessageSigningSession
IDSValidationSigningResult
IDSDecryptionMetadata
IDSEncryptionMetadata
Dependency
IDSDAccountControllerDeviceSupport
IDSDAccountController
IDSProvisionPseudonymMessage
IDSMultiplexerLocalTransport
IDSLocalMultiplexer
IDSUDPGlobalLink
IDSLinkDelegate
IDSAppleUser
Registration
IDSWPLinkManager
WPContinuityDelegate
IDSWPPacketSendingProtocol
IDSEncryptionComponent
IDSServerDesiredEncryptedDataBlobMaterialSet
PhoneNumberValidation
IDSDAccount
IDSDXPCDaemonServer
NSXPCListenerDelegate
IDSDXPCDaemonCollaboratorProvider
IDSRegistrationConductor
ExternalTriggers
IDSDAccountControllerDelegate
IDSRegistrationControllerListener
Notifications
IDSDeviceCertificationRepairDelegate
IDSCTAdapterListener
RestoreTracking
IDSPreflightStackStore
IDSSMSRegistrationCenter
IDSPhoneNumberValidationRequestor
IDSPhoneNumberValidationListener
IDSGroupPutMessage
IDSRestrictions
IDSGenericConnection
IDSPairingManager
IDSCoalesceMessageQueue
IDSCoalesceMessageQueueManager
IDSPhoneUser
IDSGroupServer
IDSGroupServerPushHandler
IDSEncryptionHelpers
IDSAppleIDNotification
IDSAppleIDNotificationCenter
IDSActivityStateProvider
IDSFirewallDatabase
Account
IDSSession
IDSDeliveryController
IDSCoalesceMessageQueueManagerDelegate
IDSCheckUnknownSenderMessage
IDSConnectivityMonitorMetric
CUTRTCMetric
CUTMetric
IDSConnectivityMonitorMetricProperties
IDSDRegistrationListener
IDSLocalDeliveryMessage
IDSHCInfo
IDSUTunDeliveryController
IDSNRDeviceBridgeDelegate
IDSUTunPeerDelegate
IDSContactsUtilities
IDSGroupStableKeyMaterialCollection
IDSGroupStableKeyMaterialCache
IDSEntitlements
IDSGroupContextDaemonProtocol
IDSGroupContextDataSourceDaemonProtocol
IDSGroupContextCacheMiddlewareDaemonProtocol
IDSGroupContextObserverDaemonProtocol
IDSDaemonXPCInterface
IDSDGroupContextNotifyingObserverDelegate
IDSAPNSAckTracker
IDSPeerIDValue
IDSDSessionController
IDSDataMigrationTracker
IDSDSignInResponder
IDSDSignInResponderDeviceSupport
IDSServerStorageStateMachine
IDSSIMPhoneUserSynchronizer
IDSUserStoreProvider
IDSPublicKeyStorageCache
IDSPublicKeyStorage
IDSUserDescription
IDSUserStore
IDSAuthenticateUsersResponse
IDSAuthenticateUsersMessage
IDSDXPCActivityMonitor
IDSActivityMonitorStateManagerListener
IDSXPCActivityMonitor
IDSPairedDevice
IDSRegistrationMessage
IDSAbsintheSignedMessage
IDSRegistrationKeychainManager
KeychainManagerUtilities
IDSDaemonCapabilities
IDSMessageDeliveryFactory
ProviderExtensions
IDSRegistrationCenter
IDSRegistrationCenterMessageDelivery
IDSEngramKeyStoreListener
IDSIDQueryMessage
IDSLinkManager
IDSBTLinkManagerDelegate
IDSWPLinkManagerDelegate
IDSCellularLinkDelegate
IDSRapportClient
IDSTTLCacheDelegate
IDSKTGossipPolicySpecification
IDSKTGossipPolicy
IDSUTunConnection
IDSPhoneNumberValidationStateMachine
IDSPhoneNumberValidationStateMachineMessageDelivery
IDSPhoneNumberValidationStateMachineLockdownManager
IDSPhoneNumberValidationStateMachineDeviceSupport
IDSPhoneNumberIdentification
IDSCTPNRDelegate
Collaborators
IDSGetDependentRegistrationsCenter
IDSOTRSessionInfo
IDSOTRController
IDSMMLBuilder
IDSServerStorageMetricCollector
IDSGroupSendAheadObserver
IDSProtoKeyTransparencyTrustedServiceSignatures
IDSDXPCServerMessaging
IDSXPCServerMessaging
IDSServerMessage
DirectMessaging
IDSOTRKeyStorage
_IDSSessionConnectionInfo
IDSIDStatusDependencyProvider
IDSIDStatusQueryController
IDSDSessionAWDMetrics
IDSDMessageStoreMigrator
IDSServerDesiredKeyMaterialSet
IDSRegistrationPushHandler
IDSBagUtilities
IDSPublicIdentityData
IDSDXPCDaemon
IDSXPCDaemon
QRSelfAllocationArray
TimerWrapper
QRStreamInfo
QRAllocation
IDSAllocateResponseWrapper
IDSQuickRelayAllocator
IDSBlockRetryHandler
IDSPhoneNumberValidationModeArbiter
IDSAsyncMapper
IDSRegistrationCacheStateTransportPolicy
IDSValidationCertificateMessage
IDSBTLinkManager
CBCentralManagerDelegate
CBPeripheralManagerDelegate
CBScalablePipeManagerDelegate
IDSCountdown
IDSKTOptInStatusMessage
IDSNRDevicePreferencesHandler
IDSReportSpamMessage
IDSEncryptionController
IDSOTREncrypter
_IDSSessionConnection
ConferenceDelegate
AVConferenceDelegate
IDSDSessionKeyValueDeliveryLocalEntry
IDSDSessionKeyValueDelivery
IDSXPCGroupSessionKeyValueDelivery
IDSGroupEncryptionController
IDSPeerAccessoryMessage
IDSHomeKitCloudRelayAdminAccessTokenMessage
IDSAckStateMachine
IDSSocketPairConnectionTCPInfo
IDSNGMKeyLoadingErrorContainer
IDSNGMKeyLoadingMetric
IDSDXPCPairedDeviceManager
IDSXPCPairedDeviceManager
IDSDSessionInvitationManager
IDSDGroupContextController
IDSDAccountSendMessageContext
Messaging
IDSProtoKeyTransparencyTrustedService
IDSCurrentDevice
IDSEndpointEncrypter
IDSSyncAsyncSignatureVerifier
IDSSyncSignatureVerifier
IDSDAccountRegistrationListener
IDSHomeKitCloudRelayConsentTokensMessage
IDSDOutgoingMessage
IDSDIncomingMessage
IDSDMessageStore
IDSDMessageStoreMap
IDSQuickRelayAllocateMessage
IDSRegistrationProperties
IDSParticipantsCacheEntryPointer
IDSPrioritizedTokenList
IDSDSessionActiveParticipantsCache
IDSLocalDeliveryQueue
IDSDSessionDefaultAvailabilityCheck
IDSDSessionAvailabilityCheck
IDSDSessionSharedState
IDSValidationQueueItem
IDSValidationInfo
IDSValidationQueue
IDSStatusQueryQueue
IDSDaemonMIGQueryInterface
IDSPersistentMapKeychainPersister
IDSPersistentMapPersister
IDSPersistentMapDiskPersister
IDSPersistentMigratingPersister
IDSMadridEndpointFilterComponent
IDSDeliveryPipelineParameter
IDSEndpointResolverParameter
IDSPipelineParameter
IDSMadridEndpointFilterParameter
IDSFirewallEndpointDonationParameter
IDSEncryptionParameter
IDSMessageFactoryParameter
IDSFanoutFactoryParameter
IDSDXPCRegistration
IDSXPCRegistration
IDSPeerIDManagerEndpointQueryListener
IDSPeerIDManager
IDSPersistentMapDelegate
IDSPeerIDQueryHandlerDelegate
IDSGenericConnectionID
IDSSockAddrWrapperPair
IDSConnectionContext
IDSUTunTimingEventOutgoing
IDSUTunTimingEvent
IDSUTunTimingEventIncoming
IDSUTunTimingEventKernelTest
IDSUTunTimingLogger
IDSUTunController
IDSPeerIDQueryHandler
IDSPhoneUserCredential
IDSUserCredential
IDSAttachmentEncryptionParameter
IDSMMCSUploader
IDSDXPCGroupSessionKeyValueDeliveryProvider
IDSXPCGroupSessionKeyValueDeliveryProvider
IDSAppleIDRegistrationCenter
IDSAppleIDRegistrationCenterMessageDelivery
IDSTemporaryPhoneUserCredential
IDSPipelineComponent
IDSTransferServicesController
IDSPairedDeviceKeychainPersister
IDSPairedDevicePersister
IDSKTRegistrationDataConfig
IDSKTRegistrationDataManager
Continuity
IDSDaemonPriorityQueueController
IDSHomeKitCloudRelayServiceUserIDsMessage
IDSUserAccountSynchronizer
IDSRegistration
IDSDeviceConnectionAWDMetrics
IDSDServiceController
IDSPairedDeviceRepository
IDSGroupGetMessage
IDSTapToRadarPushPayload
IDSReportUnknownSenderMessage
IDSGroupServerKeyElectionStoreItem
IDSGroupServerKeyElectionStore
IDSDatabase
IDSRealTimeEncryptionIdentity
IDSDXPCPairing
IDSXPCPairing
IDSTransparentEndpointViewer
IDSInitializeValidationMessage
IDSRestoreMonitor
IDSProfileGetHandlesMessage
IDSFirewallStore
IDSPhoneUserRegistry
IDSPhoneUserRegistryDeviceSupport
IDSPhoneUserAuthenticationCertificate
IDSProtoApplicationKeyEntry
IDSPeerIDQueryContext
IDSRegistrationKeyManagerIdentityDataSource
IDSNWSocketPairConnection
IDSServerDesiredPreKeyMaterialSet
IDSDevicePropertiesStateNotifier
IDSRegistrationHashProcessor
IDSDevicePolicyController
IDSSystemAccountUserSynchronizer
IDSUserManagement
IDSFirewallEndpointDonationComponent
iMessageSpam
IDSDeviceCertificationRepair
IDSTemporaryPhoneUserAddTransaction
IDSTemporaryPhoneUserTransaction
IDSTemporaryPhoneUserRemoveTransaction
IDSTemporaryPhoneUserSynchronizer
IDSTemporaryPhoneUserExpirationManagerDelegate
IDSGetSIMAuthTokenMessage
IDSBTLink
NSStreamDelegate
IDSMadridAckTracker
IDSKeyTransparencyTrustedDeviceEnrollmentResult
IDSKeyTransparencyIndex
IDSKeyTransparencyVerificationState
IDSKeyTransparencyEntry
IDSKeyTransparencyRegistrationDataSource
IDSKeyTransparencyVerifier
IDSKeyTransparencyPolicy
IDSGetDependentRegistrationMessage
IDSAgentUserDefaults
IDSPeerIDQueryDataSource
IDSPeerIDQueryHandlerDataSource
IDSServer
Session
IDSGroupAgent
@16@0:8
@24@0:8^{_NSZone=}16
B16@0:8
i16@0:8
d16@0:8
v24@0:8@16
q16@0:8
v24@0:8q16
v16@0:8
@"NSString"
v40@0:8@16@24@32
v32@0:8@16@24
@24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@"NSUUID"
v48@0:8@16@24@32@?40
Q16@0:8
v24@0:8Q16
v20@0:8B16
@"NSData"
@"NSNumber"
@"IDSNRBluetoothLinkPreferences"
@"IDSNRDeviceIdentifier"
@"NSSet"
@40@0:8@16@24@32
@36@0:8@16@24C32
C16@0:8
@32@0:8@16@24
@24@0:8^@16
B32@0:8@16^@24
v24@0:8@?16
B24@0:8^@16
B40@0:8@16@24^@32
@"NSMutableDictionary"
@"IDSKeychainWrapper"
@"IDSFrequentURISuggester"
v32@0:8d16@24
@"IMTimer"
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
Q40@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16@24@32
Q44@0:8^^{?}16i24@28@36
@28@0:8d16B24
Q40@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16@"NSString"24@"NSString"32
Q44@0:8^^{?}16i24@"NSString"28@"NSString"36
@"NSString"28@0:8d16B24
@"NSDictionary"16@0:8
v24@0:8@"NSString"16
@"<IDSLinkDelegate>"16@0:8
v24@0:8@"<IDSLinkDelegate>"16
@"<IDSLinkDelegate>"
@20@0:8B16
@"NSArray"
@48@0:8@16@24@32@40
v28@0:8i16@?20
@"IDSDAccountController"
@"IDSDServiceController"
@"IDSRegistrationController"
@"IDSRestrictions"
@"NSDate"
v28@0:8@16B24
v28@0:8@16C24
v28@0:8@"IDSNRDeviceMonitor"16B24
v28@0:8@"IDSNRDeviceMonitor"16C24
@36@0:8@16@24B32
v20@0:8C16
@"<IDSNRDeviceBridgeDelegate>"
@"NSObject<OS_dispatch_queue>"
@"IDSNRDeviceMonitor"
@?16@0:8
@"IDSURI"
B56@0:8@16@24@32@40^@48
@48@0:8@16@24@32^@40
@"IDSKVStore"
B24@0:8^[16C]16
B44@0:8@16S24^[16C]28^B36
B44@0:8S16^@20^[16C]28^B36
B60@0:8@16^S24B32^B36^[16C]44^B52
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
[16C]
@"NSMapTable"
[8[16C]]
v48@0:8@16@24@32@40
v56@0:8@16@24@32@40@48
v28@0:8B16@20
@32@0:8@16q24
v56@0:8@16q24@32@40@?48
@"<IDSDuetInterfaceDelegate>"
@"NSMutableSet"
@"NSData"16@0:8
v32@0:8@"IDSActivityPushListener"16@"IDSActivityUpdatePush"24
@64@0:8@16@24@32@40@48@56
v40@0:8@16@24@?32
@"<IDSActivityStateProvider>"
@"IDSActivityPushListener"
@"FTMessageDelivery"
@"IDSPeerIDManager"
^{IDSPortMap=[1024Q]QS}16@0:8
^{SimpleUInt32ToObjectTable=i^{SimpleUInt32ToObjectTableElement}i}16@0:8
^[16C]16@0:8
v24@0:8^[16C]16
S16@0:8
v20@0:8S16
v32@0:8@16^B24
v24@0:8d16
v20@0:8i16
@"IDSSockAddrWrapper"
@"IDSUTunControlChannel"
[2048I]
{IDSPortMap="ports"[1024Q]"totalAllocatedPorts"Q"lastAssignedPort"S}
{SimpleUInt32ToObjectTable="tableSize"i"elements"^{SimpleUInt32ToObjectTableElement}"elementCount"i}
@"NSMutableArray"
{IDSDCI_OutgoingPacketList="genericConnection"[64@]"sources"[64^v]"destinations"[64^v]"upperProtocols"[64C]"bytes"[64^v]"bytesLengths"[64Q]"numPackets"I"nextPacket"I}
@"NSObject<OS_nw_service_connector>"
v32@0:8@16@?24
@40@0:8@16q24^@32
@"IDSKeychainKeyElectionStore"
@"IDSCloudKitKeyElectionStore"
@"IDSGroupServerKeyElectionStore"
@"IDSPhoneUser"
@40@0:8q16@24@32
@"IDSAuthenticationCertificate"
v64@0:8@16^^{__SecKey}24^^{__SecKey}32^@40^B48^B56
v64@0:8@"NSString"16^^{__SecKey}24^^{__SecKey}32^@40^B48^B56
v48@0:8^@16^@24q32^B40
B20@0:8B16
B36@0:8@16q24B32
@72@0:8@16@24@32@40B48B52@56@64
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}20@0:8S16
@24@0:8Q16
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}28@0:8S16^@20
@28@0:8S16^@20
@40@0:8@16q24q32
@20@0:8I16
B32@0:8@16@24
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16@0:8
B24@0:8S16S20
B32@0:8@16q24
@"NSRecursiveLock"
@"IDSNGMKeyLoadingErrorContainer"
@"IDSRegistrationKeyConfig"
@"IMSystemMonitor"
@"IDSRegistrationKeyManagerIdentityDataSource"
@"IDSPerServiceApplicationKeyManager"
@"IDSRateLimiter"
@"<IDSRegistrationKeyManagerKeyPairProvider>"
@"IDSKTRegistrationDataManager"
v24@0:8^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}16
@"IDSMPFullDeviceIdentityContainer"
@"IDSNGMKeyRollingTicket"
@"IDSMPFullLegacyIdentity"
^{__SecKey={__CFRuntimeBase=QAQ}^{__SecKeyDescriptor}^v}
v76@0:8@16B24@28@36@44@52@60@68
@64@0:8@16@24@32Q40q48@56
@56@0:8@16@24@32@40^@48
@56@0:8@16@24@32^@40^@48
@52@0:8@16@24^@32@40B48
@44@0:8@16@24@32B40
@"NSData"56@0:8@"NSData"16@"NSDictionary"24@"IDSMPPublicDeviceIdentityContainer"32@"NSString"40^@48
@"NSData"56@0:8@"NSData"16@"NSDictionary"24@"IDSMPPublicDeviceIdentityContainer"32^@40^@48
@"NSData"52@0:8@"NSData"16@"IDSMPPublicDeviceIdentityContainer"24^@32@"NSString"40B48
@"CUTUnsafePromise"44@0:8@"NSData"16@"IDSMPPublicDeviceIdentityContainer"24@"NSString"32B40
@44@0:8@16S24@28^@36
B56@0:8@16@24q32@40^@48
B56@0:8@16@24^{__SecKey=}32@40^@48
@"NSData"40@0:8@"NSData"16q24^@32
@"NSData"44@0:8@"NSData"16S24@"IDSSigningKeyDiversifier"28^@36
@"NSArray"40@0:8@"NSArray"16q24^@32
B56@0:8@"NSData"16@"NSData"24q32@"IDSNGMPublicDeviceIdentity"40^@48
B56@0:8@"NSData"16@"NSData"24^{__SecKey=}32@"IDSSigningKeyDiversifier"40^@48
@60@0:8@16@24@32@40@48B56
@"IDSRegistrationKeyManager"
v24@0:8^{__SecKey=}16
^{__SecKey=}16@0:8
^{__SecKey=}
B20@0:8S16
^{__SecKey=}20@0:8S16
^{__SecKey=}28@0:8S16^@20
B28@0:8@16S24
v40@0:8^B16^B24^B32
v28@0:8S16^@20
@56@0:8@16@24@32@40@48
v80@0:8@16@24@32@40B48B52@56@64@72
@40@0:8*16I24r*28I36
@36@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16r*24I32
^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16@0:8
r*16@0:8
I16@0:8
^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}
B40@0:8r^v16I24r^v28I36
B40@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16r^v24I32B36
B44@0:8*16I24r^v28I36B40
B32@0:8@16@?24
@?24@0:8@16
B28@0:8@16B24
v32@0:8@?16@?24
B24@0:8@"IDSSocketPairMessage"16
B28@0:8@"IDSSocketPairMessage"16B24
v24@0:8@"IDSSocketPairMessage"16
v32@0:8@?<@"NSData"@?@"NSData"@"NSString">16@?<@"NSData"@?@"IDSSocketPairMessage">24
@"NSSet"16@0:8
@60@0:8i16@20@28q36@44Q52
v20@0:8I16
q32@0:8*16Q24
@"NSMutableData"
@"<IDSSocketPairConnectionDelegate>"
@"IDSStallDetector"
v48@0:8@16@24@?32@?40
v40@0:8@16@?24@?32
@48@0:8@16@24@?32^@40
@40@0:8@16@?24^@32
@40@0:8@16@24@?32
v64@0:8@16@24@32@40@48@?56
@"IDSOpportunisticCache"
v64@0:8@16@24@32@40@?48@?56
v76@0:8@16@24@32B40@44@52@?60@?68
B40@0:8@16@24@32
[60C]
@"IDSPushHandler"
@"<IDSDSession><IDSDSessionAWDMetrics>"
@"IDSDSessionSharedState"
@"NSDictionary"
{os_unfair_lock_s=I}16@0:8
v20@0:8{os_unfair_lock_s=I}16
@"IDSServerBag"
v24@0:8#16
@"<IDSPluginNanoRegistryProtocol>"
v48@0:8@?16@24@32@40
B32@0:8@16^d24
@"CUTDeferredTaskQueue"
@40@0:8@16@24Q32
@"NSMutableOrderedSet"
v96@0:8@16@24@32@40@48@56B64B68@72@80B88B92
v28@0:8@16I24
v28@0:8@"IDSUTunConnection"16B24
v96@0:8@"IDSUTunConnection"16@"IDSProtobuf"24@"NSString"32@"NSNumber"40@"NSString"48@"NSNumber"56B64B68@"NSString"72@"NSString"80B88B92
v96@0:8@"IDSUTunConnection"16@"NSData"24@"NSString"32@"NSNumber"40@"NSString"48@"NSNumber"56B64B68@"NSString"72@"NSString"80B88B92
v56@0:8@"IDSUTunConnection"16@"NSString"24@"NSString"32@"NSNumber"40@"NSString"48
v28@0:8@"IDSUTunConnection"16I24
v24@0:8@"IDSUTunConnection"16
v36@0:8@16@24B32
v36@0:8@"IDSWPLinkManager"16@"NSString"24B32
v32@0:8@"IDSWPLinkManager"16@"NSString"24
B32@0:8@"IDSWPLinkManager"16@"NSString"24
v40@0:8@"IDSWPLinkManager"16@"NSString"24@"NSError"32
@40@0:8@16q24B32I36
@52@0:8@16@24@32B40B44B48
v36@0:8@?16q24I32
B40@0:8I16q20I28q32
B36@0:8q16I24q28
v40@0:8@16^Q24^Q32
v28@0:8q16B24
v40@0:8@16q24q32
@36@0:8q16q24I32
B24@0:8q16
q24@0:8@16
v32@0:8@16B24B28
v40@0:8@16q24@?32
@"IDSUTunConnection"
@"<IDSUTunPeerDelegate>"
@"IMDispatchTimer"
@"NSObject<OS_dispatch_source>"
@"IDSUTunPeerServiceMap"
B28@0:8@16i24
@24@0:8q16
I24@0:8q16
q20@0:8I16
@32@0:8@16^@24
B52@0:8@16@24B32q36^@44
B56@0:8@16@24B32B36q40^@48
v48@0:8@16@24q32@?40
B40@0:8@16q24^@32
q24@0:8^@16
@24@0:8^{_SecOTRSession=}16
^{_SecOTRSession=}16@0:8
v24@0:8^{_SecOTRSession=}16
^{_SecOTRSession=}
@"IDSEncryptedData"
v24@0:8@?<v@?@"NSDictionary">16
@"IDSXPCConnection"
B20@0:8i16
B32@0:8@16i24B28
v40@0:8@16@24q32
v48@0:8@"IDSSMSRegistrationCenter"16@"IDSRegistration"24@"NSString"32@"NSString"40
v40@0:8@"IDSSMSRegistrationCenter"16@"IDSRegistration"24q32
v24@0:8@"IDSSMSRegistrationCenter"16
v60@0:8@16@24@32@40@48B56
v48@0:8@16@24q32@40
v32@0:8@"IDSAppleIDRegistrationCenter"16@"IDSRegistration"24
v60@0:8@"IDSAppleIDRegistrationCenter"16@"IDSRegistration"24@"NSString"32@"NSString"40@"NSDictionary"48B56
v48@0:8@"IDSAppleIDRegistrationCenter"16@"IDSRegistration"24q32@"NSDictionary"40
v32@0:8@"IDSRegistrationCenter"16@"IDSRegistration"24
v48@0:8@"IDSRegistrationCenter"16@"IDSRegistration"24q32@"NSDictionary"40
v32@0:8@"IDSRegistrationCenter"16@"NSArray"24
v40@0:8@"IDSRegistrationCenter"16@"IDSRegistration"24@"NSArray"32
v24@0:8@"IDSRegistrationCenter"16
v64@0:8@16@24B32B36@40@48@56
B40@0:8@16^B24^B32
v40@0:8@16q24@32
v36@0:8@16B24q28
v32@0:8@16q24
@20@0:8i16
@"IDSUserStore"
@48@0:8@16@24@32Q40
@72@0:8@16@24q32@40@48@56@64
{?="ktVersion"b1"ngmVersion"b1}
v48@0:8@"NSData"16@"NSDictionary"24@"<IDSEncryptionAsyncQueue>"32@?<v@?@"NSData"@"NSError"@"IDSEncryptionMetadata">40
v60@0:8@16@24@32B40@44@?52
v60@0:8@"NSData"16@"NSString"24@"<IDSEncryptionAsyncQueue>"32B40@"IDSCertifiedDeliveryReplayKey"44@?<v@?@"NSData"@"NSDictionary"@"NSError"@"IDSDecryptionMetadata">52
v56@0:8@16@24q32@40@?48
v56@0:8@"NSData"16@"NSData"24q32@"<IDSEncryptionAsyncQueue>"40@?<v@?B@"NSError">48
@52@0:8@16@24@32@40B48
v68@0:8@16@24@32@40@48I56@60
@24@0:8^B16
@48@0:8@16@24^@32^@40
@28@0:8B16^B20
@"IDSCertifiedDeliveryReplayCommitter"
@"IDSPublicIdentityCache"
@"<IDSMPFullDeviceIdentityContainerEncrypter>"
@"<IDSMPFullDeviceIdentitySigner>"
@"IDSSigningKeyDiversifier"
@56@0:8@16@24^@32@40^@48
@"NSData"56@0:8@"NSData"16@"NSDictionary"24^@32@"<IDSEncryptionSyncQueue>"40^@48
@52@0:8@16@24B32@36^@44
@"NSData"52@0:8@"NSData"16@"NSString"24B32@"<IDSEncryptionSyncQueue>"36^@44
@44@0:8@16@24B32^@36
@"IDSPublicKeyStorage"
v36@0:8@16B24@28
v36@0:8@"_IDSSessionConnection"16B24@"NSError"28
v32@0:8@"_IDSSessionConnection"16@"NSError"24
v32@0:8@"_IDSSessionConnection"16@"NSData"24
v36@0:8@16@24I32
v36@0:8@"IDSSocketPairConnection"16@"NSData"24I32
v32@0:8@"IDSSocketPairConnection"16@"IDSSocketPairMessage"24
v24@0:8@"IDSSocketPairConnection"16
v32@0:8@"IDSBaseSocketPairConnection"16@"NSData"24
v24@0:8@"IDSBaseSocketPairConnection"16
v32@0:8@"NSDictionary"16@"IDSDestination"24
v24@0:8@"IDSGroupEncryptionKeyMaterial"16
v24@0:8@"NSArray"16
v24@0:8@"NSError"16
v24@0:8@?<v@?B>16
*16@0:8
@24@0:8d16
v32@0:8Q16@24
v44@0:8@16^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}24r*32I40
v28@0:8i16@20
@36@0:8r^v16I24^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}28
v28@0:8i16i20i24
@28@0:8@16i24
v28@0:8@16i24
v24@0:8i16B20
B48@0:8@16^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}24@32@40
v52@0:8@16c24@28@36@44
v36@0:8@16@24c32
v28@0:8@16S24
v40@0:8@16c24@28C36
v32@0:8@16B24c28
v36@0:8@16@24S32
v40@0:8@16Q24@32
v32@0:8@16c24B28
v36@0:8@16@24C32
v52@0:8@16@24@32@40I48
v52@0:8@16@24@32@40B48
v52@0:8@16@24@32B40@44
v48@0:8S16@20B28@32@40
@32@0:8@16Q24
v32@0:8@16d24
v36@0:8@16i24@28
v28@0:8C16@?20
Q32@0:8Q16@24
v24@0:8i16i20
@"<IDSDSessionAvailabilityCheck>"
@"IDSBaseSocketPairConnection"
@"IDSClientChannel"
@"IDSConnectionContext"
@"IDSGroupStatusNotificationParameters"
[8^{?}]
@"IDSMultiplexerGroupSessionTransport"
@"IDSGroupEncryptionKeyManager"
@"IDSGroupSessionDataCryptor"
@"IDSDSessionInvitationManager"
@"IDSDSessionMessenger"
@"IDSGFTMetricsCollector"
@"IDSDSessionKeyValueDelivery"
@"IDSDGroupStatusNotificationController"
@44@0:8@16i24@28Q36
@"IDSRealTimeEncryptionIdentity"
@56@0:8@?16B24@28q36@44I52
@44@0:8@16@24B32^@?36
@"IDSMPFullDeviceIdentityContainerEncrypter"
@"IDSMessageHashChecker"
{?="timestamp"b1"status"b1}
v24@0:8@"<CUTMetric>"16
v40@0:8@"IDSDeliveryContext"16@"NSArray"24@"NSString"32
v24@0:8@"IDSDeliveryContext"16
v32@0:8@"NSString"16@"NSNumber"24
v32@0:8@"NSArray"16@"NSString"24
v32@0:8@"IDSBaseMessage"16@"NSString"24
v64@0:8@16@24@32@40@48@56
@"NSObject<OS_os_activity>"
@"IDSCoalesceMessageQueueManager"
@"IDSAckStateMachine"
v48@0:8@16q24@32@?40
v48@0:8@"NSData"16q24@"<IDSEncryptionAsyncQueue>"32@?<v@?@"NSData"@"NSError">40
v48@0:8@"NSArray"16q24@"<IDSEncryptionAsyncQueue>"32@?<v@?@"NSArray"@"NSError">40
@48@0:8@16q24@32^@40
@"NSData"48@0:8@"NSData"16q24@"<IDSEncryptionSyncQueue>"32^@40
@"NSArray"48@0:8@"NSArray"16q24@"<IDSEncryptionSyncQueue>"32^@40
@52@0:8I16@20@28@36@44
@24@0:8@?16
@48@0:8@16q24@32@?40
@60@0:8@16q24@32@40@?48B56
@56@0:8@16q24@32@40@?48
@64@0:8@16q24@32q40@48@?56
@84@0:8@16q24@32@40d48d56@64@?72B80
@"<IDSPersistentMapDelegate>"
@"<IDSPersistentMapPersister>"
@"IDSPersistentMapMergePolicy"
v40@0:8@"NSString"16@"NSArray"24@?<v@?@"NSDictionary"@"NSError">32
v32@0:8@"NSString"16@?<v@?@"KTSelfVerificationInfo"@"NSError">24
v40@0:8@"NSString"16@"KTSelfVerificationHealableErrors"24@?<v@?B>32
v32@0:8@"NSString"16@?<v@?B@"NSUUID"@"NSError">24
v32@0:8@"NSDictionary"16@?<v@?@"IDSKTOptInResult">24
v24@0:8@?<v@?@"IDSKTRegistrationStatusProvider">16
@"IDSKeyTransparencyVerifier"
@"IDSPersistentMap"
v40@0:8@"UNUserNotificationCenter"16@"UNNotification"24@?<v@?Q>32
v40@0:8@"UNUserNotificationCenter"16@"UNNotificationResponse"24@?<v@?>32
v32@0:8@"UNUserNotificationCenter"16@"UNNotification"24
v44@0:8@16@24B32@36
@"UNUserNotificationCenter"
@"IDSContactsUtilities"
v76@0:8@16@24@32@40@48@56B64@?68
v84@0:8@16@24@32@40@48@56B64@68@76
v68@0:8@16@24@32@40@48@56B64
v96@0:8@16@24@32@40@48@56@64@72C80B84@?88
v76@0:8@16@24@32@40@48@56@64B72
v88@0:8@16@24@32@40q48@56@64C72B76@80
v104@0:8@16@24@32@40q48@56@64C72B76@80@88@96
v124@0:8@16@24@32@40q48@56@64@72C80B84B88@92@100@108@?116
@"IDSDAccount"
@"IDSDSessionController"
@"IDSGroupEncryptionController"
@"IDSDGroupStatusNotificationControllerBroadcaster"
@80@0:8@16@24@32@40@48@56@64B72B76
@36@0:8I16@20@28
@68@0:8@16@24@32@40@48I56@60
@36@0:8@16I24@28
@"IDSOTRController"
v28@0:8B16@?20
v28@0:8I16@?20
v72@0:8@16@24@32@40@48@56@?64
v52@0:8@16@24@32B40@?44
v44@0:8@16B24B28B32@?36
v44@0:8@16B24B28B32@36
v40@0:8@16d24@32
v32@0:8@"NSData"16@?<v@?@"NSDictionary"@"NSError">24
v24@0:8@?<v@?@"NSArray">16
v28@0:8B16@?<v@?>20
v24@0:8@?<v@?I>16
v28@0:8I16@?<v@?>20
v24@0:8@?<v@?>16
v32@0:8@"NSString"16@?<v@?>24
v48@0:8@"NSString"16@"NSString"24@"NSDictionary"32@?<v@?>40
v72@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSString"56@?<v@?>64
v24@0:8@?<v@?@"NSError">16
v48@0:8@"NSString"16@"IDSURI"24@"IDSURI"32@?<v@?@"IDSQueryKeyTransparencyContext"@"NSArray"@"NSError">40
v52@0:8@"NSString"16@"IDSURI"24@"IDSURI"32B40@?<v@?@"IDSKTVerificationResult"@"NSError">44
v48@0:8@"NSString"16@"IDSURI"24@"IDSURI"32@?<v@?@"NSError">40
v24@0:8@?<v@?@"NSArray"@"NSError">16
v24@0:8@?<v@?B@"NSError">16
v32@0:8@"NSString"16@?<v@?@"NSError">24
v44@0:8@"NSString"16B24B28B32@?<v@?@"NSError">36
v32@0:8@"NSString"16@?<v@?@"NSString"@"NSError">24
v24@0:8@?<v@?@"NSString">16
v32@0:8@"NSArray"16@?<v@?@"NSString">24
v28@0:8B16@?<v@?@"NSError">20
v32@0:8@"NSString"16@?<v@?@"NSMutableArray">24
v44@0:8@"NSString"16B24B28B32@"NSString"36
v40@0:8@"NSString"16d24@"NSString"32
B44@0:8@16@24I32@36
B36@0:8@16I24@28
v36@0:8@16B24@?28
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
d32@0:8@16q24
@"IDSRemoteCredential"
@"IDSPairingManager"
@"IMUserDefaults"
@40@0:8@16q24@32
@"IDSTemporaryPhoneUser"
v40@0:8@"IDSUserStore"16@"<IDSUser>"24@"IDSAuthenticationCertificate"32
v32@0:8@"IDSUserStore"16@"<IDSUser>"24
v40@0:8@"IDSUserStore"16@"IDSAuthenticationCertificate"24@"<IDSUser>"32
@"<IDSTemporaryPhoneUserExpirationManagerDelegate>"
@"IDSPublicIdentityData"24@0:8^@16
@"IDSKTRegistrationData"28@0:8S16^@20
@"NSNumber"24@0:8@"NSString"16
@"IDSNGMKeyLoadingErrorContainer"16@0:8
d24@0:8@16
@28@0:8i16@20
d24@0:8q16
@"IDSSystemAccountAdapter"
@"<IMUserDefaults>"
B24@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16
@24@0:8@"NSString"16
v24@0:8@?<B@?^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}@"<IDSMultiplexerTransportClientConnection>">16
@"IDSGroupEncryptionKeyManager"16@0:8
v24@0:8@"IDSGroupEncryptionKeyManager"16
@"<IDSMultiplexerTransportParticipantIDConverter>"16@0:8
v24@0:8@"<IDSMultiplexerTransportParticipantIDConverter>"16
v24@0:8@"CBPeripheral"16
v32@0:8@"CBPeripheral"16@"NSArray"24
v32@0:8@"CBPeripheral"16@"NSError"24
v40@0:8@"CBPeripheral"16@"NSNumber"24@"NSError"32
v40@0:8@"CBPeripheral"16@"CBService"24@"NSError"32
v40@0:8@"CBPeripheral"16@"CBCharacteristic"24@"NSError"32
v40@0:8@"CBPeripheral"16@"CBDescriptor"24@"NSError"32
v40@0:8@"CBPeripheral"16@"CBL2CAPChannel"24@"NSError"32
@"<IDSWPPacketSendingProtocol>"
v32@0:8@"IDSRapportClient"16@"NSString"24
v40@0:8@"IDSRapportClient"16@"NSDictionary"24@"NSString"32
@"<IDSRapportDeliveryControllerDelegate>"
@"IDSRapportClient"
v24@0:8@"<IDSRapportClientDelegate>"16
v40@0:8@"NSDictionary"16@"NSString"24@?<v@?@"NSError">32
@40@0:8r^v16Q24@32
v72@0:8@16@24@32@40@48@56@64
v32@0:8@"IDSRegistrationPushHandler"16@"NSData"24
v48@0:8@"IDSRegistrationPushHandler"16@"NSString"24@"NSNumber"32@"NSString"40
v32@0:8@"IDSRegistrationPushHandler"16@"NSString"24
v48@0:8@"IDSRegistrationPushHandler"16@"NSString"24@"NSNumber"32@"NSNumber"40
v48@0:8@"IDSRegistrationPushHandler"16@"NSString"24@"NSData"32@"NSString"40
v32@0:8@"IDSRegistrationPushHandler"16@"NSArray"24
v32@0:8@"IDSRegistrationPushHandler"16@"IDSTapToRadarPushPayload"24
v72@0:8@"IDSRegistrationPushHandler"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSString"56@"NSString"64
v32@0:8q16@24
@"IDSRegistrationPushHandler"
B40@0:8q16q24^@32
q32@0:8q16^@24
B52@0:8@16@24@32@40i48
@"IDSKTGossipPolicy"
v48@0:8@"ENGroupContext"16@"_ENGroupInfo"24@"ENGroup"32@?<v@?@"ENGroup"@"NSError">40
v40@0:8@"ENGroupContext"16@"ENGroupID"24@?<v@?@"ENGroup"@"NSError">32
v40@0:8@"ENGroup"16@"ENGroupContext"24@?<v@?@"NSData"@"NSError">32
v40@0:8@"NSData"16@"ENGroupContext"24@?<v@?@"ENGroup"@"NSError">32
v32@0:8@"<ENCypher>"16@?<v@?@"NSArray"B>24
v40@0:8@"ENGroup"16@"ENGroup"24@?<v@?B@"NSError">32
v80@0:8@16@24@32@40q48@56@64@?72
@"IDSGroupServer"
@"ENGroupID"
v32@0:8@16^@24
v36@0:8d16B24@?28
@"CKContainer"
@"CKRecordZone"
@"IDSCloudKitKeyTransparencyDeviceRecord"
@"CUTUnsafePromise"
@"NSUbiquitousKeyValueStore"
Q24@0:8@16
v68@0:8@16@24i32@36@44@52@60
v52@0:8@16@24@32i40@44
v56@0:8@16@24d32@40@48
v56@0:8@16q24@32@40@48
v72@0:8@16@24q32@40@48@56@64
v48@0:8@16q24@32@40
v80@0:8@16@24@32@40@48@56q64q72
v48@0:8@16@24@32q40
v68@0:8@16@24@32@40@48B56@60
v44@0:8@16@24@32S40
v64@0:8S16@20@28@36B44@48@56
v40@0:8Q16@24@32
v40@0:8q16@24@32
v48@0:8q16@24@32@40
v48@0:8q16@24@32B40B44
v56@0:8q16@24@32@40B48B52
v56@0:8@16@24B32B36@40@48
v56@0:8q16@24@32@40@48
v40@0:8q16q24@32
v68@0:8@"NSString"16@"NSString"24i32@"NSDictionary"36@"NSString"44@"NSString"52@"NSString"60
v52@0:8@"NSString"16@"NSString"24@"NSString"32i40@"NSDictionary"44
v32@0:8@"NSString"16@"NSDictionary"24
v32@0:8@"NSString"16@"NSString"24
v40@0:8@"NSString"16@"NSString"24@"NSString"32
v56@0:8@"IDSURI"16@"NSString"24@"IDSPseudonymProperties"32@"IDSPseudonymRequestProperties"40@"NSString"48
v56@0:8@"IDSPseudonym"16@"NSString"24d32@"IDSPseudonymRequestProperties"40@"NSString"48
v48@0:8@"IDSPseudonym"16@"NSString"24@"IDSPseudonymRequestProperties"32@"NSString"40
v56@0:8@"NSData"16q24@"NSString"32@"IDSSigningOptions"40@"NSString"48
v72@0:8@"NSData"16@"NSData"24q32@"NSString"40@"IDSURI"48@"IDSSigningOptions"56@"NSString"64
v32@0:8@"NSNumber"16@"NSString"24
v64@0:8@"NSString"16@"NSString"24@"NSString"32@"NSDictionary"40@"NSNumber"48@"NSArray"56
v40@0:8@"NSString"16@"NSNumber"24@"NSString"32
v32@0:8@"NSData"16@"NSString"24
v48@0:8@"NSNumber"16@"NSString"24@"NSString"32@"NSString"40
v24@0:8@"NSSet"16
v40@0:8@"NSArray"16@"NSString"24@"NSString"32
v24@0:8@"NSDictionary"16
v56@0:8@"NSData"16@"NSString"24@"NSString"32@"NSString"40@"NSDictionary"48
v32@0:8@"NSDictionary"16@"NSString"24
v56@0:8@"NSURL"16@"NSDictionary"24@"NSArray"32@"NSString"40@"NSString"48
v40@0:8@"NSDictionary"16@"NSNumber"24@"NSString"32
v28@0:8B16@"NSString"20
v32@0:8@"NSString"16q24
v48@0:8@"NSDictionary"16q24@"ENGroupID"32@"NSString"40
v56@0:8@"NSString"16@"NSString"24@"NSNumber"32@"NSNumber"40@"NSNumber"48
v80@0:8@"NSString"16@"NSString"24@"NSString"32@"NSNumber"40@"NSNumber"48@"NSNumber"56q64q72
v48@0:8@"NSString"16@"NSString"24@"NSString"32q40
v36@0:8@"NSSet"16@"NSSet"24I32
v32@0:8q16@"NSString"24
v32@0:8@"NSObject<OS_xpc_object>"16@"NSDictionary"24
v36@0:8@"NSString"16@"NSData"24B32
v32@0:8@"NSString"16@"NSData"24
v28@0:8@"NSString"16I24
v40@0:8@"NSData"16@"NSSet"24@"NSString"32
v68@0:8@"NSArray"16@"NSString"24@"NSString"32@"NSData"40@"IDSMessagingCapabilities"48B56@"NSDictionary"60
v44@0:8@"NSArray"16@"NSString"24@"NSString"32S40
v40@0:8@"NSSet"16@"NSString"24@"NSString"32
v48@0:8@"NSData"16@"NSString"24@"NSString"32@"NSData"40
v64@0:8S16@"NSString"20@"NSString"28@"NSArray"36B44@"NSData"48@"NSDictionary"56
v40@0:8@"NSString"16@"NSDictionary"24@"NSDictionary"32
v40@0:8@"NSArray"16@"NSUUID"24@"NSString"32
v32@0:8@"NSString"16@"NSArray"24
v40@0:8@"NSArray"16@"NSArray"24@"NSString"32
v40@0:8Q16@"NSData"24@"NSString"32
v40@0:8q16@"NSData"24@"NSDictionary"32
v40@0:8q16@"NSData"24@"NSData"32
v48@0:8q16@"NSData"24@"NSData"32@"NSArray"40
v48@0:8q16@"NSData"24@"NSData"32B40B44
v56@0:8q16@"NSData"24@"NSData"32@"NSArray"40B48B52
v56@0:8@"NSString"16@"NSString"24B32B36@"NSNumber"40@"NSString"48
v56@0:8q16@"IDSURI"24@"IDSURI"32@"NSString"40@"NSString"48
v40@0:8@"NSString"16@"NSString"24@"NSData"32
v40@0:8@"NSString"16@"NSArray"24@"NSString"32
v48@0:8@"NSString"16@"NSString"24@"NSString"32@"NSArray"40
v40@0:8@"NSString"16@"NSString"24@"NSArray"32
v48@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40
v40@0:8q16q24@"NSString"32
v40@0:8@"NSData"16@"NSString"24@"NSString"32
v80@0:8@16@24@32@40@48@56@64@72
v68@0:8@16@24@32q40@48B56@60
v36@0:8@16I24@28
v44@0:8@16@24I32S36B40
v40@0:8@16@24I32B36
v36@0:8@16S24@28
v40@0:8@16@24I32S36
v48@0:8@16Q24Q32@40
v44@0:8@16@24S32@36
v40@0:8@16@24^B32
v52@0:8@16q24B32d36@44
v44@0:8@16B24@28@36
v36@0:8B16@20@28
v28@0:8B16@"NSDictionary"20
v48@0:8@"NSData"16@"NSString"24@"NSString"32@"NSDictionary"40
v72@0:8@"NSDictionary"16@"NSString"24@"NSDictionary"32@"NSString"40@"NSString"48@"NSString"56@"NSDictionary"64
v64@0:8@"NSData"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56
v80@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSString"56@"NSString"64@"NSDictionary"72
v64@0:8@"NSDictionary"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSDictionary"56
v68@0:8@"NSString"16@"NSString"24@"NSString"32q40@"NSError"48B56@"NSDictionary"60
v64@0:8@"NSString"16@"NSString"24@"NSString"32@"NSArray"40@"NSArray"48@"NSDictionary"56
v56@0:8@"NSString"16@"NSString"24@"NSString"32@"NSString"40@"NSDictionary"48
v40@0:8@"NSString"16d24@"NSError"32
v40@0:8@"NSString"16@"NSString"24@"NSError"32
v32@0:8@"NSData"16@"NSError"24
v40@0:8@"NSData"16@"NSString"24@"NSError"32
v72@0:8@"NSData"16@"NSData"24@"NSArray"32@"NSArray"40@"NSData"48@"NSString"56@"NSError"64
v40@0:8@"NSNumber"16@"NSString"24@"NSError"32
v52@0:8@"NSString"16@"NSDictionary"24@"NSString"32B40@"NSError"44
v64@0:8@"NSDictionary"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48@"NSNumber"56
v36@0:8@"NSString"16I24@"NSError"28
v36@0:8@"NSString"16@"NSSet"24B32
v28@0:8@"NSString"16B24
v40@0:8@"NSString"16@"NSArray"24@"NSError"32
v40@0:8@"NSString"16@"NSDictionary"24@"NSError"32
v32@0:8@"NSString"16@"NSError"24
v36@0:8@"NSString"16@"NSArray"24B32
v44@0:8@"NSString"16@"NSArray"24I32S36B40
v40@0:8@"NSString"16@"NSArray"24I32B36
v36@0:8@"NSString"16S24@"NSError"28
v40@0:8@"NSString"16@"NSArray"24I32S36
v40@0:8@"NSString"16@"NSDictionary"24@"NSUUID"32
v32@0:8@"NSString"16@"NSUUID"24
v48@0:8@"NSString"16Q24Q32@"NSData"40
v40@0:8@"NSString"16@"NSData"24@"NSDictionary"32
v44@0:8@"NSString"16@"NSData"24S32@"NSDictionary"36
v56@0:8@"NSDictionary"16@"NSString"24@"NSString"32@"NSString"40@"NSDictionary"48
v48@0:8@"NSDictionary"16@"NSString"24@"NSString"32@"NSString"40
v40@0:8@"NSObject<OS_xpc_object>"16@"NSString"24@"NSError"32
v40@0:8@"NSString"16q24@"NSError"32
v32@0:8q16@"NSError"24
v40@0:8q16@"NSData"24@"NSString"32
v32@0:8@"NSArray"16@"NSError"24
v40@0:8@"NSString"16@"NSString"24^B32
v40@0:8@"NSString"16@"NSError"24@"NSArray"32
v40@0:8q16@"NSString"24@"NSError"32
v52@0:8@"NSString"16q24B32d36@"NSError"44
v44@0:8@"IDSPseudonym"16B24@"NSError"28@"NSString"36
v36@0:8B16@"NSError"20@"NSString"28
v40@0:8@"NSString"16@"NSData"24@"NSError"32
v36@0:8@"NSString"16B24@"NSError"28
B52@0:8@16@24@32@40B48
v32@0:8@"IDSPushHandler"16@"NSData"24
v56@0:8@"IDSPushHandler"16@"NSDictionary"24@"NSString"32@"NSString"40@"IMMessageContext"48
v48@0:8@"IDSPushHandler"16@"NSDictionary"24@"NSString"32@"IMMessageContext"40
v40@0:8@"IDSPushHandler"16@"NSString"24@"IMMessageContext"32
v28@0:8@"IDSPushHandler"16B24
v120@0:8@16@24@32@40@48@56@64B72B76@80@88q96B104q108B116
v36@0:8@16q24I32
v44@0:8@16q24I32@36
v40@0:8@16@24B32B36
v120@0:8@"IDSUTunDeliveryController"16@"IDSProtobuf"24@"NSString"32@"NSNumber"40@"NSString"48@"NSString"56@"NSNumber"64B72B76@"NSString"80@"NSString"88q96B104q108B116
v120@0:8@"IDSUTunDeliveryController"16@"NSData"24@"NSString"32@"NSNumber"40@"NSString"48@"NSString"56@"NSNumber"64B72B76@"NSString"80@"NSString"88q96B104q108B116
v80@0:8@"IDSUTunDeliveryController"16@"NSString"24@"NSString"32@"NSString"40@"NSNumber"48@"NSString"56q64q72
v36@0:8@"IDSUTunDeliveryController"16q24I32
v44@0:8@"IDSUTunDeliveryController"16q24I32@"NSArray"36
v36@0:8@"IDSUTunDeliveryController"16I24@"NSArray"28
v32@0:8@"IDSUTunDeliveryController"16@"NSString"24
v40@0:8@"IDSUTunDeliveryController"16@"NSString"24B32B36
@"NSDictionary"24@0:8@"IDSUTunDeliveryController"16
v32@0:8@"IDSDuetInterface"16@"NSArray"24
v64@0:8@"IDSRapportDeliveryController"16@"NSDictionary"24@"NSString"32@"NSNumber"40@"NSString"48@"NSString"56
v56@0:8@"IDSRegistrationHashProcessor"16@"NSString"24@"NSString"32@"NSString"40@"NSString"48
B60@0:8@16@24i32@36@44@?52
@44@0:8@16@24@32I40
@52@0:8@16@24@32I40B44B48
@48@0:8@16@24@32I40B44
@36@0:8@16B24@28
v60@0:8@?16@24@32@40I48@52
v68@0:8@?16@24@32@40@48I56@60
@48@0:8q16@24@32q40
B20@0:8I16
v48@0:8Q16@24@32@40
B44@0:8Q16@24@32B40
B92@0:8@16i24{?=[8I]}28@60@68@76^@84
v44@0:8@16@24I32@36
@"IMRemoteObjectBroadcaster"
@"IMMultiQueue"
@"IMPair"
@"IMPowerAssertion"
@"IDSDSignInResponder"
@"IDSRegistrationHashProcessor"
@"IDSOpportunisticDeliveryController"
@"IDSInvitationStore"
@"IDSFirewallNotificationCenter"
@"IDSRegistrationConductor"
@"IDSTransparentEndpointViewer"
@"<IDSXPCConnectionProtocol>"
@72@0:8@16@24@32@40B48B52@?56@?64
v32@0:8@"ENGroupContext"16@"ENGroup"24
v40@0:8@"ENGroupContext"16@"ENGroup"24@"ENGroup"32
v24@0:8@"ENGroupContext"16
@"<IDSDGroupContextNotifyingObserverDelegate>"
{?="transparencyVersion"b1}
@36@0:8*16I24*28
v24@0:8r*16
@"IDSEncryptionQueue"
B32@0:8@16^@?24
@"IDSMessageHashStore"
v32@0:8@"NSString"16@?<v@?@"NSSet"@"NSError">24
v32@0:8@"NSArray"16@?<v@?@"NSError">24
v36@0:8@"NSArray"16B24@?<v@?@"NSError">28
@"<IDSActivityPushListenerDelegate>"
B32@0:8@16Q24
@"IDSMMCSUploader"
@"IDSCloudKitContainer"
@"CUTPromiseSeal"
@"NSHashTable"
v36@0:8@"IDSUTunDeliveryController"16@"NSString"24B32
@"IDSUTunDeliveryController"
@"IDSDuetInterface"
v40@0:8@16B24B28B32B36
v32@0:8B16B20B24B28
@28@0:8C16C20I24
@28@0:8*16I24
@"IDSUTunControlChannelIdentityPair"
@"NSObject<OS_nw_connection>"
@"IDSMPPublicLegacyIdentity"
@32@0:8@16d24
@"<IDSTTLCacheDelegate>"
@48@0:8@16@24@?32@40
@56@0:8@16@24d32@?40@48
@28@0:8@16B24
B24@0:8@"<IDSUser>"16
@40@0:8@16@24^@32
@"NSDictionary"40@0:8@"NSData"16@"NSNumber"24^@32
@"NSError"
@32@0:8q16B24B28
@24@0:8B16B20
@36@0:8@16i24@28
@"<IDSDAccountControllerDeviceSupport>"
@"<IDSDAccountControllerDelegate>"
v40@0:8@16@"NSString"24@"NSString"32
B48@0:8@16^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}24@"NSString"32@"NSString"40
v44@0:8@16B24@"NSString"28@"NSString"36
v32@0:8@16@"NSData"24
v48@0:8@16@"NSData"24@"NSArray"32@"NSNumber"40
v40@0:8@16@"IDSQRProtoMaterialInfo"24@"IDSQRProtoMaterial"32
v52@0:8@16c24@"NSUUID"28@"NSDictionary"36@"NSDictionary"44
v40@0:8@16c24@"NSUUID"28C36
v32@0:8@16@"NSDictionary"24
v52@0:8@16@"NSDictionary"24@"NSString"32@"NSString"40I48
v36@0:8@16@"NSDictionary"24S32
v40@0:8@16Q24@"NSString"32
v32@0:8@16@"NSArray"24
v36@0:8@16@"NSDictionary"24c32
v36@0:8@16@"NSUUID"24c32
v40@0:8@16B24@28B36
v36@0:8I16^{sockaddr=CC[14c]}20^{sockaddr=CC[14c]}28
B60@0:8@16@24I32^{sockaddr=CC[14c]}36^{sockaddr=CC[14c]}44d52
B84@0:8@16@24I32^{sockaddr=CC[14c]}36^{sockaddr=CC[14c]}44d52^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}60@68@76
B56@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16@24d32@40@48
v40@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16@24@32
@"IDSUDPLink"
{IDSSockAddrPairTable="iNumPair"i"iMaxNumPair"i"pairs"^{IDSSockAddrPair}"echoCount"i"digestKeyData"[1472C]"digestKeyDataLen"i}
{sockaddr_storage="ss_len"C"ss_family"C"__ss_pad1"[6c]"__ss_align"q"__ss_pad2"[112c]}
v40@0:8i16@20B28q32
Q32@0:8@16@24
Q32@0:8@"NSData"16@"NSUUID"24
@"<WPContinuity>"
@"<IDSWPLinkManagerDelegate>"
B28@0:8q16B24
@"IDSEncryptionController"
@32@0:8@16i24B28
v64@0:8@16^@24^@32@40@48^B56
@64@0:8@16@24@32i40@44@52B60
@60@0:8@16@24@32i40@44@52
@52@0:8@16@24@32i40@44
v56@0:8^@16^@24@32@40^B48
@28@0:8B16B20B24
B24@0:8@?16
@"IDSRegistration"
@"IDSServiceProperties"
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
@"<IDSXPCPairing>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCPairedDeviceManager>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCReunionSync>"32@0:8@"NSString"16@"IDSDXPCDaemon"24
@"<IDSXPCOpportunistic>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCRegistration>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCActivityMonitor>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCServerMessaging>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCKeyTransparency>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCFirewall>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCGroupSessionKeyValueDeliveryProvider>"24@0:8@"IDSDXPCDaemon"16
@"<IDSXPCInternalTesting>"24@0:8@"IDSDXPCDaemon"16
@"NSXPCListener"
@"IDSDXPCPairing"
@"IDSDXPCPairedDeviceManager"
@"IDSRestoreMonitor"
@"IDSCTAdapter"
@"IDSSIMPhoneUserSynchronizer"
@"IDSSystemAccountUserSynchronizer"
@"IDSTemporaryPhoneUserSynchronizer"
@"IDSUserAccountSynchronizer"
@"IDSHeartbeatCenter"
@"IDSAccountSync"
@"IDSAccountRepair"
@"IDSDeviceCertificationRepair"
@"IDSSIMResponder"
v24@0:8@"IDSDAccountController"16
v32@0:8@"IDSRegistrationController"16@"IDSRegistration"24
v48@0:8@"IDSRegistrationController"16@"IDSRegistration"24q32@"NSDictionary"40
v32@0:8@"IDSRegistrationController"16@"NSArray"24
v24@0:8@"IDSRegistrationController"16
v24@0:8@"IDSDeviceCertificationRepair"16
v28@0:8@"<IDSCTSIM>"16B24
v32@0:8@"<IDSCTSIM>"16@"<IDSCTSimDeactivationInfo>"24
@"IDSPreflightStack"24@0:8@"NSString"16
v32@0:8@"IDSPreflightStack"16@"NSString"24
v32@0:8@"IDSCTPNR"16@?<v@?B>24
v48@0:8@"IDSPhoneNumberValidationStateMachine"16@"NSString"24@"NSString"32@"NSString"40
v32@0:8@"IDSPhoneNumberValidationStateMachine"16q24
@"<IDSPreflightStackStore>"
@"IDSRegistrationReasonTracker"
v60@0:8Q16@24@32@40B48@52
B24@0:8Q16
v40@0:8^I16^I24^I32
B52@0:8@16@24B32q36@44
@48@0:8B16@20@28B36@40
v56@0:8@16B24@28@36B44@48
B72@0:8@16@24@32I40I44I48S52Q56@64
@"IDSCountdown"
@"IDSNRDeviceManager"
@"IDSPairedDeviceRepository"
d32@0:8@16@24
@"<IDSCoalesceMessageQueueManagerDelegate>"
@52@0:8@16@24B32@36@44
@36@0:8B16@20@28
v72@0:8@"NSData"16@"NSData"24@"NSData"32@"NSData"40@"NSData"48@"NSNumber"56@?<v@?@"IDSGroupPutMessage"@"NSError"q@"NSDictionary"@"NSArray">64
v32@0:8@"NSData"16@?<v@?@"IDSGroupGetMessage"@"NSError"q@"NSDictionary"@"NSArray">24
@?32@0:8@16@?24
@?24@0:8@?16
@"<FTMessageDeliveryProtocol>"
@"<IDSGroupServerPushHandler>"
v88@0:8@16@24@32@40@48@56q64B72B76q80
@68@0:8@16@24@32I40q44q52^q60
@68@0:8@16@24I32@36q44q52^@60
v32@0:8@?16@24
@"IDSEndpointCapabilities"
v32@0:8@"IDSActivityDescription"16@"NSString"24
@"IDSActivityDescription"24@0:8@"NSString"16
@"NSArray"24@0:8@"NSString"16
v32@0:8@"IDSActivityInfo"16@"NSString"24
v76@0:8@16@24i32@36@44@52@60@68
v60@0:8@16@24@32i40@44@52
v64@0:8@16@24d32@40@48@56
v64@0:8q16@24@32@40@48@56
v48@0:8q16q24@32@40
v136@0:8@16@24@32q40B48B52B56B60B64q68Q76q84I92i96@100@108B116B120B124B128B132
v148@0:8@16I24I28I32I36@40B48B52B56I60@64@72@80I88I92I96B100@104@112@120B128@132@140
v48@0:8@"IDSCoalesceMessageQueueManager"16@"NSArray"24@"NSString"32@"NSNumber"40
q20@0:8B16
v60@0:8@16@24@32@40B48@?52
v156@0:8@16@24@32@40@48@56@64@72@80B88B92@96B104B108B112@116B124@128@?136@?144B152
v88@0:8@16@24@32@40@48@56@64@72@?80
v132@0:8@16@24@32@40@48@56@64@72@80@88B96@100@108@?116@?124
v168@0:8@16@24@32@40@48@56@64@72B80B84B88@92B100B104B108@112B120@124@?132@?140@148B156@?160
v256@0:8@16d24@32@40@48B56B60B64B68B72B76@80B88@92@100@108@116@124@132@140@148B156B160@164B172B176@180@188B196@200@208@216@224@?232@?240@?248
v80@0:8@16@24@32@40@48@56@64@?72
v244@0:8@16@24@32@40@48B56@60B68B72B76B80q84B92@96@104@112@120@128@136B144B148@152B160B164@168@176B184@188@196@204@212@?220@?228@?236
v56@0:8@16@24q32B40B44q48
@"IDSConnectivityMonitorMetricProperties"
C24@0:8q16
@112@0:8q16S24I28I32B36B40B44B48B52@56@64@72@80@88@96@104
@"IDSSocketPairMessage"
@"IDSProtobuf"
v24@0:8^v16
^v16@0:8
v28@0:8@"IDSNRDeviceBridge"16B24
v28@0:8@"IDSNRDeviceBridge"16C24
v112@0:8@16@24@32@40@48@56B64B68@72@80q88B96q100B108
v72@0:8@16@24@32@40@48q56q64
v28@0:8@"IDSUTunPeer"16B24
v24@0:8@"IDSUTunPeer"16
v112@0:8@"IDSUTunPeer"16@"IDSProtobuf"24@"NSString"32@"NSNumber"40@"NSString"48@"NSNumber"56B64B68@"NSString"72@"NSString"80q88B96q100B108
v112@0:8@"IDSUTunPeer"16@"NSData"24@"NSString"32@"NSNumber"40@"NSString"48@"NSNumber"56B64B68@"NSString"72@"NSString"80q88B96q100B108
v72@0:8@"IDSUTunPeer"16@"NSString"24@"NSString"32@"NSNumber"40@"NSString"48q56q64
v36@0:8@"IDSUTunPeer"16q24I32
v44@0:8@"IDSUTunPeer"16q24I32@"NSArray"36
v36@0:8@"IDSUTunPeer"16I24@"NSArray"28
v228@0:8@16@24@32@40@48q56I64B68B72B76B80@84@92B100B104B108B112B116@120@128@136@144@152@160@168@176B184@188q196@?204@?212@?220
@20@0:8S16
B28@0:8q16I24
v36@0:8@16q24B32
v44@0:8@16@24q32B40
v24@0:8B16B20
@"<IDSUTunDeliveryControllerDelegate>"
@"IDSNRDeviceBridge"
@"IDSNRDevicePreferencesHandler"
@"IDSConnectivityMonitor"
@"CNContactStore"
@"IDSGroupEncryptionKeyMaterial"
^{_SpecificEntitlement=S(?=^SS)C}
v40@0:8@"_ENGroupInfo"16@"ENGroup"24@?<v@?@"ENGroup"@"NSError">32
v32@0:8@"ENGroupID"16@?<v@?@"ENGroup"@"NSError">24
v32@0:8@"ENGroup"16@?<v@?@"NSData"@"NSError">24
v32@0:8@"NSData"16@?<v@?@"ENGroup"@"NSError">24
v32@0:8@"ENStableGroupID"16@?<v@?@"ENGroup">24
v32@0:8@"ENGroupID"16@?<v@?>24
v32@0:8@"ENGroup"16@?<v@?@"NSError">24
v40@0:8@"ENGroup"16@"ENGroup"24@?<v@?@"NSError">32
v24@0:8@"ENGroup"16
v32@0:8@"ENGroup"16@"ENGroup"24
@"NSXPCConnection"
@"IDSDGroupContextNotifyingObserver"
@"<IDSAPNSAckTrackerDelegate>"
@"IDSQueryKeyTransparencyContext"
B28@0:8@16I24
@"CUTPromise"
v36@0:8i16q20@28
v60@0:8q16i24@28@36B44B48@52
v52@0:8q16i24@28@36B44B48
B48@0:8@16@24@32@?40
B48@0:8@16d24@32@?40
B40@0:8@16@24@?32
B28@0:8B16@?20
C24@0:8@16
v32@0:8C16@20C28
v48@0:8q16@24@32@?40
@80@0:8@16@24@32@40@48@56@64@72
v72@0:8q16@24@32@40@48@56@64
@"<FTPasswordManager>"
@"<IDSDSignInResponderDeviceSupport>"
@"<IDSDRegistrationControl>"
@"IDSDeliveryController"
@32@0:8q16@24
@"NSSet"32@0:8q16@"NSSet"24
v28@0:8@"<IDSUser>"16B24
@"IMLockdownManager"
@"FTUserConfiguration"
@"IDSMPPublicDeviceIdentityContainer"
{_opaque_pthread_mutex_t=q[56c]}16@0:8
v80@0:8{_opaque_pthread_mutex_t=q[56c]}16
@"IDSPublicKeyStorageCache"
@"<IDSUser>"
@"IDSUserProperties"
v32@0:8q16@?24
@"IDSRegistrationKeychainManager"
v40@0:8@"IDSActivityMonitorStateManager"16@"IDSActivityUpdate"24@"NSString"32
v36@0:8B16@20@?28
v32@0:8@"<IDSXPCActivityMonitorClient>"16@"NSString"24
v32@0:8@"NSString"16@?<v@?B@"NSError">24
v36@0:8B16@"NSString"20@?<v@?@"NSError">28
v32@0:8@"NSString"16@?<v@?@"NSArray"@"NSError">24
v40@0:8@"IDSActivityInfo"16@"NSString"24@?<v@?@"NSError">32
v40@0:8@"NSString"16@"NSString"24@?<v@?@"NSError">32
@"IDSActivityMonitorStateManager"
@56@0:8@16@24I32I36I40S44@48
v24@0:8@"NSData"16
@"<IDSBaseMessageSigningSession>"16@0:8
v24@0:8@"<IDSBaseMessageSigningSession>"16
@"FTMessageDelivery"16@0:8
B24@0:8@"IDSBaseMessage"16
v24@0:8@"IDSBaseMessage"16
@"IDSBaseMessage"16@0:8
@"NSArray"16@0:8
v24@0:8@"IDSEngramKeyStore"16
v60@0:8@16q24q32@40B48@52
v56@0:8@16q24q32@40@48
q32@0:8#16@?24
v84@0:8@16@24@32@40@48B56@60q68@76
@?40@0:8@16@?24@?32
v56@0:8q16@24@32@40@?48
v60@0:8@16@24@32q40@48B56
B36@0:8@16B24@?28
B56@0:8@16@24@32@40@?48
B56@0:8@16@24d32@40@?48
d24@0:8d16
B72@0:8Q16@24@32@40@48@56@?64
@"<IDSRegistrationCenterMessageDelivery>"
@"IDSGetDependentRegistrationsCenter"
@"IDSValidationQueue"
v28@0:8@"IDSBTLinkManager"16B24
v32@0:8@"IDSBTLinkManager"16@24
v28@0:8@"IDSWPLinkManager"16B24
v32@0:8@"IDSWPLinkManager"16@24
v32@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16@24
v48@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16@24@32@40
B24@0:8B16B20
@44@0:8@16@24Q32S40
Q48@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16@24@32@40
v44@0:8@16@24@?32i40
v36@0:8@16@24i32
v56@0:8@16@24@32@40@?48
v28@0:8@16c24
v36@0:8@16c24I28B32
v36@0:8@16c24@28
v48@0:8@16^i24^i32^i40
v56@0:8@16@24@32@40S48I52
Q56@0:8Q16@24@32@40@48
v48@0:8S16@20@28@36I44
v44@0:8c16@20@28@36
v40@0:8^Q16^I24@32
@"IDSBTLinkManager"
@"IDSWPLinkManager"
[1025c]
^{__SCDynamicStore=}
v40@0:8@"IDSTTLCache"16@24@"NSString"32
v48@0:8@"IDSTTLCache"16@24@"NSString"32@?<v@?@>40
B40@0:8@"IDSTTLCache"16@24@"NSString"32
B24@0:8@"IDSTTLCache"16
@"RPCompanionLinkClient"
@"IDSTTLCache"
c16@0:8
v20@0:8c16
@"IDSKTGossipPolicySpecification"
@72@0:8@16q24@32@40@48@56B64B68
Q20@0:8I16
Q24@0:8q16
v48@0:8i16@20Q28^[16C]36S44
v48@0:8@16Q24^[16C]32S40i44
v28@0:8d16B24
v56@0:8@16@24@32@40q48
v44@0:8Q16@24C32I36B40
v40@0:8Q16@24I32B36
v52@0:8@16B24S28q32i40@44
B36@0:8@16@24I32
v28@0:8B16q20
q20@0:8C16
v68@0:8@16@24S32@36B44B48@52B60B64
@"<IDSUTunConnectionDelegate>"
@"<IDSSocketPairConnectionProtocol>"
@"IDSLocalDeliveryQueue"
[3q]
v24@0:8@"<IDSCTPNRRequestData>"16
v24@0:8@"<IDSCTPNRResponseData>"16
q24@0:8q16
@"<IDSPhoneNumberValidationStateMachineMessageDelivery>"
@"<IDSPhoneNumberValidationStateMachineLockdownManager>"
@"IDSPhoneNumberValidationModeArbiter"
@"IDSCTPNR"
@64@0:8@16@24@32@40@?48@?56
@"IDSDeviceHeartbeatCenter"
@"FTNetworkSupport"
v36@0:8C16@?20@28
v28@0:8C16@20
I24@0:8@16
v36@0:8@16d24C32
v44@0:8@16@24@32I40
v44@0:8@16@24B32@?36
v40@0:8@"<IDSXPCServerMessagingClient>"16@"NSString"24@"NSString"32
v56@0:8@"NSData"16@"NSString"24@"IDSServerMessagingOptions"32@"NSString"40@?<v@?B@"NSError">48
v24@0:8@"IDSCertifiedDeliveryContext"16
v24@0:8^{_dmsg_info=CSCIQ[0C]}16
v40@0:8@16@24Q32
I24@0:8d16
@"IDSRemoteCredential"16@0:8
@"NSDate"16@0:8
@44@0:8B16@20@28@36
v56@0:8@16@24@32B40B44@48
I32@0:8@16@24
v72@0:8@16@24@32@40B48B52B56B60@?64
v64@0:8@16@24@32@40B48B52@?56
v44@0:8I16@20@28@36
I40@0:8@16@24@32
I44@0:8@16@24@32B40
v80@0:8@16@24@32@40Q48@56B64B68@?72
@"<IDSIDStatusDependencyProvider>"
v28@0:8I16@20
v24@0:8@"NSNumber"16
v28@0:8I16@"NSNumber"20
d28@0:8I16@20
v24@0:8@?<v@?@"<IDSXPCPairing>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCPairedDeviceManager>"@"NSError">16
v32@0:8@"NSString"16@?<v@?@"<IDSXPCReunionSync>"@"NSError">24
v24@0:8@?<v@?@"<IDSXPCOpportunistic>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCRegistration>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCActivityMonitor>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCServerMessaging>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCKeyTransparency>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCFirewall>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCGroupSessionKeyValueDeliveryProvider>"@"NSError">16
v24@0:8@?<v@?@"<IDSXPCInternalTesting>"@"NSError">16
@44@0:8@16B24@28@36
@"<IDSDXPCDaemonCollaboratorProvider>"
@"<IDSXPCReunionSync>"
@"IDSQuickRelayAllocateMessage"
@"QRSelfAllocationArray"
@"QRStreamInfo"
@80@0:8@16@24@32B40@44^{?=SSIQI*}52@60@?68i76
@40@0:8@16@24^q32
@40@0:8@16@24^B32
B60@0:8@16@24Q32S40S44I48@52
B32@0:8@16S24S28
@84@0:8@16@24B32@36@44@52@60@?68i76B80
@72@0:8@16@24@32@40@48@56@?64
@88@0:8@16I24@28q36S44Q48S56I60@64B72B76i80i84
I20@0:8i16
v32@0:8@16B24i28
v68@0:8I16q20q28I36Q40@48@56B64
@40@0:8@16@?24@?32
v40@0:8@16d24@?32
v48@0:8@16@?24@?32@40
v56@0:8@16@24@?32@?40@48
v24@0:8@"CBCentralManager"16
v32@0:8@"CBCentralManager"16@"NSDictionary"24
v48@0:8@"CBCentralManager"16@"CBPeripheral"24@"NSDictionary"32@"NSNumber"40
v32@0:8@"CBCentralManager"16@"CBPeripheral"24
v40@0:8@"CBCentralManager"16@"CBPeripheral"24@"NSError"32
v40@0:8@"CBCentralManager"16q24@"CBPeripheral"32
v24@0:8@"CBPeripheralManager"16
v32@0:8@"CBPeripheralManager"16@"NSDictionary"24
v32@0:8@"CBPeripheralManager"16@"NSError"24
v40@0:8@"CBPeripheralManager"16@"CBService"24@"NSError"32
v40@0:8@"CBPeripheralManager"16@"CBCentral"24@"CBCharacteristic"32
v32@0:8@"CBPeripheralManager"16@"CBATTRequest"24
v32@0:8@"CBPeripheralManager"16@"NSArray"24
v36@0:8@"CBPeripheralManager"16S24@"NSError"28
v40@0:8@"CBPeripheralManager"16@"CBL2CAPChannel"24@"NSError"32
v24@0:8@"CBScalablePipeManager"16
v40@0:8@"CBScalablePipeManager"16@"NSString"24@"NSError"32
v32@0:8@"CBScalablePipeManager"16@"NSString"24
v32@0:8@"CBScalablePipeManager"16@"CBScalablePipe"24
v40@0:8@"CBScalablePipeManager"16@"CBScalablePipe"24@"NSError"32
@"CBCentralManager"
@"CBPeripheralManager"
@"CBScalablePipeManager"
@"CBPeripheral"
@"<IDSBTLinkManagerDelegate>"
@"IDSNanoRegistryPluginManager"
@"IDSNRDevicePreferences"
@64@0:8@16@24@32^q40q48^@56
@56@0:8@16@24@32q40^@48
@56@0:8@16@24q32q40^@48
v64@0:8@16@24q32q40@48@?56
v96@0:8@16@24@32@40@48@56@64q72@?80B88B92
v104@0:8@16@24@32@40@48@56q64B72@76q84@?92B100
v64@0:8@16@24@32q40q48@?56
@64@0:8@16@24@32q40q48^@56
v56@0:8@16@24q32q40@?48
@56@0:8@16q24@32q40^@48
@68@0:8@16q24I32@36@44q52^@60
v100@0:8@16@24q32@40@48@56@64@72q80@?88B96
v112@0:8@16@24q32@40@48@56@64@72I80@84q92@?100B108
B64@0:8@16@24q32@40q48^@56
B76@0:8@16@24q32@40I48@52q60^@68
@48@0:8@16@24q32^q40
v56@0:8@16@24@32q40@?48
v68@0:8@16@24q32B40q44@52@?60
v32@0:8@?16q24
v72@0:8@16@24@32@40@48@56q64
@"IDSEncryptionQueueManager"
B32@0:8B16I20@?24
@"AVConference"
@"<_IDSSessionConnectionDelegate>"
v40@0:8@16d24q32
v28@0:8@16f24
v40@0:8@16q24B32B36
v44@0:8@16B24q28@36
v44@0:8@16q24B32@36
v32@0:8@16B24I28
v40@0:8@16B24I28@32
v32@0:8@16I24I28
v36@0:8@"AVConference"16q24B32
v36@0:8@"AVConference"16B24@"NSDictionary"28
v40@0:8@"AVConference"16q24@"NSError"32
v32@0:8@"AVConference"16@"NSData"24
v32@0:8@"AVConference"16q24
v40@0:8@"AVConference"16@"VideoAttributes"24q32
v36@0:8@"AVConference"16B24q28
v24@0:8@"AVConference"16
v40@0:8@"AVConference"16q24@"NSDictionary"32
v40@0:8@"AVConference"16q24B32B36
v40@0:8@"AVConference"16@"NSData"24q32
v44@0:8@"AVConference"16B24q28@"NSError"36
v48@0:8@"AVConference"16q24@"NSError"32@"NSDictionary"40
v44@0:8@"AVConference"16q24B32@"NSError"36
v32@0:8@"AVConference"16B24I28
v40@0:8@"AVConference"16B24I28@"NSError"32
v32@0:8@"AVConference"16I24I28
v28@0:8@"AVConference"16I24
v28@0:8@"AVConference"16f24
v28@0:8@"AVConference"16B24
v48@0:8@16I24I28@32@?40
v36@0:8@16I24Q28
v32@0:8@"<IDSXPCGroupSessionKeyValueDeliveryDelegate>"16@"NSUUID"24
v24@0:8@"NSUUID"16
v48@0:8@"NSData"16I24I28@"NSString"32@?<v@?@"NSError">40
v36@0:8@"NSData"16I24Q28
v36@0:8@16i24Q28
i24@0:8@16
@"<IDSDSessionKeyValueDeliveryDelegate>"
v40@0:8@16Q24Q32
v40@0:8Q16Q24Q32
@32@0:8@16B24B28
v24@0:8@?<v@?@"NSDictionary"@"NSError">16
@"ENGroupContext"
v72@0:8@16@24@32@40@48@?56@?64
v56@0:8@16^@24^@32^@40@48
v56@0:8@16@24@32@?40@?48
v148@0:8@16@24@32@40@48B56@60B68B72@76@84B92B96@100@108q116B124B128@?132@?140
v84@0:8@16@24@32@40@48q56B64@68@?76
v56@0:8@16^@24^@32@40@48
v80@0:8@16@24@32@40@48@56@?64@?72
v64@0:8@16@24@32@?40@?48@?56
@"IDSProtoKeyTransparencyLoggableData"
{?="keyIndex"b1}
B56@0:8@"NSData"16@"NSData"24q32@"<IDSEncryptionSyncQueue>"40^@48
@44@0:8@16@24I32@36
@"IDSEndpoint"
v32@0:8@"IDSDAccount"16@"NSArray"24
v48@0:8@16@24@32B40B44
v64@0:8@16@24@32B40B44B48B52B56B60
v60@0:8@16@24@32B40B44B48B52B56
v56@0:8@16@24@32B40B44B48B52
v40@0:8@16B24B28@32
v40@0:8B16B20@24@32
@32@0:8@16@?24
B72@0:8@16@24@32@40@48@56q64
v36@0:8i16@20@?28
v56@0:8@16@24@32@40B48B52
v64@0:8@16@24@32@40@48B56B60
v72@0:8@16@24@32@40@48@56B64B68
B48@0:8@16@24B32B36@40
@84@0:8@16@24@32@40@48@56B64^@68B76B80
@52@0:8@16@24@32^@40B48
v52@0:8@16@24@32B40B44B48
v48@0:8q16@24@32q40
v88@0:8@16@24@32@40q48d56B64B68@?72@?80
v52@0:8@16@24B32@36@44
v60@0:8@16@24@32@40B48@52
@56@0:8@16@24@32@40q48
@312@0:8@16@24@32@40@48@56B64@68B76B80B84@88B96@100B108@112@120q128@136@144@152B160@164B172B176B180B184B188@192@200B208@212@220@228@236B244@248@256B264B268B272B276B280B284B288@292B300@304
@"IDSDestination"
@32@0:8B16q20I28
@40@0:8B16q20I28@32
@28@0:8I16@20
@40@0:8q16@24q32
v32@0:8d16q24
@36@0:8Q16C24^B28
@44@0:8Q16q24B32@36
@40@0:8Q16q24@32
@40@0:8@16@24q32
@48@0:8@16@24q32q40
@68@0:8@16@24q32q40B48q52^B60
v72@0:8@16@24@32@40@48B56C60@?64
v68@0:8@16@24@32@40@48C56@?60
@28@0:8^{__CFArray=}16B24
@48@0:8@16q24@32q40
@28@0:8B16q20
@36@0:8B16q20@28
@64@0:8Q16Q24q32@40B48B52@56
@72@0:8Q16Q24q32@40B48B52@56@64
@64@0:8@16q24Q32Q40@48@56
@56@0:8@16q24Q32Q40@48
v56@0:8@16@24B32B36@40@?48
v32@0:8@?16d24
v28@0:8@?16B24
@"IDSDatabase"
v52@0:8@16B24Q28Q36Q44
v48@0:8@16Q24Q32Q40
v68@0:8@16B24Q28Q36Q44Q52Q60
v52@0:8@16B24Q28Q36q44
v44@0:8@16B24Q28Q36
v76@0:8@16B24Q28Q36Q44Q52Q60Q68
v48@0:8Q16Q24Q32@40
v44@0:8@16Q24Q32I40
v32@0:8I16I20I24I28
v52@0:8Q16I24I28I32@36@44
v32@0:8Q16Q24
v52@0:8@16@24B32d36d44
v56@0:8Q16Q24Q32Q40Q48
v52@0:8@16q24B32d36q44
@"IDSDSessionActiveParticipantsCache"
v32@0:8@"IDSDSession"16@?<v@?B>24
v32@0:8@"IDSDSession"16@?<v@?B@"NSData">24
@"IMNetworkAvailability"
@60@0:8@16@24B32@36@44@52
^{?={tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}{tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}}16@0:8
{?={tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}{tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}}16@0:8
v4608@0:8{?={tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}{tagSRTPINFO=iii{_opaque_pthread_mutex_t=q[56c]}{_opaque_pthread_cond_t=q[40c]}IISSII[16C][14C][32C][14C]IIIII{tagSRTPCryptContext={cssm_data=Q*}^{_CCCryptor}[404C]}S[1600C]i^{SRTPReplayProtection}}}16
@"_IDSSessionConnection"
@"<IDSDSession>"
{?="SRTPSend"{tagSRTPINFO="fSRTPInitialized"i"fSRTPEnded"i"fCancelled"i"xWait"{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}"cWait"{_opaque_pthread_cond_t="__sig"q"__opaque"[40c]}"dwSSRC"I"dwRTPROC"I"wFirstRTPSeq"S"wHighestRTPSeq"S"dwFirstRTCPSeq"I"dwHighestRTCPSeq"I"MasterKey"[16C]"MasterSalt"[14C]"SessionKey"[32C]"SessionSalt"[14C]"dwEncrCountRTPHi"I"dwEncrCountRTPLo"I"dwEncrCountRTCPHi"I"dwEncrCountRTCPLo"I"dwDerivationRate"I"cryptContext"{tagSRTPCryptContext="secAsn1Key"{cssm_data="Length"Q"Data"*}"ccCryptorRef"^{_CCCryptor}"ccContext"[404C]}"wPreCalcSeq"S"pbNextKeyStream"[1600C]"srtpProtocolVersion"i"replayWindow"^{SRTPReplayProtection}}"SRTPRecv"{tagSRTPINFO="fSRTPInitialized"i"fSRTPEnded"i"fCancelled"i"xWait"{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}"cWait"{_opaque_pthread_cond_t="__sig"q"__opaque"[40c]}"dwSSRC"I"dwRTPROC"I"wFirstRTPSeq"S"wHighestRTPSeq"S"dwFirstRTCPSeq"I"dwHighestRTCPSeq"I"MasterKey"[16C]"MasterSalt"[14C]"SessionKey"[32C]"SessionSalt"[14C]"dwEncrCountRTPHi"I"dwEncrCountRTPLo"I"dwEncrCountRTCPHi"I"dwEncrCountRTCPLo"I"dwDerivationRate"I"cryptContext"{tagSRTPCryptContext="secAsn1Key"{cssm_data="Length"Q"Data"*}"ccCryptorRef"^{_CCCryptor}"ccContext"[404C]}"wPreCalcSeq"S"pbNextKeyStream"[1600C]"srtpProtocolVersion"i"replayWindow"^{SRTPReplayProtection}}}
@40@0:8@16q24@?32
@"IDSBaseMessage"
@"IDSValidationSession"
v48@0:8@16q24@?32@?40
v32@0:8q16q24
@28@0:8q16B24
v28@0:8@"NSData"16B24
@48@0:8@16q24@32@40
@56@0:8@16q24@32@40@48
@?<v@?@"NSArray"@"NSArray"@"NSDictionary">16@0:8
@"IDSRegistrationProperties"16@0:8
@"IDSPeerMessage"16@0:8
@"<IDSPrioritizedTokenList>"16@0:8
@"IDSRegistrationProperties"
@"IDSPeerMessage"
@"<IDSPrioritizedTokenList>"
v32@0:8@"IDSPhoneSubscription"16@?<v@?@"NSArray"@"NSError">24
v32@0:8@"NSArray"16@?<v@?@"NSArray"@"NSError">24
v32@0:8@"IDSURI"16@?<v@?B@"NSError">24
v32@0:8@"NSArray"16@?<v@?@"NSDictionary">24
@32@0:8@?16@24
v24@0:8@"IDSPersistentMap"16
@"NSDictionary"48@0:8@"NSDictionary"16@"NSArray"24@"NSString"32@"NSString"40
@56@0:8@16@24@32@40B48B52
@60@0:8@16@24@32@40B48B52B56
@60@0:8@16@24@32@40Q48B56
B48@0:8@16@24@32@40
@76@0:8@16@24@32@40^@48^@56@64B72
d44@0:8@16@24@32I40
q56@0:8@16@24@32@40@48
B56@0:8@16@24@32@40@48
@64@0:8@16@24@32Q40@48@56
B64@0:8@16@24@32@40B48B52@?56
B68@0:8@16@24@32@40B48B52B56@?60
B64@0:8@16@24@32@40@48@?56
v40@0:8@?16@24@32
v56@0:8@16@24@32@?40@48
@"<IDSPeerIDQueryHandler>"
@"<IDSPeerIDPushHandler>"
@36@0:8@16i24i28B32
v32@0:8Q16i24i28
v24@0:8*16
@"IDSGenericConnectionID"
@"IDSSockAddrWrapperPair"
@"IDSHCInfo"
@"NSObject<OS_nw_endpoint>"
@"IDSGenericConnection"
@"IDSDeviceConnectionInfo"
v24@0:8@"NSMutableString"16
@64@0:8d16d24d32d40d48q56
@40@0:8d16d24q32
v72@0:8r^v16Q24^{sockaddr=CC[14c]}32^{sockaddr=CC[14c]}40C48@52B60^B64
C60@0:8@16^{sockaddr=CC[14c]}24^{sockaddr=CC[14c]}32C40r^v44Q52
v56@0:8@16r*24@32@40@?48
B32@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16@24
v56@0:8@16@24@32i40i44@?48
i32@0:8@16@24
v28@0:8^{IDSPortMap=[1024Q]QS}16S24
Q32@0:8@16^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}24
Q36@0:8@16^^{?}24i32
v40@0:8@16@?24@32
{SimpleNSStringToObjectTable="tableSize"i"elements"^{SimpleNSStringToObjectTableElement}"elementCount"i}
@"IDSLinkManager"
B64@0:8@"NSArray"16@"NSData"24@"NSString"32@"NSString"40@"IDSPeerIDQueryContext"48@?<v@?@"NSString"@"NSArray"@"NSArray"@"NSDictionary"@"NSString"B@"NSDictionary"B>56
v32@0:8@?<v@?@"NSString"@"NSArray"@"NSArray"@"NSDictionary"@"NSString"B@"NSDictionary"B>16@"NSString"24
B56@0:8@?16@24@32@40@48
v44@0:8@16@24@32B40
@"FTMessageDelivery_DualMode"
@"<IDSPeerIDNetworkChangeNotifier>"
@"<IDSPeerIDQueryHandlerDelegate>"
@"<IDSPeerIDQueryHandlerDataSource>"
@56@0:8@16@24@32@40Q48
@"IDSTransferServicesController"
v32@0:8@"NSString"16@?<v@?@"<IDSXPCGroupSessionKeyValueDelivery>"@"NSError">24
v40@0:8^@16^@24@32
v64@0:8@16q24@32@40@48@56
v80@0:8@16@24q32@40@48@56@64@72
v96@0:8@16@24@32@40B48@52B60d64@72q80@?88
v48@0:8@?16@24d32@40
B32@0:8q16@24
v92@0:8@16@24@32@40@48@56@64@72q80B88
v40@0:8@16@24d32
v48@0:8q16@24q32@40
v100@0:8B16@20@28@36@44@52@60@68@76@84@?92
B104@0:8@16@24@32@40@48@56@64@72@80@88@96
@88@0:8@16@24@32@40@48@56@64B72B76@80
v56@0:8I16@20q28I36q40@48
v88@0:8@16@24@32@40@48@56q64q72@80
v56@0:8@16@24@32q40@48
B40@0:8@16B24@28B36
B36@0:8@16B24@28
v76@0:8@16@24@32@40I48@?52@?60@?68
v44@0:8@16@24q32I40
v52@0:8@16@24q32@40I48
@?48@0:8@16@24@32@40
B32@0:8@16B24B28
B36@0:8@16B24B28B32
@"<IDSAppleIDRegistrationCenterMessageDelivery>"
@"<IDSPipelineComponent>"24@0:8@"<IDSPipelineComponent>"16
@"CUTUnsafePromise"24@0:8@"<IDSPipelineParameter>"16
@"<IDSPipelineComponent>"
v68@0:8@16@24@32@40B48@?52@?60
B24@0:8@"NSArray"16
@"IDSPairedDeviceKeychainSchema"
@"IDSKTRegistrationData"
@32@0:8S16B20^@24
v24@0:8^B16
S24@0:8@16
B36@0:8@16S24@28
@"TransparencyDaemon"
v64@0:8q16@24@32@40B48B52@56
v56@0:8q16@24@32B40B44@48
v28@0:8@?16I24
@88@0:8@16@24@32@40@48@56@64@72@?80
@"IDSDataMigrationTracker"
B72@0:8@16@24@32@40@48I56I60I64S68
@"<IDSPairedDevicePersister>"
v32@0:8@"NSUUID"16@?<v@?@"NSError">24
v32@0:8@"IDSLocalPairingAddPairedDeviceInfo"16@?<v@?@"NSError">24
v40@0:8@"NSUUID"16q24@?<v@?@"NSError">32
v24@0:8@?<v@?@"IDSLocalPairingLocalDeviceRecord"@"NSDictionary"@"NSError">16
v36@0:8@"NSUUID"16B24@?<v@?@"NSError">28
v40@0:8@"NSString"16@"NSSet"24@?<v@?@"NSError">32
@"IDSDaemon"
@"IDSQuickSwitchHelper"
@"IDSUTunController"
B40@0:8@16@24I32B36
B24@0:8I16B20
B32@0:8@16I24B28
@24@0:8^{__CFArray=}16
@"IDSServer"
@"IDSPhoneNumberValidationStateMachine"
@"<IDSPhoneUserRegistryDeviceSupport>"
@36@0:8B16B20B24B28B32
@40@0:8B16B20B24B28B32B36
@28@0:8q16S24
@24@0:8S16B20
@40@0:8q16q24^@32
B48@0:8@16q24q32^@40
@40@0:8q16^B24^@32
@64@0:8q16@24@32q40^@48^@56
@68@0:8q16B24^B28^B36^B44^@52^@60
B28@0:8S16^@20
B32@0:8B16S20^@24
B40@0:8@16S24B28^@32
B32@0:8S16B20^@24
@48@0:8@16^B24^B32^@40
@56@0:8@16^B24^B32^B40^@48
@52@0:8i16@20@28q36@44
@48@0:8@16@24q32@40
v40@0:8Q16Q24@32
@"<IDSRegistrationHashProcessorDelegate>"
@"IDSFirewallStore"
B24@0:8^B16
@"<IDSDeviceCertificationRepairDelegate>"
@"IDSTemporaryPhoneUserCredential"
v32@0:8@"IDSTemporaryPhoneUserExpirationManager"16@"IDSTemporaryPhoneUser"24
@"IDSTemporaryPhoneUserExpirationManager"
@"IDSTransactionQueue"
v32@0:8@16Q24
v32@0:8@"NSStream"16Q24
v48@0:8@16@24@32^v40
q44@0:8^v16Q24i32^B36
v24@0:8^{?=*QqqIBBBBBBBBI{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}{sockaddr_storage=CC[6c]q[112c]}SCi[8{?=*Si[12S]qCSCBBS{?=SSSSS}BBi[4S]CBBBI}]ccid[16C]QQ@iI[0C]}16
@"CBScalablePipe"
@"<IDSMadridAckTrackerDelegate>"
@"IDSProtoKeyTransparencyTrustedServiceSignatures"
q32@0:8@16@24
@"NSData"32@0:8@"NSString"16@"NSData"24
q32@0:8@"NSString"16@"NSData"24
@88@0:8@16@24@32@40@48@56@64@72@80
v60@0:8@16@24Q32@40B48@52
@32@0:8Q16@24
v48@0:8@16d24@32d40
v64@0:8@16d24@32d40@48@56
Q40@0:8@16@24@32
q24@0:8Q16
@"IDSCloudKitKeyTransparencyStore"
@"IDSKeyTransparencyPolicy"
@"IDSKTAccountKeyManager"
@"<IDSKeyTransparencyRegistrationDataSource>"
@"KTVerifier"
@"<CUTMetricLogger>"
B40@0:8@"NSString"16@"NSString"24@"NSString"32
@"IDSIDStatusQueryController"
v76@0:8@16@24@32@40@48B56@60@68
v52@0:8@16@24@32S40@44
v72@0:8S16@20@28@36B44@48@56@64
softlink:r:path:/System/Library/Frameworks/Contacts.framework/Contacts
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>abs-client</key>
<integer>772496756</integer>
<key>application-identifier</key>
<string>com.apple.identityservicesd</string>
<key>aps-connection-initiate</key>
<true/>
<key>com.apple.BTServer.allowRestrictedServices</key>
<true/>
<key>com.apple.BTServer.appleMfgDataAdvertising</key>
<true/>
<key>com.apple.BTServer.appleMfgDataScanner</key>
<true/>
<key>com.apple.BTServer.le.att</key>
<true/>
<key>com.apple.BTServer.le.pipe</key>
<true/>
<key>com.apple.CommCenter.fine-grained</key>
<array>
<string>data-allowed-write</string>
<string>spi</string>
</array>
<key>com.apple.CompanionLink</key>
<true/>
<key>com.apple.CoreTelephony.DataUsageInfo.allow</key>
<true/>
<key>com.apple.StatusKit.presence.clientID</key>
<string>identityservicesd</string>
<key>com.apple.SystemConfiguration.SCDynamicStore-write-access</key>
<true/>
<key>com.apple.SystemConfiguration.SCPreferences-write-access</key>
<string>YES</string>
<key>com.apple.appleaccount.usernotifications</key>
<true/>
<key>com.apple.asd.client</key>
<string>6624379988</string>
<key>com.apple.authkit.client.private</key>
<true/>
<key>com.apple.bluetooth.internal</key>
<true/>
<key>com.apple.companionappd.connect.allow</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.coreduetd.context</key>
<true/>
<key>com.apple.coretelephony.Calls.allow</key>
<true/>
<key>com.apple.coretelephony.Identity.get</key>
<true/>
<key>com.apple.developer.device-information.user-assigned-device-name</key>
<true/>
<key>com.apple.developer.icloud-container-environment</key>
<string>Production</string>
<key>com.apple.developer.icloud-container-identifiers</key>
<array>
<string>com.apple.private.ids.kt</string>
</array>
<key>com.apple.developer.icloud-services</key>
<array>
<string>CloudKit</string>
</array>
<key>com.apple.gizmoappd.appmanager.allow</key>
<true/>
<key>com.apple.keystore.absinthe</key>
<true/>
<key>com.apple.keystore.sik.access</key>
<true/>
<key>com.apple.managedconfiguration.profiled-access</key>
<true/>
<key>com.apple.mkb.usersession.info</key>
<true/>
<key>com.apple.mobile.deleted.AllowFreeSpace</key>
<true/>
<key>com.apple.mobileactivationd.device-identifiers</key>
<true/>
<key>com.apple.mobileactivationd.spi</key>
<true/>
<key>com.apple.mobilemail.mailservices</key>
<true/>
<key>com.apple.nano.nanoregistry.ids.plugin</key>
<true/>
<key>com.apple.nearbyinteraction.background</key>
<true/>
<key>com.apple.networkd_privileged</key>
<true/>
<key>com.apple.networkrelay.companionLink.isEnabled</key>
<true/>
<key>com.apple.networkrelay.deviceMonitor</key>
<true/>
<key>com.apple.networkrelay.devicePreferences</key>
<true/>
<key>com.apple.networkrelay.devices.read</key>
<true/>
<key>com.apple.networkrelay.devices.write</key>
<true/>
<key>com.apple.payment.all-access</key>
<true/>
<key>com.apple.peerpayment.all-access</key>
<true/>
<key>com.apple.private.FairPlayIOKitUserClient.access</key>
<true/>
<key>com.apple.private.MobileActivation</key>
<array>
<string>RequestReactivation</string>
<string>GetActivationState</string>
</array>
<key>com.apple.private.MobileGestalt.AllowedProtectedKeys</key>
<array>
<string>UniqueDeviceID</string>
<string>SerialNumber</string>
<string>InternationalMobileEquipmentIdentity</string>
<string>MobileEquipmentIdentifier</string>
<string>SysCfg</string>
</array>
<key>com.apple.private.ProvInfoIOKitUserClient.access</key>
<true/>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.appleaccount.app-hidden-from-icloud-settings</key>
<true/>
<key>com.apple.private.cloudkit.buddyAccess</key>
<true/>
<key>com.apple.private.cloudkit.serviceNameForContainerMap</key>
<dict>
<key>com.apple.private.ids.kt</key>
<string>com.apple.private.ids.kt</string>
</dict>
<key>com.apple.private.cloudkit.systemService</key>
<true/>
<key>com.apple.private.communicationsfilter</key>
<true/>
<key>com.apple.private.followup</key>
<true/>
<key>com.apple.private.ids.remotecredentials</key>
<true/>
<key>com.apple.private.ids.remoteurlconnection</key>
<true/>
<key>com.apple.private.imcore.imremoteurlconnection</key>
<true/>
<key>com.apple.private.imcore.imtransferservice</key>
<true/>
<key>com.apple.private.kernel.global-proc-info</key>
<true/>
<key>com.apple.private.keychain.sysbound</key>
<true/>
<key>com.apple.private.lockdown.finegrained-get</key>
<array>
<string>NULL/DevicePrivateKey</string>
<string>NULL/DeviceCertificate</string>
<string>NULL/ActivationPrivateKey</string>
<string>NULL/ActivationState</string>
</array>
<key>com.apple.private.nehelper.privileged</key>
<true/>
<key>com.apple.private.network.interface-control</key>
<true/>
<key>com.apple.private.network.restricted.port.ids_cloud_service_connector</key>
<true/>
<key>com.apple.private.network.restricted.port.ids_service_connector</key>
<true/>
<key>com.apple.private.network.socket-delegate</key>
<true/>
<key>com.apple.private.rtcreportingd</key>
<true/>
<key>com.apple.private.security.storage.IdentityServices</key>
<true/>
<key>com.apple.private.skywalk.observe-stats</key>
<true/>
<key>com.apple.private.skywalk.register-kernel-pipe</key>
<true/>
<key>com.apple.private.skywalk.register-user-pipe</key>
<true/>
<key>com.apple.private.system-keychain</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceLiverpool</string>
<string>kTCCServiceAddressBook</string>
<string>kTCCServiceBluetoothPeripheral</string>
</array>
<key>com.apple.private.ubiquity-additional-kvstore-identifiers</key>
<array>
<string>com.apple.private.ids.kt-kvs</string>
</array>
<key>com.apple.private.usernotifications.bundle-identifiers</key>
<array>
<string>com.apple.identityservicesd.firewall</string>
</array>
<key>com.apple.private.vfs.allow-low-space-writes</key>
<true/>
<key>com.apple.security.attestation.access</key>
<true/>
<key>com.apple.security.exception.files.home-relative-path.read-only</key>
<string>/Library/Caches/PassKit/</string>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.contactsd</string>
<string>com.apple.kvsd</string>
</array>
<key>com.apple.security.exception.sysctl.read-write</key>
<array>
<string>net.link.generic.system.flow_key_trace</string>
</array>
<key>com.apple.security.network.client</key>
<true/>
<key>com.apple.security.network.server</key>
<true/>
<key>com.apple.security.system-groups</key>
<array>
<string>systemgroup.com.apple.pisco.suinfo</string>
</array>
<key>com.apple.seserviced.kmlXpcService</key>
<true/>
<key>com.apple.symptom_diagnostics.report</key>
<true/>
<key>com.apple.telephony.cupolicy-monitor-access</key>
<true/>
<key>com.apple.terminusd.deviceMonitor</key>
<true/>
<key>com.apple.transparency.kt</key>
<true/>
<key>com.apple.wifi.manager-access</key>
<true/>
<key>fairplay-client</key>
<string>1004488730</string>
<key>keychain-access-groups</key>
<array>
<string>ichat</string>
<string>apple</string>
<string>com.apple.apsd</string>
</array>
<key>keychain-cloud-circle</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>identityservicesd</string>
</array>
</dict>
</plist>
abs-client
]t05
application-identifier
com.apple.identityservicesd0
aps-connection-initiate
0/*com.apple.BTServer.allowRestrictedServices
0/*com.apple.BTServer.appleMfgDataAdvertising
0+&com.apple.BTServer.appleMfgDataScanner
com.apple.BTServer.le.att
com.apple.BTServer.le.pipe
0>!com.apple.CommCenter.fine-grained0
data-allowed-write
spi0
com.apple.CompanionLink
00+com.apple.CoreTelephony.DataUsageInfo.allow
0:%com.apple.StatusKit.presence.clientID
identityservicesd0>9com.apple.SystemConfiguration.SCDynamicStore-write-access
0?8com.apple.SystemConfiguration.SCPreferences-write-access
YES0-(com.apple.appleaccount.usernotifications
com.apple.asd.client
66243799880% com.apple.authkit.client.private
com.apple.bluetooth.internal
0*%com.apple.companionappd.connect.allow
com.apple.coreduetd.allow
com.apple.coreduetd.context
0(#com.apple.coretelephony.Calls.allow
0)$com.apple.coretelephony.Identity.get
0E@com.apple.developer.device-information.user-assigned-device-name
0>0com.apple.developer.icloud-container-environment
Production0N0com.apple.developer.icloud-container-identifiers0
com.apple.private.ids.kt01#com.apple.developer.icloud-services0
CloudKit0)$com.apple.gizmoappd.appmanager.allow
com.apple.keystore.absinthe
com.apple.keystore.sik.access
03.com.apple.managedconfiguration.profiled-access
com.apple.mkb.usersession.info
0,'com.apple.mobile.deleted.AllowFreeSpace
03.com.apple.mobileactivationd.device-identifiers
com.apple.mobileactivationd.spi
0&!com.apple.mobilemail.mailservices
0+&com.apple.nano.nanoregistry.ids.plugin
0+&com.apple.nearbyinteraction.background
com.apple.networkd_privileged
03.com.apple.networkrelay.companionLink.isEnabled
0)$com.apple.networkrelay.deviceMonitor
0-(com.apple.networkrelay.devicePreferences
0(#com.apple.networkrelay.devices.read
0)$com.apple.networkrelay.devices.write
com.apple.payment.all-access
0% com.apple.peerpayment.all-access
050com.apple.private.FairPlayIOKitUserClient.access
0O"com.apple.private.MobileActivation0)
RequestReactivation
GetActivationState0
4com.apple.private.MobileGestalt.AllowedProtectedKeys0g
UniqueDeviceIDSerialNumber$InternationalMobileEquipmentIdentity
MobileEquipmentIdentifier
SysCfg050com.apple.private.ProvInfoIOKitUserClient.access
0+&com.apple.private.accounts.allaccounts
0C>com.apple.private.appleaccount.app-hidden-from-icloud-settings
0+&com.apple.private.cloudkit.buddyAccess
0o5com.apple.private.cloudkit.serviceNameForContainerMap
604
com.apple.private.ids.kt
com.apple.private.ids.kt0-(com.apple.private.cloudkit.systemService
0+&com.apple.private.communicationsfilter
com.apple.private.followup
0,'com.apple.private.ids.remotecredentials
0.)com.apple.private.ids.remoteurlconnection
03.com.apple.private.imcore.imremoteurlconnection
0/*com.apple.private.imcore.imtransferservice
0.)com.apple.private.kernel.global-proc-info
0(#com.apple.private.keychain.sysbound
*com.apple.private.lockdown.finegrained-get0`
NULL/DevicePrivateKey
NULL/DeviceCertificate
NULL/ActivationPrivateKey
NULL/ActivationState0*%com.apple.private.nehelper.privileged
00+com.apple.private.network.interface-control
0JEcom.apple.private.network.restricted.port.ids_cloud_service_connector
0D?com.apple.private.network.restricted.port.ids_service_connector
0.)com.apple.private.network.socket-delegate
com.apple.private.rtcreportingd
083com.apple.private.security.storage.IdentityServices
0,'com.apple.private.skywalk.observe-stats
03.com.apple.private.skywalk.register-kernel-pipe
01,com.apple.private.skywalk.register-user-pipe
0&!com.apple.private.system-keychain
com.apple.private.tcc.allow0N
kTCCServiceLiverpool
kTCCServiceAddressBook
kTCCServiceBluetoothPeripheral0[9com.apple.private.ubiquity-additional-kvstore-identifiers0
com.apple.private.ids.kt-kvs0`6com.apple.private.usernotifications.bundle-identifiers0&$com.apple.identityservicesd.firewall01,com.apple.private.vfs.allow-low-space-writes
0*%com.apple.security.attestation.access
0[?com.apple.security.exception.files.home-relative-path.read-only
/Library/Caches/PassKit/0]4com.apple.security.exception.mach-lookup.global-name0%
com.apple.contactsd
com.apple.kvsd0Z.com.apple.security.exception.sysctl.read-write0(&net.link.generic.system.flow_key_trace0&!com.apple.security.network.client
0&!com.apple.security.network.server
0H com.apple.security.system-groups0$"systemgroup.com.apple.pisco.suinfo0'"com.apple.seserviced.kmlXpcService
0)$com.apple.symptom_diagnostics.report
00+com.apple.telephony.cupolicy-monitor-access
0&!com.apple.terminusd.deviceMonitor
com.apple.transparency.kt
com.apple.wifi.manager-access
fairplay-client
100448873008
keychain-access-groups0
ichat
apple
com.apple.apsd0
keychain-cloud-circle
seatbelt-profiles0
identityservicesd
