com.apple.mobilemail
v8@?0
rgb(254,254,254)
background-color
none
-apple-color-filter
100%
max-width
1px 0px 1px 0px
padding
style
title
type
DOWNLOADING_STATUS
Downloading
Delayed
_mf_downloadingStatus
DOWNLOADABLE_STATUS
Tap to Download
_mf_downloadableStatus
_mf_state
action
subtitle
non-extended-content-item
UNAVAILABLE
Main
attachment
%@.%@
QLItem
/System/Library/PrivateFrameworks/QuickLook.framework/QuickLook
### Failed to Soft Linked: /System/Library/PrivateFrameworks/QuickLook.framework/QuickLook
com.apple.UIKit.activity.Quicklook
com.apple.mobilemail.activity.Quicklook
com.apple.mobilemail.saveToCameraRoll
com.apple.mobilemail.saveAllAttachments
com.apple.mobilemail.markupDocument
v16@?0@"EMContentRepresentation"8
failed to ingest %@ (%@)
v16@?0@"UIAction"8
SAVE_IMAGE
SAVE_VIDEO
QUICK_LOOK
OPEN_IN_NEW_WINDOW
MARKUP_DOCUMENT
@"UIWindowSceneActivationConfiguration"16@?0@"UIWindowSceneActivationAction"8
PRINT
/System/Library/PrivateFrameworks/MarkupUI.framework/MarkupUI
### Failed to Soft Linked: /System/Library/PrivateFrameworks/MarkupUI.framework/MarkupUI
v16@?0@"NSMutableSet"8
com.apple.mobilemail.messageContentItemsHelperAttachments
<%@: %p> %@
v16@?0@"NSError"8
@"NSProgress"16@?0@?<v@?@"NSURL"B@"NSError">8
replaceNodeWithSrcWithAttachment
set_state_for_attachment_cid
set_progress_for_attachment_cid
imageAttachmentNodeFinishedDownloading
startDownloadForContentItem
v16@?0@"NSDictionary"8
com.apple.mobilemail.savingPhotos
com.apple.mobilemail.photoLibrary
B16@?0@"NSError"8
WKAttachment is missing for an ID with length %lu, type %@, %@user initiated
not 
background-color:rgb(254,254,254);-apple-color-filter:none
;max-width:100%
;padding:1px 0px 1px 0px
com.apple.email.signposts
com.apple.mobilemail.MessageContentRepresentationRequest
@"<EFFuture>"16@?0@"<EMMessageListItem>"8
B16@?0@"EMContentRepresentation"8
created
in progress
succeeded
failed
<%@: %p> itemID: %@ state:%@
v16@?0@"<EMContentRequestOptionsBuilder>"8
@"<EFFuture>"16@?0@"EMMessage"8
MessageContentRepresentationRequest failed without reason
v16@?0@"NSArray"8
NO_BODY
Invalid parameter not satisfying: %@
builderBlock
-[MessageHeaderViewModel initWithItemBuilder:]
MessageHeaderViewModel.m
v16@?0@"<MessageHeaderViewModelBuilder>"8
flagsBuilderBlock
message
MessageItemViewModel.m
v16@?0@"MFModernLabelledAtomList"8
@"NSString"16@?0@"EMMessageSigner"8
MFAddressAtomStatusManager.m
Signers do not match
OTHER_SIGNERS_TITLE
v32@?0@"<ECEmailAddressConvertible>"8Q16^B24
PresentationOptionsEncodedIntoAddress
MFAddressListsFormatterDidInvalidateCache
MFAddressListFormatter.m
userProfileProvider
@"NSString"16@?0@"NSString"8
@"NSString"8@?0
@16@?0@"<ECEmailAddressConvertible>"8
@"NSArray"8@?0
@"EFPair"16@?0@"<ECEmailAddressConvertible>"8
@"NSAttributedString"8@?0
@16@?0@"NSString"8
A valid instance of MFLocalizationListFormatter is needed
@16@?0@"EFPair"8
This email will be sent
Edit
You sent this
Mail will remind you
MESSAGE_FROM_BLOCKED_SENDER
BLOCKED_SENDER_PREFERENCES
v16@?0@"SGSuggestionAction"8
AllInbox
AllDrafts
AllSent
AllArchive
AllTrash
Flagged
Unread
Today
ToCC
Attachments
ThreadNotifications
MutedThreads
SEE_MORE
@"UIFont"8@?0
conversationItemFooterView.prefixFont
d8@?0
footerView.seeMoreButton.labelBaselineFromTop
-[MFHasMoreContentBannerView titleString]
MFHasMoreContentBannerView.m
-[MFHasMoreContentBannerView actionStringIsDownloading:]
WAS_DOWNLOADED_AS_PLAIN
DOWNLOADING_FULL_MESSAGE
DOWNLOAD_FULL_MESSAGE
MESSAGE_PARTIALLY_DOWNLOADED
BYTES_DOWNLOADING
BYTES_REMAINING
HIDE_MY_EMAIL_TITLE
HME_BANNER_DESCRIPTION
SETTINGS
TiltedTabViewSkyViewEnabled
UIDebuggingEnabled
com.apple.email
MFLoadBlockedContentBannerView.m
blockedContentTypes
UNABLE_TO_VERIFY_MESSAGE_CONTENT
LOAD_MESSAGE
MESSAGE_HAS_MULTIPLE_SIGNERS
REMOTE_IMAGES_BLOCKED_ENCRYPTION
LOAD_REMOTE_IMAGES_ENCRYPTION
REMOTE_CONTENT_BLOCKED_TRUST_EVALUATION
LOAD_REMOTE_CONTENT_TRUST_EVALUATION
REMOTE_IMAGES_BLOCKED_OTHER
LOAD_REMOTE_IMAGES_OTHER
ENABLE_MAIL_PRIVACY_PROTECTION
ENABLE_MAIL_PRIVACY_PROTECTION_DESCRIPTION
NOT_NOW
v16@?0@"UIAlertAction"8
TURN_ON
FAILED_TO_PROXY_REMOTE_CONTENT_OTHER
FAILED_TO_PROXY_REMOTE_CONTENT_NETWORK_INCOMPATIBLE
FAILED_TO_PROXY_REMOTE_CONTENT_VPN
LOAD_FAILED_PROXY_CONTENT
LIST_EXACTLY_TWO_ITEMS
MobileMailUI
LIST_INITIAL_ITEM
LIST_NON_FINAL_ITEM
LIST_FINAL_ITEM
B16@?0@8
MAIL_DROP_BANNER_SAVE_MIXED
MAIL_DROP_BANNER_SAVE_IMAGE
MAIL_DROP_BANNER_SAVE_NONIMAGE_PLURAL
MAIL_DROP_BANNER_SAVE_NONIMAGE
MAIL_DROP_BANNER_DOWNLOADING_MIXED_PLURAL
MAIL_DROP_BANNER_DOWNLOADING_MIXED
MAIL_DROP_BANNER_DOWNLOADING_IMAGES
MAIL_DROP_BANNER_DOWNLOADING_NONIMAGE_PLURAL
MAIL_DROP_BANNER_DOWNLOADING_NONIMAGE
MAIL_DROP_BANNER_DOWNLOADED_MIXED
MAIL_DROP_BANNER_DOWNLOADED_IMAGE
MAIL_DROP_BANNER_DOWNLOADED_PLURAL
MAIL_DROP_BANNER_DOWNLOADED
MAIL_DROP_BANNER_ATTACHMENT
MAIL_DROP_BANNER_FULL_RES
MAIL_DROP_BANNER_ATTACHMENT_PLURAL
MAIL_DROP_BANNER_ERROR
MAIL_DROP_BANNER_NOT_AVAILABLE_MAIL_DROP
MAIL_DROP_BANNER_NOT_AVAILABLE
MAIL_DROP_BANNER_AVAILABLE_MAIL_DROP
MAIL_DROP_BANNER_AVAILABLE
v20@?0@"NSString"8B16
/%lu
x-apple-msg-load-wk2
v16@?0@"NSCachedURLResponse"8
text/html
v24@?0@"MFMessageLoadingContextEvent"8@"NSError"16
v16@?0@"NSString"8
ShowAttachmentMarkup
MFMessageContentViewDidAppear
MFMessageContentViewDidFinishFirstPaint
MFMessageContentViewDidFinishFirstPaintMessageKey
MFMessageContentViewDidFinishFirstPaintErrorKey
com.apple.mobilemail.messageViewTrustConfiguration
MCVLog
v16@?0@8
MCVError
name
stack
AttachmentNodeWasTapped
ExpandQuoteButtonTappedWithYOffset
currentOffsetTop
preOffsetTop
HasBlockquotesToExpand
v16@?0@"NSNumber"8
FinishedReformattingMessage
FoundImageCIDAttachments
TextSelected
ImageError
Loading spinner displayed for %fl seconds
v24@?0@"EMContentRepresentation"8@"NSError"16
B16@?0@"EMMailbox"8
SHOW_QUOTED_CONTENT
SEE_MORE_FROM
localizedStrings
collapseQuotedContent
showRemoteImages
initial-scale
viewport-width
padding-left
padding-right
padding-top
padding-bottom
BODY
attachments
v12@?0B8
v24@?0q8d16
DisableDisplayInfoCache
shouldSkipReformatting
remoteContentToLoadWithoutProxy
v16@?0^{CGImage=}8
elementID
contentID
wkIdentifier
MULTI_MAILDROP_ATTACHMENT_LARGE_TITLE
%@_CH
MULTI_MAILDROP_ATTACHMENT_LARGE_MESSAGE
SINGLE_MAILDROP_ATTACHMENT_LARGE_TITLE
SINGLE_MAILDROP_ATTACHMENT_LARGE_MESSAGE
element_id
rect
width
height
@"MFQuotedContentAttribution"16@?0^@8
B24@?0@"NSString"8@"NSNumber"16
v32@?0@"NSString"8@"NSNumber"16^B24
B16@?0@"DDScannerResult"8
rectForAnchor
x-apple-data-detectors
facetime
facetime-audio
file
Library/Mail
prefs
MESSAGE_CAUSED_PROBLEM_REPEATEDLY
DOWNLOAD
@"UIMenu"16@?0@"NSArray"8
@"UIViewController"8@?0
@"EFFuture"16@?0@"<EMContentItem>"8
SAVE_TO_FILES
SHARE
B16@?0@"UIMenuElement"8
v16@?0q8
scrollView.contentSize
Rendering progress failed without error
-[MFMessageContentView showSearchResultsAtRange:usingStyle:]
v40@?0{CGRect={CGPoint=dd}{CGSize=dd}}8
 !important
QLPreviewController
-[MFMessageDisplayMetrics fontCacheKeyPrefix]
MFMessageDisplayMetrics.m
<%@: %p> traitCollection = %@
messageRegularDisplayMetrics.bodyFont
messageRegularDisplayMetrics.headerBottomPadding
B16@?0@"MFMessageHeaderViewBlock"8
v24@?0Q8^B16
MFMessageHeaderView.m
Blocks must be added to MFMessageHeaderViewBlock before they can be pinned.
v16@?0@"<MessageItemFlagsViewModelBuilder>"8
v32@?0@"MFMessageHeaderViewBlock"8Q16^B24
v16@?0@"MessageHeaderViewModel"8
MFQuotedContentAttribution.m
(type == MFQuotedContentAttributionTypeUnknown && senderName == nil) || (type == MFQuotedContentAttributionTypeNone && senderName == nil) || (type == MFQuotedContentAttributionTypeSender)
<%@:%p (Type: %@, Sender Name: %@>
MFQuotedContentAttributionTypeUnknown
MFQuotedContentAttributionTypeNone
MFQuotedContentAttributionTypeSender
@"NSArray"16@?0@"MailAccount"8
<%@: %p> jsName='%@' => %@
outdentedAttributionsPattern
message-id
subject
(%@) %@
externalConstants
com.apple.mobilemail.reload-timeline
x-apple-mail-proxy-
x-apple-mail-noproxy-
MFWKWebViewFactory.m
daemonInterface is not set
@"<EFFuture>"16@?0@"EMRemoteContentURLCache"8
MailWebProcessBundle
bundle
PlugIns
remoteContentProxySchemePrefix
remoteContentNoProxySchemePrefix
isMailPrivacyProtectionAllowed
<html dir=auto><body><i><font color=#888>%@</font></i></body></html>
MESSAGE_CAUSED_PROBLEM
MESSAGE_UNAVAILABLE
MailDefaultsChangedNotification
Deceleration
LinesOfPreview
ShowMessageDeleteConfirmation
ConversationViewShowsNewestAtTop
ConversationViewExcludesRelatedMessages
CollapseReadConversationMessages
ShowToCCIndicators
POPDeleteIntervalKey
AuthSchemeKey
DisableThreading
DisableQuoteIncrease
outgoing_key
account
IncludeAttachmentReplies
IncludeAttachmentRepliesNever
IncludeAttachmentRepliesWhenAdding
IncludeAttachmentRepliesAsk
IncludeAttachmentRepliesAlways
UseRichLinks
UseRichLinksKeyChangedNotification
LeftEdgeSwipeAction
RightEdgeSwipeAction
SwipeActionNone
SwipeActionRead
SwipeActionFlag
SwipeActionMove
SwipeActionArchive
SwipeActionTrash
SwipeActionAlternateDestructiveAction
MailApplicationDidChangeRemoteImageLoading
MailApplicationDidChangePreviewLinesNotification
MailApplicationDidChangeShowToCCNotification
MailApplicationDidChangeSwipeActions
MailApplicationDidChangeConversationOrder
MailApplicationDidChangeConversationViewIncludesRelatedMessages
MailApplicationDidChangeConversationViewCollapseReadMessagesNotification
MailApplicationDidChangeAccountDisplayName
MailApplicationDidFinishLaunching
MailApplicationMemoryWarningNotification
MailApplicationStatusBarProgressDidHide
MailApplicationsDisableThreadingKeyChanged
MailApplicationProtectedDataWillBecomeUnavailable
MailApplicationProtectedDataDidBecomeAvailable
MailApplicationProtectedDataWasReconciled
MailApplicationProtectedDataForMailboxWasReconciled
MailInternalSettingsDidChange
MailNavigationControllerWillShowViewControllerNotification
MailNavigationControllerDidShowViewControllerNotification
MailNavigationControllerNewViewControllerKey
MailNavigationControllerPreviousViewControllerKey
MailNavigationControllerAnimatedKey
SharedMailboxControllerBadgeCountDidChange
SharedNetworkControllerBadgeCountKey
MainScene
ComposeScene
ConversationScene
QuickLookScene
ActiveDraftIdentifier
mailIncreasedContrastRed
mailDarkGrayColor
mailMoreButtonGrayColor
mailSystemLightGrayColor
@"UIColor"16@?0@"UITraitCollection"8
mailVibrantDarkColor
mailVibrantLightColor
mailAccountCellTitleColor
mailPreviousDraftPickerHeaderTextColor
mailConversationViewCellBackgroundColor
mailConversationViewCollapsedCellLabelColor
mailMessageListPrimarySelectionColor
mailMessageListSecondarySelectionColor
mailMessageListTertiarySelectionColor
mailSnippetHighlightColor
VIPManager.m
+setBackingManager: must be called before attempting to get the default instance
q24@?0@"EMVIP"8@"EMVIP"16
_try_catch_wrap(%@).apply(null, %@);
v24@?0@8@"NSError"16
@"<EFFuture>"16@?0@"EFFuture"8
An error occured trying to retrieve a dictionary from JS function, please check previous logging for issue!
Content Item %{public}@ generated snippet: %@
error creating pass from content item %{public}@: %{public}@
content item %{public}@ had neither a storage or data transfer byte count
injecting attachment element, failed to load content item %{public}@
tapped unknown attachment %@
tapped attachment %@
Removing and re-creating task: %@
#Attachments Error saving Maildrop image: %{public}@
#Attachments Error reading extracted archive entry %@
#Attachments Error opening zip at %@.
Content item is already displayed inline (%{public}@)
UTType does not conform to PDF (%{public}@)
Failed to get data from url (%{public}@) %{public}@
Content request for message %{public}@ already issued
MessageContentRepresentationRequest
itemID=%{signpost.description:attribute,public}@
MessageContentRepresentationRequestFailed
Issuing content request for message %{public}@
 enableTelemetry=YES 
Content request for message %{public}@ loaded successfully
Content request for message %{public}@ failed to load with error: %{public}@
retry-attempt=%{signpost.description:attribute,public}hhu
Mail Privacy Protection Alert with returnCode dismiss
Turning on Mail Privacy Protection Alert
#Attachments nil date string result for meta data [%@] expiration [%@]
loading message %{public}@ had error (%{public}@/%ld): fragment %{public}@
#Warning [MCVLog] %{public}@
[MCVError] Unhandled JS Exception: %{public}@ "%@" - callstack: %{public}@
Got NULL value for SeeMoreButtonTappedWithYOffset
message content view loading
<%{public}@: %p>: Displaying message for header view model: %{public}@
<%{public}@: %p>: set message content request: %{public}@ for message: %{public}@
MFMessageContentView
<%{public}@: %p>: %{public}@ for message: %{public}@
<%{public}@: %p>: Skipping content request. Content representation is nil
<%{public}@: %p>: set nil content request, removing loading indicator
<%{public}@: %p>: setPreviousContentSnapshot:%p (was %p)
<%{public}@: %p>: adding previousContentSnapshotWrapperView: %p
<%{public}@: %p>: removing previousContentSnapshotWrapperView: %p
<%{public}@: %p>: contentRepresentation requested before it finished loading: %{public}@
<%{public}@: %p>: Reloading web view (background crash count: %ld)
<%{public}@: %p>: bringing loading view to front: %p
<%{public}@: %p>: bringing previous content snapshot wrapper view to front: %p
<%{public}@: %p>: showing delayed progress indicator
<%{public}@: %p>: loadingIndicatorVisible=%@ (view: %p wasVisible %@)
-[MFMessageContentView contentRequestDidReceiveContentRepresentation:error:]
<%{public}@: %p>: Error loading content represenation for message %@ : %{public}@
<%{public}@: %p>: Request webView load for message-id: %{public}@, representation: %{public}@
<%{public}@: %p>: URLs to load without proxy: %{public}@
Waiting for a WebKit presentation update for message - libraryid=%{public}@
ask webkit to take a snapshot - libraryid=%{public}@
ERROR converting dictionary keys/values to CGRect, %@
<%{public}@: %p> Web process did fail to load for content request: %{public}@, message: %{public}@
-[MFMessageContentView webProcessDidFinishDocumentLoadForURL:andRequestedRemoteURLs:]
<%{public}@: %p> Web process did finish load for content request: %{public}@ message: %{public}@
<%{public}@: %p> Web process did block loading resource for content request: %{public}@ message: %{public}@
<%{public}@: %p> Web process did fail to load content request: %{public}@ message: %{public}@
<%{public}@: %p>: Displaying failed proxy load banner due to: %{public}@
<%{public}@: %p>: Blocking file:// URL from web view.
<%{public}@: %p>: Blocking prefs: URL from web view.
<%{public}@: %p>: Blocking navigation action for request whose target frame is not the main frame (iframe, probably): %@
<%{public}@: %p>: rendering progress did first paint, removing loading indicator
<%{public}@: %p>: removing previous content snapshot
<%{public}@: %p>: Message Content View did fail navigation: %{public}@
<%{public}@: %p>: %{public}@ %@ (pid: %d)
<%{public}@: %p>: %{public}@ %@ (pid: %d; reason: %ld; background crash count: %ld)
<%{public}@: %p>: %{public}@ %@ (pid: %d; reason: %ld; crash count: %ld; activation state: %ld)
Failed to decode attachment previews: %@
Skipping lockdown first use message
WebView=%{signpost.description:attribute,public}p itemID=%{signpost.description:attribute,public}@ AccountType=%{public, signpost.telemetry:number1}lu Status=%{public, signpost.telemetry:number2}ld enableTelemetry=YES 
didBeginTextSearch: self = %p, webView = %p, searchWasActive = %{BOOL}d, searchIsActive = %{BOOL}d
didEndTextSearch: self = %p, webView = %p, searchWasActive = %{BOOL}d, searchIsActive = %{BOOL}d
%s: webview %@ returned rect for range: %@, item: %@, style: %lu
<%{public}@: %p>: Killing and resetting webview: %@
<%{public}@: %p>: Sending request to reload webview: %@
<%{public}@: %p>: Sending request to stop loading webview: %@
<%{public}@: %p>: Sending request to load webview with content representation: %{public}@
<%{public}@: %p>: Sending request to load webview with error: %{public}@
<%{public}@: %p>: Sending request to load webview with loading URL: %@
<%{public}@: %p>: updatingWebProcessPlugin
Perform block
RELOAD WIDGET TIMELINE
Reload timelines failed with error: %{public}@
Reload timelines
Reload timelines completed (success=%{BOOL}d) enableTelemetry=YES 
Preallocate webViews
Failed to find a message for error: %{public}@
#MailServices saveVIP: %@
#MailServices deleteVIPWithIdentifier: %@
?ffffff
ffffff
?UUUUUU
@@333333
//  Copyright 
 2015 Apple Inc. All rights reserved.
var ATTACHMENT_STATE = {
DEFAULT : 1,
DOWNLOADABLE : 2,
DOWNLOADING : 3,
function AttachmentElement(dom_element) {
this.dom_element = dom_element;
this.downloadableStatus = this.dom_element.getAttribute("_mf_downloadableStatus");
this.downloadingStatus = this.dom_element.getAttribute("_mf_downloadingStatus");
var elem_ref = this;
this.dom_element.onclick = function(e) {
        // Ignore control/right clicks since that goes through [MFMessageContentView _webView:contextMenuConfigurationForElement:...]
        if (e.button == 0 && !e.ctrlKey) {
            elem_ref.onClick();
        }
    };
AttachmentElement.prototype = {
setState : function(state) {
        var currentState = this.dom_element.getAttribute('_mf_state');
        if (state != currentState) {
            this.dom_element.setAttribute('_mf_state', state);
            switch(state) {
                case ATTACHMENT_STATE.DEFAULT:
                    this.dom_element.removeAttribute('action');
                    this.dom_element.removeAttribute('progress');
                    break;
                case ATTACHMENT_STATE.DOWNLOADABLE:
                    this.dom_element.setAttribute('action', this.downloadableStatus);
                    this.dom_element.removeAttribute('progress');
                    break;
                case ATTACHMENT_STATE.DOWNLOADING:
                    this.dom_element.setAttribute('action', this.downloadingStatus);
                    this.dom_element.setAttribute('progress', '0.0');
                    break;
            }
            // force a layout update - removing the action attribute is not enough
            this.dom_element.setAttribute('title', this.dom_element.getAttribute('title'));
        }
    },
    setProgress : function(value) {
        this.dom_element.setAttribute('progress', value);
    },
onClick : function() {
// For testing
        // simulate_download_attachment_for_cid(this.dom_element.id);
        var content_id = this.dom_element.id;
        var message = {
            element_id : content_id,
            rect : getRectForElementWithID(this.dom_element.id),
        };
        
        window.webkit.messageHandlers.AttachmentNodeWasTapped.postMessage(message);
function attachment_element_for_cid(cid) {
    var attachmentNode = null;
    var elem = document.getElementById(cid);
    // Only applicable to attachment icons and inline attachment previews
    if (elem && (elem.tagName.toLowerCase() == "attachment" || elem.tagName.toLowerCase() == "img")) {
        attachmentNode = new AttachmentElement(elem);
    } else {
        // Inline images may have an id that differs from cid
        var images = document.getElementsByTagName('img');
        for (var i = 0; i < images.length; ++i) {
            if (images[i].src == "cid:"+cid) {
                elem = images[i];
                attachmentNode = new AttachmentElement(elem);
                break;
            }
        }
    }
    return attachmentNode;
 * Installs the AttachmentElement click handler on each attachment element.
function addClickHandlersForNodes(nodes, elements) {
    for (var i = 0; i < nodes.length; i++) {
        var attachmentNode = nodes[i];
        
        elements.push(new AttachmentElement(attachmentNode));
    }
function updateAttachmentClickHandlers() {
    var elements = []
    addClickHandlersForNodes(document.getElementsByTagName("attachment"), elements);
    addClickHandlersForNodes(document.getElementsByTagName("img"), elements);
    return elements
/// For testing
function simulate_download_attachment_for_cid(cid) {
var attachment = attachment_element_for_cid(cid);
attachment.setState(ATTACHMENT_STATE.DOWNLOADING);
function did_finish() {
attachment.setState(ATTACHMENT_STATE.DEFAULT);
var simulated_progress = 0.0;
var interval_handle = setInterval(function() {
simulated_progress += 0.01;
        attachment.setProgress(simulated_progress);
if (simulated_progress >= 1.0) {
clearInterval(interval_handle);
did_finish();
}, (1000 / 30));
// Functions to be called from native code //
/* extern */ function set_state_for_attachment_cid(cid, state) {
var attachment_elem = attachment_element_for_cid(cid);
    if (attachment_elem) {
        attachment_elem.setState(state);
    }
/* extern */ function set_progress_for_attachment_cid(cid, progress) {
var attachment_elem = attachment_element_for_cid(cid);
    if (attachment_elem) {
        attachment_elem.setProgress(progress);
    }
/* Utility Functions */
var g_edgeToEdgeRule = null;
var g_additionalBodyStyleRule = null;
var g_documentReformatter = new MailDocumentReformatter();
var g_viewportConfigurationDictionary = {};
var g_documentNeedsReformat = false;
function MCVLog(string) {
    console.log(string); // if a debug console is attached...
    window.webkit.messageHandlers.MCVLog.postMessage(string);
/* Global Exception Handling */
function MCVError(error) {
    var message = {
        "name" : error.name,
        "message" : error.message,
        "stack" : error.stack,
        "error" : JSON.stringify(error),
    };
    window.webkit.messageHandlers.MCVError.postMessage(message);
window.onerror = function (message) {
    MCVError(new Error(message));
function _try_catch_wrap(func) {
    if (!func._mf_wrapped) {
        func._mf_wrapped = function () {
            var result = null;
            try {
                result = func.apply(this, arguments);
            }
            catch (e) {
                MCVError(e);
                throw e;
            }
            return result;
        }
    }
    return func._mf_wrapped;
window.addEventListener("error", event => {
    if (event.target instanceof HTMLImageElement && event.target.src) {
        window.webkit.messageHandlers.ImageError.postMessage(event.target.src);
    }
}, true)
var nativeAddEventListener = window.EventTarget.prototype.addEventListener;
var nativeRemoveEventListener = window.EventTarget.prototype.removeEventListener;
window.EventTarget.prototype.addEventListener = function (event, callback, bubble) {
    nativeAddEventListener.call(this, event, _try_catch_wrap(callback), bubble);
window.EventTarget.prototype.removeEventListener = function (event, callback, bubble) {
    nativeRemoveEventListener.call(this, event, callback._mf_wrapped || callback, bubble);
/* - - -- --- ----- -------- ----- --- -- - - */
function _styleForSystemAppearance() {
    var shouldBeLight = false;
    var shouldUseColorFilter = true;
    var declaredColorSchemes = this._declaredColorSchemes();
    if (declaredColorSchemes) {
        shouldUseColorFilter = false;
        if ((declaredColorSchemes.includes("light") || declaredColorSchemes.includes("only")) && !declaredColorSchemes.includes("dark")) {
            shouldBeLight = true;
        }
    }
    else {
        // Check to see if the document can still use dark mode via the colorFilter
        var imageElements = document.body.querySelectorAll("img");
        for (i = 0; i < imageElements.length; i++) {
            var image = imageElements[i];
            if (image.src.startsWith("http") && (image.width > 1 || image.height > 1) && !image.className.includes("lp-rich-link")) {
                shouldBeLight = true;
                break;
            }
        }
        var style = window.getComputedStyle(document.body);
        if (style.backgroundImage !== "none") {
            shouldBeLight = true;
        }
    }
    if (shouldBeLight) {
        document.documentElement.classList.add('apple-mail-light-only');
    } else if (shouldUseColorFilter) {
        document.documentElement.classList.add('apple-mail-implicit-dark-support');
    }
// Returns a parsed array of values for the `color-scheme` property or meta tag; if it exists.
// This also normalizes the values to lowercase. (see rdar://problem/45879558 & rdar://problem/50096600)
function _declaredColorSchemes() {
    // Add a style class that disables the color-scheme property temporarily so this code can check
    // for color-scheme usage in the author styles.
    document.documentElement.classList.add("testing-dark-mode");
    // Check for the 'color-scheme' CSS property in computed style on the document element.
    // This property takes precedence over the meta tag in WebKit, so it needs checked first.
    // This is auto aliased by WebKit from the deprecated 'supported-color-schemes' property,
    // so this code only needs to check the colorScheme name to support both.
    var colorSchemeProperty = window.getComputedStyle(document.documentElement).colorScheme;
    if (colorSchemeProperty && colorSchemeProperty !== "auto") {
        let result = colorSchemeProperty.split(/\s+/);
        if (result && result.length) {
            document.documentElement.classList.remove("testing-dark-mode");
            return result;
        }
    }
    document.documentElement.classList.remove("testing-dark-mode");
    // Try the 'color-scheme' or deprecated 'supported-color-schemes' meta tag.
    var colorSchemesMetaElements = document.querySelectorAll("meta[name='color-scheme']");
    if (!colorSchemesMetaElements)
        colorSchemesMetaElements = document.querySelectorAll("meta[name='supported-color-schemes']");
    var lastColorSchemesMetaElement = colorSchemesMetaElements ? colorSchemesMetaElements[colorSchemesMetaElements.length - 1] : null;
    if (lastColorSchemesMetaElement && lastColorSchemesMetaElement.content) {
        let result = lastColorSchemesMetaElement.content.toLowerCase().split(/\s+/);
        if (result && result.length)
            return result;
    }
    return null;
function LOCSTRING(key) {
    var locstrings = window.externalConstants.getValue("localizedStrings");
    return locstrings[key] ? locstrings[key] : key;
function _getViewportMetatag() {
    var metatag = null;
    var metatags = document.getElementsByTagName("meta");
    for (var metatag_i in metatags) {
        var tag = metatags[metatag_i];
        if (tag.name == "viewport") {
            metatag = tag;
            break;
        }
    }
    return metatag;
function _updateViewportMetatag() {
    var metatag = _getViewportMetatag();
    if (metatag == null) {
        metatag = document.createElement("meta");
        metatag.name = "viewport";
        document.head.appendChild(metatag);
    }
    var content = "";
    if (g_viewportConfigurationDictionary["viewport-width"]) {
        content += "width = " + g_viewportConfigurationDictionary["viewport-width"];
    }
    if (g_viewportConfigurationDictionary["initial-scale"]) {
        content += ", initial-scale = " + g_viewportConfigurationDictionary["initial-scale"];
    }
    metatag.content = content;
/* Post fix methods */
function setViewportWidth(viewportWidth) {
    if (viewportWidth != getViewportWidth()) {
        g_viewportConfigurationDictionary["viewport-width"] = viewportWidth;
        _updateViewportMetatag();
    }
function getViewportWidth() {
    var result = NaN;
    var metatag = _getViewportMetatag();
    if (null != metatag) {
        var matches = metatag.content.match(/width\s*=\s*([^, ]*)/);
        if (matches) {
            result = parseInt(matches[1]);
        }
    }
    return result;
function setInitialScale(initialScale) {
    g_viewportConfigurationDictionary["initial-scale"] = initialScale;
    _updateViewportMetatag();
function fixRelativeElementHeights() {
    // Since conversation view, our viewport width is supposed to start at 1px and grow just to perfectly fit the
    // contents inside. If a document has a top-level element that is 100% height, it will be rendered at 1px height,
    // which is not expected. It's expected that top-level elements defined to have 100% height should be redered at
    // the height of the screen, so let's fix that here.
    if (document.body.getBoundingClientRect().height < 5.0 /* usually 1, but add a few just to make sure */) {
        var comfortableScreenHeight = 900; // doesn't have to be accurate.
        var nextElement = null;
        var nodeIterator = document.createNodeIterator(document.body, NodeFilter.SHOW_ELEMENT);
        while ( (nextElement = nodeIterator.nextNode()) ) {
            var found = false;
            // We have to do this to trick because if we ask the CSSStyleDeclaration for it's "height", we'll get it's actual
            // computed height instead of the height defined in CSS by the document author.
            var previousDisplayValue = nextElement.style.getPropertyValue("display");
            nextElement.style.setProperty("display", "none");
            if (nextElement.getAttribute("height") == "100%") {
                nextElement.setAttribute("height", comfortableScreenHeight + "px");
                found = true;
            }
            var computedStyle = window.getComputedStyle(nextElement);
            var computedHeight = computedStyle.height;
            if (computedHeight == "100%" || computedHeight == "auto") {
                nextElement.style.setProperty("height", comfortableScreenHeight + "px");
                found = true;
            }
            nextElement.style.setProperty("display", previousDisplayValue);
            if (found) break;
        }
    }
function message_on_document_load() {
    setViewportWidth(window.externalConstants.getValue("viewport-width"));
    setInitialScale(window.externalConstants.getValue("initial-scale"));
    
    // Needs to be called before updatePadding() and updateEdgeToEdgeStyle()
    prepareBaseFormattingStylesheet();
    updatePadding();
    console.log("calling _styleForSystemAppearnace()");
    self._styleForSystemAppearance();
    window.externalConstants.onChangeCallback = function(changedKeys) {
        if (changedKeys.includes("padding")) {
            updatePadding();
        }
        if (changedKeys.includes("viewport-width")) {
            var oldViewportWidth = g_documentReformatter.currentDocumentViewportWidth();
            var newViewportWidth = window.externalConstants.getValue("viewport-width");
            setViewportWidth(newViewportWidth);
            if (newViewportWidth != oldViewportWidth) {
                g_documentReformatter.reformat();
            }
        }
    };
    // Post-processing pipeline
    fixOutdentedAttributions();
    updateEdgeToEdgeStyle(true); // true = notify about image elements
    updateAttachmentClickHandlers();
    findBlockquotes();
    if (window.externalConstants.getValue("collapseQuotedContent")) {
        findAndCollapseBlockquotes();
    }
    fixRelativeElementHeights();
    g_documentReformatter.loggingEnabled = true;
    g_documentReformatter.reformat();
    startObservingSelection();
function startObservingSelection () {
    document.onselectionchange = function() {
        var currentSelectedText = window.getSelection();
        var selectedHTML = "";
        if (currentSelectedText.rangeCount > 0) {
            var range = currentSelectedText.getRangeAt(0);
            //creating a new representation of selected text
            var selectedTextHtmlContainer = document.createElement("div");
            for (var i = 0, len = currentSelectedText.rangeCount; i < len; ++i) {
                var currentContent = currentSelectedText.getRangeAt(i).cloneContents();
                selectedTextHtmlContainer.appendChild(currentContent);
            }
            if (selectedTextHtmlContainer.textContent.length > 0) {
                //Remove data detector tags.
                var linkTags = selectedTextHtmlContainer.getElementsByTagName("A");
                //copy linkTags into its own array so we don't live update and skip elements.
                linkTags = Array.prototype.slice.call(linkTags, 0);
                for (var i = 0; i < linkTags.length; i++) {
                    var tag = linkTags[i];
                    if (tag.getAttribute("x-apple-data-detectors") == "true") {
                        var span = document.createElement("span");
                        span.innerHTML = tag.innerHTML;
                        tag.replaceWith(span);
                    }
                }
                selectedHTML = selectedTextHtmlContainer.innerHTML;
            }
        }
        window.webkit.messageHandlers.TextSelected.postMessage(selectedHTML);
    };
//----------------------------------------
// Padding & Friends.
//----------------------------------------
function prepareBaseFormattingStylesheet() {
    if (g_edgeToEdgeRule == null) {
        // Create and insert a style element at the top of of the document's HEAD
        var styleElement = document.createElement("style");
        styleElement.type = "text/css";
        styleElement.title = "x-apple-mail-formatting";
        document.head.insertBefore(styleElement, document.head.firstChild);
        
        var styleSheet = styleElement.sheet;
        // Create a rule to hold additional body styles
        styleSheet.insertRule("BODY {}", 0);
        g_additionalBodyStyleRule = styleSheet.rules[0];
        
        // Create a rule for the edge-to-edge class
        styleSheet.insertRule(".x-apple-edge-to-edge {}", 0);
        g_edgeToEdgeRule = styleSheet.rules[0];
    }
function updatePadding() {
    var padding = window.externalConstants.getValue("padding");
    var important = !!window.externalConstants.getValue("useWideLayout");
    
    var priority = null;
    
    // If the BODY's CSS rules have 100% width or min-width, then the author
    // *really* wants their email to go full width. Don't make our padding important
    // so we don't clash with the author's intended design.
    if (important && !_bodyHas100PercentWidth()) {
        priority = "important";
    }
    
    // For some reason I'm unable to change the rule's padding once it's been marked important once.
    // Clearing the rule's text before adding the padding gets the job done.
    // Note: CSSRule.removeProperty() isn't working here either.
    g_additionalBodyStyleRule.style.cssText = "";
    g_additionalBodyStyleRule.style.setProperty("padding", padding, priority);
    
    updateEdgeToEdgeStyle(false);
function _bodyHas100PercentWidth() {
    var has100PercentWidth = false;
    
    var allBodyRules = window.getMatchedCSSRules(document.body);
    
    if (allBodyRules != undefined) {
        for (var i=0; i<allBodyRules.length; i++) {
            var rule = allBodyRules[i];
            
            if (rule.style.width == "100%" || rule.style.minWidth == "100%") {
                has100PercentWidth = true;
                break;
            }
        }
    }
    
    return has100PercentWidth;
//----------------------------------------
// Edge-to-Edge Image Styling.
//----------------------------------------
 * Iterates through all image elements in the document and applies or removes edge-to-edge styling as needed.
function updateImagesNeedingEdgeToEdgeStyling(shouldNotifyAboutImageAttachments) {
    var imgNodes = document.getElementsByTagName("img");
    var attachmentImageNodesInfo = [];
    for (var i = 0; i < imgNodes.length; i++) {
        var imgNode = imgNodes[i];
        applyEdgeToEdgeStylingToNodeWhenComplete(imgNode);
        var src = imgNode.src;
        if (shouldNotifyAboutImageAttachments && src) {
            var matches = src.match(/^cid:(.*)/);
            if (matches) {
                var imageNodeID = imgNode.id;
                if (undefined === imageNodeID || 0 == imageNodeID.length) {
                    // there's no ID on this cid: image node. just use the contentID
                    imgNode.id = matches[1];
                }
                let identifier = HTMLAttachmentElement.getAttachmentIdentifier(imgNode);
                attachmentImageNodesInfo.push({
                                              "src" : imgNode.src,
                                              "elementID" : imgNode.id,
                                              "contentID" : matches[1],
                                              "wkIdentifier" : identifier,
                                              });
            }
        }
    }
    if (0 < attachmentImageNodesInfo.length) {
        window.webkit.messageHandlers.FoundImageCIDAttachments.postMessage(attachmentImageNodesInfo)
    }
function elementQualifiesForEdgeToEdgeStyling(node) {
    if (node.style.position == "static") return false;
    if (node.hasAttribute("width") && !node.hasAttribute("apple-width")) return false;
    if (nodeHasAncestorWithTag(node, "BLOCKQUOTE")) return false;
    if (nodeHasAncestorWithTag(node, "TABLE")) return false;
    return true;
 * Applies edge-to-edge class immediately if the given node is complete.
 * Otherwise, adds an event listener that applies the edge-to-edge class on load.
function applyEdgeToEdgeStylingToNodeWhenComplete(node) {
    if (elementQualifiesForEdgeToEdgeStyling(node)) {
        if (node.complete) {
            applyEdgeToEdgeStylingToNodeIfNeeded(node);
        } else {
            node.setAttribute("x-apple-pending-edge-to-edge", true);
            node.addEventListener("load", function () {
                node.removeAttribute("x-apple-pending-edge-to-edge");
                applyEdgeToEdgeStylingToNodeIfNeeded(this);
            }, true);
        }
    }
 * Updates the document's standard edge-to-edge CSS rule. Should be called when ever the body's padding changes.
function updateEdgeToEdgeStyle(shouldNotifyAboutImageAttachments) {
    if (g_edgeToEdgeRule != null) {
        var computedBodyStyle = window.getComputedStyle(document.body);
        var leftPadding = parseInt(computedBodyStyle.paddingLeft);
        var rightPadding = parseInt(computedBodyStyle.paddingRight);
        if (!(isNaN(leftPadding) || isNaN(rightPadding))) {
            leftPadding += "px";
            rightPadding += "px";
            var width = "calc(100% + " + leftPadding + " + " + rightPadding + ")";
            var marginLeft = "-" + leftPadding;
            g_edgeToEdgeRule.style.width = width;
            g_edgeToEdgeRule.style.marginLeft = marginLeft;
        }
    }
    updateImagesNeedingEdgeToEdgeStyling(shouldNotifyAboutImageAttachments);
 * Applies the appropriate edge-to-edge class to the given node if it qualifies for edge-to-edge styling.
function applyEdgeToEdgeStylingToNodeIfNeeded(node) {
    var computedBodyStyle = window.getComputedStyle(document.body);
    var leftPadding = parseInt(computedBodyStyle.paddingLeft);
    var rightPadding = parseInt(computedBodyStyle.paddingRight);
    var viewportWidth = getViewportWidth();
    // If the body's padding, or viewport isn't defined yet, then we shouldn't attempt this.
    // This method should get another call when the body padding is updated.
    if (!isNaN(leftPadding) && !isNaN(rightPadding) && !isNaN(viewportWidth)) {
        // Remove old edge-to-edge classes if they exist
        node.classList.remove("x-apple-wide-margin-edge-to-edge");
        node.classList.remove("x-apple-edge-to-edge");
        // Only apply edge-to-edge style if all of the following are true...
        // 1: The image is naturally wider than the maximum content width
        // 2: The image element isn't statically positioned
        // 3: The image element doesn't have a width defined by the content creator (not set by an Apple mail client)
        // 4: the image element isn't contained in a block quote or table
        var maxContentWidth = viewportWidth - (leftPadding + rightPadding);
        if (node.naturalWidth < maxContentWidth) return;
        if (!elementQualifiesForEdgeToEdgeStyling(node)) return;
        var hasCozyMargins = (leftPadding > 30.0) && (rightPadding > 30.0);
        var nodeClass = hasCozyMargins ? "x-apple-wide-margin-edge-to-edge" : "x-apple-edge-to-edge";
        node.classList.add(nodeClass);
        node.removeAttribute("width");
        node.removeAttribute("height");
    }
 * Checks if the given node has an ancestor with the given tag.
function nodeHasAncestorWithTag(node, tag) {
    var hasAncestorWithTag = false;
    var parentNode = node.parentNode;
    while (parentNode != null) {
        if (parentNode.tagName != null && parentNode.tagName.toUpperCase() == tag.toUpperCase()) {
            hasAncestorWithTag = true;
            break;
        }
        parentNode = parentNode.parentNode;
    }
    return hasAncestorWithTag;
//----------------------------------------
// Image Functions
//----------------------------------------
 * Forces a displayed image element to reload. This will cause WebKit to ignore its cache for this image and
 * hit MobileMail's attachment manager for the image data, allowing us to display an updated image.
function refreshImageWithContentID(contentID) {
    var images = document.getElementsByTagName("img");
    var oldImageSRC = "cid:"+contentID;
    oldImageSRC = oldImageSRC.toUpperCase();
    for (var i = 0; i < images.length; i++) {
        var image = images[i];
        if (image.src.toUpperCase() == oldImageSRC) {
            // Giving the image SRC a query will cause WebKit to think it's a completely different URL.
            // We currently ignore query parameters in our attachment manager and focus on the CID component of the URL.
            image.src += "?x-apple-mail-forceupdate";
            break;
        }
    }
 * Called when an image that isn't referenced in the DOM finishes downloading.
 * This finds the attachment node with the given id and swaps it out for an image element with the SRC cid:<nodeId>.
function imageAttachmentNodeFinishedDownloading(nodeId, markup) {
    var attachmentNode = document.getElementById(nodeId);
    if (attachmentNode && attachmentNode.tagName.toLowerCase() == "attachment") {
        attachmentNode.outerHTML = markup;
        var imgElement = document.getElementById(nodeId);
        applyEdgeToEdgeStylingToNodeWhenComplete(imgElement);
        
        imgElement.onclick = function() {
            var message = {
                element_id : nodeId,
                rect : getRectForElementWithID(nodeId),
            };
            
            window.webkit.messageHandlers.AttachmentNodeWasTapped.postMessage(message);
        };
    }
function replaceNodeWithSrcWithHTML(src, htmlRepresentation, installAttachmentClickHandler = false) {
    var element = null;
    function elementWithSrcForTagName(src, tagName) {
        var nodes = document.getElementsByTagName(tagName);
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes.item(i);
            if (node.src == src) {
                return node;
            }
        }
    }
    // Fast path. See if there's an img element with the source attribute
    element = elementWithSrcForTagName(src, "img");
    if (!element) {
        // Slow path. Enumerate all elements
        element = elementWithSrcForTagName(src, "*");
    }
    if (element) {
        var newParentElement = document.createElement("div");
        newParentElement.innerHTML = htmlRepresentation;
        var newNode = newParentElement.firstChild
        element.parentNode.replaceChild(newNode, element);
        if (installAttachmentClickHandler) {
            new AttachmentElement(newNode);
        }
    }
function replaceNodeWithSrcWithAttachment(src, htmlRepresentation) {
    replaceNodeWithSrcWithHTML(src, htmlRepresentation, true);
function addPoint(point1, point2) {
    return {
        x: point1.x + point2.x,
        y: point1.y + point2.y,
    };
 * Returns the position of {element} relative to the document.
 * @param element : Element to find the position of
 * @returns {POINT object} Absolute position of {element} as a dict containing keys 'x' and 'y'.
function getElementPosition(element) {
    if (element == null) {
        return { x: 0, y: 0 };
    } else {
        return addPoint({ x: element.offsetLeft, y: element.offsetTop }, getElementPosition(element.offsetParent));
    }
 * Returns the bounding box of the element with ID {elementID}
 * @param elementID : ID of element
 * @returns {RECT object} Rectangle representing the absolute position {x/y} of the element
 *                        and bounding size {width/height}
function getRectForElementWithID(elementID) {
    var rect = { x: 0, y: 0, width: 0, height: 0 };
    var element = document.getElementById(elementID);
    if (element) {
        var position = getElementPosition(element);
        rect.x = position.x;
        rect.y = position.y;
        var computedStyle = window.getComputedStyle(element);
        rect.width = parseInt(computedStyle.width);
        rect.height = parseInt(computedStyle.height);
    }
    return rect;
function expandQuoteButtonTapped(blockquoteElement, seeMoreButton) {
    // Use this if we ever decide to expand inline:
    // expandBlockquote(blockquoteElement, seeMoreButton);
    var preOffsetTop = blockquoteElement.getAttribute("preOffsetTop");
    var currentOffset = getElementPosition(seeMoreButton);
    window.webkit.messageHandlers.ExpandQuoteButtonTappedWithYOffset.postMessage({
        'preOffsetTop' : preOffsetTop,
        'currentOffsetTop' : currentOffset.y,
    });
function expandBlockquote(blockquoteElem, seeMoreButton) {
    seeMoreButton.parentElement.removeChild(seeMoreButton);
    var targetHeight = blockquoteElem.getAttribute("preOffsetHeight");
    blockquoteElem.style.display = "";
    blockquoteElem.style.overflowY = "hidden";
    blockquoteElem.style.webkitAnimationDuration = "0.55s";
    var animUUID = "anim" + Date.now();
    var lastSheet = document.styleSheets[document.styleSheets.length - 1];
    lastSheet.insertRule("@-webkit-keyframes " + animUUID + "{ \
        from { \
            opacity: 0; \
            height: 0px; \
        } \
        to { \
            opacity: 1; \
            height: " + targetHeight + "px; \
        } \
    }", lastSheet.cssRules.length);
    blockquoteElem.style.webkitAnimationName = animUUID;
function shouldCollapseBlockquoteElement(blockquoteElement) {
    var sufficientSize = false;
    var lineGuess = 0;
    var charCount = 0;
    var nodeIterator = document.createNodeIterator(blockquoteElement, NodeFilter.SHOW_ALL);
    var node = null;
    while ( (node = nodeIterator.nextNode())) {
        if (node.nodeType === Node.ELEMENT_NODE) {
            if (node.tagName.toLowerCase() == "br") {
                lineGuess++;
            } else {
                if (node.childElementCount == 0) {
                    var computedStyle = window.getComputedStyle(node);
                    if (computedStyle.display == "block") {
                        // Block element with no children. This is a "line"
                        lineGuess++;
                    }
                }
            }
        }
        if (node.nodeType === Node.TEXT_NODE) {
            charCount += node.length;
        }
        if ((lineGuess > 5) || (charCount > 350)) {
            sufficientSize = true;
            break;
        }
    }
    return sufficientSize;
function clipBlockquotePreviewElement(previewElement, previewHeight, isBottom) {
    var contentWrapperClientRect = previewElement.getBoundingClientRect();
    var contentHeight = contentWrapperClientRect.height;
    if (contentHeight > previewHeight) {
        // Cribbed from OS X. This code makes sure we don't cut in the middle of a line.
        var contentWrapperRange = document.createRange();
        contentWrapperRange.selectNodeContents(previewElement);
        var textRects = contentWrapperRange.getClientRects();
        var startY = (isBottom) ? contentWrapperClientRect.bottom : contentWrapperClientRect.top;
        var minYCutoff = (isBottom) ? contentWrapperClientRect.top : contentWrapperClientRect.bottom;
        for (var index = 0; index < textRects.length; index++) {
            var effectiveIndex = (isBottom) ? textRects.length - index - 1 : index;
            var textRect = textRects[effectiveIndex];
            var currentY = 0;
            if (isBottom) {
                currentY = textRect.bottom;
                // Found a line that is closer to the boundary
                if ((currentY <= (startY - previewHeight)) && (currentY >= minYCutoff)) {
                    minYCutoff = currentY;
                }
            } else {
                currentY = textRect.top;
                // Found a line that is closer to the boundary
                if ((currentY >= (startY + previewHeight)) && (currentY <= minYCutoff)) {
                    minYCutoff = currentY;
                }
            }
        }
        previewHeight = (isBottom) ? (startY - minYCutoff) : (minYCutoff - startY);
        contentWrapperRange.detach();
        // TODO: Page scale?
        // var previewHeightInPx = Math.round(previewHeight / this.pageScale);
        var previewHeightInPx = Math.round(previewHeight);
        // Actually clip the contentWrapper
        previewElement.style.cssText += "height: " + previewHeightInPx + "px !important; overflow: hidden !important;";
    }
function collapseBlockquote(blockquoteElement, showPreview) {
    var preOffsetHeight = blockquoteElement.offsetHeight;
    blockquoteElement.setAttribute("preOffsetHeight", preOffsetHeight);
    var expandQuoteAnchor = document.createElement("a");
    expandQuoteAnchor.href = "#";
    expandQuoteAnchor.onclick = function() { expandQuoteButtonTapped(blockquoteElement, expandQuoteAnchor); };
    expandQuoteAnchor.ondragstart = function(event) { event.preventDefault(); };
    var seeMoreButton = document.createElement("div");
    seeMoreButton.className = "button";
    if (showPreview) {
        var topPreviewElement = document.createElement("div");
        topPreviewElement.appendChild(blockquoteElement.cloneNode(true));
        topPreviewElement.style.overflow = "hidden";
        var bottomPreviewElement = document.createElement("div");
        bottomPreviewElement.appendChild(blockquoteElement.cloneNode(true));
        bottomPreviewElement.style.overflow = "hidden";
        seeMoreButton.innerHTML = LOCSTRING("SHOW_QUOTED_CONTENT");
        expandQuoteAnchor.className = "_AppleShowQuotedContentButton";
        expandQuoteAnchor.appendChild(topPreviewElement);
        expandQuoteAnchor.appendChild(seeMoreButton);
        expandQuoteAnchor.appendChild(bottomPreviewElement);
        blockquoteElement.parentNode.insertBefore(expandQuoteAnchor, blockquoteElement);
        clipBlockquotePreviewElement(topPreviewElement, 42, false);
        clipBlockquotePreviewElement(bottomPreviewElement, 42, true);
        bottomPreviewElement.scrollTop = bottomPreviewElement.scrollHeight;
    }
    blockquoteElement.style.display = "none";
function findBlockquotes() {
    var blockquotesToExpand = false;
    
    var blockquotes = document.getElementsByTagName("blockquote");
    var outlookBlockquotes = collectTopLevelOutlookBlockquotes(document.body);
    
    if (blockquotes.length > 0 || outlookBlockquotes.length > 0){
        blockquotesToExpand = true;
    }
    
    window.webkit.messageHandlers.HasBlockquotesToExpand.postMessage(blockquotesToExpand);
function findAndCollapseBlockquotes() {
    function _saveOffsetTopForElement(element) {
        var elementPosition = getElementPosition(element);
        element.setAttribute("preOffsetTop", elementPosition.y);
    }
    // First check for outlook blockquotes
    var outlookBlockquotes = collectTopLevelOutlookBlockquotes(document.body);
    if (outlookBlockquotes.length > 0) {
        for (var i = 0; i < outlookBlockquotes.length; i++) {
            var element = outlookBlockquotes[i];
            collapseBlockquote(element, showPreview = false);
        }
        return; // don't do our normal blockquote collapsing.
    }
    // Find all topmost blockquote elements. Don't bother collapsing children.
    var topBlockquoteElements = [];
    var blockquotes = document.getElementsByTagName("blockquote");
    for (var i = 0; i < blockquotes.length; i++) {
        var element = blockquotes.item(i);
        var topmostBlockquoteElement = element;
        while ( element.parentElement != null ) {
            element = element.parentElement;
            if ( element.tagName.toLowerCase() == "blockquote" ) {
                topmostBlockquoteElement = element;
            }
        }
        if (topBlockquoteElements.indexOf(topmostBlockquoteElement) == -1) {
            topBlockquoteElements.push(topmostBlockquoteElement);
            // Save this now, because after we start collapsing stuff above, this value will change.
            _saveOffsetTopForElement(topmostBlockquoteElement);
        }
    }
    // Collect sibling blockquotes. Plaintext messages, and even messages from richtext composers, will sometimes
    // have a blockquote element after every line break.
    var elementsToCollapse = [];
    var elementsAbsorbed = [];
    for (var i = 0; i < topBlockquoteElements.length; i++) {
        var element = topBlockquoteElements[i];
        if (elementsAbsorbed.indexOf(element) != -1) {
            continue;
        }
        
        var adjacentBlockquote = function(blockquote) {
            var nextElementSibling = blockquote.nextElementSibling;
            if (!nextElementSibling || nextElementSibling.tagName !== "BLOCKQUOTE") {
                return null;
            }
            var rangeBetweenBlockquotes = document.createRange();
            rangeBetweenBlockquotes.setStartAfter(blockquote);
            rangeBetweenBlockquotes.setEndBefore(nextElementSibling);
            return rangeBetweenBlockquotes.text().length ? null : nextElementSibling;
        }
        
        var blockquote = adjacentBlockquote(element);
        if (blockquote) {
            var newElement = document.createElement("div");
            element.parentNode.insertBefore(newElement, element);
            _saveOffsetTopForElement(newElement);
            do {
                while (true) {
                    var sibling = element.nextSibling;
                    newElement.appendChild(element);
                    elementsAbsorbed.push(element);
                    
                    if (element === blockquote) {
                        element = sibling;
                        break;
                    }
                    element = sibling;
                }
                
                blockquote = adjacentBlockquote(newElement);
            } while (blockquote);
            elementsToCollapse.push(newElement);
        } else {
            elementsToCollapse.push(element);
        }
    }
    for (var i = 0; i < elementsToCollapse.length; i++) {
        var element = elementsToCollapse[i];
        // Determine whether or not to show a preview of the collapsed content.  We'll show a preview if it's not the
        // bottom blockquote.
        var isBottomBlockquote = false;
        var isLastBlockquote = (i == (elementsToCollapse.length - 1));
        if (isLastBlockquote) {
            // ... but just because it's the last blockquote doesn't mean it's the *bottom* blockquote. We have to check here to see if
            // this blockquote is actually at the bottom of the message. We do so by looking at a flat hierarchy of this blockquote's
            // sibling elements, counting the length of the text in these elements (removing whitespace). If the length is zero, then
            // that means the siblings have no valuable content, and thus this element is at the "bottom".
            function nextFlatSibling(elem) { return elem.nextSibling ? elem.nextSibling : elem.parentNode.nextSibling; }
            function siblingTextContentLength(elem) {
                if (!elem) return 0;
                var elemContent = "";
                
                switch (elem.nodeType) {
                    case Node.TEXT_NODE:
                        elemContent = elem.data;
                        break;
                        
                    case Node.ELEMENT_NODE:
                        // We only care about this element if it's visible.
                        var computedStyle = window.getComputedStyle(elem);
                        if (computedStyle && computedStyle.display !== "none") {
                            elemContent = elem.textContent;
                        }
                        
                        break;
                    default:
                        break;
                }
                
                return elemContent.replace(/(\n)|(\s+)/g, "").length + siblingTextContentLength(nextFlatSibling(elem));
            }
            var siblingLength = siblingTextContentLength(nextFlatSibling(element));
            if (siblingLength == 0) isBottomBlockquote = true;
        }
        if (isBottomBlockquote /* always collapse bottom quote */ || shouldCollapseBlockquoteElement(element)) {
            collapseBlockquote(element, showPreview = !isBottomBlockquote);
        }
    }
function quoteDepth(element) {
    var depth = 0;
    var parent = element;
    while (parent != null) {
        if (parent.tagName.toLowerCase() == "blockquote") {
            depth++;
        }
        parent = parent.parentElement;
    }
    return depth;
function isMicrosoftParagraphElement(element) {
    function test(element) {
        return (
            element &&
            element.nodeType == Node.ELEMENT_NODE &&
            element.tagName.toLowerCase() == "p" &&
            (element.className.toLowerCase() == "msonormal" || ((element.parentElement.getAttribute("style") || "").search("mso-element") === 0))
        );
    }
    var firstNonEmptyChild = element.children[0];
    if (firstNonEmptyChild) {
        // sometimes it's buried under a <div> for paragraphs starting after a newline.
        while ( (firstNonEmptyChild.childElementCount == 1 && firstNonEmptyChild.children[0].tagName.toLowerCase() == "div") ) {
            firstNonEmptyChild = firstNonEmptyChild.children[0];
        }
    }
    return ( test(element) || test(firstNonEmptyChild) );
function mightBeAMicrosoftQuoteSeparatorLine(element) {
    // Not very accurate, but it doesn't have to be. Just see if it has a top border and some padding.
    return (element.style.borderTop.length > 0 && element.style.paddingTop.length > 0);
function isTopLevelOutlookBlockquoteElement(divElement) {
    var retVal = false;
    if (quoteDepth(divElement) <= 0) {
        // See if it has a border
        if (mightBeAMicrosoftQuoteSeparatorLine(divElement)) {
            // First child should be a paragraph tag with the class "msonormal"
            var firstChild = divElement.firstElementChild;
            if (isMicrosoftParagraphElement(firstChild)) {
                retVal = true;
            }
        }
    }
    return retVal;
function collectTopLevelOutlookBlockquotes(rootElement) {
    var topLevelQuoteElements = [];
    // Outlook for Windows / OS X
    var containsMSOElements = (rootElement.getElementsByClassName("MsoNormal").length > 0);
    var containsWordSections = (rootElement.getElementsByClassName("WordSection1").length > 0);
    if (containsMSOElements || containsWordSections) {
        var idx = 0;
        var divElementsNodeList = rootElement.getElementsByTagName("div");
        var topLevelOutlookQuotes = [];
        for (var i = 0, length = divElementsNodeList.length; i < length; ++i) {
            var divElement = divElementsNodeList.item(i);
            if (isTopLevelOutlookBlockquoteElement(divElement)) {
                while (!divElement.previousElementSibling && !divElement.nextElementSibling && divElement.parentElement) {
                    divElement = divElement.parentElement;
                }
                topLevelOutlookQuotes.push(divElement);
            }
        }
        for (var currentElement = topLevelOutlookQuotes.shift(); currentElement; currentElement = topLevelOutlookQuotes.shift()) {
            var range = document.createRange();
            range.setStartBefore(currentElement);
            var previousSibling = currentElement.previousSibling;
            if (!previousSibling) {
                previousSibling = currentElement.parentElement;
            }
            if (topLevelOutlookQuotes[0]) {
                range.setEndBefore(topLevelOutlookQuotes[0]);
            } else {
                var treeWalker = document.createTreeWalker(currentElement.parentElement, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT, {
                    acceptNode: function(node) {
                        if (node instanceof Element && (node.tagName === "O:P" || mightBeAMicrosoftQuoteSeparatorLine(node) || isMicrosoftParagraphElement(node))) {
                            return NodeFilter.FILTER_REJECT;
                        }
                        if (node instanceof HTMLDivElement || node instanceof HTMLQuoteElement  || node instanceof HTMLSpanElement
                            || node instanceof HTMLParagraphElement || (node instanceof Text && !node.data.trim().length)) {
                            return NodeFilter.FILTER_SKIP;
                        }
                        return NodeFilter.FILTER_ACCEPT;
                    }
                });
                treeWalker.currentNode = currentElement;
                var lastElement = treeWalker.nextSibling();
                if (lastElement) {
                    while (lastElement.parentElement !== treeWalker.root) {
                        lastElement = lastElement.parentElement;
                    }
                    lastElement = lastElement.previousElementSibling;
                } else {
                    lastElement = treeWalker.root.lastElementChild;
                }
                range.setEndAfter(lastElement);
            }
            var newDiv = document.createElement("div");
            newDiv.className = "x-apple-outlook-blockquote";
            newDiv.appendChild(range.extractContents());
            previousSibling.parentNode.insertBefore(newDiv, previousSibling);
            topLevelQuoteElements.push(newDiv);
        }
    }
    // Outlook.com
    var horizontalRulerNodeList = document.getElementsByTagName("hr");
    var containsHorizontalRulers = (horizontalRulerNodeList.length > 0);
    var containsOriginalAttributions = (document.getElementById("x_divRplyFwdMsg") != undefined); // "original" reply?
    var containsAdditionalAttributions = (document.getElementById("divRplyFwdMsg") != undefined); // "other" replies?
    if (containsHorizontalRulers && (containsOriginalAttributions || containsAdditionalAttributions)) {
        // Just cut everything from the first separator down. It's too much of a mess to parse accurately.
        var range = document.createRange();
        var firstRuler = horizontalRulerNodeList.item(0);
        var previousSibling = firstRuler.previousSibling;
        if (!previousSibling) {
            previousSibling = firstRuler.parentElement;
        }
        range.setStartBefore(firstRuler);
        var lastSibling = firstRuler;
        var nextSibling = lastSibling;
        while ( (nextSibling = nextSibling.nextElementSibling) != undefined ) {
            if (nextSibling.tagName.toLowerCase() != "div") break;
            lastSibling = nextSibling;
        }
        range.setEndAfter(lastSibling);
        var newDiv = document.createElement("div");
        newDiv.className = "x-apple-outlook-blockquote";
        newDiv.appendChild(range.extractContents());
        previousSibling.parentNode.insertBefore(newDiv, previousSibling);
        topLevelQuoteElements.push(newDiv);
    }
    return topLevelQuoteElements;
function fixOutdentedAttributions() {
    var pattern = window.externalConstants.getValue("outdentedAttributionsPattern");
    var regex = new RegExp(pattern, 'i');
    // Shallow copy. We'll be modifying the DOM in the loop below, so do this to avoid an infinite loop
    // of processing our own new blockquote elements.
    var blockquotes = document.getElementsByTagName("blockquote");
    blockquotes = Array.prototype.slice.call(blockquotes, 0);
    var FIXED_ELEMENT_ATTR = "__apple_fixed_attribute";
    for (var i = 0; i < blockquotes.length; i++) {
        var element = blockquotes[i];
        var previousElementDepth = (i > 0) ? quoteDepth(blockquotes[i - 1]) : 0;
        var currentElementDepth = quoteDepth(element);
        if (currentElementDepth > previousElementDepth) {
            var foundAttribution = false;
            var previousNode = element.previousElementSibling;
            if (previousNode == null) {
                previousNode = element.parentElement.previousElementSibling;
            }
            var accumulatedElements = [];
            while (!foundAttribution && previousNode != null && accumulatedElements.length < 4) {
                if (previousNode.nodeType == 1 && previousNode.getAttribute(FIXED_ELEMENT_ATTR) == "true") {
                    // Already fixed. Skip.
                    break;
                }
                accumulatedElements.push(previousNode);
                var text = text = previousNode.textContent;
                if (regex.test(text)) {
                    foundAttribution = true;
                }
                previousNode = previousNode.previousSibling;
            }
            if (foundAttribution) {
                accumulatedElements.reverse();
                var newBlockquote = document.createElement("blockquote");
                newBlockquote.setAttribute("type", "cite");
                newBlockquote.setAttribute(FIXED_ELEMENT_ATTR, "true");
                var parent = accumulatedElements[0].parentElement;
                parent.insertBefore(newBlockquote, accumulatedElements[0]);
                for (var elem_i in accumulatedElements) {
                    var element = accumulatedElements[elem_i];
                    element.parentElement.removeChild(element);
                    newBlockquote.appendChild(element);
                }
            }
        }
    }
function longPressedAttachment(range) {
    // This is only used for figuring out if an attachment can be dragged out into a separate window.
    // Only return attachment ID if it is being long-pressed with no other content selected
    if (!window.getSelection().isCollapsed) {
        return "";
    }
    var attachments = document.querySelectorAll("attachment");
    var result = [];
    for (var i = 0, length = attachments.length; i < length; ++i) {
        var attachment = attachments[i];
        if (attachment.id && range.isPointInRange(attachment, 0))
            result.push(attachment.id);
    }
    
    var images = document.querySelectorAll("img");
    for (var i = 0, length = images.length; i < length; ++i) {
        var image = images[i];
        var source = image.src;
        if ((source.startsWith("cid:") || (image.id.length && image.attachmentIdentifier.length)) && range.isPointInRange(image, 0)) {
            result.push(image.id);
        }
    }
    return result.length == 1 ? result[0] : "";
function rectForAnchor(anchorName) {
    // First look for elements by id, which is the standard HTML5 way
    var anchorElement = document.getElementById(anchorName);
    if (!anchorElement) {
        // If we don't find an element by Id, look for one by name. This is the deprecated HTML4 way
        // but people still use it. If there are multiple, just use the first one
        var anchorElements = document.getElementsByName(anchorName);
        if (anchorElements.length > 0) {
            anchorElement = anchorElements[0];
        }
        else {
            // If we still have no element, return null
            return;
        }
    }
    var rect = anchorElement.getBoundingClientRect();
    return {"x":rect.x, "y":rect.y, "width":rect.width, "height":rect.height};
// message_on_document_load() needs to run immediately.
// both the "load" and "DOMContentLoaded" events aren't fired until all embedded <img> tags have loaded from the network (or timed out)
_try_catch_wrap(message_on_document_load)();
//  Copyright 
 2016 Apple Inc. All rights reserved.
// This is unnecessary a lot of the time. Setting this to 'true' will also require a DFS when reformatting,
// which can be quite expensive.
var ATTEMPT_TO_REFORMAT_TOP_LEVEL_ELEMENTS = false;
var SMALL_ELEMENT_WIDTH = 10.0; // ignore elements of this box size
var TRANSFORM_WRAPPER_CLASS_NAME = "x-apple-transform-wrapper";
/* Utility Functions */
function _iterateAllDocumentElements(_this, iterator /* : function(currentNode) */) {
    // Use a "stop function" to stop this, because there's no pass by reference in js (gun emoji)(head emoji)
    var stop = false;
    function stopFunction() {
        stop = true;
    }
    var currentNode = null;
    var nodeIterator = document.createNodeIterator(document.body, NodeFilter.SHOW_ELEMENT);
    while ( !stop && (currentNode = nodeIterator.nextNode()) ) {
        iterator.call(_this, currentNode, stopFunction);
    }
function _elementHash(element) {
    var box = element.getBoundingClientRect();
    var aNumber = box.left + box.top;
    return element.tagName + "_" + aNumber;
function _depthFirstIterateAllBodyElements(_this, iterator /* : function (currentNode, stopFunction) */) {
    var stop = false;
    function stopFunction() {
        stop = true;
    }
    var visited = [];
    function visitNode(node, xpath) {
        if (stop) return;
        if (node == undefined) return;
        visited[xpath] = true;
        var children = node.children;
        for (var i = 0; i < children.length; i++) {
            var child = children.item(i);
            if (visited[child] == undefined) {
                visitNode(child, xpath + "/" + _elementHash(child));
            }
        }
        if (!stop) {
            iterator.call(_this, node, stopFunction);
        }
    }
    visitNode(document.body, "body");
function _elementIsContainedInElementOfTagName(element, tagName) {
    var contained = false;
    for (var parentElement = element.parentElement; parentElement != null; parentElement = parentElement.parentElement) {
        if (tagName == parentElement.tagName.toLowerCase()) {
            contained = true;
            break;
        }
    }
    return contained;
function _elementIsContainedInTable(element) {
    return _elementIsContainedInElementOfTagName(element, "table");
function _elementIsContainedInBlockquote(element) {
    return _elementIsContainedInElementOfTagName(element, "blockquote");
function _stripWhitespace(text) {
    return text.replace(/(\n)|(\s+)/g, "");
function _isEdgeToEdgeFormattedElement(elem) {
    // Anything else we can look at?
    return (elem && elem.nodeType == Node.ELEMENT_NODE &&
                (elem.getAttribute("x-apple-pending-edge-to-edge") ||
                 elem.classList.contains("x-apple-edge-to-edge") ||
                 elem.classList.contains("x-apple-wide-margin-edge-to-edge")));
function _isRescalableElement(elem) {
    if (elem.tagName.toLowerCase() == "img" && !elem.complete) {
        // static width?
        if (elem.width == undefined && elem.style.width == undefined) {
            return false;
        }
    }
    return !_isEdgeToEdgeFormattedElement(elem);
function ReformatterChange(element, propertyName, propertyValue, important) {
    this.element = element;
    this.propertyName = propertyName;
    this.propertyValue = propertyValue;
    this.important = important;
    this.cleanupBlock = function() {};
    this._previousValue = undefined;
ReformatterChange.prototype = {
    applyChange : function() {
        var styleDeclaration = this.element.style;
        this._previousValue = styleDeclaration.getPropertyValue(this.propertyName);
        styleDeclaration.setProperty(this.propertyName, this.propertyValue, this.important);
    },
    rollbackChange : function() {
        var styleDeclaration = this.element.style;
        if (this._previousValue != undefined) {
            styleDeclaration.setProperty(this.propertyName, this._previousValue, "");
        } else {
            styleDeclaration.removeProperty(this.propertyName);
        }
        this.cleanupBlock();
    },
var LOG_LEVEL_INFO = 0;
var LOG_LEVEL_WARN = 1;
var LOV_LEVEL_ERROR = 2;
function MailDocumentReformatter() {
    // constructor
    this.goalViewportWidth = 0.0;
    this.maximumWidth      = 0.0;
    this.meanWidth         = 0.0;
    this.widthDeviation    = 0.0;
    this.loggingEnabled    = false;
    this.reformattedWidth  = 0.0;
    this._rightFloats = undefined; // undefined means "uninitialized"
    this._hasLeftFloats = undefined;
    this._firstElementContainingText = null;
    this._appliedChanges = [];
MailDocumentReformatter.prototype = {
    _log : function(str, level) {
        level = level != undefined ? level : 0;
        if (this.loggingEnabled || level > 0) {
            MCVLog("[MDR]: " + str);
        }
    },
    _updateMetrics : function() {
        this.maximumWidth = 0.0;
        var nodeCount = 0;
        var widthSum = 0;
        var widthValues = [];
        _iterateAllDocumentElements(this, function(currentNode) {
            var boundingBox = currentNode.getBoundingClientRect();
            var width = boundingBox.width;
            // Ignore small elements
            if (width > SMALL_ELEMENT_WIDTH) {
                nodeCount++;
                widthSum += width;
                widthValues.push(width)
                var rightBoundary = boundingBox.left + boundingBox.width;
                if (rightBoundary > this.maximumWidth) {
                    this.maximumWidth = rightBoundary;
                }
            }
        });
        if (nodeCount > 0) {
            this.meanWidth = (widthSum / nodeCount);
            for (var i = 0; i < nodeCount; i++) {
                var width = widthValues[i];
                this.widthDeviation += (width - this.meanWidth) * (width - this.meanWidth);
            }
            this.widthDeviation = Math.sqrt(this.widthDeviation / nodeCount);
        }
    },
    _updateFloatsIfNecessary : function() {
        if (this._hasLeftFloats == undefined || this._rightFloats == undefined) {
            var hasAnyLeftFloat = false;
            // Not sure if we need to use this yet...
            // var containsUnknownImageDimensions = false;
            var rightFloats = [];
            _iterateAllDocumentElements(this, function(currentNode) {
                if (currentNode.hasChildNodes()) {
                    var computedStyle = window.getComputedStyle(currentNode);
                    var floatValue = computedStyle.float;
                    if (floatValue.toLowerCase() == "right") {
                        rightFloats.push(currentNode);
                    } else if (floatValue.toLowerCase() == "left") {
                        hasAnyLeftFloat = true;
                    }
                }
            });
            this._hasLeftFloats = hasAnyLeftFloat;
            this._rightFloats = rightFloats;
        }
    },
    /**
     * Returns the first element in the DOM that contains actual readable text. Uses a DFS
     * to find the deepest element that meets this requirement.
     * @returns {ELEMENT} First non-text element that contains readable text.
     */
    firstElementContainingText : function() {
        if (this._firstElementContainingText == null) {
            var element = null;
            _depthFirstIterateAllBodyElements(this, function(currentNode, stop) {
                if (currentNode.nodeType == Node.ELEMENT_NODE) {
                    var text = _stripWhitespace(currentNode.textContent);
                    if (text.length > 0) {
                        element = currentNode;
                        stop();
                    }
                }
            });
            this._firstElementContainingText = element;
        }
        return this._firstElementContainingText;
    },
    containsLeftFloats : function() {
        this._updateFloatsIfNecessary();
        return this._hasLeftFloats;
    },
    rightFloats : function() {
        this._updateFloatsIfNecessary();
        return this._rightFloats;
    },
    _setPropertyOnElement : function(element, propertyName, propertyValue, important) {
        important = important != undefined ? important : "";
        var change = new ReformatterChange(element, propertyName, propertyValue, important);
        change.applyChange();
        this._appliedChanges.push(change);
        return change;
    },
    currentDocumentViewportWidth : function() {
        return Math.max(document.body.clientWidth, document.documentElement.clientWidth);
    },
    _shouldReformatElement : function(element) {
        // Permit only block elements for now. Don't allow things like svg and pattern elements to be reformatted.
        var allowedTags = [ "body", "div", "table", "td", "tr", "span", "img", "blockquote", "ul", "li", "form", "pre", "footer", "center" ];
        return ( allowedTags.indexOf(element.tagName.toLowerCase()) >= 0 );
    },
    /**
     * Computes the intrinsic size and position of `element`.
     * @param element : Element whose rect to measure
     * @returns {RECT} Rectangle with properties width, height, x, and y.
     */
    _rectForElement : function(element) {
        var box = element.getBoundingClientRect();
        var elementRect = {
            x : box.left,
            y : box.top,
            width  : box.width,
            height : box.height
        };
        return elementRect;
    },
    /**
     * Iterates over all child elements and calculates the rect that encompasses all child bounding boxes. This is
     * different than simply asking for `element`s bounding box, because it might have a static or relative width.
     * This is a common case for table elements (especially table layouts, whose width is usually defined to be 100%).
     * @param element : Element whose rect to calculate
     * @returns {RECT} Rectangle with width and height properties.
     */
    _getSpilloverBoundingClientRect : function(element) {
        // Iterate over all child elements
        var spilloverRect = {width: 0, height: 0};
        var currentNode = null;
        var nodeIterator = document.createNodeIterator(element, NodeFilter.SHOW_ELEMENT);
        while ( currentNode = nodeIterator.nextNode() ) {
            var boundingBox = currentNode.getBoundingClientRect();
            if (boundingBox) {
                var rightEdge = boundingBox.left + boundingBox.width;
                var bottomEdge = boundingBox.top + boundingBox.height;
                if (rightEdge > spilloverRect.width) spilloverRect.width = rightEdge;
                if (bottomEdge > spilloverRect.height) spilloverRect.height = bottomEdge;
            }
        }
        return spilloverRect;
    },
    /**
     * Destructively resizes an element by manually adjusting it's width and height. This is usually the first thing
     * we try when reformatting an individual element. Uses an !important priority to override any 3rd party size that
     * may have been applied.
     * @param element : Element to resize
     * @param newSize : Dictionary containing new optional 'width' and 'height' keys.
     */
    _resizeElement : function(element, newSize) {
        if (_isRescalableElement(element)) {
            this._log(" - Resizing <" + element.tagName + "> element: width: " + newSize.width);
            if (newSize.width)  this._setPropertyOnElement(element, "width", newSize.width + "px", "important");
            if (newSize.height) this._setPropertyOnElement(element, "height", newSize.height + "px", "important");
            return true;
        }
        return false;
    },
    /**
     * Destructively rescales an element using webkit transforms, and places the element in a parent block
     * display element.
     * @param element : Element to rescale
     * @param scaleFactor : x-y scale to apply to the element. Typically this is a ratio of the current size to
                            it's desired size.
     * @returns {BOOLEAN} Whether or not it succeeded.
     */
    _rescaleElement : function(element, scaleFactor) {
        if (element.className == TRANSFORM_WRAPPER_CLASS_NAME) {
            // Don't attempt to rescale an element's transform wrapper. Scale should be rolled back should scaling
            // be attempted again.
            this._log("Tried to rescale already scaled transform wrapper");
            return false;
        }
        var changes = [];
        if (element.parentElement != document.documentElement && _isRescalableElement(element)) {
            var computedStyle = window.getComputedStyle(element);
            if (computedStyle.display == "inline") {
                // i.e., span elements, need to be converted into block elements.
                changes.push(this._setPropertyOnElement(element, "display", "inline-block", "important"));
            }
            // If this element contains unloaded (probably remote) images, then the boundingBox calculation below will
            // be incorrect. The solution enacted below will apply the rescale transform anway, then when the image is finished
            // downloading will rollback all the changes applied here and try again. There could be potential problems with this,
            // for instance elements that are reformatted *around* this element that depend on the size it, so a potential solution
            // for that would be to lock the reformatter until the images in here are done loading, but then that would cause the
            // user to see/interact with this document in a half-reformatted state. Better to just re-run the formatter (to various
            // extents) when the images finish loading.
            var numIncompleteImages = 0;
            var images = element.getElementsByTagName("img");
            for (var i = 0; i < images.length; i++)  {
                var image = images.item(i);
                if (!image.complete) numIncompleteImages++;
            }
            var boundingBox = element.getBoundingClientRect();
            var resizeWidth  = boundingBox.width;
            var resizeHeight = boundingBox.height;
            if (element.getAttribute("width")) { // static width?
                resizeWidth = element.getAttribute("width");
            }
            this._resizeElement(element, { width: resizeWidth, height: resizeHeight });
            changes.push(this._setPropertyOnElement(element, "transform-origin", "0 0"));
            changes.push(this._setPropertyOnElement(element, "transform", "scale(" + scaleFactor + ")"));
            // TODO: adjust margin?
            var marginAdjustmentWidth = boundingBox.width * (1.0 - scaleFactor);
            // Adjust size of parent element, non-destructively
            var range = document.createRange();
            var newNode = document.createElement("div");
            newNode.className = TRANSFORM_WRAPPER_CLASS_NAME;
            range.selectNode(element);
            range.surroundContents(newNode);
            // The wrapper div's height must be in terms of the element's clientHeight since it gives us
            // the elements "true" height, ignoring any transforms applied to its parents. boundingBox gives us
            // the element's visual size, including transforms applied at all levels.
            var scaledHeight = element.clientHeight * scaleFactor;
            
            this._log(" - Rescaling <" + element.tagName + "> element: height: " + scaledHeight);
            
            var change = this._setPropertyOnElement(newNode, "height", scaledHeight + "px");
            change.cleanupBlock = function() {
                var newRange = document.createRange();
                newRange.selectNodeContents(newNode);
                var newNodeContents = newRange.extractContents();
                newNode.parentNode.insertBefore(newNodeContents, newNode);
                newNode.parentElement.removeChild(newNode);
            };
            changes.push(change);
            // Now if we had incomplete images, add an onload observer so we can try again once they're done
            // loading.
            if (numIncompleteImages > 0) {
                for (var i = 0; i < images.length; i++) {
                    var image = images.item(i);
                    var outerThis = this;
                    image.onload = function() {
                        numIncompleteImages--;
                        if (numIncompleteImages == 0) {
                            // Rollback the changes (if they're still in the _appliedChanges stack)
                            outerThis._log("All images have loaded. Rolling back rescaling changes from preload.");
                            changes.map(function(change) {
                                // Be sure to remove them from the _appliedChanges (but only if they haven't yet been rolled back yet
                                var i = outerThis._appliedChanges.indexOf(change);
                                if (i > -1) {
                                    outerThis._appliedChanges.splice(i, 1);
                                    change.rollbackChange();
                                }
                            });
                            // and try rescaling again if the element is still valid
                            if (element.parentElement) {
                                outerThis._log("Rescaling element again with images loaded.");
                                outerThis._rescaleElement(element, scaleFactor);
                            }
                        }
                    }
                }
            }
        }
        return (changes.length > 0);
    },
    /**
     * Gets this from the display info cache in the native layer above. If we
     * didn't reformat the message last time, don't try to do it again.
     * @returns {BOOLEAN} Whether or not we should bail out.
     */
    _shouldSkipReformatting : function() {
        var shouldSkip = !!window.externalConstants.getValue("shouldSkipReformatting");
        if (!shouldSkip) {
            var metatags = document.getElementsByTagName("meta");
            for (var i = 0; i < metatags.length; i++) {
                var tag = metatags.item(i);
                if (tag.name == "x-apple-disable-message-reformatting") {
                    shouldSkip = true;
                    break;
                }
            }
        }
        return shouldSkip;
    },
    /**
     * First step in the rescaling process. Attempts to scale top level tables
     * (i.e., documents that are laid out using table layouts).
     * @returns {Boolean} Whether or not rescaling should continue based on some exceptions defined below.
     */
    rescaleTopLevelElements : function() {
        var shouldContinue = true;
        var hasLeftFloats  = this.containsLeftFloats();
        var hasRightFloats = (this.rightFloats().count > 0);
        this._log("Has left floats: " + hasLeftFloats + ", right floats: " + hasRightFloats);
        if (hasLeftFloats) {
            // Old rule: Don't rescale if there's a left float.
            shouldContinue = false;
        } else {
            var topLevelElements = [];
            // TODO: do we still have to worry about right floats? These would be images
            // that are supposed to show up "inline" with text.
            // See: http://www.w3schools.com/css/tryit.asp?filename=trycss_layout_float
            if (shouldContinue) {
                var hasAnyRescalableTables = false;
                var maxImageBoundingBoxLeftEdge = this.goalViewportWidth * 0.25;
                var tablesNodeList = document.getElementsByTagName("table");
                for (var i = 0; i < tablesNodeList.length; i++) {
                    var table = tablesNodeList.item(i);
                    if (!_elementIsContainedInTable(table)) {
                        var firstTextElement = this.firstElementContainingText();
                        if (!firstTextElement) {
                            shouldContinue = false;
                            break;
                        }
                        var tableBoundingRect = table.getBoundingClientRect();
                        var firstElemBoundingRect = firstTextElement.getBoundingClientRect();
                        if (tableBoundingRect.top <= firstElemBoundingRect.top && !_elementIsContainedInBlockquote(table)) {
                            shouldContinue = false;
                            break;
                        }
                        topLevelElements.push(table);
                        hasAnyRescalableTables = true;
                    }
                }
                if (shouldContinue && !hasAnyRescalableTables) {
                    var hasImages = false;
                    var imageElements = document.getElementsByTagName("img");
                    for (var i = 0; i < imageElements.length; i++) {
                        var img = imageElements.item(i);
                        if (!_elementIsContainedInTable(img)) {
                            hasImages = true;
                            break;
                        }
                    }
                    var hasPreTags = false;
                    if (!hasImages) {
                        var preTags = document.getElementsByTagName("pre");
                        for (var i = 0; i < preTags.length; i++) {
                            var pre = preTags.item(i);
                            if (!_elementIsContainedInTable(pre)) {
                                hasPreTags = true;
                                break;
                            }
                        }
                    }
                    shouldContinue = (hasImages || hasPreTags);
                }
                if (shouldContinue) {
                    var goalWidth = this.goalViewportWidth;
                    for (var i = 0; i < topLevelElements.length; i++) {
                        var elem = topLevelElements[i];
                        var boundingBox = elem.getBoundingClientRect();
                        var scaleFactor = goalWidth / (boundingBox.left + boundingBox.width);
                        if (!this._rescaleElement(elem, scaleFactor)) {
                            shouldContinue = false;
                            break;
                        }
                    }
                }
            }
        }
        return shouldContinue;
    },
    /**
     * This is the main reformatting routine. Iterates through every element to find one that
     * exceeds our goalViewportWidth, picks just that one element to resize, then repeats the process until we've
     * hit every element, or we hit the same element more than once. This process is detailed further below.
     * @returns {BOOLEAN} Whether or not something was reformatted.
     */
    rescaleDocument : function() {
        var bodyStyle = window.getComputedStyle(document.body);
        var goalViewportWidth = this.goalViewportWidth;
        var shouldContinue = true;
        var WIDTH_EXCEED_THRESHOLD = 10.0;
        var lastResizedElement = null;
        var lastRescaledElement = null;
        while (shouldContinue) {
            var reformattedElement = null;
            // Pick out one individual element to reformat...
            _iterateAllDocumentElements(this, function(elem, stop) {
                if (this._shouldReformatElement(elem)) {
                    var elementRect = this._rectForElement(elem);
                    // If this element's right side goes beyond our goal viewport width, it's a candidate for scaling/sizing.
                    if ( ((elementRect.x + elementRect.width) - goalViewportWidth) > WIDTH_EXCEED_THRESHOLD ) {
                        if (_elementIsContainedInTable(elem)) {
                            this._log("Found a stray element inside of a table...");
                            // Tables are a special case. See if the entire table can be scaled down instead of messing with this
                            // individual element (especially if it's a td, tr, etc.).
                            var tableElem = null;
                            var parentNode = elem;
                            while ( parentNode = parentNode.parentElement ) {
                                if (parentNode.tagName.toLowerCase() == "table") {
                                    tableElem = parentNode;
                                    break;
                                }
                            }
                            if (tableElem) {
                                var spilloverRect = this._getSpilloverBoundingClientRect(tableElem);
                                if ( (spilloverRect.width - goalViewportWidth) > WIDTH_EXCEED_THRESHOLD ) {
                                    this._log("Found <TABLE> element to reformat.");
                                    tableElem.setAttribute("width", parseInt(spilloverRect.width));
                                    elem = tableElem;
                                    elementRect = this._rectForElement(tableElem);
                                    elementRect.width = spilloverRect.width;
                                    elementRect.height = spilloverRect.height;
                                }
                            }
                        }
                        var computedStyle = window.getComputedStyle(elem);
                        var horizontalPadding = parseInt(computedStyle.paddingLeft) + parseInt(computedStyle.paddingRight);
                        // Compute desired width
                        var desiredWidth = goalViewportWidth;
                        if (elem != document.body) {
                            // The desired width should exclude body padding.
                            desiredWidth = desiredWidth - (parseInt(bodyStyle.paddingLeft) + parseInt(bodyStyle.paddingRight)) - elementRect.x;
                        } else {
                            desiredWidth = desiredWidth - horizontalPadding;
                        }
                        var outerThis = this;
                        resize = function(elem, width) {
                            if (lastResizedElement != elem) {
                                var height = undefined;
                                if (elem.tagName.toLowerCase() == "img") {
                                    // need to scale these proportionally
                                    height = (desiredWidth / elementRect.width) * elementRect.height;
                                }
                                // Attempt to RESIZE the element. Some elements won't respond to this change (i.e., elements with no
                                // defined width, tables, inline-divs, etc.), so this may not work.
                                var success = outerThis._resizeElement(elem, {width: desiredWidth, height: height});
                                lastResizedElement = elem;
                                reformattedElement = elem;
                                return success;
                            }
                            return false;
                        };
                        rescale = function(elem, width) {
                            if (lastRescaledElement != elem) {
                                // This path means we tried to explicitly size the element, but it didn't work. Try applying a webkit
                                // transform (scale) on it instead.
                                var scaleFactor = width / (elementRect.width + elementRect.x);
                                var success = outerThis._rescaleElement(elem, scaleFactor);
                                lastRescaledElement = elem;
                                reformattedElement = elem;
                                return success;
                            }
                            return false;
                        };
                        if (desiredWidth > 0.0) {
                            var strategies = [resize, rescale];
                            if (elem.tagName.toLowerCase() == "table") {
                                strategies = [rescale, resize];
                            } else if (elem == document.body) {
                                strategies = [resize];
                            }
                            var success = false;
                            for (var i = 0; i < strategies.length; i++) {
                                var strategy = strategies[i];
                                success = strategy(elem, desiredWidth);
                                if (success) break;
                            }
                            if (!success) {
                                // If we're here, we tried sizing, then scaling, but it still keeps coming up as the problematic element.
                                // This means we probably can't reformat this message because of this one element. Bail out!
                                // TODO: roll back the last change to this element?
                                this._log("Hit the same element. Stopping reformatting.");
                                shouldContinue = false;
                            }
                        } else {
                            // If we're here, this usually means we didn't format the parent element for some reason. Is it a table, or perhaps
                            // an element with a tag type that's not in the list of allowed tags (see _shouldReformatElement)?
                            this._log("Found element that could not be sanely rescaled.");
                            shouldContinue = false;
                        }
                        stop();
                    }
                }
            });
            if (!reformattedElement) {
                this._log("Hit the end of the document without finding an element to reformat.");
                shouldContinue = false;
            }
        }
        return !!(lastResizedElement || lastRescaledElement);
    },
    reformat : function() {
        if (this._shouldSkipReformatting()) {
            this._log("Skipping reformatting.", LOG_LEVEL_WARN);
            return false; // NOTE: early return!
        }
        if (this.reformattedWidth > 0.0) {
            this.rollbackAllChanges();
        }
        var didReformatDocument = false;
        var goalViewportWidth = window.externalConstants.getValue("viewport-width");
        var actualViewportWidth = this.currentDocumentViewportWidth();
        this.goalViewportWidth = goalViewportWidth;
        if (actualViewportWidth > goalViewportWidth) {
            this._log("Reformat is necessary. Goal: " + goalViewportWidth + ", actual: " + actualViewportWidth);
            this._updateMetrics();
            if (ATTEMPT_TO_REFORMAT_TOP_LEVEL_ELEMENTS) {
                var shouldResize = (this.widthDeviation > this.meanWidth);
                // If the mean is within DEV_OFFSET (1.1) std dev's of the max, we should try again.
                if (!shouldResize) {
                    var difference = Math.abs(this.maximumWidth - this.meanWidth);
                    var scaledDev = this.widthDeviation * 1.1;
                    shouldResize = difference < scaledDev;
                }
                this._log("Should resize: " + (shouldResize ? "YES" : "NO"));
                if (shouldResize) {
                    // This means we probably have a table layout. Try to rescale it first.
                    didReformatDocument = this.rescaleTopLevelElements();
                }
                this._log("Rescaled top level elements: " + didReformatDocument);
            }
            var shouldRescale = false;
            var zoomFactor = goalViewportWidth / this.maximumWidth;
            if (zoomFactor < 1.0) {
                shouldRescale = true;
            }
            this._log("Should rescale (zoomFactor: " + zoomFactor + "): " + (shouldRescale ? "YES" : "NO"));
            if (shouldRescale) {
                didReformatDocument = this.rescaleDocument();
            }
            if (didReformatDocument) {
                this.reformattedWidth = this.goalViewportWidth;
            }
        }
        window.webkit.messageHandlers.FinishedReformattingMessage.postMessage( didReformatDocument );
        return didReformatDocument;
    },
    rollbackAllChanges : function() {
        this._log("Rolling back [" + this._appliedChanges.length + "] reformatted changes...");
        var changes = this._appliedChanges;
        if (changes.length > 0) {
            // Be sure to do this in reverse
            for (var i = changes.length - 1; i >= 0; i--) {
                var change = changes[i];
                change.rollbackChange();
            }
        }
        this._appliedChanges = [];
        // Update reformatted width with new width so rolling back doesn't trigger another reformat.
        this.reformattedWidth = g_documentReformatter.currentDocumentViewportWidth();
    },
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.private.email</key>
<true/>
<key>com.apple.private.tcc.allow.overridable</key>
<array>
<string>kTCCServiceAddressBook</string>
</array>
</dict>
</plist>
ContentItemMarkupGenerator
EFLoggable
NSObject
ConversationFooterViewDisplayMetrics
ConversationSearchOverlayView
MailQLAttachmentContext
MailQLItemDataProvider
QLPreviewItemDataProvider
MessageActivityViewController
MessageAttachmentActionGenerator
MessageQuicklookImageAttachmentsActivity
MessageMarkupDocumentActivity
MessagePrintQuicklookableAttachmentActivity
MessageContentItemRepresentationTask
MSMailWebProcessAttachmentProxy
MessageContentItemsHelper
MessageContentRepresentationRequest
EFCancelable
EFSignpostable
EFPubliclyDescribable
MessageContentRepresentationRequestDelegate
EMContentItemRequestDelegate
MessageHeaderViewModel
MessageHeaderViewModelBuilder
MessageItemViewModelBuilder
MessageItemFlagsViewModelBuilder
NSCopying
MessageItemViewModel
MFAddressAtomStatusManager
MFAddressBookClient
MFAddressListFormatter
MFBannerView
MFBlockedSenderBannerView
MFCardAction
MFFlagColorCardAction
MFConversationItemFooterView
UIPointerInteractionDelegate
ConversationSearchOverlayAdding
MFHasMoreContentBannerView
_MFPlainTextBannerView
_MFPartiallyDownloadedBannerView
MFHideMyEmailBannerView
MFInternalSettingsCache
MFLoadBlockedContentBannerView
MFLoadFailedProxyContentBannerView
MFLocalizationListFormatter
MFMailDropBannerView
_MFMessageContentURLProtocolRegistry
MFMessageContentURLProtocol
_MFTapPreventingRecognizer
MFMessageContentView
UIPopoverPresentationControllerDelegate
UIAdaptivePresentationControllerDelegate
_WKInputDelegate
WKNavigationDelegatePrivate
WKNavigationDelegate
WKUIDelegatePrivate
WKUIDelegate
MFHideMyEmailBannerViewDelegate
MFHasMoreContentBannerViewDelegate
MFLoadBlockedContentBannerViewDelegate
MFLoadFailedProxyContentBannerViewDelegate
MFBlockedSenderBannerViewDelegate
MFMessageHeaderViewDelegate
MFMessageFooterViewDelegate
MFMailDropBannerDelegate
MFPresentationSource
UIScrollViewDelegate
MFMailWebProcessDelegate
MFReusable
Add)
_MFMessageContentResizeWrapperView
MFMessageDisplayMetrics
MFMessageDisplayMetricsCompact
MFMessageDisplayMetricsRegular
MFMessageHeaderView
MFMessageHeaderViewBlock
MFQuotedContentAttribution
MFReadableContentMarginCalculator
MFSuggestionBannerView
MFUserProfileProvider_iOS
EMUserProfileProviderSubclassMethods
MFUserScriptLibrary
MFMailWebProcessProxy
MFWebViewDictionary
MFWebViewLoadingController
EMRemoteContentURLSessionObserver
MFWidgetController
MFWKWebViewFactory
MEContentRuleListManagerObserver
MessageContentView
SeparatorLayer
MobileMail
MFUIDebugging
VIPManager
EMVIPManager
EMVIPReader
UTF8String
type
contentID
isAvailableLocally
isDisplayableInlineContentItem:
dictionary
conformsToType:
setObject:forKeyedSubscript:
mf_isPad
dictionaryWithObjects:forKeys:count:
htmlSnippetWithTag:includeTrailingTag:attributes:
attachmentElementMarkupStringForContentItem:
ef_publicDescription
displayName
identifier
localizedName
organizationName
storageByteCount
exchangeEventUID
mainBundle
localizedStringForKey:value:table:
stringFromByteCount:countStyle:
dataTransferByteCount
isDisplayableImageContentItem:
uniformTypeIdentifier
markupStringForDisplayForContentItem:
isPDFContentItem:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
T@"NSObject<OS_os_log>",R
mf_hasCompactDimension
setUsePhoneLandscapeSymbolConfiguration:
setTopToBaseline:
setToolbarHeight:
mainScreen
_referenceBounds
displayMetricsWithSafeAreaInsets:interfaceOrientation:traitCollection:
toolbarHeight
topToBaseline
usePhoneLandscapeSymbolConfiguration
_usePhoneLandscapeSymbolConfiguration
_toolbarHeight
_topToBaseline
Td,N,V_toolbarHeight
Td,N,V_topToBaseline
TB,N,V_usePhoneLandscapeSymbolConfiguration
initWithFrame:
clearColor
setBackgroundColor:
mailConversationViewFindOverlayColor
initWithDuration:controlPoint1:controlPoint2:animations:
startAnimation
show
hide
activityType
isEqualToString:
userInfo
objectForKeyedSubscript:
integerValue
boolValue
objectIDFromSerializedRepresentation:
URLWithString:
initWithAttachmentURL:editBehavior:messageObjectID:mailboxObjectID:subject:contentManaged:
init
initWithActivityType:
attachmentURL
absoluteString
editBehavior
numberWithInteger:
isContentManaged
numberWithBool:
messageObjectID
serializedRepresentation
subject
initWithDictionary:
mailboxObjectID
setUserInfo:
stringWithFormat:
setTargetContentIdentifier:
contextWithUserActivity:
userActivity
.cxx_destruct
_contentManaged
_attachmentURL
_editBehavior
_messageObjectID
_mailboxObjectID
_subject
T@"NSUserActivity",R,C,N
T@"NSURL",R,N,V_attachmentURL
contentManaged
TB,R,N,GisContentManaged,V_contentManaged
Tq,R,N,V_editBehavior
T@"EMMessageObjectID",R,N,V_messageObjectID
T@"EMMailboxObjectID",R,N,V_mailboxObjectID
T@"NSString",R,N,V_subject
pathExtension
ef_declaredUTTypeFromExtension
copy
lastPathComponent
initWithDataProvider:contentType:previewTitle:
dataWithContentsOfURL:options:error:
provideDataForItem:
initWithURL:
item
contentType
_contentType
_url
T@"QLItem",R,C,N
T@"UTType",R,N,V_contentType
T@"NSURL",R,N,V_url
initWithActivityItems:applicationActivities:
arrayWithObjects:count:
setExcludedActivityTypes:
setSourceIsManaged:
sourceIsManaged
_sourceIsManaged
TB,N
countByEnumeratingWithState:objects:count:
mainThreadScheduler
contentURL
onScheduler:addSuccessBlock:
actionWithTitle:image:identifier:handler:
systemImageNamed:
_saveToCameraRollActionForFutureRepresentations:title:image:
previewURL:
isSourceManagedForURL:
quicklookActionForAttachmentContext:alternateAction:
setTitle:
setImage:
markupURL:
initWithUserActivity:
actionWithIdentifier:alternateAction:configurationProvider:
saveImageActionForFutureRepresentation:
saveVideoActionForFutureRepresentation:
saveAllAttachmentsActionWithTitle:futureRepresentations:
quicklookActionForURL:messageObjectID:mailboxObjectID:subject:contentRepresentationHandlingDelegate:
markupDocumentActionForURL:messageObjectID:mailboxObjectID:subject:contentRepresentationHandlingDelegate:
setDelegate:
setUrl:
activityDidFinish:
_cleanup
delegate
initWithAttachmentHandlingDelegate:context:url:
activityTitle
activityImage
canPerformWithActivityItems:
performActivity
_delegate
T@"<ContentRepresentationHandlingDelegate>",W,N,V_delegate
T@"NSURL",&,N,V_url
setContext:
initWithAttachmentHandlingDelegate:context:
context
_context
Tq,N,V_context
sharedPrintController
pageRenderer
setPrintPageRenderer:
presentAnimated:completionHandler:
initWithPrintPageRenderer:
setPageRenderer:
_pageRenderer
T@"UIPrintPageRenderer",&,N,V_pageRenderer
initWithObject:
progressWithTotalUnitCount:
promise
topLevelProgress
contentRequestPromise
future
invokerIDs
addObject:
performWhileLocked:
containsObject:
contentRequestProgress
networkUsage
optionsWithRequestedRepresentationType:networkUsage:
contentItem
completionHandlerAdapter
requestRepresentationWithOptions:completionHandler:
setContentRequestProgress:
addChild:withPendingUnitCount:
initWithContentItem:type:networkUsage:
progress
addAccessedByInvokerWithID:
hasBeenAccessedByInvokerWithID:
resume
setNetworkUsage:
setContentItem:
setType:
setTopLevelProgress:
setContentRequestPromise:
setInvokerIDs:
_networkUsage
_contentItem
_type
_topLevelProgress
_contentRequestPromise
_contentRequestProgress
_invokerIDs
T@"<EMContentItem>",&,N,V_contentItem
T@"NSString",&,N,V_type
Tq,N,V_networkUsage
T@"NSProgress",&,N,V_topLevelProgress
T@"EFPromise",&,N,V_contentRequestPromise
T@"NSProgress",&,N,V_contentRequestProgress
T@"EFLocked",&,N,V_invokerIDs
T@"EFFuture",R,N
T@"NSProgress",R,N
ef_conformsToRFC822UTType
serialDispatchQueueSchedulerWithName:qualityOfService:
updateToInlinePDFAttachmentIfNeeded:
remoteObjectInterfaceWithProtocol:
_remoteObjectRegistry
remoteObjectProxyWithInterface:
contentItemForContentID:
contentItems
mailDropMetadata
fileSize
merge:
flags
setFlags:
setTotalMailDropDownloadSize:
_computeMailDropProperties
componentsWithURL:resolvingAgainstBaseURL:
path
_injectAttachmentViewForElementWithSourceAttributeValue:forContentItem:
contentItemForElementID:
displayStateForContentItem:
displayViewerForContentItem:rect:view:
startDownloadForContentItem:userInitiated:
representationHandler
showSelectedExchangeEventUID:fromRect:view:
_futureForContentItem:networkUsage:invokerID:previouslyInvoked:progress:
showSelectedContentRepresentation:fromRect:view:
showMenuForSelectedContentRepresentation:fromRect:view:
resultIfAvailable
cancel
_representationTypeForContentItem:
setDisplayState:forContentItem:
onScheduler:addFailureBlock:
hasItemConformingToTypeIdentifier:
setDataAvailability:forTypeIdentifier:
registerFileRepresentationForTypeIdentifier:dataAvailableImmediately:visibility:loadHandler:
stringByDeletingPathExtension
setSuggestedName:
registerObject:visibility:
addSuccessBlock:
webView
mcv_stringFromJavaScriptMethod:arguments:
isFinished
fractionCompleted
setPercentCompleted:forContentItem:
maildropProgressHandler
numberWithDouble:
_updateProgressFraction:forContentItem:
performBlock:
ef_observeKeyPath:options:usingBlock:
always:
isPhotoArchive
initWithName:expiration:preventIdleSleep:
archiveDirectory
inputWithURL:
archive
scrubbedArchiveEntries
contents
length
imageWithData:
invalidate
decompressContents:completion:
initWithURL:options:error:
isRegularFile
_attachmentForIdentifier:
sharedReporter
reportIssueType:description:
setFileWrapper:contentType:completion:
inlineImageFinishedDownloading:
completedUnitCount
setCompletedUnitCount:
didStartDownloadForContentItemWithProgress:
initWithContentID:uttype:data:additionalMarkup:
initWithWebView:contentItemHandler:
setContentItems:
associateElementID:withContentID:
associateElementID:withWKAttachmentID:
mailDropBannerMetadata
noteDidFinishDocumentLoadForURL:
noteDidFailLoadingResourceWithURL:
attachmentWasTappedWithElementID:rect:view:
showMenuForContentItem:rect:view:
futureForContentItem:download:
updateDragItemProvider:forElementID:
downloadAllMailDropAttachments
setWebView:
setRepresentationHandler:
totalMailDropDownloadSize
allMailDropsDownloaded
setAllMailDropsDownloaded:
setMaildropProgressHandler:
_elementIDToContentID
_elementIDToWKAttachmentID
_contentIDToTask
_inlinedImageContentIDs
_didComputeMailDropProperties
_totalUnstartedMailDropDownloadSize
_attachmentsScheduler
_totalMailDropProgress
_webProcessProxy
_allMailDropsDownloaded
_mailDropBannerMetadata
_webView
_contentItems
_representationHandler
_totalMailDropDownloadSize
_maildropProgressHandler
T@"WKWebView",&,N,V_webView
T@"NSArray",&,N,V_contentItems
T@"<ContentRepresentationHandlingDelegate>",W,N,V_representationHandler
T@"EMMailDropMetadata",R,N,V_mailDropBannerMetadata
TQ,N,V_totalMailDropDownloadSize
TB,N,V_allMailDropsDownloaded
T@?,C,N,V_maildropProgressHandler
appendString:
signpostLog
initWithMessage:includeSuggestions:representationType:delegate:
itemID
futureWithResult:
initWithMessageList:itemIdentifier:includeSuggestions:representationType:delegate:
messageListItemForItemID:
displayMessage
then:
observableObserver
replay:
filter:
connect
addCancelable:
state
dealloc
messageFuture
result
signpostID
setRequestedRepresentation:
setIncludeSuggestionItems:
setRequestedHeaderKeys:
setIncludeCachedMetadataJSON:
initWithBuilder:
requestRepresentationWithOptions:delegate:completionHandler:
em_itemNotFoundError
futureWithError:
onScheduler:then:
null
observerDidReceiveResult:
em_internalErrorWithReason:
addFailureBlock:
finishWithFuture:
start
contentRepresentationFuture
resultIfAvailable:
result:
hasStarted
objectAtIndexedSubscript:
observerWithResultBlock:completionBlock:failureBlock:
observeOn:
subscribe:
immediateScheduler
onScheduler:addLoadObserver:
T@"NSString",R,C,N
initWithMessage:
initWithMessage:includeSuggestions:
initWithMessageList:itemIdentifier:includeSuggestions:
updateItemID:messageList:
message
retry
waitForResult
addLoadObserver:
_cancelationToken
_inputObservable
_contentObservable
_futureContentRepresentation
_hasError
_retyAttempt
_includeSuggestionItems
_contentRepresentationLock
_contentRepresentationType
_itemID
_messageFuture
T@"EMMessage",R,N
T@"<EMCollectionItemID>",R,N,V_itemID
T@"EFFuture",R,N,V_messageFuture
TB,R
contentObjectID:generateHTMLSnippetsForRelatedContentItems:completionHandler:
mf_stringByEscapingHTMLCodes
localizedStringWithFormat:
initWithMarkupString:baseURL:
markupString
contentObjectID:generateHTMLSnippetsForMailDropContentItems:completionHandler:
contentObjectID:placeholderHTMLForEmptyContentWithCompletionHandler:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
doesNotRecognizeSelector:
setItemID:
dateSent
setDateSent:
setSubject:
senderList
setSenderList:
toList
setToList:
ccList
setCcList:
bccList
setBccList:
atomManager
setAtomManager:
brandIndicatorFuture
setBrandIndicatorFuture:
sendLaterDate
setSendLaterDate:
isRead
setRead:
isFlagged
setFlagged:
flagColors
setFlagColors:
isReplied
setReplied:
isForwarded
setForwarded:
isVIP
setVIP:
isNotify
setNotify:
isMute
setMute:
readLaterDate
setReadLaterDate:
displayDate
setDisplayDate:
followUp
setFollowUp:
isBlockedSender
setBlockedSender:
unsubscribeType
setUnsubscribeType:
hasAttachments
setHasAttachments:
date
setDate:
setObservableObserver:
mailbox
setMailbox:
read
flagged
replied
forwarded
conversationNotificationLevel
isBlocked
readLater
isEqualToIndexSet:
isEqualToArray:
TB,N,GisRead
TB,N,GisFlagged
T@"NSIndexSet",C,N
TB,N,GisReplied
TB,N,GisForwarded
TB,N,GisVIP
notify
TB,N,GisNotify
mute
TB,N,GisMute
blockedSender
TB,N,GisBlockedSender
Tq,N
T@"NSDate",C,N
T@"EMFollowUp",C,N
T@"<EMCollectionItemID>",C,N
T@"ECSubject",C,N
T@"MFMailboxUid",C,N
T@"NSArray",C,N
T@"MFAddressAtomStatusManager",&,N
T@"EFFuture",&,N
copyWithZone:
initWithItemBuilder:
modelObservable
updatedModelWithBuilder:
updatedFlagsModelWithBuilder:
updatedModelWithMessage:brandIndicatorFuture:
_dateSent
_mailbox
_senderList
_toList
_ccList
_bccList
_atomManager
_brandIndicatorFuture
_observableObserver
T@"<EMCollectionItemID>",C,N,V_itemID
T@"NSDate",C,N,V_dateSent
T@"ECSubject",C,N,V_subject
T@"MFMailboxUid",C,N,V_mailbox
T@"NSArray",C,N,V_senderList
T@"NSArray",C,N,V_toList
T@"NSArray",C,N,V_ccList
T@"NSArray",C,N,V_bccList
T@"MFAddressAtomStatusManager",&,N,V_atomManager
T@"EFObservable<EFObserver>",&,N,V_observableObserver
T@"EFFuture",&,N,V_brandIndicatorFuture
T@"EFObservable",R,N
isUnscreenedSender
setUnscreenedSender:
_read
_flagged
_replied
_forwarded
_VIP
_notify
_mute
_blockedSender
_hasAttachments
_unscreenedSender
_flagColors
_readLaterDate
_sendLaterDate
_displayDate
_followUp
_unsubscribeType
_date
TB,N,GisRead,V_read
TB,N,GisFlagged,V_flagged
T@"NSIndexSet",C,N,V_flagColors
TB,N,GisReplied,V_replied
TB,N,GisForwarded,V_forwarded
TB,N,GisVIP,V_VIP
TB,N,GisNotify,V_notify
TB,N,GisMute,V_mute
T@"NSDate",C,N,V_readLaterDate
T@"NSDate",C,N,V_sendLaterDate
T@"NSDate",C,N,V_displayDate
T@"EMFollowUp",C,N,V_followUp
TB,N,GisBlockedSender,V_blockedSender
Tq,N,V_unsubscribeType
TB,N,V_hasAttachments
T@"NSDate",C,N,V_date
unscreenedSender
TB,N,GisUnscreenedSender,V_unscreenedSender
_commonInit
defaultCenter
_trustDidChange:
addObserver:selector:name:object:
_legacyAccountsDidChange:
_vipSendersDidChange:
defaultInstance
sharedManager
addClient:
removeClient:
updateTrustForDisplayedAtoms
_invalidateAtoms
atomProvider
addressBookDidChange:
iterateDisplayedAtomListsWithBlock:
setSecurityInformation:
smimeError
setSMIMEError:
securityInformation
signers
count
subarrayWithRange:
otherSigners
signingCertificateTrustInfo
sender
ef_map:
setOtherSigners:
_updateAtomsInList:
setShouldIncludeDisplayName:
addressAtoms
firstEmailAddress
stringValue
componentsWithString:
commonName
setDisplayName:
emailAddressValue
stringFromEmailAddressConvertible:
setAddress:
actionForTrustInformation:
setPresentationOptions:
updateAtomsForVIP
title
_updateOtherSignersList:
globalAsyncSchedulerWithQualityOfService:
firstObject
shouldDecorateAtomListWithSMIMEStatus:
isSigned
isEncrypted
emailAddresses
emailAddress
simpleAddress
ef_caseInsensitiveIsEqualToString:
enumerateObjectsUsingBlock:
_atomContainsVIPSender:
currentDevice
isInternal
em_userDefaults
boolForKey:
presentationOptions:encodedIntoAddress:
presentationOptions
initWithTrustInformation:
action
legacyAccount
uniqueID
accountWithUniqueId:
setLegacyAccount:
_updateVIPStatus
ABPerson
addObjectsFromArray:
unmodifiedAddressString
allObjects
vipForEmailAddresses:andDisplayNames:
addressBookManager:addressBookDidChange:
addressBookPreferencesChangedForAddressBookManager:
initWithAccount:
setAtomProvider:
updateWithSecurityInformation:
account
setAccount:
_atomProvider
_account
_legacyAccount
_securityInformation
_smimeError
T@"MFMessageLoadingContext",W,N,V_context
T@"EMAccount",&,N,V_account
T@"MailAccount",&,N,V_legacyAccount
T@"EMSecurityInformation",&,N,V_securityInformation
T@"NSError",&,N,SsetSMIMEError:,V_smimeError
T@"<MFAddressAtomProvider>",W,N,V_atomProvider
performSyncBlock:
addressBookManager
initWithCountLimit:
defaultProvider
initWithUserProfileProvider:addressBookManager:
stringFromAddressAddressList:
componentsJoinedByString:
commentCache
_addressCommentForAddressList:
objectForKey:generator:
pairWithFirst:second:
attributedAddressCache
_attributedAddressCommentForAddressList:
removeAllObjects
postNotificationName:object:
string
listFormatter
addressBook
lastObject
first
second
ec_emailAttributedStringWithString:andEmailAddress:
userProfileProvider
allEmailAddresses
array
attributedLocalizedStringFromList:
_invalidateCache
stringForObjectValue:
stringFromEmailAddressList:
attributedStringFromEmailAddressList:
setCommentCache:
addressCache
setAddressCache:
setAttributedAddressCache:
setAddressBookManager:
_userProfileProvider
_listFormatter
_commentCache
_addressCache
_attributedAddressCache
_addressBookManager
T@"<EMUserProfileProvider>",R,N,V_userProfileProvider
T@"MFLocalizationListFormatter",R,N,V_listFormatter
T@"EFLazyCache",&,N,V_commentCache
T@"EFLazyCache",&,N,V_addressCache
T@"EFLazyCache",&,N,V_attributedAddressCache
T@"MFAddressBookManager",&,N,V_addressBookManager
tertiarySystemFillColor
preferredFontForTextStyle:
secondaryLabelColor
setTextColor:
setFont:
setNumberOfLines:
setAdjustsFontForContentSizeCategory:
setContentCompressionResistancePriority:forAxis:
labelColor
initWithArrangedSubviews:
setAxis:
setAlignment:
grayButtonConfiguration
setCornerStyle:
setButtonSize:
bannerViewDidSelectEditButton:itemID:
actionWithHandler:
buttonWithConfiguration:primaryAction:
setTranslatesAutoresizingMaskIntoConstraints:
setContentHuggingPriority:forAxis:
addArrangedSubview:
setCustomSpacing:afterView:
mf_addArrangedSubviews:
addSubview:
leadingAnchor
layoutMarginsGuide
constraintEqualToAnchor:constant:
topAnchor
bottomAnchor
trailingAnchor
activateConstraints:
setSeparatorIsHidden:
setText:
_preferredFontForTextStyle:weight:
initWithString:attributes:
editButton
configuration
setAttributedTitle:
setConfiguration:
displayMessageUsingViewModel:
ef_formatDate:style:
dateLabel
initWithType:itemID:delegate:
bannerLabel
_editButton
_bannerLabel
_dateLabel
T@"<EMCollectionItemID>",&,N,V_itemID
T@"<MFBannerViewDelegate>",W,N,V_delegate
Tq,R,N,V_type
T@"UIButton",R,N,V_editButton
T@"UILabel",R,N,V_bannerLabel
T@"UILabel",R,N,V_dateLabel
preferredContentSizeCategory
setActionTitle:
setAccessoryType:
setActionButtonType:
primaryAction
actionWithTitle:handler:
setPrimaryAction:
dismissAction
setDismissAction:
setBanner:
reload
didTapBlockedSenderBannerView:
didDismissBlockedSenderBannerView:
_titleControlTapped:
_bannerDismissed:
T@"<MFBlockedSenderBannerViewDelegate>",W,N,V_delegate
cardActionWithTitle:shortTitle:imageName:tintColor:handlerEnabled:handler:
setShortTitle:
setImageName:
setTintColor:
setHandler:
setHandlerEnabled:
handlerEnabled
executeHandler
handler
cardActionWithTitle:shortTitle:imageName:tintColor:handler:
executeHandlerIfEnabled
imageName
tintColor
shortTitle
shouldDismissCardBeforeExecuteHandler
setShouldDismissCardBeforeExecuteHandler:
shouldDeferDismissHandler
setShouldDeferDismissHandler:
dismissHandler
setDismissHandler:
_handlerEnabled
_shouldDismissCardBeforeExecuteHandler
_shouldDeferDismissHandler
_imageName
_tintColor
_title
_shortTitle
_handler
_dismissHandler
T@"NSString",&,N,V_imageName
T@"UIColor",&,N,V_tintColor
T@"NSString",C,N,V_title
T@"NSString",C,N,V_shortTitle
TB,N,V_handlerEnabled
T@?,C,N,V_handler
TB,N,V_shouldDismissCardBeforeExecuteHandler
TB,N,V_shouldDeferDismissHandler
T@?,C,N,V_dismissHandler
flagColor
setFlagColor:
_flagColor
T@"NSNumber",&,N,V_flagColor
setAccessibilityIdentifier:
setInsetsLayoutMarginsFromSafeArea:
mailConversationViewExpandedCellBackgroundColor
initWithDelegate:
addInteraction:
effectWithStyle:
initWithEffect:
setFrame:
setClipsToBounds:
setBackgroundView:
backgroundView
setAlpha:
_updateBackgroundView
layer
setAnchorPoint:
buttonWithType:
setCharge:
titleLabel
_setTextColorFollowsTintColor:
setLineBreakMode:
prefixFont
bundleForClass:
setTitle:forState:
sizeToFit
_updateSeeMoreButton
mf_revealActionsButtonWithAccessibilityIdentifier:
_fontMetricCacheDidInvalidate:
_updateButtons
setNeedsLayout
setLayoutMargins:
bounds
shouldHideStickyFooterView
setHidden:
messageContainsBlockQuotes
setSeeMoreButtonHidden:
seeMoreButton
isHidden
alpha
frame
addTarget:action:forControlEvents:
revealActionsButton
setSenderName:
setAttributedTitle:forState:
layoutSubviews
displayMetrics
estimatedFooterViewHeight
layoutActionButtonWithBounds:
layoutSeeMoreButton
currentYOffset
moveOriginYByOffset:
findOverlayView
layoutMarginsDidChange
setBounds:
footerViewDidChangeHeight:
footerViewTopToBaseline
effectiveUserInterfaceLayoutDirection
layoutMargins
setDefaultSeeMoreButtonOriginY:
traitCollection
hasCompactLayout
sharedFontMetricCache
systemFontOfSize:
cachedFont:forKey:
cachedPreferredFontForStyle:
mf_prefersRightToLeftInterfaceLayout
footerViewTrailingButtonOrigin
horizontalSizeClass
setDefaultRevealActionButtonOriginY:
traitCollectionDidChange:
setCurrentYOffset:
mf_symbolConfigurationForView:
setPreferredSymbolConfiguration:forImageInState:
defaultRevealActionButtonOriginY
defaultSeeMoreButtonOriginY
allowsPointerSnapping
mf_revealActionButtonPointerStyleInView:
bringSubviewToFront:
sendSubviewToBack:
nameFont
pointerInteraction:regionForRequest:defaultRegion:
pointerInteraction:styleForRegion:
pointerInteraction:willEnterRegion:animator:
pointerInteraction:willExitRegion:animator:
addConversationSearchOverlay
removeConversationSearchOverlay
T@"UIFont",R,N
isSeeMoreButtonHidden
setSeeMoreButtonAlpha:
seeMoreButtonAlpha
setMessageContainsBlockQuotes:
seeMoreButtonHeight
setDisplayMetrics:
addTarget:action:toButton:
showAttributionWithSenderName:
hideAttribution
pointInside:withEvent:
setRevealActionsButton:
senderName
setAllowsPointerSnapping:
contactStore
setContactStore:
setFindOverlayView:
setSeeMoreButton:
_messageContainsBlockQuotes
_allowsPointerSnapping
_backgroundView
_revealActionsButton
_displayMetrics
_senderName
_defaultRevealActionButtonOriginY
_defaultSeeMoreButtonOriginY
_contactStore
_currentYOffset
_findOverlayView
_seeMoreButton
Td,N,V_defaultRevealActionButtonOriginY
Td,N,V_defaultSeeMoreButtonOriginY
T@"EMCachingContactStore",&,N,V_contactStore
Td,N,V_currentYOffset
TB,R,N
T@"ConversationSearchOverlayView",&,N,V_findOverlayView
T@"UIButton",&,N,V_revealActionsButton
T@"UIButton",&,N,V_seeMoreButton
T@"NSString",C,N,V_senderName
T@"UIVisualEffectView",&,N,V_backgroundView
seeMoreButtonHidden
TB,N,GisSeeMoreButtonHidden
Td,N
Td,R,N
TB,N,V_messageContainsBlockQuotes
T@"<MFMessageFooterViewDelegate>",W,N,V_delegate
T@"MFMessageDisplayMetrics",&,N,V_displayMetrics
TB,N,V_allowsPointerSnapping
_firstLineBaseline
cachedFloat:forKey:
imageView
size
image
baselineOffsetFromBottom
initWithFrame:remainingBytes:
banner
actionStringIsDownloading:
setTintAdjustmentMode:
animateWithDuration:animations:
setUserInteractionEnabled:
didTapHasMoreContentBannerView:
bannerWithFrame:isPlainText:remainingBytes:
titleString
reloadData
requestLoad
T@"NSString",R
T@"<MFHasMoreContentBannerViewDelegate>",W,N,V_delegate
remainingBytes
setRemainingBytes:
_remainingBytes
TQ,V_remainingBytes
mf_stringRepresentationForBytes:
setSubtitle:
acui_specifierIconForAccountTypeIdentifier:
setImages:
didTapHideMyEmailBannerView:
didDismissHideMyEmailBannerView:
T@"<MFHideMyEmailBannerViewDelegate>",W,N,V_delegate
sharedCache
tiltedTabSkyViewEnabled
UIDebuggingEnabled
setTiltedTabSkyViewEnabled:
setUIDebuggingEnabled:
_tiltedTabSkyViewEnabled
_UIDebuggingEnabled
TB,N,V_tiltedTabSkyViewEnabled
TB,N,V_UIDebuggingEnabled
actionTitle
_updateBannerText
loadBlockedContentBannerDidTriggerLoad:
enablePrivacyProtectionAlertForAccount
shouldPresentRemoteContentAlert
alertControllerWithTitle:message:preferredStyle:
setObject:forKey:
actionWithTitle:style:handler:
addAction:
enableMailTrackingProtection:
presentViewController:
initWithFrame:blockedContentTypes:blockingReason:
setBlockedContentTypes:
blockedContentTypes
_blockingReason
_blockedContentTypes
T@"<MFLoadBlockedContentBannerViewDelegate>",W,N,V_delegate
TQ,N,V_blockedContentTypes
loadFailedProxyContentBannerDidTriggerLoad:
loadFailedProxyContentBannerWasDismissed:
initWithFrame:failureReason:
_dismissed:
T@"<MFLoadFailedProxyContentBannerViewDelegate>",W,N,V_delegate
initWithString:
appendLocalizedFormat:
ef_all:
localizedStringFromList:
contentSizeCategoryDidChangeNotification:
initWithProgressViewStyle:stroke:frame:
firstBaselineAnchor
lastBaselineAnchor
constraintEqualToAnchor:
trailingAccessoryViewLayoutGuide
constraintLessThanOrEqualToAnchor:
centerXAnchor
centerYAnchor
isInvalid
isExpired
_setupDownloadLabel
_setupExpirationLabel
_setupDownloadIcon
progressDidFinish
superview
bannerState
avatarDiameterForCurrentContentSize
setConstant:
_bodyLeading
updateConstraints
setTimeStyle:
setDateStyle:
expiration
stringFromDate:
_hasDataLocally
mf_systemImageNamed:forView:
setImage:forState:
startDownload:
removeTarget:action:forControlEvents:
setNeedsDisplay
setBannerState:
mailDropBannerDidTriggerDownload:
_shouldDisplayProgress
setProgress:
setNeedsUpdateConstraints
invalidateIntrinsicContentSize
setDownloadProgress:
shouldPresent
metaData
setMetaData:
downloadProgress
_hasLoaded
_expirationLabel
_downloadLabel
_downloadIcon
_progressView
_iconWrapperWidth
_labelFirstBaseline
_expirationFirstBaseline
_expirationBottom
_metaData
_bannerState
_downloadProgress
T@"EMMailDropMetadata",&,N,V_metaData
TQ,N,V_bannerState
Td,N,V_downloadProgress
T@"<MFMailDropBannerDelegate>",W,N,V_delegate
weakToWeakObjectsMapTable
lock
setScheme:
setPath:
storage
unlock
objectForKey:
query
setQuery:
sharedRegistry
URLForLoadingContext:scheme:
loadingContextForURL:
_lock
_storage
T@"NSMapTable",R,N,V_storage
registerClass:
registry
scheme
caseInsensitiveCompare:
initWithRequest:cachedResponse:client:
client
response
URLProtocol:didReceiveResponse:cacheStoragePolicy:
data
URLProtocol:didLoadData:
URLProtocolDidFinishLoading:
URLProtocol:didFailWithError:
addCancelationBlock:
request
initWithURL:MIMEType:expectedContentLength:textEncodingName:
initWithResponse:data:userInfo:storagePolicy:
errorWithDomain:code:userInfo:
_didLoadContentEvent:error:
finishWithError:
dataUsingEncoding:
appendData:
attachmentManager
content
mf_messageFragment
loadingContext
messageID
domain
code
attachmentForTextAttachment:error:
fetchLocalData
markupStringForDisplayWithData:allowAttachmentElement:
htmlData
preferredCharacterSet
done
_cachedResponseWithData:error:
finishWithResult:error:
initialize
setRegistry:
URLForLoadingContext:
canInitWithRequest:
canonicalRequestForRequest:
requestIsCacheEquivalent:toRequest:
T@"_MFMessageContentURLProtocolRegistry",&,N
startLoading
stopLoading
token
setPromise:
_token
_loadingContext
_promise
T@"EFCancelationToken",R,V_token
T@"MFMessageLoadingContext",R,V_loadingContext
T@"EFPromise",&,N,V_promise
numberOfTapsRequired
_isMatchingTapGestureRecognizer:
canBePreventedByGestureRecognizer:
canPreventGestureRecognizer:
_stopObservingContentHeight
setWebProcessDelegate:
setPreservesSuperviewLayoutMargins:
setContentPaddingFollowsLayoutMargins:
setAllowLoadOfBlockedMessageContent:
setNavigationDelegate:
_setInputDelegate:
setUIDelegate:
scrollView
setAlwaysBounceVertical:
_reloadUserStyleSheets
_updateMinimumFontSize
userContentController
removeAllScriptMessageHandlers
addScriptHandlerForWebView:key:handler:
_handleAttachmentTapMessage:
floatValue
_expandQuoteWithCollapsedBlockquoteOffset:expandedOffset:
footerView
contentRequest
setSkipMessageReformatting:
_foundImageCIDAttachments:
setSelectedHTML:
messageContentView:didChangeSelectedHTML:
selectedHTML
webProcessDidFailLoadingResourceWithURL:
setMessageBlockingReason:
setInitialScale:
setInitiallyZoomsToShowAllContent:
setShowsBanners:
setZoomEnabled:
setActive:
_fontSizeDidChange:
_darkerSystemColorsStatusDidChange:
_addLoadingSubview:
_setupWebProcessLocalizedStrings
setNumberOfTapsRequired:
addGestureRecognizer:
_observeBlockedSenderListChangedNotification
webViewLoadingController
webViewConstants
messageContentViewDidFinishLoadingMessage:
messageContentViewDidFinishFirstPaint:
messageContentViewDidDisplayContent:success:
messageContentView:didFinishRenderingWithHeight:
messageContentView:expandQuoteAtCollapsedOffset:expandedOffset:
messageContentViewWillBeginZoomingMessage:
messageContentView:didEndZoomingMessageWithOffset:
messageContentView:didTapRevealActionsButton:
messageContentView:loadingIndicatorDidChangeVisibility:
messageContentView:didLoadSecurityInformation:
messageContentView:webViewDidTerminateWithReason:
contentItemHandlingDelegateForMessageContentView:
mailboxes
setHasVisibleContent:
_clearAllBannersAnimated:
noAttribution
render:
_mailboxForBanner:
mailboxProvider
objectID
legacyMailboxForObjectID:
brandIndicatorProvider
brandIndicatorLocation
brandIndicatorFutureForLocation:
showDelayedProgressUI
globalAsyncScheduler
afterDelay:performBlock:
setLoadingSpinnerTailspinToken:
loadingSpinnerTailspinToken
setContentRepresentationError:
messageContentView:handleContentRepresentation:
contentRequestDidReceiveContentRepresentation:error:
clearMessage
setLoadingIndicatorVisible:
isInboxMailbox
ef_firstObjectPassingTest:
canArchive
removeFromSuperview
systemBackgroundColor
setAutoresizingMask:
insertSubview:atIndex:
slapWebView
dictionaryWithObjects:forKeys:
showMessageFooter
_layoutFooterView
loadingView
_layoutLoadingView
setScrollEnabled:
mf_activateDebugModeIfEnabled
setSize:
contentInset
contentPaddingFollowsLayoutMargins
_setNeedsPaddingConstantsUpdate
performWithoutAnimation:
firstResponder
isDescendantOfView:
selectAll:
_firstResponderIsInWebView
canPerformAction:withSender:
headerView
automaticallyCollapseQuotedContent
setAutomaticallyCollapseQuotedContent:reloadIfNeeded:
_revealActionsButtonTapped
_seeMoreButtonTapped
numberWithInt:
setWithArray:
sharedApplication
_bodyFont
pointSize
preferences
minimumFontSize
setMinimumFontSize:
safeAreaInsets
readableContentMarginsForWidth:minMargins:safeAreaInsets:
_updateWebViewPaddingConstants
performSelectorOnMainThread:withObject:waitUntilDone:
_viewportWidth
_scaledValueForValue:
lineHeight
leading
hasGenerousMargins
_setObscuredInsets:
_overrideLayoutParametersWithMinimumLayoutSize:maximumUnobscuredSizeOverride:
setContentInset:
setValuesForKeysWithDictionary:
_removeAllUserStyleSheets
_addUserStyleSheet:
_styleSheetWithPadding:useWideLayout:
previousContentSnapshot
setPreviousContentSnapshot:
removeHeaderBlock:animated:
setAttachments:
_clearLoadRemoteImagesBannerAnimated:
_clearHasMoreContentBannerAnimated:
_clearBlockedSenderBannerAnimated:
_clearLoadFailedProxyContentBannerAnimated:
messageContentView:clearSuggestionsBannerAnimated:
insertSubview:above:
loadingIndicatorCancelable
setLoadingIndicatorCancelable:
isLoadingIndicatorVisible
setLoadingIndicatorVisible:animated:
_removeLoadingSubview:
animateWithDuration:animations:completion:
relatedContentItems
_requestWebViewLoadWithRepresentation:
hasMoreContent
remainingByteCount
_addHasMoreContentBannerWithRemainingBytes:
_addBlockedSenderBannerIfNeeded
_addHideMyEmailBannerIfNeeded
addHeaderBlock:animated:
requestWebViewLoadWithError:
contentMessage
skipMessageReformatting
_configureTrustEvaluationsForSignersInSecurityInformation:
hasEncryptedDescendantPart
allowLoadOfBlockedMessageContent
_loadBlockedMessageContactWarningWithRepresentation:
mf_blockRemoteContent
trustEvaluation
requiresReevaluationWithNetworkAccess
showRemoteImages
_setRemoteContentToLoadWithoutProxy
requestWebViewLoadWithContentRepresentation:
messageBody
_loadBlockedMessageContactWarning
topLevelPart
decryptedMessageBodyIsEncrypted:isSigned:
SMIMEError
contentRepresentation
requestWebViewLoadWithContext:
allKeys
requestWebViewLoadWithoutShowingMessageWithContext:
requestWebViewLoadWithoutShowingMessageWithRepresentation:
_triggerWebViewLoadWithoutShowingContentRepresentation
captureSnapshotOfView:withSnapshotType:
renderInContext:
scale
imageWithCGImage:scale:orientation:
contentSize
drawInRect:
_snapshotRect:intoImageOfWidth:completionHandler:
_doAfterNextPresentationUpdate:
_updateFileWrapperForAttachment:contentID:
presentingViewControllerForMessageContentView:
presentViewController:animated:completion:
_displayDismissibleAttachmentErrorWithTitle:message:
_convertDictionaryToRect:
_adjustedRectForWebRect:
zoomScale
contentOffset
dataSource
messageContentView:quotedContentAttributionForMessage:
unknownAttribution
futureWithBlock:
_beginObservingContentHeight
launchedToTest
messageContentViewContentLayerFinished:
ef_mapSelector:
initWithArray:
ef_removeObjectsPassingTest:
_showLoadFailedProxyContentBannerIfNeeded
messageContentView:viewedRemoteURLs:
_dataDetectionResults
ef_onScheduler:
_processDataDetectionMetricsFromResults:
showsBanners
enumerateKeysAndObjectsUsingBlock:
insertHeaderBlock:atIndex:animated:
messageBlockingReason
trustConfigurationScheduler
evaluateTrustsWithOptions:
webProcessBrowserContextControllerDidBecomeAvailable
defaultTimeZone
coreResult
ef_countObjectsPassingTest:
shownViaDataDetectorsLinkInApp:
isUserInitiated
contentRepresentationIfAvailable
hasPrefix:
targetFrame
isMainFrame
fragment
mcv_dictionaryFromJavaScriptMethod:arguments:
messageContentView:scrollToRect:
navigationType
removeObject:
sharedController
_dataDetectionContextForWebView:
defaultActionForURL:results:context:
performAction:inView:interactionDelegate:
isFaceTimeMultiwayURL
setWantsStagingArea:
sharedInstance
launchAppForJoinRequest:
messageContentView:clickedLinkInMessage:scheme:
containsString:
requestedHeaders
headersForKey:
initWithHeaderBody:
headerFields
queryItems
initWithArray:copyItems:
em_mailToFromQueryItemKey
initWithName:value:
setQueryItems:
messageContentView:openPossibleStoreURL:
initialContentOffset
setContentOffset:
_notifyDelegateScrollViewSizeChanged:
initiallyZoomsToShowAllContent
minimumZoomScale
setZoomScale:
_logRequestFinishWithSuccess:
clearSelectedHTML
_webProcessIdentifier
_killWebContentProcess
window
windowScene
activationState
_loadAlternateHTMLString:baseURL:forUnreachableURL:
hideMenuForSelectedContentRepresentation
setAttachmentDragPreviews:
initWithData:encoding:
initWithDropOperation:
whitespaceAndNewlineCharacterSet
addCharactersInString:
invertedSet
rangeOfCharacterFromSet:
initForReadingFromData:error:
setWithObjects:
decodeObjectOfClasses:forKey:
itemProvider
teamData
attachmentDragPreviews
targetedDragPreviewInContainer:centerOffset:
_webView:previewItem:
subjectWithoutPrefix
publicMessageURL
uniqueIdentifier
sharedConnection
mayOpenFromManagedToUnmanaged
_contentItemForElement:
menuWithTitle:children:
configurationWithIdentifier:previewProvider:actionProvider:
canPreviewItem:
initWithEventUID:eventStore:
viewController
preferredMIMEType
initWithURL:MIMEType:
initWithPreviewItems:
setIsContentManaged:
messageSourceMailboxObjectIDForMessageContentView:
subjectString
ef_conformsToMarkupUTType
mayShareToUnmanaged
_allAttachmentsArePhotosOrVideos
localizedTitleForSaveAllAttachmentsAction
initForExportingURLs:asCopy:
_setIsContentManaged:
boundingRect
elementActionTypeForUIActionIdentifier:
_activatedElementInfo
_contextMenuConfigurationForAttachment:
addCompletion:
_adjustWebViewInsetsToAccomodateHeaderAndFooter
layoutIfNeeded
setTransform:
CGSizeValue
isFatPipe
_alertMailDropDownloadIsTooLargeForCell:
_downloadAllMailDropAttachments
viewPrintFormatter
requestAdditionalContentWithCompletion:
defaultWorkspace
hideMyEmailURL
openSensitiveURL:withOptions:
loadBlockedContent
_reloadWithPartiallyEncryptedMessageAllowed
_reloadWithRemoteContentAllowed
_reevaluateTrustWithNetworkAccessAllowed
_triggerWebViewLoad
setShowRemoteImages:
reevaluateTrustWithNetworkAccessAllowed
dismissViewControllerAnimated:completion:
setBool:forKey:
_showModalViewController:presentationSource:forceNavigationController:
initWithRootViewController:
setModalPresentationStyle:
popoverPresentationController
mf_setAsSourceForPopoverPresentationController:
presentedViewController
topViewController
navigationItem
rightBarButtonItem
presentedControllerDoneButtonItem
setRightBarButtonItem:
setSourceView:
setSourceRect:
initWithView:
setPreview:
dismissPresentedViewController:
initWithBarButtonSystemItem:target:action:
isZoomEnabled
subviews
_obscuredInsets
_resetHeaderOffsetForZoom
suppressScrolling
isZooming
isZoomBouncing
_adjustHeaderOffsetForZoom
transportType
contentRepresentationError
mailboxesIfAvailable
statisticsKind
accountStatisticsKindToIdentifier:
postNotificationName:object:userInfo:
didEndTextSearch
prepareForReuse
shouldPromptForBlockedSender
blockedSenderURL
setPromptForBlockedSender:
_handleBlockSenderListChanged:
didBeginTextSearchOperation
clearAllDecoratedFoundText
didEndTextSearchOperation
decorateFoundTextRange:inDocument:usingStyle:
_requestRectForFoundTextRange:completionHandler:
adaptivePresentationStyleForPresentationController:
adaptivePresentationStyleForPresentationController:traitCollection:
presentationController:prepareAdaptivePresentationController:
presentationController:viewControllerForAdaptivePresentationStyle:
presentationController:willPresentWithAdaptiveStyle:transitionCoordinator:
presentationControllerShouldDismiss:
presentationControllerWillDismiss:
presentationControllerDidDismiss:
presentationControllerDidAttemptToDismiss:
prepareForPopoverPresentation:
popoverPresentationControllerShouldDismissPopover:
popoverPresentationControllerDidDismissPopover:
popoverPresentationController:willRepositionPopoverToRect:inView:
_webView:didStartInputSession:
_webView:willSubmitFormValues:userObject:submissionHandler:
_webView:focusShouldStartInputSession:
_webView:decidePolicyForFocusedElement:
_webView:accessoryViewCustomButtonTappedInFormInputSession:
_webView:insertTextSuggestion:inInputSession:
_webView:willStartInputSession:
_webView:focusRequiresStrongPasswordAssistance:
_webViewAdditionalContextForStrongPasswordAssistance:
_webView:shouldRevealFocusOverlayForInputSession:
_webView:focusedElementContextViewHeightForFittingSize:inputSession:
_webView:focusedElementContextViewForInputSession:
webView:decidePolicyForNavigationAction:decisionHandler:
webView:decidePolicyForNavigationAction:preferences:decisionHandler:
webView:decidePolicyForNavigationResponse:decisionHandler:
webView:didStartProvisionalNavigation:
webView:didReceiveServerRedirectForProvisionalNavigation:
webView:didFailProvisionalNavigation:withError:
webView:didCommitNavigation:
webView:didFinishNavigation:
webView:didFailNavigation:withError:
webView:didReceiveAuthenticationChallenge:completionHandler:
webViewWebContentProcessDidTerminate:
webView:authenticationChallenge:shouldAllowDeprecatedTLS:
webView:navigationAction:didBecomeDownload:
webView:navigationResponse:didBecomeDownload:
_webView:navigation:didFailProvisionalLoadInSubframe:withError:
_webView:willPerformClientRedirectToURL:delay:
_webView:didPerformClientRedirectFromURL:toURL:
_webViewDidCancelClientRedirect:
_webView:navigationDidFinishDocumentLoad:
_webView:navigation:didSameDocumentNavigation:
_webView:renderingProgressDidChange:
_webViewWebProcessDidCrash:
_webViewWebProcessDidBecomeResponsive:
_webViewWebProcessDidBecomeUnresponsive:
_webCryptoMasterKeyForWebView:
_webView:authenticationChallenge:shouldAllowLegacyTLS:
_webView:didNegotiateModernTLSForURL:
_webView:contextMenuDidCreateDownload:
_webViewDidBeginNavigationGesture:
_webViewDidEndNavigationGesture:withNavigationToBackForwardListItem:
_webViewWillEndNavigationGesture:withNavigationToBackForwardListItem:
_webView:willSnapshotBackForwardListItem:
_webViewDidRemoveNavigationGestureSnapshot:
_webView:decidePolicyForNavigationAction:preferences:userInfo:decisionHandler:
_webView:didStartProvisionalNavigation:userInfo:
_webView:didFailNavigation:withError:userInfo:
_webView:URL:contentRuleListIdentifiers:notifications:
_webView:contentRuleListWithIdentifier:performedAction:forURL:
_webView:webContentProcessDidTerminateWithReason:
_webView:didStartProvisionalLoadWithRequest:inFrame:
_webView:didFailProvisionalLoadWithRequest:inFrame:withError:
_webView:didCommitLoadWithRequest:inFrame:
_webView:didFailLoadWithRequest:inFrame:withError:
_webView:didFinishLoadWithRequest:inFrame:
_webView:didStartLoadForQuickLookDocumentInMainFrameWithFileName:uti:
_webView:didFinishLoadForQuickLookDocumentInMainFrame:
_webViewDidRequestPasswordForQuickLookDocument:
_webView:willGoToBackForwardListItem:inPageCache:
_webView:decidePolicyForSOAuthorizationLoadWithCurrentPolicy:forExtension:completionHandler:
webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:
webViewDidClose:
webView:runJavaScriptAlertPanelWithMessage:initiatedByFrame:completionHandler:
webView:runJavaScriptConfirmPanelWithMessage:initiatedByFrame:completionHandler:
webView:runJavaScriptTextInputPanelWithPrompt:defaultText:initiatedByFrame:completionHandler:
webView:requestMediaCapturePermissionForOrigin:initiatedByFrame:type:decisionHandler:
webView:requestDeviceOrientationAndMotionPermissionForOrigin:initiatedByFrame:decisionHandler:
webView:shouldPreviewElement:
webView:previewingViewControllerForElement:defaultActions:
webView:commitPreviewingViewController:
webView:contextMenuConfigurationForElement:completionHandler:
webView:contextMenuWillPresentForElement:
webView:contextMenuForElement:willCommitWithAnimator:
webView:contextMenuDidEndForElement:
webView:showLockdownModeFirstUseMessage:completionHandler:
_webView:decideDatabaseQuotaForSecurityOrigin:currentQuota:currentOriginUsage:currentDatabaseUsage:expectedUsage:decisionHandler:
_webView:decideDatabaseQuotaForSecurityOrigin:databaseName:displayName:currentQuota:currentOriginUsage:currentDatabaseUsage:expectedUsage:decisionHandler:
_webView:decideWebApplicationCacheQuotaForSecurityOrigin:currentQuota:totalBytesNeeded:decisionHandler:
_webView:printFrame:
_webView:printFrame:pdfFirstPageSize:completionHandler:
_webViewClose:
_webViewFullscreenMayReturnToInline:
_webViewDidEnterFullscreen:
_webViewDidExitFullscreen:
_webViewRequestPointerLock:
_webViewDidRequestPointerLock:completionHandler:
_webViewDidShowSafeBrowsingWarning:
_webViewDidLosePointerLock:
_webView:hasVideoInPictureInPictureDidChange:
_webView:shouldAllowPDFAtURL:toOpenFromFrame:completionHandler:
_webView:imageOrMediaDocumentSizeChanged:
_webView:includeSensitiveMediaDeviceDetails:
_webView:requestDisplayCapturePermissionForOrigin:initiatedByFrame:withSystemAudio:decisionHandler:
_webView:requestUserMediaAuthorizationForDevices:url:mainFrameURL:decisionHandler:
_webView:checkUserMediaPermissionForURL:mainFrameURL:frameIdentifier:decisionHandler:
_webView:mediaCaptureStateDidChange:
_webView:dragDestinationActionMaskForDraggingInfo:
_webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:completionHandler:
_webView:requestGeolocationPermissionForFrame:decisionHandler:
_webView:requestGeolocationPermissionForOrigin:initiatedByFrame:decisionHandler:
_webView:queryPermission:forOrigin:completionHandler:
_webView:runBeforeUnloadConfirmPanelWithMessage:initiatedByFrame:completionHandler:
_webView:editorStateDidChange:
_webView:didRemoveAttachment:
_webView:didInsertAttachment:withSource:
_webView:didInvalidateDataForAttachment:
_webView:didResignInputElementStrongPasswordAppearanceWithUserInfo:
_webView:requestStorageAccessPanelForDomain:underCurrentDomain:completionHandler:
_webView:didChangeFontAttributes:
_webView:takeFocus:
_webView:requestWebAuthenticationNoGestureForOrigin:completionHandler:
_webView:runWebAuthenticationPanel:initiatedByFrame:completionHandler:
_webView:handleAutoplayEvent:withFlags:
_webView:willShareActivityItems:
_webView:requestSpeechRecognitionPermissionForOrigin:decisionHandler:
_webViewDidEnableInspectorBrowserDomain:
_webViewDidDisableInspectorBrowserDomain:
_webView:requestPermissionForXRSessionOrigin:mode:grantedFeatures:consentRequiredFeatures:consentOptionalFeatures:completionHandler:
_webView:startXRSessionWithCompletionHandler:
_webView:requestNotificationPermissionForSecurityOrigin:decisionHandler:
_webViewEndXRSession:
_webView:requestCookieConsentWithMoreInfoHandler:decisionHandler:
_webView:decidePolicyForModalContainer:decisionHandler:
_webView:shouldIncludeAppLinkActionsForElement:
_webView:actionsForElement:defaultActions:
_webView:didNotHandleTapAsClickAtPoint:
_webView:requestGeolocationAuthorizationForURL:frame:decisionHandler:
_webView:fileUploadPanelContentIsManagedWithInitiatingFrame:
_webView:previewViewControllerForURL:
_webView:commitPreviewedViewController:
_webView:willPreviewImageWithURL:
_webView:commitPreviewedImageWithURL:
_webView:didDismissPreviewViewController:committing:
_webView:didDismissPreviewViewController:
_webView:contextMenuConfigurationForElement:completionHandler:
_webView:contextMenuForElement:willCommitWithAnimator:
_webView:contextMenuWillPresentForElement:
_webView:contextMenuContentPreviewForElement:
_webView:contextMenuDidEndForElement:
_webView:mouseDidMoveOverElement:withFlags:userInfo:
_webView:showCustomSheetForElement:
_webView:alternateActionForURL:
_attachmentListForWebView:
_attachmentListForWebView:sourceIsManaged:
_webView:indexIntoAttachmentListForElement:
_webView:finalObscuredInsetsForScrollView:withVelocity:targetContentOffset:
_contextMenuHintPreviewContainerViewForWebView:
_webView:previewViewControllerForURL:defaultActions:elementInfo:
_webView:previewViewControllerForAnimatedImageAtURL:defaultActions:elementInfo:imageSize:
_presentingViewControllerForWebView:
_webView:getAlternateURLFromImage:completionHandler:
_webView:alternateURLFromImage:userInfo:
_webView:previewViewControllerForImage:alternateURL:defaultActions:elementInfo:
_webView:adjustedDataInteractionItemProviders:
_webView:adjustedDataInteractionItemProvidersForItemProvider:representingObjects:additionalData:
_webView:performDataInteractionOperationWithItemProviders:
_webView:dataInteraction:sessionWillBegin:
_webView:dataInteraction:session:didEndWithOperation:
_webView:dataInteractionOperationWasHandled:forSession:itemProviders:
_webView:willUpdateDataInteractionOperationToOperation:forSession:
_webView:willUpdateDropProposalToProposal:forSession:
_webView:previewForLiftingItem:session:
_webView:previewForCancellingItem:withDefault:
_webView:willPerformDropWithSession:
_webView:dataOwnerForDropSession:
_webView:dataOwnerForDragSession:
_webView:didChangeSafeAreaShouldAffectObscuredInsets:
_webView:didPresentFocusedElementViewController:
_webView:didDismissFocusedElementViewController:
_webView:gestureRecognizerCouldPinch:
_webViewCanBecomeFocused:
_webView:touchEventsMustRequireGestureRecognizerToFail:
headerViewDidChangeHeight:
mf_setAsSourceWithExtendedRectForPopoverPresentationController:
mf_setAsTargetedSourceOnSceneConfiguration:
scrollViewDidScroll:
scrollViewDidZoom:
scrollViewWillBeginDragging:
scrollViewWillEndDragging:withVelocity:targetContentOffset:
scrollViewDidEndDragging:willDecelerate:
scrollViewWillBeginDecelerating:
scrollViewDidEndDecelerating:
scrollViewDidEndScrollingAnimation:
viewForZoomingInScrollView:
scrollViewWillBeginZooming:withView:
scrollViewDidEndZooming:withView:atScale:
scrollViewShouldScrollToTop:
scrollViewDidScrollToTop:
scrollViewDidChangeAdjustedContentInset:
webProcessDidFinishDocumentLoadForURL:andRequestedRemoteURLs:
webProcessDidFinishLoadForURL:
webProcessDidBlockLoadingResourceWithURL:
webProcessFailedToLoadResourceWithProxyForURL:failureReason:
webProcessDidCreateBrowserContextControllerLoadDelegate
setContentRequest:
sceneMovedToForeground
setAutomaticallyCollapseQuotedContent:
setShowMessageFooter:
updateForRedisplay
_requestWebViewLoadWithLoadingContext:
generateSnapshotImageWithCompletion:
_libraryMessage
_quotedContentAttributionForMessage:
_objectContainsNonEmptyString:
_attachmentPreviewsFromData:
downloadFutureForContentItem:
loadHasMoreContentBannerIfNecessary
_showModalViewController:presentationSource:
setSuppressScrolling:
didBeginTextSearch
showSearchResultsAtRange:usingStyle:
requestRectForFoundTextRange:completionHandler:
setDataSource:
setLoadingContext:
setInitialContentOffset:
headerViewSubjectBlock
setHeaderViewSubjectBlock:
shouldArchiveByDefault
setShouldArchiveByDefault:
hasVisibleContent
setMailboxProvider:
daemonInterface
setDaemonInterface:
setBrandIndicatorProvider:
attachments
setLoadingView:
initialScale
setWebViewLoadingController:
showingError
setShowingError:
bucketPreferenceToken
setBucketPreferenceToken:
_loadingCancelable
_relatedItemsHelper
_headerView
_mailDropBanner
_loadHasMoreContentBanner
_hideMyEmailBanner
_loadImagesHeaderBlock
_blockedSenderBanner
_loadFailedProxyContentBanner
_previousContentSnapshotWrapperView
_presentedControllerDoneButtonItem
_activatedAttachmentRect
_contentSizeObservation
_suppressContentSizeNotifications
_suppressContentSizeNotificationsUntilFirstPaint
_originalZoomInsets
_paddingConstantsNeedUpdate
_footerView
_inFlightURLs
_allRemoteURLs
_failedProxyURLs
_webProcessCrashCount
_backgroundWebProcessCrashCount
_flags
_automaticallyCollapseQuotedContent
_showMessageFooter
_shouldArchiveByDefault
_initiallyZoomsToShowAllContent
_suppressScrolling
_contentPaddingFollowsLayoutMargins
_hasVisibleContent
_showsBanners
_zoomEnabled
_allowLoadOfBlockedMessageContent
_showingError
_isTextSearchActive
_dataSource
_contentRequest
_selectedHTML
_headerViewSubjectBlock
_messageBlockingReason
_previousContentSnapshot
_mailboxProvider
_daemonInterface
_brandIndicatorProvider
_attachments
_loadingIndicatorCancelable
_loadingView
_initialScale
_webViewLoadingController
_attachmentDragPreviews
_contentRepresentationError
_loadingSpinnerTailspinToken
_trustConfigurationScheduler
_bucketPreferenceToken
_initialContentOffset
T@"NSArray",C,V_attachments
T@"NSString",C,N,V_selectedHTML
T@"<EFCancelable>",&,N,V_loadingIndicatorCancelable
T@"MFMessageContentLoadingView",&,N,V_loadingView
loadingIndicatorVisible
TB,N,GisLoadingIndicatorVisible
Td,N,V_initialScale
TB,N,V_hasVisibleContent
T@"MFWebViewLoadingController",&,N,V_webViewLoadingController
T@"WKWebView",R,N
T@"MFWebViewDictionary",R,N
T@"NSDictionary",&,N,V_attachmentDragPreviews
TB,N,V_allowLoadOfBlockedMessageContent
T@"EMContentRepresentation",R
T@"NSError",&,N,V_contentRepresentationError
TB,N,V_showingError
T@"<EFCancelable>",&,N,V_loadingSpinnerTailspinToken
T@"<EFScheduler>",R,N,V_trustConfigurationScheduler
T@"<EFCancelable>",&,N,V_bucketPreferenceToken
T@"<MFMessageContentViewDelegate>",W,N,V_delegate
T@"<MFMessageContentViewDataSource>",W,N,V_dataSource
T@"MessageContentRepresentationRequest",&,N,V_contentRequest
T@"MFMessageLoadingContext",&,N,V_loadingContext
T@"UIScrollView",R,N
T{CGPoint=dd},N,V_initialContentOffset
T@"MFMessageHeaderView",R,N,V_headerView
T@"UIView",&,N,V_headerViewSubjectBlock
T@"MFConversationItemFooterView",R,N
TB,N,V_automaticallyCollapseQuotedContent
TB,N,V_showMessageFooter
TB,N,V_shouldArchiveByDefault
Tq,N,V_messageBlockingReason
T@"UIView",&,N,V_previousContentSnapshot
T@"NSArray",R
TB,N,V_initiallyZoomsToShowAllContent
TB,N,V_suppressScrolling
TB,N,V_contentPaddingFollowsLayoutMargins
TB,N,V_showsBanners
zoomEnabled
TB,N,GisZoomEnabled,V_zoomEnabled
T@"MFMailboxProvider",&,N,V_mailboxProvider
T@"EMDaemonInterface",&,N,V_daemonInterface
T@"MUIBrandIndicatorProvider",&,N,V_brandIndicatorProvider
snapshotViewYOrigin
initWithFrame:snapshotView:
snapshotView
setSnapshotView:
setSnapshotViewYOrigin:
_snapshotView
_snapshotViewYOrigin
T@"UIView",&,N,V_snapshotView
Td,N,V_snapshotViewYOrigin
stringByAppendingString:
initWithSource:forMainFrameOnly:
pathForResource:ofType:
stringWithContentsOfFile:encoding:error:
preferenceEnabled:
fullyRedactedStringForString:
userInterfaceIdiom
setTraitCollection:
setSafeAreaInsets:
setFooterViewDisplayMetrics:
displayMetricsWithTraitCollection:layoutMargins:safeAreaInsets:interfaceOrientation:
setTrailingButtonView:
mf_shouldUseDesktopClassNavigationBarForTraitCollection:
_scaledFloatWithValue:fontStyle:
_scaledFloatWithValue:fontStyle:maximumContentSizeCategory:
messageTopPaddingInConversation
avatarDiameter
topToSenderBaselineInConversation
baselineToBaselineSpacingInConversation
messageTopPaddingInConversationForMailActionHeader
topToSenderBaselineInConversationForMailActionHeader
baselineToBaselineSpacingInConversationForMailActionHeader
cachedScaledFloatWithValue:fontStyle:
cachedScaledFloatWithValue:fontStyle:maximumContentSizeCategory:
footerViewDisplayMetrics
_calculateFooterViewButtonsAnimationOffset
trailingButtonView
conversationHeaderViewShouldHideCollapsedSuperTitle
displayMetricsWithTraitCollection:layoutMargins:safeAreaInsets:interfaceOrientation:trailingButtonView:
fontCacheKeyPrefix
prefersFlushSeparator
prefersFlushSeparatorForLeadingEdge
minHorizontalSpacing
recipientBaselineToFirstSeparatorInConversation
statusIndicatorHorizontalSpacing
messageBottomPaddingInConversation
messageBottomPaddingInConversationForMailActionHeader
_cachedFontForStyle:
cellHeightToStartScroll
topToGlyphBaselineInMailActionCardHorizontalGroup
baselineToBaselineSpacingInMailActionCardHorizontalGroup
bottomSpacingInMailActionCardHorizontalGroup
topToFirstBaselineSpacingInMailActionCardVerticalGroup
bottomToLastBaselineInMailActionCardVerticalGroup
mailActionCardPreferredHeightForPad
mailActionCardMaximumContainerViewHeightForLargerMediumDetent
mailActionCardSmallerMediumDetentCoverage
mailActionCardLargerMediumDetentCoverage
conversationHeaderViewCollapsedSuperTitleTopToFirstBaseline
conversationHeaderViewCollapsedTitleTopToFirstBaseline
conversationHeaderViewCollapsedTitleBottomToLastBaseline
conversationHeaderViewExpandedTitleTopToFirstBaseline
topToSenderBaseline
baselineToBaselineSpacing
recipientBaselineToFirstSeparator
firstSeparatorToSubjectBaseline
headerBottomPadding
statusIndicatorVerticalSpacing
footerViewButtonsAnimationOffset
setFooterViewButtonsAnimationOffset:
_traitCollection
_topToSenderBaseline
_baselineToBaselineSpacing
_recipientBaselineToFirstSeparator
_firstSeparatorToSubjectBaseline
_headerBottomPadding
_statusIndicatorVerticalSpacing
_footerViewButtonsAnimationOffset
_footerViewDisplayMetrics
_trailingButtonView
_layoutMargins
_safeAreaInsets
T@"UITraitCollection",&,N,V_traitCollection
T{UIEdgeInsets=dddd},N,V_layoutMargins
T{UIEdgeInsets=dddd},N,V_safeAreaInsets
T@"ConversationFooterViewDisplayMetrics",&,N,V_footerViewDisplayMetrics
Td,N,V_footerViewButtonsAnimationOffset
T@"UIView",&,N,V_trailingButtonView
Td,R,N,V_topToSenderBaseline
Td,R,N,V_baselineToBaselineSpacing
Td,R,N,V_recipientBaselineToFirstSeparator
Td,R,N,V_firstSeparatorToSubjectBaseline
Td,R,N,V_headerBottomPadding
Td,R,N,V_statusIndicatorVerticalSpacing
preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:
fontWithDescriptor:size:
setDistribution:
_updateSeparators
setDraggableArea:
headerBlocks
separatorIsHidden
separator
convertRect:fromView:
pinnedBlock
insertObject:atIndex:
viewModel
_animationConstraintsForBlockAtIndex:
deactivateConstraints:
insertArrangedSubview:atIndex:
_layoutAnimatedWithCompletion:
setPinnedBlock:
removeArrangedSubview:
indexOfObject:
setHeaderBlocks:animated:
mf_diffWithArray:
removedIndexes
enumerateIndexesWithOptions:usingBlock:
addedIndexes
enumerateIndexesUsingBlock:
mutableCopy
backgroundColor
mf_isTranslucent
heightAnchor
constraintEqualToConstant:
animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:
setViewModel:
bottomSeparatorDrawsFlushWithLeadingEdge
_blockHasWhiteOrClearBackground:
setSeparatorDrawsFlushWithTrailingEdge:
setSeparatorDrawsFlushWithLeadingEdge:
whiteColor
drawRect:forViewPrintFormatter:
draggableArea
removeAllHeaderBlocksAnimated:
setHeaderBlocks:
setMessageFlags:conversationFlags:
setBottomSeparatorDrawsFlushWithLeadingEdge:
_headerBlocks
_bottomSeparatorDrawsFlushWithLeadingEdge
_pinnedBlock
_viewModel
_draggableArea
T@"MessageHeaderViewModel",&,N,V_viewModel
T{CGRect={CGPoint=dd}{CGSize=dd}},N,V_draggableArea
T@"<MFMessageHeaderViewDelegate>",W,N,V_delegate
T@"MFMessageHeaderViewBlock",&,N,V_pinnedBlock
T@"NSArray",C,N,V_headerBlocks
TB,N,V_bottomSeparatorDrawsFlushWithLeadingEdge
createPrimaryViews
initializePrimaryLayoutConstraints
setSeparator:
setTrailingAccessoryViewLayoutGuide:
addLayoutGuide:
widthAnchor
setTrailingAccessoryViewLayoutGuideWidth:
setTrailingAccessoryViewLayoutGuideTrailing:
trailingAccessoryViewLayoutGuideWidth
trailingAccessoryViewLayoutGuideTrailing
directionalLayoutMargins
setUsingLargeTextLayout:
separatorLeading
setSeparatorLeading:
separatorTrailing
setSeparatorTrailing:
observableCancelable
subscribeWithResultBlock:
setObservableCancelable:
separatorDrawsFlushWithLeadingEdge
separatorDrawsFlushWithTrailingEdge
usingLargeTextLayout
interactivelyResizing
setInteractivelyResizing:
_separatorIsHidden
_separatorDrawsFlushWithLeadingEdge
_separatorDrawsFlushWithTrailingEdge
_usingLargeTextLayout
_interactivelyResizing
_separator
_trailingAccessoryViewLayoutGuide
_trailingAccessoryViewLayoutGuideWidth
_trailingAccessoryViewLayoutGuideTrailing
_separatorLeading
_separatorTrailing
_observableCancelable
T@"SeparatorLayer",&,N,V_separator
T@"UILayoutGuide",&,N,V_trailingAccessoryViewLayoutGuide
T@"NSLayoutConstraint",&,N,V_trailingAccessoryViewLayoutGuideWidth
T@"NSLayoutConstraint",&,N,V_trailingAccessoryViewLayoutGuideTrailing
T@"NSLayoutConstraint",&,N,V_separatorLeading
T@"NSLayoutConstraint",&,N,V_separatorTrailing
T@"<EFCancelable>",&,N,V_observableCancelable
TB,N,V_separatorIsHidden
TB,N,V_separatorDrawsFlushWithLeadingEdge
TB,N,V_separatorDrawsFlushWithTrailingEdge
TB,N,V_usingLargeTextLayout
TB,N,V_interactivelyResizing
initWithType:senderName:
attributionWithSenderName:
T@"MFQuotedContentAttribution",R
T@"NSString",R,C,N,V_senderName
_readableWidth
commonInitWithBanner:
mf_debugModeEnabled
purpleColor
colorWithAlphaComponent:
setCloseButtonXAnchorOffset:
bannerConstraints
_constraintsForEdges:banner:useLayoutMarginsGuide:
setBannerConstraints:
trailingOffsetToMarginForCloseButtonAlignment
initWithFrame:banner:
willMoveToSuperview:
_banner
_bannerConstraints
T@"NSArray",&,N,V_bannerConstraints
T@"UIView<SGBannerProtocol>",&,N,V_banner
refreshCachedValues
activeNonLocalAccounts
activeAccounts
copyReceivingEmailAddresses
ef_flatten
ef_filter:
_accountsEmailAddresses
hasAccountsConfigured
initWithBytes:length:encoding:
initWithSource:injectionTime:forMainFrameOnly:
initWithObjects:
userScripts
initWithCapacity:
descriptionWithLocale:indent:
stringByTrimmingCharactersInSet:
registerDictionary:name:
setDictionary:forWebViewDictionaryWithName:
setValuesForKeysWithDictionary:forWebViewDictionaryWithName:
dictionaryWithValuesForKeys:
isEqualToDictionary:
keyEnumerator
allKeysForObject:
allValues
objectEnumerator
objectsForKeys:notFoundMarker:
getObjects:andKeys:count:
enumerateKeysAndObjectsWithOptions:usingBlock:
removeObjectForKey:
synchronize
_setRequiresSynchronization
removeObjectsForKeys:
setDictionary:
_updateRemoteInstance
registerWithWebView:javascriptName:
javascriptName
_changedKeys
_requiresResynchronization
_javascriptName
T@"NSString",R,N,V_javascriptName
sharedWebViewFactory
mf_attributionExpression
pattern
setClasses:forSelector:argumentIndex:ofReply:
_reconveneWebProcessBundle
_unregisterWebProcessDelegate:
weakProxyForObject:
remoteObjectInterface
unregisterExportedObject:interface:
urlSession
unregisterObserver:
registerExportedObject:interface:
registerObserver:
_registerWebProcessDelegate:
_killWebContentProcessAndResetState
loadingURL
_doIssueLoadRequest
error
loadFileURL:allowingReadAccessToURL:
requestWithURL:cachePolicy:timeoutInterval:
loadRequest:
stringByReplacingOccurrencesOfString:withString:
queryItemWithName:value:
_setRemoteInspectionNameOverride:
setLoadingURL:
loadHTMLString:baseURL:
setError:
setContentRepresentation:
registerContentRepresentation:
webProcessDelegate
remoteContentURLSession:failedToProxyURL:failureReason:
setRemoteObjectInterface:
webProcessPluginNeedsUpdate
setWebProcessPluginNeedsUpdate:
_webProcessPluginNeedsUpdate
_webViewConstants
_webProcessDelegate
_remoteObjectInterface
_contentRepresentation
_loadingURL
_error
T@"_WKRemoteObjectInterface",&,N,V_remoteObjectInterface
T@"EMContentRepresentation",&,N,V_contentRepresentation
T@"NSURL",&,N,V_loadingURL
T@"NSError",&,N,V_error
TB,N,V_webProcessPluginNeedsUpdate
T@"MFWebViewDictionary",R,N,V_webViewConstants
T@"<MFMailWebProcessDelegate>",W,N,V_webProcessDelegate
initWithExtensionBundleIdentifier:kind:
scheduler
timelineController
reloadTimelineWithReason:
T@"<EFScheduler>",R,N
T@"MFWidgetController",R,N
reloadTimelinesWithReason:
setTimelineController:
_timelineController
T@"CHSTimelineController",&,N,V_timelineController
messageRepository
setUpURLCacheWithMemoryCapacity:
remoteContentURLCache
initWithRemoteContentURLCache:
sharedWebViewFactoryFuture
initWithCache:
initWithSession:schemePrefix:allowProxying:
weakObjectsHashTable
_didReceiveMemoryWarning:
invalidateAndCancel:
setPreallocatedWebViews:
URLForResource:withExtension:subdirectory:
setInjectedBundleURL:
setShouldTakeUIBackgroundAssertion:
_initWithConfiguration:
schemePrefix
isMailPrivacyProtectionAllowed
_setObjectsForBundleParametersWithDictionary:
_createConfiguration
initWithFrame:configuration:
setAllowsLinkPreview:
setScrollsToTop:
setBouncesVertically:
setContentInsetAdjustmentBehavior:
_setIndicatorInsetAdjustmentBehavior:
_observedRenderingProgressEvents
_setObservedRenderingProgressEvents:
_setAllowsMetaRefresh:
_setAllowsJavaScriptMarkup:
_setAttachmentElementEnabled:
_setWaitsForPaintAfterViewDidMoveToWindow:
_setColorFilterEnabled:
setDataDetectorTypes:
setSelectionGranularity:
_setTextAutosizingEnabled:
_setPunchOutWhiteBackgroundsInDarkMode:
processPool
setProcessPool:
_setAdditionalSupportedImageTypes:
setOnWebViewConfiguration:
sharedHandler
setURLSchemeHandler:forURLScheme:
addUserScript:
configurations
addObserver:activeRuleLists:
addContentRuleList:
boundedQueueWithCapacity:
preallocatedWebViews
_instantiateWebView
enqueue:
dequeue
removeContentRuleList:
setDaemonInterface:URLCacheWithMemoryCapacity:
contentRuleListMangager:didAddRuleList:
contentRuleListMangager:didUpdateContentRuleList:oldContentRuleList:
contentRuleListMangager:didRemoveRuleList:
setContentRuleListManager:
preallocateWebViews
preallocateWebViewIfNeeded
setConfigurations:
_proxySchemeHandler
_noProxySchemeHandler
_contentRuleListManagerObserverCancelable
_urlSession
_configurations
_preallocatedWebViews
_processPool
T@"NSHashTable",&,N,V_configurations
T@"EFQueue",&,N,V_preallocatedWebViews
T@"WKProcessPool",&,N,V_processPool
T@"EMRemoteContentURLSession",R,N,V_urlSession
ef_match
mf_isSMIMEError
localizedDescription
mailHeaderSeparatorLayerColor
separatorHeight
sizeThatFits:
intrinsicContentSize
axis
_axis
TQ,N,V_axis
systemOrangeColor
systemRedColor
colorNamed:
systemYellowColor
systemGreenColor
systemTealColor
systemIndigoColor
systemGrayColor
systemPurpleColor
systemGroupedBackgroundColor
traitCollectionWithUserInterfaceStyle:
traitCollectionWithTraitsFromCollections:
resolvedColorWithTraitCollection:
colorWithDynamicProvider:
opaqueSeparatorColor
systemGray4Color
colorWithRed:green:blue:alpha:
separatorColor
secondarySystemGroupedBackgroundColor
mailSystemLightGrayColor
systemBlackColor
blackColor
colorWithWhite:alpha:
mailSecondaryLabelDarkColor
tableBackgroundColor
systemGray5Color
mf_useSplitViewStyling
secondarySystemBackgroundColor
getRed:green:blue:alpha:
systemBlueColor
CGColor
getWhite:alpha:
mailFlaggedColorRed
mailFlaggedColorOrange
mailFlaggedColorYellow
mailFlaggedColorGreen
mailFlaggedColorTeal
mailFlaggedColorIndigo
mailFlaggedColorGray
mailFlaggedColor
mailFlaggedColorIncreasedContrastRed
mailDestructiveActionColor
mailArchiveActionColor
mailReadLaterActionColor
mailTransparentLightGrayColor
mailDarkGrayColor
mailMoreButtonGrayColor
mailRemoveReminderColor
mailRemoveFollowUpColor
mailAppBackgroundColor
mailVibrantDarkColor
mailVibrantLightColor
mailAccountCellTitleColor
mailPreviousDraftPickerHeaderTextColor
mailSplitViewBorderColor
mailSearchImageBorderColor
mailConversationViewBackgroundColor
mailConversationViewCollapsedCellBackgroundColor
mailConversationViewCollapsedCellHighlightedBackgroundColor
mailConversationViewCollapsedCellLabelColor
mailTransferConversationViewBackgroundColor
mailConversationViewNoSelectedMessageViewBackgroundColor
mailDockViewLightBackgroundColor
mailDockViewDarkBackgroundColor
mailDockedPlaceholderViewBackgroundColor
mailDockViewShadowGradientColors
mailDockViewShadowGradientColorLocations
mailTiltedTabCloseButtonTintColor
mailExpandedConversationViewCellDateLabelColor
mailTransferStackViewBackgroundColor
mailSplitViewBackgroundColor
mailMessageListPrimarySelectionColor
mailMessageListSecondarySelectionColor
mailMessageListTertiarySelectionColor
mailMessageListSelectedSummaryColor
mailMessageListSelectedAnnotationColor
mailMessageListSelectedStatusIndicatorColor
mailMessageListSelectedRecipientColor
mailFocusBannerTitleColor
mailMessageListBackgroundColor
mailMessageListHighlightColor
mailCellSelectionStateColorForInterfaceLevel:
mailMailboxPickerBackgroundColorForTraitCollection:
mailTodayFilterColor
mailAttachmentsFilterColor
mailVIPFilterColor
mf_colorFromColor:toColor:progress:
mf_colorFromFlagColor:
T@"UIColor",R
mf_enableDebugModeInView
_setDrawsDebugBaselines:
setBorderColor:
setBorderWidth:
defaultInstanceLock
initWithBackingManager:
_vipsDidChange:
backingManager
hasVIPs
allVIPs
allVIPEmailAddresses
vipWithIdentifier:
isVIPAddress:
saveVIPs:
removeVIPsWithIdentifiers:
removeVIPsWithEmailAddresses:
getAllVIPsWithCompletion:
name
localizedCaseInsensitiveCompare:
sortUsingComparator:
intersectSet:
mf_copyIDNADecodedEmailAddress
initWithType:qualifier:expression:
orCompoundCriterionWithCriteria:
sortedVIPs
criterionForEmailAddresses:
setName:
setBackingManager:
T@"NSSet",R,C,N
T@"EAEmailAddressSet",R,C,N
T^{os_unfair_lock_s=I},R
T@"VIPManager",R,N
saveVIP:
deleteVIPWithIdentifier:
existingPersonForVIP:usingAddressBook:
vipCriteria
allVIPEmailAddressesCriterion
_abPersonByVIPIdentifierLock
_abPersonByVIPIdentifier
_queue
_backingManager
T@"<EMVIPManager>",R,N,V_backingManager
dataWithJSONObject:options:error:
mcv_executeJavaScriptExpression:
evaluateJavaScript:completionHandler:
_mcv_executeJavaScriptMethod:arguments:
@16@0:8
@24@0:8@16
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@"NSObject<OS_os_log>"16@0:8
@64@0:8{UIEdgeInsets=dddd}16q48@56
d16@0:8
v24@0:8d16
v20@0:8B16
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
v16@0:8
@60@0:8@16q24@32@40@48B56
q16@0:8
@"NSURL"
@"EMMessageObjectID"
@"EMMailboxObjectID"
@"NSString"
@"NSData"24@0:8@"QLItem"16
@"UTType"
@32@0:8@16@24
@40@0:8@16@24@32
@56@0:8@16@24@32@40@48
@40@0:8@16q24@32
v24@0:8@16
@"<ContentRepresentationHandlingDelegate>"
@32@0:8@16q24
v24@0:8q16
@"UIPrintPageRenderer"
@40@0:8@16@24q32
@"<EMContentItem>"
@"NSProgress"
@"EFPromise"
@"EFLocked"
v24@0:8@"MSAttachmentItem"16
v32@0:8@16@24
v64@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24@56
@28@0:8@16B24
@56@0:8@16q24@32^B40^@48
q24@0:8@16
v32@0:8q16@24
v32@0:8d16@24
v24@0:8Q16
@?16@0:8
v24@0:8@?16
@"NSMutableDictionary"
@"NSMutableSet"
@"<EFScheduler>"
@"<MSMailWebProcessAttachmentProxy>"
@"EMMailDropMetadata"
@"WKWebView"
@"NSArray"
@48@0:8@16q24@32@40
@56@0:8@16@24q32@40@48
@32@0:8@16@?24
@24@0:8@?16
@"<EMContentItemRequestDelegate>"
@"EFCancelationToken"
@"EFObservable<EFObserver>"
@"EFObservable"
@"EFFuture"
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"<EMCollectionItemID>"
v40@0:8@16@24@?32
v32@0:8@16@?24
v40@0:8@"EMObjectID"16@"NSArray"24@?<v@?@"NSDictionary"@"NSError">32
v32@0:8@"EMObjectID"16@?<v@?@"NSString"@"NSError">24
@"NSIndexSet"16@0:8
v24@0:8@"NSIndexSet"16
@"NSDate"16@0:8
v24@0:8@"NSDate"16
@"EMFollowUp"16@0:8
v24@0:8@"EMFollowUp"16
@"<EMCollectionItemID>"16@0:8
v24@0:8@"<EMCollectionItemID>"16
@"ECSubject"16@0:8
v24@0:8@"ECSubject"16
@"MFMailboxUid"16@0:8
v24@0:8@"MFMailboxUid"16
@"NSArray"16@0:8
v24@0:8@"NSArray"16
@"MFAddressAtomStatusManager"16@0:8
v24@0:8@"MFAddressAtomStatusManager"16
@"EFFuture"16@0:8
v24@0:8@"EFFuture"16
@24@0:8^{_NSZone=}16
@"NSDate"
@"ECSubject"
@"MFMailboxUid"
@"MFAddressAtomStatusManager"
@"NSIndexSet"
@"EMFollowUp"
v32@0:8@16^v24
v32@0:8@"MFAddressBookManager"16^v24
v24@0:8@"MFAddressBookManager"16
i24@0:8@16
@"<MFAddressAtomProvider>"
@"MFMessageLoadingContext"
@"EMAccount"
@"MailAccount"
@"EMSecurityInformation"
@"NSError"
@"<EMUserProfileProvider>"
@"MFLocalizationListFormatter"
@"EFLazyCache"
@"MFAddressBookManager"
@40@0:8q16@24@32
@"<MFBannerViewDelegate>"
@"UIButton"
@"UILabel"
@"<MFBlockedSenderBannerViewDelegate>"
@56@0:8@16@24@32@40@?48
@60@0:8@16@24@32@40B48@?52
@"UIColor"
@"NSNumber"
v40@0:8@16@24@32
@"UIPointerRegion"40@0:8@"UIPointerInteraction"16@"UIPointerRegionRequest"24@"UIPointerRegion"32
@"UIPointerStyle"32@0:8@"UIPointerInteraction"16@"UIPointerRegion"24
v40@0:8@"UIPointerInteraction"16@"UIPointerRegion"24@"<UIPointerInteractionAnimating>"32
v48@0:8{UIEdgeInsets=dddd}16
v40@0:8@16:24q32
B40@0:8{CGPoint=dd}16@32
v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
@"UIVisualEffectView"
@"<MFMessageFooterViewDelegate>"
@"MFMessageDisplayMetrics"
@"EMCachingContactStore"
@"ConversationSearchOverlayView"
@60@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16B48Q52
@20@0:8B16
@"<MFHasMoreContentBannerViewDelegate>"
@56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16Q48
@"<MFHideMyEmailBannerViewDelegate>"
@64@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16Q48q56
@"<MFLoadBlockedContentBannerViewDelegate>"
@56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16q48
@"<MFLoadFailedProxyContentBannerViewDelegate>"
@"MFProgressView"
@"NSLayoutConstraint"
@"<MFMailDropBannerDelegate>"
@"NSLock"
@"NSMapTable"
B32@0:8@16@24
@32@0:8@16^@24
q32@0:8@16@24
v40@0:8@16q24@32
q24@0:8@"UIPresentationController"16
q32@0:8@"UIPresentationController"16@"UITraitCollection"24
v32@0:8@"UIPresentationController"16@"UIPresentationController"24
@"UIViewController"32@0:8@"UIPresentationController"16q24
v40@0:8@"UIPresentationController"16q24@"<UIViewControllerTransitionCoordinator>"32
B24@0:8@"UIPresentationController"16
v24@0:8@"UIPresentationController"16
v40@0:8@16N^{CGRect={CGPoint=dd}{CGSize=dd}}24N^@32
v24@0:8@"UIPopoverPresentationController"16
B24@0:8@"UIPopoverPresentationController"16
v40@0:8@"UIPopoverPresentationController"16N^{CGRect={CGPoint=dd}{CGSize=dd}}24N^@32
v48@0:8@16@24@32@?40
d48@0:8@16{CGSize=dd}24@40
v32@0:8@"WKWebView"16@"<_WKFormInputSession>"24
v48@0:8@"WKWebView"16@"NSDictionary"24@"NSObject<NSSecureCoding>"32@?<v@?>40
B32@0:8@"WKWebView"16@"<_WKFocusedElementInfo>"24
q32@0:8@"WKWebView"16@"<_WKFocusedElementInfo>"24
v40@0:8@"WKWebView"16@"UITextSuggestion"24@"<_WKFormInputSession>"32
@"NSDictionary"24@0:8@"WKWebView"16
B32@0:8@"WKWebView"16@"<_WKFormInputSession>"24
d48@0:8@"WKWebView"16{CGSize=dd}24@"<_WKFormInputSession>"40
@"UIView"32@0:8@"WKWebView"16@"<_WKFormInputSession>"24
v40@0:8@"WKWebView"16@"WKNavigationAction"24@?<v@?q>32
v48@0:8@"WKWebView"16@"WKNavigationAction"24@"WKWebpagePreferences"32@?<v@?q@"WKWebpagePreferences">40
v40@0:8@"WKWebView"16@"WKNavigationResponse"24@?<v@?q>32
v32@0:8@"WKWebView"16@"WKNavigation"24
v40@0:8@"WKWebView"16@"WKNavigation"24@"NSError"32
v40@0:8@"WKWebView"16@"NSURLAuthenticationChallenge"24@?<v@?q@"NSURLCredential">32
v24@0:8@"WKWebView"16
v40@0:8@"WKWebView"16@"NSURLAuthenticationChallenge"24@?<v@?B>32
v40@0:8@"WKWebView"16@"WKNavigationAction"24@"WKDownload"32
v40@0:8@"WKWebView"16@"WKNavigationResponse"24@"WKDownload"32
v48@0:8@16@24@32@40
v40@0:8@16@24d32
v40@0:8@16@24q32
v32@0:8@16Q24
v56@0:8@16@24@32@40@?48
v32@0:8@16q24
v36@0:8@16@24B32
v48@0:8@16q24@32@?40
v48@0:8@"WKWebView"16@"WKNavigation"24@"WKFrameInfo"32@"NSError"40
v40@0:8@"WKWebView"16@"NSURL"24d32
v40@0:8@"WKWebView"16@"NSURL"24@"NSURL"32
v40@0:8@"WKWebView"16@"WKNavigation"24q32
v32@0:8@"WKWebView"16Q24
@"NSData"24@0:8@"WKWebView"16
v32@0:8@"WKWebView"16@"NSURL"24
v32@0:8@"WKWebView"16@"WKDownload"24
v32@0:8@"WKWebView"16@"WKBackForwardListItem"24
v56@0:8@"WKWebView"16@"WKNavigationAction"24@"WKWebpagePreferences"32@"<NSSecureCoding>"40@?<v@?q@"WKWebpagePreferences">48
v40@0:8@"WKWebView"16@"WKNavigation"24@"<NSSecureCoding>"32
v48@0:8@"WKWebView"16@"WKNavigation"24@"NSError"32@"<NSSecureCoding>"40
v48@0:8@"WKWebView"16@"NSURL"24@"NSArray"32@"NSArray"40
v48@0:8@"WKWebView"16@"NSString"24@"_WKContentRuleListAction"32@"NSURL"40
v32@0:8@"WKWebView"16q24
v40@0:8@"WKWebView"16@"NSURLRequest"24@"WKFrameInfo"32
v48@0:8@"WKWebView"16@"NSURLRequest"24@"WKFrameInfo"32@"NSError"40
v40@0:8@"WKWebView"16@"NSString"24@"NSString"32
v32@0:8@"WKWebView"16@"NSData"24
v36@0:8@"WKWebView"16@"WKBackForwardListItem"24B32
v48@0:8@"WKWebView"16q24@"NSString"32@?<v@?q>40
@48@0:8@16@24@32@40
v56@0:8@16@24@32q40@?48
@"WKWebView"48@0:8@"WKWebView"16@"WKWebViewConfiguration"24@"WKNavigationAction"32@"WKWindowFeatures"40
v48@0:8@"WKWebView"16@"NSString"24@"WKFrameInfo"32@?<v@?>40
v48@0:8@"WKWebView"16@"NSString"24@"WKFrameInfo"32@?<v@?B>40
v56@0:8@"WKWebView"16@"NSString"24@"NSString"32@"WKFrameInfo"40@?<v@?@"NSString">48
v56@0:8@"WKWebView"16@"WKSecurityOrigin"24@"WKFrameInfo"32q40@?<v@?q>48
v48@0:8@"WKWebView"16@"WKSecurityOrigin"24@"WKFrameInfo"32@?<v@?q>40
B32@0:8@"WKWebView"16@"WKPreviewElementInfo"24
@"UIViewController"40@0:8@"WKWebView"16@"WKPreviewElementInfo"24@"NSArray"32
v32@0:8@"WKWebView"16@"UIViewController"24
v40@0:8@"WKWebView"16@"WKContextMenuElementInfo"24@?<v@?@"UIContextMenuConfiguration">32
v32@0:8@"WKWebView"16@"WKContextMenuElementInfo"24
v40@0:8@"WKWebView"16@"WKContextMenuElementInfo"24@"<UIContextMenuInteractionCommitAnimating>"32
v40@0:8@"WKWebView"16@"NSString"24@?<v@?q>32
v72@0:8@16@24Q32Q40Q48Q56@?64
v88@0:8@16@24@32@40Q48Q56Q64Q72@?80
v56@0:8@16@24Q32Q40@?48
v56@0:8@16@24{CGSize=dd}32@?48
v28@0:8@16B24
v40@0:8@16{CGSize=dd}24
v52@0:8@16@24@32B40@?44
v56@0:8@16Q24@32@40@?48
v56@0:8@16@24@32Q40@?48
Q32@0:8@16@24
v40@0:8@16q24Q32
v72@0:8@16@24q32Q40Q48Q56@?64
v40@0:8@16@?24@?32
v40@0:8@16{CGPoint=dd}24
v48@0:8@16@24q32@40
@32@0:8@16^B24
{UIEdgeInsets=dddd}56@0:8@16@24{CGPoint=dd}32N^{CGPoint=dd}48
@64@0:8@16@24@32@40{CGSize=dd}48
@40@0:8@16@24^@32
v48@0:8@16@24@32Q40
v44@0:8@16B24@28@36
Q40@0:8@16Q24@32
v72@0:8@"WKWebView"16@"WKSecurityOrigin"24Q32Q40Q48Q56@?<v@?Q>64
v88@0:8@"WKWebView"16@"WKSecurityOrigin"24@"NSString"32@"NSString"40Q48Q56Q64Q72@?<v@?Q>80
v56@0:8@"WKWebView"16@"WKSecurityOrigin"24Q32Q40@?<v@?Q>48
v32@0:8@"WKWebView"16@"_WKFrameHandle"24
v56@0:8@"WKWebView"16@"_WKFrameHandle"24{CGSize=dd}32@?<v@?>48
v32@0:8@"WKWebView"16@?<v@?B>24
v28@0:8@"WKWebView"16B24
v48@0:8@"WKWebView"16@"NSURL"24@"WKFrameInfo"32@?<v@?B>40
v40@0:8@"WKWebView"16{CGSize=dd}24
v52@0:8@"WKWebView"16@"WKSecurityOrigin"24@"WKFrameInfo"32B40@?<v@?q>44
v56@0:8@"WKWebView"16Q24@"NSURL"32@"NSURL"40@?<v@?B>48
v56@0:8@"WKWebView"16@"NSURL"24@"NSURL"32Q40@?<v@?@"NSString"B>48
Q32@0:8@"WKWebView"16@24
v56@0:8@"WKWebView"16@"WKWebViewConfiguration"24@"WKNavigationAction"32@"WKWindowFeatures"40@?<v@?@"WKWebView">48
v40@0:8@"WKWebView"16@"WKFrameInfo"24@?<v@?B>32
v48@0:8@"WKWebView"16@"NSString"24@"WKSecurityOrigin"32@?<v@?q>40
v32@0:8@"WKWebView"16@"NSDictionary"24
v32@0:8@"WKWebView"16@"_WKAttachment"24
v40@0:8@"WKWebView"16@"_WKAttachment"24@"NSString"32
v32@0:8@"WKWebView"16@"<NSSecureCoding>"24
v48@0:8@"WKWebView"16@"NSString"24@"NSString"32@?<v@?B>40
v40@0:8@"WKWebView"16@"WKSecurityOrigin"24@?<v@?B>32
v48@0:8@"WKWebView"16@"_WKWebAuthenticationPanel"24@"WKFrameInfo"32@?<v@?q>40
v40@0:8@"WKWebView"16q24Q32
v32@0:8@"WKWebView"16@"NSArray"24
v72@0:8@"WKWebView"16@"NSString"24q32Q40Q48Q56@?<v@?Q>64
v32@0:8@"WKWebView"16@?<v@?@>24
v40@0:8@"WKWebView"16@?<v@?>24@?<v@?B>32
v40@0:8@"WKWebView"16@"_WKModalContainerInfo"24@?<v@?q>32
B32@0:8@"WKWebView"16@"_WKActivatedElementInfo"24
@"NSArray"40@0:8@"WKWebView"16@"_WKActivatedElementInfo"24@"NSArray"32
v40@0:8@"WKWebView"16{CGPoint=dd}24
B32@0:8@"WKWebView"16@"WKFrameInfo"24
@"UIViewController"32@0:8@"WKWebView"16@"NSURL"24
v36@0:8@"WKWebView"16@"UIViewController"24B32
@"UIViewController"32@0:8@"WKWebView"16@"WKContextMenuElementInfo"24
v48@0:8@"WKWebView"16@"_WKHitTestResult"24q32@"<NSSecureCoding>"40
@"NSArray"24@0:8@"WKWebView"16
@"NSArray"32@0:8@"WKWebView"16^B24
Q32@0:8@"WKWebView"16@"_WKActivatedElementInfo"24
{UIEdgeInsets=dddd}56@0:8@"WKWebView"16@"UIScrollView"24{CGPoint=dd}32N^{CGPoint=dd}48
@"UIView"24@0:8@"WKWebView"16
@"UIViewController"48@0:8@"WKWebView"16@"NSURL"24@"NSArray"32@"_WKActivatedElementInfo"40
@"UIViewController"64@0:8@"WKWebView"16@"NSURL"24@"NSArray"32@"_WKActivatedElementInfo"40{CGSize=dd}48
@"UIViewController"24@0:8@"WKWebView"16
v40@0:8@"WKWebView"16@"UIImage"24@?<v@?@"NSURL"@"NSDictionary">32
@"NSURL"40@0:8@"WKWebView"16@"UIImage"24^@32
@"UIViewController"56@0:8@"WKWebView"16@"UIImage"24@"NSURL"32@"NSArray"40@"_WKActivatedElementInfo"48
@"NSArray"32@0:8@"WKWebView"16@"NSArray"24
@"NSArray"48@0:8@"WKWebView"16@24@"NSArray"32@"NSDictionary"40
B32@0:8@"WKWebView"16@"NSArray"24
v40@0:8@"WKWebView"16@24@32
v48@0:8@"WKWebView"16@24@32Q40
v44@0:8@"WKWebView"16B24@28@"NSArray"36
Q40@0:8@"WKWebView"16Q24@32
@"UIDropProposal"40@0:8@"WKWebView"16@"UIDropProposal"24@"<UIDropSession>"32
@"UITargetedDragPreview"40@0:8@"WKWebView"16@"UIDragItem"24@"<UIDragSession>"32
@"UITargetedDragPreview"40@0:8@"WKWebView"16@"UIDragItem"24@"UITargetedDragPreview"32
@"NSArray"32@0:8@"WKWebView"16@"<UIDropSession>"24
q32@0:8@"WKWebView"16@"<UIDropSession>"24
q32@0:8@"WKWebView"16@"<UIDragSession>"24
B32@0:8@"WKWebView"16@"UIGestureRecognizer"24
B24@0:8@"WKWebView"16
v24@0:8@"MFHideMyEmailBannerView"16
v24@0:8@"MFHasMoreContentBannerView"16
v24@0:8@"MFLoadBlockedContentBannerView"16
v24@0:8@"UIViewController"16
v24@0:8@"MFLoadFailedProxyContentBannerView"16
v24@0:8@"MFBlockedSenderBannerView"16
v24@0:8@"MFMessageHeaderView"16
v24@0:8@"MFConversationItemFooterView"16
v24@0:8@"MFMailDropBannerView"16
v24@0:8@"UIWindowSceneActivationConfiguration"16
v48@0:8@16{CGPoint=dd}24N^{CGPoint=dd}40
v24@0:8@"UIScrollView"16
v48@0:8@"UIScrollView"16{CGPoint=dd}24N^{CGPoint=dd}40
v28@0:8@"UIScrollView"16B24
@"UIView"24@0:8@"UIScrollView"16
v32@0:8@"UIScrollView"16@"UIView"24
v40@0:8@"UIScrollView"16@"UIView"24d32
B24@0:8@"UIScrollView"16
v24@0:8@"NSURL"16
v32@0:8@"NSURL"16@"NSArray"24
v32@0:8@"NSURL"16q24
B32@0:8:16@24
v24@0:8B16B20
@52@0:8{UIEdgeInsets=dddd}16B48
{CGRect={CGPoint=dd}{CGSize=dd}}48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@16
v32@0:8d16d24
v32@0:8{CGSize=dd}16
{CGPoint=dd}16@0:8
v32@0:8{CGPoint=dd}16
@"MessageContentItemsHelper"
@"MFMessageHeaderView"
@"MFMailDropBannerView"
@"MFHasMoreContentBannerView"
@"MFHideMyEmailBannerView"
@"MFLoadBlockedContentBannerView"
@"MFBlockedSenderBannerView"
@"MFLoadFailedProxyContentBannerView"
@"UIView"
@"UIBarButtonItem"
{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}
@"<EFCancelable>"
{UIEdgeInsets="top"d"left"d"bottom"d"right"d}
@"MFConversationItemFooterView"
@"NSSet"
{?="delegateRespondsToDidFinishLoadingMessages"b1"delegateRespondsToDidFinishFirstPaint"b1"delegateRespondsToDidDisplayContent"b1"delegateRespondsToDidFinishRenderingWithHeight"b1"delegateRespondsToExpandQuoteAtScrollOffset"b1"delegateRespondsToWillBeginZoomingMessage"b1"delegateRespondsToDidEndZoomingMessage"b1"delegateRespondsToDidTapRevealActionsButton"b1"delegateRespondsToLoadingIndicatorDidChangeVisibility"b1"delegateRespondsToDidLoadSecurityInformation"b1"delegateRespondsToWebViewDidTerminateWithReason"b1}
@"<MFMessageContentViewDelegate>"
@"<MFMessageContentViewDataSource>"
@"MessageContentRepresentationRequest"
@"MFMailboxProvider"
@"EMDaemonInterface"
@"MUIBrandIndicatorProvider"
@"MFMessageContentLoadingView"
@"MFWebViewLoadingController"
@"NSDictionary"
{CGPoint="x"d"y"d}
@56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48
@96@0:8@16{UIEdgeInsets=dddd}24{UIEdgeInsets=dddd}56q88
@104@0:8@16{UIEdgeInsets=dddd}24{UIEdgeInsets=dddd}56q88@96
d32@0:8d16@24
d40@0:8d16@24@32
{UIEdgeInsets=dddd}16@0:8
@"UITraitCollection"
@"ConversationFooterViewDisplayMetrics"
v56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
v36@0:8@16Q24B32
@24@0:8Q16
v32@0:8Q16Q24
@"NSMutableArray"
@"<MFMessageHeaderViewDelegate>"
@"MFMessageHeaderViewBlock"
@"MessageHeaderViewModel"
@"SeparatorLayer"
@"UILayoutGuide"
@32@0:8q16@24
{UIEdgeInsets=dddd}88@0:8d16{UIEdgeInsets=dddd}24{UIEdgeInsets=dddd}56
@36@0:8Q16@24B32
@"UIView<SGBannerProtocol>"
@"NSSet"16@0:8
v32@0:8@"NSDictionary"16@"NSString"24
@32@0:8@16Q24
v40@0:8^@16^@24Q32
Q40@0:8^{?=Q^@^Q[5Q]}16^@24Q32
v32@0:8Q16@?24
@"<MFMailWebProcessProxy>"
v40@0:8@"EMRemoteContentURLSession"16@"NSURL"24q32
@"MFWebViewDictionary"
@"<MFMailWebProcessDelegate>"
@"_WKRemoteObjectInterface"
@"EMContentRepresentation"
@"CHSTimelineController"
v32@0:8@"MEContentRuleListManager"16@"WKContentRuleList"24
v40@0:8@"MEContentRuleListManager"16@"WKContentRuleList"24@"WKContentRuleList"32
@"EMRemoteContentURLSchemeHandler"
@"EFAutoCancelationToken"
@"EMRemoteContentURLSession"
@"NSHashTable"
@"EFQueue"
@"WKProcessPool"
{CGSize=dd}32@0:8{CGSize=dd}16
{CGSize=dd}16@0:8
@24@0:8q16
@36@0:8@16@24f32
^{os_unfair_lock_s=I}16@0:8
B24@0:8@"NSString"16
v24@0:8@?<v@?@"NSSet"@"NSError">16
@"EMVIP"24@0:8@"NSString"16
v24@0:8@"NSSet"16
v24@0:8@"EAEmailAddressSet"16
@"EAEmailAddressSet"16@0:8
r^v32@0:8@16^v24
^{__CFDictionary=}
@"NSObject<OS_dispatch_queue>"
@"<EMVIPManager>"
0@+M
?ffffff
I@ffffff
?UUUUUU
333333
 //  Copyright 
 2015 Apple Inc. All rights reserved.
var ATTACHMENT_STATE = {
DEFAULT : 1,
DOWNLOADABLE : 2,
DOWNLOADING : 3,
function AttachmentElement(dom_element) {
this.dom_element = dom_element;
this.downloadableStatus = this.dom_element.getAttribute("_mf_downloadableStatus");
this.downloadingStatus = this.dom_element.getAttribute("_mf_downloadingStatus");
var elem_ref = this;
this.dom_element.onclick = function(e) {
        // Ignore control/right clicks since that goes through [MFMessageContentView _webView:contextMenuConfigurationForElement:...]
        if (e.button == 0 && !e.ctrlKey) {
            elem_ref.onClick();
        }
    };
AttachmentElement.prototype = {
setState : function(state) {
        var currentState = this.dom_element.getAttribute('_mf_state');
        if (state != currentState) {
            this.dom_element.setAttribute('_mf_state', state);
            switch(state) {
                case ATTACHMENT_STATE.DEFAULT:
                    this.dom_element.removeAttribute('action');
                    this.dom_element.removeAttribute('progress');
                    break;
                case ATTACHMENT_STATE.DOWNLOADABLE:
                    this.dom_element.setAttribute('action', this.downloadableStatus);
                    this.dom_element.removeAttribute('progress');
                    break;
                case ATTACHMENT_STATE.DOWNLOADING:
                    this.dom_element.setAttribute('action', this.downloadingStatus);
                    this.dom_element.setAttribute('progress', '0.0');
                    break;
            }
            // force a layout update - removing the action attribute is not enough
            this.dom_element.setAttribute('title', this.dom_element.getAttribute('title'));
        }
    },
    setProgress : function(value) {
        this.dom_element.setAttribute('progress', value);
    },
onClick : function() {
// For testing
        // simulate_download_attachment_for_cid(this.dom_element.id);
        var content_id = this.dom_element.id;
        var message = {
            element_id : content_id,
            rect : getRectForElementWithID(this.dom_element.id),
        };
        
        window.webkit.messageHandlers.AttachmentNodeWasTapped.postMessage(message);
function attachment_element_for_cid(cid) {
    var attachmentNode = null;
    var elem = document.getElementById(cid);
    // Only applicable to attachment icons and inline attachment previews
    if (elem && (elem.tagName.toLowerCase() == "attachment" || elem.tagName.toLowerCase() == "img")) {
        attachmentNode = new AttachmentElement(elem);
    } else {
        // Inline images may have an id that differs from cid
        var images = document.getElementsByTagName('img');
        for (var i = 0; i < images.length; ++i) {
            if (images[i].src == "cid:"+cid) {
                elem = images[i];
                attachmentNode = new AttachmentElement(elem);
                break;
            }
        }
    }
    return attachmentNode;
 * Installs the AttachmentElement click handler on each attachment element.
function addClickHandlersForNodes(nodes, elements) {
    for (var i = 0; i < nodes.length; i++) {
        var attachmentNode = nodes[i];
        
        elements.push(new AttachmentElement(attachmentNode));
    }
function updateAttachmentClickHandlers() {
    var elements = []
    addClickHandlersForNodes(document.getElementsByTagName("attachment"), elements);
    addClickHandlersForNodes(document.getElementsByTagName("img"), elements);
    return elements
/// For testing
function simulate_download_attachment_for_cid(cid) {
var attachment = attachment_element_for_cid(cid);
attachment.setState(ATTACHMENT_STATE.DOWNLOADING);
function did_finish() {
attachment.setState(ATTACHMENT_STATE.DEFAULT);
var simulated_progress = 0.0;
var interval_handle = setInterval(function() {
simulated_progress += 0.01;
        attachment.setProgress(simulated_progress);
if (simulated_progress >= 1.0) {
clearInterval(interval_handle);
did_finish();
}, (1000 / 30));
// Functions to be called from native code //
/* extern */ function set_state_for_attachment_cid(cid, state) {
var attachment_elem = attachment_element_for_cid(cid);
    if (attachment_elem) {
        attachment_elem.setState(state);
    }
/* extern */ function set_progress_for_attachment_cid(cid, progress) {
var attachment_elem = attachment_element_for_cid(cid);
    if (attachment_elem) {
        attachment_elem.setProgress(progress);
    }
/* Utility Functions */
var g_edgeToEdgeRule = null;
var g_additionalBodyStyleRule = null;
var g_documentReformatter = new MailDocumentReformatter();
var g_viewportConfigurationDictionary = {};
var g_documentNeedsReformat = false;
function MCVLog(string) {
    console.log(string); // if a debug console is attached...
    window.webkit.messageHandlers.MCVLog.postMessage(string);
/* Global Exception Handling */
function MCVError(error) {
    var message = {
        "name" : error.name,
        "message" : error.message,
        "stack" : error.stack,
        "error" : JSON.stringify(error),
    };
    window.webkit.messageHandlers.MCVError.postMessage(message);
window.onerror = function (message) {
    MCVError(new Error(message));
function _try_catch_wrap(func) {
    if (!func._mf_wrapped) {
        func._mf_wrapped = function () {
            var result = null;
            try {
                result = func.apply(this, arguments);
            }
            catch (e) {
                MCVError(e);
                throw e;
            }
            return result;
        }
    }
    return func._mf_wrapped;
window.addEventListener("error", event => {
    if (event.target instanceof HTMLImageElement && event.target.src) {
        window.webkit.messageHandlers.ImageError.postMessage(event.target.src);
    }
}, true)
var nativeAddEventListener = window.EventTarget.prototype.addEventListener;
var nativeRemoveEventListener = window.EventTarget.prototype.removeEventListener;
window.EventTarget.prototype.addEventListener = function (event, callback, bubble) {
    nativeAddEventListener.call(this, event, _try_catch_wrap(callback), bubble);
window.EventTarget.prototype.removeEventListener = function (event, callback, bubble) {
    nativeRemoveEventListener.call(this, event, callback._mf_wrapped || callback, bubble);
/* - - -- --- ----- -------- ----- --- -- - - */
function _styleForSystemAppearance() {
    var shouldBeLight = false;
    var shouldUseColorFilter = true;
    var declaredColorSchemes = this._declaredColorSchemes();
    if (declaredColorSchemes) {
        shouldUseColorFilter = false;
        if ((declaredColorSchemes.includes("light") || declaredColorSchemes.includes("only")) && !declaredColorSchemes.includes("dark")) {
            shouldBeLight = true;
        }
    }
    else {
        // Check to see if the document can still use dark mode via the colorFilter
        var imageElements = document.body.querySelectorAll("img");
        for (i = 0; i < imageElements.length; i++) {
            var image = imageElements[i];
            if (image.src.startsWith("http") && (image.width > 1 || image.height > 1) && !image.className.includes("lp-rich-link")) {
                shouldBeLight = true;
                break;
            }
        }
        var style = window.getComputedStyle(document.body);
        if (style.backgroundImage !== "none") {
            shouldBeLight = true;
        }
    }
    if (shouldBeLight) {
        document.documentElement.classList.add('apple-mail-light-only');
    } else if (shouldUseColorFilter) {
        document.documentElement.classList.add('apple-mail-implicit-dark-support');
    }
// Returns a parsed array of values for the `color-scheme` property or meta tag; if it exists.
// This also normalizes the values to lowercase. (see rdar://problem/45879558 & rdar://problem/50096600)
function _declaredColorSchemes() {
    // Add a style class that disables the color-scheme property temporarily so this code can check
    // for color-scheme usage in the author styles.
    document.documentElement.classList.add("testing-dark-mode");
    // Check for the 'color-scheme' CSS property in computed style on the document element.
    // This property takes precedence over the meta tag in WebKit, so it needs checked first.
    // This is auto aliased by WebKit from the deprecated 'supported-color-schemes' property,
    // so this code only needs to check the colorScheme name to support both.
    var colorSchemeProperty = window.getComputedStyle(document.documentElement).colorScheme;
    if (colorSchemeProperty && colorSchemeProperty !== "auto") {
        let result = colorSchemeProperty.split(/\s+/);
        if (result && result.length) {
            document.documentElement.classList.remove("testing-dark-mode");
            return result;
        }
    }
    document.documentElement.classList.remove("testing-dark-mode");
    // Try the 'color-scheme' or deprecated 'supported-color-schemes' meta tag.
    var colorSchemesMetaElements = document.querySelectorAll("meta[name='color-scheme']");
    if (!colorSchemesMetaElements)
        colorSchemesMetaElements = document.querySelectorAll("meta[name='supported-color-schemes']");
    var lastColorSchemesMetaElement = colorSchemesMetaElements ? colorSchemesMetaElements[colorSchemesMetaElements.length - 1] : null;
    if (lastColorSchemesMetaElement && lastColorSchemesMetaElement.content) {
        let result = lastColorSchemesMetaElement.content.toLowerCase().split(/\s+/);
        if (result && result.length)
            return result;
    }
    return null;
function LOCSTRING(key) {
    var locstrings = window.externalConstants.getValue("localizedStrings");
    return locstrings[key] ? locstrings[key] : key;
function _getViewportMetatag() {
    var metatag = null;
    var metatags = document.getElementsByTagName("meta");
    for (var metatag_i in metatags) {
        var tag = metatags[metatag_i];
        if (tag.name == "viewport") {
            metatag = tag;
            break;
        }
    }
    return metatag;
function _updateViewportMetatag() {
    var metatag = _getViewportMetatag();
    if (metatag == null) {
        metatag = document.createElement("meta");
        metatag.name = "viewport";
        document.head.appendChild(metatag);
    }
    var content = "";
    if (g_viewportConfigurationDictionary["viewport-width"]) {
        content += "width = " + g_viewportConfigurationDictionary["viewport-width"];
    }
    if (g_viewportConfigurationDictionary["initial-scale"]) {
        content += ", initial-scale = " + g_viewportConfigurationDictionary["initial-scale"];
    }
    metatag.content = content;
/* Post fix methods */
function setViewportWidth(viewportWidth) {
    if (viewportWidth != getViewportWidth()) {
        g_viewportConfigurationDictionary["viewport-width"] = viewportWidth;
        _updateViewportMetatag();
    }
function getViewportWidth() {
    var result = NaN;
    var metatag = _getViewportMetatag();
    if (null != metatag) {
        var matches = metatag.content.match(/width\s*=\s*([^, ]*)/);
        if (matches) {
            result = parseInt(matches[1]);
        }
    }
    return result;
function setInitialScale(initialScale) {
    g_viewportConfigurationDictionary["initial-scale"] = initialScale;
    _updateViewportMetatag();
function fixRelativeElementHeights() {
    // Since conversation view, our viewport width is supposed to start at 1px and grow just to perfectly fit the
    // contents inside. If a document has a top-level element that is 100% height, it will be rendered at 1px height,
    // which is not expected. It's expected that top-level elements defined to have 100% height should be redered at
    // the height of the screen, so let's fix that here.
    if (document.body.getBoundingClientRect().height < 5.0 /* usually 1, but add a few just to make sure */) {
        var comfortableScreenHeight = 900; // doesn't have to be accurate.
        var nextElement = null;
        var nodeIterator = document.createNodeIterator(document.body, NodeFilter.SHOW_ELEMENT);
        while ( (nextElement = nodeIterator.nextNode()) ) {
            var found = false;
            // We have to do this to trick because if we ask the CSSStyleDeclaration for it's "height", we'll get it's actual
            // computed height instead of the height defined in CSS by the document author.
            var previousDisplayValue = nextElement.style.getPropertyValue("display");
            nextElement.style.setProperty("display", "none");
            if (nextElement.getAttribute("height") == "100%") {
                nextElement.setAttribute("height", comfortableScreenHeight + "px");
                found = true;
            }
            var computedStyle = window.getComputedStyle(nextElement);
            var computedHeight = computedStyle.height;
            if (computedHeight == "100%" || computedHeight == "auto") {
                nextElement.style.setProperty("height", comfortableScreenHeight + "px");
                found = true;
            }
            nextElement.style.setProperty("display", previousDisplayValue);
            if (found) break;
        }
    }
function message_on_document_load() {
    setViewportWidth(window.externalConstants.getValue("viewport-width"));
    setInitialScale(window.externalConstants.getValue("initial-scale"));
    
    // Needs to be called before updatePadding() and updateEdgeToEdgeStyle()
    prepareBaseFormattingStylesheet();
    updatePadding();
    console.log("calling _styleForSystemAppearnace()");
    self._styleForSystemAppearance();
    window.externalConstants.onChangeCallback = function(changedKeys) {
        if (changedKeys.includes("padding")) {
            updatePadding();
        }
        if (changedKeys.includes("viewport-width")) {
            var oldViewportWidth = g_documentReformatter.currentDocumentViewportWidth();
            var newViewportWidth = window.externalConstants.getValue("viewport-width");
            setViewportWidth(newViewportWidth);
            if (newViewportWidth != oldViewportWidth) {
                g_documentReformatter.reformat();
            }
        }
    };
    // Post-processing pipeline
    fixOutdentedAttributions();
    updateEdgeToEdgeStyle(true); // true = notify about image elements
    updateAttachmentClickHandlers();
    findBlockquotes();
    if (window.externalConstants.getValue("collapseQuotedContent")) {
        findAndCollapseBlockquotes();
    }
    fixRelativeElementHeights();
    g_documentReformatter.loggingEnabled = true;
    g_documentReformatter.reformat();
    startObservingSelection();
function startObservingSelection () {
    document.onselectionchange = function() {
        var currentSelectedText = window.getSelection();
        var selectedHTML = "";
        if (currentSelectedText.rangeCount > 0) {
            var range = currentSelectedText.getRangeAt(0);
            //creating a new representation of selected text
            var selectedTextHtmlContainer = document.createElement("div");
            for (var i = 0, len = currentSelectedText.rangeCount; i < len; ++i) {
                var currentContent = currentSelectedText.getRangeAt(i).cloneContents();
                selectedTextHtmlContainer.appendChild(currentContent);
            }
            if (selectedTextHtmlContainer.textContent.length > 0) {
                //Remove data detector tags.
                var linkTags = selectedTextHtmlContainer.getElementsByTagName("A");
                //copy linkTags into its own array so we don't live update and skip elements.
                linkTags = Array.prototype.slice.call(linkTags, 0);
                for (var i = 0; i < linkTags.length; i++) {
                    var tag = linkTags[i];
                    if (tag.getAttribute("x-apple-data-detectors") == "true") {
                        var span = document.createElement("span");
                        span.innerHTML = tag.innerHTML;
                        tag.replaceWith(span);
                    }
                }
                selectedHTML = selectedTextHtmlContainer.innerHTML;
            }
        }
        window.webkit.messageHandlers.TextSelected.postMessage(selectedHTML);
    };
//----------------------------------------
// Padding & Friends.
//----------------------------------------
function prepareBaseFormattingStylesheet() {
    if (g_edgeToEdgeRule == null) {
        // Create and insert a style element at the top of of the document's HEAD
        var styleElement = document.createElement("style");
        styleElement.type = "text/css";
        styleElement.title = "x-apple-mail-formatting";
        document.head.insertBefore(styleElement, document.head.firstChild);
        
        var styleSheet = styleElement.sheet;
        // Create a rule to hold additional body styles
        styleSheet.insertRule("BODY {}", 0);
        g_additionalBodyStyleRule = styleSheet.rules[0];
        
        // Create a rule for the edge-to-edge class
        styleSheet.insertRule(".x-apple-edge-to-edge {}", 0);
        g_edgeToEdgeRule = styleSheet.rules[0];
    }
function updatePadding() {
    var padding = window.externalConstants.getValue("padding");
    var important = !!window.externalConstants.getValue("useWideLayout");
    
    var priority = null;
    
    // If the BODY's CSS rules have 100% width or min-width, then the author
    // *really* wants their email to go full width. Don't make our padding important
    // so we don't clash with the author's intended design.
    if (important && !_bodyHas100PercentWidth()) {
        priority = "important";
    }
    
    // For some reason I'm unable to change the rule's padding once it's been marked important once.
    // Clearing the rule's text before adding the padding gets the job done.
    // Note: CSSRule.removeProperty() isn't working here either.
    g_additionalBodyStyleRule.style.cssText = "";
    g_additionalBodyStyleRule.style.setProperty("padding", padding, priority);
    
    updateEdgeToEdgeStyle(false);
function _bodyHas100PercentWidth() {
    var has100PercentWidth = false;
    
    var allBodyRules = window.getMatchedCSSRules(document.body);
    
    if (allBodyRules != undefined) {
        for (var i=0; i<allBodyRules.length; i++) {
            var rule = allBodyRules[i];
            
            if (rule.style.width == "100%" || rule.style.minWidth == "100%") {
                has100PercentWidth = true;
                break;
            }
        }
    }
    
    return has100PercentWidth;
//----------------------------------------
// Edge-to-Edge Image Styling.
//----------------------------------------
 * Iterates through all image elements in the document and applies or removes edge-to-edge styling as needed.
function updateImagesNeedingEdgeToEdgeStyling(shouldNotifyAboutImageAttachments) {
    var imgNodes = document.getElementsByTagName("img");
    var attachmentImageNodesInfo = [];
    for (var i = 0; i < imgNodes.length; i++) {
        var imgNode = imgNodes[i];
        applyEdgeToEdgeStylingToNodeWhenComplete(imgNode);
        var src = imgNode.src;
        if (shouldNotifyAboutImageAttachments && src) {
            var matches = src.match(/^cid:(.*)/);
            if (matches) {
                var imageNodeID = imgNode.id;
                if (undefined === imageNodeID || 0 == imageNodeID.length) {
                    // there's no ID on this cid: image node. just use the contentID
                    imgNode.id = matches[1];
                }
                let identifier = HTMLAttachmentElement.getAttachmentIdentifier(imgNode);
                attachmentImageNodesInfo.push({
                                              "src" : imgNode.src,
                                              "elementID" : imgNode.id,
                                              "contentID" : matches[1],
                                              "wkIdentifier" : identifier,
                                              });
            }
        }
    }
    if (0 < attachmentImageNodesInfo.length) {
        window.webkit.messageHandlers.FoundImageCIDAttachments.postMessage(attachmentImageNodesInfo)
    }
function elementQualifiesForEdgeToEdgeStyling(node) {
    if (node.style.position == "static") return false;
    if (node.hasAttribute("width") && !node.hasAttribute("apple-width")) return false;
    if (nodeHasAncestorWithTag(node, "BLOCKQUOTE")) return false;
    if (nodeHasAncestorWithTag(node, "TABLE")) return false;
    return true;
 * Applies edge-to-edge class immediately if the given node is complete.
 * Otherwise, adds an event listener that applies the edge-to-edge class on load.
function applyEdgeToEdgeStylingToNodeWhenComplete(node) {
    if (elementQualifiesForEdgeToEdgeStyling(node)) {
        if (node.complete) {
            applyEdgeToEdgeStylingToNodeIfNeeded(node);
        } else {
            node.setAttribute("x-apple-pending-edge-to-edge", true);
            node.addEventListener("load", function () {
                node.removeAttribute("x-apple-pending-edge-to-edge");
                applyEdgeToEdgeStylingToNodeIfNeeded(this);
            }, true);
        }
    }
 * Updates the document's standard edge-to-edge CSS rule. Should be called when ever the body's padding changes.
function updateEdgeToEdgeStyle(shouldNotifyAboutImageAttachments) {
    if (g_edgeToEdgeRule != null) {
        var computedBodyStyle = window.getComputedStyle(document.body);
        var leftPadding = parseInt(computedBodyStyle.paddingLeft);
        var rightPadding = parseInt(computedBodyStyle.paddingRight);
        if (!(isNaN(leftPadding) || isNaN(rightPadding))) {
            leftPadding += "px";
            rightPadding += "px";
            var width = "calc(100% + " + leftPadding + " + " + rightPadding + ")";
            var marginLeft = "-" + leftPadding;
            g_edgeToEdgeRule.style.width = width;
            g_edgeToEdgeRule.style.marginLeft = marginLeft;
        }
    }
    updateImagesNeedingEdgeToEdgeStyling(shouldNotifyAboutImageAttachments);
 * Applies the appropriate edge-to-edge class to the given node if it qualifies for edge-to-edge styling.
function applyEdgeToEdgeStylingToNodeIfNeeded(node) {
    var computedBodyStyle = window.getComputedStyle(document.body);
    var leftPadding = parseInt(computedBodyStyle.paddingLeft);
    var rightPadding = parseInt(computedBodyStyle.paddingRight);
    var viewportWidth = getViewportWidth();
    // If the body's padding, or viewport isn't defined yet, then we shouldn't attempt this.
    // This method should get another call when the body padding is updated.
    if (!isNaN(leftPadding) && !isNaN(rightPadding) && !isNaN(viewportWidth)) {
        // Remove old edge-to-edge classes if they exist
        node.classList.remove("x-apple-wide-margin-edge-to-edge");
        node.classList.remove("x-apple-edge-to-edge");
        // Only apply edge-to-edge style if all of the following are true...
        // 1: The image is naturally wider than the maximum content width
        // 2: The image element isn't statically positioned
        // 3: The image element doesn't have a width defined by the content creator (not set by an Apple mail client)
        // 4: the image element isn't contained in a block quote or table
        var maxContentWidth = viewportWidth - (leftPadding + rightPadding);
        if (node.naturalWidth < maxContentWidth) return;
        if (!elementQualifiesForEdgeToEdgeStyling(node)) return;
        var hasCozyMargins = (leftPadding > 30.0) && (rightPadding > 30.0);
        var nodeClass = hasCozyMargins ? "x-apple-wide-margin-edge-to-edge" : "x-apple-edge-to-edge";
        node.classList.add(nodeClass);
        node.removeAttribute("width");
        node.removeAttribute("height");
    }
 * Checks if the given node has an ancestor with the given tag.
function nodeHasAncestorWithTag(node, tag) {
    var hasAncestorWithTag = false;
    var parentNode = node.parentNode;
    while (parentNode != null) {
        if (parentNode.tagName != null && parentNode.tagName.toUpperCase() == tag.toUpperCase()) {
            hasAncestorWithTag = true;
            break;
        }
        parentNode = parentNode.parentNode;
    }
    return hasAncestorWithTag;
//----------------------------------------
// Image Functions
//----------------------------------------
 * Forces a displayed image element to reload. This will cause WebKit to ignore its cache for this image and
 * hit MobileMail's attachment manager for the image data, allowing us to display an updated image.
function refreshImageWithContentID(contentID) {
    var images = document.getElementsByTagName("img");
    var oldImageSRC = "cid:"+contentID;
    oldImageSRC = oldImageSRC.toUpperCase();
    for (var i = 0; i < images.length; i++) {
        var image = images[i];
        if (image.src.toUpperCase() == oldImageSRC) {
            // Giving the image SRC a query will cause WebKit to think it's a completely different URL.
            // We currently ignore query parameters in our attachment manager and focus on the CID component of the URL.
            image.src += "?x-apple-mail-forceupdate";
            break;
        }
    }
 * Called when an image that isn't referenced in the DOM finishes downloading.
 * This finds the attachment node with the given id and swaps it out for an image element with the SRC cid:<nodeId>.
function imageAttachmentNodeFinishedDownloading(nodeId, markup) {
    var attachmentNode = document.getElementById(nodeId);
    if (attachmentNode && attachmentNode.tagName.toLowerCase() == "attachment") {
        attachmentNode.outerHTML = markup;
        var imgElement = document.getElementById(nodeId);
        applyEdgeToEdgeStylingToNodeWhenComplete(imgElement);
        
        imgElement.onclick = function() {
            var message = {
                element_id : nodeId,
                rect : getRectForElementWithID(nodeId),
            };
            
            window.webkit.messageHandlers.AttachmentNodeWasTapped.postMessage(message);
        };
    }
function replaceNodeWithSrcWithHTML(src, htmlRepresentation, installAttachmentClickHandler = false) {
    var element = null;
    function elementWithSrcForTagName(src, tagName) {
        var nodes = document.getElementsByTagName(tagName);
        for (var i = 0; i < nodes.length; i++) {
            var node = nodes.item(i);
            if (node.src == src) {
                return node;
            }
        }
    }
    // Fast path. See if there's an img element with the source attribute
    element = elementWithSrcForTagName(src, "img");
    if (!element) {
        // Slow path. Enumerate all elements
        element = elementWithSrcForTagName(src, "*");
    }
    if (element) {
        var newParentElement = document.createElement("div");
        newParentElement.innerHTML = htmlRepresentation;
        var newNode = newParentElement.firstChild
        element.parentNode.replaceChild(newNode, element);
        if (installAttachmentClickHandler) {
            new AttachmentElement(newNode);
        }
    }
function replaceNodeWithSrcWithAttachment(src, htmlRepresentation) {
    replaceNodeWithSrcWithHTML(src, htmlRepresentation, true);
function addPoint(point1, point2) {
    return {
        x: point1.x + point2.x,
        y: point1.y + point2.y,
    };
 * Returns the position of {element} relative to the document.
 * @param element : Element to find the position of
 * @returns {POINT object} Absolute position of {element} as a dict containing keys 'x' and 'y'.
function getElementPosition(element) {
    if (element == null) {
        return { x: 0, y: 0 };
    } else {
        return addPoint({ x: element.offsetLeft, y: element.offsetTop }, getElementPosition(element.offsetParent));
    }
 * Returns the bounding box of the element with ID {elementID}
 * @param elementID : ID of element
 * @returns {RECT object} Rectangle representing the absolute position {x/y} of the element
 *                        and bounding size {width/height}
function getRectForElementWithID(elementID) {
    var rect = { x: 0, y: 0, width: 0, height: 0 };
    var element = document.getElementById(elementID);
    if (element) {
        var position = getElementPosition(element);
        rect.x = position.x;
        rect.y = position.y;
        var computedStyle = window.getComputedStyle(element);
        rect.width = parseInt(computedStyle.width);
        rect.height = parseInt(computedStyle.height);
    }
    return rect;
function expandQuoteButtonTapped(blockquoteElement, seeMoreButton) {
    // Use this if we ever decide to expand inline:
    // expandBlockquote(blockquoteElement, seeMoreButton);
    var preOffsetTop = blockquoteElement.getAttribute("preOffsetTop");
    var currentOffset = getElementPosition(seeMoreButton);
    window.webkit.messageHandlers.ExpandQuoteButtonTappedWithYOffset.postMessage({
        'preOffsetTop' : preOffsetTop,
        'currentOffsetTop' : currentOffset.y,
    });
function expandBlockquote(blockquoteElem, seeMoreButton) {
    seeMoreButton.parentElement.removeChild(seeMoreButton);
    var targetHeight = blockquoteElem.getAttribute("preOffsetHeight");
    blockquoteElem.style.display = "";
    blockquoteElem.style.overflowY = "hidden";
    blockquoteElem.style.webkitAnimationDuration = "0.55s";
    var animUUID = "anim" + Date.now();
    var lastSheet = document.styleSheets[document.styleSheets.length - 1];
    lastSheet.insertRule("@-webkit-keyframes " + animUUID + "{ \
        from { \
            opacity: 0; \
            height: 0px; \
        } \
        to { \
            opacity: 1; \
            height: " + targetHeight + "px; \
        } \
    }", lastSheet.cssRules.length);
    blockquoteElem.style.webkitAnimationName = animUUID;
function shouldCollapseBlockquoteElement(blockquoteElement) {
    var sufficientSize = false;
    var lineGuess = 0;
    var charCount = 0;
    var nodeIterator = document.createNodeIterator(blockquoteElement, NodeFilter.SHOW_ALL);
    var node = null;
    while ( (node = nodeIterator.nextNode())) {
        if (node.nodeType === Node.ELEMENT_NODE) {
            if (node.tagName.toLowerCase() == "br") {
                lineGuess++;
            } else {
                if (node.childElementCount == 0) {
                    var computedStyle = window.getComputedStyle(node);
                    if (computedStyle.display == "block") {
                        // Block element with no children. This is a "line"
                        lineGuess++;
                    }
                }
            }
        }
        if (node.nodeType === Node.TEXT_NODE) {
            charCount += node.length;
        }
        if ((lineGuess > 5) || (charCount > 350)) {
            sufficientSize = true;
            break;
        }
    }
    return sufficientSize;
function clipBlockquotePreviewElement(previewElement, previewHeight, isBottom) {
    var contentWrapperClientRect = previewElement.getBoundingClientRect();
    var contentHeight = contentWrapperClientRect.height;
    if (contentHeight > previewHeight) {
        // Cribbed from OS X. This code makes sure we don't cut in the middle of a line.
        var contentWrapperRange = document.createRange();
        contentWrapperRange.selectNodeContents(previewElement);
        var textRects = contentWrapperRange.getClientRects();
        var startY = (isBottom) ? contentWrapperClientRect.bottom : contentWrapperClientRect.top;
        var minYCutoff = (isBottom) ? contentWrapperClientRect.top : contentWrapperClientRect.bottom;
        for (var index = 0; index < textRects.length; index++) {
            var effectiveIndex = (isBottom) ? textRects.length - index - 1 : index;
            var textRect = textRects[effectiveIndex];
            var currentY = 0;
            if (isBottom) {
                currentY = textRect.bottom;
                // Found a line that is closer to the boundary
                if ((currentY <= (startY - previewHeight)) && (currentY >= minYCutoff)) {
                    minYCutoff = currentY;
                }
            } else {
                currentY = textRect.top;
                // Found a line that is closer to the boundary
                if ((currentY >= (startY + previewHeight)) && (currentY <= minYCutoff)) {
                    minYCutoff = currentY;
                }
            }
        }
        previewHeight = (isBottom) ? (startY - minYCutoff) : (minYCutoff - startY);
        contentWrapperRange.detach();
        // TODO: Page scale?
        // var previewHeightInPx = Math.round(previewHeight / this.pageScale);
        var previewHeightInPx = Math.round(previewHeight);
        // Actually clip the contentWrapper
        previewElement.style.cssText += "height: " + previewHeightInPx + "px !important; overflow: hidden !important;";
    }
function collapseBlockquote(blockquoteElement, showPreview) {
    var preOffsetHeight = blockquoteElement.offsetHeight;
    blockquoteElement.setAttribute("preOffsetHeight", preOffsetHeight);
    var expandQuoteAnchor = document.createElement("a");
    expandQuoteAnchor.href = "#";
    expandQuoteAnchor.onclick = function() { expandQuoteButtonTapped(blockquoteElement, expandQuoteAnchor); };
    expandQuoteAnchor.ondragstart = function(event) { event.preventDefault(); };
    var seeMoreButton = document.createElement("div");
    seeMoreButton.className = "button";
    if (showPreview) {
        var topPreviewElement = document.createElement("div");
        topPreviewElement.appendChild(blockquoteElement.cloneNode(true));
        topPreviewElement.style.overflow = "hidden";
        var bottomPreviewElement = document.createElement("div");
        bottomPreviewElement.appendChild(blockquoteElement.cloneNode(true));
        bottomPreviewElement.style.overflow = "hidden";
        seeMoreButton.innerHTML = LOCSTRING("SHOW_QUOTED_CONTENT");
        expandQuoteAnchor.className = "_AppleShowQuotedContentButton";
        expandQuoteAnchor.appendChild(topPreviewElement);
        expandQuoteAnchor.appendChild(seeMoreButton);
        expandQuoteAnchor.appendChild(bottomPreviewElement);
        blockquoteElement.parentNode.insertBefore(expandQuoteAnchor, blockquoteElement);
        clipBlockquotePreviewElement(topPreviewElement, 42, false);
        clipBlockquotePreviewElement(bottomPreviewElement, 42, true);
        bottomPreviewElement.scrollTop = bottomPreviewElement.scrollHeight;
    }
    blockquoteElement.style.display = "none";
function findBlockquotes() {
    var blockquotesToExpand = false;
    
    var blockquotes = document.getElementsByTagName("blockquote");
    var outlookBlockquotes = collectTopLevelOutlookBlockquotes(document.body);
    
    if (blockquotes.length > 0 || outlookBlockquotes.length > 0){
        blockquotesToExpand = true;
    }
    
    window.webkit.messageHandlers.HasBlockquotesToExpand.postMessage(blockquotesToExpand);
function findAndCollapseBlockquotes() {
    function _saveOffsetTopForElement(element) {
        var elementPosition = getElementPosition(element);
        element.setAttribute("preOffsetTop", elementPosition.y);
    }
    // First check for outlook blockquotes
    var outlookBlockquotes = collectTopLevelOutlookBlockquotes(document.body);
    if (outlookBlockquotes.length > 0) {
        for (var i = 0; i < outlookBlockquotes.length; i++) {
            var element = outlookBlockquotes[i];
            collapseBlockquote(element, showPreview = false);
        }
        return; // don't do our normal blockquote collapsing.
    }
    // Find all topmost blockquote elements. Don't bother collapsing children.
    var topBlockquoteElements = [];
    var blockquotes = document.getElementsByTagName("blockquote");
    for (var i = 0; i < blockquotes.length; i++) {
        var element = blockquotes.item(i);
        var topmostBlockquoteElement = element;
        while ( element.parentElement != null ) {
            element = element.parentElement;
            if ( element.tagName.toLowerCase() == "blockquote" ) {
                topmostBlockquoteElement = element;
            }
        }
        if (topBlockquoteElements.indexOf(topmostBlockquoteElement) == -1) {
            topBlockquoteElements.push(topmostBlockquoteElement);
            // Save this now, because after we start collapsing stuff above, this value will change.
            _saveOffsetTopForElement(topmostBlockquoteElement);
        }
    }
    // Collect sibling blockquotes. Plaintext messages, and even messages from richtext composers, will sometimes
    // have a blockquote element after every line break.
    var elementsToCollapse = [];
    var elementsAbsorbed = [];
    for (var i = 0; i < topBlockquoteElements.length; i++) {
        var element = topBlockquoteElements[i];
        if (elementsAbsorbed.indexOf(element) != -1) {
            continue;
        }
        
        var adjacentBlockquote = function(blockquote) {
            var nextElementSibling = blockquote.nextElementSibling;
            if (!nextElementSibling || nextElementSibling.tagName !== "BLOCKQUOTE") {
                return null;
            }
            var rangeBetweenBlockquotes = document.createRange();
            rangeBetweenBlockquotes.setStartAfter(blockquote);
            rangeBetweenBlockquotes.setEndBefore(nextElementSibling);
            return rangeBetweenBlockquotes.text().length ? null : nextElementSibling;
        }
        
        var blockquote = adjacentBlockquote(element);
        if (blockquote) {
            var newElement = document.createElement("div");
            element.parentNode.insertBefore(newElement, element);
            _saveOffsetTopForElement(newElement);
            do {
                while (true) {
                    var sibling = element.nextSibling;
                    newElement.appendChild(element);
                    elementsAbsorbed.push(element);
                    
                    if (element === blockquote) {
                        element = sibling;
                        break;
                    }
                    element = sibling;
                }
                
                blockquote = adjacentBlockquote(newElement);
            } while (blockquote);
            elementsToCollapse.push(newElement);
        } else {
            elementsToCollapse.push(element);
        }
    }
    for (var i = 0; i < elementsToCollapse.length; i++) {
        var element = elementsToCollapse[i];
        // Determine whether or not to show a preview of the collapsed content.  We'll show a preview if it's not the
        // bottom blockquote.
        var isBottomBlockquote = false;
        var isLastBlockquote = (i == (elementsToCollapse.length - 1));
        if (isLastBlockquote) {
            // ... but just because it's the last blockquote doesn't mean it's the *bottom* blockquote. We have to check here to see if
            // this blockquote is actually at the bottom of the message. We do so by looking at a flat hierarchy of this blockquote's
            // sibling elements, counting the length of the text in these elements (removing whitespace). If the length is zero, then
            // that means the siblings have no valuable content, and thus this element is at the "bottom".
            function nextFlatSibling(elem) { return elem.nextSibling ? elem.nextSibling : elem.parentNode.nextSibling; }
            function siblingTextContentLength(elem) {
                if (!elem) return 0;
                var elemContent = "";
                
                switch (elem.nodeType) {
                    case Node.TEXT_NODE:
                        elemContent = elem.data;
                        break;
                        
                    case Node.ELEMENT_NODE:
                        // We only care about this element if it's visible.
                        var computedStyle = window.getComputedStyle(elem);
                        if (computedStyle && computedStyle.display !== "none") {
                            elemContent = elem.textContent;
                        }
                        
                        break;
                    default:
                        break;
                }
                
                return elemContent.replace(/(\n)|(\s+)/g, "").length + siblingTextContentLength(nextFlatSibling(elem));
            }
            var siblingLength = siblingTextContentLength(nextFlatSibling(element));
            if (siblingLength == 0) isBottomBlockquote = true;
        }
        if (isBottomBlockquote /* always collapse bottom quote */ || shouldCollapseBlockquoteElement(element)) {
            collapseBlockquote(element, showPreview = !isBottomBlockquote);
        }
    }
function quoteDepth(element) {
    var depth = 0;
    var parent = element;
    while (parent != null) {
        if (parent.tagName.toLowerCase() == "blockquote") {
            depth++;
        }
        parent = parent.parentElement;
    }
    return depth;
function isMicrosoftParagraphElement(element) {
    function test(element) {
        return (
            element &&
            element.nodeType == Node.ELEMENT_NODE &&
            element.tagName.toLowerCase() == "p" &&
            (element.className.toLowerCase() == "msonormal" || ((element.parentElement.getAttribute("style") || "").search("mso-element") === 0))
        );
    }
    var firstNonEmptyChild = element.children[0];
    if (firstNonEmptyChild) {
        // sometimes it's buried under a <div> for paragraphs starting after a newline.
        while ( (firstNonEmptyChild.childElementCount == 1 && firstNonEmptyChild.children[0].tagName.toLowerCase() == "div") ) {
            firstNonEmptyChild = firstNonEmptyChild.children[0];
        }
    }
    return ( test(element) || test(firstNonEmptyChild) );
function mightBeAMicrosoftQuoteSeparatorLine(element) {
    // Not very accurate, but it doesn't have to be. Just see if it has a top border and some padding.
    return (element.style.borderTop.length > 0 && element.style.paddingTop.length > 0);
function isTopLevelOutlookBlockquoteElement(divElement) {
    var retVal = false;
    if (quoteDepth(divElement) <= 0) {
        // See if it has a border
        if (mightBeAMicrosoftQuoteSeparatorLine(divElement)) {
            // First child should be a paragraph tag with the class "msonormal"
            var firstChild = divElement.firstElementChild;
            if (isMicrosoftParagraphElement(firstChild)) {
                retVal = true;
            }
        }
    }
    return retVal;
function collectTopLevelOutlookBlockquotes(rootElement) {
    var topLevelQuoteElements = [];
    // Outlook for Windows / OS X
    var containsMSOElements = (rootElement.getElementsByClassName("MsoNormal").length > 0);
    var containsWordSections = (rootElement.getElementsByClassName("WordSection1").length > 0);
    if (containsMSOElements || containsWordSections) {
        var idx = 0;
        var divElementsNodeList = rootElement.getElementsByTagName("div");
        var topLevelOutlookQuotes = [];
        for (var i = 0, length = divElementsNodeList.length; i < length; ++i) {
            var divElement = divElementsNodeList.item(i);
            if (isTopLevelOutlookBlockquoteElement(divElement)) {
                while (!divElement.previousElementSibling && !divElement.nextElementSibling && divElement.parentElement) {
                    divElement = divElement.parentElement;
                }
                topLevelOutlookQuotes.push(divElement);
            }
        }
        for (var currentElement = topLevelOutlookQuotes.shift(); currentElement; currentElement = topLevelOutlookQuotes.shift()) {
            var range = document.createRange();
            range.setStartBefore(currentElement);
            var previousSibling = currentElement.previousSibling;
            if (!previousSibling) {
                previousSibling = currentElement.parentElement;
            }
            if (topLevelOutlookQuotes[0]) {
                range.setEndBefore(topLevelOutlookQuotes[0]);
            } else {
                var treeWalker = document.createTreeWalker(currentElement.parentElement, NodeFilter.SHOW_ELEMENT | NodeFilter.SHOW_TEXT, {
                    acceptNode: function(node) {
                        if (node instanceof Element && (node.tagName === "O:P" || mightBeAMicrosoftQuoteSeparatorLine(node) || isMicrosoftParagraphElement(node))) {
                            return NodeFilter.FILTER_REJECT;
                        }
                        if (node instanceof HTMLDivElement || node instanceof HTMLQuoteElement  || node instanceof HTMLSpanElement
                            || node instanceof HTMLParagraphElement || (node instanceof Text && !node.data.trim().length)) {
                            return NodeFilter.FILTER_SKIP;
                        }
                        return NodeFilter.FILTER_ACCEPT;
                    }
                });
                treeWalker.currentNode = currentElement;
                var lastElement = treeWalker.nextSibling();
                if (lastElement) {
                    while (lastElement.parentElement !== treeWalker.root) {
                        lastElement = lastElement.parentElement;
                    }
                    lastElement = lastElement.previousElementSibling;
                } else {
                    lastElement = treeWalker.root.lastElementChild;
                }
                range.setEndAfter(lastElement);
            }
            var newDiv = document.createElement("div");
            newDiv.className = "x-apple-outlook-blockquote";
            newDiv.appendChild(range.extractContents());
            previousSibling.parentNode.insertBefore(newDiv, previousSibling);
            topLevelQuoteElements.push(newDiv);
        }
    }
    // Outlook.com
    var horizontalRulerNodeList = document.getElementsByTagName("hr");
    var containsHorizontalRulers = (horizontalRulerNodeList.length > 0);
    var containsOriginalAttributions = (document.getElementById("x_divRplyFwdMsg") != undefined); // "original" reply?
    var containsAdditionalAttributions = (document.getElementById("divRplyFwdMsg") != undefined); // "other" replies?
    if (containsHorizontalRulers && (containsOriginalAttributions || containsAdditionalAttributions)) {
        // Just cut everything from the first separator down. It's too much of a mess to parse accurately.
        var range = document.createRange();
        var firstRuler = horizontalRulerNodeList.item(0);
        var previousSibling = firstRuler.previousSibling;
        if (!previousSibling) {
            previousSibling = firstRuler.parentElement;
        }
        range.setStartBefore(firstRuler);
        var lastSibling = firstRuler;
        var nextSibling = lastSibling;
        while ( (nextSibling = nextSibling.nextElementSibling) != undefined ) {
            if (nextSibling.tagName.toLowerCase() != "div") break;
            lastSibling = nextSibling;
        }
        range.setEndAfter(lastSibling);
        var newDiv = document.createElement("div");
        newDiv.className = "x-apple-outlook-blockquote";
        newDiv.appendChild(range.extractContents());
        previousSibling.parentNode.insertBefore(newDiv, previousSibling);
        topLevelQuoteElements.push(newDiv);
    }
    return topLevelQuoteElements;
function fixOutdentedAttributions() {
    var pattern = window.externalConstants.getValue("outdentedAttributionsPattern");
    var regex = new RegExp(pattern, 'i');
    // Shallow copy. We'll be modifying the DOM in the loop below, so do this to avoid an infinite loop
    // of processing our own new blockquote elements.
    var blockquotes = document.getElementsByTagName("blockquote");
    blockquotes = Array.prototype.slice.call(blockquotes, 0);
    var FIXED_ELEMENT_ATTR = "__apple_fixed_attribute";
    for (var i = 0; i < blockquotes.length; i++) {
        var element = blockquotes[i];
        var previousElementDepth = (i > 0) ? quoteDepth(blockquotes[i - 1]) : 0;
        var currentElementDepth = quoteDepth(element);
        if (currentElementDepth > previousElementDepth) {
            var foundAttribution = false;
            var previousNode = element.previousElementSibling;
            if (previousNode == null) {
                previousNode = element.parentElement.previousElementSibling;
            }
            var accumulatedElements = [];
            while (!foundAttribution && previousNode != null && accumulatedElements.length < 4) {
                if (previousNode.nodeType == 1 && previousNode.getAttribute(FIXED_ELEMENT_ATTR) == "true") {
                    // Already fixed. Skip.
                    break;
                }
                accumulatedElements.push(previousNode);
                var text = text = previousNode.textContent;
                if (regex.test(text)) {
                    foundAttribution = true;
                }
                previousNode = previousNode.previousSibling;
            }
            if (foundAttribution) {
                accumulatedElements.reverse();
                var newBlockquote = document.createElement("blockquote");
                newBlockquote.setAttribute("type", "cite");
                newBlockquote.setAttribute(FIXED_ELEMENT_ATTR, "true");
                var parent = accumulatedElements[0].parentElement;
                parent.insertBefore(newBlockquote, accumulatedElements[0]);
                for (var elem_i in accumulatedElements) {
                    var element = accumulatedElements[elem_i];
                    element.parentElement.removeChild(element);
                    newBlockquote.appendChild(element);
                }
            }
        }
    }
function longPressedAttachment(range) {
    // This is only used for figuring out if an attachment can be dragged out into a separate window.
    // Only return attachment ID if it is being long-pressed with no other content selected
    if (!window.getSelection().isCollapsed) {
        return "";
    }
    var attachments = document.querySelectorAll("attachment");
    var result = [];
    for (var i = 0, length = attachments.length; i < length; ++i) {
        var attachment = attachments[i];
        if (attachment.id && range.isPointInRange(attachment, 0))
            result.push(attachment.id);
    }
    
    var images = document.querySelectorAll("img");
    for (var i = 0, length = images.length; i < length; ++i) {
        var image = images[i];
        var source = image.src;
        if ((source.startsWith("cid:") || (image.id.length && image.attachmentIdentifier.length)) && range.isPointInRange(image, 0)) {
            result.push(image.id);
        }
    }
    return result.length == 1 ? result[0] : "";
function rectForAnchor(anchorName) {
    // First look for elements by id, which is the standard HTML5 way
    var anchorElement = document.getElementById(anchorName);
    if (!anchorElement) {
        // If we don't find an element by Id, look for one by name. This is the deprecated HTML4 way
        // but people still use it. If there are multiple, just use the first one
        var anchorElements = document.getElementsByName(anchorName);
        if (anchorElements.length > 0) {
            anchorElement = anchorElements[0];
        }
        else {
            // If we still have no element, return null
            return;
        }
    }
    var rect = anchorElement.getBoundingClientRect();
    return {"x":rect.x, "y":rect.y, "width":rect.width, "height":rect.height};
// message_on_document_load() needs to run immediately.
// both the "load" and "DOMContentLoaded" events aren't fired until all embedded <img> tags have loaded from the network (or timed out)
_try_catch_wrap(message_on_document_load)();
//  Copyright 
 2016 Apple Inc. All rights reserved.
// This is unnecessary a lot of the time. Setting this to 'true' will also require a DFS when reformatting,
// which can be quite expensive.
var ATTEMPT_TO_REFORMAT_TOP_LEVEL_ELEMENTS = false;
var SMALL_ELEMENT_WIDTH = 10.0; // ignore elements of this box size
var TRANSFORM_WRAPPER_CLASS_NAME = "x-apple-transform-wrapper";
/* Utility Functions */
function _iterateAllDocumentElements(_this, iterator /* : function(currentNode) */) {
    // Use a "stop function" to stop this, because there's no pass by reference in js (gun emoji)(head emoji)
    var stop = false;
    function stopFunction() {
        stop = true;
    }
    var currentNode = null;
    var nodeIterator = document.createNodeIterator(document.body, NodeFilter.SHOW_ELEMENT);
    while ( !stop && (currentNode = nodeIterator.nextNode()) ) {
        iterator.call(_this, currentNode, stopFunction);
    }
function _elementHash(element) {
    var box = element.getBoundingClientRect();
    var aNumber = box.left + box.top;
    return element.tagName + "_" + aNumber;
function _depthFirstIterateAllBodyElements(_this, iterator /* : function (currentNode, stopFunction) */) {
    var stop = false;
    function stopFunction() {
        stop = true;
    }
    var visited = [];
    function visitNode(node, xpath) {
        if (stop) return;
        if (node == undefined) return;
        visited[xpath] = true;
        var children = node.children;
        for (var i = 0; i < children.length; i++) {
            var child = children.item(i);
            if (visited[child] == undefined) {
                visitNode(child, xpath + "/" + _elementHash(child));
            }
        }
        if (!stop) {
            iterator.call(_this, node, stopFunction);
        }
    }
    visitNode(document.body, "body");
function _elementIsContainedInElementOfTagName(element, tagName) {
    var contained = false;
    for (var parentElement = element.parentElement; parentElement != null; parentElement = parentElement.parentElement) {
        if (tagName == parentElement.tagName.toLowerCase()) {
            contained = true;
            break;
        }
    }
    return contained;
function _elementIsContainedInTable(element) {
    return _elementIsContainedInElementOfTagName(element, "table");
function _elementIsContainedInBlockquote(element) {
    return _elementIsContainedInElementOfTagName(element, "blockquote");
function _stripWhitespace(text) {
    return text.replace(/(\n)|(\s+)/g, "");
function _isEdgeToEdgeFormattedElement(elem) {
    // Anything else we can look at?
    return (elem && elem.nodeType == Node.ELEMENT_NODE &&
                (elem.getAttribute("x-apple-pending-edge-to-edge") ||
                 elem.classList.contains("x-apple-edge-to-edge") ||
                 elem.classList.contains("x-apple-wide-margin-edge-to-edge")));
function _isRescalableElement(elem) {
    if (elem.tagName.toLowerCase() == "img" && !elem.complete) {
        // static width?
        if (elem.width == undefined && elem.style.width == undefined) {
            return false;
        }
    }
    return !_isEdgeToEdgeFormattedElement(elem);
function ReformatterChange(element, propertyName, propertyValue, important) {
    this.element = element;
    this.propertyName = propertyName;
    this.propertyValue = propertyValue;
    this.important = important;
    this.cleanupBlock = function() {};
    this._previousValue = undefined;
ReformatterChange.prototype = {
    applyChange : function() {
        var styleDeclaration = this.element.style;
        this._previousValue = styleDeclaration.getPropertyValue(this.propertyName);
        styleDeclaration.setProperty(this.propertyName, this.propertyValue, this.important);
    },
    rollbackChange : function() {
        var styleDeclaration = this.element.style;
        if (this._previousValue != undefined) {
            styleDeclaration.setProperty(this.propertyName, this._previousValue, "");
        } else {
            styleDeclaration.removeProperty(this.propertyName);
        }
        this.cleanupBlock();
    },
var LOG_LEVEL_INFO = 0;
var LOG_LEVEL_WARN = 1;
var LOV_LEVEL_ERROR = 2;
function MailDocumentReformatter() {
    // constructor
    this.goalViewportWidth = 0.0;
    this.maximumWidth      = 0.0;
    this.meanWidth         = 0.0;
    this.widthDeviation    = 0.0;
    this.loggingEnabled    = false;
    this.reformattedWidth  = 0.0;
    this._rightFloats = undefined; // undefined means "uninitialized"
    this._hasLeftFloats = undefined;
    this._firstElementContainingText = null;
    this._appliedChanges = [];
MailDocumentReformatter.prototype = {
    _log : function(str, level) {
        level = level != undefined ? level : 0;
        if (this.loggingEnabled || level > 0) {
            MCVLog("[MDR]: " + str);
        }
    },
    _updateMetrics : function() {
        this.maximumWidth = 0.0;
        var nodeCount = 0;
        var widthSum = 0;
        var widthValues = [];
        _iterateAllDocumentElements(this, function(currentNode) {
            var boundingBox = currentNode.getBoundingClientRect();
            var width = boundingBox.width;
            // Ignore small elements
            if (width > SMALL_ELEMENT_WIDTH) {
                nodeCount++;
                widthSum += width;
                widthValues.push(width)
                var rightBoundary = boundingBox.left + boundingBox.width;
                if (rightBoundary > this.maximumWidth) {
                    this.maximumWidth = rightBoundary;
                }
            }
        });
        if (nodeCount > 0) {
            this.meanWidth = (widthSum / nodeCount);
            for (var i = 0; i < nodeCount; i++) {
                var width = widthValues[i];
                this.widthDeviation += (width - this.meanWidth) * (width - this.meanWidth);
            }
            this.widthDeviation = Math.sqrt(this.widthDeviation / nodeCount);
        }
    },
    _updateFloatsIfNecessary : function() {
        if (this._hasLeftFloats == undefined || this._rightFloats == undefined) {
            var hasAnyLeftFloat = false;
            // Not sure if we need to use this yet...
            // var containsUnknownImageDimensions = false;
            var rightFloats = [];
            _iterateAllDocumentElements(this, function(currentNode) {
                if (currentNode.hasChildNodes()) {
                    var computedStyle = window.getComputedStyle(currentNode);
                    var floatValue = computedStyle.float;
                    if (floatValue.toLowerCase() == "right") {
                        rightFloats.push(currentNode);
                    } else if (floatValue.toLowerCase() == "left") {
                        hasAnyLeftFloat = true;
                    }
                }
            });
            this._hasLeftFloats = hasAnyLeftFloat;
            this._rightFloats = rightFloats;
        }
    },
    /**
     * Returns the first element in the DOM that contains actual readable text. Uses a DFS
     * to find the deepest element that meets this requirement.
     * @returns {ELEMENT} First non-text element that contains readable text.
     */
    firstElementContainingText : function() {
        if (this._firstElementContainingText == null) {
            var element = null;
            _depthFirstIterateAllBodyElements(this, function(currentNode, stop) {
                if (currentNode.nodeType == Node.ELEMENT_NODE) {
                    var text = _stripWhitespace(currentNode.textContent);
                    if (text.length > 0) {
                        element = currentNode;
                        stop();
                    }
                }
            });
            this._firstElementContainingText = element;
        }
        return this._firstElementContainingText;
    },
    containsLeftFloats : function() {
        this._updateFloatsIfNecessary();
        return this._hasLeftFloats;
    },
    rightFloats : function() {
        this._updateFloatsIfNecessary();
        return this._rightFloats;
    },
    _setPropertyOnElement : function(element, propertyName, propertyValue, important) {
        important = important != undefined ? important : "";
        var change = new ReformatterChange(element, propertyName, propertyValue, important);
        change.applyChange();
        this._appliedChanges.push(change);
        return change;
    },
    currentDocumentViewportWidth : function() {
        return Math.max(document.body.clientWidth, document.documentElement.clientWidth);
    },
    _shouldReformatElement : function(element) {
        // Permit only block elements for now. Don't allow things like svg and pattern elements to be reformatted.
        var allowedTags = [ "body", "div", "table", "td", "tr", "span", "img", "blockquote", "ul", "li", "form", "pre", "footer", "center" ];
        return ( allowedTags.indexOf(element.tagName.toLowerCase()) >= 0 );
    },
    /**
     * Computes the intrinsic size and position of `element`.
     * @param element : Element whose rect to measure
     * @returns {RECT} Rectangle with properties width, height, x, and y.
     */
    _rectForElement : function(element) {
        var box = element.getBoundingClientRect();
        var elementRect = {
            x : box.left,
            y : box.top,
            width  : box.width,
            height : box.height
        };
        return elementRect;
    },
    /**
     * Iterates over all child elements and calculates the rect that encompasses all child bounding boxes. This is
     * different than simply asking for `element`s bounding box, because it might have a static or relative width.
     * This is a common case for table elements (especially table layouts, whose width is usually defined to be 100%).
     * @param element : Element whose rect to calculate
     * @returns {RECT} Rectangle with width and height properties.
     */
    _getSpilloverBoundingClientRect : function(element) {
        // Iterate over all child elements
        var spilloverRect = {width: 0, height: 0};
        var currentNode = null;
        var nodeIterator = document.createNodeIterator(element, NodeFilter.SHOW_ELEMENT);
        while ( currentNode = nodeIterator.nextNode() ) {
            var boundingBox = currentNode.getBoundingClientRect();
            if (boundingBox) {
                var rightEdge = boundingBox.left + boundingBox.width;
                var bottomEdge = boundingBox.top + boundingBox.height;
                if (rightEdge > spilloverRect.width) spilloverRect.width = rightEdge;
                if (bottomEdge > spilloverRect.height) spilloverRect.height = bottomEdge;
            }
        }
        return spilloverRect;
    },
    /**
     * Destructively resizes an element by manually adjusting it's width and height. This is usually the first thing
     * we try when reformatting an individual element. Uses an !important priority to override any 3rd party size that
     * may have been applied.
     * @param element : Element to resize
     * @param newSize : Dictionary containing new optional 'width' and 'height' keys.
     */
    _resizeElement : function(element, newSize) {
        if (_isRescalableElement(element)) {
            this._log(" - Resizing <" + element.tagName + "> element: width: " + newSize.width);
            if (newSize.width)  this._setPropertyOnElement(element, "width", newSize.width + "px", "important");
            if (newSize.height) this._setPropertyOnElement(element, "height", newSize.height + "px", "important");
            return true;
        }
        return false;
    },
    /**
     * Destructively rescales an element using webkit transforms, and places the element in a parent block
     * display element.
     * @param element : Element to rescale
     * @param scaleFactor : x-y scale to apply to the element. Typically this is a ratio of the current size to
                            it's desired size.
     * @returns {BOOLEAN} Whether or not it succeeded.
     */
    _rescaleElement : function(element, scaleFactor) {
        if (element.className == TRANSFORM_WRAPPER_CLASS_NAME) {
            // Don't attempt to rescale an element's transform wrapper. Scale should be rolled back should scaling
            // be attempted again.
            this._log("Tried to rescale already scaled transform wrapper");
            return false;
        }
        var changes = [];
        if (element.parentElement != document.documentElement && _isRescalableElement(element)) {
            var computedStyle = window.getComputedStyle(element);
            if (computedStyle.display == "inline") {
                // i.e., span elements, need to be converted into block elements.
                changes.push(this._setPropertyOnElement(element, "display", "inline-block", "important"));
            }
            // If this element contains unloaded (probably remote) images, then the boundingBox calculation below will
            // be incorrect. The solution enacted below will apply the rescale transform anway, then when the image is finished
            // downloading will rollback all the changes applied here and try again. There could be potential problems with this,
            // for instance elements that are reformatted *around* this element that depend on the size it, so a potential solution
            // for that would be to lock the reformatter until the images in here are done loading, but then that would cause the
            // user to see/interact with this document in a half-reformatted state. Better to just re-run the formatter (to various
            // extents) when the images finish loading.
            var numIncompleteImages = 0;
            var images = element.getElementsByTagName("img");
            for (var i = 0; i < images.length; i++)  {
                var image = images.item(i);
                if (!image.complete) numIncompleteImages++;
            }
            var boundingBox = element.getBoundingClientRect();
            var resizeWidth  = boundingBox.width;
            var resizeHeight = boundingBox.height;
            if (element.getAttribute("width")) { // static width?
                resizeWidth = element.getAttribute("width");
            }
            this._resizeElement(element, { width: resizeWidth, height: resizeHeight });
            changes.push(this._setPropertyOnElement(element, "transform-origin", "0 0"));
            changes.push(this._setPropertyOnElement(element, "transform", "scale(" + scaleFactor + ")"));
            // TODO: adjust margin?
            var marginAdjustmentWidth = boundingBox.width * (1.0 - scaleFactor);
            // Adjust size of parent element, non-destructively
            var range = document.createRange();
            var newNode = document.createElement("div");
            newNode.className = TRANSFORM_WRAPPER_CLASS_NAME;
            range.selectNode(element);
            range.surroundContents(newNode);
            // The wrapper div's height must be in terms of the element's clientHeight since it gives us
            // the elements "true" height, ignoring any transforms applied to its parents. boundingBox gives us
            // the element's visual size, including transforms applied at all levels.
            var scaledHeight = element.clientHeight * scaleFactor;
            
            this._log(" - Rescaling <" + element.tagName + "> element: height: " + scaledHeight);
            
            var change = this._setPropertyOnElement(newNode, "height", scaledHeight + "px");
            change.cleanupBlock = function() {
                var newRange = document.createRange();
                newRange.selectNodeContents(newNode);
                var newNodeContents = newRange.extractContents();
                newNode.parentNode.insertBefore(newNodeContents, newNode);
                newNode.parentElement.removeChild(newNode);
            };
            changes.push(change);
            // Now if we had incomplete images, add an onload observer so we can try again once they're done
            // loading.
            if (numIncompleteImages > 0) {
                for (var i = 0; i < images.length; i++) {
                    var image = images.item(i);
                    var outerThis = this;
                    image.onload = function() {
                        numIncompleteImages--;
                        if (numIncompleteImages == 0) {
                            // Rollback the changes (if they're still in the _appliedChanges stack)
                            outerThis._log("All images have loaded. Rolling back rescaling changes from preload.");
                            changes.map(function(change) {
                                // Be sure to remove them from the _appliedChanges (but only if they haven't yet been rolled back yet
                                var i = outerThis._appliedChanges.indexOf(change);
                                if (i > -1) {
                                    outerThis._appliedChanges.splice(i, 1);
                                    change.rollbackChange();
                                }
                            });
                            // and try rescaling again if the element is still valid
                            if (element.parentElement) {
                                outerThis._log("Rescaling element again with images loaded.");
                                outerThis._rescaleElement(element, scaleFactor);
                            }
                        }
                    }
                }
            }
        }
        return (changes.length > 0);
    },
    /**
     * Gets this from the display info cache in the native layer above. If we
     * didn't reformat the message last time, don't try to do it again.
     * @returns {BOOLEAN} Whether or not we should bail out.
     */
    _shouldSkipReformatting : function() {
        var shouldSkip = !!window.externalConstants.getValue("shouldSkipReformatting");
        if (!shouldSkip) {
            var metatags = document.getElementsByTagName("meta");
            for (var i = 0; i < metatags.length; i++) {
                var tag = metatags.item(i);
                if (tag.name == "x-apple-disable-message-reformatting") {
                    shouldSkip = true;
                    break;
                }
            }
        }
        return shouldSkip;
    },
    /**
     * First step in the rescaling process. Attempts to scale top level tables
     * (i.e., documents that are laid out using table layouts).
     * @returns {Boolean} Whether or not rescaling should continue based on some exceptions defined below.
     */
    rescaleTopLevelElements : function() {
        var shouldContinue = true;
        var hasLeftFloats  = this.containsLeftFloats();
        var hasRightFloats = (this.rightFloats().count > 0);
        this._log("Has left floats: " + hasLeftFloats + ", right floats: " + hasRightFloats);
        if (hasLeftFloats) {
            // Old rule: Don't rescale if there's a left float.
            shouldContinue = false;
        } else {
            var topLevelElements = [];
            // TODO: do we still have to worry about right floats? These would be images
            // that are supposed to show up "inline" with text.
            // See: http://www.w3schools.com/css/tryit.asp?filename=trycss_layout_float
            if (shouldContinue) {
                var hasAnyRescalableTables = false;
                var maxImageBoundingBoxLeftEdge = this.goalViewportWidth * 0.25;
                var tablesNodeList = document.getElementsByTagName("table");
                for (var i = 0; i < tablesNodeList.length; i++) {
                    var table = tablesNodeList.item(i);
                    if (!_elementIsContainedInTable(table)) {
                        var firstTextElement = this.firstElementContainingText();
                        if (!firstTextElement) {
                            shouldContinue = false;
                            break;
                        }
                        var tableBoundingRect = table.getBoundingClientRect();
                        var firstElemBoundingRect = firstTextElement.getBoundingClientRect();
                        if (tableBoundingRect.top <= firstElemBoundingRect.top && !_elementIsContainedInBlockquote(table)) {
                            shouldContinue = false;
                            break;
                        }
                        topLevelElements.push(table);
                        hasAnyRescalableTables = true;
                    }
                }
                if (shouldContinue && !hasAnyRescalableTables) {
                    var hasImages = false;
                    var imageElements = document.getElementsByTagName("img");
                    for (var i = 0; i < imageElements.length; i++) {
                        var img = imageElements.item(i);
                        if (!_elementIsContainedInTable(img)) {
                            hasImages = true;
                            break;
                        }
                    }
                    var hasPreTags = false;
                    if (!hasImages) {
                        var preTags = document.getElementsByTagName("pre");
                        for (var i = 0; i < preTags.length; i++) {
                            var pre = preTags.item(i);
                            if (!_elementIsContainedInTable(pre)) {
                                hasPreTags = true;
                                break;
                            }
                        }
                    }
                    shouldContinue = (hasImages || hasPreTags);
                }
                if (shouldContinue) {
                    var goalWidth = this.goalViewportWidth;
                    for (var i = 0; i < topLevelElements.length; i++) {
                        var elem = topLevelElements[i];
                        var boundingBox = elem.getBoundingClientRect();
                        var scaleFactor = goalWidth / (boundingBox.left + boundingBox.width);
                        if (!this._rescaleElement(elem, scaleFactor)) {
                            shouldContinue = false;
                            break;
                        }
                    }
                }
            }
        }
        return shouldContinue;
    },
    /**
     * This is the main reformatting routine. Iterates through every element to find one that
     * exceeds our goalViewportWidth, picks just that one element to resize, then repeats the process until we've
     * hit every element, or we hit the same element more than once. This process is detailed further below.
     * @returns {BOOLEAN} Whether or not something was reformatted.
     */
    rescaleDocument : function() {
        var bodyStyle = window.getComputedStyle(document.body);
        var goalViewportWidth = this.goalViewportWidth;
        var shouldContinue = true;
        var WIDTH_EXCEED_THRESHOLD = 10.0;
        var lastResizedElement = null;
        var lastRescaledElement = null;
        while (shouldContinue) {
            var reformattedElement = null;
            // Pick out one individual element to reformat...
            _iterateAllDocumentElements(this, function(elem, stop) {
                if (this._shouldReformatElement(elem)) {
                    var elementRect = this._rectForElement(elem);
                    // If this element's right side goes beyond our goal viewport width, it's a candidate for scaling/sizing.
                    if ( ((elementRect.x + elementRect.width) - goalViewportWidth) > WIDTH_EXCEED_THRESHOLD ) {
                        if (_elementIsContainedInTable(elem)) {
                            this._log("Found a stray element inside of a table...");
                            // Tables are a special case. See if the entire table can be scaled down instead of messing with this
                            // individual element (especially if it's a td, tr, etc.).
                            var tableElem = null;
                            var parentNode = elem;
                            while ( parentNode = parentNode.parentElement ) {
                                if (parentNode.tagName.toLowerCase() == "table") {
                                    tableElem = parentNode;
                                    break;
                                }
                            }
                            if (tableElem) {
                                var spilloverRect = this._getSpilloverBoundingClientRect(tableElem);
                                if ( (spilloverRect.width - goalViewportWidth) > WIDTH_EXCEED_THRESHOLD ) {
                                    this._log("Found <TABLE> element to reformat.");
                                    tableElem.setAttribute("width", parseInt(spilloverRect.width));
                                    elem = tableElem;
                                    elementRect = this._rectForElement(tableElem);
                                    elementRect.width = spilloverRect.width;
                                    elementRect.height = spilloverRect.height;
                                }
                            }
                        }
                        var computedStyle = window.getComputedStyle(elem);
                        var horizontalPadding = parseInt(computedStyle.paddingLeft) + parseInt(computedStyle.paddingRight);
                        // Compute desired width
                        var desiredWidth = goalViewportWidth;
                        if (elem != document.body) {
                            // The desired width should exclude body padding.
                            desiredWidth = desiredWidth - (parseInt(bodyStyle.paddingLeft) + parseInt(bodyStyle.paddingRight)) - elementRect.x;
                        } else {
                            desiredWidth = desiredWidth - horizontalPadding;
                        }
                        var outerThis = this;
                        resize = function(elem, width) {
                            if (lastResizedElement != elem) {
                                var height = undefined;
                                if (elem.tagName.toLowerCase() == "img") {
                                    // need to scale these proportionally
                                    height = (desiredWidth / elementRect.width) * elementRect.height;
                                }
                                // Attempt to RESIZE the element. Some elements won't respond to this change (i.e., elements with no
                                // defined width, tables, inline-divs, etc.), so this may not work.
                                var success = outerThis._resizeElement(elem, {width: desiredWidth, height: height});
                                lastResizedElement = elem;
                                reformattedElement = elem;
                                return success;
                            }
                            return false;
                        };
                        rescale = function(elem, width) {
                            if (lastRescaledElement != elem) {
                                // This path means we tried to explicitly size the element, but it didn't work. Try applying a webkit
                                // transform (scale) on it instead.
                                var scaleFactor = width / (elementRect.width + elementRect.x);
                                var success = outerThis._rescaleElement(elem, scaleFactor);
                                lastRescaledElement = elem;
                                reformattedElement = elem;
                                return success;
                            }
                            return false;
                        };
                        if (desiredWidth > 0.0) {
                            var strategies = [resize, rescale];
                            if (elem.tagName.toLowerCase() == "table") {
                                strategies = [rescale, resize];
                            } else if (elem == document.body) {
                                strategies = [resize];
                            }
                            var success = false;
                            for (var i = 0; i < strategies.length; i++) {
                                var strategy = strategies[i];
                                success = strategy(elem, desiredWidth);
                                if (success) break;
                            }
                            if (!success) {
                                // If we're here, we tried sizing, then scaling, but it still keeps coming up as the problematic element.
                                // This means we probably can't reformat this message because of this one element. Bail out!
                                // TODO: roll back the last change to this element?
                                this._log("Hit the same element. Stopping reformatting.");
                                shouldContinue = false;
                            }
                        } else {
                            // If we're here, this usually means we didn't format the parent element for some reason. Is it a table, or perhaps
                            // an element with a tag type that's not in the list of allowed tags (see _shouldReformatElement)?
                            this._log("Found element that could not be sanely rescaled.");
                            shouldContinue = false;
                        }
                        stop();
                    }
                }
            });
            if (!reformattedElement) {
                this._log("Hit the end of the document without finding an element to reformat.");
                shouldContinue = false;
            }
        }
        return !!(lastResizedElement || lastRescaledElement);
    },
    reformat : function() {
        if (this._shouldSkipReformatting()) {
            this._log("Skipping reformatting.", LOG_LEVEL_WARN);
            return false; // NOTE: early return!
        }
        if (this.reformattedWidth > 0.0) {
            this.rollbackAllChanges();
        }
        var didReformatDocument = false;
        var goalViewportWidth = window.externalConstants.getValue("viewport-width");
        var actualViewportWidth = this.currentDocumentViewportWidth();
        this.goalViewportWidth = goalViewportWidth;
        if (actualViewportWidth > goalViewportWidth) {
            this._log("Reformat is necessary. Goal: " + goalViewportWidth + ", actual: " + actualViewportWidth);
            this._updateMetrics();
            if (ATTEMPT_TO_REFORMAT_TOP_LEVEL_ELEMENTS) {
                var shouldResize = (this.widthDeviation > this.meanWidth);
                // If the mean is within DEV_OFFSET (1.1) std dev's of the max, we should try again.
                if (!shouldResize) {
                    var difference = Math.abs(this.maximumWidth - this.meanWidth);
                    var scaledDev = this.widthDeviation * 1.1;
                    shouldResize = difference < scaledDev;
                }
                this._log("Should resize: " + (shouldResize ? "YES" : "NO"));
                if (shouldResize) {
                    // This means we probably have a table layout. Try to rescale it first.
                    didReformatDocument = this.rescaleTopLevelElements();
                }
                this._log("Rescaled top level elements: " + didReformatDocument);
            }
            var shouldRescale = false;
            var zoomFactor = goalViewportWidth / this.maximumWidth;
            if (zoomFactor < 1.0) {
                shouldRescale = true;
            }
            this._log("Should rescale (zoomFactor: " + zoomFactor + "): " + (shouldRescale ? "YES" : "NO"));
            if (shouldRescale) {
                didReformatDocument = this.rescaleDocument();
            }
            if (didReformatDocument) {
                this.reformattedWidth = this.goalViewportWidth;
            }
        }
        window.webkit.messageHandlers.FinishedReformattingMessage.postMessage( didReformatDocument );
        return didReformatDocument;
    },
    rollbackAllChanges : function() {
        this._log("Rolling back [" + this._appliedChanges.length + "] reformatted changes...");
        var changes = this._appliedChanges;
        if (changes.length > 0) {
            // Be sure to do this in reverse
            for (var i = changes.length - 1; i >= 0; i--) {
                var change = changes[i];
                change.rollbackChange();
            }
        }
        this._appliedChanges = [];
        // Update reformatted width with new width so rolling back doesn't trigger another reformat.
        this.reformattedWidth = g_documentReformatter.currentDocumentViewportWidth();
    },
com.apple.mobilemail
v8@?0
rgb(254,254,254)
background-color
none
-apple-color-filter
100%
max-width
1px 0px 1px 0px
padding
style
title
type
DOWNLOADING_STATUS
Downloading
Delayed
_mf_downloadingStatus
DOWNLOADABLE_STATUS
Tap to Download
_mf_downloadableStatus
_mf_state
action
subtitle
non-extended-content-item
UNAVAILABLE
Main
attachment
%@.%@
QLItem
/System/Library/PrivateFrameworks/QuickLook.framework/QuickLook
### Failed to Soft Linked: /System/Library/PrivateFrameworks/QuickLook.framework/QuickLook
com.apple.UIKit.activity.Quicklook
com.apple.mobilemail.activity.Quicklook
com.apple.mobilemail.saveToCameraRoll
com.apple.mobilemail.saveAllAttachments
com.apple.mobilemail.markupDocument
v16@?0@"EMContentRepresentation"8
failed to ingest %@ (%@)
v16@?0@"UIAction"8
SAVE_IMAGE
SAVE_VIDEO
QUICK_LOOK
OPEN_IN_NEW_WINDOW
MARKUP_DOCUMENT
@"UIWindowSceneActivationConfiguration"16@?0@"UIWindowSceneActivationAction"8
PRINT
/System/Library/PrivateFrameworks/MarkupUI.framework/MarkupUI
### Failed to Soft Linked: /System/Library/PrivateFrameworks/MarkupUI.framework/MarkupUI
v16@?0@"NSMutableSet"8
com.apple.mobilemail.messageContentItemsHelperAttachments
<%@: %p> %@
v16@?0@"NSError"8
@"NSProgress"16@?0@?<v@?@"NSURL"B@"NSError">8
replaceNodeWithSrcWithAttachment
set_state_for_attachment_cid
set_progress_for_attachment_cid
imageAttachmentNodeFinishedDownloading
startDownloadForContentItem
v16@?0@"NSDictionary"8
com.apple.mobilemail.savingPhotos
com.apple.mobilemail.photoLibrary
B16@?0@"NSError"8
WKAttachment is missing for an ID with length %lu, type %@, %@user initiated
not 
background-color:rgb(254,254,254);-apple-color-filter:none
;max-width:100%
;padding:1px 0px 1px 0px
com.apple.email.signposts
com.apple.mobilemail.MessageContentRepresentationRequest
@"<EFFuture>"16@?0@"<EMMessageListItem>"8
B16@?0@"EMContentRepresentation"8
created
in progress
succeeded
failed
<%@: %p> itemID: %@ state:%@
v16@?0@"<EMContentRequestOptionsBuilder>"8
@"<EFFuture>"16@?0@"EMMessage"8
MessageContentRepresentationRequest failed without reason
v16@?0@"NSArray"8
NO_BODY
Invalid parameter not satisfying: %@
builderBlock
-[MessageHeaderViewModel initWithItemBuilder:]
MessageHeaderViewModel.m
v16@?0@"<MessageHeaderViewModelBuilder>"8
flagsBuilderBlock
message
MessageItemViewModel.m
v16@?0@"MFModernLabelledAtomList"8
@"NSString"16@?0@"EMMessageSigner"8
MFAddressAtomStatusManager.m
Signers do not match
OTHER_SIGNERS_TITLE
v32@?0@"<ECEmailAddressConvertible>"8Q16^B24
PresentationOptionsEncodedIntoAddress
MFAddressListsFormatterDidInvalidateCache
MFAddressListFormatter.m
userProfileProvider
@"NSString"16@?0@"NSString"8
@"NSString"8@?0
@16@?0@"<ECEmailAddressConvertible>"8
@"NSArray"8@?0
@"EFPair"16@?0@"<ECEmailAddressConvertible>"8
@"NSAttributedString"8@?0
@16@?0@"NSString"8
A valid instance of MFLocalizationListFormatter is needed
@16@?0@"EFPair"8
This email will be sent
Edit
You sent this
Mail will remind you
MESSAGE_FROM_BLOCKED_SENDER
BLOCKED_SENDER_PREFERENCES
v16@?0@"SGSuggestionAction"8
AllInbox
AllDrafts
AllSent
AllArchive
AllTrash
Flagged
Unread
Today
ToCC
Attachments
ThreadNotifications
MutedThreads
SEE_MORE
@"UIFont"8@?0
conversationItemFooterView.prefixFont
d8@?0
footerView.seeMoreButton.labelBaselineFromTop
-[MFHasMoreContentBannerView titleString]
MFHasMoreContentBannerView.m
-[MFHasMoreContentBannerView actionStringIsDownloading:]
WAS_DOWNLOADED_AS_PLAIN
DOWNLOADING_FULL_MESSAGE
DOWNLOAD_FULL_MESSAGE
MESSAGE_PARTIALLY_DOWNLOADED
BYTES_DOWNLOADING
BYTES_REMAINING
HIDE_MY_EMAIL_TITLE
HME_BANNER_DESCRIPTION
SETTINGS
TiltedTabViewSkyViewEnabled
UIDebuggingEnabled
com.apple.email
MFLoadBlockedContentBannerView.m
blockedContentTypes
UNABLE_TO_VERIFY_MESSAGE_CONTENT
LOAD_MESSAGE
MESSAGE_HAS_MULTIPLE_SIGNERS
REMOTE_IMAGES_BLOCKED_ENCRYPTION
LOAD_REMOTE_IMAGES_ENCRYPTION
REMOTE_CONTENT_BLOCKED_TRUST_EVALUATION
LOAD_REMOTE_CONTENT_TRUST_EVALUATION
REMOTE_IMAGES_BLOCKED_OTHER
LOAD_REMOTE_IMAGES_OTHER
ENABLE_MAIL_PRIVACY_PROTECTION
ENABLE_MAIL_PRIVACY_PROTECTION_DESCRIPTION
NOT_NOW
v16@?0@"UIAlertAction"8
TURN_ON
FAILED_TO_PROXY_REMOTE_CONTENT_OTHER
FAILED_TO_PROXY_REMOTE_CONTENT_NETWORK_INCOMPATIBLE
FAILED_TO_PROXY_REMOTE_CONTENT_VPN
LOAD_FAILED_PROXY_CONTENT
LIST_EXACTLY_TWO_ITEMS
MobileMailUI
LIST_INITIAL_ITEM
LIST_NON_FINAL_ITEM
LIST_FINAL_ITEM
B16@?0@8
MAIL_DROP_BANNER_SAVE_MIXED
MAIL_DROP_BANNER_SAVE_IMAGE
MAIL_DROP_BANNER_SAVE_NONIMAGE_PLURAL
MAIL_DROP_BANNER_SAVE_NONIMAGE
MAIL_DROP_BANNER_DOWNLOADING_MIXED_PLURAL
MAIL_DROP_BANNER_DOWNLOADING_MIXED
MAIL_DROP_BANNER_DOWNLOADING_IMAGES
MAIL_DROP_BANNER_DOWNLOADING_NONIMAGE_PLURAL
MAIL_DROP_BANNER_DOWNLOADING_NONIMAGE
MAIL_DROP_BANNER_DOWNLOADED_MIXED
MAIL_DROP_BANNER_DOWNLOADED_IMAGE
MAIL_DROP_BANNER_DOWNLOADED_PLURAL
MAIL_DROP_BANNER_DOWNLOADED
MAIL_DROP_BANNER_ATTACHMENT
MAIL_DROP_BANNER_FULL_RES
MAIL_DROP_BANNER_ATTACHMENT_PLURAL
MAIL_DROP_BANNER_ERROR
MAIL_DROP_BANNER_NOT_AVAILABLE_MAIL_DROP
MAIL_DROP_BANNER_NOT_AVAILABLE
MAIL_DROP_BANNER_AVAILABLE_MAIL_DROP
MAIL_DROP_BANNER_AVAILABLE
v20@?0@"NSString"8B16
/%lu
x-apple-msg-load-wk2
v16@?0@"NSCachedURLResponse"8
text/html
v24@?0@"MFMessageLoadingContextEvent"8@"NSError"16
v16@?0@"NSString"8
ShowAttachmentMarkup
MFMessageContentViewDidAppear
MFMessageContentViewDidFinishFirstPaint
MFMessageContentViewDidFinishFirstPaintMessageKey
MFMessageContentViewDidFinishFirstPaintErrorKey
com.apple.mobilemail.messageViewTrustConfiguration
MCVLog
v16@?0@8
MCVError
name
stack
AttachmentNodeWasTapped
ExpandQuoteButtonTappedWithYOffset
currentOffsetTop
preOffsetTop
HasBlockquotesToExpand
v16@?0@"NSNumber"8
FinishedReformattingMessage
FoundImageCIDAttachments
TextSelected
ImageError
Loading spinner displayed for %fl seconds
v24@?0@"EMContentRepresentation"8@"NSError"16
B16@?0@"EMMailbox"8
SHOW_QUOTED_CONTENT
SEE_MORE_FROM
localizedStrings
collapseQuotedContent
showRemoteImages
initial-scale
viewport-width
padding-left
padding-right
padding-top
padding-bottom
BODY
attachments
v12@?0B8
v24@?0q8d16
DisableDisplayInfoCache
shouldSkipReformatting
remoteContentToLoadWithoutProxy
v16@?0^{CGImage=}8
elementID
contentID
wkIdentifier
MULTI_MAILDROP_ATTACHMENT_LARGE_TITLE
%@_CH
MULTI_MAILDROP_ATTACHMENT_LARGE_MESSAGE
SINGLE_MAILDROP_ATTACHMENT_LARGE_TITLE
SINGLE_MAILDROP_ATTACHMENT_LARGE_MESSAGE
element_id
rect
width
height
@"MFQuotedContentAttribution"16@?0^@8
B24@?0@"NSString"8@"NSNumber"16
v32@?0@"NSString"8@"NSNumber"16^B24
B16@?0@"DDScannerResult"8
rectForAnchor
x-apple-data-detectors
facetime
facetime-audio
file
Library/Mail
prefs
MESSAGE_CAUSED_PROBLEM_REPEATEDLY
DOWNLOAD
@"UIMenu"16@?0@"NSArray"8
@"UIViewController"8@?0
@"EFFuture"16@?0@"<EMContentItem>"8
SAVE_TO_FILES
SHARE
B16@?0@"UIMenuElement"8
v16@?0q8
scrollView.contentSize
Rendering progress failed without error
-[MFMessageContentView showSearchResultsAtRange:usingStyle:]
v40@?0{CGRect={CGPoint=dd}{CGSize=dd}}8
 !important
QLPreviewController
-[MFMessageDisplayMetrics fontCacheKeyPrefix]
MFMessageDisplayMetrics.m
<%@: %p> traitCollection = %@
messageRegularDisplayMetrics.bodyFont
messageRegularDisplayMetrics.headerBottomPadding
B16@?0@"MFMessageHeaderViewBlock"8
v24@?0Q8^B16
MFMessageHeaderView.m
Blocks must be added to MFMessageHeaderViewBlock before they can be pinned.
v16@?0@"<MessageItemFlagsViewModelBuilder>"8
v32@?0@"MFMessageHeaderViewBlock"8Q16^B24
v16@?0@"MessageHeaderViewModel"8
MFQuotedContentAttribution.m
(type == MFQuotedContentAttributionTypeUnknown && senderName == nil) || (type == MFQuotedContentAttributionTypeNone && senderName == nil) || (type == MFQuotedContentAttributionTypeSender)
<%@:%p (Type: %@, Sender Name: %@>
MFQuotedContentAttributionTypeUnknown
MFQuotedContentAttributionTypeNone
MFQuotedContentAttributionTypeSender
@"NSArray"16@?0@"MailAccount"8
<%@: %p> jsName='%@' => %@
outdentedAttributionsPattern
message-id
subject
(%@) %@
externalConstants
com.apple.mobilemail.reload-timeline
x-apple-mail-proxy-
x-apple-mail-noproxy-
MFWKWebViewFactory.m
daemonInterface is not set
@"<EFFuture>"16@?0@"EMRemoteContentURLCache"8
MailWebProcessBundle
bundle
PlugIns
remoteContentProxySchemePrefix
remoteContentNoProxySchemePrefix
isMailPrivacyProtectionAllowed
<html dir=auto><body><i><font color=#888>%@</font></i></body></html>
MESSAGE_CAUSED_PROBLEM
MESSAGE_UNAVAILABLE
MailDefaultsChangedNotification
Deceleration
LinesOfPreview
ShowMessageDeleteConfirmation
ConversationViewShowsNewestAtTop
ConversationViewExcludesRelatedMessages
CollapseReadConversationMessages
ShowToCCIndicators
POPDeleteIntervalKey
AuthSchemeKey
DisableThreading
DisableQuoteIncrease
outgoing_key
account
IncludeAttachmentReplies
IncludeAttachmentRepliesNever
IncludeAttachmentRepliesWhenAdding
IncludeAttachmentRepliesAsk
IncludeAttachmentRepliesAlways
UseRichLinks
UseRichLinksKeyChangedNotification
LeftEdgeSwipeAction
RightEdgeSwipeAction
SwipeActionNone
SwipeActionRead
SwipeActionFlag
SwipeActionMove
SwipeActionArchive
SwipeActionTrash
SwipeActionAlternateDestructiveAction
MailApplicationDidChangeRemoteImageLoading
MailApplicationDidChangePreviewLinesNotification
MailApplicationDidChangeShowToCCNotification
MailApplicationDidChangeSwipeActions
MailApplicationDidChangeConversationOrder
MailApplicationDidChangeConversationViewIncludesRelatedMessages
MailApplicationDidChangeConversationViewCollapseReadMessagesNotification
MailApplicationDidChangeAccountDisplayName
MailApplicationDidFinishLaunching
MailApplicationMemoryWarningNotification
MailApplicationStatusBarProgressDidHide
MailApplicationsDisableThreadingKeyChanged
MailApplicationProtectedDataWillBecomeUnavailable
MailApplicationProtectedDataDidBecomeAvailable
MailApplicationProtectedDataWasReconciled
MailApplicationProtectedDataForMailboxWasReconciled
MailInternalSettingsDidChange
MailNavigationControllerWillShowViewControllerNotification
MailNavigationControllerDidShowViewControllerNotification
MailNavigationControllerNewViewControllerKey
MailNavigationControllerPreviousViewControllerKey
MailNavigationControllerAnimatedKey
SharedMailboxControllerBadgeCountDidChange
SharedNetworkControllerBadgeCountKey
MainScene
ComposeScene
ConversationScene
QuickLookScene
ActiveDraftIdentifier
mailIncreasedContrastRed
mailDarkGrayColor
mailMoreButtonGrayColor
mailSystemLightGrayColor
@"UIColor"16@?0@"UITraitCollection"8
mailVibrantDarkColor
mailVibrantLightColor
mailAccountCellTitleColor
mailPreviousDraftPickerHeaderTextColor
mailConversationViewCellBackgroundColor
mailConversationViewCollapsedCellLabelColor
mailMessageListPrimarySelectionColor
mailMessageListSecondarySelectionColor
mailMessageListTertiarySelectionColor
mailSnippetHighlightColor
VIPManager.m
+setBackingManager: must be called before attempting to get the default instance
q24@?0@"EMVIP"8@"EMVIP"16
_try_catch_wrap(%@).apply(null, %@);
v24@?0@8@"NSError"16
@"<EFFuture>"16@?0@"EFFuture"8
An error occured trying to retrieve a dictionary from JS function, please check previous logging for issue!
Content Item %{public}@ generated snippet: %@
error creating pass from content item %{public}@: %{public}@
content item %{public}@ had neither a storage or data transfer byte count
injecting attachment element, failed to load content item %{public}@
tapped unknown attachment %@
tapped attachment %@
Removing and re-creating task: %@
#Attachments Error saving Maildrop image: %{public}@
#Attachments Error reading extracted archive entry %@
#Attachments Error opening zip at %@.
Content item is already displayed inline (%{public}@)
UTType does not conform to PDF (%{public}@)
Failed to get data from url (%{public}@) %{public}@
Content request for message %{public}@ already issued
MessageContentRepresentationRequest
itemID=%{signpost.description:attribute,public}@
MessageContentRepresentationRequestFailed
Issuing content request for message %{public}@
 enableTelemetry=YES 
Content request for message %{public}@ loaded successfully
Content request for message %{public}@ failed to load with error: %{public}@
retry-attempt=%{signpost.description:attribute,public}hhu
Mail Privacy Protection Alert with returnCode dismiss
Turning on Mail Privacy Protection Alert
#Attachments nil date string result for meta data [%@] expiration [%@]
loading message %{public}@ had error (%{public}@/%ld): fragment %{public}@
#Warning [MCVLog] %{public}@
[MCVError] Unhandled JS Exception: %{public}@ "%@" - callstack: %{public}@
Got NULL value for SeeMoreButtonTappedWithYOffset
message content view loading
<%{public}@: %p>: Displaying message for header view model: %{public}@
<%{public}@: %p>: set message content request: %{public}@ for message: %{public}@
MFMessageContentView
<%{public}@: %p>: %{public}@ for message: %{public}@
<%{public}@: %p>: Skipping content request. Content representation is nil
<%{public}@: %p>: set nil content request, removing loading indicator
<%{public}@: %p>: setPreviousContentSnapshot:%p (was %p)
<%{public}@: %p>: adding previousContentSnapshotWrapperView: %p
<%{public}@: %p>: removing previousContentSnapshotWrapperView: %p
<%{public}@: %p>: contentRepresentation requested before it finished loading: %{public}@
<%{public}@: %p>: Reloading web view (background crash count: %ld)
<%{public}@: %p>: bringing loading view to front: %p
<%{public}@: %p>: bringing previous content snapshot wrapper view to front: %p
<%{public}@: %p>: showing delayed progress indicator
<%{public}@: %p>: loadingIndicatorVisible=%@ (view: %p wasVisible %@)
-[MFMessageContentView contentRequestDidReceiveContentRepresentation:error:]
<%{public}@: %p>: Error loading content represenation for message %@ : %{public}@
<%{public}@: %p>: Request webView load for message-id: %{public}@, representation: %{public}@
<%{public}@: %p>: URLs to load without proxy: %{public}@
Waiting for a WebKit presentation update for message - libraryid=%{public}@
ask webkit to take a snapshot - libraryid=%{public}@
ERROR converting dictionary keys/values to CGRect, %@
<%{public}@: %p> Web process did fail to load for content request: %{public}@, message: %{public}@
-[MFMessageContentView webProcessDidFinishDocumentLoadForURL:andRequestedRemoteURLs:]
<%{public}@: %p> Web process did finish load for content request: %{public}@ message: %{public}@
<%{public}@: %p> Web process did block loading resource for content request: %{public}@ message: %{public}@
<%{public}@: %p> Web process did fail to load content request: %{public}@ message: %{public}@
<%{public}@: %p>: Displaying failed proxy load banner due to: %{public}@
<%{public}@: %p>: Blocking file:// URL from web view.
<%{public}@: %p>: Blocking prefs: URL from web view.
<%{public}@: %p>: Blocking navigation action for request whose target frame is not the main frame (iframe, probably): %@
<%{public}@: %p>: rendering progress did first paint, removing loading indicator
<%{public}@: %p>: removing previous content snapshot
<%{public}@: %p>: Message Content View did fail navigation: %{public}@
<%{public}@: %p>: %{public}@ %@ (pid: %d)
<%{public}@: %p>: %{public}@ %@ (pid: %d; reason: %ld; background crash count: %ld)
<%{public}@: %p>: %{public}@ %@ (pid: %d; reason: %ld; crash count: %ld; activation state: %ld)
Failed to decode attachment previews: %@
Skipping lockdown first use message
WebView=%{signpost.description:attribute,public}p itemID=%{signpost.description:attribute,public}@ AccountType=%{public, signpost.telemetry:number1}lu Status=%{public, signpost.telemetry:number2}ld enableTelemetry=YES 
didBeginTextSearch: self = %p, webView = %p, searchWasActive = %{BOOL}d, searchIsActive = %{BOOL}d
didEndTextSearch: self = %p, webView = %p, searchWasActive = %{BOOL}d, searchIsActive = %{BOOL}d
%s: webview %@ returned rect for range: %@, item: %@, style: %lu
<%{public}@: %p>: Killing and resetting webview: %@
<%{public}@: %p>: Sending request to reload webview: %@
<%{public}@: %p>: Sending request to stop loading webview: %@
<%{public}@: %p>: Sending request to load webview with content representation: %{public}@
<%{public}@: %p>: Sending request to load webview with error: %{public}@
<%{public}@: %p>: Sending request to load webview with loading URL: %@
<%{public}@: %p>: updatingWebProcessPlugin
Perform block
RELOAD WIDGET TIMELINE
Reload timelines failed with error: %{public}@
Reload timelines
Reload timelines completed (success=%{BOOL}d) enableTelemetry=YES 
Preallocate webViews
Failed to find a message for error: %{public}@
#MailServices saveVIP: %@
#MailServices deleteVIPWithIdentifier: %@
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>com.apple.private.email</key>
<true/>
<key>com.apple.private.tcc.allow.overridable</key>
<array>
<string>kTCCServiceAddressBook</string>
</array>
</dict>
</plist>
ContentItemMarkupGenerator
EFLoggable
NSObject
ConversationFooterViewDisplayMetrics
ConversationSearchOverlayView
MailQLAttachmentContext
MailQLItemDataProvider
QLPreviewItemDataProvider
MessageActivityViewController
MessageAttachmentActionGenerator
MessageQuicklookImageAttachmentsActivity
MessageMarkupDocumentActivity
MessagePrintQuicklookableAttachmentActivity
MessageContentItemRepresentationTask
MSMailWebProcessAttachmentProxy
MessageContentItemsHelper
MessageContentRepresentationRequest
EFCancelable
EFSignpostable
EFPubliclyDescribable
MessageContentRepresentationRequestDelegate
EMContentItemRequestDelegate
MessageHeaderViewModel
MessageHeaderViewModelBuilder
MessageItemViewModelBuilder
MessageItemFlagsViewModelBuilder
NSCopying
MessageItemViewModel
MFAddressAtomStatusManager
MFAddressBookClient
MFAddressListFormatter
MFBannerView
MFBlockedSenderBannerView
MFCardAction
MFFlagColorCardAction
MFConversationItemFooterView
UIPointerInteractionDelegate
ConversationSearchOverlayAdding
MFHasMoreContentBannerView
_MFPlainTextBannerView
_MFPartiallyDownloadedBannerView
MFHideMyEmailBannerView
MFInternalSettingsCache
MFLoadBlockedContentBannerView
MFLoadFailedProxyContentBannerView
MFLocalizationListFormatter
MFMailDropBannerView
_MFMessageContentURLProtocolRegistry
MFMessageContentURLProtocol
_MFTapPreventingRecognizer
MFMessageContentView
UIPopoverPresentationControllerDelegate
UIAdaptivePresentationControllerDelegate
_WKInputDelegate
WKNavigationDelegatePrivate
WKNavigationDelegate
WKUIDelegatePrivate
WKUIDelegate
MFHideMyEmailBannerViewDelegate
MFHasMoreContentBannerViewDelegate
MFLoadBlockedContentBannerViewDelegate
MFLoadFailedProxyContentBannerViewDelegate
MFBlockedSenderBannerViewDelegate
MFMessageHeaderViewDelegate
MFMessageFooterViewDelegate
MFMailDropBannerDelegate
MFPresentationSource
UIScrollViewDelegate
MFMailWebProcessDelegate
MFReusable
Add)
_MFMessageContentResizeWrapperView
MFMessageDisplayMetrics
MFMessageDisplayMetricsCompact
MFMessageDisplayMetricsRegular
MFMessageHeaderView
MFMessageHeaderViewBlock
MFQuotedContentAttribution
MFReadableContentMarginCalculator
MFSuggestionBannerView
MFUserProfileProvider_iOS
EMUserProfileProviderSubclassMethods
MFUserScriptLibrary
MFMailWebProcessProxy
MFWebViewDictionary
MFWebViewLoadingController
EMRemoteContentURLSessionObserver
MFWidgetController
MFWKWebViewFactory
MEContentRuleListManagerObserver
MessageContentView
SeparatorLayer
MobileMail
MFUIDebugging
VIPManager
EMVIPManager
EMVIPReader
horizontalSizeClass
setAddress:
widthAnchor
dictionaryWithValuesForKeys:
ef_observeKeyPath:options:usingBlock:
insertObject:atIndex:
headerFields
ef_match
result:
_snapshotRect:intoImageOfWidth:completionHandler:
uniformTypeIdentifier
skipMessageReformatting
remainingByteCount
mf_hasCompactDimension
isSigned
setActive:
systemGray5Color
_referenceBounds
CGColor
presentAnimated:completionHandler:
initWithEventUID:eventStore:
blackColor
setContentInsetAdjustmentBehavior:
colorWithWhite:alpha:
acui_specifierIconForAccountTypeIdentifier:
reloadTimelineWithReason:
result
dictionaryWithObjects:forKeys:count:
whitespaceAndNewlineCharacterSet
systemGray4Color
ef_mapSelector:
firstResponder
trustEvaluation
sizeToFit
setActionTitle:
mf_diffWithArray:
colorWithRed:green:blue:alpha:
response
initWithEffect:
resolvedColorWithTraitCollection:
whiteColor
setContentInset:
insertArrangedSubview:atIndex:
dictionaryWithObjects:forKeys:
isRegularFile
setActionButtonType:
firstObject
contents
_readableWidth
SMIMEError
ef_map:
colorWithDynamicProvider:
objectIDFromSerializedRepresentation:
initWithDuration:controlPoint1:controlPoint2:animations:
activityDidFinish:
systemFontOfSize:
activeNonLocalAccounts
setContentHuggingPriority:forAxis:
dictionary
mf_copyIDNADecodedEmailAddress
size
setAccessoryType:
transportType
systemBlueColor
firstEmailAddress
inputWithURL:
contentURL
initWithDropOperation:
mayOpenFromManagedToUnmanaged
requiresReevaluationWithNetworkAccess
traitCollectionWithUserInterfaceStyle:
objectID
ef_formatDate:style:
activeAccounts
contentSize
relatedContentItems
ef_flatten
setContentCompressionResistancePriority:forAxis:
isPhotoArchive
setNumberOfTapsRequired:
systemBlackColor
colorWithAlphaComponent:
firstBaselineAnchor
preferredMIMEType
setAccessibilityIdentifier:
requestedHeaders
allObjects
simpleAddress
traitCollectionWithTraitsFromCollections:
setUserInteractionEnabled:
hasPrefix:
initWithDictionary:
colorNamed:
_preferredFontForTextStyle:weight:
mf_blockRemoteContent
setNumberOfLines:
requestWithURL:cachePolicy:timeoutInterval:
setConstant:
first
dequeue
loadRequest:
activationState
markupURL:
serializedRepresentation
ef_firstObjectPassingTest:
mf_attributionExpression
initWithDelegate:
loadHTMLString:baseURL:
objectForKey:generator:
setUserInfo:
hasMoreContent
ef_filter:
_overrideLayoutParametersWithMinimumLayoutSize:maximumUnobscuredSizeOverride:
systemBackgroundColor
markupStringForDisplayWithData:allowAttachmentElement:
baselineOffsetFromBottom
setConfiguration:
finishWithResult:error:
registerObserver:
preferredFontForTextStyle:
_observedRenderingProgressEvents
code
serialDispatchQueueSchedulerWithName:qualityOfService:
loadFileURL:allowingReadAccessToURL:
activateConstraints:
preferredFontDescriptorWithTextStyle:addingSymbolicTraits:options:
initWithDataProvider:contentType:previewTitle:
mf_addArrangedSubviews:
setCompletedUnitCount:
hasItemConformingToTypeIdentifier:
_setWaitsForPaintAfterViewDidMoveToWindow:
initWithData:encoding:
signingCertificateTrustInfo
setCloseButtonXAnchorOffset:
finishWithFuture:
client
setUpURLCacheWithMemoryCapacity:
actionWithTitle:style:handler:
defaultWorkspace
setFont:
ef_declaredUTTypeFromExtension
isMainFrame
bannerViewDidSelectEditButton:itemID:
registerObject:visibility:
finishWithError:
isMailPrivacyProtectionAllowed
ef_countObjectsPassingTest:
setNeedsUpdateConstraints
preferredContentSizeCategory
allEmailAddresses
signers
markupString
_obscuredInsets
defaultTimeZone
initWithCountLimit:
hasEncryptedDescendantPart
initWithView:
objectAtIndexedSubscript:
actionWithTitle:image:identifier:handler:
superview
setClipsToBounds:
_setTextColorFollowsTintColor:
registerFileRepresentationForTypeIdentifier:dataAvailableImmediately:visibility:loadHandler:
setSelectionGranularity:
preferredCharacterSet
actionWithTitle:handler:
_setTextAutosizingEnabled:
alertControllerWithTitle:message:preferredStyle:
setNeedsLayout
trailingAnchor
registerExportedObject:interface:
setURLSchemeHandler:forURLScheme:
setClasses:forSelector:argumentIndex:ofReply:
shownViaDataDetectorsLinkInApp:
setFlags:
ef_conformsToRFC822UTType
numberWithInteger:
preferences
subviews
afterDelay:performBlock:
ef_conformsToMarkupUTType
weakToWeakObjectsMapTable
setNeedsDisplay
mainThreadScheduler
filter:
numberWithInt:
separatorColor
subscribeWithResultBlock:
messageSourceMailboxObjectIDForMessageContentView:
weakProxyForObject:
initWithContentID:uttype:data:additionalMarkup:
clearColor
actionWithIdentifier:alternateAction:configurationProvider:
preferenceEnabled:
isInvalid
setName:
setCharge:
setNavigationDelegate:
showSelectedExchangeEventUID:fromRect:view:
fileSize
messageRepository
initWithUserActivity:
mainScreen
setUIDelegate:
weakObjectsHashTable
registerContentRepresentation:
actionWithHandler:
initWithCache:
ef_caseInsensitiveIsEqualToString:
_setRemoteInspectionNameOverride:
requestRepresentationWithOptions:delegate:completionHandler:
numberWithDouble:
isInternal
subscribe:
fetchLocalData
centerYAnchor
ABPerson
addressBookDidChange:
ef_all:
subjectWithoutPrefix
initWithURL:options:error:
showSelectedContentRepresentation:fromRect:view:
mainBundle
postNotificationName:object:userInfo:
setTranslatesAutoresizingMaskIntoConstraints:
initWithBytes:length:encoding:
isInboxMailbox
setFileWrapper:contentType:completion:
requestRepresentationWithOptions:completionHandler:
numberWithBool:
registerClass:
showRemoteImages
setButtonSize:
_setPunchOutWhiteBackgroundsInDarkMode:
setTransform:
initWithURL:MIMEType:expectedContentLength:textEncodingName:
expiration
lineHeight
setScrollsToTop:
addressBook
numberOfTapsRequired
mailboxesIfAvailable
refreshCachedValues
centerXAnchor
backgroundColor
setModalPresentationStyle:
setExcludedActivityTypes:
subjectString
initWithURL:MIMEType:
isHidden
contentOffset
topViewController
messageListItemForItemID:
setBouncesVertically:
requestAdditionalContentWithCompletion:
addedIndexes
_bodyLeading
_setObservedRenderingProgressEvents:
postNotificationName:object:
addressAtoms
popoverPresentationController
reevaluateTrustWithNetworkAccessAllowed
null
setScrollEnabled:
length
messageID
defaultCenter
setMinimumFontSize:
handleFailureInMethod:object:file:lineNumber:description:
mailboxes
setBorderWidth:
initWithBarButtonSystemItem:target:action:
addUserScript:
sender
showMenuForSelectedContentRepresentation:fromRect:view:
exchangeEventUID
defaultActionForURL:results:context:
legacyMailboxForObjectID:
request
_setObscuredInsets:
caseInsensitiveCompare:
ec_emailAttributedStringWithString:andEmailAddress:
action
setScheme:
grayButtonConfiguration
_loadAlternateHTMLString:baseURL:forUnreachableURL:
subarrayWithRange:
evaluateTrustsWithOptions:
setBorderColor:
contentMessage
evaluateJavaScript:completionHandler:
_setObjectsForBundleParametersWithDictionary:
pointSize
sendSubviewToBack:
drawInRect:
initWithType:qualifier:expression:
accountWithUniqueId:
decryptedMessageBodyIsEncrypted:isSigned:
setDistribution:
globalAsyncSchedulerWithQualityOfService:
stringWithFormat:
decorateFoundTextRange:inDocument:usingStyle:
accountStatisticsKindToIdentifier:
viewController
setBool:forKey:
performWithoutAnimation:
isFatPipe
captureSnapshotOfView:withSnapshotType:
leadingAnchor
reportIssueType:description:
stringWithContentsOfFile:encoding:error:
initWithArray:copyItems:
globalAsyncScheduler
leading
readLater
getWhite:alpha:
done
setRightBarButtonItem:
addTarget:action:forControlEvents:
initWithTrustInformation:
_setIsContentManaged:
canPreviewItem:
shouldPromptForBlockedSender
isFaceTimeMultiwayURL
navigationType
stringValue
initWithArray:
decompressContents:completion:
getRed:green:blue:alpha:
topLevelPart
errorWithDomain:code:userInfo:
initWithString:attributes:
domain
decodeObjectOfClasses:forKey:
addSuccessBlock:
performWhileLocked:
rangeOfCharacterFromSet:
setDisplayName:
navigationItem
replay:
_killWebContentProcessAndResetState
_attachmentForIdentifier:
initWithString:
_setInputDelegate:
shouldPresentRemoteContentAlert
renderInContext:
isExpired
stringFromEmailAddressConvertible:
setRequestedRepresentation:
_setIndicatorInsetAdjustmentBehavior:
doesNotRecognizeSelector:
addSubview:
performSyncBlock:
deactivateConstraints:
name
canArchive
initWithSource:injectionTime:forMainFrameOnly:
initWithArrangedSubviews:
topAnchor
layoutMarginsGuide
messageContentViewContentLayerFinished:
userInterfaceIdiom
isEqualToString:
_killWebContentProcess
setRequestedHeaderKeys:
stringFromDate:
performSelectorOnMainThread:withObject:waitUntilDone:
cachedScaledFloatWithValue:fontStyle:maximumContentSizeCategory:
addScriptHandlerForWebView:key:handler:
_webProcessIdentifier
enumerateObjectsUsingBlock:
secondarySystemGroupedBackgroundColor
initWithActivityType:
mutableCopy
attachmentManager
render:
removedIndexes
initWithSource:forMainFrameOnly:
contentInset
cachedScaledFloatWithValue:fontStyle:
stringFromByteCount:countStyle:
isEqualToIndexSet:
_setColorFilterEnabled:
layoutIfNeeded
shouldDecorateAtomListWithSMIMEStatus:
addObserver:selector:name:object:
performBlock:
userInfo
secondarySystemBackgroundColor
setDismissAction:
queryItems
addObserver:activeRuleLists:
messageContentView:viewedRemoteURLs:
initWithSession:schemePrefix:allowProxying:
attachmentForTextAttachment:error:
futureWithResult:
performAction:inView:interactionDelegate:
_setAttachmentElementEnabled:
enumerateKeysAndObjectsUsingBlock:
initForReadingFromData:error:
queryItemWithName:value:
userContentController
contentID
cachedPreferredFontForStyle:
stringByTrimmingCharactersInSet:
pattern
titleLabel
setTitle:forState:
displayName
enumerateIndexesWithOptions:usingBlock:
isEqualToArray:
initWithRootViewController:
futureWithError:
dataWithJSONObject:options:error:
content
secondaryLabelColor
initForExportingURLs:asCopy:
_setAllowsMetaRefresh:
addObjectsFromArray:
stringByReplacingOccurrencesOfString:withString:
cachedFont:forKey:
indexOfObject:
layer
enumerateIndexesUsingBlock:
setQueryItems:
containsString:
messageContentView:quotedContentAttributionForMessage:
futureWithBlock:
query
pathForResource:ofType:
_setAllowsJavaScriptMarkup:
initWithResponse:data:userInfo:storagePolicy:
minimumZoomScale
purpleColor
second
sharedReporter
addObject:
launchedToTest
enqueue:
removeTarget:action:forControlEvents:
messageContentView:openPossibleStoreURL:
cachedFloat:forKey:
setQuery:
isEncrypted
setBackgroundColor:
dataWithContentsOfURL:options:error:
stringByDeletingPathExtension
_setAdditionalSupportedImageTypes:
launchAppForJoinRequest:
setLineBreakMode:
minimumFontSize
setPromptForBlockedSender:
containsObject:
pathExtension
scrubbedArchiveEntries
setTintAdjustmentMode:
_initWithConfiguration:
publicMessageURL
addLayoutGuide:
buttonWithType:
immediateScheduler
stringByAppendingString:
dataUsingEncoding:
initWithProgressViewStyle:stroke:frame:
constraintLessThanOrEqualToAnchor:
fullyRedactedStringForString:
setTimeStyle:
path
sharedPrintController
schemePrefix
_scaledValueForValue:
buttonWithConfiguration:primaryAction:
mf_useSplitViewStyling
setAutoresizingMask:
then:
imageWithData:
lastPathComponent
messageContentView:handleContentRepresentation:
removeObject:
constraintEqualToConstant:
setProgress:
string
initWithPreviewItems:
imageWithCGImage:scale:orientation:
dataTransferByteCount
_addUserStyleSheet:
initWithObjects:
enableMailTrackingProtection:
setDateStyle:
addInteraction:
CGSizeValue
pairWithFirst:second:
sharedManager
bundleForClass:
sharedInstance
tertiarySystemFillColor
teamData
setTextColor:
lastObject
displayMessage
isDescendantOfView:
frame
storageByteCount
progressWithTotalUnitCount:
mf_systemImageNamed:forView:
constraintEqualToAnchor:constant:
sharedHandler
emailAddresses
lastBaselineAnchor
fragment
mailDropMetadata
bringSubviewToFront:
imageView
dismissViewControllerAnimated:completion:
setText:
data
setIsContentManaged:
targetedDragPreviewInContainer:centerOffset:
progressDidFinish
setAttributedTitle:forState:
addGestureRecognizer:
setPrintPageRenderer:
arrayWithObjects:count:
constraintEqualToAnchor:
removeFromSuperview
emailAddressValue
orCompoundCriterionWithCriteria:
initWithObject:
initWithName:value:
mf_symbolConfigurationForView:
setDataDetectorTypes:
image
setPrimaryAction:
scale
labelColor
setTargetContentIdentifier:
setAttributedTitle:
array
sharedFontMetricCache
targetFrame
setInsetsLayoutMarginsFromSafeArea:
setInjectedBundleURL:
addFailureBlock:
statisticsKind
connect
emailAddress
brandIndicatorLocation
tableBackgroundColor
mf_stringRepresentationForBytes:
identifier
setSuggestedName:
removeContentRuleList:
directionalLayoutMargins
isBlocked
currentHandler
archiveDirectory
optionsWithRequestedRepresentationType:networkUsage:
brandIndicatorFutureForLocation:
setPreview:
conformsToType:
initWithName:expiration:preventIdleSleep:
em_userDefaults
setSubtitle:
addContentRuleList:
systemYellowColor
mf_stringByEscapingHTMLCodes
htmlSnippetWithTag:includeTrailingTag:attributes:
setDataAvailability:forTypeIdentifier:
iterateDisplayedAtomListsWithBlock:
mf_shouldUseDesktopClassNavigationBarForTraitCollection:
openSensitiveURL:withOptions:
currentDevice
sharedConnection
_activatedElementInfo
archive
isAvailableLocally
em_mailToFromQueryItemKey
itemProvider
_firstLineBaseline
htmlData
_requestRectForFoundTextRange:completionHandler:
updateAtomsForVIP
opaqueSeparatorColor
systemTealColor
setCustomSpacing:afterView:
addCompletion:
removeClient:
setPreservesSuperviewLayoutMargins:
removeArrangedSubview:
configurationWithIdentifier:previewProvider:actionProvider:
setSourceView:
appendString:
unregisterObserver:
em_itemNotFoundError
invertedSet
conversationNotificationLevel
systemRedColor
bounds
messageContentView:clickedLinkInMessage:scheme:
UTF8String
appendLocalizedFormat:
isZooming
sharedApplication
setAnchorPoint:
setPresentationOptions:
lock
setSourceRect:
startAnimation
previewURL:
configuration
presentingViewControllerForMessageContentView:
hideMyEmailURL
addClient:
initWithMarkupString:baseURL:
boundingRect
em_internalErrorWithReason:
setIncludeSuggestionItems:
onScheduler:then:
removeAllScriptMessageHandlers
unregisterExportedObject:interface:
messageContentView:clearSuggestionsBannerAnimated:
mf_revealActionsButtonWithAccessibilityIdentifier:
systemPurpleColor
setAlwaysBounceVertical:
elementActionTypeForUIActionIdentifier:
setCornerStyle:
URLWithString:
appendData:
boundedQueueWithCapacity:
localizedTitleForSaveAllAttachmentsAction
invalidateIntrinsicContentSize
setPreferredSymbolConfiguration:forImageInState:
setZoomScale:
initWithHeaderBody:
rightBarButtonItem
setIncludeCachedMetadataJSON:
hideMenuForSelectedContentRepresentation
invalidateAndCancel:
componentsWithURL:resolvingAgainstBaseURL:
addChild:withPendingUnitCount:
onScheduler:addSuccessBlock:
setSkipMessageReformatting:
addCharactersInString:
animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion:
URLProtocolDidFinishLoading:
systemOrangeColor
mf_revealActionButtonPointerStyleInView:
presentedViewController
_doAfterNextPresentationUpdate:
didStartDownloadForContentItemWithProgress:
_removeAllUserStyleSheets
setImages:
didEndTextSearchOperation
setAlpha:
isZoomBouncing
effectiveUserInterfaceLayoutDirection
setWithObjects:
unmodifiedAddressString
setAllowsLinkPreview:
componentsWithString:
localizedStringWithFormat:
setSize:
URLProtocol:didReceiveResponse:cacheStoragePolicy:
fontWithDescriptor:size:
mf_prefersRightToLeftInterfaceLayout
remoteObjectProxyWithInterface:
systemIndigoColor
addCancelationBlock:
coreResult
messageBody
unlock
heightAnchor
animateWithDuration:animations:completion:
_remoteObjectRegistry
invalidate
intersectSet:
initWithFrame:configuration:
effectWithStyle:
sortUsingComparator:
componentsJoinedByString:
onScheduler:addFailureBlock:
ef_removeObjectsPassingTest:
copyReceivingEmailAddresses
URLProtocol:didLoadData:
bottomAnchor
remoteObjectInterfaceWithProtocol:
setWithArray:
animateWithDuration:animations:
presentationOptions:encodedIntoAddress:
setImage:forState:
setShowRemoteImages:
observerWithResultBlock:completionBlock:failureBlock:
localizedDescription
addCancelable:
headersForKey:
zoomScale
completionHandlerAdapter
localizedStringForKey:value:table:
URLProtocol:didFailWithError:
uniqueIdentifier
floatValue
systemGroupedBackgroundColor
systemImageNamed:
setPath:
mf_isSMIMEError
_dataDetectionResults
setAlignment:
convertRect:fromView:
presentationOptions
URLForResource:withExtension:subdirectory:
always:
copy
addArrangedSubview:
windowScene
setShouldTakeUIBackgroundAssertion:
resultIfAvailable:
localizedCaseInsensitiveCompare:
observerDidReceiveResult:
remoteContentURLCache
presentViewController:animated:completion:
completedUnitCount
setImage:
insertSubview:atIndex:
isUserInitiated
systemGreenColor
setWantsStagingArea:
boolForKey:
alpha
didBeginTextSearchOperation
ef_onScheduler:
setAdjustsFontForContentSizeCategory:
setOnWebViewConfiguration:
setOtherSigners:
addAction:
blockedSenderURL
merge:
flags
setHidden:
setContentOffset:
uniqueID
menuWithTitle:children:
commonName
observeOn:
initWithExtensionBundleIdentifier:kind:
window
systemGrayColor
insertSubview:above:
setShouldIncludeDisplayName:
isSourceManagedForURL:
mf_isPad
markupStringForDisplayForContentItem:
attachmentElementMarkupStringForContentItem:
isDisplayableInlineContentItem:
isDisplayableImageContentItem:
isPDFContentItem:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
T@"NSObject<OS_os_log>",R
displayMetricsWithSafeAreaInsets:interfaceOrientation:traitCollection:
toolbarHeight
setToolbarHeight:
topToBaseline
setTopToBaseline:
usePhoneLandscapeSymbolConfiguration
setUsePhoneLandscapeSymbolConfiguration:
_usePhoneLandscapeSymbolConfiguration
_toolbarHeight
_topToBaseline
Td,N,V_toolbarHeight
Td,N,V_topToBaseline
TB,N,V_usePhoneLandscapeSymbolConfiguration
initWithFrame:
show
hide
integerValue
boolValue
init
contextWithUserActivity:
initWithAttachmentURL:editBehavior:messageObjectID:mailboxObjectID:subject:contentManaged:
userActivity
attachmentURL
isContentManaged
editBehavior
messageObjectID
mailboxObjectID
subject
.cxx_destruct
_contentManaged
_attachmentURL
_editBehavior
_messageObjectID
_mailboxObjectID
_subject
T@"NSUserActivity",R,C,N
T@"NSURL",R,N,V_attachmentURL
contentManaged
TB,R,N,GisContentManaged,V_contentManaged
Tq,R,N,V_editBehavior
T@"EMMessageObjectID",R,N,V_messageObjectID
T@"EMMailboxObjectID",R,N,V_mailboxObjectID
T@"NSString",R,N,V_subject
provideDataForItem:
initWithURL:
item
contentType
_contentType
_url
T@"QLItem",R,C,N
T@"UTType",R,N,V_contentType
T@"NSURL",R,N,V_url
initWithActivityItems:applicationActivities:
setSourceIsManaged:
sourceIsManaged
_sourceIsManaged
TB,N
_saveToCameraRollActionForFutureRepresentations:title:image:
saveImageActionForFutureRepresentation:
saveVideoActionForFutureRepresentation:
saveAllAttachmentsActionWithTitle:futureRepresentations:
quicklookActionForURL:messageObjectID:mailboxObjectID:subject:contentRepresentationHandlingDelegate:
markupDocumentActionForURL:messageObjectID:mailboxObjectID:subject:contentRepresentationHandlingDelegate:
quicklookActionForAttachmentContext:alternateAction:
_cleanup
initWithAttachmentHandlingDelegate:context:url:
activityType
activityTitle
activityImage
canPerformWithActivityItems:
performActivity
delegate
setDelegate:
setUrl:
_delegate
T@"<ContentRepresentationHandlingDelegate>",W,N,V_delegate
T@"NSURL",&,N,V_url
initWithAttachmentHandlingDelegate:context:
context
setContext:
_context
Tq,N,V_context
initWithPrintPageRenderer:
pageRenderer
setPageRenderer:
_pageRenderer
T@"UIPrintPageRenderer",&,N,V_pageRenderer
initWithContentItem:type:networkUsage:
progress
future
addAccessedByInvokerWithID:
hasBeenAccessedByInvokerWithID:
resume
networkUsage
setNetworkUsage:
contentItem
setContentItem:
type
setType:
topLevelProgress
setTopLevelProgress:
contentRequestPromise
setContentRequestPromise:
contentRequestProgress
setContentRequestProgress:
invokerIDs
setInvokerIDs:
_networkUsage
_contentItem
_type
_topLevelProgress
_contentRequestPromise
_contentRequestProgress
_invokerIDs
T@"<EMContentItem>",&,N,V_contentItem
T@"NSString",&,N,V_type
Tq,N,V_networkUsage
T@"NSProgress",&,N,V_topLevelProgress
T@"EFPromise",&,N,V_contentRequestPromise
T@"NSProgress",&,N,V_contentRequestProgress
T@"EFLocked",&,N,V_invokerIDs
T@"EFFuture",R,N
T@"NSProgress",R,N
updateToInlinePDFAttachmentIfNeeded:
fractionCompleted
_representationTypeForContentItem:
initWithWebView:contentItemHandler:
setContentItems:
associateElementID:withContentID:
associateElementID:withWKAttachmentID:
contentItemForElementID:
contentItemForContentID:
_computeMailDropProperties
mailDropBannerMetadata
noteDidFinishDocumentLoadForURL:
noteDidFailLoadingResourceWithURL:
attachmentWasTappedWithElementID:rect:view:
displayViewerForContentItem:rect:view:
showMenuForContentItem:rect:view:
futureForContentItem:download:
_futureForContentItem:networkUsage:invokerID:previouslyInvoked:progress:
updateDragItemProvider:forElementID:
_injectAttachmentViewForElementWithSourceAttributeValue:forContentItem:
displayStateForContentItem:
setDisplayState:forContentItem:
_updateProgressFraction:forContentItem:
setPercentCompleted:forContentItem:
inlineImageFinishedDownloading:
startDownloadForContentItem:userInitiated:
downloadAllMailDropAttachments
webView
setWebView:
contentItems
representationHandler
setRepresentationHandler:
totalMailDropDownloadSize
setTotalMailDropDownloadSize:
allMailDropsDownloaded
setAllMailDropsDownloaded:
maildropProgressHandler
setMaildropProgressHandler:
_elementIDToContentID
_elementIDToWKAttachmentID
_contentIDToTask
_inlinedImageContentIDs
_didComputeMailDropProperties
_totalUnstartedMailDropDownloadSize
_attachmentsScheduler
_totalMailDropProgress
_webProcessProxy
_allMailDropsDownloaded
_mailDropBannerMetadata
_webView
_contentItems
_representationHandler
_totalMailDropDownloadSize
_maildropProgressHandler
T@"WKWebView",&,N,V_webView
T@"NSArray",&,N,V_contentItems
T@"<ContentRepresentationHandlingDelegate>",W,N,V_representationHandler
T@"EMMailDropMetadata",R,N,V_mailDropBannerMetadata
TQ,N,V_totalMailDropDownloadSize
TB,N,V_allMailDropsDownloaded
T@?,C,N,V_maildropProgressHandler
dealloc
signpostLog
cancel
signpostID
ef_publicDescription
T@"NSString",R,C,N
initWithMessage:
initWithMessage:includeSuggestions:
initWithMessage:includeSuggestions:representationType:delegate:
initWithMessageList:itemIdentifier:includeSuggestions:
initWithMessageList:itemIdentifier:includeSuggestions:representationType:delegate:
updateItemID:messageList:
message
contentRepresentationFuture
start
retry
resultIfAvailable
waitForResult
hasStarted
isFinished
state
onScheduler:addLoadObserver:
addLoadObserver:
itemID
messageFuture
_cancelationToken
_inputObservable
_contentObservable
_futureContentRepresentation
_hasError
_retyAttempt
_includeSuggestionItems
_contentRepresentationLock
_contentRepresentationType
_itemID
_messageFuture
T@"EMMessage",R,N
T@"<EMCollectionItemID>",R,N,V_itemID
T@"EFFuture",R,N,V_messageFuture
TB,R
contentObjectID:generateHTMLSnippetsForRelatedContentItems:completionHandler:
contentObjectID:generateHTMLSnippetsForMailDropContentItems:completionHandler:
contentObjectID:placeholderHTMLForEmptyContentWithCompletionHandler:
isRead
setRead:
isFlagged
setFlagged:
flagColors
setFlagColors:
isReplied
setReplied:
isForwarded
setForwarded:
isVIP
setVIP:
isNotify
setNotify:
isMute
setMute:
read
TB,N,GisRead
flagged
TB,N,GisFlagged
T@"NSIndexSet",C,N
replied
TB,N,GisReplied
forwarded
TB,N,GisForwarded
TB,N,GisVIP
notify
TB,N,GisNotify
mute
TB,N,GisMute
isBlockedSender
setBlockedSender:
unsubscribeType
setUnsubscribeType:
hasAttachments
setHasAttachments:
date
setDate:
displayDate
setDisplayDate:
readLaterDate
setReadLaterDate:
sendLaterDate
setSendLaterDate:
followUp
setFollowUp:
blockedSender
TB,N,GisBlockedSender
Tq,N
T@"NSDate",C,N
T@"EMFollowUp",C,N
setItemID:
dateSent
setDateSent:
setSubject:
mailbox
setMailbox:
senderList
setSenderList:
toList
setToList:
ccList
setCcList:
bccList
setBccList:
atomManager
setAtomManager:
brandIndicatorFuture
setBrandIndicatorFuture:
T@"<EMCollectionItemID>",C,N
T@"ECSubject",C,N
T@"MFMailboxUid",C,N
T@"NSArray",C,N
T@"MFAddressAtomStatusManager",&,N
T@"EFFuture",&,N
copyWithZone:
initWithBuilder:
initWithItemBuilder:
modelObservable
updatedModelWithBuilder:
updatedFlagsModelWithBuilder:
updatedModelWithMessage:brandIndicatorFuture:
observableObserver
setObservableObserver:
_dateSent
_mailbox
_senderList
_toList
_ccList
_bccList
_atomManager
_brandIndicatorFuture
_observableObserver
T@"<EMCollectionItemID>",C,N,V_itemID
T@"NSDate",C,N,V_dateSent
T@"ECSubject",C,N,V_subject
T@"MFMailboxUid",C,N,V_mailbox
T@"NSArray",C,N,V_senderList
T@"NSArray",C,N,V_toList
T@"NSArray",C,N,V_ccList
T@"NSArray",C,N,V_bccList
T@"MFAddressAtomStatusManager",&,N,V_atomManager
T@"EFObservable<EFObserver>",&,N,V_observableObserver
T@"EFFuture",&,N,V_brandIndicatorFuture
T@"EFObservable",R,N
isUnscreenedSender
setUnscreenedSender:
_read
_flagged
_replied
_forwarded
_VIP
_notify
_mute
_blockedSender
_hasAttachments
_unscreenedSender
_flagColors
_readLaterDate
_sendLaterDate
_displayDate
_followUp
_unsubscribeType
_date
TB,N,GisRead,V_read
TB,N,GisFlagged,V_flagged
T@"NSIndexSet",C,N,V_flagColors
TB,N,GisReplied,V_replied
TB,N,GisForwarded,V_forwarded
TB,N,GisVIP,V_VIP
TB,N,GisNotify,V_notify
TB,N,GisMute,V_mute
T@"NSDate",C,N,V_readLaterDate
T@"NSDate",C,N,V_sendLaterDate
T@"NSDate",C,N,V_displayDate
T@"EMFollowUp",C,N,V_followUp
TB,N,GisBlockedSender,V_blockedSender
Tq,N,V_unsubscribeType
TB,N,V_hasAttachments
T@"NSDate",C,N,V_date
unscreenedSender
TB,N,GisUnscreenedSender,V_unscreenedSender
_trustDidChange:
_legacyAccountsDidChange:
_vipSendersDidChange:
addressBookManager:addressBookDidChange:
addressBookPreferencesChangedForAddressBookManager:
initWithAccount:
_commonInit
setAtomProvider:
_invalidateAtoms
updateWithSecurityInformation:
otherSigners
updateTrustForDisplayedAtoms
_updateOtherSignersList:
_updateAtomsInList:
actionForTrustInformation:
_updateVIPStatus
_atomContainsVIPSender:
atomProvider
account
setAccount:
legacyAccount
setLegacyAccount:
securityInformation
setSecurityInformation:
smimeError
setSMIMEError:
_atomProvider
_account
_legacyAccount
_securityInformation
_smimeError
T@"MFMessageLoadingContext",W,N,V_context
T@"EMAccount",&,N,V_account
T@"MailAccount",&,N,V_legacyAccount
T@"EMSecurityInformation",&,N,V_securityInformation
T@"NSError",&,N,SsetSMIMEError:,V_smimeError
T@"<MFAddressAtomProvider>",W,N,V_atomProvider
initWithUserProfileProvider:addressBookManager:
stringForObjectValue:
stringFromAddressAddressList:
stringFromEmailAddressList:
attributedStringFromEmailAddressList:
_invalidateCache
_addressCommentForAddressList:
_attributedAddressCommentForAddressList:
userProfileProvider
listFormatter
commentCache
setCommentCache:
addressCache
setAddressCache:
attributedAddressCache
setAttributedAddressCache:
addressBookManager
setAddressBookManager:
_userProfileProvider
_listFormatter
_commentCache
_addressCache
_attributedAddressCache
_addressBookManager
T@"<EMUserProfileProvider>",R,N,V_userProfileProvider
T@"MFLocalizationListFormatter",R,N,V_listFormatter
T@"EFLazyCache",&,N,V_commentCache
T@"EFLazyCache",&,N,V_addressCache
T@"EFLazyCache",&,N,V_attributedAddressCache
T@"MFAddressBookManager",&,N,V_addressBookManager
displayMessageUsingViewModel:
initWithType:itemID:delegate:
editButton
bannerLabel
dateLabel
_editButton
_bannerLabel
_dateLabel
T@"<EMCollectionItemID>",&,N,V_itemID
T@"<MFBannerViewDelegate>",W,N,V_delegate
Tq,R,N,V_type
T@"UIButton",R,N,V_editButton
T@"UILabel",R,N,V_bannerLabel
T@"UILabel",R,N,V_dateLabel
primaryAction
dismissAction
_titleControlTapped:
_bannerDismissed:
T@"<MFBlockedSenderBannerViewDelegate>",W,N,V_delegate
cardActionWithTitle:shortTitle:imageName:tintColor:handler:
cardActionWithTitle:shortTitle:imageName:tintColor:handlerEnabled:handler:
executeHandlerIfEnabled
executeHandler
imageName
setImageName:
tintColor
setTintColor:
title
setTitle:
shortTitle
setShortTitle:
handlerEnabled
setHandlerEnabled:
handler
setHandler:
shouldDismissCardBeforeExecuteHandler
setShouldDismissCardBeforeExecuteHandler:
shouldDeferDismissHandler
setShouldDeferDismissHandler:
dismissHandler
setDismissHandler:
_handlerEnabled
_shouldDismissCardBeforeExecuteHandler
_shouldDeferDismissHandler
_imageName
_tintColor
_title
_shortTitle
_handler
_dismissHandler
T@"NSString",&,N,V_imageName
T@"UIColor",&,N,V_tintColor
T@"NSString",C,N,V_title
T@"NSString",C,N,V_shortTitle
TB,N,V_handlerEnabled
T@?,C,N,V_handler
TB,N,V_shouldDismissCardBeforeExecuteHandler
TB,N,V_shouldDeferDismissHandler
T@?,C,N,V_dismissHandler
flagColor
setFlagColor:
_flagColor
T@"NSNumber",&,N,V_flagColor
_fontMetricCacheDidInvalidate:
setLayoutMargins:
layoutSubviews
layoutMarginsDidChange
setBounds:
traitCollectionDidChange:
prefixFont
nameFont
pointerInteraction:regionForRequest:defaultRegion:
pointerInteraction:styleForRegion:
pointerInteraction:willEnterRegion:animator:
pointerInteraction:willExitRegion:animator:
addConversationSearchOverlay
removeConversationSearchOverlay
T@"UIFont",R,N
findOverlayView
_updateBackgroundView
_updateSeeMoreButton
setSeeMoreButtonHidden:
isSeeMoreButtonHidden
setSeeMoreButtonAlpha:
seeMoreButtonAlpha
setMessageContainsBlockQuotes:
seeMoreButtonHeight
setDisplayMetrics:
addTarget:action:toButton:
showAttributionWithSenderName:
hideAttribution
pointInside:withEvent:
layoutSeeMoreButton
shouldHideStickyFooterView
layoutActionButtonWithBounds:
_updateButtons
moveOriginYByOffset:
backgroundView
setBackgroundView:
messageContainsBlockQuotes
revealActionsButton
setRevealActionsButton:
displayMetrics
senderName
setSenderName:
allowsPointerSnapping
setAllowsPointerSnapping:
defaultRevealActionButtonOriginY
setDefaultRevealActionButtonOriginY:
defaultSeeMoreButtonOriginY
setDefaultSeeMoreButtonOriginY:
contactStore
setContactStore:
currentYOffset
setCurrentYOffset:
setFindOverlayView:
seeMoreButton
setSeeMoreButton:
_messageContainsBlockQuotes
_allowsPointerSnapping
_backgroundView
_revealActionsButton
_displayMetrics
_senderName
_defaultRevealActionButtonOriginY
_defaultSeeMoreButtonOriginY
_contactStore
_currentYOffset
_findOverlayView
_seeMoreButton
Td,N,V_defaultRevealActionButtonOriginY
Td,N,V_defaultSeeMoreButtonOriginY
T@"EMCachingContactStore",&,N,V_contactStore
Td,N,V_currentYOffset
TB,R,N
T@"ConversationSearchOverlayView",&,N,V_findOverlayView
T@"UIButton",&,N,V_revealActionsButton
T@"UIButton",&,N,V_seeMoreButton
T@"NSString",C,N,V_senderName
T@"UIVisualEffectView",&,N,V_backgroundView
seeMoreButtonHidden
TB,N,GisSeeMoreButtonHidden
Td,N
Td,R,N
TB,N,V_messageContainsBlockQuotes
T@"<MFMessageFooterViewDelegate>",W,N,V_delegate
T@"MFMessageDisplayMetrics",&,N,V_displayMetrics
TB,N,V_allowsPointerSnapping
bannerWithFrame:isPlainText:remainingBytes:
titleString
actionStringIsDownloading:
reloadData
requestLoad
T@"NSString",R
T@"<MFHasMoreContentBannerViewDelegate>",W,N,V_delegate
initWithFrame:remainingBytes:
remainingBytes
setRemainingBytes:
_remainingBytes
TQ,V_remainingBytes
T@"<MFHideMyEmailBannerViewDelegate>",W,N,V_delegate
sharedCache
tiltedTabSkyViewEnabled
UIDebuggingEnabled
setTiltedTabSkyViewEnabled:
setUIDebuggingEnabled:
_tiltedTabSkyViewEnabled
_UIDebuggingEnabled
TB,N,V_tiltedTabSkyViewEnabled
TB,N,V_UIDebuggingEnabled
initWithFrame:blockedContentTypes:blockingReason:
setBlockedContentTypes:
_updateBannerText
enablePrivacyProtectionAlertForAccount
actionTitle
blockedContentTypes
_blockingReason
_blockedContentTypes
T@"<MFLoadBlockedContentBannerViewDelegate>",W,N,V_delegate
TQ,N,V_blockedContentTypes
initWithFrame:failureReason:
_dismissed:
T@"<MFLoadFailedProxyContentBannerViewDelegate>",W,N,V_delegate
localizedStringFromList:
attributedLocalizedStringFromList:
contentSizeCategoryDidChangeNotification:
updateConstraints
startDownload:
setSeparatorIsHidden:
setBannerState:
_hasDataLocally
_setupDownloadLabel
_setupExpirationLabel
_setupDownloadIcon
setDownloadProgress:
_shouldDisplayProgress
shouldPresent
metaData
setMetaData:
bannerState
downloadProgress
_hasLoaded
_expirationLabel
_downloadLabel
_downloadIcon
_progressView
_iconWrapperWidth
_labelFirstBaseline
_expirationFirstBaseline
_expirationBottom
_metaData
_bannerState
_downloadProgress
T@"EMMailDropMetadata",&,N,V_metaData
TQ,N,V_bannerState
Td,N,V_downloadProgress
T@"<MFMailDropBannerDelegate>",W,N,V_delegate
sharedRegistry
URLForLoadingContext:scheme:
loadingContextForURL:
storage
_lock
_storage
T@"NSMapTable",R,N,V_storage
initWithRequest:cachedResponse:client:
initialize
registry
setRegistry:
scheme
URLForLoadingContext:
canInitWithRequest:
canonicalRequestForRequest:
requestIsCacheEquivalent:toRequest:
T@"_MFMessageContentURLProtocolRegistry",&,N
_cachedResponseWithData:error:
startLoading
stopLoading
_didLoadContentEvent:error:
token
loadingContext
promise
setPromise:
_token
_loadingContext
_promise
T@"EFCancelationToken",R,V_token
T@"MFMessageLoadingContext",R,V_loadingContext
T@"EFPromise",&,N,V_promise
_isMatchingTapGestureRecognizer:
canBePreventedByGestureRecognizer:
canPreventGestureRecognizer:
messageContentView:didChangeSelectedHTML:
_fontSizeDidChange:
_darkerSystemColorsStatusDidChange:
messageContentViewDidFinishLoadingMessage:
messageContentViewDidFinishFirstPaint:
messageContentViewDidDisplayContent:success:
messageContentView:didFinishRenderingWithHeight:
messageContentView:expandQuoteAtCollapsedOffset:expandedOffset:
messageContentViewWillBeginZoomingMessage:
messageContentView:didEndZoomingMessageWithOffset:
messageContentView:didTapRevealActionsButton:
messageContentView:loadingIndicatorDidChangeVisibility:
messageContentView:didLoadSecurityInformation:
messageContentView:webViewDidTerminateWithReason:
contentItemHandlingDelegateForMessageContentView:
setFrame:
selectAll:
canPerformAction:withSender:
_revealActionsButtonTapped
_seeMoreButtonTapped
_updateWebViewPaddingConstants
absoluteString
messageContentView:scrollToRect:
dismissPresentedViewController:
_handleBlockSenderListChanged:
adaptivePresentationStyleForPresentationController:
adaptivePresentationStyleForPresentationController:traitCollection:
presentationController:prepareAdaptivePresentationController:
presentationController:viewControllerForAdaptivePresentationStyle:
presentationController:willPresentWithAdaptiveStyle:transitionCoordinator:
presentationControllerShouldDismiss:
presentationControllerWillDismiss:
presentationControllerDidDismiss:
presentationControllerDidAttemptToDismiss:
prepareForPopoverPresentation:
popoverPresentationControllerShouldDismissPopover:
popoverPresentationControllerDidDismissPopover:
popoverPresentationController:willRepositionPopoverToRect:inView:
_webView:didStartInputSession:
_webView:willSubmitFormValues:userObject:submissionHandler:
_webView:focusShouldStartInputSession:
_webView:decidePolicyForFocusedElement:
_webView:accessoryViewCustomButtonTappedInFormInputSession:
_webView:insertTextSuggestion:inInputSession:
_webView:willStartInputSession:
_webView:focusRequiresStrongPasswordAssistance:
_webViewAdditionalContextForStrongPasswordAssistance:
_webView:shouldRevealFocusOverlayForInputSession:
_webView:focusedElementContextViewHeightForFittingSize:inputSession:
_webView:focusedElementContextViewForInputSession:
webView:decidePolicyForNavigationAction:decisionHandler:
webView:decidePolicyForNavigationAction:preferences:decisionHandler:
webView:decidePolicyForNavigationResponse:decisionHandler:
webView:didStartProvisionalNavigation:
webView:didReceiveServerRedirectForProvisionalNavigation:
webView:didFailProvisionalNavigation:withError:
webView:didCommitNavigation:
webView:didFinishNavigation:
webView:didFailNavigation:withError:
webView:didReceiveAuthenticationChallenge:completionHandler:
webViewWebContentProcessDidTerminate:
webView:authenticationChallenge:shouldAllowDeprecatedTLS:
webView:navigationAction:didBecomeDownload:
webView:navigationResponse:didBecomeDownload:
_webView:navigation:didFailProvisionalLoadInSubframe:withError:
_webView:willPerformClientRedirectToURL:delay:
_webView:didPerformClientRedirectFromURL:toURL:
_webViewDidCancelClientRedirect:
_webView:navigationDidFinishDocumentLoad:
_webView:navigation:didSameDocumentNavigation:
_webView:renderingProgressDidChange:
_webViewWebProcessDidCrash:
_webViewWebProcessDidBecomeResponsive:
_webViewWebProcessDidBecomeUnresponsive:
_webCryptoMasterKeyForWebView:
_webView:authenticationChallenge:shouldAllowLegacyTLS:
_webView:didNegotiateModernTLSForURL:
_webView:contextMenuDidCreateDownload:
_webViewDidBeginNavigationGesture:
_webViewDidEndNavigationGesture:withNavigationToBackForwardListItem:
_webViewWillEndNavigationGesture:withNavigationToBackForwardListItem:
_webView:willSnapshotBackForwardListItem:
_webViewDidRemoveNavigationGestureSnapshot:
_webView:decidePolicyForNavigationAction:preferences:userInfo:decisionHandler:
_webView:didStartProvisionalNavigation:userInfo:
_webView:didFailNavigation:withError:userInfo:
_webView:URL:contentRuleListIdentifiers:notifications:
_webView:contentRuleListWithIdentifier:performedAction:forURL:
_webView:webContentProcessDidTerminateWithReason:
_webView:didStartProvisionalLoadWithRequest:inFrame:
_webView:didFailProvisionalLoadWithRequest:inFrame:withError:
_webView:didCommitLoadWithRequest:inFrame:
_webView:didFailLoadWithRequest:inFrame:withError:
_webView:didFinishLoadWithRequest:inFrame:
_webView:didStartLoadForQuickLookDocumentInMainFrameWithFileName:uti:
_webView:didFinishLoadForQuickLookDocumentInMainFrame:
_webViewDidRequestPasswordForQuickLookDocument:
_webView:willGoToBackForwardListItem:inPageCache:
_webView:decidePolicyForSOAuthorizationLoadWithCurrentPolicy:forExtension:completionHandler:
webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:
webViewDidClose:
webView:runJavaScriptAlertPanelWithMessage:initiatedByFrame:completionHandler:
webView:runJavaScriptConfirmPanelWithMessage:initiatedByFrame:completionHandler:
webView:runJavaScriptTextInputPanelWithPrompt:defaultText:initiatedByFrame:completionHandler:
webView:requestMediaCapturePermissionForOrigin:initiatedByFrame:type:decisionHandler:
webView:requestDeviceOrientationAndMotionPermissionForOrigin:initiatedByFrame:decisionHandler:
webView:shouldPreviewElement:
webView:previewingViewControllerForElement:defaultActions:
webView:commitPreviewingViewController:
webView:contextMenuConfigurationForElement:completionHandler:
webView:contextMenuWillPresentForElement:
webView:contextMenuForElement:willCommitWithAnimator:
webView:contextMenuDidEndForElement:
webView:showLockdownModeFirstUseMessage:completionHandler:
_webView:decideDatabaseQuotaForSecurityOrigin:currentQuota:currentOriginUsage:currentDatabaseUsage:expectedUsage:decisionHandler:
_webView:decideDatabaseQuotaForSecurityOrigin:databaseName:displayName:currentQuota:currentOriginUsage:currentDatabaseUsage:expectedUsage:decisionHandler:
_webView:decideWebApplicationCacheQuotaForSecurityOrigin:currentQuota:totalBytesNeeded:decisionHandler:
_webView:printFrame:
_webView:printFrame:pdfFirstPageSize:completionHandler:
_webViewClose:
_webViewFullscreenMayReturnToInline:
_webViewDidEnterFullscreen:
_webViewDidExitFullscreen:
_webViewRequestPointerLock:
_webViewDidRequestPointerLock:completionHandler:
_webViewDidShowSafeBrowsingWarning:
_webViewDidLosePointerLock:
_webView:hasVideoInPictureInPictureDidChange:
_webView:shouldAllowPDFAtURL:toOpenFromFrame:completionHandler:
_webView:imageOrMediaDocumentSizeChanged:
_dataDetectionContextForWebView:
_webView:includeSensitiveMediaDeviceDetails:
_webView:requestDisplayCapturePermissionForOrigin:initiatedByFrame:withSystemAudio:decisionHandler:
_webView:requestUserMediaAuthorizationForDevices:url:mainFrameURL:decisionHandler:
_webView:checkUserMediaPermissionForURL:mainFrameURL:frameIdentifier:decisionHandler:
_webView:mediaCaptureStateDidChange:
_webView:dragDestinationActionMaskForDraggingInfo:
_webView:createWebViewWithConfiguration:forNavigationAction:windowFeatures:completionHandler:
_webView:requestGeolocationPermissionForFrame:decisionHandler:
_webView:requestGeolocationPermissionForOrigin:initiatedByFrame:decisionHandler:
_webView:queryPermission:forOrigin:completionHandler:
_webView:runBeforeUnloadConfirmPanelWithMessage:initiatedByFrame:completionHandler:
_webView:editorStateDidChange:
_webView:didRemoveAttachment:
_webView:didInsertAttachment:withSource:
_webView:didInvalidateDataForAttachment:
_webView:didResignInputElementStrongPasswordAppearanceWithUserInfo:
_webView:requestStorageAccessPanelForDomain:underCurrentDomain:completionHandler:
_webView:didChangeFontAttributes:
_webView:takeFocus:
_webView:requestWebAuthenticationNoGestureForOrigin:completionHandler:
_webView:runWebAuthenticationPanel:initiatedByFrame:completionHandler:
_webView:handleAutoplayEvent:withFlags:
_webView:willShareActivityItems:
_webView:requestSpeechRecognitionPermissionForOrigin:decisionHandler:
_webViewDidEnableInspectorBrowserDomain:
_webViewDidDisableInspectorBrowserDomain:
_webView:requestPermissionForXRSessionOrigin:mode:grantedFeatures:consentRequiredFeatures:consentOptionalFeatures:completionHandler:
_webView:startXRSessionWithCompletionHandler:
_webView:requestNotificationPermissionForSecurityOrigin:decisionHandler:
_webViewEndXRSession:
_webView:requestCookieConsentWithMoreInfoHandler:decisionHandler:
_webView:decidePolicyForModalContainer:decisionHandler:
_webView:shouldIncludeAppLinkActionsForElement:
_webView:actionsForElement:defaultActions:
_webView:didNotHandleTapAsClickAtPoint:
_webView:requestGeolocationAuthorizationForURL:frame:decisionHandler:
_webView:fileUploadPanelContentIsManagedWithInitiatingFrame:
_webView:previewViewControllerForURL:
_webView:commitPreviewedViewController:
_webView:willPreviewImageWithURL:
_webView:commitPreviewedImageWithURL:
_webView:didDismissPreviewViewController:committing:
_webView:didDismissPreviewViewController:
_webView:contextMenuConfigurationForElement:completionHandler:
_webView:contextMenuForElement:willCommitWithAnimator:
_webView:contextMenuWillPresentForElement:
_webView:contextMenuContentPreviewForElement:
_webView:contextMenuDidEndForElement:
_webView:mouseDidMoveOverElement:withFlags:userInfo:
_webView:showCustomSheetForElement:
_webView:alternateActionForURL:
_attachmentListForWebView:
_attachmentListForWebView:sourceIsManaged:
_webView:indexIntoAttachmentListForElement:
_webView:finalObscuredInsetsForScrollView:withVelocity:targetContentOffset:
_contextMenuHintPreviewContainerViewForWebView:
_webView:previewViewControllerForURL:defaultActions:elementInfo:
_webView:previewViewControllerForAnimatedImageAtURL:defaultActions:elementInfo:imageSize:
_presentingViewControllerForWebView:
_webView:getAlternateURLFromImage:completionHandler:
_webView:alternateURLFromImage:userInfo:
_webView:previewViewControllerForImage:alternateURL:defaultActions:elementInfo:
_webView:adjustedDataInteractionItemProviders:
_webView:adjustedDataInteractionItemProvidersForItemProvider:representingObjects:additionalData:
_webView:performDataInteractionOperationWithItemProviders:
_webView:dataInteraction:sessionWillBegin:
_webView:dataInteraction:session:didEndWithOperation:
_webView:dataInteractionOperationWasHandled:forSession:itemProviders:
_webView:willUpdateDataInteractionOperationToOperation:forSession:
_webView:willUpdateDropProposalToProposal:forSession:
_webView:previewForLiftingItem:session:
_webView:previewForCancellingItem:withDefault:
_webView:willPerformDropWithSession:
_webView:dataOwnerForDropSession:
_webView:dataOwnerForDragSession:
_webView:didChangeSafeAreaShouldAffectObscuredInsets:
_webView:didPresentFocusedElementViewController:
_webView:didDismissFocusedElementViewController:
_webView:gestureRecognizerCouldPinch:
_webViewCanBecomeFocused:
_webView:touchEventsMustRequireGestureRecognizerToFail:
didTapHideMyEmailBannerView:
didDismissHideMyEmailBannerView:
didTapHasMoreContentBannerView:
loadBlockedContentBannerDidTriggerLoad:
presentViewController:
loadFailedProxyContentBannerDidTriggerLoad:
loadFailedProxyContentBannerWasDismissed:
didTapBlockedSenderBannerView:
didDismissBlockedSenderBannerView:
headerViewDidChangeHeight:
footerViewDidChangeHeight:
mailDropBannerDidTriggerDownload:
mf_setAsSourceForPopoverPresentationController:
mf_setAsSourceWithExtendedRectForPopoverPresentationController:
mf_setAsTargetedSourceOnSceneConfiguration:
scrollViewDidScroll:
scrollViewDidZoom:
scrollViewWillBeginDragging:
scrollViewWillEndDragging:withVelocity:targetContentOffset:
scrollViewDidEndDragging:willDecelerate:
scrollViewWillBeginDecelerating:
scrollViewDidEndDecelerating:
scrollViewDidEndScrollingAnimation:
viewForZoomingInScrollView:
scrollViewWillBeginZooming:withView:
scrollViewDidEndZooming:withView:atScale:
scrollViewShouldScrollToTop:
scrollViewDidScrollToTop:
scrollViewDidChangeAdjustedContentInset:
webProcessDidFailLoadingResourceWithURL:
webProcessDidFinishDocumentLoadForURL:andRequestedRemoteURLs:
webProcessDidFinishLoadForURL:
webProcessDidBlockLoadingResourceWithURL:
webProcessFailedToLoadResourceWithProxyForURL:failureReason:
webProcessDidCreateBrowserContextControllerLoadDelegate
prepareForReuse
webViewConstants
setContentRequest:
_mailboxForBanner:
setPreviousContentSnapshot:
contentRepresentationIfAvailable
contentRepresentation
sceneMovedToForeground
_setupWebProcessLocalizedStrings
_layoutFooterView
_layoutLoadingView
_viewportWidth
_firstResponderIsInWebView
setAutomaticallyCollapseQuotedContent:reloadIfNeeded:
setAutomaticallyCollapseQuotedContent:
setShowMessageFooter:
footerView
setMessageBlockingReason:
setInitialScale:
_updateMinimumFontSize
_bodyFont
_setNeedsPaddingConstantsUpdate
_styleSheetWithPadding:useWideLayout:
_reloadUserStyleSheets
clearMessage
_clearAllBannersAnimated:
updateForRedisplay
_addLoadingSubview:
_removeLoadingSubview:
showDelayedProgressUI
isLoadingIndicatorVisible
setLoadingIndicatorVisible:
setLoadingIndicatorVisible:animated:
reload
clearSelectedHTML
scrollView
contentRequestDidReceiveContentRepresentation:error:
_requestWebViewLoadWithRepresentation:
_requestWebViewLoadWithLoadingContext:
_setRemoteContentToLoadWithoutProxy
_triggerWebViewLoad
_triggerWebViewLoadWithoutShowingContentRepresentation
_loadBlockedMessageContactWarningWithRepresentation:
_loadBlockedMessageContactWarning
generateSnapshotImageWithCompletion:
_libraryMessage
_foundImageCIDAttachments:
_displayDismissibleAttachmentErrorWithTitle:message:
_alertMailDropDownloadIsTooLargeForCell:
_handleAttachmentTapMessage:
_adjustedRectForWebRect:
_convertDictionaryToRect:
_expandQuoteWithCollapsedBlockquoteOffset:expandedOffset:
_quotedContentAttributionForMessage:
_showLoadFailedProxyContentBannerIfNeeded
_configureTrustEvaluationsForSignersInSecurityInformation:
_processDataDetectionMetricsFromResults:
setHasVisibleContent:
_objectContainsNonEmptyString:
_attachmentPreviewsFromData:
_webView:previewItem:
_updateFileWrapperForAttachment:contentID:
mayShareToUnmanaged
_allAttachmentsArePhotosOrVideos
_contextMenuConfigurationForAttachment:
_contentItemForElement:
downloadFutureForContentItem:
_adjustWebViewInsetsToAccomodateHeaderAndFooter
_adjustHeaderOffsetForZoom
_resetHeaderOffsetForZoom
_beginObservingContentHeight
_notifyDelegateScrollViewSizeChanged:
_stopObservingContentHeight
_downloadAllMailDropAttachments
viewPrintFormatter
loadHasMoreContentBannerIfNecessary
_addHasMoreContentBannerWithRemainingBytes:
_clearHasMoreContentBannerAnimated:
_addHideMyEmailBannerIfNeeded
_clearLoadRemoteImagesBannerAnimated:
loadBlockedContent
_reloadWithPartiallyEncryptedMessageAllowed
_reloadWithRemoteContentAllowed
_reevaluateTrustWithNetworkAccessAllowed
_clearLoadFailedProxyContentBannerAnimated:
_showModalViewController:presentationSource:
_showModalViewController:presentationSource:forceNavigationController:
presentedControllerDoneButtonItem
setSuppressScrolling:
setContentPaddingFollowsLayoutMargins:
_logRequestFinishWithSuccess:
_addBlockedSenderBannerIfNeeded
_clearBlockedSenderBannerAnimated:
_observeBlockedSenderListChangedNotification
didBeginTextSearch
didEndTextSearch
clearAllDecoratedFoundText
showSearchResultsAtRange:usingStyle:
requestRectForFoundTextRange:completionHandler:
dataSource
setDataSource:
contentRequest
setLoadingContext:
initialContentOffset
setInitialContentOffset:
selectedHTML
setSelectedHTML:
headerView
headerViewSubjectBlock
setHeaderViewSubjectBlock:
automaticallyCollapseQuotedContent
showMessageFooter
shouldArchiveByDefault
setShouldArchiveByDefault:
messageBlockingReason
previousContentSnapshot
initiallyZoomsToShowAllContent
setInitiallyZoomsToShowAllContent:
suppressScrolling
contentPaddingFollowsLayoutMargins
hasVisibleContent
showsBanners
setShowsBanners:
isZoomEnabled
setZoomEnabled:
mailboxProvider
setMailboxProvider:
daemonInterface
setDaemonInterface:
brandIndicatorProvider
setBrandIndicatorProvider:
attachments
setAttachments:
loadingIndicatorCancelable
setLoadingIndicatorCancelable:
loadingView
setLoadingView:
initialScale
webViewLoadingController
setWebViewLoadingController:
attachmentDragPreviews
setAttachmentDragPreviews:
allowLoadOfBlockedMessageContent
setAllowLoadOfBlockedMessageContent:
contentRepresentationError
setContentRepresentationError:
showingError
setShowingError:
loadingSpinnerTailspinToken
setLoadingSpinnerTailspinToken:
trustConfigurationScheduler
bucketPreferenceToken
setBucketPreferenceToken:
_loadingCancelable
_relatedItemsHelper
_headerView
_mailDropBanner
_loadHasMoreContentBanner
_hideMyEmailBanner
_loadImagesHeaderBlock
_blockedSenderBanner
_loadFailedProxyContentBanner
_previousContentSnapshotWrapperView
_presentedControllerDoneButtonItem
_activatedAttachmentRect
_contentSizeObservation
_suppressContentSizeNotifications
_suppressContentSizeNotificationsUntilFirstPaint
_originalZoomInsets
_paddingConstantsNeedUpdate
_footerView
_inFlightURLs
_allRemoteURLs
_failedProxyURLs
_webProcessCrashCount
_backgroundWebProcessCrashCount
_flags
_automaticallyCollapseQuotedContent
_showMessageFooter
_shouldArchiveByDefault
_initiallyZoomsToShowAllContent
_suppressScrolling
_contentPaddingFollowsLayoutMargins
_hasVisibleContent
_showsBanners
_zoomEnabled
_allowLoadOfBlockedMessageContent
_showingError
_isTextSearchActive
_dataSource
_contentRequest
_selectedHTML
_headerViewSubjectBlock
_messageBlockingReason
_previousContentSnapshot
_mailboxProvider
_daemonInterface
_brandIndicatorProvider
_attachments
_loadingIndicatorCancelable
_loadingView
_initialScale
_webViewLoadingController
_attachmentDragPreviews
_contentRepresentationError
_loadingSpinnerTailspinToken
_trustConfigurationScheduler
_bucketPreferenceToken
_initialContentOffset
T@"NSArray",C,V_attachments
T@"NSString",C,N,V_selectedHTML
T@"<EFCancelable>",&,N,V_loadingIndicatorCancelable
T@"MFMessageContentLoadingView",&,N,V_loadingView
loadingIndicatorVisible
TB,N,GisLoadingIndicatorVisible
Td,N,V_initialScale
TB,N,V_hasVisibleContent
T@"MFWebViewLoadingController",&,N,V_webViewLoadingController
T@"WKWebView",R,N
T@"MFWebViewDictionary",R,N
T@"NSDictionary",&,N,V_attachmentDragPreviews
TB,N,V_allowLoadOfBlockedMessageContent
T@"EMContentRepresentation",R
T@"NSError",&,N,V_contentRepresentationError
TB,N,V_showingError
T@"<EFCancelable>",&,N,V_loadingSpinnerTailspinToken
T@"<EFScheduler>",R,N,V_trustConfigurationScheduler
T@"<EFCancelable>",&,N,V_bucketPreferenceToken
T@"<MFMessageContentViewDelegate>",W,N,V_delegate
T@"<MFMessageContentViewDataSource>",W,N,V_dataSource
T@"MessageContentRepresentationRequest",&,N,V_contentRequest
T@"MFMessageLoadingContext",&,N,V_loadingContext
T@"UIScrollView",R,N
T{CGPoint=dd},N,V_initialContentOffset
T@"MFMessageHeaderView",R,N,V_headerView
T@"UIView",&,N,V_headerViewSubjectBlock
T@"MFConversationItemFooterView",R,N
TB,N,V_automaticallyCollapseQuotedContent
TB,N,V_showMessageFooter
TB,N,V_shouldArchiveByDefault
Tq,N,V_messageBlockingReason
T@"UIView",&,N,V_previousContentSnapshot
T@"NSArray",R
TB,N,V_initiallyZoomsToShowAllContent
TB,N,V_suppressScrolling
TB,N,V_contentPaddingFollowsLayoutMargins
TB,N,V_showsBanners
zoomEnabled
TB,N,GisZoomEnabled,V_zoomEnabled
T@"MFMailboxProvider",&,N,V_mailboxProvider
T@"EMDaemonInterface",&,N,V_daemonInterface
T@"MUIBrandIndicatorProvider",&,N,V_brandIndicatorProvider
initWithFrame:snapshotView:
snapshotView
setSnapshotView:
snapshotViewYOrigin
setSnapshotViewYOrigin:
_snapshotView
_snapshotViewYOrigin
T@"UIView",&,N,V_snapshotView
Td,N,V_snapshotViewYOrigin
displayMetricsWithTraitCollection:layoutMargins:safeAreaInsets:interfaceOrientation:
displayMetricsWithTraitCollection:layoutMargins:safeAreaInsets:interfaceOrientation:trailingButtonView:
avatarDiameter
fontCacheKeyPrefix
hasCompactLayout
hasGenerousMargins
prefersFlushSeparator
prefersFlushSeparatorForLeadingEdge
minHorizontalSpacing
topToSenderBaselineInConversation
baselineToBaselineSpacingInConversation
topToSenderBaselineInConversationForMailActionHeader
baselineToBaselineSpacingInConversationForMailActionHeader
recipientBaselineToFirstSeparatorInConversation
avatarDiameterForCurrentContentSize
statusIndicatorHorizontalSpacing
messageTopPaddingInConversation
messageBottomPaddingInConversation
messageTopPaddingInConversationForMailActionHeader
messageBottomPaddingInConversationForMailActionHeader
_cachedFontForStyle:
_scaledFloatWithValue:fontStyle:
_scaledFloatWithValue:fontStyle:maximumContentSizeCategory:
cellHeightToStartScroll
estimatedFooterViewHeight
footerViewTopToBaseline
_calculateFooterViewButtonsAnimationOffset
setFooterViewDisplayMetrics:
footerViewTrailingButtonOrigin
topToGlyphBaselineInMailActionCardHorizontalGroup
baselineToBaselineSpacingInMailActionCardHorizontalGroup
bottomSpacingInMailActionCardHorizontalGroup
topToFirstBaselineSpacingInMailActionCardVerticalGroup
bottomToLastBaselineInMailActionCardVerticalGroup
mailActionCardPreferredHeightForPad
mailActionCardMaximumContainerViewHeightForLargerMediumDetent
mailActionCardSmallerMediumDetentCoverage
mailActionCardLargerMediumDetentCoverage
conversationHeaderViewCollapsedSuperTitleTopToFirstBaseline
conversationHeaderViewShouldHideCollapsedSuperTitle
conversationHeaderViewCollapsedTitleTopToFirstBaseline
conversationHeaderViewCollapsedTitleBottomToLastBaseline
conversationHeaderViewExpandedTitleTopToFirstBaseline
traitCollection
setTraitCollection:
layoutMargins
safeAreaInsets
setSafeAreaInsets:
topToSenderBaseline
baselineToBaselineSpacing
recipientBaselineToFirstSeparator
firstSeparatorToSubjectBaseline
headerBottomPadding
statusIndicatorVerticalSpacing
footerViewButtonsAnimationOffset
setFooterViewButtonsAnimationOffset:
footerViewDisplayMetrics
trailingButtonView
setTrailingButtonView:
_traitCollection
_topToSenderBaseline
_baselineToBaselineSpacing
_recipientBaselineToFirstSeparator
_firstSeparatorToSubjectBaseline
_headerBottomPadding
_statusIndicatorVerticalSpacing
_footerViewButtonsAnimationOffset
_footerViewDisplayMetrics
_trailingButtonView
_layoutMargins
_safeAreaInsets
T@"UITraitCollection",&,N,V_traitCollection
T{UIEdgeInsets=dddd},N,V_layoutMargins
T{UIEdgeInsets=dddd},N,V_safeAreaInsets
T@"ConversationFooterViewDisplayMetrics",&,N,V_footerViewDisplayMetrics
Td,N,V_footerViewButtonsAnimationOffset
T@"UIView",&,N,V_trailingButtonView
Td,R,N,V_topToSenderBaseline
Td,R,N,V_baselineToBaselineSpacing
Td,R,N,V_recipientBaselineToFirstSeparator
Td,R,N,V_firstSeparatorToSubjectBaseline
Td,R,N,V_headerBottomPadding
Td,R,N,V_statusIndicatorVerticalSpacing
drawRect:forViewPrintFormatter:
draggableArea
addHeaderBlock:animated:
insertHeaderBlock:atIndex:animated:
removeHeaderBlock:animated:
removeAllHeaderBlocksAnimated:
setHeaderBlocks:
setHeaderBlocks:animated:
setPinnedBlock:
_animationConstraintsForBlockAtIndex:
_layoutAnimatedWithCompletion:
setMessageFlags:conversationFlags:
_updateSeparators
_blockHasWhiteOrClearBackground:
pinnedBlock
headerBlocks
bottomSeparatorDrawsFlushWithLeadingEdge
setBottomSeparatorDrawsFlushWithLeadingEdge:
viewModel
setViewModel:
setDraggableArea:
_headerBlocks
_bottomSeparatorDrawsFlushWithLeadingEdge
_pinnedBlock
_viewModel
_draggableArea
T@"MessageHeaderViewModel",&,N,V_viewModel
T{CGRect={CGPoint=dd}{CGSize=dd}},N,V_draggableArea
T@"<MFMessageHeaderViewDelegate>",W,N,V_delegate
T@"MFMessageHeaderViewBlock",&,N,V_pinnedBlock
T@"NSArray",C,N,V_headerBlocks
TB,N,V_bottomSeparatorDrawsFlushWithLeadingEdge
createPrimaryViews
initializePrimaryLayoutConstraints
setSeparatorDrawsFlushWithLeadingEdge:
setSeparatorDrawsFlushWithTrailingEdge:
separator
setSeparator:
trailingAccessoryViewLayoutGuide
setTrailingAccessoryViewLayoutGuide:
separatorIsHidden
separatorDrawsFlushWithLeadingEdge
separatorDrawsFlushWithTrailingEdge
usingLargeTextLayout
setUsingLargeTextLayout:
interactivelyResizing
setInteractivelyResizing:
trailingAccessoryViewLayoutGuideWidth
setTrailingAccessoryViewLayoutGuideWidth:
trailingAccessoryViewLayoutGuideTrailing
setTrailingAccessoryViewLayoutGuideTrailing:
separatorLeading
setSeparatorLeading:
separatorTrailing
setSeparatorTrailing:
observableCancelable
setObservableCancelable:
_separatorIsHidden
_separatorDrawsFlushWithLeadingEdge
_separatorDrawsFlushWithTrailingEdge
_usingLargeTextLayout
_interactivelyResizing
_separator
_trailingAccessoryViewLayoutGuide
_trailingAccessoryViewLayoutGuideWidth
_trailingAccessoryViewLayoutGuideTrailing
_separatorLeading
_separatorTrailing
_observableCancelable
T@"SeparatorLayer",&,N,V_separator
T@"UILayoutGuide",&,N,V_trailingAccessoryViewLayoutGuide
T@"NSLayoutConstraint",&,N,V_trailingAccessoryViewLayoutGuideWidth
T@"NSLayoutConstraint",&,N,V_trailingAccessoryViewLayoutGuideTrailing
T@"NSLayoutConstraint",&,N,V_separatorLeading
T@"NSLayoutConstraint",&,N,V_separatorTrailing
T@"<EFCancelable>",&,N,V_observableCancelable
TB,N,V_separatorIsHidden
TB,N,V_separatorDrawsFlushWithLeadingEdge
TB,N,V_separatorDrawsFlushWithTrailingEdge
TB,N,V_usingLargeTextLayout
TB,N,V_interactivelyResizing
unknownAttribution
noAttribution
attributionWithSenderName:
T@"MFQuotedContentAttribution",R
initWithType:senderName:
T@"NSString",R,C,N,V_senderName
readableContentMarginsForWidth:minMargins:safeAreaInsets:
initWithFrame:banner:
commonInitWithBanner:
willMoveToSuperview:
setBanner:
_constraintsForEdges:banner:useLayoutMarginsGuide:
trailingOffsetToMarginForCloseButtonAlignment
banner
bannerConstraints
setBannerConstraints:
_banner
_bannerConstraints
T@"NSArray",&,N,V_bannerConstraints
T@"UIView<SGBannerProtocol>",&,N,V_banner
defaultProvider
_accountsEmailAddresses
hasAccountsConfigured
userScripts
registerDictionary:name:
setDictionary:forWebViewDictionaryWithName:
setValuesForKeysWithDictionary:forWebViewDictionaryWithName:
initWithCapacity:
descriptionWithLocale:indent:
registerWithWebView:javascriptName:
_setRequiresSynchronization
_updateRemoteInstance
isEqualToDictionary:
count
objectForKey:
keyEnumerator
allKeys
allKeysForObject:
allValues
objectEnumerator
objectsForKeys:notFoundMarker:
getObjects:andKeys:count:
objectForKeyedSubscript:
countByEnumeratingWithState:objects:count:
enumerateKeysAndObjectsWithOptions:usingBlock:
removeObjectForKey:
setObject:forKey:
removeAllObjects
removeObjectsForKeys:
setDictionary:
setObject:forKeyedSubscript:
setValuesForKeysWithDictionary:
synchronize
javascriptName
_changedKeys
_requiresResynchronization
_javascriptName
T@"NSString",R,N,V_javascriptName
remoteContentURLSession:failedToProxyURL:failureReason:
_unregisterWebProcessDelegate:
_registerWebProcessDelegate:
setWebProcessDelegate:
setLoadingURL:
setContentRepresentation:
slapWebView
_doIssueLoadRequest
requestWebViewLoadWithContext:
requestWebViewLoadWithoutShowingMessageWithContext:
requestWebViewLoadWithoutShowingMessageWithRepresentation:
requestWebViewLoadWithError:
requestWebViewLoadWithContentRepresentation:
_reconveneWebProcessBundle
webProcessBrowserContextControllerDidBecomeAvailable
webProcessDelegate
remoteObjectInterface
setRemoteObjectInterface:
loadingURL
error
setError:
webProcessPluginNeedsUpdate
setWebProcessPluginNeedsUpdate:
_webProcessPluginNeedsUpdate
_webViewConstants
_webProcessDelegate
_remoteObjectInterface
_contentRepresentation
_loadingURL
_error
T@"_WKRemoteObjectInterface",&,N,V_remoteObjectInterface
T@"EMContentRepresentation",&,N,V_contentRepresentation
T@"NSURL",&,N,V_loadingURL
T@"NSError",&,N,V_error
TB,N,V_webProcessPluginNeedsUpdate
T@"MFWebViewDictionary",R,N,V_webViewConstants
T@"<MFMailWebProcessDelegate>",W,N,V_webProcessDelegate
sharedController
scheduler
T@"<EFScheduler>",R,N
T@"MFWidgetController",R,N
reloadTimelinesWithReason:
timelineController
setTimelineController:
_timelineController
T@"CHSTimelineController",&,N,V_timelineController
_didReceiveMemoryWarning:
setDaemonInterface:URLCacheWithMemoryCapacity:
sharedWebViewFactoryFuture
sharedWebViewFactory
contentRuleListMangager:didAddRuleList:
contentRuleListMangager:didUpdateContentRuleList:oldContentRuleList:
contentRuleListMangager:didRemoveRuleList:
initWithRemoteContentURLCache:
processPool
_instantiateWebView
_createConfiguration
setContentRuleListManager:
preallocateWebViews
preallocateWebViewIfNeeded
urlSession
configurations
setConfigurations:
preallocatedWebViews
setPreallocatedWebViews:
setProcessPool:
_proxySchemeHandler
_noProxySchemeHandler
_contentRuleListManagerObserverCancelable
_urlSession
_configurations
_preallocatedWebViews
_processPool
T@"NSHashTable",&,N,V_configurations
T@"EFQueue",&,N,V_preallocatedWebViews
T@"WKProcessPool",&,N,V_processPool
T@"EMRemoteContentURLSession",R,N,V_urlSession
mf_messageFragment
separatorHeight
setAxis:
sizeThatFits:
intrinsicContentSize
axis
_axis
TQ,N,V_axis
mf_isTranslucent
mailFlaggedColor
mailFlaggedColorRed
mailFlaggedColorIncreasedContrastRed
mailFlaggedColorOrange
mailFlaggedColorYellow
mailFlaggedColorGreen
mailFlaggedColorTeal
mailFlaggedColorIndigo
mailFlaggedColorGray
mailDestructiveActionColor
mailArchiveActionColor
mailReadLaterActionColor
mailTransparentLightGrayColor
mailDarkGrayColor
mailMoreButtonGrayColor
mailRemoveReminderColor
mailRemoveFollowUpColor
mailAppBackgroundColor
mailSystemLightGrayColor
mailSecondaryLabelDarkColor
mailVibrantDarkColor
mailVibrantLightColor
mailAccountCellTitleColor
mailPreviousDraftPickerHeaderTextColor
mailSplitViewBorderColor
mailSearchImageBorderColor
mailConversationViewBackgroundColor
mailConversationViewExpandedCellBackgroundColor
mailConversationViewCollapsedCellBackgroundColor
mailConversationViewCollapsedCellHighlightedBackgroundColor
mailConversationViewCollapsedCellLabelColor
mailConversationViewFindOverlayColor
mailHeaderSeparatorLayerColor
mailTransferConversationViewBackgroundColor
mailConversationViewNoSelectedMessageViewBackgroundColor
mailDockViewLightBackgroundColor
mailDockViewDarkBackgroundColor
mailDockedPlaceholderViewBackgroundColor
mailDockViewShadowGradientColors
mailDockViewShadowGradientColorLocations
mailTiltedTabCloseButtonTintColor
mailExpandedConversationViewCellDateLabelColor
mailTransferStackViewBackgroundColor
mailSplitViewBackgroundColor
mailMessageListPrimarySelectionColor
mailMessageListSecondarySelectionColor
mailMessageListTertiarySelectionColor
mailMessageListSelectedSummaryColor
mailMessageListSelectedAnnotationColor
mailMessageListSelectedStatusIndicatorColor
mailMessageListSelectedRecipientColor
mailFocusBannerTitleColor
mailMessageListBackgroundColor
mailMessageListHighlightColor
mailCellSelectionStateColorForInterfaceLevel:
mailMailboxPickerBackgroundColorForTraitCollection:
mailTodayFilterColor
mailAttachmentsFilterColor
mailVIPFilterColor
mf_colorFromColor:toColor:progress:
mf_colorFromFlagColor:
T@"UIColor",R
_setDrawsDebugBaselines:
mf_activateDebugModeIfEnabled
mf_enableDebugModeInView
mf_debugModeEnabled
_vipsDidChange:
defaultInstanceLock
setBackingManager:
defaultInstance
isVIPAddress:
hasVIPs
getAllVIPsWithCompletion:
vipWithIdentifier:
saveVIPs:
removeVIPsWithIdentifiers:
removeVIPsWithEmailAddresses:
allVIPs
allVIPEmailAddresses
T@"NSSet",R,C,N
T@"EAEmailAddressSet",R,C,N
T^{os_unfair_lock_s=I},R
T@"VIPManager",R,N
initWithBackingManager:
saveVIP:
deleteVIPWithIdentifier:
sortedVIPs
vipForEmailAddresses:andDisplayNames:
existingPersonForVIP:usingAddressBook:
criterionForEmailAddresses:
vipCriteria
allVIPEmailAddressesCriterion
backingManager
_abPersonByVIPIdentifierLock
_abPersonByVIPIdentifier
_queue
_backingManager
T@"<EMVIPManager>",R,N,V_backingManager
_mcv_executeJavaScriptMethod:arguments:
mcv_executeJavaScriptExpression:
mcv_stringFromJavaScriptMethod:arguments:
mcv_dictionaryFromJavaScriptMethod:arguments:
@16@0:8
@24@0:8@16
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@"NSObject<OS_os_log>"16@0:8
@64@0:8{UIEdgeInsets=dddd}16q48@56
d16@0:8
v24@0:8d16
v20@0:8B16
@48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
v16@0:8
@60@0:8@16q24@32@40@48B56
q16@0:8
@"NSURL"
@"EMMessageObjectID"
@"EMMailboxObjectID"
@"NSString"
@"NSData"24@0:8@"QLItem"16
@"UTType"
@32@0:8@16@24
@40@0:8@16@24@32
@56@0:8@16@24@32@40@48
@40@0:8@16q24@32
v24@0:8@16
@"<ContentRepresentationHandlingDelegate>"
@32@0:8@16q24
v24@0:8q16
@"UIPrintPageRenderer"
@40@0:8@16@24q32
@"<EMContentItem>"
@"NSProgress"
@"EFPromise"
@"EFLocked"
v24@0:8@"MSAttachmentItem"16
v32@0:8@16@24
v64@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24@56
@28@0:8@16B24
@56@0:8@16q24@32^B40^@48
q24@0:8@16
v32@0:8q16@24
v32@0:8d16@24
v24@0:8Q16
@?16@0:8
v24@0:8@?16
@"NSMutableDictionary"
@"NSMutableSet"
@"<EFScheduler>"
@"<MSMailWebProcessAttachmentProxy>"
@"EMMailDropMetadata"
@"WKWebView"
@"NSArray"
@48@0:8@16q24@32@40
@56@0:8@16@24q32@40@48
@32@0:8@16@?24
@24@0:8@?16
@"<EMContentItemRequestDelegate>"
@"EFCancelationToken"
@"EFObservable<EFObserver>"
@"EFObservable"
@"EFFuture"
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"<EMCollectionItemID>"
v40@0:8@16@24@?32
v32@0:8@16@?24
v40@0:8@"EMObjectID"16@"NSArray"24@?<v@?@"NSDictionary"@"NSError">32
v32@0:8@"EMObjectID"16@?<v@?@"NSString"@"NSError">24
@"NSIndexSet"16@0:8
v24@0:8@"NSIndexSet"16
@"NSDate"16@0:8
v24@0:8@"NSDate"16
@"EMFollowUp"16@0:8
v24@0:8@"EMFollowUp"16
@"<EMCollectionItemID>"16@0:8
v24@0:8@"<EMCollectionItemID>"16
@"ECSubject"16@0:8
v24@0:8@"ECSubject"16
@"MFMailboxUid"16@0:8
v24@0:8@"MFMailboxUid"16
@"NSArray"16@0:8
v24@0:8@"NSArray"16
@"MFAddressAtomStatusManager"16@0:8
v24@0:8@"MFAddressAtomStatusManager"16
@"EFFuture"16@0:8
v24@0:8@"EFFuture"16
@24@0:8^{_NSZone=}16
@"NSDate"
@"ECSubject"
@"MFMailboxUid"
@"MFAddressAtomStatusManager"
@"NSIndexSet"
@"EMFollowUp"
v32@0:8@16^v24
v32@0:8@"MFAddressBookManager"16^v24
v24@0:8@"MFAddressBookManager"16
i24@0:8@16
@"<MFAddressAtomProvider>"
@"MFMessageLoadingContext"
@"EMAccount"
@"MailAccount"
@"EMSecurityInformation"
@"NSError"
@"<EMUserProfileProvider>"
@"MFLocalizationListFormatter"
@"EFLazyCache"
@"MFAddressBookManager"
@40@0:8q16@24@32
@"<MFBannerViewDelegate>"
@"UIButton"
@"UILabel"
@"<MFBlockedSenderBannerViewDelegate>"
@56@0:8@16@24@32@40@?48
@60@0:8@16@24@32@40B48@?52
@"UIColor"
@"NSNumber"
v40@0:8@16@24@32
@"UIPointerRegion"40@0:8@"UIPointerInteraction"16@"UIPointerRegionRequest"24@"UIPointerRegion"32
@"UIPointerStyle"32@0:8@"UIPointerInteraction"16@"UIPointerRegion"24
v40@0:8@"UIPointerInteraction"16@"UIPointerRegion"24@"<UIPointerInteractionAnimating>"32
v48@0:8{UIEdgeInsets=dddd}16
v40@0:8@16:24q32
B40@0:8{CGPoint=dd}16@32
v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
@"UIVisualEffectView"
@"<MFMessageFooterViewDelegate>"
@"MFMessageDisplayMetrics"
@"EMCachingContactStore"
@"ConversationSearchOverlayView"
@60@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16B48Q52
@20@0:8B16
@"<MFHasMoreContentBannerViewDelegate>"
@56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16Q48
@"<MFHideMyEmailBannerViewDelegate>"
@64@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16Q48q56
@"<MFLoadBlockedContentBannerViewDelegate>"
@56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16q48
@"<MFLoadFailedProxyContentBannerViewDelegate>"
@"MFProgressView"
@"NSLayoutConstraint"
@"<MFMailDropBannerDelegate>"
@"NSLock"
@"NSMapTable"
B32@0:8@16@24
@32@0:8@16^@24
q32@0:8@16@24
v40@0:8@16q24@32
q24@0:8@"UIPresentationController"16
q32@0:8@"UIPresentationController"16@"UITraitCollection"24
v32@0:8@"UIPresentationController"16@"UIPresentationController"24
@"UIViewController"32@0:8@"UIPresentationController"16q24
v40@0:8@"UIPresentationController"16q24@"<UIViewControllerTransitionCoordinator>"32
B24@0:8@"UIPresentationController"16
v24@0:8@"UIPresentationController"16
v40@0:8@16N^{CGRect={CGPoint=dd}{CGSize=dd}}24N^@32
v24@0:8@"UIPopoverPresentationController"16
B24@0:8@"UIPopoverPresentationController"16
v40@0:8@"UIPopoverPresentationController"16N^{CGRect={CGPoint=dd}{CGSize=dd}}24N^@32
v48@0:8@16@24@32@?40
d48@0:8@16{CGSize=dd}24@40
v32@0:8@"WKWebView"16@"<_WKFormInputSession>"24
v48@0:8@"WKWebView"16@"NSDictionary"24@"NSObject<NSSecureCoding>"32@?<v@?>40
B32@0:8@"WKWebView"16@"<_WKFocusedElementInfo>"24
q32@0:8@"WKWebView"16@"<_WKFocusedElementInfo>"24
v40@0:8@"WKWebView"16@"UITextSuggestion"24@"<_WKFormInputSession>"32
@"NSDictionary"24@0:8@"WKWebView"16
B32@0:8@"WKWebView"16@"<_WKFormInputSession>"24
d48@0:8@"WKWebView"16{CGSize=dd}24@"<_WKFormInputSession>"40
@"UIView"32@0:8@"WKWebView"16@"<_WKFormInputSession>"24
v40@0:8@"WKWebView"16@"WKNavigationAction"24@?<v@?q>32
v48@0:8@"WKWebView"16@"WKNavigationAction"24@"WKWebpagePreferences"32@?<v@?q@"WKWebpagePreferences">40
v40@0:8@"WKWebView"16@"WKNavigationResponse"24@?<v@?q>32
v32@0:8@"WKWebView"16@"WKNavigation"24
v40@0:8@"WKWebView"16@"WKNavigation"24@"NSError"32
v40@0:8@"WKWebView"16@"NSURLAuthenticationChallenge"24@?<v@?q@"NSURLCredential">32
v24@0:8@"WKWebView"16
v40@0:8@"WKWebView"16@"NSURLAuthenticationChallenge"24@?<v@?B>32
v40@0:8@"WKWebView"16@"WKNavigationAction"24@"WKDownload"32
v40@0:8@"WKWebView"16@"WKNavigationResponse"24@"WKDownload"32
v48@0:8@16@24@32@40
v40@0:8@16@24d32
v40@0:8@16@24q32
v32@0:8@16Q24
v56@0:8@16@24@32@40@?48
v32@0:8@16q24
v36@0:8@16@24B32
v48@0:8@16q24@32@?40
v48@0:8@"WKWebView"16@"WKNavigation"24@"WKFrameInfo"32@"NSError"40
v40@0:8@"WKWebView"16@"NSURL"24d32
v40@0:8@"WKWebView"16@"NSURL"24@"NSURL"32
v40@0:8@"WKWebView"16@"WKNavigation"24q32
v32@0:8@"WKWebView"16Q24
@"NSData"24@0:8@"WKWebView"16
v32@0:8@"WKWebView"16@"NSURL"24
v32@0:8@"WKWebView"16@"WKDownload"24
v32@0:8@"WKWebView"16@"WKBackForwardListItem"24
v56@0:8@"WKWebView"16@"WKNavigationAction"24@"WKWebpagePreferences"32@"<NSSecureCoding>"40@?<v@?q@"WKWebpagePreferences">48
v40@0:8@"WKWebView"16@"WKNavigation"24@"<NSSecureCoding>"32
v48@0:8@"WKWebView"16@"WKNavigation"24@"NSError"32@"<NSSecureCoding>"40
v48@0:8@"WKWebView"16@"NSURL"24@"NSArray"32@"NSArray"40
v48@0:8@"WKWebView"16@"NSString"24@"_WKContentRuleListAction"32@"NSURL"40
v32@0:8@"WKWebView"16q24
v40@0:8@"WKWebView"16@"NSURLRequest"24@"WKFrameInfo"32
v48@0:8@"WKWebView"16@"NSURLRequest"24@"WKFrameInfo"32@"NSError"40
v40@0:8@"WKWebView"16@"NSString"24@"NSString"32
v32@0:8@"WKWebView"16@"NSData"24
v36@0:8@"WKWebView"16@"WKBackForwardListItem"24B32
v48@0:8@"WKWebView"16q24@"NSString"32@?<v@?q>40
@48@0:8@16@24@32@40
v56@0:8@16@24@32q40@?48
@"WKWebView"48@0:8@"WKWebView"16@"WKWebViewConfiguration"24@"WKNavigationAction"32@"WKWindowFeatures"40
v48@0:8@"WKWebView"16@"NSString"24@"WKFrameInfo"32@?<v@?>40
v48@0:8@"WKWebView"16@"NSString"24@"WKFrameInfo"32@?<v@?B>40
v56@0:8@"WKWebView"16@"NSString"24@"NSString"32@"WKFrameInfo"40@?<v@?@"NSString">48
v56@0:8@"WKWebView"16@"WKSecurityOrigin"24@"WKFrameInfo"32q40@?<v@?q>48
v48@0:8@"WKWebView"16@"WKSecurityOrigin"24@"WKFrameInfo"32@?<v@?q>40
B32@0:8@"WKWebView"16@"WKPreviewElementInfo"24
@"UIViewController"40@0:8@"WKWebView"16@"WKPreviewElementInfo"24@"NSArray"32
v32@0:8@"WKWebView"16@"UIViewController"24
v40@0:8@"WKWebView"16@"WKContextMenuElementInfo"24@?<v@?@"UIContextMenuConfiguration">32
v32@0:8@"WKWebView"16@"WKContextMenuElementInfo"24
v40@0:8@"WKWebView"16@"WKContextMenuElementInfo"24@"<UIContextMenuInteractionCommitAnimating>"32
v40@0:8@"WKWebView"16@"NSString"24@?<v@?q>32
v72@0:8@16@24Q32Q40Q48Q56@?64
v88@0:8@16@24@32@40Q48Q56Q64Q72@?80
v56@0:8@16@24Q32Q40@?48
v56@0:8@16@24{CGSize=dd}32@?48
v28@0:8@16B24
v40@0:8@16{CGSize=dd}24
v52@0:8@16@24@32B40@?44
v56@0:8@16Q24@32@40@?48
v56@0:8@16@24@32Q40@?48
Q32@0:8@16@24
v40@0:8@16q24Q32
v72@0:8@16@24q32Q40Q48Q56@?64
v40@0:8@16@?24@?32
v40@0:8@16{CGPoint=dd}24
v48@0:8@16@24q32@40
@32@0:8@16^B24
{UIEdgeInsets=dddd}56@0:8@16@24{CGPoint=dd}32N^{CGPoint=dd}48
@64@0:8@16@24@32@40{CGSize=dd}48
@40@0:8@16@24^@32
v48@0:8@16@24@32Q40
v44@0:8@16B24@28@36
Q40@0:8@16Q24@32
v72@0:8@"WKWebView"16@"WKSecurityOrigin"24Q32Q40Q48Q56@?<v@?Q>64
v88@0:8@"WKWebView"16@"WKSecurityOrigin"24@"NSString"32@"NSString"40Q48Q56Q64Q72@?<v@?Q>80
v56@0:8@"WKWebView"16@"WKSecurityOrigin"24Q32Q40@?<v@?Q>48
v32@0:8@"WKWebView"16@"_WKFrameHandle"24
v56@0:8@"WKWebView"16@"_WKFrameHandle"24{CGSize=dd}32@?<v@?>48
v32@0:8@"WKWebView"16@?<v@?B>24
v28@0:8@"WKWebView"16B24
v48@0:8@"WKWebView"16@"NSURL"24@"WKFrameInfo"32@?<v@?B>40
v40@0:8@"WKWebView"16{CGSize=dd}24
v52@0:8@"WKWebView"16@"WKSecurityOrigin"24@"WKFrameInfo"32B40@?<v@?q>44
v56@0:8@"WKWebView"16Q24@"NSURL"32@"NSURL"40@?<v@?B>48
v56@0:8@"WKWebView"16@"NSURL"24@"NSURL"32Q40@?<v@?@"NSString"B>48
Q32@0:8@"WKWebView"16@24
v56@0:8@"WKWebView"16@"WKWebViewConfiguration"24@"WKNavigationAction"32@"WKWindowFeatures"40@?<v@?@"WKWebView">48
v40@0:8@"WKWebView"16@"WKFrameInfo"24@?<v@?B>32
v48@0:8@"WKWebView"16@"NSString"24@"WKSecurityOrigin"32@?<v@?q>40
v32@0:8@"WKWebView"16@"NSDictionary"24
v32@0:8@"WKWebView"16@"_WKAttachment"24
v40@0:8@"WKWebView"16@"_WKAttachment"24@"NSString"32
v32@0:8@"WKWebView"16@"<NSSecureCoding>"24
v48@0:8@"WKWebView"16@"NSString"24@"NSString"32@?<v@?B>40
v40@0:8@"WKWebView"16@"WKSecurityOrigin"24@?<v@?B>32
v48@0:8@"WKWebView"16@"_WKWebAuthenticationPanel"24@"WKFrameInfo"32@?<v@?q>40
v40@0:8@"WKWebView"16q24Q32
v32@0:8@"WKWebView"16@"NSArray"24
v72@0:8@"WKWebView"16@"NSString"24q32Q40Q48Q56@?<v@?Q>64
v32@0:8@"WKWebView"16@?<v@?@>24
v40@0:8@"WKWebView"16@?<v@?>24@?<v@?B>32
v40@0:8@"WKWebView"16@"_WKModalContainerInfo"24@?<v@?q>32
B32@0:8@"WKWebView"16@"_WKActivatedElementInfo"24
@"NSArray"40@0:8@"WKWebView"16@"_WKActivatedElementInfo"24@"NSArray"32
v40@0:8@"WKWebView"16{CGPoint=dd}24
B32@0:8@"WKWebView"16@"WKFrameInfo"24
@"UIViewController"32@0:8@"WKWebView"16@"NSURL"24
v36@0:8@"WKWebView"16@"UIViewController"24B32
@"UIViewController"32@0:8@"WKWebView"16@"WKContextMenuElementInfo"24
v48@0:8@"WKWebView"16@"_WKHitTestResult"24q32@"<NSSecureCoding>"40
@"NSArray"24@0:8@"WKWebView"16
@"NSArray"32@0:8@"WKWebView"16^B24
Q32@0:8@"WKWebView"16@"_WKActivatedElementInfo"24
{UIEdgeInsets=dddd}56@0:8@"WKWebView"16@"UIScrollView"24{CGPoint=dd}32N^{CGPoint=dd}48
@"UIView"24@0:8@"WKWebView"16
@"UIViewController"48@0:8@"WKWebView"16@"NSURL"24@"NSArray"32@"_WKActivatedElementInfo"40
@"UIViewController"64@0:8@"WKWebView"16@"NSURL"24@"NSArray"32@"_WKActivatedElementInfo"40{CGSize=dd}48
@"UIViewController"24@0:8@"WKWebView"16
v40@0:8@"WKWebView"16@"UIImage"24@?<v@?@"NSURL"@"NSDictionary">32
@"NSURL"40@0:8@"WKWebView"16@"UIImage"24^@32
@"UIViewController"56@0:8@"WKWebView"16@"UIImage"24@"NSURL"32@"NSArray"40@"_WKActivatedElementInfo"48
@"NSArray"32@0:8@"WKWebView"16@"NSArray"24
@"NSArray"48@0:8@"WKWebView"16@24@"NSArray"32@"NSDictionary"40
B32@0:8@"WKWebView"16@"NSArray"24
v40@0:8@"WKWebView"16@24@32
v48@0:8@"WKWebView"16@24@32Q40
v44@0:8@"WKWebView"16B24@28@"NSArray"36
Q40@0:8@"WKWebView"16Q24@32
@"UIDropProposal"40@0:8@"WKWebView"16@"UIDropProposal"24@"<UIDropSession>"32
@"UITargetedDragPreview"40@0:8@"WKWebView"16@"UIDragItem"24@"<UIDragSession>"32
@"UITargetedDragPreview"40@0:8@"WKWebView"16@"UIDragItem"24@"UITargetedDragPreview"32
@"NSArray"32@0:8@"WKWebView"16@"<UIDropSession>"24
q32@0:8@"WKWebView"16@"<UIDropSession>"24
q32@0:8@"WKWebView"16@"<UIDragSession>"24
B32@0:8@"WKWebView"16@"UIGestureRecognizer"24
B24@0:8@"WKWebView"16
v24@0:8@"MFHideMyEmailBannerView"16
v24@0:8@"MFHasMoreContentBannerView"16
v24@0:8@"MFLoadBlockedContentBannerView"16
v24@0:8@"UIViewController"16
v24@0:8@"MFLoadFailedProxyContentBannerView"16
v24@0:8@"MFBlockedSenderBannerView"16
v24@0:8@"MFMessageHeaderView"16
v24@0:8@"MFConversationItemFooterView"16
v24@0:8@"MFMailDropBannerView"16
v24@0:8@"UIWindowSceneActivationConfiguration"16
v48@0:8@16{CGPoint=dd}24N^{CGPoint=dd}40
v24@0:8@"UIScrollView"16
v48@0:8@"UIScrollView"16{CGPoint=dd}24N^{CGPoint=dd}40
v28@0:8@"UIScrollView"16B24
@"UIView"24@0:8@"UIScrollView"16
v32@0:8@"UIScrollView"16@"UIView"24
v40@0:8@"UIScrollView"16@"UIView"24d32
B24@0:8@"UIScrollView"16
v24@0:8@"NSURL"16
v32@0:8@"NSURL"16@"NSArray"24
v32@0:8@"NSURL"16q24
B32@0:8:16@24
v24@0:8B16B20
@52@0:8{UIEdgeInsets=dddd}16B48
{CGRect={CGPoint=dd}{CGSize=dd}}48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
{CGRect={CGPoint=dd}{CGSize=dd}}24@0:8@16
v32@0:8d16d24
v32@0:8{CGSize=dd}16
{CGPoint=dd}16@0:8
v32@0:8{CGPoint=dd}16
@"MessageContentItemsHelper"
@"MFMessageHeaderView"
@"MFMailDropBannerView"
@"MFHasMoreContentBannerView"
@"MFHideMyEmailBannerView"
@"MFLoadBlockedContentBannerView"
@"MFBlockedSenderBannerView"
@"MFLoadFailedProxyContentBannerView"
@"UIView"
@"UIBarButtonItem"
{CGRect="origin"{CGPoint="x"d"y"d}"size"{CGSize="width"d"height"d}}
@"<EFCancelable>"
{UIEdgeInsets="top"d"left"d"bottom"d"right"d}
@"MFConversationItemFooterView"
@"NSSet"
{?="delegateRespondsToDidFinishLoadingMessages"b1"delegateRespondsToDidFinishFirstPaint"b1"delegateRespondsToDidDisplayContent"b1"delegateRespondsToDidFinishRenderingWithHeight"b1"delegateRespondsToExpandQuoteAtScrollOffset"b1"delegateRespondsToWillBeginZoomingMessage"b1"delegateRespondsToDidEndZoomingMessage"b1"delegateRespondsToDidTapRevealActionsButton"b1"delegateRespondsToLoadingIndicatorDidChangeVisibility"b1"delegateRespondsToDidLoadSecurityInformation"b1"delegateRespondsToWebViewDidTerminateWithReason"b1}
@"<MFMessageContentViewDelegate>"
@"<MFMessageContentViewDataSource>"
@"MessageContentRepresentationRequest"
@"MFMailboxProvider"
@"EMDaemonInterface"
@"MUIBrandIndicatorProvider"
@"MFMessageContentLoadingView"
@"MFWebViewLoadingController"
@"NSDictionary"
{CGPoint="x"d"y"d}
@56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48
@96@0:8@16{UIEdgeInsets=dddd}24{UIEdgeInsets=dddd}56q88
@104@0:8@16{UIEdgeInsets=dddd}24{UIEdgeInsets=dddd}56q88@96
d32@0:8d16@24
d40@0:8d16@24@32
{UIEdgeInsets=dddd}16@0:8
@"UITraitCollection"
@"ConversationFooterViewDisplayMetrics"
v56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
v36@0:8@16Q24B32
@24@0:8Q16
v32@0:8Q16Q24
@"NSMutableArray"
@"<MFMessageHeaderViewDelegate>"
@"MFMessageHeaderViewBlock"
@"MessageHeaderViewModel"
@"SeparatorLayer"
@"UILayoutGuide"
@32@0:8q16@24
{UIEdgeInsets=dddd}88@0:8d16{UIEdgeInsets=dddd}24{UIEdgeInsets=dddd}56
@36@0:8Q16@24B32
@"UIView<SGBannerProtocol>"
@"NSSet"16@0:8
v32@0:8@"NSDictionary"16@"NSString"24
@32@0:8@16Q24
v40@0:8^@16^@24Q32
Q40@0:8^{?=Q^@^Q[5Q]}16^@24Q32
v32@0:8Q16@?24
@"<MFMailWebProcessProxy>"
v40@0:8@"EMRemoteContentURLSession"16@"NSURL"24q32
@"MFWebViewDictionary"
@"<MFMailWebProcessDelegate>"
@"_WKRemoteObjectInterface"
@"EMContentRepresentation"
@"CHSTimelineController"
v32@0:8@"MEContentRuleListManager"16@"WKContentRuleList"24
v40@0:8@"MEContentRuleListManager"16@"WKContentRuleList"24@"WKContentRuleList"32
@"EMRemoteContentURLSchemeHandler"
@"EFAutoCancelationToken"
@"EMRemoteContentURLSession"
@"NSHashTable"
@"EFQueue"
@"WKProcessPool"
{CGSize=dd}32@0:8{CGSize=dd}16
{CGSize=dd}16@0:8
@24@0:8q16
@36@0:8@16@24f32
^{os_unfair_lock_s=I}16@0:8
B24@0:8@"NSString"16
v24@0:8@?<v@?@"NSSet"@"NSError">16
@"EMVIP"24@0:8@"NSString"16
v24@0:8@"NSSet"16
v24@0:8@"EAEmailAddressSet"16
@"EAEmailAddressSet"16@0:8
r^v32@0:8@16^v24
^{__CFDictionary=}
@"NSObject<OS_dispatch_queue>"
@"<EMVIPManager>"
