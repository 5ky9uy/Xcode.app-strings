@(#)PROGRAM:CoreSpeechFoundation  PROJECT:CoreSpeech-1
pbhw
pbtb
pbiu
otua
ciov
bhev
eltb
siar
tdtb
cvdh
cvpc
tcid
tsop
rtsh
tvps
tvmr
pbmr
ciov
fff?
(knN
ffffff
v8@?0
CSAudioTimeConverterPool
-[CSAudioChunkForTV initWithXPCObject:]
avgPower
peakPower
timeStamp
numChannels
audioFormat
streamHandleID
packets
com.apple.corespeech
Framework
en_US_POSIX
yyyyMMdd-HHmmss
CSLogInitIfNeeded_block_invoke
Unknown
com.apple.ssr
SSRLogInitIfNeeded_block_invoke
corespeech.json
assets.json
speakerRecognition.json
adBlockerPayload.bin
ouresConfig.json
hybridendpointer.json
hybridendpointer_marsh.json
/System/Library/PrivateFrameworks/CoreSpeech.framework
+[CSAsset fallBackAssetResourcePath]
defaultFallbackHearst
defaultFallbackAdBlocker
uresModel
defaultFallbackUres
-[CSAsset initWithResourcePath:configFile:configVersion:assetProvderType:]
+[CSAsset decodeJson:]
-[CSAsset getNumberForKey:category:default:]
-[CSAsset getStringForKey:category:default:]
configVersion:%@ resourcePath:%@ path:%@
MobileAssets
Trial
+[CSAsset isLeftConfigVersion:newerThanRightConfigVersion:]
Premium
nohash
((?:[a-z]|[0-9])*)\.asset
-[CSAsset assetHashInResourcePath:]
CSInitialContinousZeros
CSMaxContinousZeros
CSMidSegmentContinousZeros
start
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
com.apple.da
liveOnHomePod
DeviceClassNumber
U+73bmG4kBGj6kpreQXUTQ
DeviceSupportsUSBTypeC
InternalBuild
CSSafeSetOutErrorWithNSError
+N9mZUAHooNvMiQnjeTJ8g
PTQ+ABwag03BwO/CKvIK/A
+[CSUtils isIOSDeviceSupportingBargeIn]_block_invoke
BuildVersion
IOPlatformExpertDevice
+[CSUtils deviceHwRevision]
config-number
yyyyMMdd
BluetoothFeatures
AnnounceTelephony
+[CSAudioRecordContext defaultContext]
CSAudioRecordTypeUnspecified
CSAudioRecordTypeHomePress
CSAudioRecordTypeWiredHeadsetButtonPress
CSAudioRecordTypeBluetoothHeadSetButtonPress
CSAudioRecordTypeUIButtonPress
CSAudioRecordTypeServerInvoke
CSAudioRecordTypeVoiceTrigger
CSAudioRecordTypeStark
CSAudioRecordTypeTVRemote
CSAudioRecordTypeRaiseToSpeak
CSAudioRecordTypeHearstDoubleTap
CSAudioRecordTypeHearstVoice
CSAudioRecordTypeJarvis
CSAudioRecordTypePost
CSAudioRecordTypeDictation
CSAudioRecordTypeVoiceTriggerTraining
CSAudioRecordTypeOpportuneSpeaker
CSAudioRecordTypeOpportuneSpeakerListenerWithCall
CSAudioRecordTypeRemoraVoice
CSAudioRecordTypeRemoraButton
CSAudioRecordTypeUnknown
recordType[%@] deviceId[%@] turnIdentifier[%@] alwaysUseBuiltInMic[%d] isRequestDuringActiveCall[%d] triggerEventInfo[%@] spokenNotification [%d]
type
alwaysUseRemoteBuiltInMic
deviceId
isRequestDuringActiveCall
triggerEventInfo
turnIdentifier
isSpokenNotification
CSSampleCountHostTimeConverter
Serial CSPolicy queue
deque
-[CSAudioChunk chunkForChannel:]
-[CSAudioChunk subChunkFrom:numSamples:forChannel:]
-[CSAudioChunk subChunkFrom:numSamples:]
-[CSAudioChunk splitAudioChunkSuchThatNumSamplesReceivedSoFar:reachesACountOf:completionHandler:]
numSamples
sampleByteDepth
startSampleCount
hostTime
arrivalHostTimeToAudioRecorder
wasBufferedAudio
data
remoteVAD
-[CSAudioCircularBuffer initWithNumChannels:recordingDuration:samplingRate:audioTimeConverter:]
-[CSAudioCircularBuffer copySamplesFromHostTime:]
-[CSAudioCircularBuffer copySamplesFrom:to:]
-[CSAudioCircularBuffer copySamplesFrom:to:channelIdx:]
-[CSAudioCircularBuffer copybufferFrom:to:]
-[CSAudioCircularBuffer copyBufferWithNumSamplesCopiedIn:]
-[CSAudioCircularBuffer reset]
copySamples
%@-%@
-[CSOSTransaction initWithDescription:]
-[CSOSTransaction dealloc]
CSRemoraVoiceTriggerEventInfoProvider
+[CSFTimeUtils hostTimeFromSampleCount:anchorHostTime:anchorSampleCount:sampleRate:]
+[CSFTimeUtils sampleCountFromHostTime:anchorHostTime:anchorSampleCount:sampleRate:]
+[CSFTimeUtils macHostTimeFromBridgeHostTime:]
i32@?0^I8^{AudioBufferList=I[1{AudioBuffer=II^v}]}16^^{AudioStreamPacketDescription}24
com.apple.voicetrigger
com.apple.voicetrigger.notbackedup
kCSPreferencesJarvisTriggerModeDidChangeDarwinNotification
VoiceTrigger Enabled
Phrase Detector Enabled
AttentiveSiri AudioLogging Enabled
Enable Two Shot Notification
com.apple.demo-settings
StoreDemoMode
HomePod
Mosquito
Adaptive Siri Volume Disabled
File Logging Level
Library
Logs/CrashReporter/VoiceTrigger/audio/
/Logs/CrashReporter/Assistant/MHLog/
/Logs/CrashReporter/Assistant/smartSiriVolumeContextAwareLogs/
Logs/CrashReporter/Assistant/smartSiriVolumeContextAwareLogs/
-[CSFPreferences getSSVLogFilePathWithSessionIdentifier:]
/tmp
%@/SSV_%@.json
VoiceTrigger/TrialAssetData
VoiceTrigger/adBlocker
/Logs/CrashReporter/Assistant/
SpeechLogs
-[CSFPreferences assistantAudioFileLogDirectory]
VoiceTrigger
siriBC
Second Pass Audio Logging Enabled
Speaker Recognition Audio Logging Enabled
Jarvis Audio Logging Enabled
Jarvis Trigger Mode
Enable SoS Audio Logging
Force VoiceTrigger AP Mode
-[CSFPreferences forceVoiceTriggerAPMode]_block_invoke
Force VoiceTrigger AOP Mode
-[CSFPreferences forceVoiceTriggerAOPMode]_block_invoke
com.apple.corespeech.CSPreferencesSetValueForKey
mobile
com.apple.corespeech._CSNotBackedupPreferencesSetValueForKey
Logs/CrashReporter/CoreSpeech/sos/
-[CSFPreferences getStartOfSpeechAudioLogFilePath]
yyyyMMdd_HHmmss.SSS
%@/%@
Remote VoiceTrigger Delay
Remote VoiceTrigger Endpoint Timeout
VoiceTrigger/interstitial
Myriad File Logging Enabled
Audio Injection Enabled
Programmable Audio Injection Enabled
-[CSFPreferences enableAudioInjection:withKey:]
-[CSFPreferences setAudioInjectionFilePath:]
Audio Injection File Path
-[CSFPreferences audioInjectionFilePath]
-[CSFPreferences audioInjectionFilePath]_block_invoke
v32@?0@8Q16^B24
SpeakerId Enabled
SpeakerId Score Type
SmartSiriVolume SoftVolume Enabled
Audio Session Activation Delay
Max Number Logging Files
Max Number Grading Files
Enable SiriActivation HomePod
Enable SiriActivation watchOS
Overwrite Remote VAD Score
Hearst First Pass Model Version
Hearst Second Pass Model Version
Hearst Fake Model Path
VoiceTrigger Companion Sync Enabled
Enable OpportuneSpeakListener Bypass
Bypass Personalized HeySiri
MultiPhraseVTEnabled
MultiChannelAudioLoggingEnabled
Enable AdBlocker Audio Logging
Is Staggered CAT Download Enabled
Enable Self Trigger Audio Logging
Adaptive Siri Volume State Intent Type
Adaptive Siri Volume State Intent Time
Adaptive Siri Volume State Intent Volume
Adaptive Siri Volume State Latest Volume Time
Adaptive Siri Volume State Latest Volume
-[CSFPreferences getASVUserIntent:]
assetDownloadfailed
assetFetchfailed
VoiceId
satinitfailed
satmodelfilefailed
satvectorfailed
tdsrfailed
tdsrtimeout
retrainsatfailed
explicituttrejected
toolessaudiofiles
unrecognizedmetadata
delayedscores
missinghomeidforclouduser
voiceidstaleprofiledetected
Audio
didStartWatchDogFire
didStopWatchDogFire
streamDeallocDuringStreaming
resourceNotAvailable
recordStoppedBySessionInterruption
InsufficientPriority
secondPassCompleteWatchDogFire
APLeak
APStuckInTransition
launchSlow
Endpointer
endpointerModelVersionIsNil
Ures
requestRCNotFound
beepLocation
statsComputed
beepPower
signalPower
originalPower
absMaxVal
above95pcOfMax
totalInputSamples
totalOutputSamples
jbl_begin.bin
-[CSBeepCanceller init]
-[CSBeepCanceller willBeep]
-[CSBeepCanceller reset]
-[CSDispatchGroup leave]
%s invalid packets
%s ::: CoreSpeech logging initialized (%s)
%s ::: SSR logging initialized (%s)
%s Fallback asset resource path : %{public}@
%s %{public}@
%s Cannot find corespeech asset from resourcePath : %{public}@
%s Configuration file is not exists : %{public}@
%s Cannot read configuration file : %{public}@
%s Cannot decode configuration json file : %{public}@
%s Configuration json file is not expected format
%s Cannot access to %{public}@ %{public}@ using default value=%{public}@
%s Comparing %{public}@ with %{public}@
%s Invalid rightConfig syntax : %{public}@
%s Invalid leftConfig syntax : %{public}@
%s Not comparable with %{public}@, ignore
%s Failed to create regular expression : %{public}@
%s ERR: %{public}@
%s Device supporting barge-in ? %{public}@
%s Failed to find matching service to IOPlatformExpertDevice
%s Fetched hardware revision : %{public}@
%s Failed to find property "config-number"
%s default to recordContext : %{public}@
%s channelId %d out of bound %d
%s Cannot generate subChunk since channel(%{public}tu) is larger than number of channels(%{public}tu)
%s Cannot generate subChunk if it reuqest more than it has : %{public}tu %{public}tu %{public}tu
%s SpkrId:: Processing ended at: numSamplesProcessed=%lu, totalSampleCountToReach=%lu
%s numChannels: %{public}lu, recordingDuration: %{public}f, sampleRate: %{public}f
%s Cannot copy samples since this is empty
%s Could NOT copyFrom: %{public}lu to: %{public}lu, retSampleCount: %{public}lu
%s copyBuffer: oldestSample: %{public}lu latestSample: %{public}lu, numSamplesCopied: %{public}lu
%s CSAudioCircularBuffer.reset
%s Invalid request: reqStartSample=%{public}lu, reqEndSample=%{public}lu, oldestSampleInBuffer: %{public}lu, latestSampleInBuffer=%{public}lu
%s Creating OS Transaction for %{public}@
%s Release OS Transaction for %{public}@
%s Delta is larger than anchorHostTime: anchorSampleCount = %{public}lld, sampleTime = %{public}lld, anchorHostTime = %{public}lld
%s Delta is larger than anchorSampleCount
%s Not supported on this platform
%s Couldn't create SSV log directory at path %{public}@ %{public}@
%s Couldn't create speech log directory at path %{public}@ %{public}@
%s Force enabling VoiceTrigger AP mode ? %{public}@
%s Force enabling VoiceTrigger AOP mode ? %{public}@
%s Couldn't create SoS log directory at path %{public}@ %{public}@
%s enableAudioInection: is only available on internal builds
%s setAudioInjectionFilePath: is only available on internal builds
%s kCSAudioInjectionFilePathKey is not array type
%s kCSAudioInjectionFilePathKey array size = %d
%s kCSAudioInjectionFilePathKey doesn't have NSString as an array entry
%s Adaptive Siri Volume failed to load user intent type. Ignoring intent
%s Adaptive Siri Volume failed to load user intent time. Ignoring intent
%s Adaptive Siri Volume failed to load user intent volume. Ignoring intent
%s Adaptive Siri Volume failed to load latest volume time. Ignoring intent
%s Adaptive Siri Volume failed to latest volume. Ignoring intent
%s Loaded Adaptive Siri Volume intentType: %llu, intentTime: %llu, intentVolume: %f, latestVolumeTime: %llu, latestVolume:%f
%s BeepCanceller asset file loading from : %{public}@
%s Could not read beep file: %@
%s beepVector Size = %{public}lu
%s Cannot initialize beep canceller
%s Beep canceller initialized with maxNumSamples = %{public}d
%s It will beep now
%s Reset beep cancellation
%s unbalanced dispatch_group_enter and leave : ignore we are ignore dispatch_group_leave
CSAudioTimeConverterPool
CSAudioChunkForTV
CSAsset
CSAudioZeroFilter
CSFAudioMetricsSelfLogger
CSUtils
CSAudioRecordContext
NSCopying
CSAudioTimeConverter
CSPolicy
CSEventMonitorDelegate
NSObject
CSAudioChunk
CSAudioCircularBuffer
CSConfig
CSOSTransaction
CSRemoraVoiceTriggerEventInfoProvider
CSFTimeUtils
CSAudioDecoder
CSFPreferences
CSPowerAssertionAccessory
CSDiagnosticReporter
CSAudioPowerMeter
CSBeepCanceller
CSFVoiceTriggerEventInfoSelfLogger
CSFLPCMTypeConverter
CSDispatchGroup
CSVoiceTriggerEventInfoProvider
init
dictionary
_getAudioTimeConverterWithDeviceId:
objectForKeyedSubscript:
setObject:forKeyedSubscript:
sharedInstance
defaultConverter
converterForDeviceId:
queue
setQueue:
pool
setPool:
defaultTimeConverter
setDefaultTimeConverter:
.cxx_destruct
_queue
_pool
_defaultTimeConverter
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
T@"NSMutableDictionary",&,N,V_pool
T@"CSAudioTimeConverter",&,N,V_defaultTimeConverter
_cs_initWithXPCObject:
_cs_xpcObject
initWithXPCObject:
xpcObject
packets
setPackets:
avgPower
setAvgPower:
peakPower
setPeakPower:
timeStamp
setTimeStamp:
numChannels
setNumChannels:
audioFormat
setAudioFormat:
streamHandleID
setStreamHandleID:
_avgPower
_peakPower
_numChannels
_audioFormat
_packets
_timeStamp
_streamHandleID
T@"NSArray",&,N,V_packets
Tf,N,V_avgPower
Tf,N,V_peakPower
TQ,N,V_timeStamp
TI,N,V_numChannels
TI,N,V_audioFormat
TQ,N,V_streamHandleID
localeWithLocaleIdentifier:
setLocale:
setDateFormat:
assetForAssetType:resourcePath:configVersion:assetProvider:
hybridEndpointerAssetFilename
defaultManager
contentsOfDirectoryAtPath:error:
count
firstObject
initWithResourcePath:configFile:configVersion:assetProvderType:
fallBackAssetResourcePath
stringByAppendingPathComponent:
componentsSeparatedByString:
objectAtIndexedSubscript:
integerValue
fileExistsAtPath:
decodeJson:
dataWithContentsOfFile:
JSONObjectWithData:options:error:
localizedDescription
numberWithBool:
getNumberForKey:category:default:
boolValue
resourcePath
assetHashInResourcePath:
stringWithFormat:
path
isEqualToString:
regularExpressionWithPattern:options:error:
length
firstMatchInString:options:range:
numberOfRanges
rangeAtIndex:
substringWithRange:
assetForAssetType:resourcePath:configVersion:
getConfigFileNameForAssetType:
defaultFallBackAssetForSmartSiriVolume
defaultFallBackAssetForHearst
defaultFallBackAssetForAdBlocker
defaultFallBackAssetPathForUres
parseCompatibilityFromConfigVersion:
isLeftConfigVersion:newerThanRightConfigVersion:
getBoolForKey:category:default:
getStringForKey:category:default:
containsKey:category:
containsCategory:
hashFromResourcePath
description
isEqualAsset:
stringForCurrentAssetProviderType
configVersion
assetProvider
_decodedInfo
_path
_resourcePath
_configVersion
_assetProvider
T@"NSString",R,N,V_path
T@"NSString",R,N,V_resourcePath
T@"NSDictionary",R,N
T@"NSString",R,N
T@"NSString",R,N,V_configVersion
TQ,R,N,V_assetProvider
bytes
dataWithBytes:length:
array
numberWithUnsignedLong:
dictionaryWithObjects:forKeys:count:
addObject:
initWithZeroWindowSize:approxAbsSpeechThreshold:numHostTicksPerAudioSample:
filterZerosInAudioPacket:atBufferHostTime:filteredPacket:
endAudioAndFetchAnyTrailingZerosPacket:
metrics
.cxx_construct
_audioZeroFilterImpl
sharedLogger
logCoreSpeechPreprocessorCompletedWithMHUUID:withMetricsDictionary:
logMHASRAudioConfigureStartedWithMHUUID:withAudioCodecString:withAudioSkippedTimeNs:
logMHAssistantDaemonAudioStartRecordingContextWithMHUUID:withStartRecordingContext:withFanInfoArray:withActiveSessionDisplayIDs:
logMHAssistantDaemonAudioInitContextWithMHUUID:withInitStarted:
logMHAssistantDaemonAudioConfigureContextWithMHUUID:withConfigureStarted:
logMHAssistantDaemonAudioPrepareContextWithMHUUID:withPrepareStarted:
logMHAssistantDaemonAudioPrewarmContextWithMHUUID:withPrewarmStarted:
logMHAssistantDaemonAudioStopRecordingContextWithMHUUID:withStopRecordingStarted:withADStopRecordingEvent:
logMHAssistantDaemonAudioSessionSetActivateContextWithMHUUID:withSetActivateStarted:
logMHAssistantDaemonAudioSessionSetInactiveWithMHUUID:withSetInactiveStarted:
logMHAssistantDaemonAudioFetchRouteContextWithMHUUID:withFetchRouteContextStarted:
logMHAssistantDaemonAudioRecordingContextWithMHUUID:withAudioRecordingStarted:withAudioInputRoute:withAudioSource:
logMHAssistantDaemonAudioRecordingMissedBufferDetectedWithMHUUID:
logMHAssistantDaemonAudioLateBufferDetectedWithMHUUID:withBufferReceiptTimeInNs:
logMHAssistantDaemonAudioRecordingFirstBufferWithMHUUID:withStartEvent:withFirstBufferStartTimeOffsetNs:withFirstBufferReceiptTimeOffsetNs:
logMHAssistantDaemonAudioRecordingLastBufferWithMHUUID:withStartEvent:withLastBufferStartTimeOffsetNs:withLastBufferReceiptTimeOffsetNs:
logMHAssistantDaemonAudioRecordingInterruptionContextWithMHUUID:withStartEvent:withLinkID:withAvAudioSessionInterruptorName:withAVAudioSessionInterrupterType:
logMHAssistantDaemonAudioRecordingInterruptionStartedTier1WithMHUUID:withLinkID:withActiveSessionDisplayIDs:
logMHAssistantDaemonAudioBluetoothInfoWithMHUUID:withWirelessSplitterSessionState:
sharedConnection
effectiveRestrictedBoolValueForSetting:
effectiveBoolValueForSetting:
supportRaiseToSpeak
supportHearstVoiceTrigger
supportPremiumWatchAssets
shouldRunVTOnCS
supportTTS
supportJarvisVoiceTrigger
supportBluetoothDeviceVoiceTrigger
UTF8String
rootQueueWithFixedPriority:
supportHybridEndpointer
initWithData:encoding:
characterSetWithCharactersInString:
componentsSeparatedByCharactersInSet:
dateWithTimeIntervalSinceNow:
stringFromDate:
supportContinuousVoiceTrigger
supportKeywordDetector
supportPremiumAssets
supportOpportunisticZLL
supportSelfTriggerSuppression:refChannelIdx:
supportCSTwoShotDecision
supportEndpointerWhileHostAsleep
supportSmartVolume
supportSAT
supportCompactPlus
isIOSDeviceSupportingBargeIn
supportAdBlocker
supportContinuousAudioFingerprint
supportPremiumModel
supportPhatic
shouldDelayPhaticForMyriadDecision
supportSessionActivateDelay
supportLanguageDetector
shouldDownloadVTAssetsOnDaemon
supportLazySessionActivation
supportMyriadLightHouse
supportAcousticProgressiveChecker
hasRemoteCoreSpeech
supportRemoraVoiceTrigger
shouldDeinterleaveAudioOnCS
supportCircularBuffer
supportBeepCanceller:
supportZeroFilter:
getFixedPrioritySerialQueueWithLabel:fixedPriority:
getFixedHighPrioritySerialQueueWithLabel:priority:
deviceProductType
deviceProductVersion
deviceIdentifier
systemUpTime
deviceUserAssignedName
deviceBuildVersion
deviceHwRevision
timeStampWithSaltGrain
supportsSpeakerRecognitionAssets
supportsSiriLiminal
supportHandsFree
supportsVoiceTriggerFides
supportsANE
supportsUnderstandingOnDevice
isAttentiveSiriEnabled
deviceRequirePowerAssertionHeld
initWithRecordType:deviceId:
setAlwaysUseRemoteBuiltInMic:
contextForServerInvoke
stringWithUTF8String:
recordTypeFromAVVCActivationMode:
copy
setType:
copyWithZone:
setDeviceId:
setIsRequestDuringActiveCall:
setTriggerEventInfo:
setTurnIdentifier:
setIsRequestFromSpokenNotification:
_createAVVCContextWithType:deviceId:
avvcActivationMode:
numberWithInteger:
setObject:forKey:
type
deviceId
isBuiltInVoiceTriggered
isHearstVoiceTriggered
isJarvisVoiceTriggered
isRemoraVoiceTriggered
isGibraltarVoiceTriggered
hasRemoteBuiltInMic
isHearstDoubleTapTriggered
string
recordTypeString:
appendFormat:
contextForHearstVoiceTriggerWithDeviceId:
contextForRemoraVoiceTriggerWithDeviceId:
contextForRemoraButtonTriggerWithDeviceId:
contextForOpportuneSpeakerListener
contextForOpportuneSpeakerListenerWithCall
contextForBuiltInVoiceTrigger
contextForJarvisWithDeviceId:
contextForBTLEWithDeviceId:
contextForVoiceTriggerTraining
contextForHomeButton
contextForDictation
defaultContext
initWithAVVCContext:
avvcContext
isEqual:
isVoiceTriggered
isVoiceTriggeredFromRemoteXPCDevice
isTriggeredFromHearst
isRTSTriggered
isHomePressed
isServerInvoked
isStarkTriggered
isDictation
isiOSButtonPress
isUIButtonPress
alwaysUseRemoteBuiltInMic
isRequestDuringActiveCall
triggerEventInfo
turnIdentifier
isRequestFromSpokenNotification
_alwaysUseRemoteBuiltInMic
_isRequestDuringActiveCall
_isRequestFromSpokenNotification
_type
_deviceId
_triggerEventInfo
_turnIdentifier
Tq,N,V_type
T@"NSString",&,N,V_deviceId
TB,N,V_alwaysUseRemoteBuiltInMic
TB,N,V_isRequestDuringActiveCall
T@"NSDictionary",&,N,V_triggerEventInfo
T@"NSString",&,N,V_turnIdentifier
T@"NSObject<OS_xpc_object>",R,N
TB,N,V_isRequestFromSpokenNotification
inputRecordingSampleRate
hostTimeFromSampleCount:anchorHostTime:anchorSampleCount:sampleRate:
sampleCountFromHostTime:anchorHostTime:anchorSampleCount:sampleRate:
processSampleCount:hostTime:
hostTimeFromSampleCount:
sampleCountFromHostTime:
anchorSampleCount
setAnchorSampleCount:
anchorHostTime
setAnchorHostTime:
_anchorSampleCount
_anchorHostTime
TQ,N,V_anchorSampleCount
TQ,N,V_anchorHostTime
countByEnumeratingWithState:objects:count:
removeObserver:
dealloc
addObserver:
_checkAllConditionsEnabled
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
CSEventMonitorDidReceiveEvent:
setCallback:
addConditions:
subscribeEventMonitor:
isEnabled
notifyCallback:option:
notifyCallbackWithOption:
_monitors
_conditions
_callback
initWithData:numChannels:numSamples:sampleByteDepth:startSampleCount:hostTime:arrivalHostTimeToAudioRecorder:wasBuffered:remoteVAD:
initWithBytes:length:
dataForChannel:
subdataWithRange:
dataWithLength:
dataWithCapacity:
appendData:
inputRecordingIsFloat
apply12dBGainToFloatBuffer:
apply12dBGainToShortBuffer:
numSamples
subChunkFrom:numSamples:
initWithData:numChannels:numSamples:sampleByteDepth:startSampleCount:hostTime:remoteVAD:
chunkForChannel:
dataWithRemoteVADWithScaleFactor:numAudioSamplesPerRemoteVAD:
remoteVADAvailable
subChunkFrom:numSamples:forChannel:
remoteVADSubChunkFrom:numSamples:numAudioSamplesPerRemoteVAD:
gainCompensatedChunk
skipSamplesAtStartSuchThatNumSamplesReceivedSoFar:reachesACountOf:completionHandler:
splitAudioChunkSuchThatNumSamplesReceivedSoFar:reachesACountOf:completionHandler:
data
sampleByteDepth
startSampleCount
hostTime
arrivalHostTimeToAudioRecorder
wasBuffered
remoteVAD
setRemoteVAD:
_wasBuffered
_data
_numSamples
_sampleByteDepth
_startSampleCount
_hostTime
_arrivalHostTimeToAudioRecorder
_remoteVAD
T@"NSData",R,N,V_data
TQ,R,N,V_numChannels
TQ,R,N,V_numSamples
TQ,R,N,V_sampleByteDepth
TQ,R,N,V_startSampleCount
TQ,R,N,V_hostTime
TQ,R,N,V_arrivalHostTimeToAudioRecorder
TB,R,N,V_wasBuffered
TB,R,N
T@"NSData",&,N,V_remoteVAD
initWithNumChannels:recordingDuration:samplingRate:audioTimeConverter:
addSamples:numSamples:atHostTime:
sampleCount
copySamplesFrom:to:
initWithNumChannels:recordingDuration:samplingRate:
addSamples:numSamples:
copySamplesFromHostTime:
copySamplesFrom:to:channelIdx:
copybufferFrom:to:
copyBufferWithNumSamplesCopiedIn:
reset
bufferLength
setBufferLength:
audioTimeConverter
setAudioTimeConverter:
_csAudioCircularBufferImpl
_bufferLength
_audioTimeConverter
TQ,N,V_bufferLength
T@"CSAudioTimeConverter",&,N,V_audioTimeConverter
inputRecordingSampleByteDepth
inputRecordingFramesPerPacket
sharedPreferences
fileLoggingIsEnabled
inputRecordingSampleRateNarrowBand
inputRecordingBytesPerFrame
inputRecordingBytesPerPacket
hearstNumberOfBytesPerChunk
hearstNumberOfSamplesPerChunk
inputRecordingNumberOfChannels
inputRecordingDurationInSecs
inputRecordingSampleBitDepth
EncryptionAudioSampleByteDepth
inputRecordingEncoderAudioQuality
inputRecordingSampleRateConverterAlgorithm
inputRecordingBufferDuration
audioConverterBitrate
channelForOutputReference
channelForProcessedInput
zeroFilterWindowSizeInMs
zeroFilterWindowSizeInMsForReport
zeroFilterApproxAbsSpeechThreshold
csAudioProcessingQueuePriority
daysBeforeRemovingLogFiles
remoteVADDuration
serverLoggingChannelBitset
defaultContinousFingerprintBufferDuration
UUID
UUIDString
initWithDescription:
_transaction
_description
setVoiceTriggerEventInfo:endpointId:
getVoiceTriggerEventInfoForEndpointId:
eventInfos
setEventInfos:
_eventInfos
T@"NSMutableDictionary",&,N,V_eventInfos
getHostClockFrequency
hostTimeToSeconds:
secondsToNs:
secondsToHostTime:
hostTimeToTimeInterval:
macHostTimeFromBridgeHostTime:
isReceivedTimeInterval:matchCurrentTimeInterval:
convertSampleCountToNs:sampleRate:
millisecondsToNs:
hostTimeToNs:
initWithLength:
mutableBytes
convertToFloatLPCMBufFromShortLPCMBuf:
audioDecoderDidDecodePackets:audioStreamHandleId:buffer:remoteVAD:timestamp:arrivalTimestampToAudioRecorder:wasBuffered:receivedNumChannels:
initWithInASBD:outASBD:
addPackets:audioStreamHandleId:remoteVAD:timestamp:arrivalTimestampToAudioRecorder:wasBuffered:receivedNumChannels:
delegate
setDelegate:
_decoder
_inASBD
_outASBD
_delegate
T@"<CSAudioDecoderDelegate>",W,V_delegate
_storeModeEnabled
setFileLoggingLevel:
fileLoggingLevel
intValue
baseDir
fileExistsAtPath:isDirectory:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
assistantLogDirectory
myriadHashDirectory
initWithName:timeout:
date
stringByReplacingOccurrencesOfString:withString:
floatValue
interstitialRelativeDirForLevel:
enableAudioInjection:withKey:
audioInjectionEnabledWithKey:
enumerateObjectsUsingBlock:
unsignedIntegerValue
smartSiriVolumeContextAwareEnabled
_isAdaptiveSiriVolumeDisabled
userIntentType
numberWithUnsignedLongLong:
userIntentTime
userIntentVolume
numberWithFloat:
latestVolumeTime
latestVolume
unsignedLongLongValue
setUserIntentType:
setUserIntentTime:
setUserIntentVolume:
setLatestVolumeTime:
setLatestVolume:
voiceTriggerEnabled
phraseSpotterEnabled
isAttentiveSiriAudioLoggingEnabled
twoShotNotificationEnabled
setFileLoggingIsEnabled:
disableAdaptiveSiriVolume:
voiceTriggerAudioLogDirectory
mhLogDirectory
ssvLogDirectory
getSSVLogFilePathWithSessionIdentifier:
trialBaseAssetDirectory
getCatAdBlockerAssetUpdateDirectory
assistantAudioFileLogDirectory
myriadHashFilePath
secondPassAudioLoggingEnabled
speakerRecognitionAudioLoggingEnabled
jarvisAudioLoggingEnabled
setJarvisTriggerMode:
getJarvisTriggerMode
startOfSpeechAudioLoggingEnabled
forceVoiceTriggerAPMode
forceVoiceTriggerAOPMode
getStartOfSpeechAudioLogFilePath
_isDirectory:
remoteVoiceTriggerDelayTime
remoteVoiceTriggerEndpointTimeoutWithDefault:
interstitialAbsoluteDirForLevel:
myriadFileLoggingEnabled
enableAudioInjection:
audioInjectionEnabled
enableProgrammableAudioInjection:
programmableAudioInjectionEnabled
setAudioInjectionFilePath:
audioInjectionFilePath
isPHSSupported
_isRemoteVoiceTriggerAvailable
isSpeakerRecognitionAvailable
speakerIdScoreReportingType
smartSiriVolumeSoftVolumeEnabled
smartSiriVolumeContextAwareLoggingEnabled
audioSessionActivationDelay
maxNumLoggingFiles
maxNumGradingFiles
useSiriActivationSPIForHomePod
useSiriActivationSPIForwatchOS
shouldOverwriteRemoteVADScore
overwritingRemoteVADScore
setHearstFirstPassModelVersion:
setHearstSecondPassModelVersion:
fakeHearstModelPath
companionSyncVoiceTriggerUtterancesEnabled
opportuneSpeakListenerBypassEnabled
bypassPersonalizedHeySiri
isMultiPhraseVTEnabled
isMultiChannelAudioLoggingEnabled
isAdBlockerAudioLoggingEnabled
isStaggeredCATDownloadEnabled
isSelfTriggerFileLoggingEnabled
setASVUserIntent:
getASVUserIntent:
invalidate
submitVoiceIdIssueReport:
submitAudioIssueReport:
submitVoiceTriggerIssueReport:
submitEndpointerIssueReport:
submitTrialIssueReport:
submitUresIssueReport:
_reset
_scaleDecayConstants:
_savePeaks:averagePower:maxSample:
peakValueSinceLastCall
setPeakValueSinceLastCall:
setSawNotANumber:
setSawInfinity:
_zapgremlins:
_linearToDB:
_ampToDB:
initWithSampleRate:
processShortBuffer:stride:inFrameToProcess:
processFloatBuffer:stride:inFrameToProcess:
getPeakPowerDB
getAveragePowerDB
_averagePowerI
_averagePowerF
_instantaneousMode
_peak
_maxPeak
_decay
_peakDecay
_averagePowerPeak
_peakHoldCount
_sampleRate
_previousBlockSize
_decay1
_peakDecay1
_clipping
bundleForClass:
bundlePath
dataWithContentsOfFile:options:error:
convertToShortLPCMBufFromFloatLPCMBuf:
beepCancellerDidCancelSamples:buffer:timestamp:
numberWithInt:
cancelBeepFromSamples:timestamp:
willBeep
flush
_beepCanceller
_beepFloatVec
_floatBuffer
_shortBuffer
_numTotalInputSamples
_numTotalOutputSamples
T@"<CSBeepCancellerDelegate>",W,N,V_delegate
logStartEventWithFirstPassStartedInfo:withMHUUID:
logTriggerEventWithVTEI:withMHUUID:
logRejectEventWithVTEI:withMHUUID:withSecondPassResult:
logCancelledEventWithMHUUID:
logTwoShotEndEventWithSuppresedAlert:withTimedOut:withMHUUID:
logTwoShotStartEventWithPromptType:withMHUUID:
logTwoShotDetectedWithMHUUID:
applyGain:toShortBuffer:
applyGain:toFloatBuffer:
applyNegative12dBGainToShortBuffer:
applyNegative12dBGainToFloatBuffer:
enter
leave
waitWithTimeout:
_dispatchGroup
_dispatchGroupCounter
voiceTriggerInfo
setVoiceTriggerInfo:
rtsTriggerInfo
setRtsTriggerInfo:
triggerNotifiedMachTime
setTriggerNotifiedMachTime:
remoteDeviceId
setRemoteDeviceId:
_voiceTriggerInfo
_rtsTriggerInfo
_triggerNotifiedMachTime
_remoteDeviceId
T@"NSDictionary",C,N,V_voiceTriggerInfo
T@"NSDictionary",C,N,V_rtsTriggerInfo
TQ,N,V_triggerNotifiedMachTime
T@"NSString",C,N,V_remoteDeviceId
@16@0:8
@24@0:8@16
v24@0:8@16
v16@0:8
@"NSObject<OS_dispatch_queue>"
@"NSMutableDictionary"
@"CSAudioTimeConverter"
f16@0:8
v20@0:8f16
Q16@0:8
v24@0:8Q16
I16@0:8
v20@0:8I16
@"NSArray"
@40@0:8Q16@24@32
@24@0:8Q16
@48@0:8Q16@24@32Q40
Q24@0:8@16
B32@0:8@16@24
@48@0:8@16@24@32Q40
@40@0:8@16@24@32
B36@0:8@16@24B32
B24@0:8@16
@"NSDictionary"
@"NSString"
@36@0:8Q16S24d28
Q40@0:8@16Q24^@32
Q24@0:8^@16
{unique_ptr<CSAudioZeroFilterImpl<unsigned short>, std::default_delete<CSAudioZeroFilterImpl<unsigned short>>>="__ptr_"{__compressed_pair<CSAudioZeroFilterImpl<unsigned short> *, std::default_delete<CSAudioZeroFilterImpl<unsigned short>>>="__value_"^v}}
v32@0:8@16@24
v36@0:8@16@24I32
v44@0:8@16B24@28@36
v28@0:8@16B24
v32@0:8@16B24S28
v36@0:8@16B24i28i32
v32@0:8@16Q24
v44@0:8@16B24Q28Q36
v52@0:8@16B24@28@36@44
v40@0:8@16@24@32
v28@0:8@16i24
B16@0:8
B32@0:8Q16Q24
B24@0:8Q16
@20@0:8i16
@28@0:8@16i24
d16@0:8
@24@0:8q16
@24@0:8^{_NSZone=}16
@32@0:8q16@24
q24@0:8q16
q16@0:8
v24@0:8q16
v20@0:8B16
v32@0:8Q16Q24
Q24@0:8Q16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v24@0:8@?16
v28@0:8B16Q20
@"NSMutableArray"
@84@0:8@16Q24Q32Q40Q48Q56Q64B72@76
@72@0:8@16Q24Q32Q40Q48Q56@64
@28@0:8f16Q20
@40@0:8Q16Q24Q32
@32@0:8Q16Q24
v40@0:8Q16Q24@?32
@"NSData"
@32@0:8Q16f24f28
@40@0:8Q16f24f28@32
v32@0:8r^v16Q24
v40@0:8r^v16Q24Q32
@24@0:8^Q16
{unique_ptr<corespeech::CSAudioCircularBufferImpl<unsigned short>, std::default_delete<corespeech::CSAudioCircularBufferImpl<unsigned short>>>="__ptr_"{__compressed_pair<corespeech::CSAudioCircularBufferImpl<unsigned short> *, std::default_delete<corespeech::CSAudioCircularBufferImpl<unsigned short>>>="__value_"^v}}
S16@0:8
i16@0:8
@"NSObject<OS_os_transaction>"
Q20@0:8f16
f24@0:8Q16
d24@0:8Q16
Q44@0:8Q16Q24Q32f40
B32@0:8d16d24
Q28@0:8Q16f24
@96@0:8{AudioStreamBasicDescription=dIIIIIIII}16{AudioStreamBasicDescription=dIIIIIIII}56
v64@0:8@16Q24@32Q40Q48B56I60
^{OpaqueAudioConverter=}
{AudioStreamBasicDescription="mSampleRate"d"mFormatID"I"mFormatFlags"I"mBytesPerPacket"I"mFramesPerPacket"I"mBytesPerFrame"I"mChannelsPerFrame"I"mBitsPerChannel"I"mReserved"I}
@"<CSAudioDecoderDelegate>"
d24@0:8d16
B20@0:8B16
B28@0:8B16^{__CFString=}20
B24@0:8^{__CFString=}16
@32@0:8@16d24
@20@0:8f16
v20@0:8i16
v32@0:8r^s16i24i28
v32@0:8r^f16i24i28
v28@0:8i16i20i24
v24@0:8^d16
@"CSAudioUnitMeterClipping"
{unique_ptr<BatchBeepCanceller, std::default_delete<BatchBeepCanceller>>="__ptr_"{__compressed_pair<BatchBeepCanceller *, std::default_delete<BatchBeepCanceller>>="__value_"^{BatchBeepCanceller}}}
{vector<float, std::allocator<float>>="__begin_"^f"__end_"^f"__end_cap_"{__compressed_pair<float *, std::allocator<float>>="__value_"^f}}
{vector<short, std::allocator<short>>="__begin_"^s"__end_"^s"__end_cap_"{__compressed_pair<short *, std::allocator<short>>="__value_"^s}}
@"<CSBeepCancellerDelegate>"
v40@0:8@16@24Q32
v32@0:8B16B20@24
v28@0:8I16@20
v28@0:8f16@20
q24@0:8Q16
@"NSObject<OS_dispatch_group>"
