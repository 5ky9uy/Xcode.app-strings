?456789:;<=
 !"#$%&'()*+,-./0123
UUUUUU
@333333
ABAddressBookErrorDomain
PolicyRejectionReason
RecordNotWritable
RecordPropertyNotWritable
SourceNotWritable
com.apple.AddressBookLegacy
AddressBook.framework was used before first unlock.
ABCAddressBookRef ABCCreateAddressBookWithDatabaseDirectoryAndForceInProcessMigrationInProcessLinkingAndResetSortKeys(CFStringRef, _Bool, _Bool, _Bool)
AddressBook.sqlitedb
:memory:
v8@?0
WHERE StoreID NOT IN (SELECT ROWID FROM ABStore)
PersonLink NOT IN (SELECT ROWID FROM ABPersonLink)
PersonLink = -1
WHERE Organization IS NOT NULL AND First IS NULL AND Last IS NULL AND Kind = 0
ERROR-FETCHING-BOOT-UUID
AddressBookMarkedForDeletion
isLocal
ABCDataBaseChangedExternallyNotification
com.apple.AddressBook.ABCAddressBookSaveWithConflictPolicy
Enabled != 0
_Bool ABCAddressBookSaveWithConflictPolicy(ABCAddressBookRef, ABConflictPolicy, CFErrorRef *)
Enabling the local source because no sources were enabled
<< Main thread:%@ | 
void ABCAddressBookInvalidateCaches(ABCAddressBookRef)
/Library/AddressBook/
Family
@16@?0@"NSString"8
Localized
void ABCStartSortDataReset(ABCAddressBookRef)
ABDatabaseDoctor
void ABStartDatabaseDoctor(ABCAddressBookRef)_block_invoke
(%@) ABStartDatabaseDoctor from %@
Error, could not create MachMessagePort for database doctor (%s); starting in-process migration
com.apple.ABDatabaseDoctor
In process migration of %ld records completed.
SortingCacheICUVersion
SortingCacheVersion
SortingCacheICUCollatorVersion
SortingCacheICUUCAVersion
SortingCacheForceReset
SortingCacheLanguage
BEGIN IMMEDIATE;
END;
void ABAddressBookRegisterExternalChangeCallback(ABCAddressBookRef, ABExternalChangeCallback, void *)
The external change callback was registered after the access status changed, invoking it now.
void ABAddressBookUnregisterExternalChangeCallback(ABAddressBookRef, ABExternalChangeCallback, void *)
void ABAddressBookRegisterChangeCallback(ABAddressBookRef, ABChangeCallback, void *)
ABAddressBookRegisterChangeCallback
ABCAddressBook.m
addressBookRef != __sharedAddressBook
void ABAddressBookUnregisterChangeCallback(ABAddressBookRef, ABChangeCallback, void *)
ABAddressBookUnregisterChangeCallback
ABAddressBookUnregisterAllChangeCallbacks
void ABAddressBookRevert(ABCAddressBookRef)
CFStringRef ABAddressBookCopyCollatorType(ABAddressBookRef, _Bool)
ABSearchCollationKey
ABCollationKey
search
CFArrayRef ABAddressBookCopySectionIndices(ABAddressBookRef)
SectionIndices
CFArrayRef ABAddressBookCopySectionHeaderDictionaries(ABAddressBookRef, CFArrayRef *, CFArrayRef *, UCollator *)
SectionHeaders
LanguageSortedSectionHeaders
LanguageSortedSectionHeaderSortKeys
Headers
CFDictionaryRef ABAddressBookCopyLocalizedSectionIndexDictionary(ABAddressBookRef)
LocalizedSectionIndices
CFDictionaryRef ABAddressBookCopyLocalizedSectionHeaderDictionary(ABAddressBookRef)
LocalizedSectionHeaders
CFStringRef ABAddressBookCopySectionNameTransform(ABAddressBookRef)
NameTransform
CFStringRef ABAddressBookCopySearchTransform(ABAddressBookRef)
SearchTransform
_Bool ABAddressBookShouldUseExtraTokenizations(ABAddressBookRef)
ABUseExtraTokenizations
The ABContactSections plist contains an entry of the wrong type for "ABUseExtraTokenizations" it should be a boolean value. Ignoring:
__ABDataBaseChangedByOtherProcessNotification
ABCAddressBook
_Bool _ABAddressBookDeleteAllRecordsWithStore(ABAddressBookRef, ABRecordRef, BOOL)
will delete "%@" recordID=%i, creating simulated crash report
 WHERE ROWID in (select group_id from ABGroupMembers where member_id = ?)
com.apple.AddressBook.MeCardChanged
ABCAddressBookDatabaseChanged
callback != NULL
AppleLanguages
ABContactSections
plist
WHERE ab_katakana_exclusively(FirstPhonetic) = 1 OR ab_katakana_exclusively(MiddlePhonetic) = 1 OR ab_katakana_exclusively(LastPhonetic) = 1 OR ab_katakana_exclusively(OrganizationPhonetic) = 1
_Bool _touchAllRecordsWithKatakanaPhoneticComponents(ABCAddressBook *)
Error touching record %@
UNKNOWN_PROPERTY
Name
Members
AddedMembersAndSubgroups
RemovedMembersAndSubgroups
FetchSortOrder
MembersAndSubgroups
Subgroups
ExternalIdentifier
StoreID
StoreReference
ExternalModificationTag
ExternalRepresentation
ExternalUUID
guid
WHERE StoreID = ?
v16@?0^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB}8
 ORDER BY Name COLLATE NOCASE
ABPerson
ABGroup
RECURSIVE
 WHERE ROWID IN (WITH %@ direct_members(groupid) AS (SELECT  abgm.group_id FROM ABGroupMembers abgm JOIN %@ abr ON abgm.member_type = %@ AND abgm.member_id = abr.ROWID WHERE abr.guid IN ( 
, ancestor_group(a_groupid) AS (SELECT groupid FROM direct_members UNION SELECT abgm.group_id FROM ABGroupMembers abgm JOIN ABGroup abg ON abgm.member_type = 1 AND abgm.member_id = abg.ROWID JOIN ancestor_group ag ON ag.a_groupid = abgm.member_id) SELECT a_groupid FROM ancestor_group)
 SELECT groupid FROM direct_members)
StoreID = %i
DELETE FROM ABGroupMembers WHERE group_id = ?;
%s %d
person
group
SELECT member_id, member_type FROM ABGroupMembers JOIN ABPerson on member_id = ABPerson.ROWID WHERE group_id = ? AND member_type = 0 ORDER BY FirstSortLanguageIndex, FirstSortSection, FirstSort;
SELECT member_id, member_type FROM ABGroupMembers JOIN ABPerson on member_id = ABPerson.ROWID WHERE group_id = ? AND member_type = 0 ORDER BY LastSortLanguageIndex, LastSortSection, LastSort;
SELECT member_id, member_type FROM ABGroupMembers WHERE group_id = ? AND member_type = 0;
SELECT member_id, member_type FROM ABGroupMembers WHERE group_id = ? AND member_type = 1;
SELECT member_id, member_type FROM ABGroupMembers WHERE group_id = ?;
INSERT INTO ABGroupMembers (group_id, member_type, member_id) VALUES (?, ?, ?);
DELETE FROM ABGroupMembers WHERE group_id = ? and member_id = ?;
record_id
format
data
derived_from_format
crop_x
crop_y
crop_width
AddressBookImages.sqlitedb
SELECT ROWID, record_id, crop_x, crop_y, crop_width, data FROM ABFullSizeImage WHERE record_id = ?;
SELECT ROWID, record_id, format, derived_from_format, data FROM ABThumbnailImage WHERE record_id = ? AND format = ?;
SELECT ROWID FROM ABThumbnailImage WHERE record_id = ? AND format = ?;
SELECT ROWID FROM ABThumbnailImage WHERE record_id = ?;
SELECT ROWID FROM ABFullSizeImage WHERE record_id = ?;
DELETE FROM ABThumbnailImage WHERE format = ? AND record_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
DELETE FROM ABThumbnailImage WHERE record_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
DELETE FROM ABFullSizeImage WHERE record_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
format = %d
SELECT record_id FROM ABThumbnailImage INDEXED BY ABImageRecordIDFormatIndex WHERE record_id = 1;
SELECT record_id FROM ABFullSizeImage INDEXED BY ABFullSizeImageRecordIDIndex WHERE record_id = 1;
ABThumbnailImage
ABFullSizeImage
CREATE UNIQUE INDEX IF NOT EXISTS ABImageRecordIDFormatIndex ON ABThumbnailImage(record_id, format);
CREATE UNIQUE INDEX IF NOT EXISTS ABFullSizeImageRecordIDIndex ON ABFullSizeImage(record_id);
PRAGMA page_size = 8192;
PRAGMA cache_size = 250;
void _databaseDeleted(CPSqliteDatabase *, CPSqliteDatabaseDeleteReason)
image database was deleted, %@
AddressBook
The image database was corrupt.
Open a radar to PEP Address Book and attach syslog, AB logs and /tmp/AddressBook*
CREATE INDEX IF NOT EXISTS ABImageRecordIDFormatIndex ON ABImage(record_id, format);
SELECT record_id, crop_x, crop_y, crop_width, crop_height, data FROM ABImage WHERE format=?;
SELECT record_id, crop_x, crop_y, crop_width, data FROM ABFullSizeImage;
INSERT OR IGNORE INTO ABFullSizeImage(record_id, crop_x, crop_y, crop_width, data) VALUES (?, ?, ?, ?, ?);
INSERT OR IGNORE INTO ABThumbnailImage(record_id, format, derived_from_format, data) VALUES (?, ?, 2, ?);
INSERT OR IGNORE INTO ABThumbnailImage(record_id, format, derived_from_format, data) SELECT record_id, format, 2, data FROM ABImage WHERE format IN (0, 1) AND record_id IN (SELECT record_id FROM ABImage WHERE format=2) AND data IS NOT NULL;
public.jpeg
DROP TABLE IF EXISTS ABImage;
ALTER TABLE ABThumbnailImage RENAME TO ABThumbnailImage_old;
CREATE TABLE ABThumbnailImage(record_id, format, derived_from_format, data);
INSERT OR IGNORE INTO ABThumbnailImage(record_id, format, derived_from_format, data) SELECT record_id, format, 2, data FROM ABThumbnailImage_old WHERE format != 5 AND data IS NOT NULL;
DROP TABLE IF EXISTS ABThumbnailImage_old;
SELECT record_id, data, ROWID FROM ABThumbnailImage WHERE format=?;
CREATE TABLE ABFullSizeImage(record_id, crop_x, crop_y, crop_width, data);
DELETE FROM ABThumbnailImage WHERE ROWID IN ( ?
_Bool _ABCImageStoreDeleteSyncThumbnailImagesWithRowIDs(CPSqliteConnection *, CFArrayRef)
error preparing delete statement for invalid sync thumbnails
SELECT COUNT(ROWID) FROM ABFullSizeImage WHERE record_id = ? AND data IS NOT NULL;
SELECT COUNT(ROWID) FROM ABFullSizeImage WHERE record_id = ?;
SELECT COUNT(ROWID) FROM ABThumbnailImage WHERE record_id = ? AND data IS NOT NULL;
SELECT COUNT(ROWID) FROM ABThumbnailImage WHERE record_id = ? AND format = ? AND data IS NOT NULL;
SELECT COUNT(ROWID) FROM ABThumbnailImage WHERE record_id = ?;
SELECT COUNT(ROWID) FROM ABThumbnailImage WHERE record_id = ? AND format = ?;
(NULL)
ABCMultiValue
ABMultiValueRef %p with %ld value(s)
<NULL>
    %ld: %@ (%p) - %@ (%p)
First
Last
Image
Phone
Email
Address
Middle
FirstPhonetic
MiddlePhonetic
LastPhonetic
Organization
Department
Date
Note
Kind
Sound
Birthday
JobTitle
Nickname
Prefix
Suffix
RelatedNames
FirstSort
LastSort
CreationDate
ModificationDate
CompositeNameFallback
SyntheticPropertiesReset
DisplayName
FirstSortSection
LastSortSection
FirstSortLanguageIndex
LastSortLanguageIndex
Search
PersonLink
ImageURI
IsPreferredName
NameOnlySearch
SocialProfile
GeoData
PhonemeData
AlternateBirthday
MapsData
FirstPronunciation
MiddlePronunciation
LastPronunciation
OrganizationPhonetic
OrganizationPronunciation
PreviousFamilyName
Changes
PreferredLikenessSource
PreferredPersonaIdentifier
LinkUUID
ImageData
ThumbnailData
ImageCropRect
FullscreenImageData
SyncImageData
IsPreferredImage
HasImageData
PreferredChannel
DowntimeWhitelist
ImageType
ImageHash
LinkToPersonUUID
PersonLinkUUID
MemojiMetadata
WHERE StoreID = ? 
 ORDER BY FirstSortLanguageIndex, FirstSortSection, FirstSort
 ORDER BY LastSortLanguageIndex, LastSortSection, LastSort
 ORDER BY ROWID
 WHERE IsPreferredName = 1
 ORDER BY FirstSortLanguageIndex, FirstSortSection, FirstSort LIMIT ? OFFSET ?
 ORDER BY LastSortLanguageIndex, LastSortSection, LastSort LIMIT ? OFFSET ?
_Bool ABCopyArrayOfSectionListOffsets(ABAddressBookRef, ABPersonSortOrdering, CFArrayRef *, CFArrayRef *, CFArrayRef *)
SELECT LanguageIndex, Section, 0, number FROM 
FirstSortSectionCountTotal
LastSortSectionCountTotal
 WHERE number > 0 ORDER BY LanguageIndex ASC, Section ASC;
CFArrayRef ABCCopyArrayOfKeyboardAutoCorrectionStrings(ABCAddressBookRef)
SELECT First,Last, Middle, Organization, JobTitle, Nickname FROM ABPerson
CFArrayRef ABAddressBookCopyArrayOfAllNamePhoneticPairs(ABCAddressBookRef)
SELECT Last,LastPhonetic,First,FirstPhonetic,Middle,MiddlePhonetic,Organization,JobTitle,Nickname FROM ABPerson
PersonLink IN (
IsPreferredName = 1
UPDATE ABPersonLink set PreferredImagePersonID = ? WHERE ROWID = ?;
CFIndex ABCPersonNameOrderPieces(ABPersonCompositeNameFormat, ABCPersonSortOrdering, int, void *, void *, void *, void *, void *, void *, void *, void **, CFIndex *)
CFArrayRef ABCPersonCopyNamePieces(ABCRecordRef, ABCPersonSortOrdering, CFIndex *)
FirstCharacterAfterLanguage
LastCharacter
INSERT OR REPLACE INTO ABPersonSearchKey (person_id, SearchKey, NameOnlySearchKey) VALUES (?, ?, ?);
MergeFacebookContacts
MergeFacebookContactsToSourceID
DeleteFacebookContacts
FacebookCheckDone
com.apple.account.facebookLegacy
%@ - %@
delete from ABMultiValue where     record_id in (select ROWID from ABPerson where storeid = ?)     and property = 22     and value like "%.facebook.com%";
delete from ABMultiValueEntry where parent_id in     (select abmv.UID from ABMultiValue as abmv join ABMultiValueEntry as abmve on abmv.UID = abmve.parent_id where         abmv.record_id in (select ROWID from ABPerson where StoreID = ?)         and abmv.property = 46         and abmve.key in (select ROWID from ABMultiValueEntryKey where value like "service")         and abmve.value like "facebook");
delete from ABMultiValue where     record_id in (select ROWID from ABPerson where storeid = ?)     and property = 46     and UID not in (select parent_id from ABMultiValueEntry);
select AccountIdentifier, abs.ROWID from ABAccount as aba join ABStore as abs on aba.ROWID = abs.AccountID;
ABCRecordSetValueAndReturnError
ABCRecord.c
value != NULL && CFGetTypeID(value) == CFStringGetTypeID() && CFStringGetLength(value) != 0
_Bool ABCRecordSetValueAndReturnError(ABCRecordRef, ABCPropertyID, CFTypeRef, ABCErrorRef *)
Someone tried to change property=%i on the local store. Please open a radar to PEP Address Book. %@
ABCPropertyType ABRecordTypeOfProperty(ABCRecordRef, ABCPropertyID)
UPDATE 
 SET 
 = ? WHERE ROWID = ?;
SELECT 
 FROM 
 WHERE ROWID = ?;
 = ?,
SELECT guid from ABPersonLink where ROWID = ?;
Can't return type callbacks for %d
PersonLinkerVersion
alter table ABStore rename to ABStore_old;
INSERT OR IGNORE INTO ABAccount (AccountIdentifier) SELECT DISTINCT AccountIdentifier FROM ABStore_old WHERE AccountIdentifier IS NOT NULL;
INSERT OR IGNORE INTO ABStore (ROWID, Name, Type, ConstraintsPath, ExternalModificationTag, StoreInternalIdentifier, AccountID) SELECT abs.ROWID, abs.Name, abs.Type, abs.ConstraintsPath, abs.ExternalModificationTag, abs.StoreInternalIdentifier, IFNULL(aba.ROWID, -1) FROM ABStore_old abs LEFT OUTER JOIN ABAccount aba ON abs.StoreInternalIdentifier = aba.AccountIdentifier;
INSERT OR IGNORE INTO ABStore (ROWID, Name, Type, ConstraintsPath, ExternalModificationTag, ExternalSyncTag, StoreInternalIdentifier, AccountID, Enabled, SyncData, MeIdentifier) SELECT abs.ROWID, abs.Name, abs.Type, abs.ConstraintsPath, abs.ExternalModificationTag, abs.ExternalSyncTag, abs.StoreInternalIdentifier, IFNULL(aba.ROWID, -1), abs.Enabled, abs.SyncData, abs.MeIdentifier FROM ABStore_old abs LEFT OUTER JOIN ABAccount aba ON abs.AccountIdentifier = aba.AccountIdentifier;
INSERT OR IGNORE INTO ABStore (ROWID, Name, Type, ConstraintsPath, ExternalModificationTag, ExternalSyncTag, StoreInternalIdentifier, AccountID, Enabled, SyncData) SELECT abs.ROWID, abs.Name, abs.Type, abs.ConstraintsPath, abs.ExternalModificationTag, abs.ExternalSyncTag, abs.StoreInternalIdentifier, IFNULL(aba.ROWID, -1), abs.Enabled, abs.SyncData FROM ABStore_old abs LEFT OUTER JOIN ABAccount aba ON abs.AccountIdentifier = aba.AccountIdentifier;
INSERT OR IGNORE INTO ABStore (ROWID, Name, Type, ConstraintsPath, ExternalModificationTag, ExternalSyncTag, StoreInternalIdentifier, AccountID, Enabled) SELECT abs.ROWID, abs.Name, abs.Type, abs.ConstraintsPath, abs.ExternalModificationTag, abs.ExternalSyncTag, abs.StoreInternalIdentifier, IFNULL(aba.ROWID, -1), abs.Enabled FROM ABStore_old abs LEFT OUTER JOIN ABAccount aba ON abs.AccountIdentifier = aba.AccountIdentifier;
INSERT OR IGNORE INTO ABStore (ROWID, Name, Type, ConstraintsPath, ExternalModificationTag, StoreInternalIdentifier, AccountID, Enabled) SELECT abs.ROWID, abs.Name, abs.Type, abs.ConstraintsPath, abs.ExternalModificationTag, abs.StoreInternalIdentifier, IFNULL(aba.ROWID, -1), abs.Enabled FROM ABStore_old abs LEFT OUTER JOIN ABAccount aba ON abs.AccountIdentifier = aba.AccountIdentifier;
INSERT OR IGNORE INTO ABStore (ROWID, Name, Type, ConstraintsPath, ExternalModificationTag, StoreInternalIdentifier, AccountID) SELECT abs.ROWID, abs.Name, abs.Type, abs.ConstraintsPath, abs.ExternalModificationTag, abs.StoreInternalIdentifier, IFNULL(aba.ROWID, -1) FROM ABStore_old abs LEFT OUTER JOIN ABAccount aba ON abs.AccountIdentifier = aba.AccountIdentifier;
UPDATE ABPerson SET StoreID = 0 WHERE StoreID = -1;
UPDATE ABGroup SET StoreID = 0 WHERE StoreID = -1;
update ABStore SET Type = Type - 1208 WHERE Type >= 1209;
drop table ABStore_old;
alter table ABAccount rename to ABAccount_old;
INSERT OR IGNORE INTO ABStore (ROWID, Name, ExternalIdentifier, Type, ConstraintsPath, ExternalModificationTag, ExternalSyncTag, StoreInternalIdentifier, AccountID, Enabled, SyncData, MeIdentifier, Capabilities, guid) SELECT ROWID, Name, ExternalIdentifier, Type, ConstraintsPath, ExternalModificationTag, ExternalSyncTag, StoreInternalIdentifier, AccountID, Enabled, SyncData, MeIdentifier, Capabilities, (ab_generate_guid()) FROM ABStore_old;
INSERT OR IGNORE INTO ABAccount (ROWID, AccountIdentifier, Flags, DefaultSourceID, guid) SELECT ROWID, AccountIdentifier, Flags, DefaultSourceID, (ab_generate_guid()) FROM ABAccount_old;
drop table ABAccount_old;
INSERT OR IGNORE INTO ABStore (ROWID, Name, ExternalIdentifier, Type, ConstraintsPath, ExternalModificationTag, ExternalSyncTag, StoreInternalIdentifier, AccountID, Enabled, SyncData, MeIdentifier, Capabilities, guid) SELECT ROWID, Name, ExternalIdentifier, Type, ConstraintsPath, ExternalModificationTag, ExternalSyncTag, StoreInternalIdentifier, AccountID, Enabled, SyncData, MeIdentifier, Capabilities, ab_repair_guid(guid) FROM ABStore_old;
INSERT OR IGNORE INTO ABAccount (ROWID, AccountIdentifier, Flags, DefaultSourceID, guid) SELECT ROWID, AccountIdentifier, Flags, DefaultSourceID, ab_repair_guid(guid) FROM ABAccount_old;
INSERT OR IGNORE INTO ABStore (ROWID, Name, ExternalIdentifier, Type, ConstraintsPath, ExternalModificationTag, ExternalSyncTag, StoreInternalIdentifier, AccountID, Enabled, SyncData, MeIdentifier, Capabilities, guid) SELECT ROWID, Name, ExternalIdentifier, Type, ConstraintsPath, ExternalModificationTag, ExternalSyncTag, StoreInternalIdentifier, AccountID, Enabled, SyncData, MeIdentifier, Capabilities, guid FROM ABStore_old;
INSERT OR IGNORE INTO ABAccount (ROWID, AccountIdentifier, Flags, DefaultSourceID, guid) SELECT ROWID, AccountIdentifier, Flags, DefaultSourceID, guid FROM ABAccount_old;
alter table ABGroup rename to ABGroup_old;
alter table ABGroupChanges rename to ABGroupChanges_old;
INSERT INTO ABGroupChanges (record, type, sequence_number, ExternalIdentifier, StoreID, guid) SELECT record, type, sequence_number, ExternalIdentifier, StoreID, guid FROM ABGroupChanges_old;
INSERT INTO ABGroup (ROWID, Name, ExternalIdentifier, StoreID, ExternalModificationTag, ExternalRepresentation, ExternalUUID, guid) SELECT ROWID, Name, ExternalIdentifier, StoreID, ExternalModificationTag, ExternalRepresentation, ExternalUUID, ab_repair_guid(guid) FROM ABGroup_old;
INSERT INTO ABGroupChanges (record, type, sequence_number, ExternalIdentifier, StoreID) SELECT record, type, -1, ExternalIdentifier, StoreID FROM ABGroupChanges_old;
INSERT INTO ABGroup (ROWID, Name, ExternalIdentifier, StoreID, ExternalModificationTag, ExternalRepresentation, ExternalUUID) SELECT ROWID, Name, ExternalIdentifier, StoreID, ExternalModificationTag, ExternalRepresentation, ExternalUUID FROM ABGroup_old;
INSERT INTO ABGroupChanges (record, type, sequence_number, ExternalIdentifier, StoreID) SELECT ROWID, type, -1, ExternalIdentifier, StoreID FROM ABGroupChanges_old;
INSERT OR IGNORE INTO ABGroup (ROWID, Name, ExternalIdentifier, StoreID) SELECT ROWID, Name, ExternalIdentifier, StoreID FROM ABGroup_old;
drop table ABGroup_old;
drop table ABGroupChanges_old;
drop table IF EXISTS ABGroupBasicChanges;
CPSqliteMigrationContinuation _migrationMigrateDatabase(CPSqliteDatabase *, CPSqliteConnection *, int, void *)
success=%@
DELETE FROM ABPersonSearchKey WHERE person_id NOT IN (SELECT ROWID FROM ABPerson);
alter table ABPerson rename to ABPerson_old;
alter table ABPersonChanges rename to ABPersonChanges_old;
alter table ABMultiValue rename to ABMultiValue_old;
INSERT INTO ABGroup (ROWID, Name, ExternalIdentifier, StoreID) SELECT ROWID, Name, NULL, 0 FROM ABGroup_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, 0 FROM ABPerson_old;
INSERT INTO ABGroupChanges (record, type, ExternalIdentifier, StoreID) SELECT ROWID, type, NULL, 0 FROM ABGroupChanges_old;
INSERT INTO ABPersonChanges (record, type, ExternalIdentifier, StoreID) SELECT ROWID, type, NULL, 0 FROM ABPersonChanges_old;
INSERT INTO ABStore (ROWID, Name, Type, ConstraintsPath, ExternalModificationTag, StoreInternalIdentifier, AccountIdentifier) SELECT ROWID, Name, Type, ConstraintsPath, ExternalModificationTag, StoreInternalIdentifier, NULL FROM ABStore_old;
INSERT INTO ABMultiValue (UID, record_id, property, identifier, label, value) SELECT UID, record_id, property, identifier, label, value FROM ABMultiValue_old;
drop table ABPerson_old;
drop table ABPersonChanges_old;
drop table IF EXISTS ABMultiValue_old;
SELECT count() FROM ABStore WHERE Type != %i and Type != %i and Type != %i and Type != %i and Type != %i;
SELECT count() FROM ABPerson WHERE Kind > %i;
DROP TABLE IF EXISTS ABStoreChanges;
UPDATE ABMultiValue SET identifier = -1 WHERE identifier = 0 AND Property = 16;
DROP TABLE IF EXISTS ABRecent;
DROP TABLE IF EXISTS ABPersonMultiValueDeletes;
com.apple.addressbook.migrator
DELETE FROM ABMultiValueEntry WHERE parent_id IN (SELECT UID FROM ABMultiValue WHERE record_id = ?);
DELETE FROM ABMultiValue WHERE record_id = ?;
TEXT
INTEGER
REAL
TIMESTAMP
BLOB
 PRIMARY KEY
CREATE TABLE IF NOT EXISTS ABGroupMembers (UID INTEGER PRIMARY KEY, group_id INTEGER, member_type INTEGER, member_id INTEGER, UNIQUE(group_id, member_type, member_id));
SELECT ABMultiValue.value from ABMultiValue WHERE record_id = ? AND property = ?;
SELECT group_concat(ABMultiValue.value, ' ') from ABMultiValue WHERE record_id = ? AND property = ?;
SELECT group_concat(mve.value, ' ') FROM ABMultiValue mv, ABMultiValueEntry mve, ABMultiValueEntryKey mvek WHERE mv.record_id = ? AND mve.parent_id = mv.UID AND mv.property = ? AND mvek.rowid = mve.key AND ( 
mvek.value = ? 
INSERT OR REPLACE INTO ABPersonFullTextSearch(rowid) VALUES( ? )
UPDATE ABPersonFullTextSearch SET 
 = ? 
, SupplementalCompositeNameTerms = ? 
WHERE rowid = ?
DELETE FROM ABPersonFullTextSearch WHERE rowid = ?
DROP TABLE IF EXISTS ABPersonFullTextSearch;
table drop: %d
collator="%@"
CREATE VIRTUAL TABLE IF NOT EXISTS ABPersonFullTextSearch USING fts4(tokenize=ab_cf_tokenizer language="%@" %@, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, OrganizationPhonetic, Department, Note, Birthday, JobTitle, Nickname, Prefix, Suffix, DisplayName, Phone, Email, Address, SocialProfile, URL, RelatedNames, IM, Date, SupplementalCompositeNameTerms);
SELECT UID, identifier, record_id, (SELECT value FROM ABMultiValueLabel WHERE ROWID = label), value, guid FROM ABMultiValue WHERE record_id 
= ? 
IN (
AND property+0 = ?;
Error fetching multivalue entries: %d
%s: invalid property type for %d
ABCDBContextFetchMultiValuePropertyIntoRecords
guid IN (
 OR PersonLink in (select abpl.rowid from ABPersonLink abpl where abpl.guid in (
SELECT value, record_id, identifier, (SELECT value FROM ABMultiValueLabel WHERE ROWID = label) FROM ABMultiValue WHERE UID IN (SELECT multivalue_id FROM ABPhoneLastFour WHERE value = ?);
SELECT value, record_id, identifier FROM ABMultiValue WHERE 
UID IN (SELECT multivalue_id FROM ABPhoneLastFour WHERE 
value = ? 
 AND
 (1 == has_sort_key_prefix(
abs.NameOnlySearchKey
abs.SearchKey
, 1))
, 0))
SELECT ROWID, First, Last, Middle, Organization, Kind, Prefix, Suffix, CompositeNameFallback 
ABCIteratePeopleMatchingStringWithCallbacks
ABCDBContext.m
CFArrayGetCount(results) == 0
, identifier, abv.value, abv.label
, identifier
 FROM ABPersonSearchKey abs JOIN ABPerson abp ON abs.person_id = abp.ROWID JOIN ABMultiValue abv ON abp.ROWID = abv.record_id WHERE
 FROM ABPersonSearchKey abs JOIN ABPerson abp ON abs.person_id = abp.ROWID WHERE
 AND abv.property+0 = ?
 ORDER BY FirstSortLanguageIndex+0, FirstSortSection, FirstSort
 ORDER BY LastSortLanguageIndex+0, LastSortSection, LastSort
, record_id, identifier
error
void _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(ABCDBContextRef, CFStringRef, ABCPersonSortOrdering, ABCPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *, ABCCancellationCallback, void *)
Searching for %@ with property %i (%@):
%@ (%i) - %@ (%i)
%@ (%i) - identifier %i
%@ (%i) - %@
%@ (%i)
No results found.
------
, abv.value, abl.value from ABPerson abp JOIN ABMultiValue abv ON abp.ROWID = abv.record_id LEFT OUTER JOIN ABMultiValueLabel abl ON abv.label = abl.ROWID WHERE abv.property = ? LIMIT ? OFFSET ?;
SELECT record_id, value, identifier, (SELECT value FROM ABMultiValueLabel WHERE ROWID = label) FROM ABMultiValue WHERE property = ? AND value LIKE ?;
SELECT record_id, value, identifier FROM ABMultiValue WHERE property = ? AND value LIKE ?;
SELECT record_id, identifier FROM ABMultiValue WHERE property = ? AND value COLLATE NOCASE = ?
select mvl.value from ABMultiValueLabel mvl where ROWID in (select distinct label from ABMultiValue WHERE property = %i);
SELECT value FROM ABMultiValueLabel;
DELETE FROM ABMultiValueLabel WHERE value = ?;
INSERT INTO ABPersonMultiValueDeletes VALUES(?, ?, ?, ?, ?, ?);
Error %d performing multivalue delete log statement: %s
Error %d preparing multivalue delete log statement: %s
SELECT ROWID, record_id, property_id, identifier, sequence_number
, record_uid, identifier_uid
 FROM ABPersonMultiValueDeletes
 WHERE record_id IN (SELECT ROWID FROM ABPerson WHERE StoreID = ?) AND sequence_number > ? AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)
 ORDER BY ROWID ASC;
DELETE FROM ABPersonMultiValueDeletes WHERE sequence_number <= ? AND record_id IN (SELECT ROWID FROM ABPerson WHERE StoreID = ?);
DELETE FROM ABPersonMultiValueDeletes WHERE sequence_number <= ?;
 WHERE 
StoreID == ? 
 AND 
ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicates
count == CFArrayGetCount(values)
AB: Could not compile statement for query (ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicates):
ExternalIdentifier IN 
 ( ?
ExternalIdentifier = ?
ExternalUUID IN 
ExternalUUID = ?
 = NULL
SELECT record_id FROM ABMultiValue INDEXED BY ABMultiValueRecordIDIndex WHERE record_id = 1;
SELECT label FROM ABMultiValue INDEXED BY ABMultiValueLabelIndex WHERE label = 1;
SELECT key FROM ABMultiValueEntry INDEXED BY ABMultiValueEntryKeyIndex WHERE key = 1;
SELECT value FROM ABPhoneLastFour INDEXED BY ABPhoneLastFourIndex WHERE value = 1;
SELECT property FROM ABMultiValue INDEXED BY ABMultiValuePropertyValueIndex WHERE property = 1;
SELECT FirstSortLanguageIndex FROM ABPerson INDEXED BY ABFirstSortIndex WHERE FirstSortLanguageIndex = 1;
SELECT LastSortLanguageIndex FROM ABPerson INDEXED BY ABLastSortIndex WHERE LastSortLanguageIndex = 1;
SELECT StoreID FROM ABPerson INDEXED BY ABFirstSortStoreIndex WHERE StoreID = 1;
SELECT StoreID FROM ABPerson INDEXED BY ABLastSortStoreIndex WHERE StoreID = 1;
SELECT PersonLink FROM ABPerson INDEXED BY ABPersonPersonLinkIndex WHERE PersonLink = 1;
SELECT IsPreferredName FROM ABPerson INDEXED BY ABPreferredFirstSortIndex WHERE IsPreferredName = 1;
SELECT IsPreferredName FROM ABPerson INDEXED BY ABPreferredLastSortIndex WHERE IsPreferredName = 1;
CNSuggestedContactStore
SortingCacheLanguageShadow
CREATE TABLE ABAccount (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, AccountIdentifier TEXT, Flags INTEGER, DefaultSourceID INTEGER, guid TEXT NOT NULL DEFAULT (ab_generate_guid()), UNIQUE(guid));
CREATE TABLE ABGroup (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, ExternalIdentifier TEXT, StoreID INTEGER, ExternalModificationTag TEXT, ExternalRepresentation BLOB, ExternalUUID TEXT, guid TEXT NOT NULL DEFAULT (ab_generate_guid()), UNIQUE(guid));
CREATE TABLE ABGroupChanges (record INTEGER, type INTEGER, sequence_number INTEGER, ExternalIdentifier TEXT, StoreID INTEGER, guid TEXT);
alter table ABPersonLink rename to ABPersonLink_old;
alter table ABPersonSearchKey rename to ABPersonSearchKey_old;
_Bool _recreatePersonTables(CPSqliteConnection *, int)
result=%@
INSERT INTO ABPersonLink (ROWID, PreferredImagePersonID, PreferredNamePersonID, guid) SELECT ROWID, PreferredImagePersonID, PreferredNamePersonID, ab_repair_guid(guid) FROM ABPersonLink_old;
INSERT INTO ABPersonLink (ROWID, PreferredImagePersonID, PreferredNamePersonID, guid) SELECT ROWID, -1, -1, ab_repair_guid(guid) FROM ABPersonLink_old;
INSERT INTO ABPersonLink (ROWID, PreferredImagePersonID, PreferredNamePersonID) SELECT ROWID, NULL, NULL FROM ABPersonLink_old;
INSERT INTO ABPersonLink (ROWID, PreferredImagePersonID, PreferredNamePersonID) SELECT ROWID, PreferredImagePersonID, PreferredNamePersonID FROM ABPersonLink_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, guid, PhonemeData, AlternateBirthday, MapsData, FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier, PreferredChannel, DowntimeWhitelist, ImageType, ImageHash, MemojiMetadata) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, ab_repair_guid(guid), PhonemeData, AlternateBirthday, MapsData , FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier, PreferredChannel, DowntimeWhitelist, ImageType, ImageHash, MemojiMetadata FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, guid, PhonemeData, AlternateBirthday, MapsData, FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier, PreferredChannel, DowntimeWhitelist, ImageType, ImageHash) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, ab_repair_guid(guid), PhonemeData, AlternateBirthday, MapsData , FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier, PreferredChannel, DowntimeWhitelist, ImageType, ImageHash FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, guid, PhonemeData, AlternateBirthday, MapsData, FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier, PreferredChannel, DowntimeWhitelist) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, ab_repair_guid(guid), PhonemeData, AlternateBirthday, MapsData , FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier, PreferredChannel, DowntimeWhitelist FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, guid, PhonemeData, AlternateBirthday, MapsData, FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier, PreferredChannel) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, ab_repair_guid(guid), PhonemeData, AlternateBirthday, MapsData , FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier, PreferredChannel FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, guid, PhonemeData, AlternateBirthday, MapsData, FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, ab_repair_guid(guid), PhonemeData, AlternateBirthday, MapsData , FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, guid, PhonemeData, AlternateBirthday, MapsData, FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, ab_repair_guid(guid), PhonemeData, AlternateBirthday, MapsData , FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, guid, PhonemeData, AlternateBirthday, MapsData) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, ab_repair_guid(guid), PhonemeData, AlternateBirthday, MapsData FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, guid, PhonemeData, AlternateBirthday) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, ab_repair_guid(guid), PhonemeData, AlternateBirthday FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, guid) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, ab_repair_guid(guid) FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier FROM ABPerson_old;
INSERT INTO ABPersonChanges (record, type, sequence_number, Image, ExternalIdentifier, StoreID, PersonLink, guid, Changes, LinkToPersonUUID, PersonLinkUUID)SELECT record, type, sequence_number, Image, ExternalIdentifier, StoreID, PersonLink, guid, Changes, LinkToPersonUUID, PersonLinkUUID FROM ABPersonChanges_old;
INSERT INTO ABPersonChanges (record, type, sequence_number, Image, ExternalIdentifier, StoreID, PersonLink, guid)SELECT record, type, sequence_number, Image, ExternalIdentifier, StoreID, PersonLink, guid FROM ABPersonChanges_old;
INSERT INTO ABPersonChanges (record, type, sequence_number, Image, ExternalIdentifier, StoreID, PersonLink, guid) SELECT record, type, sequence_number, Image, ExternalIdentifier, StoreID, -1, guid FROM ABPersonChanges_old;
INSERT INTO ABPersonChanges (record, type, sequence_number, Image, ExternalIdentifier, StoreID) SELECT record, type, -1, Image, ExternalIdentifier, StoreID FROM ABPersonChanges_old;
INSERT INTO ABPersonSearchKey (person_id, SearchKey, NameOnlySearchKey) SELECT person_id, value, NULL FROM ABPersonSearchKey_old;
drop table IF EXISTS ABPerson_old;
drop table IF EXISTS ABPersonChanges_old;
drop table IF EXISTS ABPersonLink_old;
drop table IF EXISTS ABPersonSearchKey_old;
drop table IF EXISTS ABPersonBasicChanges;
CREATE TABLE ABPerson (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, First TEXT, Last TEXT, Middle TEXT, FirstPhonetic TEXT, MiddlePhonetic TEXT, LastPhonetic TEXT, Organization TEXT, Department TEXT, Note TEXT, Kind INTEGER, Birthday TEXT, JobTitle TEXT, Nickname TEXT, Prefix TEXT, Suffix TEXT, FirstSort TEXT, LastSort TEXT, CreationDate INTEGER, ModificationDate INTEGER, CompositeNameFallback TEXT, ExternalIdentifier TEXT, ExternalModificationTag TEXT, ExternalUUID TEXT, StoreID INTEGER, DisplayName TEXT, ExternalRepresentation BLOB, FirstSortSection TEXT, LastSortSection TEXT, FirstSortLanguageIndex INTEGER DEFAULT 2147483647, LastSortLanguageIndex INTEGER DEFAULT 2147483647, PersonLink INTEGER DEFAULT -1, ImageURI TEXT, IsPreferredName INTEGER DEFAULT 1, guid TEXT NOT NULL DEFAULT (ab_generate_guid()), PhonemeData TEXT, AlternateBirthday TEXT, MapsData TEXT, FirstPronunciation TEXT, MiddlePronunciation TEXT, LastPronunciation TEXT, OrganizationPhonetic TEXT, OrganizationPronunciation TEXT, PreviousFamilyName TEXT, PreferredLikenessSource TEXT, PreferredPersonaIdentifier TEXT, PreferredChannel TEXT, DowntimeWhitelist TEXT, ImageType TEXT, ImageHash BLOB, MemojiMetadata BLOB, UNIQUE(guid));
CREATE TABLE ABPersonChanges (record INTEGER, type INTEGER, sequence_number INTEGER, Image INTEGER, ExternalIdentifier TEXT, StoreID INTEGER, PersonLink INTEGER, guid TEXT, Changes INTEGER, LinkToPersonUUID TEXT, PersonLinkUUID TEXT);
CREATE TABLE ABPersonLink (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, PreferredImagePersonID INTEGER DEFAULT -1, PreferredNamePersonID INTEGER DEFAULT -1, guid TEXT NOT NULL DEFAULT (ab_generate_guid()), UNIQUE(guid));
CREATE TABLE IF NOT EXISTS ABPersonSearchKey (person_id INTEGER, SearchKey BLOB, NameOnlySearchKey BLOB, UNIQUE(person_id));
DROP INDEX IF EXISTS ABFirstSortIndex;
CREATE INDEX IF NOT EXISTS ABFirstSortIndex on ABPerson(FirstSortLanguageIndex, FirstSortSection, FirstSort);
DROP INDEX IF EXISTS ABLastSortIndex;
CREATE INDEX IF NOT EXISTS ABLastSortIndex on ABPerson(LastSortLanguageIndex, LastSortSection, LastSort);
DROP INDEX IF EXISTS ABFirstSortStoreIndex;
DROP INDEX IF EXISTS ABFirstSortStore;
CREATE INDEX IF NOT EXISTS ABFirstSortStoreIndex on ABPerson(StoreID, FirstSortLanguageIndex, FirstSortSection, FirstSort);
DROP INDEX IF EXISTS ABLastSortStoreIndex;
CREATE INDEX IF NOT EXISTS ABLastSortStoreIndex on ABPerson(StoreID, LastSortLanguageIndex, LastSortSection, LastSort);
DROP TRIGGER IF EXISTS DeletePersonLink;
DROP TRIGGER IF EXISTS UpdatePersonLink;
DROP TRIGGER IF EXISTS UpdatePersonLinkUponPersonUnlink;
DROP TRIGGER IF EXISTS UpdatePersonUponLinkDeletion;
DROP TRIGGER IF EXISTS UpdatePersonUponLinkInsertion;
DROP TRIGGER IF EXISTS UpdatePersonUponLinkUpdate;
CREATE TRIGGER IF NOT EXISTS DeletePersonLink AFTER DELETE ON ABPerson BEGIN DELETE FROM ABPersonLink WHERE (ROWID = OLD.PersonLink AND (SELECT count() FROM ABPerson WHERE PersonLink = OLD.PersonLink) < 2); END;
CREATE TRIGGER IF NOT EXISTS UpdatePersonLink AFTER UPDATE OF PersonLink ON ABPerson BEGIN DELETE FROM ABPersonLink WHERE (ROWID = OLD.PersonLink AND (SELECT count() FROM ABPerson WHERE PersonLink = OLD.PersonLink) < 2); END;
CREATE TRIGGER IF NOT EXISTS UpdatePersonLinkUponPersonUnlink AFTER UPDATE OF PersonLink ON ABPerson WHEN OLD.PersonLink != -1 AND NEW.PersonLink = -1 BEGIN UPDATE ABPersonLink SET PreferredNamePersonID = (SELECT ROWID FROM ABPerson abp WHERE abp.PersonLink = OLD.PersonLink ORDER BY abp.ROWID LIMIT 1) WHERE (ROWID = OLD.PersonLink AND PreferredNamePersonID = OLD.ROWID); END;
CREATE TRIGGER IF NOT EXISTS UpdatePersonUponLinkDeletion AFTER DELETE ON ABPersonLink BEGIN     UPDATE ABPerson SET PersonLink = -1, IsPreferredName = 1 WHERE PersonLink = OLD.ROWID; END;
CREATE TRIGGER IF NOT EXISTS UpdatePersonUponLinkInsertion AFTER INSERT ON ABPersonLink 
BEGIN 
    UPDATE ABPerson SET IsPreferredName = ab_update_value_from_trigger(ROWID = NEW.PreferredNamePersonID, 'IsPreferredName', ROWID) WHERE PersonLink = NEW.ROWID; 
END; 
CREATE TRIGGER IF NOT EXISTS UpdatePersonUponLinkUpdate AFTER UPDATE ON ABPersonLink 
BEGIN 
    UPDATE ABPerson SET IsPreferredName = ab_update_value_from_trigger(ROWID = NEW.PreferredNamePersonID, 'IsPreferredName', ROWID) WHERE PersonLink = NEW.ROWID; 
END; 
DROP TRIGGER IF EXISTS NamePreferredPersonInsertTrigger;
DROP TRIGGER IF EXISTS NamePreferredPersonDeleteTrigger;
DROP TRIGGER IF EXISTS NamePreferredPersonEditTrigger;
CREATE TRIGGER IF NOT EXISTS NamePreferredPersonEditTrigger AFTER UPDATE OF Prefix, First, Middle, Last, Suffix, Organization, Kind ON ABPerson WHEN ((OLD.Prefix IS NOT NEW.Prefix) OR (OLD.First IS NOT NEW.First) OR (OLD.Middle IS NOT NEW.Middle) OR (OLD.Last IS NOT NEW.Last) OR (OLD.Suffix IS NOT NEW.Suffix) OR (OLD.Organization IS NOT NEW.Organization) OR (OLD.Kind IS NOT NEW.Kind)) BEGIN UPDATE ABPersonLink SET PreferredNamePersonID = OLD.ROWID WHERE (OLD.PersonLink = ROWID); END;
CREATE TRIGGER IF NOT EXISTS NamePreferredPersonInsertTrigger AFTER INSERT ON ABPerson BEGIN UPDATE ABPersonLink SET PreferredNamePersonID = NEW.ROWID WHERE (ROWID = NEW.PersonLink AND PreferredNamePersonID = -1); END;
CREATE TRIGGER IF NOT EXISTS NamePreferredPersonDeleteTrigger AFTER DELETE ON ABPerson BEGIN UPDATE ABPersonLink SET PreferredNamePersonID = (SELECT ROWID FROM ABPerson abp WHERE abp.PersonLink = OLD.PersonLink ORDER BY abp.ROWID LIMIT 1) WHERE (ROWID = OLD.PersonLink AND PreferredNamePersonID = OLD.ROWID); END;
DROP INDEX IF EXISTS ABPersonPersonLinkIndex;
CREATE INDEX ABPersonPersonLinkIndex on ABPerson(PersonLink);
DROP INDEX IF EXISTS ABPreferredFirstSortIndex;
CREATE INDEX ABPreferredFirstSortIndex on ABPerson(IsPreferredName, FirstSortLanguageIndex, FirstSortSection, FirstSort);
DROP INDEX IF EXISTS ABPreferredLastSortIndex;
CREATE INDEX ABPreferredLastSortIndex on ABPerson(IsPreferredName, LastSortLanguageIndex, LastSortSection, LastSort);
DROP TRIGGER IF EXISTS UpdatePersonLinkField;
CREATE TRIGGER IF NOT EXISTS UpdatePersonLinkField AFTER UPDATE OF PersonLink ON ABPerson 
WHEN OLD.PersonLink != NEW.PersonLink 
BEGIN 
    UPDATE ABPerson 
    SET IsPreferredName = ab_update_value_from_trigger((NEW.PersonLink = -1 OR ROWID = (SELECT PreferredNamePersonID FROM ABPersonLink abl WHERE abl.ROWID = NEW.PersonLink)), 'IsPreferredName', ROWID) 
    WHERE ROWID = NEW.ROWID; 
END; 
DROP TRIGGER IF EXISTS InitializePersonLinkField;
CREATE TRIGGER IF NOT EXISTS InitializePersonLinkField AFTER INSERT ON ABPerson 
BEGIN 
    UPDATE ABPerson 
    SET IsPreferredName = ab_update_value_from_trigger((NEW.PersonLink = -1 OR ROWID = (SELECT PreferredNamePersonID FROM ABPersonLink abl WHERE abl.ROWID = NEW.PersonLink)), 'IsPreferredName', ROWID) 
    WHERE ROWID = NEW.ROWID; 
END;
DROP TRIGGER IF EXISTS DeleteSearchKey;
CREATE TRIGGER IF NOT EXISTS DeleteSearchKey AFTER DELETE ON ABPerson BEGIN DELETE FROM ABPersonSearchKey WHERE person_id = OLD.ROWID; END;
DROP INDEX IF EXISTS ABPersonExternalUUIDIndex;
CREATE INDEX ABPersonExternalUUIDIndex on ABPerson(ExternalUUID);
DROP INDEX IF EXISTS ABPersonExternalIdentifierIndex;
CREATE INDEX ABPersonExternalIdentifierIndex on ABPerson(ExternalIdentifier);
DROP TRIGGER IF EXISTS create_index_entry;
DROP TRIGGER IF EXISTS delete_index_entry;
DROP TRIGGER IF EXISTS update_index_First;
DROP TRIGGER IF EXISTS update_index_Last;
DROP TRIGGER IF EXISTS update_index_Middle;
DROP TRIGGER IF EXISTS update_index_FirstPhonetic;
DROP TRIGGER IF EXISTS update_index_MiddlePhonetic;
DROP TRIGGER IF EXISTS update_index_LastPhonetic;
DROP TRIGGER IF EXISTS update_index_Organization;
DROP TRIGGER IF EXISTS update_index_Department;
DROP TRIGGER IF EXISTS update_index_Note;
DROP TRIGGER IF EXISTS update_index_JobTitle;
DROP TRIGGER IF EXISTS update_index_Nickname;
DROP TRIGGER IF EXISTS update_index_Prefix;
DROP TRIGGER IF EXISTS update_index_Suffix;
DROP TRIGGER IF EXISTS update_index_DisplayName;
DROP TRIGGER IF EXISTS search_index_ABMultiValueEntry_insert;
DROP TRIGGER IF EXISTS search_index_ABMultiValueEntry_update;
DROP TRIGGER IF EXISTS search_index_ABMultiValue_insert;
DROP TRIGGER IF EXISTS search_index_ABMultiValue_update;
DROP TRIGGER IF EXISTS search_index_ABMultiValue_delete;
DROP TABLE IF EXISTS sorting_first_section_list
DROP TABLE IF EXISTS FirstSortSectionCount;
CREATE TABLE IF NOT EXISTS FirstSortSectionCount(LanguageIndex, Section TEXT, StoreID, number, UNIQUE(LanguageIndex, Section, StoreID));
DROP TABLE IF EXISTS sorting_last_section_list
DROP TABLE IF EXISTS LastSortSectionCount;
CREATE TABLE IF NOT EXISTS LastSortSectionCount(LanguageIndex, Section TEXT, StoreID, number, UNIQUE(LanguageIndex, Section, StoreID));
DROP TABLE IF EXISTS FirstSortSectionCountTotal;
CREATE TABLE IF NOT EXISTS FirstSortSectionCountTotal(LanguageIndex, Section TEXT, Type INT, number, UNIQUE(LanguageIndex, Section, Type));
DROP TABLE IF EXISTS LastSortSectionCountTotal;
CREATE TABLE IF NOT EXISTS LastSortSectionCountTotal(LanguageIndex, Section TEXT, Type INT, number, UNIQUE(LanguageIndex, Section, Type));
Error creating section tables: %d
DROP TRIGGER IF EXISTS sorting_first_prefix_trigger;
DROP TRIGGER IF EXISTS FirstSortSectionInsert;
CREATE TRIGGER IF NOT EXISTS FirstSortSectionInsert AFTER INSERT ON ABPerson BEGIN INSERT OR REPLACE INTO FirstSortSectionCount VALUES(NEW.FirstSortLanguageIndex, IFNULL(NEW.FirstSortSection, ''), NEW.StoreID, 1 + IFNULL((SELECT number from FirstSortSectionCount WHERE LanguageIndex = NEW.FirstSortLanguageIndex AND Section = IFNULL(NEW.FirstSortSection, '') AND StoreID = NEW.StoreID), 0)); END;
DROP TRIGGER IF EXISTS update_first_prefix_trigger;
DROP TRIGGER IF EXISTS FirstSortSectionUpdate;
CREATE TRIGGER IF NOT EXISTS FirstSortSectionUpdate AFTER UPDATE ON ABPerson BEGIN INSERT OR REPLACE INTO FirstSortSectionCount VALUES(OLD.FirstSortLanguageIndex, IFNULL(OLD.FirstSortSection, ''), OLD.StoreID, (SELECT number from FirstSortSectionCount WHERE LanguageIndex = OLD.FirstSortLanguageIndex AND Section = IFNULL(OLD.FirstSortSection, '') AND StoreID = OLD.StoreID) - 1); DELETE FROM FirstSortSectionCount WHERE LanguageIndex = OLD.FirstSortLanguageIndex AND Section = IFNULL(OLD.FirstSortSection, '') AND StoreID = OLD.StoreID AND number = 0; INSERT OR REPLACE INTO FirstSortSectionCount VALUES(NEW.FirstSortLanguageIndex, IFNULL(NEW.FirstSortSection, ''), NEW.StoreID, 1 + IFNULL((SELECT number from FirstSortSectionCount WHERE LanguageIndex = NEW.FirstSortLanguageIndex AND Section = IFNULL(NEW.FirstSortSection, '') AND StoreID = NEW.StoreID), 0)); END;
DROP TRIGGER IF EXISTS delete_first_prefix_trigger;
DROP TRIGGER IF EXISTS FirstSortSectionDelete;
CREATE TRIGGER IF NOT EXISTS FirstSortSectionDelete AFTER DELETE ON ABPerson BEGIN INSERT OR REPLACE INTO FirstSortSectionCount VALUES(OLD.FirstSortLanguageIndex, IFNULL(OLD.FirstSortSection, ''), OLD.StoreID, (SELECT number from FirstSortSectionCount WHERE LanguageIndex = OLD.FirstSortLanguageIndex AND Section = IFNULL(OLD.FirstSortSection, '') AND StoreID = OLD.StoreID) - 1); DELETE FROM FirstSortSectionCount WHERE LanguageIndex = OLD.FirstSortLanguageIndex AND Section = IFNULL(OLD.FirstSortSection, '') AND StoreID = OLD.StoreID AND number = 0; END;
DROP TRIGGER IF EXISTS sorting_last_prefix_trigger;
DROP TRIGGER IF EXISTS LastSortSectionInsert;
CREATE TRIGGER IF NOT EXISTS LastSortSectionInsert AFTER INSERT ON ABPerson BEGIN INSERT OR REPLACE INTO LastSortSectionCount VALUES(NEW.LastSortLanguageIndex, IFNULL(NEW.LastSortSection, ''), NEW.StoreID, 1 + IFNULL((SELECT number from LastSortSectionCount WHERE LanguageIndex = NEW.LastSortLanguageIndex AND Section = IFNULL(NEW.LastSortSection, '') AND StoreID = NEW.StoreID), 0)); END;
DROP TRIGGER IF EXISTS update_last_prefix_trigger;
DROP TRIGGER IF EXISTS LastSortSectionUpdate;
CREATE TRIGGER IF NOT EXISTS LastSortSectionUpdate AFTER UPDATE ON ABPerson BEGIN INSERT OR REPLACE INTO LastSortSectionCount VALUES(OLD.LastSortLanguageIndex, IFNULL(OLD.LastSortSection, ''), OLD.StoreID, (SELECT number from LastSortSectionCount WHERE LanguageIndex = OLD.LastSortLanguageIndex AND Section = IFNULL(OLD.LastSortSection, '') AND StoreID = OLD.StoreID) - 1); DELETE FROM LastSortSectionCount WHERE LanguageIndex = OLD.LastSortLanguageIndex AND Section = IFNULL(OLD.LastSortSection, '') AND StoreID = OLD.StoreID AND number = 0; INSERT OR REPLACE INTO LastSortSectionCount VALUES(NEW.LastSortLanguageIndex, IFNULL(NEW.LastSortSection, ''), NEW.StoreID, 1 + IFNULL((SELECT number from LastSortSectionCount WHERE LanguageIndex = NEW.LastSortLanguageIndex AND Section = IFNULL(NEW.LastSortSection, '') AND StoreID = NEW.StoreID), 0)); END;
DROP TRIGGER IF EXISTS delete_last_prefix_trigger;
DROP TRIGGER IF EXISTS LastSortSectionDelete;
CREATE TRIGGER IF NOT EXISTS LastSortSectionDelete AFTER DELETE ON ABPerson BEGIN INSERT OR REPLACE INTO LastSortSectionCount VALUES(OLD.LastSortLanguageIndex, IFNULL(OLD.LastSortSection, ''), OLD.StoreID, (SELECT number from LastSortSectionCount WHERE LanguageIndex = OLD.LastSortLanguageIndex AND Section = IFNULL(OLD.LastSortSection, '') AND StoreID = OLD.StoreID) - 1); DELETE FROM LastSortSectionCount WHERE LanguageIndex = OLD.LastSortLanguageIndex AND Section = IFNULL(OLD.LastSortSection, '') AND StoreID = OLD.StoreID AND number = 0; END;
DROP TRIGGER IF EXISTS FirstSortSectionTotalDelete;
CREATE TRIGGER IF NOT EXISTS FirstSortSectionTotalDelete AFTER DELETE ON ABPerson 
WHEN OLD.IsPreferredName=1 
BEGIN 
    INSERT OR REPLACE INTO FirstSortSectionCountTotal 
    VALUES( 
        OLD.FirstSortLanguageIndex, 
        IFNULL(OLD.FirstSortSection, ''), 
        0, 
        (SELECT number FROM FirstSortSectionCountTotal WHERE LanguageIndex = OLD.FirstSortLanguageIndex AND Section = IFNULL(OLD.FirstSortSection, '') AND Type = 0) - 1 
    ); 
    
    DELETE FROM FirstSortSectionCountTotal 
    WHERE LanguageIndex = OLD.FirstSortLanguageIndex AND 
        Section = IFNULL(OLD.FirstSortSection, '') AND 
        Type = 0 AND 
        number <= 0; 
END; 
DROP TRIGGER IF EXISTS LastSortSectionTotalDelete;
CREATE TRIGGER IF NOT EXISTS LastSortSectionTotalDelete AFTER DELETE ON ABPerson 
WHEN OLD.IsPreferredName=1 
BEGIN 
    INSERT OR REPLACE INTO LastSortSectionCountTotal 
    VALUES( 
        OLD.LastSortLanguageIndex, 
        IFNULL(OLD.LastSortSection, ''), 
        0, 
        (SELECT number FROM LastSortSectionCountTotal WHERE LanguageIndex = OLD.LastSortLanguageIndex AND Section = IFNULL(OLD.LastSortSection, '') AND Type = 0) - 1 
    ); 
    
    DELETE FROM LastSortSectionCountTotal 
    WHERE LanguageIndex = OLD.LastSortLanguageIndex AND 
        Section = IFNULL(OLD.LastSortSection, '') AND 
        Type = 0 AND 
        number <= 0; 
END; 
DROP TRIGGER IF EXISTS FirstSortSectionTotalInsert;
CREATE TRIGGER IF NOT EXISTS FirstSortSectionTotalInsert AFTER INSERT ON ABPerson 
WHEN NEW.IsPreferredName=1 
BEGIN 
    INSERT OR REPLACE INTO FirstSortSectionCountTotal 
    VALUES( 
        NEW.FirstSortLanguageIndex, 
        IFNULL(NEW.FirstSortSection, ''), 
        0, 
        1 + IFNULL((SELECT number from FirstSortSectionCountTotal WHERE LanguageIndex = NEW.FirstSortLanguageIndex AND Section = IFNULL(NEW.FirstSortSection, '') AND Type = 0), 0) 
    ); 
END; 
DROP TRIGGER IF EXISTS LastSortSectionTotalInsert;
CREATE TRIGGER IF NOT EXISTS LastSortSectionTotalInsert AFTER INSERT ON ABPerson 
WHEN NEW.IsPreferredName=1 
BEGIN 
    INSERT OR REPLACE INTO LastSortSectionCountTotal 
    VALUES( 
        NEW.LastSortLanguageIndex, 
        IFNULL(NEW.LastSortSection, ''), 
        0, 
        1 + IFNULL((SELECT number from LastSortSectionCountTotal WHERE LanguageIndex = NEW.LastSortLanguageIndex AND Section = IFNULL(NEW.LastSortSection, '') AND Type = 0), 0) 
    ); 
END; 
DROP TRIGGER IF EXISTS FirstSortSectionTotalUpdateIfWasPreferred;
CREATE TRIGGER IF NOT EXISTS FirstSortSectionTotalUpdateIfWasPreferred AFTER UPDATE ON ABPerson 
WHEN OLD.IsPreferredName=1 
BEGIN 
    INSERT OR REPLACE INTO FirstSortSectionCountTotal 
    VALUES( 
        OLD.FirstSortLanguageIndex, 
        IFNULL(OLD.FirstSortSection, ''), 
        0, 
        (SELECT number FROM FirstSortSectionCountTotal WHERE LanguageIndex = OLD.FirstSortLanguageIndex AND Section = IFNULL(OLD.FirstSortSection, '') AND Type = 0) - 1 
    ); 
    
    DELETE FROM FirstSortSectionCountTotal 
    WHERE LanguageIndex = OLD.FirstSortLanguageIndex AND 
        Section = IFNULL(OLD.FirstSortSection, '') AND 
        Type = 0 AND 
        number = 0; 
END; 
DROP TRIGGER IF EXISTS FirstSortSectionTotalUpdateIfIsPreferred;
CREATE TRIGGER IF NOT EXISTS FirstSortSectionTotalUpdateIfIsPreferred AFTER UPDATE ON ABPerson 
WHEN NEW.IsPreferredName=1 
BEGIN 
    INSERT OR REPLACE INTO FirstSortSectionCountTotal 
    VALUES( 
        NEW.FirstSortLanguageIndex, 
        IFNULL(NEW.FirstSortSection, ''), 
        0, 
        1 + IFNULL((SELECT number from FirstSortSectionCountTotal WHERE LanguageIndex = NEW.FirstSortLanguageIndex AND Section = IFNULL(NEW.FirstSortSection, '') AND Type = 0), 0) 
    ); 
END; 
DROP TRIGGER IF EXISTS LastSortSectionTotalUpdateIfWasPreferred;
CREATE TRIGGER IF NOT EXISTS LastSortSectionTotalUpdateIfWasPreferred AFTER UPDATE ON ABPerson 
WHEN OLD.IsPreferredName=1 
BEGIN 
    INSERT OR REPLACE INTO LastSortSectionCountTotal 
    VALUES( 
        OLD.LastSortLanguageIndex, 
        IFNULL(OLD.LastSortSection, ''), 
        0, 
        (SELECT number FROM LastSortSectionCountTotal WHERE LanguageIndex = OLD.LastSortLanguageIndex AND Section = IFNULL(OLD.LastSortSection, '') AND Type = 0) - 1 
    ); 
    
    DELETE FROM LastSortSectionCountTotal 
    WHERE LanguageIndex = OLD.LastSortLanguageIndex AND 
        Section = IFNULL(OLD.LastSortSection, '') AND 
        Type = 0 AND 
        number = 0; 
END; 
DROP TRIGGER IF EXISTS LastSortSectionTotalUpdateIfIsPreferred;
CREATE TRIGGER IF NOT EXISTS LastSortSectionTotalUpdateIfIsPreferred AFTER UPDATE ON ABPerson 
WHEN NEW.IsPreferredName=1 
BEGIN 
    INSERT OR REPLACE INTO LastSortSectionCountTotal 
    VALUES( 
        NEW.LastSortLanguageIndex, 
        IFNULL(NEW.LastSortSection, ''), 
        0, 
        1 + IFNULL((SELECT number from LastSortSectionCountTotal WHERE LanguageIndex = NEW.LastSortLanguageIndex AND Section = IFNULL(NEW.LastSortSection, '') AND Type = 0), 0) 
    ); 
END; 
error initializing AB database (_createABDatabaseTables): %s
no connection
error initializing AB database (_createABDatabaseTriggersAndIndicesAndDropFirst): %s
SELECT ROWID, ExternalIdentifier from ABStore where Type = %d OR Type = %d
%ld, 
%ld)
SELECT ROWID, ExternalIdentifier from ABPerson where StoreID in %@
UPDATE ABPerson set ExternalIdentifier = ? where ROWID = ?
SELECT ROWID, ExternalIdentifier from ABGroup where StoreID in %@
UPDATE ABGroup set ExternalIdentifier = ? where ROWID = ?
UPDATE ABStore set ExternalIdentifier = ? where ROWID = ?
SELECT Type from ABStore where ROWID = 0;
UPDATE ABStore set ROWID = (SELECT MAX(ROWID)+1 from ABStore) where ROWID = 0;
UPDATE ABStore set StoreInternalIdentifier = NULL where ROWID = (SELECT MAX(ROWID) from ABStore);
UPDATE ABGroup set StoreID = (SELECT MAX(ROWID) from ABStore) where StoreID = 0;
UPDATE ABPerson set StoreID = (SELECT MAX(ROWID) from ABStore) where StoreID = 0;
SELECT value from _SqliteDatabaseProperties where key = 'MeSourceID';
UPDATE _SqliteDatabaseProperties set value = (SELECT MAX(ROWID) from ABStore) where key = 'MeSourceID';
INSERT INTO ABStore (ROWID, Type, Enabled , StoreInternalIdentifier) VALUES('0', '0', '0', 'local');
Hiragana-Katakana
UPDATE ABPerson SET FirstPhonetic = ab_transform_string(FirstPhonetic, 0, null, ?), MiddlePhonetic = ab_transform_string(MiddlePhonetic, 0, null, ?),LastPhonetic = ab_transform_string(LastPhonetic, 0, null, ?),OrganizationPhonetic = ab_transform_string(OrganizationPhonetic, 0, null, ?);
ab_normalize_date
ab_repair_guid
ab_generate_guid
has_sort_key_prefix
ab_katakana_exclusively
ab_update_value_from_trigger
ab_transform_string
ab_is_store_allowed
ab_compare_phone_numbers
ab_allowed_preferred_contact
ab_collect_value_row_map
-- TRIGGER
int _abSqliteTraceCallback(unsigned int, void *, void *, void *)
sqlite trace [%p]: %s
sqlite profile: %llu ms, %s
_Bool _databaseCorrupted(CPSqliteDatabase *)
database may be corrupted [%p]
void _logDatabaseHeader(CPSqliteDatabase *)
Corrupt database %s connection fd %d is opened to %s
current
Corrupt database header:
database was deleted (%@)
image database was %@ (%@) 
deleted
not deleted
image database still has orphans
The main database was corrupt. Please attach sysdiagnose, AB logs and /tmp/AddressBook*
DELETE FROM ABMultiValueEntry WHERE parent_id IN (SELECT UID FROM ABMultiValue WHERE record_id = ? AND property+0 = ?);
DELETE FROM ABMultiValue WHERE record_id = ? AND property+0 = ?;
SELECT ROWID FROM ABMultiValueLabel WHERE value = ?;
INSERT INTO ABMultiValueLabel VALUES (?);
INSERT INTO ABMultiValue (record_id, property, label, identifier, value, guid) values (?,?,?,?,?,?);
INSERT INTO ABPhoneLastFour (multivalue_id, value) values (?,?);
SQL error
SELECT ROWID FROM ABMultiValueEntryKey WHERE value = ?;
INSERT INTO ABMultiValueEntryKey VALUES(?);
INSERT INTO ABMultiValueEntry (parent_id, key, value) values (?,?,?);
ABCDBContextSaveMultiValueSubEntry
[(id)value isKindOfClass:[NSString class]]
DROP INDEX IF EXISTS ABMultiValueRecordIDIndex;
DROP INDEX IF EXISTS ABMultiValueLabelIndex;
DROP INDEX IF EXISTS ABMultiValuePropertyValueIndex;
DROP INDEX IF EXISTS ABMultiValueGUIDIndex;
DROP TRIGGER IF EXISTS delete_phone_last_four;
CREATE INDEX IF NOT EXISTS ABMultiValueRecordIDIndex on ABMultiValue(record_id);
CREATE INDEX IF NOT EXISTS ABMultiValueLabelIndex ON ABMultiValue(label);
CREATE INDEX IF NOT EXISTS ABMultiValueGUIDIndex ON ABMultiValue(guid);
CREATE INDEX IF NOT EXISTS ABMultiValuePropertyValueIndex ON ABMultiValue(property, value COLLATE NOCASE);
CREATE INDEX IF NOT EXISTS ABMultiValueEntryKeyIndex ON ABMultiValueEntry(key);
CREATE INDEX IF NOT EXISTS ABMultiValueEntryParentIndex ON ABMultiValueEntry(parent_id);
CREATE INDEX IF NOT EXISTS ABPhoneLastFourIndex ON ABPhoneLastFour(value);
CREATE TRIGGER IF NOT EXISTS delete_phone_last_four AFTER DELETE ON ABMultiValue
BEGIN
DELETE FROM ABPhoneLastFour WHERE multivalue_id = OLD.UID;
END;
***ABCDBContextCreateMultiValueTriggersAndIndicesAndDropFirst failed
CREATE TABLE IF NOT EXISTS ABMultiValue (UID INTEGER PRIMARY KEY, record_id INTEGER, property INTEGER, identifier INTEGER, label INTEGER, value TEXT, guid TEXT NOT NULL DEFAULT (ab_generate_guid()), UNIQUE(guid));
CREATE TABLE IF NOT EXISTS ABMultiValueLabel (value TEXT, UNIQUE(value));
CREATE TABLE IF NOT EXISTS ABMultiValueEntry (parent_id INTEGER, key INTEGER, value TEXT, UNIQUE(parent_id, key));
CREATE TABLE IF NOT EXISTS ABMultiValueEntryKey (value TEXT, UNIQUE(value));
CREATE TABLE IF NOT EXISTS ABPhoneLastFour (multivalue_id INTEGER PRIMARY KEY, value TEXT);
CREATE TABLE IF NOT EXISTS ABPersonMultiValueDeletes (record_id INTEGER, property_id INTEGER, identifier INTEGER, sequence_number INTEGER, record_uid TEXT, identifier_uid TEXT);
***ABCDBContextCreateMultiValueTables failed
SELECT (SELECT value FROM ABMultiValueEntryKey WHERE ROWID = key), value FROM ABMultiValueEntry WHERE parent_id = ?;
Error fetching multivalue sub entries: %d
bundleIdentifiers
ignoring column with type %d
CFArrayRef ABCIteratePeopleMatchingStringWithCustomQueryPrefix(ABCDBContextRef, CFStringRef, CFStringRef, ABRecordRef, ABRecordRef, ABCPersonSortOrdering, _Bool, CPRecordStoreRowHandler, void *, CFStringRef, CFDictionaryRef)
AB search used the disabled FTS index. Please open a radar to PEP Contacts (New Bugs) with simulated crash report.
AB search used the disabled FTS index. Please open a radar to PEP Contacts (New Bugs).
 abp.ROWID IN (select member_id FROM ABGroupMembers WHERE group_id = ? AND member_type = 0) AND
 StoreID = ? AND
 StoreID IN (SELECT abs.RowID FROM ABStore abs, ABAccount aba WHERE abs.AccountID = aba.ROWID AND aba.AccountIdentifier = ?) AND
 abp.ROWID IN 
 ( SELECT rowid from ABPersonFullTextSearch WHERE ABPersonFullTextSearch MATCH ? ) 
(SELECT rowid from ABPersonFullTextSearch WHERE ABPersonFullTextSearch MATCH '
 OR 
:' || ? || '
SELECT ROWID, value FROM ABMultiValueLabel;
outerPerson
 outerPerson.StoreID in (select abs.ROWID from ABStore abs, ABAccount aba where abs.AccountID = aba.ROWID AND aba.AccountIdentifier = ?)
 WHERE
IntlUtility
/System/Library/PrivateFrameworks/IntlPreferences.framework/IntlPreferences
root
Type
ConstraintsPath
ExternalSyncTag
StoreInternalIdentifier
AccountID
Policy
Enabled
SyncData
MeIdentifier
Capabilities
LastSyncDate
INSERT OR IGNORE INTO ABStore (ROWID, Type, StoreInternalIdentifier) VALUES('0', '0', 'local');
CREATE TABLE IF NOT EXISTS ABStore (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, %s TEXT, %s TEXT, %s INTEGER, %s TEXT, %s TEXT, %s TEXT, %s TEXT, %s INTEGER DEFAULT %i, %s INTEGER DEFAULT 1, %s BLOB, %s INTEGER DEFAULT -1, %s INTEGER DEFAULT 0, %s TEXT NOT NULL DEFAULT (ab_generate_guid()), %s TEXT, UNIQUE(%s), UNIQUE(%s));
INSERT INTO ABStore (ROWID, Type, StoreInternalIdentifier) VALUES('0', '0', 'local');
DefaultStore
Enabled = ?
CFArrayRef ABAddressBookCopyArrayOfAllSourcesWithAccountIdentifier(ABCAddressBookRef, CFStringRef)
JOIN ABAccount AS aba WHERE abs.AccountID = aba.ROWID AND aba.AccountIdentifier = ?
ABPolicyRef ABSourceGetPolicy(ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllPeopleInAccountWithSortOrderingShowingPersonLinks(ABAddressBookRef, CFStringRef, ABPersonSortOrdering, _Bool)
CFArrayRef ABAddressBookCopyArrayOfAllPeopleInAccountWithSortOrdering(ABAddressBookRef, CFStringRef, ABPersonSortOrdering)
ABStore
ABAddressBookCreateOptionFamilyMemberAltDSID
ABAddressBookCreateOptionFamilyMemberACAccountID
ABChangeCallbackInfoInsertedPeople
ABChangeCallbackInfoUpdatedPeople
ABChangeCallbackInfoDeletedPeople
ABChangeCallbackInfoInsertedGroups
ABChangeCallbackInfoUpdatedGroups
ABChangeCallbackInfoDeletedGroups
ABDatabaseSavedDistributedNotification
ABAddressBookMeCardChangeDistributedNotification
SaveRequestIdentifier
void ABAddressBookSetValue(ABAddressBookRef, CFStringRef, CFStringRef)
%@, key=%@, value=%@
CFStringRef ABAddressBookCopyValue(ABAddressBookRef, CFStringRef)
%@, key=%@
value=%@
^[ 0-9]*%@ .*$
com.apple.Contacts.database-allow
BOOL _CurrentProcessHasDirectDatabaseAccessEntitlement()
Couldn't get entitlement value: %@
Contacts
IMCore
AddressBookLegacy.framework requires boolean entitlement: com.apple.Contacts.database-allow
void _VerifyDirectDatabaseAccessEntitlementPresence()_block_invoke
ABAddressBookRef ABAddressBookCreateWithDatabaseDirectory(CFStringRef)
directory=%@
ABAddressBookRef ABAddressBookCreateWithOptionsAndPolicy(CFDictionaryRef, ABCreatePolicy, CFErrorRef *)
options=%@, policy=%i, %@
policy = %i
com.apple.contacts.AddressBookLegacy
returning NULL ABAddressBookRef
%@, %@
ABAddressBookRef ABAddressBookCreateWithOptions(CFDictionaryRef, CFErrorRef *)
options=%@
ABAddressBookRef ABAddressBookCreate()
CFStringRef ABAddressBookCopyDatabaseDirectory(ABAddressBookRef)
databaseDirectory=%@
void ABAddressBookSetIsBackgroundProcess(ABAddressBookRef, _Bool)
void ABAddressBookRegisterYieldBlock(ABAddressBookRef, void (^)(void))
_Bool ABAddressBookSave(ABAddressBookRef, CFErrorRef *)
_Bool ABAddressBookHasUnsavedChanges(ABAddressBookRef)
_Bool ABAddressBookAddRecord(ABAddressBookRef, ABRecordRef, CFErrorRef *)
_Bool ABAddressBookRemoveRecord(ABAddressBookRef, ABRecordRef, CFErrorRef *)
CFStringRef ABAddressBookCopyUniqueIdentifier(ABAddressBookRef)
returning %@
uniqueIdentifier=%@
void ABAddressBookSetUniqueIdentifierToNULL(ABAddressBookRef)
CFStringRef ABAddressBookCopyLocalizedLabel(CFStringRef)
label=%@
localizedLabel=%@
CFStringRef ABAddressBookCopyLocalizedLabelAllowingAbbreviations(CFStringRef, _Bool)
label=%@, allowAbbrevations=%@
notFound
NonAbbreviated
CFDictionaryRef ABAddressBookCopyLocalizedStringsForLanguageArray(CFArrayRef)
languageArray=%@
strings
dictionary={
localized strings count = %ld
void ABAddressBookBeginExclusiveRead(ABAddressBookRef)
void ABAddressBookEndExclusiveRead(ABAddressBookRef)
void ABAddressBookProcessAddedRecords(ABAddressBookRef)
void ABProcessAddedImages(ABAddressBookRef)
void ABInvalidateCachedImages(ABAddressBookRef)
void ABAddressBookFlushStatementCache(ABAddressBookRef)
ABErrorDomain
ABSQLiteErrorDomain
_Bool ABAddressBookSaveWithConflictPolicy(ABAddressBookRef, ABConflictPolicy, CFErrorRef *)
%@, policy=%i, error=%p
CFArrayRef ABAddressBookCopyAllLabels(ABAddressBookRef)
labels=%@
CFArrayRef ABAddressBookCopyAllLabelsForProperty(ABAddressBookRef, ABPropertyID)
%@, property=%i
void ABAddressBookDeleteLabel(ABAddressBookRef, CFStringRef)
%@, label=%@
int ABAddressBookGetIntegerProperty(ABAddressBookRef, CFStringRef)
value=%i
void ABAddressBookSetIntegerProperty(ABAddressBookRef, CFStringRef, int)
%@, key=%@, value=%i
CFStringRef ABAddressBookCopyValueForProperty(ABAddressBookRef, CFStringRef)
void ABAddressBookSetValueForProperty(ABAddressBookRef, CFStringRef, CFStringRef)
int ABAddressBookGetSequenceNumber(ABAddressBookRef)
sequenceNumber=%i
int ABAddressBookGetNextSequenceNumber(ABAddressBookRef)
nextSequenceNumber=%i
int ABAddressBookGetImagesSequenceNumber(ABAddressBookRef)
ABChangesToNames
ABChangesToBirthdays
ABChangesToLabels
ABChangesToPhoneLabels
ABChangesToEmailLabels
ABChangesToMeCards
CFDictionaryRef ABAddressBookCopyChangesSinceSequenceNumber(ABAddressBookRef, int)
%@, sequenceNumber=%i
changes={
void ABInitialize(void)
ABSyncClientBeginningMultiSave
ABSyncClientFinishedMultiSave
ABRefreshDidStart
ABRefreshDidEnd
MeSourceID
_Bool ABAddressBookSetMeCard(ABRecordRef)
me=%@
CFArrayRef ABAddressBookCopyArrayOfAllMeCards(ABAddressBookRef)
meCards=%@
_Bool ABAddressBookSetMe(ABAddressBookRef, ABRecordRef)
%@, me=%@
ABRecordRef ABAddressBookCopyMe(ABAddressBookRef)
_Bool ABAddressBookSetBestMeIfNeeded(ABAddressBookRef, CFStringRef, CFStringRef, CFStringRef)
%@, first=%@, last=%@, email=%@
v28@?0@"ABSearchOperation"8@"NSArray"16B24
v32@?0@8Q16^B24
q24@?0@8@16
changed=%@
void ABAddressBookRequestAccessWithCompletion(ABAddressBookRef, ABAddressBookRequestAccessCompletionHandler)
_Bool ABAddressBookIsAvailable(void)
_Bool ABAddressBookIsNeverAvailable(void)
_Bool ABAddressBookForceNullDatabaseForAccessDeniedIsEnabled()
.GlobalPreferences
ABForceNullDatabaseForAccessDenied
override=%@
void ABAddressBookForceNullDatabaseForAccessDeniedSetEnabled(CFPropertyListRef)
CFDictionaryRef ABAddressBookGetSharedAddressFormatsDictionary(void)
Family/
CFStringRef ABAddressBookCopyDirectoryPathForDelegateWithAltDSID(CFStringRef)
error opening Family directory lock at path %@, errno %d
family.plist
Generation
Mappings
%@:%d
CFStringRef _ABAddressBookCopyMigratedDelegateDatabaseIdentifierIfMigrationNeeded(CFStringRef, CFStringRef, int)
migrating folder for deletage with altdsid %@ into mappings registry
error opening moving directory to path %@
deleted item at path %@ - it wasn't a directory but we expected one
error encountered while deleting item of unexpected type at path %@ - it wasn't a directory but we expected one. error: %@
void ABUnregisterAndPrepareToDeleteDelegateDatabasesExcludingAltDSIDs(CFArrayRef)
@16@?0@8
void ABPrepareForDeletionOrDeleteAllDelegateDatabasesExcludingPaths(CFArrayRef)
error fetching family directory contents %@:
void ABAddressBookPrepareDirectoryForDeletionOrDeleteIfPossibleAtPath(CFStringRef)
Database already marked for deletion but not yet eligible for unlink. Delete will not occur until this call is repeated on a subsequent system reboot.
void ABAddressBookDeleteDatabaseAtPath(CFStringRef)
could not delete database at path:%@ :%@
ABAddressBookDeleteDatabaseAtURL deleted database directory at URL: %@.
SELECT COUNT(*) FROM (SELECT NULL FROM ABPerson WHERE StoreID = 0 OR PersonLink != -1 LIMIT 1);
ABRecordID ABRecordGetRecordID(ABRecordRef)
ABRecordType ABRecordGetRecordType(ABRecordRef)
CFTypeRef ABRecordCopyOriginalValue(ABRecordRef, ABPropertyID)
CFTypeRef ABRecordCopyValue(ABRecordRef, ABPropertyID)
_Bool ABRecordSetValue(ABRecordRef, ABPropertyID, CFTypeRef, CFErrorRef *)
_Bool ABRecordRemoveValue(ABRecordRef, ABPropertyID, CFErrorRef *)
CFStringRef ABRecordCopyCompositeName(ABRecordRef)
void ABRecordShow(ABRecordRef)
_Bool ABRecordSetIntValue(ABRecordRef, ABPropertyID, int, CFErrorRef *)
int ABRecordGetIntValue(ABRecordRef, ABPropertyID)
CFStringRef ABRecordNameForProperty(ABRecordRef, ABPropertyID)
ABAddressBookRef ABRecordGetAddressBook(ABRecordRef)
Street
SubLocality
City
SubAdministrativeArea
State
Country
CountryCode
_$!<Work>!$_
_$!<Home>!$_
_$!<School>!$_
_$!<Other>!$_
_$!<Anniversary>!$_
_$!<Birthday>!$_
_$!<Mobile>!$_
_$!<Main>!$_
_$!<HomeFAX>!$_
_$!<WorkFAX>!$_
_$!<OtherFAX>!$_
_$!<Pager>!$_
iPhone
Apple Watch
_$!<Phone>!$_
_$!<Email>!$_
_$!<PostalAddress>!$_
_$!<AssistantPhone>!$_
_$!<Car>!$_
_$!<Radio>!$_
_$!<CompanyMain>!$_
MapsCardContentProvider
service
Yahoo
Jabber
GoogleTalk
Skype
Facebook
GaduGadu
username
identifier
_$!<HomePage>!$_
_$!<Father>!$_
_$!<Mother>!$_
_$!<Parent>!$_
_$!<Brother>!$_
_$!<Sister>!$_
_$!<Child>!$_
_$!<Friend>!$_
_$!<Spouse>!$_
_$!<Partner>!$_
_$!<Assistant>!$_
_$!<Manager>!$_
_$!<Son>!$_
_$!<Daughter>!$_
teamIdentifier
displayname
twitter
sinaweibo
gamecenter
facebook
myspace
linkedin
flickr
calendarIdentifier
year
month
isLeapMonth
PHOTO
APPLE-PERSONA
MONOGRAM
ANIMOJI
ABRecordRef ABPersonCreate(void)
ABPropertyType ABPersonGetTypeOfProperty(ABPropertyID)
CFStringRef ABPersonCopyLocalizedLowercasePropertyName(ABPropertyID)
LocalizedLowercaseProperties
CFStringRef ABPersonCopyLocalizedPropertyName(ABPropertyID)
contactsSortOrder
_Bool ABPersonSetImageData(ABRecordRef, CFDataRef, CFErrorRef *)
ABPersonImageFormat ABPersonGetDerivedFromFormatFromImageWithFormat(ABRecordRef, ABPersonImageFormat)
CFDataRef ABPersonCopyImageDataAndInvertedCropRect(ABRecordRef, ABPersonImageFormat, int *, int *, int *, int *)
CFDataRef ABPersonCopyImageDataAndCropRect(ABRecordRef, ABPersonImageFormat, int *, int *, int *, int *)
_Bool ABPersonSetImageDataAndCropRect(ABCRecordRef, ABPersonImageFormat, CFDataRef, int, int, int, int, CFErrorRef *)
_Bool ABPersonSetImageDataDerivedFromFormatAndReturnError(ABRecordRef, ABPersonImageFormat, ABPersonImageFormat, CFDataRef, CFErrorRef *)
CFDataRef ABPersonCopyImageData(ABRecordRef)
CFDataRef ABPersonCopyImageDataWithFormat(ABRecordRef, ABPersonImageFormat)
_Bool ABPersonHasImageData(ABRecordRef)
_Bool ABPersonRemoveImageData(ABRecordRef, CFErrorRef *)
CFComparisonResult ABPersonComparePeopleByName(ABRecordRef, ABRecordRef, ABPersonSortOrdering)
CFIndex ABAddressBookGetEmailCount(ABAddressBookRef)
CFIndex ABAddressBookGetPhoneNumberCountInSource(ABAddressBookRef, ABRecordRef)
CFIndex ABAddressBookGetPhoneNumberCount(ABAddressBookRef)
void ABPersonCopyArrayOfPhoneNumbersLabelsAndPeopleInRange(ABAddressBookRef, CFRange, CFArrayRef *, CFArrayRef *, CFArrayRef *)
CFArrayRef ABAddressBookCopyArrayOfAllEmailAddresses(ABAddressBookRef)
SELECT value from ABMultiValue where property = ?;
CFIndex ABAddressBookGetPersonCount(ABAddressBookRef)
CFIndex ABAddressBookGetPersonCountInSource(ABAddressBookRef, ABRecordRef)
ABRecordRef ABAddressBookGetPersonWithRecordID(ABAddressBookRef, ABRecordID)
CFArrayRef ABAddressBookCopyPeopleWithUUIDs(ABAddressBookRef, CFArrayRef)
CFArrayRef ABAddressBookCopyPeopleWithLinkIdentifiers(ABAddressBookRef, CFArrayRef)
CFArrayRef ABAddressBookCopyArrayOfAllPeople(ABAddressBookRef)
%@_inner
innerPerson
%@IsPreferredName = 1
%@ROWID IN (%@ UNION %@)
%@ROWID IN (%@)
CFArrayRef ABAddressBookCopyArrayOfPreferredNamePeopleForGroupsAndSourcesWithSortOrdering(ABAddressBookRef, CFArrayRef, CFArrayRef, ABPersonSortOrdering)
CFArrayRef ABAddressBookCopyArrayOfAllPreferredNamePeopleWithSortOrdering(ABAddressBookRef, ABPersonSortOrdering)
CFArrayRef ABAddressBookCopyPeopleWithName(ABAddressBookRef, CFStringRef)
void ABAddressBookMapPeopleMatchingString(ABAddressBookRef, CFStringRef, CFStringRef, ABRecordRef, ABRecordRef, ABPersonSortOrdering, _Bool, ABAddressBookMapPeopleCallbacks *, void *)
void ABPersonInvalidateImageData(ABAddressBookRef, ABImagePredicateFunction, void *)
void ABPersonInvalidateSpecificImageData(ABRecordRef, ABPersonImageFormat)
void ABPersonInvalidateAllImageData(ABRecordRef)
FirstSortLanguageIndex, FirstSortSection
LastSortLanguageIndex, LastSortSection
FirstSortLanguageIndex ASC, FirstSortSection ASC
LastSortLanguageIndex ASC, LastSortSection ASC
SELECT %@, COUNT() from ABPerson where rowid in (SELECT rowid FROM ABPerson WHERE personlink = -1 AND StoreID IN %@ UNION SELECT ab_allowed_preferred_contact(abp.rowid, abp.StoreID, abp.IsPreferredName, ? ) FROM ABPerson abp JOIN ABPersonLink abpl on abpl.rowid = abp.PersonLink WHERE abp.StoreID IN %@ GROUP BY abpl.rowid) GROUP BY %@ ORDER BY %@;
v24@?0Q8^B16
CFArrayRef ABCopyArrayOfPeopleAtOffset(ABAddressBookRef, ABRecordRef, ABPersonSortOrdering, int, int)
CFIndex ABAddressBookGetPreferredNamePeopleCount(ABAddressBookRef)
SELECT COUNT() FROM ABPerson WHERE ROWID IN (SELECT rowid FROM ABPerson WHERE personlink = -1 AND StoreID IN %@ UNION SELECT ab_allowed_preferred_contact(abp.rowid, abp.StoreID, abp.IsPreferredName, ? ) FROM ABPerson abp JOIN ABPersonLink abpl on abpl.rowid = abp.PersonLink WHERE abp.StoreID IN %@ GROUP BY abpl.rowid ) 
 WHERE ROWID IN (SELECT rowid FROM ABPerson WHERE personlink = -1 AND StoreID IN %@ UNION SELECT ab_allowed_preferred_contact(abp.rowid, abp.StoreID, abp.IsPreferredName, ? ) FROM ABPerson abp JOIN ABPersonLink abpl on abpl.rowid = abp.PersonLink WHERE abp.StoreID IN %@ GROUP BY abpl.rowid ) 
 LIMIT ? OFFSET ?
CFArrayRef ABCopyArrayOfPreferredNamePeopleAtOffset(ABAddressBookRef, ABPersonSortOrdering, int, int)
void ABPersonSetCompositeNameFormat(ABPersonCompositeNameFormat)
com.apple.AddressBook.PreferenceChanged
ABPersonCompositeNameFormat ABPersonGetCompositeNameFormat(void)
personNameOrderingForEdit
ABPersonEditNameFormat ABPersonGetEditNameFormat(void)
ABPersonCompositeNameFormat ABPersonGetCompositeNameFormatAndDelimiterForRecord(ABRecordRef, CFStringRef *)
CFArrayRef ABPersonCopyNamePieces(ABRecordRef, ABPersonSortOrdering, CFIndex *)
CFStringRef ABPersonCopyCompositeNameIgnoringOrganization(ABRecordRef, _Bool)
CFStringRef ABPersonCopyCompositeNameIgnoringOrganizationAndNickname(ABRecordRef, _Bool, _Bool)
ABRecordRef ABPersonCopy(ABRecordRef)
void ABPersonShow(ABRecordRef)
CFStringRef ABPersonCopyCompositeName(ABRecordRef)
CFStringRef ABPersonCopyCompositePhoneticName(ABRecordRef)
void ABPersonSetShortNameFormat(ABPersonShortNameFormat)
ABPersonShortNameFormat ABPersonGetShortNameFormat(void)
void ABPersonSetShortNameFormatEnabled(_Bool)
_Bool ABPersonGetShortNameFormatEnabled(void)
void ABPersonSetShortNamePreferNicknames(_Bool)
_Bool ABPersonGetShortNamePreferNicknames(void)
%@ %@
void ABPersonInitialize()
CFStringRef ABPersonCopySoundIdentifierForMultiValueIdentifierForIndividualContact(ABRecordRef, int)
void ABPersonSetSoundIdentifierForMultiValueIdentifier(ABRecordRef, int, CFStringRef)
CFComparisonResult ABPersonCompareNameOfPeople(ABRecordRef, ABRecordRef, ABPersonSortOrdering)
CFStringRef ABPersonNameForProperty(ABPropertyID)
ABRecordRef ABAddressBookFindPersonMatchingPhoneNumber(ABAddressBookRef, CFStringRef, ABMultiValueIdentifier *, CFStringRef *)
%@, phoneNumber=%@
ABRecordRef ABAddressBookFindPersonMatchingPhoneNumberWithCountry(ABAddressBookRef, CFStringRef, CFStringRef, ABMultiValueIdentifier *, CFStringRef *)
ABRecordRef ABAddressBookFindPersonMatchingPhoneNumberWithCountryAndHint(ABAddressBookRef, CFStringRef, CFStringRef, ABMultiValueIdentifier *, CFStringRef *, const char *)
CFArrayRef ABAddressBookCopyArrayOfUIDsMatchingPhoneNumberWithCountryAndHint(ABCAddressBookRef, CFStringRef, CFStringRef, CFArrayRef *, const char *)
ABRecordRef ABAddressBookFindPersonMatchingURL(ABAddressBookRef, CFStringRef, ABMultiValueIdentifier *)
ABRecordRef ABAddressBookFindPersonMatchingEmailAddress(ABAddressBookRef, CFStringRef, ABMultiValueIdentifier *)
CFArrayRef ABAddressBookCopyArrayOfUIDsMatchingEmailAddress(ABAddressBookRef, CFStringRef, CFArrayRef *, CFArrayRef *)
void ABAddressBookCopyPeopleAndIdentifiersMatchingName(ABAddressBookRef, CFStringRef, ABPersonSortOrdering, ABPropertyID, CFArrayRef *, CFArrayRef *)
void ABAddressBookCopyPeopleAndMultiValuePropertiesMatchingName(ABAddressBookRef, CFStringRef, ABPersonSortOrdering, ABPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *)
CFArrayRef ABAddressBookCopyArrayOfAllPeopleMatching(ABAddressBookRef, CFStringRef, CFStringRef, ABRecordRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfUIDsMatchingExternalUUID(ABAddressBookRef, CFStringRef)
SELECT ROWID from ABPerson where ExternalUUID = ?;
ABRecordRef ABAddressBookFindPersonMatchingMultiValueUUID(ABAddressBookRef, CFStringRef, ABPropertyID *, ABMultiValueIdentifier *)
%@, multiValueUUID=%@
SELECT record_id, property, identifier from ABMultiValue where guid = ?;
ABRecordRef ABAddressBookCopyPersonMatchingInternalUUID(ABAddressBookRef, CFStringRef)
ABRecordRef ABAddressBookCopyPersonMatchingMapData(ABAddressBookRef, CFStringRef)
[^[:Hangul:]]
CFArrayRef ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifierAndAddressBook(ABRecordRef, CFStringRef, ABAddressBookRef)
WHERE PersonLink = ?
 AND StoreID IN (SELECT abs.rowid FROM ABStore abs, ABAccount aba WHERE abs.AccountID = aba.ROWID AND aba.AccountIdentifier = ?)
CFArrayRef ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifier(ABRecordRef, CFStringRef)
CFArrayRef ABPersonCopyArrayOfAllLinkedPeople(ABRecordRef)
CFStringRef ABPersonCopyLinkUUID(ABRecordRef)
_Bool ABPersonSetLinkUUID(ABRecordRef, CFStringRef)
UPDATE ABPersonLink set guid = ? WHERE ROWID = ?;
_Bool ABPersonLinkPerson(ABRecordRef, ABRecordRef, CFErrorRef *)
Failure getting toPersonLinkUUID while linking contact %@ to %@
Failure getting personLinkUUID while linking contact %@ to %@
INSERT INTO ABPersonLink (ROWID, PreferredNamePersonID) VALUES (NULL, ?);
Failure getting linkUUID while linking contact %@ to %@
_Bool ABPersonUnlink(ABRecordRef, CFErrorRef *)
Failure getting linkUUID while unlinking contact %@ 
ABRecordRef ABPersonCopyPreferredLinkedPersonForName(ABRecordRef)
true
_Bool ABPersonIsReadonly(ABRecordRef)
ABRecordRef ABPersonCopyPreferredLinkedPersonForImage(ABRecordRef)
ABRecordRef ABPersonCopyPreferredLinkedPersonForImageIfExists(ABRecordRef)
void ABPersonSetPreferredLinkedPersonForImage(ABRecordRef)
void ABPersonSetPreferredLinkedPersonForName(ABRecordRef)
UPDATE ABPersonLink set PreferredNamePersonID = ? WHERE ROWID = ?;
Failure getting linkUUID while setting contact %@ as preferred name
CFArrayRef ABPersonCreateArrayOfAllPropertyIDs(void)
CFArrayRef ABPersonCopyPropertyIDsExcludingPropertyIDs(CFArrayRef, CFArrayRef)
void ABPersonMergePersonIntoPerson(ABRecordRef, ABRecordRef)
ABRecordRef ABPersonCreateUnifiedPerson(ABRecordRef)
CFMutableArrayRef ABPersonCreateArrayOfUnifiedPeople(CFArrayRef)
CFMutableArrayRef ABPersonCreateArrayOfUnifiedPeopleWithAccountIdentifier(CFArrayRef, CFStringRef)
com.apple.PeoplePicker
ABLocalizableDefaults
_LOCALIZABLE_
public.png
SELECT count() from ABMultiValue where property = ? AND record_id in (select ROWID from ABPerson where StoreID = ?);
SELECT count() from ABMultiValue where property = ?;
IFNULL(abpl.PreferredNamePersonID, %@.ROWID)
%@.ROWID
SELECT %@ FROM ABGroupMembers abgm JOIN ABPerson %@ ON abgm.member_id = %@.ROWID LEFT OUTER JOIN ABPersonLink abpl ON %@.PersonLink = abpl.ROWID WHERE abgm.group_id IN (%@) AND abgm.member_type = 0
SELECT %@ FROM ABPerson %@ LEFT OUTER JOIN ABPersonLink abpl ON %@.PersonLink = abpl.ROWID WHERE %@.StoreID IN (%@)
NSPersonNameComponentsFormatterPreferences
WHERE %@ = ?
 JOIN ABPersonLink abl ON abp.PersonLink = abl.ROWID WHERE (abp.personLink = ? AND abl.PreferredNamePersonID = abp.ROWID)
 JOIN ABPersonLink abl ON abp.PersonLink = abl.ROWID WHERE (abp.personLink = ? AND abl.PreferredImagePersonID = abp.ROWID)
ABPropertyType ABMultiValueGetPropertyType(ABMultiValueRef)
CFIndex ABMultiValueGetCount(ABMultiValueRef)
CFTypeRef ABMultiValueCopyValueAtIndex(ABMultiValueRef, CFIndex)
CFArrayRef ABMultiValueCopyArrayOfAllValues(ABMultiValueRef)
CFStringRef ABMultiValueCopyLabelAtIndex(ABMultiValueRef, CFIndex)
CFIndex ABMultiValueGetIndexForIdentifier(ABMultiValueRef, ABMultiValueIdentifier)
ABMultiValueIdentifier ABMultiValueGetIdentifierAtIndex(ABMultiValueRef, CFIndex)
CFStringRef ABMultiValueCopyUUIDAtIndex(ABMultiValueRef, CFIndex)
CFIndex ABMultiValueGetFirstIndexOfValue(ABMultiValueRef, CFTypeRef)
CFIndex ABMultiValueGetFirstIndexOfValueWithCallback(ABMultiValueRef, CFTypeRef, CFArrayEqualCallBack)
CFIndex ABMultiValueGetFirstIndexOfLabel(ABMultiValueRef, CFStringRef)
ABMutableMultiValueRef ABMultiValueCreateMutable(ABPropertyType)
ABMutableMultiValueRef ABMultiValueCreateMutableCopy(ABMultiValueRef)
void ABMultiValueSetImmutable(ABMultiValueRef)
_Bool ABMultiValueAddValueAndLabel(ABMutableMultiValueRef, CFTypeRef, CFStringRef, ABMultiValueIdentifier *)
ABMultiValueAddValueAndLabel
ABMultiValue.c
((ABCMultiValue *)multiValue)->flags.isMutable
_Bool ABMultiValueInsertValueAndLabelAtIndex(ABMutableMultiValueRef, CFTypeRef, CFStringRef, CFIndex, ABMultiValueIdentifier *)
_Bool ABMultiValueInsertValueAndLabelAndUUIDAtIndex(ABMutableMultiValueRef, CFTypeRef, CFStringRef, CFStringRef, CFIndex, ABMultiValueIdentifier *)
ABMultiValueInsertValueAndLabelAndUUIDAtIndex
_Bool ABMultiValueRemoveValueAndLabelAtIndex(ABMutableMultiValueRef, CFIndex)
ABMultiValueRemoveValueAndLabelAtIndex
_Bool ABMultiValueReplaceValueAtIndex(ABMutableMultiValueRef, CFTypeRef, CFIndex)
ABMultiValueReplaceValueAtIndex
_Bool ABMultiValueReplaceLabelAtIndex(ABMutableMultiValueRef, CFStringRef, CFIndex)
ABMultiValueReplaceLabelAtIndex
_Bool ABMultiValueSetPrimaryIdentifier(ABMutableMultiValueRef, ABMultiValueIdentifier)
ABMultiValueSetPrimaryIdentifier
ABMultiValueRef ABMultiValueCreate(ABPropertyType)
ABMultiValueRef ABMultiValueCreateCopy(ABMultiValueRef)
_Bool ABMultiValueInsertAndCreateIdentifier(ABMutableMultiValueRef, CFTypeRef, CFStringRef, CFIndex, CFStringRef, ABMultiValueIdentifier *, _Bool)
ABMultiValueInsertAndCreateIdentifier
void ABMultiValueShow(ABMultiValueRef)
void ABMultiValueLoad(ABRecordRef, ABPropertyID, CPSqliteConnection *)
void ABMultiValueBatchLoad(CFArrayRef, ABPropertyID, ABAddressBookRef)
void ABMultiValueSave(ABRecordRef, ABPropertyID, CPSqliteConnection *)
B32@?0^v8^v16r^^v24
_Bool ABMultiValueAddValueAndLabelIfUnique(ABMutableMultiValueRef, CFTypeRef, CFStringRef, _Bool, ABMultiValueUniqueInsertionComparator)
ABMultiValueAddValueAndLabelIfUnique
CFTypeID ABMultiValueGetTypeID(void)
void ABMultiValueEnumerateWithBlock(ABMultiValueRef, ABMultiValueEnumeratorBlock)
ABRecordRef ABGroupCreate()
CFArrayRef ABGroupCopyArrayOfAllMembers(ABRecordRef)
CFArrayRef ABGroupCopyArrayOfAllMembersWithSortOrdering(ABRecordRef, ABPersonSortOrdering)
_Bool ABGroupAddMember(ABRecordRef, ABRecordRef, CFErrorRef *)
_Bool ABGroupRemoveMember(ABRecordRef, ABRecordRef, CFErrorRef *)
ABRecordRef ABAddressBookGetGroupWithRecordID(ABAddressBookRef, ABRecordID)
CFArrayRef ABAddressBookCopyGroupsWithUUIDs(ABAddressBookRef, CFArrayRef)
CFIndex ABAddressBookGetGroupCount(ABAddressBookRef)
CFIndex ABAddressBookGetGroupCountInSource(ABAddressBookRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllGroups(ABAddressBookRef)
CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithSortOrdering(ABAddressBookRef, ABGroupSortOrdering)
CFArrayRef ABGroupCopyArrayOfAllGroupsWithMembersOfTypeWithUUIDs(ABAddressBookRef, ABRecordType, _Bool, CFArrayRef)
CFArrayRef ABGroupCopyArrayOfAllSubgroups(ABRecordRef)
CFArrayRef ABGroupCopyArrayOfAllMembersAndSubgroups(ABRecordRef)
_Bool ABGroupAddSubgroup(ABRecordRef, ABRecordRef)
_Bool ABGroupRemoveSubgroup(ABRecordRef, ABRecordRef)
void ABGroupDelete(ABRecordID, ABRecordRef, CPSqliteConnection *)
CFStringRef ABGroupCopyCompositeName(ABRecordRef)
void ABGroupInitialize()
ABPropertyType ABGroupGetTypeOfProperty(ABPropertyID)
CFStringRef ABGroupNameForProperty(ABPropertyID)
X-APPLE-GUARDIAN-WHITELISTED
SELECT ROWID, ExternalRepresentation from ABPerson where ExternalRepresentation NOT NULL;
+[ABDowntimeWhitelistMigrator unknownPropertiesFromExternalRepresentation:]
Error trying to decode externalRepresentation: %@
Exception trying to decode externalRepresentation: %@
+[ABDowntimeWhitelistMigrator externalRepresentationFromUnknownProperties:]
Exception trying to encode externalRepesentation: %@
UPDATE ABPerson set DowntimeWhitelist = ?, ExternalRepresentation = ? where ROWID = ?;
ABRecordRef ABSourceCreate()
ABRecordRef ABAddressBookGetAccountForSource(ABAddressBookRef, ABRecordRef)
_Bool ABAddressBookSetAccountForSource(ABAddressBookRef, ABRecordRef, ABRecordRef, CFErrorRef *)
ABRecordRef ABAddressBookCopyLocalSource(ABAddressBookRef)
ABRecordRef ABAddressBookCopyDefaultSourceIsPersistableFallback(ABAddressBookRef, BOOL *)
Actual default source %@
is not valid
Found another source in the same account as invalid default. Using %@ instead.
Found another syncing source to use as default source: %@
Failed to find a valid default source, returning the local source
void ABAddressBookSetDefaultSource(ABAddressBookRef, ABRecordRef, _Bool)
Setting default source to %i
void ABAddressBookCheckDefaultSourceIntegrityAndUpdateIfNeeded(ABAddressBookRef)
Actual default source is invalid
The local source is the persistable fallback for default source
Enabling the disabled local source to use as the default source
Persisting the non-local source as the default source
ABRecordRef ABAddressBookGetSourceWithRecordID(ABAddressBookRef, ABRecordID)
CFArrayRef ABAddressBookCopySourcesWithUUIDs(ABAddressBookRef, CFArrayRef)
Enabled = 1
StoreID != %d
CFArrayRef ABAddressBookCopyArrayOfAllSourcesIncludingDisabledSources(ABAddressBookRef, _Bool)
CFArrayRef ABAddressBookCopyArrayOfAllSources(ABAddressBookRef)
AND store.Enabled = 1
SELECT store.rowid from ABStore store LEFT JOIN ABAccount account on store.AccountID = account.ROWID WHERE ab_is_store_allowed(account.AccountIdentifier, store.type, ? ) = 1 %@;
ABRecordRef ABAddressBookCopySourceWithAccountAndExternalIdentifiers(ABAddressBookRef, CFStringRef, CFStringRef)
JOIN ABAccount AS aba WHERE abs.AccountID = aba.ROWID AND abs.ExternalIdentifier = ? AND aba.AccountIdentifier = ?
WHERE ExternalIdentifier = ?
UPDATE ABStore SET StoreInternalIdentifier = ? WHERE EXISTS (SELECT UntaggedStoreCount, LocalStoreCount, TotalStoreCount FROM ((SELECT COUNT() AS UntaggedStoreCount FROM ABStore WHERE StoreInternalIdentifier IS NULL), (SELECT COUNT() AS LocalStoreCount FROM ABStore WHERE StoreInternalIdentifier = "local"), (SELECT COUNT() AS TotalStoreCount FROM ABStore)) WHERE UntaggedStoreCount = 1 AND LocalStoreCount = 1 AND TotalStoreCount = 2) AND StoreInternalIdentifier IS NULL;
INSERT INTO ABStore (StoreInternalIdentifier, Type) SELECT ?, ? WHERE EXISTS (SELECT StoreCount FROM (SELECT COUNT() as StoreCount from ABStore where ROWID != 0) where StoreCount = 0);
WITH CardDAVStore AS (SELECT ROWID FROM ABStore WHERE StoreInternalIdentifier = ? ) INSERT INTO _SqliteDatabaseProperties(key, value) VALUES("DefaultStore", (SELECT * FROM CardDAVStore)) ON CONFLICT(key) DO UPDATE SET value = (SELECT * from CardDAVStore);
ABRecordRef ABPersonCreateInSourceAndReturnError(ABRecordRef, CFErrorRef *)
ABRecordRef ABGroupCreateInSource(ABRecordRef)
ABRecordRef ABPersonCopySource(ABRecordRef)
ABRecordRef ABGroupCopySource(ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllPeopleInSource(ABAddressBookRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllPeopleInSourceWithSortOrdering(ABAddressBookRef, ABRecordRef, ABPersonSortOrdering)
CFArrayRef ABAddressBookCopyArrayOfAllGroupsInSource(ABAddressBookRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllPeopleWithExternalIdentifierInSource(ABAddressBookRef, CFStringRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllPeopleWithExternalIdentifiersInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithExternalIdentifierInSource(ABAddressBookRef, CFStringRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithExternalIdentifiersInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllPeopleWithExternalUUIDInSource(ABAddressBookRef, CFStringRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllPeopleWithExternalUUIDsInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithExternalUUIDInSource(ABAddressBookRef, CFStringRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithExternalUUIDsInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)
void ABAddressBookClearExternalIdentifiersInRecordsWithSource(ABAddressBookRef, ABRecordRef)
ABPropertyType ABSourceGetTypeOfProperty(ABPropertyID)
SELECT ROWID from %s where StoreID = %i;
, ImageURI = NULL
, DowntimeWhitelist = NULL
UPDATE %s SET StoreID = %i, ExternalIdentifier = NULL, ExternalModificationTag = NULL%@%@ WHERE StoreID = %i;
, ExternalUUID = NULL
UPDATE %s SET StoreID = %i, ExternalIdentifier = NULL, ExternalModificationTag = NULL%@%@%@ WHERE ROWID = %i;
_Bool ABAddressBookMovePersonToSource(ABAddressBookRef, ABRecordRef, ABRecordRef, _Bool, CFErrorRef *)_block_invoke
removeSyncImagesForRecord returned an error while moving contacts between sources. Continuing with move anyway.
B48@?0^{?={__CFRuntimeBase=QAQ}^{CPRecordStore}^{CPRecordStore}^{__CFString}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFString}^{__CFString}{_opaque_pthread_mutex_t=q[56c]}^{__CFArray}^{__CFArray}^{__CFArray}^{__CFArray}^{__CFArray}^{__CFDictionary}^{UCollator}^{UCollator}^{__CFString}^{__CFString}^{__CFStringTokenizer}^{__CFString}^{__CFString}C^{__CFArray}CC@?{_opaque_pthread_mutex_t=q[56c]}^{__CFString}d^{__CFString}^{?}{__ABBookflags=b1b1b8b1b1b1b1b1b1b1b1b1b1b1b1b1b1}}8^{CPSqliteConnection=^{CPSqliteDatabase}^{sqlite3}^{__CFDictionary}^{__CFDictionary}^v^?^?^vIB}16^v24^v32^^{__CFError}40
_Bool ABAddressBookMoveAllRecordsInSourceToSource(ABAddressBookRef, ABRecordRef, ABRecordRef, CFErrorRef *)
_Bool ABSourceSetMe(ABRecordRef, ABRecordRef, CFErrorRef *)
ABRecordRef ABSourceGetMe(ABRecordRef)
_Bool ABSourceIsRemote(ABRecordRef)
_Bool ABAddressBookTrimWhitespaceFromPersonPropertyIDsInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)
void ABSourceSetShouldIgnoreCapabilitiesRestrictions(ABRecordRef, _Bool)
_Bool ABSourceIsReadonly(ABRecordRef)
_Bool ABSourceIsContentReadonlyInCapabilityRestrictions(ABRecordRef)
_Bool ABSourceIsContentReadonlyIncludingGuardianRestrictions(ABRecordRef, _Bool)
void ABSourceSetContentReadonly(ABRecordRef, _Bool)
_Bool ABSourceAreFoldersReadonlyInCapabilityRestrictions(ABRecordRef)
_Bool ABSourceAreFoldersReadonly(ABRecordRef)
void ABSourceSetFoldersReadonly(ABRecordRef, _Bool)
_Bool ABAddressBookMoveRecordToSource(ABAddressBookRef, ABRecordRef, ABRecordRef, RecordTypeSpecificMoveWork, _Bool, CFErrorRef *)
_Bool ABPolicyShouldSetValueForRecordType(ABPolicyRef, ABRecordType, ABPropertyID, CFTypeRef, _Bool *, CFErrorRef *)
context-type
context-data
ABPolicyCreateWithCoder
ABPolicy.m
propertyList != NULL
%@::%@
ABPolicy
version
unified
is-organization
first-name
last-name
organization-name
carddav-uuids
phone-numbers
email-addresses
contact-identifier
ABRecordRef _findPersonWithWeightSearchExcludesPeopleWithExternalUUIDs(ABAddressBookRef, CFDictionaryRef, BOOL)
Activity continuity - Using preferred linked person, recordID = %i
Activity continuity - Failed to find person
ABRecordRef _findPersonByInternalUUID(ABAddressBookRef, NSDictionary *)
Activity continuity - Found person with internal UUID = %@, recordID = %i
ABRecordRef _findPersonByExternalUUID(ABAddressBookRef, NSDictionary *)
Activity continuity - Found person with external UUID = %@, recordID = %i
ABRecordRef _findPersonByWeightedSearch(ABAddressBookRef, NSDictionary *, BOOL)
Activity continuity - Found %lu person(s) by weighted search, recordIDs = %@
Activity continuity - Found person by weighted search, recordID = %i, matchCount = %i
UnsupportedAttributes
MultiValueRestrictions
SupportedLabels
PreferredLabels
Multigroups
MaximumNumber
UnsupportedValueKeys
OverrideReadonly
CFDictionaryRef ABCreateAddressDictionaryWithString(CFStringRef)
FullAddress
/System/Library/PrivateFrameworks/DataDetectorsCore.framework/DataDetectorsCore
Failed to load DataDetectorsCore.framework (%s)
DDScannerCreateWithType
DDScannerCopyResults
DDScannerScanString
DDResultGetSubResults
DDResultGetType
DDResultGetMatchedString
DDResultGetRange
Failed to load some symbols from DataDetectorsCore.framework (%s)
ZipCode
 abp.ROWID IN (select member_id FROM ABGroupMembers WHERE group_id = ? AND member_type = 0)
 StoreID = ?
 StoreID IN (SELECT abs.RowID FROM ABStore abs, ABAccount aba WHERE abs.AccountID = aba.ROWID AND aba.AccountIdentifier = ?)
ABPredicate %p - person in group (%i %@), store (%i %@), account (%@)
ABNamePredicate.m
Should not call [ABNamePredicate group].  Uses [ABNamePredicate groups] instead.
Should not call [ABNamePredicate source].  Uses [ABNamePredicate sources] instead.
Should have address book before attempting to use [ABNamePredicate setAccountIdentifier:].  Or preferably, use [ABNamePredicate setSources:].
Should not call [ABNamePredicate accountIdentifier].  ABNamePredicate is source based rather than account based.
v32@?0@"NSString"8Q16^B24
RankResults_%d.Rank
RankResults_%d.MatchedColumns
RankResults_%d.MatchedSnippet
 MATCH ' 
%@:' || ? || '
LEFT JOIN 
(select ROWID as RankRow, ab_cf_tokenizer_namerank(matchinfo(ABPersonFullTextSearch), ? ) as Rank, ab_cf_tokenizer_matched_properties(matchinfo(ABPersonFullTextSearch), ? ) as MatchedColumns, 1 as HasFTSMatch from ABPersonFullTextSearch join ABPerson on ABPerson.rowid=ABPersonFullTextSearch.rowid WHERE ABPersonFullTextSearch.Organization MATCH ? and Kind=%@
 UNION 
select ROWID as RankRow, ab_cf_tokenizer_namerank(matchinfo(ABPersonFullTextSearch) , ? ) as Rank, ab_cf_tokenizer_matched_properties(matchinfo(ABPersonFullTextSearch), ? ) as MatchedColumns, 1 as HasFTSMatch from ABPersonFullTextSearch join ABPerson on ABPerson.rowid=ABPersonFullTextSearch.rowid WHERE ABPersonFullTextSearch 
 AND Kind=%@)
(select fts.ROWID as RankRow, ab_cf_tokenizer_namerank(matchinfo(ABPersonFullTextSearch), ? ) as Rank, ab_cf_tokenizer_matched_properties(matchinfo(ABPersonFullTextSearch), ? ) as MatchedColumns, %@ 1 as HasFTSMatch from ABPersonFullTextSearch fts 
fts.rowid IN ( 
 ) AND
where %@ ABPersonFullTextSearch MATCH ' ' || ? || ' 
 OR (
 ' || ? || ' 
 AS RankResults_%d ON abp.ROWID=RankResults_%d.RankRow 
SupplementalCompositeNameTerms
 RankResults_%d.HasFTSMatch = 1 
abp.ROWID in (select abs.person_id from ABPersonSearchKey abs WHERE
##&%@%@ 
##&%@ 
ABNamePredicate %p - Name matching <%@> - Match whole words <%@> - Match name only <%@> - Match preferred name <%@> - Sources <%@> - Groups <%@>
 FROM ABPerson abp 
WHERE 
 GROUP BY (
ORDER BY
%@%@ DESC %@
 ORDER BY 
 GROUP BY 
%@%@%@
ABPredicate.m
Only address book specific predicates and compound predicates are supported
ABPredicate (%@) %p
, %@
-[ABPredicate bindString:toStatement:withBindingOffset:]
Binding error at index %d
abPredicateEval
relevance
matchedProperties
matchedTerms
excerpt
excerptEmphasized
-[ABValuePredicate isValid]
Equality and inequalities are the only supported comparisons for date properties
Date properties can only be matched with dates
Equality and prefix are the only supported comparison for the phone property.
Phone numbers can only be compared to strings
Dictionary properties like <%@> can only be compared to dictionaries or strings
abv.value
LEFT OUTER JOIN ABMultiValue abv ON abp.ROWID = abv.record_id
JOIN ABMultiValue abv ON abp.ROWID = abv.record_id
BETWEEN ? AND ?
IS NULL
LIKE ?
(abv.ROWID IN (
 INTERSECT 
(SELECT rowid FROM ABPersonFullTextSearch WHERE %@ MATCH ? )
(SELECT ROWID FROM ABPerson)
SELECT parent_id FROM ABMultiValueEntry mve JOIN ABMultiValueEntryKey mvk NOT INDEXED ON mve.key = mvk.rowid WHERE mve.ROWID IN (SELECT ROWID FROM ABMultiValueEntry WHERE parent_id IN (SELECT UID FROM ABMultiValue WHERE record_id IN %@  )) AND mvk.value = ? AND mve.value LIKE ?
((SELECT COUNT() FROM ABMultiValue JOIN ABMultiValueEntry abve ON abve.parent_id = abv.UID WHERE (abp.ROWID = abv.record_id AND abv.property+0 = ? AND abve.value %@) LIMIT 1) > 0)
value COLLATE NOCASE
CAST(%@ AS NUMERIC)
ROWID IN (SELECT rowid FROM ABPersonFullTextSearch fts WHERE fts.%@ MATCH ? )
ROWID IN (SELECT abv.record_id FROM ABPersonFullTextSearch fts JOIN ABMultiValue abv ON abv.record_id = fts.rowid WHERE fts.%@ MATCH ? AND abv.%@ %@)
ROWID IN (select record_id from ABMultiValue where property = ? and %@ %@)
ROWID IN (SELECT rowid FROM ABPersonFullTextSearch WHERE %@ MATCH ? )
ROWID IN (SELECT rowid FROM ABPersonFullTextSearch WHERE %@ MATCH ? AND %@ %@)
##&%@%@%@
equal
prefix
suffix
contains
greater than
less than
ABPredicate %p - Value matching (%@): %@ %@
ABPredicate %p - Phone matching <%@> (%@)
((SELECT COUNT() FROM ABMultiValue WHERE (abp.ROWID = record_id AND abPredicateEval(?, ?, value) AND property+0 = ?) LIMIT 1) > 0)
CPSqlitePhoneNumberContainsAlphaCharacters: wrong number of arguments
abp.ROWID
abv.property = ?
 is not NULL
com.apple.addressbook.searchoperation.runloop.mode
+[ABPersonLinker startAutoLinkingNewPeopleInAddressBook:inProcess:]
[ABPersonLinker] startAutoLinkingNewPeopleInAddressBook:%@ inProcess:%i
ABPersonLinker.m
Use (id)initWithAddressBook:(ABAddressBookRef)addressBook instead of (id)init.
 LIKE ? AND 
 IS NULL AND 
%@ = %@
Wrong kind of person, expected an organization
WHERE Organization LIKE ? AND Kind = 1
-[ABPersonLinker makeLinksForAddedPeople:inInitialLinking:countingOuterIterations:detectedLinkCount:]
[ABPersonLinker] (%@) makeLinksForAddedPeople %ld inInitialLinking %i peopleToLink %ld
[ABPersonLinker] (%@) person %i %@, otherPeopleinDatabase %ld, otherNewlyAddedPeople %ld
[ABPersonLinker] (%@) person %i %@, personLinkId %i
PersonLinkerLastProcessedPerson
-[ABPersonLinker removeAllLinks]
[ABPersonLinker] %@: removeAllLinks on %ld people
WHERE ROWID > ? ORDER BY ROWID LIMIT ?
-[ABPersonLinker linkRecentlyAddedPeopleWithLimit:]
[ABPersonLinker] (%@) link recently added people with last autolinked person ID %i, limit %ld, number of people found %ld
-[ABPersonLinker linkNewlyAddedPerson:]
[ABPersonLinker] (%@) link newly added person %@
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
kbdSettings
defaultKbdSettings
CFStringRef ABAddressCopyCountryCodeForCountryName(CFStringRef)
countryName=%@
countryCode=%@
URL_FORMAT
COUNTRY
ABUse21vCardFormat
AB21vCardEncoding
\n\n
ABPrivateVCardFieldsEnabled
com.apple.AddressBook
ABPrivateVCardFields
ABIncludeNotesInVCard
ABIncludeREVInVCard
ABIncludePhotosInVCard
;type=WORK
WORK
;type=HOME
HOME
;type=OTHER
OTHER
VOICE
CELL
IPHONE
APPLEWATCH
MAIN
PAGER
X-ABLabel:
%0*li
CALSCALE=%@:
item%ld
;type=
;type=pref
X-AIM
X-JABBER
X-MSN
X-YAHOO
X-ICQ
X-MS-IMADDRESS
;x-teamidentifier=
;x-bundleidentifiers=
;x-userid=
IMPP
;X-SERVICE-TYPE=%@
InstantMessageURLSchemes
:x-apple
;CHARSET=
X-SOCIALPROFILE
;type=%@
;x-user=%@
;x-userid=%@
;x-displayname=%@
;x-teamidentifier=%@
com.apple.activityalert.call
sound
vibration
ignoreMute
com.apple.activityalert.text
call
text
X-ACTIVITY-ALERT:
v32@?0@8@16^B24
LATIN1:
MACINTOSH:
UTF-8:
LATIN1
MACINTOSH
UTF-8
BEGIN:VCARD
VERSION:2.1
NICKNAME
X-MAIDENNAME
X-PHONETIC-FIRST-NAME
X-PRONUNCIATION-FIRST-NAME
X-PHONETIC-MIDDLE-NAME
X-PRONUNCIATION-MIDDLE-NAME
X-PHONETIC-LAST-NAME
X-PRONUNCIATION-LAST-NAME
X-PHONETIC-ORG
X-PRONUNCIATION-ORG
TITLE
EMAIL;INTERNET
NOTE
BDAY;
value=date:
X-ABRELATEDNAMES
REV:
X-ALTBDAY;
END:VCARD
-[ABVCardRecord _21vCardRepresentationAsData]
-[ABPerson vCardRepresentation]: %@
-//Apple Inc.//iOS %@//EN
CATEGORIES
VERSION:3.0
PRODID:
NICKNAME:
X-MAIDENNAME:
X-PHONETIC-FIRST-NAME:
X-PRONUNCIATION-FIRST-NAME:
X-PHONETIC-MIDDLE-NAME:
X-PRONUNCIATION-MIDDLE-NAME:
X-PHONETIC-LAST-NAME:
X-PRONUNCIATION-LAST-NAME:
ORG:
X-PHONETIC-ORG:
X-PRONUNCIATION-ORG:
TITLE:
EMAIL;type=INTERNET
X-ABADR
X-APPLE-SUBLOCALITY
X-APPLE-SUBADMINISTRATIVEAREA
NOTE:
;VND-63-MEMOJI-DETAILS=%@
;%@;VALUE=uri:
;VALUE=uri:
JPEG
TIFF
;ENCODING=b
;TYPE=%@
-[ABVCardRecord _copyVCardRepresentationAsStringIncludeExternalProperties:withPhoto:extraPhotoParameters:includePrivateData:]
Discarding corrupted image data
X-ABDATE
X-ABShowAs:COMPANY
UID:
Error trying to decode external representation: %@
Exception trying to decode external representation: %@
X-APPLE-MAPS-DATA:
X-APPLE-GUARDIAN-WHITELISTED:true
X-APPLE-GUARDIAN-WHITELISTED:false
X-IMAGETYPE:
X-IMAGEHASH:
X-ADDRESSBOOKSERVER-KIND:group
-[ABVCardRecord _copyGroupVCardRepresentationAsStringIncludeExternalProperties:]
X-ADDRESSBOOKSERVER-KIND
X-ADDRESSBOOKSERVER-MEMBER
X-ADDRESSBOOKSERVER-MEMBER:urn:uuid:
-[ABGroup vCardRepresentation]: %@
ABNoToken
ABEOF
ABLF
ABCR
ABERROR
????
-[ABVCardLexer nextTokenPeakSingle:length:]
vCard Syntax Error, character: %d : %c
-[ABVCardLexer nextTokenPeakUnicode:length:]
BEGIN
VCARD
VERSION
token
com.apple.dataaccess.dataaccessd
X-ABLabel
X-SOCIALPROFILE-ABUSERID
x-teamidentifier
x-bundleidentifiers
x-userid
x-ueserid
Either identifier must be kABPersonSoundIdentifierOther or alert and activity must be non nil
TYPE
PREF
x-user
x-displayname
type
SERVICE-TYPE
X-SERVICE-TYPE
X-TEAMIDENTIFIER
X-BUNDLEIDENTIFIERS
X-USERID
InstantMessageCanonicalNames
false
v24@?0@"NSString"8@"NSDictionary"16
Zulu
%a, %b %e, %Y
CALSCALE
(null)
COMPANY
X-APPLE-OL
X-PHONETIC-COMPANY-NAME
LABEL
QUOTED-PRINTABLE
BASE64
CHARSET
UTF-7
-[ABVCardParser parseItem]
%@ is an invalid encoding
ENCODING
X-USER
X-DISPLAYNAME
X-ABCROP-RECTANGLE
VND-63-MEMOJI-DETAILS
Malformed TEL
Malformed ADR
Malformed ORG
Malformed ADD
EMAIL
Malformed EMAIL
Malformed X-AIM
Malformed X-MSN
Malformed X-ICQ
ABClipRect_1
Malformed N
Malformed VERSION
X-ABUID
Malformed X-YAHOO
BDAY
Malformed BDAY
Malformed IMPP
Malformed NICKNAME
Malformed X-JABBER
Malformed ABDATE
X-ABOrder
X-ABPhoto
X-ALTBDAY
Malformed X-ALTBDAY
X-ABShowAs
X-IMAGETYPE
X-IMAGEHASH
Malformed X-MS-IMADDRESS
X-ACTIVITY-ALERT
Malformed X-ACTIVITY-ALERT
X-APPLE-MAPS-DATA
Malformed X-APPLE-GUARDIAN-WHITELISTED
X-ADDRESSBOOKSERVER-PHONEME-DATA
LOGO
SOUND
PRODID
SORT-STRING
-[ABVCardParser importToValueSetter:]
Malformed BEGIN
Malformed :
Malformed VCARD
Malformed space after EOL
Malformed EOL
failed to import vcard:
failed to import vcard, file too large to log (actual size %lu)
-[ABVCardParser peopleAndProperties:]
Aborting vCard parsing due to import errors.
-[ABVCardParser sortedPeopleAndProperties:]
Aborting vCard sorting and returning 0 contact due to import errors.
Aborting vCard sorting and returning 0 contact due to sorting being too long.
-[ABVCardCardDAVParser importToPerson:removeExistingProperties:]
Exception trying to encode unknown attributes for external representation: %@
-[ABVCardCardDAVParser importToGroup:removeExistingProperties:]
-[ABVCardCardDAVParser createRecordInSource:outRecordType:]
NONAME
 Primary
-[ABVCardPersonValueSetter setValueInTemporaryCache:forProperty:]
CGRect ABImageUtilsCenteredSquareForRect(CGRect)
_Bool ABImageUtilsCopyImageSourceAndGetSizeFromData(CFDataRef, CGImageSourceRef *, int *, int *)
ABImageUtilsCreateScaledImageData
ABImageUtils.c
bitsPerComponent == 5 || bitsPerComponent == 8
/tmp/%i-origImage.jpg
/tmp/%i-savedSyncImage.jpg
/tmp/%i-normalizedOrigImage.jpg
/tmp/%i-syncImage.jpg
NSData *_copyImageDataReducedUpToSize(NSData *, CGImageSourceRef, CGFloat *, int, int, unsigned int, BOOL, BOOL)
Trying to jpeg compresss the original image.
Original image at quality %f has length %lu
Trying to scale down the original image.
Original image with size (%i, %i) at %d max edge has length %lu, scalingFactor = %f
@24@?0r^S8Q16
[[:scx=Kana:]]
CFArrayRef ABPersonCreatePeopleInSourceWithVCardRepresentation(ABRecordRef, CFDataRef)
CFDataRef ABPersonCreateVCardRepresentationWithPeople(CFArrayRef)
ChangesTruncated
LatestSequenceNumber
RecordIDs
EventTypes
SequenceNumbers
RecordGUIDs
PersonLinks
PersonLinkUUIDs
LinkToPersonUUIDs
ChangeTableRowIDs
ExternalIDs
ImagesChanged
com.apple.MobileSync
PropertyIDs
MultiValueIdentifiers
MultiValueGUIDs
ABChangeHistoryIdleClientWasPurgedNotification
DROP TABLE IF EXISTS ClientCursor;
DROP TABLE IF EXISTS ClientSequence;
DROP TABLE IF EXISTS ClientCursorConsumed;
CREATE TABLE ClientCursor (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, store_id INTEGER, latest_consumed_sequence_number INTEGER, latest_consumed_timestamp REAL, client_identifier TEXT, UNIQUE(client_identifier, store_id));
CREATE INDEX ClientCursorClientIdentifier ON ClientCursor(client_identifier, store_id); 
CREATE TABLE ClientSequence (sequence_number INTEGER,client_identifier TEXT,save_timestamp REAL );
CREATE INDEX ClientSequenceClientIdentifier ON ClientSequence(client_identifier); 
CREATE TABLE ClientCursorConsumed (store_id INTEGER, consumed_entity_class INTEGER, consumed_entity_id INTEGER, consumed_change_id INTEGER, sequence_number INTEGER, client_identifier TEXT);
CREATE INDEX ClientCursorConsumedClientIdentifier ON ClientCursorConsumed(client_identifier, store_id); 
CREATE TRIGGER delete_clientcursor_consumed AFTER DELETE ON ClientCursor 
    BEGIN 
        DELETE FROM ClientCursorConsumed WHERE client_identifier = OLD.client_identifier AND store_id = OLD.store_id; 
    END; 
alter table ClientSequence rename to ClientSequence_old;
DROP INDEX IF EXISTS ClientSequenceClientIdentifier;
DROP TRIGGER IF EXISTS delete_clientcursor_consumed;
INSERT INTO ClientSequence (ROWID, sequence_number, client_identifier, save_timestamp)     SELECT ROWID, sequence_number, client_identifier, ? FROM ClientSequence_old; 
drop table ClientSequence_old;
Unknown client registering for AB change history, creating simulated crash report.
int ABChangeHistoryRegisterClientForSource(ABAddressBookRef, CFStringRef, ABRecordRef)
INSERT OR REPLACE INTO ClientCursor (client_identifier, store_id, latest_consumed_sequence_number, latest_consumed_timestamp) VALUES (?, ?, (SELECT IFNULL(MIN(latest_consumed_sequence_number), -1) FROM ClientCursor WHERE client_identifier = ? and store_id = ?), ?);
clientIdentifier = %@, storeID = %i
>> latestSequenceNumber = %i
ClientCursor
SELECT DISTINCT client_identifier FROM ClientCursor;
CFArrayRef ABChangeHistoryCopyAllRegisteredClientIdentifiers(ABAddressBookRef)
>> clientIdentifiers = %@
void ABChangeHistoryUnregisterClientForSource(ABAddressBookRef, CFStringRef, ABRecordRef)
DELETE FROM ClientCursor WHERE client_identifier = ? and store_id = ?;
DELETE FROM ClientCursor WHERE client_identifier = ?;
clientIdentifier = %@, storeID = %i
void ABChangeHistorySetAddressBookClientIdentifier(ABAddressBookRef, CFStringRef)
clientIdentifier = %@
void ABChangeHistorySetSaveTimestamp(ABAddressBookRef, CFAbsoluteTime)
saveTimestamp = %@
INSERT INTO ClientSequence (client_identifier, sequence_number, save_timestamp) VALUES (?, ?, ?);
com.apple.exchangesyncd
CFDictionaryRef ABChangeHistoryGetChanges(ABAddressBookRef, ABChangeHistoryEntityType, CFArrayRef, ABChangeHistoryOptions, int, int, CFStringRef, CFArrayRef, ABRecordRef)
clientIdentifier = %@, storeID = %i, entityType = %i, sequenceNumber = %i, recordID = %i, compressChanges = %@, unifyResults = %@, linkingResults = %@, meCardResults = %@, changeKeys = %@
SELECT IFNULL(MIN(latest_consumed_sequence_number), -1) FROM ClientCursor WHERE client_identifier = ? AND store_id = ?;
    %@ = %@
using latest consumed sequenceNumber = %i
StoreID = ? AND sequence_number > ? AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ? OR client_identifier = "com.apple.accounts.dom") AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?)
(sequence_number > ? OR (sequence_number = ? AND record > ?)) AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?) AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?)
ORDER BY sequence_number, record ASC
sequence_number > ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?)
sequence_number > ? AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)
    %@ = %i
>> changes = (
ClientCursorConsumed
ClientSequence
SELECT COUNT(*) FROM (SELECT NULL FROM %@ WHERE sequence_number = ? AND record > ? LIMIT 1);
void _clearChangesForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, int)
Tables before clear changes:
Tables before clear changes:
will clear up to previous sequenceNumber = %i
DELETE FROM ClientCursorConsumed     WHERE client_identifier = ? AND store_id = ? AND IFNULL(sequence_number, 0) <= ?;
UPDATE ClientCursor     SET latest_consumed_timestamp = ?, latest_consumed_sequence_number = MAX(?, (SELECT latest_consumed_sequence_number FROM ClientCursor WHERE client_identifier = ? AND store_id = ?))     WHERE client_identifier = ?;
Tables after clear changes:
Tables after clear changes:%@
void ABChangeHistoryClearChangesUpToSequenceNumberForClient(ABAddressBookRef, int, CFStringRef, ABRecordRef)
clientIdentifier = %@, storeID = %i, sequenceNumber = %i
void ABChangeHistoryClearEntityChangesUpToSequenceNumberAndRecordIDForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, ABRecordRef)
clientIdentifier = %@, storeID = %i, entityType = %i, sequenceNumber = %i, recordID = %i
int ABChangeHistoryGetLatestConsumedSequenceNumberForClient(ABAddressBookRef, CFStringRef, ABRecordRef)
clientIdentifier = %@, storeID = %i
>> latestConsumedSequenceNumber = %i
void ABChangeHistoryClearEntityChangeTableRowIDsForClient(ABAddressBookRef, ABChangeHistoryEntityType, CFArrayRef, CFStringRef, ABRecordRef)
clientIdentifier = %@, storeID = %i, entityType = %i, changeTableRowIDs = %@
ABChangeHistoryClearEntityChangeTableRowIDsForClient
ABChangeHistory.m
entityType == ABChangeHistoryEntityTypePerson || entityType == ABChangeHistoryEntityTypeGroup
SELECT sequence_number FROM %@Changes WHERE ROWID = ?;
INSERT INTO ClientCursorConsumed (client_identifier, store_id, consumed_entity_class, consumed_entity_id, consumed_change_id, sequence_number) VALUES (?, ?, ?,  (SELECT record FROM %@Changes WHERE ROWID = ? LIMIT 1),  ?,  (SELECT sequence_number FROM %@Changes WHERE ROWID = ?) )
void ABChangeHistoryPurgeIdleClients(ABAddressBookRef, CFAbsoluteTime, int)
timestamp = %f, numChanges = %i
SELECT client_identifier FROM ClientCursor WHERE latest_consumed_timestamp < ? OR (store_id = -1 AND (SELECT count(*) FROM (SELECT NULL FROM ABPersonChanges WHERE sequence_number > latest_consumed_sequence_number AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE ClientSequence.client_identifier = ClientCursor.client_identifier))) > ?);
Purging change-tracking client %@ which has been idle since %f or is tracking all stores and is behind more more than %d changes
SELECT MAX(sequence_number) FROM ClientSequence WHERE save_timestamp < ?;
SELECT sequence_number FROM ABPersonChanges ORDER BY sequence_number DESC LIMIT 1 OFFSET ?;
SELECT MIN(latest_consumed_sequence_number) FROM ClientCursor WHERE client_identifier LIKE 'com.apple.dataaccessd%';
PeakContactCount
DELETE FROM ABPersonChanges WHERE sequence_number <= ?;
DELETE FROM ABGroupChanges WHERE sequence_number <= ?;
DELETE FROM ClientSequence WHERE sequence_number <= ?;
DELETE FROM ClientCursor WHERE latest_consumed_sequence_number != -1 AND latest_consumed_sequence_number <= ? AND client_identifier NOT LIKE 'com.apple.dataaccessd%';
v16@?0@"NSString"8
SELECT COUNT(*) FROM (SELECT NULL FROM ClientCursor WHERE client_identifier LIKE ? LIMIT 1);
SELECT COUNT(*) FROM (SELECT NULL FROM %@);
void ABChangeHistoryInsertUpdatesForRecordsFromBlockWithClientIdentifier(ABAddressBookRef, CFArrayRef (^)(void), CFStringRef)
__CPRecordSequenceNumber
INSERT INTO ABPersonChanges VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
_Bool ABChangeHistoryInsertPersonImageChangeRecordForRecordsWithIdentifiers(ABAddressBookRef, CFArrayRef)
failed to write change history records for deleted thumbnails because we were not passed an ABAddressBookRef
SELECT ROWID, StoreID, ExternalIdentifier, guid, PersonLink FROM ABPerson WHERE ROWID IN ( ? 
, ? 
INSERT INTO ABGroupChanges VALUES(?, ?, ?, ?, ?, ?);
Error %d adding group change log entry statement: %s
Error %d preparing group changes log statement: %s
CPSqliteConnection *_getWriterConnection(CPRecordStoreRef, const char *)
%s: failed to start transaction for writer connection (error %d)
%s: failed to get writer connection
void _commitWriterConnection(CPSqliteConnection *, const char *)
%s: failed to commit transaction (error %d)
v28@?0q8i16^B20
v16@?0@"NSNumber"8
v24@?0@"NSString"8@"NSArray"16
v32@?0@"NSNumber"8Q16^B24
ABPersonChanges
ABGroupChanges
ABPersonMultiValueDeletes
select ROWID, * from %@
%@ = ( )
%@ (%li) = (
    
rowid
<BLOB>
NOTES_BUILDING_NAME_FORMAT
NOTES_APPLE_FLOOR_FORMAT
SocialServicesURLFormats.plist
UnknownServiceURLFormat
SocialServicesURLRegexes.plist
v32@?0@"NSTextCheckingResult"8Q16^B24
x-apple
http
https
www.
CNFavoritesEntryChangedNotification
CNFavoritesEntryIdentityChangedNotification
CNFavoritesEntryOldIdentityKey
Property
Value
Label
ABUid
ABIdentifier
ABDatabaseUUID
EntryType
-[ABFavoritesEntry initWithDictionaryRepresentation:addressBook:]
addressBook is NULL, some API is non-functional when this is the case (example -ABPerson)
CNFavoritesChangedNotification
-[ABFavoritesListManager reportFavoritesIssue:]
ABFavoriteListManager
-[ABFavoritesListManager _loadListWithAddressBook:]
Read favorites file %@, count = %ld
Error reading favorites file, error: %@
no error returned
Error reading favorites file. Add a favorite as workaround. Please open a radar to PEP Contacts (New Bugs).
CNFavoritesChangedExternallyNotification
-[ABFavoritesListManager saveImmediately]
must save changes with CNFavorites
-[ABFavoritesListManager save]
-[ABFavoritesListManager entryIsDuplicateAndThusRemoved:oldUid:]
Checking for duplicate favorites entry, but entry we were told to compare is not list! Entry: %@
List: %@
Library/Preferences
com.apple.mobilephone.speeddial.plist
/System/Library/Frameworks/CoreTelephony.framework/CoreTelephony
CTSettingCopyMyPhoneNumber
System/Library/PrivateFrameworks/FindMyDevice.framework/FindMyDevice
FMDFMIPManager
kLostModeChangedNotification
SELECT rowid FROM ABPerson WHERE guid IN ( %@ )
SELECT rowid FROM(SELECT abp.ROWID FROM ABPerson abp LEFT JOIN ABPersonLink abpl ON abpl.rowid = abp.personlink WHERE abpl.guid IN ( %@ ) UNION SELECT abp.ROWID FROM ABPerson abp  WHERE abp.guid IN ( %@))
v16@?0@"ABBinders"8
SELECT rowid FROM ABPerson WHERE rowid = ?
SELECT abp.ROWID FROM ABPersonSearchKey abs JOIN ABPerson abp ON abs.person_id = abp.ROWID WHERE 
SELECT abp.rowid from ABPerson abp JOIN ABGroupMembers abgm ON abgm.member_id = abp.ROWID AND abgm.member_type = 0 JOIN ABGroup abg ON abgm.group_id = abg.ROWID WHERE abg.guid = ?
SELECT abp.rowid FROM ABPerson abp JOIN ABStore abs ON abp.storeid = abs.ROWID WHERE abs.guid = ?
SELECT abp.rowid FROM ABPerson abp WHERE abp.rowid IN (SELECT record_id FROM ABMultiValue WHERE property = ? AND value LIKE ?)
SELECT abp.rowid FROM ABPerson abp WHERE abp.rowid IN (SELECT record_id FROM ABMultiValue WHERE property = ? AND value COLLATE NOCASE = ? LIMIT 1)
SELECT abp.rowid FROM ABPerson abp WHERE abp.Organization LIKE ?
%%%@%%
SELECT abp.rowid FROM ABPerson abp WHERE abp.IsPreferredName = 1 %@ LIMIT ? OFFSET ?
SELECT 1 WHERE 1 = 0
VALUES 
SELECT rowid FROM ABPerson WHERE rowid IN (SELECT rowid FROM ABPerson WHERE personlink = -1 AND StoreID IN %@ UNION SELECT ab_allowed_preferred_contact(abp.rowid, abp.StoreID, abp.IsPreferredName, ? ) FROM ABPerson abp JOIN ABPersonLink abpl ON abpl.rowid = abp.PersonLink WHERE abp.StoreID IN %@ GROUP BY abpl.rowid) %@ LIMIT ? OFFSET ? 
LIMIT 1
= MAX(1, (SELECT max(phonescore) FROM PhoneRanked) )
AND groups.guid in %@
JOIN ABGroupMembers members ON members.member_id = abmv.record_id AND member_type = 0 JOIN ABGroup groups on groups.rowid = members.group_id
WITH PhoneRanked (personrow, phonescore) as (SELECT abmv.record_id, ab_compare_phone_numbers( ?, ?, abmv.value, ?) FROM ABMultivalue abmv %@ WHERE abmv.UID IN (SELECT multivalue_id FROM ABPhoneLastFour WHERE value = ?) %@ ) SELECT personrow FROM PhoneRanked WHERE phonescore %@ %@
ab_collect_value_row_map(?, ABQuery.term, abmv.record_id)
abmv.record_id
AND store.guid in %@
JOIN ABPerson person ON person.ROWID = abmv.record_id JOIN ABStore store ON store.ROWID = person.storeID
WITH ABQuery(term, termlastfour, termdecomposed) AS ( %@ ) SELECT %@ FROM ABPhoneLastFour four JOIN ABQuery on ABQuery.termlastfour = four.value JOIN ABMultiValue abmv on abmv.rowid = four.multivalue_id %@ where ab_compare_phone_numbers(ABQuery.termdecomposed, null, abmv.value, ?) %@
v32@?0@"NSString"8@"ABPhoneNumber"16^B24
WITH ABQuery(term) AS ( %@ ) SELECT %@ FROM ABMultivalue abmv JOIN ABQuery ON term = value collate nocase %@ %@ WHERE property = ? %@ %@ %@
SELECT abp.rowid FROM ABPerson abp WHERE abp.PreferredChannel = ? %@
SELECT MeIdentifier from ABStore where ROWID = (SELECT value from _SqliteDatabaseProperties where key = '%@')
SELECT * FROM (%@) UNION SELECT * FROM  (%@)
@"NSDictionary"12@?0i8
SELECT rowid from ABPersonFullTextSearch WHERE ABPersonFullTextSearch MATCH 
##&%@* 
SELECT rowid FROM ABPerson WHERE externalUUID IN ( %@ )
DYLD_FRAMEWORK_PATH
debug
+[ABDynamicLoader loadFrameworkAtPath:andStoreHandle:bundle:logging:]
Could not load framework at path: %s
error in SQL preparation of statement: %@
v12@?0i8
v20@?0r^v8i16
v16@?0r^v8
, abplink.guid
, (abplink.PreferredImagePersonID = abp.rowid)
, abmv.property, abmv.identifier, abmv.guid, abmv.value, abmvlabel.value
, abmvekey.value, abmve.value
, FirstSortLanguageIndex, FirstSortSection, FirstSort 
, LastSortLanguageIndex, LastSortSection, LastSort 
ABBufferQuery: unrecognized sort order: %u
WITH preferredmatched(rowid %@) as ( 
WITH matched(rowid, personlink) as ( SELECT rowid, personlink from ABPerson 
WHERE rowid in ( %@ ) 
AND 
%@ StoreID IN
SELECT rowid %@ FROM ABPerson abp WHERE abp.rowid IN (SELECT rowid FROM matched WHERE matched.personlink = -1 UNION 
SELECT PreferredNamePersonID FROM ABPersonLink abpl WHERE abpl.rowid IN (SELECT personlink FROM matched)) 
SELECT ab_allowed_preferred_contact(abp.rowid, abp.StoreID, abp.IsPreferredName, ? ) FROM ABPerson abp JOIN ABPersonLink abpl on abpl.rowid = abp.PersonLink WHERE abpl.rowid in (select personlink from matched) GROUP BY abpl.rowid) 
SELECT rowid %@ FROM ABPerson where rowid in ( 
SELECT rowid FROM ABPerson 
AND StoreID IN
 FROM preferredmatched 
 LEFT JOIN ABPerson abp2 on (abp2.rowid = preferredmatched.rowid) 
 JOIN ABPerson abp on (abp2.personlink != -1 and abp2.personlink = abp.personlink) OR (abp.rowid = abp2.rowid) 
 JOIN ABPerson abp on (abp.rowid = preferredmatched.rowid) 
 LEFT JOIN ABPersonLink abplink on abp.PersonLink = abplink.ROWID 
 LEFT JOIN ABMultivalue abmv ON abp.ROWID = abmv.record_id  AND +abmv.property IN 
 LEFT JOIN ABMultivalueLabel abmvlabel on abmv.label = abmvlabel.ROWID 
 LEFT JOIN ABMultiValueEntry abmve on abmve.parent_id = abmv.UID LEFT JOIN ABMultiValueEntryKey abmvekey on abmve.key = abmvekey.rowid 
 WHERE abp.StoreID IN 
preferredmatched.FirstSortLanguageIndex, preferredmatched.FirstSortSection, preferredmatched.FirstSort 
preferredmatched.LastSortLanguageIndex, preferredmatched.LastSortSection, preferredmatched.LastSort 
ABBufferQuery: unrecognized sorte order: %u
abp.PersonLink 
abp.ROWID 
, abmv.property, abmv.UID 
Error handling SQL statement in ABAddressBookCopyPersonBufferForQuery: %s
WHERE rowid IN ( %@ ) %@
B16@?0@?<B@?>8
B8@?0
, crop_x , crop_y , crop_width
SELECT ROWID %@ FROM ABFullSizeImage WHERE record_id = ?;
main
B20@?0@"NSString"8i16
[[:Latin:][:Common:][:Inherited:]]
/System/Library/Frameworks/CoreText.framework/CoreText
CTFontCreateWithName
CTFontCopyCharacterSet
AppleColorEmoji
SELECT fts3_tokenizer(?, ?)
ab_cf_tokenizer
ab_cf_tokenizer_namerank
ab_cf_tokenizer_matched_properties
ab_cf_tokenizer_select_snippet_column
[[:script=Hiragana:][:script=Katakana:]]+|[^[[:script=Hiragana:][:script=Katakana:]]]{1}
ABTokenListDestroy
ABSQLiteICUSupport.m
inList
ABTokenListPopulateFromString
list != NULL
ABTokenListGetCount
ABTokenListGetTokenStartByteOffsetAtIndex
list
index < list->firstUnusedIndex
ABTokenListGetTokenEndByteOffsetAtIndex
ABTokenListGetTokenAtIndex
ABTokenListGetTokenCollationKeyAtIndex
ABTokenListGetTokenCollationKeyLengthAtIndex
ABTokenListGetTokenRangeAtIndex
ABTokenListRemoveAllTokens
ABTokenList
com.apple.unit-testing
entityType
eventType
sequenceNumber
recordID
recordGUID
externalID
imagesChanged
_personLink
linkToPersonUUID
personLinkUUID
Person
Group
MultiValue
Unknown
Update
Delete
UnifiedAdd
UnifiedUpdate
Link
Unlink
SetPreferredName
SetPreferredImage
MeCardChanged
_Bool ABAddressBookMergeRecordsInSourceIntoSource(ABAddressBookRef, ABRecordRef, ABRecordRef)
_Bool _mergePersonIntoLinkedPeopleFromSource(ABAddressBookRef, ABRecordRef, ABRecordRef)
Merging %@ into %@
Error when adding person %@ to source %@: %@
_Bool _movePeopleAndGroupsToSource(ABAddressBookRef, ABRecordRef, ABRecordRef)
Moving contacts from %@ into %@
_Bool _mergeRecordsIntoSource(ABAddressBookRef, ABRecordRef, ABRecordRef)
Merging linked contacts
Error saving DB when moving people to source %@: %@
Moving non linked contacts
_Bool _movePicturesFromPersonToPerson(ABAddressBookRef, ABRecordRef, ABRecordRef)
Error when merging image from person %@ into %@: %@
UPDATE %s SET StoreID = %i, ExternalIdentifier = NULL, ExternalModificationTag = NULL%@ WHERE StoreID = %i;
SELECT ROWID from ABPerson where StoreID = %i;
ABLogFileLevel
ABLogConsoleLevel
ABLogSqlite
ABLogAPIUsage
ABLogContactsSearch
ABLogDataCollection
ABLogPersonDelete
ABLogChangeHistory
General
%s:%i | %@
%llx
Error creating new ASL message: %@
ThreadID
Level
Function
Line
Message
Category
Debug
Facility
addressBookRef=%p
%p(%@)
error=%@
NULL
, %i
backtrace:
Radar
Dismiss
Please mention what you were doing at the time of the error.
Description
Title
AddressBook error
Classification
Serious Bug
ComponentID
568785
ComponentName
PEP Contacts
ComponentVersion
AutoDiagnostics
phone
tap-to-radar
\\$1
(["])
=,\"
([=,\\"])
q24@?0@"NSString"8@"NSString"16
AccountIdentifier
Flags
DefaultSourceID
ABRecordRef ABAccountCreate()
CFStringRef ABAccountCopyInternalUUID(ABRecordRef)
_Bool ABAccountSetInternalUUID(ABRecordRef, CFStringRef, CFErrorRef *)
CFStringRef ABAccountCopyIdentifier(ABRecordRef)
_Bool ABAccountSetIdentifier(ABRecordRef, CFStringRef, CFErrorRef *)
ABRecordRef ABAddressBookGetDefaultSourceForAccount(ABAddressBookRef, ABRecordRef)
_Bool ABAddressBookSetDefaultSourceForAccount(ABAddressBookRef, ABRecordRef, ABRecordRef, CFErrorRef *)
ABRecordRef ABAddressBookCopyAccountWithIdentifier(ABAddressBookRef, CFStringRef)
WHERE AccountIdentifier = ?
CFArrayRef ABAddressBookCopyArrayOfAllAccounts(ABAddressBookRef)
CFArrayRef ABAddressBookCopyArrayOfAllSourcesInAccount(ABAddressBookRef, ABRecordRef)
WHERE AccountID = ?
INSERT INTO ABAccount(AccountIdentifier) SELECT ? WHERE NOT EXISTS (SELECT AccountIdentifier FROM ABAccount where AccountIdentifier = ?);
UPDATE ABStore SET AccountID = (SELECT ROWID FROM ABAccount WHERE AccountIdentifier = ?) WHERE StoreInternalIdentifier = ?;
UPDATE ABAccount SET DefaultSourceID = (SELECT ROWID FROM ABStore WHERE StoreInternalIdentifier = ?) WHERE AccountIdentifier = ?;
ABAccount
v24@?0q8@"NSError"16
v32@?0@"NSString"8@"NSString"16^B24
select ROWID from ABPerson where StoreID not in (select ROWID from ABStore);
select UID from ABMultiValue where record_id not in (select ROWID from ABPerson);
select ROWID from ABMultiValueEntry where parent_id not in (select UID from ABMultiValue);
select multivalue_id from ABPhoneLastFour where multivalue_id not in (select ROWID from ABMultiValue);
select ROWID from ABPerson;
select record_id from ABFullSizeImage;
select distinct record_id from ABThumbnailImage;
void ABDatabaseIntegrityCheckWithAddressBookAndImageStore(ABAddressBookRef, CPRecordStoreRef)
deleted %ld orphaned people
deleted %ld orphaned multi-values
deleted %ld orphaned multi-value entries
deleted %ld orphaned phone last fours
deleted %ld orphaned images
delete from ABPerson where StoreID not in (select ROWID from ABStore);
delete from ABMultiValue where record_id not in (select ROWID from ABPerson);
delete from ABMultiValueEntry where parent_id not in (select UID from ABMultiValue);
delete from ABPhoneLastFour where multivalue_id not in (select ROWID from ABMultiValue);
Error fetching boot UUID (missing entitlements?); using an error value instead
Marking database path %{public}@ for future deletion with current boot uuid %{public}@.
Failed to mark address book database for deletion: _cn_setValue:forExtendedAttribute: returned  %@
Error fetching xattrs to check if database is marked for deletion: %@
AddressBook preparing save, sequence number = %d, deleted contact count = %ld, added contact count = %ld, change history id = %{public}@
AddressBook failed to save: CPRecordStoreSaveWithCallbackAndTransactionType returned error: %{public}@
Error opening root collator to retrieve version number, code=%d
Internal error from ucol_getSortKey for '%@'
[Likeness Update] Thumbnail cropRect {%.2f, %.2f, %.2f, %.2f} inverted Y-origin to %.2f
[Likeness Update] Attempting to set imageData with cropRect {%.2f, %.2f, %.2f, %.2f} extending beyond image of size (%i x %i), forcing a centered square cropRect
[Likeness Update] Thumbnail cropRect {%.2f, %.2f, %.2f, %.2f} Y-origin forced to 0 because it was negative (availableHeight = %i)
[Likeness Update] Setting original size imageData with cropRect {%.2f, %.2f, %.2f, %.2f} for image of size (%i x %i). Also setting thumbnail & fullscreen derivatives.
[Likeness Update] Not setting image on person, as it hasn't changed
[Likeness Update] Sync image changed: %{public}@, cropRect {%i, %i, %i, %i} changed: %{public}@. Updating sync image on person
[Likeness Update] original cropRect {%.2f, %.2f, %.2f, %.2f} vs syncedCropRect: {%.2f, %.2f, %.2f, %.2f}
[Likeness Update] original height %i vs sync height: %i, cropRect is scaled down: %@
[Likeness Update] Enter ABImageUtilsCopySyncImageForPerson: ABRecordID = %i, maxSize = %i, allowOverflow = %i
[Likeness Update] Exit ABImageUtilsCopySyncImageForPerson: no original image available to sync.
Original image has length = %lu with thumbnail crop rect (%i, %i, %i, %i)
[Likeness Update] Exit ABImageUtilsCopySyncImageForPerson: can't get size of original image to sync.
Returning the AB saved sync image.
[Likeness Update] ABImageUtilsCopySyncImageForPerson: inconsistent sync image ratio (%ix%i) vs original image ratio (%ix%i). Crop rect will be messed up
[Likeness Update] ABImageUtilsCopySyncImageForPerson: Unable to get sync image size. Crop rect will be messed up
Transforming the original image to normal orientation.
Returning the original image.
[Likeness Update] Scaling failed to reduce to max size, trying again without alpha preservation by allowing JPEG conversion.
[Likeness Update] Scaling/compression failed to reduce image of size %lu to max size %u. Proceeding without sync image.
[Likeness Update] Exit ABImageUtilsCopySyncImageForPerson: sync image length = %lu with thumbnail crop rect (%i, %i, %i, %i)
Error %d with query to clear sequence number: %s
Failed to clear changes to sequence number %d with query %@
Inserted change history record for person id %d (guid %{public}@) after moving to store id %d; sequence number = %d
Inserted change history record for group id %d (guid %{public}@) after moving to store id %d; sequence number = %d
Error %d adding change log entry statement: %s
Error %d preparing person changes log statement: %s
Error creating localized string from format = %{public}@, value = %{public}@, error = %{public}@
Error creating social profile URL from format = %{public}@, username = %{public}@, error = %{public}@
%@ (or something it links) is using deprecated code and contributing to the overall instability of the system.
ABVCardDateScanner
ABFacebookMigrator
ABAccountScorer
ABDowntimeWhitelistMigrator
ABCCallbackInvoker
ABGroupMembershipPredicate
ABNamePredicate
ABPredicate
ABPredicateRunner
ABPredicateQueryCreation
ABValuePredicate
ABPhonePredicate
ABAnyValuePredicate
ABPhoneNumber
ABSearchOperation
ABPersonLinker
ABDataAdditions
ABCMutableDataAdditions
ABVCardActivityAlertScanner
ABVCardAdditions
ABVCardExporter
ABVCardCardDAVRecord
ABVCardCardDAVExporter
ABVCardRecord
ABVCardLexer
ABUtils
ABVCardParser
ABVCardCardDAVParser
ABVCardParameter
ABVCardValueSetter
ABVCardPersonValueSetter
ABVCardCardDAVValueSetter
ABServerSearchPredicate
DASearchQueryConsumer
ABAdditions
ABVCardWatchdogTimer
_ABVCardTimeProvider
ABVCardTimeProvider
NSObject
ABFavoritesEntry
Lookup
ABFavoritesLookupChangeRecord
ABFavoritesListManager
ABSQLPredicate
NamePredicateSortKeyWrapper
ABDynamicLoader
ABPhoneFormatting
ABBinders
ABBufferQuery
ABBufferQueryCursor
ABChangeHistoryEvent
ABVCardActivityAlertSerializer
ABVCardActivityAlertQuotingSerializationStrategy
ABVCardActivityAlertAbstractSerializationStrategy
ABVCardActivityAlertEscapingSerializationStrategy
ABVCardActivityAlertSerialization
countByEnumeratingWithState:objects:count:
count
isInitialLinkingEnabled
isLinkDataValidForAddressBook:
initWithAddressBook:
makeInitialLinks
isAutoLinkingEnabled
currentBootSessionUUID
defaultManager
_cn_setValue:forExtendedAttribute:path:error:
_cn_getValue:forExtendendAttribute:path:error:
isEqualToString:
runningboardInhibitorWithExplanation:
start
startAutoLinkingNewPeopleInAddressBook:inProcess:
stop
stringByAppendingPathComponent:
contentsOfDirectoryAtPath:error:
stringByAppendingString:
_cn_map:
processInfo
processName
currentEnvironment
schedulerProvider
backgroundScheduler
performBlock:
UUID
UUIDString
defaultCenter
postNotificationName:object:userInfo:
stringWithFormat:
handleEvent
defaultProvider
initWithDelay:options:block:schedulerProvider:downstreamScheduler:
date
initWithString:
init
copy
isAtEnd
nextCharacter
length
substringWithRange:
integerValue
lengthOfCalendarUnit:
scanComponentValueOfLength:
characterAtIndex:
scannerWithString:
scanCalendarUnit:
scanLeapMarker
position
_string
_position
TQ,R,V_position
defaultStore
initWithAddressBook:accountStore:
dealloc
isAccountTypeFacebook:
_detectFacebookSource
facebookSource
mayHaveFacebookSource
addressBook
isCheckDone
facebookContactsCount
findBestMergeDestinationSourceID
setMergeDestinationSourceID:
deleteFacebookContacts
setCheckDone:
_startDatabaseDoctorToPerformAction:
accountStore
setFacebookSource:
setFacebookContactsCount:
setMayHaveFacebookSource:
initWithAddressBook:accountStore:account:defaultSourceID:
calculateScore
score
sourceID
accountType
accountTypeDescription
accountDisambiguationDescription
setDestinationDescription:
mergeDestinationSourceID
_mergeContactsFromAccount:toDestinationSourceID:
_removeContactsAccount:
_findFacebookStoreID:
_performQuery:withStoreID:connection:
isSourceFacebook:
mayHaveFacebookContacts:
removeFacebookSensitiveInformation:
canMergeFacebookContacts
mergeFacebookContacts
performPendingMergeOrDeleteAction
destinationDescription
setAddressBook:
setAccountStore:
.cxx_destruct
_mayHaveFacebookSource
_mergeDestinationSourceID
_facebookContactsCount
_destinationDescription
_addressBook
_accountStore
_facebookSource
T^v,N,V_addressBook
T@"ACAccountStore",&,N,V_accountStore
T^v,N,V_facebookSource
Ti,N,V_mergeDestinationSourceID
TB,N,V_mayHaveFacebookSource
checkDone
TB,N,GisCheckDone
TQ,N,V_facebookContactsCount
T@"NSString",&,N,V_destinationDescription
stringWithCString:encoding:
displayTypeForAccountWithIdentifier:
identifier
account
accountWithIdentifier:
displayAccount
username
dictionaryWithObjects:forKeys:count:
setAccountType:
_findBestSourceID
setSourceID:
objectForKeyedSubscript:
doubleValue
setScore:
defaultSourceID
setAccount:
setDefaultSourceID:
_sourceID
_defaultSourceID
_score
_accountType
_account
T^v,N,V_account
Ti,N,V_defaultSourceID
Td,N,V_score
T@"NSString",&,N,V_accountType
T@"NSString",R,N
Ti,N,V_sourceID
moveDowntimeWhitelistFromUnknownProperties:
mainBundle
bundleIdentifier
appendString:
timeZoneForSecondsFromGMT:
initWithCalendarIdentifier:
setTimeZone:
components:fromDate:
isYearlessDate:forCalendar:
setYearlessYear:forCalendar:
dateFromComponents:
deviceHasManagementRestrictions
stringWithUTF8String:
canReadFromAccountWithIdentifier:
canReadFromLocalAccount
containsIndex:
addObject:
componentsSeparatedByString:
rangeOfString:options:
boolValue
callStackSymbols
objectForKey:
localizedStringForPostalAddressString:returningNilIfNotFound:
timeIntervalSinceDate:
context
addObjectsFromArray:
setMaxConcurrentOperationCount:
personPredicateWithPhoneLike:countryHint:addressBook:
setPredicate:
setContext:
setProgressBlock:
addOperation:
intersectSet:
containsObject:
removeAllObjects
enumerateObjectsUsingBlock:
sortUsingComparator:
lastObject
fileSystemRepresentation
dictionaryWithContentsOfFile:
mutableCopy
dictionary
intValue
setObject:forKeyedSubscript:
stringByAppendingFormat:
fileExistsAtPath:
numberWithInt:
dataWithPropertyList:format:options:error:
writeToFile:atomically:
fileExistsAtPath:isDirectory:
moveItemAtPath:toPath:error:
removeItemAtPath:error:
setObject:forKey:
allValues
arrayByAddingObject:
personPredicateWithValue:comparison:forProperty:addressBook:
operations
isFinished
cropRect:fitsWithinSize:
centeredSquareCropRectInRect:
_cn_md5Hash
isEqualToData:
enumerateIndexesUsingBlock:
appendFormat:
_defaultDisplayNameOrder
setDefaultDisplayNameOrder:
_defaultShortNameFormat
_shortNameIsEnabled
_shouldPreferNicknames
setShortNameFormat:
setShortNameIsEnabled:
setPreferNicknamesDefault:
_cn_stringBySanitizingPhoneNumber
stringWithString:
initForReadingFromData:error:
arrayWithObjects:count:
setWithArray:
decodeObjectOfClasses:forKey:
finishDecoding
initRequiringSecureCoding:
setOutputFormat:
encodeObject:forKey:
finishEncoding
encodedData
unknownPropertiesFromExternalRepresentation:
externalRepresentationFromUnknownProperties:
initWithBytes:length:
objectAtIndex:
bytes
currentThread
invoke
performSelector:onThread:withObject:waitUntilDone:
removeObject:
indexSet
addIndex:
providerWithStore:
isAnyAccountSyncableIgnoringAccount:
decodeIntForKey:
decodeObjectOfClass:forKey:
encodeInt:forKey:
array
insertObject:atIndex:
numberWithBool:
isEqual:
string
isSubsetOfSet:
personPredicateWithValue:comparison:forProperty:
andPredicateWithSubpredicates:
countForObject:
group
store
accountIdentifier
bindString:toStatement:withBindingOffset:
setGroup:
setStore:
isValid
queryWhereStringForPredicateIdentifier:
ab_bindWhereClauseComponentOfStatement:withBindingOffset:predicateIdentifier:
description
setAccountIdentifier:
_group
_store
_accountIdentifier
T^v,N
T@"NSString",C,N,V_accountIdentifier
arrayWithObject:
setGroups:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
setSources:
name
tokenizations
generateExceprts
emphasizedExcerptStringForMatchString:
setAttributes:range:
appendAttributedString:
matchPersonOrCompanyNamesExclusively
_personNameKeys
_matchClauseForColumns:requiringAllTerms:
scopedContactIdentifiers
arrayWithObjects:
groups
sources
matchWholeWords
matchPreferredName
setName:
setSource:
source
ab_metadataForMatchingRow:columnOffset:
querySelectPropertiesForPredicateIdentifier:
queryJoinsInCompound:predicateIdentifier:
_personNonNameKeys
queryRankStringForPredicateIdentifier:
ab_bindJoinClauseComponentOfStatement:withBindingOffset:predicateIdentifier:
predicateFormat
setMatchWholeWords:
setMatchPersonOrCompanyNamesExclusively:
setMatchPreferredName:
setGenerateExceprts:
setScopedContactIdentifiers:
_tokenizations
_tokenizationSortKeys
_matchWholeWords
_matchPersonOrCompanyNamesExclusively
_matchPreferredName
_generateExceprts
_name
_sources
_groups
_scopedContactIdentifiers
T@"NSString",C,N,V_name
T@"NSArray",&,N,V_sources
T@"NSArray",&,N,V_groups
T@"NSString",C,N
TB,N,V_matchWholeWords
TB,N,V_matchPersonOrCompanyNamesExclusively
TB,N,V_matchPreferredName
TB,N,V_generateExceprts
T@"NSArray",&,N,V_scopedContactIdentifiers
personPredicateWithNameLike:group:source:account:includeSourceInResults:addressBook:
personPredicateWithNameLike:groups:sources:includeSourceInResults:addressBook:
personPredicateWithNameLike:groups:sources:includeSourceInResults:includePhotosInResults:addressBook:
initWithSearchString:source:account:includeSourceInResults:includePhotosInResults:
personPredicateWithNameLike:addressBook:
setValue:
setProperty:
setComparison:
setCountry:
setPhoneNumber:
insertString:atIndex:
_querySelectStringForPredicateIdentifier:
queryGroupByProperties
newQueryWithProperties:joins:whereString:sortOrder:rankString:groupByProperties:addressBook:propertyIndices:
compoundPredicateType
subpredicates
searchPeopleWithPredicate:sortOrder:ranked:inAddressBook:withDelegate:
ab_runPredicateWithSortOrder:ranked:inAddressBook:withDelegate:
componentsJoinedByString:
personPredicateWithNameLike:group:source:account:addressBook:
personPredicateWithNameLike:groups:sources:addressBook:
personPredicateWithName:addressBook:
personPredicateWithNameOnly:account:addressBook:
personPredicateWithAnyValueForProperty:
personPredicateWithGroup:source:account:
newQueryFromABPredicate:withSortOrder:ranked:addressBook:propertyIndices:
newQueryFromCompoundPredicate:withSortOrder:ranked:addressBook:propertyIndices:
searchPeopleWithPredicate:sortOrder:inAddressBook:withDelegate:
hasCallback
callbackContext
evaluateCallbackWithSqliteContext:predicateContext:values:count:
bindDouble:toStatement:withBindingOffset:
querySerializationIdentifier
predicateShouldContinue:
ab_hasCallback
ab_newQueryWithSortOrder:ranked:addressBook:propertyIndices:
ab_addCallbackContextToArray:
ab_bindSelectClauseComponentOfStatement:withBindingOffset:predicateIdentifier:
null
valueWithNonretainedObject:
nonretainedObjectValue
predicateShouldContinue:afterFindingRecord:metadata:
predicateShouldContinue:afterFindingRecord:
property
_shouldConsultIndexForKey:
allKeys
_supportsFTSSearch
_allowsLaxCheckingForFTS
stringForComparison:withComparision:
comparison
_ftsTermStringForString:
_ftsTokenizedTermStringForString:
stringForComparison:
_ftsAllQueryStrings
currentCalendar
setHour:
setMinute:
setSecond:
dateByAddingTimeInterval:
timeIntervalSinceReferenceDate
value
_property
_comparison
_value
_orderedKeys
_dictionaryValue
Ti,N,V_property
Tq,N,V_comparison
T@"NSObject",C,N,V_value
phoneNumber
country
homeCountryCode
_homeCountryCode
_phoneNumber
_country
T@"NSString",C,N,V_phoneNumber
T@"NSString",C,N,V_country
initWithPhoneNumberString:countryCode:
decomposedPhoneNumberPointer
normalizedPhoneChars
lastFour
originalStringValue
_decomposedPhoneNumber
_phoneNumberBytes
_lastFour
_originalStringValue
T^{?=***I*I*I},R,D
T@"NSString",R,V_lastFour
T@"NSString",R,V_originalStringValue
T*,R
internalSearchAddressBook
setDelegate:
cancel
isCancelled
predicate
sortOrdering
delegate
mainThreadScheduler
searchOperation:didFindMatches:moreComing:
progressBlock
isMainThread
_mainThread_tellDelegateSearchFoundMatch:
performSelector:onThread:withObject:waitUntilDone:modes:
performSelectorOnMainThread:withObject:waitUntilDone:
personPredicateWithNameLike:inGroup:addressBook:
personPredicateWithNameLike:inSource:addressBook:
personPredicateWithNameLike:inSource:includeSourceInResults:addressBook:
personPredicateWithNameLike:inSource:includeSourceInResults:includePhotosInResults:addressBook:
personPredicateWithNameLike:inAccount:addressBook:
personPredicateWithNameLike:inGroups:sources:addressBook:
personPredicateWithNameOnly:inAccount:addressBook:
personPredicateWithAnyValueForProperty:addressBook:
personPredicateWithGroup:addressBook:
isConcurrent
setInternalSearchAddressBook:
main
prefetchProperties
setPrefetchProperties:
setSortOrdering:
_internalSearchAddressBook
_progressBlock
_progressBlockThread
_context
_delegate
_sortOrdering
_predicate
_prefetchProperties
T@?,C,N,V_progressBlock
T@"NSPredicate",&,N,V_predicate
T@"NSArray",C,N,V_prefetchProperties
T@"<ABSearchOperationDelegate>",N,V_delegate
T^v,N,V_context
TI,N,V_sortOrdering
linkRecentlyAddedPeople
lowercaseString
minusSet:
allObjects
initWithIndex:
UTF8String
localizedCaseInsensitiveCompare:
initWithCapacity:
otherPeopleInDatabaseMatchingPerson:notIncludingPeople:
shouldLinkPerson:toPeopleInDatabase:andNewlyAddedPeople:inInitialLinking:
addPerson:toDictionary:withProperty:
removeAllLinks
presortPeople:
otherPeopleInArray:matchingPerson:
makeLinksForAddedPeople:inInitialLinking:countingOuterIterations:detectedLinkCount:
makeInitialLinksCountingOuterIterations:
copyArrayOfAllPeopleWithROWIDGreatThan:withLimit:
linkRecentlyAddedPeopleWithLimit:
suggestedPeopleToLinkWithPerson:isInitialLinking:
linkNewlyAddedPerson:
_peopleByFirstName
_peopleByLastName
_peopleByOrganization
subdataWithRange:
abDecodedUTF7
initWithData:encoding:
getBytes:range:
appendBytes:length:
initWithBase64EncodedString:options:
appendData:
dataWithCapacity:
abStringAtRange:inEncoding:
abIsUTF16EntourageVCard
abEncodeVCardBase64DataWithInitialLength:
abDecodeVCardBase64
dataUsingEncoding:
abAppendString:
dataWithBytesNoCopy:length:
addressFormats
initWithObjects:forKeys:
abDefaultCountryCode
valueForKey:
currentLocale
displayNameForKey:value:
replaceOccurrencesOfString:withString:options:range:
scanAlertValue
scanKeyValuePair
addEntriesFromDictionary:
scanPastItemDelimiter
scanStringValue
scanPastKeyValueSeparator
atEnd
nextUnescapedCharacter
scanQuotedStringValue
scanUnquotedStringValue
characterIsStringValueCharacter:
scanCharacter
whitespaceCharacterSet
characterIsMember:
scanPastCharacter:
scanCharacterWithEscaping:
scanPastWhitespace
scanAlertValueFromString:
canBeConvertedToEncoding:
lengthOfBytesUsingEncoding:
deleteCharactersInRange:
controlCharacterSet
invert
whitespaceAndNewlineCharacterSet
formUnionWithCharacterSet:
addCharactersInRange:
abStringByRemovingCharactersFromSet:
setCharactersToBeSkipped:
characterSetWithCharactersInString:
scanUpToCharactersFromSet:intoString:
scanLocation
abEscapeStringForUnichar:and:advance:
setScanLocation:
copyABVCardDataRepresentation
abStringByStrippingControlCharacters
abVCardKoshify
objectEnumerator
data
nextObject
initWithRecord:
_21vCardRepresentationAsData
_copyVCardRepresentationAsStringIncludeExternalProperties:withPhoto:extraPhotoParameters:includePrivateData:
_vCard21RepresentationOfRecords:
_vCard30RepresentationOfRecords:
vCardRepresentationOfRecords:mode:
vCardRepresentationOfRecord:mode:
includeREVInVCards
includeNotesInVCards
includeImageURIInVCards
includeABClipRectInVCardPhotos
useThumbnailImageFormatIfAvailable
_copyGroupVCardRepresentationAsStringIncludeExternalProperties:
copyVCardRepresentationOfRecord:withPhoto:extraPhotoParameters:
initWithData:
sortedPeopleAndProperties:
supportedProperties
removeObjectForKey:
setFormatOptions:
stringFromDate:
newISO8061StringFromDate:
stringForAlternateBirthdayComponent:key:formatWidth:
copyValueForProperty:
valueForProperty:
_showField:identifier:
_vCardKeyForGenericLabel:
appendLabel:toVCardRep:inGroup:
objectAtIndexedSubscript:
bundleForClass:
pathForResource:ofType:
URLPathAllowedCharacterSet
stringByAddingPercentEncodingWithAllowedCharacters:
encodedDataForValue:charsetName:
encodedLineForValue:
propertyLineForIMHandles:labels:vCardProperty:
_valueForPersonSounds:identifier:
dictionaryWithDictionary:
JSONObjectWithData:options:error:
_addPersonSounds:identifier:toActivityAlerts:activity:alert:
caseInsensitiveCompare:
_dictionaryForActivityAlerts
_typeParameterForToneType:
stringWithType:info:
enumerateKeysAndObjectsUsingBlock:
_fullNameIncludingAuxiliaryElements:
_isCompany
_fullName
alternateName
_realCompositeName
_vCardKeyForEmailLabel:
_vCardKeysForPhoneLabel:
_vCardKeyForAddressLabel:vCard3:
rangeOfString:
substringToIndex:
substringFromIndex:
propertyLineForGenericABProperty21:vCardProperty:
_showField:
ISO8061StringFromDate:
dataForInstantMessageProperties
dataForSocialProfileProperty:groupCount:includePrivateData:
ISO8061StringFromDateTime:
stringFromAlternateBirthday:
initWithFormat:
compare:options:
_usesArrayForExternalPropKey:
_prodID
_appendPropValue:forPropKey:toOutString:usingDelimiter:inGroup:
propertyLineForGenericABProperty:vCardProperty:is21:groupCount:
base64EncodedStringWithOptions:
imageData
propertyLineForInstantMessageHandles:groupCount:includePrivateData:
propertyLineForIMPPProperty:groupCount:includePrivateData:
setWithObjects:
dataForSoundProperty:
privateVCardEnabled
setPrivateVCardEnabled:
setVCardField:isPrivate:
clearPrivateFields
vcardFieldisPrivate:
setIncludeNotesInVCards:
setIncludeREVInVCards:
setIncludePhotosInVCards:
includePhotosInVCards
initWithVCardRepresentation:
vCardRepresentationForMode:
record
setValue:forProperty:
_record
_properties
isDevicePasscodeProtected
isDeviceUnlockedSinceBoot
mutableBytes
tokenSetForLength:
nextTokenPeakUnicode:length:
nextTokenPeakSingle:length:
advancePastEOL
advancedPastToken:
dataWithBytes:length:
tokenAtCursor
initWithBytesNoCopy:length:freeWhenDone:
nextQuotedPrintableData
nextEscapedCharacter
advanceToPeakPoint
nextUnicodeStringStopTokens:quotedPrintable:trim:
nextSingleByteStringInEncoding:quotedPrintable:stopTokens:trim:
_advancePastLineFoldingSequenceIfNeeded
_applyNextStringInEncoding:quotedPrintable:stopTokens:trim:intoString:
nextStringInEncoding:quotedPrintable:stopTokens:trim:
nextUnicodeBase64Line:
nextSingleByteBase64Line:
nextBase64Line:
advanceToEOL
advanceToString
advanceToUnicodeString
advanceToSingleByteString
nextTokenPeak:
advanceToEOLUnicode
advanceToEOLSingle
advancePastEOLUnicode
advancePastEOLSingle
tokenName:
initWithData:watchdogTimer:
cursor
errorCount
nextArraySeperatedByToken:stoppingAt:inEncoding:
nextBase64Data
advanceToToken:throughTypes:
atEOF
_data
_bytes
_length
_peakedPoint
_cursor
_unicode
_errorCount
_activeTokenSets
_timer
getCharacters:
mainBundleID
timerWithTimeProvider:
hasPrefix:
cleanUpCardState
propertyIsValidForPerson:
grouping
defaultLabel
setLocalRecordHasAdditionalProperties:
_setValueFromExtension:forKey:onAddress:toKey:
initWithObjectsAndKeys:
_addIMPPProfiles:multiValue:uniquenessCheckingMultiValue:
_addIMHandles:toService:multiValue:uniquenessCheckingMultiValue:
raise:format:
_setPersonSounds:identifier:fromActivity:alert:otherValue:
dataWithJSONObject:options:error:
noteLackOfValueForProperty:
addMultiValues:toProperty:valueComparator:
_setStringValueOrNoteIfNull:forProperty:
types
_genericLabel
parseSingleValue
genericLabel
initWithName:
setIsPrimary:
setGrouping:
phoneLabel
_socialProfileService
_socialProfileUsername
_socialProfileUserId
_socialProfileDisplayName
_socialProfileTeamIdentifier
_socialProfileBundleIdentifiers
stringByRemovingPercentEncoding
dictionaryWithObject:forKey:
parseInstantMessengerProfile:
_setDataValueOrNoteIfNull:forProperty:
parseRemainingLine
parseString:intoTypeAndInfo:
calendarWithIdentifier:
setCalendar:
timeZoneWithName:
setYear:
setMonth:
setDay:
scanInt:
dateFromISO8601String:
numberWithInteger:
addTypes:
parseUID
parseTEL
parseADR
parseORG
parseURL
defaultURLLabel
parseADD
parseEMAIL
addIMValueTo:
parsePhoto:
parseN
parseVERSION
parseABUID
parseABExtensionType:
parseBDAY
parseIMPP
parseNICKNAME
parseABDATE
parseABOrder
parseABPhoto
parseAlternateBirthday
parseABShowAs
parseIMAGETYPE
parseIMAGEHASH
parseABMaiden
parseSocialProfiles
parseABReleatedNames
parseActivityAlerts
parseGuardianWhitelisted
parseValueArray
_usesRemainingLineForExternalPropKey:
_handleUnknownTag:withValue:
initWithPerson:
importToValueSetter:
foundProperties
parseItem
fullName
_setMultiValuesOrNoteIfNull:forProperty:valueComparator:
addAddressMultiValues
addSocialProfileMultiValues
addInstantMessageMultiValues
addActivityAlertMultiValues
setImageData:cropRectX:cropRectY:cropRectWidth:cropRectHeight:
setImageData:
noteLackOfValueForImageData
drain
isStarted
importToPerson:foundProperties:
copyNextPersonWithLength:foundProperties:
hasImportErrors
peopleAndProperties:
arrayWithArray:
sortUsingFunction:context:
_setIntValueOrNoteIfNull:forProperty:
defaultADRLabel
_valueSetter
_source
_lexer
_defaultEncoding
_hasImportErrors
_30vCard
_first
_last
_org
_formattedName
_emails
_dates
_phones
_addresses
_aims
_jabbers
_msns
_yahoos
_icqs
_untypedIMs
_instantMessengers
_socialProfiles
_relatedNames
_urls
_activityAlerts
_notes
_otherNotes
_extensions
_uid
_imageData
_imageURI
_cropRectX
_cropRectY
_cropRectWidth
_cropRectHeight
_cropRectChecksum
_itemParameters
_grouping
_encoding
_quotedPrintable
_base64
setRecordIsGroup:
initWithPerson:removeExistingProperties:
initWithGroup:removeExistingProperties:
copyParsedRecordWithSource:outRecordType:
importToPerson:removeExistingProperties:
importToGroup:removeExistingProperties:
createRecordInSource:outRecordType:
localRecordHasAdditionalProperties
lastCropRectX
lastCropRectY
lastCropRectWidth
lastCropRectHeight
lastCropRectChecksum
_unknownAttributes
_removeExistingProperties
_localRecordHasAdditionalProperties
_lastCropRectX
_lastCropRectY
_lastCropRectWidth
_lastCropRectHeight
_lastCropRectChecksum
TB,R,V_localRecordHasAdditionalProperties
Ti,R,V_lastCropRectX
Ti,R,V_lastCropRectY
Ti,R,V_lastCropRectWidth
Ti,R,V_lastCropRectHeight
T@"NSData",R,&,V_lastCropRectChecksum
addType:
isPrimary
_types
_primary
setValueInTemporaryCache:forProperty:
_person
_personToGroupPropertyMap
groupPropertyForPersonProperty:
_drainExistingProperties
recordIsGroup
_recordIsGroup
_importingToExistingGroup
TB,V_recordIsGroup
numberWithFloat:
valueWithPointer:
_cn_resultWithAllCharacters:
pointerValue
numberWithChar:
numberWithDouble:
dictionaryWithCapacity:
firstObject
cStringUsingEncoding:
_cn_each:
longValue
_cn_take:
_cn_each_reverse:
numberWithLong:
enumerateObjectsWithOptions:usingBlock:
removeObjectsAtIndexes:
stringWithCapacity:
setSearchString:
setIncludeSourceInResults:
setIncludePhotosInResults:
initWithSearchString:source:account:includeSourceInResults:
sharedConnection
initWithCondition:
searchString
contactsSearchQueryWithSearchString:searchBase:searchScope:consumer:
includePhotosInResults
setIncludePhotos:
connection
performServerContactsSearch:forAccountWithID:
lockWhenCondition:
unlock
_errorForDAStatusCode:
runPredicate
runPredicateWithDelegate:
condition
unlockWithCondition:
includeSourceInResults
newAddressBookRecordWithSource:
cancelServerContactsSearch:
_searchQueryIsDone
code
searchQuery:returnedResults:
searchQuery:finishedWithError:
searchQuery:returnedTotalCount:
initWithSearchString:source:account:
error
setConnection:
_connection
_searchQuery
_searchResults
_doneLock
_error
_includeSourceInResults
_includePhotosInResults
_searchString
T@"DADConnection",&,N
T@"NSString",C,N,V_searchString
TB,N,V_includeSourceInResults
TB,N,V_includePhotosInResults
T@"<ABPredicateDelegate>",N,V_delegate
Ti,R,N
displayName
firstName
lastName
emailAddress
workPhone
mobilePhone
homePhone
faxPhone
pagerNumber
iPhone
mainPhone
workFaxPhone
company
title
city
state
street
postalAddress
homePostalAddress
jpegPhoto
imUsername
imService
dictionaryWithObjectsAndKeys:
buildingName
appleFloor
localizedStringForKey:formatArg:
identifierOnServer
stringWithValidatedFormat:validFormatSpecifiers:error:
path
initWithContentsOfFile:
regularExpressionWithPattern:options:error:
numberOfRanges
rangeAtIndex:
enumerateMatchesInString:options:range:usingBlock:
scheme
URLWithString:
resourceSpecifier
host
shouldCheckTime
initWithTimeProvider:
timeProvider
setStartTime:
startTime
setValid:
ticks
setTicks:
checkValidity
valid
_valid
_ticks
_timeProvider
_startTime
TQ,N,V_ticks
T@"<ABVCardTimeProvider>",R,N,V_timeProvider
T@"NSDate",&,N,V_startTime
TB,N,V_valid
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
initWithPerson:property:identifier:type:
initWithDictionaryRepresentation:addressBook:
_unqueueLookup
dictionaryRepresentation
_queueLookup
initWithPerson:property:identifier:
initWithDictionaryRepresentation:
dictionaryRepresentation:isDirty:
label
nonLocalizedLabel
type
ABPerson
_abUid
recheckAddressBook
_abIdentifier
_type
_dirty
_label
_abDatabaseUUID
lock
_lookupNotFound
_lookupChanged:
_runLookup
detachNewThreadSelector:toTarget:withObject:
_postEntryChanged
sharedInstance
entryIsDuplicateAndThusRemoved:oldUid:
initWithInt:
abDatabaseUUID
sharedInstanceWithAddressBook:
domain
isUnlockedSinceBoot
_postChangeNotification
addUnlockHandlerWithIdentifier:block:
fileURLWithPath:isDirectory:
initWithContentsOfURL:error:
shouldNotReportFavoritesError:
reportFavoritesIssue:
_addEntryToMap:
recacheIdentitiesSoon
_loadListWithAddressBook:
_entryIdentityChanged:
addObserver:selector:name:object:
removeObserver:
removeUnlockHandlerWithIdentifier:
save
cancelPreviousPerformRequestsWithTarget:selector:object:
performSelector:withObject:afterDelay:
_loadList
arrayWithCapacity:
entriesForPeople:
abNormalizedPhoneNumberFromString:
_isValueForEntry:equalToValue:
entryFromEntries:type:property:identifier:value:label:
entriesForPerson:
entryWithType:forPerson:property:identifier:
entryWithIdentifier:forPerson:
isFull
addEntry:
initWithObjects:
removeObjectAtIndex:
object
userInfo
_removeEntryFromMap:withUid:
_scheduleSave
postNotificationName:object:
_delayedLookup
makeObjectsPerformSelector:
entries
entryFromEntries:type:property:value:label:
containsEntryWithIdentifier:forPerson:
containsEntryWithType:forPerson:property:identifier:
addEntryForPerson:property:withIdentifier:
saveImmediately
_listChangedExternally
removeEntryAtIndex:
moveEntryAtIndex:toIndex:
removeAllEntries
_list
_uidToEntry
_flags
stringByDeletingLastPathComponent
loadFrameworkAtPath:andStoreHandle:bundle:
lostModeIsActive
setQuery:
setIsNullPredicate:
bindPlaceholderStringOfCount:
stringBinder
setBindBlock:
intBinder
setTokenizationSortKeys:
tokenizationSortKeys
blobBinder
_sqlListOfLength:
pointerBinder
_sqlValuesTableOfLength:columnCount:
predicateForContactsMatchingPhoneNumbers:containerIdentifiers:map:
predicateForContactsMatchingMultivalueProperty:values:groupIdentifiers:containerIdentifiers:limitToOneResult:map:
query
bindBlock
setMatchInfoProvider:
predicateForAllContacts
predicateForNoContacts
predicateForContactsWithUUIDs:ignoreUnifiedIdentifiers:
predicateForContactsWithLegacyIdentifier:
predicateForContactsMatchingName:addressBook:
predicateForContactsInGroupWithIdentifier:
predicateForContactsInContainerWithIdentifier:
predicateForContactsMatchingMultivalueProperty:value:
predicateForSingleContactMatchingMultivalueProperty:value:
predicateForContactsMatchingOrganizationName:
predicateForContactsInRange:sortOrder:
predicateForContactsInRange:allowedStoreIdentifiers:sortOrder:
predicateForContactsMatchingPhoneNumber:country:homeCountryCode:prefixHint:groupIdentifiers:limitToOneResult:
predicateForContactsMatchingPreferredChannel:limitOne:
predicateForMeContact
predicateForContactsMatchingPhoneNumbers:emailAddresses:containerIdentifiers:map:
predicateForContactsMatchingText:tokenizer:collator:matchNameFieldsOnly:
predicateForContactsWithExternalUUIDs:
predicateUnioningPredicate:withPredicate:
matchInfoProvider
storage
setStorage:
isNullPredicate
_isNullPredicate
_bindBlock
_matchInfoProvider
_storage
_query
T@?,C,N,V_bindBlock
T@?,C,N,V_matchInfoProvider
T@,&,N,V_storage
T@"NSString",&,N,V_query
TB,N,V_isNullPredicate
T^{__CFArray=},N,V_tokenizationSortKeys
loadFrameworkAtPath:andStoreHandle:bundle:logging:
containsString:
lastPathComponent
bundleWithPath:
abCopyPhoneNumberFromString:
setIntBinder:
setStringBinder:
setBlobBinder:
setPointerBinder:
_intBinder
_stringBinder
_blobBinder
_pointerBinder
T@?,V_intBinder
T@?,V_stringBinder
T@?,V_blobBinder
T@?,V_pointerBinder
_initSetupPropertySet:includeLinkedContacts:
scopedStoresForManagedConfiguration:
prependWithClauseToQueryString:whereClause:
appendCustomPropertySelectsToQueryString:
appendFromClauseToQueryString:
appendWhereClauseToQueryString:
appendOrderByClauseToQueryString:
bindWithClause:
bindWhereClause:
requestedPropertyIdentifiers
requestedMultivalueIdentifiers
needsMultivalueEntryTable
sortOrder
exceptionWithName:reason:userInfo:
fetchLinkedContacts
scopedStoreIdentifiers
appendBindParameterMarkersToQueryString:count:
needsPersonLinkTable
needsMultivalueTable
initWithAddressBook:predicate:requestedProperties:includeLinkedContacts:sortOrder:managedConfiguration:identifierAuditStlye:
setPropertyIndices:
managedConfiguration
contactidentifierAuditMode
setContactidentifierAuditMode:
statement
setStatement:
propertyIndices
needsPersonTable
requestedImageData
requestedImageCropRect
requestedImageThumbnail
requestedImageFullscreenData
requestedSyncImageData
requestedHasImageData
_fetchLinkedContacts
_needsMultivalueTable
_needsMultivalueEntryTable
_needsPersonTable
_needsPersonLinkTable
_requestedImageData
_requestedImageCropRect
_requestedImageThumbnail
_requestedImageFullscreenData
_requestedSyncImageData
_requestedHasImageData
_sortOrder
_managedConfiguration
_contactidentifierAuditMode
_statement
_scopedStoreIdentifiers
_requestedPropertyIdentifiers
_requestedMultivalueIdentifiers
_propertyIndices
T@"CNManagedConfiguration",R,N,V_managedConfiguration
Tq,N,V_contactidentifierAuditMode
T@"ABSQLPredicate",R,N,V_predicate
T^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB},N,V_statement
TI,R,N,V_sortOrder
T@"NSIndexSet",R,N,V_scopedStoreIdentifiers
T@"NSIndexSet",R,N,V_requestedPropertyIdentifiers
T@"NSIndexSet",R,N,V_requestedMultivalueIdentifiers
T^{__CFDictionary=},N,V_propertyIndices
TB,R,N,V_fetchLinkedContacts
TB,R,N,V_needsMultivalueTable
TB,R,N,V_needsMultivalueEntryTable
TB,R,N,V_needsPersonTable
TB,R,N,V_needsPersonLinkTable
TB,R,N,V_requestedImageData
TB,R,N,V_requestedImageCropRect
TB,R,N,V_requestedImageThumbnail
TB,R,N,V_requestedImageFullscreenData
TB,R,N,V_requestedSyncImageData
TB,R,N,V_requestedHasImageData
initWithQuery:batchSize:managedConfiguration:
resumeToken
setData:
setMatchInfo:
setIdentifierAccountingData:
errorWithDomain:code:userInfo:
initWithAddressBook:predicate:propertyIdentifierSet:includeLinkedContacts:sortOrder:suggestedContactsPerBatch:managedConfiguration:identifierAuditMode:
fetchNextBatchWithReply:
mutableData
setMutableData:
contactIdentifiers
setContactIdentifiers:
matchInfo
incompleteBlob
setIncompleteBlob:
blobBytesWritten
setBlobBytesWritten:
blobLength
setBlobLength:
currentMultivalue
setCurrentMultivalue:
hasFoundAnyImageDataForCurrentContact
setHasFoundAnyImageDataForCurrentContact:
setResumeToken:
currentMultivalueIdentifier
setCurrentMultivalueIdentifier:
currentPropertyID
setCurrentPropertyID:
currentRecordID
setCurrentRecordID:
currentRecordIndividualUniqueIDAuditData
setCurrentRecordIndividualUniqueIDAuditData:
currentRecordLinkedUniqueIDAuditData
setCurrentRecordLinkedUniqueIDAuditData:
maxBufferSize
setMaxBufferSize:
maxContactsPerBatch
setMaxContactsPerBatch:
countOfContactsInBuffer
setCountOfContactsInBuffer:
setManagedConfiguration:
multivaluePropertyIDColumn
setMultivaluePropertyIDColumn:
multivalueIdentifierColumn
setMultivalueIdentifierColumn:
multivalueUUIDColumn
setMultivalueUUIDColumn:
multivalueValueColumn
setMultivalueValueColumn:
multivalueLabelColumn
setMultivalueLabelColumn:
multivalueEntryKeyColumn
setMultivalueEntryKeyColumn:
multivalueEntryValueColumn
setMultivalueEntryValueColumn:
contactLinkUUIDColumn
setContactLinkUUIDColumn:
contactPreferredForImageColumn
setContactPreferredForImageColumn:
personLinkColumn
setPersonLinkColumn:
_hasFoundAnyImageDataForCurrentContact
_currentMultivalueIdentifier
_currentPropertyID
_currentRecordID
_multivaluePropertyIDColumn
_multivalueIdentifierColumn
_multivalueUUIDColumn
_multivalueValueColumn
_multivalueLabelColumn
_multivalueEntryKeyColumn
_multivalueEntryValueColumn
_contactLinkUUIDColumn
_contactPreferredForImageColumn
_personLinkColumn
_mutableData
_contactIdentifiers
_matchInfo
_incompleteBlob
_blobBytesWritten
_blobLength
_currentMultivalue
_resumeToken
_currentRecordIndividualUniqueIDAuditData
_currentRecordLinkedUniqueIDAuditData
_maxBufferSize
_maxContactsPerBatch
_countOfContactsInBuffer
T@"NSMutableData",&,N,V_mutableData
T@"NSMutableSet",&,N,V_contactIdentifiers
T@"NSMutableDictionary",&,N,V_matchInfo
T^{sqlite3_blob=},N,V_incompleteBlob
TQ,N,V_blobBytesWritten
TQ,N,V_blobLength
Tq,N,V_currentMultivalue
TB,N,V_hasFoundAnyImageDataForCurrentContact
Tq,N,V_resumeToken
Ti,N,V_currentMultivalueIdentifier
Ti,N,V_currentPropertyID
Ti,N,V_currentRecordID
T@"NSData",&,N,V_currentRecordIndividualUniqueIDAuditData
T@"NSData",&,N,V_currentRecordLinkedUniqueIDAuditData
TQ,N,V_maxBufferSize
TQ,N,V_maxContactsPerBatch
TQ,N,V_countOfContactsInBuffer
T@"ABBufferQuery",R,N,V_query
T@"CNManagedConfiguration",&,N,V_managedConfiguration
Ti,N,V_multivaluePropertyIDColumn
Ti,N,V_multivalueIdentifierColumn
Ti,N,V_multivalueUUIDColumn
Ti,N,V_multivalueValueColumn
Ti,N,V_multivalueLabelColumn
Ti,N,V_multivalueEntryKeyColumn
Ti,N,V_multivalueEntryValueColumn
Ti,N,V_contactLinkUUIDColumn
Ti,N,V_contactPreferredForImageColumn
Ti,N,V_personLinkColumn
increaseLengthBy:
stringByTrimmingCharactersInSet:
getCharacters:range:
removeCharactersInRange:
initWithPattern:options:error:
range
mapTableWithKeyOptions:valueOptions:
personWithRecordID:identifier:eventType:
personWithRecordID:identifier:eventType:imagesChanged:externalID:personLink:
unifiedPersonWithIdentifier:eventType:
initWithEntityType:eventType:sequenceNumber:recordID:recordGUID:externalID:imagesChanged:personLink:personLinkUUID:linkToPersonUUID:
groupWithRecordID:identifier:eventType:externalID:
descriptionBuilderWithObject:
descriptionForEntityType:
appendName:object:
descriptionForEventType:
appendName:boolValue:
build
numberWithUnsignedInt:
entityType
isInteger:equalToOther:
eventType
sequenceNumber
isSequenceNumber:equalToOther:
recordID
recordGUID
isObject:equalToOther:
externalID
imagesChanged
isBool:equalToOther:
personLink
personLinkUUID
linkToPersonUUID
isObject:equalToOther:withBlocks:
personAddEventWithRecordID:identifier:
personUpdateEventWithRecordID:identifier:imagesChanged:personLink:
personDeleteEventWithRecordID:identifier:externalID:personLink:
unifiedPersonAddEventWithUnifiedIdentifier:
unifiedPersonUpdateEventWithUnifiedIdentifier:
unifiedPersonDeleteEventWithUnifiedIdentifier:
linkEventWithRecordID:identifier:linkToIdentifier:unifiedIdentifier:
unlinkEventWithRecordID:identifier:
setPreferredNameEventWithRecordID:identifier:
setPreferredImageEventWithRecordID:identifier:
meCardChangedEventWithRecordID:identifier:
groupAddEventWithRecordID:identifier:
groupUpdateEventWithRecordID:identifier:
groupDeleteEventWithRecordID:identifier:externalID:
_imagesChanged
_entityType
_eventType
_recordID
_personLink
_sequenceNumber
_recordGUID
_externalID
_personLinkUUID
_linkToPersonUUID
Ti,R,N,V_entityType
Ti,R,N,V_eventType
Tq,R,N,V_sequenceNumber
Ti,R,N,V_recordID
T@"NSString",R,N,V_recordGUID
T@"NSString",R,N,V_externalID
TB,R,N,V_imagesChanged
Ti,R,N,V_personLink
T@"NSString",R,N,V_personLinkUUID
T@"NSString",R,N,V_linkToPersonUUID
initWithFormat:arguments:
stringValue
descriptionInStringsFileFormat
queryItemWithName:value:
setScheme:
setHost:
setQueryItems:
defaultWorkspace
openURL:
sharedInstanceForAddressBook
readingContactsData
logContactsDataAccessEvent
deletingContactsData
modifyingContactsData
readAndTransmittingContactsData
setLeapMonth:
setEra:
isValidDate
sortedArrayUsingComparator:
serializeString:
strategyWouldAlterString:
serializeDictionary:
regex
replaceMatchesInString:options:range:withTemplate:
charactersToTriggerStrategy
rangeOfCharacterFromSet:
stringByReplacingMatchesInString:options:range:withTemplate:
indexOfObject:
authorizationStatus
isAccessGranted
isAccessRestricted
requestAccessWithError:
requestAuthorization:completionHandler:
dictionaryWithType:info:
activityAlertWithString:
typeFromDictionary:
infoFromDictionary:
numberWithUnsignedInteger:
logDatabaseResolution:
@24@0:8@16
q24@0:8Q16
Q24@0:8Q16
B16@0:8
S16@0:8
Q16@0:8
@"NSString"
B24@0:8^v16
B24@0:8@16
B24@0:8^{CPSqliteConnection=^{CPSqliteDatabase}^{sqlite3}^{__CFDictionary}^{__CFDictionary}^v^?^?^vIB}16
i24@0:8^{CPSqliteConnection=^{CPSqliteDatabase}^{sqlite3}^{__CFDictionary}^{__CFDictionary}^v^?^?^vIB}16
B36@0:8@16i24^{CPSqliteConnection=^{CPSqliteDatabase}^{sqlite3}^{__CFDictionary}^{__CFDictionary}^v^?^?^vIB}28
@24@0:8^v16
@32@0:8^v16@24
v16@0:8
v20@0:8B16
i16@0:8
v24@0:8@16
B28@0:8^v16i24
v24@0:8Q16
@16@0:8
^v16@0:8
v24@0:8^v16
v20@0:8i16
@"ACAccountStore"
@44@0:8^v16@24^v32i40
d16@0:8
v24@0:8d16
@20@0:8i16
v36@0:8^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB}16^i24i32
@28@0:8^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB}16i24
@28@0:8@16B24
@24@0:8B16i20
^{__CFArray=}
@"NSArray"
@32@0:8@16^v24
@56@0:8@16^v24^v32@40^v48
@60@0:8@16^v24^v32@40B48^v52
@48@0:8@16@24@32^v40
@52@0:8@16@24@32B40^v44
@56@0:8@16@24@32B40B44^v48
@40@0:8@16@24^v32
@36@0:8@16q24i32
@40@0:8^v16^v24@32
@76@0:8@16@24@32I40@44@52^v60r^^{__CFDictionary}68
@48@0:8@16I24B28^v32r^^{__CFDictionary}40
v44@0:8@16I24^v28@36
v48@0:8@16I24B28^v32@40
v44@0:8^{sqlite3_context=}16@24^^{sqlite3_value}32i40
v40@0:8@16^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB}24^i32
v40@0:8d16^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB}24^i32
v40@0:8I16B20^v24@32
@40@0:8I16B20^v24r^^{__CFDictionary}32
@32@0:8^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB}16Q24
@32@0:8@16q24
q16@0:8
v24@0:8q16
@"<NSObject>"
@32@0:8@16@24
^{?=***I*I*I}16@0:8
*16@0:8
{?="internationalCallingCode"*"nationalPrefix"*"carrierCode"*"carrierCodeLen"I"areaCode"*"areaCodeLen"I"number"*"numberLen"I}
@40@0:8@16^v24^v32
@44@0:8@16^v24B32^v36
@48@0:8@16^v24B32B36^v40
@44@0:8@16q24i32^v36
@28@0:8i16^v20
@32@0:8^v16^v24
v24@0:8@?16
B32@0:8@16^v24
I16@0:8
v20@0:8I16
@?16@0:8
@"NSThread"
@"<ABSearchOperationDelegate>"
@"NSPredicate"
v28@0:8^v16B24
B44@0:8^v16@24@32B40
@28@0:8^v16B24
v36@0:8^v16@24i32
v44@0:8@16B24^Q28^Q36
v24@0:8^Q16
@28@0:8i16q20
B24@0:8q16
@"NSMutableDictionary"
@40@0:8{_NSRange=QQ}16Q32
@24@0:8Q16
B20@0:8S16
S20@0:8B16
@32@0:8S16S20^q24
@28@0:8@16i24
@28@0:8^v16i24
@40@0:8^v16@24@32
^{__CFArray=}16@0:8
v28@0:8@16B24
B28@0:8^v16I24
B20@0:8I16
B24@0:8I16i20
^{__CFString=}24@0:8@16
v40@0:8@16@24@32
@36@0:8@16@24i32
^v20@0:8I16
@40@0:8I16@20B28^q32
@32@0:8B16^q20B28
@28@0:8I16@20
@36@0:8^v16^q24B32
@40@0:8@16@24@32
v52@0:8^v16i24^@28@36@44
@32@0:8@16^@24
@20@0:8B16
v56@0:8@16@24@32@40@48
@40@0:8B16@20@28B36
i24@0:8B16i20
i20@0:8B16
B20@0:8i16
@36@0:8Q16B24i28B32
@28@0:8i16B20B24
v44@0:8Q16B24i28B32@36
@32@0:8i16i20Q24
@24@0:8^B16
B24@0:8i16i20
@"NSMutableData"
@"ABVCardWatchdogTimer"
v36@0:8@16I24@?28
v48@0:8@16@24@32@40
i48@0:8@16^{__CFString=}24^v32^v40
i40@0:8@16^v24^v32
B52@0:8^v16i24@28@36@44
B28@0:8@16I24
B36@0:8@16I24@?28
B32@0:8@16@24
B32@0:8^v16r^^{__CFArray}24
^v32@0:8^i16r^^{__CFArray}24
^{__CFArray=}24@0:8r^^{__CFArray}16
@24@0:8r^^{__CFArray}16
@"ABVCardValueSetter"
@"ABVCardLexer"
@"NSData"
@"NSMutableArray"
@"NSMutableString"
B28@0:8^v16B24
^v32@0:8^v16^I24
B40@0:8@16i24i28i32i36
v28@0:8@16I24
^{__CFDictionary=}16@0:8
i20@0:8i16
v32@0:8@16@24
v32@0:8@"DASearchQuery"16@"NSArray"24
v32@0:8@"DASearchQuery"16@"NSError"24
v32@0:8@"DASearchQuery"16@"NSNumber"24
@48@0:8@16^v24@32B40B44
@44@0:8@16^v24@32B40
@40@0:8@16^v24@32
i24@0:8q16
@"DADConnection"
@"DAContactsSearchQuery"
@"NSConditionLock"
@"<ABPredicateDelegate>"
^v24@0:8^v16
@"<ABVCardTimeProvider>"
@"NSDate"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@"NSDate"16@0:8
@32@0:8^v16i24i28
@36@0:8^v16i24i28i32
v32@0:8^@16^B24
@52@0:8@16i24i28i32@36@44
@48@0:8@16i24i28@32@40
@36@0:8i16^v20i28i32
B28@0:8i16^v20
B36@0:8i16^v20i28i32
B32@0:8^v16i24i28
v28@0:8@16i24
v32@0:8q16q24
B28@0:8@16i24
^{__CFDictionary=}
{?="dirty"b1"postCount"b1"needsReload"b1"unused"b29}
@28@0:8i16@20
@36@0:8{_NSRange=QQ}16i32
@32@0:8Q16Q24
@44@0:8{_NSRange=QQ}16@32i40
@60@0:8@16@24@32@40@48B56
@56@0:8i16@20@28@36B44@48
@48@0:8@16@24@32@40
@44@0:8@16^{__CFStringTokenizer=}24^{UCollator=}32B40
v24@0:8^{__CFArray=}16
B40@0:8@16^^v24^@32
B44@0:8@16^^v24^@32B40
@64@0:8^v16@24^{__CFSet=}32B40I44@48q56
v28@0:8^{__CFSet=}16B24
v24@0:8^{__CFDictionary=}16
v32@0:8@16Q24
^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB}16@0:8
v24@0:8^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB}16
@"CNManagedConfiguration"
@"ABSQLPredicate"
^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB}
@"NSIndexSet"
@72@0:8^v16@24^{__CFSet=}32B40I44Q48@56q64
@40@0:8@16Q24@32
^{sqlite3_blob=}16@0:8
v24@0:8^{sqlite3_blob=}16
@"NSMutableSet"
^{sqlite3_blob=}
@"ABBufferQuery"
@36@0:8i16@20B28i32
@40@0:8i16@20@28i36
@44@0:8i16@20@28@36
@36@0:8i16@20@28
@32@0:8i16@20i28
@48@0:8i16@20i28B32@36i44
@40@0:8i16@20i28@32
@76@0:8i16i20q24i32@36@44B52i56@60@68
B32@0:8q16q24
B24@0:8@"NSString"16
@"NSString"24@0:8@"NSString"16
v32@0:8@16@?24
?456789:;<=
 !"#$%&'()*+,-./0123
UUUUUU
~b1I
333333
 "$,&(.0
ABAddressBookErrorDomain
PolicyRejectionReason
RecordNotWritable
RecordPropertyNotWritable
SourceNotWritable
com.apple.AddressBookLegacy
AddressBook.framework was used before first unlock.
ABCAddressBookRef ABCCreateAddressBookWithDatabaseDirectoryAndForceInProcessMigrationInProcessLinkingAndResetSortKeys(CFStringRef, _Bool, _Bool, _Bool)
AddressBook.sqlitedb
:memory:
v8@?0
WHERE StoreID NOT IN (SELECT ROWID FROM ABStore)
PersonLink NOT IN (SELECT ROWID FROM ABPersonLink)
PersonLink = -1
WHERE Organization IS NOT NULL AND First IS NULL AND Last IS NULL AND Kind = 0
ERROR-FETCHING-BOOT-UUID
AddressBookMarkedForDeletion
isLocal
ABCDataBaseChangedExternallyNotification
com.apple.AddressBook.ABCAddressBookSaveWithConflictPolicy
Enabled != 0
_Bool ABCAddressBookSaveWithConflictPolicy(ABCAddressBookRef, ABConflictPolicy, CFErrorRef *)
Enabling the local source because no sources were enabled
<< Main thread:%@ | 
void ABCAddressBookInvalidateCaches(ABCAddressBookRef)
/Library/AddressBook/
Family
@16@?0@"NSString"8
Localized
void ABCStartSortDataReset(ABCAddressBookRef)
ABDatabaseDoctor
void ABStartDatabaseDoctor(ABCAddressBookRef)_block_invoke
(%@) ABStartDatabaseDoctor from %@
Error, could not create MachMessagePort for database doctor (%s); starting in-process migration
com.apple.ABDatabaseDoctor
In process migration of %ld records completed.
SortingCacheICUVersion
SortingCacheVersion
SortingCacheICUCollatorVersion
SortingCacheICUUCAVersion
SortingCacheForceReset
SortingCacheLanguage
BEGIN IMMEDIATE;
END;
void ABAddressBookRegisterExternalChangeCallback(ABCAddressBookRef, ABExternalChangeCallback, void *)
The external change callback was registered after the access status changed, invoking it now.
void ABAddressBookUnregisterExternalChangeCallback(ABAddressBookRef, ABExternalChangeCallback, void *)
void ABAddressBookRegisterChangeCallback(ABAddressBookRef, ABChangeCallback, void *)
ABAddressBookRegisterChangeCallback
ABCAddressBook.m
addressBookRef != __sharedAddressBook
void ABAddressBookUnregisterChangeCallback(ABAddressBookRef, ABChangeCallback, void *)
ABAddressBookUnregisterChangeCallback
ABAddressBookUnregisterAllChangeCallbacks
void ABAddressBookRevert(ABCAddressBookRef)
CFStringRef ABAddressBookCopyCollatorType(ABAddressBookRef, _Bool)
ABSearchCollationKey
ABCollationKey
search
CFArrayRef ABAddressBookCopySectionIndices(ABAddressBookRef)
SectionIndices
CFArrayRef ABAddressBookCopySectionHeaderDictionaries(ABAddressBookRef, CFArrayRef *, CFArrayRef *, UCollator *)
SectionHeaders
LanguageSortedSectionHeaders
LanguageSortedSectionHeaderSortKeys
Headers
CFDictionaryRef ABAddressBookCopyLocalizedSectionIndexDictionary(ABAddressBookRef)
LocalizedSectionIndices
CFDictionaryRef ABAddressBookCopyLocalizedSectionHeaderDictionary(ABAddressBookRef)
LocalizedSectionHeaders
CFStringRef ABAddressBookCopySectionNameTransform(ABAddressBookRef)
NameTransform
CFStringRef ABAddressBookCopySearchTransform(ABAddressBookRef)
SearchTransform
_Bool ABAddressBookShouldUseExtraTokenizations(ABAddressBookRef)
ABUseExtraTokenizations
The ABContactSections plist contains an entry of the wrong type for "ABUseExtraTokenizations" it should be a boolean value. Ignoring:
__ABDataBaseChangedByOtherProcessNotification
ABCAddressBook
_Bool _ABAddressBookDeleteAllRecordsWithStore(ABAddressBookRef, ABRecordRef, BOOL)
will delete "%@" recordID=%i, creating simulated crash report
 WHERE ROWID in (select group_id from ABGroupMembers where member_id = ?)
com.apple.AddressBook.MeCardChanged
ABCAddressBookDatabaseChanged
callback != NULL
AppleLanguages
ABContactSections
plist
WHERE ab_katakana_exclusively(FirstPhonetic) = 1 OR ab_katakana_exclusively(MiddlePhonetic) = 1 OR ab_katakana_exclusively(LastPhonetic) = 1 OR ab_katakana_exclusively(OrganizationPhonetic) = 1
_Bool _touchAllRecordsWithKatakanaPhoneticComponents(ABCAddressBook *)
Error touching record %@
UNKNOWN_PROPERTY
Name
Members
AddedMembersAndSubgroups
RemovedMembersAndSubgroups
FetchSortOrder
MembersAndSubgroups
Subgroups
ExternalIdentifier
StoreID
StoreReference
ExternalModificationTag
ExternalRepresentation
ExternalUUID
guid
WHERE StoreID = ?
v16@?0^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB}8
 ORDER BY Name COLLATE NOCASE
ABPerson
ABGroup
RECURSIVE
 WHERE ROWID IN (WITH %@ direct_members(groupid) AS (SELECT  abgm.group_id FROM ABGroupMembers abgm JOIN %@ abr ON abgm.member_type = %@ AND abgm.member_id = abr.ROWID WHERE abr.guid IN ( 
, ancestor_group(a_groupid) AS (SELECT groupid FROM direct_members UNION SELECT abgm.group_id FROM ABGroupMembers abgm JOIN ABGroup abg ON abgm.member_type = 1 AND abgm.member_id = abg.ROWID JOIN ancestor_group ag ON ag.a_groupid = abgm.member_id) SELECT a_groupid FROM ancestor_group)
 SELECT groupid FROM direct_members)
StoreID = %i
DELETE FROM ABGroupMembers WHERE group_id = ?;
%s %d
person
group
SELECT member_id, member_type FROM ABGroupMembers JOIN ABPerson on member_id = ABPerson.ROWID WHERE group_id = ? AND member_type = 0 ORDER BY FirstSortLanguageIndex, FirstSortSection, FirstSort;
SELECT member_id, member_type FROM ABGroupMembers JOIN ABPerson on member_id = ABPerson.ROWID WHERE group_id = ? AND member_type = 0 ORDER BY LastSortLanguageIndex, LastSortSection, LastSort;
SELECT member_id, member_type FROM ABGroupMembers WHERE group_id = ? AND member_type = 0;
SELECT member_id, member_type FROM ABGroupMembers WHERE group_id = ? AND member_type = 1;
SELECT member_id, member_type FROM ABGroupMembers WHERE group_id = ?;
INSERT INTO ABGroupMembers (group_id, member_type, member_id) VALUES (?, ?, ?);
DELETE FROM ABGroupMembers WHERE group_id = ? and member_id = ?;
record_id
format
data
derived_from_format
crop_x
crop_y
crop_width
AddressBookImages.sqlitedb
SELECT ROWID, record_id, crop_x, crop_y, crop_width, data FROM ABFullSizeImage WHERE record_id = ?;
SELECT ROWID, record_id, format, derived_from_format, data FROM ABThumbnailImage WHERE record_id = ? AND format = ?;
SELECT ROWID FROM ABThumbnailImage WHERE record_id = ? AND format = ?;
SELECT ROWID FROM ABThumbnailImage WHERE record_id = ?;
SELECT ROWID FROM ABFullSizeImage WHERE record_id = ?;
DELETE FROM ABThumbnailImage WHERE format = ? AND record_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
DELETE FROM ABThumbnailImage WHERE record_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
DELETE FROM ABFullSizeImage WHERE record_id in (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
format = %d
SELECT record_id FROM ABThumbnailImage INDEXED BY ABImageRecordIDFormatIndex WHERE record_id = 1;
SELECT record_id FROM ABFullSizeImage INDEXED BY ABFullSizeImageRecordIDIndex WHERE record_id = 1;
ABThumbnailImage
ABFullSizeImage
CREATE UNIQUE INDEX IF NOT EXISTS ABImageRecordIDFormatIndex ON ABThumbnailImage(record_id, format);
CREATE UNIQUE INDEX IF NOT EXISTS ABFullSizeImageRecordIDIndex ON ABFullSizeImage(record_id);
PRAGMA page_size = 8192;
PRAGMA cache_size = 250;
void _databaseDeleted(CPSqliteDatabase *, CPSqliteDatabaseDeleteReason)
image database was deleted, %@
AddressBook
The image database was corrupt.
Open a radar to PEP Address Book and attach syslog, AB logs and /tmp/AddressBook*
CREATE INDEX IF NOT EXISTS ABImageRecordIDFormatIndex ON ABImage(record_id, format);
SELECT record_id, crop_x, crop_y, crop_width, crop_height, data FROM ABImage WHERE format=?;
SELECT record_id, crop_x, crop_y, crop_width, data FROM ABFullSizeImage;
INSERT OR IGNORE INTO ABFullSizeImage(record_id, crop_x, crop_y, crop_width, data) VALUES (?, ?, ?, ?, ?);
INSERT OR IGNORE INTO ABThumbnailImage(record_id, format, derived_from_format, data) VALUES (?, ?, 2, ?);
INSERT OR IGNORE INTO ABThumbnailImage(record_id, format, derived_from_format, data) SELECT record_id, format, 2, data FROM ABImage WHERE format IN (0, 1) AND record_id IN (SELECT record_id FROM ABImage WHERE format=2) AND data IS NOT NULL;
public.jpeg
DROP TABLE IF EXISTS ABImage;
ALTER TABLE ABThumbnailImage RENAME TO ABThumbnailImage_old;
CREATE TABLE ABThumbnailImage(record_id, format, derived_from_format, data);
INSERT OR IGNORE INTO ABThumbnailImage(record_id, format, derived_from_format, data) SELECT record_id, format, 2, data FROM ABThumbnailImage_old WHERE format != 5 AND data IS NOT NULL;
DROP TABLE IF EXISTS ABThumbnailImage_old;
SELECT record_id, data, ROWID FROM ABThumbnailImage WHERE format=?;
CREATE TABLE ABFullSizeImage(record_id, crop_x, crop_y, crop_width, data);
DELETE FROM ABThumbnailImage WHERE ROWID IN ( ?
_Bool _ABCImageStoreDeleteSyncThumbnailImagesWithRowIDs(CPSqliteConnection *, CFArrayRef)
error preparing delete statement for invalid sync thumbnails
SELECT COUNT(ROWID) FROM ABFullSizeImage WHERE record_id = ? AND data IS NOT NULL;
SELECT COUNT(ROWID) FROM ABFullSizeImage WHERE record_id = ?;
SELECT COUNT(ROWID) FROM ABThumbnailImage WHERE record_id = ? AND data IS NOT NULL;
SELECT COUNT(ROWID) FROM ABThumbnailImage WHERE record_id = ? AND format = ? AND data IS NOT NULL;
SELECT COUNT(ROWID) FROM ABThumbnailImage WHERE record_id = ?;
SELECT COUNT(ROWID) FROM ABThumbnailImage WHERE record_id = ? AND format = ?;
(NULL)
ABCMultiValue
ABMultiValueRef %p with %ld value(s)
<NULL>
    %ld: %@ (%p) - %@ (%p)
First
Last
Image
Phone
Email
Address
Middle
FirstPhonetic
MiddlePhonetic
LastPhonetic
Organization
Department
Date
Note
Kind
Sound
Birthday
JobTitle
Nickname
Prefix
Suffix
RelatedNames
FirstSort
LastSort
CreationDate
ModificationDate
CompositeNameFallback
SyntheticPropertiesReset
DisplayName
FirstSortSection
LastSortSection
FirstSortLanguageIndex
LastSortLanguageIndex
Search
PersonLink
ImageURI
IsPreferredName
NameOnlySearch
SocialProfile
GeoData
PhonemeData
AlternateBirthday
MapsData
FirstPronunciation
MiddlePronunciation
LastPronunciation
OrganizationPhonetic
OrganizationPronunciation
PreviousFamilyName
Changes
PreferredLikenessSource
PreferredPersonaIdentifier
LinkUUID
ImageData
ThumbnailData
ImageCropRect
FullscreenImageData
SyncImageData
IsPreferredImage
HasImageData
PreferredChannel
DowntimeWhitelist
ImageType
ImageHash
LinkToPersonUUID
PersonLinkUUID
MemojiMetadata
WHERE StoreID = ? 
 ORDER BY FirstSortLanguageIndex, FirstSortSection, FirstSort
 ORDER BY LastSortLanguageIndex, LastSortSection, LastSort
 ORDER BY ROWID
 WHERE IsPreferredName = 1
 ORDER BY FirstSortLanguageIndex, FirstSortSection, FirstSort LIMIT ? OFFSET ?
 ORDER BY LastSortLanguageIndex, LastSortSection, LastSort LIMIT ? OFFSET ?
_Bool ABCopyArrayOfSectionListOffsets(ABAddressBookRef, ABPersonSortOrdering, CFArrayRef *, CFArrayRef *, CFArrayRef *)
SELECT LanguageIndex, Section, 0, number FROM 
FirstSortSectionCountTotal
LastSortSectionCountTotal
 WHERE number > 0 ORDER BY LanguageIndex ASC, Section ASC;
CFArrayRef ABCCopyArrayOfKeyboardAutoCorrectionStrings(ABCAddressBookRef)
SELECT First,Last, Middle, Organization, JobTitle, Nickname FROM ABPerson
CFArrayRef ABAddressBookCopyArrayOfAllNamePhoneticPairs(ABCAddressBookRef)
SELECT Last,LastPhonetic,First,FirstPhonetic,Middle,MiddlePhonetic,Organization,JobTitle,Nickname FROM ABPerson
PersonLink IN (
IsPreferredName = 1
UPDATE ABPersonLink set PreferredImagePersonID = ? WHERE ROWID = ?;
CFIndex ABCPersonNameOrderPieces(ABPersonCompositeNameFormat, ABCPersonSortOrdering, int, void *, void *, void *, void *, void *, void *, void *, void **, CFIndex *)
CFArrayRef ABCPersonCopyNamePieces(ABCRecordRef, ABCPersonSortOrdering, CFIndex *)
FirstCharacterAfterLanguage
LastCharacter
INSERT OR REPLACE INTO ABPersonSearchKey (person_id, SearchKey, NameOnlySearchKey) VALUES (?, ?, ?);
MergeFacebookContacts
MergeFacebookContactsToSourceID
DeleteFacebookContacts
FacebookCheckDone
com.apple.account.facebookLegacy
%@ - %@
delete from ABMultiValue where     record_id in (select ROWID from ABPerson where storeid = ?)     and property = 22     and value like "%.facebook.com%";
delete from ABMultiValueEntry where parent_id in     (select abmv.UID from ABMultiValue as abmv join ABMultiValueEntry as abmve on abmv.UID = abmve.parent_id where         abmv.record_id in (select ROWID from ABPerson where StoreID = ?)         and abmv.property = 46         and abmve.key in (select ROWID from ABMultiValueEntryKey where value like "service")         and abmve.value like "facebook");
delete from ABMultiValue where     record_id in (select ROWID from ABPerson where storeid = ?)     and property = 46     and UID not in (select parent_id from ABMultiValueEntry);
select AccountIdentifier, abs.ROWID from ABAccount as aba join ABStore as abs on aba.ROWID = abs.AccountID;
ABCRecordSetValueAndReturnError
ABCRecord.c
value != NULL && CFGetTypeID(value) == CFStringGetTypeID() && CFStringGetLength(value) != 0
_Bool ABCRecordSetValueAndReturnError(ABCRecordRef, ABCPropertyID, CFTypeRef, ABCErrorRef *)
Someone tried to change property=%i on the local store. Please open a radar to PEP Address Book. %@
ABCPropertyType ABRecordTypeOfProperty(ABCRecordRef, ABCPropertyID)
UPDATE 
 SET 
 = ? WHERE ROWID = ?;
SELECT 
 FROM 
 WHERE ROWID = ?;
 = ?,
SELECT guid from ABPersonLink where ROWID = ?;
Can't return type callbacks for %d
PersonLinkerVersion
alter table ABStore rename to ABStore_old;
INSERT OR IGNORE INTO ABAccount (AccountIdentifier) SELECT DISTINCT AccountIdentifier FROM ABStore_old WHERE AccountIdentifier IS NOT NULL;
INSERT OR IGNORE INTO ABStore (ROWID, Name, Type, ConstraintsPath, ExternalModificationTag, StoreInternalIdentifier, AccountID) SELECT abs.ROWID, abs.Name, abs.Type, abs.ConstraintsPath, abs.ExternalModificationTag, abs.StoreInternalIdentifier, IFNULL(aba.ROWID, -1) FROM ABStore_old abs LEFT OUTER JOIN ABAccount aba ON abs.StoreInternalIdentifier = aba.AccountIdentifier;
INSERT OR IGNORE INTO ABStore (ROWID, Name, Type, ConstraintsPath, ExternalModificationTag, ExternalSyncTag, StoreInternalIdentifier, AccountID, Enabled, SyncData, MeIdentifier) SELECT abs.ROWID, abs.Name, abs.Type, abs.ConstraintsPath, abs.ExternalModificationTag, abs.ExternalSyncTag, abs.StoreInternalIdentifier, IFNULL(aba.ROWID, -1), abs.Enabled, abs.SyncData, abs.MeIdentifier FROM ABStore_old abs LEFT OUTER JOIN ABAccount aba ON abs.AccountIdentifier = aba.AccountIdentifier;
INSERT OR IGNORE INTO ABStore (ROWID, Name, Type, ConstraintsPath, ExternalModificationTag, ExternalSyncTag, StoreInternalIdentifier, AccountID, Enabled, SyncData) SELECT abs.ROWID, abs.Name, abs.Type, abs.ConstraintsPath, abs.ExternalModificationTag, abs.ExternalSyncTag, abs.StoreInternalIdentifier, IFNULL(aba.ROWID, -1), abs.Enabled, abs.SyncData FROM ABStore_old abs LEFT OUTER JOIN ABAccount aba ON abs.AccountIdentifier = aba.AccountIdentifier;
INSERT OR IGNORE INTO ABStore (ROWID, Name, Type, ConstraintsPath, ExternalModificationTag, ExternalSyncTag, StoreInternalIdentifier, AccountID, Enabled) SELECT abs.ROWID, abs.Name, abs.Type, abs.ConstraintsPath, abs.ExternalModificationTag, abs.ExternalSyncTag, abs.StoreInternalIdentifier, IFNULL(aba.ROWID, -1), abs.Enabled FROM ABStore_old abs LEFT OUTER JOIN ABAccount aba ON abs.AccountIdentifier = aba.AccountIdentifier;
INSERT OR IGNORE INTO ABStore (ROWID, Name, Type, ConstraintsPath, ExternalModificationTag, StoreInternalIdentifier, AccountID, Enabled) SELECT abs.ROWID, abs.Name, abs.Type, abs.ConstraintsPath, abs.ExternalModificationTag, abs.StoreInternalIdentifier, IFNULL(aba.ROWID, -1), abs.Enabled FROM ABStore_old abs LEFT OUTER JOIN ABAccount aba ON abs.AccountIdentifier = aba.AccountIdentifier;
INSERT OR IGNORE INTO ABStore (ROWID, Name, Type, ConstraintsPath, ExternalModificationTag, StoreInternalIdentifier, AccountID) SELECT abs.ROWID, abs.Name, abs.Type, abs.ConstraintsPath, abs.ExternalModificationTag, abs.StoreInternalIdentifier, IFNULL(aba.ROWID, -1) FROM ABStore_old abs LEFT OUTER JOIN ABAccount aba ON abs.AccountIdentifier = aba.AccountIdentifier;
UPDATE ABPerson SET StoreID = 0 WHERE StoreID = -1;
UPDATE ABGroup SET StoreID = 0 WHERE StoreID = -1;
update ABStore SET Type = Type - 1208 WHERE Type >= 1209;
drop table ABStore_old;
alter table ABAccount rename to ABAccount_old;
INSERT OR IGNORE INTO ABStore (ROWID, Name, ExternalIdentifier, Type, ConstraintsPath, ExternalModificationTag, ExternalSyncTag, StoreInternalIdentifier, AccountID, Enabled, SyncData, MeIdentifier, Capabilities, guid) SELECT ROWID, Name, ExternalIdentifier, Type, ConstraintsPath, ExternalModificationTag, ExternalSyncTag, StoreInternalIdentifier, AccountID, Enabled, SyncData, MeIdentifier, Capabilities, (ab_generate_guid()) FROM ABStore_old;
INSERT OR IGNORE INTO ABAccount (ROWID, AccountIdentifier, Flags, DefaultSourceID, guid) SELECT ROWID, AccountIdentifier, Flags, DefaultSourceID, (ab_generate_guid()) FROM ABAccount_old;
drop table ABAccount_old;
INSERT OR IGNORE INTO ABStore (ROWID, Name, ExternalIdentifier, Type, ConstraintsPath, ExternalModificationTag, ExternalSyncTag, StoreInternalIdentifier, AccountID, Enabled, SyncData, MeIdentifier, Capabilities, guid) SELECT ROWID, Name, ExternalIdentifier, Type, ConstraintsPath, ExternalModificationTag, ExternalSyncTag, StoreInternalIdentifier, AccountID, Enabled, SyncData, MeIdentifier, Capabilities, ab_repair_guid(guid) FROM ABStore_old;
INSERT OR IGNORE INTO ABAccount (ROWID, AccountIdentifier, Flags, DefaultSourceID, guid) SELECT ROWID, AccountIdentifier, Flags, DefaultSourceID, ab_repair_guid(guid) FROM ABAccount_old;
INSERT OR IGNORE INTO ABStore (ROWID, Name, ExternalIdentifier, Type, ConstraintsPath, ExternalModificationTag, ExternalSyncTag, StoreInternalIdentifier, AccountID, Enabled, SyncData, MeIdentifier, Capabilities, guid) SELECT ROWID, Name, ExternalIdentifier, Type, ConstraintsPath, ExternalModificationTag, ExternalSyncTag, StoreInternalIdentifier, AccountID, Enabled, SyncData, MeIdentifier, Capabilities, guid FROM ABStore_old;
INSERT OR IGNORE INTO ABAccount (ROWID, AccountIdentifier, Flags, DefaultSourceID, guid) SELECT ROWID, AccountIdentifier, Flags, DefaultSourceID, guid FROM ABAccount_old;
alter table ABGroup rename to ABGroup_old;
alter table ABGroupChanges rename to ABGroupChanges_old;
INSERT INTO ABGroupChanges (record, type, sequence_number, ExternalIdentifier, StoreID, guid) SELECT record, type, sequence_number, ExternalIdentifier, StoreID, guid FROM ABGroupChanges_old;
INSERT INTO ABGroup (ROWID, Name, ExternalIdentifier, StoreID, ExternalModificationTag, ExternalRepresentation, ExternalUUID, guid) SELECT ROWID, Name, ExternalIdentifier, StoreID, ExternalModificationTag, ExternalRepresentation, ExternalUUID, ab_repair_guid(guid) FROM ABGroup_old;
INSERT INTO ABGroupChanges (record, type, sequence_number, ExternalIdentifier, StoreID) SELECT record, type, -1, ExternalIdentifier, StoreID FROM ABGroupChanges_old;
INSERT INTO ABGroup (ROWID, Name, ExternalIdentifier, StoreID, ExternalModificationTag, ExternalRepresentation, ExternalUUID) SELECT ROWID, Name, ExternalIdentifier, StoreID, ExternalModificationTag, ExternalRepresentation, ExternalUUID FROM ABGroup_old;
INSERT INTO ABGroupChanges (record, type, sequence_number, ExternalIdentifier, StoreID) SELECT ROWID, type, -1, ExternalIdentifier, StoreID FROM ABGroupChanges_old;
INSERT OR IGNORE INTO ABGroup (ROWID, Name, ExternalIdentifier, StoreID) SELECT ROWID, Name, ExternalIdentifier, StoreID FROM ABGroup_old;
drop table ABGroup_old;
drop table ABGroupChanges_old;
drop table IF EXISTS ABGroupBasicChanges;
CPSqliteMigrationContinuation _migrationMigrateDatabase(CPSqliteDatabase *, CPSqliteConnection *, int, void *)
success=%@
DELETE FROM ABPersonSearchKey WHERE person_id NOT IN (SELECT ROWID FROM ABPerson);
alter table ABPerson rename to ABPerson_old;
alter table ABPersonChanges rename to ABPersonChanges_old;
alter table ABMultiValue rename to ABMultiValue_old;
INSERT INTO ABGroup (ROWID, Name, ExternalIdentifier, StoreID) SELECT ROWID, Name, NULL, 0 FROM ABGroup_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, 0 FROM ABPerson_old;
INSERT INTO ABGroupChanges (record, type, ExternalIdentifier, StoreID) SELECT ROWID, type, NULL, 0 FROM ABGroupChanges_old;
INSERT INTO ABPersonChanges (record, type, ExternalIdentifier, StoreID) SELECT ROWID, type, NULL, 0 FROM ABPersonChanges_old;
INSERT INTO ABStore (ROWID, Name, Type, ConstraintsPath, ExternalModificationTag, StoreInternalIdentifier, AccountIdentifier) SELECT ROWID, Name, Type, ConstraintsPath, ExternalModificationTag, StoreInternalIdentifier, NULL FROM ABStore_old;
INSERT INTO ABMultiValue (UID, record_id, property, identifier, label, value) SELECT UID, record_id, property, identifier, label, value FROM ABMultiValue_old;
drop table ABPerson_old;
drop table ABPersonChanges_old;
drop table IF EXISTS ABMultiValue_old;
SELECT count() FROM ABStore WHERE Type != %i and Type != %i and Type != %i and Type != %i and Type != %i;
SELECT count() FROM ABPerson WHERE Kind > %i;
DROP TABLE IF EXISTS ABStoreChanges;
UPDATE ABMultiValue SET identifier = -1 WHERE identifier = 0 AND Property = 16;
DROP TABLE IF EXISTS ABRecent;
DROP TABLE IF EXISTS ABPersonMultiValueDeletes;
com.apple.addressbook.migrator
DELETE FROM ABMultiValueEntry WHERE parent_id IN (SELECT UID FROM ABMultiValue WHERE record_id = ?);
DELETE FROM ABMultiValue WHERE record_id = ?;
TEXT
INTEGER
REAL
TIMESTAMP
BLOB
 PRIMARY KEY
CREATE TABLE IF NOT EXISTS ABGroupMembers (UID INTEGER PRIMARY KEY, group_id INTEGER, member_type INTEGER, member_id INTEGER, UNIQUE(group_id, member_type, member_id));
SELECT ABMultiValue.value from ABMultiValue WHERE record_id = ? AND property = ?;
SELECT group_concat(ABMultiValue.value, ' ') from ABMultiValue WHERE record_id = ? AND property = ?;
SELECT group_concat(mve.value, ' ') FROM ABMultiValue mv, ABMultiValueEntry mve, ABMultiValueEntryKey mvek WHERE mv.record_id = ? AND mve.parent_id = mv.UID AND mv.property = ? AND mvek.rowid = mve.key AND ( 
mvek.value = ? 
INSERT OR REPLACE INTO ABPersonFullTextSearch(rowid) VALUES( ? )
UPDATE ABPersonFullTextSearch SET 
 = ? 
, SupplementalCompositeNameTerms = ? 
WHERE rowid = ?
DELETE FROM ABPersonFullTextSearch WHERE rowid = ?
DROP TABLE IF EXISTS ABPersonFullTextSearch;
table drop: %d
collator="%@"
CREATE VIRTUAL TABLE IF NOT EXISTS ABPersonFullTextSearch USING fts4(tokenize=ab_cf_tokenizer language="%@" %@, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, OrganizationPhonetic, Department, Note, Birthday, JobTitle, Nickname, Prefix, Suffix, DisplayName, Phone, Email, Address, SocialProfile, URL, RelatedNames, IM, Date, SupplementalCompositeNameTerms);
SELECT UID, identifier, record_id, (SELECT value FROM ABMultiValueLabel WHERE ROWID = label), value, guid FROM ABMultiValue WHERE record_id 
= ? 
IN (
AND property+0 = ?;
Error fetching multivalue entries: %d
%s: invalid property type for %d
ABCDBContextFetchMultiValuePropertyIntoRecords
guid IN (
 OR PersonLink in (select abpl.rowid from ABPersonLink abpl where abpl.guid in (
SELECT value, record_id, identifier, (SELECT value FROM ABMultiValueLabel WHERE ROWID = label) FROM ABMultiValue WHERE UID IN (SELECT multivalue_id FROM ABPhoneLastFour WHERE value = ?);
SELECT value, record_id, identifier FROM ABMultiValue WHERE 
UID IN (SELECT multivalue_id FROM ABPhoneLastFour WHERE 
value = ? 
 AND
 (1 == has_sort_key_prefix(
abs.NameOnlySearchKey
abs.SearchKey
, 1))
, 0))
SELECT ROWID, First, Last, Middle, Organization, Kind, Prefix, Suffix, CompositeNameFallback 
ABCIteratePeopleMatchingStringWithCallbacks
ABCDBContext.m
CFArrayGetCount(results) == 0
, identifier, abv.value, abv.label
, identifier
 FROM ABPersonSearchKey abs JOIN ABPerson abp ON abs.person_id = abp.ROWID JOIN ABMultiValue abv ON abp.ROWID = abv.record_id WHERE
 FROM ABPersonSearchKey abs JOIN ABPerson abp ON abs.person_id = abp.ROWID WHERE
 AND abv.property+0 = ?
 ORDER BY FirstSortLanguageIndex+0, FirstSortSection, FirstSort
 ORDER BY LastSortLanguageIndex+0, LastSortSection, LastSort
, record_id, identifier
error
void _CopyPeopleAndMultiValuePropertiesMatchingNameWithCancellationCallback(ABCDBContextRef, CFStringRef, ABCPersonSortOrdering, ABCPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *, ABCCancellationCallback, void *)
Searching for %@ with property %i (%@):
%@ (%i) - %@ (%i)
%@ (%i) - identifier %i
%@ (%i) - %@
%@ (%i)
No results found.
------
, abv.value, abl.value from ABPerson abp JOIN ABMultiValue abv ON abp.ROWID = abv.record_id LEFT OUTER JOIN ABMultiValueLabel abl ON abv.label = abl.ROWID WHERE abv.property = ? LIMIT ? OFFSET ?;
SELECT record_id, value, identifier, (SELECT value FROM ABMultiValueLabel WHERE ROWID = label) FROM ABMultiValue WHERE property = ? AND value LIKE ?;
SELECT record_id, value, identifier FROM ABMultiValue WHERE property = ? AND value LIKE ?;
SELECT record_id, identifier FROM ABMultiValue WHERE property = ? AND value COLLATE NOCASE = ?
select mvl.value from ABMultiValueLabel mvl where ROWID in (select distinct label from ABMultiValue WHERE property = %i);
SELECT value FROM ABMultiValueLabel;
DELETE FROM ABMultiValueLabel WHERE value = ?;
INSERT INTO ABPersonMultiValueDeletes VALUES(?, ?, ?, ?, ?, ?);
Error %d performing multivalue delete log statement: %s
Error %d preparing multivalue delete log statement: %s
SELECT ROWID, record_id, property_id, identifier, sequence_number
, record_uid, identifier_uid
 FROM ABPersonMultiValueDeletes
 WHERE record_id IN (SELECT ROWID FROM ABPerson WHERE StoreID = ?) AND sequence_number > ? AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)
 ORDER BY ROWID ASC;
DELETE FROM ABPersonMultiValueDeletes WHERE sequence_number <= ? AND record_id IN (SELECT ROWID FROM ABPerson WHERE StoreID = ?);
DELETE FROM ABPersonMultiValueDeletes WHERE sequence_number <= ?;
 WHERE 
StoreID == ? 
 AND 
ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicates
count == CFArrayGetCount(values)
AB: Could not compile statement for query (ABCCopyArrayOfAllInstancesOfClassInSourceMatchingPredicates):
ExternalIdentifier IN 
 ( ?
ExternalIdentifier = ?
ExternalUUID IN 
ExternalUUID = ?
 = NULL
SELECT record_id FROM ABMultiValue INDEXED BY ABMultiValueRecordIDIndex WHERE record_id = 1;
SELECT label FROM ABMultiValue INDEXED BY ABMultiValueLabelIndex WHERE label = 1;
SELECT key FROM ABMultiValueEntry INDEXED BY ABMultiValueEntryKeyIndex WHERE key = 1;
SELECT value FROM ABPhoneLastFour INDEXED BY ABPhoneLastFourIndex WHERE value = 1;
SELECT property FROM ABMultiValue INDEXED BY ABMultiValuePropertyValueIndex WHERE property = 1;
SELECT FirstSortLanguageIndex FROM ABPerson INDEXED BY ABFirstSortIndex WHERE FirstSortLanguageIndex = 1;
SELECT LastSortLanguageIndex FROM ABPerson INDEXED BY ABLastSortIndex WHERE LastSortLanguageIndex = 1;
SELECT StoreID FROM ABPerson INDEXED BY ABFirstSortStoreIndex WHERE StoreID = 1;
SELECT StoreID FROM ABPerson INDEXED BY ABLastSortStoreIndex WHERE StoreID = 1;
SELECT PersonLink FROM ABPerson INDEXED BY ABPersonPersonLinkIndex WHERE PersonLink = 1;
SELECT IsPreferredName FROM ABPerson INDEXED BY ABPreferredFirstSortIndex WHERE IsPreferredName = 1;
SELECT IsPreferredName FROM ABPerson INDEXED BY ABPreferredLastSortIndex WHERE IsPreferredName = 1;
CNSuggestedContactStore
SortingCacheLanguageShadow
CREATE TABLE ABAccount (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, AccountIdentifier TEXT, Flags INTEGER, DefaultSourceID INTEGER, guid TEXT NOT NULL DEFAULT (ab_generate_guid()), UNIQUE(guid));
CREATE TABLE ABGroup (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, Name TEXT, ExternalIdentifier TEXT, StoreID INTEGER, ExternalModificationTag TEXT, ExternalRepresentation BLOB, ExternalUUID TEXT, guid TEXT NOT NULL DEFAULT (ab_generate_guid()), UNIQUE(guid));
CREATE TABLE ABGroupChanges (record INTEGER, type INTEGER, sequence_number INTEGER, ExternalIdentifier TEXT, StoreID INTEGER, guid TEXT);
alter table ABPersonLink rename to ABPersonLink_old;
alter table ABPersonSearchKey rename to ABPersonSearchKey_old;
_Bool _recreatePersonTables(CPSqliteConnection *, int)
result=%@
INSERT INTO ABPersonLink (ROWID, PreferredImagePersonID, PreferredNamePersonID, guid) SELECT ROWID, PreferredImagePersonID, PreferredNamePersonID, ab_repair_guid(guid) FROM ABPersonLink_old;
INSERT INTO ABPersonLink (ROWID, PreferredImagePersonID, PreferredNamePersonID, guid) SELECT ROWID, -1, -1, ab_repair_guid(guid) FROM ABPersonLink_old;
INSERT INTO ABPersonLink (ROWID, PreferredImagePersonID, PreferredNamePersonID) SELECT ROWID, NULL, NULL FROM ABPersonLink_old;
INSERT INTO ABPersonLink (ROWID, PreferredImagePersonID, PreferredNamePersonID) SELECT ROWID, PreferredImagePersonID, PreferredNamePersonID FROM ABPersonLink_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, guid, PhonemeData, AlternateBirthday, MapsData, FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier, PreferredChannel, DowntimeWhitelist, ImageType, ImageHash, MemojiMetadata) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, ab_repair_guid(guid), PhonemeData, AlternateBirthday, MapsData , FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier, PreferredChannel, DowntimeWhitelist, ImageType, ImageHash, MemojiMetadata FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, guid, PhonemeData, AlternateBirthday, MapsData, FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier, PreferredChannel, DowntimeWhitelist, ImageType, ImageHash) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, ab_repair_guid(guid), PhonemeData, AlternateBirthday, MapsData , FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier, PreferredChannel, DowntimeWhitelist, ImageType, ImageHash FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, guid, PhonemeData, AlternateBirthday, MapsData, FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier, PreferredChannel, DowntimeWhitelist) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, ab_repair_guid(guid), PhonemeData, AlternateBirthday, MapsData , FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier, PreferredChannel, DowntimeWhitelist FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, guid, PhonemeData, AlternateBirthday, MapsData, FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier, PreferredChannel) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, ab_repair_guid(guid), PhonemeData, AlternateBirthday, MapsData , FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier, PreferredChannel FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, guid, PhonemeData, AlternateBirthday, MapsData, FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, ab_repair_guid(guid), PhonemeData, AlternateBirthday, MapsData , FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName, PreferredLikenessSource, PreferredPersonaIdentifier FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, guid, PhonemeData, AlternateBirthday, MapsData, FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, ab_repair_guid(guid), PhonemeData, AlternateBirthday, MapsData , FirstPronunciation, MiddlePronunciation, LastPronunciation, OrganizationPhonetic, OrganizationPronunciation, PreviousFamilyName FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, guid, PhonemeData, AlternateBirthday, MapsData) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, ab_repair_guid(guid), PhonemeData, AlternateBirthday, MapsData FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, guid, PhonemeData, AlternateBirthday) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, ab_repair_guid(guid), PhonemeData, AlternateBirthday FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, guid) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink, ImageURI, ab_repair_guid(guid) FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex, PersonLink FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, ExternalModificationTag, ExternalUUID, ExternalRepresentation, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier, FirstSortSection, LastSortSection, FirstSortLanguageIndex, LastSortLanguageIndex FROM ABPerson_old;
INSERT INTO ABPerson (ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, Birthday, JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier) SELECT ROWID, First, Last, Middle, FirstPhonetic, MiddlePhonetic, LastPhonetic, Organization, Department, Note, Kind, ab_normalize_date(Birthday), JobTitle, Nickname, Prefix, Suffix, FirstSort, LastSort, CreationDate, ModificationDate, CompositeNameFallback, StoreID, ExternalIdentifier FROM ABPerson_old;
INSERT INTO ABPersonChanges (record, type, sequence_number, Image, ExternalIdentifier, StoreID, PersonLink, guid, Changes, LinkToPersonUUID, PersonLinkUUID)SELECT record, type, sequence_number, Image, ExternalIdentifier, StoreID, PersonLink, guid, Changes, LinkToPersonUUID, PersonLinkUUID FROM ABPersonChanges_old;
INSERT INTO ABPersonChanges (record, type, sequence_number, Image, ExternalIdentifier, StoreID, PersonLink, guid)SELECT record, type, sequence_number, Image, ExternalIdentifier, StoreID, PersonLink, guid FROM ABPersonChanges_old;
INSERT INTO ABPersonChanges (record, type, sequence_number, Image, ExternalIdentifier, StoreID, PersonLink, guid) SELECT record, type, sequence_number, Image, ExternalIdentifier, StoreID, -1, guid FROM ABPersonChanges_old;
INSERT INTO ABPersonChanges (record, type, sequence_number, Image, ExternalIdentifier, StoreID) SELECT record, type, -1, Image, ExternalIdentifier, StoreID FROM ABPersonChanges_old;
INSERT INTO ABPersonSearchKey (person_id, SearchKey, NameOnlySearchKey) SELECT person_id, value, NULL FROM ABPersonSearchKey_old;
drop table IF EXISTS ABPerson_old;
drop table IF EXISTS ABPersonChanges_old;
drop table IF EXISTS ABPersonLink_old;
drop table IF EXISTS ABPersonSearchKey_old;
drop table IF EXISTS ABPersonBasicChanges;
CREATE TABLE ABPerson (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, First TEXT, Last TEXT, Middle TEXT, FirstPhonetic TEXT, MiddlePhonetic TEXT, LastPhonetic TEXT, Organization TEXT, Department TEXT, Note TEXT, Kind INTEGER, Birthday TEXT, JobTitle TEXT, Nickname TEXT, Prefix TEXT, Suffix TEXT, FirstSort TEXT, LastSort TEXT, CreationDate INTEGER, ModificationDate INTEGER, CompositeNameFallback TEXT, ExternalIdentifier TEXT, ExternalModificationTag TEXT, ExternalUUID TEXT, StoreID INTEGER, DisplayName TEXT, ExternalRepresentation BLOB, FirstSortSection TEXT, LastSortSection TEXT, FirstSortLanguageIndex INTEGER DEFAULT 2147483647, LastSortLanguageIndex INTEGER DEFAULT 2147483647, PersonLink INTEGER DEFAULT -1, ImageURI TEXT, IsPreferredName INTEGER DEFAULT 1, guid TEXT NOT NULL DEFAULT (ab_generate_guid()), PhonemeData TEXT, AlternateBirthday TEXT, MapsData TEXT, FirstPronunciation TEXT, MiddlePronunciation TEXT, LastPronunciation TEXT, OrganizationPhonetic TEXT, OrganizationPronunciation TEXT, PreviousFamilyName TEXT, PreferredLikenessSource TEXT, PreferredPersonaIdentifier TEXT, PreferredChannel TEXT, DowntimeWhitelist TEXT, ImageType TEXT, ImageHash BLOB, MemojiMetadata BLOB, UNIQUE(guid));
CREATE TABLE ABPersonChanges (record INTEGER, type INTEGER, sequence_number INTEGER, Image INTEGER, ExternalIdentifier TEXT, StoreID INTEGER, PersonLink INTEGER, guid TEXT, Changes INTEGER, LinkToPersonUUID TEXT, PersonLinkUUID TEXT);
CREATE TABLE ABPersonLink (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, PreferredImagePersonID INTEGER DEFAULT -1, PreferredNamePersonID INTEGER DEFAULT -1, guid TEXT NOT NULL DEFAULT (ab_generate_guid()), UNIQUE(guid));
CREATE TABLE IF NOT EXISTS ABPersonSearchKey (person_id INTEGER, SearchKey BLOB, NameOnlySearchKey BLOB, UNIQUE(person_id));
DROP INDEX IF EXISTS ABFirstSortIndex;
CREATE INDEX IF NOT EXISTS ABFirstSortIndex on ABPerson(FirstSortLanguageIndex, FirstSortSection, FirstSort);
DROP INDEX IF EXISTS ABLastSortIndex;
CREATE INDEX IF NOT EXISTS ABLastSortIndex on ABPerson(LastSortLanguageIndex, LastSortSection, LastSort);
DROP INDEX IF EXISTS ABFirstSortStoreIndex;
DROP INDEX IF EXISTS ABFirstSortStore;
CREATE INDEX IF NOT EXISTS ABFirstSortStoreIndex on ABPerson(StoreID, FirstSortLanguageIndex, FirstSortSection, FirstSort);
DROP INDEX IF EXISTS ABLastSortStoreIndex;
CREATE INDEX IF NOT EXISTS ABLastSortStoreIndex on ABPerson(StoreID, LastSortLanguageIndex, LastSortSection, LastSort);
DROP TRIGGER IF EXISTS DeletePersonLink;
DROP TRIGGER IF EXISTS UpdatePersonLink;
DROP TRIGGER IF EXISTS UpdatePersonLinkUponPersonUnlink;
DROP TRIGGER IF EXISTS UpdatePersonUponLinkDeletion;
DROP TRIGGER IF EXISTS UpdatePersonUponLinkInsertion;
DROP TRIGGER IF EXISTS UpdatePersonUponLinkUpdate;
CREATE TRIGGER IF NOT EXISTS DeletePersonLink AFTER DELETE ON ABPerson BEGIN DELETE FROM ABPersonLink WHERE (ROWID = OLD.PersonLink AND (SELECT count() FROM ABPerson WHERE PersonLink = OLD.PersonLink) < 2); END;
CREATE TRIGGER IF NOT EXISTS UpdatePersonLink AFTER UPDATE OF PersonLink ON ABPerson BEGIN DELETE FROM ABPersonLink WHERE (ROWID = OLD.PersonLink AND (SELECT count() FROM ABPerson WHERE PersonLink = OLD.PersonLink) < 2); END;
CREATE TRIGGER IF NOT EXISTS UpdatePersonLinkUponPersonUnlink AFTER UPDATE OF PersonLink ON ABPerson WHEN OLD.PersonLink != -1 AND NEW.PersonLink = -1 BEGIN UPDATE ABPersonLink SET PreferredNamePersonID = (SELECT ROWID FROM ABPerson abp WHERE abp.PersonLink = OLD.PersonLink ORDER BY abp.ROWID LIMIT 1) WHERE (ROWID = OLD.PersonLink AND PreferredNamePersonID = OLD.ROWID); END;
CREATE TRIGGER IF NOT EXISTS UpdatePersonUponLinkDeletion AFTER DELETE ON ABPersonLink BEGIN     UPDATE ABPerson SET PersonLink = -1, IsPreferredName = 1 WHERE PersonLink = OLD.ROWID; END;
CREATE TRIGGER IF NOT EXISTS UpdatePersonUponLinkInsertion AFTER INSERT ON ABPersonLink 
BEGIN 
    UPDATE ABPerson SET IsPreferredName = ab_update_value_from_trigger(ROWID = NEW.PreferredNamePersonID, 'IsPreferredName', ROWID) WHERE PersonLink = NEW.ROWID; 
END; 
CREATE TRIGGER IF NOT EXISTS UpdatePersonUponLinkUpdate AFTER UPDATE ON ABPersonLink 
BEGIN 
    UPDATE ABPerson SET IsPreferredName = ab_update_value_from_trigger(ROWID = NEW.PreferredNamePersonID, 'IsPreferredName', ROWID) WHERE PersonLink = NEW.ROWID; 
END; 
DROP TRIGGER IF EXISTS NamePreferredPersonInsertTrigger;
DROP TRIGGER IF EXISTS NamePreferredPersonDeleteTrigger;
DROP TRIGGER IF EXISTS NamePreferredPersonEditTrigger;
CREATE TRIGGER IF NOT EXISTS NamePreferredPersonEditTrigger AFTER UPDATE OF Prefix, First, Middle, Last, Suffix, Organization, Kind ON ABPerson WHEN ((OLD.Prefix IS NOT NEW.Prefix) OR (OLD.First IS NOT NEW.First) OR (OLD.Middle IS NOT NEW.Middle) OR (OLD.Last IS NOT NEW.Last) OR (OLD.Suffix IS NOT NEW.Suffix) OR (OLD.Organization IS NOT NEW.Organization) OR (OLD.Kind IS NOT NEW.Kind)) BEGIN UPDATE ABPersonLink SET PreferredNamePersonID = OLD.ROWID WHERE (OLD.PersonLink = ROWID); END;
CREATE TRIGGER IF NOT EXISTS NamePreferredPersonInsertTrigger AFTER INSERT ON ABPerson BEGIN UPDATE ABPersonLink SET PreferredNamePersonID = NEW.ROWID WHERE (ROWID = NEW.PersonLink AND PreferredNamePersonID = -1); END;
CREATE TRIGGER IF NOT EXISTS NamePreferredPersonDeleteTrigger AFTER DELETE ON ABPerson BEGIN UPDATE ABPersonLink SET PreferredNamePersonID = (SELECT ROWID FROM ABPerson abp WHERE abp.PersonLink = OLD.PersonLink ORDER BY abp.ROWID LIMIT 1) WHERE (ROWID = OLD.PersonLink AND PreferredNamePersonID = OLD.ROWID); END;
DROP INDEX IF EXISTS ABPersonPersonLinkIndex;
CREATE INDEX ABPersonPersonLinkIndex on ABPerson(PersonLink);
DROP INDEX IF EXISTS ABPreferredFirstSortIndex;
CREATE INDEX ABPreferredFirstSortIndex on ABPerson(IsPreferredName, FirstSortLanguageIndex, FirstSortSection, FirstSort);
DROP INDEX IF EXISTS ABPreferredLastSortIndex;
CREATE INDEX ABPreferredLastSortIndex on ABPerson(IsPreferredName, LastSortLanguageIndex, LastSortSection, LastSort);
DROP TRIGGER IF EXISTS UpdatePersonLinkField;
CREATE TRIGGER IF NOT EXISTS UpdatePersonLinkField AFTER UPDATE OF PersonLink ON ABPerson 
WHEN OLD.PersonLink != NEW.PersonLink 
BEGIN 
    UPDATE ABPerson 
    SET IsPreferredName = ab_update_value_from_trigger((NEW.PersonLink = -1 OR ROWID = (SELECT PreferredNamePersonID FROM ABPersonLink abl WHERE abl.ROWID = NEW.PersonLink)), 'IsPreferredName', ROWID) 
    WHERE ROWID = NEW.ROWID; 
END; 
DROP TRIGGER IF EXISTS InitializePersonLinkField;
CREATE TRIGGER IF NOT EXISTS InitializePersonLinkField AFTER INSERT ON ABPerson 
BEGIN 
    UPDATE ABPerson 
    SET IsPreferredName = ab_update_value_from_trigger((NEW.PersonLink = -1 OR ROWID = (SELECT PreferredNamePersonID FROM ABPersonLink abl WHERE abl.ROWID = NEW.PersonLink)), 'IsPreferredName', ROWID) 
    WHERE ROWID = NEW.ROWID; 
END;
DROP TRIGGER IF EXISTS DeleteSearchKey;
CREATE TRIGGER IF NOT EXISTS DeleteSearchKey AFTER DELETE ON ABPerson BEGIN DELETE FROM ABPersonSearchKey WHERE person_id = OLD.ROWID; END;
DROP INDEX IF EXISTS ABPersonExternalUUIDIndex;
CREATE INDEX ABPersonExternalUUIDIndex on ABPerson(ExternalUUID);
DROP INDEX IF EXISTS ABPersonExternalIdentifierIndex;
CREATE INDEX ABPersonExternalIdentifierIndex on ABPerson(ExternalIdentifier);
DROP TRIGGER IF EXISTS create_index_entry;
DROP TRIGGER IF EXISTS delete_index_entry;
DROP TRIGGER IF EXISTS update_index_First;
DROP TRIGGER IF EXISTS update_index_Last;
DROP TRIGGER IF EXISTS update_index_Middle;
DROP TRIGGER IF EXISTS update_index_FirstPhonetic;
DROP TRIGGER IF EXISTS update_index_MiddlePhonetic;
DROP TRIGGER IF EXISTS update_index_LastPhonetic;
DROP TRIGGER IF EXISTS update_index_Organization;
DROP TRIGGER IF EXISTS update_index_Department;
DROP TRIGGER IF EXISTS update_index_Note;
DROP TRIGGER IF EXISTS update_index_JobTitle;
DROP TRIGGER IF EXISTS update_index_Nickname;
DROP TRIGGER IF EXISTS update_index_Prefix;
DROP TRIGGER IF EXISTS update_index_Suffix;
DROP TRIGGER IF EXISTS update_index_DisplayName;
DROP TRIGGER IF EXISTS search_index_ABMultiValueEntry_insert;
DROP TRIGGER IF EXISTS search_index_ABMultiValueEntry_update;
DROP TRIGGER IF EXISTS search_index_ABMultiValue_insert;
DROP TRIGGER IF EXISTS search_index_ABMultiValue_update;
DROP TRIGGER IF EXISTS search_index_ABMultiValue_delete;
DROP TABLE IF EXISTS sorting_first_section_list
DROP TABLE IF EXISTS FirstSortSectionCount;
CREATE TABLE IF NOT EXISTS FirstSortSectionCount(LanguageIndex, Section TEXT, StoreID, number, UNIQUE(LanguageIndex, Section, StoreID));
DROP TABLE IF EXISTS sorting_last_section_list
DROP TABLE IF EXISTS LastSortSectionCount;
CREATE TABLE IF NOT EXISTS LastSortSectionCount(LanguageIndex, Section TEXT, StoreID, number, UNIQUE(LanguageIndex, Section, StoreID));
DROP TABLE IF EXISTS FirstSortSectionCountTotal;
CREATE TABLE IF NOT EXISTS FirstSortSectionCountTotal(LanguageIndex, Section TEXT, Type INT, number, UNIQUE(LanguageIndex, Section, Type));
DROP TABLE IF EXISTS LastSortSectionCountTotal;
CREATE TABLE IF NOT EXISTS LastSortSectionCountTotal(LanguageIndex, Section TEXT, Type INT, number, UNIQUE(LanguageIndex, Section, Type));
Error creating section tables: %d
DROP TRIGGER IF EXISTS sorting_first_prefix_trigger;
DROP TRIGGER IF EXISTS FirstSortSectionInsert;
CREATE TRIGGER IF NOT EXISTS FirstSortSectionInsert AFTER INSERT ON ABPerson BEGIN INSERT OR REPLACE INTO FirstSortSectionCount VALUES(NEW.FirstSortLanguageIndex, IFNULL(NEW.FirstSortSection, ''), NEW.StoreID, 1 + IFNULL((SELECT number from FirstSortSectionCount WHERE LanguageIndex = NEW.FirstSortLanguageIndex AND Section = IFNULL(NEW.FirstSortSection, '') AND StoreID = NEW.StoreID), 0)); END;
DROP TRIGGER IF EXISTS update_first_prefix_trigger;
DROP TRIGGER IF EXISTS FirstSortSectionUpdate;
CREATE TRIGGER IF NOT EXISTS FirstSortSectionUpdate AFTER UPDATE ON ABPerson BEGIN INSERT OR REPLACE INTO FirstSortSectionCount VALUES(OLD.FirstSortLanguageIndex, IFNULL(OLD.FirstSortSection, ''), OLD.StoreID, (SELECT number from FirstSortSectionCount WHERE LanguageIndex = OLD.FirstSortLanguageIndex AND Section = IFNULL(OLD.FirstSortSection, '') AND StoreID = OLD.StoreID) - 1); DELETE FROM FirstSortSectionCount WHERE LanguageIndex = OLD.FirstSortLanguageIndex AND Section = IFNULL(OLD.FirstSortSection, '') AND StoreID = OLD.StoreID AND number = 0; INSERT OR REPLACE INTO FirstSortSectionCount VALUES(NEW.FirstSortLanguageIndex, IFNULL(NEW.FirstSortSection, ''), NEW.StoreID, 1 + IFNULL((SELECT number from FirstSortSectionCount WHERE LanguageIndex = NEW.FirstSortLanguageIndex AND Section = IFNULL(NEW.FirstSortSection, '') AND StoreID = NEW.StoreID), 0)); END;
DROP TRIGGER IF EXISTS delete_first_prefix_trigger;
DROP TRIGGER IF EXISTS FirstSortSectionDelete;
CREATE TRIGGER IF NOT EXISTS FirstSortSectionDelete AFTER DELETE ON ABPerson BEGIN INSERT OR REPLACE INTO FirstSortSectionCount VALUES(OLD.FirstSortLanguageIndex, IFNULL(OLD.FirstSortSection, ''), OLD.StoreID, (SELECT number from FirstSortSectionCount WHERE LanguageIndex = OLD.FirstSortLanguageIndex AND Section = IFNULL(OLD.FirstSortSection, '') AND StoreID = OLD.StoreID) - 1); DELETE FROM FirstSortSectionCount WHERE LanguageIndex = OLD.FirstSortLanguageIndex AND Section = IFNULL(OLD.FirstSortSection, '') AND StoreID = OLD.StoreID AND number = 0; END;
DROP TRIGGER IF EXISTS sorting_last_prefix_trigger;
DROP TRIGGER IF EXISTS LastSortSectionInsert;
CREATE TRIGGER IF NOT EXISTS LastSortSectionInsert AFTER INSERT ON ABPerson BEGIN INSERT OR REPLACE INTO LastSortSectionCount VALUES(NEW.LastSortLanguageIndex, IFNULL(NEW.LastSortSection, ''), NEW.StoreID, 1 + IFNULL((SELECT number from LastSortSectionCount WHERE LanguageIndex = NEW.LastSortLanguageIndex AND Section = IFNULL(NEW.LastSortSection, '') AND StoreID = NEW.StoreID), 0)); END;
DROP TRIGGER IF EXISTS update_last_prefix_trigger;
DROP TRIGGER IF EXISTS LastSortSectionUpdate;
CREATE TRIGGER IF NOT EXISTS LastSortSectionUpdate AFTER UPDATE ON ABPerson BEGIN INSERT OR REPLACE INTO LastSortSectionCount VALUES(OLD.LastSortLanguageIndex, IFNULL(OLD.LastSortSection, ''), OLD.StoreID, (SELECT number from LastSortSectionCount WHERE LanguageIndex = OLD.LastSortLanguageIndex AND Section = IFNULL(OLD.LastSortSection, '') AND StoreID = OLD.StoreID) - 1); DELETE FROM LastSortSectionCount WHERE LanguageIndex = OLD.LastSortLanguageIndex AND Section = IFNULL(OLD.LastSortSection, '') AND StoreID = OLD.StoreID AND number = 0; INSERT OR REPLACE INTO LastSortSectionCount VALUES(NEW.LastSortLanguageIndex, IFNULL(NEW.LastSortSection, ''), NEW.StoreID, 1 + IFNULL((SELECT number from LastSortSectionCount WHERE LanguageIndex = NEW.LastSortLanguageIndex AND Section = IFNULL(NEW.LastSortSection, '') AND StoreID = NEW.StoreID), 0)); END;
DROP TRIGGER IF EXISTS delete_last_prefix_trigger;
DROP TRIGGER IF EXISTS LastSortSectionDelete;
CREATE TRIGGER IF NOT EXISTS LastSortSectionDelete AFTER DELETE ON ABPerson BEGIN INSERT OR REPLACE INTO LastSortSectionCount VALUES(OLD.LastSortLanguageIndex, IFNULL(OLD.LastSortSection, ''), OLD.StoreID, (SELECT number from LastSortSectionCount WHERE LanguageIndex = OLD.LastSortLanguageIndex AND Section = IFNULL(OLD.LastSortSection, '') AND StoreID = OLD.StoreID) - 1); DELETE FROM LastSortSectionCount WHERE LanguageIndex = OLD.LastSortLanguageIndex AND Section = IFNULL(OLD.LastSortSection, '') AND StoreID = OLD.StoreID AND number = 0; END;
DROP TRIGGER IF EXISTS FirstSortSectionTotalDelete;
CREATE TRIGGER IF NOT EXISTS FirstSortSectionTotalDelete AFTER DELETE ON ABPerson 
WHEN OLD.IsPreferredName=1 
BEGIN 
    INSERT OR REPLACE INTO FirstSortSectionCountTotal 
    VALUES( 
        OLD.FirstSortLanguageIndex, 
        IFNULL(OLD.FirstSortSection, ''), 
        0, 
        (SELECT number FROM FirstSortSectionCountTotal WHERE LanguageIndex = OLD.FirstSortLanguageIndex AND Section = IFNULL(OLD.FirstSortSection, '') AND Type = 0) - 1 
    ); 
    
    DELETE FROM FirstSortSectionCountTotal 
    WHERE LanguageIndex = OLD.FirstSortLanguageIndex AND 
        Section = IFNULL(OLD.FirstSortSection, '') AND 
        Type = 0 AND 
        number <= 0; 
END; 
DROP TRIGGER IF EXISTS LastSortSectionTotalDelete;
CREATE TRIGGER IF NOT EXISTS LastSortSectionTotalDelete AFTER DELETE ON ABPerson 
WHEN OLD.IsPreferredName=1 
BEGIN 
    INSERT OR REPLACE INTO LastSortSectionCountTotal 
    VALUES( 
        OLD.LastSortLanguageIndex, 
        IFNULL(OLD.LastSortSection, ''), 
        0, 
        (SELECT number FROM LastSortSectionCountTotal WHERE LanguageIndex = OLD.LastSortLanguageIndex AND Section = IFNULL(OLD.LastSortSection, '') AND Type = 0) - 1 
    ); 
    
    DELETE FROM LastSortSectionCountTotal 
    WHERE LanguageIndex = OLD.LastSortLanguageIndex AND 
        Section = IFNULL(OLD.LastSortSection, '') AND 
        Type = 0 AND 
        number <= 0; 
END; 
DROP TRIGGER IF EXISTS FirstSortSectionTotalInsert;
CREATE TRIGGER IF NOT EXISTS FirstSortSectionTotalInsert AFTER INSERT ON ABPerson 
WHEN NEW.IsPreferredName=1 
BEGIN 
    INSERT OR REPLACE INTO FirstSortSectionCountTotal 
    VALUES( 
        NEW.FirstSortLanguageIndex, 
        IFNULL(NEW.FirstSortSection, ''), 
        0, 
        1 + IFNULL((SELECT number from FirstSortSectionCountTotal WHERE LanguageIndex = NEW.FirstSortLanguageIndex AND Section = IFNULL(NEW.FirstSortSection, '') AND Type = 0), 0) 
    ); 
END; 
DROP TRIGGER IF EXISTS LastSortSectionTotalInsert;
CREATE TRIGGER IF NOT EXISTS LastSortSectionTotalInsert AFTER INSERT ON ABPerson 
WHEN NEW.IsPreferredName=1 
BEGIN 
    INSERT OR REPLACE INTO LastSortSectionCountTotal 
    VALUES( 
        NEW.LastSortLanguageIndex, 
        IFNULL(NEW.LastSortSection, ''), 
        0, 
        1 + IFNULL((SELECT number from LastSortSectionCountTotal WHERE LanguageIndex = NEW.LastSortLanguageIndex AND Section = IFNULL(NEW.LastSortSection, '') AND Type = 0), 0) 
    ); 
END; 
DROP TRIGGER IF EXISTS FirstSortSectionTotalUpdateIfWasPreferred;
CREATE TRIGGER IF NOT EXISTS FirstSortSectionTotalUpdateIfWasPreferred AFTER UPDATE ON ABPerson 
WHEN OLD.IsPreferredName=1 
BEGIN 
    INSERT OR REPLACE INTO FirstSortSectionCountTotal 
    VALUES( 
        OLD.FirstSortLanguageIndex, 
        IFNULL(OLD.FirstSortSection, ''), 
        0, 
        (SELECT number FROM FirstSortSectionCountTotal WHERE LanguageIndex = OLD.FirstSortLanguageIndex AND Section = IFNULL(OLD.FirstSortSection, '') AND Type = 0) - 1 
    ); 
    
    DELETE FROM FirstSortSectionCountTotal 
    WHERE LanguageIndex = OLD.FirstSortLanguageIndex AND 
        Section = IFNULL(OLD.FirstSortSection, '') AND 
        Type = 0 AND 
        number = 0; 
END; 
DROP TRIGGER IF EXISTS FirstSortSectionTotalUpdateIfIsPreferred;
CREATE TRIGGER IF NOT EXISTS FirstSortSectionTotalUpdateIfIsPreferred AFTER UPDATE ON ABPerson 
WHEN NEW.IsPreferredName=1 
BEGIN 
    INSERT OR REPLACE INTO FirstSortSectionCountTotal 
    VALUES( 
        NEW.FirstSortLanguageIndex, 
        IFNULL(NEW.FirstSortSection, ''), 
        0, 
        1 + IFNULL((SELECT number from FirstSortSectionCountTotal WHERE LanguageIndex = NEW.FirstSortLanguageIndex AND Section = IFNULL(NEW.FirstSortSection, '') AND Type = 0), 0) 
    ); 
END; 
DROP TRIGGER IF EXISTS LastSortSectionTotalUpdateIfWasPreferred;
CREATE TRIGGER IF NOT EXISTS LastSortSectionTotalUpdateIfWasPreferred AFTER UPDATE ON ABPerson 
WHEN OLD.IsPreferredName=1 
BEGIN 
    INSERT OR REPLACE INTO LastSortSectionCountTotal 
    VALUES( 
        OLD.LastSortLanguageIndex, 
        IFNULL(OLD.LastSortSection, ''), 
        0, 
        (SELECT number FROM LastSortSectionCountTotal WHERE LanguageIndex = OLD.LastSortLanguageIndex AND Section = IFNULL(OLD.LastSortSection, '') AND Type = 0) - 1 
    ); 
    
    DELETE FROM LastSortSectionCountTotal 
    WHERE LanguageIndex = OLD.LastSortLanguageIndex AND 
        Section = IFNULL(OLD.LastSortSection, '') AND 
        Type = 0 AND 
        number = 0; 
END; 
DROP TRIGGER IF EXISTS LastSortSectionTotalUpdateIfIsPreferred;
CREATE TRIGGER IF NOT EXISTS LastSortSectionTotalUpdateIfIsPreferred AFTER UPDATE ON ABPerson 
WHEN NEW.IsPreferredName=1 
BEGIN 
    INSERT OR REPLACE INTO LastSortSectionCountTotal 
    VALUES( 
        NEW.LastSortLanguageIndex, 
        IFNULL(NEW.LastSortSection, ''), 
        0, 
        1 + IFNULL((SELECT number from LastSortSectionCountTotal WHERE LanguageIndex = NEW.LastSortLanguageIndex AND Section = IFNULL(NEW.LastSortSection, '') AND Type = 0), 0) 
    ); 
END; 
error initializing AB database (_createABDatabaseTables): %s
no connection
error initializing AB database (_createABDatabaseTriggersAndIndicesAndDropFirst): %s
SELECT ROWID, ExternalIdentifier from ABStore where Type = %d OR Type = %d
%ld, 
%ld)
SELECT ROWID, ExternalIdentifier from ABPerson where StoreID in %@
UPDATE ABPerson set ExternalIdentifier = ? where ROWID = ?
SELECT ROWID, ExternalIdentifier from ABGroup where StoreID in %@
UPDATE ABGroup set ExternalIdentifier = ? where ROWID = ?
UPDATE ABStore set ExternalIdentifier = ? where ROWID = ?
SELECT Type from ABStore where ROWID = 0;
UPDATE ABStore set ROWID = (SELECT MAX(ROWID)+1 from ABStore) where ROWID = 0;
UPDATE ABStore set StoreInternalIdentifier = NULL where ROWID = (SELECT MAX(ROWID) from ABStore);
UPDATE ABGroup set StoreID = (SELECT MAX(ROWID) from ABStore) where StoreID = 0;
UPDATE ABPerson set StoreID = (SELECT MAX(ROWID) from ABStore) where StoreID = 0;
SELECT value from _SqliteDatabaseProperties where key = 'MeSourceID';
UPDATE _SqliteDatabaseProperties set value = (SELECT MAX(ROWID) from ABStore) where key = 'MeSourceID';
INSERT INTO ABStore (ROWID, Type, Enabled , StoreInternalIdentifier) VALUES('0', '0', '0', 'local');
Hiragana-Katakana
UPDATE ABPerson SET FirstPhonetic = ab_transform_string(FirstPhonetic, 0, null, ?), MiddlePhonetic = ab_transform_string(MiddlePhonetic, 0, null, ?),LastPhonetic = ab_transform_string(LastPhonetic, 0, null, ?),OrganizationPhonetic = ab_transform_string(OrganizationPhonetic, 0, null, ?);
ab_normalize_date
ab_repair_guid
ab_generate_guid
has_sort_key_prefix
ab_katakana_exclusively
ab_update_value_from_trigger
ab_transform_string
ab_is_store_allowed
ab_compare_phone_numbers
ab_allowed_preferred_contact
ab_collect_value_row_map
-- TRIGGER
int _abSqliteTraceCallback(unsigned int, void *, void *, void *)
sqlite trace [%p]: %s
sqlite profile: %llu ms, %s
_Bool _databaseCorrupted(CPSqliteDatabase *)
database may be corrupted [%p]
void _logDatabaseHeader(CPSqliteDatabase *)
Corrupt database %s connection fd %d is opened to %s
current
Corrupt database header:
database was deleted (%@)
image database was %@ (%@) 
deleted
not deleted
image database still has orphans
The main database was corrupt. Please attach sysdiagnose, AB logs and /tmp/AddressBook*
DELETE FROM ABMultiValueEntry WHERE parent_id IN (SELECT UID FROM ABMultiValue WHERE record_id = ? AND property+0 = ?);
DELETE FROM ABMultiValue WHERE record_id = ? AND property+0 = ?;
SELECT ROWID FROM ABMultiValueLabel WHERE value = ?;
INSERT INTO ABMultiValueLabel VALUES (?);
INSERT INTO ABMultiValue (record_id, property, label, identifier, value, guid) values (?,?,?,?,?,?);
INSERT INTO ABPhoneLastFour (multivalue_id, value) values (?,?);
SQL error
SELECT ROWID FROM ABMultiValueEntryKey WHERE value = ?;
INSERT INTO ABMultiValueEntryKey VALUES(?);
INSERT INTO ABMultiValueEntry (parent_id, key, value) values (?,?,?);
ABCDBContextSaveMultiValueSubEntry
[(id)value isKindOfClass:[NSString class]]
DROP INDEX IF EXISTS ABMultiValueRecordIDIndex;
DROP INDEX IF EXISTS ABMultiValueLabelIndex;
DROP INDEX IF EXISTS ABMultiValuePropertyValueIndex;
DROP INDEX IF EXISTS ABMultiValueGUIDIndex;
DROP TRIGGER IF EXISTS delete_phone_last_four;
CREATE INDEX IF NOT EXISTS ABMultiValueRecordIDIndex on ABMultiValue(record_id);
CREATE INDEX IF NOT EXISTS ABMultiValueLabelIndex ON ABMultiValue(label);
CREATE INDEX IF NOT EXISTS ABMultiValueGUIDIndex ON ABMultiValue(guid);
CREATE INDEX IF NOT EXISTS ABMultiValuePropertyValueIndex ON ABMultiValue(property, value COLLATE NOCASE);
CREATE INDEX IF NOT EXISTS ABMultiValueEntryKeyIndex ON ABMultiValueEntry(key);
CREATE INDEX IF NOT EXISTS ABMultiValueEntryParentIndex ON ABMultiValueEntry(parent_id);
CREATE INDEX IF NOT EXISTS ABPhoneLastFourIndex ON ABPhoneLastFour(value);
CREATE TRIGGER IF NOT EXISTS delete_phone_last_four AFTER DELETE ON ABMultiValue
BEGIN
DELETE FROM ABPhoneLastFour WHERE multivalue_id = OLD.UID;
END;
***ABCDBContextCreateMultiValueTriggersAndIndicesAndDropFirst failed
CREATE TABLE IF NOT EXISTS ABMultiValue (UID INTEGER PRIMARY KEY, record_id INTEGER, property INTEGER, identifier INTEGER, label INTEGER, value TEXT, guid TEXT NOT NULL DEFAULT (ab_generate_guid()), UNIQUE(guid));
CREATE TABLE IF NOT EXISTS ABMultiValueLabel (value TEXT, UNIQUE(value));
CREATE TABLE IF NOT EXISTS ABMultiValueEntry (parent_id INTEGER, key INTEGER, value TEXT, UNIQUE(parent_id, key));
CREATE TABLE IF NOT EXISTS ABMultiValueEntryKey (value TEXT, UNIQUE(value));
CREATE TABLE IF NOT EXISTS ABPhoneLastFour (multivalue_id INTEGER PRIMARY KEY, value TEXT);
CREATE TABLE IF NOT EXISTS ABPersonMultiValueDeletes (record_id INTEGER, property_id INTEGER, identifier INTEGER, sequence_number INTEGER, record_uid TEXT, identifier_uid TEXT);
***ABCDBContextCreateMultiValueTables failed
SELECT (SELECT value FROM ABMultiValueEntryKey WHERE ROWID = key), value FROM ABMultiValueEntry WHERE parent_id = ?;
Error fetching multivalue sub entries: %d
bundleIdentifiers
ignoring column with type %d
CFArrayRef ABCIteratePeopleMatchingStringWithCustomQueryPrefix(ABCDBContextRef, CFStringRef, CFStringRef, ABRecordRef, ABRecordRef, ABCPersonSortOrdering, _Bool, CPRecordStoreRowHandler, void *, CFStringRef, CFDictionaryRef)
AB search used the disabled FTS index. Please open a radar to PEP Contacts (New Bugs) with simulated crash report.
AB search used the disabled FTS index. Please open a radar to PEP Contacts (New Bugs).
 abp.ROWID IN (select member_id FROM ABGroupMembers WHERE group_id = ? AND member_type = 0) AND
 StoreID = ? AND
 StoreID IN (SELECT abs.RowID FROM ABStore abs, ABAccount aba WHERE abs.AccountID = aba.ROWID AND aba.AccountIdentifier = ?) AND
 abp.ROWID IN 
 ( SELECT rowid from ABPersonFullTextSearch WHERE ABPersonFullTextSearch MATCH ? ) 
(SELECT rowid from ABPersonFullTextSearch WHERE ABPersonFullTextSearch MATCH '
 OR 
:' || ? || '
SELECT ROWID, value FROM ABMultiValueLabel;
outerPerson
 outerPerson.StoreID in (select abs.ROWID from ABStore abs, ABAccount aba where abs.AccountID = aba.ROWID AND aba.AccountIdentifier = ?)
 WHERE
IntlUtility
/System/Library/PrivateFrameworks/IntlPreferences.framework/IntlPreferences
root
Type
ConstraintsPath
ExternalSyncTag
StoreInternalIdentifier
AccountID
Policy
Enabled
SyncData
MeIdentifier
Capabilities
LastSyncDate
INSERT OR IGNORE INTO ABStore (ROWID, Type, StoreInternalIdentifier) VALUES('0', '0', 'local');
CREATE TABLE IF NOT EXISTS ABStore (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, %s TEXT, %s TEXT, %s INTEGER, %s TEXT, %s TEXT, %s TEXT, %s TEXT, %s INTEGER DEFAULT %i, %s INTEGER DEFAULT 1, %s BLOB, %s INTEGER DEFAULT -1, %s INTEGER DEFAULT 0, %s TEXT NOT NULL DEFAULT (ab_generate_guid()), %s TEXT, UNIQUE(%s), UNIQUE(%s));
INSERT INTO ABStore (ROWID, Type, StoreInternalIdentifier) VALUES('0', '0', 'local');
DefaultStore
Enabled = ?
CFArrayRef ABAddressBookCopyArrayOfAllSourcesWithAccountIdentifier(ABCAddressBookRef, CFStringRef)
JOIN ABAccount AS aba WHERE abs.AccountID = aba.ROWID AND aba.AccountIdentifier = ?
ABPolicyRef ABSourceGetPolicy(ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllPeopleInAccountWithSortOrderingShowingPersonLinks(ABAddressBookRef, CFStringRef, ABPersonSortOrdering, _Bool)
CFArrayRef ABAddressBookCopyArrayOfAllPeopleInAccountWithSortOrdering(ABAddressBookRef, CFStringRef, ABPersonSortOrdering)
ABStore
ABAddressBookCreateOptionFamilyMemberAltDSID
ABAddressBookCreateOptionFamilyMemberACAccountID
ABChangeCallbackInfoInsertedPeople
ABChangeCallbackInfoUpdatedPeople
ABChangeCallbackInfoDeletedPeople
ABChangeCallbackInfoInsertedGroups
ABChangeCallbackInfoUpdatedGroups
ABChangeCallbackInfoDeletedGroups
ABDatabaseSavedDistributedNotification
ABAddressBookMeCardChangeDistributedNotification
SaveRequestIdentifier
void ABAddressBookSetValue(ABAddressBookRef, CFStringRef, CFStringRef)
%@, key=%@, value=%@
CFStringRef ABAddressBookCopyValue(ABAddressBookRef, CFStringRef)
%@, key=%@
value=%@
^[ 0-9]*%@ .*$
com.apple.Contacts.database-allow
BOOL _CurrentProcessHasDirectDatabaseAccessEntitlement()
Couldn't get entitlement value: %@
Contacts
IMCore
AddressBookLegacy.framework requires boolean entitlement: com.apple.Contacts.database-allow
void _VerifyDirectDatabaseAccessEntitlementPresence()_block_invoke
ABAddressBookRef ABAddressBookCreateWithDatabaseDirectory(CFStringRef)
directory=%@
ABAddressBookRef ABAddressBookCreateWithOptionsAndPolicy(CFDictionaryRef, ABCreatePolicy, CFErrorRef *)
options=%@, policy=%i, %@
policy = %i
com.apple.contacts.AddressBookLegacy
returning NULL ABAddressBookRef
%@, %@
ABAddressBookRef ABAddressBookCreateWithOptions(CFDictionaryRef, CFErrorRef *)
options=%@
ABAddressBookRef ABAddressBookCreate()
CFStringRef ABAddressBookCopyDatabaseDirectory(ABAddressBookRef)
databaseDirectory=%@
void ABAddressBookSetIsBackgroundProcess(ABAddressBookRef, _Bool)
void ABAddressBookRegisterYieldBlock(ABAddressBookRef, void (^)(void))
_Bool ABAddressBookSave(ABAddressBookRef, CFErrorRef *)
_Bool ABAddressBookHasUnsavedChanges(ABAddressBookRef)
_Bool ABAddressBookAddRecord(ABAddressBookRef, ABRecordRef, CFErrorRef *)
_Bool ABAddressBookRemoveRecord(ABAddressBookRef, ABRecordRef, CFErrorRef *)
CFStringRef ABAddressBookCopyUniqueIdentifier(ABAddressBookRef)
returning %@
uniqueIdentifier=%@
void ABAddressBookSetUniqueIdentifierToNULL(ABAddressBookRef)
CFStringRef ABAddressBookCopyLocalizedLabel(CFStringRef)
label=%@
localizedLabel=%@
CFStringRef ABAddressBookCopyLocalizedLabelAllowingAbbreviations(CFStringRef, _Bool)
label=%@, allowAbbrevations=%@
notFound
NonAbbreviated
CFDictionaryRef ABAddressBookCopyLocalizedStringsForLanguageArray(CFArrayRef)
languageArray=%@
strings
dictionary={
localized strings count = %ld
void ABAddressBookBeginExclusiveRead(ABAddressBookRef)
void ABAddressBookEndExclusiveRead(ABAddressBookRef)
void ABAddressBookProcessAddedRecords(ABAddressBookRef)
void ABProcessAddedImages(ABAddressBookRef)
void ABInvalidateCachedImages(ABAddressBookRef)
void ABAddressBookFlushStatementCache(ABAddressBookRef)
ABErrorDomain
ABSQLiteErrorDomain
_Bool ABAddressBookSaveWithConflictPolicy(ABAddressBookRef, ABConflictPolicy, CFErrorRef *)
%@, policy=%i, error=%p
CFArrayRef ABAddressBookCopyAllLabels(ABAddressBookRef)
labels=%@
CFArrayRef ABAddressBookCopyAllLabelsForProperty(ABAddressBookRef, ABPropertyID)
%@, property=%i
void ABAddressBookDeleteLabel(ABAddressBookRef, CFStringRef)
%@, label=%@
int ABAddressBookGetIntegerProperty(ABAddressBookRef, CFStringRef)
value=%i
void ABAddressBookSetIntegerProperty(ABAddressBookRef, CFStringRef, int)
%@, key=%@, value=%i
CFStringRef ABAddressBookCopyValueForProperty(ABAddressBookRef, CFStringRef)
void ABAddressBookSetValueForProperty(ABAddressBookRef, CFStringRef, CFStringRef)
int ABAddressBookGetSequenceNumber(ABAddressBookRef)
sequenceNumber=%i
int ABAddressBookGetNextSequenceNumber(ABAddressBookRef)
nextSequenceNumber=%i
int ABAddressBookGetImagesSequenceNumber(ABAddressBookRef)
ABChangesToNames
ABChangesToBirthdays
ABChangesToLabels
ABChangesToPhoneLabels
ABChangesToEmailLabels
ABChangesToMeCards
CFDictionaryRef ABAddressBookCopyChangesSinceSequenceNumber(ABAddressBookRef, int)
%@, sequenceNumber=%i
changes={
void ABInitialize(void)
ABSyncClientBeginningMultiSave
ABSyncClientFinishedMultiSave
ABRefreshDidStart
ABRefreshDidEnd
MeSourceID
_Bool ABAddressBookSetMeCard(ABRecordRef)
me=%@
CFArrayRef ABAddressBookCopyArrayOfAllMeCards(ABAddressBookRef)
meCards=%@
_Bool ABAddressBookSetMe(ABAddressBookRef, ABRecordRef)
%@, me=%@
ABRecordRef ABAddressBookCopyMe(ABAddressBookRef)
_Bool ABAddressBookSetBestMeIfNeeded(ABAddressBookRef, CFStringRef, CFStringRef, CFStringRef)
%@, first=%@, last=%@, email=%@
v28@?0@"ABSearchOperation"8@"NSArray"16B24
v32@?0@8Q16^B24
q24@?0@8@16
changed=%@
void ABAddressBookRequestAccessWithCompletion(ABAddressBookRef, ABAddressBookRequestAccessCompletionHandler)
_Bool ABAddressBookIsAvailable(void)
_Bool ABAddressBookIsNeverAvailable(void)
_Bool ABAddressBookForceNullDatabaseForAccessDeniedIsEnabled()
.GlobalPreferences
ABForceNullDatabaseForAccessDenied
override=%@
void ABAddressBookForceNullDatabaseForAccessDeniedSetEnabled(CFPropertyListRef)
CFDictionaryRef ABAddressBookGetSharedAddressFormatsDictionary(void)
Family/
CFStringRef ABAddressBookCopyDirectoryPathForDelegateWithAltDSID(CFStringRef)
error opening Family directory lock at path %@, errno %d
family.plist
Generation
Mappings
%@:%d
CFStringRef _ABAddressBookCopyMigratedDelegateDatabaseIdentifierIfMigrationNeeded(CFStringRef, CFStringRef, int)
migrating folder for deletage with altdsid %@ into mappings registry
error opening moving directory to path %@
deleted item at path %@ - it wasn't a directory but we expected one
error encountered while deleting item of unexpected type at path %@ - it wasn't a directory but we expected one. error: %@
void ABUnregisterAndPrepareToDeleteDelegateDatabasesExcludingAltDSIDs(CFArrayRef)
@16@?0@8
void ABPrepareForDeletionOrDeleteAllDelegateDatabasesExcludingPaths(CFArrayRef)
error fetching family directory contents %@:
void ABAddressBookPrepareDirectoryForDeletionOrDeleteIfPossibleAtPath(CFStringRef)
Database already marked for deletion but not yet eligible for unlink. Delete will not occur until this call is repeated on a subsequent system reboot.
void ABAddressBookDeleteDatabaseAtPath(CFStringRef)
could not delete database at path:%@ :%@
ABAddressBookDeleteDatabaseAtURL deleted database directory at URL: %@.
SELECT COUNT(*) FROM (SELECT NULL FROM ABPerson WHERE StoreID = 0 OR PersonLink != -1 LIMIT 1);
ABRecordID ABRecordGetRecordID(ABRecordRef)
ABRecordType ABRecordGetRecordType(ABRecordRef)
CFTypeRef ABRecordCopyOriginalValue(ABRecordRef, ABPropertyID)
CFTypeRef ABRecordCopyValue(ABRecordRef, ABPropertyID)
_Bool ABRecordSetValue(ABRecordRef, ABPropertyID, CFTypeRef, CFErrorRef *)
_Bool ABRecordRemoveValue(ABRecordRef, ABPropertyID, CFErrorRef *)
CFStringRef ABRecordCopyCompositeName(ABRecordRef)
void ABRecordShow(ABRecordRef)
_Bool ABRecordSetIntValue(ABRecordRef, ABPropertyID, int, CFErrorRef *)
int ABRecordGetIntValue(ABRecordRef, ABPropertyID)
CFStringRef ABRecordNameForProperty(ABRecordRef, ABPropertyID)
ABAddressBookRef ABRecordGetAddressBook(ABRecordRef)
Street
SubLocality
City
SubAdministrativeArea
State
Country
CountryCode
_$!<Work>!$_
_$!<Home>!$_
_$!<School>!$_
_$!<Other>!$_
_$!<Anniversary>!$_
_$!<Birthday>!$_
_$!<Mobile>!$_
_$!<Main>!$_
_$!<HomeFAX>!$_
_$!<WorkFAX>!$_
_$!<OtherFAX>!$_
_$!<Pager>!$_
iPhone
Apple Watch
_$!<Phone>!$_
_$!<Email>!$_
_$!<PostalAddress>!$_
_$!<AssistantPhone>!$_
_$!<Car>!$_
_$!<Radio>!$_
_$!<CompanyMain>!$_
MapsCardContentProvider
service
Yahoo
Jabber
GoogleTalk
Skype
Facebook
GaduGadu
username
identifier
_$!<HomePage>!$_
_$!<Father>!$_
_$!<Mother>!$_
_$!<Parent>!$_
_$!<Brother>!$_
_$!<Sister>!$_
_$!<Child>!$_
_$!<Friend>!$_
_$!<Spouse>!$_
_$!<Partner>!$_
_$!<Assistant>!$_
_$!<Manager>!$_
_$!<Son>!$_
_$!<Daughter>!$_
teamIdentifier
displayname
twitter
sinaweibo
gamecenter
facebook
myspace
linkedin
flickr
calendarIdentifier
year
month
isLeapMonth
PHOTO
APPLE-PERSONA
MONOGRAM
ANIMOJI
ABRecordRef ABPersonCreate(void)
ABPropertyType ABPersonGetTypeOfProperty(ABPropertyID)
CFStringRef ABPersonCopyLocalizedLowercasePropertyName(ABPropertyID)
LocalizedLowercaseProperties
CFStringRef ABPersonCopyLocalizedPropertyName(ABPropertyID)
contactsSortOrder
_Bool ABPersonSetImageData(ABRecordRef, CFDataRef, CFErrorRef *)
ABPersonImageFormat ABPersonGetDerivedFromFormatFromImageWithFormat(ABRecordRef, ABPersonImageFormat)
CFDataRef ABPersonCopyImageDataAndInvertedCropRect(ABRecordRef, ABPersonImageFormat, int *, int *, int *, int *)
CFDataRef ABPersonCopyImageDataAndCropRect(ABRecordRef, ABPersonImageFormat, int *, int *, int *, int *)
_Bool ABPersonSetImageDataAndCropRect(ABCRecordRef, ABPersonImageFormat, CFDataRef, int, int, int, int, CFErrorRef *)
_Bool ABPersonSetImageDataDerivedFromFormatAndReturnError(ABRecordRef, ABPersonImageFormat, ABPersonImageFormat, CFDataRef, CFErrorRef *)
CFDataRef ABPersonCopyImageData(ABRecordRef)
CFDataRef ABPersonCopyImageDataWithFormat(ABRecordRef, ABPersonImageFormat)
_Bool ABPersonHasImageData(ABRecordRef)
_Bool ABPersonRemoveImageData(ABRecordRef, CFErrorRef *)
CFComparisonResult ABPersonComparePeopleByName(ABRecordRef, ABRecordRef, ABPersonSortOrdering)
CFIndex ABAddressBookGetEmailCount(ABAddressBookRef)
CFIndex ABAddressBookGetPhoneNumberCountInSource(ABAddressBookRef, ABRecordRef)
CFIndex ABAddressBookGetPhoneNumberCount(ABAddressBookRef)
void ABPersonCopyArrayOfPhoneNumbersLabelsAndPeopleInRange(ABAddressBookRef, CFRange, CFArrayRef *, CFArrayRef *, CFArrayRef *)
CFArrayRef ABAddressBookCopyArrayOfAllEmailAddresses(ABAddressBookRef)
SELECT value from ABMultiValue where property = ?;
CFIndex ABAddressBookGetPersonCount(ABAddressBookRef)
CFIndex ABAddressBookGetPersonCountInSource(ABAddressBookRef, ABRecordRef)
ABRecordRef ABAddressBookGetPersonWithRecordID(ABAddressBookRef, ABRecordID)
CFArrayRef ABAddressBookCopyPeopleWithUUIDs(ABAddressBookRef, CFArrayRef)
CFArrayRef ABAddressBookCopyPeopleWithLinkIdentifiers(ABAddressBookRef, CFArrayRef)
CFArrayRef ABAddressBookCopyArrayOfAllPeople(ABAddressBookRef)
%@_inner
innerPerson
%@IsPreferredName = 1
%@ROWID IN (%@ UNION %@)
%@ROWID IN (%@)
CFArrayRef ABAddressBookCopyArrayOfPreferredNamePeopleForGroupsAndSourcesWithSortOrdering(ABAddressBookRef, CFArrayRef, CFArrayRef, ABPersonSortOrdering)
CFArrayRef ABAddressBookCopyArrayOfAllPreferredNamePeopleWithSortOrdering(ABAddressBookRef, ABPersonSortOrdering)
CFArrayRef ABAddressBookCopyPeopleWithName(ABAddressBookRef, CFStringRef)
void ABAddressBookMapPeopleMatchingString(ABAddressBookRef, CFStringRef, CFStringRef, ABRecordRef, ABRecordRef, ABPersonSortOrdering, _Bool, ABAddressBookMapPeopleCallbacks *, void *)
void ABPersonInvalidateImageData(ABAddressBookRef, ABImagePredicateFunction, void *)
void ABPersonInvalidateSpecificImageData(ABRecordRef, ABPersonImageFormat)
void ABPersonInvalidateAllImageData(ABRecordRef)
FirstSortLanguageIndex, FirstSortSection
LastSortLanguageIndex, LastSortSection
FirstSortLanguageIndex ASC, FirstSortSection ASC
LastSortLanguageIndex ASC, LastSortSection ASC
SELECT %@, COUNT() from ABPerson where rowid in (SELECT rowid FROM ABPerson WHERE personlink = -1 AND StoreID IN %@ UNION SELECT ab_allowed_preferred_contact(abp.rowid, abp.StoreID, abp.IsPreferredName, ? ) FROM ABPerson abp JOIN ABPersonLink abpl on abpl.rowid = abp.PersonLink WHERE abp.StoreID IN %@ GROUP BY abpl.rowid) GROUP BY %@ ORDER BY %@;
v24@?0Q8^B16
CFArrayRef ABCopyArrayOfPeopleAtOffset(ABAddressBookRef, ABRecordRef, ABPersonSortOrdering, int, int)
CFIndex ABAddressBookGetPreferredNamePeopleCount(ABAddressBookRef)
SELECT COUNT() FROM ABPerson WHERE ROWID IN (SELECT rowid FROM ABPerson WHERE personlink = -1 AND StoreID IN %@ UNION SELECT ab_allowed_preferred_contact(abp.rowid, abp.StoreID, abp.IsPreferredName, ? ) FROM ABPerson abp JOIN ABPersonLink abpl on abpl.rowid = abp.PersonLink WHERE abp.StoreID IN %@ GROUP BY abpl.rowid ) 
 WHERE ROWID IN (SELECT rowid FROM ABPerson WHERE personlink = -1 AND StoreID IN %@ UNION SELECT ab_allowed_preferred_contact(abp.rowid, abp.StoreID, abp.IsPreferredName, ? ) FROM ABPerson abp JOIN ABPersonLink abpl on abpl.rowid = abp.PersonLink WHERE abp.StoreID IN %@ GROUP BY abpl.rowid ) 
 LIMIT ? OFFSET ?
CFArrayRef ABCopyArrayOfPreferredNamePeopleAtOffset(ABAddressBookRef, ABPersonSortOrdering, int, int)
void ABPersonSetCompositeNameFormat(ABPersonCompositeNameFormat)
com.apple.AddressBook.PreferenceChanged
ABPersonCompositeNameFormat ABPersonGetCompositeNameFormat(void)
personNameOrderingForEdit
ABPersonEditNameFormat ABPersonGetEditNameFormat(void)
ABPersonCompositeNameFormat ABPersonGetCompositeNameFormatAndDelimiterForRecord(ABRecordRef, CFStringRef *)
CFArrayRef ABPersonCopyNamePieces(ABRecordRef, ABPersonSortOrdering, CFIndex *)
CFStringRef ABPersonCopyCompositeNameIgnoringOrganization(ABRecordRef, _Bool)
CFStringRef ABPersonCopyCompositeNameIgnoringOrganizationAndNickname(ABRecordRef, _Bool, _Bool)
ABRecordRef ABPersonCopy(ABRecordRef)
void ABPersonShow(ABRecordRef)
CFStringRef ABPersonCopyCompositeName(ABRecordRef)
CFStringRef ABPersonCopyCompositePhoneticName(ABRecordRef)
void ABPersonSetShortNameFormat(ABPersonShortNameFormat)
ABPersonShortNameFormat ABPersonGetShortNameFormat(void)
void ABPersonSetShortNameFormatEnabled(_Bool)
_Bool ABPersonGetShortNameFormatEnabled(void)
void ABPersonSetShortNamePreferNicknames(_Bool)
_Bool ABPersonGetShortNamePreferNicknames(void)
%@ %@
void ABPersonInitialize()
CFStringRef ABPersonCopySoundIdentifierForMultiValueIdentifierForIndividualContact(ABRecordRef, int)
void ABPersonSetSoundIdentifierForMultiValueIdentifier(ABRecordRef, int, CFStringRef)
CFComparisonResult ABPersonCompareNameOfPeople(ABRecordRef, ABRecordRef, ABPersonSortOrdering)
CFStringRef ABPersonNameForProperty(ABPropertyID)
ABRecordRef ABAddressBookFindPersonMatchingPhoneNumber(ABAddressBookRef, CFStringRef, ABMultiValueIdentifier *, CFStringRef *)
%@, phoneNumber=%@
ABRecordRef ABAddressBookFindPersonMatchingPhoneNumberWithCountry(ABAddressBookRef, CFStringRef, CFStringRef, ABMultiValueIdentifier *, CFStringRef *)
ABRecordRef ABAddressBookFindPersonMatchingPhoneNumberWithCountryAndHint(ABAddressBookRef, CFStringRef, CFStringRef, ABMultiValueIdentifier *, CFStringRef *, const char *)
CFArrayRef ABAddressBookCopyArrayOfUIDsMatchingPhoneNumberWithCountryAndHint(ABCAddressBookRef, CFStringRef, CFStringRef, CFArrayRef *, const char *)
ABRecordRef ABAddressBookFindPersonMatchingURL(ABAddressBookRef, CFStringRef, ABMultiValueIdentifier *)
ABRecordRef ABAddressBookFindPersonMatchingEmailAddress(ABAddressBookRef, CFStringRef, ABMultiValueIdentifier *)
CFArrayRef ABAddressBookCopyArrayOfUIDsMatchingEmailAddress(ABAddressBookRef, CFStringRef, CFArrayRef *, CFArrayRef *)
void ABAddressBookCopyPeopleAndIdentifiersMatchingName(ABAddressBookRef, CFStringRef, ABPersonSortOrdering, ABPropertyID, CFArrayRef *, CFArrayRef *)
void ABAddressBookCopyPeopleAndMultiValuePropertiesMatchingName(ABAddressBookRef, CFStringRef, ABPersonSortOrdering, ABPropertyID, CFArrayRef *, CFArrayRef *, CFArrayRef *)
CFArrayRef ABAddressBookCopyArrayOfAllPeopleMatching(ABAddressBookRef, CFStringRef, CFStringRef, ABRecordRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfUIDsMatchingExternalUUID(ABAddressBookRef, CFStringRef)
SELECT ROWID from ABPerson where ExternalUUID = ?;
ABRecordRef ABAddressBookFindPersonMatchingMultiValueUUID(ABAddressBookRef, CFStringRef, ABPropertyID *, ABMultiValueIdentifier *)
%@, multiValueUUID=%@
SELECT record_id, property, identifier from ABMultiValue where guid = ?;
ABRecordRef ABAddressBookCopyPersonMatchingInternalUUID(ABAddressBookRef, CFStringRef)
ABRecordRef ABAddressBookCopyPersonMatchingMapData(ABAddressBookRef, CFStringRef)
[^[:Hangul:]]
CFArrayRef ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifierAndAddressBook(ABRecordRef, CFStringRef, ABAddressBookRef)
WHERE PersonLink = ?
 AND StoreID IN (SELECT abs.rowid FROM ABStore abs, ABAccount aba WHERE abs.AccountID = aba.ROWID AND aba.AccountIdentifier = ?)
CFArrayRef ABPersonCopyArrayOfAllLinkedPeopleWithAccountIdentifier(ABRecordRef, CFStringRef)
CFArrayRef ABPersonCopyArrayOfAllLinkedPeople(ABRecordRef)
CFStringRef ABPersonCopyLinkUUID(ABRecordRef)
_Bool ABPersonSetLinkUUID(ABRecordRef, CFStringRef)
UPDATE ABPersonLink set guid = ? WHERE ROWID = ?;
_Bool ABPersonLinkPerson(ABRecordRef, ABRecordRef, CFErrorRef *)
Failure getting toPersonLinkUUID while linking contact %@ to %@
Failure getting personLinkUUID while linking contact %@ to %@
INSERT INTO ABPersonLink (ROWID, PreferredNamePersonID) VALUES (NULL, ?);
Failure getting linkUUID while linking contact %@ to %@
_Bool ABPersonUnlink(ABRecordRef, CFErrorRef *)
Failure getting linkUUID while unlinking contact %@ 
ABRecordRef ABPersonCopyPreferredLinkedPersonForName(ABRecordRef)
true
_Bool ABPersonIsReadonly(ABRecordRef)
ABRecordRef ABPersonCopyPreferredLinkedPersonForImage(ABRecordRef)
ABRecordRef ABPersonCopyPreferredLinkedPersonForImageIfExists(ABRecordRef)
void ABPersonSetPreferredLinkedPersonForImage(ABRecordRef)
void ABPersonSetPreferredLinkedPersonForName(ABRecordRef)
UPDATE ABPersonLink set PreferredNamePersonID = ? WHERE ROWID = ?;
Failure getting linkUUID while setting contact %@ as preferred name
CFArrayRef ABPersonCreateArrayOfAllPropertyIDs(void)
CFArrayRef ABPersonCopyPropertyIDsExcludingPropertyIDs(CFArrayRef, CFArrayRef)
void ABPersonMergePersonIntoPerson(ABRecordRef, ABRecordRef)
ABRecordRef ABPersonCreateUnifiedPerson(ABRecordRef)
CFMutableArrayRef ABPersonCreateArrayOfUnifiedPeople(CFArrayRef)
CFMutableArrayRef ABPersonCreateArrayOfUnifiedPeopleWithAccountIdentifier(CFArrayRef, CFStringRef)
com.apple.PeoplePicker
ABLocalizableDefaults
_LOCALIZABLE_
public.png
SELECT count() from ABMultiValue where property = ? AND record_id in (select ROWID from ABPerson where StoreID = ?);
SELECT count() from ABMultiValue where property = ?;
IFNULL(abpl.PreferredNamePersonID, %@.ROWID)
%@.ROWID
SELECT %@ FROM ABGroupMembers abgm JOIN ABPerson %@ ON abgm.member_id = %@.ROWID LEFT OUTER JOIN ABPersonLink abpl ON %@.PersonLink = abpl.ROWID WHERE abgm.group_id IN (%@) AND abgm.member_type = 0
SELECT %@ FROM ABPerson %@ LEFT OUTER JOIN ABPersonLink abpl ON %@.PersonLink = abpl.ROWID WHERE %@.StoreID IN (%@)
NSPersonNameComponentsFormatterPreferences
WHERE %@ = ?
 JOIN ABPersonLink abl ON abp.PersonLink = abl.ROWID WHERE (abp.personLink = ? AND abl.PreferredNamePersonID = abp.ROWID)
 JOIN ABPersonLink abl ON abp.PersonLink = abl.ROWID WHERE (abp.personLink = ? AND abl.PreferredImagePersonID = abp.ROWID)
ABPropertyType ABMultiValueGetPropertyType(ABMultiValueRef)
CFIndex ABMultiValueGetCount(ABMultiValueRef)
CFTypeRef ABMultiValueCopyValueAtIndex(ABMultiValueRef, CFIndex)
CFArrayRef ABMultiValueCopyArrayOfAllValues(ABMultiValueRef)
CFStringRef ABMultiValueCopyLabelAtIndex(ABMultiValueRef, CFIndex)
CFIndex ABMultiValueGetIndexForIdentifier(ABMultiValueRef, ABMultiValueIdentifier)
ABMultiValueIdentifier ABMultiValueGetIdentifierAtIndex(ABMultiValueRef, CFIndex)
CFStringRef ABMultiValueCopyUUIDAtIndex(ABMultiValueRef, CFIndex)
CFIndex ABMultiValueGetFirstIndexOfValue(ABMultiValueRef, CFTypeRef)
CFIndex ABMultiValueGetFirstIndexOfValueWithCallback(ABMultiValueRef, CFTypeRef, CFArrayEqualCallBack)
CFIndex ABMultiValueGetFirstIndexOfLabel(ABMultiValueRef, CFStringRef)
ABMutableMultiValueRef ABMultiValueCreateMutable(ABPropertyType)
ABMutableMultiValueRef ABMultiValueCreateMutableCopy(ABMultiValueRef)
void ABMultiValueSetImmutable(ABMultiValueRef)
_Bool ABMultiValueAddValueAndLabel(ABMutableMultiValueRef, CFTypeRef, CFStringRef, ABMultiValueIdentifier *)
ABMultiValueAddValueAndLabel
ABMultiValue.c
((ABCMultiValue *)multiValue)->flags.isMutable
_Bool ABMultiValueInsertValueAndLabelAtIndex(ABMutableMultiValueRef, CFTypeRef, CFStringRef, CFIndex, ABMultiValueIdentifier *)
_Bool ABMultiValueInsertValueAndLabelAndUUIDAtIndex(ABMutableMultiValueRef, CFTypeRef, CFStringRef, CFStringRef, CFIndex, ABMultiValueIdentifier *)
ABMultiValueInsertValueAndLabelAndUUIDAtIndex
_Bool ABMultiValueRemoveValueAndLabelAtIndex(ABMutableMultiValueRef, CFIndex)
ABMultiValueRemoveValueAndLabelAtIndex
_Bool ABMultiValueReplaceValueAtIndex(ABMutableMultiValueRef, CFTypeRef, CFIndex)
ABMultiValueReplaceValueAtIndex
_Bool ABMultiValueReplaceLabelAtIndex(ABMutableMultiValueRef, CFStringRef, CFIndex)
ABMultiValueReplaceLabelAtIndex
_Bool ABMultiValueSetPrimaryIdentifier(ABMutableMultiValueRef, ABMultiValueIdentifier)
ABMultiValueSetPrimaryIdentifier
ABMultiValueRef ABMultiValueCreate(ABPropertyType)
ABMultiValueRef ABMultiValueCreateCopy(ABMultiValueRef)
_Bool ABMultiValueInsertAndCreateIdentifier(ABMutableMultiValueRef, CFTypeRef, CFStringRef, CFIndex, CFStringRef, ABMultiValueIdentifier *, _Bool)
ABMultiValueInsertAndCreateIdentifier
void ABMultiValueShow(ABMultiValueRef)
void ABMultiValueLoad(ABRecordRef, ABPropertyID, CPSqliteConnection *)
void ABMultiValueBatchLoad(CFArrayRef, ABPropertyID, ABAddressBookRef)
void ABMultiValueSave(ABRecordRef, ABPropertyID, CPSqliteConnection *)
B32@?0^v8^v16r^^v24
_Bool ABMultiValueAddValueAndLabelIfUnique(ABMutableMultiValueRef, CFTypeRef, CFStringRef, _Bool, ABMultiValueUniqueInsertionComparator)
ABMultiValueAddValueAndLabelIfUnique
CFTypeID ABMultiValueGetTypeID(void)
void ABMultiValueEnumerateWithBlock(ABMultiValueRef, ABMultiValueEnumeratorBlock)
ABRecordRef ABGroupCreate()
CFArrayRef ABGroupCopyArrayOfAllMembers(ABRecordRef)
CFArrayRef ABGroupCopyArrayOfAllMembersWithSortOrdering(ABRecordRef, ABPersonSortOrdering)
_Bool ABGroupAddMember(ABRecordRef, ABRecordRef, CFErrorRef *)
_Bool ABGroupRemoveMember(ABRecordRef, ABRecordRef, CFErrorRef *)
ABRecordRef ABAddressBookGetGroupWithRecordID(ABAddressBookRef, ABRecordID)
CFArrayRef ABAddressBookCopyGroupsWithUUIDs(ABAddressBookRef, CFArrayRef)
CFIndex ABAddressBookGetGroupCount(ABAddressBookRef)
CFIndex ABAddressBookGetGroupCountInSource(ABAddressBookRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllGroups(ABAddressBookRef)
CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithSortOrdering(ABAddressBookRef, ABGroupSortOrdering)
CFArrayRef ABGroupCopyArrayOfAllGroupsWithMembersOfTypeWithUUIDs(ABAddressBookRef, ABRecordType, _Bool, CFArrayRef)
CFArrayRef ABGroupCopyArrayOfAllSubgroups(ABRecordRef)
CFArrayRef ABGroupCopyArrayOfAllMembersAndSubgroups(ABRecordRef)
_Bool ABGroupAddSubgroup(ABRecordRef, ABRecordRef)
_Bool ABGroupRemoveSubgroup(ABRecordRef, ABRecordRef)
void ABGroupDelete(ABRecordID, ABRecordRef, CPSqliteConnection *)
CFStringRef ABGroupCopyCompositeName(ABRecordRef)
void ABGroupInitialize()
ABPropertyType ABGroupGetTypeOfProperty(ABPropertyID)
CFStringRef ABGroupNameForProperty(ABPropertyID)
X-APPLE-GUARDIAN-WHITELISTED
SELECT ROWID, ExternalRepresentation from ABPerson where ExternalRepresentation NOT NULL;
+[ABDowntimeWhitelistMigrator unknownPropertiesFromExternalRepresentation:]
Error trying to decode externalRepresentation: %@
Exception trying to decode externalRepresentation: %@
+[ABDowntimeWhitelistMigrator externalRepresentationFromUnknownProperties:]
Exception trying to encode externalRepesentation: %@
UPDATE ABPerson set DowntimeWhitelist = ?, ExternalRepresentation = ? where ROWID = ?;
ABRecordRef ABSourceCreate()
ABRecordRef ABAddressBookGetAccountForSource(ABAddressBookRef, ABRecordRef)
_Bool ABAddressBookSetAccountForSource(ABAddressBookRef, ABRecordRef, ABRecordRef, CFErrorRef *)
ABRecordRef ABAddressBookCopyLocalSource(ABAddressBookRef)
ABRecordRef ABAddressBookCopyDefaultSourceIsPersistableFallback(ABAddressBookRef, BOOL *)
Actual default source %@
is not valid
Found another source in the same account as invalid default. Using %@ instead.
Found another syncing source to use as default source: %@
Failed to find a valid default source, returning the local source
void ABAddressBookSetDefaultSource(ABAddressBookRef, ABRecordRef, _Bool)
Setting default source to %i
void ABAddressBookCheckDefaultSourceIntegrityAndUpdateIfNeeded(ABAddressBookRef)
Actual default source is invalid
The local source is the persistable fallback for default source
Enabling the disabled local source to use as the default source
Persisting the non-local source as the default source
ABRecordRef ABAddressBookGetSourceWithRecordID(ABAddressBookRef, ABRecordID)
CFArrayRef ABAddressBookCopySourcesWithUUIDs(ABAddressBookRef, CFArrayRef)
Enabled = 1
StoreID != %d
CFArrayRef ABAddressBookCopyArrayOfAllSourcesIncludingDisabledSources(ABAddressBookRef, _Bool)
CFArrayRef ABAddressBookCopyArrayOfAllSources(ABAddressBookRef)
AND store.Enabled = 1
SELECT store.rowid from ABStore store LEFT JOIN ABAccount account on store.AccountID = account.ROWID WHERE ab_is_store_allowed(account.AccountIdentifier, store.type, ? ) = 1 %@;
ABRecordRef ABAddressBookCopySourceWithAccountAndExternalIdentifiers(ABAddressBookRef, CFStringRef, CFStringRef)
JOIN ABAccount AS aba WHERE abs.AccountID = aba.ROWID AND abs.ExternalIdentifier = ? AND aba.AccountIdentifier = ?
WHERE ExternalIdentifier = ?
UPDATE ABStore SET StoreInternalIdentifier = ? WHERE EXISTS (SELECT UntaggedStoreCount, LocalStoreCount, TotalStoreCount FROM ((SELECT COUNT() AS UntaggedStoreCount FROM ABStore WHERE StoreInternalIdentifier IS NULL), (SELECT COUNT() AS LocalStoreCount FROM ABStore WHERE StoreInternalIdentifier = "local"), (SELECT COUNT() AS TotalStoreCount FROM ABStore)) WHERE UntaggedStoreCount = 1 AND LocalStoreCount = 1 AND TotalStoreCount = 2) AND StoreInternalIdentifier IS NULL;
INSERT INTO ABStore (StoreInternalIdentifier, Type) SELECT ?, ? WHERE EXISTS (SELECT StoreCount FROM (SELECT COUNT() as StoreCount from ABStore where ROWID != 0) where StoreCount = 0);
WITH CardDAVStore AS (SELECT ROWID FROM ABStore WHERE StoreInternalIdentifier = ? ) INSERT INTO _SqliteDatabaseProperties(key, value) VALUES("DefaultStore", (SELECT * FROM CardDAVStore)) ON CONFLICT(key) DO UPDATE SET value = (SELECT * from CardDAVStore);
ABRecordRef ABPersonCreateInSourceAndReturnError(ABRecordRef, CFErrorRef *)
ABRecordRef ABGroupCreateInSource(ABRecordRef)
ABRecordRef ABPersonCopySource(ABRecordRef)
ABRecordRef ABGroupCopySource(ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllPeopleInSource(ABAddressBookRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllPeopleInSourceWithSortOrdering(ABAddressBookRef, ABRecordRef, ABPersonSortOrdering)
CFArrayRef ABAddressBookCopyArrayOfAllGroupsInSource(ABAddressBookRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllPeopleWithExternalIdentifierInSource(ABAddressBookRef, CFStringRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllPeopleWithExternalIdentifiersInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithExternalIdentifierInSource(ABAddressBookRef, CFStringRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithExternalIdentifiersInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllPeopleWithExternalUUIDInSource(ABAddressBookRef, CFStringRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllPeopleWithExternalUUIDsInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithExternalUUIDInSource(ABAddressBookRef, CFStringRef, ABRecordRef)
CFArrayRef ABAddressBookCopyArrayOfAllGroupsWithExternalUUIDsInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)
void ABAddressBookClearExternalIdentifiersInRecordsWithSource(ABAddressBookRef, ABRecordRef)
ABPropertyType ABSourceGetTypeOfProperty(ABPropertyID)
SELECT ROWID from %s where StoreID = %i;
, ImageURI = NULL
, DowntimeWhitelist = NULL
UPDATE %s SET StoreID = %i, ExternalIdentifier = NULL, ExternalModificationTag = NULL%@%@ WHERE StoreID = %i;
, ExternalUUID = NULL
UPDATE %s SET StoreID = %i, ExternalIdentifier = NULL, ExternalModificationTag = NULL%@%@%@ WHERE ROWID = %i;
_Bool ABAddressBookMovePersonToSource(ABAddressBookRef, ABRecordRef, ABRecordRef, _Bool, CFErrorRef *)_block_invoke
removeSyncImagesForRecord returned an error while moving contacts between sources. Continuing with move anyway.
B48@?0^{?={__CFRuntimeBase=QAQ}^{CPRecordStore}^{CPRecordStore}^{__CFString}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFString}^{__CFString}{_opaque_pthread_mutex_t=q[56c]}^{__CFArray}^{__CFArray}^{__CFArray}^{__CFArray}^{__CFArray}^{__CFDictionary}^{UCollator}^{UCollator}^{__CFString}^{__CFString}^{__CFStringTokenizer}^{__CFString}^{__CFString}C^{__CFArray}CC@?{_opaque_pthread_mutex_t=q[56c]}^{__CFString}d^{__CFString}^{?}{__ABBookflags=b1b1b8b1b1b1b1b1b1b1b1b1b1b1b1b1b1}}8^{CPSqliteConnection=^{CPSqliteDatabase}^{sqlite3}^{__CFDictionary}^{__CFDictionary}^v^?^?^vIB}16^v24^v32^^{__CFError}40
_Bool ABAddressBookMoveAllRecordsInSourceToSource(ABAddressBookRef, ABRecordRef, ABRecordRef, CFErrorRef *)
_Bool ABSourceSetMe(ABRecordRef, ABRecordRef, CFErrorRef *)
ABRecordRef ABSourceGetMe(ABRecordRef)
_Bool ABSourceIsRemote(ABRecordRef)
_Bool ABAddressBookTrimWhitespaceFromPersonPropertyIDsInSource(ABAddressBookRef, CFArrayRef, ABRecordRef)
void ABSourceSetShouldIgnoreCapabilitiesRestrictions(ABRecordRef, _Bool)
_Bool ABSourceIsReadonly(ABRecordRef)
_Bool ABSourceIsContentReadonlyInCapabilityRestrictions(ABRecordRef)
_Bool ABSourceIsContentReadonlyIncludingGuardianRestrictions(ABRecordRef, _Bool)
void ABSourceSetContentReadonly(ABRecordRef, _Bool)
_Bool ABSourceAreFoldersReadonlyInCapabilityRestrictions(ABRecordRef)
_Bool ABSourceAreFoldersReadonly(ABRecordRef)
void ABSourceSetFoldersReadonly(ABRecordRef, _Bool)
_Bool ABAddressBookMoveRecordToSource(ABAddressBookRef, ABRecordRef, ABRecordRef, RecordTypeSpecificMoveWork, _Bool, CFErrorRef *)
_Bool ABPolicyShouldSetValueForRecordType(ABPolicyRef, ABRecordType, ABPropertyID, CFTypeRef, _Bool *, CFErrorRef *)
context-type
context-data
ABPolicyCreateWithCoder
ABPolicy.m
propertyList != NULL
%@::%@
ABPolicy
version
unified
is-organization
first-name
last-name
organization-name
carddav-uuids
phone-numbers
email-addresses
contact-identifier
ABRecordRef _findPersonWithWeightSearchExcludesPeopleWithExternalUUIDs(ABAddressBookRef, CFDictionaryRef, BOOL)
Activity continuity - Using preferred linked person, recordID = %i
Activity continuity - Failed to find person
ABRecordRef _findPersonByInternalUUID(ABAddressBookRef, NSDictionary *)
Activity continuity - Found person with internal UUID = %@, recordID = %i
ABRecordRef _findPersonByExternalUUID(ABAddressBookRef, NSDictionary *)
Activity continuity - Found person with external UUID = %@, recordID = %i
ABRecordRef _findPersonByWeightedSearch(ABAddressBookRef, NSDictionary *, BOOL)
Activity continuity - Found %lu person(s) by weighted search, recordIDs = %@
Activity continuity - Found person by weighted search, recordID = %i, matchCount = %i
UnsupportedAttributes
MultiValueRestrictions
SupportedLabels
PreferredLabels
Multigroups
MaximumNumber
UnsupportedValueKeys
OverrideReadonly
CFDictionaryRef ABCreateAddressDictionaryWithString(CFStringRef)
FullAddress
/System/Library/PrivateFrameworks/DataDetectorsCore.framework/DataDetectorsCore
Failed to load DataDetectorsCore.framework (%s)
DDScannerCreateWithType
DDScannerCopyResults
DDScannerScanString
DDResultGetSubResults
DDResultGetType
DDResultGetMatchedString
DDResultGetRange
Failed to load some symbols from DataDetectorsCore.framework (%s)
ZipCode
 abp.ROWID IN (select member_id FROM ABGroupMembers WHERE group_id = ? AND member_type = 0)
 StoreID = ?
 StoreID IN (SELECT abs.RowID FROM ABStore abs, ABAccount aba WHERE abs.AccountID = aba.ROWID AND aba.AccountIdentifier = ?)
ABPredicate %p - person in group (%i %@), store (%i %@), account (%@)
ABNamePredicate.m
Should not call [ABNamePredicate group].  Uses [ABNamePredicate groups] instead.
Should not call [ABNamePredicate source].  Uses [ABNamePredicate sources] instead.
Should have address book before attempting to use [ABNamePredicate setAccountIdentifier:].  Or preferably, use [ABNamePredicate setSources:].
Should not call [ABNamePredicate accountIdentifier].  ABNamePredicate is source based rather than account based.
v32@?0@"NSString"8Q16^B24
RankResults_%d.Rank
RankResults_%d.MatchedColumns
RankResults_%d.MatchedSnippet
 MATCH ' 
%@:' || ? || '
LEFT JOIN 
(select ROWID as RankRow, ab_cf_tokenizer_namerank(matchinfo(ABPersonFullTextSearch), ? ) as Rank, ab_cf_tokenizer_matched_properties(matchinfo(ABPersonFullTextSearch), ? ) as MatchedColumns, 1 as HasFTSMatch from ABPersonFullTextSearch join ABPerson on ABPerson.rowid=ABPersonFullTextSearch.rowid WHERE ABPersonFullTextSearch.Organization MATCH ? and Kind=%@
 UNION 
select ROWID as RankRow, ab_cf_tokenizer_namerank(matchinfo(ABPersonFullTextSearch) , ? ) as Rank, ab_cf_tokenizer_matched_properties(matchinfo(ABPersonFullTextSearch), ? ) as MatchedColumns, 1 as HasFTSMatch from ABPersonFullTextSearch join ABPerson on ABPerson.rowid=ABPersonFullTextSearch.rowid WHERE ABPersonFullTextSearch 
 AND Kind=%@)
(select fts.ROWID as RankRow, ab_cf_tokenizer_namerank(matchinfo(ABPersonFullTextSearch), ? ) as Rank, ab_cf_tokenizer_matched_properties(matchinfo(ABPersonFullTextSearch), ? ) as MatchedColumns, %@ 1 as HasFTSMatch from ABPersonFullTextSearch fts 
fts.rowid IN ( 
 ) AND
where %@ ABPersonFullTextSearch MATCH ' ' || ? || ' 
 OR (
 ' || ? || ' 
 AS RankResults_%d ON abp.ROWID=RankResults_%d.RankRow 
SupplementalCompositeNameTerms
 RankResults_%d.HasFTSMatch = 1 
abp.ROWID in (select abs.person_id from ABPersonSearchKey abs WHERE
##&%@%@ 
##&%@ 
ABNamePredicate %p - Name matching <%@> - Match whole words <%@> - Match name only <%@> - Match preferred name <%@> - Sources <%@> - Groups <%@>
 FROM ABPerson abp 
WHERE 
 GROUP BY (
ORDER BY
%@%@ DESC %@
 ORDER BY 
 GROUP BY 
%@%@%@
ABPredicate.m
Only address book specific predicates and compound predicates are supported
ABPredicate (%@) %p
, %@
-[ABPredicate bindString:toStatement:withBindingOffset:]
Binding error at index %d
abPredicateEval
relevance
matchedProperties
matchedTerms
excerpt
excerptEmphasized
-[ABValuePredicate isValid]
Equality and inequalities are the only supported comparisons for date properties
Date properties can only be matched with dates
Equality and prefix are the only supported comparison for the phone property.
Phone numbers can only be compared to strings
Dictionary properties like <%@> can only be compared to dictionaries or strings
abv.value
LEFT OUTER JOIN ABMultiValue abv ON abp.ROWID = abv.record_id
JOIN ABMultiValue abv ON abp.ROWID = abv.record_id
BETWEEN ? AND ?
IS NULL
LIKE ?
(abv.ROWID IN (
 INTERSECT 
(SELECT rowid FROM ABPersonFullTextSearch WHERE %@ MATCH ? )
(SELECT ROWID FROM ABPerson)
SELECT parent_id FROM ABMultiValueEntry mve JOIN ABMultiValueEntryKey mvk NOT INDEXED ON mve.key = mvk.rowid WHERE mve.ROWID IN (SELECT ROWID FROM ABMultiValueEntry WHERE parent_id IN (SELECT UID FROM ABMultiValue WHERE record_id IN %@  )) AND mvk.value = ? AND mve.value LIKE ?
((SELECT COUNT() FROM ABMultiValue JOIN ABMultiValueEntry abve ON abve.parent_id = abv.UID WHERE (abp.ROWID = abv.record_id AND abv.property+0 = ? AND abve.value %@) LIMIT 1) > 0)
value COLLATE NOCASE
CAST(%@ AS NUMERIC)
ROWID IN (SELECT rowid FROM ABPersonFullTextSearch fts WHERE fts.%@ MATCH ? )
ROWID IN (SELECT abv.record_id FROM ABPersonFullTextSearch fts JOIN ABMultiValue abv ON abv.record_id = fts.rowid WHERE fts.%@ MATCH ? AND abv.%@ %@)
ROWID IN (select record_id from ABMultiValue where property = ? and %@ %@)
ROWID IN (SELECT rowid FROM ABPersonFullTextSearch WHERE %@ MATCH ? )
ROWID IN (SELECT rowid FROM ABPersonFullTextSearch WHERE %@ MATCH ? AND %@ %@)
##&%@%@%@
equal
prefix
suffix
contains
greater than
less than
ABPredicate %p - Value matching (%@): %@ %@
ABPredicate %p - Phone matching <%@> (%@)
((SELECT COUNT() FROM ABMultiValue WHERE (abp.ROWID = record_id AND abPredicateEval(?, ?, value) AND property+0 = ?) LIMIT 1) > 0)
CPSqlitePhoneNumberContainsAlphaCharacters: wrong number of arguments
abp.ROWID
abv.property = ?
 is not NULL
com.apple.addressbook.searchoperation.runloop.mode
+[ABPersonLinker startAutoLinkingNewPeopleInAddressBook:inProcess:]
[ABPersonLinker] startAutoLinkingNewPeopleInAddressBook:%@ inProcess:%i
ABPersonLinker.m
Use (id)initWithAddressBook:(ABAddressBookRef)addressBook instead of (id)init.
 LIKE ? AND 
 IS NULL AND 
%@ = %@
Wrong kind of person, expected an organization
WHERE Organization LIKE ? AND Kind = 1
-[ABPersonLinker makeLinksForAddedPeople:inInitialLinking:countingOuterIterations:detectedLinkCount:]
[ABPersonLinker] (%@) makeLinksForAddedPeople %ld inInitialLinking %i peopleToLink %ld
[ABPersonLinker] (%@) person %i %@, otherPeopleinDatabase %ld, otherNewlyAddedPeople %ld
[ABPersonLinker] (%@) person %i %@, personLinkId %i
PersonLinkerLastProcessedPerson
-[ABPersonLinker removeAllLinks]
[ABPersonLinker] %@: removeAllLinks on %ld people
WHERE ROWID > ? ORDER BY ROWID LIMIT ?
-[ABPersonLinker linkRecentlyAddedPeopleWithLimit:]
[ABPersonLinker] (%@) link recently added people with last autolinked person ID %i, limit %ld, number of people found %ld
-[ABPersonLinker linkNewlyAddedPerson:]
[ABPersonLinker] (%@) link newly added person %@
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
kbdSettings
defaultKbdSettings
CFStringRef ABAddressCopyCountryCodeForCountryName(CFStringRef)
countryName=%@
countryCode=%@
URL_FORMAT
COUNTRY
ABUse21vCardFormat
AB21vCardEncoding
\n\n
ABPrivateVCardFieldsEnabled
com.apple.AddressBook
ABPrivateVCardFields
ABIncludeNotesInVCard
ABIncludeREVInVCard
ABIncludePhotosInVCard
;type=WORK
WORK
;type=HOME
HOME
;type=OTHER
OTHER
VOICE
CELL
IPHONE
APPLEWATCH
MAIN
PAGER
X-ABLabel:
%0*li
CALSCALE=%@:
item%ld
;type=
;type=pref
X-AIM
X-JABBER
X-MSN
X-YAHOO
X-ICQ
X-MS-IMADDRESS
;x-teamidentifier=
;x-bundleidentifiers=
;x-userid=
IMPP
;X-SERVICE-TYPE=%@
InstantMessageURLSchemes
:x-apple
;CHARSET=
X-SOCIALPROFILE
;type=%@
;x-user=%@
;x-userid=%@
;x-displayname=%@
;x-teamidentifier=%@
com.apple.activityalert.call
sound
vibration
ignoreMute
com.apple.activityalert.text
call
text
X-ACTIVITY-ALERT:
v32@?0@8@16^B24
LATIN1:
MACINTOSH:
UTF-8:
LATIN1
MACINTOSH
UTF-8
BEGIN:VCARD
VERSION:2.1
NICKNAME
X-MAIDENNAME
X-PHONETIC-FIRST-NAME
X-PRONUNCIATION-FIRST-NAME
X-PHONETIC-MIDDLE-NAME
X-PRONUNCIATION-MIDDLE-NAME
X-PHONETIC-LAST-NAME
X-PRONUNCIATION-LAST-NAME
X-PHONETIC-ORG
X-PRONUNCIATION-ORG
TITLE
EMAIL;INTERNET
NOTE
BDAY;
value=date:
X-ABRELATEDNAMES
REV:
X-ALTBDAY;
END:VCARD
-[ABVCardRecord _21vCardRepresentationAsData]
-[ABPerson vCardRepresentation]: %@
-//Apple Inc.//iOS %@//EN
CATEGORIES
VERSION:3.0
PRODID:
NICKNAME:
X-MAIDENNAME:
X-PHONETIC-FIRST-NAME:
X-PRONUNCIATION-FIRST-NAME:
X-PHONETIC-MIDDLE-NAME:
X-PRONUNCIATION-MIDDLE-NAME:
X-PHONETIC-LAST-NAME:
X-PRONUNCIATION-LAST-NAME:
ORG:
X-PHONETIC-ORG:
X-PRONUNCIATION-ORG:
TITLE:
EMAIL;type=INTERNET
X-ABADR
X-APPLE-SUBLOCALITY
X-APPLE-SUBADMINISTRATIVEAREA
NOTE:
;VND-63-MEMOJI-DETAILS=%@
;%@;VALUE=uri:
;VALUE=uri:
JPEG
TIFF
;ENCODING=b
;TYPE=%@
-[ABVCardRecord _copyVCardRepresentationAsStringIncludeExternalProperties:withPhoto:extraPhotoParameters:includePrivateData:]
Discarding corrupted image data
X-ABDATE
X-ABShowAs:COMPANY
UID:
Error trying to decode external representation: %@
Exception trying to decode external representation: %@
X-APPLE-MAPS-DATA:
X-APPLE-GUARDIAN-WHITELISTED:true
X-APPLE-GUARDIAN-WHITELISTED:false
X-IMAGETYPE:
X-IMAGEHASH:
X-ADDRESSBOOKSERVER-KIND:group
-[ABVCardRecord _copyGroupVCardRepresentationAsStringIncludeExternalProperties:]
X-ADDRESSBOOKSERVER-KIND
X-ADDRESSBOOKSERVER-MEMBER
X-ADDRESSBOOKSERVER-MEMBER:urn:uuid:
-[ABGroup vCardRepresentation]: %@
ABNoToken
ABEOF
ABLF
ABCR
ABERROR
????
-[ABVCardLexer nextTokenPeakSingle:length:]
vCard Syntax Error, character: %d : %c
-[ABVCardLexer nextTokenPeakUnicode:length:]
BEGIN
VCARD
VERSION
token
com.apple.dataaccess.dataaccessd
X-ABLabel
X-SOCIALPROFILE-ABUSERID
x-teamidentifier
x-bundleidentifiers
x-userid
x-ueserid
Either identifier must be kABPersonSoundIdentifierOther or alert and activity must be non nil
TYPE
PREF
x-user
x-displayname
type
SERVICE-TYPE
X-SERVICE-TYPE
X-TEAMIDENTIFIER
X-BUNDLEIDENTIFIERS
X-USERID
InstantMessageCanonicalNames
false
v24@?0@"NSString"8@"NSDictionary"16
Zulu
%a, %b %e, %Y
CALSCALE
(null)
COMPANY
X-APPLE-OL
X-PHONETIC-COMPANY-NAME
LABEL
QUOTED-PRINTABLE
BASE64
CHARSET
UTF-7
-[ABVCardParser parseItem]
%@ is an invalid encoding
ENCODING
X-USER
X-DISPLAYNAME
X-ABCROP-RECTANGLE
VND-63-MEMOJI-DETAILS
Malformed TEL
Malformed ADR
Malformed ORG
Malformed ADD
EMAIL
Malformed EMAIL
Malformed X-AIM
Malformed X-MSN
Malformed X-ICQ
ABClipRect_1
Malformed N
Malformed VERSION
X-ABUID
Malformed X-YAHOO
BDAY
Malformed BDAY
Malformed IMPP
Malformed NICKNAME
Malformed X-JABBER
Malformed ABDATE
X-ABOrder
X-ABPhoto
X-ALTBDAY
Malformed X-ALTBDAY
X-ABShowAs
X-IMAGETYPE
X-IMAGEHASH
Malformed X-MS-IMADDRESS
X-ACTIVITY-ALERT
Malformed X-ACTIVITY-ALERT
X-APPLE-MAPS-DATA
Malformed X-APPLE-GUARDIAN-WHITELISTED
X-ADDRESSBOOKSERVER-PHONEME-DATA
LOGO
SOUND
PRODID
SORT-STRING
-[ABVCardParser importToValueSetter:]
Malformed BEGIN
Malformed :
Malformed VCARD
Malformed space after EOL
Malformed EOL
failed to import vcard:
failed to import vcard, file too large to log (actual size %lu)
-[ABVCardParser peopleAndProperties:]
Aborting vCard parsing due to import errors.
-[ABVCardParser sortedPeopleAndProperties:]
Aborting vCard sorting and returning 0 contact due to import errors.
Aborting vCard sorting and returning 0 contact due to sorting being too long.
-[ABVCardCardDAVParser importToPerson:removeExistingProperties:]
Exception trying to encode unknown attributes for external representation: %@
-[ABVCardCardDAVParser importToGroup:removeExistingProperties:]
-[ABVCardCardDAVParser createRecordInSource:outRecordType:]
NONAME
 Primary
-[ABVCardPersonValueSetter setValueInTemporaryCache:forProperty:]
CGRect ABImageUtilsCenteredSquareForRect(CGRect)
_Bool ABImageUtilsCopyImageSourceAndGetSizeFromData(CFDataRef, CGImageSourceRef *, int *, int *)
ABImageUtilsCreateScaledImageData
ABImageUtils.c
bitsPerComponent == 5 || bitsPerComponent == 8
/tmp/%i-origImage.jpg
/tmp/%i-savedSyncImage.jpg
/tmp/%i-normalizedOrigImage.jpg
/tmp/%i-syncImage.jpg
NSData *_copyImageDataReducedUpToSize(NSData *, CGImageSourceRef, CGFloat *, int, int, unsigned int, BOOL, BOOL)
Trying to jpeg compresss the original image.
Original image at quality %f has length %lu
Trying to scale down the original image.
Original image with size (%i, %i) at %d max edge has length %lu, scalingFactor = %f
@24@?0r^S8Q16
[[:scx=Kana:]]
CFArrayRef ABPersonCreatePeopleInSourceWithVCardRepresentation(ABRecordRef, CFDataRef)
CFDataRef ABPersonCreateVCardRepresentationWithPeople(CFArrayRef)
ChangesTruncated
LatestSequenceNumber
RecordIDs
EventTypes
SequenceNumbers
RecordGUIDs
PersonLinks
PersonLinkUUIDs
LinkToPersonUUIDs
ChangeTableRowIDs
ExternalIDs
ImagesChanged
com.apple.MobileSync
PropertyIDs
MultiValueIdentifiers
MultiValueGUIDs
ABChangeHistoryIdleClientWasPurgedNotification
DROP TABLE IF EXISTS ClientCursor;
DROP TABLE IF EXISTS ClientSequence;
DROP TABLE IF EXISTS ClientCursorConsumed;
CREATE TABLE ClientCursor (ROWID INTEGER PRIMARY KEY AUTOINCREMENT, store_id INTEGER, latest_consumed_sequence_number INTEGER, latest_consumed_timestamp REAL, client_identifier TEXT, UNIQUE(client_identifier, store_id));
CREATE INDEX ClientCursorClientIdentifier ON ClientCursor(client_identifier, store_id); 
CREATE TABLE ClientSequence (sequence_number INTEGER,client_identifier TEXT,save_timestamp REAL );
CREATE INDEX ClientSequenceClientIdentifier ON ClientSequence(client_identifier); 
CREATE TABLE ClientCursorConsumed (store_id INTEGER, consumed_entity_class INTEGER, consumed_entity_id INTEGER, consumed_change_id INTEGER, sequence_number INTEGER, client_identifier TEXT);
CREATE INDEX ClientCursorConsumedClientIdentifier ON ClientCursorConsumed(client_identifier, store_id); 
CREATE TRIGGER delete_clientcursor_consumed AFTER DELETE ON ClientCursor 
    BEGIN 
        DELETE FROM ClientCursorConsumed WHERE client_identifier = OLD.client_identifier AND store_id = OLD.store_id; 
    END; 
alter table ClientSequence rename to ClientSequence_old;
DROP INDEX IF EXISTS ClientSequenceClientIdentifier;
DROP TRIGGER IF EXISTS delete_clientcursor_consumed;
INSERT INTO ClientSequence (ROWID, sequence_number, client_identifier, save_timestamp)     SELECT ROWID, sequence_number, client_identifier, ? FROM ClientSequence_old; 
drop table ClientSequence_old;
Unknown client registering for AB change history, creating simulated crash report.
int ABChangeHistoryRegisterClientForSource(ABAddressBookRef, CFStringRef, ABRecordRef)
INSERT OR REPLACE INTO ClientCursor (client_identifier, store_id, latest_consumed_sequence_number, latest_consumed_timestamp) VALUES (?, ?, (SELECT IFNULL(MIN(latest_consumed_sequence_number), -1) FROM ClientCursor WHERE client_identifier = ? and store_id = ?), ?);
clientIdentifier = %@, storeID = %i
>> latestSequenceNumber = %i
ClientCursor
SELECT DISTINCT client_identifier FROM ClientCursor;
CFArrayRef ABChangeHistoryCopyAllRegisteredClientIdentifiers(ABAddressBookRef)
>> clientIdentifiers = %@
void ABChangeHistoryUnregisterClientForSource(ABAddressBookRef, CFStringRef, ABRecordRef)
DELETE FROM ClientCursor WHERE client_identifier = ? and store_id = ?;
DELETE FROM ClientCursor WHERE client_identifier = ?;
clientIdentifier = %@, storeID = %i
void ABChangeHistorySetAddressBookClientIdentifier(ABAddressBookRef, CFStringRef)
clientIdentifier = %@
void ABChangeHistorySetSaveTimestamp(ABAddressBookRef, CFAbsoluteTime)
saveTimestamp = %@
INSERT INTO ClientSequence (client_identifier, sequence_number, save_timestamp) VALUES (?, ?, ?);
com.apple.exchangesyncd
CFDictionaryRef ABChangeHistoryGetChanges(ABAddressBookRef, ABChangeHistoryEntityType, CFArrayRef, ABChangeHistoryOptions, int, int, CFStringRef, CFArrayRef, ABRecordRef)
clientIdentifier = %@, storeID = %i, entityType = %i, sequenceNumber = %i, recordID = %i, compressChanges = %@, unifyResults = %@, linkingResults = %@, meCardResults = %@, changeKeys = %@
SELECT IFNULL(MIN(latest_consumed_sequence_number), -1) FROM ClientCursor WHERE client_identifier = ? AND store_id = ?;
    %@ = %@
using latest consumed sequenceNumber = %i
StoreID = ? AND sequence_number > ? AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ? OR client_identifier = "com.apple.accounts.dom") AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?)
(sequence_number > ? OR (sequence_number = ? AND record > ?)) AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?) AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?)
ORDER BY sequence_number, record ASC
sequence_number > ?  AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)  AND ROWID NOT IN (SELECT consumed_change_id FROM ClientCursorConsumed WHERE client_identifier = ? AND consumed_entity_class = ?)
sequence_number > ? AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE client_identifier = ?)
    %@ = %i
>> changes = (
ClientCursorConsumed
ClientSequence
SELECT COUNT(*) FROM (SELECT NULL FROM %@ WHERE sequence_number = ? AND record > ? LIMIT 1);
void _clearChangesForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, int)
Tables before clear changes:
Tables before clear changes:
will clear up to previous sequenceNumber = %i
DELETE FROM ClientCursorConsumed     WHERE client_identifier = ? AND store_id = ? AND IFNULL(sequence_number, 0) <= ?;
UPDATE ClientCursor     SET latest_consumed_timestamp = ?, latest_consumed_sequence_number = MAX(?, (SELECT latest_consumed_sequence_number FROM ClientCursor WHERE client_identifier = ? AND store_id = ?))     WHERE client_identifier = ?;
Tables after clear changes:
Tables after clear changes:%@
void ABChangeHistoryClearChangesUpToSequenceNumberForClient(ABAddressBookRef, int, CFStringRef, ABRecordRef)
clientIdentifier = %@, storeID = %i, sequenceNumber = %i
void ABChangeHistoryClearEntityChangesUpToSequenceNumberAndRecordIDForClient(ABAddressBookRef, ABChangeHistoryEntityType, int, int, CFStringRef, ABRecordRef)
clientIdentifier = %@, storeID = %i, entityType = %i, sequenceNumber = %i, recordID = %i
int ABChangeHistoryGetLatestConsumedSequenceNumberForClient(ABAddressBookRef, CFStringRef, ABRecordRef)
clientIdentifier = %@, storeID = %i
>> latestConsumedSequenceNumber = %i
void ABChangeHistoryClearEntityChangeTableRowIDsForClient(ABAddressBookRef, ABChangeHistoryEntityType, CFArrayRef, CFStringRef, ABRecordRef)
clientIdentifier = %@, storeID = %i, entityType = %i, changeTableRowIDs = %@
ABChangeHistoryClearEntityChangeTableRowIDsForClient
ABChangeHistory.m
entityType == ABChangeHistoryEntityTypePerson || entityType == ABChangeHistoryEntityTypeGroup
SELECT sequence_number FROM %@Changes WHERE ROWID = ?;
INSERT INTO ClientCursorConsumed (client_identifier, store_id, consumed_entity_class, consumed_entity_id, consumed_change_id, sequence_number) VALUES (?, ?, ?,  (SELECT record FROM %@Changes WHERE ROWID = ? LIMIT 1),  ?,  (SELECT sequence_number FROM %@Changes WHERE ROWID = ?) )
void ABChangeHistoryPurgeIdleClients(ABAddressBookRef, CFAbsoluteTime, int)
timestamp = %f, numChanges = %i
SELECT client_identifier FROM ClientCursor WHERE latest_consumed_timestamp < ? OR (store_id = -1 AND (SELECT count(*) FROM (SELECT NULL FROM ABPersonChanges WHERE sequence_number > latest_consumed_sequence_number AND sequence_number NOT IN (SELECT sequence_number FROM ClientSequence WHERE ClientSequence.client_identifier = ClientCursor.client_identifier))) > ?);
Purging change-tracking client %@ which has been idle since %f or is tracking all stores and is behind more more than %d changes
SELECT MAX(sequence_number) FROM ClientSequence WHERE save_timestamp < ?;
SELECT sequence_number FROM ABPersonChanges ORDER BY sequence_number DESC LIMIT 1 OFFSET ?;
SELECT MIN(latest_consumed_sequence_number) FROM ClientCursor WHERE client_identifier LIKE 'com.apple.dataaccessd%';
PeakContactCount
DELETE FROM ABPersonChanges WHERE sequence_number <= ?;
DELETE FROM ABGroupChanges WHERE sequence_number <= ?;
DELETE FROM ClientSequence WHERE sequence_number <= ?;
DELETE FROM ClientCursor WHERE latest_consumed_sequence_number != -1 AND latest_consumed_sequence_number <= ? AND client_identifier NOT LIKE 'com.apple.dataaccessd%';
v16@?0@"NSString"8
SELECT COUNT(*) FROM (SELECT NULL FROM ClientCursor WHERE client_identifier LIKE ? LIMIT 1);
SELECT COUNT(*) FROM (SELECT NULL FROM %@);
void ABChangeHistoryInsertUpdatesForRecordsFromBlockWithClientIdentifier(ABAddressBookRef, CFArrayRef (^)(void), CFStringRef)
__CPRecordSequenceNumber
INSERT INTO ABPersonChanges VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);
_Bool ABChangeHistoryInsertPersonImageChangeRecordForRecordsWithIdentifiers(ABAddressBookRef, CFArrayRef)
failed to write change history records for deleted thumbnails because we were not passed an ABAddressBookRef
SELECT ROWID, StoreID, ExternalIdentifier, guid, PersonLink FROM ABPerson WHERE ROWID IN ( ? 
, ? 
INSERT INTO ABGroupChanges VALUES(?, ?, ?, ?, ?, ?);
Error %d adding group change log entry statement: %s
Error %d preparing group changes log statement: %s
CPSqliteConnection *_getWriterConnection(CPRecordStoreRef, const char *)
%s: failed to start transaction for writer connection (error %d)
%s: failed to get writer connection
void _commitWriterConnection(CPSqliteConnection *, const char *)
%s: failed to commit transaction (error %d)
v28@?0q8i16^B20
v16@?0@"NSNumber"8
v24@?0@"NSString"8@"NSArray"16
v32@?0@"NSNumber"8Q16^B24
ABPersonChanges
ABGroupChanges
ABPersonMultiValueDeletes
select ROWID, * from %@
%@ = ( )
%@ (%li) = (
    
rowid
<BLOB>
NOTES_BUILDING_NAME_FORMAT
NOTES_APPLE_FLOOR_FORMAT
SocialServicesURLFormats.plist
UnknownServiceURLFormat
SocialServicesURLRegexes.plist
v32@?0@"NSTextCheckingResult"8Q16^B24
x-apple
http
https
www.
CNFavoritesEntryChangedNotification
CNFavoritesEntryIdentityChangedNotification
CNFavoritesEntryOldIdentityKey
Property
Value
Label
ABUid
ABIdentifier
ABDatabaseUUID
EntryType
-[ABFavoritesEntry initWithDictionaryRepresentation:addressBook:]
addressBook is NULL, some API is non-functional when this is the case (example -ABPerson)
CNFavoritesChangedNotification
-[ABFavoritesListManager reportFavoritesIssue:]
ABFavoriteListManager
-[ABFavoritesListManager _loadListWithAddressBook:]
Read favorites file %@, count = %ld
Error reading favorites file, error: %@
no error returned
Error reading favorites file. Add a favorite as workaround. Please open a radar to PEP Contacts (New Bugs).
CNFavoritesChangedExternallyNotification
-[ABFavoritesListManager saveImmediately]
must save changes with CNFavorites
-[ABFavoritesListManager save]
-[ABFavoritesListManager entryIsDuplicateAndThusRemoved:oldUid:]
Checking for duplicate favorites entry, but entry we were told to compare is not list! Entry: %@
List: %@
Library/Preferences
com.apple.mobilephone.speeddial.plist
/System/Library/Frameworks/CoreTelephony.framework/CoreTelephony
CTSettingCopyMyPhoneNumber
System/Library/PrivateFrameworks/FindMyDevice.framework/FindMyDevice
FMDFMIPManager
kLostModeChangedNotification
SELECT rowid FROM ABPerson WHERE guid IN ( %@ )
SELECT rowid FROM(SELECT abp.ROWID FROM ABPerson abp LEFT JOIN ABPersonLink abpl ON abpl.rowid = abp.personlink WHERE abpl.guid IN ( %@ ) UNION SELECT abp.ROWID FROM ABPerson abp  WHERE abp.guid IN ( %@))
v16@?0@"ABBinders"8
SELECT rowid FROM ABPerson WHERE rowid = ?
SELECT abp.ROWID FROM ABPersonSearchKey abs JOIN ABPerson abp ON abs.person_id = abp.ROWID WHERE 
SELECT abp.rowid from ABPerson abp JOIN ABGroupMembers abgm ON abgm.member_id = abp.ROWID AND abgm.member_type = 0 JOIN ABGroup abg ON abgm.group_id = abg.ROWID WHERE abg.guid = ?
SELECT abp.rowid FROM ABPerson abp JOIN ABStore abs ON abp.storeid = abs.ROWID WHERE abs.guid = ?
SELECT abp.rowid FROM ABPerson abp WHERE abp.rowid IN (SELECT record_id FROM ABMultiValue WHERE property = ? AND value LIKE ?)
SELECT abp.rowid FROM ABPerson abp WHERE abp.rowid IN (SELECT record_id FROM ABMultiValue WHERE property = ? AND value COLLATE NOCASE = ? LIMIT 1)
SELECT abp.rowid FROM ABPerson abp WHERE abp.Organization LIKE ?
%%%@%%
SELECT abp.rowid FROM ABPerson abp WHERE abp.IsPreferredName = 1 %@ LIMIT ? OFFSET ?
SELECT 1 WHERE 1 = 0
VALUES 
SELECT rowid FROM ABPerson WHERE rowid IN (SELECT rowid FROM ABPerson WHERE personlink = -1 AND StoreID IN %@ UNION SELECT ab_allowed_preferred_contact(abp.rowid, abp.StoreID, abp.IsPreferredName, ? ) FROM ABPerson abp JOIN ABPersonLink abpl ON abpl.rowid = abp.PersonLink WHERE abp.StoreID IN %@ GROUP BY abpl.rowid) %@ LIMIT ? OFFSET ? 
LIMIT 1
= MAX(1, (SELECT max(phonescore) FROM PhoneRanked) )
AND groups.guid in %@
JOIN ABGroupMembers members ON members.member_id = abmv.record_id AND member_type = 0 JOIN ABGroup groups on groups.rowid = members.group_id
WITH PhoneRanked (personrow, phonescore) as (SELECT abmv.record_id, ab_compare_phone_numbers( ?, ?, abmv.value, ?) FROM ABMultivalue abmv %@ WHERE abmv.UID IN (SELECT multivalue_id FROM ABPhoneLastFour WHERE value = ?) %@ ) SELECT personrow FROM PhoneRanked WHERE phonescore %@ %@
ab_collect_value_row_map(?, ABQuery.term, abmv.record_id)
abmv.record_id
AND store.guid in %@
JOIN ABPerson person ON person.ROWID = abmv.record_id JOIN ABStore store ON store.ROWID = person.storeID
WITH ABQuery(term, termlastfour, termdecomposed) AS ( %@ ) SELECT %@ FROM ABPhoneLastFour four JOIN ABQuery on ABQuery.termlastfour = four.value JOIN ABMultiValue abmv on abmv.rowid = four.multivalue_id %@ where ab_compare_phone_numbers(ABQuery.termdecomposed, null, abmv.value, ?) %@
v32@?0@"NSString"8@"ABPhoneNumber"16^B24
WITH ABQuery(term) AS ( %@ ) SELECT %@ FROM ABMultivalue abmv JOIN ABQuery ON term = value collate nocase %@ %@ WHERE property = ? %@ %@ %@
SELECT abp.rowid FROM ABPerson abp WHERE abp.PreferredChannel = ? %@
SELECT MeIdentifier from ABStore where ROWID = (SELECT value from _SqliteDatabaseProperties where key = '%@')
SELECT * FROM (%@) UNION SELECT * FROM  (%@)
@"NSDictionary"12@?0i8
SELECT rowid from ABPersonFullTextSearch WHERE ABPersonFullTextSearch MATCH 
##&%@* 
SELECT rowid FROM ABPerson WHERE externalUUID IN ( %@ )
DYLD_FRAMEWORK_PATH
debug
+[ABDynamicLoader loadFrameworkAtPath:andStoreHandle:bundle:logging:]
Could not load framework at path: %s
error in SQL preparation of statement: %@
v12@?0i8
v20@?0r^v8i16
v16@?0r^v8
, abplink.guid
, (abplink.PreferredImagePersonID = abp.rowid)
, abmv.property, abmv.identifier, abmv.guid, abmv.value, abmvlabel.value
, abmvekey.value, abmve.value
, FirstSortLanguageIndex, FirstSortSection, FirstSort 
, LastSortLanguageIndex, LastSortSection, LastSort 
ABBufferQuery: unrecognized sort order: %u
WITH preferredmatched(rowid %@) as ( 
WITH matched(rowid, personlink) as ( SELECT rowid, personlink from ABPerson 
WHERE rowid in ( %@ ) 
AND 
%@ StoreID IN
SELECT rowid %@ FROM ABPerson abp WHERE abp.rowid IN (SELECT rowid FROM matched WHERE matched.personlink = -1 UNION 
SELECT PreferredNamePersonID FROM ABPersonLink abpl WHERE abpl.rowid IN (SELECT personlink FROM matched)) 
SELECT ab_allowed_preferred_contact(abp.rowid, abp.StoreID, abp.IsPreferredName, ? ) FROM ABPerson abp JOIN ABPersonLink abpl on abpl.rowid = abp.PersonLink WHERE abpl.rowid in (select personlink from matched) GROUP BY abpl.rowid) 
SELECT rowid %@ FROM ABPerson where rowid in ( 
SELECT rowid FROM ABPerson 
AND StoreID IN
 FROM preferredmatched 
 LEFT JOIN ABPerson abp2 on (abp2.rowid = preferredmatched.rowid) 
 JOIN ABPerson abp on (abp2.personlink != -1 and abp2.personlink = abp.personlink) OR (abp.rowid = abp2.rowid) 
 JOIN ABPerson abp on (abp.rowid = preferredmatched.rowid) 
 LEFT JOIN ABPersonLink abplink on abp.PersonLink = abplink.ROWID 
 LEFT JOIN ABMultivalue abmv ON abp.ROWID = abmv.record_id  AND +abmv.property IN 
 LEFT JOIN ABMultivalueLabel abmvlabel on abmv.label = abmvlabel.ROWID 
 LEFT JOIN ABMultiValueEntry abmve on abmve.parent_id = abmv.UID LEFT JOIN ABMultiValueEntryKey abmvekey on abmve.key = abmvekey.rowid 
 WHERE abp.StoreID IN 
preferredmatched.FirstSortLanguageIndex, preferredmatched.FirstSortSection, preferredmatched.FirstSort 
preferredmatched.LastSortLanguageIndex, preferredmatched.LastSortSection, preferredmatched.LastSort 
ABBufferQuery: unrecognized sorte order: %u
abp.PersonLink 
abp.ROWID 
, abmv.property, abmv.UID 
Error handling SQL statement in ABAddressBookCopyPersonBufferForQuery: %s
WHERE rowid IN ( %@ ) %@
B16@?0@?<B@?>8
B8@?0
, crop_x , crop_y , crop_width
SELECT ROWID %@ FROM ABFullSizeImage WHERE record_id = ?;
main
B20@?0@"NSString"8i16
[[:Latin:][:Common:][:Inherited:]]
/System/Library/Frameworks/CoreText.framework/CoreText
CTFontCreateWithName
CTFontCopyCharacterSet
AppleColorEmoji
SELECT fts3_tokenizer(?, ?)
ab_cf_tokenizer
ab_cf_tokenizer_namerank
ab_cf_tokenizer_matched_properties
ab_cf_tokenizer_select_snippet_column
[[:script=Hiragana:][:script=Katakana:]]+|[^[[:script=Hiragana:][:script=Katakana:]]]{1}
ABTokenListDestroy
ABSQLiteICUSupport.m
inList
ABTokenListPopulateFromString
list != NULL
ABTokenListGetCount
ABTokenListGetTokenStartByteOffsetAtIndex
list
index < list->firstUnusedIndex
ABTokenListGetTokenEndByteOffsetAtIndex
ABTokenListGetTokenAtIndex
ABTokenListGetTokenCollationKeyAtIndex
ABTokenListGetTokenCollationKeyLengthAtIndex
ABTokenListGetTokenRangeAtIndex
ABTokenListRemoveAllTokens
ABTokenList
com.apple.unit-testing
entityType
eventType
sequenceNumber
recordID
recordGUID
externalID
imagesChanged
_personLink
linkToPersonUUID
personLinkUUID
Person
Group
MultiValue
Unknown
Update
Delete
UnifiedAdd
UnifiedUpdate
Link
Unlink
SetPreferredName
SetPreferredImage
MeCardChanged
_Bool ABAddressBookMergeRecordsInSourceIntoSource(ABAddressBookRef, ABRecordRef, ABRecordRef)
_Bool _mergePersonIntoLinkedPeopleFromSource(ABAddressBookRef, ABRecordRef, ABRecordRef)
Merging %@ into %@
Error when adding person %@ to source %@: %@
_Bool _movePeopleAndGroupsToSource(ABAddressBookRef, ABRecordRef, ABRecordRef)
Moving contacts from %@ into %@
_Bool _mergeRecordsIntoSource(ABAddressBookRef, ABRecordRef, ABRecordRef)
Merging linked contacts
Error saving DB when moving people to source %@: %@
Moving non linked contacts
_Bool _movePicturesFromPersonToPerson(ABAddressBookRef, ABRecordRef, ABRecordRef)
Error when merging image from person %@ into %@: %@
UPDATE %s SET StoreID = %i, ExternalIdentifier = NULL, ExternalModificationTag = NULL%@ WHERE StoreID = %i;
SELECT ROWID from ABPerson where StoreID = %i;
ABLogFileLevel
ABLogConsoleLevel
ABLogSqlite
ABLogAPIUsage
ABLogContactsSearch
ABLogDataCollection
ABLogPersonDelete
ABLogChangeHistory
General
%s:%i | %@
%llx
Error creating new ASL message: %@
ThreadID
Level
Function
Line
Message
Category
Debug
Facility
addressBookRef=%p
%p(%@)
error=%@
NULL
, %i
backtrace:
Radar
Dismiss
Please mention what you were doing at the time of the error.
Description
Title
AddressBook error
Classification
Serious Bug
ComponentID
568785
ComponentName
PEP Contacts
ComponentVersion
AutoDiagnostics
phone
tap-to-radar
\\$1
(["])
=,\"
([=,\\"])
q24@?0@"NSString"8@"NSString"16
AccountIdentifier
Flags
DefaultSourceID
ABRecordRef ABAccountCreate()
CFStringRef ABAccountCopyInternalUUID(ABRecordRef)
_Bool ABAccountSetInternalUUID(ABRecordRef, CFStringRef, CFErrorRef *)
CFStringRef ABAccountCopyIdentifier(ABRecordRef)
_Bool ABAccountSetIdentifier(ABRecordRef, CFStringRef, CFErrorRef *)
ABRecordRef ABAddressBookGetDefaultSourceForAccount(ABAddressBookRef, ABRecordRef)
_Bool ABAddressBookSetDefaultSourceForAccount(ABAddressBookRef, ABRecordRef, ABRecordRef, CFErrorRef *)
ABRecordRef ABAddressBookCopyAccountWithIdentifier(ABAddressBookRef, CFStringRef)
WHERE AccountIdentifier = ?
CFArrayRef ABAddressBookCopyArrayOfAllAccounts(ABAddressBookRef)
CFArrayRef ABAddressBookCopyArrayOfAllSourcesInAccount(ABAddressBookRef, ABRecordRef)
WHERE AccountID = ?
INSERT INTO ABAccount(AccountIdentifier) SELECT ? WHERE NOT EXISTS (SELECT AccountIdentifier FROM ABAccount where AccountIdentifier = ?);
UPDATE ABStore SET AccountID = (SELECT ROWID FROM ABAccount WHERE AccountIdentifier = ?) WHERE StoreInternalIdentifier = ?;
UPDATE ABAccount SET DefaultSourceID = (SELECT ROWID FROM ABStore WHERE StoreInternalIdentifier = ?) WHERE AccountIdentifier = ?;
ABAccount
v24@?0q8@"NSError"16
v32@?0@"NSString"8@"NSString"16^B24
select ROWID from ABPerson where StoreID not in (select ROWID from ABStore);
select UID from ABMultiValue where record_id not in (select ROWID from ABPerson);
select ROWID from ABMultiValueEntry where parent_id not in (select UID from ABMultiValue);
select multivalue_id from ABPhoneLastFour where multivalue_id not in (select ROWID from ABMultiValue);
select ROWID from ABPerson;
select record_id from ABFullSizeImage;
select distinct record_id from ABThumbnailImage;
void ABDatabaseIntegrityCheckWithAddressBookAndImageStore(ABAddressBookRef, CPRecordStoreRef)
deleted %ld orphaned people
deleted %ld orphaned multi-values
deleted %ld orphaned multi-value entries
deleted %ld orphaned phone last fours
deleted %ld orphaned images
delete from ABPerson where StoreID not in (select ROWID from ABStore);
delete from ABMultiValue where record_id not in (select ROWID from ABPerson);
delete from ABMultiValueEntry where parent_id not in (select UID from ABMultiValue);
delete from ABPhoneLastFour where multivalue_id not in (select ROWID from ABMultiValue);
Error fetching boot UUID (missing entitlements?); using an error value instead
Marking database path %{public}@ for future deletion with current boot uuid %{public}@.
Failed to mark address book database for deletion: _cn_setValue:forExtendedAttribute: returned  %@
Error fetching xattrs to check if database is marked for deletion: %@
AddressBook preparing save, sequence number = %d, deleted contact count = %ld, added contact count = %ld, change history id = %{public}@
AddressBook failed to save: CPRecordStoreSaveWithCallbackAndTransactionType returned error: %{public}@
Error opening root collator to retrieve version number, code=%d
Internal error from ucol_getSortKey for '%@'
[Likeness Update] Thumbnail cropRect {%.2f, %.2f, %.2f, %.2f} inverted Y-origin to %.2f
[Likeness Update] Attempting to set imageData with cropRect {%.2f, %.2f, %.2f, %.2f} extending beyond image of size (%i x %i), forcing a centered square cropRect
[Likeness Update] Thumbnail cropRect {%.2f, %.2f, %.2f, %.2f} Y-origin forced to 0 because it was negative (availableHeight = %i)
[Likeness Update] Setting original size imageData with cropRect {%.2f, %.2f, %.2f, %.2f} for image of size (%i x %i). Also setting thumbnail & fullscreen derivatives.
[Likeness Update] Not setting image on person, as it hasn't changed
[Likeness Update] Sync image changed: %{public}@, cropRect {%i, %i, %i, %i} changed: %{public}@. Updating sync image on person
[Likeness Update] original cropRect {%.2f, %.2f, %.2f, %.2f} vs syncedCropRect: {%.2f, %.2f, %.2f, %.2f}
[Likeness Update] original height %i vs sync height: %i, cropRect is scaled down: %@
[Likeness Update] Enter ABImageUtilsCopySyncImageForPerson: ABRecordID = %i, maxSize = %i, allowOverflow = %i
[Likeness Update] Exit ABImageUtilsCopySyncImageForPerson: no original image available to sync.
Original image has length = %lu with thumbnail crop rect (%i, %i, %i, %i)
[Likeness Update] Exit ABImageUtilsCopySyncImageForPerson: can't get size of original image to sync.
Returning the AB saved sync image.
[Likeness Update] ABImageUtilsCopySyncImageForPerson: inconsistent sync image ratio (%ix%i) vs original image ratio (%ix%i). Crop rect will be messed up
[Likeness Update] ABImageUtilsCopySyncImageForPerson: Unable to get sync image size. Crop rect will be messed up
Transforming the original image to normal orientation.
Returning the original image.
[Likeness Update] Scaling failed to reduce to max size, trying again without alpha preservation by allowing JPEG conversion.
[Likeness Update] Scaling/compression failed to reduce image of size %lu to max size %u. Proceeding without sync image.
[Likeness Update] Exit ABImageUtilsCopySyncImageForPerson: sync image length = %lu with thumbnail crop rect (%i, %i, %i, %i)
Error %d with query to clear sequence number: %s
Failed to clear changes to sequence number %d with query %@
Inserted change history record for person id %d (guid %{public}@) after moving to store id %d; sequence number = %d
Inserted change history record for group id %d (guid %{public}@) after moving to store id %d; sequence number = %d
Error %d adding change log entry statement: %s
Error %d preparing person changes log statement: %s
Error creating localized string from format = %{public}@, value = %{public}@, error = %{public}@
Error creating social profile URL from format = %{public}@, username = %{public}@, error = %{public}@
%@ (or something it links) is using deprecated code and contributing to the overall instability of the system.
ABVCardDateScanner
ABFacebookMigrator
ABAccountScorer
ABDowntimeWhitelistMigrator
ABCCallbackInvoker
ABGroupMembershipPredicate
ABNamePredicate
ABPredicate
ABPredicateRunner
ABPredicateQueryCreation
ABValuePredicate
ABPhonePredicate
ABAnyValuePredicate
ABPhoneNumber
ABSearchOperation
ABPersonLinker
ABDataAdditions
ABCMutableDataAdditions
ABVCardActivityAlertScanner
ABVCardAdditions
ABVCardExporter
ABVCardCardDAVRecord
ABVCardCardDAVExporter
ABVCardRecord
ABVCardLexer
ABUtils
ABVCardParser
ABVCardCardDAVParser
ABVCardParameter
ABVCardValueSetter
ABVCardPersonValueSetter
ABVCardCardDAVValueSetter
ABServerSearchPredicate
DASearchQueryConsumer
ABAdditions
ABVCardWatchdogTimer
_ABVCardTimeProvider
ABVCardTimeProvider
NSObject
ABFavoritesEntry
Lookup
ABFavoritesLookupChangeRecord
ABFavoritesListManager
ABSQLPredicate
NamePredicateSortKeyWrapper
ABDynamicLoader
ABPhoneFormatting
ABBinders
ABBufferQuery
ABBufferQueryCursor
ABChangeHistoryEvent
ABVCardActivityAlertSerializer
ABVCardActivityAlertQuotingSerializationStrategy
ABVCardActivityAlertAbstractSerializationStrategy
ABVCardActivityAlertEscapingSerializationStrategy
ABVCardActivityAlertSerialization
addObject:
writeToFile:atomically:
workPhone
workFaxPhone
whitespaceCharacterSet
whitespaceAndNewlineCharacterSet
valueWithPointer:
valueWithNonretainedObject:
valueForKey:
username
userInfo
unlockWithCondition:
unlock
title
timeZoneWithName:
timeZoneForSecondsFromGMT:
timeIntervalSinceReferenceDate
timeIntervalSinceDate:
substringWithRange:
substringToIndex:
substringFromIndex:
subpredicates
subdataWithRange:
stringWithValidatedFormat:validFormatSpecifiers:error:
stringWithUTF8String:
stringWithString:
stringWithFormat:
stringWithCapacity:
stringWithCString:encoding:
stringValue
stringFromDate:
stringByTrimmingCharactersInSet:
stringByReplacingMatchesInString:options:range:withTemplate:
stringByRemovingPercentEncoding
stringByDeletingLastPathComponent
stringByAppendingString:
stringByAppendingPathComponent:
stringByAppendingFormat:
stringByAddingPercentEncodingWithAllowedCharacters:
string
street
stop
state
sortedArrayUsingComparator:
sortUsingFunction:context:
sortUsingComparator:
sharedInstanceForAddressBook
sharedConnection
setYearlessYear:forCalendar:
setYear:
setWithObjects:
setWithArray:
setTimeZone:
setShortNameIsEnabled:
setShortNameFormat:
setSecond:
setScheme:
setScanLocation:
setQueryItems:
setPreferNicknamesDefault:
setOutputFormat:
setObject:forKeyedSubscript:
setObject:forKey:
setMonth:
setMinute:
setMaxConcurrentOperationCount:
setLeapMonth:
setIncludePhotos:
setIdentifierAccountingData:
setHour:
setHost:
setFormatOptions:
setEra:
setDefaultDisplayNameOrder:
setDay:
setData:
setCharactersToBeSkipped:
setCalendar:
setAttributes:range:
searchOperation:didFindMatches:moreComing:
scheme
schedulerProvider
scanUpToCharactersFromSet:intoString:
scanLocation
scanInt:
runningboardInhibitorWithExplanation:
resourceSpecifier
requestAuthorization:completionHandler:
requestAccessWithError:
replaceOccurrencesOfString:withString:options:range:
replaceMatchesInString:options:range:withTemplate:
removeUnlockHandlerWithIdentifier:
removeObserver:
removeObjectsAtIndexes:
removeObjectForKey:
removeObjectAtIndex:
removeObject:
removeItemAtPath:error:
removeCharactersInRange:
removeAllObjects
regularExpressionWithPattern:options:error:
readingContactsData
readAndTransmittingContactsData
rangeOfString:options:
rangeOfString:
rangeOfCharacterFromSet:
rangeAtIndex:
range
raise:format:
queryItemWithName:value:
providerWithStore:
processInfo
postalAddress
postNotificationName:object:userInfo:
postNotificationName:object:
pointerValue
performServerContactsSearch:forAccountWithID:
performSelectorOnMainThread:withObject:waitUntilDone:
performSelector:withObject:afterDelay:
performSelector:onThread:withObject:waitUntilDone:modes:
performSelector:onThread:withObject:waitUntilDone:
performBlock:
pathForResource:ofType:
path
pagerNumber
operations
openURL:
objectForKeyedSubscript:
objectForKey:
objectEnumerator
objectAtIndexedSubscript:
objectAtIndex:
object
numberWithUnsignedInteger:
numberWithUnsignedInt:
numberWithLong:
numberWithInteger:
numberWithInt:
numberWithFloat:
numberWithDouble:
numberWithChar:
numberWithBool:
numberOfRanges
null
nonretainedObjectValue
nextObject
mutableCopy
mutableBytes
moveItemAtPath:toPath:error:
modifyingContactsData
mobilePhone
minusSet:
mapTableWithKeyOptions:valueOptions:
makeObjectsPerformSelector:
mainThreadScheduler
mainPhone
mainBundle
lowercaseString
lostModeIsActive
longValue
logDatabaseResolution:
logContactsDataAccessEvent
lockWhenCondition:
lock
localizedStringForPostalAddressString:returningNilIfNotFound:
localizedCaseInsensitiveCompare:
lengthOfBytesUsingEncoding:
lastPathComponent
lastObject
lastName
jpegPhoto
isYearlessDate:forCalendar:
isValidDate
isUnlockedSinceBoot
isSubsetOfSet:
isObject:equalToOther:withBlocks:
isObject:equalToOther:
isMainThread
isInteger:equalToOther:
isFinished
isEqualToString:
isEqualToData:
isDeviceUnlockedSinceBoot
isDevicePasscodeProtected
isCancelled
isBool:equalToOther:
isAnyAccountSyncableIgnoringAccount:
isAccessRestricted
isAccessGranted
invert
intersectSet:
integerValue
intValue
insertString:atIndex:
insertObject:atIndex:
initWithPattern:options:error:
initWithObjectsAndKeys:
initWithObjects:forKeys:
initWithObjects:
initWithInt:
initWithIndex:
initWithFormat:arguments:
initWithFormat:
initWithDelay:options:block:schedulerProvider:downstreamScheduler:
initWithData:encoding:
initWithContentsOfURL:error:
initWithContentsOfFile:
initWithCondition:
initWithCapacity:
initWithCalendarIdentifier:
initWithBytesNoCopy:length:freeWhenDone:
initWithBytes:length:
initWithBase64EncodedString:options:
initRequiringSecureCoding:
initForReadingFromData:error:
indexSet
indexOfObject:
increaseLengthBy:
imUsername
imService
identifierOnServer
iPhone
host
homePostalAddress
homePhone
hasPrefix:
handleFailureInMethod:object:file:lineNumber:description:
handleEvent
getCharacters:range:
getCharacters:
getBytes:range:
formUnionWithCharacterSet:
firstObject
firstName
finishEncoding
finishDecoding
fileURLWithPath:isDirectory:
fileSystemRepresentation
fileExistsAtPath:isDirectory:
fileExistsAtPath:
faxPhone
exceptionWithName:reason:userInfo:
errorWithDomain:code:userInfo:
enumerateObjectsWithOptions:usingBlock:
enumerateObjectsUsingBlock:
enumerateMatchesInString:options:range:usingBlock:
enumerateKeysAndObjectsUsingBlock:
enumerateIndexesUsingBlock:
encodedData
encodeObject:forKey:
encodeInt:forKey:
emailAddress
drain
doubleValue
domain
displayTypeForAccountWithIdentifier:
displayNameForKey:value:
displayAccount
dictionaryWithObjectsAndKeys:
dictionaryWithObjects:forKeys:count:
dictionaryWithObject:forKey:
dictionaryWithDictionary:
dictionaryWithContentsOfFile:
dictionaryWithCapacity:
dictionary
deviceHasManagementRestrictions
detachNewThreadSelector:toTarget:withObject:
descriptionInStringsFileFormat
descriptionBuilderWithObject:
deletingContactsData
deleteCharactersInRange:
defaultWorkspace
defaultStore
defaultProvider
defaultManager
defaultCenter
decodeObjectOfClasses:forKey:
decodeObjectOfClass:forKey:
decodeIntForKey:
dateFromComponents:
dateByAddingTimeInterval:
date
dataWithPropertyList:format:options:error:
dataWithJSONObject:options:error:
dataWithCapacity:
dataWithBytesNoCopy:length:
dataWithBytes:length:
dataUsingEncoding:
data
currentThread
currentLocale
currentHandler
currentEnvironment
currentCalendar
currentBootSessionUUID
cropRect:fitsWithinSize:
countForObject:
countByEnumeratingWithState:objects:count:
count
copy
controlCharacterSet
contentsOfDirectoryAtPath:error:
containsString:
containsObject:
containsIndex:
contactsSearchQueryWithSearchString:searchBase:searchScope:consumer:
condition
compoundPredicateType
componentsSeparatedByString:
componentsJoinedByString:
components:fromDate:
compare:options:
company
code
city
characterSetWithCharactersInString:
characterIsMember:
characterAtIndex:
centeredSquareCropRectInRect:
caseInsensitiveCompare:
cancelServerContactsSearch:
cancelPreviousPerformRequestsWithTarget:selector:object:
canReadFromLocalAccount
canReadFromAccountWithIdentifier:
canBeConvertedToEncoding:
callStackSymbols
calendarWithIdentifier:
cStringUsingEncoding:
bytes
bundleWithPath:
bundleIdentifier
bundleForClass:
buildingName
build
boolValue
base64EncodedStringWithOptions:
backgroundScheduler
authorizationStatus
arrayWithObjects:count:
arrayWithObjects:
arrayWithObject:
arrayWithCapacity:
arrayWithArray:
arrayByAddingObject:
array
appleFloor
appendString:
appendName:object:
appendName:boolValue:
appendFormat:
appendData:
appendBytes:length:
appendAttributedString:
andPredicateWithSubpredicates:
allValues
allObjects
allKeys
addressFormats
addUnlockHandlerWithIdentifier:block:
addOperation:
addObserver:selector:name:object:
addObjectsFromArray:
addIndex:
addEntriesFromDictionary:
addCharactersInRange:
accountWithIdentifier:
_shouldPreferNicknames
_shortNameIsEnabled
_defaultShortNameFormat
_defaultDisplayNameOrder
_cn_take:
_cn_stringBySanitizingPhoneNumber
_cn_setValue:forExtendedAttribute:path:error:
_cn_resultWithAllCharacters:
_cn_md5Hash
_cn_map:
_cn_getValue:forExtendendAttribute:path:error:
_cn_each_reverse:
_cn_each:
JSONObjectWithData:options:error:
UTF8String
UUIDString
UUID
URLPathAllowedCharacterSet
URLWithString:
init
scannerWithString:
initWithString:
scanComponentValueOfLength:
scanCalendarUnit:
lengthOfCalendarUnit:
scanLeapMarker
isAtEnd
nextCharacter
position
_string
_position
TQ,R,V_position
dealloc
isSourceFacebook:
isAccountTypeFacebook:
mayHaveFacebookContacts:
removeFacebookSensitiveInformation:
_findFacebookStoreID:
_performQuery:withStoreID:connection:
initWithAddressBook:
initWithAddressBook:accountStore:
setCheckDone:
isCheckDone
canMergeFacebookContacts
mergeFacebookContacts
deleteFacebookContacts
_detectFacebookSource
findBestMergeDestinationSourceID
_startDatabaseDoctorToPerformAction:
performPendingMergeOrDeleteAction
_mergeContactsFromAccount:toDestinationSourceID:
_removeContactsAccount:
facebookContactsCount
setFacebookContactsCount:
destinationDescription
setDestinationDescription:
addressBook
setAddressBook:
accountStore
setAccountStore:
facebookSource
setFacebookSource:
mergeDestinationSourceID
setMergeDestinationSourceID:
mayHaveFacebookSource
setMayHaveFacebookSource:
.cxx_destruct
_mayHaveFacebookSource
_mergeDestinationSourceID
_facebookContactsCount
_destinationDescription
_addressBook
_accountStore
_facebookSource
T^v,N,V_addressBook
T@"ACAccountStore",&,N,V_accountStore
T^v,N,V_facebookSource
Ti,N,V_mergeDestinationSourceID
TB,N,V_mayHaveFacebookSource
checkDone
TB,N,GisCheckDone
TQ,N,V_facebookContactsCount
T@"NSString",&,N,V_destinationDescription
initWithAddressBook:accountStore:account:defaultSourceID:
accountTypeDescription
accountDisambiguationDescription
calculateScore
_findBestSourceID
score
setScore:
accountType
setAccountType:
sourceID
setSourceID:
account
setAccount:
defaultSourceID
setDefaultSourceID:
_sourceID
_defaultSourceID
_score
_accountType
_account
T^v,N,V_account
Ti,N,V_defaultSourceID
Td,N,V_score
T@"NSString",&,N,V_accountType
T@"NSString",R,N
Ti,N,V_sourceID
moveDowntimeWhitelistFromUnknownProperties:
unknownPropertiesFromExternalRepresentation:
externalRepresentationFromUnknownProperties:
invoke
context
bindString:toStatement:withBindingOffset:
setGroup:
group
setStore:
store
isValid
queryWhereStringForPredicateIdentifier:
ab_bindWhereClauseComponentOfStatement:withBindingOffset:predicateIdentifier:
description
accountIdentifier
setAccountIdentifier:
_group
_store
_accountIdentifier
T^v,N
T@"NSString",C,N,V_accountIdentifier
setName:
setSource:
source
tokenizations
ab_metadataForMatchingRow:columnOffset:
emphasizedExcerptStringForMatchString:
querySelectPropertiesForPredicateIdentifier:
_matchClauseForColumns:requiringAllTerms:
queryJoinsInCompound:predicateIdentifier:
_personNameKeys
_personNonNameKeys
queryRankStringForPredicateIdentifier:
ab_bindJoinClauseComponentOfStatement:withBindingOffset:predicateIdentifier:
predicateFormat
name
sources
setSources:
groups
setGroups:
matchWholeWords
setMatchWholeWords:
matchPersonOrCompanyNamesExclusively
setMatchPersonOrCompanyNamesExclusively:
matchPreferredName
setMatchPreferredName:
generateExceprts
setGenerateExceprts:
scopedContactIdentifiers
setScopedContactIdentifiers:
_tokenizations
_tokenizationSortKeys
_matchWholeWords
_matchPersonOrCompanyNamesExclusively
_matchPreferredName
_generateExceprts
_name
_sources
_groups
_scopedContactIdentifiers
T@"NSString",C,N,V_name
T@"NSArray",&,N,V_sources
T@"NSArray",&,N,V_groups
T@"NSString",C,N
TB,N,V_matchWholeWords
TB,N,V_matchPersonOrCompanyNamesExclusively
TB,N,V_matchPreferredName
TB,N,V_generateExceprts
T@"NSArray",&,N,V_scopedContactIdentifiers
personPredicateWithNameLike:addressBook:
personPredicateWithNameLike:group:source:account:addressBook:
personPredicateWithNameLike:group:source:account:includeSourceInResults:addressBook:
personPredicateWithNameLike:groups:sources:addressBook:
personPredicateWithNameLike:groups:sources:includeSourceInResults:addressBook:
personPredicateWithNameLike:groups:sources:includeSourceInResults:includePhotosInResults:addressBook:
personPredicateWithName:addressBook:
personPredicateWithNameOnly:account:addressBook:
personPredicateWithValue:comparison:forProperty:
personPredicateWithAnyValueForProperty:
personPredicateWithPhoneLike:countryHint:addressBook:
personPredicateWithGroup:source:account:
newQueryWithProperties:joins:whereString:sortOrder:rankString:groupByProperties:addressBook:propertyIndices:
newQueryFromABPredicate:withSortOrder:ranked:addressBook:propertyIndices:
newQueryFromCompoundPredicate:withSortOrder:ranked:addressBook:propertyIndices:
searchPeopleWithPredicate:sortOrder:inAddressBook:withDelegate:
searchPeopleWithPredicate:sortOrder:ranked:inAddressBook:withDelegate:
_querySelectStringForPredicateIdentifier:
queryGroupByProperties
hasCallback
callbackContext
evaluateCallbackWithSqliteContext:predicateContext:values:count:
bindDouble:toStatement:withBindingOffset:
querySerializationIdentifier
ab_runPredicateWithSortOrder:ranked:inAddressBook:withDelegate:
ab_addCallbackContextToArray:
ab_hasCallback
ab_bindSelectClauseComponentOfStatement:withBindingOffset:predicateIdentifier:
ab_newQueryWithSortOrder:ranked:addressBook:propertyIndices:
predicateShouldContinue:afterFindingRecord:metadata:
stringForComparison:withComparision:
setValue:
_shouldConsultIndexForKey:
_supportsFTSSearch
_allowsLaxCheckingForFTS
stringForComparison:
_ftsTermStringForString:
_ftsTokenizedTermStringForString:
_ftsAllQueryStrings
property
setProperty:
comparison
setComparison:
value
_property
_comparison
_value
_orderedKeys
_dictionaryValue
Ti,N,V_property
Tq,N,V_comparison
T@"NSObject",C,N,V_value
homeCountryCode
phoneNumber
setPhoneNumber:
country
setCountry:
_homeCountryCode
_phoneNumber
_country
T@"NSString",C,N,V_phoneNumber
T@"NSString",C,N,V_country
initWithPhoneNumberString:countryCode:
decomposedPhoneNumberPointer
normalizedPhoneChars
lastFour
originalStringValue
_decomposedPhoneNumber
_phoneNumberBytes
_lastFour
_originalStringValue
T^{?=***I*I*I},R,D
T@"NSString",R,V_lastFour
T@"NSString",R,V_originalStringValue
T*,R
cancel
_mainThread_tellDelegateSearchFoundMatch:
personPredicateWithNameLike:inGroup:addressBook:
personPredicateWithNameLike:inSource:addressBook:
personPredicateWithNameLike:inSource:includeSourceInResults:addressBook:
personPredicateWithNameLike:inSource:includeSourceInResults:includePhotosInResults:addressBook:
personPredicateWithNameLike:inAccount:addressBook:
personPredicateWithNameLike:inGroups:sources:addressBook:
personPredicateWithNameOnly:inAccount:addressBook:
personPredicateWithValue:comparison:forProperty:addressBook:
personPredicateWithAnyValueForProperty:addressBook:
personPredicateWithGroup:addressBook:
setDelegate:
isConcurrent
setProgressBlock:
internalSearchAddressBook
setInternalSearchAddressBook:
main
predicateShouldContinue:
predicateShouldContinue:afterFindingRecord:
predicate
setPredicate:
prefetchProperties
setPrefetchProperties:
delegate
setContext:
sortOrdering
setSortOrdering:
progressBlock
_internalSearchAddressBook
_progressBlock
_progressBlockThread
_context
_delegate
_sortOrdering
_predicate
_prefetchProperties
T@?,C,N,V_progressBlock
T@"NSPredicate",&,N,V_predicate
T@"NSArray",C,N,V_prefetchProperties
T@"<ABSearchOperationDelegate>",N,V_delegate
T^v,N,V_context
TI,N,V_sortOrdering
isAutoLinkingEnabled
isInitialLinkingEnabled
isLinkDataValidForAddressBook:
startAutoLinkingNewPeopleInAddressBook:inProcess:
otherPeopleInDatabaseMatchingPerson:notIncludingPeople:
otherPeopleInArray:matchingPerson:
shouldLinkPerson:toPeopleInDatabase:andNewlyAddedPeople:inInitialLinking:
suggestedPeopleToLinkWithPerson:isInitialLinking:
addPerson:toDictionary:withProperty:
presortPeople:
makeLinksForAddedPeople:inInitialLinking:countingOuterIterations:detectedLinkCount:
removeAllLinks
makeInitialLinksCountingOuterIterations:
makeInitialLinks
copyArrayOfAllPeopleWithROWIDGreatThan:withLimit:
linkRecentlyAddedPeopleWithLimit:
linkRecentlyAddedPeople
linkNewlyAddedPerson:
_peopleByFirstName
_peopleByLastName
_peopleByOrganization
abStringAtRange:inEncoding:
abIsUTF16EntourageVCard
abEncodeVCardBase64DataWithInitialLength:
abDecodedUTF7
abDecodeVCardBase64
abAppendString:
scanAlertValueFromString:
characterIsStringValueCharacter:
scanAlertValue
scanKeyValuePair
scanStringValue
scanUnquotedStringValue
scanQuotedStringValue
scanPastKeyValueSeparator
scanPastItemDelimiter
scanCharacter
scanCharacterWithEscaping:
scanPastCharacter:
scanPastWhitespace
nextUnescapedCharacter
atEnd
copyABVCardDataRepresentation
abEscapeStringForUnichar:and:advance:
abStringByRemovingCharactersFromSet:
abStringByStrippingControlCharacters
abVCardKoshify
_vCard21RepresentationOfRecords:
_vCard30RepresentationOfRecords:
vCardRepresentationOfRecords:mode:
vCardRepresentationOfRecord:mode:
includeREVInVCards
includeNotesInVCards
includeImageURIInVCards
includeABClipRectInVCardPhotos
useThumbnailImageFormatIfAvailable
copyVCardRepresentationOfRecord:withPhoto:extraPhotoParameters:
supportedProperties
privateVCardEnabled
setPrivateVCardEnabled:
setVCardField:isPrivate:
clearPrivateFields
vcardFieldisPrivate:
setIncludeNotesInVCards:
setIncludeREVInVCards:
setIncludePhotosInVCards:
includePhotosInVCards
initWithRecord:
initWithVCardRepresentation:
vCardRepresentationForMode:
record
setValue:forProperty:
_showField:
_showField:identifier:
_vCardKeyForAddressLabel:vCard3:
_vCardKeyForGenericLabel:
_vCardKeysForPhoneLabel:
_vCardKeyForEmailLabel:
appendLabel:toVCardRep:inGroup:
newISO8061StringFromDate:
ISO8061StringFromDate:
ISO8061StringFromDateTime:
stringForAlternateBirthdayComponent:key:formatWidth:
stringFromAlternateBirthday:
copyValueForProperty:
valueForProperty:
propertyLineForGenericABProperty:vCardProperty:is21:groupCount:
propertyLineForInstantMessageHandles:groupCount:includePrivateData:
propertyLineForIMPPProperty:groupCount:includePrivateData:
propertyLineForGenericABProperty21:vCardProperty:
dataForSocialProfileProperty:groupCount:includePrivateData:
propertyLineForIMHandles:labels:vCardProperty:
dataForInstantMessageProperties
_valueForPersonSounds:identifier:
_addPersonSounds:identifier:toActivityAlerts:activity:alert:
_dictionaryForActivityAlerts
_typeParameterForToneType:
dataForSoundProperty:
encodedLineForValue:
encodedDataForValue:charsetName:
_fullNameIncludingAuxiliaryElements:
_isCompany
_fullName
alternateName
_realCompositeName
_21vCardRepresentationAsData
imageData
_prodID
_usesArrayForExternalPropKey:
_appendPropValue:forPropKey:toOutString:usingDelimiter:inGroup:
_copyVCardRepresentationAsStringIncludeExternalProperties:withPhoto:extraPhotoParameters:includePrivateData:
_copyGroupVCardRepresentationAsStringIncludeExternalProperties:
_record
_properties
tokenName:
initWithData:watchdogTimer:
cursor
errorCount
tokenSetForLength:
nextTokenPeakSingle:length:
nextTokenPeakUnicode:length:
nextTokenPeak:
nextQuotedPrintableData
nextEscapedCharacter
advancedPastToken:
nextSingleByteStringInEncoding:quotedPrintable:stopTokens:trim:
nextUnicodeStringStopTokens:quotedPrintable:trim:
_advancePastLineFoldingSequenceIfNeeded
_applyNextStringInEncoding:quotedPrintable:stopTokens:trim:intoString:
nextStringInEncoding:quotedPrintable:stopTokens:trim:
tokenAtCursor
nextArraySeperatedByToken:stoppingAt:inEncoding:
nextUnicodeBase64Line:
nextSingleByteBase64Line:
nextBase64Line:
nextBase64Data
advanceToPeakPoint
advanceToUnicodeString
advanceToSingleByteString
advanceToString
advanceToToken:throughTypes:
advanceToEOLUnicode
advanceToEOLSingle
advanceToEOL
advancePastEOLUnicode
advancePastEOLSingle
advancePastEOL
atEOF
_data
_bytes
_length
_peakedPoint
_cursor
_unicode
_errorCount
_activeTokenSets
_timer
mainBundleID
processName
length
initWithData:
hasImportErrors
cleanUpCardState
addMultiValues:toProperty:valueComparator:
_setValueFromExtension:forKey:onAddress:toKey:
addAddressMultiValues
addSocialProfileMultiValues
_addIMHandles:toService:multiValue:uniquenessCheckingMultiValue:
_addIMPPProfiles:multiValue:uniquenessCheckingMultiValue:
addInstantMessageMultiValues
_setPersonSounds:identifier:fromActivity:alert:otherValue:
addActivityAlertMultiValues
parseVERSION
noteLackOfValueForProperty:
noteLackOfValueForImageData
setLocalRecordHasAdditionalProperties:
_setIntValueOrNoteIfNull:forProperty:
_setDataValueOrNoteIfNull:forProperty:
_setStringValueOrNoteIfNull:forProperty:
_setMultiValuesOrNoteIfNull:forProperty:valueComparator:
parseN
parseNICKNAME
parseABMaiden
parseORG
parseSingleValue
parseRemainingLine
parseValueArray
parseURL
_genericLabel
genericLabel
defaultLabel
defaultADRLabel
defaultURLLabel
phoneLabel
parseABUID
parseUID
parseEMAIL
parseTEL
parseADR
parseADD
parseABExtensionType:
_socialProfileUserId
_socialProfileUsername
_socialProfileDisplayName
_socialProfileTeamIdentifier
_socialProfileBundleIdentifiers
_socialProfileService
parseSocialProfiles
parseInstantMessengerProfile:
parseIMPP
parseGuardianWhitelisted
parseIMAGETYPE
parseIMAGEHASH
addIMValueTo:
parseActivityAlerts
dateFromISO8601String:
parseBDAY
parseAlternateBirthday
parseABDATE
parsePhoto:
parseABPhoto
parseABShowAs
parseABOrder
parseABReleatedNames
_handleUnknownTag:withValue:
_usesRemainingLineForExternalPropKey:
parseItem
importToPerson:foundProperties:
importToValueSetter:
copyNextPersonWithLength:foundProperties:
peopleAndProperties:
sortedPeopleAndProperties:
_valueSetter
_source
_lexer
_defaultEncoding
_hasImportErrors
_30vCard
_first
_last
_org
_formattedName
_emails
_dates
_phones
_addresses
_aims
_jabbers
_msns
_yahoos
_icqs
_untypedIMs
_instantMessengers
_socialProfiles
_relatedNames
_urls
_activityAlerts
_notes
_otherNotes
_extensions
_uid
_imageData
_imageURI
_cropRectX
_cropRectY
_cropRectWidth
_cropRectHeight
_cropRectChecksum
_itemParameters
_grouping
_encoding
_quotedPrintable
_base64
importToPerson:removeExistingProperties:
importToGroup:removeExistingProperties:
createRecordInSource:outRecordType:
localRecordHasAdditionalProperties
lastCropRectX
lastCropRectY
lastCropRectWidth
lastCropRectHeight
lastCropRectChecksum
_unknownAttributes
_removeExistingProperties
_localRecordHasAdditionalProperties
_lastCropRectX
_lastCropRectY
_lastCropRectWidth
_lastCropRectHeight
_lastCropRectChecksum
TB,R,V_localRecordHasAdditionalProperties
Ti,R,V_lastCropRectX
Ti,R,V_lastCropRectY
Ti,R,V_lastCropRectWidth
Ti,R,V_lastCropRectHeight
T@"NSData",R,&,V_lastCropRectChecksum
initWithName:
addType:
addTypes:
types
setGrouping:
grouping
isPrimary
setIsPrimary:
_types
_primary
propertyIsValidForPerson:
setImageData:cropRectX:cropRectY:cropRectWidth:cropRectHeight:
setImageData:
fullName
setValueInTemporaryCache:forProperty:
initWithPerson:
foundProperties
_person
_personToGroupPropertyMap
groupPropertyForPersonProperty:
copyParsedRecordWithSource:outRecordType:
_drainExistingProperties
initWithPerson:removeExistingProperties:
initWithGroup:removeExistingProperties:
recordIsGroup
setRecordIsGroup:
_recordIsGroup
_importingToExistingGroup
TB,V_recordIsGroup
searchQuery:returnedResults:
searchQuery:finishedWithError:
searchQuery:returnedTotalCount:
initWithSearchString:source:account:includeSourceInResults:includePhotosInResults:
initWithSearchString:source:account:includeSourceInResults:
initWithSearchString:source:account:
error
setConnection:
connection
runPredicate
runPredicateWithDelegate:
_errorForDAStatusCode:
_searchQueryIsDone
searchString
setSearchString:
includeSourceInResults
setIncludeSourceInResults:
includePhotosInResults
setIncludePhotosInResults:
_connection
_searchQuery
_searchResults
_doneLock
_error
_includeSourceInResults
_includePhotosInResults
_searchString
T@"DADConnection",&,N
T@"NSString",C,N,V_searchString
TB,N,V_includeSourceInResults
TB,N,V_includePhotosInResults
T@"<ABPredicateDelegate>",N,V_delegate
Ti,R,N
newAddressBookRecordWithSource:
localizedStringForKey:formatArg:
timerWithTimeProvider:
shouldCheckTime
initWithTimeProvider:
start
isStarted
checkValidity
ticks
setTicks:
timeProvider
startTime
setStartTime:
valid
setValid:
_valid
_ticks
_timeProvider
_startTime
TQ,N,V_ticks
T@"<ABVCardTimeProvider>",R,N,V_timeProvider
T@"NSDate",&,N,V_startTime
TB,N,V_valid
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
initWithPerson:property:identifier:
initWithPerson:property:identifier:type:
initWithDictionaryRepresentation:
initWithDictionaryRepresentation:addressBook:
dictionaryRepresentation
dictionaryRepresentation:isDirty:
displayName
label
nonLocalizedLabel
identifier
type
ABPerson
_abUid
recheckAddressBook
_abIdentifier
_type
_dirty
_label
_abDatabaseUUID
_lookupNotFound
_lookupChanged:
_runLookup
_queueLookup
_unqueueLookup
_postEntryChanged
abDatabaseUUID
_entryIdentityChanged:
save
_delayedLookup
sharedInstance
sharedInstanceWithAddressBook:
reportFavoritesIssue:
shouldNotReportFavoritesError:
_loadListWithAddressBook:
_loadList
_scheduleSave
entries
isFull
entriesForPeople:
entriesForPerson:
_isValueForEntry:equalToValue:
entryFromEntries:type:property:identifier:value:label:
entryFromEntries:type:property:value:label:
entryWithType:forPerson:property:identifier:
entryWithIdentifier:forPerson:
containsEntryWithIdentifier:forPerson:
containsEntryWithType:forPerson:property:identifier:
addEntryForPerson:property:withIdentifier:
_addEntryToMap:
_removeEntryFromMap:withUid:
saveImmediately
_postChangeNotification
_listChangedExternally
addEntry:
removeEntryAtIndex:
moveEntryAtIndex:toIndex:
recacheIdentitiesSoon
entryIsDuplicateAndThusRemoved:oldUid:
removeAllEntries
_list
_uidToEntry
_flags
bindPlaceholderStringOfCount:
predicateForAllContacts
predicateForNoContacts
predicateForContactsWithUUIDs:ignoreUnifiedIdentifiers:
predicateForContactsWithLegacyIdentifier:
predicateForContactsMatchingName:addressBook:
predicateForContactsInGroupWithIdentifier:
predicateForContactsInContainerWithIdentifier:
predicateForContactsMatchingMultivalueProperty:value:
predicateForSingleContactMatchingMultivalueProperty:value:
predicateForContactsMatchingOrganizationName:
predicateForContactsInRange:sortOrder:
_sqlListOfLength:
_sqlValuesTableOfLength:columnCount:
predicateForContactsInRange:allowedStoreIdentifiers:sortOrder:
predicateForContactsMatchingPhoneNumber:country:homeCountryCode:prefixHint:groupIdentifiers:limitToOneResult:
predicateForContactsMatchingPhoneNumbers:containerIdentifiers:map:
predicateForContactsMatchingMultivalueProperty:values:groupIdentifiers:containerIdentifiers:limitToOneResult:map:
predicateForContactsMatchingPreferredChannel:limitOne:
predicateForMeContact
predicateForContactsMatchingPhoneNumbers:emailAddresses:containerIdentifiers:map:
predicateForContactsMatchingText:tokenizer:collator:matchNameFieldsOnly:
predicateForContactsWithExternalUUIDs:
predicateUnioningPredicate:withPredicate:
bindBlock
setBindBlock:
matchInfoProvider
setMatchInfoProvider:
storage
setStorage:
query
setQuery:
isNullPredicate
setIsNullPredicate:
_isNullPredicate
_bindBlock
_matchInfoProvider
_storage
_query
T@?,C,N,V_bindBlock
T@?,C,N,V_matchInfoProvider
T@,&,N,V_storage
T@"NSString",&,N,V_query
TB,N,V_isNullPredicate
tokenizationSortKeys
setTokenizationSortKeys:
T^{__CFArray=},N,V_tokenizationSortKeys
loadFrameworkAtPath:andStoreHandle:bundle:
loadFrameworkAtPath:andStoreHandle:bundle:logging:
abDefaultCountryCode
abCopyPhoneNumberFromString:
abNormalizedPhoneNumberFromString:
intBinder
setIntBinder:
stringBinder
setStringBinder:
blobBinder
setBlobBinder:
pointerBinder
setPointerBinder:
_intBinder
_stringBinder
_blobBinder
_pointerBinder
T@?,V_intBinder
T@?,V_stringBinder
T@?,V_blobBinder
T@?,V_pointerBinder
initWithAddressBook:predicate:requestedProperties:includeLinkedContacts:sortOrder:managedConfiguration:identifierAuditStlye:
_initSetupPropertySet:includeLinkedContacts:
scopedStoresForManagedConfiguration:
setPropertyIndices:
appendCustomPropertySelectsToQueryString:
prependWithClauseToQueryString:whereClause:
bindWithClause:
appendFromClauseToQueryString:
appendWhereClauseToQueryString:
bindWhereClause:
appendOrderByClauseToQueryString:
appendBindParameterMarkersToQueryString:count:
managedConfiguration
contactidentifierAuditMode
setContactidentifierAuditMode:
statement
setStatement:
sortOrder
scopedStoreIdentifiers
requestedPropertyIdentifiers
requestedMultivalueIdentifiers
propertyIndices
fetchLinkedContacts
needsMultivalueTable
needsMultivalueEntryTable
needsPersonTable
needsPersonLinkTable
requestedImageData
requestedImageCropRect
requestedImageThumbnail
requestedImageFullscreenData
requestedSyncImageData
requestedHasImageData
_fetchLinkedContacts
_needsMultivalueTable
_needsMultivalueEntryTable
_needsPersonTable
_needsPersonLinkTable
_requestedImageData
_requestedImageCropRect
_requestedImageThumbnail
_requestedImageFullscreenData
_requestedSyncImageData
_requestedHasImageData
_sortOrder
_managedConfiguration
_contactidentifierAuditMode
_statement
_scopedStoreIdentifiers
_requestedPropertyIdentifiers
_requestedMultivalueIdentifiers
_propertyIndices
T@"CNManagedConfiguration",R,N,V_managedConfiguration
Tq,N,V_contactidentifierAuditMode
T@"ABSQLPredicate",R,N,V_predicate
T^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB},N,V_statement
TI,R,N,V_sortOrder
T@"NSIndexSet",R,N,V_scopedStoreIdentifiers
T@"NSIndexSet",R,N,V_requestedPropertyIdentifiers
T@"NSIndexSet",R,N,V_requestedMultivalueIdentifiers
T^{__CFDictionary=},N,V_propertyIndices
TB,R,N,V_fetchLinkedContacts
TB,R,N,V_needsMultivalueTable
TB,R,N,V_needsMultivalueEntryTable
TB,R,N,V_needsPersonTable
TB,R,N,V_needsPersonLinkTable
TB,R,N,V_requestedImageData
TB,R,N,V_requestedImageCropRect
TB,R,N,V_requestedImageThumbnail
TB,R,N,V_requestedImageFullscreenData
TB,R,N,V_requestedSyncImageData
TB,R,N,V_requestedHasImageData
initWithAddressBook:predicate:propertyIdentifierSet:includeLinkedContacts:sortOrder:suggestedContactsPerBatch:managedConfiguration:identifierAuditMode:
initWithQuery:batchSize:managedConfiguration:
fetchNextBatchWithReply:
mutableData
setMutableData:
contactIdentifiers
setContactIdentifiers:
matchInfo
setMatchInfo:
incompleteBlob
setIncompleteBlob:
blobBytesWritten
setBlobBytesWritten:
blobLength
setBlobLength:
currentMultivalue
setCurrentMultivalue:
hasFoundAnyImageDataForCurrentContact
setHasFoundAnyImageDataForCurrentContact:
resumeToken
setResumeToken:
currentMultivalueIdentifier
setCurrentMultivalueIdentifier:
currentPropertyID
setCurrentPropertyID:
currentRecordID
setCurrentRecordID:
currentRecordIndividualUniqueIDAuditData
setCurrentRecordIndividualUniqueIDAuditData:
currentRecordLinkedUniqueIDAuditData
setCurrentRecordLinkedUniqueIDAuditData:
maxBufferSize
setMaxBufferSize:
maxContactsPerBatch
setMaxContactsPerBatch:
countOfContactsInBuffer
setCountOfContactsInBuffer:
setManagedConfiguration:
multivaluePropertyIDColumn
setMultivaluePropertyIDColumn:
multivalueIdentifierColumn
setMultivalueIdentifierColumn:
multivalueUUIDColumn
setMultivalueUUIDColumn:
multivalueValueColumn
setMultivalueValueColumn:
multivalueLabelColumn
setMultivalueLabelColumn:
multivalueEntryKeyColumn
setMultivalueEntryKeyColumn:
multivalueEntryValueColumn
setMultivalueEntryValueColumn:
contactLinkUUIDColumn
setContactLinkUUIDColumn:
contactPreferredForImageColumn
setContactPreferredForImageColumn:
personLinkColumn
setPersonLinkColumn:
_hasFoundAnyImageDataForCurrentContact
_currentMultivalueIdentifier
_currentPropertyID
_currentRecordID
_multivaluePropertyIDColumn
_multivalueIdentifierColumn
_multivalueUUIDColumn
_multivalueValueColumn
_multivalueLabelColumn
_multivalueEntryKeyColumn
_multivalueEntryValueColumn
_contactLinkUUIDColumn
_contactPreferredForImageColumn
_personLinkColumn
_mutableData
_contactIdentifiers
_matchInfo
_incompleteBlob
_blobBytesWritten
_blobLength
_currentMultivalue
_resumeToken
_currentRecordIndividualUniqueIDAuditData
_currentRecordLinkedUniqueIDAuditData
_maxBufferSize
_maxContactsPerBatch
_countOfContactsInBuffer
T@"NSMutableData",&,N,V_mutableData
T@"NSMutableSet",&,N,V_contactIdentifiers
T@"NSMutableDictionary",&,N,V_matchInfo
T^{sqlite3_blob=},N,V_incompleteBlob
TQ,N,V_blobBytesWritten
TQ,N,V_blobLength
Tq,N,V_currentMultivalue
TB,N,V_hasFoundAnyImageDataForCurrentContact
Tq,N,V_resumeToken
Ti,N,V_currentMultivalueIdentifier
Ti,N,V_currentPropertyID
Ti,N,V_currentRecordID
T@"NSData",&,N,V_currentRecordIndividualUniqueIDAuditData
T@"NSData",&,N,V_currentRecordLinkedUniqueIDAuditData
TQ,N,V_maxBufferSize
TQ,N,V_maxContactsPerBatch
TQ,N,V_countOfContactsInBuffer
T@"ABBufferQuery",R,N,V_query
T@"CNManagedConfiguration",&,N,V_managedConfiguration
Ti,N,V_multivaluePropertyIDColumn
Ti,N,V_multivalueIdentifierColumn
Ti,N,V_multivalueUUIDColumn
Ti,N,V_multivalueValueColumn
Ti,N,V_multivalueLabelColumn
Ti,N,V_multivalueEntryKeyColumn
Ti,N,V_multivalueEntryValueColumn
Ti,N,V_contactLinkUUIDColumn
Ti,N,V_contactPreferredForImageColumn
Ti,N,V_personLinkColumn
personAddEventWithRecordID:identifier:
personUpdateEventWithRecordID:identifier:imagesChanged:personLink:
personDeleteEventWithRecordID:identifier:externalID:personLink:
unifiedPersonAddEventWithUnifiedIdentifier:
unifiedPersonUpdateEventWithUnifiedIdentifier:
unifiedPersonDeleteEventWithUnifiedIdentifier:
linkEventWithRecordID:identifier:linkToIdentifier:unifiedIdentifier:
unlinkEventWithRecordID:identifier:
setPreferredNameEventWithRecordID:identifier:
setPreferredImageEventWithRecordID:identifier:
meCardChangedEventWithRecordID:identifier:
groupAddEventWithRecordID:identifier:
groupUpdateEventWithRecordID:identifier:
groupDeleteEventWithRecordID:identifier:externalID:
personWithRecordID:identifier:eventType:
unifiedPersonWithIdentifier:eventType:
personWithRecordID:identifier:eventType:imagesChanged:externalID:personLink:
groupWithRecordID:identifier:eventType:externalID:
initWithEntityType:eventType:sequenceNumber:recordID:recordGUID:externalID:imagesChanged:personLink:personLinkUUID:linkToPersonUUID:
descriptionForEntityType:
descriptionForEventType:
isSequenceNumber:equalToOther:
entityType
eventType
sequenceNumber
recordID
recordGUID
externalID
imagesChanged
personLink
personLinkUUID
linkToPersonUUID
_imagesChanged
_entityType
_eventType
_recordID
_personLink
_sequenceNumber
_recordGUID
_externalID
_personLinkUUID
_linkToPersonUUID
Ti,R,N,V_entityType
Ti,R,N,V_eventType
Tq,R,N,V_sequenceNumber
Ti,R,N,V_recordID
T@"NSString",R,N,V_recordGUID
T@"NSString",R,N,V_externalID
TB,R,N,V_imagesChanged
Ti,R,N,V_personLink
T@"NSString",R,N,V_personLinkUUID
T@"NSString",R,N,V_linkToPersonUUID
serializeDictionary:
serializeString:
strategyWouldAlterString:
regex
charactersToTriggerStrategy
stringWithType:info:
dictionaryWithType:info:
parseString:intoTypeAndInfo:
activityAlertWithString:
typeFromDictionary:
infoFromDictionary:
@24@0:8@16
q24@0:8Q16
Q24@0:8Q16
B16@0:8
S16@0:8
Q16@0:8
@"NSString"
B24@0:8^v16
B24@0:8@16
B24@0:8^{CPSqliteConnection=^{CPSqliteDatabase}^{sqlite3}^{__CFDictionary}^{__CFDictionary}^v^?^?^vIB}16
i24@0:8^{CPSqliteConnection=^{CPSqliteDatabase}^{sqlite3}^{__CFDictionary}^{__CFDictionary}^v^?^?^vIB}16
B36@0:8@16i24^{CPSqliteConnection=^{CPSqliteDatabase}^{sqlite3}^{__CFDictionary}^{__CFDictionary}^v^?^?^vIB}28
@24@0:8^v16
@32@0:8^v16@24
v16@0:8
v20@0:8B16
i16@0:8
v24@0:8@16
B28@0:8^v16i24
v24@0:8Q16
@16@0:8
^v16@0:8
v24@0:8^v16
v20@0:8i16
@"ACAccountStore"
@44@0:8^v16@24^v32i40
d16@0:8
v24@0:8d16
@20@0:8i16
v36@0:8^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB}16^i24i32
@28@0:8^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB}16i24
@28@0:8@16B24
@24@0:8B16i20
^{__CFArray=}
@"NSArray"
@32@0:8@16^v24
@56@0:8@16^v24^v32@40^v48
@60@0:8@16^v24^v32@40B48^v52
@48@0:8@16@24@32^v40
@52@0:8@16@24@32B40^v44
@56@0:8@16@24@32B40B44^v48
@40@0:8@16@24^v32
@36@0:8@16q24i32
@40@0:8^v16^v24@32
@76@0:8@16@24@32I40@44@52^v60r^^{__CFDictionary}68
@48@0:8@16I24B28^v32r^^{__CFDictionary}40
v44@0:8@16I24^v28@36
v48@0:8@16I24B28^v32@40
v44@0:8^{sqlite3_context=}16@24^^{sqlite3_value}32i40
v40@0:8@16^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB}24^i32
v40@0:8d16^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB}24^i32
v40@0:8I16B20^v24@32
@40@0:8I16B20^v24r^^{__CFDictionary}32
@32@0:8^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB}16Q24
@32@0:8@16q24
q16@0:8
v24@0:8q16
@"<NSObject>"
@32@0:8@16@24
^{?=***I*I*I}16@0:8
*16@0:8
{?="internationalCallingCode"*"nationalPrefix"*"carrierCode"*"carrierCodeLen"I"areaCode"*"areaCodeLen"I"number"*"numberLen"I}
@40@0:8@16^v24^v32
@44@0:8@16^v24B32^v36
@48@0:8@16^v24B32B36^v40
@44@0:8@16q24i32^v36
@28@0:8i16^v20
@32@0:8^v16^v24
v24@0:8@?16
B32@0:8@16^v24
I16@0:8
v20@0:8I16
@?16@0:8
@"NSThread"
@"<ABSearchOperationDelegate>"
@"NSPredicate"
v28@0:8^v16B24
B44@0:8^v16@24@32B40
@28@0:8^v16B24
v36@0:8^v16@24i32
v44@0:8@16B24^Q28^Q36
v24@0:8^Q16
@28@0:8i16q20
B24@0:8q16
@"NSMutableDictionary"
@40@0:8{_NSRange=QQ}16Q32
@24@0:8Q16
B20@0:8S16
S20@0:8B16
@32@0:8S16S20^q24
@28@0:8@16i24
@28@0:8^v16i24
@40@0:8^v16@24@32
^{__CFArray=}16@0:8
v28@0:8@16B24
B28@0:8^v16I24
B20@0:8I16
B24@0:8I16i20
^{__CFString=}24@0:8@16
v40@0:8@16@24@32
@36@0:8@16@24i32
^v20@0:8I16
@40@0:8I16@20B28^q32
@32@0:8B16^q20B28
@28@0:8I16@20
@36@0:8^v16^q24B32
@40@0:8@16@24@32
v52@0:8^v16i24^@28@36@44
@32@0:8@16^@24
@20@0:8B16
v56@0:8@16@24@32@40@48
@40@0:8B16@20@28B36
i24@0:8B16i20
i20@0:8B16
B20@0:8i16
@36@0:8Q16B24i28B32
@28@0:8i16B20B24
v44@0:8Q16B24i28B32@36
@32@0:8i16i20Q24
@24@0:8^B16
B24@0:8i16i20
@"NSMutableData"
@"ABVCardWatchdogTimer"
v36@0:8@16I24@?28
v48@0:8@16@24@32@40
i48@0:8@16^{__CFString=}24^v32^v40
i40@0:8@16^v24^v32
B52@0:8^v16i24@28@36@44
B28@0:8@16I24
B36@0:8@16I24@?28
B32@0:8@16@24
B32@0:8^v16r^^{__CFArray}24
^v32@0:8^i16r^^{__CFArray}24
^{__CFArray=}24@0:8r^^{__CFArray}16
@24@0:8r^^{__CFArray}16
@"ABVCardValueSetter"
@"ABVCardLexer"
@"NSData"
@"NSMutableArray"
@"NSMutableString"
B28@0:8^v16B24
^v32@0:8^v16^I24
B40@0:8@16i24i28i32i36
v28@0:8@16I24
^{__CFDictionary=}16@0:8
i20@0:8i16
v32@0:8@16@24
v32@0:8@"DASearchQuery"16@"NSArray"24
v32@0:8@"DASearchQuery"16@"NSError"24
v32@0:8@"DASearchQuery"16@"NSNumber"24
@48@0:8@16^v24@32B40B44
@44@0:8@16^v24@32B40
@40@0:8@16^v24@32
i24@0:8q16
@"DADConnection"
@"DAContactsSearchQuery"
@"NSConditionLock"
@"<ABPredicateDelegate>"
^v24@0:8^v16
@"<ABVCardTimeProvider>"
@"NSDate"
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@"NSDate"16@0:8
@32@0:8^v16i24i28
@36@0:8^v16i24i28i32
v32@0:8^@16^B24
@52@0:8@16i24i28i32@36@44
@48@0:8@16i24i28@32@40
@36@0:8i16^v20i28i32
B28@0:8i16^v20
B36@0:8i16^v20i28i32
B32@0:8^v16i24i28
v28@0:8@16i24
v32@0:8q16q24
B28@0:8@16i24
^{__CFDictionary=}
{?="dirty"b1"postCount"b1"needsReload"b1"unused"b29}
@28@0:8i16@20
@36@0:8{_NSRange=QQ}16i32
@32@0:8Q16Q24
@44@0:8{_NSRange=QQ}16@32i40
@60@0:8@16@24@32@40@48B56
@56@0:8i16@20@28@36B44@48
@48@0:8@16@24@32@40
@44@0:8@16^{__CFStringTokenizer=}24^{UCollator=}32B40
v24@0:8^{__CFArray=}16
B40@0:8@16^^v24^@32
B44@0:8@16^^v24^@32B40
@64@0:8^v16@24^{__CFSet=}32B40I44@48q56
v28@0:8^{__CFSet=}16B24
v24@0:8^{__CFDictionary=}16
v32@0:8@16Q24
^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB}16@0:8
v24@0:8^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB}16
@"CNManagedConfiguration"
@"ABSQLPredicate"
^{CPSqliteStatement=^{CPSqliteConnection}^{sqlite3_stmt}dB}
@"NSIndexSet"
@72@0:8^v16@24^{__CFSet=}32B40I44Q48@56q64
@40@0:8@16Q24@32
^{sqlite3_blob=}16@0:8
v24@0:8^{sqlite3_blob=}16
@"NSMutableSet"
^{sqlite3_blob=}
@"ABBufferQuery"
@36@0:8i16@20B28i32
@40@0:8i16@20@28i36
@44@0:8i16@20@28@36
@36@0:8i16@20@28
@32@0:8i16@20i28
@48@0:8i16@20i28B32@36i44
@40@0:8i16@20i28@32
@76@0:8i16i20q24i32@36@44B52i56@60@68
B32@0:8q16q24
B24@0:8@"NSString"16
@"NSString"24@0:8@"NSString"16
v32@0:8@16@?24
