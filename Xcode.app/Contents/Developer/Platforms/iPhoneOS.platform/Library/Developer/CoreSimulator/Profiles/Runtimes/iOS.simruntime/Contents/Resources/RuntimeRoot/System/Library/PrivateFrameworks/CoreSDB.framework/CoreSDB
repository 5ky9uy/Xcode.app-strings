@(#)PROGRAM:CoreSDB  PROJECT:CoreSDB-
333333
CSDBRecord
CSDBRecordSQLite
CSDBRecordCopyChangedProperties
/AppleInternal/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreSDB_Sim/CoreSDB-191/Source/Database/CSDBRecord.m
record
CSDBRecordMarkPropertyChanged
CSDBRecordGetProperty
CSDBRecord/%s instance %p:
 %s (%d) = 
(nil)
CSDBRecordMarkChanged
CSDBRecordStoreSetValueForProperty
store
store->properties
CSDBRecordStoreCopyValueForProperty
CSDBRecordStoreSetSetupHandler
CSDBRecordStoreGetDatabase
store->database
CSDBRecordStoreLogChanges
CSDBRecordStoreLogBasicChanges
CSDBRecordStoreIsLoggingChanges
__CSDBRecordSequenceNumber
CSDBRecordInvalidateRecord
recordRef
CSDBRecordStoreSaveWithPreAndPostCallbacksAndTransactionType
_Bool CSDBRecordStoreSaveWithPreAndPostCallbacksAndTransactionType(CSDBRecordStoreRef, CSDBRecordStoreSaveCallback, CSDBRecordStoreSaveCallback, CSDBRecordConflictPolicy, CSDBSqliteTransactionType, CFErrorRef *)
%s: database changed externally
CSDBRecordStoreCreateTablesForClass
classDescriptor
CREATE TABLE IF NOT EXISTS 
constraint->propertyCount > 0
hasPrimaryKeyConstraint == false
ROWID
 (%@ INTEGER PRIMARY KEY
 AUTOINCREMENT, 
, PRIMARY KEY (
, UNIQUE (
Changes (record INTEGER, type INTEGER
BasicChanges (record INTEGER PRIMARY KEY, type INTEGER, sequenceNumber INTEGER);
CSDBRecordStoreRegisterClass
store && classDescriptor
store->classes
CSDBRecordStoreCreateJoinableSelectPrefixFromRecordDescriptor
tableAlias!=NULL && CFStringGetLength(tableAlias)
CSDBRecordStoreCreateSelectPrefixWithTableExpressionAndAlias
tableExpression!=NULL && CFStringGetLength(tableExpression)
CSDBRecordStoreRemoveRecord
Error saving record store: %s/%i
(no domain)
<CSDBRecord: %p %s>
_updateDetachedRecord
result == record
 WHERE ROWID = ?;
_addChangeActions
record->store
_sqliteDatabaseSetupHandler
db && c && store
_getReaderConnection
%llu
DELETE FROM %s WHERE ROWID = ?;
INSERT INTO %sChanges (ROWID, record, type
) VALUES(IFNULL(1 + (SELECT MAX(ROWID) FROM %sChanges), 0), ?, ?
INSERT OR REPLACE INTO %sBasicChanges (record, type, sequenceNumber)
 VALUES(?, ?, ?);
CSDBRecordWasPropertyMarkedAsChanged
CSDBRecordStoreUpdateRecord
record && context && context->connection
record->changes==NULL
_saveProperty
c && c->connection && key
 BLOB
 INTEGER
 TEXT
 UNIQUE
 NOT NULL
 DEFAULT 0
SELECT 
DISTINCT 
, NULL
 FROM 
(%@)
 AS %@
CSDBRecordStoreGetCache
_CSDBRecordStoreAddRecord
record && store
CSDBRecordStoreRemoveRecordInternal
CSDBRecordDeleteInfo
<CSDBRecordDeleteInfo: %p>
CSDBRecordStoreGetDeletedRecords
vacuum;
Unable to vacuum database. SQLiteResult: %d error message: %s
SQLite vacumm was successful.
Unable to vaccum db, NULL connection.
PRAGMA wal_checkpoint(RESTART);
Unable to wal_checkpoint database. SQLiteResult: %d error message: %s
SQLite wal_checkpoint was successful.
%@-shm
%@-wal
%@-journal
Unlinking the source database %@.
Backing up database to path %@
Destination path: %@
Source path: %@
Opened the source database to force WAL journal mode.
pragma JOURNAL_MODE=wal
Closing the source database to clean up any support files.
Unable to open the source database. SQLite error: [%d] %s
Opened the source database.
Unable to open the destination database. SQLite error: [%d] %s
Opened the destination database.
Replacing messages database from restore failed. SQLite error: [%d] Destination: %s Source: %s
Database replacement was successful.
Unable to close the destination database. SQLite error: [%d] %s
Closed the destination database.
Unable to close the source database. SQLite error: [%d] %s
Closed the source database.
com.apple.coresdb.mandatory_db_reconnect_required.
v8@?0
CSDBSQLEXPLAIN
CSDBSQLEXPLAIN_TABLES
CSDBSQLEXPLAIN_ONLY_NON_INDEXED
EXPLAIN QUERY PLAN %s
----------------------------
Set Busy timeout to %f
BEGIN IMMEDIATE;
BEGIN EXCLUSIVE;
BEGIN;
COMMIT;
ROLLBACK;
?, ?
ROWID, 
INSERT INTO 
) VALUES (
 (ROWID) VALUES ( NULL );
 (ROWID) VALUES ( ? );
UPDATE 
 SET 
 = ?
SELECT key, value FROM _SqliteDatabaseProperties WHERE key LIKE ?;
%s: %s
CSDBSqliteConnectionCopyValuesForPropertiesLike
INSERT OR REPLACE INTO _SqliteDatabaseProperties VALUES (?, ?);
sqlite3 error in %s: %s
/AppleInternal/BuildRoot/Library/Caches/com.apple.xbs/Sources/CoreSDB_Sim/CoreSDB-191/Source/Database/CSDBSqliteUtilities.m
void CSDBSetCorruptedDatabaseHandler(CSDBCorruptedDatabaseHandler)
CSDBSetCorruptedDatabaseHandler
Unexpected nil '%@' in %s at %s:%d. %@
function
ASSERTION FAILED: %@
setting corruption handler
setting NULL corruption handler (set to default)
No database corruption handler found - resetting to default handler
-corrupted-(%f).%@
encountered corruption error %d while accessing %@, attempting to set aside database here: %@. Called from: %s
Database at path %@ is corrupt. Copying it to %s for further investigation. Called from: %s.
SQLITE_CORRUPT handling code is unable to set aside the corrupt database because the path is unknown.  db=%p, path=%@. Called from: %s.
SQLITE_CORRUPT encountered error %d while accessing %s, exiting with default corruption handler! Called from: %s
encountered corruption error %d while accessing %@, attempting to set aside database here: %s. Called from: %s
Database at path %s is corrupt. Copied it to %s for further investigation. Called from: %s.
SQLITE_CORRUPT handling code is unable to delete the corrupt database because the path is unknown.  db=%p, path=%s. Called from: %s
PRAGMA integrity_check;
SQLite confirms DB is corrupted. About to move it aside
Exiting as we were handed a false negative corruption by sqlite and we want to clean up bad state in memory
We had a corruption but had a nil DB path
LogAllIOErrors
CSDBSqliteStepWithConnection
%s does not handle raw data types yet.
void CSDBSqliteBindColumnValue(CSDBSqliteStatement *, CSDBWriteColumnDescriptor *)
Invalid parameters passed into CSDBSqliteBindInt64 s==NULL ? %@  bindIndex = %d
Invalid parameters passed into CSDBSqliteBindInt s==NULL ? %@  bindIndex = %d
Invalid parameters passed into CSDBSqliteBindDouble s==NULL ? %@  bindIndex = %d
Invalid parameters passed into CSDBSqliteBindNull s==NULL ? %@  bindIndex = %d
Invalid parameters passed into CSDBSqliteBindBlobFromCFData s==NULL ? %@  bindIndex = %d  data == NULL ? %@
CSDBSqliteStatementReset
CSDBSqliteStatementSendResults
SELECT value FROM _SqliteDatabaseProperties WHERE key = ?;
_ClientVersion
PRAGMA integrity_check
This DB passed its integrity check.
PRAGMA page_count
PRAGMA freelist_count
SQLite error %d while attempting to get page_count.  Bailing on the incremental vacuum.
SQLite error %d while attempting to get freelist_count.  Bailing on the incremental vacuum.
Max Free Pages: %lld
Page count: %lld
Free page count: %lld
Pages in use: %lld
Load factor: %f
Not doing incremental vacuum we are either a) above a load factor of 0.85 or the free list is less than max free.
PRAGMA incremental_vacuum(%lld)
Unable to incrementally vacuum database. SQLiteResult: %d Error Message: %s
Incremental vacuum was successful.
Migration
version conflict: expected %d, got %d
read schema version: %d error: %d
version conflict resolved externally
DataMigrator did not work -- we are being forced to delete the database and create it ourselves.
Migrating the database failed. We must delete this database and start fresh
:memory:
Fixing permissions on %s
Error %s setting permissions on %s
Database
PRAGMA cache_size=%d;
checkConnectionStatus
Encountered SQLite error %d: %s
invokeDataMigrator
db->migrationShouldLaunchDaemon
/System/Library/PrivateFrameworks/DataMigration.framework/DataMigration
DMPerformMigration
Database version conflict detected: %s
migration daemon failed to upgrade
migration was performed, but the version is still wrong. deleting database file.
doing the migration
set schema version %d (Read: %d)
Migration handler failed to upgrade: moving-aside database file
Migration handler: client is upgrading database in background
Incompatible versions detected, but migration handler is incapable of upgrading: moving-aside database file
Incompatible versions detected, but no migration handlers provided: moving-aside database file
Moving aside DB due to failed migration / incompatibility.
.incompatible.unknownversion.sqlitedb
.incompatible.v%i.sqlitedb
Unable to cleanup corrupt source database.
Cleaned up the source database.
Setting up a new database at path %s.
CREATE TABLE IF NOT EXISTS _SqliteDatabaseProperties (key TEXT, value TEXT, UNIQUE(key));
createAndSetupNewDatabase
error %d creating properties table: %s
Could not set up new messages database -- unable to create database connection
pragma legacy_file_format = 0;
CSDBSqliteDatabaseSetNewFileFormatPragma
%02x
CSDBSQLDEBUG
CSDBSqlite: %s
Time: %llu ms
----- Explaining Query -----
detail
WITH INDEX
USING PRIMARY KEY
 ***** NO INDEX *****
--------------------------
 !!!!! NOT INDEXED !!!!!
--------------------------
--------------------------
 ==>>%s %s
%s Could not compile statement %s: %s
warning: 
ALTER TABLE
duplicate column name
no such table: _SqliteDatabaseProperties
CREATE TRIGGER
already exists
SQLite error in function: %s message: %s sql: %s
%s%s%s.XXXXXX
void _CSDBHandleCorruptError(CSDBSqliteDatabase *, sqlite3 *, int, const char *, sqlite3_stmt *)
_CSDBHandleCorruptError
handler
SQLite
SQLite error in function: %s for handle: %s
Cleaning up corrupt database: %@
_CSDBSqliteDatabaseCloseAndDelete unable to truncate database: %d; %s
_CSDBSqliteDatabaseCloseAndDelete unable to close the source database. SQLite error: [%d] %s
_CSDBSqliteDatabaseCloseAndDelete Closed the source database after truncation.
IN (
? ) 
Starting up database thread
_CSDBThreadObjectQueue-%@
%s-%@
_CSDBThreadObjectQueueContext
**************************************************************************
****** Database access off the database thread, please file a radar ******
com.apple.CSDBThreadedRecordStore.recordStoreQueue.%@
No DB path block passed into CSDBThreadedRecordStore %@
No DB path passed into CSDBThreadedRecordStore %@
Initializing database.
Initializing database on thread: %@
CSDBThreadedRecordStore
Using DB path %@
Unable to create a CSDBRecordStore for path %@
Unable to change permissions on messages database.
Unable to get a db reference.
sqlite3_db_config lookaside set {result: %d, size: %d, count: %d, path: %@}
_CSDBThreadObject
CSDBThreadedRecordStore
fileSystemRepresentation
initWithFormat:
UTF8String
initWithBytes:length:encoding:
stringByAppendingString:
containsObject:
addObject:
stringWithFormat:
sharedInstance
isInternalInstall
stringByDeletingPathExtension
mutableCopy
timeIntervalSinceReferenceDate
pathExtension
appendFormat:
lowercaseString
isEqualToString:
copy
pairWithFirst:second:
setObject:forKey:
removeObjectForKey:
initWithCapacity:
stringWithString:
currentRunLoop
init
dealloc
performBlock:
currentThread
_threadedMain
initWithIdentifier:qosClass:
thread
performBlock:afterDelay:
performBlock:waitUntilDone:
isCurrentThreadOtherwiseAssert:
_thread
_identifier
_runLoop
_runLoopSource
_queueContext
_queue
initWithIdentifier:qosClass:lookAsideConfig:
ownsCurrentThreadOtherwiseAssert:
setupDatabaseWithAllowLocalMigration:pathBlock:setupStoreHandler:connectionInitializer:versionChecker:migrationHandler:schemaVersion:dataProtectionClass:registerBlock:exclusiveOwnership:
setupDatabaseWithAllowLocalMigration:pathBlock:setupStoreHandler:connectionInitializer:versionChecker:migrationHandler:schemaVersion:dataProtectionClass:registerBlock:
registerClass:
teardownDatabase
_teardownDatabaseOnQueue
_recordStore
_recordStoreQueue
_lookAsideConfig
_wantsRegister
v16@0:8
@28@0:8@16S24
@16@0:8
v24@0:8@?16
v32@0:8@?16d24
v28@0:8@?16B24
B20@0:8B16
@"NSThread"
@"NSString"
@"NSRunLoop"
^{__CFRunLoopSource=}
@"NSObject<OS_dispatch_queue>"
@40@0:8^{__CFString=}16S24{CSDBLookAsideBufferConfig=iib1}28
v80@0:8B16@?20^?28^?36^?44^?52i60I64@?68B76
v76@0:8B16@?20^?28^?36^?44^?52i60I64@?68
v24@0:8r^{?=*^?^?^?^?^?^?C^vi^{?}^v*^?^?i^{?}i^?i}16
^{CSDBRecordStore=^{__CFString}^{CSDBSqliteDatabase}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFDictionary}^{__CFSet}B{?=b1b1}^?^{__CFSet}^{__CFDictionary}^vi{?=ii^q^{__CFSet}}}
@"_CSDBThreadObject"
{CSDBLookAsideBufferConfig="lookAsideSlotSize"i"lookAsideSlotCount"i"configured"b1}
