ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
0123456789
@(#)PROGRAM:libresolv.9  PROJECT:libresolv-67.40.1
mdns
A    
NS   
MD   
MF   
CNAME
SOA  
MB  
MG   
MR   
NULL 
WKS  
PTR  
HINFO
MINFO
MX   
TXT  
PR   
AFSDB
X25  
ISDN 
RT   
NSAP 
NSPTR
SIG  
KEY  
PX   
GPOS 
AAAA 
LOC  
NXT  
EID  
NIMLC
SRV  
ATMA 
NAPTR
KX   
CERT 
A6   
DNAME
SINK 
OPT  
TKEY 
TSIG 
IXFR 
AXFR 
MAILB
MAILA
ANY  
ZXFR 
?????
NULL
ISDN
NSAP
NSAP_PTR
GPOS
AAAA
NIMLOC
ATMA
CERT
SINK
TKEY
TSIG
IXFR
AXFR
ZXFR
NONE
-nil-
Timeout
Send failed
Receive failed
status %u
Xid: %u
QR: Query
QR: Reply
Server: -nil-
Server: %s
%%%s
Opcode: 
Standard
Reserved (%hu)
AA: Authoritative
AA: Non-Authoritative
TC: Truncated
TC: Non-Truncated
RD: Recursion desired
RD: No recursion desired
RA: Recursion available
RA: No recursion available 
Rcode: 
No error
Format error 
Server failure
Name error 
Not implemented
Refused
Name exists
RR Set exists
RR Set does not exist
Not authoritative
Record zone does not match section zone
Question (%hu):
Answer (%hu):
Authority (%hu):
Additional records (%hu):
ip6.arpa
ip6.int
%s %s %s
%s %s %s 
 %s %s %u %u %u %u %u
 UNKNOWN PROTOCOL %u
 %s %s
 %u %s
 "%s"
 %hu %s
 %sm
 %hu %hu %hu %s
 %u 
%d %.2d %.2d.%.3d %c
%d.%.2d
%ld.%.2ld
DNS client %d
resolver dir mod time = %u
resolver dir stat time = %u
resolver dir stat latency = %u
Name: -nil-
Name: %s
Flags:
 None
 Debug
 DirCheck
 IPv6
 SkipAAAA
 Default
Domain: %s
Search Order: %d
Total Timeout: %d
Retry Timeout: %d
Retry Attempts: %d
Server%s:
  %u: %s
Search List:
  %u: %s
Sortlist:
  %u: 
/etc/resolv.conf
/etc/resolver
com.apple.system.dns
*MDNS*
%s.%s.
%s.%s
default
RES_RETRY_TIMEOUT
RES_RETRY
search
nameserver
port
total_timeout
timeout
search_order
pdns
ndots:
ndots
nibble:
nibble
nibble2:
nibble2
timeout:
attempts:
attempts
bitstring:
bitstring
v6revmode:
v6revmode
debug
no_tld_query
inet6
rotate
no-check-names
edns0
dname
%s/%s
sortlist
options
domain
com.apple.system.dns.delay
com.apple.system.dns.resolver.dir
/private/etc/resolver
%s%s
DSTKEYPATH
%02x
/%d]
; serial
; refresh
; retry
; expiry
; minimum
%u %u 
%u %u %u 
 %u ( 
0x%04x %u %u
 ; key_tag= %u
%s %d %d %lu 
%d %d %d 
record too long to print
%u bytes
unknown RR type
RR format error
\# %u (
; %s
%02x 
HMAC-MD5.SIG-ALG.REG.INT
%d%c
QUERY
IQUERY
CQUERYM
CQUERYU
NOTIFY
UPDATE
ZONEINIT
ZONEREF
;; res options:
;; ns_initparse: %s
;; ->>HEADER<<- opcode: %s, status: %s, id: %d
; flags:
; %s: %d
, %s: %d
address
name server
mail destination (deprecated)
mail forwarder (deprecated)
canonical name
start of authority
mailbox
mail group member
mail rename
null
well-known service (deprecated)
domain name pointer
host information
mailbox information
mail exchanger
text
responsible person
DCE or AFS server
X25 address
ISDN address
router
nsap address
signature
mapping information
geographical position (withdrawn)
IPv6 address
location
next valid name (unimplemented)
endpoint identifier (unimplemented)
NIMROD locator (unimplemented)
server selection
ATM address (unimplemented)
tkey
transaction signature
incremental zone transfer
zone transfer
compressed zone transfer
mailbox-related data (deprecated)
mail agent (deprecated)
URN Naming Authority
Key Exchange
Certificate
IPv6 Address
Kitchen Sink (experimental)
EDNS Options
"any"
BADTYPE
TYPE%d
BADCLASS
CLASS%d
init
aaonly(unimpl)
usevc
primry(unimpl)
igntc
recurs
defnam
styopn
dnsrch
insecure1
insecure2
noaliases
dnssec
no-tld-query
?0x%lx?
; error: unknown LOC RR version
%d %.2d %.2d.%.3d %c %d %.2d %.2d.%.3d %c %s%d.%.2dm %sm %sm %sm
%04d%02d%02d%02d%02d%02d
CLASS
type
;; memory allocation failure
;; ns_parserr: %s
;; %s SECTION:
%s, type = %s, class = %s
; EDNS: version: %u, udp=%u, flags=%04x
;; ns_sprintrr: %s
ZONE
PREREQUISITE
ADDITIONAL
ANSWER
AUTHORITY
CHAOS
HESIOD
NOERROR
no error
FORMERR
format error
SERVFAIL
server failed
NXDOMAIN
no such domain name
NOTIMP
not implemented
REFUSED
refused
YXDOMAIN
domain name exists
YXRRSET
rrset exists
NXRRSET
rrset doesn't exist
NOTAUTH
not authoritative
NOTZONE
Not in zone
BADSIG
bad signature
BADKEY
bad key
BADTIME
bad time
%lu.%.2lu
START dname='%s' class=%s, zsize=%ld, naddrs=%d
get the soa, and see if it has enough glue
get the ns rrset and see if it has enough glue
get the missing glue and see if it's finally enough
FINISH n=%d (%s)
satisfy(%s): %d
add_addrs: %d
get_soa: do_query('%s', %s) failed (%d)
get_soa: CNAME or DNAME found
get_soa: ns_parserr(%s, %d) failed
get_soa: ns_samedomain('%s', '%s') == 0
get_soa: ns_samename() || !ns_samedomain('%s', '%s')
get_soa: zname(%d) too small (%d)
get_soa: ns_name_uncompress failed
get_soa: save_ns failed
get_soa: out of labels
do_query: res_nmkquery failed
do_query: res_nsend failed
do_query: res_nsend returned 0
do_query: ns_initparse failed
do_query: ns_parserr failed
save_ns: ns_parserr(%s, %d) failed
save_ns: malloc failed
save_ns: ns_name_uncompress failed
save_ns: strdup failed
save_ns: save_r('%s', %s) failed
save_a: ns_parserr(%s, %d) failed
save_a: malloc failed
get_ns: do_query('%s', %s) failed (%d)
get_ns save_ns('%s', %s) failed
get_glue: do_query('%s', %s') failed
get_glue: do_query('%s', %s') CNAME or DNAME found
get_glue: save_r('%s', %s) failed
get_glue: removing empty '%s' NS
;; res_findzonecut: 
single
both
LOCALDOMAIN
conf
RES_OPTIONS
;; res_setoptions("%s", "%s")...
ndots=%d
;; res_setoptions("%s", "%s")..
;; res_init()... default dnsrch list:
..END..
debug
;; res_nmkquery(%s, %s, %s, %s)
;; res_opt()... ENDS0 DNSSEC
;; res_nopt()
self.thread.%lu
;; res_query(%s, %d, %d)
;; res_nquery: SOA minimum TTL = %d
;; rcode = %d, ancount=%d
;; res_nquerydomain(%s, %s, %d, %d)
<Nil>
HOSTALIASES
.e.f.ip6.arpa
;; res_query_mDNSResponder callback [%s %hu %hu]: error %u
;; res_query_mDNSResponder callback [%s %hu %hu]: malformed reply
;; res_query_mDNSResponder callback [%s %hu %hu]: name mismatch
;; res_query_mDNSResponder callback [%s %hu %hu]: insufficient buffer space for reply
;; res_query_mDNSResponder callback for %s %hu %hu
;; cancelled
;; res_query_mDNSResponder
;; res_query: send error
;; res_nquery: retry without EDNS0
;; res_query: mkquery failed
;; res_send()
;; cancelled
;; Querying server (# %d) address = %s
;; got answer:
socket(vc)
connect(vc)
write failed
read failed
;; response truncated
;; undersized: %d
read(vc)
;; old answer (unexpected):
res_send: %s: %s
res_send: %s ([%s].%s): %s
socket(dg)
;; new DG socket
getifaddrs
setsockopt
sendto
;; timeout
select
recvfrom
;; old answer:
;; not our server:
server rejected query with EDNS0:
;; wrong query name:
server rejected query:
;; truncated answer
