com.apple.SafariBookmarksSyncAgent.Push
v8@?0
com.apple.icloud-container.
com.apple.das.overrideRateLimiting
com.apple.private.safari.can-use-bookmarks-sync-agent
DebugHierarchyCheckerEnabled
LastDatabaseServerChangeToken.
CloudSettings
NewestLaunchedSafariBookmarksSyncAgentVersion
604.4
Bookmarks Sync Agent State
localMigrationState
@"NSDictionary"8@?0
com.apple.Safari.CloudBookmarks.SafariBookmarksSyncAgent.%@.%p.operationQueue
com.apple.SafariBookmarksSyncAgent.ActivityCheckInQueue
com.apple.SafariBookmarksSyncAgent.CustomizationSyncQueue
Safari
v24@?0q8@"NSError"16
v24@?0@"WBSCloudBookmarksRemoteMigrationInfo"8@"NSError"16
v16@?0@"NSError"8
v32@?0@"NSArray"8@"NSArray"16@"NSError"24
v16@?0@"NSArray"8
SafariSyncController get CloudTabRemoteStore transaction
v16@?0@"CloudTabRemoteStore"8
v16@?0@"NSTimer"8
data
isLightAppearance
SafariSyncController delete Safari background image transaction
SafariSyncController perform customization sync transaction
0.0.0
Sync Delay Timer After Push Notification Transaction
v16@?0@"CKRecordZoneID"8
v28@?0@"CKServerChangeToken"8B16@"NSError"20
Push Notification Database Changes Check
v24@?0@"CKSubscription"8@"NSError"16
SafariSyncController network connectivity XPC activity check in transaction
SafariSyncController perform bookmark sync transaction
SafariSyncController fetch remote migration state transaction
v32@?0q8@"NSString"16@"NSError"24
v16@?0q8
v24@?0@"NSObject<OS_xpc_object>"8@?<v@?BB>16
Cloud Tabs Notification Transaction
SafariSyncController update Safari's local settings transaction
SafariSyncController delete Safari's local background image transaction
v16@?0B8B12
v16@?0@"NSObject<OS_xpc_object>"8
v12@?0B8
SafariSyncController perform tab groups sync transaction
The attempted operation requires an entitlement
com.apple.SafariBookmarksSyncAgent.XPC.BookmarkSyncNetworkConnectivity
com.apple.SafariBookmarksSyncAgent.XPC.CloudTabsZoneSubscriptionRegistration
com.apple.SafariBookmarksSyncAgent.XPC.InitialManateeCloudTabFetchRetry
com.apple.SafariBookmarksSyncAgent.XPC.CloudSettingsZoneSubscriptionRegistration
com.apple.SafariBookmarksSyncAgent.XPC.ZoneSubscriptionRegistration
com.apple.SafariBookmarksSyncAgent.XPC.PeriodicRemoteMigrationStateObserver
com.apple.SafariBookmarksSyncAgent.migration
com.apple.SafariBookmarksSyncAgent.XPC.CloudTabGroupZoneSubscriptionRegistration
com.apple.SafariBookmarksSyncAgent.XPC.TabGroupSyncNetworkConnectivity
B16@?0@"NSString"8
<None>
Update Remote
Update Local
Update Local Parent Or Position
Delete Local
Undelete Local
<%@>
B16@?0@"CloudBookmarkItemConfiguration"8
+[CloudBookmark cloudBookmarkWithRecordName:inDatabase:databaseAccessor:updater:]
+[CloudBookmark cloudBookmarkForReparentedItemWithRecordName:inDatabase:databaseAccessor:updater:]
+[CloudBookmark cloudBookmarkToMigrateItemWithRecordName:inDatabase:databaseAccessor:updater:]
Deleted
+[CloudBookmark cloudBookmarkWithAddedRecord:configuration:inDatabase:databaseAccessor:updater:]
ParentAndPosition
-[CloudBookmark _initWithChange:databaseAccessor:updater:]
v32@?0@"NSString"8@16^B24
v24@?0@"NSString"8@16
v32@?0@"NSString"8@"WBSPair"16^B24
v32@?0@"NSString"8@"WBSCRDTGeneration"16^B24
Folder
Bookmark
Move
Modify
Delete
CKBAItemTypeBookmark
CKBAItemTypeFolder
<Unknown CKBABookmarkType %ld>
CKBAFolderTypeRegular
CKBAFolderTypeFavorites
CKBAFolderTypeBookmarksMenu
CKBAFolderTypeReadingList
<Unknown CKBAFolderType %ld>
cloudBookmarkAccountIdentityDidChange
cloudBookmarkAccountPropertiesDidChange
primaryAccount
Bookmarks-Backup-for-31802262
http
CloudBookmarksOverrideDeviceIdentifier
CloudSettingsZoneSubscription
com.apple.SafariBookmarksSyncAgent.CloudSettings.CloudSettingStore.%@.%p.operationQueue
com.apple.SafariBookmarksSyncAgent.CloudSettings.CloudSettingStore.%@.%p.internalQueue
com.apple.SafariBookmarksSyncAgent.CloudSettings.CloudSettingStore.%@.%p.completionHandlerQueue
v16@?0@"CKRecord"8
v24@?0@"CKRecordID"8@"NSString"16
B16@?0@"NSError"8
v44@?0@"CKRecordZoneID"8@"CKServerChangeToken"16@"NSData"24B32@"NSError"36
v24@?0@"CKRecordZone"8@"NSError"16
v24@?0@"CKRecord"8@"NSError"16
v24@?0@"NSDictionary"8@"NSError"16
31742989
32414244
v32@?0@"NSString"8@"NSString"16^B24
q24@?0@"NSString"8@"NSString"16
q24@?0@"WBSCRDTPosition"8@"WBSCRDTPosition"16
com.apple.Safari.CloudBookmarks
Errors
v32@?0@8@"NSError"16^B24
_generation
_deviceIdentifier
SyncRequirements
MinimumSyncAPIVersion
EncryptionInfo
MigrationState
MigratorDeviceIdentifier
Tab Collection Maintenance
com.apple.SafariBookmarksSyncAgent.%@.%p
Tab Collection Maintenance Transaction
com.apple.SafariBookmarksSyncAgent.XPC.TabCollectionMaintenance
Migration coordinator
CloudBookmarksDebugDelayInSecondsBeforeStealingRightToMigrate
v24@?0@"NSError"8@?<v@?>16
DestinationDevice
TabURL
TabUUID
DestinationDeviceUUID
LastModified
DictionaryType
CloseTabRequest
<%@: %p; tabURL = "%@"; tabUUID = "%@"; destination device uuid = "%@";
BookmarkList
BookmarkLeaf
TabGroup
TabGroupTab
ParentFolder
MinimumAPIVersion
Position
IdentityHash
TitleAndIdentityHash
TitleURLAndIdentityHash
PreviewTextAndHasUserDefinedPreviewText
Title
DateAdded
DateLastViewed
ImageURL
PreviewText
HasUserDefinedPreviewText
B16@?0@"CKRecord"8
IsSelectedFavoritesFolder
LastSelectedTab
Cloud Settings Data Fetching
Cloud Settings Data Saving
Cloud Settings Data Deletion
Cloud Settings Background Image Saving
customizationSyncServerToken
v16@?0@"CKRecordID"8
v32@?0@"CKServerChangeToken"8@"NSData"16@"NSError"24
@"CKRecord"32@?0@"CKRecord"8@"CKRecord"16@"NSError"24
cloudBookmarkDidDetectBug
bugIDs
CloudBookmarkStoreErrorDomain
Bookmarks
TabGroups
TabGroupsZoneSubscription
Cloud Bookmark Migration State Check
KeyID
ZoneSubscription
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.%@.%p.internalQueue
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.%@.%p.completionHandlerQueue
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.%@.%p.operationQueue
Cloud Bookmark Migration From DAV
Cloud Bookmark Subscription Request
Tab Groups Subscription Request
v24@?0@"CKRecordID"8@"NSError"16
v24@?0@"CloudBookmarksFetchResult"8@"NSError"16
v24@?0Q8@"NSError"16
@"CKRecordID"16@?0@"NSString"8
@"NSString"24@?0@"CKRecordID"8^B16
metadata_zone
MigrationStateEncodedRecordData
TabGroupMigrationStateEncodedRecordData
Sync coordinator
v20@?0q8B16
v16@?0@"WBSCloudBookmarksRemoteMigrationInfo"8
@"CloudBookmark"16@?0^B8
record
@"CKRecord"32@?0@"CKRecord"8@"CKRecord"16q24
32548082
v32@?0@"NSSet"8@"NSSet"16@"NSError"24
v24@?0@"NSSet"8@"NSError"16
com.apple.SafariShared.WBSCloudBookmarksStore
com.apple.SafariShared.CloudTabs
com.apple.SafariShared.Settings
v16@?0@"CloudTabSyncCoordinator"8
v12@?0i8
v16@?0B8i12
v24@?0@"NSArray"8@"NSArray"16
CloudTabs.db
Sync migration coordinator
(null)
deviceIdentifier
hasAccountHash
changes
localBookmarks
domain
code
description
remoteMigrationStateError
remoteMigrationState
migratorDeviceIdentifier
AwaitingMigration
InProgress
Finished
Unknown
changeType
itemType
serverID
modifiedAttributes
hasSyncData
hasCKRecord
hasPosition
hasTitleGeneration
count
addCount
deleteCount
moveCount
modifyCount
summary
details
bookmarksCount
foldersCount
title
children
isFavorites
IsTabGroup
isTabGroup
folderType
bookmarkType
Regular
Favorites
ReadingList
BookmarksMenu
CloudTabs
CloudTabsZoneSubscription
com.apple.Safari.CloudBookmarks.CloudTabRemoteStore.%@.%p.operationQueue
CloudTab
Sync Manager
Cloud Tab Groups Fetching
Cloud Tab Groups Saving
com.apple.SafariBookmarksSyncAgent.%@.%p._tabCollectionQueue
Cloud Tab Groups Migration
v28@?0B8@"NSArray"12@"NSError"20
v24@?0@"NSString"8@"NSString"16
Migration state lock arbiter property
OwningDevice
IsShowingReader
IsPinned
ReaderScrollPositionPageIndex
OwningSceneID
pageIndex
ReaderScrollPosition
UUID
<%@: %p; title = "%@"; url = "%@"; uuid = "%@"; owning device uuid = "%@"; owning sceneID = "%@"; position = %@; isShowingReader = %d; readerScrollPositionPageIndex = %@; isPinned = %d>
server_change_token
Library/Safari/
PRAGMA foreign_keys = ON
PRAGMA user_version = %d
SELECT value FROM metadata WHERE key = ?
UPDATE metadata SET value = ? WHERE key = ?
INSERT INTO metadata (key, value) VALUES (?, ?)
DELETE FROM metadata WHERE key = ?
VACUUM
PRAGMA user_version
DeviceName
HasDuplicateDeviceName
IsEphemeralDevice
Capabilities
Tabs
CloudKitBookmarkSyncing
Device
B32@?0@"CloudTab"8Q16^B24
<%@: %p; name = "%@"; uuid = %@; lastModified = %@; hasDuplicateName = %d; isEphemeralDevice = %d; tabs = (
    %@
    
wbsCloudTabDictionaryRepresentation
CloudTabDevice
CloudTabCloseRequest
use_manatee_container
com.apple.Safari.CloudBookmarks.CloudTabSQLiteStore
DELETE FROM cloud_tab_devices WHERE device_uuid = ?
DELETE FROM cloud_tabs WHERE tab_uuid = ?
DELETE FROM cloud_tab_close_requests WHERE close_request_uuid = ?
CREATE TABLE cloud_tab_devices (device_uuid TEXT PRIMARY KEY NOT NULL,system_fields BLOB NOT NULL,device_name TEXT,has_duplicate_device_name BOOLEAN DEFAULT 0,is_ephemeral_device BOOLEAN DEFAULT 0,last_modified REAL NOT NULL)
CREATE TABLE cloud_tabs (tab_uuid TEXT PRIMARY KEY NOT NULL,system_fields BLOB NOT NULL,device_uuid TEXT NOT NULL,position BLOB NOT NULL,title TEXT,url TEXT NOT NULL,is_showing_reader BOOLEAN DEFAULT 0,is_pinned BOOLEAN DEFAULT 0,reader_scroll_position_page_index INTEGER,scene_id TEXT,FOREIGN KEY(device_uuid) REFERENCES cloud_tab_devices(device_uuid) ON DELETE CASCADE)
CREATE INDEX cloud_tabs__device_uuid ON cloud_tabs (device_uuid)
CREATE TABLE cloud_tab_close_requests (close_request_uuid TEXT PRIMARY KEY NOT NULL,system_fields BLOB NOT NULL,destination_device_uuid TEXT NOT NULL,url TEXT NOT NULL,tab_uuid TEXT NOT NULL,FOREIGN KEY(destination_device_uuid) REFERENCES cloud_tab_devices(device_uuid) ON DELETE CASCADE)
CREATE TABLE metadata (key TEXT NOT NULL UNIQUE, value)
DROP TABLE IF EXISTS cloud_tab_devices
DROP TABLE IF EXISTS cloud_tabs
DROP TABLE IF EXISTS cloud_tab_close_requests
DROP TABLE IF EXISTS metadata
SELECT device_uuid, system_fields, device_name, has_duplicate_device_name, is_ephemeral_device, last_modified FROM cloud_tab_devices
SELECT system_fields, device_name, has_duplicate_device_name, is_ephemeral_device, last_modified FROM cloud_tab_devices WHERE device_uuid = ?
INSERT INTO cloud_tab_devices (device_uuid, system_fields, device_name, has_duplicate_device_name, is_ephemeral_device, last_modified)VALUES (?, ?, ?, ?, ?, ?)ON CONFLICT(device_uuid) DO UPDATE SET device_uuid = ?1, system_fields = ?2, device_name = ?3, has_duplicate_device_name = ?4, is_ephemeral_device = ?5, last_modified = ?6
SELECT tab_uuid, system_fields, position, title, url, is_pinned, is_showing_reader, reader_scroll_position_page_index, scene_id FROM cloud_tabs WHERE device_uuid = ?
q24@?0@"CloudTab"8@"CloudTab"16
INSERT OR REPLACE INTO cloud_tabs (tab_uuid, system_fields, device_uuid, position, title, url, is_showing_reader, is_pinned, reader_scroll_position_page_index, scene_id)VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
SELECT close_request_uuid, system_fields, destination_device_uuid, url, tab_uuid FROM cloud_tab_close_requests
INSERT OR REPLACE INTO cloud_tab_close_requests (close_request_uuid, system_fields, destination_device_uuid, url, tab_uuid)VALUES (?, ?, ?, ?, ?)
Cloud Tab Data Fetching
Cloud Tab Data Saving
Cloud Tab Close Requests Saving
Cloud Tab Close Requests Deleting
Cloud Tab Devices Deleting
Cloud Tab Zone Deleting
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.tabSavingQueue
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.tabFetchingQueue
v16@?0@"CloudTabDevice"8
v16@?0@"NSData"8
DAV-
com.apple.CloudKitBookmarks.CyclerCloudBookmarksAssistant
https://fake-dav-id-for-testing/
Migration failed
Unable to acquire database lock
@"WBSPair"32@?0@"NSString"8@"WBSPair"16^B24
v32@?0@"NSString"8@"NSMutableDictionary"16^B24
com.apple.SafariShared
CloudBookmarks
DiagnosticExtension
KeyedArchiver
__cpu_indicator_init
cpu_model.c
__cpu_model.__cpu_type < CPU_TYPE_MAX
__cpu_model.__cpu_subtype < CPU_SUBTYPE_MAX
init
_setUpPushConnection
updatePushTopicSubscriptions
isSyncEnabled
_pushTopics
setEnabledTopics:ignoredTopics:opportunisticTopics:
topic
userInfo
didReceivePushNotificationWithTopic:userInfo:
initWithEnvironmentName:namedDelegatePort:queue:
setDelegate:
stringByAppendingString:
arrayWithObjects:count:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
connection:didReceivePublicToken:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didSendOutgoingMessage:
connection:didFailToSendOutgoingMessage:error:
connection:didChangeConnectedStatus:
connectionDidReconnect:
connection:channelSubscriptionsFailedWithFailures:
setUsesOpportunisticPushTopic:
.cxx_destruct
_pushConnection
_usesOpportunisticPushTopic
bookmarkDatabaseAccessor
initWithDatabaseAccessor:
safari_cloudBookmarksContainer
standardUserDefaults
initWithUserDefaults:type:
initWithType:container:localStorage:
initWithBookmarkStore:databaseCoordinator:accountStore:
initWithBookmarkStore:databaseAccessor:syncMigrationCoordinator:
migrationState
dictionaryWithObjects:forKeys:count:
registeredStateCollectorWithLogLabel:payloadProvider:
setQualityOfService:
stringWithFormat:
setName:
safari_cloudTabsContainer
initWithAccountStore:
safari_cloudSettingsContainer
initWithContainer:
dictionary
initWithSettingStore:accountStore:
cloudSettingsSyncEngineAccessor
_syncManagerWithStoreOwner:
registerMigrationXPCActivity:
initWithMachServiceName:
resume
_registerBookmarksZoneSubscriptionXPCActivityRegisteringIfNeeded:ignoreOngoingRegistration:qualityOfService:delay:
_registerCloudTabsZoneSubscriptionXPCActivityWithDelay:ignoreLastSuccessfulAttempt:
_registerPeriodicRemoteMigrationStateObserverXPCActivityRegisteringIfNeeded:
_registerCloudSettingsZoneSubscriptionXPCActivityWithDelay:ignoreLastSuccessfulAttempt:
_scheduleInitialManateeCloudTabFetchRetryXPCActivityRegisteringIfNeeded:
_registerTabGroupsZoneSubscriptionXPCActivityWithDelay:ignoreLastSuccessfulAttempt:
defaultCenter
_didDetectPossibleBug:
addObserver:selector:name:object:
_scheduleHierarchyCheckTimer
notificationFromRemoteNotificationDictionary:
subscriptionID
_didReceiveIncomingMessageWithNotification:pushTopic:subscriptionID:
accountPropertiesStore
isDataclassEnabled
_topic:matchesPushTopicForContainer:
options
applicationBundleIdentifierOverrideForPushTopicGeneration
hasSuffix:
container
safariTabCollectionConfiguration
setStoreOwner:
setSkipsExternalNotifications:
initWithConfiguration:container:accountStore:
_userAccountDidChange:
postNotificationName:object:
_cancelPushNotificationSyncDelayTimer
_updateCloudTabsSyncCoordinatorAfterUserAccountChange:
_updateCloudSettingsSyncCoordinatorAfterUserAccountChange:
_updateCloudBookmarksSyncCoordinatorAfterUserAccountChange:
_updateTabGroupsSyncCoordinatorAfterUserAccountChange:
clearCachedRecordZone
registerForPushNotificationsIfNeeded
_attemptSyncAndFallBackToMigrationIfPossibleForTrigger:
_userDidUpdateBookmarkDatabase
_invalidateHierarchyCheckTimer
safari_privacyPreservingDescription
sharedLogger
ckBookmarkSyncFinishedWithResult:error:
_sendNotificationForSyncResult:
_sendDetectedBugNotificationIfNeeded
_performHiearchyCheck
safari_isUserDeletedZoneError
_beginMigrationFromDAVInOperationGroup:
observeRemoteMigrationStateForSecondaryMigration
beginSyncingWithOperationGroupForFetching:operationGroupForSaving:completionHandler:
numberWithInteger:
postNotificationName:object:userInfo:
_hasEntitlementForSensitiveOperation
_fetchRemoteMigrationStateWithXPCActivity:qualityOfService:completionHandler:
errorWithDomain:code:userInfo:
createMigrationStateCheckOperationGroupWithXPCActivity:qualityOfService:
migratorDeviceIdentifier
fetchRemoteMigrationInfoInOperationGroup:withCompletionHandler:
_beginMigrationFromDAVInOperationGroupInternal:
boolForKey:
initWithBookmarkStore:
collectDiagnosticsDataWithCompletionHandler:
domain
code
saveTabsForCurrentDeviceWithDictionaryRepresentation:deviceUUIDString:completionHandler:
saveCloudTabCloseRequestWithDictionaryRepresentation:closeRequestUUIDString:completionHandler:
deleteDevicesWithUUIDStrings:completionHandler:
deleteCloudTabCloseRequestsWithUUIDStrings:completionHandler:
_fetchSyncedCloudTabDevicesAndCloseRequestsWithCompletionHandler:
count
arrayWithCapacity:
countByEnumeratingWithState:objects:count:
wbsCloudTabDeviceDictionary
deviceUUIDString
initWithUUIDString:deviceOrCloseRequestDictionary:
addObject:
wbsCloudTabCloseRequestDictionaryRepresentation
requestUUIDString
fetchDevicesWithCompletionHandler:
array
getCachedDevicesWithCompletionHandler:
userDidUpdateCloudTabGroupSyncManagerDatabase:
usesManateeContainer
getCloudTabRemoteStoreWithCompletionHandler:
_attemptCloudSettingsSyncForTrigger:
objectForKeyedSubscript:
initWithRecordName:zoneID:
initWithRecordType:recordID:
safari_encryptedValues
setObject:forKeyedSubscript:
saveRecords:successCompletionHandler:
fire
_cancelBackgroundImageSaveDelayTimer
saveCloudBackgroundImageWithURL:isLightAppearance:successCompletionHandler:
scheduledTimerWithTimeInterval:repeats:block:
initWithFileURL:
numberWithBool:
saveImageRecord:successCompletionHandler:
deleteRecords:completionHandler:
backgroundImageExists
defaultManager
safari_startPageBackgroundImageFileURL
backgroundImageAppearanceIsLight
syncSettingsUpDictionary
_saveCloudSettingsBatchWithDictionaryRepresentation:successCompletionHandler:
copy
beginInitialSyncUpWithCompletionHandler:
_cyclerAssistant
resetToDAVDatabaseWithCompletionHandler:
clearLocalDataIncludingMigrationState:completionHandler:
generateDAVServerIDsForExistingBookmarksWithCompletionHandler:
migrateToCloudKitWithCompletionHandler:
safari_cloudBookmarksDefaults
stringForKey:
mainBundle
safari_normalizedVersion
compare:options:
setObject:forKey:
localMigrationState
resetDeviceIdentifier
setLocalMigrationState:
databaseRef
openDatabase:
performMaintenanceOnDatabase:afterVersion:
closeDatabase:shouldSave:
currentConnection
valueForEntitlement:
boolValue
processIdentifier
_setUpSyncAgentInterfaceOnConnection:
userDidUpdateBookmarkDatabase
userAccountDidChange:
fetchRemoteMigrationStateWithCompletionHandler:
beginMigrationFromDAV
getCloudTabDevicesWithCompletionHandler:
fetchSyncedCloudTabDevicesAndCloseRequestsWithCompletionHandler:
triggerSafariTabGroupSync
getCloudTabContainerManateeStateWithCompletionHandler:
fetchCloudTabDevicesAndCloseRequests
fetchCloudSettingsChangesImmediately
saveCloudSettingWithDictionaryRepresentation:successCompletionHandler:
deleteBackgroundImageFromCloudKitWithCompletionHandler:
scheduleCloudBackgroundImageSaveWithURL:isLightAppearance:successCompletionHandler:
triggerImmediateBackgroundImageSaveIfApplicable
syncDownSafariSettingsSyncWithCompletion:
syncUpSafariSettingsSyncWithCompletion:
applyChangeSet:completionHandler:
scheduleSyncIfNeeded
saveBrowserState:completionHandler:
deleteTabGroup:completionHandler:
insertTabGroup:afterTabGroup:completionHandler:
moveTabGroup:afterTabGroup:completionHandler:
saveTabGroup:completionHandler:
deleteTabs:completionHandler:
insertTabs:inTabGroup:afterTab:completionHandler:
reorderTab:afterTab:completionHandler:
replaceTab:withTab:completionHandler:
saveTab:completionHandler:
updateTabs:inTabGroup:completionHandler:
closeWindowState:completionHandler:
deleteWindowState:completionHandler:
deleteWindowStates:completionHandler:
saveWindowState:completionHandler:
didReceiveIncomingMessageForSubscriptionID:withPushTopic:userInfo:
didReceiveLocalNotificationWithPushTopic:
interfaceWithProtocol:
setWithArray:
setClasses:forSelector:argumentIndex:ofReply:
setExportedInterface:
setExportedObject:
_updatedContainerForPushTopic:
_needsDatabaseFetchOperationForContainer:
_attemptSyncForChangedZonesSharingContainer:
_attemptTabGroupsSyncForManager:withTrigger:
_attemptCloudTabsSyncForPushNotification
dateWithTimeIntervalSinceNow:
isValid
_fetchUpdatedZonesInPushNotificationForContainer:
_fetchUpdatedZonesInPushNotificationForContainer:retryManager:
containerIdentifier
dataForKey:
unarchivedObjectOfClass:fromData:error:
initWithPreviousServerChangeToken:
setFetchAllChanges:
setDiscretionaryNetworkBehavior:
setAutomaticallyRetryNetworkFailures:
setConfiguration:
bookmarksRecordZoneID
recordZoneID
cloudTabsRecordZoneID
setRecordZoneWithIDChangedBlock:
setRecordZoneWithIDWasDeletedBlock:
scheduleRetryIfNeededForError:usingBlock:
archivedDataWithRootObject:requiringSecureCoding:error:
setFetchDatabaseChangesCompletionBlock:
setExpectedSendSize:
setExpectedReceiveSize:
setGroup:
privateCloudDatabase
setDatabase:
addOperation:
invalidate
saveBookmarksZoneSubscriptionInOperationGroup:withCompletionHandler:
fetchBookmarksZoneSubscriptionStatusCreatingZoneIfNeeded:inOperationGroup:withCompletionHandler:
saveCloudTabsZoneSubscriptionInOperationGroup:withCompletionHandler:
fetchCloudTabsZoneSubscriptionInOperationGroup:withCompletionHandler:
_performBookmarkSyncForTrigger:inOperationGroup:completionHandler:
_checkInXPCActivityWithIdentifier:criteria:registerIfNeeded:performBlock:
createSubscriptionRequestOperationGroupWithQualityOfService:xpcActivity:
_saveCloudTabsZoneSubscriptionIfNeededInOperationGroup:withCompletionHandler:
deleteDatabaseAndSyncDataForAccountChange
userAccountChanged
_saveCloudSettingsZoneSubscriptionIfNeededInOperationGroup:withCompletionHandler:
saveCloudSettingsZoneSubscriptionInOperationGroup:withCompletionHandler:
fetchCloudSettingsZoneSubscriptionInOperationGroup:withCompletionHandler:
clearServerChangeToken
clearCachedCloudSettingsRecordZone
_performSettingsSyncForTrigger:inOperationGroup:completionHandler:
isCustomizationSyncEnabled
beginSyncingWithCompletionHandler:
didReceiveRemoteCloudSettingsUpdateWithRecord:
didDeleteRemoteRecordWithID:
recordType
isEqualToString:
recordID
recordName
cloudSettingSyncCoordinator:didReceiveRemoteCloudSettingsUpdateWithRecord:
_deleteLegacySectionIdentifiers
startCoordinatingMigrationInOperationGroup:completionHandler:
doubleValue
_retryIntervalToRegisterBookmarksZoneSubscriptionWithNumberOfFailedAttempts:lastCKError:
safari_isCloudKitMissingZoneError
_saveBookmarksZoneSubscriptionIfNeededInOperationGroup:withCompletionHandler:
createMigrationFromDAVOperationGroupWithXPCActivity:
_migrateFromDAVInOperationGroup:completionHandler:
_saveTabGroupsZoneSubscriptionIfNeededInOperationGroup:withCompletionHandler:
isSyncing
_runTabGroupsSyncForManager:withTrigger:completionHandler:
_performTabGroupSyncForManager:withTrigger:completionHandler:
databasePath
fileExistsAtPath:isDirectory:
configuration
storeOwner
sendSyncDidFinishNotificationWithResult:
startMigrationIfNeeded
initWithBookmarkStore:databaseAccessor:migrationCoordinator:
localizedStandardCompare:
sortedArrayUsingSelector:
componentsJoinedByString:
addObjectsFromArray:
removeObject:
allObjects
removeAllObjects
_hierarchyCheckTimer:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
performHierarchyCheck
_hierarchyCheckerDidFail
databaseLockArbiterDidAcquireDatabaseLock:
tabSyncArbiter:containerUsingManatee:
cloudTabSyncArbiterDidChangeCloudKitContainer:
cloudTabSyncArbiterPCSIdentitiesDidChange:
listener:shouldAcceptNewConnection:
cloudTabGroupSyncManagerPCSIdentitiesDidChange:
cloudSettingSyncCoordinator:storeRemoteCloudSettingsUpdateWithRecord:
cloudSettingSyncCoordinator:didDeleteRemoteRecordWithID:
performInitialSyncDown
pcsIdentitiesDidChangeForCloudSettingSyncCoordinator:
forwardingTargetForSelector:
resumeXPCListener
_pushTopicForContainer:
_accountStore
_databaseAccessor
_bookmarkStore
_xpcListener
_delayBeforeSyncingAfterPushNotificationTimer
_dateToForceSyncAfterPushNotification
_transactionForTimerToDelaySyncing
_stateCollector
_isSyncing
_isMigrating
_periodicallyObservingRemoteMigrationState
_didCheckAgentVersionOnDatabaseLock
_bookmarksSubscription
_cloudBookmarksStoreContainer
_databaseLockArbiter
_syncMigrationCoordinator
_migrationCoordinator
_bookmarkSyncCoordinator
_activityCheckInQueue
_numberOfFailedBookmarksZoneSubscriptionRegistrationAttempts
_ignoreOngoingBookmarksZoneSubscriptionRegistrationResult
_bookmarksZoneSubscriptionRegistrationTimer
_detectedBugIDs
_safariUserDefaults
_hierarchyCheckTimer
_operationQueue
_isCheckingContainerDatabaseChanges
_cloudTabsContainer
_tabSyncArbiter
_lastCloudTabsZoneSubscriptionRegistrationWasSuccessful
_cloudTabsZoneSubscriptionRegistrationIsInProgress
_lastTabGroupsZoneSubscriptionRegistrationWasSuccessful
_tabGroupsZoneSubscriptionRegistrationIsInProgress
_customizationSyncQueue
_cloudSettingsContainer
_settingsStore
_settingsSyncCoordinator
_settingsSyncEngine
_cloudSettingsZoneSubscriptionRegistrationIsInProgress
_lastCloudSettingsZoneSubscriptionRegistrationWasSuccessful
_isCustomizationSyncing
_fetchedSettingsDictionary
_delayBeforeSavingBackgroundImageTimer
_tabGroupSyncManager
TB,R,N
safari_numberForKey:
initWithZoneName:ownerName:
UTF8String
_appleAccountSecurityState
_primaryAppleAccountSecurityLevel
aa_primaryAppleAccount
aa_altDSID
sharedInstance
authKitAccountWithAltDSID:
securityLevelForAccount:
getAppleAccountSecurityStateWithCompletion:
_createEncryptionKeyData
_createEncryptionKeyIDDataUsingKey:
initWithKey:keyID:
length
safari_containsObjectPassingTest:
bytes
dataWithBytes:length:
appendBytes:length:
safari_descriptionWithoutSpaces
safari_minimumAPIVersion
safari_recordName
identityHashComponentsForRecord:
generateHashWithComponents:
isEqualToData:
UUID
getUUIDBytes:
verifyIdentityHashInBookmarkRecord:configuration:
keyID
_key
_keyID
T@"NSData",R,C,N,V_key
T@"NSData",R,C,N,V_keyID
copyItemWithServerId:database:
copySyncDataWithItem:
positionFromContentsOfData:
setHandler:
syncDataWithContentsOfData:
itemConfigurations
canParseItem:usingDatabaseAccessor:
safari_firstObjectPassingTest:
copyServerIdWithItem:
_initWithItem:configuration:syncData:databaseAccessor:
_initWithReparentedItem:configuration:databaseAccessor:updater:
itemTypeWithItem:
_initWithItemToMigrate:configuration:databaseAccessor:updater:
changeTypeForChange:
deviceIdentifier
copyServerIdWithChange:
copyDeletedBookmarkSyncDataWithChange:
record
clearAllGenerationsExceptState
incrementGenerationForKey:withDeviceIdentifier:
generationForKey:
encodedBookmarkSyncData
setDeletedBookmarkSyncData:change:
canParseChange:usingDatabaseAccessor:
copyChangedItemWithChange:
_initWithItem:configuration:databaseAccessor:
_updateGenerationsForChange:withDeviceIdentifier:
updateLocalItem
_initWithChange:databaseAccessor:updater:
itemType
itemSubtype
bookmarkTypeWithBookmark:
createBookmarkWithType:database:
_initWithAddedRecord:configuration:forItem:databaseAccessor:updater:
folderTypeWithFolder:
createFolderWithType:database:
_applyPendingReferences:
_decodedSyncDataInData:
_updateRecordParentAndPositionWithUpdater:
_initWithConfiguration:deleteChange:databaseAccessor:updater:
_createRecordWithRecordName:updater:
setRecord:
_updateRecordWithChange:updater:
safari_folderTypeForRecordName:
setState:
safari_setState:
safari_setGeneration:forKey:
copyParentServerIdWithItem:
setServerId:item:
safari_generationForKey:
safari_positionDictionaryRepresentation
setPositionDictionaryRepresentation:
setGeneration:forKey:
position
safari_state
setMinimumAPIVersion:
_loadAttributesForKnownKeysIntoEmptyItemUsingRemoteRecord:updater:
_updateRecordWithMissingAttributesWithUpdater:
copyAttributesWithItem:
allKeys
_updateGenerationsForAttributeKeys:withDeviceIdentifier:
_updateRecordWithModifiedAttributes:updater:
dealloc
changeIsMoveChange:
copyModifiedAttributesWithChange:
modifiedAttributeMask
_createRecordIDWithName:updater:
initWithRecordID:action:
setPosition:
state
parentRecordName
identityHashKeys
modifiedOrLocalValueForKey:
changedKeys
containsObject:
valueTransformerForAttributeKey:
attributeRequiresEncryption
reverseTransformedValue:
copyValueForKey:item:
transformedValue:
_createParentFolderReferenceWithRecordName:updater:
_generateIdentityHashUsingUpdater:
valueTransformerForIdentityHashKey:
isEmptyValue:
generateIdentityHashWithComponents:
setSyncData:item:
setModifiedAttributes:item:
knownKeys
generationKeyForKey:
_canApplyValue:withGeneration:toAttribute:updater:
reverseTransformedValueOrNull:
setModifiedAttributeMask:
positionForCloudBookmarkWithRecordName:
positionDictionaryRepresentation
safari_setPositionDictionaryRepresentation:
transformedValueOrNull:
isIdentityHashKey:
enumerateKeysAndObjectsUsingBlock:
canSaveIdentityHashAttributesInDictionary:
hasGenerationForKey:
_modifiedOrLocalIdentityHashWithUpdater:
shouldApplyReference:withGeneration:toAttribute:inRecordWithName:
first
second
resultFromMergingRecord:usingUpdater:isLocalUpdateOnly:
_resultByMergingMinimumAPIVersionWithRecord:
_resultByMergingStateWithRecord:shouldContinueMerge:
_resultByMergingParentAndPositionWithRecord:usingUpdater:
compare:
_transformedModifiedOrLocalValueForKey:isEncrypted:
_modifiedOrLocalParentReferenceWithUpdater:
minimumAPIVersion
safari_setMinimumAPIVersion:
positionForItemWithRecordName:inDatabase:databaseAccessor:
cloudBookmarkWithRecordName:inDatabase:databaseAccessor:updater:
cloudBookmarkForReparentedItemWithRecordName:inDatabase:databaseAccessor:updater:
cloudBookmarkToMigrateItemWithRecordName:inDatabase:databaseAccessor:updater:
updateSyncDataGenerationsWithChange:databaseAccessor:updater:
cloudBookmarkWithChange:databaseAccessor:updater:
cloudBookmarkWithAddedRecord:configuration:inDatabase:databaseAccessor:updater:
applyPendingReferences:toItemWithRecordName:inDatabase:databaseAccessor:updater:
duplicateHash
isDuplicateOfBookmark:
resultFromMergingRecord:usingUpdater:
item
databaseAccessor
_syncData
_remotelyModifiedAttributes
_configuration
_item
_recordName
_parentRecordName
T@"CloudBookmarkItemConfiguration",R,N,V_configuration
T@"CKRecord",R,N
Tr^v,R,N,V_item
T@"<WBSBookmarkDBAccess>",R,N,V_databaseAccessor
T@"NSString",R,C,N,V_recordName
T@"NSString",R,C,N,V_parentRecordName
T@"WBSCRDTPosition",C,N
Tq,N
TQ,R,N
itemTypeForChange:
accountTypeWithAccountTypeIdentifier:
accountsWithAccountType:
accountProperties
safari_boolForKey:
safari_primaryAppleAccount
createDatabaseWithoutLock
_verifyHierarchyIntegrityInDatabase:
saveBackupOfDatabase:withName:
hasPrefix:
localCloudKitMigrationState:
copyLocalIDsInFolderWithLocalID:database:
mutableCopy
firstObject
removeObjectAtIndex:
copyItemWithLocalID:database:
_serverSyncIDTypeForServerSyncID:
safari_recordNameForFolderType:
copySyncKeyWithItem:
_verifySyncDataForItem:recordName:expectingSyncData:expectingCloudKitData:
recordChangeTag
_accountIdentityDidChange:
_accountPropertiesDidChange:
refresh
account
isEnabledForDataclass:
username
dataUsingEncoding:
safari_SHA1Hash
copyAccountHashWithDatabase:
setAccountHash:database:
_setNeedsAccountHashCheck
setNeedsDataclassEnabledCheck
initWithAccountStore:databaseCoordinator:
updateAccountHashIfNeeded
databaseCoordinator
_dataclassEnabled
_needsDataclassEnabledCheck
_needsAccountHashCheck
_databaseCoordinator
T@"ACAccount",R,N
T@"<CloudBookmarkDatabaseCoordinating>",R,N,V_databaseCoordinator
dataclassEnabled
TB,R,N,GisDataclassEnabled
initWithRootJSONObjectType:
isValidJSONObject:
dataWithJSONObject:options:error:
safari_dataByCompressingData
safari_dataByDecompressingData
JSONObjectWithData:options:error:
defaultTransformer
jsonArrayTransformer
jsonDictionaryTransformer
transformedValueClass
allowsReverseTransformation
rootJSONObjectType
_rootJSONObjectType
T#,R,N,V_rootJSONObjectType
cloudBookmarkItemConfigurations
T@"NSString",R,N
T@"CKRecordZoneID",R,N
T@"NSArray",R,C,N
initWithBookmarkStore:database:databaseAccessor:accountPropertiesStore:
bookmarkStore
_databaseRef
_accountPropertiesStore
T@"CloudBookmarkStore",R,N,V_bookmarkStore
Tr^v,R,N,V_databaseRef
T@"CloudBookmarkAccountPropertiesStore",R,N,V_accountPropertiesStore
objectForKey:
copyDeviceIdentifier
setLocalCloudKitMigrationState:database:
initWithCKRecordZoneID:action:
zoneID
referenceAction
initWithCKRecordZoneID:
action
_recordZoneID
_action
T@"CKRecordZoneID",R,N,V_recordZoneID
TQ,R,N,V_action
initRequiringSecureCoding:
encodeObject:forKey:
encodedData
initForReadingFromData:error:
decodeObjectOfClass:forKey:
finishDecoding
name
initWithObjectClass:
objectClass
_objectClass
T#,R,N,V_objectClass
_fetchRecordsOnInternalQueueWithServerChangeToken:recordChangedBlock:recordWithIDWasDeletedBlock:inOperationGroup:completionHandler:
_fetchRecordsOnInternalQueueWithRetryManager:serverChangeToken:recordChangedBlock:recordWithIDWasDeletedBlock:inOperationGroup:completionHandler:
setPreviousServerChangeToken:
initWithRecordZoneIDs:configurationsByRecordZoneID:
setRecordChangedBlock:
setRecordWithIDWasDeletedBlock:
safari_errorByAddingCloudKitPrivacyPreservingUserInfoForItemID:
setRecordZoneFetchCompletionBlock:
setFetchRecordZoneChangesCompletionBlock:
_scheduleOperation:inOperationGroup:operationQueue:
deviceCount
_createCloudSettingsRecordZoneInOperationGroup:withRetryManager:completionHandler:
_saveRecordZoneSubscriptionForZoneID:subscriptionID:inOperationGroup:operationQueue:completionHandler:
createCloudSettingsRecordZoneInOperationGroup:completionHandler:
setShouldSendContentAvailable:
initWithZoneID:subscriptionID:
setNotificationInfo:
initWithSubscriptionsToSave:subscriptionIDsToDelete:
itemErrorFromError:forID:
setModifySubscriptionsCompletionBlock:
saveCloudSettingsRecords:createCloudSettingsZoneIfMissing:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
_saveCloudSettingsRecords:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
_saveCloudSettingsRecords:retryManager:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
initWithRecordsToSave:recordIDsToDelete:
setClientChangeTokenData:
safari_isUnrecoverableCloudKitError
safari_isCloudKitBatchTooLargeError
setPerRecordCompletionBlock:
setModifyRecordsCompletionBlock:
initWithRecordZonesToSave:recordZoneIDsToDelete:
safari_hasOrContainsErrorWithCloudKitErrorCode:
setModifyRecordZonesCompletionBlock:
initWithSubscriptionIDs:
safari_isCloudKitNonExistentRecordError
setFetchSubscriptionCompletionBlock:
initWithZoneID:
recordZoneSubscriptionID
cloudSettingsRecordZoneID
T@"NSString",R,C,N
T@"CKRecordZoneID",R,C,N
createOperationGroupWithName:useLargerExpectedSendSize:
fetchCloudSettingsRecordChangesSinceServerChangeToken:inOperationGroup:recordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
fetchNumberOfDevicesInSyncCircleInOperationGroup:completion:
deleteCloudSettingsRecords:inOperationGroup:completionHandler:
deleteCloudSettingsZoneInOperationGroup:completion:
_database
_cloudSettingsRecordZone
_cloudSettingsOperationQueue
_internalQueue
_completionHandlerQueue
_container
T@"CKContainer",R,N,V_container
_insertBookmark:intoFolderWithRecordName:
removeObjectForKey:
addItem:underFolderWithServerId:database:
_createBuiltInFolderWithRecordNameIfNeeded:
copyServerIdsInFolderWithServerId:database:
minusSet:
removeItemWithServerId:database:
hasUnverifiedMovedBookmarks
_reparentBuiltInFolderIfNeeded
_reorderChildrenOfTopBookmarkFolderGetLastPosition:
unionSet:
_recordNameOfAncestorToReparentForRecordName:verifiedRecordNames:
_localDatabaseContainsItemWithRecordName:getParentRecordName:
_insertBookmarkWithRecordName:intoExistingFolderWithRecordName:
_deleteTemporaryParentFolder
_bookmarksByVerifyingAndReparentingUnrootedBookmarksRememberOriginalParents:getLastValidPositionInRootFolder:
orderedSet
indexOfObject:
removeObjectsInRange:
_recordNameOfAncestorToReparentInLoop:
safari_minimumUsingComparator:
_reorderChildrenOfFolderWithServerSyncId:
_positionOfBookmarkWithRecordNameForFolderSorting:
indexOfObject:inSortedRange:options:usingComparator:
insertObject:atIndex:
lastObject
_lastValidPositionInRootFolder
_sortedRecordNamesWithChildIDs:getLastPosition:
setChildrenOrder:forFolderWithServerId:database:
copyLastServerIdInFolderWithServerId:database:
initWithDatabase:databaseAccessor:
hasUndeletedRemovedBookmarks
numberOfMovedBookmarks
numberOfDeletedBookmarks
addMovedBookmark:
didLocallyMoveBookmarkWithRecordName:
isDeletedRecordName:
didDeleteBookmarkWithRecordName:
bookmarksByVerifyingAndReparentingUnrootedBookmarksGetLastValidPositionInRootFolder:
verifyAndReparentUnrootedBookmarksRememberingOriginalParents
moveBookmarksIntoPlace
removeLocalItemsForDeletedRecordNames
_childRecordNamesToParentRecordNames
_movedBookmarkRecordNames
_deletedBookmarkRecordNames
_parentRecordNamesWithMovedChildren
_misplacedBuiltInFolderRecordNames
_hasTemporaryParentFolder
_topBookmarkFolderRequiresReordering
null
safari_isInCloudKitErrorDomain
safari_isInCloudBookmarksErrorDomain
_safari_isOrContainsCloudKitErrorOfCodes:checkInternalErrorCode:
safari_isCloudKitPartialFailureError
allValues
safari_isCloudKitWriteConflictError
safari_isMigrationStateRecordChangedError
safari_isCouldNotOpenDatabaseError
safari_isAtomicWriteError
safari_isCloudKitExpiredChangeTokenError
safari_cloudKitPartialErrorForItemID:
safari_onlyCloudKitPartialError
safari_isCloudKitErrorWithCode:
safari_isCloudKitInternalErrorWithCode:
safari_errorWithCloudBookmarksCode:userInfo:
safari_errorFromErrors:
unsignedIntegerValue
safari_minimumSyncAPIVersion
numberWithUnsignedInteger:
integerValue
safari_migrationState
safari_migratorDeviceIdentifier
initWithDictionaryRepresentation:
dictionaryRepresentation
_safari_generationKeyForKey:
_safari_deviceIdentifierKeyForKey:
initWithDeviceIdentifier:generation:
generation
safari_isSyncRequirementsRecord
safari_setMinimumSyncAPIVersion:
safari_isEncryptionInfoRecord
safari_isMigrationStateRecord
safari_setMigrationState:
safari_setMigratorDeviceIdentifier:
safari_defaultPosition
safari_setDefaultPosition:
safari_syncRequirementsRecord
TB,R,N,Gsafari_isSyncRequirementsRecord
TQ,N,Ssafari_setMinimumSyncAPIVersion:
safari_encryptionInfoRecord
TB,R,N,Gsafari_isEncryptionInfoRecord
safari_migrationStateRecord
TB,R,N,Gsafari_isMigrationStateRecord
Tq,N,Ssafari_setMigrationState:
T@"NSString",&,N,Ssafari_setMigratorDeviceIdentifier:
Tq,N,Ssafari_setState:
TQ,N,Ssafari_setMinimumAPIVersion:
T@"NSDictionary",C,N,Ssafari_setPositionDictionaryRepresentation:
T@"WBSCRDTPosition",C,N,Ssafari_setDefaultPosition:
canParseRecord:
bookmarkListRecords
bookmarkLeafRecords
deletedRecordIDs
allRecordIDs
addRecord:
addDeletedRecordID:
serverChangeToken
setServerChangeToken:
clientChangeTokenData
setItemConfigurations:
topBookmarkRecord
migrationRecord
encryptionRecord
_mutableBookmarkListRecords
_mutableBookmarkLeafRecords
_mutableDeletedBookmarkRecords
_serverChangeToken
_clientChangeTokenData
_itemConfigurations
_topBookmarkRecord
_migrationRecord
_encryptionRecord
T@"CKServerChangeToken",&,N,V_serverChangeToken
T@"NSData",C,N,V_clientChangeTokenData
T@"NSArray",C,N,V_itemConfigurations
T@"CKRecord",R,N,V_topBookmarkRecord
T@"CKRecord",R,N,V_migrationRecord
T@"CKRecord",R,N,V_encryptionRecord
databasePathForConfiguration:
initWithConfiguration:
lockSync
performMaintenance
unlockSync
tabGroupMaintenanceActivityDidFinish:
registerActivity
delegate
_delegate
T@"WBCollectionConfiguration",R,N,V_configuration
T@"<CloudTabGroupMaintenanceActivityDelegate>",W,N,V_delegate
_hasValidDeviceIdentifier
unableToSilentlyMigrateToCKBookmarksWithReason:
_determineCourseOfActionFromLocalStateInOperationGroup:externalCompletionHandler:
resetToNonMigratedStateInOperationGroup:completionHandler:
_attemptLocalMigrationBeforeTryingToBecomeResponsibleForMigrationInOperationGroup:externalCompletionHandler:
_tryToBecomeResponsibleForMigrationInOperationGroup:externalCompletionHandler:
_scheduleMigrationRetryIfNeededInOperationGroup:externalCompletionHandler:
_transitionToMigrationState:
_tryToResumePendingRemoteMigrationFromMigrationInfo:inOperationGroup:externalCompletionHandler:
_performMigrationAsPrimaryDevice:inOperationGroup:externalCompletionHandler:
setTimeout:
_tryToBecomeResponsibleForMigrationWithRetryManager:inOperationGroup:externalCompletionHandler:
_handleFailureToBecomeResponsibleForMigrationDueToConflictInOperationGroup:externalCompletionHandler:
_becameResponsibleForMigrationInOperationGroup:externalCompletionHandler:
setRemoteMigrationState:deviceIdentifier:inOperationGroup:completionHandler:
lockForClient:
unlockForClient:
_handlePreemptionInOperationGroup:externalCompletionHandler:
_resetToIdleAfterMigrationFailureInOperationGroup:externalCompletionHandler:
serverModificationDate
deleteBookmarksZoneInOperationGroup:completionHandler:
_maximumNumberOfRetryAttempts
_delayBetweenRetryAttempts
setIncludesMigrationRecordInSaveBatch:
didStartMigratingToCKBookmarksAsPrimaryMigrator:localState:remoteState:
didFailToMigrateToCKBookmarksAsPrimaryMigrator:error:
didSuccessfullyMigrateToCKBookmarksAsPrimaryMigrator:
beginMigratingAsPrimaryMigrator:inOperationGroup:willBeginMigrationHandler:withCompletionHandler:
setMigrationState:
invalidateCachedDataclassEnabledness
_numberOfRetryAttempts
_cachedRemoteStateForAnalytics
doubleForKey:
date
dateByAddingTimeInterval:
collectAllRecordNamesInDatabase:
didReceiveRecordWithNameFromServer:
namesOfLocalRecordsToDelete
_namesOfLocalRecordsToDelete
T@"NSSet",R,C,N
safari_arrayByGroupingIntoArraysWithMaxCount:
safari_stringForKey:
_initWithTabUUIDString:tabURLString:destinationDeviceUUIDString:closeRequestUUIDString:encodedSystemFieldsData:cloudTabsRecordZoneID:
_initWithCKRecord:
safari_initWithEncodedRecordData:
setTrackChanges:
_valueTransformerForTabURL
allocWithZone:
tabURLString
tabUUIDString
destinationDeviceUUIDString
modificationDate
cloudTabCloseRequestWithWBSCloudTabCloseRequestDictionaryRepresentation:closeRequestUUIDString:cloudTabsRecordZoneID:
cloudTabCloseRequestWithCKRecord:
cloudTabCloseRequestWithTabUUIDString:tabURLString:destinationDeviceUUIDString:closeRequestUUIDString:encodedSystemFieldsData:cloudTabsRecordZoneID:
copyWithZone:
destinationDevice
_record
T@"CKReference",R,N
T@"CKRecord",R,N,V_record
T@"NSDictionary",R,C,N
initWithCollectionType:
initWithCollectionType:storeOwner:
tabGroupDatabaseAccessorWithStoreOwner:
readingListItemConfiguration
bookmarkConfiguration
bookmarkFolderConfigurationWithType:
orderedSetWithArray:
initWithItemType:itemSubtype:recordType:knownKeys:identityHashKeys:customAttributeGenerationKeys:attributeValueTransformers:identityHashValueTransformers:forRecordsPassingTest:
orderedSetWithObject:
tabGroupConfiguration
tabGroupTabConfiguration
isEqualToSet:
isEqualToOrderedSet:
isEqualToDictionary:
_defaultTransformer
bookmarkTypeForChange:
folderTypeForChange:
cloudBookmarkConfigurations
cloudTabGroupConfigurations
T@"CloudBookmarkItemConfiguration",R,N
recordTestBlock
_attributeKeysToGenerationKeys
_attributeKeysToTransformers
_identityHashKeysToTransformers
_itemType
_itemSubtype
_recordType
_knownKeys
_identityHashKeys
_recordTestBlock
Tq,R,N,V_itemType
Tq,R,N,V_itemSubtype
T@"NSString",R,C,N,V_recordType
T@"NSSet",R,C,N,V_knownKeys
T@"NSOrderedSet",R,C,N,V_identityHashKeys
T@?,R,C,N,V_recordTestBlock
_beginSyncingInOperationGroup:completionHandlers:
_isDataclassEnabled
_didFailToSyncWithError:inOperationGroup:
_continueSyncingAfterSyncingDown:inOperationGroup:
_performSyncDown
_cleanUpAndCallCompletionHandlersWithError:inOperationGroup:
_continueFetchingSettingsWithCompletionHandler:
safari_browserDefaults
_readServerChangeTokenFromUserDefaults
_clearCachedCloudSettingsRecordZoneIfNecessaryForError:
_handleExpiredChangeTokenError:completionHandler:
_pcsIdentitiesDidChangeNotification:
_saveServerChangeToken:
removeObserver:name:object:
settingStore
_syncingCompletionHandlers
_isSynchronizing
_didReceiveSyncRequestWhileSyncing
_isPerformingInitialSyncUp
_shouldPerformInitialSyncDown
_isWaitingForPCSIdentityUpdate
_saveSettingsOperationGroup
_fetchSettingsOperationGroup
_deleteSettingsOperationGroup
_saveBackgroundImageOperationGroup
_settingStore
T@"CloudSettingStore",R,N,V_settingStore
T@"<CloudSettingSyncCoordinatorDelegate>",W,N,V_delegate
migrationStateEncodedRecordData
createOperationGroupWithName:qualityOfService:xpcActivity:
fetchUserRecordIDWithCompletionHandler:
_prepareBookmarksRecordZoneInOperationGroup:withCompletionHandler:
setMigrationStateEncodedRecordData:
setTimeoutIntervalForRequest:
setUpBookmarksRecordZoneCreatingIfNeeded:inOperationGroup:withCompletionHandler:
_prepareBookmarksRecordZoneCreatingIfNeeded:inOperationGroup:withCompletionHandler:
operationConfiguration
_fetchRecordsOnInternalQueueWithServerChangeToken:inOperationGroup:result:completionHandler:
cloudBookmarkItemConfigurationForRecord:
setUpBookmarksRecordZoneInOperationGroup:withCompletionHandler:
_prepareBookmarksRecordZoneInvalidatingCachedZone:createIfNeeded:inOperationGroup:withCompletionHandler:
_saveBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
_addModifyRecordsOperations:inOperationGroup:operationQueue:
_prepareBookmarksRecordZoneOnInternalQueueAfterExternalCompletionHandlersHaveBeenStashedInvalidatingCachedZone:createIfNeeded:retryManager:inOperationGroup:withCompletionHandler:
initWithRecordZoneIDs:
_setUpRecordZoneInOperationGroup:withCompletionHandler:
_setUpEncryptionInfoInOperationGroup:withCompletionHandler:
_fetchEncryptionInfoInOperationGroup:withCompletionHandler:
fetchMinimumSyncAPIVersionInOperationGroup:withCompletionHandler:
setFetchRecordZonesCompletionBlock:
_setUpEncryptionInfoInOperationGroup:withRetryManager:completionHandler:
_hashGeneratorForEncryptionInfoRecord:
_saveOrLoadRecord:inOperationGroup:withCompletionHandler:
_createEncryptionInfoRecordWithCompletionHandler:
_saveBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:previouslySavedRecords:previouslyDeletedRecordIDs:mergeHandler:completionHandler:
_saveBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:previouslySavedRecords:previouslyDeletedRecordIDs:retryManager:mergeHandler:completionHandler:
arrayByAddingObjectsFromArray:
_checkMigrationStateOnInternalQueueInRecord:error:
safari_encodedRecordData
safari_filterObjectsUsingBlock:
subarrayWithRange:
safari_mapObjectsUsingBlock:
initWithRecordIDs:
safari_mapAndFilterKeysUsingBlock:
setFetchRecordsCompletionBlock:
_fetchEncryptionInfoInOperationGroup:retryManager:completionHandler:
safari_encryptedDataForKey:
safari_dataForKey:
initWithMigrationState:migratorDeviceIdentifier:serverModificationDate:
_fetchRemoteMigrationInfoInOperationGroup:withRetryManager:completionHandler:
_fetchMinimumSyncAPIVersionInOperationGroup:withRetryManager:completionHandler:
_setUpRecordZoneInOperationGroup:withRetryManager:completionHandler:
localStorage
includesMigrationRecordInSaveBatch
fetchUserIdentityInOperationGroup:withCompletionHandler:
fetchAllBookmarkRecordsWithCompletionHandler:
fetchBookmarksRecordChangesSinceServerChangeToken:inOperationGroup:recordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
fetchNumberOfDevicesInSyncCircleWithCompletionHandler:
saveBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
deleteBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:completionHandler:
fetchBookmarkRecordsWithNames:withCompletionHandler:
bookmarkHashGenerator
fetchEncryptionInfoWithCompletionHandler:
fetchMetadataZoneRecordsWithRecordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
fetchCachedRemoteMigrationInfoWithCompletionHandler:
setMinimumSyncAPIVersion:completionHandler:
_zoneID
_zoneLogName
type
_threadUnsafeBookmarksRecordZone
_bookmarksOperationQueue
_threadUnsafePrepareRecordZoneCompletionHandlers
_threadUnsafeBookmarkHashGenerator
_threadUnsafeSyncRequirementsRecord
_threadUnsafeMigrationStateRecord
_bookmarksRecordZoneID
_syncRequirementsRecordID
_bookmarkEncryptionInfoRecordID
_migrationStateRecordID
_threadUnsafeIncludesMigrationRecordInSaveBatch
_threadUnsafeLocalStorage
_type
_recordZoneSubscriptionID
_cloudBookmarkItemConfigurations
Tq,R,N,V_type
T@"NSString",R,C,N,V_recordZoneSubscriptionID
TB,N,V_threadUnsafeIncludesMigrationRecordInSaveBatch
T@"<CloudBookmarkStoreLocalStorage>",R,N,V_threadUnsafeLocalStorage
T@"CKRecordZoneID",R,N,V_bookmarksRecordZoneID
T@"BookmarkHashGenerator",R,N
T@"NSArray",R,C,N,V_cloudBookmarkItemConfigurations
migrationStateKey
T@"NSData",C,N
_defaults
_beginSyncingWithOperationGroupForFetching:operationGroupForSaving:completionHandlers:
_scheduleRetryIfAbleWithOperationGroupForFetching:operationGroupForSaving:completionHandlers:
openDatabase
closeDatabaseAndSave:
databaseSyncDataInDatabase:databaseAccessor:
_resetSyncData
_didFailToSyncWithError:didOpenDatabase:
_bookmarkStoreDidFinishSetUp
clearAllSyncDataWithDatabase:
initWithDelegate:
didNotSaveRecordsAfterMigration
beginMergingChangesWithDatabase:
finishMergingChangesWithDatabase:
_processChanges
_continueSyncingAfterSyncDown:
applyAllPendingReferencesWithUpdater:
clearChangesWithChangeToken:database:
_cleanUpAndCallCompletionHandlersWithError:
isDatabaseOpen
copyServerIdInFolderBeforeServerId:database:
setDidNotSaveRecordsAfterMigration:
writeToDatabase:databaseAccessor:
initWithDatabase:databaseAccessor:updater:
processChanges
changes
changeToken
movedRecordNames
parentRecordNamesToMovedChildRecordNames
generatePositionsForChildRecordNamesGroupedByParentFolders:
_didSaveRecordsLocally
_nextRecordBatchGetRecordNamesToCloudBookmarks:withCloudBookmarkAllocationBlock:
_saveNextChangedRecordBatch
_saveRecordBatch:recordNamesToCloudBookmarks:successCompletionHandler:
sortUsingComparator:
_saveNextReparentedRecordBatch
size
valueForKey:
_rebuildUndeletedBookmark:
_performSyncDownWithCompletionHandler:
lastServerChangeToken
_performSyncDownWithLastServerChangeToken:completionHandler:
_updateBookmarkWithRecord:
_didCompleteSyncDownAfterExpiredChangeTokenError
intersectsSet:
intersectSet:
setLastServerChangeToken:
_bookmarkForRemoteRecord:isNewBookmark:
_existingBookmarkForRemoteRecord:
_reparentAndSaveUnrootedBookmarks
_finishSyncing
nextChangeID
_nextChangeID
copyServerIdInFolderAfterServerId:database:
positionBetweenPosition:andPosition:withDeviceIdentifier:changeID:
positionForBookmarkWithRecordName:
deviceIdentifierForPositionGenerator:
nextChangeIDForPositionInPositionGenerator:
positionGenerator:positionForRecordName:
positionGenerator:recordNameOfBookmarksBeforeRecordWithName:
positionGenerator:recordNameOfBookmarksAfterRecordWithName:
_recordNameOfLastRecordInRoot
_operationGroupForFetching
_operationGroupForSaving
_changeToken
_movedRecordNames
_unsavedChanges
_unsavedBookmarkFromLastBatch
_unsavedReparentedRecordNames
_lastKnownPositionOfLastItemInRootFolder
_namesOfRecordsSavedToTheServer
_namesOfRecordsMissingFromPreviousSyncDown
_namesOfRecordsExpectedOnSyncDown
_movedBookmarkManager
_pendingReferenceManager
_positionGenerator
_expiredChangeTokenHandler
_didResetSyncData
_retryTimer
_numberOfRetries
_prepareRecordsForMigration
_performMergingSyncDownInOperationGroup:
copyChangeTokenWithDatabase:
convertRecordsForMigration
_didSaveLocalRecords
_migrationDidCompleteWithError:
performDeduplicationWithDatabase:mode:
_generateAndSaveRecordsInOperationGroup:
beginSyncDownInOperationGroup:keepingRecordsMarkedAsDeletedLocally:completionHandler:
_performSyncDownInOperationGroup:
beginFolderMigrationInOperationGroup:completionHandler:
_performSyncDownInOperationGroup:withRetryManager:
_didFinishSyncDownInOperationGroup:
beginSyncDownInOperationGroup:completionHandler:
_reparentAndSaveUnrootedBookmarksInOperationGroup:
beginSavingReparentedBookmarksInOperationGroup:withRecordNames:lastKnownPositionInRoot:completionHandler:
cloudBookmarkSyncMigrationSaveHandler:didMoveBookmark:
cloudBookmarkSyncMigrationSaveHandler:didDeleteBookmarkWithRecordName:
cloudBookmarkSyncMigrationSaveHandler:shouldSaveBookmark:
cloudBookmarkSyncMigrationSaveHandler:shouldApplyReference:withGeneration:toAttribute:inRecordWithName:
cloudBookmarkSyncMigrationSyncDownHandler:didMoveBookmark:
cloudBookmarkSyncMigrationSyncDownHandler:didDeleteBookmarkWithRecordName:
cloudBookmarkSyncMigrationSyncDownHandler:shouldApplyReference:withGeneration:toAttribute:inRecordWithName:
beginMigrationInOperationGroup:completionHandler:
_completionHandler
_converter
_syncDownHandler
_saveReparentedBookmarksHandler
_hasSavedBookmarksLocally
initWithContainerIdentifier:environment:
setEncryptionServiceName:
setUseZoneWidePCS:
setApplicationBundleIdentifierOverrideForPushTopicGeneration:
setApplicationBundleIdentifierOverrideForContainerAccess:
safari_safariApplicationPlatformBundleIdentifier
setApplicationBundleIdentifierOverrideForTCC:
setApplicationBundleIdentifierOverrideForNetworkAttribution:
initWithContainerID:options:
_safari_containerWithIdentifier:encryptionServiceName:
inMemoryDatabaseURL
initWithDatabaseURL:cloudTabsRecordZoneID:
initWithContainerIdentifier:appleAccountInformationProvider:
_determineCloudTabSyncCoordinatorWithCompletion:
setStateChangeObserver:
closeDatabaseWithCompletionHandler:
_transitionCloudTabSyncCoordinatorToManateeState:completion:
determineManateeStateWithCompletion:
openDatabaseIfNecessary
initWithCloudTabLocalStore:
tearDown
initWithCloudRemoteStore:localStore:accountStore:
setDisabled:
setUseManateeContainerForSyncing:completionHandler:
deleteDatabaseWithCompletionHandler:
getUseManateeContainerForSyncingWithCompletionHandler:
deleteCloudTabsZoneWithCompletionHandler:
_manateeErrorCode:
_deleteCloudTabsZoneWithCompletionHandler:
_pcsIdentitiesChangedNotification:
_handleManateeErrorIfNeeded:completionHandler:
_fetchDevices
cloudRemoteStore
loadCloudTabDataWithCompletionHandler:
_queue
_cloudTabLocalStore
_remoteStore
_syncCoordinator
_localStoreShim
_containerManateeObserver
_syncCoordinatorDeterminationCompletionBlocks
_localStoreShimForManateeContainer
_currentManateeState
_manateeStateNeedsUpdate
_determiningSyncCoordinator
_completionHandlersForCurrentDeviceFetchRequest
_completionHandlersForNextDeviceFetchRequest
T@"<CloudTabSyncArbiterDelegate>",W,N,V_delegate
T@"CKContainer",R,N
loadCloudTabDeviceWithUUIDString:completionHandler:
deleteRecordsWithPrimaryKeys:completionHandler:
saveCloudTabDevices:tabs:closeRequests:completionHandler:
getServerChangeTokenDataWithCompletionHandler:
setServerChangeTokenData:completionHandler:
cloudTabLocalStore:hadSevereError:
cloudTabLocalStoreDidOpen:
T@"<CloudTabLocalStoreDelegate>",W,N
disabled
cloudTabLocalStore
_disabled
TB,N,V_disabled
T@"<CloudTabLocalStore>",R,N,V_cloudTabLocalStore
T@"<CloudTabLocalStoreDelegate>",W,N,V_delegate
databaseURLForFilename:
_didFinishMigrationWithError:
_beginMigrationAsPrimaryMigrator:inOperationGroup:
_migrationConverter
_collectDiagnosticsDataWithRemoteMigrationInfo:remoteMigrationInfoError:completionHandler:
createDatabase
numberWithInt:
_changesDictionaryFromDatabase:
_localBookmarksDictionaryFromDatabase:
localizedDescription
_stringForRemoteMigrationState:
copyChangesWithDatabase:changeToken:
changeIsDAVMoveChange:
_traverseBookmarksInDatabase:parentFolderID:bookmarksCount:foldersCount:details:
_identifierForSensitiveString:
_stringForFolderType:
absoluteString
_stringForBookmarkType:
UUIDString
_sensitiveStringIdentifiers
_createCloudTabsRecordZoneInOperationGroup:withRetryManager:completionHandler:
createCloudTabsRecordZoneInOperationGroup:completionHandler:
saveCloudTabsRecordBatch:createCloudTabsZoneIfMissing:inOperationGroup:completionHandler:
_saveCloudTabsRecordBatch:inOperationGroup:completionHandler:
_operationToDeleteCloudTabRecordIDs:completionHandler:
_saveCloudTabsRecordBatch:previouslySavedRecords:previouslyDeletedRecordIDs:retryManager:inOperationGroup:completionHandler:
_recursivelyCancelDependentOperations:operationQueue:
operations
dependencies
isCancelled
cancel
fetchCloudTabsRecordChangesSinceServerChangeToken:inOperationGroup:recordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
deleteCloudTabRecords:inOperationGroup:completionHandler:
deleteCloudTabsZoneInOperationGroup:completionHandler:
_threadUnsafeDatabase
_cloudTabsOperationQueue
_usesManateeContainer
TB,R,N,V_usesManateeContainer
setRootRecordName:
recordNameEnumerator
_generateAndSaveRemainingRecordsInOperationGroup:
nextObject
positionForRecordName:
_didFailSavingWithError:
_didFinishSavingRecordsWithNames:
_nextCloudBookmarkToSave
_recordNameEnumerator
_generateRecordPositions
arrayWithObject:
_childRecordNamesInParentServerSyncId:
_recordNamesToGeneratePositionsForInRecordNames:inParentRecordName:getFolderRecordNames:getLastValidPosition:
_generatePositionsForChildRecordNames:withStartingPosition:
addEntriesFromDictionary:
copyFirstServerIdInFolderWithServerId:database:
_existingPositionForRecordWithName:getIsFolder:
initWithParentPositionGenerator:
childRecordNamesForRecordName:
childFolderRecordNamesForRecordName:
rootRecordName
_recordNamesToChildRecordNames
_recordNamesToChildFolderRecordNames
_recordNamesToPositions
_rootRecordName
T@"NSString",C,N,V_rootRecordName
parentGenerator
_folderRecordQueue
_currentChildRecordNames
_parentGenerator
T@"CloudBookmarkSyncMigrationPositionGenerator",R,N,V_parentGenerator
_dequeueNextCloudBookmarkToSave
_saveRecordBatch:inOperationGroup:recordNamesToCloudBookmarks:
_recordByMergingRemoteRecord:withLocalRecord:recordNamesToCloudBookmarks:saveError:
_recordByMergingRemoteRecord:intoCloudBookmark:
recordIDForParentSyncServerID:
_unsavedProcessedBookmark
T@"<CloudBookmarkSyncMigrationSaveHandlerDelegate>",W,N,V_delegate
initWithConfiguration:container:accountStore:maintenanceActivity:
setDefaultConfiguration:
_shouldSync
_createOperationGroupWithName:
shouldSync
persistChangesWithCompletion:
_scheduleSyncIfNeeded
_applyChangeSet:completionHandler:
wb_lockError
wb_databaseOpenError
initWithTabCollection:
error
_processLocalTabOperation:completionHandler:
tabCollection
setTabCollection:
_cancelSyncTimer
_performOnTabCollectionQueue:scheduleSync:completionHandler:
accountStore
setSyncing:
_tabCollectionQueue
_tabCollectionSyncTimer
_didScheduleSync
_maintenanceActivity
_cloudBookmarkStore
_fetchTabGroupsOperationGroup
_saveTabGroupsOperationGroup
_needsSync
_syncing
T@"ACAccountStore",R,N,V_accountStore
T@"<CloudTabGroupSyncManagerDelegate>",W,N,V_delegate
syncing
TB,N,GisSyncing,V_syncing
_namesOfRemainingRecordsToSave
_lastKnownPositionInRoot
_isSavingReparentedRecords
_updateLocalBookmarkWithCKRecord:
_didDeleteRecordWithName:
_didFinishSyncingReceivingRecordNames:error:
_cloudBookmarkForRecord:isNewBookmark:
_recordNamesToDelete
T@"<CloudBookmarkSyncMigrationSyncDownHandlerDelegate>",W,N,V_delegate
_createServerSyncIDForItem:
data
saveDatabase:
updater
deletedRecordNames
_updater
_changes
_deletedRecordNames
_parentRecordNamesToMovedChildRecordNames
T@"<CloudBookmarkUpdater>",R,W,N,V_updater
T@"NSArray",R,C,N,V_changes
T@,R,N,V_changeToken
T@"NSSet",R,C,N,V_movedRecordNames
T@"NSSet",R,C,N,V_deletedRecordNames
T@"NSDictionary",R,C,N,V_parentRecordNamesToMovedChildRecordNames
isMainThread
Tr^v,R,N
databaseOpen
TB,R,N,GisDatabaseOpen
T@"<WBSBookmarkDBAccess>",R,N
_databaseLockCount
_databaseOpen
T@"<CloudBookmarkDatabaseLockArbiterDelegate>",W,N,V_delegate
TB,R,N,GisDatabaseOpen,V_databaseOpen
initWithData:encoding:
URLWithString:
safari_dictionaryForKey:
_initWithTabUUIDString:owningDeviceUUIDString:owningSceneID:position:title:urlString:isPinned:isShowingReader:readerScrollPositionPageIndex:encodedSystemFieldsData:cloudTabsRecordZoneID:
_commonInitWithTabUUIDString:owningDeviceUUIDString:owningSceneID:position:title:urlString:isPinned:isShowingReader:readerScrollPositionPageIndex:encodedSystemFieldsData:cloudTabsRecordZoneID:
_valueTransformerForTitleAndURL
title
urlString
positionTabAfterPosition:
isShowingReader
isPinned
readerScrollPositionPageIndex
owningSceneID
_positionAfterPosition:
owningDeviceUUIDString
readerScrollPositionDictionary
cloudTabWithWBSCloudTabDictionaryRepresentation:owningDeviceUUIDString:position:cloudTabsRecordZoneID:
cloudTabWithCKRecord:
cloudTabWithTabUUIDString:owningDeviceUUIDString:owningSceneID:position:title:urlString:isPinned:isShowingReader:readerScrollPositionPageIndex:encodedSystemFieldsData:cloudTabsRecordZoneID:
updateFromCloudTab:previousTabPosition:
owningDevice
wbsCloudTabDictionaryRepresentation
T@"WBSCRDTPosition",R,C,N
pinned
TB,R,N,GisPinned
showingReader
TB,R,N,GisShowingReader
T@"NSNumber",R,N
stringByAppendingPathComponent:
fileURLWithPath:isDirectory:
_isDatabaseOpen
_databaseWillBeOpened
_openDatabase:deleteDatabaseFileOnError:
_closeDatabase
_deleteDatabaseFileAtURL:reopenDatabase:
_metadataDataValueForKey:
_setMetadataDataValue:forKey:
initWithURL:queue:
openWithAccessType:error:
_databaseAtURL:failedToOpenWithError:
setResourceValue:forKey:error:
_failedToExcludeDatabaseFromBackupWithError:
enableWAL:
_failedToEnableWALWithError:
_failedToEnableForeignKeysWithError:
_migrateToCurrentSchemaVersionIfNeeded
_currentSchemaVersion
_databaseAtURL:hasIncorrectSchemaVersion:
close
_databaseWillBeDeleted
safari_removeFileAtURL:error:
_databaseAtURL:failedToDeleteWithError:
_databaseWillBeRecreated
_failedToSetSchemaVersion:withError:
int64AtIndex:
_failedToUpdateMetadataValueWithKey:error:
changedRowCount
_failedToInsertMetadataValueWithKey:error:
dataAtIndex:
_failedToDeleteMetadataValueWithKey:error:
_vacuumFailedWithError:
_databaseWillBeClosed
intAtIndex:
statement
_resetDatabaseSchema
_createFreshDatabaseSchema
_setDatabaseSchemaVersion:
database:hadSevereError:
initWithDatabaseURL:databaseQueueLabel:
_metadataInt64ValueForKey:
_setMetadataInt64Value:forKey:
_vacuum
_failedToEnableSecureDeleteWithError:
set_database:
_databaseQueue
set_databaseQueue:
_databaseURL
__database
__databaseQueue
T@"WBSSQLiteDatabase",&,N,V__database
T@"NSObject<OS_dispatch_queue>",&,N,V__databaseQueue
initWithDatabase:query:error:
execute
handle
reportErrorWithCode:statement:error:
initWithDatabase:query:
fetch
bindString:atParameterIndex:
bindInt64:atParameterIndex:
bindData:atParameterIndex:
safari_dateForKey:
_initWithDeviceUUIDString:deviceName:hasDuplicateName:lastModified:isEphemeralDevice:encodedSystemFieldsData:cloudTabsRecordZoneID:
safari_arrayForKey:
_setTabsFromWBSCloudTabDictionaryRepresentations:cloudTabsRecordZoneID:
_valueTransformerForDeviceName
deviceName
hasDuplicateName
isEphemeralDevice
lastModified
tabs
_updateTabsFromCloudTabs:
indexOfObjectPassingTest:
objectAtIndexedSubscript:
_positionAfterPosition:owningDeviceUUIDString:
setTabs:
cloudTabDeviceWithDictionaryRepresentation:deviceUUIDString:cloudTabsRecordZoneID:
cloudTabDeviceWithCKRecord:
cloudTabDeviceWithDeviceUUIDString:deviceName:hasDuplicateName:isEphemeralDevice:lastModified:encodedSystemFieldsData:cloudTabsRecordZoneID:
updateFromCloudTabDevice:
_tabs
ephemeralDevice
TB,R,N,GisEphemeralDevice
T@"NSDate",R,N
T@"NSArray",C,N,V_tabs
safari_isCloudTabDeviceRecord
safari_isCloudTabRecord
safari_isCloudTabCloseRequestRecord
safari_cloudTabDeviceRecord
TB,R,N,Gsafari_isCloudTabDeviceRecord
safari_cloudTabRecord
TB,R,N,Gsafari_isCloudTabRecord
safari_cloudTabCloseRequestRecord
TB,R,N,Gsafari_isCloudTabCloseRequestRecord
_loadDevices
_loadTabsForDevice:
_loadCloseRequests
_loadDeviceWithUUIDString:
lastErrorMessage
_saveDevice:
_saveTab:
_saveCloseRequest:
stringAtIndex:
uncopiedDataAtIndex:
boolAtIndex:
doubleAtIndex:
dateWithTimeIntervalSinceReferenceDate:
safari_encodedSystemFieldsData
timeIntervalSinceReferenceDate
reset
_cloudTabFromRow:deviceUUIDString:
_cloudTabsRecordZoneID
bindInt:atParameterIndex:
bindDouble:atParameterIndex:
set_isBeingTornDown:
_resumeSavingQueue
_resumeFetchingQueue
_isDeletingDatabase
_isBeingTornDown
_suspendSavingQueue
_continueSavingTabsForCurrentDevice
_shouldContinueSyncOperation
_mergeDeviceIntoDeviceFromSQLiteStoreIfNecessary
_saveDeviceToCloudKit
_deleteObsoleteTabRecordsFromCloudKit
_updateSQLiteStoreFromCloudKitAfterSavingTabs
_finishedSavingDevice
_suspendFetchingQueue
set_cloudTabStoreError:
_cloudTabStoreError
_handleSevereSQLiteErrorWhileMergingExistingDevice:
_changedRecordsForCloudTabDevice:
_saveNextRecordBatchCreatingCloudTabsZoneIfMissing:
_nextRecordBatchToSave
_recordIDsFromDeviceOrTabUUIDStrings:
_updateSQLiteStoreFromCloudKitInOperationGroup:withCompletionHandler:
_canCloseCloudTabStoreDatabase
safari_hasAtLeastOneChangedField
_continueSavingCloseRequest
_saveCloseRequestToCloudKit
_updateSQLiteStoreFromCloudKitAfterSavingCloseRequest
_finishedSavingCloseRequest
_beginFetchingTabs
_continueFetchingTabs
_getServerChangeTokenFromSQLiteStore
_fetchChangesFromCloudKitCreatingCloudTabsZoneIfMissing:
_removeDeletedRecordsFromSQLiteStore
_saveModifiedRecordsToSQLiteStore
_setServerChangeTokenInSQLiteStore
_loadDevicesAndTabsFromSQLiteStore
_finishedFetching
_handleSevereSQLiteErrorWhileFetching:
_deleteDatabaseAndRestartFetch
_didFetchModifiedRecord:
_retryFetchChangesFromCloudKitIfPossibleAfterCreatingCloudTabsZoneCompletedWithError:
_shouldDeleteDatabaseForError:
_deleteRecordsWithNames:inOperationGroup:completionHandler:
_continueDeleting
_deleteRecordsFromCloudKit
_updateSQLiteStoreFromCloudKitAfterDeletingRecords
_finishedDeletingRecords
_cloudTabStore
_deletingDatabaseCount
_savingQueue
_savingQueueSuspended
_saveTabsOperationGroup
_tabSaveState
_saveTabsCompletion
_deviceToSave
_recordsToSave
_unsavedRecordFromLastBatch
_uuidStringsOfTabsToDelete
_saveTabsError
_saveCloseRequestsOperationGroup
_closeRequestSaveState
_saveCloseRequestCompletion
_closeRequestToSave
_saveCloseRequestError
_deleteCloseRequestsOperationGroup
_deleteDevicesOperationGroup
_deleteState
_currentDeleteOperationGroup
_deleteCompletion
_recordIDsToDelete
_deleteError
_fetchingQueue
_fetchingQueueSuspended
_fetchTabsOperationGroup
_currentFetchOperationGroup
_fetchState
_fetchError
_isRefetchingAfterDeletingDatabase
_fetchOperationType
_fetchDevicesCompletion
_updateSQLiteStoreFromCloudKitCompletion
_modifiedDevices
_modifiedTabs
_modifiedCloseRequests
_namesOfDeletedRecords
_fetchedDevices
_fetchedCloseRequests
__isBeingTornDown
_cloudRemoteStore
__cloudTabStoreError
T@"NSError",&,V__cloudTabStoreError
TB,V__isBeingTornDown
T@"CloudTabRemoteStore",R,N,V_cloudRemoteStore
_convertItem:
setSyncKey:item:
_cloudKitRecordNameForBookmarkDAVServerSyncId:
scheme
URLByDeletingPathExtension
lastPathComponent
_errorWithCode:
clearlAllLocalBookmarksForAutomatedTestingWithDatabase:
_descriptionForErrorCode:
initWithFirst:second:
safari_mapAndFilterKeysAndObjectsUsingBlock:
hasUnappliedReferences
_pendingReferences
setXpcActivity:
addDependency:
_addDependenciesForModifyRecordsOperation:operationQueue:
_operationConfiguration
T@"CKDatabase",R,N
T@"NSOperationQueue",R,N
T@"CKOperationConfiguration",R,V_operationConfiguration
Not updating push topic
Updating push topic subscriptions with sync enabled = %d
Using opportunistic push topic
Using normal push topic
Set up push connection
Received a push notification
Ignoring push notification because notification is nil
Ignoring push notification because sync is disabled
User account changed
Not triggering sync since migration is in progress
*** Starting CloudKit bookmark sync for trigger: %lu
Transmitted Internet Records
*** CloudKit bookmark sync failed with result <%ld>: %{public}@
*** CloudKit bookmark sync finished with result: %ld
Attempting migration from DAV to CloudKit since we got back an explicit 'zone deleted' error
Sending notification of Bookmarks sync result: %ld
Fetching remote migration state
Simulating fetch of 'Unknown' migration state because Safari sync is disabled
Failed to fetch remote migration state: %{public}@
Fetched remote migration state: %ld
Asked to migrate, but bailing because migration is suppressed by the cycler
Bailing out from migration since migration was already in progress
*** Cloud settings initial fetch failed with result <%ld>: %{public}@
*** Cloud settings initial fetch finished with result: %ld
Connection to bookmarks sync agent by %d was denied: Missing entitlement
Ignoring push notification %{public}@ because it does not match any known push topic
Push notification %{public}@ comes from a container that is used by multiple sync coordinators
Attempting to sync Bookmarks in response to a subscription push notification
Attempting to sync Cloud Settings in response to a subscription push notification
Attempting to sync Tab Groups in response to a subscription push notification
Ignoring push notification %{public}@ because it does not match any known subscription
Reached maximum delay before forcing a sync after a push notification
Ignoring attempt at checking database changes since a request is already running - container: %{public}@
Beginning fetch database change operation for container with identifier: %{public}@, server change token: %{public}@
Database changes fetch retry limit exceeded
Failed to fetch database changes for container: %{public}@ with error: %{public}@
Did finish fetching database change operations for container with identifier: %{public}@, new server change token: %{public}@
Attempting to sync Bookmarks in response to a push notification after checking container zones
Attempting to sync Tab Groups in response to a push notification after checking container zones
Attempting to sync CloudKit Tabs in response to a push notification after checking container zones
Fetching Bookmarks zone subscription status failed with error: <%{public}@>.
Bookmarks zone subscription already exists
Saving Bookmarks zone subscription failed with error: <%{public}@>.
Saving Bookmarks zone subscription succeeded
Fetching CloudTabs zone subscription status failed with error: <%{public}@>.
CloudTabs zone subscription already exists
Saving CloudTabs zone subscription failed with error: <%{public}@>.
Saving CloudTabs zone subscription succeeded
Ignoring request to sync/migrate because migration is in progress
Ignoring request to sync/migrate because sync is in progress
Will attempt sync/migration in response to trigger: %lu
Fetching remote migration state since we tried syncing while not locally migrated
Notifying Safari of iCloud Tabs changes in response to a push notification
No need to register for CloudTabs zone subscription because the last attempt was successful or a registration is in progress
Attempting to register CloudTabs zone subscription
Registering for CloudTabs zone subscription succeeded or we were already subscribed
Registering for CloudTabs zone subscription failed with error: <%{public}@>.
Received account change notification with type: %ld
Retrying initial CloudTab fetch
Finished initial CloudTab fetch with error %{public}@
No need to register for CloudSettings zone subscription because the last attempt was successful or a registration is in progress
Attempting to register CloudSettings zone subscription
CloudSettings zone subscription registration succeeded or we were already subscribed
Registering for CloudSettings zone subscription failed with error: <%{public}@>.
Fetching CloudSettings zone subscription failed due to deallocation
Fetching CloudSettings zone subscription status failed with error: <%{public}@>.
CloudSettings zone subscription already exists
Saving CloudSettings zone subscription failed due to deallocation
Saving CloudSettings zone subscription failed with error: <%{public}@>.
Saving CloudSettings zone subscription succeeded
Ignoring request to sync because sync is in progress
Safari Settings syncing is disabled. Cloud settings sync aborted
*** Starting Cloud settings sync for trigger: %lu
*** Cloud settings sync failed with result <%ld>: %{public}@
*** Cloud settings sync finished with result: %ld
Received container change callback. Registering for a new zone subscription
*** Migration to CloudKit started
Checking In xpc activity with identifier %{public}s
Checked In xpc activity with identifier %{public}s
An activity with identifier %{public}s is already scheduled
No prior %{public}s activity was found. Registering a new one
No prior %{public}s activity was found and registration is not requested
Registering for Bookmarks zone subscription xpc activity. Register if needed: %d, ignore ongoing registration: %d delay: %lld
Attempting to save Bookmarks zone subscription
Saving Bookmarks zone subscription succeeded or we were already subscribed
Checking remote migration state for a chance to migrate as a secondary device
Remote migration state is set to finished; determining if secondary device migration can proceed
Attempting to migrate as secondary device
Not proceeding with migration because there is already an ongoing migration
Not proceeding with migration because this device was the primary migrator
No device has migrated yet; continuing to periodically check the remote migration state
Unsupported remote migration state returned; stopping the periodic remote migration check
Registering migration XPC activity
CloudKit bookmarks migration activity is running
Attempting to migrate to CloudKit
*** Migration to CloudKit finished with status: %d
No need to register for TabGroups zone subscription because the last attempt was successful or a registration is in progress
Attempting to register TabGroups zone subscription
Registering for TabGroups zone subscription succeeded or we were already subscribed
Registering for TabGroups zone subscription failed with error: <%{public}@>.
Fetching TabGroups zone subscription status failed with error: <%{public}@>.
TabGroups zone subscription already exists
Saving TabGroups zone subscription failed with error: <%{public}@>.
Saving TabGroups zone subscription succeeded
Ignoring request to sync TabGroups because sync is in progress
Retry tab groups sync because running outside of XPC activity failed.
Will attempt tab group sync in response to trigger: %lu
Ignoring request to sync TabGroups for manager %lu with trigger %lu because the database does not exist yet
 Starting TabGroups sync for manager %lu with trigger: %lu
 TabGroups sync failed for manager %lu with result <%ld>: %{public}@
 TabGroups sync finished for manager %lu with result: %ld
Did detect an issue while syncing related to <rdar://%{public}@>
Did detect an issue while syncing with no corresponding bug IDs
Attempted to post detected syncing bug notification without bug IDs
Posting detected syncing bug notification with bug IDs: <rdar://%{public}@>
Hierarchy check failed, please run sysdiagnose
Could not generate IdentityHash with empty components
Could not generate IdentityHash with key %{public}@, keyID %{public}@
Could not generate IdentityHash for components %{private}@, with key %{public}@, keyID %{public}@
Cannot verify identity hash of CKRecord with name %{public}@ because its minimumAPIVersion %ld is more recent than the version %ld of the client.
Valid identity hash for remote record with name: %{public}@, key: %{public}@, keyID: %{public}@, identityHash: %{public}@, components: %{private}@
Identity hash is invalid for remote record with name: %{public}@, key: %{public}@, keyID: %{public}@, identity hash actual: %{public}@, expected: %{public}@
Identity hash is invalid for remote record with name: %{public}@, key: %{public}@, keyID: %{public}@, identity hash actual: %{public}@, expected: %{public}@, components: %{private}@
Asking the position for the root record makes no sense
Unknown item with record name: %{public}@
Item with record name does not have sync data: %{public}@
%{public}s Unknown item type
Creating CloudBookmark to update locally with record name: %{public}@
Unknown item for reparenting with record name: %{public}@
%{public}s Unknown item type %{public}@
Attempting to migrate record with name %{public}@ that does not exist in the local database.
%{public}s Unknown item type %ld
Delete change %{private}@ to update does not have a valid record
Could not decode sync data in deleted change %{private}@ to update with record name: %{public}@.
No record object found in decoded sync data of deleted change %{private}@ to update with record name: %{public}@.
Updating state generation of deleted record with name: %{public}@, generation: %{public}@
Unknown type %ld for change %{private}@
Cannot find configuration for change with type %{public}@ for bookmark %{public}@
Change of type %{public}@ for bookmark %{public}@ of type %{public}@ given without an associated item
Expecting CKBAItemTypeBookmark type for local item %p, but got %ld
Expecting CKBAItemTypeBookmark type for local item %{private}@, but got %ld
Expecting %{public}@ type for local bookmark item %p, but got %ld
Expecting %{public}@ type for local bookmark item %{private}@, but got %ld
Expecting CKBAItemTypeFolder type for local item %p, but got %ld
Expecting CKBAItemTypeFolder type for local item %{private}@, but got %ld
Expecting %{public}@ folder type for local folder item %p, but got %ld
Expecting %{public}@ folder type for local folder item %{private}@, but got %ld
%{public}s Unknown CKRecord type %{public}@
Updating references for the root record makes no sense
Could not find item with record name %{public}@ in database to apply pending references %{public}@
Cannot find configuration for item with record name: %{public}@ to apply pending references %{public}@
Local record with record name %{public}@ to reparent does not have a CKRecord stored in its sync data %{public}@
Reparenting record with record name: %{public}@
%{public}s Unknown item type for record name %{public}@
Delete change of type %{public}@ given without a Server ID
Assigning new record with record name %{public}@ to locally modified item, this could create an empty record on the server
Assigning new record with record name %{public}@ to locally added item
Deleted bookmark change %{private}@ does not have a valid record name.
Ignoring Delete Change object for built-in record with name: %{public}@.
Deleted bookmark change with record name %{public}@ does not have a CKRecord attached to it
Preparing record with name %{public}@ to mark as deleted on the server with generation: %{public}@
Encountered an item with no record name; ignoring it
CKRecord %{private}@ with invalid record name was received; ignoring it
Creating %{public}@ record with name %{public}@ to add locally with parent: %{public}@ and position: %{public}@
Creating %{public}@ record with name %{public}@ to add locally with parent: %{public}@
Remote record is missing generation for its parent and position fields
Local record to migrate %p has an invalid record name even though it should have one at this point
Local record to migrate %{private}@ has an invalid record name even though it should have one at this point
Creating %{public}@ to complement saved record with name: %{public}@
Migrated record %{public}@ known to the server has no position!
Creating %{public}@ to migrate record unknown to the server with name: %{public}@
Preparing %{public}@ record with name: %{public}@ for change of type %{public}@ to save to the server with updated keys: <%{public}@>
Attributes <%{public}@> are not included in the set of modified attributes to update the CKRecord despite being used to update the generation
Attributes <%{public}@> are included in the set of modified attributes to update the CKRecord despite not being used to update the generation
Trying to read the value for a key on a record that was deleted locally. Record name: <%{public}@>, key: %{public}@.
Trying to read the value for a key even though the key was not modified locally in record. Record name: <%{public}@>, key: %{public}@.
Trying to read the transformed value for a key on a record that was deleted locally. Record name: <%{public}@>, key: %{public}@.
Trying to read the transformed value for a key even though the key was not modified locally in record. Record name: <%{public}@>, key: %{public}@.
Trying to read the value of ParentFolder on a record whose parent was not updated locally. Record name: <%{public}@>.
Trying to read the value of ParentFolder on a record that was deleted locally. Record name: <%{public}@>.
Trying to read the value of IdentityHash on a record whose Title or URL was not updated locally. Record name: <%{public}@>.
Trying to read the value of IdentityHash on a record that was deleted locally. Record name: <%{public}@>.
Saving record with name %{public}@ locally
Loading known keys <%{public}@> from remote record with name: %{public}@
Update generations of record %{public}@ with change of type %{public}@, updated keys <%{public}@>
Attributes <%{public}@> no longer need update despite those changes from a previous update not being validated
Record name: %{public}@, setting parent: %{public}@, generation: %{public}@, position: %{public}@
Non-built-in record with name %{public}@ does not have a position
Updating locally modified attributes <%{public}@>
%{public}@ attribute should have been saved during primary migration but has no generation locally.
Cannot save identity hash attributes since the local record is incomplete.
Did apply reference %{public}@ generation: %{public}@ to attribute %{public}@ of record name: %{public}@
Will merge local and remote records. Record name: %{public}@
Did finish merging local and remote records with record name: %{public}@ due to state changes. Result: %{public}@
Parent and position were updated locally but were not saved to the server
Merging local and remote record fields.
No merging needed for key: %@ with local generation: %@, remote generation: %@
Attribute <%{public}@> expected to be saved to the server has an empty generation
Copy remote value into local record for key: %{public}@ with local generation: %{public}@, remote generation: %{public}@
Copy local value into remote record for key: %{public}@ with local generation: %{public}@, remote generation: %{public}@
Attribute %{public}@ was updated locally but was not saved to the server
Update IdentityHash on remote record.
Update local and remote generations.
Did finish merging local and remote records with record name: %{public}@. Result: %{public}@
Merging parent and position for record Name: %{public}@, local and remote generations are equal: %{public}@
Merging parent and position into local record for record Name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Merging parent and position into remote record for record Name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Did finish merging local and remote records with record name: %{public}@. Local record will be deleted because its minimum API version %ld is higher than the API version %ld supported by this client.
Merging minimum API version for record name: %{public}@, local and remote generations are equal: %{public}@
Local and remote minimum API versions differ, even though generations are the same. Record name: %{public}@.
Merging minimum API version into local record for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Merging minimum API version into remote record for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Local and remote state generations are equal even though their states are different. Local Deleted: %ld, generation: %{public}@, Remote Deleted %ld, generation: %{public}@
Server previously told us the record was deleted, now it is undeleted. Mark the record %{public}@ as moved and continue merging: local generation: %{public}@, remote generation: %{public}@
Local record needs to be undeleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Local record needs to be deleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Remote record needs to be deleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Remote record needs to be undeleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Both local and remote records are deleted but remote record state generation needs to be updated for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Both remote and local records are deleted and remote generation does not need to be updated for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Local and remote records are not deleted and have equal generations: %{public}@.
Updating local state generation for record Name: %{public}@, local state generation: %{public}@, remote state generation: %{public}@
Updating remote state generation for record Name: %{public}@, local state generation: %{public}@, remote state generation: %{public}@
BAChange %{private}@ is neither a folder change or a bookmark change
Migration state: %ld, expect DAV IDs: %d, expect CloudKit IDs for all records: %d, expect parsable sync data: %d
Checking record with local ID: %{public}@, server ID: %{public}@, item type: %ld, subtype: %ld
Record does not have a server ID even though we expect all records to have one!
Record has a BookmarkDAV ID even though no record should have one!
Record has a CloudKit ID even though no record should have one!
Regular folder has built-in record name: %{public}@, shouldn't!
Built-in folder with type %ld, has invalid record name: %{public}@, expecting: %{public}@
Record has sync key even though migration began.
Item contains sync data even though it should not!
Record has ID %{public}@ but has no sync data!
Item contains sync data that cannot be parsed as CloudKit sync data!
CKRecord in item has a different record name %{public}@ from record name of the item: %{public}@
Record type %{public}@ of CKRecord in item does not match the expected BookmarkLeaf type.
Record type %{public}@ of CKRecord in item does not match the expected BookmarkList type.
CKRecord in item was never saved to the server despite being saved locally.
Sync data has no position stored despite its CKRecord being saved locally.
Sync data has no generation for its parent and position despite having saved sync data.
Sync data has no generation for its folder title and identity hash despite having saved sync data.
Sync data has no generation for its folder title, URL, and identity hash despite having saved sync data.
Checking account hash
Storing account hash
Account hash matches
Needs dataclass enabled check
Needs account hash check
JSON data could not be decompressed.
JSON data could not be parsed
Unexpected JSON root type, expecting: %{public}@ instead got: %{public}@
Failed to read from cloud bookmark transformed value data: %{public}@
Failed to decode encrypted data with exception: %{public}@
Failed to instantiate CloudKit settings database!
Fetching record changes with server change token %{public}@.
Fetching all records.
Record changed: %{private}@
Record of type %{public}@ deleted: <%{public}@>
Bailing out from record fetch due to deallocation with error %{public}@
Record fetch retry limit exceeded
Fetch record changes failed: %{public}@
Fetch records from record zone operation completed for record zone %{public}@
Fetch record zone changes operation failed: %{public}@
Enqueuing request to fetch records from record zone %{public}@
Number of device in sync circle is 0
Saving CloudSettings zone subscription
Bailing out from saving CloudSettings zone subscription due to deallocation
Saving CloudSettings zone subscription failed because of missing zone, attempting to create zone
Aborting save of CloudSettings zone subscription because zone couldn't be created
Saving CloudSettings zone subscription after creating zone
Attempting to save zone subscription for zone: %{public}@
Saving CloudSettings record
Attempting to create CloudSettings zone before retrying save operation
Retrying save operation after creating CloudSettingsZone
Failed to save record due to unexpected error: %{public}@
Failed to save record due to unrecoverable error: %{public}@
Received batch too large error for an individual record change; bailing out
Failed to save record due to unexpected error outside the CKErrorDomain: %{public}@
Failed to save record due to CloudKit error which could not be handled: %{public}@
Will save merged record
Will retry save with updated batch after error: %{public}@
Retrying save operation
Received batch too large error for an individual record change, bailing out
Modify records operation failed due to deallocation with error %{public}@
Attempting to retry save request
Record save retry limit exceeded
No records to delete.
Deleting %lu records.
Error occurred when deleting records: %{public}@
Clearing cached CloudSettings record zone
Deleting CloudSettings zone
Fetching CloudSettings zone subscription
Failed to fetch CloudSettings zone subscription by ID with error: %{public}@
Successfully fetched CloudSettings zone subscription
Creating CloudSettings zone
Failed to create CloudSettings zone with error: %{public}@
Bailing out of creating CloudSettings zone due to deallocation
Retrying creation of CloudSettings zone
Waiting to retry creation of CloudSettings zone
Zone creation retry limit exceeded
Successfully created CloudSettings zone
Moving record %{public}@ into parent record %{public}@
Missing parent record name for bookmark with name %{public}@. Reparenting to root.
Marking record name %{public}@ as moved locally
Attempted to delete built-in record with name: %{public}@, ignoring
Marking record name %{public}@ as deleted
Could not insert record with name %{public}@ in root folder!
Built-in bookmark folder with record name: %{public}@ was moved to parent with record name: %{public}@ instead of root
Could not insert record with name %{public}@ in built-in folder %{public}@!
Could not insert record with name %{public}@ in temporary folder!
Trying to move existing record with name %{public}@ into parent folder %{public}@ but the record does not exist locally!
Creating built-in folder with record name: %{public}@
The temporary folder contains %ld records that were not marked as deleted or moved to their final location. Record names: %{public}@
Record with name %{public}@ does not have a parent even though it was checked right before
Failed to insert %{public}@ into the root folder and for some reason the parent folder does not exist or creates a cycle!
Did finish checking hierarchy consistency, will move remaining records into their final location
Will move record %{public}@ into parent %{public}@
Could not move %{public}@ into folder %{public}@ even though all cycles and broken hierarchies should have been detected and fixed beforehand. Moving to the root.
Failed to insert %{public}@ into the root folder after failing to insert it into %{public}@, apparently there is no hierarchy to speak of.
Already verified parent chain fo record with name %{public}@
Checking parent chain of record with name %{public}@
Moved bookmark with record name %{public}@ was actually not saved to the database!
Parent %{public}@ was deleted, reparenting %{public}@
Loop detected, reparenting %{public}@ in list %{public}@
Parent %{public}@ is not in the database, reparenting %{public}@
Fixing order in local storage based on CloudKit positions
Record name %@, position: %@
Reordering children of root folder
Did finish reordering children of root folder
No children to reorder in folder with Server Sync ID: %@
Reordering children of record with Server Sync ID: %{public}@
Did finish reordering children of record with Server Sync ID: %{public}@
Removing %lu local items that were deleted on the server
Migration state value in server record is of type %{public}@ when NSNumber was expected
Migration state server record value (%{public}@) does not match expected state values
Checked in %{public}@ activity
No prior %{public}@ activity was found. Registering a new one
Running %{public}@ activity
Failed to set the activity state to 'Continue'. Deferring %{public}@ activity
Database for manager %lu doesn't exist. Deferring %{public}@ activity
Failed to acquire the sync lock. Deferring %{public}@ activity
Performing %{public}@ activity
Failed to get a valid device identifier to start coordinating migration.
Not migrating because Safari sync is disabled
Cannot read local migration state for migration due to invalid device identifier.
Not migrating because we've already migrated
Will attempt secondary migration
Will attempt primary migration
Failed to acquire lock on the database to read the migration state
Determining eligibility for local-only migration
Cannot determine eligibility for local-only migration due to invalid device identifier.
Bailing out from secondary migration without fetching remote migration info because Safari sync is disabled
Bailing out from secondary migration eligibility determination due to deallocation
Bailing out from secondary migration because Safari sync is disabled
Received an error fetching remote migration state: %{public}@; will attempt to become responsible for migration
Not eligible for local-only migration; will attempt to become responsible for migration
Remote migration pending; will decide whether we are responsible for resuming migration or should preempt the migrator
Performing local-only migration
Attempting to become responsible for migration by pushing state to the server
Cannot become responsible for migration due to invalid device identifier.
Bailing out from primary migration eligibility determination due to deallocation
Failed to become responsible for migration due to unrecoverable error: %{public}@
Failed to become responsible for migration due to CloudKit write error: %{public}@
Record zone unexpectedly deleted or missing; bailing out of primary migration
Migration coordinator retry limit exceeded
Pushed migration state successfully; assuming we are now responsible for migration
Bailing out from primary migration because Safari sync is disabled
Unable to lock backing store; bailing out from primary migration
Failed to push migration state because some other device modified it first; aborting
Cannot resume pending remote migration due to invalid device identifier
Received a migrationInfo with nil device identifier; will continue evaluating eligibility to steal right to migrate
Migration record indicates that we are the migrating device; attempting to resume migration
Not stealing right to migrate since no last modification date was stored in the migration record
Not stealing right to migrate since migration state was updated recently by another device
Deleting existing record zone in preparation for stealing right to migrate
Something went wrong deleting the existing record zone; bailing out: %{public}@
Stealing right to migrate due to migration timeout
Exceeded maximum migration retry limit
Scheduling migration retry
Starting PRIMARY migration
Starting SECONDARY migration
Migration failed with error %{public}@; resetting local and remote migration state
Migration succeeded
Unable to set remote migration state to %lu due to error: %{public}@; resetting local migration state, will attempt retry
Migration coordinator transitioning from state %zd to state %zd
User account changed for iCloud Settings
iCloud Settings syncing not available because user is not signed in
iCloud Settings syncing not available because Safari's dataclass isn't enabled
Sync coordinator will begin syncing
Already synchronizing; ignoring request to sync
Discontinuing sync because Safari sync is disabled or the user is not signed in
Beginning synchronization
Failed to set up Settings Record Zone with error: %{public}@
Stopping fetch of settings
Have not performed a sync down yet; doing so now
Error received while syncing down: %{public}@
Sync coordinator finished sync down
Failed to decode customization sync server change token: %{public}@
Failed to serialize customization sync server change token: %{public}@
Failed to fetch changes with error: %{public}@
Attempting to create CloudSettings zone before retrying fetch
Fetching changes from CloudKit again after creating CloudSettings zone
Failed to create CloudSettings zone when fetching changes with error: %{public}@
Received unsynced Keychain error, but we're already waiting for PCS identities to change.
Received unsynced Keychain error. Observing notification to start fetching Safari settings when PCS identities change
Finished fetching changes from CloudKit
Performing initial StarSky sync down of Safari's settings.
Change token is expired; trying a full sync down.
Sync coordinator failed to sync settings with error: %{public}@
Retrying sync after receiving synchronization request during synchronization
Not retrying sync after receiving synchronization request during sync since previous sync failed
Syncing done, calling completion handler
Ignoring PCS identity change notification because Customization Sync is not waiting for an identity update
Retrying sync after receiving expected PCS identity change notification.
Saving Safari's background image for the current device to CloudKit
Did fail to save the background image with error: %{public}@
Saving setting for the current device to CloudKit
Did fail to save record with error: %{public}@
Deleting settings from CloudKit
Did fail to delete record with error: %{public}@
Clearing cached CloudSettings server change token
*** Failed to instantiate CloudKit database!
Fetching user identity
Failed to fetch user identity due to missing zone: %{public}@
Attempting to fetch user record ID
Failed to fetch user record ID with error: %{public}@
Successfully fetched user record ID
Clearing cached record zone
Fetching Bookmarks zone subscription
Bailing out from fetching Bookmarks zone subscription due to deallocation
Failed to fetch Bookmarks zone subscription status due to missing zone: %{public}@
Fetching Bookmarks zone subscription by ID
Failed to fetch Bookmarks zone subscription by ID with error: %{public}@
Successfully fetched Bookmarks zone subscription
Saving Bookmarks zone subscription
Bailing out from saving Bookmarks zone subscription due to deallocation
Failed to save Bookmarks zone subscription due to missing zone: %{public}@
Fetching record changes for Bookmarks zone
Bailing out fetching record changes due to deallocation
Failed to fetch record changes due to missing zone: %{public}@
Saving record batch of size: %lu
Bailing out from saving record batch due to deallocation
Failed to save record batch due to missing zone: %{public}@
Deleting record batch of size: %lu
Batch record save operation completed but failed to save records due to unrecoverable error: %{public}@
Attempting to delete bookmark zone
Bookmark zone deletion failed with error: %{public}@
Successfully deleted bookmark zone
Preparing bookmarks record zone, invalidateCachedZone: %d, createIfNeeded: %d
Cached record zone already present; nothing to do
Fetching record zone anew from CloudKit
Bailing out from zone setup due to deallocation
Zone setup retry limit exceeded
No existing record zone found
Will attempt to set up zone from scratch
Bailing out without setting up zone
Failed to fetch minimum sync API version when setting up record zone; bailing
*** Minimum sync API version is too new (%lu, our current version is %lu)
Attempting to save/load record
Failed to save/load record with error: %{public}@
Successfully saved/loaded record
Attempting to save/load encryption record
Failed to save/load encryption record due to unrecoverable error: %{public}@
Failed to save/load encryption record due to unexpected and unrecoverable write error: %{public}@
Record zone disappeared while setting up encryption information; bailing
Bailing out from encryption record setup due to deallocation
Encryption record retrieval retry limit exceeded
Saving record batch with %lu records
Failing save of record batch since migration record disappeared
Will attempt to resave migration record due to recoverable error
Failed to save migration record: %{public}@
Batch record save operation completed but failed to save migration record at end of batch save
Batch record save operation completed but bailing out from batch save due to previously cancelling the request
Batch record save operation completed but now retrying updated batch
Batch record save operation completed but server rejected the smallest batch we can send; bailing out
All attempts at re-batching record save failed
Attempting to re-batch record save
Batch record save operation completed but we need to re-batch
Modify records operation failed due to timeout of retryable error: %{public}@
Attempting to retry batch save request
Record batch save retry limit exceeded
Creating encryption record
Attempting to fetch encryption record from CloudKit
Encryption record fetch failed due to deallocation with error <%{public}@>.
Encryption record fetch retry limit exceeded
Encryption record fetch failed: %{public}@
Successfully fetched encryption record
Starting fetch of remote migration state
Failed to fetch remote migration state with error: %{public}@
Remote migration state fetch operation completed
Fetch remote migration state failed <%{public}@>.
Record zone disappeared while fetching remote migration state; bailing
Fetch remote migration state failed due to deallocation with error <%{public}@>.
Remote migration state retrieval retry limit exceeded
Fetch migration state failed <%{public}@>.
Enqueuing request to fetch remote migration state
Failed to set remote migration state due to missing zone: %{public}@
Completed operation to try to set remote migration state to %ld
Failed to set remote migration state to <%li>: %{public}@
Enqueuing request to set remote migration state to %ld
Minimum sync API version fetch operation completed
Fetch minimum sync API version failed <%{public}@>.
Fetch minimum sync API version failed due to deallocation
Minimum sync API version fetch retry limit exceeded
Failed to set minimum sync API version due to failure to set up record zone: %{public}@
Completed operation to try to set minimum sync API version to %ld
Failed to set minimum sync API version to <%li>: %{public}@
Enqueuing request to set minimum sync API version to %ld
Attempting to save new record zone
Failed to set up new record zone: %{public}@
Bailing out of record zone setup due to deallocation
Successfully set up new record zone
Someone deleted the migration record during migration with error: %{public}@
Migrator device identifier changed
Migrator device identifier changed from %@ to %@
Migration state changed from %ld to %ld
Internal-only _fetchRecordsWithServerChangeToken called!
Attempting to start synchronization
Discontinuing sync because a retry has already been scheduled
Discontinuing sync because user is not signed in
Could not create BADatabase to synchronize
Device identifier is empty
Trying to open database after another client already did
Reading migration state %lu
Discontinuing sync since local migration has not yet completed, migration state: %lu
Discontinuing sync since local migration state cannot be read
Database sync data is unreadable, reset all sync data and attempt a migration again
Discontinuing sync because account hash differed
Discontinuing sync because bookmarks Safari sync is disabled
Failed to set up Bookmarks Record Zone with error: %{public}@
Failed to fetch (or received invalid) remote migration state record with error: %{public}@
Scheduling retry #%d in %.1fs.
Discontinuing sync after attempting maximum number of retries
*** Resetting sync data
Bookmark Store setup done, opening database and processing changes
Failed to open database after finishing sync coordinator setup
Records were not saved locally, attempt merging to generate Add changes
Finish syncing
Sync coordinator failed to sync bookmarks with error: %{public}@
Database is unlocked despite having unlocked it before entering this method
Number of processed changes %lu, locally moved records: %lu, change token: %{public}@
Performing hierarchy check for moved records, number of moved records: %lu, number of deleted records: %lu
Discontinuing sync because bookmarks dataclass was disabled during sync
Done saving all record changes
Record %{public}@ was deleted remotely
Did fail to save record batch with error: %{public}@
Performing sync down with last server change token: %{public}@
Did finish fetching records between server change token: %{public}@ and server change token: %{public}@
None of the %ld records sent to be saved to the server were received on sync down. Missing records: %{public}@
Did not receive %ld records on sync down out of the %ld records sent to be saved. Missing records: %{public}@
Did receive %ld records in current sync down that were supposed to be retrieved in the previous one. Received records: %{public}@
Successfully completed full sync down after expired change token error
Record %@ was not seen during sync down after expired change token error; marking it for deletion
Record %@ has MinimumAPIVersion %lu and will be deleted locally
Merging record %{public}@ with result %{public}@ indicates that the remote record needs update despite being in sync down phase. The record should have been saved to the server before.
Record %@ does not exist locally and is deleted remotely
Has unsaved changes; saving next batch.
Unrooted moved bookmarks are present; will reparent
Sync migration converter beginning migration
Saving bookmarks
Sync migration converter finished migration and sync down
Begin performing sync down while merging records
Did fail to perform merging sync down with error: %{public}@
Did finish merging sync down, temporarily reparent and sort records in case we have cycles or unrooted records in the hierarchy
Did finish reparenting, perform deduplication keeping records with sync data
Did finish deduplication keeping records with sync data, begin converting and saving remaining records
Failed to convert local records with error: %{public}@
Did finish converting and saving remaining records
Perform post-migration sync down
Failed to sync down after migration: %{public}@
Zone deleted during migration conversion; bailing
Bailing from sync down due to deallocation with error %{public}@
Sync migration converter retry limit exceeded
None of the %ld records saved to the server were retrieved on sync down. Missing records: %{public}@
Did finish post-migration sync down
Performing post-migration moved records verification
No records need to be reparented
Did fail to reparent unrooted bookmarks after migration with error: %{public}@
Did finish reparenting unrooted records
Failed to get iCloud Tabs database URL, falling back to in-memory database
Received PCS change notification with state %ld
Ignoring PCS state change notification because it is the same as the current state %ld
Determining CloudTab sync coordinator in response to PCS change notification with state %ld
Determined PCS state to be %ld
Instantiating sync coordinator using PCS state %ld
Failed to read whether to use PCS cloud container for syncing with sqlite error code %d
CloudTabs database has PCS container sync properties
CloudTabs database has normal container sync properties
Database should not be reset because it's using the correct container
CloudTabs database needs to reset because sync properties are not compatible with PCS state %ld
Finished resetting CloudTabs database
Ignoring PCS identity change notification because CloudTabs is not waiting for an identity update
Received expected PCS identity change notification
Informing delegate of a PCS identity change
Received PCS unavailable error from CloudKit. Marking PCS state needs updating
Received unrecoverable PCS error %ld from CloudKit. Deleting the CloudTabs zone and creating a new one
Received unsynced Keychain error. Observing notification to start fetching CloudTabs when PCS identities change
Performing a fetch to fulfill request from %ld outstanding callers
Fetching local migration state from database (isMigrating: %d)
Setting local migration state in database to %ld (isMigrating: %d)
Sync migration coordinator starting PRIMARY migration
Sync migration coordinator starting SECONDARY migration
Sync migration coordinator failed due to migration unexpectedly being in progress
Database was already open by another client, could not open database
Begin performing first deduplication
Did finish performing first deduplication
Starting migration conversion as primaryMigrator = %d
Migration conversion failed with error: %{public}@
Migration conversion succeeded
Sync migration coordinator did fail to migrate with error: %{public}@
Sync migration coordinator did finish migrating.
Sync migration post-processing handler called
Did finish migration, perform last deduplication
Did finish last deduplication
Failed to serialize bookmarks JSON with error: %{public}@
Change for item with server ID %{private}@ is neither bookmark nor folder.
Fetching CloudTabs zone subscription
Failed to fetch CloudTabs zone subscription by ID with error: %{public}@
Successfully fetched CloudTabs zone subscription
Saving CloudTabs zone subscription
Bailing out from saving CloudTabs zone subscription due to deallocation
Saving CloudTabs zone subscription failed because of missing zone, attempting to create zone
Aborting save of CloudTabs zone subscription because zone couldn't be created
Saving CloudTabs zone subscription after creating zone
Attempting to create CloudTabs zone before retrying save
Retrying save after creating CloudTabsZone
Grouping delete requests for %lu objects into %lu batches
Deleting records failed: %{public}@
Deleting CloudTabs zone
Failed ot delete CloudTabs zone with error: %{public}@
Successfully deleted CloudTabs zone
Creating CloudTabs zone
Failed to create CloudTabs zone with error: %{public}@
Bailing out of creating CloudTabs zone due to deallocation
Retrying creation of CloudTabs zone
Waiting to retry creation of CloudTabs zone
Successfully created CloudTabs zone
Error occurred deleting records, canceling dependent operations: %{public}@
Finished %@
Beginning conversion of folder contents
Did fail to migrate record hierarchy with error: %{public}@
Did finish migrating folder contents
Record %{public}@ has no position and needs saving in folder %{public}@
Found record %{public}@ with position %{public}@ after record %{public}@ with position %{public}@, folder %{public}@ should have been sorted before!
Found record with name %{public}@ after %ld records which do not have a position defined yet
Batch of size %lu with %lu records is full for %@
No more records to save.
Merging record %{public}@ with result %{public}@ indicates that the local record needs to be undeleted during migration. Migration never attempts to delete remote records before the last de-duplication phase.
Received unsynced Keychain error. Observing notification to start syncing Tab Groups when PCS identities change.
Ignoring PCS identity change notification because Safari Tab Groups Sync is not waiting for an identity update
Received expected PCS identity change notification. Syncing Tab Groups.
Sending notification of tab group sync result: %{public}zu
Received change set %{public}@ with %{public}zu changes; should sync: %{public}d
Persisting change set %{public}@ because a sync is in progress
Persisted change set %{public}@
Processing local tab operation
Failed to acquire local tab collection lock
Failed to open local tab database
Failed to open tab database
Failed to acquire tab collection lock
Scheduling a tab group sync operation
Saving reparented records
Saving reparented records with record names: %@
Did fail to save reparented records with error: %{public}@
Did finish saving reparented records
Sync down handler starting sync, keep records marked as deleted locally = %d
Sync down handler did fail sync down with with error: %{public}@
Sync down handler did succcessfully sync down
Sync down handler fetching record changes from server change token: %{public}@
Canceling migration sync-down because Safari sync is disabled
Zone deleted during migration sync-down; bailing
Bailing out from sync down due to deallocation with error %{public}@
Sync down handler retry limit exceeded
Merging record %{public}@ with result %{public}@ indicates that the remote record needs update despite being in sync down phase. The record should have been saved to the server during migration.
Record %{public}@ does not locally exist and cannot be saved locally because of its minimum API version
Record %{public}@ does not exist locally and is deleted remotely
Writing locally record %{public}@ despite the record not existing locally and being deleted remotely for merging
Processing %lu changes with changeToken: %@
Add change %{public}@ was provided without a corresponding changed item.
Move change %{public}@ was provided without a corresponding changed item.
Moved item %{public}@ for change %{public}@ did not have a record ID.
Attempted to delete built-in record with name: %{public}@, ignoring.
Attempting to check database open state from a background thread
Attempting to retrieve the database from a background thread
Attempting to retrieve the backing store lock from a background thread
%{public}@ attempting to lock backing store
%{public}@ backing store was already locked
%{public}@ successfully locked backing store
%{public}@ failed to lock backing store
Attempting to unlock the backing store from a background thread
Trying to unlock the database despite the database being already unlocked
%{public}@ did not unlock backing store due to outstanding lock requests
%{public}@ is unlocking the database even though the database is still open
%{public}@ unlocked backing store
Attempting to retrieve the migration state from a background thread
Fetching local migration state from database (isDatabaseLocked: %d, isDatabaseOpen: %d)
Fetched local migration state %ld from database
Attempting to set the migration state from a background thread
Setting local migration state in database to %ld (isDatabaseLocked: %d, isDatabaseOpen: %d)
Attempting to open the database from a background thread
Attempted to open the database without acquiring the lock first.
Attempted to open the database even though it is already open.
Will open the database
Attempting to close the database from a background thread
Attempted to close the database without acquiring the lock first (shouldSave: %d
Attempted to close the database without opening it first (shouldSave: %d
Did close database, did save %d
Failed to delete device, tab, or close request: %{public}@ (%d)
Failed to create the cloud_tab_devices table: %{public}@ (%d)
Failed to create the cloud_tabs table: %{public}@ (%d)
Failed to create the index for cloud_tabs table: %{public}@ (%d)
Failed to create the cloud_tab_close_requests table: %{public}@ (%d)
Failed to create the metadata table: %{public}@ (%d)
Failed to execute query when resetting database schema: %{public}@ (%d)
Opening iCloud Tabs SQLite database
Failed to open iCloud Tabs store at %{private}@: %{public}@
Failed to exclude CloudTabs.db from backup: %{public}@
Failed to enable WAL on CloudTabs.db: %{public}@
Failed to enable foreign keys on iCloud Tabs store: %{public}@ (%d)
Failed to enable secure delete on iCloud Tabs store: %{public}@ (%d)
iCloud Tabs store schema version (%d) does not match our supported schema version (%d) in store at %{public}@.
Closing iCloud Tabs SQLite database
Removing iCloud Tabs store file
Failed to remove iCloud Tabs store file at %{private}@: %{public}@
Recreating iCloud Tabs store file after removing it
Failed to set the database schema version to %d: %{public}@ (%d)
Failed to update metadata value %{public}@: %{public}@ (%d)
Failed to insert metadata value %{public}@: %{public}@ (%d)
Failed to delete metadata value for key %{public}@: %{public}@ (%d)
Failed to vacuum database: %{public}@ (%d)
Found a device without a UUID in the database.
Found a device without system fields in the database.
Failed to insert or replace device: %{public}@ (%d)
Found a tab without a UUID in the database.
Found a tab without system fields in the database.
Found a tab without a position dictionary in the database.
Couldn't create a tab's position from the position dictionary in the database.
Found a tab without a URL in the database.
Failed to insert or replace tab: %{public}@ (%d)
Found a close request without a request UUID in the database.
Found a close request without system fields in the database.
Found a close request without a destination device UUID in the database.
Found a close request without a tab URL in the database.
Found a close request without a tab UUID in the database.
Failed to create a CloudTabCloseRequest from the database.
Failed to insert or replace close request: %{public}@ (%d)
Deleting the iCloud Tabs database
User account changed for iCloud Tabs
iCloud Tab syncing not available because user is not signed in
iCloud Tab syncing not available because Safari's dataclass isn't enabled
Saving tabs for the current device to CloudKit
No iCloud Tab device found to save
Stopping save of tabs for current device
Merging device with existing device in SQLite database, if necessary
Severe SQLite store error occurred while merging device with existing device: %{public}@
Merging device with existing device in SQLite database
No existing device found in SQLite database
Saving device to CloudKit
Done saving device to CloudKit
Saving iCloud Tab record batch of size: %lu
Did fail to save iCloud Tab record batch with error: %{public}@
Finished saving iCloud Tab record batch
Deleting obsolete tab records from CloudKit
No obsolete tab records need to be deleted from CloudKit
Failed to delete obsolete tab records with error: %{public}@
Done deleting obsolete tab record from CloudKit
Updating SQLite store from CloudKit after saving tabs
Updating SQLite store from CloudKit after saving tabs failed with error: %{public}@
Done updating SQLite store from CloudKit after saving tabs
Finished saving tabs for the current device to CloudKit
Saving close request to CloudKit
No close request found to save
Stopping save of close requests
Did fail to save iCloud Tab record batch with close requests with error: %{public}@
Successfully saved close request to CloudKit
Updating SQLite store from CloudKit after saving close request
Updating SQLite store from CloudKit after saving close request failed with error: %{public}@
Done updating SQLite store from CloudKit after saving close request
Finished saving close request to CloudKit
Fetching iCloud Tab data from CloudKit
Stopping fetch of tabs
Deleting database and restarting fetch
Reading server change token from SQLite
Finished reading server change token from the SQLite database
Severe SQLite store error occurred while reading server change token: %{public}@
Failed to read from server change token data: %{public}@
Failed to decode server change token with exception: %{public}@
Found server change token data in the SQLite database
Found server change token data in the SQLite database, but couldn't unarchive it
Found server change token data in the SQLite database, but couldn't unarchive it, even after deleting the database
No server change token found in the SQLite database
Fetching changes from CloudKit
Attempting to create CloudTabs zone before retrying fetch
Fetching changes from CloudKit again after creating CloudTabs zone
Failed to create CloudTabs zone when fetching changes with error: %{public}@
No records to delete from SQLite
Removing %lu deleted records from SQLite
Severe SQLite store error occurred while deleting records: %{public}@
Finished removing deleted records from SQLite
No modified devices, tab records, or close requests to save to SQLite
Saving %lu device records, %lu tab records, and %lu close requests to SQLite
Severe SQLite store error occurred while saving records: %{public}@
Failed to save modified device, tab, and close request records to the SQLite database with error: %d
Finished saving modified device, tab, and close request records to the SQLite database
Saving server change token to SQLite
Failed to archive server change token: %{public}@
Severe SQLite store error occurred while saving server change token: %{public}@
Failed to save server change token to SQLite with error: %d
Done saving server change token to SQLite
Skipping loading devices, tabs, and close requests from SQLite
Loading devices, tabs, and close requests from SQLite
Severe SQLite store error occurred while loading records: %{public}@
Finished loading devices, tabs, and close requests from SQLite
Finished fetching iCloud Tab data from CloudKit
Fetched an invalid iCloud Tab device record from CloudKit
Fetched an invalid iCloud Tab tab record from CloudKit
Fetched an invalid iCloud Tab close request record from CloudKit
Fetched an unrecognized record from CloudKit of type %{public}@
Deleting devices from CloudKit
No devices to delete
Deleting close requests from CloudKit
No close requests to delete
Stopping deletion of records
Deleting records from CloudKit
Failed to delete records with error: %{public}@
Done deleting records from CloudKit
Updating SQLite store from CloudKit after deleting records
Updating SQLite store from CloudKit after deleting records failed with error: %{public}@
Done updating SQLite store from CloudKit after deleting records
Finished deleting records CloudKit
Sync coordinator received a message to delete the CloudTabs zone
Sync coordinator successfully deleted CloudTabs zone and local database
Severe SQLite store error: %{public}@
Prepare records for migration
Number of records prepared for migration: %ld
Convert built-in record with recordName %{public}@ for migration
Record of type %ld has built-in record name %{public}@ despite not being a built-in folder, generating a new record name
Convert new local record with created recordName %{public}@ for migration
Already converted record with recordName %{public}@ for migration
Convert Bookmark DAV record with recordName %{public}@ for migration
Trying to generate DAV server ID for bookmark with local ID %{public}@, but that bookmark doesn't exist
Received nil set of child local IDs for folder with local ID %{public}@ while generating DAV server IDs
Clearing referenced record with generation: %{public}@ for attribute: %{public}@ in record: %{public}@
Did find referenced record: %{public}@ generation: %{public}@ for attribute: %{public}@ in record: %{public}@
Could not find referenced record: %{public}@ generation: %{public}@ for attribute: %{public}@ in record: %{public}@
Overriding previous referenced record : %{public}@ generation: %{public}@ with referenced record: %{public}@ generation: %{public}@ for attribute: %{public}@ in record: %{public}@
Cannot apply reference: %{public}@ with generation: %{public}@ to attribute %{public}@ of record name: %{public}@ because the item is missing locally.
No references to apply
Record changed: %@
Record of type %{public}@ deleted: <%@>
Enqueuing %lu modify records operations
SafariBookmarksSyncAgent
APSConnectionDelegate
NSObject
SafariSyncControllerConnectionHandling
WBSSafariBookmarksSyncAgentProtocol
WBSCyclerCloudBookmarksAssistant
WBTabGroupSyncAgentProtocol
WBSSafariSyncServiceProtocol
SafariSyncController
CloudBookmarkDatabaseLockArbiterDelegate
CloudTabSyncArbiterDelegate
NSXPCListenerDelegate
CloudTabGroupSyncManagerDelegate
CloudSettingSyncCoordinatorDelegate
AppleAccountInformationProvider
WBSAppleAccountInformationProviding
BookmarkHashGenerator
CloudBookmark
SafariBookmarksSyncExtras
CloudBookmarkDebugHierarchyChecker
CloudBookmarkAccountPropertiesStore
CloudBookmarkCompressedJSONValueTransformer
CloudBookmarkDatabaseHandler
CloudBookmarkUpdater
CloudBookmarkCKReferenceValueTransformer
CloudBookmarkEncryptedObjectValueTransformer
CloudSettingStore
CloudBookmarkMovedBookmarkManager
CloudSettingsSyncEngineAccessProvider
CloudBookmarkAttributeValueTransformer
CloudBookmarksExtras
CloudBookmarksFetchResult
CloudTabGroupMaintenanceActivity
CloudBookmarksMigrationCoordinator
CloudBookmarkExpiredChangeTokenHandler
CloudTabCloseRequest
NSCopying
CloudBookmarkDatabaseAccessProvider
CloudBookmarkItemConfiguration
CloudSettingSyncCoordinator
CloudBookmarkStore
CloudBookmarkStoreUserDefaultsStorage
CloudBookmarkStoreLocalStorage
CloudBookmarkSyncCoordinator
WBSCRDTPositionGeneratorDelegate
CloudBookmarkSyncMigrationConverter
CloudBookmarkSyncMigrationSaveHandlerDelegate
CloudBookmarkSyncMigrationSyncDownHandlerDelegate
CloudBookmarkCKContainerExtras
CloudTabSyncArbiter
CloudTabSyncProtocol
CloudTabLocalStoreShim
CloudTabLocalStore
CloudTabLocalStoreDelegate
CloudBookmarkSyncMigrationCoordinator
CloudBookmarksDiagnostics
CloudTabRemoteStore
CloudBookmarkSyncMigrationFolderContentConverter
CloudBookmarkSyncMigrationPositionGenerator
_CloudBookmarkSyncMigrationPositionGeneratorEnumerator
CloudBookmarkSyncMigrationSaveHandler
CloudTabGroupSyncManager
CloudTabGroupMaintenanceActivityDelegate
CloudBookmarkSyncMigrationSaveReparentedBookmarksHandler
CloudBookmarkSyncMigrationSyncDownHandler
CloudBookmarkChangeProcessor
CloudBookmarkDatabaseLockArbiter
CloudBookmarkDatabaseCoordinating
CloudBookmarkWindowsCompatibleStringValueTransformer
CloudBookmarkWindowsCompatibleURLValueTransformer
CloudBookmarkURLIdentityHashValueTransformer
CloudTab
CloudKitSQLiteStore
WBSSQLiteDatabaseDelegate
CloudTabDevice
CloudTabsExtras
CloudTabSQLiteStore
CloudTabSyncCoordinator
CloudBookmarkSyncMigrationHierarchyConverter
CyclerCloudBookmarksAssistant
CloudBookmarkPendingReferenceManager
CloudRemoteStore
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@24
v48@0:8@16@24@32@40
v40@0:8@16@24@32
v28@0:8@16B24
v24@0:8@16
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
v32@0:8@"APSConnection"16@"NSArray"24
v20@0:8B16
v16@0:8
@"APSConnection"
v24@0:8@?16
v28@0:8B16@?20
v24@0:8@?<v@?@"NSError">16
v28@0:8B16@?<v@?@"NSError">20
v24@0:8q16
v40@0:8@16@24@?32
v32@0:8@16@?24
v36@0:8@16B24@?28
v24@0:8@?<v@?q@"NSString"@"NSError">16
v24@0:8@?<v@?@"NSData">16
v40@0:8@"NSDictionary"16@"NSString"24@?<v@?@"NSError">32
v32@0:8@"NSArray"16@?<v@?@"NSError">24
v24@0:8@?<v@?@"NSArray">16
v24@0:8@?<v@?@"NSArray"@"NSArray"@"NSError">16
v24@0:8@?<v@?B>16
v32@0:8@"NSDictionary"16@?<v@?>24
v36@0:8@"NSURL"16B24@?<v@?>28
v24@0:8@?<v@?>16
v48@0:8@16@24@32@?40
v32@0:8@"WebBookmarkChangeSet"16@?<v@?B@"NSArray"@"NSError">24
v32@0:8@"WBBrowserState"16@?<v@?B@"NSError">24
v32@0:8@"WBTabGroup"16@?<v@?B@"NSError">24
v40@0:8@"WBTabGroup"16@"WBTabGroup"24@?<v@?B@"NSError">32
v32@0:8@"NSArray"16@?<v@?B@"NSError">24
v48@0:8@"NSArray"16@"WBTabGroup"24@"WBTab"32@?<v@?B@"NSError">40
v40@0:8@"WBTab"16@"WBTab"24@?<v@?B@"NSError">32
v32@0:8@"WBTab"16@?<v@?B@"NSError">24
v40@0:8@"NSArray"16@"WBTabGroup"24@?<v@?B@"NSError">32
v32@0:8@"WBWindowState"16@?<v@?B@"NSError">24
v40@0:8@"NSString"16@"NSString"24@"NSDictionary"32
v24@0:8@"NSString"16
v24@0:8@"CloudBookmarkDatabaseLockArbiter"16
@28@0:8@16B24
@"CKContainer"28@0:8@"CloudTabSyncArbiter"16B24
v24@0:8@"CloudTabSyncArbiter"16
B32@0:8@16@24
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v24@0:8@"CloudTabGroupSyncManager"16
v32@0:8@"CloudSettingSyncCoordinator"16@"CKRecord"24
v32@0:8@"CloudSettingSyncCoordinator"16@"CKRecordID"24
v24@0:8@"CloudSettingSyncCoordinator"16
@24@0:8@16
@24@0:8q16
v40@0:8q16@24@?32
v40@0:8@16q24@?32
v28@0:8q16B24
v44@0:8r*16@24B32@?36
d32@0:8q16@24
v40@0:8B16B20q24q32
v32@0:8@16q24
@"ACAccountStore"
@"<WBSBookmarkDBAccess>"
@"CloudBookmarkStore"
@"NSXPCListener"
@"NSTimer"
@"NSDate"
@"NSObject<OS_os_transaction>"
@"WBSDiagnosticStateCollector"
@"CKSubscription"
@"CKContainer"
@"CloudBookmarkDatabaseLockArbiter"
@"CloudBookmarkSyncMigrationCoordinator"
@"CloudBookmarksMigrationCoordinator"
@"CloudBookmarkSyncCoordinator"
@"NSObject<OS_dispatch_queue>"
@"NSObject<OS_dispatch_source>"
@"CyclerCloudBookmarksAssistant"
@"NSMutableSet"
@"NSUserDefaults"
@"NSOperationQueue"
@"CloudTabSyncArbiter"
@"CloudSettingStore"
@"CloudSettingSyncCoordinator"
@"<WBSSettingsSyncEngineAccess>"
@"NSMutableDictionary"
@"CloudTabGroupSyncManager"
v24@0:8@?<v@?q>16
q16@0:8
@32@0:8@16@24
@"NSData"
@40@0:8@16^v24@32
@48@0:8@16^v24@32@40
v40@0:8^v16@24@32
@40@0:8^v16@24@32
@56@0:8@16@24^v32@40@48
v56@0:8@16@24^v32@40@48
@48@0:8^v16@24@32@40
@48@0:8r^v16@24@32@40
B32@0:8^v16@24
@32@0:8@16^B24
v32@0:8^v16@24
B48@0:8@16@24@32@40
Q32@0:8@16@24
Q36@0:8@16@24B32
Q24@0:8@16
Q32@0:8@16^B24
r^v16@0:8
@"WBBookmarkSyncData"
@"CloudBookmarkItemConfiguration"
@"NSString"
q24@0:8@16
B24@0:8^v16
B40@0:8^v16@24B32B36
@"<CloudBookmarkDatabaseCoordinating>"
@24@0:8#16
@"NSData"24@0:8@"NSArray"16
@"WBSCRDTPosition"24@0:8@"NSString"16
B48@0:8@"CKReference"16@"WBSCRDTGeneration"24@"NSString"32@"NSString"40
@"CKRecordZoneID"16@0:8
@"NSArray"16@0:8
@"CloudBookmarkAccountPropertiesStore"
@32@0:8@16Q24
@"CKRecordZoneID"
v56@0:8@16@24@?32@?40@?48
v56@0:8@16@?24@?32@40@?48
v64@0:8@16@24@?32@?40@48@?56
v56@0:8@16@24@32@40@?48
v60@0:8@16B24@28@36@?44@?52
v56@0:8@16@24@32@?40@?48
v64@0:8@16@24@32@40@?48@?56
@"CKDatabase"
@"CKRecordZone"
@32@0:8^v16@24
@28@0:8B16^@20
@24@0:8^@16
B32@0:8@16^@24
@32@0:8@16^@24
v24@0:8^@16
B24@0:8q16
B28@0:8@16B24
@32@0:8q16@24
v24@0:8Q16
@"NSMutableArray"
@"CKServerChangeToken"
@"NSArray"
@"CKRecord"
@"WBCollectionConfiguration"
@"<CloudTabGroupMaintenanceActivityDelegate>"
@40@0:8@16@24@32
d16@0:8
v36@0:8B16@20@?28
v24@0:8^v16
@24@0:8Q16
@64@0:8@16@24@32@40@48@56
@24@0:8^{_NSZone=}16
@88@0:8q16q24@32@40@48@56@64@72@?80
@?16@0:8
@"NSDictionary"
@"NSSet"
@"NSOrderedSet"
v28@0:8B16@20
@"CKOperationGroup"
@"<CloudSettingSyncCoordinatorDelegate>"
@40@0:8q16@24@32
@32@0:8@16q24
v40@0:8B16B20@24@?32
v48@0:8B16B20@24@32@?40
v72@0:8@16@24@32@40@48@?56@?64
v80@0:8@16@24@32@40@48@56@?64@?72
v40@0:8@?16@?24@?32
v48@0:8q16@24@32@?40
v32@0:8Q16@?24
@"BookmarkHashGenerator"
@"CKRecordID"
@"<CloudBookmarkStoreLocalStorage>"
@"NSData"16@0:8
v24@0:8@"NSData"16
@"NSString"24@0:8@"WBSCRDTPositionGenerator"16
q24@0:8@"WBSCRDTPositionGenerator"16
@"WBSCRDTPosition"32@0:8@"WBSCRDTPositionGenerator"16@"NSString"24
@"NSString"32@0:8@"WBSCRDTPositionGenerator"16@"NSString"24
@32@0:8^@16@?24
@"CloudBookmark"
@"WBSCRDTPosition"
@"CloudBookmarkMovedBookmarkManager"
@"CloudBookmarkPendingReferenceManager"
@"WBSCRDTPositionGenerator"
@"CloudBookmarkExpiredChangeTokenHandler"
B56@0:8@16@24@32@40@48
v32@0:8@"CloudBookmarkSyncMigrationSaveHandler"16@"CloudBookmark"24
v32@0:8@"CloudBookmarkSyncMigrationSaveHandler"16@"NSString"24
B32@0:8@"CloudBookmarkSyncMigrationSaveHandler"16@"CloudBookmark"24
B56@0:8@"CloudBookmarkSyncMigrationSaveHandler"16@"CKReference"24@"WBSCRDTGeneration"32@"NSString"40@"NSString"48
v32@0:8@"CloudBookmarkSyncMigrationSyncDownHandler"16@"CloudBookmark"24
v32@0:8@"CloudBookmarkSyncMigrationSyncDownHandler"16@"NSString"24
B56@0:8@"CloudBookmarkSyncMigrationSyncDownHandler"16@"CKReference"24@"WBSCRDTGeneration"32@"NSString"40@"NSString"48
@"CloudBookmarkSyncMigrationFolderContentConverter"
@"CloudBookmarkSyncMigrationSyncDownHandler"
@"CloudBookmarkSyncMigrationSaveReparentedBookmarksHandler"
v32@0:8q16@?24
@"CloudTabSQLiteStore"
@"CloudTabRemoteStore"
@"CloudTabSyncCoordinator"
@"CloudTabLocalStoreShim"
@"WBSCloudKitContainerManateeObserver"
@"<CloudTabSyncArbiterDelegate>"
v24@0:8@?<v@?@"NSArray"@"NSArray">16
v32@0:8@"NSString"16@?<v@?@"CloudTabDevice">24
v32@0:8@"NSArray"16@?<v@?i>24
v48@0:8@"NSArray"16@"NSArray"24@"NSArray"32@?<v@?i>40
v32@0:8@"NSData"16@?<v@?i>24
v24@0:8@?<v@?Bi>16
v28@0:8B16@?<v@?i>20
@"<CloudTabLocalStoreDelegate>"16@0:8
v24@0:8@"<CloudTabLocalStoreDelegate>"16
v24@0:8@"<CloudTabLocalStore>"16
v32@0:8@"<CloudTabLocalStore>"16@"NSError"24
@"<CloudTabLocalStoreDelegate>"
@"<CloudTabLocalStore>"
v44@0:8B16@20@?28@?36
@"CloudBookmarkSyncMigrationConverter"
@24@0:8^v16
v56@0:8^v16@24^q32^q40@48
v44@0:8@16B24@28@?36
v64@0:8@16@24@32@40@48@?56
@32@0:8@16@?24
@"CloudBookmarkSyncMigrationPositionGenerator"
@"NSEnumerator"
@48@0:8@16@24^@32^@40
@48@0:8@16@24@32q40
@"<CloudBookmarkSyncMigrationSaveHandlerDelegate>"
v24@0:8@"CloudTabGroupMaintenanceActivity"16
@48@0:8@16@24@32@40
v32@0:8@?16@?24
v36@0:8@?16B24@?28
@"CloudTabGroupMaintenanceActivity"
@"<CloudTabGroupSyncManagerDelegate>"
@"<CloudBookmarkSyncMigrationSyncDownHandlerDelegate>"
@"<CloudBookmarkUpdater>"
B24@0:8@"NSString"16
@"<WBSBookmarkDBAccess>"16@0:8
@"<CloudBookmarkDatabaseLockArbiterDelegate>"
@96@0:8@16@24@32@40@48@56B64B68@72@80@88
v96@0:8@16@24@32@40@48@56B64B68@72@80@88
v32@0:8@"WBSSQLiteDatabase"16@"NSError"24
@32@0:8@16r*24
i20@0:8i16
i32@0:8q16@24
i32@0:8@16@24
i16@0:8
v20@0:8i16
v28@0:8@16i24
v24@0:8i16i20
@"NSURL"
@"WBSSQLiteDatabase"
@64@0:8@16@24B32B36@40@48@56
@64@0:8@16@24B32@36B44@48@56
i24@0:8@16
@"CloudTabDevice"
@"NSError"
@"CloudTabCloseRequest"
@40@0:8@16q24@32
@"CKOperationConfiguration"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.mobilesafari</string>
<key>aps-connection-initiate</key>
<true/>
<key>aps-environment</key>
<string>production</string>
<key>com.apple.application-identifier</key>
<string>com.apple.Safari</string>
<key>com.apple.developer.icloud-container-environment</key>
<string>Production</string>
<key>com.apple.developer.icloud-services</key>
<array>
<string>CloudKit</string>
</array>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.aps-connection-initiate</key>
<true/>
<key>com.apple.private.cloudkit.masquerade</key>
<true/>
<key>com.apple.private.cloudkit.serviceNameForContainerMap</key>
<dict>
<key>com.apple.SafariShared.CloudTabs</key>
<string>com.apple.SafariShared.CloudTabs</string>
</dict>
<key>com.apple.private.cloudkit.systemService</key>
<true/>
<key>com.apple.private.security.container-required</key>
<string>com.apple.mobilesafari</string>
<key>com.apple.private.security.storage.Safari</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceLiverpool</string>
</array>
<key>com.apple.security.exception.shared-preference.read-write</key>
<array>
<string>com.apple.mobilesafarishared</string>
</array>
<key>platform-application</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>SafariBookmarksSyncAgent</string>
</array>
</dict>
</plist>
"(+.1
com.apple.SafariBookmarksSyncAgent.Push
v8@?0
com.apple.icloud-container.
com.apple.das.overrideRateLimiting
com.apple.private.safari.can-use-bookmarks-sync-agent
DebugHierarchyCheckerEnabled
LastDatabaseServerChangeToken.
CloudSettings
NewestLaunchedSafariBookmarksSyncAgentVersion
604.4
Bookmarks Sync Agent State
localMigrationState
@"NSDictionary"8@?0
com.apple.Safari.CloudBookmarks.SafariBookmarksSyncAgent.%@.%p.operationQueue
com.apple.SafariBookmarksSyncAgent.ActivityCheckInQueue
com.apple.SafariBookmarksSyncAgent.CustomizationSyncQueue
Safari
v24@?0q8@"NSError"16
v24@?0@"WBSCloudBookmarksRemoteMigrationInfo"8@"NSError"16
v16@?0@"NSError"8
v32@?0@"NSArray"8@"NSArray"16@"NSError"24
v16@?0@"NSArray"8
SafariSyncController get CloudTabRemoteStore transaction
v16@?0@"CloudTabRemoteStore"8
v16@?0@"NSTimer"8
data
isLightAppearance
SafariSyncController delete Safari background image transaction
SafariSyncController perform customization sync transaction
0.0.0
Sync Delay Timer After Push Notification Transaction
v16@?0@"CKRecordZoneID"8
v28@?0@"CKServerChangeToken"8B16@"NSError"20
Push Notification Database Changes Check
v24@?0@"CKSubscription"8@"NSError"16
SafariSyncController network connectivity XPC activity check in transaction
SafariSyncController perform bookmark sync transaction
SafariSyncController fetch remote migration state transaction
v32@?0q8@"NSString"16@"NSError"24
v16@?0q8
v24@?0@"NSObject<OS_xpc_object>"8@?<v@?BB>16
Cloud Tabs Notification Transaction
SafariSyncController update Safari's local settings transaction
SafariSyncController delete Safari's local background image transaction
v16@?0B8B12
v16@?0@"NSObject<OS_xpc_object>"8
v12@?0B8
SafariSyncController perform tab groups sync transaction
The attempted operation requires an entitlement
com.apple.SafariBookmarksSyncAgent.XPC.BookmarkSyncNetworkConnectivity
com.apple.SafariBookmarksSyncAgent.XPC.CloudTabsZoneSubscriptionRegistration
com.apple.SafariBookmarksSyncAgent.XPC.InitialManateeCloudTabFetchRetry
com.apple.SafariBookmarksSyncAgent.XPC.CloudSettingsZoneSubscriptionRegistration
com.apple.SafariBookmarksSyncAgent.XPC.ZoneSubscriptionRegistration
com.apple.SafariBookmarksSyncAgent.XPC.PeriodicRemoteMigrationStateObserver
com.apple.SafariBookmarksSyncAgent.migration
com.apple.SafariBookmarksSyncAgent.XPC.CloudTabGroupZoneSubscriptionRegistration
com.apple.SafariBookmarksSyncAgent.XPC.TabGroupSyncNetworkConnectivity
B16@?0@"NSString"8
<None>
Update Remote
Update Local
Update Local Parent Or Position
Delete Local
Undelete Local
<%@>
B16@?0@"CloudBookmarkItemConfiguration"8
+[CloudBookmark cloudBookmarkWithRecordName:inDatabase:databaseAccessor:updater:]
+[CloudBookmark cloudBookmarkForReparentedItemWithRecordName:inDatabase:databaseAccessor:updater:]
+[CloudBookmark cloudBookmarkToMigrateItemWithRecordName:inDatabase:databaseAccessor:updater:]
Deleted
+[CloudBookmark cloudBookmarkWithAddedRecord:configuration:inDatabase:databaseAccessor:updater:]
ParentAndPosition
-[CloudBookmark _initWithChange:databaseAccessor:updater:]
v32@?0@"NSString"8@16^B24
v24@?0@"NSString"8@16
v32@?0@"NSString"8@"WBSPair"16^B24
v32@?0@"NSString"8@"WBSCRDTGeneration"16^B24
Folder
Bookmark
Move
Modify
Delete
CKBAItemTypeBookmark
CKBAItemTypeFolder
<Unknown CKBABookmarkType %ld>
CKBAFolderTypeRegular
CKBAFolderTypeFavorites
CKBAFolderTypeBookmarksMenu
CKBAFolderTypeReadingList
<Unknown CKBAFolderType %ld>
cloudBookmarkAccountIdentityDidChange
cloudBookmarkAccountPropertiesDidChange
primaryAccount
Bookmarks-Backup-for-31802262
http
CloudBookmarksOverrideDeviceIdentifier
CloudSettingsZoneSubscription
com.apple.SafariBookmarksSyncAgent.CloudSettings.CloudSettingStore.%@.%p.operationQueue
com.apple.SafariBookmarksSyncAgent.CloudSettings.CloudSettingStore.%@.%p.internalQueue
com.apple.SafariBookmarksSyncAgent.CloudSettings.CloudSettingStore.%@.%p.completionHandlerQueue
v16@?0@"CKRecord"8
v24@?0@"CKRecordID"8@"NSString"16
B16@?0@"NSError"8
v44@?0@"CKRecordZoneID"8@"CKServerChangeToken"16@"NSData"24B32@"NSError"36
v24@?0@"CKRecordZone"8@"NSError"16
v24@?0@"CKRecord"8@"NSError"16
v24@?0@"NSDictionary"8@"NSError"16
31742989
32414244
v32@?0@"NSString"8@"NSString"16^B24
q24@?0@"NSString"8@"NSString"16
q24@?0@"WBSCRDTPosition"8@"WBSCRDTPosition"16
com.apple.Safari.CloudBookmarks
Errors
v32@?0@8@"NSError"16^B24
_generation
_deviceIdentifier
SyncRequirements
MinimumSyncAPIVersion
EncryptionInfo
MigrationState
MigratorDeviceIdentifier
Tab Collection Maintenance
com.apple.SafariBookmarksSyncAgent.%@.%p
Tab Collection Maintenance Transaction
com.apple.SafariBookmarksSyncAgent.XPC.TabCollectionMaintenance
Migration coordinator
CloudBookmarksDebugDelayInSecondsBeforeStealingRightToMigrate
v24@?0@"NSError"8@?<v@?>16
DestinationDevice
TabURL
TabUUID
DestinationDeviceUUID
LastModified
DictionaryType
CloseTabRequest
<%@: %p; tabURL = "%@"; tabUUID = "%@"; destination device uuid = "%@";
BookmarkList
BookmarkLeaf
TabGroup
TabGroupTab
ParentFolder
MinimumAPIVersion
Position
IdentityHash
TitleAndIdentityHash
TitleURLAndIdentityHash
PreviewTextAndHasUserDefinedPreviewText
Title
DateAdded
DateLastViewed
ImageURL
PreviewText
HasUserDefinedPreviewText
B16@?0@"CKRecord"8
IsSelectedFavoritesFolder
LastSelectedTab
Cloud Settings Data Fetching
Cloud Settings Data Saving
Cloud Settings Data Deletion
Cloud Settings Background Image Saving
customizationSyncServerToken
v16@?0@"CKRecordID"8
v32@?0@"CKServerChangeToken"8@"NSData"16@"NSError"24
@"CKRecord"32@?0@"CKRecord"8@"CKRecord"16@"NSError"24
cloudBookmarkDidDetectBug
bugIDs
CloudBookmarkStoreErrorDomain
Bookmarks
TabGroups
TabGroupsZoneSubscription
Cloud Bookmark Migration State Check
KeyID
ZoneSubscription
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.%@.%p.internalQueue
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.%@.%p.completionHandlerQueue
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.%@.%p.operationQueue
Cloud Bookmark Migration From DAV
Cloud Bookmark Subscription Request
Tab Groups Subscription Request
v24@?0@"CKRecordID"8@"NSError"16
v24@?0@"CloudBookmarksFetchResult"8@"NSError"16
v24@?0Q8@"NSError"16
@"CKRecordID"16@?0@"NSString"8
@"NSString"24@?0@"CKRecordID"8^B16
metadata_zone
MigrationStateEncodedRecordData
TabGroupMigrationStateEncodedRecordData
Sync coordinator
v20@?0q8B16
v16@?0@"WBSCloudBookmarksRemoteMigrationInfo"8
@"CloudBookmark"16@?0^B8
record
@"CKRecord"32@?0@"CKRecord"8@"CKRecord"16q24
32548082
v32@?0@"NSSet"8@"NSSet"16@"NSError"24
v24@?0@"NSSet"8@"NSError"16
com.apple.SafariShared.WBSCloudBookmarksStore
com.apple.SafariShared.CloudTabs
com.apple.SafariShared.Settings
v16@?0@"CloudTabSyncCoordinator"8
v12@?0i8
v16@?0B8i12
v24@?0@"NSArray"8@"NSArray"16
CloudTabs.db
Sync migration coordinator
(null)
deviceIdentifier
hasAccountHash
changes
localBookmarks
domain
code
description
remoteMigrationStateError
remoteMigrationState
migratorDeviceIdentifier
AwaitingMigration
InProgress
Finished
Unknown
changeType
itemType
serverID
modifiedAttributes
hasSyncData
hasCKRecord
hasPosition
hasTitleGeneration
count
addCount
deleteCount
moveCount
modifyCount
summary
details
bookmarksCount
foldersCount
title
children
isFavorites
IsTabGroup
isTabGroup
folderType
bookmarkType
Regular
Favorites
ReadingList
BookmarksMenu
CloudTabs
CloudTabsZoneSubscription
com.apple.Safari.CloudBookmarks.CloudTabRemoteStore.%@.%p.operationQueue
CloudTab
Sync Manager
Cloud Tab Groups Fetching
Cloud Tab Groups Saving
com.apple.SafariBookmarksSyncAgent.%@.%p._tabCollectionQueue
Cloud Tab Groups Migration
v28@?0B8@"NSArray"12@"NSError"20
v24@?0@"NSString"8@"NSString"16
Migration state lock arbiter property
OwningDevice
IsShowingReader
IsPinned
ReaderScrollPositionPageIndex
OwningSceneID
pageIndex
ReaderScrollPosition
UUID
<%@: %p; title = "%@"; url = "%@"; uuid = "%@"; owning device uuid = "%@"; owning sceneID = "%@"; position = %@; isShowingReader = %d; readerScrollPositionPageIndex = %@; isPinned = %d>
server_change_token
Library/Safari/
PRAGMA foreign_keys = ON
PRAGMA user_version = %d
SELECT value FROM metadata WHERE key = ?
UPDATE metadata SET value = ? WHERE key = ?
INSERT INTO metadata (key, value) VALUES (?, ?)
DELETE FROM metadata WHERE key = ?
VACUUM
PRAGMA user_version
DeviceName
HasDuplicateDeviceName
IsEphemeralDevice
Capabilities
Tabs
CloudKitBookmarkSyncing
Device
B32@?0@"CloudTab"8Q16^B24
<%@: %p; name = "%@"; uuid = %@; lastModified = %@; hasDuplicateName = %d; isEphemeralDevice = %d; tabs = (
    %@
    
wbsCloudTabDictionaryRepresentation
CloudTabDevice
CloudTabCloseRequest
use_manatee_container
com.apple.Safari.CloudBookmarks.CloudTabSQLiteStore
DELETE FROM cloud_tab_devices WHERE device_uuid = ?
DELETE FROM cloud_tabs WHERE tab_uuid = ?
DELETE FROM cloud_tab_close_requests WHERE close_request_uuid = ?
CREATE TABLE cloud_tab_devices (device_uuid TEXT PRIMARY KEY NOT NULL,system_fields BLOB NOT NULL,device_name TEXT,has_duplicate_device_name BOOLEAN DEFAULT 0,is_ephemeral_device BOOLEAN DEFAULT 0,last_modified REAL NOT NULL)
CREATE TABLE cloud_tabs (tab_uuid TEXT PRIMARY KEY NOT NULL,system_fields BLOB NOT NULL,device_uuid TEXT NOT NULL,position BLOB NOT NULL,title TEXT,url TEXT NOT NULL,is_showing_reader BOOLEAN DEFAULT 0,is_pinned BOOLEAN DEFAULT 0,reader_scroll_position_page_index INTEGER,scene_id TEXT,FOREIGN KEY(device_uuid) REFERENCES cloud_tab_devices(device_uuid) ON DELETE CASCADE)
CREATE INDEX cloud_tabs__device_uuid ON cloud_tabs (device_uuid)
CREATE TABLE cloud_tab_close_requests (close_request_uuid TEXT PRIMARY KEY NOT NULL,system_fields BLOB NOT NULL,destination_device_uuid TEXT NOT NULL,url TEXT NOT NULL,tab_uuid TEXT NOT NULL,FOREIGN KEY(destination_device_uuid) REFERENCES cloud_tab_devices(device_uuid) ON DELETE CASCADE)
CREATE TABLE metadata (key TEXT NOT NULL UNIQUE, value)
DROP TABLE IF EXISTS cloud_tab_devices
DROP TABLE IF EXISTS cloud_tabs
DROP TABLE IF EXISTS cloud_tab_close_requests
DROP TABLE IF EXISTS metadata
SELECT device_uuid, system_fields, device_name, has_duplicate_device_name, is_ephemeral_device, last_modified FROM cloud_tab_devices
SELECT system_fields, device_name, has_duplicate_device_name, is_ephemeral_device, last_modified FROM cloud_tab_devices WHERE device_uuid = ?
INSERT INTO cloud_tab_devices (device_uuid, system_fields, device_name, has_duplicate_device_name, is_ephemeral_device, last_modified)VALUES (?, ?, ?, ?, ?, ?)ON CONFLICT(device_uuid) DO UPDATE SET device_uuid = ?1, system_fields = ?2, device_name = ?3, has_duplicate_device_name = ?4, is_ephemeral_device = ?5, last_modified = ?6
SELECT tab_uuid, system_fields, position, title, url, is_pinned, is_showing_reader, reader_scroll_position_page_index, scene_id FROM cloud_tabs WHERE device_uuid = ?
q24@?0@"CloudTab"8@"CloudTab"16
INSERT OR REPLACE INTO cloud_tabs (tab_uuid, system_fields, device_uuid, position, title, url, is_showing_reader, is_pinned, reader_scroll_position_page_index, scene_id)VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
SELECT close_request_uuid, system_fields, destination_device_uuid, url, tab_uuid FROM cloud_tab_close_requests
INSERT OR REPLACE INTO cloud_tab_close_requests (close_request_uuid, system_fields, destination_device_uuid, url, tab_uuid)VALUES (?, ?, ?, ?, ?)
Cloud Tab Data Fetching
Cloud Tab Data Saving
Cloud Tab Close Requests Saving
Cloud Tab Close Requests Deleting
Cloud Tab Devices Deleting
Cloud Tab Zone Deleting
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.tabSavingQueue
com.apple.Safari.CloudBookmarks.CloudBookmarkStore.tabFetchingQueue
v16@?0@"CloudTabDevice"8
v16@?0@"NSData"8
DAV-
com.apple.CloudKitBookmarks.CyclerCloudBookmarksAssistant
https://fake-dav-id-for-testing/
Migration failed
Unable to acquire database lock
@"WBSPair"32@?0@"NSString"8@"WBSPair"16^B24
v32@?0@"NSString"8@"NSMutableDictionary"16^B24
com.apple.SafariShared
CloudBookmarks
DiagnosticExtension
KeyedArchiver
init
_setUpPushConnection
updatePushTopicSubscriptions
isSyncEnabled
_pushTopics
setEnabledTopics:ignoredTopics:opportunisticTopics:
topic
userInfo
didReceivePushNotificationWithTopic:userInfo:
initWithEnvironmentName:namedDelegatePort:queue:
setDelegate:
stringByAppendingString:
arrayWithObjects:count:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
connection:didReceivePublicToken:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didSendOutgoingMessage:
connection:didFailToSendOutgoingMessage:error:
connection:didChangeConnectedStatus:
connectionDidReconnect:
connection:channelSubscriptionsFailedWithFailures:
setUsesOpportunisticPushTopic:
.cxx_destruct
_pushConnection
_usesOpportunisticPushTopic
bookmarkDatabaseAccessor
initWithDatabaseAccessor:
safari_cloudBookmarksContainer
standardUserDefaults
initWithUserDefaults:type:
initWithType:container:localStorage:
initWithBookmarkStore:databaseCoordinator:accountStore:
initWithBookmarkStore:databaseAccessor:syncMigrationCoordinator:
migrationState
dictionaryWithObjects:forKeys:count:
registeredStateCollectorWithLogLabel:payloadProvider:
setQualityOfService:
stringWithFormat:
setName:
safari_cloudTabsContainer
initWithAccountStore:
safari_cloudSettingsContainer
initWithContainer:
dictionary
initWithSettingStore:accountStore:
cloudSettingsSyncEngineAccessor
_syncManagerWithStoreOwner:
registerMigrationXPCActivity:
initWithMachServiceName:
resume
_registerBookmarksZoneSubscriptionXPCActivityRegisteringIfNeeded:ignoreOngoingRegistration:qualityOfService:delay:
_registerCloudTabsZoneSubscriptionXPCActivityWithDelay:ignoreLastSuccessfulAttempt:
_registerPeriodicRemoteMigrationStateObserverXPCActivityRegisteringIfNeeded:
_registerCloudSettingsZoneSubscriptionXPCActivityWithDelay:ignoreLastSuccessfulAttempt:
_scheduleInitialManateeCloudTabFetchRetryXPCActivityRegisteringIfNeeded:
_registerTabGroupsZoneSubscriptionXPCActivityWithDelay:ignoreLastSuccessfulAttempt:
defaultCenter
_didDetectPossibleBug:
addObserver:selector:name:object:
_scheduleHierarchyCheckTimer
notificationFromRemoteNotificationDictionary:
subscriptionID
_didReceiveIncomingMessageWithNotification:pushTopic:subscriptionID:
accountPropertiesStore
isDataclassEnabled
_topic:matchesPushTopicForContainer:
options
applicationBundleIdentifierOverrideForPushTopicGeneration
hasSuffix:
container
safariTabCollectionConfiguration
setStoreOwner:
setSkipsExternalNotifications:
initWithConfiguration:container:accountStore:
_userAccountDidChange:
postNotificationName:object:
_cancelPushNotificationSyncDelayTimer
_updateCloudTabsSyncCoordinatorAfterUserAccountChange:
_updateCloudSettingsSyncCoordinatorAfterUserAccountChange:
_updateCloudBookmarksSyncCoordinatorAfterUserAccountChange:
_updateTabGroupsSyncCoordinatorAfterUserAccountChange:
clearCachedRecordZone
registerForPushNotificationsIfNeeded
_attemptSyncAndFallBackToMigrationIfPossibleForTrigger:
_userDidUpdateBookmarkDatabase
_invalidateHierarchyCheckTimer
safari_privacyPreservingDescription
sharedLogger
ckBookmarkSyncFinishedWithResult:error:
_sendNotificationForSyncResult:
_sendDetectedBugNotificationIfNeeded
_performHiearchyCheck
safari_isUserDeletedZoneError
_beginMigrationFromDAVInOperationGroup:
observeRemoteMigrationStateForSecondaryMigration
beginSyncingWithOperationGroupForFetching:operationGroupForSaving:completionHandler:
numberWithInteger:
postNotificationName:object:userInfo:
_hasEntitlementForSensitiveOperation
_fetchRemoteMigrationStateWithXPCActivity:qualityOfService:completionHandler:
errorWithDomain:code:userInfo:
createMigrationStateCheckOperationGroupWithXPCActivity:qualityOfService:
migratorDeviceIdentifier
fetchRemoteMigrationInfoInOperationGroup:withCompletionHandler:
_beginMigrationFromDAVInOperationGroupInternal:
boolForKey:
initWithBookmarkStore:
collectDiagnosticsDataWithCompletionHandler:
domain
code
saveTabsForCurrentDeviceWithDictionaryRepresentation:deviceUUIDString:completionHandler:
saveCloudTabCloseRequestWithDictionaryRepresentation:closeRequestUUIDString:completionHandler:
deleteDevicesWithUUIDStrings:completionHandler:
deleteCloudTabCloseRequestsWithUUIDStrings:completionHandler:
_fetchSyncedCloudTabDevicesAndCloseRequestsWithCompletionHandler:
count
arrayWithCapacity:
countByEnumeratingWithState:objects:count:
wbsCloudTabDeviceDictionary
deviceUUIDString
initWithUUIDString:deviceOrCloseRequestDictionary:
addObject:
wbsCloudTabCloseRequestDictionaryRepresentation
requestUUIDString
fetchDevicesWithCompletionHandler:
array
getCachedDevicesWithCompletionHandler:
userDidUpdateCloudTabGroupSyncManagerDatabase:
usesManateeContainer
getCloudTabRemoteStoreWithCompletionHandler:
_attemptCloudSettingsSyncForTrigger:
objectForKeyedSubscript:
initWithRecordName:zoneID:
initWithRecordType:recordID:
safari_encryptedValues
setObject:forKeyedSubscript:
saveRecords:successCompletionHandler:
fire
_cancelBackgroundImageSaveDelayTimer
saveCloudBackgroundImageWithURL:isLightAppearance:successCompletionHandler:
scheduledTimerWithTimeInterval:repeats:block:
initWithFileURL:
numberWithBool:
saveImageRecord:successCompletionHandler:
deleteRecords:completionHandler:
backgroundImageExists
defaultManager
safari_startPageBackgroundImageFileURL
backgroundImageAppearanceIsLight
syncSettingsUpDictionary
_saveCloudSettingsBatchWithDictionaryRepresentation:successCompletionHandler:
copy
beginInitialSyncUpWithCompletionHandler:
_cyclerAssistant
resetToDAVDatabaseWithCompletionHandler:
clearLocalDataIncludingMigrationState:completionHandler:
generateDAVServerIDsForExistingBookmarksWithCompletionHandler:
migrateToCloudKitWithCompletionHandler:
safari_cloudBookmarksDefaults
stringForKey:
mainBundle
safari_normalizedVersion
compare:options:
setObject:forKey:
localMigrationState
resetDeviceIdentifier
setLocalMigrationState:
databaseRef
openDatabase:
performMaintenanceOnDatabase:afterVersion:
closeDatabase:shouldSave:
currentConnection
valueForEntitlement:
boolValue
processIdentifier
_setUpSyncAgentInterfaceOnConnection:
userDidUpdateBookmarkDatabase
userAccountDidChange:
fetchRemoteMigrationStateWithCompletionHandler:
beginMigrationFromDAV
getCloudTabDevicesWithCompletionHandler:
fetchSyncedCloudTabDevicesAndCloseRequestsWithCompletionHandler:
triggerSafariTabGroupSync
getCloudTabContainerManateeStateWithCompletionHandler:
fetchCloudTabDevicesAndCloseRequests
fetchCloudSettingsChangesImmediately
saveCloudSettingWithDictionaryRepresentation:successCompletionHandler:
deleteBackgroundImageFromCloudKitWithCompletionHandler:
scheduleCloudBackgroundImageSaveWithURL:isLightAppearance:successCompletionHandler:
triggerImmediateBackgroundImageSaveIfApplicable
syncDownSafariSettingsSyncWithCompletion:
syncUpSafariSettingsSyncWithCompletion:
applyChangeSet:completionHandler:
scheduleSyncIfNeeded
saveBrowserState:completionHandler:
deleteTabGroup:completionHandler:
insertTabGroup:afterTabGroup:completionHandler:
moveTabGroup:afterTabGroup:completionHandler:
saveTabGroup:completionHandler:
deleteTabs:completionHandler:
insertTabs:inTabGroup:afterTab:completionHandler:
reorderTab:afterTab:completionHandler:
replaceTab:withTab:completionHandler:
saveTab:completionHandler:
updateTabs:inTabGroup:completionHandler:
closeWindowState:completionHandler:
deleteWindowState:completionHandler:
deleteWindowStates:completionHandler:
saveWindowState:completionHandler:
didReceiveIncomingMessageForSubscriptionID:withPushTopic:userInfo:
didReceiveLocalNotificationWithPushTopic:
interfaceWithProtocol:
setWithArray:
setClasses:forSelector:argumentIndex:ofReply:
setExportedInterface:
setExportedObject:
_updatedContainerForPushTopic:
_needsDatabaseFetchOperationForContainer:
_attemptSyncForChangedZonesSharingContainer:
_attemptTabGroupsSyncForManager:withTrigger:
_attemptCloudTabsSyncForPushNotification
dateWithTimeIntervalSinceNow:
isValid
_fetchUpdatedZonesInPushNotificationForContainer:
_fetchUpdatedZonesInPushNotificationForContainer:retryManager:
containerIdentifier
dataForKey:
unarchivedObjectOfClass:fromData:error:
initWithPreviousServerChangeToken:
setFetchAllChanges:
setDiscretionaryNetworkBehavior:
setAutomaticallyRetryNetworkFailures:
setConfiguration:
bookmarksRecordZoneID
recordZoneID
cloudTabsRecordZoneID
setRecordZoneWithIDChangedBlock:
setRecordZoneWithIDWasDeletedBlock:
scheduleRetryIfNeededForError:usingBlock:
archivedDataWithRootObject:requiringSecureCoding:error:
setFetchDatabaseChangesCompletionBlock:
setExpectedSendSize:
setExpectedReceiveSize:
setGroup:
privateCloudDatabase
setDatabase:
addOperation:
invalidate
saveBookmarksZoneSubscriptionInOperationGroup:withCompletionHandler:
fetchBookmarksZoneSubscriptionStatusCreatingZoneIfNeeded:inOperationGroup:withCompletionHandler:
saveCloudTabsZoneSubscriptionInOperationGroup:withCompletionHandler:
fetchCloudTabsZoneSubscriptionInOperationGroup:withCompletionHandler:
_performBookmarkSyncForTrigger:inOperationGroup:completionHandler:
_checkInXPCActivityWithIdentifier:criteria:registerIfNeeded:performBlock:
createSubscriptionRequestOperationGroupWithQualityOfService:xpcActivity:
_saveCloudTabsZoneSubscriptionIfNeededInOperationGroup:withCompletionHandler:
deleteDatabaseAndSyncDataForAccountChange
userAccountChanged
_saveCloudSettingsZoneSubscriptionIfNeededInOperationGroup:withCompletionHandler:
saveCloudSettingsZoneSubscriptionInOperationGroup:withCompletionHandler:
fetchCloudSettingsZoneSubscriptionInOperationGroup:withCompletionHandler:
clearServerChangeToken
clearCachedCloudSettingsRecordZone
_performSettingsSyncForTrigger:inOperationGroup:completionHandler:
isCustomizationSyncEnabled
beginSyncingWithCompletionHandler:
didReceiveRemoteCloudSettingsUpdateWithRecord:
didDeleteRemoteRecordWithID:
recordType
isEqualToString:
recordID
recordName
cloudSettingSyncCoordinator:didReceiveRemoteCloudSettingsUpdateWithRecord:
_deleteLegacySectionIdentifiers
startCoordinatingMigrationInOperationGroup:completionHandler:
doubleValue
_retryIntervalToRegisterBookmarksZoneSubscriptionWithNumberOfFailedAttempts:lastCKError:
safari_isCloudKitMissingZoneError
_saveBookmarksZoneSubscriptionIfNeededInOperationGroup:withCompletionHandler:
createMigrationFromDAVOperationGroupWithXPCActivity:
_migrateFromDAVInOperationGroup:completionHandler:
_saveTabGroupsZoneSubscriptionIfNeededInOperationGroup:withCompletionHandler:
isSyncing
_runTabGroupsSyncForManager:withTrigger:completionHandler:
_performTabGroupSyncForManager:withTrigger:completionHandler:
databasePath
fileExistsAtPath:isDirectory:
configuration
storeOwner
sendSyncDidFinishNotificationWithResult:
startMigrationIfNeeded
initWithBookmarkStore:databaseAccessor:migrationCoordinator:
localizedStandardCompare:
sortedArrayUsingSelector:
componentsJoinedByString:
addObjectsFromArray:
removeObject:
allObjects
removeAllObjects
_hierarchyCheckTimer:
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
performHierarchyCheck
_hierarchyCheckerDidFail
databaseLockArbiterDidAcquireDatabaseLock:
tabSyncArbiter:containerUsingManatee:
cloudTabSyncArbiterDidChangeCloudKitContainer:
cloudTabSyncArbiterPCSIdentitiesDidChange:
listener:shouldAcceptNewConnection:
cloudTabGroupSyncManagerPCSIdentitiesDidChange:
cloudSettingSyncCoordinator:storeRemoteCloudSettingsUpdateWithRecord:
cloudSettingSyncCoordinator:didDeleteRemoteRecordWithID:
performInitialSyncDown
pcsIdentitiesDidChangeForCloudSettingSyncCoordinator:
forwardingTargetForSelector:
resumeXPCListener
_pushTopicForContainer:
_accountStore
_databaseAccessor
_bookmarkStore
_xpcListener
_delayBeforeSyncingAfterPushNotificationTimer
_dateToForceSyncAfterPushNotification
_transactionForTimerToDelaySyncing
_stateCollector
_isSyncing
_isMigrating
_periodicallyObservingRemoteMigrationState
_didCheckAgentVersionOnDatabaseLock
_bookmarksSubscription
_cloudBookmarksStoreContainer
_databaseLockArbiter
_syncMigrationCoordinator
_migrationCoordinator
_bookmarkSyncCoordinator
_activityCheckInQueue
_numberOfFailedBookmarksZoneSubscriptionRegistrationAttempts
_ignoreOngoingBookmarksZoneSubscriptionRegistrationResult
_bookmarksZoneSubscriptionRegistrationTimer
_detectedBugIDs
_safariUserDefaults
_hierarchyCheckTimer
_operationQueue
_isCheckingContainerDatabaseChanges
_cloudTabsContainer
_tabSyncArbiter
_lastCloudTabsZoneSubscriptionRegistrationWasSuccessful
_cloudTabsZoneSubscriptionRegistrationIsInProgress
_lastTabGroupsZoneSubscriptionRegistrationWasSuccessful
_tabGroupsZoneSubscriptionRegistrationIsInProgress
_customizationSyncQueue
_cloudSettingsContainer
_settingsStore
_settingsSyncCoordinator
_settingsSyncEngine
_cloudSettingsZoneSubscriptionRegistrationIsInProgress
_lastCloudSettingsZoneSubscriptionRegistrationWasSuccessful
_isCustomizationSyncing
_fetchedSettingsDictionary
_delayBeforeSavingBackgroundImageTimer
_tabGroupSyncManager
TB,R,N
safari_numberForKey:
initWithZoneName:ownerName:
UTF8String
_appleAccountSecurityState
_primaryAppleAccountSecurityLevel
aa_primaryAppleAccount
aa_altDSID
sharedInstance
authKitAccountWithAltDSID:
securityLevelForAccount:
getAppleAccountSecurityStateWithCompletion:
_createEncryptionKeyData
_createEncryptionKeyIDDataUsingKey:
initWithKey:keyID:
length
safari_containsObjectPassingTest:
bytes
dataWithBytes:length:
appendBytes:length:
safari_descriptionWithoutSpaces
safari_minimumAPIVersion
safari_recordName
identityHashComponentsForRecord:
generateHashWithComponents:
isEqualToData:
UUID
getUUIDBytes:
verifyIdentityHashInBookmarkRecord:configuration:
keyID
_key
_keyID
T@"NSData",R,C,N,V_key
T@"NSData",R,C,N,V_keyID
copyItemWithServerId:database:
copySyncDataWithItem:
positionFromContentsOfData:
setHandler:
syncDataWithContentsOfData:
itemConfigurations
canParseItem:usingDatabaseAccessor:
safari_firstObjectPassingTest:
copyServerIdWithItem:
_initWithItem:configuration:syncData:databaseAccessor:
_initWithReparentedItem:configuration:databaseAccessor:updater:
itemTypeWithItem:
_initWithItemToMigrate:configuration:databaseAccessor:updater:
changeTypeForChange:
deviceIdentifier
copyServerIdWithChange:
copyDeletedBookmarkSyncDataWithChange:
record
clearAllGenerationsExceptState
incrementGenerationForKey:withDeviceIdentifier:
generationForKey:
encodedBookmarkSyncData
setDeletedBookmarkSyncData:change:
canParseChange:usingDatabaseAccessor:
copyChangedItemWithChange:
_initWithItem:configuration:databaseAccessor:
_updateGenerationsForChange:withDeviceIdentifier:
updateLocalItem
_initWithChange:databaseAccessor:updater:
itemType
itemSubtype
bookmarkTypeWithBookmark:
createBookmarkWithType:database:
_initWithAddedRecord:configuration:forItem:databaseAccessor:updater:
folderTypeWithFolder:
createFolderWithType:database:
_applyPendingReferences:
_decodedSyncDataInData:
_updateRecordParentAndPositionWithUpdater:
_initWithConfiguration:deleteChange:databaseAccessor:updater:
_createRecordWithRecordName:updater:
setRecord:
_updateRecordWithChange:updater:
safari_folderTypeForRecordName:
setState:
safari_setState:
safari_setGeneration:forKey:
copyParentServerIdWithItem:
setServerId:item:
safari_generationForKey:
safari_positionDictionaryRepresentation
setPositionDictionaryRepresentation:
setGeneration:forKey:
position
safari_state
setMinimumAPIVersion:
_loadAttributesForKnownKeysIntoEmptyItemUsingRemoteRecord:updater:
_updateRecordWithMissingAttributesWithUpdater:
copyAttributesWithItem:
allKeys
_updateGenerationsForAttributeKeys:withDeviceIdentifier:
_updateRecordWithModifiedAttributes:updater:
dealloc
changeIsMoveChange:
copyModifiedAttributesWithChange:
modifiedAttributeMask
_createRecordIDWithName:updater:
initWithRecordID:action:
setPosition:
state
parentRecordName
identityHashKeys
modifiedOrLocalValueForKey:
changedKeys
containsObject:
valueTransformerForAttributeKey:
attributeRequiresEncryption
reverseTransformedValue:
copyValueForKey:item:
transformedValue:
_createParentFolderReferenceWithRecordName:updater:
_generateIdentityHashUsingUpdater:
valueTransformerForIdentityHashKey:
isEmptyValue:
generateIdentityHashWithComponents:
setSyncData:item:
setModifiedAttributes:item:
knownKeys
generationKeyForKey:
_canApplyValue:withGeneration:toAttribute:updater:
reverseTransformedValueOrNull:
setModifiedAttributeMask:
positionForCloudBookmarkWithRecordName:
positionDictionaryRepresentation
safari_setPositionDictionaryRepresentation:
transformedValueOrNull:
isIdentityHashKey:
enumerateKeysAndObjectsUsingBlock:
canSaveIdentityHashAttributesInDictionary:
hasGenerationForKey:
_modifiedOrLocalIdentityHashWithUpdater:
shouldApplyReference:withGeneration:toAttribute:inRecordWithName:
first
second
resultFromMergingRecord:usingUpdater:isLocalUpdateOnly:
_resultByMergingMinimumAPIVersionWithRecord:
_resultByMergingStateWithRecord:shouldContinueMerge:
_resultByMergingParentAndPositionWithRecord:usingUpdater:
compare:
_transformedModifiedOrLocalValueForKey:isEncrypted:
_modifiedOrLocalParentReferenceWithUpdater:
minimumAPIVersion
safari_setMinimumAPIVersion:
positionForItemWithRecordName:inDatabase:databaseAccessor:
cloudBookmarkWithRecordName:inDatabase:databaseAccessor:updater:
cloudBookmarkForReparentedItemWithRecordName:inDatabase:databaseAccessor:updater:
cloudBookmarkToMigrateItemWithRecordName:inDatabase:databaseAccessor:updater:
updateSyncDataGenerationsWithChange:databaseAccessor:updater:
cloudBookmarkWithChange:databaseAccessor:updater:
cloudBookmarkWithAddedRecord:configuration:inDatabase:databaseAccessor:updater:
applyPendingReferences:toItemWithRecordName:inDatabase:databaseAccessor:updater:
duplicateHash
isDuplicateOfBookmark:
resultFromMergingRecord:usingUpdater:
item
databaseAccessor
_syncData
_remotelyModifiedAttributes
_configuration
_item
_recordName
_parentRecordName
T@"CloudBookmarkItemConfiguration",R,N,V_configuration
T@"CKRecord",R,N
Tr^v,R,N,V_item
T@"<WBSBookmarkDBAccess>",R,N,V_databaseAccessor
T@"NSString",R,C,N,V_recordName
T@"NSString",R,C,N,V_parentRecordName
T@"WBSCRDTPosition",C,N
Tq,N
TQ,R,N
itemTypeForChange:
accountTypeWithAccountTypeIdentifier:
accountsWithAccountType:
accountProperties
safari_boolForKey:
safari_primaryAppleAccount
createDatabaseWithoutLock
_verifyHierarchyIntegrityInDatabase:
saveBackupOfDatabase:withName:
hasPrefix:
localCloudKitMigrationState:
copyLocalIDsInFolderWithLocalID:database:
mutableCopy
firstObject
removeObjectAtIndex:
copyItemWithLocalID:database:
_serverSyncIDTypeForServerSyncID:
safari_recordNameForFolderType:
copySyncKeyWithItem:
_verifySyncDataForItem:recordName:expectingSyncData:expectingCloudKitData:
recordChangeTag
_accountIdentityDidChange:
_accountPropertiesDidChange:
refresh
account
isEnabledForDataclass:
username
dataUsingEncoding:
safari_SHA1Hash
copyAccountHashWithDatabase:
setAccountHash:database:
_setNeedsAccountHashCheck
setNeedsDataclassEnabledCheck
initWithAccountStore:databaseCoordinator:
updateAccountHashIfNeeded
databaseCoordinator
_dataclassEnabled
_needsDataclassEnabledCheck
_needsAccountHashCheck
_databaseCoordinator
T@"ACAccount",R,N
T@"<CloudBookmarkDatabaseCoordinating>",R,N,V_databaseCoordinator
dataclassEnabled
TB,R,N,GisDataclassEnabled
initWithRootJSONObjectType:
isValidJSONObject:
dataWithJSONObject:options:error:
safari_dataByCompressingData
safari_dataByDecompressingData
JSONObjectWithData:options:error:
defaultTransformer
jsonArrayTransformer
jsonDictionaryTransformer
transformedValueClass
allowsReverseTransformation
rootJSONObjectType
_rootJSONObjectType
T#,R,N,V_rootJSONObjectType
cloudBookmarkItemConfigurations
T@"NSString",R,N
T@"CKRecordZoneID",R,N
T@"NSArray",R,C,N
initWithBookmarkStore:database:databaseAccessor:accountPropertiesStore:
bookmarkStore
_databaseRef
_accountPropertiesStore
T@"CloudBookmarkStore",R,N,V_bookmarkStore
Tr^v,R,N,V_databaseRef
T@"CloudBookmarkAccountPropertiesStore",R,N,V_accountPropertiesStore
objectForKey:
copyDeviceIdentifier
setLocalCloudKitMigrationState:database:
initWithCKRecordZoneID:action:
zoneID
referenceAction
initWithCKRecordZoneID:
action
_recordZoneID
_action
T@"CKRecordZoneID",R,N,V_recordZoneID
TQ,R,N,V_action
initRequiringSecureCoding:
encodeObject:forKey:
encodedData
initForReadingFromData:error:
decodeObjectOfClass:forKey:
finishDecoding
name
initWithObjectClass:
objectClass
_objectClass
T#,R,N,V_objectClass
_fetchRecordsOnInternalQueueWithServerChangeToken:recordChangedBlock:recordWithIDWasDeletedBlock:inOperationGroup:completionHandler:
_fetchRecordsOnInternalQueueWithRetryManager:serverChangeToken:recordChangedBlock:recordWithIDWasDeletedBlock:inOperationGroup:completionHandler:
setPreviousServerChangeToken:
initWithRecordZoneIDs:configurationsByRecordZoneID:
setRecordChangedBlock:
setRecordWithIDWasDeletedBlock:
safari_errorByAddingCloudKitPrivacyPreservingUserInfoForItemID:
setRecordZoneFetchCompletionBlock:
setFetchRecordZoneChangesCompletionBlock:
_scheduleOperation:inOperationGroup:operationQueue:
deviceCount
_createCloudSettingsRecordZoneInOperationGroup:withRetryManager:completionHandler:
_saveRecordZoneSubscriptionForZoneID:subscriptionID:inOperationGroup:operationQueue:completionHandler:
createCloudSettingsRecordZoneInOperationGroup:completionHandler:
setShouldSendContentAvailable:
initWithZoneID:subscriptionID:
setNotificationInfo:
initWithSubscriptionsToSave:subscriptionIDsToDelete:
itemErrorFromError:forID:
setModifySubscriptionsCompletionBlock:
saveCloudSettingsRecords:createCloudSettingsZoneIfMissing:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
_saveCloudSettingsRecords:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
_saveCloudSettingsRecords:retryManager:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
initWithRecordsToSave:recordIDsToDelete:
setClientChangeTokenData:
safari_isUnrecoverableCloudKitError
safari_isCloudKitBatchTooLargeError
setPerRecordCompletionBlock:
setModifyRecordsCompletionBlock:
initWithRecordZonesToSave:recordZoneIDsToDelete:
safari_hasOrContainsErrorWithCloudKitErrorCode:
setModifyRecordZonesCompletionBlock:
initWithSubscriptionIDs:
safari_isCloudKitNonExistentRecordError
setFetchSubscriptionCompletionBlock:
initWithZoneID:
recordZoneSubscriptionID
cloudSettingsRecordZoneID
T@"NSString",R,C,N
T@"CKRecordZoneID",R,C,N
createOperationGroupWithName:useLargerExpectedSendSize:
fetchCloudSettingsRecordChangesSinceServerChangeToken:inOperationGroup:recordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
fetchNumberOfDevicesInSyncCircleInOperationGroup:completion:
deleteCloudSettingsRecords:inOperationGroup:completionHandler:
deleteCloudSettingsZoneInOperationGroup:completion:
_database
_cloudSettingsRecordZone
_cloudSettingsOperationQueue
_internalQueue
_completionHandlerQueue
_container
T@"CKContainer",R,N,V_container
_insertBookmark:intoFolderWithRecordName:
removeObjectForKey:
addItem:underFolderWithServerId:database:
_createBuiltInFolderWithRecordNameIfNeeded:
copyServerIdsInFolderWithServerId:database:
minusSet:
removeItemWithServerId:database:
hasUnverifiedMovedBookmarks
_reparentBuiltInFolderIfNeeded
_reorderChildrenOfTopBookmarkFolderGetLastPosition:
unionSet:
_recordNameOfAncestorToReparentForRecordName:verifiedRecordNames:
_localDatabaseContainsItemWithRecordName:getParentRecordName:
_insertBookmarkWithRecordName:intoExistingFolderWithRecordName:
_deleteTemporaryParentFolder
_bookmarksByVerifyingAndReparentingUnrootedBookmarksRememberOriginalParents:getLastValidPositionInRootFolder:
orderedSet
indexOfObject:
removeObjectsInRange:
_recordNameOfAncestorToReparentInLoop:
safari_minimumUsingComparator:
_reorderChildrenOfFolderWithServerSyncId:
_positionOfBookmarkWithRecordNameForFolderSorting:
indexOfObject:inSortedRange:options:usingComparator:
insertObject:atIndex:
lastObject
_lastValidPositionInRootFolder
_sortedRecordNamesWithChildIDs:getLastPosition:
setChildrenOrder:forFolderWithServerId:database:
copyLastServerIdInFolderWithServerId:database:
initWithDatabase:databaseAccessor:
hasUndeletedRemovedBookmarks
numberOfMovedBookmarks
numberOfDeletedBookmarks
addMovedBookmark:
didLocallyMoveBookmarkWithRecordName:
isDeletedRecordName:
didDeleteBookmarkWithRecordName:
bookmarksByVerifyingAndReparentingUnrootedBookmarksGetLastValidPositionInRootFolder:
verifyAndReparentUnrootedBookmarksRememberingOriginalParents
moveBookmarksIntoPlace
removeLocalItemsForDeletedRecordNames
_childRecordNamesToParentRecordNames
_movedBookmarkRecordNames
_deletedBookmarkRecordNames
_parentRecordNamesWithMovedChildren
_misplacedBuiltInFolderRecordNames
_hasTemporaryParentFolder
_topBookmarkFolderRequiresReordering
null
safari_isInCloudKitErrorDomain
safari_isInCloudBookmarksErrorDomain
_safari_isOrContainsCloudKitErrorOfCodes:checkInternalErrorCode:
safari_isCloudKitPartialFailureError
allValues
safari_isCloudKitWriteConflictError
safari_isMigrationStateRecordChangedError
safari_isCouldNotOpenDatabaseError
safari_isAtomicWriteError
safari_isCloudKitExpiredChangeTokenError
safari_cloudKitPartialErrorForItemID:
safari_onlyCloudKitPartialError
safari_isCloudKitErrorWithCode:
safari_isCloudKitInternalErrorWithCode:
safari_errorWithCloudBookmarksCode:userInfo:
safari_errorFromErrors:
unsignedIntegerValue
safari_minimumSyncAPIVersion
numberWithUnsignedInteger:
integerValue
safari_migrationState
safari_migratorDeviceIdentifier
initWithDictionaryRepresentation:
dictionaryRepresentation
_safari_generationKeyForKey:
_safari_deviceIdentifierKeyForKey:
initWithDeviceIdentifier:generation:
generation
safari_isSyncRequirementsRecord
safari_setMinimumSyncAPIVersion:
safari_isEncryptionInfoRecord
safari_isMigrationStateRecord
safari_setMigrationState:
safari_setMigratorDeviceIdentifier:
safari_defaultPosition
safari_setDefaultPosition:
safari_syncRequirementsRecord
TB,R,N,Gsafari_isSyncRequirementsRecord
TQ,N,Ssafari_setMinimumSyncAPIVersion:
safari_encryptionInfoRecord
TB,R,N,Gsafari_isEncryptionInfoRecord
safari_migrationStateRecord
TB,R,N,Gsafari_isMigrationStateRecord
Tq,N,Ssafari_setMigrationState:
T@"NSString",&,N,Ssafari_setMigratorDeviceIdentifier:
Tq,N,Ssafari_setState:
TQ,N,Ssafari_setMinimumAPIVersion:
T@"NSDictionary",C,N,Ssafari_setPositionDictionaryRepresentation:
T@"WBSCRDTPosition",C,N,Ssafari_setDefaultPosition:
canParseRecord:
bookmarkListRecords
bookmarkLeafRecords
deletedRecordIDs
allRecordIDs
addRecord:
addDeletedRecordID:
serverChangeToken
setServerChangeToken:
clientChangeTokenData
setItemConfigurations:
topBookmarkRecord
migrationRecord
encryptionRecord
_mutableBookmarkListRecords
_mutableBookmarkLeafRecords
_mutableDeletedBookmarkRecords
_serverChangeToken
_clientChangeTokenData
_itemConfigurations
_topBookmarkRecord
_migrationRecord
_encryptionRecord
T@"CKServerChangeToken",&,N,V_serverChangeToken
T@"NSData",C,N,V_clientChangeTokenData
T@"NSArray",C,N,V_itemConfigurations
T@"CKRecord",R,N,V_topBookmarkRecord
T@"CKRecord",R,N,V_migrationRecord
T@"CKRecord",R,N,V_encryptionRecord
databasePathForConfiguration:
initWithConfiguration:
lockSync
performMaintenance
unlockSync
tabGroupMaintenanceActivityDidFinish:
registerActivity
delegate
_delegate
T@"WBCollectionConfiguration",R,N,V_configuration
T@"<CloudTabGroupMaintenanceActivityDelegate>",W,N,V_delegate
_hasValidDeviceIdentifier
unableToSilentlyMigrateToCKBookmarksWithReason:
_determineCourseOfActionFromLocalStateInOperationGroup:externalCompletionHandler:
resetToNonMigratedStateInOperationGroup:completionHandler:
_attemptLocalMigrationBeforeTryingToBecomeResponsibleForMigrationInOperationGroup:externalCompletionHandler:
_tryToBecomeResponsibleForMigrationInOperationGroup:externalCompletionHandler:
_scheduleMigrationRetryIfNeededInOperationGroup:externalCompletionHandler:
_transitionToMigrationState:
_tryToResumePendingRemoteMigrationFromMigrationInfo:inOperationGroup:externalCompletionHandler:
_performMigrationAsPrimaryDevice:inOperationGroup:externalCompletionHandler:
setTimeout:
_tryToBecomeResponsibleForMigrationWithRetryManager:inOperationGroup:externalCompletionHandler:
_handleFailureToBecomeResponsibleForMigrationDueToConflictInOperationGroup:externalCompletionHandler:
_becameResponsibleForMigrationInOperationGroup:externalCompletionHandler:
setRemoteMigrationState:deviceIdentifier:inOperationGroup:completionHandler:
lockForClient:
unlockForClient:
_handlePreemptionInOperationGroup:externalCompletionHandler:
_resetToIdleAfterMigrationFailureInOperationGroup:externalCompletionHandler:
serverModificationDate
deleteBookmarksZoneInOperationGroup:completionHandler:
_maximumNumberOfRetryAttempts
_delayBetweenRetryAttempts
setIncludesMigrationRecordInSaveBatch:
didStartMigratingToCKBookmarksAsPrimaryMigrator:localState:remoteState:
didFailToMigrateToCKBookmarksAsPrimaryMigrator:error:
didSuccessfullyMigrateToCKBookmarksAsPrimaryMigrator:
beginMigratingAsPrimaryMigrator:inOperationGroup:willBeginMigrationHandler:withCompletionHandler:
setMigrationState:
invalidateCachedDataclassEnabledness
_numberOfRetryAttempts
_cachedRemoteStateForAnalytics
doubleForKey:
date
dateByAddingTimeInterval:
collectAllRecordNamesInDatabase:
didReceiveRecordWithNameFromServer:
namesOfLocalRecordsToDelete
_namesOfLocalRecordsToDelete
T@"NSSet",R,C,N
safari_arrayByGroupingIntoArraysWithMaxCount:
safari_stringForKey:
_initWithTabUUIDString:tabURLString:destinationDeviceUUIDString:closeRequestUUIDString:encodedSystemFieldsData:cloudTabsRecordZoneID:
_initWithCKRecord:
safari_initWithEncodedRecordData:
setTrackChanges:
_valueTransformerForTabURL
allocWithZone:
tabURLString
tabUUIDString
destinationDeviceUUIDString
modificationDate
cloudTabCloseRequestWithWBSCloudTabCloseRequestDictionaryRepresentation:closeRequestUUIDString:cloudTabsRecordZoneID:
cloudTabCloseRequestWithCKRecord:
cloudTabCloseRequestWithTabUUIDString:tabURLString:destinationDeviceUUIDString:closeRequestUUIDString:encodedSystemFieldsData:cloudTabsRecordZoneID:
copyWithZone:
destinationDevice
_record
T@"CKReference",R,N
T@"CKRecord",R,N,V_record
T@"NSDictionary",R,C,N
initWithCollectionType:
initWithCollectionType:storeOwner:
tabGroupDatabaseAccessorWithStoreOwner:
readingListItemConfiguration
bookmarkConfiguration
bookmarkFolderConfigurationWithType:
orderedSetWithArray:
initWithItemType:itemSubtype:recordType:knownKeys:identityHashKeys:customAttributeGenerationKeys:attributeValueTransformers:identityHashValueTransformers:forRecordsPassingTest:
orderedSetWithObject:
tabGroupConfiguration
tabGroupTabConfiguration
isEqualToSet:
isEqualToOrderedSet:
isEqualToDictionary:
_defaultTransformer
bookmarkTypeForChange:
folderTypeForChange:
cloudBookmarkConfigurations
cloudTabGroupConfigurations
T@"CloudBookmarkItemConfiguration",R,N
recordTestBlock
_attributeKeysToGenerationKeys
_attributeKeysToTransformers
_identityHashKeysToTransformers
_itemType
_itemSubtype
_recordType
_knownKeys
_identityHashKeys
_recordTestBlock
Tq,R,N,V_itemType
Tq,R,N,V_itemSubtype
T@"NSString",R,C,N,V_recordType
T@"NSSet",R,C,N,V_knownKeys
T@"NSOrderedSet",R,C,N,V_identityHashKeys
T@?,R,C,N,V_recordTestBlock
_beginSyncingInOperationGroup:completionHandlers:
_isDataclassEnabled
_didFailToSyncWithError:inOperationGroup:
_continueSyncingAfterSyncingDown:inOperationGroup:
_performSyncDown
_cleanUpAndCallCompletionHandlersWithError:inOperationGroup:
_continueFetchingSettingsWithCompletionHandler:
safari_browserDefaults
_readServerChangeTokenFromUserDefaults
_clearCachedCloudSettingsRecordZoneIfNecessaryForError:
_handleExpiredChangeTokenError:completionHandler:
_pcsIdentitiesDidChangeNotification:
_saveServerChangeToken:
removeObserver:name:object:
settingStore
_syncingCompletionHandlers
_isSynchronizing
_didReceiveSyncRequestWhileSyncing
_isPerformingInitialSyncUp
_shouldPerformInitialSyncDown
_isWaitingForPCSIdentityUpdate
_saveSettingsOperationGroup
_fetchSettingsOperationGroup
_deleteSettingsOperationGroup
_saveBackgroundImageOperationGroup
_settingStore
T@"CloudSettingStore",R,N,V_settingStore
T@"<CloudSettingSyncCoordinatorDelegate>",W,N,V_delegate
migrationStateEncodedRecordData
createOperationGroupWithName:qualityOfService:xpcActivity:
fetchUserRecordIDWithCompletionHandler:
_prepareBookmarksRecordZoneInOperationGroup:withCompletionHandler:
setMigrationStateEncodedRecordData:
setTimeoutIntervalForRequest:
setUpBookmarksRecordZoneCreatingIfNeeded:inOperationGroup:withCompletionHandler:
_prepareBookmarksRecordZoneCreatingIfNeeded:inOperationGroup:withCompletionHandler:
operationConfiguration
_fetchRecordsOnInternalQueueWithServerChangeToken:inOperationGroup:result:completionHandler:
cloudBookmarkItemConfigurationForRecord:
setUpBookmarksRecordZoneInOperationGroup:withCompletionHandler:
_prepareBookmarksRecordZoneInvalidatingCachedZone:createIfNeeded:inOperationGroup:withCompletionHandler:
_saveBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
_addModifyRecordsOperations:inOperationGroup:operationQueue:
_prepareBookmarksRecordZoneOnInternalQueueAfterExternalCompletionHandlersHaveBeenStashedInvalidatingCachedZone:createIfNeeded:retryManager:inOperationGroup:withCompletionHandler:
initWithRecordZoneIDs:
_setUpRecordZoneInOperationGroup:withCompletionHandler:
_setUpEncryptionInfoInOperationGroup:withCompletionHandler:
_fetchEncryptionInfoInOperationGroup:withCompletionHandler:
fetchMinimumSyncAPIVersionInOperationGroup:withCompletionHandler:
setFetchRecordZonesCompletionBlock:
_setUpEncryptionInfoInOperationGroup:withRetryManager:completionHandler:
_hashGeneratorForEncryptionInfoRecord:
_saveOrLoadRecord:inOperationGroup:withCompletionHandler:
_createEncryptionInfoRecordWithCompletionHandler:
_saveBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:previouslySavedRecords:previouslyDeletedRecordIDs:mergeHandler:completionHandler:
_saveBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:previouslySavedRecords:previouslyDeletedRecordIDs:retryManager:mergeHandler:completionHandler:
arrayByAddingObjectsFromArray:
_checkMigrationStateOnInternalQueueInRecord:error:
safari_encodedRecordData
safari_filterObjectsUsingBlock:
subarrayWithRange:
safari_mapObjectsUsingBlock:
initWithRecordIDs:
safari_mapAndFilterKeysUsingBlock:
setFetchRecordsCompletionBlock:
_fetchEncryptionInfoInOperationGroup:retryManager:completionHandler:
safari_encryptedDataForKey:
safari_dataForKey:
initWithMigrationState:migratorDeviceIdentifier:serverModificationDate:
_fetchRemoteMigrationInfoInOperationGroup:withRetryManager:completionHandler:
_fetchMinimumSyncAPIVersionInOperationGroup:withRetryManager:completionHandler:
_setUpRecordZoneInOperationGroup:withRetryManager:completionHandler:
localStorage
includesMigrationRecordInSaveBatch
fetchUserIdentityInOperationGroup:withCompletionHandler:
fetchAllBookmarkRecordsWithCompletionHandler:
fetchBookmarksRecordChangesSinceServerChangeToken:inOperationGroup:recordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
fetchNumberOfDevicesInSyncCircleWithCompletionHandler:
saveBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:mergeHandler:completionHandler:
deleteBookmarksRecordBatch:inOperationGroup:clientChangeTokenData:completionHandler:
fetchBookmarkRecordsWithNames:withCompletionHandler:
bookmarkHashGenerator
fetchEncryptionInfoWithCompletionHandler:
fetchMetadataZoneRecordsWithRecordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
fetchCachedRemoteMigrationInfoWithCompletionHandler:
setMinimumSyncAPIVersion:completionHandler:
_zoneID
_zoneLogName
type
_threadUnsafeBookmarksRecordZone
_bookmarksOperationQueue
_threadUnsafePrepareRecordZoneCompletionHandlers
_threadUnsafeBookmarkHashGenerator
_threadUnsafeSyncRequirementsRecord
_threadUnsafeMigrationStateRecord
_bookmarksRecordZoneID
_syncRequirementsRecordID
_bookmarkEncryptionInfoRecordID
_migrationStateRecordID
_threadUnsafeIncludesMigrationRecordInSaveBatch
_threadUnsafeLocalStorage
_type
_recordZoneSubscriptionID
_cloudBookmarkItemConfigurations
Tq,R,N,V_type
T@"NSString",R,C,N,V_recordZoneSubscriptionID
TB,N,V_threadUnsafeIncludesMigrationRecordInSaveBatch
T@"<CloudBookmarkStoreLocalStorage>",R,N,V_threadUnsafeLocalStorage
T@"CKRecordZoneID",R,N,V_bookmarksRecordZoneID
T@"BookmarkHashGenerator",R,N
T@"NSArray",R,C,N,V_cloudBookmarkItemConfigurations
migrationStateKey
T@"NSData",C,N
_defaults
_beginSyncingWithOperationGroupForFetching:operationGroupForSaving:completionHandlers:
_scheduleRetryIfAbleWithOperationGroupForFetching:operationGroupForSaving:completionHandlers:
openDatabase
closeDatabaseAndSave:
databaseSyncDataInDatabase:databaseAccessor:
_resetSyncData
_didFailToSyncWithError:didOpenDatabase:
_bookmarkStoreDidFinishSetUp
clearAllSyncDataWithDatabase:
initWithDelegate:
didNotSaveRecordsAfterMigration
beginMergingChangesWithDatabase:
finishMergingChangesWithDatabase:
_processChanges
_continueSyncingAfterSyncDown:
applyAllPendingReferencesWithUpdater:
clearChangesWithChangeToken:database:
_cleanUpAndCallCompletionHandlersWithError:
isDatabaseOpen
copyServerIdInFolderBeforeServerId:database:
setDidNotSaveRecordsAfterMigration:
writeToDatabase:databaseAccessor:
initWithDatabase:databaseAccessor:updater:
processChanges
changes
changeToken
movedRecordNames
parentRecordNamesToMovedChildRecordNames
generatePositionsForChildRecordNamesGroupedByParentFolders:
_didSaveRecordsLocally
_nextRecordBatchGetRecordNamesToCloudBookmarks:withCloudBookmarkAllocationBlock:
_saveNextChangedRecordBatch
_saveRecordBatch:recordNamesToCloudBookmarks:successCompletionHandler:
sortUsingComparator:
_saveNextReparentedRecordBatch
size
valueForKey:
_rebuildUndeletedBookmark:
_performSyncDownWithCompletionHandler:
lastServerChangeToken
_performSyncDownWithLastServerChangeToken:completionHandler:
_updateBookmarkWithRecord:
_didCompleteSyncDownAfterExpiredChangeTokenError
intersectsSet:
intersectSet:
setLastServerChangeToken:
_bookmarkForRemoteRecord:isNewBookmark:
_existingBookmarkForRemoteRecord:
_reparentAndSaveUnrootedBookmarks
_finishSyncing
nextChangeID
_nextChangeID
copyServerIdInFolderAfterServerId:database:
positionBetweenPosition:andPosition:withDeviceIdentifier:changeID:
positionForBookmarkWithRecordName:
deviceIdentifierForPositionGenerator:
nextChangeIDForPositionInPositionGenerator:
positionGenerator:positionForRecordName:
positionGenerator:recordNameOfBookmarksBeforeRecordWithName:
positionGenerator:recordNameOfBookmarksAfterRecordWithName:
_recordNameOfLastRecordInRoot
_operationGroupForFetching
_operationGroupForSaving
_changeToken
_movedRecordNames
_unsavedChanges
_unsavedBookmarkFromLastBatch
_unsavedReparentedRecordNames
_lastKnownPositionOfLastItemInRootFolder
_namesOfRecordsSavedToTheServer
_namesOfRecordsMissingFromPreviousSyncDown
_namesOfRecordsExpectedOnSyncDown
_movedBookmarkManager
_pendingReferenceManager
_positionGenerator
_expiredChangeTokenHandler
_didResetSyncData
_retryTimer
_numberOfRetries
_prepareRecordsForMigration
_performMergingSyncDownInOperationGroup:
copyChangeTokenWithDatabase:
convertRecordsForMigration
_didSaveLocalRecords
_migrationDidCompleteWithError:
performDeduplicationWithDatabase:mode:
_generateAndSaveRecordsInOperationGroup:
beginSyncDownInOperationGroup:keepingRecordsMarkedAsDeletedLocally:completionHandler:
_performSyncDownInOperationGroup:
beginFolderMigrationInOperationGroup:completionHandler:
_performSyncDownInOperationGroup:withRetryManager:
_didFinishSyncDownInOperationGroup:
beginSyncDownInOperationGroup:completionHandler:
_reparentAndSaveUnrootedBookmarksInOperationGroup:
beginSavingReparentedBookmarksInOperationGroup:withRecordNames:lastKnownPositionInRoot:completionHandler:
cloudBookmarkSyncMigrationSaveHandler:didMoveBookmark:
cloudBookmarkSyncMigrationSaveHandler:didDeleteBookmarkWithRecordName:
cloudBookmarkSyncMigrationSaveHandler:shouldSaveBookmark:
cloudBookmarkSyncMigrationSaveHandler:shouldApplyReference:withGeneration:toAttribute:inRecordWithName:
cloudBookmarkSyncMigrationSyncDownHandler:didMoveBookmark:
cloudBookmarkSyncMigrationSyncDownHandler:didDeleteBookmarkWithRecordName:
cloudBookmarkSyncMigrationSyncDownHandler:shouldApplyReference:withGeneration:toAttribute:inRecordWithName:
beginMigrationInOperationGroup:completionHandler:
_completionHandler
_converter
_syncDownHandler
_saveReparentedBookmarksHandler
_hasSavedBookmarksLocally
initWithContainerIdentifier:environment:
setEncryptionServiceName:
setUseZoneWidePCS:
setApplicationBundleIdentifierOverrideForPushTopicGeneration:
setApplicationBundleIdentifierOverrideForContainerAccess:
safari_safariApplicationPlatformBundleIdentifier
setApplicationBundleIdentifierOverrideForTCC:
setApplicationBundleIdentifierOverrideForNetworkAttribution:
initWithContainerID:options:
_safari_containerWithIdentifier:encryptionServiceName:
inMemoryDatabaseURL
initWithDatabaseURL:cloudTabsRecordZoneID:
initWithContainerIdentifier:appleAccountInformationProvider:
_determineCloudTabSyncCoordinatorWithCompletion:
setStateChangeObserver:
closeDatabaseWithCompletionHandler:
_transitionCloudTabSyncCoordinatorToManateeState:completion:
determineManateeStateWithCompletion:
openDatabaseIfNecessary
initWithCloudTabLocalStore:
tearDown
initWithCloudRemoteStore:localStore:accountStore:
setDisabled:
setUseManateeContainerForSyncing:completionHandler:
deleteDatabaseWithCompletionHandler:
getUseManateeContainerForSyncingWithCompletionHandler:
deleteCloudTabsZoneWithCompletionHandler:
_manateeErrorCode:
_deleteCloudTabsZoneWithCompletionHandler:
_pcsIdentitiesChangedNotification:
_handleManateeErrorIfNeeded:completionHandler:
_fetchDevices
cloudRemoteStore
loadCloudTabDataWithCompletionHandler:
_queue
_cloudTabLocalStore
_remoteStore
_syncCoordinator
_localStoreShim
_containerManateeObserver
_syncCoordinatorDeterminationCompletionBlocks
_localStoreShimForManateeContainer
_currentManateeState
_manateeStateNeedsUpdate
_determiningSyncCoordinator
_completionHandlersForCurrentDeviceFetchRequest
_completionHandlersForNextDeviceFetchRequest
T@"<CloudTabSyncArbiterDelegate>",W,N,V_delegate
T@"CKContainer",R,N
loadCloudTabDeviceWithUUIDString:completionHandler:
deleteRecordsWithPrimaryKeys:completionHandler:
saveCloudTabDevices:tabs:closeRequests:completionHandler:
getServerChangeTokenDataWithCompletionHandler:
setServerChangeTokenData:completionHandler:
cloudTabLocalStore:hadSevereError:
cloudTabLocalStoreDidOpen:
T@"<CloudTabLocalStoreDelegate>",W,N
disabled
cloudTabLocalStore
_disabled
TB,N,V_disabled
T@"<CloudTabLocalStore>",R,N,V_cloudTabLocalStore
T@"<CloudTabLocalStoreDelegate>",W,N,V_delegate
databaseURLForFilename:
_didFinishMigrationWithError:
_beginMigrationAsPrimaryMigrator:inOperationGroup:
_migrationConverter
_collectDiagnosticsDataWithRemoteMigrationInfo:remoteMigrationInfoError:completionHandler:
createDatabase
numberWithInt:
_changesDictionaryFromDatabase:
_localBookmarksDictionaryFromDatabase:
localizedDescription
_stringForRemoteMigrationState:
copyChangesWithDatabase:changeToken:
changeIsDAVMoveChange:
_traverseBookmarksInDatabase:parentFolderID:bookmarksCount:foldersCount:details:
_identifierForSensitiveString:
_stringForFolderType:
absoluteString
_stringForBookmarkType:
UUIDString
_sensitiveStringIdentifiers
_createCloudTabsRecordZoneInOperationGroup:withRetryManager:completionHandler:
createCloudTabsRecordZoneInOperationGroup:completionHandler:
saveCloudTabsRecordBatch:createCloudTabsZoneIfMissing:inOperationGroup:completionHandler:
_saveCloudTabsRecordBatch:inOperationGroup:completionHandler:
_operationToDeleteCloudTabRecordIDs:completionHandler:
_saveCloudTabsRecordBatch:previouslySavedRecords:previouslyDeletedRecordIDs:retryManager:inOperationGroup:completionHandler:
_recursivelyCancelDependentOperations:operationQueue:
operations
dependencies
isCancelled
cancel
fetchCloudTabsRecordChangesSinceServerChangeToken:inOperationGroup:recordChangedBlock:recordWithIDWasDeletedBlock:completionHandler:
deleteCloudTabRecords:inOperationGroup:completionHandler:
deleteCloudTabsZoneInOperationGroup:completionHandler:
_threadUnsafeDatabase
_cloudTabsOperationQueue
_usesManateeContainer
TB,R,N,V_usesManateeContainer
setRootRecordName:
recordNameEnumerator
_generateAndSaveRemainingRecordsInOperationGroup:
nextObject
positionForRecordName:
_didFailSavingWithError:
_didFinishSavingRecordsWithNames:
_nextCloudBookmarkToSave
_recordNameEnumerator
_generateRecordPositions
arrayWithObject:
_childRecordNamesInParentServerSyncId:
_recordNamesToGeneratePositionsForInRecordNames:inParentRecordName:getFolderRecordNames:getLastValidPosition:
_generatePositionsForChildRecordNames:withStartingPosition:
addEntriesFromDictionary:
copyFirstServerIdInFolderWithServerId:database:
_existingPositionForRecordWithName:getIsFolder:
initWithParentPositionGenerator:
childRecordNamesForRecordName:
childFolderRecordNamesForRecordName:
rootRecordName
_recordNamesToChildRecordNames
_recordNamesToChildFolderRecordNames
_recordNamesToPositions
_rootRecordName
T@"NSString",C,N,V_rootRecordName
parentGenerator
_folderRecordQueue
_currentChildRecordNames
_parentGenerator
T@"CloudBookmarkSyncMigrationPositionGenerator",R,N,V_parentGenerator
_dequeueNextCloudBookmarkToSave
_saveRecordBatch:inOperationGroup:recordNamesToCloudBookmarks:
_recordByMergingRemoteRecord:withLocalRecord:recordNamesToCloudBookmarks:saveError:
_recordByMergingRemoteRecord:intoCloudBookmark:
recordIDForParentSyncServerID:
_unsavedProcessedBookmark
T@"<CloudBookmarkSyncMigrationSaveHandlerDelegate>",W,N,V_delegate
initWithConfiguration:container:accountStore:maintenanceActivity:
setDefaultConfiguration:
_shouldSync
_createOperationGroupWithName:
shouldSync
persistChangesWithCompletion:
_scheduleSyncIfNeeded
_applyChangeSet:completionHandler:
wb_lockError
wb_databaseOpenError
initWithTabCollection:
error
_processLocalTabOperation:completionHandler:
tabCollection
setTabCollection:
_cancelSyncTimer
_performOnTabCollectionQueue:scheduleSync:completionHandler:
accountStore
setSyncing:
_tabCollectionQueue
_tabCollectionSyncTimer
_didScheduleSync
_maintenanceActivity
_cloudBookmarkStore
_fetchTabGroupsOperationGroup
_saveTabGroupsOperationGroup
_needsSync
_syncing
T@"ACAccountStore",R,N,V_accountStore
T@"<CloudTabGroupSyncManagerDelegate>",W,N,V_delegate
syncing
TB,N,GisSyncing,V_syncing
_namesOfRemainingRecordsToSave
_lastKnownPositionInRoot
_isSavingReparentedRecords
_updateLocalBookmarkWithCKRecord:
_didDeleteRecordWithName:
_didFinishSyncingReceivingRecordNames:error:
_cloudBookmarkForRecord:isNewBookmark:
_recordNamesToDelete
T@"<CloudBookmarkSyncMigrationSyncDownHandlerDelegate>",W,N,V_delegate
_createServerSyncIDForItem:
data
saveDatabase:
updater
deletedRecordNames
_updater
_changes
_deletedRecordNames
_parentRecordNamesToMovedChildRecordNames
T@"<CloudBookmarkUpdater>",R,W,N,V_updater
T@"NSArray",R,C,N,V_changes
T@,R,N,V_changeToken
T@"NSSet",R,C,N,V_movedRecordNames
T@"NSSet",R,C,N,V_deletedRecordNames
T@"NSDictionary",R,C,N,V_parentRecordNamesToMovedChildRecordNames
isMainThread
Tr^v,R,N
databaseOpen
TB,R,N,GisDatabaseOpen
T@"<WBSBookmarkDBAccess>",R,N
_databaseLockCount
_databaseOpen
T@"<CloudBookmarkDatabaseLockArbiterDelegate>",W,N,V_delegate
TB,R,N,GisDatabaseOpen,V_databaseOpen
initWithData:encoding:
URLWithString:
safari_dictionaryForKey:
_initWithTabUUIDString:owningDeviceUUIDString:owningSceneID:position:title:urlString:isPinned:isShowingReader:readerScrollPositionPageIndex:encodedSystemFieldsData:cloudTabsRecordZoneID:
_commonInitWithTabUUIDString:owningDeviceUUIDString:owningSceneID:position:title:urlString:isPinned:isShowingReader:readerScrollPositionPageIndex:encodedSystemFieldsData:cloudTabsRecordZoneID:
_valueTransformerForTitleAndURL
title
urlString
positionTabAfterPosition:
isShowingReader
isPinned
readerScrollPositionPageIndex
owningSceneID
_positionAfterPosition:
owningDeviceUUIDString
readerScrollPositionDictionary
cloudTabWithWBSCloudTabDictionaryRepresentation:owningDeviceUUIDString:position:cloudTabsRecordZoneID:
cloudTabWithCKRecord:
cloudTabWithTabUUIDString:owningDeviceUUIDString:owningSceneID:position:title:urlString:isPinned:isShowingReader:readerScrollPositionPageIndex:encodedSystemFieldsData:cloudTabsRecordZoneID:
updateFromCloudTab:previousTabPosition:
owningDevice
wbsCloudTabDictionaryRepresentation
T@"WBSCRDTPosition",R,C,N
pinned
TB,R,N,GisPinned
showingReader
TB,R,N,GisShowingReader
T@"NSNumber",R,N
stringByAppendingPathComponent:
fileURLWithPath:isDirectory:
_isDatabaseOpen
_databaseWillBeOpened
_openDatabase:deleteDatabaseFileOnError:
_closeDatabase
_deleteDatabaseFileAtURL:reopenDatabase:
_metadataDataValueForKey:
_setMetadataDataValue:forKey:
initWithURL:queue:
openWithAccessType:error:
_databaseAtURL:failedToOpenWithError:
setResourceValue:forKey:error:
_failedToExcludeDatabaseFromBackupWithError:
enableWAL:
_failedToEnableWALWithError:
_failedToEnableForeignKeysWithError:
_migrateToCurrentSchemaVersionIfNeeded
_currentSchemaVersion
_databaseAtURL:hasIncorrectSchemaVersion:
close
_databaseWillBeDeleted
safari_removeFileAtURL:error:
_databaseAtURL:failedToDeleteWithError:
_databaseWillBeRecreated
_failedToSetSchemaVersion:withError:
int64AtIndex:
_failedToUpdateMetadataValueWithKey:error:
changedRowCount
_failedToInsertMetadataValueWithKey:error:
dataAtIndex:
_failedToDeleteMetadataValueWithKey:error:
_vacuumFailedWithError:
_databaseWillBeClosed
intAtIndex:
statement
_resetDatabaseSchema
_createFreshDatabaseSchema
_setDatabaseSchemaVersion:
database:hadSevereError:
initWithDatabaseURL:databaseQueueLabel:
_metadataInt64ValueForKey:
_setMetadataInt64Value:forKey:
_vacuum
_failedToEnableSecureDeleteWithError:
set_database:
_databaseQueue
set_databaseQueue:
_databaseURL
__database
__databaseQueue
T@"WBSSQLiteDatabase",&,N,V__database
T@"NSObject<OS_dispatch_queue>",&,N,V__databaseQueue
initWithDatabase:query:error:
execute
handle
reportErrorWithCode:statement:error:
initWithDatabase:query:
fetch
bindString:atParameterIndex:
bindInt64:atParameterIndex:
bindData:atParameterIndex:
safari_dateForKey:
_initWithDeviceUUIDString:deviceName:hasDuplicateName:lastModified:isEphemeralDevice:encodedSystemFieldsData:cloudTabsRecordZoneID:
safari_arrayForKey:
_setTabsFromWBSCloudTabDictionaryRepresentations:cloudTabsRecordZoneID:
_valueTransformerForDeviceName
deviceName
hasDuplicateName
isEphemeralDevice
lastModified
tabs
_updateTabsFromCloudTabs:
indexOfObjectPassingTest:
objectAtIndexedSubscript:
_positionAfterPosition:owningDeviceUUIDString:
setTabs:
cloudTabDeviceWithDictionaryRepresentation:deviceUUIDString:cloudTabsRecordZoneID:
cloudTabDeviceWithCKRecord:
cloudTabDeviceWithDeviceUUIDString:deviceName:hasDuplicateName:isEphemeralDevice:lastModified:encodedSystemFieldsData:cloudTabsRecordZoneID:
updateFromCloudTabDevice:
_tabs
ephemeralDevice
TB,R,N,GisEphemeralDevice
T@"NSDate",R,N
T@"NSArray",C,N,V_tabs
safari_isCloudTabDeviceRecord
safari_isCloudTabRecord
safari_isCloudTabCloseRequestRecord
safari_cloudTabDeviceRecord
TB,R,N,Gsafari_isCloudTabDeviceRecord
safari_cloudTabRecord
TB,R,N,Gsafari_isCloudTabRecord
safari_cloudTabCloseRequestRecord
TB,R,N,Gsafari_isCloudTabCloseRequestRecord
_loadDevices
_loadTabsForDevice:
_loadCloseRequests
_loadDeviceWithUUIDString:
lastErrorMessage
_saveDevice:
_saveTab:
_saveCloseRequest:
stringAtIndex:
uncopiedDataAtIndex:
boolAtIndex:
doubleAtIndex:
dateWithTimeIntervalSinceReferenceDate:
safari_encodedSystemFieldsData
timeIntervalSinceReferenceDate
reset
_cloudTabFromRow:deviceUUIDString:
_cloudTabsRecordZoneID
bindInt:atParameterIndex:
bindDouble:atParameterIndex:
set_isBeingTornDown:
_resumeSavingQueue
_resumeFetchingQueue
_isDeletingDatabase
_isBeingTornDown
_suspendSavingQueue
_continueSavingTabsForCurrentDevice
_shouldContinueSyncOperation
_mergeDeviceIntoDeviceFromSQLiteStoreIfNecessary
_saveDeviceToCloudKit
_deleteObsoleteTabRecordsFromCloudKit
_updateSQLiteStoreFromCloudKitAfterSavingTabs
_finishedSavingDevice
_suspendFetchingQueue
set_cloudTabStoreError:
_cloudTabStoreError
_handleSevereSQLiteErrorWhileMergingExistingDevice:
_changedRecordsForCloudTabDevice:
_saveNextRecordBatchCreatingCloudTabsZoneIfMissing:
_nextRecordBatchToSave
_recordIDsFromDeviceOrTabUUIDStrings:
_updateSQLiteStoreFromCloudKitInOperationGroup:withCompletionHandler:
_canCloseCloudTabStoreDatabase
safari_hasAtLeastOneChangedField
_continueSavingCloseRequest
_saveCloseRequestToCloudKit
_updateSQLiteStoreFromCloudKitAfterSavingCloseRequest
_finishedSavingCloseRequest
_beginFetchingTabs
_continueFetchingTabs
_getServerChangeTokenFromSQLiteStore
_fetchChangesFromCloudKitCreatingCloudTabsZoneIfMissing:
_removeDeletedRecordsFromSQLiteStore
_saveModifiedRecordsToSQLiteStore
_setServerChangeTokenInSQLiteStore
_loadDevicesAndTabsFromSQLiteStore
_finishedFetching
_handleSevereSQLiteErrorWhileFetching:
_deleteDatabaseAndRestartFetch
_didFetchModifiedRecord:
_retryFetchChangesFromCloudKitIfPossibleAfterCreatingCloudTabsZoneCompletedWithError:
_shouldDeleteDatabaseForError:
_deleteRecordsWithNames:inOperationGroup:completionHandler:
_continueDeleting
_deleteRecordsFromCloudKit
_updateSQLiteStoreFromCloudKitAfterDeletingRecords
_finishedDeletingRecords
_cloudTabStore
_deletingDatabaseCount
_savingQueue
_savingQueueSuspended
_saveTabsOperationGroup
_tabSaveState
_saveTabsCompletion
_deviceToSave
_recordsToSave
_unsavedRecordFromLastBatch
_uuidStringsOfTabsToDelete
_saveTabsError
_saveCloseRequestsOperationGroup
_closeRequestSaveState
_saveCloseRequestCompletion
_closeRequestToSave
_saveCloseRequestError
_deleteCloseRequestsOperationGroup
_deleteDevicesOperationGroup
_deleteState
_currentDeleteOperationGroup
_deleteCompletion
_recordIDsToDelete
_deleteError
_fetchingQueue
_fetchingQueueSuspended
_fetchTabsOperationGroup
_currentFetchOperationGroup
_fetchState
_fetchError
_isRefetchingAfterDeletingDatabase
_fetchOperationType
_fetchDevicesCompletion
_updateSQLiteStoreFromCloudKitCompletion
_modifiedDevices
_modifiedTabs
_modifiedCloseRequests
_namesOfDeletedRecords
_fetchedDevices
_fetchedCloseRequests
__isBeingTornDown
_cloudRemoteStore
__cloudTabStoreError
T@"NSError",&,V__cloudTabStoreError
TB,V__isBeingTornDown
T@"CloudTabRemoteStore",R,N,V_cloudRemoteStore
_convertItem:
setSyncKey:item:
_cloudKitRecordNameForBookmarkDAVServerSyncId:
scheme
URLByDeletingPathExtension
lastPathComponent
_errorWithCode:
clearlAllLocalBookmarksForAutomatedTestingWithDatabase:
_descriptionForErrorCode:
initWithFirst:second:
safari_mapAndFilterKeysAndObjectsUsingBlock:
hasUnappliedReferences
_pendingReferences
setXpcActivity:
addDependency:
_addDependenciesForModifyRecordsOperation:operationQueue:
_operationConfiguration
T@"CKDatabase",R,N
T@"NSOperationQueue",R,N
T@"CKOperationConfiguration",R,V_operationConfiguration
Not updating push topic
Updating push topic subscriptions with sync enabled = %d
Using opportunistic push topic
Using normal push topic
Set up push connection
Received a push notification
Ignoring push notification because notification is nil
Ignoring push notification because sync is disabled
User account changed
Not triggering sync since migration is in progress
*** Starting CloudKit bookmark sync for trigger: %lu
Transmitted Internet Records
*** CloudKit bookmark sync failed with result <%ld>: %{public}@
*** CloudKit bookmark sync finished with result: %ld
Attempting migration from DAV to CloudKit since we got back an explicit 'zone deleted' error
Sending notification of Bookmarks sync result: %ld
Fetching remote migration state
Simulating fetch of 'Unknown' migration state because Safari sync is disabled
Failed to fetch remote migration state: %{public}@
Fetched remote migration state: %ld
Asked to migrate, but bailing because migration is suppressed by the cycler
Bailing out from migration since migration was already in progress
*** Cloud settings initial fetch failed with result <%ld>: %{public}@
*** Cloud settings initial fetch finished with result: %ld
Connection to bookmarks sync agent by %d was denied: Missing entitlement
Ignoring push notification %{public}@ because it does not match any known push topic
Push notification %{public}@ comes from a container that is used by multiple sync coordinators
Attempting to sync Bookmarks in response to a subscription push notification
Attempting to sync Cloud Settings in response to a subscription push notification
Attempting to sync Tab Groups in response to a subscription push notification
Ignoring push notification %{public}@ because it does not match any known subscription
Reached maximum delay before forcing a sync after a push notification
Ignoring attempt at checking database changes since a request is already running - container: %{public}@
Beginning fetch database change operation for container with identifier: %{public}@, server change token: %{public}@
Database changes fetch retry limit exceeded
Failed to fetch database changes for container: %{public}@ with error: %{public}@
Did finish fetching database change operations for container with identifier: %{public}@, new server change token: %{public}@
Attempting to sync Bookmarks in response to a push notification after checking container zones
Attempting to sync Tab Groups in response to a push notification after checking container zones
Attempting to sync CloudKit Tabs in response to a push notification after checking container zones
Fetching Bookmarks zone subscription status failed with error: <%{public}@>.
Bookmarks zone subscription already exists
Saving Bookmarks zone subscription failed with error: <%{public}@>.
Saving Bookmarks zone subscription succeeded
Fetching CloudTabs zone subscription status failed with error: <%{public}@>.
CloudTabs zone subscription already exists
Saving CloudTabs zone subscription failed with error: <%{public}@>.
Saving CloudTabs zone subscription succeeded
Ignoring request to sync/migrate because migration is in progress
Ignoring request to sync/migrate because sync is in progress
Will attempt sync/migration in response to trigger: %lu
Fetching remote migration state since we tried syncing while not locally migrated
Notifying Safari of iCloud Tabs changes in response to a push notification
No need to register for CloudTabs zone subscription because the last attempt was successful or a registration is in progress
Attempting to register CloudTabs zone subscription
Registering for CloudTabs zone subscription succeeded or we were already subscribed
Registering for CloudTabs zone subscription failed with error: <%{public}@>.
Received account change notification with type: %ld
Retrying initial CloudTab fetch
Finished initial CloudTab fetch with error %{public}@
No need to register for CloudSettings zone subscription because the last attempt was successful or a registration is in progress
Attempting to register CloudSettings zone subscription
CloudSettings zone subscription registration succeeded or we were already subscribed
Registering for CloudSettings zone subscription failed with error: <%{public}@>.
Fetching CloudSettings zone subscription failed due to deallocation
Fetching CloudSettings zone subscription status failed with error: <%{public}@>.
CloudSettings zone subscription already exists
Saving CloudSettings zone subscription failed due to deallocation
Saving CloudSettings zone subscription failed with error: <%{public}@>.
Saving CloudSettings zone subscription succeeded
Ignoring request to sync because sync is in progress
Safari Settings syncing is disabled. Cloud settings sync aborted
*** Starting Cloud settings sync for trigger: %lu
*** Cloud settings sync failed with result <%ld>: %{public}@
*** Cloud settings sync finished with result: %ld
Received container change callback. Registering for a new zone subscription
*** Migration to CloudKit started
Checking In xpc activity with identifier %{public}s
Checked In xpc activity with identifier %{public}s
An activity with identifier %{public}s is already scheduled
No prior %{public}s activity was found. Registering a new one
No prior %{public}s activity was found and registration is not requested
Registering for Bookmarks zone subscription xpc activity. Register if needed: %d, ignore ongoing registration: %d delay: %lld
Attempting to save Bookmarks zone subscription
Saving Bookmarks zone subscription succeeded or we were already subscribed
Checking remote migration state for a chance to migrate as a secondary device
Remote migration state is set to finished; determining if secondary device migration can proceed
Attempting to migrate as secondary device
Not proceeding with migration because there is already an ongoing migration
Not proceeding with migration because this device was the primary migrator
No device has migrated yet; continuing to periodically check the remote migration state
Unsupported remote migration state returned; stopping the periodic remote migration check
Registering migration XPC activity
CloudKit bookmarks migration activity is running
Attempting to migrate to CloudKit
*** Migration to CloudKit finished with status: %d
No need to register for TabGroups zone subscription because the last attempt was successful or a registration is in progress
Attempting to register TabGroups zone subscription
Registering for TabGroups zone subscription succeeded or we were already subscribed
Registering for TabGroups zone subscription failed with error: <%{public}@>.
Fetching TabGroups zone subscription status failed with error: <%{public}@>.
TabGroups zone subscription already exists
Saving TabGroups zone subscription failed with error: <%{public}@>.
Saving TabGroups zone subscription succeeded
Ignoring request to sync TabGroups because sync is in progress
Retry tab groups sync because running outside of XPC activity failed.
Will attempt tab group sync in response to trigger: %lu
Ignoring request to sync TabGroups for manager %lu with trigger %lu because the database does not exist yet
 Starting TabGroups sync for manager %lu with trigger: %lu
 TabGroups sync failed for manager %lu with result <%ld>: %{public}@
 TabGroups sync finished for manager %lu with result: %ld
Did detect an issue while syncing related to <rdar://%{public}@>
Did detect an issue while syncing with no corresponding bug IDs
Attempted to post detected syncing bug notification without bug IDs
Posting detected syncing bug notification with bug IDs: <rdar://%{public}@>
Hierarchy check failed, please run sysdiagnose
Could not generate IdentityHash with empty components
Could not generate IdentityHash with key %{public}@, keyID %{public}@
Could not generate IdentityHash for components %{private}@, with key %{public}@, keyID %{public}@
Cannot verify identity hash of CKRecord with name %{public}@ because its minimumAPIVersion %ld is more recent than the version %ld of the client.
Valid identity hash for remote record with name: %{public}@, key: %{public}@, keyID: %{public}@, identityHash: %{public}@, components: %{private}@
Identity hash is invalid for remote record with name: %{public}@, key: %{public}@, keyID: %{public}@, identity hash actual: %{public}@, expected: %{public}@
Identity hash is invalid for remote record with name: %{public}@, key: %{public}@, keyID: %{public}@, identity hash actual: %{public}@, expected: %{public}@, components: %{private}@
Asking the position for the root record makes no sense
Unknown item with record name: %{public}@
Item with record name does not have sync data: %{public}@
%{public}s Unknown item type
Creating CloudBookmark to update locally with record name: %{public}@
Unknown item for reparenting with record name: %{public}@
%{public}s Unknown item type %{public}@
Attempting to migrate record with name %{public}@ that does not exist in the local database.
%{public}s Unknown item type %ld
Delete change %{private}@ to update does not have a valid record
Could not decode sync data in deleted change %{private}@ to update with record name: %{public}@.
No record object found in decoded sync data of deleted change %{private}@ to update with record name: %{public}@.
Updating state generation of deleted record with name: %{public}@, generation: %{public}@
Unknown type %ld for change %{private}@
Cannot find configuration for change with type %{public}@ for bookmark %{public}@
Change of type %{public}@ for bookmark %{public}@ of type %{public}@ given without an associated item
Expecting CKBAItemTypeBookmark type for local item %p, but got %ld
Expecting CKBAItemTypeBookmark type for local item %{private}@, but got %ld
Expecting %{public}@ type for local bookmark item %p, but got %ld
Expecting %{public}@ type for local bookmark item %{private}@, but got %ld
Expecting CKBAItemTypeFolder type for local item %p, but got %ld
Expecting CKBAItemTypeFolder type for local item %{private}@, but got %ld
Expecting %{public}@ folder type for local folder item %p, but got %ld
Expecting %{public}@ folder type for local folder item %{private}@, but got %ld
%{public}s Unknown CKRecord type %{public}@
Updating references for the root record makes no sense
Could not find item with record name %{public}@ in database to apply pending references %{public}@
Cannot find configuration for item with record name: %{public}@ to apply pending references %{public}@
Local record with record name %{public}@ to reparent does not have a CKRecord stored in its sync data %{public}@
Reparenting record with record name: %{public}@
%{public}s Unknown item type for record name %{public}@
Delete change of type %{public}@ given without a Server ID
Assigning new record with record name %{public}@ to locally modified item, this could create an empty record on the server
Assigning new record with record name %{public}@ to locally added item
Deleted bookmark change %{private}@ does not have a valid record name.
Ignoring Delete Change object for built-in record with name: %{public}@.
Deleted bookmark change with record name %{public}@ does not have a CKRecord attached to it
Preparing record with name %{public}@ to mark as deleted on the server with generation: %{public}@
Encountered an item with no record name; ignoring it
CKRecord %{private}@ with invalid record name was received; ignoring it
Creating %{public}@ record with name %{public}@ to add locally with parent: %{public}@ and position: %{public}@
Creating %{public}@ record with name %{public}@ to add locally with parent: %{public}@
Remote record is missing generation for its parent and position fields
Local record to migrate %p has an invalid record name even though it should have one at this point
Local record to migrate %{private}@ has an invalid record name even though it should have one at this point
Creating %{public}@ to complement saved record with name: %{public}@
Migrated record %{public}@ known to the server has no position!
Creating %{public}@ to migrate record unknown to the server with name: %{public}@
Preparing %{public}@ record with name: %{public}@ for change of type %{public}@ to save to the server with updated keys: <%{public}@>
Attributes <%{public}@> are not included in the set of modified attributes to update the CKRecord despite being used to update the generation
Attributes <%{public}@> are included in the set of modified attributes to update the CKRecord despite not being used to update the generation
Trying to read the value for a key on a record that was deleted locally. Record name: <%{public}@>, key: %{public}@.
Trying to read the value for a key even though the key was not modified locally in record. Record name: <%{public}@>, key: %{public}@.
Trying to read the transformed value for a key on a record that was deleted locally. Record name: <%{public}@>, key: %{public}@.
Trying to read the transformed value for a key even though the key was not modified locally in record. Record name: <%{public}@>, key: %{public}@.
Trying to read the value of ParentFolder on a record whose parent was not updated locally. Record name: <%{public}@>.
Trying to read the value of ParentFolder on a record that was deleted locally. Record name: <%{public}@>.
Trying to read the value of IdentityHash on a record whose Title or URL was not updated locally. Record name: <%{public}@>.
Trying to read the value of IdentityHash on a record that was deleted locally. Record name: <%{public}@>.
Saving record with name %{public}@ locally
Loading known keys <%{public}@> from remote record with name: %{public}@
Update generations of record %{public}@ with change of type %{public}@, updated keys <%{public}@>
Attributes <%{public}@> no longer need update despite those changes from a previous update not being validated
Record name: %{public}@, setting parent: %{public}@, generation: %{public}@, position: %{public}@
Non-built-in record with name %{public}@ does not have a position
Updating locally modified attributes <%{public}@>
%{public}@ attribute should have been saved during primary migration but has no generation locally.
Cannot save identity hash attributes since the local record is incomplete.
Did apply reference %{public}@ generation: %{public}@ to attribute %{public}@ of record name: %{public}@
Will merge local and remote records. Record name: %{public}@
Did finish merging local and remote records with record name: %{public}@ due to state changes. Result: %{public}@
Parent and position were updated locally but were not saved to the server
Merging local and remote record fields.
No merging needed for key: %@ with local generation: %@, remote generation: %@
Attribute <%{public}@> expected to be saved to the server has an empty generation
Copy remote value into local record for key: %{public}@ with local generation: %{public}@, remote generation: %{public}@
Copy local value into remote record for key: %{public}@ with local generation: %{public}@, remote generation: %{public}@
Attribute %{public}@ was updated locally but was not saved to the server
Update IdentityHash on remote record.
Update local and remote generations.
Did finish merging local and remote records with record name: %{public}@. Result: %{public}@
Merging parent and position for record Name: %{public}@, local and remote generations are equal: %{public}@
Merging parent and position into local record for record Name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Merging parent and position into remote record for record Name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Did finish merging local and remote records with record name: %{public}@. Local record will be deleted because its minimum API version %ld is higher than the API version %ld supported by this client.
Merging minimum API version for record name: %{public}@, local and remote generations are equal: %{public}@
Local and remote minimum API versions differ, even though generations are the same. Record name: %{public}@.
Merging minimum API version into local record for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Merging minimum API version into remote record for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Local and remote state generations are equal even though their states are different. Local Deleted: %ld, generation: %{public}@, Remote Deleted %ld, generation: %{public}@
Server previously told us the record was deleted, now it is undeleted. Mark the record %{public}@ as moved and continue merging: local generation: %{public}@, remote generation: %{public}@
Local record needs to be undeleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Local record needs to be deleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Remote record needs to be deleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Remote record needs to be undeleted for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Both local and remote records are deleted but remote record state generation needs to be updated for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Both remote and local records are deleted and remote generation does not need to be updated for record name: %{public}@, local generation: %{public}@, remote generation: %{public}@
Local and remote records are not deleted and have equal generations: %{public}@.
Updating local state generation for record Name: %{public}@, local state generation: %{public}@, remote state generation: %{public}@
Updating remote state generation for record Name: %{public}@, local state generation: %{public}@, remote state generation: %{public}@
BAChange %{private}@ is neither a folder change or a bookmark change
Migration state: %ld, expect DAV IDs: %d, expect CloudKit IDs for all records: %d, expect parsable sync data: %d
Checking record with local ID: %{public}@, server ID: %{public}@, item type: %ld, subtype: %ld
Record does not have a server ID even though we expect all records to have one!
Record has a BookmarkDAV ID even though no record should have one!
Record has a CloudKit ID even though no record should have one!
Regular folder has built-in record name: %{public}@, shouldn't!
Built-in folder with type %ld, has invalid record name: %{public}@, expecting: %{public}@
Record has sync key even though migration began.
Item contains sync data even though it should not!
Record has ID %{public}@ but has no sync data!
Item contains sync data that cannot be parsed as CloudKit sync data!
CKRecord in item has a different record name %{public}@ from record name of the item: %{public}@
Record type %{public}@ of CKRecord in item does not match the expected BookmarkLeaf type.
Record type %{public}@ of CKRecord in item does not match the expected BookmarkList type.
CKRecord in item was never saved to the server despite being saved locally.
Sync data has no position stored despite its CKRecord being saved locally.
Sync data has no generation for its parent and position despite having saved sync data.
Sync data has no generation for its folder title and identity hash despite having saved sync data.
Sync data has no generation for its folder title, URL, and identity hash despite having saved sync data.
Checking account hash
Storing account hash
Account hash matches
Needs dataclass enabled check
Needs account hash check
JSON data could not be decompressed.
JSON data could not be parsed
Unexpected JSON root type, expecting: %{public}@ instead got: %{public}@
Failed to read from cloud bookmark transformed value data: %{public}@
Failed to decode encrypted data with exception: %{public}@
Failed to instantiate CloudKit settings database!
Fetching record changes with server change token %{public}@.
Fetching all records.
Record changed: %{private}@
Record of type %{public}@ deleted: <%{public}@>
Bailing out from record fetch due to deallocation with error %{public}@
Record fetch retry limit exceeded
Fetch record changes failed: %{public}@
Fetch records from record zone operation completed for record zone %{public}@
Fetch record zone changes operation failed: %{public}@
Enqueuing request to fetch records from record zone %{public}@
Number of device in sync circle is 0
Saving CloudSettings zone subscription
Bailing out from saving CloudSettings zone subscription due to deallocation
Saving CloudSettings zone subscription failed because of missing zone, attempting to create zone
Aborting save of CloudSettings zone subscription because zone couldn't be created
Saving CloudSettings zone subscription after creating zone
Attempting to save zone subscription for zone: %{public}@
Saving CloudSettings record
Attempting to create CloudSettings zone before retrying save operation
Retrying save operation after creating CloudSettingsZone
Failed to save record due to unexpected error: %{public}@
Failed to save record due to unrecoverable error: %{public}@
Received batch too large error for an individual record change; bailing out
Failed to save record due to unexpected error outside the CKErrorDomain: %{public}@
Failed to save record due to CloudKit error which could not be handled: %{public}@
Will save merged record
Will retry save with updated batch after error: %{public}@
Retrying save operation
Received batch too large error for an individual record change, bailing out
Modify records operation failed due to deallocation with error %{public}@
Attempting to retry save request
Record save retry limit exceeded
No records to delete.
Deleting %lu records.
Error occurred when deleting records: %{public}@
Clearing cached CloudSettings record zone
Deleting CloudSettings zone
Fetching CloudSettings zone subscription
Failed to fetch CloudSettings zone subscription by ID with error: %{public}@
Successfully fetched CloudSettings zone subscription
Creating CloudSettings zone
Failed to create CloudSettings zone with error: %{public}@
Bailing out of creating CloudSettings zone due to deallocation
Retrying creation of CloudSettings zone
Waiting to retry creation of CloudSettings zone
Zone creation retry limit exceeded
Successfully created CloudSettings zone
Moving record %{public}@ into parent record %{public}@
Missing parent record name for bookmark with name %{public}@. Reparenting to root.
Marking record name %{public}@ as moved locally
Attempted to delete built-in record with name: %{public}@, ignoring
Marking record name %{public}@ as deleted
Could not insert record with name %{public}@ in root folder!
Built-in bookmark folder with record name: %{public}@ was moved to parent with record name: %{public}@ instead of root
Could not insert record with name %{public}@ in built-in folder %{public}@!
Could not insert record with name %{public}@ in temporary folder!
Trying to move existing record with name %{public}@ into parent folder %{public}@ but the record does not exist locally!
Creating built-in folder with record name: %{public}@
The temporary folder contains %ld records that were not marked as deleted or moved to their final location. Record names: %{public}@
Record with name %{public}@ does not have a parent even though it was checked right before
Failed to insert %{public}@ into the root folder and for some reason the parent folder does not exist or creates a cycle!
Did finish checking hierarchy consistency, will move remaining records into their final location
Will move record %{public}@ into parent %{public}@
Could not move %{public}@ into folder %{public}@ even though all cycles and broken hierarchies should have been detected and fixed beforehand. Moving to the root.
Failed to insert %{public}@ into the root folder after failing to insert it into %{public}@, apparently there is no hierarchy to speak of.
Already verified parent chain fo record with name %{public}@
Checking parent chain of record with name %{public}@
Moved bookmark with record name %{public}@ was actually not saved to the database!
Parent %{public}@ was deleted, reparenting %{public}@
Loop detected, reparenting %{public}@ in list %{public}@
Parent %{public}@ is not in the database, reparenting %{public}@
Fixing order in local storage based on CloudKit positions
Record name %@, position: %@
Reordering children of root folder
Did finish reordering children of root folder
No children to reorder in folder with Server Sync ID: %@
Reordering children of record with Server Sync ID: %{public}@
Did finish reordering children of record with Server Sync ID: %{public}@
Removing %lu local items that were deleted on the server
Migration state value in server record is of type %{public}@ when NSNumber was expected
Migration state server record value (%{public}@) does not match expected state values
Checked in %{public}@ activity
No prior %{public}@ activity was found. Registering a new one
Running %{public}@ activity
Failed to set the activity state to 'Continue'. Deferring %{public}@ activity
Database for manager %lu doesn't exist. Deferring %{public}@ activity
Failed to acquire the sync lock. Deferring %{public}@ activity
Performing %{public}@ activity
Failed to get a valid device identifier to start coordinating migration.
Not migrating because Safari sync is disabled
Cannot read local migration state for migration due to invalid device identifier.
Not migrating because we've already migrated
Will attempt secondary migration
Will attempt primary migration
Failed to acquire lock on the database to read the migration state
Determining eligibility for local-only migration
Cannot determine eligibility for local-only migration due to invalid device identifier.
Bailing out from secondary migration without fetching remote migration info because Safari sync is disabled
Bailing out from secondary migration eligibility determination due to deallocation
Bailing out from secondary migration because Safari sync is disabled
Received an error fetching remote migration state: %{public}@; will attempt to become responsible for migration
Not eligible for local-only migration; will attempt to become responsible for migration
Remote migration pending; will decide whether we are responsible for resuming migration or should preempt the migrator
Performing local-only migration
Attempting to become responsible for migration by pushing state to the server
Cannot become responsible for migration due to invalid device identifier.
Bailing out from primary migration eligibility determination due to deallocation
Failed to become responsible for migration due to unrecoverable error: %{public}@
Failed to become responsible for migration due to CloudKit write error: %{public}@
Record zone unexpectedly deleted or missing; bailing out of primary migration
Migration coordinator retry limit exceeded
Pushed migration state successfully; assuming we are now responsible for migration
Bailing out from primary migration because Safari sync is disabled
Unable to lock backing store; bailing out from primary migration
Failed to push migration state because some other device modified it first; aborting
Cannot resume pending remote migration due to invalid device identifier
Received a migrationInfo with nil device identifier; will continue evaluating eligibility to steal right to migrate
Migration record indicates that we are the migrating device; attempting to resume migration
Not stealing right to migrate since no last modification date was stored in the migration record
Not stealing right to migrate since migration state was updated recently by another device
Deleting existing record zone in preparation for stealing right to migrate
Something went wrong deleting the existing record zone; bailing out: %{public}@
Stealing right to migrate due to migration timeout
Exceeded maximum migration retry limit
Scheduling migration retry
Starting PRIMARY migration
Starting SECONDARY migration
Migration failed with error %{public}@; resetting local and remote migration state
Migration succeeded
Unable to set remote migration state to %lu due to error: %{public}@; resetting local migration state, will attempt retry
Migration coordinator transitioning from state %zd to state %zd
User account changed for iCloud Settings
iCloud Settings syncing not available because user is not signed in
iCloud Settings syncing not available because Safari's dataclass isn't enabled
Sync coordinator will begin syncing
Already synchronizing; ignoring request to sync
Discontinuing sync because Safari sync is disabled or the user is not signed in
Beginning synchronization
Failed to set up Settings Record Zone with error: %{public}@
Stopping fetch of settings
Have not performed a sync down yet; doing so now
Error received while syncing down: %{public}@
Sync coordinator finished sync down
Failed to decode customization sync server change token: %{public}@
Failed to serialize customization sync server change token: %{public}@
Failed to fetch changes with error: %{public}@
Attempting to create CloudSettings zone before retrying fetch
Fetching changes from CloudKit again after creating CloudSettings zone
Failed to create CloudSettings zone when fetching changes with error: %{public}@
Received unsynced Keychain error, but we're already waiting for PCS identities to change.
Received unsynced Keychain error. Observing notification to start fetching Safari settings when PCS identities change
Finished fetching changes from CloudKit
Performing initial StarSky sync down of Safari's settings.
Change token is expired; trying a full sync down.
Sync coordinator failed to sync settings with error: %{public}@
Retrying sync after receiving synchronization request during synchronization
Not retrying sync after receiving synchronization request during sync since previous sync failed
Syncing done, calling completion handler
Ignoring PCS identity change notification because Customization Sync is not waiting for an identity update
Retrying sync after receiving expected PCS identity change notification.
Saving Safari's background image for the current device to CloudKit
Did fail to save the background image with error: %{public}@
Saving setting for the current device to CloudKit
Did fail to save record with error: %{public}@
Deleting settings from CloudKit
Did fail to delete record with error: %{public}@
Clearing cached CloudSettings server change token
*** Failed to instantiate CloudKit database!
Fetching user identity
Failed to fetch user identity due to missing zone: %{public}@
Attempting to fetch user record ID
Failed to fetch user record ID with error: %{public}@
Successfully fetched user record ID
Clearing cached record zone
Fetching Bookmarks zone subscription
Bailing out from fetching Bookmarks zone subscription due to deallocation
Failed to fetch Bookmarks zone subscription status due to missing zone: %{public}@
Fetching Bookmarks zone subscription by ID
Failed to fetch Bookmarks zone subscription by ID with error: %{public}@
Successfully fetched Bookmarks zone subscription
Saving Bookmarks zone subscription
Bailing out from saving Bookmarks zone subscription due to deallocation
Failed to save Bookmarks zone subscription due to missing zone: %{public}@
Fetching record changes for Bookmarks zone
Bailing out fetching record changes due to deallocation
Failed to fetch record changes due to missing zone: %{public}@
Saving record batch of size: %lu
Bailing out from saving record batch due to deallocation
Failed to save record batch due to missing zone: %{public}@
Deleting record batch of size: %lu
Batch record save operation completed but failed to save records due to unrecoverable error: %{public}@
Attempting to delete bookmark zone
Bookmark zone deletion failed with error: %{public}@
Successfully deleted bookmark zone
Preparing bookmarks record zone, invalidateCachedZone: %d, createIfNeeded: %d
Cached record zone already present; nothing to do
Fetching record zone anew from CloudKit
Bailing out from zone setup due to deallocation
Zone setup retry limit exceeded
No existing record zone found
Will attempt to set up zone from scratch
Bailing out without setting up zone
Failed to fetch minimum sync API version when setting up record zone; bailing
*** Minimum sync API version is too new (%lu, our current version is %lu)
Attempting to save/load record
Failed to save/load record with error: %{public}@
Successfully saved/loaded record
Attempting to save/load encryption record
Failed to save/load encryption record due to unrecoverable error: %{public}@
Failed to save/load encryption record due to unexpected and unrecoverable write error: %{public}@
Record zone disappeared while setting up encryption information; bailing
Bailing out from encryption record setup due to deallocation
Encryption record retrieval retry limit exceeded
Saving record batch with %lu records
Failing save of record batch since migration record disappeared
Will attempt to resave migration record due to recoverable error
Failed to save migration record: %{public}@
Batch record save operation completed but failed to save migration record at end of batch save
Batch record save operation completed but bailing out from batch save due to previously cancelling the request
Batch record save operation completed but now retrying updated batch
Batch record save operation completed but server rejected the smallest batch we can send; bailing out
All attempts at re-batching record save failed
Attempting to re-batch record save
Batch record save operation completed but we need to re-batch
Modify records operation failed due to timeout of retryable error: %{public}@
Attempting to retry batch save request
Record batch save retry limit exceeded
Creating encryption record
Attempting to fetch encryption record from CloudKit
Encryption record fetch failed due to deallocation with error <%{public}@>.
Encryption record fetch retry limit exceeded
Encryption record fetch failed: %{public}@
Successfully fetched encryption record
Starting fetch of remote migration state
Failed to fetch remote migration state with error: %{public}@
Remote migration state fetch operation completed
Fetch remote migration state failed <%{public}@>.
Record zone disappeared while fetching remote migration state; bailing
Fetch remote migration state failed due to deallocation with error <%{public}@>.
Remote migration state retrieval retry limit exceeded
Fetch migration state failed <%{public}@>.
Enqueuing request to fetch remote migration state
Failed to set remote migration state due to missing zone: %{public}@
Completed operation to try to set remote migration state to %ld
Failed to set remote migration state to <%li>: %{public}@
Enqueuing request to set remote migration state to %ld
Minimum sync API version fetch operation completed
Fetch minimum sync API version failed <%{public}@>.
Fetch minimum sync API version failed due to deallocation
Minimum sync API version fetch retry limit exceeded
Failed to set minimum sync API version due to failure to set up record zone: %{public}@
Completed operation to try to set minimum sync API version to %ld
Failed to set minimum sync API version to <%li>: %{public}@
Enqueuing request to set minimum sync API version to %ld
Attempting to save new record zone
Failed to set up new record zone: %{public}@
Bailing out of record zone setup due to deallocation
Successfully set up new record zone
Someone deleted the migration record during migration with error: %{public}@
Migrator device identifier changed
Migrator device identifier changed from %@ to %@
Migration state changed from %ld to %ld
Internal-only _fetchRecordsWithServerChangeToken called!
Attempting to start synchronization
Discontinuing sync because a retry has already been scheduled
Discontinuing sync because user is not signed in
Could not create BADatabase to synchronize
Device identifier is empty
Trying to open database after another client already did
Reading migration state %lu
Discontinuing sync since local migration has not yet completed, migration state: %lu
Discontinuing sync since local migration state cannot be read
Database sync data is unreadable, reset all sync data and attempt a migration again
Discontinuing sync because account hash differed
Discontinuing sync because bookmarks Safari sync is disabled
Failed to set up Bookmarks Record Zone with error: %{public}@
Failed to fetch (or received invalid) remote migration state record with error: %{public}@
Scheduling retry #%d in %.1fs.
Discontinuing sync after attempting maximum number of retries
*** Resetting sync data
Bookmark Store setup done, opening database and processing changes
Failed to open database after finishing sync coordinator setup
Records were not saved locally, attempt merging to generate Add changes
Finish syncing
Sync coordinator failed to sync bookmarks with error: %{public}@
Database is unlocked despite having unlocked it before entering this method
Number of processed changes %lu, locally moved records: %lu, change token: %{public}@
Performing hierarchy check for moved records, number of moved records: %lu, number of deleted records: %lu
Discontinuing sync because bookmarks dataclass was disabled during sync
Done saving all record changes
Record %{public}@ was deleted remotely
Did fail to save record batch with error: %{public}@
Performing sync down with last server change token: %{public}@
Did finish fetching records between server change token: %{public}@ and server change token: %{public}@
None of the %ld records sent to be saved to the server were received on sync down. Missing records: %{public}@
Did not receive %ld records on sync down out of the %ld records sent to be saved. Missing records: %{public}@
Did receive %ld records in current sync down that were supposed to be retrieved in the previous one. Received records: %{public}@
Successfully completed full sync down after expired change token error
Record %@ was not seen during sync down after expired change token error; marking it for deletion
Record %@ has MinimumAPIVersion %lu and will be deleted locally
Merging record %{public}@ with result %{public}@ indicates that the remote record needs update despite being in sync down phase. The record should have been saved to the server before.
Record %@ does not exist locally and is deleted remotely
Has unsaved changes; saving next batch.
Unrooted moved bookmarks are present; will reparent
Sync migration converter beginning migration
Saving bookmarks
Sync migration converter finished migration and sync down
Begin performing sync down while merging records
Did fail to perform merging sync down with error: %{public}@
Did finish merging sync down, temporarily reparent and sort records in case we have cycles or unrooted records in the hierarchy
Did finish reparenting, perform deduplication keeping records with sync data
Did finish deduplication keeping records with sync data, begin converting and saving remaining records
Failed to convert local records with error: %{public}@
Did finish converting and saving remaining records
Perform post-migration sync down
Failed to sync down after migration: %{public}@
Zone deleted during migration conversion; bailing
Bailing from sync down due to deallocation with error %{public}@
Sync migration converter retry limit exceeded
None of the %ld records saved to the server were retrieved on sync down. Missing records: %{public}@
Did finish post-migration sync down
Performing post-migration moved records verification
No records need to be reparented
Did fail to reparent unrooted bookmarks after migration with error: %{public}@
Did finish reparenting unrooted records
Failed to get iCloud Tabs database URL, falling back to in-memory database
Received PCS change notification with state %ld
Ignoring PCS state change notification because it is the same as the current state %ld
Determining CloudTab sync coordinator in response to PCS change notification with state %ld
Determined PCS state to be %ld
Instantiating sync coordinator using PCS state %ld
Failed to read whether to use PCS cloud container for syncing with sqlite error code %d
CloudTabs database has PCS container sync properties
CloudTabs database has normal container sync properties
Database should not be reset because it's using the correct container
CloudTabs database needs to reset because sync properties are not compatible with PCS state %ld
Finished resetting CloudTabs database
Ignoring PCS identity change notification because CloudTabs is not waiting for an identity update
Received expected PCS identity change notification
Informing delegate of a PCS identity change
Received PCS unavailable error from CloudKit. Marking PCS state needs updating
Received unrecoverable PCS error %ld from CloudKit. Deleting the CloudTabs zone and creating a new one
Received unsynced Keychain error. Observing notification to start fetching CloudTabs when PCS identities change
Performing a fetch to fulfill request from %ld outstanding callers
Fetching local migration state from database (isMigrating: %d)
Setting local migration state in database to %ld (isMigrating: %d)
Sync migration coordinator starting PRIMARY migration
Sync migration coordinator starting SECONDARY migration
Sync migration coordinator failed due to migration unexpectedly being in progress
Database was already open by another client, could not open database
Begin performing first deduplication
Did finish performing first deduplication
Starting migration conversion as primaryMigrator = %d
Migration conversion failed with error: %{public}@
Migration conversion succeeded
Sync migration coordinator did fail to migrate with error: %{public}@
Sync migration coordinator did finish migrating.
Sync migration post-processing handler called
Did finish migration, perform last deduplication
Did finish last deduplication
Failed to serialize bookmarks JSON with error: %{public}@
Change for item with server ID %{private}@ is neither bookmark nor folder.
Fetching CloudTabs zone subscription
Failed to fetch CloudTabs zone subscription by ID with error: %{public}@
Successfully fetched CloudTabs zone subscription
Saving CloudTabs zone subscription
Bailing out from saving CloudTabs zone subscription due to deallocation
Saving CloudTabs zone subscription failed because of missing zone, attempting to create zone
Aborting save of CloudTabs zone subscription because zone couldn't be created
Saving CloudTabs zone subscription after creating zone
Attempting to create CloudTabs zone before retrying save
Retrying save after creating CloudTabsZone
Grouping delete requests for %lu objects into %lu batches
Deleting records failed: %{public}@
Deleting CloudTabs zone
Failed ot delete CloudTabs zone with error: %{public}@
Successfully deleted CloudTabs zone
Creating CloudTabs zone
Failed to create CloudTabs zone with error: %{public}@
Bailing out of creating CloudTabs zone due to deallocation
Retrying creation of CloudTabs zone
Waiting to retry creation of CloudTabs zone
Successfully created CloudTabs zone
Error occurred deleting records, canceling dependent operations: %{public}@
Finished %@
Beginning conversion of folder contents
Did fail to migrate record hierarchy with error: %{public}@
Did finish migrating folder contents
Record %{public}@ has no position and needs saving in folder %{public}@
Found record %{public}@ with position %{public}@ after record %{public}@ with position %{public}@, folder %{public}@ should have been sorted before!
Found record with name %{public}@ after %ld records which do not have a position defined yet
Batch of size %lu with %lu records is full for %@
No more records to save.
Merging record %{public}@ with result %{public}@ indicates that the local record needs to be undeleted during migration. Migration never attempts to delete remote records before the last de-duplication phase.
Received unsynced Keychain error. Observing notification to start syncing Tab Groups when PCS identities change.
Ignoring PCS identity change notification because Safari Tab Groups Sync is not waiting for an identity update
Received expected PCS identity change notification. Syncing Tab Groups.
Sending notification of tab group sync result: %{public}zu
Received change set %{public}@ with %{public}zu changes; should sync: %{public}d
Persisting change set %{public}@ because a sync is in progress
Persisted change set %{public}@
Processing local tab operation
Failed to acquire local tab collection lock
Failed to open local tab database
Failed to open tab database
Failed to acquire tab collection lock
Scheduling a tab group sync operation
Saving reparented records
Saving reparented records with record names: %@
Did fail to save reparented records with error: %{public}@
Did finish saving reparented records
Sync down handler starting sync, keep records marked as deleted locally = %d
Sync down handler did fail sync down with with error: %{public}@
Sync down handler did succcessfully sync down
Sync down handler fetching record changes from server change token: %{public}@
Canceling migration sync-down because Safari sync is disabled
Zone deleted during migration sync-down; bailing
Bailing out from sync down due to deallocation with error %{public}@
Sync down handler retry limit exceeded
Merging record %{public}@ with result %{public}@ indicates that the remote record needs update despite being in sync down phase. The record should have been saved to the server during migration.
Record %{public}@ does not locally exist and cannot be saved locally because of its minimum API version
Record %{public}@ does not exist locally and is deleted remotely
Writing locally record %{public}@ despite the record not existing locally and being deleted remotely for merging
Processing %lu changes with changeToken: %@
Add change %{public}@ was provided without a corresponding changed item.
Move change %{public}@ was provided without a corresponding changed item.
Moved item %{public}@ for change %{public}@ did not have a record ID.
Attempted to delete built-in record with name: %{public}@, ignoring.
Attempting to check database open state from a background thread
Attempting to retrieve the database from a background thread
Attempting to retrieve the backing store lock from a background thread
%{public}@ attempting to lock backing store
%{public}@ backing store was already locked
%{public}@ successfully locked backing store
%{public}@ failed to lock backing store
Attempting to unlock the backing store from a background thread
Trying to unlock the database despite the database being already unlocked
%{public}@ did not unlock backing store due to outstanding lock requests
%{public}@ is unlocking the database even though the database is still open
%{public}@ unlocked backing store
Attempting to retrieve the migration state from a background thread
Fetching local migration state from database (isDatabaseLocked: %d, isDatabaseOpen: %d)
Fetched local migration state %ld from database
Attempting to set the migration state from a background thread
Setting local migration state in database to %ld (isDatabaseLocked: %d, isDatabaseOpen: %d)
Attempting to open the database from a background thread
Attempted to open the database without acquiring the lock first.
Attempted to open the database even though it is already open.
Will open the database
Attempting to close the database from a background thread
Attempted to close the database without acquiring the lock first (shouldSave: %d
Attempted to close the database without opening it first (shouldSave: %d
Did close database, did save %d
Failed to delete device, tab, or close request: %{public}@ (%d)
Failed to create the cloud_tab_devices table: %{public}@ (%d)
Failed to create the cloud_tabs table: %{public}@ (%d)
Failed to create the index for cloud_tabs table: %{public}@ (%d)
Failed to create the cloud_tab_close_requests table: %{public}@ (%d)
Failed to create the metadata table: %{public}@ (%d)
Failed to execute query when resetting database schema: %{public}@ (%d)
Opening iCloud Tabs SQLite database
Failed to open iCloud Tabs store at %{private}@: %{public}@
Failed to exclude CloudTabs.db from backup: %{public}@
Failed to enable WAL on CloudTabs.db: %{public}@
Failed to enable foreign keys on iCloud Tabs store: %{public}@ (%d)
Failed to enable secure delete on iCloud Tabs store: %{public}@ (%d)
iCloud Tabs store schema version (%d) does not match our supported schema version (%d) in store at %{public}@.
Closing iCloud Tabs SQLite database
Removing iCloud Tabs store file
Failed to remove iCloud Tabs store file at %{private}@: %{public}@
Recreating iCloud Tabs store file after removing it
Failed to set the database schema version to %d: %{public}@ (%d)
Failed to update metadata value %{public}@: %{public}@ (%d)
Failed to insert metadata value %{public}@: %{public}@ (%d)
Failed to delete metadata value for key %{public}@: %{public}@ (%d)
Failed to vacuum database: %{public}@ (%d)
Found a device without a UUID in the database.
Found a device without system fields in the database.
Failed to insert or replace device: %{public}@ (%d)
Found a tab without a UUID in the database.
Found a tab without system fields in the database.
Found a tab without a position dictionary in the database.
Couldn't create a tab's position from the position dictionary in the database.
Found a tab without a URL in the database.
Failed to insert or replace tab: %{public}@ (%d)
Found a close request without a request UUID in the database.
Found a close request without system fields in the database.
Found a close request without a destination device UUID in the database.
Found a close request without a tab URL in the database.
Found a close request without a tab UUID in the database.
Failed to create a CloudTabCloseRequest from the database.
Failed to insert or replace close request: %{public}@ (%d)
Deleting the iCloud Tabs database
User account changed for iCloud Tabs
iCloud Tab syncing not available because user is not signed in
iCloud Tab syncing not available because Safari's dataclass isn't enabled
Saving tabs for the current device to CloudKit
No iCloud Tab device found to save
Stopping save of tabs for current device
Merging device with existing device in SQLite database, if necessary
Severe SQLite store error occurred while merging device with existing device: %{public}@
Merging device with existing device in SQLite database
No existing device found in SQLite database
Saving device to CloudKit
Done saving device to CloudKit
Saving iCloud Tab record batch of size: %lu
Did fail to save iCloud Tab record batch with error: %{public}@
Finished saving iCloud Tab record batch
Deleting obsolete tab records from CloudKit
No obsolete tab records need to be deleted from CloudKit
Failed to delete obsolete tab records with error: %{public}@
Done deleting obsolete tab record from CloudKit
Updating SQLite store from CloudKit after saving tabs
Updating SQLite store from CloudKit after saving tabs failed with error: %{public}@
Done updating SQLite store from CloudKit after saving tabs
Finished saving tabs for the current device to CloudKit
Saving close request to CloudKit
No close request found to save
Stopping save of close requests
Did fail to save iCloud Tab record batch with close requests with error: %{public}@
Successfully saved close request to CloudKit
Updating SQLite store from CloudKit after saving close request
Updating SQLite store from CloudKit after saving close request failed with error: %{public}@
Done updating SQLite store from CloudKit after saving close request
Finished saving close request to CloudKit
Fetching iCloud Tab data from CloudKit
Stopping fetch of tabs
Deleting database and restarting fetch
Reading server change token from SQLite
Finished reading server change token from the SQLite database
Severe SQLite store error occurred while reading server change token: %{public}@
Failed to read from server change token data: %{public}@
Failed to decode server change token with exception: %{public}@
Found server change token data in the SQLite database
Found server change token data in the SQLite database, but couldn't unarchive it
Found server change token data in the SQLite database, but couldn't unarchive it, even after deleting the database
No server change token found in the SQLite database
Fetching changes from CloudKit
Attempting to create CloudTabs zone before retrying fetch
Fetching changes from CloudKit again after creating CloudTabs zone
Failed to create CloudTabs zone when fetching changes with error: %{public}@
No records to delete from SQLite
Removing %lu deleted records from SQLite
Severe SQLite store error occurred while deleting records: %{public}@
Finished removing deleted records from SQLite
No modified devices, tab records, or close requests to save to SQLite
Saving %lu device records, %lu tab records, and %lu close requests to SQLite
Severe SQLite store error occurred while saving records: %{public}@
Failed to save modified device, tab, and close request records to the SQLite database with error: %d
Finished saving modified device, tab, and close request records to the SQLite database
Saving server change token to SQLite
Failed to archive server change token: %{public}@
Severe SQLite store error occurred while saving server change token: %{public}@
Failed to save server change token to SQLite with error: %d
Done saving server change token to SQLite
Skipping loading devices, tabs, and close requests from SQLite
Loading devices, tabs, and close requests from SQLite
Severe SQLite store error occurred while loading records: %{public}@
Finished loading devices, tabs, and close requests from SQLite
Finished fetching iCloud Tab data from CloudKit
Fetched an invalid iCloud Tab device record from CloudKit
Fetched an invalid iCloud Tab tab record from CloudKit
Fetched an invalid iCloud Tab close request record from CloudKit
Fetched an unrecognized record from CloudKit of type %{public}@
Deleting devices from CloudKit
No devices to delete
Deleting close requests from CloudKit
No close requests to delete
Stopping deletion of records
Deleting records from CloudKit
Failed to delete records with error: %{public}@
Done deleting records from CloudKit
Updating SQLite store from CloudKit after deleting records
Updating SQLite store from CloudKit after deleting records failed with error: %{public}@
Done updating SQLite store from CloudKit after deleting records
Finished deleting records CloudKit
Sync coordinator received a message to delete the CloudTabs zone
Sync coordinator successfully deleted CloudTabs zone and local database
Severe SQLite store error: %{public}@
Prepare records for migration
Number of records prepared for migration: %ld
Convert built-in record with recordName %{public}@ for migration
Record of type %ld has built-in record name %{public}@ despite not being a built-in folder, generating a new record name
Convert new local record with created recordName %{public}@ for migration
Already converted record with recordName %{public}@ for migration
Convert Bookmark DAV record with recordName %{public}@ for migration
Trying to generate DAV server ID for bookmark with local ID %{public}@, but that bookmark doesn't exist
Received nil set of child local IDs for folder with local ID %{public}@ while generating DAV server IDs
Clearing referenced record with generation: %{public}@ for attribute: %{public}@ in record: %{public}@
Did find referenced record: %{public}@ generation: %{public}@ for attribute: %{public}@ in record: %{public}@
Could not find referenced record: %{public}@ generation: %{public}@ for attribute: %{public}@ in record: %{public}@
Overriding previous referenced record : %{public}@ generation: %{public}@ with referenced record: %{public}@ generation: %{public}@ for attribute: %{public}@ in record: %{public}@
Cannot apply reference: %{public}@ with generation: %{public}@ to attribute %{public}@ of record name: %{public}@ because the item is missing locally.
No references to apply
Record changed: %@
Record of type %{public}@ deleted: <%@>
Enqueuing %lu modify records operations
SafariBookmarksSyncAgent
APSConnectionDelegate
NSObject
SafariSyncControllerConnectionHandling
WBSSafariBookmarksSyncAgentProtocol
WBSCyclerCloudBookmarksAssistant
WBTabGroupSyncAgentProtocol
WBSSafariSyncServiceProtocol
SafariSyncController
CloudBookmarkDatabaseLockArbiterDelegate
CloudTabSyncArbiterDelegate
NSXPCListenerDelegate
CloudTabGroupSyncManagerDelegate
CloudSettingSyncCoordinatorDelegate
AppleAccountInformationProvider
WBSAppleAccountInformationProviding
BookmarkHashGenerator
CloudBookmark
SafariBookmarksSyncExtras
CloudBookmarkDebugHierarchyChecker
CloudBookmarkAccountPropertiesStore
CloudBookmarkCompressedJSONValueTransformer
CloudBookmarkDatabaseHandler
CloudBookmarkUpdater
CloudBookmarkCKReferenceValueTransformer
CloudBookmarkEncryptedObjectValueTransformer
CloudSettingStore
CloudBookmarkMovedBookmarkManager
CloudSettingsSyncEngineAccessProvider
CloudBookmarkAttributeValueTransformer
CloudBookmarksExtras
CloudBookmarksFetchResult
CloudTabGroupMaintenanceActivity
CloudBookmarksMigrationCoordinator
CloudBookmarkExpiredChangeTokenHandler
CloudTabCloseRequest
NSCopying
CloudBookmarkDatabaseAccessProvider
CloudBookmarkItemConfiguration
CloudSettingSyncCoordinator
CloudBookmarkStore
CloudBookmarkStoreUserDefaultsStorage
CloudBookmarkStoreLocalStorage
CloudBookmarkSyncCoordinator
WBSCRDTPositionGeneratorDelegate
CloudBookmarkSyncMigrationConverter
CloudBookmarkSyncMigrationSaveHandlerDelegate
CloudBookmarkSyncMigrationSyncDownHandlerDelegate
CloudBookmarkCKContainerExtras
CloudTabSyncArbiter
CloudTabSyncProtocol
CloudTabLocalStoreShim
CloudTabLocalStore
CloudTabLocalStoreDelegate
CloudBookmarkSyncMigrationCoordinator
CloudBookmarksDiagnostics
CloudTabRemoteStore
CloudBookmarkSyncMigrationFolderContentConverter
CloudBookmarkSyncMigrationPositionGenerator
_CloudBookmarkSyncMigrationPositionGeneratorEnumerator
CloudBookmarkSyncMigrationSaveHandler
CloudTabGroupSyncManager
CloudTabGroupMaintenanceActivityDelegate
CloudBookmarkSyncMigrationSaveReparentedBookmarksHandler
CloudBookmarkSyncMigrationSyncDownHandler
CloudBookmarkChangeProcessor
CloudBookmarkDatabaseLockArbiter
CloudBookmarkDatabaseCoordinating
CloudBookmarkWindowsCompatibleStringValueTransformer
CloudBookmarkWindowsCompatibleURLValueTransformer
CloudBookmarkURLIdentityHashValueTransformer
CloudTab
CloudKitSQLiteStore
WBSSQLiteDatabaseDelegate
CloudTabDevice
CloudTabsExtras
CloudTabSQLiteStore
CloudTabSyncCoordinator
CloudBookmarkSyncMigrationHierarchyConverter
CyclerCloudBookmarksAssistant
CloudBookmarkPendingReferenceManager
CloudRemoteStore
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16@24
v48@0:8@16@24@32@40
v40@0:8@16@24@32
v28@0:8@16B24
v24@0:8@16
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
v32@0:8@"APSConnection"16@"NSArray"24
v20@0:8B16
v16@0:8
@"APSConnection"
v24@0:8@?16
v28@0:8B16@?20
v24@0:8@?<v@?@"NSError">16
v28@0:8B16@?<v@?@"NSError">20
v24@0:8q16
v40@0:8@16@24@?32
v32@0:8@16@?24
v36@0:8@16B24@?28
v24@0:8@?<v@?q@"NSString"@"NSError">16
v24@0:8@?<v@?@"NSData">16
v40@0:8@"NSDictionary"16@"NSString"24@?<v@?@"NSError">32
v32@0:8@"NSArray"16@?<v@?@"NSError">24
v24@0:8@?<v@?@"NSArray">16
v24@0:8@?<v@?@"NSArray"@"NSArray"@"NSError">16
v24@0:8@?<v@?B>16
v32@0:8@"NSDictionary"16@?<v@?>24
v36@0:8@"NSURL"16B24@?<v@?>28
v24@0:8@?<v@?>16
v48@0:8@16@24@32@?40
v32@0:8@"WebBookmarkChangeSet"16@?<v@?B@"NSArray"@"NSError">24
v32@0:8@"WBBrowserState"16@?<v@?B@"NSError">24
v32@0:8@"WBTabGroup"16@?<v@?B@"NSError">24
v40@0:8@"WBTabGroup"16@"WBTabGroup"24@?<v@?B@"NSError">32
v32@0:8@"NSArray"16@?<v@?B@"NSError">24
v48@0:8@"NSArray"16@"WBTabGroup"24@"WBTab"32@?<v@?B@"NSError">40
v40@0:8@"WBTab"16@"WBTab"24@?<v@?B@"NSError">32
v32@0:8@"WBTab"16@?<v@?B@"NSError">24
v40@0:8@"NSArray"16@"WBTabGroup"24@?<v@?B@"NSError">32
v32@0:8@"WBWindowState"16@?<v@?B@"NSError">24
v40@0:8@"NSString"16@"NSString"24@"NSDictionary"32
v24@0:8@"NSString"16
v24@0:8@"CloudBookmarkDatabaseLockArbiter"16
@28@0:8@16B24
@"CKContainer"28@0:8@"CloudTabSyncArbiter"16B24
v24@0:8@"CloudTabSyncArbiter"16
B32@0:8@16@24
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v24@0:8@"CloudTabGroupSyncManager"16
v32@0:8@"CloudSettingSyncCoordinator"16@"CKRecord"24
v32@0:8@"CloudSettingSyncCoordinator"16@"CKRecordID"24
v24@0:8@"CloudSettingSyncCoordinator"16
@24@0:8@16
@24@0:8q16
v40@0:8q16@24@?32
v40@0:8@16q24@?32
v28@0:8q16B24
v44@0:8r*16@24B32@?36
d32@0:8q16@24
v40@0:8B16B20q24q32
v32@0:8@16q24
@"ACAccountStore"
@"<WBSBookmarkDBAccess>"
@"CloudBookmarkStore"
@"NSXPCListener"
@"NSTimer"
@"NSDate"
@"NSObject<OS_os_transaction>"
@"WBSDiagnosticStateCollector"
@"CKSubscription"
@"CKContainer"
@"CloudBookmarkDatabaseLockArbiter"
@"CloudBookmarkSyncMigrationCoordinator"
@"CloudBookmarksMigrationCoordinator"
@"CloudBookmarkSyncCoordinator"
@"NSObject<OS_dispatch_queue>"
@"NSObject<OS_dispatch_source>"
@"CyclerCloudBookmarksAssistant"
@"NSMutableSet"
@"NSUserDefaults"
@"NSOperationQueue"
@"CloudTabSyncArbiter"
@"CloudSettingStore"
@"CloudSettingSyncCoordinator"
@"<WBSSettingsSyncEngineAccess>"
@"NSMutableDictionary"
@"CloudTabGroupSyncManager"
v24@0:8@?<v@?q>16
q16@0:8
@32@0:8@16@24
@"NSData"
@40@0:8@16^v24@32
@48@0:8@16^v24@32@40
v40@0:8^v16@24@32
@40@0:8^v16@24@32
@56@0:8@16@24^v32@40@48
v56@0:8@16@24^v32@40@48
@48@0:8^v16@24@32@40
@48@0:8r^v16@24@32@40
B32@0:8^v16@24
@32@0:8@16^B24
v32@0:8^v16@24
B48@0:8@16@24@32@40
Q32@0:8@16@24
Q36@0:8@16@24B32
Q24@0:8@16
Q32@0:8@16^B24
r^v16@0:8
@"WBBookmarkSyncData"
@"CloudBookmarkItemConfiguration"
@"NSString"
q24@0:8@16
B24@0:8^v16
B40@0:8^v16@24B32B36
@"<CloudBookmarkDatabaseCoordinating>"
@24@0:8#16
@"NSData"24@0:8@"NSArray"16
@"WBSCRDTPosition"24@0:8@"NSString"16
B48@0:8@"CKReference"16@"WBSCRDTGeneration"24@"NSString"32@"NSString"40
@"CKRecordZoneID"16@0:8
@"NSArray"16@0:8
@"CloudBookmarkAccountPropertiesStore"
@32@0:8@16Q24
@"CKRecordZoneID"
v56@0:8@16@24@?32@?40@?48
v56@0:8@16@?24@?32@40@?48
v64@0:8@16@24@?32@?40@48@?56
v56@0:8@16@24@32@40@?48
v60@0:8@16B24@28@36@?44@?52
v56@0:8@16@24@32@?40@?48
v64@0:8@16@24@32@40@?48@?56
@"CKDatabase"
@"CKRecordZone"
@32@0:8^v16@24
@28@0:8B16^@20
@24@0:8^@16
B32@0:8@16^@24
@32@0:8@16^@24
v24@0:8^@16
B24@0:8q16
B28@0:8@16B24
@32@0:8q16@24
v24@0:8Q16
@"NSMutableArray"
@"CKServerChangeToken"
@"NSArray"
@"CKRecord"
@"WBCollectionConfiguration"
@"<CloudTabGroupMaintenanceActivityDelegate>"
@40@0:8@16@24@32
d16@0:8
v36@0:8B16@20@?28
v24@0:8^v16
@24@0:8Q16
@64@0:8@16@24@32@40@48@56
@24@0:8^{_NSZone=}16
@88@0:8q16q24@32@40@48@56@64@72@?80
@?16@0:8
@"NSDictionary"
@"NSSet"
@"NSOrderedSet"
v28@0:8B16@20
@"CKOperationGroup"
@"<CloudSettingSyncCoordinatorDelegate>"
@40@0:8q16@24@32
@32@0:8@16q24
v40@0:8B16B20@24@?32
v48@0:8B16B20@24@32@?40
v72@0:8@16@24@32@40@48@?56@?64
v80@0:8@16@24@32@40@48@56@?64@?72
v40@0:8@?16@?24@?32
v48@0:8q16@24@32@?40
v32@0:8Q16@?24
@"BookmarkHashGenerator"
@"CKRecordID"
@"<CloudBookmarkStoreLocalStorage>"
@"NSData"16@0:8
v24@0:8@"NSData"16
@"NSString"24@0:8@"WBSCRDTPositionGenerator"16
q24@0:8@"WBSCRDTPositionGenerator"16
@"WBSCRDTPosition"32@0:8@"WBSCRDTPositionGenerator"16@"NSString"24
@"NSString"32@0:8@"WBSCRDTPositionGenerator"16@"NSString"24
@32@0:8^@16@?24
@"CloudBookmark"
@"WBSCRDTPosition"
@"CloudBookmarkMovedBookmarkManager"
@"CloudBookmarkPendingReferenceManager"
@"WBSCRDTPositionGenerator"
@"CloudBookmarkExpiredChangeTokenHandler"
B56@0:8@16@24@32@40@48
v32@0:8@"CloudBookmarkSyncMigrationSaveHandler"16@"CloudBookmark"24
v32@0:8@"CloudBookmarkSyncMigrationSaveHandler"16@"NSString"24
B32@0:8@"CloudBookmarkSyncMigrationSaveHandler"16@"CloudBookmark"24
B56@0:8@"CloudBookmarkSyncMigrationSaveHandler"16@"CKReference"24@"WBSCRDTGeneration"32@"NSString"40@"NSString"48
v32@0:8@"CloudBookmarkSyncMigrationSyncDownHandler"16@"CloudBookmark"24
v32@0:8@"CloudBookmarkSyncMigrationSyncDownHandler"16@"NSString"24
B56@0:8@"CloudBookmarkSyncMigrationSyncDownHandler"16@"CKReference"24@"WBSCRDTGeneration"32@"NSString"40@"NSString"48
@"CloudBookmarkSyncMigrationFolderContentConverter"
@"CloudBookmarkSyncMigrationSyncDownHandler"
@"CloudBookmarkSyncMigrationSaveReparentedBookmarksHandler"
v32@0:8q16@?24
@"CloudTabSQLiteStore"
@"CloudTabRemoteStore"
@"CloudTabSyncCoordinator"
@"CloudTabLocalStoreShim"
@"WBSCloudKitContainerManateeObserver"
@"<CloudTabSyncArbiterDelegate>"
v24@0:8@?<v@?@"NSArray"@"NSArray">16
v32@0:8@"NSString"16@?<v@?@"CloudTabDevice">24
v32@0:8@"NSArray"16@?<v@?i>24
v48@0:8@"NSArray"16@"NSArray"24@"NSArray"32@?<v@?i>40
v32@0:8@"NSData"16@?<v@?i>24
v24@0:8@?<v@?Bi>16
v28@0:8B16@?<v@?i>20
@"<CloudTabLocalStoreDelegate>"16@0:8
v24@0:8@"<CloudTabLocalStoreDelegate>"16
v24@0:8@"<CloudTabLocalStore>"16
v32@0:8@"<CloudTabLocalStore>"16@"NSError"24
@"<CloudTabLocalStoreDelegate>"
@"<CloudTabLocalStore>"
v44@0:8B16@20@?28@?36
@"CloudBookmarkSyncMigrationConverter"
@24@0:8^v16
v56@0:8^v16@24^q32^q40@48
v44@0:8@16B24@28@?36
v64@0:8@16@24@32@40@48@?56
@32@0:8@16@?24
@"CloudBookmarkSyncMigrationPositionGenerator"
@"NSEnumerator"
@48@0:8@16@24^@32^@40
@48@0:8@16@24@32q40
@"<CloudBookmarkSyncMigrationSaveHandlerDelegate>"
v24@0:8@"CloudTabGroupMaintenanceActivity"16
@48@0:8@16@24@32@40
v32@0:8@?16@?24
v36@0:8@?16B24@?28
@"CloudTabGroupMaintenanceActivity"
@"<CloudTabGroupSyncManagerDelegate>"
@"<CloudBookmarkSyncMigrationSyncDownHandlerDelegate>"
@"<CloudBookmarkUpdater>"
B24@0:8@"NSString"16
@"<WBSBookmarkDBAccess>"16@0:8
@"<CloudBookmarkDatabaseLockArbiterDelegate>"
@96@0:8@16@24@32@40@48@56B64B68@72@80@88
v96@0:8@16@24@32@40@48@56B64B68@72@80@88
v32@0:8@"WBSSQLiteDatabase"16@"NSError"24
@32@0:8@16r*24
i20@0:8i16
i32@0:8q16@24
i32@0:8@16@24
i16@0:8
v20@0:8i16
v28@0:8@16i24
v24@0:8i16i20
@"NSURL"
@"WBSSQLiteDatabase"
@64@0:8@16@24B32B36@40@48@56
@64@0:8@16@24B32@36B44@48@56
i24@0:8@16
@"CloudTabDevice"
@"NSError"
@"CloudTabCloseRequest"
@40@0:8@16q24@32
@"CKOperationConfiguration"
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.mobilesafari</string>
<key>aps-connection-initiate</key>
<true/>
<key>aps-environment</key>
<string>production</string>
<key>com.apple.application-identifier</key>
<string>com.apple.Safari</string>
<key>com.apple.developer.icloud-container-environment</key>
<string>Production</string>
<key>com.apple.developer.icloud-services</key>
<array>
<string>CloudKit</string>
</array>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.aps-connection-initiate</key>
<true/>
<key>com.apple.private.cloudkit.masquerade</key>
<true/>
<key>com.apple.private.cloudkit.serviceNameForContainerMap</key>
<dict>
<key>com.apple.SafariShared.CloudTabs</key>
<string>com.apple.SafariShared.CloudTabs</string>
</dict>
<key>com.apple.private.cloudkit.systemService</key>
<true/>
<key>com.apple.private.security.container-required</key>
<string>com.apple.mobilesafari</string>
<key>com.apple.private.security.storage.Safari</key>
<true/>
<key>com.apple.private.tcc.allow</key>
<array>
<string>kTCCServiceLiverpool</string>
</array>
<key>com.apple.security.exception.shared-preference.read-write</key>
<array>
<string>com.apple.mobilesafarishared</string>
</array>
<key>platform-application</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>SafariBookmarksSyncAgent</string>
</array>
</dict>
</plist>
