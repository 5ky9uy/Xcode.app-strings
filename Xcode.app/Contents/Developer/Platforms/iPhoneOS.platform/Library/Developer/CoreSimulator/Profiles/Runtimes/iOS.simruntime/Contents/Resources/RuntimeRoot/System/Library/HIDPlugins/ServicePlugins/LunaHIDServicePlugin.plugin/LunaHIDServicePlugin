v8@?0
com.apple.gamecontroller
com.apple.GameController.HID
<%@ %lu (%@), i=%f s=%f (started at %f)>
transient
continuous
type
identifier
stopped
startTime
intensity
sharpness
_index
_name
_features
_frequency
_amplitude
GCHapticMotor - %@(%d) f=%f a=%f
Luna
ProductID
VendorID
v48@?0@"HIDDevice"8Q16q24q32@"NSData"40
LunaHIDServicePlugin
com.apple.GameController.gamecontrollerd.driver
com.apple.gamecontroller.serviceplugin
Transport
isVirtual
Bluetooth
BluetoothLowEnergy
SerialNumber
GCGamepadHIDServicePlugin
BatteryCapacity
IsPowerSupplyConnected
ServicePluginDebug
PluginName
cancelHandler
dispatchQueue
activated
clientAdded
GameControllerPointer
EventType
IOService
ReportDescriptor
PhysicalDeviceUniqueID
Product
GameControllerType
 - will disconnect if permitted
GCGameIntentServiceClientInterface
GCGameIntentServiceServerInterface
_GCHapticEvent
NSSecureCoding
NSCoding
GCNintendoJoyConFusionGestureServiceClientInterface
GCNintendoJoyConFusionGestureServiceServerInterface
GCHapticMotor
NSCopying
LunaHIDServicePlugin
HIDServicePlugin
NSObject
GCAdaptiveTriggersServiceClientInterface
GCAdaptiveTriggersServiceServerInterface
_GCDriverClientInterface
_GCDriverClientHapticInterface
_GCDriverServerInterface
GCGamepadHIDServicePlugin
GCBatteryServiceServerInterface
GCHIDXPCInterface
GCMotionServiceClientInterface
GCMotionServiceServerInterface
GCLightServiceClientInterface
GCLightServiceServerInterface
GCBatteryServiceClientInterface
_client
T#,R
dealloc
T@"HIDConnection",W,N,V_client
fetchDeviceRegistryIDWithReply:
T@"HIDUserDevice",R,N,V_batteryUserDevice
isProxy
T@"NSMutableArray",&,N,V_queuedTransients
numberWithBool:
T@"NSString",R,C
release
T@"NSString",R,N,V_uniqueIdentifier
stopped
TB,N,V_transientBeganAsContinuousEvent
updateIdleState
TB,R,N,GisBluetoothClassic,V_bluetoothClassic
TB,R,N,GisUSB,V_usb
.cxx_destruct
_device
T@"<HIDEventDispatcher>",W,N,V_dispatcher
eventID
T@"HIDDevice",R,N,V_device
isHapticsActive
T@"NSArray",&,N,V_hapticMotors
isVirtualDevice
T@"NSObject<OS_dispatch_queue>",R,N,V_dispatchQueue
propertyForKey:
T@"NSString",R,C,N,V_name
service
TB,N,V_stopped
transientBeganAsContinuousEvent
TB,R
uppercaseString
TB,R,N,GisBluetoothLE,V_bluetoothLE
valueForNoteParam:inParameters:
TB,R,N,GisVirtualDevice,V_virtualDevice
TI,R,N,V_service
TQ,N,V_identifier
TQ,R
TQ,R,N,V_features
TQ,R,N,V_lastEventTime
T^{?=CCC},R,N,V_batteryReport
Td,N,V_intensity
Td,N,V_sharpness
Td,N,V_startTime
Tf,N,V_amplitude
Tf,N,V_frequency
Tf,N,V_hapticDispatchFrequency
Tf,N,V_idleTimeoutDuration
Tf,N,V_leftThumbstickAxisSnapRadius
Tf,N,V_leftThumbstickDeadzoneRadius
Tf,N,V_leftThumbstickNoiseBuffer
Tf,N,V_rightThumbstickAxisSnapRadius
Tf,N,V_rightThumbstickDeadzoneRadius
Tf,N,V_rightThumbstickNoiseBuffer
Ti,R,N,V_index
Tq,N,V_type
_activated
_amplitude
_batteryClient
_batteryReport
_batteryUserDevice
_bluetoothClassic
_bluetoothLE
_buttonHome
_buttonMenu
_buttonOptions
_buttonShare
_cancelHandler
_clientAdded
_currentHapticClipTime
_currentHapticDispatchTime
_daemonConnection
_dispatchQueue
_dispatcher
_features
_frequency
_gameControllerExtendedState
_gameControllerState
_hapticDispatchFrequency
_hapticDispatchSource
_hapticMotors
_hapticsActive
_identifier
_idleDispatchSource
_idleTimeoutDuration
_index
_intensity
_internalQueue
_lastEventTime
_leftThumbstickAxisSnapRadius
_leftThumbstickDeadzoneRadius
_leftThumbstickNoiseBuffer
_loopHapticEvent
_motionSequenceNumber
_motionState
_name
_pendingHapticZeroReports
_prop
_queuedTransients
_regID
_rightThumbstickAxisSnapRadius
_rightThumbstickDeadzoneRadius
_rightThumbstickNoiseBuffer
_service
_session
_sharpness
_startTime
_stopped
_transientBeganAsContinuousEvent
_type
_uniqueIdentifier
_usb
_virtualDevice
activate
addObject:
allocWithZone:
amplitude
appendString:
applyDeadzone:axisSnapRadius:input:
applyValuesFrom:
array
autorelease
batteryReport
batteryUserDevice
bluetoothClassic
bluetoothLE
boolForKey:
boolValue
bytes
cStringUsingEncoding:
cancel
class
client
clientNotification:added:
close
conformsToProtocol:
connectToAdaptiveTriggersServiceWithClient:reply:
connectToBatteryServiceWithClient:reply:
connectToGameIntentServiceWithClient:reply:
connectToGenericDeviceDriverConfigurationServiceWithClient:reply:
connectToLightServiceWithClient:reply:
connectToMotionServiceWithClient:reply:
connectToNintendoJoyConFusionGestureServiceWithClient:reply:
copyWithZone:
count
countByEnumeratingWithState:objects:count:
createEvent:timestamp:
createHIDDeviceForService:
createVirtualHIDDeviceForBattery
dataWithBytes:length:
dataWithBytesNoCopy:length:freeWhenDone:
debugDescription
decodeBoolForKey:
decodeDoubleForKey:
decodeFloatForKey:
decodeIntegerForKey:
decodeObjectOfClass:forKey:
defaultHapticDispatchFrequency
defaultHapticMotors
defaultIdleTimeoutDuration
defaultLeftAxisSnapRadius
defaultLeftThumbstickDeadzoneRadius
defaultLeftThumbstickNoiseBuffer
defaultRightAxisSnapRadius
defaultRightThumbstickDeadzoneRadius
defaultRightThumbstickNoiseBuffer
description
device
dictionary
disconnect
dispatchEvent:
dispatchEvent:updateLastEventTime:
dispatchGameControllerExtendedEventWithState:timestamp:
dispatchHapticEvent
dispatchHomeButtonEventWithValue:timestamp:
dispatchMenuButtonEventWithValue:timestamp:
dispatchMotionEventWithState:timestamp:
dispatchOptionsButtonEventWithValue:timestamp:
dispatchQueue
dispatchShareButtonEventWithValue:timestamp:
dispatcher
drainQueuedTransients
driverCheckIn
enableHaptics
encodeBool:forKey:
encodeDouble:forKey:
encodeFloat:forKey:
encodeInteger:forKey:
encodeObject:forKey:
encodeWithCoder:
enqueueHapticTransientEvent:
enqueueTransient:hapticMotor:
evaluateDeviceNoteParams:
eventMatching:forClient:
features
frequency
handleReport:error:
hapticDispatchFrequency
hapticMotors
hash
homeButtonLongPressGesture:
identifier
idleTimeoutDuration
index
init
initGameControllerDaemonXPC
initWithBool:
initWithCoder:
initWithIndex:
initWithIndex:name:
initWithIndex:name:features:
initWithIndex:name:features:frequency:amplitude:
initWithInt:
initWithMachServiceName:options:
initWithProperties:
initWithService:
initWithSuiteName:
initWithSyntheticCommand:
initWithType:timestamp:senderID:
intValue
intensity
interfaceWithProtocol:
invalidate
isAnyHapticMotorEnabled
isBluetoothClassic
isBluetoothLE
isEqual:
isEqualToString:
isIdle
isKindOfClass:
isMemberOfClass:
isTwoAxisInputIdle:prevInput:noiseBuffer:
isUSB
lastEventTime
leftThumbstickAxisSnapRadius
leftThumbstickDeadzoneRadius
leftThumbstickNoiseBuffer
length
matchService:options:score:
name
numberOfTimesToSendZeroHapticReport
numberWithUnsignedLongLong:
objectAtIndex:
objectForKeyedSubscript:
open
params
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
ping
propertyForKey:client:
queuedTransients
readAdaptiveTriggerStatusWithReply:
readBatteryWithReply:
readLightWithReply:
readSensorsActiveWithReply:
remoteObjectProxy
removeAllObjects
requestServiceWithReply:
respondsToSelector:
resume
retain
retainCount
rightThumbstickAxisSnapRadius
rightThumbstickDeadzoneRadius
rightThumbstickNoiseBuffer
scheduleIdleTimer
self
sendBatteryReport
setAdaptiveTriggerModeFeedbackWithResistiveStrengths:forIndex:
setAdaptiveTriggerModeFeedbackWithStartPosition:resistiveStrength:forIndex:
setAdaptiveTriggerModeOffForIndex:
setAdaptiveTriggerModeSlopeFeedbackWithStartPosition:endPosition:startStrength:endStrength:forIndex:
setAdaptiveTriggerModeVibrationWithAmplitudes:frequency:forIndex:
setAdaptiveTriggerModeVibrationWithStartPosition:amplitude:frequency:forIndex:
setAdaptiveTriggerModeWeaponWithStartPosition:endPosition:resistiveStrength:forIndex:
setAmplitude:
setCancelHandler:
setClient:
setDispatchQueue:
setDispatcher:
setDoubleValue:forField:
setEnableGlobalGameControllerFunctionality:
setEventDispatcher:
setExportedInterface:
setExportedObject:
setFrequency:
setHapticDispatchFrequency:
setHapticMotor:frequency:amplitude:
setHapticMotors:
setIdentifier:
setIdleTimeoutDuration:
setInputReportHandler:
setIntegerValue:forField:
setIntensity:
setInterface:forSelector:argumentIndex:ofReply:
setInterruptionHandler:
setInvalidationHandler:
setLeftThumbstickAxisSnapRadius:
setLeftThumbstickDeadzoneRadius:
setLeftThumbstickNoiseBuffer:
setObject:forKeyedSubscript:
setProperty:forKey:
setProperty:forKey:client:
setQueuedTransients:
setRemoteObjectInterface:
setRightThumbstickAxisSnapRadius:
setRightThumbstickDeadzoneRadius:
setRightThumbstickNoiseBuffer:
setSharpness:
setStartTime:
setStopped:
setTransientBeganAsContinuousEvent:
setType:
setupRawReportHandling
sharpness
shouldCreateBatteryDevice
shouldDisconnectWhenIdle
startTime
stopHaptics
stringWithCString:encoding:
stringWithCapacity:
stringWithFormat:
stringWithString:
superclass
supportsSecureCoding
time
timestamp
token
tokenAndParams
triggerGameIntentWithEvent:
type
uniqueIdentifier
unsignedIntValue
updateAdaptiveTriggerStatusWithLeftMode:leftStatus:leftArmPosition:rightMode:rightStatus:rightArmPosition:
updateBattery:isCharging:
updateClientBattery
updateHapticMotor:
updateHaptics:
updateLightWithRed:green:blue:
updateSensorsActive:
value
virtualDevice
zone
v24@0:8q16
v20@0:8B16
{pair<bool, float>=Bf}28@0:8I16@20
v24@0:8@16
@24@0:8@16
@16@0:8
Q16@0:8
v24@0:8Q16
q16@0:8
d16@0:8
v24@0:8d16
B16@0:8
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@24@0:8^{_NSZone=}16
@44@0:8i16@20Q28f36f40
@36@0:8i16@20Q28
@28@0:8i16@20
@20@0:8i16
v16@0:8
i16@0:8
f16@0:8
v20@0:8f16
@"NSString"
@"NSMutableArray"
B36@0:8I16@20^q28
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@20@0:8I16
@32@0:8@16@24
B40@0:8@16@24@32
v24@0:8@?16
v28@0:8@16B24
@32@0:8@"NSString"16@"HIDConnection"24
B40@0:8@16@"NSString"24@"HIDConnection"32
@"HIDEvent"32@0:8@"NSDictionary"16@"HIDConnection"24
v24@0:8@"<HIDEventDispatcher>"16
v24@0:8@?<v@?>16
B36@0:8I16@"NSDictionary"20^q28
v24@0:8@"NSObject<OS_dispatch_queue>"16
v28@0:8@"HIDConnection"16B24
v40@0:8C16C20C24C28C32C36
v36@0:8f16f20f24f28i32
v28@0:8f16f20i24
v28@0:8@16i24
v32@0:8f16f20f24i28
v32@0:8@16f24i28
v20@0:8i16
v28@0:8@"NSArray"16i24
v32@0:8@"NSArray"16f24i28
v24@0:8@?<v@?CCCCCC>16
v32@0:8Q16f24f28
v32@0:8@16Q24
v32@0:8@"_GCHapticEvent"16Q24
v32@0:8@16@?24
v24@0:8@?<v@?@"NSNumber"q>16
v32@0:8@"<GCLightServiceClientInterface>"16@?<v@?@"<GCLightServiceServerInterface>"@"NSError">24
v32@0:8@"<GCAdaptiveTriggersServiceClientInterface>"16@?<v@?@"<GCAdaptiveTriggersServiceServerInterface>"@"NSError">24
v32@0:8@"<GCMotionServiceClientInterface>"16@?<v@?@"<GCMotionServiceServerInterface>"@"NSError">24
v32@0:8@"<GCBatteryServiceClientInterface>"16@?<v@?@"<GCBatteryServiceServerInterface>"@"NSError">24
v32@0:8@"<GCNintendoJoyConFusionGestureServiceClientInterface>"16@?<v@?@"<GCNintendoJoyConFusionGestureServiceServerInterface>"@"NSError">24
v32@0:8@"<GCGameIntentServiceClientInterface>"16@?<v@?@"<GCGameIntentServiceServerInterface>"@"NSError">24
v32@0:8@"<GCGenericDeviceDriverConfigurationServiceClientInterface>"16@?<v@?@"<GCGenericDeviceDriverConfigurationServiceServerInterface>"@"NSError">24
v24@0:8@?<v@?CB>16
v24@0:8@?<v@?@"NSNumber">16
@28@0:8I16Q20
v32@0:8f16f20^24
B36@0:8^16^24f32
v128@0:8{?=BdddBdddBdddd}16Q120
v216@0:8{?=Q[45f]}16Q208
v28@0:8B16Q20
I16@0:8
^{?=CCC}16@0:8
@"NSNumber"
@"NSObject<OS_dispatch_source>"
^{BTSessionImpl=}
{?="directionPadUp"d"directionPadDown"d"directionPadLeft"d"directionPadRight"d"buttonA"d"buttonB"d"buttonX"d"buttonY"d"buttonL1"d"buttonR1"d"buttonL2"d"buttonR2"d"leftThumbstick""rightThumbstick""buttonL3"B"buttonR3"B"controllerType"I}
{?="mask"Q"buttons"[45f]}
{?="supportsGyro"B"gyroPitch"d"gyroYaw"d"gyroRoll"d"supportsAccelerometer"B"accelerometerX"d"accelerometerY"d"accelerometerZ"d"supportsAttitude"B"attitudeX"d"attitudeY"d"attitudeZ"d"attitudeW"d}
{timespec="tv_sec"q"tv_nsec"q}
@"NSXPCConnection"
@"<GCBatteryServiceClientInterface>"
@"NSObject<OS_dispatch_queue>"
@"HIDConnection"
@"<HIDEventDispatcher>"
@"HIDDevice"
@"HIDUserDevice"
^{?=CCC}
@"NSArray"
v24@0:8@?<v@?B>16
v28@0:8f16f20f24
v24@0:8@?<v@?fff>16
v24@0:8C16B20
D(knN
setupRawReportHandling
Connect To Daemon
Connection to com.apple.GameController.gamecontrollerd.driver invalidated
Connection to com.apple.GameController.gamecontrollerd.driver interrupted.  Attempting to re-establish.
initWithService: %d
creating HIDDevice for service %d
opening HIDDevice
registering for BTSessionCallbacks sessionEvent
dealloc
Freeing HIDDevice on %@
PropertyForKey: %@
setProperty: %@ forKey: %@
eventMatching: %@ client: %@
setEventDispatcher %@
setCancelHandler %p
calling cancel handler
activate
cancel
setDispatchQueue %p
clientNotification %@ added: %d
GCHIDLog::disconnect: unable to get BTDevice; no valid BTSession
GCHIDLog::disconnect: SUCCESS
GCHIDLog::disconnect: error code = %d
GCHIDLog::disconnect: unable to get BTDevice; error code = %d
GCHIDLog::disconnect: unable to get device address from %s; errCode = %d
creating battery device
created battery device %@ with properties %@
updateClientBattery reporting battery level %d%%
updateBatteryStats reporting battery level %d%%
scheduleIdleTimer
disconnectIfIdle disconnecting...
isIdle for %.2f seconds%@
Stopping timer...
Dispatching event...
ping
requestServiceWithReply
connectToBatteryServiceWithClient %@
BTSessionEventCallback: attached session = %p
BTSessionEventCallback: detached session = %p
BTSessionEventCallback: terminated session = %p
BTSessionEventCallback: failed session = %p
v8@?0
com.apple.gamecontroller
com.apple.GameController.HID
<%@ %lu (%@), i=%f s=%f (started at %f)>
transient
continuous
type
identifier
stopped
startTime
intensity
sharpness
_index
_name
_features
_frequency
_amplitude
GCHapticMotor - %@(%d) f=%f a=%f
Luna
ProductID
VendorID
v48@?0@"HIDDevice"8Q16q24q32@"NSData"40
LunaHIDServicePlugin
com.apple.GameController.gamecontrollerd.driver
com.apple.gamecontroller.serviceplugin
Transport
isVirtual
Bluetooth
BluetoothLowEnergy
SerialNumber
GCGamepadHIDServicePlugin
BatteryCapacity
IsPowerSupplyConnected
ServicePluginDebug
PluginName
cancelHandler
dispatchQueue
activated
clientAdded
GameControllerPointer
EventType
IOService
ReportDescriptor
PhysicalDeviceUniqueID
Product
GameControllerType
 - will disconnect if permitted
GCGameIntentServiceClientInterface
GCGameIntentServiceServerInterface
_GCHapticEvent
NSSecureCoding
NSCoding
GCNintendoJoyConFusionGestureServiceClientInterface
GCNintendoJoyConFusionGestureServiceServerInterface
GCHapticMotor
NSCopying
LunaHIDServicePlugin
HIDServicePlugin
NSObject
GCAdaptiveTriggersServiceClientInterface
GCAdaptiveTriggersServiceServerInterface
_GCDriverClientInterface
_GCDriverClientHapticInterface
_GCDriverServerInterface
GCGamepadHIDServicePlugin
GCBatteryServiceServerInterface
GCHIDXPCInterface
GCMotionServiceClientInterface
GCMotionServiceServerInterface
GCLightServiceClientInterface
GCLightServiceServerInterface
GCBatteryServiceClientInterface
_client
T#,R
dealloc
T@"HIDConnection",W,N,V_client
fetchDeviceRegistryIDWithReply:
T@"HIDUserDevice",R,N,V_batteryUserDevice
isProxy
T@"NSMutableArray",&,N,V_queuedTransients
numberWithBool:
T@"NSString",R,C
release
T@"NSString",R,N,V_uniqueIdentifier
stopped
TB,N,V_transientBeganAsContinuousEvent
updateIdleState
TB,R,N,GisBluetoothClassic,V_bluetoothClassic
valueForNoteParam:inParameters:
.cxx_destruct
_device
T@"<HIDEventDispatcher>",W,N,V_dispatcher
eventID
T@"HIDDevice",R,N,V_device
isHapticsActive
T@"NSArray",&,N,V_hapticMotors
isVirtualDevice
T@"NSObject<OS_dispatch_queue>",R,N,V_dispatchQueue
propertyForKey:
T@"NSString",R,C,N,V_name
service
TB,N,V_stopped
transientBeganAsContinuousEvent
TB,R
TB,R,N,GisBluetoothLE,V_bluetoothLE
TB,R,N,GisUSB,V_usb
TB,R,N,GisVirtualDevice,V_virtualDevice
TI,R,N,V_service
TQ,N,V_identifier
TQ,R
TQ,R,N,V_features
TQ,R,N,V_lastEventTime
T^{?=CCC},R,N,V_batteryReport
Td,N,V_intensity
Td,N,V_sharpness
Td,N,V_startTime
Tf,N,V_amplitude
Tf,N,V_frequency
Tf,N,V_hapticDispatchFrequency
Tf,N,V_idleTimeoutDuration
Tf,N,V_leftThumbstickAxisSnapRadius
Tf,N,V_leftThumbstickDeadzoneRadius
Tf,N,V_leftThumbstickNoiseBuffer
Tf,N,V_rightThumbstickAxisSnapRadius
Tf,N,V_rightThumbstickDeadzoneRadius
Tf,N,V_rightThumbstickNoiseBuffer
Ti,R,N,V_index
Tq,N,V_type
_activated
_amplitude
_batteryClient
_batteryReport
_batteryUserDevice
_bluetoothClassic
_bluetoothLE
_buttonHome
_buttonMenu
_buttonOptions
_buttonShare
_cancelHandler
_clientAdded
_currentHapticClipTime
_currentHapticDispatchTime
_daemonConnection
_dispatchQueue
_dispatcher
_features
_frequency
_gameControllerExtendedState
_gameControllerState
_hapticDispatchFrequency
_hapticDispatchSource
_hapticMotors
_hapticsActive
_identifier
_idleDispatchSource
_idleTimeoutDuration
_index
_intensity
_internalQueue
_lastEventTime
_leftThumbstickAxisSnapRadius
_leftThumbstickDeadzoneRadius
_leftThumbstickNoiseBuffer
_loopHapticEvent
_motionSequenceNumber
_motionState
_name
_pendingHapticZeroReports
_prop
_queuedTransients
_regID
_rightThumbstickAxisSnapRadius
_rightThumbstickDeadzoneRadius
_rightThumbstickNoiseBuffer
_service
_session
_sharpness
_startTime
_stopped
_transientBeganAsContinuousEvent
_type
_uniqueIdentifier
_usb
_virtualDevice
activate
addObject:
allocWithZone:
amplitude
applyDeadzone:axisSnapRadius:input:
applyValuesFrom:
array
autorelease
batteryReport
batteryUserDevice
bluetoothClassic
bluetoothLE
boolValue
bytes
cStringUsingEncoding:
cancel
class
client
clientNotification:added:
close
conformsToProtocol:
connectToAdaptiveTriggersServiceWithClient:reply:
connectToBatteryServiceWithClient:reply:
connectToGameIntentServiceWithClient:reply:
connectToGenericDeviceDriverConfigurationServiceWithClient:reply:
connectToLightServiceWithClient:reply:
connectToMotionServiceWithClient:reply:
connectToNintendoJoyConFusionGestureServiceWithClient:reply:
copyWithZone:
count
countByEnumeratingWithState:objects:count:
createEvent:timestamp:
createHIDDeviceForService:
createVirtualHIDDeviceForBattery
dataWithBytes:length:
dataWithBytesNoCopy:length:freeWhenDone:
debugDescription
decodeBoolForKey:
decodeDoubleForKey:
decodeFloatForKey:
decodeIntegerForKey:
decodeObjectOfClass:forKey:
defaultHapticDispatchFrequency
defaultHapticMotors
defaultIdleTimeoutDuration
defaultLeftAxisSnapRadius
defaultLeftThumbstickDeadzoneRadius
defaultLeftThumbstickNoiseBuffer
defaultRightAxisSnapRadius
defaultRightThumbstickDeadzoneRadius
defaultRightThumbstickNoiseBuffer
description
device
dictionary
disconnect
dispatchEvent:
dispatchEvent:updateLastEventTime:
dispatchGameControllerExtendedEventWithState:timestamp:
dispatchHapticEvent
dispatchHomeButtonEventWithValue:timestamp:
dispatchMenuButtonEventWithValue:timestamp:
dispatchMotionEventWithState:timestamp:
dispatchOptionsButtonEventWithValue:timestamp:
dispatchQueue
dispatchShareButtonEventWithValue:timestamp:
dispatcher
drainQueuedTransients
driverCheckIn
enableHaptics
encodeBool:forKey:
encodeDouble:forKey:
encodeFloat:forKey:
encodeInteger:forKey:
encodeObject:forKey:
encodeWithCoder:
enqueueHapticTransientEvent:
enqueueTransient:hapticMotor:
evaluateDeviceNoteParams:
eventMatching:forClient:
features
frequency
handleReport:error:
hapticDispatchFrequency
hapticMotors
hash
homeButtonLongPressGesture:
identifier
idleTimeoutDuration
index
init
initGameControllerDaemonXPC
initWithBool:
initWithCoder:
initWithIndex:
initWithIndex:name:
initWithIndex:name:features:
initWithIndex:name:features:frequency:amplitude:
initWithInt:
initWithMachServiceName:options:
initWithProperties:
initWithService:
initWithSyntheticCommand:
initWithType:timestamp:senderID:
intValue
intensity
interfaceWithProtocol:
invalidate
isAnyHapticMotorEnabled
isBluetoothClassic
isBluetoothLE
isEqual:
isEqualToString:
isIdle
isKindOfClass:
isMemberOfClass:
isTwoAxisInputIdle:prevInput:noiseBuffer:
isUSB
lastEventTime
leftThumbstickAxisSnapRadius
leftThumbstickDeadzoneRadius
leftThumbstickNoiseBuffer
length
matchService:options:score:
name
numberOfTimesToSendZeroHapticReport
numberWithUnsignedLongLong:
objectAtIndex:
objectForKeyedSubscript:
open
params
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
ping
propertyForKey:client:
queuedTransients
readAdaptiveTriggerStatusWithReply:
readBatteryWithReply:
readLightWithReply:
readSensorsActiveWithReply:
remoteObjectProxy
removeAllObjects
requestServiceWithReply:
respondsToSelector:
resume
retain
retainCount
rightThumbstickAxisSnapRadius
rightThumbstickDeadzoneRadius
rightThumbstickNoiseBuffer
scheduleIdleTimer
self
sendBatteryReport
setAdaptiveTriggerModeFeedbackWithResistiveStrengths:forIndex:
setAdaptiveTriggerModeFeedbackWithStartPosition:resistiveStrength:forIndex:
setAdaptiveTriggerModeOffForIndex:
setAdaptiveTriggerModeSlopeFeedbackWithStartPosition:endPosition:startStrength:endStrength:forIndex:
setAdaptiveTriggerModeVibrationWithAmplitudes:frequency:forIndex:
setAdaptiveTriggerModeVibrationWithStartPosition:amplitude:frequency:forIndex:
setAdaptiveTriggerModeWeaponWithStartPosition:endPosition:resistiveStrength:forIndex:
setAmplitude:
setCancelHandler:
setClient:
setDispatchQueue:
setDispatcher:
setDoubleValue:forField:
setEnableGlobalGameControllerFunctionality:
setEventDispatcher:
setExportedInterface:
setExportedObject:
setFrequency:
setHapticDispatchFrequency:
setHapticMotor:frequency:amplitude:
setHapticMotors:
setIdentifier:
setIdleTimeoutDuration:
setInputReportHandler:
setIntegerValue:forField:
setIntensity:
setInterface:forSelector:argumentIndex:ofReply:
setInterruptionHandler:
setInvalidationHandler:
setLeftThumbstickAxisSnapRadius:
setLeftThumbstickDeadzoneRadius:
setLeftThumbstickNoiseBuffer:
setObject:forKeyedSubscript:
setProperty:forKey:
setProperty:forKey:client:
setQueuedTransients:
setRemoteObjectInterface:
setRightThumbstickAxisSnapRadius:
setRightThumbstickDeadzoneRadius:
setRightThumbstickNoiseBuffer:
setSharpness:
setStartTime:
setStopped:
setTransientBeganAsContinuousEvent:
setType:
setupRawReportHandling
sharpness
shouldCreateBatteryDevice
shouldDisconnectWhenIdle
startTime
stopHaptics
stringWithCString:encoding:
stringWithFormat:
superclass
supportsSecureCoding
time
timestamp
token
tokenAndParams
triggerGameIntentWithEvent:
type
uniqueIdentifier
unsignedIntValue
updateAdaptiveTriggerStatusWithLeftMode:leftStatus:leftArmPosition:rightMode:rightStatus:rightArmPosition:
updateBattery:isCharging:
updateClientBattery
updateHapticMotor:
updateHaptics:
updateLightWithRed:green:blue:
updateSensorsActive:
value
virtualDevice
zone
v24@0:8q16
v20@0:8B16
{pair<bool, float>=Bf}28@0:8I16@20
v24@0:8@16
@24@0:8@16
@16@0:8
Q16@0:8
v24@0:8Q16
q16@0:8
d16@0:8
v24@0:8d16
B16@0:8
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@24@0:8^{_NSZone=}16
@44@0:8i16@20Q28f36f40
@36@0:8i16@20Q28
@28@0:8i16@20
@20@0:8i16
v16@0:8
i16@0:8
f16@0:8
v20@0:8f16
@"NSString"
@"NSMutableArray"
B36@0:8I16@20^q28
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
@20@0:8I16
@32@0:8@16@24
B40@0:8@16@24@32
v24@0:8@?16
v28@0:8@16B24
@32@0:8@"NSString"16@"HIDConnection"24
B40@0:8@16@"NSString"24@"HIDConnection"32
@"HIDEvent"32@0:8@"NSDictionary"16@"HIDConnection"24
v24@0:8@"<HIDEventDispatcher>"16
v24@0:8@?<v@?>16
B36@0:8I16@"NSDictionary"20^q28
v24@0:8@"NSObject<OS_dispatch_queue>"16
v28@0:8@"HIDConnection"16B24
v40@0:8C16C20C24C28C32C36
v36@0:8f16f20f24f28i32
v28@0:8f16f20i24
v28@0:8@16i24
v32@0:8f16f20f24i28
v32@0:8@16f24i28
v20@0:8i16
v28@0:8@"NSArray"16i24
v32@0:8@"NSArray"16f24i28
v24@0:8@?<v@?CCCCCC>16
v32@0:8Q16f24f28
v32@0:8@16Q24
v32@0:8@"_GCHapticEvent"16Q24
v32@0:8@16@?24
v24@0:8@?<v@?@"NSNumber"q>16
v32@0:8@"<GCLightServiceClientInterface>"16@?<v@?@"<GCLightServiceServerInterface>"@"NSError">24
v32@0:8@"<GCAdaptiveTriggersServiceClientInterface>"16@?<v@?@"<GCAdaptiveTriggersServiceServerInterface>"@"NSError">24
v32@0:8@"<GCMotionServiceClientInterface>"16@?<v@?@"<GCMotionServiceServerInterface>"@"NSError">24
v32@0:8@"<GCBatteryServiceClientInterface>"16@?<v@?@"<GCBatteryServiceServerInterface>"@"NSError">24
v32@0:8@"<GCNintendoJoyConFusionGestureServiceClientInterface>"16@?<v@?@"<GCNintendoJoyConFusionGestureServiceServerInterface>"@"NSError">24
v32@0:8@"<GCGameIntentServiceClientInterface>"16@?<v@?@"<GCGameIntentServiceServerInterface>"@"NSError">24
v32@0:8@"<GCGenericDeviceDriverConfigurationServiceClientInterface>"16@?<v@?@"<GCGenericDeviceDriverConfigurationServiceServerInterface>"@"NSError">24
v24@0:8@?<v@?CB>16
v24@0:8@?<v@?@"NSNumber">16
@28@0:8I16Q20
v32@0:8f16f20^24
B36@0:8^16^24f32
v128@0:8{?=BdddBdddBdddd}16Q120
v216@0:8{?=Q[45f]}16Q208
v28@0:8B16Q20
I16@0:8
^{?=CCC}16@0:8
@"NSNumber"
@"NSObject<OS_dispatch_source>"
^{BTSessionImpl=}
{?="directionPadUp"d"directionPadDown"d"directionPadLeft"d"directionPadRight"d"buttonA"d"buttonB"d"buttonX"d"buttonY"d"buttonL1"d"buttonR1"d"buttonL2"d"buttonR2"d"leftThumbstick""rightThumbstick""buttonL3"B"buttonR3"B"controllerType"I}
{?="mask"Q"buttons"[45f]}
{?="supportsGyro"B"gyroPitch"d"gyroYaw"d"gyroRoll"d"supportsAccelerometer"B"accelerometerX"d"accelerometerY"d"accelerometerZ"d"supportsAttitude"B"attitudeX"d"attitudeY"d"attitudeZ"d"attitudeW"d}
{timespec="tv_sec"q"tv_nsec"q}
@"NSXPCConnection"
@"<GCBatteryServiceClientInterface>"
@"NSObject<OS_dispatch_queue>"
@"HIDConnection"
@"<HIDEventDispatcher>"
@"HIDDevice"
@"HIDUserDevice"
^{?=CCC}
@"NSArray"
v24@0:8@?<v@?B>16
v28@0:8f16f20f24
v24@0:8@?<v@?fff>16
v24@0:8C16B20
>(knN
setupRawReportHandling
Connect To Daemon
Connection to com.apple.GameController.gamecontrollerd.driver invalidated
Connection to com.apple.GameController.gamecontrollerd.driver interrupted.  Attempting to re-establish.
initWithService: %d
creating HIDDevice for service %d
opening HIDDevice
registering for BTSessionCallbacks sessionEvent
dealloc
Freeing HIDDevice on %@
PropertyForKey: %@
setProperty: %@ forKey: %@
eventMatching: %@ client: %@
setEventDispatcher %@
setCancelHandler %p
calling cancel handler
activate
cancel
setDispatchQueue %p
clientNotification %@ added: %d
GCHIDLog::disconnect: unable to get BTDevice; no valid BTSession
GCHIDLog::disconnect: SUCCESS
GCHIDLog::disconnect: error code = %d
GCHIDLog::disconnect: unable to get BTDevice; error code = %d
GCHIDLog::disconnect: unable to get device address from %s; errCode = %d
creating battery device
created battery device %@ with properties %@
updateClientBattery reporting battery level %d%%
updateBatteryStats reporting battery level %d%%
scheduleIdleTimer
disconnectIfIdle disconnecting...
isIdle for %.2f seconds%@
Stopping timer...
Dispatching event...
ping
requestServiceWithReply
connectToBatteryServiceWithClient %@
BTSessionEventCallback: attached session = %p
BTSessionEventCallback: detached session = %p
BTSessionEventCallback: terminated session = %p
BTSessionEventCallback: failed session = %p
