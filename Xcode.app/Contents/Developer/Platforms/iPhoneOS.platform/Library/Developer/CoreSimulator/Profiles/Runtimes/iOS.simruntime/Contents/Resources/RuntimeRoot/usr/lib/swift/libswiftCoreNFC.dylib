/Library/Caches/com.apple.xbs/Sources/swiftlang_overlay_CoreNFC_Sim/swiftlang-1103.2.25.7/swift/stdlib/public/Darwin/CoreNFC/NFCTag.swift
Fatal error
Unsupported type
v16@?0@"NSError"8
_TtC7CoreNFC39NFCTagReaderSessionDelegateSwiftWrapper
v24@0:8@16
v32@0:8@16@24
@16@0:8
v16@0:8
swiftDelegate
CoreNFC.NFCTagReaderSessionDelegateSwiftWrapper
init()
NFCFeliCaTag
v48@0:8@16q24q32@?40
v32@0:8@16@?24
v24@0:8@?16
v40@0:8@16@24@?32
v48@0:8@16@24@32@?40
currentSystemCode
T@"NSData",N,R
currentIDm
@"NSData"16@0:8
v48@0:8@"NSData"16q24q32@?<v@?@"NSData"@"NSData"@"NSError">40
v32@0:8@"NSArray"16@?<v@?@"NSArray"@"NSError">24
v24@0:8@?<v@?q@"NSError">16
v40@0:8@"NSArray"16@"NSArray"24@?<v@?qq@"NSArray"@"NSError">32
v48@0:8@"NSArray"16@"NSArray"24@"NSArray"32@?<v@?qq@"NSError">40
v24@0:8@?<v@?@"NSArray"@"NSError">16
v32@0:8@"NSArray"16@?<v@?qqq@"NSArray"@"NSArray"@"NSError">24
v24@0:8@?<v@?qq@"NSData"@"NSData"@"NSError">16
v24@0:8@?<v@?qq@"NSError">16
v32@0:8@"NSData"16@?<v@?@"NSData"@"NSError">24
NFCISO7816Tag
B16@0:8
initialSelectedAID
T@"NSString",N,R
identifier
historicalBytes
applicationData
proprietaryApplicationDataCoding
TB,N,R
@"NSString"16@0:8
v32@0:8@"NFCISO7816APDU"16@?<v@?@"NSData"CC@"NSError">24
NFCISO15693Tag
q16@0:8
v32@0:8C16C20@?24
v40@0:8C16C20@24@?32
v44@0:8C16{_NSRange=QQ}20@?36
v52@0:8C16{_NSRange=QQ}20@36@?44
v28@0:8C16@?20
v44@0:8C16q20@28@?36
v36@0:8C16q20@?28
icManufacturerCode
Tq,N,R
icSerialNumber
v32@0:8@"NFCISO15693CustomCommandConfiguration"16@?<v@?@"NSData"@"NSError">24
v32@0:8@"NFCISO15693ReadMultipleBlocksConfiguration"16@?<v@?@"NSData"@"NSError">24
v24@0:8@?<v@?@"NSError">16
v32@0:8C16C20@?<v@?@"NSData"@"NSError">24
v40@0:8C16C20@"NSData"24@?<v@?@"NSError">32
v32@0:8C16C20@?<v@?@"NSError">24
v44@0:8C16{_NSRange=QQ}20@?<v@?@"NSArray"@"NSError">36
v52@0:8C16{_NSRange=QQ}20@"NSArray"36@?<v@?@"NSError">44
v28@0:8C16@?<v@?@"NSError">20
v28@0:8C16@?<v@?qqqqq@"NSError">20
v44@0:8C16q20@"NSData"28@?<v@?@"NSData"@"NSError">36
v36@0:8C16q20@?<v@?@"NSData"@"NSError">28
v44@0:8C16q20@"NSData"28@?<v@?@"NSError">36
v36@0:8C16q20@?<v@?@"NSError">28
NFCMiFareTag
Q16@0:8
mifareFamily
TQ,N,R
NSObject
B24@0:8@16
#16@0:8
^@24@0:8:16
^@32@0:8:16@24
^@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
^v16@0:8
hash
superclass
T#,N,R
description
debugDescription
B24@0:8@"Protocol"16
v32@0:8@"NFCTagReaderSession"16@"NSError"24
v24@0:8@"NFCTagReaderSession"16
v32@0:8@"NFCTagReaderSession"16@"NSArray"24
type
session
T@"<NFCReaderSession>",N,R
available
@"<NFCReaderSession>"16@0:8
@"<NFCISO15693Tag>"16@0:8
@"<NFCISO7816Tag>"16@0:8
@"<NFCFeliCaTag>"16@0:8
@"<NFCMiFareTag>"16@0:8
NFCNDEFTag
v24@0:8@?<v@?Qq@"NSError">16
v24@0:8@?<v@?@"NFCNDEFMessage"@"NSError">16
v32@0:8@"NFCNDEFMessage"16@?<v@?@"NSError">24
NSSecureCoding
supportsSecureCoding
NSCopying
@24@0:8^v16
NSCoding
@24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
CoreNFC
NFCTag
NFCTagReaderSessionDelegate
NFCTagReaderSessionDelegateSwiftWrapper
So12NFCFeliCaTag_p
So13NFCISO7816Tag_p
So14NFCISO15693Tag_p
So12NFCMiFareTag_p
$s7CoreNFC27NFCTagReaderSessionDelegateP
So8NSObjectC
_pSgXw
So6NFCTag_p
feliCa
iso7816
iso15693
miFare
swiftDelegate
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
        <key>CFBundleIdentifier</key>
        <string>com.apple.dt.runtime.swiftCoreNFC</string>
        <key>CFBundleInfoDictionaryVersion</key>
        <string>6.0</string>
        <key>CFBundleName</key>
        <string>swiftCoreNFC</string>
        <key>CFBundleShortVersionString</key>
        <string></string>
        <key>CFBundleVersion</key>
        <string></string>
</dict>
</plist>
wellKnownTypeTextPayloadWithLocale:
isAvailable
connectedTag
asNFCFeliCaTag
asNFCISO15693Tag
asNFCISO7816Tag
asNFCMiFareTag
init
initWithPollingOption:swiftDelegate:queue:
connectToTag:completionHandler:
tagReaderSessionDidBecomeActive:
tagReaderSession:didInvalidateWithError:
tagReaderSession:didDetectTags:
.cxx_destruct
dealloc
currentSystemCode
currentIDm
pollingWithSystemCode:requestCode:timeSlot:completionHandler:
requestServiceWithNodeCodeList:completionHandler:
requestResponseWithCompletionHandler:
readWithoutEncryptionWithServiceCodeList:blockList:completionHandler:
writeWithoutEncryptionWithServiceCodeList:blockList:blockData:completionHandler:
requestSystemCodeWithCompletionHandler:
requestServiceV2WithNodeCodeList:completionHandler:
requestSpecificationVersionWithCompletionHandler:
resetModeWithCompletionHandler:
sendFeliCaCommandPacket:completionHandler:
initialSelectedAID
identifier
historicalBytes
applicationData
proprietaryApplicationDataCoding
sendCommandAPDU:completionHandler:
icManufacturerCode
icSerialNumber
sendCustomCommandWithConfiguration:completionHandler:
readMultipleBlocksWithConfiguration:completionHandler:
stayQuietWithCompletionHandler:
readSingleBlockWithRequestFlags:blockNumber:completionHandler:
writeSingleBlockWithRequestFlags:blockNumber:dataBlock:completionHandler:
lockBlockWithRequestFlags:blockNumber:completionHandler:
readMultipleBlocksWithRequestFlags:blockRange:completionHandler:
writeMultipleBlocksWithRequestFlags:blockRange:dataBlocks:completionHandler:
selectWithRequestFlags:completionHandler:
resetToReadyWithRequestFlags:completionHandler:
writeAFIWithRequestFlag:afi:completionHandler:
lockAFIWithRequestFlag:completionHandler:
writeDSFIDWithRequestFlag:dsfid:completionHandler:
lockDFSIDWithRequestFlag:completionHandler:
getSystemInfoWithRequestFlag:completionHandler:
getMultipleBlockSecurityStatusWithRequestFlag:blockRange:completionHandler:
customCommandWithRequestFlag:customCommandCode:customRequestParameters:completionHandler:
extendedReadSingleBlockWithRequestFlags:blockNumber:completionHandler:
extendedWriteSingleBlockWithRequestFlags:blockNumber:dataBlock:completionHandler:
extendedLockBlockWithRequestFlags:blockNumber:completionHandler:
extendedReadMultipleBlocksWithRequestFlags:blockRange:completionHandler:
mifareFamily
sendMiFareCommand:completionHandler:
sendMiFareISO7816Command:completionHandler:
isEqual:
hash
superclass
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
description
debugDescription
type
session
queryNDEFStatusWithCompletionHandler:
readNDEFWithCompletionHandler:
writeNDEF:completionHandler:
writeLockWithCompletionHandler:
supportsSecureCoding
copyWithZone:
encodeWithCoder:
initWithCoder:
