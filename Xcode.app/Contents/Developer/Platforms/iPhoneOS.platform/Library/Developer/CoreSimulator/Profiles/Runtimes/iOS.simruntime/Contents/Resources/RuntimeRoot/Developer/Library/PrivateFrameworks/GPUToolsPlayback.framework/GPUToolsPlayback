_St11logic_error
St9exception
St9bad_alloc
St20bad_array_new_length
NSt3__111regex_errorE
St13runtime_error
St12out_of_range
NSt3__117bad_function_callE
(knN
St12length_error
basic_string
vector
v24@?0^v8Q16
-[DYMTLFunctionPlayer executePlatformFunction]
_argumentStorePositions[1].size() == 1
baseObject
styleMask
windowLevel
        #include <metal_graphics>
        #include <metal_texture>
        using namespace metal;
    
        fragment vec<float, 4> wireframeCreationFragment()
        {
            return vec<float, 4>(1.0, 1.0, 1.0, 1.0);
        }
    
        kernel void createOutlineTexture(texture2d<half, access::read> solid [[texture(0)]], texture2d<half, access::write> outline [[texture(1)]], uint2 gridPosition [[thread_position_in_grid]])
        {
            uint width = solid.get_width();
            uint height = solid.get_height();
            if (gridPosition.x < width && gridPosition.y < height)
            {
                auto currentColor = solid.read(gridPosition).r;
                outline.write(vec<half, 4>(0.0, 0.0, 0.0, 0.0), gridPosition);
                
                if (abs(currentColor - 0.0) <= 0.0001)
                {
                    auto left = solid.read(uint2(gridPosition.x - 1, gridPosition.y)).r;
                    auto right = solid.read(uint2(gridPosition.x + 1, gridPosition.y)).r;
                    auto up = solid.read(uint2(gridPosition.x, gridPosition.y + 1)).r;
                    auto down = solid.read(uint2(gridPosition.x, gridPosition.y - 1)).r;
                    if (left == 1 || right == 1 || up == 1 || down == 1)
                    {
                        // pixel is part of the outline
                        outline.write(vec<half, 4>(1.0, 1.0, 1.0, 1.0), gridPosition);
                    }
                }
                else if (abs(currentColor - 1.0) <= 0.0001 && (gridPosition.x == 0 || gridPosition.y == 0 || gridPosition.x == width - 1 || gridPosition.y == height - 1))
                {
                     outline.write(vec<half, 4>(1.0, 1.0, 1.0, 1.0), gridPosition);
                }
            }
        }
    
-[DYMTLDebugWireframeRenderer initWithDebugFunctionPlayer:]
_wireframeLibrary != nil
wireframeCreationFragment
_wireframeCreationFragmentFunction != nil
createOutlineTexture
_outlinePostProcessFunction != nil
tessellationControlPointIndexType
r^v28@?0I8r^v12Q20
v32@?0r^{DYMTLBoundBufferInfo=@^vQ}8Q16^B24
GPUToolsInternalPostTransformPipelineStateLabel
%llu-%u
Reading patching tables is supported only in PerfectPatching mode
Error when reading patching table at %@. %@
Error when parsing patching table at %@. %@
Failed to generate perfect patching json data. Error: %@
Failed to write perfect patching table to path %@
Patching is only supported in PerfectPatching mode.
Unable to find a matching patching request for command buffer %llu at index %u
Patching request already processed, skipping...
pointer
Error: 'pointer' key not found.
pointee
Error: 'pointee' key not found.
buffer_device_object
buffer_offset
Error: '%@' key not found.
Error: '%@' is not a number.
Pointer buffer %llu not found
Buffer %llu not found in the object map.
Object %llu is not an MTLBuffer.
Dyson - blit buffer from GPU
Pointee buffer %llu not found
Buffer offset (%llu) greater than buffer length (%llu)
Buffer offset (%llu) greater than buffer length (%lu)
#include <metal_graphics>
#include <metal_texture>
using namespace metal;
struct VertexOutput
  vec<float, 4> pos [[position]];
  vec<float, 2> uv;
struct UniformData
  vec<float, 4> blendColor;
  uint selectedLayer;
vertex VertexOutput vertexFunction(device const vec<float,4> *pos_data [[ buffer(0) ]],
                                   device const vec<float,2> *uv_data [[ buffer(1) ]], 
                                   uint vid [[ vertex_id ]])
  VertexOutput out;
  out.pos = pos_data[vid];
  out.uv = uv_data[vid];
  return out;
fragment vec<float, 4> opaqueFragmentFunction(VertexOutput in [[stage_in]],
                                              texture2d<float> tex [[ texture(0) ]],
                                              sampler sam [[ sampler(0) ]] )
  vec<float, 4> tex_color = tex.sample(sam, in.uv);
  return tex_color;
fragment vec<float, 4> blendingFragmentFunction(VertexOutput in [[stage_in]],
                                                texture2d<float> tex [[ texture(0) ]],
                                                sampler sam [[ sampler(0) ]],
                                                constant UniformData &uniformData [[ buffer(0) ]]){
  vec<float, 4> tex_color = tex.sample(sam, in.uv);
  return tex_color.r * uniformData.blendColor;
fragment vec<float, 4> blendingFragmentFunction_2dArray(VertexOutput in [[stage_in]],
                                                        texture2d_array<float> tex [[ texture(0) ]],
                                                        sampler sam [[ sampler(0) ]],
                                                        constant UniformData &uniformData [[ buffer(0) ]]){
  vec<float, 4> tex_color = tex.sample(sam, in.uv, uniformData.selectedLayer);
  return tex_color.r * uniformData.blendColor;
-[DYMTLTextureRenderer initWithDevice:]
_library != nil
vertexFunction
opaqueFragmentFunction
blendingFragmentFunction
blendingFragmentFunction_2dArray
_depthStencilDescriptor != nil
_positionBuffer != nil
_texCoordBuffer != nil
MTLIOAccelIndirectCommandBuffer
v32@?0@"MTLStructMember"8Q16^B24
-fno-tracepoint-instrument-line-markers
-fno-tracepoint-instrument-argument-buffers
Error creating instrumented library: %@
kDYMTLShaderDebuggerInstrumentedMetallib is nil
v32@?0@"<MTLTexture>"8Q16^B24
v32@?0r^{DYMTLBoundSamplerInfo=@ff}8Q16^B24
kDYMTLShaderDebuggerLibraryId library not found in object map
v32@?0@"MTLArgument"8Q16^B24
v32@?0@"MTLSamplerDescriptor"8Q16^B24
Error creating instrumented render pipeline state: %@
Error creating instrumented compute pipeline state: %@
v8@?0
libLLVM.dylib
Shader Debugger is not supported in this system configuration. Please install an Xcode with an SDK that is aligned to your OS version.
Error creating instrumented function: %@
Shader bitcode not found.
Could not generate shader metadata. Please update your target device to the latest OS version
Incorrect ROI parameters
Unable to create trace buffer.
Invalid command encoder for Vertex ROI type
Invalid command encoder for Fragment ROI type
Invalid command encoder for Kernel ROI type
Error while preparing trace buffer.
Trace buffer not big enough. Retry with new size.
tracepoint_thread_begin
tracepoint_function_begin
tracepoint_function_end
tracepoint_call
tracepoint_variable
tracepoint_data
tracepoint_loop_begin_for
tracepoint_loop_begin_while
tracepoint_loop_begin_do
tracepoint_loop_init_begin
tracepoint_loop_init_end
tracepoint_loop_cond_begin
tracepoint_loop_cond_end
tracepoint_loop_inc_begin
tracepoint_loop_inc_end
tracepoint_loop_body_begin
tracepoint_loop_body_end
tracepoint_loop_end
tracepoint_thread_exit
__trace.base_id
tracepoint_library_version
tracepoint.sets
tracepoint
__gt_unnamed_function_call__
return_value(
0123456789abcdef
Dump Tile Data
dumpThreadgroupData
Tile Pipeline for dumping Threadgroup data
Dump Tile Threadgroup Data
struct ImageblockMaster
%@};
%@%@
%@struct
%@%@}%@[%ld];
%@%@[%ld].
user(
%@fragmentMember%ld
fragmentMember%ld
%@struct
%@%@}%@;
%@%@.
dumpImageBlockData
Tile Pipeline for dumping Image Block data
imageBlockData.write(%@4(currData, 0, 0, 0), gid
imageBlockData.write(%@4(currData.x, currData.y, 0, 0), gid
imageBlockData.write(%@4(currData.x, currData.y, currData.z, 0), gid
imageBlockData.write(%@4(currData.x, currData.y, currData.z, currData.w), gid
    %@
%@%@<%@>
%@ %@
%@[%lu]
%@[[ %@ ]];
#include <metal_stdlib>
#include <metal_imageblocks>
#include <simd/simd.h>
using namespace metal;
%@                               uint2 gid [[ thread_position_in_grid ]],
                               ushort2 lid [[ thread_position_in_threadgroup ]],
kernel void dumpImageBlockData(imageblock<ImageblockMaster, imageblock_layout_explicit> imageBlock [[ alias_implicit_imageblock ]],
kernel void dumpImageBlockData(imageblock<ImageblockMaster, imageblock_layout_explicit> imageBlock [[ alias_implicit_imageblock_color(%ld) ]],
kernel void dumpImageBlockData(imageblock<ImageblockMaster, imageblock_layout_explicit> imageBlock,
                               texture2d_array<%@, access::write> imageBlockData [[ texture(0) ]])
    threadgroup_imageblock ImageblockMaster* ib = imageBlock.data(lid);
    for(int i = 0; i < %ld; ++i)
    {
        %@ currData = ib->%@[i];
        %@, i);
    }
                               texture2d<%@, access::write> imageBlockData [[ texture(0) ]])
    threadgroup_imageblock ImageblockMaster* ib = imageBlock.data(lid);
    %@ currData = ib->%@;
    %@);
#include <metal_stdlib>
using namespace metal;
#define THREADGROUP_MEMORY_LENGTH %ld
kernel void dumpThreadgroupData(uint2 threadgroupInGrid [[ threadgroup_position_in_grid ]],
                                uint2 threadgroupsPerGrid [[ threadgroups_per_grid ]],
                                device uint8_t* threadgroupBufferDump [[ buffer(0) ]],
                                threadgroup uint8_t* threadgroupData [[ threadgroup(%ld) ]])
   uint tileIndex = (threadgroupInGrid.y * threadgroupsPerGrid.x) + threadgroupInGrid.x;
   uint offset = THREADGROUP_MEMORY_LENGTH * tileIndex;
   for(uint32_t i = 0; i < THREADGROUP_MEMORY_LENGTH; ++i)
   {
       threadgroupBufferDump[offset + i] = threadgroupData[i];
   }
float
half
uint
short
ushort
float2
float3
float4
half2
half3
half4
int2
int3
int4
uint2
uint3
uint4
short2
short3
short4
ushort2
ushort3
ushort4
char
char2
char3
char4
uchar
uchar2
uchar3
uchar4
bool
bool2
bool3
bool4
r8unorm
r8snorm
r16unorm
r16snorm
rg8unorm
rg8snorm
rg16unorm
rg16snorm
rgba8unorm
srgba8unorm
rgba8snorm
rgba16unorm
rgba16snorm
rgb10a2
rg11b10f
rgb9e5
/program_source
MTLStatCommandBufferIndex
MTLStatEncoderIndex
MTLStatCommandIndex
MTLStat_nSec
MTLStatTotalGPUCycles
SW_PBUsed
_fedf2c59
Unknown Unknown
GPUFrameProfilingPowerStateWarmupTime
frame profile data
PerDrawNsecTimes
gputime
encoder time data
kick time data
kick cycle data
consistent time
tilerParamBufBytesUsedArray
perEncoderIndexDrawCallCount
withoutBlitPerEncoderIndexDrawCallCount
blitEncoderIndices
frame counters
Depth.
First
Stencil.
r^v24@?0r^v8Q16
v24@?0@"<MTLTexture>"8Q16
v16@?0@"<MTLCommandBuffer>"8
Color
Color %i
Depth
Stencil
%@.%llu
com.apple.dt.gputrace-replayer.pixel-history-contd-after-%u
com.apple.dt.gputrace-replayer.pixel-history-total-draws-%u
com.apple.dt.gputrace-replayer.pixel-history-blits-n-additional-stats-%u
v24@?0@"NSData"8Q16
com.apple.dt.gputrace-replayer.pixel-history-save-depth-stencil-%u
v16@?0Q8
v32@?0r^{DYMTLThreadgroupMemoryInfo=QQ}8Q16^B24
v32@?0^{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}8I16I20^B24
#include <metal_stdlib>
using namespace metal;
struct TransformMatrices
    float4 modelview_projection_matrix[4];
struct VertexOutput
    float4 pos [[position]];
    float4 color;
vertex VertexOutput defaultVertexProgram(uint vid [[ vertex_id ]])
    VertexOutput out;
    out.pos   = float4(0.0, 0.0, 0.0, 1.0);
    out.color = float4(0.0, 0.0, 0.0, 1.0);
    return out;
fragment float4 defaultFragmentProgram(VertexOutput vo [[ stage_in ]])
    return float4(vo.color.bgr, 1.0f);
kernel void defaultKernel()
defaultVertexProgram
defaultFragmentProgram
defaultKernel
nvidia
v32@?0@"<MTLCommandBuffer>"8@"NSData"16Q24
type
DELTA
MTLStatDataMaster
MTLStatSampleLocation
MetalPluginName
activePerEncoderDrawCallCount
width
height
format
Color.%u
Color.
        #include <metal_graphics>
        #include <metal_texture>
        using namespace metal;
        fragment vec<float, 4> solidCreationFragment()
        {
            return vec<float, 4>(1.0, 1.0, 1.0, 1.0);
        }
    
-[DYMTLPixelHistoryDrawStatsSupport initWithDebugFunctionPlayer:]
_solidLibrary != nil
solidCreationFragment
_solidCreationFragmentFunction != nil
ConvertIndirectCommandBufferDataToFBufStreamRender
Ctulul
Cululululul
Cululultulullul
Cululultululul
Cululultultululul
ConvertIndirectCommandBufferDataToFBufStreamCompute
Culul
C@6ul
C@3ul@3ul
Failed to dispatch: 0x%x
gputools.%@.%p
gputools.%@.%p.%@
messageLock
messageProcessingQueue
couldn't get global client transport
couldn't get global client source
v16@?0@"DYTransportMessage"8
version
interpose-feature-version
interpose-patch-version
couldn't send replayer ready message: %@
B24@?0@"DYTransportMessage"8@"NSDictionary"16
-[DYReplayController _processMessage:]
uuidString
filename
uuid
v16@?0@"NSDictionary"8
-[DYReplayController _loadArchives:error:]
filenames
gputrace
-[DYReplayController _playbackCurrentArchiveAndExperiments]
![self.archiveStack empty]
-[DYReplayController _playbackArchiveWithExperiment:passingFuture:resolvingFuture:]
-[DYReplayController _playbackArchiveWithExperiment:passingFuture:resolvingFuture:]_block_invoke_2
result_message
self.replayMessage
-[DYReplayController _beginDebugArchive]
T@"<MTLHeap>",R
.cxx_destruct
TQ,R,N,V_height
GPUStartTime
_blendColorBlue
T#,R
_compileOptions
T@"<DYLayerManager>",W,N,V_layerManager
_depthBiasClamp
T@"<MTLBuffer>",R
_device
T@"<MTLCommandQueue>",R
_engine
T@"<MTLDevice>",R
_gpuCyclesIndex
T@"<MTLResource>",R
_isDeltaCounter
T@"<MTLTexture>",&,N,V_mockStencilTexture
_parallelEncoderCommandBufferID
T@"<MTLTexture>",R,N,V_outlineTexture
_pixelHistoryPixelPreviousDepth
T@"<MTLTexture>",R,N,V_wireframeTexture
_positionBuffer
T@"DYMTLIndirectArgumentBufferManager",&,N,V_indirectArgumentManager
_profileFrameWithCounterListsForProfileInfo:setConsistentState:
T@"DYMTLPostVertexDump",R,N,V_postVertexDump
_stencilTexture
T@"DYPlaybackEngine",&,N,VplaybackEngine
_texCoordBuffer
T@"DYTransportMessage",&,N,VreplayMessage
_vertexFunction
T@"MTLCompileOptions",R,N,V_compileOptions
_vertexTextures
T@"NSMutableArray",&,N,V_counterListsPerPass
aluType
T@"NSMutableArray",&,N,Vexperiments
backFaceStencil
T@"NSMutableDictionary",&,N,V_filteredGenerationOptions
commitEncodersAndCommandBuffers
T@"NSObject<OS_dispatch_queue>",&,N,Vqueue
compressionMode
T@"NSString",C
computeFunction
T@"NSString",R,C
containsString:
T@?,C,N,VorigSourceMessageHandler
dealloc
TB,R
didModifyRange:
TB,R,N,V_targetFunctionNeedsSeparatedPostVertexDump
enqueue
TI,N,V_encoderFunctionIndex
fragmentBuffers
TI,R
harvestThreadgroupAtIndex:size:
TQ,R,N
initializeResourcePatchingTypes
TQ,R,N,V_maxThreadgroupMemoryLengthCount
isProxy
TQ,R,N,V_type
layouts
T^v,R,N,V_bufferVitualAddressMap
maxCommandCount
T^v,R,N,V_replayerSamplerMap
maxTotalThreadgroupsPerMeshGrid
T^v,R,N,V_samplerMap
metalPluginName
T^{__IOSurface=},R
newComputePipelineStateWithDescriptor:options:reflection:error:
numberWithBool:
Tq,N,V_wireframeRenderMode
pipelineLibrary
T{?=CCCC},R,N
present
T{vector<MTLViewport, std::allocator<MTLViewport>>=^{?}^{?}{__compressed_pair<MTLViewport *, std::allocator<MTLViewport>>=^{?}}},R,N
pushDebugGroup:
UTF8String
release
_addRenderPassDescriptorToEncoderMapFromArgumentPointer:forEncoder:
resolveMultisampleTexture:slice:level:depthPlane:commandBuffer:
_aliasImplicitImageBlock
setAdditionalCompilerArguments:
_aliasImplicitImageBlockColorIndex
setArrayLength:
_amplificationCountSet
setDepthCleared
_amplificationModeSet
setEncoderStateFunctionIndexes:
_amplificationViewMappings
setGPUPriority:
_applyFragmentStateToEncoder:rawBytesBlock:
setLodMaxClamp:
_applyVertexStateToEncoder:rawBytesBlock:
setMaxVertexAmplificationCount:
_attachmentInfoForCommandEncoderID:
setObjectBuffer:offset:atIndex:
_baseCounterIndexForList
setProfileInfo:
_beginDebugArchive
setSampleCount:
_blendColorGreen
setStatEnabled:
_blendingFragmentFunction
setStorageMode:
_blockQueue
setTextureType:
_bufferVitualAddressMap
setVertexBuffer:offset:atIndex:
_bytesBufferReplacements
setVisibilityResultMode:offset:
_clearData
stringByAppendingPathComponent:
_colorStoreInfos
suspend
_commandBufferFrameProfilesPerDMDrawCallInfo
synchronizeTexture:slice:level:
_commandBufferIndex
texture
_commandEncoderDescriptorMap
updateReplayerTranslationBuffer
_commandQueueSet
useHeap:stages:
_computeBytesDataMap
valueWithRange:
_computePipelineState
yInvert
.cxx_construct
T@"NSString",&,N,V_statVertices
GPUEndTime
_backStencilRef
JSONObjectWithData:options:error:
_commandBufferFrameProfilesInfo
T@"<DYLayerManager>",R,N
_computeEncoder
T@"<DYReplayControllerSupport>",&,N,VreplayControllerSupport
_depthStoreInfo
T@"<MTLBuffer>",R,N,V_postVertexDumpBuffer
_drawableRenderabilityStatusMap
T@"<MTLDevice>",&,N,V_device
_frameProfiling
T@"<MTLLogContainer>",R
_height
T@"<MTLTexture>",&,N,V_mockDepthTexture
_outlineTexture
T@"<MTLTexture>",R
_pixelFormatToDataTypeStringMap
T@"<MTLTexture>",R,N,V_solidTexture
_player
T@"DYCaptureArchiveStack",&,N,VarchiveStack
_postVertexDump
T@"DYMTLIndirectCommandBufferManager",&,N,V_indirectCommandManager
_reflectionPostVertexDumpStride
T@"DYMTLShaderDebuggerTraceGenerator",R,N,V_shaderDebuggerTraceGenerator
_tessellationFactorBufferOffset
T@"DYTransport",&,N,Vtransport
_traceProcessed
T@"DYTransportSource",&,N,Vsource
_vertexSamplers
T@"NSError",R
allKeys
T@"NSMutableArray",&,N,V_frameCounters
arrayWithArray:
T@"NSMutableDictionary",&,N,V_encoderStateFunctionIndexes
buffers
T@"NSMutableDictionary",&,N,VprofileInfo
completionBlock
T@"NSString",&,N,V_statPixels
compressionType
T@"NSString",R
containsObject:
T@,R,N,V_code
currentTopLayer
TB,N,V_shouldIgnoreCaptureFile
depthAttachment
TB,R,GisFramebufferOnly
TI,N,V_currentEncoderIndex
enumerateTileBuffersUsingBlock:
TI,N,V_lastInterestingFunctionIndex
framebufferOnly
TQ,R
initWithDevice:
TQ,R,N,V_maxCommandCount
isFrameBoundary
TQ,R,N,V_options
kernelStartTime
TQ,R,N,V_width
lowercaseString
T^v,R,N,V_replayerBufferBaseVirtualAddressMap
maxThreadgroupMemoryLengthCount
T^v,R,N,V_replayerTextureMap
members
T^v,R,N,V_textureMap
newCommandQueue
Td,R
newIndirectCommandBufferWithDescriptor:maxCommandCount:options:
Ti,R,N,V_patchingMode
options
Tq,R
playbackOptions
T{MTLResourceID=Q},R
presentDrawable
T{vector<MTLViewport, std::allocator<MTLViewport>>=^{?}^{?}{__compressed_pair<MTLViewport *, std::allocator<MTLViewport>>=^{?}}},R,N,V_viewports
rasterizationRateMapDescriptorWithScreenSize:layerCount:layers:
_FixSplitEncoderSamples:forProfile:withInfo:andUpdatedCounterInfo:
resetWithRange:
_addRenderPassDescriptorToEncoderMapFromRenderPassDescriptor:forEncoder:
resourceOptions
_aliasImplicitImageBlockColor
setAnchorPoint:
_amplificationCount
setBufferIndex:
_amplificationMode
setDestinationAlphaBlendFactor:
_amplificationValue
setExperiments:
_ancestorMaps
setKernelBuffer:offset:atIndex:
_applyHeapsAndResourcesToEncoder:
setLodMinClamp:
_archiveDirectory
setMeshSamplerStates:withRange:
_bSetStageInRegion
setPixelFormat:
_batchInfos
setRenderPipelineState:atIndex:
_blendColorAlpha
setScissorRect:
_blendColorRed
setStatOptions:
_blendingFragmentFunction_2dArray
setStoreAction:
_bufferLengthMap
setTileSamplerStates:withRange:
_buffers
setVertexDepthCompareClampMask:
_calculateGPUVirtualAddress
setWithObjects:
_code
supportsFamily:
_commandBufferFrameProfiles
swizzle
_commandBufferIds
tailSizeInBytes
_commandBufferMap
tileSizeWithSparsePageSize:textureType:pixelFormat:sampleCount:
_commandQueue
updateTextureMappings:mode:regions:mipLevels:slices:numRegions:
_computeAverageForFrameProfile:forProfile:withInfo:andUpdatedCounterInfo:forEncoders:
useHeaps:count:
_computePipelineMap
vertexArguments
_computePipelineStateUniqueIdentifier
_constantSamplerReflection
_counterInfos
_counterListsPerPass
_createAndSetInstrumentedComputePipelineStateWithDescriptor:computeCommandEncoder:
_createAndSetInstrumentedRenderPipelineStateWithDescriptor:renderCommandEncoder:roiType:
_createAndSetInstrumentedTileRenderPipelineStateWithDescriptor:renderCommandEncoder:
_createBatchIdFilterMapping:withCommandEncoder:
_createDataTypeToStringDictionary
_createInstrumentedFunctionWithInstrumentedLibrary:originalFunction:
_createPrivateBufferForFunctionWithDevice:bytes:length:resourceOptions:
_createTraceBufferWithGenerationOptions:
_cullMode
_currentBatchEncoderIndex
_currentCommandBuffer
_currentCommandBufferFunctionIndex
_currentDeviceDecodingData
_currentEncoderBatchIndex
_currentEncoderBatchInfo
_currentEncoderIndex
_currentParallelDescriptor
_currentParallelId
_currentRenderPipelineHasBufferOrTextureReadWrite:encoder:
_dataTypeToChannelCount
_dataTypeToImageBlockTypeStringMap
_dataTypeToTextureComponentTypeStringMap
_dataTypeToTextureTypeForInvalidPixelFormatMap
_datamasterIndex
_decodingMap
_deleteAllArchives
_dependencyGraphDYMTLParallelDescriptor
_dependencyGraphParallelDescriptor
_dependencyGraphThumbnails
_depthBias
_depthBiasSlopeScale
_depthClipMode
_depthStencilDescriptor
_depthStencilState
_deviceResourcesBuffers
_disableWireframe
_dispatchType
_displayPlaybackEngine
_drawIndex
_drawableIdToLayerIdMap
_drawableMap
_dummyArgumentBuffer
_dummyArgumentEncoder
_dyParallelRenderCommandEncoderDescriptor
_encodedResourcesMap
_encoderFunctionIndex
_encoderIndex
_encoderIndexToBatchInfo
_encoderMap
_encoderStateFunctionIndexes
_encoderToParallelEncoderMap
_endEncodingForAllRemainingEncoders:
_endPlayback
_errorStr
_executeGraphicsFunction
_executeIndirectCommandBufferUpToSubIndex:outBuffer:outDataPointer:
_extractTileMemoryWithRenderPassDescriptor:renderEncoderID:isDrawCall:
_filteredGenerationOptions
_forceAttachmentLoadActionToLoad:
_forceAttachmentStoreActionToStore:
_fragmentBindingNeedsPlaceholderResource:renderCommandEncoder:
_fragmentBufferOffsets
_fragmentBuffers
_fragmentBytes
_fragmentBytesDataMap
_fragmentBytesLength
_fragmentMemberIndex
_fragmentSamplers
_fragmentTextures
_frameCounters
_frontFacingWinding
_frontStencilRef
_generateConstantSamplerReflectionWithUniqueIdentifiers:descriptors:
_generateDummyPipeline:
_generateFunctionFromImageBlockMember:WithIndex:
_generateImageBlockShaderStringWithMember:index:
_generateImageBlockStructMember:WithCurrentName:WithIndent:
_generateIndentString:
_generateKernelFunctionFromString:funcName:
_generateResourceResolutionRemappingTables
_generateStringForWritingDataToTexture:
_generateTextureFromImageBlockMember:
_generateThreadgroupShaderStringWithThreadgroupIndex:size:
_generateThumbnailAndResourceInfoForRequestedTextures:resolution:commandBuffer:
_generateTileRenderPipelineStateWithTileFunction:renderPassDescriptor:renderPipelineState:
_getDeviceWithName:
_gpuVirtualAddressArray
_gpuVirtualAddressMap
_handleArchiveLoadingForPlaybackRequest:replyKind:
_hasSetStageInRegion
_imageBlockArgumentsFromFragment
_imageBlockArgumentsFromTile
_imageBlockHeight
_imageBlockSignature
_imageBlockStatus
_imageBlockWidth
_indirectArgumentBuffers
_indirectArgumentManager
_indirectCommandBufferMap
_indirectCommandManager
_instrumentLibrary:generationOptions:
_isAGXDevice
_isCPUAccessibleStorageMode:
_isDepthStencilFormat:
_isFunctionCommandEncoderCreation
_isPresentFunction
_isReceiverTypeCommandEncoderRelated
_isTileRenderPassDescriptor
_kernelBindingNeedsPlaceholderResource:computeCommandEncoder:
_kernelBufferOffsets
_kernelBuffers
_kernelBytes
_kernelBytesLength
_last
_lastCommandBufferId
_lastCommandBufferIndex
_lastEncoderID
_lastEncoderIndex
_lastInterestingFunctionIndex
_lastProcessedCommandBufferUid
_lastSampleCommandBufferEncoderId
_layerManager
_library
_lineWidth
_loadArchives:error:
_loopCount
_maxCommandCount
_maxThreadgroupMemoryLengthCount
_messageLock
_messageLoop
_messageProcessingQueue
_messageQueue
_metadata
_metalLayers
_mockColorTextureDescriptors
_mockColorTextures
_mockDepthTexture
_mockDepthTextureDescriptor
_mockStencilTexture
_mockStencilTextureDescriptor
_modifyDescriptorForLayering:withBuffer:
_modifyDescriptorForStore:
_nRemainingCommandsForCurrentEncoder
_nSecIndex
_needsMultiplePasses
_nopDrawFragFunction
_nopDrawVertexFunction
_nopRenderPipelineState
_nopTileFunction
_objectMap
_onlineSrc
_opaqueFragmentFunction
_optimizedPatchingMap
_options
_originalCommandBuffer
_originalCommandEncoderId
_originalEncoder
_originalParallelEncoder
_outlineComputePipelineState
_outlinePostProcessFunction
_outlineTextureDescriptor
_parallelCommandBufferId
_parallelEncoderMap
_parallelRenderCommandEncoderDescriptor
_patcher
_patchingMode
_perfectPatchingTable
_persistantEncoder2ParallelMap
_pipelineState
_pixelHistory
_pixelHistoryDrawStatsRenderer
_pixelHistoryEncoderStateTrackings
_pixelHistoryInverseObjectMap
_pixelHistoryMockRenderPassDescriptor
_pixelHistoryPixelPreviousStencil
_pixelHistoryRenderPassDescriptor
_pixelHistorySolidRenderPipelineState
_pixelHistoryVisibilityMockRenderPassDescriptor
_placeholderBuffer
_placeholderSamplerState
_placeholderTexture
_placeholderTextureWithType:
_placeholderTextures
_playbackArchiveWithExperiment:passingFuture:resolvingFuture:
_playbackCurrentArchiveAndExperiments
_popMessage
_postVertexDumpBuffer
_prepareComputeCommandEncoder:generationOptions:
_prepareRenderCommandEncoder:generationOptions:
_prepareTraceBufferWithGenerationOptions:
_prepareWireframeTextureWithEncoder:commandBuffer:pipelineState:parallelEncoder:renderPassDescriptor:
_prepareWithEncoder:parallelEncoder:pipelineState:renderPassDescriptor:
_processArgument:WithImageBlockVector:
_processArrayType:WithProcessedArgument:WithMemberName:WithCurrentName:WithIndent:
_processMessage:
_processStructMember:WithProcessedArgument:WithMemberName:WithIndent:
_processStructType:WithProcessedArgument:WithMemberName:WithIndent:
_profileBlockBackgroundQueue
_profileBlockQueue
_profileFrameForFrameTiming:atConsistentState:
_profileFrameWithCounterListsForProfileInfo:
_profileFrameWithCounterListsForProfileInfo:encoderPass:
_profileFrameWithCounterListsForProfileInfoAsync:encoderPass:updateStatSampling:setConsistentState:
_profileInfo
_profileSplitEncodersForProfileInfo:
_pushMessage:
_recalculateVirtualAddress
_recursivePlaybackWithFuture:usingExperiment:withToplevelFuture:
_reflectionSizeAligned256
_renderEncoder
_renderPassPixelFormatFromDescriptor:
_renderPipelineDescriptor
_renderPipelineMap
_renderPipelineState
_renderPipelineStateUniqueIdentifier
_replacedSamplerStates
_replayerBufferBaseVirtualAddressMap
_replayerComputePipelineMap
_replayerControllerSupportForCaptureStore:
_replayerIABs
_replayerIndirectCommandBufferMap
_replayerRenderPipelineMap
_replayerSamplerMap
_replayerTextureMap
_reservePostVertexDumpBufferWithLength:
_resourcePatchingType
_resourcePatchingTypesInitialized
_restoreTexture:commandBuffer:argumentOffset:
_runPassesForCounterLists:encoderPass:frameProfileInfo:
_sampleLocationIndex
_samplerMap
_samplerState
_samplers
_saveBytes
_savedVertexFragmentState
_savedVertexState
_scissorRects
_setDefaultsWithDescriptor:device:
_setupEncodersForBatchIdFiltering
_setupPState
_shaderDebuggerTraceGenerator
_shouldIgnoreCaptureFile
_solidCreationFragmentFunction
_solidLibrary
_solidRenderPassColorAttachmentDescriptor
_solidRenderPassDescriptor
_solidTexture
_sparseTextureFence
_splitBlitEncoder
_splitCommandEncoders
_splitComputeEncoder
_splitEncoderCommandCount
_splitRenderEncoders
_stageInIndirectBufferId
_stageInIndirectBufferOffset
_stageInRegion
_stageInRegionIndirectBuffer
_stageInRegionIndirectBufferOffset
_statPixels
_statVertices
_stencilStoreInfo
_stencilTextureDescriptor
_superExecutePlatformFunction
_supportsTessellation
_supports_tessellation
_swizzleAttachmentTextureForLoad:withBuffer:
_targetCommandEncoderId
_targetFunctionNeedsSeparatedPostVertexDump
_tessellationFactorBuffer
_tessellationFactorBufferInstanceStride
_tessellationFactorScale
_tessellationFactorSet
_texture2DFromTexture:level:slice:depthPlane:commandBuffer:
_textureMap
_textureRenderer
_textureSize
_textureToDrawableMap
_textures
_threadgroupMemories
_threadgroupStatus
_thumbnailDictionary
_tileBindingNeedsPlaceholderResource:renderCommandEncoder:
_tileBuffers
_tileBytesDataMap
_tileMemoryExtractor
_tileSamplers
_tileSize
_tileTextures
_traceBuffer
_traceBufferVersion
_traceType
_trackObjects
_triangleFillMode
_type
_uniformData
_updateMemorylessTextures:
_updateRemainingCommandsForEncoder
_updateTextureDescriptor:usingEncoder:renderPassDescriptor:
_updatedBatchInfos:fromPerEncoderDrawCallCount:
_usedHeaps
_usedResources
_usedSamplersMap
_vertexBindingNeedsPlaceholderResource:renderCommandEncoder:
_vertexBufferOffsets
_vertexBuffers
_vertexBytes
_vertexBytesDataMap
_vertexBytesLength
_viewports
_visibilityResultBuffer
_visibilityResultMode
_visibilityResultOffset
_width
_wireframeCreationFragmentFunction
_wireframeLibrary
_wireframeRenderMode
_wireframeRenderPassColorAttachmentDescriptor
_wireframeRenderPassDescriptor
_wireframeRenderPipelineState
_wireframeRenderer
_wireframeTexture
_wireframeTextureDescriptor
accelerationStructureCommandEncoder
accelerationStructureCommandEncoderWithDescriptor:
access
addCommandBufferDurationStart:andEnd:
addCommandBufferFrameProfile:
addCompletedHandler:
addComputePipelineStateUniqueIdentifier:forObjectId:
addCounters:
addDebugMarker:range:
addEntriesFromDictionary:
addGPUVirtualAddress:forObjectId:
addObject:
addObjectsFromArray:
addPerfSampleHandler:
addPurgedHeap:
addPurgedResource:
addRenderPipelineStateUniqueIdentifier:forObjectId:
addScheduledHandler:
aliasImplicitImageBlock
aliasImplicitImageBlockRenderTarget
allObjects
allValues
allocatedSize
allocationID
allowGPUOptimizedContents
allowOverlap:withPState:
analysisScript
anchorPoint
anchorPointZ
animationDuration
animationTimingFunction
appendBytes:length:
applyAllStateToEncoder:rawBytesBlock:
applyLayersVisibility
applyToEncoder:rawBytesBlock:
applyVertexFragmentStateToEncoder:rawBytesBlock:
applyVertexStateToEncoder:rawBytesBlock:
archiveStack
archivedDataWithRootObject:requiringSecureCoding:error:
argumentBuffersSupport
argumentDescriptor
argumentEncoderForDecodingOperation:reflectionStructType:
argumentIndexStride
arguments
array
arrayLength
arrayType
arrayWithCapacity:
arrayWithObject:
arrayWithObjects:
arrayWithObjects:count:
attributeForKey:
attributes
autorelease
availableCounters
backReferenceValue
begin
bitcodeData
blitBufferFromGPU:
blitCommandEncoder
blitCommandEncoderWithDescriptor:
boolResult
boolValue
borderColorSPI
bounds
boundsForCurrentInterfaceOrientation
buffer
bufferBytesPerRow
bufferDataSize
bufferIdAndOffsetForGPUVirtualAddress:
bufferOffset
bufferStructType
bufferVitualAddressMap
bytes
canGenerateMipmapLevels
caseInsensitiveCompare:
class
clear
close
code
collectPixelDrawStats:originalEncoderId:originalEncoder:originalPipeline:atX:y:draw:
collectPixelDrawStatsTotal:originalPipeline:atX:y:draw:
collectPixelHistoryStencilDrawStatsAtX:y:completion:
collectPixelHistoryVisibilityDrawStatsAtCompletion:
colorAttachments
commandBatchIdOffset
commandBatchIdRangeMin:max:
commandBuffer
commandQueue
commandTypes
commit
commitAndHold
commitAndWaitUntilSubmitted
compare:
compileOptions
componentsSeparatedByString:
compressionFeedback
compressionFootprint
computeBytesForKey:
computeBytesKeyAtIndex:
computeCommandEncoder
computeCommandEncoderWithDescriptor:
computeCommandEncoderWithDispatchType:
computePipelineIdForUniqueIdentifier:
computePipelineState
concurrentDispatchThreadgroups:threadsPerThreadgroup:
concurrentDispatchThreads:threadsPerThreadgroup:
configurationVariables
conformsToProtocol:
constantSamplerDescriptors
constantSamplerUniqueIdentifiers
contents
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
contentsScale
convertIndirectCommandBufferData:range:toFBufStream:
convertSparsePixelRegions:toTileRegions:withTileSize:alignmentMode:numRegions:
copy
copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:
copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:
copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:
copyFromTexture:sourceSlice:sourceLevel:toTexture:destinationSlice:destinationLevel:sliceCount:levelCount:
copyFromTexture:toTexture:
copyIndirectCommandBuffer:sourceRange:destination:destinationIndex:
copyParameterDataToBuffer:offset:
count
countByEnumeratingWithState:objects:count:
counterDictionary
counterInfo
counterInfo:
counterListsPerPass
counterSets
cpuCacheMode
createAndSetPostVertexDumpPipelineState:commandEncoderId:pipelineId:
createArchivePlaybackEngineWithCaptureStore:
createBatchIdFilterMapping
createDebugPlaybackEngineWithCaptureStore:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
createLayerWithID:contentRect:contentsScale:properties:isCoreAnimationSurface:
createNumFragmentPassesRenderCommandEncoderInCommandBuffer:originalRenderPassDescriptor:originalPipeline:
createNumTotalRenderCommandEncoderInCommandBuffer:originalPipeline:
createNumVisibleRenderCommandEncoderInCommandBuffer:originalRenderPassDescriptor:originalPipeline:depthStencilDescriptor:mockDepthStencilTexture:visibilityResultMode:atX:y:
createNumVisibleRenderCommandEncoderInCommandBuffer:originalRenderPassDescriptor:originalPipeline:depthStencilDescriptor:mockDepthTexture:visibilityResultMode:atX:y:
createNumVisibleRenderCommandEncoderInCommandBuffer:originalRenderPassDescriptor:originalPipeline:depthStencilDescriptor:mockStencilTexture:visibilityResultMode:atX:y:
createOutlineTexture
createOverridingPlaybackEngineWithCaptureStore:experiment:
createSolidRenderCommandEncoder:commandBufferId:commandEncoderId:parallelEncoderId:
createWireframeRenderCommandEncoder:
currentEncoderIndex
currentFunctionIndex
currentRenderPipelineHasBufferOrTextureReadWrite:
customBorderColorValue_0
customBorderColorValue_1
customBorderColorValue_2
customBorderColorValue_3
dataType
dataTypeDescription
dataWithBytes:length:
dataWithBytesNoCopy:length:freeWhenDone:
dataWithContentsOfFile:options:error:
dataWithJSONObject:options:error:
debugCommandEncoder
debugDescription
debugType
decodeReplayerIAB:offset:function:argument:
defaultContentsScale
defaultManager
defaultRasterSampleCount
deleteLayer:
dependencyGraphThumbnailCache
depth
depthAttachmentPixelFormat
depthBias
depthBiasClamp
depthBiasSlopeScale
depthClipMode
depthCompareFunction
depthFailureOperation
depthPlane
depthResolveFilter
depthStencilPassOperation
depthStencilState
dequeBlock
derivedCounterData
derivedCounterScript
description
descriptor
device
deviceForID:withDeviceName:
dictionary
dictionaryWithDictionary:
dictionaryWithObject:forKey:
dictionaryWithObjects:forKeys:
dictionaryWithObjects:forKeys:count:
disableActions
disableDebugFunctions:playbackEngine:
disableDeferredEndEncoding
dispatchThreadgroups:threadsPerThreadgroup:
dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:
dispatchThreads:threadsPerThreadgroup:
dispatchThreadsPerTile:
dispatchThreadsPerTile:inRegion:
dispatchThreadsWithIndirectBuffer:indirectBufferOffset:
dispatchType
ditherEnabled
doesAliasAllResources:count:
doesAliasAnyResources:count:
doesAliasResource:
doesNotRecognizeSelector:
doubleValue
drawIndexedPatches:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:indirectBuffer:indirectBufferOffset:
drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:
drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:
drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:
drawMeshThreadgroups:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:
drawMeshThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:
drawMeshThreads:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:
drawPatches:patchIndexBuffer:patchIndexBufferOffset:indirectBuffer:indirectBufferOffset:
drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:
drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:
drawPrimitives:indirectBuffer:indirectBufferOffset:
drawPrimitives:vertexStart:vertexCount:
drawPrimitives:vertexStart:vertexCount:instanceCount:
drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:
drawableSize
dropResourceGroups:count:
elementArrayType
elementIsArgumentBuffer
elementStructType
elementType
empty
enableConsistentState:
enableDebugDrawCallPresent:playbackEngine:
enableDebugFunctions:playbackEngine:
enableDebugOutlinePresent:playbackEngine:
enableDebugWireframePresent:playbackEngine:
enableNullBufferBinds:
enableOutlinePresent
enableStatsSampling:
enableWireframePresent
encodeDashboardTagForResourceGroup:
encodeImageBlockDataReturn:isDrawCall:
encodeIndirectArgumentsForBuffer:data:
encodeIndirectArgumentsForBuffer:data:decodingMap:
encodeIndirectArgumentsForBuffer:decodingMap:
encodeSignalEvent:value:
encodeStoreActionForParallelRenderCommandEncoder:withDescriptor:
encodeStoreActionForRenderCommandEncoder:withDescriptor:
encodeWaitForEvent:value:
encodeWaitForEvent:value:timeout:
encodedLength
encoderFunctionIndex
encoderMap
encoderStateFunctionIndexes
endEncoding
endPlayback
engine
enumerateBuffersUsingBlock:
enumerateFragmentBuffersUsingBlock:
enumerateFragmentSamplersUsingBlock:
enumerateFragmentTexturesUsingBlock:
enumerateObjectsUsingBlock:
enumerateSamplersUsingBlock:
enumerateTexturesUsingBlock:
enumerateThreadgroupMemoryUsingBlock:
enumerateTileSamplersUsingBlock:
enumerateTileTexturesUsingBlock:
enumerateVertexBuffersUsingBlock:
enumerateVertexSamplersUsingBlock:
enumerateVertexTexturesUsingBlock:
error
errorOptions
errorWithDomain:code:userInfo:
executeCommandsInBuffer:indirectBuffer:indirectBufferOffset:
executeCommandsInBuffer:withRange:
executeFunctions:count:subCommandIndex:
executeGraphicsFunction
executeIABDecodingOp:bufferId:data:indirectDecodingMap:
executeIndirectComputeCommand:withData:atIndex:forIndirectCommandBuffer:
executeIndirectRenderCommand:withData:atIndex:forIndirectCommandBuffer:
executeIndirectRenderCommands:withData:forRange:forIndirectCommandBuffer:
executePlatformFunction
executedDrawCallCount
experimentResultsGeneratorForPlaybackEngine:
experiments
extractCommandBufferTranslationData
extractComputeIndirectArgumentBuffers:
extractIndirectArgumentBuffers
extractRenderIndirectArgumentBuffers:
fileExistsAtPath:isDirectory:
fileURLWithPath:
fillBuffer:range:value:
filterUsingPredicate:
filteredGenerationOptions
findAncestorsForBuffer:commandBufferIndex:commandEncoderIndex:callIndex:ancestors:
findPatchingRequest:
findStructTypeForArgumentIndex:inStructType:
finish
firstMipmapInTail
firstObject
floatValue
flush
forDevice:
forceSeamsOnCubemapFiltering
forwardingTargetForSelector:
fragmentArguments
fragmentBytesForKey:
fragmentBytesKeyAtIndex:
fragmentFunction
frameCounters
front
frontFaceStencil
frontReferenceValue
function
functionHandleWithFunction:
functionHandleWithFunction:stage:
functionType
future
futureWithResult:error:
generateDependencyGraphThumbnailsWithPlaybackEngine:forMessage:onReady:
generateMipmapLevel:slice:
generateMipmapsForTexture:
generatePerPrimitiveHistory:commandQueue:currentEncoderId:originalEncoder:originalPipeline:atX:y:
generatePerPrimitiveHistory_drawPrimitives_vertexStart_vertexCount:vertexStart:vertexCount:total:commandQueue:currentEncoderId:originalEncoder:originalPipeline:atX:y:
generatePixelHistoryWithPlaybackEngine:forMessage:onReady:
generateShaderDebuggerTraceForMessage:playbackEngine:onReady:
generateThumbnailFromTexture:commandBuffer:resolution:withFence:
generateThumbnailsWithPlaybackEngine:forMessage:onReady:
getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:
getBytes:bytesPerRow:fromRegion:mipmapLevel:
getImageBlockStatus
getListIndex
getSPIStats
getSingleUseMockColorTexture:pixelFormat:width:height:
getSingleUseMockDepthTextureWithPixelFormat:width:height:
getSingleUseMockStencilTextureWithPixelFormat:width:height:
getStatLocations
getStatOptions
getTextureAccessCounters:region:mipLevel:slice:resetCounters:countersBuffer:countersBufferOffset:
getThreadgroupStatus
gpuAddress
gpuHandle
gpuResourceID
harvestImageBlockData:
harvestableTexture:
hasPrefix:
hash
hashOffset
hashValue
hazardTrackingMode
heap
heapOffset
height
horizontalSampleStorage
imageBlockDataReturn
imageBlockDataSize
imageBlockKind
imageBlockMasterStructMembers
imageblockMemoryLengthForDimensions:
imageblockSampleLength
index
indexOfObject:
indirectArgumentIndex
indirectArgumentManager
indirectCommandManager
indirectComputeCommandAtIndex:
indirectRenderCommandAtIndex:
informReady
inheritBuffers
inheritPipelineState
init
initWithArray:
initWithCapacity:
initWithCaptureStore:
initWithDebugFunctionPlayer:
initWithDevice:descriptor:
initWithEncoder:descriptor:
initWithEncoder:dispatchType:
initWithFunctionPlayer:
initWithMTLDevice:
initWithMaxCommandCount:options:maxThreadgroupMemoryLengthCount:
initWithObjectsAndKeys:
initWithPatchingMode:
initWithPlaybackEngine:
initWithRenderEncoder:metalDevice:tileSize:texSize:
initWithSampleCount:
initWithType:code:compileOptions:
initWithURL:options:error:
initWithUTF8String:
initializeTransportWith:
inputPrimitiveTopology
insertDebugCaptureBoundary
insertDebugSignpost:
insertPatchingOp:commandBufferUid:
integerForKey:
integerValue
internalPipelineStateLabel
iosurface
iosurfacePlane
isAbsolutePath
isActive
isAliasable
isArgumentExplicitImageBlock:
isBlendingEnabled
isBlitSamplingSupported
isComplete
isCompressed
isCounterAvailable:
isDebugPlaybackEngine:
isDepthWriteEnabled
isDrawable
isEqual:
isEqualToNumber:
isEqualToString:
isFramebufferOnly
isKindOfClass:
isMemberOfClass:
isOpenGLQueue
isPurgeable
isRasterizationEnabled
isSparse
isStatEnabled
isTessellationFactorScaleEnabled
kernelEndTime
keyForOriginalObject:
keyForOriginalObject:inverseObjectMap:
kind
label
lastInterestingFunctionIndex
lastObject
lastPathComponent
layer
layerForID:
layerManager
layout
length
level
loadAction
localizedDescription
logs
longLongValue
mainExecutionMode
makeAliasable
mapScreenToPhysicalCoordinates:forLayer:
maxAvailableSizeWithAlignment:
maxColorAttachments
maxCommandBufferCount
maxFragmentBufferBindCount
maxKernelBufferBindCount
maxTessellationFactor
maxTotalThreadsPerMeshThreadgroup
maxTotalThreadsPerObjectThreadgroup
maxTotalThreadsPerThreadgroup
maxVertexAmplificationCount
maxVertexBufferBindCount
maxVertexBuffers
memoryBarrierWithResources:count:
memoryBarrierWithResources:count:afterStages:beforeStages:
memoryBarrierWithScope:
memoryBarrierWithScope:afterStages:beforeStages:
meshThreadExecutionWidth
messageHandler
messageWithKind:
messageWithKind:attributes:
messageWithKind:attributes:objectPayload:
messageWithKind:attributes:payload:
messageWithKind:attributes:plistPayload:
messageWithKind:attributes:stringPayload:
messageWithKind:objectPayload:
methodForSelector:
minLinearTextureAlignmentForPixelFormat:
mipmapLevelCount
mockDepthTexture
mockStencilTexture
mutableCopy
name
newArgumentEncoderForBufferAtIndex:
newArgumentEncoderWithArguments:
newArgumentEncoderWithBufferIndex:
newArgumentEncoderWithBufferIndex:pipelineLibrary:
newArgumentEncoderWithBufferIndex:reflection:
newArgumentEncoderWithBufferIndex:reflection:pipelineLibrary:
newBufferWithBytes:length:options:
newBufferWithBytes:length:options:gpuAddress:
newBufferWithBytesNoCopy:length:options:deallocator:
newBufferWithIOSurface:
newBufferWithLength:options:
newBufferWithLength:options:gpuAddress:
newBufferWithLength:options:offset:
newCommandQueueWithDescriptor:
newCommandQueueWithMaxCommandBufferCount:
newCompressedTextureViewWithPixelFormat:textureType:level:slice:
newComputePipelineStateWithAdditionalBinaryFunctions:error:
newComputePipelineStateWithFunction:error:
newComputePipelineStateWithFunction:options:reflection:error:
newComputePipelineStateWithImageFilterFunctionsSPI:imageFilterFunctionInfo:error:
newComputePipelineStateWithName:options:reflection:error:
newCounterSampleBufferWithDescriptor:error:
newDefaultLibrary
newDepthStencilStateWithDescriptor:
newDynamicLibrary:error:
newEvent
newExternFunctionWithName:
newFence
newFunctionWithGLCoreIR:functionType:
newFunctionWithGLCoreIR:inputsDescription:functionType:
newFunctionWithGLESIR:functionType:
newFunctionWithGLESIR:inputsDescription:functionType:
newFunctionWithGLIR:functionType:
newFunctionWithGLIR:inputsDescription:functionType:
newFunctionWithName:
newFunctionWithName:constantValues:error:
newFunctionWithPluginData:bitcodeType:
newHeapWithDescriptor:
newIntersectionFunctionTableWithDescriptor:
newIntersectionFunctionTableWithDescriptor:stage:
newLateEvalEvent
newLibraryWithCIFilters:imageFilterFunctionInfo:error:
newLibraryWithData:error:
newLibraryWithFile:error:
newLibraryWithImageFilterFunctionsSPI:imageFilterFunctionInfo:error:
newLibraryWithSource:options:error:
newLinearTextureWithDescriptor:offset:bytesPerRow:bytesPerImage:
newPipelineLibraryWithFilePath:error:
newRasterizationRateMapWithDescriptor:
newRenderPipelineStateWithAdditionalBinaryFunctions:error:
newRenderPipelineStateWithDescriptor:error:
newRenderPipelineStateWithDescriptor:options:reflection:error:
newRenderPipelineStateWithName:options:reflection:error:
newRenderPipelineStateWithTileDescriptor:error:
newRenderPipelineStateWithTileDescriptor:options:reflection:error:
newResourceGroupFromResources:count:
newSamplerStateWithDescriptor:
newSharedEvent
newSharedEventHandle
newSharedEventWithHandle:
newTextureLayoutWithDescriptor:isHeapOrBufferBacked:
newTextureViewWithPixelFormat:
newTextureViewWithPixelFormat:resourceIndex:
newTextureViewWithPixelFormat:textureType:levels:slices:
newTextureViewWithPixelFormat:textureType:levels:slices:resourceIndex:
newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:
newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:resourceIndex:
newTextureWithBytesNoCopy:length:descriptor:deallocator:
newTextureWithDescriptor:
newTextureWithDescriptor:iosurface:plane:
newTextureWithDescriptor:offset:
newTextureWithDescriptor:offset:bytesPerRow:
newVisibleFunctionTableWithDescriptor:
newVisibleFunctionTableWithDescriptor:stage:
nextDrawable
notifyOnQueue:handler:
notifyReplayFinishedAndGenerateTraceContainer
notifyReplayerTargetCommandBuffersFinished
notifyReplayerTargetIndirectArgumentBuffers:
numFaces
numIterationsInLastPlayback
numberWithDouble:
numberWithInt:
numberWithLongLong:
numberWithUnsignedInt:
numberWithUnsignedInteger:
numberWithUnsignedLong:
numberWithUnsignedLongLong:
objectAtIndex:
objectAtIndexedSubscript:
objectForKey:
objectForKeyedSubscript:
objectMap
objectPayload
objectThreadExecutionWidth
objectWithId:
openGLModeEnabled
optimizeContentsForCPUAccess:
optimizeContentsForCPUAccess:slice:level:
optimizeContentsForGPUAccess:
optimizeContentsForGPUAccess:slice:level:
optimizeIndirectCommandBuffer:withRange:
origSourceMessageHandler
outlineTexture
parallelRenderCommandEncoderWithDescriptor:
parent
parentRelativeLevel
parentRelativeSlice
parentTexture
patchBuffer:bufferData:bufferLength:objectMap:
patchBuffers:objectMap:commandQueue:
patchingMode
path
pathExtension
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
pixelFormat
pixelHistoryCache
pixelValueFromTexture:level:slice:depthPlane:atX:y:inCommandBuffer:overHarvestForDepthStencil:
pixelValueFromTexture:level:slice:depthPlane:atX:y:inCommandBuffer:overHarvestForDepthStencil:completion:
pixelValueToTexture:buffer:level:slice:depthPlane:atX:y:inCommandBuffer:
playback
playbackArchive:
playbackEngine
playbackMode
playbackToFunction:subCommandIndex:withLoops:
playbackToFunction:withLoops:
player
plistPayload
pointerType
popDebugGroup
position
postVertexDump
postVertexDumpBuffer
postVertexDumpBufferIndex
postVertexDumpOutputs
postVertexDumpStride
predicateWithBlock:
prepareCommandEncoderForInstrumentedCall:generationOptions:
prepareForCaptureExecution
prepareLayerForPresent:
prepareWireframeTextureWithCommandBufferId:commandEncoderId:parallelEncoderId:pipelineId:renderPassDescriptor:
prepareWithCommandEncoderId:parallelEncoderId:pipelineId:renderPassDescriptor:
presentAtTime:
presentDrawable:
presentDrawable:atTime:
processAncestorMapData:
processArguments
processCommandBuffer:functionIndex:ancestorMapData:indirectArgumentBuffersData:resourceMapsData:driverDecodingData:
processIndirectArgumentBuffersData:
processReflection:isDrawCall:
processResourceMapsData:
profileBlockBackgroundQueue
profileBlockQueue
profileEncodersForProfileInfo:
profileFrameWithCounterListsForProfileInfo:
profileFrameWithCounterListsForProfileInfoAsync:
profileFrameWithPayload:
profileInfo
protectionOptions
push:
pushBlock:
qosLevel
queue
rangeValue
rasterSampleCount
rasterizationRateMap
readPatchingTable:
releaseDataForArgument:
releaseDataForPosition:
removeAllDebugMarkers
removeAllObjects
removeItemAtURL:error:
removeObject:
removeObjectAtIndex:
removeObjectForKey:
renderCommandEncoder
renderCommandEncoderWithDescriptor:
renderPassDescriptor
renderPipelineIdForUniqueIdentifier:
renderPipelineState
renderTargetArrayLength
renderTargetHeight
renderTargetWidth
renderTexture:withEncoder:enableBlending:layerIndex:
replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:
replaceRegion:mipmapLevel:withBytes:bytesPerRow:
replayControllerSupport
replayMessage
replayerBufferBaseVirtualAddressMap
replayerLayerForDrawableId:
replayerSamplerMap
replayerTextureMap
requestCounters:withIndex:
reserveResourceIndicesForResourceType:indices:indexCount:
reset
resetCommandsInBuffer:withRange:
resetFunctionPlayerData
resetLayersVisibility
resetPixelHistoryCache
resetTextureAccessCounters:region:mipLevel:slice:
resizeTexture:resolution:level:slice:depthPlane:inBuffer:withType:completion:
resolveCounterRange:
resolveCounters:inRange:destinationBuffer:destinationOffset:
resolveIABDecodingOperations
resolveTexture
resolveWithFuture:
resourceIndex
resourcePatchingTypeForResourceType:
resourceStateCommandEncoder
resourceStateCommandEncoderWithDescriptor:
respondsToSelector:
responsibleProcess
restoreBuffer:optimizedRanges:commandQueue:
restoreBuffer:withData:commandQueue:
restoreEncoder:withDescriptor:
result
resume
retain
retainCount
retainedReferences
rootResource
rotation
sampleCount
sampleCountersInBuffer:atSampleIndex:withBarrier:
sampleEncoderCounters
sampleMask
sampleSplitEncoderCounters
sampledComputeCommandEncoderWithDescriptor:programInfoBuffer:capacity:
samplerMap
saveComputeEncoder:withDescriptor:
saveEncoder:withDescriptor:player:
saveRenderEncoder:withDescriptor:
scanUnsignedLongLong:
scannerWithString:
screenSize
self
send:error:
send:inReplyTo:error:
setAccelerationStructure:atBufferIndex:
setAllowGPUOptimizedContents:
setAlphaBlendOperation:
setAlphaTestEnabled:
setAlphaTestFunction:
setAlphaTestReferenceValue:
setAlphaToCoverageEnabled:
setAlphaToOneEnabled:
setAnchorPoint:forLayerID:
setAnchorPointZ:
setAnimationDuration:
setAnimationTimingFunction:
setArchiveStack:
setArgumentBuffer:offset:
setArgumentBuffer:startOffset:arrayElement:
setBackFaceStencil:
setBackgroundGPUPriority:
setBackgroundGPUPriority:offset:
setBarrier
setBlendColorRed:green:blue:alpha:
setBlendingEnabled:
setBorderColorSPI:
setBounds:
setBuffer:offset:atIndex:
setBufferOffset:atIndex:
setBuffers:offsets:withRange:
setBytes:length:atIndex:
setClearColor:
setClearDepth:
setClearStencil:
setClipDistanceEnableMask:
setColorResolveTexture:slice:depthPlane:level:atIndex:
setColorResolveTexture:slice:depthPlane:level:yInvert:atIndex:
setColorStoreAction:atIndex:
setColorStoreActionOptions:atIndex:
setCommandBufferErrorOptions:
setCommandTypes:
setCommitSynchronously:
setCompareFunction:
setCompletionBlock:
setCompressionMode:
setComputeFunction:
setComputePipelineState:
setComputePipelineState:atIndex:
setConsistentGPUPerfStateTo:
setConsistentStateTo:
setConstantValue:type:atIndex:
setContentsScale:
setCounterListsPerPass:
setCounterSet:
setCpuCacheMode:
setCullMode:
setCurrentEncoderIndex:
setCustomBorderColorValue_0:
setCustomBorderColorValue_1:
setCustomBorderColorValue_2:
setCustomBorderColorValue_3:
setDataType:
setDebugWireframeLineWidth:playbackEngine:
setDebuggingEnabled:
setDefaultRasterSampleCount:
setDepth:
setDepthAttachment:
setDepthAttachmentPixelFormat:
setDepthBias:slopeScale:clamp:
setDepthClipMode:
setDepthClipModeSPI:
setDepthCompareFunction:
setDepthFailureOperation:
setDepthPlane:
setDepthResolveFilter:
setDepthResolveTexture:slice:depthPlane:level:
setDepthResolveTexture:slice:depthPlane:level:yInvert:
setDepthStencilPassOperation:
setDepthStencilState:
setDepthStoreAction:
setDepthStoreActionOptions:
setDepthWriteEnabled:
setDestinationRGBBlendFactor:
setDevice:
setDisableActions:
setDisableDeferredEndEncoding:
setDisableRunTimeCompilation:
setDitherEnabled:
setDrawableSize:
setEncoderFunctionIndex:
setExecutedDrawCallCount:
setExecutionEnabled:
setFastMathEnabled:
setFilteredGenerationOptions:
setForceResourceIndex:
setForceSeamsOnCubemapFiltering:
setFormat:
setFragmentAccelerationStructure:atBufferIndex:
setFragmentBuffer:offset:atIndex:
setFragmentBufferOffset:atIndex:
setFragmentBuffers:offsets:withRange:
setFragmentBytes:length:atIndex:
setFragmentDepthCompareClampMask:
setFragmentFunction:
setFragmentIntersectionFunctionTable:atBufferIndex:
setFragmentIntersectionFunctionTables:withBufferRange:
setFragmentSamplerState:atIndex:
setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setFragmentSamplerStates:withRange:
setFragmentTexture:atIndex:
setFragmentTexture:atTextureIndex:samplerState:atSamplerIndex:
setFragmentTextures:withRange:
setFragmentVisibleFunctionTable:atBufferIndex:
setFragmentVisibleFunctionTables:withBufferRange:
setFrameCounters:
setFramebufferOnly:
setFrontFaceStencil:
setFrontFacingWinding:
setGPUPriority:offset:
setHazardTrackingMode:
setHeight:
setImageblockSampleLength:
setImageblockWidth:height:
setIndex:
setIndexBufferIndex:
setIndexType:
setIndirectArgumentBufferDecodingData:
setIndirectArgumentManager:
setIndirectCommandBuffer:atIndex:
setIndirectCommandBuffers:withRange:
setIndirectCommandManager:
setInheritBuffers:
setInheritPipelineState:
setInputPrimitiveTopology:
setInterfaceOrientation:
setIntersectionFunctionTable:atBufferIndex:
setIntersectionFunctionTables:withBufferRange:
setIsDrawable:
setIsOpenGLQueue:
setLabel:
setLanguageVersion:
setLastInterestingFunctionIndex:
setLayerManager:
setLevel:
setLineWidth:
setLoadAction:
setLodAverage:
setLogicOperation:
setLogicOperationEnabled:
setLoopTimeLimit:
setMagFilter:
setMaxAnisotropy:
setMaxCommandBufferCount:
setMaxFragmentBufferBindCount:
setMaxKernelBufferBindCount:
setMaxTessellationFactor:
setMaxTotalThreadsPerThreadgroup:
setMaxVertexBufferBindCount:
setMeshBuffer:offset:atIndex:
setMeshBufferOffset:atIndex:
setMeshBuffers:offsets:withRange:
setMeshBytes:length:atIndex:
setMeshSamplerState:atIndex:
setMeshSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setMeshSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setMeshTexture:atIndex:
setMeshTextures:withRange:
setMessageHandler:
setMetalAssertionsEnabled:
setMinFilter:
setMipFilter:
setMipmapLevelCount:
setMockDepthTexture:
setMockStencilTexture:
setMutability:
setNormalizedCoordinates:
setObject:atIndexedSubscript:
setObject:forKey:
setObject:forKeyedSubscript:
setObjectBufferOffset:atIndex:
setObjectBuffers:offsets:withRange:
setObjectBytes:length:atIndex:
setObjectSamplerState:atIndex:
setObjectSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setObjectSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setObjectSamplerStates:withRange:
setObjectTexture:atIndex:
setObjectTextures:withRange:
setObjectThreadgroupMemoryLength:atIndex:
setOffset:
setOpenGLModeEnabled:
setOrigSourceMessageHandler:
setOverrideTriple:
setOwnerWithIdentity:
setParentGPUAddress:
setParentGPUSize:
setPipelineLibrary:
setPlaybackEngine:
setPlaybackMode:
setPointCoordLowerLeft:
setPointSize:
setPointSizeOutputVS:
setPointSmoothEnabled:
setPosition:
setPosition:forLayerID:
setPostVertexDumpBufferIndex:
setPreprocessorMacros:
setPresentsWithTransaction:
setPrimitiveRestartEnabled:
setPrimitiveRestartEnabled:index:
setProfilingEnabled:
setProvokingVertexMode:
setPurgeableState:
setQosLevel:
setQueue:
setRAddressMode:
setRasterSampleCount:
setRasterizationEnabled:
setRasterizationRateMap:
setReadMask:
setRenderPipelineState:
setRenderPipelineStates:withRange:
setRenderTargetArrayLength:
setRenderTargetHeight:
setRenderTargetWidth:
setReplayControllerSupport:
setReplayMessage:
setResolveDepthPlane:
setResolveLevel:
setResolveSlice:
setResolveTexture:
setResourceGroups:count:
setResourceIndex:
setResourceOptions:
setResponsibleProcess:
setResult:
setRgbBlendOperation:
setRotation:
setSAddressMode:
setSampleCoverage:
setSampleMask:
setSamplePositions:count:
setSamplerState:atIndex:
setSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setSamplerStates:withRange:
setScissorRects:count:
setShouldIgnoreCaptureFile:
setSignaledValue:
setSize:
setSkipRender:
setSlice:
setSource:
setSourceAlphaBlendFactor:
setSourceRGBBlendFactor:
setStageInRegion:
setStageInRegionWithIndirectBuffer:indirectBufferOffset:
setStageInputDescriptor:
setStatLocations:
setStatPixels:
setStatVertices:
setStencilAttachment:
setStencilAttachmentPixelFormat:
setStencilCleared
setStencilCompareFunction:
setStencilFailureOperation:
setStencilFrontReferenceValue:backReferenceValue:
setStencilReferenceValue:
setStencilResolveFilter:
setStencilResolveTexture:slice:depthPlane:level:
setStencilResolveTexture:slice:depthPlane:level:yInvert:
setStencilStoreAction:
setStencilStoreActionOptions:
setStepFunction:
setStepRate:
setStoreActionOptions:
setStride:
setSupportArgumentBuffers:
setSupportIndirectCommandBuffers:
setSwizzle:
setSwizzleKey:
setTAddressMode:
setTargetFunctionIndex:
setTargetSubCommandIndex:
setTessellationControlPointIndexType:
setTessellationFactorBuffer:offset:instanceStride:
setTessellationFactorFormat:
setTessellationFactorScale:
setTessellationFactorScaleEnabled:
setTessellationFactorStepFunction:
setTessellationOutputWindingOrder:
setTessellationPartitionMode:
setTexture:
setTexture:atIndex:
setTextures:withRange:
setThreadGroupSizeIsMultipleOfThreadExecutionWidth:
setThreadgroupMemoryLength:
setThreadgroupMemoryLength:atIndex:
setThreadgroupMemoryLength:offset:atIndex:
setThreadgroupSizeMatchesTileSize:
setTileAccelerationStructure:atBufferIndex:
setTileBuffer:offset:atIndex:
setTileBufferOffset:atIndex:
setTileBuffers:offsets:withRange:
setTileBytes:length:atIndex:
setTileFunction:
setTileHeight:
setTileIntersectionFunctionTable:atBufferIndex:
setTileIntersectionFunctionTables:withBufferRange:
setTileSamplerState:atIndex:
setTileSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setTileSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setTileTexture:atIndex:
setTileTextures:withRange:
setTileVisibleFunctionTable:atBufferIndex:
setTileVisibleFunctionTables:withBufferRange:
setTileWidth:
setTracingEnabled:
setTransform:
setTransform:forLayerID:withScreenToLayerScale:
setTransport:
setTriangleFillMode:
setTriangleFrontFillMode:backFillMode:
setTwoSideEnabled:
setType:
setUsage:
setValue:forKey:
setVertexAccelerationStructure:atBufferIndex:
setVertexAmplificationCount:viewMappings:
setVertexAmplificationMode:
setVertexAmplificationMode:value:
setVertexBufferOffset:atIndex:
setVertexBuffers:offsets:withRange:
setVertexBytes:length:atIndex:
setVertexDescriptor:
setVertexFunction:
setVertexIntersectionFunctionTable:atBufferIndex:
setVertexIntersectionFunctionTables:withBufferRange:
setVertexSamplerState:atIndex:
setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setVertexSamplerStates:withRange:
setVertexTexture:atIndex:
setVertexTextures:withRange:
setVertexVisibleFunctionTable:atBufferIndex:
setVertexVisibleFunctionTables:withBufferRange:
setViewport:
setViewportTransformEnabled:
setViewports:count:
setVisibilityResultBuffer:
setVisibleFunctionTable:atBufferIndex:
setVisibleFunctionTables:withBufferRange:
setWidth:
setWireframeLineColor:playbackEngine:
setWireframeRenderMode:
setWithArray:
setWriteMask:
setYInvert:
setupAllStatLocationsWithBlitOption:
setupBatchFilterForEncoders:
setupComputeCommandEncoder:withData:atIndex:forIndirectCommandBuffer:
setupCounterConfigurationAndGetFrameProfilerCounters
setupFrameTimeProfiling
setupProfileInfo:
setupProfilingForCounterLists
setupProfilingForListAtIndex:
setupRenderCommandEncoder:withData:atIndex:forIndirectCommandBuffer:
shaderDebuggerTraceGenerator
sharedController
shouldExecuteGraphicsFunction
shouldIgnoreCaptureFile
shrinkSourceSize:toDestSize:
size
slice
solidTexture
source
sparseSurfaceDefaultValue
sparseTileSizeWithTextureType:pixelFormat:sampleCount:
stageInputDescriptor
standardUserDefaults
statPixels
statVertices
staticThreadgroupMemoryLength
status
stencilAttachment
stencilAttachmentPixelFormat
stencilCompareFunction
stencilFailureOperation
stencilResolveFilter
stencilTextureFromTexture:commandBuffer:
stopFrameProfiling
storageMode
storeAction
storeActionOptions
stringPayload
stringWithFormat:
stringWithUTF8String:
strongLayerManager
structType
subdivideCounterList:
substringWithRange:
superclass
supportArgumentBuffers
supportIndirectCommandBuffers
supportsArgumentBuffersTier2
supportsFeatureSet:
swizzleKey
synchronizeResource:
targetFunctionIndex
targetFunctionNeedsSeparatedPostVertexDump
targetSubCommandIndex
tessellationControlPointIndexType
tessellationFactorFormat
tessellationFactorStepFunction
tessellationOutputWindingOrder
tessellationPartitionMode
tessellationWireframeLineWidth
texture2DDescriptorWithPixelFormat:width:height:mipmapped:
textureBarrier
textureFromTexture:slice:level:depthPlane:commandBuffer:
textureMap
textureType
threadExecutionWidth
threadgroupSizeMatchesTileSize
thumbnailCache
thumbnailTexture:
tileArguments
tileBuffers
tileBytesForKey:
tileBytesKeyAtIndex:
tileFunction
tileHeight
tileWidth
traceBufferIndex
transform
transport
type
unarchivedObjectOfClass:fromData:error:
unarchivedObjectOfClasses:fromData:error:
unfilteredResourceOptions
uniqueIdentifier
uniqueIdentifierForComputePipelineAtIndex:inIndirectArgumentBuffer:atOffset:
uniqueIdentifierForIndirectCommandBufferAtIndex:inIndirectArgumentBuffer:atOffset:
uniqueIdentifierForRenderPipelineAtIndex:inIndirectArgumentBuffer:atOffset:
uniqueIdentifierForSamplerAtIndex:inIndirectArgumentBuffer:atOffset:
uniqueIdentifierForTextureAtIndex:inIndirectArgumentBuffer:atOffset:
unmapShaderSampleBuffer
unsignedIntValue
unsignedIntegerValue
unsignedLongLongValue
unsignedLongValue
updateFence:
updateFence:afterStages:
updateLayer:contentRect:contentsScale:properties:
updateLayer:contentRect:contentsScale:properties:windowRect:
updateReplayerLayer:withOriginalLayer:
updateTextureMapping:mode:indirectBuffer:indirectBufferOffset:
updateTextureMapping:mode:region:mipLevel:slice:
uploadDriverDecodingData:
usage
useHeap:
useHeaps:count:stages:
useResource:usage:
useResource:usage:stages:
useResources:count:usage:
useResources:count:usage:stages:
uuid
validate:width:height:
valueForKey:
vertexAmplificationMode
vertexBuffers
vertexBuiltInArguments
vertexBytesForKey:
vertexBytesKeyAtIndex:
vertexDescriptor
vertexFunction
verticalSampleStorage
viewports
virtualAddressForBufferAtIndex:inIndirectArgumentBuffer:atOffset:
waitForCommmandBuffersCompletion
waitForFence:
waitForFence:beforeStages:
waitUntilComplete
waitUntilCompleted
waitUntilResolved
waitUntilScheduled
width
wireframeLineColor
wireframeLineWidth
wireframeRenderMode
wireframeTexture
writePatchingTableAsJson:
writeToFile:atomically:
writeToURL:atomically:
zone
DYMTLFunctionPlayer
DYMTLCommonFunctionPlayer
DYMTLDebugWireframeRenderer
IndirectRenderCommandEncoderState
IndirectComputeCommandEncoderState
MTLBuffer
MTLResource
NSObject
MTLRenderPipelineState
MTLComputePipelineState
DYMTLIndirectCommandBufferManager
DYMTLIndirectCommandBufferTranslateDelegate
DYMTLPostVertexDump
DYIABPatcher
DYMTLLibraryInfo
DYMTLIndirectCommandBufferInfo
DYMTLTextureRenderer
DYMTLIndirectArgumentBufferManager
MTLTexture
MTLSamplerState
MTLIndirectCommandBuffer
MTLRenderCommandEncoder
MTLCommandEncoder
MTLComputeCommandEncoder
MTLTextureSPI
MTLResourceSPI
DYMTLShaderDebuggerTraceGenerator
DYMTLParallelRenderCommandEncoderStateTracker
DYMTLTileMemoryExtractor
DYMTLDebugPlaybackEngineCounterSupport
PixelHistoryEncoderStateTracking
MTLBlitCommandEncoder
MTLCommandBuffer
MTLParallelRenderCommandEncoder
DYLayerManager
DYMTLCommonDebugFunctionPlayer
DYMTLComputeCommandEncoderStateTracker
q!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
DYMTLPixelHistoryDrawStatsSupport
DYMTLRenderCommandEncoderStateTracker
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
DYReplayControllerQueue
DYReplayController
^v24@0:8Q16
@16@0:8
@24@0:8@16
v16@0:8
@32@0:8Q16@24
v32@0:8@16Q24
@24@0:8Q16
v24@0:8Q16
Q24@0:8@16
Q32@0:8@16^v24
^v16@0:8
r^v24@0:8Q16
B24@0:8Q16
v40@0:8Q16Q24Q32
@48@0:8@16*24Q32Q40
B16@0:8
v24@0:8@16
{unordered_map<unsigned long long, id, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, id>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, id>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, id>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, id>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, id>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, id>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, id>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, id>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
@"<MTLCommandQueueSPI>"
{unordered_map<unsigned long long, NSData *, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, NSData *>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, NSData *>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, NSData *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, NSData *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, NSData *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSData *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSData *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSData *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSData *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSData *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSData *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSData *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, NSData *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSData *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, NSData *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, NSData *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
@"DYMTLIndirectArgumentBufferManager"
@"DYMTLIndirectCommandBufferManager"
@"<MTLDevice>"
{unordered_map<unsigned long long, id<CAMetalDrawable>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, id<CAMetalDrawable>>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{unordered_map<unsigned long long, bool, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, bool>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, bool>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, bool>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, bool>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, bool>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, bool>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, bool>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, bool>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, bool>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, bool>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, bool>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, bool>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, bool>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, bool>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, bool>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, bool>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
@"<DYLayerManager>"
v40@0:8@16@24^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}32
q56@0:8@16@24@32@40^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}48
B32@0:8@16@24
B24@0:8^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}16
B48@0:8^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}16Q24Q32Q40
q56@0:8Q16Q24Q32Q40^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}48
@"DYMTLCommonDebugFunctionPlayer"
@"<MTLLibrary>"
@"<MTLFunction>"
@"MTLTextureDescriptor"
@"<MTLTexture>"
@"MTLRenderPassColorAttachmentDescriptor"
@"MTLRenderPassDescriptor"
@"<MTLRenderPipelineState>"
@"<MTLComputePipelineState>"
@"<DYMTLStatefulRenderCommandEncoder>"
@"<MTLCommandBufferSPI>"
@"<DYMTLStatefulParallelRenderCommandEncoder>"
@40@0:8@16@24@32
v32@0:8@16@24
[31@"<MTLBuffer>"]
[31^v]
[31Q]
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
Q24@0:8Q16
v24@0:8@"NSString"16
@"<MTLDevice>"16@0:8
@"<MTLHeap>"16@0:8
v32@0:8{_NSRange=QQ}16
@40@0:8@16Q24Q32
v40@0:8@16{_NSRange=QQ}24
@"<MTLTexture>"40@0:8@"MTLTextureDescriptor"16Q24Q32
v40@0:8@"NSString"16{_NSRange=QQ}24
Q40@0:8{?=QQQ}16
@32@0:8@16Q24
@32@0:8@16^@24
{MTLResourceID=Q}16@0:8
@"<MTLFunctionHandle>"32@0:8@"<MTLFunction>"16Q24
@"<MTLVisibleFunctionTable>"32@0:8@"MTLVisibleFunctionTableDescriptor"16Q24
@"<MTLIntersectionFunctionTable>"32@0:8@"MTLIntersectionFunctionTableDescriptor"16Q24
@"<MTLRenderPipelineState>"32@0:8@"MTLRenderPipelineFunctionsDescriptor"16^@24
@"<MTLFunctionHandle>"24@0:8@"<MTLFunction>"16
@"<MTLComputePipelineState>"32@0:8@"NSArray"16^@24
@"<MTLVisibleFunctionTable>"24@0:8@"MTLVisibleFunctionTableDescriptor"16
@"<MTLIntersectionFunctionTable>"24@0:8@"MTLIntersectionFunctionTableDescriptor"16
{pair<unsigned long long, unsigned long long>=QQ}24@0:8Q16
v32@0:8Q16Q24
v48@0:8@16r*24Q32@40
I56@0:8@16r*24{_NSRange=QQ}32@48
v40@0:8@16r*24@32
Q48@0:8@16r*24Q32@40
@48@0:8r*16{_NSRange=QQ}24r^{CoreFunction=IISS(?=QQ){Argument=^vIIISS}[16{Argument=^vIIISS}]II^v^v}40
@32@0:8@16@24
@"DYMTLFunctionPlayer"
{unordered_map<unsigned long long, unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, unsigned long long>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, unsigned long long>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, unsigned long long>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, unsigned long long>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, unsigned long long>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, unsigned long long>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, unsigned long long>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{vector<GPUTools::MTL::Utils::DYMTLBufferGPUAddress, std::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>>="__begin_"^{DYMTLBufferGPUAddress}"__end_"^{DYMTLBufferGPUAddress}"__end_cap_"{__compressed_pair<GPUTools::MTL::Utils::DYMTLBufferGPUAddress *, std::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>>="__value_"^{DYMTLBufferGPUAddress}}}
B40@0:8Q16Q24Q32
@"<MTLBuffer>"
@20@0:8i16
v64@0:8{DYIABPatchingOp={?=QQ}{?=QQ}}16{DYCommandBufferUID=QI}48
^v32@0:8{DYCommandBufferUID=QI}16
B48@0:8{DYCommandBufferUID=QI}16r^v32@40
B48@0:8Q16^v24Q32r^v40
i16@0:8
{unordered_map<DYCommandBufferUID, std::set<BufferEntry>, DYCommandBufferUIDHash, std::equal_to<DYCommandBufferUID>, std::allocator<std::pair<const DYCommandBufferUID, std::set<BufferEntry>>>>="__table_"{__hash_table<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, std::__unordered_map_hasher<DYCommandBufferUID, std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, DYCommandBufferUIDHash, std::equal_to<DYCommandBufferUID>, true>, std::__unordered_map_equal<DYCommandBufferUID, std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, std::equal_to<DYCommandBufferUID>, DYCommandBufferUIDHash, true>, std::allocator<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<DYCommandBufferUID, std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, DYCommandBufferUIDHash, std::equal_to<DYCommandBufferUID>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<DYCommandBufferUID, std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, std::equal_to<DYCommandBufferUID>, DYCommandBufferUIDHash, true>>="__value_"f}}}
{unordered_map<unsigned long long, std::vector<PatchingRequest>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::vector<PatchingRequest>>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{DYCommandBufferUID="objectId"Q"functionIndex"I}
@40@0:8Q16@24@32
@"MTLCompileOptions"
@40@0:8Q16Q24Q32
v40@0:8@16@24B32I36
v32@0:8f16f20f24f28
@"MTLRenderPipelineDescriptor"
@"MTLDepthStencilDescriptor"
{UniformData="blendColor"[4f]"layerIndex"I"padding"[3I]}
@"<MTLSamplerState>"
v60@0:8Q16I24r^v28r^v36r^v44@52
v24@0:8r^v16
v56@0:8Q16Q24Q32Q40^v48
v32@0:8Q16^v24
v40@0:8Q16^v24^v32
v48@0:8r^v16Q24^v32^v40
@32@0:8r^v16^@24
v24@0:8^v16
v48@0:8@16Q24@32@40
@"NSObject<OS_dispatch_data>"
{vector<DYCommandBufferUID, std::allocator<DYCommandBufferUID>>="__begin_"^{DYCommandBufferUID}"__end_"^{DYCommandBufferUID}"__end_cap_"{__compressed_pair<DYCommandBufferUID *, std::allocator<DYCommandBufferUID>>="__value_"^{DYCommandBufferUID}}}
{vector<std::vector<std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, std::allocator<std::vector<std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::vector<std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>> *, std::allocator<std::vector<std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>>>="__value_"^v}}
{vector<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>, std::allocator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>> *, std::allocator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>>="__value_"^v}}
{map<unsigned long long, std::vector<DYMTLOriginalProcessBuffer>, std::less<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::vector<DYMTLOriginalProcessBuffer>>>>="__tree_"{__tree<std::__value_type<unsigned long long, std::vector<DYMTLOriginalProcessBuffer>>, std::__map_value_compare<unsigned long long, std::__value_type<unsigned long long, std::vector<DYMTLOriginalProcessBuffer>>, std::less<unsigned long long>, true>, std::allocator<std::__value_type<unsigned long long, std::vector<DYMTLOriginalProcessBuffer>>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned long long, std::vector<DYMTLOriginalProcessBuffer>>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<unsigned long long, std::__value_type<unsigned long long, std::vector<DYMTLOriginalProcessBuffer>>, std::less<unsigned long long>, true>>="__value_"Q}}}
{unordered_map<unsigned long long, std::vector<unsigned long long>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::vector<unsigned long long>>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{unordered_map<unsigned long long, id<MTLSamplerState>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, id<MTLSamplerState>>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{unordered_map<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{unordered_map<unsigned long long, std::set<DYMTLIABDecodingOp>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::set<DYMTLIABDecodingOp>>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{set<unsigned long long, std::less<unsigned long long>, std::allocator<unsigned long long>>="__tree_"{__tree<unsigned long long, std::less<unsigned long long>, std::allocator<unsigned long long>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<unsigned long long, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::less<unsigned long long>>="__value_"Q}}}
{vector<DYMTLReplayerIAB, std::allocator<DYMTLReplayerIAB>>="__begin_"^{DYMTLReplayerIAB}"__end_"^{DYMTLReplayerIAB}"__end_cap_"{__compressed_pair<DYMTLReplayerIAB *, std::allocator<DYMTLReplayerIAB>>="__value_"^{DYMTLReplayerIAB}}}
{map<unsigned long long, unsigned long long, std::less<unsigned long long>, std::allocator<std::pair<const unsigned long long, unsigned long long>>>="__tree_"{__tree<std::__value_type<unsigned long long, unsigned long long>, std::__map_value_compare<unsigned long long, std::__value_type<unsigned long long, unsigned long long>, std::less<unsigned long long>, true>, std::allocator<std::__value_type<unsigned long long, unsigned long long>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned long long, unsigned long long>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<unsigned long long, std::__value_type<unsigned long long, unsigned long long>, std::less<unsigned long long>, true>>="__value_"Q}}}
[6Q]
@"DYIABPatcher"
v104@0:8^v16Q24Q32{?={?=QQQ}{?=QQQ}}40Q88Q96
v104@0:8{?={?=QQQ}{?=QQQ}}16Q64Q72r^v80Q88Q96
v88@0:8^v16Q24{?={?=QQQ}{?=QQQ}}32Q80
v88@0:8{?={?=QQQ}{?=QQQ}}16Q64r^v72Q80
@64@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48
@68@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64
^{__IOSurface=}16@0:8
q16@0:8
{?=CCCC}16@0:8
@"<MTLTexture>"24@0:8Q16
@"<MTLTexture>"64@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48
@"<MTLTexture>"68@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64
@"<MTLResource>"16@0:8
@"<MTLTexture>"16@0:8
@"<MTLBuffer>"16@0:8
@"<MTLIndirectRenderCommand>"24@0:8Q16
@"<MTLIndirectComputeCommand>"24@0:8Q16
v40@0:8r^v16Q24Q32
v40@0:8@16Q24Q32
v48@0:8r^@16r^Q24{_NSRange=QQ}32
v40@0:8r^@16{_NSRange=QQ}24
v40@0:8@16f24f28Q32
v56@0:8r^@16r^f24r^f32{_NSRange=QQ}40
v64@0:8{?=dddddd}16
v32@0:8r^{?=dddddd}16Q24
v32@0:8Q16r^{?=II}24
v28@0:8f16f20f24
v48@0:8{?=QQQQ}16
v32@0:8r^{?=QQQQ}16Q24
v20@0:8I16
v24@0:8I16I20
v88@0:8{?=QQQ}16{?=QQQ}40{?=QQQ}64
v80@0:8@16Q24{?=QQQ}32{?=QQQ}56
v48@0:8Q16Q24Q32Q40
v64@0:8Q16Q24Q32@40Q48Q56
v56@0:8Q16Q24Q32@40Q48
v56@0:8Q16Q24Q32Q40Q48
v80@0:8Q16Q24Q32@40Q48Q56q64Q72
v40@0:8Q16@24Q32
v64@0:8Q16Q24@32Q40@48Q56
v20@0:8f16
v72@0:8Q16Q24Q32@40Q48Q56Q64
v56@0:8Q16@24Q32@40Q48
v88@0:8Q16Q24Q32@40Q48@56Q64Q72Q80
v72@0:8Q16@24Q32@40Q48@56Q64
v40@0:8{?=QQQ}16
v40@0:8r^@16Q24Q32
v48@0:8r^@16Q24Q32Q40
v32@0:8r^@16Q24
v40@0:8@16@24Q32
v36@0:8@16Q24B32
v24@0:8@"<MTLRenderPipelineState>"16
v40@0:8@"<MTLBuffer>"16Q24Q32
v32@0:8@"<MTLTexture>"16Q24
v32@0:8@"<MTLSamplerState>"16Q24
v40@0:8@"<MTLSamplerState>"16f24f28Q32
v32@0:8@"<MTLVisibleFunctionTable>"16Q24
v32@0:8@"<MTLIntersectionFunctionTable>"16Q24
v32@0:8@"<MTLAccelerationStructure>"16Q24
v24@0:8@"<MTLDepthStencilState>"16
v80@0:8@"<MTLBuffer>"16Q24{?=QQQ}32{?=QQQ}56
v64@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56
v56@0:8Q16Q24Q32@"<MTLBuffer>"40Q48
v80@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56q64Q72
v40@0:8Q16@"<MTLBuffer>"24Q32
v64@0:8Q16Q24@"<MTLBuffer>"32Q40@"<MTLBuffer>"48Q56
v32@0:8@"<MTLFence>"16Q24
v72@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56Q64
v56@0:8Q16@"<MTLBuffer>"24Q32@"<MTLBuffer>"40Q48
v88@0:8Q16Q24Q32@"<MTLBuffer>"40Q48@"<MTLBuffer>"56Q64Q72Q80
v72@0:8Q16@"<MTLBuffer>"24Q32@"<MTLBuffer>"40Q48@"<MTLBuffer>"56Q64
v32@0:8@"<MTLResource>"16Q24
v40@0:8@"<MTLResource>"16Q24Q32
v24@0:8@"<MTLHeap>"16
v32@0:8@"<MTLHeap>"16Q24
v40@0:8@"<MTLIndirectCommandBuffer>"16{_NSRange=QQ}24
v40@0:8@"<MTLIndirectCommandBuffer>"16@"<MTLBuffer>"24Q32
v36@0:8@"<MTLCounterSampleBuffer>"16Q24B32
v64@0:8{?={?=QQQ}{?=QQQ}}16
v64@0:8{?=QQQ}16{?=QQQ}40
v56@0:8@16Q24{?=QQQ}32
v24@0:8@"<MTLComputePipelineState>"16
v32@0:8@"<MTLBuffer>"16Q24
v56@0:8@"<MTLBuffer>"16Q24{?=QQQ}32
v24@0:8@"<MTLFence>"16
B32@0:8r^@16Q24
v20@0:8i16
i20@0:8I16
B24@0:8@"<MTLResource>"16
I16@0:8
@48@0:8Q16Q24Q32Q40
@32@0:8Q16Q24
@72@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48Q64
@76@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64Q68
@"<MTLTexture>"48@0:8Q16Q24Q32Q40
@"<MTLTexture>"32@0:8Q16Q24
@"<MTLTexture>"72@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48Q64
@"<MTLTexture>"76@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64Q68
B36@0:8@16@24i32
v32@0:8Q16@24
@"NSString"
{map<MTLTextureType, id<MTLTexture>, std::less<MTLTextureType>, std::allocator<std::pair<const MTLTextureType, id<MTLTexture>>>>="__tree_"{__tree<std::__value_type<MTLTextureType, id<MTLTexture>>, std::__map_value_compare<MTLTextureType, std::__value_type<MTLTextureType, id<MTLTexture>>, std::less<MTLTextureType>, true>, std::allocator<std::__value_type<MTLTextureType, id<MTLTexture>>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<MTLTextureType, id<MTLTexture>>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<MTLTextureType, std::__value_type<MTLTextureType, id<MTLTexture>>, std::less<MTLTextureType>, true>>="__value_"Q}}}
@"<MTLArgumentEncoder>"
{map<id<MTLSamplerState>, unsigned long long, std::less<id<MTLSamplerState>>, std::allocator<std::pair<const id<MTLSamplerState>, unsigned long long>>>="__tree_"{__tree<std::__value_type<id<MTLSamplerState>, unsigned long long>, std::__map_value_compare<id<MTLSamplerState>, std::__value_type<id<MTLSamplerState>, unsigned long long>, std::less<id<MTLSamplerState>>, true>, std::allocator<std::__value_type<id<MTLSamplerState>, unsigned long long>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<id<MTLSamplerState>, unsigned long long>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<id<MTLSamplerState>, std::__value_type<id<MTLSamplerState>, unsigned long long>, std::less<id<MTLSamplerState>>, true>>="__value_"Q}}}
@"NSDictionary"
{unordered_map<unsigned long, id<MTLBuffer>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, id<MTLBuffer>>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long, id<MTLBuffer>>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, id<MTLBuffer>>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, id<MTLBuffer>>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, id<MTLBuffer>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, id<MTLBuffer>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, id<MTLBuffer>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, id<MTLBuffer>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, id<MTLBuffer>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, id<MTLBuffer>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, id<MTLBuffer>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, id<MTLBuffer>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, id<MTLBuffer>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, id<MTLBuffer>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, id<MTLBuffer>>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, id<MTLBuffer>>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>>="__value_"f}}}
@"NSData"
@"<MTLParallelRenderCommandEncoder>"
@80@0:8@16@24{?=QQQ}32{?=QQQ}56
v28@0:8@16B24
B28@0:8@16B24
v32@0:8@16^v24
@48@0:8@16^v24@32Q40
@56@0:8@16^v24@32@40Q48
@24@0:8^{DYMTLImageBlockMember=@@QQQ}16
@32@0:8^{DYMTLImageBlockMember=@@QQQ}16Q24
@40@0:8^{DYMTLImageBlockMember=@@QQQ}16@24Q32
@"<MTLDeviceSPI>"
{?="width"Q"height"Q"depth"Q}
{vector<DYMTLImageBlockArgument *, std::allocator<DYMTLImageBlockArgument *>>="__begin_"^^{DYMTLImageBlockArgument}"__end_"^^{DYMTLImageBlockArgument}"__end_cap_"{__compressed_pair<DYMTLImageBlockArgument **, std::allocator<DYMTLImageBlockArgument *>>="__value_"^^{DYMTLImageBlockArgument}}}
B52@0:8^v16r^v24@32@40B48
B48@0:8^v16r^v24@32@40
@36@0:8@16B24^v28
@36@0:8@16B24B28I32
@28@0:8@16B24
@28@0:8@16I24
Q28@0:8@16I24
{vector<std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>, std::allocator<std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> *, std::allocator<std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>>>="__value_"^v}}
{vector<std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>, std::allocator<std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> *, std::allocator<std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>>>="__value_"^v}}
{vector<unsigned long long, std::allocator<unsigned long long>>="__begin_"^Q"__end_"^Q"__end_cap_"{__compressed_pair<unsigned long long *, std::allocator<unsigned long long>>="__value_"^Q}}
@"NSMutableDictionary"
@"DYPlaybackEngine"
v136@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104{?=QQQ}112
v120@0:8@16Q24Q32Q40{?=QQQ}48@72Q80Q88{?=QQQ}96
v128@0:8@16Q24Q32Q40{?=QQQ}48@72Q80Q88{?=QQQ}96Q120
v120@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104Q112
v128@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104Q112Q120
v44@0:8@16{_NSRange=QQ}24C40
v80@0:8@16Q24Q32@40Q48Q56Q64Q72
v56@0:8@16Q24@32Q40Q48
v108@0:8@16{?={?=QQQ}{?=QQQ}}24Q72Q80B88@92Q100
v88@0:8@16{?={?=QQQ}{?=QQQ}}24Q72Q80
v56@0:8@16{_NSRange=QQ}24@40Q48
v24@0:8@"<MTLResource>"16
v40@0:8@"<MTLTexture>"16Q24Q32
v136@0:8@"<MTLTexture>"16Q24Q32{?=QQQ}40{?=QQQ}64@"<MTLTexture>"88Q96Q104{?=QQQ}112
v120@0:8@"<MTLBuffer>"16Q24Q32Q40{?=QQQ}48@"<MTLTexture>"72Q80Q88{?=QQQ}96
v128@0:8@"<MTLBuffer>"16Q24Q32Q40{?=QQQ}48@"<MTLTexture>"72Q80Q88{?=QQQ}96Q120
v120@0:8@"<MTLTexture>"16Q24Q32{?=QQQ}40{?=QQQ}64@"<MTLBuffer>"88Q96Q104Q112
v128@0:8@"<MTLTexture>"16Q24Q32{?=QQQ}40{?=QQQ}64@"<MTLBuffer>"88Q96Q104Q112Q120
v24@0:8@"<MTLTexture>"16
v44@0:8@"<MTLBuffer>"16{_NSRange=QQ}24C40
v80@0:8@"<MTLTexture>"16Q24Q32@"<MTLTexture>"40Q48Q56Q64Q72
v32@0:8@"<MTLTexture>"16@"<MTLTexture>"24
v56@0:8@"<MTLBuffer>"16Q24@"<MTLBuffer>"32Q40Q48
v108@0:8@"<MTLTexture>"16{?={?=QQQ}{?=QQQ}}24Q72Q80B88@"<MTLBuffer>"92Q100
v88@0:8@"<MTLTexture>"16{?={?=QQQ}{?=QQQ}}24Q72Q80
v56@0:8@"<MTLIndirectCommandBuffer>"16{_NSRange=QQ}24@"<MTLIndirectCommandBuffer>"40Q48
v56@0:8@"<MTLCounterSampleBuffer>"16{_NSRange=QQ}24@"<MTLBuffer>"40Q48
v24@0:8@?16
v32@0:8@16d24
d16@0:8
v24@0:8@?<v@?@"<MTLCommandBuffer>">16
v24@0:8@"<MTLDrawable>"16
v32@0:8@"<MTLDrawable>"16d24
@"<MTLBlitCommandEncoder>"16@0:8
@"<MTLRenderCommandEncoder>"24@0:8@"MTLRenderPassDescriptor"16
@"<MTLComputeCommandEncoder>"24@0:8@"MTLComputePassDescriptor"16
@"<MTLBlitCommandEncoder>"24@0:8@"MTLBlitPassDescriptor"16
@"<MTLComputeCommandEncoder>"16@0:8
@"<MTLComputeCommandEncoder>"24@0:8Q16
v32@0:8@"<MTLEvent>"16Q24
@"<MTLParallelRenderCommandEncoder>"24@0:8@"MTLRenderPassDescriptor"16
@"<MTLResourceStateCommandEncoder>"16@0:8
@"<MTLResourceStateCommandEncoder>"24@0:8@"MTLResourceStatePassDescriptor"16
@"<MTLAccelerationStructureCommandEncoder>"16@0:8
@"<MTLAccelerationStructureCommandEncoder>"24@0:8@"MTLAccelerationStructurePassDescriptor"16
@"<MTLCommandQueue>"16@0:8
@"<MTLLogContainer>"16@0:8
@"NSError"16@0:8
@"<MTLRenderCommandEncoder>"16@0:8
@76@0:8Q16{CGRect={CGPoint=dd}{CGSize=dd}}24d56@64B72
v72@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24d56@64
v40@0:8r^{Argument=^vIIISS}16Q24r^v32
v32@0:8r^{Argument=^vIIISS}16Q24
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
@"CALayer"76@0:8Q16{CGRect={CGPoint=dd}{CGSize=dd}}24d56@"NSDictionary"64B72
v72@0:8@"CALayer"16{CGRect={CGPoint=dd}{CGSize=dd}}24d56@"NSDictionary"64
@"CALayer"24@0:8Q16
@"CALayer"16@0:8
v24@0:8@"CALayer"16
@56@0:8@16{?=QQQ}24@48
v36@0:8^{CoreFunction=IISS(?=QQ){Argument=^vIIISS}[16{Argument=^vIIISS}]II^v^v}16Q24I32
v28@0:8B16@20
@56@0:8@16@24Q32Q40@?48
@72@0:8@16Q24@32@40Q48Q56@?64
@72@0:8Q16@24Q32@40@48Q56Q64
@96@0:8Q16Q24Q32Q40@48Q56@64@72Q80Q88
v36@0:8^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}16Q24B32
v20@0:8B16
v24@0:8B16I20
@56@0:8@16Q24Q32Q40@48
{AttachmentInfo=QQQQ}24@0:8Q16
v32@0:8^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}16Q24
v32@0:8^v16Q24
Q40@0:8Q16^@24r^*32
v24@0:8q16
{unordered_map<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{vector<unsigned long, std::allocator<unsigned long>>="__begin_"^Q"__end_"^Q"__end_cap_"{__compressed_pair<unsigned long *, std::allocator<unsigned long>>="__value_"^Q}}
{unordered_map<unsigned long long, CommandBufferInfo, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, CommandBufferInfo>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, CommandBufferInfo>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, CommandBufferInfo>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, CommandBufferInfo>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, CommandBufferInfo>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, CommandBufferInfo>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, CommandBufferInfo>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, CommandBufferInfo>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{unordered_map<unsigned long long, EncoderInfo, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, EncoderInfo>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, EncoderInfo>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, EncoderInfo>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, EncoderInfo>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, EncoderInfo>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, EncoderInfo>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, EncoderInfo>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, EncoderInfo>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{unordered_set<unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<unsigned long long>>="__table_"{__hash_table<unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<unsigned long long>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *>, std::allocator<std::__hash_node<unsigned long long, void *>>>="__value_"{__hash_node_base<std::__hash_node<unsigned long long, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::hash<unsigned long long>>="__value_"Q}"__p3_"{__compressed_pair<float, std::equal_to<unsigned long long>>="__value_"f}}}
@"DYMTLDebugWireframeRenderer"
{DYMTLRenderPassDescriptor="visibilityResultBuffer"Q"renderTargetArrayLength"Q"colorAttachments"[8{DYMTLRenderPassAttachmentDescriptor="texture"Q"level"Q"slice"Q"depthPlane"Q"resolveTexture"Q"resolveLevel"Q"resolveSlice"Q"resolveDepthPlane"Q"loadAction"Q"storeAction"Q"storeActionOptions"Q"clearValue"{DYMTLClearValue=""(?=""{?="red"d"green"d"blue"d"alpha"d}"colors"[4d])}"yInvert"B"depthResolveFilter"Q"stencilResolveFilter"Q}]"depthAttachment"{DYMTLRenderPassAttachmentDescriptor="texture"Q"level"Q"slice"Q"depthPlane"Q"resolveTexture"Q"resolveLevel"Q"resolveSlice"Q"resolveDepthPlane"Q"loadAction"Q"storeAction"Q"storeActionOptions"Q"clearValue"{DYMTLClearValue=""(?=""{?="red"d"green"d"blue"d"alpha"d}"colors"[4d])}"yInvert"B"depthResolveFilter"Q"stencilResolveFilter"Q}"stencilAttachment"{DYMTLRenderPassAttachmentDescriptor="texture"Q"level"Q"slice"Q"depthPlane"Q"resolveTexture"Q"resolveLevel"Q"resolveSlice"Q"resolveDepthPlane"Q"loadAction"Q"storeAction"Q"storeActionOptions"Q"clearValue"{DYMTLClearValue=""(?=""{?="red"d"green"d"blue"d"alpha"d}"colors"[4d])}"yInvert"B"depthResolveFilter"Q"stencilResolveFilter"Q}"imageblockSampleLength"Q"threadgroupMemoryLength"Q"tileWidth"Q"tileHeight"Q"renderTargetWidth"Q"renderTargetHeight"Q"defaultRasterSampleCount"Q"rasterizationRateMap"Q"customSamplePositions"[8{DYMTLSamplePosition="x"f"y"f}]"customSampleCount"Q"openGLModeEnabled"B"ditherEnabled"B}
@"NSArray"
{unordered_map<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>>="__value_"f}}}
{vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<unsigned int, unsigned int> *, std::allocator<std::pair<unsigned int, unsigned int>>>="__value_"^v}}
{?="origin"{?="x"Q"y"Q"z"Q}"size"{?="width"Q"height"Q"depth"Q}}
{vector<bool, std::allocator<bool>>="__begin_"^Q"__size_"Q"__cap_alloc_"{__compressed_pair<unsigned long, std::allocator<unsigned long>>="__value_"Q}}
@"DYMTLPostVertexDump"
@"DYMTLTileMemoryExtractor"
@"DYMTLShaderDebuggerTraceGenerator"
@"DYMTLTextureRenderer"
{unordered_map<unsigned long long, CAMetalLayer *, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, CAMetalLayer *>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, CAMetalLayer *>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, CAMetalLayer *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, CAMetalLayer *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, CAMetalLayer *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, CAMetalLayer *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, CAMetalLayer *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, CAMetalLayer *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{tuple<unsigned long long, unsigned long long>="__base_"{__tuple_impl<std::__tuple_indices<0, 1>, unsigned long long, unsigned long long>="__value_"Q"__value_"Q}}
@"<MTLFence>"
@"DYMTLPixelHistoryDrawStatsSupport"
@"NSMutableArray"
v32@0:8@16@?24
@"<MTLComputePipelineState>"16@0:8
v24@0:8@?<v@?^{DYMTLBoundBufferInfo=@^vQ}Q^B>16
v24@0:8@?<v@?@"<MTLTexture>"Q^B>16
v24@0:8@?<v@?^{DYMTLBoundSamplerInfo=@ff}Q^B>16
v32@0:8@"<MTLComputeCommandEncoder>"16@?<^v@?^vQ>24
@"<MTLComputeCommandEncoderSPI>"
{vector<id<MTLHeap>, std::allocator<id<MTLHeap>>>="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<__strong id<MTLHeap> *, std::allocator<id<MTLHeap>>>="__value_"^@}}
{vector<DYMTLUsedResourceInfo, std::allocator<DYMTLUsedResourceInfo>>="__begin_"^{DYMTLUsedResourceInfo}"__end_"^{DYMTLUsedResourceInfo}"__end_cap_"{__compressed_pair<DYMTLUsedResourceInfo *, std::allocator<DYMTLUsedResourceInfo>>="__value_"^{DYMTLUsedResourceInfo}}}
[31{DYMTLBoundBufferInfo="m_buffer"@"<MTLBuffer>""m_bytes"^v"m_offsetOrLength"Q}]
[128@"<MTLTexture>"]
[16{DYMTLBoundSamplerInfo="sampler"@"<MTLSamplerState>""minLOD"f"maxLOD"f}]
B40@0:8@16@24^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}32
B48@0:8Q16Q24Q32^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}40
B48@0:8@16@24@32^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}40
B40@0:8@16@24@32
B80@0:8@16@24@32@40@48Q56Q64Q72
v40@0:8Q16Q24@?32
@"<MTLCommandBuffer>"
f16@0:8
{vector<MTLViewport, std::allocator<MTLViewport>>=^{?}^{?}{__compressed_pair<MTLViewport *, std::allocator<MTLViewport>>=^{?}}}16@0:8
v24@0:8@?<v@?^{DYMTLThreadgroupMemoryInfo=QQ}Q^B>16
@"MTLRenderPassDescriptor"16@0:8
@"<MTLRenderPipelineState>"16@0:8
@"<MTLDepthStencilState>"16@0:8
v32@0:8@"<MTLRenderCommandEncoder>"16@?<^v@?I^vQ>24
v48@0:8@16Q24@32Q40
@"<MTLRenderCommandEncoderSPI>"
{vector<MTLScissorRect, std::allocator<MTLScissorRect>>="__begin_"^{?}"__end_"^{?}"__end_cap_"{__compressed_pair<MTLScissorRect *, std::allocator<MTLScissorRect>>="__value_"^{?}}}
@"<MTLDepthStencilState>"
{vector<__unsafe_unretained id<MTLHeap>, std::allocator<__unsafe_unretained id<MTLHeap>>>="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<__unsafe_unretained id<MTLHeap> *, std::allocator<__unsafe_unretained id<MTLHeap>>>="__value_"^@}}
[31{DYMTLThreadgroupMemoryInfo="length"Q"offset"Q}]
{vector<MTLVertexAmplificationViewMapping, std::allocator<MTLVertexAmplificationViewMapping>>="__begin_"^{?}"__end_"^{?}"__end_cap_"{__compressed_pair<MTLVertexAmplificationViewMapping *, std::allocator<MTLVertexAmplificationViewMapping>>="__value_"^{?}}}
{unordered_map<unsigned long, DYMTLStoreInfo, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, DYMTLStoreInfo>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, DYMTLStoreInfo>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, DYMTLStoreInfo>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, DYMTLStoreInfo>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, DYMTLStoreInfo>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, DYMTLStoreInfo>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>>="__value_"f}}}
{DYMTLStoreInfo="action"Q"options"Q}
{vector<MTLViewport, std::allocator<MTLViewport>>="__begin_"^{?}"__end_"^{?}"__end_cap_"{__compressed_pair<MTLViewport *, std::allocator<MTLViewport>>="__value_"^{?}}}
@?16@0:8
{queue<void (^)(), std::deque<void (^)()>>="c"{deque<void (^)(), std::allocator<void (^)()>>="__map_"{__split_buffer<void (^__strong *)(), std::allocator<void (^__strong *)()>>="__first_"^^@?"__begin_"^^@?"__end_"^^@?"__end_cap_"{__compressed_pair<void (^__strong **)(), std::allocator<void (^__strong *)()>>="__value_"^^@?}}"__start_"Q"__size_"{__compressed_pair<unsigned long, std::allocator<void (^)()>>="__value_"Q}}}
B32@0:8@16^@24
B28@0:8@16i24
v40@0:8@16@24@32
v36@0:8@16@24B32
@"NSObject<OS_dispatch_queue>"
@"DYReplayControllerQueue"
@"DYTransport"
@"DYTransportSource"
@"DYTransportMessage"
@"DYCaptureArchiveStack"
@"<DYReplayControllerSupport>"
basic_string
vector
v24@?0^v8Q16
-[DYMTLFunctionPlayer executePlatformFunction]
_argumentStorePositions[1].size() == 1
baseObject
styleMask
windowLevel
        #include <metal_graphics>
        #include <metal_texture>
        using namespace metal;
    
        fragment vec<float, 4> wireframeCreationFragment()
        {
            return vec<float, 4>(1.0, 1.0, 1.0, 1.0);
        }
    
        kernel void createOutlineTexture(texture2d<half, access::read> solid [[texture(0)]], texture2d<half, access::write> outline [[texture(1)]], uint2 gridPosition [[thread_position_in_grid]])
        {
            uint width = solid.get_width();
            uint height = solid.get_height();
            if (gridPosition.x < width && gridPosition.y < height)
            {
                auto currentColor = solid.read(gridPosition).r;
                outline.write(vec<half, 4>(0.0, 0.0, 0.0, 0.0), gridPosition);
                
                if (abs(currentColor - 0.0) <= 0.0001)
                {
                    auto left = solid.read(uint2(gridPosition.x - 1, gridPosition.y)).r;
                    auto right = solid.read(uint2(gridPosition.x + 1, gridPosition.y)).r;
                    auto up = solid.read(uint2(gridPosition.x, gridPosition.y + 1)).r;
                    auto down = solid.read(uint2(gridPosition.x, gridPosition.y - 1)).r;
                    if (left == 1 || right == 1 || up == 1 || down == 1)
                    {
                        // pixel is part of the outline
                        outline.write(vec<half, 4>(1.0, 1.0, 1.0, 1.0), gridPosition);
                    }
                }
                else if (abs(currentColor - 1.0) <= 0.0001 && (gridPosition.x == 0 || gridPosition.y == 0 || gridPosition.x == width - 1 || gridPosition.y == height - 1))
                {
                     outline.write(vec<half, 4>(1.0, 1.0, 1.0, 1.0), gridPosition);
                }
            }
        }
    
-[DYMTLDebugWireframeRenderer initWithDebugFunctionPlayer:]
_wireframeLibrary != nil
wireframeCreationFragment
_wireframeCreationFragmentFunction != nil
createOutlineTexture
_outlinePostProcessFunction != nil
tessellationControlPointIndexType
r^v28@?0I8r^v12Q20
v32@?0r^{DYMTLBoundBufferInfo=@^vQ}8Q16^B24
GPUToolsInternalPostTransformPipelineStateLabel
%llu-%u
Reading patching tables is supported only in PerfectPatching mode
Error when reading patching table at %@. %@
Error when parsing patching table at %@. %@
Failed to generate perfect patching json data. Error: %@
Failed to write perfect patching table to path %@
Patching is only supported in PerfectPatching mode.
Unable to find a matching patching request for command buffer %llu at index %u
Patching request already processed, skipping...
pointer
Error: 'pointer' key not found.
pointee
Error: 'pointee' key not found.
buffer_device_object
buffer_offset
Error: '%@' key not found.
Error: '%@' is not a number.
Pointer buffer %llu not found
Buffer %llu not found in the object map.
Object %llu is not an MTLBuffer.
Dyson - blit buffer from GPU
Pointee buffer %llu not found
Buffer offset (%llu) greater than buffer length (%llu)
Buffer offset (%llu) greater than buffer length (%lu)
#include <metal_graphics>
#include <metal_texture>
using namespace metal;
struct VertexOutput
  vec<float, 4> pos [[position]];
  vec<float, 2> uv;
struct UniformData
  vec<float, 4> blendColor;
  uint selectedLayer;
vertex VertexOutput vertexFunction(device const vec<float,4> *pos_data [[ buffer(0) ]],
                                   device const vec<float,2> *uv_data [[ buffer(1) ]], 
                                   uint vid [[ vertex_id ]])
  VertexOutput out;
  out.pos = pos_data[vid];
  out.uv = uv_data[vid];
  return out;
fragment vec<float, 4> opaqueFragmentFunction(VertexOutput in [[stage_in]],
                                              texture2d<float> tex [[ texture(0) ]],
                                              sampler sam [[ sampler(0) ]] )
  vec<float, 4> tex_color = tex.sample(sam, in.uv);
  return tex_color;
fragment vec<float, 4> blendingFragmentFunction(VertexOutput in [[stage_in]],
                                                texture2d<float> tex [[ texture(0) ]],
                                                sampler sam [[ sampler(0) ]],
                                                constant UniformData &uniformData [[ buffer(0) ]]){
  vec<float, 4> tex_color = tex.sample(sam, in.uv);
  return tex_color.r * uniformData.blendColor;
fragment vec<float, 4> blendingFragmentFunction_2dArray(VertexOutput in [[stage_in]],
                                                        texture2d_array<float> tex [[ texture(0) ]],
                                                        sampler sam [[ sampler(0) ]],
                                                        constant UniformData &uniformData [[ buffer(0) ]]){
  vec<float, 4> tex_color = tex.sample(sam, in.uv, uniformData.selectedLayer);
  return tex_color.r * uniformData.blendColor;
-[DYMTLTextureRenderer initWithDevice:]
_library != nil
vertexFunction
opaqueFragmentFunction
blendingFragmentFunction
blendingFragmentFunction_2dArray
_depthStencilDescriptor != nil
_positionBuffer != nil
_texCoordBuffer != nil
MTLIOAccelIndirectCommandBuffer
v32@?0@"MTLStructMember"8Q16^B24
-fno-tracepoint-instrument-line-markers
-fno-tracepoint-instrument-argument-buffers
Error creating instrumented library: %@
kDYMTLShaderDebuggerInstrumentedMetallib is nil
v32@?0@"<MTLTexture>"8Q16^B24
v32@?0r^{DYMTLBoundSamplerInfo=@ff}8Q16^B24
kDYMTLShaderDebuggerLibraryId library not found in object map
v32@?0@"MTLArgument"8Q16^B24
v32@?0@"MTLSamplerDescriptor"8Q16^B24
Error creating instrumented render pipeline state: %@
Error creating instrumented compute pipeline state: %@
v8@?0
libLLVM.dylib
Shader Debugger is not supported in this system configuration. Please install an Xcode with an SDK that is aligned to your OS version.
Error creating instrumented function: %@
Shader bitcode not found.
Could not generate shader metadata. Please update your target device to the latest OS version
Incorrect ROI parameters
Unable to create trace buffer.
Invalid command encoder for Vertex ROI type
Invalid command encoder for Fragment ROI type
Invalid command encoder for Kernel ROI type
Error while preparing trace buffer.
Trace buffer not big enough. Retry with new size.
tracepoint_thread_begin
tracepoint_function_begin
tracepoint_function_end
tracepoint_call
tracepoint_variable
tracepoint_data
tracepoint_loop_begin_for
tracepoint_loop_begin_while
tracepoint_loop_begin_do
tracepoint_loop_init_begin
tracepoint_loop_init_end
tracepoint_loop_cond_begin
tracepoint_loop_cond_end
tracepoint_loop_inc_begin
tracepoint_loop_inc_end
tracepoint_loop_body_begin
tracepoint_loop_body_end
tracepoint_loop_end
tracepoint_thread_exit
__trace.base_id
tracepoint_library_version
tracepoint.sets
tracepoint
__gt_unnamed_function_call__
return_value(
0123456789abcdef
Dump Tile Data
dumpThreadgroupData
Tile Pipeline for dumping Threadgroup data
Dump Tile Threadgroup Data
struct ImageblockMaster
%@};
%@%@
%@struct
%@%@}%@[%ld];
%@%@[%ld].
user(
%@fragmentMember%ld
fragmentMember%ld
%@struct
%@%@}%@;
%@%@.
dumpImageBlockData
Tile Pipeline for dumping Image Block data
imageBlockData.write(%@4(currData, 0, 0, 0), gid
imageBlockData.write(%@4(currData.x, currData.y, 0, 0), gid
imageBlockData.write(%@4(currData.x, currData.y, currData.z, 0), gid
imageBlockData.write(%@4(currData.x, currData.y, currData.z, currData.w), gid
    %@
%@%@<%@>
%@ %@
%@[%lu]
%@[[ %@ ]];
#include <metal_stdlib>
#include <metal_imageblocks>
#include <simd/simd.h>
using namespace metal;
%@                               uint2 gid [[ thread_position_in_grid ]],
                               ushort2 lid [[ thread_position_in_threadgroup ]],
kernel void dumpImageBlockData(imageblock<ImageblockMaster, imageblock_layout_explicit> imageBlock [[ alias_implicit_imageblock ]],
kernel void dumpImageBlockData(imageblock<ImageblockMaster, imageblock_layout_explicit> imageBlock [[ alias_implicit_imageblock_color(%ld) ]],
kernel void dumpImageBlockData(imageblock<ImageblockMaster, imageblock_layout_explicit> imageBlock,
                               texture2d_array<%@, access::write> imageBlockData [[ texture(0) ]])
    threadgroup_imageblock ImageblockMaster* ib = imageBlock.data(lid);
    for(int i = 0; i < %ld; ++i)
    {
        %@ currData = ib->%@[i];
        %@, i);
    }
                               texture2d<%@, access::write> imageBlockData [[ texture(0) ]])
    threadgroup_imageblock ImageblockMaster* ib = imageBlock.data(lid);
    %@ currData = ib->%@;
    %@);
#include <metal_stdlib>
using namespace metal;
#define THREADGROUP_MEMORY_LENGTH %ld
kernel void dumpThreadgroupData(uint2 threadgroupInGrid [[ threadgroup_position_in_grid ]],
                                uint2 threadgroupsPerGrid [[ threadgroups_per_grid ]],
                                device uint8_t* threadgroupBufferDump [[ buffer(0) ]],
                                threadgroup uint8_t* threadgroupData [[ threadgroup(%ld) ]])
   uint tileIndex = (threadgroupInGrid.y * threadgroupsPerGrid.x) + threadgroupInGrid.x;
   uint offset = THREADGROUP_MEMORY_LENGTH * tileIndex;
   for(uint32_t i = 0; i < THREADGROUP_MEMORY_LENGTH; ++i)
   {
       threadgroupBufferDump[offset + i] = threadgroupData[i];
   }
float
half
uint
short
ushort
float2
float3
float4
half2
half3
half4
int2
int3
int4
uint2
uint3
uint4
short2
short3
short4
ushort2
ushort3
ushort4
char
char2
char3
char4
uchar
uchar2
uchar3
uchar4
bool
bool2
bool3
bool4
r8unorm
r8snorm
r16unorm
r16snorm
rg8unorm
rg8snorm
rg16unorm
rg16snorm
rgba8unorm
srgba8unorm
rgba8snorm
rgba16unorm
rgba16snorm
rgb10a2
rg11b10f
rgb9e5
/program_source
MTLStatCommandBufferIndex
MTLStatEncoderIndex
MTLStatCommandIndex
MTLStat_nSec
MTLStatTotalGPUCycles
SW_PBUsed
_fedf2c59
Unknown Unknown
GPUFrameProfilingPowerStateWarmupTime
frame profile data
PerDrawNsecTimes
gputime
encoder time data
kick time data
kick cycle data
consistent time
tilerParamBufBytesUsedArray
perEncoderIndexDrawCallCount
withoutBlitPerEncoderIndexDrawCallCount
blitEncoderIndices
frame counters
Depth.
First
Stencil.
r^v24@?0r^v8Q16
v24@?0@"<MTLTexture>"8Q16
v16@?0@"<MTLCommandBuffer>"8
Color
Color %i
Depth
Stencil
%@.%llu
com.apple.dt.gputrace-replayer.pixel-history-contd-after-%u
com.apple.dt.gputrace-replayer.pixel-history-total-draws-%u
com.apple.dt.gputrace-replayer.pixel-history-blits-n-additional-stats-%u
v24@?0@"NSData"8Q16
com.apple.dt.gputrace-replayer.pixel-history-save-depth-stencil-%u
v16@?0Q8
v32@?0r^{DYMTLThreadgroupMemoryInfo=QQ}8Q16^B24
v32@?0^{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}8I16I20^B24
#include <metal_stdlib>
using namespace metal;
struct TransformMatrices
    float4 modelview_projection_matrix[4];
struct VertexOutput
    float4 pos [[position]];
    float4 color;
vertex VertexOutput defaultVertexProgram(uint vid [[ vertex_id ]])
    VertexOutput out;
    out.pos   = float4(0.0, 0.0, 0.0, 1.0);
    out.color = float4(0.0, 0.0, 0.0, 1.0);
    return out;
fragment float4 defaultFragmentProgram(VertexOutput vo [[ stage_in ]])
    return float4(vo.color.bgr, 1.0f);
kernel void defaultKernel()
defaultVertexProgram
defaultFragmentProgram
defaultKernel
nvidia
v32@?0@"<MTLCommandBuffer>"8@"NSData"16Q24
type
DELTA
MTLStatDataMaster
MTLStatSampleLocation
MetalPluginName
activePerEncoderDrawCallCount
width
height
format
Color.%u
Color.
        #include <metal_graphics>
        #include <metal_texture>
        using namespace metal;
        fragment vec<float, 4> solidCreationFragment()
        {
            return vec<float, 4>(1.0, 1.0, 1.0, 1.0);
        }
    
-[DYMTLPixelHistoryDrawStatsSupport initWithDebugFunctionPlayer:]
_solidLibrary != nil
solidCreationFragment
_solidCreationFragmentFunction != nil
ConvertIndirectCommandBufferDataToFBufStreamRender
Ctulul
Cululululul
Cululultulullul
Cululultululul
Cululultultululul
ConvertIndirectCommandBufferDataToFBufStreamCompute
Culul
C@6ul
C@3ul@3ul
Failed to dispatch: 0x%x
gputools.%@.%p
gputools.%@.%p.%@
messageLock
messageProcessingQueue
couldn't get global client transport
couldn't get global client source
v16@?0@"DYTransportMessage"8
version
interpose-feature-version
interpose-patch-version
couldn't send replayer ready message: %@
B24@?0@"DYTransportMessage"8@"NSDictionary"16
-[DYReplayController _processMessage:]
uuidString
filename
uuid
v16@?0@"NSDictionary"8
-[DYReplayController _loadArchives:error:]
filenames
gputrace
-[DYReplayController _playbackCurrentArchiveAndExperiments]
![self.archiveStack empty]
-[DYReplayController _playbackArchiveWithExperiment:passingFuture:resolvingFuture:]
-[DYReplayController _playbackArchiveWithExperiment:passingFuture:resolvingFuture:]_block_invoke_2
result_message
self.replayMessage
-[DYReplayController _beginDebugArchive]
St9bad_alloc
St20bad_array_new_length
St9exception
St12out_of_range
%2OO
NSt3__117bad_function_callE
MSZ--
(knN
FSL00
St11logic_error
St12length_error
llg
T@"<MTLHeap>",R
.cxx_destruct
TQ,R,N,V_height
GPUStartTime
_blendColorBlue
T#,R
_compileOptions
T@"<DYLayerManager>",W,N,V_layerManager
_depthBiasClamp
T@"<MTLBuffer>",R
_device
T@"<MTLCommandQueue>",R
_engine
T@"<MTLDevice>",R
_gpuCyclesIndex
T@"<MTLResource>",R
_isDeltaCounter
T@"<MTLTexture>",&,N,V_mockStencilTexture
_parallelEncoderCommandBufferID
T@"<MTLTexture>",R,N,V_outlineTexture
_pixelHistoryPixelPreviousDepth
T@"<MTLTexture>",R,N,V_wireframeTexture
_positionBuffer
T@"DYMTLIndirectArgumentBufferManager",&,N,V_indirectArgumentManager
_profileFrameWithCounterListsForProfileInfo:setConsistentState:
T@"DYMTLPostVertexDump",R,N,V_postVertexDump
_stencilTexture
T@"DYPlaybackEngine",&,N,VplaybackEngine
_texCoordBuffer
T@"DYTransportMessage",&,N,VreplayMessage
_vertexFunction
T@"MTLCompileOptions",R,N,V_compileOptions
_vertexTextures
T@"NSMutableArray",&,N,V_counterListsPerPass
aluType
T@"NSMutableArray",&,N,Vexperiments
backFaceStencil
T@"NSMutableDictionary",&,N,V_filteredGenerationOptions
commitEncodersAndCommandBuffers
T@"NSObject<OS_dispatch_queue>",&,N,Vqueue
compressionMode
T@"NSString",C
computeFunction
T@"NSString",R,C
containsString:
T@?,C,N,VorigSourceMessageHandler
dealloc
TB,R
didModifyRange:
TB,R,N,V_targetFunctionNeedsSeparatedPostVertexDump
enqueue
TI,N,V_encoderFunctionIndex
fragmentBuffers
TI,R
harvestThreadgroupAtIndex:size:
TQ,R,N
initializeResourcePatchingTypes
TQ,R,N,V_maxThreadgroupMemoryLengthCount
isProxy
TQ,R,N,V_type
layouts
T^v,R,N,V_bufferVitualAddressMap
maxCommandCount
T^v,R,N,V_replayerSamplerMap
maxTotalThreadgroupsPerMeshGrid
T^v,R,N,V_samplerMap
metalPluginName
T^{__IOSurface=},R
newComputePipelineStateWithDescriptor:options:reflection:error:
numberWithBool:
Tq,N,V_wireframeRenderMode
pipelineLibrary
T{?=CCCC},R,N
present
T{vector<MTLViewport, std::allocator<MTLViewport>>=^{?}^{?}{__compressed_pair<MTLViewport *, std::allocator<MTLViewport>>=^{?}}},R,N
pushDebugGroup:
UTF8String
release
_addRenderPassDescriptorToEncoderMapFromArgumentPointer:forEncoder:
resolveMultisampleTexture:slice:level:depthPlane:commandBuffer:
_aliasImplicitImageBlock
setAdditionalCompilerArguments:
_aliasImplicitImageBlockColorIndex
setArrayLength:
_amplificationCountSet
setDepthCleared
_amplificationModeSet
setEncoderStateFunctionIndexes:
_amplificationViewMappings
setGPUPriority:
_applyFragmentStateToEncoder:rawBytesBlock:
setLodMaxClamp:
_applyVertexStateToEncoder:rawBytesBlock:
setMaxVertexAmplificationCount:
_attachmentInfoForCommandEncoderID:
setObjectBuffer:offset:atIndex:
_baseCounterIndexForList
setProfileInfo:
_beginDebugArchive
setSampleCount:
_blendColorGreen
setStatEnabled:
_blendingFragmentFunction
setStorageMode:
_blockQueue
setTextureType:
_bufferVitualAddressMap
setVertexBuffer:offset:atIndex:
_bytesBufferReplacements
setVisibilityResultMode:offset:
_clearData
stringByAppendingPathComponent:
_colorStoreInfos
suspend
_commandBufferFrameProfilesPerDMDrawCallInfo
synchronizeTexture:slice:level:
_commandBufferIndex
texture
_commandEncoderDescriptorMap
updateReplayerTranslationBuffer
_commandQueueSet
useHeap:stages:
_computeBytesDataMap
valueWithRange:
_computePipelineState
yInvert
.cxx_construct
T@"NSString",&,N,V_statVertices
GPUEndTime
_backStencilRef
JSONObjectWithData:options:error:
_commandBufferFrameProfilesInfo
T@"<DYLayerManager>",R,N
_computeEncoder
T@"<DYReplayControllerSupport>",&,N,VreplayControllerSupport
_depthStoreInfo
T@"<MTLBuffer>",R,N,V_postVertexDumpBuffer
_drawableRenderabilityStatusMap
T@"<MTLDevice>",&,N,V_device
_frameProfiling
T@"<MTLLogContainer>",R
_height
T@"<MTLTexture>",&,N,V_mockDepthTexture
_outlineTexture
T@"<MTLTexture>",R
_pixelFormatToDataTypeStringMap
T@"<MTLTexture>",R,N,V_solidTexture
_player
T@"DYCaptureArchiveStack",&,N,VarchiveStack
_postVertexDump
T@"DYMTLIndirectCommandBufferManager",&,N,V_indirectCommandManager
_reflectionPostVertexDumpStride
T@"DYMTLShaderDebuggerTraceGenerator",R,N,V_shaderDebuggerTraceGenerator
_tessellationFactorBufferOffset
T@"DYTransport",&,N,Vtransport
_traceProcessed
T@"DYTransportSource",&,N,Vsource
_vertexSamplers
T@"NSError",R
allKeys
T@"NSMutableArray",&,N,V_frameCounters
arrayWithArray:
T@"NSMutableDictionary",&,N,V_encoderStateFunctionIndexes
buffers
T@"NSMutableDictionary",&,N,VprofileInfo
completionBlock
T@"NSString",&,N,V_statPixels
compressionType
T@"NSString",R
containsObject:
T@,R,N,V_code
currentTopLayer
TB,N,V_shouldIgnoreCaptureFile
depthAttachment
TB,R,GisFramebufferOnly
TI,N,V_currentEncoderIndex
enumerateTileBuffersUsingBlock:
TI,N,V_lastInterestingFunctionIndex
framebufferOnly
TQ,R
initWithDevice:
TQ,R,N,V_maxCommandCount
isFrameBoundary
TQ,R,N,V_options
kernelStartTime
TQ,R,N,V_width
lowercaseString
T^v,R,N,V_replayerBufferBaseVirtualAddressMap
maxThreadgroupMemoryLengthCount
T^v,R,N,V_replayerTextureMap
members
T^v,R,N,V_textureMap
newCommandQueue
Td,R
newIndirectCommandBufferWithDescriptor:maxCommandCount:options:
Ti,R,N,V_patchingMode
options
Tq,R
playbackOptions
T{MTLResourceID=Q},R
presentDrawable
T{vector<MTLViewport, std::allocator<MTLViewport>>=^{?}^{?}{__compressed_pair<MTLViewport *, std::allocator<MTLViewport>>=^{?}}},R,N,V_viewports
rasterizationRateMapDescriptorWithScreenSize:layerCount:layers:
_FixSplitEncoderSamples:forProfile:withInfo:andUpdatedCounterInfo:
resetWithRange:
_addRenderPassDescriptorToEncoderMapFromRenderPassDescriptor:forEncoder:
resourceOptions
_aliasImplicitImageBlockColor
setAnchorPoint:
_amplificationCount
setBufferIndex:
_amplificationMode
setDestinationAlphaBlendFactor:
_amplificationValue
setExperiments:
_ancestorMaps
setKernelBuffer:offset:atIndex:
_applyHeapsAndResourcesToEncoder:
setLodMinClamp:
_archiveDirectory
setMeshSamplerStates:withRange:
_bSetStageInRegion
setPixelFormat:
_batchInfos
setRenderPipelineState:atIndex:
_blendColorAlpha
setScissorRect:
_blendColorRed
setStatOptions:
_blendingFragmentFunction_2dArray
setStoreAction:
_bufferLengthMap
setTileSamplerStates:withRange:
_buffers
setVertexDepthCompareClampMask:
_calculateGPUVirtualAddress
setWithObjects:
_code
supportsFamily:
_commandBufferFrameProfiles
swizzle
_commandBufferIds
tailSizeInBytes
_commandBufferMap
tileSizeWithSparsePageSize:textureType:pixelFormat:sampleCount:
_commandQueue
updateTextureMappings:mode:regions:mipLevels:slices:numRegions:
_computeAverageForFrameProfile:forProfile:withInfo:andUpdatedCounterInfo:forEncoders:
useHeaps:count:
_computePipelineMap
vertexArguments
_computePipelineStateUniqueIdentifier
_constantSamplerReflection
_counterInfos
_counterListsPerPass
_createAndSetInstrumentedComputePipelineStateWithDescriptor:computeCommandEncoder:
_createAndSetInstrumentedRenderPipelineStateWithDescriptor:renderCommandEncoder:roiType:
_createAndSetInstrumentedTileRenderPipelineStateWithDescriptor:renderCommandEncoder:
_createBatchIdFilterMapping:withCommandEncoder:
_createDataTypeToStringDictionary
_createInstrumentedFunctionWithInstrumentedLibrary:originalFunction:
_createPrivateBufferForFunctionWithDevice:bytes:length:resourceOptions:
_createTraceBufferWithGenerationOptions:
_cullMode
_currentBatchEncoderIndex
_currentCommandBuffer
_currentCommandBufferFunctionIndex
_currentDeviceDecodingData
_currentEncoderBatchIndex
_currentEncoderBatchInfo
_currentEncoderIndex
_currentParallelDescriptor
_currentParallelId
_currentRenderPipelineHasBufferOrTextureReadWrite:encoder:
_dataTypeToChannelCount
_dataTypeToImageBlockTypeStringMap
_dataTypeToTextureComponentTypeStringMap
_dataTypeToTextureTypeForInvalidPixelFormatMap
_datamasterIndex
_decodingMap
_deleteAllArchives
_dependencyGraphDYMTLParallelDescriptor
_dependencyGraphParallelDescriptor
_dependencyGraphThumbnails
_depthBias
_depthBiasSlopeScale
_depthClipMode
_depthStencilDescriptor
_depthStencilState
_deviceResourcesBuffers
_disableWireframe
_dispatchType
_displayPlaybackEngine
_drawIndex
_drawableIdToLayerIdMap
_drawableMap
_dummyArgumentBuffer
_dummyArgumentEncoder
_dyParallelRenderCommandEncoderDescriptor
_encodedResourcesMap
_encoderFunctionIndex
_encoderIndex
_encoderIndexToBatchInfo
_encoderMap
_encoderStateFunctionIndexes
_encoderToParallelEncoderMap
_endEncodingForAllRemainingEncoders:
_endPlayback
_errorStr
_executeGraphicsFunction
_executeIndirectCommandBufferUpToSubIndex:outBuffer:outDataPointer:
_extractTileMemoryWithRenderPassDescriptor:renderEncoderID:isDrawCall:
_filteredGenerationOptions
_forceAttachmentLoadActionToLoad:
_forceAttachmentStoreActionToStore:
_fragmentBindingNeedsPlaceholderResource:renderCommandEncoder:
_fragmentBufferOffsets
_fragmentBuffers
_fragmentBytes
_fragmentBytesDataMap
_fragmentBytesLength
_fragmentMemberIndex
_fragmentSamplers
_fragmentTextures
_frameCounters
_frontFacingWinding
_frontStencilRef
_generateConstantSamplerReflectionWithUniqueIdentifiers:descriptors:
_generateDummyPipeline:
_generateFunctionFromImageBlockMember:WithIndex:
_generateImageBlockShaderStringWithMember:index:
_generateImageBlockStructMember:WithCurrentName:WithIndent:
_generateIndentString:
_generateKernelFunctionFromString:funcName:
_generateResourceResolutionRemappingTables
_generateStringForWritingDataToTexture:
_generateTextureFromImageBlockMember:
_generateThreadgroupShaderStringWithThreadgroupIndex:size:
_generateThumbnailAndResourceInfoForRequestedTextures:resolution:commandBuffer:
_generateTileRenderPipelineStateWithTileFunction:renderPassDescriptor:renderPipelineState:
_getDeviceWithName:
_gpuVirtualAddressArray
_gpuVirtualAddressMap
_handleArchiveLoadingForPlaybackRequest:replyKind:
_hasSetStageInRegion
_imageBlockArgumentsFromFragment
_imageBlockArgumentsFromTile
_imageBlockHeight
_imageBlockSignature
_imageBlockStatus
_imageBlockWidth
_indirectArgumentBuffers
_indirectArgumentManager
_indirectCommandBufferMap
_indirectCommandManager
_instrumentLibrary:generationOptions:
_isAGXDevice
_isCPUAccessibleStorageMode:
_isDepthStencilFormat:
_isFunctionCommandEncoderCreation
_isPresentFunction
_isReceiverTypeCommandEncoderRelated
_isTileRenderPassDescriptor
_kernelBindingNeedsPlaceholderResource:computeCommandEncoder:
_kernelBufferOffsets
_kernelBuffers
_kernelBytes
_kernelBytesLength
_last
_lastCommandBufferId
_lastCommandBufferIndex
_lastEncoderID
_lastEncoderIndex
_lastInterestingFunctionIndex
_lastProcessedCommandBufferUid
_lastSampleCommandBufferEncoderId
_layerManager
_library
_lineWidth
_loadArchives:error:
_loopCount
_maxCommandCount
_maxThreadgroupMemoryLengthCount
_messageLock
_messageLoop
_messageProcessingQueue
_messageQueue
_metadata
_metalLayers
_mockColorTextureDescriptors
_mockColorTextures
_mockDepthTexture
_mockDepthTextureDescriptor
_mockStencilTexture
_mockStencilTextureDescriptor
_modifyDescriptorForLayering:withBuffer:
_modifyDescriptorForStore:
_nRemainingCommandsForCurrentEncoder
_nSecIndex
_needsMultiplePasses
_nopDrawFragFunction
_nopDrawVertexFunction
_nopRenderPipelineState
_nopTileFunction
_objectMap
_onlineSrc
_opaqueFragmentFunction
_optimizedPatchingMap
_options
_originalCommandBuffer
_originalCommandEncoderId
_originalEncoder
_originalParallelEncoder
_outlineComputePipelineState
_outlinePostProcessFunction
_outlineTextureDescriptor
_parallelCommandBufferId
_parallelEncoderMap
_parallelRenderCommandEncoderDescriptor
_patcher
_patchingMode
_perfectPatchingTable
_persistantEncoder2ParallelMap
_pipelineState
_pixelHistory
_pixelHistoryDrawStatsRenderer
_pixelHistoryEncoderStateTrackings
_pixelHistoryInverseObjectMap
_pixelHistoryMockRenderPassDescriptor
_pixelHistoryPixelPreviousStencil
_pixelHistoryRenderPassDescriptor
_pixelHistorySolidRenderPipelineState
_pixelHistoryVisibilityMockRenderPassDescriptor
_placeholderBuffer
_placeholderSamplerState
_placeholderTexture
_placeholderTextureWithType:
_placeholderTextures
_playbackArchiveWithExperiment:passingFuture:resolvingFuture:
_playbackCurrentArchiveAndExperiments
_popMessage
_postVertexDumpBuffer
_prepareComputeCommandEncoder:generationOptions:
_prepareRenderCommandEncoder:generationOptions:
_prepareTraceBufferWithGenerationOptions:
_prepareWireframeTextureWithEncoder:commandBuffer:pipelineState:parallelEncoder:renderPassDescriptor:
_prepareWithEncoder:parallelEncoder:pipelineState:renderPassDescriptor:
_processArgument:WithImageBlockVector:
_processArrayType:WithProcessedArgument:WithMemberName:WithCurrentName:WithIndent:
_processMessage:
_processStructMember:WithProcessedArgument:WithMemberName:WithIndent:
_processStructType:WithProcessedArgument:WithMemberName:WithIndent:
_profileBlockBackgroundQueue
_profileBlockQueue
_profileFrameForFrameTiming:atConsistentState:
_profileFrameWithCounterListsForProfileInfo:
_profileFrameWithCounterListsForProfileInfo:encoderPass:
_profileFrameWithCounterListsForProfileInfoAsync:encoderPass:updateStatSampling:setConsistentState:
_profileInfo
_profileSplitEncodersForProfileInfo:
_pushMessage:
_recalculateVirtualAddress
_recursivePlaybackWithFuture:usingExperiment:withToplevelFuture:
_reflectionSizeAligned256
_renderEncoder
_renderPassPixelFormatFromDescriptor:
_renderPipelineDescriptor
_renderPipelineMap
_renderPipelineState
_renderPipelineStateUniqueIdentifier
_replacedSamplerStates
_replayerBufferBaseVirtualAddressMap
_replayerComputePipelineMap
_replayerControllerSupportForCaptureStore:
_replayerIABs
_replayerIndirectCommandBufferMap
_replayerRenderPipelineMap
_replayerSamplerMap
_replayerTextureMap
_reservePostVertexDumpBufferWithLength:
_resourcePatchingType
_resourcePatchingTypesInitialized
_restoreTexture:commandBuffer:argumentOffset:
_runPassesForCounterLists:encoderPass:frameProfileInfo:
_sampleLocationIndex
_samplerMap
_samplerState
_samplers
_saveBytes
_savedVertexFragmentState
_savedVertexState
_scissorRects
_setDefaultsWithDescriptor:device:
_setupEncodersForBatchIdFiltering
_setupPState
_shaderDebuggerTraceGenerator
_shouldIgnoreCaptureFile
_solidCreationFragmentFunction
_solidLibrary
_solidRenderPassColorAttachmentDescriptor
_solidRenderPassDescriptor
_solidTexture
_sparseTextureFence
_splitBlitEncoder
_splitCommandEncoders
_splitComputeEncoder
_splitEncoderCommandCount
_splitRenderEncoders
_stageInIndirectBufferId
_stageInIndirectBufferOffset
_stageInRegion
_stageInRegionIndirectBuffer
_stageInRegionIndirectBufferOffset
_statPixels
_statVertices
_stencilStoreInfo
_stencilTextureDescriptor
_superExecutePlatformFunction
_supportsTessellation
_supports_tessellation
_swizzleAttachmentTextureForLoad:withBuffer:
_targetCommandEncoderId
_targetFunctionNeedsSeparatedPostVertexDump
_tessellationFactorBuffer
_tessellationFactorBufferInstanceStride
_tessellationFactorScale
_tessellationFactorSet
_texture2DFromTexture:level:slice:depthPlane:commandBuffer:
_textureMap
_textureRenderer
_textureSize
_textureToDrawableMap
_textures
_threadgroupMemories
_threadgroupStatus
_thumbnailDictionary
_tileBindingNeedsPlaceholderResource:renderCommandEncoder:
_tileBuffers
_tileBytesDataMap
_tileMemoryExtractor
_tileSamplers
_tileSize
_tileTextures
_traceBuffer
_traceBufferVersion
_traceType
_trackObjects
_triangleFillMode
_type
_uniformData
_updateMemorylessTextures:
_updateRemainingCommandsForEncoder
_updateTextureDescriptor:usingEncoder:renderPassDescriptor:
_updatedBatchInfos:fromPerEncoderDrawCallCount:
_usedHeaps
_usedResources
_usedSamplersMap
_vertexBindingNeedsPlaceholderResource:renderCommandEncoder:
_vertexBufferOffsets
_vertexBuffers
_vertexBytes
_vertexBytesDataMap
_vertexBytesLength
_viewports
_visibilityResultBuffer
_visibilityResultMode
_visibilityResultOffset
_width
_wireframeCreationFragmentFunction
_wireframeLibrary
_wireframeRenderMode
_wireframeRenderPassColorAttachmentDescriptor
_wireframeRenderPassDescriptor
_wireframeRenderPipelineState
_wireframeRenderer
_wireframeTexture
_wireframeTextureDescriptor
accelerationStructureCommandEncoder
accelerationStructureCommandEncoderWithDescriptor:
access
addCommandBufferDurationStart:andEnd:
addCommandBufferFrameProfile:
addCompletedHandler:
addComputePipelineStateUniqueIdentifier:forObjectId:
addCounters:
addDebugMarker:range:
addEntriesFromDictionary:
addGPUVirtualAddress:forObjectId:
addObject:
addObjectsFromArray:
addPerfSampleHandler:
addPurgedHeap:
addPurgedResource:
addRenderPipelineStateUniqueIdentifier:forObjectId:
addScheduledHandler:
aliasImplicitImageBlock
aliasImplicitImageBlockRenderTarget
allObjects
allValues
allocatedSize
allocationID
allowGPUOptimizedContents
allowOverlap:withPState:
analysisScript
anchorPoint
anchorPointZ
animationDuration
animationTimingFunction
appendBytes:length:
applyAllStateToEncoder:rawBytesBlock:
applyLayersVisibility
applyToEncoder:rawBytesBlock:
applyVertexFragmentStateToEncoder:rawBytesBlock:
applyVertexStateToEncoder:rawBytesBlock:
archiveStack
archivedDataWithRootObject:requiringSecureCoding:error:
argumentBuffersSupport
argumentDescriptor
argumentEncoderForDecodingOperation:reflectionStructType:
argumentIndexStride
arguments
array
arrayLength
arrayType
arrayWithCapacity:
arrayWithObject:
arrayWithObjects:
arrayWithObjects:count:
attributeForKey:
attributes
autorelease
availableCounters
backReferenceValue
begin
bitcodeData
blitBufferFromGPU:
blitCommandEncoder
blitCommandEncoderWithDescriptor:
boolResult
boolValue
borderColorSPI
bounds
boundsForCurrentInterfaceOrientation
buffer
bufferBytesPerRow
bufferDataSize
bufferIdAndOffsetForGPUVirtualAddress:
bufferOffset
bufferStructType
bufferVitualAddressMap
bytes
canGenerateMipmapLevels
caseInsensitiveCompare:
class
clear
close
code
collectPixelDrawStats:originalEncoderId:originalEncoder:originalPipeline:atX:y:draw:
collectPixelDrawStatsTotal:originalPipeline:atX:y:draw:
collectPixelHistoryStencilDrawStatsAtX:y:completion:
collectPixelHistoryVisibilityDrawStatsAtCompletion:
colorAttachments
commandBatchIdOffset
commandBatchIdRangeMin:max:
commandBuffer
commandQueue
commandTypes
commit
commitAndHold
commitAndWaitUntilSubmitted
compare:
compileOptions
componentsSeparatedByString:
compressionFeedback
compressionFootprint
computeBytesForKey:
computeBytesKeyAtIndex:
computeCommandEncoder
computeCommandEncoderWithDescriptor:
computeCommandEncoderWithDispatchType:
computePipelineIdForUniqueIdentifier:
computePipelineState
concurrentDispatchThreadgroups:threadsPerThreadgroup:
concurrentDispatchThreads:threadsPerThreadgroup:
configurationVariables
conformsToProtocol:
constantSamplerDescriptors
constantSamplerUniqueIdentifiers
contents
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
contentsScale
convertIndirectCommandBufferData:range:toFBufStream:
convertSparsePixelRegions:toTileRegions:withTileSize:alignmentMode:numRegions:
copy
copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:
copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:
copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:
copyFromTexture:sourceSlice:sourceLevel:toTexture:destinationSlice:destinationLevel:sliceCount:levelCount:
copyFromTexture:toTexture:
copyIndirectCommandBuffer:sourceRange:destination:destinationIndex:
copyParameterDataToBuffer:offset:
count
countByEnumeratingWithState:objects:count:
counterDictionary
counterInfo
counterInfo:
counterListsPerPass
counterSets
cpuCacheMode
createAndSetPostVertexDumpPipelineState:commandEncoderId:pipelineId:
createArchivePlaybackEngineWithCaptureStore:
createBatchIdFilterMapping
createDebugPlaybackEngineWithCaptureStore:
createDirectoryAtPath:withIntermediateDirectories:attributes:error:
createLayerWithID:contentRect:contentsScale:properties:isCoreAnimationSurface:
createNumFragmentPassesRenderCommandEncoderInCommandBuffer:originalRenderPassDescriptor:originalPipeline:
createNumTotalRenderCommandEncoderInCommandBuffer:originalPipeline:
createNumVisibleRenderCommandEncoderInCommandBuffer:originalRenderPassDescriptor:originalPipeline:depthStencilDescriptor:mockDepthStencilTexture:visibilityResultMode:atX:y:
createNumVisibleRenderCommandEncoderInCommandBuffer:originalRenderPassDescriptor:originalPipeline:depthStencilDescriptor:mockDepthTexture:visibilityResultMode:atX:y:
createNumVisibleRenderCommandEncoderInCommandBuffer:originalRenderPassDescriptor:originalPipeline:depthStencilDescriptor:mockStencilTexture:visibilityResultMode:atX:y:
createOutlineTexture
createOverridingPlaybackEngineWithCaptureStore:experiment:
createSolidRenderCommandEncoder:commandBufferId:commandEncoderId:parallelEncoderId:
createWireframeRenderCommandEncoder:
currentEncoderIndex
currentFunctionIndex
currentRenderPipelineHasBufferOrTextureReadWrite:
customBorderColorValue_0
customBorderColorValue_1
customBorderColorValue_2
customBorderColorValue_3
dataType
dataTypeDescription
dataWithBytes:length:
dataWithBytesNoCopy:length:freeWhenDone:
dataWithContentsOfFile:options:error:
dataWithJSONObject:options:error:
debugCommandEncoder
debugDescription
debugType
decodeReplayerIAB:offset:function:argument:
defaultContentsScale
defaultManager
defaultRasterSampleCount
deleteLayer:
dependencyGraphThumbnailCache
depth
depthAttachmentPixelFormat
depthBias
depthBiasClamp
depthBiasSlopeScale
depthClipMode
depthCompareFunction
depthFailureOperation
depthPlane
depthResolveFilter
depthStencilPassOperation
depthStencilState
dequeBlock
derivedCounterData
derivedCounterScript
description
descriptor
device
deviceForID:withDeviceName:
dictionary
dictionaryWithDictionary:
dictionaryWithObject:forKey:
dictionaryWithObjects:forKeys:
dictionaryWithObjects:forKeys:count:
disableActions
disableDebugFunctions:playbackEngine:
disableDeferredEndEncoding
dispatchThreadgroups:threadsPerThreadgroup:
dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:
dispatchThreads:threadsPerThreadgroup:
dispatchThreadsPerTile:
dispatchThreadsPerTile:inRegion:
dispatchThreadsWithIndirectBuffer:indirectBufferOffset:
dispatchType
ditherEnabled
doesAliasAllResources:count:
doesAliasAnyResources:count:
doesAliasResource:
doesNotRecognizeSelector:
doubleValue
drawIndexedPatches:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:indirectBuffer:indirectBufferOffset:
drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:
drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:
drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:
drawMeshThreadgroups:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:
drawMeshThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:
drawMeshThreads:threadsPerObjectThreadgroup:threadsPerMeshThreadgroup:
drawPatches:patchIndexBuffer:patchIndexBufferOffset:indirectBuffer:indirectBufferOffset:
drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:
drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:tessellationFactorBuffer:tessellationFactorBufferOffset:tessellationFactorBufferInstanceStride:
drawPrimitives:indirectBuffer:indirectBufferOffset:
drawPrimitives:vertexStart:vertexCount:
drawPrimitives:vertexStart:vertexCount:instanceCount:
drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:
drawableSize
dropResourceGroups:count:
elementArrayType
elementIsArgumentBuffer
elementStructType
elementType
empty
enableConsistentState:
enableDebugDrawCallPresent:playbackEngine:
enableDebugFunctions:playbackEngine:
enableDebugOutlinePresent:playbackEngine:
enableDebugWireframePresent:playbackEngine:
enableNullBufferBinds:
enableOutlinePresent
enableStatsSampling:
enableWireframePresent
encodeDashboardTagForResourceGroup:
encodeImageBlockDataReturn:isDrawCall:
encodeIndirectArgumentsForBuffer:data:
encodeIndirectArgumentsForBuffer:data:decodingMap:
encodeIndirectArgumentsForBuffer:decodingMap:
encodeSignalEvent:value:
encodeStoreActionForParallelRenderCommandEncoder:withDescriptor:
encodeStoreActionForRenderCommandEncoder:withDescriptor:
encodeWaitForEvent:value:
encodeWaitForEvent:value:timeout:
encodedLength
encoderFunctionIndex
encoderMap
encoderStateFunctionIndexes
endEncoding
endPlayback
engine
enumerateBuffersUsingBlock:
enumerateFragmentBuffersUsingBlock:
enumerateFragmentSamplersUsingBlock:
enumerateFragmentTexturesUsingBlock:
enumerateObjectsUsingBlock:
enumerateSamplersUsingBlock:
enumerateTexturesUsingBlock:
enumerateThreadgroupMemoryUsingBlock:
enumerateTileSamplersUsingBlock:
enumerateTileTexturesUsingBlock:
enumerateVertexBuffersUsingBlock:
enumerateVertexSamplersUsingBlock:
enumerateVertexTexturesUsingBlock:
error
errorOptions
errorWithDomain:code:userInfo:
executeCommandsInBuffer:indirectBuffer:indirectBufferOffset:
executeCommandsInBuffer:withRange:
executeFunctions:count:subCommandIndex:
executeGraphicsFunction
executeIABDecodingOp:bufferId:data:indirectDecodingMap:
executeIndirectComputeCommand:withData:atIndex:forIndirectCommandBuffer:
executeIndirectRenderCommand:withData:atIndex:forIndirectCommandBuffer:
executeIndirectRenderCommands:withData:forRange:forIndirectCommandBuffer:
executePlatformFunction
executedDrawCallCount
experimentResultsGeneratorForPlaybackEngine:
experiments
extractCommandBufferTranslationData
extractComputeIndirectArgumentBuffers:
extractIndirectArgumentBuffers
extractRenderIndirectArgumentBuffers:
fileExistsAtPath:isDirectory:
fileURLWithPath:
fillBuffer:range:value:
filterUsingPredicate:
filteredGenerationOptions
findAncestorsForBuffer:commandBufferIndex:commandEncoderIndex:callIndex:ancestors:
findPatchingRequest:
findStructTypeForArgumentIndex:inStructType:
finish
firstMipmapInTail
firstObject
floatValue
flush
forDevice:
forceSeamsOnCubemapFiltering
forwardingTargetForSelector:
fragmentArguments
fragmentBytesForKey:
fragmentBytesKeyAtIndex:
fragmentFunction
frameCounters
front
frontFaceStencil
frontReferenceValue
function
functionHandleWithFunction:
functionHandleWithFunction:stage:
functionType
future
futureWithResult:error:
generateDependencyGraphThumbnailsWithPlaybackEngine:forMessage:onReady:
generateMipmapLevel:slice:
generateMipmapsForTexture:
generatePerPrimitiveHistory:commandQueue:currentEncoderId:originalEncoder:originalPipeline:atX:y:
generatePerPrimitiveHistory_drawPrimitives_vertexStart_vertexCount:vertexStart:vertexCount:total:commandQueue:currentEncoderId:originalEncoder:originalPipeline:atX:y:
generatePixelHistoryWithPlaybackEngine:forMessage:onReady:
generateShaderDebuggerTraceForMessage:playbackEngine:onReady:
generateThumbnailFromTexture:commandBuffer:resolution:withFence:
generateThumbnailsWithPlaybackEngine:forMessage:onReady:
getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:
getBytes:bytesPerRow:fromRegion:mipmapLevel:
getImageBlockStatus
getListIndex
getSPIStats
getSingleUseMockColorTexture:pixelFormat:width:height:
getSingleUseMockDepthTextureWithPixelFormat:width:height:
getSingleUseMockStencilTextureWithPixelFormat:width:height:
getStatLocations
getStatOptions
getTextureAccessCounters:region:mipLevel:slice:resetCounters:countersBuffer:countersBufferOffset:
getThreadgroupStatus
gpuAddress
gpuHandle
gpuResourceID
harvestImageBlockData:
harvestableTexture:
hasPrefix:
hash
hashOffset
hashValue
hazardTrackingMode
heap
heapOffset
height
horizontalSampleStorage
imageBlockDataReturn
imageBlockDataSize
imageBlockKind
imageBlockMasterStructMembers
imageblockMemoryLengthForDimensions:
imageblockSampleLength
index
indexOfObject:
indirectArgumentIndex
indirectArgumentManager
indirectCommandManager
indirectComputeCommandAtIndex:
indirectRenderCommandAtIndex:
informReady
inheritBuffers
inheritPipelineState
init
initWithArray:
initWithCapacity:
initWithCaptureStore:
initWithDebugFunctionPlayer:
initWithDevice:descriptor:
initWithEncoder:descriptor:
initWithEncoder:dispatchType:
initWithFunctionPlayer:
initWithMTLDevice:
initWithMaxCommandCount:options:maxThreadgroupMemoryLengthCount:
initWithObjectsAndKeys:
initWithPatchingMode:
initWithPlaybackEngine:
initWithRenderEncoder:metalDevice:tileSize:texSize:
initWithSampleCount:
initWithType:code:compileOptions:
initWithURL:options:error:
initWithUTF8String:
initializeTransportWith:
inputPrimitiveTopology
insertDebugCaptureBoundary
insertDebugSignpost:
insertPatchingOp:commandBufferUid:
integerForKey:
integerValue
internalPipelineStateLabel
iosurface
iosurfacePlane
isAbsolutePath
isActive
isAliasable
isArgumentExplicitImageBlock:
isBlendingEnabled
isBlitSamplingSupported
isComplete
isCompressed
isCounterAvailable:
isDebugPlaybackEngine:
isDepthWriteEnabled
isDrawable
isEqual:
isEqualToNumber:
isEqualToString:
isFramebufferOnly
isKindOfClass:
isMemberOfClass:
isOpenGLQueue
isPurgeable
isRasterizationEnabled
isSparse
isStatEnabled
isTessellationFactorScaleEnabled
kernelEndTime
keyForOriginalObject:
keyForOriginalObject:inverseObjectMap:
kind
label
lastInterestingFunctionIndex
lastObject
lastPathComponent
layer
layerForID:
layerManager
layout
length
level
loadAction
localizedDescription
logs
longLongValue
mainExecutionMode
makeAliasable
mapScreenToPhysicalCoordinates:forLayer:
maxAvailableSizeWithAlignment:
maxColorAttachments
maxCommandBufferCount
maxFragmentBufferBindCount
maxKernelBufferBindCount
maxTessellationFactor
maxTotalThreadsPerMeshThreadgroup
maxTotalThreadsPerObjectThreadgroup
maxTotalThreadsPerThreadgroup
maxVertexAmplificationCount
maxVertexBufferBindCount
maxVertexBuffers
memoryBarrierWithResources:count:
memoryBarrierWithResources:count:afterStages:beforeStages:
memoryBarrierWithScope:
memoryBarrierWithScope:afterStages:beforeStages:
meshThreadExecutionWidth
messageHandler
messageWithKind:
messageWithKind:attributes:
messageWithKind:attributes:objectPayload:
messageWithKind:attributes:payload:
messageWithKind:attributes:plistPayload:
messageWithKind:attributes:stringPayload:
messageWithKind:objectPayload:
methodForSelector:
minLinearTextureAlignmentForPixelFormat:
mipmapLevelCount
mockDepthTexture
mockStencilTexture
mutableCopy
name
newArgumentEncoderForBufferAtIndex:
newArgumentEncoderWithArguments:
newArgumentEncoderWithBufferIndex:
newArgumentEncoderWithBufferIndex:pipelineLibrary:
newArgumentEncoderWithBufferIndex:reflection:
newArgumentEncoderWithBufferIndex:reflection:pipelineLibrary:
newBufferWithBytes:length:options:
newBufferWithBytes:length:options:gpuAddress:
newBufferWithBytesNoCopy:length:options:deallocator:
newBufferWithIOSurface:
newBufferWithLength:options:
newBufferWithLength:options:gpuAddress:
newBufferWithLength:options:offset:
newCommandQueueWithDescriptor:
newCommandQueueWithMaxCommandBufferCount:
newCompressedTextureViewWithPixelFormat:textureType:level:slice:
newComputePipelineStateWithAdditionalBinaryFunctions:error:
newComputePipelineStateWithFunction:error:
newComputePipelineStateWithFunction:options:reflection:error:
newComputePipelineStateWithImageFilterFunctionsSPI:imageFilterFunctionInfo:error:
newComputePipelineStateWithName:options:reflection:error:
newCounterSampleBufferWithDescriptor:error:
newDefaultLibrary
newDepthStencilStateWithDescriptor:
newDynamicLibrary:error:
newEvent
newExternFunctionWithName:
newFence
newFunctionWithGLCoreIR:functionType:
newFunctionWithGLCoreIR:inputsDescription:functionType:
newFunctionWithGLESIR:functionType:
newFunctionWithGLESIR:inputsDescription:functionType:
newFunctionWithGLIR:functionType:
newFunctionWithGLIR:inputsDescription:functionType:
newFunctionWithName:
newFunctionWithName:constantValues:error:
newFunctionWithPluginData:bitcodeType:
newHeapWithDescriptor:
newIntersectionFunctionTableWithDescriptor:
newIntersectionFunctionTableWithDescriptor:stage:
newLateEvalEvent
newLibraryWithCIFilters:imageFilterFunctionInfo:error:
newLibraryWithData:error:
newLibraryWithFile:error:
newLibraryWithImageFilterFunctionsSPI:imageFilterFunctionInfo:error:
newLibraryWithSource:options:error:
newLinearTextureWithDescriptor:offset:bytesPerRow:bytesPerImage:
newPipelineLibraryWithFilePath:error:
newRasterizationRateMapWithDescriptor:
newRenderPipelineStateWithAdditionalBinaryFunctions:error:
newRenderPipelineStateWithDescriptor:error:
newRenderPipelineStateWithDescriptor:options:reflection:error:
newRenderPipelineStateWithName:options:reflection:error:
newRenderPipelineStateWithTileDescriptor:error:
newRenderPipelineStateWithTileDescriptor:options:reflection:error:
newResourceGroupFromResources:count:
newSamplerStateWithDescriptor:
newSharedEvent
newSharedEventHandle
newSharedEventWithHandle:
newTextureLayoutWithDescriptor:isHeapOrBufferBacked:
newTextureViewWithPixelFormat:
newTextureViewWithPixelFormat:resourceIndex:
newTextureViewWithPixelFormat:textureType:levels:slices:
newTextureViewWithPixelFormat:textureType:levels:slices:resourceIndex:
newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:
newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:resourceIndex:
newTextureWithBytesNoCopy:length:descriptor:deallocator:
newTextureWithDescriptor:
newTextureWithDescriptor:iosurface:plane:
newTextureWithDescriptor:offset:
newTextureWithDescriptor:offset:bytesPerRow:
newVisibleFunctionTableWithDescriptor:
newVisibleFunctionTableWithDescriptor:stage:
nextDrawable
notifyOnQueue:handler:
notifyReplayFinishedAndGenerateTraceContainer
notifyReplayerTargetCommandBuffersFinished
notifyReplayerTargetIndirectArgumentBuffers:
numFaces
numIterationsInLastPlayback
numberWithDouble:
numberWithInt:
numberWithLongLong:
numberWithUnsignedInt:
numberWithUnsignedInteger:
numberWithUnsignedLong:
numberWithUnsignedLongLong:
objectAtIndex:
objectAtIndexedSubscript:
objectForKey:
objectForKeyedSubscript:
objectMap
objectPayload
objectThreadExecutionWidth
objectWithId:
openGLModeEnabled
optimizeContentsForCPUAccess:
optimizeContentsForCPUAccess:slice:level:
optimizeContentsForGPUAccess:
optimizeContentsForGPUAccess:slice:level:
optimizeIndirectCommandBuffer:withRange:
origSourceMessageHandler
outlineTexture
parallelRenderCommandEncoderWithDescriptor:
parent
parentRelativeLevel
parentRelativeSlice
parentTexture
patchBuffer:bufferData:bufferLength:objectMap:
patchBuffers:objectMap:commandQueue:
patchingMode
path
pathExtension
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
pixelFormat
pixelHistoryCache
pixelValueFromTexture:level:slice:depthPlane:atX:y:inCommandBuffer:overHarvestForDepthStencil:
pixelValueFromTexture:level:slice:depthPlane:atX:y:inCommandBuffer:overHarvestForDepthStencil:completion:
pixelValueToTexture:buffer:level:slice:depthPlane:atX:y:inCommandBuffer:
playback
playbackArchive:
playbackEngine
playbackMode
playbackToFunction:subCommandIndex:withLoops:
playbackToFunction:withLoops:
player
plistPayload
pointerType
popDebugGroup
position
postVertexDump
postVertexDumpBuffer
postVertexDumpBufferIndex
postVertexDumpOutputs
postVertexDumpStride
predicateWithBlock:
prepareCommandEncoderForInstrumentedCall:generationOptions:
prepareForCaptureExecution
prepareLayerForPresent:
prepareWireframeTextureWithCommandBufferId:commandEncoderId:parallelEncoderId:pipelineId:renderPassDescriptor:
prepareWithCommandEncoderId:parallelEncoderId:pipelineId:renderPassDescriptor:
presentAtTime:
presentDrawable:
presentDrawable:atTime:
processAncestorMapData:
processArguments
processCommandBuffer:functionIndex:ancestorMapData:indirectArgumentBuffersData:resourceMapsData:driverDecodingData:
processIndirectArgumentBuffersData:
processReflection:isDrawCall:
processResourceMapsData:
profileBlockBackgroundQueue
profileBlockQueue
profileEncodersForProfileInfo:
profileFrameWithCounterListsForProfileInfo:
profileFrameWithCounterListsForProfileInfoAsync:
profileFrameWithPayload:
profileInfo
protectionOptions
push:
pushBlock:
qosLevel
queue
rangeValue
rasterSampleCount
rasterizationRateMap
readPatchingTable:
releaseDataForArgument:
releaseDataForPosition:
removeAllDebugMarkers
removeAllObjects
removeItemAtURL:error:
removeObject:
removeObjectAtIndex:
removeObjectForKey:
renderCommandEncoder
renderCommandEncoderWithDescriptor:
renderPassDescriptor
renderPipelineIdForUniqueIdentifier:
renderPipelineState
renderTargetArrayLength
renderTargetHeight
renderTargetWidth
renderTexture:withEncoder:enableBlending:layerIndex:
replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:
replaceRegion:mipmapLevel:withBytes:bytesPerRow:
replayControllerSupport
replayMessage
replayerBufferBaseVirtualAddressMap
replayerLayerForDrawableId:
replayerSamplerMap
replayerTextureMap
requestCounters:withIndex:
reserveResourceIndicesForResourceType:indices:indexCount:
reset
resetCommandsInBuffer:withRange:
resetFunctionPlayerData
resetLayersVisibility
resetPixelHistoryCache
resetTextureAccessCounters:region:mipLevel:slice:
resizeTexture:resolution:level:slice:depthPlane:inBuffer:withType:completion:
resolveCounterRange:
resolveCounters:inRange:destinationBuffer:destinationOffset:
resolveIABDecodingOperations
resolveTexture
resolveWithFuture:
resourceIndex
resourcePatchingTypeForResourceType:
resourceStateCommandEncoder
resourceStateCommandEncoderWithDescriptor:
respondsToSelector:
responsibleProcess
restoreBuffer:optimizedRanges:commandQueue:
restoreBuffer:withData:commandQueue:
restoreEncoder:withDescriptor:
result
resume
retain
retainCount
retainedReferences
rootResource
rotation
sampleCount
sampleCountersInBuffer:atSampleIndex:withBarrier:
sampleEncoderCounters
sampleMask
sampleSplitEncoderCounters
sampledComputeCommandEncoderWithDescriptor:programInfoBuffer:capacity:
samplerMap
saveComputeEncoder:withDescriptor:
saveEncoder:withDescriptor:player:
saveRenderEncoder:withDescriptor:
scanUnsignedLongLong:
scannerWithString:
screenSize
self
send:error:
send:inReplyTo:error:
setAccelerationStructure:atBufferIndex:
setAllowGPUOptimizedContents:
setAlphaBlendOperation:
setAlphaTestEnabled:
setAlphaTestFunction:
setAlphaTestReferenceValue:
setAlphaToCoverageEnabled:
setAlphaToOneEnabled:
setAnchorPoint:forLayerID:
setAnchorPointZ:
setAnimationDuration:
setAnimationTimingFunction:
setArchiveStack:
setArgumentBuffer:offset:
setArgumentBuffer:startOffset:arrayElement:
setBackFaceStencil:
setBackgroundGPUPriority:
setBackgroundGPUPriority:offset:
setBarrier
setBlendColorRed:green:blue:alpha:
setBlendingEnabled:
setBorderColorSPI:
setBounds:
setBuffer:offset:atIndex:
setBufferOffset:atIndex:
setBuffers:offsets:withRange:
setBytes:length:atIndex:
setClearColor:
setClearDepth:
setClearStencil:
setClipDistanceEnableMask:
setColorResolveTexture:slice:depthPlane:level:atIndex:
setColorResolveTexture:slice:depthPlane:level:yInvert:atIndex:
setColorStoreAction:atIndex:
setColorStoreActionOptions:atIndex:
setCommandBufferErrorOptions:
setCommandTypes:
setCommitSynchronously:
setCompareFunction:
setCompletionBlock:
setCompressionMode:
setComputeFunction:
setComputePipelineState:
setComputePipelineState:atIndex:
setConsistentGPUPerfStateTo:
setConsistentStateTo:
setConstantValue:type:atIndex:
setContentsScale:
setCounterListsPerPass:
setCounterSet:
setCpuCacheMode:
setCullMode:
setCurrentEncoderIndex:
setCustomBorderColorValue_0:
setCustomBorderColorValue_1:
setCustomBorderColorValue_2:
setCustomBorderColorValue_3:
setDataType:
setDebugWireframeLineWidth:playbackEngine:
setDebuggingEnabled:
setDefaultRasterSampleCount:
setDepth:
setDepthAttachment:
setDepthAttachmentPixelFormat:
setDepthBias:slopeScale:clamp:
setDepthClipMode:
setDepthClipModeSPI:
setDepthCompareFunction:
setDepthFailureOperation:
setDepthPlane:
setDepthResolveFilter:
setDepthResolveTexture:slice:depthPlane:level:
setDepthResolveTexture:slice:depthPlane:level:yInvert:
setDepthStencilPassOperation:
setDepthStencilState:
setDepthStoreAction:
setDepthStoreActionOptions:
setDepthWriteEnabled:
setDestinationRGBBlendFactor:
setDevice:
setDisableActions:
setDisableDeferredEndEncoding:
setDisableRunTimeCompilation:
setDitherEnabled:
setDrawableSize:
setEncoderFunctionIndex:
setExecutedDrawCallCount:
setExecutionEnabled:
setFastMathEnabled:
setFilteredGenerationOptions:
setForceResourceIndex:
setForceSeamsOnCubemapFiltering:
setFormat:
setFragmentAccelerationStructure:atBufferIndex:
setFragmentBuffer:offset:atIndex:
setFragmentBufferOffset:atIndex:
setFragmentBuffers:offsets:withRange:
setFragmentBytes:length:atIndex:
setFragmentDepthCompareClampMask:
setFragmentFunction:
setFragmentIntersectionFunctionTable:atBufferIndex:
setFragmentIntersectionFunctionTables:withBufferRange:
setFragmentSamplerState:atIndex:
setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setFragmentSamplerStates:withRange:
setFragmentTexture:atIndex:
setFragmentTexture:atTextureIndex:samplerState:atSamplerIndex:
setFragmentTextures:withRange:
setFragmentVisibleFunctionTable:atBufferIndex:
setFragmentVisibleFunctionTables:withBufferRange:
setFrameCounters:
setFramebufferOnly:
setFrontFaceStencil:
setFrontFacingWinding:
setGPUPriority:offset:
setHazardTrackingMode:
setHeight:
setImageblockSampleLength:
setImageblockWidth:height:
setIndex:
setIndexBufferIndex:
setIndexType:
setIndirectArgumentBufferDecodingData:
setIndirectArgumentManager:
setIndirectCommandBuffer:atIndex:
setIndirectCommandBuffers:withRange:
setIndirectCommandManager:
setInheritBuffers:
setInheritPipelineState:
setInputPrimitiveTopology:
setInterfaceOrientation:
setIntersectionFunctionTable:atBufferIndex:
setIntersectionFunctionTables:withBufferRange:
setIsDrawable:
setIsOpenGLQueue:
setLabel:
setLanguageVersion:
setLastInterestingFunctionIndex:
setLayerManager:
setLevel:
setLineWidth:
setLoadAction:
setLodAverage:
setLogicOperation:
setLogicOperationEnabled:
setLoopTimeLimit:
setMagFilter:
setMaxAnisotropy:
setMaxCommandBufferCount:
setMaxFragmentBufferBindCount:
setMaxKernelBufferBindCount:
setMaxTessellationFactor:
setMaxTotalThreadsPerThreadgroup:
setMaxVertexBufferBindCount:
setMeshBuffer:offset:atIndex:
setMeshBufferOffset:atIndex:
setMeshBuffers:offsets:withRange:
setMeshBytes:length:atIndex:
setMeshSamplerState:atIndex:
setMeshSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setMeshSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setMeshTexture:atIndex:
setMeshTextures:withRange:
setMessageHandler:
setMetalAssertionsEnabled:
setMinFilter:
setMipFilter:
setMipmapLevelCount:
setMockDepthTexture:
setMockStencilTexture:
setMutability:
setNormalizedCoordinates:
setObject:atIndexedSubscript:
setObject:forKey:
setObject:forKeyedSubscript:
setObjectBufferOffset:atIndex:
setObjectBuffers:offsets:withRange:
setObjectBytes:length:atIndex:
setObjectSamplerState:atIndex:
setObjectSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setObjectSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setObjectSamplerStates:withRange:
setObjectTexture:atIndex:
setObjectTextures:withRange:
setObjectThreadgroupMemoryLength:atIndex:
setOffset:
setOpenGLModeEnabled:
setOrigSourceMessageHandler:
setOverrideTriple:
setOwnerWithIdentity:
setParentGPUAddress:
setParentGPUSize:
setPipelineLibrary:
setPlaybackEngine:
setPlaybackMode:
setPointCoordLowerLeft:
setPointSize:
setPointSizeOutputVS:
setPointSmoothEnabled:
setPosition:
setPosition:forLayerID:
setPostVertexDumpBufferIndex:
setPreprocessorMacros:
setPresentsWithTransaction:
setPrimitiveRestartEnabled:
setPrimitiveRestartEnabled:index:
setProfilingEnabled:
setProvokingVertexMode:
setPurgeableState:
setQosLevel:
setQueue:
setRAddressMode:
setRasterSampleCount:
setRasterizationEnabled:
setRasterizationRateMap:
setReadMask:
setRenderPipelineState:
setRenderPipelineStates:withRange:
setRenderTargetArrayLength:
setRenderTargetHeight:
setRenderTargetWidth:
setReplayControllerSupport:
setReplayMessage:
setResolveDepthPlane:
setResolveLevel:
setResolveSlice:
setResolveTexture:
setResourceGroups:count:
setResourceIndex:
setResourceOptions:
setResponsibleProcess:
setResult:
setRgbBlendOperation:
setRotation:
setSAddressMode:
setSampleCoverage:
setSampleMask:
setSamplePositions:count:
setSamplerState:atIndex:
setSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setSamplerStates:withRange:
setScissorRects:count:
setShouldIgnoreCaptureFile:
setSignaledValue:
setSize:
setSkipRender:
setSlice:
setSource:
setSourceAlphaBlendFactor:
setSourceRGBBlendFactor:
setStageInRegion:
setStageInRegionWithIndirectBuffer:indirectBufferOffset:
setStageInputDescriptor:
setStatLocations:
setStatPixels:
setStatVertices:
setStencilAttachment:
setStencilAttachmentPixelFormat:
setStencilCleared
setStencilCompareFunction:
setStencilFailureOperation:
setStencilFrontReferenceValue:backReferenceValue:
setStencilReferenceValue:
setStencilResolveFilter:
setStencilResolveTexture:slice:depthPlane:level:
setStencilResolveTexture:slice:depthPlane:level:yInvert:
setStencilStoreAction:
setStencilStoreActionOptions:
setStepFunction:
setStepRate:
setStoreActionOptions:
setStride:
setSupportArgumentBuffers:
setSupportIndirectCommandBuffers:
setSwizzle:
setSwizzleKey:
setTAddressMode:
setTargetFunctionIndex:
setTargetSubCommandIndex:
setTessellationControlPointIndexType:
setTessellationFactorBuffer:offset:instanceStride:
setTessellationFactorFormat:
setTessellationFactorScale:
setTessellationFactorScaleEnabled:
setTessellationFactorStepFunction:
setTessellationOutputWindingOrder:
setTessellationPartitionMode:
setTexture:
setTexture:atIndex:
setTextures:withRange:
setThreadGroupSizeIsMultipleOfThreadExecutionWidth:
setThreadgroupMemoryLength:
setThreadgroupMemoryLength:atIndex:
setThreadgroupMemoryLength:offset:atIndex:
setThreadgroupSizeMatchesTileSize:
setTileAccelerationStructure:atBufferIndex:
setTileBuffer:offset:atIndex:
setTileBufferOffset:atIndex:
setTileBuffers:offsets:withRange:
setTileBytes:length:atIndex:
setTileFunction:
setTileHeight:
setTileIntersectionFunctionTable:atBufferIndex:
setTileIntersectionFunctionTables:withBufferRange:
setTileSamplerState:atIndex:
setTileSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setTileSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setTileTexture:atIndex:
setTileTextures:withRange:
setTileVisibleFunctionTable:atBufferIndex:
setTileVisibleFunctionTables:withBufferRange:
setTileWidth:
setTracingEnabled:
setTransform:
setTransform:forLayerID:withScreenToLayerScale:
setTransport:
setTriangleFillMode:
setTriangleFrontFillMode:backFillMode:
setTwoSideEnabled:
setType:
setUsage:
setValue:forKey:
setVertexAccelerationStructure:atBufferIndex:
setVertexAmplificationCount:viewMappings:
setVertexAmplificationMode:
setVertexAmplificationMode:value:
setVertexBufferOffset:atIndex:
setVertexBuffers:offsets:withRange:
setVertexBytes:length:atIndex:
setVertexDescriptor:
setVertexFunction:
setVertexIntersectionFunctionTable:atBufferIndex:
setVertexIntersectionFunctionTables:withBufferRange:
setVertexSamplerState:atIndex:
setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setVertexSamplerStates:withRange:
setVertexTexture:atIndex:
setVertexTextures:withRange:
setVertexVisibleFunctionTable:atBufferIndex:
setVertexVisibleFunctionTables:withBufferRange:
setViewport:
setViewportTransformEnabled:
setViewports:count:
setVisibilityResultBuffer:
setVisibleFunctionTable:atBufferIndex:
setVisibleFunctionTables:withBufferRange:
setWidth:
setWireframeLineColor:playbackEngine:
setWireframeRenderMode:
setWithArray:
setWriteMask:
setYInvert:
setupAllStatLocationsWithBlitOption:
setupBatchFilterForEncoders:
setupComputeCommandEncoder:withData:atIndex:forIndirectCommandBuffer:
setupCounterConfigurationAndGetFrameProfilerCounters
setupFrameTimeProfiling
setupProfileInfo:
setupProfilingForCounterLists
setupProfilingForListAtIndex:
setupRenderCommandEncoder:withData:atIndex:forIndirectCommandBuffer:
shaderDebuggerTraceGenerator
sharedController
shouldExecuteGraphicsFunction
shouldIgnoreCaptureFile
shrinkSourceSize:toDestSize:
size
slice
solidTexture
source
sparseSurfaceDefaultValue
sparseTileSizeWithTextureType:pixelFormat:sampleCount:
stageInputDescriptor
standardUserDefaults
statPixels
statVertices
staticThreadgroupMemoryLength
status
stencilAttachment
stencilAttachmentPixelFormat
stencilCompareFunction
stencilFailureOperation
stencilResolveFilter
stencilTextureFromTexture:commandBuffer:
stopFrameProfiling
storageMode
storeAction
storeActionOptions
stringPayload
stringWithFormat:
stringWithUTF8String:
strongLayerManager
structType
subdivideCounterList:
substringWithRange:
superclass
supportArgumentBuffers
supportIndirectCommandBuffers
supportsArgumentBuffersTier2
supportsFeatureSet:
swizzleKey
synchronizeResource:
targetFunctionIndex
targetFunctionNeedsSeparatedPostVertexDump
targetSubCommandIndex
tessellationControlPointIndexType
tessellationFactorFormat
tessellationFactorStepFunction
tessellationOutputWindingOrder
tessellationPartitionMode
tessellationWireframeLineWidth
texture2DDescriptorWithPixelFormat:width:height:mipmapped:
textureBarrier
textureFromTexture:slice:level:depthPlane:commandBuffer:
textureMap
textureType
threadExecutionWidth
threadgroupSizeMatchesTileSize
thumbnailCache
thumbnailTexture:
tileArguments
tileBuffers
tileBytesForKey:
tileBytesKeyAtIndex:
tileFunction
tileHeight
tileWidth
traceBufferIndex
transform
transport
type
unarchivedObjectOfClass:fromData:error:
unarchivedObjectOfClasses:fromData:error:
unfilteredResourceOptions
uniqueIdentifier
uniqueIdentifierForComputePipelineAtIndex:inIndirectArgumentBuffer:atOffset:
uniqueIdentifierForIndirectCommandBufferAtIndex:inIndirectArgumentBuffer:atOffset:
uniqueIdentifierForRenderPipelineAtIndex:inIndirectArgumentBuffer:atOffset:
uniqueIdentifierForSamplerAtIndex:inIndirectArgumentBuffer:atOffset:
uniqueIdentifierForTextureAtIndex:inIndirectArgumentBuffer:atOffset:
unmapShaderSampleBuffer
unsignedIntValue
unsignedIntegerValue
unsignedLongLongValue
unsignedLongValue
updateFence:
updateFence:afterStages:
updateLayer:contentRect:contentsScale:properties:
updateLayer:contentRect:contentsScale:properties:windowRect:
updateReplayerLayer:withOriginalLayer:
updateTextureMapping:mode:indirectBuffer:indirectBufferOffset:
updateTextureMapping:mode:region:mipLevel:slice:
uploadDriverDecodingData:
usage
useHeap:
useHeaps:count:stages:
useResource:usage:
useResource:usage:stages:
useResources:count:usage:
useResources:count:usage:stages:
uuid
validate:width:height:
valueForKey:
vertexAmplificationMode
vertexBuffers
vertexBuiltInArguments
vertexBytesForKey:
vertexBytesKeyAtIndex:
vertexDescriptor
vertexFunction
verticalSampleStorage
viewports
virtualAddressForBufferAtIndex:inIndirectArgumentBuffer:atOffset:
waitForCommmandBuffersCompletion
waitForFence:
waitForFence:beforeStages:
waitUntilComplete
waitUntilCompleted
waitUntilResolved
waitUntilScheduled
width
wireframeLineColor
wireframeLineWidth
wireframeRenderMode
wireframeTexture
writePatchingTableAsJson:
writeToFile:atomically:
writeToURL:atomically:
zone
DYMTLFunctionPlayer
DYMTLCommonFunctionPlayer
DYMTLDebugWireframeRenderer
IndirectRenderCommandEncoderState
IndirectComputeCommandEncoderState
MTLBuffer
MTLResource
NSObject
MTLRenderPipelineState
MTLComputePipelineState
DYMTLIndirectCommandBufferManager
DYMTLIndirectCommandBufferTranslateDelegate
DYMTLPostVertexDump
DYIABPatcher
DYMTLLibraryInfo
DYMTLIndirectCommandBufferInfo
DYMTLTextureRenderer
DYMTLIndirectArgumentBufferManager
MTLTexture
MTLSamplerState
MTLIndirectCommandBuffer
MTLRenderCommandEncoder
MTLCommandEncoder
MTLComputeCommandEncoder
MTLTextureSPI
MTLResourceSPI
DYMTLShaderDebuggerTraceGenerator
DYMTLParallelRenderCommandEncoderStateTracker
DYMTLTileMemoryExtractor
DYMTLDebugPlaybackEngineCounterSupport
PixelHistoryEncoderStateTracking
MTLBlitCommandEncoder
MTLCommandBuffer
MTLParallelRenderCommandEncoder
DYLayerManager
DYMTLCommonDebugFunctionPlayer
DYMTLComputeCommandEncoderStateTracker
q!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
DYMTLPixelHistoryDrawStatsSupport
DYMTLRenderCommandEncoderStateTracker
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
DYReplayControllerQueue
DYReplayController
^v24@0:8Q16
@16@0:8
@24@0:8@16
v16@0:8
@32@0:8Q16@24
v32@0:8@16Q24
@24@0:8Q16
v24@0:8Q16
Q24@0:8@16
Q32@0:8@16^v24
^v16@0:8
r^v24@0:8Q16
B24@0:8Q16
v40@0:8Q16Q24Q32
@48@0:8@16*24Q32Q40
B16@0:8
v24@0:8@16
{unordered_map<unsigned long long, id, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, id>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, id>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, id>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, id>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, id>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, id>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, id>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, id>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
@"<MTLCommandQueueSPI>"
{unordered_map<unsigned long long, NSData *, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, NSData *>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, NSData *>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, NSData *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, NSData *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, NSData *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSData *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSData *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSData *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSData *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSData *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSData *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSData *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, NSData *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, NSData *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, NSData *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, NSData *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
@"DYMTLIndirectArgumentBufferManager"
@"DYMTLIndirectCommandBufferManager"
@"<MTLDevice>"
{unordered_map<unsigned long long, id<CAMetalDrawable>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, id<CAMetalDrawable>>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, id<CAMetalDrawable>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{unordered_map<unsigned long long, bool, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, bool>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, bool>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, bool>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, bool>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, bool>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, bool>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, bool>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, bool>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, bool>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, bool>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, bool>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, bool>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, bool>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, bool>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, bool>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, bool>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
@"<DYLayerManager>"
v40@0:8@16@24^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}32
q56@0:8@16@24@32@40^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}48
B32@0:8@16@24
B24@0:8^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}16
B48@0:8^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}16Q24Q32Q40
q56@0:8Q16Q24Q32Q40^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}48
@"DYMTLCommonDebugFunctionPlayer"
@"<MTLLibrary>"
@"<MTLFunction>"
@"MTLTextureDescriptor"
@"<MTLTexture>"
@"MTLRenderPassColorAttachmentDescriptor"
@"MTLRenderPassDescriptor"
@"<MTLRenderPipelineState>"
@"<MTLComputePipelineState>"
@"<DYMTLStatefulRenderCommandEncoder>"
@"<MTLCommandBufferSPI>"
@"<DYMTLStatefulParallelRenderCommandEncoder>"
@40@0:8@16@24@32
v32@0:8@16@24
[31@"<MTLBuffer>"]
[31^v]
[31Q]
B24@0:8@16
#16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
Q24@0:8Q16
v24@0:8@"NSString"16
@"<MTLDevice>"16@0:8
@"<MTLHeap>"16@0:8
v32@0:8{_NSRange=QQ}16
@40@0:8@16Q24Q32
v40@0:8@16{_NSRange=QQ}24
@"<MTLTexture>"40@0:8@"MTLTextureDescriptor"16Q24Q32
v40@0:8@"NSString"16{_NSRange=QQ}24
Q40@0:8{?=QQQ}16
@32@0:8@16Q24
@32@0:8@16^@24
{MTLResourceID=Q}16@0:8
@"<MTLFunctionHandle>"32@0:8@"<MTLFunction>"16Q24
@"<MTLVisibleFunctionTable>"32@0:8@"MTLVisibleFunctionTableDescriptor"16Q24
@"<MTLIntersectionFunctionTable>"32@0:8@"MTLIntersectionFunctionTableDescriptor"16Q24
@"<MTLRenderPipelineState>"32@0:8@"MTLRenderPipelineFunctionsDescriptor"16^@24
@"<MTLFunctionHandle>"24@0:8@"<MTLFunction>"16
@"<MTLComputePipelineState>"32@0:8@"NSArray"16^@24
@"<MTLVisibleFunctionTable>"24@0:8@"MTLVisibleFunctionTableDescriptor"16
@"<MTLIntersectionFunctionTable>"24@0:8@"MTLIntersectionFunctionTableDescriptor"16
{pair<unsigned long long, unsigned long long>=QQ}24@0:8Q16
v32@0:8Q16Q24
v48@0:8@16r*24Q32@40
I56@0:8@16r*24{_NSRange=QQ}32@48
v40@0:8@16r*24@32
Q48@0:8@16r*24Q32@40
@48@0:8r*16{_NSRange=QQ}24r^{CoreFunction=IISS(?=QQ){Argument=^vIIISS}[16{Argument=^vIIISS}]II^v^v}40
@32@0:8@16@24
@"DYMTLFunctionPlayer"
{unordered_map<unsigned long long, unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, unsigned long long>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, unsigned long long>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, unsigned long long>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, unsigned long long>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, unsigned long long>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, unsigned long long>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, unsigned long long>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, unsigned long long>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{vector<GPUTools::MTL::Utils::DYMTLBufferGPUAddress, std::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>>="__begin_"^{DYMTLBufferGPUAddress}"__end_"^{DYMTLBufferGPUAddress}"__end_cap_"{__compressed_pair<GPUTools::MTL::Utils::DYMTLBufferGPUAddress *, std::allocator<GPUTools::MTL::Utils::DYMTLBufferGPUAddress>>="__value_"^{DYMTLBufferGPUAddress}}}
B40@0:8Q16Q24Q32
@"<MTLBuffer>"
@20@0:8i16
v64@0:8{DYIABPatchingOp={?=QQ}{?=QQ}}16{DYCommandBufferUID=QI}48
^v32@0:8{DYCommandBufferUID=QI}16
B48@0:8{DYCommandBufferUID=QI}16r^v32@40
B48@0:8Q16^v24Q32r^v40
i16@0:8
{unordered_map<DYCommandBufferUID, std::set<BufferEntry>, DYCommandBufferUIDHash, std::equal_to<DYCommandBufferUID>, std::allocator<std::pair<const DYCommandBufferUID, std::set<BufferEntry>>>>="__table_"{__hash_table<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, std::__unordered_map_hasher<DYCommandBufferUID, std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, DYCommandBufferUIDHash, std::equal_to<DYCommandBufferUID>, true>, std::__unordered_map_equal<DYCommandBufferUID, std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, std::equal_to<DYCommandBufferUID>, DYCommandBufferUIDHash, true>, std::allocator<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<DYCommandBufferUID, std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, DYCommandBufferUIDHash, std::equal_to<DYCommandBufferUID>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<DYCommandBufferUID, std::__hash_value_type<DYCommandBufferUID, std::set<BufferEntry>>, std::equal_to<DYCommandBufferUID>, DYCommandBufferUIDHash, true>>="__value_"f}}}
{unordered_map<unsigned long long, std::vector<PatchingRequest>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::vector<PatchingRequest>>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<PatchingRequest>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{DYCommandBufferUID="objectId"Q"functionIndex"I}
@40@0:8Q16@24@32
@"MTLCompileOptions"
@40@0:8Q16Q24Q32
v40@0:8@16@24B32I36
v32@0:8f16f20f24f28
@"MTLRenderPipelineDescriptor"
@"MTLDepthStencilDescriptor"
{UniformData="blendColor"[4f]"layerIndex"I"padding"[3I]}
@"<MTLSamplerState>"
v60@0:8Q16I24r^v28r^v36r^v44@52
v24@0:8r^v16
v56@0:8Q16Q24Q32Q40^v48
v32@0:8Q16^v24
v40@0:8Q16^v24^v32
v48@0:8r^v16Q24^v32^v40
@32@0:8r^v16^@24
v24@0:8^v16
v48@0:8@16Q24@32@40
@"NSObject<OS_dispatch_data>"
{vector<DYCommandBufferUID, std::allocator<DYCommandBufferUID>>="__begin_"^{DYCommandBufferUID}"__end_"^{DYCommandBufferUID}"__end_cap_"{__compressed_pair<DYCommandBufferUID *, std::allocator<DYCommandBufferUID>>="__value_"^{DYCommandBufferUID}}}
{vector<std::vector<std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, std::allocator<std::vector<std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::vector<std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>> *, std::allocator<std::vector<std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>>>="__value_"^v}}
{vector<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>, std::allocator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>> *, std::allocator<std::vector<std::vector<GPUTools::MTL::Utils::DYMTLIndirectArgumentBufferInfo>>>>="__value_"^v}}
{map<unsigned long long, std::vector<DYMTLOriginalProcessBuffer>, std::less<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::vector<DYMTLOriginalProcessBuffer>>>>="__tree_"{__tree<std::__value_type<unsigned long long, std::vector<DYMTLOriginalProcessBuffer>>, std::__map_value_compare<unsigned long long, std::__value_type<unsigned long long, std::vector<DYMTLOriginalProcessBuffer>>, std::less<unsigned long long>, true>, std::allocator<std::__value_type<unsigned long long, std::vector<DYMTLOriginalProcessBuffer>>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned long long, std::vector<DYMTLOriginalProcessBuffer>>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<unsigned long long, std::__value_type<unsigned long long, std::vector<DYMTLOriginalProcessBuffer>>, std::less<unsigned long long>, true>>="__value_"Q}}}
{unordered_map<unsigned long long, std::vector<unsigned long long>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::vector<unsigned long long>>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::vector<unsigned long long>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{unordered_map<unsigned long long, id<MTLSamplerState>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, id<MTLSamplerState>>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, id<MTLSamplerState>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{unordered_map<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::unordered_map<unsigned long long, std::unordered_map<unsigned long long, unsigned long long>>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{unordered_map<unsigned long long, std::set<DYMTLIABDecodingOp>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, std::set<DYMTLIABDecodingOp>>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, std::set<DYMTLIABDecodingOp>>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{set<unsigned long long, std::less<unsigned long long>, std::allocator<unsigned long long>>="__tree_"{__tree<unsigned long long, std::less<unsigned long long>, std::allocator<unsigned long long>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<unsigned long long, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::less<unsigned long long>>="__value_"Q}}}
{vector<DYMTLReplayerIAB, std::allocator<DYMTLReplayerIAB>>="__begin_"^{DYMTLReplayerIAB}"__end_"^{DYMTLReplayerIAB}"__end_cap_"{__compressed_pair<DYMTLReplayerIAB *, std::allocator<DYMTLReplayerIAB>>="__value_"^{DYMTLReplayerIAB}}}
{map<unsigned long long, unsigned long long, std::less<unsigned long long>, std::allocator<std::pair<const unsigned long long, unsigned long long>>>="__tree_"{__tree<std::__value_type<unsigned long long, unsigned long long>, std::__map_value_compare<unsigned long long, std::__value_type<unsigned long long, unsigned long long>, std::less<unsigned long long>, true>, std::allocator<std::__value_type<unsigned long long, unsigned long long>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<unsigned long long, unsigned long long>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<unsigned long long, std::__value_type<unsigned long long, unsigned long long>, std::less<unsigned long long>, true>>="__value_"Q}}}
[6Q]
@"DYIABPatcher"
v104@0:8^v16Q24Q32{?={?=QQQ}{?=QQQ}}40Q88Q96
v104@0:8{?={?=QQQ}{?=QQQ}}16Q64Q72r^v80Q88Q96
v88@0:8^v16Q24{?={?=QQQ}{?=QQQ}}32Q80
v88@0:8{?={?=QQQ}{?=QQQ}}16Q64r^v72Q80
@64@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48
@68@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64
^{__IOSurface=}16@0:8
q16@0:8
{?=CCCC}16@0:8
@"<MTLTexture>"24@0:8Q16
@"<MTLTexture>"64@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48
@"<MTLTexture>"68@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64
@"<MTLResource>"16@0:8
@"<MTLTexture>"16@0:8
@"<MTLBuffer>"16@0:8
@"<MTLIndirectRenderCommand>"24@0:8Q16
@"<MTLIndirectComputeCommand>"24@0:8Q16
v40@0:8r^v16Q24Q32
v40@0:8@16Q24Q32
v48@0:8r^@16r^Q24{_NSRange=QQ}32
v40@0:8r^@16{_NSRange=QQ}24
v40@0:8@16f24f28Q32
v56@0:8r^@16r^f24r^f32{_NSRange=QQ}40
v64@0:8{?=dddddd}16
v32@0:8r^{?=dddddd}16Q24
v32@0:8Q16r^{?=II}24
v28@0:8f16f20f24
v48@0:8{?=QQQQ}16
v32@0:8r^{?=QQQQ}16Q24
v20@0:8I16
v24@0:8I16I20
v88@0:8{?=QQQ}16{?=QQQ}40{?=QQQ}64
v80@0:8@16Q24{?=QQQ}32{?=QQQ}56
v48@0:8Q16Q24Q32Q40
v64@0:8Q16Q24Q32@40Q48Q56
v56@0:8Q16Q24Q32@40Q48
v56@0:8Q16Q24Q32Q40Q48
v80@0:8Q16Q24Q32@40Q48Q56q64Q72
v40@0:8Q16@24Q32
v64@0:8Q16Q24@32Q40@48Q56
v20@0:8f16
v72@0:8Q16Q24Q32@40Q48Q56Q64
v56@0:8Q16@24Q32@40Q48
v88@0:8Q16Q24Q32@40Q48@56Q64Q72Q80
v72@0:8Q16@24Q32@40Q48@56Q64
v40@0:8{?=QQQ}16
v40@0:8r^@16Q24Q32
v48@0:8r^@16Q24Q32Q40
v32@0:8r^@16Q24
v40@0:8@16@24Q32
v36@0:8@16Q24B32
v24@0:8@"<MTLRenderPipelineState>"16
v40@0:8@"<MTLBuffer>"16Q24Q32
v32@0:8@"<MTLTexture>"16Q24
v32@0:8@"<MTLSamplerState>"16Q24
v40@0:8@"<MTLSamplerState>"16f24f28Q32
v32@0:8@"<MTLVisibleFunctionTable>"16Q24
v32@0:8@"<MTLIntersectionFunctionTable>"16Q24
v32@0:8@"<MTLAccelerationStructure>"16Q24
v24@0:8@"<MTLDepthStencilState>"16
v80@0:8@"<MTLBuffer>"16Q24{?=QQQ}32{?=QQQ}56
v64@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56
v56@0:8Q16Q24Q32@"<MTLBuffer>"40Q48
v80@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56q64Q72
v40@0:8Q16@"<MTLBuffer>"24Q32
v64@0:8Q16Q24@"<MTLBuffer>"32Q40@"<MTLBuffer>"48Q56
v32@0:8@"<MTLFence>"16Q24
v72@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56Q64
v56@0:8Q16@"<MTLBuffer>"24Q32@"<MTLBuffer>"40Q48
v88@0:8Q16Q24Q32@"<MTLBuffer>"40Q48@"<MTLBuffer>"56Q64Q72Q80
v72@0:8Q16@"<MTLBuffer>"24Q32@"<MTLBuffer>"40Q48@"<MTLBuffer>"56Q64
v32@0:8@"<MTLResource>"16Q24
v40@0:8@"<MTLResource>"16Q24Q32
v24@0:8@"<MTLHeap>"16
v32@0:8@"<MTLHeap>"16Q24
v40@0:8@"<MTLIndirectCommandBuffer>"16{_NSRange=QQ}24
v40@0:8@"<MTLIndirectCommandBuffer>"16@"<MTLBuffer>"24Q32
v36@0:8@"<MTLCounterSampleBuffer>"16Q24B32
v64@0:8{?={?=QQQ}{?=QQQ}}16
v64@0:8{?=QQQ}16{?=QQQ}40
v56@0:8@16Q24{?=QQQ}32
v24@0:8@"<MTLComputePipelineState>"16
v32@0:8@"<MTLBuffer>"16Q24
v56@0:8@"<MTLBuffer>"16Q24{?=QQQ}32
v24@0:8@"<MTLFence>"16
B32@0:8r^@16Q24
v20@0:8i16
i20@0:8I16
B24@0:8@"<MTLResource>"16
I16@0:8
@48@0:8Q16Q24Q32Q40
@32@0:8Q16Q24
@72@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48Q64
@76@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64Q68
@"<MTLTexture>"48@0:8Q16Q24Q32Q40
@"<MTLTexture>"32@0:8Q16Q24
@"<MTLTexture>"72@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48Q64
@"<MTLTexture>"76@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64Q68
B36@0:8@16@24i32
v32@0:8Q16@24
@"NSString"
{map<MTLTextureType, id<MTLTexture>, std::less<MTLTextureType>, std::allocator<std::pair<const MTLTextureType, id<MTLTexture>>>>="__tree_"{__tree<std::__value_type<MTLTextureType, id<MTLTexture>>, std::__map_value_compare<MTLTextureType, std::__value_type<MTLTextureType, id<MTLTexture>>, std::less<MTLTextureType>, true>, std::allocator<std::__value_type<MTLTextureType, id<MTLTexture>>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<MTLTextureType, id<MTLTexture>>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<MTLTextureType, std::__value_type<MTLTextureType, id<MTLTexture>>, std::less<MTLTextureType>, true>>="__value_"Q}}}
@"<MTLArgumentEncoder>"
{map<id<MTLSamplerState>, unsigned long long, std::less<id<MTLSamplerState>>, std::allocator<std::pair<const id<MTLSamplerState>, unsigned long long>>>="__tree_"{__tree<std::__value_type<id<MTLSamplerState>, unsigned long long>, std::__map_value_compare<id<MTLSamplerState>, std::__value_type<id<MTLSamplerState>, unsigned long long>, std::less<id<MTLSamplerState>>, true>, std::allocator<std::__value_type<id<MTLSamplerState>, unsigned long long>>>="__begin_node_"^v"__pair1_"{__compressed_pair<std::__tree_end_node<std::__tree_node_base<void *> *>, std::allocator<std::__tree_node<std::__value_type<id<MTLSamplerState>, unsigned long long>, void *>>>="__value_"{__tree_end_node<std::__tree_node_base<void *> *>="__left_"^v}}"__pair3_"{__compressed_pair<unsigned long, std::__map_value_compare<id<MTLSamplerState>, std::__value_type<id<MTLSamplerState>, unsigned long long>, std::less<id<MTLSamplerState>>, true>>="__value_"Q}}}
@"NSDictionary"
{unordered_map<unsigned long, id<MTLBuffer>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, id<MTLBuffer>>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long, id<MTLBuffer>>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, id<MTLBuffer>>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, id<MTLBuffer>>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, id<MTLBuffer>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, id<MTLBuffer>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, id<MTLBuffer>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, id<MTLBuffer>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, id<MTLBuffer>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, id<MTLBuffer>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, id<MTLBuffer>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, id<MTLBuffer>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, id<MTLBuffer>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, id<MTLBuffer>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, id<MTLBuffer>>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, id<MTLBuffer>>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>>="__value_"f}}}
@"NSData"
@"<MTLParallelRenderCommandEncoder>"
@80@0:8@16@24{?=QQQ}32{?=QQQ}56
v28@0:8@16B24
B28@0:8@16B24
v32@0:8@16^v24
@48@0:8@16^v24@32Q40
@56@0:8@16^v24@32@40Q48
@24@0:8^{DYMTLImageBlockMember=@@QQQ}16
@32@0:8^{DYMTLImageBlockMember=@@QQQ}16Q24
@40@0:8^{DYMTLImageBlockMember=@@QQQ}16@24Q32
@"<MTLDeviceSPI>"
{?="width"Q"height"Q"depth"Q}
{vector<DYMTLImageBlockArgument *, std::allocator<DYMTLImageBlockArgument *>>="__begin_"^^{DYMTLImageBlockArgument}"__end_"^^{DYMTLImageBlockArgument}"__end_cap_"{__compressed_pair<DYMTLImageBlockArgument **, std::allocator<DYMTLImageBlockArgument *>>="__value_"^^{DYMTLImageBlockArgument}}}
B52@0:8^v16r^v24@32@40B48
B48@0:8^v16r^v24@32@40
@36@0:8@16B24^v28
@36@0:8@16B24B28I32
@28@0:8@16B24
@28@0:8@16I24
Q28@0:8@16I24
{vector<std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>, std::allocator<std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> *, std::allocator<std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>>>="__value_"^v}}
{vector<std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>, std::allocator<std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long> *, std::allocator<std::tuple<unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long, unsigned long long>>>="__value_"^v}}
{vector<unsigned long long, std::allocator<unsigned long long>>="__begin_"^Q"__end_"^Q"__end_cap_"{__compressed_pair<unsigned long long *, std::allocator<unsigned long long>>="__value_"^Q}}
@"NSMutableDictionary"
@"DYPlaybackEngine"
v136@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104{?=QQQ}112
v120@0:8@16Q24Q32Q40{?=QQQ}48@72Q80Q88{?=QQQ}96
v128@0:8@16Q24Q32Q40{?=QQQ}48@72Q80Q88{?=QQQ}96Q120
v120@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104Q112
v128@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104Q112Q120
v44@0:8@16{_NSRange=QQ}24C40
v80@0:8@16Q24Q32@40Q48Q56Q64Q72
v56@0:8@16Q24@32Q40Q48
v108@0:8@16{?={?=QQQ}{?=QQQ}}24Q72Q80B88@92Q100
v88@0:8@16{?={?=QQQ}{?=QQQ}}24Q72Q80
v56@0:8@16{_NSRange=QQ}24@40Q48
v24@0:8@"<MTLResource>"16
v40@0:8@"<MTLTexture>"16Q24Q32
v136@0:8@"<MTLTexture>"16Q24Q32{?=QQQ}40{?=QQQ}64@"<MTLTexture>"88Q96Q104{?=QQQ}112
v120@0:8@"<MTLBuffer>"16Q24Q32Q40{?=QQQ}48@"<MTLTexture>"72Q80Q88{?=QQQ}96
v128@0:8@"<MTLBuffer>"16Q24Q32Q40{?=QQQ}48@"<MTLTexture>"72Q80Q88{?=QQQ}96Q120
v120@0:8@"<MTLTexture>"16Q24Q32{?=QQQ}40{?=QQQ}64@"<MTLBuffer>"88Q96Q104Q112
v128@0:8@"<MTLTexture>"16Q24Q32{?=QQQ}40{?=QQQ}64@"<MTLBuffer>"88Q96Q104Q112Q120
v24@0:8@"<MTLTexture>"16
v44@0:8@"<MTLBuffer>"16{_NSRange=QQ}24C40
v80@0:8@"<MTLTexture>"16Q24Q32@"<MTLTexture>"40Q48Q56Q64Q72
v32@0:8@"<MTLTexture>"16@"<MTLTexture>"24
v56@0:8@"<MTLBuffer>"16Q24@"<MTLBuffer>"32Q40Q48
v108@0:8@"<MTLTexture>"16{?={?=QQQ}{?=QQQ}}24Q72Q80B88@"<MTLBuffer>"92Q100
v88@0:8@"<MTLTexture>"16{?={?=QQQ}{?=QQQ}}24Q72Q80
v56@0:8@"<MTLIndirectCommandBuffer>"16{_NSRange=QQ}24@"<MTLIndirectCommandBuffer>"40Q48
v56@0:8@"<MTLCounterSampleBuffer>"16{_NSRange=QQ}24@"<MTLBuffer>"40Q48
v24@0:8@?16
v32@0:8@16d24
d16@0:8
v24@0:8@?<v@?@"<MTLCommandBuffer>">16
v24@0:8@"<MTLDrawable>"16
v32@0:8@"<MTLDrawable>"16d24
@"<MTLBlitCommandEncoder>"16@0:8
@"<MTLRenderCommandEncoder>"24@0:8@"MTLRenderPassDescriptor"16
@"<MTLComputeCommandEncoder>"24@0:8@"MTLComputePassDescriptor"16
@"<MTLBlitCommandEncoder>"24@0:8@"MTLBlitPassDescriptor"16
@"<MTLComputeCommandEncoder>"16@0:8
@"<MTLComputeCommandEncoder>"24@0:8Q16
v32@0:8@"<MTLEvent>"16Q24
@"<MTLParallelRenderCommandEncoder>"24@0:8@"MTLRenderPassDescriptor"16
@"<MTLResourceStateCommandEncoder>"16@0:8
@"<MTLResourceStateCommandEncoder>"24@0:8@"MTLResourceStatePassDescriptor"16
@"<MTLAccelerationStructureCommandEncoder>"16@0:8
@"<MTLAccelerationStructureCommandEncoder>"24@0:8@"MTLAccelerationStructurePassDescriptor"16
@"<MTLCommandQueue>"16@0:8
@"<MTLLogContainer>"16@0:8
@"NSError"16@0:8
@"<MTLRenderCommandEncoder>"16@0:8
@76@0:8Q16{CGRect={CGPoint=dd}{CGSize=dd}}24d56@64B72
v72@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24d56@64
v40@0:8r^{Argument=^vIIISS}16Q24r^v32
v32@0:8r^{Argument=^vIIISS}16Q24
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
@"CALayer"76@0:8Q16{CGRect={CGPoint=dd}{CGSize=dd}}24d56@"NSDictionary"64B72
v72@0:8@"CALayer"16{CGRect={CGPoint=dd}{CGSize=dd}}24d56@"NSDictionary"64
@"CALayer"24@0:8Q16
@"CALayer"16@0:8
v24@0:8@"CALayer"16
@56@0:8@16{?=QQQ}24@48
v36@0:8^{CoreFunction=IISS(?=QQ){Argument=^vIIISS}[16{Argument=^vIIISS}]II^v^v}16Q24I32
v28@0:8B16@20
@56@0:8@16@24Q32Q40@?48
@72@0:8@16Q24@32@40Q48Q56@?64
@72@0:8Q16@24Q32@40@48Q56Q64
@96@0:8Q16Q24Q32Q40@48Q56@64@72Q80Q88
v36@0:8^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}16Q24B32
v20@0:8B16
v24@0:8B16I20
@56@0:8@16Q24Q32Q40@48
{AttachmentInfo=QQQQ}24@0:8Q16
v32@0:8^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}16Q24
v32@0:8^v16Q24
Q40@0:8Q16^@24r^*32
v24@0:8q16
{unordered_map<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, GPUTools::MTL::Utils::DYMTLRenderPassDescriptor>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{vector<unsigned long, std::allocator<unsigned long>>="__begin_"^Q"__end_"^Q"__end_cap_"{__compressed_pair<unsigned long *, std::allocator<unsigned long>>="__value_"^Q}}
{unordered_map<unsigned long long, CommandBufferInfo, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, CommandBufferInfo>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, CommandBufferInfo>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, CommandBufferInfo>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, CommandBufferInfo>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, CommandBufferInfo>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, CommandBufferInfo>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CommandBufferInfo>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, CommandBufferInfo>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, CommandBufferInfo>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{unordered_map<unsigned long long, EncoderInfo, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, EncoderInfo>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, EncoderInfo>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, EncoderInfo>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, EncoderInfo>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, EncoderInfo>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, EncoderInfo>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, EncoderInfo>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, EncoderInfo>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, EncoderInfo>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, EncoderInfo>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{unordered_set<unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<unsigned long long>>="__table_"{__hash_table<unsigned long long, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<unsigned long long>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<unsigned long long, void *> *>, std::allocator<std::__hash_node<unsigned long long, void *>>>="__value_"{__hash_node_base<std::__hash_node<unsigned long long, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::hash<unsigned long long>>="__value_"Q}"__p3_"{__compressed_pair<float, std::equal_to<unsigned long long>>="__value_"f}}}
@"DYMTLDebugWireframeRenderer"
{DYMTLRenderPassDescriptor="visibilityResultBuffer"Q"renderTargetArrayLength"Q"colorAttachments"[8{DYMTLRenderPassAttachmentDescriptor="texture"Q"level"Q"slice"Q"depthPlane"Q"resolveTexture"Q"resolveLevel"Q"resolveSlice"Q"resolveDepthPlane"Q"loadAction"Q"storeAction"Q"storeActionOptions"Q"clearValue"{DYMTLClearValue=""(?=""{?="red"d"green"d"blue"d"alpha"d}"colors"[4d])}"yInvert"B"depthResolveFilter"Q"stencilResolveFilter"Q}]"depthAttachment"{DYMTLRenderPassAttachmentDescriptor="texture"Q"level"Q"slice"Q"depthPlane"Q"resolveTexture"Q"resolveLevel"Q"resolveSlice"Q"resolveDepthPlane"Q"loadAction"Q"storeAction"Q"storeActionOptions"Q"clearValue"{DYMTLClearValue=""(?=""{?="red"d"green"d"blue"d"alpha"d}"colors"[4d])}"yInvert"B"depthResolveFilter"Q"stencilResolveFilter"Q}"stencilAttachment"{DYMTLRenderPassAttachmentDescriptor="texture"Q"level"Q"slice"Q"depthPlane"Q"resolveTexture"Q"resolveLevel"Q"resolveSlice"Q"resolveDepthPlane"Q"loadAction"Q"storeAction"Q"storeActionOptions"Q"clearValue"{DYMTLClearValue=""(?=""{?="red"d"green"d"blue"d"alpha"d}"colors"[4d])}"yInvert"B"depthResolveFilter"Q"stencilResolveFilter"Q}"imageblockSampleLength"Q"threadgroupMemoryLength"Q"tileWidth"Q"tileHeight"Q"renderTargetWidth"Q"renderTargetHeight"Q"defaultRasterSampleCount"Q"rasterizationRateMap"Q"customSamplePositions"[8{DYMTLSamplePosition="x"f"y"f}]"customSampleCount"Q"openGLModeEnabled"B"ditherEnabled"B}
@"NSArray"
{unordered_map<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, std::vector<std::pair<unsigned int, unsigned int>>>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>>="__value_"f}}}
{vector<std::pair<unsigned int, unsigned int>, std::allocator<std::pair<unsigned int, unsigned int>>>="__begin_"^v"__end_"^v"__end_cap_"{__compressed_pair<std::pair<unsigned int, unsigned int> *, std::allocator<std::pair<unsigned int, unsigned int>>>="__value_"^v}}
{?="origin"{?="x"Q"y"Q"z"Q}"size"{?="width"Q"height"Q"depth"Q}}
{vector<bool, std::allocator<bool>>="__begin_"^Q"__size_"Q"__cap_alloc_"{__compressed_pair<unsigned long, std::allocator<unsigned long>>="__value_"Q}}
@"DYMTLPostVertexDump"
@"DYMTLTileMemoryExtractor"
@"DYMTLShaderDebuggerTraceGenerator"
@"DYMTLTextureRenderer"
{unordered_map<unsigned long long, CAMetalLayer *, std::hash<unsigned long long>, std::equal_to<unsigned long long>, std::allocator<std::pair<const unsigned long long, CAMetalLayer *>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long long, CAMetalLayer *>, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, CAMetalLayer *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, CAMetalLayer *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>, std::allocator<std::__hash_value_type<unsigned long long, CAMetalLayer *>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long long, CAMetalLayer *>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long long, CAMetalLayer *>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long long, std::__hash_value_type<unsigned long long, CAMetalLayer *>, std::hash<unsigned long long>, std::equal_to<unsigned long long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long long, std::__hash_value_type<unsigned long long, CAMetalLayer *>, std::equal_to<unsigned long long>, std::hash<unsigned long long>, true>>="__value_"f}}}
{tuple<unsigned long long, unsigned long long>="__base_"{__tuple_impl<std::__tuple_indices<0, 1>, unsigned long long, unsigned long long>="__value_"Q"__value_"Q}}
@"<MTLFence>"
@"DYMTLPixelHistoryDrawStatsSupport"
@"NSMutableArray"
v32@0:8@16@?24
@"<MTLComputePipelineState>"16@0:8
v24@0:8@?<v@?^{DYMTLBoundBufferInfo=@^vQ}Q^B>16
v24@0:8@?<v@?@"<MTLTexture>"Q^B>16
v24@0:8@?<v@?^{DYMTLBoundSamplerInfo=@ff}Q^B>16
v32@0:8@"<MTLComputeCommandEncoder>"16@?<^v@?^vQ>24
@"<MTLComputeCommandEncoderSPI>"
{vector<id<MTLHeap>, std::allocator<id<MTLHeap>>>="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<__strong id<MTLHeap> *, std::allocator<id<MTLHeap>>>="__value_"^@}}
{vector<DYMTLUsedResourceInfo, std::allocator<DYMTLUsedResourceInfo>>="__begin_"^{DYMTLUsedResourceInfo}"__end_"^{DYMTLUsedResourceInfo}"__end_cap_"{__compressed_pair<DYMTLUsedResourceInfo *, std::allocator<DYMTLUsedResourceInfo>>="__value_"^{DYMTLUsedResourceInfo}}}
[31{DYMTLBoundBufferInfo="m_buffer"@"<MTLBuffer>""m_bytes"^v"m_offsetOrLength"Q}]
[128@"<MTLTexture>"]
[16{DYMTLBoundSamplerInfo="sampler"@"<MTLSamplerState>""minLOD"f"maxLOD"f}]
B40@0:8@16@24^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}32
B48@0:8Q16Q24Q32^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}40
B48@0:8@16@24@32^{DYMTLRenderPassDescriptor=QQ[8{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}]{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}{DYMTLRenderPassAttachmentDescriptor=QQQQQQQQQQQ{DYMTLClearValue=(?={?=dddd}[4d])}BQQ}QQQQQQQQ[8{DYMTLSamplePosition=ff}]QBB}40
B40@0:8@16@24@32
B80@0:8@16@24@32@40@48Q56Q64Q72
v40@0:8Q16Q24@?32
@"<MTLCommandBuffer>"
f16@0:8
{vector<MTLViewport, std::allocator<MTLViewport>>=^{?}^{?}{__compressed_pair<MTLViewport *, std::allocator<MTLViewport>>=^{?}}}16@0:8
v24@0:8@?<v@?^{DYMTLThreadgroupMemoryInfo=QQ}Q^B>16
@"MTLRenderPassDescriptor"16@0:8
@"<MTLRenderPipelineState>"16@0:8
@"<MTLDepthStencilState>"16@0:8
v32@0:8@"<MTLRenderCommandEncoder>"16@?<^v@?I^vQ>24
v48@0:8@16Q24@32Q40
@"<MTLRenderCommandEncoderSPI>"
{vector<MTLScissorRect, std::allocator<MTLScissorRect>>="__begin_"^{?}"__end_"^{?}"__end_cap_"{__compressed_pair<MTLScissorRect *, std::allocator<MTLScissorRect>>="__value_"^{?}}}
@"<MTLDepthStencilState>"
{vector<__unsafe_unretained id<MTLHeap>, std::allocator<__unsafe_unretained id<MTLHeap>>>="__begin_"^@"__end_"^@"__end_cap_"{__compressed_pair<__unsafe_unretained id<MTLHeap> *, std::allocator<__unsafe_unretained id<MTLHeap>>>="__value_"^@}}
[31{DYMTLThreadgroupMemoryInfo="length"Q"offset"Q}]
{vector<MTLVertexAmplificationViewMapping, std::allocator<MTLVertexAmplificationViewMapping>>="__begin_"^{?}"__end_"^{?}"__end_cap_"{__compressed_pair<MTLVertexAmplificationViewMapping *, std::allocator<MTLVertexAmplificationViewMapping>>="__value_"^{?}}}
{unordered_map<unsigned long, DYMTLStoreInfo, std::hash<unsigned long>, std::equal_to<unsigned long>, std::allocator<std::pair<const unsigned long, DYMTLStoreInfo>>>="__table_"{__hash_table<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, DYMTLStoreInfo>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, DYMTLStoreInfo>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>, std::allocator<std::__hash_value_type<unsigned long, DYMTLStoreInfo>>>="__bucket_list_"{unique_ptr<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *> *[], std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *> *>>>="__ptr_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *> **, std::__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *> *>>>="__value_"^^v"__value_"{__bucket_list_deallocator<std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *> *>>="__data_"{__compressed_pair<unsigned long, std::allocator<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *> *>>="__value_"Q}}}}"__p1_"{__compressed_pair<std::__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *>, std::allocator<std::__hash_node<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *>>>="__value_"{__hash_node_base<std::__hash_node<std::__hash_value_type<unsigned long, DYMTLStoreInfo>, void *> *>="__next_"^v}}"__p2_"{__compressed_pair<unsigned long, std::__unordered_map_hasher<unsigned long, std::__hash_value_type<unsigned long, DYMTLStoreInfo>, std::hash<unsigned long>, std::equal_to<unsigned long>, true>>="__value_"Q}"__p3_"{__compressed_pair<float, std::__unordered_map_equal<unsigned long, std::__hash_value_type<unsigned long, DYMTLStoreInfo>, std::equal_to<unsigned long>, std::hash<unsigned long>, true>>="__value_"f}}}
{DYMTLStoreInfo="action"Q"options"Q}
{vector<MTLViewport, std::allocator<MTLViewport>>="__begin_"^{?}"__end_"^{?}"__end_cap_"{__compressed_pair<MTLViewport *, std::allocator<MTLViewport>>="__value_"^{?}}}
@?16@0:8
{queue<void (^)(), std::deque<void (^)()>>="c"{deque<void (^)(), std::allocator<void (^)()>>="__map_"{__split_buffer<void (^__strong *)(), std::allocator<void (^__strong *)()>>="__first_"^^@?"__begin_"^^@?"__end_"^^@?"__end_cap_"{__compressed_pair<void (^__strong **)(), std::allocator<void (^__strong *)()>>="__value_"^^@?}}"__start_"Q"__size_"{__compressed_pair<unsigned long, std::allocator<void (^)()>>="__value_"Q}}}
B32@0:8@16^@24
B28@0:8@16i24
v40@0:8@16@24@32
v36@0:8@16@24B32
@"NSObject<OS_dispatch_queue>"
@"DYReplayControllerQueue"
@"DYTransport"
@"DYTransportSource"
@"DYTransportMessage"
@"DYCaptureArchiveStack"
@"<DYReplayControllerSupport>"
