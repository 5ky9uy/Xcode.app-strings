v16@?0@"<MTLSerializerAllocator>"8
v24@?0r^v8Q16
argumentBufferLayoutRef
TI,R,D
hash
TQ,R
superclass
T#,R
description
T@"NSString",R,C
debugDescription
device
T@"<MTLDevice>",R
label
T@"NSString",C
encodedLength
alignment
argumentEncoderRef
data
T@"NSObject<OS_dispatch_data>",R,V_data
messageType
command
replyData
v8@?0
index creation queue
deserializerGeneratesResourceRefs
TB,R,N,V_deserializerGeneratesResourceRefs
reflectionSerializationVersion
TQ,V_reflectionSerializationVersion
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
v16@?0@"NSObject<OS_xpc_object>"8
signaledValue
TQ,D
com.apple.MTLSimDriver
-[MTLSerializerBlitCommandEncoder copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:]_block_invoke
Unable to load Simulator decoder Metal library: %@
pvrtc2
pvrtc4
DecodeEAC_R11Unorm
DecodeEAC_R11Snorm
DecodeEAC_RG11Unorm
DecodeEAC_RG11Snorm
DecodeEAC_RGBA8
DecodeETC2_RGB8
DecodeETC2_RGB8A1
astc
Error creating kernel '%@': %@
Error creating pipeline state %@ from %@
v16@?0@"<MTLCommandBuffer>"8
-[MTLSerializerBlitCommandEncoder getTextureAccessCounters:region:mipLevel:slice:resetCounters:countersBuffer:countersBufferOffset:]
Not supported
-[MTLSerializerBlitCommandEncoder resetTextureAccessCounters:region:mipLevel:slice:]
-[MTLSerializerComputeCommandEncoder executeCommandsInBuffer:indirectBuffer:indirectBufferOffset:]
-[MTLSerializerComputeCommandEncoder executeCommandsInBuffer:withRange:]
dispatchType
-[MTLSerializerRenderCommandEncoder setPrimitiveRestartEnabled:]
setPrimitiveRestartEnabled is not supported in the simulator
tileWidth
tileHeight
TQ,R,VtileWidth
TQ,R,VtileHeight
status
error
commandBufferRef
startTime
endTime
notificationRef
command buffers
Feb  9 2020
05:42:58
simulatorDummyPlugin
-[MTLSimDevice sparseTileSizeWithTextureType:pixelFormat:sampleCount:]
not supported in the simulator
length
options
bufferIndex
sharedMem
bufferRef
-[MTLSimDevice newHeapWithDescriptor:]
MTLStorageModePrivate is required for heaps
-[MTLSimDevice newIndirectCommandBufferWithDescriptor:maxCommandCount:options:]
-[MTLSimDevice newTextureWithDescriptor:]
texture rotation is not supported in the simulator
-[MTLSimDevice newTextureWithDescriptor:iosurface:plane:]
iosurface
-[MTLSimDevice wrapRenderState:descriptor:]
functionIR
-[MTLSimDevice wrapComputeState:descriptor:]
-[MTLSimDevice newIndirectCommandBufferWithDescriptor:maxCount:options:]
-[MTLSimDevice newIndirectComputeCommandEncoderWithBuffer:]
-[MTLSimDevice newIndirectRenderCommandEncoderWithBuffer:]
-[MTLSimDevice newTiledTextureWithBytesNoCopy:length:deallocator:descriptor:offset:bytesPerRow:]
-[MTLSimDevice newTiledTextureWithBytesNoCopy:length:descriptor:offset:bytesPerRow:]
simulator
Apple
-[MTLSimDevice newCommandQueueWithDescriptor:]
Descriptor cannot be nil
maxCommandBufferCount
commandQueueRef
-[MTLSimDevice newBufferWithIOSurface:]
-[MTLSimDevice minimumLinearTextureAlignmentForPixelFormat:]
%s is not supported on this device.
Linear textures do not support compressed pixel formats
Linear textures do not support depth/stencil pixel formats
-[MTLSimDevice minimumTextureBufferAlignmentForPixelFormat:]
-[MTLSimDevice newRenderPipelineStateWithTileDescriptor:options:completionHandler:]
-[MTLSimDevice newRenderPipelineStateWithTileDescriptor:options:reflection:error:]
name
T@"NSString",R
registryID
maxThreadsPerThreadgroup
T{?=QQQ},R
lowPower
TB,R,GisLowPower
headless
TB,R,GisHeadless
removable
TB,R,GisRemovable
hasUnifiedMemory
TB,R
recommendedMaxWorkingSetSize
depth24Stencil8PixelFormatSupported
TB,R,GisDepth24Stencil8PixelFormatSupported
readWriteTextureSupport
argumentBuffersSupport
rasterOrderGroupsSupported
TB,R,GareRasterOrderGroupsSupported
currentAllocatedSize
maxThreadgroupMemoryLength
maxArgumentBufferSamplerCount
programmableSamplePositionsSupported
TB,R,GareProgrammableSamplePositionsSupported
sparseTileSizeInBytes
maxBufferLength
supportsQuadReduction
TB,R,N
supportsBufferlessClientStorageTexture
supportsArgumentBuffersTier2
supportsReadWriteTextureArgumentsTier2
supportsProgrammableSamplePositions
supportsBCTextureCompression
supports3DBCTextures
supportsLargeFramebufferConfigs
supportsCustomBorderColor
supportsSamplerAddressModeClampToHalfBorder
supports32bpcMSAATextures
supportsVertexAmplification
supportsPlacementHeaps
supportsOpenCLTextureWriteSwizzles
supportsLimitedYUVFormats
supportsNonPrivateDepthStencilTextures
supportsNonPrivateMSAATextures
supportsLinearTextureFromSharedBuffer
supportsPipelineLibraries
supportsFragmentOnlyEncoders
supportsBufferWithIOSurface
supportsProgrammableBlending
supportsRenderToLinearTextures
supportsMemorylessRenderTargets
supportsFastMathInfNaNPropagation
supportsInvariantVertexPosition
supportsShaderLODAverage
supportsRelaxedTextureViewRequirements
supportsSeparateDepthStencil
supportsGPUStatistics
supportsASTCTextureCompression
supportsExtendedYUVFormats
supportsPublicXR10Formats
supportsSRGBwrites
supportsDepthClipMode
supportsPacked32TextureBufferWrites
supports3DASTCTextures
supportsExtendedXR10Formats
supportsFragmentBufferWrites
supportsCountingOcclusionQuery
supportsBaseVertexInstanceDrawing
supportsIndirectDrawAndDispatch
supportsTessellation
supportsReadWriteBufferArguments
supportsArrayOfTextures
supportsArrayOfSamplers
supportsCombinedMSAAStoreAndResolveAction
supportsMutableTier1ArgumentBuffers
supportsSamplerCompareFunction
supportsMSAADepthResolve
supportsMSAAStencilResolve
supportsMSAADepthResolveFilter
supportsGFXIndirectCommandBuffers
supportsCMPIndirectCommandBuffers
supportsIndirectStageInRegion
supportsIndirectTextures
supportsNorm16BCubicFiltering
supportsTextureOutOfBoundsReads
supportsTextureSwizzle
supportsAlphaYUVFormats
supportsMemoryOrderAtomics
supportsQuadGroup
supportsRenderTextureWrites
supportsImageBlocks
supportsTileShaders
supportsImageBlockSampleCoverageControl
supportsNativeHardwareFP16
supportsPostDepthCoverage
supportsMipLevelsSmallerThanBlockSize
supportsNonUniformThreadgroupSize
supportsReadWriteTextureArguments
supportsReadWriteTextureCubeArguments
supportsTextureCubeArray
supportsQuadShufflesAndBroadcast
supportsConcurrentComputeDispatch
supportsRenderPassWithoutRenderTarget
supportsRasterOrderGroups
supportsLinearTexture2DArray
supportsNonSquareTileShaders
supportsSeparateVisibilityAndShadingRate
supports2DLinearTexArraySPI
supportsLayeredRendering
supportsViewportAndScissorArray
supportsIndirectTessellation
supportsMSAAStencilResolveFilter
supportsStencilFeedback
supportsFP32TessFactors
supportsSIMDGroup
supportsShaderMinLODClamp
supportsSIMDShufflesAndBroadcast
supportsVariableRateRasterization
supportsYCBCRFormats
supportsYCBCRFormatsPQ
supportsYCBCRFormats12
supportsYCBCRFormatsXR
supportsASTCHDRTextureCompression
supportsSparseTextures
supportsBlackOrWhiteSamplerBorderColors
supportsMirrorClampToEdgeSamplerMode
supportsSIMDReduction
supportsDepthClipModeClampExtended
supportsTexture2DMultisampleArray
supportsForceSeamsOnCubemaps
supportsFloat16BCubicFiltering
gpuAssertionsEnabled
TB,GareGPUAssertionsEnabled,SsetGPUAssertionsEnabled:
shaderDebugInfoCaching
targetDeviceInfo
Tr^{MTLTargetDeviceArch=II*},R
halfFPConfig
singleFPConfig
doubleFPConfig
metalAssertionsEnabled
TB,N
featureProfile
limits
Tr^{?=IIIIIIIIIIIIIIIIIIffIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIQ},R
maxColorAttachments
maxVertexAttributes
maxVertexBuffers
maxVertexTextures
maxVertexSamplers
maxVertexInlineDataSize
maxInterpolants
maxFragmentBuffers
maxFragmentTextures
maxFragmentSamplers
maxFragmentInlineDataSize
maxComputeBuffers
maxComputeTextures
maxComputeSamplers
maxComputeInlineDataSize
maxComputeLocalMemorySizes
maxTotalComputeThreadsPerThreadgroup
maxComputeThreadgroupMemory
maxLineWidth
Tf,R
maxPointSize
maxVisibilityQueryOffset
minConstantBufferAlignmentBytes
minBufferNoCopyAlignmentBytes
maxTextureWidth1D
maxTextureWidth2D
maxTextureHeight2D
maxTextureWidth3D
maxTextureHeight3D
maxTextureDepth3D
maxTextureDimensionCube
maxTextureLayers
linearTextureAlignmentBytes
iosurfaceTextureAlignmentBytes
iosurfaceReadOnlyTextureAlignmentBytes
deviceLinearTextureAlignmentBytes
deviceLinearReadOnlyTextureAlignmentBytes
maxFunctionConstantIndices
maxComputeThreadgroupMemoryAlignmentBytes
maxInterpolatedComponents
maxTessellationFactor
maxIndirectBuffers
maxIndirectTextures
maxIndirectSamplers
maxIndirectSamplersPerDevice
maxViewportCount
maxCustomSamplePositions
maxVertexAmplificationFactor
maxVertexAmplificationCount
maxTextureBufferWidth
maxComputeAttributes
maxFramebufferStorageBits
linearTextureArrayAlignmentBytes
linearTextureArrayAlignmentSlice
maxTileBuffers
maxTileTextures
maxTileSamplers
maxTileInlineDataSize
minTilePixels
supportPriorityBand
sharedMemorySize
dedicatedMemorySize
indirectArgumentBufferCapabilities
T{IndirectArgumentBufferCapabilities=b1b1b1b29},R
quadDataSharingSupported
TB,R,GisQuadDataSharingSupported
sparseTexturesSupport
resourceIndirectionEnabled
TB,N,GisResourceIndirectionEnabled
utilityBufferRequired
TB,R,GisUtilityBufferRequired
utilityBuffers
T@"NSArray",&,N
currentUtilityBufferIndex
maxRasterizationRateLayerCount
placementHeapSupported
TB,R,GisPlacementHeapSupported
mainConnection
T@"NSObject<OS_xpc_object>",R
resourceConnection
compilerConnection
serializer
T@"MTLSerializer",R,V_serializer
resourceListPool
T@"MTLResourceListPool",R,V_resourceListPool
TQ,R,VregistryID
TB,R,GisLowPower,VlowPower
TB,R,GisHeadless,Vheadless
TB,R,GisRemovable,Vremovable
TB,R,VhasUnifiedMemory
TQ,R,VrecommendedMaxWorkingSetSize
TB,R,GisDepth24Stencil8PixelFormatSupported,Vdepth24Stencil8PixelFormatSupported
TQ,R,VcurrentAllocatedSize
TB,R,GareProgrammableSamplePositionsSupported,VprogrammableSamplePositionsSupported
TQ,R,VhalfFPConfig
TQ,R,VsingleFPConfig
TQ,R,VdoubleFPConfig
TB,N,VmetalAssertionsEnabled
TB,R,VsupportPriorityBand
TQ,R,VsharedMemorySize
TQ,R,VdedicatedMemorySize
fatalError
XPCReplyCheck
connection Queue
connectionType
processRef
version
UNKNOWN XPC_TYPE_ERROR
XPC_ERROR_TERMINATION_IMMINENT
XPC_ERROR_CONNECTION_INVALID
XPC_ERROR_CONNECTION_INTERRUPTED
functionNames
T@"NSArray",R
T@"NSString",C,Vlabel
T@"<MTLDevice>",R,V_device
T@"NSArray",R,VfunctionNames
function variant
functionType
patchType
patchControlPointCount
Tq,R
vertexAttributes
stageInputAttributes
functionConstantsDictionary
T@"NSDictionary",R
functionRef
TI,R
TQ,R,V_functionType
TQ,R,VpatchType
Tq,R,VpatchControlPointCount
T@"NSArray",R,VvertexAttributes
T@"NSArray",R,VstageInputAttributes
T@"NSString",R,Vname
T@"NSDictionary",R,VfunctionConstantsDictionary
function
T@"MTLSimFunction",R
separateCommits
TB,VseparateCommits
-[MTLSimBuffer initWithDevice:bufferRef:content:pointer:length:options:heap:deallocator:]
storageModePrivate incompatible with ...WithBytes variant of newBuffer
Invalid cacheMode %u
Invalid storageMode %u
%@%@
label =
<none>
length =
cpuCacheMode =
storageMode =
hazardTrackingMode =
resourceOptions =
purgeableState =
-[MTLSimBuffer newTextureWithDescriptor:offset:bytesPerRow:]
Linear texture can only be created on buffers with MTLStorageModePrivate in the simulator
-[MTLSimBuffer newLinearTextureWithDescriptor:offset:bytesPerRow:bytesPerImage:]
newLinearTextureWithDescriptor is not supported in the simulator
resourceRef
cpuCacheMode
storageMode
hazardTrackingMode
resourceOptions
heap
T@"<MTLHeap>",R
heapOffset
allocatedSize
T^{__IOSurface=},R
resourceIndex
TQ,N
gpuAddress
TQ,R,N
TQ,R,D
T^{__IOSurface=},R,V_iosurface
TQ,R,N,V_gpuAddress
size
usedSize
type
heapRef
-[MTLSimCommandBuffer resourceStateCommandEncoder]
-[MTLSimCommandBuffer setProtectionOptions:]
setProtectionOptions: with uncommitted encoder
commandQueue
T@"<MTLCommandQueue>",R
retainedReferences
kernelStartTime
Td,R
kernelEndTime
GPUStartTime
GPUEndTime
T@"NSError",R
listIndex
TQ,N,GgetListIndex
profilingEnabled
TB,GisProfilingEnabled
profilingResults
userDictionary
T@"NSMutableDictionary",R,N
globalTraceObjectID
splitHandler
T@?,C
T@"<MTLDevice>",R,Vdevice
T@?,C,VsplitHandler
segments
backgroundTrackingPID
qosLevel
commitQueue
T@"NSObject<OS_dispatch_queue>",R
commitSynchronously
completionQueue
disableCrossQueueHazardTracking
skipRender
executionEnabled
isOpenGLQueue
StatEnabled
TB,N,GisStatEnabled
StatOptions
TQ,N,GgetStatOptions
StatLocations
TQ,N,GgetStatLocations
bufferStorageByteCount
TQ,R,VbufferStorageByteCount
maxTotalThreadsPerThreadgroup
threadExecutionWidth
staticThreadgroupMemoryLength
supportIndirectCommandBuffers
TQ,N,VmaxTotalThreadsPerThreadgroup
TQ,N,VthreadExecutionWidth
TQ,N,VstaticThreadgroupMemoryLength
TB,N,VsupportIndirectCommandBuffers
readsDepth
writesDepth
readsStencil
writesStencil
threadgroupSizeMatchesTileSize
imageblockSampleLength
uniqueIdentifier
vertexDebugInstrumentationData
T@"MTLDebugInstrumentationData",R,&,N
fragmentDebugInstrumentationData
TQ,R,V_uniqueIdentifier
responsibleProcess
sharedAllocationInfo
T@"MTLResourceAllocationInfo",R
cachedAllocationInfo
allocationID
protectionOptions
unfilteredResourceOptions
T@"NSString",C,D
T@"<MTLDevice>",R,D
TQ,R,V_cpuCacheMode
TQ,R,V_storageMode
T@"<MTLHeap>",R,D
TQ,R,VallocatedSize
Ti,VresponsibleProcess
T@"MTLResourceAllocationInfo",R,VsharedAllocationInfo
T@"MTLResourceAllocationInfo",R,VcachedAllocationInfo
TQ,R,VprotectionOptions
TI,R,V_resourceRef
-[MTLSimTexture initWithTextureInternal:pixelFormat:decompressedPixelFormat:textureType:levels:slices:swizzle:compressedView:textureRef:isInternalTextureView:]
Device does not support texture swizzle.
textureType =
pixelFormat =
decompressedPixelFormat =
width =
height =
depth =
arrayLength =
mipmapLevelCount =
sampleCount =
usage =
framebufferOnly =
swizzle =
parentTexture =
<null>
parentRelativeLevel =
parentRelativeSlice =
buffer =
bufferOffset =
bufferBytesPerRow =
allowGPUOptimizedContents =
-[MTLSimTexture newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:]
textureRef
pixelFormat
decompressedPixelFormat
backingBuffer
T@"<MTLBuffer>",R
decompressedTextureView
T@"<MTLTexture>",R
rootResource
T@"<MTLResource>",R
parentTexture
parentRelativeLevel
parentRelativeSlice
buffer
bufferOffset
bufferBytesPerRow
iosurfacePlane
textureType
width
height
depth
mipmapLevelCount
sampleCount
arrayLength
usage
framebufferOnly
TB,R,GisFramebufferOnly
firstMipmapInTail
tailSizeInBytes
isSparse
allowGPUOptimizedContents
swizzle
T{?=CCCC},R,N
rotation
isCompressed
compressionFeedback
swizzleKey
numFaces
isDrawable
sparseSurfaceDefaultValue
T@"<MTLResource>",R,VrootResource
T@"<MTLTexture>",R,D
TQ,R,V_parentRelativeLevel
TQ,R,VparentRelativeSlice
T@"<MTLBuffer>",R,D
TQ,R,ViosurfacePlane
TQ,R,V_usage
TB,R,GisFramebufferOnly,V_framebufferOnly
TQ,R,V_firstMipmapInTail
TQ,R,V_tailSizeInBytes
TB,R,V_allowGPUOptimizedContents
T{?=CCCC},R,D,N
TQ,R,Vrotation
TB,R,VisCompressed
Tq,R,D
TI,R,V_swizzle
TB,R,V_isDrawable
event notification reference not found
Compiler failed to build request
Compiler failed with XPC_ERROR_CONNECTION_INTERRUPTED
Compiler failed with XPC_ERROR_CONNECTION_INVALID
Compiler failed with XPC_ERROR_TERMINATION_IMMINENT
Compiler failed with unknown XPC error
Decompression failure: unable to allocate decoder from at_encoder_create()
Decompression failure: error %ld returned from at_encoder_decompress_texels()
MTLSimIndirectArgumentBufferLayout
MTLSimArgumentEncoder
MTLArgumentEncoder
NSObject
MTLSimOperation
MTLSerializerAllocator
MTLSerializer
MTLSimSharedEvent
MTLSimEvent
MTLEvent
MTLSerializerEvent
MTLSerializerState
MTLSharedEvent
MTLSerializerBlitCommandEncoder
MTLBlitCommandEncoderSPI
MTLBlitCommandEncoder
MTLCommandEncoder
MTLSerializerCommandEncoder
MTLSerializerComputeCommandEncoder
MTLComputeCommandEncoderSPI
MTLComputeCommandEncoder
MTLSerializerRenderCommandEncoder
MTLRenderCommandEncoderSPI
MTLRenderCommandEncoder
MTLSimDevice
MTLDeviceSPI
MTLDevice
MTLSimLibrary
MTLLibrary
MTLSimFunction
MTLFunction
MTLSimFunctionVariant
MTLSimFence
MTLFence
MTLSerializerFence
MTLSerializerParallelRenderCommandEncoder
MTLParallelRenderCommandEncoderSPI
MTLParallelRenderCommandEncoder
MTLSimBuffer
MTLSerializerBuffer
MTLSerializerResource
MTLBufferSPI
MTLBuffer
MTLResource
MTLSimBufferStoragePool
MTLSimHeap
MTLHeap
MTLSerializerHeap
MTLSimCommandBuffer
MTLCommandBufferSPI
MTLCommandBuffer
MTLSerializerCommandStream
MTLSimCommandQueue
MTLCommandQueueSPI
MTLCommandQueue
MTLSimCommandStoragePool
MTLSimComputePipelineState
MTLComputePipelineState
MTLSerializerComputePipelineState
MTLSimDepthStencilState
MTLDepthStencilStateSPI
MTLDepthStencilState
MTLSerializerDepthStencilState
MTLSimRenderPipelineState
MTLRenderPipelineStateSPI
MTLRenderPipelineState
MTLSerializerRenderPipelineState
MTLSimResource
MTLResourceSPI
MTLSimSamplerState
MTLSamplerStateSPI
MTLSamplerState
MTLSerializerSamplerState
MTLSimTexture
MTLSerializerTexture
MTLTexture
MTLTextureImplementation
MTLTextureSPI
init
serializer
deleteArgumentBufferLayoutRef:allocator:
dealloc
argumentBufferLayoutConstantAtIndex:layoutRef:allocator:
resourceConnection
data
initWithDevice:reference:data:
bufferLayoutMatchesFrontEndLayout
encodedLength
alignment
constantOffsetAtIndex:
argumentBufferLayoutRef
_reference
_device
_bufferLayoutMatchesFrontEndLayout
_encodedLength
_alignment
deleteArgumentEncoderRef:allocator:
argumentEncoderSetArgumentBuffer:offset:encoderRef:allocator:
setBuffers:offsets:withRange:
argumentEncoderSetBuffers:offsets:withRange:encoderRef:allocator:
setTextures:withRange:
argumentEncoderSetTextures:withRange:encoderRef:allocator:
setSamplerStates:withRange:
argumentEncoderSetSamplerStates:withRange:encoderRef:allocator:
bufferRef
argumentEncoderConstantAtIndex:encoderRef:bufferRef:allocator:
contents
doesNotRecognizeSelector:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
setArgumentBuffer:offset:
setArgumentBuffer:startOffset:arrayElement:
setBuffer:offset:atIndex:
setTexture:atIndex:
setSamplerState:atIndex:
constantDataAtIndex:
setRenderPipelineState:atIndex:
setRenderPipelineStates:withRange:
setComputePipelineState:atIndex:
setComputePipelineStates:withRange:
setIndirectCommandBuffer:atIndex:
setIndirectCommandBuffers:withRange:
newArgumentEncoderForBufferAtIndex:
device
label
setLabel:
initWithDevice:reference:layout:data:
argumentEncoderRef
_layout
_argumentBuffer
_offset
allocateOperationBytes:
_data
initWithDevice:deserializerGeneratesResourceRefs:
newTextureRef
newSamplerStateRef
newDepthStencilStateRef
pixelFormat
resourceRef
decompressedPixelFormat
decompressPlaceholder:expandedTex:srcFormat:destFormat:width:height:destRowBytes:srcRowBytes:
textureRef
heapRef
newBufferRef
newFenceRef
newEventRef
serializeStructType:version:
newArgumentBufferLayoutRef
newArgumentEncoderRef
samplerRef
pipelineRef
newNotificationRef
newFunctionRef
libraryRef
length
UTF8String
newRenderPipelineStateRef
newComputePipelineStateRef
newHeapRef
descriptorPrivate
stringWithUTF8String:
handleNewObjectReplyData:replyDataSize:errorMessage:
initWithDevice:
releaseBufferRef:
deleteBufferRef:allocator:
releaseTextureRef:
deleteTextureRef:allocator:
releaseDepthStencilStateRef:
deleteDepthStencilStateRef:allocator:
releaseSamplerStateRef:
deleteSamplerStateRef:allocator:
newLibraryRef
releaseLibraryRef:
deleteLibraryRef:allocator:
releaseFunctionRef:
deleteFunctionRef:allocator:
releaseComputePipelineStateRef:
deleteComputePipelineStateRef:allocator:
releaseRenderPipelineStateRef:
deleteRenderPipelineStateRef:allocator:
releaseFenceRef:
deleteFenceRef:allocator:
releaseArgumentBufferLayoutRef:
releaseArgumentEncoderRef:
releaseHeapRef:
deleteHeapRef:allocator:
releaseEventRef:
deleteEventRef:allocator:
newCommandQueueRef
releaseCommandQueueRef:
deleteCommandQueueRef:allocator:
newCommandBufferRef
releaseCommandBufferRef:
releaseNotificationRef:
newTextureWithDescriptor:
newSamplerStateWithDescriptor:
newDepthStencilStateWithDescriptor:
copyImageBytesFromSource:toDestination:dataSize:region:bytesPerRow:bytesPerImage:mipmapLevel:slice:texture:
getBytesFromRegion:bytesPerRow:bytesPerImage:mipmapLevel:slice:texture:outDataSize:
replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:texture:allocator:
newTextureViewWithPixelFormat:baseTexture:allocator:
newTextureWithDescriptor:heap:offset:useOffset:allocator:
newBufferWithLength:options:heap:offset:useOffset:allocator:
newTextureViewWithPixelFormat:textureType:levels:slices:baseTexture:allocator:
newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:baseTexture:allocator:
newFenceWithAllocator:
newSharedEventWithAllocator:
newArgumentBufferLayoutWithStructType:allocator:
newArgumentEncoderWithLayout:allocator:
sizeInfoForHeap:allocator:
minimumLinearTextureAlignmentForPixelFormat:allocator:
minimumTextureBufferAlignmentForPixelFormat:allocator:
getComputeInfoWithAllocator:
maxAvailableSizeWithAlignment:heap:allocator:
bufferGPUAddress:allocator:
uniqueIdentifierForTexture:allocator:
uniqueIdentifierForSamplerState:allocator:
uniqueIdentifierForRenderPipelineState:allocator:
uniqueIdentifierForComputePipelineState:allocator:
notifyListenerForEventRef:atValue:allocator:
setSignaledValue:eventRef:allocator:
heapTextureSizeAndAlignWithDescriptor:allocator:
heapBufferSizeAndAlignWithLength:options:allocator:
makeAliasableResource:allocator:
doesAliasResources:count:all:resource:allocator:
newTextureWithBuffer:descriptor:offset:bytesPerRow:allocator:
newTiledTextureWithBuffer:descriptor:offset:bytesPerRow:allocator:
newFunctionWithLibrary:functionName:allocator:
newFunctionWithIR:
newRenderPipelineStateWithSerializedDescriptor:allocator:
newComputePipelineStateWithSerializedDescriptor:allocator:
newIOSurfaceTextureWithDescriptor:plane:allocator:
newTextureWithDescriptor:allocator:
newDepthStencilStateWithDescriptor:allocator:
newSamplerStateWithDescriptor:allocator:
newHeapWithDescriptor:allocator:
handleNewObjectReplyData:replyDataSize:
computePipelineWithReplyData:replyDataSize:pipelineInfo:errorMessage:
payloadFromReplyData:replyDataSize:
deserializerGeneratesResourceRefs
reflectionSerializationVersion
setReflectionSerializationVersion:
_serialQueue
_resourceIndex
_depthStencilIndex
_samplerIndex
_libraryIndex
_functionIndex
_computePipelineIndex
_renderPipelineIndex
_fences
_argumentBufferLayoutIndex
_argumentEncoderIndex
_heapIndex
_eventIndex
_commandQueueIndex
_commandBufferIndex
_eventNotifications
_deserializerGeneratesResourceRefs
_reflectionSerializationVersion
calculateOffsetToRegion:level:slice:
width
height
depth
depthStencilPrivate
stencilPrivate
registerEventNotification:listener:event:value:block:
mainConnection
eventRef
notifyListener:atValue:block:
newSharedEventHandle
signaledValue
setSignaledValue:
initWithDevice:reference:
_signaledValue
initWithCommandBuffer:
writeSegmentHeader:continuation:
copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:
backingBuffer
copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:
endEncoding
commandBuffer
computeCommandEncoder
bundleWithIdentifier:
newDefaultLibraryWithBundle:error:
newFunctionWithName:constantValues:error:
newComputePipelineStateWithFunction:error:
setComputePipelineState:
newBufferWithLength:options:
decompressedTextureView
textureType
newTextureViewWithPixelFormat:textureType:levels:slices:
threadExecutionWidth
maxTotalThreadsPerThreadgroup
addResourceReference:isWrite:
setBytes:length:atIndex:
dispatchThreads:threadsPerThreadgroup:
hazardTrackingMode
newEvent
encodeSignalEvent:value:
encodeWaitForEvent:value:
addCompletedHandler:
getCommandBytes:forCommand:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:
indirectCommandBufferRef
optimize:withCommand:
optimize:slice:level:withCommand:
optimizeReset:withRange:withCommand:
addStateReference:
fenceRef
mipmapLevelCount
arrayLength
copyFromTexture:sourceSlice:sourceLevel:toTexture:destinationSlice:destinationLevel:sliceCount:levelCount:
insertDebugSignpost:
pushDebugGroup:
popDebugGroup
synchronizeResource:
synchronizeTexture:slice:level:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:
copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:
generateMipmapsForTexture:
fillBuffer:range:value:
copyFromTexture:toTexture:
updateFence:
waitForFence:
getTextureAccessCounters:region:mipLevel:slice:resetCounters:countersBuffer:countersBufferOffset:
resetTextureAccessCounters:region:mipLevel:slice:
optimizeContentsForGPUAccess:
optimizeContentsForGPUAccess:slice:level:
optimizeContentsForCPUAccess:
optimizeContentsForCPUAccess:slice:level:
resetCommandsInBuffer:withRange:
copyIndirectCommandBuffer:sourceRange:destination:destinationIndex:
optimizeIndirectCommandBuffer:withRange:
copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:
beginSegment:
getType
getBufferBytes:alignment:buffer:offset:
setBuffers:offsets:withRange:withCommand:array:rangeMax:
useHeaps:count:
useResources:count:usage:
setSplitHandler:
getCommandBufferBytes:
beginContinuation
setBytes:length:atIndex:withCommand:array:rangeMax:
setSamplerStates:withRange:withCommand:array:rangeMax:
setSamplerStates:lodMinClamps:lodMaxClamps:withRange:withCommand:array:rangeMax:
setTextures:withRange:withCommand:array:rangeMax:
useHeap:
useResource:usage:
getCommandBytesRetry:forCommand:
stream
split
handleSplits
memoryBarrierNotificationWithResources:count:
memoryBarrierNotificationWithScope:
setBufferOffset:atIndex:
setSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setThreadgroupMemoryLength:atIndex:
setImageblockWidth:height:
setStageInRegion:
setStageInRegionWithIndirectBuffer:indirectBufferOffset:
dispatchThreadgroups:threadsPerThreadgroup:
dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:
executeCommandsInBuffer:withRange:
executeCommandsInBuffer:indirectBuffer:indirectBufferOffset:
memoryBarrierWithScope:
memoryBarrierWithResources:count:
dispatchType
newKernelDebugInfo
dispatchThreadsWithIndirectBuffer:indirectBufferOffset:
initWithCommandBuffer:dispatchType:
hadSplit
buffers
textures
samplers
pipelineState
countByEnumeratingWithState:objects:count:
copy
writeDescriptor
addRenderTargetReferences
depthAttachment
texture
resolveTexture
level
slice
depthPlane
resolveLevel
resolveSlice
resolveDepthPlane
loadAction
storeAction
storeActionOptions
clearDepth
depthResolveFilter
stencilAttachment
clearStencil
stencilResolveFilter
colorAttachments
objectAtIndexedSubscript:
clearColor
visibilityResultBuffer
renderTargetArrayLength
renderTargetWidth
renderTargetHeight
depthStencilRef
setStencilFrontReferenceValue:backReferenceValue:
setFragmentTexture:atIndex:
setFragmentSamplerState:atIndex:
useHeaps:count:stages:
useResources:count:usage:stages:
forceStoreActionsForPosition:
forceLoadActions
setRenderPipelineState:
setVertexBytes:length:atIndex:
setVertexBuffer:offset:atIndex:
setVertexBufferOffset:atIndex:
setVertexBuffers:offsets:withRange:
setVertexTexture:atIndex:
setVertexTextures:withRange:
setVertexSamplerState:atIndex:
setVertexSamplerStates:withRange:
setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setViewport:
setViewports:count:
setFrontFacingWinding:
setVertexAmplificationCount:viewMappings:
setCullMode:
setDepthClipMode:
setDepthBias:slopeScale:clamp:
setScissorRect:
setScissorRects:count:
setTriangleFillMode:
setFragmentBytes:length:atIndex:
setFragmentBuffer:offset:atIndex:
setFragmentBufferOffset:atIndex:
setFragmentBuffers:offsets:withRange:
setFragmentTextures:withRange:
setFragmentSamplerStates:withRange:
setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:
setBlendColorRed:green:blue:alpha:
setDepthStencilState:
setStencilReferenceValue:
setVisibilityResultMode:offset:
setColorStoreAction:atIndex:
setDepthStoreAction:
setStencilStoreAction:
setColorStoreActionOptions:atIndex:
setDepthStoreActionOptions:
setStencilStoreActionOptions:
drawPrimitives:vertexStart:vertexCount:instanceCount:
drawPrimitives:vertexStart:vertexCount:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:
drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:
drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:
drawPrimitives:indirectBuffer:indirectBufferOffset:
drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:
textureBarrier
updateFence:afterStages:
waitForFence:beforeStages:
setTessellationFactorBuffer:offset:instanceStride:
setTessellationFactorScale:
drawPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:instanceCount:baseInstance:
drawPatches:patchIndexBuffer:patchIndexBufferOffset:indirectBuffer:indirectBufferOffset:
drawIndexedPatches:patchStart:patchCount:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:instanceCount:baseInstance:
drawIndexedPatches:patchIndexBuffer:patchIndexBufferOffset:controlPointIndexBuffer:controlPointIndexBufferOffset:indirectBuffer:indirectBufferOffset:
setTileBytes:length:atIndex:
setTileBuffer:offset:atIndex:
setTileBufferOffset:atIndex:
setTileBuffers:offsets:withRange:
setTileTexture:atIndex:
setTileTextures:withRange:
setTileSamplerState:atIndex:
setTileSamplerStates:withRange:
setTileSamplerState:lodMinClamp:lodMaxClamp:atIndex:
setTileSamplerStates:lodMinClamps:lodMaxClamps:withRange:
dispatchThreadsPerTile:
setThreadgroupMemoryLength:offset:atIndex:
useResource:usage:stages:
useHeap:stages:
memoryBarrierWithScope:afterStages:beforeStages:
memoryBarrierWithResources:count:afterStages:beforeStages:
tileWidth
tileHeight
setDepthClipModeSPI:
setLineWidth:
addSplitHandler:
isMemorylessRender
setFragmentTexture:atTextureIndex:samplerState:atSamplerIndex:
setVertexAmplificationMode:value:
setCommandDataCorruptModeSPI:
setAlphaTestReferenceValue:
setPointSize:
setClipPlane:p2:p3:p4:atIndex:
setVertexSamplerState:lodMinClamp:lodMaxClamp:lodBias:atIndex:
setFragmentSamplerState:lodMinClamp:lodMaxClamp:lodBias:atIndex:
setViewportTransformEnabled:
setProvokingVertexMode:
setPrimitiveRestartEnabled:
setPrimitiveRestartEnabled:index:
setTriangleFrontFillMode:backFillMode:
setTransformFeedbackState:
setDepthCleared
setStencilCleared
setColorResolveTexture:slice:depthPlane:level:atIndex:
setColorResolveTexture:slice:depthPlane:level:yInvert:atIndex:
setDepthResolveTexture:slice:depthPlane:level:
setDepthResolveTexture:slice:depthPlane:level:yInvert:
setStencilResolveTexture:slice:depthPlane:level:
setStencilResolveTexture:slice:depthPlane:level:yInvert:
initWithCommandBuffer:descriptor:
fixStoreActions:
setEncoderPosition:
renderPassCommand
splitHandlers
renderPassDescriptor
depthStencilState
fragmentBuffers
fragmentTextures
fragmentSamplers
vertexBuffers
vertexTextures
vertexSamplers
tessellationFactorBuffer
initWithDomain:code:userInfo:
commandBufferForReference:
didScheduleWithStartTime:endTime:error:
commandQueue
commandBufferDidComplete:startTime:completionTime:error:
dispatchNotificationWithReference:
getNewResourceID
initWithResourceListCapacity:
_deviceWrapper
initWithTargetData:cacheUUID:pluginPath:device:compilerFlags:
validateWithDevice:
getDecompressedFormat:
setPixelFormat:
usage
setUsage:
initWithDevice:bufferRef:content:pointer:length:options:heap:deallocator:
newBufferWithLength:options:pointer:copyBytes:deallocator:
initWithDescriptor:reference:device:
initWithDevice:fenceRef:
storageMode
initWithDescriptor:device:heapRef:
dispatchQueue
setStorageMode:
rotation
initWithDescriptor:decompressedPixelFormat:iosurface:plane:textureRef:heap:device:
initWithUTF8String:
initWithDevice:functionType:functionRef:
initWithFunction:compilerOutput:
newFunctionVariantWithCompilerOutput:functionType:
vertexFunction
function
setVertexFunction:
fragmentFunction
setFragmentFunction:
serializeRenderPipelineDescriptor:
compilerConnection
initWithDevice:pipelineRef:descriptor:
numberWithInt:
dictionaryWithObjects:forKeys:count:
setObject:forKeyedSubscript:
computeFunction
setComputeFunction:
serializeComputePipelineDescriptor:
maxTotalComputeThreadsPerThreadgroup
setMaxTotalThreadsPerThreadgroup:
setStaticThreadgroupMemoryLength:
setThreadExecutionWidth:
setSupportIndirectCommandBuffers:
maxCommandBufferCount
initWithDevice:commandQueueRef:descriptor:
preprocessorMacros
count
objectForKey:
stringValue
fastMathEnabled
languageVersion
debuggingEnabled
newSharedEvent
registerDevices
newCommandQueue
newCommandQueueWithMaxCommandBufferCount:
heapTextureSizeAndAlignWithDescriptor:
heapBufferSizeAndAlignWithLength:options:
newHeapWithDescriptor:
newBufferWithBytes:length:options:
newBufferWithBytesNoCopy:length:options:deallocator:
newTextureWithDescriptor:iosurface:plane:
newDefaultLibrary
newLibraryWithFile:error:
newLibraryWithURL:error:
newLibraryWithData:error:
newLibraryWithSource:options:error:
newLibraryWithSource:options:completionHandler:
newRenderPipelineStateWithDescriptor:error:
newRenderPipelineStateWithDescriptor:options:reflection:error:
newRenderPipelineStateWithDescriptor:completionHandler:
newRenderPipelineStateWithDescriptor:options:completionHandler:
newComputePipelineStateWithFunction:options:reflection:error:
newComputePipelineStateWithFunction:completionHandler:
newComputePipelineStateWithFunction:options:completionHandler:
newComputePipelineStateWithDescriptor:options:reflection:error:
newComputePipelineStateWithDescriptor:options:completionHandler:
newFence
supportsFeatureSet:
supportsFamily:
supportsTextureSampleCount:
minimumLinearTextureAlignmentForPixelFormat:
minimumTextureBufferAlignmentForPixelFormat:
newRenderPipelineStateWithTileDescriptor:options:reflection:error:
newRenderPipelineStateWithTileDescriptor:options:completionHandler:
getDefaultSamplePositions:count:
newArgumentEncoderWithArguments:
supportsRasterizationRateMapWithLayerCount:
newRasterizationRateMapWithDescriptor:
newIndirectCommandBufferWithDescriptor:maxCommandCount:options:
newSharedEventWithHandle:
sparseTileSizeWithTextureType:pixelFormat:sampleCount:
supportsVertexAmplificationCount:
name
registryID
maxThreadsPerThreadgroup
isLowPower
isHeadless
isRemovable
hasUnifiedMemory
recommendedMaxWorkingSetSize
isDepth24Stencil8PixelFormatSupported
readWriteTextureSupport
argumentBuffersSupport
areRasterOrderGroupsSupported
currentAllocatedSize
maxThreadgroupMemoryLength
maxArgumentBufferSamplerCount
areProgrammableSamplePositionsSupported
sparseTileSizeInBytes
maxBufferLength
convertSparsePixelRegions:toTileRegions:withTileSize:alignmentMode:numRegions:
convertSparseTileRegions:toPixelRegions:withTileSize:numRegions:
reportLeaks
allowLibrariesFromOtherPlatforms
vendorName
familyName
productName
compilerPropagatesThreadPriority:
_setDeviceWrapper:
deviceSupportsFeatureSet:
deviceOrFeatureProfileSupportsFeatureSet:
minLinearTextureAlignmentForPixelFormat:
newBufferWithIOSurface:
unloadShaderCaches
libraryCacheStats
pipelineCacheStats
copyShaderCacheToPath:
supportsSampleCount:
newCommandQueueWithDescriptor:
newIndirectArgumentBufferLayoutWithStructType:
newArgumentEncoderWithLayout:
newIndirectCommandBufferWithDescriptor:maxCount:options:
newIndirectRenderCommandEncoderWithBuffer:
newIndirectComputeCommandEncoderWithBuffer:
newSharedEventWithMachPort:
setResourcesPurgeableState:newState:oldState:count:
createNewUtilityBuffer
utilityBufferForComputeCommandEncoder:
utilityBufferForRenderCommandEncoder:
useDeviceResourceTableForType:
newBufferWithLength:options:atResourceIndex:
newBufferWithBytes:length:options:atResourceIndex:
newBufferWithBytesNoCopy:length:options:atResourceIndex:deallocator:
requiresIndirectionForAllResourceTypes
addBufferToGlobalResourceTable:
addTextureToGlobalResourceTable:
addSamplerStateToGlobalResourceTable:
addComputePipelineStateToGlobalResourceTable:
addRenderPipelineStateToGlobalResourceTable:
addIndirectCommandBufferToGlobalResourceTable:
removeResourceFromGlobalResourceTable:resourceType:
indirectBufferAddressForResourceIndex:offset:
resourceIndexFromIndirectBufferAddress:
offsetFromIndirectBufferAddress:
supportsQuadReduction
supportsBufferlessClientStorageTexture
supportsArgumentBuffersTier2
supportsReadWriteTextureArgumentsTier2
supportsProgrammableSamplePositions
supportsBCTextureCompression
supports3DBCTextures
supportsLargeFramebufferConfigs
supportsCustomBorderColor
supportsSamplerAddressModeClampToHalfBorder
supports32bpcMSAATextures
supportsVertexAmplification
supportsPlacementHeaps
supportsOpenCLTextureWriteSwizzles
supportsLimitedYUVFormats
supportsNonPrivateDepthStencilTextures
supportsNonPrivateMSAATextures
supportsLinearTextureFromSharedBuffer
supportsPipelineLibraries
supportsFragmentOnlyEncoders
supportsBufferWithIOSurface
supportsProgrammableBlending
supportsRenderToLinearTextures
supportsMemorylessRenderTargets
supportsFastMathInfNaNPropagation
supportsInvariantVertexPosition
supportsShaderLODAverage
supportsRelaxedTextureViewRequirements
supportsSeparateDepthStencil
supportsGPUStatistics
supportsASTCTextureCompression
supportsExtendedYUVFormats
supportsPublicXR10Formats
supportsSRGBwrites
supportsDepthClipMode
supportsPacked32TextureBufferWrites
supports3DASTCTextures
supportsExtendedXR10Formats
supportsFragmentBufferWrites
supportsCountingOcclusionQuery
supportsBaseVertexInstanceDrawing
supportsIndirectDrawAndDispatch
supportsTessellation
supportsReadWriteBufferArguments
supportsArrayOfTextures
supportsArrayOfSamplers
supportsCombinedMSAAStoreAndResolveAction
supportsMutableTier1ArgumentBuffers
supportsSamplerCompareFunction
supportsMSAADepthResolve
supportsMSAAStencilResolve
supportsMSAADepthResolveFilter
supportsGFXIndirectCommandBuffers
supportsCMPIndirectCommandBuffers
supportsIndirectStageInRegion
supportsIndirectTextures
supportsNorm16BCubicFiltering
supportsTextureOutOfBoundsReads
supportsTextureSwizzle
supportsAlphaYUVFormats
supportsMemoryOrderAtomics
supportsQuadGroup
supportsRenderTextureWrites
supportsImageBlocks
supportsTileShaders
supportsImageBlockSampleCoverageControl
supportsNativeHardwareFP16
supportsPostDepthCoverage
supportsMipLevelsSmallerThanBlockSize
supportsNonUniformThreadgroupSize
supportsReadWriteTextureArguments
supportsReadWriteTextureCubeArguments
supportsTextureCubeArray
supportsQuadShufflesAndBroadcast
supportsConcurrentComputeDispatch
supportsRenderPassWithoutRenderTarget
supportsRasterOrderGroups
supportsLinearTexture2DArray
supportsNonSquareTileShaders
supportsSeparateVisibilityAndShadingRate
supports2DLinearTexArraySPI
supportsLayeredRendering
supportsViewportAndScissorArray
supportsIndirectTessellation
supportsMSAAStencilResolveFilter
supportsStencilFeedback
supportsFP32TessFactors
supportsSIMDGroup
supportsShaderMinLODClamp
supportsSIMDShufflesAndBroadcast
supportsVariableRateRasterization
supportsYCBCRFormats
supportsYCBCRFormatsPQ
supportsYCBCRFormats12
supportsYCBCRFormatsXR
supportsASTCHDRTextureCompression
supportsSparseTextures
supportsBlackOrWhiteSamplerBorderColors
supportsMirrorClampToEdgeSamplerMode
supportsSIMDReduction
supportsDepthClipModeClampExtended
supportsTexture2DMultisampleArray
supportsForceSeamsOnCubemaps
supportsFloat16BCubicFiltering
areGPUAssertionsEnabled
setGPUAssertionsEnabled:
halfFPConfig
singleFPConfig
doubleFPConfig
metalAssertionsEnabled
setMetalAssertionsEnabled:
featureProfile
limits
maxColorAttachments
maxVertexAttributes
maxVertexBuffers
maxVertexTextures
maxVertexSamplers
maxVertexInlineDataSize
maxInterpolants
maxFragmentBuffers
maxFragmentTextures
maxFragmentSamplers
maxFragmentInlineDataSize
maxComputeBuffers
maxComputeTextures
maxComputeSamplers
maxComputeInlineDataSize
maxComputeLocalMemorySizes
maxComputeThreadgroupMemory
maxLineWidth
maxPointSize
maxVisibilityQueryOffset
minConstantBufferAlignmentBytes
minBufferNoCopyAlignmentBytes
maxTextureWidth1D
maxTextureWidth2D
maxTextureHeight2D
maxTextureWidth3D
maxTextureHeight3D
maxTextureDepth3D
maxTextureDimensionCube
maxTextureLayers
linearTextureAlignmentBytes
iosurfaceTextureAlignmentBytes
iosurfaceReadOnlyTextureAlignmentBytes
deviceLinearTextureAlignmentBytes
deviceLinearReadOnlyTextureAlignmentBytes
maxFunctionConstantIndices
maxComputeThreadgroupMemoryAlignmentBytes
maxInterpolatedComponents
maxTessellationFactor
maxIndirectBuffers
maxIndirectTextures
maxIndirectSamplers
maxIndirectSamplersPerDevice
maxViewportCount
maxCustomSamplePositions
maxVertexAmplificationFactor
maxVertexAmplificationCount
maxTextureBufferWidth
maxComputeAttributes
maxFramebufferStorageBits
linearTextureArrayAlignmentBytes
linearTextureArrayAlignmentSlice
maxTileBuffers
maxTileTextures
maxTileSamplers
maxTileInlineDataSize
minTilePixels
supportPriorityBand
sharedMemorySize
dedicatedMemorySize
indirectArgumentBufferCapabilities
isResourceIndirectionEnabled
setResourceIndirectionEnabled:
isUtilityBufferRequired
utilityBuffers
setUtilityBuffers:
currentUtilityBufferIndex
setCurrentUtilityBufferIndex:
maxRasterizationRateLayerCount
isPlacementHeapSupported
supportsPrimitiveType:
indirectArgumentBufferDecodingData
setIndirectArgumentBufferDecodingData:
setupMPSFunctionTable:
resourcePatchingTypeForResourceType:
reserveResourceIndicesForResourceType:indices:indexCount:
mapShaderSampleBufferWithBuffer:capacity:size:
unmapShaderSampleBuffer
newComputePipelineStateWithDescriptor:error:
newComputePipelineStateWithDescriptor:completionHandler:
newRenderPipelineStateWithTileDescriptor:error:
newRenderPipelineStateWithTileDescriptor:completionHandler:
newFunctionWithGLIR:functionType:
newFunctionWithGLIR:inputsDescription:functionType:
getShaderCacheKeys
newIndirectArgumentEncoderWithArguments:
newComputePipelineStateWithImageFilterFunctionsSPI:imageFilterFunctionInfo:error:
newLibraryWithImageFilterFunctionsSPI:imageFilterFunctionInfo:error:
newLibraryWithCIFilters:imageFilterFunctionInfo:error:
newLibraryWithCIFiltersForComputePipeline:imageFilterFunctionInfo:error:
newPipelineLibraryWithFilePath:error:
startCollectingPipelineDescriptors
startCollectingPipelineDescriptorsUsingPrefixForNames:
endCollectingPipelineDescriptors
newRenderPipelineDescriptorWithSerializedData:deserializationContext:
newComputePipelineDescriptorWithSerializedData:deserializationContext:
serializeStructType:
newTextureWithBytesNoCopy:length:descriptor:deallocator:
newTextureLayoutWithDescriptor:isHeapOrBufferBacked:
newIndirectArgumentEncoderWithLayout:
tileSizeWithSparsePageSize:textureType:pixelFormat:sampleCount:
newResourceGroupFromResources:count:
shaderDebugInfoCaching
setShaderDebugInfoCaching:
targetDeviceInfo
isQuadDataSharingSupported
sparseTexturesSupport
compiler
registerCommandBuffer:
registerViewTexture:baseTextureView:
wrapRenderState:descriptor:
fragmentFunctionKeyWithRenderPipelineDescriptor:options:previousStateVariant:fragmentKeySize:
vertexFunctionKeyWithRenderPipelineDescriptor:options:nextStageVariant:vertexKeySize:
freeFragmentFunctionKey:fragmentKeySize:
freeVertexFunctionKey:vertexKeySize:
newFragmentVariantWithCompilerOutput:pipelineStatisticsOutput:
newVertexVariantWithCompilerOutput:pipelineStatisticsOutput:
newRenderPipelineWithDescriptor:vertexVariant:fragmentVariant:errorMessage:
pipelineFlagsWithVertexVariant:fragmentVariant:
pipelinePerformanceStatisticsWithVertexVariant:fragmentVariant:vertexCompileTimeOutput:fragmentCompileTimeOutput:
pipelinePerformanceStatisticsWithComputeVariant:compileTimeOutput:
wrapComputeState:descriptor:
newComputeVariantWithCompilerOutput:pipelineStatisticsOutput:
newComputePipelineWithDescriptor:variant:errorMessage:
newTiledTextureWithBytesNoCopy:length:deallocator:descriptor:offset:bytesPerRow:
newTiledTextureWithBytesNoCopy:length:descriptor:offset:bytesPerRow:
resourceListPool
.cxx_destruct
.cxx_construct
_mainConnection
_resourceConnection
_compilerConnection
_serializer
_processRef
_deserializerVersion
_commandBufferQueue
_commandBuffers
_resourceListPool
_notificationMutex
_notifications
_maxThreadsPerThreadgroup
_maxThreadgroupMemoryLength
headless
lowPower
removable
programmableSamplePositionsSupported
depth24Stencil8PixelFormatSupported
newFunctionWithName:
newFunctionWithName:constantValues:completionHandler:
functionNames
initWithDevice:libraryRef:
_libraryRef
newArgumentEncoderWithBufferIndex:
newArgumentEncoderWithBufferIndex:reflection:
functionType
patchType
patchControlPointCount
vertexAttributes
stageInputAttributes
functionConstantsDictionary
functionRef
formattedDescription:
_functionRef
_functionType
initWithCompilerOutput:
_function
_fenceRef
initWithCommandBuffer:renderPassDescriptor:
merge:
renderCommandEncoder
setStoreAction:
setStoreActionOptions:
separateCommits
setSeparateCommits:
sampledRenderCommandEncoderWithProgramInfoBuffer:capacity:
_encodersSize
_encodersCount
_encoders
initWithResourceRef:options:device:heap:
stringByPaddingToLength:withString:startingAtIndex:
retainedLabel
numberWithUnsignedLongLong:
cpuCacheMode
resourceOptions
arrayWithObjects:count:
componentsJoinedByString:
stringWithFormat:
initWithBuffer:offset:bytesPerRow:descriptor:textureRef:
setPurgeableState:
makeAliasable
isAliasable
heap
heapOffset
allocatedSize
didModifyRange:
newTextureWithDescriptor:offset:bytesPerRow:
addDebugMarker:range:
removeAllDebugMarkers
newLinearTextureWithDescriptor:offset:bytesPerRow:bytesPerImage:
iosurface
gpuAddress
resourceIndex
setResourceIndex:
newRemoteBufferViewForDevice:
_bufferRef
_content
_pointer
_deallocator
_length
_iosurface
_gpuAddress
allocStorage
initWithEntrySize:device:
getStorage
returnStorage:
head
tail
storageSize
semaphore
type
initWithType:options:
getSizeInfo
setHeapOffset:
newBufferWithLength:options:offset:useOffset:
newTextureWithDescriptor:offset:useOffset:
maxAvailableSizeWithAlignment:
newBufferWithLength:options:offset:
newTextureWithDescriptor:offset:
size
usedSize
_heapRef
initWithQueue:retainedReferences:
returnCommandBufferStorage:
returnBufferStorage:
commitAndWaitUntilSubmitted
bufferStorageByteCount
getBufferStorage
getCommandBufferStorage
enqueue
commit
addScheduledHandler:
presentDrawable:
presentDrawable:atTime:
presentDrawable:afterMinimumDuration:
waitUntilScheduled
waitUntilCompleted
blitCommandEncoder
renderCommandEncoderWithDescriptor:
computeCommandEncoderWithDispatchType:
parallelRenderCommandEncoderWithDescriptor:
resourceStateCommandEncoder
retainedReferences
kernelStartTime
kernelEndTime
GPUStartTime
GPUEndTime
status
error
addPurgedResource:
addPurgedHeap:
isProfilingEnabled
setProfilingEnabled:
profilingResults
userDictionary
debugBufferContentsWithLength:
sampledRenderCommandEncoderWithDescriptor:programInfoBuffer:capacity:
sampledComputeCommandEncoderWithProgramInfoBuffer:capacity:
sampledComputeCommandEncoderWithDispatchType:programInfoBuffer:capacity:
debugCommandEncoder
fragmentRenderCommandEncoderWithDescriptor:
sampledFragmentRenderCommandEncoderWithDescriptor:programInfoBuffer:capacity:
commitAndHold
setProtectionOptions:
protectionOptions
encodeWaitForEvent:value:timeout:
setResourceGroups:count:
dropResourceGroups:count:
encodeCacheHintTag:resourceGroups:count:
encodeCacheHintFinalize:resourceGroups:count:
getListIndex
setListIndex:
globalTraceObjectID
splitHandler
commandBufferRef
commandHead
bufferHead
segmentCount
commandCurrentStorage
commandTail
commandPrevious
bufferCurrentStorage
currentStorageOffset
continuation
_protectionOptions
_resourceList
initWithDevice:maxCommandBufferCount:
initWithEntrySize:
initWithDevice:descriptor:
commandBufferWithUnretainedReferences
insertDebugCaptureBoundary
getGPUPriority
setGPUPriority:
setGPUPriority:offset:
getBackgroundGPUPriority
setBackgroundGPUPriority:
setBackgroundGPUPriority:offset:
setSubmissionQueue:
setCompletionQueue:
finish
backgroundTrackingPID
setBackgroundTrackingPID:
qosLevel
commitQueue
commitSynchronously
completionQueue
disableCrossQueueHazardTracking
skipRender
setSkipRender:
executionEnabled
setExecutionEnabled:
isOpenGLQueue
setIsOpenGLQueue:
availableCounters
availableCountersAndDict
requestCounters:
requestCounters:withIndex:
getRequestedCounters
subdivideCounterList:
addPerfSampleHandler:
counterInfo
isStatEnabled
setStatEnabled:
getStatOptions
setStatOptions:
getStatLocations
setStatLocations:
submitCommandBuffers:count:
commandPool
bufferPool
_commandQueueRef
initWithDevice:pipelineStateDescriptor:
imageblockMemoryLengthForDimensions:
staticThreadgroupMemoryLength
supportIndirectCommandBuffers
uniqueIdentifier
_pipelineRef
_uniqueIdentifier
initWithDevice:depthStencilDescriptor:
readsDepth
writesDepth
readsStencil
writesStencil
threadgroupSizeMatchesTileSize
imageblockSampleLength
newVertexShaderDebugInfo
newFragmentShaderDebugInfo
vertexDebugInstrumentationData
fragmentDebugInstrumentationData
getFragmentShaderTelemetryID
getVertexShaderTelemetryID
doesAliasResources:count:all:
isPurgeable
isComplete
waitUntilComplete
doesAliasResource:
doesAliasAllResources:count:
doesAliasAnyResources:count:
responsibleProcess
setResponsibleProcess:
sharedAllocationInfo
cachedAllocationInfo
allocationID
unfilteredResourceOptions
_purgeableState
_heap
_heapOffset
_resourceRef
_options
_cpuCacheMode
_storageMode
_label
_labelLock
_hazardTrackingMode
_isAliasable
initWithDevice:samplerDescriptor:
decompress:expandedTex:srcFormat:destFormat:width:height:destRowBytes:srcRowBytes:
buffer
bufferOffset
bufferBytesPerRow
initWithTextureInternal:pixelFormat:decompressedPixelFormat:textureType:levels:slices:swizzle:compressedView:textureRef:isInternalTextureView:
swizzle
newTextureViewWithPixelFormatInternal:isInternalTextureView:
numberWithUnsignedInteger:
numberWithBool:
null
getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:
initWithTexture:pixelFormat:decompressedPixelFormat:textureRef:isInternalTextureView:
initWithTexture:pixelFormat:decompressedPixelFormat:textureType:levels:slices:swizzle:textureRef:isInternalTextureView:
replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:
getBytes:bytesPerRow:fromRegion:mipmapLevel:
replaceRegion:mipmapLevel:withBytes:bytesPerRow:
newTextureViewWithPixelFormat:
newTextureViewWithPixelFormat:textureType:levels:slices:swizzle:
rootResource
parentTexture
parentRelativeLevel
parentRelativeSlice
iosurfacePlane
sampleCount
isFramebufferOnly
firstMipmapInTail
tailSizeInBytes
isSparse
allowGPUOptimizedContents
isCompressed
compressionFeedback
swizzleKey
numFaces
isDrawable
getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:options:
replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:options:
newCompressedTextureViewWithPixelFormat:textureType:level:slice:
canGenerateMipmapLevels
generateMipmapLevel:slice:
sparseSurfaceDefaultValue
initWithTexture:device:
newRemoteTextureViewForDevice:
didModifyData
_parentTexture
_parentRelativeLevel
_parentRelativeSlice
_buffer
_textureType
_pixelFormat
_decompressedPixelFormat
_usage
_backingBuffer
_backingBufferSize
_decompressedTextureView
_width
_height
_depth
_mipmapLevelCount
_sampleCount
_arrayLength
_numFaces
_iosurfacePlane
_bufferOffset
_bufferBytesPerRow
_allowGPUOptimizedContents
_framebufferOnly
_swizzle
_isInternalTextureView
_firstMipmapInTail
_tailSizeInBytes
_isDrawable
@36@0:8@16I24^{?=Ssi}28
v16@0:8
B16@0:8
Q16@0:8
Q24@0:8Q16
I16@0:8
@"MTLSimDevice"
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v32@0:8@16Q24
v40@0:8@16Q24Q32
v48@0:8r^@16r^Q24{_NSRange=QQ}32
v40@0:8r^@16{_NSRange=QQ}24
^v24@0:8Q16
@24@0:8Q16
v24@0:8@16
v32@0:8@"<MTLBuffer>"16Q24
v40@0:8@"<MTLBuffer>"16Q24Q32
v32@0:8@"<MTLTexture>"16Q24
v32@0:8@"<MTLSamplerState>"16Q24
v32@0:8@"<MTLRenderPipelineState>"16Q24
v32@0:8@"<MTLComputePipelineState>"16Q24
v32@0:8@"<MTLIndirectCommandBuffer>"16Q24
@"<MTLArgumentEncoder>"24@0:8Q16
@"<MTLDevice>"16@0:8
v24@0:8@"NSString"16
@44@0:8@16I24@28^{?=SI}36
@"MTLSimIndirectArgumentBufferLayout"
@"MTLSimBuffer"
*24@0:8Q16
@"NSObject<OS_dispatch_data>"
@28@0:8@16B24
@24@0:8@16
v20@0:8I16
v28@0:8I16@20
v128@0:8*16*24Q32{?={?=QQQ}{?=QQQ}}40Q88Q96Q104Q112@120
@112@0:8{?={?=QQQ}{?=QQQ}}16Q64Q72Q80Q88@96^Q104
v120@0:8{?={?=QQQ}{?=QQQ}}16Q64Q72r^v80Q88Q96@104@112
I40@0:8Q16@24@32
I52@0:8@16@24Q32B40@44
I60@0:8Q16Q24@32Q40B48@52
I80@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48@64@72
I84@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64@68@76
I24@0:8@16
I32@0:8@16@24
I28@0:8I16@20
v36@0:8Q16I24@28
v40@0:8Q16I24I28@32
v32@0:8@16@24
v32@0:8Q16@24
v40@0:8Q16@24@32
v44@0:8@16Q24I32@36
v60@0:8r^@16r^Q24{_NSRange=QQ}32I48@52
I36@0:8I16Q20@28
v52@0:8r^@16{_NSRange=QQ}24I40@44
v40@0:8Q16Q24@32
v52@0:8r^@16Q24B32@36@44
I56@0:8@16@24Q32Q40@48
I40@0:8@16@24@32
I40@0:8@16Q24@32
I40@0:8r^v16Q24^@32
I32@0:8r^v16Q24
I48@0:8r^v16Q24^{?=SIQ}32^@40
r*32@0:8r*16Q24
v24@0:8Q16
@"<MTLDevice>"
@"NSObject<OS_dispatch_queue>"
{atomic<unsigned int>="__a_"{__cxx_atomic_impl<unsigned int, std::__1::__cxx_atomic_base_impl<unsigned int> >="__a_value"AI}}
^{MTLSerializerIndexGenerator=I{stack<unsigned int, std::__1::deque<unsigned int, std::__1::allocator<unsigned int> > >={deque<unsigned int, std::__1::allocator<unsigned int> >={__split_buffer<unsigned int *, std::__1::allocator<unsigned int *> >=^^I^^I^^I{__compressed_pair<unsigned int **, std::__1::allocator<unsigned int *> >=^^I}}Q{__compressed_pair<unsigned long, std::__1::allocator<unsigned int> >=Q}}}@}
v40@0:8@16Q24@?32
v40@0:8@"MTLSharedEventListener"16Q24@?<v@?@"<MTLSharedEvent>"Q>32
@"MTLSharedEventHandle"16@0:8
@28@0:8@16I24
v136@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104{?=QQQ}112
v120@0:8@16Q24Q32Q40{?=QQQ}48@72Q80Q88{?=QQQ}96
v128@0:8@16Q24Q32Q40{?=QQQ}48@72Q80Q88{?=QQQ}96Q120
v120@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104Q112
v128@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104Q112Q120
v44@0:8@16{_NSRange=QQ}24C40
v80@0:8@16Q24Q32@40Q48Q56Q64Q72
v56@0:8@16Q24@32Q40Q48
v108@0:8@16{?={?=QQQ}{?=QQQ}}24Q72Q80B88@92Q100
v88@0:8@16{?={?=QQQ}{?=QQQ}}24Q72Q80
v40@0:8@16{_NSRange=QQ}24
v56@0:8@16{_NSRange=QQ}24@40Q48
v24@0:8@"<MTLResource>"16
v40@0:8@"<MTLTexture>"16Q24Q32
v136@0:8@"<MTLTexture>"16Q24Q32{?=QQQ}40{?=QQQ}64@"<MTLTexture>"88Q96Q104{?=QQQ}112
v120@0:8@"<MTLBuffer>"16Q24Q32Q40{?=QQQ}48@"<MTLTexture>"72Q80Q88{?=QQQ}96
v128@0:8@"<MTLBuffer>"16Q24Q32Q40{?=QQQ}48@"<MTLTexture>"72Q80Q88{?=QQQ}96Q120
v120@0:8@"<MTLTexture>"16Q24Q32{?=QQQ}40{?=QQQ}64@"<MTLBuffer>"88Q96Q104Q112
v128@0:8@"<MTLTexture>"16Q24Q32{?=QQQ}40{?=QQQ}64@"<MTLBuffer>"88Q96Q104Q112Q120
v24@0:8@"<MTLTexture>"16
v44@0:8@"<MTLBuffer>"16{_NSRange=QQ}24C40
v80@0:8@"<MTLTexture>"16Q24Q32@"<MTLTexture>"40Q48Q56Q64Q72
v32@0:8@"<MTLTexture>"16@"<MTLTexture>"24
v56@0:8@"<MTLBuffer>"16Q24@"<MTLBuffer>"32Q40Q48
v24@0:8@"<MTLFence>"16
v108@0:8@"<MTLTexture>"16{?={?=QQQ}{?=QQQ}}24Q72Q80B88@"<MTLBuffer>"92Q100
v88@0:8@"<MTLTexture>"16{?={?=QQQ}{?=QQQ}}24Q72Q80
v40@0:8@"<MTLIndirectCommandBuffer>"16{_NSRange=QQ}24
v56@0:8@"<MTLIndirectCommandBuffer>"16{_NSRange=QQ}24@"<MTLIndirectCommandBuffer>"40Q48
v144@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104{?=QQQ}112Q136
v144@0:8@"<MTLTexture>"16Q24Q32{?=QQQ}40{?=QQQ}64@"<MTLTexture>"88Q96Q104{?=QQQ}112Q136
v20@0:8B16
v28@0:8@16I24
v44@0:8@16Q24Q32I40
v44@0:8@16{_NSRange=QQ}24I40
v64@0:8r^@16r^Q24{_NSRange=QQ}32I48^@52I60
v56@0:8r^v16Q24Q32I40^@44I52
v56@0:8r^@16{_NSRange=QQ}24I40^@44I52
v72@0:8r^@16r^f24r^f32{_NSRange=QQ}40I56^@60I68
v32@0:8r^@16Q24
v40@0:8r^@16Q24Q32
v24@0:8C16B20
^v28@0:8Q16I24
@"<MTLSerializerCommandStream>"
v40@0:8r^v16Q24Q32
v32@0:8Q16Q24
v40@0:8@16f24f28Q32
v56@0:8r^@16r^f24r^f32{_NSRange=QQ}40
v64@0:8{?={?=QQQ}{?=QQQ}}16
v64@0:8{?=QQQ}16{?=QQQ}40
v56@0:8@16Q24{?=QQQ}32
v40@0:8@16@24Q32
v24@0:8@"<MTLComputePipelineState>"16
v40@0:8@"<MTLSamplerState>"16f24f28Q32
v56@0:8@"<MTLBuffer>"16Q24{?=QQQ}32
v32@0:8@"<MTLResource>"16Q24
v24@0:8@"<MTLHeap>"16
v40@0:8@"<MTLIndirectCommandBuffer>"16@"<MTLBuffer>"24Q32
@"NSData"16@0:8
@32@0:8@16Q24
[31@"<MTLSerializerBuffer>"]
[128@"<MTLSerializerTexture>"]
[16@"<MTLSerializerSamplerState>"]
@"<MTLSerializerComputePipelineState>"
v64@0:8{?=dddddd}16
v32@0:8r^{?=dddddd}16Q24
v32@0:8Q16r^{?=II}24
v28@0:8f16f20f24
v48@0:8{?=QQQQ}16
v32@0:8r^{?=QQQQ}16Q24
v32@0:8f16f20f24f28
v24@0:8I16I20
v48@0:8Q16Q24Q32Q40
v40@0:8Q16Q24Q32
v64@0:8Q16Q24Q32@40Q48Q56
v56@0:8Q16Q24Q32@40Q48
v56@0:8Q16Q24Q32Q40Q48
v80@0:8Q16Q24Q32@40Q48Q56q64Q72
v40@0:8Q16@24Q32
v64@0:8Q16Q24@32Q40@48Q56
v20@0:8f16
v72@0:8Q16Q24Q32@40Q48Q56Q64
v56@0:8Q16@24Q32@40Q48
v88@0:8Q16Q24Q32@40Q48@56Q64Q72Q80
v72@0:8Q16@24Q32@40Q48@56Q64
v40@0:8{?=QQQ}16
v48@0:8r^@16Q24Q32Q40
v24@0:8@"<MTLRenderPipelineState>"16
v24@0:8@"<MTLDepthStencilState>"16
v64@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56
v56@0:8Q16Q24Q32@"<MTLBuffer>"40Q48
v80@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56q64Q72
v40@0:8Q16@"<MTLBuffer>"24Q32
v64@0:8Q16Q24@"<MTLBuffer>"32Q40@"<MTLBuffer>"48Q56
v32@0:8@"<MTLFence>"16Q24
v72@0:8Q16Q24Q32@"<MTLBuffer>"40Q48Q56Q64
v56@0:8Q16@"<MTLBuffer>"24Q32@"<MTLBuffer>"40Q48
v88@0:8Q16Q24Q32@"<MTLBuffer>"40Q48@"<MTLBuffer>"56Q64Q72Q80
v72@0:8Q16@"<MTLBuffer>"24Q32@"<MTLBuffer>"40Q48@"<MTLBuffer>"56Q64
v40@0:8@"<MTLResource>"16Q24Q32
v32@0:8@"<MTLHeap>"16Q24
v24@0:8@?16
v48@0:8@16Q24@32Q40
v40@0:8f16f20f24f28Q32
v44@0:8@16f24f28f32Q36
v28@0:8B16Q20
v56@0:8@16Q24Q32Q40Q48
v60@0:8@16Q24Q32Q40B48Q52
v48@0:8@16Q24Q32Q40
v52@0:8@16Q24Q32Q40B48
v24@0:8@?<v@?@"<MTLRenderCommandEncoderSPI>"Q>16
v48@0:8@"<MTLTexture>"16Q24@"<MTLSamplerState>"32Q40
v44@0:8@"<MTLSamplerState>"16f24f28f32Q36
v56@0:8@"<MTLTexture>"16Q24Q32Q40Q48
v60@0:8@"<MTLTexture>"16Q24Q32Q40B48Q52
v48@0:8@"<MTLTexture>"16Q24Q32Q40
v52@0:8@"<MTLTexture>"16Q24Q32Q40B48
@32@0:8@16@24
@"NSMutableArray"
@"MTLRenderPassDescriptor"
@"<MTLSerializerRenderPipelineState>"
@"<MTLSerializerDepthStencilState>"
@"<MTLSerializerBuffer>"
{?=QQ}24@0:8@16
{?=QQ}32@0:8Q16Q24
@32@0:8Q16Q24
@40@0:8r^v16Q24Q32
@48@0:8^v16Q24Q32@?40
@40@0:8@16^{__IOSurface=}24Q32
@32@0:8@16^@24
@40@0:8@16@24^@32
v40@0:8@16@24@?32
@48@0:8@16Q24^@32^@40
v32@0:8@16@?24
B24@0:8Q16
B24@0:8q16
v32@0:8^{?=ff}16Q24
@40@0:8@16Q24Q32
{?=QQQ}40@0:8Q16Q24Q32
{?=QQQ}16@0:8
v72@0:8r^{?={?=QQQ}{?=QQQ}}16^{?={?=QQQ}{?=QQQ}}24{?=QQQ}32Q56Q64
v64@0:8r^{?={?=QQQ}{?=QQQ}}16^{?={?=QQQ}{?=QQQ}}24{?=QQQ}32Q56
@"<MTLCommandQueue>"16@0:8
@"<MTLCommandQueue>"24@0:8Q16
{?=QQ}24@0:8@"MTLTextureDescriptor"16
@"<MTLHeap>"24@0:8@"MTLHeapDescriptor"16
@"<MTLBuffer>"32@0:8Q16Q24
@"<MTLBuffer>"40@0:8r^v16Q24Q32
@"<MTLBuffer>"48@0:8^v16Q24Q32@?<v@?^vQ>40
@"<MTLDepthStencilState>"24@0:8@"MTLDepthStencilDescriptor"16
@"<MTLTexture>"24@0:8@"MTLTextureDescriptor"16
@"<MTLTexture>"40@0:8@"MTLTextureDescriptor"16^{__IOSurface=}24Q32
@"<MTLSamplerState>"24@0:8@"MTLSamplerDescriptor"16
@"<MTLLibrary>"16@0:8
@"<MTLLibrary>"32@0:8@"NSBundle"16^@24
@"<MTLLibrary>"32@0:8@"NSString"16^@24
@"<MTLLibrary>"32@0:8@"NSURL"16^@24
@"<MTLLibrary>"32@0:8@"NSObject<OS_dispatch_data>"16^@24
@"<MTLLibrary>"40@0:8@"NSString"16@"MTLCompileOptions"24^@32
v40@0:8@"NSString"16@"MTLCompileOptions"24@?<v@?@"<MTLLibrary>"@"NSError">32
@"<MTLRenderPipelineState>"32@0:8@"MTLRenderPipelineDescriptor"16^@24
@"<MTLRenderPipelineState>"48@0:8@"MTLRenderPipelineDescriptor"16Q24^@32^@40
v32@0:8@"MTLRenderPipelineDescriptor"16@?<v@?@"<MTLRenderPipelineState>"@"NSError">24
v40@0:8@"MTLRenderPipelineDescriptor"16Q24@?<v@?@"<MTLRenderPipelineState>"@"MTLRenderPipelineReflection"@"NSError">32
@"<MTLComputePipelineState>"32@0:8@"<MTLFunction>"16^@24
@"<MTLComputePipelineState>"48@0:8@"<MTLFunction>"16Q24^@32^@40
v32@0:8@"<MTLFunction>"16@?<v@?@"<MTLComputePipelineState>"@"NSError">24
v40@0:8@"<MTLFunction>"16Q24@?<v@?@"<MTLComputePipelineState>"@"MTLComputePipelineReflection"@"NSError">32
@"<MTLComputePipelineState>"48@0:8@"MTLComputePipelineDescriptor"16Q24^@32^@40
v40@0:8@"MTLComputePipelineDescriptor"16Q24@?<v@?@"<MTLComputePipelineState>"@"MTLComputePipelineReflection"@"NSError">32
@"<MTLFence>"16@0:8
@"<MTLRenderPipelineState>"48@0:8@"MTLTileRenderPipelineDescriptor"16Q24^@32^@40
v40@0:8@"MTLTileRenderPipelineDescriptor"16Q24@?<v@?@"<MTLRenderPipelineState>"@"MTLRenderPipelineReflection"@"NSError">32
@"<MTLArgumentEncoder>"24@0:8@"NSArray"16
@"<MTLRasterizationRateMap>"24@0:8@"MTLRasterizationRateMapDescriptor"16
@"<MTLIndirectCommandBuffer>"40@0:8@"MTLIndirectCommandBufferDescriptor"16Q24Q32
@"<MTLEvent>"16@0:8
@"<MTLSharedEvent>"16@0:8
@"<MTLSharedEvent>"24@0:8@"MTLSharedEventHandle"16
@24@0:8^{__IOSurface=}16
{?=II}16@0:8
@20@0:8I16
B44@0:8^@16Q24^Q32i40
@40@0:8Q16Q24Q32
@48@0:8r^v16Q24Q32Q40
@56@0:8^v16Q24Q32Q40@?48
Q32@0:8Q16Q24
r^{?=IIIIIIIIIIIIIIIIIIffIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIQ}16@0:8
f16@0:8
{IndirectArgumentBufferCapabilities=b1b1b1b29}16@0:8
v24@0:8^{MPSFunctionTable=}16
v40@0:8Q16^Q24Q32
B40@0:8^{?=III}16Q24Q32
@32@0:8^v16Q24
@40@0:8^v16@24Q32
^v16@0:8
@40@0:8@16r^{?=BQ^{?}}24^@32
@48@0:8^v16Q24@32@?40
{?=QQQ}48@0:8Q16Q24Q32Q40
@32@0:8r^@16Q24
r^{MTLTargetDeviceArch=II*}16@0:8
v24@0:8@"<MTLDeviceSPI>"16
@"<MTLBuffer>"24@0:8^{__IOSurface=}16
B24@0:8@"NSString"16
@"<MTLCommandQueue>"24@0:8@"MTLCommandQueueDescriptor"16
@"_MTLIndirectArgumentBufferLayout"24@0:8@"MTLStructType"16
@"<MTLArgumentEncoder>"24@0:8@"_MTLIndirectArgumentBufferLayout"16
@"<MTLBuffer>"40@0:8@"MTLIndirectCommandBufferDescriptor"16Q24Q32
@"<MTLIndirectRenderCommandEncoder>"24@0:8@"<MTLBuffer>"16
@"<MTLIndirectComputeCommandEncoder>"24@0:8@"<MTLBuffer>"16
@"<MTLSharedEvent>"20@0:8I16
@"<MTLBuffer>"24@0:8@"<MTLComputeCommandEncoder>"16
@"<MTLBuffer>"24@0:8@"<MTLRenderCommandEncoder>"16
@"<MTLBuffer>"40@0:8Q16Q24Q32
@"<MTLBuffer>"48@0:8r^v16Q24Q32Q40
@"<MTLBuffer>"56@0:8^v16Q24Q32Q40@?<v@?^vQ>48
v24@0:8@"<MTLBuffer>"16
v24@0:8@"<MTLSamplerState>"16
v24@0:8@"<MTLIndirectCommandBuffer>"16
@"NSArray"16@0:8
v24@0:8@"NSArray"16
@"NSObject<OS_dispatch_data>"16@0:8
v24@0:8@"NSObject<OS_dispatch_data>"16
@"<MTLComputePipelineState>"32@0:8@"MTLComputePipelineDescriptor"16^@24
v32@0:8@"MTLComputePipelineDescriptor"16@?<v@?@"<MTLComputePipelineState>"@"NSError">24
@"<MTLRenderPipelineState>"32@0:8@"MTLTileRenderPipelineDescriptor"16^@24
v32@0:8@"MTLTileRenderPipelineDescriptor"16@?<v@?@"<MTLRenderPipelineState>"@"NSError">24
@"<MTLFunction>"32@0:8^v16Q24
@"<MTLFunction>"40@0:8^v16@"NSObject<OS_dispatch_data>"24Q32
@"<MTLIndirectArgumentEncoder>"24@0:8@"NSArray"16
@"<MTLComputePipelineState>"40@0:8@"NSArray"16r^{?=BQ^{?}}24^@32
@"<MTLLibrary>"40@0:8@"NSArray"16r^{?=BQ^{?}}24^@32
@"<MTLPipelineLibrarySPI>"32@0:8@"NSString"16^@24
@"NSObject<OS_dispatch_data>"24@0:8@"MTLRenderPipelineDescriptor"16
@"NSObject<OS_dispatch_data>"24@0:8@"MTLComputePipelineDescriptor"16
@"MTLRenderPipelineDescriptor"32@0:8@"NSObject<OS_dispatch_data>"16@"<MTLDeserializationContext>"24
@"MTLComputePipelineDescriptor"32@0:8@"NSObject<OS_dispatch_data>"16@"<MTLDeserializationContext>"24
@"NSObject<OS_dispatch_data>"24@0:8@"MTLStructType"16
@"NSObject<OS_dispatch_data>"28@0:8@"MTLStructType"16I24
@"<MTLTexture>"48@0:8^v16Q24@"MTLTextureDescriptor"32@?<v@?^vQ>40
@"<MTLTextureLayout>"28@0:8@"MTLTextureDescriptor"16B24
@"<MTLIndirectArgumentEncoder>"24@0:8@"_MTLIndirectArgumentBufferLayout"16
@"<MTLResourceGroupSPI>"32@0:8r^@16Q24
@52@0:8Q16Q24^v32B40@?44
v52@0:8I16@20@28Q36@?44
^v48@0:8@16Q24@32^Q40
v32@0:8^v16Q24
@48@0:8@16@24@32^@40
{?=b1b1b1b1b1b1b1b1b1b55}32@0:8@16@24
@48@0:8@16@24@32@40
@64@0:8^v16Q24@?32@40Q48Q56
@56@0:8^v16Q24@32Q40Q48
{MTLSimConnection="_connection"@"NSObject<OS_xpc_object>""_serialQueue"@"NSObject<OS_dispatch_queue>"}
@"MTLSerializer"
{unordered_map<unsigned int, MTLSimCommandBuffer *, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, MTLSimCommandBuffer *> > >="__table_"{__hash_table<std::__1::__hash_value_type<unsigned int, MTLSimCommandBuffer *>, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, MTLSimCommandBuffer *>, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, MTLSimCommandBuffer *>, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, MTLSimCommandBuffer *> > >="__bucket_list_"{unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MTLSimCommandBuffer *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MTLSimCommandBuffer *>, void *> *> *> > >="__ptr_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MTLSimCommandBuffer *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MTLSimCommandBuffer *>, void *> *> *> > >="__value_"^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MTLSimCommandBuffer *>, void *> *>}"__value_"{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MTLSimCommandBuffer *>, void *> *> *> >="__data_"{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MTLSimCommandBuffer *>, void *> *> *> >="__value_"Q}}}}"__p1_"{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MTLSimCommandBuffer *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MTLSimCommandBuffer *>, void *> > >="__value_"{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MTLSimCommandBuffer *>, void *> *>="__next_"^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, MTLSimCommandBuffer *>, void *> *>}}}"__p2_"{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, MTLSimCommandBuffer *>, std::__1::hash<unsigned int>, true> >="__value_"Q}"__p3_"{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, MTLSimCommandBuffer *>, std::__1::equal_to<unsigned int>, true> >="__value_"f}}}
@"MTLResourceListPool"
@"<MTLDeviceSPI>"
{_opaque_pthread_mutex_t="__sig"q"__opaque"[56c]}
^{unordered_map<unsigned int, std::__1::unique_ptr<MTLSimSharedEventNotification, std::__1::default_delete<MTLSimSharedEventNotification> >, std::__1::hash<unsigned int>, std::__1::equal_to<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, std::__1::unique_ptr<MTLSimSharedEventNotification, std::__1::default_delete<MTLSimSharedEventNotification> > > > >={__hash_table<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<MTLSimSharedEventNotification, std::__1::default_delete<MTLSimSharedEventNotification> > >, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<MTLSimSharedEventNotification, std::__1::default_delete<MTLSimSharedEventNotification> > >, std::__1::hash<unsigned int>, true>, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<MTLSimSharedEventNotification, std::__1::default_delete<MTLSimSharedEventNotification> > >, std::__1::equal_to<unsigned int>, true>, std::__1::allocator<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<MTLSimSharedEventNotification, std::__1::default_delete<MTLSimSharedEventNotification> > > > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<MTLSimSharedEventNotification, std::__1::default_delete<MTLSimSharedEventNotification> > >, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<MTLSimSharedEventNotification, std::__1::default_delete<MTLSimSharedEventNotification> > >, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<MTLSimSharedEventNotification, std::__1::default_delete<MTLSimSharedEventNotification> > >, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<MTLSimSharedEventNotification, std::__1::default_delete<MTLSimSharedEventNotification> > >, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<MTLSimSharedEventNotification, std::__1::default_delete<MTLSimSharedEventNotification> > >, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<MTLSimSharedEventNotification, std::__1::default_delete<MTLSimSharedEventNotification> > >, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<MTLSimSharedEventNotification, std::__1::default_delete<MTLSimSharedEventNotification> > >, void *> *> *> >=Q}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<MTLSimSharedEventNotification, std::__1::default_delete<MTLSimSharedEventNotification> > >, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<MTLSimSharedEventNotification, std::__1::default_delete<MTLSimSharedEventNotification> > >, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<MTLSimSharedEventNotification, std::__1::default_delete<MTLSimSharedEventNotification> > >, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<MTLSimSharedEventNotification, std::__1::default_delete<MTLSimSharedEventNotification> > >, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<MTLSimSharedEventNotification, std::__1::default_delete<MTLSimSharedEventNotification> > >, std::__1::hash<unsigned int>, true> >=Q}{__compressed_pair<float, std::__1::__unordered_map_equal<unsigned int, std::__1::__hash_value_type<unsigned int, std::__1::unique_ptr<MTLSimSharedEventNotification, std::__1::default_delete<MTLSimSharedEventNotification> > >, std::__1::equal_to<unsigned int>, true> >=f}}}
{?="width"Q"height"Q"depth"Q}
@"<MTLFunction>"24@0:8@"NSString"16
@"<MTLFunction>"40@0:8@"NSString"16@"MTLFunctionConstantValues"24^@32
v40@0:8@"NSString"16@"MTLFunctionConstantValues"24@?<v@?@"<MTLFunction>"@"NSError">32
@"NSArray"
@"NSString"
@32@0:8Q16^@24
q16@0:8
@"<MTLArgumentEncoder>"32@0:8Q16^@24
@"NSDictionary"16@0:8
@36@0:8@16Q24I32
@"NSDictionary"
@"MTLSimFunction"
@"<MTLRenderCommandEncoder>"16@0:8
@32@0:8^{?=b8b24IQQ}16Q24
@"<MTLRenderCommandEncoder>"32@0:8^{?=b8b24IQQ}16Q24
@"<MTLHeap>"16@0:8
v32@0:8{_NSRange=QQ}16
@"<MTLTexture>"40@0:8@"MTLTextureDescriptor"16Q24Q32
v40@0:8@"NSString"16{_NSRange=QQ}24
@48@0:8@16Q24Q32Q40
^{__IOSurface=}16@0:8
@"<MTLTexture>"48@0:8@"MTLTextureDescriptor"16Q24Q32Q40
@76@0:8@16I24^v28^v36Q44Q52@60@?68
^{__IOSurface=}
@32@0:8Q16@24
^{BufferStorageEntry=@Q^{BufferStorageEntry}}16@0:8
v24@0:8^{BufferStorageEntry=@Q^{BufferStorageEntry}}16
^{BufferStorageEntry=@Q^{BufferStorageEntry}}
@"NSObject<OS_dispatch_semaphore>"
@"<MTLTexture>"32@0:8@"MTLTextureDescriptor"16Q24
@36@0:8@16@24I32
@44@0:8Q16Q24Q32B40
@36@0:8@16Q24B32
v32@0:8@16d24
d16@0:8
v24@0:8@?<v@?@"<MTLCommandBuffer>">16
v24@0:8@"<MTLDrawable>"16
v32@0:8@"<MTLDrawable>"16d24
@"<MTLBlitCommandEncoder>"16@0:8
@"<MTLRenderCommandEncoder>"24@0:8@"MTLRenderPassDescriptor"16
@"<MTLComputeCommandEncoder>"16@0:8
@"<MTLComputeCommandEncoder>"24@0:8Q16
v32@0:8@"<MTLEvent>"16Q24
@"<MTLParallelRenderCommandEncoder>"24@0:8@"MTLRenderPassDescriptor"16
@"<MTLResourceStateCommandEncoder>"16@0:8
@"NSError"16@0:8
^v24@0:8^Q16
@40@0:8@16^{?=b8b24IQQ}24Q32
@40@0:8Q16^{?=b8b24IQQ}24Q32
v36@0:8@16Q24I32
v40@0:8Q16r^@24Q32
@"NSMutableDictionary"16@0:8
@"<MTLRenderCommandEncoder>"40@0:8@"MTLRenderPassDescriptor"16^{?=b8b24IQQ}24Q32
@"<MTLComputeCommandEncoder>"32@0:8^{?=b8b24IQQ}16Q24
@"<MTLComputeCommandEncoder>"40@0:8Q16^{?=b8b24IQQ}24Q32
@"<MTLDebugCommandEncoder>"16@0:8
@"<MTLFragmentRenderCommandEncoder>"24@0:8@"MTLRenderPassDescriptor"16
@"<MTLFragmentRenderCommandEncoder>"40@0:8@"MTLRenderPassDescriptor"16^{?=b8b24IQQ}24Q32
v36@0:8@"<MTLEvent>"16Q24I32
B28@0:8@16B24
^v48@0:8Q16Q24^@32^Q40
@?16@0:8
B28@0:8@"<MTLSerializerResource>"16B24
B24@0:8@"<MTLSerializerState>"16
@?<v@?>16@0:8
v24@0:8@?<v@?>16
v24@0:8@"<MTLSerializerCommandStream>"16
^{StorageEntry=Q^v@^{StorageEntry}}
@"MTLResourceList"
@"<MTLCommandBuffer>"16@0:8
B28@0:8Q16S24
i16@0:8
v20@0:8i16
i24@0:8@16
i32@0:8@16Q24
v24@0:8@"NSObject<OS_dispatch_queue>"16
@"NSObject<OS_dispatch_queue>"16@0:8
i24@0:8@"NSArray"16
i32@0:8@"NSArray"16Q24
@"NSArray"24@0:8@"NSArray"16
v24@0:8@?<v@?@"<MTLCommandBuffer>"@"NSData"Q>16
@36@0:8@16I24@28
^{StorageEntry=Q^v@^{StorageEntry}}16@0:8
v24@0:8^{StorageEntry=Q^v@^{StorageEntry}}16
@"MTLSimCommandStoragePool"
@"MTLSimBufferStoragePool"
Q40@0:8{?=QQQ}16
@"MTLDebugInstrumentationData"16@0:8
B32@0:8r^@16Q24
B24@0:8@"<MTLResource>"16
@"MTLResourceAllocationInfo"16@0:8
@44@0:8I16Q20@28@36
B36@0:8r^@16Q24B32
@"MTLSimHeap"
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"MTLResourceAllocationInfo"
v80@0:8r*16*24Q32Q40Q48Q56Q64Q72
Q80@0:8{?={?=QQQ}{?=QQQ}}16Q64Q72
@"<MTLBuffer>"16@0:8
@"<MTLTexture>"16@0:8
v104@0:8^v16Q24Q32{?={?=QQQ}{?=QQQ}}40Q88Q96
v104@0:8{?={?=QQQ}{?=QQQ}}16Q64Q72r^v80Q88Q96
v88@0:8^v16Q24{?={?=QQQ}{?=QQQ}}32Q80
v88@0:8{?={?=QQQ}{?=QQQ}}16Q64r^v72Q80
@64@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48
@68@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64
{?=CCCC}16@0:8
@"<MTLTexture>"24@0:8Q16
@"<MTLTexture>"64@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48
@"<MTLTexture>"68@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48{?=CCCC}64
@"<MTLResource>"16@0:8
v112@0:8^v16Q24Q32{?={?=QQQ}{?=QQQ}}40Q88Q96Q104
v112@0:8{?={?=QQQ}{?=QQQ}}16Q64Q72r^v80Q88Q96Q104
@48@0:8Q16Q24Q32Q40
@"<MTLTexture>"48@0:8Q16Q24Q32Q40
@"NSString"24@0:8Q16
@96@0:8@16Q24Q32Q40{_NSRange=QQ}48{_NSRange=QQ}64{?=CCCC}80B84I88B92
@92@0:8@16Q24Q32Q40{_NSRange=QQ}48{_NSRange=QQ}64{?=CCCC}80I84B88
@48@0:8@16Q24Q32I40B44
@52@0:8@16Q24Q32@40I48
@68@0:8@16Q24^{__IOSurface=}32Q40I48@52@60
@28@0:8Q16B24
@"MTLSimTexture"
@"<MTLTexture>"
@"<MTLResource>"
