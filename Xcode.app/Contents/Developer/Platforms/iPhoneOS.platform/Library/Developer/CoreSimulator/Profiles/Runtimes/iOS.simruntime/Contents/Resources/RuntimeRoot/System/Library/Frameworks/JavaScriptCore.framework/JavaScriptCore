 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
================ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
456789:;<=
 !"#$%&'()*+,-./0123
?456789:;<=
 !"#$%&'()*+,-./0123
-;eU
U1(\Q
mSx@
b}$l
~)p$w
11eU%
z^KD
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
@wKA
0123456789abcdef
0123456789ABCDEF
uuuuuuuubtnufruuuuuuuuuuuuuuuuuu
vH7B
W4vC
          
                          
                          
????????????????        
????????
/libclang_rt.
asan_
tsan_
?UUUUUU
(function (syncIterator, nextMethod)
"use strict";
@putByIdDirectPrivate(this, "syncIterator", syncIterator);
@putByIdDirectPrivate(this, "nextMethod", nextMethod);
(function (executor)
"use strict";
if (!@isCallable(executor))
@throwTypeError("InternalPromise constructor takes a function argument");
var promise = @createPromise(this,  true);
var capturedPromise = promise;
try {
executor(
(resolution) => {
return @resolvePromiseWithFirstResolvingFunctionCallCheck(capturedPromise, resolution);
(reason) => {
return @rejectPromiseWithFirstResolvingFunctionCallCheck(capturedPromise, reason);
} catch (error) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, error);
return promise;
(function (executor)
"use strict";
if (!@isCallable(executor))
@throwTypeError("Promise constructor takes a function argument");
var promise = @createPromise(this,  false);
var capturedPromise = promise;
try {
executor(
(resolution) => {
return @resolvePromiseWithFirstResolvingFunctionCallCheck(capturedPromise, resolution);
(reason) => {
return @rejectPromiseWithFirstResolvingFunctionCallCheck(capturedPromise, reason);
} catch (error) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, error);
return promise;
(function (regExp, string, global, fullUnicode)
"use strict";
@putByIdDirectPrivate(this, "regExpStringIteratorRegExp", regExp);
@putByIdDirectPrivate(this, "regExpStringIteratorString", string);
@putByIdDirectPrivate(this, "regExpStringIteratorGlobal", global);
@putByIdDirectPrivate(this, "regExpStringIteratorUnicode", fullUnicode);
@putByIdDirectPrivate(this, "regExpStringIteratorDone", false);
(function (string, index, unicode)
"use strict";
if (!unicode)
return index + 1;
if (index + 1 >= string.length)
return index + 1;
var first = string.@charCodeAt(index);
if (first < 0xD800 || first > 0xDBFF)
return index + 1;
var second = string.@charCodeAt(index + 1);
if (second < 0xDC00 || second > 0xDFFF)
return index + 1;
return index + 2;
(function (iterable)
"use strict";
if (!@isObject(this))
@throwTypeError("|this| is not an object");
var promiseCapability = @newPromiseCapability(this);
var values = [];
var index = 0;
var remainingElementsCount = 1;
function newResolveElement(index)
var alreadyCalled = false;
return (argument) => {
if (alreadyCalled)
return @undefined;
alreadyCalled = true;
@putByValDirect(values, index, argument);
--remainingElementsCount;
if (remainingElementsCount === 0)
return promiseCapability.@resolve.@call(@undefined, values);
return @undefined;
try {
var promiseResolve = this.resolve;
if (!@isCallable(promiseResolve))
@throwTypeError("Promise resolve is not a function");
for (var value of iterable) {
@putByValDirect(values, index, @undefined);
var nextPromise = promiseResolve.@call(this, value);
var resolveElement = newResolveElement(index);
++remainingElementsCount;
nextPromise.then(resolveElement, promiseCapability.@reject);
++index;
--remainingElementsCount;
if (remainingElementsCount === 0)
promiseCapability.@resolve.@call(@undefined, values);
} catch (error) {
promiseCapability.@reject.@call(@undefined, error);
return promiseCapability.@promise;
(function (iterable)
"use strict";
if (!@isObject(this))
@throwTypeError("|this| is not an object");
var promiseCapability = @newPromiseCapability(this);
var values = [];
var remainingElementsCount = 1;
var index = 0;
function newResolveRejectElements(index)
var alreadyCalled = false;
return [
(value) => {
if (alreadyCalled)
return @undefined;
alreadyCalled = true;
var obj = {
status: "fulfilled",
value
@putByValDirect(values, index, obj);
--remainingElementsCount;
if (remainingElementsCount === 0)
return promiseCapability.@resolve.@call(@undefined, values);
return @undefined;
(reason) => {
if (alreadyCalled)
return @undefined;
alreadyCalled = true;
var obj = {
status: "rejected",
reason
@putByValDirect(values, index, obj);
--remainingElementsCount;
if (remainingElementsCount === 0)
return promiseCapability.@resolve.@call(@undefined, values);
return @undefined;
try {
var promiseResolve = this.resolve;
if (!@isCallable(promiseResolve))
@throwTypeError("Promise resolve is not a function");
for (var value of iterable) {
@putByValDirect(values, index, @undefined);
var nextPromise = promiseResolve.@call(this, value);
var [resolveElement, rejectElement] = newResolveRejectElements(index);
++remainingElementsCount;
nextPromise.then(resolveElement, rejectElement);
++index;
--remainingElementsCount;
if (remainingElementsCount === 0)
promiseCapability.@resolve.@call(@undefined, values);
} catch (error) {
promiseCapability.@reject.@call(@undefined, error);
return promiseCapability.@promise;
(function (url)
"use strict";
return @createHTML("String.prototype.link", this, "a", "name", url)
(function (iterable)
"use strict";
if (!@isObject(this))
@throwTypeError("|this| is not an object");
var promiseCapability = @newPromiseCapability(this);
var errors = [];
var remainingElementsCount = 1;
var index = 0;
function newRejectElement(index)
var alreadyCalled = false;
return (reason) => {
if (alreadyCalled)
return @undefined;
alreadyCalled = true;
@putByValDirect(errors, index, reason);
--remainingElementsCount;
if (remainingElementsCount === 0)
return promiseCapability.@reject.@call(@undefined, new @AggregateError(errors));
return @undefined;
try {
var promiseResolve = this.resolve;
if (!@isCallable(promiseResolve))
@throwTypeError("Promise resolve is not a function");
for (var value of iterable) {
@putByValDirect(errors, index, @undefined);
var nextPromise = promiseResolve.@call(this, value);
var rejectElement = newRejectElement(index);
++remainingElementsCount;
nextPromise.then(promiseCapability.@resolve, rejectElement);
++index;
--remainingElementsCount;
if (remainingElementsCount === 0)
throw new @AggregateError(errors);
} catch (error) {
promiseCapability.@reject.@call(@undefined, error);
return promiseCapability.@promise;
(function (thisValue, argumentValues)
"use strict";
return this.@apply(thisValue, argumentValues);
(function (target, thisArgument, argumentsList)
"use strict";
if (!@isCallable(target))
@throwTypeError("Reflect.apply requires the first argument be a function");
if (!@isObject(argumentsList))
@throwTypeError("Reflect.apply requires the third argument be an object");
return target.@apply(thisArgument, argumentsList);
(function (array, kind)
"use strict";
var done = true;
var value;
var index = @getArrayIteratorInternalField(this, @arrayIteratorFieldIndex);
if (index !== -1) {
var length = array.length >>> 0;
if (index < length) {
@putArrayIteratorInternalField(this, @arrayIteratorFieldIndex, index + 1);
done = false;
if (kind === @iterationKindKey)
value = index;
else {
value = array[index];
if (kind === @iterationKindEntries)
value = [index, value];
} else
@putArrayIteratorInternalField(this, @arrayIteratorFieldIndex, -1);
return { value, done };
(function (generator, promise, sentValue, resumeMode)
"use strict";
@assert(@isPromise(promise));
var state = @getGeneratorInternalField(generator, @generatorFieldState);
var value = @undefined;
try {
@putGeneratorInternalField(generator, @generatorFieldState, @GeneratorStateExecuting);
value = @getGeneratorInternalField(generator, @generatorFieldNext).@call(@getGeneratorInternalField(generator, @generatorFieldThis), generator, state, sentValue, resumeMode, @getGeneratorInternalField(generator, @generatorFieldFrame));
if (@getGeneratorInternalField(generator, @generatorFieldState) === @GeneratorStateExecuting) {
@resolvePromiseWithFirstResolvingFunctionCallCheck(promise, value);
return promise;
} catch (error) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, error);
return promise;
var capturedGenerator = generator;
var capturedPromise = promise;
@resolveWithoutPromise(value,
function(value) { @asyncFunctionResume(capturedGenerator, capturedPromise, value, @GeneratorResumeModeNormal); },
function(error) { @asyncFunctionResume(capturedGenerator, capturedPromise, error, @GeneratorResumeModeThrow); });
return promise;
(function (generator, value, resumeMode)
"use strict";
var promise = @newPromise();
if (!@isAsyncGenerator(generator)) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, @makeTypeError('|this| should be an async generator'));
return promise;
@asyncGeneratorQueueEnqueue(generator, {resumeMode, value, promise, @asyncGeneratorQueueItemNext: null});
if (!@isExecutionState(generator))
@asyncGeneratorResumeNext(generator);
return promise;
(function (generator)
"use strict";
@assert(!@asyncGeneratorQueueIsEmpty(generator), "Async genetator's Queue is an empty List.");
var result = @getAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueFirst);
var updatedFirst = @getByIdDirectPrivate(result, "asyncGeneratorQueueItemNext");
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueFirst, updatedFirst);
if (updatedFirst === null)
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueLast, null);
return result;
(function (generator, item)
"use strict";
@assert(@getByIdDirectPrivate(item, "asyncGeneratorQueueItemNext") === null);
if (@getAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueFirst) === null) {
@assert(@getAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueLast) === null);
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueFirst, item);
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueLast, item);
} else {
var last = @getAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueLast);
@putByIdDirectPrivate(last, "asyncGeneratorQueueItemNext", item);
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueLast, item);
(function (generator)
"use strict";
return @getAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueFirst) === null;
(function (generator, exception)
"use strict";
@assert(@isAsyncGenerator(generator), "Generator is not an AsyncGenerator instance.");
var promise = @asyncGeneratorQueueDequeue(generator).promise;
@assert(@isPromise(promise));
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, exception);
return @asyncGeneratorResumeNext(generator);
(function (generator, value, done)
"use strict";
@assert(@isAsyncGenerator(generator), "Generator is not an AsyncGenerator instance.");
var promise = @asyncGeneratorQueueDequeue(generator).promise;
@assert(@isPromise(promise));
@resolvePromiseWithFirstResolvingFunctionCallCheck(promise, { value, done });
return @asyncGeneratorResumeNext(generator);
(function (generator)
"use strict";
@assert(@isAsyncGenerator(generator), "Generator is not an AsyncGenerator instance.");
var state = @getAsyncGeneratorInternalField(generator, @generatorFieldState);
@assert(state !== @AsyncGeneratorStateExecuting, "Async generator should not be in executing state");
if (state === @AsyncGeneratorStateAwaitingReturn)
return;
if (@asyncGeneratorQueueIsEmpty(generator))
return;
var next = @getAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueFirst);
if (next.resumeMode !== @GeneratorResumeModeNormal) {
if (state === @AsyncGeneratorStateSuspendedStart) {
@putAsyncGeneratorInternalField(generator, @generatorFieldState, @AsyncGeneratorStateCompleted);
state = @AsyncGeneratorStateCompleted;
if (state === @AsyncGeneratorStateCompleted) {
if (next.resumeMode === @GeneratorResumeModeReturn) {
@putAsyncGeneratorInternalField(generator, @generatorFieldState, @AsyncGeneratorStateAwaitingReturn);
@resolveWithoutPromise(next.value,
function (result) {
@putAsyncGeneratorInternalField(generator, @generatorFieldState, @AsyncGeneratorStateCompleted);
@asyncGeneratorResolve(generator, result, true);
function (error) {
@putAsyncGeneratorInternalField(generator, @generatorFieldState, @AsyncGeneratorStateCompleted);
@asyncGeneratorReject(generator, error);
return;
@assert(next.resumeMode === @GeneratorResumeModeThrow, "Async generator has wrong mode");
return @asyncGeneratorReject(generator, next.value);;
} else if (state === @AsyncGeneratorStateCompleted)
return @asyncGeneratorResolve(generator, @undefined, true);
@assert(state === @AsyncGeneratorStateSuspendedStart || @isSuspendYieldState(generator), "Async generator has wrong state");
@doAsyncGeneratorBodyCall(generator, next.value, next.resumeMode);
(function (generator, value, resumeMode)
"use strict";
function asyncGeneratorYieldAwaited(result)
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldSuspendReason, @AsyncGeneratorSuspendReasonYield);
@asyncGeneratorResolve(generator, result, false);
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldSuspendReason, @AsyncGeneratorSuspendReasonAwait);
@awaitValue(generator, value, asyncGeneratorYieldAwaited);
(async function (entry, fetcher, dependencies)
"use strict";
for (var i = 0, length = dependencies.length; i < length; ++i)
await this.moduleEvaluation(dependencies[i], fetcher);
var resumeMode = @GeneratorResumeModeNormal;
while (true) {
var awaitedValue = this.evaluate(entry.key, entry.module, fetcher, awaitedValue, resumeMode);
if (@getAbstractModuleRecordInternalField(entry.module, @abstractModuleRecordFieldState) == @GeneratorStateExecuting)
return;
try {
awaitedValue = await awaitedValue;
resumeMode = @GeneratorResumeModeNormal;
} catch (e) {
awaitedValue = e;
resumeMode = @GeneratorResumeModeThrow;
(function (index)
"use strict";
var array = @toObject(this, "Array.prototype.at requires that |this| not be null or undefined");
var length = @toLength(array.length);
var k = @toIntegerOrInfinity(index);
if (k < 0)
k += length;
return (k >= 0 && k < length) ? array[k] : @undefined;
(function (index)    
{   
"use strict";   
if (@isUndefinedOrNull(this))   
@throwTypeError("String.prototype.at requires that |this| not be null or undefined"); 
var string = @toString(this);   
var length = string.length; 
var k = @toIntegerOrInfinity(index);  
if (k < 0)  
k += length;    
return (k >= 0 && k < length) ? string[k] : @undefined; 
(function (index)
"use strict";
var length = @typedArrayLength(this);
var k = @toIntegerOrInfinity(index);
if (k < 0)
k += length;
return (k >= 0 && k < length) ? this[k] : @undefined;
(function (generator, value, onFulfilled)
"use strict";
var onRejected = function (result) { @doAsyncGeneratorBodyCall(generator, result, @GeneratorResumeModeThrow); };
@resolveWithoutPromise(value, onFulfilled, onRejected);
(function ()
"use strict";
return @createHTML("String.prototype.big", this, "big", "", "");
(function (thisValue)
"use strict";
var target = this;
if (!@isCallable(target))
@throwTypeError("|this| is not a function inside Function.prototype.bind");
var argumentCount = @argumentCount();
var boundArgs = null;
var numBoundArgs = 0;
if (argumentCount > 1) {
numBoundArgs = argumentCount - 1;
boundArgs = @createArgumentsButterfly();
var length = 0;
if (@hasOwnLengthProperty(target)) {
var lengthValue = target.length;
if (typeof lengthValue === "number") {
lengthValue = @toIntegerOrInfinity(lengthValue);
if (lengthValue > numBoundArgs)
length = lengthValue - numBoundArgs;
var name = target.name;
if (typeof name !== "string")
name = "";
return @makeBoundFunction(target, thisValue, boundArgs, length, name);
(function ()
"use strict";
return @createHTML("String.prototype.blink", this, "blink", "", "");
(function ()
"use strict";
return @createHTML("String.prototype.bold", this, "b", "", "");
(function (thisArgument)
"use strict";
var argumentValues = [];
for (var i = 1; i < arguments.length; i++)
@putByValDirect(argumentValues, i-1, arguments[i]);
return this.@apply(thisArgument, argumentValues);
(function (onRejected)
"use strict";
return this.then(@undefined, onRejected);
(function (source) {
"use strict";
return @Promise.@resolve(source).@then(@webAssemblyCompileStreamingInternal);
(function (first)
"use strict";
if (@argumentCount() === 1
&& @isJSArray(this)
&& @tryGetByIdWithWellKnownSymbol(this, "isConcatSpreadable") === @undefined
&& (!@isObject(first) || @tryGetByIdWithWellKnownSymbol(first, "isConcatSpreadable") === @undefined)) {
var result = @concatMemcpy(this, first);
if (result !== null)
return result;
return @tailCallForwardArguments(@concatSlowPath, this);
(function (arg )
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.concat requires that |this| not be null or undefined");
if (@argumentCount() === 1)
return @toString(this) + @toString(arg);
return @tailCallForwardArguments(@stringConcatSlowPath, this);
(function ()
"use strict";
var currentElement = @toObject(this, "Array.prototype.concat requires that |this| not be null or undefined");
var argCount = arguments.length;
var result = @arraySpeciesCreate(currentElement, 0);
var resultIsArray = @isJSArray(result);
var resultIndex = 0;
var argIndex = 0;
do {
var spreadable = @isObject(currentElement) && currentElement.@@isConcatSpreadable;
if ((spreadable === @undefined && @isArray(currentElement)) || spreadable) {
var length = @toLength(currentElement.length);
if (length + resultIndex > @MAX_SAFE_INTEGER)
@throwTypeError("Length exceeded the maximum array length");
if (resultIsArray && @isJSArray(currentElement) && length + resultIndex <= @MAX_ARRAY_INDEX) {
@appendMemcpy(result, currentElement, resultIndex);
resultIndex += length;
} else {
for (var i = 0; i < length; i++) {
if (i in currentElement)
@putByValDirect(result, resultIndex, currentElement[i]);
resultIndex++;
} else {
if (resultIndex >= @MAX_SAFE_INTEGER)
@throwTypeError("Length exceeded the maximum array length");
@putByValDirect(result, resultIndex++, currentElement);
currentElement = arguments[argIndex];
} while (argIndex++ < argCount);
result.length = resultIndex;
return result;
(function (target, start )
"use strict";
var array = @toObject(this, "Array.prototype.copyWithin requires that |this| not be null or undefined");
var length = @toLength(array.length);
var relativeTarget = @toIntegerOrInfinity(target);
var to = (relativeTarget < 0) ? @maxWithPositives(length + relativeTarget, 0) : @minWithMaybeNegativeZeroAndPositive(relativeTarget, length);
var relativeStart = @toIntegerOrInfinity(start);
var from = (relativeStart < 0) ? @maxWithPositives(length + relativeStart, 0) : @minWithMaybeNegativeZeroAndPositive(relativeStart, length);
var relativeEnd;
var end = @argument(2);
if (end === @undefined)
relativeEnd = length;
else
relativeEnd = @toIntegerOrInfinity(end);
var finalValue = (relativeEnd < 0) ? @maxWithPositives(length + relativeEnd, 0) : @minWithMaybeNegativeZeroAndPositive(relativeEnd, length);
var count = @minWithMaybeNegativeZeroAndPositive(finalValue - from, length - to);
var direction = 1;
if (from < to && to < from + count) {
direction = -1;
from = from + count - 1;
to = to + count - 1;
for (var i = 0; i < count; ++i, from += direction, to += direction) {
if (from in array)
array[to] = array[from];
else
delete array[to];
return array;
(function (syncIterator, nextMethod)
"use strict";
if (!@isObject(syncIterator))
@throwTypeError('Only objects can be wrapped by async-from-sync wrapper');
return new @AsyncFromSyncIterator(syncIterator, nextMethod);
(function (func, string, tag, attribute, value)
"use strict";
if (@isUndefinedOrNull(string))
@throwTypeError(`${func} requires that |this| not be null or undefined`);
var S = @toString(string);
var p1 = "<" + tag;
if (attribute) {
var V = @toString(value);
var escapedV = V.@replaceUsingRegExp(/"/g, '&quot;');
p1 = p1 + " " + @toString(attribute) + '="' + escapedV + '"'
var p2 = p1 + ">"
var p3 = p2 + S;
var p4 = p3 + "</" + tag + ">";
return p4;
(function (promise)
"use strict";
@assert(@isPromise(promise));
var alreadyResolved = false;
var resolve = (0,  (resolution) => {
if (alreadyResolved)
return @undefined;
alreadyResolved = true;
return @resolvePromise(promise, resolution);
var reject = (0,  (reason) => {
if (alreadyResolved)
return @undefined;
alreadyResolved = true;
return @rejectPromise(promise, reason);
return { @resolve: resolve, @reject: reject };
(function (onFulfilled, onRejected)
"use strict";
var alreadyResolved = false;
var resolve = (0,  (resolution) => {
if (alreadyResolved)
return @undefined;
alreadyResolved = true;
@resolveWithoutPromise(resolution, onFulfilled, onRejected);
var reject = (0,  (reason) => {
if (alreadyResolved)
return @undefined;
alreadyResolved = true;
@rejectWithoutPromise(reason, onFulfilled, onRejected);
return { @resolve: resolve, @reject: reject };
(function (target, propertyKey)
if (!@isObject(target))
@throwTypeError("Reflect.deleteProperty requires the first argument be an object");
return delete target[propertyKey];
(function (key)
"use strict";
var entry = this.registry.@get(key);
if (!entry || !entry.evaluated)
return null;
var dependencies = entry.dependencies;
var length = dependencies.length;
var result = new @Array(length);
for (var i = 0; i < length; ++i)
result[i] = dependencies[i].key;
return result;
(function (generator, resumeValue, resumeMode)
"use strict";
if (resumeMode === @GeneratorResumeModeReturn && @isSuspendYieldState(generator)) {
var onFulfilled = function(result) { @doAsyncGeneratorBodyCall(generator, result, @GeneratorResumeModeReturn); };
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldSuspendReason, @AsyncGeneratorSuspendReasonAwait);
@awaitValue(generator, resumeValue, onFulfilled);
return;
var value = @undefined;
var state = @getAsyncGeneratorInternalField(generator, @generatorFieldState);
@putAsyncGeneratorInternalField(generator, @generatorFieldState, @AsyncGeneratorStateExecuting);
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldSuspendReason, @AsyncGeneratorSuspendReasonNone);
try {
value = @getAsyncGeneratorInternalField(generator, @generatorFieldNext).@call(@getAsyncGeneratorInternalField(generator, @generatorFieldThis), generator, state, resumeValue, resumeMode, @getAsyncGeneratorInternalField(generator, @generatorFieldFrame));
state = @getAsyncGeneratorInternalField(generator, @generatorFieldState);
if (state === @AsyncGeneratorStateExecuting) {
@putAsyncGeneratorInternalField(generator, @generatorFieldState, @AsyncGeneratorStateCompleted);
state = @AsyncGeneratorStateCompleted;
} catch (error) {
@putAsyncGeneratorInternalField(generator, @generatorFieldState, @AsyncGeneratorStateCompleted);
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldSuspendReason, @AsyncGeneratorSuspendReasonNone);
return @asyncGeneratorReject(generator, error);
var reason = @getAsyncGeneratorInternalField(generator, @asyncGeneratorFieldSuspendReason);
if (reason === @AsyncGeneratorSuspendReasonAwait) {
var onFulfilled = function(result) { @doAsyncGeneratorBodyCall(generator, result, @GeneratorResumeModeNormal); };
@awaitValue(generator, value, onFulfilled);
return;
if (reason === @AsyncGeneratorSuspendReasonYield)
return @asyncGeneratorYield(generator, value, resumeMode);
if (state === @AsyncGeneratorStateCompleted) {
@assert(@getAsyncGeneratorInternalField(generator, @generatorFieldState) == @AsyncGeneratorStateCompleted);
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldSuspendReason, @AsyncGeneratorSuspendReasonNone);
return @asyncGeneratorResolve(generator, value, true);
(function (key)
"use strict";
var entry = this.registry.@get(key);
if (entry)
return entry;
entry = @newRegistryEntry(key);
this.registry.@set(key, entry);
return entry;
(function (sourceText)
"use strict";
if (!@isShadowRealm(this))
@throwTypeError("`%ShadowRealm%.evaluate requires that |this| be a ShadowRealm instance");
if (typeof sourceText !== 'string')
@throwTypeError("`%ShadowRealm%.evaluate requires that the |sourceText| argument be a string");
var result = @evalInRealm(this, sourceText)
return @wrap(true, this, result);
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.every requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.every callback must be a function");
var thisArg = @argument(1);
for (var i = 0; i < length; i++) {
if (!(i in array))
continue;
if (!callback.@call(thisArg, array[i], i, array))
return false;
return true;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
var thisArg = @argument(1);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.every callback must be a function");
for (var i = 0; i < length; i++) {
if (!callback.@call(thisArg, this[i], i, this))
return false;
return true;
(function (value )
"use strict";
var array = @toObject(this, "Array.prototype.fill requires that |this| not be null or undefined");
var length = @toLength(array.length);
var relativeStart = @toIntegerOrInfinity(@argument(1));
var k = 0;
if (relativeStart < 0) {
k = length + relativeStart;
if (k < 0)
k = 0;
} else {
k = relativeStart;
if (k > length)
k = length;
var relativeEnd = length;
var end = @argument(2);
if (end !== @undefined)
relativeEnd = @toIntegerOrInfinity(end);
var final = 0;
if (relativeEnd < 0) {
final = length + relativeEnd;
if (final < 0)
final = 0;
} else {
final = relativeEnd;
if (final > length)
final = length;
for (; k < final; k++)
array[k] = value;
return array;
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.filter requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.filter callback must be a function");
var thisArg = @argument(1);
var result = @arraySpeciesCreate(array, 0);
var nextIndex = 0;
for (var i = 0; i < length; i++) {
if (!(i in array))
continue;
var current = array[i]
if (callback.@call(thisArg, current, i, array)) {
@putByValDirect(result, nextIndex, current);
++nextIndex;
return result;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.filter callback must be a function");
var thisArg = @argument(1);
var kept = [];
for (var i = 0; i < length; i++) {
var value = this[i];
if (callback.@call(thisArg, value, i, this))
@arrayPush(kept, value);
var length = kept.length;
var constructor = @typedArraySpeciesConstructor(this);
var result = new constructor(length);
if (@typedArrayLength(result) < length)
@throwTypeError("TypedArray.prototype.filter constructed typed array of insufficient length");
if (@typedArrayContentType(this) !== @typedArrayContentType(result))
@throwTypeError("TypedArray.prototype.filter constructed typed array of different content type from |this|");
for (var i = 0; i < length; i++)
result[i] = kept[i];
return result;
(function (onFinally)
"use strict";
if (!@isObject(this))
@throwTypeError("|this| is not an object");
var constructor = @speciesConstructor(this, @Promise);
@assert(@isConstructor(constructor));
var thenFinally;
var catchFinally;
if (!@isCallable(onFinally)) {
thenFinally = onFinally;
catchFinally = onFinally;
} else {
thenFinally = (0,  (value) => {
@assert(@isCallable(onFinally));
var result = onFinally();
@assert(@isConstructor(constructor));
var promise = @promiseResolve(constructor, result);
return promise.then(() => value);
catchFinally = (0,  (reason) => {
@assert(@isCallable(onFinally));
var result = onFinally();
@assert(@isConstructor(constructor));
var promise = @promiseResolve(constructor, result);
return promise.then(() => { throw reason; });
return this.then(thenFinally, catchFinally);
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.find requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.find callback must be a function");
var thisArg = @argument(1);
for (var i = 0; i < length; i++) {
var kValue = array[i];
if (callback.@call(thisArg, kValue, i, array))
return kValue;
return @undefined;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
var thisArg = @argument(1);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.find callback must be a function");
for (var i = 0; i < length; i++) {
var elem = this[i];
if (callback.@call(thisArg, elem, i, this))
return elem;
return @undefined;
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.findIndex requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.findIndex callback must be a function");
var thisArg = @argument(1);
for (var i = 0; i < length; i++) {
if (callback.@call(thisArg, array[i], i, array))
return i;
return -1;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
var thisArg = @argument(1);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.findIndex callback must be a function");
for (var i = 0; i < length; i++) {
if (callback.@call(thisArg, this[i], i, this))
return i;
return -1;
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.findLast requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.findLast callback must be a function");
var thisArg = @argument(1);
for (var i = length - 1; i >= 0; i--) {
var element = array[i];
if (callback.@call(thisArg, element, i, array))
return element;
return @undefined;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
var thisArg = @argument(1);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.findLast callback must be a function");
for (var i = length - 1; i >= 0; i--) {
var element = this[i];
if (callback.@call(thisArg, element, i, this))
return element;
return @undefined;
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.findLastIndex requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.findLastIndex callback must be a function");
var thisArg = @argument(1);
for (var i = length - 1; i >= 0; i--) {
if (callback.@call(thisArg, array[i], i, array))
return i;
return -1;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
var thisArg = @argument(1);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.findLastIndex callback must be a function");
for (var i = length - 1; i >= 0; i--) {
if (callback.@call(thisArg, this[i], i, this))
return i;
return -1;
(function ()
"use strict";
return @createHTML("String.prototype.fixed", this, "tt", "", "");
(function ()
"use strict";
var array = @toObject(this, "Array.prototype.flat requires that |this| not be null or undefined");
var length = @toLength(array.length);
var depthNum = 1;
var depth = @argument(0);
if (depth !== @undefined)
depthNum = @toIntegerOrInfinity(depth);
var result = @arraySpeciesCreate(array, 0);
@flatIntoArray(result, array, length, 0, depthNum);
return result;
(function (target, source, sourceLength, targetIndex, depth)
"use strict";
for (var sourceIndex = 0; sourceIndex < sourceLength; ++sourceIndex) {
if (sourceIndex in source) {
var element = source[sourceIndex];
if (depth > 0 && @isArray(element))
targetIndex = @flatIntoArray(target, element, @toLength(element.length), targetIndex, depth - 1);
else {
if (targetIndex >= @MAX_SAFE_INTEGER)
@throwTypeError("flatten array exceeds 2**53 - 1");
@putByValDirect(target, targetIndex, element);
++targetIndex;
return targetIndex;
(function (target, source, sourceLength, targetIndex, callback, thisArg)
"use strict";
for (var sourceIndex = 0; sourceIndex < sourceLength; ++sourceIndex) {
if (sourceIndex in source) {
var element = callback.@call(thisArg, source[sourceIndex], sourceIndex, source);
if (@isArray(element))
targetIndex = @flatIntoArray(target, element, @toLength(element.length), targetIndex, 0);
else {
if (targetIndex >= @MAX_SAFE_INTEGER)
@throwTypeError("flatten array exceeds 2**53 - 1");
@putByValDirect(target, targetIndex, element);
++targetIndex;
return target;
(function (callback)
"use strict";
var array = @toObject(this, "Array.prototype.flatMap requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.flatMap callback must be a function");
var thisArg = @argument(1);
var result = @arraySpeciesCreate(array, 0);
return @flatIntoArrayWithCallback(result, array, length, 0, callback, thisArg);
(function (color)
"use strict";
return @createHTML("String.prototype.fontcolor", this, "font", "color", color);
(function (size)
"use strict";
return @createHTML("String.prototype.fontsize", this, "font", "size", size);
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.forEach requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.forEach callback must be a function");
var thisArg = @argument(1);
for (var i = 0; i < length; i++) {
if (i in array)
callback.@call(thisArg, array[i], i, array);
(function (callback )
"use strict";
if (!@isMap(this))
@throwTypeError("Map operation called on non-Map object");
if (!@isCallable(callback))
@throwTypeError("Map.prototype.forEach callback must be a function");
var thisArg = @argument(1);
var bucket = @mapBucketHead(this);
do {
bucket = @mapBucketNext(bucket);
if (bucket === @sentinelMapBucket)
break;
callback.@call(thisArg, @mapBucketValue(bucket), @mapBucketKey(bucket), this);
} while (true);
(function (callback )
"use strict";
if (!@isSet(this))
@throwTypeError("Set operation called on non-Set object");
if (!@isCallable(callback))
@throwTypeError("Set.prototype.forEach callback must be a function");
var thisArg = @argument(1);
var bucket = @setBucketHead(this);
do {
bucket = @setBucketNext(bucket);
if (bucket === @sentinelSetBucket)
break;
var key = @setBucketKey(bucket);
callback.@call(thisArg, key, key, this);
} while (true);
(function (callback )
"use strict";
var length = @typedArrayLength(this);
var thisArg = @argument(1);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.forEach callback must be a function");
for (var i = 0; i < length; i++)
callback.@call(thisArg, this[i], i, this);
(function (promise, value)
"use strict";
@assert(@isPromise(promise));
if ((@getPromiseInternalField(promise, @promiseFieldFlags) & @promiseStateMask) === @promiseStatePending)
@fulfillPromise(promise, value);
(function (items )
"use strict";
var mapFn = @argument(1);
var thisArg;
if (mapFn !== @undefined) {
if (!@isCallable(mapFn))
@throwTypeError("Array.from requires that the second argument, when provided, be a function");
thisArg = @argument(2);
var arrayLike = @toObject(items, "Array.from requires an array-like object - not null or undefined");
var iteratorMethod = items.@@iterator;
if (!@isUndefinedOrNull(iteratorMethod)) {
if (!@isCallable(iteratorMethod))
@throwTypeError("Array.from requires that the property of the first argument, items[Symbol.iterator], when exists, be a function");
var result = this !== @Array && @isConstructor(this) ? new this() : [];
var k = 0;
var iterator = iteratorMethod.@call(items);
var wrapper = {}
wrapper.@@iterator = function() { return iterator; };
for (var value of wrapper) {
if (k >= @MAX_SAFE_INTEGER)
@throwTypeError("Length exceeded the maximum array length");
if (mapFn)
@putByValDirect(result, k, thisArg === @undefined ? mapFn(value, k) : mapFn.@call(thisArg, value, k));
else
@putByValDirect(result, k, value);
k += 1;
result.length = k;
return result;
var arrayLikeLength = @toLength(arrayLike.length);
var result = this !== @Array && @isConstructor(this) ? new this(arrayLikeLength) : @newArrayWithSize(arrayLikeLength);
var k = 0;
while (k < arrayLikeLength) {
var value = arrayLike[k];
if (mapFn)
@putByValDirect(result, k, thisArg === @undefined ? mapFn(value, k) : mapFn.@call(thisArg, value, k));
else
@putByValDirect(result, k, value);
k += 1;
result.length = arrayLikeLength;
return result;
(function (items )
"use strict";
if (!@isConstructor(this))
@throwTypeError("TypedArray.from requires |this| to be a constructor");
var mapFn = @argument(1);
var thisArg;
if (mapFn !== @undefined) {
if (!@isCallable(mapFn))
@throwTypeError("TypedArray.from requires that the second argument, when provided, be a function");
thisArg = @argument(2);
var arrayLike = @toObject(items, "TypedArray.from requires an array-like object - not null or undefined");
var iteratorMethod = items.@@iterator;
if (!@isUndefinedOrNull(iteratorMethod)) {
if (!@isCallable(iteratorMethod))
@throwTypeError("TypedArray.from requires that the property of the first argument, items[Symbol.iterator], when exists, be a function");
var accumulator = [];
var count = 0;
var iterator = iteratorMethod.@call(items);
var wrapper = {};
wrapper.@@iterator = function() { return iterator; }
for (var value of wrapper) {
@putByValDirect(accumulator, count, value);
count++;
var result = new this(count);
if (@typedArrayLength(result) < count)
@throwTypeError("TypedArray.from constructed typed array of insufficient length");
for (var k = 0; k < count; k++) {
var value = accumulator[k];
if (mapFn)
result[k] = thisArg === @undefined ? mapFn(value, k) : mapFn.@call(thisArg, value, k);
else
result[k] = value;
return result;
var arrayLikeLength = @toLength(arrayLike.length);
var result = new this(arrayLikeLength);
if (@typedArrayLength(result) < arrayLikeLength)
@throwTypeError("TypedArray.from constructed typed array of insufficient length");
for (var k = 0; k < arrayLikeLength; k++) {
var value = arrayLike[k];
if (mapFn)
result[k] = thisArg === @undefined ? mapFn(value, k) : mapFn.@call(thisArg, value, k);
else
result[k] = value;
return result;
(function (iterable)
"use strict";
var object = {};
for (var entry of iterable) {
if (!@isObject(entry))
@throwTypeError("Object.fromEntries requires the first iterable parameter yields objects");
var key = entry[0];
var value = entry[1];
@putByValDirect(object, key, value);
return object;
(function (entry, source)
"use strict";
if (!entry.fetch)
entry.fetch = @newPromiseCapability(@InternalPromise).@promise;
this.forceFulfillPromise(entry.fetch, source);
@setStateToMax(entry, @ModuleInstantiate);
(function (promise, value)
"use strict";
@assert(@isPromise(promise));
@assert((@getPromiseInternalField(promise, @promiseFieldFlags) & @promiseStateMask) == @promiseStatePending);
var flags = @getPromiseInternalField(promise, @promiseFieldFlags);
var reactions = @getPromiseInternalField(promise, @promiseFieldReactionsOrResult);
@putPromiseInternalField(promise, @promiseFieldReactionsOrResult, value);
@putPromiseInternalField(promise, @promiseFieldFlags, flags | @promiseStateFulfilled);
@triggerPromiseReactions(@promiseStateFulfilled, reactions, value);
(function (promise, value)
@assert(@isPromise(promise));
var flags = @getPromiseInternalField(promise, @promiseFieldFlags);
if (flags & @promiseFlagsIsFirstResolvingFunctionCalled)
return;
@putPromiseInternalField(promise, @promiseFieldFlags, flags | @promiseFlagsIsFirstResolvingFunctionCalled);
return @fulfillPromise(promise, value);
(function (value, onFulfilled, onRejected)
"use strict";
@enqueueJob(@promiseReactionJobWithoutPromise, onFulfilled, value);
(function (generator, state, generatorThis, sentValue, value, resumeMode)
"use strict";
var done = state === @GeneratorStateCompleted;
if (!done) {
try {
@putGeneratorInternalField(generator, @generatorFieldState, @GeneratorStateExecuting);
value = @getGeneratorInternalField(generator, @generatorFieldNext).@call(generatorThis, generator, state, sentValue, resumeMode, @getGeneratorInternalField(generator, @generatorFieldFrame));
if (@getGeneratorInternalField(generator, @generatorFieldState) === @GeneratorStateExecuting) {
@putGeneratorInternalField(generator, @generatorFieldState, @GeneratorStateCompleted);
done = true;
} catch (error) {
@putGeneratorInternalField(generator, @generatorFieldState, @GeneratorStateCompleted);
throw error;
return { value, done };
(function (matched, str, position, captures, namedCaptures, replacement)
"use strict";
var matchLength = matched.length;
var stringLength = str.length;
var tailPos = position + matchLength;
var m = captures.length;
var replacementLength = replacement.length;
var result = "";
var lastStart = 0;
for (var start = 0; start = @stringIndexOfInternal.@call(replacement, "$", lastStart), start !== -1; lastStart = start) {
if (start - lastStart > 0)
result = result + @stringSubstringInternal.@call(replacement, lastStart, start);
start++;
if (start >= replacementLength)
result = result + "$";
else {
var ch = replacement[start];
switch (ch)
case "$":
result = result + "$";
start++;
break;
case "&":
result = result + matched;
start++;
break;
case "`":
if (position > 0)
result = result + @stringSubstringInternal.@call(str, 0, position);
start++;
break;
case "'":
if (tailPos < stringLength)
result = result + @stringSubstringInternal.@call(str, tailPos);
start++;
break;
case "<":
if (namedCaptures !== @undefined) {
var groupNameStartIndex = start + 1;
var groupNameEndIndex = @stringIndexOfInternal.@call(replacement, ">", groupNameStartIndex);
if (groupNameEndIndex !== -1) {
var groupName = @stringSubstringInternal.@call(replacement, groupNameStartIndex, groupNameEndIndex);
var capture = namedCaptures[groupName];
if (capture !== @undefined)
result = result + @toString(capture);
start = groupNameEndIndex + 1;
break;
result = result + "$<";
start++;
break;
default:
var chCode = ch.@charCodeAt(0);
if (chCode >= 0x30 && chCode <= 0x39) {
var originalStart = start - 1;
start++;
var n = chCode - 0x30;
if (n > m) {
result = result + @stringSubstringInternal.@call(replacement, originalStart, start);
break;
if (start < replacementLength) {
var nextChCode = replacement.@charCodeAt(start);
if (nextChCode >= 0x30 && nextChCode <= 0x39) {
var nn = 10 * n + nextChCode - 0x30;
if (nn <= m) {
n = nn;
start++;
if (n == 0) {
result = result + @stringSubstringInternal.@call(replacement, originalStart, start);
break;
var capture = captures[n - 1];
if (capture !== @undefined)
result = result + capture;
} else
result = result + "$";
break;
return result + @stringSubstringInternal.@call(replacement, lastStart);
(function (callback )
var array = @toObject(this, "Array.prototype.groupBy requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.groupBy callback must be a function");
var thisArg = @argument(1);
var groups = @Object.@create(null);
for (var i = 0; i < length; ++i) {
var value = array[i];
var key = @toPropertyKey(callback.@call(thisArg, value, i, array));
var group = groups[key];
if (!group) {
group = [];
@putByValDirect(groups, key, group);
@putByValDirect(group, group.length, value);
return groups;
(function (callback )
var array = @toObject(this, "Array.prototype.groupByToMap requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.groupByToMap callback must be a function");
var thisArg = @argument(1);
var groups = new @Map;
for (var i = 0; i < length; ++i) {
var value = array[i];
var key = callback.@call(thisArg, value, i, array);
var group = groups.@get(key);
if (!group) {
group = [];
groups.@set(key, group);
@putByValDirect(group, group.length, value);
return groups;
(function (target, propertyKey)
"use strict";
if (!@isObject(target))
@throwTypeError("Reflect.has requires the first argument be an object");
return propertyKey in target;
(function (regexp)
"use strict";
if (!@isRegExpObject(regexp))
return true;
var regexpExec = @tryGetById(regexp, "exec");
if (regexpExec !== @regExpBuiltinExec)
return true;
var regexpGlobal = @tryGetById(regexp, "global");
if (regexpGlobal !== @regExpProtoGlobalGetter)
return true;
var regexpUnicode = @tryGetById(regexp, "unicode");
if (regexpUnicode !== @regExpProtoUnicodeGetter)
return true;
return typeof regexp.lastIndex !== "number";
(function (regexp)
"use strict";
if (!@isRegExpObject(regexp))
return true;
var regexpExec = @tryGetById(regexp, "exec");
if (regexpExec !== @regExpBuiltinExec)
return true;
var regexpFlags = @tryGetById(regexp, "flags");
if (regexpFlags !== @regExpProtoFlagsGetter)
return true;
var regexpGlobal = @tryGetById(regexp, "global");
if (regexpGlobal !== @regExpProtoGlobalGetter)
return true;
var regexpIgnoreCase = @tryGetById(regexp, "ignoreCase");
if (regexpIgnoreCase !== @regExpProtoIgnoreCaseGetter)
return true;
var regexpMultiline = @tryGetById(regexp, "multiline");
if (regexpMultiline !== @regExpProtoMultilineGetter)
return true;
var regexpSticky = @tryGetById(regexp, "sticky");
if (regexpSticky !== @regExpProtoStickyGetter)
return true;
var regexpUnicode = @tryGetById(regexp, "unicode");
if (regexpUnicode !== @regExpProtoUnicodeGetter)
return true;
var regexpSource = @tryGetById(regexp, "source");
if (regexpSource !== @regExpProtoSourceGetter)
return true;
var regexpSymbolMatch = @tryGetByIdWithWellKnownSymbol(regexp, "match");
if (regexpSymbolMatch !== @regExpPrototypeSymbolMatch)
return true;
return typeof regexp.lastIndex !== "number";
(function (regexp, replacer)
"use strict";
if (!@isRegExpObject(regexp))
return true;
if (replacer !== @regExpPrototypeSymbolReplace)
return true;
var regexpExec = @tryGetById(regexp, "exec");
if (regexpExec !== @regExpBuiltinExec)
return true;
var regexpGlobal = @tryGetById(regexp, "global");
if (regexpGlobal !== @regExpProtoGlobalGetter)
return true;
var regexpUnicode = @tryGetById(regexp, "unicode");
if (regexpUnicode !== @regExpProtoUnicodeGetter)
return true;
return typeof regexp.lastIndex !== "number";
(function (specifier, exportName)
"use strict";
if (!@isShadowRealm(this))
@throwTypeError("`%ShadowRealm%.importValue requires that |this| be a ShadowRealm instance");
var exportNameString = @toString(exportName);
var specifierString = @toString(specifier);
var lookupBinding = (module) => {
var lookup = module[exportNameString]
if (lookup === @undefined)
@throwTypeError("%ShadowRealm%.importValue requires |exportName| to exist in the |specifier|");
return @wrap(true, this, lookup);
var crossRealmThrow = (error) => {
@throwTypeError(@toString(error));
return @importInRealm(this, specifierString).@then(lookupBinding, crossRealmThrow);
(function (searchElement )
"use strict";
var array = @toObject(this, "Array.prototype.includes requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (length === 0)
return false;
var fromIndex = 0;
var from = @argument(1);
if (from !== @undefined)
fromIndex = @toIntegerOrInfinity(from);
var index;
if (fromIndex >= 0)
index = fromIndex;
else
index = length + fromIndex;
if (index < 0)
index = 0;
var currentElement;
for (; index < length; ++index) {
currentElement = array[index];
if (searchElement === currentElement || (searchElement !== searchElement && currentElement !== currentElement))
return true;
return false;
(function (source) {
"use strict";
var importObject = @argument(1);
return @Promise.@resolve(source).@then((source) => {
return @webAssemblyInstantiateStreamingInternal(source, importObject);
(function (array)
"use strict";
var constructor = @InternalPromise;
var promise = @createPromise(constructor,  true);
var reject = (reason) => {
return @rejectPromiseWithFirstResolvingFunctionCallCheck(promise, reason);
var values = [];
var index = 0;
var remainingElementsCount = 0;
function newResolveElement(index)
var alreadyCalled = false;
return function (argument)
if (alreadyCalled)
return @undefined;
alreadyCalled = true;
@putByValDirect(values, index, argument);
--remainingElementsCount;
if (remainingElementsCount === 0)
return @fulfillPromiseWithFirstResolvingFunctionCallCheck(promise, values);
return @undefined;
try {
if (array.length === 0)
@fulfillPromiseWithFirstResolvingFunctionCallCheck(promise, values);
else {
for (var index = 0, length = array.length; index < length; ++index) {
var value = array[index];
@putByValDirect(values, index, @undefined);
++remainingElementsCount;
@resolveWithoutPromise(value, newResolveElement(index), reject);
} catch (error) {
reject(error);
return promise;
(function (array)
"use strict";
if (@isJSArray(array) || @isDerivedArray(array))
return true;
if (!@isProxyObject(array))
return false;
return @isArraySlow(array);
(function (generator)
"use strict";
var state = @getAsyncGeneratorInternalField(generator, @generatorFieldState);
var reason = @getAsyncGeneratorInternalField(generator, @asyncGeneratorFieldSuspendReason);
return (state > 0 && reason === @AsyncGeneratorSuspendReasonNone)
|| state === @AsyncGeneratorStateExecuting
|| reason === @AsyncGeneratorSuspendReasonAwait;
(function (value)
"use strict";
var numberValue = @toNumber(value);
if (numberValue !== numberValue)
return false;
return numberValue !== @Infinity && numberValue !== -@Infinity;
(function (value)
"use strict";
if (typeof value !== "number")
return false;
if (value !== value)
return false;
return value !== @Infinity && value !== -@Infinity;
(function (value)
"use strict";
var numberValue = @toNumber(value);
return numberValue !== numberValue;
(function (value)
"use strict";
return value !== value;
(function (generator)
"use strict";
var state = @getAsyncGeneratorInternalField(generator, @generatorFieldState);
return (state > 0 && @getAsyncGeneratorInternalField(generator, @asyncGeneratorFieldSuspendReason) === @AsyncGeneratorSuspendReasonYield)
|| state === @AsyncGeneratorStateSuspendedYield;
(function ()
"use strict";
return @createHTML("String.prototype.italics", this, "i", "", "");
(function (entry, fetcher)
"use strict";
if (!entry.linkSucceeded)
throw entry.linkError;
if (entry.state === @ModuleReady)
return;
@setStateToMax(entry, @ModuleReady);
try {
var hasAsyncDependency = false;
var dependencies = entry.dependencies;
for (var i = 0, length = dependencies.length; i < length; ++i) {
var dependency = dependencies[i];
this.link(dependency, fetcher);
hasAsyncDependency ||= dependency.isAsync;
entry.isAsync = this.moduleDeclarationInstantiation(entry.module, fetcher) || hasAsyncDependency;
} catch (error) {
entry.linkSucceeded = false;
entry.linkError = error;
throw error;
(function (url)
"use strict";
return @createHTML("String.prototype.link", this, "a", "href", url)
(function (key, fetcher)
"use strict";
var entry = this.ensureRegistered(key);
if (entry.state < @ModuleLink)
@throwTypeError("Requested module is not instantiated yet.");
this.link(entry, fetcher);
return this.moduleEvaluation(entry, fetcher);
(async function (moduleName, parameters, fetcher)
"use strict";
var key = await this.loadModule(moduleName, parameters, fetcher);
return await this.linkAndEvaluateModule(key, fetcher);
(async function (moduleName, parameters, fetcher)
"use strict";
var key = await this.resolve(moduleName, @undefined, fetcher);
var entry = await this.requestSatisfy(this.ensureRegistered(key), parameters, fetcher, new @Set);
return entry.key;
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.map requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.map callback must be a function");
var thisArg = @argument(1);
var result = @arraySpeciesCreate(array, length);
for (var i = 0; i < length; i++) {
if (!(i in array))
continue;
var mappedValue = callback.@call(thisArg, array[i], i, array);
@putByValDirect(result, i, mappedValue);
return result;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.map callback must be a function");
var thisArg = @argument(1);
var constructor = @typedArraySpeciesConstructor(this);
var result = new constructor(length);
if (@typedArrayLength(result) < length)
@throwTypeError("TypedArray.prototype.map constructed typed array of insufficient length");
if (@typedArrayContentType(this) !== @typedArrayContentType(result))
@throwTypeError("TypedArray.prototype.map constructed typed array of different content type from |this|");
for (var i = 0; i < length; i++) {
var mappedValue = callback.@call(thisArg, this[i], i, this);
result[i] = mappedValue;
return result;
(function (bucket, kind)
"use strict";
var value;
bucket = @mapBucketNext(bucket);
@putMapIteratorInternalField(this, @mapIteratorFieldMapBucket, bucket);
var done = bucket === @sentinelMapBucket;
if (!done) {
var key = @mapBucketKey(bucket);
value = @mapBucketValue(bucket);
if (kind === @iterationKindEntries)
value = [ key, value ]
else if (kind === @iterationKindKey)
value = key;
return { value, done };
(function (strArg)
"use strict";
if (!@isObject(this))
@throwTypeError("RegExp.prototype.@@match requires that |this| be an Object");
var str = @toString(strArg);
if (!@hasObservableSideEffectsForRegExpMatch(this))
return @regExpMatchFast.@call(this, str);
return @matchSlow(this, str);
(function (regexp)
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.match requires that |this| not be null or undefined");
if (!@isUndefinedOrNull(regexp)) {
var matcher = regexp.@@match;
if (!@isUndefinedOrNull(matcher))
return matcher.@call(regexp, this);
var thisString = @toString(this);
var createdRegExp = @regExpCreate(regexp, @undefined);
return createdRegExp.@@match(thisString);
(function (strArg)
"use strict";
var regExp = this;
if (!@isObject(regExp))
@throwTypeError("RegExp.prototype.@@matchAll requires |this| to be an Object");
var string = @toString(strArg);
var Matcher = @speciesConstructor(regExp, @RegExp);
var flags = @toString(regExp.flags);
var matcher = new Matcher(regExp, flags);
matcher.lastIndex = @toLength(regExp.lastIndex);
var global = @stringIncludesInternal.@call(flags, "g");
var fullUnicode = @stringIncludesInternal.@call(flags, "u");
return new @RegExpStringIterator(matcher, string, global, fullUnicode);
(function (arg)
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.matchAll requires |this| not to be null nor undefined");
if (!@isUndefinedOrNull(arg)) {
if (@isRegExp(arg) && !@stringIncludesInternal.@call(@toString(arg.flags), "g"))
@throwTypeError("String.prototype.matchAll argument must not be a non-global regular expression");
var matcher = arg.@@matchAll;
if (!@isUndefinedOrNull(matcher))
return matcher.@call(arg, this);
var string = @toString(this);
var regExp = @regExpCreate(arg, "g");
return regExp.@@matchAll(string);
(function (regexp, str)
"use strict";
if (!regexp.global)
return @regExpExec(regexp, str);
var unicode = regexp.unicode;
regexp.lastIndex = 0;
var resultList = [];
var maximumReasonableMatchSize = 100000000;
while (true) {
var result = @regExpExec(regexp, str);
if (result === null) {
if (resultList.length === 0)
return null;
return resultList;
if (resultList.length > maximumReasonableMatchSize)
@throwOutOfMemoryError();
var resultString = @toString(result[0]);
if (!resultString.length)
regexp.lastIndex = @advanceStringIndex(str, regexp.lastIndex, unicode);
@arrayPush(resultList, resultString);
(function (a, b)
"use strict";
return (a < b) ? b : a;
(function (maybeNegativeZero, positive)
"use strict";
return (maybeNegativeZero < positive) ? maybeNegativeZero : positive;
(function (entry, fetcher)
"use strict";
if (entry.evaluated)
return;
entry.evaluated = true;
var dependencies = entry.dependencies;
if (!entry.isAsync) {
for (var i = 0, length = dependencies.length; i < length; ++i) {
var dependency = dependencies[i];
@assert(!dependency.isAsync);
this.moduleEvaluation(dependency, fetcher);
this.evaluate(entry.key, entry.module, fetcher);
} else
return this.asyncModuleEvaluation(entry, fetcher, dependencies);
(function (error)
"use strict";
var promise = @newPromise();
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, error);
@putPromiseInternalField(promise, @promiseFieldFlags, @getPromiseInternalField(promise, @promiseFieldFlags) | @promiseFlagsIsHandled);
return promise;
(function (constructor)
"use strict";
if (constructor === @Promise) {
var promise = @newPromise();
var capturedPromise = promise;
function @resolve(resolution) {
return @resolvePromiseWithFirstResolvingFunctionCallCheck(capturedPromise, resolution);
function @reject(reason) {
return @rejectPromiseWithFirstResolvingFunctionCallCheck(capturedPromise, reason);
return { @resolve, @reject, @promise: promise };
return @newPromiseCapabilitySlow(constructor);
(function (constructor)
var promiseCapability = {
@resolve: @undefined,
@reject: @undefined,
@promise: @undefined,
var promise = new constructor((resolve, reject) => {
if (promiseCapability.@resolve !== @undefined)
@throwTypeError("resolve function is already set");
if (promiseCapability.@reject !== @undefined)
@throwTypeError("reject function is already set");
promiseCapability.@resolve = resolve;
promiseCapability.@reject = reject;
if (!@isCallable(promiseCapability.@resolve))
@throwTypeError("executor did not take a resolve function");
if (!@isCallable(promiseCapability.@reject))
@throwTypeError("executor did not take a reject function");
promiseCapability.@promise = promise;
return promiseCapability;
(function (key)
"use strict";
return {
key: key,
state: @ModuleFetch,
fetch: @undefined,
instantiate: @undefined,
satisfy: @undefined,
dependencies: [],
module: @undefined,
linkError: @undefined,
linkSucceeded: true,
evaluated: false,
then: @undefined,
isAsync: false,
(function ()
"use strict";
if (!@isArrayIterator(this))
@throwTypeError("%ArrayIteratorPrototype%.next requires that |this| be an Array Iterator instance");
var array = @getArrayIteratorInternalField(this, @arrayIteratorFieldIteratedObject);
if (@isTypedArrayView(array) && @isDetached(array))
@throwTypeError("Underlying ArrayBuffer has been detached from the view");
var kind = @getArrayIteratorInternalField(this, @arrayIteratorFieldKind);
return @arrayIteratorNextHelper.@call(this, array, kind);
(function (value)
"use strict";
var promise = @newPromise();
if (!@isObject(this) || !@isObject(@getByIdDirectPrivate(this, "syncIterator"))) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, @makeTypeError('Iterator is not an object.'));
return promise;
var syncIterator = @getByIdDirectPrivate(this, "syncIterator");
var nextMethod = @getByIdDirectPrivate(this, "nextMethod");
try {
var nextResult = @argumentCount() === 0 ? nextMethod.@call(syncIterator) : nextMethod.@call(syncIterator, value);
var nextDone = !!nextResult.done;
var nextValue = nextResult.value;
@resolveWithoutPromise(nextValue,
function (result) { @resolvePromiseWithFirstResolvingFunctionCallCheck(promise, { value: result, done: nextDone }); },
function (error) { @rejectPromiseWithFirstResolvingFunctionCallCheck(promise, error); });
} catch (e) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, e);
return promise;
(function (value)
"use strict";
return @asyncGeneratorEnqueue(this, value, @GeneratorResumeModeNormal);
(function (value)
"use strict";
if (!@isGenerator(this))
@throwTypeError("|this| should be a generator");
var state = @getGeneratorInternalField(this, @generatorFieldState);
if (state === @GeneratorStateExecuting)
@throwTypeError("Generator is executing");
return @generatorResume(this, state, @getGeneratorInternalField(this, @generatorFieldThis), value, @undefined, @GeneratorResumeModeNormal);
(function ()
"use strict";
if (!@isMapIterator(this))
@throwTypeError("%MapIteratorPrototype%.next requires that |this| be an Map Iterator instance");
var bucket = @getMapIteratorInternalField(this, @mapIteratorFieldMapBucket);
var kind = @getMapIteratorInternalField(this, @mapIteratorFieldKind);
return @mapIteratorNext.@call(this, bucket, kind);
(function ()
"use strict";
if (!@isObject(this))
@throwTypeError("%RegExpStringIteratorPrototype%.next requires |this| to be an Object");
var done = @getByIdDirectPrivate(this, "regExpStringIteratorDone");
if (done === @undefined)
@throwTypeError("%RegExpStringIteratorPrototype%.next requires |this| to be an RegExp String Iterator instance");
if (done)
return { value: @undefined, done: true };
var regExp = @getByIdDirectPrivate(this, "regExpStringIteratorRegExp");
var string = @getByIdDirectPrivate(this, "regExpStringIteratorString");
var global = @getByIdDirectPrivate(this, "regExpStringIteratorGlobal");
var fullUnicode = @getByIdDirectPrivate(this, "regExpStringIteratorUnicode");
var match = @regExpExec(regExp, string);
if (match === null) {
@putByIdDirectPrivate(this, "regExpStringIteratorDone", true);
return { value: @undefined, done: true };
if (global) {
var matchStr = @toString(match[0]);
if (matchStr === "") {
var thisIndex = @toLength(regExp.lastIndex);
regExp.lastIndex = @advanceStringIndex(string, thisIndex, fullUnicode);
} else
@putByIdDirectPrivate(this, "regExpStringIteratorDone", true);
return { value: match, done: false };
(function ()
"use strict";
if (!@isSetIterator(this))
@throwTypeError("%SetIteratorPrototype%.next requires that |this| be a Set Iterator instance");
var bucket = @getSetIteratorInternalField(this, @setIteratorFieldSetBucket);
var kind = @getSetIteratorInternalField(this, @setIteratorFieldKind);
return @setIteratorNext.@call(this, bucket, kind);
(function ()
"use strict";
if (!@isStringIterator(this))
@throwTypeError("%StringIteratorPrototype%.next requires that |this| be a String Iterator instance");
var done = true;
var value = @undefined;
var position = @getStringIteratorInternalField(this, @stringIteratorFieldIndex);
if (position !== -1) {
var string = @getStringIteratorInternalField(this, @stringIteratorFieldIteratedString);
var length = string.length >>> 0;
if (position >= length)
@putStringIteratorInternalField(this, @stringIteratorFieldIndex, -1);
else {
done = false;
var first = string.@charCodeAt(position);
if (first < 0xD800 || first > 0xDBFF || position + 1 === length)
value = string[position];
else {
var second = string.@charCodeAt(position + 1);
if (second < 0xDC00 || second > 0xDFFF)
value = string[position];
else
value = string[position] + string[position + 1];
@putStringIteratorInternalField(this, @stringIteratorFieldIndex, position + value.length);
return { value, done };
(function ()
"use strict";
var length = arguments.length;
var array = this !== @Array && @isConstructor(this) ? new this(length) : @newArrayWithSize(length);
for (var k = 0; k < length; ++k)
@putByValDirect(array, k, arguments[k]);
array.length = length;
return array;
(function ()
"use strict";
var len = arguments.length;
if (!@isConstructor(this))
@throwTypeError("TypedArray.of requires |this| to be a constructor");
var result = new this(len);
if (@typedArrayLength(result) < len)
@throwTypeError("TypedArray.of constructed typed array of insufficient length");
for (var i = 0; i < len; i++)
result[i] = arguments[i];
return result;
(function (maxLength)
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.padEnd requires that |this| not be null or undefined");
var string = @toString(this);
maxLength = @toLength(maxLength);
var stringLength = string.length;
if (maxLength <= stringLength)
return string;
var filler;
var fillString = @argument(1);
if (fillString === @undefined)
filler = " ";
else {
filler = @toString(fillString);
if (filler === "")
return string;
if (maxLength > @MAX_STRING_LENGTH)
@throwOutOfMemoryError();
var fillLength = maxLength - stringLength;
var truncatedStringFiller;
if (filler.length === 1)
truncatedStringFiller = @repeatCharacter(filler, fillLength);
else
truncatedStringFiller = @repeatCharactersSlowPath(filler, fillLength);
return string + truncatedStringFiller;
(function (maxLength)
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.padStart requires that |this| not be null or undefined");
var string = @toString(this);
maxLength = @toLength(maxLength);
var stringLength = string.length;
if (maxLength <= stringLength)
return string;
var filler;
var fillString = @argument(1);
if (fillString === @undefined)
filler = " ";
else {
filler = @toString(fillString);
if (filler === "")
return string;
if (maxLength > @MAX_STRING_LENGTH)
@throwOutOfMemoryError();
var fillLength = maxLength - stringLength;
var truncatedStringFiller;
if (filler.length === 1)
truncatedStringFiller = @repeatCharacter(filler, fillLength);
else
truncatedStringFiller = @repeatCharactersSlowPath(filler, fillLength);
return truncatedStringFiller + string;
(function (iterable)
"use strict";
var result = [];
if (@isUndefinedOrNull(iterable))
@throwTypeError('Spread syntax requires ...iterable not be null or undefined');
var iteratorMethod = iterable.@@iterator;
if (!@isCallable(iteratorMethod))
@throwTypeError('Spread syntax requires ...iterable[Symbol.iterator] to be a function');
var iterator = iteratorMethod.@call(iterable);
var next = iterator.next;
var item;
var index = 0;
while (true) {
item = next.@call(iterator);
if (!@isObject(item))
@throwTypeError("Iterator result interface is not an object");
if (item.done)
return result;
@putByValDirect(result, index++, item.value);
(function (promise, onFulfilled, onRejected, promiseOrCapability)
"use strict";
if (!@isCallable(onFulfilled))
onFulfilled = @promiseEmptyOnFulfilled;
if (!@isCallable(onRejected))
onRejected = @promiseEmptyOnRejected;
var reactionsOrResult = @getPromiseInternalField(promise, @promiseFieldReactionsOrResult);
var flags = @getPromiseInternalField(promise, @promiseFieldFlags);
var state = flags & @promiseStateMask;
if (state === @promiseStatePending)
@pushNewPromiseReaction(promise, reactionsOrResult, promiseOrCapability, onFulfilled, onRejected);
else {
var handler;
if (state === @promiseStateRejected) {
handler = onRejected;
if (!(flags & @promiseFlagsIsHandled))
@hostPromiseRejectionTracker(promise, @promiseRejectionHandle);
} else
handler = onFulfilled;
@enqueueJob(@promiseReactionJob, state, promiseOrCapability, handler, reactionsOrResult);
@putPromiseInternalField(promise, @promiseFieldFlags, @getPromiseInternalField(promise, @promiseFieldFlags) | @promiseFlagsIsHandled);
(function (argument)
"use strict";
return argument;
(function (argument)
"use strict";
throw argument;
(function (state, promiseOrCapability, handler, argument)
"use strict";
if (@isUndefinedOrNull(handler)) {
try {
@assert(@isPromise(promiseOrCapability));
if (state === @promiseStateFulfilled)
@resolvePromise(promiseOrCapability, argument);
else
@rejectPromise(promiseOrCapability, argument);
} catch {
return;
if (!promiseOrCapability) {
@promiseReactionJobWithoutPromise(handler, argument);
return;
var result;
try {
result = handler(argument);
} catch (error) {
if (@isPromise(promiseOrCapability)) {
@rejectPromise(promiseOrCapability, error);
return;
promiseOrCapability.@reject.@call(@undefined, error);
return;
if (@isPromise(promiseOrCapability)) {
@resolvePromise(promiseOrCapability, result);
return;
promiseOrCapability.@resolve.@call(@undefined, result);
(function (handler, argument)
"use strict";
try {
handler(argument);
} catch {
(function (constructor, reason)
@assert(constructor !== @Promise);
var promiseCapability = @newPromiseCapabilitySlow(constructor);
promiseCapability.@reject.@call(@undefined, reason);
return promiseCapability.@promise;
(function (constructor, value)
if (@isPromise(value) && value.constructor === constructor)
return value;
if (constructor === @Promise) {
var promise = @newPromise();
@resolvePromiseWithFirstResolvingFunctionCallCheck(promise, value);
return promise;
return @promiseResolveSlow(constructor, value);
(function (constructor, value)
@assert(constructor !== @Promise);
var promiseCapability = @newPromiseCapabilitySlow(constructor);
promiseCapability.@resolve.@call(@undefined, value);
return promiseCapability.@promise;
(function (thenable, then, resolvingFunctions)
"use strict";
try {
return then.@call(thenable, resolvingFunctions.@resolve, resolvingFunctions.@reject);
} catch (error) {
return resolvingFunctions.@reject.@call(@undefined, error);
(function (thenable, promiseToResolve)
"use strict";
@assert(@isPromise(thenable));
@assert(@isPromise(promiseToResolve));
var constructor = @speciesConstructor(thenable, @Promise);
if (constructor !== @Promise && constructor !== @InternalPromise) {
@promiseResolveThenableJobWithDerivedPromise(thenable, constructor, @createResolvingFunctions(promiseToResolve));
return;
var flags = @getPromiseInternalField(thenable, @promiseFieldFlags);
var state = flags & @promiseStateMask;
var reactionsOrResult = @getPromiseInternalField(thenable, @promiseFieldReactionsOrResult);
if (state === @promiseStatePending)
@pushNewPromiseReaction(thenable, reactionsOrResult, promiseToResolve, @undefined, @undefined);
else {
if (state === @promiseStateRejected && !(flags & @promiseFlagsIsHandled))
@hostPromiseRejectionTracker(thenable, @promiseRejectionHandle);
@enqueueJob(@promiseReactionJob, state, promiseToResolve, @undefined, reactionsOrResult);
@putPromiseInternalField(thenable, @promiseFieldFlags, @getPromiseInternalField(thenable, @promiseFieldFlags) | @promiseFlagsIsHandled);
(function (thenable, constructor, resolvingFunctions)
"use strict";
try {
var promiseOrCapability = @newPromiseCapabilitySlow(constructor);
@performPromiseThen(thenable, resolvingFunctions.@resolve, resolvingFunctions.@reject, promiseOrCapability);
return promiseOrCapability.@promise;
} catch (error) {
return resolvingFunctions.@reject.@call(@undefined, error);
(function (thenable, onFulfilled, onRejected)
"use strict";
@assert(@isPromise(thenable));
var constructor = @speciesConstructor(thenable, @Promise);
if (constructor !== @Promise && constructor !== @InternalPromise) {
@promiseResolveThenableJobWithDerivedPromise(thenable, constructor, @createResolvingFunctionsWithoutPromise(onFulfilled, onRejected));
return;
var flags = @getPromiseInternalField(thenable, @promiseFieldFlags);
var state = flags & @promiseStateMask;
var reactionsOrResult = @getPromiseInternalField(thenable, @promiseFieldReactionsOrResult);
if (state === @promiseStatePending)
@pushNewPromiseReaction(thenable, reactionsOrResult, @undefined, onFulfilled, onRejected);
else {
if (state === @promiseStateRejected) {
if (!(flags & @promiseFlagsIsHandled))
@hostPromiseRejectionTracker(thenable, @promiseRejectionHandle);
@rejectWithoutPromise(reactionsOrResult, onFulfilled, onRejected);
} else
@fulfillWithoutPromise(reactionsOrResult, onFulfilled, onRejected);
@putPromiseInternalField(thenable, @promiseFieldFlags, @getPromiseInternalField(thenable, @promiseFieldFlags) | @promiseFlagsIsHandled);
(function (key, value)
"use strict";
var entry = this.ensureRegistered(key);
if (entry.state > @ModuleFetch)
@throwTypeError("Requested module is already fetched.");
this.fulfillFetch(entry, value);
(function (thenable, existingReactions, promiseOrCapability, onFulfilled, onRejected)
"use strict";
if (!existingReactions) {
existingReactions = {
@promiseOrCapability: promiseOrCapability,
@onFulfilled: onFulfilled,
@onRejected: onRejected,
@outOfLineReactionCounts: 0,
@putPromiseInternalField(thenable, @promiseFieldReactionsOrResult, existingReactions);
} else {
var outOfLineReactionCounts = existingReactions.@outOfLineReactionCounts;
@putByValDirect(existingReactions, outOfLineReactionCounts++, promiseOrCapability);
@putByValDirect(existingReactions, outOfLineReactionCounts++, onFulfilled);
@putByValDirect(existingReactions, outOfLineReactionCounts++, onRejected);
existingReactions.@outOfLineReactionCounts = outOfLineReactionCounts;
(function (iterable)
"use strict";
if (!@isObject(this))
@throwTypeError("|this| is not an object");
var promiseCapability = @newPromiseCapability(this);
try {
var promiseResolve = this.resolve;
if (!@isCallable(promiseResolve))
@throwTypeError("Promise resolve is not a function");
for (var value of iterable) {
var nextPromise = promiseResolve.@call(this, value);
nextPromise.then(promiseCapability.@resolve, promiseCapability.@reject);
} catch (error) {
promiseCapability.@reject.@call(@undefined, error);
return promiseCapability.@promise;
(function (template)
"use strict";
var cookedSegments = @toObject(template, "String.raw requires template not be null or undefined");
var rawSegments = @toObject(cookedSegments.raw, "String.raw requires template.raw not be null or undefined");
var numberOfSubstitutions = arguments.length - 1;
var segmentCount = @toLength(rawSegments.length);
if (segmentCount <= 0)
return '';
var stringElements = '';
for (var i = 0; ; ++i) {
var segment = @toString(rawSegments[i]);
stringElements += segment;
if ((i + 1) === segmentCount)
return stringElements;
if (i < numberOfSubstitutions) {
var substitutionIndexInArguments = i + 1;
var next = @toString(arguments[substitutionIndexInArguments]);
stringElements += next;
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.reduce requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.reduce callback must be a function");
var argumentCount = @argumentCount();
if (length === 0 && argumentCount < 2)
@throwTypeError("reduce of empty array with no initial value");
var accumulator, k = 0;
if (argumentCount > 1)
accumulator = @argument(1);
else {
while (k < length && !(k in array))
k += 1;
if (k >= length)
@throwTypeError("reduce of empty array with no initial value");
accumulator = array[k++];
while (k < length) {
if (k in array)
accumulator = callback.@call(@undefined, accumulator, array[k], k, array);
k += 1;
return accumulator;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.reduce callback must be a function");
var argumentCount = @argumentCount();
if (length === 0 && argumentCount < 2)
@throwTypeError("TypedArray.prototype.reduce of empty array with no initial value");
var accumulator, k = 0;
if (argumentCount > 1)
accumulator = @argument(1);
else
accumulator = this[k++];
for (; k < length; k++)
accumulator = callback.@call(@undefined, accumulator, this[k], k, this);
return accumulator;
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.reduceRight requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.reduceRight callback must be a function");
var argumentCount = @argumentCount();
if (length === 0 && argumentCount < 2)
@throwTypeError("reduceRight of empty array with no initial value");
var accumulator, k = length - 1;
if (argumentCount > 1)
accumulator = @argument(1);
else {
while (k >= 0 && !(k in array))
k -= 1;
if (k < 0)
@throwTypeError("reduceRight of empty array with no initial value");
accumulator = array[k--];
while (k >= 0) {
if (k in array)
accumulator = callback.@call(@undefined, accumulator, array[k], k, array);
k -= 1;
return accumulator;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.reduceRight callback must be a function");
var argumentCount = @argumentCount();
if (length === 0 && argumentCount < 2)
@throwTypeError("TypedArray.prototype.reduceRight of empty array with no initial value");
var accumulator, k = length - 1;
if (argumentCount > 1)
accumulator = @argument(1);
else
accumulator = this[k--];
for (; k >= 0; k--)
accumulator = callback.@call(@undefined, accumulator, this[k], k, this);
return accumulator;
(function (regexp, str)
"use strict";
var exec = regexp.exec;
var builtinExec = @regExpBuiltinExec;
if (exec !== builtinExec && @isCallable(exec)) {
var result = exec.@call(regexp, str);
if (result !== null && !@isObject(result))
@throwTypeError("The result of a RegExp exec must be null or an object");
return result;
return builtinExec.@call(regexp, str);
(function (reason)
"use strict";
if (!@isObject(this))
@throwTypeError("|this| is not an object");
if (this === @Promise) {
var promise = @newPromise();
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, reason);
return promise;
return @promiseRejectSlow(this, reason);
(function (promise, reason)
"use strict";
@assert(@isPromise(promise));
@assert((@getPromiseInternalField(promise, @promiseFieldFlags) & @promiseStateMask) == @promiseStatePending);
var flags = @getPromiseInternalField(promise, @promiseFieldFlags);
var reactions = @getPromiseInternalField(promise, @promiseFieldReactionsOrResult);
@putPromiseInternalField(promise, @promiseFieldReactionsOrResult, reason);
@putPromiseInternalField(promise, @promiseFieldFlags, flags | @promiseStateRejected);
if (!(flags & @promiseFlagsIsHandled))
@hostPromiseRejectionTracker(promise, @promiseRejectionReject);
@triggerPromiseReactions(@promiseStateRejected, reactions, reason);
(function (promise, reason)
@assert(@isPromise(promise));
var flags = @getPromiseInternalField(promise, @promiseFieldFlags);
if (flags & @promiseFlagsIsFirstResolvingFunctionCalled)
return;
@putPromiseInternalField(promise, @promiseFieldFlags, flags | @promiseFlagsIsFirstResolvingFunctionCalled);
return @rejectPromise(promise, reason);
(function (reason, onFulfilled, onRejected)
"use strict";
@enqueueJob(@promiseReactionJobWithoutPromise, onRejected, reason);
(function (count)
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.repeat requires that |this| not be null or undefined");
var string = @toString(this);
count = @toIntegerOrInfinity(count);
if (count < 0 || count === @Infinity)
@throwRangeError("String.prototype.repeat argument must be greater than or equal to 0 and not be Infinity");
if (string.length === 1)
return @repeatCharacter(string, count);
return @repeatSlowPath(string, count);
(function (string, count)
"use strict";
var repeatCount = (count / string.length) | 0;
var remainingCharacters = count - repeatCount * string.length;
var result = "";
var operand = string;
while (true) {
if (repeatCount & 1)
result += operand;
repeatCount >>= 1;
if (!repeatCount)
break;
operand += operand;
if (remainingCharacters)
result += @stringSubstringInternal.@call(string, 0, remainingCharacters);
return result;
(function (string, count)
"use strict";
if (count === 0 || string.length === 0)
return "";
if (count === 1)
return string;
if (string.length * count > @MAX_STRING_LENGTH)
@throwOutOfMemoryError();
var result = "";
var operand = string;
while (true) {
if (count & 1)
result += operand;
count >>= 1;
if (!count)
return result;
operand += operand;
(function (strArg, replace)
"use strict";
if (!@isObject(this))
@throwTypeError("RegExp.prototype.@@replace requires that |this| be an Object");
var regexp = this;
var str = @toString(strArg);
var stringLength = str.length;
var functionalReplace = @isCallable(replace);
if (!functionalReplace)
replace = @toString(replace);
var global = regexp.global;
var unicode = false;
if (global) {
unicode = regexp.unicode;
regexp.lastIndex = 0;
var resultList = [];
var result;
var done = false;
while (!done) {
result = @regExpExec(regexp, str);
if (result === null)
done = true;
else {
@arrayPush(resultList, result);
if (!global)
done = true;
else {
var matchStr = @toString(result[0]);
if (!matchStr.length) {
var thisIndex = @toLength(regexp.lastIndex);
regexp.lastIndex = @advanceStringIndex(str, thisIndex, unicode);
var accumulatedResult = "";
var nextSourcePosition = 0;
for (var i = 0, resultListLength = resultList.length; i < resultListLength; ++i) {
var result = resultList[i];
var nCaptures = result.length - 1;
if (nCaptures < 0)
nCaptures = 0;
var matched = @toString(result[0]);
var matchLength = matched.length;
var position = @toIntegerOrInfinity(result.index);
position = (position > stringLength) ? stringLength : position;
position = (position < 0) ? 0 : position;
var captures = [];
for (var n = 1; n <= nCaptures; n++) {
var capN = result[n];
if (capN !== @undefined)
capN = @toString(capN);
@arrayPush(captures, capN);
var replacement;
var namedCaptures = result.groups;
if (functionalReplace) {
var replacerArgs = [ matched ];
for (var j = 0; j < captures.length; j++)
@arrayPush(replacerArgs, captures[j]);
@arrayPush(replacerArgs, position);
@arrayPush(replacerArgs, str);
if (namedCaptures !== @undefined)
@arrayPush(replacerArgs, namedCaptures);
var replValue = replace.@apply(@undefined, replacerArgs);
replacement = @toString(replValue);
} else {
if (namedCaptures !== @undefined)
namedCaptures = @toObject(namedCaptures, "RegExp.prototype[Symbol.replace] requires 'groups' property of a match not be null");
replacement = @getSubstitution(matched, str, position, captures, namedCaptures, replace);
if (position >= nextSourcePosition) {
accumulatedResult = accumulatedResult + @stringSubstringInternal.@call(str, nextSourcePosition, position) + replacement;
nextSourcePosition = position + matchLength;
if (nextSourcePosition >= stringLength)
return  accumulatedResult;
return accumulatedResult + @stringSubstringInternal.@call(str, nextSourcePosition);
(function (search, replace)
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.replace requires that |this| not be null or undefined");
if (!@isUndefinedOrNull(search)) {
var replacer = search.@@replace;
if (!@isUndefinedOrNull(replacer)) {
if (!@hasObservableSideEffectsForStringReplace(search, replacer))
return @toString(this).@replaceUsingRegExp(search, replace);
return replacer.@call(search, this, replace);
var thisString = @toString(this);
var searchString = @toString(search);
return thisString.@replaceUsingStringSearch(searchString, replace);
(function (search, replace)
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.replaceAll requires |this| not to be null nor undefined");
if (!@isUndefinedOrNull(search)) {
if (@isRegExp(search) && !@stringIncludesInternal.@call(@toString(search.flags), "g"))
@throwTypeError("String.prototype.replaceAll argument must not be a non-global regular expression");
var replacer = search.@@replace;
if (!@isUndefinedOrNull(replacer)) {
if (!@hasObservableSideEffectsForStringReplace(search, replacer))
return @toString(this).@replaceUsingRegExp(search, replace);
return replacer.@call(search, this, replace);
var thisString = @toString(this);
var searchString = @toString(search);
return thisString.@replaceAllUsingStringSearch(searchString, replace);
(function (entry, parameters, fetcher)
"use strict";
if (entry.fetch) {
var currentAttempt = entry.fetch;
if (entry.state !== @ModuleFetch)
return currentAttempt;
return currentAttempt.catch((error) => {
if (currentAttempt === entry.fetch)
entry.fetch = @undefined;
return this.requestFetch(entry, parameters, fetcher);
var fetchPromise = this.fetch(entry.key, parameters, fetcher).then((source) => {
@setStateToMax(entry, @ModuleInstantiate);
return source;
entry.fetch = fetchPromise;
return fetchPromise;
(async function (key, parameters, fetcher)
"use strict";
var entry = await this.requestSatisfy(this.ensureRegistered(key), parameters, fetcher, new @Set);
await this.linkAndEvaluateModule(entry.key, fetcher);
return this.getModuleNamespaceObject(entry.module);
(function (entry, parameters, fetcher)
"use strict";
if (entry.instantiate)
return entry.instantiate;
var instantiatePromise = (async () => {
var source = await this.requestFetch(entry, parameters, fetcher);
if (entry.instantiate)
return await entry.instantiate;
entry.instantiate = instantiatePromise;
var key = entry.key;
var moduleRecord = await this.parseModule(key, source);
var dependenciesMap = moduleRecord.dependenciesMap;
var requestedModules = this.requestedModules(moduleRecord);
var dependencies = @newArrayWithSize(requestedModules.length);
for (var i = 0, length = requestedModules.length; i < length; ++i) {
var depName = requestedModules[i];
var depKey = this.resolveSync(depName, key, fetcher);
var depEntry = this.ensureRegistered(depKey);
@putByValDirect(dependencies, i, depEntry);
dependenciesMap.@set(depName, depEntry);
entry.dependencies = dependencies;
entry.module = moduleRecord;
@setStateToMax(entry, @ModuleSatisfy);
return entry;
})();
return instantiatePromise;
(function (entry, parameters, fetcher, visited)
"use strict";
if (entry.satisfy)
return entry.satisfy;
visited.@add(entry);
var satisfyPromise = this.requestInstantiate(entry, parameters, fetcher).then((entry) => {
if (entry.satisfy)
return entry.satisfy;
var depLoads = @newArrayWithSize(entry.dependencies.length);
for (var i = 0, length = entry.dependencies.length; i < length; ++i) {
var depEntry = entry.dependencies[i];
var promise;
if (visited.@has(depEntry))
promise = this.requestInstantiate(depEntry, @undefined, fetcher);
else {
promise = this.requestSatisfy(depEntry, @undefined, fetcher, visited);
@putByValDirect(depLoads, i, promise);
return @InternalPromise.internalAll(depLoads).then((entries) => {
if (entry.satisfy)
return entry;
@setStateToMax(entry, @ModuleLink);
entry.satisfy = satisfyPromise;
return entry;
return satisfyPromise;
(function (value)
"use strict";
if (!@isObject(this))
@throwTypeError("|this| is not an object");
return @promiseResolve(this, value);
(function (promise, resolution)
"use strict";
@assert(@isPromise(promise));
if (resolution === promise)
return @rejectPromise(promise, @makeTypeError("Cannot resolve a promise with itself"));
if (!@isObject(resolution))
return @fulfillPromise(promise, resolution);
var then;
try {
then = resolution.then;
} catch (error) {
return @rejectPromise(promise, error);
if (@isPromise(resolution) && then === @defaultPromiseThen) {
@enqueueJob(@promiseResolveThenableJobFast, resolution, promise);
return;
if (!@isCallable(then))
return @fulfillPromise(promise, resolution);
@enqueueJob(@promiseResolveThenableJob, resolution, then, @createResolvingFunctions(promise));
(function (promise, value)
@assert(@isPromise(promise));
var flags = @getPromiseInternalField(promise, @promiseFieldFlags);
if (flags & @promiseFlagsIsFirstResolvingFunctionCalled)
return;
@putPromiseInternalField(promise, @promiseFieldFlags, flags | @promiseFlagsIsFirstResolvingFunctionCalled);
return @resolvePromise(promise, value);
(function (resolution, onFulfilled, onRejected)
"use strict";
if (!@isObject(resolution)) {
@fulfillWithoutPromise(resolution, onFulfilled, onRejected);
return;
var then;
try {
then = resolution.then;
} catch (error) {
@rejectWithoutPromise(error, onFulfilled, onRejected);
return;
if (@isPromise(resolution) && then === @defaultPromiseThen) {
@enqueueJob(@promiseResolveThenableJobWithoutPromiseFast, resolution, onFulfilled, onRejected);
return;
if (!@isCallable(then)) {
@fulfillWithoutPromise(resolution, onFulfilled, onRejected);
return;
@enqueueJob(@promiseResolveThenableJob, resolution, then, @createResolvingFunctionsWithoutPromise(onFulfilled, onRejected));
(function (value)
"use strict";
var promise = @newPromise();
if (!@isObject(this) || !@isObject(@getByIdDirectPrivate(this, "syncIterator"))) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, @makeTypeError('Iterator is not an object.'));
return promise;
var syncIterator = @getByIdDirectPrivate(this, "syncIterator");
var returnMethod;
try {
returnMethod = syncIterator.return;
} catch (e) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, e);
return promise;
if (@isUndefinedOrNull(returnMethod)) {
@resolvePromiseWithFirstResolvingFunctionCallCheck(promise, { value, done: true });
return promise;
try {
var returnResult = @argumentCount() === 0 ? returnMethod.@call(syncIterator) : returnMethod.@call(syncIterator, value);
if (!@isObject(returnResult)) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, @makeTypeError('Iterator result interface is not an object.'));
return promise;
var resultDone = !!returnResult.done;
var resultValue = returnResult.value;
@resolveWithoutPromise(resultValue,
function (result) { @resolvePromiseWithFirstResolvingFunctionCallCheck(promise, { value: result, done: resultDone }); },
function (error) { @rejectPromiseWithFirstResolvingFunctionCallCheck(promise, error); });
} catch (e) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, e);
return promise;
(function (value)
"use strict";
return @asyncGeneratorEnqueue(this, value, @GeneratorResumeModeReturn);
(function (value)
"use strict";
if (!@isGenerator(this))
@throwTypeError("|this| should be a generator");
var state = @getGeneratorInternalField(this, @generatorFieldState);
if (state === @GeneratorStateExecuting)
@throwTypeError("Generator is executing");
return @generatorResume(this, state, @getGeneratorInternalField(this, @generatorFieldThis), value, value, @GeneratorResumeModeReturn);
(function (strArg)
"use strict";
var regexp = this;
if (@isRegExpObject(regexp)
&& @tryGetById(regexp, "exec") === @regExpBuiltinExec
&& typeof regexp.lastIndex === "number")
return @regExpSearchFast.@call(regexp, strArg);
if (!@isObject(this))
@throwTypeError("RegExp.prototype.@@search requires that |this| be an Object");
var str = @toString(strArg)
var previousLastIndex = regexp.lastIndex;
if (!@sameValue(previousLastIndex, 0))
regexp.lastIndex = 0;
var result = @regExpExec(regexp, str);
if (!@sameValue(regexp.lastIndex, previousLastIndex))
regexp.lastIndex = previousLastIndex;
if (result === null)
return -1;
return result.index;
(function (regexp)
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.search requires that |this| not be null or undefined");
if (!@isUndefinedOrNull(regexp)) {
var searcher = regexp.@@search;
if (!@isUndefinedOrNull(searcher))
return searcher.@call(regexp, this);
var thisString = @toString(this);
var createdRegExp = @regExpCreate(regexp, @undefined);
return createdRegExp.@@search(thisString);
(function (bucket, kind)
"use strict";
var value;
bucket = @setBucketNext(bucket);
@putSetIteratorInternalField(this, @setIteratorFieldSetBucket, bucket);
var done = bucket === @sentinelSetBucket;
if (!done) {
value = @setBucketKey(bucket);
if (kind === @iterationKindEntries)
value = [ value, value ]
return { value, done };
(function (entry, newState)
"use strict";
if (entry.state < newState)
entry.state = newState;
(function ()
"use strict";
return @createHTML("String.prototype.small", this, "small", "", "");
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.some requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.some callback must be a function");
var thisArg = @argument(1);
for (var i = 0; i < length; i++) {
if (!(i in array))
continue;
if (callback.@call(thisArg, array[i], i, array))
return true;
return false;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
var thisArg = @argument(1);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.some callback must be a function");
for (var i = 0; i < length; i++) {
if (callback.@call(thisArg, this[i], i, this))
return true;
return false;
(function (comparator)
"use strict";
var isStringSort = false;
if (comparator === @undefined)
isStringSort = true;
else if (!@isCallable(comparator))
@throwTypeError("Array.prototype.sort requires the comparator argument to be a function or undefined");
var receiver = @toObject(this, "Array.prototype.sort requires that |this| not be null or undefined");
var receiverLength = @toLength(receiver.length);
if (receiverLength < 2)
return receiver;
var compacted = [ ];
var sorted = null;
var undefinedCount = @sortCompact(receiver, receiverLength, compacted, isStringSort);
if (isStringSort) {
sorted = @newArrayWithSize(compacted.length);
@sortBucketSort(sorted, 0, compacted, 0);
} else
sorted = @sortMergeSort(compacted, comparator);
@sortCommit(receiver, receiverLength, sorted, undefinedCount);
return receiver;
(function (comparator)
"use strict";
if (comparator !== @undefined && !@isCallable(comparator))
@throwTypeError("TypedArray.prototype.sort requires the comparator argument to be a function or undefined");
var length = @typedArrayLength(this);
if (length < 2)
return this;
if (comparator !== @undefined || @isSharedTypedArrayView(this)) {
if (comparator === @undefined)
comparator = @typedArrayDefaultComparator;
@typedArrayMergeSort(this, length, comparator);
} else
@typedArraySort(this);
return this;
(function (array, dst, bucket, depth)
"use strict";
if (bucket.length < 32 || depth > 32) {
var sorted = @sortMergeSort(bucket, @sortStringComparator);
for (var i = 0; i < sorted.length; ++i) {
@putByValDirect(array, dst, sorted[i].value);
++dst;
return dst;
var buckets = [ ];
@setPrototypeDirect.@call(buckets, null);
for (var i = 0; i < bucket.length; ++i) {
var entry = bucket[i];
var string = entry.string;
if (string.length == depth) {
@putByValDirect(array, dst, entry.value);
++dst;
continue;
var c = string.@charCodeAt(depth);
var cBucket = buckets[c];
if (cBucket)
@arrayPush(cBucket, entry);
else
@putByValDirect(buckets, c, [ entry ]);
for (var i = 0; i < buckets.length; ++i) {
if (!buckets[i])
continue;
dst = @sortBucketSort(array, dst, buckets[i], depth + 1);
return dst;
(function (receiver, receiverLength, sorted, undefinedCount)
"use strict";
@assert(@isJSArray(sorted));
var sortedLength = sorted.length;
@assert(sortedLength + undefinedCount <= receiverLength);
var i = 0;
if (@isJSArray(receiver) && sortedLength >= 64 && typeof sorted[0] !== "number") {
@appendMemcpy(receiver, sorted, 0);
i = sortedLength;
} else {
for (; i < sortedLength; ++i)
receiver[i] = sorted[i];
for (; i < sortedLength + undefinedCount; ++i)
receiver[i] = @undefined;
for (; i < receiverLength; ++i)
delete receiver[i];
(function (receiver, receiverLength, compacted, isStringSort)
"use strict";
var undefinedCount = 0;
var compactedIndex = 0;
for (var i = 0; i < receiverLength; ++i) {
if (i in receiver) {
var value = receiver[i];
if (value === @undefined)
++undefinedCount;
else {
@putByValDirect(compacted, compactedIndex,
isStringSort ? {string: @toString(value), value} : value);
++compactedIndex;
return undefinedCount;
(function (dst, src, srcIndex, srcEnd, width, comparator)
"use strict";
var left = srcIndex;
var leftEnd = @min(left + width, srcEnd);
var right = leftEnd;
var rightEnd = @min(right + width, srcEnd);
for (var dstIndex = left; dstIndex < rightEnd; ++dstIndex) {
if (right < rightEnd) {
if (left >= leftEnd) {
@putByValDirect(dst, dstIndex, src[right]);
++right;
continue;
var comparisonResult = comparator(src[right], src[left]);
if (comparisonResult === false || comparisonResult < 0) {
@putByValDirect(dst, dstIndex, src[right]);
++right;
continue;
@putByValDirect(dst, dstIndex, src[left]);
++left;
(function (array, comparator)
"use strict";
var valueCount = array.length;
var buffer = @newArrayWithSize(valueCount);
var dst = buffer;
var src = array;
for (var width = 1; width < valueCount; width *= 2) {
for (var srcIndex = 0; srcIndex < valueCount; srcIndex += 2 * width)
@sortMerge(dst, src, srcIndex, valueCount, width, comparator);
var tmp = src;
src = dst;
dst = tmp;
return src;
(function (a, b)
"use strict";
var aString = a.string;
var bString = b.string;
if (aString === bString)
return 0;
return aString > bString ? 1 : -1;
(function (obj, defaultConstructor)
"use strict";
var constructor = obj.constructor;
if (constructor === @undefined)
return defaultConstructor;
if (!@isObject(constructor))
@throwTypeError("|this|.constructor is not an Object or undefined");
constructor = constructor.@@species;
if (@isUndefinedOrNull(constructor))
return defaultConstructor;
if (@isConstructor(constructor))
return constructor;
@throwTypeError("|this|.constructor[Symbol.species] is not a constructor");
(function ()
"use strict";
return this;
(function (string, limit)
"use strict";
if (!@isObject(this))
@throwTypeError("RegExp.prototype.@@split requires that |this| be an Object");
var regexp = this;
var str = @toString(string);
var speciesConstructor = @speciesConstructor(regexp, @RegExp);
if (speciesConstructor === @RegExp && !@hasObservableSideEffectsForRegExpSplit(regexp))
return @regExpSplitFast.@call(regexp, str, limit);
var flags = @toString(regexp.flags);
var unicodeMatching = @stringIncludesInternal.@call(flags, "u");
var newFlags = @stringIncludesInternal.@call(flags, "y") ? flags : flags + "y";
var splitter = new speciesConstructor(regexp, newFlags);
if (!@hasObservableSideEffectsForRegExpSplit(splitter))
return @regExpSplitFast.@call(splitter, str, limit);
var result = [];
limit = (limit === @undefined) ? 0xffffffff : limit >>> 0;
if (!limit)
return result;
var size = str.length;
if (!size) {
var z = @regExpExec(splitter, str);
if (z !== null)
return result;
@putByValDirect(result, 0, str);
return result;
var position = 0;
var matchPosition = 0;
while (matchPosition < size) {
splitter.lastIndex = matchPosition;
var matches = @regExpExec(splitter, str);
if (matches === null)
matchPosition = @advanceStringIndex(str, matchPosition, unicodeMatching);
else {
var endPosition = @toLength(splitter.lastIndex);
endPosition = (endPosition <= size) ? endPosition : size;
if (endPosition === position)
matchPosition = @advanceStringIndex(str, matchPosition, unicodeMatching);
else {
var subStr = @stringSubstringInternal.@call(str, position, matchPosition);
@arrayPush(result, subStr);
if (result.length == limit)
return result;
position = endPosition;
var numberOfCaptures = matches.length > 1 ? matches.length - 1 : 0;
var i = 1;
while (i <= numberOfCaptures) {
var nextCapture = matches[i];
@arrayPush(result, nextCapture);
if (result.length == limit)
return result;
i++;
matchPosition = position;
var remainingStr = @stringSubstringInternal.@call(str, position, size);
@arrayPush(result, remainingStr);
return result;
(function (separator, limit)
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.split requires that |this| not be null or undefined");
if (!@isUndefinedOrNull(separator)) {
var splitter = separator.@@split;
if (!@isUndefinedOrNull(splitter))
return splitter.@call(separator, this, limit);
return @stringSplitFast.@call(this, separator, limit);
(function ()
"use strict";
return @createHTML("String.prototype.strike", this, "strike", "", "");
(function ()
"use strict";
var result = @toString(this);
for (var i = 0, length = arguments.length; i < length; ++i)
result += @toString(arguments[i]);
return result;
(function ()
"use strict";
return @createHTML("String.prototype.sub", this, "sub", "", "");
(function (begin, end)
"use strict";
if (!@isTypedArrayView(this))
@throwTypeError("|this| should be a typed array view");
var start = @toIntegerOrInfinity(begin);
var finish;
if (end !== @undefined)
finish = @toIntegerOrInfinity(end);
var constructor = @typedArraySpeciesConstructor(this);
return @typedArraySubarrayCreate.@call(this, start, finish, constructor);
(function ()
"use strict";
return @createHTML("String.prototype.sup", this, "sup", "", "");
(function ()
"use strict";
return this;
(function (value)
"use strict";
if (!@isCallable(this))
return false;
if (@isBoundFunction(this))
return @hasInstanceBoundFunction(this, value);
var target = this.prototype;
return @instanceOf(value, target);
(function ()
"use strict";
return this;
(function (strArg)
"use strict";
var regexp = this;
if (@isRegExpObject(regexp)
&& @tryGetById(regexp, "exec") === @regExpBuiltinExec
&& typeof regexp.lastIndex === "number")
return @regExpTestFast.@call(regexp, strArg);
if (!@isObject(regexp))
@throwTypeError("RegExp.prototype.test requires that |this| be an Object");
var str = @toString(strArg);
var match = @regExpExec(regexp, str);
if (match !== null)
return true;
return false;
(function (onFulfilled, onRejected)
"use strict";
if (!@isPromise(this))
@throwTypeError("|this| is not a Promise");
var constructor = @speciesConstructor(this, @Promise);
var promise;
var promiseOrCapability;
if (constructor === @Promise) {
promiseOrCapability = @newPromise();
promise = promiseOrCapability;
} else {
promiseOrCapability = @newPromiseCapabilitySlow(constructor);
promise = promiseOrCapability.@promise;
@performPromiseThen(this, onFulfilled, onRejected, promiseOrCapability);
return promise;
(function (exception)
"use strict";
var promise = @newPromise();
if (!@isObject(this) || !@isObject(@getByIdDirectPrivate(this, "syncIterator"))) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, @makeTypeError('Iterator is not an object.'));
return promise;
var syncIterator = @getByIdDirectPrivate(this, "syncIterator");
var throwMethod;
try {
throwMethod = syncIterator.throw;
} catch (e) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, e);
return promise;
if (@isUndefinedOrNull(throwMethod)) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, exception);
return promise;
try {
var throwResult = @argumentCount() === 0 ? throwMethod.@call(syncIterator) : throwMethod.@call(syncIterator, exception);
if (!@isObject(throwResult)) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, @makeTypeError('Iterator result interface is not an object.'));
return promise;
var throwDone = !!throwResult.done;
var throwValue = throwResult.value;
@resolveWithoutPromise(throwValue,
function (result) { @resolvePromiseWithFirstResolvingFunctionCallCheck(promise, { value: result, done: throwDone }); },
function (error) { @rejectPromiseWithFirstResolvingFunctionCallCheck(promise, error); });
} catch (e) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, e);
return promise;
(function (exception)
"use strict";
return @asyncGeneratorEnqueue(this, exception, @GeneratorResumeModeThrow);
(function (exception)
"use strict";
if (!@isGenerator(this))
@throwTypeError("|this| should be a generator");
var state = @getGeneratorInternalField(this, @generatorFieldState);
if (state === @GeneratorStateExecuting)
@throwTypeError("Generator is executing");
if (state === @GeneratorStateCompleted)
throw exception;
return @generatorResume(this, state, @getGeneratorInternalField(this, @generatorFieldThis), exception, @undefined, @GeneratorResumeModeThrow);
(function (opts)
"use strict";
var options;
if (opts === @undefined)
options = null;
else if (opts === null)
@throwTypeError("null is not an object");
else
options = @toObject(opts);
var needsDefaults = !options || (
options.weekday === @undefined &&
options.year === @undefined &&
options.month === @undefined &&
options.day === @undefined &&
options.dayPeriod === @undefined &&
options.hour === @undefined &&
options.minute === @undefined &&
options.second === @undefined &&
options.fractionalSecondDigits === @undefined
if (options) {
var dateStyle = options.dateStyle;
var timeStyle = options.timeStyle;
if (dateStyle !== @undefined || timeStyle !== @undefined)
needsDefaults = false;
if (needsDefaults) {
options = @Object.@create(options);
options.year = "numeric";
options.month = "numeric";
options.day = "numeric";
options.hour = "numeric";
options.minute = "numeric";
options.second = "numeric";
return options;
(function (opts)
"use strict";
var options;
if (opts === @undefined)
options = null;
else if (opts === null)
@throwTypeError("null is not an object");
else
options = @toObject(opts);
var needsDefaults = !options || (
options.weekday === @undefined &&
options.year === @undefined &&
options.month === @undefined &&
options.day === @undefined
if (options) {
var dateStyle = options.dateStyle;
var timeStyle = options.timeStyle;
if (timeStyle !== @undefined)
@throwTypeError("timeStyle cannot be specified");
if (dateStyle !== @undefined)
needsDefaults = false;
if (needsDefaults) {
options = @Object.@create(options);
options.year = "numeric";
options.month = "numeric";
options.day = "numeric";
return options;
(function (opts)
"use strict";
var options;
if (opts === @undefined)
options = null;
else if (opts === null)
@throwTypeError("null is not an object");
else
options = @toObject(opts);
var needsDefaults = !options || (
options.dayPeriod === @undefined &&
options.hour === @undefined &&
options.minute === @undefined &&
options.second === @undefined &&
options.fractionalSecondDigits === @undefined
if (options) {
var dateStyle = options.dateStyle;
var timeStyle = options.timeStyle;
if (dateStyle !== @undefined)
@throwTypeError("dateStyle cannot be specified");
if (timeStyle !== @undefined)
needsDefaults = false;
if (needsDefaults) {
options = @Object.@create(options);
options.hour = "numeric";
options.minute = "numeric";
options.second = "numeric";
return options;
(function (target)
"use strict";
var numberValue = +target;
if (numberValue !== numberValue || !numberValue)
return 0;
return @trunc(numberValue);
(function (target)
"use strict";
var length = @toIntegerOrInfinity(target);
return +(length > 0 ? (length < @MAX_SAFE_INTEGER ? length : @MAX_SAFE_INTEGER) : 0);
(function ()
"use strict";
var value = @thisTimeValue.@call(this);
if (@isNaN(value))
return "Invalid Date";
var options = @toDateTimeOptionsDateDate(@argument(1));
var locales = @argument(0);
return @dateTimeFormat(locales, options, value);
(function ()
"use strict";
var value = @thisTimeValue.@call(this);
if (@isNaN(value))
return "Invalid Date";
var options = @toDateTimeOptionsAnyAll(@argument(1));
var locales = @argument(0);
return @dateTimeFormat(locales, options, value);
(function ()
"use strict";
var length = @typedArrayLength(this);
if (length == 0)
return "";
var string = @toString(this[0].toLocaleString(@argument(0), @argument(1)));
for (var i = 1; i < length; i++)
string += "," + @toString(this[i].toLocaleString(@argument(0), @argument(1)));
return string;
(function ()
"use strict";
var value = @thisTimeValue.@call(this);
if (@isNaN(value))
return "Invalid Date";
var options = @toDateTimeOptionsTimeTime(@argument(1));
var locales = @argument(0);
return @dateTimeFormat(locales, options, value);
(function (state, reactions, argument)
"use strict";
if (!reactions)
return;
var isResolved = state === @promiseStateFulfilled;
@enqueueJob(@promiseReactionJob, state, reactions.@promiseOrCapability, isResolved ? reactions.@onFulfilled : reactions.@onRejected, argument);
for (var i = 0, count = reactions.@outOfLineReactionCounts; i < count; i += 3) {
var promise = reactions[i];
var handler = isResolved ? reactions[i + 1] : reactions[i + 2];
@enqueueJob(@promiseReactionJob, state, promise, handler, argument);
@assert(i === count);
(function (array, a, b, comparator)
"use strict";
var result = @toNumber(comparator(a, b));
if (@isDetached(array))
@throwTypeError("Underlying ArrayBuffer has been detached from the view");
return result;
(function (array, dst, src, srcIndex, srcEnd, width, comparator)
"use strict";
var left = srcIndex;
var leftEnd = @min(left + width, srcEnd);
var right = leftEnd;
var rightEnd = @min(right + width, srcEnd);
for (var dstIndex = left; dstIndex < rightEnd; ++dstIndex) {
if (right < rightEnd) {
if (left >= leftEnd || @typedArrayElementCompare(array, src[right], src[left], comparator) < 0) {
dst[dstIndex] = src[right++];
continue;
dst[dstIndex] = src[left++];
(function (array, valueCount, comparator)
"use strict";
var constructor = @typedArrayGetOriginalConstructor(array);
var buffer = new constructor(valueCount);
var dst = buffer;
var src = array;
for (var width = 1; width < valueCount; width *= 2) {
for (var srcIndex = 0; srcIndex < valueCount; srcIndex += 2 * width)
@typedArrayMerge(array, dst, src, srcIndex, valueCount, width, comparator);
var tmp = src;
src = dst;
dst = tmp;
if (src != array) {
for (var i = 0; i < valueCount; ++i)
array[i] = src[i];
(function (value)
"use strict";
var constructor = value.constructor;
if (constructor === @undefined)
return @typedArrayGetOriginalConstructor(value);
if (!@isObject(constructor))
@throwTypeError("|this|.constructor is not an Object or undefined");
constructor = constructor.@@species;
if (@isUndefinedOrNull(constructor))
return @typedArrayGetOriginalConstructor(value);
return constructor;
(function (fromShadowRealm, shadowRealm, target)
"use strict";
if (@isCallable(target)) {
var wrapped = function() {
var length = arguments.length;
var wrappedArgs = @newArrayWithSize(length);
for (var index = 0; index < length; ++index)
@putByValDirect(wrappedArgs, index, @wrap(!fromShadowRealm, shadowRealm, arguments[index]));
try {
var result = target.@apply(@undefined, wrappedArgs);
} catch (e) {
const msg = "wrapped function threw: " + e.toString();
if (fromShadowRealm)
@throwTypeError(msg);
else {
const mkTypeError = @evalInRealm(shadowRealm, "(msg) => new TypeError(msg)");
const err = mkTypeError.@apply(msg);
throw err;
return @wrap(fromShadowRealm, shadowRealm, result);
delete wrapped['name'];
delete wrapped['length'];
if (!fromShadowRealm)
@moveFunctionToRealm(wrapped, shadowRealm);
return wrapped;
} else if (@isObject(target)) {
@throwTypeError("value passing between realms must be callable or primitive");
return target;
@G@@E
`f``d
pvppt
PVPPT
@G@@E
`f``d
pvppt
PVPPT
@G@@E
`f``d
@@@E
```d
@@`d
@@`d
@@@E
```d
@@`d
@@`d
pvppt
PVPPT
pvpPt
PVPPT
@G@@E
`f``d
pvppt
PVPPT
pvppt
PVPPT
pvppt
PVPPT
@G@@E
`f``d
@G@@E
`f``d
@G@@E
`f``d
@G@@E
`f``d
@G@@E
`f``d
@G@@E
`f``d
`d`dj
@E@EJ
PTPTZ
ptptz
@@@E
`@@d
@@@E
`@@d
@@@G
`@@f
@@@E
@@@E
@@@E
``@d
``@d
``@d
@@@G
`@@f
@@@E
`@@d
@@@E
`@@d
@@@E
`@@d
@@@E
@@@E
@@@E
```d
```d
```d
@@@E
@@@E
@@@E
```d
```d
```d
@@@E
@@@E
@@@E
```d
```d
```d
@@@E
@@@E
@@@E
```d
```d
```d
@@@E
@@@E
@@@E
```d
```d
```d
@&@&
@F@F
@f`f
@&@&
@F@F
@f`f
&& &E
FF@FE
ff`fe
&& &E
FF@FE
ff`fe
@@@E
@``E
@@@E
@``E
@ppE
@PPE
@@G@@@E
@`f@``e
@@G@@@E
@@@JJE
@``jje
@@@`f@@@``d
@```f@````d
@@@`f@@@``d
@```f@@@``d
@pp`f@pp``d
@PP`f@PP``d
@@@ppt
@``ppt
@@@ppt
@``ppt
@ppppt
@PPppt
(async function (
<module>
<global>
?`x%
                
Debugger
?UUUUUU
Verifier//# sourceURL=__InjectedScript_InjectedScriptSource.js
(function(InjectedScriptHost,inspectedGlobalObject,injectedScriptId){var Object={}.constructor;function toString(obj)
{return String(obj);}
function toStringDescription(obj)
{if(obj===0&&1/obj<0)
return"-0";if(isBigInt(obj))
return toString(obj)+"n";return toString(obj);}
function isUInt32(obj)
{if(typeof obj==="number")
return obj>>>0===obj&&(obj>0||1/obj>0);return""+(obj>>>0)===obj;}
function isSymbol(value)
{return typeof value==="symbol";}
function isBigInt(value)
{return typeof value==="bigint";}
function isEmptyObject(object)
{for(let key in object)
return false;return true;}
function isDefined(value)
{return!!value||InjectedScriptHost.isHTMLAllCollection(value);}
function isPrimitiveValue(value)
{switch(typeof value){case"boolean":case"number":case"string":return true;case"undefined":return!InjectedScriptHost.isHTMLAllCollection(value);default:return false;}}
let InjectedScript=class InjectedScript
{constructor()
{this._lastBoundObjectId=1;this._idToWrappedObject={};this._idToObjectGroupName={};this._objectGroups={};this._modules={};this._nextSavedResultIndex=1;this._savedResults=[];} 
execute(functionString,objectGroup,includeCommandLineAPI,returnByValue,generatePreview,saveResult,args)
{return this._wrapAndSaveCall(objectGroup,returnByValue,generatePreview,saveResult,()=>{const isEvalOnCallFrame=false;return this._evaluateOn(InjectedScriptHost.evaluateWithScopeExtension,InjectedScriptHost,functionString,isEvalOnCallFrame,includeCommandLineAPI).apply(undefined,args);});}
evaluate(expression,objectGroup,includeCommandLineAPI,returnByValue,generatePreview,saveResult)
{const isEvalOnCallFrame=false;return this._evaluateAndWrap(InjectedScriptHost.evaluateWithScopeExtension,InjectedScriptHost,expression,objectGroup,isEvalOnCallFrame,includeCommandLineAPI,returnByValue,generatePreview,saveResult);}
awaitPromise(promiseObjectId,returnByValue,generatePreview,saveResult,callback)
{let parsedPromiseObjectId=this._parseObjectId(promiseObjectId);let promiseObject=this._objectForId(parsedPromiseObjectId);let promiseObjectGroupName=this._idToObjectGroupName[parsedPromiseObjectId.id];if(!isDefined(promiseObject)){callback("Could not find object with given id");return;}
if(!(promiseObject instanceof Promise)){callback("Object with given id is not a Promise");return;}
let resolve=(value)=>{let returnObject={wasThrown:false,result:RemoteObject.create(value,promiseObjectGroupName,returnByValue,generatePreview),};if(saveResult){this._savedResultIndex=0;this._saveResult(returnObject.result);if(this._savedResultIndex)
returnObject.savedResultIndex=this._savedResultIndex;}
callback(returnObject);};let reject=(reason)=>{callback(this._createThrownValue(reason,promiseObjectGroupName));};promiseObject.then(resolve,reject);}
evaluateOnCallFrame(topCallFrame,callFrameId,expression,objectGroup,includeCommandLineAPI,returnByValue,generatePreview,saveResult)
{let callFrame=this._callFrameForId(topCallFrame,callFrameId);if(!callFrame)
return"Could not find call frame with given id";const isEvalOnCallFrame=true;return this._evaluateAndWrap(callFrame.evaluateWithScopeExtension,callFrame,expression,objectGroup,isEvalOnCallFrame,includeCommandLineAPI,returnByValue,generatePreview,saveResult);}
callFunctionOn(objectId,expression,args,returnByValue,generatePreview)
{let parsedObjectId=this._parseObjectId(objectId);let object=this._objectForId(parsedObjectId);let objectGroupName=this._idToObjectGroupName[parsedObjectId.id];if(!isDefined(object))
return"Could not find object with given id";let resolvedArgs=[];if(args){let callArgs=InjectedScriptHost.evaluate(args);for(let i=0;i<callArgs.length;++i){try{resolvedArgs[i]=this._resolveCallArgument(callArgs[i]);}catch(e){return String(e);}}}
try{let func=InjectedScriptHost.evaluate("("+expression+")");if(typeof func!=="function")
return"Given expression does not evaluate to a function";return{wasThrown:false,result:RemoteObject.create(func.apply(object,resolvedArgs),objectGroupName,returnByValue,generatePreview)};}catch(e){return this._createThrownValue(e,objectGroupName);}}
getFunctionDetails(objectId)
{let parsedObjectId=this._parseObjectId(objectId);let object=this._objectForId(parsedObjectId);if(typeof object!=="function")
return"Cannot resolve function by id.";return this.functionDetails(object);}
functionDetails(func)
{let details=InjectedScriptHost.functionDetails(func);if(!details)
return"Cannot resolve function details.";return details;}
getPreview(objectId)
{let parsedObjectId=this._parseObjectId(objectId);let object=this._objectForId(parsedObjectId);return RemoteObject.createObjectPreviewForValue(object,true);}
getProperties(objectId,ownProperties,fetchStart,fetchCount,generatePreview)
{let collectionMode=ownProperties?InjectedScript.CollectionMode.OwnProperties:InjectedScript.CollectionMode.AllProperties;return this._getProperties(objectId,collectionMode,{fetchStart,fetchCount,generatePreview});}
getDisplayableProperties(objectId,fetchStart,fetchCount,generatePreview)
{let collectionMode=InjectedScript.CollectionMode.OwnProperties|InjectedScript.CollectionMode.NativeGetterProperties;return this._getProperties(objectId,collectionMode,{fetchStart,fetchCount,generatePreview,nativeGettersAsValues:true});}
getInternalProperties(objectId,generatePreview)
{let parsedObjectId=this._parseObjectId(objectId);let object=this._objectForId(parsedObjectId);let objectGroupName=this._idToObjectGroupName[parsedObjectId.id];if(!isDefined(object))
return false;if(isSymbol(object))
return false;let descriptors=this._internalPropertyDescriptors(object);if(!descriptors)
return[];for(let i=0;i<descriptors.length;++i){let descriptor=descriptors[i];if("value"in descriptor)
descriptor.value=RemoteObject.create(descriptor.value,objectGroupName,false,generatePreview);}
return descriptors;}
getCollectionEntries(objectId,objectGroupName,fetchStart,fetchCount)
{let parsedObjectId=this._parseObjectId(objectId);let object=this._objectForId(parsedObjectId);objectGroupName=objectGroupName||this._idToObjectGroupName[parsedObjectId.id];if(!isDefined(object))
return;if(typeof object!=="object")
return;let entries=this._entries(object,InjectedScriptHost.subtype(object),fetchStart,fetchCount);return entries.map(function(entry){entry.value=RemoteObject.create(entry.value,objectGroupName,false,true);if("key"in entry)
entry.key=RemoteObject.create(entry.key,objectGroupName,false,true);return entry;});}
saveResult(callArgumentJSON)
{this._savedResultIndex=0;try{let callArgument=InjectedScriptHost.evaluate("("+callArgumentJSON+")");let value=this._resolveCallArgument(callArgument);this._saveResult(value);}catch{}
return this._savedResultIndex;}
wrapCallFrames(callFrame)
{if(!callFrame)
return false;let result=[];let depth=0;do{result.push(new InjectedScript.CallFrameProxy(depth++,callFrame));callFrame=callFrame.caller;}while(callFrame);return result;}
wrapObject(object,groupName,canAccessInspectedGlobalObject,generatePreview)
{if(!canAccessInspectedGlobalObject)
return this._fallbackWrapper(object);return RemoteObject.create(object,groupName,false,generatePreview);}
wrapJSONString(jsonString,groupName,generatePreview)
{try{return this.wrapObject(JSON.parse(jsonString),groupName,true,generatePreview);}catch{return null;}}
wrapTable(canAccessInspectedGlobalObject,table,columns)
{if(!canAccessInspectedGlobalObject)
return this._fallbackWrapper(table);
let columnNames=null;if(typeof columns==="string")
columns=[columns];if(InjectedScriptHost.subtype(columns)==="array"){columnNames=[];for(let i=0;i<columns.length;++i)
columnNames.push(toString(columns[i]));}
return RemoteObject.create(table,"console",false,true,columnNames);}
previewValue(value)
{return RemoteObject.createObjectPreviewForValue(value,true);}
setEventValue(value)
{this._eventValue=value;}
clearEventValue()
{delete this._eventValue;}
setExceptionValue(value)
{this._exceptionValue=value;}
clearExceptionValue()
{delete this._exceptionValue;}
findObjectById(objectId)
{let parsedObjectId=this._parseObjectId(objectId);return this._objectForId(parsedObjectId);}
releaseObject(objectId)
{let parsedObjectId=this._parseObjectId(objectId);this._releaseObject(parsedObjectId.id);}
releaseObjectGroup(objectGroupName)
{if(objectGroupName==="console"){delete this._lastResult;this._nextSavedResultIndex=1;this._savedResults=[];}
let group=this._objectGroups[objectGroupName];if(!group)
return;for(let i=0;i<group.length;i++)
this._releaseObject(group[i]);delete this._objectGroups[objectGroupName];}
createCommandLineAPIObject(callFrame)
{return new CommandLineAPI(callFrame||null);} 
inspectObject(object)
{if(this._inspectObject)
this._inspectObject(object);} 
hasInjectedModule(name)
{return this._modules[name];}
injectModule(name,source,host)
{this._modules[name]=false;let moduleFunction=InjectedScriptHost.evaluate("("+source+")");if(typeof moduleFunction!=="function")
throw"Error: Web Inspector: a function was expected for injectModule";moduleFunction(InjectedScriptHost,inspectedGlobalObject,injectedScriptId,this,{RemoteObject,CommandLineAPI},host);this._modules[name]=true;} 
isPrimitiveValue(value)
{return isPrimitiveValue(value);} 
_parseObjectId(objectId)
{return InjectedScriptHost.evaluate("("+objectId+")");}
_objectForId(objectId)
{return this._idToWrappedObject[objectId.id];}
_bind(object,objectGroupName)
{let id=this._lastBoundObjectId++;let objectId=`{"injectedScriptId":${injectedScriptId},"id":${id}}`;this._idToWrappedObject[id]=object;if(objectGroupName){let group=this._objectGroups[objectGroupName];if(!group){group=[];this._objectGroups[objectGroupName]=group;}
group.push(id);this._idToObjectGroupName[id]=objectGroupName;}
return objectId;}
_releaseObject(id)
{delete this._idToWrappedObject[id];delete this._idToObjectGroupName[id];}
_fallbackWrapper(object)
{let result={};result.type=typeof object;if(isPrimitiveValue(object))
result.value=object;else
result.description=toStringDescription(object);return result;}
_resolveCallArgument(callArgumentJSON)
{if("value"in callArgumentJSON)
return callArgumentJSON.value;let objectId=callArgumentJSON.objectId;if(objectId){let parsedArgId=this._parseObjectId(objectId);if(!parsedArgId||parsedArgId["injectedScriptId"]!==injectedScriptId)
throw"Arguments should belong to the same JavaScript world as the target object.";let resolvedArg=this._objectForId(parsedArgId);if(!isDefined(resolvedArg))
throw"Could not find object with given id";return resolvedArg;}
return undefined;}
_createThrownValue(value,objectGroup)
{let remoteObject=RemoteObject.create(value,objectGroup);try{remoteObject.description=toStringDescription(value);}catch{}
return{wasThrown:true,result:remoteObject};}
_evaluateAndWrap(evalFunction,object,expression,objectGroup,isEvalOnCallFrame,includeCommandLineAPI,returnByValue,generatePreview,saveResult)
{return this._wrapAndSaveCall(objectGroup,returnByValue,generatePreview,saveResult,()=>{return this._evaluateOn(evalFunction,object,expression,isEvalOnCallFrame,includeCommandLineAPI);});}
_wrapAndSaveCall(objectGroup,returnByValue,generatePreview,saveResult,func)
{return this._wrapCall(objectGroup,returnByValue,generatePreview,saveResult,()=>{let result=func();if(saveResult)
this._saveResult(result);return result;});}
_wrapCall(objectGroup,returnByValue,generatePreview,saveResult,func)
{try{this._savedResultIndex=0;let returnObject={wasThrown:false,result:RemoteObject.create(func(),objectGroup,returnByValue,generatePreview)};if(saveResult&&this._savedResultIndex)
returnObject.savedResultIndex=this._savedResultIndex;return returnObject;}catch(e){return this._createThrownValue(e,objectGroup);}}
_evaluateOn(evalFunction,object,expression,isEvalOnCallFrame,includeCommandLineAPI)
{let commandLineAPI=null;if(includeCommandLineAPI)
commandLineAPI=this.createCommandLineAPIObject(isEvalOnCallFrame?object:null);return evalFunction.call(object,expression,commandLineAPI);}
_callFrameForId(topCallFrame,callFrameId)
{let parsedCallFrameId=InjectedScriptHost.evaluate("("+callFrameId+")");let ordinal=parsedCallFrameId["ordinal"];let callFrame=topCallFrame;while(--ordinal>=0&&callFrame)
callFrame=callFrame.caller;return callFrame;}
_getProperties(objectId,collectionMode,{fetchStart,fetchCount,generatePreview,nativeGettersAsValues})
{let parsedObjectId=this._parseObjectId(objectId);let object=this._objectForId(parsedObjectId);let objectGroupName=this._idToObjectGroupName[parsedObjectId.id];if(!isDefined(object))
return false;if(isSymbol(object))
return false;let start=fetchStart||0;if(start<0)
start=0;let count=fetchCount||0;if(count<0)
count=0;let includeProto=!start;let descriptors=[];this._forEachPropertyDescriptor(object,collectionMode,(descriptor)=>{if(start>0){--start;return InjectedScript.PropertyFetchAction.Continue;}
if("get"in descriptor)
descriptor.get=RemoteObject.create(descriptor.get,objectGroupName);if("set"in descriptor)
descriptor.set=RemoteObject.create(descriptor.set,objectGroupName);if("value"in descriptor)
descriptor.value=RemoteObject.create(descriptor.value,objectGroupName,false,generatePreview);if("symbol"in descriptor)
descriptor.symbol=RemoteObject.create(descriptor.symbol,objectGroupName);descriptors.push(descriptor);if(includeProto&&count&&descriptors.length>=count&&descriptor.name!=="__proto__")
return InjectedScript.PropertyFetchAction.Stop;return(count&&descriptors.length>=count)?InjectedScript.PropertyFetchAction.Stop:InjectedScript.PropertyFetchAction.Continue;},{nativeGettersAsValues,includeProto});return descriptors;}
_internalPropertyDescriptors(object,completeDescriptor)
{let internalProperties=InjectedScriptHost.getInternalProperties(object);if(!internalProperties)
return null;let descriptors=[];for(let i=0;i<internalProperties.length;i++){let property=internalProperties[i];let descriptor={name:property.name,value:property.value};if(completeDescriptor)
descriptor.isOwn=true;descriptors.push(descriptor);}
return descriptors;}
_forEachPropertyDescriptor(object,collectionMode,callback,{nativeGettersAsValues,includeProto})
{if(InjectedScriptHost.subtype(object)==="proxy")
return;let nameProcessed=new Set;nameProcessed.add("__proto__");function createFakeValueDescriptor(name,symbol,descriptor,isOwnProperty,possibleNativeBindingGetter)
{try{let fakeDescriptor={name,value:object[name]};if(descriptor){if(descriptor.writable)
fakeDescriptor.writable=true;if(descriptor.configurable)
fakeDescriptor.configurable=true;if(descriptor.enumerable)
fakeDescriptor.enumerable=true;}
if(possibleNativeBindingGetter)
fakeDescriptor.nativeGetter=true;if(isOwnProperty)
fakeDescriptor.isOwn=true;if(symbol)
fakeDescriptor.symbol=symbol;if(fakeDescriptor.value instanceof Promise&&InjectedScriptHost.isPromiseRejectedWithNativeGetterTypeError(fakeDescriptor.value))
fakeDescriptor.value.catch(function(){});return fakeDescriptor;}catch(e){let errorDescriptor={name,value:e,wasThrown:true};if(isOwnProperty)
errorDescriptor.isOwn=true;if(symbol)
errorDescriptor.symbol=symbol;return errorDescriptor;}}
function processDescriptor(descriptor,isOwnProperty,possibleNativeBindingGetter)
{if(collectionMode&InjectedScript.CollectionMode.AllProperties)
return callback(descriptor);if(collectionMode&InjectedScript.CollectionMode.OwnProperties&&isOwnProperty)
return callback(descriptor);if(collectionMode&InjectedScript.CollectionMode.NativeGetterProperties){if(possibleNativeBindingGetter)
return callback(descriptor);}}
function processProperty(o,propertyName,isOwnProperty)
{if(nameProcessed.has(propertyName))
return InjectedScript.PropertyFetchAction.Continue;nameProcessed.add(propertyName);let name=toString(propertyName);let symbol=isSymbol(propertyName)?propertyName:null;let descriptor=Object.getOwnPropertyDescriptor(o,propertyName);if(!descriptor){let fakeDescriptor=createFakeValueDescriptor(name,symbol,descriptor,isOwnProperty);return processDescriptor(fakeDescriptor,isOwnProperty);}
if(nativeGettersAsValues){if(String(descriptor.get).endsWith("[native code]\n}")||(!descriptor.get&&descriptor.hasOwnProperty("get")&&!descriptor.set&&descriptor.hasOwnProperty("set"))){let fakeDescriptor=createFakeValueDescriptor(name,symbol,descriptor,isOwnProperty,true);return processDescriptor(fakeDescriptor,isOwnProperty,true);}}
descriptor.name=name;if(isOwnProperty)
descriptor.isOwn=true;if(symbol)
descriptor.symbol=symbol;return processDescriptor(descriptor,isOwnProperty);}
let isArrayLike=false;try{isArrayLike=RemoteObject.subtype(object)==="array"&&isFinite(object.length)&&object.length>0;}catch{}
for(let o=object;isDefined(o);o=Object.getPrototypeOf(o)){let isOwnProperty=o===object;let shouldBreak=false; if(isArrayLike&&isOwnProperty){for(let i=0;i<o.length;++i){if(!(i in o))
continue;let result=processProperty(o,toString(i),isOwnProperty);shouldBreak=result===InjectedScript.PropertyFetchAction.Stop;if(shouldBreak)
break;}}else{let propertyNames=Object.getOwnPropertyNames(o);for(let i=0;i<propertyNames.length;++i){let result=processProperty(o,propertyNames[i],isOwnProperty);shouldBreak=result===InjectedScript.PropertyFetchAction.Stop;if(shouldBreak)
break;}}
if(shouldBreak)
break;if(Object.getOwnPropertySymbols){let propertySymbols=Object.getOwnPropertySymbols(o);for(let i=0;i<propertySymbols.length;++i){let result=processProperty(o,propertySymbols[i],isOwnProperty);shouldBreak=result===InjectedScript.PropertyFetchAction.Stop;if(shouldBreak)
break;}}
if(shouldBreak)
break;if(collectionMode===InjectedScript.CollectionMode.OwnProperties)
break;}
if(includeProto){try{if(object.__proto__)
callback({name:"__proto__",value:object.__proto__,writable:true,configurable:true,isOwn:true});}catch{}}}
_getSetEntries(object,fetchStart,fetchCount)
{let entries=[];for(let value of object){if(fetchStart>0){fetchStart--;continue;}
entries.push({value});if(fetchCount&&entries.length===fetchCount)
break;}
return entries;}
_getMapEntries(object,fetchStart,fetchCount)
{let entries=[];for(let[key,value]of object){if(fetchStart>0){fetchStart--;continue;}
entries.push({key,value});if(fetchCount&&entries.length===fetchCount)
break;}
return entries;}
_getWeakMapEntries(object,fetchCount)
{return InjectedScriptHost.weakMapEntries(object,fetchCount);}
_getWeakSetEntries(object,fetchCount)
{return InjectedScriptHost.weakSetEntries(object,fetchCount);}
_getIteratorEntries(object,fetchCount)
{return InjectedScriptHost.iteratorEntries(object,fetchCount);}
_entries(object,subtype,fetchStart,fetchCount)
{if(subtype==="set")
return this._getSetEntries(object,fetchStart,fetchCount);if(subtype==="map")
return this._getMapEntries(object,fetchStart,fetchCount);if(subtype==="weakmap")
return this._getWeakMapEntries(object,fetchCount);if(subtype==="weakset")
return this._getWeakSetEntries(object,fetchCount);if(subtype==="iterator")
return this._getIteratorEntries(object,fetchCount);throw"unexpected type";}
_saveResult(result)
{this._lastResult=result;if(result===undefined||result===null)
return;let existingIndex=this._savedResults.indexOf(result);if(existingIndex!==-1){this._savedResultIndex=existingIndex;return;}
this._savedResultIndex=this._nextSavedResultIndex;this._savedResults[this._nextSavedResultIndex++]=result;if(this._nextSavedResultIndex>=100)
this._nextSavedResultIndex=1;}};InjectedScript.CollectionMode={OwnProperties:1<<0,NativeGetterProperties:1<<1,AllProperties:1<<2,};InjectedScript.PropertyFetchAction={Continue:Symbol("continue"),Stop:Symbol("stop"),}
var injectedScript=new InjectedScript;let RemoteObject=class RemoteObject
{constructor(object,objectGroupName,forceValueType,generatePreview,columnNames)
{this.type=typeof object;if(this.type==="undefined"&&InjectedScriptHost.isHTMLAllCollection(object))
this.type="object";if(isPrimitiveValue(object)||isBigInt(object)||object===null||forceValueType){if(this.type!=="undefined"&&this.type!=="bigint")
this.value=object;if(object===null)
this.subtype="null";if(this.type==="number"||this.type==="bigint")
this.description=toStringDescription(object);return;}
this.objectId=injectedScript._bind(object,objectGroupName);let subtype=RemoteObject.subtype(object);if(subtype)
this.subtype=subtype;this.className=InjectedScriptHost.internalConstructorName(object);this.description=RemoteObject.describe(object);if(subtype==="array")
this.size=typeof object.length==="number"?object.length:0;else if(subtype==="set"||subtype==="map")
this.size=object.size;else if(subtype==="weakmap")
this.size=InjectedScriptHost.weakMapSize(object);else if(subtype==="weakset")
this.size=InjectedScriptHost.weakSetSize(object);else if(subtype==="class"){this.classPrototype=RemoteObject.create(object.prototype,objectGroupName);this.className=object.name;}
if(generatePreview&&this.type==="object"){if(subtype==="proxy"){this.preview=this._generatePreview(InjectedScriptHost.proxyTargetValue(object));this.preview.lossless=false;}else
this.preview=this._generatePreview(object,undefined,columnNames);}} 
static create(object,objectGroupName,forceValueType,generatePreview,columnNames)
{try{return new RemoteObject(object,objectGroupName,forceValueType,generatePreview,columnNames);}catch(e){let description;try{description=RemoteObject.describe(e);}catch(ex){alert(ex.message);description="<failed to convert exception to string>";}
return new RemoteObject(description);}}
static createObjectPreviewForValue(value,generatePreview,columnNames)
{let remoteObject=new RemoteObject(value,undefined,false,generatePreview,columnNames);if(remoteObject.objectId)
injectedScript.releaseObject(remoteObject.objectId);if(remoteObject.classPrototype&&remoteObject.classPrototype.objectId)
injectedScript.releaseObject(remoteObject.classPrototype.objectId);return remoteObject.preview||remoteObject._emptyPreview();}
static subtype(value)
{if(value===null)
return"null";if(isPrimitiveValue(value)||isBigInt(value)||isSymbol(value))
return null;if(InjectedScriptHost.isHTMLAllCollection(value))
return"array";let preciseType=InjectedScriptHost.subtype(value);if(preciseType)
return preciseType;try{if(typeof value.splice==="function"&&isFinite(value.length))
return"array";}catch{}
return null;}
static describe(value)
{if(isPrimitiveValue(value))
return null;if(isBigInt(value))
return null;if(isSymbol(value))
return toString(value);let subtype=RemoteObject.subtype(value);if(subtype==="regexp")
return toString(value);if(subtype==="date")
return toString(value);if(subtype==="error")
return toString(value);if(subtype==="proxy")
return"Proxy";if(subtype==="node")
return RemoteObject.nodePreview(value);let className=InjectedScriptHost.internalConstructorName(value);if(subtype==="array")
return className;if(subtype==="iterator"&&Symbol.toStringTag in value)
return value[Symbol.toStringTag];if(typeof value==="function")
return value.toString();if(className==="Object"){let constructorName=value.constructor&&value.constructor.name;if(constructorName)
return constructorName;}
return className;}
static nodePreview(node)
{let isXMLDocument=node.ownerDocument&&!!node.ownerDocument.xmlVersion;let nodeName=isXMLDocument?node.nodeName:node.nodeName.toLowerCase();switch(node.nodeType){case 1: if(node.id)
return"<"+nodeName+" id=\""+node.id+"\">";if(node.classList.length)
return"<"+nodeName+" class=\""+node.classList.toString().replace(/\s+/," ")+"\">";if(nodeName==="input"&&node.type)
return"<"+nodeName+" type=\""+node.type+"\">";return"<"+nodeName+">";case 3: return nodeName+" \""+node.nodeValue+"\"";case 8: return"<!--"+node.nodeValue+"-->";case 10: return"<!DOCTYPE "+nodeName+">";default:return nodeName;}} 
_initialPreview()
{let preview={type:this.type,description:this.description||toString(this.value),lossless:true,};if(this.subtype){preview.subtype=this.subtype;if(this.subtype!=="null"){preview.overflow=false;preview.properties=[];}}
if("size"in this)
preview.size=this.size;return preview;}
_emptyPreview()
{let preview=this._initialPreview();if(this.subtype==="map"||this.subtype==="set"||this.subtype==="weakmap"||this.subtype==="weakset"||this.subtype==="iterator"){if(this.size){preview.entries=[];preview.lossless=false;preview.overflow=true;}}
return preview;}
_generatePreview(object,firstLevelKeys,secondLevelKeys)
{let preview=this._initialPreview();let isTableRowsRequest=secondLevelKeys===null||secondLevelKeys;let firstLevelKeysCount=firstLevelKeys?firstLevelKeys.length:0;let propertiesThreshold={properties:isTableRowsRequest?1000:Math.max(5,firstLevelKeysCount),indexes:isTableRowsRequest?1000:Math.max(10,firstLevelKeysCount)};try{if(this.subtype==="map"||this.subtype==="set"||this.subtype==="weakmap"||this.subtype==="weakset"||this.subtype==="iterator")
this._appendEntryPreviews(object,preview);preview.properties=[];let internalPropertyDescriptors=injectedScript._internalPropertyDescriptors(object,true);if(internalPropertyDescriptors){for(let i=0;i<internalPropertyDescriptors.length;++i){let result=this._appendPropertyPreview(object,preview,internalPropertyDescriptors[i],propertiesThreshold,firstLevelKeys,secondLevelKeys,{internal:true});if(result===InjectedScript.PropertyFetchAction.Stop)
return preview;}}
if(preview.entries)
return preview;injectedScript._forEachPropertyDescriptor(object,InjectedScript.CollectionMode.AllProperties,(descriptor)=>{return this._appendPropertyPreview(object,preview,descriptor,propertiesThreshold,firstLevelKeys,secondLevelKeys);},{nativeGettersAsValues:true,includeProto:true})}catch{preview.lossless=false;}
return preview;}
_appendPropertyPreview(object,preview,descriptor,propertiesThreshold,firstLevelKeys,secondLevelKeys,{internal}={})
{if(descriptor.wasThrown){preview.lossless=false;return InjectedScript.PropertyFetchAction.Continue;}
let name=descriptor.name;if(name==="__proto__"){if(descriptor.value&&descriptor.value.constructor&&descriptor.value.constructor!==Object&&descriptor.value.constructor!==Array&&descriptor.value.constructor!==RegExp)
preview.lossless=false;return InjectedScript.PropertyFetchAction.Continue;}
if(this.subtype==="array"&&!isUInt32(name))
return InjectedScript.PropertyFetchAction.Continue;if(!descriptor.enumerable&&!descriptor.isOwn&&!(this.subtype==="array"||(this.subtype!=="regexp"&&descriptor.nativeGetter)))
return InjectedScript.PropertyFetchAction.Continue;if(firstLevelKeys&&!firstLevelKeys.includes(name))
return InjectedScript.PropertyFetchAction.Continue;function appendPreview(property){if(toString(property.name>>>0)===property.name)
propertiesThreshold.indexes--;else
propertiesThreshold.properties--;if(propertiesThreshold.indexes<0||propertiesThreshold.properties<0){preview.overflow=true;preview.lossless=false;return InjectedScript.PropertyFetchAction.Stop;}
if(internal)
property.internal=true;preview.properties.push(property);return InjectedScript.PropertyFetchAction.Continue;}
if(!("value"in descriptor)){preview.lossless=false;return appendPreview({name,type:"accessor"});}
let value=descriptor.value;if(value===null)
return appendPreview({name,type:"object",subtype:"null",value:"null"});let type=typeof value;if(!descriptor.enumerable&&type==="function")
return InjectedScript.PropertyFetchAction.Continue;if(InjectedScriptHost.isHTMLAllCollection(value))
type="object";const maxLength=100;if(isPrimitiveValue(value)||isBigInt(value)){if(type==="string"&&value.length>maxLength){value=this._abbreviateString(value,maxLength,true);preview.lossless=false;}
return appendPreview({name,type,value:toStringDescription(value)});}
if(isSymbol(value)){let symbolString=toString(value);if(symbolString.length>maxLength){symbolString=this._abbreviateString(symbolString,maxLength,true);preview.lossless=false;}
return appendPreview({name,type,value:symbolString});}
let property={name,type};let subtype=RemoteObject.subtype(value);if(subtype)
property.subtype=subtype;if((secondLevelKeys===null||secondLevelKeys)||this._isPreviewableObject(value,object)){let subPreview=RemoteObject.createObjectPreviewForValue(value,value!==object,secondLevelKeys);property.valuePreview=subPreview;if(!subPreview.lossless)
preview.lossless=false;if(subPreview.overflow)
preview.overflow=true;}else{let description="";if(type!=="function"||subtype==="class"){let fullDescription;if(subtype==="class")
fullDescription="class "+value.name;else if(subtype==="node")
fullDescription=RemoteObject.nodePreview(value);else
fullDescription=RemoteObject.describe(value);description=this._abbreviateString(fullDescription,maxLength,subtype==="regexp");}
property.value=description;preview.lossless=false;}
return appendPreview(property);}
_appendEntryPreviews(object,preview)
{let entries=injectedScript._entries(object,this.subtype,0,6);if(!entries)
return;if(entries.length>5){entries.pop();preview.overflow=true;preview.lossless=false;}
function updateMainPreview(subPreview){if(!subPreview.lossless)
preview.lossless=false;}
preview.entries=entries.map(function(entry){entry.value=RemoteObject.createObjectPreviewForValue(entry.value,entry.value!==object);updateMainPreview(entry.value);if("key"in entry){entry.key=RemoteObject.createObjectPreviewForValue(entry.key,entry.key!==object);updateMainPreview(entry.key);}
return entry;});}
_isPreviewableObject(value,object)
{let set=new Set;set.add(object);return this._isPreviewableObjectInternal(value,set,1);}
_isPreviewableObjectInternal(object,knownObjects,depth)
{if(depth>3)
return false;if(isPrimitiveValue(object)||isBigInt(object)||isSymbol(object))
return true;if(object===null)
return true;if(knownObjects.has(object))
return false;++depth;knownObjects.add(object);let subtype=RemoteObject.subtype(object);if(subtype==="array"){let length=object.length;if(length>5)
return false;for(let i=0;i<length;++i){if(!this._isPreviewableObjectInternal(object[i],knownObjects,depth))
return false;}
return true;}
if(object.__proto__&&object.__proto__.__proto__)
return false;let ownPropertyNames=Object.getOwnPropertyNames(object);if(ownPropertyNames.length>3)
return false;for(let i=0;i<ownPropertyNames.length;++i){let propertyName=ownPropertyNames[i];let descriptor=Object.getOwnPropertyDescriptor(object,propertyName);if(descriptor&&!("value"in descriptor))
return false;if(!this._isPreviewableObjectInternal(object[propertyName],knownObjects,depth))
return false;}
return true;}
_abbreviateString(string,maxLength,middle)
{if(string.length<=maxLength)
return string;if(middle){let leftHalf=maxLength>>1;let rightHalf=maxLength-leftHalf-1;return string.substr(0,leftHalf)+"\u2026"+string.substr(string.length-rightHalf,rightHalf);}
return string.substr(0,maxLength)+"\u2026";}};InjectedScript.CallFrameProxy=function(ordinal,callFrame)
{this.callFrameId=`{"ordinal":${ordinal},"injectedScriptId":${injectedScriptId}}`;this.functionName=callFrame.functionName;this.location={scriptId:String(callFrame.sourceID),lineNumber:callFrame.line,columnNumber:callFrame.column};this.scopeChain=this._wrapScopeChain(callFrame);this.this=RemoteObject.create(callFrame.thisObject,"backtrace");this.isTailDeleted=callFrame.isTailDeleted;};InjectedScript.CallFrameProxy.prototype={_wrapScopeChain(callFrame)
{let scopeChain=callFrame.scopeChain;let scopeDescriptions=callFrame.scopeDescriptions();let scopeChainProxy=[];for(let i=0;i<scopeChain.length;i++)
scopeChainProxy[i]=InjectedScript.CallFrameProxy._createScopeJson(scopeChain[i],scopeDescriptions[i],"backtrace");return scopeChainProxy;}};InjectedScript.CallFrameProxy._scopeTypeNames={0:"global", 1:"with", 2:"closure", 3:"catch", 4:"functionName", 5:"globalLexicalEnvironment", 6:"nestedLexical",};InjectedScript.CallFrameProxy._createScopeJson=function(object,{name,type,location},groupId)
{let scope={object:RemoteObject.create(object,groupId),type:InjectedScript.CallFrameProxy._scopeTypeNames[type],};if(name)
scope.name=name;if(location)
scope.location=location;if(isEmptyObject(object))
scope.empty=true;return scope;}
function CommandLineAPI(callFrame)
{let savedResultAlias=InjectedScriptHost.savedResultAlias;let defineGetter=(key,value,wrap)=>{if(wrap){let originalValue=value;value=function(){return originalValue;};}
this.__defineGetter__("$"+key,value);if(savedResultAlias&&savedResultAlias!=="$")
this.__defineGetter__(savedResultAlias+key,value);};if("_lastResult"in injectedScript)
defineGetter("_",injectedScript._lastResult,true);if("_exceptionValue"in injectedScript)
defineGetter("exception",injectedScript._exceptionValue,true);if("_eventValue"in injectedScript)
defineGetter("event",injectedScript._eventValue,true); for(let i=1;i<injectedScript._savedResults.length;++i)
defineGetter(i,injectedScript._savedResults[i],true);for(let name in CommandLineAPI.getters)
defineGetter(name,CommandLineAPI.getters[name]);for(let name in CommandLineAPI.methods)
this[name]=CommandLineAPI.methods[name];}
CommandLineAPI.getters={};CommandLineAPI.methods={};CommandLineAPI.methods["keys"]=function(object){return Object.keys(object);};CommandLineAPI.methods["values"]=function(object){return Object.values(object);};CommandLineAPI.methods["queryInstances"]=function(){return InjectedScriptHost.queryInstances(...arguments);};CommandLineAPI.methods["queryObjects"]=function(){return InjectedScriptHost.queryInstances(...arguments);};CommandLineAPI.methods["queryHolders"]=function(){return InjectedScriptHost.queryHolders(...arguments);};CommandLineAPI.methods["inspect"]=function(object){return injectedScript.inspectObject(object);};CommandLineAPI.methods["assert"]=function(){return inspectedGlobalObject.console.assert(...arguments);};CommandLineAPI.methods["clear"]=function(){return inspectedGlobalObject.console.clear(...arguments);};CommandLineAPI.methods["count"]=function(){return inspectedGlobalObject.console.count(...arguments);};CommandLineAPI.methods["countReset"]=function(){return inspectedGlobalObject.console.countReset(...arguments);};CommandLineAPI.methods["debug"]=function(){return inspectedGlobalObject.console.debug(...arguments);};CommandLineAPI.methods["dir"]=function(){return inspectedGlobalObject.console.dir(...arguments);};CommandLineAPI.methods["dirxml"]=function(){return inspectedGlobalObject.console.dirxml(...arguments);};CommandLineAPI.methods["error"]=function(){return inspectedGlobalObject.console.error(...arguments);};CommandLineAPI.methods["group"]=function(){return inspectedGlobalObject.console.group(...arguments);};CommandLineAPI.methods["groupCollapsed"]=function(){return inspectedGlobalObject.console.groupCollapsed(...arguments);};CommandLineAPI.methods["groupEnd"]=function(){return inspectedGlobalObject.console.groupEnd(...arguments);};CommandLineAPI.methods["info"]=function(){return inspectedGlobalObject.console.info(...arguments);};CommandLineAPI.methods["log"]=function(){return inspectedGlobalObject.console.log(...arguments);};CommandLineAPI.methods["profile"]=function(){return inspectedGlobalObject.console.profile(...arguments);};CommandLineAPI.methods["profileEnd"]=function(){return inspectedGlobalObject.console.profileEnd(...arguments);};CommandLineAPI.methods["record"]=function(){return inspectedGlobalObject.console.record(...arguments);};CommandLineAPI.methods["recordEnd"]=function(){return inspectedGlobalObject.console.recordEnd(...arguments);};CommandLineAPI.methods["screenshot"]=function(){return inspectedGlobalObject.console.screenshot(...arguments);};CommandLineAPI.methods["table"]=function(){return inspectedGlobalObject.console.table(...arguments);};CommandLineAPI.methods["takeHeapSnapshot"]=function(){return inspectedGlobalObject.console.takeHeapSnapshot(...arguments);};CommandLineAPI.methods["time"]=function(){return inspectedGlobalObject.console.time(...arguments);};CommandLineAPI.methods["timeEnd"]=function(){return inspectedGlobalObject.console.timeEnd(...arguments);};CommandLineAPI.methods["timeLog"]=function(){return inspectedGlobalObject.console.timeLog(...arguments);};CommandLineAPI.methods["timeStamp"]=function(){return inspectedGlobalObject.console.timeStamp(...arguments);};CommandLineAPI.methods["trace"]=function(){return inspectedGlobalObject.console.trace(...arguments);};CommandLineAPI.methods["warn"]=function(){return inspectedGlobalObject.console.warn(...arguments);};for(let name in CommandLineAPI.methods)
CommandLineAPI.methods[name].toString=function(){return"function "+name+"() { [Command Line API] }";};return injectedScript;})
[](){}+-*.,?\^$|
 !"#$%&'()*+,-./
:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`a
cdeghijklm
yz{|}~
'()*+,-./0
123456789:;<=>?@ABCDEFGHIJ
123456789:;<=>?@ABCDEFGHIJ
 3@KSZ`fkoswz~
ffffff
?ffffff
?333333
?333333
@ffffff
?ffffff
?ffffff
?ffffff
z4?{
z4?{
zd?{
MbP?
MbP?
MbP?
MbP?O
                        
    @@
@@@@      @@    @@@@
  @@
    @@
invalid
lock
xacquire
repne
xrelease
repe
notrack
1to2
1to4
1to8
1to16
1to32
1to64
4to8
4to16
8to16
rn-sae
rd-sae
ru-sae
rz-sae
cdab
badc
dacb
aaaa
bbbb
cccc
dddd
float16
sint8
uint8
sint16
uint16
rex.b
rex.x
rex.xb
rex.r
rex.rb
rex.rx
rex.rxb
rex.w
rex.wb
rex.wx
rex.wxb
rex.wr
rex.wrb
rex.wrx
rex.wrxb
A\j 
A\j 
A^k!
A^k!
A\j 
A\j 
A^k!
A^k!
B\j 
B\j 
A\j 
<nu&
<nu&
&pv'
@$ X
7do"
7fo"
7fo"
Afo"
Afo"
7fo"
7fo"
7fo"
7fo"
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
@Ad$
3L/X
3L/X
3L/X
@@D
@@d
<.L
<+L
<-L
<.L
<+L
<-L
<.L
<%\
<&\
<'\
<%\
<&\
<'\
<%\
<&\
<'\
<%\
<&\
<'\
<.L
<+L
<-L
<.L
<+L
<-L
<.L
<.L
<+L
<-L
<.L
<+L
<-L
<.L
<.L
<+L
<-L
<.L
<+L
<-L
<.L
<.L
<+L
<-L
<.L
<+L
<-L
<.L
<.L
<+L
<-L
<.L
<+L
<-L
<.L
<.L
<+L
<-L
<.L
<+L
<-L
<.L
<.L
<+L
<-L
<.L
<+L
<-L
<.L
<.L
<+L
<-L
<.L
<+L
<-L
<.L
<.L
<+L
<-L
<.L
<+L
<-L
<.L
<.L
<+L
<-L
<.L
<+L
<-L
<.L
<.L
<+L
<-L
<.L
<+L
<-L
<.L
</T
</T
</T
< X
< X
< X
< X
< X
< X
< X
< X
< X
< T
< T
< T
< X
< X
< X
< X
< X
< X
< X
< X
< X
</T
</T
</T
</X
</X
</X
</X
</X
@@E
</X
@@E
</X
</X
</X
@@E
</T
</T
</T
</X
</X
</X
</X
</X
@@E
</X
@@E
</X
</X
</X
@@E
@Ad
< X
< X
< X
@Ad
</X
</X
</X
</X
</X
@Ad
</X
</X
</X
</X
@Ad
< X
< X
< X
@Ad
< X
< X
< X
< X
< X
< X
@Ad
< T
< T
< T
</T
</T
</T
< X
< X
< X
@@e
< X
< X
< X
@@e
< X
< X
< X
@@e
< X
< X
< X
@@e
< X
< X
< X
@@e
< X
< X
< X
@@e
<.L
<+L
<-L
<.L
<+L
<-L
<.L
<.L
<+L
<-L
<.L
<+L
<-L
<.L
<.L
<+L
<-L
<.L
<+L
<-L
<.L
<.L
<+L
<-L
<.L
<+L
<-L
<.L
<.L
<+L
<-L
<.L
<+L
<-L
<.L
<.L
<+L
<-L
<.L
<+L
<-L
<.L
< X
< X
< X
< X
< X
< X
< X
< X
< X
< X
< X
< X
< X
< X
< X
< X
< X
< X
</X
</X
</X
</X
</X
@@E
</X
@@E
</X
</X
</X
@@E
</X
</X
</X
</X
</X
@@E
</X
@@E
</X
</X
</X
@@E
< X
< X
< X
@@e
< X
< X
< X
@@e
< X
< X
< X
@@e
< X
< X
< X
@@e
< X
< X
< X
@@e
< X
< X
< X
@@e
<.L
<+L
<-L
<.L
<+L
<-L
<.L
<.L
<+L
<-L
<.L
<+L
<-L
<.L
@Ad
< X
< X
< X
@Ad
</X
</X
</X
</X
</X
@Ad
</X
</X
</X
</X
@Ad
< X
< X
< X
@Ad
< X
< X
< X
< X
< X
< X
@Ad
<.L
<+L
<-L
<.L
<+L
<-L
<.L
<.L
<+L
<-L
<.L
<+L
<-L
<.L
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L.\
L+\
L-\
L.\
L+\
L-\
L.\
L.\
L+\
L-\
L.\
L+\
L-\
L.\
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L.\
L+\
L-\
L.\
L+\
L-\
L.\
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L.\
L+\
L-\
L.\
L+\
L-\
L.\
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L+\
L-\
L.\
L+\
L-\
L.\
@@d$
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
P0\
P1\
P2\
P0\
P1\
P2\
P0\
P1\
P2\
P0\
P1\
P2\
P0\
P1\
P2\
P0\
P1\
P2\
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
> d
> d
> d
> d
>/d
>/d
>/d
>/d
> d
> d
> d
> d
>,|
>,|
>,|
>,|
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
69\
6:\
6;\
69\
6:\
6;\
69\
6:\
6;\
69\
6:\
6;\
D9\
D:\
D;\
D9\
D:\
D;\
D9\
D:\
D;\
D9\
D:\
D;\
T3\
T4\
T5\
T3\
T4\
T5\
T3\
T4\
T5\
T3\
T4\
T5\
 &
 & 
 &$
 &(
'&
'& 
'&$
'&(
L+\
L-\
L.\
L+\
L-\
L.\
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L+\
L-\
L.\
L+\
L-\
L.\
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
L.L
L+L
L-L
L.L
L+L
L-L
L.L
L/T
L/T
L/T
3L/X
3L/X
3L/X
@@D
@@d
-#,
-#,
-#0
.#4
/#,
/#,
/#0
1#4
3#8
3#8
3#<
D#,
D#,
D#0
E#4
f#@
f#@
f#D
g#H
g#H
g#L
h#P
h#P
h#T
i#X
i#X
i#L
j#\
j#\
j#T
k#`
k#`
k#D
"$,
"$,
"$0
$$4
($,
($,
($0
*$4
.$,
.$,
.$0
0$4
8$,
8$,
8$0
:$4
>$,
>$,
>$0
@$4
D$,
D$,
D$0
F$4
l$d
l$d
l$h
n$l
n$l
n$D
u$4
v$,
v$,
v$0
w$4
x$,
x$,
x$0
y$4
B%x
B%x
B%|
)&4
+&4
,&p
,&p
,&t
.&p
.&p
.&t
G&4
H&,
H&,
H&0
`&d
`&d
`&h
a&l
a&l
a&D
Approximate(
 sec)
NOT IMPLEMENTED YET
ASSERTION FAILED: %s
SHOULD NEVER BE REACHED
ASSERTION FAILED: 
ARGUMENT BAD: %s, %s
warning
info
debug
Unknown logging level: %s
Unknown logging channel: %s
%s(%d) : %s
xmlns
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/AutomaticThread.cpp
void WTF::AutomaticThread::start(const WTF::AbstractLocker &)
WTF::AutomaticThread
auto WTF::AutomaticThread::start(const WTF::AbstractLocker &)::(anonymous class)::operator()() const
*** WebKit discarding exception: <%@> %@
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/cf/CFURLExtras.cpp
RetainPtr<CFDataRef> WTF::bytesAsCFData(CFURLRef)
WTF::String WTF::bytesAsString(CFURLRef)
Vector<uint8_t, URLBytesVectorInlineCapacity> WTF::bytesAsVector(CFURLRef)
bool WTF::isSameOrigin(CFURLRef, const WTF::URL &)
Wall
Monotonic
Approximate
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/ClockType.cpp
void WTF::printInternal(WTF::PrintStream &, WTF::ClockType)
AppleCollationOrder
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/ConcurrentPtrHashSet.cpp
bool WTF::ConcurrentPtrHashSet::addSlow(WTF::ConcurrentPtrHashSet::Table *, unsigned int, unsigned int, unsigned int, void *)
void WTF::ConcurrentPtrHashSet::resizeIfNecessary()
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/ConcurrentPtrHashSet.h
bool WTF::ConcurrentPtrHashSet::containsImpl(void *) const
bool WTF::ConcurrentPtrHashSet::addImpl(void *)
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/LockAlgorithmInlines.h
static void WTF::LockAlgorithm<unsigned int, 1, 2, WTF::CountingLock::LockHooks>::lockSlow(Atomic<LockType> &) [LockType = unsigned int, isHeldBit = 1, hasParkedBit = 2, Hooks = WTF::CountingLock::LockHooks]
Lock not parked!
Invalid value for lock: 
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/posix/CPUTimePOSIX.cpp
static WTF::Seconds WTF::CPUTime::forCurrentThread()
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/Deque.h
T &WTF::Deque<WTF::CrossThreadTask, 0>::first() [T = WTF::CrossThreadTask, inlineCapacity = 0]
%pid
*** DataLog output to "%s" ***
Warning: Could not open DataLog file %s for writing.
January
February
March
April
June
July
August
September
October
November
December
janfebmaraprmayjunjulaugsepoctnovdec
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/text/StringConcatenate.h
static unsigned int WTF::StringTypeAdapter<const unsigned char *>::computeLength(const LChar *)
Infinity
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/FastBitVector.cpp
void WTF::FastBitVectorWordOwner::resizeSlow(size_t)
Source object not allocated
v16@?0@"NSURL"8
-XXXXXXXX
WebKitGeneratedFileXXXXXX
createPKZip
sequesterResources
keepParent
copyResources
BOMCopierNew
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/cocoa/FileSystemCocoa.mm
BOMCopier initBOMCopierNew()
/System/Library/PrivateFrameworks/Bom.framework/Bom
void *BomLibrary()_block_invoke
BOMCopierCopyWithOptions
int initBOMCopierCopyWithOptions(BOMCopier, const char *, const char *, CFDictionaryRef)
BOMCopierFree
void initBOMCopierFree(BOMCopier)
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/Gigacage.cpp
void Gigacage::alignedFree(Gigacage::Kind, void *)
void Gigacage::free(Gigacage::Kind, void *)
void Gigacage::freeVirtualPages(Gigacage::Kind, void *, size_t)
void *Gigacage::malloc(Gigacage::Kind, size_t)
void *Gigacage::mallocArray(Gigacage::Kind, size_t, size_t)
null
true
false
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/JSONValues.cpp
Ref<WTF::JSONImpl::Value> WTF::JSONImpl::ArrayBase::get(size_t) const
Trying to free JSValue that is not caged: 
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/JSValueMalloc.cpp
void WTF::jsValueFree(void *)
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/ThreadSpecific.h
T *WTF::ThreadSpecific<WTF::LineBreakIteratorPool, WTF::CanBeGCThread::False>::set() [T = WTF::LineBreakIteratorPool, canBeGCThread = WTF::CanBeGCThread::False]
static void WTF::LockAlgorithm<unsigned char, '\x01', '\x02'>::lockSlow(Atomic<LockType> &) [LockType = unsigned char, isHeldBit = '\x01', hasParkedBit = '\x02', Hooks = WTF::EmptyLockHooks<unsigned char>]
Language
com.apple.WebKit
RefCountedLeaks
Process
Threading
MemoryPressure
, invalid
value
invalid
POSITIVE_INFINITY
NEGATIVE_INFINITY
numerator
denominator
flags
start
Unable to shrink memory footprint of process (%zu MB) below the kill thresold (%zu MB). Killed
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/MemoryPressureHandler.cpp
void WTF::MemoryPressureHandler::shrinkOrDie(size_t)
Total
void WTF::MemoryPressureHandler::setDispatchQueue(OSObjectPtr<dispatch_queue_t> &&)
Unrestricted
Conservative
Strict
v8@?0
org.WebKit.lowMemory
v12@?0i8
org.WebKit.lowMemory.begin
org.WebKit.lowMemory.end
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/MetaAllocator.cpp
MetaAllocator::FreeSpacePtr WTF::MetaAllocator::findAndRemoveFreeSpace(size_t)
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/WTFConfig.h
WTF::Config::AssertNotFrozenScope::AssertNotFrozenScope()
WTF::Config::AssertNotFrozenScope::~AssertNotFrozenScope()
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/RedBlackTree.h
static NodeType *WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode, unsigned long>::treeMinimum(NodeType *) [NodeType = WTF::MetaAllocator::FreeSpaceNode, KeyType = unsigned long]
const NodeType *WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode, unsigned long>::Node::successor() const [NodeType = WTF::MetaAllocator::FreeSpaceNode, KeyType = unsigned long]
void WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode, unsigned long>::removeFixup(NodeType *, NodeType *) [NodeType = WTF::MetaAllocator::FreeSpaceNode, KeyType = unsigned long]
void WTF::RedBlackTree<WTF::MetaAllocatorHandle, void *>::insert(NodeType *) [NodeType = WTF::MetaAllocatorHandle, KeyType = void *]
void WTF::RedBlackTree<WTF::MetaAllocatorHandle, void *>::treeInsert(NodeType *) [NodeType = WTF::MetaAllocatorHandle, KeyType = void *]
static NodeType *WTF::RedBlackTree<WTF::MetaAllocatorHandle, void *>::treeMinimum(NodeType *) [NodeType = WTF::MetaAllocatorHandle, KeyType = void *]
void WTF::RedBlackTree<WTF::MetaAllocatorHandle, void *>::removeFixup(NodeType *, NodeType *) [NodeType = WTF::MetaAllocatorHandle, KeyType = void *]
NodeType *WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode, unsigned long>::findLeastGreaterThanOrEqual(const KeyType &) const [NodeType = WTF::MetaAllocator::FreeSpaceNode, KeyType = unsigned long]
void WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode, unsigned long>::insert(NodeType *) [NodeType = WTF::MetaAllocator::FreeSpaceNode, KeyType = unsigned long]
void WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode, unsigned long>::treeInsert(NodeType *) [NodeType = WTF::MetaAllocator::FreeSpaceNode, KeyType = unsigned long]
Monotonic(
 sec)
IDNScriptWhiteList.txt
 #%*[^
]%*[
 %32[^# 
]%*[^# 
WTF_numberOfProcessorCores
WARNING: failed to parse WTF_numberOfProcessorCores=%s
initial string... lol
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/PageBlock.cpp
size_t WTF::pageSize()
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/ParallelHelperPool.cpp
WTF::ParallelHelperClient::ParallelHelperClient(RefPtr<WTF::ParallelHelperPool> &&)
void WTF::ParallelHelperClient::setTask(RefPtr<SharedTask<void ()>> &&)
void WTF::ParallelHelperClient::runTask(const RefPtr<SharedTask<void ()>> &)
WTF::ParallelHelperPool::~ParallelHelperPool()
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/ParkingLot.cpp
static ParkingLot::ParkResult WTF::ParkingLot::parkConditionallyImpl(const void *, const ScopedLambda<bool ()> &, const ScopedLambda<void ()> &, const WTF::TimeWithDynamicClockType &)
void WTF::(anonymous namespace)::ensureHashtableSize(unsigned int)
auto WTF::ParkingLot::unparkOneImpl(const void *, const ScopedLambda<intptr_t (ParkingLot::UnparkResult)> &)::(anonymous class)::operator()(bool) const
StringView
String
(null StringImpl*)
StringImpl*
%lld
%llu
(Out of memory while converting 
 to utf8)
(failed to convert 
true
false
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/RandomDevice.cpp
void WTF::RandomDevice::cryptographicallyRandomValues(unsigned char *, size_t)
Per-tag breakdown of memory reclaimed by pressure handler:
  ## %16s %10s %10s %10s
VM Tag
Before
After
Diff
  %02X %16s %10ld %10ld %10ld
CG image
CG raster data
CoreServices
dylib
Foundation
ImageIO
IOAccelerator
IOSurface
IOKit
Gigacage
JSC JIT
IsoHeap
CoreAnimation
libdispatch
malloc
malloc (huge)
malloc (large)
malloc (medium)
malloc (nano)
malloc (small)
malloc (tiny)
os_alloc_once
SQLite
Stack
bmalloc
pmap (unshared)
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/RunLoop.cpp
static void WTF::RunLoop::initializeMain()
static void WTF::RunLoop::initializeWeb()
virtual void WTF::RunLoop::dispatch(Function<void ()> &&)
void WTF::RunLoop::dispatchAfter(WTF::Seconds, Function<void ()> &&)
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/ThreadSpecific.h
T *WTF::ThreadSpecific<WTF::RunLoop::Holder, WTF::CanBeGCThread::False>::set() [T = WTF::RunLoop::Holder, canBeGCThread = WTF::CanBeGCThread::False]
%s %d
Unknown error
 sec
%02X
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/threads/Signals.cpp
void WTF::SignalHandlers::add(WTF::Signal, WTF::SignalHandler &&)
We should not have called catch_exception_raise(), please file a bug at bugs.webkit.org
We should not have called catch_mach_exception_raise_state_identity, please file a bug at bugs.webkit.org
kern_return_t WTF::catch_mach_exception_raise_state(mach_port_t, exception_type_t, const mach_exception_data_t, mach_msg_type_number_t, int *, const thread_state_t, mach_msg_type_number_t, thread_state_t, mach_msg_type_number_t *)
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/WTFConfig.h
WTF::Config::AssertNotFrozenScope::AssertNotFrozenScope()
WTF::Config::AssertNotFrozenScope::~AssertNotFrozenScope()
exception_mask_t WTF::toMachMask(WTF::Signal)
thread set port failed due to 
auto WTF::startMachExceptionHandlerThread()::(anonymous class)::operator()() const
auto WTF::startMachExceptionHandlerThread()::(anonymous class)::operator()() const_block_invoke
v8@?0
auto WTF::addSignalHandler(WTF::Signal, WTF::SignalHandler &&)::(anonymous class)::operator()() const
We somehow got called for an unknown signal 
, help.
Unable to restore the default handler while processing signal 
 the process is probably deadlocked. (errno: 
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/threads/Signals.h
std::tuple<int, std::optional<int>> WTF::toSystemSignal(WTF::Signal)
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/SixCharacterHash.cpp
unsigned int WTF::sixCharacterHashStringToInteger(const char *)
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/StackTrace.cpp
static std::unique_ptr<StackTrace> WTF::StackTrace::captureStackTrace(int, int)
%s%s%-3d %p %s
%s%s%-3d %p
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/text/StringBuilder.cpp
void WTF::StringBuilder::reifyString() const
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/text/StringBuilder.h
unsigned int WTF::StringBuilder::length() const
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/text/StringImpl.cpp
WTF::CString WTF::StringImpl::utf8(WTF::ConversionMode) const
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/text/StringImpl.h
unsigned int WTF::lengthOfNullTerminatedString(const CharacterType *) [CharacterType = char16_t]
WTF::String-based allocator
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/text/StringView.cpp
WTF::CString WTF::StringView::utf8(WTF::ConversionMode) const
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/SuspendableWorkQueue.cpp
virtual void WTF::SuspendableWorkQueue::dispatchSync(Function<void ()> &&)
v8@?0
WEBKIT_SIGNPOSTS_ENABLED
Signposts
loose
normal
strict
AppleTextBreakLocale
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/Threading.cpp
static Ref<WTF::Thread> WTF::Thread::create(const char *, Function<void ()> &&, WTF::ThreadType, WTF::Thread::QOS)
Thread:
JSC_SIGNAL_FOR_GC
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/posix/ThreadingPOSIX.cpp
Expected<void, WTF::Thread::PlatformSuspendError> WTF::Thread::suspend(const WTF::ThreadSuspendLocker &)
size_t WTF::Thread::getRegisters(const WTF::ThreadSuspendLocker &, WTF::PlatformRegisters &)
JavaScript garbage collection failed because thread_get_state returned an error (%d). This is probably the result of running inside Rosetta, which is not supported.
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/TimeWithDynamicClockType.cpp
static WTF::TimeWithDynamicClockType WTF::TimeWithDynamicClockType::now(WTF::ClockType)
WTF::WallTime WTF::TimeWithDynamicClockType::wallTime() const
WTF::MonotonicTime WTF::TimeWithDynamicClockType::monotonicTime() const
WTF::ApproximateTime WTF::TimeWithDynamicClockType::approximateTime() const
WTF::WallTime WTF::TimeWithDynamicClockType::approximateWallTime() const
WTF::MonotonicTime WTF::TimeWithDynamicClockType::approximateMonotonicTime() const
WTF::Seconds WTF::TimeWithDynamicClockType::operator-(const WTF::TimeWithDynamicClockType &) const
bool WTF::TimeWithDynamicClockType::operator<(const WTF::TimeWithDynamicClockType &) const
bool WTF::TimeWithDynamicClockType::operator>(const WTF::TimeWithDynamicClockType &) const
bool WTF::TimeWithDynamicClockType::operator<=(const WTF::TimeWithDynamicClockType &) const
bool WTF::TimeWithDynamicClockType::operator>=(const WTF::TimeWithDynamicClockType &) const
%s: %u calls, mean duration: %.6fms, total duration: %.6fms, max duration %.6fms
javascript
text/plain
webkit-fake-url://
file://
blank
srcdoc
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/text/StringBuilder.h
unsigned int WTF::StringBuilder::length() const
about:blank
about:srcdoc
mailto
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/URLParser.cpp
bool WTF::URLParser::copyBaseWindowsDriveLetter(const WTF::URL &)
void WTF::URLParser::copyASCIIStringUntil(const WTF::String &, size_t)
void WTF::URLParser::syntaxViolation(const CodePointIterator<CharacterType> &) [CharacterType = unsigned char]
void WTF::URLParser::syntaxViolation(const CodePointIterator<CharacterType> &) [CharacterType = char16_t]
void WTF::URLParser::parse(const CharacterType *, const unsigned int, const WTF::URL &, const WTF::URLTextEncoding *) [CharacterType = unsigned char]
bool WTF::URLParser::parsePort(CodePointIterator<CharacterType> &) [CharacterType = unsigned char]
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/Expected.h
void std::experimental::__expected_detail::__expected_terminate()
uint64_t WTF::pow256(size_t)
void WTF::URLParser::parse(const CharacterType *, const unsigned int, const WTF::URL &, const WTF::URLTextEncoding *) [CharacterType = char16_t]
bool WTF::URLParser::parsePort(CodePointIterator<CharacterType> &) [CharacterType = char16_t]
auto WTF::URLParser::internationalDomainNameTranscoder()::(anonymous class)::operator()() const
 000000000000
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/unicode/UTF8Conversion.cpp
bool WTF::Unicode::convertUTF8ToUTF16Impl(const char *, const char *, UChar **, UChar *, bool *) [replaceInvalidSequences = false]
bool WTF::Unicode::convertUTF8ToUTF16Impl(const char *, const char *, UChar **, UChar *, bool *) [replaceInvalidSequences = true]
kern.bootsessionuuid
Wall(
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/WTFConfig.cpp
static void WTF::Config::permanentlyFreeze()
auto WTF::setPermissionsOfConfigPage()::(anonymous class)::operator()() const
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/text/WTFString.cpp
WTF::CString WTF::String::utf8(WTF::ConversionMode) const
WTF::String WTF::fromUTF8Impl(const LChar *, size_t) [replaceInvalidSequences = false]
WTF::String WTF::fromUTF8Impl(const LChar *, size_t) [replaceInvalidSequences = true]
Primitive Gigacage
JSValue Gigacage
Common Primitive
Attempting to teleport heaps
pas_segregated_partial_view/alloc_bits
attempt to free bitfit page header
previous bit is not free or end of object
free bit set
attempt to shrink to a larger size
object falls off end of page
[LibPasBmallocHeapType = 
primitiveHeapRefForTypeWithFlexibleArrayMember
ObjectWithFlexibleArrayMember, 
%.*s
Size = %zu, Alignment = %zu, Type = 
WebKit Using System Malloc
WebKitPasStatusReporter
Malloc
MallocLogFile
MallocGuardEdges
MallocDoNotProtectPrelude
MallocDoNotProtectPostlude
MallocStackLogging
MallocStackLoggingNoCompact
MallocStackLoggingDirectory
MallocScribble
MallocCheckHeapStart
MallocCheckHeapEach
MallocCheckHeapSleep
MallocCheckHeapAbort
MallocErrorAbort
MallocCorruptionAbort
MallocHelp
DYLD_INSERT_LIBRARIES
libgmalloc
FATAL: Disabling Primitive gigacage is forbidden, but we don't want that in this process.
FATAL: Could not allocate gigacage memory with maxAlignment = %lu, totalSize = %lu.
(Make sure you have not set a virtual memory limit.)
GIGACAGE_ENABLED
Warning: disabling gigacage because GIGACAGE_ENABLED=%s!
Warning: invalid argument to GIGACAGE_ENABLED: %s
bmalloc_IsoHeap
Object not allocated
pas_ptr_hash_set/table
pas_baseline_allocator_table
pas_ptr_hash_map/table
%p:%zu: found empty when setting max_free
%p:%zu: found non-empty page that is dead when taking last empty.
%p:%zu: found empty page that is not dead when taking last empty.
page_is_dead = %d
free_granules.num_free_granules = %zu
free_granules.num_already_decommitted_granules = %zu
%p:%zu: found empty when setting max_free
pas_bitfit_directory_view_vector/spine
pas_bitfit_directory_view_vector/segment
pas_bitfit_directory_max_free_vector/spine
pas_bitfit_directory_max_free_vector/segment
pas_bitfit_directory_segmented_bitvectors/spine
pas_bitfit_directory_segmented_bitvectors/segment
pas_bitfit_heap
free bits: 
 end bits: 
           
Thread %p encountered bitfit alloaction error.
Bits for page %p (%s):
null
bmalloc_small_bitfit
bmalloc_medium_bitfit
bmalloc_marge_bitfit
jit_small_bitfit
jit_medium_bitfit
pas_bitfit_view
become unprocessed on note_max_free
pas_large_expendable_memory
pas_reserved_memory_provider
pas_basic_heap_page_caches
Large heap did not find object
: %llu
pas_virtual_range_min_heap/outline_array
pas_basic_heap_runtime_config
/Library/Caches/com.apple.xbs/Sources/bmalloc_Sim/Source/bmalloc/libpas/src/libpas/pas_enumerable_range_list.c
void pas_enumerable_range_list_append(pas_enumerable_range_list *, pas_range)
!chunk || chunk->num_entries == PAS_ENUMERABLE_RANGE_LIST_CHUNK_SIZE
pas_enumerable_range_list_chunk
chunk->num_entries < PAS_ENUMERABLE_RANGE_LIST_CHUNK_SIZE
chunk->num_entries <= PAS_ENUMERABLE_RANGE_LIST_CHUNK_SIZE
_Bool pas_enumerable_range_list_iterate_remote(pas_enumerable_range_list *, pas_enumerator *, pas_enumerable_range_list_iterate_remote_callback, void *)
/Library/Caches/com.apple.xbs/Sources/bmalloc_Sim/Source/bmalloc/libpas/src/libpas/pas_enumerate_bitfit_heaps.c
_Bool enumerate_bitfit_heap_callback(pas_enumerator *, __pas_heap *, void *)
!arg
_Bool view_callback(pas_enumerator *, pas_compact_atomic_bitfit_view_ptr *, size_t, void *)
page_boundary
page
/Library/Caches/com.apple.xbs/Sources/bmalloc_Sim/Source/bmalloc/libpas/src/libpas/pas_enumerate_large_heaps.c
_Bool pas_enumerate_large_heaps(pas_enumerator *)
_Bool range_list_iterate_add_large_payload_callback(pas_enumerator *, pas_range, void *)
!pas_range_is_empty(range)
pas_range_begin_min_heap/outline_array
/Library/Caches/com.apple.xbs/Sources/bmalloc_Sim/Source/bmalloc/libpas/src/libpas/pas_enumerate_segregated_heaps.c
_Bool pas_enumerate_segregated_heaps(pas_enumerator *)
pas_is_wrapped_local_view_cache_node(layout_node)
void consider_allocator(pas_enumerator *, enumeration_context *, pas_local_allocator *)
!pas_local_allocator_config_kind_is_bitfit(allocator->config_kind)
!"Should not be reached"
local_allocator_map/table
_Bool local_allocator_map_entry_is_empty_or_deleted(local_allocator_map_entry)
!entry.head
_Bool local_allocator_map_entry_is_empty(local_allocator_map_entry)
_Bool local_allocator_map_entry_is_deleted(local_allocator_map_entry)
_Bool collect_shared_page_directories_heap_callback(pas_enumerator *, __pas_heap *, void *)
config
_Bool shared_page_directory_view_callback(pas_enumerator *, pas_segregated_view, void *)
pas_segregated_view_get_kind(view) == pas_segregated_shared_view_kind
_Bool enumerate_shared_view(pas_enumerator *, pas_segregated_shared_view *, pas_segregated_shared_page_directory *, enumeration_context *)
!view->is_owned
Invalid view kind in size directory: %s
_Bool size_directory_view_callback(pas_enumerator *, pas_segregated_view, void *)
_Bool enumerate_exclusive_view(pas_enumerator *, pas_segregated_exclusive_view *, enumeration_context *)
!allocator_node->next
allocator
_Bool enumerate_partial_view(pas_enumerator *, pas_segregated_partial_view *, enumeration_context *)
shared_view
exclusive_view
ineligible_exclusive_view
shared_handle
partial_view
size_directory
/Library/Caches/com.apple.xbs/Sources/bmalloc_Sim/Source/bmalloc/libpas/src/libpas/pas_enumerate_unaccounted_pages_as_meta.c
_Bool pas_enumerate_unaccounted_pages_as_meta(pas_enumerator *)
page > span_end
pas_ptr_min_heap/outline_array
/Library/Caches/com.apple.xbs/Sources/bmalloc_Sim/Source/bmalloc/libpas/src/libpas/pas_enumerator.c
pas_enumerator *pas_enumerator_create(pas_root *, pas_enumerator_reader, void *, pas_enumerator_recorder, void *, pas_enumerator_meta_recording_mode, pas_enumerator_payload_recording_mode, pas_enumerator_object_recording_mode)
result->root->magic == PAS_ROOT_MAGIC
result->root->num_heap_configs == pas_heap_config_kind_num_kinds
remote_config->kind == config->kind
void *pas_enumerator_read_compact(pas_enumerator *, void *)
remote_address >= (void*)((uintptr_t)enumerator->compact_heap_remote_base + enumerator->compact_heap_guard_size)
remote_address < (void*)((uintptr_t)enumerator->compact_heap_remote_base + enumerator->compact_heap_size)
void *pas_enumerator_read(pas_enumerator *, void *, size_t)
remote_address
(uintptr_t)remote_address + size <= (uintptr_t)compact_heap_end
void pas_enumerator_add_unaccounted_pages(pas_enumerator *, void *, size_t)
pas_is_aligned((uintptr_t)remote_address, enumerator->root->page_malloc_alignment)
pas_is_aligned(size, enumerator->root->page_malloc_alignment)
(uint64_t)size < ((uint64_t)1 << PAS_ADDRESS_BITS)
_Bool pas_enumerator_exclude_accounted_page(pas_enumerator *, void *)
void pas_enumerator_exclude_accounted_pages(pas_enumerator *, void *, size_t)
void pas_enumerator_record(pas_enumerator *, void *, size_t, pas_enumerator_record_kind)
void pas_enumerator_record_page_payload_and_meta(pas_enumerator *, uintptr_t, uintptr_t, uintptr_t, pas_page_granule_use_count *, uintptr_t, uintptr_t)
payload_begin < page_size
payload_end <= page_size
payload_begin < payload_end
!use_counts
page_size > granule_size
use_counts
/Library/Caches/com.apple.xbs/Sources/bmalloc_Sim/Source/bmalloc/libpas/src/libpas/pas_enumerator_region.c
void *pas_enumerator_region_allocate(pas_enumerator_region **, size_t)
allocation_result.result
allocation_result.result == allocation_result.left_padding
!allocation_result.left_padding_size
region->size - region->offset >= size
pas_fast_large_free_heap_node
pas_fast_megapage_table/instance
pas_heap
null
pas_utility
bmalloc
%.0lf%% Alloc: %zu/%zu (CO)/%zu (CT)/%zu (R); Frag: %zu (%.0lf%%)
; Cached: %zu
pas_heap_table
pas_large_expendable_memory
pas_range_min_heap/outline_array
pas_large_utility_free_heap/chunk
pas_large_heap_physical_page_sharing_cache/chunk
pas_tiny_large_map_second_level_hashtable
pas_tiny_large_map_hashtable/table
pas_tiny_large_map_second_level_hashtable/table
pas_small_large_map_hashtable/table
pas_large_map_hashtable/table
pas_large_sharing_node
pas_large_sharing_min_heap/outline_array
pas_lenient_compact_unsigned_ptr/box
pas_lock_free_read_ptr_ptr_hashtable/table
pas_megapage_cache/chunk
pas_page_header_table/header
pas_page_sharing_pool_segmented_delta_bitvector/spine
pas_page_sharing_pool_segmented_delta_bitvector/segment
pas_page_sharing_pool_segmented_participant_vector/spine
pas_page_sharing_pool_segmented_participant_vector/segment
pas_page_sharing_pool_min_heap/outline_array
pas_ptr_worklist/worklist
pas_redundant_local_allocator_node
pas_root/static_heaps
pas_root/heap_configs
pas_malloc_zone_and_root_for_libmalloc_introspection
WebKit Malloc
pas_scavenger_data
JavaScriptCore libpas scavenger
pas_segregated_directory_data
pas_segregated_directory_data/sharing_payload
pas_segregated_directory_segmented_bitvectors/spine
pas_segregated_directory_segmented_bitvectors/segment
pas_segregated_directory_view_vector/array
pas_segregated_exclusive_view
pas_segregated_heap_rare_data
pas_segregated_heap_rare_data/medium_directories
size_directory_min_heap/outline_array
pas_segregated_heap/index_to_size_directory
pas_segregated_heap/index_to_allocator_index
Alloc bit not set in pas_segregated_page_deallocate_with_page
null
pas_utility_small
bmalloc_small_segregated
bmalloc_medium_segregated
pas_segregated_partial_view
pas_segregated_shared_handle
Erroneously found a null view at index = %zu, directory = %p.
Error: shared view %p (%s) has is_in_use_for_allocation_count = %u
partial_index = %zu, partial_view = %p, is_in_use_for_allocation = %s
pas_segregated_shared_view
pas_segregated_size_directory
pas_segregated_size_directory+pas_bitfit_size_class
pas_extended_segregated_size_directory_data
pas_segregated_size_directory_data
pas_segregated_size_directory_data/full_alloc_bits
pas_extended_segregated_size_directory_data/full_use_counts
pas_exclusive_view_template_memo_table/table
pas_shared_page_directory_by_size_data
Size = %zu
pas_simple_large_free_heap/free_list
            %s Global Dir (%p): 
                
            Global Size Dir %p(%u/%s): Num Views: %zu
, Has Base Data
, Has Data
, Has TLA
, Enabled Exclusives
                Partials: 
                Exclusives: 
        Shared Page Dir %p(%s, 
): Num Views: %zu, 
            
Large %p: 
    Large Map:
        Tiny Map: Num Entries: %u, Num Deleted: %u, Table Size: %u
        Small Fallback Map: Num Entries: %u, Num Deleted: %u, Table Size: %u
        Fallback Map: Num Entries: %u, Num Deleted: %u, Table Size: %u
Heap Table Size: %u
Alloc Internal: %zu, External: %zu
Alloc: %zu, Peak Alloc: %zu, Mapped: %zu, Free: %zu
        Bitfit Heap %p: 
        Segregated Heap %p: 
Has Rare Data
Has Index Lookup
    Heap %p:
        %s, 
        Total Summary: 
        
    Num Heaps: %zu
    Shared Page Directories:
    All Heaps Non-Utility Segregated Summary: 
    All Heaps Non-Utility Bitfit Summary: 
    All Heaps Non-Utility Large Summary: 
    Large sharing pool contents:
    Utility Heap:
    Segregated Exclusive Fragmentation Histogram:
    Segregated Partial Fragmentation Histogram:
    Segregated Exclusive Fragmentation: %zu
    Segregated Shared Fragmentation: %zu
    Total Segregated Fragmentation: %zu
    Large Fragmentation: %zu
    Total Fragmentation: %zu
Num Size Directories With Data
Num Size Directories With TLAs
Num Size Directories With Exclusives
    Baseline Allocators:
        N/A
         %zu: directory = %p, %s
    Thread Local Cache Layout:
        %u: %s, directory = %p
    Thread Local Caches:
        %p(%zu): node = %p
            Deallocation logged objects = %u
            %u: directory = %p, %s
    Mprotect Decommitted: %s
    Physical Page Sharing Pool Balance: %ld
    Compact Expendable Memory: 
    Large Expendable Memory: 
%d: Heap Status:
    Heap Table: 
    Immortal Heap: 
    Compact Large Utility Free Heap: 
    Large Utility Free Heap: 
    Compact Bootstrap Free Heap: 
    Bootstrap Free Heap: 
Small
Medium
Marge
%s    Occupancy: 
%s     Max Free: 
%s  Empty (bit): 
%s Last Empty+1: 
%s    Committed: 
%s%7u Bytes: 
%s  Unprocessed: 
%s Empty (free): 
%s        Kind: 
%s   Occupancy: 
%s        Bump: 
%s    Eligible: 
%s First Elgbl: 
%s       Empty: 
%s Last Empt+1: 
%s   Committed: 
        %p...%p: %s, %zu/%zu live (%.0lf%%), %llu
, %s
decommitted
committed
locked_by_heap_lock
        %zu..%zu: %zu
    %s: %zu/%zu (%.0lf%%)
inactive
partial
exclusive
segregated_size_directory
redundant_local_allocator
local_view_cache
Header = %p, Payload = %p...%p, Page States: 
%d: Num Heaps: %zu
pas_thread_local_cache
pas_thread_local_cache/should_stop_bitvector
Deallocation logging is disabled for %s/%s, but here we are.
shared
[%d] Failed to suspend pthread %p (mach thread %d) associated with TLC %p: %d
[%d] thread %p has id %llu
[%d] thread %p does not have id
[%d] thread %p has name %s
[%d] thread %p does not have name
pas_thread_local_cache_layout_segment
pas_thread_local_cache_node
Cannot allocate size = %zu (alignment = %zu, aligned_size = %zu, index = %zu) with utility heap.
pas_utility_heap_allocators
pas_utility_heap/page
[%d] pas panic: 
%s:%d: %s: assertion %s failed.
deallocation did fail at %p: %s
reallocation did fail with source_heap = %p, target_heap = %p, old_ptr = %p, old_size = %zu, new_size = %zu: %s
com.apple.WebKit.WebContent
DumpRenderTree
wasm
test
Test
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp
void JSC::DFG::SpeculativeJIT::emitInvalidationPoint(JSC::DFG::Node *)
Bailing compilation.
JSC::DFG::SilentRegisterSavePlan JSC::DFG::SpeculativeJIT::silentSavePlanForGPR(JSC::VirtualRegister, JSC::GPRReg)
node->isCellConstant()
void JSC::DFG::SpeculativeJIT::silentSpill(const JSC::DFG::SilentRegisterSavePlan &)
void JSC::DFG::SpeculativeJIT::silentFill(const JSC::DFG::SilentRegisterSavePlan &)
JITCompiler::JumpList JSC::DFG::SpeculativeJIT::jumpSlowForUnwantedArrayMode(JSC::GPRReg, JSC::DFG::ArrayMode)
void JSC::DFG::SpeculativeJIT::checkArray(JSC::DFG::Node *)
arrayMode.isSomeTypedArrayView()
void JSC::DFG::SpeculativeJIT::compileGetById(JSC::DFG::Node *, JSC::AccessType)
Bad use kind
void JSC::DFG::SpeculativeJIT::compileGetByIdFlush(JSC::DFG::Node *, JSC::AccessType)
void JSC::DFG::SpeculativeJIT::compileCurrentBlock()
!operand.isArgument() || operand.virtualRegister().toArgument() >= 0
SpeculativeJIT generating Node @
) at JIT offset 0x
DFG_fast_
void JSC::DFG::SpeculativeJIT::checkArgumentTypes()
OSR Entries:
    
void JSC::DFG::SpeculativeJIT::compilePutByVal(JSC::DFG::Node *)
Bad array mode type
node->op() == PutByVal || node->op() == PutByValDirect
JSC::DFG::GeneratedOperandType JSC::DFG::SpeculativeJIT::checkGeneratedTypeForToInt32(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileValueToInt32(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileUInt32ToNumber(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileDoubleAsInt32(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileDoubleRep(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileValueRep(JSC::DFG::Node *)
bool JSC::DFG::SpeculativeJIT::getIntTypedArrayStoreOperand(JSC::DFG::GPRTemporary &, JSC::GPRReg, JSC::DFG::Edge, JITCompiler::JumpList &, bool)
void JSC::DFG::SpeculativeJIT::compileGetByValOnFloatTypedArray(JSC::DFG::Node *, JSC::TypedArrayType, const ScopedLambda<std::tuple<JSValueRegs, DataFormat, CanUseFlush> (JSC::DataFormat)> &)
void JSC::DFG::SpeculativeJIT::compilePutByValForFloatTypedArray(JSC::DFG::Node *, JSC::TypedArrayType)
void JSC::DFG::SpeculativeJIT::compileGetPrivateName(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileGetPrivateNameByVal(JSC::DFG::Node *, JSC::JSValueRegs, JSC::JSValueRegs)
node->op() == GetPrivateName
m_graph.child(node, 1).useKind() == SymbolUse
void JSC::DFG::SpeculativeJIT::compileGetPrivateNameById(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileParseInt(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileInstanceOf(JSC::DFG::Node *)
node->child1().useKind() == UntypedUse
node->child2().useKind() == UntypedUse
void JSC::DFG::SpeculativeJIT::compileValueBitwiseOp(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileShiftOp(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileIsCellWithType(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileToObjectOrCallObjectConstructor(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileArithAdd(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileArithAbs(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileArithSub(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileArithNegate(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileArithMul(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileArithDiv(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileValueMod(JSC::DFG::Node *)
node->binaryUseKind() == UntypedUse || node->binaryUseKind() == AnyBigIntUse || node->binaryUseKind() == BigInt32Use
void JSC::DFG::SpeculativeJIT::compileArithMod(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileArithRounding(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileArithMinMax(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileValuePow(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileStringCompare(JSC::DFG::Node *, MacroAssembler::RelationalCondition)
void JSC::DFG::SpeculativeJIT::compileStringIdentCompare(JSC::DFG::Node *, MacroAssembler::RelationalCondition)
void JSC::DFG::SpeculativeJIT::compileArrayIndexOf(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileArrayPush(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileCheckStructure(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileCallDOM(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileCheckJSCast(JSC::DFG::Node *)
node->op() == CheckJSCast || node->op() == CheckNotJSCast
void JSC::DFG::SpeculativeJIT::compileToStringOrCallStringConstructorOrStringValueOf(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileNumberToStringWithValidRadixConstant(JSC::DFG::Node *, int32_t)
void JSC::DFG::SpeculativeJIT::compileNumberToStringWithRadix(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::emitNewTypedArrayWithSizeInRegister(JSC::DFG::Node *, JSC::TypedArrayType, JSC::DFG::RegisteredStructure, JSC::GPRReg)
void JSC::DFG::SpeculativeJIT::speculate(JSC::DFG::Node *, JSC::DFG::Edge)
void JSC::DFG::SpeculativeJIT::emitSwitchImm(JSC::DFG::Node *, JSC::DFG::SwitchData *)
void JSC::DFG::SpeculativeJIT::emitSwitchChar(JSC::DFG::Node *, JSC::DFG::SwitchData *)
void JSC::DFG::SpeculativeJIT::emitBinarySwitchStringRecurse(JSC::DFG::SwitchData *, const Vector<SpeculativeJIT::StringSwitchCase> &, unsigned int, unsigned int, unsigned int, JSC::GPRReg, JSC::GPRReg, JSC::GPRReg, unsigned int, bool)
void JSC::DFG::SpeculativeJIT::emitSwitchString(JSC::DFG::Node *, JSC::DFG::SwitchData *)
void JSC::DFG::SpeculativeJIT::emitSwitch(JSC::DFG::Node *)
Bad switch kind
void JSC::DFG::SpeculativeJIT::compileDefineDataProperty(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileDefineAccessorProperty(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::emitAllocateButterfly(JSC::GPRReg, JSC::GPRReg, JSC::GPRReg, JSC::GPRReg, JSC::GPRReg, MacroAssembler::JumpList &)
void JSC::DFG::SpeculativeJIT::compileGetMapBucketHead(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileNewArrayBuffer(JSC::DFG::Node *)
indexingMode & IsArray
void JSC::DFG::SpeculativeJIT::compileNewTypedArray(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileObjectKeysOrObjectGetOwnPropertyNames(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileObjectAssign(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileObjectCreate(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileNewInternalFieldObject(JSC::DFG::Node *)
Bad structure
void JSC::DFG::SpeculativeJIT::compileToPrimitive(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileToPropertyKey(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileToNumeric(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileCallNumberConstructor(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileGetPrototypeOf(JSC::DFG::Node *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSlowPathGenerator.h
virtual MacroAssembler::Call JSC::DFG::SlowPathGenerator::call() const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/MacroAssemblerX86Common.h
X86Registers::RegisterID JSC::MacroAssemblerX86Common::scratchRegister()
DFG_slow_
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.h
JSC::DFG::SpeculativeJIT::TrustedImmPtr::TrustedImmPtr(JSC::DFG::FrozenValue *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/TypedArrayType.h
void JSC::DFG::SpeculativeJIT::spill(JSC::VirtualRegister)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGNode.h
JSC::ECMAMode JSC::DFG::Node::ecmaMode()
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/MacroAssembler.h
static JSC::MacroAssemblerX86Common::DoubleCondition JSC::MacroAssembler::invert(JSC::MacroAssemblerX86Common::DoubleCondition)
JSC::DFG::SpeculateDoubleOperand::SpeculateDoubleOperand(JSC::DFG::SpeculativeJIT *, JSC::DFG::Edge)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGMinifiedIDInlines.h
JSC::DFG::MinifiedID::MinifiedID(JSC::DFG::Node *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGFlushFormat.h
void JSC::DFG::SpeculativeJIT::strictInt32Result(JSC::GPRReg, JSC::DFG::Node *, JSC::DataFormat, JSC::DFG::SpeculativeJIT::UseChildrenMode)
JSC::DFG::SpeculateStrictInt52Operand::SpeculateStrictInt52Operand(JSC::DFG::SpeculativeJIT *, JSC::DFG::Edge)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGUseKind.h
JSC::SpeculatedType JSC::DFG::typeFilterFor(JSC::DFG::UseKind)
void JSC::DFG::SpeculativeJIT::bitOp(JSC::DFG::NodeType, int32_t, JSC::GPRReg, JSC::GPRReg)
void JSC::DFG::SpeculativeJIT::bitOp(JSC::DFG::NodeType, JSC::GPRReg, JSC::GPRReg, JSC::GPRReg)
void JSC::DFG::SpeculativeJIT::shiftOp(JSC::DFG::NodeType, JSC::GPRReg, int32_t, JSC::GPRReg)
void JSC::DFG::SpeculativeJIT::shiftOp(JSC::DFG::NodeType, JSC::GPRReg, JSC::GPRReg, JSC::GPRReg)
JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand(JSC::DFG::SpeculativeJIT *, JSC::DFG::Edge)
JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand(JSC::DFG::SpeculativeJIT *, JSC::DFG::Edge, const JSC::DFG::SpeculateWhicheverInt52Operand &)
JSC::DFG::SpeculateInt52Operand::SpeculateInt52Operand(JSC::DFG::SpeculativeJIT *, JSC::DFG::Edge)
JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand(JSC::DFG::SpeculativeJIT *, JSC::DFG::Edge, JSC::DFG::OppositeShiftTag, const JSC::DFG::SpeculateWhicheverInt52Operand &)
void JSC::MacroAssemblerX86Common::floatingPointCompare(JSC::MacroAssemblerX86Common::DoubleCondition, JSC::AbstractMacroAssembler<JSC::X86Assembler>::FPRegisterID, JSC::AbstractMacroAssembler<JSC::X86Assembler>::FPRegisterID, JSC::AbstractMacroAssembler<JSC::X86Assembler>::RegisterID, Function) [Function = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/MacroAssemblerX86Common.h:2013:55)]
auto JSC::DFG::SpeculativeJIT::compileNewFunction(JSC::DFG::Node *)::(anonymous class)::operator()() const
JSC::DFG::Edge &JSC::DFG::Node::argumentsChild()
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/jit/AssemblyHelpers.h
static JSC::VirtualRegister JSC::AssemblyHelpers::argumentsStart(JSC::InlineCallFrame *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSGlobalObject.h
JSC::LazyClassStructure &JSC::JSGlobalObject::lazyTypedArrayStructure(JSC::TypedArrayType)
unsigned int JSC::logElementSize(JSC::TypedArrayType)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGOperations.h
char *(*JSC::DFG::operationNewTypedArrayWithSizeForType(JSC::TypedArrayType))(JSC::JSGlobalObject *, JSC::Structure *, intptr_t, char *)
int32_t JSC::DFG::Node::accessorAttributes()
char *(*JSC::DFG::operationNewTypedArrayWithOneArgumentForType(JSC::TypedArrayType))(JSC::JSGlobalObject *, JSC::Structure *, JSC::EncodedJSValue)
static JSC::GPRReg JSC::AssemblyHelpers::selectScratchGPR(JSC::RegisterSet)
unsigned int JSC::DFG::Node::storageChildIndex()
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGNodeType.h
unsigned int JSC::DFG::numExtraAtomicsArgs(JSC::DFG::NodeType)
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/text/StringConcatenate.h
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspace.h
JSC::Allocator JSC::IsoSubspace::allocatorFor(size_t, JSC::AllocatorForMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGClobberize.h
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2239:43), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2239:61), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2239:79), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2230:35)]
Unhandled ArrayMode opcode.
impossible array mode for get
impossible array mode for put
mode.isSomeTypedArrayView()
mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit
Unrecognized node type: 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGHeapLocation.h
JSC::DFG::LocationKind JSC::DFG::indexedPropertyLocForResultType(JSC::DFG::NodeFlags)
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2282:66), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2282:84), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2282:102), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2278:39)]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGAbstractInterpreterInlines.h
bool JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(unsigned int, JSC::DFG::Node *) [AbstractStateType = JSC::DFG::InPlaceAbstractState]
value.isType(typeFilterFor(variableAccessData->flushFormat()))
value.isType(typeFilterFor(data->format))
Bad flush format for argument
Bad opcode
No BigInt32 support
node->binaryUseKind() == UntypedUse
Unexpected node type
status[i].conditionSet().isEmpty()
void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::verifyEdge(JSC::DFG::Node *, JSC::DFG::Edge) [AbstractStateType = JSC::DFG::InPlaceAbstractState]
Edge verification error: 
 was expected to have type 
 but has type 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGFrozenValue.h
JSC::DFG::FrozenValue::FrozenValue(JSC::JSValue)
JSC::DFG::UseKind JSC::DFG::useKindFor(JSC::DFG::FlushFormat)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGAbstractValue.h
void JSC::DFG::AbstractValue::setNonCellType(JSC::SpeculatedType)
bool JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::handleConstantBinaryBitwiseOp(JSC::DFG::Node *) [AbstractStateType = JSC::DFG::InPlaceAbstractState]
auto JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(unsigned int, JSC::DFG::Node *)::(anonymous class)::operator()(double, double) const [AbstractStateType = JSC::DFG::InPlaceAbstractState]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGStructureAbstractValue.h
JSC::StructureSet JSC::DFG::StructureAbstractValue::toStructureSet() const
void JSC::DFG::SpeculativeJIT::emitUntypedOrAnyBigIntBitOp(JSC::DFG::Node *) [SnippetGenerator = JSC::JITBitAndGenerator, snippetSlowPathFunction = &JSC::DFG::operationValueBitAnd]
node->isBinaryUseKind(UntypedUse) || node->isBinaryUseKind(AnyBigIntUse) || node->isBinaryUseKind(HeapBigIntUse) || node->isBinaryUseKind(BigInt32Use)
void JSC::DFG::SpeculativeJIT::emitUntypedOrAnyBigIntBitOp(JSC::DFG::Node *) [SnippetGenerator = JSC::JITBitXorGenerator, snippetSlowPathFunction = &JSC::DFG::operationValueBitXor]
void JSC::DFG::SpeculativeJIT::emitUntypedOrAnyBigIntBitOp(JSC::DFG::Node *) [SnippetGenerator = JSC::JITBitOrGenerator, snippetSlowPathFunction = &JSC::DFG::operationValueBitOr]
void JSC::DFG::SpeculativeJIT::emitUntypedOrAnyBigIntBitOp(JSC::DFG::Node *) [SnippetGenerator = JSC::JITLeftShiftGenerator, snippetSlowPathFunction = &JSC::DFG::operationValueBitLShift]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/LinkBuffer.h
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)26432, T = JSC::AssemblerLabel]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/SmallStrings.h
JSC::JSString *JSC::SmallStrings::typeString(JSC::TypeofType) const
auto JSC::DFG::SpeculativeJIT::compileCallDOM(JSC::DFG::Node *)::(anonymous class)::operator()(JSC::DFG::Edge) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp
JSC::GPRReg JSC::DFG::SpeculativeJIT::fillJSValue(JSC::DFG::Edge)
spillFormat & DataFormatJS
Bad data format
Corrupt data format
void JSC::DFG::SpeculativeJIT::emitCall(JSC::DFG::Node *)
bad node type
isFlushed()
Graph::parameterSlotsForArgCount(numAllocatedArgs) <= m_jit.graph().m_parameterSlots
JSC::GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(JSC::DFG::Edge)
mustBeDataFormatInt32 == DataFormatInt32
JSC::GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt52(JSC::DFG::Edge, JSC::DataFormat)
spillFormat == DataFormatInt52 || spillFormat == DataFormatStrictInt52
JSC::FPRReg JSC::DFG::SpeculativeJIT::fillSpeculateDouble(JSC::DFG::Edge)
Expected 
 to have double format but instead it is spilled as 
info.registerFormat() == DataFormatDouble
JSC::GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateCell(JSC::DFG::Edge)
JSC::GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(JSC::DFG::Edge)
info.spillFormat() & DataFormatJS
void JSC::DFG::SpeculativeJIT::compileToBoolean(JSC::DFG::Node *, bool)
void JSC::DFG::SpeculativeJIT::emitBranch(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileGetByVal(JSC::DFG::Node *, const ScopedLambda<std::tuple<JSValueRegs, DataFormat, CanUseFlush> (JSC::DataFormat)> &)
void JSC::DFG::SpeculativeJIT::compileGetTypedArrayLengthAsInt52(JSC::DFG::Node *)
node->arrayMode().isSomeTypedArrayView()
void JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)
Bad result type
triggerIterator != m_jit.jitCode()->tierUpEntryTriggers.end()
Unexpected node
void JSC::DFG::SpeculativeJIT::compileDateGet(JSC::DFG::Node *)
None
Int32
Int52
StrictInt52
Double
Cell
Boolean
Storage
BigInt32
JSInt32
JSDouble
JSCell
JSBoolean
JSBigInt32
Dead
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/DataFormat.h
const char *JSC::dataFormatToString(JSC::DataFormat)
auto JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::(anonymous class)::operator()() const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/TypedArrayType.h
unsigned int JSC::logElementSize(JSC::TypedArrayType)
X86Assembler::Condition JSC::MacroAssemblerX86Common::x86Condition(JSC::AbstractMacroAssemblerBase::StatusCondition)
JSC::GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal(JSC::DFG::Edge, JSC::DataFormat &) [strict = false]
(spillFormat & DataFormatJS) || spillFormat == DataFormatInt32
!(type & SpecInt52Any)
JSC::GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal(JSC::DFG::Edge, JSC::DataFormat &) [strict = true]
void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::filterICStatus(JSC::DFG::Node *) [AbstractStateType = JSC::DFG::InPlaceAbstractState]
jsBody_
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::lower()
catchEntrypointIndex != 0
Function ready, beginning lowering.
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::createPhiVariables()
Bad Phi node result type
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/b3/B3ValueInlines.h
size_t JSC::B3::Value::adjacencyListOffset() const
    OSR exit #
 with availability: 
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::appendOSRExit(JSC::ExitKind, JSC::FTL::FormattedValue, const JSC::MethodOfGettingAValueProfile &, JSC::FTL::LValue, JSC::DFG::NodeOrigin, bool)
origin.exitOK
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::buildExitArguments(JSC::FTL::OSRExitDescriptor *, JSC::CodeOrigin, JSC::FTL::StackmapArgumentList &, JSC::FTL::FormattedValue, unsigned int)
Live bytecode local not available: operand = 
, availability = 
, origin = 
Could not find materialization for 
 in 
        Exit values: 
        Materializations: 
JSC::FTL::ExitValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::exitValueForAvailability(JSC::FTL::StackmapArgumentList &, const HashMap<JSC::DFG::Node *, JSC::FTL::ExitTimeObjectMaterialization *> &, JSC::DFG::Availability)
Invalid flush format
JSC::FTL::ExitValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::exitValueForNode(JSC::FTL::StackmapArgumentList &, const HashMap<JSC::DFG::Node *, JSC::FTL::ExitTimeObjectMaterialization *> &, JSC::DFG::Node *)
Cannot find value for node: 
(null)
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)10924, T = JSC::AssemblerLabel]
Compiling block 
Bailing because CFA didn't reach.
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:529:62), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:529:80), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:529:98), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:524:39)]
Lowering 
bool JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileNode(unsigned int)
Unrecognized node in FTL backend
Bailing.
Block 
 will bail also.
<out of memory while dumping graph>
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::lowJSValue(JSC::DFG::Edge, JSC::DFG::OperandSpeculationMode)
mode == ManualOperandSpeculation || edge.useKind() == UntypedUse
!isDouble(edge.useKind())
edge.useKind() != Int52RepUse
Value not defined: 
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::lowDouble(JSC::DFG::Edge)
isDouble(edge.useKind())
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::lowInt52(JSC::DFG::Edge, JSC::FTL::(anonymous namespace)::LowerDFGToB3::Int52Kind)
edge.useKind() == Int52RepUse
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::validateAIState(JSC::DFG::Node *)::(anonymous class)::operator()(JSC::CCallHelpers &, const JSC::B3::StackmapGenerationParams &)::(anonymous class)::operator()(Probe::Context &) const
input.isAnyInt()
Validation failed at node: @
Failed validating live value: @
Expected AI value = 
Unexpected value = 
Unexpected double value = 
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileUpsilon()
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::lowCell(JSC::DFG::Edge, JSC::DFG::OperandSpeculationMode)
mode == ManualOperandSpeculation || DFG::isCell(edge.useKind())
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLOutput.h
JSC::FTL::LValue JSC::FTL::Output::alreadyRegisteredFrozenPointer(DFG::FrozenValue *)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compilePhi()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileDoubleRep()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileValueRep()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileInt52Rep()
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/b3/B3CCallValue.h
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, const JSC::B3::Effects &, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *>]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileValueToInt32()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileBooleanToNumber()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetStack()
isConcrete(data->format)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compilePutStack()
Bad flush format
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::speculate(JSC::DFG::Edge)
Unsupported speculation use kind
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileIncOrDec()
m_node->child1().useKind() == UntypedUse
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileValueNegate()
    Patchpoint exception OSR exit #
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithAddOrSub()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::setInt52(JSC::DFG::Node *, JSC::FTL::LValue, JSC::FTL::(anonymous namespace)::LowerDFGToB3::Int52Kind)
Corrupt int52 kind
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithClz32()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithMul()
JSC::FTL::(anonymous namespace)::LowerDFGToB3::Int52Kind JSC::FTL::(anonymous namespace)::LowerDFGToB3::opposite(JSC::FTL::(anonymous namespace)::LowerDFGToB3::Int52Kind)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithDiv()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileValueMod()
m_node->binaryUseKind() == UntypedUse || m_node->binaryUseKind() == AnyBigIntUse
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithMod()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithMinOrMax()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithAbs()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithRound()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithFloor()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithCeil()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithTrunc()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithNegate()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileValueBitNot()
m_node->child1().useKind() == UntypedUse || m_node->child1().useKind() == AnyBigIntUse
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::emitBinaryBitOpSnippet(JSC::J_JITOperation_GJJ) [BinaryBitOpGenerator = JSC::JITBitAndGenerator]
node->isBinaryUseKind(UntypedUse) || node->isBinaryUseKind(AnyBigIntUse) || node->isBinaryUseKind(BigInt32Use)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::emitBinaryBitOpSnippet(JSC::J_JITOperation_GJJ) [BinaryBitOpGenerator = JSC::JITBitOrGenerator]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::emitBinaryBitOpSnippet(JSC::J_JITOperation_GJJ) [BinaryBitOpGenerator = JSC::JITBitXorGenerator]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileValueBitLShift()
m_node->isBinaryUseKind(UntypedUse) || m_node->isBinaryUseKind(AnyBigIntUse) || m_node->isBinaryUseKind(BigInt32Use)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCheckStructure()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArrayify()
Bad array type
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::isArrayTypeForArrayify(JSC::FTL::LValue, JSC::DFG::ArrayMode)
Unexpected original array
Corrupt array class
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetById(JSC::AccessType)
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compilePrivateBrandAccess(JSC::FTL::LValue, JSC::FTL::LValue, JSC::AccessType)::(anonymous class)::operator()(JSC::CCallHelpers &, const JSC::B3::StackmapGenerationParams &)::(anonymous class)::operator()(JSC::CCallHelpers &)::(anonymous class)::operator()(JSC::AccessType) const
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileSetPrivateBrand()
m_node->child1().useKind() == CellUse
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileHasOwnProperty()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compilePutById()
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileDeleteById()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileDeleteByVal()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetIndexedPropertyStorage()
isTypedView(m_node->arrayMode().typedArrayType())
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::isArrayTypeForCheckArray(JSC::FTL::LValue, JSC::DFG::ArrayMode)
JSC::JSType JSC::typeForTypedArrayType(JSC::TypedArrayType)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetArrayLength()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetTypedArrayLengthAsInt52()
m_node->arrayMode().isSomeTypedArrayView()
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetByValImpl()
m_node->arrayMode().type() == Array::Contiguous
Bad typed array type
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::loadFromIntTypedArray(JSC::FTL::TypedPointer, JSC::TypedArrayType)
Bad element size
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compilePutByVal()
child5.useKind() == KnownInt32Use
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::getIntTypedArrayStoreOperand(JSC::DFG::Edge, bool)
Output::StoreType JSC::FTL::(anonymous namespace)::LowerDFGToB3::storeType(JSC::TypedArrayType)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compilePutPrivateName()
child1.useKind() == UntypedUse
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compilePutPrivateNameById()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileAtomicsReadModifyWrite()
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileAtomicsReadModifyWrite()::(anonymous class)::operator()(JSC::FTL::LValue) const
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileDefineDataProperty()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileDefineAccessorProperty()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArrayPush()
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLAbstractHeapRepository.h
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArrayPop()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::initializeArrayElements(JSC::FTL::LValue, JSC::FTL::LValue, JSC::FTL::LValue, JSC::FTL::LValue)
heap
JSC::FTL::IndexedAbstractHeap *JSC::FTL::AbstractHeapRepository::forIndexingType(JSC::IndexingType)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArrayIndexOf()
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileNewFunction()::(anonymous class)::operator()() const
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileObjectAssign()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileObjectCreate()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileObjectKeysOrObjectGetOwnPropertyNames()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileNewInternalFieldObject()
Bad structure
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileNewArray()
Bad indexing type
Corrupt indexing type
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileNewArrayWithSpread()
use->child1()->op() == PhantomCreateRest
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::getSpreadLengthFromInlineCallFrame(JSC::InlineCallFrame *, unsigned int)
numberOfArgumentsToSkip < static_cast<unsigned>(INT32_MIN)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileNewTypedArray()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType, JSC::JSGlobalObject *, JSC::DFG::RegisteredStructure, JSC::FTL::LValue)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetPrototypeOf()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileToStringOrCallStringConstructorOrStringValueOf()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileStringFromCharCode()
childEdge.useKind() == Int32Use
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMultiGetByOffset()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMultiPutByOffset()
variant.kind() == PutByVariant::Transition
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCompareEq()
m_node->isBinaryUseKind(UntypedUse)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCompareStrictEq()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compare(const IntFunctor &, const DoubleFunctor &, JSC::C_JITOperation_TT, JSC::C_JITOperation_B_GJssJss, JSC::S_JITOperation_GJJ) [IntFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:10088:13), DoubleFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:10091:13)]
m_node->isBinaryUseKind(UntypedUse) || m_node->isBinaryUseKind(HeapBigIntUse) || m_node->isBinaryUseKind(AnyBigIntUse)
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, const JSC::B3::Effects &, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compare(const IntFunctor &, const DoubleFunctor &, JSC::C_JITOperation_TT, JSC::C_JITOperation_B_GJssJss, JSC::S_JITOperation_GJJ) [IntFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:10102:13), DoubleFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:10105:13)]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compare(const IntFunctor &, const DoubleFunctor &, JSC::C_JITOperation_TT, JSC::C_JITOperation_B_GJssJss, JSC::S_JITOperation_GJJ) [IntFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:10116:13), DoubleFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:10119:13)]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compare(const IntFunctor &, const DoubleFunctor &, JSC::C_JITOperation_TT, JSC::C_JITOperation_B_GJssJss, JSC::S_JITOperation_GJJ) [IntFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:10130:13), DoubleFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:10133:13)]
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::boolify(JSC::DFG::Edge)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCallOrConstructVarargs()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCallOrConstructVarargsSpread()
arguments->op() == PhantomNewArrayWithSpread || arguments->op() == PhantomSpread || arguments->op() == PhantomNewArrayBuffer
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCallOrConstructVarargsSpread()::(anonymous class)::operator()(auto, JSC::DFG::Node *) const [self:auto = std::reference_wrapper<const WTF::RecursableLambda<(lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:10666:70)>>]
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCallOrConstructVarargsSpread()::(anonymous class)::operator()(JSC::CCallHelpers &, const JSC::B3::StackmapGenerationParams &) const
!allocator.numberOfReusedRegisters()
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCallOrConstructVarargsSpread()::(anonymous class)::operator()(JSC::CCallHelpers &, const JSC::B3::StackmapGenerationParams &)::(anonymous class)::operator()(B3::ValueRep, JSC::GPRReg) const
rep.isGPR()
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCallOrConstructVarargs()::(anonymous class)::operator()(JSC::CCallHelpers &, const JSC::B3::StackmapGenerationParams &) const
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileForwardVarargsWithSpread()::(anonymous class)::operator()(auto, JSC::DFG::Node *, JSC::FTL::LValue) const [self:auto = std::reference_wrapper<const WTF::RecursableLambda<(lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:11475:47)>>]
target->op() == PhantomCreateRest
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileSwitch()
Bad switch kind
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::switchStringSlow(JSC::DFG::SwitchData *, JSC::FTL::LValue)
iter != unlinkedTable.m_offsetTable.end()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::switchStringRecurse(JSC::DFG::SwitchData *, JSC::FTL::LValue, JSC::FTL::LValue, const Vector<JSC::FTL::(anonymous namespace)::LowerDFGToB3::StringSwitchCase> &, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
alreadyCheckedLength == minLength
allLengthsEqual
minLength >= commonChars
cases[begin].string->length() == commonChars
cases[i].string->length() > commonChars
end == begin + 1
end >= begin + 2
characterCases[i - 1].character < characterCases[i].character
m_out.m_nextBlock == lastNext
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCPUIntrinsic()
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCPUIntrinsic()::(anonymous class)::operator()(JSC::CCallHelpers &, const B3::StackmapGenerationParams &) const
    Invalidation point with availability: 
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileInvalidationPoint()
m_origin.exitOK
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)57886, T = JSC::AssemblerLabel]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileIsBigInt()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMapHash()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetMapBucket()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetMapBucketHead()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileWeakMapGet()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileParseInt()
m_node->child1().useKind() == UntypedUse || m_node->child1().useKind() == StringUse
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileInstanceOf()
m_node->child2().useKind() == UntypedUse
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMaterializeNewObject()
result
Invalid indexing type
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMaterializeCreateActivation()
data.m_properties.size() == table->scopeSize()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMaterializeNewInternalFieldObject()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl(Operation) [JSClass = JSC::JSArrayIterator, Operation = JSC::JSCell *(*)(JSC::VM *, JSC::Structure *)]
data.m_properties.size() == JSClass::numberOfInternalFields
descriptor.info() < JSClass::numberOfInternalFields
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl(Operation) [JSClass = JSC::JSMapIterator, Operation = JSC::JSCell *(*)(JSC::VM *, JSC::Structure *)]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl(Operation) [JSClass = JSC::JSSetIterator, Operation = JSC::JSCell *(*)(JSC::VM *, JSC::Structure *)]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl(Operation) [JSClass = JSC::JSInternalPromise, Operation = JSC::JSCell *(*)(JSC::VM *, JSC::Structure *)]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl(Operation) [JSClass = JSC::JSPromise, Operation = JSC::JSCell *(*)(JSC::VM *, JSC::Structure *)]
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::ensureShadowChickenPacket()
shadowChicken
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileNumberToStringWithRadix()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileNumberToStringWithValidRadixConstant()
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = WTF::NoPtrTag, T = JSC::AssemblerLabel]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCallDOM()
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCallDOM()::(anonymous class)::operator()(JSC::DFG::Node *, JSC::DFG::Edge) const
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileDateGet()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileDataViewGet()
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::emitCodeBasedOnEndiannessBranch(JSC::FTL::LValue, const F1 &, const F2 &) [F1 = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:15882:45), F2 = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:15888:42)]
(!littleEndianValue && !bigEndianValue) || type == littleEndianValue->type()
!!bigEndianResult == !!littleEndianResult
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::byteSwap32(JSC::FTL::LValue)
value->type() == Int32
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::emitCodeBasedOnEndiannessBranch(JSC::FTL::LValue, const F1 &, const F2 &) [F1 = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:15919:49), F2 = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:15922:46)]
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::emitCodeBasedOnEndiannessBranch(JSC::FTL::LValue, const F1 &, const F2 &) [F1 = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:15942:45), F2 = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:15946:42)]
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::byteSwap64(JSC::FTL::LValue)
value->type() == Int64
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::emitCodeBasedOnEndiannessBranch(JSC::FTL::LValue, const F1 &, const F2 &) [F1 = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:15971:45), F2 = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:15975:42)]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileDataViewSet()
data.byteSize == 8
valueEdge.useKind() == Int32Use
valueEdge.useKind() == Int32Use || valueEdge.useKind() == Int52RepUse
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1728:41), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1728:59), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1728:77), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1724:39)]
Object
calendar
islamicc
lookup
best fit
localeMatcher must be either "lookup" or "best fit"
calendar is not a well-formed calendar value
numberingSystem is not a well-formed numbering system value
hourCycle must be "h11", "h12", "h23", or "h24"
failed to initialize DateTimeFormat due to invalid locale
-u-ca-
-nu-
invalid time zone: 
narrow
short
long
weekday must be "narrow", "short", or "long"
era must be "narrow", "short", or "long"
2-digit
numeric
year must be "2-digit" or "numeric"
month must be "2-digit", "numeric", "narrow", "short", or "long"
day must be "2-digit" or "numeric"
dayPeriod must be "narrow", "short", or "long"
hour must be "2-digit" or "numeric"
minute must be "2-digit" or "numeric"
second must be "2-digit" or "numeric"
shortOffset
longOffset
shortGeneric
longGeneric
timeZoneName must be "short", "long", "shortOffset", "longOffset", "shortGenric", or "longGeneric"
basic
formatMatcher must be either "basic" or "best fit"
full
medium
dateStyle must be "full", "long", "medium", or "short"
timeStyle must be "full", "long", "medium", or "short"
dateStyle and timeStyle may not be used with other DateTimeFormat options
failed to initialize DateTimeFormat
date value is not finite in DateTimeFormat format()
failed to format date value
date value is not finite in DateTimeFormat formatToParts()
failed to open field position iterator
literal
failed to initialize DateIntervalFormat
Passed date is out of range
Failed to format date interval
startRange
endRange
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
JSC::AbstractSlotVisitor::ReferrerContext::ReferrerContext(JSC::AbstractSlotVisitor &, JSC::AbstractSlotVisitor::ReferrerToken)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/DisallowVMEntry.h
JSC::DisallowVMEntryImpl<>::~DisallowVMEntryImpl() [VMType = JSC::VM]
Property did get replaced
numberOfSlotsForMaxOffset doesn't match totalSize
inlineOverflowAccordingToTotalSize doesn't match numberOfOutOfLineSlotsForMaxOffset
Detected offset inconsistency: 
this = 
transitionOffset = 
maxOffset = 
m_inlineCapacity = 
propertyTable = 
numberOfSlotsForMaxOffset = 
totalSize = 
inlineOverflowAccordingToTotalSize = 
numberOfOutOfLineSlotsForMaxOffset = 
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/Assertions.h
void UNREACHABLE_FOR_PLATFORM()
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/IndexingHeader.h
void JSC::IndexingHeader::setVectorLength(uint32_t)
year
yearName
month
hour
minute
second
fractionalSecond
weekday
dayPeriod
timeZoneName
relatedYear
unknown
Object
failed to initialize ListFormat due to invalid locale
conjunction
disjunction
unit
type must be either "conjunction", "disjunction", or "unit"
style must be either "long", "short", or "narrow"
failed to initialize ListFormat
failed to format list of strings
element
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
options argument is not an object or undefined
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSObject.h
JSC::JSValue JSC::JSObject::tryGetIndexQuickly(unsigned int, JSC::ArrayProfile *) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSObjectInlines.h
JSC::JSValue JSC::JSObject::getIndexQuicklyForTypedArray(unsigned int, JSC::ArrayProfile *) const
Iterable passed to ListFormat includes non String
Object
failed to initialize NumberFormat due to invalid locale
decimal
percent
currency
style must be either "decimal", "percent", "currency", or "unit"
currency is not a well-formed currency code
currency must be a string
currencyDisplay
code
symbol
narrowSymbol
name
currencyDisplay must be either "code", "symbol", or "name"
currencySign
standard
accounting
currencySign must be either "standard" or "accounting"
unit is not a well-formed unit identifier
unit must be a string
unitDisplay
unitDisplay must be either "short", "narrow", or "long"
notation
scientific
engineering
compact
notation must be either "standard", "scientific", "engineering", or "compact"
roundingIncrement must be one of 1, 2, 5, 10, 20, 25, 50, 100, 200, 250, 500, 1000, 2000, 2500, 5000
rounding type is not fraction-digits while roundingIncrement is specified
auto
stripIfInteger
trailingZeroDisplay must be either "auto" or "stripIfInteger"
compactDisplay
compactDisplay must be either "short" or "long"
useGrouping
min2
always
useGrouping must be either true, false, "min2", "auto", or "always"
signDisplay
never
exceptZero
negative
signDisplay must be either "auto", "never", "always", "exceptZero", or "negative"
ceil
floor
expand
trunc
halfCeil
halfFloor
halfExpand
halfTrunc
halfEven
roundingMode must be either "ceil", "floor", "expand", "trunc", "halfCeil", "halfFloor", "halfExpand", "halfTrunc", or "halfEven"
-u-nu-
rounding-mode-ceiling
rounding-mode-floor
rounding-mode-up
rounding-mode-down
rounding-mode-half-ceiling
rounding-mode-half-up
rounding-mode-half-floor
rounding-mode-half-down
rounding-mode-half-even
 percent scale/100
 currency/
 unit-width-iso-code
 unit-width-narrow
 unit-width-full-name
 per-measure-unit/
 unit-width-short
 sign-accounting
 sign-accounting-always
 sign-accounting-except-zero
 sign-except-zero
 sign-accounting-negative
 group-on-aligned
Failed to initialize NumberFormat
failed to initialize NumberFormat
Failed to format a number.
Failed to format a BigInt.
Passed numbers are out of range
start is larger than end
failed to format a range
Failed to format number range
Failed to format number interval
morePrecision
lessPrecision
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
-per-
-infinity
infinity
integer
fraction
exponentSeparator
exponentMinusSign
exponentInteger
group
percentSign
minusSign
plusSign
roundingPriority must be either "auto", "morePrecision", or "lessPrecision"
Computed minimumFractionDigits is larger than maximumFractionDigits
 precision-increment/
Object
failed to initialize PluralRules due to invalid locale
cardinal
ordinal
type must be "cardinal" or "ordinal"
failed to initialize PluralRules
pluralCategories
other
failed to select plural value
failed to select range of plural value
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
auto JSC::JSObject::putDirectIndex(JSC::JSGlobalObject *, unsigned int, JSC::JSValue, unsigned int, JSC::PutDirectIndexMode)::(anonymous class)::operator()() const
void JSC::JSObject::setIndexQuickly(JSC::VM &, unsigned int, JSC::JSValue)
void JSC::JSObject::setIndexQuicklyForTypedArray(unsigned int, JSC::JSValue)
auto
morePrecision
lessPrecision
GlobalObject
./API/JSAPIGlobalObject.mm
static JSC::Identifier JSC::JSAPIGlobalObject::moduleLoaderResolve(JSC::JSGlobalObject *, JSC::JSModuleLoader *, JSC::JSValue, JSC::JSValue, JSC::JSValue)
No module loader provided.
resolve
reject
filename
JSAPIWrapperObject
./API/JSAPIWrapperObject.mm
static JSC::IsoSubspace *JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::subspaceForImpl(JSC::VM &, JSC::SubspaceAccess) [Parent = JSC::JSAPIWrapperObject]
v24@?0@"JSContext"8@"JSValue"16
Context does not support module loading
script is not a module
script has not run in context or was not evaluated successfully
JSManagedValue is opaque root
File path %@ is not a local file
File at path %@ could not be mapped.
Not all characters in file at %@ are ASCII.
Cache for JSScript is already non-empty. Can not override it.
No cache path was provided during construction of this JSScript.
.tmp
Could not open or lock the bytecode cache file. It's likely another VM or process is already using it. Error: 
Could not open or lock the bytecode cache temp file. Error: 
Unable to generate bytecode for this JSScript because: 
writable
enumerable
configurable
v24@?0@"JSValue"8@"JSValue"16
Object
defineProperty
location
width
height
Cannot convert primitive to NSArray
Cannot convert primitive to NSDictionary
Module specifier: 
 does not start with "/", "./", or "../". Referenced from: 
Could not determine the base URL for loading.
Referrering script's url is not valid: 
Could not form valid URL from identifier and base. Tried:
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/ConcurrentPtrHashSet.h
bool WTF::ConcurrentPtrHashSet::containsImpl(void *) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
./API/JSCallbackObjectFunctions.h
static JSC::EncodedJSValue JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::callImpl(JSC::JSGlobalObject *, JSC::CallFrame *) [Parent = JSC::JSAPIWrapperObject]
static JSC::EncodedJSValue JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::constructImpl(JSC::JSGlobalObject *, JSC::CallFrame *) [Parent = JSC::JSAPIWrapperObject]
Cache path `%@` is not a local file
Cache path `%@` already exists and is not a file
Cache path `%@` does not contain in a valid directory
Cache directory `%@` is not a directory or does not exist
Cache directory `%@` is not a data vault
JSScriptErrorDomain
message
length
v16@?0^{objc_method=}8
First argument of resolution callback is not a JSScript
The JSScript that was provided did not have expected type of kJSScriptTypeModule.
The same JSScript was provided for two different identifiers, previously: 
hasProperty callback returned true for a property that doesn't exist.
Static function property defined with NULL callAsFunction callback.
**call_varargs
callee
thisValue
arguments
firstFree
firstVarArg
**iterator_next
done
iterable
next
iterator
stackOffset
**tail_call_varargs
**iterator_open
symbolIterator
**construct_varargs
**put_by_val
base
property
ecmaMode
**rshift
**lshift
**put_by_val_direct
**new_object
inlineCapacity
**create_async_generator
**get_by_val
**get_argument
index
**create_this
**to_this
srcDst
**call
argc
argv
**tail_call_forward_arguments
**construct
**put_by_id
**new_array_with_size
**new_array
recommendedIndexingType
**to_object
operand
**get_private_name
**set_private_brand
brand
**to_number
**put_private_name
putKind
**check_private_brand
**get_by_id
**get_by_id_with_this
**get_by_val_with_this
**get_by_id_direct
**profile_type
targetVirtualRegister
symbolTableOrScopeDepth
flag
identifier
resolveType
**profile_control_flow
textOffset
**get_prototype_of
**enumerator_next
propertyName
mode
enumerator
**enumerator_get_by_val
**enumerator_in_by_val
**enumerator_has_own_property
**try_get_by_id
**bitor
**catch
exception
thrownValue
**to_numeric
**get_internal_field
**bitxor
**create_promise
isInternalPromise
**tail_call
**call_eval
**new_array_buffer
immutableButterfly
**resolve_scope
scope
localScopeDepth
**get_from_scope
getPutInfo
offset
**put_to_scope
**get_from_arguments
**in_by_val
**create_generator
**bitand
**bitnot
**jneq_ptr
specialPointer
targetLabel
**is_cell_with_type
type
**in_by_id
**has_private_name
**has_private_brand
**put_by_id_with_this
**del_by_id
**put_by_val_with_this
**del_by_val
**put_getter_by_id
attributes
accessor
**put_setter_by_id
**put_getter_setter_by_id
getter
setter
**put_getter_by_val
**put_setter_by_val
**define_data_property
**define_accessor_property
**jmp
**jtrue
condition
**jfalse
**jeq_null
**jneq_null
**jundefined_or_null
**jnundefined_or_null
**jeq_ptr
**jeq
**jstricteq
**jneq
**jnstricteq
**jless
**jlesseq
**jgreater
**jgreatereq
**jnless
**jnlesseq
**jngreater
**jngreatereq
**jbelow
**jbeloweq
**loop_hint
**switch_imm
tableIndex
defaultOffset
scrutinee
**switch_char
**switch_string
**new_func
functionDecl
**new_func_exp
**new_generator_func
**new_generator_func_exp
**new_async_func
**new_async_func_exp
**new_async_generator_func
**new_async_generator_func_exp
**set_function_name
function
**ret
**strcat
count
**to_primitive
**to_property_key
**put_to_arguments
**push_with_scope
currentScope
newScope
**create_lexical_environment
symbolTable
initialValue
**create_generator_frame_environment
**get_parent_scope
**throw
**throw_static_error
errorType
**debug
debugHookType
hasBreakpoint
**end
**get_property_enumerator
**unreachable
**create_rest
arraySize
numParametersToSkip
**get_rest_length
**yield
yieldPoint
argument
**check_traps
**log_shadow_chicken_prologue
**log_shadow_chicken_tail
**resolve_scope_for_hoisting_func_decl_in_eval
**put_internal_field
**nop
**super_sampler_begin
**wide16
**super_sampler_end
**wide32
**enter
**get_scope
**create_direct_arguments
**create_scoped_arguments
**create_cloned_arguments
**create_arguments_butterfly
**new_promise
**new_generator
**argument_count
**check_tdz
**new_array_with_spread
bitVector
**spread
**new_regexp
regexp
**mov
**eq
**neq
**stricteq
**nstricteq
**less
**lesseq
**greater
**greatereq
**below
**beloweq
**mod
**pow
**urshift
**add
profileIndex
operandTypes
OperandTypes(
**mul
**div
**sub
**eq_null
**neq_null
**to_string
**unsigned
**is_empty
**typeof_is_undefined
**typeof_is_object
**typeof_is_function
**is_undefined_or_null
**is_boolean
**is_number
**is_big_int
**is_object
**is_callable
**is_constructor
**inc
**dec
**negate
resultType
**not
**identity_with_profile
topProfile
bottomProfile
**overrides_has_instance
constructor
hasInstanceValue
**instanceof
prototype
**instanceof_custom
**typeof
**catch_all_no_tls
**i32_sub
**i32_mul
**i32_div_s
**i32_div_u
**i32_rem_s
**i32_rem_u
**i32_and
**i32_or
**i32_xor
**i32_shl
**i32_shr_u
**i32_shr_s
**i32_rotr
**i32_rotl
**i32_eq
**i32_ne
**i32_lt_s
**i32_le_s
**i32_lt_u
**i32_le_u
**i32_gt_s
**i32_ge_s
**i32_gt_u
**i32_ge_u
**i32_clz
**i32_ctz
**i32_popcnt
**i32_eqz
**i64_add
**i64_sub
**i64_mul
**i64_div_s
**i64_div_u
**i64_rem_s
**i64_rem_u
**i64_and
**i64_or
**i64_xor
**i64_shl
**i64_shr_u
**i64_shr_s
**i64_rotr
**i64_rotl
**i64_eq
**i64_ne
**i64_lt_s
**i64_le_s
**i64_lt_u
**i64_le_u
**i64_gt_s
**i64_ge_s
**i64_gt_u
**i64_ge_u
**i64_clz
**i64_ctz
**i64_popcnt
**i64_eqz
**f32_add
**f32_sub
**f32_mul
**f32_div
**f32_min
**f32_max
**f32_abs
**f32_neg
**f32_copysign
**f32_ceil
**f32_floor
**f32_trunc
**f32_nearest
**f32_sqrt
**f32_eq
**f32_ne
**f32_lt
**f32_le
**f32_gt
**f32_ge
**f64_add
**f64_sub
**f64_mul
**f64_div
**f64_min
**f64_max
**f64_abs
**f64_neg
**f64_copysign
**f64_ceil
**f64_floor
**f64_trunc
**f64_nearest
**f64_sqrt
**f64_eq
**f64_ne
**f64_lt
**f64_le
**f64_gt
**f64_ge
**i32_trunc_s_f32
**i32_trunc_s_f64
**i32_trunc_u_f32
**i32_trunc_u_f64
**i32_wrap_i64
**i64_trunc_s_f32
**i64_trunc_s_f64
**i64_trunc_u_f32
**i64_trunc_u_f64
**i64_extend_s_i32
**i64_extend_u_i32
**f32_convert_s_i32
**f32_convert_u_i32
**f32_convert_s_i64
**f32_convert_u_i64
**f32_demote_f64
**f32_reinterpret_i32
**f64_convert_s_i32
**f64_convert_u_i32
**f64_convert_s_i64
**f64_convert_u_i64
**f64_promote_f32
**f64_reinterpret_i64
**i32_reinterpret_f32
**i64_reinterpret_f64
**i32_extend8_s
**i32_extend16_s
**i64_extend8_s
**i64_extend16_s
**i64_extend32_s
**i32_trunc_sat_f32_s
**i32_trunc_sat_f32_u
**i32_trunc_sat_f64_s
**i32_trunc_sat_f64_u
**i64_trunc_sat_f32_s
**i64_trunc_sat_f32_u
**i64_trunc_sat_f64_s
**i64_trunc_sat_f64_u
**throw_from_slow_path_trampoline
**throw_from_fault_handler_trampoline_fastTLS
**throw_from_fault_handler_trampoline_reg_instance
**call_return_location
**call_no_tls_return_location
**call_indirect_return_location
**call_indirect_no_tls_return_location
**call_ref_return_location
**call_ref_no_tls_return_location
**switch
**ret_void
**drop_keep
startOffset
dropCount
keepCount
**ref_is_null
**ref_func
functionIndex
**get_global
globalIndex
**set_global
**set_global_ref
**get_global_portable_binding
**set_global_portable_binding
**set_global_ref_portable_binding
**table_get
**table_set
**table_init
dstOffset
srcOffset
elementIndex
**elem_drop
**table_size
**table_grow
fill
size
**table_fill
**table_copy
dstTableIndex
srcTableIndex
numberOfStackArgs
**call_no_tls
**call_indirect
signatureIndex
**call_indirect_no_tls
**call_ref
functionReference
**call_ref_no_tls
**current_memory
**grow_memory
delta
**memory_fill
dstAddress
targetValue
**memory_copy
srcAddress
**memory_init
dataSegmentIndex
**data_drop
**select
nonZero
zero
**load8_u
pointer
**load16_u
**load32_u
**load64_u
**i32_load8_s
**i64_load8_s
**i32_load16_s
**i64_load16_s
**i64_load32_s
**store8
**store16
**store32
**store64
**i64_atomic_rmw_add
**i64_atomic_rmw8_add_u
**i64_atomic_rmw16_add_u
**i64_atomic_rmw32_add_u
**i64_atomic_rmw_sub
**i64_atomic_rmw8_sub_u
**i64_atomic_rmw16_sub_u
**i64_atomic_rmw32_sub_u
**i64_atomic_rmw_and
**i64_atomic_rmw8_and_u
**i64_atomic_rmw16_and_u
**i64_atomic_rmw32_and_u
**i64_atomic_rmw_or
**i64_atomic_rmw8_or_u
**i64_atomic_rmw16_or_u
**i64_atomic_rmw32_or_u
**i64_atomic_rmw_xor
**i64_atomic_rmw8_xor_u
**i64_atomic_rmw16_xor_u
**i64_atomic_rmw32_xor_u
**i64_atomic_rmw_xchg
**i64_atomic_rmw8_xchg_u
**i64_atomic_rmw16_xchg_u
**i64_atomic_rmw32_xchg_u
**i64_atomic_rmw_cmpxchg
expected
**i64_atomic_rmw8_cmpxchg_u
**i64_atomic_rmw16_cmpxchg_u
**i64_atomic_rmw32_cmpxchg_u
**memory_atomic_wait32
timeout
**memory_atomic_wait64
**memory_atomic_notify
**atomic_fence
exceptionIndex
firstValue
**rethrow
argumentCount
**catch_no_tls
**catch_all
**i32_add
%sPrototype
v24@?0@"Protocol"8^B16
JSExport
NSBlock
CallbackFunction
./API/ObjCCallbackFunction.mm
JSValueRef JSC::ObjCCallbackFunctionImpl::call(JSContext *, JSObjectRef, size_t, const JSValueRef *, JSValueRef *)
self type check failed for Objective-C instance method
%sConstructor
v24@?0:8r*16
ERROR: Class %@ exported more than one init family method via JSExport. Class %@ will not have a callable JavaScript constructor function.
init
v16@?0^{objc_property=}8
__JS_EXPORT_AS__
JavaScriptCore
Cannot call a class constructor without |new|
Objective-C blocks called as constructors must return an object.
Malformed type encoding
@"NSString"16@?0@"NSString"8
NSString
static ArgumentTypeDelegate::ResultType ArgumentTypeDelegate::typeVoid()
Argument does not match Objective-C Class
[Symbol.toPrimitive]
JSCallbackObject[Symbol.toPrimitive] method called on incompatible |this| value.
Primitive hint is not a string.
default
number
string
Expected primitive hint to match one of 'default', 'number', 'string'.
API Wrapper
heapSize
heapCapacity
extraMemorySize
objectCount
protectedObjectCount
globalObjectCount
protectedGlobalObjectCount
objectTypeCounts
CallbackConstructor
CallbackFunction
CallbackObject
CallbackGlobalObject
static JSC::EncodedJSValue JSC::JSCallbackObject<JSC::JSNonFinalObject>::callImpl(JSC::JSGlobalObject *, JSC::CallFrame *) [Parent = JSC::JSNonFinalObject]
static JSC::EncodedJSValue JSC::JSCallbackObject<JSC::JSNonFinalObject>::constructImpl(JSC::JSGlobalObject *, JSC::CallFrame *) [Parent = JSC::JSNonFinalObject]
static JSC::EncodedJSValue JSC::JSCallbackObject<JSC::JSGlobalObject>::callImpl(JSC::JSGlobalObject *, JSC::CallFrame *) [Parent = JSC::JSGlobalObject]
static JSC::EncodedJSValue JSC::JSCallbackObject<JSC::JSGlobalObject>::constructImpl(JSC::JSGlobalObject *, JSC::CallFrame *) [Parent = JSC::JSGlobalObject]
com.apple.JavaScriptCore.remote-inspector-xpc
Skipping Automatic Inspection Candidate with pageId(%u) because we are already paused waiting for pageId(%u)
Skipping Automatic Inspection Candidate with pageId(%u) because we failed to receive a response in time.
WIRPageIdentifierKey
WIRAutomaticInspectionCandidateMessage
WIRRawDataMessage
WIRRawDataKey
WIRMessageDataTypeKey
WIRMessageDataTypeFull
WIRConnectionIdentifierKey
WIRDestinationKey
WIRMessageDataTypeFinalChunk
WIRMessageDataTypeChunk
com.apple.webinspectord.available
com.apple.webinspectord.availability_check
check
com.apple.webinspector
RemoteInspector failed to create XPC connection.
WIRPermissionDenied
WIRSocketDataMessage
WIRSocketSetupMessage
WIRWebPageCloseMessage
WIRApplicationGetListingMessage
WIRApplicationWakeUpDebuggablesMessage
WIRIndicateMessage
WIRProxyApplicationSetupMessage
WIRConnectionDiedMessage
WIRAutomaticInspectionConfigurationMessage
WIRAutomaticInspectionRejectMessage
WIRAutomationSessionRequestMessage
Unrecognized RemoteInspector XPC Message: %@
WIRTitleKey
WIRTypeITML
WIRTypeKey
WIRTypeJavaScript
WIRURLKey
WIRTypePage
WIRTypeServiceWorker
WIRTypeWebPage
WIRHasLocalDebuggerKey
WIRSessionIdentifierKey
WIRTypeAutomation
WIRAutomationTargetIsPairedKey
WIRAutomationTargetNameKey
WIRAutomationTargetVersionKey
WIRListingKey
WIRAutomationAvailabilityUnknown
WIRAutomationAvailabilityKey
WIRAutomationAvailabilityAvailable
WIRAutomationAvailabilityNotAvailable
WIRRemoteAutomationEnabledKey
WIRListingMessage
WIRSenderKey
WIRAutomaticallyPause
WIRMessageDataTypeChunkSupportedKey
WIRSocketDataKey
WIRIndicateEnabledKey
WIRProxyApplicationSetupResponseMessage
WIRProxyApplicationParentPID
WIRProxyApplicationParentAuditData
WIRAutomaticInspectionEnabledKey
WIRSessionCapabilitiesKey
org.webkit.webdriver.accept-insecure-certificates
org.webkit.webdriver.webrtc.allow-insecure-media-capture
org.webkit.webdriver.webrtc.suppress-ice-candidate-filtering
v16@?0@"NSObject<OS_xpc_object>"8
msgData
messageName
userInfo
mach-lookup
com.apple.webinspectord.automatic_inspection_enabled
API Marking Constraint #
anonymous
./API/JSScriptRef.cpp
JSValueRef JSScriptEvaluate(JSContextRef, JSScriptRef, JSValueRef, JSValueRef *)
JSObjectMakeTypedArrayWithArrayBuffer expects buffer to be an Array Buffer object
Cannot get the backing buffer for a WebAssembly.Memory
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
Unexpected error compiling builtin: 
Parsed #
Failed to parse #
 ms.
./API/JSTypedArray.cpp
JSTypedArrayType toJSTypedArrayType(JSC::TypedArrayType)
JSC::TypedArrayType toTypedArrayType(JSTypedArrayType)
JSC::JSObject *createTypedArray(JSC::JSGlobalObject *, JSTypedArrayType, RefPtr<JSC::ArrayBuffer> &&, size_t, size_t)
Length out of range of buffer
Byte offset is not aligned
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/interpreter/CallFrame.h
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = BacktraceFunctor]
./API/JSWeakValue.cpp
void JSC::JSWeakValue::clear()
bool JSC::JSWeakValue::isClear() const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
Success
Failure
./assembler/AbstractMacroAssembler.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::AbstractMacroAssemblerBase::StatusCondition)
kern.tcsm_available
kern.tcsm_enable
hw.l3cachesize
hw.physicalcpu_max
Generated JIT code for 
    Code at [%p, %p)%s
Cummulative LinkBuffer profile sizes:
Equal
NotEqual
Above
AboveOrEqual
Below
BelowOrEqual
GreaterThan
GreaterThanOrEqual
LessThan
LessThanOrEqual
./assembler/MacroAssembler.cpp
void WTF::printInternal(WTF::PrintStream &, MacroAssembler::RelationalCondition)
Overflow
Signed
PositiveOrZero
Zero
NonZero
void WTF::printInternal(WTF::PrintStream &, MacroAssembler::ResultCondition)
DoubleEqualAndOrdered
DoubleNotEqualAndOrdered
DoubleGreaterThanAndOrdered
DoubleGreaterThanOrEqualAndOrdered
DoubleLessThanAndOrdered
DoubleLessThanOrEqualAndOrdered
DoubleEqualOrUnordered
DoubleNotEqualOrUnordered
DoubleGreaterThanOrUnordered
DoubleGreaterThanOrEqualOrUnordered
DoubleLessThanOrUnordered
DoubleLessThanOrEqualOrUnordered
void WTF::printInternal(WTF::PrintStream &, MacroAssembler::DoubleCondition)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/jit/ExecutableAllocator.h
void *JSC::performJITMemcpy(void *, const void *, size_t)
%20s
 count 
 avg size 
BaselineJIT
DFGOSREntry
DFGOSRExit
FTLOSRExit
InlineCache
JumpIsland
Thunk
LLIntThunk
DFGThunk
FTLThunk
BoundFunctionThunk
SpecializedThunk
VirtualThunk
WasmThunk
ExtraCTIThunk
Wasm
YarrJIT
CSSJIT
Uncategorized
Total
./assembler/LinkBuffer.cpp
auto JSC::LinkBuffer::dumpProfileStatistics(std::optional<PrintStream *>)::(anonymous class)::operator()(JSC::LinkBuffer::Profile) const
(null)
xmm0
xmm1
xmm2
xmm3
xmm4
xmm5
xmm6
xmm7
xmm8
xmm9
xmm10
xmm11
xmm12
xmm13
xmm14
xmm15
./assembler/ProbeStack.cpp
JSC::Probe::Page *JSC::Probe::Stack::ensurePageFor(void *)
width = 
: ; frequency = 
  Predecessors: 
  Successors: 
./b3/B3BasicBlock.cpp
JSC::B3::Value *JSC::B3::BasicBlock::appendNewControlValue(JSC::B3::Procedure &, JSC::B3::Opcode, JSC::B3::Origin)
JSC::B3::Value *JSC::B3::BasicBlock::appendNewControlValue(JSC::B3::Procedure &, JSC::B3::Opcode, JSC::B3::Origin, JSC::B3::Value *)
JSC::B3::Value *JSC::B3::BasicBlock::appendNewControlValue(JSC::B3::Procedure &, JSC::B3::Opcode, JSC::B3::Origin, const JSC::B3::FrequentedBlock &)
JSC::B3::Value *JSC::B3::BasicBlock::appendNewControlValue(JSC::B3::Procedure &, JSC::B3::Opcode, JSC::B3::Origin, JSC::B3::Value *, const JSC::B3::FrequentedBlock &, const JSC::B3::FrequentedBlock &)
./b3/B3Value.h
static size_t JSC::B3::Value::adjacencyListSpace(JSC::B3::Kind)
default->
B3::CheckValue lowered to 
 with 
 args.
./b3/B3CheckValue.cpp
void JSC::B3::CheckValue::convertToAdd()
b3  
Compilation
./b3/B3CheckSpecial.cpp
unsigned int JSC::B3::(anonymous namespace)::numB3Args(JSC::B3::Kind)
%le(%llu)
%le(%u)
DataSection at 
 bytes.
duplicateTails
Terminal
ExitsSideways
ControlDependent
WritesLocalState
ReadsLocalState
WritesPinned
ReadsPinned
Fence
Writes:
Reads:
eliminateCommonSubexpressions
./b3/B3EliminateCommonSubexpressions.cpp
bool JSC::B3::(anonymous namespace)::CSE::replaceMemoryValue(const JSC::B3::(anonymous namespace)::MemoryMatches &, const Replace &) [Replace = (lambda at ./b3/B3EliminateCommonSubexpressions.cpp:360:17)]
bool JSC::B3::(anonymous namespace)::CSE::replaceMemoryValue(const JSC::B3::(anonymous namespace)::MemoryMatches &, const Replace &) [Replace = (lambda at ./b3/B3EliminateCommonSubexpressions.cpp:381:17)]
bool JSC::B3::(anonymous namespace)::CSE::replaceMemoryValue(const JSC::B3::(anonymous namespace)::MemoryMatches &, const Replace &) [Replace = (lambda at ./b3/B3EliminateCommonSubexpressions.cpp:400:17)]
bool JSC::B3::(anonymous namespace)::CSE::replaceMemoryValue(const JSC::B3::(anonymous namespace)::MemoryMatches &, const Replace &) [Replace = (lambda at ./b3/B3EliminateCommonSubexpressions.cpp:420:17)]
bool JSC::B3::(anonymous namespace)::CSE::replaceMemoryValue(const JSC::B3::(anonymous namespace)::MemoryMatches &, const Replace &) [Replace = (lambda at ./b3/B3EliminateCommonSubexpressions.cpp:582:13)]
(null)
Bottom
eliminateDeadCode
./b3/B3FixSSA.cpp
void JSC::B3::demoteValues(JSC::B3::Procedure &, const IndexSet<JSC::B3::Value *> &)
fixSSA
foldPathConstants
Rare
./b3/B3FrequencyClass.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::B3::FrequencyClass)
void JSC::B3::(anonymous namespace)::fixSSAGlobally(JSC::B3::Procedure &)
fixSSA: computePhis
fixSSA: convert
prepareForGeneration
generateToAir
Initial B3:
B3 after 
, before generation:
hoistLoopInvariantValues
./b3/B3HoistLoopInvariantValues.cpp
bool JSC::B3::hoistLoopInvariantValues(JSC::B3::Procedure &)
inferSwitches
Chill
Traps
legalizeMemoryOffsets
B3::lowerMacros
lowerMacrosAfterOptimizations
./b3/B3LowerMacrosAfterOptimizations.cpp
bool JSC::B3::lowerMacrosAfterOptimizations(JSC::B3::Procedure &)
./b3/B3MemoryValueInlines.h
JSC::B3::Width JSC::B3::MemoryValue::accessWidth() const
./b3/B3LowerMacros.cpp
bool JSC::B3::(anonymous namespace)::LowerMacros::run()
./b3/B3CCallValue.h
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)40321, T = JSC::AssemblerLabel]
./b3/B3Opcode.h
JSC::B3::Opcode JSC::B3::signExtendOpcode(JSC::B3::Width)
void JSC::B3::(anonymous namespace)::LowerMacrosAfterOptimizations::processCurrentBlock()
lowerToAir
offset = 
range = 
fenceRange = 
moveConstants
Identity
Opaque
Const32
Const64
ConstDouble
ConstFloat
BottomTuple
SlotBase
ArgumentReg
FramePointer
UDiv
UMod
FMin
FMax
BitAnd
BitOr
BitXor
SShr
ZShr
RotR
RotL
Ceil
Floor
Sqrt
BitwiseCast
SExt8
SExt16
SExt32
ZExt32
Trunc
IToD
IToF
FloatToDouble
DoubleToFloat
Equal
NotEqual
LessThan
GreaterThan
LessEqual
GreaterEqual
Above
Below
AboveEqual
BelowEqual
EqualOrUnordered
Select
Load8Z
Load8S
Load16Z
Load16S
Load
Store8
Store16
Store
AtomicWeakCAS
AtomicStrongCAS
AtomicXchgAdd
AtomicXchgAnd
AtomicXchgOr
AtomicXchgSub
AtomicXchgXor
AtomicXchg
Depend
WasmAddress
CCall
Patchpoint
Extract
CheckAdd
CheckSub
CheckMul
Check
WasmBoundsCheck
Upsilon
Jump
Branch
Switch
EntrySwitch
Return
Oops
./b3/B3Opcode.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::B3::Opcode)
./b3/B3OptimizeAssociativeExpressionTrees.cpp
int64_t JSC::B3::OptimizeAssociativeExpressionTrees::neutralElement(JSC::B3::Opcode)
bool JSC::B3::OptimizeAssociativeExpressionTrees::isAbsorbingElement(JSC::B3::Opcode, int64_t)
void JSC::B3::OptimizeAssociativeExpressionTrees::combineConstants(JSC::B3::Opcode, int64_t &, int64_t)
void JSC::B3::OptimizeAssociativeExpressionTrees::emitValue(JSC::B3::Opcode, JSC::B3::Value *, unsigned int, JSC::B3::InsertionSet &, size_t, Vector<JSC::B3::Value *, 4> &)
optimizeAssociativeExpressionTrees
Origin(
./b3/B3LowerToAir.cpp
void JSC::B3::(anonymous namespace)::LowerToAir::lower()
FATAL: could not lower 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/b3/air/AirHelpers.h
Air::Opcode JSC::B3::Air::moveForType(JSC::B3::Type)
JSC::B3::(anonymous namespace)::Arg JSC::B3::(anonymous namespace)::LowerToAir::addr(JSC::B3::Value *)
Air::Opcode JSC::B3::(anonymous namespace)::LowerToAir::opcodeForType(Air::Opcode, Air::Opcode, Air::Opcode, Air::Opcode, JSC::B3::Type)
void JSC::B3::(anonymous namespace)::LowerToAir::appendX86Div(B3::Opcode)
void JSC::B3::(anonymous namespace)::LowerToAir::appendCAS(JSC::B3::Value *, bool)
bool JSC::B3::(anonymous namespace)::LowerToAir::tryAppendStoreBinOp(JSC::B3::Value *, JSC::B3::Value *) [opcode32 = JSC::B3::Air::Add32, opcode64 = JSC::B3::Air::Add64, commutativity = JSC::B3::Commutative]
JSC::B3::(anonymous namespace)::LowerToAir::ArgPromise JSC::B3::(anonymous namespace)::LowerToAir::loadPromiseAnyOpcode(JSC::B3::Value *)
bool JSC::B3::(anonymous namespace)::LowerToAir::tryAppendStoreBinOp(JSC::B3::Value *, JSC::B3::Value *) [opcode32 = JSC::B3::Air::Sub32, opcode64 = JSC::B3::Air::Sub64, commutativity = JSC::B3::NotCommutative]
bool JSC::B3::(anonymous namespace)::LowerToAir::tryAppendStoreBinOp(JSC::B3::Value *, JSC::B3::Value *) [opcode32 = JSC::B3::Air::And32, opcode64 = JSC::B3::Air::And64, commutativity = JSC::B3::Commutative]
bool JSC::B3::(anonymous namespace)::LowerToAir::tryAppendStoreBinOp(JSC::B3::Value *, JSC::B3::Value *) [opcode32 = JSC::B3::Air::Xor32, opcode64 = JSC::B3::Air::Xor64, commutativity = JSC::B3::Commutative]
void JSC::B3::(anonymous namespace)::LowerToAir::appendStore(JSC::B3::Value *, const JSC::B3::(anonymous namespace)::Arg &)
Air::Opcode JSC::B3::(anonymous namespace)::LowerToAir::storeOpcode(JSC::B3::Width, JSC::B3::Bank)
bool JSC::B3::(anonymous namespace)::LowerToAir::tryAppendStoreBinOp(JSC::B3::Value *, JSC::B3::Value *) [opcode32 = JSC::B3::Air::Add8, opcode64 = JSC::B3::Air::Oops, commutativity = JSC::B3::Commutative]
bool JSC::B3::(anonymous namespace)::LowerToAir::tryAppendStoreBinOp(JSC::B3::Value *, JSC::B3::Value *) [opcode32 = JSC::B3::Air::Add16, opcode64 = JSC::B3::Air::Oops, commutativity = JSC::B3::Commutative]
auto JSC::B3::(anonymous namespace)::LowerToAir::lower()::(anonymous class)::operator()(JSC::B3::(anonymous namespace)::Arg, JSC::B3::Type, unsigned int) const
static JSC::MacroAssemblerX86Common::RelationalCondition JSC::MacroAssembler::flip(JSC::MacroAssemblerX86Common::RelationalCondition)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/b3/air/AirArg.h
static bool JSC::B3::Air::Arg::isRepresentableAs(JSC::B3::Width, JSC::B3::Air::Arg::Signedness, int64_t)
auto JSC::B3::(anonymous namespace)::LowerToAir::lower()::(anonymous class)::operator()(JSC::B3::Type, JSC::B3::ValueRep, JSC::B3::(anonymous namespace)::Tmp) const
void JSC::B3::(anonymous namespace)::LowerToAir::fillStackmap(JSC::B3::(anonymous namespace)::Inst &, JSC::B3::StackmapValue *, unsigned int)
const Vector<JSC::B3::(anonymous namespace)::Tmp> &JSC::B3::(anonymous namespace)::LowerToAir::tmpsForTuple(JSC::B3::Value *)
Air::Opcode JSC::B3::Air::relaxedMoveForType(JSC::B3::Type)
JSC::B3::(anonymous namespace)::LowerToAir::ArgPromise::~ArgPromise()
JSC::B3::Air::Arg JSC::B3::Air::Arg::inverted(bool) const
static JSC::MacroAssemblerX86Common::ResultCondition JSC::MacroAssembler::invert(JSC::MacroAssemblerX86Common::ResultCondition)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/AbstractMacroAssembler.h
static JSC::AbstractMacroAssemblerBase::StatusCondition JSC::AbstractMacroAssemblerBase::invert(JSC::AbstractMacroAssemblerBase::StatusCondition)
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Value *>]
./b3/B3PatchpointSpecial.cpp
virtual bool JSC::B3::PatchpointSpecial::admitsStack(JSC::B3::Inst &, unsigned int)
Lowered B3::PatchpointValue.
resultConstraints = 
numGPScratchRegisters = 
numFPScratchRegisters = 
, before 
initial
./b3/B3Procedure.cpp
JSC::B3::Value *JSC::B3::Procedure::addIntConstant(JSC::B3::Origin, JSC::B3::Type, int64_t)
JSC::B3::Value *JSC::B3::Procedure::addConstant(JSC::B3::Origin, JSC::B3::Type, uint64_t)
Opt Level: 
Orphaned values:
Has Quirks: True
Variables:
Stack slots:
void JSC::B3::Procedure::addFastConstant(const JSC::B3::ValueKey &)
reduceDoubleToFloat
reduceLoopStrength
./b3/B3ValueInlines.h
JSC::B3::Value *JSC::B3::Value::cloneImpl() const
Range-based domination check is broken
Lengauer-Tarjan domination is broken
DFG DOMINATOR VALIDATION FAILED:
For block domination relationships:
 -> 
Control flow graph:
    Block 
: successors = [
], predecessors = [
Lengauer-Tarjan Dominators:
Naive Dominators:
Graph at time of failure:
DFG DOMINATOR VALIDATION FAILIED!
    Block #
: idom = 
, idomKids = [
], pre/post = 
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/NaturalLoops.h
WTF::NaturalLoops<JSC::B3::CFG>::NaturalLoops(Graph &, Dominators<Graph> &, bool) [Graph = JSC::B3::CFG]
<null>
#root
    Preds: 
    Succs: 
./b3/B3ReduceDoubleToFloat.cpp
JSC::B3::Value *JSC::B3::(anonymous namespace)::DoubleToFloatReduction::transformToFloat(JSC::B3::Value *, unsigned int, JSC::B3::InsertionSet &)
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, const JSC::B3::Effects &, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
./b3/B3SparseCollection.h
void JSC::B3::SparseCollection<JSC::B3::Variable>::remove(T *) [T = JSC::B3::Variable]
void JSC::B3::SparseCollection<JSC::B3::Value>::remove(T *) [T = JSC::B3::Value]
reduceStrength
./b3/B3StackmapGenerationParams.cpp
Vector<Box<MacroAssembler::Label>> JSC::B3::StackmapGenerationParams::successorLabels() const
bool JSC::B3::StackmapGenerationParams::fallsThroughToSuccessor(unsigned int) const
./b3/B3StackmapSpecial.cpp
void JSC::B3::StackmapSpecial::forEachArgImpl(unsigned int, unsigned int, JSC::B3::Inst &, JSC::B3::StackmapSpecial::RoleMode, std::optional<unsigned int>, const ScopedLambda<Inst::EachArgCallback> &, std::optional<Width>)
static bool JSC::B3::StackmapSpecial::isArgValidForRep(Air::Code &, const Air::Arg &, const JSC::B3::ValueRep &)
SameAsRep
ForceLateUseUnlessRecoverable
ForceLateUse
void WTF::printInternal(WTF::PrintStream &, StackmapSpecial::RoleMode)
generator = 
, earlyClobbered = 
, lateClobbered = 
, usedRegisters = 
./b3/B3SwitchValue.cpp
bool JSC::B3::SwitchValue::hasFallThrough(const JSC::B3::BasicBlock *) const
cases = [
./b3/B3ReduceStrength.cpp
void JSC::B3::(anonymous namespace)::ReduceStrength::simplifyCFG()
void JSC::B3::(anonymous namespace)::ReduceStrength::checkPredecessorValidity()
void JSC::B3::(anonymous namespace)::ReduceStrength::reduceValueStrength()
static JSC::B3::(anonymous namespace)::IntRange JSC::B3::(anonymous namespace)::IntRange::top(JSC::B3::Type)
static JSC::B3::(anonymous namespace)::IntRange JSC::B3::(anonymous namespace)::IntRange::rangeForMask(int64_t, JSC::B3::Type)
JSC::B3::(anonymous namespace)::IntRange JSC::B3::(anonymous namespace)::IntRange::sShr(int32_t, JSC::B3::Type)
JSC::B3::(anonymous namespace)::IntRange JSC::B3::(anonymous namespace)::IntRange::zShr(int32_t, JSC::B3::Type)
JSC::B3::(anonymous namespace)::IntRange JSC::B3::(anonymous namespace)::IntRange::shl(int32_t, JSC::B3::Type)
JSC::B3::(anonymous namespace)::IntRange JSC::B3::(anonymous namespace)::IntRange::add(const JSC::B3::(anonymous namespace)::IntRange &, JSC::B3::Type)
JSC::B3::(anonymous namespace)::IntRange JSC::B3::(anonymous namespace)::IntRange::sub(const JSC::B3::(anonymous namespace)::IntRange &, JSC::B3::Type)
JSC::B3::(anonymous namespace)::IntRange JSC::B3::(anonymous namespace)::IntRange::mul(const JSC::B3::(anonymous namespace)::IntRange &, JSC::B3::Type)
void JSC::B3::(anonymous namespace)::ReduceStrength::specializeSelect(JSC::B3::Value *)
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/StdLibExtras.h
ToType WTF::safeCast(FromType) [ToType = int, FromType = unsigned int]
Void
Int32
Int64
Float
Double
Tuple
./b3/B3Type.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::B3::Type)
^(null)
<null>
./b3/B3Value.cpp
void JSC::B3::Value::replaceWithIdentity(JSC::B3::Value *)
void JSC::B3::Value::replaceWithNop()
void JSC::B3::Value::replaceWithJump(JSC::B3::BasicBlock *, JSC::B3::FrequentedBlock)
void JSC::B3::Value::replaceWithOops(JSC::B3::BasicBlock *)
Then:
, Else:
static JSC::B3::Type JSC::B3::Value::typeFor(JSC::B3::Kind, JSC::B3::Value *, JSC::B3::Value *)
Bad kind 
 with 
 args.
static void JSC::B3::Value::badKind(JSC::B3::Kind, unsigned int)
./b3/B3ValueRep.cpp
void JSC::B3::ValueRep::addUsedRegistersTo(JSC::RegisterSet &) const
void JSC::B3::ValueRep::dump(WTF::PrintStream &) const
void JSC::B3::ValueRep::emitRestore(JSC::AssemblyHelpers &, JSC::Reg) const
JSC::ValueRecovery JSC::B3::ValueRep::recoveryForJSValue() const
WarmAny
ColdAny
LateColdAny
SomeRegister
SomeRegisterWithClobber
SomeEarlyRegister
SomeLateRegister
Register
LateRegister
StackArgument
Constant
void WTF::printInternal(WTF::PrintStream &, ValueRep::Kind)
 var
./b3/B3Validate.cpp
void JSC::B3::(anonymous namespace)::Validater::run()
m_procedure.tuples()[tuple].size()
In tuple 
m_procedure.tuples()[tuple][i].isNumeric()
 at index
valueInBlock.contains(value)
valueInProc.contains(entry.key)
entry.value == 1
child
valueInProc.contains(child)
valueIndex.get(value) > valueIndex.get(child)
dominators.dominates(valueOwner.get(child), valueOwner.get(value))
block->size() >= 1
!block->at(i)->effects().terminal
block->last()->effects().terminal
blocks.contains(successor)
predecessors == successor->predecessors()
child->type() != Void
!value->kind().hasExtraBits()
!value->numChildren()
value->type() == Void
value->numChildren() == 1
value->type() == value->child(0)->type()
value->type() != Void
value->type() == Double
value->type() == Float
value->type().isTuple()
value->child(0)->type() == value->as<VariableValue>()->variable()->type()
value->type() == value->as<VariableValue>()->variable()->type()
value->type() == pointerType()
(value->as<ArgumentRegValue>()->argumentReg().isGPR() ? pointerType() : Double) == value->type()
!value->kind().traps()
value->opcode() == Div || value->opcode() == Mod
value->type().isInt()
value->numChildren() == 2
value->type() == value->child(1)->type()
value->type().isNumeric()
value->type() == Float || value->type() == Double
value->child(1)->type() == Int32
value->type() != value->child(0)->type()
(value->type() == Int64 && value->child(0)->type() == Double) || (value->type() == Double && value->child(0)->type() == Int64) || (value->type() == Float && value->child(0)->type() == Int32) || (value->type() == Int32 && value->child(0)->type() == Float)
value->child(0)->type() == Int32
value->child(0)->type().isInt()
(value->type() == Int32 && value->child(0)->type() == Int64) || (value->type() == Float && value->child(0)->type() == Double)
value->child(0)->type().isFloat()
value->type().isFloat()
value->child(0)->type() == Float
value->child(0)->type() == Double
value->child(0)->type() == value->child(1)->type()
value->numChildren() == 3
value->type() == value->child(2)->type()
!value->kind().isChill()
value->child(0)->type() == pointerType()
value->child(1)->type() == pointerType()
value->child(2)->type() == pointerType()
value->numChildren() >= 1
value->as<PatchpointValue>()->resultConstraints.size() == 1
value->as<PatchpointValue>()->resultConstraints[0] == ValueRep::WarmAny
m_procedure.isValidTuple(value->type())
value->as<PatchpointValue>()->resultConstraints.size() == m_procedure.tupleForType(value->type()).size()
value->child(0)->type() == Tuple
value->numChildren() >= 2
value->child(1)->type().isInt()
value->as<StackmapValue>()->constrainedChild(0).rep() == ValueRep::WarmAny
value->as<StackmapValue>()->constrainedChild(1).rep() == ValueRep::WarmAny
m_procedure.code().isPinned(value->as<WasmBoundsCheckValue>()->bounds().pinnedSize)
m_procedure.code().wasmBoundsCheckGenerator()
value->as<UpsilonValue>()->phi()
value->as<UpsilonValue>()->phi()->opcode() == Phi
value->child(0)->type() != Void
value->child(0)->type() == value->as<UpsilonValue>()->phi()->type()
valueInProc.contains(value->as<UpsilonValue>()->phi())
valueOwner.get(value)->numSuccessors() == 1
!valueOwner.get(value)->numSuccessors()
value->numChildren() <= 1
valueOwner.get(value)->numSuccessors() == 2
value->as<SwitchValue>()->hasFallThrough(valueOwner.get(value))
valueOwner.get(value)->numSuccessors() == value->as<SwitchValue>()->numCaseValues() + 1
caseValues[i - 1] != caseValues[i]
, caseValue = 
valueOwner.get(value)->numSuccessors() == m_procedure.numEntrypoints()
!(value->effects().writes && value->key())
(!value->effects().exitsSideways || value->effects().reads != HeapRange())
variable->type() != Void
block->numPredecessors() == predecessors.size()
B3 VALIDATION FAILURE
    After 
Before 
At time of failure:
void JSC::B3::(anonymous namespace)::Validater::validateFence(JSC::B3::Value *)
memory->accessBank() == GP
Fence at 
void JSC::B3::(anonymous namespace)::Validater::validateStackAccess(JSC::B3::Value *)
memory->offset() >= 0
void JSC::B3::(anonymous namespace)::Validater::validateAtomic(JSC::B3::Value *)
bestType(GP, atomic->accessWidth()) == atomic->accessType()
void JSC::B3::(anonymous namespace)::Validater::validateStackmapConstraint(JSC::B3::Value *, const JSC::B3::ConstrainedValue &, JSC::B3::(anonymous namespace)::Validater::ConstraintRole, unsigned int)
role == ConstraintRole::Use
context->as<PatchpointValue>()
role == ConstraintRole::Def
m_procedure.extractFromTuple(value.value()->type(), tupleIndex).isInt()
value.value()->type().isInt()
m_procedure.extractFromTuple(value.value()->type(), tupleIndex).isFloat()
value.value()->type().isFloat()
void JSC::B3::(anonymous namespace)::Validater::validateStackmap(JSC::B3::Value *)
stackmap
stackmap->numChildren() >= stackmap->reps().size()
void JSC::B3::(anonymous namespace)::Validater::validatePhisAreDominatedByUpsilons()
undominatedPhis.isEmpty()
Undominated phi at top of entry block: 
B3::VariableLiveness
pinnedSize = 
maximum = 
./b3/B3Width.cpp
JSC::B3::Type JSC::B3::bestType(JSC::B3::Bank, JSC::B3::Width)
void WTF::printInternal(WTF::PrintStream &, JSC::B3::Width)
Air::generateAndAllocateRegisters
./b3/air/AirAllocateRegistersAndStackAndGenerateCode.cpp
void JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)
allocateRegistersAndStackByLinearScan
Air before linear scan:
Air after linear scan:
allocateRegistersByGraphColoring
Air::Liveness
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/Liveness.h
void WTF::Liveness<JSC::B3::Air::UnifiedTmpLivenessAdapter>::compute() [Adapter = JSC::B3::Air::UnifiedTmpLivenessAdapter]
bool JSC::B3::Air::GenerateAndAllocateRegisters::assignTmp(JSC::B3::Air::Tmp &, JSC::B3::Bank, bool)
LinearScan::buildIntervals
At block 
  indexOfHead = 
  idnexOfTail = 
Intervals:
Clobbers: 
{interval = 
, spilled = 
, assigned = 
, isUnspillable = 
, possibleRegs = 
, didBuildPossibleRegs = 
./b3/air/AirAllocateRegistersAndStackByLinearScan.cpp
void JSC::B3::Air::(anonymous namespace)::LinearScan::spill(JSC::B3::Air::Tmp)
!entry.isUnspillable
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/IndexMap.h
void WTF::IndexMap<JSC::B3::Air::Tmp::AbsolutelyIndexed<JSC::B3::GP>, JSC::B3::Air::(anonymous namespace)::TmpData>::append(const Key &, PassedValue &&) [Key = JSC::B3::Air::Tmp::AbsolutelyIndexed<JSC::B3::GP>, Value = JSC::B3::Air::(anonymous namespace)::TmpData, PassedValue = JSC::B3::Air::(anonymous namespace)::TmpData &]
void WTF::IndexMap<JSC::B3::Air::Tmp::AbsolutelyIndexed<JSC::B3::FP>, JSC::B3::Air::(anonymous namespace)::TmpData>::append(const Key &, PassedValue &&) [Key = JSC::B3::Air::Tmp::AbsolutelyIndexed<JSC::B3::FP>, Value = JSC::B3::Air::(anonymous namespace)::TmpData, PassedValue = JSC::B3::Air::(anonymous namespace)::TmpData &]
Tmps: 
Index #
  clobberIndex = 
  At: 
, instIndex = 
    Prev: 
    Next: 
  Active:
  Possible regs: 
void JSC::B3::Air::(anonymous namespace)::LinearScan::attemptScanForRegisters(JSC::B3::Bank)
spillEntry.assigned
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/Deque.h
T &WTF::Deque<JSC::B3::Air::Tmp, 0>::first() [T = JSC::B3::Air::Tmp, inlineCapacity = 0]
void JSC::B3::Air::(anonymous namespace)::LinearScan::assign(JSC::B3::Air::Tmp, JSC::Reg)
!entry.spilled
T &WTF::Deque<JSC::B3::Air::Tmp, 0>::last() [T = JSC::B3::Air::Tmp, inlineCapacity = 0]
About to allocate registers. State of all tmps:
At: 
Failed to allocate reg for: 
auto JSC::B3::Air::(anonymous namespace)::LinearScan::assignRegisters()::(anonymous class)::operator()(JSC::B3::Air::Tmp &) const
  Assigning offset = 
 to spill 
 for 
void WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<JSC::B3::GP, JSC::B3::Air::Arg::Cold>>::compute() [Adapter = JSC::B3::Air::TmpLivenessAdapter<JSC::B3::GP, JSC::B3::Air::Arg::Cold>]
./b3/air/AirAllocateRegistersByGraphColoring.cpp
bool JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned short, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>, JSC::B3::GP>::conservativeHeuristic(IndexType, IndexType) [IndexType = unsigned short, InterferenceSet = WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>, bank = JSC::B3::GP]
registerCount() <= MacroAssembler::numGPRs + MacroAssembler::numFPRs
IndexType JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned short, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>, JSC::B3::GP>::selectSpill() [IndexType = unsigned short, InterferenceSet = WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>, bank = JSC::B3::GP]
iterator != m_spillWorklist.end()
!m_unspillableTmps.get(*iterator)
FATAL: No color for 
Code:
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::GP, IRC, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned short, bank = JSC::B3::GP, AllocatorType = IRC, InterferenceSet = WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::GP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::GP, IRC, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>]
instBank == bank
inst.args.size() == 3
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::GP, Briggs, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned short, bank = JSC::B3::GP, AllocatorType = Briggs, InterferenceSet = WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::GP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::GP, Briggs, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>]
bool JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned short, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>, JSC::B3::GP>::conservativeHeuristic(IndexType, IndexType) [IndexType = unsigned short, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>, bank = JSC::B3::GP]
IndexType JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned short, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>, JSC::B3::GP>::selectSpill() [IndexType = unsigned short, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>, bank = JSC::B3::GP]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::GP, IRC, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned short, bank = JSC::B3::GP, AllocatorType = IRC, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::GP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::GP, IRC, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>>]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::GP, Briggs, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned short, bank = JSC::B3::GP, AllocatorType = Briggs, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::GP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::GP, Briggs, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>>]
bool JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned int, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>, JSC::B3::GP>::conservativeHeuristic(IndexType, IndexType) [IndexType = unsigned int, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>, bank = JSC::B3::GP]
IndexType JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned int, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>, JSC::B3::GP>::selectSpill() [IndexType = unsigned int, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>, bank = JSC::B3::GP]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned int, JSC::B3::GP, IRC, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned int, bank = JSC::B3::GP, AllocatorType = IRC, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::GP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned int, JSC::B3::GP, IRC, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>>]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned int, JSC::B3::GP, Briggs, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned int, bank = JSC::B3::GP, AllocatorType = Briggs, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::GP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned int, JSC::B3::GP, Briggs, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>>]
void WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<JSC::B3::FP, JSC::B3::Air::Arg::Cold>>::compute() [Adapter = JSC::B3::Air::TmpLivenessAdapter<JSC::B3::FP, JSC::B3::Air::Arg::Cold>]
bool JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned short, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>, JSC::B3::FP>::conservativeHeuristic(IndexType, IndexType) [IndexType = unsigned short, InterferenceSet = WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>, bank = JSC::B3::FP]
IndexType JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned short, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>, JSC::B3::FP>::selectSpill() [IndexType = unsigned short, InterferenceSet = WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>, bank = JSC::B3::FP]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::FP, IRC, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned short, bank = JSC::B3::FP, AllocatorType = IRC, InterferenceSet = WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::FP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::FP, IRC, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::FP, Briggs, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned short, bank = JSC::B3::FP, AllocatorType = Briggs, InterferenceSet = WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::FP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::FP, Briggs, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>]
bool JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned short, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>, JSC::B3::FP>::conservativeHeuristic(IndexType, IndexType) [IndexType = unsigned short, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>, bank = JSC::B3::FP]
IndexType JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned short, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>, JSC::B3::FP>::selectSpill() [IndexType = unsigned short, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>, bank = JSC::B3::FP]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::FP, IRC, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned short, bank = JSC::B3::FP, AllocatorType = IRC, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::FP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::FP, IRC, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>>]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::FP, Briggs, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned short, bank = JSC::B3::FP, AllocatorType = Briggs, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::FP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::FP, Briggs, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>>]
bool JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned int, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>, JSC::B3::FP>::conservativeHeuristic(IndexType, IndexType) [IndexType = unsigned int, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>, bank = JSC::B3::FP]
IndexType JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned int, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>, JSC::B3::FP>::selectSpill() [IndexType = unsigned int, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>, bank = JSC::B3::FP]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned int, JSC::B3::FP, IRC, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned int, bank = JSC::B3::FP, AllocatorType = IRC, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::FP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned int, JSC::B3::FP, IRC, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>>]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned int, JSC::B3::FP, Briggs, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned int, bank = JSC::B3::FP, AllocatorType = Briggs, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::FP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned int, JSC::B3::FP, Briggs, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>>]
void WTF::Liveness<JSC::B3::VariableLivenessAdapter>::compute() [Adapter = JSC::B3::VariableLivenessAdapter]
./b3/air/AirCode.h
void JSC::B3::Air::Code::setEntrypointLabels(Vector &&) [Vector = WTF::Vector<JSC::AbstractMacroAssembler<JSC::X86Assembler>::Label, 0, WTF::CrashOnOverflow, 16>]
allocateStackByGraphColoring
<invalid>
$0x%llx
%xzr
,Pre($
,Post($
(callArg)
./b3/air/AirArg.cpp
void JSC::B3::Air::Arg::dump(WTF::PrintStream &) const
Invalid
BigImm
BitImm
BitImm64
ZeroReg
SimpleAddr
Addr
ExtendedOffsetAddr
CallArg
Index
PreIndex
PostIndex
RelCond
ResCond
DoubleCond
StatusCond
Special
WidthArg
void WTF::printInternal(WTF::PrintStream &, Arg::Kind)
Cold
Warm
void WTF::printInternal(WTF::PrintStream &, Arg::Temperature)
Early
Late
void WTF::printInternal(WTF::PrintStream &, Arg::Phase)
OnlyEarly
OnlyLate
EarlyAndLate
void WTF::printInternal(WTF::PrintStream &, Arg::Timing)
UseDef
ZDef
UseZDef
UseAddr
ColdUse
LateUse
LateColdUse
EarlyDef
EarlyZDef
Scratch
void WTF::printInternal(WTF::PrintStream &, Arg::Role)
Signed
Unsigned
void WTF::printInternal(WTF::PrintStream &, Arg::Signedness)
: ; frequency = 
  Predecessors: 
  Successors: 
./b3/air/AirCCallSpecial.cpp
virtual CCallHelpers::Jump JSC::B3::Air::CCallSpecial::generate(JSC::B3::Air::Inst &, JSC::CCallHelpers &, JSC::B3::Air::GenerationContext &)
function call that uses the C calling convention.
./b3/air/AirCCallingConvention.cpp
JSC::B3::Air::Tmp JSC::B3::Air::cCallResult(JSC::B3::Type)
Air 
initial
./b3/air/AirCode.cpp
std::optional<unsigned int> JSC::B3::Air::Code::entrypointIndex(JSC::B3::Air::BasicBlock *) const
Entrypoints: 
Specials:
Frame size: 
 (Allocated)
Call arg area size: 
Callee saves: 
./b3/air/AirArg.h
static bool JSC::B3::Air::Arg::isRepresentableAs(JSC::B3::Width, JSC::B3::Air::Arg::Signedness, int64_t)
void WTF::Liveness<JSC::B3::Air::StackSlotLivenessAdapter>::compute() [Adapter = JSC::B3::Air::StackSlotLivenessAdapter]
FATAL: Unlowered C call: 
FATAL: Unlowered shuffle: 
./b3/air/AirDisassembler.cpp
void JSC::B3::Air::Disassembler::addInst(JSC::B3::Air::Inst *, MacroAssembler::Label, MacroAssembler::Label)
void JSC::B3::Air::Disassembler::dump(JSC::B3::Air::Code &, WTF::PrintStream &, JSC::LinkBuffer &, const char *, const char *, const ScopedLambda<void (JSC::B3::Air::Inst &)> &)
# Late paths
eliminateDeadCode
./b3/air/AirEmitShuffle.cpp
Vector<JSC::B3::Air::Inst> JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &, Vector<JSC::B3::Air::ShufflePair>, std::array<Arg, 2>, JSC::B3::Bank, JSC::B3::Value *)
fixObviousSpills
fixPartialRegisterStalls
./b3/air/AirFixSpillsAfterTerminals.cpp
void JSC::B3::Air::fixSpillsAfterTerminals(JSC::B3::Air::Code &)
Air::prepareForGeneration
Initial air:
Air after 
Register pressure after register allocation:
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/Assertions.h
void UNREACHABLE_FOR_PLATFORM()
auto JSC::B3::Air::Disassembler::dump(JSC::B3::Air::Code &, WTF::PrintStream &, JSC::LinkBuffer &, const char *, const char *, const ScopedLambda<void (JSC::B3::Air::Inst &)> &)::(anonymous class)::operator()(CCallHelpers::Label, CCallHelpers::Label) const
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)3123, T = JSC::AssemblerLabel]
./b3/air/AirEmitShuffle.h
JSC::B3::Air::Opcode JSC::B3::Air::moveFor(JSC::B3::Bank, JSC::B3::Width)
auto JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &, Vector<JSC::B3::Air::ShufflePair>, std::array<Arg, 2>, JSC::B3::Bank, JSC::B3::Value *)::(anonymous class)::operator()(const JSC::B3::Air::ShufflePair &, unsigned int) const
./b3/air/AirFixObviousSpills.cpp
void JSC::B3::Air::(anonymous namespace)::FixObviousSpills::fixCode()
Air::generate
./b3/air/AirGenerate.cpp
void JSC::B3::Air::generateWithAlreadyAllocatedRegisters(JSC::B3::Air::Code &, JSC::CCallHelpers &)
Add32
Add8
Add16
Add64
AddDouble
AddFloat
Sub32
Sub64
SubDouble
SubFloat
Neg32
Neg64
NegateDouble
NegateFloat
Mul32
Mul64
MultiplyAdd32
MultiplyAdd64
MultiplyAddSignExtend32
MultiplyAddZeroExtend32
MultiplySub32
MultiplySub64
MultiplySubSignExtend32
MultiplySubZeroExtend32
MultiplyNeg32
MultiplyNeg64
MultiplyNegSignExtend32
MultiplyNegZeroExtend32
MultiplySignExtend32
MultiplyZeroExtend32
Div32
UDiv32
Div64
UDiv64
MulDouble
MulFloat
DivDouble
DivFloat
X86ConvertToDoubleWord32
X86ConvertToQuadWord64
X86Div32
X86UDiv32
X86Div64
X86UDiv64
Lea32
Lea64
And32
And64
AndDouble
AndFloat
OrDouble
OrFloat
XorDouble
XorFloat
Lshift32
Lshift64
Rshift32
Rshift64
Urshift32
Urshift64
RotateRight32
RotateRight64
RotateLeft32
RotateLeft64
Or32
Or64
Xor32
Xor64
Not32
Not64
AbsDouble
AbsFloat
CeilDouble
CeilFloat
FloorDouble
FloorFloat
SqrtDouble
SqrtFloat
ConvertInt32ToDouble
ConvertInt64ToDouble
ConvertInt32ToFloat
ConvertInt64ToFloat
CountLeadingZeros32
CountLeadingZeros64
ConvertDoubleToFloat
ConvertFloatToDouble
Move
Swap32
Swap64
MoveWithIncrement64
Move32
MoveWithIncrement32
Store32
Store64
SignExtend32ToPtr
ZeroExtend8To32
SignExtend8To32
ZeroExtend16To32
SignExtend16To32
MoveFloat
MoveDouble
MoveZeroToDouble
Move64ToDouble
Move32ToFloat
MoveDoubleTo64
MoveFloatTo32
Load8
LoadAcq8
StoreRel8
Load8SignedExtendTo32
LoadAcq8SignedExtendTo32
Load16
LoadAcq16
Load16SignedExtendTo32
LoadAcq16SignedExtendTo32
StoreRel16
LoadAcq32
StoreRel32
LoadAcq64
StoreRel64
Xchg8
Xchg16
Xchg32
Xchg64
ExtractUnsignedBitfield32
ExtractUnsignedBitfield64
InsertUnsignedBitfieldInZero32
InsertUnsignedBitfieldInZero64
InsertBitField32
InsertBitField64
ClearBitField32
ClearBitField64
ClearBitsWithMask32
ClearBitsWithMask64
OrNot32
OrNot64
XorNot32
XorNot64
XorNotLeftShift32
XorNotRightShift32
XorNotUnsignedRightShift32
XorNotLeftShift64
XorNotRightShift64
XorNotUnsignedRightShift64
ExtractInsertBitfieldAtLowEnd32
ExtractInsertBitfieldAtLowEnd64
InsertSignedBitfieldInZero32
InsertSignedBitfieldInZero64
ExtractSignedBitfield32
ExtractSignedBitfield64
ExtractRegister32
ExtractRegister64
AddLeftShift32
AddRightShift32
AddUnsignedRightShift32
AddLeftShift64
AddRightShift64
AddUnsignedRightShift64
SubLeftShift32
SubRightShift32
SubUnsignedRightShift32
SubLeftShift64
SubRightShift64
SubUnsignedRightShift64
AndLeftShift32
AndRightShift32
AndUnsignedRightShift32
AndLeftShift64
AndRightShift64
AndUnsignedRightShift64
XorLeftShift32
XorRightShift32
XorUnsignedRightShift32
XorLeftShift64
XorRightShift64
XorUnsignedRightShift64
OrLeftShift32
OrRightShift32
OrUnsignedRightShift32
OrLeftShift64
OrRightShift64
OrUnsignedRightShift64
FloatMax
FloatMin
DoubleMax
DoubleMin
AtomicStrongCAS8
AtomicStrongCAS16
AtomicStrongCAS32
AtomicStrongCAS64
BranchAtomicStrongCAS8
BranchAtomicStrongCAS16
BranchAtomicStrongCAS32
BranchAtomicStrongCAS64
AtomicAdd8
AtomicAdd16
AtomicAdd32
AtomicAdd64
AtomicSub8
AtomicSub16
AtomicSub32
AtomicSub64
AtomicAnd8
AtomicAnd16
AtomicAnd32
AtomicAnd64
AtomicOr8
AtomicOr16
AtomicOr32
AtomicOr64
AtomicXor8
AtomicXor16
AtomicXor32
AtomicXor64
AtomicNeg8
AtomicNeg16
AtomicNeg32
AtomicNeg64
AtomicNot8
AtomicNot16
AtomicNot32
AtomicNot64
AtomicXchgAdd8
AtomicXchgAdd16
AtomicXchgAdd32
AtomicXchgAdd64
AtomicXchg8
AtomicXchg16
AtomicXchg32
AtomicXchg64
LoadLink8
LoadLinkAcq8
StoreCond8
StoreCondRel8
LoadLink16
LoadLinkAcq16
StoreCond16
StoreCondRel16
LoadLink32
LoadLinkAcq32
StoreCond32
StoreCondRel32
LoadLink64
LoadLinkAcq64
StoreCond64
StoreCondRel64
Depend32
Depend64
AtomicXchgOr8
AtomicXchgOr16
AtomicXchgOr32
AtomicXchgOr64
AtomicXchgClear8
AtomicXchgClear16
AtomicXchgClear32
AtomicXchgClear64
AtomicXchgXor8
AtomicXchgXor16
AtomicXchgXor32
AtomicXchgXor64
Compare32
Compare64
Test32
Test64
CompareDouble
CompareFloat
Branch8
Branch32
Branch64
BranchTest8
BranchTest32
BranchTest64
BranchTestBit64
BranchTestBit32
BranchDouble
BranchFloat
BranchAdd32
BranchAdd64
BranchMul32
BranchMul64
BranchSub32
BranchSub64
BranchNeg32
BranchNeg64
MoveConditionally32
MoveConditionally64
MoveConditionallyTest32
MoveConditionallyTest64
MoveConditionallyDouble
MoveConditionallyFloat
MoveDoubleConditionally32
MoveDoubleConditionally64
MoveDoubleConditionallyTest32
MoveDoubleConditionallyTest64
MoveDoubleConditionallyDouble
MoveDoubleConditionallyFloat
MemoryFence
StoreFence
LoadFence
RetVoid
Ret32
Ret64
RetFloat
RetDouble
Shuffle
Patch
ColdCCall
/Library/Caches/com.apple.xbs/Binaries/JavaScriptCore_Sim/install/Symbols/BuiltProducts/DerivedSources/JavaScriptCore/AirOpcodeGenerated.h
void WTF::printInternal(WTF::PrintStream &, JSC::B3::Air::Opcode)
Bad call to forEachArgCustom, not custom opcode: 
void JSC::B3::Air::Inst::forEachArgCustom(ScopedLambda<JSC::B3::Air::Inst::EachArgCallback>)
CCallHelpers::Jump JSC::B3::Air::Inst::generate(JSC::CCallHelpers &, JSC::B3::Air::GenerationContext &)
Effects
lowerAfterRegAlloc
lowerEntrySwitch
./b3/air/AirLowerEntrySwitch.cpp
void JSC::B3::Air::lowerEntrySwitch(JSC::B3::Air::Code &)
void JSC::MacroAssemblerX86Common::floatingPointCompare(JSC::MacroAssemblerX86Common::DoubleCondition, JSC::AbstractMacroAssembler<JSC::X86Assembler>::FPRegisterID, JSC::AbstractMacroAssembler<JSC::X86Assembler>::FPRegisterID, JSC::AbstractMacroAssembler<JSC::X86Assembler>::RegisterID, Function) [Function = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/MacroAssemblerX86Common.h:2020:55)]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/MacroAssemblerX86_64.h
JSC::AbstractMacroAssembler<JSC::X86Assembler>::Jump JSC::MacroAssemblerX86_64::branchTestBit64(JSC::MacroAssemblerX86Common::ResultCondition, JSC::AbstractMacroAssembler<JSC::X86Assembler>::RegisterID, JSC::AbstractMacroAssembler<JSC::X86Assembler>::TrustedImm32)
JSC::AbstractMacroAssembler<JSC::X86Assembler>::Jump JSC::MacroAssemblerX86_64::branchTestBit64(JSC::MacroAssemblerX86Common::ResultCondition, JSC::AbstractMacroAssembler<JSC::X86Assembler>::RegisterID, JSC::AbstractMacroAssembler<JSC::X86Assembler>::RegisterID)
JSC::AbstractMacroAssembler<JSC::X86Assembler>::Jump JSC::MacroAssemblerX86_64::branchTestBit64(JSC::MacroAssemblerX86Common::ResultCondition, JSC::AbstractMacroAssembler<JSC::X86Assembler>::Address, JSC::AbstractMacroAssembler<JSC::X86Assembler>::TrustedImm32)
JSC::AbstractMacroAssembler<JSC::X86Assembler>::Jump JSC::MacroAssemblerX86Common::branchTestBit32(JSC::MacroAssemblerX86Common::ResultCondition, JSC::AbstractMacroAssembler<JSC::X86Assembler>::RegisterID, JSC::AbstractMacroAssembler<JSC::X86Assembler>::TrustedImm32)
JSC::AbstractMacroAssembler<JSC::X86Assembler>::Jump JSC::MacroAssemblerX86Common::branchTestBit32(JSC::MacroAssemblerX86Common::ResultCondition, JSC::AbstractMacroAssembler<JSC::X86Assembler>::RegisterID, JSC::AbstractMacroAssembler<JSC::X86Assembler>::RegisterID)
JSC::AbstractMacroAssembler<JSC::X86Assembler>::Jump JSC::MacroAssemblerX86Common::branchTestBit32(JSC::MacroAssemblerX86Common::ResultCondition, JSC::AbstractMacroAssembler<JSC::X86Assembler>::Address, JSC::AbstractMacroAssembler<JSC::X86Assembler>::TrustedImm32)
static JSC::MacroAssemblerX86Common::ResultCondition JSC::MacroAssemblerX86Common::invert(JSC::MacroAssemblerX86Common::ResultCondition)
static JSC::MacroAssemblerX86Common::DoubleCondition JSC::MacroAssemblerX86Common::invert(JSC::MacroAssemblerX86Common::DoubleCondition)
       
void JSC::B3::Air::Code::setEntrypoints(Vector &&) [Vector = WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>, 0, WTF::CrashOnOverflow, 16>]
Air::lowerMacros
lowerStackArgs
./b3/air/AirOptimizeBlockOrder.cpp
Vector<JSC::B3::Air::BasicBlock *> JSC::B3::Air::blocksInOptimizedOrder(JSC::B3::Air::Code &)
optimizeBlockOrder
./b3/air/AirLowerStackArgs.cpp
auto JSC::B3::Air::lowerStackArgs(JSC::B3::Air::Code &)::(anonymous class)::operator()(JSC::B3::Air::Arg &, Arg::Role, JSC::B3::Bank, JSC::B3::Width) const
reportUsedRegisters
simplifyCFG
./b3/air/AirSimplifyCFG.cpp
bool JSC::B3::Air::simplifyCFG(JSC::B3::Air::Code &)
./b3/air/AirStackAllocation.cpp
void JSC::B3::Air::assign(JSC::B3::Air::StackSlot *, const Vector<JSC::B3::Air::StackSlot *> &)
Vector<JSC::B3::Air::StackSlot *> JSC::B3::Air::allocateAndGetEscapedStackSlotsWithoutChangingFrameSize(JSC::B3::Air::Code &)
spill
stack
byteSize = 
, offsetFromFP = 
, kind = 
./b3/air/AirStackSlot.cpp
JSC::B3::Air::StackSlot::StackSlot(uint64_t, JSC::B3::Air::StackSlotKind, intptr_t)
Locked
Spill
./b3/air/AirStackSlotKind.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::B3::Air::StackSlotKind)
%tmp
%ftmp
<none>
./b3/air/AirValidate.cpp
void JSC::B3::Air::(anonymous namespace)::Validater::run()
!block->numPredecessors()
At entrypoint 
validSlots.contains(arg.stackSlot())
validSpecials.contains(arg.special())
inst.isValidForm()
inst.isTerminal()
!inst.isTerminal()
block->numSuccessors() == m_code.proc().numEntrypoints()
!inst.kind.effects
validBlocks.contains(successor)
AIR VALIDATION FAILURE
auto JSC::B3::Air::(anonymous namespace)::Validater::run()::(anonymous class)::operator()(JSC::B3::Air::Arg &, Arg::Role, JSC::B3::Bank, JSC::B3::Width) const
&arg >= &inst.args[0]
&arg <= &inst.args.last()
./builtins/BuiltinExecutables.cpp
static JSC::SourceCode JSC::BuiltinExecutables::defaultConstructorSourceCode(JSC::ConstructorKind)
static JSC::UnlinkedFunctionExecutable *JSC::BuiltinExecutables::createExecutable(JSC::VM &, const JSC::SourceCode &, const JSC::Identifier &, JSC::ConstructorKind, JSC::ConstructAbility, JSC::NeedsClassFieldInitializer, JSC::PrivateBrandRequirement)
use strict
Expected Metadata:
Metadata from parser:
positionBeforeLastNewlineFromParser.line 
positionBeforeLastNewlineFromParser.offset 
positionBeforeLastNewlineFromParser.lineStartOffset 
positionBeforeLastNewline.line 
positionBeforeLastNewline.offset 
positionBeforeLastNewline.lineStartOffset 
Metadata of parser and hand rolled parser don't match
[Symbol.match]
[Symbol.matchAll]
[Symbol.replace]
[Symbol.search]
get [Symbol.species]
[Symbol.split]
[Symbol.asyncIterator]
[Symbol.hasInstance]
[Symbol.iterator]
Symbol.hasInstance
Symbol.isConcatSpreadable
Symbol.asyncIterator
Symbol.iterator
Symbol.match
Symbol.matchAll
Symbol.replace
Symbol.search
Symbol.species
Symbol.split
Symbol.toPrimitive
Symbol.toStringTag
Symbol.unscopables
IntlLegacyConstructedSymbol
AsyncFromSyncIterator
InternalPromise
Promise
RegExpStringIterator
advanceStringIndex
allSettled
anchor
apply
arrayIteratorNextHelper
asyncFunctionResume
asyncGeneratorEnqueue
asyncGeneratorQueueDequeue
asyncGeneratorQueueEnqueue
asyncGeneratorQueueIsEmpty
asyncGeneratorReject
asyncGeneratorResolve
asyncGeneratorResumeNext
asyncGeneratorYield
asyncModuleEvaluation
awaitValue
bind
blink
bold
call
catch
compileStreaming
concat
concatSlowPath
copyWithin
createAsyncFromSyncIterator
createHTML
createResolvingFunctions
createResolvingFunctionsWithoutPromise
deleteProperty
dependencyKeysIfEvaluated
doAsyncGeneratorBodyCall
ensureRegistered
evaluate
every
filter
finally
find
findIndex
findLast
findLastIndex
fixed
flat
flatIntoArray
flatIntoArrayWithCallback
flatMap
fontcolor
fontsize
forEach
forceFulfillPromise
from
fromEntries
fulfillFetch
fulfillPromise
fulfillPromiseWithFirstResolvingFunctionCallCheck
fulfillWithoutPromise
generatorResume
getSubstitution
groupBy
groupByToMap
hasObservableSideEffectsForRegExpMatch
hasObservableSideEffectsForRegExpSplit
hasObservableSideEffectsForStringReplace
importValue
includes
instantiateStreaming
internalAll
isArray
isExecutionState
isFinite
isNaN
isSuspendYieldState
italics
link
linkAndEvaluateModule
loadAndEvaluateModule
loadModule
mapIteratorNext
match
matchAll
matchSlow
maxWithPositives
minWithMaybeNegativeZeroAndPositive
moduleEvaluation
newHandledRejectedPromise
newPromiseCapability
newPromiseCapabilitySlow
newRegistryEntry
padEnd
padStart
performIteration
performPromiseThen
promiseEmptyOnFulfilled
promiseEmptyOnRejected
promiseReactionJob
promiseReactionJobWithoutPromise
promiseRejectSlow
promiseResolve
promiseResolveSlow
promiseResolveThenableJob
promiseResolveThenableJobFast
promiseResolveThenableJobWithDerivedPromise
promiseResolveThenableJobWithoutPromiseFast
provideFetch
pushNewPromiseReaction
race
reduce
reduceRight
regExpExec
rejectPromise
rejectPromiseWithFirstResolvingFunctionCallCheck
rejectWithoutPromise
repeat
repeatCharactersSlowPath
repeatSlowPath
replace
replaceAll
requestFetch
requestImportModule
requestInstantiate
requestSatisfy
resolvePromise
resolvePromiseWithFirstResolvingFunctionCallCheck
resolveWithoutPromise
return
search
setIteratorNext
setStateToMax
small
some
sort
sortBucketSort
sortCommit
sortCompact
sortMerge
sortMergeSort
sortStringComparator
speciesConstructor
speciesGetter
split
strike
stringConcatSlowPath
subarray
symbolAsyncIteratorGetter
symbolHasInstance
symbolIteratorGetter
then
throw
toDateTimeOptionsAnyAll
toDateTimeOptionsDateDate
toDateTimeOptionsTimeTime
toIntegerOrInfinity
toLength
toLocaleDateString
toLocaleString
toLocaleTimeString
triggerPromiseReactions
typedArrayElementCompare
typedArrayMerge
typedArrayMergeSort
typedArraySpeciesConstructor
wrap
arrayPush
getByIdDirect
getByIdDirectPrivate
getPrototypeOf
getPromiseInternalField
getGeneratorInternalField
getAsyncGeneratorInternalField
getAbstractModuleRecordInternalField
getArrayIteratorInternalField
getStringIteratorInternalField
getMapIteratorInternalField
getSetIteratorInternalField
idWithProfile
isObject
isCallable
isConstructor
isJSArray
isProxyObject
isDerivedArray
isGenerator
isAsyncGenerator
isPromise
isRegExpObject
isMap
isSet
isShadowRealm
isStringIterator
isArrayIterator
isMapIterator
isSetIterator
isUndefinedOrNull
tailCallForwardArguments
throwTypeError
throwRangeError
throwOutOfMemoryError
tryGetById
tryGetByIdWithWellKnownSymbol
putByIdDirect
putByIdDirectPrivate
putByValDirect
putPromiseInternalField
putGeneratorInternalField
putAsyncGeneratorInternalField
putArrayIteratorInternalField
putStringIteratorInternalField
putMapIteratorInternalField
putSetIteratorInternalField
toNumber
toString
toPropertyKey
toObject
newArrayWithSize
newPromise
createPromise
createArgumentsButterfly
undefined
Infinity
iterationKindKey
iterationKindValue
iterationKindEntries
MAX_ARRAY_INDEX
MAX_STRING_LENGTH
MAX_SAFE_INTEGER
ModuleFetch
ModuleTranslate
ModuleInstantiate
ModuleSatisfy
ModuleLink
ModuleReady
promiseRejectionReject
promiseRejectionHandle
promiseStatePending
promiseStateFulfilled
promiseStateRejected
promiseStateMask
promiseFlagsIsHandled
promiseFlagsIsFirstResolvingFunctionCalled
promiseFieldFlags
promiseFieldReactionsOrResult
generatorFieldState
generatorFieldNext
generatorFieldThis
generatorFieldFrame
GeneratorResumeModeNormal
GeneratorResumeModeThrow
GeneratorResumeModeReturn
GeneratorStateCompleted
GeneratorStateExecuting
arrayIteratorFieldIndex
arrayIteratorFieldIteratedObject
arrayIteratorFieldKind
mapIteratorFieldMapBucket
mapIteratorFieldKind
setIteratorFieldSetBucket
setIteratorFieldKind
stringIteratorFieldIndex
stringIteratorFieldIteratedString
asyncGeneratorFieldSuspendReason
asyncGeneratorFieldQueueFirst
asyncGeneratorFieldQueueLast
AsyncGeneratorStateCompleted
AsyncGeneratorStateExecuting
AsyncGeneratorStateAwaitingReturn
AsyncGeneratorStateSuspendedStart
AsyncGeneratorStateSuspendedYield
AsyncGeneratorSuspendReasonYield
AsyncGeneratorSuspendReasonAwait
AsyncGeneratorSuspendReasonNone
abstractModuleRecordFieldState
sentinelMapBucket
sentinelSetBucket
applyFunction
arraySpeciesCreate
assert
callFunction
charCodeAt
executor
isView
iteratedObject
iteratedString
promise
promiseOrCapability
Number
Array
ArrayBuffer
ShadowRealm
RegExp
create
defaultPromiseThen
throwTypeErrorFunction
typedArrayLength
typedArrayContentType
typedArraySort
typedArrayGetOriginalConstructor
typedArraySubarrayCreate
BuiltinLog
BuiltinDescribe
homeObject
enqueueJob
hostPromiseRejectionTracker
onFulfilled
onRejected
push
repeatCharacter
starDefault
starNamespace
keys
values
shift
Int8Array
Int16Array
Int32Array
Uint8Array
Uint8ClampedArray
Uint16Array
Uint32Array
Float32Array
Float64Array
BigInt64Array
BigUint64Array
exec
generator
generatorNext
generatorState
generatorFrame
generatorValue
generatorThis
generatorResumeMode
syncIterator
nextMethod
asyncGeneratorQueueItemNext
dateTimeFormat
this
importInRealm
evalInRealm
moveFunctionToRealm
thisTimeValue
newTargetLocal
derivedConstructor
isTypedArrayView
isSharedTypedArrayView
isDetached
typedArrayDefaultComparator
isBoundFunction
hasInstanceBoundFunction
instanceOf
isArraySlow
sameValue
concatMemcpy
appendMemcpy
regExpCreate
isRegExp
replaceUsingRegExp
replaceUsingStringSearch
replaceAllUsingStringSearch
makeTypeError
AggregateError
mapBucketHead
mapBucketNext
mapBucketKey
mapBucketValue
setBucketHead
setBucketNext
setBucketKey
setPrototypeDirect
setPrototypeDirectOrThrow
regExpBuiltinExec
regExpMatchFast
regExpProtoFlagsGetter
regExpProtoGlobalGetter
regExpProtoIgnoreCaseGetter
regExpProtoMultilineGetter
regExpProtoSourceGetter
regExpProtoStickyGetter
regExpProtoUnicodeGetter
regExpPrototypeSymbolMatch
regExpPrototypeSymbolReplace
regExpSearchFast
regExpSplitFast
regExpTestFast
regExpStringIteratorRegExp
regExpStringIteratorString
regExpStringIteratorGlobal
regExpStringIteratorUnicode
regExpStringIteratorDone
stringIncludesInternal
stringIndexOfInternal
stringSplitFast
stringSubstringInternal
makeBoundFunction
hasOwnLengthProperty
importModule
copyDataProperties
meta
webAssemblyCompileStreamingInternal
webAssemblyInstantiateStreamingInternal
instanceFieldInitializer
privateBrand
privateClassBrand
hasOwnPropertyFunction
createPrivateSymbol
entries
outOfLineReactionCounts
emptyPropertyNameEnumerator
sentinelString
PolyProto
hasInstance
isConcatSpreadable
asyncIterator
species
toPrimitive
toStringTag
unscopables
(function () { })
(function (...args) { super(...args); })
./bytecode/AccessCase.cpp
JSC::AccessCase::AccessCase(JSC::VM &, JSC::JSCell *, JSC::AccessCase::AccessType, JSC::CacheableIdentifier, JSC::PropertyOffset, JSC::Structure *, const JSC::ObjectPropertyConditionSet &, RefPtr<JSC::PolyProtoAccessChain> &&)
static RefPtr<JSC::AccessCase> JSC::AccessCase::createTransition(JSC::VM &, JSC::JSCell *, JSC::CacheableIdentifier, JSC::PropertyOffset, JSC::Structure *, JSC::Structure *, const JSC::ObjectPropertyConditionSet &, RefPtr<JSC::PolyProtoAccessChain> &&, const JSC::StructureStubInfo &)
static Ref<JSC::AccessCase> JSC::AccessCase::createDelete(JSC::VM &, JSC::JSCell *, JSC::CacheableIdentifier, JSC::PropertyOffset, JSC::Structure *, JSC::Structure *)
static Ref<JSC::AccessCase> JSC::AccessCase::createSetPrivateBrand(JSC::VM &, JSC::JSCell *, JSC::CacheableIdentifier, JSC::Structure *, JSC::Structure *)
static RefPtr<JSC::AccessCase> JSC::AccessCase::fromStructureStubInfo(JSC::VM &, JSC::JSCell *, JSC::CacheableIdentifier, JSC::StructureStubInfo &)
Vector<JSC::WatchpointSet *, 2> JSC::AccessCase::commit(JSC::VM &)
bool JSC::AccessCase::requiresIdentifierNameMatch() const
bool JSC::AccessCase::requiresInt32PropertyCheck() const
bool JSC::AccessCase::needsScratchFPR() const
bool JSC::AccessCase::canReplace(const JSC::AccessCase &) const
ident = '
prototype access chain = 
from structure = 
to structure = 
structure = 
conditions = 
void JSC::AccessCase::generateWithGuard(JSC::AccessGenerationState &, CCallHelpers::JumpList &)
void JSC::AccessCase::generate(JSC::AccessGenerationState &)
void JSC::AccessCase::generateImpl(JSC::AccessGenerationState &)
This condition is no longer met: 
static JSC::TypedArrayType JSC::AccessCase::toTypedArrayType(JSC::AccessCase::AccessType)
./bytecode/AdaptiveInferredPropertyValueWatchpointBase.cpp
JSC::AdaptiveInferredPropertyValueWatchpointBase::AdaptiveInferredPropertyValueWatchpointBase(const JSC::ObjectPropertyCondition &)
void JSC::AdaptiveInferredPropertyValueWatchpointBase::initialize(const JSC::ObjectPropertyCondition &)
void JSC::AdaptiveInferredPropertyValueWatchpointBase::install(JSC::VM &)
<empty>
NonArray
NonArrayWithInt32
NonArrayWithDouble
NonArrayWithContiguous
NonArrayWithArrayStorage
NonArrayWithSlowPutArrayStorage
ArrayClass
ArrayWithUndecided
ArrayWithInt32
ArrayWithDouble
ArrayWithContiguous
ArrayWithArrayStorage
ArrayWithSlowPutArrayStorage
CopyOnWriteArrayWithInt32
CopyOnWriteArrayWithDouble
CopyOnWriteArrayWithContiguous
Int8ArrayMode
Int16ArrayMode
Int32ArrayMode
Uint8ArrayMode
Uint8ClampedArrayMode
Uint16ArrayMode
Uint32ArrayMode
Float32ArrayMode
Float64ArrayMode
BigInt64ArrayMode
BigUint64ArrayMode
Predecessors: [
Successors: [
Identifiers:
  id
Constants:
: in source as double
: in source as integer
: in source as link-time-constant
   k%u = %s%s
Exception Handlers:
 %d: { start: [%4d] end: [%4d] target: [%4d] } %s
Switch Jump Tables:
  %1d = {
%4d => %04d
      }
String Switch Jump Tables:
"%s" => %04d
[%4u] %-18s 
wasm size: 
 bytes
bytecode: %lu instructions (%lu 16-bit instructions, %lu 32-bit instructions); %lu bytes; %d parameter(s); %d local(s); %d callee register(s)
   const
./bytecode/BytecodeDumper.cpp
WTF::CString JSC::Wasm::BytecodeDumper::formatConstant(JSC::Wasm::Type, uint64_t) const
auto JSC::AccessCase::generateWithGuard(JSC::AccessGenerationState &, CCallHelpers::JumpList &)::(anonymous class)::operator()()::(anonymous class)::operator()(JSC::Structure *, bool) const
./bytecode/PropertyCondition.h
bool JSC::PropertyCondition::operator==(const JSC::PropertyCondition &) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
synthesized catch
synthesized finally
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/CodeBlock.h
JSC::HandlerInfo &JSC::CodeBlock::exceptionHandler(int)
./bytecode/CallLinkInfo.h
static bool JSC::CallLinkInfo::isDirect(JSC::CallLinkInfo::CallType)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecompiler/Label.h
int JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::target() [Traits = JSC::JSGeneratorTraits]
int JSC::GenericBoundLabel<JSC::Wasm::GeneratorTraits>::target() [Traits = JSC::Wasm::GeneratorTraits]
: %lu instructions (%lu 16-bit instructions, %lu 32-bit instructions, %lu instructions with metadata); %lu bytes (%lu metadata bytes); %d parameter(s); %d callee register(s); %d variable(s)
; scope at 
Funcref
Externref
RefNull
Func
Void
/Library/Caches/com.apple.xbs/Binaries/JavaScriptCore_Sim/install/Symbols/BuiltProducts/DerivedSources/JavaScriptCore/WasmOps.h
const char *JSC::Wasm::makeString(JSC::Wasm::TypeKind)
Bytecodes before generatorification
Bytecodes after generatorification
Dumping bytecode liveness for 
Bytecode basic block %u: %p (offset: %u, length: %u)
Predecessors:
Successors:
Entry block %p
Exit block: %p
Live variables:
./bytecode/BytecodeLivenessAnalysis.cpp
Bitmap<maxNumCheckpointTmps> JSC::tmpLivenessForCheckpoint(const JSC::CodeBlock &, JSC::BytecodeIndex)
./bytecode/BytecodeUseDef.cpp
void JSC::computeUsesForBytecodeIndexImpl(JSC::VirtualRegister, const JSC::Instruction *, JSC::Checkpoint, const ScopedLambda<void (JSC::VirtualRegister)> &)
void JSC::computeDefsForBytecodeIndexImpl(unsigned int, const JSC::Instruction *, JSC::Checkpoint, const ScopedLambda<void (JSC::VirtualRegister)> &)
./bytecode/CallLinkInfo.cpp
void JSC::CallLinkInfo::unlink(JSC::VM &)
CodeLocationLabel<JSInternalPtrTag> JSC::CallLinkInfo::doneLocation()
void JSC::CallLinkInfo::setMonomorphicCallee(JSC::VM &, JSC::JSCell *, JSC::JSObject *, MacroAssemblerCodePtr<JSEntryPtrTag>)
void JSC::CallLinkInfo::clearCallee()
JSC::JSObject *JSC::CallLinkInfo::callee()
void JSC::CallLinkInfo::setCodeBlock(JSC::VM &, JSC::JSCell *, JSC::FunctionCodeBlock *)
void JSC::CallLinkInfo::setLastSeenCallee(JSC::VM &, const JSC::JSCell *, JSC::JSObject *)
void JSC::CallLinkInfo::clearLastSeenCallee()
JSC::JSObject *JSC::CallLinkInfo::lastSeenCallee() const
void JSC::CallLinkInfo::setExecutableDuringCompilation(JSC::ExecutableBase *)
JSC::ExecutableBase *JSC::CallLinkInfo::executable()
void JSC::CallLinkInfo::setMaxArgumentCountIncludingThis(unsigned int)
: clearing call stub to 
, stub routine 
Clearing call to 
 because the executable is dead.
static MacroAssembler::JumpList JSC::CallLinkInfo::emitFastPathImpl(JSC::CallLinkInfo *, JSC::CCallHelpers &, JSC::GPRReg, JSC::GPRReg, JSC::CallLinkInfo::UseDataIC, bool, ScopedLambda<void ()> &&)
CCallHelpers::JumpList JSC::OptimizingCallLinkInfo::emitFastPath(JSC::CCallHelpers &, JSC::GPRReg, JSC::GPRReg, JSC::CallLinkInfo::UseDataIC)
MacroAssembler::JumpList JSC::OptimizingCallLinkInfo::emitTailCallFastPath(JSC::CCallHelpers &, JSC::GPRReg, ScopedLambda<void ()> &&)
CodeLocationLabel<JSInternalPtrTag> JSC::OptimizingCallLinkInfo::slowPathStart()
void JSC::OptimizingCallLinkInfo::emitDirectFastPath(JSC::CCallHelpers &)
void JSC::OptimizingCallLinkInfo::emitDirectTailCallFastPath(JSC::CCallHelpers &, ScopedLambda<void ()> &&)
void JSC::OptimizingCallLinkInfo::initializeDirectCall()
initialize direct call
void JSC::OptimizingCallLinkInfo::setDirectCallTarget(CodeLocationLabel<JSEntryPtrTag>)
Setting direct call target
./bytecode/CallLinkInfo.h
static bool JSC::CallLinkInfo::isDirect(JSC::CallLinkInfo::CallType)
static JSC::CallMode JSC::CallLinkInfo::callModeFor(JSC::CallLinkInfo::CallType)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecompiler/Label.h
int JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::target() [Traits = JSC::JSGeneratorTraits]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/SymbolTable.h
void JSC::SymbolTable::set(const JSC::ConcurrentJSLocker &, WTF::UniquedStringImpl *, Entry &&) [Entry = JSC::SymbolTableEntry]
void JSC::SymbolTableEntry::pack(JSC::VarOffset, bool, bool, bool)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/AbstractMacroAssembler.h
static void JSC::AbstractMacroAssembler<JSC::X86Assembler>::repatchNearCall(CodeLocationNearCall<callTag>, CodeLocationLabel<destTag>) [AssemblerType = JSC::X86Assembler, callTag = (WTF::PtrTag)26432, destTag = (WTF::PtrTag)357]
static void JSC::AbstractMacroAssembler<JSC::X86Assembler>::repatchNearCall(CodeLocationNearCall<callTag>, CodeLocationLabel<destTag>) [AssemblerType = JSC::X86Assembler, callTag = (WTF::PtrTag)26432, destTag = (WTF::PtrTag)26432]
./bytecode/CallLinkStatus.cpp
static JSC::CallLinkStatus JSC::CallLinkStatus::computeFromCallLinkInfo(const JSC::ConcurrentJSLocker &, JSC::CallLinkInfo &)
Not Set
Statically Proved
Could Take Slow Path
Based On Stub
maxArgumentCountIncludingThis = 
InternalFunction: 
(Function: 
; Executable: 
(Executable: 
Non-executable callee: 
./bytecode/CheckPrivateBrandStatus.cpp
JSC::CheckPrivateBrandStatus::CheckPrivateBrandStatus(JSC::StubInfoSummary, JSC::StructureStubInfo &)
void JSC::CheckPrivateBrandStatus::merge(const JSC::CheckPrivateBrandStatus &)
./bytecode/CodeBlock.cpp
bool JSC::CodeBlock::shouldVisitStrongly(const JSC::ConcurrentJSLocker &, Visitor &) [Visitor = JSC::AbstractSlotVisitor]
bool JSC::CodeBlock::shouldVisitStrongly(const JSC::ConcurrentJSLocker &, Visitor &) [Visitor = JSC::SlotVisitor]
CodeBlock
JSC::CodeBlockHash JSC::CodeBlock::hash() const
function 
 (ShouldAlwaysBeInlined)
 (NeverInline)
 (NeverOptimize)
 (NeverFTLOptimize)
 (DidTryToEnterInLoop)
 (StrictMode)
 (JITFail)
 (FTLFail)
 (HadFTLReplacement)
bool JSC::CodeBlock::finishCreation(JSC::VM &, JSC::ScriptExecutable *, JSC::UnlinkedCodeBlock *, JSC::JSScope *)
bool JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(JSC::VirtualRegister) const
void JSC::CodeBlock::setAlternative(JSC::VM &, JSC::CodeBlock *)
JSC::CodeBlock *JSC::CodeBlock::baselineAlternative()
JSC::CodeBlock *JSC::CodeBlock::baselineVersion()
JSC::HandlerInfo *JSC::CodeBlock::handlerForBytecodeIndex(JSC::BytecodeIndex, JSC::RequiredHandler)
JSC::DisposableCallSiteIndex JSC::CodeBlock::newExceptionHandlingCallSiteIndex(JSC::CallSiteIndex)
void JSC::CodeBlock::ensureCatchLivenessIsComputedForBytecodeIndexSlow(const JSC::OpCatch &, JSC::BytecodeIndex)
void JSC::CodeBlock::removeExceptionHandlerForCallSite(JSC::DisposableCallSiteIndex)
unsigned int JSC::CodeBlock::lineNumberForBytecodeIndex(JSC::BytecodeIndex)
JSC::CodeBlock *JSC::CodeBlock::replacement()
DFG::CapabilityLevel JSC::CodeBlock::computeCapabilityLevel()
jettison
void JSC::CodeBlock::jettison(Profiler::JettisonReason, JSC::ReoptimizationMode, const JSC::FireDetail *)
Jettisoning 
 and counting reoptimization
 due to 
 will be jettisoned because of the following dead references:
    Transition under 
    Weak reference 
    Did invalidate 
    Did count reoptimization for 
    Did install baseline version of 
void JSC::CodeBlock::noticeIncomingCall(JSC::CallFrame *)
Noticing call link from 
 to 
    Clearing SABI because caller is native.
    Clearing SABI because caller is too large.
    Clearing SABI because caller is in LLInt.
    Clearing SABI bcause caller was already optimized.
    Clearing SABI because caller is not a function.
    Clearing SABI because recursion was detected.
In call from 
: caller's DFG capability level is not set.
    Clearing SABI because the caller is not a DFG candidate.
: bytecode cost is 
, scaling execution counter by 
: Optimizing next invocation.
: Not optimizing anytime soon.
: Optimizing after warm-up.
: Optimizing after long warm-up.
: Optimizing soon.
: Forcing slow path concurrently.
: expected to have baseline code but have 
void JSC::CodeBlock::setOptimizationThresholdBasedOnCompilationResult(JSC::CompilationResult)
: we have result = 
 but 
we are our own replacement.
our replacement is 
Unrecognized result: 
Considering optimizing 
Profile hotness: %lf (%u / %u), %lf (%u / %u)
void JSC::CodeBlock::tallyFrequentExitSites()
unsigned int JSC::CodeBlock::frameRegisterCount()
    Wrong number of bits in result!
    Result: 
    Bit count: 
    Variable 
 is expected to be dead.
    entrypoint not allowed inside a try block.
Validation failure in 
Validation failure.
void JSC::CodeBlock::endValidationDidFail()
void JSC::CodeBlock::insertBasicBlockBoundariesForControlFlowProfiler()
std::optional<BytecodeIndex> JSC::CodeBlock::bytecodeIndexFromCallSiteIndex(JSC::CallSiteIndex)
<null codeBlock>
Firing watchpoint 
 on 
./bytecode/CallVariant.h
JSC::JSCell *JSC::CallVariant::nonExecutableCallee() const
./bytecode/StubInfoSummary.h
bool JSC::isInlineable(JSC::StubInfoSummary)
JSC::StubInfoSummary JSC::slowVersion(JSC::StubInfoSummary)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
Linking put_to_scope in 
./bytecode/CodeBlock.h
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/jit/JITCode.h
static bool JSC::JITCode::isLowerTier(JSC::JITType, JSC::JITType)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGCapabilities.h
JSC::DFG::CapabilityLevel JSC::DFG::functionCapabilityLevel(bool, bool, JSC::DFG::CapabilityLevel)
unsigned int JSC::CodeBlock::bytecodeOffset(const JSC::Instruction *)
iterator open
Clearing 
 LLInt property access.
iterator next
get by id
Clearing try_get_by_id LLInt property access.
Clearing get_by_id_direct LLInt property access.
Clearing LLInt private property access.
Clearing LLInt put transition.
Clearing LLInt put_private_name transition.
Clearing LLInt set_private_brand transition.
Clearing LLInt check_private_brand transition.
Clearing LLInt to_this with structure %p.
op_create_this
Clearing LLInt 
 with cached callee 
op_create_promise
op_create_generator
op_create_async_generator
Clearing dead symbolTable 
Clearing scope access with structure 
Clearing LLInt property access.
Clearing LLInt iterator open property access.
Clearing LLInt iterator next property access.
due to 
, counting = 
, detail = 
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = JSC::RecursionCheckFunctor]
./bytecode/BytecodeOperandsForCheckpoint.h
JSC::ValueProfile *JSC::valueProfileForImpl(BytecodeMetadata &, unsigned int) [BytecodeMetadata = JSC::OpIteratorOpen::Metadata]
JSC::ValueProfile *JSC::valueProfileForImpl(BytecodeMetadata &, unsigned int) [BytecodeMetadata = JSC::OpIteratorNext::Metadata]
./bytecode/CodeOrigin.cpp
Vector<JSC::CodeOrigin> JSC::CodeOrigin::inlineStack() const
<none>
 --> 
(closure) 
Global
Eval
Function
Module
./bytecode/ComplexGetStatus.cpp
static JSC::ComplexGetStatus JSC::ComplexGetStatus::computeFor(JSC::Structure *, const JSC::ObjectPropertyConditionSet &, WTF::UniquedStringImpl *)
./bytecode/DFGExitProfile.cpp
static bool JSC::DFG::ExitProfile::add(JSC::CodeBlock *, const JSC::DFG::FrequentExitSite &)
frequentExit
: Adding exit site: 
./bytecode/DeferredCompilationCallback.cpp
virtual void JSC::DeferredCompilationCallback::compilationDidComplete(JSC::CodeBlock *, JSC::CodeBlock *, JSC::CompilationResult)
Inlined 
Compiled 
 at 
./bytecode/DeleteByStatus.cpp
JSC::DeleteByStatus::DeleteByStatus(JSC::StubInfoSummary, JSC::StructureStubInfo &)
void JSC::DeleteByStatus::merge(const JSC::DeleteByStatus &)
None
Int32
Int52
StrictInt52
Double
Cell
Boolean
Storage
BigInt32
JSInt32
JSDouble
JSCell
JSBoolean
JSBigInt32
Dead
./bytecode/DataFormat.h
const char *JSC::dataFormatToString(JSC::DataFormat)
id='
', result=
 -> 
, offset = 
EvalCodeBlock
ExecutableToCodeBlockEdge
%lf/%lf, %d
thresholdCheck
Unset
BadType
BadConstantValue
BadIdent
BadExecutable
BadCache
BadConstantCache
BadIndexingType
BadTypeInfoFlags
Overflow
NegativeZero
NegativeIndex
Int52Overflow
StoreToHole
LoadFromHole
OutOfBounds
InadequateCoverage
ArgumentsEscaped
ExoticObjectMode
VarargsOverflow
TDZFailure
HoistingFailed
Uncountable
UncountableInvalidation
WatchdogTimerFired
DebuggerEvent
ExceptionCheck
GenericUnwind
BigInt32Overflow
./bytecode/ExitKind.cpp
const char *JSC::exitKindToString(JSC::ExitKind)
FromAnyInlineKind
FromNotInlined
FromInlined
./bytecode/ExitingInlineKind.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::ExitingInlineKind)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
activeThreshold = 
, modifiedThreshold = 
, actualCount = 
, desiredCount = 
FromAnything
FromDFG
FromFTL
./bytecode/ExitingJITType.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::ExitingJITType)
<none>
FunctionCodeBlock
./bytecode/GetByStatus.cpp
JSC::GetByStatus::GetByStatus(JSC::StubInfoSummary, JSC::StructureStubInfo *)
static JSC::GetByStatus JSC::GetByStatus::computeForStubInfoWithoutExitSiteFeedback(const JSC::ConcurrentJSLocker &, JSC::CodeBlock *, JSC::StructureStubInfo *, CallLinkStatus::ExitSiteData)
bool JSC::GetByStatus::makesCalls() const
void JSC::GetByStatus::merge(const JSC::GetByStatus &)
NoInformation
Simple
Custom
ModuleNamespace
LikelyTakesSlowPath
ObservedTakesSlowPath
MakesCalls
ObservedSlowPathAndMakesCalls
, seenInJIT = 
id='
empty>
, offset = 
, call = 
, intrinsic = 
, customaccessorgetter = 
, domclass = 
, domjit = 
customSlotBase = 
callLinkInfo = 
customAccessor = 
./bytecode/InByStatus.cpp
static JSC::InByStatus JSC::InByStatus::computeForStubInfoWithoutExitSiteFeedback(const JSC::ConcurrentJSLocker &, JSC::VM &, JSC::StructureStubInfo *)
void JSC::InByStatus::merge(const JSC::InByStatus &)
NoInformation
Simple
TakesSlowPath
<id='
empty>
, offset = 
string length size: 
array length size: 
out of line offset cache size: 
inline offset cache size: 
replace cache size: 
replace out of line cache size: 
property access
property replace
array length
string length
in access
InlineAccess: linking constant jump
InlineAccess: linking stub call
, closure call
, known callee: 
, numArgs+this = 
, numFixup = 
, stackOffset = 
 maps to 
Call
Construct
TailCall
CallVarargs
ConstructVarargs
TailCallVarargs
GetterCall
SetterCall
prototype = 
./bytecode/InByStatus.h
JSC::InByStatus::InByStatus(JSC::StubInfoSummary)
./bytecode/InstanceOfStatus.h
JSC::InstanceOfStatus::InstanceOfStatus(JSC::StubInfoSummary)
InlineAccessType: '%s'
./bytecode/LLIntPrototypeLoadAdaptiveStructureWatchpoint.cpp
void JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint::install(JSC::VM &)
void JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint::fireInternal(JSC::VM &, const JSC::FireDetail &)
./bytecode/MethodOfGettingAValueProfile.cpp
void JSC::MethodOfGettingAValueProfile::emitReportValue(JSC::CCallHelpers &, JSC::JSValueRegs, JSC::GPRReg, JSC::TagRegistersMode) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
ModuleProgramCodeBlock
<invalid>
./bytecode/ObjectPropertyConditionSet.cpp
JSC::ObjectPropertyCondition JSC::ObjectPropertyConditionSet::slotBaseCondition() const
JSC::ObjectPropertyConditionSet JSC::generateConditionsForInstanceOf(JSC::VM &, JSC::JSCell *, JSC::JSGlobalObject *, JSC::Structure *, JSC::JSObject *, bool)
op_call_varargs
op_iterator_next
op_tail_call_varargs
op_iterator_open
op_construct_varargs
op_put_by_val
op_rshift
op_lshift
op_put_by_val_direct
op_new_object
op_create_async_generator
op_get_by_val
op_get_argument
op_create_this
op_to_this
op_call
op_tail_call_forward_arguments
op_construct
op_put_by_id
op_new_array_with_size
op_new_array
op_to_object
op_get_private_name
op_set_private_brand
op_to_number
op_put_private_name
op_check_private_brand
op_get_by_id
op_get_by_id_with_this
op_get_by_val_with_this
op_get_by_id_direct
op_profile_type
op_profile_control_flow
op_get_prototype_of
op_enumerator_next
op_enumerator_get_by_val
op_enumerator_in_by_val
op_enumerator_has_own_property
op_try_get_by_id
op_bitor
op_catch
op_to_numeric
op_get_internal_field
op_bitxor
op_create_promise
op_tail_call
op_call_eval
op_new_array_buffer
op_resolve_scope
op_get_from_scope
op_put_to_scope
op_get_from_arguments
op_in_by_val
op_create_generator
op_bitand
op_bitnot
op_jneq_ptr
op_is_cell_with_type
op_in_by_id
op_has_private_name
op_has_private_brand
op_put_by_id_with_this
op_del_by_id
op_put_by_val_with_this
op_del_by_val
op_put_getter_by_id
op_put_setter_by_id
op_put_getter_setter_by_id
op_put_getter_by_val
op_put_setter_by_val
op_define_data_property
op_define_accessor_property
op_jmp
op_jtrue
op_jfalse
op_jeq_null
op_jneq_null
op_jundefined_or_null
op_jnundefined_or_null
op_jeq_ptr
op_jeq
op_jstricteq
op_jneq
op_jnstricteq
op_jless
op_jlesseq
op_jgreater
op_jgreatereq
op_jnless
op_jnlesseq
op_jngreater
op_jngreatereq
op_jbelow
op_jbeloweq
op_loop_hint
op_switch_imm
op_switch_char
op_switch_string
op_new_func
op_new_func_exp
op_new_generator_func
op_new_generator_func_exp
op_new_async_func
op_new_async_func_exp
op_new_async_generator_func
op_new_async_generator_func_exp
op_set_function_name
op_ret
op_strcat
op_to_primitive
op_to_property_key
op_put_to_arguments
op_push_with_scope
op_create_lexical_environment
op_create_generator_frame_environment
op_get_parent_scope
op_throw
op_throw_static_error
op_debug
op_end
op_get_property_enumerator
op_unreachable
op_create_rest
op_get_rest_length
op_yield
op_check_traps
op_log_shadow_chicken_prologue
op_log_shadow_chicken_tail
op_resolve_scope_for_hoisting_func_decl_in_eval
op_put_internal_field
op_nop
op_super_sampler_begin
op_wide16
op_super_sampler_end
op_wide32
op_enter
op_get_scope
op_create_direct_arguments
op_create_scoped_arguments
op_create_cloned_arguments
op_create_arguments_butterfly
op_new_promise
op_new_generator
op_argument_count
op_check_tdz
op_new_array_with_spread
op_spread
op_new_regexp
op_mov
op_eq
op_neq
op_stricteq
op_nstricteq
op_less
op_lesseq
op_greater
op_greatereq
op_below
op_beloweq
op_mod
op_pow
op_urshift
op_add
op_mul
op_div
op_sub
op_eq_null
op_neq_null
op_to_string
op_unsigned
op_is_empty
op_typeof_is_undefined
op_typeof_is_object
op_typeof_is_function
op_is_undefined_or_null
op_is_boolean
op_is_number
op_is_big_int
op_is_object
op_is_callable
op_is_constructor
op_inc
op_dec
op_negate
op_not
op_identity_with_profile
op_overrides_has_instance
op_instanceof
op_instanceof_custom
op_typeof
wasm_trampoline_wasm_call_ref_no_tls
llint_eval_prologue
llint_module_program_prologue
llint_function_for_call_prologue
llint_function_for_construct_prologue
llint_function_for_call_arity_check
llint_function_for_construct_arity_check
llint_generic_return_point
llint_throw_from_slow_path_trampoline
llint_throw_during_call_trampoline
llint_native_call_trampoline
llint_native_construct_trampoline
llint_internal_function_call_trampoline
llint_internal_function_construct_trampoline
llint_link_call_trampoline
llint_virtual_call_trampoline
llint_virtual_construct_trampoline
llint_virtual_tail_call_trampoline
checkpoint_osr_exit_from_inlined_call_trampoline
checkpoint_osr_exit_trampoline
normal_osr_exit_trampoline
fuzzer_return_early_from_loop_hint
llint_get_host_call_return_value
llint_handle_uncaught_exception
op_call_return_location
op_construct_return_location
op_call_varargs_return_location
op_construct_varargs_return_location
op_call_varargs_slow_return_location
op_construct_varargs_slow_return_location
op_get_by_id_return_location
op_get_by_val_return_location
op_put_by_id_return_location
op_put_by_val_return_location
op_iterator_open_return_location
op_iterator_next_return_location
wasm_function_prologue
wasm_function_prologue_no_tls
op_call_slow_return_location
op_construct_slow_return_location
op_iterator_open_slow_return_location
op_iterator_next_slow_return_location
op_tail_call_slow_return_location
op_tail_call_forward_arguments_slow_return_location
op_tail_call_varargs_slow_return_location
op_call_eval_slow_return_location
js_trampoline_op_call
js_trampoline_op_construct
js_trampoline_op_call_varargs
js_trampoline_op_construct_varargs
js_trampoline_op_iterator_next
js_trampoline_op_iterator_open
js_trampoline_op_call_slow
js_trampoline_op_tail_call_slow
js_trampoline_op_construct_slow
js_trampoline_op_call_varargs_slow
js_trampoline_op_tail_call_varargs_slow
js_trampoline_op_tail_call_forward_arguments_slow
js_trampoline_op_construct_varargs_slow
js_trampoline_op_call_eval_slow
js_trampoline_op_iterator_next_slow
js_trampoline_op_iterator_open_slow
js_trampoline_llint_function_for_call_arity_check_untag
js_trampoline_llint_function_for_call_arity_check_tag
js_trampoline_llint_function_for_construct_arity_check_untag
js_trampoline_llint_function_for_construct_arity_check_tag
wasm_trampoline_wasm_call
wasm_trampoline_wasm_call_no_tls
wasm_trampoline_wasm_call_indirect
wasm_trampoline_wasm_call_indirect_no_tls
wasm_trampoline_wasm_call_ref
llint_program_prologue
wasm_catch_all_no_tls
wasm_i32_sub
wasm_i32_mul
wasm_i32_div_s
wasm_i32_div_u
wasm_i32_rem_s
wasm_i32_rem_u
wasm_i32_and
wasm_i32_or
wasm_i32_xor
wasm_i32_shl
wasm_i32_shr_u
wasm_i32_shr_s
wasm_i32_rotr
wasm_i32_rotl
wasm_i32_eq
wasm_i32_ne
wasm_i32_lt_s
wasm_i32_le_s
wasm_i32_lt_u
wasm_i32_le_u
wasm_i32_gt_s
wasm_i32_ge_s
wasm_i32_gt_u
wasm_i32_ge_u
wasm_i32_clz
wasm_i32_ctz
wasm_i32_popcnt
wasm_i32_eqz
wasm_i64_add
wasm_i64_sub
wasm_i64_mul
wasm_i64_div_s
wasm_i64_div_u
wasm_i64_rem_s
wasm_i64_rem_u
wasm_i64_and
wasm_i64_or
wasm_i64_xor
wasm_i64_shl
wasm_i64_shr_u
wasm_i64_shr_s
wasm_i64_rotr
wasm_i64_rotl
wasm_i64_eq
wasm_i64_ne
wasm_i64_lt_s
wasm_i64_le_s
wasm_i64_lt_u
wasm_i64_le_u
wasm_i64_gt_s
wasm_i64_ge_s
wasm_i64_gt_u
wasm_i64_ge_u
wasm_i64_clz
wasm_i64_ctz
wasm_i64_popcnt
wasm_i64_eqz
wasm_f32_add
wasm_f32_sub
wasm_f32_mul
wasm_f32_div
wasm_f32_min
wasm_f32_max
wasm_f32_abs
wasm_f32_neg
wasm_f32_copysign
wasm_f32_ceil
wasm_f32_floor
wasm_f32_trunc
wasm_f32_nearest
wasm_f32_sqrt
wasm_f32_eq
wasm_f32_ne
wasm_f32_lt
wasm_f32_le
wasm_f32_gt
wasm_f32_ge
wasm_f64_add
wasm_f64_sub
wasm_f64_mul
wasm_f64_div
wasm_f64_min
wasm_f64_max
wasm_f64_abs
wasm_f64_neg
wasm_f64_copysign
wasm_f64_ceil
wasm_f64_floor
wasm_f64_trunc
wasm_f64_nearest
wasm_f64_sqrt
wasm_f64_eq
wasm_f64_ne
wasm_f64_lt
wasm_f64_le
wasm_f64_gt
wasm_f64_ge
wasm_i32_trunc_s_f32
wasm_i32_trunc_s_f64
wasm_i32_trunc_u_f32
wasm_i32_trunc_u_f64
wasm_i32_wrap_i64
wasm_i64_trunc_s_f32
wasm_i64_trunc_s_f64
wasm_i64_trunc_u_f32
wasm_i64_trunc_u_f64
wasm_i64_extend_s_i32
wasm_i64_extend_u_i32
wasm_f32_convert_s_i32
wasm_f32_convert_u_i32
wasm_f32_convert_s_i64
wasm_f32_convert_u_i64
wasm_f32_demote_f64
wasm_f32_reinterpret_i32
wasm_f64_convert_s_i32
wasm_f64_convert_u_i32
wasm_f64_convert_s_i64
wasm_f64_convert_u_i64
wasm_f64_promote_f32
wasm_f64_reinterpret_i64
wasm_i32_reinterpret_f32
wasm_i64_reinterpret_f64
wasm_i32_extend8_s
wasm_i32_extend16_s
wasm_i64_extend8_s
wasm_i64_extend16_s
wasm_i64_extend32_s
wasm_i32_trunc_sat_f32_s
wasm_i32_trunc_sat_f32_u
wasm_i32_trunc_sat_f64_s
wasm_i32_trunc_sat_f64_u
wasm_i64_trunc_sat_f32_s
wasm_i64_trunc_sat_f32_u
wasm_i64_trunc_sat_f64_s
wasm_i64_trunc_sat_f64_u
wasm_throw_from_slow_path_trampoline
wasm_throw_from_fault_handler_trampoline_fastTLS
wasm_throw_from_fault_handler_trampoline_reg_instance
wasm_call_return_location
wasm_call_no_tls_return_location
wasm_call_indirect_return_location
wasm_call_indirect_no_tls_return_location
wasm_call_ref_return_location
wasm_call_ref_no_tls_return_location
wasm_wide16
wasm_wide32
wasm_enter
wasm_nop
wasm_loop_hint
wasm_mov
wasm_jtrue
wasm_jfalse
wasm_jmp
wasm_ret
wasm_switch
wasm_unreachable
wasm_ret_void
wasm_drop_keep
wasm_ref_is_null
wasm_ref_func
wasm_get_global
wasm_set_global
wasm_set_global_ref
wasm_get_global_portable_binding
wasm_set_global_portable_binding
wasm_set_global_ref_portable_binding
wasm_table_get
wasm_table_set
wasm_table_init
wasm_elem_drop
wasm_table_size
wasm_table_grow
wasm_table_fill
wasm_table_copy
wasm_call
wasm_call_no_tls
wasm_call_indirect
wasm_call_indirect_no_tls
wasm_call_ref
wasm_call_ref_no_tls
wasm_current_memory
wasm_grow_memory
wasm_memory_fill
wasm_memory_copy
wasm_memory_init
wasm_data_drop
wasm_select
wasm_load8_u
wasm_load16_u
wasm_load32_u
wasm_load64_u
wasm_i32_load8_s
wasm_i64_load8_s
wasm_i32_load16_s
wasm_i64_load16_s
wasm_i64_load32_s
wasm_store8
wasm_store16
wasm_store32
wasm_store64
wasm_i64_atomic_rmw_add
wasm_i64_atomic_rmw8_add_u
wasm_i64_atomic_rmw16_add_u
wasm_i64_atomic_rmw32_add_u
wasm_i64_atomic_rmw_sub
wasm_i64_atomic_rmw8_sub_u
wasm_i64_atomic_rmw16_sub_u
wasm_i64_atomic_rmw32_sub_u
wasm_i64_atomic_rmw_and
wasm_i64_atomic_rmw8_and_u
wasm_i64_atomic_rmw16_and_u
wasm_i64_atomic_rmw32_and_u
wasm_i64_atomic_rmw_or
wasm_i64_atomic_rmw8_or_u
wasm_i64_atomic_rmw16_or_u
wasm_i64_atomic_rmw32_or_u
wasm_i64_atomic_rmw_xor
wasm_i64_atomic_rmw8_xor_u
wasm_i64_atomic_rmw16_xor_u
wasm_i64_atomic_rmw32_xor_u
wasm_i64_atomic_rmw_xchg
wasm_i64_atomic_rmw8_xchg_u
wasm_i64_atomic_rmw16_xchg_u
wasm_i64_atomic_rmw32_xchg_u
wasm_i64_atomic_rmw_cmpxchg
wasm_i64_atomic_rmw8_cmpxchg_u
wasm_i64_atomic_rmw16_cmpxchg_u
wasm_i64_atomic_rmw32_cmpxchg_u
wasm_memory_atomic_wait32
wasm_memory_atomic_wait64
wasm_memory_atomic_notify
wasm_atomic_fence
wasm_throw
wasm_rethrow
wasm_catch
wasm_catch_no_tls
wasm_catch_all
wasm_i32_add
./bytecode/PolyProtoAccessChain.cpp
static RefPtr<JSC::PolyProtoAccessChain> JSC::PolyProtoAccessChain::tryCreate(JSC::JSGlobalObject *, JSC::JSCell *, JSC::JSObject *)
PolyPolyProtoAccessChain: [
./bytecode/PolymorphicAccess.cpp
const JSC::RegisterSet &JSC::AccessGenerationState::calculateLiveRegistersForCallAndExceptionHandling()
JSC::DisposableCallSiteIndex JSC::AccessGenerationState::callSiteIndexForExceptionHandling()
const JSC::HandlerInfo &JSC::AccessGenerationState::originalExceptionHandler()
Access stub for 
 with return point 
Load
Transition
Delete
DeleteNonConfigurable
DeleteMiss
Replace
Miss
GetGetter
Getter
Setter
CustomValueGetter
CustomAccessorGetter
CustomValueSetter
CustomAccessorSetter
IntrinsicGetter
InHit
InMiss
CheckPrivateBrand
SetPrivateBrand
ArrayLength
StringLength
DirectArgumentsLength
ScopedArgumentsLength
ModuleNamespaceLoad
InstanceOfHit
InstanceOfMiss
InstanceOfGeneric
IndexedInt32Load
IndexedDoubleLoad
IndexedContiguousLoad
IndexedArrayStorageLoad
IndexedScopedArgumentsLoad
IndexedDirectArgumentsLoad
IndexedTypedArrayInt8Load
IndexedTypedArrayUint8Load
IndexedTypedArrayUint8ClampedLoad
IndexedTypedArrayInt16Load
IndexedTypedArrayUint16Load
IndexedTypedArrayInt32Load
IndexedTypedArrayUint32Load
IndexedTypedArrayFloat32Load
IndexedTypedArrayFloat64Load
IndexedStringLoad
IndexedInt32Store
IndexedDoubleStore
IndexedContiguousStore
IndexedArrayStorageStore
IndexedTypedArrayInt8Store
IndexedTypedArrayUint8Store
IndexedTypedArrayUint8ClampedStore
IndexedTypedArrayInt16Store
IndexedTypedArrayUint16Store
IndexedTypedArrayInt32Store
IndexedTypedArrayUint32Store
IndexedTypedArrayFloat32Store
IndexedTypedArrayFloat64Store
void WTF::printInternal(WTF::PrintStream &, AccessCase::AccessType)
Primordial
Committed
Generated
void WTF::printInternal(WTF::PrintStream &, AccessCase::State)
JSC::ObjectPropertyCondition JSC::(anonymous namespace)::generateCondition(JSC::VM &, JSC::JSCell *, JSC::JSObject *, WTF::UniquedStringImpl *, PropertyCondition::Kind, JSC::Concurrency)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
./bytecode/PolymorphicAccess.h
Detected poly proto optimization opportunity.
JSC::AccessGenerationResult::AccessGenerationResult(JSC::AccessGenerationResult::Kind, MacroAssemblerCodePtr<JITStubRoutinePtrTag>)
auto JSC::generateConditionsForInstanceOf(JSC::VM &, JSC::JSCell *, JSC::JSGlobalObject *, JSC::Structure *, JSC::JSObject *, bool)::(anonymous class)::operator()(Vector<JSC::ObjectPropertyCondition> &, JSC::JSObject *) const
CodePtr
ProgramCodeBlock
 of 
 at 
 with attributes 
 with prototype 
./bytecode/PropertyCondition.cpp
void JSC::PropertyCondition::dumpInContext(WTF::PrintStream &, JSC::DumpContext *) const
bool JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint(JSC::Concurrency, JSC::Structure *, JSC::JSObject *) const
bool JSC::PropertyCondition::validityRequiresImpurePropertyWatchpoint(JSC::Structure *) const
bool JSC::PropertyCondition::isWatchableWhenValid(JSC::Structure *, JSC::PropertyCondition::WatchabilityEffort) const
Presence
Absence
Equivalence
HasStaticProperty
HasPrototype
viaProxy = 
additionalSet = 
IsDirect
Strict
./bytecode/PutByStatus.cpp
static JSC::PutByStatus JSC::PutByStatus::computeFromLLInt(JSC::CodeBlock *, JSC::BytecodeIndex)
JSC::PutByStatus::PutByStatus(JSC::StubInfoSummary, JSC::StructureStubInfo &)
static JSC::PutByStatus JSC::PutByStatus::computeForStubInfo(const JSC::ConcurrentJSLocker &, JSC::CodeBlock *, JSC::StructureStubInfo *, CallLinkStatus::ExitSiteData)
bool JSC::PutByStatus::makesCalls() const
void JSC::PutByStatus::merge(const JSC::PutByStatus &)
(NoInformation)
LikelyTakesSlowPath
ObservedTakesSlowPath
MakesCalls
ObservedSlowPathAndMakesCalls
void JSC::PutByStatus::dump(WTF::PrintStream &) const
./bytecode/PutByVariant.cpp
JSC::Structure *JSC::PutByVariant::oldStructureForTransition() const
void JSC::PutByVariant::fixTransitionToReplaceIfNecessary()
bool JSC::PutByVariant::attemptToMerge(const JSC::PutByVariant &)
Replace: 
Transition: 
], offset = 
Setter: 
void JSC::PutByVariant::dumpInContext(WTF::PrintStream &, JSC::DumpContext *) const
./bytecode/CodeBlock.h
Linking call in 
, entrypoint at 
Unlinking CallLinkInfo: 
./bytecode/Repatch.cpp
void JSC::linkPolymorphicCall(JSC::JSGlobalObject *, JSC::CallFrame *, JSC::CallLinkInfo &, JSC::CallVariant)
Polymorphic call stub for %s, return point %p, targets %s
WebAssembly
./bytecode/SetPrivateBrandStatus.cpp
JSC::SetPrivateBrandStatus::SetPrivateBrandStatus(JSC::StubInfoSummary, JSC::StructureStubInfo &)
void JSC::SetPrivateBrandStatus::merge(const JSC::SetPrivateBrandStatus &)
OtherCell
OtherObj
Final
Float32array
Function
DirectArguments
ScopedArguments
StringObject
RegExpObject
DateObject
PromiseObject
MapObject
SetObject
WeakMapObject
WeakSetObject
ProxyObject
DerivedArray
DataView
StringIdent
StringVar
Symbol
HeapBigInt
BoolInt32
NonBoolInt32
BytecodeDouble
AnyIntAsDouble
NonIntAsDouble
DoublePureNaN
DoubleImpureNaN
Bool
Other
Empty
Int52Any
Int32AsInt52
NonInt32AsInt52
BytecodeTop
HeapTop
FullTop
./bytecode/SpeculatedType.cpp
JSC::SpeculatedType JSC::speculationFromTypedArrayType(JSC::TypedArrayType)
SpecNone
SpecFinalObject
SpecArray
SpecFunction
SpecInt8Array
SpecInt16Array
SpecInt32Array
SpecUint8Array
SpecUint8ClampedArray
SpecUint16Array
SpecUint32Array
SpecFloat32Array
SpecFloat64Array
SpecBigInt64Array
SpecBigUint64Array
SpecTypedArrayView
SpecDirectArguments
SpecScopedArguments
SpecStringObject
SpecRegExpObject
SpecDateObject
SpecPromiseObject
SpecMapObject
SpecSetObject
SpecWeakMapObject
SpecWeakSetObject
SpecProxyObject
SpecDerivedArray
SpecDataViewObject
SpecObjectOther
SpecObject
SpecStringIdent
SpecStringVar
SpecString
SpecSymbol
SpecBigInt
SpecCellOther
SpecCell
SpecBoolInt32
SpecNonBoolInt32
SpecInt32Only
SpecInt32AsInt52
SpecNonInt32AsInt52
SpecInt52Any
SpecIntAnyFormat
SpecAnyIntAsDouble
SpecNonIntAsDouble
SpecDoubleReal
SpecDoublePureNaN
SpecDoubleImpureNaN
SpecDoubleNaN
SpecBytecodeDouble
SpecFullDouble
SpecBytecodeRealNumber
SpecFullRealNumber
SpecBytecodeNumber
SpecFullNumber
SpecBoolean
SpecOther
SpecMisc
SpecHeapTop
SpecPrimitive
SpecEmpty
SpecBytecodeTop
SpecFullTop
SpecCellCheck
JSC::SpeculatedType JSC::speculationFromString(const char *)
./bytecode/StructureStubInfo.cpp
void JSC::StructureStubInfo::deref()
void JSC::StructureStubInfo::aboutToDie()
Clearing structure cache (kind 
) in 
void JSC::StructureStubInfo::initializeFromUnlinkedStructureStubInfo(JSC::CodeBlock *, JSC::UnlinkedStructureStubInfo &)
static JSC::CallMode JSC::CallLinkInfo::callModeFor(JSC::CallLinkInfo::CallType)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLThunks.h
typename MapType::KeyType JSC::FTL::keyForThunk(MapType &, MacroAssemblerCodePtr<JITThunkPtrTag>) [MapType = JSC::FTL::ThunkMap<JSC::FTL::SlowPathCallKey>]
JSC::InlineCacheAction JSC::tryCacheGetBy(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSValue, JSC::CacheableIdentifier, const JSC::PropertySlot &, JSC::StructureStubInfo &, JSC::GetByKind)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
FunctionPtr<CFunctionPtrTag> JSC::appropriateGetByFunction(JSC::GetByKind)
JSC::InlineCacheAction JSC::tryCacheArrayGetByVal(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSValue, JSC::JSValue, JSC::StructureStubInfo &)
JSC::InlineCacheAction JSC::tryCachePutBy(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSValue, JSC::Structure *, JSC::CacheableIdentifier, const JSC::PutPropertySlot &, JSC::StructureStubInfo &, JSC::PutByKind, JSC::PutKind)
FunctionPtr<CFunctionPtrTag> JSC::appropriateOptimizingPutByFunction(const JSC::PutPropertySlot &, JSC::PutByKind, JSC::PutKind)
FunctionPtr<CFunctionPtrTag> JSC::appropriateGenericPutByFunction(const JSC::PutPropertySlot &, JSC::PutByKind, JSC::PutKind)
JSC::InlineCacheAction JSC::tryCacheArrayPutByVal(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSValue, JSC::JSValue, JSC::StructureStubInfo &, JSC::PutKind)
JSC::InlineCacheAction JSC::tryCacheDeleteBy(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::DeletePropertySlot &, JSC::JSValue, JSC::Structure *, JSC::CacheableIdentifier, JSC::StructureStubInfo &, JSC::DelByKind, JSC::ECMAMode)
JSC::InlineCacheAction JSC::tryCacheInBy(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSObject *, JSC::CacheableIdentifier, bool, const JSC::PropertySlot &, JSC::StructureStubInfo &, JSC::InByKind)
FunctionPtr<CFunctionPtrTag> JSC::appropriateGenericInByFunction(JSC::InByKind)
JSC::InlineCacheAction JSC::tryCacheHasPrivateBrand(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSObject *, JSC::CacheableIdentifier, bool, JSC::StructureStubInfo &)
JSC::InlineCacheAction JSC::tryCacheCheckPrivateBrand(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSObject *, JSC::CacheableIdentifier, JSC::StructureStubInfo &)
JSC::InlineCacheAction JSC::tryCacheSetPrivateBrand(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSObject *, JSC::Structure *, JSC::CacheableIdentifier, JSC::StructureStubInfo &)
JSC::InlineCacheAction JSC::tryCacheInstanceOf(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSValue, JSC::JSValue, JSC::StructureStubInfo &, bool)
Linking virtual call at 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/jit/CallFrameShuffler.h
void JSC::CallFrameShuffler::ensureRegister(const CheckFunctor &) [CheckFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/jit/CallFrameShuffler.h:610:13)]
FunctionPtr<CFunctionPtrTag> JSC::appropriateOptimizingGetByFunction(JSC::GetByKind)
<Final>
<Array>
<StringIdent>
<String>
<Function>
<Int8array>
<Int16array>
<Int32array>
<Uint8array>
<Uint16array>
<Uint32array>
<Float32array>
<Float64array>
<BigInt64array>
<BigUint64array>
<DirectArguments>
<ScopedArguments>
<StringObject>
<RegExpObject>
<StringOrStringObject>
<Object>
<Cell>
<BoolInt32>
<Int32>
<AnyIntAsDouble>
<NonInt32AsInt52>
<Int32AsInt52>
<Int52Any>
<Double>
<Number>
<Boolean>
<Other>
<Misc>
auto JSC::StructureStubInfo::addAccessCase(const JSC::GCSafeConcurrentJSLocker &, JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::ECMAMode, JSC::CacheableIdentifier, RefPtr<JSC::AccessCase>)::(anonymous class)::operator()() const
./bytecode/StructureStubClearingWatchpoint.h
JSC::AdaptiveValueStructureStubClearingWatchpoint::AdaptiveValueStructureStubClearingWatchpoint(const JSC::ObjectPropertyCondition &, JSC::WatchpointsOnStructureStubInfo &)
void JSC::StructureStubInfo::visitAggregateImpl(Visitor &) [Visitor = JSC::AbstractSlotVisitor]
void JSC::StructureStubInfo::visitAggregateImpl(Visitor &) [Visitor = JSC::SlotVisitor]
JSC Super Sampler
Percent time behind super sampler flag: 
./bytecode/ToThisStatus.cpp
JSC::ToThisStatus JSC::merge(JSC::ToThisStatus, JSC::ToThisStatus)
Found untracked reference: 
All tracked references: 
./bytecode/TrackedReferences.cpp
void JSC::TrackedReferences::check(JSC::JSCell *) const
UnlinkedCodeBlock
./bytecode/UnlinkedCodeBlock.cpp
JSC::BytecodeLivenessAnalysis &JSC::UnlinkedCodeBlock::livenessAnalysisSlow(JSC::CodeBlock *)
void JSC::UnlinkedCodeBlock::allocateSharedProfiles(unsigned int, unsigned int)
./bytecode/UnlinkedCodeBlockGenerator.cpp
void JSC::UnlinkedCodeBlockGenerator::addOutOfLineJumpTarget(InstructionStream::Offset, int)
UnlinkedEvalCodeBlock
UnlinkedFunctionCodeBlock
WARNING: Super sampler undercount detected!
UnlinkedFunctionExecutable
UnlinkedModuleProgramCodeBlock
UnlinkedProgramCodeBlock
./bytecode/ValueRecovery.cpp
JSC::JSValue JSC::ValueRecovery::recover(JSC::CallFrame *) const
int32(
int52(
strictInt52(
bool(
cell(
double(
*int32(
*int52(
*strictInt52(
*double(
*cell(
*bool(
DirectArguments(
ClonedArguments(
void JSC::ValueRecovery::dumpInContext(WTF::PrintStream &, JSC::DumpContext *) const
Write to 
<invalid>
codeBlock
callee
argumentCountIncludingThis
callerFrame
returnPC
const
this
./bytecode/Watchpoint.cpp
void JSC::Watchpoint::fire(JSC::VM &, const JSC::FireDetail &)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
Failed to compile #
Compiled #
 into bytecode 
 instructions in 
<null property name>
./bytecompiler/BytecodeGenerator.cpp
JSC::ParserError JSC::BytecodeGenerator::generate(unsigned int &)
JSC::BytecodeGenerator::BytecodeGenerator(JSC::VM &, JSC::ProgramNode *, JSC::UnlinkedProgramCodeBlock *, OptionSet<JSC::CodeGenerationMode>, const RefPtr<JSC::TDZEnvironmentLink> &, const JSC::PrivateNameEnvironment *)
Cannot call a constructor without |new|
JSC::BytecodeGenerator::BytecodeGenerator(JSC::VM &, JSC::FunctionNode *, JSC::UnlinkedFunctionCodeBlock *, OptionSet<JSC::CodeGenerationMode>, const RefPtr<JSC::TDZEnvironmentLink> &, const JSC::PrivateNameEnvironment *)
JSC::BytecodeGenerator::BytecodeGenerator(JSC::VM &, JSC::ModuleProgramNode *, JSC::UnlinkedModuleProgramCodeBlock *, OptionSet<JSC::CodeGenerationMode>, const RefPtr<JSC::TDZEnvironmentLink> &, const JSC::PrivateNameEnvironment *)
void JSC::BytecodeGenerator::initializeArrowFunctionContextScopeIfNeeded(JSC::SymbolTable *, bool)
void JSC::BytecodeGenerator::initializeParameters(JSC::FunctionParameters &)
void JSC::BytecodeGenerator::initializeVarLexicalEnvironment(int, JSC::SymbolTable *, bool)
void JSC::BytecodeGenerator::recordHasOwnPropertyInForInLoop(JSC::ForInContext &, unsigned int, JSC::Label &)
void JSC::BytecodeGenerator::emitProfileControlFlow(int)
void JSC::BytecodeGenerator::initializeBlockScopedFunctions(JSC::VariableEnvironment &, JSC::BytecodeGenerator::FunctionStack &, JSC::RegisterID *)
void JSC::BytecodeGenerator::hoistSloppyModeFunctionIfNecessary(const JSC::Identifier &)
void JSC::BytecodeGenerator::popLexicalScopeInternal(JSC::VariableEnvironment &)
void JSC::BytecodeGenerator::prepareLexicalScopeForNextForLoopIteration(JSC::VariableEnvironmentNode *, JSC::RegisterID *)
Trying to add variable called 
 as 
 but it was already added as 
void JSC::BytecodeGenerator::createVariable(const JSC::Identifier &, JSC::VarKind, JSC::SymbolTable *, JSC::BytecodeGenerator::ExistingVariableMode)
JSC::RegisterID *JSC::BytecodeGenerator::emitResolveScope(JSC::RegisterID *, const JSC::Variable &)
JSC::RegisterID *JSC::BytecodeGenerator::emitGetFromScope(JSC::RegisterID *, JSC::RegisterID *, const JSC::Variable &, JSC::ResolveMode)
JSC::RegisterID *JSC::BytecodeGenerator::emitPutToScope(JSC::RegisterID *, const JSC::Variable &, JSC::RegisterID *, JSC::ResolveMode, JSC::InitializationMode)
JSC::RegisterID *JSC::BytecodeGenerator::initializeVariable(const JSC::Variable &, JSC::RegisterID *)
Cannot access static private method or accessor of a non-Object
Cannot access static private method or accessor
void JSC::BytecodeGenerator::emitTDZCheckIfNecessary(const JSC::Variable &, JSC::RegisterID *, JSC::RegisterID *)
JSC::PrivateNameEntry JSC::BytecodeGenerator::getPrivateTraits(const JSC::Identifier &)
JSC::RegisterID *JSC::BytecodeGenerator::emitNewArrayWithSpread(JSC::RegisterID *, JSC::ElementNode *)
Cannot return a non-object type in the constructor of a derived class.
JSC::RegisterID *JSC::BytecodeGenerator::emitConstruct(JSC::RegisterID *, JSC::RegisterID *, JSC::RegisterID *, JSC::ExpectedFunction, JSC::CallArguments &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, const JSC::JSTextPosition &)
void JSC::BytecodeGenerator::emitPopWithScope()
void JSC::BytecodeGenerator::beginSwitch(JSC::RegisterID *, SwitchInfo::SwitchType)
void JSC::BytecodeGenerator::endSwitch(uint32_t, const Vector<Ref<JSC::Label>, 8> &, JSC::ExpressionNode **, JSC::Label &, int32_t, int32_t)
Iterator result interface is not an object.
Delegated generator does not have a 'throw' method.
void JSC::ForInContext::finalize(JSC::BytecodeGenerator &, JSC::UnlinkedCodeBlockGenerator *, unsigned int)
Cannot declare a static field named 'prototype'
Trying to access an undefined private getter
Trying to access an undefined private setter
'super()' can't be called more than once in a constructor.
./bytecompiler/NodesCodegen.cpp
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_getPromiseInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_getGeneratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_getAsyncGeneratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_getAbstractModuleRecordInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_getArrayIteratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_getStringIteratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_getMapIteratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_getSetIteratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_putPromiseInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_putGeneratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_putAsyncGeneratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_putArrayIteratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_putStringIteratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_putMapIteratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_putSetIteratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_tryGetByIdWithWellKnownSymbol(JSC::BytecodeGenerator &, JSC::RegisterID *)
virtual JSC::RegisterID *JSC::HasOwnPropertyFunctionCallDotNode::emitBytecode(JSC::BytecodeGenerator &, JSC::RegisterID *)
Postfix ++ operator applied to value that is not a reference.
Postfix -- operator applied to value that is not a reference.
Cannot delete a super property
Prefix ++ operator applied to value that is not a reference.
Prefix -- operator applied to value that is not a reference.
virtual JSC::RegisterID *JSC::BinaryOpNode::emitBytecode(JSC::BytecodeGenerator &, JSC::RegisterID *)
Right hand side of instanceof is not an object
Left side of assignment is not a reference.
virtual void JSC::EmptyStatementNode::emitBytecode(JSC::BytecodeGenerator &, JSC::RegisterID *)
void JSC::ForInNode::emitLoopHeader(JSC::BytecodeGenerator &, JSC::RegisterID *)
Left side of for-in statement is not a reference.
Left side of for-of statement is not a reference.
The superclass is not a constructor.
virtual JSC::RegisterID *JSC::ClassExprNode::emitBytecode(JSC::BytecodeGenerator &, JSC::RegisterID *)
Right side of assignment cannot be destructured
virtual void JSC::RestParameterNode::bindValue(JSC::BytecodeGenerator &, JSC::RegisterID *) const
virtual JSC::RegisterID *JSC::SpreadExpressionNode::emitBytecode(JSC::BytecodeGenerator &, JSC::RegisterID *)
ProfileTypeBytecodeClosureVar
ProfileTypeBytecodeLocallyResolved
ProfileTypeBytecodeDoesNotHaveGlobalID
ProfileTypeBytecodeFunctionArgument
ProfileTypeBytecodeFunctionReturnStatement
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSImmutableButterfly.h
static JSC::JSImmutableButterfly *JSC::JSImmutableButterfly::create(JSC::VM &, JSC::IndexingType, unsigned int)
JSPromise::Field JSC::promiseInternalFieldIndex(JSC::BytecodeIntrinsicNode *)
JSGenerator::Field JSC::generatorInternalFieldIndex(JSC::BytecodeIntrinsicNode *)
JSAsyncGenerator::Field JSC::asyncGeneratorInternalFieldIndex(JSC::BytecodeIntrinsicNode *)
AbstractModuleRecord::Field JSC::abstractModuleRecordInternalFieldIndex(JSC::BytecodeIntrinsicNode *)
JSArrayIterator::Field JSC::arrayIteratorInternalFieldIndex(JSC::BytecodeIntrinsicNode *)
JSStringIterator::Field JSC::stringIteratorInternalFieldIndex(JSC::BytecodeIntrinsicNode *)
JSMapIterator::Field JSC::mapIteratorInternalFieldIndex(JSC::BytecodeIntrinsicNode *)
JSSetIterator::Field JSC::setIteratorInternalFieldIndex(JSC::BytecodeIntrinsicNode *)
JSC::RegisterID *JSC::emitReadModifyAssignment(JSC::BytecodeGenerator &, JSC::RegisterID *, JSC::RegisterID *, JSC::ExpressionNode *, JSC::Operator, JSC::OperandTypes, JSC::ReadModifyResolveNode *, JSC::Variable *)
void JSC::emitShortCircuitAssignment(JSC::BytecodeGenerator &, JSC::RegisterID *, JSC::Operator, JSC::Label &)
void JSC::SymbolTable::set(const JSC::ConcurrentJSLocker &, WTF::UniquedStringImpl *, Entry &&) [Entry = JSC::SymbolTableEntry &]
void JSC::SymbolTable::add(const JSC::ConcurrentJSLocker &, WTF::UniquedStringImpl *, Entry &&) [Entry = JSC::SymbolTableEntry]
./bytecompiler/BytecodeGeneratorBaseInlines.h
JSC::RegisterID *JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newRegister() [Traits = JSC::JSGeneratorTraits]
void JSC::SymbolTable::add(const JSC::ConcurrentJSLocker &, WTF::UniquedStringImpl *, Entry &&) [Entry = JSC::SymbolTableEntry &]
JSC::RegisterID *JSC::BytecodeGenerator::emitCall(JSC::RegisterID *, JSC::RegisterID *, JSC::ExpectedFunction, JSC::CallArguments &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, JSC::DebuggableCall) [CallOp = JSC::OpCall]
JSC::RegisterID *JSC::BytecodeGenerator::emitCall(JSC::RegisterID *, JSC::RegisterID *, JSC::ExpectedFunction, JSC::CallArguments &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, JSC::DebuggableCall) [CallOp = JSC::OpTailCall]
JSC::RegisterID *JSC::BytecodeGenerator::emitCall(JSC::RegisterID *, JSC::RegisterID *, JSC::ExpectedFunction, JSC::CallArguments &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, JSC::DebuggableCall) [CallOp = JSC::OpCallEval]
./debugger/Debugger.cpp
bool JSC::Debugger::resolveBreakpoint(JSC::Breakpoint &, JSC::SourceProvider *)
./debugger/DebuggerCallFrame.cpp
static Ref<JSC::DebuggerCallFrame> JSC::DebuggerCallFrame::create(JSC::VM &, JSC::CallFrame *)
DebuggerScope
./debugger/DebuggerScope.cpp
JSC::JSValue JSC::DebuggerScope::caughtValue(JSC::JSGlobalObject *) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/ExceptionScope.h
void JSC::ExceptionScope::releaseAssertNoException()
InvalidAbstractHeap
World
Stack
Heap
Butterfly_publicLength
Butterfly_vectorLength
GetterSetter_getter
GetterSetter_setter
JSCell_cellState
JSCell_indexingType
JSCell_structureID
JSCell_typeInfoFlags
JSObject_butterfly
JSPropertyNameEnumerator_cachedPropertyNames
RegExpObject_lastIndex
NamedProperties
IndexedInt32Properties
IndexedDoubleProperties
IndexedContiguousProperties
IndexedArrayStorageProperties
DirectArgumentsProperties
ScopeProperties
TypedArrayProperties
HeapObjectCount
RegExpState
MathDotRandomState
JSDateFields
JSMapFields
JSSetFields
JSWeakMapFields
JSWeakSetFields
JSInternalFields
InternalState
CatchLocals
Absolute
DOMState
Watchpoint_fire
MiscFields
SideState
./dfg/DFGAbstractHeap.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::AbstractHeapKind)
./dfg/DFGAbstractValue.cpp
void JSC::DFG::AbstractValue::set(JSC::DFG::Graph &, JSC::DFG::RegisteredStructure)
void JSC::DFG::AbstractValue::fixTypeForRepresentation(JSC::DFG::Graph &, JSC::DFG::NodeFlags, JSC::DFG::Node *)
m_value.isNumber()
Abstract value 
 for double node has type outside SpecFullDouble.
 for int52 node has type outside SpecInt52Any.
m_value.isAnyInt()
 for value node has type outside SpecBytecodeTop.
Firing watchpoint 
) on 
./dfg/DFGAdaptiveStructureWatchpoint.cpp
void JSC::DFG::AdaptiveStructureWatchpoint::initialize(const JSC::ObjectPropertyCondition &, JSC::CodeBlock *)
void JSC::DFG::AdaptiveStructureWatchpoint::install(JSC::VM &)
./dfg/DFGArgumentsUtilities.cpp
JSC::DFG::Node *JSC::DFG::emitCodeToGetArgumentsArrayLength(JSC::DFG::InsertionSet &, JSC::DFG::Node *, unsigned int, JSC::DFG::NodeOrigin, bool)
arguments->op() == CreateDirectArguments || arguments->op() == CreateScopedArguments || arguments->op() == CreateClonedArguments || arguments->op() == CreateRest || arguments->op() == NewArrayBuffer || arguments->op() == PhantomDirectArguments || arguments->op() == PhantomClonedArguments || arguments->op() == PhantomCreateRest || arguments->op() == PhantomNewArrayBuffer || arguments->op() == PhantomNewArrayWithSpread || arguments->op() == PhantomSpread
child->op() == PhantomSpread
child->child1()->op() == PhantomCreateRest || child->child1()->op() == PhantomNewArrayBuffer
./dfg/DFGUseKind.h
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
StructuresAreWatched
StructuresAreClobbered
./dfg/DFGNodeType.h
JSC::DFG::NodeFlags JSC::DFG::defaultFlags(JSC::DFG::NodeType)
arguments elimination
Phase 
 changed the IR.
./dfg/DFGArgumentsEliminationPhase.cpp
bool JSC::DFG::(anonymous namespace)::ArgumentsEliminationPhase::run()
m_graph.m_form == SSA
void JSC::DFG::(anonymous namespace)::ArgumentsEliminationPhase::eliminateCandidatesThatEscape()
./dfg/DFGClobberize.h
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:503:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
./dfg/DFGHeapLocation.h
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:641:33), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::(anonymous namespace)::ArgumentsEliminationPhase::transform()
node->child1()->op() == PhantomDirectArguments
node->origin.exitOK
varargsData->limit - 1 >= varargsData->mandatoryMinimum
auto JSC::DFG::(anonymous namespace)::ArgumentsEliminationPhase::transform()::(anonymous class)::operator()(const Vector<JSC::DFG::Node *> &) const
auto JSC::DFG::(anonymous namespace)::ArgumentsEliminationPhase::transform()::(anonymous class)::operator()() const
./dfg/DFGArithMode.cpp
Arith::UnaryFunction JSC::DFG::arithUnaryFunction(Arith::UnaryType)
Arith::UnaryOperation JSC::DFG::arithUnaryOperation(Arith::UnaryType)
NotSet
Unchecked
CheckOverflow
CheckOverflowAndNegativeZero
DoOverflow
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::Arith::Mode)
Int32
Int32WithNegativeZeroCheck
Double
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::Arith::RoundingMode)
Sinh
Cosh
Tanh
ASin
ASinh
ACos
ACosh
ATan
ATanh
Log10
Log2
Cbrt
Expm1
Log1p
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::Arith::UnaryType)
Read
Write
Unknown!
SelectUsingPredictions
SelectUsingArguments
Unprofiled
Generic
ForceExit
String
Undecided
Contiguous
ArrayStorage
SlowPutArrayStorage
DirectArguments
ScopedArguments
Int8Array
Int16Array
Int32Array
Uint8Array
Uint8ClampedArray
Uint16Array
Uint32Array
Float32Array
Float64Array
BigInt64Array
BigUint64Array
AnyTypedArray
OriginalArray
OriginalCopyOnWriteArray
OriginalNonArray
PossiblyArray
InBoundsSaneChain
InBounds
ToHole
OutOfBounds
OutOfBoundsSaneChain
AsIs
Convert
./dfg/DFGArrayMode.cpp
JSC::TypedArrayType JSC::DFG::toTypedArrayType(Array::Type)
./dfg/DFGAtTailAbstractState.cpp
JSC::DFG::AbstractValue &JSC::DFG::AtTailAbstractState::forNode(JSC::DFG::NodeFlowProjection)
iter != valuesAtTail.end()
Unavailable
{locals = 
; heap = 
./dfg/DFGBasicBlock.cpp
void JSC::DFG::BasicBlock::removePredecessor(JSC::DFG::BasicBlock *)
void JSC::DFG::BasicBlock::replacePredecessor(JSC::DFG::BasicBlock *, JSC::DFG::BasicBlock *)
auto JSC::DFG::ArrayMode::fromObserved(const JSC::ConcurrentJSLocker &, JSC::ArrayProfile *, Array::Action, bool)::(anonymous class)::operator()(Array::Type, JSC::ArrayModes) const
./dfg/DFGNode.h
JSC::DFG::BasicBlock *&JSC::DFG::Node::successor(unsigned int)
./dfg/DFGBackwardsPropagationPhase.cpp
void JSC::DFG::BackwardsPropagationPhase::propagate(JSC::DFG::Node *)
./dfg/DFGByteCodeParser.cpp
void JSC::DFG::ByteCodeParser::makeBlockTargetable(JSC::DFG::BasicBlock *, JSC::BytecodeIndex)
ByteCodeParser::CallOptimizationResult JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *, JSC::Operand, JSC::CallVariant, int, JSC::VirtualRegister, int, JSC::BytecodeIndex, InlineCallFrame::Kind, JSC::SpeculatedType, unsigned int &, JSC::DFG::BasicBlock *, bool)
bool JSC::DFG::ByteCodeParser::handleDOMJITGetter(JSC::Operand, const JSC::GetByVariant &, JSC::DFG::Node *, unsigned int, JSC::SpeculatedType)
JSC::DFG::GetByOffsetMethod JSC::DFG::ByteCodeParser::planLoad(const JSC::ObjectPropertyCondition &)
JSC::DFG::Node *JSC::DFG::ByteCodeParser::load(JSC::SpeculatedType, unsigned int, const JSC::DFG::GetByOffsetMethod &, JSC::DFG::NodeType)
JSC::DFG::GetByOffsetMethod JSC::DFG::ByteCodeParser::planLoad(const JSC::ObjectPropertyConditionSet &)
JSC::DFG::Node *JSC::DFG::ByteCodeParser::store(JSC::DFG::Node *, unsigned int, const JSC::PutByVariant &, JSC::DFG::Node *)
void JSC::DFG::ByteCodeParser::handlePutPrivateNameById(JSC::DFG::Node *, JSC::CacheableIdentifier, unsigned int, JSC::DFG::Node *, const JSC::PutByStatus &, JSC::PrivateFieldPutKind)
void JSC::DFG::ByteCodeParser::parseBlock(unsigned int)
void JSC::DFG::ByteCodeParser::linkBlock(JSC::DFG::BasicBlock *, Vector<JSC::DFG::BasicBlock *> &)
JSC::DFG::ByteCodeParser::InlineStackEntry::InlineStackEntry(JSC::DFG::ByteCodeParser *, JSC::CodeBlock *, JSC::CodeBlock *, JSC::JSFunction *, JSC::Operand, JSC::VirtualRegister, int, InlineCallFrame::Kind, JSC::DFG::BasicBlock *)
JSC::DFG::ByteCodeParser::InlineStackEntry::~InlineStackEntry()
Parsing 
 for inlining at 
Jump targets: 
void JSC::DFG::ByteCodeParser::parse()
./dfg/DFGCapabilities.cpp
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/CallVariant.h
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/InlineCallFrame.h
static JSC::CallMode JSC::InlineCallFrame::callModeFor(JSC::InlineCallFrame::Kind)
static JSC::CodeSpecializationKind JSC::InlineCallFrame::specializationKindFor(JSC::InlineCallFrame::Kind)
auto JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *, JSC::Operand, JSC::CallVariant, int, JSC::VirtualRegister, int, JSC::BytecodeIndex, InlineCallFrame::Kind, JSC::SpeculatedType, unsigned int &, JSC::DFG::BasicBlock *, bool)::(anonymous class)::operator()() const
Bad operand: 
 but current number of tmps is: 
 code block has: 
 tmps.
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/GetPutInfo.h
bool JSC::needsVarInjectionChecks(JSC::ResolveType)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/CacheableIdentifierInlines.h
void JSC::CacheableIdentifier::setCellBits(JSC::JSCell *)
JSC::DFG::ByteCodeParser::DelayedSetLocal::DelayedSetLocal(const JSC::CodeOrigin &, JSC::Operand, JSC::DFG::Node *, JSC::DFG::ByteCodeParser::SetMode)
void JSC::InlineCallFrame::setTmpOffset(unsigned int)
void JSC::InlineCallFrame::setStackOffset(int)
JSC::DFG::CapabilityLevel JSC::DFG::capabilityLevel(JSC::OpcodeID, JSC::CodeBlock *, const JSC::Instruction *)
DFG rejecting opcode in 
 because of opcode 
bool JSC::DFG::ByteCodeParser::handleRecursiveTailCall(JSC::DFG::Node *, JSC::CallVariant, int, int, const ChecksFunctor &) [ChecksFunctor = (lambda at ./dfg/DFGByteCodeParser.cpp:1876:39)]
bool JSC::DFG::ByteCodeParser::handleIntrinsicCall(JSC::DFG::Node *, JSC::Operand, JSC::Intrinsic, int, int, JSC::SpeculatedType, const ChecksFunctor &) [ChecksFunctor = (lambda at ./dfg/DFGByteCodeParser.cpp:1876:39)]
auto JSC::DFG::ByteCodeParser::handleIntrinsicCall(JSC::DFG::Node *, JSC::Operand, JSC::Intrinsic, int, int, JSC::SpeculatedType, const (lambda at ./dfg/DFGByteCodeParser.cpp:1876:39) &)::(anonymous class)::operator()() const
auto JSC::DFG::ByteCodeParser::handleIntrinsicCall(JSC::DFG::Node *, JSC::Operand, JSC::Intrinsic, int, int, JSC::SpeculatedType, const (lambda at ./dfg/DFGByteCodeParser.cpp:1876:39) &)::(anonymous class)::operator()(JSC::DFG::Node *) const
unsigned int JSC::CodeBlock::bytecodeOffset(const JSC::Instruction *)
void JSC::DFG::ByteCodeParser::inlineCall(JSC::DFG::Node *, JSC::Operand, JSC::CallVariant, int, int, InlineCallFrame::Kind, JSC::DFG::BasicBlock *, const ChecksFunctor &) [ChecksFunctor = (lambda at ./dfg/DFGByteCodeParser.cpp:1939:24)]
void JSC::DFG::ByteCodeParser::inlineCall(JSC::DFG::Node *, JSC::Operand, JSC::CallVariant, int, int, InlineCallFrame::Kind, JSC::DFG::BasicBlock *, const ChecksFunctor &) [ChecksFunctor = (lambda at ./dfg/DFGByteCodeParser.cpp:1991:25)]
auto JSC::DFG::ByteCodeParser::parseBlock(unsigned int)::(anonymous class)::operator()(JSC::ValueProfileAndVirtualRegister &) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/BytecodeOperandsForCheckpoint.h
JSC::Operand JSC::destinationFor(const Bytecode &, unsigned int, JSC::JITType) [Bytecode = JSC::OpIteratorOpen]
JSC::Operand JSC::destinationFor(const Bytecode &, unsigned int, JSC::JITType) [Bytecode = JSC::OpIteratorNext]
control flow analysis
Phase 
 changed the IR.
Graph before CFA:
   Widening state at OSR entry block.
CFA [%u]
   Block 
      head vars: 
      head regs: 
      %s @%u: 
(UNSAFE) 
         Expect OSR exit.
      tail regs: 
      tail vars: 
./dfg/DFGSafeToExecute.h
bool JSC::DFG::safeToExecute(AbstractStateType &, JSC::DFG::Graph &, JSC::DFG::Node *, bool) [AbstractStateType = JSC::DFG::InPlaceAbstractState]
void JSC::DFG::SafeToExecuteEdge<JSC::DFG::InPlaceAbstractState>::operator()(JSC::DFG::Node *, JSC::DFG::Edge) [AbstractStateType = JSC::DFG::InPlaceAbstractState]
const JSC::ClassInfo *JSC::DFG::Node::requiredDOMJITClassInfo()
   Found must-handle block: 
   Not live in bytecode: 
   Not live: 
   Widening 
CFG simplification
./dfg/DFGCFGSimplificationPhase.cpp
void JSC::DFG::CFGSimplificationPhase::mergeBlocks(JSC::DFG::BasicBlock *, JSC::DFG::BasicBlock *, Vector<JSC::DFG::BasicBlock *, 1>)
CPS rethreading
./dfg/DFGCPSRethreadingPhase.cpp
bool JSC::DFG::CPSRethreadingPhase::run()
void JSC::DFG::CPSRethreadingPhase::freeUnnecessaryNodes()
Invalid Phantom(@SetArgumentMaybe)
void JSC::DFG::CPSRethreadingPhase::computeIsFlushed()
Invalid node in flush graph
local common subexpression elimination
./dfg/DFGLazyNode.h
void JSC::DFG::LazyNode::setFrozenValue(JSC::DFG::FrozenValue *, JSC::DFG::NodeType)
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
./dfg/DFGCSEPhase.cpp
JSC::DFG::Node *JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps::addPure(JSC::DFG::PureValue, JSC::DFG::Node *)
JSC::DFG::LazyNode JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps::addImpure(JSC::DFG::HeapLocation, JSC::DFG::LazyNode)
JSC::DFG::NodeType JSC::DFG::LazyNode::op() const
JSC::DFG::LazyNode JSC::DFG::(anonymous namespace)::ImpureMap::getImpl(const JSC::DFG::HeapLocation &) const
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
const JSC::DFG::(anonymous namespace)::ImpureDataSlot *JSC::DFG::(anonymous namespace)::ImpureMap::addImpl(const JSC::DFG::HeapLocation &, const JSC::DFG::LazyNode &)
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
global common subexpression elimination
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
JSC::DFG::LazyNode JSC::DFG::(anonymous namespace)::GlobalCSEPhase::findReplacement(JSC::DFG::HeapLocation)
data.didVisit
!match
clean up
./dfg/DFGCodeOriginPool.cpp
JSC::CallSiteIndex JSC::DFG::CodeOriginPool::lastCallSite() const
void JSC::DFG::CodeOriginPool::removeDisposableCallSiteIndex(JSC::DisposableCallSiteIndex)
BeforeFixpoint
FixpointNotConverged
FixpointConverged
./dfg/DFGCommon.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::OptimizationFixpointState)
LoadStore
ThreadedCPS
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::GraphForm)
LocallyUnified
GloballyUnified
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::UnificationState)
EverythingIsLive
ExactRefCount
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::RefCountState)
./dfg/DFGBasicBlock.h
JSC::DFG::Node *JSC::DFG::BasicBlock::last() const
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetAdd, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetOverlaps, WriteFunctor = JSC::DFG::NoOpClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::CheckClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::AbstractHeapOverlaps, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobberize.cpp:64:9), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobbersExitState.cpp:110:13), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
constant folding
Phase 
 changed the IR.
./dfg/DFGConstantFoldingPhase.cpp
bool JSC::DFG::ConstantFoldingPhase::foldConstants(JSC::DFG::BasicBlock *)
void JSC::DFG::ConstantFoldingPhase::emitGetByOffset(unsigned int, JSC::DFG::Node *, const JSC::DFG::AbstractValue &, const JSC::DFG::MultiGetByOffsetCase &, unsigned int)
void JSC::DFG::ConstantFoldingPhase::emitPutByOffset(unsigned int, JSC::DFG::Node *, const JSC::DFG::AbstractValue &, const JSC::PutByVariant &, unsigned int)
void JSC::DFG::ConstantFoldingPhase::emitDeleteByOffset(unsigned int, JSC::DFG::Node *, const JSC::DFG::AbstractValue &, const JSC::DeleteByVariant &, unsigned int)
./dfg/DFGStructureAbstractValue.h
void JSC::DFG::ConstantFoldingPhase::emitGetByOffset(unsigned int, JSC::DFG::Node *, const JSC::DFG::AbstractValue &, const JSC::GetByVariant &, unsigned int)
variant.conditionSet().isEmpty()
void JSC::DFG::Node::convertToMultiGetByOffset(JSC::DFG::MultiGetByOffsetData *)
void JSC::DFG::ConstantFoldingPhase::tryFoldAsPutByOffset(JSC::DFG::Node *, unsigned int, JSC::DFG::Edge, JSC::DFG::Edge, bool, JSC::PrivateFieldPutKind, bool &, bool &)
void JSC::DFG::ConstantFoldingPhase::fixUpsilons(JSC::DFG::BasicBlock *)
Bad Upsilon phi() pointer
Lexical binding shadows an existing global property
Desired watchpoints:
    Watchpoint sets: 
    Inline watchpoint sets: 
    SymbolTables: 
    FunctionExecutables: 
    Buffer views: 
    Object property conditions: 
./dfg/DFGDesiredWeakReferences.cpp
void JSC::DFG::DesiredWeakReferences::reallyAdd(JSC::VM &, JSC::DFG::CommonData *)
./dfg/DFGDesiredWatchpoints.h
void JSC::DFG::GenericDesiredWatchpoints<JSC::WatchpointSet *>::reallyAdd(JSC::CodeBlock *, JSC::DFG::WatchpointCollector &) [WatchpointSetType = JSC::WatchpointSet *, Adaptor = JSC::DFG::SetPointerAdaptor<JSC::WatchpointSet *>]
void JSC::DFG::GenericDesiredWatchpoints<JSC::InlineWatchpointSet *>::reallyAdd(JSC::CodeBlock *, JSC::DFG::WatchpointCollector &) [WatchpointSetType = JSC::InlineWatchpointSet *, Adaptor = JSC::DFG::SetPointerAdaptor<JSC::InlineWatchpointSet *>]
void JSC::DFG::GenericDesiredWatchpoints<JSC::SymbolTable *, JSC::DFG::SymbolTableAdaptor>::reallyAdd(JSC::CodeBlock *, JSC::DFG::WatchpointCollector &) [WatchpointSetType = JSC::SymbolTable *, Adaptor = JSC::DFG::SymbolTableAdaptor]
void JSC::DFG::GenericDesiredWatchpoints<JSC::FunctionExecutable *, JSC::DFG::FunctionExecutableAdaptor>::reallyAdd(JSC::CodeBlock *, JSC::DFG::WatchpointCollector &) [WatchpointSetType = JSC::FunctionExecutable *, Adaptor = JSC::DFG::FunctionExecutableAdaptor]
void JSC::DFG::GenericDesiredWatchpoints<JSC::JSArrayBufferView *, JSC::DFG::ArrayBufferViewWatchpointAdaptor>::reallyAdd(JSC::CodeBlock *, JSC::DFG::WatchpointCollector &) [WatchpointSetType = JSC::JSArrayBufferView *, Adaptor = JSC::DFG::ArrayBufferViewWatchpointAdaptor]
void JSC::DFG::GenericDesiredWatchpoints<JSC::ObjectPropertyCondition, JSC::DFG::AdaptiveStructureWatchpointAdaptor>::reallyAdd(JSC::CodeBlock *, JSC::DFG::WatchpointCollector &) [WatchpointSetType = JSC::ObjectPropertyCondition, Adaptor = JSC::DFG::AdaptiveStructureWatchpointAdaptor]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/PropertyCondition.h
constant hoisting
Phase 
 changed the IR.
./dfg/DFGConstantHoistingPhase.cpp
bool JSC::DFG::(anonymous namespace)::ConstantHoistingPhase::run()
auto JSC::DFG::(anonymous namespace)::ConstantHoistingPhase::run()::(anonymous class)::operator()(JSC::DFG::NodeType) const
Invalid node type in valuesFor()
critical edge breaking
dead code elimination
ArrayBuffer could not be allocated, probably because of OOM.
Generated DFG JIT code for 
, instructions size = 
    Optimized with execution counter = 
    Code at [
(End Of Main Path)
./dfg/DFGDoesGC.cpp
bool JSC::DFG::doesGC(JSC::DFG::Graph &, JSC::DFG::Node *)
Check:
Kill:
none
DFG(Driver) compiling 
Preparing for DFG compilation.
Deferring DFG compilation of 
 with queue length 
./dfg/DFGFlowIndexing.cpp
void JSC::DFG::FlowIndexing::recompute()
m_shadowIndexToNodeIndex.size() + numNodeIndices == m_numIndices
m_shadowIndexToNodeIndex[shadowIndex - numNodeIndices] == nodeIndex
DeadFlush
FlushedInt32
FlushedInt52
FlushedDouble
FlushedCell
FlushedBoolean
FlushedJSValue
ConflictingFlush
./dfg/DFGFlushFormat.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::FlushFormat)
<-- 
--> 
%sD@%d:<%c%u:
numberOfArgumentsToSkip = 
Type:
Rounding:
global
cachable-id {
, ID:
invalid cell operand: 
<host function>
<non-function executable>
machine:
vectorLengthHint = 
firstVarArgOffset = 
start = 
, count = 
, machineStart = 
, machineCount = 
, mandatoryMinimum = 
, limit = 
isInternalPromise = 
internalFieldIndex = 
, domJIT = 
ignoreLastIndexIsWritable = 
intrinsic = 
enumeratorModes = 
, F:
default:
ClobbersExit
exit: 
ExitValid
ExitInvalid
WasHoisted
  predicting 
 (skipped)
 (OSR target)
 (Catch Entrypoint)
  Execution count: 
  Predecessors:
  Successors:
 <invalid>
  Backwards dominates by: 
  Backwards dominates: 
  Control equivalent to:
  Phi Nodes:
>->(
, D@
DFG for 
  Fixpoint state: 
; Form: 
; Unification state: 
; Ref count state: 
  Argument formats for entrypoint index: 
  Arguments for block#
  States: 
, CurrentlyCFAUnreachable
, CFAUnreachable
  Vars Before: 
  Intersected Vars Before: 
  Var Links: 
./dfg/DFGGraph.cpp
void JSC::DFG::Graph::dump(WTF::PrintStream &, JSC::DumpContext *)
  Live: 
  Values: 
, CFAInvalidated
  Vars After: 
GC Values:
    
void JSC::DFG::Graph::deleteNode(JSC::DFG::Node *)
!block->ssa->liveAtHead.contains(node)
!block->ssa->liveAtTail.contains(node)
Dethreading DFG graph.
Basic block #
 was killed because it was unreachable
bool JSC::DFG::Graph::isLiveInBytecode(JSC::Operand, JSC::CodeOrigin)
JSC::DFG::FrozenValue *JSC::DFG::Graph::freeze(JSC::JSValue)
void JSC::DFG::Graph::assertIsRegistered(JSC::Structure *)
m_plan.weakReferences().contains(structure)
Structure 
 is watchable but isn't being watched.
While handling node 
JSC::DFG::CPSCFG &JSC::DFG::Graph::ensureCPSCFG()
JSC::DFG::CPSDominators &JSC::DFG::Graph::ensureCPSDominators()
JSC::DFG::SSADominators &JSC::DFG::Graph::ensureSSADominators()
JSC::DFG::CPSNaturalLoops &JSC::DFG::Graph::ensureCPSNaturalLoops()
JSC::DFG::SSANaturalLoops &JSC::DFG::Graph::ensureSSANaturalLoops()
JSC::DFG::BackwardsCFG &JSC::DFG::Graph::ensureBackwardsCFG()
JSC::DFG::BackwardsDominators &JSC::DFG::Graph::ensureBackwardsDominators()
JSC::DFG::ControlEquivalenceAnalysis &JSC::DFG::Graph::ensureControlEquivalenceAnalysis()
bool JSC::DFG::Graph::isStringPrototypeMethodSane(JSC::JSGlobalObject *, WTF::UniquedStringImpl *)
%3d 
%2d 
%2d: 
  : 
JSConstant
DoubleConstant
Int52Constant
LazyJSConstant
Identity
IdentityWithProfile
ToThis
CreateThis
CreatePromise
CreateGenerator
CreateAsyncGenerator
GetCallee
SetCallee
GetArgumentCountIncludingThis
SetArgumentCountIncludingThis
GetLocal
SetLocal
PutStack
KillStack
GetStack
MovHint
ExitOK
Phantom
Check
CheckVarargs
Upsilon
Flush
PhantomLocal
LoopHint
ExtractOSREntryLocal
ExtractCatchLocal
ClearCatchLocals
CheckTierUpInLoop
CheckTierUpAndOSREnter
CheckTierUpAtReturn
SetArgumentDefinitely
SetArgumentMaybe
InvalidationPoint
ValueBitNot
ArithBitNot
ValueBitAnd
ArithBitAnd
ValueBitOr
ArithBitOr
ValueBitXor
ArithBitXor
ArithBitLShift
ValueBitLShift
ArithBitRShift
ValueBitRShift
BitURShift
ValueToInt32
UInt32ToNumber
BooleanToNumber
DoubleAsInt32
DoubleRep
Int52Rep
ValueRep
FiatInt52
ArithAdd
ArithClz32
ArithSub
ArithNegate
ArithMul
ArithIMul
ArithDiv
ArithMod
ArithAbs
ArithMin
ArithMax
ArithFRound
ArithPow
ArithRandom
ArithRound
ArithFloor
ArithCeil
ArithTrunc
ArithSqrt
ArithUnary
ValueNegate
ValueAdd
ValueSub
ValueMul
ValueDiv
ValuePow
ValueMod
StrCat
GetByVal
GetByValWithThis
GetMyArgumentByVal
GetMyArgumentByValOutOfBounds
VarargsLength
LoadVarargs
ForwardVarargs
PutByValDirect
PutByVal
PutByValAlias
PutPrivateName
PutPrivateNameById
CheckPrivateBrand
SetPrivateBrand
TryGetById
GetById
GetByIdFlush
GetByIdWithThis
GetByIdDirect
GetByIdDirectFlush
PutById
PutByIdFlush
PutByIdDirect
PutByIdWithThis
PutByValWithThis
PutGetterById
PutSetterById
PutGetterSetterById
PutGetterByVal
PutSetterByVal
DefineDataProperty
DefineAccessorProperty
DeleteById
DeleteByVal
CheckStructure
CheckStructureOrEmpty
GetExecutable
PutStructure
AllocatePropertyStorage
ReallocatePropertyStorage
GetButterfly
NukeStructureAndSetButterfly
CheckArray
CheckArrayOrEmpty
GetPrivateName
GetPrivateNameById
CheckDetached
Arrayify
ArrayifyToStructure
GetIndexedPropertyStorage
ResolveRope
ConstantStoragePointer
GetGetter
GetSetter
GetByOffset
GetGetterSetterByOffset
MultiGetByOffset
PutByOffset
MultiPutByOffset
MultiDeleteByOffset
GetArrayLength
GetTypedArrayLengthAsInt52
GetVectorLength
GetTypedArrayByteOffset
GetTypedArrayByteOffsetAsInt52
GetScope
SkipScope
ResolveScope
ResolveScopeForHoistingFuncDeclInEval
GetGlobalObject
GetGlobalThis
GetClosureVar
PutClosureVar
GetGlobalVar
GetGlobalLexicalVariable
PutGlobalVariable
GetDynamicVar
PutDynamicVar
NotifyWrite
GetRegExpObjectLastIndex
SetRegExpObjectLastIndex
RecordRegExpCachedResult
CheckIsConstant
CheckNotEmpty
AssertNotEmpty
CheckBadValue
AssertInBounds
CheckInBounds
CheckInBoundsInt52
CheckIdent
CheckTypeInfoFlags
CheckJSCast
CheckNotJSCast
ParseInt
GetPrototypeOf
ObjectAssign
ObjectCreate
ObjectKeys
ObjectGetOwnPropertyNames
AtomicsAdd
AtomicsAnd
AtomicsCompareExchange
AtomicsExchange
AtomicsIsLockFree
AtomicsLoad
AtomicsOr
AtomicsStore
AtomicsSub
AtomicsXor
ArrayPush
ArrayPop
ArraySlice
ArrayIndexOf
RegExpExec
RegExpExecNonGlobalOrSticky
RegExpTest
RegExpTestInline
RegExpMatchFast
RegExpMatchFastGlobal
StringReplace
StringReplaceRegExp
StringCharCodeAt
StringCodePointAt
StringCharAt
StringFromCharCode
CompareLess
CompareLessEq
CompareGreater
CompareGreaterEq
CompareBelow
CompareBelowEq
CompareEq
CompareStrictEq
CompareEqPtr
SameValue
Call
DirectCall
Construct
DirectConstruct
CallVarargs
CallForwardVarargs
ConstructVarargs
ConstructForwardVarargs
TailCallInlinedCaller
DirectTailCallInlinedCaller
TailCallVarargsInlinedCaller
TailCallForwardVarargsInlinedCaller
CallEval
LogShadowChickenPrologue
LogShadowChickenTail
NewObject
NewGenerator
NewAsyncGenerator
NewArray
NewArrayWithSpread
NewArrayWithSize
NewArrayBuffer
NewInternalFieldObject
NewTypedArray
NewRegexp
NewSymbol
NewStringObject
GetRestLength
CreateRest
Spread
PhantomNewObject
PutHint
CheckStructureImmediate
MaterializeNewObject
PhantomNewFunction
PhantomNewGeneratorFunction
PhantomNewAsyncFunction
PhantomNewAsyncGeneratorFunction
PhantomNewInternalFieldObject
MaterializeNewInternalFieldObject
PhantomCreateActivation
MaterializeCreateActivation
PhantomNewRegexp
OverridesHasInstance
InstanceOf
InstanceOfCustom
MatchStructure
IsCellWithType
IsEmpty
TypeOfIsUndefined
TypeOfIsObject
TypeOfIsFunction
IsUndefinedOrNull
IsBoolean
IsNumber
IsBigInt
NumberIsInteger
IsObject
IsCallable
IsConstructor
IsTypedArrayView
TypeOf
ToBoolean
LogicalNot
ToPrimitive
ToPropertyKey
ToString
ToNumber
ToNumeric
ToObject
CallObjectConstructor
CallStringConstructor
CallNumberConstructor
NumberToStringWithRadix
NumberToStringWithValidRadixConstant
FunctionToString
MakeRope
InByVal
InById
HasPrivateName
HasPrivateBrand
ProfileType
ProfileControlFlow
SetFunctionName
HasOwnProperty
GetInternalField
PutInternalField
CreateActivation
PushWithScope
CreateDirectArguments
PhantomDirectArguments
PhantomCreateRest
PhantomSpread
PhantomNewArrayWithSpread
PhantomNewArrayBuffer
CreateScopedArguments
CreateClonedArguments
PhantomClonedArguments
CreateArgumentsButterfly
GetFromArguments
PutToArguments
GetArgument
NewFunction
NewGeneratorFunction
NewAsyncGeneratorFunction
NewAsyncFunction
Jump
Branch
Switch
EntrySwitch
Return
TailCall
DirectTailCall
TailCallVarargs
TailCallForwardVarargs
Unreachable
Throw
ThrowStaticError
CountExecution
SuperSamplerBegin
SuperSamplerEnd
ForceOSRExit
BottomValue
CheckTraps
StoreBarrier
FencedStoreBarrier
HasIndexedProperty
GetPropertyEnumerator
EnumeratorNextUpdateIndexAndMode
EnumeratorNextExtractMode
EnumeratorNextExtractIndex
EnumeratorNextUpdatePropertyName
EnumeratorGetByVal
EnumeratorInByVal
EnumeratorHasOwnProperty
MapHash
NormalizeMapKey
GetMapBucket
GetMapBucketHead
GetMapBucketNext
LoadKeyFromMapBucket
LoadValueFromMapBucket
SetAdd
MapSet
WeakMapGet
WeakSetAdd
WeakMapSet
ExtractValueFromWeakMapGet
StringValueOf
StringSlice
ToLowerCase
CallDOMGetter
CallDOM
InitializeEntrypointArguments
CPUIntrinsic
FilterCallLinkStatus
FilterGetByStatus
FilterInByStatus
FilterPutByStatus
FilterDeleteByStatus
FilterCheckPrivateBrandStatus
FilterSetPrivateBrandStatus
DataViewGetInt
DataViewGetFloat
DataViewSet
DateGetInt32OrNaN
DateGetTime
  Dominated by: 
  Dominates: 
  Dominance Frontier: 
  Iterated Dominance Frontier: 
  Loop header, contains:
  Containing loop headers:
auto JSC::DFG::Graph::blocksInPreOrder()::(anonymous class)::operator()(auto &) const [dominators:auto = JSC::DFG::Dominators<JSC::DFG::CFG>]
auto JSC::DFG::Graph::blocksInPreOrder()::(anonymous class)::operator()(auto &) const [dominators:auto = JSC::DFG::Dominators<JSC::DFG::CPSCFG>]
auto JSC::DFG::Graph::blocksInPostOrder(bool)::(anonymous class)::operator()(auto &) const [dominators:auto = JSC::DFG::Dominators<JSC::DFG::CFG>]
auto JSC::DFG::Graph::blocksInPostOrder(bool)::(anonymous class)::operator()(auto &) const [dominators:auto = JSC::DFG::Dominators<JSC::DFG::CPSCFG>]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
./dfg/DFGValueStrength.h
JSC::DFG::ValueStrength JSC::DFG::merge(JSC::DFG::ValueStrength, JSC::DFG::ValueStrength)
DFG ASSERTION FAILED: 
) : 
Graph at time of failure:
./dfg/DFGCFG.h
JSC::DFG::SSACFG &JSC::DFG::selectCFG(JSC::DFG::Graph &) [T = JSC::DFG::CFG]
WTF::NaturalLoops<JSC::DFG::CPSCFG>::NaturalLoops(Graph &, Dominators<Graph> &, bool) [Graph = JSC::DFG::CPSCFG]
WTF::NaturalLoops<JSC::DFG::CFG>::NaturalLoops(Graph &, Dominators<Graph> &, bool) [Graph = JSC::DFG::CFG]
fixup
Phase 
 changed the IR.
./dfg/DFGFixupPhase.cpp
void JSC::DFG::FixupPhase::fixupNode(JSC::DFG::Node *)
Unexpected node during ValueBit operation fixup
arrayMode.isSpecific() || arrayMode.type() == Array::ForceExit
arrayMode.isSomeTypedArrayView() || arrayMode.type() == Array::ForceExit
Unexpected node during fixup
auto JSC::DFG::FixupPhase::attemptToMakeFastStringAdd(JSC::DFG::Node *)::(anonymous class)::operator()(JSC::DFG::Edge &) const
void JSC::DFG::FixupPhase::blessArrayOperation(JSC::DFG::Edge, JSC::DFG::Edge, JSC::DFG::Edge &, bool (*)(const JSC::DFG::ArrayMode &))
void JSC::DFG::FixupPhase::fixupArrayIndexOf(JSC::DFG::Node *)
JSC::InlineWatchpointSet &JSC::JSGlobalObject::numberToStringWatchpointSet()
auto JSC::DFG::FixupPhase::fixupCallDOM(JSC::DFG::Node *)::(anonymous class)::operator()(JSC::DFG::Edge &, unsigned int) const
bool JSC::DFG::FixupPhase::attemptToMakeCallDOM(JSC::DFG::Node *)
void JSC::DFG::FixupPhase::fixupGetAndSetLocalsInBlock(JSC::DFG::BasicBlock *)
auto JSC::DFG::FixupPhase::fixupChecksInBlock(JSC::DFG::BasicBlock *)::(anonymous class)::operator()(JSC::DFG::Edge &) const
node->op() == Check
./dfg/DFGStructureClobberState.h
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::StructureClobberState)
InvalidBranchDirection
TakeTrue
TakeFalse
TakeBoth
./dfg/DFGBranchDirection.h
const char *JSC::DFG::branchDirectionToString(JSC::DFG::BranchDirection)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/b3/B3SparseCollection.h
void JSC::B3::SparseCollection<JSC::DFG::Node>::remove(T *) [T = JSC::DFG::Node]
./dfg/DFGInPlaceAbstractState.cpp
void JSC::DFG::InPlaceAbstractState::initialize()
bool JSC::DFG::InPlaceAbstractState::endBasicBlock()
bool JSC::DFG::InPlaceAbstractState::merge(JSC::DFG::BasicBlock *, JSC::DFG::BasicBlock *)
./dfg/DFGJITCode.cpp
virtual JSC::RegisterSet JSC::DFG::JITCode::liveRegistersToPreserveAtExceptionHandlingCallSite(JSC::CodeBlock *, JSC::CallSiteIndex)
: FTL-optimizing next invocation.
: Not FTL-optimizing anytime soon.
: FTL-optimizing after warm-up.
: FTL-optimizing soon.
: Forcing slow path concurrently for FTL entry.
void JSC::DFG::JITCode::setOptimizationThresholdBasedOnCompilationResult(JSC::CodeBlock *, JSC::CompilationResult)
: Setting OSR entry block to 
OSR entries will go to 
./dfg/DFGJITCompiler.cpp
void JSC::DFG::JITCompiler::link(JSC::LinkBuffer &)
DFG JIT code for %s
void JSC::DFG::JITCompiler::noticeCatchEntrypoint(JSC::DFG::BasicBlock &, JITCompiler::Label, JSC::LinkBuffer &, Vector<JSC::DFG::FlushFormat> &&)
void JSC::DFG::JITCompiler::noticeOSREntry(JSC::DFG::BasicBlock &, JITCompiler::Label, JSC::LinkBuffer &)
JSC::DFG::StructureClobberState JSC::DFG::merge(JSC::DFG::StructureClobberState, JSC::DFG::StructureClobberState)
bool JSC::DFG::InPlaceAbstractState::mergeToSuccessors(JSC::DFG::BasicBlock *)
auto JSC::DFG::JITCompiler::linkOSRExits()::(anonymous class)::operator()(JSC::AbstractMacroAssembler<JSC::X86Assembler>::Label) const
integer check combining
Phase 
 changed the IR.
./dfg/DFGIntegerCheckCombiningPhase.cpp
void JSC::DFG::IntegerCheckCombiningPhase::handleBlock(JSC::DFG::BlockIndex)
integer range optimization
./dfg/DFGIntegerRangeOptimizationPhase.cpp
bool JSC::DFG::(anonymous namespace)::IntegerRangeOptimizationPhase::run()
block == m_graph.block(0) || m_seenBlocks.contains(block)
Invalid comparison node type
JSC::DFG::(anonymous namespace)::Relationship::Relationship(JSC::DFG::NodeFlowProjection, JSC::DFG::NodeFlowProjection, JSC::DFG::(anonymous namespace)::Relationship::Kind, int)
void JSC::DFG::(anonymous namespace)::Relationship::setLeft(JSC::DFG::NodeFlowProjection)
JSC::DFG::(anonymous namespace)::Relationship JSC::DFG::(anonymous namespace)::Relationship::inverse() const
static unsigned int JSC::DFG::(anonymous namespace)::Relationship::vagueness(JSC::DFG::(anonymous namespace)::Relationship::Kind)
JSC::DFG::(anonymous namespace)::Relationship JSC::DFG::(anonymous namespace)::Relationship::filterConstant(const JSC::DFG::(anonymous namespace)::Relationship &) const
void JSC::DFG::(anonymous namespace)::Relationship::setRight(JSC::DFG::NodeFlowProjection)
static JSC::DFG::(anonymous namespace)::Relationship::Kind JSC::DFG::(anonymous namespace)::Relationship::flipped(JSC::DFG::(anonymous namespace)::Relationship::Kind)
void JSC::DFG::(anonymous namespace)::Relationship::mergeConstantsImpl(const JSC::DFG::(anonymous namespace)::Relationship &, const Functor &) const [Functor = (lambda at ./dfg/DFGIntegerRangeOptimizationPhase.cpp:1833:25)]
JSC::DFG::(anonymous namespace)::Relationship JSC::DFG::(anonymous namespace)::Relationship::mergeImpl(const JSC::DFG::(anonymous namespace)::Relationship &) const
invalidation point injection
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/LinkBuffer.h
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)10924, T = JSC::AssemblerLabel]
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)357, T = JSC::AssemblerLabel]
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)45709, T = JSC::AssemblerLabel]
Firing jump replacement watchpoint from 
 to 
./dfg/DFGLazyJSValue.cpp
JSC::JSValue JSC::DFG::LazyJSValue::getValue(JSC::VM &) const
const WTF::StringImpl *JSC::DFG::LazyJSValue::tryGetStringImpl(JSC::VM &) const
WTF::String JSC::DFG::LazyJSValue::tryGetString(JSC::DFG::Graph &) const
WTF::TriState JSC::DFG::LazyJSValue::strictEqual(const JSC::DFG::LazyJSValue &) const
uintptr_t JSC::DFG::LazyJSValue::switchLookupValue(JSC::DFG::SwitchKind) const
Lazy:SingleCharacterString(
%04X
Lazy:KnownString(
Lazy:NewString(
void JSC::DFG::LazyJSValue::dumpInContext(WTF::PrintStream &, JSC::DumpContext *) const
ExitsForExceptions
Exits
./dfg/DFGMayExit.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::ExitMode)
LICM
Phase 
 changed the IR.
./dfg/DFGLICMPhase.cpp
bool JSC::DFG::LICMPhase::run()
header->predecessors.size() > 1
preHeader->terminal()->op() == Jump
bool JSC::DFG::safeToExecute(AbstractStateType &, JSC::DFG::Graph &, JSC::DFG::Node *, bool) [AbstractStateType = JSC::DFG::AtTailAbstractState]
void JSC::DFG::SafeToExecuteEdge<JSC::DFG::AtTailAbstractState>::operator()(JSC::DFG::Node *, JSC::DFG::Edge) [AbstractStateType = JSC::DFG::AtTailAbstractState]
./dfg/DFGAbstractInterpreterInlines.h
bool JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, JSC::DFG::Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]
void JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::verifyEdge(JSC::DFG::Node *, JSC::DFG::Edge) [AbstractStateType = JSC::DFG::AtTailAbstractState]
./dfg/DFGFrozenValue.h
./dfg/DFGFlushFormat.h
./dfg/DFGAbstractValue.h
bool JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::handleConstantBinaryBitwiseOp(JSC::DFG::Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
auto JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, JSC::DFG::Node *)::(anonymous class)::operator()(double, double) const [AbstractStateType = JSC::DFG::AtTailAbstractState]
./dfg/DFGAtTailAbstractState.h
void JSC::DFG::AtTailAbstractState::setStructureClobberState(JSC::DFG::StructureClobberState)
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)2367, T = JSC::AssemblerLabel]
auto JSC::DFG::LazyJSValue::emit(JSC::CCallHelpers &, JSC::JSValueRegs)::(anonymous class)::operator()(JSC::LinkBuffer &)::(anonymous class)::operator()() const
live catch variable preservation phase
./dfg/DFGLiveCatchVariablePreservationPhase.cpp
bool JSC::DFG::LiveCatchVariablePreservationPhase::run()
m_graph.m_form == LoadStore
auto JSC::DFG::LiveCatchVariablePreservationPhase::handleBlockForTryCatch(JSC::DFG::BasicBlock *, JSC::DFG::InsertionSet &)::(anonymous class)::operator()(JSC::DFG::NodeOrigin, unsigned int) const
liveness analysis
./dfg/DFGFlowIndexing.h
unsigned int JSC::DFG::FlowIndexing::shadowIndex(JSC::DFG::Node *) const
node->op() == Phi
loop pre-header creation
./dfg/DFGLoopPreHeaderCreationPhase.cpp
bool JSC::DFG::LoopPreHeaderCreationPhase::run()
existingPreHeader != predecessor
existingPreHeader
existingPreHeader->terminal()->op() == Jump
LoadFromPrototype
./dfg/DFGMultiGetByOffsetData.cpp
void WTF::printInternal(WTF::PrintStream &, GetByOffsetMethod::Kind)
./dfg/DFGNode.cpp
void JSC::DFG::Node::convertToIdentity()
void JSC::DFG::Node::convertToIdentityOn(JSC::DFG::Node *)
void JSC::DFG::Node::convertToDirectCall(JSC::DFG::FrozenValue *)
void JSC::DFG::Node::convertToCallDOM(JSC::DFG::Graph &)
SwitchImm
SwitchChar
SwitchString
SwitchCell
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::SwitchKind)
<Double>
<Int52>
./dfg/DFGNodeFlags.cpp
void JSC::DFG::dumpNodeFlags(WTF::PrintStream &, JSC::DFG::NodeFlags)
MustGen
VarArgs
PureInt
PureInt(w/ neg zero)
PureNum
UseAsOther
MayHaveDoubleResult
MayHaveBigInt32Result
MayHaveHeapBigIntResult
MayHaveNonNumericResult
MayOverflowInt52
MayOverflowInt32InBaseline
MayOverflowInt32InDFG
MayNegZeroInBaseline
MayNegZeroInDFG
UseAsInt
ReallyWantsInt
IsFlushed
shadow(
./dfg/DFGMinifiedIDInlines.h
JSC::DFG::MinifiedID::MinifiedID(JSC::DFG::Node *)
, machine code = 
, stack rules = [
], machine stack used = 
DFG OSR in 
 from 
./dfg/DFGOSREntry.cpp
void *JSC::DFG::prepareOSREntry(JSC::VM &, JSC::CallFrame *, JSC::CodeBlock *, JSC::BytecodeIndex)
    OSR failed because the target code block is not DFG.
    OSR failed because the entrypoint was optimized out.
    OSR failed because argument 
 is 
, expected 
    OSR failed because variable 
machine int.
, expected number.
    OSR failed because stack growth failed.
    OSR should succeed.
    OSR using target PC 
    OSR returning data buffer 
MacroAssemblerCodePtr<ExceptionHandlerPtrTag> JSC::DFG::prepareCatchOSREntry(JSC::VM &, JSC::CallFrame *, JSC::CodeBlock *, JSC::CodeBlock *, JSC::BytecodeIndex)
./dfg/DFGOSRExit.cpp
JSC::DFG::OSRExit::OSRExit(JSC::ExitKind, JSC::JSValueSource, JSC::MethodOfGettingAValueProfile, JSC::DFG::SpeculativeJIT *, unsigned int, unsigned int)
canExit
static void JSC::DFG::OSRExit::emitRestoreArguments(JSC::CCallHelpers &, JSC::VM &, const Operands<JSC::ValueRecovery> &)
void JSC::DFG::operationCompileOSRExit(JSC::CallFrame *, void *)
DFG OSR exit #%u (D@%u, %s, %s) from %s, with operands = %s
static void JSC::DFG::OSRExit::compileExit(JSC::CCallHelpers &, JSC::VM &, const JSC::DFG::OSRExit &, const Operands<JSC::ValueRecovery> &, JSC::DFG::SpeculationRecovery *)
Speculation failure in 
 @ exit #
) with 
executeCounter = 
, reoptimizationRetryCounter = 
, optimizationDelayCounter = 
no alternative code block (i.e. we've been jettisoned)
, osrExitCounter = 
    GPRs at time of exit:
    FPRs at time of exit:
%llx:%lf
./dfg/DFGOSRExitCompilerCommon.cpp
void JSC::DFG::handleExitCounts(JSC::VM &, JSC::CCallHelpers &, const JSC::DFG::OSRExitBase &)
CCallHelpers::Address JSC::DFG::calleeSaveSlot(JSC::InlineCallFrame *, JSC::CodeBlock *, JSC::GPRReg)
ignored
maps to 
overwritten
, forced double
, forced machine int
xmm0
xmm1
xmm2
xmm3
xmm4
xmm5
MacroAssemblerCodePtr<JSEntryPtrTag> JSC::DFG::callerReturnPC(JSC::CodeBlock *, JSC::BytecodeIndex, InlineCallFrame::Kind, bool &)
JSC::BaselineJITData *JSC::CodeBlock::baselineJITData()
OSR availability analysis
Phase 
 changed the IR.
PromotedHeapLocation is dead, but should not be: 
Block #
Availability at head: 
Availability at tail: 
./dfg/DFGOSRAvailabilityAnalysisPhase.cpp
bool JSC::DFG::OSRAvailabilityAnalysisPhase<(lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:201:31), (lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:202:31)>::run() [HeadFunctor = (lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:201:31), TailFunctor = (lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:202:31)]
, availabilityMap = 
bool JSC::DFG::OSRAvailabilityAnalysisPhase<(lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:216:31), (lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:217:31)>::run() [HeadFunctor = (lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:216:31), TailFunctor = (lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:217:31)]
OSR entrypoint creation
./dfg/DFGOSREntrypointCreationPhase.cpp
bool JSC::DFG::OSREntrypointCreationPhase::run()
Object prototype may only be an Object or null.
./dfg/DFGOperations.cpp
JSC::EncodedJSValue JSC::DFG::operationArrayPushMultiple(JSC::JSGlobalObject *, JSC::JSArray *, void *, int32_t)
Array size is not a small enough positive integer.
toString() radix argument must be between 2 and 36
Executed NotifyWrite
Log Full, called from inside DFG.
void JSC::DFG::operationLinkDirectCall(JSC::OptimizingCallLinkInfo *, JSC::JSFunction *)
: Entered reoptimize
: Not reoptimizing because we've already been jettisoned.
: Not reoptimizing 
 because it either didn't exit enough or didn't loop enough after exit.
Unexpected code block in DFG->FTL tier-up: 
void JSC::DFG::operationTriggerTierUpNow(JSC::VM *)
: Entered triggerTierUpNow with executeCounter = 
delayFTLCompile
Unexpected code block in DFG->FTL trigger tier up now in loop: 
void JSC::DFG::operationTriggerTierUpNowInLoop(JSC::VM *, unsigned int)
: Entered triggerTierUpNowInLoop with executeCounter = 
char *JSC::DFG::operationTriggerOSREntryNow(JSC::VM *, unsigned int)
: Entered triggerOSREntryNow with executeCounter = 
Beginning DFG phase 
Before 
./dfg/DFGPlan.cpp
JSC::DFG::Plan::Plan(JSC::CodeBlock *, JSC::CodeBlock *, JSC::JITCompilationMode, JSC::BytecodeIndex, const Operands<std::optional<JSValue>> &)
clean must handle values
Compiler must handle OSR entry from 
 with values: 
bytecode parser
Graph after parsing:
Graph after optimization:
machine code generation
Graph just before FTL lowering:
virtual Plan::CompilationPath JSC::DFG::Plan::compileInThreadImpl()
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/ArgList.h
void JSC::MarkedArgumentBufferBase::appendWithAction(JSC::JSValue) [action = JSC::MarkedArgumentBufferBase::CrashOnOverflow]
Invalid mix of BigInt and other type in remainder.
Invalid mix of BigInt and other type in bitwise 'and' operation.
Invalid mix of BigInt and other type in bitwise 'or' operation.
Invalid mix of BigInt and other type in bitwise 'xor' operation.
Invalid mix of BigInt and other type in left shift operation.
Invalid mix of BigInt and other type in signed right shift operation.
BigInt does not support >>> operator
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
Invalid mix of BigInt and other type in division.
Invalid mix of BigInt and other type in exponentiation.
bool JSC::JSObject::trySetIndexQuickly(JSC::VM &, unsigned int, JSC::JSValue, JSC::ArrayProfile *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSArrayInlines.h
void JSC::JSArray::pushInline(JSC::JSGlobalObject *, JSC::JSValue)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/RegExpMatchesArray.h
JSC::JSArray *JSC::createRegExpMatchesArray(JSC::VM &, JSC::JSGlobalObject *, JSC::JSString *, const WTF::String &, JSC::RegExp *, unsigned int, JSC::MatchResult &)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSString.h
JSC::JSRopeString::JSRopeString(JSC::VM &, JSC::JSString *, unsigned int, unsigned int)
void JSC::JSObject::initializeIndexWithoutBarrier(JSC::ObjectInitializationScope &, unsigned int, JSC::JSValue, JSC::IndexingType)
JSC::JSValue JSC::JSObject::getIndexQuickly(unsigned int) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSArray.h
Allocated a scope
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/ButterflyInlines.h
static JSC::Butterfly *JSC::Butterfly::create(JSC::VM &, JSC::JSObject *, size_t, size_t, bool, const JSC::IndexingHeader &, size_t)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/CallLinkInfo.h
abortFTLCompile
Deferring FTL-optimization of 
 indefinitely because there was an FTL failure.
Choosing not to FTL-optimize 
 yet.
counter = 
Code block 
 was compiled but it doesn't have an optimized replacement.
triggerFTLReplacement
still compiling
has replacement
compiled and failed
OSR entry: From 
 got entry block 
osrEntry
triggerFTLOSR
Immediate OSR entry: From 
OSR entry code is already invalidated
OSR entry failed
OSR entry failed too many times
avoiding OSR entry compile
avoiding replacement compile
OSR entry failed, OSR entry threshold not met
Inner-loop 
 setting parent loop 
's trigger and backing off.
OSR ecompilation not successful
Profiler::CompilationKind JSC::DFG::(anonymous namespace)::profilerCompilationKindForMode(JSC::JITCompilationMode)
dfgFinalize
invalidated
failed
succeeded
object allocation elimination
./dfg/DFGObjectAllocationSinkingPhase.cpp
void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::handleNode(JSC::DFG::Node *, const WriteFunctor &, const ResolveFunctor &) [WriteFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:884:25), ResolveFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:885:25)]
JSC::DFG::(anonymous namespace)::Allocation &JSC::DFG::(anonymous namespace)::Allocation::filterStructures(const JSC::DFG::RegisteredStructureSet &)
void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::handleNode(JSC::DFG::Node *, const WriteFunctor &, const ResolveFunctor &) [WriteFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1358:21), ResolveFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1366:21)]
void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::handleNode(JSC::DFG::Node *, const WriteFunctor &, const ResolveFunctor &) [WriteFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1396:25), ResolveFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1397:25)]
void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::placeMaterializations(HashMap<JSC::DFG::Node *, JSC::DFG::(anonymous namespace)::Allocation>, JSC::DFG::Node *)
auto JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::placeMaterializations(HashMap<JSC::DFG::Node *, JSC::DFG::(anonymous namespace)::Allocation>, JSC::DFG::Node *)::(anonymous class)::operator()(JSC::DFG::(anonymous namespace)::Allocation &&) const
JSC::DFG::Node *JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::createMaterialization(const JSC::DFG::(anonymous namespace)::Allocation &, JSC::DFG::Node *)
Bad allocation kind
void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::promoteLocalHeap()
void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::handleNode(JSC::DFG::Node *, const WriteFunctor &, const ResolveFunctor &) [WriteFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1783:21), ResolveFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1789:21)]
void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::handleNode(JSC::DFG::Node *, const WriteFunctor &, const ResolveFunctor &) [WriteFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1889:21), ResolveFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1910:21)]
./dfg/DFGSSACalculator.h
void JSC::DFG::SSACalculator::computePhis(const PhiInsertionFunctor &) [PhiInsertionFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1919:13)]
m_graph.m_ssaDominators
void JSC::DFG::SSACalculator::computePhis(const PhiInsertionFunctor &) [PhiInsertionFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1941:13)]
void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::populateMaterialization(JSC::DFG::BasicBlock *, JSC::DFG::Node *, JSC::DFG::Node *)
Bad location kind
Bad materialize op
JSC::DFG::Node *JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::createRecovery(JSC::DFG::BasicBlock *, JSC::DFG::PromotedHeapLocation, JSC::DFG::Node *, bool &)
void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::handleNode(JSC::DFG::Node *, const WriteFunctor &, const ResolveFunctor &) [WriteFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:2076:21), ResolveFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:2102:21)]
void JSC::DFG::putByValInternal(JSC::JSGlobalObject *, JSC::VM &, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::EncodedJSValue) [strict = true, direct = true]
void JSC::DFG::putByVal(JSC::JSGlobalObject *, JSC::VM &, JSC::JSValue, uint32_t, JSC::JSValue) [strict = true, direct = true]
void JSC::DFG::putByValInternal(JSC::JSGlobalObject *, JSC::VM &, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::EncodedJSValue) [strict = false, direct = true]
void JSC::DFG::putByVal(JSC::JSGlobalObject *, JSC::VM &, JSC::JSValue, uint32_t, JSC::JSValue) [strict = false, direct = true]
void JSC::DFG::putByValCellInternal(JSC::JSGlobalObject *, JSC::VM &, JSC::JSCell *, JSC::PropertyName, JSC::JSValue) [strict = true, direct = true]
void JSC::DFG::putByValCellInternal(JSC::JSGlobalObject *, JSC::VM &, JSC::JSCell *, JSC::PropertyName, JSC::JSValue) [strict = false, direct = true]
Requested length is negative
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSGenericTypedArrayViewInlines.h
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::Int8Adaptor]
Buffer is already detached
ArrayBuffer length minus the byteOffset is not a multiple of the element size
Underlying ArrayBuffer has been detached from the view
Content types of source and new typed array are different
species is not a constructor
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int8Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::BigInt64Adaptor]
Content types of source and destination typed arrays are different
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::BigUint64Adaptor]
Range consisting of offset and length are out of bounds
 cannot be negative
 too large
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::BigUint64Adaptor]
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::BigUint64Adaptor]
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::BigUint64Adaptor]
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor]
auto JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::BigUint64Adaptor]
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::BigUint64Adaptor]
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::BigUint64Adaptor]
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::BigUint64Adaptor]
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::BigUint64Adaptor]
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::BigUint64Adaptor]
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::BigUint64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::BigUint64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::BigInt64Adaptor]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSCast.h
To JSC::jsSecureCast(JSC::VM &, From) [To = JSC::JSString *, From = JSC::JSValue]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/HashMapImplInlines.h
void JSC::HashMapImpl<JSC::HashMapBucket<JSC::HashMapBucketDataKey>>::rehash(JSC::JSGlobalObject *) [HashMapBucketType = JSC::HashMapBucket<JSC::HashMapBucketDataKey>]
void JSC::HashMapImpl<JSC::HashMapBucket<JSC::HashMapBucketDataKeyValue>>::rehash(JSC::JSGlobalObject *) [HashMapBucketType = JSC::HashMapBucket<JSC::HashMapBucketDataKeyValue>]
replacement in place, delaying indefinitely
trigger in place, delaying indefinitely
OSR in loop failed, deferring
phantom insertion
./dfg/DFGPhantomInsertionPhase.cpp
bool JSC::DFG::(anonymous namespace)::PhantomInsertionPhase::run()
m_graph.m_refCountState == ExactRefCount
<nullopt>
prediction injection
InvalidPromotedLocationKind
StructurePLoc
ActivationSymbolTablePLoc
NamedPropertyPLoc
IndexedPropertyPLoc
ArgumentPLoc
ArgumentCountPLoc
ArgumentsCalleePLoc
FunctionExecutablePLoc
FunctionActivationPLoc
ActivationScopePLoc
ClosureVarPLoc
PublicLengthPLoc
VectorLengthPLoc
SpreadPLoc
NewArrayWithSpreadArgumentPLoc
NewArrayBufferPLoc
RegExpObjectRegExpPLoc
RegExpObjectLastIndexPLoc
InternalFieldObjectPLoc
./dfg/DFGPromotedHeapLocation.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::PromotedLocationKind)
prediction propagation
Phase 
 changed the IR.
./dfg/DFGDoubleFormatState.h
JSC::DFG::DoubleFormatState JSC::DFG::mergeDoubleFormatStates(JSC::DFG::DoubleFormatState, JSC::DFG::DoubleFormatState)
./dfg/DFGPredictionPropagationPhase.cpp
void JSC::DFG::(anonymous namespace)::PredictionPropagationPhase::processInvariantsForNode()
Unexpected node during prediction propagation
PutStack sinking
./dfg/DFGPutStackSinkingPhase.cpp
bool JSC::DFG::(anonymous namespace)::PutStackSinkingPhase::run()
liveAtHead.atIndex(0).argument(i)
!isConflicting
deferred.operand(data->operand) != ConflictingFlush
format == data->format
isConcrete(format)
incoming
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
./dfg/DFGPreciseLocalClobberize.h
void JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>::write(JSC::DFG::AbstractHeap) [ReadFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), WriteFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), DefFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)]
auto JSC::DFG::(anonymous namespace)::PutStackSinkingPhase::run()::(anonymous class)::operator()(JSC::Operand) const
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>::write(JSC::DFG::AbstractHeap) [ReadFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), WriteFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), DefFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)]
void JSC::DFG::SSACalculator::computePhis(const PhiInsertionFunctor &) [PhiInsertionFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:387:13)]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:515:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:529:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:515:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:529:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:515:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:529:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:515:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:529:25)>::write(JSC::DFG::AbstractHeap) [ReadFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), WriteFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:515:41), DefFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:529:25)]
JSC::DFG::UseKind JSC::DFG::uncheckedUseKindFor(JSC::DFG::FlushFormat)
JSC::DFG::NodeFlags JSC::DFG::resultFor(JSC::DFG::FlushFormat)
SSA conversion
./dfg/DFGSSAConversionPhase.cpp
bool JSC::DFG::SSAConversionPhase::run()
m_graph.m_form == ThreadedCPS
!m_graph.m_isInSSAConversion
entrySwitchData->cases[0] == m_graph.block(0)
node
m_graph.m_isInSSAConversion
void JSC::DFG::SSACalculator::computePhis(const PhiInsertionFunctor &) [PhiInsertionFunctor = (lambda at ./dfg/DFGSSAConversionPhase.cpp:178:13)]
SSA lowering
./dfg/DFGSSALoweringPhase.cpp
bool JSC::DFG::SSALoweringPhase::run()
Clobbered:
DFG OSR exit generation thunk
DFG OSR entry thunk
stack layout
Phase 
 changed the IR.
./dfg/DFGStackLayoutPhase.cpp
bool JSC::DFG::StackLayoutPhase::run()
static execution count estimation
./dfg/DFGStaticExecutionCountEstimationPhase.cpp
bool JSC::DFG::StaticExecutionCountEstimationPhase::run()
Unexpected EntrySwitch in CPS form.
store barrier clustering
./dfg/DFGStoreBarrierClusteringPhase.cpp
void JSC::DFG::(anonymous namespace)::StoreBarrierClusteringPhase::doBlock(JSC::DFG::BasicBlock *)
!node->origin.wasHoisted
node->child1().useKind() == KnownCellUse
fast store barrier insertion
./dfg/DFGStoreBarrierInsertionPhase.cpp
bool JSC::DFG::(anonymous namespace)::StoreBarrierInsertionPhase<JSC::DFG::(anonymous namespace)::PhaseMode::Fast>::run() [mode = JSC::DFG::(anonymous namespace)::PhaseMode::Fast]
m_graph.m_form != SSA
void JSC::DFG::(anonymous namespace)::StoreBarrierInsertionPhase<JSC::DFG::(anonymous namespace)::PhaseMode::Fast>::insertBarrier(unsigned int, JSC::DFG::Edge) [mode = JSC::DFG::(anonymous namespace)::PhaseMode::Fast]
isCell(base.useKind())
global store barrier insertion
bool JSC::DFG::(anonymous namespace)::StoreBarrierInsertionPhase<JSC::DFG::(anonymous namespace)::PhaseMode::Global>::run() [mode = JSC::DFG::(anonymous namespace)::PhaseMode::Global]
void JSC::DFG::(anonymous namespace)::StoreBarrierInsertionPhase<JSC::DFG::(anonymous namespace)::PhaseMode::Global>::insertBarrier(unsigned int, JSC::DFG::Edge) [mode = JSC::DFG::(anonymous namespace)::PhaseMode::Global]
strength reduction
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/text/StringBuilder.h
Optimizing compilation of 
 (for 
) did become ready.
) result: 
Dropping FTL code block 
 on the floor because the DFG code block 
 was jettisoned.
./dfg/DFGToFTLForOSREntryDeferredCompilationCallback.cpp
virtual void JSC::DFG::ToFTLForOSREntryDeferredCompilationCallback::compilationDidComplete(JSC::CodeBlock *, JSC::CodeBlock *, JSC::CompilationResult)
 -> 
Untyped
Int32
KnownInt32
Int52Rep
AnyInt
Number
RealNumber
DoubleRep
DoubleRepReal
DoubleRepAnyInt
Boolean
KnownBoolean
Cell
KnownCell
CellOrOther
Object
Array
Function
FinalObject
RegExpObject
PromiseObject
ProxyObject
DerivedArray
DateObject
MapObject
SetObject
WeakMapObject
WeakSetObject
DataViewObject
ObjectOrOther
StringIdent
String
StringOrOther
KnownString
KnownPrimitive
Symbol
AnyBigInt
HeapBigInt
BigInt32
StringObject
StringOrStringObject
NotStringVar
NotSymbol
NotCell
NotCellNorBigInt
NotDouble
NeitherDoubleNorHeapBigInt
NeitherDoubleNorHeapBigIntNorString
KnownOther
Other
Misc
./dfg/DFGUseKind.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::UseKind)
: validation failed: %s (%s:%d).
m_graph.isRoot(m_graph.block(0))
./dfg/DFGValidate.cpp
void JSC::DFG::(anonymous namespace)::Validate::validate()
m_graph.block(0) == m_graph.m_roots[0]
block->predecessors.isEmpty()
: validation failed: (%s = 
static_cast<Node*>(nullptr)
) == (%s = 
entrypoint->variablesAtHead.local(i)
) (%s:%d).
static_cast<Node*>(nullptr) == entrypoint->variablesAtHead.local(i)
block->isReachable
edge->hasResult()
edge->hasVariableAccessData(m_graph)
edge->variableAccessData() == node->variableAccessData()
edge->op() != SetLocal
m_myRefCounts.get(node)
node->adjustedRefCount()
m_myRefCounts.get(node) == node->adjustedRefCount()
node->op() == Phantom || node->op() == PhantomLocal || node->op() == Flush || node->op() == Check
foundTerminal
node->origin.isSet()
node->origin.semantic.isSet() == node->origin.forExit.isSet()
!(mayExit(m_graph, node) == Exits && !node->origin.exitOK)
!clobbersExitState(m_graph, previousNode) || !node->origin.exitOK || node->op() == ExitOK || node->origin.forExit != previousNode->origin.forExit
!(!previousNode->origin.exitOK && node->origin.exitOK) || node->op() == ExitOK || node->origin.forExit != previousNode->origin.forExit
!node->hasStructure() || !!node->structure().get()
!node->hasCellOperand() || node->cellOperand()->value().isCell()
!node->hasCellOperand() || !!node->cellOperand()->value()
!node->child3()
!node->child2()
uid->isSymbol() || !parseIndex(*uid)
canonicalResultRepresentation(node->result()) == canonicalResultRepresentation(node->child1()->result())
!!node->child1()
!"Bad use kind"
!!node->child2()
!!node->cellOperand()->value() && node->cellOperand()->value().isCell()
node->child1().useKind() == CellUse
!node->transition()->previous->dfgShouldWatch()
!variant.oldStructureForTransition()->dfgShouldWatch()
!variant.newStructure() || !variant.oldStructure()->dfgShouldWatch()
structure->classInfo() == JSFinalObject::info() || structure->classInfo() == JSArray::info()
!hasAnyArrayStorage(structure->indexingType())
node->isNumberConstant()
!!m_graph.m_vm.hasOwnPropertyCache()
type == Array::ArrayStorage || type == Array::SlowPutArrayStorage
inlineCallFrame->isVarargs()
node->arrayMode().type() != Array::String
node->vectorLengthHint() >= node->numChildren()
node->vectorLengthHint() >= node->castOperand<JSImmutableButterfly*>()->length()
node->arrayMode().isJSArrayWithOriginalStructure()
predecessors.size() == block->predecessors.size()
Before phase:
 in null Block 
 in Block 
edge.useKind() == DoubleRepUse || edge.useKind() == DoubleRepRealUse || edge.useKind() == DoubleRepAnyIntUse
void JSC::DFG::(anonymous namespace)::Validate::validateEdgeWithDoubleResultIfNecessary(JSC::DFG::Node *, JSC::DFG::Edge)
edge->hasInt52Result() == (edge.useKind() == Int52RepUse)
void JSC::DFG::(anonymous namespace)::Validate::validateEdgeWithInt52ResultIfNecessary(JSC::DFG::Node *, JSC::DFG::Edge)
shouldNotHaveTypeCheck(edge.useKind())
auto JSC::DFG::(anonymous namespace)::Validate::validate()::(anonymous class)::operator()(JSC::DFG::Edge) const
!m_graph.m_rootToArguments.isEmpty()
void JSC::DFG::(anonymous namespace)::Validate::validateCPS()
m_graph.m_rootToArguments.size() == m_graph.m_roots.size()
m_graph.m_roots.contains(root)
m_acceptableNodes.contains(edge.node())
edge->op() == SetLocal || edge->op() == SetArgumentDefinitely || edge->op() == SetArgumentMaybe || edge->op() == Phi
edge->op() == SetLocal || edge->op() == SetArgumentDefinitely || edge->op() == SetArgumentMaybe
prevBlock
prevNode
prevNode->shouldGenerate()
prevNode->op() == SetLocal || prevNode->op() == SetArgumentDefinitely || prevNode->op() == SetArgumentMaybe || prevNode->op() == Phi
!prevBlock->isInBlock(edge.node())
found
!block->variablesAtHead.tmp(i) || block->variablesAtHead.tmp(i)->accessesStack(m_graph)
!block->variablesAtTail.tmp(i) || block->variablesAtTail.tmp(i)->accessesStack(m_graph)
!block->variablesAtHead.argument(i) || block->variablesAtHead.argument(i)->accessesStack(m_graph)
!block->variablesAtTail.argument(i) || block->variablesAtTail.argument(i)->accessesStack(m_graph)
!block->variablesAtHead.local(i) || block->variablesAtHead.local(i)->accessesStack(m_graph)
!block->variablesAtTail.local(i) || block->variablesAtTail.local(i)->accessesStack(m_graph)
node->op() != Phi
node->origin.forExit.isSet()
nodesInThisBlock.contains(edge.node())
!phisInThisBlock.contains(edge.node())
!"unexpected node type in CPS"
edge->isInt32Constant()
node->structureSet().size() == 1
!hasInt32(structure->indexingType())
!hasDouble(structure->indexingType())
m_graph.m_fixpointState != FixpointNotConverged
getLocalPositions.operand(node->operand()) == notSet
node->child1()->op() == SetArgumentDefinitely || node->child1()->op() == Phi
node->child1()->op() == Phi || node->child1()->op() == SetLocal || node->child1()->op() == SetArgumentDefinitely || node->child1()->op() == SetArgumentMaybe
node->child1()->op() != SetArgumentMaybe
addResult.isNewEntry
!"Should not reach SetArgumentMaybe. GetLocal that has data flow that reaches a SetArgumentMaybe is invalid IR."
!"Unexpected node type."
block->isInPhis(child) || seenNodes.contains(child)
auto JSC::DFG::(anonymous namespace)::Validate::validateCPS()::(anonymous class)::operator()(const JSC::DFG::Edge &) const
getLocalPositions.operand(operand) < setLocalPositions.operand(operand)
void JSC::DFG::(anonymous namespace)::Validate::checkOperand(JSC::DFG::BasicBlock *, Operands<size_t> &, Operands<size_t> &, JSC::Operand)
 and 
m_graph.m_roots.size() == 1
void JSC::DFG::(anonymous namespace)::Validate::validateSSA()
m_graph.m_roots[0] == m_graph.block(0)
!m_graph.m_argumentFormats.isEmpty()
m_graph.m_rootToArguments.isEmpty()
entrypointIndex > 0
block->phis.isEmpty()
!node->origin.exitOK
!"bad node type for SSA"
node->child1()->isPhantomAllocation()
node->child1()->op() == PhantomCreateRest || node->child1()->op() == PhantomNewArrayBuffer
!child->isPhantomAllocation()
bitVector->get(i)
!node->child1()->isPhantomAllocation() || node->child1()->op() == PhantomCreateRest || node->child1()->op() == PhantomNewArrayBuffer
node->entrySwitchData()->cases.size() == m_graph.m_numberOfEntrypoints
node->entrypointIndex() < m_graph.m_numberOfEntrypoints
!edge->isPhantomAllocation()
auto JSC::DFG::(anonymous namespace)::Validate::validateSSA()::(anonymous class)::operator()(const JSC::DFG::Edge &) const
dominators.strictlyDominates(child->owner, block) || nodesInThisBlock.contains(child.node())
auto JSC::DFG::(anonymous namespace)::Validate::validateSSA()::(anonymous class)::operator()(JSC::DFG::Edge) const
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGValidate.cpp:443:21), WriteFunctor = (lambda at ./dfg/DFGValidate.cpp:444:21), DefFunctor = DefLambdaAdaptor, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
location.heap().kind() != SideState
auto JSC::DFG::(anonymous namespace)::Validate::validate()::(anonymous class)::operator()(JSC::DFG::HeapLocation, JSC::DFG::LazyNode) const
location.heap().kind() != World
location.heap().kind() != Heap
tier-up check injection
Phase 
 changed the IR.
./dfg/DFGTierUpCheckInjectionPhase.cpp
bool JSC::DFG::TierUpCheckInjectionPhase::run()
(null)
structure check hoisting
./dfg/DFGTypeCheckHoistingPhase.cpp
bool JSC::DFG::TypeCheckHoistingPhase::run()
unification
Weak
Strong
./dfg/DFGValueStrength.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::ValueStrength)
./dfg/DFGDoubleFormatState.h
JSC::DFG::DoubleFormatState JSC::DFG::mergeDoubleFormatStates(JSC::DFG::DoubleFormatState, JSC::DFG::DoubleFormatState)
ValueRep reduction
Phase 
 changed the IR.
./dfg/DFGValueRepReductionPhase.cpp
bool JSC::DFG::ValueRepReductionPhase::convertValueRepsToDouble()
auto JSC::DFG::ValueRepReductionPhase::convertValueRepsToDouble()::(anonymous class)::operator()(JSC::DFG::Node *) const
varargs forwarding
./dfg/DFGVarargsForwardingPhase.cpp
bool JSC::DFG::(anonymous namespace)::VarargsForwardingPhase::run()
void JSC::DFG::(anonymous namespace)::VarargsForwardingPhase::handleCandidate(JSC::DFG::BasicBlock *, unsigned int)
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGVarargsForwardingPhase.cpp:301:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
./dfg/DFGVariableEventStream.cpp
unsigned int JSC::DFG::VariableEventStream::reconstruct(JSC::CodeBlock *, JSC::CodeOrigin, JSC::DFG::MinifiedGraph &, unsigned int, Operands<JSC::ValueRecovery> &, Vector<JSC::DFG::UndefinedOperandSpan> *) const [style = JSC::DFG::VariableEventStream::ReconstructionStyle::Combined]
./dfg/DFGValueSource.h
JSC::DFG::ValueSourceKind JSC::DFG::dataFormatToValueSourceKind(JSC::DataFormat)
virtual register allocation
Phase 
 changed the IR.
./dfg/DFGVirtualRegisterAllocationPhase.cpp
bool JSC::DFG::VirtualRegisterAllocationPhase::run()
watchpoint collection
%s%#16llx: %s
%s%#16llx: failed-to-format
Asynchronous Disassembler
0x%x-0x%x
./ftl/FTLAbstractHeap.cpp
void JSC::FTL::AbstractHeap::changeParent(JSC::FTL::AbstractHeap *)
Heap does not have range: 
void JSC::FTL::AbstractHeap::badRangeError() const
jscRoot
typedArrayProperties
JSCellHeaderAndNamedProperties
ArrayBuffer_data
ArrayStorage_numValuesInVector
Butterfly_arrayBuffer
Butterfly_publicLength
Butterfly_vectorLength
CallFrame_callerFrame
ClassInfo_parentClass
DateInstance_internalNumber
DateInstance_data
DateInstanceData_gregorianDateTimeCachedForMS
DateInstanceData_gregorianDateTimeUTCCachedForMS
DateInstanceData_cachedGregorianDateTime_year
DateInstanceData_cachedGregorianDateTimeUTC_year
DateInstanceData_cachedGregorianDateTime_month
DateInstanceData_cachedGregorianDateTimeUTC_month
DateInstanceData_cachedGregorianDateTime_monthDay
DateInstanceData_cachedGregorianDateTimeUTC_monthDay
DateInstanceData_cachedGregorianDateTime_weekDay
DateInstanceData_cachedGregorianDateTimeUTC_weekDay
DateInstanceData_cachedGregorianDateTime_hour
DateInstanceData_cachedGregorianDateTimeUTC_hour
DateInstanceData_cachedGregorianDateTime_minute
DateInstanceData_cachedGregorianDateTimeUTC_minute
DateInstanceData_cachedGregorianDateTime_second
DateInstanceData_cachedGregorianDateTimeUTC_second
DateInstanceData_cachedGregorianDateTime_utcOffsetInMinute
DateInstanceData_cachedGregorianDateTimeUTC_utcOffsetInMinute
DirectArguments_callee
DirectArguments_length
DirectArguments_minCapacity
DirectArguments_mappedArguments
DirectArguments_modifiedArgumentsDescriptor
FunctionExecutable_rareData
FunctionExecutableRareData_asString
FunctionRareData_allocator
FunctionRareData_structure
FunctionRareData_prototype
FunctionRareData_allocationProfileWatchpointSet
FunctionRareData_executable
FunctionRareData_internalFunctionAllocationProfile_structure
FunctionRareData_boundFunctionStructure
FunctionRareData_allocationProfileClearingWatchpoint
GetterSetter_getter
GetterSetter_setter
JSArrayBufferView_length
JSArrayBufferView_mode
JSArrayBufferView_vector
JSBigInt_length
JSCell_cellState
JSCell_header
JSCell_indexingTypeAndMisc
JSCell_structureID
JSCell_typeInfoFlags
JSCell_typeInfoType
JSCell_usefulBytes
JSFunction_executableOrRareData
JSFunction_scope
JSGlobalObject_regExpGlobalData_cachedResult_lastRegExp
JSGlobalObject_regExpGlobalData_cachedResult_lastInput
JSGlobalObject_regExpGlobalData_cachedResult_result_start
JSGlobalObject_regExpGlobalData_cachedResult_result_end
JSGlobalObject_regExpGlobalData_cachedResult_reified
JSObject_butterfly
JSPropertyNameEnumerator_cachedInlineCapacity
JSPropertyNameEnumerator_cachedPropertyNamesVector
JSPropertyNameEnumerator_cachedStructureID
JSPropertyNameEnumerator_endGenericPropertyIndex
JSPropertyNameEnumerator_endStructurePropertyIndex
JSPropertyNameEnumerator_indexLength
JSPropertyNameEnumerator_flags
JSRopeString_flags
JSRopeString_length
JSRopeString_fiber0
JSRopeString_fiber1
JSRopeString_fiber2
JSScope_next
JSSymbolTableObject_symbolTable
NativeExecutable_asString
RegExpObject_regExpAndFlags
RegExpObject_lastIndex
ShadowChicken_Packet_callee
ShadowChicken_Packet_frame
ShadowChicken_Packet_callerFrame
ShadowChicken_Packet_thisValue
ShadowChicken_Packet_scope
ShadowChicken_Packet_codeBlock
ShadowChicken_Packet_callSiteIndex
ScopedArguments_overrodeThings
ScopedArguments_scope
ScopedArguments_storage
ScopedArguments_table
ScopedArguments_totalLength
ScopedArgumentsTable_arguments
ScopedArgumentsTable_length
StringImpl_data
StringImpl_hashAndFlags
StringImpl_length
Structure_classInfo
Structure_globalObject
Structure_indexingModeIncludingHistory
Structure_inlineCapacity
Structure_outOfLineTypeFlags
Structure_previousOrRareData
Structure_prototype
Structure_structureID
StructureRareData_cachedKeys
StructureRareData_cachedGetOwnPropertyNames
StructureRareData_cachedPropertyNameEnumeratorAndFlag
HashMapImpl_capacity
HashMapImpl_buffer
HashMapImpl_head
HashMapBucket_value
HashMapBucket_key
HashMapBucket_next
WeakMapImpl_capacity
WeakMapImpl_buffer
WeakMapBucket_value
WeakMapBucket_key
Symbol_symbolImpl
ArrayStorage_vector
CompleteSubspace_allocatorForSizeStep
DirectArguments_storage
JSLexicalEnvironment_variables
JSPropertyNameEnumerator_cachedPropertyNamesVectorContents
JSInternalFieldObjectImpl_internalFields
ScopedArguments_Storage_storage
WriteBarrierBuffer_bufferContents
characters8
characters16
indexedInt32Properties
indexedDoubleProperties
indexedContiguousProperties
scopedArgumentsTableArguments
singleCharacterStrings
structureTable
variables
HasOwnPropertyCache
properties
absolute
./ftl/FTLAbstractHeapRepository.cpp
JSC::FTL::AbstractHeapRepository::AbstractHeapRepository()
Abstract Heap Repository:
FTL rejecting 
 because it's too big.
 because it is marked as never FTL compile.
FTL rejecting node in 
 because of bad use kind: 
 in node:
FTL 
./ftl/FTLCompile.cpp
void JSC::FTL::compile(JSC::FTL::State &, Safepoint::Result &)
Unwind info for 
localsOffset = 
 for stack slot: 
Generated FTL DFG IR for 
    FTL B3/Air Disassembly:
 as 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/b3/B3Procedure.h
JSC::B3::PCToOriginMap JSC::B3::Procedure::releasePCToOriginMap()
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/LinkBuffer.h
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)10924, T = JSC::AssemblerLabel]
 => 
./ftl/FTLExitValue.cpp
JSC::DataFormat JSC::FTL::ExitValue::dataFormat() const
Argument(
Constant(
InJSStack:
InJSStackAsInt32:
InJSStackAsInt52:
InJSStackAsDouble:
Materialize(
void JSC::FTL::ExitValue::dumpInContext(WTF::PrintStream &, JSC::DumpContext *) const
Destroying FTL JIT code at 
./ftl/FTLJITCode.cpp
virtual JITCode::CodePtr<JSEntryPtrTag> JSC::FTL::JITCode::addressForCall(JSC::ArityCheckMode)
virtual void *JSC::FTL::JITCode::dataAddressAtOffset(size_t)
virtual unsigned int JSC::FTL::JITCode::offsetOf(void *)
virtual bool JSC::FTL::JITCode::contains(void *)
virtual JSC::RegisterSet JSC::FTL::JITCode::liveRegistersToPreserveAtExceptionHandlingCallSite(JSC::CodeBlock *, JSC::CallSiteIndex)
CodeRef
./ftl/FTLLazySlowPath.cpp
void JSC::FTL::LazySlowPath::generate(JSC::CodeBlock *)
Lazy slow path call stub
./ftl/FTLLink.cpp
void JSC::FTL::link(JSC::FTL::State &)
FTL B3 code for %s
FTL entrypoint thunk for %s with B3 generated code at %p
./ftl/FTLLocation.cpp
static JSC::FTL::Location JSC::FTL::Location::forValueRep(const JSC::B3::ValueRep &)
Unrecognized location: 
void JSC::FTL::Location::restoreInto(JSC::MacroAssembler &, char *, JSC::GPRReg, unsigned int) const
JSC::GPRReg JSC::FTL::Location::directGPR() const
Unprocessed
Indirect
void WTF::printInternal(WTF::PrintStream &, JSC::FTL::Location::Kind)
FTL OSR from 
    OSR failed because we don't have an entrypoint for 
; ours is for 
    Values at entry: 
Unknown flush format for argument during FTL osr entry: 
./ftl/FTLOSREntry.cpp
void *JSC::FTL::prepareOSREntry(JSC::VM &, JSC::CallFrame *, JSC::CodeBlock *, JSC::CodeBlock *, JSC::BytecodeIndex, unsigned int)
Mismatch between reconstructed values and the value on the stack for argument arg
    Value on stack: 
    Reconstructed value: 
    Entry will succeed, going to address 
Compiling OSR exit with exitID = 
./ftl/FTLOSRExitCompiler.cpp
void *JSC::FTL::operationCompileFTLOSRExit(JSC::CallFrame *, unsigned int)
    Owning block: 
    Origin: 
    Origin for exit profile: 
    Current call site index: 
    Exit is exception handler: 
    Is unwind handler: 
    Exit values: 
    Value reps: 
    Materializations:
./ftl/FTLOperations.cpp
void JSC::FTL::operationPopulateObjectInOSR(JSC::JSGlobalObject *, JSC::FTL::ExitTimeObjectMaterialization *, JSC::EncodedJSValue *, JSC::EncodedJSValue *)
JSC::JSCell *JSC::FTL::operationMaterializeObjectInOSR(JSC::JSGlobalObject *, JSC::FTL::ExitTimeObjectMaterialization *, JSC::EncodedJSValue *)
Bounds Check Eimination error found @ D@
: AssertInBounds(index D@
, bounds D@
void JSC::FTL::compileStub(JSC::VM &, unsigned int, JSC::FTL::JITCode *, JSC::FTL::OSRExit &, JSC::CodeBlock *)
FTL OSR exit #%u (D@%u, %s, %s) from %s, with operands = %s
void JSC::FTL::reboxAccordingToFormat(JSC::DataFormat, JSC::AssemblyHelpers &, JSC::GPRReg, JSC::GPRReg, JSC::GPRReg)
void JSC::FTL::compileRecovery(JSC::CCallHelpers &, const JSC::FTL::ExitValue &, const FixedVector<B3::ValueRep> &, char *, const HashMap<JSC::FTL::ExitTimeObjectMaterialization *, JSC::EncodedJSValue *> &)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
./ftl/FTLOutput.cpp
JSC::FTL::LValue JSC::FTL::Output::store(JSC::FTL::LValue, JSC::FTL::TypedPointer, JSC::FTL::Output::StoreType)
void JSC::FTL::Output::entrySwitch(const Vector<JSC::FTL::LBasicBlock> &)
<usedRegisters = 
, offset = 
, indirectOffset = 
, callTarget = 
, argumentRegisters = 
./ftl/FTLState.cpp
JSC::FTL::State::State(JSC::DFG::Graph &)
Generated 
 code for 
DFG     
b3            
Air               
asm                 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/jit/AssemblyHelpersSpoolers.h
void JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute(const JSC::RegisterAtOffset &) [Op = JSC::AssemblyHelpers::StoreRegSpooler, RegType = JSC::X86Registers::RegisterID]
void JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute(const JSC::RegisterAtOffset &) [Op = JSC::AssemblyHelpers::StoreRegSpooler, RegType = JSC::X86Registers::XMMRegisterID]
void JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute(const JSC::RegisterAtOffset &) [Op = JSC::AssemblyHelpers::LoadRegSpooler, RegType = JSC::X86Registers::XMMRegisterID]
void JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute(const JSC::RegisterAtOffset &) [Op = JSC::AssemblyHelpers::LoadRegSpooler, RegType = JSC::X86Registers::RegisterID]
FTL OSR exit generation thunk
FTL lazy slow path generation thunk
FTL slow path call thunk for %s
./heap/AlignedMemoryAllocator.cpp
void JSC::AlignedMemoryAllocator::registerDirectory(JSC::Heap &, JSC::BlockDirectory *)
void JSC::AlignedMemoryAllocator::registerSubspace(JSC::Subspace *)
./heap/BlockDirectory.cpp
void JSC::BlockDirectory::prepareForAllocation()
./heap/CodeBlockSet.cpp
bool JSC::CodeBlockSet::contains(const WTF::AbstractLocker &, void *)
void JSC::CodeBlockSet::add(JSC::CodeBlock *)
void JSC::CodeBlockSet::remove(JSC::CodeBlock *)
Eden
Full
./heap/CollectionScope.cpp
const char *JSC::collectionScopeName(JSC::CollectionScope)
./heap/CollectorPhase.cpp
bool JSC::worldShouldBeSuspended(JSC::CollectorPhase)
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/SinglyLinkedListWithTail.h
void WTF::SinglyLinkedListWithTail<JSC::BlockDirectory>::append(SetNextFunc &&, T *) [T = JSC::BlockDirectory, SetNextFunc = std::__mem_fn<void (JSC::BlockDirectory::*)(JSC::BlockDirectory *)>]
void WTF::SinglyLinkedListWithTail<JSC::Subspace>::append(SetNextFunc &&, T *) [T = JSC::Subspace, SetNextFunc = std::__mem_fn<void (JSC::Subspace::*)(JSC::Subspace *)>]
Live
Allocated
CanAllocateButNotEmpty
Destructible
Unswept
MarkingNotEmpty
MarkingRetired
./heap/CompleteSubspace.cpp
void *JSC::CompleteSubspace::allocateSlow(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
FATAL: attampting to allocate small object using large allocation.
Requested allocation size: 
void *JSC::CompleteSubspace::tryAllocateSlow(JSC::VM &, size_t, JSC::GCDeferralContext *)
void *JSC::CompleteSubspace::reallocatePreciseAllocationNonVirtual(JSC::VM &, JSC::HeapCell *, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
NeedsDestruction
DoesNotNeedDestruction
./heap/DestructionMode.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::DestructionMode)
FastMalloc
{head = 
, secret = 
, payloadEnd = 
, remaining = 
, originalSize = 
./heap/ConservativeRoots.cpp
void JSC::ConservativeRoots::genericAddSpan(void *, void *, MarkHook &) [MarkHook = JSC::DummyMarkHook]
void JSC::ConservativeRoots::genericAddSpan(void *, void *, MarkHook &) [MarkHook = JSC::CompositeMarkHook]
./heap/GCConductor.cpp
const char *JSC::gcConductorShortName(JSC::GCConductor)
None
Basic
Verbose
./heap/GCLogging.cpp
static const char *JSC::GCLogging::levelAsString(JSC::GCLogging::Level)
Primitive Gigacage Auxiliary
JSValue Gigacage Auxiliary
ImmutableButterfly Gigacage JSCellWithIndexingHeader
Variable Sized JSCell
JSDestructibleObject
Isolated JSArray Space
Isolated JSBigInt Space
Isolated JSCallee Space
Isolated ClonedArguments Space
Isolated CustomGetterSetter Space
Isolated DateInstance Space
Isolated DOMAttributeGetterSetter Space
Isolated Exception Space
Isolated ExecutableToCodeBlockEdge Space
Isolated JSFunction Space
Isolated GetterSetter Space
Isolated JSGlobalLexicalEnvironment Space
Isolated InternalFunction Space
Isolated JSProxy Space
Isolated NativeExecutable Space
Isolated NumberObject Space
Isolated JSNonFinalObject Space
Isolated JSPromise Space
Isolated JSPropertyNameEnumerator Space
Isolated PropertyTable Space
Isolated RegExp Space
Isolated RegExpObject Space
Isolated JSRopeString Space
Isolated ScopedArguments Space
Isolated SparseArrayValueMap Space
Isolated JSString Space
Isolated StringObject Space
Isolated StructureChain Space
Isolated StructureRareData Space
Isolated Structure Space
Isolated BrandedStructure Space
Isolated SymbolTable Space
Isolated CodeBlock Space
Isolated FunctionExecutable Space
Isolated ProgramExecutable Space
Isolated UnlinkedFunctionExecutable Space
[GC<
>: shutdown 
./heap/Heap.cpp
void JSC::Heap::lastChanceToFinalize()
...]
FATAL: Shared collector mark stack not empty! It has 
 elements.
FATAL: Shared mutator mark stack not empty! It has 
void JSC::Heap::assertMarkStacksEmpty()
void JSC::Heap::endMarking()
void JSC::Heap::deleteAllCodeBlocks(JSC::DeleteAllCodeEffort)
void JSC::Heap::deleteAllUnlinkedCodeBlocks(JSC::DeleteAllCodeEffort)
void JSC::Heap::addToRememberedSet(const JSC::JSCell *)
Full sweep: 
kb, 
void JSC::Heap::collect(JSC::Synchronousness, JSC::GCRequest)
void JSC::Heap::collectNow(JSC::Synchronousness, JSC::GCRequest)
bool JSC::Heap::shouldCollectInCollectorThread(const WTF::AbstractLocker &)
void JSC::Heap::collectInCollectorThread()
void JSC::Heap::checkConn(JSC::GCConductor)
bool JSC::Heap::runBeginPhase(JSC::GCConductor)
>: START 
Collection scope already set during GC: 
Fatal: SlotVisitor should think that GC should terminate before constraint solving, but it does not think this.
visitor.isEmpty(): 
visitor.collectorMarkStack().isEmpty(): 
visitor.mutatorMarkStack().isEmpty(): 
m_numberOfActiveParallelMarkers: 
m_sharedCollectorMarkStack->isEmpty(): 
m_sharedMutatorMarkStack->isEmpty(): 
visitor.didReachTermination(): 
bool JSC::Heap::runFixpointPhase(JSC::GCConductor)
kb (
) o=
ms (max 
)...]
bool JSC::Heap::runConcurrentPhase(JSC::GCConductor)
), cycle 
ms END]
GC END!
FATAL: world already stopped.
void JSC::Heap::stopThePeriphery(JSC::GCConductor)
Fatal: collector does not believe that the world is stopped.
void JSC::Heap::resumeThePeriphery()
bool JSC::Heap::stopTheMutator()
Fatal: hasAccess = 
, stopped = 
void JSC::Heap::resumeTheMutator()
Fatal: mutator has the conn.
void JSC::Heap::stopIfNecessarySlow()
bool JSC::Heap::stopIfNecessarySlow(unsigned int)
void JSC::Heap::acquireAccessSlow()
FATAL: Attempting to release access but the mutator does not have access.
void JSC::Heap::releaseAccessSlow()
FATAL: Attempting to release access but the mutator is stopped.
bool JSC::Heap::relinquishConn(unsigned int)
bool JSC::Heap::handleNeedFinalize(unsigned int)
>: finalize 
Heap::Ticket JSC::Heap::requestCollection(JSC::GCRequest)
FullCollection, 
EdenCollection, 
void JSC::Heap::didFinishCollection()
Conservative Scan
Misc Small Roots
>: starting 
JSC DEBUG Continuous GC
void JSC::Heap::preventCollection()
void JSC::Heap::verifyGC()
Isolated JSAPIGlobalObject Space
Isolated JSAPIValueWrapper Space
Isolated JSArrayBuffer Space
Isolated JSArrayIterator Space
Isolated JSAsyncGenerator Space
Isolated JSBigInt64Array Space
Isolated BigIntObject Space
Isolated JSBigUint64Array Space
Isolated BooleanObject Space
Isolated JSBoundFunction Space
Isolated JSCallbackConstructor Space
Isolated JSCallbackObject<JSGlobalObject> Space
Isolated JSCallbackFunction Space
Isolated JSCallbackObject<JSNonFinalObject> Space
Isolated JSCustomGetterFunction Space
Isolated JSCustomSetterFunction Space
Isolated JSDataView Space
Isolated DebuggerScope Space
Isolated ErrorInstance Space
Isolated JSFloat32Array Space
Isolated JSFloat64Array Space
Isolated FunctionRareData Space
Isolated JSGenerator Space
Isolated JSGlobalObject Space
Isolated Inspector::JSInjectedScriptHost Space
Isolated JSInt8Array Space
Isolated JSInt16Array Space
Isolated JSInt32Array Space
Isolated Inspector::JSJavaScriptCallFrame Space
Isolated JSModuleRecord Space
Isolated JSMap::BucketType Space
Isolated JSMapIterator Space
Isolated JSMap Space
Isolated JSModuleNamespaceObject Space
Isolated JSNativeStdFunction Space
Isolated ProxyObject Space
Isolated ProxyRevoke Space
Isolated ScopedArgumentsTable Space
Isolated JSScriptFetchParameters Space
Isolated JSScriptFetcher Space
Isolated JSSet::BucketType Space
Isolated JSSetIterator Space
Isolated JSSet Space
Isolated ShadowRealmObject Space
Isolated StrictEvalActivation Space
Isolated JSStringIterator Space
Isolated JSSourceCode Space
Isolated Symbol Space
Isolated SymbolObject Space
Isolated JSTemplateObjectDescriptor Space
Isolated TemporalCalendar Space
Isolated TemporalDuration Space
Isolated TemporalInstant Space
Isolated TemporalPlainTime Space
Isolated TemporalTimeZone Space
Isolated JSUint8Array Space
Isolated JSUint8ClampedArray Space
Isolated JSUint16Array Space
Isolated JSUint32Array Space
Isolated UnlinkedEvalCodeBlock Space
Isolated UnlinkedFunctionCodeBlock Space
Isolated UnlinkedModuleProgramCodeBlock Space
Isolated UnlinkedProgramCodeBlock Space
Isolated JSWeakMap Space
Isolated JSWeakSet Space
Isolated JSWeakObjectRef Space
Isolated JSWithScope Space
Isolated JSFinalizationRegistry Space
Isolated JSCallbackObject<JSAPIWrapperObject> Space
Isolated ObjCCallbackFunction Space
Isolated IntlCollator Space
Isolated IntlDateTimeFormat Space
Isolated IntlDisplayNames Space
Isolated IntlListFormat Space
Isolated IntlLocale Space
Isolated IntlNumberFormat Space
Isolated IntlPluralRules Space
Isolated IntlRelativeTimeFormat Space
Isolated IntlSegmentIterator Space
Isolated IntlSegmenter Space
Isolated IntlSegments Space
Isolated JSToWasmICCallee Space
Isolated JSWebAssemblyException Space
Isolated WebAssemblyFunction Space
Isolated JSWebAssemblyGlobal Space
Isolated JSWebAssemblyInstance Space
Isolated JSWebAssemblyMemory Space
Isolated JSWebAssemblyModule Space
Isolated WebAssemblyModuleRecord Space
Isolated JSWebAssemblyTable Space
Isolated JSWebAssemblyTag Space
Isolated WebAssemblyWrapperFunction Space
Isolated EvalExecutable Space
Isolated ModuleProgramExecutable Space
Primitive
JSValue
JSC Heap Collector Thread
./heap/MarkedBlockInlines.h
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc]
: marks not empty!
Block lock is held: 
Marking version of block: 
Marking version of heap: 
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = false, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::HasNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc]
auto JSC::Heap::lastChanceToFinalize()::(anonymous class)::operator()(const WTF::AbstractLocker &) const
InferredValue clean-up during GC
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/WeakMapImplInlines.h
void JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::finalizeUnconditionally(JSC::VM &) [WeakMapBucketType = JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>]
void JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::finalizeUnconditionally(JSC::VM &) [WeakMapBucketType = JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>]
FATAL: Visitor 
 is not empty!
[unknown]
auto JSC::Heap::runBeginPhase(JSC::GCConductor)::(anonymous class)::operator()() const
void WTF::Deque<JSC::GCRequest, 0>::removeFirst() [T = JSC::GCRequest, inlineCapacity = 0]
auto JSC::Heap::collectInMutatorThread()::(anonymous class)::operator()(JSC::CurrentThreadState &) const
./heap/AbstractSlotVisitorInlines.h
Sampling Profiler data:
JIT Worklists:
GC Verifier: ERROR cell 
 was not marked
auto JSC::Heap::verifyGC()::(anonymous class)::operator()(JSC::HeapCell *) const
JSCell
JSCellWithIndexingHeader
Auxiliary
./heap/HeapCell.cpp
void WTF::printInternal(WTF::PrintStream &, HeapCell::Kind)
Cell %p is a root but no root marking reason was supplied
<root>
0,0,0,0,0,"0x0","0x0"
,"nodeClassNames":[
Failed to find snapshot node for cell %p
Inspector
GCDebugging
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::DefaultDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::DefaultDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::DefaultDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::DefaultDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = false, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::HasNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::DefaultDestroyFunc]
Heap Helper Thread
Failed to find node for from-edge cell %p
Failed to find node for to-edge cell %p
./heap/IsoAlignedMemoryAllocator.cpp
virtual void *JSC::IsoAlignedMemoryAllocator::tryAllocateAlignedMemory(size_t, size_t)
virtual void JSC::IsoAlignedMemoryAllocator::freeAlignedMemory(void *)
Iso(
virtual void *JSC::IsoAlignedMemoryAllocator::tryReallocateMemory(void *, size_t)
./heap/IsoCellSet.cpp
void JSC::IsoCellSet::sweepToFreeList(MarkedBlock::Handle *)
FATAL: for block index 
Blocks with bits says: 
Bits says: 
./heap/JITStubRoutineSet.cpp
void JSC::JITStubRoutineSet::add(JSC::GCAwareJITStubRoutine *)
FATAL: 
->~LocalAllocator has non-empty free-list.
->~LocalAllocator has non-null current block.
->~LocalAllocator has non-null last active block.
./heap/LocalAllocator.cpp
JSC::LocalAllocator::~LocalAllocator()
void *JSC::LocalAllocator::allocateSlowCase(JSC::Heap &, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
void *JSC::LocalAllocator::tryAllocateWithoutCollecting()
void *JSC::LocalAllocator::allocateIn(MarkedBlock::Handle *)
./heap/MachineStackMarker.cpp
bool JSC::MachineThreads::tryCopyOtherThreadStacks(const WTF::AbstractLocker &, void *, size_t, size_t *, WTF::Thread &)
JavaScript garbage collection encountered an invalid thread (err 0x%x): Thread [%d/%d: %p].
./heap/AllocatingScope.h
JSC::AllocatingScope::AllocatingScope(JSC::Heap &)
JSC::AllocatingScope::~AllocatingScope()
void JSC::copyMemory(void *, const void *, size_t)
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::IsoHeapCellType]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::IsoHeapCellType]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::IsoHeapCellType]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::IsoHeapCellType]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = false, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::HasNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::IsoHeapCellType]
auto JSC::LocalAllocator::tryAllocateIn(MarkedBlock::Handle *)::(anonymous class)::operator()() const
./heap/MarkStack.cpp
void JSC::MarkStackArray::transferTo(JSC::MarkStackArray &)
size_t JSC::MarkStackArray::transferTo(JSC::MarkStackArray &, size_t)
Mark Stack Merging
./heap/MarkedBlock.cpp
void JSC::MarkedBlock::Handle::unsweepWithNoNewlyAllocated()
void JSC::MarkedBlock::Handle::didAddToDirectory(JSC::BlockDirectory *, unsigned int)
->sweep: block is free-listed.
void JSC::MarkedBlock::Handle::sweep(JSC::FreeList *)
->sweep: block is allocated.
./heap/MarkedSpace.cpp
void JSC::MarkedSpace::sweepPreciseAllocations()
void JSC::MarkedSpace::prepareForConservativeScan()
./heap/MarkingConstraintSolver.cpp
void JSC::MarkingConstraintSolver::execute(JSC::MarkingConstraintSolver::SchedulerPreference, ScopedLambda<std::optional<unsigned int> ()>)
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = (lambda at ./heap/MarkedBlock.cpp:439:260)]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = (lambda at ./heap/MarkedBlock.cpp:442:254)]
Eden
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = false, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::HasNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = (lambda at ./heap/MarkedBlock.cpp:465:217)]
Block size: 
Footer size: 
    Marked block payload size: 
    Next size class as a double: 
    Next size class as bytes: 
Vector<size_t> JSC::(anonymous namespace)::sizeClasses()
    Size class: 
    Possibly better size class: 
    Original wastage: 
, new wastage: 
    Choosing size class: 
JSC Heap MarkedSpace size class dump: 
Adding JSC MarkedSpace size class: 
auto JSC::(anonymous namespace)::sizeClasses()::(anonymous class)::operator()(size_t) const
auto JSC::MarkedSpace::initializeSizeClassForStepSize()::(anonymous class)::operator()()::(anonymous class)::operator()(size_t) const
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/SinglyLinkedListWithTail.h
void WTF::SinglyLinkedListWithTail<JSC::BlockDirectory>::append(SetNextFunc &&, T *) [T = JSC::BlockDirectory, SetNextFunc = std::__mem_fn<void (JSC::BlockDirectory::*)(JSC::BlockDirectory *)>]
./heap/PreciseAllocation.cpp
static JSC::PreciseAllocation *JSC::PreciseAllocation::createForLowerTier(JSC::Heap &, size_t, JSC::Subspace *, uint8_t)
None
ConservativeScan
ExecutableToCodeBlockEdges
ExternalRememberedSet
StrongReferences
ProtectedValues
MarkedJSValueRefArray
MarkListSet
VMExceptions
StrongHandles
Debugger
JITStubRoutines
WeakMapSpace
WeakSets
Output
JITWorkList
CodeBlocks
DOMGCOutput
./heap/SlotVisitor.cpp
void JSC::SlotVisitor::reset()
FATAL: attempting to drain when not in parallel mode.
void JSC::SlotVisitor::drain(WTF::MonotonicTime)
size_t JSC::SlotVisitor::performIncrementOfDraining(size_t)
SlotVisitor::SharedDrainResult JSC::SlotVisitor::drainFromShared(JSC::SlotVisitor::SharedDrainMode, WTF::MonotonicTime)
FATAL: Attempting to donate when not in parallel mode.
void JSC::SlotVisitor::donate()
GC visit race: 
Collector: [
], Mutator: [
virtual void JSC::SlotVisitor::addParallelConstraintTask(RefPtr<SharedTask<void (JSC::AbstractSlotVisitor &)>>)
virtual void JSC::SlotVisitor::addParallelConstraintTask(RefPtr<SharedTask<void (JSC::SlotVisitor &)>>)
./heap/SpaceTimeMutatorScheduler.cpp
virtual void JSC::SpaceTimeMutatorScheduler::beginCollection()
virtual void JSC::SpaceTimeMutatorScheduler::didStop()
virtual void JSC::SpaceTimeMutatorScheduler::willResume()
virtual WTF::MonotonicTime JSC::SpaceTimeMutatorScheduler::timeToStop()
virtual WTF::MonotonicTime JSC::SpaceTimeMutatorScheduler::timeToResume()
%.0lf
%.3lf
./heap/StochasticSpaceTimeMutatorScheduler.cpp
virtual void JSC::StochasticSpaceTimeMutatorScheduler::beginCollection()
kb h=
virtual void JSC::StochasticSpaceTimeMutatorScheduler::didStop()
virtual void JSC::StochasticSpaceTimeMutatorScheduler::willResume()
virtual WTF::MonotonicTime JSC::StochasticSpaceTimeMutatorScheduler::timeToStop()
virtual WTF::MonotonicTime JSC::StochasticSpaceTimeMutatorScheduler::timeToResume()
GC scan found corrupt object: structureID is zero!
GC scan found object in bad state: structureID is nuked!
GC type: 
Object at: 
Structure ID: 
 (0x
Structure ID table size: 
Object contents:
0x%016llx
Is marked: 
Is newly allocated: 
Block: 
Is marked raw: 
Marking version: 
Heap marking version: 
Is newly allocated raw: 
Newly allocated version: 
Heap newly allocated version: 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
void JSC::StructureIDTable::validate(JSC::StructureID)
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
./heap/SynchronousStopTheWorldMutatorScheduler.cpp
virtual void JSC::SynchronousStopTheWorldMutatorScheduler::beginCollection()
virtual void JSC::SynchronousStopTheWorldMutatorScheduler::endCollection()
./heap/VerifierSlotVisitor.cpp
virtual void JSC::VerifierSlotVisitor::addParallelConstraintTask(RefPtr<SharedTask<void (JSC::SlotVisitor &)>>)
virtual void JSC::VerifierSlotVisitor::didFindOpaqueRoot(void *)
void JSC::VerifierSlotVisitor::drain()
virtual void JSC::VerifierSlotVisitor::dump(WTF::PrintStream &) const
Verifier collector stack: 
was NOT
In the real GC, cell 
 marked.
Marker data is not available for cell 
In the verifier GC, cell 
 was visited
void JSC::VerifierSlotVisitor::dumpMarkerData(JSC::HeapCell *)
In the real GC, opaque root 
 added to the heap's opaque roots.
Marker data is not available for opaque root 
In the verifier GC, opaque root 
 was added
 via cell 
 at:
 via opaque root 
 from scan of 
 roots at:
bool JSC::VerifierSlotVisitor::testAndSetMarked(JSC::MarkedBlock &, JSC::HeapCell *)
void JSC::VerifierSlotVisitor::visitChildren(const JSC::JSCell *)
JSC::AbstractSlotVisitor::ReferrerContext::ReferrerContext(JSC::AbstractSlotVisitor &, AbstractSlotVisitor::OpaqueRootTag)
console
<message collected>
/\*[#@][ 
]sourceMappingURL=[ 
]*([^\s'"]*)[ 
]*\*/
InjectedScript
execute
awaitPromise
callFunctionOn
evaluateOnCallFrame
getFunctionDetails
Internal error
functionDetails
getPreview
getProperties
getDisplayableProperties
getInternalProperties
getCollectionEntries
saveResult
wrapCallFrames
wrapObject
wrapJSONString
wrapTable
previewValue
setEventValue
clearEventValue
setExceptionValue
clearExceptionValue
findObjectById
inspectObject
releaseObject
releaseObjectGroup
createCommandLineAPIObject
Object has too long reference chain (must not be longer than 
Internal error: result value is empty
Internal error: result is not an Object
Internal error: result is not a pair of value and wasThrown flag
wasThrown
savedResultIndex
injectedScriptId
Error when creating injected script: %s (%d:%d)
./inspector/InjectedScriptManager.cpp
Inspector::InjectedScript Inspector::InjectedScriptManager::injectedScriptFor(JSC::JSGlobalObject *)
Missing injected script object
truncated
topCallFrameIsBoundary
parentStackTrace
line
column
repeatCount
networkRequestId
parameters
stackTrace
lineNumber
lineContent
./inspector/ContentSearchUtilities.cpp
WTF::String Inspector::ContentSearchUtilities::findMagicComment(const WTF::String &, const WTF::String &)
callFrames
source
level
text
Exception while making a call.
hasInjectedModule
Error when calling 'hasInjectedModule' for '%s': %s (%d:%d)
./inspector/InjectedScriptModule.cpp
void Inspector::InjectedScriptModule::ensureInjected(Inspector::InjectedScriptManager *, const Inspector::InjectedScript &)
injectModule
Error when calling 'injectModule' for '%s': %s (%d:%d)
Message must be in JSON format
Message must be a JSONified object
'id' property was not found
The type of 'id' property must be integer
method
'method' property wasn't found
The type of 'method' property must be string
The 'method' property was formatted incorrectly. It should be 'Domain.method'
' domain was not found
data
error
Integer
Value
Animation
params
enable
disable
requestEffectTarget
resolveAnimation
startTracking
stopTracking
'Animation.
' was not found
animationId
Some arguments of method 'Animation.requestEffectTarget' can't be processed
nodeId
objectGroup
Some arguments of method 'Animation.resolveAnimation' can't be processed
object
ApplicationCache
'ApplicationCache.
frameIds
frameId
Some arguments of method 'ApplicationCache.getManifestForFrame' can't be processed
manifestURL
Some arguments of method 'ApplicationCache.getApplicationCacheForFrame' can't be processed
applicationCache
Audit
'Audit.
contextId
Some arguments of method 'Audit.setup' can't be processed
Some arguments of method 'Audit.run' can't be processed
Browser
'Browser.
CPUProfiler
'CPUProfiler.
getMatchedStylesForNode
getInlineStylesForNode
getComputedStyleForNode
getFontDataForNode
getAllStyleSheets
getStyleSheet
getStyleSheetText
setStyleSheetText
setStyleText
setRuleSelector
createStyleSheet
addRule
getSupportedCSSProperties
getSupportedSystemFontFamilyNames
forcePseudoState
setLayoutContextTypeChangedMode
'CSS.
includePseudo
includeInherited
Some arguments of method 'CSS.getMatchedStylesForNode' can't be processed
matchedCSSRules
pseudoElements
inherited
Some arguments of method 'CSS.getInlineStylesForNode' can't be processed
inlineStyle
attributesStyle
Some arguments of method 'CSS.getComputedStyleForNode' can't be processed
computedStyle
Some arguments of method 'CSS.getFontDataForNode' can't be processed
primaryFont
headers
styleSheetId
Some arguments of method 'CSS.getStyleSheet' can't be processed
styleSheet
Some arguments of method 'CSS.getStyleSheetText' can't be processed
text
Some arguments of method 'CSS.setStyleSheetText' can't be processed
styleId
Some arguments of method 'CSS.setStyleText' can't be processed
style
ruleId
selector
Some arguments of method 'CSS.setRuleSelector' can't be processed
rule
Some arguments of method 'CSS.createStyleSheet' can't be processed
Some arguments of method 'CSS.addRule' can't be processed
cssProperties
fontFamilyNames
forcedPseudoClasses
Some arguments of method 'CSS.forcePseudoState' can't be processed
Some arguments of method 'CSS.setLayoutContextTypeChangedMode' can't be processed
Unknown mode: 
Canvas
requestNode
requestContent
requestClientNodes
resolveContext
setRecordingAutoCaptureFrameCount
startRecording
stopRecording
requestShaderSource
updateShader
setShaderProgramDisabled
setShaderProgramHighlighted
'Canvas.
canvasId
Some arguments of method 'Canvas.requestNode' can't be processed
Some arguments of method 'Canvas.requestContent' can't be processed
content
Some arguments of method 'Canvas.requestClientNodes' can't be processed
clientNodeIds
Some arguments of method 'Canvas.resolveContext' can't be processed
Some arguments of method 'Canvas.setRecordingAutoCaptureFrameCount' can't be processed
frameCount
memoryLimit
Some arguments of method 'Canvas.startRecording' can't be processed
Some arguments of method 'Canvas.stopRecording' can't be processed
programId
shaderType
Some arguments of method 'Canvas.requestShaderSource' can't be processed
Unknown shaderType: 
Some arguments of method 'Canvas.updateShader' can't be processed
disabled
Some arguments of method 'Canvas.setShaderProgramDisabled' can't be processed
highlighted
Some arguments of method 'Canvas.setShaderProgramHighlighted' can't be processed
Console
'Console.
channels
Some arguments of method 'Console.setLoggingChannelLevel' can't be processed
Unknown source: 
Unknown level: 
getDocument
requestChildNodes
querySelector
querySelectorAll
setNodeName
setNodeValue
removeNode
setAttributeValue
setAttributesAsText
removeAttribute
getSupportedEventNames
getDataBindingsForNode
getAssociatedDataForNode
getEventListenersForNode
setEventListenerDisabled
setBreakpointForEventListener
removeBreakpointForEventListener
getAccessibilityPropertiesForNode
getOuterHTML
setOuterHTML
insertAdjacentHTML
performSearch
getSearchResults
discardSearchResults
setInspectModeEnabled
highlightRect
highlightQuad
highlightSelector
highlightNode
highlightNodeList
hideHighlight
highlightFrame
showGridOverlay
hideGridOverlay
pushNodeByPathToFrontend
resolveNode
getAttributes
moveTo
undo
redo
markUndoableState
focus
setInspectedNode
setAllowEditingUserAgentShadowTrees
'DOM.
root
depth
Some arguments of method 'DOM.requestChildNodes' can't be processed
Some arguments of method 'DOM.querySelector' can't be processed
Some arguments of method 'DOM.querySelectorAll' can't be processed
nodeIds
Some arguments of method 'DOM.setNodeName' can't be processed
Some arguments of method 'DOM.setNodeValue' can't be processed
Some arguments of method 'DOM.removeNode' can't be processed
Some arguments of method 'DOM.setAttributeValue' can't be processed
Some arguments of method 'DOM.setAttributesAsText' can't be processed
Some arguments of method 'DOM.removeAttribute' can't be processed
eventNames
Some arguments of method 'DOM.getDataBindingsForNode' can't be processed
dataBindings
Some arguments of method 'DOM.getAssociatedDataForNode' can't be processed
associatedData
Some arguments of method 'DOM.getEventListenersForNode' can't be processed
listeners
eventListenerId
Some arguments of method 'DOM.setEventListenerDisabled' can't be processed
options
Some arguments of method 'DOM.setBreakpointForEventListener' can't be processed
Some arguments of method 'DOM.removeBreakpointForEventListener' can't be processed
Some arguments of method 'DOM.getAccessibilityPropertiesForNode' can't be processed
Some arguments of method 'DOM.getOuterHTML' can't be processed
outerHTML
Some arguments of method 'DOM.setOuterHTML' can't be processed
position
html
Some arguments of method 'DOM.insertAdjacentHTML' can't be processed
query
caseSensitive
Some arguments of method 'DOM.performSearch' can't be processed
searchId
resultCount
fromIndex
toIndex
Some arguments of method 'DOM.getSearchResults' can't be processed
Some arguments of method 'DOM.discardSearchResults' can't be processed
objectId
Some arguments of method 'DOM.requestNode' can't be processed
enabled
highlightConfig
Some arguments of method 'DOM.setInspectModeEnabled' can't be processed
color
outlineColor
usePageCoordinates
Some arguments of method 'DOM.highlightRect' can't be processed
quad
Some arguments of method 'DOM.highlightQuad' can't be processed
selectorString
Some arguments of method 'DOM.highlightSelector' can't be processed
Some arguments of method 'DOM.highlightNode' can't be processed
Some arguments of method 'DOM.highlightNodeList' can't be processed
contentColor
contentOutlineColor
Some arguments of method 'DOM.highlightFrame' can't be processed
gridColor
showLineNames
showLineNumbers
showExtendedGridLines
showTrackSizes
showAreaNames
Some arguments of method 'DOM.showGridOverlay' can't be processed
Some arguments of method 'DOM.hideGridOverlay' can't be processed
path
Some arguments of method 'DOM.pushNodeByPathToFrontend' can't be processed
Some arguments of method 'DOM.resolveNode' can't be processed
Some arguments of method 'DOM.getAttributes' can't be processed
targetNodeId
insertBeforeNodeId
Some arguments of method 'DOM.moveTo' can't be processed
Some arguments of method 'DOM.focus' can't be processed
Some arguments of method 'DOM.setInspectedNode' can't be processed
allow
Some arguments of method 'DOM.setAllowEditingUserAgentShadowTrees' can't be processed
DOMDebugger
setDOMBreakpoint
removeDOMBreakpoint
setEventBreakpoint
removeEventBreakpoint
setURLBreakpoint
removeURLBreakpoint
'DOMDebugger.
type
Some arguments of method 'DOMDebugger.setDOMBreakpoint' can't be processed
Unknown type: 
Some arguments of method 'DOMDebugger.removeDOMBreakpoint' can't be processed
breakpointType
eventName
Some arguments of method 'DOMDebugger.setEventBreakpoint' can't be processed
Unknown breakpointType: 
Some arguments of method 'DOMDebugger.removeEventBreakpoint' can't be processed
isRegex
Some arguments of method 'DOMDebugger.setURLBreakpoint' can't be processed
Some arguments of method 'DOMDebugger.removeURLBreakpoint' can't be processed
DOMStorage
getDOMStorageItems
setDOMStorageItem
removeDOMStorageItem
clearDOMStorageItems
'DOMStorage.
storageId
Some arguments of method 'DOMStorage.getDOMStorageItems' can't be processed
Some arguments of method 'DOMStorage.setDOMStorageItem' can't be processed
Some arguments of method 'DOMStorage.removeDOMStorageItem' can't be processed
Some arguments of method 'DOMStorage.clearDOMStorageItems' can't be processed
Database
'Database.
databaseId
Some arguments of method 'Database.getDatabaseTableNames' can't be processed
tableNames
columnNames
sqlError
Some arguments of method 'Database.executeSQL' can't be processed
Debugger
setAsyncStackTraceDepth
setBreakpointsActive
setBreakpointByUrl
setBreakpoint
removeBreakpoint
continueUntilNextRunLoop
continueToLocation
stepNext
stepOver
stepInto
stepOut
pause
resume
searchInContent
getScriptSource
setPauseOnDebuggerStatements
setPauseOnExceptions
setPauseOnAssertions
setPauseOnMicrotasks
setPauseForInternalScripts
setShouldBlackboxURL
'Debugger.
Some arguments of method 'Debugger.setAsyncStackTraceDepth' can't be processed
active
Some arguments of method 'Debugger.setBreakpointsActive' can't be processed
lineNumber
urlRegex
columnNumber
Some arguments of method 'Debugger.setBreakpointByUrl' can't be processed
breakpointId
locations
location
Some arguments of method 'Debugger.setBreakpoint' can't be processed
actualLocation
Some arguments of method 'Debugger.removeBreakpoint' can't be processed
Some arguments of method 'Debugger.continueToLocation' can't be processed
scriptId
Some arguments of method 'Debugger.searchInContent' can't be processed
Some arguments of method 'Debugger.getScriptSource' can't be processed
scriptSource
functionId
Some arguments of method 'Debugger.getFunctionDetails' can't be processed
details
Some arguments of method 'Debugger.setPauseOnDebuggerStatements' can't be processed
state
Some arguments of method 'Debugger.setPauseOnExceptions' can't be processed
Some arguments of method 'Debugger.setPauseOnAssertions' can't be processed
Some arguments of method 'Debugger.setPauseOnMicrotasks' can't be processed
shouldPause
Some arguments of method 'Debugger.setPauseForInternalScripts' can't be processed
callFrameId
expression
includeCommandLineAPI
doNotPauseOnExceptionsAndMuteConsole
returnByValue
generatePreview
emulateUserGesture
Some arguments of method 'Debugger.evaluateOnCallFrame' can't be processed
shouldBlackbox
Some arguments of method 'Debugger.setShouldBlackboxURL' can't be processed
Heap
snapshot
getRemoteObject
'Heap.
timestamp
snapshotData
heapObjectId
Some arguments of method 'Heap.getPreview' can't be processed
string
preview
Some arguments of method 'Heap.getRemoteObject' can't be processed
IndexedDB
requestDatabaseNames
requestDatabase
requestData
clearObjectStore
'IndexedDB.
databaseNames
securityOrigin
Some arguments of method 'IndexedDB.requestDatabaseNames' can't be processed
databaseWithObjectStores
databaseName
Some arguments of method 'IndexedDB.requestDatabase' can't be processed
objectStoreDataEntries
hasMore
objectStoreName
indexName
skipCount
pageSize
keyRange
Some arguments of method 'IndexedDB.requestData' can't be processed
Some arguments of method 'IndexedDB.clearObjectStore' can't be processed
Inspector
'Inspector.
LayerTree
'LayerTree.
Some arguments of method 'LayerTree.layersForNode' can't be processed
layers
layerId
Some arguments of method 'LayerTree.reasonsForCompositingLayer' can't be processed
compositingReasons
Memory
'Memory.
Network
setExtraHTTPHeaders
getResponseBody
setResourceCachingDisabled
loadResource
getSerializedCertificate
resolveWebSocket
setInterceptionEnabled
addInterception
removeInterception
interceptContinue
interceptWithRequest
interceptWithResponse
interceptRequestWithResponse
interceptRequestWithError
'Network.
Some arguments of method 'Network.setExtraHTTPHeaders' can't be processed
requestId
Some arguments of method 'Network.getResponseBody' can't be processed
body
base64Encoded
Some arguments of method 'Network.setResourceCachingDisabled' can't be processed
mimeType
status
Some arguments of method 'Network.loadResource' can't be processed
Some arguments of method 'Network.getSerializedCertificate' can't be processed
serializedCertificate
Some arguments of method 'Network.resolveWebSocket' can't be processed
Some arguments of method 'Network.setInterceptionEnabled' can't be processed
stage
Some arguments of method 'Network.addInterception' can't be processed
Unknown stage: 
Some arguments of method 'Network.removeInterception' can't be processed
Some arguments of method 'Network.interceptContinue' can't be processed
postData
Some arguments of method 'Network.interceptWithRequest' can't be processed
statusText
Some arguments of method 'Network.interceptWithResponse' can't be processed
Some arguments of method 'Network.interceptRequestWithResponse' can't be processed
Some arguments of method 'Network.interceptRequestWithError' can't be processed
Unknown errorType: 
Page
reload
navigate
overrideUserAgent
overrideSetting
getCookies
setCookie
deleteCookie
getResourceTree
getResourceContent
setBootstrapScript
searchInResource
searchInResources
setShowPaintRects
setEmulatedMedia
setForcedAppearance
snapshotNode
snapshotRect
archive
'Page.
ignoreCache
revalidateAllResources
Some arguments of method 'Page.reload' can't be processed
Some arguments of method 'Page.navigate' can't be processed
Some arguments of method 'Page.overrideUserAgent' can't be processed
setting
Some arguments of method 'Page.overrideSetting' can't be processed
Unknown setting: 
cookies
cookie
Some arguments of method 'Page.setCookie' can't be processed
cookieName
Some arguments of method 'Page.deleteCookie' can't be processed
frameTree
Some arguments of method 'Page.getResourceContent' can't be processed
Some arguments of method 'Page.setBootstrapScript' can't be processed
Some arguments of method 'Page.searchInResource' can't be processed
Some arguments of method 'Page.searchInResources' can't be processed
Some arguments of method 'Page.setShowPaintRects' can't be processed
media
Some arguments of method 'Page.setEmulatedMedia' can't be processed
appearance
Some arguments of method 'Page.setForcedAppearance' can't be processed
Some arguments of method 'Page.snapshotNode' can't be processed
dataURL
coordinateSystem
Some arguments of method 'Page.snapshotRect' can't be processed
Unknown coordinateSystem: 
Runtime
parse
evaluate
setSavedResultAlias
getRuntimeTypesForVariablesAtOffsets
enableTypeProfiler
disableTypeProfiler
enableControlFlowProfiler
disableControlFlowProfiler
getBasicBlocks
'Runtime.
Some arguments of method 'Runtime.parse' can't be processed
range
Some arguments of method 'Runtime.evaluate' can't be processed
promiseObjectId
Some arguments of method 'Runtime.awaitPromise' can't be processed
functionDeclaration
Some arguments of method 'Runtime.callFunctionOn' can't be processed
Some arguments of method 'Runtime.getPreview' can't be processed
ownProperties
fetchStart
fetchCount
Some arguments of method 'Runtime.getProperties' can't be processed
internalProperties
Some arguments of method 'Runtime.getDisplayableProperties' can't be processed
Some arguments of method 'Runtime.getCollectionEntries' can't be processed
Some arguments of method 'Runtime.saveResult' can't be processed
alias
Some arguments of method 'Runtime.setSavedResultAlias' can't be processed
Some arguments of method 'Runtime.releaseObject' can't be processed
Some arguments of method 'Runtime.releaseObjectGroup' can't be processed
Some arguments of method 'Runtime.getRuntimeTypesForVariablesAtOffsets' can't be processed
types
sourceID
Some arguments of method 'Runtime.getBasicBlocks' can't be processed
basicBlocks
ScriptProfiler
'ScriptProfiler.
includeSamples
Some arguments of method 'ScriptProfiler.startTracking' can't be processed
ServiceWorker
'ServiceWorker.
info
Target
'Target.
pauseOnStart
Some arguments of method 'Target.setPauseOnStart' can't be processed
targetId
Some arguments of method 'Target.resume' can't be processed
Some arguments of method 'Target.sendMessageToTarget' can't be processed
Timeline
stop
setAutoCaptureEnabled
setInstruments
'Timeline.
maxCallStackDepth
Some arguments of method 'Timeline.start' can't be processed
Some arguments of method 'Timeline.setAutoCaptureEnabled' can't be processed
instruments
Some arguments of method 'Timeline.setInstruments' can't be processed
Worker
'Worker.
workerId
Some arguments of method 'Worker.initialized' can't be processed
Some arguments of method 'Worker.sendMessageToWorker' can't be processed
Animation.animationCreated
animation
Animation.nameChanged
Animation.effectChanged
effect
Animation.targetChanged
Animation.animationDestroyed
Animation.trackingStart
Animation.trackingUpdate
event
Animation.trackingComplete
ApplicationCache.applicationCacheStatusUpdated
ApplicationCache.networkStateUpdated
isNowOnline
Browser.extensionsEnabled
extensions
Browser.extensionsDisabled
extensionIds
CPUProfiler.trackingStart
CPUProfiler.trackingUpdate
CPUProfiler.trackingComplete
CSS.mediaQueryResultChanged
CSS.styleSheetChanged
CSS.styleSheetAdded
header
CSS.styleSheetRemoved
CSS.nodeLayoutContextTypeChanged
layoutContextType
Canvas.canvasAdded
canvas
Canvas.canvasRemoved
Canvas.canvasMemoryChanged
memoryCost
Canvas.extensionEnabled
extension
Canvas.clientNodesChanged
Canvas.recordingStarted
initiator
Canvas.recordingProgress
frames
bufferUsed
Canvas.recordingFinished
recording
Canvas.programCreated
shaderProgram
Canvas.programDeleted
Console.messageAdded
Console.messageRepeatCountUpdated
Console.messagesCleared
Console.heapSnapshot
title
DOM.documentUpdated
DOM.inspect
DOM.setChildNodes
parentId
nodes
DOM.attributeModified
DOM.attributeRemoved
DOM.inlineStyleInvalidated
DOM.characterDataModified
characterData
DOM.childNodeCountUpdated
childNodeCount
DOM.childNodeInserted
parentNodeId
previousNodeId
node
DOM.childNodeRemoved
DOM.willDestroyDOMNode
DOM.shadowRootPushed
hostId
DOM.shadowRootPopped
rootId
DOM.customElementStateChanged
customElementState
DOM.pseudoElementAdded
pseudoElement
DOM.pseudoElementRemoved
pseudoElementId
DOM.didAddEventListener
DOM.willRemoveEventListener
DOM.didFireEvent
DOM.powerEfficientPlaybackStateChanged
isPowerEfficient
DOMStorage.domStorageItemsCleared
DOMStorage.domStorageItemRemoved
DOMStorage.domStorageItemAdded
newValue
DOMStorage.domStorageItemUpdated
oldValue
Database.addDatabase
database
Debugger.globalObjectCleared
Debugger.scriptParsed
startLine
startColumn
endLine
endColumn
isContentScript
sourceURL
sourceMapURL
module
Debugger.scriptFailedToParse
errorLine
errorMessage
Debugger.breakpointResolved
Debugger.paused
reason
asyncStackTrace
Debugger.resumed
Debugger.didSampleProbe
sample
Debugger.playBreakpointActionSound
breakpointActionId
Heap.garbageCollected
collection
Heap.trackingStart
Heap.trackingComplete
Inspector.evaluateForTestInFrontend
script
Inspector.inspect
hints
LayerTree.layerTreeDidChange
Memory.memoryPressure
severity
Memory.trackingStart
Memory.trackingUpdate
Memory.trackingComplete
Network.requestWillBeSent
loaderId
documentURL
request
walltime
redirectResponse
Network.responseReceived
response
Network.dataReceived
dataLength
encodedDataLength
Network.loadingFinished
metrics
Network.loadingFailed
errorText
canceled
Network.requestServedFromMemoryCache
resource
Network.requestIntercepted
Network.responseIntercepted
Network.webSocketWillSendHandshakeRequest
Network.webSocketHandshakeResponseReceived
Network.webSocketCreated
Network.webSocketClosed
Network.webSocketFrameReceived
Network.webSocketFrameError
Network.webSocketFrameSent
Page.domContentEventFired
Page.loadEventFired
Page.frameNavigated
frame
Page.frameDetached
Page.frameStartedLoading
Page.frameStoppedLoading
Page.frameScheduledNavigation
delay
Page.frameClearedScheduledNavigation
Page.defaultAppearanceDidChange
Runtime.executionContextCreated
context
ScriptProfiler.trackingStart
ScriptProfiler.trackingUpdate
ScriptProfiler.trackingComplete
samples
Target.targetCreated
targetInfo
Target.targetDestroyed
Target.didCommitProvisionalTarget
oldTargetId
newTargetId
Target.dispatchMessageFromTarget
Timeline.eventRecorded
record
Timeline.recordingStarted
startTime
Timeline.recordingStopped
endTime
Timeline.autoCaptureStarted
Worker.workerCreated
Worker.workerTerminated
Worker.dispatchMessageFromWorker
parsedOk
priority
borderColor
marginColor
paddingColor
showInfo
isLocalStorage
actions
autoContinue
condition
ignoreCount
array
date
number
lower
lowerOpen
upper
upperOpen
domain
expires
httpOnly
sameSite
secure
session
divot
typeInformationDescriptor
children
ready
delayed
done
normal
reverse
alternate
alternate-reverse
none
forwards
backwards
both
auto
main
webkit
user
user-agent
author
inspector
first-line
first-letter
highlight
marker
before
after
selection
backdrop
scrollbar
scrollbar-thumb
scrollbar-button
scrollbar-track
scrollbar-track-piece
scrollbar-corner
resizer
inactive
media-rule
media-import-rule
media-link-node
media-style-node
supports-rule
layer-rule
layer-import-rule
grid
observed
srgb
display-p3
canvas-2d
bitmaprenderer
webgl
webgl2
compute
render
fragment
vertex
javascript
network
console-api
storage
appcache
rendering
security
content-blocker
mediasource
webrtc
itp-debug
private-click-measurement
payment-request
other
basic
verbose
warning
debug
dirxml
table
trace
clear
startGroup
startGroupCollapsed
endGroup
assert
timing
profile
profileEnd
image
open
closed
builtin
custom
waiting
failed
additions
removals
true
false
mixed
page
step
time
grammar
spelling
assertive
polite
subtree-modified
attribute-modified
node-removed
animation-frame
interval
listener
timeout
sound
probe
global
with
closure
catch
functionName
globalLexicalEnvironment
nestedLexical
full
partial
null
images
unknown
memory-cache
disk-cache
service-worker
inspector-override
medium
high
Document
StyleSheet
Image
Font
Script
Fetch
Ping
Beacon
WebSocket
Other
parser
General
AccessControl
Cancellation
Timeout
PrivateClickMeasurementDebugModeEnabled
AuthorAndUserStylesEnabled
ICECandidateFilteringEnabled
ITPDebugModeEnabled
ImagesEnabled
MediaCaptureRequiresSecureConnection
MockCaptureDevicesEnabled
NeedsSiteSpecificQuirks
ScriptEnabled
ShowDebugBorders
ShowRepaintCounter
WebRTCEncryptionEnabled
WebSecurityEnabled
Viewport
None
Strict
Light
Dark
canvas-bitmaprenderer
canvas-webgl
canvas-webgl2
frontend
console
auto-capture
function
undefined
boolean
symbol
bigint
regexp
weakmap
weakset
iterator
class
proxy
accessor
internal
irrecoverable
unterminated-literal
recoverable
Microtask
worker
EventDispatch
ScheduleStyleRecalculation
RecalculateStyles
InvalidateLayout
Layout
Paint
Composite
RenderingFrame
TimerInstall
TimerRemove
TimerFire
EvaluateScript
TimeStamp
Time
TimeEnd
FunctionCall
ProbeSample
ConsoleProfile
RequestAnimationFrame
CancelAnimationFrame
FireAnimationFrame
ObserverCallback
AnimationFrame
Interval
Listener
exception
CSPViolation
DebuggerStatement
Breakpoint
PauseOnNextStatement
BlackboxedScript
critical
non-critical
uncaught
'params' object must contain required parameter '
' with type '
Parameter '
' was not found.
' has wrong type. It must be '
Profile "
" already exists
No profiles exist
" does not exist
console.timeStamp
console.record
console.recordEnd
console.screenshot
 is currently ignored in JavaScript context inspection.
com.apple.JavaScriptCore.remote-inspector-runloop-mode
[native code]
InjectedScriptHost
InjectedScriptHost.evaluateWithScopeExtension first argument must be a string.
InjectedScriptHost.isPromiseRejectedWithNativeGetterTypeError first argument must be a Promise.
error
class
array
date
proxy
weakmap
weakset
scriptId
columnNumber
displayName
pending
resolved
rejected
./inspector/JSInjectedScriptHost.cpp
JSC::JSValue Inspector::JSInjectedScriptHost::getInternalProperties(JSC::JSGlobalObject *, JSC::CallFrame *)
targetFunction
boundThis
boundArgs
target
handler
kind
queryInstances first argument must be an object.
queryInstances cannot be called with a Proxy.
queryInstances cannot be called with Object.
queryInstances cannot be called with Function.
queryInstances cannot be called with Array.
queryInstances cannot be called with Map.
queryInstances cannot be called with Set.
queryInstances cannot be called with Promise.
queryHolders first argument must be an object.
subtype
internalConstructorName
isHTMLAllCollection
isPromiseRejectedWithNativeGetterTypeError
proxyTargetValue
weakMapSize
weakMapEntries
weakSetSize
weakSetEntries
iteratorEntries
queryInstances
queryHolders
evaluateWithScopeExtension
savedResultAlias
JavaScriptCallFrame
JSJavaScriptCallFrame.evaluateWithScopeExtension first argument must be a string.
program
scopeDescriptions
caller
sourceID
functionName
scopeChain
thisObject
isTailDeleted
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
[object Proxy]
Inspector
Audit
Must call teardown before calling setup again
Missing execution state of injected script for given executionContextId
Unable to construct injected WebInspectorAudit object.
(function(WebInspectorAudit) { "use strict"; return eval(`(
)`)(WebInspectorAudit); })
audit
Must call setup before calling teardown
Version
Console
 console messages are not shown.
Timer "
Counter "
Not supported
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = Inspector::CreateScriptCallStackFunctor]
backtrace
Debugger
Debugger domain already enabled
Unexpected negative depth
Either url or urlRegex must be specified
Breakpoint for given location already exists.
Missing script for scriptId in given location
Could not resolve breakpoint
Breakpoint for given location already exists
Missing script for given scriptId
Missing injected script for given functionId
Must be paused or waiting to pause
Unknown state: 
Missing injected script for given callFrameId
URL must not be empty
Blackboxing of internal scripts is controlled by 'Debugger.setPauseForInternalScripts'
originalReason
originalData
Must be paused
Heap
Heap domain already enabled
Heap domain already disabled
No heap snapshot
No object for identifier, it may have been collected
Unable to get object details - Structure
Unable to get object details - GlobalObject
Unable to get object details - InjectedScript
Internal error: unable to cast Object
Runtime
Missing injected script for given promiseObjectId
Missing injected script for given objectId
fetchStart cannot be negative
fetchCount cannot be negative
VM has no type information
User Query
Unexpected non-object item in locations
VM has no control flow information
ScriptProfiler
./inspector/agents/InspectorScriptProfilerAgent.cpp
virtual WTF::Seconds Inspector::InspectorScriptProfilerAgent::willEvaluateScript()
void Inspector::InspectorScriptProfilerAgent::trackingComplete()
void Inspector::InspectorScriptProfilerAgent::stopSamplingWhenDisconnecting()
Target
Missing target for given targetId
Target for given targetId is not paused
executionContextId is not supported for JSContexts as there is only one execution context
Internal error: main world execution context not found
Missing execution context for given executionContextId.
Unexpected non-integer lineNumber in given location
Unexepcted non-string scriptId in given location
breakpoint-action-
directive
endOffset
leastCommonAncestor
structures
typeSet
isTruncated
expressionLocation
stackFrames
stackTraces
isProvisional
isPaused
Unexpected non-object item in given actions
Missing type for item in given actions
Unknown breakpoint action type: 
probeId
batchId
sampleId
payload
isValid
hasExecuted
executionCount
./interpreter/CallFrame.cpp
bool JSC::CallFrame::callSiteBitsAreBytecodeOffset() const
bool JSC::CallFrame::callSiteBitsAreCodeOriginIndex() const
JSC::SourceOrigin JSC::CallFrame::callerSourceOrigin(JSC::VM &)
eval code
module code
global code
./interpreter/Interpreter.cpp
unsigned int JSC::sizeOfVarargs(JSC::JSGlobalObject *, JSC::JSValue, uint32_t)
JSC::JSValue JSC::Interpreter::executeProgram(const JSC::SourceCode &, JSC::JSGlobalObject *, JSC::JSObject *)
JSC::JSObject *JSC::Interpreter::executeConstruct(JSC::JSGlobalObject *, JSC::JSObject *, const JSC::CallData &, const JSC::ArgList &, JSC::JSValue)
JSC::JSValue JSC::Interpreter::execute(JSC::EvalExecutable *, JSC::JSGlobalObject *, JSC::JSValue, JSC::JSScope *)
Can't create duplicate global variable in eval: '
Executed eval, fired VarInjection watchpoint
Can't create duplicate variable in eval: '
JSC::JSValue JSC::Interpreter::executeModuleProgram(JSC::JSModuleRecord *, JSC::ModuleProgramExecutable *, JSC::JSGlobalObject *, JSC::JSModuleEnvironment *, JSC::JSValue, JSC::JSValue)
WillExecuteProgram
DidExecuteProgram
DidEnterCallFrame
DidReachDebuggerStatement
WillLeaveCallFrame
WillExecuteStatement
WillExecuteExpression
./interpreter/StackVisitor.cpp
std::optional<RegisterAtOffsetList> JSC::StackVisitor::Frame::calleeSaveRegistersForUnwinding()
[native code]
[wasm code]
frame 0x0
frame 
name: 
sourceURL: 
isInlinedFrame: 
InlineCallFrame: 
callee: 
returnPC: 
callerFrame: 
rawLocationBits: 
codeBlock: 
hasCodeOrigins: 
callSiteIndex: 
jitCode: 
 start 
 end 
line: 
column: 
EntryFrame: 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/CodeBlock.h
unsigned int JSC::CodeBlock::bytecodeOffset(const JSC::Instruction *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/llint/LLIntPCRanges.h
bool JSC::LLInt::isLLIntPC(void *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
bool JSC::JSObject::canGetIndexQuickly(unsigned int) const
./interpreter/ShadowChicken.cpp
auto JSC::ShadowChicken::update(JSC::VM &, JSC::CallFrame *)::(anonymous class)::operator()(JSC::StackVisitor &) const
./jit/AssemblyHelpers.cpp
void JSC::AssemblyHelpers::callExceptionFuzz(JSC::VM &)
void JSC::AssemblyHelpers::copyLLIntBaselineCalleeSavesFromFrameOrRegisterToEntryFrameCalleeSavesBuffer(JSC::EntryFrame *&, const JSC::TempRegisterSet &)
void JSC::AssemblyHelpers::emitSaveOrCopyLLIntBaselineCalleeSavesFor(JSC::CodeBlock *, JSC::VirtualRegister, JSC::AssemblyHelpers::RestoreTagRegisterMode, JSC::GPRReg, JSC::GPRReg, JSC::GPRReg)
delayJITCompile
    JIT compilation failed.
    JIT compilation successful.
./jit/BaselineJITPlan.cpp
virtual JSC::CompilationResult JSC::BaselineJITPlan::finalize()
./jit/BinarySwitch.cpp
bool JSC::BinarySwitch::advance(JSC::MacroAssembler &)
void JSC::BinarySwitch::build(unsigned int, bool, unsigned int)
./jit/CCallHelpers.cpp
void JSC::CCallHelpers::ensureShadowChickenPacket(JSC::VM &, JSC::GPRReg, JSC::GPRReg, JSC::GPRReg)
./jit/CallFrameShuffler.cpp
void JSC::CallFrameShuffler::spill(JSC::CachedRecovery &)
void JSC::CallFrameShuffler::prepareAny()
./jit/AssemblyHelpersSpoolers.h
void JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute(const JSC::RegisterAtOffset &) [Op = JSC::AssemblyHelpers::LoadRegSpooler, RegType = JSC::X86Registers::XMMRegisterID]
void JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute(const JSC::RegisterAtOffset &) [Op = JSC::AssemblyHelpers::StoreRegSpooler, RegType = JSC::X86Registers::XMMRegisterID]
./jit/CallFrameShuffler.h
void JSC::CallFrameShuffler::ensureRegister(const CheckFunctor &) [CheckFunctor = (lambda at ./jit/CallFrameShuffler.h:562:13)]
void JSC::CallFrameShuffler::ensureRegister(const CheckFunctor &) [CheckFunctor = (lambda at ./jit/CallFrameShuffler.h:631:13)]
static void JSC::AbstractMacroAssembler<JSC::X86Assembler>::repatchNearCall(CodeLocationNearCall<callTag>, CodeLocationLabel<destTag>) [AssemblerType = JSC::X86Assembler, callTag = (WTF::PtrTag)2367, destTag = (WTF::PtrTag)49594]
compilation failed
./jit/CallFrameShuffler64.cpp
JSC::DataFormat JSC::CallFrameShuffler::emitStore(JSC::CachedRecovery &, MacroAssembler::Address)
void JSC::CallFrameShuffler::emitBox(JSC::CachedRecovery &)
void JSC::CallFrameShuffler::emitDisplace(JSC::CachedRecovery &)
Will pretend to fail executable allocation.
./jit/ExecutableAllocator.cpp
static void JSC::ExecutableAllocator::initializeUnderlyingAllocator()
Allocating 
 bytes of executable memory with JITCompilationMustSucceed.
Allocation failed because bytes allocated 
 bytes available.
Ran out of executable memory while allocating 
 bytes.
RefPtr<JSC::ExecutableMemoryHandle> JSC::ExecutableAllocator::allocate(size_t, JSC::JITCompilationEffort)
void JSC::dumpJITMemory(const void *, const void *, size_t)
./jit/GCAwareJITStubRoutine.cpp
virtual void JSC::GCAwareJITStubRoutine::observeZeroRefCount()
JSC::GCAwareJITStubRoutineWithExceptionHandler::GCAwareJITStubRoutineWithExceptionHandler(const MacroAssemblerCodeRef<JITStubRoutinePtrTag> &, JSC::VM &, FixedVector<RefPtr<JSC::AccessCase>> &&, FixedVector<JSC::StructureID> &&, const JSC::JSCell *, const Vector<JSC::JSCell *> &, Bag<JSC::OptimizingCallLinkInfo> &&, JSC::CodeBlock *, JSC::DisposableCallSiteIndex)
Ref<JSC::PolymorphicAccessJITStubRoutine> JSC::createICJITStubRoutine(const MacroAssemblerCodeRef<JITStubRoutinePtrTag> &, FixedVector<RefPtr<JSC::AccessCase>> &&, FixedVector<JSC::StructureID> &&, JSC::VM &, const JSC::JSCell *, bool, const Vector<JSC::JSCell *> &, Bag<JSC::OptimizingCallLinkInfo> &&, JSC::CodeBlock *, JSC::DisposableCallSiteIndex)
 self
 proto lookup
JSC ICStats
InvalidKind
GetByAddAccessCase
GetByReplaceWithJump
GetBySelfPatch
InAddAccessCase
InReplaceWithJump
InReplaceWithGeneric
InstanceOfAddAccessCase
InstanceOfReplaceWithJump
OperationGetById
OperationGetByIdGeneric
OperationGetByIdBuildList
OperationGetByIdOptimize
OperationGetByValOptimize
OperationGetByIdWithThisOptimize
OperationGenericIn
OperationInByIdGeneric
OperationInByIdOptimize
OperationPutByIdStrict
OperationPutByIdNonStrict
OperationPutByIdDirectStrict
OperationPutByIdDirectNonStrict
OperationPutByIdStrictOptimize
OperationPutByIdNonStrictOptimize
OperationPutByIdDirectStrictOptimize
OperationPutByIdDirectNonStrictOptimize
OperationPutByIdStrictBuildList
OperationPutByIdNonStrictBuildList
OperationPutByIdDefinePrivateFieldFieldStrictOptimize
OperationPutByIdPutPrivateFieldFieldStrictOptimize
PutByAddAccessCase
PutByReplaceWithJump
PutBySelfPatch
InBySelfPatch
DelByReplaceWithJump
DelByReplaceWithGeneric
OperationGetPrivateNameOptimize
OperationGetPrivateNameById
OperationGetPrivateNameByIdOptimize
OperationGetPrivateNameByIdGeneric
CheckPrivateBrandAddAccessCase
SetPrivateBrandAddAccessCase
CheckPrivateBrandReplaceWithJump
SetPrivateBrandReplaceWithJump
./jit/ICStats.cpp
void WTF::printInternal(WTF::PrintStream &, ICEvent::Kind)
./jit/IntrinsicEmitter.cpp
void JSC::IntrinsicGetterAccessCase::emitIntrinsicGetter(JSC::AccessGenerationState &)
: Got executable pool reservation at 
, while I'm at 
void JSC::FixedVMPoolExecutableAllocator::Allocator::addFreshFreeSpace(void *, size_t)
%pid
static void JSC::dumpJITMemory(const void *, const void *, size_t)::DumpJIT::flush()
jsc.dumpJITMemory.queue
ICStats:
./jit/JIT.cpp
void JSC::JIT::emitPutCodeBlockToFrameInPrologue(JSC::GPRReg)
Baseline_fast_
void JSC::JIT::privateCompileMainPass()
Baseline_slow_
void JSC::JIT::privateCompileSlowCases()
void JSC::JIT::compileAndLinkWithoutFinalizing(JSC::JITCompilationEffort)
Baseline_prologue
Baseline JIT code for %s
JSC::CompilationResult JSC::JIT::finalizeOnMainThread(JSC::CodeBlock *)
Preparing for JIT compilation.
Total Compile Time
Baseline Compile Time
DFG Compile Time
FTL Compile Time
FTL (DFG) Compile Time
FTL (B3) Compile Time
Baseline: op_ret_handler
None
Host
LLInt
Baseline
./jit/JITCode.cpp
virtual DFG::CommonData *JSC::JITCode::dfgCommon()
virtual DFG::JITCode *JSC::JITCode::dfg()
virtual FTL::JITCode *JSC::JITCode::ftl()
virtual FTL::ForOSREntryJITCode *JSC::JITCode::ftlForOSREntry()
Destroying JIT code at 
virtual void *JSC::JITCodeWithCodeRef::executableAddressAtOffset(size_t)
virtual void *JSC::JITCodeWithCodeRef::dataAddressAtOffset(size_t)
virtual unsigned int JSC::JITCodeWithCodeRef::offsetOf(void *)
virtual size_t JSC::JITCodeWithCodeRef::size()
virtual bool JSC::JITCodeWithCodeRef::contains(void *)
void JSC::DirectJITCode::initializeCodeRefForDFG(JITCode::CodeRef<JSEntryPtrTag>, JITCode::CodePtr<JSEntryPtrTag>)
virtual JITCode::CodePtr<JSEntryPtrTag> JSC::DirectJITCode::addressForCall(JSC::ArityCheckMode)
virtual JITCode::CodePtr<JSEntryPtrTag> JSC::NativeJITCode::addressForCall(JSC::ArityCheckMode)
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)49594, T = JSC::AssemblerLabel]
./jit/JITInlines.h
JSC::JSValue JSC::JIT::getConstantOperand(JSC::VirtualRegister)
const WTF::String &JSC::JSString::tryGetValue(bool) const
./jit/JITCall.cpp
auto JSC::JIT::emit_op_iterator_open(const JSC::Instruction *)::(anonymous class)::operator()() const
auto JSC::JIT::emit_op_iterator_next(const JSC::Instruction *)::(anonymous class)::operator()() const
JIT [
 cfr 
] SLOW 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/UnlinkedCodeBlock.h
unsigned int JSC::UnlinkedCodeBlock::bytecodeOffset(const JSC::Instruction *)
uintptr_t JSC::valueProfileOffsetFor(unsigned int) [Bytecode = JSC::OpIteratorOpen]
uintptr_t JSC::valueProfileOffsetFor(unsigned int) [Bytecode = JSC::OpIteratorNext]
<empty>
(Compile of 
 with 
InvalidCompilationMode
BaselineMode
DFGMode
FTLMode
FTLForOSREntryMode
./jit/JITCompilationMode.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::JITCompilationMode)
    (End Of Main Path)
    (S) 
    (End Of Slow Path)
Generated Baseline JIT code for 
   Source: 
   Code at [
In call frame 
 for code block 
./jit/JITExceptions.cpp
void JSC::genericUnwind(JSC::VM &, JSC::CallFrame *)
./jit/JITInlineCacheGenerator.cpp
void JSC::JITInlineCacheGenerator::generateBaselineDataICFastPath(JSC::JIT &, unsigned int, JSC::GPRReg)
JSC::JITGetByIdGenerator::JITGetByIdGenerator(JSC::CodeBlock *, Bag<JSC::StructureStubInfo> *, JSC::JITType, JSC::CodeOrigin, JSC::CallSiteIndex, const JSC::RegisterSet &, JSC::CacheableIdentifier, JSC::JSValueRegs, JSC::JSValueRegs, JSC::GPRReg, JSC::AccessType)
void JSC::JITGetByIdGenerator::generateBaselineDataICFastPath(JSC::JIT &, unsigned int, JSC::GPRReg)
JSC::JITGetByIdWithThisGenerator::JITGetByIdWithThisGenerator(JSC::CodeBlock *, Bag<JSC::StructureStubInfo> *, JSC::JITType, JSC::CodeOrigin, JSC::CallSiteIndex, const JSC::RegisterSet &, JSC::CacheableIdentifier, JSC::JSValueRegs, JSC::JSValueRegs, JSC::JSValueRegs, JSC::GPRReg)
void JSC::JITGetByIdWithThisGenerator::generateBaselineDataICFastPath(JSC::JIT &, unsigned int, JSC::GPRReg)
void JSC::JITPutByIdGenerator::generateBaselineDataICFastPath(JSC::JIT &, unsigned int, JSC::GPRReg)
JSC::V_JITOperation_GSsiJJC JSC::JITPutByIdGenerator::slowPathFunction()
JSC::JITInByIdGenerator::JITInByIdGenerator(JSC::CodeBlock *, Bag<JSC::StructureStubInfo> *, JSC::JITType, JSC::CodeOrigin, JSC::CallSiteIndex, const JSC::RegisterSet &, JSC::CacheableIdentifier, JSC::JSValueRegs, JSC::JSValueRegs, JSC::GPRReg)
void JSC::JITInByIdGenerator::generateBaselineDataICFastPath(JSC::JIT &, unsigned int, JSC::GPRReg)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/LinkBuffer.h
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)49594, T = JSC::AssemblerLabel]
Byproducts:
    <empty>
    
./jit/JITOpcodes.cpp
void JSC::JIT::emit_op_is_big_int(const JSC::Instruction *)
Baseline: valueIsfalsey
Baseline: op_throw_handler
void JSC::JIT::emit_op_enter(const JSC::Instruction *)
Baseline: op_enter_handler
Baseline: op_check_traps_handler
void JSC::JIT::emit_op_log_shadow_chicken_prologue(const JSC::Instruction *)
void JSC::JIT::emit_op_log_shadow_chicken_tail(const JSC::Instruction *)
./jit/JITOperations.cpp
void JSC::operationDirectPutByValStrictGeneric(JSC::JSGlobalObject *, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::StructureStubInfo *, JSC::ArrayProfile *)
void JSC::operationDirectPutByValNonStrictGeneric(JSC::JSGlobalObject *, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::StructureStubInfo *, JSC::ArrayProfile *)
Unexpected code block in Baseline->DFG tier-up: 
JSC::SlowPathReturnType JSC::operationOptimize(JSC::VM *, uint32_t)
: Entered optimize with bytecodeIndex = 
, executeCounter = 
, exitCounter = 
delayOptimizeToDFG
Choosing not to optimize 
 yet, because the threshold hasn't been reached.
 yet, because m_shouldAlwaysBeInlined == true.
Considering OSR 
Triggering reoptimization of 
) (in loop).
Delaying optimization for 
 because of insufficient profiling.
Triggering optimized compilation of 
Performing OSR 
Optimizing 
 succeeded, OSR failed, after a delay of 
 (after OSR fail).
Executed op_put_scope<ResolvedClosureVar>
JITOperations
Log Full, called from inside baseline JIT
void JSC::operationProcessShadowChickenLog(JSC::VM *)
JSC::JSCell *JSC::operationRetrieveAndClearExceptionIfCatchable(JSC::VM *)
./jit/JITPlan.cpp
virtual void JSC::JITPlan::cancel()
JSC::JITPlan::Tier JSC::JITPlan::tier() const
DFG(Plan) compiling 
void JSC::JITPlan::compileInThread(JSC::JITWorklistThread *)
N/A (fail)
Baseline
Canceled
ftlCompile
dfgCompile
Optimized 
 using 
 into 
 bytes in 
 (DFG: 
, B3: 
Baseline: slow_op_get_by_val_prepareCall
Baseline: slow_op_xxx_private_name_prepareCall
Baseline: slow_op_put_xxx_prepareCall
Baseline: slow_op_put_put_private_name_prepareCall
Baseline: slow_op_del_by_id_prepareCall
Baseline: slow_op_del_by_val_prepareCall
Baseline: slow_op_get_by_id_prepareCall
Baseline: slow_op_get_by_id_with_this_prepareCall
Baseline: slow_op_put_by_id_prepareCall
Baseline: slow_op_resolve_scope
Baseline: slow_op_get_from_scope
Baseline: slow_op_put_to_scope
void JSC::JIT::loadCodeBlockConstantPayload(JSC::VirtualRegister, JSC::AbstractMacroAssembler<JSC::X86Assembler>::RegisterID)
void JSC::directPutByValOptimize(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSValue, JSC::JSValue, JSC::JSValue, JSC::StructureStubInfo *, JSC::ArrayProfile *, JSC::ECMAMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/RepatchInlines.h
JSC::SlowPathReturnType JSC::linkFor(JSC::CallFrame *, JSC::JSGlobalObject *, JSC::CallLinkInfo *)
Invalid mix of BigInt and other type in multiplication.
Invalid mix of BigInt and other type in subtraction.
./jit/JITPropertyAccess.cpp
auto JSC::JIT::emit_op_put_to_scope(const JSC::Instruction *)::(anonymous class)::operator()(JSC::ResolveType) const
Terminating current execution
debugger is stepping or has requests
should always be inlined
compiling
should reoptimize from loop now
insufficient profiling
at bc#
should reoptimize now
OSR failed
JITMathIC: generating out of line fast IC snippet
JITMathIC: generating out of line IC snippet
./jit/JITMathIC.h
auto JSC::JITMathIC<JSC::JITAddGenerator, JSC::BinaryArithProfile>::generateOutOfLine(JSC::CodeBlock *, FunctionPtr<CFunctionPtrTag>)::(anonymous class)::operator()() const [GeneratorType = JSC::JITAddGenerator, ArithProfileType = JSC::BinaryArithProfile]
JITMathIC: linking constant jump to out of line stub
auto JSC::JITMathIC<JSC::JITMulGenerator, JSC::BinaryArithProfile>::generateOutOfLine(JSC::CodeBlock *, FunctionPtr<CFunctionPtrTag>)::(anonymous class)::operator()() const [GeneratorType = JSC::JITMulGenerator, ArithProfileType = JSC::BinaryArithProfile]
auto JSC::JITMathIC<JSC::JITNegGenerator, JSC::UnaryArithProfile>::generateOutOfLine(JSC::CodeBlock *, FunctionPtr<CFunctionPtrTag>)::(anonymous class)::operator()() const [GeneratorType = JSC::JITNegGenerator, ArithProfileType = JSC::UnaryArithProfile]
auto JSC::JITMathIC<JSC::JITSubGenerator, JSC::BinaryArithProfile>::generateOutOfLine(JSC::CodeBlock *, FunctionPtr<CFunctionPtrTag>)::(anonymous class)::operator()() const [GeneratorType = JSC::JITSubGenerator, ArithProfileType = JSC::BinaryArithProfile]
took 
 ms (DFG: 
 ms with 
resolve_scope thunk
auto JSC::JIT::generateOpResolveScopeThunk(JSC::VM &)::(anonymous class)::operator()(JSC::ResolveType) const
get_from_scope thunk
auto JSC::JIT::generateOpGetFromScopeThunk(JSC::VM &)::(anonymous class)::operator()(JSC::ResolveType) const
./jit/JITSafepoint.cpp
void JSC::Safepoint::checkLivenessAndVisitChildren(Visitor &) [Visitor = JSC::AbstractSlotVisitor]
void JSC::Safepoint::checkLivenessAndVisitChildren(Visitor &) [Visitor = JSC::SlotVisitor]
JSC::Safepoint::Result::~Result()
JSC::Safepoint::Safepoint(JSC::JITPlan &, JSC::Safepoint::Result &)
JSC::Safepoint::~Safepoint()
void JSC::Safepoint::begin()
bool JSC::Safepoint::isKnownToBeLiveAfterGC()
void JSC::Safepoint::cancel()
JIT size statistics:
==============================================
 totalBytes: 
 count: 
 avg: 
./jit/JITStubRoutine.cpp
virtual void JSC::JITStubRoutine::observeZeroRefCount()
 did become ready.
 result: 
: Enqueueing plan to optimize 
: Completing 
./jit/JITWorklist.cpp
JSC::JITWorklist::State JSC::JITWorklist::completeAllReadyPlansForVM(JSC::VM &, JSC::JITCompilationKey)
: Waiting for all in VM to complete.
JITWorklist(
)[Queue Length = 
, Map Size = 
, Num Ready = 
, Num Active Threads = 
./jit/JITThunks.cpp
MacroAssemblerCodeRef<JITThunkPtrTag> JSC::JITThunks::ctiStubImpl(JSC::ThunkGenerator, GenerateThunk) [GenerateThunk = (lambda at ./jit/JITThunks.cpp:169:35)]
MacroAssemblerCodeRef<JITThunkPtrTag> JSC::JITThunks::ctiStubImpl(JSC::ThunkGenerator, GenerateThunk) [GenerateThunk = (lambda at ./jit/JITThunks.cpp:179:29)]
void JSC::JITWorklist::removeMatchingPlansForVM(JSC::VM &, const MatchFunction &) [MatchFunction = (lambda at ./jit/JITWorklist.cpp:221:34)]
void JSC::JITWorklist::removeMatchingPlansForVM(JSC::VM &, const MatchFunction &) [MatchFunction = (lambda at ./jit/JITWorklist.cpp:233:34)]
JIT Worklist Helper Thread
: Thread shutting down
./jit/JITWorklistThread.cpp
virtual WTF::AutomaticThread::PollResult JSC::JITWorklistThread::poll(const WTF::AbstractLocker &)
: Compiling 
 asynchronously
Heap is stopped but here we are! (1)
virtual WTF::AutomaticThread::WorkResult JSC::JITWorklistThread::work()
Heap is stopped but here we are! (2)
: Compiled 
 asynchronously
: Thread started
: Thread will stop
./jit/PCToCodeOriginMap.cpp
JSC::PCToCodeOriginMap::PCToCodeOriginMap(JSC::PCToCodeOriginMapBuilder &&, JSC::LinkBuffer &)
Unlinking polymorphic call at 
, bc#
<variant = 
, codeBlock = 
Linking polymorphic call in 
<none>
 at 
./jit/ScratchRegisterAllocator.cpp
void JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping(JSC::AssemblyHelpers &, const ScratchRegisterAllocator::PreservedState &)
static unsigned int JSC::ScratchRegisterAllocator::preserveRegistersToStackForCall(JSC::AssemblyHelpers &, const JSC::RegisterSet &, unsigned int)
static void JSC::ScratchRegisterAllocator::restoreRegistersFromStackForCall(JSC::AssemblyHelpers &, const JSC::RegisterSet &, const JSC::RegisterSet &, unsigned int, unsigned int)
JSC::JITWorklistThread::WorkScope::WorkScope(JSC::JITWorklistThread &)
auto JSC::PCToCodeOriginMap::PCToCodeOriginMap(JSC::PCToCodeOriginMapBuilder &&, JSC::LinkBuffer &)::(anonymous class)::operator()(void *) const
void JSC::(anonymous namespace)::DeltaCompressionBuilder::write(T) [T = unsigned char]
void JSC::(anonymous namespace)::DeltaCompressionBuilder::write(T) [T = unsigned long]
void JSC::(anonymous namespace)::DeltaCompressionBuilder::write(T) [T = signed char]
void JSC::(anonymous namespace)::DeltaCompressionBuilder::write(T) [T = long]
./jit/AssemblyHelpersSpoolers.h
void JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute(const JSC::RegisterAtOffset &) [Op = JSC::AssemblyHelpers::StoreRegSpooler, RegType = JSC::X86Registers::XMMRegisterID]
T JSC::(anonymous namespace)::DeltaCompresseionReader::read() [T = unsigned char]
T JSC::(anonymous namespace)::DeltaCompresseionReader::read() [T = unsigned long]
T JSC::(anonymous namespace)::DeltaCompresseionReader::read() [T = signed char]
T JSC::(anonymous namespace)::DeltaCompresseionReader::read() [T = long]
(null)
SlowPathCall
handleException
handleExceptionWithCallFrameRollback
popThunkStackPreservesAndHandleException
CheckException
Throw exception from call slow path thunk
Link call slow path thunk
Link polymorphic call slow path thunk
fixup arity
charAt
fromCharCode
codePointAt
clz32
sqrt
round
imul
random
Specialized thunk for bound function calls with no arguments
./jit/ThunkGenerators.cpp
auto JSC::virtualThunkFor(JSC::VM &, JSC::CallMode)::(anonymous class)::operator()() const
Virtual %s slow path thunk
tail call
construct
%s %s%s trampoline
native
internal
Tail With Saved Tags 
Tail Without Saved Tags 
Specialized thunk for %s
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/ExecutableBase.h
static ptrdiff_t JSC::ExecutableBase::offsetOfJITCodeWithArityCheckFor(JSC::CodeSpecializationKind)
./llint/LLIntExceptions.cpp
MacroAssemblerCodeRef<ExceptionHandlerPtrTag> JSC::LLInt::handleCatch(JSC::OpcodeSize)
MacroAssemblerCodeRef<ExceptionHandlerPtrTag> JSC::LLInt::handleWasmCatch(JSC::OpcodeSize)
MacroAssemblerCodeRef<ExceptionHandlerPtrTag> JSC::LLInt::handleWasmCatchAll(JSC::OpcodeSize)
<%p> %p / %p: executing bc#%zu, op#%u: Trace(%d): %d
LLIntSlowPaths
<%p> %p / %p: executing bc#%zu, op#%u: Trace(%d): %d: %08x:%08x: %s
<%p> %p / %p: in prologue of 
call prologue
construct prologue
call arity check
construct arity check
<%p> %p / %p: executing bc#%zu, %s, pc = %p
Frame will eventually return to %p
Will be returning to %p
The new cfr will be %p
entry_osr
entry_osr_function_for_call
entry_osr_function_for_construct
entry_osr_function_for_call_arityCheck
entry_osr_function_for_construct_arityCheck
JSC::SlowPathReturnType JSC::LLInt::llint_loop_osr(JSC::CallFrame *, const JSC::Instruction *)
: Entered loop_osr with executeCounter = 
./llint/LLIntSlowPaths.cpp
: Entered replace with executeCounter = 
Detected poly proto opportunity.
JSC::SlowPathReturnType JSC::LLInt::llint_slow_path_put_by_id(JSC::CallFrame *, const JSC::Instruction *)
JSC::SlowPathReturnType JSC::LLInt::llint_slow_path_put_by_val_direct(JSC::CallFrame *, const JSC::Instruction *)
JSC::SlowPathReturnType JSC::LLInt::llint_slow_path_put_private_name(JSC::CallFrame *, const JSC::Instruction *)
JSC::SlowPathReturnType JSC::LLInt::llint_slow_path_size_frame_for_varargs(JSC::CallFrame *, const JSC::Instruction *)
LLIntSlowPaths/call
JSC::SlowPathReturnType JSC::LLInt::llint_slow_path_retrieve_and_clear_exception_if_catchable(JSC::CallFrame *, const JSC::Instruction *)
JSC::SlowPathReturnType JSC::LLInt::llint_slow_path_log_shadow_chicken_prologue(JSC::CallFrame *, const JSC::Instruction *)
JSC::SlowPathReturnType JSC::LLInt::llint_slow_path_log_shadow_chicken_tail(JSC::CallFrame *, const JSC::Instruction *)
JSC::SlowPathReturnType JSC::LLInt::llint_slow_path_checkpoint_osr_exit(JSC::CallFrame *, JSC::EncodedJSValue)
./llint/LLIntThunks.cpp
MacroAssemblerCodeRef<ExceptionHandlerPtrTag> JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)
MacroAssemblerCodeRef<ExceptionHandlerPtrTag> JSC::LLInt::handleWasmCatchThunk(JSC::OpcodeSize)
MacroAssemblerCodeRef<ExceptionHandlerPtrTag> JSC::LLInt::handleWasmCatchAllThunk(JSC::OpcodeSize)
MacroAssemblerCodeRef<JSEntryPtrTag> JSC::LLInt::returnLocationThunk(JSC::OpcodeID, JSC::OpcodeSize)
<%p> %p / %p: in %s of 
 function %p, executable %p; numVars = %u, numParameters = %u, numCalleeLocals = %u, caller = %p.
: Entered 
 with executeCounter = 
OSR entry
in prologue
    JIT threshold should be lifted.
    Code was already compiled.
threshold not reached, counter = 
JSC::JSString *JSC::JSRopeString::RopeBuilder<WTF::RecordOverflow>::release() [OverflowHandler = WTF::RecordOverflow]
void JSC::LLInt::handleIteratorNextCheckpoint(JSC::VM &, JSC::CallFrame *, JSC::JSGlobalObject *, const JSC::OpIteratorNext &, JSC::CheckpointOSRExitSideState &)
function for call
LLInt %s jump to prologue thunk
function for construct
function for call with arity check
function for construct with arity check
eval
module_program
LLInt::getHostCallReturnValue thunk
LLInt::callToThrow thunk
LLInt %s thunk
handle_uncaught_exception
op_catch
op_catch16
op_catch32
wasm_catch
wasm_catch16
wasm_catch32
wasm_catch_all
wasm_catch_all16
wasm_catch_all32
llint_generic_return_point
LLInt %s return point thunk
llint_generic_return_point16
llint_generic_return_point32
fuzzer_return_early_from_loop_hint
normal_osr_exit_trampoline thunk
checkpoint_osr_exit_trampoline thunk
checkpoint_osr_exit_from_inlined_call_trampoline thunk
op_call_return_location thunk
op_call_return_location16 thunk
op_call_return_location32 thunk
op_iterator_open_return_location thunk
op_iterator_open_return_location16 thunk
op_iterator_open_return_location32 thunk
op_iterator_next_return_location thunk
op_iterator_next_return_location16 thunk
op_iterator_next_return_location32 thunk
op_construct_return_location thunk
op_construct_return_location16 thunk
op_construct_return_location32 thunk
op_call_varargs_return_location thunk
op_call_varargs_return_location16 thunk
op_call_varargs_return_location32 thunk
op_construct_varargs_return_location thunk
op_construct_varargs_return_location16 thunk
op_construct_varargs_return_location32 thunk
op_get_by_id_return_location thunk
op_get_by_id_return_location16 thunk
op_get_by_id_return_location32 thunk
op_get_by_val_return_location thunk
op_get_by_val_return_location16 thunk
op_get_by_val_return_location32 thunk
op_put_by_id_return_location thunk
op_put_by_id_return_location16 thunk
op_put_by_id_return_location32 thunk
op_put_by_val_return_location thunk
op_put_by_val_return_location16 thunk
op_put_by_val_return_location32 thunk
Multiline comment was not closed properly
Non-number found after decimal point
Non-number found after exponent indicator
No identifiers allowed directly after numeric literal
No hexadecimal digits after '0x'
No space between hexadecimal literal and identifier
No binary digits after '0b'
No space between binary literal and identifier
No octal digits after '0o'
No space between octal literal and identifier
Numeric literals may not begin with 0_
Decimal integer literals with a leading zero are forbidden in strict mode
./parser/Lexer.cpp
JSC::JSTokenType JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator(JSC::JSToken *, OptionSet<JSC::LexerFlags>, bool) [T = unsigned char]
Unterminated regular expression literal '
`invalid unicode character`
Invalid non-latin character in RexExp literal's flags '
Invalid character: '\0'
Invalid character: '\n'
Invalid character: '\v'
Invalid character: '\r'
Invalid character: '#'
Invalid character: '@'
Invalid character: '`'
Invalid character '\u
Unexpected EOF
JSC::JSTokenType JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator(JSC::JSToken *, OptionSet<JSC::LexerFlags>, bool) [T = char16_t]
m_parseMode 
m_lexicalScopeFeatures 
m_superBinding 
m_constructorKind 
m_isArrowFunctionBodyExpression 
m_ident 
m_ecmaName 
m_functionMode 
m_startColumn 
m_endColumn 
m_functionKeywordStart 
m_functionNameStart 
m_parametersStart 
m_classSource.isNull() 
m_startStartOffset 
m_parameterCount 
m_lastLine 
position().line 
position().offset 
position().lineStartOffset 
./parser/Parser.h
JSC::DestructuringKind JSC::Parser<JSC::Lexer<LChar>>::destructuringKindFromDeclarationType(JSC::DeclarationType) [LexerType = JSC::Lexer<LChar>]
variable name
lexical variable name
const char *JSC::Parser<JSC::Lexer<LChar>>::declarationTypeToVariableKind(JSC::DeclarationType) [LexerType = JSC::Lexer<LChar>]
std::tuple<VariableEnvironment, DeclarationStacks::FunctionStack> JSC::Parser<JSC::Lexer<LChar>>::popScope(JSC::Parser::AutoCleanupLexicalScope &, bool) [LexerType = JSC::Lexer<LChar>]
Parser error
Unexpected end of script
Incomplete unicode escape in identifier: '
Unterminated multiline comment
Unterminated numeric literal '
Unterminated string literal '
Invalid escape in identifier: '
Unexpected escaped characters in keyword token: '
Invalid unicode escape in identifier: '
Invalid numeric literal: '
Invalid use of octal: '
Invalid string literal: '
Invalid unicode encoding: '
Invalid unicode code point in identifier: '
Unrecognized token '
Unexpected string literal 
Unexpected number '
Unexpected use of reserved word '
' in strict mode
Invalid private name '
Unexpected private name 
Unexpected identifier '
Unexpected keyword '
Unexpected token '
Unparseable script
Cannot destructure to a parameter name '
Cannot declare a parameter named '
' as it shadows the name of a strict mode function
Cannot use the reserved word '
' as a 
parameter name
 in strict mode
Cannot use the keyword '
Cannot use 'let' as a 
Cannot use 'await' as a 
Cannot use 'yield' as a 
' in strict mode as it has already been declared
in strict mode
in an async function
in a module
const char *JSC::Parser<JSC::Lexer<LChar>>::disallowedIdentifierAwaitReason() [LexerType = JSC::Lexer<LChar>]
in a generator function
const char *JSC::Parser<JSC::Lexer<LChar>>::disallowedIdentifierYieldReason() [LexerType = JSC::Lexer<LChar>]
JSC::DestructuringKind JSC::Parser<JSC::Lexer<UChar>>::destructuringKindFromDeclarationType(JSC::DeclarationType) [LexerType = JSC::Lexer<UChar>]
const char *JSC::Parser<JSC::Lexer<UChar>>::declarationTypeToVariableKind(JSC::DeclarationType) [LexerType = JSC::Lexer<UChar>]
std::tuple<VariableEnvironment, DeclarationStacks::FunctionStack> JSC::Parser<JSC::Lexer<UChar>>::popScope(JSC::Parser::AutoCleanupLexicalScope &, bool) [LexerType = JSC::Lexer<UChar>]
const char *JSC::Parser<JSC::Lexer<UChar>>::disallowedIdentifierAwaitReason() [LexerType = JSC::Lexer<UChar>]
const char *JSC::Parser<JSC::Lexer<UChar>>::disallowedIdentifierYieldReason() [LexerType = JSC::Lexer<UChar>]
./parser/SourceProvider.cpp
void JSC::SourceProvider::getID()
null
true
false
await
break
case
catch
class
const
default
extends
finally
instanceof
continue
function
return
void
delete
this
while
else
super
switch
throw
typeof
with
debugger
yield
enum
export
import
implements
interface
package
private
protected
public
static
\x can only be followed by a hex character sequence
\u can only be followed by a Unicode character sequence
The only valid numeric escape in strict mode is '\0'
Unterminated string constant
./parser/Parser.cpp
typename TreeBuilder::FormalParameterList JSC::Parser<JSC::Lexer<LChar>>::parseFunctionParameters(TreeBuilder &, FunctionInfoType &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::ASTBuilder, FunctionInfoType = JSC::ParserFunctionInfo<JSC::ASTBuilder>]
 name
Expected an arrow function input parameter
Cannot parse parameters for this 
Expected a ')' or a ',' after a parameter declaration
Cannot parse parameter pattern
Expected an opening '(' before a 
's parameter list
getter functions must have no parameters
setter functions must have one parameter
Duplicate parameter '
' not allowed in function with non-simple parameter list
Expected a ')' after a parameter declaration
generator function
arrow function
async function
async method
async arrow function
async generator function
async generator method
const char *JSC::stringForFunctionMode(JSC::SourceParseMode)
Cannot use 'await' as a parameter name in an async function
Rest parameter should be the last parameter in a function declaration
' not allowed in function with default parameter values
' not allowed in function with destructuring parameters
' not allowed in function with a rest parameter
' not allowed in an arrow function
' not allowed in a method
Stack exhausted
Cannot parse this destructuring pattern
Expected a closing ']' following a rest element destructuring pattern
Expected either a closing ']' or a ',' following an element destructuring pattern
Cannot use 'let' as an identifier name for a LexicalDeclaration
Cannot use abbreviated destructuring syntax for keyword '
Cannot modify '
Cannot parse computed property name
Expected ']' to end end a computed property name
Expected a property name
Cannot use abbreviated destructuring syntax for reserved name '
Expected a ':' prior to a named destructuring property
Expected a closing '}' following a rest element destructuring pattern
Expected either a closing '}' or an ',' after a property destructuring pattern
Cannot use a private name as a 
Expected a parameter pattern or a ')' in parameter list
Invalid destructuring assignment target
new.target is only valid inside functions
new.target is not valid inside arrow functions in global code
"new." can only be followed with target
super is not valid in this context
super call is not valid in this context
import.meta is only valid inside modules
"import." can only be followed with meta
Cannot use new with import
import call expects exactly one argument
Cannot parse expression
Cannot parse base expression
Cannot call constructor in an optional chain
Cannot use super as the base of an optional chain
Cannot parse subscript expression
Expected '
' to 
subscript expression
super call is not valid in class field initializer context
Cannot use new with super call
Cannot parse call arguments
Cannot access private names from super
Cannot reference undeclared private field '
Expected a property name after 
'?.'
Cannot use tagged templates in an optional chain
Cannot use super as tag for tagged templates
Cannot parse template literal
compound expression
Cannot use 'await' within a parameter default expression
Cannot reference 'arguments' in class field initializer
arguments is not valid in this context
Invalid regular expression
Cannot parse function expression
bool JSC::Parser<JSC::Lexer<LChar>>::parseFunctionInfo(TreeBuilder &, JSC::FunctionNameRequirements, bool, JSC::ConstructorKind, JSC::SuperBinding, int, ParserFunctionInfo<TreeBuilder> &, JSC::Parser::FunctionDefinitionType, std::optional<int>) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::ASTBuilder]
Expected a '=>' after arrow function parameter declaration
Cannot declare function named 'await' 
Cannot declare 
 named 'await'
Cannot declare generator function named 'yield'
' is not a valid 
 name in strict mode
Function statements must have a name
Async function statements must have a name
Expected an opening '{' at the start of a 
 body
Parameters should match arguments offered as parameters in Function constructor
Cannot parse the body of this 
' is not a valid function name in strict mode
Expected a closing '}' after a 
typename TreeBuilder::FormalParameterList JSC::Parser<JSC::Lexer<LChar>>::parseFunctionParameters(TreeBuilder &, FunctionInfoType &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::SyntaxChecker, FunctionInfoType = JSC::ParserFunctionInfo<JSC::ASTBuilder>]
bool JSC::Parser<JSC::Lexer<LChar>>::parseFunctionInfo(TreeBuilder &, JSC::FunctionNameRequirements, bool, JSC::ConstructorKind, JSC::SuperBinding, int, ParserFunctionInfo<TreeBuilder> &, JSC::Parser::FunctionDefinitionType, std::optional<int>) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::SyntaxChecker]
typename TreeBuilder::FormalParameterList JSC::Parser<JSC::Lexer<LChar>>::parseFunctionParameters(TreeBuilder &, FunctionInfoType &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::SyntaxChecker, FunctionInfoType = JSC::ParserFunctionInfo<JSC::SyntaxChecker>]
Cannot parse body of this arrow function
Cannot parse body of this function
Cannot parse the arrow function expression
Cannot name a function 'arguments' in strict mode
Cannot name a function 'eval' in strict mode
Cannot declare a variable named 'arguments' in strict mode
Cannot declare a variable named 'eval' in strict mode
'use strict' directive not allowed inside a function with a non-simple parameter list
Invalid parameters or function name in strict mode
Expected ';' after variable declaration
Cannot use a private name to declare a variable
Cannot declare a variable named 
Cannot declare a let variable twice: '
Cannot declare a const variable twice: '
Cannot declare a var variable that shadows a let/const/class variable: '
Cannot export a duplicate name '
Expected expression as the intializer for the variable '
const declared variable '
 must have an initializer
Expected an initializer in destructuring variable declaration
Cannot parse expression statement
Cannot use 'await' as a label 
Cannot use 'yield' as a label 
Labels must be followed by a ':'
Attempted to redeclare the label '
Cannot find scope for the label '
Cannot parse statement
Failed to parse class
Cannot declare a class twice: '
Cannot export a duplicate class name: '
' is not a valid class name
Class statements must have a name
class name
Cannot parse the parent class name
Expected opening '{' at the start of a class body
computed property name
Cannot declare private method twice
Cannot declare a private method named '#constructor'
Cannot declare private field twice
Declared private setter with an already used name
Cannot declare a private static 
 if there is a non-static private 
 with used name
Cannot declare a private non-static 
 if there is a static private 
Cannot parse this method
Cannot declare class field named 'constructor'
Cannot declare private class field named '#constructor'
Cannot parse initializer for class field
Expected a ';' following a class field
 named 'constructor'
Cannot declare multiple constructors in a single class
Cannot declare a static method named 'prototype'
Cannot declare a getter or setter named 'constructor'
Cannot declare a private accessor named '#constructor'
Cannot declare a private setter or getter outside a class
Expected a parameter list for getter definition
Cannot parse getter definition
Expected a parameter list for setter definition
Cannot parse setter definition
Expected a parameter list for private setter definition
Cannot parse private setter definition
Expected a parameter list for private getter definition
Cannot parse private getter definition
instanceComputedName
staticComputedName
const char *JSC::stringArticleForFunctionMode(JSC::SourceParseMode)
Cannot use generator function declaration in single-statement context
Cannot parse this function
Cannot declare a function named '
Cannot declare a function that shadows a let/const/class/function variable '
Cannot export a duplicate function name: '
Cannot parse this async function
Cannot declare an async function named '
Cannot declare an async function that shadows a let/const/class/function variable '
Cannot use lexical declaration in single-statement context
Cannot use async function declaration in single-statement context
Cannot parse the body of the block statement
Expected a closing '}' at the end of a block statement
Function declarations are only allowed inside blocks or switch statements in strict mode
Function declarations are only allowed inside block statements or at the top level of a program
Expected valid function statement after 'function' keyword
 an 
'if' condition
Expected an expression as the condition for an if statement
Expected a statement as the body of an if block
Expected a statement as the body of an else block
Expected a statement following 'do'
do-while loop
do-while loop condition
Must provide an expression as a do-while loop condition
Unable to parse do-while loop condition
while loop condition
Must provide an expression as a while loop condition
Unable to parse while loop condition
Expected a statement as the body of a while loop
for-await-of can only be used in an async function or async generator
for-loop header
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<LChar>>::parseForStatement(TreeBuilder &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::SyntaxChecker]
can only declare a single variable in an enumeration
Expected either 'in' or 'of' in enumeration syntax
Expected 'of' in for-await syntax
Cannot assign to the loop variable inside a for-of loop header
Cannot assign to the loop variable inside a for-in loop header
Expected expression to enumerate
for-of header
for-in header
Expected statement as body of for-
 statement
Cannot parse for loop declarations
Unexpected a ';' in for-await-of header
const variables in for loops must have initializers
Cannot parse for loop condition expression
Expected a ';' after the for loop condition expression
Cannot parse for loop iteration expression
Expected a statement as the body of a for loop
Expected a reference on the left hand side of an enumeration statement
Cannot parse subject for-
Expected a statement as the body of a for-
loop
Left side of assignment is not a reference
'continue' is only valid inside a loop statement
Expected an identifier as the target for a continue statement
Cannot use the undeclared label '
Cannot continue to the label '
' as it is not targeting a loop
Expected a ';' following a targeted continue statement
'break' is only valid inside a switch or loop statement
Expected an identifier as the target for a break statement
Expected a ';' following a targeted break statement
Return statements are only valid inside functions
Cannot parse the return expression
Expected a ';' following a return statement
'with' statements are not valid in strict mode
subject of a 'with' statement
Cannot parse 'with' subject expression
A 'with' statement must have a body
subject of a 'switch'
Cannot parse switch subject expression
body of a 'switch'
Cannot parse switch clause
Expected a ':' after switch clause expression
Cannot parse the body of a switch clause
Cannot parse switch case expression
Expected a ':' after switch default clause
Cannot parse the body of a switch default clause
Expected expression after 'throw'
Cannot have a newline after 'throw'
Cannot parse expression for throw statement
Expected a ';' after a throw statement
Expected a block statement as body of a try statement
Cannot parse the body of try block
Unable to parse 'catch' block
'catch' target
Cannot declare a catch variable named '
Expected exception handler to be a block statement
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<LChar>>::parseTryStatement(TreeBuilder &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::SyntaxChecker]
Expected block statement for finally body
Cannot parse finally body
Try statements must have at least a catch or finally block
Debugger keyword must be followed by a ';'
'class' declaration is not directly within a block statement
Parse error
Cannot parse object literal property
Attempted to redefine __proto__ property
object literal
Expected a property name following keyword 'async'
Cannot parse expression for property declaration
Expected a parenthesis for argument list
Expected an identifier as property name
shorthand property name
Expected a ':' following the property name '
Expected ':' after property name
Cannot parse subject of a spread operation
Cannot parse assignment pattern
Expected '=' following assignment pattern
Left hand side of operator '
' must be a reference
 can't be the left hand side of an assignment expression
Cannot modify 'eval' in strict mode
Cannot modify 'arguments' in strict mode
Cannot parse the right hand side of an assignment expression
Cannot use yield expression out of generator
Cannot use yield expression within parameters
Cannot parse left hand side of ternary operator
Expected ':' in ternary operator
Cannot parse right hand side of ternary operator
Bare private name can only be used as the left-hand side of an `in` expression
Ambiguous unary expression in the left hand side of the exponentiation expression; parentheses must be used to disambiguate the expression
Coalescing and logical operators used together in the same expression; parentheses must be used to disambiguate
The 
 operator requires a reference expression
Cannot parse subexpression of 
operator
Cannot parse member expression
 can't come after a prefix operator
Prefix 
 operator applied to value that is not a reference
 can't come before a postfix operator
Postfix ++ operator applied to value that is not a reference
Postfix -- operator applied to value that is not a reference
' cannot be modified in strict mode
Cannot delete unqualified property '
Cannot delete private field 
prefix-decrement
decrement
prefix-increment
increment
logical-not
bitwise-not
const char *JSC::operatorString(bool, unsigned int)
Cannot parse arrow function expression
new.target
import.meta
const char *JSC::Parser<JSC::Lexer<LChar>>::metaPropertyName(TreeBuilder &, typename TreeBuilder::Expression) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::SyntaxChecker]
Cannot parse array literal element
Expected either a closing ']' or a ',' following an array element
The '...' operator should come before a target expression
Failed to parse await expression
Cannot parse async function expression
Cannot parse async generator function expression
Cannot parse expression in a comma expression
Expected opening '(' at start of argument list
Cannot parse function argument
The '...' operator should come before the target expression
argument list
Cannot parse head template element
Template literal expression cannot be empty
Cannot parse expression in template literal
Cannot parse template element
Expected a closing '}' following an expression in template literal
Expected an template element
Expected a binding element
Cannot declare a variable named '
Cannot destructure to a variable named '
Cannot declare a lexical variable twice: '
./parser/Nodes.h
virtual JSC::RegisterID *JSC::PrivateIdentifierNode::emitBytecode(JSC::BytecodeGenerator &, JSC::RegisterID *)
const char *JSC::Parser<JSC::Lexer<LChar>>::metaPropertyName(TreeBuilder &, typename TreeBuilder::Expression) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::ASTBuilder]
catch parameter name
expression name
const char *JSC::destructuringKindToVariableKindName(JSC::DestructuringKind)
Cannot parse the body of async arrow function
Cannot parse the body of async function
Exported binding '
' needs to refer to a top-level declared variable
Expected an exported name or a module export name string for the export declaration
Expected a well-formed-unicode string for the module export name
Expected 'from' before exported module name
Cannot parse the 'from' clause
Expected a ';' following a targeted export declaration
Only one 'default' export is allowed
Cannot parse the declaration
Expected a variable name or a module export name string for the export declaration
Cannot parse the named export
export list
Cannot use module export names if they reference variable names in the current module
Cannot use keyword as exported variable name
Expected 'function' keyword following 'async' keyword with no preceding line terminator
Expected either a declaration or a variable statement
Imported modules names must be string literals
Cannot parse the module name
Expected a ';' following a targeted import declaration
Cannot parse the default import
Cannot parse the namespace import
Expected an imported name or a module export name string for the import declaration
Cannot parse the named import
import list
Expected namespace import or import list
Expected 'from' before imported module name
Expected 'as' before imported binding name
Expected a variable name for the import declaration
Expected 'as' after the module export name string
Cannot use 'await' as an imported binding name
Cannot use keyword as imported binding name
Cannot declare an imported binding named 
Cannot declare an imported binding name twice: '
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<LChar>>::parseForStatement(TreeBuilder &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::ASTBuilder]
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<LChar>>::parseTryStatement(TreeBuilder &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::ASTBuilder]
Cannot parse the body of a generator
Cannot parse the async function
Cannot reference undeclared private names: "
typename TreeBuilder::FormalParameterList JSC::Parser<JSC::Lexer<UChar>>::parseFunctionParameters(TreeBuilder &, FunctionInfoType &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::ASTBuilder, FunctionInfoType = JSC::ParserFunctionInfo<JSC::ASTBuilder>]
bool JSC::Parser<JSC::Lexer<UChar>>::parseFunctionInfo(TreeBuilder &, JSC::FunctionNameRequirements, bool, JSC::ConstructorKind, JSC::SuperBinding, int, ParserFunctionInfo<TreeBuilder> &, JSC::Parser::FunctionDefinitionType, std::optional<int>) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::ASTBuilder]
typename TreeBuilder::FormalParameterList JSC::Parser<JSC::Lexer<UChar>>::parseFunctionParameters(TreeBuilder &, FunctionInfoType &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::SyntaxChecker, FunctionInfoType = JSC::ParserFunctionInfo<JSC::ASTBuilder>]
bool JSC::Parser<JSC::Lexer<UChar>>::parseFunctionInfo(TreeBuilder &, JSC::FunctionNameRequirements, bool, JSC::ConstructorKind, JSC::SuperBinding, int, ParserFunctionInfo<TreeBuilder> &, JSC::Parser::FunctionDefinitionType, std::optional<int>) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::SyntaxChecker]
typename TreeBuilder::FormalParameterList JSC::Parser<JSC::Lexer<UChar>>::parseFunctionParameters(TreeBuilder &, FunctionInfoType &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::SyntaxChecker, FunctionInfoType = JSC::ParserFunctionInfo<JSC::SyntaxChecker>]
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<UChar>>::parseForStatement(TreeBuilder &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::SyntaxChecker]
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<UChar>>::parseTryStatement(TreeBuilder &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::SyntaxChecker]
const char *JSC::Parser<JSC::Lexer<UChar>>::metaPropertyName(TreeBuilder &, typename TreeBuilder::Expression) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::SyntaxChecker]
const char *JSC::Parser<JSC::Lexer<UChar>>::metaPropertyName(TreeBuilder &, typename TreeBuilder::Expression) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::ASTBuilder]
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<UChar>>::parseForStatement(TreeBuilder &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::ASTBuilder]
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<UChar>>::parseTryStatement(TreeBuilder &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::ASTBuilder]
./parser/VariableEnvironment.cpp
void JSC::VariableEnvironment::markVariableAsCaptured(const RefPtr<WTF::UniquedStringImpl> &)
void JSC::VariableEnvironment::markVariableAsExported(const RefPtr<WTF::UniquedStringImpl> &)
JSC::CompactTDZEnvironmentMap::Handle::~Handle()
JSC::CompactTDZEnvironmentMap::Handle::Handle(const CompactTDZEnvironmentMap::Handle &)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/parser/VariableEnvironment.h
JSC::CompactTDZEnvironment &JSC::CompactTDZEnvironmentKey::environment()
LLInt
FTLForOSREntry
predicting 
NotJettisoned
WeakReference
DebuggerBreakpoint
DebuggerStepping
BaselineLoopReoptimizationTrigger
BaselineLoopReoptimizationTriggerOnOSREntryFail
OSRExit
ProfiledWatchpoint
UnprofiledWatchpoint
JettisonDueToOldAge
JettisonDueToVMTraps
./profiler/ProfilerJettisonReason.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::Profiler::JettisonReason)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSObject.h
auto JSC::JSObject::putDirectIndex(JSC::JSGlobalObject *, unsigned int, JSC::JSValue, unsigned int, JSC::PutDirectIndexMode)::(anonymous class)::operator()() const
AbstractModuleRecord
dependenciesMap
Exported binding name '
' is not found.
Exported binding name 'default' cannot be resolved by star export entries.
./runtime/AbstractModuleRecord.cpp
JSC::Synchronousness JSC::AbstractModuleRecord::link(JSC::JSGlobalObject *, JSC::JSValue)
JSC::JSValue JSC::AbstractModuleRecord::evaluate(JSC::JSGlobalObject *, JSC::JSValue, JSC::JSValue)
Analyzing ModuleRecord key(
    Dependencies: 
 modules
      module(
    Import: 
 entries
      import(
), local(
), module(
    Export: 
      [Local] 
export(
      [Indirect] 
), import(
      [Namespace] 
      [Star] module(
Function
./runtime/ArrayBuffer.cpp
JSC::ArrayBufferContents::ArrayBufferContents(void *, size_t, JSC::ArrayBufferDestructorFunction &&)
void JSC::ArrayBufferContents::transferTo(JSC::ArrayBufferContents &)
void JSC::ArrayBufferContents::copyTo(JSC::ArrayBufferContents &)
void JSC::ArrayBufferContents::shareWith(JSC::ArrayBufferContents &)
void JSC::ArrayBuffer::setSharingMode(JSC::ArrayBufferSharingMode)
Array buffer was detached
Cannot transfer a SharedArrayBuffer
Cannot transfer a WebAssembly.Memory
Cannot transfer an ArrayBuffer whose backing store has been accessed by the JavaScriptCore C API
./runtime/ArrayBufferView.cpp
JSC::ArrayBufferView::ArrayBufferView(RefPtr<JSC::ArrayBuffer> &&, size_t, size_t)
Array size is not a small enough positive integer.
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
./runtime/ExceptionScope.h
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/AbstractSlotVisitorInlines.h
JSC::AbstractSlotVisitor::ReferrerContext::ReferrerContext(JSC::AbstractSlotVisitor &, JSC::AbstractSlotVisitor::ReferrerToken)
./runtime/DisallowVMEntry.h
from
Array.isArray cannot be called on a Proxy that has been revoked
Array Iterator
Array
reverse
splice
unshift
indexOf
lastIndexOf
AsyncFromSyncIterator
AsyncFunction
AsyncGeneratorFunction
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
Species construction did not get a valid constructor
toLocaleString is not callable
Invalid array length
push cannot produce an array of length larger than (2 ** 53) - 1
./runtime/JSArrayInlines.h
./runtime/ArrayPrototype.cpp
Splice cannot produce an array of length larger than (2 ** 53) - 1
void JSC::shift(JSC::JSGlobalObject *, JSC::JSObject *, uint64_t, uint64_t, uint64_t, uint64_t) [shiftCountMode = JSC::JSArray::ShiftCountForSplice]
void JSC::unshift(JSC::JSGlobalObject *, JSC::JSObject *, uint64_t, uint64_t, uint64_t, uint64_t) [shiftCountMode = JSC::JSArray::ShiftCountForSplice]
unshift cannot produce an array of length larger than (2 ** 53) - 1
void JSC::unshift(JSC::JSGlobalObject *, JSC::JSObject *, uint64_t, uint64_t, uint64_t, uint64_t) [shiftCountMode = JSC::JSArray::ShiftCountForShift]
next
return
throw
AsyncGenerator
AsyncIterator
Atomics
compareExchange
exchange
isLockFree
load
notify
store
wait
BasicBlock: [%d, %d] hasExecuted: %s, executionCount:
true
false
Function
BigInt
next
return
throw
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
Typed array for wait/notify must wrap a SharedArrayBuffer.
./runtime/AtomicsObject.cpp
JSC::EncodedJSValue JSC::atomicsFuncWait(JSC::JSGlobalObject *, JSC::CallFrame *)
Typed array argument must be an Int32Array or BigInt64Array.
accessIndex
Access index out of bounds for atomic access.
Atomics.wait cannot be called from the current thread.
JSC::EncodedJSValue JSC::atomicsFuncNotify(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::(anonymous namespace)::atomicStore(JSC::JSGlobalObject *, JSC::VM &, JSC::JSValue, JSC::JSValue, JSC::JSValue)
Typed array argument must be an Int8Array, Int16Array, Int32Array, Uint8Array, Uint16Array, Uint32Array, BigInt64Array, or BigUint64Array.
asUintN
asIntN
number of bits
Not an integer
toString
toLocaleString
valueOf
'this' value must be a BigInt or BigIntObject
JSC::EncodedJSValue JSC::(anonymous namespace)::atomicReadModifyWrite(JSC::JSGlobalObject *, JSC::VM &, const JSC::JSValue *, const Func &) [Func = JSC::(anonymous namespace)::AddFunc]
JSC::EncodedJSValue JSC::(anonymous namespace)::atomicReadModifyWrite(JSC::JSGlobalObject *, JSC::VM &, const JSC::JSValue *, const Func &) [Func = JSC::(anonymous namespace)::AndFunc]
JSC::EncodedJSValue JSC::(anonymous namespace)::atomicReadModifyWrite(JSC::JSGlobalObject *, JSC::VM &, const JSC::JSValue *, const Func &) [Func = JSC::(anonymous namespace)::CompareExchangeFunc]
JSC::EncodedJSValue JSC::(anonymous namespace)::atomicReadModifyWrite(JSC::JSGlobalObject *, JSC::VM &, const JSC::JSValue *, const Func &) [Func = JSC::(anonymous namespace)::ExchangeFunc]
JSC::EncodedJSValue JSC::(anonymous namespace)::atomicReadModifyWrite(JSC::JSGlobalObject *, JSC::VM &, const JSC::JSValue *, const Func &) [Func = JSC::(anonymous namespace)::LoadFunc]
JSC::EncodedJSValue JSC::(anonymous namespace)::atomicReadModifyWrite(JSC::JSGlobalObject *, JSC::VM &, const JSC::JSValue *, const Func &) [Func = JSC::(anonymous namespace)::OrFunc]
JSC::EncodedJSValue JSC::(anonymous namespace)::atomicReadModifyWrite(JSC::JSGlobalObject *, JSC::VM &, const JSC::JSValue *, const Func &) [Func = JSC::(anonymous namespace)::SubFunc]
JSC::EncodedJSValue JSC::(anonymous namespace)::atomicReadModifyWrite(JSC::JSGlobalObject *, JSC::VM &, const JSC::JSValue *, const Func &) [Func = JSC::(anonymous namespace)::XorFunc]
Boolean
Could not write the full cache file to disk. Only wrote 
 of the expected 
uid:(
,cell:(
toString
valueOf
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
./runtime/CachedSpecialPropertyAdaptiveStructureWatchpoint.cpp
JSC::CachedSpecialPropertyAdaptiveStructureWatchpoint::CachedSpecialPropertyAdaptiveStructureWatchpoint(const JSC::ObjectPropertyCondition &, JSC::StructureRareData *)
void JSC::CachedSpecialPropertyAdaptiveStructureWatchpoint::install(JSC::VM &)
./runtime/CachedTypes.cpp
CompactTDZEnvironmentMap::Handle JSC::Decoder::handleForTDZEnvironment(JSC::CompactTDZEnvironment *) const
void JSC::Decoder::setHandleForTDZEnvironment(JSC::CompactTDZEnvironment *, const CompactTDZEnvironmentMap::Handle &)
bool JSC::GenericCacheEntry::decode(JSC::Decoder &, std::pair<SourceCodeKey, UnlinkedCodeBlock *> &) const
bool JSC::GenericCacheEntry::isStillValid(JSC::Decoder &, const JSC::SourceCodeKey &, JSC::CachedCodeBlockTag) const
./runtime/CallData.cpp
JSC::JSValue JSC::call(JSC::JSGlobalObject *, JSC::JSValue, const JSC::CallData &, JSC::JSValue, const JSC::ArgList &, NakedPtr<JSC::Exception> &)
Arguments
./runtime/ClonedArguments.cpp
void JSC::ClonedArguments::materializeSpecials(JSC::JSGlobalObject *)
./runtime/CodeCache.cpp
JSC::UnlinkedFunctionExecutable *JSC::CodeCache::getUnlinkedGlobalFunctionExecutable(JSC::VM &, const JSC::Identifier &, const JSC::SourceCode &, OptionSet<JSC::CodeGenerationMode>, std::optional<int>, JSC::ParserError &)
Call
Construct
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
const T *JSC::CachedPtr<JSC::CachedUniquedStringImpl, WTF::UniquedStringImpl>::get() const [T = JSC::CachedUniquedStringImpl, Source = WTF::UniquedStringImpl]
auto JSC::CachedUniquedStringImplBase<WTF::UniquedStringImpl>::decode(JSC::Decoder &)::(anonymous class)::operator()(const auto *) const [T = WTF::UniquedStringImpl, buffer:auto = unsigned char]
auto JSC::CachedUniquedStringImplBase<WTF::UniquedStringImpl>::decode(JSC::Decoder &)::(anonymous class)::operator()(const auto *) const [T = WTF::UniquedStringImpl, buffer:auto = char16_t]
void JSC::Encoder::Page::alignEnd()
RefPtr<JSC::CachedBytecode> JSC::Encoder::release(JSC::BytecodeCacheError &)
ptrdiff_t JSC::Encoder::offsetOf(const void *)
JSC::Encoder::Allocation JSC::Encoder::malloc(unsigned int)
void JSC::CachedJSValue::encode(JSC::Encoder &, const WriteBarrier<JSC::Unknown>)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSObject.h
auto JSC::JSObject::putDirectIndex(JSC::JSGlobalObject *, unsigned int, JSC::JSValue, unsigned int, JSC::PutDirectIndexMode)::(anonymous class)::operator()() const
const T *JSC::CachedPtr<JSC::CachedSourceProvider, JSC::SourceProvider>::get() const [T = JSC::CachedSourceProvider, Source = JSC::SourceProvider]
JSC::SourceProvider *JSC::CachedSourceProvider::decode(JSC::Decoder &) const
[WebAssembly source]
const T *JSC::CachedPtr<JSC::CachedProgramCodeBlock, JSC::UnlinkedProgramCodeBlock>::get() const [T = JSC::CachedProgramCodeBlock, Source = JSC::UnlinkedProgramCodeBlock]
const T *JSC::CachedPtr<JSC::CachedStringImpl, WTF::StringImpl>::get() const [T = JSC::CachedStringImpl, Source = WTF::StringImpl]
auto JSC::CachedUniquedStringImplBase<WTF::StringImpl>::decode(JSC::Decoder &)::(anonymous class)::operator()(const auto *) const [T = WTF::StringImpl, buffer:auto = unsigned char]
auto JSC::CachedUniquedStringImplBase<WTF::StringImpl>::decode(JSC::Decoder &)::(anonymous class)::operator()(const auto *) const [T = WTF::StringImpl, buffer:auto = char16_t]
const T *JSC::CachedPtr<JSC::CachedInstructionStream, JSC::InstructionStream>::get() const [T = JSC::CachedInstructionStream, Source = JSC::InstructionStream]
const T *JSC::CachedPtr<JSC::CachedCodeBlockRareData, JSC::UnlinkedCodeBlock::RareData>::get() const [T = JSC::CachedCodeBlockRareData, Source = JSC::UnlinkedCodeBlock::RareData]
void JSC::CachedJSValue::decode(JSC::Decoder &, WriteBarrier<JSC::Unknown> &, const JSC::JSCell *) const
const T *JSC::CachedPtr<JSC::CachedScopedArgumentsTable, JSC::ScopedArgumentsTable>::get() const [T = JSC::CachedScopedArgumentsTable, Source = JSC::ScopedArgumentsTable]
JSC::ScopedArgumentsTable *JSC::CachedScopedArgumentsTable::decode(JSC::Decoder &) const
const T *JSC::CachedPtr<JSC::CachedSymbolTableRareData, JSC::SymbolTable::SymbolTableRareData>::get() const [T = JSC::CachedSymbolTableRareData, Source = JSC::SymbolTable::SymbolTableRareData]
JSC::JSBigInt *JSC::CachedBigInt::decode(JSC::Decoder &) const
const T *JSC::CachedPtr<JSC::CachedFunctionExecutable, JSC::UnlinkedFunctionExecutable>::get() const [T = JSC::CachedFunctionExecutable, Source = JSC::UnlinkedFunctionExecutable]
const T *JSC::CachedPtr<JSC::CachedFunctionExecutableRareData, JSC::UnlinkedFunctionExecutable::RareData>::get() const [T = JSC::CachedFunctionExecutableRareData, Source = JSC::UnlinkedFunctionExecutable::RareData]
const T *JSC::CachedPtr<JSC::CachedTDZEnvironmentLink, JSC::TDZEnvironmentLink>::get() const [T = JSC::CachedTDZEnvironmentLink, Source = JSC::TDZEnvironmentLink]
const T *JSC::CachedPtr<JSC::CachedCompactTDZEnvironment, JSC::CompactTDZEnvironment>::get() const [T = JSC::CachedCompactTDZEnvironment, Source = JSC::CompactTDZEnvironment]
const T *JSC::CachedPtr<JSC::CachedVariableEnvironmentRareData, JSC::VariableEnvironment::RareData>::get() const [T = JSC::CachedVariableEnvironmentRareData, Source = JSC::VariableEnvironment::RareData]
const T *JSC::CachedPtr<JSC::CachedModuleCodeBlock, JSC::UnlinkedModuleProgramCodeBlock>::get() const [T = JSC::CachedModuleCodeBlock, Source = JSC::UnlinkedModuleProgramCodeBlock]
void JSC::CachedSourceProvider::encode(JSC::Encoder &, const JSC::SourceProvider &)
const T *JSC::CachedPtr<JSC::CachedFunctionCodeBlock, JSC::UnlinkedFunctionCodeBlock>::get() const [T = JSC::CachedFunctionCodeBlock, Source = JSC::UnlinkedFunctionCodeBlock]
auto JSC::ClonedArguments::createStructure(JSC::VM &, JSC::JSGlobalObject *, JSC::JSValue, JSC::IndexingType)::(anonymous class)::operator()(const JSC::GCSafeConcurrentJSLocker &, JSC::PropertyOffset, JSC::PropertyOffset) const
./runtime/CodeCache.h
std::enable_if_t<std::is_base_of<UnlinkedCodeBlock, UnlinkedCodeBlockType>::value && !std::is_same<UnlinkedCodeBlockType, UnlinkedEvalCodeBlock>::value, UnlinkedCodeBlockType *> JSC::CodeCacheMap::fetchFromDisk(JSC::VM &, const JSC::SourceCodeKey &) [UnlinkedCodeBlockType = JSC::UnlinkedProgramCodeBlock]
std::enable_if_t<std::is_base_of<UnlinkedCodeBlock, UnlinkedCodeBlockType>::value && !std::is_same<UnlinkedCodeBlockType, UnlinkedEvalCodeBlock>::value, UnlinkedCodeBlockType *> JSC::CodeCacheMap::fetchFromDisk(JSC::VM &, const JSC::SourceCodeKey &) [UnlinkedCodeBlockType = JSC::UnlinkedModuleProgramCodeBlock]
__proto__
await
break
case
const
continue
debugger
delete
else
enum
export
extends
implements
import
instanceof
interface
package
private
protected
public
static
super
switch
typeof
void
while
with
yield
Atomics
BYTES_PER_ELEMENT
BigInt
Collator
Date
DateTimeFormat
DisplayNames
Error
EvalError
FinalizationRegistry
Intl
ListFormat
Loader
Locale
NumberFormat
PluralRules
Reflect
RelativeTimeFormat
RemotePlayback
Segmenter
SharedArrayBuffer
Temporal
WeakRef
__defineGetter__
__defineSetter__
__lookupGetter__
__lookupSetter__
additionalJettisonReason
async
back
byteLength
byteOffset
bytecode
bytecodeIndex
bytecodes
bytecodesID
caseFirst
cause
clear
collation
compilationKind
compilationUID
compilations
compile
counters
dateStyle
days
deref
description
descriptions
detail
dotAll
eraYear
errors
events
exitKind
fallback
formatMatcher
formatToParts
forward
fractionalSecondDigits
granularity
groups
hasIndices
hasOwn
hasOwnProperty
hash
hours
hourCycle
hour12
ignoreCase
ignorePunctuation
indices
inferredName
input
isoHour
isoMicrosecond
isoMillisecond
isoMinute
isoNanosecond
isoSecond
instructionCount
isEnabled
isPrototypeOf
isWatchpoint
isWordLike
jettisonReason
join
language
languageDisplay
largestUnit
lastIndex
locale
localeMatcher
maximumFractionDigits
maximumSignificantDigits
microsecond
microseconds
millisecond
milliseconds
minimumFractionDigits
minimumIntegerDigits
minimumSignificantDigits
minutes
monthCode
months
multiline
nanosecond
nanoseconds
numInlinedCalls
numInlinedGetByIds
numInlinedPutByIds
numberingSystem
opcode
origin
osrExitSites
osrExits
overflow
parseInt
parseFloat
profiledBytecodes
propertyIsEnumerable
region
roundingIncrement
roundingMode
roundingPriority
script
seconds
segment
selectRange
sensitivity
slice
smallestUnit
sourceCode
stack
stackTraceLimit
sticky
style
summary
time
timeStyle
timeZone
toExponential
toFixed
toISOString
toJSON
toPrecision
toTemporalInstant
trailingZeroDisplay
unicode
usage
valueOf
week
weeks
years
#constructor
CommonSlowPaths
'super()' must be called in derived constructor before accessing |this| or returning non-object.
LLInt log full.
./runtime/CommonSlowPaths.cpp
JSC::SlowPathReturnType JSC::slow_path_throw_static_error(JSC::CallFrame *, const JSC::Instruction *)
JSC::SlowPathReturnType JSC::slow_path_new_array_with_spread(JSC::CallFrame *, const JSC::Instruction *)
CompilationFailed
CompilationInvalidated
CompilationSuccessful
CompilationDeferred
./runtime/CompilationResult.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::CompilationResult)
./runtime/Completion.cpp
bool JSC::checkSyntax(JSC::JSGlobalObject *, const JSC::SourceCode &, JSC::JSValue *)
bool JSC::checkSyntax(JSC::VM &, const JSC::SourceCode &, JSC::ParserError &)
bool JSC::checkModuleSyntax(JSC::JSGlobalObject *, const JSC::SourceCode &, JSC::ParserError &)
EntryPointModule
RefPtr<JSC::CachedBytecode> JSC::generateProgramBytecode(JSC::VM &, const JSC::SourceCode &, FileSystem::PlatformFileHandle, JSC::BytecodeCacheError &)
RefPtr<JSC::CachedBytecode> JSC::generateModuleBytecode(JSC::VM &, const JSC::SourceCode &, FileSystem::PlatformFileHandle, JSC::BytecodeCacheError &)
JSC::JSValue JSC::evaluate(JSC::JSGlobalObject *, const JSC::SourceCode &, JSC::JSValue, NakedPtr<JSC::Exception> &)
JSC::JSInternalPromise *JSC::loadAndEvaluateModule(JSC::JSGlobalObject *, JSC::Symbol *, JSC::JSValue, JSC::JSValue)
JSC::JSInternalPromise *JSC::loadAndEvaluateModule(JSC::JSGlobalObject *, const WTF::String &, JSC::JSValue, JSC::JSValue)
JSC::JSInternalPromise *JSC::loadAndEvaluateModule(JSC::JSGlobalObject *, const JSC::SourceCode &, JSC::JSValue)
JSC::JSInternalPromise *JSC::loadModule(JSC::JSGlobalObject *, const WTF::String &, JSC::JSValue, JSC::JSValue)
JSC::JSInternalPromise *JSC::loadModule(JSC::JSGlobalObject *, const JSC::SourceCode &, JSC::JSValue)
JSC::JSValue JSC::linkAndEvaluateModule(JSC::JSGlobalObject *, const JSC::Identifier &, JSC::JSValue)
JSC::JSInternalPromise *JSC::importModule(JSC::JSGlobalObject *, const JSC::Identifier &, JSC::JSValue, JSC::JSValue)
Error in JSC Config file on or near line %u, parsing '%s'
(unknown)
console
warn
dirxml
table
trace
countReset
profile
profileEnd
timeLog
timeEnd
timeStamp
takeHeapSnapshot
groupCollapsed
groupEnd
recordEnd
screenshot
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
./runtime/CommonSlowPaths.h
JSC::JSValue JSC::CommonSlowPaths::opEnumeratorGetByVal(JSC::JSGlobalObject *, JSC::JSValue, JSC::JSValue, unsigned int, JSPropertyNameEnumerator::Flag, JSC::JSPropertyNameEnumerator *, JSC::ArrayProfile *, uint8_t *)
./runtime/GetPutInfo.h
Failed to open file JSC Config file '%s'.
jscOptions
logFile
%s/%s
processName
parentProcessName
build
Release
NETWORK
STORAGE
APPCACHE
RENDERING
SECURITY
CONTENTBLOCKER
MEDIA
MEDIASOURCE
WEBRTC
ITPDEBUG
PRIVATECLICKMEASUREMENT
PAYMENTREQUEST
OTHER
CLEAR
DIRXML
TABLE
TRACE
STARTGROUP
STARTGROUPCOLLAPSED
ENDGROUP
ASSERT
TIMING
PROFILE
PROFILEEND
IMAGE
DEBUG
INFO
WARN
ERROR
JSC::SlowPathReturnType JSC::iteratorNextTryFastImpl(JSC::VM &, JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::CallFrame *, JSC::ThrowScope &, const JSC::Instruction *) [width = JSC::Narrow]
JSC::SlowPathReturnType JSC::iteratorNextTryFastImpl(JSC::VM &, JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::CallFrame *, JSC::ThrowScope &, const JSC::Instruction *) [width = JSC::Wide16]
JSC::SlowPathReturnType JSC::iteratorNextTryFastImpl(JSC::VM &, JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::CallFrame *, JSC::ThrowScope &, const JSC::Instruction *) [width = JSC::Wide32]
SourceID: 
CustomGetterSetter
DOMAttributeGetterSetter
Function
Date
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
./runtime/ControlFlowProfiler.cpp
JSC::BasicBlockRange JSC::findBasicBlockAtTextOffset(int, const Vector<JSC::BasicBlockRange> &)
parse
Object
toUTCString
toGMTString
./runtime/DeferredWorkTimer.cpp
DeferredWorkTimer::Ticket JSC::DeferredWorkTimer::addPendingWork(JSC::VM &, JSC::JSObject *, Vector<Strong<JSC::JSCell>> &&)
Arguments
./runtime/DirectArguments.cpp
void JSC::DirectArguments::overrideThings(JSC::JSGlobalObject *)
capturedArgumentInvalid
capturedArgument
StrictMode
NotStrictMode
toString
toISOString
toDateString
toTimeString
toLocaleString
toLocaleDateString
toLocaleTimeString
valueOf
getTime
getFullYear
getUTCFullYear
getMonth
getUTCMonth
getDate
getUTCDate
getDay
getUTCDay
getHours
getUTCHours
getMinutes
getUTCMinutes
getSeconds
getUTCSeconds
getMilliseconds
getUTCMilliseconds
getTimezoneOffset
getYear
setTime
setMilliseconds
setUTCMilliseconds
setSeconds
setUTCSeconds
setMinutes
setUTCMinutes
setHours
setUTCHours
setDate
setUTCDate
setMonth
setUTCMonth
setFullYear
setUTCFullYear
setYear
toJSON
Invalid Date
%+07d-%02d-%02dT%02d:%02d:%02d.%03dZ
%04d-%02d-%02dT%02d:%02d:%02d.%03dZ
toISOString is not a function
Date.prototype[Symbol.toPrimitive] expected |this| to be an object.
Date.prototype[Symbol.toPrimitive] expected a first argument.
Invalid integer number of Epoch Millseconds
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
./runtime/GenericArgumentsInlines.h
void JSC::GenericArguments<JSC::DirectArguments>::initModifiedArgumentsDescriptor(JSC::JSGlobalObject *, unsigned int) [Type = JSC::DirectArguments]
Not enough arguments
 getter can only be used on instances of 
 setter can only be used on instances of 
calling 
 constructor without new is invalid
Syntax error
Type error
Out of memory
Out of memory: 
Function
./runtime/ErrorHandlingScope.cpp
JSC::ErrorHandlingScope::ErrorHandlingScope(JSC::VM &)
JSC::ErrorHandlingScope::~ErrorHandlingScope()
Error
Object
EvalError
RangeError
ReferenceError
SyntaxError
TypeError
URIError
AggregateError
OutOfMemoryError
EvalExecutable
toString
Exception
JSC EXCEPTION FUZZ: Throwing fuzz exception with call frame %p, seen in %s and return address %p.
Exception Fuzz
Maximum call stack size exceeded.
Can't find private variable: PrivateSymbol.
Can't find variable: 
 (evaluating '
second argument to Function.prototype.apply must be an Array-like object
is not an Object.
 is not a function
[Symbol.hasInstance] is not a function, undefined, or null
is not a constructor
is not a function
is not an object
is not an object or null
Cannot access uninitialized variable.
Cannot access invalid private field
Cannot redefine existing private field
Cannot access private method or acessor
Cannot install same private methods on object more than once
Executable
NativeExecutable:
EvalExecutable w/o CodeBlock
ProgramExecutable w/o CodeBlock
ModuleProgramExecutable w/o CodeBlock
FunctionExecutable w/o CodeBlock
./runtime/ExecutableBase.cpp
void JSC::ExecutableBase::dump(WTF::PrintStream &) const
./runtime/FileBasedFuzzerAgent.cpp
virtual JSC::SpeculatedType JSC::FileBasedFuzzerAgent::getPredictionInternal(JSC::CodeBlock *, JSC::PredictionTarget &, JSC::SpeculatedType)
[35m
[33m
 missing prediction for: 
[31m
[32m
[36m
 divot: 
 name: '
' source: '
[34m
 original: 
 generated: 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
 (near '...
...')
 is not an Object. (evaluating '
. (evaluating '
./runtime/ExceptionHelpers.cpp
WTF::String JSC::notAFunctionSourceAppender(const WTF::String &, const WTF::String &, JSC::RuntimeType, ErrorInstance::SourceTextWhereErrorOccurred)
 is not a function. (In '
object is not a function.
The value of the superclass's prototype property is not an object or null.
Function
FinalizationRegistry
register
unregister
FunctionExecutable
./runtime/FunctionExecutable.cpp
JSC::FunctionExecutable::FunctionExecutable(JSC::VM &, const JSC::SourceCode &, JSC::UnlinkedFunctionExecutable *, JSC::Intrinsic, bool)
JSC::FunctionCodeBlock *JSC::FunctionExecutable::baselineCodeBlockFor(JSC::CodeSpecializationKind)
() {
    [native code]
function* 
async function 
async 
async function* 
<nogen>
FunctionRareData
AllocationProfileClearingWatchpoint fired.
First argument to FinalizationRegistry should be a function
register requires an object as the target
register expects the target object and the holdings parameter are not the same. Otherwise, the target can never be collected
register requires an object as the unregistration token
Called FinalizationRegistry function on non-object
Called FinalizationRegistry function on a non-FinalizationRegistry object
unregister requires an object is the unregistration token
function *
async function*
() {
() {
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = JSC::RetrieveArgumentsFunctor]
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = JSC::RetrieveCallerFunctionFunctor]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/ObjectAllocationProfileInlines.h
void JSC::ObjectAllocationProfileBase<JSC::ObjectAllocationProfileWithPrototype>::initializeProfile(JSC::VM &, JSC::JSGlobalObject *, JSC::JSCell *, JSC::JSObject *, unsigned int, JSC::JSFunction *, JSC::FunctionRareData *) [Derived = JSC::ObjectAllocationProfileWithPrototype]
./runtime/FuzzerPredictions.cpp
JSC::FuzzerPredictions::FuzzerPredictions(const char *)
GeneratorFunction
Generator
GetterSetter
GlobalExecutable
WTF::String JSC::readFileIntoString(const char *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
next
return
throw
ThrowIfNotFound
DoNotThrowIfNotFound
GlobalProperty
GlobalVar
GlobalLexicalVar
ClosureVar
ResolvedClosureVar
ModuleVar
GlobalPropertyWithVarInjectionChecks
GlobalVarWithVarInjectionChecks
GlobalLexicalVarWithVarInjectionChecks
ClosureVarWithVarInjectionChecks
UnresolvedProperty
UnresolvedPropertyWithVarInjectionChecks
Dynamic
Initialization
ConstInitialization
NotInitialization
./runtime/GetterSetter.h
static bool JSC::GetterSetter::put(JSC::JSCell *, JSC::JSGlobalObject *, JSC::PropertyName, JSC::JSValue, JSC::PutPropertySlot &)
static bool JSC::GetterSetter::putByIndex(JSC::JSCell *, JSC::JSGlobalObject *, unsigned int, JSC::JSValue, bool)
static bool JSC::GetterSetter::deleteProperty(JSC::JSCell *, JSC::JSGlobalObject *, JSC::PropertyName, JSC::DeletePropertySlot &)
static bool JSC::GetterSetter::getOwnPropertySlot(JSC::JSObject *, JSC::JSGlobalObject *, JSC::PropertyName, JSC::PropertySlot &)
static bool JSC::GetterSetter::defineOwnProperty(JSC::JSObject *, JSC::JSGlobalObject *, JSC::PropertyName, const JSC::PropertyDescriptor &, bool)
static bool JSC::GetterSetter::setPrototype(JSC::JSObject *, JSC::JSGlobalObject *, JSC::JSValue, bool)
./runtime/HashMapImplInlines.h
void JSC::HashMapImpl<JSC::HashMapBucket<JSC::HashMapBucketDataKeyValue>>::finishCreation(JSC::JSGlobalObject *, JSC::VM &, HashMapImpl<HashMapBucketType> *) [HashMapBucketType = JSC::HashMapBucket<JSC::HashMapBucketDataKeyValue>]
void JSC::HashMapImpl<JSC::HashMapBucket<JSC::HashMapBucketDataKey>>::finishCreation(JSC::JSGlobalObject *, JSC::VM &, HashMapImpl<HashMapBucketType> *) [HashMapBucketType = JSC::HashMapBucket<JSC::HashMapBucketDataKey>]
HashMapBucket
PrivateSymbol.
<null identifier>
NonArray
NonArrayWithInt32
NonArrayWithDouble
NonArrayWithContiguous
NonArrayWithArrayStorage
NonArrayWithSlowPutArrayStorage
ArrayClass
ArrayWithUndecided
ArrayWithInt32
ArrayWithDouble
ArrayWithContiguous
ArrayWithArrayStorage
ArrayWithSlowPutArrayStorage
CopyOnWriteArrayWithInt32
CopyOnWriteArrayWithDouble
CopyOnWriteArrayWithContiguous
Unknown!
%s%s
|MayHaveIndexedAccessors
Function
Allocated masquerading object
Cannot get function realm from revoked Proxy
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/AbstractSlotVisitorInlines.h
JSC::AbstractSlotVisitor::ReferrerContext::ReferrerContext(JSC::AbstractSlotVisitor &, JSC::AbstractSlotVisitor::ReferrerToken)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
./runtime/InitializeThreading.cpp
auto JSC::initialize()::(anonymous class)::operator()() const
Object
usage must be either "sort" or "search"
collation is not a well-formed collation value
caseFirst must be either "upper", "lower", or "false"
failed to initialize Collator due to invalid locale
accent
variant
sensitivity must be either "base", "accent", "case", or "variant"
-u-co-
-u-co-search
failed to initialize Collator
Failed to compare strings.
Function
Intl.Collator
Intl.Collator.prototype.compare called on value that's not a Collator
compare
Intl.DateTimeFormat
formatRangeToParts
Intl.DateTimeFormat.prototype.format called on value that's not a DateTimeFormat
format
failed to initialize DisplayNames due to invalid locale
style must be either "narrow", "short", or "long"
dateTimeField
type must be either "language", "region", "script", "currency", "calendar", or "dateTimeField"
type must not be undefined
none
fallback must be either "code" or "none"
dialect
languageDisplay must be either "dialect" or "standard"
failed to initialize DisplayNames
argument is not a language id
argument is not a region subtag
argument is not a script subtag
argument is not a well-formed currency code
Failed to query a display name.
argument is not a calendar code
argument is not a dateTimeField code
Intl.DisplayNames
supportedLocalesOf
resolvedOptions
Intl.Collator.prototype.resolvedOptions called on value that's not a Collator
formatRange
Intl.DateTimeFormat.prototype.formatRange called on value that's not a DateTimeFormat
startDate or endDate is undefined
startDate is larger than endDate
Intl.DateTimeFormat.prototype.formatToParts called on value that's not a DateTimeFormat
Intl.DateTimeFormat.prototype.resolvedOptions called on value that's not a DateTimeFormat
Intl.DateTimeFormat.prototype.formatRangeToParts called on value that's not a DateTimeFormat
Intl.DisplayNames.prototype.of called on value that's not a DisplayNames
Intl.DisplayNames.prototype.resolvedOptions called on value that's not a DisplayNames
Function
Intl.ListFormat
Object
invalid language tag
language is not a well-formed language value
script is not a well-formed script value
region is not a well-formed region value
colcasefirst
colnumeric
numbers
failed to initialize Locale
invalid locale
direction
firstDay
weekend
minimalDays
Locale
Intl.Locale
Intl.Locale.prototype.baseName called on value that's not a Locale
Intl.Locale.prototype.calendar called on value that's not a Locale
Intl.Locale.prototype.calendars called on value that's not a Locale
Intl.Locale.prototype.caseFirst called on value that's not a Locale
Intl.Locale.prototype.collation called on value that's not a Locale
Intl.Locale.prototype.collations called on value that's not a Locale
Intl.Locale.prototype.hourCycle called on value that's not a Locale
Intl.Locale.prototype.hourCycles called on value that's not a Locale
Intl.Locale.prototype.numeric called on value that's not a Locale
Intl.Locale.prototype.numberingSystem called on value that's not a Locale
Intl.Locale.prototype.numberingSystems called on value that's not a Locale
Intl.Locale.prototype.language called on value that's not a Locale
Intl.Locale.prototype.script called on value that's not a Locale
Intl.Locale.prototype.region called on value that's not a Locale
Intl.Locale.prototype.timeZones called on value that's not a Locale
Intl.Locale.prototype.textInfo called on value that's not a Locale
Intl.Locale.prototype.weekInfo called on value that's not a Locale
NumberFormat
Intl.NumberFormat
Intl.NumberFormat.prototype.format called on value that's not a NumberFormat
format
Intl
area
acre
digital
byte
temperature
celsius
length
centimeter
duration
angle
degree
fahrenheit
volume
fluid-ounce
foot
gallon
gigabit
gigabyte
mass
gram
hectare
hour
inch
kilobit
kilobyte
kilogram
kilometer
liter
megabit
megabyte
meter
mile
mile-scandinavian
milliliter
millimeter
millisecond
minute
month
ounce
concentr
percent
petabyte
pound
second
stone
terabit
terabyte
week
yard
year
supportedValuesOf
 is out of range
locale value must be a string or object
invalid language tag: 
lookup
best fit
localeMatcher must be either "lookup" or "best fit"
gregorian
gregory
ethiopic-amete-alem
ethioaa
islamic-civil
dict
gb2312
phonebk
trad
supportedLocalesOf
formatToParts
resolvedOptions
Intl.ListFormat.prototype.format called on value that's not a ListFormat
Intl.ListFormat.prototype.formatToParts called on value that's not a ListFormat
Intl.ListFormat.prototype.resolvedOptions called on value that's not a ListFormat
First argument to Intl.Locale must be a string or an object
maximize
minimize
baseName
calendars
collations
hourCycles
numberingSystems
timeZones
textInfo
weekInfo
Intl.Locale.prototype.maximize called on value that's not a Locale
Intl.Locale.prototype.minimize called on value that's not a Locale
Intl.Locale.prototype.toString called on value that's not a Locale
Intl.NumberFormat.prototype.formatToParts called on value that's not a NumberFormat
Intl.NumberFormat.prototype.resolvedOptions called on value that's not a NumberFormat
Intl.NumberFormat.prototype.formatRange called on value that's not a NumberFormat
start or end is undefined
Intl.NumberFormat.prototype.formatRangeToParts called on value that's not a NumberFormat
getCanonicalLocales
Collator
DateTimeFormat
DisplayNames
PluralRules
RelativeTimeFormat
Segmenter
./runtime/IntlObject.cpp
JSC::MatcherResult JSC::lookupMatcher(JSC::JSGlobalObject *, const JSC::LocaleSet &, const Vector<WTF::String> &)
Unknown key for Intl.supportedValuesOf
failed to enumerate available collations
emoji
failed to enumerate available currencies
failed to enumerate available numbering systems
auto JSC::iso8601CalendarIDSlow()::(anonymous class)::operator()() const
SystemV/
Etc/
Etc/UTC
Etc/GMT
Function
PluralRules
Intl.PluralRules
Object
failed to initialize RelativeTimeFormat due to invalid locale
numeric must be either "always" or "auto"
failed to initialize RelativeTimeFormat
number argument must be finite
unit argument is not a recognized unit type
failed to format relative time
RelativeTimeFormat
Intl.RelativeTimeFormat
Segment String Iterator
failed to initialize Segmenter due to invalid locale
grapheme
word
sentence
granularity must be either "grapheme", "word", or "sentence"
failed to initialize Segmenter
failed to initialize Segments
supportedLocalesOf
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
select
resolvedOptions
Intl.PluralRules.prototype.select called on value that's not a PluralRules
Intl.PluralRules.prototype.resolvedOptions called on value that's not a PluralRules
Intl.PluralRules.prototype.selectRange called on value that's not a PluralRules
quarter
format
formatToParts
Intl.RelativeTimeFormat.prototype.format called on value that's not a RelativeTimeFormat
Intl.RelativeTimeFormat.prototype.formatToParts called on value that's not a RelativeTimeFormat
Intl.RelativeTimeFormat.prototype.resolvedOptions called on value that's not a RelativeTimeFormat
next
Intl.SegmentIterator.prototype.next called on value that's not a SegmentIterator
Function
Segmenter
Intl.Segmenter
Object
failed to initialize SegmentIterator
%Segments%
NoIntrinsic
AbsIntrinsic
ACosIntrinsic
ASinIntrinsic
ATanIntrinsic
ACoshIntrinsic
ASinhIntrinsic
ATanhIntrinsic
MinIntrinsic
MaxIntrinsic
SqrtIntrinsic
SinIntrinsic
CbrtIntrinsic
Clz32Intrinsic
CosIntrinsic
TanIntrinsic
CoshIntrinsic
SinhIntrinsic
TanhIntrinsic
ArrayIndexOfIntrinsic
ArrayPushIntrinsic
ArrayPopIntrinsic
ArraySliceIntrinsic
ArrayValuesIntrinsic
ArrayKeysIntrinsic
ArrayEntriesIntrinsic
CharCodeAtIntrinsic
CharAtIntrinsic
DatePrototypeGetTimeIntrinsic
DatePrototypeGetFullYearIntrinsic
DatePrototypeGetUTCFullYearIntrinsic
DatePrototypeGetMonthIntrinsic
DatePrototypeGetUTCMonthIntrinsic
DatePrototypeGetDateIntrinsic
DatePrototypeGetUTCDateIntrinsic
DatePrototypeGetDayIntrinsic
DatePrototypeGetUTCDayIntrinsic
DatePrototypeGetHoursIntrinsic
DatePrototypeGetUTCHoursIntrinsic
DatePrototypeGetMinutesIntrinsic
DatePrototypeGetUTCMinutesIntrinsic
DatePrototypeGetSecondsIntrinsic
DatePrototypeGetUTCSecondsIntrinsic
DatePrototypeGetMillisecondsIntrinsic
DatePrototypeGetUTCMillisecondsIntrinsic
DatePrototypeGetTimezoneOffsetIntrinsic
DatePrototypeGetYearIntrinsic
FromCharCodeIntrinsic
PowIntrinsic
FloorIntrinsic
CeilIntrinsic
RoundIntrinsic
ExpIntrinsic
Expm1Intrinsic
LogIntrinsic
Log10Intrinsic
Log1pIntrinsic
Log2Intrinsic
RegExpExecIntrinsic
RegExpTestIntrinsic
RegExpTestFastIntrinsic
RegExpMatchFastIntrinsic
ObjectAssignIntrinsic
ObjectCreateIntrinsic
ObjectGetOwnPropertyNamesIntrinsic
ObjectGetPrototypeOfIntrinsic
ObjectIsIntrinsic
ObjectKeysIntrinsic
ReflectGetPrototypeOfIntrinsic
StringPrototypeCodePointAtIntrinsic
StringPrototypeValueOfIntrinsic
StringPrototypeReplaceIntrinsic
StringPrototypeReplaceRegExpIntrinsic
StringPrototypeSliceIntrinsic
StringPrototypeToLowerCaseIntrinsic
NumberPrototypeToStringIntrinsic
NumberIsIntegerIntrinsic
IMulIntrinsic
RandomIntrinsic
FRoundIntrinsic
TruncIntrinsic
TypedArrayValuesIntrinsic
TypedArrayKeysIntrinsic
TypedArrayEntriesIntrinsic
IsTypedArrayViewIntrinsic
BoundFunctionCallIntrinsic
JSMapGetIntrinsic
JSMapHasIntrinsic
JSMapSetIntrinsic
JSMapValuesIntrinsic
JSMapKeysIntrinsic
JSMapEntriesIntrinsic
JSMapBucketHeadIntrinsic
JSMapBucketNextIntrinsic
JSMapBucketKeyIntrinsic
JSMapBucketValueIntrinsic
JSSetHasIntrinsic
JSSetAddIntrinsic
JSSetValuesIntrinsic
JSSetEntriesIntrinsic
JSSetBucketHeadIntrinsic
JSSetBucketNextIntrinsic
JSSetBucketKeyIntrinsic
JSWeakMapGetIntrinsic
JSWeakMapHasIntrinsic
JSWeakMapSetIntrinsic
JSWeakSetHasIntrinsic
JSWeakSetAddIntrinsic
HasOwnPropertyIntrinsic
AtomicsAddIntrinsic
AtomicsAndIntrinsic
AtomicsCompareExchangeIntrinsic
AtomicsExchangeIntrinsic
AtomicsIsLockFreeIntrinsic
AtomicsLoadIntrinsic
AtomicsNotifyIntrinsic
AtomicsOrIntrinsic
AtomicsStoreIntrinsic
AtomicsSubIntrinsic
AtomicsWaitIntrinsic
AtomicsXorIntrinsic
ParseIntIntrinsic
FunctionToStringIntrinsic
TypedArrayLengthIntrinsic
TypedArrayByteLengthIntrinsic
TypedArrayByteOffsetIntrinsic
UnderscoreProtoIntrinsic
DFGTrueIntrinsic
FTLTrueIntrinsic
OSRExitIntrinsic
IsFinalTierIntrinsic
SetInt32HeapPredictionIntrinsic
CheckInt32Intrinsic
FiatInt52Intrinsic
CPUMfenceIntrinsic
CPURdtscIntrinsic
CPUCpuidIntrinsic
CPUPauseIntrinsic
DataViewGetInt8
DataViewGetUint8
DataViewGetInt16
DataViewGetUint16
DataViewGetInt32
DataViewGetUint32
DataViewGetFloat32
DataViewGetFloat64
DataViewSetInt8
DataViewSetUint8
DataViewSetInt16
DataViewSetUint16
DataViewSetInt32
DataViewSetUint32
DataViewSetFloat32
DataViewSetFloat64
WasmFunctionIntrinsic
./runtime/Intrinsic.cpp
const char *JSC::intrinsicName(JSC::Intrinsic)
./runtime/IteratorOperations.cpp
JSC::Structure *JSC::createIteratorResultObjectStructure(JSC::VM &, JSC::JSGlobalObject &)
Symbol.iterator property should be callable
Iterator
Length exceeded the maximum array length
Array
Attempting to define numeric property on array with non-writable length property.
Array length is not writable
./runtime/JSArray.cpp
bool JSC::JSArray::unshiftCountSlowCase(const WTF::AbstractLocker &, JSC::VM &, JSC::DeferGC &, bool, unsigned int)
JSC::JSValue JSC::JSArray::pop(JSC::JSGlobalObject *)
bool JSC::JSArray::shiftCountWithArrayStorage(JSC::VM &, unsigned int, unsigned int, JSC::ArrayStorage *)
bool JSC::JSArray::shiftCountWithAnyIndexingType(JSC::JSGlobalObject *, unsigned int &, unsigned int)
bool JSC::JSArray::unshiftCountWithArrayStorage(JSC::JSGlobalObject *, unsigned int, unsigned int, JSC::ArrayStorage *)
supportedLocalesOf
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
segment
resolvedOptions
Intl.Segmenter.prototype.segment called on value that's not a Segmenter
Intl.Segmenter.prototype.resolvedOptions called on value that's not a Segmenter
containing
%Segments.prototype%.containing called on value that's not a Segments
%Segments.prototype%[@@iterator] called on value that's not a Segments
./runtime/IndexingHeader.h
bool JSC::JSObject::hasSparseMap()
JSC::JSArray *JSC::constructArray(JSC::ObjectInitializationScope &, JSC::Structure *, unsigned int)
void JSC::JSObject::initializeIndex(JSC::ObjectInitializationScope &, unsigned int, JSC::JSValue, JSC::IndexingType)
ArrayBuffer
Function
constructor property should not be null
ArrayBufferView
./runtime/JSArrayBufferView.cpp
JSC::JSArrayBufferView::ConstructionContext::ConstructionContext(JSC::Structure *, size_t, void *)
void JSC::JSArrayBufferView::finishCreation(JSC::VM &)
JSC::ArrayBuffer *JSC::JSArrayBufferView::unsharedBuffer()
void JSC::JSArrayBufferView::detach()
JSC::ArrayBuffer *JSC::JSArrayBufferView::slowDownAndWasteMemory()
RefPtr<JSC::ArrayBufferView> JSC::JSArrayBufferView::possiblySharedImpl()
Argument needs to be a typed array.
FastTypedArray
OversizeTypedArray
WastefulTypedArray
DataViewMode
void WTF::printInternal(WTF::PrintStream &, JSC::TypedArrayMode)
ArrayIterator
AsyncFunction
Allocating an async function
AsyncGenerator
JSAsyncGeneratorFunction
Allocating an async generator
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
SharedArrayBuffer
./runtime/ArrayBufferSharingMode.h
WTF::ASCIILiteral JSC::arrayBufferSharingModeName(JSC::ArrayBufferSharingMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
./runtime/JSGlobalObject.h
JSC::JSObject *JSC::JSGlobalObject::arrayBufferPrototype(JSC::ArrayBufferSharingMode) const
JSC::InlineWatchpointSet &JSC::JSGlobalObject::arrayBufferSpeciesWatchpointSet(JSC::ArrayBufferSharingMode)
JSC::JSObject *JSC::JSGlobalObject::arrayBufferConstructor(JSC::ArrayBufferSharingMode) const
Receiver must be 
Receiver is detached
Species construction does not create ArrayBuffer
ArrayBuffer.prototype.slice creates SharedArrayBuffer
Created ArrayBuffer is detached
SharedArrayBuffer.prototype.slice creates non-shared ArrayBuffer
Species construction returns same ArrayBuffer to a receiver
Species construction returns ArrayBuffer which byteLength is less than requested
./runtime/ButterflyInlines.h
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/GCMemoryOperations.h
void JSC::gcSafeMemcpy(T *, T *, size_t) [T = JSC::JSValue]
static void JSC::JSArrayBufferView::visitChildrenImpl(JSC::JSCell *, Visitor &) [Visitor = JSC::AbstractSlotVisitor]
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/ConcurrentPtrHashSet.h
bool WTF::ConcurrentPtrHashSet::addImpl(void *)
static void JSC::JSArrayBufferView::visitChildrenImpl(JSC::JSCell *, Visitor &) [Visitor = JSC::SlotVisitor]
BigInt
0123456789abcdefghijklmnopqrstuvwxyz
BigInt generated from this operation is too big
Conversion from 'BigInt' to 'number' is not allowed.
Function
./runtime/JSBoundFunction.cpp
JSC::EncodedJSValue JSC::boundThisNoArgsFunctionCall(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::boundThisNoArgsFunctionConstruct(JSC::JSGlobalObject *, JSC::CallFrame *)
./runtime/JSCConfig.cpp
static void JSC::Config::disableFreezingForTesting()
static void JSC::Config::enableRestrictedOptions()
Cannot convert a symbol to a string
Invalid argument type in ToBigInt operation
<JSValue()>
Int32: %d
Double: %lld, %lf
String
 (rope)
 (atomic)
 (symbol)
 (unresolved)
,8Bit:(1)
,8Bit:(0)
,length:(
RegExp: 
Symbol: 
Structure: 
BigInt[heap-allocated]: addr=
, length=
, sign=
Object: 
 with butterfly 
(base=
 (Structure 
Cell: 
, StructureID: 
True
False
Null
Undefined
INVALID
(unresolved string)
Structure[ 
 ID: 
Cell[
Callee
<%p, %s>
./runtime/JSCell.cpp
static bool JSC::JSCell::getOwnPropertySlot(JSC::JSObject *, JSC::JSGlobalObject *, JSC::PropertyName, JSC::PropertySlot &)
static bool JSC::JSCell::getOwnPropertySlotByIndex(JSC::JSObject *, JSC::JSGlobalObject *, unsigned int, JSC::PropertySlot &)
static void JSC::JSCell::getOwnPropertyNames(JSC::JSObject *, JSC::JSGlobalObject *, JSC::PropertyNameArray &, JSC::DontEnumPropertiesMode)
static void JSC::JSCell::getOwnSpecialPropertyNames(JSC::JSObject *, JSC::JSGlobalObject *, JSC::PropertyNameArray &, JSC::DontEnumPropertiesMode)
static bool JSC::JSCell::customHasInstance(JSC::JSObject *, JSC::JSGlobalObject *, JSC::JSValue)
static bool JSC::JSCell::defineOwnProperty(JSC::JSObject *, JSC::JSGlobalObject *, JSC::PropertyName, const JSC::PropertyDescriptor &, bool)
static bool JSC::JSCell::preventExtensions(JSC::JSObject *, JSC::JSGlobalObject *)
static bool JSC::JSCell::isExtensible(JSC::JSObject *, JSC::JSGlobalObject *)
static bool JSC::JSCell::setPrototype(JSC::JSObject *, JSC::JSGlobalObject *, JSC::JSValue, bool)
static JSC::JSValue JSC::JSCell::getPrototype(JSC::JSObject *, JSC::JSGlobalObject *)
get 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/AbstractSlotVisitorInlines.h
JSC::AbstractSlotVisitor::ReferrerContext::ReferrerContext(JSC::AbstractSlotVisitor &, JSC::AbstractSlotVisitor::ReferrerToken)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
void JSC::StructureIDTable::validate(JSC::StructureID)
Failed to parse String to BigInt
Negative exponent is not allowed
0 is an invalid divisor value.
Lock not held!
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/LockAlgorithmInlines.h
static void WTF::LockAlgorithm<unsigned char, '@', '\x80'>::lockSlow(Atomic<LockType> &) [LockType = unsigned char, isHeldBit = '@', hasParkedBit = '\x80', Hooks = WTF::EmptyLockHooks<unsigned char>]
Function
set 
DataView
DataView.prototype.buffer expects |this| to be a DataView object
DataView.prototype.byteLength expects |this| to be a DataView object
DataView.prototype.byteOffset expects |this| to be a DataView object
FinalizationRegistry
This should not be visible: please report a bug to bugs.webkit.org
Allocating a function
Store to prototype property of a function
wasm-stub
Generator
GeneratorFunction
Allocating a generator function
getInt8
getUint8
getInt16
getUint16
getInt32
getUint32
getFloat32
getFloat64
getBigInt64
getBigUint64
setInt8
setUint8
setInt16
setUint16
setInt32
setUint32
setFloat32
setFloat64
setBigInt64
setBigUint64
buffer
Receiver of DataView method must be a DataView
Out of bounds access
./runtime/JSString.h
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/MarkedBlockInlines.h
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::JSDestructibleObjectDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::JSDestructibleObjectDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::JSDestructibleObjectDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::JSDestructibleObjectDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = false, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::HasNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::JSDestructibleObjectDestroyFunc]
./runtime/JSCast.h
To JSC::jsSecureCast(JSC::VM &, From) [To = JSC::JSObject *, From = JSC::JSValue]
JSGlobalLexicalEnvironment
GlobalObject
./runtime/JSGlobalObject.cpp
void JSC::JSGlobalObject::init(JSC::VM &)
__enableSamplingProfiler
__disableSamplingProfiler
__enableSuperSampler
__disableSuperSampler
__tracePointStart
__tracePointStop
__signpostStart
__signpostStop
GlobalVar was redefined as ReadOnly
void JSC::JSGlobalObject::addGlobalVar(const JSC::Identifier &)
Having a bad time
void JSC::JSGlobalObject::exposeDollarVM(JSC::VM &)
void JSC::JSGlobalObject::addStaticGlobals(JSC::JSGlobalObject::GlobalPropertyInfo *, int)
void JSC::JSGlobalObject::tryInstallSpeciesWatchpoint(JSC::JSObject *, JSC::JSObject *, std::unique_ptr<ObjectPropertyChangeAdaptiveWatchpoint<InlineWatchpointSet>> &, std::unique_ptr<ObjectPropertyChangeAdaptiveWatchpoint<InlineWatchpointSet>> &, JSC::InlineWatchpointSet &)
Set up species watchpoint.
void JSC::JSGlobalObject::tryInstallArraySpeciesWatchpoint()
void JSC::slowValidateCell(JSC::JSGlobalObject *)
Uncaught Exception at run loop: 
JSContext
Object.prototype.__proto__ called on null or undefined
'arguments', 'callee', and 'caller' cannot be accessed in this context.
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$&'()*+,-./:;=?@_~
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!'()*-._~
./runtime/JSGlobalObjectFunctions.cpp
JSC::EncodedJSValue JSC::globalFuncImportModule(JSC::JSGlobalObject *, JSC::CallFrame *)
Immutable Butterfly
InternalPromise
InternalPromisePrototype
isNaN
isFinite
escape
unescape
decodeURI
decodeURIComponent
encodeURI
encodeURIComponent
eval
globalThis
parseInt
parseFloat
ArrayBuffer
EvalError
RangeError
ReferenceError
SyntaxError
TypeError
URIError
AggregateError
Proxy
Reflect
JSON
Math
console
Int8Array
Int16Array
Int32Array
Uint8Array
Uint8ClampedArray
Uint16Array
Uint32Array
Float32Array
Float64Array
BigInt64Array
BigUint64Array
DataView
Date
Error
Boolean
Number
Symbol
WeakMap
WeakSet
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
JSC::ObjectPropertyCondition JSC::setupAdaptiveWatchpoint(JSC::JSGlobalObject *, JSC::JSObject *, const JSC::Identifier &)
./runtime/ObjectPropertyChangeAdaptiveWatchpoint.h
JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>::ObjectPropertyChangeAdaptiveWatchpoint(JSC::JSCell *, const JSC::ObjectPropertyCondition &, WatchpointSet &) [Watchpoint = JSC::InlineWatchpointSet]
Object Property is changed.
./runtime/SymbolTable.h
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/tools/JSDollarVM.h
JSC::DollarVMAssertScope::DollarVMAssertScope()
JSC::DollarVMAssertScope::~DollarVMAssertScope()
Was not able to set up species watchpoint.
double JSC::jsStrDecimalLiteral(const CharType *&, const CharType *) [CharType = unsigned char]
double JSC::jsStrDecimalLiteral(const CharType *&, const CharType *) [CharType = char16_t]
URI error
String contained an illegal UTF-16 sequence.
./runtime/LazyPropertyInlines.h
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:757:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:761:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:765:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:769:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:777:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:781:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:785:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:790:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:795:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:800:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::GetterSetter>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::GetterSetter, Func = (lambda at ./runtime/JSGlobalObject.cpp:824:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::GetterSetter>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::GetterSetter]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::GetterSetter>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::GetterSetter]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSTypedArrayViewPrototype>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSTypedArrayViewPrototype, Func = (lambda at ./runtime/JSGlobalObject.cpp:830:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSTypedArrayViewPrototype>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSTypedArrayViewPrototype]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSTypedArrayViewPrototype>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSTypedArrayViewPrototype]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSTypedArrayViewConstructor>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSTypedArrayViewConstructor, Func = (lambda at ./runtime/JSGlobalObject.cpp:837:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSTypedArrayViewConstructor>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSTypedArrayViewConstructor]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/LazyClassStructureInlines.h:37:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:864:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:868:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:872:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:876:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:883:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:890:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:894:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:900:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:904:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:942:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:946:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:950:9)]
./runtime/ProxyObject.h
static JSC::Structure *JSC::ProxyObject::createStructure(JSC::VM &, JSC::JSGlobalObject *, JSC::JSValue, bool)
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:955:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:960:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:965:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:969:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1145:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1149:9)]
./runtime/ObjectConstructor.h
JSC::Structure *JSC::createDataPropertyDescriptorObjectStructure(JSC::VM &, JSC::JSGlobalObject &)
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1153:9)]
JSC::Structure *JSC::createAccessorPropertyDescriptorObjectStructure(JSC::VM &, JSC::JSGlobalObject &)
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:1158:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1163:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1169:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1175:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1181:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1187:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1193:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1199:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1205:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1211:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::IntlCollator>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::IntlCollator, Func = (lambda at ./runtime/JSGlobalObject.cpp:1231:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::IntlCollator>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::IntlCollator]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::IntlCollator>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::IntlCollator]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1246:13)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1253:13)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1260:13)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1267:13)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1274:13)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSModuleLoader>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSModuleLoader, Func = (lambda at ./runtime/JSGlobalObject.cpp:1287:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSModuleLoader>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSModuleLoader]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1338:5)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1350:81)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1353:81)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1356:91)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1359:91)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1362:90)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1365:92)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1368:91)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1371:91)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1374:90)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1378:90)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1381:96)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1384:88)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1387:91)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1390:92)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1394:94)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1397:110)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1400:99)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1403:92)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1406:94)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1409:100)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1412:88)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1415:105)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1418:102)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1421:93)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1424:102)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1427:88)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1430:88)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1433:93)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1436:81)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1439:83)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1442:93)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1445:96)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1448:89)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1451:90)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1454:90)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1457:105)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1460:91)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1463:89)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1466:97)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1469:91)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1472:87)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1475:96)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1478:103)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1483:90)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1486:86)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1489:93)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1492:94)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1495:93)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1498:92)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1503:100)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1506:99)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1509:93)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1512:101)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1517:95)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1520:98)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1524:92)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1529:97)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1535:113)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1538:117)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1543:105)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1569:13)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1573:13)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1577:13)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1581:13)]
have a bad time breaking internal function allocation
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789*+-./@_
./runtime/ArgList.h
JSLexicalEnvironment
./runtime/JSLock.cpp
void JSC::JSLock::didAcquireLock()
void JSC::JSLock::unlock(intptr_t)
JSC::JSLock::DropAllLocks::DropAllLocks(JSC::VM *)
Map Iterator
JSModuleEnvironment
ModuleLoader
registry
Loader [import] 
Could not import the module '
Loader [resolve] 
Loader [fetch] 
Could not open the module '
Loader [evaluate] 
ModuleNamespaceObject
Module
./runtime/JSModuleNamespaceObject.cpp
bool JSC::JSModuleNamespaceObject::getOwnPropertySlotCommon(JSC::JSGlobalObject *, JSC::PropertyName, JSC::PropertySlot &)
Cannot change module namespace object's binding to accessor
Cannot change module namespace object's binding to non-writable attribute
Cannot replace module namespace object's binding with non-enumerable attribute
Cannot replace module namespace object's binding with configurable attribute
Cannot replace module namespace object's binding's value
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
ensureRegistered
forceFulfillPromise
fulfillFetch
requestFetch
requestInstantiate
requestSatisfy
link
moduleDeclarationInstantiation
moduleEvaluation
asyncModuleEvaluation
evaluate
provideFetch
loadAndEvaluateModule
loadModule
linkAndEvaluateModule
requestImportModule
dependencyKeysIfEvaluated
getModuleNamespaceObject
parseModule
requestedModules
resolve
resolveSync
fetch
Loader [link] 
loader [parsing] 
ModuleRecord
Indirectly exported binding name '
' cannot be resolved due to ambiguous multiple bindings.
Indirectly exported binding name 'default' cannot be resolved by star export entries.
Importing binding name '
Importing binding name 'default' cannot be resolved by star export entries.
Function
JSON.stringify cannot serialize BigInt.
JSON.stringify cannot serialize cyclic structures.
JSON
./runtime/JSObject.cpp
bool JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes(JSC::JSGlobalObject *, unsigned int, JSC::JSValue) [indexingShape = (unsigned char)'\x04']
bool JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes(JSC::JSGlobalObject *, unsigned int, JSC::JSValue) [indexingShape = (unsigned char)'\x06']
bool JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes(JSC::JSGlobalObject *, unsigned int, JSC::JSValue) [indexingShape = (unsigned char)'\b']
Attempting to define property on object that is not extensible.
Attempted to assign to readonly property.
Attempting to change value of a readonly property.
Unable to delete property.
Attempting to change access mechanism for an unconfigurable property.
Attempting to change configurable attribute of unconfigurable property.
Attempting to change enumerable attribute of unconfigurable property.
Attempting to change writable attribute of unconfigurable property.
Object
static bool JSC::JSObject::getOwnPropertySlotByIndex(JSC::JSObject *, JSC::JSGlobalObject *, unsigned int, JSC::PropertySlot &)
static bool JSC::JSObject::putByIndex(JSC::JSCell *, JSC::JSGlobalObject *, unsigned int, JSC::JSValue, bool)
JSC::ArrayStorage *JSC::JSObject::enterDictionaryIndexingModeWhenArrayStorageAlreadyExists(JSC::VM &, JSC::ArrayStorage *)
static JSC::Butterfly *JSC::JSObject::createArrayStorageButterfly(JSC::VM &, JSC::JSObject *, JSC::Structure *, unsigned int, unsigned int, JSC::Butterfly *)
JSC::ArrayStorage *JSC::JSObject::ensureArrayStorageSlow(JSC::VM &)
void JSC::JSObject::switchToSlowPutArrayStorage(JSC::VM &)
Cannot set prototype of immutable prototype object
cyclic __proto__ value
static bool JSC::JSObject::deletePropertyByIndex(JSC::JSCell *, JSC::JSGlobalObject *, unsigned int)
No default value
instanceof called on an object with an invalid prototype property.
void JSC::JSObject::getOwnIndexedPropertyNames(JSC::JSGlobalObject *, JSC::PropertyNameArray &, JSC::DontEnumPropertiesMode)
bool JSC::JSObject::defineOwnIndexedProperty(JSC::JSGlobalObject *, unsigned int, const JSC::PropertyDescriptor &, bool)
Attempting to change the setter of an unconfigurable property.
Attempting to change the getter of an unconfigurable property.
bool JSC::JSObject::putByIndexBeyondVectorLength(JSC::JSGlobalObject *, unsigned int, JSC::JSValue, bool)
bool JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength(JSC::JSGlobalObject *, unsigned int, JSC::JSValue, unsigned int, JSC::PutDirectIndexMode)
get 
uint32_t JSC::JSObject::getEnumerableLength(JSC::JSGlobalObject *)
Promise
JSPropertyNameEnumerator
./runtime/JSPropertyNameEnumerator.cpp
JSC::JSString *JSC::JSPropertyNameEnumerator::computeNext(JSC::JSGlobalObject *, JSC::JSObject *, uint32_t &, JSC::JSPropertyNameEnumerator::Flag &, bool)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
UChar WTF::StringBuilder::operator[](unsigned int) const
parse
stringify
JSON Parse error: 
JSON Parse error: Unable to parse JSON string
./runtime/IndexingHeader.h
void JSC::IndexingHeader::setVectorLength(uint32_t)
auto JSC::JSObject::convertFromCopyOnWrite(JSC::VM &)::(anonymous class)::operator()() const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
bool JSC::JSObject::inSparseIndexingMode()
static JSC::Butterfly *JSC::Butterfly::createOrGrowPropertyStorage(JSC::Butterfly *, JSC::VM &, JSC::JSObject *, JSC::Structure *, size_t, size_t)
resolve
reject
race
allSettled
catch
finally
void JSC::gcSafeMemcpy(T *, T *, size_t) [T = JSC::WriteBarrierBase<JSC::Unknown, RawValueTraits<JSC::Unknown>>]
JSObject::visitButterfly
Symbol.toPrimitive is not a function, undefined, or null
Symbol.toPrimitive returned an object
JSProxy
./runtime/JSRunLoopTimer.cpp
void JSC::JSRunLoopTimer::Manager::registerVM(JSC::VM &)
void JSC::JSRunLoopTimer::Manager::unregisterVM(JSC::VM &)
void JSC::JSRunLoopTimer::Manager::scheduleTimer(JSC::JSRunLoopTimer &, WTF::Seconds)
void JSC::JSRunLoopTimer::Manager::cancelTimer(JSC::JSRunLoopTimer &)
std::optional<Seconds> JSC::JSRunLoopTimer::Manager::timeUntilFire(JSC::JSRunLoopTimer &)
Scope
JSScriptFetchParameters
JSScriptFetcher
SegmentedVariableObject
Set Iterator
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/AbstractSlotVisitorInlines.h
JSC::AbstractSlotVisitor::ReferrerContext::ReferrerContext(JSC::AbstractSlotVisitor &, JSC::AbstractSlotVisitor::ReferrerToken)
Allocated a scope
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
JSSourceCode
string
./runtime/JSString.cpp
void JSC::JSRopeString::RopeBuilder<WTF::RecordOverflow>::expand() [OverflowHandler = WTF::RecordOverflow]
<%p, %s, [%u], 
[substring]
[rope]
[8 %p]
[16 %p]
String Iterator
SymbolTableObject
TemplateObjectDescriptor
CellType
StructureType
StringType
SymbolType
HeapBigIntType
CustomGetterSetterType
APIValueWrapperType
NativeExecutableType
ProgramExecutableType
ModuleProgramExecutableType
EvalExecutableType
FunctionExecutableType
UnlinkedFunctionExecutableType
UnlinkedProgramCodeBlockType
UnlinkedModuleProgramCodeBlockType
UnlinkedEvalCodeBlockType
UnlinkedFunctionCodeBlockType
CodeBlockType
JSImmutableButterflyType
JSSourceCodeType
JSScriptFetcherType
JSScriptFetchParametersType
ObjectType
FinalObjectType
JSCalleeType
JSFunctionType
InternalFunctionType
NullSetterFunctionType
BooleanObjectType
NumberObjectType
ErrorInstanceType
PureForwardingProxyType
DirectArgumentsType
ScopedArgumentsType
ClonedArgumentsType
ArrayType
DerivedArrayType
ArrayBufferType
Int8ArrayType
Uint8ArrayType
Uint8ClampedArrayType
Int16ArrayType
Uint16ArrayType
Int32ArrayType
Uint32ArrayType
Float32ArrayType
Float64ArrayType
BigInt64ArrayType
BigUint64ArrayType
DataViewType
GetterSetterType
GlobalObjectType
GlobalLexicalEnvironmentType
LexicalEnvironmentType
ModuleEnvironmentType
StrictEvalActivationType
WithScopeType
ModuleNamespaceObjectType
ShadowRealmType
RegExpObjectType
JSDateType
ProxyObjectType
JSGeneratorType
JSAsyncGeneratorType
JSArrayIteratorType
JSMapIteratorType
JSSetIteratorType
JSStringIteratorType
JSPromiseType
JSMapType
JSSetType
JSWeakMapType
JSWeakSetType
WebAssemblyModuleType
StringObjectType
DerivedStringObjectType
MaxJSType
Function
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/AbstractSlotVisitorInlines.h
JSC::AbstractSlotVisitor::ReferrerContext::ReferrerContext(JSC::AbstractSlotVisitor &, JSC::AbstractSlotVisitor::ReferrerToken)
Prototype
Int8ArrayPrototype
Int16ArrayPrototype
Int32ArrayPrototype
Uint8ArrayPrototype
Uint8ClampedArrayPrototype
Uint16ArrayPrototype
Uint32ArrayPrototype
Float32ArrayPrototype
Float64ArrayPrototype
BigInt64ArrayPrototype
BigUint64ArrayPrototype
Function
TypedArray
Receiver should be a typed array view
Underlying ArrayBuffer has been detached from the view
./runtime/JSTypedArrayViewPrototype.cpp
JSC::EncodedJSValue JSC::typedArrayViewPrivateFuncSort(JSC::JSGlobalObject *, JSC::CallFrame *)
Receiver should be a typed array view but was not an object
JSC::EncodedJSValue JSC::typedArrayViewPrivateFuncSubarrayCreate(JSC::JSGlobalObject *, JSC::CallFrame *)
get [Symbol.toStringTag]
Int8Array
Int16Array
Int32Array
Uint8Array
Uint8ClampedArray
Uint16Array
Uint32Array
Float32Array
Float64Array
BigInt64Array
BigUint64Array
WeakMap
WeakRef
WeakSet
WithScope
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
%TypedArray% should not be called directly
JSC::EncodedJSValue JSC::typedArrayViewProtoGetterFuncBuffer(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::typedArrayViewProtoGetterFuncByteLength(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::typedArrayViewProtoGetterFuncByteOffset(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncCopyWithin(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncIncludes(JSC::JSGlobalObject *, JSC::CallFrame *)
./runtime/JSGenericTypedArrayViewPrototypeFunctions.h
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>]
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncFill(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncIndexOf(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>]
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncJoin(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncLastIndexOf(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>]
JSC::EncodedJSValue JSC::typedArrayViewProtoGetterFuncLength(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncReverse(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncSet(JSC::JSGlobalObject *, JSC::CallFrame *)
Expected at least one argument
Offset should not be negative
./runtime/JSGenericTypedArrayViewInlines.h
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncSlice(JSC::JSGlobalObject *, JSC::CallFrame *)
Content types of source and created typed arrays are different
TypedArray.prototype.slice constructed typed array of insufficient length
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>]
constructor Property should not be null
species constructor did not return a TypedArray View
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>]
JSC::EncodedJSValue JSC::typedArrayViewProtoGetterFuncToStringTag(JSC::JSGlobalObject *, JSC::CallFrame *)
./runtime/JSGenericTypedArrayView.h
void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::sort() [Adaptor = JSC::Float64Adaptor]
void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::sort() [Adaptor = JSC::Float32Adaptor]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>]
TypedArray.prototype.subarray constructed typed array of different content type from |this|
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>]
Attempting to store out-of-bounds property on a typed array at index: 
Attempting to store accessor property on a typed array at index: 
Attempting to store non-configurable property on a typed array at index: 
Attempting to store non-enumerable property on a typed array at index: 
Attempting to store non-writable property on a typed array at index: 
Attempting to store canonical numeric string property on a typed array
static void JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Int8Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Int8Adaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Int16Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Int16Adaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Int32Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Int32Adaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Uint8Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Uint8Adaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Uint8ClampedAdaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Uint8ClampedAdaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Uint16Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Uint16Adaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Uint32Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Uint32Adaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Float32Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Float32Adaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Float64Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Float64Adaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::BigInt64Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::BigInt64Adaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::BigUint64Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::BigUint64Adaptor, Visitor = JSC::AbstractSlotVisitor]
DataView constructor requires at least one argument.
Expected ArrayBuffer for the first argument.
./runtime/LazyClassStructure.cpp
void JSC::LazyClassStructure::Initializer::setPrototype(JSC::JSObject *)
void JSC::LazyClassStructure::Initializer::setStructure(JSC::Structure *)
void JSC::LazyClassStructure::Initializer::setConstructor(JSC::JSObject *)
Single quotes (') are not allowed in JSON
Unterminated string
\u must be followed by 4 hex digits
" is not a valid unicode escape
Invalid escape character 
Invalid number
Invalid digits after decimal point
Exponent symbols should be followed by an optional '+' or '-' and then by at least one number
Unexpected comma at the end of array expression
Property name must be a string literal
Unexpected token ']'
Unexpected token '{'
Unexpected token '}'
Unexpected identifier
Unexpected token ':'
Unexpected token ')'
Unexpected token ','
Unexpected token 'true'
Unexpected token 'false'
Unexpected token 'null'
Unexpected token '.'
Unexpected token '='
Unexpected token ';'
Could not parse statement
Unexpected content at end of JSON literal
./runtime/LiteralParser.cpp
JSC::JSValue JSC::LiteralParser<unsigned char>::parse(JSC::ParserState) [CharType = unsigned char]
Unexpected token '('
Could not parse value expression
Expected '}'
Expected ']'
Expected ':' before value in object property definition
JSC::JSValue JSC::LiteralParser<char16_t>::parse(JSC::ParserState) [CharType = char16_t]
get 
Static hashtable initialiation for 
 did not produce a property.
./runtime/Lookup.cpp
bool JSC::setUpStaticFunctionSlot(JSC::VM &, const JSC::ClassInfo *, const JSC::HashTableValue *, JSC::JSObject *, JSC::PropertyName, JSC::PropertySlot &)
Function
Map Iterator
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
Unexpected identifier "
'set' property of a Map should be callable.
forEach
Map operation called on non-Map object
./runtime/LazyPropertyInlines.h
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure]
Math
LN10
LOG2E
LOG10E
SQRT1_2
SQRT2
acos
asin
atan
acosh
asinh
atanh
atan2
cbrt
cosh
expm1
fround
hypot
log10
log1p
log2
sign
sinh
tanh
ModuleProgramExecutable
NarrowingNumberPredictionFuzzerAgent::getPrediction name:(
),bytecodeIndex:(
),original:(
),generated:(
Function
NativeExecutable
function 
() {
    [native code]
Function
EPSILON
MAX_VALUE
MIN_VALUE
MIN_SAFE_INTEGER
isInteger
Number
0123456789abcdefghijklmnopqrstuvwxyz
toString() radix argument must be between 2 and 36
Property description must be an object.
Getter must be a function.
Setter must be a function.
Invalid property.  'value' present on property with getter or setter.
Invalid property.  'writable' present on property with getter or setter.
Unable to prevent extension in Object.seal
Unable to prevent extension in Object.freeze
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/AbstractSlotVisitorInlines.h
isFinite
isNaN
isSafeInteger
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
toLocaleString
valueOf
toFixed
toExponential
toPrecision
toFixed() argument must be between 0 and 100
toExponential() argument must be between 0 and 100
toPrecision() argument must be between 1 and 100
thisNumberValue called on incompatible 
getPrototypeOf
setPrototypeOf
getOwnPropertyDescriptor
getOwnPropertyDescriptors
getOwnPropertyNames
getOwnPropertySymbols
keys
defineProperty
defineProperties
create
seal
freeze
preventExtensions
isSealed
isFrozen
isExtensible
assign
values
entries
fromEntries
Cannot set prototype of undefined or null
Prototype value can only be an object or null
Properties can only be defined on Objects.
./runtime/ObjectConstructor.cpp
JSC::JSValue JSC::defineProperties(JSC::JSGlobalObject *, JSC::JSObject *, JSC::JSObject *)
Unable to prevent extension in Object.preventExtensions
Object.assign requires that input parameter not be null or undefined
Object.values requires that input parameter not be null or undefined
./runtime/JSObject.h
Object.entries requires that input parameter not be null or undefined
static JSC::JSArray *JSC::JSArray::create(JSC::VM &, JSC::Structure *, unsigned int)
Object
Invalid mix of BigInt and other type in addition.
WARNING: failed to parse %s=%s
 %u:%u
useKernTCSM
Note: this needs to go before other options since they depend on this value.
validateOptions
crashes if mis-typed JSC options were passed to the VM
dumpOptions
dumps JSC options (0 = None, 1 = Overridden only, 2 = All, 3 = Verbose)
configFile
file to configure JSC options and logging location
useLLInt
allows the LLINT to be used if true
useJIT
allows the executable pages to be allocated for JIT and thunks if true
useBaselineJIT
allows the baseline JIT to be used if true
useDFGJIT
allows the DFG JIT to be used if true
useRegExpJIT
allows the RegExp JIT to be used if true
useDOMJIT
allows the DOMJIT to be used if true
reportMustSucceedExecutableAllocations
maxPerThreadStackUsage
Max allowed stack usage by the VM
softReservedZoneSize
A buffer greater than reservedZoneSize that reserves space for stringifying exceptions.
reservedZoneSize
The amount of stack space we guarantee to our clients (and to interal VM code that does not call out to clients).
crashOnDisallowedVMEntry
Forces a crash if we attempt to enter the VM when disallowed
crashIfCantAllocateJITMemory
jitMemoryReservationSize
Set this number to change the executable allocation size in ExecutableAllocatorFixedVMPool. (In bytes.)
forceCodeBlockLiveness
forceICFailure
repatchCountForCoolDown
initialCoolDownCount
repatchBufferingCountdown
dumpGeneratedBytecodes
dumpGeneratedWasmBytecodes
dumpBytecodeLivenessResults
validateBytecode
forceDebuggerBytecodeGeneration
debuggerTriggersBreakpointException
Using the debugger statement will trigger an breakpoint exception (Useful when lldbing)
dumpBytecodesBeforeGeneratorification
useFunctionDotArguments
useTailCalls
optimizeRecursiveTailCalls
alwaysUseShadowChicken
shadowChickenLogSize
shadowChickenMaxTailDeletedFramesSize
useIterationIntrinsics
useOSLog
Log dataLog()s to os_log instead of stderr
dumpDisassembly
dumps disassembly of all JIT compiled code upon compilation
asyncDisassembly
logJIT
dumpDFGDisassembly
dumps disassembly of DFG function upon compilation
dumpFTLDisassembly
dumps disassembly of FTL function upon compilation
dumpRegExpDisassembly
dumps disassembly of RegExp upon compilation
dumpWasmDisassembly
dumps disassembly of all Wasm code upon compilation
wasmB3FunctionsToDump
file with newline separated list of function indices to dump IR/disassembly for, if no such file exists, the function index itself
dumpBBQDisassembly
dumps disassembly of BBQ Wasm code upon compilation
dumpOMGDisassembly
dumps disassembly of OMG Wasm code upon compilation
logJITCodeForPerf
bytecodeRangeToJITCompile
bytecode size range to allow compilation on, e.g. 1:100
bytecodeRangeToDFGCompile
bytecode size range to allow DFG compilation on, e.g. 1:100
bytecodeRangeToFTLCompile
bytecode size range to allow FTL compilation on, e.g. 1:100
jitAllowlist
file with newline separated list of function signatures to allow compilation on or, if no such file exists, the function signature to allow
dfgAllowlist
file with newline separated list of function signatures to allow DFG compilation on or, if no such file exists, the function signature to allow
ftlAllowlist
file with newline separated list of function signatures to allow FTL compilation on or, if no such file exists, the function signature to allow
dumpSourceAtDFGTime
dumps source code of JS function being DFG compiled
dumpBytecodeAtDFGTime
dumps bytecode of JS function being DFG compiled
dumpGraphAfterParsing
dumpGraphAtEachPhase
dumpDFGGraphAtEachPhase
dumps the DFG graph at each phase of DFG compilation (note this excludes DFG graphs during FTL compilation)
dumpDFGFTLGraphAtEachPhase
dumps the DFG graph at each phase of DFG compilation when compiling FTL code
dumpB3GraphAtEachPhase
dumps the B3 graph at each phase of compilation
dumpAirGraphAtEachPhase
dumps the Air graph at each phase of compilation
verboseDFGBytecodeParsing
safepointBeforeEachPhase
verboseCompilation
verboseFTLCompilation
logCompilationChanges
useProbeOSRExit
printEachOSRExit
validateDoesGC
validateGraph
validateGraphAtEachPhase
verboseValidationFailure
verboseOSR
verboseDFGOSRExit
verboseFTLOSRExit
verboseCallLink
verboseCompilationQueue
reportCompileTimes
dumps JS function signature and the time it took to compile in all tiers
reportBaselineCompileTimes
dumps JS function signature and the time it took to BaselineJIT compile
reportDFGCompileTimes
dumps JS function signature and the time it took to DFG and FTL compile
reportFTLCompileTimes
dumps JS function signature and the time it took to FTL compile
reportTotalCompileTimes
reportTotalPhaseTimes
This prints phase times at the end of running script inside jsc.cpp
reportParseTimes
dumps JS function signature and the time it took to parse
reportBytecodeCompileTimes
dumps JS function signature and the time it took to bytecode compile
countParseTimes
counts parse times
verboseExitProfile
verboseCFA
verboseDFGFailure
verboseFTLToJSThunk
verboseFTLFailure
alwaysComputeHash
testTheFTL
verboseSanitizeStack
useGenerationalGC
useConcurrentGC
collectContinuously
collectContinuouslyPeriodMS
forceFencedBarrier
verboseVisitRace
optimizeParallelSlotVisitorsForStoppedMutator
largeHeapSize
smallHeapSize
smallHeapRAMFraction
smallHeapGrowthFactor
mediumHeapRAMFraction
mediumHeapGrowthFactor
largeHeapGrowthFactor
miniVMHeapGrowthFactor
criticalGCMemoryThreshold
percent memory in use the GC considers critical.  The collector is much more aggressive above this threshold
customFullGCCallbackBailThreshold
percent of memory paged out before we bail out of timer based Full GCs. -1.0 means use (maxHeapGrowthFactor - 1)
minimumMutatorUtilization
maximumMutatorUtilization
epsilonMutatorUtilization
concurrentGCMaxHeadroom
concurrentGCPeriodMS
useStochasticMutatorScheduler
minimumGCPauseMS
gcPauseScale
gcIncrementBytes
gcIncrementMaxBytes
gcIncrementScale
scribbleFreeCells
sizeClassProgression
preciseAllocationCutoff
dumpSizeClasses
useBumpAllocator
stealEmptyBlocksFromOtherAllocators
eagerlyUpdateTopCallFrame
dumpZappedCellCrashData
useOSREntryToDFG
useOSREntryToFTL
useFTLJIT
allows the FTL JIT to be used if true
validateFTLOSRExitLiveness
defaultB3OptLevel
b3AlwaysFailsBeforeCompile
b3AlwaysFailsBeforeLink
ftlCrashes
clobberAllRegsInFTLICSlowPath
enableJITDebugAssertions
useAccessInlining
maxAccessVariantListSize
usePolyvariantDevirtualization
usePolymorphicAccessInlining
maxPolymorphicAccessInliningListSize
usePolymorphicCallInlining
usePolymorphicCallInliningForNonStubStatus
maxPolymorphicCallVariantListSize
maxPolymorphicCallVariantListSizeForTopTier
maxPolymorphicCallVariantListSizeForWebAssemblyToJS
maxPolymorphicCallVariantsForInlining
frequentCallThreshold
minimumCallToKnownRate
createPreHeaders
usePutStackSinking
useObjectAllocationSinking
useValueRepElimination
useArityFixupInlining
logExecutableAllocation
maxDFGNodesInBasicBlockForPreciseAnalysis
Disable precise but costly analysis and give conservative results if the number of DFG nodes in a block exceeds this threshold
useConcurrentJIT
allows the DFG / FTL compilation in threads other than the executing JS thread
numberOfWorklistThreads
numberOfDFGCompilerThreads
numberOfFTLCompilerThreads
priorityDeltaOfDFGCompilerThreads
priorityDeltaOfFTLCompilerThreads
priorityDeltaOfWasmCompilerThreads
useProfiler
disassembleBaselineForProfiler
useArchitectureSpecificOptimizations
breakOnThrow
maximumOptimizationCandidateBytecodeCost
maximumFunctionForCallInlineCandidateBytecodeCost
maximumFunctionForClosureCallInlineCandidateBytecodeCost
maximumFunctionForConstructInlineCandidateBytecoodeCost
maximumFTLCandidateBytecodeCost
maximumInliningDepth
maximum allowed inlining depth.  Depth of 1 means no inlining
maximumInliningRecursion
maximumInliningCallerBytecodeCost
maximumVarargsForInlining
maximumBinaryStringSwitchCaseLength
maximumBinaryStringSwitchTotalLength
maximumRegExpTestInlineCodesize
Maximum code size in bytes for inlined RegExp.test JIT code.
jitPolicyScale
scale JIT thresholds to this specified ratio between 0.0 (compile ASAP) and 1.0 (compile like normal).
forceEagerCompilation
thresholdForJITAfterWarmUp
thresholdForJITSoon
thresholdForOptimizeAfterWarmUp
thresholdForOptimizeAfterLongWarmUp
thresholdForOptimizeSoon
executionCounterIncrementForLoop
executionCounterIncrementForEntry
thresholdForFTLOptimizeAfterWarmUp
thresholdForFTLOptimizeSoon
ftlTierUpCounterIncrementForLoop
ftlTierUpCounterIncrementForReturn
ftlOSREntryFailureCountForReoptimization
ftlOSREntryRetryThreshold
evalThresholdMultiplier
maximumEvalCacheableSourceLength
maximumExecutionCountsBetweenCheckpointsForBaseline
maximumExecutionCountsBetweenCheckpointsForUpperTiers
likelyToTakeSlowCaseMinimumCount
couldTakeSlowCaseMinimumCount
osrExitCountForReoptimization
osrExitCountForReoptimizationFromLoop
reoptimizationRetryCounterMax
minimumOptimizationDelay
maximumOptimizationDelay
desiredProfileLivenessRate
desiredProfileFullnessRate
doubleVoteRatioForDoubleFormat
structureCheckVoteRatioForHoisting
checkArrayVoteRatioForHoisting
maximumDirectCallStackSize
minimumNumberOfScansBetweenRebalance
numberOfGCMarkers
useParallelMarkingConstraintSolver
opaqueRootMergeThreshold
minHeapUtilization
minMarkedBlockUtilization
slowPathAllocsBetweenGCs
force a GC on every Nth slow path alloc, where N is specified by this option
percentCPUPerMBForFullTimer
percentCPUPerMBForEdenTimer
collectionTimerMaxPercentCPU
forceWeakRandomSeed
forcedWeakRandomSeed
useZombieMode
debugging option to scribble over dead objects with 0xbadbeef0
useImmortalObjects
debugging option to keep all objects alive forever
sweepSynchronously
debugging option to sweep all dead objects synchronously at GC end before resuming mutator
maxSingleAllocationSize
debugging option to limit individual allocations to a max size (0 = limit not set, N = limit size in bytes)
logGC
debugging option to log GC activity (0 = None, 1 = Basic, 2 = Verbose)
useGC
gcAtEnd
If true, the jsc CLI will do a GC before exiting
forceGCSlowPaths
If true, we will force all JIT fast allocations down their slow paths.
forceDidDeferGCWork
If true, we will force all DeferGC destructions to perform a GC.
gcMaxHeapSize
forceRAMSize
recordGCPauseTimes
dumpHeapStatisticsAtVMDestruction
forceCodeBlockToJettisonDueToOldAge
If true, this means that anytime we can jettison a CodeBlock due to old age, we do.
useEagerCodeBlockJettisonTiming
If true, the time slices for jettisoning a CodeBlock due to old age are shrunk significantly.
useTypeProfiler
useControlFlowProfiler
useSamplingProfiler
sampleInterval
Time between stack traces in microseconds.
collectExtraSamplingProfilerData
This corresponds to the JSC shell's --sample option, or if we're wanting to use the sampling profiler via the Debug menu in the browser.
samplingProfilerTopFunctionsCount
Number of top functions to report when using the command line interface.
samplingProfilerTopBytecodesCount
Number of top bytecodes to report when using the command line interface.
samplingProfilerIgnoreExternalSourceID
Ignore external source ID when aggregating results from sampling profiler
samplingProfilerPath
The path to the directory to write sampiling profiler output to. This probably will not work with WK2 unless the path is in the sandbox.
sampleCCode
Causes the sampling profiler to record profiling data for C frames.
alwaysGeneratePCToCodeOriginMap
This will make sure we always generate a PCToCodeOriginMap for JITed code.
randomIntegrityAuditRate
Probability of random integrity audits [0.0 - 1.0]
verifyGC
verboseVerifyGC
verifyHeap
numberOfGCCyclesToRecordForVerification
exceptionStackTraceLimit
Stack trace limit for internal Exception object
defaultErrorStackTraceLimit
The default value for Error.stackTraceLimit
exitOnResourceExhaustion
useExceptionFuzz
fireExceptionFuzzAt
validateDFGExceptionHandling
Causes the DFG to emit code validating exception handling for each node that can exit
dumpSimulatedThrows
Dumps the call stack of the last simulated throw if exception scope verification fails
validateExceptionChecks
Verifies that needed exception checks are performed.
unexpectedExceptionStackTraceLimit
Stack trace limit for debugging unexpected exceptions observed in the VM
validateDFGClobberize
Emits code in the DFG/FTL to validate the Clobberize phase
validateBoundsCheckElimination
Emits code in the DFG/FTL to validate bounds check elimination
useExecutableAllocationFuzz
fireExecutableAllocationFuzzAt
fireExecutableAllocationFuzzAtOrAfter
fireExecutableAllocationFuzzRandomly
fireExecutableAllocationFuzzRandomlyProbability
verboseExecutableAllocationFuzz
useOSRExitFuzz
fireOSRExitFuzzAtStatic
fireOSRExitFuzzAt
fireOSRExitFuzzAtOrAfter
verboseOSRExitFuzz
seedOfVMRandomForFuzzer
0 means not fuzzing this; use a cryptographically random seed
useRandomizingFuzzerAgent
seedOfRandomizingFuzzerAgent
dumpFuzzerAgentPredictions
useDoublePredictionFuzzerAgent
useFileBasedFuzzerAgent
usePredictionFileCreatingFuzzerAgent
requirePredictionForFileBasedFuzzerAgent
fuzzerPredictionsFile
file with list of predictions for FileBasedFuzzerAgent
useNarrowingNumberPredictionFuzzerAgent
useWideningNumberPredictionFuzzerAgent
logPhaseTimes
rareBlockPenalty
maximumTmpsForGraphColoring
The maximum number of tmps an Air program can have before always register allocating with Linear Scan
airLinearScanVerbose
airLinearScanSpillsEverything
airForceBriggsAllocator
airForceIRCAllocator
airRandomizeRegs
airRandomizeRegsSeed
coalesceSpillSlots
logAirRegisterPressure
useB3TailDup
maxB3TailDupBlockSize
maxB3TailDupBlockSuccessors
useB3HoistLoopInvariantValues
useB3CanonicalizePrePostIncrements
useDollarVM
installs the $vm debugging tool in global objects
functionOverrides
file with debugging overrides for function bodies
useSigillCrashAnalyzer
logs data about SIGILL crashes
watchdog
watchdog timeout (0 = Disabled, N = a timeout period of N milliseconds)
usePollingTraps
use polling (instead of signalling) VM traps
useMachForExceptions
Use mach exceptions rather than signals to handle faults and pass thread messages. (This does nothing on platforms without mach)
useICStats
prototypeHitCountForLLIntCaching
Number of prototype property hits before caching a prototype in the LLInt. A count of 0 means never cache.
dumpCompiledRegExpPatterns
verboseRegExpCompilation
dumpModuleRecord
dumpModuleLoadingState
exposeInternalModuleLoader
expose the internal module loader object to the global space for debugging
useSuperSampler
useSourceProviderCache
If false, the parser will not use the source provider cache. It's good to verify everything works when this is false. Because the cache is so successful, it can mask bugs.
useCodeCache
If false, the unlinked byte code cache will not be used.
useWebAssembly
Expose the WebAssembly global object.
failToCompileWebAssemblyCode
If true, no Wasm::Plan will sucessfully compile a function.
webAssemblyPartialCompileLimit
Limit on the number of bytes a Wasm::Plan::compile should attempt before checking for other work.
webAssemblyBBQAirOptimizationLevel
Air Optimization level for BBQ Web Assembly module compilations.
webAssemblyBBQB3OptimizationLevel
B3 Optimization level for BBQ Web Assembly module compilations.
webAssemblyOMGOptimizationLevel
B3 Optimization level for OMG Web Assembly module compilations.
useBBQTierUpChecks
Enables tier up checks for our BBQ code.
useWebAssemblyOSR
thresholdForBBQOptimizeAfterWarmUp
The count before we tier up a function to BBQ.
thresholdForBBQOptimizeSoon
thresholdForOMGOptimizeAfterWarmUp
The count before we tier up a function to OMG.
thresholdForOMGOptimizeSoon
omgTierUpCounterIncrementForLoop
The amount the tier up counter is incremented on each loop backedge.
omgTierUpCounterIncrementForEntry
The amount the tier up counter is incremented on each function entry.
useWebAssemblyFastMemory
If true, we will try to use a 32-bit address space with a signal handler to bounds check wasm memory.
logWebAssemblyMemory
webAssemblyFastMemoryRedzonePages
WebAssembly fast memories use 4GiB virtual allocations, plus a redzone (counted as multiple of 64KiB WebAssembly pages) at the end to catch reg+imm accesses which exceed 32-bit, anything beyond the redzone is explicitly bounds-checked
crashIfWebAssemblyCantFastMemory
If true, we will crash if we can't obtain fast memory for wasm.
crashOnFailedWebAssemblyValidate
If true, we will crash if we can't validate a wasm module instead of throwing an exception.
maxNumWebAssemblyFastMemories
useFastTLSForWasmContext
If true, we will store context in fast TLS. If false, we will pin it to a register.
wasmBBQUsesAir
useWasmLLInt
useBBQJIT
allows the BBQ JIT to be used if true
useOMGJIT
allows the OMG JIT to be used if true
useWasmLLIntPrologueOSR
allows prologue OSR from Wasm LLInt if true
useWasmLLIntLoopOSR
allows loop OSR from Wasm LLInt if true
useWasmLLIntEpilogueOSR
allows epilogue OSR from Wasm LLInt if true
wasmFunctionIndexRangeToCompile
wasm function index range to allow compilation on, e.g. 1:100
wasmLLIntTiersUpToBBQ
webAssemblyBBQAirModeThreshold
If 0, we always use BBQ Air. If Wasm module code size hits this threshold, we compile Wasm module with B3 BBQ mode.
useEagerWebAssemblyModuleHashing
Unnamed WebAssembly modules are identified in backtraces through their hash, if available.
useArrayAllocationProfiling
If true, we will use our normal array allocation profiling. If false, the allocation profile will always claim to be undecided.
forcePolyProto
If true, create_this will always create an object with a poly proto structure.
forceMiniVMMode
If true, it will force mini VM mode on.
useTracePoints
traceLLIntExecution
traceLLIntSlowPath
traceBaselineJITExecution
thresholdForGlobalLexicalBindingEpoch
Threshold for global lexical binding epoch. If the epoch reaches to this value, CodeBlock metadata for scope operations will be revised globally. It needs to be greater than 1.
diskCachePath
forceDiskCache
validateAbstractInterpreterState
validateAbstractInterpreterStateProbability
dumpJITMemoryPath
dumpJITMemoryFlushInterval
Maximum time in between flushes of the JIT memory dump in seconds.
useUnlinkedCodeBlockJettisoning
If true, UnlinkedCodeBlock can be jettisoned.
forceOSRExitToLLInt
If true, we always exit to the LLInt. If false, we exit to whatever is most convenient.
getByValICMaxNumberOfIdentifiers
Number of identifiers we see in the LLInt that could cause us to bail on generating an IC for get_by_val.
useRandomizingExecutableIslandAllocation
For the arm64 ExecutableAllocator, if true, select which region to use randomly. This is useful for testing that jump islands work.
exposeProfilersOnGlobalObject
If true, we will expose functions to enable/disable both the sampling profiler and the super sampler
allowUnsupportedTiers
If true, we will not disable DFG or FTL when an experimental feature is enabled.
returnEarlyFromInfiniteLoopsForFuzzing
earlyReturnFromInfiniteLoopsLimit
When returnEarlyFromInfiniteLoopsForFuzzing is true, this determines the number of executions a loop can run for before just returning. This is helpful for the fuzzer so it doesn't get stuck in infinite loops.
useLICMFuzzing
seedForLICMFuzzer
allowHoistingLICMProbability
exposeCustomSettersOnGlobalObjectForTesting
useJITCage
dumpBaselineJITSizeStatistics
dumpDFGJITSizeStatistics
verboseExecutablePoolAllocation
useDataIC
useDataICInOptimizingJIT
useDataICSharing
useBaselineJITCodeSharing
useArrayFindLastMethod
Expose the findLast() and findLastIndex() methods on Array and %TypedArray%.
useArrayGroupByMethod
Expose the groupBy() and groupByToMap() methods on Array.
useAtMethod
Expose the at() method on Array, %TypedArray%, and String.
useHasOwn
Expose the Object.hasOwn method
useIntlEnumeration
Expose the Intl enumeration APIs.
useSharedArrayBuffer
useShadowRealm
Expose the ShadowRealm object.
useTemporal
Expose the Temporal object.
useWebAssemblyThreading
Allow instructions from the wasm threading spec.
useWebAssemblyTypedFunctionReferences
Allow function types from the wasm typed function references spec.
useWebAssemblyExceptions
Allow the new section and instructions from the wasm exception handling spec.
Overridden JSC options:
All JSC options:
All JSC options with descriptions:
./runtime/Options.cpp
static bool JSC::Options::setOptions(const char *)
'=' not found in option string: %p
Missing trailing '"' in option string: %p
Failed to set option : %s
enableFunctionDotArguments
enableTailCalls
showDisassembly
showDFGDisassembly
showFTLDisassembly
dumpGraphAtEachDFGFTLPhase
dumpGraphAtEachDFGPhase
dumpGraphAtEachB3Phase
dumpGraphAtEachAirPhase
alwaysDoFullCollection
enableOSREntryToDFG
enableOSREntryToFTL
enableAccessInlining
enablePolyvariantDevirtualization
enablePolymorphicAccessInlining
enablePolymorphicCallInlining
enableObjectAllocationSinking
enableConcurrentJIT
enableProfiler
enableArchitectureSpecificOptimizations
objectsAreImmortal
disableGC
enableExceptionFuzz
enableExecutableAllocationFuzz
enableOSRExitFuzz
enableDollarVM
enableWebAssembly
maximumOptimizationCandidateInstructionCount
maximumFunctionForCallInlineCandidateInstructionCount
maximumFunctionForClosureCallInlineCandidateInstructionCount
maximumFunctionForConstructInlineCandidateInstructionCount
maximumFTLCandidateInstructionCount
maximumInliningCallerSize
validateBCE
static void JSC::Options::dumpOption(WTF::StringBuilder &, JSC::Options::DumpLevel, Options::ID, const char *, const char *, JSC::Options::DumpDefaultsOption)
   ... 
INCOHERENT OPTIONS: at least one of useLLInt or useJIT must be true
INCOHERENT OPTIONS: at least one of useWasmLLInt or useBBQJIT must be true
Bytecode profiler is not concurrent JIT safe.
%s:%llx
./runtime/PredictionFileCreatingFuzzerAgent.cpp
virtual JSC::SpeculatedType JSC::PredictionFileCreatingFuzzerAgent::getPredictionInternal(JSC::CodeBlock *, JSC::PredictionTarget &, JSC::SpeculatedType)
Define
None
ProgramExecutable
./runtime/ProgramExecutable.cpp
JSC::JSObject *JSC::ProgramExecutable::initializeGlobalProperties(JSC::VM &, JSC::JSGlobalObject *, JSC::JSScope *)
Proxy is not allowed in the global prototype chain.
Can't create duplicate variable: '
Can't create duplicate variable that shadows a global property: '
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
invalid getter usage
invalid setter usage
com.kpgame.PokerBros
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
auto JSC::Options::initialize()::(anonymous class)::operator()() const
JSC_
ERROR: invalid option: 
JSC_enableFunctionDotArguments
JSC_enableTailCalls
JSC_showDisassembly
JSC_showDFGDisassembly
JSC_showFTLDisassembly
JSC_dumpGraphAtEachDFGFTLPhase
JSC_dumpGraphAtEachDFGPhase
JSC_dumpGraphAtEachB3Phase
JSC_dumpGraphAtEachAirPhase
JSC_alwaysDoFullCollection
JSC_enableOSREntryToDFG
JSC_enableOSREntryToFTL
JSC_enableAccessInlining
JSC_enablePolyvariantDevirtualization
JSC_enablePolymorphicAccessInlining
JSC_enablePolymorphicCallInlining
JSC_enableObjectAllocationSinking
JSC_enableConcurrentJIT
JSC_enableProfiler
JSC_enableArchitectureSpecificOptimizations
JSC_objectsAreImmortal
JSC_disableGC
JSC_enableTypeProfiler
JSC_enableControlFlowProfiler
JSC_enableExceptionFuzz
JSC_enableExecutableAllocationFuzz
JSC_enableOSRExitFuzz
JSC_enableDollarVM
JSC_enableWebAssembly
JSC_maximumOptimizationCandidateInstructionCount
JSC_maximumFunctionForCallInlineCandidateInstructionCount
JSC_maximumFunctionForClosureCallInlineCandidateInstructionCount
JSC_maximumFunctionForConstructInlineCandidateInstructionCount
JSC_maximumFTLCandidateInstructionCount
JSC_maximumInliningCallerSize
JSC_validateBCE
com.apple.JavaScriptCore
DataLog
PropertyTable
Proxy
revocable
ProxyObject
A Proxy's 'target' should be an Object
A Proxy's 'handler' should be an Object
./runtime/ProxyObject.cpp
void JSC::ProxyObject::finishCreation(JSC::VM &, JSC::JSGlobalObject *, JSC::JSValue, JSC::JSValue)
getOwnPropertyDescriptor
'getOwnPropertyDescriptor' property of a Proxy's handler should be callable
result of 'getOwnPropertyDescriptor' call should either be an Object or undefined
When the result of 'getOwnPropertyDescriptor' is undefined the target must be configurable
When 'getOwnPropertyDescriptor' returns undefined, the 'target' of a Proxy should be extensible
Result from 'getOwnPropertyDescriptor' fails the IsCompatiblePropertyDescriptor test
Result from 'getOwnPropertyDescriptor' can't be non-configurable when the 'target' doesn't have it as an own property or if it is a configurable own property on 'target'
Result from 'getOwnPropertyDescriptor' can't be non-configurable and non-writable when the target's property is writable
'has' property of a Proxy's handler should be callable
Proxy 'has' must return 'true' for non-configurable properties
Proxy 'has' must return 'true' for a non-extensible 'target' object with a configurable property
preventExtensions
'preventExtensions' property of a Proxy's handler should be callable
Proxy's 'preventExtensions' trap returned true even though its target is extensible. It should have returned false
isExtensible
'isExtensible' property of a Proxy's handler should be callable
Proxy object's 'isExtensible' trap returned false when the target is extensible. It should have returned true
Proxy object's 'isExtensible' trap returned true when the target is non-extensible. It should have returned false
'defineProperty' property of a Proxy's handler should be callable
Proxy's 'defineProperty' trap returned falsy value for property '
Proxy's 'defineProperty' trap returned true even though getOwnPropertyDescriptor of the Proxy's target returned undefined and the target is non-extensible
Proxy's 'defineProperty' trap returned true for a non-configurable field even though getOwnPropertyDescriptor of the Proxy's target returned undefined
Proxy's 'defineProperty' trap did not define a property on its target that is compatible with the trap's input descriptor
Proxy's 'defineProperty' trap did not define a non-configurable property on its target even though the input descriptor to the trap said it must do so
Proxy's 'defineProperty' trap returned true for a non-writable input descriptor when the target's property is non-configurable and writable
ownKeys
'ownKeys' property of a Proxy's handler should be callable
Proxy handler's 'ownKeys' method must return an object
Proxy object's 'target' has the non-configurable property '
' that was not in the result from the 'ownKeys' trap
Proxy object's non-extensible 'target' has configurable property '
Proxy handler's 'ownKeys' method returned a key that was not present in its non-extensible target
setPrototypeOf
'setPrototypeOf' property of a Proxy's handler should be callable
Proxy 'setPrototypeOf' returned false indicating it could not set the prototype value. The operation was expected to succeed
Proxy 'setPrototypeOf' trap returned true when its target is non-extensible and the new prototype value is not the same as the current prototype value. It should have returned false
getPrototypeOf
'getPrototypeOf' property of a Proxy's handler should be callable
Proxy handler's 'getPrototypeOf' trap should either return an object or null
Proxy's 'getPrototypeOf' trap for a non-extensible target should return the same value as the target's prototype
void JSC::ProxyObject::revoke(JSC::VM &)
ProxyRevoke
getPrediction name:(
Reflect
RegExp
Can't JIT this regular expression: "
Proxy.revocable needs to be called with two arguments: the target and the handler
revoke
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
'get' property of a Proxy's handler object should be callable
Proxy handler's 'get' result of a non-configurable and non-writable property should be the same value as the target's property
Proxy handler's 'get' result of a non-configurable accessor property without a getter should be undefined
Proxy has already been revoked. No more operations are allowed to be performed on it
apply
'apply' property of a Proxy's handler should be callable
JSC::EncodedJSValue JSC::performProxyCall(JSC::JSGlobalObject *, JSC::CallFrame *)
construct
'construct' property of a Proxy's handler should be callable
JSC::EncodedJSValue JSC::performProxyConstruct(JSC::JSGlobalObject *, JSC::CallFrame *)
Result from Proxy handler's 'construct' method should be an object
defineProperty
deleteProperty
Reflect.construct requires the first argument be a constructor
Reflect.construct requires the third argument be a constructor if present
Reflect.construct requires the second argument be an object
Reflect.defineProperty requires the first argument be an object
Reflect.get requires the first argument be an object
Reflect.getOwnPropertyDescriptor requires the first argument be an object
Reflect.getPrototypeOf requires the first argument be an object
Reflect.isExtensible requires the first argument be an object
Reflect.ownKeys requires the first argument be an object
Reflect.preventExtensions requires the first argument be an object
Reflect.set requires the first argument be an object
Reflect.setPrototypeOf requires the first argument be an object
Reflect.setPrototypeOf requires the second argument be either an object or null
'set' property of a Proxy's handler should be callable
Proxy object's 'set' trap returned falsy value for property '
Proxy handler's 'set' on a non-configurable and non-writable property on 'target' should either return false or be the same value already on the 'target'
Proxy handler's 'set' method on a non-configurable accessor property without a setter should return false
'deleteProperty' property of a Proxy's handler should be callable
Proxy handler's 'deleteProperty' method should return false when the target's property is not configurable
Proxy handler's 'deleteProperty' method should return false when the target has property and is not extensible
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/text/StringConcatenate.h
static unsigned int WTF::StringTypeAdapter<const unsigned char *>::computeLength(const LChar *)
Proxy handler's 'ownKeys' method must return an array-like object containing only Strings and Symbols
Proxy handler's 'ownKeys' trap result must not contain any duplicate names
(?:)
Function
RegExp.$N getters require RegExp constructor as |this|
RegExp.input getter requires RegExp constructor as |this|
RegExp.multiline getter require RegExp constructor as |this|
RegExp.lastMatch getter require RegExp constructor as |this|
RegExp.lastParen getter require RegExp constructor as |this|
RegExp.leftContext getter require RegExp constructor as |this|
RegExp.rightContext getter require RegExp constructor as |this|
RegExp.input setters require RegExp constructor as |this|
RegExp.multiline setters require RegExp constructor as |this|
./runtime/RegExpMatchesArray.cpp
JSC::JSArray *JSC::createEmptyRegExpMatchesArray(JSC::JSGlobalObject *, JSC::JSString *, JSC::RegExp *)
RegExp
Object
RegExp String Iterator
./runtime/RegExpMatchesArray.h
lastMatch
lastParen
leftContext
rightContext
Invalid flags supplied to RegExp constructor.
Builtin RegExp exec can only be called on a RegExp object
RegExp.prototype.compile function's Realm must be the same to |this| RegExp object
|this| RegExp object's legacy features are not enabled
Cannot supply flags when constructing one RegExp from another.
RegExp is recompiled
The RegExp.prototype.global getter can only be called on a RegExp object
The RegExp.prototype.hasIndices getter can only be called on a RegExp object
The RegExp.prototype.ignoreCase getter can only be called on a RegExp object
The RegExp.prototype.multiline getter can only be called on a RegExp object
The RegExp.prototype.dotAll getter can only be called on a RegExp object
The RegExp.prototype.sticky getter can only be called on a RegExp object
The RegExp.prototype.unicode getter can only be called on a RegExp object
The RegExp.prototype.flags getter can only be called on an object
The RegExp.prototype.source getter can only be called on a RegExp object
%s: %s
./runtime/SamplingProfiler.cpp
void JSC::SamplingProfiler::visit(Visitor &) [Visitor = JSC::AbstractSlotVisitor]
void JSC::SamplingProfiler::visit(Visitor &) [Visitor = JSC::SlotVisitor]
jsc.sampling-profiler.thread
void JSC::SamplingProfiler::processUnverifiedStackTraces()
couldn't get a name
(unknown C PC)
(host)
(regexp)
(wasm)
(program)
(module)
WTF::String JSC::SamplingProfiler::StackFrame::displayName(JSC::VM &)
(anonymous function)
(eval)
WTF::String JSC::SamplingProfiler::StackFrame::displayNameForJSONTests(JSC::VM &)
int JSC::SamplingProfiler::StackFrame::functionStartLine()
unsigned int JSC::SamplingProfiler::StackFrame::functionStartColumn()
JSC::SourceID JSC::SamplingProfiler::StackFrame::sourceID()
WTF::String JSC::SamplingProfiler::StackFrame::url()
JSCSampilingProfile-
.txt
<nil>
Sampling rate: 
 microseconds. Total samples: 
Top functions as <numSamples  'functionName#hash:sourceID'>
%6zu 
   '
js builtin
Host
C/C++
Unknown Frame
Unknown Executable
Tier breakdown:
-----------------------------------
Hottest bytecodes as <numSamples   'functionName#hash:JITType:bytecodeIndex'>
scopeInvalid
scope
Arguments
./runtime/ScopedArguments.cpp
void JSC::ScopedArguments::overrideThings(JSC::JSGlobalObject *)
ScopedArgumentsTable
ScriptExecutable
./runtime/ScriptExecutable.cpp
void JSC::ScriptExecutable::clearCode(JSC::IsoCellSet &)
installCode
void JSC::ScriptExecutable::installCode(JSC::VM &, JSC::CodeBlock *, JSC::CodeType, JSC::CodeSpecializationKind)
Installing 
JSC::CodeBlock *JSC::ScriptExecutable::newCodeBlockFor(JSC::CodeSpecializationKind, JSC::JSFunction *, JSC::JSScope *)
JSC::CodeBlock *JSC::ScriptExecutable::newReplacementCodeBlockFor(JSC::CodeSpecializationKind)
Forced Failure
size_t JSC::CFrameWalker::walk(Vector<JSC::UnprocessedStackFrame> &, bool &)
bool JSC::FrameWalker::isValidFramePointer(void *)
auto JSC::SamplingProfiler::processUnverifiedStackTraces()::(anonymous class)::operator()(JSC::SamplingProfiler::UnprocessedStackFrame &) const
auto JSC::SamplingProfiler::processUnverifiedStackTraces()::(anonymous class)::operator()(JSC::CodeBlock *, JSC::CodeOrigin) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
void JSC::setupJIT(JSC::VM &, JSC::CodeBlock *)
void JSC::GenericArguments<JSC::ScopedArguments>::initModifiedArgumentsDescriptor(JSC::JSGlobalObject *, unsigned int) [Type = JSC::ScopedArguments]
Function
Set Iterator
ShadowRealm
Error encountered during evaluation
JSArrayBuffer is opaque root
boolean
object
bigint
[object 
[object Null]
[object Undefined]
bound 
not-equal
timed-out
'add' property of a Set should be callable.
forEach
Set operation called on non-Set object
evaluate
importValue
SparseArrayValueMap
[wasm code]
[native code]
eval code
module code
global code
Object
Function
String Iterator
String
substr
substring
toLowerCase
toUpperCase
localeCompare
toLocaleLowerCase
toLocaleUpperCase
trim
startsWith
endsWith
normalize
trimStart
trimEnd
trimLeft
trimRight
./runtime/StringPrototype.cpp
JSC::EncodedJSValue JSC::stringProtoFuncRepeatCharacter(JSC::JSGlobalObject *, JSC::CallFrame *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
fromCharCode
fromCodePoint
Arguments contain a value that is out of range of code points
concat
match
matchAll
padStart
padEnd
repeat
replace
replaceAll
search
split
anchor
bold
blink
fixed
fontcolor
fontsize
italics
link
small
strike
UChar32 JSC::codePointAt(const WTF::String &, unsigned int, unsigned int)
JSC::EncodedJSValue JSC::stringIndexOfImpl(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::stringProtoFuncSlice(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::stringSubstringImpl(JSC::JSGlobalObject *, JSC::CallFrame *)
String.prototype.localeCompare requires that |this| not be null or undefined
Argument to String.prototype.startsWith cannot be a RegExp
Argument to String.prototype.endsWith cannot be a RegExp
Argument to String.prototype.includes cannot be a RegExp
argument does not match any normalization form
Structure
./runtime/Structure.cpp
static JSC::Structure *JSC::Structure::nonPropertyTransitionSlow(JSC::VM &, JSC::Structure *, JSC::TransitionKind)
void JSC::Structure::didCachePropertyReplacement(JSC::VM &, JSC::PropertyOffset)
Did cache property replacement
Structure transition from 
, PolyProto offset:
, Proto:
, Has been dictionary
, Dictionary
, UncacheableDictionary
, Leaf
, Shady leaf
 (Watched)
Structures:
./runtime/StructureCache.cpp
JSC::Structure *JSC::StructureCache::emptyObjectStructureConcurrently(JSC::JSGlobalObject *, JSC::JSObject *, unsigned int)
StructureChain
./runtime/StructureIDTable.cpp
void JSC::StructureIDTable::resize(size_t)
m_size < newCapacity
StructureIDExhaustion
Crash intentionally because of exhaust of StructureIDs.
JSC::StructureID JSC::StructureIDTable::allocateID(JSC::Structure *)
void JSC::StructureIDTable::deallocateID(JSC::Structure *, JSC::StructureID)
StructureRareData
symbol
Cannot convert a symbol to a number
Symbol(
Function
Symbol
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
JSC::Structure *JSC::StructureCache::createEmptyStructure(JSC::JSGlobalObject *, JSC::JSObject *, const JSC::TypeInfo &, const JSC::ClassInfo *, JSC::IndexingType, unsigned int, bool, JSC::FunctionExecutable *)
keyFor
Symbol.keyFor requires that the first argument be a symbol
auto JSC::Structure::create(JSC::Structure::PolyProtoTag, JSC::VM &, JSC::JSGlobalObject *, JSC::JSObject *, const JSC::TypeInfo &, const JSC::ClassInfo *, JSC::IndexingType, unsigned int)::(anonymous class)::operator()(const JSC::GCSafeConcurrentJSLocker &, JSC::PropertyOffset, JSC::PropertyOffset) const
Detected in materializePropertyTable.
Found structure = 
structures = 
Symbol
SymbolTable
./runtime/SymbolTable.cpp
JSC::GlobalVariableID JSC::SymbolTable::uniqueIDForVariable(const JSC::ConcurrentJSLocker &, WTF::UniquedStringImpl *, JSC::VM &)
RefPtr<JSC::TypeSet> JSC::SymbolTable::globalTypeSetForVariable(const JSC::ConcurrentJSLocker &, WTF::UniquedStringImpl *, JSC::VM &)
Object
Function
Calendar
Temporal.Calendar
Temporal.Duration properties must be finite and of consistent sign
Temporal.Duration properties must be integers
Object must contain at least one Temporal.Duration property
' is not a valid Duration string
 not supported by Temporal.Instant. Try Temporal.ZonedDateTime instead
Cannot compare a duration of years, months, or weeks without a relativeTo option
Cannot add a duration of years, months, or weeks without a relativeTo option
Cannot subtract a duration of years, months, or weeks without a relativeTo option
Cannot round without a smallestUnit or largestUnit option
smallestUnit must be smaller than largestUnit
Cannot round a duration of years, months, or weeks without a relativeTo option
FIXME: years, months, or weeks rounding with relativeTo not implemented yet
unit is an invalid Temporal unit
Cannot total a duration of years, months, or weeks without a relativeTo option
smallestUnit must not be "minute"
Duration
Symbol.prototype.toString requires that |this| be a symbol or a symbol object
Symbol.prototype.description requires that |this| be a symbol or a symbol object
Symbol.prototype.valueOf requires that |this| be a symbol or a symbol object
invalid calendar ID
from
fields
mergeFields
Temporal.Calendar.prototype.fields called on value that's not a Calendar
fields include non string value
Temporal.Calendar.prototype.mergeFields called on value that's not a Calendar
Temporal.Calendar.prototype.toString called on value that's not a Calendar
compare
Temporal.Duration properties must be finite
Temporal.Duration
Temporal.Duration.prototype.years called on value that's not a Duration
Temporal.Duration.prototype.months called on value that's not a Duration
Temporal.Duration.prototype.weeks called on value that's not a Duration
Temporal.Duration.prototype.days called on value that's not a Duration
Temporal.Duration.prototype.hours called on value that's not a Duration
Temporal.Duration.prototype.minutes called on value that's not a Duration
Temporal.Duration.prototype.seconds called on value that's not a Duration
Temporal.Duration.prototype.milliseconds called on value that's not a Duration
Temporal.Duration.prototype.microseconds called on value that's not a Duration
Temporal.Duration.prototype.nanoseconds called on value that's not a Duration
Temporal.Duration.prototype.sign called on value that's not a Duration
Temporal.Duration.prototype.blank called on value that's not a Duration
Object
 epoch nanoseconds is outside of supported range for Temporal.Instant
The given number of
 epoch nanoseconds is outside of the supported range for Temporal.Instant
' is not a valid Temporal.Instant string
 is not a valid integer number of epoch seconds
 is not a valid integer number of epoch milliseconds
 epoch microseconds is outside of supported range for Temporal.Instant
Cannot round without a smallestUnit option
FIXME: Temporal.Instant.toString({timeZone}) not implemented yet
Instant
Temporal.Instant
Temporal.Instant.prototype.epochSeconds called on value that's not a Instant
Temporal.Instant.prototype.epochMilliseconds called on value that's not a Instant
Temporal.Instant.prototype.epochMicroseconds called on value that's not a Instant
Temporal.Instant.prototype.epochNanoseconds called on value that's not a Instant
Temporal.Now
Temporal
./runtime/TemporalObject.cpp
JSC::PropertyName JSC::temporalUnitPluralPropertyName(JSC::VM &, JSC::TemporalUnit)
JSC::PropertyName JSC::temporalUnitSingularPropertyName(JSC::VM &, JSC::TemporalUnit)
largestUnit is an invalid Temporal unit
largestUnit is a disallowed unit
smallestUnit is an invalid Temporal unit
smallestUnit is a disallowed unit
fractionalSecondDigits must be 'auto' or 0 through 9, not 
JSC::PrecisionData JSC::secondsStringPrecision(JSC::JSGlobalObject *, JSC::JSObject *)
ceil
floor
trunc
halfExpand
roundingMode must be either "ceil", "floor", "trunc", or "halfExpand"
roundingIncrement value does not divide 
double JSC::roundNumberToIncrement(double, double, JSC::RoundingMode)
constrain
overflow must be either "constrain" or "reject"
calendar is not iso8601
invalid time string
argument object must not carry calendar
argument object must not carry time zone
PlainTime
negated
subtract
total
Temporal.Duration.prototype.with called on value that's not a Duration
First argument to Temporal.Duration.prototype.with must be an object
Temporal.Duration.prototype.negated called on value that's not a Duration
Temporal.Duration.prototype.abs called on value that's not a Duration
Temporal.Duration.prototype.add called on value that's not a Duration
Temporal.Duration.prototype.subtract called on value that's not a Duration
Temporal.Duration.prototype.round called on value that's not a Duration
Temporal.Duration.prototype.round requires an options argument
Temporal.Duration.prototype.total called on value that's not a Duration
Temporal.Duration.prototype.total requires an options argument
Temporal.Duration.prototype.toString called on value that's not a Duration
Temporal.Duration.prototype.toJSON called on value that's not a Duration
Temporal.Duration.prototype.toLocaleString called on value that's not a Duration
Temporal.Duration.prototype.valueOf must not be called. To compare Duration values, use Temporal.Duration.compare
./runtime/TemporalInstant.cpp
double JSC::maximumIncrement(JSC::TemporalUnit)
fromEpochSeconds
fromEpochMilliseconds
fromEpochMicroseconds
fromEpochNanoseconds
Missing required epochNanoseconds argument to Temporal.Instant
until
since
equals
epochSeconds
epochMilliseconds
epochMicroseconds
epochNanoseconds
Temporal.Instant.prototype.add called on value that's not a Instant
Addition is outside of supported range for Temporal.Instant
Temporal.Instant.prototype.subtract called on value that's not a Instant
Subtraction is outside of supported range for Temporal.Instant
Temporal.Instant.prototype.until called on value that's not a Instant
Temporal.Instant.prototype.since called on value that's not a Instant
Temporal.Instant.prototype.round called on value that's not a Instant
Temporal.Instant.prototype.round requires an options argument
Temporal.Instant.prototype.equals called on value that's not a Instant
Temporal.Instant.prototype.toString called on value that's not a Instant
Temporal.Instant.prototype.toJSON called on value that's not a Instant
Temporal.Instant.prototype.toLocaleString called on value that's not a Instant
Temporal.Instant.prototype.valueOf must not be called. To compare Instant values, use Temporal.Instant.compare
Calendar
Duration
TimeZone
hour is out of range
minute is out of range
second is out of range
millisecond is out of range
microsecond is out of range
nanosecond is out of range
./runtime/TemporalPlainTime.cpp
ISO8601::Duration JSC::roundTime(ISO8601::PlainTime, double, JSC::TemporalUnit, JSC::RoundingMode, std::optional<double>)
" field is missing
Temporal.PlainTime properties must be finite
toPartialTime properties must be finite
toPartialTime requires at least one property
static ElementType *JSC::LazyProperty<JSC::TemporalPlainTime, JSC::TemporalCalendar>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::TemporalPlainTime, ElementType = JSC::TemporalCalendar, Func = (lambda at ./runtime/TemporalPlainTime.cpp:66:9)]
void JSC::LazyProperty<JSC::TemporalPlainTime, JSC::TemporalCalendar>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::TemporalPlainTime, ElementType = JSC::TemporalCalendar]
void JSC::LazyProperty<JSC::TemporalPlainTime, JSC::TemporalCalendar>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::TemporalPlainTime, ElementType = JSC::TemporalCalendar]
Temporal.PlainTime
Temporal.PlainTime.prototype.hour called on value that's not a plainTime
Temporal.PlainTime.prototype.minute called on value that's not a plainTime
Temporal.PlainTime.prototype.second called on value that's not a plainTime
Temporal.PlainTime.prototype.millisecond called on value that's not a plainTime
Temporal.PlainTime.prototype.microsecond called on value that's not a plainTime
Temporal.PlainTime.prototype.nanosecond called on value that's not a plainTime
Temporal.PlainTime.prototype.calendar called on value that's not a plainTime
Object
argument needs to be UTC offset string, TimeZone identifier, or temporal Instant string
Function
TimeZone
Temporal.TimeZone
[Start, End]::[%u, %u]
[Entry IS in System]
[Entry IS NOT in system]
[Return Statement]
[Normal Statement]
#Local#
#Global#
"globalTypeSet":
"instructionTypeSet":
"isOverflown":
getISOFields
Temporal.PlainTime.prototype.add called on value that's not a plainTime
Temporal.PlainTime.prototype.subtract called on value that's not a plainTime
Temporal.PlainTime.prototype.with called on value that's not a plainTime
First argument to Temporal.PlainTime.prototype.with must be an object
Temporal.PlainTime.prototype.until called on value that's not a plainTime
Temporal.PlainTime.prototype.since called on value that's not a plainTime
Temporal.PlainTime.prototype.round called on value that's not a plainTime
Temporal.PlainTime.prototype.round requires an options argument
Temporal.PlainTime.prototype.equals called on value that's not a plainTime
Temporal.PlainTime.prototype.toString called on value that's not a plainTime
Temporal.PlainTime.prototype.toJSON called on value that's not a plainTime
Temporal.PlainTime.prototype.toLocaleString called on value that's not a plainTime
Temporal.PlainTime.prototype.valueOf must not be called. To compare PlainTime values, use Temporal.PlainTime.compare
from
argument needs to be UTC offset string or TimeZone identifier
Temporal.TimeZone.prototype.toString called on value that's not a TimeZone
(Unreached Statement)
Least Common Ancestor: 
Function?
Boolean?
Integer?
Number?
String?
Symbol?
BigInt?
Object?
(many)
"displayTypeName":
"primitiveTypeNames":[
:__proto__
"constructorName":
"isInDictionaryMode":
"optionalFields":[
./runtime/TypeSet.cpp
static Ref<JSC::StructureShape> JSC::StructureShape::merge(Ref<JSC::StructureShape> &&, Ref<JSC::StructureShape> &&)
./runtime/TypedArrayType.cpp
const JSC::ClassInfo *JSC::constructorClassInfoForType(JSC::TypedArrayType)
NotTypedArray
TypeInt8
TypeInt16
TypeInt32
TypeUint8
TypeUint8Clamped
TypeUint16
TypeUint32
TypeFloat32
TypeFloat64
TypeBigInt64
TypeBigUint64
TypeDataView
void WTF::printInternal(WTF::PrintStream &, JSC::TypedArrayType)
./runtime/VM.cpp
JSC::VM::VM(JSC::VM::VMType, JSC::HeapType, WTF::RunLoop *, bool *)
JSC_PROFILER_PATH
JSCProfile-
.json
Primitive gigacage disabled
Throwing exception in call frame 
void JSC::VM::updateStackLimits()
std::unique_ptr<CheckpointOSRExitSideState> JSC::VM::popCheckpointOSRSideState(JSC::CallFrame *)
Impure property added
VM Dump Types
void JSC::VM::removeLoopHintExecutionCounter(const JSC::Instruction *)
 on pid 
 received NeedDebuggerBreak trap
./runtime/VMTraps.cpp
void JSC::VMTraps::handleTraps(VMTraps::BitField)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
optionalFields
constructorName
isImprecise
prototypeStructure
./runtime/VMInlines.h
void JSC::VM::setFuzzerAgent(std::unique_ptr<FuzzerAgent> &&)
JavaScript execution terminated.
Sanitizing stack for VM = 
, current stack pointer at 
, last stack top = 
, in stack range (
Primitive gigacage disabled asynchronously
auto JSC::VMTraps::SignalSender::initializeSignals()::(anonymous class)::operator()()::(anonymous class)::operator()(WTF::Signal, WTF::SigInfo &, WTF::PlatformRegisters &) const
JSC VMTraps Signal Sender Thread
isFunction
isUndefined
isNull
isBoolean
isNumber
isString
isSymbol
isBigInt
JavaScriptCoreUseJIT
bool JSC::disableProfilerWithRespectToCount(unsigned int &, const Func &) [Func = (lambda at ./runtime/VM.cpp:1170:32)]
bool JSC::disableProfilerWithRespectToCount(unsigned int &, const Func &) [Func = (lambda at ./runtime/VM.cpp:1189:39)]
invalid
./runtime/VarOffset.cpp
void JSC::VarOffset::dump(WTF::PrintStream &) const
Invalid
Scope
Stack
DirectArgument
void WTF::printInternal(WTF::PrintStream &, JSC::VarKind)
jsc.watchdog.queue
Function
WeakMap
./runtime/WeakMapImpl.h
bool JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::remove(JSC::JSObject *) [WeakMapBucketType = JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>]
Attempted to set a non-object key in a WeakMap
WeakRef
WeakSet
'set' property of a WeakMap should be callable.
Called WeakMap function on non-object
Called WeakMap function on a non-WeakMap object
First argument to WeakRef should be an object
Called WeakRef function on non-object
Called WeakRef function on a non-WeakRef object
'add' property of a WeakSet should be callable.
Attempted to add a non-object value to a WeakSet
WeakSet
WideningNumberPredictionFuzzerAgent::getPrediction name:(
bool JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::remove(JSC::JSObject *) [WeakMapBucketType = JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>]
Called WeakSet function on non-object
Called WeakSet function on a non-WeakSet object
 took: 
 ms 
(total: 
 ms).
Failed to open file %s. Did you add the file-read-data entitlement to WebProcess.sb? Error code: %s
Failed to close file %s: %s
./tools/FunctionOverrides.cpp
static bool JSC::FunctionOverrides::initializeOverrideFor(const JSC::SourceCode &, FunctionOverrides::OverrideInfo &)
functionOverrides 
IO ERROR
Failed to open file 
. Did you add the file-read-data entitlement to WebProcess.sb?
override
./tools/HeapVerifier.cpp
JSC::HeapVerifier::HeapVerifier(JSC::Heap *, unsigned int)
BeforeGC
BeforeMarking
AfterMarking
AfterGC
static const char *JSC::HeapVerifier::phaseName(HeapVerifier::Phase)
END 
JSC::CellList *JSC::HeapVerifier::cellListForGathering(HeapVerifier::Phase)
void JSC::HeapVerifier::printVerificationHeader()
Verifying heap in [p
] vm 
 on 
 GC @ 
    cell 
 is ZAPPED
 is zapped
 is from a different VM: expected:
 actual:
 with structureID 
 maps to a NULL Structure pointer
 has ZAPPED structure 
 has structure 
 whose structureID is NULL
 from a different VM: expected:
 NOT found in the live cell list
 has DEAD structure 
 with a NULL structureID
 whose structure is NULL
 whose structure 
 has a NULL structureID
 is NOT found in the live cell list
 is DEAD
FOUND
 LIVE
 DEAD
 HeapCell 
 JSCell 
 structure:
 butterfly:
 (base:
 GC[
] in '
' list in VM 
 recorded at time 
Checking 
 GC<
>, cycle [
Cycle [
' list: 
cell NOT found
cell 
 NOT FOUND
ERROR: Timed out while waiting to iterate VMs.
shouldThrow
testField
./tools/JSDollarVM.cpp
bool (anonymous namespace)::testStaticAccessorPutter(JSC::JSGlobalObject *, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::PropertyName)
testStaticValue
testStaticValueSetterCalled
DOMJITGetterComplex slow call exception
JSC::EncodedJSValue (anonymous namespace)::customGetValue(JSC::JSGlobalObject *, JSC::EncodedJSValue, JSC::PropertyName)
JSC::EncodedJSValue (anonymous namespace)::customGetValue2(JSC::JSGlobalObject *, JSC::EncodedJSValue, JSC::PropertyName)
value2
bool (anonymous namespace)::customSetValue(JSC::JSGlobalObject *, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::PropertyName)
bool (anonymous namespace)::customSetValueGlobalObject(JSC::JSGlobalObject *, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::PropertyName)
bool (anonymous namespace)::customSetValue2(JSC::JSGlobalObject *, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::PropertyName)
DollarVM
abort
crash
breakpoint
dfgTrue
ftlTrue
cpuMfence
cpuRdtsc
cpuCpuid
cpuPause
cpuClflush
llintTrue
baselineJITTrue
noInline
gcSweepAsynchronously
edenGC
dumpSubspaceHashes
callFrame
codeBlockFor
codeBlockForFrame
dumpSourceFor
dumpBytecodeFor
dataLog
print
dumpCallFrame
dumpStack
dumpRegisters
dumpCell
indexingMode
clearLinkBufferStats
linkBufferStats
getpid
haveABadTime
isHavingABadTime
callWithStackSize
createGlobalObject
createProxy
createRuntimeArray
createNullRopeString
createImpureGetter
createCustomGetterObject
createDOMJITNodeObject
createDOMJITGetterObject
createDOMJITGetterNoEffectsObject
createDOMJITGetterComplexObject
createDOMJITFunctionObject
createDOMJITCheckJSCastObject
createDOMJITGetterBaseJSObject
createBuiltin
createWasmStreamingParser
createWasmStreamingCompilerForCompile
createWasmStreamingCompilerForInstantiate
createStaticCustomAccessor
createStaticCustomValue
createObjectDoingSideEffectPutWithoutCorrectSlotStatus
createEmptyFunctionWithName
getPrivateProperty
setImpureGetterDelegate
Root
Element
getElement
SimpleObject
getHiddenValue
setHiddenValue
shadowChickenFunctionsOnStack
setGlobalConstRedeclarationShouldNotThrow
findTypeForExpression
returnTypeFor
flattenDictionaryObject
dumpBasicBlockExecutionRanges
hasBasicBlockExecuted
basicBlockExecutionCount
enableDebuggerModeWhenIdle
disableDebuggerModeWhenIdle
deleteAllCodeWhenIdle
globalObjectForObject
getGetterSetter
loadGetterFromGetterSetter
createCustomTestGetterSetter
deltaBetweenButterflies
currentCPUTime
totalGCTime
parseCount
isWasmSupported
make16BitStringIfPossible
getStructureTransitionList
getConcurrently
rejectPromiseAsHandled
setUserPreferredLanguages
icuVersion
icuHeaderVersion
assertEnabled
securityAssertEnabled
asanEnabled
isMemoryLimited
isGigacageEnabled
toCacheableDictionary
toUncacheableDictionary
isPrivateSymbol
dumpAndResetPasDebugSpectrum
monotonicTimeNow
wallTimeNow
approximateTimeNow
jitSizeStatistics
dumpJITSizeStatistics
resetJITSizeStatistics
ensureArrayStorage
 total ms: 
 max ms: 
JSC::FunctionOverridesAssertScope::FunctionOverridesAssertScope()
JSC::FunctionOverridesAssertScope::~FunctionOverridesAssertScope()
<overridden>
SYNTAX ERROR
Expecting '
' clause:
Cannot have any characters before '
' must be followed by a ' ':
Missing { after '
' clause start delimiter:
Delimiter '
' cannot have '{', '}', or whitespace:
Unexpected characters after '
' clause end delimiter '
' not found:
Are you missing a '}' before the delimiter?
./tools/JSDollarVM.h
Dumping 
 values before crashing:
Error thrown while crashing: 
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = JSC::CallerFrameJITTypeFunctor]
CallFrame
valid
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = (lambda at ./tools/JSDollarVM.cpp:173:32)]
codeBlock
unlinkedCodeBlock
executable
Invalid codeBlock: 
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = (lambda at ./tools/JSDollarVM.cpp:2617:28)]
haveABadTime expects first argument to be an object if provided
isHavingABadTime expects first argument to be an object if provided
Options are frozen
Invalid number of arguments
arg0 should be a function
arg1 should be a number
Unable to setup desired stack size
JSC::EncodedJSValue JSC::functionCallWithStackSize(JSC::JSGlobalObject *, JSC::CallFrame *)
RuntimeArray
static bool (anonymous namespace)::RuntimeArray::put(JSC::JSCell *, JSC::JSGlobalObject *, JSC::PropertyName, JSC::JSValue, JSC::PutPropertySlot &)
static bool (anonymous namespace)::RuntimeArray::deleteProperty(JSC::JSCell *, JSC::JSGlobalObject *, JSC::PropertyName, JSC::DeletePropertySlot &)
ImpureGetter
CustomGetter
customGetter
customGetterAccessor
DOMJITNode
customGetter2
DOMJITGetter
DOMJITGetterNoEffects
DOMJITGetterComplex
enableException
DOMJITFunctionObject
func
DOMJITCheckJSCastObject
DOMJITGetterBaseJSObject
WasmStreamingParser
addBytes
finalize
first argument must be an ArrayBufferView or an ArrayBuffer
underlying TypedArray has been detatched from the ArrayBuffer
First argument is not a JS function
You shouldn't see this...
WasmStreamingCompiler
StaticCustomAccessor
testStaticAccessor
testStaticAccessorDontEnum
testStaticAccessorReadOnly
StaticCustomValue
testStaticValueNoSetter
testStaticValueReadOnly
testStaticValueSetFlag
JSC::EncodedJSValue JSC::functionCreateObjectDoingSideEffectPutWithoutCorrectSlotStatus(JSC::JSGlobalObject *, JSC::CallFrame *)
Unknown private name.
argument is not an ImpureGetter
Cannot create Element without a Root.
JSC::Element is opaque root
Invalid use of getHiddenValue test function
Invalid use of setHiddenValue test function
JSC::EncodedJSValue JSC::functionFindTypeForExpression(JSC::JSGlobalObject *, JSC::CallFrame *)
jsc Testing API: functionFindTypeForExpression
JSC::EncodedJSValue JSC::functionReturnTypeFor(JSC::JSGlobalObject *, JSC::CallFrame *)
jsc Testing API: functionReturnTypeFor
JSC::EncodedJSValue JSC::functionFlattenDictionaryObject(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::functionDumpBasicBlockExecutionRanges(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::functionHasBasicBlockExecuted(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::functionBasicBlockExecutionCount(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::functionGlobalObjectForObject(JSC::JSGlobalObject *, JSC::CallFrame *)
Invalid use of loadGetterFromGetterSetter test function: argument is not a GetterSetter
JSC::EncodedJSValue JSC::functionLoadGetterFromGetterSetter(JSC::JSGlobalObject *, JSC::CallFrame *)
customValue
customValue2
customAccessor
customValueGlobalObject
customAccessorGlobalObject
customValueNoSetter
customAccessorReadOnly
customFunction
JSTestCustomGetterSetter
Expected first argument to be an array
Expected first argument to be an object
ObjectDoingSideEffectPutWithoutCorrectSlotStatus
Before Marking
After Marking
 @ phase 
: FAILED in cell list '
' (size 
CodeBlock 
 has ZAPPED ValueProfile cell 
Search for cell 
 in VM 
./tools/SigillCrashAnalyzer.cpp
auto JSC::installCrashHandler()::(anonymous class)::operator()(WTF::Signal, WTF::SigInfo &, WTF::PlatformRegisters &) const
Dumping host frame registers not supported.
Register frame: 
-----------------------------------------------------------------------------
            use            |   address  |                value               
[r% 3d %14s]      | %10p | 0x%-16llx %s
[ArgumentCount]            | %10p | %lu 
[Callee]                   | %10p | 0x%-16llx %s
[CodeBlock]                | %10p | 0x%-16llx 
[ReturnPC]                 | %10p | %p 
[CallerFrame]              | %10p | %p 
CalleeSaveReg
./tools/VMInspector.cpp
static void JSC::VMInspector::dumpRegisters(JSC::CallFrame *)
[r% 3d]                     | %10p | 0x%-16llx %s
<%p, %s>
structureID 
%d 0x%x
 structure 
indexingTypeAndMisc 
%d 0x%hhx
type 
flags 
cellState 
butterfly
base 
hasIndexingHeader 
 hasAnyArrayStorage 
publicLength 
 vectorLength 
 indexBias 
preCapacity 
 propertyCapacity 
preCapacity
propertyCapacity
indexingHeader
static void JSC::VMInspector::dumpCellMemoryToStream(JSC::JSCell *, WTF::PrintStream &)
arrayStorage
indexedProperties
unallocated capacity
ERROR: current thread does not own the JSLock
%p : 0x%016llx
<--- 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/interpreter/CallFrame.h
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = FetchCodeBlockFunctor]
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = JSC::DumpFrameFunctor]
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = (lambda at ./tools/VMInspector.cpp:378:28)]
[ReturnVPC]                | %10p | %d (line %d)
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = (lambda at ./tools/VMInspector.cpp:426:35)]
    [
 Hash:
can't allocate memory for 
 locals
 arguments
./wasm/WasmB3IRGenerator.cpp
JSC::Wasm::B3IRGenerator::PartialResult JSC::Wasm::B3IRGenerator::atomicLoad(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::B3IRGenerator::ExpressionType, JSC::Wasm::B3IRGenerator::ExpressionType &, uint32_t)
JSC::Wasm::B3IRGenerator::PartialResult JSC::Wasm::B3IRGenerator::atomicBinaryRMW(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::B3IRGenerator::ExpressionType, JSC::Wasm::B3IRGenerator::ExpressionType, JSC::Wasm::B3IRGenerator::ExpressionType &, uint32_t)
JSC::B3::Value *JSC::Wasm::B3IRGenerator::emitAtomicCompareExchange(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, uint32_t)
JSC::Wasm::B3IRGenerator::PartialResult JSC::Wasm::B3IRGenerator::atomicCompareExchange(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::B3IRGenerator::ExpressionType, JSC::Wasm::B3IRGenerator::ExpressionType, JSC::Wasm::B3IRGenerator::ExpressionType, JSC::Wasm::B3IRGenerator::ExpressionType &, uint32_t)
JSC::Wasm::B3IRGenerator::PartialResult JSC::Wasm::B3IRGenerator::truncSaturated(JSC::Wasm::Ext1OpType, JSC::Wasm::B3IRGenerator::ExpressionType, JSC::Wasm::B3IRGenerator::ExpressionType &, JSC::Wasm::Type, JSC::Wasm::Type)
JSC::B3::Value *JSC::Wasm::B3IRGenerator::loadFromScratchBuffer(unsigned int &, JSC::B3::Value *, B3::Type)
JSC::Wasm::B3IRGenerator::PartialResult JSC::Wasm::B3IRGenerator::addReturn(const JSC::Wasm::B3IRGenerator::ControlData &, const JSC::Wasm::B3IRGenerator::Stack &)
 WebAssembly functions
 compilation contexts
Out of executable memory while tiering up function at index 
WebAssembly BBQ function[%i] %s name %s
, in function at index 
Out of executable memory in function at index 
Out of executable memory in function entrypoint at index 
Embedder->WebAssembly entrypoint[%i] %s name %s
WebAssembly->WebAssembly import[%i]
./wasm/WasmCallee.cpp
const JSC::Wasm::StackMap &JSC::Wasm::OptimizingJITCallee::stackmap(JSC::CallSiteIndex) const
./wasm/WasmCalleeGroup.cpp
bool JSC::Wasm::CalleeGroup::isSafeToRun(JSC::Wasm::MemoryMode)
LLInt
BBQForOSREntry
OMGForOSREntry
EmbedderEntrypoint
./wasm/WasmCompilationMode.cpp
const char *JSC::Wasm::makeString(JSC::Wasm::CompilationMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/b3/B3Opcode.h
JSC::B3::Opcode JSC::B3::opcodeForConstant(JSC::B3::Type)
B3::Type JSC::Wasm::toB3Type(JSC::Wasm::Type)
./wasm/WasmCallingConvention.h
JSC::Wasm::ArgumentLocation JSC::Wasm::WasmCallingConvention::marshallLocation(JSC::Wasm::CallRole, JSC::Wasm::Type, size_t &, size_t &, size_t &) const
uint32_t JSC::Wasm::sizeOfLoadOp(JSC::Wasm::LoadOpType)
JSC::B3::Value *JSC::Wasm::B3IRGenerator::emitLoadOp(JSC::Wasm::LoadOpType, JSC::B3::Value *, uint32_t)
uint32_t JSC::Wasm::sizeOfStoreOp(JSC::Wasm::StoreOpType)
void JSC::Wasm::B3IRGenerator::emitStoreOp(JSC::Wasm::StoreOpType, JSC::B3::Value *, JSC::B3::Value *, uint32_t)
uint32_t JSC::Wasm::memoryLog2Alignment(JSC::Wasm::ExtAtomicOpType)
JSC::B3::Value *JSC::Wasm::B3IRGenerator::emitAtomicBinaryRMWOp(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::B3::Value *, JSC::B3::Value *, uint32_t)
JSC::B3::Value *JSC::Wasm::B3IRGenerator::sanitizeAtomicResult(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::B3::Value *)
./wasm/WasmIRGeneratorHelpers.h
void JSC::Wasm::computeExceptionHandlerLocations(Vector<CodeLocationLabel<ExceptionHandlerPtrTag>> &, const JSC::Wasm::InternalFunction *, const JSC::Wasm::CompilationContext &, JSC::LinkBuffer &)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/wasm/WasmCallee.h
JSC::Wasm::OptimizingJITCallee::OptimizingJITCallee(Wasm::CompilationMode, Wasm::Entrypoint &&, size_t, std::pair<const Name *, RefPtr<NameSection>> &&, Vector<JSC::Wasm::UnlinkedWasmToWasmCall> &&, JSC::Wasm::StackMaps &&, Vector<JSC::Wasm::UnlinkedHandlerInfo> &&, Vector<CodeLocationLabel<ExceptionHandlerPtrTag>> &&)
./wasm/WasmCalleeRegistry.h
void JSC::Wasm::CalleeRegistry::addPCToCodeOriginMap(JSC::Wasm::Callee *, Box<JSC::PCToCodeOriginMap>)
./wasm/WasmCalleeGroup.h
JSC::Wasm::Callee &JSC::Wasm::CalleeGroup::wasmEntrypointCalleeFromFunctionIndexSpace(const WTF::AbstractLocker &, unsigned int)
InstructionStream::Offset JSC::Wasm::LLIntCallee::bytecodeOffset(const JSC::Instruction *)
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)64376, T = JSC::AssemblerLabel]
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/StdLibExtras.h
ToType WTF::safeCast(FromType) [ToType = int, FromType = unsigned long]
WebAssembly.Module failed compiling: 
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Const32Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Const32Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Const32Value *, JSC::B3::Const32Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Const32Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Const32Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Const32Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Const32Value *, JSC::B3::Value *>]
auto JSC::Wasm::B3IRGenerator::truncSaturated(JSC::Wasm::Ext1OpType, JSC::Wasm::B3IRGenerator::ExpressionType, JSC::Wasm::B3IRGenerator::ExpressionType &, JSC::Wasm::Type, JSC::Wasm::Type)::(anonymous class)::operator()(JSC::CCallHelpers &, const JSC::B3::StackmapGenerationParams &) const
Wasm: 
can't add 
 arguments to Function
can't get local groups count
can't allocate enough memory for function's 
can't get Function's number of locals in group 
Function's number of locals is too big 
 maximum 
can't get Function local's type in group 
Function locals must have a defaultable type
WebAssembly.Module doesn't parse at byte 
can't decode opcode
invalid opcode 
else block isn't associated to an if
wasm exceptions are not enabled
catch block isn't associated to a try
./wasm/WasmFunctionParser.h
JSC::Wasm::Parser<void>::PartialResult JSC::Wasm::FunctionParser<JSC::Wasm::B3IRGenerator>::parseUnreachableExpression() [Context = JSC::Wasm::B3IRGenerator]
can't use delegate at the top-level of a function
delegate isn't associated to a try
delegate target isn't a try block
can't get inline type for 
 in unreachable context
can't get the number of targets for br_table in unreachable context
br_table's number of targets is too big 
can't get 
th target for br_table in unreachable context
can't get default target for br_table in unreachable context
can't get call_indirect's signature index in unreachable context
can't get call_indirect's reserved byte in unreachable context
can't parse 32-bit floating-point constant
can't parse 64-bit floating-point constant
can't get first immediate for 
can't get second immediate for 
rethrow doesn't refer to a catch block
can't get immediate for 
can't parse extended 0xfc opcode
invalid extended 0xfc op 
can't parse table index
can't parse reserved byte for grow_memory/current_memory
reserved byte for grow_memory/current_memory must be zero
wasm-threading is not enabled
can't parse atomic extended opcode
atomic instruction without memory
can't get load alignment
byte alignment 
 exceeds load's natural alignment 
can't get first immediate for atomic 
can't get flags
flags should be 0x0 but got 
invalid extended atomic op 
WebAssembly.Module doesn't validate: 
can't parse exception index
exception index 
 is invalid, limit is 
can't get br / br_if's target
br / br_if's target 
 exceeds control stack size 
 block with type: 
 returns: 
 but stack has: 
 values
control flow returns with unexpected type. 
 is not a 
result type of block: 
 is not a value type or Void
Block-like instruction doesn't return value type but can't decode type section index
Block-like instruction signature index is negative
Block-like instruction signature index is out of bounds. Index: 
 type index space: 
int JSC::Wasm::linearizeType(JSC::Wasm::TypeKind)
I32Const
I64Const
F64Const
F32Const
RefIsNull
RefFunc
GetLocal
SetLocal
TeeLocal
GetGlobal
SetGlobal
TableGet
TableSet
CallIndirect
CallRef
CurrentMemory
GrowMemory
Unreachable
Block
Loop
Else
Catch
Throw
Rethrow
BrIf
BrTable
Delegate
CatchAll
Drop
AnnotatedSelect
I32Clz
I32Eqz
I64Clz
I64Eqz
F32Abs
F32Neg
F32Ceil
F32Floor
F32Sqrt
F64Abs
F64Neg
F64Ceil
F64Floor
F64Sqrt
I32WrapI64
I64ExtendSI32
I64ExtendUI32
F32ConvertSI32
F32ConvertUI32
F32ConvertSI64
F32DemoteF64
F32ReinterpretI32
F64ConvertSI32
F64ConvertUI32
F64ConvertSI64
F64PromoteF32
F64ReinterpretI64
I32ReinterpretF32
I64ReinterpretF64
I32Extend8S
I32Extend16S
I64Extend8S
I64Extend16S
I64Extend32S
I32Ctz
I32Popcnt
I64Ctz
I64Popcnt
F32Trunc
F32Nearest
F64Trunc
F64Nearest
I32TruncSF32
I32TruncSF64
I32TruncUF32
I32TruncUF64
I64TruncSF32
I64TruncSF64
I64TruncUF32
I64TruncUF64
F32ConvertUI64
F64ConvertUI64
I32Add
I32Sub
I32Mul
I32And
I32Or
I32Xor
I32Shl
I32ShrU
I32ShrS
I32Rotr
I32Rotl
I32Eq
I32Ne
I32LtS
I32LeS
I32LtU
I32LeU
I32GtS
I32GeS
I32GtU
I32GeU
I64Add
I64Sub
I64Mul
I64And
I64Or
I64Xor
I64Shl
I64ShrU
I64ShrS
I64Rotr
I64Rotl
I64Eq
I64Ne
I64LtS
I64LeS
I64LtU
I64LeU
I64GtS
I64GeS
I64GtU
I64GeU
F32Add
F32Sub
F32Mul
F32Div
F32Min
F32Max
F32Copysign
F32Eq
F32Ne
F32Lt
F32Le
F32Gt
F32Ge
F64Add
F64Sub
F64Mul
F64Div
F64Min
F64Max
F64Copysign
F64Eq
F64Ne
F64Lt
F64Le
F64Gt
F64Ge
I32DivS
I32DivU
I32RemS
I32RemU
I64DivS
I64DivU
I64RemS
I64RemU
I32Load8S
I32Load8U
I32Load16S
I32Load16U
I64Load8S
I64Load8U
I64Load16S
I64Load16U
I64Load32S
I64Load32U
I32Load
I64Load
F32Load
F64Load
I32Store8
I32Store16
I64Store8
I64Store16
I64Store32
I32Store
I64Store
F32Store
F64Store
Ext1
ExtAtomic
const char *JSC::Wasm::makeString(JSC::Wasm::OpType)
can't get index for local
attempt to use unknown local 
 last one is 
can't get global's index
 of unknown global, limit is 
can't parse function index
function index 
 exceeds function index space 
can't parse element index
element index 
table index 
can't parse destination table index
can't parse source table index
can't parse auxiliary byte
auxiliary byte for memory.fill should be zero, but got 
auxiliary byte for memory.copy should be zero, but got 
can't parse unused
memory.init invalid unsued byte
can't parse data segment index
data segment index 
select can't parse the size of annotation vector
select invalid result arity for
select can't parse annotations
can't pop empty stack in select condition
can't pop empty stack in select zero
can't pop empty stack in select non-zero
can't use ref-types with unannotated select
select condition must be i32, got 
select result types must match, got 
can't parse 32-bit constant
can't parse 64-bit constant
can't pop empty stack in table.get
table.get index to type 
 expected 
can't pop empty stack in table.set
table.set index to type 
table.set value to type 
JSC::Wasm::Parser<void>::PartialResult JSC::Wasm::FunctionParser<JSC::Wasm::B3IRGenerator>::parseExpression() [Context = JSC::Wasm::B3IRGenerator]
can't parse 0xfc extended opcode
can't pop empty stack in table.init
table.init dst_offset to type 
table.init src_offset to type 
table.init length to type 
can't pop empty stack in table.grow
table.grow expects fill value of type 
 got 
table.grow expects an i32 delta value, got 
can't pop empty stack in table.fill
table.fill expects fill value of type 
table.fill expects an i32 offset value, got 
table.fill expects an i32 count value, got 
type mismatch at table.copy. got 
can't pop empty stack in table.copy
table.copy dst_offset to type 
table.copy src_offset to type 
table.copy length to type 
memory must be present
can't pop empty stack in memory.fill
memory.fill dstAddress to type 
memory.fill targetValue to type 
memory.fill size to type 
can't pop empty stack in memory.copy
memory.copy dstAddress to type 
memory.copy targetValue to type 
memory.copy size to type 
can't pop empty stack in memory.init
memory.init dst address to type 
memory.init src address to type 
memory.init length to type 
invalid 0xfc extended op 
ref.null heaptype must be funcref, externref or type_idx
ref.null type must be a reference type
can't pop empty stack in ref.is_null
ref.is_null to type 
 expected a reference type
can't get index for ref.func
ref.func index 
 is too large, max is 
 isn't declared
can't pop empty stack in set_local
attempt to set unknown local 
set_local to type 
can't tee_local on empty expression stack
attempt to tee unknown local 
can't pop empty stack in set_global value
set_global 
 is immutable
 with type 
 with a variable of type 
call function index 
 has 
 arguments, but the expression stack currently holds 
can't allocate enough memory for call's 
argument type mismatch in call, got 
call_indirect is only valid when a table is defined or imported
can't get call_indirect's signature index
can't get call_indirect's table index
call_indirect's table index 
 invalid, limit is 
call_indirect's signature index 
 exceeds known signatures 
call_indirect is only valid when a table has type funcref
call_indirect expects 
non-i32 call_indirect index 
can't allocate enough memory for 
 call_indirect arguments
argument type mismatch in call_indirect, got 
function references are not enabled
non-funcref call_ref value 
call_ref expects 
can't get block's signature
Too few values on stack for block. Block expects 
, but only 
 were present. Block has inlineSignature: 
Block expects the argument at index
 to be 
 but argument has type 
can't get loop's signature
Too few values on stack for loop block. Loop expects 
 were present. Loop has inlineSignature: 
Loop expects the argument at index
can't get if's signature
can't pop empty stack in if condition
if condition must be i32, got 
Too few arguments on stack for if block. If expects 
 were present. If block has signature: 
can't use else block at the top-level of a function
can't get try's signature
Too few arguments on stack for try block. Trye expects 
 were present. Try block has signature: 
Try expects the argument at index
can't use catch block at the top-level of a function
delegate target isn't a try or the top level block
Too few arguments on stack for the exception being thrown. The exception expects 
 were present. Exception has signature: 
can't allocate enough memory for throw's 
The exception being thrown expects the argument at index 
can't pop empty stack in br / br_if condition
conditional branch with non-i32 condition 
can't get the number of targets for br_table
 br_table targets
th target for br_table
br_table's 
th target 
can't get default target for br_table
br_table's default target 
can't pop empty stack in br_table condition
br_table with non-i32 condition 
br_table target type size mismatch. Default has size: 
but target: 
 has size: 
br_table target type mismatch at offset 
 expected: 
 but saw: 
 when targeting block: 
can't drop on empty stack
grow_memory is only valid if a memory is defined or imported
can't parse reserved byte for grow_memory
reserved byte for grow_memory must be zero
can't pop empty stack in expect an i32 argument to grow_memory on the stack
grow_memory with non-i32 delta argument has type: 
current_memory is only valid if a memory is defined or imported
can't parse reserved byte for current_memory
reserved byte for current_memory must be zero
can't pop empty stack in binary right
can't pop empty stack in binary left
 left value type mismatch
 right value type mismatch
can't pop empty stack in unary
 value type mismatch
load instruction without memory
can't get load offset
can't pop empty stack in load pointer
 pointer type mismatch
uint32_t JSC::Wasm::memoryLog2Alignment(JSC::Wasm::OpType)
store instruction without memory
can't get store alignment
 exceeds store's natural alignment 
can't get store offset
can't pop empty stack in store value
can't pop empty stack in store pointer
trunc-saturated value type mismatch
can't pop empty stack in value
can't pop empty stack in pointer
can't pop empty stack in timeout
 timeout type mismatch
can't pop empty stack in count
 count type mismatch
can't pop empty stack in expected
 expected type mismatch
branch out of function
branch to block
 on expression stack of size 
, but block, 
 expects 
branch's stack type is not a block's type branch target type. Stack value has type 
 but branch target expects a value of 
 at index 
Failed allocating enough space for 
static void JSC::AbstractMacroAssembler<JSC::X86Assembler>::repatchNearCall(CodeLocationNearCall<callTag>, CodeLocationLabel<destTag>) [AssemblerType = JSC::X86Assembler, callTag = (WTF::PtrTag)64376, destTag = (WTF::PtrTag)64376]
./wasm/WasmEntryPlan.h
Vector<MacroAssemblerCodeRef<WasmEntryPtrTag>> &&JSC::Wasm::EntryPlan::takeWasmToWasmExitStubs()
Vector<Vector<JSC::Wasm::UnlinkedWasmToWasmCall>> JSC::Wasm::EntryPlan::takeWasmToWasmCallsites()
./wasm/WasmLLIntPlan.h
JSC::Wasm::EmbedderEntrypointCalleeMap &&JSC::Wasm::LLIntPlan::takeEmbedderCallees()
./wasm/WasmCallingConvention.cpp
auto JSC::Wasm::wasmCallingConvention()::(anonymous class)::operator()() const
./wasm/WasmEntryPlan.cpp
const char *JSC::Wasm::EntryPlan::stateString(JSC::Wasm::EntryPlan::State)
Took 
 us to validate module
 WebAssembly to JavaScript stubs
 unlinked WebAssembly to WebAssembly calls
Out of executable memory at import 
void JSC::Wasm::EntryPlan::prepare()
./wasm/WasmGlobal.cpp
void JSC::Wasm::Global::set(JSC::JSGlobalObject *, JSC::JSValue)
Non-null Externref cannot be null
Funcref must be an exported wasm function
Argument function did not match the reference type
.wasm-function[
./wasm/WasmFaultSignalHandler.cpp
WTF::SignalAction JSC::Wasm::trapHandler(WTF::Signal, WTF::SigInfo &, WTF::PlatformRegisters &)
bool JSC::LLInt::isWasmLLIntPC(void *)
void JSC::Wasm::Global::visitAggregateImpl(Visitor &) [Visitor = JSC::AbstractSlotVisitor]
void JSC::Wasm::Global::visitAggregateImpl(Visitor &) [Visitor = JSC::SlotVisitor]
./wasm/WasmInstance.cpp
JSC::Wasm::Table *JSC::Wasm::Instance::table(unsigned int)
void JSC::Wasm::Instance::tableCopy(uint32_t, uint32_t, uint32_t, uint32_t, uint32_t)
bool JSC::Wasm::Instance::memoryInit(uint32_t, uint32_t, uint32_t, uint32_t)
const JSC::Wasm::Element *JSC::Wasm::Instance::elementAt(unsigned int) const
void JSC::Wasm::Instance::initElementSegment(uint32_t, const JSC::Wasm::Element &, uint32_t, uint32_t, uint32_t)
void JSC::Wasm::Instance::tableInit(uint32_t, uint32_t, uint32_t, uint32_t, uint32_t)
void JSC::Wasm::Instance::setTable(unsigned int, Ref<JSC::Wasm::Table> &&)
./wasm/WasmLLIntGenerator.cpp
std::unique_ptr<FunctionCodeBlockGenerator> JSC::Wasm::LLIntGenerator::finalize()
JSC::Wasm::LLIntGenerator::LLIntCallInformation JSC::Wasm::LLIntGenerator::callInformationForCaller(const JSC::Wasm::Signature &)
Vector<JSC::VirtualRegister, 2> JSC::Wasm::LLIntGenerator::callInformationForCallee(const JSC::Wasm::Signature &)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::addArguments(const JSC::Wasm::Signature &)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::addCatchToUnreachable(unsigned int, const JSC::Wasm::Signature &, JSC::Wasm::LLIntGenerator::ControlType &, JSC::Wasm::LLIntGenerator::ResultList &)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::addEndToUnreachable(JSC::Wasm::LLIntGenerator::ControlEntry &, JSC::Wasm::LLIntGenerator::Stack &, bool)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::endTopLevel(JSC::Wasm::BlockSignature, const JSC::Wasm::LLIntGenerator::Stack &)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::atomicLoad(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType &, uint32_t)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::atomicStore(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType, uint32_t)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::atomicBinaryRMW(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType &, uint32_t)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::atomicCompareExchange(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType &, uint32_t)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::atomicWait(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType &, uint32_t)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::truncSaturated(JSC::Wasm::Ext1OpType, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType &, JSC::Wasm::Type, JSC::Wasm::Type)
void JSC::GenericLabel<JSC::Wasm::GeneratorTraits>::setLocation(BytecodeGeneratorBase<Wasm::GeneratorTraits> &, unsigned int) [Traits = JSC::Wasm::GeneratorTraits]
Out of executable memory in Wasm LLInt entry thunks
Wasm LLInt entry thunks
Embedder->WebAssembly entrypoint[%i] %s
./wasm/WasmLLIntTierUpCounter.cpp
const JSC::Wasm::LLIntTierUpCounter::OSREntryData &JSC::Wasm::LLIntTierUpCounter::osrEntryDataForLoop(InstructionStream::Offset) const
mprotect failed: 
./wasm/WasmMemory.cpp
JSC::Wasm::MemoryHandle::~MemoryHandle()
static RefPtr<JSC::Wasm::Memory> JSC::Wasm::Memory::tryCreate(JSC::Wasm::PageCount, JSC::Wasm::PageCount, JSC::Wasm::MemorySharingMode, WTF::Function<void (NotifyPressure)> &&, WTF::Function<void (SyncTryToReclaim)> &&, WTF::Function<void (GrowSuccess, PageCount, PageCount)> &&)
Expected<JSC::Wasm::PageCount, Memory::GrowFailReason> JSC::Wasm::Memory::grow(JSC::Wasm::PageCount)
./wasm/WasmMemoryInformation.cpp
JSC::Wasm::MemoryInformation::MemoryInformation(JSC::Wasm::PageCount, JSC::Wasm::PageCount, bool, bool)
BoundsChecking
Signaling
./wasm/WasmMemoryMode.cpp
const char *JSC::Wasm::makeString(JSC::Wasm::MemoryMode)
Default
Shared
const char *JSC::Wasm::makeString(JSC::Wasm::MemorySharingMode)
./wasm/WasmInstance.h
JSC::Wasm::Instance::ImportFunctionInfo *JSC::Wasm::Instance::importFunctionInfo(size_t)
JSC::Wasm::Callee &JSC::Wasm::CalleeGroup::embedderEntrypointCalleeFromFunctionIndexSpace(unsigned int)
MacroAssemblerCodePtr<WasmEntryPtrTag> *JSC::Wasm::CalleeGroup::entrypointLoadLocationFromFunctionIndexSpace(unsigned int)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/InstructionStream.h
void JSC::InstructionStreamWriter::setInstructionBuffer(JSC::InstructionStream::InstructionBuffer &&)
std::unique_ptr<InstructionStream> JSC::InstructionStreamWriter::finalize(JSC::InstructionStream::InstructionBuffer &)
auto JSC::Wasm::LLIntGenerator::callInformationForCaller(const JSC::Wasm::Signature &)::(anonymous class)::operator()(JSC::Wasm::Type) const
Freed physical: 
; state: 
fast memories =  
, bytes = 
Freed virtual; state: 
auto JSC::Wasm::Memory::growShared(JSC::Wasm::PageCount)::(anonymous class)::operator()() const
Allocated physical: 
Success
SuccessAndNotifyMemoryPressure
SyncTryToReclaimMemory
static const char *JSC::Wasm::(anonymous namespace)::MemoryResult::toString(JSC::Wasm::(anonymous namespace)::MemoryResult::Kind)
./wasm/WasmPageCount.h
static JSC::Wasm::PageCount JSC::Wasm::PageCount::fromBytes(uint64_t)
JSC::Wasm::Parser<void>::PartialResult JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseUnreachableExpression() [Context = JSC::Wasm::LLIntGenerator]
JSC::Wasm::Parser<void>::PartialResult JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseExpression() [Context = JSC::Wasm::LLIntGenerator]
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/ThreadSpecific.h
T *WTF::ThreadSpecific<WTF::Vector<unsigned char, 0, WTF::UnsafeVectorOverflow, 16>, WTF::CanBeGCThread::False>::set() [T = WTF::Vector<unsigned char, 0, WTF::UnsafeVectorOverflow, 16>, canBeGCThread = WTF::CanBeGCThread::False]
int JSC::GenericBoundLabel<JSC::Wasm::GeneratorTraits>::target() [Traits = JSC::Wasm::GeneratorTraits]
Allocated virtual: 
{basePtr = 
, kind = 
can't allocate enough memory for function names
can't get name type for payload 
can't get payload length for payload 
payload length is too big for payload 
can't get module's name length for payload 
can't get module's name of length 
 for payload 
can't get function count for payload 
can't get function 
 index for payload 
 index 
 is larger than function index space 
can't get functions 
's name length for payload 
's name of length 
can't get local's function index for payload 
can't get local count for payload 
can't get local 
when trying to tier up 
WebAssembly OMG function[%i] %s name %s
WebAssembly OMGForOSREntry function[%i] %s name %s
./wasm/WasmOSREntryPlan.cpp
virtual void JSC::Wasm::OSREntryPlan::work(JSC::Wasm::Plan::CompilationEffort)
{opcode: 
, location: 
OMG OSR entry values[
./wasm/WasmOperations.cpp
void JSC::Wasm::loadValuesIntoBuffer(Probe::Context &, const JSC::Wasm::StackMap &, uint64_t *)
Consider OSREntryPlan for [
] loopIndex#
delayOMGCompile still compiling for 
triggerOMGOSR for 
Consider OMGPlan for [
] with executeCounter = 
delayOMGCompile replacement in place, delaying indefinitely for 
delayOMGCompile trigger in place, delaying indefinitely for 
JS results to Wasm are too large
Incorrect number of values returned to Wasm from JS
Funcref value is not a function
void JSC::Wasm::operationIterateResults(JSC::CallFrame *, JSC::Wasm::Instance *, const JSC::Wasm::Signature *, JSC::JSValue, uint64_t *, uint64_t *)
JSC::JSArray *JSC::Wasm::operationAllocateResultsArray(JSC::CallFrame *, Wasm::Instance *, const JSC::Wasm::Signature *, JSC::IndexingType, JSC::JSValue *)
int32_t JSC::Wasm::operationGrowMemory(void *, JSC::Wasm::Instance *, int32_t)
JSC::Wasm::PointerPair JSC::Wasm::operationWasmRetrieveAndClearExceptionIfCatchable(JSC::Wasm::Instance *)
Ref<JSC::Wasm::ModuleInformation> &&JSC::Wasm::EntryPlan::takeModuleInformation()
Vector<Ref<JSC::Wasm::LLIntCallee>> &&JSC::Wasm::LLIntPlan::takeCallees()
MacroAssemblerCodeRef<JITCompilationPtrTag> &&JSC::Wasm::LLIntPlan::takeEntryThunks()
JSC::Wasm::BBQCallee &JSC::Wasm::CalleeGroup::wasmBBQCalleeFromFunctionIndexSpace(unsigned int)
delayOMGCompile counter = 
Choosing not to OMG-optimize 
triggerOMGReplacement for 
: OMG-optimizing soon.
: Not OMG-optimizing anytime soon.
: OMG-optimizing after warm-up.
void JSC::Wasm::doOSREntry(JSC::Wasm::Instance *, Probe::Context &, JSC::Wasm::BBQCallee &, JSC::Wasm::OSREntryCallee &, JSC::Wasm::OSREntryData &)
:OMG OSR entry: got entry callee 
Inner-loop loopIndex#
 setting parent loop loopIndex#
WebAssembly Plan was cancelled. If you see this error message please file a bug at bugs.webkit.org!
can't get Type section's count
Type section's count is too big 
can't allocate enough memory for Type section's 
 entries
can't get 
th Type's type
th Type is non-Func 
th Type's argument count
th argument count is too big 
th signature
th argument Type
th Type's return count
th Type's return value
can't get Import section's count
Import section's count is too big 
 globals
 imports
 import function signatures
 import exception signatures
th Import's module name length
th Import's module name of length 
th Import's field name length in module '
th Import's field name of length 
 in module '
th Import's kind in module '
' field '
th Import's function signature in module '
invalid function signature for 
th Import, 
 is out of range of 
th Import exception's tag type
th Import exception has tag type 
 but the only supported tag type is 0
th Import's exception signature in module '
invalid exception signature for 
can't get Function section's count
Function section's count is too big 
 Function signatures
Function locations
th Function's type number
th Function type number is invalid 
can't parse resizable limits flags
resizable limits flag should be 0x00, 0x01, or 0x03 but 0x
can't use shared limits for non memory
can't parse resizable limits initial page count
shared memory is not enabled
can't parse resizable limits maximum page count
resizable limits has an initial page count of 
 which is greater than its maximum 
Table count of 
 is too big, maximum 
can't parse Table type
Table type should be funcref or anyref, got 
Table's initial page count of 
can't get Table's count
there can at most be one Memory section for now
Memory's initial page count of 
 is invalid
Memory's maximum page count of 
can't parse Memory section's count
Memory section has more than one memory, WebAssembly currently only allows zero or one
can't get Global section's count
Global section's count is too big 
Global init_expr opcode of type 
 doesn't match global's type 
can't get Export section's count
Export section's count is too big 
 exports
th Export's field name length
th Export's field name of length 
duplicate export: '
th Export's kind, named '
th Export's kind index, named '
th Export has invalid function number 
 it exceeds the function index space 
, named '
can't export Table 
 there are 
 Tables
can't export a non-existent Memory
can't export Memory 
 only one Table is currently supported
th Export has invalid global number 
 it exceeds the globals count 
th Export has invalid exception number 
 it exceeds the exception index space 
can't get Start index
Start index 
Start function can't have arguments
Start function can't return a value
can't get Element section's count
Element section's count is too big 
 Elements
th Element reserved byte, which should be element flags
 Element indices
th Element table index
can't parse reftype in elem section
reftype in element section should be funcref
th Element reserved byte
./wasm/WasmSectionParser.cpp
JSC::Wasm::Parser<void>::PartialResult JSC::Wasm::SectionParser::parseCode()
can't get init_expr's opcode
can't get constant value for init_expr's i32.const
can't get constant value for init_expr's i64.const
can't get constant value for init_expr's f32.const
can't get constant value for init_expr's f64.const
can't get get_global's index
get_global's index 
 exceeds the number of globals 
get_global import kind index 
 exceeds the first internal global 
 is mutable 
can't get ref.func index
ref.func index
 exceeds the number of functions 
unknown init_expr opcode 
can't get init_expr's end opcode
init_expr should end with end, ended with 
Element section for Table 
 exceeds available Table 
Table 
 must have type 'funcref' to have an element section
Element init_expr must produce an i32
can't get element kind
element kind must be zero
th index count for Element section
Element section's 
th index count is too big 
can't get opcode for exp in element section's 
th element's 
th index
opcode for exp in element section's should be either ref.func or ref.null 
can't get Element section's 
th index is 
 which exceeds the function index space size of 
ref.null type must be a func type in elem section
ref.null extern is forbidden in element section's, 
can't get opcode for exp end in element section's 
malformed expr in element section's
Data init_expr must produce an i32
can't get Global's value type
can't get Global type's mutability
invalid Global's mutability: 0x
can't get Data section's count
Data section's count is too big 
can't allocate enough memory for Data section's 
 segments
th Data segment's flag
th Data segment has index 
 which exceeds the number of Memories 
th Data segment's data byte length
th Data segment's data byte length is too big 
th Data segment of size 
th data byte from 
th Data segment
th Data segment's index
unknown 
can't get Data Count section's count
can't get Exception section's count
 exceptions
th Exception tag type
th Exception has tag type 
th Exception's type number
th Exception type number is invalid 
th custom section
th custom section's name length
nameLen get 
th custom section's name of length 
th custom section's 
 bytes
 -> [
: Entered prologue_osr with tierUpCounter = 
: Entered loop_osr with tierUpCounter = 
: Entered epilogue_osr with tierUpCounter = 
./wasm/WasmSlowPaths.cpp
JSC::SlowPathReturnType JSC::LLInt::slow_path_wasm_retrieve_and_clear_exception(JSC::CallFrame *, const JSC::Instruction *, Wasm::Instance *)
module doesn't start with '\0asm'
unexpected version number 
can't get section byte
invalid section
invalid section order, 
 followed by 
Code section's count is too big 
Code section count 
 exceeds the declared number of functions 
parsing ended before the end of 
 section
Code function's size 
 is too big
./wasm/WasmStreamingParser.cpp
JSC::Wasm::StreamingParser::State JSC::Wasm::StreamingParser::parseSectionPayload(Vector<uint8_t> &&)
module size is too large, maximum 
expected a module of at least 
 section's length
 section of size 
 would overflow Module's size
can't get Code section's count
th Code function's size
 exceeds the module's remaining size
Number of functions parsed (
) does not match the number of declared functions (
./wasm/WasmTable.cpp
static RefPtr<JSC::Wasm::Table> JSC::Wasm::Table::tryCreate(uint32_t, std::optional<uint32_t>, JSC::Wasm::TableElementType)
std::optional<uint32_t> JSC::Wasm::Table::grow(uint32_t, JSC::JSValue)
void JSC::Wasm::Table::copy(const JSC::Wasm::Table *, uint32_t, uint32_t)
void JSC::Wasm::Table::clear(uint32_t)
void JSC::Wasm::Table::set(uint32_t, JSC::JSValue)
JSC::JSValue JSC::Wasm::Table::get(uint32_t) const
void JSC::Wasm::FuncRefTable::setFunction(uint32_t, JSC::JSObject *, JSC::Wasm::WasmToWasmImportableFunction, JSC::Wasm::Instance *)
./wasm/WasmParser.h
JSC::Wasm::I32InitExpr JSC::Wasm::makeI32InitExpr(uint8_t, uint32_t)
./wasm/WasmCallee.h
InstructionStream::Offset JSC::Wasm::LLIntCallee::bytecodeOffset(const JSC::Instruction *)
auto JSC::LLInt::slow_path_wasm_loop_osr(JSC::CallFrame *, const JSC::Instruction *, Wasm::Instance *)::(anonymous class)::operator()(Wasm::OSREntryCallee *) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/wasm/WasmInstance.h
auto JSC::LLInt::slow_path_wasm_retrieve_and_clear_exception(JSC::CallFrame *, const JSC::Instruction *, Wasm::Instance *)::(anonymous class)::operator()(const auto &) const [instruction:auto = JSC::WasmCatch]
auto JSC::LLInt::slow_path_wasm_retrieve_and_clear_exception(JSC::CallFrame *, const JSC::Instruction *, Wasm::Instance *)::(anonymous class)::operator()(const auto &) const [instruction:auto = JSC::WasmCatchNoTls]
./wasm/WasmSignature.cpp
static void JSC::Wasm::ParameterTypes::translate(JSC::Wasm::SignatureHash &, const JSC::Wasm::ParameterTypes &, unsigned int)
Begin
Custom
Type
Import
Table
Memory
Global
Export
Start
Code
Data
DataCount
Exception
void JSC::Wasm::Table::visitAggregateImpl(Visitor &) [Visitor = JSC::AbstractSlotVisitor]
void JSC::Wasm::Table::visitAggregateImpl(Visitor &) [Visitor = JSC::SlotVisitor]
Throw exception from Wasm
Throw stack overflow from Wasm
Trigger OMG entry tier up
./wasm/WasmValueLocation.cpp
void JSC::Wasm::ValueLocation::dump(WTF::PrintStream &) const
void WTF::printInternal(WTF::PrintStream &, ValueLocation::Kind)
./wasm/WasmWorklist.cpp
void JSC::Wasm::Worklist::QueueElement::setToNextPriority()
./wasm/js/JSToWasm.cpp
std::unique_ptr<InternalFunction> JSC::Wasm::createJSToWasmWrapper(JSC::CCallHelpers &, const JSC::Wasm::Signature &, Vector<JSC::Wasm::UnlinkedWasmToWasmCall> *, const JSC::Wasm::ModuleInformation &, JSC::Wasm::MemoryMode, unsigned int)
JSToWasmICCallee
WebAssembly
second argument to WebAssembly.instantiateStreaming must be undefined or an Object
Wasm Worklist Helper Thread
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/wasm/WasmCallingConvention.h
JSC::Wasm::ArgumentLocation JSC::Wasm::JSCallingConvention::marshallLocation(JSC::Wasm::CallRole, JSC::Wasm::Type, size_t &, size_t &, size_t &) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
CompileError
Exception
Global
Instance
LinkError
Memory
Module
RuntimeError
Table
compile
instantiate
validate
second argument to WebAssembly.instantiate must be undefined or an Object
instance
WebAssembly.Exception
WebAssembly.Global
mutable
funcref
externref
./wasm/js/JSWebAssemblyGlobal.cpp
JSC::JSObject *JSC::JSWebAssemblyGlobal::type(JSC::JSGlobalObject *)
WebAssembly.Instance
./wasm/js/JSWebAssemblyInstance.cpp
void JSC::JSWebAssemblyInstance::finalizeCreation(JSC::VM &, JSC::JSGlobalObject *, Ref<Wasm::CalleeGroup> &&, JSC::JSObject *, Wasm::CreationMode)
WebAssemblyInstance
can't make WebAssembly.Instance because there is no imports Object and the WebAssembly.Module requires imports
WebAssemblyImportName
must be an object
static JSC::JSWebAssemblyInstance *JSC::JSWebAssemblyInstance::tryCreate(JSC::VM &, JSC::JSGlobalObject *, const JSC::Identifier &, JSC::JSWebAssemblyModule *, JSC::JSObject *, JSC::Structure *, Ref<Wasm::Module> &&, Wasm::CreationMode)
Memory import
is not an instance of WebAssembly.Memory
provided an 'initial' that is smaller than the module's declared 'initial' import memory size
did not have a 'maximum' but the module requires that it does
provided a 'maximum' that is larger than the module's declared 'maximum' import memory size
provided a 'shared' that is differnt from the module's declared 'shared' import memory attribute
WebAssembly.Memory
./wasm/js/JSWebAssemblyMemory.cpp
JSC::JSArrayBuffer *JSC::JSWebAssemblyMemory::buffer(JSC::JSGlobalObject *)
WebAssembly.Memory.grow expects the delta to be a valid page count
WebAssembly.Memory.grow expects the grown size to be a valid page count
WebAssembly.Memory.grow would exceed the memory's declared maximum size
maximum
minimum
WebAssembly.Module
Out of executable memory
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
./wasm/js/JSWebAssemblyHelpers.h
JSC::JSValue JSC::toJSValue(JSC::JSGlobalObject *, const Wasm::Type, uint64_t)
Out of bounds memory access
Out of bounds table access
Out of bounds call_indirect
call_indirect to a null table entry
call_ref to a null reference
call_indirect to a signature that does not match
Out of bounds Trunc operation
Unreachable code should not be executed
Division by zero
Integer overflow
Stack overflow
Funcref must be an exported wasm function
WebAssembly.Table
./wasm/js/JSWebAssemblyTable.cpp
void JSC::JSWebAssemblyTable::set(uint32_t, JSC::JSValue)
void JSC::JSWebAssemblyTable::set(uint32_t, JSC::WebAssemblyFunctionBase *)
void JSC::JSWebAssemblyTable::clear(uint32_t)
JSC::JSObject *JSC::JSWebAssemblyTable::type(JSC::JSGlobalObject *)
WebAssembly.Tag
./wasm/js/WasmToJS.cpp
Expected<MacroAssemblerCodeRef<WasmEntryPtrTag>, JSC::Wasm::BindingFailure> JSC::Wasm::wasmToJS(JSC::VM &, Bag<JSC::OptimizingCallLinkInfo> &, JSC::Wasm::SignatureIndex, unsigned int)
WebAssembly->JavaScript import[%i] %s
Function
CompileError
WebAssembly.CompileError
Exception
WebAssembly.Exception
WebAssemblyFunction
./wasm/js/WebAssemblyFunction.cpp
MacroAssemblerCodePtr<JSEntryPtrTag> JSC::WebAssemblyFunction::jsCallEntrypointSlow()
JS->Wasm IC
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
WebAssembly.Exception constructor expects the first argument to be a WebAssembly.Tag
WebAssembly.Exception constructor expects the number of paremeters in WebAssembly.Tag to match the tags parameter count.
./wasm/js/JSWebAssemblyHelpers.h
uint64_t JSC::fromJSValue(JSC::JSGlobalObject *, const Wasm::Type, JSC::JSValue)
getArg
First argument must be a WebAssembly.Tag
First argument does not match the exception tag
Index out of range
WebAssembly.Exception operation called on non-Exception object
WebAssembly.Exception.getArg(): 
WebAssembly.Exception.is(): First argument must be a WebAssembly.Tag
WebAssemblyFunctionBase
Function
WebAssembly.Global
get value
set value
Instance
WebAssembly.Instance
LinkError
WebAssembly.LinkError
WebAssembly.Global expects its first argument to be an object
WebAssembly.Global expects its 'value' field to be the string 'i32', 'i64', 'f32', 'f64', 'anyfunc', 'funcref', or 'externref'
./wasm/js/WebAssemblyGlobalConstructor.cpp
JSC::EncodedJSValue JSC::constructJSWebAssemblyGlobal(JSC::JSGlobalObject *, JSC::CallFrame *)
valueOf
type
expected |this| value to be an instance of WebAssembly.Global
WebAssembly.Global.prototype.value attempts to modify immutable global value
first argument to WebAssembly.Instance must be a WebAssembly.Module
second argument to WebAssembly.Instance must be undefined or an Object
exports
expected |this| value to be an instance of WebAssembly.Instance
WebAssembly.Memory
WebAssembly.Memory expects its first argument to be an object
WebAssembly.Memory 'initial' and 'minimum' options are specified at the same time
WebAssembly.Memory 'initial' page count is too large
WebAssembly.Memory 'maximum' page count is too large
'maximum' page count must be than greater than or equal to the 'initial' page count
'maximum' page count must be defined if 'shared' is true
Expect an integer argument in the range: [0, 2^32 - 1]
WebAssembly.Memory
Function
WebAssembly.Module
WebAssemblyModuleRecord
./wasm/js/WebAssemblyModuleRecord.cpp
void JSC::WebAssemblyModuleRecord::prepareLink(JSC::VM &, JSC::JSWebAssemblyInstance *)
JSC::Synchronousness JSC::WebAssemblyModuleRecord::link(JSC::JSGlobalObject *, JSC::JSValue)
void JSC::WebAssemblyModuleRecord::initializeImportsAndExports(JSC::JSGlobalObject *, JSC::JSObject *, Wasm::CreationMode)
import function
must be callable
imported function
signature doesn't match the provided WebAssembly function's signature
imported global
must be a same type
must be a same mutability
non-null externref cannot be null
must be a wasm exported function or null
must be a wasm exported function
must be a BigInt
must be a number
must be a non-null value
must be a WebAssembly.Global object since it is mutable
Table import
is not an instance of WebAssembly.Table
provided an 'initial' that is too small
does not have a 'maximum' but the module requires that it does
Imported Table
'maximum' is larger than the module's expected 'maximum'
provided a 'type' that is wrong
Tag import
is not an instance of WebAssembly.Tag
imported Tag
signature doesn't match the imported WebAssembly Tag's signature
provided a 'shared' that is different from the module's declared 'shared' import memory attribute
couldn't create Table
RuntimeError
WebAssembly.RuntimeError
WebAssembly.Table
grow
WebAssembly.Memory.prototype.buffer getter called with non WebAssembly.Memory |this| value
customSections
imports
exports
WebAssembly.Module.customSections called with non WebAssembly.Module argument
WebAssembly.Module.imports called with non WebAssembly.Module argument
memory
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/wasm/WasmFormat.h
const char *JSC::Wasm::makeString(JSC::Wasm::ExternalKind)
WebAssembly.Module.exports called with non WebAssembly.Module argument
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/wasm/WasmCalleeGroup.h
uint32_t JSC::Wasm::I32InitExpr::constValue() const
Element is trying to set an out of bounds table index
, segment is too big
, segment writes outside of memory
Invalid data segment initialization: segment of 
 bytes memory of 
 bytes, at offset 
auto JSC::WebAssemblyModuleRecord::evaluate(JSC::JSGlobalObject *)::(anonymous class)::operator()(uint8_t *, uint64_t, const Wasm::Segment::Ptr &, uint32_t) const
WebAssembly.Table expects its first argument to be an object
WebAssembly.Table expects its 'element' field to be the string 'funcref' or 'externref'
WebAssembly.Table 'initial' and 'minimum' options are specified at the same time
'maximum' property must be greater than or equal to the 'initial' property
WebAssembly.Table.prototype.constructor expects the second argument to be null or an instance of WebAssembly.Function
WebAssembly.Table.prototype.grow expects the second argument to be null or an instance of WebAssembly.Function
WebAssembly.Table.prototype.grow could not grow the table
WebAssembly.Table.prototype.get expects an integer less than the length of the table
WebAssembly.Table.prototype.set expects an integer less than the length of the table
WebAssembly.Table.prototype.set expects the second argument to be null or an instance of WebAssembly.Function
expected |this| value to be an instance of WebAssembly.Table
Function
WebAssembly.Tag
WebAssemblyWrapperFunction
./wasm/js/WebAssemblyWrapperFunction.cpp
void JSC::WebAssemblyWrapperFunction::finishCreation(JSC::VM &, JSC::NativeExecutable *, unsigned int, const WTF::String &, JSC::JSObject *, JSC::JSWebAssemblyInstance *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
WebAssembly.Tag constructor expects the tag type as the first argument.
WebAssembly.Tag constructor expects a tag type with the 'parameters' property.
WebAssembly.Tag constructor expects the 'parameters' field of the first argument to be a sequence of WebAssembly value types.
type
WebAssembly.Tag operation called on non-Tag object
ref_null
JSC::JSString *JSC::Wasm::typeToString(JSC::VM &, JSC::Wasm::TypeKind)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/wasm/WasmInstance.h
JSC::Wasm::Instance::ImportFunctionInfo *JSC::Wasm::Instance::importFunctionInfo(size_t)
JSC::EncodedJSValue JSC::callWebAssemblyWrapperFunction(JSC::JSGlobalObject *, JSC::CallFrame *)
     == Matching ==
     == Backtracking ==
     == Helpers ==
Invalid regular expression: regular expression too large
Invalid regular expression: numbers out of order in {} quantifier
Invalid regular expression: nothing to repeat
Invalid regular expression: number too large in {} quantifier
Invalid regular expression: incomplete {} quantifier for Unicode pattern
Invalid regular expression: missing )
Invalid regular expression: unmatched ] or } bracket for Unicode pattern
Invalid regular expression: unmatched parentheses
Invalid regular expression: unrecognized character after (?
Invalid regular expression: invalid group specifier name
Invalid regular expression: duplicate group specifier name
Invalid regular expression: missing terminating ] for character class
Invalid regular expression: range out of order in character class
Invalid regular expression: invalid range in character class for Unicode pattern
Invalid regular expression: \ at end of pattern
Invalid regular expression: invalid Unicode \u escape
Invalid regular expression: invalid Unicode code point \u{} escape
Invalid regular expression: invalid backreference for Unicode pattern
Invalid regular expression: invalid \k<> named backreference
Invalid regular expression: invalid escaped character for Unicode pattern
Invalid regular expression: invalid octal escape for Unicode pattern
Invalid regular expression: invalid \c escape for Unicode pattern
Invalid regular expression: invalid property expression
Invalid regular expression: too many nested disjunctions
Invalid regular expression: pattern exceeds string length limits
Invalid regular expression: invalid flags
isValid:(false)
isValid:(true),characters:(
Match-only 8-bit regular expression
Match-only 16-bit regular expression
8-bit regular expression
16-bit regular expression
%4d:
Term 
Assert BOL
Assert EOL
BackReference pattern #%u
PatternCharacter 
 ignore case
PatternCharacterClass 
not 
%sword boundary
non-
.* enclosure
ForwardReference <not handled>
./yarr/YarrJIT.cpp
virtual int JSC::Yarr::YarrGenerator<>::dumpFor(WTF::PrintStream &, unsigned int) [YarrJITRegs = JSC::Yarr::YarrJITDefaultRegisters]
 already handled
BodyAlternativeBegin minimum size %u
BodyAlternativeNext minimum size %u
BodyAlternativeEnd
SimpleNestedAlternativeBegin minimum size %u
NestedAlternativeBegin minimum size %u
SimpleNestedAlternativeNext minimum size %u
NestedAlternativeNext minimum size %u
SimpleNestedAlternativeEnd
NestedAlternativeEnd
ParenthesesSubpatternOnceBegin 
capturing pattern #%u
non-capturing
ParenthesesSubpatternOnceEnd 
ParenthesesSubpatternTerminalBegin 
capturing pattern #%u
non-capturing
ParenthesesSubpatternTerminalEnd 
ParenthesesSubpatternBegin 
ParenthesesSubpatternEnd 
ParentheticalAssertionBegin%s
 inverted
ParentheticalAssertionEnd%s
MatchFailed
Can't JIT a pattern decoding surrogate pairs
Can't JIT some patterns containing back references
Can't JIT a pattern containing forward references
Can't JIT a pattern containing a variable counted parenthesis with a non-zero minimum
Can't JIT a pattern containing parenthesized subpatterns
Can't JIT a pattern containing fixed count parenthesized subpatterns
Can't JIT pattern due to parentheses nested too deeply
Can't JIT because of failure of allocation of executable memory
virtual int JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::dumpFor(WTF::PrintStream &, unsigned int) [YarrJITRegs = JSC::Yarr::YarrJITRegisters]
./yarr/YarrInterpreter.cpp
unsigned int JSC::Yarr::Interpreter<unsigned char>::interpret() [CharType = unsigned char]
static size_t JSC::Yarr::Interpreter<unsigned char>::DisjunctionContext::allocationSize(unsigned int) [CharType = unsigned char]
JSC::Yarr::JSRegExpResult JSC::Yarr::Interpreter<unsigned char>::matchDisjunction(JSC::Yarr::ByteDisjunction *, JSC::Yarr::Interpreter::DisjunctionContext *, bool) [CharType = unsigned char]
int JSC::Yarr::Interpreter<unsigned char>::InputStream::readChecked(unsigned int) [CharType = unsigned char]
bool JSC::Yarr::Interpreter<unsigned char>::InputStream::atEnd(unsigned int) [CharType = unsigned char]
int JSC::Yarr::Interpreter<unsigned char>::InputStream::readSurrogatePairChecked(unsigned int) [CharType = unsigned char]
void JSC::Yarr::Interpreter<unsigned char>::InputStream::uncheckInput(unsigned int) [CharType = unsigned char]
bool JSC::Yarr::Interpreter<unsigned char>::matchCharacterClass(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned char]
bool JSC::Yarr::Interpreter<unsigned char>::matchBackReference(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned char]
./yarr/YarrCanonicalize.h
bool JSC::Yarr::areCanonicallyEquivalent(UChar32, UChar32, JSC::Yarr::CanonicalMode)
JSC::Yarr::JSRegExpResult JSC::Yarr::Interpreter<unsigned char>::matchParentheses(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned char]
static size_t JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::allocationSize(unsigned int) [CharType = unsigned char]
static void JSC::Yarr::Interpreter<unsigned char>::popParenthesesDisjunctionContext(JSC::Yarr::Interpreter::BackTrackInfoParentheses *) [CharType = unsigned char]
JSC::Yarr::JSRegExpResult JSC::Yarr::Interpreter<unsigned char>::backtrackParentheses(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned char]
bool JSC::Yarr::Interpreter<unsigned char>::backtrackParenthesesTerminalEnd(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned char]
unsigned int JSC::Yarr::Interpreter<char16_t>::interpret() [CharType = char16_t]
static size_t JSC::Yarr::Interpreter<char16_t>::DisjunctionContext::allocationSize(unsigned int) [CharType = char16_t]
JSC::Yarr::JSRegExpResult JSC::Yarr::Interpreter<char16_t>::matchDisjunction(JSC::Yarr::ByteDisjunction *, JSC::Yarr::Interpreter::DisjunctionContext *, bool) [CharType = char16_t]
int JSC::Yarr::Interpreter<char16_t>::InputStream::readChecked(unsigned int) [CharType = char16_t]
bool JSC::Yarr::Interpreter<char16_t>::InputStream::atEnd(unsigned int) [CharType = char16_t]
int JSC::Yarr::Interpreter<char16_t>::InputStream::readSurrogatePairChecked(unsigned int) [CharType = char16_t]
void JSC::Yarr::Interpreter<char16_t>::InputStream::uncheckInput(unsigned int) [CharType = char16_t]
bool JSC::Yarr::Interpreter<char16_t>::matchCharacterClass(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = char16_t]
bool JSC::Yarr::Interpreter<char16_t>::matchBackReference(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = char16_t]
JSC::Yarr::JSRegExpResult JSC::Yarr::Interpreter<char16_t>::matchParentheses(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = char16_t]
static size_t JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::allocationSize(unsigned int) [CharType = char16_t]
static void JSC::Yarr::Interpreter<char16_t>::popParenthesesDisjunctionContext(JSC::Yarr::Interpreter::BackTrackInfoParentheses *) [CharType = char16_t]
JSC::Yarr::JSRegExpResult JSC::Yarr::Interpreter<char16_t>::backtrackParentheses(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = char16_t]
bool JSC::Yarr::Interpreter<char16_t>::backtrackParenthesesTerminalEnd(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = char16_t]
Found characters fastpath lookahead 
 range:[
Found bitmap lookahead count:(
),range:[
void JSC::Yarr::YarrGenerator<>::generateTerm(size_t) [YarrJITRegs = JSC::Yarr::YarrJITDefaultRegisters]
void JSC::Yarr::YarrGenerator<>::backtrackTerm(size_t) [YarrJITRegs = JSC::Yarr::YarrJITDefaultRegisters]
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)47615, T = JSC::AssemblerLabel]
void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::compileInline(JSC::Yarr::YarrBoyerMoyerData &) [YarrJITRegs = JSC::Yarr::YarrJITRegisters]
void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generateTerm(size_t) [YarrJITRegs = JSC::Yarr::YarrJITRegisters]
void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::backtrackTerm(size_t) [YarrJITRegs = JSC::Yarr::YarrJITRegisters]
'%c'
0x%04x
<any character>
<newline>
<digits>
<whitespace>
<word>
<unicode word ignore case>
<non-digits>
<non-whitespace>
<non-word>
<unicode non-word ignore case>
ASCII
Unicode
minimum size: 
,fixed size
,once through
,starts with ^
,contains ^
,...
 greedy
 non-greedy
word boundary
character 
inputPosition %u 
,frame location 
character class 
back reference to subpattern #
forward reference
captured 
non-captured 
inverted 
subpattern
assertion
,copy
,terminal
alternative list,frame location 
.* enclosure,frame location 
alternative #
RegExp pattern for 
ignore case
    callframe size: 
 ranges:(
Common
Zyyy
Latin
Latn
Greek
Grek
Cyrillic
Cyrl
Armenian
Armn
Hebrew
Hebr
Arabic
Arab
Syriac
Syrc
Thaana
Thaa
Devanagari
Deva
Bengali
Beng
Gurmukhi
Guru
Gujarati
Gujr
Oriya
Orya
Tamil
Taml
Telugu
Telu
Kannada
Knda
Malayalam
Mlym
Sinhala
Sinh
Thai
Laoo
Tibetan
Tibt
Myanmar
Mymr
Georgian
Geor
Hangul
Hang
Ethiopic
Ethi
Cherokee
Cher
Canadian_Aboriginal
Cans
Ogham
Ogam
Runic
Runr
Khmer
Khmr
Mongolian
Mong
Hiragana
Hira
Katakana
Kana
Bopomofo
Bopo
Hani
Yiii
Old_Italic
Ital
Gothic
Goth
Deseret
Dsrt
Inherited
Zinh
Qaai
Tagalog
Tglg
Hanunoo
Hano
Buhid
Buhd
Tagbanwa
Tagb
Limbu
Limb
Tai_Le
Tale
Linear_B
Linb
Ugaritic
Ugar
Shavian
Shaw
Osmanya
Osma
Cypriot
Cprt
Braille
Brai
Buginese
Bugi
Coptic
Copt
Qaac
New_Tai_Lue
Talu
Glagolitic
Glag
Tifinagh
Tfng
Syloti_Nagri
Sylo
Old_Persian
Xpeo
Kharoshthi
Khar
Balinese
Bali
Cuneiform
Xsux
Phoenician
Phnx
Phags_Pa
Phag
Nkoo
Sundanese
Sund
Lepcha
Lepc
Ol_Chiki
Olck
Vaii
Saurashtra
Saur
Kayah_Li
Kali
Rejang
Rjng
Lycian
Lyci
Carian
Cari
Lydian
Lydi
Cham
Tai_Tham
Lana
Tai_Viet
Tavt
Avestan
Avst
Egyptian_Hieroglyphs
Egyp
Samaritan
Samr
Lisu
Bamum
Bamu
Javanese
Java
Meetei_Mayek
Mtei
Imperial_Aramaic
Armi
Old_South_Arabian
Sarb
Inscriptional_Parthian
Prti
Inscriptional_Pahlavi
Phli
Old_Turkic
Orkh
Kaithi
Kthi
Batak
Batk
Brahmi
Brah
Mandaic
Mand
Chakma
Cakm
Meroitic_Cursive
Merc
Meroitic_Hieroglyphs
Mero
Miao
Plrd
Sharada
Shrd
Sora_Sompeng
Sora
Takri
Takr
Caucasian_Albanian
Aghb
Bassa_Vah
Bass
Duployan
Dupl
Elbasan
Elba
Grantha
Gran
Pahawh_Hmong
Hmng
Khojki
Khoj
Linear_A
Lina
Mahajani
Mahj
Manichaean
Mani
Mende_Kikakui
Mend
Modi
Mroo
Old_North_Arabian
Narb
Nabataean
Nbat
Palmyrene
Palm
Pau_Cin_Hau
Pauc
Old_Permic
Perm
Psalter_Pahlavi
Phlp
Siddham
Sidd
Khudawadi
Sind
Tirhuta
Tirh
Warang_Citi
Wara
Ahom
Anatolian_Hieroglyphs
Hluw
Hatran
Hatr
Multani
Mult
Old_Hungarian
Hung
SignWriting
Sgnw
Adlam
Adlm
Bhaiksuki
Bhks
Marchen
Marc
Newa
Osage
Osge
Tangut
Tang
Masaram_Gondi
Gonm
Nushu
Nshu
Soyombo
Soyo
Zanabazar_Square
Zanb
Dogra
Dogr
Gunjala_Gondi
Gong
Makasar
Maka
Medefaidrin
Medf
Hanifi_Rohingya
Rohg
Sogdian
Sogd
Old_Sogdian
Sogo
Elymaic
Elym
Nandinagari
Nand
Nyiakeng_Puachue_Hmong
Hmnp
Wancho
Wcho
Chorasmian
Chrs
Dives_Akuru
Diak
Khitan_Small_Script
Kits
Yezidi
Yezi
Cypro_Minoan
Cpmn
Old_Uyghur
Ougr
Tangsa
Tnsa
Toto
Vithkuqi
Vith
Assigned
Unassigned
Letter
Cased_Letter
Control
cntrl
Separator
Space_Separator
Punctuation
punct
Other_Punctuation
Currency_Symbol
Open_Punctuation
Close_Punctuation
Math_Symbol
Dash_Punctuation
Decimal_Number
digit
Uppercase_Letter
Modifier_Symbol
Connector_Punctuation
Lowercase_Letter
Other_Symbol
Other_Letter
Initial_Punctuation
Format
Other_Number
Final_Punctuation
Titlecase_Letter
Modifier_Letter
Mark
Combining_Mark
Nonspacing_Mark
Enclosing_Mark
Spacing_Mark
Letter_Number
Line_Separator
Paragraph_Separator
Surrogate
Private_Use
Bidi_Mirrored
Bidi_M
Math
Alphabetic
Alpha
Lowercase
Lower
Uppercase
Upper
Cased
Case_Ignorable
Changes_When_Lowercased
Changes_When_Uppercased
Changes_When_Titlecased
Changes_When_Casefolded
CWCF
Changes_When_Casemapped
CWCM
ID_Start
ID_Continue
XID_Start
XIDS
XID_Continue
XIDC
Default_Ignorable_Code_Point
Grapheme_Extend
Gr_Ext
Grapheme_Base
Gr_Base
Changes_When_NFKC_Casefolded
CWKCF
White_Space
WSpace
space
Bidi_Control
Bidi_C
Join_Control
Join_C
Dash
Quotation_Mark
QMark
Terminal_Punctuation
Term
Hex_Digit
ASCII_Hex_Digit
AHex
Ideographic
Ideo
Diacritic
Extender
Noncharacter_Code_Point
NChar
IDS_Binary_Operator
IDSB
IDS_Trinary_Operator
IDST
Radical
Unified_Ideograph
UIdeo
Deprecated
Soft_Dotted
Logical_Order_Exception
Sentence_Terminal
STerm
Variation_Selector
Pattern_White_Space
Pat_WS
Pattern_Syntax
Pat_Syn
Regional_Indicator
Emoji
Emoji_Presentation
EPres
Emoji_Modifier
EMod
Emoji_Modifier_Base
EBase
Emoji_Component
EComp
Extended_Pictographic
ExtPict
UChar32 JSC::Yarr::getCanonicalPair(const JSC::Yarr::CanonicalizationRange *, UChar32)
^$\.*+?()[]{}|/
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/wasm/WasmAirIRGenerator.cpp
JSC::Wasm::AirIRGenerator::AirIRGenerator(const JSC::Wasm::ModuleInformation &, B3::Procedure &, JSC::Wasm::InternalFunction *, Vector<JSC::Wasm::UnlinkedWasmToWasmCall> &, JSC::Wasm::MemoryMode, unsigned int, JSC::Wasm::TierUpCount *, const JSC::Wasm::Signature &)
void JSC::Wasm::AirIRGenerator::finalizeEntrypoints()
JSC::Wasm::AirIRGenerator::PartialResult JSC::Wasm::AirIRGenerator::addLocal(JSC::Wasm::Type, uint32_t)
JSC::Wasm::AirIRGenerator::ExpressionType JSC::Wasm::AirIRGenerator::addConstant(JSC::B3::Air::BasicBlock *, JSC::Wasm::Type, uint64_t)
JSC::Wasm::AirIRGenerator::PartialResult JSC::Wasm::AirIRGenerator::addArguments(const JSC::Wasm::Signature &)
void JSC::Wasm::AirIRGenerator::sanitizeAtomicResult(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::B3::Air::Tmp, JSC::B3::Air::Tmp)
JSC::Wasm::AirIRGenerator::PartialResult JSC::Wasm::AirIRGenerator::atomicLoad(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType &, uint32_t)
JSC::Wasm::TypedTmp JSC::Wasm::AirIRGenerator::emitAtomicBinaryRMWOp(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType, uint32_t)
JSC::Wasm::AirIRGenerator::PartialResult JSC::Wasm::AirIRGenerator::atomicBinaryRMW(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType &, uint32_t)
JSC::Wasm::AirIRGenerator::PartialResult JSC::Wasm::AirIRGenerator::atomicCompareExchange(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType &, uint32_t)
JSC::Wasm::AirIRGenerator::PartialResult JSC::Wasm::AirIRGenerator::truncSaturated(JSC::Wasm::Ext1OpType, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType &, JSC::Wasm::Type, JSC::Wasm::Type)
Generated patchpoints
JSC::Wasm::AirIRGenerator::PartialResult JSC::Wasm::AirIRGenerator::addOp(JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType &)
JSC::Wasm::TypedTmp JSC::Wasm::AirIRGenerator::tmpForType(JSC::Wasm::Type)
static B3::Air::Opcode JSC::Wasm::AirIRGenerator::moveOpForValueType(JSC::Wasm::Type)
void JSC::Wasm::AirIRGenerator::emitStoreOp(JSC::Wasm::StoreOpType, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType, uint32_t)
void JSC::Wasm::AirIRGenerator::emitCCall(JSC::B3::Air::BasicBlock *, Func, JSC::Wasm::TypedTmp, Args...) [Func = long long (*)(JSC::Wasm::Instance *, unsigned int), Args = <JSC::Wasm::TypedTmp, JSC::Wasm::TypedTmp>]
void JSC::Wasm::AirIRGenerator::emitCCall(JSC::B3::Air::BasicBlock *, Func, JSC::Wasm::TypedTmp, Args...) [Func = long long (*)(JSC::Wasm::Instance *, unsigned int, int), Args = <JSC::Wasm::TypedTmp, JSC::Wasm::TypedTmp, JSC::Wasm::TypedTmp>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, const JSC::B3::Effects &, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, const JSC::B3::Effects &, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, const JSC::B3::Effects &, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
void JSC::Wasm::AirIRGenerator::emitCCall(JSC::B3::Air::BasicBlock *, Func, JSC::Wasm::TypedTmp, Args...) [Func = void (*)(JSC::Wasm::Instance *, unsigned int), Args = <JSC::Wasm::TypedTmp, JSC::Wasm::TypedTmp>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, const JSC::B3::Effects &, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
void JSC::Wasm::AirIRGenerator::emitPatchpoint(JSC::B3::Air::BasicBlock *, B3::PatchpointValue *, const Vector<ResultTmpType, 8> &, Vector<JSC::Wasm::ConstrainedTmp, inlineSize> &&) [ResultTmpType = JSC::B3::Air::Tmp, inlineSize = 0UL]
void JSC::Wasm::AirIRGenerator::emitCCall(JSC::B3::Air::BasicBlock *, Func, JSC::Wasm::TypedTmp, Args...) [Func = unsigned long (*)(JSC::Wasm::Instance *, unsigned int, unsigned int, unsigned int), Args = <JSC::Wasm::TypedTmp, JSC::Wasm::TypedTmp, JSC::Wasm::TypedTmp, JSC::Wasm::TypedTmp>]
void JSC::Wasm::AirIRGenerator::emitCCall(JSC::B3::Air::BasicBlock *, Func, JSC::Wasm::TypedTmp, Args...) [Func = void (*)(JSC::JSCell *, JSC::VM *), Args = <JSC::Wasm::TypedTmp, JSC::Wasm::TypedTmp>]
auto JSC::Wasm::AirIRGenerator::truncSaturated(JSC::Wasm::Ext1OpType, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType &, JSC::Wasm::Type, JSC::Wasm::Type)::(anonymous class)::operator()(JSC::CCallHelpers &, const B3::StackmapGenerationParams &) const
void JSC::Wasm::AirIRGenerator::emitPatchpoint(JSC::B3::Air::BasicBlock *, B3::PatchpointValue *, const Vector<ResultTmpType, 8> &, Vector<JSC::Wasm::ConstrainedTmp, inlineSize> &&) [ResultTmpType = JSC::Wasm::TypedTmp, inlineSize = 2UL]
void JSC::Wasm::AirIRGenerator::emitPatchpoint(JSC::B3::Air::BasicBlock *, B3::PatchpointValue *, const Vector<ResultTmpType, 8> &, Vector<JSC::Wasm::ConstrainedTmp, inlineSize> &&) [ResultTmpType = JSC::Wasm::TypedTmp, inlineSize = 0UL]
void JSC::Wasm::AirIRGenerator::emitPatchpoint(JSC::B3::Air::BasicBlock *, B3::PatchpointValue *, const Vector<ResultTmpType, 8> &, Vector<JSC::Wasm::ConstrainedTmp, inlineSize> &&) [ResultTmpType = JSC::B3::Air::Tmp, inlineSize = 1UL]
void JSC::Wasm::AirIRGenerator::emitPatchpoint(JSC::B3::Air::BasicBlock *, B3::PatchpointValue *, const Vector<ResultTmpType, 8> &, Vector<JSC::Wasm::ConstrainedTmp, inlineSize> &&) [ResultTmpType = JSC::B3::Air::Tmp, inlineSize = 8UL]
void JSC::Wasm::AirIRGenerator::emitPatchpoint(JSC::B3::Air::BasicBlock *, B3::PatchpointValue *, const Vector<ResultTmpType, 8> &, Vector<JSC::Wasm::ConstrainedTmp, inlineSize> &&) [ResultTmpType = JSC::B3::Air::Tmp, inlineSize = 3UL]
void JSC::Wasm::AirIRGenerator::emitPatchpoint(JSC::B3::Air::BasicBlock *, B3::PatchpointValue *, const Vector<ResultTmpType, 8> &, Vector<JSC::Wasm::ConstrainedTmp, inlineSize> &&) [ResultTmpType = JSC::Wasm::TypedTmp, inlineSize = 8UL]
void JSC::Wasm::AirIRGenerator::emitPatchpoint(JSC::B3::Air::BasicBlock *, B3::PatchpointValue *, const Vector<ResultTmpType, 8> &, Vector<JSC::Wasm::ConstrainedTmp, inlineSize> &&) [ResultTmpType = JSC::B3::Air::Tmp, inlineSize = 2UL]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/wasm/WasmFunctionParser.h
JSC::Wasm::Parser<void>::PartialResult JSC::Wasm::FunctionParser<JSC::Wasm::AirIRGenerator>::parseUnreachableExpression() [Context = JSC::Wasm::AirIRGenerator]
JSC::Wasm::Parser<void>::PartialResult JSC::Wasm::FunctionParser<JSC::Wasm::AirIRGenerator>::parseExpression() [Context = JSC::Wasm::AirIRGenerator]
void JSC::Wasm::AirIRGenerator::emitCCall(JSC::B3::Air::BasicBlock *, Func, JSC::Wasm::TypedTmp, Args...) [Func = unsigned int (*)(int), Args = <JSC::Wasm::TypedTmp>]
void JSC::Wasm::AirIRGenerator::emitCCall(JSC::B3::Air::BasicBlock *, Func, JSC::Wasm::TypedTmp, Args...) [Func = unsigned long long (*)(long long), Args = <JSC::Wasm::TypedTmp>]
rex 
rex.b 
rex.x 
rex.xb 
rex.r 
rex.rb 
rex.rx 
rex.rxb 
rex.w 
rex.wb 
rex.wx 
rex.wxb 
rex.wr 
rex.wrb 
rex.wrx 
rex.wrxb 
invalid
adcx
addpd
addps
addsd
addss
addsubpd
addsubps
adox
aesdec
aesdec128kl
aesdec256kl
aesdeclast
aesdecwide128kl
aesdecwide256kl
aesenc
aesenc128kl
aesenc256kl
aesenclast
aesencwide128kl
aesencwide256kl
aesimc
aeskeygenassist
andn
andnpd
andnps
andpd
andps
arpl
bextr
blcfill
blci
blcic
blcmsk
blcs
blendpd
blendps
blendvpd
blendvps
blsfill
blsi
blsic
blsmsk
blsr
bndcl
bndcn
bndcu
bndldx
bndmk
bndmov
bndstx
bound
bswap
bzhi
call
cdqe
clac
cldemote
clevict0
clevict1
clflush
clflushopt
clgi
clrssbsy
clts
clui
clwb
clzero
cmovb
cmovbe
cmovl
cmovle
cmovnb
cmovnbe
cmovnl
cmovnle
cmovno
cmovnp
cmovns
cmovnz
cmovo
cmovp
cmovs
cmovz
cmppd
cmpps
cmpsb
cmpsd
cmpsq
cmpss
cmpsw
cmpxchg
cmpxchg16b
cmpxchg8b
comisd
comiss
cpuid
crc32
cvtdq2pd
cvtdq2ps
cvtpd2dq
cvtpd2pi
cvtpd2ps
cvtpi2pd
cvtpi2ps
cvtps2dq
cvtps2pd
cvtps2pi
cvtsd2si
cvtsd2ss
cvtsi2sd
cvtsi2ss
cvtss2sd
cvtss2si
cvttpd2dq
cvttpd2pi
cvttps2dq
cvttps2pi
cvttsd2si
cvttss2si
cwde
delay
divpd
divps
divsd
divss
dppd
dpps
emms
encls
enclu
enclv
encodekey128
encodekey256
endbr32
endbr64
enqcmd
enqcmds
enter
extractps
extrq
f2xm1
fabs
fadd
faddp
fbld
fbstp
fchs
fcmovb
fcmovbe
fcmove
fcmovnb
fcmovnbe
fcmovne
fcmovnu
fcmovu
fcom
fcomi
fcomip
fcomp
fcompp
fcos
fdecstp
fdisi8087_nop
fdiv
fdivp
fdivr
fdivrp
femms
feni8087_nop
ffree
ffreep
fiadd
ficom
ficomp
fidiv
fidivr
fild
fimul
fincstp
fist
fistp
fisttp
fisub
fisubr
fld1
fldcw
fldenv
fldl2e
fldl2t
fldlg2
fldln2
fldpi
fldz
fmul
fmulp
fnclex
fninit
fnop
fnsave
fnstcw
fnstenv
fnstsw
fpatan
fprem
fprem1
fptan
frndint
frstor
fscale
fsetpm287_nop
fsin
fsincos
fsqrt
fstp
fstpnce
fsub
fsubp
fsubr
fsubrp
ftst
fucom
fucomi
fucomip
fucomp
fucompp
fwait
fxam
fxch
fxrstor
fxrstor64
fxsave
fxsave64
fxtract
fyl2x
fyl2xp1
getsec
gf2p8affineinvqb
gf2p8affineqb
gf2p8mulb
haddpd
haddps
hreset
hsubpd
hsubps
idiv
imul
incsspd
incsspq
insb
insd
insertps
insertq
insw
int1
int3
into
invd
invept
invlpg
invlpga
invlpgb
invpcid
invvpid
iret
iretd
iretq
jcxz
jecxz
jknzd
jkzd
jnbe
jnle
jrcxz
kaddb
kaddd
kaddq
kaddw
kand
kandb
kandd
kandn
kandnb
kandnd
kandnq
kandnr
kandnw
kandq
kandw
kconcath
kconcatl
kextract
kmerge2l1h
kmerge2l1l
kmov
kmovb
kmovd
kmovq
kmovw
knot
knotb
knotd
knotq
knotw
korb
kord
korq
kortest
kortestb
kortestd
kortestq
kortestw
korw
kshiftlb
kshiftld
kshiftlq
kshiftlw
kshiftrb
kshiftrd
kshiftrq
kshiftrw
ktestb
ktestd
ktestq
ktestw
kunpckbw
kunpckdq
kunpckwd
kxnor
kxnorb
kxnord
kxnorq
kxnorw
kxor
kxorb
kxord
kxorq
kxorw
lahf
lddqu
ldmxcsr
ldtilecfg
leave
lfence
lgdt
lidt
lldt
llwpcb
lmsw
loadiwkey
lodsb
lodsd
lodsq
lodsw
loop
loope
loopne
lwpins
lwpval
lzcnt
maskmovdqu
maskmovq
maxpd
maxps
maxsd
maxss
mcommit
mfence
minpd
minps
minsd
minss
monitor
monitorx
montmul
movapd
movaps
movbe
movd
movddup
movdir64b
movdiri
movdq2q
movdqa
movdqu
movhlps
movhpd
movhps
movlhps
movlpd
movlps
movmskpd
movmskps
movntdq
movntdqa
movnti
movntpd
movntps
movntq
movntsd
movntss
movq
movq2dq
movsb
movsd
movshdup
movsldup
movsq
movss
movsw
movsx
movsxd
movupd
movups
movzx
mpsadbw
mulpd
mulps
mulsd
mulss
mulx
mwait
mwaitx
orpd
orps
outsb
outsd
outsw
pabsb
pabsd
pabsw
packssdw
packsswb
packusdw
packuswb
paddb
paddd
paddq
paddsb
paddsw
paddusb
paddusw
paddw
palignr
pand
pandn
pause
pavgb
pavgusb
pavgw
pblendvb
pblendw
pclmulqdq
pcmpeqb
pcmpeqd
pcmpeqq
pcmpeqw
pcmpestri
pcmpestrm
pcmpgtb
pcmpgtd
pcmpgtq
pcmpgtw
pcmpistri
pcmpistrm
pconfig
pdep
pext
pextrb
pextrd
pextrq
pextrw
pf2id
pf2iw
pfacc
pfadd
pfcmpeq
pfcmpge
pfcmpgt
pfcpit1
pfmax
pfmin
pfmul
pfnacc
pfpnacc
pfrcp
pfrcpit2
pfrsqit1
pfsqrt
pfsub
pfsubr
phaddd
phaddsw
phaddw
phminposuw
phsubd
phsubsw
phsubw
pi2fd
pi2fw
pinsrb
pinsrd
pinsrq
pinsrw
pmaddubsw
pmaddwd
pmaxsb
pmaxsd
pmaxsw
pmaxub
pmaxud
pmaxuw
pminsb
pminsd
pminsw
pminub
pminud
pminuw
pmovmskb
pmovsxbd
pmovsxbq
pmovsxbw
pmovsxdq
pmovsxwd
pmovsxwq
pmovzxbd
pmovzxbq
pmovzxbw
pmovzxdq
pmovzxwd
pmovzxwq
pmuldq
pmulhrsw
pmulhrw
pmulhuw
pmulhw
pmulld
pmullw
pmuludq
popa
popad
popcnt
popf
popfd
popfq
prefetch
prefetchnta
prefetcht0
prefetcht1
prefetcht2
prefetchw
prefetchwt1
psadbw
pshufb
pshufd
pshufhw
pshuflw
pshufw
psignb
psignd
psignw
pslld
pslldq
psllq
psllw
psmash
psrad
psraw
psrld
psrldq
psrlq
psrlw
psubb
psubd
psubq
psubsb
psubsw
psubusb
psubusw
psubw
pswapd
ptest
ptwrite
punpckhbw
punpckhdq
punpckhqdq
punpckhwd
punpcklbw
punpckldq
punpcklqdq
punpcklwd
push
pusha
pushad
pushf
pushfd
pushfq
pvalidate
pxor
rcpps
rcpss
rdfsbase
rdgsbase
rdmsr
rdpid
rdpkru
rdpmc
rdpru
rdrand
rdseed
rdsspd
rdsspq
rdtsc
rdtscp
rmpadjust
rmpupdate
rorx
roundpd
roundps
roundsd
roundss
rsqrtps
rsqrtss
rstorssp
sahf
salc
sarx
saveprevssp
scasb
scasd
scasq
scasw
seamcall
seamops
seamret
senduipi
serialize
setb
setbe
setl
setle
setnb
setnbe
setnl
setnle
setno
setnp
setns
setnz
seto
setp
sets
setssbsy
setz
sfence
sgdt
sha1msg1
sha1msg2
sha1nexte
sha1rnds4
sha256msg1
sha256msg2
sha256rnds2
shld
shlx
shrd
shrx
shufpd
shufps
sidt
skinit
sldt
slwpcb
smsw
spflt
sqrtpd
sqrtps
sqrtsd
sqrtss
stac
stgi
stmxcsr
stosb
stosd
stosq
stosw
sttilecfg
stui
subpd
subps
subsd
subss
swapgs
syscall
sysenter
sysexit
sysret
t1mskc
tdcall
tdpbf16ps
tdpbssd
tdpbsud
tdpbusd
tdpbuud
test
testui
tileloadd
tileloaddt1
tilerelease
tilestored
tilezero
tlbsync
tpause
tzcnt
tzcnti
tzmsk
ucomisd
ucomiss
uiret
umonitor
umwait
unpckhpd
unpckhps
unpcklpd
unpcklps
v4fmaddps
v4fmaddss
v4fnmaddps
v4fnmaddss
vaddnpd
vaddnps
vaddpd
vaddph
vaddps
vaddsd
vaddsetsps
vaddsh
vaddss
vaddsubpd
vaddsubps
vaesdec
vaesdeclast
vaesenc
vaesenclast
vaesimc
vaeskeygenassist
valignd
valignq
vandnpd
vandnps
vandpd
vandps
vblendmpd
vblendmps
vblendpd
vblendps
vblendvpd
vblendvps
vbroadcastf128
vbroadcastf32x2
vbroadcastf32x4
vbroadcastf32x8
vbroadcastf64x2
vbroadcastf64x4
vbroadcasti128
vbroadcasti32x2
vbroadcasti32x4
vbroadcasti32x8
vbroadcasti64x2
vbroadcasti64x4
vbroadcastsd
vbroadcastss
vcmppd
vcmpph
vcmpps
vcmpsd
vcmpsh
vcmpss
vcomisd
vcomish
vcomiss
vcompresspd
vcompressps
vcvtdq2pd
vcvtdq2ph
vcvtdq2ps
vcvtfxpntdq2ps
vcvtfxpntpd2dq
vcvtfxpntpd2udq
vcvtfxpntps2dq
vcvtfxpntps2udq
vcvtfxpntudq2ps
vcvtne2ps2bf16
vcvtneps2bf16
vcvtpd2dq
vcvtpd2ph
vcvtpd2ps
vcvtpd2qq
vcvtpd2udq
vcvtpd2uqq
vcvtph2dq
vcvtph2pd
vcvtph2ps
vcvtph2psx
vcvtph2qq
vcvtph2udq
vcvtph2uqq
vcvtph2uw
vcvtph2w
vcvtps2dq
vcvtps2pd
vcvtps2ph
vcvtps2phx
vcvtps2qq
vcvtps2udq
vcvtps2uqq
vcvtqq2pd
vcvtqq2ph
vcvtqq2ps
vcvtsd2sh
vcvtsd2si
vcvtsd2ss
vcvtsd2usi
vcvtsh2sd
vcvtsh2si
vcvtsh2ss
vcvtsh2usi
vcvtsi2sd
vcvtsi2sh
vcvtsi2ss
vcvtss2sd
vcvtss2sh
vcvtss2si
vcvtss2usi
vcvttpd2dq
vcvttpd2qq
vcvttpd2udq
vcvttpd2uqq
vcvttph2dq
vcvttph2qq
vcvttph2udq
vcvttph2uqq
vcvttph2uw
vcvttph2w
vcvttps2dq
vcvttps2qq
vcvttps2udq
vcvttps2uqq
vcvttsd2si
vcvttsd2usi
vcvttsh2si
vcvttsh2usi
vcvttss2si
vcvttss2usi
vcvtudq2pd
vcvtudq2ph
vcvtudq2ps
vcvtuqq2pd
vcvtuqq2ph
vcvtuqq2ps
vcvtusi2sd
vcvtusi2sh
vcvtusi2ss
vcvtuw2ph
vcvtw2ph
vdbpsadbw
vdivpd
vdivph
vdivps
vdivsd
vdivsh
vdivss
vdpbf16ps
vdppd
vdpps
verr
verw
vexp223ps
vexp2pd
vexp2ps
vexpandpd
vexpandps
vextractf128
vextractf32x4
vextractf32x8
vextractf64x2
vextractf64x4
vextracti128
vextracti32x4
vextracti32x8
vextracti64x2
vextracti64x4
vextractps
vfcmaddcph
vfcmaddcsh
vfcmulcph
vfcmulcsh
vfixupimmpd
vfixupimmps
vfixupimmsd
vfixupimmss
vfixupnanpd
vfixupnanps
vfmadd132pd
vfmadd132ph
vfmadd132ps
vfmadd132sd
vfmadd132sh
vfmadd132ss
vfmadd213pd
vfmadd213ph
vfmadd213ps
vfmadd213sd
vfmadd213sh
vfmadd213ss
vfmadd231pd
vfmadd231ph
vfmadd231ps
vfmadd231sd
vfmadd231sh
vfmadd231ss
vfmadd233ps
vfmaddcph
vfmaddcsh
vfmaddpd
vfmaddps
vfmaddsd
vfmaddss
vfmaddsub132pd
vfmaddsub132ph
vfmaddsub132ps
vfmaddsub213pd
vfmaddsub213ph
vfmaddsub213ps
vfmaddsub231pd
vfmaddsub231ph
vfmaddsub231ps
vfmaddsubpd
vfmaddsubps
vfmsub132pd
vfmsub132ph
vfmsub132ps
vfmsub132sd
vfmsub132sh
vfmsub132ss
vfmsub213pd
vfmsub213ph
vfmsub213ps
vfmsub213sd
vfmsub213sh
vfmsub213ss
vfmsub231pd
vfmsub231ph
vfmsub231ps
vfmsub231sd
vfmsub231sh
vfmsub231ss
vfmsubadd132pd
vfmsubadd132ph
vfmsubadd132ps
vfmsubadd213pd
vfmsubadd213ph
vfmsubadd213ps
vfmsubadd231pd
vfmsubadd231ph
vfmsubadd231ps
vfmsubaddpd
vfmsubaddps
vfmsubpd
vfmsubps
vfmsubsd
vfmsubss
vfmulcph
vfmulcsh
vfnmadd132pd
vfnmadd132ph
vfnmadd132ps
vfnmadd132sd
vfnmadd132sh
vfnmadd132ss
vfnmadd213pd
vfnmadd213ph
vfnmadd213ps
vfnmadd213sd
vfnmadd213sh
vfnmadd213ss
vfnmadd231pd
vfnmadd231ph
vfnmadd231ps
vfnmadd231sd
vfnmadd231sh
vfnmadd231ss
vfnmaddpd
vfnmaddps
vfnmaddsd
vfnmaddss
vfnmsub132pd
vfnmsub132ph
vfnmsub132ps
vfnmsub132sd
vfnmsub132sh
vfnmsub132ss
vfnmsub213pd
vfnmsub213ph
vfnmsub213ps
vfnmsub213sd
vfnmsub213sh
vfnmsub213ss
vfnmsub231pd
vfnmsub231ph
vfnmsub231ps
vfnmsub231sd
vfnmsub231sh
vfnmsub231ss
vfnmsubpd
vfnmsubps
vfnmsubsd
vfnmsubss
vfpclasspd
vfpclassph
vfpclassps
vfpclasssd
vfpclasssh
vfpclassss
vfrczpd
vfrczps
vfrczsd
vfrczss
vgatherdpd
vgatherdps
vgatherpf0dpd
vgatherpf0dps
vgatherpf0hintdpd
vgatherpf0hintdps
vgatherpf0qpd
vgatherpf0qps
vgatherpf1dpd
vgatherpf1dps
vgatherpf1qpd
vgatherpf1qps
vgatherqpd
vgatherqps
vgetexppd
vgetexpph
vgetexpps
vgetexpsd
vgetexpsh
vgetexpss
vgetmantpd
vgetmantph
vgetmantps
vgetmantsd
vgetmantsh
vgetmantss
vgf2p8affineinvqb
vgf2p8affineqb
vgf2p8mulb
vgmaxabsps
vgmaxpd
vgmaxps
vgminpd
vgminps
vhaddpd
vhaddps
vhsubpd
vhsubps
vinsertf128
vinsertf32x4
vinsertf32x8
vinsertf64x2
vinsertf64x4
vinserti128
vinserti32x4
vinserti32x8
vinserti64x2
vinserti64x4
vinsertps
vlddqu
vldmxcsr
vloadunpackhd
vloadunpackhpd
vloadunpackhps
vloadunpackhq
vloadunpackld
vloadunpacklpd
vloadunpacklps
vloadunpacklq
vlog2ps
vmaskmovdqu
vmaskmovpd
vmaskmovps
vmaxpd
vmaxph
vmaxps
vmaxsd
vmaxsh
vmaxss
vmcall
vmclear
vmfunc
vminpd
vminph
vminps
vminsd
vminsh
vminss
vmlaunch
vmload
vmmcall
vmovapd
vmovaps
vmovd
vmovddup
vmovdqa
vmovdqa32
vmovdqa64
vmovdqu
vmovdqu16
vmovdqu32
vmovdqu64
vmovdqu8
vmovhlps
vmovhpd
vmovhps
vmovlhps
vmovlpd
vmovlps
vmovmskpd
vmovmskps
vmovnrapd
vmovnraps
vmovnrngoapd
vmovnrngoaps
vmovntdq
vmovntdqa
vmovntpd
vmovntps
vmovq
vmovsd
vmovsh
vmovshdup
vmovsldup
vmovss
vmovupd
vmovups
vmovw
vmpsadbw
vmptrld
vmptrst
vmread
vmresume
vmrun
vmsave
vmulpd
vmulph
vmulps
vmulsd
vmulsh
vmulss
vmwrite
vmxoff
vmxon
vorpd
vorps
vp2intersectd
vp2intersectq
vp4dpwssd
vp4dpwssds
vpabsb
vpabsd
vpabsq
vpabsw
vpackssdw
vpacksswb
vpackstorehd
vpackstorehpd
vpackstorehps
vpackstorehq
vpackstoreld
vpackstorelpd
vpackstorelps
vpackstorelq
vpackusdw
vpackuswb
vpadcd
vpaddb
vpaddd
vpaddq
vpaddsb
vpaddsetcd
vpaddsetsd
vpaddsw
vpaddusb
vpaddusw
vpaddw
vpalignr
vpand
vpandd
vpandn
vpandnd
vpandnq
vpandq
vpavgb
vpavgw
vpblendd
vpblendmb
vpblendmd
vpblendmq
vpblendmw
vpblendvb
vpblendw
vpbroadcastb
vpbroadcastd
vpbroadcastmb2q
vpbroadcastmw2d
vpbroadcastq
vpbroadcastw
vpclmulqdq
vpcmov
vpcmpb
vpcmpd
vpcmpeqb
vpcmpeqd
vpcmpeqq
vpcmpeqw
vpcmpestri
vpcmpestrm
vpcmpgtb
vpcmpgtd
vpcmpgtq
vpcmpgtw
vpcmpistri
vpcmpistrm
vpcmpltd
vpcmpq
vpcmpub
vpcmpud
vpcmpuq
vpcmpuw
vpcmpw
vpcomb
vpcomd
vpcompressb
vpcompressd
vpcompressq
vpcompressw
vpcomq
vpcomub
vpcomud
vpcomuq
vpcomuw
vpcomw
vpconflictd
vpconflictq
vpdpbusd
vpdpbusds
vpdpwssd
vpdpwssds
vperm2f128
vperm2i128
vpermb
vpermd
vpermf32x4
vpermi2b
vpermi2d
vpermi2pd
vpermi2ps
vpermi2q
vpermi2w
vpermil2pd
vpermil2ps
vpermilpd
vpermilps
vpermpd
vpermps
vpermq
vpermt2b
vpermt2d
vpermt2pd
vpermt2ps
vpermt2q
vpermt2w
vpermw
vpexpandb
vpexpandd
vpexpandq
vpexpandw
vpextrb
vpextrd
vpextrq
vpextrw
vpgatherdd
vpgatherdq
vpgatherqd
vpgatherqq
vphaddbd
vphaddbq
vphaddbw
vphaddd
vphadddq
vphaddsw
vphaddubd
vphaddubq
vphaddubw
vphaddudq
vphadduwd
vphadduwq
vphaddw
vphaddwd
vphaddwq
vphminposuw
vphsubbw
vphsubd
vphsubdq
vphsubsw
vphsubw
vphsubwd
vpinsrb
vpinsrd
vpinsrq
vpinsrw
vplzcntd
vplzcntq
vpmacsdd
vpmacsdqh
vpmacsdql
vpmacssdd
vpmacssdqh
vpmacssdql
vpmacsswd
vpmacssww
vpmacswd
vpmacsww
vpmadcsswd
vpmadcswd
vpmadd231d
vpmadd233d
vpmadd52huq
vpmadd52luq
vpmaddubsw
vpmaddwd
vpmaskmovd
vpmaskmovq
vpmaxsb
vpmaxsd
vpmaxsq
vpmaxsw
vpmaxub
vpmaxud
vpmaxuq
vpmaxuw
vpminsb
vpminsd
vpminsq
vpminsw
vpminub
vpminud
vpminuq
vpminuw
vpmovb2m
vpmovd2m
vpmovdb
vpmovdw
vpmovm2b
vpmovm2d
vpmovm2q
vpmovm2w
vpmovmskb
vpmovq2m
vpmovqb
vpmovqd
vpmovqw
vpmovsdb
vpmovsdw
vpmovsqb
vpmovsqd
vpmovsqw
vpmovswb
vpmovsxbd
vpmovsxbq
vpmovsxbw
vpmovsxdq
vpmovsxwd
vpmovsxwq
vpmovusdb
vpmovusdw
vpmovusqb
vpmovusqd
vpmovusqw
vpmovuswb
vpmovw2m
vpmovwb
vpmovzxbd
vpmovzxbq
vpmovzxbw
vpmovzxdq
vpmovzxwd
vpmovzxwq
vpmuldq
vpmulhd
vpmulhrsw
vpmulhud
vpmulhuw
vpmulhw
vpmulld
vpmullq
vpmullw
vpmultishiftqb
vpmuludq
vpopcntb
vpopcntd
vpopcntq
vpopcntw
vpor
vpord
vporq
vpperm
vprefetch0
vprefetch1
vprefetch2
vprefetche0
vprefetche1
vprefetche2
vprefetchenta
vprefetchnta
vprold
vprolq
vprolvd
vprolvq
vprord
vprorq
vprorvd
vprorvq
vprotb
vprotd
vprotq
vprotw
vpsadbw
vpsbbd
vpsbbrd
vpscatterdd
vpscatterdq
vpscatterqd
vpscatterqq
vpshab
vpshad
vpshaq
vpshaw
vpshlb
vpshld
vpshldd
vpshldq
vpshldvd
vpshldvq
vpshldvw
vpshldw
vpshlq
vpshlw
vpshrdd
vpshrdq
vpshrdvd
vpshrdvq
vpshrdvw
vpshrdw
vpshufb
vpshufbitqmb
vpshufd
vpshufhw
vpshuflw
vpsignb
vpsignd
vpsignw
vpslld
vpslldq
vpsllq
vpsllvd
vpsllvq
vpsllvw
vpsllw
vpsrad
vpsraq
vpsravd
vpsravq
vpsravw
vpsraw
vpsrld
vpsrldq
vpsrlq
vpsrlvd
vpsrlvq
vpsrlvw
vpsrlw
vpsubb
vpsubd
vpsubq
vpsubrd
vpsubrsetbd
vpsubsb
vpsubsetbd
vpsubsw
vpsubusb
vpsubusw
vpsubw
vpternlogd
vpternlogq
vptest
vptestmb
vptestmd
vptestmq
vptestmw
vptestnmb
vptestnmd
vptestnmq
vptestnmw
vpunpckhbw
vpunpckhdq
vpunpckhqdq
vpunpckhwd
vpunpcklbw
vpunpckldq
vpunpcklqdq
vpunpcklwd
vpxor
vpxord
vpxorq
vrangepd
vrangeps
vrangesd
vrangess
vrcp14pd
vrcp14ps
vrcp14sd
vrcp14ss
vrcp23ps
vrcp28pd
vrcp28ps
vrcp28sd
vrcp28ss
vrcpph
vrcpps
vrcpsh
vrcpss
vreducepd
vreduceph
vreduceps
vreducesd
vreducesh
vreducess
vrndfxpntpd
vrndfxpntps
vrndscalepd
vrndscaleph
vrndscaleps
vrndscalesd
vrndscalesh
vrndscaless
vroundpd
vroundps
vroundsd
vroundss
vrsqrt14pd
vrsqrt14ps
vrsqrt14sd
vrsqrt14ss
vrsqrt23ps
vrsqrt28pd
vrsqrt28ps
vrsqrt28sd
vrsqrt28ss
vrsqrtph
vrsqrtps
vrsqrtsh
vrsqrtss
vscalefpd
vscalefph
vscalefps
vscalefsd
vscalefsh
vscalefss
vscaleps
vscatterdpd
vscatterdps
vscatterpf0dpd
vscatterpf0dps
vscatterpf0hintdpd
vscatterpf0hintdps
vscatterpf0qpd
vscatterpf0qps
vscatterpf1dpd
vscatterpf1dps
vscatterpf1qpd
vscatterpf1qps
vscatterqpd
vscatterqps
vshuff32x4
vshuff64x2
vshufi32x4
vshufi64x2
vshufpd
vshufps
vsqrtpd
vsqrtph
vsqrtps
vsqrtsd
vsqrtsh
vsqrtss
vstmxcsr
vsubpd
vsubph
vsubps
vsubrpd
vsubrps
vsubsd
vsubsh
vsubss
vtestpd
vtestps
vucomisd
vucomish
vucomiss
vunpckhpd
vunpckhps
vunpcklpd
vunpcklps
vxorpd
vxorps
vzeroall
vzeroupper
wbinvd
wrfsbase
wrgsbase
wrmsr
wrpkru
wrssd
wrssq
wrussd
wrussq
xabort
xadd
xbegin
xchg
xcrypt_cbc
xcrypt_cfb
xcrypt_ctr
xcrypt_ecb
xcrypt_ofb
xend
xgetbv
xlat
xorpd
xorps
xresldtrk
xrstor
xrstor64
xrstors
xrstors64
xsave
xsave64
xsavec
xsavec64
xsaveopt
xsaveopt64
xsaves
xsaves64
xsetbv
xsha1
xsha256
xstore
xsusldtrk
xtest
none
r10b
r11b
r12b
r13b
r14b
r15b
r10w
r11w
r12w
r13w
r14w
r15w
r10d
r11d
r12d
r13d
r14d
r15d
x87control
x87status
x87tag
xmm0
xmm1
xmm2
xmm3
xmm4
xmm5
xmm6
xmm7
xmm8
xmm9
xmm10
xmm11
xmm12
xmm13
xmm14
xmm15
xmm16
xmm17
xmm18
xmm19
xmm20
xmm21
xmm22
xmm23
xmm24
xmm25
xmm26
xmm27
xmm28
xmm29
xmm30
xmm31
ymm0
ymm1
ymm2
ymm3
ymm4
ymm5
ymm6
ymm7
ymm8
ymm9
ymm10
ymm11
ymm12
ymm13
ymm14
ymm15
ymm16
ymm17
ymm18
ymm19
ymm20
ymm21
ymm22
ymm23
ymm24
ymm25
ymm26
ymm27
ymm28
ymm29
ymm30
ymm31
zmm0
zmm1
zmm2
zmm3
zmm4
zmm5
zmm6
zmm7
zmm8
zmm9
zmm10
zmm11
zmm12
zmm13
zmm14
zmm15
zmm16
zmm17
zmm18
zmm19
zmm20
zmm21
zmm22
zmm23
zmm24
zmm25
zmm26
zmm27
zmm28
zmm29
zmm30
zmm31
tmm0
tmm1
tmm2
tmm3
tmm4
tmm5
tmm6
tmm7
flags
eflags
rflags
gdtr
ldtr
idtr
cr10
cr11
cr12
cr13
cr14
cr15
dr10
dr11
dr12
dr13
dr14
dr15
bnd0
bnd1
bnd2
bnd3
bndcfg
bndstatus
mxcsr
pkru
xcr0
00010203040506070809101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899
0123456789ABCDEF
0123456789abcdef
%-3d %p %{public}s
%-3d %p
mach_port_deallocate error for port %d: %{private}s (%#x)
WebKit Threading Violation - initial use of WebKit from a secondary thread.
Process is above the memory kill threshold. Trying to shrink down.
New memory footprint: %zu MB
Shrank below memory kill threshold. Process gets to live.
Memory usage policy changed: %s -> %s
Current memory footprint: %zu MB
Memory pressure relief: %{public}s: (Unable to get dirty memory information for process)
Memory pressure relief: %{public}s: res = %zu/%zu/%ld, res+swap = %zu/%zu/%ld
Received memory pressure event %lu vm pressure %d
%{public}s
JSGlobalObject signpost
BEGIN SIGILL analysis
ERROR: Unable to analyze SIGILL. Timed out while waiting to iterate VMs.
ERROR: Timed out: not able to determine if pc %p is in valid JIT executable memory
pc %p is NOT in valid JIT executable memory
pc %p is in valid JIT executable memory
ERROR: Timed out: not able to determine if pc %p is in a valid CodeBlock
The current thread does not own any VM JSLock
machine PC %p does not belong to any CodeBlock in the currently entered VM
pc %p belongs to CodeBlock %p of type %s
END SIGILL analysis
Register rax: %p
Register rbx: %p
Register rcx: %p
Register rdx: %p
Register rdi: %p
Register rsi: %p
Register rbp: %p
Register rsp: %p
Register r8: %p
Register r9: %p
Register r10: %p
Register r11: %p
Register r12: %p
Register r13: %p
Register r14: %p
Register r15: %p
Register rip: %p
Register rflags: %p
Register cs: %p
Register fs: %p
Register gs: %p
WTFWebFileManagerDelegate
NSFileManagerDelegate
NSObject
JSContext
SubscriptSupport
Internal
JSManagedValue
JSScript
JSValue
StructSupport
JSVMWrapperCache
JSVirtualMachine
JSObjCClassInfo
JSWrapperMap
JSExport
name
reason
code
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
fileManager:shouldCopyItemAtPath:toPath:
fileManager:shouldCopyItemAtURL:toURL:
fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:
fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:
fileManager:shouldMoveItemAtPath:toPath:
fileManager:shouldMoveItemAtURL:toURL:
fileManager:shouldProceedAfterError:movingItemAtPath:toPath:
fileManager:shouldProceedAfterError:movingItemAtURL:toURL:
fileManager:shouldLinkItemAtPath:toPath:
fileManager:shouldLinkItemAtURL:toURL:
fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:
fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:
fileManager:shouldRemoveItemAtPath:
fileManager:shouldRemoveItemAtURL:
fileManager:shouldProceedAfterError:removingItemAtPath:
fileManager:shouldProceedAfterError:removingItemAtURL:
initWithFilePresenter:
fileURLWithPath:
coordinateReadingItemAtURL:options:error:byAccessor:
length
stringByAppendingString:
stringByAppendingPathComponent:
fileSystemRepresentation
defaultManager
stringWithFileSystemRepresentation:length:
attributesOfItemAtPath:error:
objectForKey:
isEqualToString:
dictionaryWithObjects:forKeys:count:
setAttributes:ofItemAtPath:error:
fileURLWithPath:isDirectory:
setResourceValue:forKey:error:
path
arrayWithObjects:count:
matchedLanguagesFromAvailableLanguages:forPreferredLanguages:
count
firstObject
minimizedLanguagesFromLanguages:
initWithCapacity:
addObject:
countByEnumeratingWithState:objects:count:
bytes
URLWithString:
data
appendBytes:length:
UTF8String
mutableCopy
dataUsingEncoding:
dataWithBytesNoCopy:length:
getCFRunLoop
initWithBytes:length:encoding:
initWithCharacters:length:
initWithBytesNoCopy:length:encoding:freeWhenDone:
initWithCharactersNoCopy:length:freeWhenDone:
objectAtIndexedSubscript:
initWithString:
_web_looksLikeIPAddress
mainBundle
bundleIdentifier
hasPrefix:
processInfo
processName
rangeOfString:options:
contextWithJSGlobalContextRef:
notifyException:
moduleLoaderDelegate
valueWithJSValueRef:inContext:
context:fetchModuleForIdentifier:withResolveHandler:andRejectHandler:
exception
JSValueRef
setException:
willEvaluateModule:
didEvaluateModule:
sourceURL
absoluteString
JSGlobalContextRef
initWithGlobalContextRef:
initWithVirtualMachine:
init
setExceptionHandler:
ensureWrapperMap
addContext:forGlobalContextRef:
dealloc
evaluateScript:withSourceURL:
valueFromNotifyException:
type
sourceCode
valueWithNewErrorFromMessage:inContext:
valueWithNewPromiseRejectedWithReason:inContext:
exceptionHandler
valueWithUndefinedInContext:
currentContext
setObject:atIndexedSubscript:
currentThis
currentCallee
currentArguments
evaluateScript:
evaluateJSScript:
dependencyIdentifiersForModuleJSScript:
_setITMLDebuggableType
globalObject
virtualMachine
setName:
_remoteInspectionEnabled
_setRemoteInspectionEnabled:
_includesNativeCallStackWhenReportingExceptions
_setIncludesNativeCallStackWhenReportingExceptions:
_debuggerRunLoop
_setDebuggerRunLoop:
setModuleLoaderDelegate:
.cxx_destruct
.cxx_construct
m_virtualMachine
m_context
m_exception
m_moduleLoaderDelegate
_exceptionHandler
T@"JSValue",R
T@"JSValue",&
T@?,C,V_exceptionHandler
T@"JSVirtualMachine",R
T@"NSString",C
objectForKeyedSubscript:
setObject:forKeyedSubscript:
virtualMachineWithContextGroupRef:
wrapperMap
jsWrapperForObject:inContext:
objcWrapperForJSValueRef:inContext:
contextForGlobalContextRef:
boolFromNotifyException:
beginCallbackWithData:calleeValue:thisValue:argumentCount:arguments:
endCallbackWithData:
wrapperForObjCObject:
wrapperForJSObject:
initWithValue:
context
addManagedReference:withOwner:
initWithKeyOptions:valueOptions:capacity:
value
copy
keyEnumerator
removeManagedReference:withOwner:
disconnectValue
managedValueWithValue:
managedValueWithValue:andOwner:
didAddOwner:
didRemoveOwner:
m_globalObject
m_lock
m_weakValue
m_owners
readCache
absoluteURL
stringWithFormat:
JSContextGroupRef
writeCache:
scriptOfType:withSource:andSourceURL:andBytecodeCache:inVirtualMachine:error:
scriptOfType:memoryMappedFromASCIIFile:withSourceURL:andBytecodeCache:inVirtualMachine:error:
cacheBytecodeWithError:
isUsingBytecodeCache
m_type
m_mappedSource
m_source
m_sourceURL
m_cachePath
m_cachedBytecode
source
cachedBytecode
jsSourceCode
toString
callWithArguments:
valueWithNewPromiseInContext:fromExecutor:
toObject
toDouble
invokeMethod:withArguments:
valueWithDouble:inContext:
valueForProperty:
setValue:forProperty:
objectAtIndex:
valueWithObject:inContext:
valueWithBool:inContext:
valueWithInt32:inContext:
valueWithUInt32:inContext:
valueWithNewObjectInContext:
valueWithNewArrayInContext:
valueWithNewRegularExpressionFromPattern:flags:inContext:
valueWithNullInContext:
valueWithNewSymbolFromDescription:inContext:
valueWithNewPromiseResolvedWithResult:inContext:
toObjectOfClass:
toBool
toInt32
toUInt32
toNumber
toDate
toArray
toDictionary
deleteProperty:
hasProperty:
defineProperty:descriptor:
valueAtIndex:
setValue:atIndex:
isUndefined
isNull
isBoolean
isNumber
isString
isObject
isSymbol
isArray
isDate
isEqualToObject:
isEqualWithTypeCoercionToObject:
isInstanceOf:
constructWithArguments:
m_value
_context
T@"JSContext",R,V_context
TB,R
unsignedIntegerValue
toPoint
toSize
numberWithDouble:
numberWithUnsignedInteger:
toRange
toRect
valueWithPoint:inContext:
valueWithRange:inContext:
valueWithRect:inContext:
valueWithSize:inContext:
dateWithTimeIntervalSince1970:
array
dictionary
selectorForStructToValue:
signatureWithObjCTypes:
invocationWithMethodSignature:
setSelector:
selectorForValueToStruct:
initWithValue:inContext:
addWrapper:forJSContextGroupRef:
wrapperForJSContextGroupRef:
initWithContextGroupRef:
setObject:forKey:
isOldExternalObject:
addExternalRememberedObject:
removeObjectForKey:
m_group
m_externalDataMutex
m_contextCache
m_externalObjectGraph
m_externalRememberedSet
externalDataMutex
externalObjectGraph
externalRememberedSet
shrinkFootprintWhenIdle
isWebThreadAware
setNumberOfDFGCompilerThreads:
setNumberOfFTLCompilerThreads:
setCrashOnVMCreation:
T^{OpaqueJSContextGroup=},R
removeAllObjects
errorWithDomain:code:userInfo:
null
boolValue
doubleValue
timeIntervalSince1970
isSubclassOfClass:
classInfoForClass:
prototypeInContext:
structureInContext:
allocateConstructorAndPrototypeInContext:
initForClass:
wrapperForObject:inContext:
constructorInContext:
m_class
m_block
m_classRef
m_prototype
m_constructor
m_structure
m_classMap
m_cachedJSWrappers
m_cachedObjCWrappers
setTarget:
invoke
stringWithUTF8String:
characterAtIndex:
uppercaseLetterCharacterSet
characterIsMember:
rangeOfString:
substringToIndex:
substringWithRange:
target
getReturnValue:
exceptionWithName:reason:userInfo:
setArgument:atIndex:
invokeWithTarget:
isMainThread
numberWithUnsignedInt:
subdataWithRange:
numberWithBool:
stringValue
unsignedIntValue
initWithData:encoding:
numberWithInt:
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
B40@0:8@16@24@32
B48@0:8@16@24@32@40
B32@0:8@16@24
B40@0:8@"NSFileManager"16@"NSString"24@"NSString"32
B40@0:8@"NSFileManager"16@"NSURL"24@"NSURL"32
B48@0:8@"NSFileManager"16@"NSError"24@"NSString"32@"NSString"40
B48@0:8@"NSFileManager"16@"NSError"24@"NSURL"32@"NSURL"40
B32@0:8@"NSFileManager"16@"NSString"24
B32@0:8@"NSFileManager"16@"NSURL"24
B40@0:8@"NSFileManager"16@"NSError"24@"NSString"32
B40@0:8@"NSFileManager"16@"NSError"24@"NSURL"32
^{OpaqueJSContext=}16@0:8
v16@0:8
@24@0:8@16
@32@0:8@16@24
v24@0:8@16
v20@0:8B16
^{__CFRunLoop=}16@0:8
v24@0:8^{__CFRunLoop=}16
@?16@0:8
v24@0:8@?16
{RetainPtr<JSVirtualMachine>="m_ptr"^v}
^{OpaqueJSContext=}
{Strong<JSC::JSObject, JSC::ShouldStrongDestructorGrabLock::No>="m_slot"^{JSValue}}
{WeakObjCPtr<id<JSModuleLoaderDelegate>>="m_weakReference"@}
v32@0:8@16@24
@24@0:8^{OpaqueJSContext=}16
v24@0:8^{OpaqueJSValue=}16
@24@0:8^{OpaqueJSValue=}16
B24@0:8^{OpaqueJSValue=}16
v56@0:8^v16^{OpaqueJSValue=}24^{OpaqueJSValue=}32Q40r^^{OpaqueJSValue}48
v24@0:8^v16
{Weak<JSC::JSGlobalObject>="m_impl"^{WeakImpl}}
{RefPtr<JSC::JSLock, WTF::RawPtrTraits<JSC::JSLock>, WTF::DefaultRefDerefTraits<JSC::JSLock>>="m_ptr"^{JSLock}}
{JSWeakValue="m_tag"i"m_value"(WeakValueUnion="primitive"{JSValue="u"(EncodedValueDescriptor="asInt64"q"ptr"^{JSCell}"asBits"{?="payload"i"tag"i})}"object"{Weak<JSC::JSObject>="m_impl"^{WeakImpl}}"string"{Weak<JSC::JSString>="m_impl"^{WeakImpl}})}
{RetainPtr<NSMapTable>="m_ptr"^v}
@64@0:8q16@24@32@40@48o^@56
B24@0:8^@16
q16@0:8
{WeakObjCPtr<JSVirtualMachine>="m_weakReference"@}
{MappedFileData="m_fileData"^v"m_fileSize"I}
{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}
{RetainPtr<NSURL>="m_ptr"^v}
{RefPtr<JSC::CachedBytecode, WTF::RawPtrTraits<JSC::CachedBytecode>, WTF::DefaultRefDerefTraits<JSC::CachedBytecode>>="m_ptr"^{CachedBytecode}}
I16@0:8
r^v16@0:8
{RefPtr<JSC::CachedBytecode, WTF::RawPtrTraits<JSC::CachedBytecode>, WTF::DefaultRefDerefTraits<JSC::CachedBytecode>>=^{CachedBytecode}}16@0:8
{SourceCode={RefPtr<JSC::SourceProvider, WTF::RawPtrTraits<JSC::SourceProvider>, WTF::DefaultRefDerefTraits<JSC::SourceProvider>>=^{SourceProvider}}ii{OrdinalNumber=i}{OrdinalNumber=i}}16@0:8
^v16@0:8
B24@0:8^v16
@28@0:8B16@20
@32@0:8d16@24
@28@0:8i16@20
@28@0:8I16@20
@40@0:8@16@24@32
@32@0:8@16@?24
^{OpaqueJSValue=}16@0:8
@24@0:8#16
d16@0:8
i16@0:8
@24@0:8Q16
v32@0:8@16Q24
^{OpaqueJSValue=}
@"JSContext"
{CGPoint=dd}16@0:8
{_NSRange=QQ}16@0:8
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
{CGSize=dd}16@0:8
@40@0:8{CGPoint=dd}16@32
@40@0:8{_NSRange=QQ}16@32
@56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48
@40@0:8{CGSize=dd}16@32
@32@0:8^{OpaqueJSValue=}16@24
:24@0:8r*16
v32@0:8@16^{OpaqueJSContextGroup=}24
@24@0:8^{OpaqueJSContextGroup=}16
^{OpaqueJSContextGroup=}
{Lock="m_byte"{Atomic<unsigned char>="value"{atomic<unsigned char>="__a_"{__cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>>="__a_value"AC}}}}
v32@0:8@16^{OpaqueJSContext=}24
^{OpaqueJSContextGroup=}16@0:8
Q24@0:8Q16
{pair<JSC::JSObject *, JSC::JSObject *>=^{JSObject}^{JSObject}}24@0:8@16
^v32@0:8@16@24
^v24@0:8@16
{NakedPtr<OpaqueJSClass>="m_ptr"^{OpaqueJSClass}}
{Weak<JSC::JSObject>="m_impl"^{WeakImpl}}
{Weak<JSC::Structure>="m_impl"^{WeakImpl}}
{RetainPtr<NSMutableDictionary>="m_ptr"^v}
{unique_ptr<JSC::WeakGCMap<id, JSC::JSObject>, std::default_delete<JSC::WeakGCMap<id, JSC::JSObject>>>="__ptr_"{__compressed_pair<JSC::WeakGCMap<id, JSC::JSObject> *, std::default_delete<JSC::WeakGCMap<id, JSC::JSObject>>>="__value_"^v}}
)^_
,0+I
,/_`
,*0+
,2A_
,(ij
,8!y
,BxP
,$&;
,/C,
,cA1
,Oih
,,d|
,aA+
,X[3
,I6K
,7|p
,94?
,dg,
,V[n
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
456789:;<=
 !"#$%&'()*+,-./0123
?456789:;<=
 !"#$%&'()*+,-./0123
-;eU
U1(\Q
mSx@
b}$l
~)p$w
11eU%
z^KD
 !"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
0123456789abcdef
0123456789ABCDEF
Rb&r
&&&&&&&&&&&&&&&&&&&&
SSSSSSSSSSS!SSSSSSSSSSSSSSSA
Tag 


 #&)
,/258;>ADGJ
uuuuuuuubtnufruuuuuuuuuuuuuuuuuu
vH7B
W4vC
          
                          
                          
/libclang_rt.
asan_
tsan_
"',*
DDXZ
05:8
 &8?
>LNPRTVXZ\^`
WWz~
,,Y\
!$,*'
(function (syncIterator, nextMethod)
"use strict";
@putByIdDirectPrivate(this, "syncIterator", syncIterator);
@putByIdDirectPrivate(this, "nextMethod", nextMethod);
(function (executor)
"use strict";
if (!@isCallable(executor))
@throwTypeError("InternalPromise constructor takes a function argument");
var promise = @createPromise(this,  true);
var capturedPromise = promise;
try {
executor(
(resolution) => {
return @resolvePromiseWithFirstResolvingFunctionCallCheck(capturedPromise, resolution);
(reason) => {
return @rejectPromiseWithFirstResolvingFunctionCallCheck(capturedPromise, reason);
} catch (error) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, error);
return promise;
(function (executor)
"use strict";
if (!@isCallable(executor))
@throwTypeError("Promise constructor takes a function argument");
var promise = @createPromise(this,  false);
var capturedPromise = promise;
try {
executor(
(resolution) => {
return @resolvePromiseWithFirstResolvingFunctionCallCheck(capturedPromise, resolution);
(reason) => {
return @rejectPromiseWithFirstResolvingFunctionCallCheck(capturedPromise, reason);
} catch (error) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, error);
return promise;
(function (regExp, string, global, fullUnicode)
"use strict";
@putByIdDirectPrivate(this, "regExpStringIteratorRegExp", regExp);
@putByIdDirectPrivate(this, "regExpStringIteratorString", string);
@putByIdDirectPrivate(this, "regExpStringIteratorGlobal", global);
@putByIdDirectPrivate(this, "regExpStringIteratorUnicode", fullUnicode);
@putByIdDirectPrivate(this, "regExpStringIteratorDone", false);
(function (string, index, unicode)
"use strict";
if (!unicode)
return index + 1;
if (index + 1 >= string.length)
return index + 1;
var first = string.@charCodeAt(index);
if (first < 0xD800 || first > 0xDBFF)
return index + 1;
var second = string.@charCodeAt(index + 1);
if (second < 0xDC00 || second > 0xDFFF)
return index + 1;
return index + 2;
(function (iterable)
"use strict";
if (!@isObject(this))
@throwTypeError("|this| is not an object");
var promiseCapability = @newPromiseCapability(this);
var values = [];
var index = 0;
var remainingElementsCount = 1;
function newResolveElement(index)
var alreadyCalled = false;
return (argument) => {
if (alreadyCalled)
return @undefined;
alreadyCalled = true;
@putByValDirect(values, index, argument);
--remainingElementsCount;
if (remainingElementsCount === 0)
return promiseCapability.@resolve.@call(@undefined, values);
return @undefined;
try {
var promiseResolve = this.resolve;
if (!@isCallable(promiseResolve))
@throwTypeError("Promise resolve is not a function");
for (var value of iterable) {
@putByValDirect(values, index, @undefined);
var nextPromise = promiseResolve.@call(this, value);
var resolveElement = newResolveElement(index);
++remainingElementsCount;
nextPromise.then(resolveElement, promiseCapability.@reject);
++index;
--remainingElementsCount;
if (remainingElementsCount === 0)
promiseCapability.@resolve.@call(@undefined, values);
} catch (error) {
promiseCapability.@reject.@call(@undefined, error);
return promiseCapability.@promise;
(function (iterable)
"use strict";
if (!@isObject(this))
@throwTypeError("|this| is not an object");
var promiseCapability = @newPromiseCapability(this);
var values = [];
var remainingElementsCount = 1;
var index = 0;
function newResolveRejectElements(index)
var alreadyCalled = false;
return [
(value) => {
if (alreadyCalled)
return @undefined;
alreadyCalled = true;
var obj = {
status: "fulfilled",
value
@putByValDirect(values, index, obj);
--remainingElementsCount;
if (remainingElementsCount === 0)
return promiseCapability.@resolve.@call(@undefined, values);
return @undefined;
(reason) => {
if (alreadyCalled)
return @undefined;
alreadyCalled = true;
var obj = {
status: "rejected",
reason
@putByValDirect(values, index, obj);
--remainingElementsCount;
if (remainingElementsCount === 0)
return promiseCapability.@resolve.@call(@undefined, values);
return @undefined;
try {
var promiseResolve = this.resolve;
if (!@isCallable(promiseResolve))
@throwTypeError("Promise resolve is not a function");
for (var value of iterable) {
@putByValDirect(values, index, @undefined);
var nextPromise = promiseResolve.@call(this, value);
var [resolveElement, rejectElement] = newResolveRejectElements(index);
++remainingElementsCount;
nextPromise.then(resolveElement, rejectElement);
++index;
--remainingElementsCount;
if (remainingElementsCount === 0)
promiseCapability.@resolve.@call(@undefined, values);
} catch (error) {
promiseCapability.@reject.@call(@undefined, error);
return promiseCapability.@promise;
(function (url)
"use strict";
return @createHTML("String.prototype.link", this, "a", "name", url)
(function (iterable)
"use strict";
if (!@isObject(this))
@throwTypeError("|this| is not an object");
var promiseCapability = @newPromiseCapability(this);
var errors = [];
var remainingElementsCount = 1;
var index = 0;
function newRejectElement(index)
var alreadyCalled = false;
return (reason) => {
if (alreadyCalled)
return @undefined;
alreadyCalled = true;
@putByValDirect(errors, index, reason);
--remainingElementsCount;
if (remainingElementsCount === 0)
return promiseCapability.@reject.@call(@undefined, new @AggregateError(errors));
return @undefined;
try {
var promiseResolve = this.resolve;
if (!@isCallable(promiseResolve))
@throwTypeError("Promise resolve is not a function");
for (var value of iterable) {
@putByValDirect(errors, index, @undefined);
var nextPromise = promiseResolve.@call(this, value);
var rejectElement = newRejectElement(index);
++remainingElementsCount;
nextPromise.then(promiseCapability.@resolve, rejectElement);
++index;
--remainingElementsCount;
if (remainingElementsCount === 0)
throw new @AggregateError(errors);
} catch (error) {
promiseCapability.@reject.@call(@undefined, error);
return promiseCapability.@promise;
(function (thisValue, argumentValues)
"use strict";
return this.@apply(thisValue, argumentValues);
(function (target, thisArgument, argumentsList)
"use strict";
if (!@isCallable(target))
@throwTypeError("Reflect.apply requires the first argument be a function");
if (!@isObject(argumentsList))
@throwTypeError("Reflect.apply requires the third argument be an object");
return target.@apply(thisArgument, argumentsList);
(function (array, kind)
"use strict";
var done = true;
var value;
var index = @getArrayIteratorInternalField(this, @arrayIteratorFieldIndex);
if (index !== -1) {
var length = array.length >>> 0;
if (index < length) {
@putArrayIteratorInternalField(this, @arrayIteratorFieldIndex, index + 1);
done = false;
if (kind === @iterationKindKey)
value = index;
else {
value = array[index];
if (kind === @iterationKindEntries)
value = [index, value];
} else
@putArrayIteratorInternalField(this, @arrayIteratorFieldIndex, -1);
return { value, done };
(function (generator, promise, sentValue, resumeMode)
"use strict";
@assert(@isPromise(promise));
var state = @getGeneratorInternalField(generator, @generatorFieldState);
var value = @undefined;
try {
@putGeneratorInternalField(generator, @generatorFieldState, @GeneratorStateExecuting);
value = @getGeneratorInternalField(generator, @generatorFieldNext).@call(@getGeneratorInternalField(generator, @generatorFieldThis), generator, state, sentValue, resumeMode, @getGeneratorInternalField(generator, @generatorFieldFrame));
if (@getGeneratorInternalField(generator, @generatorFieldState) === @GeneratorStateExecuting) {
@resolvePromiseWithFirstResolvingFunctionCallCheck(promise, value);
return promise;
} catch (error) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, error);
return promise;
var capturedGenerator = generator;
var capturedPromise = promise;
@resolveWithoutPromise(value,
function(value) { @asyncFunctionResume(capturedGenerator, capturedPromise, value, @GeneratorResumeModeNormal); },
function(error) { @asyncFunctionResume(capturedGenerator, capturedPromise, error, @GeneratorResumeModeThrow); });
return promise;
(function (generator, value, resumeMode)
"use strict";
var promise = @newPromise();
if (!@isAsyncGenerator(generator)) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, @makeTypeError('|this| should be an async generator'));
return promise;
@asyncGeneratorQueueEnqueue(generator, {resumeMode, value, promise, @asyncGeneratorQueueItemNext: null});
if (!@isExecutionState(generator))
@asyncGeneratorResumeNext(generator);
return promise;
(function (generator)
"use strict";
@assert(!@asyncGeneratorQueueIsEmpty(generator), "Async genetator's Queue is an empty List.");
var result = @getAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueFirst);
var updatedFirst = @getByIdDirectPrivate(result, "asyncGeneratorQueueItemNext");
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueFirst, updatedFirst);
if (updatedFirst === null)
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueLast, null);
return result;
(function (generator, item)
"use strict";
@assert(@getByIdDirectPrivate(item, "asyncGeneratorQueueItemNext") === null);
if (@getAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueFirst) === null) {
@assert(@getAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueLast) === null);
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueFirst, item);
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueLast, item);
} else {
var last = @getAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueLast);
@putByIdDirectPrivate(last, "asyncGeneratorQueueItemNext", item);
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueLast, item);
(function (generator)
"use strict";
return @getAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueFirst) === null;
(function (generator, exception)
"use strict";
@assert(@isAsyncGenerator(generator), "Generator is not an AsyncGenerator instance.");
var promise = @asyncGeneratorQueueDequeue(generator).promise;
@assert(@isPromise(promise));
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, exception);
return @asyncGeneratorResumeNext(generator);
(function (generator, value, done)
"use strict";
@assert(@isAsyncGenerator(generator), "Generator is not an AsyncGenerator instance.");
var promise = @asyncGeneratorQueueDequeue(generator).promise;
@assert(@isPromise(promise));
@resolvePromiseWithFirstResolvingFunctionCallCheck(promise, { value, done });
return @asyncGeneratorResumeNext(generator);
(function (generator)
"use strict";
@assert(@isAsyncGenerator(generator), "Generator is not an AsyncGenerator instance.");
var state = @getAsyncGeneratorInternalField(generator, @generatorFieldState);
@assert(state !== @AsyncGeneratorStateExecuting, "Async generator should not be in executing state");
if (state === @AsyncGeneratorStateAwaitingReturn)
return;
if (@asyncGeneratorQueueIsEmpty(generator))
return;
var next = @getAsyncGeneratorInternalField(generator, @asyncGeneratorFieldQueueFirst);
if (next.resumeMode !== @GeneratorResumeModeNormal) {
if (state === @AsyncGeneratorStateSuspendedStart) {
@putAsyncGeneratorInternalField(generator, @generatorFieldState, @AsyncGeneratorStateCompleted);
state = @AsyncGeneratorStateCompleted;
if (state === @AsyncGeneratorStateCompleted) {
if (next.resumeMode === @GeneratorResumeModeReturn) {
@putAsyncGeneratorInternalField(generator, @generatorFieldState, @AsyncGeneratorStateAwaitingReturn);
@resolveWithoutPromise(next.value,
function (result) {
@putAsyncGeneratorInternalField(generator, @generatorFieldState, @AsyncGeneratorStateCompleted);
@asyncGeneratorResolve(generator, result, true);
function (error) {
@putAsyncGeneratorInternalField(generator, @generatorFieldState, @AsyncGeneratorStateCompleted);
@asyncGeneratorReject(generator, error);
return;
@assert(next.resumeMode === @GeneratorResumeModeThrow, "Async generator has wrong mode");
return @asyncGeneratorReject(generator, next.value);;
} else if (state === @AsyncGeneratorStateCompleted)
return @asyncGeneratorResolve(generator, @undefined, true);
@assert(state === @AsyncGeneratorStateSuspendedStart || @isSuspendYieldState(generator), "Async generator has wrong state");
@doAsyncGeneratorBodyCall(generator, next.value, next.resumeMode);
(function (generator, value, resumeMode)
"use strict";
function asyncGeneratorYieldAwaited(result)
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldSuspendReason, @AsyncGeneratorSuspendReasonYield);
@asyncGeneratorResolve(generator, result, false);
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldSuspendReason, @AsyncGeneratorSuspendReasonAwait);
@awaitValue(generator, value, asyncGeneratorYieldAwaited);
(async function (entry, fetcher, dependencies)
"use strict";
for (var i = 0, length = dependencies.length; i < length; ++i)
await this.moduleEvaluation(dependencies[i], fetcher);
var resumeMode = @GeneratorResumeModeNormal;
while (true) {
var awaitedValue = this.evaluate(entry.key, entry.module, fetcher, awaitedValue, resumeMode);
if (@getAbstractModuleRecordInternalField(entry.module, @abstractModuleRecordFieldState) == @GeneratorStateExecuting)
return;
try {
awaitedValue = await awaitedValue;
resumeMode = @GeneratorResumeModeNormal;
} catch (e) {
awaitedValue = e;
resumeMode = @GeneratorResumeModeThrow;
(function (index)
"use strict";
var array = @toObject(this, "Array.prototype.at requires that |this| not be null or undefined");
var length = @toLength(array.length);
var k = @toIntegerOrInfinity(index);
if (k < 0)
k += length;
return (k >= 0 && k < length) ? array[k] : @undefined;
(function (index)    
{   
"use strict";   
if (@isUndefinedOrNull(this))   
@throwTypeError("String.prototype.at requires that |this| not be null or undefined"); 
var string = @toString(this);   
var length = string.length; 
var k = @toIntegerOrInfinity(index);  
if (k < 0)  
k += length;    
return (k >= 0 && k < length) ? string[k] : @undefined; 
(function (index)
"use strict";
var length = @typedArrayLength(this);
var k = @toIntegerOrInfinity(index);
if (k < 0)
k += length;
return (k >= 0 && k < length) ? this[k] : @undefined;
(function (generator, value, onFulfilled)
"use strict";
var onRejected = function (result) { @doAsyncGeneratorBodyCall(generator, result, @GeneratorResumeModeThrow); };
@resolveWithoutPromise(value, onFulfilled, onRejected);
(function ()
"use strict";
return @createHTML("String.prototype.big", this, "big", "", "");
(function (thisValue)
"use strict";
var target = this;
if (!@isCallable(target))
@throwTypeError("|this| is not a function inside Function.prototype.bind");
var argumentCount = @argumentCount();
var boundArgs = null;
var numBoundArgs = 0;
if (argumentCount > 1) {
numBoundArgs = argumentCount - 1;
boundArgs = @createArgumentsButterfly();
var length = 0;
if (@hasOwnLengthProperty(target)) {
var lengthValue = target.length;
if (typeof lengthValue === "number") {
lengthValue = @toIntegerOrInfinity(lengthValue);
if (lengthValue > numBoundArgs)
length = lengthValue - numBoundArgs;
var name = target.name;
if (typeof name !== "string")
name = "";
return @makeBoundFunction(target, thisValue, boundArgs, length, name);
(function ()
"use strict";
return @createHTML("String.prototype.blink", this, "blink", "", "");
(function ()
"use strict";
return @createHTML("String.prototype.bold", this, "b", "", "");
(function (thisArgument)
"use strict";
var argumentValues = [];
for (var i = 1; i < arguments.length; i++)
@putByValDirect(argumentValues, i-1, arguments[i]);
return this.@apply(thisArgument, argumentValues);
(function (onRejected)
"use strict";
return this.then(@undefined, onRejected);
(function (source) {
"use strict";
return @Promise.@resolve(source).@then(@webAssemblyCompileStreamingInternal);
(function (first)
"use strict";
if (@argumentCount() === 1
&& @isJSArray(this)
&& @tryGetByIdWithWellKnownSymbol(this, "isConcatSpreadable") === @undefined
&& (!@isObject(first) || @tryGetByIdWithWellKnownSymbol(first, "isConcatSpreadable") === @undefined)) {
var result = @concatMemcpy(this, first);
if (result !== null)
return result;
return @tailCallForwardArguments(@concatSlowPath, this);
(function (arg )
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.concat requires that |this| not be null or undefined");
if (@argumentCount() === 1)
return @toString(this) + @toString(arg);
return @tailCallForwardArguments(@stringConcatSlowPath, this);
(function ()
"use strict";
var currentElement = @toObject(this, "Array.prototype.concat requires that |this| not be null or undefined");
var argCount = arguments.length;
var result = @arraySpeciesCreate(currentElement, 0);
var resultIsArray = @isJSArray(result);
var resultIndex = 0;
var argIndex = 0;
do {
var spreadable = @isObject(currentElement) && currentElement.@@isConcatSpreadable;
if ((spreadable === @undefined && @isArray(currentElement)) || spreadable) {
var length = @toLength(currentElement.length);
if (length + resultIndex > @MAX_SAFE_INTEGER)
@throwTypeError("Length exceeded the maximum array length");
if (resultIsArray && @isJSArray(currentElement) && length + resultIndex <= @MAX_ARRAY_INDEX) {
@appendMemcpy(result, currentElement, resultIndex);
resultIndex += length;
} else {
for (var i = 0; i < length; i++) {
if (i in currentElement)
@putByValDirect(result, resultIndex, currentElement[i]);
resultIndex++;
} else {
if (resultIndex >= @MAX_SAFE_INTEGER)
@throwTypeError("Length exceeded the maximum array length");
@putByValDirect(result, resultIndex++, currentElement);
currentElement = arguments[argIndex];
} while (argIndex++ < argCount);
result.length = resultIndex;
return result;
(function (target, start )
"use strict";
var array = @toObject(this, "Array.prototype.copyWithin requires that |this| not be null or undefined");
var length = @toLength(array.length);
var relativeTarget = @toIntegerOrInfinity(target);
var to = (relativeTarget < 0) ? @maxWithPositives(length + relativeTarget, 0) : @minWithMaybeNegativeZeroAndPositive(relativeTarget, length);
var relativeStart = @toIntegerOrInfinity(start);
var from = (relativeStart < 0) ? @maxWithPositives(length + relativeStart, 0) : @minWithMaybeNegativeZeroAndPositive(relativeStart, length);
var relativeEnd;
var end = @argument(2);
if (end === @undefined)
relativeEnd = length;
else
relativeEnd = @toIntegerOrInfinity(end);
var finalValue = (relativeEnd < 0) ? @maxWithPositives(length + relativeEnd, 0) : @minWithMaybeNegativeZeroAndPositive(relativeEnd, length);
var count = @minWithMaybeNegativeZeroAndPositive(finalValue - from, length - to);
var direction = 1;
if (from < to && to < from + count) {
direction = -1;
from = from + count - 1;
to = to + count - 1;
for (var i = 0; i < count; ++i, from += direction, to += direction) {
if (from in array)
array[to] = array[from];
else
delete array[to];
return array;
(function (syncIterator, nextMethod)
"use strict";
if (!@isObject(syncIterator))
@throwTypeError('Only objects can be wrapped by async-from-sync wrapper');
return new @AsyncFromSyncIterator(syncIterator, nextMethod);
(function (func, string, tag, attribute, value)
"use strict";
if (@isUndefinedOrNull(string))
@throwTypeError(`${func} requires that |this| not be null or undefined`);
var S = @toString(string);
var p1 = "<" + tag;
if (attribute) {
var V = @toString(value);
var escapedV = V.@replaceUsingRegExp(/"/g, '&quot;');
p1 = p1 + " " + @toString(attribute) + '="' + escapedV + '"'
var p2 = p1 + ">"
var p3 = p2 + S;
var p4 = p3 + "</" + tag + ">";
return p4;
(function (promise)
"use strict";
@assert(@isPromise(promise));
var alreadyResolved = false;
var resolve = (0,  (resolution) => {
if (alreadyResolved)
return @undefined;
alreadyResolved = true;
return @resolvePromise(promise, resolution);
var reject = (0,  (reason) => {
if (alreadyResolved)
return @undefined;
alreadyResolved = true;
return @rejectPromise(promise, reason);
return { @resolve: resolve, @reject: reject };
(function (onFulfilled, onRejected)
"use strict";
var alreadyResolved = false;
var resolve = (0,  (resolution) => {
if (alreadyResolved)
return @undefined;
alreadyResolved = true;
@resolveWithoutPromise(resolution, onFulfilled, onRejected);
var reject = (0,  (reason) => {
if (alreadyResolved)
return @undefined;
alreadyResolved = true;
@rejectWithoutPromise(reason, onFulfilled, onRejected);
return { @resolve: resolve, @reject: reject };
(function (target, propertyKey)
if (!@isObject(target))
@throwTypeError("Reflect.deleteProperty requires the first argument be an object");
return delete target[propertyKey];
(function (key)
"use strict";
var entry = this.registry.@get(key);
if (!entry || !entry.evaluated)
return null;
var dependencies = entry.dependencies;
var length = dependencies.length;
var result = new @Array(length);
for (var i = 0; i < length; ++i)
result[i] = dependencies[i].key;
return result;
(function (generator, resumeValue, resumeMode)
"use strict";
if (resumeMode === @GeneratorResumeModeReturn && @isSuspendYieldState(generator)) {
var onFulfilled = function(result) { @doAsyncGeneratorBodyCall(generator, result, @GeneratorResumeModeReturn); };
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldSuspendReason, @AsyncGeneratorSuspendReasonAwait);
@awaitValue(generator, resumeValue, onFulfilled);
return;
var value = @undefined;
var state = @getAsyncGeneratorInternalField(generator, @generatorFieldState);
@putAsyncGeneratorInternalField(generator, @generatorFieldState, @AsyncGeneratorStateExecuting);
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldSuspendReason, @AsyncGeneratorSuspendReasonNone);
try {
value = @getAsyncGeneratorInternalField(generator, @generatorFieldNext).@call(@getAsyncGeneratorInternalField(generator, @generatorFieldThis), generator, state, resumeValue, resumeMode, @getAsyncGeneratorInternalField(generator, @generatorFieldFrame));
state = @getAsyncGeneratorInternalField(generator, @generatorFieldState);
if (state === @AsyncGeneratorStateExecuting) {
@putAsyncGeneratorInternalField(generator, @generatorFieldState, @AsyncGeneratorStateCompleted);
state = @AsyncGeneratorStateCompleted;
} catch (error) {
@putAsyncGeneratorInternalField(generator, @generatorFieldState, @AsyncGeneratorStateCompleted);
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldSuspendReason, @AsyncGeneratorSuspendReasonNone);
return @asyncGeneratorReject(generator, error);
var reason = @getAsyncGeneratorInternalField(generator, @asyncGeneratorFieldSuspendReason);
if (reason === @AsyncGeneratorSuspendReasonAwait) {
var onFulfilled = function(result) { @doAsyncGeneratorBodyCall(generator, result, @GeneratorResumeModeNormal); };
@awaitValue(generator, value, onFulfilled);
return;
if (reason === @AsyncGeneratorSuspendReasonYield)
return @asyncGeneratorYield(generator, value, resumeMode);
if (state === @AsyncGeneratorStateCompleted) {
@assert(@getAsyncGeneratorInternalField(generator, @generatorFieldState) == @AsyncGeneratorStateCompleted);
@putAsyncGeneratorInternalField(generator, @asyncGeneratorFieldSuspendReason, @AsyncGeneratorSuspendReasonNone);
return @asyncGeneratorResolve(generator, value, true);
(function (key)
"use strict";
var entry = this.registry.@get(key);
if (entry)
return entry;
entry = @newRegistryEntry(key);
this.registry.@set(key, entry);
return entry;
(function (sourceText)
"use strict";
if (!@isShadowRealm(this))
@throwTypeError("`%ShadowRealm%.evaluate requires that |this| be a ShadowRealm instance");
if (typeof sourceText !== 'string')
@throwTypeError("`%ShadowRealm%.evaluate requires that the |sourceText| argument be a string");
var result = @evalInRealm(this, sourceText)
return @wrap(true, this, result);
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.every requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.every callback must be a function");
var thisArg = @argument(1);
for (var i = 0; i < length; i++) {
if (!(i in array))
continue;
if (!callback.@call(thisArg, array[i], i, array))
return false;
return true;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
var thisArg = @argument(1);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.every callback must be a function");
for (var i = 0; i < length; i++) {
if (!callback.@call(thisArg, this[i], i, this))
return false;
return true;
(function (value )
"use strict";
var array = @toObject(this, "Array.prototype.fill requires that |this| not be null or undefined");
var length = @toLength(array.length);
var relativeStart = @toIntegerOrInfinity(@argument(1));
var k = 0;
if (relativeStart < 0) {
k = length + relativeStart;
if (k < 0)
k = 0;
} else {
k = relativeStart;
if (k > length)
k = length;
var relativeEnd = length;
var end = @argument(2);
if (end !== @undefined)
relativeEnd = @toIntegerOrInfinity(end);
var final = 0;
if (relativeEnd < 0) {
final = length + relativeEnd;
if (final < 0)
final = 0;
} else {
final = relativeEnd;
if (final > length)
final = length;
for (; k < final; k++)
array[k] = value;
return array;
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.filter requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.filter callback must be a function");
var thisArg = @argument(1);
var result = @arraySpeciesCreate(array, 0);
var nextIndex = 0;
for (var i = 0; i < length; i++) {
if (!(i in array))
continue;
var current = array[i]
if (callback.@call(thisArg, current, i, array)) {
@putByValDirect(result, nextIndex, current);
++nextIndex;
return result;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.filter callback must be a function");
var thisArg = @argument(1);
var kept = [];
for (var i = 0; i < length; i++) {
var value = this[i];
if (callback.@call(thisArg, value, i, this))
@arrayPush(kept, value);
var length = kept.length;
var constructor = @typedArraySpeciesConstructor(this);
var result = new constructor(length);
if (@typedArrayLength(result) < length)
@throwTypeError("TypedArray.prototype.filter constructed typed array of insufficient length");
if (@typedArrayContentType(this) !== @typedArrayContentType(result))
@throwTypeError("TypedArray.prototype.filter constructed typed array of different content type from |this|");
for (var i = 0; i < length; i++)
result[i] = kept[i];
return result;
(function (onFinally)
"use strict";
if (!@isObject(this))
@throwTypeError("|this| is not an object");
var constructor = @speciesConstructor(this, @Promise);
@assert(@isConstructor(constructor));
var thenFinally;
var catchFinally;
if (!@isCallable(onFinally)) {
thenFinally = onFinally;
catchFinally = onFinally;
} else {
thenFinally = (0,  (value) => {
@assert(@isCallable(onFinally));
var result = onFinally();
@assert(@isConstructor(constructor));
var promise = @promiseResolve(constructor, result);
return promise.then(() => value);
catchFinally = (0,  (reason) => {
@assert(@isCallable(onFinally));
var result = onFinally();
@assert(@isConstructor(constructor));
var promise = @promiseResolve(constructor, result);
return promise.then(() => { throw reason; });
return this.then(thenFinally, catchFinally);
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.find requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.find callback must be a function");
var thisArg = @argument(1);
for (var i = 0; i < length; i++) {
var kValue = array[i];
if (callback.@call(thisArg, kValue, i, array))
return kValue;
return @undefined;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
var thisArg = @argument(1);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.find callback must be a function");
for (var i = 0; i < length; i++) {
var elem = this[i];
if (callback.@call(thisArg, elem, i, this))
return elem;
return @undefined;
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.findIndex requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.findIndex callback must be a function");
var thisArg = @argument(1);
for (var i = 0; i < length; i++) {
if (callback.@call(thisArg, array[i], i, array))
return i;
return -1;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
var thisArg = @argument(1);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.findIndex callback must be a function");
for (var i = 0; i < length; i++) {
if (callback.@call(thisArg, this[i], i, this))
return i;
return -1;
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.findLast requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.findLast callback must be a function");
var thisArg = @argument(1);
for (var i = length - 1; i >= 0; i--) {
var element = array[i];
if (callback.@call(thisArg, element, i, array))
return element;
return @undefined;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
var thisArg = @argument(1);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.findLast callback must be a function");
for (var i = length - 1; i >= 0; i--) {
var element = this[i];
if (callback.@call(thisArg, element, i, this))
return element;
return @undefined;
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.findLastIndex requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.findLastIndex callback must be a function");
var thisArg = @argument(1);
for (var i = length - 1; i >= 0; i--) {
if (callback.@call(thisArg, array[i], i, array))
return i;
return -1;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
var thisArg = @argument(1);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.findLastIndex callback must be a function");
for (var i = length - 1; i >= 0; i--) {
if (callback.@call(thisArg, this[i], i, this))
return i;
return -1;
(function ()
"use strict";
return @createHTML("String.prototype.fixed", this, "tt", "", "");
(function ()
"use strict";
var array = @toObject(this, "Array.prototype.flat requires that |this| not be null or undefined");
var length = @toLength(array.length);
var depthNum = 1;
var depth = @argument(0);
if (depth !== @undefined)
depthNum = @toIntegerOrInfinity(depth);
var result = @arraySpeciesCreate(array, 0);
@flatIntoArray(result, array, length, 0, depthNum);
return result;
(function (target, source, sourceLength, targetIndex, depth)
"use strict";
for (var sourceIndex = 0; sourceIndex < sourceLength; ++sourceIndex) {
if (sourceIndex in source) {
var element = source[sourceIndex];
if (depth > 0 && @isArray(element))
targetIndex = @flatIntoArray(target, element, @toLength(element.length), targetIndex, depth - 1);
else {
if (targetIndex >= @MAX_SAFE_INTEGER)
@throwTypeError("flatten array exceeds 2**53 - 1");
@putByValDirect(target, targetIndex, element);
++targetIndex;
return targetIndex;
(function (target, source, sourceLength, targetIndex, callback, thisArg)
"use strict";
for (var sourceIndex = 0; sourceIndex < sourceLength; ++sourceIndex) {
if (sourceIndex in source) {
var element = callback.@call(thisArg, source[sourceIndex], sourceIndex, source);
if (@isArray(element))
targetIndex = @flatIntoArray(target, element, @toLength(element.length), targetIndex, 0);
else {
if (targetIndex >= @MAX_SAFE_INTEGER)
@throwTypeError("flatten array exceeds 2**53 - 1");
@putByValDirect(target, targetIndex, element);
++targetIndex;
return target;
(function (callback)
"use strict";
var array = @toObject(this, "Array.prototype.flatMap requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.flatMap callback must be a function");
var thisArg = @argument(1);
var result = @arraySpeciesCreate(array, 0);
return @flatIntoArrayWithCallback(result, array, length, 0, callback, thisArg);
(function (color)
"use strict";
return @createHTML("String.prototype.fontcolor", this, "font", "color", color);
(function (size)
"use strict";
return @createHTML("String.prototype.fontsize", this, "font", "size", size);
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.forEach requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.forEach callback must be a function");
var thisArg = @argument(1);
for (var i = 0; i < length; i++) {
if (i in array)
callback.@call(thisArg, array[i], i, array);
(function (callback )
"use strict";
if (!@isMap(this))
@throwTypeError("Map operation called on non-Map object");
if (!@isCallable(callback))
@throwTypeError("Map.prototype.forEach callback must be a function");
var thisArg = @argument(1);
var bucket = @mapBucketHead(this);
do {
bucket = @mapBucketNext(bucket);
if (bucket === @sentinelMapBucket)
break;
callback.@call(thisArg, @mapBucketValue(bucket), @mapBucketKey(bucket), this);
} while (true);
(function (callback )
"use strict";
if (!@isSet(this))
@throwTypeError("Set operation called on non-Set object");
if (!@isCallable(callback))
@throwTypeError("Set.prototype.forEach callback must be a function");
var thisArg = @argument(1);
var bucket = @setBucketHead(this);
do {
bucket = @setBucketNext(bucket);
if (bucket === @sentinelSetBucket)
break;
var key = @setBucketKey(bucket);
callback.@call(thisArg, key, key, this);
} while (true);
(function (callback )
"use strict";
var length = @typedArrayLength(this);
var thisArg = @argument(1);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.forEach callback must be a function");
for (var i = 0; i < length; i++)
callback.@call(thisArg, this[i], i, this);
(function (promise, value)
"use strict";
@assert(@isPromise(promise));
if ((@getPromiseInternalField(promise, @promiseFieldFlags) & @promiseStateMask) === @promiseStatePending)
@fulfillPromise(promise, value);
(function (items )
"use strict";
var mapFn = @argument(1);
var thisArg;
if (mapFn !== @undefined) {
if (!@isCallable(mapFn))
@throwTypeError("Array.from requires that the second argument, when provided, be a function");
thisArg = @argument(2);
var arrayLike = @toObject(items, "Array.from requires an array-like object - not null or undefined");
var iteratorMethod = items.@@iterator;
if (!@isUndefinedOrNull(iteratorMethod)) {
if (!@isCallable(iteratorMethod))
@throwTypeError("Array.from requires that the property of the first argument, items[Symbol.iterator], when exists, be a function");
var result = this !== @Array && @isConstructor(this) ? new this() : [];
var k = 0;
var iterator = iteratorMethod.@call(items);
var wrapper = {}
wrapper.@@iterator = function() { return iterator; };
for (var value of wrapper) {
if (k >= @MAX_SAFE_INTEGER)
@throwTypeError("Length exceeded the maximum array length");
if (mapFn)
@putByValDirect(result, k, thisArg === @undefined ? mapFn(value, k) : mapFn.@call(thisArg, value, k));
else
@putByValDirect(result, k, value);
k += 1;
result.length = k;
return result;
var arrayLikeLength = @toLength(arrayLike.length);
var result = this !== @Array && @isConstructor(this) ? new this(arrayLikeLength) : @newArrayWithSize(arrayLikeLength);
var k = 0;
while (k < arrayLikeLength) {
var value = arrayLike[k];
if (mapFn)
@putByValDirect(result, k, thisArg === @undefined ? mapFn(value, k) : mapFn.@call(thisArg, value, k));
else
@putByValDirect(result, k, value);
k += 1;
result.length = arrayLikeLength;
return result;
(function (items )
"use strict";
if (!@isConstructor(this))
@throwTypeError("TypedArray.from requires |this| to be a constructor");
var mapFn = @argument(1);
var thisArg;
if (mapFn !== @undefined) {
if (!@isCallable(mapFn))
@throwTypeError("TypedArray.from requires that the second argument, when provided, be a function");
thisArg = @argument(2);
var arrayLike = @toObject(items, "TypedArray.from requires an array-like object - not null or undefined");
var iteratorMethod = items.@@iterator;
if (!@isUndefinedOrNull(iteratorMethod)) {
if (!@isCallable(iteratorMethod))
@throwTypeError("TypedArray.from requires that the property of the first argument, items[Symbol.iterator], when exists, be a function");
var accumulator = [];
var count = 0;
var iterator = iteratorMethod.@call(items);
var wrapper = {};
wrapper.@@iterator = function() { return iterator; }
for (var value of wrapper) {
@putByValDirect(accumulator, count, value);
count++;
var result = new this(count);
if (@typedArrayLength(result) < count)
@throwTypeError("TypedArray.from constructed typed array of insufficient length");
for (var k = 0; k < count; k++) {
var value = accumulator[k];
if (mapFn)
result[k] = thisArg === @undefined ? mapFn(value, k) : mapFn.@call(thisArg, value, k);
else
result[k] = value;
return result;
var arrayLikeLength = @toLength(arrayLike.length);
var result = new this(arrayLikeLength);
if (@typedArrayLength(result) < arrayLikeLength)
@throwTypeError("TypedArray.from constructed typed array of insufficient length");
for (var k = 0; k < arrayLikeLength; k++) {
var value = arrayLike[k];
if (mapFn)
result[k] = thisArg === @undefined ? mapFn(value, k) : mapFn.@call(thisArg, value, k);
else
result[k] = value;
return result;
(function (iterable)
"use strict";
var object = {};
for (var entry of iterable) {
if (!@isObject(entry))
@throwTypeError("Object.fromEntries requires the first iterable parameter yields objects");
var key = entry[0];
var value = entry[1];
@putByValDirect(object, key, value);
return object;
(function (entry, source)
"use strict";
if (!entry.fetch)
entry.fetch = @newPromiseCapability(@InternalPromise).@promise;
this.forceFulfillPromise(entry.fetch, source);
@setStateToMax(entry, @ModuleInstantiate);
(function (promise, value)
"use strict";
@assert(@isPromise(promise));
@assert((@getPromiseInternalField(promise, @promiseFieldFlags) & @promiseStateMask) == @promiseStatePending);
var flags = @getPromiseInternalField(promise, @promiseFieldFlags);
var reactions = @getPromiseInternalField(promise, @promiseFieldReactionsOrResult);
@putPromiseInternalField(promise, @promiseFieldReactionsOrResult, value);
@putPromiseInternalField(promise, @promiseFieldFlags, flags | @promiseStateFulfilled);
@triggerPromiseReactions(@promiseStateFulfilled, reactions, value);
(function (promise, value)
@assert(@isPromise(promise));
var flags = @getPromiseInternalField(promise, @promiseFieldFlags);
if (flags & @promiseFlagsIsFirstResolvingFunctionCalled)
return;
@putPromiseInternalField(promise, @promiseFieldFlags, flags | @promiseFlagsIsFirstResolvingFunctionCalled);
return @fulfillPromise(promise, value);
(function (value, onFulfilled, onRejected)
"use strict";
@enqueueJob(@promiseReactionJobWithoutPromise, onFulfilled, value);
(function (generator, state, generatorThis, sentValue, value, resumeMode)
"use strict";
var done = state === @GeneratorStateCompleted;
if (!done) {
try {
@putGeneratorInternalField(generator, @generatorFieldState, @GeneratorStateExecuting);
value = @getGeneratorInternalField(generator, @generatorFieldNext).@call(generatorThis, generator, state, sentValue, resumeMode, @getGeneratorInternalField(generator, @generatorFieldFrame));
if (@getGeneratorInternalField(generator, @generatorFieldState) === @GeneratorStateExecuting) {
@putGeneratorInternalField(generator, @generatorFieldState, @GeneratorStateCompleted);
done = true;
} catch (error) {
@putGeneratorInternalField(generator, @generatorFieldState, @GeneratorStateCompleted);
throw error;
return { value, done };
(function (matched, str, position, captures, namedCaptures, replacement)
"use strict";
var matchLength = matched.length;
var stringLength = str.length;
var tailPos = position + matchLength;
var m = captures.length;
var replacementLength = replacement.length;
var result = "";
var lastStart = 0;
for (var start = 0; start = @stringIndexOfInternal.@call(replacement, "$", lastStart), start !== -1; lastStart = start) {
if (start - lastStart > 0)
result = result + @stringSubstringInternal.@call(replacement, lastStart, start);
start++;
if (start >= replacementLength)
result = result + "$";
else {
var ch = replacement[start];
switch (ch)
case "$":
result = result + "$";
start++;
break;
case "&":
result = result + matched;
start++;
break;
case "`":
if (position > 0)
result = result + @stringSubstringInternal.@call(str, 0, position);
start++;
break;
case "'":
if (tailPos < stringLength)
result = result + @stringSubstringInternal.@call(str, tailPos);
start++;
break;
case "<":
if (namedCaptures !== @undefined) {
var groupNameStartIndex = start + 1;
var groupNameEndIndex = @stringIndexOfInternal.@call(replacement, ">", groupNameStartIndex);
if (groupNameEndIndex !== -1) {
var groupName = @stringSubstringInternal.@call(replacement, groupNameStartIndex, groupNameEndIndex);
var capture = namedCaptures[groupName];
if (capture !== @undefined)
result = result + @toString(capture);
start = groupNameEndIndex + 1;
break;
result = result + "$<";
start++;
break;
default:
var chCode = ch.@charCodeAt(0);
if (chCode >= 0x30 && chCode <= 0x39) {
var originalStart = start - 1;
start++;
var n = chCode - 0x30;
if (n > m) {
result = result + @stringSubstringInternal.@call(replacement, originalStart, start);
break;
if (start < replacementLength) {
var nextChCode = replacement.@charCodeAt(start);
if (nextChCode >= 0x30 && nextChCode <= 0x39) {
var nn = 10 * n + nextChCode - 0x30;
if (nn <= m) {
n = nn;
start++;
if (n == 0) {
result = result + @stringSubstringInternal.@call(replacement, originalStart, start);
break;
var capture = captures[n - 1];
if (capture !== @undefined)
result = result + capture;
} else
result = result + "$";
break;
return result + @stringSubstringInternal.@call(replacement, lastStart);
(function (callback )
var array = @toObject(this, "Array.prototype.groupBy requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.groupBy callback must be a function");
var thisArg = @argument(1);
var groups = @Object.@create(null);
for (var i = 0; i < length; ++i) {
var value = array[i];
var key = @toPropertyKey(callback.@call(thisArg, value, i, array));
var group = groups[key];
if (!group) {
group = [];
@putByValDirect(groups, key, group);
@putByValDirect(group, group.length, value);
return groups;
(function (callback )
var array = @toObject(this, "Array.prototype.groupByToMap requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.groupByToMap callback must be a function");
var thisArg = @argument(1);
var groups = new @Map;
for (var i = 0; i < length; ++i) {
var value = array[i];
var key = callback.@call(thisArg, value, i, array);
var group = groups.@get(key);
if (!group) {
group = [];
groups.@set(key, group);
@putByValDirect(group, group.length, value);
return groups;
(function (target, propertyKey)
"use strict";
if (!@isObject(target))
@throwTypeError("Reflect.has requires the first argument be an object");
return propertyKey in target;
(function (regexp)
"use strict";
if (!@isRegExpObject(regexp))
return true;
var regexpExec = @tryGetById(regexp, "exec");
if (regexpExec !== @regExpBuiltinExec)
return true;
var regexpGlobal = @tryGetById(regexp, "global");
if (regexpGlobal !== @regExpProtoGlobalGetter)
return true;
var regexpUnicode = @tryGetById(regexp, "unicode");
if (regexpUnicode !== @regExpProtoUnicodeGetter)
return true;
return typeof regexp.lastIndex !== "number";
(function (regexp)
"use strict";
if (!@isRegExpObject(regexp))
return true;
var regexpExec = @tryGetById(regexp, "exec");
if (regexpExec !== @regExpBuiltinExec)
return true;
var regexpFlags = @tryGetById(regexp, "flags");
if (regexpFlags !== @regExpProtoFlagsGetter)
return true;
var regexpGlobal = @tryGetById(regexp, "global");
if (regexpGlobal !== @regExpProtoGlobalGetter)
return true;
var regexpIgnoreCase = @tryGetById(regexp, "ignoreCase");
if (regexpIgnoreCase !== @regExpProtoIgnoreCaseGetter)
return true;
var regexpMultiline = @tryGetById(regexp, "multiline");
if (regexpMultiline !== @regExpProtoMultilineGetter)
return true;
var regexpSticky = @tryGetById(regexp, "sticky");
if (regexpSticky !== @regExpProtoStickyGetter)
return true;
var regexpUnicode = @tryGetById(regexp, "unicode");
if (regexpUnicode !== @regExpProtoUnicodeGetter)
return true;
var regexpSource = @tryGetById(regexp, "source");
if (regexpSource !== @regExpProtoSourceGetter)
return true;
var regexpSymbolMatch = @tryGetByIdWithWellKnownSymbol(regexp, "match");
if (regexpSymbolMatch !== @regExpPrototypeSymbolMatch)
return true;
return typeof regexp.lastIndex !== "number";
(function (regexp, replacer)
"use strict";
if (!@isRegExpObject(regexp))
return true;
if (replacer !== @regExpPrototypeSymbolReplace)
return true;
var regexpExec = @tryGetById(regexp, "exec");
if (regexpExec !== @regExpBuiltinExec)
return true;
var regexpGlobal = @tryGetById(regexp, "global");
if (regexpGlobal !== @regExpProtoGlobalGetter)
return true;
var regexpUnicode = @tryGetById(regexp, "unicode");
if (regexpUnicode !== @regExpProtoUnicodeGetter)
return true;
return typeof regexp.lastIndex !== "number";
(function (specifier, exportName)
"use strict";
if (!@isShadowRealm(this))
@throwTypeError("`%ShadowRealm%.importValue requires that |this| be a ShadowRealm instance");
var exportNameString = @toString(exportName);
var specifierString = @toString(specifier);
var lookupBinding = (module) => {
var lookup = module[exportNameString]
if (lookup === @undefined)
@throwTypeError("%ShadowRealm%.importValue requires |exportName| to exist in the |specifier|");
return @wrap(true, this, lookup);
var crossRealmThrow = (error) => {
@throwTypeError(@toString(error));
return @importInRealm(this, specifierString).@then(lookupBinding, crossRealmThrow);
(function (searchElement )
"use strict";
var array = @toObject(this, "Array.prototype.includes requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (length === 0)
return false;
var fromIndex = 0;
var from = @argument(1);
if (from !== @undefined)
fromIndex = @toIntegerOrInfinity(from);
var index;
if (fromIndex >= 0)
index = fromIndex;
else
index = length + fromIndex;
if (index < 0)
index = 0;
var currentElement;
for (; index < length; ++index) {
currentElement = array[index];
if (searchElement === currentElement || (searchElement !== searchElement && currentElement !== currentElement))
return true;
return false;
(function (source) {
"use strict";
var importObject = @argument(1);
return @Promise.@resolve(source).@then((source) => {
return @webAssemblyInstantiateStreamingInternal(source, importObject);
(function (array)
"use strict";
var constructor = @InternalPromise;
var promise = @createPromise(constructor,  true);
var reject = (reason) => {
return @rejectPromiseWithFirstResolvingFunctionCallCheck(promise, reason);
var values = [];
var index = 0;
var remainingElementsCount = 0;
function newResolveElement(index)
var alreadyCalled = false;
return function (argument)
if (alreadyCalled)
return @undefined;
alreadyCalled = true;
@putByValDirect(values, index, argument);
--remainingElementsCount;
if (remainingElementsCount === 0)
return @fulfillPromiseWithFirstResolvingFunctionCallCheck(promise, values);
return @undefined;
try {
if (array.length === 0)
@fulfillPromiseWithFirstResolvingFunctionCallCheck(promise, values);
else {
for (var index = 0, length = array.length; index < length; ++index) {
var value = array[index];
@putByValDirect(values, index, @undefined);
++remainingElementsCount;
@resolveWithoutPromise(value, newResolveElement(index), reject);
} catch (error) {
reject(error);
return promise;
(function (array)
"use strict";
if (@isJSArray(array) || @isDerivedArray(array))
return true;
if (!@isProxyObject(array))
return false;
return @isArraySlow(array);
(function (generator)
"use strict";
var state = @getAsyncGeneratorInternalField(generator, @generatorFieldState);
var reason = @getAsyncGeneratorInternalField(generator, @asyncGeneratorFieldSuspendReason);
return (state > 0 && reason === @AsyncGeneratorSuspendReasonNone)
|| state === @AsyncGeneratorStateExecuting
|| reason === @AsyncGeneratorSuspendReasonAwait;
(function (value)
"use strict";
var numberValue = @toNumber(value);
if (numberValue !== numberValue)
return false;
return numberValue !== @Infinity && numberValue !== -@Infinity;
(function (value)
"use strict";
if (typeof value !== "number")
return false;
if (value !== value)
return false;
return value !== @Infinity && value !== -@Infinity;
(function (value)
"use strict";
var numberValue = @toNumber(value);
return numberValue !== numberValue;
(function (value)
"use strict";
return value !== value;
(function (generator)
"use strict";
var state = @getAsyncGeneratorInternalField(generator, @generatorFieldState);
return (state > 0 && @getAsyncGeneratorInternalField(generator, @asyncGeneratorFieldSuspendReason) === @AsyncGeneratorSuspendReasonYield)
|| state === @AsyncGeneratorStateSuspendedYield;
(function ()
"use strict";
return @createHTML("String.prototype.italics", this, "i", "", "");
(function (entry, fetcher)
"use strict";
if (!entry.linkSucceeded)
throw entry.linkError;
if (entry.state === @ModuleReady)
return;
@setStateToMax(entry, @ModuleReady);
try {
var hasAsyncDependency = false;
var dependencies = entry.dependencies;
for (var i = 0, length = dependencies.length; i < length; ++i) {
var dependency = dependencies[i];
this.link(dependency, fetcher);
hasAsyncDependency ||= dependency.isAsync;
entry.isAsync = this.moduleDeclarationInstantiation(entry.module, fetcher) || hasAsyncDependency;
} catch (error) {
entry.linkSucceeded = false;
entry.linkError = error;
throw error;
(function (url)
"use strict";
return @createHTML("String.prototype.link", this, "a", "href", url)
(function (key, fetcher)
"use strict";
var entry = this.ensureRegistered(key);
if (entry.state < @ModuleLink)
@throwTypeError("Requested module is not instantiated yet.");
this.link(entry, fetcher);
return this.moduleEvaluation(entry, fetcher);
(async function (moduleName, parameters, fetcher)
"use strict";
var key = await this.loadModule(moduleName, parameters, fetcher);
return await this.linkAndEvaluateModule(key, fetcher);
(async function (moduleName, parameters, fetcher)
"use strict";
var key = await this.resolve(moduleName, @undefined, fetcher);
var entry = await this.requestSatisfy(this.ensureRegistered(key), parameters, fetcher, new @Set);
return entry.key;
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.map requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.map callback must be a function");
var thisArg = @argument(1);
var result = @arraySpeciesCreate(array, length);
for (var i = 0; i < length; i++) {
if (!(i in array))
continue;
var mappedValue = callback.@call(thisArg, array[i], i, array);
@putByValDirect(result, i, mappedValue);
return result;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.map callback must be a function");
var thisArg = @argument(1);
var constructor = @typedArraySpeciesConstructor(this);
var result = new constructor(length);
if (@typedArrayLength(result) < length)
@throwTypeError("TypedArray.prototype.map constructed typed array of insufficient length");
if (@typedArrayContentType(this) !== @typedArrayContentType(result))
@throwTypeError("TypedArray.prototype.map constructed typed array of different content type from |this|");
for (var i = 0; i < length; i++) {
var mappedValue = callback.@call(thisArg, this[i], i, this);
result[i] = mappedValue;
return result;
(function (bucket, kind)
"use strict";
var value;
bucket = @mapBucketNext(bucket);
@putMapIteratorInternalField(this, @mapIteratorFieldMapBucket, bucket);
var done = bucket === @sentinelMapBucket;
if (!done) {
var key = @mapBucketKey(bucket);
value = @mapBucketValue(bucket);
if (kind === @iterationKindEntries)
value = [ key, value ]
else if (kind === @iterationKindKey)
value = key;
return { value, done };
(function (strArg)
"use strict";
if (!@isObject(this))
@throwTypeError("RegExp.prototype.@@match requires that |this| be an Object");
var str = @toString(strArg);
if (!@hasObservableSideEffectsForRegExpMatch(this))
return @regExpMatchFast.@call(this, str);
return @matchSlow(this, str);
(function (regexp)
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.match requires that |this| not be null or undefined");
if (!@isUndefinedOrNull(regexp)) {
var matcher = regexp.@@match;
if (!@isUndefinedOrNull(matcher))
return matcher.@call(regexp, this);
var thisString = @toString(this);
var createdRegExp = @regExpCreate(regexp, @undefined);
return createdRegExp.@@match(thisString);
(function (strArg)
"use strict";
var regExp = this;
if (!@isObject(regExp))
@throwTypeError("RegExp.prototype.@@matchAll requires |this| to be an Object");
var string = @toString(strArg);
var Matcher = @speciesConstructor(regExp, @RegExp);
var flags = @toString(regExp.flags);
var matcher = new Matcher(regExp, flags);
matcher.lastIndex = @toLength(regExp.lastIndex);
var global = @stringIncludesInternal.@call(flags, "g");
var fullUnicode = @stringIncludesInternal.@call(flags, "u");
return new @RegExpStringIterator(matcher, string, global, fullUnicode);
(function (arg)
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.matchAll requires |this| not to be null nor undefined");
if (!@isUndefinedOrNull(arg)) {
if (@isRegExp(arg) && !@stringIncludesInternal.@call(@toString(arg.flags), "g"))
@throwTypeError("String.prototype.matchAll argument must not be a non-global regular expression");
var matcher = arg.@@matchAll;
if (!@isUndefinedOrNull(matcher))
return matcher.@call(arg, this);
var string = @toString(this);
var regExp = @regExpCreate(arg, "g");
return regExp.@@matchAll(string);
(function (regexp, str)
"use strict";
if (!regexp.global)
return @regExpExec(regexp, str);
var unicode = regexp.unicode;
regexp.lastIndex = 0;
var resultList = [];
var maximumReasonableMatchSize = 100000000;
while (true) {
var result = @regExpExec(regexp, str);
if (result === null) {
if (resultList.length === 0)
return null;
return resultList;
if (resultList.length > maximumReasonableMatchSize)
@throwOutOfMemoryError();
var resultString = @toString(result[0]);
if (!resultString.length)
regexp.lastIndex = @advanceStringIndex(str, regexp.lastIndex, unicode);
@arrayPush(resultList, resultString);
(function (a, b)
"use strict";
return (a < b) ? b : a;
(function (maybeNegativeZero, positive)
"use strict";
return (maybeNegativeZero < positive) ? maybeNegativeZero : positive;
(function (entry, fetcher)
"use strict";
if (entry.evaluated)
return;
entry.evaluated = true;
var dependencies = entry.dependencies;
if (!entry.isAsync) {
for (var i = 0, length = dependencies.length; i < length; ++i) {
var dependency = dependencies[i];
@assert(!dependency.isAsync);
this.moduleEvaluation(dependency, fetcher);
this.evaluate(entry.key, entry.module, fetcher);
} else
return this.asyncModuleEvaluation(entry, fetcher, dependencies);
(function (error)
"use strict";
var promise = @newPromise();
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, error);
@putPromiseInternalField(promise, @promiseFieldFlags, @getPromiseInternalField(promise, @promiseFieldFlags) | @promiseFlagsIsHandled);
return promise;
(function (constructor)
"use strict";
if (constructor === @Promise) {
var promise = @newPromise();
var capturedPromise = promise;
function @resolve(resolution) {
return @resolvePromiseWithFirstResolvingFunctionCallCheck(capturedPromise, resolution);
function @reject(reason) {
return @rejectPromiseWithFirstResolvingFunctionCallCheck(capturedPromise, reason);
return { @resolve, @reject, @promise: promise };
return @newPromiseCapabilitySlow(constructor);
(function (constructor)
var promiseCapability = {
@resolve: @undefined,
@reject: @undefined,
@promise: @undefined,
var promise = new constructor((resolve, reject) => {
if (promiseCapability.@resolve !== @undefined)
@throwTypeError("resolve function is already set");
if (promiseCapability.@reject !== @undefined)
@throwTypeError("reject function is already set");
promiseCapability.@resolve = resolve;
promiseCapability.@reject = reject;
if (!@isCallable(promiseCapability.@resolve))
@throwTypeError("executor did not take a resolve function");
if (!@isCallable(promiseCapability.@reject))
@throwTypeError("executor did not take a reject function");
promiseCapability.@promise = promise;
return promiseCapability;
(function (key)
"use strict";
return {
key: key,
state: @ModuleFetch,
fetch: @undefined,
instantiate: @undefined,
satisfy: @undefined,
dependencies: [],
module: @undefined,
linkError: @undefined,
linkSucceeded: true,
evaluated: false,
then: @undefined,
isAsync: false,
(function ()
"use strict";
if (!@isArrayIterator(this))
@throwTypeError("%ArrayIteratorPrototype%.next requires that |this| be an Array Iterator instance");
var array = @getArrayIteratorInternalField(this, @arrayIteratorFieldIteratedObject);
if (@isTypedArrayView(array) && @isDetached(array))
@throwTypeError("Underlying ArrayBuffer has been detached from the view");
var kind = @getArrayIteratorInternalField(this, @arrayIteratorFieldKind);
return @arrayIteratorNextHelper.@call(this, array, kind);
(function (value)
"use strict";
var promise = @newPromise();
if (!@isObject(this) || !@isObject(@getByIdDirectPrivate(this, "syncIterator"))) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, @makeTypeError('Iterator is not an object.'));
return promise;
var syncIterator = @getByIdDirectPrivate(this, "syncIterator");
var nextMethod = @getByIdDirectPrivate(this, "nextMethod");
try {
var nextResult = @argumentCount() === 0 ? nextMethod.@call(syncIterator) : nextMethod.@call(syncIterator, value);
var nextDone = !!nextResult.done;
var nextValue = nextResult.value;
@resolveWithoutPromise(nextValue,
function (result) { @resolvePromiseWithFirstResolvingFunctionCallCheck(promise, { value: result, done: nextDone }); },
function (error) { @rejectPromiseWithFirstResolvingFunctionCallCheck(promise, error); });
} catch (e) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, e);
return promise;
(function (value)
"use strict";
return @asyncGeneratorEnqueue(this, value, @GeneratorResumeModeNormal);
(function (value)
"use strict";
if (!@isGenerator(this))
@throwTypeError("|this| should be a generator");
var state = @getGeneratorInternalField(this, @generatorFieldState);
if (state === @GeneratorStateExecuting)
@throwTypeError("Generator is executing");
return @generatorResume(this, state, @getGeneratorInternalField(this, @generatorFieldThis), value, @undefined, @GeneratorResumeModeNormal);
(function ()
"use strict";
if (!@isMapIterator(this))
@throwTypeError("%MapIteratorPrototype%.next requires that |this| be an Map Iterator instance");
var bucket = @getMapIteratorInternalField(this, @mapIteratorFieldMapBucket);
var kind = @getMapIteratorInternalField(this, @mapIteratorFieldKind);
return @mapIteratorNext.@call(this, bucket, kind);
(function ()
"use strict";
if (!@isObject(this))
@throwTypeError("%RegExpStringIteratorPrototype%.next requires |this| to be an Object");
var done = @getByIdDirectPrivate(this, "regExpStringIteratorDone");
if (done === @undefined)
@throwTypeError("%RegExpStringIteratorPrototype%.next requires |this| to be an RegExp String Iterator instance");
if (done)
return { value: @undefined, done: true };
var regExp = @getByIdDirectPrivate(this, "regExpStringIteratorRegExp");
var string = @getByIdDirectPrivate(this, "regExpStringIteratorString");
var global = @getByIdDirectPrivate(this, "regExpStringIteratorGlobal");
var fullUnicode = @getByIdDirectPrivate(this, "regExpStringIteratorUnicode");
var match = @regExpExec(regExp, string);
if (match === null) {
@putByIdDirectPrivate(this, "regExpStringIteratorDone", true);
return { value: @undefined, done: true };
if (global) {
var matchStr = @toString(match[0]);
if (matchStr === "") {
var thisIndex = @toLength(regExp.lastIndex);
regExp.lastIndex = @advanceStringIndex(string, thisIndex, fullUnicode);
} else
@putByIdDirectPrivate(this, "regExpStringIteratorDone", true);
return { value: match, done: false };
(function ()
"use strict";
if (!@isSetIterator(this))
@throwTypeError("%SetIteratorPrototype%.next requires that |this| be a Set Iterator instance");
var bucket = @getSetIteratorInternalField(this, @setIteratorFieldSetBucket);
var kind = @getSetIteratorInternalField(this, @setIteratorFieldKind);
return @setIteratorNext.@call(this, bucket, kind);
(function ()
"use strict";
if (!@isStringIterator(this))
@throwTypeError("%StringIteratorPrototype%.next requires that |this| be a String Iterator instance");
var done = true;
var value = @undefined;
var position = @getStringIteratorInternalField(this, @stringIteratorFieldIndex);
if (position !== -1) {
var string = @getStringIteratorInternalField(this, @stringIteratorFieldIteratedString);
var length = string.length >>> 0;
if (position >= length)
@putStringIteratorInternalField(this, @stringIteratorFieldIndex, -1);
else {
done = false;
var first = string.@charCodeAt(position);
if (first < 0xD800 || first > 0xDBFF || position + 1 === length)
value = string[position];
else {
var second = string.@charCodeAt(position + 1);
if (second < 0xDC00 || second > 0xDFFF)
value = string[position];
else
value = string[position] + string[position + 1];
@putStringIteratorInternalField(this, @stringIteratorFieldIndex, position + value.length);
return { value, done };
(function ()
"use strict";
var length = arguments.length;
var array = this !== @Array && @isConstructor(this) ? new this(length) : @newArrayWithSize(length);
for (var k = 0; k < length; ++k)
@putByValDirect(array, k, arguments[k]);
array.length = length;
return array;
(function ()
"use strict";
var len = arguments.length;
if (!@isConstructor(this))
@throwTypeError("TypedArray.of requires |this| to be a constructor");
var result = new this(len);
if (@typedArrayLength(result) < len)
@throwTypeError("TypedArray.of constructed typed array of insufficient length");
for (var i = 0; i < len; i++)
result[i] = arguments[i];
return result;
(function (maxLength)
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.padEnd requires that |this| not be null or undefined");
var string = @toString(this);
maxLength = @toLength(maxLength);
var stringLength = string.length;
if (maxLength <= stringLength)
return string;
var filler;
var fillString = @argument(1);
if (fillString === @undefined)
filler = " ";
else {
filler = @toString(fillString);
if (filler === "")
return string;
if (maxLength > @MAX_STRING_LENGTH)
@throwOutOfMemoryError();
var fillLength = maxLength - stringLength;
var truncatedStringFiller;
if (filler.length === 1)
truncatedStringFiller = @repeatCharacter(filler, fillLength);
else
truncatedStringFiller = @repeatCharactersSlowPath(filler, fillLength);
return string + truncatedStringFiller;
(function (maxLength)
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.padStart requires that |this| not be null or undefined");
var string = @toString(this);
maxLength = @toLength(maxLength);
var stringLength = string.length;
if (maxLength <= stringLength)
return string;
var filler;
var fillString = @argument(1);
if (fillString === @undefined)
filler = " ";
else {
filler = @toString(fillString);
if (filler === "")
return string;
if (maxLength > @MAX_STRING_LENGTH)
@throwOutOfMemoryError();
var fillLength = maxLength - stringLength;
var truncatedStringFiller;
if (filler.length === 1)
truncatedStringFiller = @repeatCharacter(filler, fillLength);
else
truncatedStringFiller = @repeatCharactersSlowPath(filler, fillLength);
return truncatedStringFiller + string;
(function (iterable)
"use strict";
var result = [];
if (@isUndefinedOrNull(iterable))
@throwTypeError('Spread syntax requires ...iterable not be null or undefined');
var iteratorMethod = iterable.@@iterator;
if (!@isCallable(iteratorMethod))
@throwTypeError('Spread syntax requires ...iterable[Symbol.iterator] to be a function');
var iterator = iteratorMethod.@call(iterable);
var next = iterator.next;
var item;
var index = 0;
while (true) {
item = next.@call(iterator);
if (!@isObject(item))
@throwTypeError("Iterator result interface is not an object");
if (item.done)
return result;
@putByValDirect(result, index++, item.value);
(function (promise, onFulfilled, onRejected, promiseOrCapability)
"use strict";
if (!@isCallable(onFulfilled))
onFulfilled = @promiseEmptyOnFulfilled;
if (!@isCallable(onRejected))
onRejected = @promiseEmptyOnRejected;
var reactionsOrResult = @getPromiseInternalField(promise, @promiseFieldReactionsOrResult);
var flags = @getPromiseInternalField(promise, @promiseFieldFlags);
var state = flags & @promiseStateMask;
if (state === @promiseStatePending)
@pushNewPromiseReaction(promise, reactionsOrResult, promiseOrCapability, onFulfilled, onRejected);
else {
var handler;
if (state === @promiseStateRejected) {
handler = onRejected;
if (!(flags & @promiseFlagsIsHandled))
@hostPromiseRejectionTracker(promise, @promiseRejectionHandle);
} else
handler = onFulfilled;
@enqueueJob(@promiseReactionJob, state, promiseOrCapability, handler, reactionsOrResult);
@putPromiseInternalField(promise, @promiseFieldFlags, @getPromiseInternalField(promise, @promiseFieldFlags) | @promiseFlagsIsHandled);
(function (argument)
"use strict";
return argument;
(function (argument)
"use strict";
throw argument;
(function (state, promiseOrCapability, handler, argument)
"use strict";
if (@isUndefinedOrNull(handler)) {
try {
@assert(@isPromise(promiseOrCapability));
if (state === @promiseStateFulfilled)
@resolvePromise(promiseOrCapability, argument);
else
@rejectPromise(promiseOrCapability, argument);
} catch {
return;
if (!promiseOrCapability) {
@promiseReactionJobWithoutPromise(handler, argument);
return;
var result;
try {
result = handler(argument);
} catch (error) {
if (@isPromise(promiseOrCapability)) {
@rejectPromise(promiseOrCapability, error);
return;
promiseOrCapability.@reject.@call(@undefined, error);
return;
if (@isPromise(promiseOrCapability)) {
@resolvePromise(promiseOrCapability, result);
return;
promiseOrCapability.@resolve.@call(@undefined, result);
(function (handler, argument)
"use strict";
try {
handler(argument);
} catch {
(function (constructor, reason)
@assert(constructor !== @Promise);
var promiseCapability = @newPromiseCapabilitySlow(constructor);
promiseCapability.@reject.@call(@undefined, reason);
return promiseCapability.@promise;
(function (constructor, value)
if (@isPromise(value) && value.constructor === constructor)
return value;
if (constructor === @Promise) {
var promise = @newPromise();
@resolvePromiseWithFirstResolvingFunctionCallCheck(promise, value);
return promise;
return @promiseResolveSlow(constructor, value);
(function (constructor, value)
@assert(constructor !== @Promise);
var promiseCapability = @newPromiseCapabilitySlow(constructor);
promiseCapability.@resolve.@call(@undefined, value);
return promiseCapability.@promise;
(function (thenable, then, resolvingFunctions)
"use strict";
try {
return then.@call(thenable, resolvingFunctions.@resolve, resolvingFunctions.@reject);
} catch (error) {
return resolvingFunctions.@reject.@call(@undefined, error);
(function (thenable, promiseToResolve)
"use strict";
@assert(@isPromise(thenable));
@assert(@isPromise(promiseToResolve));
var constructor = @speciesConstructor(thenable, @Promise);
if (constructor !== @Promise && constructor !== @InternalPromise) {
@promiseResolveThenableJobWithDerivedPromise(thenable, constructor, @createResolvingFunctions(promiseToResolve));
return;
var flags = @getPromiseInternalField(thenable, @promiseFieldFlags);
var state = flags & @promiseStateMask;
var reactionsOrResult = @getPromiseInternalField(thenable, @promiseFieldReactionsOrResult);
if (state === @promiseStatePending)
@pushNewPromiseReaction(thenable, reactionsOrResult, promiseToResolve, @undefined, @undefined);
else {
if (state === @promiseStateRejected && !(flags & @promiseFlagsIsHandled))
@hostPromiseRejectionTracker(thenable, @promiseRejectionHandle);
@enqueueJob(@promiseReactionJob, state, promiseToResolve, @undefined, reactionsOrResult);
@putPromiseInternalField(thenable, @promiseFieldFlags, @getPromiseInternalField(thenable, @promiseFieldFlags) | @promiseFlagsIsHandled);
(function (thenable, constructor, resolvingFunctions)
"use strict";
try {
var promiseOrCapability = @newPromiseCapabilitySlow(constructor);
@performPromiseThen(thenable, resolvingFunctions.@resolve, resolvingFunctions.@reject, promiseOrCapability);
return promiseOrCapability.@promise;
} catch (error) {
return resolvingFunctions.@reject.@call(@undefined, error);
(function (thenable, onFulfilled, onRejected)
"use strict";
@assert(@isPromise(thenable));
var constructor = @speciesConstructor(thenable, @Promise);
if (constructor !== @Promise && constructor !== @InternalPromise) {
@promiseResolveThenableJobWithDerivedPromise(thenable, constructor, @createResolvingFunctionsWithoutPromise(onFulfilled, onRejected));
return;
var flags = @getPromiseInternalField(thenable, @promiseFieldFlags);
var state = flags & @promiseStateMask;
var reactionsOrResult = @getPromiseInternalField(thenable, @promiseFieldReactionsOrResult);
if (state === @promiseStatePending)
@pushNewPromiseReaction(thenable, reactionsOrResult, @undefined, onFulfilled, onRejected);
else {
if (state === @promiseStateRejected) {
if (!(flags & @promiseFlagsIsHandled))
@hostPromiseRejectionTracker(thenable, @promiseRejectionHandle);
@rejectWithoutPromise(reactionsOrResult, onFulfilled, onRejected);
} else
@fulfillWithoutPromise(reactionsOrResult, onFulfilled, onRejected);
@putPromiseInternalField(thenable, @promiseFieldFlags, @getPromiseInternalField(thenable, @promiseFieldFlags) | @promiseFlagsIsHandled);
(function (key, value)
"use strict";
var entry = this.ensureRegistered(key);
if (entry.state > @ModuleFetch)
@throwTypeError("Requested module is already fetched.");
this.fulfillFetch(entry, value);
(function (thenable, existingReactions, promiseOrCapability, onFulfilled, onRejected)
"use strict";
if (!existingReactions) {
existingReactions = {
@promiseOrCapability: promiseOrCapability,
@onFulfilled: onFulfilled,
@onRejected: onRejected,
@outOfLineReactionCounts: 0,
@putPromiseInternalField(thenable, @promiseFieldReactionsOrResult, existingReactions);
} else {
var outOfLineReactionCounts = existingReactions.@outOfLineReactionCounts;
@putByValDirect(existingReactions, outOfLineReactionCounts++, promiseOrCapability);
@putByValDirect(existingReactions, outOfLineReactionCounts++, onFulfilled);
@putByValDirect(existingReactions, outOfLineReactionCounts++, onRejected);
existingReactions.@outOfLineReactionCounts = outOfLineReactionCounts;
(function (iterable)
"use strict";
if (!@isObject(this))
@throwTypeError("|this| is not an object");
var promiseCapability = @newPromiseCapability(this);
try {
var promiseResolve = this.resolve;
if (!@isCallable(promiseResolve))
@throwTypeError("Promise resolve is not a function");
for (var value of iterable) {
var nextPromise = promiseResolve.@call(this, value);
nextPromise.then(promiseCapability.@resolve, promiseCapability.@reject);
} catch (error) {
promiseCapability.@reject.@call(@undefined, error);
return promiseCapability.@promise;
(function (template)
"use strict";
var cookedSegments = @toObject(template, "String.raw requires template not be null or undefined");
var rawSegments = @toObject(cookedSegments.raw, "String.raw requires template.raw not be null or undefined");
var numberOfSubstitutions = arguments.length - 1;
var segmentCount = @toLength(rawSegments.length);
if (segmentCount <= 0)
return '';
var stringElements = '';
for (var i = 0; ; ++i) {
var segment = @toString(rawSegments[i]);
stringElements += segment;
if ((i + 1) === segmentCount)
return stringElements;
if (i < numberOfSubstitutions) {
var substitutionIndexInArguments = i + 1;
var next = @toString(arguments[substitutionIndexInArguments]);
stringElements += next;
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.reduce requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.reduce callback must be a function");
var argumentCount = @argumentCount();
if (length === 0 && argumentCount < 2)
@throwTypeError("reduce of empty array with no initial value");
var accumulator, k = 0;
if (argumentCount > 1)
accumulator = @argument(1);
else {
while (k < length && !(k in array))
k += 1;
if (k >= length)
@throwTypeError("reduce of empty array with no initial value");
accumulator = array[k++];
while (k < length) {
if (k in array)
accumulator = callback.@call(@undefined, accumulator, array[k], k, array);
k += 1;
return accumulator;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.reduce callback must be a function");
var argumentCount = @argumentCount();
if (length === 0 && argumentCount < 2)
@throwTypeError("TypedArray.prototype.reduce of empty array with no initial value");
var accumulator, k = 0;
if (argumentCount > 1)
accumulator = @argument(1);
else
accumulator = this[k++];
for (; k < length; k++)
accumulator = callback.@call(@undefined, accumulator, this[k], k, this);
return accumulator;
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.reduceRight requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.reduceRight callback must be a function");
var argumentCount = @argumentCount();
if (length === 0 && argumentCount < 2)
@throwTypeError("reduceRight of empty array with no initial value");
var accumulator, k = length - 1;
if (argumentCount > 1)
accumulator = @argument(1);
else {
while (k >= 0 && !(k in array))
k -= 1;
if (k < 0)
@throwTypeError("reduceRight of empty array with no initial value");
accumulator = array[k--];
while (k >= 0) {
if (k in array)
accumulator = callback.@call(@undefined, accumulator, array[k], k, array);
k -= 1;
return accumulator;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.reduceRight callback must be a function");
var argumentCount = @argumentCount();
if (length === 0 && argumentCount < 2)
@throwTypeError("TypedArray.prototype.reduceRight of empty array with no initial value");
var accumulator, k = length - 1;
if (argumentCount > 1)
accumulator = @argument(1);
else
accumulator = this[k--];
for (; k >= 0; k--)
accumulator = callback.@call(@undefined, accumulator, this[k], k, this);
return accumulator;
(function (regexp, str)
"use strict";
var exec = regexp.exec;
var builtinExec = @regExpBuiltinExec;
if (exec !== builtinExec && @isCallable(exec)) {
var result = exec.@call(regexp, str);
if (result !== null && !@isObject(result))
@throwTypeError("The result of a RegExp exec must be null or an object");
return result;
return builtinExec.@call(regexp, str);
(function (reason)
"use strict";
if (!@isObject(this))
@throwTypeError("|this| is not an object");
if (this === @Promise) {
var promise = @newPromise();
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, reason);
return promise;
return @promiseRejectSlow(this, reason);
(function (promise, reason)
"use strict";
@assert(@isPromise(promise));
@assert((@getPromiseInternalField(promise, @promiseFieldFlags) & @promiseStateMask) == @promiseStatePending);
var flags = @getPromiseInternalField(promise, @promiseFieldFlags);
var reactions = @getPromiseInternalField(promise, @promiseFieldReactionsOrResult);
@putPromiseInternalField(promise, @promiseFieldReactionsOrResult, reason);
@putPromiseInternalField(promise, @promiseFieldFlags, flags | @promiseStateRejected);
if (!(flags & @promiseFlagsIsHandled))
@hostPromiseRejectionTracker(promise, @promiseRejectionReject);
@triggerPromiseReactions(@promiseStateRejected, reactions, reason);
(function (promise, reason)
@assert(@isPromise(promise));
var flags = @getPromiseInternalField(promise, @promiseFieldFlags);
if (flags & @promiseFlagsIsFirstResolvingFunctionCalled)
return;
@putPromiseInternalField(promise, @promiseFieldFlags, flags | @promiseFlagsIsFirstResolvingFunctionCalled);
return @rejectPromise(promise, reason);
(function (reason, onFulfilled, onRejected)
"use strict";
@enqueueJob(@promiseReactionJobWithoutPromise, onRejected, reason);
(function (count)
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.repeat requires that |this| not be null or undefined");
var string = @toString(this);
count = @toIntegerOrInfinity(count);
if (count < 0 || count === @Infinity)
@throwRangeError("String.prototype.repeat argument must be greater than or equal to 0 and not be Infinity");
if (string.length === 1)
return @repeatCharacter(string, count);
return @repeatSlowPath(string, count);
(function (string, count)
"use strict";
var repeatCount = (count / string.length) | 0;
var remainingCharacters = count - repeatCount * string.length;
var result = "";
var operand = string;
while (true) {
if (repeatCount & 1)
result += operand;
repeatCount >>= 1;
if (!repeatCount)
break;
operand += operand;
if (remainingCharacters)
result += @stringSubstringInternal.@call(string, 0, remainingCharacters);
return result;
(function (string, count)
"use strict";
if (count === 0 || string.length === 0)
return "";
if (count === 1)
return string;
if (string.length * count > @MAX_STRING_LENGTH)
@throwOutOfMemoryError();
var result = "";
var operand = string;
while (true) {
if (count & 1)
result += operand;
count >>= 1;
if (!count)
return result;
operand += operand;
(function (strArg, replace)
"use strict";
if (!@isObject(this))
@throwTypeError("RegExp.prototype.@@replace requires that |this| be an Object");
var regexp = this;
var str = @toString(strArg);
var stringLength = str.length;
var functionalReplace = @isCallable(replace);
if (!functionalReplace)
replace = @toString(replace);
var global = regexp.global;
var unicode = false;
if (global) {
unicode = regexp.unicode;
regexp.lastIndex = 0;
var resultList = [];
var result;
var done = false;
while (!done) {
result = @regExpExec(regexp, str);
if (result === null)
done = true;
else {
@arrayPush(resultList, result);
if (!global)
done = true;
else {
var matchStr = @toString(result[0]);
if (!matchStr.length) {
var thisIndex = @toLength(regexp.lastIndex);
regexp.lastIndex = @advanceStringIndex(str, thisIndex, unicode);
var accumulatedResult = "";
var nextSourcePosition = 0;
for (var i = 0, resultListLength = resultList.length; i < resultListLength; ++i) {
var result = resultList[i];
var nCaptures = result.length - 1;
if (nCaptures < 0)
nCaptures = 0;
var matched = @toString(result[0]);
var matchLength = matched.length;
var position = @toIntegerOrInfinity(result.index);
position = (position > stringLength) ? stringLength : position;
position = (position < 0) ? 0 : position;
var captures = [];
for (var n = 1; n <= nCaptures; n++) {
var capN = result[n];
if (capN !== @undefined)
capN = @toString(capN);
@arrayPush(captures, capN);
var replacement;
var namedCaptures = result.groups;
if (functionalReplace) {
var replacerArgs = [ matched ];
for (var j = 0; j < captures.length; j++)
@arrayPush(replacerArgs, captures[j]);
@arrayPush(replacerArgs, position);
@arrayPush(replacerArgs, str);
if (namedCaptures !== @undefined)
@arrayPush(replacerArgs, namedCaptures);
var replValue = replace.@apply(@undefined, replacerArgs);
replacement = @toString(replValue);
} else {
if (namedCaptures !== @undefined)
namedCaptures = @toObject(namedCaptures, "RegExp.prototype[Symbol.replace] requires 'groups' property of a match not be null");
replacement = @getSubstitution(matched, str, position, captures, namedCaptures, replace);
if (position >= nextSourcePosition) {
accumulatedResult = accumulatedResult + @stringSubstringInternal.@call(str, nextSourcePosition, position) + replacement;
nextSourcePosition = position + matchLength;
if (nextSourcePosition >= stringLength)
return  accumulatedResult;
return accumulatedResult + @stringSubstringInternal.@call(str, nextSourcePosition);
(function (search, replace)
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.replace requires that |this| not be null or undefined");
if (!@isUndefinedOrNull(search)) {
var replacer = search.@@replace;
if (!@isUndefinedOrNull(replacer)) {
if (!@hasObservableSideEffectsForStringReplace(search, replacer))
return @toString(this).@replaceUsingRegExp(search, replace);
return replacer.@call(search, this, replace);
var thisString = @toString(this);
var searchString = @toString(search);
return thisString.@replaceUsingStringSearch(searchString, replace);
(function (search, replace)
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.replaceAll requires |this| not to be null nor undefined");
if (!@isUndefinedOrNull(search)) {
if (@isRegExp(search) && !@stringIncludesInternal.@call(@toString(search.flags), "g"))
@throwTypeError("String.prototype.replaceAll argument must not be a non-global regular expression");
var replacer = search.@@replace;
if (!@isUndefinedOrNull(replacer)) {
if (!@hasObservableSideEffectsForStringReplace(search, replacer))
return @toString(this).@replaceUsingRegExp(search, replace);
return replacer.@call(search, this, replace);
var thisString = @toString(this);
var searchString = @toString(search);
return thisString.@replaceAllUsingStringSearch(searchString, replace);
(function (entry, parameters, fetcher)
"use strict";
if (entry.fetch) {
var currentAttempt = entry.fetch;
if (entry.state !== @ModuleFetch)
return currentAttempt;
return currentAttempt.catch((error) => {
if (currentAttempt === entry.fetch)
entry.fetch = @undefined;
return this.requestFetch(entry, parameters, fetcher);
var fetchPromise = this.fetch(entry.key, parameters, fetcher).then((source) => {
@setStateToMax(entry, @ModuleInstantiate);
return source;
entry.fetch = fetchPromise;
return fetchPromise;
(async function (key, parameters, fetcher)
"use strict";
var entry = await this.requestSatisfy(this.ensureRegistered(key), parameters, fetcher, new @Set);
await this.linkAndEvaluateModule(entry.key, fetcher);
return this.getModuleNamespaceObject(entry.module);
(function (entry, parameters, fetcher)
"use strict";
if (entry.instantiate)
return entry.instantiate;
var instantiatePromise = (async () => {
var source = await this.requestFetch(entry, parameters, fetcher);
if (entry.instantiate)
return await entry.instantiate;
entry.instantiate = instantiatePromise;
var key = entry.key;
var moduleRecord = await this.parseModule(key, source);
var dependenciesMap = moduleRecord.dependenciesMap;
var requestedModules = this.requestedModules(moduleRecord);
var dependencies = @newArrayWithSize(requestedModules.length);
for (var i = 0, length = requestedModules.length; i < length; ++i) {
var depName = requestedModules[i];
var depKey = this.resolveSync(depName, key, fetcher);
var depEntry = this.ensureRegistered(depKey);
@putByValDirect(dependencies, i, depEntry);
dependenciesMap.@set(depName, depEntry);
entry.dependencies = dependencies;
entry.module = moduleRecord;
@setStateToMax(entry, @ModuleSatisfy);
return entry;
})();
return instantiatePromise;
(function (entry, parameters, fetcher, visited)
"use strict";
if (entry.satisfy)
return entry.satisfy;
visited.@add(entry);
var satisfyPromise = this.requestInstantiate(entry, parameters, fetcher).then((entry) => {
if (entry.satisfy)
return entry.satisfy;
var depLoads = @newArrayWithSize(entry.dependencies.length);
for (var i = 0, length = entry.dependencies.length; i < length; ++i) {
var depEntry = entry.dependencies[i];
var promise;
if (visited.@has(depEntry))
promise = this.requestInstantiate(depEntry, @undefined, fetcher);
else {
promise = this.requestSatisfy(depEntry, @undefined, fetcher, visited);
@putByValDirect(depLoads, i, promise);
return @InternalPromise.internalAll(depLoads).then((entries) => {
if (entry.satisfy)
return entry;
@setStateToMax(entry, @ModuleLink);
entry.satisfy = satisfyPromise;
return entry;
return satisfyPromise;
(function (value)
"use strict";
if (!@isObject(this))
@throwTypeError("|this| is not an object");
return @promiseResolve(this, value);
(function (promise, resolution)
"use strict";
@assert(@isPromise(promise));
if (resolution === promise)
return @rejectPromise(promise, @makeTypeError("Cannot resolve a promise with itself"));
if (!@isObject(resolution))
return @fulfillPromise(promise, resolution);
var then;
try {
then = resolution.then;
} catch (error) {
return @rejectPromise(promise, error);
if (@isPromise(resolution) && then === @defaultPromiseThen) {
@enqueueJob(@promiseResolveThenableJobFast, resolution, promise);
return;
if (!@isCallable(then))
return @fulfillPromise(promise, resolution);
@enqueueJob(@promiseResolveThenableJob, resolution, then, @createResolvingFunctions(promise));
(function (promise, value)
@assert(@isPromise(promise));
var flags = @getPromiseInternalField(promise, @promiseFieldFlags);
if (flags & @promiseFlagsIsFirstResolvingFunctionCalled)
return;
@putPromiseInternalField(promise, @promiseFieldFlags, flags | @promiseFlagsIsFirstResolvingFunctionCalled);
return @resolvePromise(promise, value);
(function (resolution, onFulfilled, onRejected)
"use strict";
if (!@isObject(resolution)) {
@fulfillWithoutPromise(resolution, onFulfilled, onRejected);
return;
var then;
try {
then = resolution.then;
} catch (error) {
@rejectWithoutPromise(error, onFulfilled, onRejected);
return;
if (@isPromise(resolution) && then === @defaultPromiseThen) {
@enqueueJob(@promiseResolveThenableJobWithoutPromiseFast, resolution, onFulfilled, onRejected);
return;
if (!@isCallable(then)) {
@fulfillWithoutPromise(resolution, onFulfilled, onRejected);
return;
@enqueueJob(@promiseResolveThenableJob, resolution, then, @createResolvingFunctionsWithoutPromise(onFulfilled, onRejected));
(function (value)
"use strict";
var promise = @newPromise();
if (!@isObject(this) || !@isObject(@getByIdDirectPrivate(this, "syncIterator"))) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, @makeTypeError('Iterator is not an object.'));
return promise;
var syncIterator = @getByIdDirectPrivate(this, "syncIterator");
var returnMethod;
try {
returnMethod = syncIterator.return;
} catch (e) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, e);
return promise;
if (@isUndefinedOrNull(returnMethod)) {
@resolvePromiseWithFirstResolvingFunctionCallCheck(promise, { value, done: true });
return promise;
try {
var returnResult = @argumentCount() === 0 ? returnMethod.@call(syncIterator) : returnMethod.@call(syncIterator, value);
if (!@isObject(returnResult)) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, @makeTypeError('Iterator result interface is not an object.'));
return promise;
var resultDone = !!returnResult.done;
var resultValue = returnResult.value;
@resolveWithoutPromise(resultValue,
function (result) { @resolvePromiseWithFirstResolvingFunctionCallCheck(promise, { value: result, done: resultDone }); },
function (error) { @rejectPromiseWithFirstResolvingFunctionCallCheck(promise, error); });
} catch (e) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, e);
return promise;
(function (value)
"use strict";
return @asyncGeneratorEnqueue(this, value, @GeneratorResumeModeReturn);
(function (value)
"use strict";
if (!@isGenerator(this))
@throwTypeError("|this| should be a generator");
var state = @getGeneratorInternalField(this, @generatorFieldState);
if (state === @GeneratorStateExecuting)
@throwTypeError("Generator is executing");
return @generatorResume(this, state, @getGeneratorInternalField(this, @generatorFieldThis), value, value, @GeneratorResumeModeReturn);
(function (strArg)
"use strict";
var regexp = this;
if (@isRegExpObject(regexp)
&& @tryGetById(regexp, "exec") === @regExpBuiltinExec
&& typeof regexp.lastIndex === "number")
return @regExpSearchFast.@call(regexp, strArg);
if (!@isObject(this))
@throwTypeError("RegExp.prototype.@@search requires that |this| be an Object");
var str = @toString(strArg)
var previousLastIndex = regexp.lastIndex;
if (!@sameValue(previousLastIndex, 0))
regexp.lastIndex = 0;
var result = @regExpExec(regexp, str);
if (!@sameValue(regexp.lastIndex, previousLastIndex))
regexp.lastIndex = previousLastIndex;
if (result === null)
return -1;
return result.index;
(function (regexp)
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.search requires that |this| not be null or undefined");
if (!@isUndefinedOrNull(regexp)) {
var searcher = regexp.@@search;
if (!@isUndefinedOrNull(searcher))
return searcher.@call(regexp, this);
var thisString = @toString(this);
var createdRegExp = @regExpCreate(regexp, @undefined);
return createdRegExp.@@search(thisString);
(function (bucket, kind)
"use strict";
var value;
bucket = @setBucketNext(bucket);
@putSetIteratorInternalField(this, @setIteratorFieldSetBucket, bucket);
var done = bucket === @sentinelSetBucket;
if (!done) {
value = @setBucketKey(bucket);
if (kind === @iterationKindEntries)
value = [ value, value ]
return { value, done };
(function (entry, newState)
"use strict";
if (entry.state < newState)
entry.state = newState;
(function ()
"use strict";
return @createHTML("String.prototype.small", this, "small", "", "");
(function (callback )
"use strict";
var array = @toObject(this, "Array.prototype.some requires that |this| not be null or undefined");
var length = @toLength(array.length);
if (!@isCallable(callback))
@throwTypeError("Array.prototype.some callback must be a function");
var thisArg = @argument(1);
for (var i = 0; i < length; i++) {
if (!(i in array))
continue;
if (callback.@call(thisArg, array[i], i, array))
return true;
return false;
(function (callback )
"use strict";
var length = @typedArrayLength(this);
var thisArg = @argument(1);
if (!@isCallable(callback))
@throwTypeError("TypedArray.prototype.some callback must be a function");
for (var i = 0; i < length; i++) {
if (callback.@call(thisArg, this[i], i, this))
return true;
return false;
(function (comparator)
"use strict";
var isStringSort = false;
if (comparator === @undefined)
isStringSort = true;
else if (!@isCallable(comparator))
@throwTypeError("Array.prototype.sort requires the comparator argument to be a function or undefined");
var receiver = @toObject(this, "Array.prototype.sort requires that |this| not be null or undefined");
var receiverLength = @toLength(receiver.length);
if (receiverLength < 2)
return receiver;
var compacted = [ ];
var sorted = null;
var undefinedCount = @sortCompact(receiver, receiverLength, compacted, isStringSort);
if (isStringSort) {
sorted = @newArrayWithSize(compacted.length);
@sortBucketSort(sorted, 0, compacted, 0);
} else
sorted = @sortMergeSort(compacted, comparator);
@sortCommit(receiver, receiverLength, sorted, undefinedCount);
return receiver;
(function (comparator)
"use strict";
if (comparator !== @undefined && !@isCallable(comparator))
@throwTypeError("TypedArray.prototype.sort requires the comparator argument to be a function or undefined");
var length = @typedArrayLength(this);
if (length < 2)
return this;
if (comparator !== @undefined || @isSharedTypedArrayView(this)) {
if (comparator === @undefined)
comparator = @typedArrayDefaultComparator;
@typedArrayMergeSort(this, length, comparator);
} else
@typedArraySort(this);
return this;
(function (array, dst, bucket, depth)
"use strict";
if (bucket.length < 32 || depth > 32) {
var sorted = @sortMergeSort(bucket, @sortStringComparator);
for (var i = 0; i < sorted.length; ++i) {
@putByValDirect(array, dst, sorted[i].value);
++dst;
return dst;
var buckets = [ ];
@setPrototypeDirect.@call(buckets, null);
for (var i = 0; i < bucket.length; ++i) {
var entry = bucket[i];
var string = entry.string;
if (string.length == depth) {
@putByValDirect(array, dst, entry.value);
++dst;
continue;
var c = string.@charCodeAt(depth);
var cBucket = buckets[c];
if (cBucket)
@arrayPush(cBucket, entry);
else
@putByValDirect(buckets, c, [ entry ]);
for (var i = 0; i < buckets.length; ++i) {
if (!buckets[i])
continue;
dst = @sortBucketSort(array, dst, buckets[i], depth + 1);
return dst;
(function (receiver, receiverLength, sorted, undefinedCount)
"use strict";
@assert(@isJSArray(sorted));
var sortedLength = sorted.length;
@assert(sortedLength + undefinedCount <= receiverLength);
var i = 0;
if (@isJSArray(receiver) && sortedLength >= 64 && typeof sorted[0] !== "number") {
@appendMemcpy(receiver, sorted, 0);
i = sortedLength;
} else {
for (; i < sortedLength; ++i)
receiver[i] = sorted[i];
for (; i < sortedLength + undefinedCount; ++i)
receiver[i] = @undefined;
for (; i < receiverLength; ++i)
delete receiver[i];
(function (receiver, receiverLength, compacted, isStringSort)
"use strict";
var undefinedCount = 0;
var compactedIndex = 0;
for (var i = 0; i < receiverLength; ++i) {
if (i in receiver) {
var value = receiver[i];
if (value === @undefined)
++undefinedCount;
else {
@putByValDirect(compacted, compactedIndex,
isStringSort ? {string: @toString(value), value} : value);
++compactedIndex;
return undefinedCount;
(function (dst, src, srcIndex, srcEnd, width, comparator)
"use strict";
var left = srcIndex;
var leftEnd = @min(left + width, srcEnd);
var right = leftEnd;
var rightEnd = @min(right + width, srcEnd);
for (var dstIndex = left; dstIndex < rightEnd; ++dstIndex) {
if (right < rightEnd) {
if (left >= leftEnd) {
@putByValDirect(dst, dstIndex, src[right]);
++right;
continue;
var comparisonResult = comparator(src[right], src[left]);
if (comparisonResult === false || comparisonResult < 0) {
@putByValDirect(dst, dstIndex, src[right]);
++right;
continue;
@putByValDirect(dst, dstIndex, src[left]);
++left;
(function (array, comparator)
"use strict";
var valueCount = array.length;
var buffer = @newArrayWithSize(valueCount);
var dst = buffer;
var src = array;
for (var width = 1; width < valueCount; width *= 2) {
for (var srcIndex = 0; srcIndex < valueCount; srcIndex += 2 * width)
@sortMerge(dst, src, srcIndex, valueCount, width, comparator);
var tmp = src;
src = dst;
dst = tmp;
return src;
(function (a, b)
"use strict";
var aString = a.string;
var bString = b.string;
if (aString === bString)
return 0;
return aString > bString ? 1 : -1;
(function (obj, defaultConstructor)
"use strict";
var constructor = obj.constructor;
if (constructor === @undefined)
return defaultConstructor;
if (!@isObject(constructor))
@throwTypeError("|this|.constructor is not an Object or undefined");
constructor = constructor.@@species;
if (@isUndefinedOrNull(constructor))
return defaultConstructor;
if (@isConstructor(constructor))
return constructor;
@throwTypeError("|this|.constructor[Symbol.species] is not a constructor");
(function ()
"use strict";
return this;
(function (string, limit)
"use strict";
if (!@isObject(this))
@throwTypeError("RegExp.prototype.@@split requires that |this| be an Object");
var regexp = this;
var str = @toString(string);
var speciesConstructor = @speciesConstructor(regexp, @RegExp);
if (speciesConstructor === @RegExp && !@hasObservableSideEffectsForRegExpSplit(regexp))
return @regExpSplitFast.@call(regexp, str, limit);
var flags = @toString(regexp.flags);
var unicodeMatching = @stringIncludesInternal.@call(flags, "u");
var newFlags = @stringIncludesInternal.@call(flags, "y") ? flags : flags + "y";
var splitter = new speciesConstructor(regexp, newFlags);
if (!@hasObservableSideEffectsForRegExpSplit(splitter))
return @regExpSplitFast.@call(splitter, str, limit);
var result = [];
limit = (limit === @undefined) ? 0xffffffff : limit >>> 0;
if (!limit)
return result;
var size = str.length;
if (!size) {
var z = @regExpExec(splitter, str);
if (z !== null)
return result;
@putByValDirect(result, 0, str);
return result;
var position = 0;
var matchPosition = 0;
while (matchPosition < size) {
splitter.lastIndex = matchPosition;
var matches = @regExpExec(splitter, str);
if (matches === null)
matchPosition = @advanceStringIndex(str, matchPosition, unicodeMatching);
else {
var endPosition = @toLength(splitter.lastIndex);
endPosition = (endPosition <= size) ? endPosition : size;
if (endPosition === position)
matchPosition = @advanceStringIndex(str, matchPosition, unicodeMatching);
else {
var subStr = @stringSubstringInternal.@call(str, position, matchPosition);
@arrayPush(result, subStr);
if (result.length == limit)
return result;
position = endPosition;
var numberOfCaptures = matches.length > 1 ? matches.length - 1 : 0;
var i = 1;
while (i <= numberOfCaptures) {
var nextCapture = matches[i];
@arrayPush(result, nextCapture);
if (result.length == limit)
return result;
i++;
matchPosition = position;
var remainingStr = @stringSubstringInternal.@call(str, position, size);
@arrayPush(result, remainingStr);
return result;
(function (separator, limit)
"use strict";
if (@isUndefinedOrNull(this))
@throwTypeError("String.prototype.split requires that |this| not be null or undefined");
if (!@isUndefinedOrNull(separator)) {
var splitter = separator.@@split;
if (!@isUndefinedOrNull(splitter))
return splitter.@call(separator, this, limit);
return @stringSplitFast.@call(this, separator, limit);
(function ()
"use strict";
return @createHTML("String.prototype.strike", this, "strike", "", "");
(function ()
"use strict";
var result = @toString(this);
for (var i = 0, length = arguments.length; i < length; ++i)
result += @toString(arguments[i]);
return result;
(function ()
"use strict";
return @createHTML("String.prototype.sub", this, "sub", "", "");
(function (begin, end)
"use strict";
if (!@isTypedArrayView(this))
@throwTypeError("|this| should be a typed array view");
var start = @toIntegerOrInfinity(begin);
var finish;
if (end !== @undefined)
finish = @toIntegerOrInfinity(end);
var constructor = @typedArraySpeciesConstructor(this);
return @typedArraySubarrayCreate.@call(this, start, finish, constructor);
(function ()
"use strict";
return @createHTML("String.prototype.sup", this, "sup", "", "");
(function ()
"use strict";
return this;
(function (value)
"use strict";
if (!@isCallable(this))
return false;
if (@isBoundFunction(this))
return @hasInstanceBoundFunction(this, value);
var target = this.prototype;
return @instanceOf(value, target);
(function ()
"use strict";
return this;
(function (strArg)
"use strict";
var regexp = this;
if (@isRegExpObject(regexp)
&& @tryGetById(regexp, "exec") === @regExpBuiltinExec
&& typeof regexp.lastIndex === "number")
return @regExpTestFast.@call(regexp, strArg);
if (!@isObject(regexp))
@throwTypeError("RegExp.prototype.test requires that |this| be an Object");
var str = @toString(strArg);
var match = @regExpExec(regexp, str);
if (match !== null)
return true;
return false;
(function (onFulfilled, onRejected)
"use strict";
if (!@isPromise(this))
@throwTypeError("|this| is not a Promise");
var constructor = @speciesConstructor(this, @Promise);
var promise;
var promiseOrCapability;
if (constructor === @Promise) {
promiseOrCapability = @newPromise();
promise = promiseOrCapability;
} else {
promiseOrCapability = @newPromiseCapabilitySlow(constructor);
promise = promiseOrCapability.@promise;
@performPromiseThen(this, onFulfilled, onRejected, promiseOrCapability);
return promise;
(function (exception)
"use strict";
var promise = @newPromise();
if (!@isObject(this) || !@isObject(@getByIdDirectPrivate(this, "syncIterator"))) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, @makeTypeError('Iterator is not an object.'));
return promise;
var syncIterator = @getByIdDirectPrivate(this, "syncIterator");
var throwMethod;
try {
throwMethod = syncIterator.throw;
} catch (e) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, e);
return promise;
if (@isUndefinedOrNull(throwMethod)) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, exception);
return promise;
try {
var throwResult = @argumentCount() === 0 ? throwMethod.@call(syncIterator) : throwMethod.@call(syncIterator, exception);
if (!@isObject(throwResult)) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, @makeTypeError('Iterator result interface is not an object.'));
return promise;
var throwDone = !!throwResult.done;
var throwValue = throwResult.value;
@resolveWithoutPromise(throwValue,
function (result) { @resolvePromiseWithFirstResolvingFunctionCallCheck(promise, { value: result, done: throwDone }); },
function (error) { @rejectPromiseWithFirstResolvingFunctionCallCheck(promise, error); });
} catch (e) {
@rejectPromiseWithFirstResolvingFunctionCallCheck(promise, e);
return promise;
(function (exception)
"use strict";
return @asyncGeneratorEnqueue(this, exception, @GeneratorResumeModeThrow);
(function (exception)
"use strict";
if (!@isGenerator(this))
@throwTypeError("|this| should be a generator");
var state = @getGeneratorInternalField(this, @generatorFieldState);
if (state === @GeneratorStateExecuting)
@throwTypeError("Generator is executing");
if (state === @GeneratorStateCompleted)
throw exception;
return @generatorResume(this, state, @getGeneratorInternalField(this, @generatorFieldThis), exception, @undefined, @GeneratorResumeModeThrow);
(function (opts)
"use strict";
var options;
if (opts === @undefined)
options = null;
else if (opts === null)
@throwTypeError("null is not an object");
else
options = @toObject(opts);
var needsDefaults = !options || (
options.weekday === @undefined &&
options.year === @undefined &&
options.month === @undefined &&
options.day === @undefined &&
options.dayPeriod === @undefined &&
options.hour === @undefined &&
options.minute === @undefined &&
options.second === @undefined &&
options.fractionalSecondDigits === @undefined
if (options) {
var dateStyle = options.dateStyle;
var timeStyle = options.timeStyle;
if (dateStyle !== @undefined || timeStyle !== @undefined)
needsDefaults = false;
if (needsDefaults) {
options = @Object.@create(options);
options.year = "numeric";
options.month = "numeric";
options.day = "numeric";
options.hour = "numeric";
options.minute = "numeric";
options.second = "numeric";
return options;
(function (opts)
"use strict";
var options;
if (opts === @undefined)
options = null;
else if (opts === null)
@throwTypeError("null is not an object");
else
options = @toObject(opts);
var needsDefaults = !options || (
options.weekday === @undefined &&
options.year === @undefined &&
options.month === @undefined &&
options.day === @undefined
if (options) {
var dateStyle = options.dateStyle;
var timeStyle = options.timeStyle;
if (timeStyle !== @undefined)
@throwTypeError("timeStyle cannot be specified");
if (dateStyle !== @undefined)
needsDefaults = false;
if (needsDefaults) {
options = @Object.@create(options);
options.year = "numeric";
options.month = "numeric";
options.day = "numeric";
return options;
(function (opts)
"use strict";
var options;
if (opts === @undefined)
options = null;
else if (opts === null)
@throwTypeError("null is not an object");
else
options = @toObject(opts);
var needsDefaults = !options || (
options.dayPeriod === @undefined &&
options.hour === @undefined &&
options.minute === @undefined &&
options.second === @undefined &&
options.fractionalSecondDigits === @undefined
if (options) {
var dateStyle = options.dateStyle;
var timeStyle = options.timeStyle;
if (dateStyle !== @undefined)
@throwTypeError("dateStyle cannot be specified");
if (timeStyle !== @undefined)
needsDefaults = false;
if (needsDefaults) {
options = @Object.@create(options);
options.hour = "numeric";
options.minute = "numeric";
options.second = "numeric";
return options;
(function (target)
"use strict";
var numberValue = +target;
if (numberValue !== numberValue || !numberValue)
return 0;
return @trunc(numberValue);
(function (target)
"use strict";
var length = @toIntegerOrInfinity(target);
return +(length > 0 ? (length < @MAX_SAFE_INTEGER ? length : @MAX_SAFE_INTEGER) : 0);
(function ()
"use strict";
var value = @thisTimeValue.@call(this);
if (@isNaN(value))
return "Invalid Date";
var options = @toDateTimeOptionsDateDate(@argument(1));
var locales = @argument(0);
return @dateTimeFormat(locales, options, value);
(function ()
"use strict";
var value = @thisTimeValue.@call(this);
if (@isNaN(value))
return "Invalid Date";
var options = @toDateTimeOptionsAnyAll(@argument(1));
var locales = @argument(0);
return @dateTimeFormat(locales, options, value);
(function ()
"use strict";
var length = @typedArrayLength(this);
if (length == 0)
return "";
var string = @toString(this[0].toLocaleString(@argument(0), @argument(1)));
for (var i = 1; i < length; i++)
string += "," + @toString(this[i].toLocaleString(@argument(0), @argument(1)));
return string;
(function ()
"use strict";
var value = @thisTimeValue.@call(this);
if (@isNaN(value))
return "Invalid Date";
var options = @toDateTimeOptionsTimeTime(@argument(1));
var locales = @argument(0);
return @dateTimeFormat(locales, options, value);
(function (state, reactions, argument)
"use strict";
if (!reactions)
return;
var isResolved = state === @promiseStateFulfilled;
@enqueueJob(@promiseReactionJob, state, reactions.@promiseOrCapability, isResolved ? reactions.@onFulfilled : reactions.@onRejected, argument);
for (var i = 0, count = reactions.@outOfLineReactionCounts; i < count; i += 3) {
var promise = reactions[i];
var handler = isResolved ? reactions[i + 1] : reactions[i + 2];
@enqueueJob(@promiseReactionJob, state, promise, handler, argument);
@assert(i === count);
(function (array, a, b, comparator)
"use strict";
var result = @toNumber(comparator(a, b));
if (@isDetached(array))
@throwTypeError("Underlying ArrayBuffer has been detached from the view");
return result;
(function (array, dst, src, srcIndex, srcEnd, width, comparator)
"use strict";
var left = srcIndex;
var leftEnd = @min(left + width, srcEnd);
var right = leftEnd;
var rightEnd = @min(right + width, srcEnd);
for (var dstIndex = left; dstIndex < rightEnd; ++dstIndex) {
if (right < rightEnd) {
if (left >= leftEnd || @typedArrayElementCompare(array, src[right], src[left], comparator) < 0) {
dst[dstIndex] = src[right++];
continue;
dst[dstIndex] = src[left++];
(function (array, valueCount, comparator)
"use strict";
var constructor = @typedArrayGetOriginalConstructor(array);
var buffer = new constructor(valueCount);
var dst = buffer;
var src = array;
for (var width = 1; width < valueCount; width *= 2) {
for (var srcIndex = 0; srcIndex < valueCount; srcIndex += 2 * width)
@typedArrayMerge(array, dst, src, srcIndex, valueCount, width, comparator);
var tmp = src;
src = dst;
dst = tmp;
if (src != array) {
for (var i = 0; i < valueCount; ++i)
array[i] = src[i];
(function (value)
"use strict";
var constructor = value.constructor;
if (constructor === @undefined)
return @typedArrayGetOriginalConstructor(value);
if (!@isObject(constructor))
@throwTypeError("|this|.constructor is not an Object or undefined");
constructor = constructor.@@species;
if (@isUndefinedOrNull(constructor))
return @typedArrayGetOriginalConstructor(value);
return constructor;
(function (fromShadowRealm, shadowRealm, target)
"use strict";
if (@isCallable(target)) {
var wrapped = function() {
var length = arguments.length;
var wrappedArgs = @newArrayWithSize(length);
for (var index = 0; index < length; ++index)
@putByValDirect(wrappedArgs, index, @wrap(!fromShadowRealm, shadowRealm, arguments[index]));
try {
var result = target.@apply(@undefined, wrappedArgs);
} catch (e) {
const msg = "wrapped function threw: " + e.toString();
if (fromShadowRealm)
@throwTypeError(msg);
else {
const mkTypeError = @evalInRealm(shadowRealm, "(msg) => new TypeError(msg)");
const err = mkTypeError.@apply(msg);
throw err;
return @wrap(fromShadowRealm, shadowRealm, result);
delete wrapped['name'];
delete wrapped['length'];
if (!fromShadowRealm)
@moveFunctionToRealm(wrapped, shadowRealm);
return wrapped;
} else if (@isObject(target)) {
@throwTypeError("value passing between realms must be callable or primitive");
return target;
9=AE
#5EHKddddddbbbbdddddddddddddddddddddddddddddddddddddd
djmu|d&&&&
+ATj
################
////
*{{{{
"ssss
z+zzzz
mmmmmmmm
*{{{{
%vvvv
@NX|
+}}}}
"tttt
@G@@E
`f``d
pvppt
PVPPT
@G@@E
`f``d
pvppt
PVPPT
@G@@E
`f``d
@@@E
```d
@@`d
@@`d
@@@E
```d
@@`d
@@`d
pvppt
PVPPT
pvpPt
PVPPT
@G@@E
`f``d
pvppt
PVPPT
pvppt
PVPPT
pvppt
PVPPT
@G@@E
`f``d
@G@@E
`f``d
@G@@E
`f``d
@G@@E
`f``d
@G@@E
`f``d
@G@@E
`f``d
`d`dj
@E@EJ
PTPTZ
ptptz
@@@E
`@@d
@@@E
`@@d
@@@G
`@@f
@@@E
@@@E
@@@E
``@d
``@d
``@d
@@@G
`@@f
@@@E
`@@d
@@@E
`@@d
@@@E
`@@d
@@@E
@@@E
@@@E
```d
```d
```d
@@@E
@@@E
@@@E
```d
```d
```d
@@@E
@@@E
@@@E
```d
```d
```d
@@@E
@@@E
@@@E
```d
```d
```d
@@@E
@@@E
@@@E
```d
```d
```d
@&@&
@F@F
@f`f
@&@&
@F@F
@f`f
&& &E
FF@FE
ff`fe
&& &E
FF@FE
ff`fe
@@@E
@``E
@@@E
@``E
@ppE
@PPE
@@G@@@E
@`f@``e
@@G@@@E
@@@JJE
@``jje
@@@`f@@@``d
@```f@````d
@@@`f@@@``d
@```f@@@``d
@pp`f@pp``d
@PP`f@PP``d
@@@ppt
@``ppt
@@@ppt
@``ppt
@ppppt
@PPppt
"llll
"tttt
<module>
<global>
9?EK
TTTTTTTTTTTTTTT'
T-4;
%)-15
AHOV
S))))))
!,ww










JEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEENR
HBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBOV
URRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRWY
7HMS
))))))))))))))
bhsdq
Debugger
Verifier
//# sourceURL=__InjectedScript_InjectedScriptSource.js
(function(InjectedScriptHost,inspectedGlobalObject,injectedScriptId){var Object={}.constructor;function toString(obj)
{return String(obj);}
function toStringDescription(obj)
{if(obj===0&&1/obj<0)
return"-0";if(isBigInt(obj))
return toString(obj)+"n";return toString(obj);}
function isUInt32(obj)
{if(typeof obj==="number")
return obj>>>0===obj&&(obj>0||1/obj>0);return""+(obj>>>0)===obj;}
function isSymbol(value)
{return typeof value==="symbol";}
function isBigInt(value)
{return typeof value==="bigint";}
function isEmptyObject(object)
{for(let key in object)
return false;return true;}
function isDefined(value)
{return!!value||InjectedScriptHost.isHTMLAllCollection(value);}
function isPrimitiveValue(value)
{switch(typeof value){case"boolean":case"number":case"string":return true;case"undefined":return!InjectedScriptHost.isHTMLAllCollection(value);default:return false;}}
let InjectedScript=class InjectedScript
{constructor()
{this._lastBoundObjectId=1;this._idToWrappedObject={};this._idToObjectGroupName={};this._objectGroups={};this._modules={};this._nextSavedResultIndex=1;this._savedResults=[];} 
execute(functionString,objectGroup,includeCommandLineAPI,returnByValue,generatePreview,saveResult,args)
{return this._wrapAndSaveCall(objectGroup,returnByValue,generatePreview,saveResult,()=>{const isEvalOnCallFrame=false;return this._evaluateOn(InjectedScriptHost.evaluateWithScopeExtension,InjectedScriptHost,functionString,isEvalOnCallFrame,includeCommandLineAPI).apply(undefined,args);});}
evaluate(expression,objectGroup,includeCommandLineAPI,returnByValue,generatePreview,saveResult)
{const isEvalOnCallFrame=false;return this._evaluateAndWrap(InjectedScriptHost.evaluateWithScopeExtension,InjectedScriptHost,expression,objectGroup,isEvalOnCallFrame,includeCommandLineAPI,returnByValue,generatePreview,saveResult);}
awaitPromise(promiseObjectId,returnByValue,generatePreview,saveResult,callback)
{let parsedPromiseObjectId=this._parseObjectId(promiseObjectId);let promiseObject=this._objectForId(parsedPromiseObjectId);let promiseObjectGroupName=this._idToObjectGroupName[parsedPromiseObjectId.id];if(!isDefined(promiseObject)){callback("Could not find object with given id");return;}
if(!(promiseObject instanceof Promise)){callback("Object with given id is not a Promise");return;}
let resolve=(value)=>{let returnObject={wasThrown:false,result:RemoteObject.create(value,promiseObjectGroupName,returnByValue,generatePreview),};if(saveResult){this._savedResultIndex=0;this._saveResult(returnObject.result);if(this._savedResultIndex)
returnObject.savedResultIndex=this._savedResultIndex;}
callback(returnObject);};let reject=(reason)=>{callback(this._createThrownValue(reason,promiseObjectGroupName));};promiseObject.then(resolve,reject);}
evaluateOnCallFrame(topCallFrame,callFrameId,expression,objectGroup,includeCommandLineAPI,returnByValue,generatePreview,saveResult)
{let callFrame=this._callFrameForId(topCallFrame,callFrameId);if(!callFrame)
return"Could not find call frame with given id";const isEvalOnCallFrame=true;return this._evaluateAndWrap(callFrame.evaluateWithScopeExtension,callFrame,expression,objectGroup,isEvalOnCallFrame,includeCommandLineAPI,returnByValue,generatePreview,saveResult);}
callFunctionOn(objectId,expression,args,returnByValue,generatePreview)
{let parsedObjectId=this._parseObjectId(objectId);let object=this._objectForId(parsedObjectId);let objectGroupName=this._idToObjectGroupName[parsedObjectId.id];if(!isDefined(object))
return"Could not find object with given id";let resolvedArgs=[];if(args){let callArgs=InjectedScriptHost.evaluate(args);for(let i=0;i<callArgs.length;++i){try{resolvedArgs[i]=this._resolveCallArgument(callArgs[i]);}catch(e){return String(e);}}}
try{let func=InjectedScriptHost.evaluate("("+expression+")");if(typeof func!=="function")
return"Given expression does not evaluate to a function";return{wasThrown:false,result:RemoteObject.create(func.apply(object,resolvedArgs),objectGroupName,returnByValue,generatePreview)};}catch(e){return this._createThrownValue(e,objectGroupName);}}
getFunctionDetails(objectId)
{let parsedObjectId=this._parseObjectId(objectId);let object=this._objectForId(parsedObjectId);if(typeof object!=="function")
return"Cannot resolve function by id.";return this.functionDetails(object);}
functionDetails(func)
{let details=InjectedScriptHost.functionDetails(func);if(!details)
return"Cannot resolve function details.";return details;}
getPreview(objectId)
{let parsedObjectId=this._parseObjectId(objectId);let object=this._objectForId(parsedObjectId);return RemoteObject.createObjectPreviewForValue(object,true);}
getProperties(objectId,ownProperties,fetchStart,fetchCount,generatePreview)
{let collectionMode=ownProperties?InjectedScript.CollectionMode.OwnProperties:InjectedScript.CollectionMode.AllProperties;return this._getProperties(objectId,collectionMode,{fetchStart,fetchCount,generatePreview});}
getDisplayableProperties(objectId,fetchStart,fetchCount,generatePreview)
{let collectionMode=InjectedScript.CollectionMode.OwnProperties|InjectedScript.CollectionMode.NativeGetterProperties;return this._getProperties(objectId,collectionMode,{fetchStart,fetchCount,generatePreview,nativeGettersAsValues:true});}
getInternalProperties(objectId,generatePreview)
{let parsedObjectId=this._parseObjectId(objectId);let object=this._objectForId(parsedObjectId);let objectGroupName=this._idToObjectGroupName[parsedObjectId.id];if(!isDefined(object))
return false;if(isSymbol(object))
return false;let descriptors=this._internalPropertyDescriptors(object);if(!descriptors)
return[];for(let i=0;i<descriptors.length;++i){let descriptor=descriptors[i];if("value"in descriptor)
descriptor.value=RemoteObject.create(descriptor.value,objectGroupName,false,generatePreview);}
return descriptors;}
getCollectionEntries(objectId,objectGroupName,fetchStart,fetchCount)
{let parsedObjectId=this._parseObjectId(objectId);let object=this._objectForId(parsedObjectId);objectGroupName=objectGroupName||this._idToObjectGroupName[parsedObjectId.id];if(!isDefined(object))
return;if(typeof object!=="object")
return;let entries=this._entries(object,InjectedScriptHost.subtype(object),fetchStart,fetchCount);return entries.map(function(entry){entry.value=RemoteObject.create(entry.value,objectGroupName,false,true);if("key"in entry)
entry.key=RemoteObject.create(entry.key,objectGroupName,false,true);return entry;});}
saveResult(callArgumentJSON)
{this._savedResultIndex=0;try{let callArgument=InjectedScriptHost.evaluate("("+callArgumentJSON+")");let value=this._resolveCallArgument(callArgument);this._saveResult(value);}catch{}
return this._savedResultIndex;}
wrapCallFrames(callFrame)
{if(!callFrame)
return false;let result=[];let depth=0;do{result.push(new InjectedScript.CallFrameProxy(depth++,callFrame));callFrame=callFrame.caller;}while(callFrame);return result;}
wrapObject(object,groupName,canAccessInspectedGlobalObject,generatePreview)
{if(!canAccessInspectedGlobalObject)
return this._fallbackWrapper(object);return RemoteObject.create(object,groupName,false,generatePreview);}
wrapJSONString(jsonString,groupName,generatePreview)
{try{return this.wrapObject(JSON.parse(jsonString),groupName,true,generatePreview);}catch{return null;}}
wrapTable(canAccessInspectedGlobalObject,table,columns)
{if(!canAccessInspectedGlobalObject)
return this._fallbackWrapper(table);
let columnNames=null;if(typeof columns==="string")
columns=[columns];if(InjectedScriptHost.subtype(columns)==="array"){columnNames=[];for(let i=0;i<columns.length;++i)
columnNames.push(toString(columns[i]));}
return RemoteObject.create(table,"console",false,true,columnNames);}
previewValue(value)
{return RemoteObject.createObjectPreviewForValue(value,true);}
setEventValue(value)
{this._eventValue=value;}
clearEventValue()
{delete this._eventValue;}
setExceptionValue(value)
{this._exceptionValue=value;}
clearExceptionValue()
{delete this._exceptionValue;}
findObjectById(objectId)
{let parsedObjectId=this._parseObjectId(objectId);return this._objectForId(parsedObjectId);}
releaseObject(objectId)
{let parsedObjectId=this._parseObjectId(objectId);this._releaseObject(parsedObjectId.id);}
releaseObjectGroup(objectGroupName)
{if(objectGroupName==="console"){delete this._lastResult;this._nextSavedResultIndex=1;this._savedResults=[];}
let group=this._objectGroups[objectGroupName];if(!group)
return;for(let i=0;i<group.length;i++)
this._releaseObject(group[i]);delete this._objectGroups[objectGroupName];}
createCommandLineAPIObject(callFrame)
{return new CommandLineAPI(callFrame||null);} 
inspectObject(object)
{if(this._inspectObject)
this._inspectObject(object);} 
hasInjectedModule(name)
{return this._modules[name];}
injectModule(name,source,host)
{this._modules[name]=false;let moduleFunction=InjectedScriptHost.evaluate("("+source+")");if(typeof moduleFunction!=="function")
throw"Error: Web Inspector: a function was expected for injectModule";moduleFunction(InjectedScriptHost,inspectedGlobalObject,injectedScriptId,this,{RemoteObject,CommandLineAPI},host);this._modules[name]=true;} 
isPrimitiveValue(value)
{return isPrimitiveValue(value);} 
_parseObjectId(objectId)
{return InjectedScriptHost.evaluate("("+objectId+")");}
_objectForId(objectId)
{return this._idToWrappedObject[objectId.id];}
_bind(object,objectGroupName)
{let id=this._lastBoundObjectId++;let objectId=`{"injectedScriptId":${injectedScriptId},"id":${id}}`;this._idToWrappedObject[id]=object;if(objectGroupName){let group=this._objectGroups[objectGroupName];if(!group){group=[];this._objectGroups[objectGroupName]=group;}
group.push(id);this._idToObjectGroupName[id]=objectGroupName;}
return objectId;}
_releaseObject(id)
{delete this._idToWrappedObject[id];delete this._idToObjectGroupName[id];}
_fallbackWrapper(object)
{let result={};result.type=typeof object;if(isPrimitiveValue(object))
result.value=object;else
result.description=toStringDescription(object);return result;}
_resolveCallArgument(callArgumentJSON)
{if("value"in callArgumentJSON)
return callArgumentJSON.value;let objectId=callArgumentJSON.objectId;if(objectId){let parsedArgId=this._parseObjectId(objectId);if(!parsedArgId||parsedArgId["injectedScriptId"]!==injectedScriptId)
throw"Arguments should belong to the same JavaScript world as the target object.";let resolvedArg=this._objectForId(parsedArgId);if(!isDefined(resolvedArg))
throw"Could not find object with given id";return resolvedArg;}
return undefined;}
_createThrownValue(value,objectGroup)
{let remoteObject=RemoteObject.create(value,objectGroup);try{remoteObject.description=toStringDescription(value);}catch{}
return{wasThrown:true,result:remoteObject};}
_evaluateAndWrap(evalFunction,object,expression,objectGroup,isEvalOnCallFrame,includeCommandLineAPI,returnByValue,generatePreview,saveResult)
{return this._wrapAndSaveCall(objectGroup,returnByValue,generatePreview,saveResult,()=>{return this._evaluateOn(evalFunction,object,expression,isEvalOnCallFrame,includeCommandLineAPI);});}
_wrapAndSaveCall(objectGroup,returnByValue,generatePreview,saveResult,func)
{return this._wrapCall(objectGroup,returnByValue,generatePreview,saveResult,()=>{let result=func();if(saveResult)
this._saveResult(result);return result;});}
_wrapCall(objectGroup,returnByValue,generatePreview,saveResult,func)
{try{this._savedResultIndex=0;let returnObject={wasThrown:false,result:RemoteObject.create(func(),objectGroup,returnByValue,generatePreview)};if(saveResult&&this._savedResultIndex)
returnObject.savedResultIndex=this._savedResultIndex;return returnObject;}catch(e){return this._createThrownValue(e,objectGroup);}}
_evaluateOn(evalFunction,object,expression,isEvalOnCallFrame,includeCommandLineAPI)
{let commandLineAPI=null;if(includeCommandLineAPI)
commandLineAPI=this.createCommandLineAPIObject(isEvalOnCallFrame?object:null);return evalFunction.call(object,expression,commandLineAPI);}
_callFrameForId(topCallFrame,callFrameId)
{let parsedCallFrameId=InjectedScriptHost.evaluate("("+callFrameId+")");let ordinal=parsedCallFrameId["ordinal"];let callFrame=topCallFrame;while(--ordinal>=0&&callFrame)
callFrame=callFrame.caller;return callFrame;}
_getProperties(objectId,collectionMode,{fetchStart,fetchCount,generatePreview,nativeGettersAsValues})
{let parsedObjectId=this._parseObjectId(objectId);let object=this._objectForId(parsedObjectId);let objectGroupName=this._idToObjectGroupName[parsedObjectId.id];if(!isDefined(object))
return false;if(isSymbol(object))
return false;let start=fetchStart||0;if(start<0)
start=0;let count=fetchCount||0;if(count<0)
count=0;let includeProto=!start;let descriptors=[];this._forEachPropertyDescriptor(object,collectionMode,(descriptor)=>{if(start>0){--start;return InjectedScript.PropertyFetchAction.Continue;}
if("get"in descriptor)
descriptor.get=RemoteObject.create(descriptor.get,objectGroupName);if("set"in descriptor)
descriptor.set=RemoteObject.create(descriptor.set,objectGroupName);if("value"in descriptor)
descriptor.value=RemoteObject.create(descriptor.value,objectGroupName,false,generatePreview);if("symbol"in descriptor)
descriptor.symbol=RemoteObject.create(descriptor.symbol,objectGroupName);descriptors.push(descriptor);if(includeProto&&count&&descriptors.length>=count&&descriptor.name!=="__proto__")
return InjectedScript.PropertyFetchAction.Stop;return(count&&descriptors.length>=count)?InjectedScript.PropertyFetchAction.Stop:InjectedScript.PropertyFetchAction.Continue;},{nativeGettersAsValues,includeProto});return descriptors;}
_internalPropertyDescriptors(object,completeDescriptor)
{let internalProperties=InjectedScriptHost.getInternalProperties(object);if(!internalProperties)
return null;let descriptors=[];for(let i=0;i<internalProperties.length;i++){let property=internalProperties[i];let descriptor={name:property.name,value:property.value};if(completeDescriptor)
descriptor.isOwn=true;descriptors.push(descriptor);}
return descriptors;}
_forEachPropertyDescriptor(object,collectionMode,callback,{nativeGettersAsValues,includeProto})
{if(InjectedScriptHost.subtype(object)==="proxy")
return;let nameProcessed=new Set;nameProcessed.add("__proto__");function createFakeValueDescriptor(name,symbol,descriptor,isOwnProperty,possibleNativeBindingGetter)
{try{let fakeDescriptor={name,value:object[name]};if(descriptor){if(descriptor.writable)
fakeDescriptor.writable=true;if(descriptor.configurable)
fakeDescriptor.configurable=true;if(descriptor.enumerable)
fakeDescriptor.enumerable=true;}
if(possibleNativeBindingGetter)
fakeDescriptor.nativeGetter=true;if(isOwnProperty)
fakeDescriptor.isOwn=true;if(symbol)
fakeDescriptor.symbol=symbol;if(fakeDescriptor.value instanceof Promise&&InjectedScriptHost.isPromiseRejectedWithNativeGetterTypeError(fakeDescriptor.value))
fakeDescriptor.value.catch(function(){});return fakeDescriptor;}catch(e){let errorDescriptor={name,value:e,wasThrown:true};if(isOwnProperty)
errorDescriptor.isOwn=true;if(symbol)
errorDescriptor.symbol=symbol;return errorDescriptor;}}
function processDescriptor(descriptor,isOwnProperty,possibleNativeBindingGetter)
{if(collectionMode&InjectedScript.CollectionMode.AllProperties)
return callback(descriptor);if(collectionMode&InjectedScript.CollectionMode.OwnProperties&&isOwnProperty)
return callback(descriptor);if(collectionMode&InjectedScript.CollectionMode.NativeGetterProperties){if(possibleNativeBindingGetter)
return callback(descriptor);}}
function processProperty(o,propertyName,isOwnProperty)
{if(nameProcessed.has(propertyName))
return InjectedScript.PropertyFetchAction.Continue;nameProcessed.add(propertyName);let name=toString(propertyName);let symbol=isSymbol(propertyName)?propertyName:null;let descriptor=Object.getOwnPropertyDescriptor(o,propertyName);if(!descriptor){let fakeDescriptor=createFakeValueDescriptor(name,symbol,descriptor,isOwnProperty);return processDescriptor(fakeDescriptor,isOwnProperty);}
if(nativeGettersAsValues){if(String(descriptor.get).endsWith("[native code]\n}")||(!descriptor.get&&descriptor.hasOwnProperty("get")&&!descriptor.set&&descriptor.hasOwnProperty("set"))){let fakeDescriptor=createFakeValueDescriptor(name,symbol,descriptor,isOwnProperty,true);return processDescriptor(fakeDescriptor,isOwnProperty,true);}}
descriptor.name=name;if(isOwnProperty)
descriptor.isOwn=true;if(symbol)
descriptor.symbol=symbol;return processDescriptor(descriptor,isOwnProperty);}
let isArrayLike=false;try{isArrayLike=RemoteObject.subtype(object)==="array"&&isFinite(object.length)&&object.length>0;}catch{}
for(let o=object;isDefined(o);o=Object.getPrototypeOf(o)){let isOwnProperty=o===object;let shouldBreak=false; if(isArrayLike&&isOwnProperty){for(let i=0;i<o.length;++i){if(!(i in o))
continue;let result=processProperty(o,toString(i),isOwnProperty);shouldBreak=result===InjectedScript.PropertyFetchAction.Stop;if(shouldBreak)
break;}}else{let propertyNames=Object.getOwnPropertyNames(o);for(let i=0;i<propertyNames.length;++i){let result=processProperty(o,propertyNames[i],isOwnProperty);shouldBreak=result===InjectedScript.PropertyFetchAction.Stop;if(shouldBreak)
break;}}
if(shouldBreak)
break;if(Object.getOwnPropertySymbols){let propertySymbols=Object.getOwnPropertySymbols(o);for(let i=0;i<propertySymbols.length;++i){let result=processProperty(o,propertySymbols[i],isOwnProperty);shouldBreak=result===InjectedScript.PropertyFetchAction.Stop;if(shouldBreak)
break;}}
if(shouldBreak)
break;if(collectionMode===InjectedScript.CollectionMode.OwnProperties)
break;}
if(includeProto){try{if(object.__proto__)
callback({name:"__proto__",value:object.__proto__,writable:true,configurable:true,isOwn:true});}catch{}}}
_getSetEntries(object,fetchStart,fetchCount)
{let entries=[];for(let value of object){if(fetchStart>0){fetchStart--;continue;}
entries.push({value});if(fetchCount&&entries.length===fetchCount)
break;}
return entries;}
_getMapEntries(object,fetchStart,fetchCount)
{let entries=[];for(let[key,value]of object){if(fetchStart>0){fetchStart--;continue;}
entries.push({key,value});if(fetchCount&&entries.length===fetchCount)
break;}
return entries;}
_getWeakMapEntries(object,fetchCount)
{return InjectedScriptHost.weakMapEntries(object,fetchCount);}
_getWeakSetEntries(object,fetchCount)
{return InjectedScriptHost.weakSetEntries(object,fetchCount);}
_getIteratorEntries(object,fetchCount)
{return InjectedScriptHost.iteratorEntries(object,fetchCount);}
_entries(object,subtype,fetchStart,fetchCount)
{if(subtype==="set")
return this._getSetEntries(object,fetchStart,fetchCount);if(subtype==="map")
return this._getMapEntries(object,fetchStart,fetchCount);if(subtype==="weakmap")
return this._getWeakMapEntries(object,fetchCount);if(subtype==="weakset")
return this._getWeakSetEntries(object,fetchCount);if(subtype==="iterator")
return this._getIteratorEntries(object,fetchCount);throw"unexpected type";}
_saveResult(result)
{this._lastResult=result;if(result===undefined||result===null)
return;let existingIndex=this._savedResults.indexOf(result);if(existingIndex!==-1){this._savedResultIndex=existingIndex;return;}
this._savedResultIndex=this._nextSavedResultIndex;this._savedResults[this._nextSavedResultIndex++]=result;if(this._nextSavedResultIndex>=100)
this._nextSavedResultIndex=1;}};InjectedScript.CollectionMode={OwnProperties:1<<0,NativeGetterProperties:1<<1,AllProperties:1<<2,};InjectedScript.PropertyFetchAction={Continue:Symbol("continue"),Stop:Symbol("stop"),}
var injectedScript=new InjectedScript;let RemoteObject=class RemoteObject
{constructor(object,objectGroupName,forceValueType,generatePreview,columnNames)
{this.type=typeof object;if(this.type==="undefined"&&InjectedScriptHost.isHTMLAllCollection(object))
this.type="object";if(isPrimitiveValue(object)||isBigInt(object)||object===null||forceValueType){if(this.type!=="undefined"&&this.type!=="bigint")
this.value=object;if(object===null)
this.subtype="null";if(this.type==="number"||this.type==="bigint")
this.description=toStringDescription(object);return;}
this.objectId=injectedScript._bind(object,objectGroupName);let subtype=RemoteObject.subtype(object);if(subtype)
this.subtype=subtype;this.className=InjectedScriptHost.internalConstructorName(object);this.description=RemoteObject.describe(object);if(subtype==="array")
this.size=typeof object.length==="number"?object.length:0;else if(subtype==="set"||subtype==="map")
this.size=object.size;else if(subtype==="weakmap")
this.size=InjectedScriptHost.weakMapSize(object);else if(subtype==="weakset")
this.size=InjectedScriptHost.weakSetSize(object);else if(subtype==="class"){this.classPrototype=RemoteObject.create(object.prototype,objectGroupName);this.className=object.name;}
if(generatePreview&&this.type==="object"){if(subtype==="proxy"){this.preview=this._generatePreview(InjectedScriptHost.proxyTargetValue(object));this.preview.lossless=false;}else
this.preview=this._generatePreview(object,undefined,columnNames);}} 
static create(object,objectGroupName,forceValueType,generatePreview,columnNames)
{try{return new RemoteObject(object,objectGroupName,forceValueType,generatePreview,columnNames);}catch(e){let description;try{description=RemoteObject.describe(e);}catch(ex){alert(ex.message);description="<failed to convert exception to string>";}
return new RemoteObject(description);}}
static createObjectPreviewForValue(value,generatePreview,columnNames)
{let remoteObject=new RemoteObject(value,undefined,false,generatePreview,columnNames);if(remoteObject.objectId)
injectedScript.releaseObject(remoteObject.objectId);if(remoteObject.classPrototype&&remoteObject.classPrototype.objectId)
injectedScript.releaseObject(remoteObject.classPrototype.objectId);return remoteObject.preview||remoteObject._emptyPreview();}
static subtype(value)
{if(value===null)
return"null";if(isPrimitiveValue(value)||isBigInt(value)||isSymbol(value))
return null;if(InjectedScriptHost.isHTMLAllCollection(value))
return"array";let preciseType=InjectedScriptHost.subtype(value);if(preciseType)
return preciseType;try{if(typeof value.splice==="function"&&isFinite(value.length))
return"array";}catch{}
return null;}
static describe(value)
{if(isPrimitiveValue(value))
return null;if(isBigInt(value))
return null;if(isSymbol(value))
return toString(value);let subtype=RemoteObject.subtype(value);if(subtype==="regexp")
return toString(value);if(subtype==="date")
return toString(value);if(subtype==="error")
return toString(value);if(subtype==="proxy")
return"Proxy";if(subtype==="node")
return RemoteObject.nodePreview(value);let className=InjectedScriptHost.internalConstructorName(value);if(subtype==="array")
return className;if(subtype==="iterator"&&Symbol.toStringTag in value)
return value[Symbol.toStringTag];if(typeof value==="function")
return value.toString();if(className==="Object"){let constructorName=value.constructor&&value.constructor.name;if(constructorName)
return constructorName;}
return className;}
static nodePreview(node)
{let isXMLDocument=node.ownerDocument&&!!node.ownerDocument.xmlVersion;let nodeName=isXMLDocument?node.nodeName:node.nodeName.toLowerCase();switch(node.nodeType){case 1: if(node.id)
return"<"+nodeName+" id=\""+node.id+"\">";if(node.classList.length)
return"<"+nodeName+" class=\""+node.classList.toString().replace(/\s+/," ")+"\">";if(nodeName==="input"&&node.type)
return"<"+nodeName+" type=\""+node.type+"\">";return"<"+nodeName+">";case 3: return nodeName+" \""+node.nodeValue+"\"";case 8: return"<!--"+node.nodeValue+"-->";case 10: return"<!DOCTYPE "+nodeName+">";default:return nodeName;}} 
_initialPreview()
{let preview={type:this.type,description:this.description||toString(this.value),lossless:true,};if(this.subtype){preview.subtype=this.subtype;if(this.subtype!=="null"){preview.overflow=false;preview.properties=[];}}
if("size"in this)
preview.size=this.size;return preview;}
_emptyPreview()
{let preview=this._initialPreview();if(this.subtype==="map"||this.subtype==="set"||this.subtype==="weakmap"||this.subtype==="weakset"||this.subtype==="iterator"){if(this.size){preview.entries=[];preview.lossless=false;preview.overflow=true;}}
return preview;}
_generatePreview(object,firstLevelKeys,secondLevelKeys)
{let preview=this._initialPreview();let isTableRowsRequest=secondLevelKeys===null||secondLevelKeys;let firstLevelKeysCount=firstLevelKeys?firstLevelKeys.length:0;let propertiesThreshold={properties:isTableRowsRequest?1000:Math.max(5,firstLevelKeysCount),indexes:isTableRowsRequest?1000:Math.max(10,firstLevelKeysCount)};try{if(this.subtype==="map"||this.subtype==="set"||this.subtype==="weakmap"||this.subtype==="weakset"||this.subtype==="iterator")
this._appendEntryPreviews(object,preview);preview.properties=[];let internalPropertyDescriptors=injectedScript._internalPropertyDescriptors(object,true);if(internalPropertyDescriptors){for(let i=0;i<internalPropertyDescriptors.length;++i){let result=this._appendPropertyPreview(object,preview,internalPropertyDescriptors[i],propertiesThreshold,firstLevelKeys,secondLevelKeys,{internal:true});if(result===InjectedScript.PropertyFetchAction.Stop)
return preview;}}
if(preview.entries)
return preview;injectedScript._forEachPropertyDescriptor(object,InjectedScript.CollectionMode.AllProperties,(descriptor)=>{return this._appendPropertyPreview(object,preview,descriptor,propertiesThreshold,firstLevelKeys,secondLevelKeys);},{nativeGettersAsValues:true,includeProto:true})}catch{preview.lossless=false;}
return preview;}
_appendPropertyPreview(object,preview,descriptor,propertiesThreshold,firstLevelKeys,secondLevelKeys,{internal}={})
{if(descriptor.wasThrown){preview.lossless=false;return InjectedScript.PropertyFetchAction.Continue;}
let name=descriptor.name;if(name==="__proto__"){if(descriptor.value&&descriptor.value.constructor&&descriptor.value.constructor!==Object&&descriptor.value.constructor!==Array&&descriptor.value.constructor!==RegExp)
preview.lossless=false;return InjectedScript.PropertyFetchAction.Continue;}
if(this.subtype==="array"&&!isUInt32(name))
return InjectedScript.PropertyFetchAction.Continue;if(!descriptor.enumerable&&!descriptor.isOwn&&!(this.subtype==="array"||(this.subtype!=="regexp"&&descriptor.nativeGetter)))
return InjectedScript.PropertyFetchAction.Continue;if(firstLevelKeys&&!firstLevelKeys.includes(name))
return InjectedScript.PropertyFetchAction.Continue;function appendPreview(property){if(toString(property.name>>>0)===property.name)
propertiesThreshold.indexes--;else
propertiesThreshold.properties--;if(propertiesThreshold.indexes<0||propertiesThreshold.properties<0){preview.overflow=true;preview.lossless=false;return InjectedScript.PropertyFetchAction.Stop;}
if(internal)
property.internal=true;preview.properties.push(property);return InjectedScript.PropertyFetchAction.Continue;}
if(!("value"in descriptor)){preview.lossless=false;return appendPreview({name,type:"accessor"});}
let value=descriptor.value;if(value===null)
return appendPreview({name,type:"object",subtype:"null",value:"null"});let type=typeof value;if(!descriptor.enumerable&&type==="function")
return InjectedScript.PropertyFetchAction.Continue;if(InjectedScriptHost.isHTMLAllCollection(value))
type="object";const maxLength=100;if(isPrimitiveValue(value)||isBigInt(value)){if(type==="string"&&value.length>maxLength){value=this._abbreviateString(value,maxLength,true);preview.lossless=false;}
return appendPreview({name,type,value:toStringDescription(value)});}
if(isSymbol(value)){let symbolString=toString(value);if(symbolString.length>maxLength){symbolString=this._abbreviateString(symbolString,maxLength,true);preview.lossless=false;}
return appendPreview({name,type,value:symbolString});}
let property={name,type};let subtype=RemoteObject.subtype(value);if(subtype)
property.subtype=subtype;if((secondLevelKeys===null||secondLevelKeys)||this._isPreviewableObject(value,object)){let subPreview=RemoteObject.createObjectPreviewForValue(value,value!==object,secondLevelKeys);property.valuePreview=subPreview;if(!subPreview.lossless)
preview.lossless=false;if(subPreview.overflow)
preview.overflow=true;}else{let description="";if(type!=="function"||subtype==="class"){let fullDescription;if(subtype==="class")
fullDescription="class "+value.name;else if(subtype==="node")
fullDescription=RemoteObject.nodePreview(value);else
fullDescription=RemoteObject.describe(value);description=this._abbreviateString(fullDescription,maxLength,subtype==="regexp");}
property.value=description;preview.lossless=false;}
return appendPreview(property);}
_appendEntryPreviews(object,preview)
{let entries=injectedScript._entries(object,this.subtype,0,6);if(!entries)
return;if(entries.length>5){entries.pop();preview.overflow=true;preview.lossless=false;}
function updateMainPreview(subPreview){if(!subPreview.lossless)
preview.lossless=false;}
preview.entries=entries.map(function(entry){entry.value=RemoteObject.createObjectPreviewForValue(entry.value,entry.value!==object);updateMainPreview(entry.value);if("key"in entry){entry.key=RemoteObject.createObjectPreviewForValue(entry.key,entry.key!==object);updateMainPreview(entry.key);}
return entry;});}
_isPreviewableObject(value,object)
{let set=new Set;set.add(object);return this._isPreviewableObjectInternal(value,set,1);}
_isPreviewableObjectInternal(object,knownObjects,depth)
{if(depth>3)
return false;if(isPrimitiveValue(object)||isBigInt(object)||isSymbol(object))
return true;if(object===null)
return true;if(knownObjects.has(object))
return false;++depth;knownObjects.add(object);let subtype=RemoteObject.subtype(object);if(subtype==="array"){let length=object.length;if(length>5)
return false;for(let i=0;i<length;++i){if(!this._isPreviewableObjectInternal(object[i],knownObjects,depth))
return false;}
return true;}
if(object.__proto__&&object.__proto__.__proto__)
return false;let ownPropertyNames=Object.getOwnPropertyNames(object);if(ownPropertyNames.length>3)
return false;for(let i=0;i<ownPropertyNames.length;++i){let propertyName=ownPropertyNames[i];let descriptor=Object.getOwnPropertyDescriptor(object,propertyName);if(descriptor&&!("value"in descriptor))
return false;if(!this._isPreviewableObjectInternal(object[propertyName],knownObjects,depth))
return false;}
return true;}
_abbreviateString(string,maxLength,middle)
{if(string.length<=maxLength)
return string;if(middle){let leftHalf=maxLength>>1;let rightHalf=maxLength-leftHalf-1;return string.substr(0,leftHalf)+"\u2026"+string.substr(string.length-rightHalf,rightHalf);}
return string.substr(0,maxLength)+"\u2026";}};InjectedScript.CallFrameProxy=function(ordinal,callFrame)
{this.callFrameId=`{"ordinal":${ordinal},"injectedScriptId":${injectedScriptId}}`;this.functionName=callFrame.functionName;this.location={scriptId:String(callFrame.sourceID),lineNumber:callFrame.line,columnNumber:callFrame.column};this.scopeChain=this._wrapScopeChain(callFrame);this.this=RemoteObject.create(callFrame.thisObject,"backtrace");this.isTailDeleted=callFrame.isTailDeleted;};InjectedScript.CallFrameProxy.prototype={_wrapScopeChain(callFrame)
{let scopeChain=callFrame.scopeChain;let scopeDescriptions=callFrame.scopeDescriptions();let scopeChainProxy=[];for(let i=0;i<scopeChain.length;i++)
scopeChainProxy[i]=InjectedScript.CallFrameProxy._createScopeJson(scopeChain[i],scopeDescriptions[i],"backtrace");return scopeChainProxy;}};InjectedScript.CallFrameProxy._scopeTypeNames={0:"global", 1:"with", 2:"closure", 3:"catch", 4:"functionName", 5:"globalLexicalEnvironment", 6:"nestedLexical",};InjectedScript.CallFrameProxy._createScopeJson=function(object,{name,type,location},groupId)
{let scope={object:RemoteObject.create(object,groupId),type:InjectedScript.CallFrameProxy._scopeTypeNames[type],};if(name)
scope.name=name;if(location)
scope.location=location;if(isEmptyObject(object))
scope.empty=true;return scope;}
function CommandLineAPI(callFrame)
{let savedResultAlias=InjectedScriptHost.savedResultAlias;let defineGetter=(key,value,wrap)=>{if(wrap){let originalValue=value;value=function(){return originalValue;};}
this.__defineGetter__("$"+key,value);if(savedResultAlias&&savedResultAlias!=="$")
this.__defineGetter__(savedResultAlias+key,value);};if("_lastResult"in injectedScript)
defineGetter("_",injectedScript._lastResult,true);if("_exceptionValue"in injectedScript)
defineGetter("exception",injectedScript._exceptionValue,true);if("_eventValue"in injectedScript)
defineGetter("event",injectedScript._eventValue,true); for(let i=1;i<injectedScript._savedResults.length;++i)
defineGetter(i,injectedScript._savedResults[i],true);for(let name in CommandLineAPI.getters)
defineGetter(name,CommandLineAPI.getters[name]);for(let name in CommandLineAPI.methods)
this[name]=CommandLineAPI.methods[name];}
CommandLineAPI.getters={};CommandLineAPI.methods={};CommandLineAPI.methods["keys"]=function(object){return Object.keys(object);};CommandLineAPI.methods["values"]=function(object){return Object.values(object);};CommandLineAPI.methods["queryInstances"]=function(){return InjectedScriptHost.queryInstances(...arguments);};CommandLineAPI.methods["queryObjects"]=function(){return InjectedScriptHost.queryInstances(...arguments);};CommandLineAPI.methods["queryHolders"]=function(){return InjectedScriptHost.queryHolders(...arguments);};CommandLineAPI.methods["inspect"]=function(object){return injectedScript.inspectObject(object);};CommandLineAPI.methods["assert"]=function(){return inspectedGlobalObject.console.assert(...arguments);};CommandLineAPI.methods["clear"]=function(){return inspectedGlobalObject.console.clear(...arguments);};CommandLineAPI.methods["count"]=function(){return inspectedGlobalObject.console.count(...arguments);};CommandLineAPI.methods["countReset"]=function(){return inspectedGlobalObject.console.countReset(...arguments);};CommandLineAPI.methods["debug"]=function(){return inspectedGlobalObject.console.debug(...arguments);};CommandLineAPI.methods["dir"]=function(){return inspectedGlobalObject.console.dir(...arguments);};CommandLineAPI.methods["dirxml"]=function(){return inspectedGlobalObject.console.dirxml(...arguments);};CommandLineAPI.methods["error"]=function(){return inspectedGlobalObject.console.error(...arguments);};CommandLineAPI.methods["group"]=function(){return inspectedGlobalObject.console.group(...arguments);};CommandLineAPI.methods["groupCollapsed"]=function(){return inspectedGlobalObject.console.groupCollapsed(...arguments);};CommandLineAPI.methods["groupEnd"]=function(){return inspectedGlobalObject.console.groupEnd(...arguments);};CommandLineAPI.methods["info"]=function(){return inspectedGlobalObject.console.info(...arguments);};CommandLineAPI.methods["log"]=function(){return inspectedGlobalObject.console.log(...arguments);};CommandLineAPI.methods["profile"]=function(){return inspectedGlobalObject.console.profile(...arguments);};CommandLineAPI.methods["profileEnd"]=function(){return inspectedGlobalObject.console.profileEnd(...arguments);};CommandLineAPI.methods["record"]=function(){return inspectedGlobalObject.console.record(...arguments);};CommandLineAPI.methods["recordEnd"]=function(){return inspectedGlobalObject.console.recordEnd(...arguments);};CommandLineAPI.methods["screenshot"]=function(){return inspectedGlobalObject.console.screenshot(...arguments);};CommandLineAPI.methods["table"]=function(){return inspectedGlobalObject.console.table(...arguments);};CommandLineAPI.methods["takeHeapSnapshot"]=function(){return inspectedGlobalObject.console.takeHeapSnapshot(...arguments);};CommandLineAPI.methods["time"]=function(){return inspectedGlobalObject.console.time(...arguments);};CommandLineAPI.methods["timeEnd"]=function(){return inspectedGlobalObject.console.timeEnd(...arguments);};CommandLineAPI.methods["timeLog"]=function(){return inspectedGlobalObject.console.timeLog(...arguments);};CommandLineAPI.methods["timeStamp"]=function(){return inspectedGlobalObject.console.timeStamp(...arguments);};CommandLineAPI.methods["trace"]=function(){return inspectedGlobalObject.console.trace(...arguments);};CommandLineAPI.methods["warn"]=function(){return inspectedGlobalObject.console.warn(...arguments);};for(let name in CommandLineAPI.methods)
CommandLineAPI.methods[name].toString=function(){return"function "+name+"() { [Command Line API] }";};return injectedScript;})
[](){}+-*.,?\^$|
Q7NA
[fffP
 !"#$%&'()*+,-./
:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`a
cdeghijklm
yz{|}~
fkq)
The '
'()*+,-./0
123456789:;<=>?@ABCDEFGHIJ
123456789:;<=>?@ABCDEFGHIJ
 3@KSZ`fkoswz~
set 
get 
vvvvvvvvJvvMvvvvvvvvvvvvPSvvvvvvvvvvvvvvvvvvvVvY\_bvevvvvvvvvvvvvvvhvvvvvvvknvqvvvvt
                        
Approximate(
 sec)
NOT IMPLEMENTED YET
ASSERTION FAILED: %s
SHOULD NEVER BE REACHED
ASSERTION FAILED: 
ARGUMENT BAD: %s, %s
FATAL ERROR: 
error
warning
info
debug
Unknown logging level: %s
Unknown logging channel: %s
%s(%d) : %s
xmlns
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/AutomaticThread.cpp
void WTF::AutomaticThread::start(const WTF::AbstractLocker &)
WTF::AutomaticThread
auto WTF::AutomaticThread::start(const WTF::AbstractLocker &)::(anonymous class)::operator()() const
*** WebKit discarding exception: <%@> %@
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/cf/CFURLExtras.cpp
RetainPtr<CFDataRef> WTF::bytesAsCFData(CFURLRef)
WTF::String WTF::bytesAsString(CFURLRef)
Vector<uint8_t, URLBytesVectorInlineCapacity> WTF::bytesAsVector(CFURLRef)
bool WTF::isSameOrigin(CFURLRef, const WTF::URL &)
Wall
Monotonic
Approximate
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/ClockType.cpp
void WTF::printInternal(WTF::PrintStream &, WTF::ClockType)
AppleCollationOrder
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/ConcurrentPtrHashSet.cpp
bool WTF::ConcurrentPtrHashSet::addSlow(WTF::ConcurrentPtrHashSet::Table *, unsigned int, unsigned int, unsigned int, void *)
void WTF::ConcurrentPtrHashSet::resizeIfNecessary()
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/ConcurrentPtrHashSet.h
bool WTF::ConcurrentPtrHashSet::containsImpl(void *) const
bool WTF::ConcurrentPtrHashSet::addImpl(void *)
Lock not held!
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/LockAlgorithmInlines.h
static void WTF::LockAlgorithm<unsigned int, 1, 2, WTF::CountingLock::LockHooks>::lockSlow(Atomic<LockType> &) [LockType = unsigned int, isHeldBit = 1, hasParkedBit = 2, Hooks = WTF::CountingLock::LockHooks]
Lock not parked!
Invalid value for lock: 
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/posix/CPUTimePOSIX.cpp
static WTF::Seconds WTF::CPUTime::forCurrentThread()
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/Deque.h
T &WTF::Deque<WTF::CrossThreadTask, 0>::first() [T = WTF::CrossThreadTask, inlineCapacity = 0]
%pid
*** DataLog output to "%s" ***
Warning: Could not open DataLog file %s for writing.
January
February
March
April
June
July
August
September
October
November
December
janfebmaraprmayjunjulaugsepoctnovdec
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/text/StringConcatenate.h
static unsigned int WTF::StringTypeAdapter<const unsigned char *>::computeLength(const LChar *)
Infinity
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/FastBitVector.cpp
void WTF::FastBitVectorWordOwner::resizeSlow(size_t)
Source object not allocated
v16@?0@"NSURL"8
-XXXXXXXX
WebKitGeneratedFileXXXXXX
createPKZip
sequesterResources
keepParent
copyResources
BOMCopierNew
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/cocoa/FileSystemCocoa.mm
BOMCopier initBOMCopierNew()
/System/Library/PrivateFrameworks/Bom.framework/Bom
void *BomLibrary()_block_invoke
BOMCopierCopyWithOptions
int initBOMCopierCopyWithOptions(BOMCopier, const char *, const char *, CFDictionaryRef)
BOMCopierFree
void initBOMCopierFree(BOMCopier)
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/Gigacage.cpp
void Gigacage::alignedFree(Gigacage::Kind, void *)
void Gigacage::free(Gigacage::Kind, void *)
void Gigacage::freeVirtualPages(Gigacage::Kind, void *, size_t)
void *Gigacage::malloc(Gigacage::Kind, size_t)
void *Gigacage::mallocArray(Gigacage::Kind, size_t, size_t)
null
true
false
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/JSONValues.cpp
Ref<WTF::JSONImpl::Value> WTF::JSONImpl::ArrayBase::get(size_t) const
Trying to free JSValue that is not caged: 
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/JSValueMalloc.cpp
void WTF::jsValueFree(void *)
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/ThreadSpecific.h
T *WTF::ThreadSpecific<WTF::LineBreakIteratorPool, WTF::CanBeGCThread::False>::set() [T = WTF::LineBreakIteratorPool, canBeGCThread = WTF::CanBeGCThread::False]
static void WTF::LockAlgorithm<unsigned char, '\x01', '\x02'>::lockSlow(Atomic<LockType> &) [LockType = unsigned char, isHeldBit = '\x01', hasParkedBit = '\x02', Hooks = WTF::EmptyLockHooks<unsigned char>]
Language
com.apple.WebKit
RefCountedLeaks
Process
Threading
MemoryPressure
, invalid
value
invalid
POSITIVE_INFINITY
NEGATIVE_INFINITY
numerator
denominator
flags
start
Unable to shrink memory footprint of process (%zu MB) below the kill thresold (%zu MB). Killed
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/MemoryPressureHandler.cpp
void WTF::MemoryPressureHandler::shrinkOrDie(size_t)
Total
void WTF::MemoryPressureHandler::setDispatchQueue(OSObjectPtr<dispatch_queue_t> &&)
Unrestricted
Conservative
Strict
v8@?0
org.WebKit.lowMemory
v12@?0i8
org.WebKit.lowMemory.begin
org.WebKit.lowMemory.end
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/MetaAllocator.cpp
MetaAllocator::FreeSpacePtr WTF::MetaAllocator::findAndRemoveFreeSpace(size_t)
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/WTFConfig.h
WTF::Config::AssertNotFrozenScope::AssertNotFrozenScope()
WTF::Config::AssertNotFrozenScope::~AssertNotFrozenScope()
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/RedBlackTree.h
static NodeType *WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode, unsigned long>::treeMinimum(NodeType *) [NodeType = WTF::MetaAllocator::FreeSpaceNode, KeyType = unsigned long]
const NodeType *WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode, unsigned long>::Node::successor() const [NodeType = WTF::MetaAllocator::FreeSpaceNode, KeyType = unsigned long]
void WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode, unsigned long>::removeFixup(NodeType *, NodeType *) [NodeType = WTF::MetaAllocator::FreeSpaceNode, KeyType = unsigned long]
void WTF::RedBlackTree<WTF::MetaAllocatorHandle, void *>::insert(NodeType *) [NodeType = WTF::MetaAllocatorHandle, KeyType = void *]
void WTF::RedBlackTree<WTF::MetaAllocatorHandle, void *>::treeInsert(NodeType *) [NodeType = WTF::MetaAllocatorHandle, KeyType = void *]
static NodeType *WTF::RedBlackTree<WTF::MetaAllocatorHandle, void *>::treeMinimum(NodeType *) [NodeType = WTF::MetaAllocatorHandle, KeyType = void *]
void WTF::RedBlackTree<WTF::MetaAllocatorHandle, void *>::removeFixup(NodeType *, NodeType *) [NodeType = WTF::MetaAllocatorHandle, KeyType = void *]
NodeType *WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode, unsigned long>::findLeastGreaterThanOrEqual(const KeyType &) const [NodeType = WTF::MetaAllocator::FreeSpaceNode, KeyType = unsigned long]
void WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode, unsigned long>::insert(NodeType *) [NodeType = WTF::MetaAllocator::FreeSpaceNode, KeyType = unsigned long]
void WTF::RedBlackTree<WTF::MetaAllocator::FreeSpaceNode, unsigned long>::treeInsert(NodeType *) [NodeType = WTF::MetaAllocator::FreeSpaceNode, KeyType = unsigned long]
Monotonic(
 sec)
IDNScriptWhiteList.txt
 #%*[^
]%*[
 %32[^# 
]%*[^# 
WTF_numberOfProcessorCores
WARNING: failed to parse WTF_numberOfProcessorCores=%s
initial string... lol
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/PageBlock.cpp
size_t WTF::pageSize()
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/ParallelHelperPool.cpp
WTF::ParallelHelperClient::ParallelHelperClient(RefPtr<WTF::ParallelHelperPool> &&)
void WTF::ParallelHelperClient::setTask(RefPtr<SharedTask<void ()>> &&)
void WTF::ParallelHelperClient::runTask(const RefPtr<SharedTask<void ()>> &)
WTF::ParallelHelperPool::~ParallelHelperPool()
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/ParkingLot.cpp
static ParkingLot::ParkResult WTF::ParkingLot::parkConditionallyImpl(const void *, const ScopedLambda<bool ()> &, const ScopedLambda<void ()> &, const WTF::TimeWithDynamicClockType &)
void WTF::(anonymous namespace)::ensureHashtableSize(unsigned int)
auto WTF::ParkingLot::unparkOneImpl(const void *, const ScopedLambda<intptr_t (ParkingLot::UnparkResult)> &)::(anonymous class)::operator()(bool) const
StringView
String
(null StringImpl*)
StringImpl*
%lld
%llu
(Out of memory while converting 
 to utf8)
(failed to convert 
true
false
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/RandomDevice.cpp
void WTF::RandomDevice::cryptographicallyRandomValues(unsigned char *, size_t)
Per-tag breakdown of memory reclaimed by pressure handler:
  ## %16s %10s %10s %10s
VM Tag
Before
After
Diff
  %02X %16s %10ld %10ld %10ld
CG image
CG raster data
CoreServices
dylib
Foundation
ImageIO
IOAccelerator
IOSurface
IOKit
Gigacage
JSC JIT
IsoHeap
CoreAnimation
libdispatch
malloc
malloc (huge)
malloc (large)
malloc (medium)
malloc (nano)
malloc (small)
malloc (tiny)
os_alloc_once
SQLite
Stack
bmalloc
pmap (unshared)
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/RunLoop.cpp
static void WTF::RunLoop::initializeMain()
static void WTF::RunLoop::initializeWeb()
virtual void WTF::RunLoop::dispatch(Function<void ()> &&)
void WTF::RunLoop::dispatchAfter(WTF::Seconds, Function<void ()> &&)
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/ThreadSpecific.h
T *WTF::ThreadSpecific<WTF::RunLoop::Holder, WTF::CanBeGCThread::False>::set() [T = WTF::RunLoop::Holder, canBeGCThread = WTF::CanBeGCThread::False]
%s %d
Unknown error
 sec
%02X
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/threads/Signals.cpp
void WTF::SignalHandlers::add(WTF::Signal, WTF::SignalHandler &&)
We should not have called catch_exception_raise(), please file a bug at bugs.webkit.org
We should not have called catch_mach_exception_raise_state_identity, please file a bug at bugs.webkit.org
kern_return_t WTF::catch_mach_exception_raise_state(mach_port_t, exception_type_t, const mach_exception_data_t, mach_msg_type_number_t, int *, const thread_state_t, mach_msg_type_number_t, thread_state_t, mach_msg_type_number_t *)
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/WTFConfig.h
WTF::Config::AssertNotFrozenScope::AssertNotFrozenScope()
WTF::Config::AssertNotFrozenScope::~AssertNotFrozenScope()
exception_mask_t WTF::toMachMask(WTF::Signal)
thread set port failed due to 
auto WTF::startMachExceptionHandlerThread()::(anonymous class)::operator()() const
auto WTF::startMachExceptionHandlerThread()::(anonymous class)::operator()() const_block_invoke
v8@?0
auto WTF::addSignalHandler(WTF::Signal, WTF::SignalHandler &&)::(anonymous class)::operator()() const
We somehow got called for an unknown signal 
, help.
Unable to restore the default handler while processing signal 
 the process is probably deadlocked. (errno: 
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/threads/Signals.h
std::tuple<int, std::optional<int>> WTF::toSystemSignal(WTF::Signal)
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/SixCharacterHash.cpp
unsigned int WTF::sixCharacterHashStringToInteger(const char *)
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/StackTrace.cpp
static std::unique_ptr<StackTrace> WTF::StackTrace::captureStackTrace(int, int)
%s%s%-3d %p %s
%s%s%-3d %p
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/text/StringBuilder.cpp
void WTF::StringBuilder::reifyString() const
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/text/StringBuilder.h
unsigned int WTF::StringBuilder::length() const
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/text/StringImpl.cpp
WTF::CString WTF::StringImpl::utf8(WTF::ConversionMode) const
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/text/StringImpl.h
unsigned int WTF::lengthOfNullTerminatedString(const CharacterType *) [CharacterType = char16_t]
WTF::String-based allocator
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/text/StringView.cpp
WTF::CString WTF::StringView::utf8(WTF::ConversionMode) const
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/SuspendableWorkQueue.cpp
virtual void WTF::SuspendableWorkQueue::dispatchSync(Function<void ()> &&)
v8@?0
WEBKIT_SIGNPOSTS_ENABLED
Signposts
loose
normal
strict
AppleTextBreakLocale
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/Threading.cpp
static Ref<WTF::Thread> WTF::Thread::create(const char *, Function<void ()> &&, WTF::ThreadType, WTF::Thread::QOS)
Thread:
JSC_SIGNAL_FOR_GC
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/posix/ThreadingPOSIX.cpp
Expected<void, WTF::Thread::PlatformSuspendError> WTF::Thread::suspend(const WTF::ThreadSuspendLocker &)
size_t WTF::Thread::getRegisters(const WTF::ThreadSuspendLocker &, WTF::PlatformRegisters &)
JavaScript garbage collection failed because thread_get_state returned an error (%d). This is probably the result of running inside Rosetta, which is not supported.
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/TimeWithDynamicClockType.cpp
static WTF::TimeWithDynamicClockType WTF::TimeWithDynamicClockType::now(WTF::ClockType)
WTF::WallTime WTF::TimeWithDynamicClockType::wallTime() const
WTF::MonotonicTime WTF::TimeWithDynamicClockType::monotonicTime() const
WTF::ApproximateTime WTF::TimeWithDynamicClockType::approximateTime() const
WTF::WallTime WTF::TimeWithDynamicClockType::approximateWallTime() const
WTF::MonotonicTime WTF::TimeWithDynamicClockType::approximateMonotonicTime() const
WTF::Seconds WTF::TimeWithDynamicClockType::operator-(const WTF::TimeWithDynamicClockType &) const
bool WTF::TimeWithDynamicClockType::operator<(const WTF::TimeWithDynamicClockType &) const
bool WTF::TimeWithDynamicClockType::operator>(const WTF::TimeWithDynamicClockType &) const
bool WTF::TimeWithDynamicClockType::operator<=(const WTF::TimeWithDynamicClockType &) const
bool WTF::TimeWithDynamicClockType::operator>=(const WTF::TimeWithDynamicClockType &) const
%s: %u calls, mean duration: %.6fms, total duration: %.6fms, max duration %.6fms
javascript
text/plain
webkit-fake-url://
file://
blank
srcdoc
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/text/StringBuilder.h
unsigned int WTF::StringBuilder::length() const
about:blank
about:srcdoc
mailto
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/URLParser.cpp
bool WTF::URLParser::copyBaseWindowsDriveLetter(const WTF::URL &)
void WTF::URLParser::copyASCIIStringUntil(const WTF::String &, size_t)
void WTF::URLParser::syntaxViolation(const CodePointIterator<CharacterType> &) [CharacterType = unsigned char]
void WTF::URLParser::syntaxViolation(const CodePointIterator<CharacterType> &) [CharacterType = char16_t]
void WTF::URLParser::parse(const CharacterType *, const unsigned int, const WTF::URL &, const WTF::URLTextEncoding *) [CharacterType = unsigned char]
bool WTF::URLParser::parsePort(CodePointIterator<CharacterType> &) [CharacterType = unsigned char]
/Library/Caches/com.apple.xbs/Binaries/WTF_Sim/install/Root/usr/local/include/wtf/Expected.h
void std::experimental::__expected_detail::__expected_terminate()
uint64_t WTF::pow256(size_t)
void WTF::URLParser::parse(const CharacterType *, const unsigned int, const WTF::URL &, const WTF::URLTextEncoding *) [CharacterType = char16_t]
bool WTF::URLParser::parsePort(CodePointIterator<CharacterType> &) [CharacterType = char16_t]
auto WTF::URLParser::internationalDomainNameTranscoder()::(anonymous class)::operator()() const
 000000000000
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/unicode/UTF8Conversion.cpp
bool WTF::Unicode::convertUTF8ToUTF16Impl(const char *, const char *, UChar **, UChar *, bool *) [replaceInvalidSequences = false]
bool WTF::Unicode::convertUTF8ToUTF16Impl(const char *, const char *, UChar **, UChar *, bool *) [replaceInvalidSequences = true]
kern.bootsessionuuid
Wall(
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/WTFConfig.cpp
static void WTF::Config::permanentlyFreeze()
auto WTF::setPermissionsOfConfigPage()::(anonymous class)::operator()() const
/Library/Caches/com.apple.xbs/Sources/WTF_Sim/Source/WTF/wtf/text/WTFString.cpp
WTF::CString WTF::String::utf8(WTF::ConversionMode) const
WTF::String WTF::fromUTF8Impl(const LChar *, size_t) [replaceInvalidSequences = false]
WTF::String WTF::fromUTF8Impl(const LChar *, size_t) [replaceInvalidSequences = true]
Primitive Gigacage
JSValue Gigacage
Common Primitive
Attempting to teleport heaps
pas_segregated_partial_view/alloc_bits
attempt to free bitfit page header
previous bit is not free or end of object
free bit set
attempt to shrink to a larger size
object falls off end of page
[LibPasBmallocHeapType = 
primitiveHeapRefForTypeWithFlexibleArrayMember
ObjectWithFlexibleArrayMember, 
%.*s
Size = %zu, Alignment = %zu, Type = 
WebKit Using System Malloc
WebKitPasStatusReporter
Malloc
MallocLogFile
MallocGuardEdges
MallocDoNotProtectPrelude
MallocDoNotProtectPostlude
MallocStackLogging
MallocStackLoggingNoCompact
MallocStackLoggingDirectory
MallocScribble
MallocCheckHeapStart
MallocCheckHeapEach
MallocCheckHeapSleep
MallocCheckHeapAbort
MallocErrorAbort
MallocCorruptionAbort
MallocHelp
DYLD_INSERT_LIBRARIES
libgmalloc
FATAL: Disabling Primitive gigacage is forbidden, but we don't want that in this process.
FATAL: Could not allocate gigacage memory with maxAlignment = %lu, totalSize = %lu.
(Make sure you have not set a virtual memory limit.)
GIGACAGE_ENABLED
Warning: disabling gigacage because GIGACAGE_ENABLED=%s!
Warning: invalid argument to GIGACAGE_ENABLED: %s
bmalloc_IsoHeap
Object not allocated
pas_ptr_hash_set/table
pas_baseline_allocator_table
pas_ptr_hash_map/table
%p:%zu: found empty when setting max_free
%p:%zu: found non-empty page that is dead when taking last empty.
%p:%zu: found empty page that is not dead when taking last empty.
page_is_dead = %d
free_granules.num_free_granules = %zu
free_granules.num_already_decommitted_granules = %zu
%p:%zu: found empty when setting max_free
pas_bitfit_directory_view_vector/spine
pas_bitfit_directory_view_vector/segment
pas_bitfit_directory_max_free_vector/spine
pas_bitfit_directory_max_free_vector/segment
pas_bitfit_directory_segmented_bitvectors/spine
pas_bitfit_directory_segmented_bitvectors/segment
pas_bitfit_heap
free bits: 
 end bits: 
           
Thread %p encountered bitfit alloaction error.
Bits for page %p (%s):
null
bmalloc_small_bitfit
bmalloc_medium_bitfit
bmalloc_marge_bitfit
jit_small_bitfit
jit_medium_bitfit
pas_bitfit_view
become unprocessed on note_max_free
pas_large_expendable_memory
pas_reserved_memory_provider
pas_basic_heap_page_caches
Large heap did not find object
: %llu
pas_virtual_range_min_heap/outline_array
pas_basic_heap_runtime_config
pas_enumerable_range_list_chunk
pas_range_begin_min_heap/outline_array
local_allocator_map/table
Invalid view kind in size directory: %s
shared_view
shared_handle
size_directory
pas_ptr_min_heap/outline_array
pas_fast_large_free_heap_node
pas_fast_megapage_table/instance
pas_heap
null
pas_utility
bmalloc
%.0lf%% Alloc: %zu/%zu (CO)/%zu (CT)/%zu (R); Frag: %zu (%.0lf%%)
; Cached: %zu
pas_heap_table
pas_large_expendable_memory
pas_range_min_heap/outline_array
pas_large_utility_free_heap/chunk
pas_large_heap_physical_page_sharing_cache/chunk
pas_tiny_large_map_second_level_hashtable
pas_tiny_large_map_hashtable/table
pas_tiny_large_map_second_level_hashtable/table
pas_small_large_map_hashtable/table
pas_large_map_hashtable/table
pas_large_sharing_node
pas_large_sharing_min_heap/outline_array
pas_lenient_compact_unsigned_ptr/box
pas_lock_free_read_ptr_ptr_hashtable/table
pas_megapage_cache/chunk
pas_page_header_table/header
pas_page_sharing_pool_segmented_delta_bitvector/spine
pas_page_sharing_pool_segmented_delta_bitvector/segment
pas_page_sharing_pool_segmented_participant_vector/spine
pas_page_sharing_pool_segmented_participant_vector/segment
pas_page_sharing_pool_min_heap/outline_array
pas_ptr_worklist/worklist
pas_redundant_local_allocator_node
pas_root/static_heaps
pas_root/heap_configs
pas_malloc_zone_and_root_for_libmalloc_introspection
WebKit Malloc
pas_scavenger_data
JavaScriptCore libpas scavenger
pas_segregated_directory_data
pas_segregated_directory_data/sharing_payload
pas_segregated_directory_segmented_bitvectors/spine
pas_segregated_directory_segmented_bitvectors/segment
pas_segregated_directory_view_vector/array
pas_segregated_exclusive_view
pas_segregated_heap_rare_data
pas_segregated_heap_rare_data/medium_directories
size_directory_min_heap/outline_array
pas_segregated_heap/index_to_size_directory
pas_segregated_heap/index_to_allocator_index
Alloc bit not set in pas_segregated_page_deallocate_with_page
null
pas_utility_small
bmalloc_small_segregated
bmalloc_medium_segregated
pas_segregated_partial_view
pas_segregated_shared_handle
Erroneously found a null view at index = %zu, directory = %p.
Error: shared view %p (%s) has is_in_use_for_allocation_count = %u
partial_index = %zu, partial_view = %p, is_in_use_for_allocation = %s
pas_segregated_shared_view
pas_segregated_size_directory
pas_segregated_size_directory+pas_bitfit_size_class
pas_extended_segregated_size_directory_data
pas_segregated_size_directory_data
pas_segregated_size_directory_data/full_alloc_bits
pas_extended_segregated_size_directory_data/full_use_counts
pas_exclusive_view_template_memo_table/table
pas_shared_page_directory_by_size_data
Size = %zu
pas_simple_large_free_heap/free_list
            %s Global Dir (%p): 
                
            Global Size Dir %p(%u/%s): Num Views: %zu
, Has Base Data
, Has Data
, Has TLA
, Enabled Exclusives
                Partials: 
                Exclusives: 
        Shared Page Dir %p(%s, 
): Num Views: %zu, 
            
Large %p: 
    Large Map:
        Tiny Map: Num Entries: %u, Num Deleted: %u, Table Size: %u
        Small Fallback Map: Num Entries: %u, Num Deleted: %u, Table Size: %u
        Fallback Map: Num Entries: %u, Num Deleted: %u, Table Size: %u
Heap Table Size: %u
Alloc Internal: %zu, External: %zu
Alloc: %zu, Peak Alloc: %zu, Mapped: %zu, Free: %zu
        Bitfit Heap %p: 
        Segregated Heap %p: 
Has Rare Data
Has Index Lookup
    Heap %p:
        %s, 
        Total Summary: 
        
    Num Heaps: %zu
    Shared Page Directories:
    All Heaps Non-Utility Segregated Summary: 
    All Heaps Non-Utility Bitfit Summary: 
    All Heaps Non-Utility Large Summary: 
    Large sharing pool contents:
    Utility Heap:
    Segregated Exclusive Fragmentation Histogram:
    Segregated Partial Fragmentation Histogram:
    Segregated Exclusive Fragmentation: %zu
    Segregated Shared Fragmentation: %zu
    Total Segregated Fragmentation: %zu
    Large Fragmentation: %zu
    Total Fragmentation: %zu
Num Size Directories With Data
Num Size Directories With TLAs
Num Size Directories With Exclusives
    Baseline Allocators:
        N/A
         %zu: directory = %p, %s
    Thread Local Cache Layout:
        %u: %s, directory = %p
    Thread Local Caches:
        %p(%zu): node = %p
            Deallocation logged objects = %u
            %u: directory = %p, %s
    Mprotect Decommitted: %s
    Physical Page Sharing Pool Balance: %ld
    Compact Expendable Memory: 
    Large Expendable Memory: 
%d: Heap Status:
    Heap Table: 
    Immortal Heap: 
    Compact Large Utility Free Heap: 
    Large Utility Free Heap: 
    Compact Bootstrap Free Heap: 
    Bootstrap Free Heap: 
Small
Medium
Marge
%s    Occupancy: 
%s     Max Free: 
%s  Empty (bit): 
%s Last Empty+1: 
%s    Committed: 
%s%7u Bytes: 
%s  Unprocessed: 
%s Empty (free): 
%s        Kind: 
%s   Occupancy: 
%s        Bump: 
%s    Eligible: 
%s First Elgbl: 
%s       Empty: 
%s Last Empt+1: 
%s   Committed: 
        %p...%p: %s, %zu/%zu live (%.0lf%%), %llu
, %s
decommitted
committed
locked_by_heap_lock
        %zu..%zu: %zu
    %s: %zu/%zu (%.0lf%%)
inactive
partial
exclusive
segregated_size_directory
redundant_local_allocator
local_view_cache
Header = %p, Payload = %p...%p, Page States: 
%d: Num Heaps: %zu
pas_thread_local_cache
pas_thread_local_cache/should_stop_bitvector
Deallocation logging is disabled for %s/%s, but here we are.
shared
[%d] Failed to suspend pthread %p (mach thread %d) associated with TLC %p: %d
[%d] thread %p has id %llu
[%d] thread %p does not have id
[%d] thread %p has name %s
[%d] thread %p does not have name
pas_thread_local_cache_layout_segment
pas_thread_local_cache_node
Cannot allocate size = %zu (alignment = %zu, aligned_size = %zu, index = %zu) with utility heap.
pas_utility_heap_allocators
pas_utility_heap/page
[%d] pas panic: 
deallocation did fail at %p: %s
reallocation did fail with source_heap = %p, target_heap = %p, old_ptr = %p, old_size = %zu, new_size = %zu: %s
com.apple.WebKit.WebContent
DumpRenderTree
wasm
test
Test
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp
void JSC::DFG::SpeculativeJIT::emitInvalidationPoint(JSC::DFG::Node *)
Bailing compilation.
JSC::DFG::SilentRegisterSavePlan JSC::DFG::SpeculativeJIT::silentSavePlanForGPR(JSC::VirtualRegister, JSC::GPRReg)
node->isCellConstant()
void JSC::DFG::SpeculativeJIT::silentSpill(const JSC::DFG::SilentRegisterSavePlan &)
void JSC::DFG::SpeculativeJIT::silentFill(const JSC::DFG::SilentRegisterSavePlan &)
JITCompiler::JumpList JSC::DFG::SpeculativeJIT::jumpSlowForUnwantedArrayMode(JSC::GPRReg, JSC::DFG::ArrayMode)
void JSC::DFG::SpeculativeJIT::checkArray(JSC::DFG::Node *)
arrayMode.isSomeTypedArrayView()
void JSC::DFG::SpeculativeJIT::compileGetById(JSC::DFG::Node *, JSC::AccessType)
Bad use kind
void JSC::DFG::SpeculativeJIT::compileGetByIdFlush(JSC::DFG::Node *, JSC::AccessType)
void JSC::DFG::SpeculativeJIT::compileCurrentBlock()
!operand.isArgument() || operand.virtualRegister().toArgument() >= 0
SpeculativeJIT generating Node @
) at JIT offset 0x
DFG_fast_
void JSC::DFG::SpeculativeJIT::checkArgumentTypes()
OSR Entries:
    
void JSC::DFG::SpeculativeJIT::compilePutByVal(JSC::DFG::Node *)
Bad array mode type
node->op() == PutByVal || node->op() == PutByValDirect
JSC::DFG::GeneratedOperandType JSC::DFG::SpeculativeJIT::checkGeneratedTypeForToInt32(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileValueToInt32(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileUInt32ToNumber(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileDoubleAsInt32(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileDoubleRep(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileValueRep(JSC::DFG::Node *)
bool JSC::DFG::SpeculativeJIT::getIntTypedArrayStoreOperand(JSC::DFG::GPRTemporary &, JSC::GPRReg, JSC::DFG::Edge, JITCompiler::JumpList &, bool)
void JSC::DFG::SpeculativeJIT::compileGetByValOnFloatTypedArray(JSC::DFG::Node *, JSC::TypedArrayType, const ScopedLambda<std::tuple<JSValueRegs, DataFormat, CanUseFlush> (JSC::DataFormat)> &)
void JSC::DFG::SpeculativeJIT::compilePutByValForFloatTypedArray(JSC::DFG::Node *, JSC::TypedArrayType)
void JSC::DFG::SpeculativeJIT::compileGetPrivateName(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileGetPrivateNameByVal(JSC::DFG::Node *, JSC::JSValueRegs, JSC::JSValueRegs)
node->op() == GetPrivateName
m_graph.child(node, 1).useKind() == SymbolUse
void JSC::DFG::SpeculativeJIT::compileGetPrivateNameById(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileParseInt(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileInstanceOf(JSC::DFG::Node *)
node->child1().useKind() == UntypedUse
node->child2().useKind() == UntypedUse
void JSC::DFG::SpeculativeJIT::compileValueBitwiseOp(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileShiftOp(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileIsCellWithType(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileToObjectOrCallObjectConstructor(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileArithAdd(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileArithAbs(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileArithSub(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileArithNegate(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileArithMul(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileArithDiv(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileValueMod(JSC::DFG::Node *)
node->binaryUseKind() == UntypedUse || node->binaryUseKind() == AnyBigIntUse || node->binaryUseKind() == BigInt32Use
void JSC::DFG::SpeculativeJIT::compileArithMod(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileArithRounding(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileArithMinMax(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileValuePow(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileStringCompare(JSC::DFG::Node *, MacroAssembler::RelationalCondition)
void JSC::DFG::SpeculativeJIT::compileStringIdentCompare(JSC::DFG::Node *, MacroAssembler::RelationalCondition)
void JSC::DFG::SpeculativeJIT::compileArrayIndexOf(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileArrayPush(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileCheckStructure(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileCallDOM(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileCheckJSCast(JSC::DFG::Node *)
node->op() == CheckJSCast || node->op() == CheckNotJSCast
void JSC::DFG::SpeculativeJIT::compileToStringOrCallStringConstructorOrStringValueOf(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileNumberToStringWithValidRadixConstant(JSC::DFG::Node *, int32_t)
void JSC::DFG::SpeculativeJIT::compileNumberToStringWithRadix(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::emitNewTypedArrayWithSizeInRegister(JSC::DFG::Node *, JSC::TypedArrayType, JSC::DFG::RegisteredStructure, JSC::GPRReg)
void JSC::DFG::SpeculativeJIT::speculate(JSC::DFG::Node *, JSC::DFG::Edge)
void JSC::DFG::SpeculativeJIT::emitSwitchImm(JSC::DFG::Node *, JSC::DFG::SwitchData *)
void JSC::DFG::SpeculativeJIT::emitSwitchChar(JSC::DFG::Node *, JSC::DFG::SwitchData *)
void JSC::DFG::SpeculativeJIT::emitBinarySwitchStringRecurse(JSC::DFG::SwitchData *, const Vector<SpeculativeJIT::StringSwitchCase> &, unsigned int, unsigned int, unsigned int, JSC::GPRReg, JSC::GPRReg, JSC::GPRReg, unsigned int, bool)
void JSC::DFG::SpeculativeJIT::emitSwitchString(JSC::DFG::Node *, JSC::DFG::SwitchData *)
void JSC::DFG::SpeculativeJIT::emitSwitch(JSC::DFG::Node *)
Bad switch kind
void JSC::DFG::SpeculativeJIT::compileDefineDataProperty(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileDefineAccessorProperty(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::emitAllocateButterfly(JSC::GPRReg, JSC::GPRReg, JSC::GPRReg, JSC::GPRReg, JSC::GPRReg, MacroAssembler::JumpList &)
void JSC::DFG::SpeculativeJIT::compileGetMapBucketHead(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileNewArrayBuffer(JSC::DFG::Node *)
indexingMode & IsArray
void JSC::DFG::SpeculativeJIT::compileNewTypedArray(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileObjectKeysOrObjectGetOwnPropertyNames(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileObjectAssign(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileObjectCreate(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileNewInternalFieldObject(JSC::DFG::Node *)
Bad structure
void JSC::DFG::SpeculativeJIT::compileToPrimitive(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileToPropertyKey(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileToNumeric(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileCallNumberConstructor(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileGetPrototypeOf(JSC::DFG::Node *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h
JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::RegisterID JSC::MacroAssemblerARM64::getCachedDataTempRegisterIDAndInvalidate()
JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::CachedTempRegister &JSC::MacroAssemblerARM64::dataMemoryTempRegister()
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSlowPathGenerator.h
virtual MacroAssembler::Call JSC::DFG::SlowPathGenerator::call() const
JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::RegisterID JSC::MacroAssemblerARM64::getCachedMemoryTempRegisterIDAndInvalidate()
JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::CachedTempRegister &JSC::MacroAssemblerARM64::cachedMemoryTempRegister()
DFG_slow_
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.h
JSC::DFG::SpeculativeJIT::TrustedImmPtr::TrustedImmPtr(JSC::DFG::FrozenValue *)
JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::RegisterID JSC::MacroAssemblerARM64::scratchRegister()
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/TypedArrayType.h
void JSC::DFG::SpeculativeJIT::spill(JSC::VirtualRegister)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGNode.h
JSC::ECMAMode JSC::DFG::Node::ecmaMode()
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/MacroAssembler.h
static JSC::MacroAssemblerARM64::DoubleCondition JSC::MacroAssembler::invert(JSC::MacroAssemblerARM64::DoubleCondition)
JSC::DFG::SpeculateDoubleOperand::SpeculateDoubleOperand(JSC::DFG::SpeculativeJIT *, JSC::DFG::Edge)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGMinifiedIDInlines.h
JSC::DFG::MinifiedID::MinifiedID(JSC::DFG::Node *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGFlushFormat.h
void JSC::DFG::SpeculativeJIT::strictInt32Result(JSC::GPRReg, JSC::DFG::Node *, JSC::DataFormat, JSC::DFG::SpeculativeJIT::UseChildrenMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
JSC::DFG::SpeculateStrictInt52Operand::SpeculateStrictInt52Operand(JSC::DFG::SpeculativeJIT *, JSC::DFG::Edge)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGUseKind.h
JSC::SpeculatedType JSC::DFG::typeFilterFor(JSC::DFG::UseKind)
void JSC::DFG::SpeculativeJIT::bitOp(JSC::DFG::NodeType, int32_t, JSC::GPRReg, JSC::GPRReg)
void JSC::DFG::SpeculativeJIT::bitOp(JSC::DFG::NodeType, JSC::GPRReg, JSC::GPRReg, JSC::GPRReg)
void JSC::DFG::SpeculativeJIT::shiftOp(JSC::DFG::NodeType, JSC::GPRReg, int32_t, JSC::GPRReg)
void JSC::DFG::SpeculativeJIT::shiftOp(JSC::DFG::NodeType, JSC::GPRReg, JSC::GPRReg, JSC::GPRReg)
JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::RegisterID JSC::MacroAssemblerARM64::scratchRegisterForBlinding()
JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand(JSC::DFG::SpeculativeJIT *, JSC::DFG::Edge)
JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand(JSC::DFG::SpeculativeJIT *, JSC::DFG::Edge, const JSC::DFG::SpeculateWhicheverInt52Operand &)
JSC::DFG::SpeculateInt52Operand::SpeculateInt52Operand(JSC::DFG::SpeculativeJIT *, JSC::DFG::Edge)
JSC::DFG::SpeculateWhicheverInt52Operand::SpeculateWhicheverInt52Operand(JSC::DFG::SpeculativeJIT *, JSC::DFG::Edge, JSC::DFG::OppositeShiftTag, const JSC::DFG::SpeculateWhicheverInt52Operand &)
auto JSC::DFG::SpeculativeJIT::compileNewFunction(JSC::DFG::Node *)::(anonymous class)::operator()() const
JSC::DFG::Edge &JSC::DFG::Node::argumentsChild()
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/jit/AssemblyHelpers.h
static JSC::VirtualRegister JSC::AssemblyHelpers::argumentsStart(JSC::InlineCallFrame *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSGlobalObject.h
JSC::LazyClassStructure &JSC::JSGlobalObject::lazyTypedArrayStructure(JSC::TypedArrayType)
unsigned int JSC::logElementSize(JSC::TypedArrayType)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGOperations.h
char *(*JSC::DFG::operationNewTypedArrayWithSizeForType(JSC::TypedArrayType))(JSC::JSGlobalObject *, JSC::Structure *, intptr_t, char *)
int32_t JSC::DFG::Node::accessorAttributes()
char *(*JSC::DFG::operationNewTypedArrayWithOneArgumentForType(JSC::TypedArrayType))(JSC::JSGlobalObject *, JSC::Structure *, JSC::EncodedJSValue)
static JSC::GPRReg JSC::AssemblyHelpers::selectScratchGPR(JSC::RegisterSet)
unsigned int JSC::DFG::Node::storageChildIndex()
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGNodeType.h
unsigned int JSC::DFG::numExtraAtomicsArgs(JSC::DFG::NodeType)
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/text/StringConcatenate.h
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspace.h
JSC::Allocator JSC::IsoSubspace::allocatorFor(size_t, JSC::AllocatorForMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGClobberize.h
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2239:43), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2239:61), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2239:79), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2230:35)]
Unhandled ArrayMode opcode.
impossible array mode for get
impossible array mode for put
mode.isSomeTypedArrayView()
mode.isSomeTypedArrayView() || mode.type() == Array::ForceExit
Unrecognized node type: 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGHeapLocation.h
JSC::DFG::LocationKind JSC::DFG::indexedPropertyLocForResultType(JSC::DFG::NodeFlags)
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2282:66), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2282:84), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2282:102), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT.cpp:2278:39)]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGAbstractInterpreterInlines.h
bool JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(unsigned int, JSC::DFG::Node *) [AbstractStateType = JSC::DFG::InPlaceAbstractState]
value.isType(typeFilterFor(variableAccessData->flushFormat()))
value.isType(typeFilterFor(data->format))
Bad flush format for argument
Bad opcode
No BigInt32 support
node->binaryUseKind() == UntypedUse
Unexpected node type
status[i].conditionSet().isEmpty()
void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::verifyEdge(JSC::DFG::Node *, JSC::DFG::Edge) [AbstractStateType = JSC::DFG::InPlaceAbstractState]
Edge verification error: 
 was expected to have type 
 but has type 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGFrozenValue.h
JSC::DFG::FrozenValue::FrozenValue(JSC::JSValue)
JSC::DFG::UseKind JSC::DFG::useKindFor(JSC::DFG::FlushFormat)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGAbstractValue.h
void JSC::DFG::AbstractValue::setNonCellType(JSC::SpeculatedType)
bool JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::handleConstantBinaryBitwiseOp(JSC::DFG::Node *) [AbstractStateType = JSC::DFG::InPlaceAbstractState]
auto JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::executeEffects(unsigned int, JSC::DFG::Node *)::(anonymous class)::operator()(double, double) const [AbstractStateType = JSC::DFG::InPlaceAbstractState]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGStructureAbstractValue.h
JSC::StructureSet JSC::DFG::StructureAbstractValue::toStructureSet() const
void JSC::DFG::SpeculativeJIT::emitUntypedOrAnyBigIntBitOp(JSC::DFG::Node *) [SnippetGenerator = JSC::JITBitAndGenerator, snippetSlowPathFunction = &JSC::DFG::operationValueBitAnd]
node->isBinaryUseKind(UntypedUse) || node->isBinaryUseKind(AnyBigIntUse) || node->isBinaryUseKind(HeapBigIntUse) || node->isBinaryUseKind(BigInt32Use)
void JSC::DFG::SpeculativeJIT::emitUntypedOrAnyBigIntBitOp(JSC::DFG::Node *) [SnippetGenerator = JSC::JITBitXorGenerator, snippetSlowPathFunction = &JSC::DFG::operationValueBitXor]
void JSC::DFG::SpeculativeJIT::emitUntypedOrAnyBigIntBitOp(JSC::DFG::Node *) [SnippetGenerator = JSC::JITBitOrGenerator, snippetSlowPathFunction = &JSC::DFG::operationValueBitOr]
void JSC::DFG::SpeculativeJIT::emitUntypedOrAnyBigIntBitOp(JSC::DFG::Node *) [SnippetGenerator = JSC::JITLeftShiftGenerator, snippetSlowPathFunction = &JSC::DFG::operationValueBitLShift]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/AbstractMacroAssembler.h
void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::emitNops(size_t) [AssemblerType = JSC::ARM64Assembler]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/LinkBuffer.h
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)26432, T = JSC::AssemblerLabel]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/SmallStrings.h
JSC::JSString *JSC::SmallStrings::typeString(JSC::TypeofType) const
auto JSC::DFG::SpeculativeJIT::compileCallDOM(JSC::DFG::Node *)::(anonymous class)::operator()(JSC::DFG::Edge) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGSpeculativeJIT64.cpp
JSC::GPRReg JSC::DFG::SpeculativeJIT::fillJSValue(JSC::DFG::Edge)
spillFormat & DataFormatJS
Bad data format
Corrupt data format
void JSC::DFG::SpeculativeJIT::emitCall(JSC::DFG::Node *)
bad node type
isFlushed()
Graph::parameterSlotsForArgCount(numAllocatedArgs) <= m_jit.graph().m_parameterSlots
JSC::GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Strict(JSC::DFG::Edge)
mustBeDataFormatInt32 == DataFormatInt32
JSC::GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt52(JSC::DFG::Edge, JSC::DataFormat)
spillFormat == DataFormatInt52 || spillFormat == DataFormatStrictInt52
JSC::FPRReg JSC::DFG::SpeculativeJIT::fillSpeculateDouble(JSC::DFG::Edge)
Expected 
 to have double format but instead it is spilled as 
info.registerFormat() == DataFormatDouble
JSC::GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateCell(JSC::DFG::Edge)
JSC::GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateBoolean(JSC::DFG::Edge)
info.spillFormat() & DataFormatJS
void JSC::DFG::SpeculativeJIT::compileToBoolean(JSC::DFG::Node *, bool)
void JSC::DFG::SpeculativeJIT::emitBranch(JSC::DFG::Node *)
void JSC::DFG::SpeculativeJIT::compileGetByVal(JSC::DFG::Node *, const ScopedLambda<std::tuple<JSValueRegs, DataFormat, CanUseFlush> (JSC::DataFormat)> &)
void JSC::DFG::SpeculativeJIT::compileGetTypedArrayLengthAsInt52(JSC::DFG::Node *)
node->arrayMode().isSomeTypedArrayView()
void JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)
Bad result type
triggerIterator != m_jit.jitCode()->tierUpEntryTriggers.end()
Unexpected node
void JSC::DFG::SpeculativeJIT::compileDateGet(JSC::DFG::Node *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h
JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::RegisterID JSC::MacroAssemblerARM64::getCachedDataTempRegisterIDAndInvalidate()
JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::CachedTempRegister &JSC::MacroAssemblerARM64::dataMemoryTempRegister()
JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::RegisterID JSC::MacroAssemblerARM64::getCachedMemoryTempRegisterIDAndInvalidate()
None
Int32
Int52
StrictInt52
Double
Cell
Boolean
Storage
BigInt32
JSInt32
JSDouble
JSCell
JSBoolean
JSBigInt32
Dead
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/DataFormat.h
const char *JSC::dataFormatToString(JSC::DataFormat)
auto JSC::DFG::SpeculativeJIT::compile(JSC::DFG::Node *)::(anonymous class)::operator()() const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/TypedArrayType.h
unsigned int JSC::logElementSize(JSC::TypedArrayType)
JSC::GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal(JSC::DFG::Edge, JSC::DataFormat &) [strict = false]
(spillFormat & DataFormatJS) || spillFormat == DataFormatInt32
!(type & SpecInt52Any)
JSC::GPRReg JSC::DFG::SpeculativeJIT::fillSpeculateInt32Internal(JSC::DFG::Edge, JSC::DataFormat &) [strict = true]
void JSC::DFG::AbstractInterpreter<JSC::DFG::InPlaceAbstractState>::filterICStatus(JSC::DFG::Node *) [AbstractStateType = JSC::DFG::InPlaceAbstractState]
jsBody_
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::lower()
catchEntrypointIndex != 0
Function ready, beginning lowering.
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::createPhiVariables()
Bad Phi node result type
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/b3/B3ValueInlines.h
size_t JSC::B3::Value::adjacencyListOffset() const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/ARM64Assembler.h
static void JSC::ARM64Assembler::setPointer(int *, void *, JSC::ARM64Assembler::RegisterID, bool)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/jit/ExecutableAllocator.h
void *JSC::performJITMemcpy(void *, const void *, size_t)
static void JSC::ARM64Assembler::linkConditionalBranch(JSC::ARM64Assembler::Condition, int *, const int *, void *) [type = JSC::ARM64Assembler::IndirectBranch, copy = JSC::performJITMemcpy]
static void JSC::ARM64Assembler::linkCompareAndBranch(JSC::ARM64Assembler::Condition, bool, JSC::ARM64Assembler::RegisterID, int *, const int *, void *) [type = JSC::ARM64Assembler::IndirectBranch, copy = JSC::performJITMemcpy]
static void JSC::ARM64Assembler::linkTestAndBranch(JSC::ARM64Assembler::Condition, unsigned int, JSC::ARM64Assembler::RegisterID, int *, const int *, void *) [type = JSC::ARM64Assembler::IndirectBranch, copy = JSC::performJITMemcpy]
static void JSC::ARM64Assembler::linkJumpOrCall(int *, const int *, void *) [type = JSC::ARM64Assembler::BranchType_JMP, copy = JSC::performJITMemcpy]
static void JSC::ARM64Assembler::linkJumpOrCall(int *, const int *, void *) [type = JSC::ARM64Assembler::BranchType_CALL, copy = JSC::performJITMemcpy]
    OSR exit #
 with availability: 
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::appendOSRExit(JSC::ExitKind, JSC::FTL::FormattedValue, const JSC::MethodOfGettingAValueProfile &, JSC::FTL::LValue, JSC::DFG::NodeOrigin, bool)
origin.exitOK
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::buildExitArguments(JSC::FTL::OSRExitDescriptor *, JSC::CodeOrigin, JSC::FTL::StackmapArgumentList &, JSC::FTL::FormattedValue, unsigned int)
Live bytecode local not available: operand = 
, availability = 
, origin = 
Could not find materialization for 
 in 
        Exit values: 
        Materializations: 
JSC::FTL::ExitValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::exitValueForAvailability(JSC::FTL::StackmapArgumentList &, const HashMap<JSC::DFG::Node *, JSC::FTL::ExitTimeObjectMaterialization *> &, JSC::DFG::Availability)
Invalid flush format
JSC::FTL::ExitValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::exitValueForNode(JSC::FTL::StackmapArgumentList &, const HashMap<JSC::DFG::Node *, JSC::FTL::ExitTimeObjectMaterialization *> &, JSC::DFG::Node *)
Cannot find value for node: 
(null)
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)10924, T = JSC::AssemblerLabel]
Compiling block 
Bailing because CFA didn't reach.
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:529:62), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:529:80), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:529:98), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:524:39)]
Lowering 
bool JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileNode(unsigned int)
Unrecognized node in FTL backend
Bailing.
Block 
 will bail also.
<out of memory while dumping graph>
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::lowJSValue(JSC::DFG::Edge, JSC::DFG::OperandSpeculationMode)
mode == ManualOperandSpeculation || edge.useKind() == UntypedUse
!isDouble(edge.useKind())
edge.useKind() != Int52RepUse
Value not defined: 
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::lowDouble(JSC::DFG::Edge)
isDouble(edge.useKind())
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::lowInt52(JSC::DFG::Edge, JSC::FTL::(anonymous namespace)::LowerDFGToB3::Int52Kind)
edge.useKind() == Int52RepUse
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::validateAIState(JSC::DFG::Node *)::(anonymous class)::operator()(JSC::CCallHelpers &, const JSC::B3::StackmapGenerationParams &)::(anonymous class)::operator()(Probe::Context &) const
input.isAnyInt()
Validation failed at node: @
Failed validating live value: @
Expected AI value = 
Unexpected value = 
Unexpected double value = 
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileUpsilon()
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::lowCell(JSC::DFG::Edge, JSC::DFG::OperandSpeculationMode)
mode == ManualOperandSpeculation || DFG::isCell(edge.useKind())
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLOutput.h
JSC::FTL::LValue JSC::FTL::Output::alreadyRegisteredFrozenPointer(DFG::FrozenValue *)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compilePhi()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileDoubleRep()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileValueRep()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileInt52Rep()
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/b3/B3CCallValue.h
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, const JSC::B3::Effects &, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *>]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileValueToInt32()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileBooleanToNumber()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetStack()
isConcrete(data->format)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compilePutStack()
Bad flush format
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::speculate(JSC::DFG::Edge)
Unsupported speculation use kind
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileIncOrDec()
m_node->child1().useKind() == UntypedUse
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileValueNegate()
    Patchpoint exception OSR exit #
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithAddOrSub()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::setInt52(JSC::DFG::Node *, JSC::FTL::LValue, JSC::FTL::(anonymous namespace)::LowerDFGToB3::Int52Kind)
Corrupt int52 kind
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithClz32()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithMul()
JSC::FTL::(anonymous namespace)::LowerDFGToB3::Int52Kind JSC::FTL::(anonymous namespace)::LowerDFGToB3::opposite(JSC::FTL::(anonymous namespace)::LowerDFGToB3::Int52Kind)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithDiv()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileValueMod()
m_node->binaryUseKind() == UntypedUse || m_node->binaryUseKind() == AnyBigIntUse
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithMod()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithMinOrMax()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithAbs()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithRound()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithFloor()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithCeil()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithTrunc()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArithNegate()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileValueBitNot()
m_node->child1().useKind() == UntypedUse || m_node->child1().useKind() == AnyBigIntUse
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::emitBinaryBitOpSnippet(JSC::J_JITOperation_GJJ) [BinaryBitOpGenerator = JSC::JITBitAndGenerator]
node->isBinaryUseKind(UntypedUse) || node->isBinaryUseKind(AnyBigIntUse) || node->isBinaryUseKind(BigInt32Use)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::emitBinaryBitOpSnippet(JSC::J_JITOperation_GJJ) [BinaryBitOpGenerator = JSC::JITBitOrGenerator]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::emitBinaryBitOpSnippet(JSC::J_JITOperation_GJJ) [BinaryBitOpGenerator = JSC::JITBitXorGenerator]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileValueBitLShift()
m_node->isBinaryUseKind(UntypedUse) || m_node->isBinaryUseKind(AnyBigIntUse) || m_node->isBinaryUseKind(BigInt32Use)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCheckStructure()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArrayify()
Bad array type
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::isArrayTypeForArrayify(JSC::FTL::LValue, JSC::DFG::ArrayMode)
Unexpected original array
Corrupt array class
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetById(JSC::AccessType)
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compilePrivateBrandAccess(JSC::FTL::LValue, JSC::FTL::LValue, JSC::AccessType)::(anonymous class)::operator()(JSC::CCallHelpers &, const JSC::B3::StackmapGenerationParams &)::(anonymous class)::operator()(JSC::CCallHelpers &)::(anonymous class)::operator()(JSC::AccessType) const
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileSetPrivateBrand()
m_node->child1().useKind() == CellUse
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileHasOwnProperty()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compilePutById()
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileDeleteById()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileDeleteByVal()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetIndexedPropertyStorage()
isTypedView(m_node->arrayMode().typedArrayType())
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::isArrayTypeForCheckArray(JSC::FTL::LValue, JSC::DFG::ArrayMode)
JSC::JSType JSC::typeForTypedArrayType(JSC::TypedArrayType)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetArrayLength()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetTypedArrayLengthAsInt52()
m_node->arrayMode().isSomeTypedArrayView()
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetByValImpl()
m_node->arrayMode().type() == Array::Contiguous
Bad typed array type
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::loadFromIntTypedArray(JSC::FTL::TypedPointer, JSC::TypedArrayType)
Bad element size
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compilePutByVal()
child5.useKind() == KnownInt32Use
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::getIntTypedArrayStoreOperand(JSC::DFG::Edge, bool)
Output::StoreType JSC::FTL::(anonymous namespace)::LowerDFGToB3::storeType(JSC::TypedArrayType)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compilePutPrivateName()
child1.useKind() == UntypedUse
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compilePutPrivateNameById()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileAtomicsReadModifyWrite()
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileAtomicsReadModifyWrite()::(anonymous class)::operator()(JSC::FTL::LValue) const
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileDefineDataProperty()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileDefineAccessorProperty()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArrayPush()
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLAbstractHeapRepository.h
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArrayPop()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::initializeArrayElements(JSC::FTL::LValue, JSC::FTL::LValue, JSC::FTL::LValue, JSC::FTL::LValue)
heap
JSC::FTL::IndexedAbstractHeap *JSC::FTL::AbstractHeapRepository::forIndexingType(JSC::IndexingType)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileArrayIndexOf()
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileNewFunction()::(anonymous class)::operator()() const
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileObjectAssign()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileObjectCreate()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileObjectKeysOrObjectGetOwnPropertyNames()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileNewInternalFieldObject()
Bad structure
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileNewArray()
Bad indexing type
Corrupt indexing type
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileNewArrayWithSpread()
use->child1()->op() == PhantomCreateRest
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::getSpreadLengthFromInlineCallFrame(JSC::InlineCallFrame *, unsigned int)
numberOfArgumentsToSkip < static_cast<unsigned>(INT32_MIN)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileNewTypedArray()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::emitNewTypedArrayWithSize(JSC::TypedArrayType, JSC::JSGlobalObject *, JSC::DFG::RegisteredStructure, JSC::FTL::LValue)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetPrototypeOf()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileToStringOrCallStringConstructorOrStringValueOf()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileStringFromCharCode()
childEdge.useKind() == Int32Use
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMultiGetByOffset()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMultiPutByOffset()
variant.kind() == PutByVariant::Transition
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCompareEq()
m_node->isBinaryUseKind(UntypedUse)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCompareStrictEq()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compare(const IntFunctor &, const DoubleFunctor &, JSC::C_JITOperation_TT, JSC::C_JITOperation_B_GJssJss, JSC::S_JITOperation_GJJ) [IntFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:10088:13), DoubleFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:10091:13)]
m_node->isBinaryUseKind(UntypedUse) || m_node->isBinaryUseKind(HeapBigIntUse) || m_node->isBinaryUseKind(AnyBigIntUse)
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, const JSC::B3::Effects &, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compare(const IntFunctor &, const DoubleFunctor &, JSC::C_JITOperation_TT, JSC::C_JITOperation_B_GJssJss, JSC::S_JITOperation_GJJ) [IntFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:10102:13), DoubleFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:10105:13)]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compare(const IntFunctor &, const DoubleFunctor &, JSC::C_JITOperation_TT, JSC::C_JITOperation_B_GJssJss, JSC::S_JITOperation_GJJ) [IntFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:10116:13), DoubleFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:10119:13)]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compare(const IntFunctor &, const DoubleFunctor &, JSC::C_JITOperation_TT, JSC::C_JITOperation_B_GJssJss, JSC::S_JITOperation_GJJ) [IntFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:10130:13), DoubleFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:10133:13)]
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::boolify(JSC::DFG::Edge)
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCallOrConstructVarargs()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCallOrConstructVarargsSpread()
arguments->op() == PhantomNewArrayWithSpread || arguments->op() == PhantomSpread || arguments->op() == PhantomNewArrayBuffer
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCallOrConstructVarargsSpread()::(anonymous class)::operator()(auto, JSC::DFG::Node *) const [self:auto = std::reference_wrapper<const WTF::RecursableLambda<(lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:10666:70)>>]
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCallOrConstructVarargsSpread()::(anonymous class)::operator()(JSC::CCallHelpers &, const JSC::B3::StackmapGenerationParams &) const
!allocator.numberOfReusedRegisters()
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCallOrConstructVarargsSpread()::(anonymous class)::operator()(JSC::CCallHelpers &, const JSC::B3::StackmapGenerationParams &)::(anonymous class)::operator()(B3::ValueRep, JSC::GPRReg) const
rep.isGPR()
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCallOrConstructVarargs()::(anonymous class)::operator()(JSC::CCallHelpers &, const JSC::B3::StackmapGenerationParams &) const
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileForwardVarargsWithSpread()::(anonymous class)::operator()(auto, JSC::DFG::Node *, JSC::FTL::LValue) const [self:auto = std::reference_wrapper<const WTF::RecursableLambda<(lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:11475:47)>>]
target->op() == PhantomCreateRest
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileSwitch()
Bad switch kind
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::switchStringSlow(JSC::DFG::SwitchData *, JSC::FTL::LValue)
iter != unlinkedTable.m_offsetTable.end()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::switchStringRecurse(JSC::DFG::SwitchData *, JSC::FTL::LValue, JSC::FTL::LValue, const Vector<JSC::FTL::(anonymous namespace)::LowerDFGToB3::StringSwitchCase> &, unsigned int, unsigned int, unsigned int, unsigned int, unsigned int)
alreadyCheckedLength == minLength
allLengthsEqual
minLength >= commonChars
cases[begin].string->length() == commonChars
cases[i].string->length() > commonChars
end == begin + 1
end >= begin + 2
characterCases[i - 1].character < characterCases[i].character
m_out.m_nextBlock == lastNext
    Invalidation point with availability: 
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileInvalidationPoint()
m_origin.exitOK
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)57886, T = JSC::AssemblerLabel]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileIsBigInt()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMapHash()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetMapBucket()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileGetMapBucketHead()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileWeakMapGet()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileParseInt()
m_node->child1().useKind() == UntypedUse || m_node->child1().useKind() == StringUse
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileInstanceOf()
m_node->child2().useKind() == UntypedUse
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMaterializeNewObject()
result
Invalid indexing type
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMaterializeCreateActivation()
data.m_properties.size() == table->scopeSize()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMaterializeNewInternalFieldObject()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl(Operation) [JSClass = JSC::JSArrayIterator, Operation = JSC::JSCell *(*)(JSC::VM *, JSC::Structure *)]
data.m_properties.size() == JSClass::numberOfInternalFields
descriptor.info() < JSClass::numberOfInternalFields
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl(Operation) [JSClass = JSC::JSMapIterator, Operation = JSC::JSCell *(*)(JSC::VM *, JSC::Structure *)]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl(Operation) [JSClass = JSC::JSSetIterator, Operation = JSC::JSCell *(*)(JSC::VM *, JSC::Structure *)]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl(Operation) [JSClass = JSC::JSInternalPromise, Operation = JSC::JSCell *(*)(JSC::VM *, JSC::Structure *)]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileMaterializeNewInternalFieldObjectImpl(Operation) [JSClass = JSC::JSPromise, Operation = JSC::JSCell *(*)(JSC::VM *, JSC::Structure *)]
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::ensureShadowChickenPacket()
shadowChicken
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileNumberToStringWithRadix()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileNumberToStringWithValidRadixConstant()
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = WTF::NoPtrTag, T = JSC::AssemblerLabel]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCallDOM()
auto JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileCallDOM()::(anonymous class)::operator()(JSC::DFG::Node *, JSC::DFG::Edge) const
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileDateGet()
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileDataViewGet()
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::emitCodeBasedOnEndiannessBranch(JSC::FTL::LValue, const F1 &, const F2 &) [F1 = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:15882:45), F2 = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:15888:42)]
(!littleEndianValue && !bigEndianValue) || type == littleEndianValue->type()
!!bigEndianResult == !!littleEndianResult
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::byteSwap32(JSC::FTL::LValue)
value->type() == Int32
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::emitCodeBasedOnEndiannessBranch(JSC::FTL::LValue, const F1 &, const F2 &) [F1 = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:15919:49), F2 = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:15922:46)]
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::emitCodeBasedOnEndiannessBranch(JSC::FTL::LValue, const F1 &, const F2 &) [F1 = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:15942:45), F2 = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:15946:42)]
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::byteSwap64(JSC::FTL::LValue)
value->type() == Int64
JSC::FTL::LValue JSC::FTL::(anonymous namespace)::LowerDFGToB3::emitCodeBasedOnEndiannessBranch(JSC::FTL::LValue, const F1 &, const F2 &) [F1 = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:15971:45), F2 = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:15975:42)]
void JSC::FTL::(anonymous namespace)::LowerDFGToB3::compileDataViewSet()
data.byteSize == 8
valueEdge.useKind() == Int32Use
valueEdge.useKind() == Int32Use || valueEdge.useKind() == Int52RepUse
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1728:41), WriteFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1728:59), DefFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1728:77), ClobberTopFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLLowerDFGToB3.cpp:1724:39)]
Object
calendar
islamicc
lookup
best fit
localeMatcher must be either "lookup" or "best fit"
calendar is not a well-formed calendar value
numberingSystem is not a well-formed numbering system value
hourCycle must be "h11", "h12", "h23", or "h24"
failed to initialize DateTimeFormat due to invalid locale
-u-ca-
-nu-
invalid time zone: 
narrow
short
long
weekday must be "narrow", "short", or "long"
era must be "narrow", "short", or "long"
2-digit
numeric
year must be "2-digit" or "numeric"
month must be "2-digit", "numeric", "narrow", "short", or "long"
day must be "2-digit" or "numeric"
dayPeriod must be "narrow", "short", or "long"
hour must be "2-digit" or "numeric"
minute must be "2-digit" or "numeric"
second must be "2-digit" or "numeric"
shortOffset
longOffset
shortGeneric
longGeneric
timeZoneName must be "short", "long", "shortOffset", "longOffset", "shortGenric", or "longGeneric"
basic
formatMatcher must be either "basic" or "best fit"
full
medium
dateStyle must be "full", "long", "medium", or "short"
timeStyle must be "full", "long", "medium", or "short"
dateStyle and timeStyle may not be used with other DateTimeFormat options
failed to initialize DateTimeFormat
date value is not finite in DateTimeFormat format()
failed to format date value
date value is not finite in DateTimeFormat formatToParts()
failed to open field position iterator
literal
failed to initialize DateIntervalFormat
Passed date is out of range
Failed to format date interval
startRange
endRange
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/AbstractSlotVisitorInlines.h
JSC::AbstractSlotVisitor::ReferrerContext::ReferrerContext(JSC::AbstractSlotVisitor &, JSC::AbstractSlotVisitor::ReferrerToken)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/DisallowVMEntry.h
JSC::DisallowVMEntryImpl<>::~DisallowVMEntryImpl() [VMType = JSC::VM]
Property did get replaced
numberOfSlotsForMaxOffset doesn't match totalSize
inlineOverflowAccordingToTotalSize doesn't match numberOfOutOfLineSlotsForMaxOffset
Detected offset inconsistency: 
this = 
transitionOffset = 
maxOffset = 
m_inlineCapacity = 
propertyTable = 
numberOfSlotsForMaxOffset = 
totalSize = 
inlineOverflowAccordingToTotalSize = 
numberOfOutOfLineSlotsForMaxOffset = 
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/Assertions.h
void UNREACHABLE_FOR_PLATFORM()
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/IndexingHeader.h
void JSC::IndexingHeader::setVectorLength(uint32_t)
year
yearName
month
hour
minute
second
fractionalSecond
weekday
dayPeriod
timeZoneName
relatedYear
unknown
Object
failed to initialize ListFormat due to invalid locale
conjunction
disjunction
unit
type must be either "conjunction", "disjunction", or "unit"
style must be either "long", "short", or "narrow"
failed to initialize ListFormat
failed to format list of strings
element
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
options argument is not an object or undefined
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSObject.h
JSC::JSValue JSC::JSObject::tryGetIndexQuickly(unsigned int, JSC::ArrayProfile *) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSObjectInlines.h
JSC::JSValue JSC::JSObject::getIndexQuicklyForTypedArray(unsigned int, JSC::ArrayProfile *) const
Iterable passed to ListFormat includes non String
Object
failed to initialize NumberFormat due to invalid locale
decimal
percent
currency
style must be either "decimal", "percent", "currency", or "unit"
currency is not a well-formed currency code
currency must be a string
currencyDisplay
code
symbol
narrowSymbol
name
currencyDisplay must be either "code", "symbol", or "name"
currencySign
standard
accounting
currencySign must be either "standard" or "accounting"
unit is not a well-formed unit identifier
unit must be a string
unitDisplay
unitDisplay must be either "short", "narrow", or "long"
notation
scientific
engineering
compact
notation must be either "standard", "scientific", "engineering", or "compact"
roundingIncrement must be one of 1, 2, 5, 10, 20, 25, 50, 100, 200, 250, 500, 1000, 2000, 2500, 5000
rounding type is not fraction-digits while roundingIncrement is specified
auto
stripIfInteger
trailingZeroDisplay must be either "auto" or "stripIfInteger"
compactDisplay
compactDisplay must be either "short" or "long"
useGrouping
min2
always
useGrouping must be either true, false, "min2", "auto", or "always"
signDisplay
never
exceptZero
negative
signDisplay must be either "auto", "never", "always", "exceptZero", or "negative"
ceil
floor
expand
trunc
halfCeil
halfFloor
halfExpand
halfTrunc
halfEven
roundingMode must be either "ceil", "floor", "expand", "trunc", "halfCeil", "halfFloor", "halfExpand", "halfTrunc", or "halfEven"
-u-nu-
rounding-mode-ceiling
rounding-mode-floor
rounding-mode-up
rounding-mode-down
rounding-mode-half-ceiling
rounding-mode-half-up
rounding-mode-half-floor
rounding-mode-half-down
rounding-mode-half-even
 percent scale/100
 currency/
 unit-width-iso-code
 unit-width-narrow
 unit-width-full-name
 measure-unit/
 per-measure-unit/
 unit-width-short
 scientific
 engineering
 compact-short
 compact-long
 sign-accounting
 sign-auto
 sign-never
 sign-accounting-always
 sign-always
 sign-accounting-except-zero
 sign-except-zero
 sign-accounting-negative
 sign-negative
 group-off
 group-min2
 group-auto
 group-on-aligned
Failed to initialize NumberFormat
failed to initialize NumberFormat
Failed to format a number.
Failed to format a BigInt.
Passed numbers are out of range
start is larger than end
failed to format a range
Failed to format number range
Failed to format number interval
morePrecision
lessPrecision
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
-per-
-infinity
infinity
integer
fraction
exponentSeparator
exponentMinusSign
exponentInteger
group
percentSign
minusSign
plusSign
roundingPriority must be either "auto", "morePrecision", or "lessPrecision"
Computed minimumFractionDigits is larger than maximumFractionDigits
 integer-width/
 precision-increment/
Object
failed to initialize PluralRules due to invalid locale
cardinal
ordinal
type must be "cardinal" or "ordinal"
failed to initialize PluralRules
pluralCategories
other
failed to select plural value
failed to select range of plural value
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
auto JSC::JSObject::putDirectIndex(JSC::JSGlobalObject *, unsigned int, JSC::JSValue, unsigned int, JSC::PutDirectIndexMode)::(anonymous class)::operator()() const
void JSC::JSObject::setIndexQuickly(JSC::VM &, unsigned int, JSC::JSValue)
void JSC::JSObject::setIndexQuicklyForTypedArray(unsigned int, JSC::JSValue)
auto
morePrecision
lessPrecision
GlobalObject
./API/JSAPIGlobalObject.mm
static JSC::Identifier JSC::JSAPIGlobalObject::moduleLoaderResolve(JSC::JSGlobalObject *, JSC::JSModuleLoader *, JSC::JSValue, JSC::JSValue, JSC::JSValue)
No module loader provided.
resolve
reject
filename
JSAPIWrapperObject
./API/JSAPIWrapperObject.mm
static JSC::IsoSubspace *JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::subspaceForImpl(JSC::VM &, JSC::SubspaceAccess) [Parent = JSC::JSAPIWrapperObject]
v24@?0@"JSContext"8@"JSValue"16
Context does not support module loading
script is not a module
script has not run in context or was not evaluated successfully
JSManagedValue is opaque root
File path %@ is not a local file
File at path %@ could not be mapped.
Not all characters in file at %@ are ASCII.
Cache for JSScript is already non-empty. Can not override it.
No cache path was provided during construction of this JSScript.
.tmp
Could not open or lock the bytecode cache file. It's likely another VM or process is already using it. Error: 
Could not open or lock the bytecode cache temp file. Error: 
Unable to generate bytecode for this JSScript because: 
writable
enumerable
configurable
v24@?0@"JSValue"8@"JSValue"16
Object
defineProperty
location
width
height
Cannot convert primitive to NSArray
Cannot convert primitive to NSDictionary
Module specifier: 
 does not start with "/", "./", or "../". Referenced from: 
Could not determine the base URL for loading.
Referrering script's url is not valid: 
Could not form valid URL from identifier and base. Tried:
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/ConcurrentPtrHashSet.h
bool WTF::ConcurrentPtrHashSet::containsImpl(void *) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
./API/JSCallbackObjectFunctions.h
static JSC::EncodedJSValue JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::callImpl(JSC::JSGlobalObject *, JSC::CallFrame *) [Parent = JSC::JSAPIWrapperObject]
static JSC::EncodedJSValue JSC::JSCallbackObject<JSC::JSAPIWrapperObject>::constructImpl(JSC::JSGlobalObject *, JSC::CallFrame *) [Parent = JSC::JSAPIWrapperObject]
Cache path `%@` is not a local file
Cache path `%@` already exists and is not a file
Cache path `%@` does not contain in a valid directory
Cache directory `%@` is not a directory or does not exist
Cache directory `%@` is not a data vault
JSScriptErrorDomain
message
length
v16@?0^{objc_method=}8
First argument of resolution callback is not a JSScript
The JSScript that was provided did not have expected type of kJSScriptTypeModule.
The same JSScript was provided for two different identifiers, previously: 
 and now: 
hasProperty callback returned true for a property that doesn't exist.
Static function property defined with NULL callAsFunction callback.
**call_varargs
callee
thisValue
arguments
firstFree
firstVarArg
**iterator_next
done
iterable
next
iterator
stackOffset
**tail_call_varargs
**iterator_open
symbolIterator
**construct_varargs
**put_by_val
base
property
ecmaMode
**rshift
**lshift
**put_by_val_direct
**new_object
inlineCapacity
**create_async_generator
**get_by_val
**get_argument
index
**create_this
**to_this
srcDst
**call
argc
argv
**tail_call_forward_arguments
**construct
**put_by_id
**new_array_with_size
**new_array
recommendedIndexingType
**to_object
operand
**get_private_name
**set_private_brand
brand
**to_number
**put_private_name
putKind
**check_private_brand
**get_by_id
**get_by_id_with_this
**get_by_val_with_this
**get_by_id_direct
**profile_type
targetVirtualRegister
symbolTableOrScopeDepth
flag
identifier
resolveType
**profile_control_flow
textOffset
**get_prototype_of
**enumerator_next
propertyName
mode
enumerator
**enumerator_get_by_val
**enumerator_in_by_val
**enumerator_has_own_property
**try_get_by_id
**bitor
**catch
exception
thrownValue
**to_numeric
**get_internal_field
**bitxor
**create_promise
isInternalPromise
**tail_call
**call_eval
**new_array_buffer
immutableButterfly
**resolve_scope
scope
localScopeDepth
**get_from_scope
getPutInfo
offset
**put_to_scope
**get_from_arguments
**in_by_val
**create_generator
**bitand
**bitnot
**jneq_ptr
specialPointer
targetLabel
**is_cell_with_type
type
**in_by_id
**has_private_name
**has_private_brand
**put_by_id_with_this
**del_by_id
**put_by_val_with_this
**del_by_val
**put_getter_by_id
attributes
accessor
**put_setter_by_id
**put_getter_setter_by_id
getter
setter
**put_getter_by_val
**put_setter_by_val
**define_data_property
**define_accessor_property
**jmp
**jtrue
condition
**jfalse
**jeq_null
**jneq_null
**jundefined_or_null
**jnundefined_or_null
**jeq_ptr
**jeq
**jstricteq
**jneq
**jnstricteq
**jless
**jlesseq
**jgreater
**jgreatereq
**jnless
**jnlesseq
**jngreater
**jngreatereq
**jbelow
**jbeloweq
**loop_hint
**switch_imm
tableIndex
defaultOffset
scrutinee
**switch_char
**switch_string
**new_func
functionDecl
**new_func_exp
**new_generator_func
**new_generator_func_exp
**new_async_func
**new_async_func_exp
**new_async_generator_func
**new_async_generator_func_exp
**set_function_name
function
**ret
**strcat
count
**to_primitive
**to_property_key
**put_to_arguments
**push_with_scope
currentScope
newScope
**create_lexical_environment
symbolTable
initialValue
**create_generator_frame_environment
**get_parent_scope
**throw
**throw_static_error
errorType
**debug
debugHookType
hasBreakpoint
**end
**get_property_enumerator
**unreachable
**create_rest
arraySize
numParametersToSkip
**get_rest_length
**yield
yieldPoint
argument
**check_traps
**log_shadow_chicken_prologue
**log_shadow_chicken_tail
**resolve_scope_for_hoisting_func_decl_in_eval
**put_internal_field
**nop
**super_sampler_begin
**wide16
**super_sampler_end
**wide32
**enter
**get_scope
**create_direct_arguments
**create_scoped_arguments
**create_cloned_arguments
**create_arguments_butterfly
**new_promise
**new_generator
**argument_count
**check_tdz
**new_array_with_spread
bitVector
**spread
**new_regexp
regexp
**mov
**eq
**neq
**stricteq
**nstricteq
**less
**lesseq
**greater
**greatereq
**below
**beloweq
**mod
**pow
**urshift
**add
profileIndex
operandTypes
OperandTypes(
**mul
**div
**sub
**eq_null
**neq_null
**to_string
**unsigned
**is_empty
**typeof_is_undefined
**typeof_is_object
**typeof_is_function
**is_undefined_or_null
**is_boolean
**is_number
**is_big_int
**is_object
**is_callable
**is_constructor
**inc
**dec
**negate
resultType
**not
**identity_with_profile
topProfile
bottomProfile
**overrides_has_instance
constructor
hasInstanceValue
**instanceof
prototype
**instanceof_custom
**typeof
**catch_all_no_tls
**i32_sub
**i32_mul
**i32_div_s
**i32_div_u
**i32_rem_s
**i32_rem_u
**i32_and
**i32_or
**i32_xor
**i32_shl
**i32_shr_u
**i32_shr_s
**i32_rotr
**i32_rotl
**i32_eq
**i32_ne
**i32_lt_s
**i32_le_s
**i32_lt_u
**i32_le_u
**i32_gt_s
**i32_ge_s
**i32_gt_u
**i32_ge_u
**i32_clz
**i32_ctz
**i32_popcnt
**i32_eqz
**i64_add
**i64_sub
**i64_mul
**i64_div_s
**i64_div_u
**i64_rem_s
**i64_rem_u
**i64_and
**i64_or
**i64_xor
**i64_shl
**i64_shr_u
**i64_shr_s
**i64_rotr
**i64_rotl
**i64_eq
**i64_ne
**i64_lt_s
**i64_le_s
**i64_lt_u
**i64_le_u
**i64_gt_s
**i64_ge_s
**i64_gt_u
**i64_ge_u
**i64_clz
**i64_ctz
**i64_popcnt
**i64_eqz
**f32_add
**f32_sub
**f32_mul
**f32_div
**f32_min
**f32_max
**f32_abs
**f32_neg
**f32_copysign
**f32_ceil
**f32_floor
**f32_trunc
**f32_nearest
**f32_sqrt
**f32_eq
**f32_ne
**f32_lt
**f32_le
**f32_gt
**f32_ge
**f64_add
**f64_sub
**f64_mul
**f64_div
**f64_min
**f64_max
**f64_abs
**f64_neg
**f64_copysign
**f64_ceil
**f64_floor
**f64_trunc
**f64_nearest
**f64_sqrt
**f64_eq
**f64_ne
**f64_lt
**f64_le
**f64_gt
**f64_ge
**i32_trunc_s_f32
**i32_trunc_s_f64
**i32_trunc_u_f32
**i32_trunc_u_f64
**i32_wrap_i64
**i64_trunc_s_f32
**i64_trunc_s_f64
**i64_trunc_u_f32
**i64_trunc_u_f64
**i64_extend_s_i32
**i64_extend_u_i32
**f32_convert_s_i32
**f32_convert_u_i32
**f32_convert_s_i64
**f32_convert_u_i64
**f32_demote_f64
**f32_reinterpret_i32
**f64_convert_s_i32
**f64_convert_u_i32
**f64_convert_s_i64
**f64_convert_u_i64
**f64_promote_f32
**f64_reinterpret_i64
**i32_reinterpret_f32
**i64_reinterpret_f64
**i32_extend8_s
**i32_extend16_s
**i64_extend8_s
**i64_extend16_s
**i64_extend32_s
**i32_trunc_sat_f32_s
**i32_trunc_sat_f32_u
**i32_trunc_sat_f64_s
**i32_trunc_sat_f64_u
**i64_trunc_sat_f32_s
**i64_trunc_sat_f32_u
**i64_trunc_sat_f64_s
**i64_trunc_sat_f64_u
**throw_from_slow_path_trampoline
**throw_from_fault_handler_trampoline_fastTLS
**throw_from_fault_handler_trampoline_reg_instance
**call_return_location
**call_no_tls_return_location
**call_indirect_return_location
**call_indirect_no_tls_return_location
**call_ref_return_location
**call_ref_no_tls_return_location
**switch
**ret_void
**drop_keep
startOffset
dropCount
keepCount
**ref_is_null
**ref_func
functionIndex
**get_global
globalIndex
**set_global
**set_global_ref
**get_global_portable_binding
**set_global_portable_binding
**set_global_ref_portable_binding
**table_get
**table_set
**table_init
dstOffset
srcOffset
elementIndex
**elem_drop
**table_size
**table_grow
fill
size
**table_fill
**table_copy
dstTableIndex
srcTableIndex
numberOfStackArgs
**call_no_tls
**call_indirect
signatureIndex
**call_indirect_no_tls
**call_ref
functionReference
**call_ref_no_tls
**current_memory
**grow_memory
delta
**memory_fill
dstAddress
targetValue
**memory_copy
srcAddress
**memory_init
dataSegmentIndex
**data_drop
**select
nonZero
zero
**load8_u
pointer
**load16_u
**load32_u
**load64_u
**i32_load8_s
**i64_load8_s
**i32_load16_s
**i64_load16_s
**i64_load32_s
**store8
**store16
**store32
**store64
**i64_atomic_rmw_add
**i64_atomic_rmw8_add_u
**i64_atomic_rmw16_add_u
**i64_atomic_rmw32_add_u
**i64_atomic_rmw_sub
**i64_atomic_rmw8_sub_u
**i64_atomic_rmw16_sub_u
**i64_atomic_rmw32_sub_u
**i64_atomic_rmw_and
**i64_atomic_rmw8_and_u
**i64_atomic_rmw16_and_u
**i64_atomic_rmw32_and_u
**i64_atomic_rmw_or
**i64_atomic_rmw8_or_u
**i64_atomic_rmw16_or_u
**i64_atomic_rmw32_or_u
**i64_atomic_rmw_xor
**i64_atomic_rmw8_xor_u
**i64_atomic_rmw16_xor_u
**i64_atomic_rmw32_xor_u
**i64_atomic_rmw_xchg
**i64_atomic_rmw8_xchg_u
**i64_atomic_rmw16_xchg_u
**i64_atomic_rmw32_xchg_u
**i64_atomic_rmw_cmpxchg
expected
**i64_atomic_rmw8_cmpxchg_u
**i64_atomic_rmw16_cmpxchg_u
**i64_atomic_rmw32_cmpxchg_u
**memory_atomic_wait32
timeout
**memory_atomic_wait64
**memory_atomic_notify
**atomic_fence
exceptionIndex
firstValue
**rethrow
argumentCount
**catch_no_tls
**catch_all
**i32_add
%sPrototype
v24@?0@"Protocol"8^B16
JSExport
NSBlock
CallbackFunction
./API/ObjCCallbackFunction.mm
JSValueRef JSC::ObjCCallbackFunctionImpl::call(JSContext *, JSObjectRef, size_t, const JSValueRef *, JSValueRef *)
self type check failed for Objective-C instance method
%sConstructor
v24@?0:8r*16
ERROR: Class %@ exported more than one init family method via JSExport. Class %@ will not have a callable JavaScript constructor function.
init
v16@?0^{objc_property=}8
__JS_EXPORT_AS__
JavaScriptCore
Cannot call a class constructor without |new|
Objective-C blocks called as constructors must return an object.
Malformed type encoding
@"NSString"16@?0@"NSString"8
NSString
static ArgumentTypeDelegate::ResultType ArgumentTypeDelegate::typeVoid()
Argument does not match Objective-C Class
[Symbol.toPrimitive]
JSCallbackObject[Symbol.toPrimitive] method called on incompatible |this| value.
Primitive hint is not a string.
default
number
string
Expected primitive hint to match one of 'default', 'number', 'string'.
API Wrapper
heapSize
heapCapacity
extraMemorySize
objectCount
protectedObjectCount
globalObjectCount
protectedGlobalObjectCount
objectTypeCounts
CallbackConstructor
CallbackFunction
CallbackObject
CallbackGlobalObject
static JSC::EncodedJSValue JSC::JSCallbackObject<JSC::JSNonFinalObject>::callImpl(JSC::JSGlobalObject *, JSC::CallFrame *) [Parent = JSC::JSNonFinalObject]
static JSC::EncodedJSValue JSC::JSCallbackObject<JSC::JSNonFinalObject>::constructImpl(JSC::JSGlobalObject *, JSC::CallFrame *) [Parent = JSC::JSNonFinalObject]
static JSC::EncodedJSValue JSC::JSCallbackObject<JSC::JSGlobalObject>::callImpl(JSC::JSGlobalObject *, JSC::CallFrame *) [Parent = JSC::JSGlobalObject]
static JSC::EncodedJSValue JSC::JSCallbackObject<JSC::JSGlobalObject>::constructImpl(JSC::JSGlobalObject *, JSC::CallFrame *) [Parent = JSC::JSGlobalObject]
com.apple.JavaScriptCore.remote-inspector-xpc
Skipping Automatic Inspection Candidate with pageId(%u) because we are already paused waiting for pageId(%u)
Skipping Automatic Inspection Candidate with pageId(%u) because we failed to receive a response in time.
WIRPageIdentifierKey
WIRAutomaticInspectionCandidateMessage
WIRRawDataMessage
WIRRawDataKey
WIRMessageDataTypeKey
WIRMessageDataTypeFull
WIRConnectionIdentifierKey
WIRDestinationKey
WIRMessageDataTypeFinalChunk
WIRMessageDataTypeChunk
com.apple.webinspectord.available
com.apple.webinspectord.availability_check
check
com.apple.webinspector
RemoteInspector failed to create XPC connection.
WIRPermissionDenied
WIRSocketDataMessage
WIRSocketSetupMessage
WIRWebPageCloseMessage
WIRApplicationGetListingMessage
WIRApplicationWakeUpDebuggablesMessage
WIRIndicateMessage
WIRProxyApplicationSetupMessage
WIRConnectionDiedMessage
WIRAutomaticInspectionConfigurationMessage
WIRAutomaticInspectionRejectMessage
WIRAutomationSessionRequestMessage
Unrecognized RemoteInspector XPC Message: %@
WIRTitleKey
WIRTypeITML
WIRTypeKey
WIRTypeJavaScript
WIRURLKey
WIRTypePage
WIRTypeServiceWorker
WIRTypeWebPage
WIRHasLocalDebuggerKey
WIRSessionIdentifierKey
WIRTypeAutomation
WIRAutomationTargetIsPairedKey
WIRAutomationTargetNameKey
WIRAutomationTargetVersionKey
WIRListingKey
WIRAutomationAvailabilityUnknown
WIRAutomationAvailabilityKey
WIRAutomationAvailabilityAvailable
WIRAutomationAvailabilityNotAvailable
WIRRemoteAutomationEnabledKey
WIRListingMessage
WIRSenderKey
WIRAutomaticallyPause
WIRMessageDataTypeChunkSupportedKey
WIRSocketDataKey
WIRIndicateEnabledKey
WIRProxyApplicationSetupResponseMessage
WIRProxyApplicationParentPID
WIRProxyApplicationParentAuditData
WIRAutomaticInspectionEnabledKey
WIRSessionCapabilitiesKey
org.webkit.webdriver.accept-insecure-certificates
org.webkit.webdriver.webrtc.allow-insecure-media-capture
org.webkit.webdriver.webrtc.suppress-ice-candidate-filtering
v16@?0@"NSObject<OS_xpc_object>"8
msgData
messageName
userInfo
mach-lookup
com.apple.webinspectord.automatic_inspection_enabled
API Marking Constraint #
anonymous
./API/JSScriptRef.cpp
JSValueRef JSScriptEvaluate(JSContextRef, JSScriptRef, JSValueRef, JSValueRef *)
JSObjectMakeTypedArrayWithArrayBuffer expects buffer to be an Array Buffer object
Cannot get the backing buffer for a WebAssembly.Memory
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
Unexpected error compiling builtin: 
Parsed #
Failed to parse #
 ms.
./API/JSTypedArray.cpp
JSTypedArrayType toJSTypedArrayType(JSC::TypedArrayType)
JSC::TypedArrayType toTypedArrayType(JSTypedArrayType)
JSC::JSObject *createTypedArray(JSC::JSGlobalObject *, JSTypedArrayType, RefPtr<JSC::ArrayBuffer> &&, size_t, size_t)
Length out of range of buffer
Byte offset is not aligned
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/interpreter/CallFrame.h
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = BacktraceFunctor]
./API/JSWeakValue.cpp
void JSC::JSWeakValue::clear()
bool JSC::JSWeakValue::isClear() const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
Success
Failure
./assembler/AbstractMacroAssembler.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::AbstractMacroAssemblerBase::StatusCondition)
Generated JIT code for 
    Code at [%p, %p)%s
Cummulative LinkBuffer profile sizes:
Equal
NotEqual
Above
AboveOrEqual
Below
BelowOrEqual
GreaterThan
GreaterThanOrEqual
LessThan
LessThanOrEqual
./assembler/MacroAssembler.cpp
void WTF::printInternal(WTF::PrintStream &, MacroAssembler::RelationalCondition)
Overflow
Signed
PositiveOrZero
Zero
NonZero
void WTF::printInternal(WTF::PrintStream &, MacroAssembler::ResultCondition)
DoubleEqualAndOrdered
DoubleNotEqualAndOrdered
DoubleGreaterThanAndOrdered
DoubleGreaterThanOrEqualAndOrdered
DoubleLessThanAndOrdered
DoubleLessThanOrEqualAndOrdered
DoubleEqualOrUnordered
DoubleNotEqualOrUnordered
DoubleGreaterThanOrUnordered
DoubleGreaterThanOrEqualOrUnordered
DoubleLessThanOrUnordered
DoubleLessThanOrEqualOrUnordered
void WTF::printInternal(WTF::PrintStream &, MacroAssembler::DoubleCondition)
%20s
 count 
 avg size 
BaselineJIT
DFGOSREntry
DFGOSRExit
FTLOSRExit
InlineCache
JumpIsland
Thunk
LLIntThunk
DFGThunk
FTLThunk
BoundFunctionThunk
SpecializedThunk
VirtualThunk
WasmThunk
ExtraCTIThunk
Wasm
YarrJIT
CSSJIT
Uncategorized
Total
./assembler/LinkBuffer.cpp
auto JSC::LinkBuffer::dumpProfileStatistics(std::optional<PrintStream *>)::(anonymous class)::operator()(JSC::LinkBuffer::Profile) const
./assembler/ARM64Assembler.h
void JSC::LinkBuffer::copyCompactAndLinkCode(JSC::MacroAssembler &, JSC::JITCompilationEffort) [InstructionType = unsigned int]
static void JSC::ARM64Assembler::linkJumpOrCall(int *, const int *, void *) [type = JSC::ARM64Assembler::BranchType_JMP, copy = JSC::memcpyWrapper]
static void JSC::ARM64Assembler::linkConditionalBranch(JSC::ARM64Assembler::Condition, int *, const int *, void *) [type = JSC::ARM64Assembler::DirectBranch, copy = JSC::memcpyWrapper]
static void JSC::ARM64Assembler::linkConditionalBranch(JSC::ARM64Assembler::Condition, int *, const int *, void *) [type = JSC::ARM64Assembler::IndirectBranch, copy = JSC::memcpyWrapper]
static void JSC::ARM64Assembler::linkCompareAndBranch(JSC::ARM64Assembler::Condition, bool, JSC::ARM64Assembler::RegisterID, int *, const int *, void *) [type = JSC::ARM64Assembler::DirectBranch, copy = JSC::memcpyWrapper]
static void JSC::ARM64Assembler::linkCompareAndBranch(JSC::ARM64Assembler::Condition, bool, JSC::ARM64Assembler::RegisterID, int *, const int *, void *) [type = JSC::ARM64Assembler::IndirectBranch, copy = JSC::memcpyWrapper]
static void JSC::ARM64Assembler::linkTestAndBranch(JSC::ARM64Assembler::Condition, unsigned int, JSC::ARM64Assembler::RegisterID, int *, const int *, void *) [type = JSC::ARM64Assembler::DirectBranch, copy = JSC::memcpyWrapper]
static void JSC::ARM64Assembler::linkTestAndBranch(JSC::ARM64Assembler::Condition, unsigned int, JSC::ARM64Assembler::RegisterID, int *, const int *, void *) [type = JSC::ARM64Assembler::IndirectBranch, copy = JSC::memcpyWrapper]
static void JSC::ARM64Assembler::linkConditionalBranch(JSC::ARM64Assembler::Condition, int *, const int *, void *) [type = JSC::ARM64Assembler::DirectBranch, copy = JSC::performJITMemcpy]
static void JSC::ARM64Assembler::linkCompareAndBranch(JSC::ARM64Assembler::Condition, bool, JSC::ARM64Assembler::RegisterID, int *, const int *, void *) [type = JSC::ARM64Assembler::DirectBranch, copy = JSC::performJITMemcpy]
static void JSC::ARM64Assembler::linkTestAndBranch(JSC::ARM64Assembler::Condition, unsigned int, JSC::ARM64Assembler::RegisterID, int *, const int *, void *) [type = JSC::ARM64Assembler::DirectBranch, copy = JSC::performJITMemcpy]
static void JSC::ARM64Assembler::fillNops(void *, size_t) [copy = JSC::memcpyWrapper]
static void JSC::ARM64Assembler::fillNops(void *, size_t) [copy = JSC::performJITMemcpy]
./assembler/AbstractMacroAssembler.h
(null)
./assembler/ProbeContext.cpp
void JSC::Probe::executeJSCJITProbe(JSC::Probe::State *)
./assembler/ProbeStack.cpp
JSC::Probe::Page *JSC::Probe::Stack::ensurePageFor(void *)
width = 
: ; frequency = 
  Predecessors: 
  Successors: 
./b3/B3BasicBlock.cpp
JSC::B3::Value *JSC::B3::BasicBlock::appendNewControlValue(JSC::B3::Procedure &, JSC::B3::Opcode, JSC::B3::Origin)
JSC::B3::Value *JSC::B3::BasicBlock::appendNewControlValue(JSC::B3::Procedure &, JSC::B3::Opcode, JSC::B3::Origin, JSC::B3::Value *)
JSC::B3::Value *JSC::B3::BasicBlock::appendNewControlValue(JSC::B3::Procedure &, JSC::B3::Opcode, JSC::B3::Origin, const JSC::B3::FrequentedBlock &)
JSC::B3::Value *JSC::B3::BasicBlock::appendNewControlValue(JSC::B3::Procedure &, JSC::B3::Opcode, JSC::B3::Origin, JSC::B3::Value *, const JSC::B3::FrequentedBlock &, const JSC::B3::FrequentedBlock &)
./b3/B3Value.h
static size_t JSC::B3::Value::adjacencyListSpace(JSC::B3::Kind)
canonicalizePrePostIncrements
default->
B3::CheckValue lowered to 
 with 
 args.
./b3/B3CheckValue.cpp
void JSC::B3::CheckValue::convertToAdd()
b3  
Compilation
./b3/B3CheckSpecial.cpp
unsigned int JSC::B3::(anonymous namespace)::numB3Args(JSC::B3::Kind)
%le(%llu)
%le(%u)
DataSection at 
 bytes.
duplicateTails
Terminal
ExitsSideways
ControlDependent
WritesLocalState
ReadsLocalState
WritesPinned
ReadsPinned
Fence
Writes:
Reads:
eliminateCommonSubexpressions
./b3/B3EliminateCommonSubexpressions.cpp
bool JSC::B3::(anonymous namespace)::CSE::replaceMemoryValue(const JSC::B3::(anonymous namespace)::MemoryMatches &, const Replace &) [Replace = (lambda at ./b3/B3EliminateCommonSubexpressions.cpp:360:17)]
bool JSC::B3::(anonymous namespace)::CSE::replaceMemoryValue(const JSC::B3::(anonymous namespace)::MemoryMatches &, const Replace &) [Replace = (lambda at ./b3/B3EliminateCommonSubexpressions.cpp:381:17)]
bool JSC::B3::(anonymous namespace)::CSE::replaceMemoryValue(const JSC::B3::(anonymous namespace)::MemoryMatches &, const Replace &) [Replace = (lambda at ./b3/B3EliminateCommonSubexpressions.cpp:400:17)]
bool JSC::B3::(anonymous namespace)::CSE::replaceMemoryValue(const JSC::B3::(anonymous namespace)::MemoryMatches &, const Replace &) [Replace = (lambda at ./b3/B3EliminateCommonSubexpressions.cpp:420:17)]
bool JSC::B3::(anonymous namespace)::CSE::replaceMemoryValue(const JSC::B3::(anonymous namespace)::MemoryMatches &, const Replace &) [Replace = (lambda at ./b3/B3EliminateCommonSubexpressions.cpp:582:13)]
(null)
Bottom
eliminateDeadCode
./b3/B3FixSSA.cpp
void JSC::B3::demoteValues(JSC::B3::Procedure &, const IndexSet<JSC::B3::Value *> &)
fixSSA
foldPathConstants
Rare
./b3/B3FrequencyClass.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::B3::FrequencyClass)
void JSC::B3::(anonymous namespace)::fixSSAGlobally(JSC::B3::Procedure &)
fixSSA: computePhis
fixSSA: convert
prepareForGeneration
generateToAir
Initial B3:
B3 after 
, before generation:
hoistLoopInvariantValues
./b3/B3HoistLoopInvariantValues.cpp
bool JSC::B3::hoistLoopInvariantValues(JSC::B3::Procedure &)
inferSwitches
Chill
Traps
legalizeMemoryOffsets
B3::lowerMacros
lowerMacrosAfterOptimizations
./b3/B3LowerMacrosAfterOptimizations.cpp
bool JSC::B3::lowerMacrosAfterOptimizations(JSC::B3::Procedure &)
./b3/B3MemoryValueInlines.h
JSC::B3::Width JSC::B3::MemoryValue::accessWidth() const
./b3/B3LowerMacros.cpp
bool JSC::B3::(anonymous namespace)::LowerMacros::run()
./b3/B3CCallValue.h
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)40321, T = JSC::AssemblerLabel]
./b3/B3Opcode.h
JSC::B3::Opcode JSC::B3::signExtendOpcode(JSC::B3::Width)
lowerToAir
offset = 
range = 
fenceRange = 
moveConstants
Identity
Opaque
Const32
Const64
ConstDouble
ConstFloat
BottomTuple
SlotBase
ArgumentReg
FramePointer
UDiv
UMod
FMin
FMax
BitAnd
BitOr
BitXor
SShr
ZShr
RotR
RotL
Ceil
Floor
Sqrt
BitwiseCast
SExt8
SExt16
SExt32
ZExt32
Trunc
IToD
IToF
FloatToDouble
DoubleToFloat
LessEqual
GreaterEqual
AboveEqual
BelowEqual
EqualOrUnordered
Select
Load8Z
Load8S
Load16Z
Load16S
Load
Store8
Store16
Store
AtomicWeakCAS
AtomicStrongCAS
AtomicXchgAdd
AtomicXchgAnd
AtomicXchgOr
AtomicXchgSub
AtomicXchgXor
AtomicXchg
Depend
WasmAddress
CCall
Patchpoint
Extract
CheckAdd
CheckSub
CheckMul
Check
WasmBoundsCheck
Upsilon
Jump
Branch
Switch
EntrySwitch
Return
Oops
./b3/B3Opcode.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::B3::Opcode)
./b3/B3OptimizeAssociativeExpressionTrees.cpp
int64_t JSC::B3::OptimizeAssociativeExpressionTrees::neutralElement(JSC::B3::Opcode)
bool JSC::B3::OptimizeAssociativeExpressionTrees::isAbsorbingElement(JSC::B3::Opcode, int64_t)
void JSC::B3::OptimizeAssociativeExpressionTrees::combineConstants(JSC::B3::Opcode, int64_t &, int64_t)
void JSC::B3::OptimizeAssociativeExpressionTrees::emitValue(JSC::B3::Opcode, JSC::B3::Value *, unsigned int, JSC::B3::InsertionSet &, size_t, Vector<JSC::B3::Value *, 4> &)
optimizeAssociativeExpressionTrees
Origin(
./b3/B3LowerToAir.cpp
void JSC::B3::(anonymous namespace)::LowerToAir::lower()
FATAL: could not lower 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/b3/air/AirHelpers.h
Air::Opcode JSC::B3::Air::moveForType(JSC::B3::Type)
JSC::B3::(anonymous namespace)::Arg JSC::B3::(anonymous namespace)::LowerToAir::addr(JSC::B3::Value *)
Air::Opcode JSC::B3::(anonymous namespace)::LowerToAir::opcodeForType(Air::Opcode, Air::Opcode, Air::Opcode, Air::Opcode, JSC::B3::Type)
void JSC::B3::(anonymous namespace)::LowerToAir::appendCAS(JSC::B3::Value *, bool)
bool JSC::B3::(anonymous namespace)::LowerToAir::tryAppendStoreBinOp(JSC::B3::Value *, JSC::B3::Value *) [opcode32 = JSC::B3::Air::Add32, opcode64 = JSC::B3::Air::Add64, commutativity = JSC::B3::Commutative]
JSC::B3::(anonymous namespace)::LowerToAir::ArgPromise JSC::B3::(anonymous namespace)::LowerToAir::loadPromiseAnyOpcode(JSC::B3::Value *)
bool JSC::B3::(anonymous namespace)::LowerToAir::tryAppendStoreBinOp(JSC::B3::Value *, JSC::B3::Value *) [opcode32 = JSC::B3::Air::Sub32, opcode64 = JSC::B3::Air::Sub64, commutativity = JSC::B3::NotCommutative]
bool JSC::B3::(anonymous namespace)::LowerToAir::tryAppendStoreBinOp(JSC::B3::Value *, JSC::B3::Value *) [opcode32 = JSC::B3::Air::And32, opcode64 = JSC::B3::Air::And64, commutativity = JSC::B3::Commutative]
bool JSC::B3::(anonymous namespace)::LowerToAir::tryAppendStoreBinOp(JSC::B3::Value *, JSC::B3::Value *) [opcode32 = JSC::B3::Air::Xor32, opcode64 = JSC::B3::Air::Xor64, commutativity = JSC::B3::Commutative]
void JSC::B3::(anonymous namespace)::LowerToAir::appendStore(JSC::B3::Value *, const JSC::B3::(anonymous namespace)::Arg &)
Air::Opcode JSC::B3::(anonymous namespace)::LowerToAir::storeOpcode(JSC::B3::Width, JSC::B3::Bank)
bool JSC::B3::(anonymous namespace)::LowerToAir::tryAppendStoreBinOp(JSC::B3::Value *, JSC::B3::Value *) [opcode32 = JSC::B3::Air::Add8, opcode64 = JSC::B3::Air::Oops, commutativity = JSC::B3::Commutative]
bool JSC::B3::(anonymous namespace)::LowerToAir::tryAppendStoreBinOp(JSC::B3::Value *, JSC::B3::Value *) [opcode32 = JSC::B3::Air::Add16, opcode64 = JSC::B3::Air::Oops, commutativity = JSC::B3::Commutative]
auto JSC::B3::(anonymous namespace)::LowerToAir::lower()::(anonymous class)::operator()(JSC::B3::(anonymous namespace)::Arg, JSC::B3::Type, unsigned int) const
static JSC::MacroAssemblerARM64::RelationalCondition JSC::MacroAssembler::flip(JSC::MacroAssemblerARM64::RelationalCondition)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/b3/air/AirArg.h
static bool JSC::B3::Air::Arg::isRepresentableAs(JSC::B3::Width, JSC::B3::Air::Arg::Signedness, int64_t)
auto JSC::B3::(anonymous namespace)::LowerToAir::lower()::(anonymous class)::operator()(JSC::B3::Type, JSC::B3::ValueRep, JSC::B3::(anonymous namespace)::Tmp) const
void JSC::B3::(anonymous namespace)::LowerToAir::fillStackmap(JSC::B3::(anonymous namespace)::Inst &, JSC::B3::StackmapValue *, unsigned int)
const Vector<JSC::B3::(anonymous namespace)::Tmp> &JSC::B3::(anonymous namespace)::LowerToAir::tmpsForTuple(JSC::B3::Value *)
Air::Opcode JSC::B3::Air::relaxedMoveForType(JSC::B3::Type)
JSC::B3::(anonymous namespace)::LowerToAir::ArgPromise::~ArgPromise()
JSC::B3::Air::Arg JSC::B3::Air::Arg::inverted(bool) const
static JSC::MacroAssemblerARM64::ResultCondition JSC::MacroAssembler::invert(JSC::MacroAssemblerARM64::ResultCondition)
static JSC::AbstractMacroAssemblerBase::StatusCondition JSC::AbstractMacroAssemblerBase::invert(JSC::AbstractMacroAssemblerBase::StatusCondition)
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Value *>]
./b3/B3PatchpointSpecial.cpp
virtual bool JSC::B3::PatchpointSpecial::admitsStack(JSC::B3::Inst &, unsigned int)
Lowered B3::PatchpointValue.
resultConstraints = 
numGPScratchRegisters = 
numFPScratchRegisters = 
, before 
initial
./b3/B3Procedure.cpp
JSC::B3::Value *JSC::B3::Procedure::addIntConstant(JSC::B3::Origin, JSC::B3::Type, int64_t)
JSC::B3::Value *JSC::B3::Procedure::addConstant(JSC::B3::Origin, JSC::B3::Type, uint64_t)
Opt Level: 
Orphaned values:
Has Quirks: True
Variables:
Stack slots:
void JSC::B3::Procedure::addFastConstant(const JSC::B3::ValueKey &)
reduceDoubleToFloat
reduceLoopStrength
./b3/B3ValueInlines.h
JSC::B3::Value *JSC::B3::Value::cloneImpl() const
Range-based domination check is broken
Lengauer-Tarjan domination is broken
DFG DOMINATOR VALIDATION FAILED:
For block domination relationships:
 -> 
Control flow graph:
    Block 
: successors = [
], predecessors = [
Lengauer-Tarjan Dominators:
Naive Dominators:
Graph at time of failure:
DFG DOMINATOR VALIDATION FAILIED!
    Block #
: idom = 
, idomKids = [
], pre/post = 
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/NaturalLoops.h
WTF::NaturalLoops<JSC::B3::CFG>::NaturalLoops(Graph &, Dominators<Graph> &, bool) [Graph = JSC::B3::CFG]
<null>
#root
    Preds: 
    Succs: 
./b3/B3ReduceDoubleToFloat.cpp
JSC::B3::Value *JSC::B3::(anonymous namespace)::DoubleToFloatReduction::transformToFloat(JSC::B3::Value *, unsigned int, JSC::B3::InsertionSet &)
./b3/B3SparseCollection.h
void JSC::B3::SparseCollection<JSC::B3::Variable>::remove(T *) [T = JSC::B3::Variable]
void JSC::B3::SparseCollection<JSC::B3::Value>::remove(T *) [T = JSC::B3::Value]
reduceStrength
./b3/B3StackmapGenerationParams.cpp
Vector<Box<MacroAssembler::Label>> JSC::B3::StackmapGenerationParams::successorLabels() const
bool JSC::B3::StackmapGenerationParams::fallsThroughToSuccessor(unsigned int) const
./b3/B3StackmapSpecial.cpp
void JSC::B3::StackmapSpecial::forEachArgImpl(unsigned int, unsigned int, JSC::B3::Inst &, JSC::B3::StackmapSpecial::RoleMode, std::optional<unsigned int>, const ScopedLambda<Inst::EachArgCallback> &, std::optional<Width>)
static bool JSC::B3::StackmapSpecial::isArgValidForRep(Air::Code &, const Air::Arg &, const JSC::B3::ValueRep &)
SameAsRep
ForceLateUseUnlessRecoverable
ForceLateUse
void WTF::printInternal(WTF::PrintStream &, StackmapSpecial::RoleMode)
generator = 
, earlyClobbered = 
, lateClobbered = 
, usedRegisters = 
./b3/B3SwitchValue.cpp
bool JSC::B3::SwitchValue::hasFallThrough(const JSC::B3::BasicBlock *) const
cases = [
./b3/B3ReduceStrength.cpp
void JSC::B3::(anonymous namespace)::ReduceStrength::simplifyCFG()
void JSC::B3::(anonymous namespace)::ReduceStrength::checkPredecessorValidity()
void JSC::B3::(anonymous namespace)::ReduceStrength::reduceValueStrength()
static JSC::B3::(anonymous namespace)::IntRange JSC::B3::(anonymous namespace)::IntRange::top(JSC::B3::Type)
static JSC::B3::(anonymous namespace)::IntRange JSC::B3::(anonymous namespace)::IntRange::rangeForMask(int64_t, JSC::B3::Type)
JSC::B3::(anonymous namespace)::IntRange JSC::B3::(anonymous namespace)::IntRange::sShr(int32_t, JSC::B3::Type)
JSC::B3::(anonymous namespace)::IntRange JSC::B3::(anonymous namespace)::IntRange::zShr(int32_t, JSC::B3::Type)
JSC::B3::(anonymous namespace)::IntRange JSC::B3::(anonymous namespace)::IntRange::shl(int32_t, JSC::B3::Type)
JSC::B3::(anonymous namespace)::IntRange JSC::B3::(anonymous namespace)::IntRange::add(const JSC::B3::(anonymous namespace)::IntRange &, JSC::B3::Type)
JSC::B3::(anonymous namespace)::IntRange JSC::B3::(anonymous namespace)::IntRange::sub(const JSC::B3::(anonymous namespace)::IntRange &, JSC::B3::Type)
JSC::B3::(anonymous namespace)::IntRange JSC::B3::(anonymous namespace)::IntRange::mul(const JSC::B3::(anonymous namespace)::IntRange &, JSC::B3::Type)
void JSC::B3::(anonymous namespace)::ReduceStrength::specializeSelect(JSC::B3::Value *)
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/StdLibExtras.h
ToType WTF::safeCast(FromType) [ToType = int, FromType = unsigned int]
Void
Int32
Int64
Float
Double
Tuple
./b3/B3Type.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::B3::Type)
^(null)
<null>
./b3/B3Value.cpp
void JSC::B3::Value::replaceWithIdentity(JSC::B3::Value *)
void JSC::B3::Value::replaceWithNop()
void JSC::B3::Value::replaceWithJump(JSC::B3::BasicBlock *, JSC::B3::FrequentedBlock)
void JSC::B3::Value::replaceWithOops(JSC::B3::BasicBlock *)
Then:
, Else:
static JSC::B3::Type JSC::B3::Value::typeFor(JSC::B3::Kind, JSC::B3::Value *, JSC::B3::Value *)
Bad kind 
 with 
 args.
static void JSC::B3::Value::badKind(JSC::B3::Kind, unsigned int)
./b3/B3ValueRep.cpp
void JSC::B3::ValueRep::addUsedRegistersTo(JSC::RegisterSet &) const
void JSC::B3::ValueRep::dump(WTF::PrintStream &) const
void JSC::B3::ValueRep::emitRestore(JSC::AssemblyHelpers &, JSC::Reg) const
JSC::ValueRecovery JSC::B3::ValueRep::recoveryForJSValue() const
WarmAny
ColdAny
LateColdAny
SomeRegister
SomeRegisterWithClobber
SomeEarlyRegister
SomeLateRegister
Register
LateRegister
StackArgument
Constant
void WTF::printInternal(WTF::PrintStream &, ValueRep::Kind)
 var
./b3/B3Validate.cpp
void JSC::B3::(anonymous namespace)::Validater::run()
m_procedure.tuples()[tuple].size()
In tuple 
m_procedure.tuples()[tuple][i].isNumeric()
 at index
valueInBlock.contains(value)
valueInProc.contains(entry.key)
entry.value == 1
child
valueInProc.contains(child)
valueIndex.get(value) > valueIndex.get(child)
dominators.dominates(valueOwner.get(child), valueOwner.get(value))
block->size() >= 1
!block->at(i)->effects().terminal
block->last()->effects().terminal
blocks.contains(successor)
predecessors == successor->predecessors()
child->type() != Void
!value->kind().hasExtraBits()
!value->numChildren()
value->type() == Void
value->numChildren() == 1
value->type() == value->child(0)->type()
value->type() != Void
value->type() == Double
value->type() == Float
value->type().isTuple()
value->child(0)->type() == value->as<VariableValue>()->variable()->type()
value->type() == value->as<VariableValue>()->variable()->type()
value->type() == pointerType()
(value->as<ArgumentRegValue>()->argumentReg().isGPR() ? pointerType() : Double) == value->type()
!value->kind().traps()
value->opcode() == Div || value->opcode() == Mod
value->type().isInt()
value->numChildren() == 2
value->type() == value->child(1)->type()
value->type().isNumeric()
value->type() == Float || value->type() == Double
value->child(1)->type() == Int32
value->type() != value->child(0)->type()
(value->type() == Int64 && value->child(0)->type() == Double) || (value->type() == Double && value->child(0)->type() == Int64) || (value->type() == Float && value->child(0)->type() == Int32) || (value->type() == Int32 && value->child(0)->type() == Float)
value->child(0)->type() == Int32
value->child(0)->type().isInt()
(value->type() == Int32 && value->child(0)->type() == Int64) || (value->type() == Float && value->child(0)->type() == Double)
value->child(0)->type().isFloat()
value->type().isFloat()
value->child(0)->type() == Float
value->child(0)->type() == Double
value->child(0)->type() == value->child(1)->type()
value->numChildren() == 3
value->type() == value->child(2)->type()
!value->kind().isChill()
value->child(0)->type() == pointerType()
value->child(1)->type() == pointerType()
value->child(2)->type() == pointerType()
value->numChildren() >= 1
value->as<PatchpointValue>()->resultConstraints.size() == 1
value->as<PatchpointValue>()->resultConstraints[0] == ValueRep::WarmAny
m_procedure.isValidTuple(value->type())
value->as<PatchpointValue>()->resultConstraints.size() == m_procedure.tupleForType(value->type()).size()
value->child(0)->type() == Tuple
value->numChildren() >= 2
value->child(1)->type().isInt()
value->as<StackmapValue>()->constrainedChild(0).rep() == ValueRep::WarmAny
value->as<StackmapValue>()->constrainedChild(1).rep() == ValueRep::WarmAny
m_procedure.code().isPinned(value->as<WasmBoundsCheckValue>()->bounds().pinnedSize)
m_procedure.code().wasmBoundsCheckGenerator()
value->as<UpsilonValue>()->phi()
value->as<UpsilonValue>()->phi()->opcode() == Phi
value->child(0)->type() != Void
value->child(0)->type() == value->as<UpsilonValue>()->phi()->type()
valueInProc.contains(value->as<UpsilonValue>()->phi())
valueOwner.get(value)->numSuccessors() == 1
!valueOwner.get(value)->numSuccessors()
value->numChildren() <= 1
valueOwner.get(value)->numSuccessors() == 2
value->as<SwitchValue>()->hasFallThrough(valueOwner.get(value))
valueOwner.get(value)->numSuccessors() == value->as<SwitchValue>()->numCaseValues() + 1
caseValues[i - 1] != caseValues[i]
, caseValue = 
valueOwner.get(value)->numSuccessors() == m_procedure.numEntrypoints()
!(value->effects().writes && value->key())
(!value->effects().exitsSideways || value->effects().reads != HeapRange())
variable->type() != Void
block->numPredecessors() == predecessors.size()
B3 VALIDATION FAILURE
    After 
Before 
At time of failure:
void JSC::B3::(anonymous namespace)::Validater::validateFence(JSC::B3::Value *)
memory->accessBank() == GP
Fence at 
void JSC::B3::(anonymous namespace)::Validater::validateStackAccess(JSC::B3::Value *)
memory->offset() >= 0
void JSC::B3::(anonymous namespace)::Validater::validateAtomic(JSC::B3::Value *)
bestType(GP, atomic->accessWidth()) == atomic->accessType()
void JSC::B3::(anonymous namespace)::Validater::validateStackmapConstraint(JSC::B3::Value *, const JSC::B3::ConstrainedValue &, JSC::B3::(anonymous namespace)::Validater::ConstraintRole, unsigned int)
role == ConstraintRole::Use
context->as<PatchpointValue>()
role == ConstraintRole::Def
m_procedure.extractFromTuple(value.value()->type(), tupleIndex).isInt()
value.value()->type().isInt()
m_procedure.extractFromTuple(value.value()->type(), tupleIndex).isFloat()
value.value()->type().isFloat()
void JSC::B3::(anonymous namespace)::Validater::validateStackmap(JSC::B3::Value *)
stackmap
stackmap->numChildren() >= stackmap->reps().size()
void JSC::B3::(anonymous namespace)::Validater::validatePhisAreDominatedByUpsilons()
undominatedPhis.isEmpty()
Undominated phi at top of entry block: 
B3::VariableLiveness
pinnedSize = 
maximum = 
./b3/B3Width.cpp
JSC::B3::Type JSC::B3::bestType(JSC::B3::Bank, JSC::B3::Width)
void WTF::printInternal(WTF::PrintStream &, JSC::B3::Width)
Air::generateAndAllocateRegisters
./b3/air/AirAllocateRegistersAndStackAndGenerateCode.cpp
void JSC::B3::Air::GenerateAndAllocateRegisters::generate(JSC::CCallHelpers &)
allocateRegistersAndStackByLinearScan
Air before linear scan:
Air after linear scan:
allocateRegistersByGraphColoring
Air::Liveness
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/Liveness.h
void WTF::Liveness<JSC::B3::Air::UnifiedTmpLivenessAdapter>::compute() [Adapter = JSC::B3::Air::UnifiedTmpLivenessAdapter]
bool JSC::B3::Air::GenerateAndAllocateRegisters::assignTmp(JSC::B3::Air::Tmp &, JSC::B3::Bank, bool)
LinearScan::buildIntervals
At block 
  indexOfHead = 
  idnexOfTail = 
Intervals:
Clobbers: 
{interval = 
, spilled = 
, assigned = 
, isUnspillable = 
, possibleRegs = 
, didBuildPossibleRegs = 
./b3/air/AirAllocateRegistersAndStackByLinearScan.cpp
void JSC::B3::Air::(anonymous namespace)::LinearScan::spill(JSC::B3::Air::Tmp)
!entry.isUnspillable
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/IndexMap.h
void WTF::IndexMap<JSC::B3::Air::Tmp::AbsolutelyIndexed<JSC::B3::GP>, JSC::B3::Air::(anonymous namespace)::TmpData>::append(const Key &, PassedValue &&) [Key = JSC::B3::Air::Tmp::AbsolutelyIndexed<JSC::B3::GP>, Value = JSC::B3::Air::(anonymous namespace)::TmpData, PassedValue = JSC::B3::Air::(anonymous namespace)::TmpData &]
void WTF::IndexMap<JSC::B3::Air::Tmp::AbsolutelyIndexed<JSC::B3::FP>, JSC::B3::Air::(anonymous namespace)::TmpData>::append(const Key &, PassedValue &&) [Key = JSC::B3::Air::Tmp::AbsolutelyIndexed<JSC::B3::FP>, Value = JSC::B3::Air::(anonymous namespace)::TmpData, PassedValue = JSC::B3::Air::(anonymous namespace)::TmpData &]
Tmps: 
Index #
  clobberIndex = 
  At: 
, instIndex = 
    Prev: 
    Next: 
  Active:
  Possible regs: 
void JSC::B3::Air::(anonymous namespace)::LinearScan::attemptScanForRegisters(JSC::B3::Bank)
spillEntry.assigned
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/Deque.h
T &WTF::Deque<JSC::B3::Air::Tmp, 0>::first() [T = JSC::B3::Air::Tmp, inlineCapacity = 0]
void JSC::B3::Air::(anonymous namespace)::LinearScan::assign(JSC::B3::Air::Tmp, JSC::Reg)
!entry.spilled
T &WTF::Deque<JSC::B3::Air::Tmp, 0>::last() [T = JSC::B3::Air::Tmp, inlineCapacity = 0]
About to allocate registers. State of all tmps:
At: 
Failed to allocate reg for: 
auto JSC::B3::Air::(anonymous namespace)::LinearScan::assignRegisters()::(anonymous class)::operator()(JSC::B3::Air::Tmp &) const
  Assigning offset = 
 to spill 
 for 
void WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<JSC::B3::GP, JSC::B3::Air::Arg::Cold>>::compute() [Adapter = JSC::B3::Air::TmpLivenessAdapter<JSC::B3::GP, JSC::B3::Air::Arg::Cold>]
./b3/air/AirAllocateRegistersByGraphColoring.cpp
bool JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned short, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>, JSC::B3::GP>::conservativeHeuristic(IndexType, IndexType) [IndexType = unsigned short, InterferenceSet = WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>, bank = JSC::B3::GP]
registerCount() <= MacroAssembler::numGPRs + MacroAssembler::numFPRs
IndexType JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned short, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>, JSC::B3::GP>::selectSpill() [IndexType = unsigned short, InterferenceSet = WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>, bank = JSC::B3::GP]
iterator != m_spillWorklist.end()
!m_unspillableTmps.get(*iterator)
FATAL: No color for 
Code:
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::GP, IRC, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned short, bank = JSC::B3::GP, AllocatorType = IRC, InterferenceSet = WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::GP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::GP, IRC, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>]
instBank == bank
inst.args.size() == 3
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::GP, Briggs, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned short, bank = JSC::B3::GP, AllocatorType = Briggs, InterferenceSet = WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::GP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::GP, Briggs, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>]
bool JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned short, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>, JSC::B3::GP>::conservativeHeuristic(IndexType, IndexType) [IndexType = unsigned short, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>, bank = JSC::B3::GP]
IndexType JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned short, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>, JSC::B3::GP>::selectSpill() [IndexType = unsigned short, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>, bank = JSC::B3::GP]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::GP, IRC, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned short, bank = JSC::B3::GP, AllocatorType = IRC, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::GP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::GP, IRC, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>>]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::GP, Briggs, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned short, bank = JSC::B3::GP, AllocatorType = Briggs, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::GP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::GP, Briggs, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>>]
bool JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned int, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>, JSC::B3::GP>::conservativeHeuristic(IndexType, IndexType) [IndexType = unsigned int, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>, bank = JSC::B3::GP]
IndexType JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned int, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>, JSC::B3::GP>::selectSpill() [IndexType = unsigned int, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>, bank = JSC::B3::GP]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned int, JSC::B3::GP, IRC, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned int, bank = JSC::B3::GP, AllocatorType = IRC, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::GP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned int, JSC::B3::GP, IRC, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>>]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned int, JSC::B3::GP, Briggs, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned int, bank = JSC::B3::GP, AllocatorType = Briggs, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::GP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned int, JSC::B3::GP, Briggs, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>>]
void WTF::Liveness<JSC::B3::Air::TmpLivenessAdapter<JSC::B3::FP, JSC::B3::Air::Arg::Cold>>::compute() [Adapter = JSC::B3::Air::TmpLivenessAdapter<JSC::B3::FP, JSC::B3::Air::Arg::Cold>]
bool JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned short, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>, JSC::B3::FP>::conservativeHeuristic(IndexType, IndexType) [IndexType = unsigned short, InterferenceSet = WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>, bank = JSC::B3::FP]
IndexType JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned short, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>, JSC::B3::FP>::selectSpill() [IndexType = unsigned short, InterferenceSet = WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>, bank = JSC::B3::FP]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::FP, IRC, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned short, bank = JSC::B3::FP, AllocatorType = IRC, InterferenceSet = WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::FP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::FP, IRC, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::FP, Briggs, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned short, bank = JSC::B3::FP, AllocatorType = Briggs, InterferenceSet = WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::FP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::FP, Briggs, WTF::UndirectedEdgesDuplicatingAdapter<WTF::InterferenceBitVector<unsigned short>>>]
bool JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned short, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>, JSC::B3::FP>::conservativeHeuristic(IndexType, IndexType) [IndexType = unsigned short, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>, bank = JSC::B3::FP]
IndexType JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned short, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>, JSC::B3::FP>::selectSpill() [IndexType = unsigned short, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>, bank = JSC::B3::FP]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::FP, IRC, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned short, bank = JSC::B3::FP, AllocatorType = IRC, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::FP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::FP, IRC, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>>]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::FP, Briggs, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned short, bank = JSC::B3::FP, AllocatorType = Briggs, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::FP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned short, JSC::B3::FP, Briggs, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned short>, unsigned short>>>]
bool JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned int, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>, JSC::B3::FP>::conservativeHeuristic(IndexType, IndexType) [IndexType = unsigned int, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>, bank = JSC::B3::FP]
IndexType JSC::B3::Air::(anonymous namespace)::AbstractColoringAllocator<unsigned int, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>, JSC::B3::FP>::selectSpill() [IndexType = unsigned int, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>, bank = JSC::B3::FP]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned int, JSC::B3::FP, IRC, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned int, bank = JSC::B3::FP, AllocatorType = IRC, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::FP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned int, JSC::B3::FP, IRC, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>>]
JSC::Reg JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned int, JSC::B3::FP, Briggs, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>>::allocatedReg(JSC::B3::Air::Tmp) const [IndexType = unsigned int, bank = JSC::B3::FP, AllocatorType = Briggs, InterferenceSet = WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>]
void JSC::B3::Air::(anonymous namespace)::GraphColoringRegisterAllocation::addSpillAndFill(const AllocatorType &, WTF::BitVector &) [bank = JSC::B3::FP, AllocatorType = JSC::B3::Air::(anonymous namespace)::ColoringAllocator<unsigned int, JSC::B3::FP, Briggs, WTF::UndirectedEdgesDedupAdapter<WTF::InterferenceVector<WTF::LikelyDenseUnsignedIntegerSet<unsigned int>, unsigned int>>>]
void WTF::Liveness<JSC::B3::VariableLivenessAdapter>::compute() [Adapter = JSC::B3::VariableLivenessAdapter]
./b3/air/AirCode.h
void JSC::B3::Air::Code::setEntrypointLabels(Vector &&) [Vector = WTF::Vector<JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label, 0, WTF::CrashOnOverflow, 16>]
allocateStackByGraphColoring
<invalid>
$0x%llx
%xzr
,Pre($
,Post($
(callArg)
./b3/air/AirArg.cpp
void JSC::B3::Air::Arg::dump(WTF::PrintStream &) const
Invalid
BigImm
BitImm
BitImm64
ZeroReg
SimpleAddr
Addr
ExtendedOffsetAddr
CallArg
Index
PreIndex
PostIndex
RelCond
ResCond
DoubleCond
StatusCond
Special
WidthArg
void WTF::printInternal(WTF::PrintStream &, Arg::Kind)
Cold
Warm
void WTF::printInternal(WTF::PrintStream &, Arg::Temperature)
Early
Late
void WTF::printInternal(WTF::PrintStream &, Arg::Phase)
OnlyEarly
OnlyLate
EarlyAndLate
void WTF::printInternal(WTF::PrintStream &, Arg::Timing)
UseDef
ZDef
UseZDef
UseAddr
ColdUse
LateUse
LateColdUse
EarlyDef
EarlyZDef
Scratch
void WTF::printInternal(WTF::PrintStream &, Arg::Role)
Unsigned
void WTF::printInternal(WTF::PrintStream &, Arg::Signedness)
: ; frequency = 
  Predecessors: 
  Successors: 
./b3/air/AirCCallSpecial.cpp
virtual CCallHelpers::Jump JSC::B3::Air::CCallSpecial::generate(JSC::B3::Air::Inst &, JSC::CCallHelpers &, JSC::B3::Air::GenerationContext &)
function call that uses the C calling convention.
./b3/air/AirCCallingConvention.cpp
JSC::B3::Air::Tmp JSC::B3::Air::cCallResult(JSC::B3::Type)
Air 
initial
./b3/air/AirCode.cpp
std::optional<unsigned int> JSC::B3::Air::Code::entrypointIndex(JSC::B3::Air::BasicBlock *) const
Entrypoints: 
Specials:
Frame size: 
 (Allocated)
Call arg area size: 
Callee saves: 
./b3/air/AirArg.h
static bool JSC::B3::Air::Arg::isRepresentableAs(JSC::B3::Width, JSC::B3::Air::Arg::Signedness, int64_t)
void WTF::Liveness<JSC::B3::Air::StackSlotLivenessAdapter>::compute() [Adapter = JSC::B3::Air::StackSlotLivenessAdapter]
FATAL: Unlowered C call: 
FATAL: Unlowered shuffle: 
./b3/air/AirDisassembler.cpp
void JSC::B3::Air::Disassembler::addInst(JSC::B3::Air::Inst *, MacroAssembler::Label, MacroAssembler::Label)
void JSC::B3::Air::Disassembler::dump(JSC::B3::Air::Code &, WTF::PrintStream &, JSC::LinkBuffer &, const char *, const char *, const ScopedLambda<void (JSC::B3::Air::Inst &)> &)
# Late paths
eliminateDeadCode
./b3/air/AirEmitShuffle.cpp
Vector<JSC::B3::Air::Inst> JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &, Vector<JSC::B3::Air::ShufflePair>, std::array<Arg, 2>, JSC::B3::Bank, JSC::B3::Value *)
fixObviousSpills
./b3/air/AirFixSpillsAfterTerminals.cpp
void JSC::B3::Air::fixSpillsAfterTerminals(JSC::B3::Air::Code &)
Air::prepareForGeneration
Initial air:
Air after 
Register pressure after register allocation:
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/Assertions.h
void UNREACHABLE_FOR_PLATFORM()
auto JSC::B3::Air::Disassembler::dump(JSC::B3::Air::Code &, WTF::PrintStream &, JSC::LinkBuffer &, const char *, const char *, const ScopedLambda<void (JSC::B3::Air::Inst &)> &)::(anonymous class)::operator()(CCallHelpers::Label, CCallHelpers::Label) const
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)3123, T = JSC::AssemblerLabel]
./b3/air/AirEmitShuffle.h
JSC::B3::Air::Opcode JSC::B3::Air::moveFor(JSC::B3::Bank, JSC::B3::Width)
auto JSC::B3::Air::emitShuffle(JSC::B3::Air::Code &, Vector<JSC::B3::Air::ShufflePair>, std::array<Arg, 2>, JSC::B3::Bank, JSC::B3::Value *)::(anonymous class)::operator()(const JSC::B3::Air::ShufflePair &, unsigned int) const
./b3/air/AirFixObviousSpills.cpp
void JSC::B3::Air::(anonymous namespace)::FixObviousSpills::fixCode()
Air::generate
./b3/air/AirGenerate.cpp
void JSC::B3::Air::generateWithAlreadyAllocatedRegisters(JSC::B3::Air::Code &, JSC::CCallHelpers &)
Add32
Add8
Add16
Add64
AddDouble
AddFloat
Sub32
Sub64
SubDouble
SubFloat
Neg32
Neg64
NegateDouble
NegateFloat
Mul32
Mul64
MultiplyAdd32
MultiplyAdd64
MultiplyAddSignExtend32
MultiplyAddZeroExtend32
MultiplySub32
MultiplySub64
MultiplySubSignExtend32
MultiplySubZeroExtend32
MultiplyNeg32
MultiplyNeg64
MultiplyNegSignExtend32
MultiplyNegZeroExtend32
MultiplySignExtend32
MultiplyZeroExtend32
Div32
UDiv32
Div64
UDiv64
MulDouble
MulFloat
DivDouble
DivFloat
X86ConvertToDoubleWord32
X86ConvertToQuadWord64
X86Div32
X86UDiv32
X86Div64
X86UDiv64
Lea32
Lea64
And32
And64
AndDouble
AndFloat
OrDouble
OrFloat
XorDouble
XorFloat
Lshift32
Lshift64
Rshift32
Rshift64
Urshift32
Urshift64
RotateRight32
RotateRight64
RotateLeft32
RotateLeft64
Or32
Or64
Xor32
Xor64
Not32
Not64
AbsDouble
AbsFloat
CeilDouble
CeilFloat
FloorDouble
FloorFloat
SqrtDouble
SqrtFloat
ConvertInt32ToDouble
ConvertInt64ToDouble
ConvertInt32ToFloat
ConvertInt64ToFloat
CountLeadingZeros32
CountLeadingZeros64
ConvertDoubleToFloat
ConvertFloatToDouble
Move
Swap32
Swap64
MoveWithIncrement64
Move32
MoveWithIncrement32
Store32
Store64
SignExtend32ToPtr
ZeroExtend8To32
SignExtend8To32
ZeroExtend16To32
SignExtend16To32
MoveFloat
MoveDouble
MoveZeroToDouble
Move64ToDouble
Move32ToFloat
MoveDoubleTo64
MoveFloatTo32
Load8
LoadAcq8
StoreRel8
Load8SignedExtendTo32
LoadAcq8SignedExtendTo32
Load16
LoadAcq16
Load16SignedExtendTo32
LoadAcq16SignedExtendTo32
StoreRel16
LoadAcq32
StoreRel32
LoadAcq64
StoreRel64
Xchg8
Xchg16
Xchg32
Xchg64
ExtractUnsignedBitfield32
ExtractUnsignedBitfield64
InsertUnsignedBitfieldInZero32
InsertUnsignedBitfieldInZero64
InsertBitField32
InsertBitField64
ClearBitField32
ClearBitField64
ClearBitsWithMask32
ClearBitsWithMask64
OrNot32
OrNot64
XorNot32
XorNot64
XorNotLeftShift32
XorNotRightShift32
XorNotUnsignedRightShift32
XorNotLeftShift64
XorNotRightShift64
XorNotUnsignedRightShift64
ExtractInsertBitfieldAtLowEnd32
ExtractInsertBitfieldAtLowEnd64
InsertSignedBitfieldInZero32
InsertSignedBitfieldInZero64
ExtractSignedBitfield32
ExtractSignedBitfield64
ExtractRegister32
ExtractRegister64
AddLeftShift32
AddRightShift32
AddUnsignedRightShift32
AddLeftShift64
AddRightShift64
AddUnsignedRightShift64
SubLeftShift32
SubRightShift32
SubUnsignedRightShift32
SubLeftShift64
SubRightShift64
SubUnsignedRightShift64
AndLeftShift32
AndRightShift32
AndUnsignedRightShift32
AndLeftShift64
AndRightShift64
AndUnsignedRightShift64
XorLeftShift32
XorRightShift32
XorUnsignedRightShift32
XorLeftShift64
XorRightShift64
XorUnsignedRightShift64
OrLeftShift32
OrRightShift32
OrUnsignedRightShift32
OrLeftShift64
OrRightShift64
OrUnsignedRightShift64
FloatMax
FloatMin
DoubleMax
DoubleMin
AtomicStrongCAS8
AtomicStrongCAS16
AtomicStrongCAS32
AtomicStrongCAS64
BranchAtomicStrongCAS8
BranchAtomicStrongCAS16
BranchAtomicStrongCAS32
BranchAtomicStrongCAS64
AtomicAdd8
AtomicAdd16
AtomicAdd32
AtomicAdd64
AtomicSub8
AtomicSub16
AtomicSub32
AtomicSub64
AtomicAnd8
AtomicAnd16
AtomicAnd32
AtomicAnd64
AtomicOr8
AtomicOr16
AtomicOr32
AtomicOr64
AtomicXor8
AtomicXor16
AtomicXor32
AtomicXor64
AtomicNeg8
AtomicNeg16
AtomicNeg32
AtomicNeg64
AtomicNot8
AtomicNot16
AtomicNot32
AtomicNot64
AtomicXchgAdd8
AtomicXchgAdd16
AtomicXchgAdd32
AtomicXchgAdd64
AtomicXchg8
AtomicXchg16
AtomicXchg32
AtomicXchg64
LoadLink8
LoadLinkAcq8
StoreCond8
StoreCondRel8
LoadLink16
LoadLinkAcq16
StoreCond16
StoreCondRel16
LoadLink32
LoadLinkAcq32
StoreCond32
StoreCondRel32
LoadLink64
LoadLinkAcq64
StoreCond64
StoreCondRel64
Depend32
Depend64
AtomicXchgOr8
AtomicXchgOr16
AtomicXchgOr32
AtomicXchgOr64
AtomicXchgClear8
AtomicXchgClear16
AtomicXchgClear32
AtomicXchgClear64
AtomicXchgXor8
AtomicXchgXor16
AtomicXchgXor32
AtomicXchgXor64
Compare32
Compare64
Test32
Test64
CompareDouble
CompareFloat
Branch8
Branch32
Branch64
BranchTest8
BranchTest32
BranchTest64
BranchTestBit64
BranchTestBit32
BranchDouble
BranchFloat
BranchAdd32
BranchAdd64
BranchMul32
BranchMul64
BranchSub32
BranchSub64
BranchNeg32
BranchNeg64
MoveConditionally32
MoveConditionally64
MoveConditionallyTest32
MoveConditionallyTest64
MoveConditionallyDouble
MoveConditionallyFloat
MoveDoubleConditionally32
MoveDoubleConditionally64
MoveDoubleConditionallyTest32
MoveDoubleConditionallyTest64
MoveDoubleConditionallyDouble
MoveDoubleConditionallyFloat
MemoryFence
StoreFence
LoadFence
RetVoid
Ret32
Ret64
RetFloat
RetDouble
Shuffle
Patch
ColdCCall
/Library/Caches/com.apple.xbs/Binaries/JavaScriptCore_Sim/install/Symbols/BuiltProducts/DerivedSources/JavaScriptCore/AirOpcodeGenerated.h
void WTF::printInternal(WTF::PrintStream &, JSC::B3::Air::Opcode)
Bad call to forEachArgCustom, not custom opcode: 
void JSC::B3::Air::Inst::forEachArgCustom(ScopedLambda<JSC::B3::Air::Inst::EachArgCallback>)
CCallHelpers::Jump JSC::B3::Air::Inst::generate(JSC::CCallHelpers &, JSC::B3::Air::GenerationContext &)
Effects
lowerAfterRegAlloc
lowerEntrySwitch
./b3/air/AirLowerEntrySwitch.cpp
void JSC::B3::Air::lowerEntrySwitch(JSC::B3::Air::Code &)
       
void JSC::B3::Air::Code::setEntrypoints(Vector &&) [Vector = WTF::Vector<JSC::B3::GenericFrequentedBlock<JSC::B3::Air::BasicBlock>, 0, WTF::CrashOnOverflow, 16>]
Air::lowerMacros
lowerStackArgs
./b3/air/AirOptimizeBlockOrder.cpp
Vector<JSC::B3::Air::BasicBlock *> JSC::B3::Air::blocksInOptimizedOrder(JSC::B3::Air::Code &)
optimizeBlockOrder
./b3/air/AirLowerStackArgs.cpp
auto JSC::B3::Air::lowerStackArgs(JSC::B3::Air::Code &)::(anonymous class)::operator()(JSC::B3::Air::Arg &, Arg::Role, JSC::B3::Bank, JSC::B3::Width) const
reportUsedRegisters
simplifyCFG
./b3/air/AirSimplifyCFG.cpp
bool JSC::B3::Air::simplifyCFG(JSC::B3::Air::Code &)
./b3/air/AirStackAllocation.cpp
void JSC::B3::Air::assign(JSC::B3::Air::StackSlot *, const Vector<JSC::B3::Air::StackSlot *> &)
Vector<JSC::B3::Air::StackSlot *> JSC::B3::Air::allocateAndGetEscapedStackSlotsWithoutChangingFrameSize(JSC::B3::Air::Code &)
spill
stack
byteSize = 
, offsetFromFP = 
, kind = 
./b3/air/AirStackSlot.cpp
JSC::B3::Air::StackSlot::StackSlot(uint64_t, JSC::B3::Air::StackSlotKind, intptr_t)
Locked
Spill
./b3/air/AirStackSlotKind.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::B3::Air::StackSlotKind)
%tmp
%ftmp
<none>
./b3/air/AirValidate.cpp
void JSC::B3::Air::(anonymous namespace)::Validater::run()
!block->numPredecessors()
At entrypoint 
validSlots.contains(arg.stackSlot())
validSpecials.contains(arg.special())
inst.isValidForm()
inst.isTerminal()
!inst.isTerminal()
block->numSuccessors() == m_code.proc().numEntrypoints()
!inst.kind.effects
validBlocks.contains(successor)
AIR VALIDATION FAILURE
auto JSC::B3::Air::(anonymous namespace)::Validater::run()::(anonymous class)::operator()(JSC::B3::Air::Arg &, Arg::Role, JSC::B3::Bank, JSC::B3::Width) const
&arg >= &inst.args[0]
&arg <= &inst.args.last()
./builtins/BuiltinExecutables.cpp
static JSC::SourceCode JSC::BuiltinExecutables::defaultConstructorSourceCode(JSC::ConstructorKind)
static JSC::UnlinkedFunctionExecutable *JSC::BuiltinExecutables::createExecutable(JSC::VM &, const JSC::SourceCode &, const JSC::Identifier &, JSC::ConstructorKind, JSC::ConstructAbility, JSC::NeedsClassFieldInitializer, JSC::PrivateBrandRequirement)
use strict
Expected Metadata:
Metadata from parser:
positionBeforeLastNewlineFromParser.line 
positionBeforeLastNewlineFromParser.offset 
positionBeforeLastNewlineFromParser.lineStartOffset 
positionBeforeLastNewline.line 
positionBeforeLastNewline.offset 
positionBeforeLastNewline.lineStartOffset 
Metadata of parser and hand rolled parser don't match
[Symbol.match]
[Symbol.matchAll]
[Symbol.replace]
[Symbol.search]
get [Symbol.species]
[Symbol.split]
[Symbol.asyncIterator]
[Symbol.hasInstance]
[Symbol.iterator]
Symbol.hasInstance
Symbol.isConcatSpreadable
Symbol.asyncIterator
Symbol.iterator
Symbol.match
Symbol.matchAll
Symbol.replace
Symbol.search
Symbol.species
Symbol.split
Symbol.toPrimitive
Symbol.toStringTag
Symbol.unscopables
IntlLegacyConstructedSymbol
AsyncFromSyncIterator
InternalPromise
Promise
RegExpStringIterator
advanceStringIndex
allSettled
anchor
apply
arrayIteratorNextHelper
asyncFunctionResume
asyncGeneratorEnqueue
asyncGeneratorQueueDequeue
asyncGeneratorQueueEnqueue
asyncGeneratorQueueIsEmpty
asyncGeneratorReject
asyncGeneratorResolve
asyncGeneratorResumeNext
asyncGeneratorYield
asyncModuleEvaluation
awaitValue
bind
blink
bold
call
catch
compileStreaming
concat
concatSlowPath
copyWithin
createAsyncFromSyncIterator
createHTML
createResolvingFunctions
createResolvingFunctionsWithoutPromise
deleteProperty
dependencyKeysIfEvaluated
doAsyncGeneratorBodyCall
ensureRegistered
evaluate
every
filter
finally
find
findIndex
findLast
findLastIndex
fixed
flat
flatIntoArray
flatIntoArrayWithCallback
flatMap
fontcolor
fontsize
forEach
forceFulfillPromise
from
fromEntries
fulfillFetch
fulfillPromise
fulfillPromiseWithFirstResolvingFunctionCallCheck
fulfillWithoutPromise
generatorResume
getSubstitution
groupBy
groupByToMap
hasObservableSideEffectsForRegExpMatch
hasObservableSideEffectsForRegExpSplit
hasObservableSideEffectsForStringReplace
importValue
includes
instantiateStreaming
internalAll
isArray
isExecutionState
isFinite
isNaN
isSuspendYieldState
italics
link
linkAndEvaluateModule
loadAndEvaluateModule
loadModule
mapIteratorNext
match
matchAll
matchSlow
maxWithPositives
minWithMaybeNegativeZeroAndPositive
moduleEvaluation
newHandledRejectedPromise
newPromiseCapability
newPromiseCapabilitySlow
newRegistryEntry
padEnd
padStart
performIteration
performPromiseThen
promiseEmptyOnFulfilled
promiseEmptyOnRejected
promiseReactionJob
promiseReactionJobWithoutPromise
promiseRejectSlow
promiseResolve
promiseResolveSlow
promiseResolveThenableJob
promiseResolveThenableJobFast
promiseResolveThenableJobWithDerivedPromise
promiseResolveThenableJobWithoutPromiseFast
provideFetch
pushNewPromiseReaction
race
reduce
reduceRight
regExpExec
rejectPromise
rejectPromiseWithFirstResolvingFunctionCallCheck
rejectWithoutPromise
repeat
repeatCharactersSlowPath
repeatSlowPath
replace
replaceAll
requestFetch
requestImportModule
requestInstantiate
requestSatisfy
resolvePromise
resolvePromiseWithFirstResolvingFunctionCallCheck
resolveWithoutPromise
return
search
setIteratorNext
setStateToMax
small
some
sort
sortBucketSort
sortCommit
sortCompact
sortMerge
sortMergeSort
sortStringComparator
speciesConstructor
speciesGetter
split
strike
stringConcatSlowPath
subarray
symbolAsyncIteratorGetter
symbolHasInstance
symbolIteratorGetter
then
throw
toDateTimeOptionsAnyAll
toDateTimeOptionsDateDate
toDateTimeOptionsTimeTime
toIntegerOrInfinity
toLength
toLocaleDateString
toLocaleString
toLocaleTimeString
triggerPromiseReactions
typedArrayElementCompare
typedArrayMerge
typedArrayMergeSort
typedArraySpeciesConstructor
wrap
arrayPush
getByIdDirect
getByIdDirectPrivate
getPrototypeOf
getPromiseInternalField
getGeneratorInternalField
getAsyncGeneratorInternalField
getAbstractModuleRecordInternalField
getArrayIteratorInternalField
getStringIteratorInternalField
getMapIteratorInternalField
getSetIteratorInternalField
idWithProfile
isObject
isCallable
isConstructor
isJSArray
isProxyObject
isDerivedArray
isGenerator
isAsyncGenerator
isPromise
isRegExpObject
isMap
isSet
isShadowRealm
isStringIterator
isArrayIterator
isMapIterator
isSetIterator
isUndefinedOrNull
tailCallForwardArguments
throwTypeError
throwRangeError
throwOutOfMemoryError
tryGetById
tryGetByIdWithWellKnownSymbol
putByIdDirect
putByIdDirectPrivate
putByValDirect
putPromiseInternalField
putGeneratorInternalField
putAsyncGeneratorInternalField
putArrayIteratorInternalField
putStringIteratorInternalField
putMapIteratorInternalField
putSetIteratorInternalField
toNumber
toString
toPropertyKey
toObject
newArrayWithSize
newPromise
createPromise
createArgumentsButterfly
undefined
Infinity
iterationKindKey
iterationKindValue
iterationKindEntries
MAX_ARRAY_INDEX
MAX_STRING_LENGTH
MAX_SAFE_INTEGER
ModuleFetch
ModuleTranslate
ModuleInstantiate
ModuleSatisfy
ModuleLink
ModuleReady
promiseRejectionReject
promiseRejectionHandle
promiseStatePending
promiseStateFulfilled
promiseStateRejected
promiseStateMask
promiseFlagsIsHandled
promiseFlagsIsFirstResolvingFunctionCalled
promiseFieldFlags
promiseFieldReactionsOrResult
generatorFieldState
generatorFieldNext
generatorFieldThis
generatorFieldFrame
GeneratorResumeModeNormal
GeneratorResumeModeThrow
GeneratorResumeModeReturn
GeneratorStateCompleted
GeneratorStateExecuting
arrayIteratorFieldIndex
arrayIteratorFieldIteratedObject
arrayIteratorFieldKind
mapIteratorFieldMapBucket
mapIteratorFieldKind
setIteratorFieldSetBucket
setIteratorFieldKind
stringIteratorFieldIndex
stringIteratorFieldIteratedString
asyncGeneratorFieldSuspendReason
asyncGeneratorFieldQueueFirst
asyncGeneratorFieldQueueLast
AsyncGeneratorStateCompleted
AsyncGeneratorStateExecuting
AsyncGeneratorStateAwaitingReturn
AsyncGeneratorStateSuspendedStart
AsyncGeneratorStateSuspendedYield
AsyncGeneratorSuspendReasonYield
AsyncGeneratorSuspendReasonAwait
AsyncGeneratorSuspendReasonNone
abstractModuleRecordFieldState
sentinelMapBucket
sentinelSetBucket
applyFunction
arraySpeciesCreate
assert
callFunction
charCodeAt
executor
isView
iteratedObject
iteratedString
promise
promiseOrCapability
Number
Array
ArrayBuffer
ShadowRealm
RegExp
create
defaultPromiseThen
throwTypeErrorFunction
typedArrayLength
typedArrayContentType
typedArraySort
typedArrayGetOriginalConstructor
typedArraySubarrayCreate
BuiltinLog
BuiltinDescribe
homeObject
enqueueJob
hostPromiseRejectionTracker
onFulfilled
onRejected
push
repeatCharacter
starDefault
starNamespace
keys
values
shift
Int8Array
Int16Array
Int32Array
Uint8Array
Uint8ClampedArray
Uint16Array
Uint32Array
Float32Array
Float64Array
BigInt64Array
BigUint64Array
exec
generator
generatorNext
generatorState
generatorFrame
generatorValue
generatorThis
generatorResumeMode
syncIterator
nextMethod
asyncGeneratorQueueItemNext
dateTimeFormat
this
importInRealm
evalInRealm
moveFunctionToRealm
thisTimeValue
newTargetLocal
derivedConstructor
isTypedArrayView
isSharedTypedArrayView
isDetached
typedArrayDefaultComparator
isBoundFunction
hasInstanceBoundFunction
instanceOf
isArraySlow
sameValue
concatMemcpy
appendMemcpy
regExpCreate
isRegExp
replaceUsingRegExp
replaceUsingStringSearch
replaceAllUsingStringSearch
makeTypeError
AggregateError
mapBucketHead
mapBucketNext
mapBucketKey
mapBucketValue
setBucketHead
setBucketNext
setBucketKey
setPrototypeDirect
setPrototypeDirectOrThrow
regExpBuiltinExec
regExpMatchFast
regExpProtoFlagsGetter
regExpProtoGlobalGetter
regExpProtoIgnoreCaseGetter
regExpProtoMultilineGetter
regExpProtoSourceGetter
regExpProtoStickyGetter
regExpProtoUnicodeGetter
regExpPrototypeSymbolMatch
regExpPrototypeSymbolReplace
regExpSearchFast
regExpSplitFast
regExpTestFast
regExpStringIteratorRegExp
regExpStringIteratorString
regExpStringIteratorGlobal
regExpStringIteratorUnicode
regExpStringIteratorDone
stringIncludesInternal
stringIndexOfInternal
stringSplitFast
stringSubstringInternal
makeBoundFunction
hasOwnLengthProperty
importModule
copyDataProperties
meta
webAssemblyCompileStreamingInternal
webAssemblyInstantiateStreamingInternal
instanceFieldInitializer
privateBrand
privateClassBrand
hasOwnPropertyFunction
createPrivateSymbol
entries
outOfLineReactionCounts
emptyPropertyNameEnumerator
sentinelString
PolyProto
hasInstance
isConcatSpreadable
asyncIterator
species
toPrimitive
toStringTag
unscopables
(function () { })
(function (...args) { super(...args); })
./bytecode/AccessCase.cpp
JSC::AccessCase::AccessCase(JSC::VM &, JSC::JSCell *, JSC::AccessCase::AccessType, JSC::CacheableIdentifier, JSC::PropertyOffset, JSC::Structure *, const JSC::ObjectPropertyConditionSet &, RefPtr<JSC::PolyProtoAccessChain> &&)
static RefPtr<JSC::AccessCase> JSC::AccessCase::createTransition(JSC::VM &, JSC::JSCell *, JSC::CacheableIdentifier, JSC::PropertyOffset, JSC::Structure *, JSC::Structure *, const JSC::ObjectPropertyConditionSet &, RefPtr<JSC::PolyProtoAccessChain> &&, const JSC::StructureStubInfo &)
static Ref<JSC::AccessCase> JSC::AccessCase::createDelete(JSC::VM &, JSC::JSCell *, JSC::CacheableIdentifier, JSC::PropertyOffset, JSC::Structure *, JSC::Structure *)
static Ref<JSC::AccessCase> JSC::AccessCase::createSetPrivateBrand(JSC::VM &, JSC::JSCell *, JSC::CacheableIdentifier, JSC::Structure *, JSC::Structure *)
static RefPtr<JSC::AccessCase> JSC::AccessCase::fromStructureStubInfo(JSC::VM &, JSC::JSCell *, JSC::CacheableIdentifier, JSC::StructureStubInfo &)
Vector<JSC::WatchpointSet *, 2> JSC::AccessCase::commit(JSC::VM &)
bool JSC::AccessCase::requiresIdentifierNameMatch() const
bool JSC::AccessCase::requiresInt32PropertyCheck() const
bool JSC::AccessCase::needsScratchFPR() const
bool JSC::AccessCase::canReplace(const JSC::AccessCase &) const
ident = '
prototype access chain = 
from structure = 
to structure = 
structure = 
conditions = 
void JSC::AccessCase::generateWithGuard(JSC::AccessGenerationState &, CCallHelpers::JumpList &)
void JSC::AccessCase::generate(JSC::AccessGenerationState &)
void JSC::AccessCase::generateImpl(JSC::AccessGenerationState &)
This condition is no longer met: 
static JSC::TypedArrayType JSC::AccessCase::toTypedArrayType(JSC::AccessCase::AccessType)
./bytecode/AdaptiveInferredPropertyValueWatchpointBase.cpp
JSC::AdaptiveInferredPropertyValueWatchpointBase::AdaptiveInferredPropertyValueWatchpointBase(const JSC::ObjectPropertyCondition &)
void JSC::AdaptiveInferredPropertyValueWatchpointBase::initialize(const JSC::ObjectPropertyCondition &)
void JSC::AdaptiveInferredPropertyValueWatchpointBase::install(JSC::VM &)
<empty>
NonArray
NonArrayWithInt32
NonArrayWithDouble
NonArrayWithContiguous
NonArrayWithArrayStorage
NonArrayWithSlowPutArrayStorage
ArrayClass
ArrayWithUndecided
ArrayWithInt32
ArrayWithDouble
ArrayWithContiguous
ArrayWithArrayStorage
ArrayWithSlowPutArrayStorage
CopyOnWriteArrayWithInt32
CopyOnWriteArrayWithDouble
CopyOnWriteArrayWithContiguous
Int8ArrayMode
Int16ArrayMode
Int32ArrayMode
Uint8ArrayMode
Uint8ClampedArrayMode
Uint16ArrayMode
Uint32ArrayMode
Float32ArrayMode
Float64ArrayMode
BigInt64ArrayMode
BigUint64ArrayMode
Predecessors: [
Successors: [
Identifiers:
  id
Constants:
: in source as double
: in source as integer
: in source as link-time-constant
   k%u = %s%s
Exception Handlers:
 %d: { start: [%4d] end: [%4d] target: [%4d] } %s
Switch Jump Tables:
  %1d = {
%4d => %04d
      }
String Switch Jump Tables:
"%s" => %04d
[%4u] %-18s 
wasm size: 
 bytes
bytecode: %lu instructions (%lu 16-bit instructions, %lu 32-bit instructions); %lu bytes; %d parameter(s); %d local(s); %d callee register(s)
   const
./bytecode/BytecodeDumper.cpp
WTF::CString JSC::Wasm::BytecodeDumper::formatConstant(JSC::Wasm::Type, uint64_t) const
auto JSC::AccessCase::generateWithGuard(JSC::AccessGenerationState &, CCallHelpers::JumpList &)::(anonymous class)::operator()()::(anonymous class)::operator()(JSC::Structure *, bool) const
./bytecode/PropertyCondition.h
bool JSC::PropertyCondition::operator==(const JSC::PropertyCondition &) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
catch
finally
synthesized catch
synthesized finally
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/CodeBlock.h
JSC::HandlerInfo &JSC::CodeBlock::exceptionHandler(int)
./bytecode/CallLinkInfo.h
static bool JSC::CallLinkInfo::isDirect(JSC::CallLinkInfo::CallType)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecompiler/Label.h
int JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::target() [Traits = JSC::JSGeneratorTraits]
int JSC::GenericBoundLabel<JSC::Wasm::GeneratorTraits>::target() [Traits = JSC::Wasm::GeneratorTraits]
: %lu instructions (%lu 16-bit instructions, %lu 32-bit instructions, %lu instructions with metadata); %lu bytes (%lu metadata bytes); %d parameter(s); %d callee register(s); %d variable(s)
; scope at 
Funcref
Externref
RefNull
Func
Void
/Library/Caches/com.apple.xbs/Binaries/JavaScriptCore_Sim/install/Symbols/BuiltProducts/DerivedSources/JavaScriptCore/WasmOps.h
const char *JSC::Wasm::makeString(JSC::Wasm::TypeKind)
Bytecodes before generatorification
Bytecodes after generatorification
Dumping bytecode liveness for 
Bytecode basic block %u: %p (offset: %u, length: %u)
Predecessors:
Successors:
Entry block %p
Exit block: %p
Live variables:
./bytecode/BytecodeLivenessAnalysis.cpp
Bitmap<maxNumCheckpointTmps> JSC::tmpLivenessForCheckpoint(const JSC::CodeBlock &, JSC::BytecodeIndex)
./bytecode/BytecodeUseDef.cpp
void JSC::computeUsesForBytecodeIndexImpl(JSC::VirtualRegister, const JSC::Instruction *, JSC::Checkpoint, const ScopedLambda<void (JSC::VirtualRegister)> &)
void JSC::computeDefsForBytecodeIndexImpl(unsigned int, const JSC::Instruction *, JSC::Checkpoint, const ScopedLambda<void (JSC::VirtualRegister)> &)
./bytecode/CallLinkInfo.cpp
void JSC::CallLinkInfo::unlink(JSC::VM &)
CodeLocationLabel<JSInternalPtrTag> JSC::CallLinkInfo::doneLocation()
void JSC::CallLinkInfo::setMonomorphicCallee(JSC::VM &, JSC::JSCell *, JSC::JSObject *, MacroAssemblerCodePtr<JSEntryPtrTag>)
void JSC::CallLinkInfo::clearCallee()
JSC::JSObject *JSC::CallLinkInfo::callee()
void JSC::CallLinkInfo::setCodeBlock(JSC::VM &, JSC::JSCell *, JSC::FunctionCodeBlock *)
void JSC::CallLinkInfo::setLastSeenCallee(JSC::VM &, const JSC::JSCell *, JSC::JSObject *)
void JSC::CallLinkInfo::clearLastSeenCallee()
JSC::JSObject *JSC::CallLinkInfo::lastSeenCallee() const
void JSC::CallLinkInfo::setExecutableDuringCompilation(JSC::ExecutableBase *)
JSC::ExecutableBase *JSC::CallLinkInfo::executable()
void JSC::CallLinkInfo::setMaxArgumentCountIncludingThis(unsigned int)
: clearing call stub to 
, stub routine 
Clearing call to 
 because the executable is dead.
static MacroAssembler::JumpList JSC::CallLinkInfo::emitFastPathImpl(JSC::CallLinkInfo *, JSC::CCallHelpers &, JSC::GPRReg, JSC::GPRReg, JSC::CallLinkInfo::UseDataIC, bool, ScopedLambda<void ()> &&)
CCallHelpers::JumpList JSC::OptimizingCallLinkInfo::emitFastPath(JSC::CCallHelpers &, JSC::GPRReg, JSC::GPRReg, JSC::CallLinkInfo::UseDataIC)
MacroAssembler::JumpList JSC::OptimizingCallLinkInfo::emitTailCallFastPath(JSC::CCallHelpers &, JSC::GPRReg, ScopedLambda<void ()> &&)
CodeLocationLabel<JSInternalPtrTag> JSC::OptimizingCallLinkInfo::slowPathStart()
void JSC::OptimizingCallLinkInfo::emitDirectFastPath(JSC::CCallHelpers &)
void JSC::OptimizingCallLinkInfo::emitDirectTailCallFastPath(JSC::CCallHelpers &, ScopedLambda<void ()> &&)
void JSC::OptimizingCallLinkInfo::initializeDirectCall()
initialize direct call
void JSC::OptimizingCallLinkInfo::setDirectCallTarget(CodeLocationLabel<JSEntryPtrTag>)
Setting direct call target
./bytecode/CallLinkInfo.h
static bool JSC::CallLinkInfo::isDirect(JSC::CallLinkInfo::CallType)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h
JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::RegisterID JSC::MacroAssemblerARM64::getCachedDataTempRegisterIDAndInvalidate()
static JSC::CallMode JSC::CallLinkInfo::callModeFor(JSC::CallLinkInfo::CallType)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecompiler/Label.h
int JSC::GenericBoundLabel<JSC::JSGeneratorTraits>::target() [Traits = JSC::JSGeneratorTraits]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/SymbolTable.h
void JSC::SymbolTable::set(const JSC::ConcurrentJSLocker &, WTF::UniquedStringImpl *, Entry &&) [Entry = JSC::SymbolTableEntry]
void JSC::SymbolTableEntry::pack(JSC::VarOffset, bool, bool, bool)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/AbstractMacroAssembler.h
static void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::repatchNearCall(CodeLocationNearCall<callTag>, CodeLocationLabel<destTag>) [AssemblerType = JSC::ARM64Assembler, callTag = (WTF::PtrTag)26432, destTag = (WTF::PtrTag)357]
static void JSC::ARM64Assembler::replaceWithJump(void *, void *)
static void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::repatchNearCall(CodeLocationNearCall<callTag>, CodeLocationLabel<destTag>) [AssemblerType = JSC::ARM64Assembler, callTag = (WTF::PtrTag)26432, destTag = (WTF::PtrTag)26432]
./bytecode/CallLinkStatus.cpp
static JSC::CallLinkStatus JSC::CallLinkStatus::computeFromCallLinkInfo(const JSC::ConcurrentJSLocker &, JSC::CallLinkInfo &)
Not Set
Statically Proved
Could Take Slow Path
Based On Stub
maxArgumentCountIncludingThis = 
InternalFunction: 
(Function: 
; Executable: 
(Executable: 
Non-executable callee: 
./bytecode/CheckPrivateBrandStatus.cpp
JSC::CheckPrivateBrandStatus::CheckPrivateBrandStatus(JSC::StubInfoSummary, JSC::StructureStubInfo &)
void JSC::CheckPrivateBrandStatus::merge(const JSC::CheckPrivateBrandStatus &)
./bytecode/CodeBlock.cpp
bool JSC::CodeBlock::shouldVisitStrongly(const JSC::ConcurrentJSLocker &, Visitor &) [Visitor = JSC::AbstractSlotVisitor]
bool JSC::CodeBlock::shouldVisitStrongly(const JSC::ConcurrentJSLocker &, Visitor &) [Visitor = JSC::SlotVisitor]
CodeBlock
JSC::CodeBlockHash JSC::CodeBlock::hash() const
function 
<no-hash>
 (ShouldAlwaysBeInlined)
 (NeverInline)
 (NeverOptimize)
 (NeverFTLOptimize)
 (DidTryToEnterInLoop)
 (StrictMode)
 (JITFail)
 (FTLFail)
 (HadFTLReplacement)
bool JSC::CodeBlock::finishCreation(JSC::VM &, JSC::ScriptExecutable *, JSC::UnlinkedCodeBlock *, JSC::JSScope *)
bool JSC::CodeBlock::isConstantOwnedByUnlinkedCodeBlock(JSC::VirtualRegister) const
void JSC::CodeBlock::setAlternative(JSC::VM &, JSC::CodeBlock *)
JSC::CodeBlock *JSC::CodeBlock::baselineAlternative()
JSC::CodeBlock *JSC::CodeBlock::baselineVersion()
JSC::HandlerInfo *JSC::CodeBlock::handlerForBytecodeIndex(JSC::BytecodeIndex, JSC::RequiredHandler)
JSC::DisposableCallSiteIndex JSC::CodeBlock::newExceptionHandlingCallSiteIndex(JSC::CallSiteIndex)
void JSC::CodeBlock::ensureCatchLivenessIsComputedForBytecodeIndexSlow(const JSC::OpCatch &, JSC::BytecodeIndex)
void JSC::CodeBlock::removeExceptionHandlerForCallSite(JSC::DisposableCallSiteIndex)
unsigned int JSC::CodeBlock::lineNumberForBytecodeIndex(JSC::BytecodeIndex)
JSC::CodeBlock *JSC::CodeBlock::replacement()
DFG::CapabilityLevel JSC::CodeBlock::computeCapabilityLevel()
jettison
void JSC::CodeBlock::jettison(Profiler::JettisonReason, JSC::ReoptimizationMode, const JSC::FireDetail *)
Jettisoning 
 and counting reoptimization
 due to 
 will be jettisoned because of the following dead references:
    Transition under 
    Weak reference 
    Did invalidate 
    Did count reoptimization for 
    Did install baseline version of 
void JSC::CodeBlock::noticeIncomingCall(JSC::CallFrame *)
Noticing call link from 
 to 
    Clearing SABI because caller is native.
    Clearing SABI because caller is too large.
    Clearing SABI because caller is in LLInt.
    Clearing SABI bcause caller was already optimized.
    Clearing SABI because caller is not a function.
    Clearing SABI because recursion was detected.
In call from 
: caller's DFG capability level is not set.
    Clearing SABI because the caller is not a DFG candidate.
: bytecode cost is 
, scaling execution counter by 
: Optimizing next invocation.
: Not optimizing anytime soon.
: Optimizing after warm-up.
: Optimizing after long warm-up.
: Optimizing soon.
: Forcing slow path concurrently.
: expected to have baseline code but have 
void JSC::CodeBlock::setOptimizationThresholdBasedOnCompilationResult(JSC::CompilationResult)
: we have result = 
 but 
we are our own replacement.
our replacement is 
Unrecognized result: 
Considering optimizing 
Profile hotness: %lf (%u / %u), %lf (%u / %u)
void JSC::CodeBlock::tallyFrequentExitSites()
unsigned int JSC::CodeBlock::frameRegisterCount()
arguments[
    Wrong number of bits in result!
    Result: 
    Bit count: 
    Variable 
 is expected to be dead.
    entrypoint not allowed inside a try block.
Validation failure in 
Validation failure.
void JSC::CodeBlock::endValidationDidFail()
void JSC::CodeBlock::insertBasicBlockBoundariesForControlFlowProfiler()
std::optional<BytecodeIndex> JSC::CodeBlock::bytecodeIndexFromCallSiteIndex(JSC::CallSiteIndex)
<null codeBlock>
Firing watchpoint 
 on 
./bytecode/CallVariant.h
JSC::JSCell *JSC::CallVariant::nonExecutableCallee() const
./bytecode/StubInfoSummary.h
bool JSC::isInlineable(JSC::StubInfoSummary)
JSC::StubInfoSummary JSC::slowVersion(JSC::StubInfoSummary)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
Linking put_to_scope in 
./bytecode/CodeBlock.h
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/jit/JITCode.h
static bool JSC::JITCode::isLowerTier(JSC::JITType, JSC::JITType)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/dfg/DFGCapabilities.h
JSC::DFG::CapabilityLevel JSC::DFG::functionCapabilityLevel(bool, bool, JSC::DFG::CapabilityLevel)
unsigned int JSC::CodeBlock::bytecodeOffset(const JSC::Instruction *)
iterator open
Clearing 
 LLInt property access.
iterator next
get by id
Clearing try_get_by_id LLInt property access.
Clearing get_by_id_direct LLInt property access.
Clearing LLInt private property access.
Clearing LLInt put transition.
Clearing LLInt put_private_name transition.
Clearing LLInt set_private_brand transition.
Clearing LLInt check_private_brand transition.
Clearing LLInt to_this with structure %p.
op_create_this
Clearing LLInt 
 with cached callee 
op_create_promise
op_create_generator
op_create_async_generator
Clearing dead symbolTable 
Clearing scope access with structure 
Clearing LLInt property access.
Clearing LLInt iterator open property access.
Clearing LLInt iterator next property access.
due to 
, counting = 
, detail = 
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = JSC::RecursionCheckFunctor]
./bytecode/BytecodeOperandsForCheckpoint.h
JSC::ValueProfile *JSC::valueProfileForImpl(BytecodeMetadata &, unsigned int) [BytecodeMetadata = JSC::OpIteratorOpen::Metadata]
JSC::ValueProfile *JSC::valueProfileForImpl(BytecodeMetadata &, unsigned int) [BytecodeMetadata = JSC::OpIteratorNext::Metadata]
./bytecode/CodeOrigin.cpp
Vector<JSC::CodeOrigin> JSC::CodeOrigin::inlineStack() const
<none>
 --> 
(closure) 
Global
Eval
Function
Module
./bytecode/ComplexGetStatus.cpp
static JSC::ComplexGetStatus JSC::ComplexGetStatus::computeFor(JSC::Structure *, const JSC::ObjectPropertyConditionSet &, WTF::UniquedStringImpl *)
./bytecode/DFGExitProfile.cpp
static bool JSC::DFG::ExitProfile::add(JSC::CodeBlock *, const JSC::DFG::FrequentExitSite &)
frequentExit
: Adding exit site: 
./bytecode/DeferredCompilationCallback.cpp
virtual void JSC::DeferredCompilationCallback::compilationDidComplete(JSC::CodeBlock *, JSC::CodeBlock *, JSC::CompilationResult)
Inlined 
Compiled 
 at 
./bytecode/DeleteByStatus.cpp
JSC::DeleteByStatus::DeleteByStatus(JSC::StubInfoSummary, JSC::StructureStubInfo &)
void JSC::DeleteByStatus::merge(const JSC::DeleteByStatus &)
None
Int32
Int52
StrictInt52
Double
Cell
Boolean
Storage
BigInt32
JSInt32
JSDouble
JSCell
JSBoolean
JSBigInt32
Dead
./bytecode/DataFormat.h
const char *JSC::dataFormatToString(JSC::DataFormat)
id='
', result=
 -> 
, offset = 
EvalCodeBlock
ExecutableToCodeBlockEdge
%lf/%lf, %d
thresholdCheck
Unset
BadType
BadConstantValue
BadIdent
BadExecutable
BadCache
BadConstantCache
BadIndexingType
BadTypeInfoFlags
Overflow
NegativeZero
NegativeIndex
Int52Overflow
StoreToHole
LoadFromHole
OutOfBounds
InadequateCoverage
ArgumentsEscaped
ExoticObjectMode
VarargsOverflow
TDZFailure
HoistingFailed
Uncountable
UncountableInvalidation
WatchdogTimerFired
DebuggerEvent
ExceptionCheck
GenericUnwind
BigInt32Overflow
./bytecode/ExitKind.cpp
const char *JSC::exitKindToString(JSC::ExitKind)
FromAnyInlineKind
FromNotInlined
FromInlined
./bytecode/ExitingInlineKind.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::ExitingInlineKind)
activeThreshold = 
, modifiedThreshold = 
, actualCount = 
, desiredCount = 
FromAnything
FromDFG
FromFTL
./bytecode/ExitingJITType.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::ExitingJITType)
<none>
FunctionCodeBlock
./bytecode/GetByStatus.cpp
JSC::GetByStatus::GetByStatus(JSC::StubInfoSummary, JSC::StructureStubInfo *)
static JSC::GetByStatus JSC::GetByStatus::computeForStubInfoWithoutExitSiteFeedback(const JSC::ConcurrentJSLocker &, JSC::CodeBlock *, JSC::StructureStubInfo *, CallLinkStatus::ExitSiteData)
bool JSC::GetByStatus::makesCalls() const
void JSC::GetByStatus::merge(const JSC::GetByStatus &)
NoInformation
Simple
Custom
ModuleNamespace
LikelyTakesSlowPath
ObservedTakesSlowPath
MakesCalls
ObservedSlowPathAndMakesCalls
, seenInJIT = 
id='
empty>
, offset = 
, call = 
, intrinsic = 
, customaccessorgetter = 
, domclass = 
, domjit = 
customSlotBase = 
callLinkInfo = 
customAccessor = 
./bytecode/InByStatus.cpp
static JSC::InByStatus JSC::InByStatus::computeForStubInfoWithoutExitSiteFeedback(const JSC::ConcurrentJSLocker &, JSC::VM &, JSC::StructureStubInfo *)
void JSC::InByStatus::merge(const JSC::InByStatus &)
NoInformation
Simple
TakesSlowPath
<id='
empty>
, offset = 
string length size: 
array length size: 
out of line offset cache size: 
inline offset cache size: 
replace cache size: 
replace out of line cache size: 
property access
property replace
array length
string length
in access
InlineAccess: linking constant jump
InlineAccess: linking stub call
, closure call
, known callee: 
, numArgs+this = 
, numFixup = 
, stackOffset = 
 maps to 
Call
Construct
TailCall
CallVarargs
ConstructVarargs
TailCallVarargs
GetterCall
SetterCall
prototype = 
./bytecode/InByStatus.h
JSC::InByStatus::InByStatus(JSC::StubInfoSummary)
./bytecode/InstanceOfStatus.h
JSC::InstanceOfStatus::InstanceOfStatus(JSC::StubInfoSummary)
InlineAccessType: '%s'
./bytecode/LLIntPrototypeLoadAdaptiveStructureWatchpoint.cpp
void JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint::install(JSC::VM &)
void JSC::LLIntPrototypeLoadAdaptiveStructureWatchpoint::fireInternal(JSC::VM &, const JSC::FireDetail &)
./bytecode/MethodOfGettingAValueProfile.cpp
void JSC::MethodOfGettingAValueProfile::emitReportValue(JSC::CCallHelpers &, JSC::JSValueRegs, JSC::GPRReg, JSC::TagRegistersMode) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
ModuleProgramCodeBlock
<invalid>
./bytecode/ObjectPropertyConditionSet.cpp
JSC::ObjectPropertyCondition JSC::ObjectPropertyConditionSet::slotBaseCondition() const
JSC::ObjectPropertyConditionSet JSC::generateConditionsForInstanceOf(JSC::VM &, JSC::JSCell *, JSC::JSGlobalObject *, JSC::Structure *, JSC::JSObject *, bool)
op_call_varargs
op_iterator_next
op_tail_call_varargs
op_iterator_open
op_construct_varargs
op_put_by_val
op_rshift
op_lshift
op_put_by_val_direct
op_new_object
op_create_async_generator
op_get_by_val
op_get_argument
op_create_this
op_to_this
op_call
op_tail_call_forward_arguments
op_construct
op_put_by_id
op_new_array_with_size
op_new_array
op_to_object
op_get_private_name
op_set_private_brand
op_to_number
op_put_private_name
op_check_private_brand
op_get_by_id
op_get_by_id_with_this
op_get_by_val_with_this
op_get_by_id_direct
op_profile_type
op_profile_control_flow
op_get_prototype_of
op_enumerator_next
op_enumerator_get_by_val
op_enumerator_in_by_val
op_enumerator_has_own_property
op_try_get_by_id
op_bitor
op_catch
op_to_numeric
op_get_internal_field
op_bitxor
op_create_promise
op_tail_call
op_call_eval
op_new_array_buffer
op_resolve_scope
op_get_from_scope
op_put_to_scope
op_get_from_arguments
op_in_by_val
op_create_generator
op_bitand
op_bitnot
op_jneq_ptr
op_is_cell_with_type
op_in_by_id
op_has_private_name
op_has_private_brand
op_put_by_id_with_this
op_del_by_id
op_put_by_val_with_this
op_del_by_val
op_put_getter_by_id
op_put_setter_by_id
op_put_getter_setter_by_id
op_put_getter_by_val
op_put_setter_by_val
op_define_data_property
op_define_accessor_property
op_jmp
op_jtrue
op_jfalse
op_jeq_null
op_jneq_null
op_jundefined_or_null
op_jnundefined_or_null
op_jeq_ptr
op_jeq
op_jstricteq
op_jneq
op_jnstricteq
op_jless
op_jlesseq
op_jgreater
op_jgreatereq
op_jnless
op_jnlesseq
op_jngreater
op_jngreatereq
op_jbelow
op_jbeloweq
op_loop_hint
op_switch_imm
op_switch_char
op_switch_string
op_new_func
op_new_func_exp
op_new_generator_func
op_new_generator_func_exp
op_new_async_func
op_new_async_func_exp
op_new_async_generator_func
op_new_async_generator_func_exp
op_set_function_name
op_ret
op_strcat
op_to_primitive
op_to_property_key
op_put_to_arguments
op_push_with_scope
op_create_lexical_environment
op_create_generator_frame_environment
op_get_parent_scope
op_throw
op_throw_static_error
op_debug
op_end
op_get_property_enumerator
op_unreachable
op_create_rest
op_get_rest_length
op_yield
op_check_traps
op_log_shadow_chicken_prologue
op_log_shadow_chicken_tail
op_resolve_scope_for_hoisting_func_decl_in_eval
op_put_internal_field
op_nop
op_super_sampler_begin
op_wide16
op_super_sampler_end
op_wide32
op_enter
op_get_scope
op_create_direct_arguments
op_create_scoped_arguments
op_create_cloned_arguments
op_create_arguments_butterfly
op_new_promise
op_new_generator
op_argument_count
op_check_tdz
op_new_array_with_spread
op_spread
op_new_regexp
op_mov
op_eq
op_neq
op_stricteq
op_nstricteq
op_less
op_lesseq
op_greater
op_greatereq
op_below
op_beloweq
op_mod
op_pow
op_urshift
op_add
op_mul
op_div
op_sub
op_eq_null
op_neq_null
op_to_string
op_unsigned
op_is_empty
op_typeof_is_undefined
op_typeof_is_object
op_typeof_is_function
op_is_undefined_or_null
op_is_boolean
op_is_number
op_is_big_int
op_is_object
op_is_callable
op_is_constructor
op_inc
op_dec
op_negate
op_not
op_identity_with_profile
op_overrides_has_instance
op_instanceof
op_instanceof_custom
op_typeof
wasm_trampoline_wasm_call_ref_no_tls
llint_eval_prologue
llint_module_program_prologue
llint_function_for_call_prologue
llint_function_for_construct_prologue
llint_function_for_call_arity_check
llint_function_for_construct_arity_check
llint_generic_return_point
llint_throw_from_slow_path_trampoline
llint_throw_during_call_trampoline
llint_native_call_trampoline
llint_native_construct_trampoline
llint_internal_function_call_trampoline
llint_internal_function_construct_trampoline
llint_link_call_trampoline
llint_virtual_call_trampoline
llint_virtual_construct_trampoline
llint_virtual_tail_call_trampoline
checkpoint_osr_exit_from_inlined_call_trampoline
checkpoint_osr_exit_trampoline
normal_osr_exit_trampoline
fuzzer_return_early_from_loop_hint
llint_get_host_call_return_value
llint_handle_uncaught_exception
op_call_return_location
op_construct_return_location
op_call_varargs_return_location
op_construct_varargs_return_location
op_call_varargs_slow_return_location
op_construct_varargs_slow_return_location
op_get_by_id_return_location
op_get_by_val_return_location
op_put_by_id_return_location
op_put_by_val_return_location
op_iterator_open_return_location
op_iterator_next_return_location
wasm_function_prologue
wasm_function_prologue_no_tls
op_call_slow_return_location
op_construct_slow_return_location
op_iterator_open_slow_return_location
op_iterator_next_slow_return_location
op_tail_call_slow_return_location
op_tail_call_forward_arguments_slow_return_location
op_tail_call_varargs_slow_return_location
op_call_eval_slow_return_location
js_trampoline_op_call
js_trampoline_op_construct
js_trampoline_op_call_varargs
js_trampoline_op_construct_varargs
js_trampoline_op_iterator_next
js_trampoline_op_iterator_open
js_trampoline_op_call_slow
js_trampoline_op_tail_call_slow
js_trampoline_op_construct_slow
js_trampoline_op_call_varargs_slow
js_trampoline_op_tail_call_varargs_slow
js_trampoline_op_tail_call_forward_arguments_slow
js_trampoline_op_construct_varargs_slow
js_trampoline_op_call_eval_slow
js_trampoline_op_iterator_next_slow
js_trampoline_op_iterator_open_slow
js_trampoline_llint_function_for_call_arity_check_untag
js_trampoline_llint_function_for_call_arity_check_tag
js_trampoline_llint_function_for_construct_arity_check_untag
js_trampoline_llint_function_for_construct_arity_check_tag
wasm_trampoline_wasm_call
wasm_trampoline_wasm_call_no_tls
wasm_trampoline_wasm_call_indirect
wasm_trampoline_wasm_call_indirect_no_tls
wasm_trampoline_wasm_call_ref
llint_program_prologue
wasm_catch_all_no_tls
wasm_i32_sub
wasm_i32_mul
wasm_i32_div_s
wasm_i32_div_u
wasm_i32_rem_s
wasm_i32_rem_u
wasm_i32_and
wasm_i32_or
wasm_i32_xor
wasm_i32_shl
wasm_i32_shr_u
wasm_i32_shr_s
wasm_i32_rotr
wasm_i32_rotl
wasm_i32_eq
wasm_i32_ne
wasm_i32_lt_s
wasm_i32_le_s
wasm_i32_lt_u
wasm_i32_le_u
wasm_i32_gt_s
wasm_i32_ge_s
wasm_i32_gt_u
wasm_i32_ge_u
wasm_i32_clz
wasm_i32_ctz
wasm_i32_popcnt
wasm_i32_eqz
wasm_i64_add
wasm_i64_sub
wasm_i64_mul
wasm_i64_div_s
wasm_i64_div_u
wasm_i64_rem_s
wasm_i64_rem_u
wasm_i64_and
wasm_i64_or
wasm_i64_xor
wasm_i64_shl
wasm_i64_shr_u
wasm_i64_shr_s
wasm_i64_rotr
wasm_i64_rotl
wasm_i64_eq
wasm_i64_ne
wasm_i64_lt_s
wasm_i64_le_s
wasm_i64_lt_u
wasm_i64_le_u
wasm_i64_gt_s
wasm_i64_ge_s
wasm_i64_gt_u
wasm_i64_ge_u
wasm_i64_clz
wasm_i64_ctz
wasm_i64_popcnt
wasm_i64_eqz
wasm_f32_add
wasm_f32_sub
wasm_f32_mul
wasm_f32_div
wasm_f32_min
wasm_f32_max
wasm_f32_abs
wasm_f32_neg
wasm_f32_copysign
wasm_f32_ceil
wasm_f32_floor
wasm_f32_trunc
wasm_f32_nearest
wasm_f32_sqrt
wasm_f32_eq
wasm_f32_ne
wasm_f32_lt
wasm_f32_le
wasm_f32_gt
wasm_f32_ge
wasm_f64_add
wasm_f64_sub
wasm_f64_mul
wasm_f64_div
wasm_f64_min
wasm_f64_max
wasm_f64_abs
wasm_f64_neg
wasm_f64_copysign
wasm_f64_ceil
wasm_f64_floor
wasm_f64_trunc
wasm_f64_nearest
wasm_f64_sqrt
wasm_f64_eq
wasm_f64_ne
wasm_f64_lt
wasm_f64_le
wasm_f64_gt
wasm_f64_ge
wasm_i32_trunc_s_f32
wasm_i32_trunc_s_f64
wasm_i32_trunc_u_f32
wasm_i32_trunc_u_f64
wasm_i32_wrap_i64
wasm_i64_trunc_s_f32
wasm_i64_trunc_s_f64
wasm_i64_trunc_u_f32
wasm_i64_trunc_u_f64
wasm_i64_extend_s_i32
wasm_i64_extend_u_i32
wasm_f32_convert_s_i32
wasm_f32_convert_u_i32
wasm_f32_convert_s_i64
wasm_f32_convert_u_i64
wasm_f32_demote_f64
wasm_f32_reinterpret_i32
wasm_f64_convert_s_i32
wasm_f64_convert_u_i32
wasm_f64_convert_s_i64
wasm_f64_convert_u_i64
wasm_f64_promote_f32
wasm_f64_reinterpret_i64
wasm_i32_reinterpret_f32
wasm_i64_reinterpret_f64
wasm_i32_extend8_s
wasm_i32_extend16_s
wasm_i64_extend8_s
wasm_i64_extend16_s
wasm_i64_extend32_s
wasm_i32_trunc_sat_f32_s
wasm_i32_trunc_sat_f32_u
wasm_i32_trunc_sat_f64_s
wasm_i32_trunc_sat_f64_u
wasm_i64_trunc_sat_f32_s
wasm_i64_trunc_sat_f32_u
wasm_i64_trunc_sat_f64_s
wasm_i64_trunc_sat_f64_u
wasm_throw_from_slow_path_trampoline
wasm_throw_from_fault_handler_trampoline_fastTLS
wasm_throw_from_fault_handler_trampoline_reg_instance
wasm_call_return_location
wasm_call_no_tls_return_location
wasm_call_indirect_return_location
wasm_call_indirect_no_tls_return_location
wasm_call_ref_return_location
wasm_call_ref_no_tls_return_location
wasm_wide16
wasm_wide32
wasm_enter
wasm_nop
wasm_loop_hint
wasm_mov
wasm_jtrue
wasm_jfalse
wasm_jmp
wasm_ret
wasm_switch
wasm_unreachable
wasm_ret_void
wasm_drop_keep
wasm_ref_is_null
wasm_ref_func
wasm_get_global
wasm_set_global
wasm_set_global_ref
wasm_get_global_portable_binding
wasm_set_global_portable_binding
wasm_set_global_ref_portable_binding
wasm_table_get
wasm_table_set
wasm_table_init
wasm_elem_drop
wasm_table_size
wasm_table_grow
wasm_table_fill
wasm_table_copy
wasm_call
wasm_call_no_tls
wasm_call_indirect
wasm_call_indirect_no_tls
wasm_call_ref
wasm_call_ref_no_tls
wasm_current_memory
wasm_grow_memory
wasm_memory_fill
wasm_memory_copy
wasm_memory_init
wasm_data_drop
wasm_select
wasm_load8_u
wasm_load16_u
wasm_load32_u
wasm_load64_u
wasm_i32_load8_s
wasm_i64_load8_s
wasm_i32_load16_s
wasm_i64_load16_s
wasm_i64_load32_s
wasm_store8
wasm_store16
wasm_store32
wasm_store64
wasm_i64_atomic_rmw_add
wasm_i64_atomic_rmw8_add_u
wasm_i64_atomic_rmw16_add_u
wasm_i64_atomic_rmw32_add_u
wasm_i64_atomic_rmw_sub
wasm_i64_atomic_rmw8_sub_u
wasm_i64_atomic_rmw16_sub_u
wasm_i64_atomic_rmw32_sub_u
wasm_i64_atomic_rmw_and
wasm_i64_atomic_rmw8_and_u
wasm_i64_atomic_rmw16_and_u
wasm_i64_atomic_rmw32_and_u
wasm_i64_atomic_rmw_or
wasm_i64_atomic_rmw8_or_u
wasm_i64_atomic_rmw16_or_u
wasm_i64_atomic_rmw32_or_u
wasm_i64_atomic_rmw_xor
wasm_i64_atomic_rmw8_xor_u
wasm_i64_atomic_rmw16_xor_u
wasm_i64_atomic_rmw32_xor_u
wasm_i64_atomic_rmw_xchg
wasm_i64_atomic_rmw8_xchg_u
wasm_i64_atomic_rmw16_xchg_u
wasm_i64_atomic_rmw32_xchg_u
wasm_i64_atomic_rmw_cmpxchg
wasm_i64_atomic_rmw8_cmpxchg_u
wasm_i64_atomic_rmw16_cmpxchg_u
wasm_i64_atomic_rmw32_cmpxchg_u
wasm_memory_atomic_wait32
wasm_memory_atomic_wait64
wasm_memory_atomic_notify
wasm_atomic_fence
wasm_throw
wasm_rethrow
wasm_catch
wasm_catch_no_tls
wasm_catch_all
wasm_i32_add
./bytecode/PolyProtoAccessChain.cpp
static RefPtr<JSC::PolyProtoAccessChain> JSC::PolyProtoAccessChain::tryCreate(JSC::JSGlobalObject *, JSC::JSCell *, JSC::JSObject *)
PolyPolyProtoAccessChain: [
./bytecode/PolymorphicAccess.cpp
const JSC::RegisterSet &JSC::AccessGenerationState::calculateLiveRegistersForCallAndExceptionHandling()
JSC::DisposableCallSiteIndex JSC::AccessGenerationState::callSiteIndexForExceptionHandling()
const JSC::HandlerInfo &JSC::AccessGenerationState::originalExceptionHandler()
Access stub for 
 with return point 
Load
Transition
Delete
DeleteNonConfigurable
DeleteMiss
Replace
Miss
GetGetter
Getter
Setter
CustomValueGetter
CustomAccessorGetter
CustomValueSetter
CustomAccessorSetter
IntrinsicGetter
InHit
InMiss
CheckPrivateBrand
SetPrivateBrand
ArrayLength
StringLength
DirectArgumentsLength
ScopedArgumentsLength
ModuleNamespaceLoad
InstanceOfHit
InstanceOfMiss
InstanceOfGeneric
IndexedInt32Load
IndexedDoubleLoad
IndexedContiguousLoad
IndexedArrayStorageLoad
IndexedScopedArgumentsLoad
IndexedDirectArgumentsLoad
IndexedTypedArrayInt8Load
IndexedTypedArrayUint8Load
IndexedTypedArrayUint8ClampedLoad
IndexedTypedArrayInt16Load
IndexedTypedArrayUint16Load
IndexedTypedArrayInt32Load
IndexedTypedArrayUint32Load
IndexedTypedArrayFloat32Load
IndexedTypedArrayFloat64Load
IndexedStringLoad
IndexedInt32Store
IndexedDoubleStore
IndexedContiguousStore
IndexedArrayStorageStore
IndexedTypedArrayInt8Store
IndexedTypedArrayUint8Store
IndexedTypedArrayUint8ClampedStore
IndexedTypedArrayInt16Store
IndexedTypedArrayUint16Store
IndexedTypedArrayInt32Store
IndexedTypedArrayUint32Store
IndexedTypedArrayFloat32Store
IndexedTypedArrayFloat64Store
void WTF::printInternal(WTF::PrintStream &, AccessCase::AccessType)
Primordial
Committed
Generated
void WTF::printInternal(WTF::PrintStream &, AccessCase::State)
JSC::ObjectPropertyCondition JSC::(anonymous namespace)::generateCondition(JSC::VM &, JSC::JSCell *, JSC::JSObject *, WTF::UniquedStringImpl *, PropertyCondition::Kind, JSC::Concurrency)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
./bytecode/PolymorphicAccess.h
Detected poly proto optimization opportunity.
JSC::AccessGenerationResult::AccessGenerationResult(JSC::AccessGenerationResult::Kind, MacroAssemblerCodePtr<JITStubRoutinePtrTag>)
auto JSC::generateConditionsForInstanceOf(JSC::VM &, JSC::JSCell *, JSC::JSGlobalObject *, JSC::Structure *, JSC::JSObject *, bool)::(anonymous class)::operator()(Vector<JSC::ObjectPropertyCondition> &, JSC::JSObject *) const
CodePtr
ProgramCodeBlock
 of 
 at 
 with attributes 
 with prototype 
./bytecode/PropertyCondition.cpp
void JSC::PropertyCondition::dumpInContext(WTF::PrintStream &, JSC::DumpContext *) const
bool JSC::PropertyCondition::isStillValidAssumingImpurePropertyWatchpoint(JSC::Concurrency, JSC::Structure *, JSC::JSObject *) const
bool JSC::PropertyCondition::validityRequiresImpurePropertyWatchpoint(JSC::Structure *) const
bool JSC::PropertyCondition::isWatchableWhenValid(JSC::Structure *, JSC::PropertyCondition::WatchabilityEffort) const
Presence
Absence
Equivalence
HasStaticProperty
HasPrototype
viaProxy = 
additionalSet = 
IsDirect
Strict
./bytecode/PutByStatus.cpp
static JSC::PutByStatus JSC::PutByStatus::computeFromLLInt(JSC::CodeBlock *, JSC::BytecodeIndex)
JSC::PutByStatus::PutByStatus(JSC::StubInfoSummary, JSC::StructureStubInfo &)
static JSC::PutByStatus JSC::PutByStatus::computeForStubInfo(const JSC::ConcurrentJSLocker &, JSC::CodeBlock *, JSC::StructureStubInfo *, CallLinkStatus::ExitSiteData)
bool JSC::PutByStatus::makesCalls() const
void JSC::PutByStatus::merge(const JSC::PutByStatus &)
(NoInformation)
LikelyTakesSlowPath
ObservedTakesSlowPath
MakesCalls
ObservedSlowPathAndMakesCalls
void JSC::PutByStatus::dump(WTF::PrintStream &) const
./bytecode/PutByVariant.cpp
JSC::Structure *JSC::PutByVariant::oldStructureForTransition() const
void JSC::PutByVariant::fixTransitionToReplaceIfNecessary()
bool JSC::PutByVariant::attemptToMerge(const JSC::PutByVariant &)
Replace: 
Transition: 
], offset = 
Setter: 
void JSC::PutByVariant::dumpInContext(WTF::PrintStream &, JSC::DumpContext *) const
./bytecode/CodeBlock.h
Linking call in 
, entrypoint at 
Unlinking CallLinkInfo: 
./bytecode/Repatch.cpp
void JSC::linkPolymorphicCall(JSC::JSGlobalObject *, JSC::CallFrame *, JSC::CallLinkInfo &, JSC::CallVariant)
Polymorphic call stub for %s, return point %p, targets %s
WebAssembly
./bytecode/SetPrivateBrandStatus.cpp
JSC::SetPrivateBrandStatus::SetPrivateBrandStatus(JSC::StubInfoSummary, JSC::StructureStubInfo &)
void JSC::SetPrivateBrandStatus::merge(const JSC::SetPrivateBrandStatus &)
OtherCell
OtherObj
Final
Float32array
Function
DirectArguments
ScopedArguments
StringObject
RegExpObject
DateObject
PromiseObject
MapObject
SetObject
WeakMapObject
WeakSetObject
ProxyObject
DerivedArray
DataView
String
StringIdent
StringVar
Symbol
HeapBigInt
BoolInt32
NonBoolInt32
BytecodeDouble
AnyIntAsDouble
NonIntAsDouble
DoublePureNaN
DoubleImpureNaN
Bool
Other
Empty
Int52Any
Int32AsInt52
NonInt32AsInt52
BytecodeTop
HeapTop
FullTop
./bytecode/SpeculatedType.cpp
JSC::SpeculatedType JSC::speculationFromTypedArrayType(JSC::TypedArrayType)
SpecNone
SpecFinalObject
SpecArray
SpecFunction
SpecInt8Array
SpecInt16Array
SpecInt32Array
SpecUint8Array
SpecUint8ClampedArray
SpecUint16Array
SpecUint32Array
SpecFloat32Array
SpecFloat64Array
SpecBigInt64Array
SpecBigUint64Array
SpecTypedArrayView
SpecDirectArguments
SpecScopedArguments
SpecStringObject
SpecRegExpObject
SpecDateObject
SpecPromiseObject
SpecMapObject
SpecSetObject
SpecWeakMapObject
SpecWeakSetObject
SpecProxyObject
SpecDerivedArray
SpecDataViewObject
SpecObjectOther
SpecObject
SpecStringIdent
SpecStringVar
SpecString
SpecSymbol
SpecBigInt
SpecCellOther
SpecCell
SpecBoolInt32
SpecNonBoolInt32
SpecInt32Only
SpecInt32AsInt52
SpecNonInt32AsInt52
SpecInt52Any
SpecIntAnyFormat
SpecAnyIntAsDouble
SpecNonIntAsDouble
SpecDoubleReal
SpecDoublePureNaN
SpecDoubleImpureNaN
SpecDoubleNaN
SpecBytecodeDouble
SpecFullDouble
SpecBytecodeRealNumber
SpecFullRealNumber
SpecBytecodeNumber
SpecFullNumber
SpecBoolean
SpecOther
SpecMisc
SpecHeapTop
SpecPrimitive
SpecEmpty
SpecBytecodeTop
SpecFullTop
SpecCellCheck
JSC::SpeculatedType JSC::speculationFromString(const char *)
./bytecode/StructureStubInfo.cpp
void JSC::StructureStubInfo::deref()
void JSC::StructureStubInfo::aboutToDie()
Clearing structure cache (kind 
) in 
void JSC::StructureStubInfo::initializeFromUnlinkedStructureStubInfo(JSC::CodeBlock *, JSC::UnlinkedStructureStubInfo &)
static JSC::CallMode JSC::CallLinkInfo::callModeFor(JSC::CallLinkInfo::CallType)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/ftl/FTLThunks.h
typename MapType::KeyType JSC::FTL::keyForThunk(MapType &, MacroAssemblerCodePtr<JITThunkPtrTag>) [MapType = JSC::FTL::ThunkMap<JSC::FTL::SlowPathCallKey>]
JSC::InlineCacheAction JSC::tryCacheGetBy(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSValue, JSC::CacheableIdentifier, const JSC::PropertySlot &, JSC::StructureStubInfo &, JSC::GetByKind)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
FunctionPtr<CFunctionPtrTag> JSC::appropriateGetByFunction(JSC::GetByKind)
JSC::InlineCacheAction JSC::tryCacheArrayGetByVal(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSValue, JSC::JSValue, JSC::StructureStubInfo &)
JSC::InlineCacheAction JSC::tryCachePutBy(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSValue, JSC::Structure *, JSC::CacheableIdentifier, const JSC::PutPropertySlot &, JSC::StructureStubInfo &, JSC::PutByKind, JSC::PutKind)
FunctionPtr<CFunctionPtrTag> JSC::appropriateOptimizingPutByFunction(const JSC::PutPropertySlot &, JSC::PutByKind, JSC::PutKind)
FunctionPtr<CFunctionPtrTag> JSC::appropriateGenericPutByFunction(const JSC::PutPropertySlot &, JSC::PutByKind, JSC::PutKind)
JSC::InlineCacheAction JSC::tryCacheArrayPutByVal(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSValue, JSC::JSValue, JSC::StructureStubInfo &, JSC::PutKind)
JSC::InlineCacheAction JSC::tryCacheDeleteBy(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::DeletePropertySlot &, JSC::JSValue, JSC::Structure *, JSC::CacheableIdentifier, JSC::StructureStubInfo &, JSC::DelByKind, JSC::ECMAMode)
JSC::InlineCacheAction JSC::tryCacheInBy(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSObject *, JSC::CacheableIdentifier, bool, const JSC::PropertySlot &, JSC::StructureStubInfo &, JSC::InByKind)
FunctionPtr<CFunctionPtrTag> JSC::appropriateGenericInByFunction(JSC::InByKind)
JSC::InlineCacheAction JSC::tryCacheHasPrivateBrand(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSObject *, JSC::CacheableIdentifier, bool, JSC::StructureStubInfo &)
JSC::InlineCacheAction JSC::tryCacheCheckPrivateBrand(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSObject *, JSC::CacheableIdentifier, JSC::StructureStubInfo &)
JSC::InlineCacheAction JSC::tryCacheSetPrivateBrand(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSObject *, JSC::Structure *, JSC::CacheableIdentifier, JSC::StructureStubInfo &)
JSC::InlineCacheAction JSC::tryCacheInstanceOf(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSValue, JSC::JSValue, JSC::StructureStubInfo &, bool)
Linking virtual call at 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/jit/CallFrameShuffler.h
void JSC::CallFrameShuffler::ensureRegister(const CheckFunctor &) [CheckFunctor = (lambda at /Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/jit/CallFrameShuffler.h:610:13)]
FunctionPtr<CFunctionPtrTag> JSC::appropriateOptimizingGetByFunction(JSC::GetByKind)
<Final>
<Array>
<StringIdent>
<String>
<Function>
<Int8array>
<Int16array>
<Int32array>
<Uint8array>
<Uint16array>
<Uint32array>
<Float32array>
<Float64array>
<BigInt64array>
<BigUint64array>
<DirectArguments>
<ScopedArguments>
<StringObject>
<RegExpObject>
<StringOrStringObject>
<Object>
<Cell>
<BoolInt32>
<Int32>
<AnyIntAsDouble>
<NonInt32AsInt52>
<Int32AsInt52>
<Int52Any>
<Double>
<Number>
<Boolean>
<Other>
<Misc>
auto JSC::StructureStubInfo::addAccessCase(const JSC::GCSafeConcurrentJSLocker &, JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::ECMAMode, JSC::CacheableIdentifier, RefPtr<JSC::AccessCase>)::(anonymous class)::operator()() const
./bytecode/StructureStubClearingWatchpoint.h
JSC::AdaptiveValueStructureStubClearingWatchpoint::AdaptiveValueStructureStubClearingWatchpoint(const JSC::ObjectPropertyCondition &, JSC::WatchpointsOnStructureStubInfo &)
void JSC::StructureStubInfo::visitAggregateImpl(Visitor &) [Visitor = JSC::AbstractSlotVisitor]
void JSC::StructureStubInfo::visitAggregateImpl(Visitor &) [Visitor = JSC::SlotVisitor]
JSC Super Sampler
Percent time behind super sampler flag: 
./bytecode/ToThisStatus.cpp
JSC::ToThisStatus JSC::merge(JSC::ToThisStatus, JSC::ToThisStatus)
Found untracked reference: 
All tracked references: 
./bytecode/TrackedReferences.cpp
void JSC::TrackedReferences::check(JSC::JSCell *) const
UnlinkedCodeBlock
./bytecode/UnlinkedCodeBlock.cpp
JSC::BytecodeLivenessAnalysis &JSC::UnlinkedCodeBlock::livenessAnalysisSlow(JSC::CodeBlock *)
void JSC::UnlinkedCodeBlock::allocateSharedProfiles(unsigned int, unsigned int)
./bytecode/UnlinkedCodeBlockGenerator.cpp
void JSC::UnlinkedCodeBlockGenerator::addOutOfLineJumpTarget(InstructionStream::Offset, int)
UnlinkedEvalCodeBlock
UnlinkedFunctionCodeBlock
WARNING: Super sampler undercount detected!
UnlinkedFunctionExecutable
UnlinkedModuleProgramCodeBlock
UnlinkedProgramCodeBlock
./bytecode/ValueRecovery.cpp
JSC::JSValue JSC::ValueRecovery::recover(JSC::CallFrame *) const
int32(
int52(
strictInt52(
bool(
cell(
double(
*int32(
*int52(
*strictInt52(
*double(
*cell(
*bool(
DirectArguments(
ClonedArguments(
void JSC::ValueRecovery::dumpInContext(WTF::PrintStream &, JSC::DumpContext *) const
Write to 
<invalid>
codeBlock
callee
argumentCountIncludingThis
callerFrame
returnPC
const
this
./bytecode/Watchpoint.cpp
void JSC::Watchpoint::fire(JSC::VM &, const JSC::FireDetail &)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
Failed to compile #
Compiled #
 into bytecode 
 instructions in 
<null property name>
./bytecompiler/BytecodeGenerator.cpp
JSC::ParserError JSC::BytecodeGenerator::generate(unsigned int &)
JSC::BytecodeGenerator::BytecodeGenerator(JSC::VM &, JSC::ProgramNode *, JSC::UnlinkedProgramCodeBlock *, OptionSet<JSC::CodeGenerationMode>, const RefPtr<JSC::TDZEnvironmentLink> &, const JSC::PrivateNameEnvironment *)
Cannot call a constructor without |new|
JSC::BytecodeGenerator::BytecodeGenerator(JSC::VM &, JSC::FunctionNode *, JSC::UnlinkedFunctionCodeBlock *, OptionSet<JSC::CodeGenerationMode>, const RefPtr<JSC::TDZEnvironmentLink> &, const JSC::PrivateNameEnvironment *)
JSC::BytecodeGenerator::BytecodeGenerator(JSC::VM &, JSC::ModuleProgramNode *, JSC::UnlinkedModuleProgramCodeBlock *, OptionSet<JSC::CodeGenerationMode>, const RefPtr<JSC::TDZEnvironmentLink> &, const JSC::PrivateNameEnvironment *)
void JSC::BytecodeGenerator::initializeArrowFunctionContextScopeIfNeeded(JSC::SymbolTable *, bool)
void JSC::BytecodeGenerator::initializeParameters(JSC::FunctionParameters &)
void JSC::BytecodeGenerator::initializeVarLexicalEnvironment(int, JSC::SymbolTable *, bool)
void JSC::BytecodeGenerator::recordHasOwnPropertyInForInLoop(JSC::ForInContext &, unsigned int, JSC::Label &)
void JSC::BytecodeGenerator::emitProfileControlFlow(int)
void JSC::BytecodeGenerator::initializeBlockScopedFunctions(JSC::VariableEnvironment &, JSC::BytecodeGenerator::FunctionStack &, JSC::RegisterID *)
void JSC::BytecodeGenerator::hoistSloppyModeFunctionIfNecessary(const JSC::Identifier &)
void JSC::BytecodeGenerator::popLexicalScopeInternal(JSC::VariableEnvironment &)
void JSC::BytecodeGenerator::prepareLexicalScopeForNextForLoopIteration(JSC::VariableEnvironmentNode *, JSC::RegisterID *)
Trying to add variable called 
 as 
 but it was already added as 
void JSC::BytecodeGenerator::createVariable(const JSC::Identifier &, JSC::VarKind, JSC::SymbolTable *, JSC::BytecodeGenerator::ExistingVariableMode)
JSC::RegisterID *JSC::BytecodeGenerator::emitResolveScope(JSC::RegisterID *, const JSC::Variable &)
JSC::RegisterID *JSC::BytecodeGenerator::emitGetFromScope(JSC::RegisterID *, JSC::RegisterID *, const JSC::Variable &, JSC::ResolveMode)
JSC::RegisterID *JSC::BytecodeGenerator::emitPutToScope(JSC::RegisterID *, const JSC::Variable &, JSC::RegisterID *, JSC::ResolveMode, JSC::InitializationMode)
JSC::RegisterID *JSC::BytecodeGenerator::initializeVariable(const JSC::Variable &, JSC::RegisterID *)
Cannot access static private method or accessor of a non-Object
Cannot access static private method or accessor
void JSC::BytecodeGenerator::emitTDZCheckIfNecessary(const JSC::Variable &, JSC::RegisterID *, JSC::RegisterID *)
JSC::PrivateNameEntry JSC::BytecodeGenerator::getPrivateTraits(const JSC::Identifier &)
JSC::RegisterID *JSC::BytecodeGenerator::emitNewArrayWithSpread(JSC::RegisterID *, JSC::ElementNode *)
Cannot return a non-object type in the constructor of a derived class.
JSC::RegisterID *JSC::BytecodeGenerator::emitConstruct(JSC::RegisterID *, JSC::RegisterID *, JSC::RegisterID *, JSC::ExpectedFunction, JSC::CallArguments &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, const JSC::JSTextPosition &)
void JSC::BytecodeGenerator::emitPopWithScope()
void JSC::BytecodeGenerator::beginSwitch(JSC::RegisterID *, SwitchInfo::SwitchType)
void JSC::BytecodeGenerator::endSwitch(uint32_t, const Vector<Ref<JSC::Label>, 8> &, JSC::ExpressionNode **, JSC::Label &, int32_t, int32_t)
Iterator result interface is not an object.
Delegated generator does not have a 'throw' method.
void JSC::ForInContext::finalize(JSC::BytecodeGenerator &, JSC::UnlinkedCodeBlockGenerator *, unsigned int)
Cannot declare a static field named 'prototype'
Trying to access an undefined private getter
Trying to access an undefined private setter
'super()' can't be called more than once in a constructor.
./bytecompiler/NodesCodegen.cpp
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_getPromiseInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_getGeneratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_getAsyncGeneratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_getAbstractModuleRecordInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_getArrayIteratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_getStringIteratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_getMapIteratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_getSetIteratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_putPromiseInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_putGeneratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_putAsyncGeneratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_putArrayIteratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_putStringIteratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_putMapIteratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_putSetIteratorInternalField(JSC::BytecodeGenerator &, JSC::RegisterID *)
JSC::RegisterID *JSC::BytecodeIntrinsicNode::emit_intrinsic_tryGetByIdWithWellKnownSymbol(JSC::BytecodeGenerator &, JSC::RegisterID *)
virtual JSC::RegisterID *JSC::HasOwnPropertyFunctionCallDotNode::emitBytecode(JSC::BytecodeGenerator &, JSC::RegisterID *)
Postfix ++ operator applied to value that is not a reference.
Postfix -- operator applied to value that is not a reference.
Cannot delete a super property
Prefix ++ operator applied to value that is not a reference.
Prefix -- operator applied to value that is not a reference.
virtual JSC::RegisterID *JSC::BinaryOpNode::emitBytecode(JSC::BytecodeGenerator &, JSC::RegisterID *)
Right hand side of instanceof is not an object
Left side of assignment is not a reference.
virtual void JSC::EmptyStatementNode::emitBytecode(JSC::BytecodeGenerator &, JSC::RegisterID *)
void JSC::ForInNode::emitLoopHeader(JSC::BytecodeGenerator &, JSC::RegisterID *)
Left side of for-in statement is not a reference.
Left side of for-of statement is not a reference.
The superclass is not a constructor.
virtual JSC::RegisterID *JSC::ClassExprNode::emitBytecode(JSC::BytecodeGenerator &, JSC::RegisterID *)
Right side of assignment cannot be destructured
virtual void JSC::RestParameterNode::bindValue(JSC::BytecodeGenerator &, JSC::RegisterID *) const
virtual JSC::RegisterID *JSC::SpreadExpressionNode::emitBytecode(JSC::BytecodeGenerator &, JSC::RegisterID *)
ProfileTypeBytecodeClosureVar
ProfileTypeBytecodeLocallyResolved
ProfileTypeBytecodeDoesNotHaveGlobalID
ProfileTypeBytecodeFunctionArgument
ProfileTypeBytecodeFunctionReturnStatement
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSImmutableButterfly.h
static JSC::JSImmutableButterfly *JSC::JSImmutableButterfly::create(JSC::VM &, JSC::IndexingType, unsigned int)
JSPromise::Field JSC::promiseInternalFieldIndex(JSC::BytecodeIntrinsicNode *)
JSGenerator::Field JSC::generatorInternalFieldIndex(JSC::BytecodeIntrinsicNode *)
JSAsyncGenerator::Field JSC::asyncGeneratorInternalFieldIndex(JSC::BytecodeIntrinsicNode *)
AbstractModuleRecord::Field JSC::abstractModuleRecordInternalFieldIndex(JSC::BytecodeIntrinsicNode *)
JSArrayIterator::Field JSC::arrayIteratorInternalFieldIndex(JSC::BytecodeIntrinsicNode *)
JSStringIterator::Field JSC::stringIteratorInternalFieldIndex(JSC::BytecodeIntrinsicNode *)
JSMapIterator::Field JSC::mapIteratorInternalFieldIndex(JSC::BytecodeIntrinsicNode *)
JSSetIterator::Field JSC::setIteratorInternalFieldIndex(JSC::BytecodeIntrinsicNode *)
JSC::RegisterID *JSC::emitReadModifyAssignment(JSC::BytecodeGenerator &, JSC::RegisterID *, JSC::RegisterID *, JSC::ExpressionNode *, JSC::Operator, JSC::OperandTypes, JSC::ReadModifyResolveNode *, JSC::Variable *)
void JSC::emitShortCircuitAssignment(JSC::BytecodeGenerator &, JSC::RegisterID *, JSC::Operator, JSC::Label &)
void JSC::SymbolTable::set(const JSC::ConcurrentJSLocker &, WTF::UniquedStringImpl *, Entry &&) [Entry = JSC::SymbolTableEntry &]
void JSC::SymbolTable::add(const JSC::ConcurrentJSLocker &, WTF::UniquedStringImpl *, Entry &&) [Entry = JSC::SymbolTableEntry]
./bytecompiler/BytecodeGeneratorBaseInlines.h
JSC::RegisterID *JSC::BytecodeGeneratorBase<JSC::JSGeneratorTraits>::newRegister() [Traits = JSC::JSGeneratorTraits]
void JSC::SymbolTable::add(const JSC::ConcurrentJSLocker &, WTF::UniquedStringImpl *, Entry &&) [Entry = JSC::SymbolTableEntry &]
JSC::RegisterID *JSC::BytecodeGenerator::emitCall(JSC::RegisterID *, JSC::RegisterID *, JSC::ExpectedFunction, JSC::CallArguments &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, JSC::DebuggableCall) [CallOp = JSC::OpCall]
JSC::RegisterID *JSC::BytecodeGenerator::emitCall(JSC::RegisterID *, JSC::RegisterID *, JSC::ExpectedFunction, JSC::CallArguments &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, JSC::DebuggableCall) [CallOp = JSC::OpTailCall]
JSC::RegisterID *JSC::BytecodeGenerator::emitCall(JSC::RegisterID *, JSC::RegisterID *, JSC::ExpectedFunction, JSC::CallArguments &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, const JSC::JSTextPosition &, JSC::DebuggableCall) [CallOp = JSC::OpCallEval]
./debugger/Debugger.cpp
bool JSC::Debugger::resolveBreakpoint(JSC::Breakpoint &, JSC::SourceProvider *)
./debugger/DebuggerCallFrame.cpp
static Ref<JSC::DebuggerCallFrame> JSC::DebuggerCallFrame::create(JSC::VM &, JSC::CallFrame *)
DebuggerScope
./debugger/DebuggerScope.cpp
JSC::JSValue JSC::DebuggerScope::caughtValue(JSC::JSGlobalObject *) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/ExceptionScope.h
void JSC::ExceptionScope::releaseAssertNoException()
InvalidAbstractHeap
World
Stack
Heap
Butterfly_publicLength
Butterfly_vectorLength
GetterSetter_getter
GetterSetter_setter
JSCell_cellState
JSCell_indexingType
JSCell_structureID
JSCell_typeInfoFlags
JSObject_butterfly
JSPropertyNameEnumerator_cachedPropertyNames
RegExpObject_lastIndex
NamedProperties
IndexedInt32Properties
IndexedDoubleProperties
IndexedContiguousProperties
IndexedArrayStorageProperties
DirectArgumentsProperties
ScopeProperties
TypedArrayProperties
HeapObjectCount
RegExpState
MathDotRandomState
JSDateFields
JSMapFields
JSSetFields
JSWeakMapFields
JSWeakSetFields
JSInternalFields
InternalState
CatchLocals
Absolute
DOMState
Watchpoint_fire
MiscFields
SideState
./dfg/DFGAbstractHeap.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::AbstractHeapKind)
./dfg/DFGAbstractValue.cpp
void JSC::DFG::AbstractValue::set(JSC::DFG::Graph &, JSC::DFG::RegisteredStructure)
void JSC::DFG::AbstractValue::fixTypeForRepresentation(JSC::DFG::Graph &, JSC::DFG::NodeFlags, JSC::DFG::Node *)
m_value.isNumber()
Abstract value 
 for double node has type outside SpecFullDouble.
 for int52 node has type outside SpecInt52Any.
m_value.isAnyInt()
 for value node has type outside SpecBytecodeTop.
Firing watchpoint 
) on 
./dfg/DFGAdaptiveStructureWatchpoint.cpp
void JSC::DFG::AdaptiveStructureWatchpoint::initialize(const JSC::ObjectPropertyCondition &, JSC::CodeBlock *)
void JSC::DFG::AdaptiveStructureWatchpoint::install(JSC::VM &)
./dfg/DFGArgumentsUtilities.cpp
JSC::DFG::Node *JSC::DFG::emitCodeToGetArgumentsArrayLength(JSC::DFG::InsertionSet &, JSC::DFG::Node *, unsigned int, JSC::DFG::NodeOrigin, bool)
arguments->op() == CreateDirectArguments || arguments->op() == CreateScopedArguments || arguments->op() == CreateClonedArguments || arguments->op() == CreateRest || arguments->op() == NewArrayBuffer || arguments->op() == PhantomDirectArguments || arguments->op() == PhantomClonedArguments || arguments->op() == PhantomCreateRest || arguments->op() == PhantomNewArrayBuffer || arguments->op() == PhantomNewArrayWithSpread || arguments->op() == PhantomSpread
child->op() == PhantomSpread
child->child1()->op() == PhantomCreateRest || child->child1()->op() == PhantomNewArrayBuffer
./dfg/DFGUseKind.h
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
StructuresAreWatched
StructuresAreClobbered
./dfg/DFGNodeType.h
JSC::DFG::NodeFlags JSC::DFG::defaultFlags(JSC::DFG::NodeType)
arguments elimination
Phase 
 changed the IR.
./dfg/DFGArgumentsEliminationPhase.cpp
bool JSC::DFG::(anonymous namespace)::ArgumentsEliminationPhase::run()
m_graph.m_form == SSA
void JSC::DFG::(anonymous namespace)::ArgumentsEliminationPhase::eliminateCandidatesThatEscape()
./dfg/DFGClobberize.h
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:503:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
./dfg/DFGHeapLocation.h
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGArgumentsEliminationPhase.cpp:641:33), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::(anonymous namespace)::ArgumentsEliminationPhase::transform()
node->child1()->op() == PhantomDirectArguments
node->origin.exitOK
varargsData->limit - 1 >= varargsData->mandatoryMinimum
auto JSC::DFG::(anonymous namespace)::ArgumentsEliminationPhase::transform()::(anonymous class)::operator()(const Vector<JSC::DFG::Node *> &) const
auto JSC::DFG::(anonymous namespace)::ArgumentsEliminationPhase::transform()::(anonymous class)::operator()() const
./dfg/DFGArithMode.cpp
Arith::UnaryFunction JSC::DFG::arithUnaryFunction(Arith::UnaryType)
Arith::UnaryOperation JSC::DFG::arithUnaryOperation(Arith::UnaryType)
NotSet
Unchecked
CheckOverflow
CheckOverflowAndNegativeZero
DoOverflow
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::Arith::Mode)
Int32
Int32WithNegativeZeroCheck
Double
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::Arith::RoundingMode)
Sinh
Cosh
Tanh
ASin
ASinh
ACos
ACosh
ATan
ATanh
Log10
Log2
Cbrt
Expm1
Log1p
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::Arith::UnaryType)
Read
Write
Unknown!
SelectUsingPredictions
SelectUsingArguments
Unprofiled
Generic
ForceExit
String
Undecided
Contiguous
ArrayStorage
SlowPutArrayStorage
DirectArguments
ScopedArguments
Int8Array
Int16Array
Int32Array
Uint8Array
Uint8ClampedArray
Uint16Array
Uint32Array
Float32Array
Float64Array
BigInt64Array
BigUint64Array
AnyTypedArray
OriginalArray
OriginalCopyOnWriteArray
OriginalNonArray
PossiblyArray
InBoundsSaneChain
InBounds
ToHole
OutOfBounds
OutOfBoundsSaneChain
AsIs
Convert
./dfg/DFGArrayMode.cpp
JSC::TypedArrayType JSC::DFG::toTypedArrayType(Array::Type)
./dfg/DFGAtTailAbstractState.cpp
JSC::DFG::AbstractValue &JSC::DFG::AtTailAbstractState::forNode(JSC::DFG::NodeFlowProjection)
iter != valuesAtTail.end()
Unavailable
{locals = 
; heap = 
./dfg/DFGBasicBlock.cpp
void JSC::DFG::BasicBlock::removePredecessor(JSC::DFG::BasicBlock *)
void JSC::DFG::BasicBlock::replacePredecessor(JSC::DFG::BasicBlock *, JSC::DFG::BasicBlock *)
auto JSC::DFG::ArrayMode::fromObserved(const JSC::ConcurrentJSLocker &, JSC::ArrayProfile *, Array::Action, bool)::(anonymous class)::operator()(Array::Type, JSC::ArrayModes) const
./dfg/DFGNode.h
JSC::DFG::BasicBlock *&JSC::DFG::Node::successor(unsigned int)
./dfg/DFGBackwardsPropagationPhase.cpp
void JSC::DFG::BackwardsPropagationPhase::propagate(JSC::DFG::Node *)
./dfg/DFGByteCodeParser.cpp
void JSC::DFG::ByteCodeParser::makeBlockTargetable(JSC::DFG::BasicBlock *, JSC::BytecodeIndex)
ByteCodeParser::CallOptimizationResult JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *, JSC::Operand, JSC::CallVariant, int, JSC::VirtualRegister, int, JSC::BytecodeIndex, InlineCallFrame::Kind, JSC::SpeculatedType, unsigned int &, JSC::DFG::BasicBlock *, bool)
bool JSC::DFG::ByteCodeParser::handleDOMJITGetter(JSC::Operand, const JSC::GetByVariant &, JSC::DFG::Node *, unsigned int, JSC::SpeculatedType)
JSC::DFG::GetByOffsetMethod JSC::DFG::ByteCodeParser::planLoad(const JSC::ObjectPropertyCondition &)
JSC::DFG::Node *JSC::DFG::ByteCodeParser::load(JSC::SpeculatedType, unsigned int, const JSC::DFG::GetByOffsetMethod &, JSC::DFG::NodeType)
JSC::DFG::GetByOffsetMethod JSC::DFG::ByteCodeParser::planLoad(const JSC::ObjectPropertyConditionSet &)
JSC::DFG::Node *JSC::DFG::ByteCodeParser::store(JSC::DFG::Node *, unsigned int, const JSC::PutByVariant &, JSC::DFG::Node *)
void JSC::DFG::ByteCodeParser::handlePutPrivateNameById(JSC::DFG::Node *, JSC::CacheableIdentifier, unsigned int, JSC::DFG::Node *, const JSC::PutByStatus &, JSC::PrivateFieldPutKind)
void JSC::DFG::ByteCodeParser::parseBlock(unsigned int)
void JSC::DFG::ByteCodeParser::linkBlock(JSC::DFG::BasicBlock *, Vector<JSC::DFG::BasicBlock *> &)
JSC::DFG::ByteCodeParser::InlineStackEntry::InlineStackEntry(JSC::DFG::ByteCodeParser *, JSC::CodeBlock *, JSC::CodeBlock *, JSC::JSFunction *, JSC::Operand, JSC::VirtualRegister, int, InlineCallFrame::Kind, JSC::DFG::BasicBlock *)
JSC::DFG::ByteCodeParser::InlineStackEntry::~InlineStackEntry()
Parsing 
 for inlining at 
Jump targets: 
void JSC::DFG::ByteCodeParser::parse()
./dfg/DFGCapabilities.cpp
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/CallVariant.h
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/InlineCallFrame.h
static JSC::CallMode JSC::InlineCallFrame::callModeFor(JSC::InlineCallFrame::Kind)
static JSC::CodeSpecializationKind JSC::InlineCallFrame::specializationKindFor(JSC::InlineCallFrame::Kind)
auto JSC::DFG::ByteCodeParser::handleCallVariant(JSC::DFG::Node *, JSC::Operand, JSC::CallVariant, int, JSC::VirtualRegister, int, JSC::BytecodeIndex, InlineCallFrame::Kind, JSC::SpeculatedType, unsigned int &, JSC::DFG::BasicBlock *, bool)::(anonymous class)::operator()() const
Bad operand: 
 but current number of tmps is: 
 code block has: 
 tmps.
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/GetPutInfo.h
bool JSC::needsVarInjectionChecks(JSC::ResolveType)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/CacheableIdentifierInlines.h
void JSC::CacheableIdentifier::setCellBits(JSC::JSCell *)
JSC::DFG::ByteCodeParser::DelayedSetLocal::DelayedSetLocal(const JSC::CodeOrigin &, JSC::Operand, JSC::DFG::Node *, JSC::DFG::ByteCodeParser::SetMode)
void JSC::InlineCallFrame::setTmpOffset(unsigned int)
void JSC::InlineCallFrame::setStackOffset(int)
JSC::DFG::CapabilityLevel JSC::DFG::capabilityLevel(JSC::OpcodeID, JSC::CodeBlock *, const JSC::Instruction *)
DFG rejecting opcode in 
 because of opcode 
bool JSC::DFG::ByteCodeParser::handleRecursiveTailCall(JSC::DFG::Node *, JSC::CallVariant, int, int, const ChecksFunctor &) [ChecksFunctor = (lambda at ./dfg/DFGByteCodeParser.cpp:1876:39)]
bool JSC::DFG::ByteCodeParser::handleIntrinsicCall(JSC::DFG::Node *, JSC::Operand, JSC::Intrinsic, int, int, JSC::SpeculatedType, const ChecksFunctor &) [ChecksFunctor = (lambda at ./dfg/DFGByteCodeParser.cpp:1876:39)]
auto JSC::DFG::ByteCodeParser::handleIntrinsicCall(JSC::DFG::Node *, JSC::Operand, JSC::Intrinsic, int, int, JSC::SpeculatedType, const (lambda at ./dfg/DFGByteCodeParser.cpp:1876:39) &)::(anonymous class)::operator()() const
auto JSC::DFG::ByteCodeParser::handleIntrinsicCall(JSC::DFG::Node *, JSC::Operand, JSC::Intrinsic, int, int, JSC::SpeculatedType, const (lambda at ./dfg/DFGByteCodeParser.cpp:1876:39) &)::(anonymous class)::operator()(JSC::DFG::Node *) const
unsigned int JSC::CodeBlock::bytecodeOffset(const JSC::Instruction *)
void JSC::DFG::ByteCodeParser::inlineCall(JSC::DFG::Node *, JSC::Operand, JSC::CallVariant, int, int, InlineCallFrame::Kind, JSC::DFG::BasicBlock *, const ChecksFunctor &) [ChecksFunctor = (lambda at ./dfg/DFGByteCodeParser.cpp:1939:24)]
void JSC::DFG::ByteCodeParser::inlineCall(JSC::DFG::Node *, JSC::Operand, JSC::CallVariant, int, int, InlineCallFrame::Kind, JSC::DFG::BasicBlock *, const ChecksFunctor &) [ChecksFunctor = (lambda at ./dfg/DFGByteCodeParser.cpp:1991:25)]
auto JSC::DFG::ByteCodeParser::parseBlock(unsigned int)::(anonymous class)::operator()(JSC::ValueProfileAndVirtualRegister &) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/BytecodeOperandsForCheckpoint.h
JSC::Operand JSC::destinationFor(const Bytecode &, unsigned int, JSC::JITType) [Bytecode = JSC::OpIteratorOpen]
JSC::Operand JSC::destinationFor(const Bytecode &, unsigned int, JSC::JITType) [Bytecode = JSC::OpIteratorNext]
control flow analysis
Phase 
 changed the IR.
Graph before CFA:
   Widening state at OSR entry block.
CFA [%u]
   Block 
      head vars: 
      head regs: 
      %s @%u: 
(UNSAFE) 
         Expect OSR exit.
      tail regs: 
      tail vars: 
./dfg/DFGSafeToExecute.h
bool JSC::DFG::safeToExecute(AbstractStateType &, JSC::DFG::Graph &, JSC::DFG::Node *, bool) [AbstractStateType = JSC::DFG::InPlaceAbstractState]
void JSC::DFG::SafeToExecuteEdge<JSC::DFG::InPlaceAbstractState>::operator()(JSC::DFG::Node *, JSC::DFG::Edge) [AbstractStateType = JSC::DFG::InPlaceAbstractState]
const JSC::ClassInfo *JSC::DFG::Node::requiredDOMJITClassInfo()
   Found must-handle block: 
   Not live in bytecode: 
   Not live: 
   Widening 
CFG simplification
./dfg/DFGCFGSimplificationPhase.cpp
void JSC::DFG::CFGSimplificationPhase::mergeBlocks(JSC::DFG::BasicBlock *, JSC::DFG::BasicBlock *, Vector<JSC::DFG::BasicBlock *, 1>)
CPS rethreading
./dfg/DFGCPSRethreadingPhase.cpp
bool JSC::DFG::CPSRethreadingPhase::run()
void JSC::DFG::CPSRethreadingPhase::freeUnnecessaryNodes()
Invalid Phantom(@SetArgumentMaybe)
void JSC::DFG::CPSRethreadingPhase::computeIsFlushed()
Invalid node in flush graph
local common subexpression elimination
./dfg/DFGLazyNode.h
void JSC::DFG::LazyNode::setFrozenValue(JSC::DFG::FrozenValue *, JSC::DFG::NodeType)
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
./dfg/DFGCSEPhase.cpp
JSC::DFG::Node *JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps::addPure(JSC::DFG::PureValue, JSC::DFG::Node *)
JSC::DFG::LazyNode JSC::DFG::(anonymous namespace)::LocalCSEPhase::SmallMaps::addImpure(JSC::DFG::HeapLocation, JSC::DFG::LazyNode)
JSC::DFG::NodeType JSC::DFG::LazyNode::op() const
JSC::DFG::LazyNode JSC::DFG::(anonymous namespace)::ImpureMap::getImpl(const JSC::DFG::HeapLocation &) const
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::LargeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
const JSC::DFG::(anonymous namespace)::ImpureDataSlot *JSC::DFG::(anonymous namespace)::ImpureMap::addImpl(const JSC::DFG::HeapLocation &, const JSC::DFG::LazyNode &)
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::LocalCSEPhase::BlockCSE<JSC::DFG::(anonymous namespace)::LocalCSEPhase::HugeMaps>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
global common subexpression elimination
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::(anonymous namespace)::GlobalCSEPhase>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
JSC::DFG::LazyNode JSC::DFG::(anonymous namespace)::GlobalCSEPhase::findReplacement(JSC::DFG::HeapLocation)
data.didVisit
!match
clean up
./dfg/DFGCodeOriginPool.cpp
JSC::CallSiteIndex JSC::DFG::CodeOriginPool::lastCallSite() const
void JSC::DFG::CodeOriginPool::removeDisposableCallSiteIndex(JSC::DisposableCallSiteIndex)
BeforeFixpoint
FixpointNotConverged
FixpointConverged
./dfg/DFGCommon.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::OptimizationFixpointState)
LoadStore
ThreadedCPS
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::GraphForm)
LocallyUnified
GloballyUnified
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::UnificationState)
EverythingIsLive
ExactRefCount
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::RefCountState)
./dfg/DFGBasicBlock.h
JSC::DFG::Node *JSC::DFG::BasicBlock::last() const
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetAdd, WriteFunctor = JSC::DFG::ClobberSetAdd, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ClobberSetOverlaps, WriteFunctor = JSC::DFG::NoOpClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::CheckClobberize, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::AbstractHeapOverlaps, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = JSC::DFG::AbstractHeapOverlaps, DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobberize.cpp:64:9), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGClobbersExitState.cpp:110:13), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
constant folding
Phase 
 changed the IR.
./dfg/DFGConstantFoldingPhase.cpp
bool JSC::DFG::ConstantFoldingPhase::foldConstants(JSC::DFG::BasicBlock *)
void JSC::DFG::ConstantFoldingPhase::emitGetByOffset(unsigned int, JSC::DFG::Node *, const JSC::DFG::AbstractValue &, const JSC::DFG::MultiGetByOffsetCase &, unsigned int)
void JSC::DFG::ConstantFoldingPhase::emitPutByOffset(unsigned int, JSC::DFG::Node *, const JSC::DFG::AbstractValue &, const JSC::PutByVariant &, unsigned int)
void JSC::DFG::ConstantFoldingPhase::emitDeleteByOffset(unsigned int, JSC::DFG::Node *, const JSC::DFG::AbstractValue &, const JSC::DeleteByVariant &, unsigned int)
./dfg/DFGStructureAbstractValue.h
void JSC::DFG::ConstantFoldingPhase::emitGetByOffset(unsigned int, JSC::DFG::Node *, const JSC::DFG::AbstractValue &, const JSC::GetByVariant &, unsigned int)
variant.conditionSet().isEmpty()
void JSC::DFG::Node::convertToMultiGetByOffset(JSC::DFG::MultiGetByOffsetData *)
void JSC::DFG::ConstantFoldingPhase::tryFoldAsPutByOffset(JSC::DFG::Node *, unsigned int, JSC::DFG::Edge, JSC::DFG::Edge, bool, JSC::PrivateFieldPutKind, bool &, bool &)
void JSC::DFG::ConstantFoldingPhase::fixUpsilons(JSC::DFG::BasicBlock *)
Bad Upsilon phi() pointer
Lexical binding shadows an existing global property
Desired watchpoints:
    Watchpoint sets: 
    Inline watchpoint sets: 
    SymbolTables: 
    FunctionExecutables: 
    Buffer views: 
    Object property conditions: 
./dfg/DFGDesiredWeakReferences.cpp
void JSC::DFG::DesiredWeakReferences::reallyAdd(JSC::VM &, JSC::DFG::CommonData *)
./dfg/DFGDesiredWatchpoints.h
void JSC::DFG::GenericDesiredWatchpoints<JSC::WatchpointSet *>::reallyAdd(JSC::CodeBlock *, JSC::DFG::WatchpointCollector &) [WatchpointSetType = JSC::WatchpointSet *, Adaptor = JSC::DFG::SetPointerAdaptor<JSC::WatchpointSet *>]
void JSC::DFG::GenericDesiredWatchpoints<JSC::InlineWatchpointSet *>::reallyAdd(JSC::CodeBlock *, JSC::DFG::WatchpointCollector &) [WatchpointSetType = JSC::InlineWatchpointSet *, Adaptor = JSC::DFG::SetPointerAdaptor<JSC::InlineWatchpointSet *>]
void JSC::DFG::GenericDesiredWatchpoints<JSC::SymbolTable *, JSC::DFG::SymbolTableAdaptor>::reallyAdd(JSC::CodeBlock *, JSC::DFG::WatchpointCollector &) [WatchpointSetType = JSC::SymbolTable *, Adaptor = JSC::DFG::SymbolTableAdaptor]
void JSC::DFG::GenericDesiredWatchpoints<JSC::FunctionExecutable *, JSC::DFG::FunctionExecutableAdaptor>::reallyAdd(JSC::CodeBlock *, JSC::DFG::WatchpointCollector &) [WatchpointSetType = JSC::FunctionExecutable *, Adaptor = JSC::DFG::FunctionExecutableAdaptor]
void JSC::DFG::GenericDesiredWatchpoints<JSC::JSArrayBufferView *, JSC::DFG::ArrayBufferViewWatchpointAdaptor>::reallyAdd(JSC::CodeBlock *, JSC::DFG::WatchpointCollector &) [WatchpointSetType = JSC::JSArrayBufferView *, Adaptor = JSC::DFG::ArrayBufferViewWatchpointAdaptor]
void JSC::DFG::GenericDesiredWatchpoints<JSC::ObjectPropertyCondition, JSC::DFG::AdaptiveStructureWatchpointAdaptor>::reallyAdd(JSC::CodeBlock *, JSC::DFG::WatchpointCollector &) [WatchpointSetType = JSC::ObjectPropertyCondition, Adaptor = JSC::DFG::AdaptiveStructureWatchpointAdaptor]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/PropertyCondition.h
constant hoisting
Phase 
 changed the IR.
./dfg/DFGConstantHoistingPhase.cpp
bool JSC::DFG::(anonymous namespace)::ConstantHoistingPhase::run()
auto JSC::DFG::(anonymous namespace)::ConstantHoistingPhase::run()::(anonymous class)::operator()(JSC::DFG::NodeType) const
Invalid node type in valuesFor()
critical edge breaking
dead code elimination
ArrayBuffer could not be allocated, probably because of OOM.
Generated DFG JIT code for 
, instructions size = 
    Optimized with execution counter = 
    Code at [
(End Of Main Path)
./dfg/DFGDoesGC.cpp
bool JSC::DFG::doesGC(JSC::DFG::Graph &, JSC::DFG::Node *)
Check:
Kill:
none
DFG(Driver) compiling 
Preparing for DFG compilation.
Deferring DFG compilation of 
 with queue length 
./dfg/DFGFlowIndexing.cpp
void JSC::DFG::FlowIndexing::recompute()
m_shadowIndexToNodeIndex.size() + numNodeIndices == m_numIndices
m_shadowIndexToNodeIndex[shadowIndex - numNodeIndices] == nodeIndex
DeadFlush
FlushedInt32
FlushedInt52
FlushedDouble
FlushedCell
FlushedBoolean
FlushedJSValue
ConflictingFlush
./dfg/DFGFlushFormat.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::FlushFormat)
<-- 
--> 
%sD@%d:<%c%u:
numberOfArgumentsToSkip = 
Type:
Rounding:
global
cachable-id {
, ID:
invalid cell operand: 
<host function>
<non-function executable>
machine:
vectorLengthHint = 
firstVarArgOffset = 
start = 
, count = 
, machineStart = 
, machineCount = 
, mandatoryMinimum = 
, limit = 
isInternalPromise = 
internalFieldIndex = 
, domJIT = 
ignoreLastIndexIsWritable = 
intrinsic = 
enumeratorModes = 
, F:
default:
ClobbersExit
exit: 
ExitValid
ExitInvalid
WasHoisted
  predicting 
 (skipped)
 (OSR target)
 (Catch Entrypoint)
  Execution count: 
  Predecessors:
  Successors:
 <invalid>
  Backwards dominates by: 
  Backwards dominates: 
  Control equivalent to:
  Phi Nodes:
>->(
, D@
DFG for 
  Fixpoint state: 
; Form: 
; Unification state: 
; Ref count state: 
  Argument formats for entrypoint index: 
  Arguments for block#
  States: 
, CurrentlyCFAUnreachable
, CFAUnreachable
  Vars Before: 
  Intersected Vars Before: 
  Var Links: 
./dfg/DFGGraph.cpp
void JSC::DFG::Graph::dump(WTF::PrintStream &, JSC::DumpContext *)
  Live: 
  Values: 
, CFAInvalidated
  Vars After: 
GC Values:
    
void JSC::DFG::Graph::deleteNode(JSC::DFG::Node *)
!block->ssa->liveAtHead.contains(node)
!block->ssa->liveAtTail.contains(node)
Dethreading DFG graph.
Basic block #
 was killed because it was unreachable
bool JSC::DFG::Graph::isLiveInBytecode(JSC::Operand, JSC::CodeOrigin)
JSC::DFG::FrozenValue *JSC::DFG::Graph::freeze(JSC::JSValue)
void JSC::DFG::Graph::assertIsRegistered(JSC::Structure *)
m_plan.weakReferences().contains(structure)
Structure 
 is watchable but isn't being watched.
While handling node 
JSC::DFG::CPSCFG &JSC::DFG::Graph::ensureCPSCFG()
JSC::DFG::CPSDominators &JSC::DFG::Graph::ensureCPSDominators()
JSC::DFG::SSADominators &JSC::DFG::Graph::ensureSSADominators()
JSC::DFG::CPSNaturalLoops &JSC::DFG::Graph::ensureCPSNaturalLoops()
JSC::DFG::SSANaturalLoops &JSC::DFG::Graph::ensureSSANaturalLoops()
JSC::DFG::BackwardsCFG &JSC::DFG::Graph::ensureBackwardsCFG()
JSC::DFG::BackwardsDominators &JSC::DFG::Graph::ensureBackwardsDominators()
JSC::DFG::ControlEquivalenceAnalysis &JSC::DFG::Graph::ensureControlEquivalenceAnalysis()
bool JSC::DFG::Graph::isStringPrototypeMethodSane(JSC::JSGlobalObject *, WTF::UniquedStringImpl *)
%3d 
%2d 
%2d: 
  : 
JSConstant
DoubleConstant
Int52Constant
LazyJSConstant
Identity
IdentityWithProfile
ToThis
CreateThis
CreatePromise
CreateGenerator
CreateAsyncGenerator
GetCallee
SetCallee
GetArgumentCountIncludingThis
SetArgumentCountIncludingThis
GetLocal
SetLocal
PutStack
KillStack
GetStack
MovHint
ExitOK
Phantom
Check
CheckVarargs
Upsilon
Flush
PhantomLocal
LoopHint
ExtractOSREntryLocal
ExtractCatchLocal
ClearCatchLocals
CheckTierUpInLoop
CheckTierUpAndOSREnter
CheckTierUpAtReturn
SetArgumentDefinitely
SetArgumentMaybe
InvalidationPoint
ValueBitNot
ArithBitNot
ValueBitAnd
ArithBitAnd
ValueBitOr
ArithBitOr
ValueBitXor
ArithBitXor
ArithBitLShift
ValueBitLShift
ArithBitRShift
ValueBitRShift
BitURShift
ValueToInt32
UInt32ToNumber
BooleanToNumber
DoubleAsInt32
DoubleRep
Int52Rep
ValueRep
FiatInt52
ArithAdd
ArithClz32
ArithSub
ArithNegate
ArithMul
ArithIMul
ArithDiv
ArithMod
ArithAbs
ArithMin
ArithMax
ArithFRound
ArithPow
ArithRandom
ArithRound
ArithFloor
ArithCeil
ArithTrunc
ArithSqrt
ArithUnary
ValueNegate
ValueAdd
ValueSub
ValueMul
ValueDiv
ValuePow
ValueMod
StrCat
GetByVal
GetByValWithThis
GetMyArgumentByVal
GetMyArgumentByValOutOfBounds
VarargsLength
LoadVarargs
ForwardVarargs
PutByValDirect
PutByVal
PutByValAlias
PutPrivateName
PutPrivateNameById
CheckPrivateBrand
SetPrivateBrand
TryGetById
GetById
GetByIdFlush
GetByIdWithThis
GetByIdDirect
GetByIdDirectFlush
PutById
PutByIdFlush
PutByIdDirect
PutByIdWithThis
PutByValWithThis
PutGetterById
PutSetterById
PutGetterSetterById
PutGetterByVal
PutSetterByVal
DefineDataProperty
DefineAccessorProperty
DeleteById
DeleteByVal
CheckStructure
CheckStructureOrEmpty
GetExecutable
PutStructure
AllocatePropertyStorage
ReallocatePropertyStorage
GetButterfly
NukeStructureAndSetButterfly
CheckArray
CheckArrayOrEmpty
GetPrivateName
GetPrivateNameById
CheckDetached
Arrayify
ArrayifyToStructure
GetIndexedPropertyStorage
ResolveRope
ConstantStoragePointer
GetGetter
GetSetter
GetByOffset
GetGetterSetterByOffset
MultiGetByOffset
PutByOffset
MultiPutByOffset
MultiDeleteByOffset
GetArrayLength
GetTypedArrayLengthAsInt52
GetVectorLength
GetTypedArrayByteOffset
GetTypedArrayByteOffsetAsInt52
GetScope
SkipScope
ResolveScope
ResolveScopeForHoistingFuncDeclInEval
GetGlobalObject
GetGlobalThis
GetClosureVar
PutClosureVar
GetGlobalVar
GetGlobalLexicalVariable
PutGlobalVariable
GetDynamicVar
PutDynamicVar
NotifyWrite
GetRegExpObjectLastIndex
SetRegExpObjectLastIndex
RecordRegExpCachedResult
CheckIsConstant
CheckNotEmpty
AssertNotEmpty
CheckBadValue
AssertInBounds
CheckInBounds
CheckInBoundsInt52
CheckIdent
CheckTypeInfoFlags
CheckJSCast
CheckNotJSCast
ParseInt
GetPrototypeOf
ObjectAssign
ObjectCreate
ObjectKeys
ObjectGetOwnPropertyNames
AtomicsAdd
AtomicsAnd
AtomicsCompareExchange
AtomicsExchange
AtomicsIsLockFree
AtomicsLoad
AtomicsOr
AtomicsStore
AtomicsSub
AtomicsXor
ArrayPush
ArrayPop
ArraySlice
ArrayIndexOf
RegExpExec
RegExpExecNonGlobalOrSticky
RegExpTest
RegExpTestInline
RegExpMatchFast
RegExpMatchFastGlobal
StringReplace
StringReplaceRegExp
StringCharCodeAt
StringCodePointAt
StringCharAt
StringFromCharCode
CompareLess
CompareLessEq
CompareGreater
CompareGreaterEq
CompareBelow
CompareBelowEq
CompareEq
CompareStrictEq
CompareEqPtr
SameValue
Call
DirectCall
Construct
DirectConstruct
CallVarargs
CallForwardVarargs
ConstructVarargs
ConstructForwardVarargs
TailCallInlinedCaller
DirectTailCallInlinedCaller
TailCallVarargsInlinedCaller
TailCallForwardVarargsInlinedCaller
CallEval
LogShadowChickenPrologue
LogShadowChickenTail
NewObject
NewGenerator
NewAsyncGenerator
NewArray
NewArrayWithSpread
NewArrayWithSize
NewArrayBuffer
NewInternalFieldObject
NewTypedArray
NewRegexp
NewSymbol
NewStringObject
GetRestLength
CreateRest
Spread
PhantomNewObject
PutHint
CheckStructureImmediate
MaterializeNewObject
PhantomNewFunction
PhantomNewGeneratorFunction
PhantomNewAsyncFunction
PhantomNewAsyncGeneratorFunction
PhantomNewInternalFieldObject
MaterializeNewInternalFieldObject
PhantomCreateActivation
MaterializeCreateActivation
PhantomNewRegexp
OverridesHasInstance
InstanceOf
InstanceOfCustom
MatchStructure
IsCellWithType
IsEmpty
TypeOfIsUndefined
TypeOfIsObject
TypeOfIsFunction
IsUndefinedOrNull
IsBoolean
IsNumber
IsBigInt
NumberIsInteger
IsObject
IsCallable
IsConstructor
IsTypedArrayView
TypeOf
ToBoolean
LogicalNot
ToPrimitive
ToPropertyKey
ToString
ToNumber
ToNumeric
ToObject
CallObjectConstructor
CallStringConstructor
CallNumberConstructor
NumberToStringWithRadix
NumberToStringWithValidRadixConstant
FunctionToString
MakeRope
InByVal
InById
HasPrivateName
HasPrivateBrand
ProfileType
ProfileControlFlow
SetFunctionName
HasOwnProperty
GetInternalField
PutInternalField
CreateActivation
PushWithScope
CreateDirectArguments
PhantomDirectArguments
PhantomCreateRest
PhantomSpread
PhantomNewArrayWithSpread
PhantomNewArrayBuffer
CreateScopedArguments
CreateClonedArguments
PhantomClonedArguments
CreateArgumentsButterfly
GetFromArguments
PutToArguments
GetArgument
NewFunction
NewGeneratorFunction
NewAsyncGeneratorFunction
NewAsyncFunction
Jump
Branch
Switch
EntrySwitch
Return
TailCall
DirectTailCall
TailCallVarargs
TailCallForwardVarargs
Unreachable
Throw
ThrowStaticError
CountExecution
SuperSamplerBegin
SuperSamplerEnd
ForceOSRExit
BottomValue
CheckTraps
StoreBarrier
FencedStoreBarrier
HasIndexedProperty
GetPropertyEnumerator
EnumeratorNextUpdateIndexAndMode
EnumeratorNextExtractMode
EnumeratorNextExtractIndex
EnumeratorNextUpdatePropertyName
EnumeratorGetByVal
EnumeratorInByVal
EnumeratorHasOwnProperty
MapHash
NormalizeMapKey
GetMapBucket
GetMapBucketHead
GetMapBucketNext
LoadKeyFromMapBucket
LoadValueFromMapBucket
SetAdd
MapSet
WeakMapGet
WeakSetAdd
WeakMapSet
ExtractValueFromWeakMapGet
StringValueOf
StringSlice
ToLowerCase
CallDOMGetter
CallDOM
InitializeEntrypointArguments
CPUIntrinsic
FilterCallLinkStatus
FilterGetByStatus
FilterInByStatus
FilterPutByStatus
FilterDeleteByStatus
FilterCheckPrivateBrandStatus
FilterSetPrivateBrandStatus
DataViewGetInt
DataViewGetFloat
DataViewSet
DateGetInt32OrNaN
DateGetTime
  Dominated by: 
  Dominates: 
  Dominance Frontier: 
  Iterated Dominance Frontier: 
  Loop header, contains:
  Containing loop headers:
auto JSC::DFG::Graph::blocksInPreOrder()::(anonymous class)::operator()(auto &) const [dominators:auto = JSC::DFG::Dominators<JSC::DFG::CFG>]
auto JSC::DFG::Graph::blocksInPreOrder()::(anonymous class)::operator()(auto &) const [dominators:auto = JSC::DFG::Dominators<JSC::DFG::CPSCFG>]
auto JSC::DFG::Graph::blocksInPostOrder(bool)::(anonymous class)::operator()(auto &) const [dominators:auto = JSC::DFG::Dominators<JSC::DFG::CFG>]
auto JSC::DFG::Graph::blocksInPostOrder(bool)::(anonymous class)::operator()(auto &) const [dominators:auto = JSC::DFG::Dominators<JSC::DFG::CPSCFG>]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
./dfg/DFGValueStrength.h
JSC::DFG::ValueStrength JSC::DFG::merge(JSC::DFG::ValueStrength, JSC::DFG::ValueStrength)
DFG ASSERTION FAILED: 
) : 
Graph at time of failure:
./dfg/DFGCFG.h
JSC::DFG::SSACFG &JSC::DFG::selectCFG(JSC::DFG::Graph &) [T = JSC::DFG::CFG]
WTF::NaturalLoops<JSC::DFG::CPSCFG>::NaturalLoops(Graph &, Dominators<Graph> &, bool) [Graph = JSC::DFG::CPSCFG]
WTF::NaturalLoops<JSC::DFG::CFG>::NaturalLoops(Graph &, Dominators<Graph> &, bool) [Graph = JSC::DFG::CFG]
fixup
Phase 
 changed the IR.
./dfg/DFGFixupPhase.cpp
void JSC::DFG::FixupPhase::fixupNode(JSC::DFG::Node *)
Unexpected node during ValueBit operation fixup
arrayMode.isSpecific() || arrayMode.type() == Array::ForceExit
arrayMode.isSomeTypedArrayView() || arrayMode.type() == Array::ForceExit
Unexpected node during fixup
auto JSC::DFG::FixupPhase::attemptToMakeFastStringAdd(JSC::DFG::Node *)::(anonymous class)::operator()(JSC::DFG::Edge &) const
void JSC::DFG::FixupPhase::blessArrayOperation(JSC::DFG::Edge, JSC::DFG::Edge, JSC::DFG::Edge &, bool (*)(const JSC::DFG::ArrayMode &))
void JSC::DFG::FixupPhase::fixupArrayIndexOf(JSC::DFG::Node *)
JSC::InlineWatchpointSet &JSC::JSGlobalObject::numberToStringWatchpointSet()
auto JSC::DFG::FixupPhase::fixupCallDOM(JSC::DFG::Node *)::(anonymous class)::operator()(JSC::DFG::Edge &, unsigned int) const
bool JSC::DFG::FixupPhase::attemptToMakeCallDOM(JSC::DFG::Node *)
void JSC::DFG::FixupPhase::fixupGetAndSetLocalsInBlock(JSC::DFG::BasicBlock *)
auto JSC::DFG::FixupPhase::fixupChecksInBlock(JSC::DFG::BasicBlock *)::(anonymous class)::operator()(JSC::DFG::Edge &) const
node->op() == Check
./dfg/DFGStructureClobberState.h
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::StructureClobberState)
InvalidBranchDirection
TakeTrue
TakeFalse
TakeBoth
./dfg/DFGBranchDirection.h
const char *JSC::DFG::branchDirectionToString(JSC::DFG::BranchDirection)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/b3/B3SparseCollection.h
void JSC::B3::SparseCollection<JSC::DFG::Node>::remove(T *) [T = JSC::DFG::Node]
./dfg/DFGInPlaceAbstractState.cpp
void JSC::DFG::InPlaceAbstractState::initialize()
bool JSC::DFG::InPlaceAbstractState::endBasicBlock()
bool JSC::DFG::InPlaceAbstractState::merge(JSC::DFG::BasicBlock *, JSC::DFG::BasicBlock *)
./dfg/DFGJITCode.cpp
virtual JSC::RegisterSet JSC::DFG::JITCode::liveRegistersToPreserveAtExceptionHandlingCallSite(JSC::CodeBlock *, JSC::CallSiteIndex)
: FTL-optimizing next invocation.
: Not FTL-optimizing anytime soon.
: FTL-optimizing after warm-up.
: FTL-optimizing soon.
: Forcing slow path concurrently for FTL entry.
void JSC::DFG::JITCode::setOptimizationThresholdBasedOnCompilationResult(JSC::CodeBlock *, JSC::CompilationResult)
: Setting OSR entry block to 
OSR entries will go to 
./dfg/DFGJITCompiler.cpp
void JSC::DFG::JITCompiler::link(JSC::LinkBuffer &)
DFG JIT code for %s
void JSC::DFG::JITCompiler::noticeCatchEntrypoint(JSC::DFG::BasicBlock &, JITCompiler::Label, JSC::LinkBuffer &, Vector<JSC::DFG::FlushFormat> &&)
void JSC::DFG::JITCompiler::noticeOSREntry(JSC::DFG::BasicBlock &, JITCompiler::Label, JSC::LinkBuffer &)
JSC::DFG::StructureClobberState JSC::DFG::merge(JSC::DFG::StructureClobberState, JSC::DFG::StructureClobberState)
bool JSC::DFG::InPlaceAbstractState::mergeToSuccessors(JSC::DFG::BasicBlock *)
auto JSC::DFG::JITCompiler::linkOSRExits()::(anonymous class)::operator()(JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::Label) const
integer check combining
Phase 
 changed the IR.
./dfg/DFGIntegerCheckCombiningPhase.cpp
void JSC::DFG::IntegerCheckCombiningPhase::handleBlock(JSC::DFG::BlockIndex)
integer range optimization
./dfg/DFGIntegerRangeOptimizationPhase.cpp
bool JSC::DFG::(anonymous namespace)::IntegerRangeOptimizationPhase::run()
block == m_graph.block(0) || m_seenBlocks.contains(block)
Invalid comparison node type
JSC::DFG::(anonymous namespace)::Relationship::Relationship(JSC::DFG::NodeFlowProjection, JSC::DFG::NodeFlowProjection, JSC::DFG::(anonymous namespace)::Relationship::Kind, int)
void JSC::DFG::(anonymous namespace)::Relationship::setLeft(JSC::DFG::NodeFlowProjection)
JSC::DFG::(anonymous namespace)::Relationship JSC::DFG::(anonymous namespace)::Relationship::inverse() const
static unsigned int JSC::DFG::(anonymous namespace)::Relationship::vagueness(JSC::DFG::(anonymous namespace)::Relationship::Kind)
JSC::DFG::(anonymous namespace)::Relationship JSC::DFG::(anonymous namespace)::Relationship::filterConstant(const JSC::DFG::(anonymous namespace)::Relationship &) const
void JSC::DFG::(anonymous namespace)::Relationship::setRight(JSC::DFG::NodeFlowProjection)
static JSC::DFG::(anonymous namespace)::Relationship::Kind JSC::DFG::(anonymous namespace)::Relationship::flipped(JSC::DFG::(anonymous namespace)::Relationship::Kind)
void JSC::DFG::(anonymous namespace)::Relationship::mergeConstantsImpl(const JSC::DFG::(anonymous namespace)::Relationship &, const Functor &) const [Functor = (lambda at ./dfg/DFGIntegerRangeOptimizationPhase.cpp:1833:25)]
JSC::DFG::(anonymous namespace)::Relationship JSC::DFG::(anonymous namespace)::Relationship::mergeImpl(const JSC::DFG::(anonymous namespace)::Relationship &) const
invalidation point injection
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/LinkBuffer.h
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)10924, T = JSC::AssemblerLabel]
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)357, T = JSC::AssemblerLabel]
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)45709, T = JSC::AssemblerLabel]
Firing jump replacement watchpoint from 
 to 
./dfg/DFGLazyJSValue.cpp
JSC::JSValue JSC::DFG::LazyJSValue::getValue(JSC::VM &) const
const WTF::StringImpl *JSC::DFG::LazyJSValue::tryGetStringImpl(JSC::VM &) const
WTF::String JSC::DFG::LazyJSValue::tryGetString(JSC::DFG::Graph &) const
WTF::TriState JSC::DFG::LazyJSValue::strictEqual(const JSC::DFG::LazyJSValue &) const
uintptr_t JSC::DFG::LazyJSValue::switchLookupValue(JSC::DFG::SwitchKind) const
Lazy:SingleCharacterString(
%04X
Lazy:KnownString(
Lazy:NewString(
void JSC::DFG::LazyJSValue::dumpInContext(WTF::PrintStream &, JSC::DumpContext *) const
ExitsForExceptions
Exits
./dfg/DFGMayExit.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::ExitMode)
static void JSC::ARM64Assembler::replaceWithVMHalt(void *)
LICM
Phase 
 changed the IR.
./dfg/DFGLICMPhase.cpp
bool JSC::DFG::LICMPhase::run()
header->predecessors.size() > 1
preHeader->terminal()->op() == Jump
bool JSC::DFG::safeToExecute(AbstractStateType &, JSC::DFG::Graph &, JSC::DFG::Node *, bool) [AbstractStateType = JSC::DFG::AtTailAbstractState]
void JSC::DFG::SafeToExecuteEdge<JSC::DFG::AtTailAbstractState>::operator()(JSC::DFG::Node *, JSC::DFG::Edge) [AbstractStateType = JSC::DFG::AtTailAbstractState]
./dfg/DFGAbstractInterpreterInlines.h
bool JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, JSC::DFG::Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]
void JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::verifyEdge(JSC::DFG::Node *, JSC::DFG::Edge) [AbstractStateType = JSC::DFG::AtTailAbstractState]
./dfg/DFGFrozenValue.h
./dfg/DFGFlushFormat.h
./dfg/DFGAbstractValue.h
bool JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::handleConstantBinaryBitwiseOp(JSC::DFG::Node *) [AbstractStateType = JSC::DFG::AtTailAbstractState]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
auto JSC::DFG::AbstractInterpreter<JSC::DFG::AtTailAbstractState>::executeEffects(unsigned int, JSC::DFG::Node *)::(anonymous class)::operator()(double, double) const [AbstractStateType = JSC::DFG::AtTailAbstractState]
./dfg/DFGAtTailAbstractState.h
void JSC::DFG::AtTailAbstractState::setStructureClobberState(JSC::DFG::StructureClobberState)
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)2367, T = JSC::AssemblerLabel]
auto JSC::DFG::LazyJSValue::emit(JSC::CCallHelpers &, JSC::JSValueRegs)::(anonymous class)::operator()(JSC::LinkBuffer &)::(anonymous class)::operator()() const
live catch variable preservation phase
./dfg/DFGLiveCatchVariablePreservationPhase.cpp
bool JSC::DFG::LiveCatchVariablePreservationPhase::run()
m_graph.m_form == LoadStore
auto JSC::DFG::LiveCatchVariablePreservationPhase::handleBlockForTryCatch(JSC::DFG::BasicBlock *, JSC::DFG::InsertionSet &)::(anonymous class)::operator()(JSC::DFG::NodeOrigin, unsigned int) const
liveness analysis
./dfg/DFGFlowIndexing.h
unsigned int JSC::DFG::FlowIndexing::shadowIndex(JSC::DFG::Node *) const
node->op() == Phi
loop pre-header creation
./dfg/DFGLoopPreHeaderCreationPhase.cpp
bool JSC::DFG::LoopPreHeaderCreationPhase::run()
existingPreHeader != predecessor
existingPreHeader
existingPreHeader->terminal()->op() == Jump
LoadFromPrototype
./dfg/DFGMultiGetByOffsetData.cpp
void WTF::printInternal(WTF::PrintStream &, GetByOffsetMethod::Kind)
./dfg/DFGNode.cpp
void JSC::DFG::Node::convertToIdentity()
void JSC::DFG::Node::convertToIdentityOn(JSC::DFG::Node *)
void JSC::DFG::Node::convertToDirectCall(JSC::DFG::FrozenValue *)
void JSC::DFG::Node::convertToCallDOM(JSC::DFG::Graph &)
SwitchImm
SwitchChar
SwitchString
SwitchCell
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::SwitchKind)
<Double>
<Int52>
./dfg/DFGNodeFlags.cpp
void JSC::DFG::dumpNodeFlags(WTF::PrintStream &, JSC::DFG::NodeFlags)
MustGen
VarArgs
PureInt
PureInt(w/ neg zero)
PureNum
UseAsOther
MayHaveDoubleResult
MayHaveBigInt32Result
MayHaveHeapBigIntResult
MayHaveNonNumericResult
MayOverflowInt52
MayOverflowInt32InBaseline
MayOverflowInt32InDFG
MayNegZeroInBaseline
MayNegZeroInDFG
UseAsInt
ReallyWantsInt
IsFlushed
shadow(
./dfg/DFGMinifiedIDInlines.h
JSC::DFG::MinifiedID::MinifiedID(JSC::DFG::Node *)
, machine code = 
, stack rules = [
], machine stack used = 
DFG OSR in 
 from 
./dfg/DFGOSREntry.cpp
void *JSC::DFG::prepareOSREntry(JSC::VM &, JSC::CallFrame *, JSC::CodeBlock *, JSC::BytecodeIndex)
    OSR failed because the target code block is not DFG.
    OSR failed because the entrypoint was optimized out.
    OSR failed because argument 
 is 
, expected 
    OSR failed because variable 
machine int.
, expected number.
    OSR failed because stack growth failed.
    OSR should succeed.
    OSR using target PC 
    OSR returning data buffer 
MacroAssemblerCodePtr<ExceptionHandlerPtrTag> JSC::DFG::prepareCatchOSREntry(JSC::VM &, JSC::CallFrame *, JSC::CodeBlock *, JSC::CodeBlock *, JSC::BytecodeIndex)
./dfg/DFGOSRExit.cpp
JSC::DFG::OSRExit::OSRExit(JSC::ExitKind, JSC::JSValueSource, JSC::MethodOfGettingAValueProfile, JSC::DFG::SpeculativeJIT *, unsigned int, unsigned int)
canExit
static void JSC::DFG::OSRExit::emitRestoreArguments(JSC::CCallHelpers &, JSC::VM &, const Operands<JSC::ValueRecovery> &)
void JSC::DFG::operationCompileOSRExit(JSC::CallFrame *, void *)
DFG OSR exit #%u (D@%u, %s, %s) from %s, with operands = %s
static void JSC::DFG::OSRExit::compileExit(JSC::CCallHelpers &, JSC::VM &, const JSC::DFG::OSRExit &, const Operands<JSC::ValueRecovery> &, JSC::DFG::SpeculationRecovery *)
Speculation failure in 
 @ exit #
) with 
executeCounter = 
, reoptimizationRetryCounter = 
, optimizationDelayCounter = 
no alternative code block (i.e. we've been jettisoned)
, osrExitCounter = 
    GPRs at time of exit:
    FPRs at time of exit:
%llx:%lf
./dfg/DFGOSRExitCompilerCommon.cpp
void JSC::DFG::handleExitCounts(JSC::VM &, JSC::CCallHelpers &, const JSC::DFG::OSRExitBase &)
CCallHelpers::Address JSC::DFG::calleeSaveSlot(JSC::InlineCallFrame *, JSC::CodeBlock *, JSC::GPRReg)
ignored
maps to 
overwritten
, forced double
, forced machine int
MacroAssemblerCodePtr<JSEntryPtrTag> JSC::DFG::callerReturnPC(JSC::CodeBlock *, JSC::BytecodeIndex, InlineCallFrame::Kind, bool &)
JSC::BaselineJITData *JSC::CodeBlock::baselineJITData()
OSR availability analysis
Phase 
 changed the IR.
PromotedHeapLocation is dead, but should not be: 
Block #
Availability at head: 
Availability at tail: 
./dfg/DFGOSRAvailabilityAnalysisPhase.cpp
bool JSC::DFG::OSRAvailabilityAnalysisPhase<(lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:201:31), (lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:202:31)>::run() [HeadFunctor = (lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:201:31), TailFunctor = (lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:202:31)]
, availabilityMap = 
bool JSC::DFG::OSRAvailabilityAnalysisPhase<(lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:216:31), (lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:217:31)>::run() [HeadFunctor = (lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:216:31), TailFunctor = (lambda at ./dfg/DFGOSRAvailabilityAnalysisPhase.cpp:217:31)]
OSR entrypoint creation
./dfg/DFGOSREntrypointCreationPhase.cpp
bool JSC::DFG::OSREntrypointCreationPhase::run()
Object prototype may only be an Object or null.
./dfg/DFGOperations.cpp
JSC::EncodedJSValue JSC::DFG::operationArrayPushMultiple(JSC::JSGlobalObject *, JSC::JSArray *, void *, int32_t)
Array size is not a small enough positive integer.
toString() radix argument must be between 2 and 36
Executed NotifyWrite
Log Full, called from inside DFG.
void JSC::DFG::operationLinkDirectCall(JSC::OptimizingCallLinkInfo *, JSC::JSFunction *)
: Entered reoptimize
: Not reoptimizing because we've already been jettisoned.
: Not reoptimizing 
 because it either didn't exit enough or didn't loop enough after exit.
Unexpected code block in DFG->FTL tier-up: 
void JSC::DFG::operationTriggerTierUpNow(JSC::VM *)
: Entered triggerTierUpNow with executeCounter = 
delayFTLCompile
Unexpected code block in DFG->FTL trigger tier up now in loop: 
void JSC::DFG::operationTriggerTierUpNowInLoop(JSC::VM *, unsigned int)
: Entered triggerTierUpNowInLoop with executeCounter = 
char *JSC::DFG::operationTriggerOSREntryNow(JSC::VM *, unsigned int)
: Entered triggerOSREntryNow with executeCounter = 
Beginning DFG phase 
Before 
./dfg/DFGPlan.cpp
JSC::DFG::Plan::Plan(JSC::CodeBlock *, JSC::CodeBlock *, JSC::JITCompilationMode, JSC::BytecodeIndex, const Operands<std::optional<JSValue>> &)
clean must handle values
Compiler must handle OSR entry from 
 with values: 
bytecode parser
Graph after parsing:
Graph after optimization:
machine code generation
Graph just before FTL lowering:
virtual Plan::CompilationPath JSC::DFG::Plan::compileInThreadImpl()
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/ArgList.h
void JSC::MarkedArgumentBufferBase::appendWithAction(JSC::JSValue) [action = JSC::MarkedArgumentBufferBase::CrashOnOverflow]
Invalid mix of BigInt and other type in remainder.
Invalid mix of BigInt and other type in bitwise 'and' operation.
Invalid mix of BigInt and other type in bitwise 'or' operation.
Invalid mix of BigInt and other type in bitwise 'xor' operation.
Invalid mix of BigInt and other type in left shift operation.
Invalid mix of BigInt and other type in signed right shift operation.
BigInt does not support >>> operator
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
Invalid mix of BigInt and other type in division.
Invalid mix of BigInt and other type in exponentiation.
bool JSC::JSObject::trySetIndexQuickly(JSC::VM &, unsigned int, JSC::JSValue, JSC::ArrayProfile *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSArrayInlines.h
void JSC::JSArray::pushInline(JSC::JSGlobalObject *, JSC::JSValue)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/RegExpMatchesArray.h
JSC::JSArray *JSC::createRegExpMatchesArray(JSC::VM &, JSC::JSGlobalObject *, JSC::JSString *, const WTF::String &, JSC::RegExp *, unsigned int, JSC::MatchResult &)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSString.h
JSC::JSRopeString::JSRopeString(JSC::VM &, JSC::JSString *, unsigned int, unsigned int)
void JSC::JSObject::initializeIndexWithoutBarrier(JSC::ObjectInitializationScope &, unsigned int, JSC::JSValue, JSC::IndexingType)
JSC::JSValue JSC::JSObject::getIndexQuickly(unsigned int) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSArray.h
static JSC::JSArray *JSC::JSArray::create(JSC::VM &, JSC::Structure *, unsigned int)
Allocated a scope
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/ButterflyInlines.h
static JSC::Butterfly *JSC::Butterfly::create(JSC::VM &, JSC::JSObject *, size_t, size_t, bool, const JSC::IndexingHeader &, size_t)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/CallLinkInfo.h
abortFTLCompile
Deferring FTL-optimization of 
 indefinitely because there was an FTL failure.
Choosing not to FTL-optimize 
 yet.
counter = 
Code block 
 was compiled but it doesn't have an optimized replacement.
triggerFTLReplacement
still compiling
has replacement
compiled and failed
OSR entry: From 
 got entry block 
osrEntry
triggerFTLOSR
Immediate OSR entry: From 
OSR entry code is already invalidated
OSR entry failed
OSR entry failed too many times
avoiding OSR entry compile
avoiding replacement compile
OSR entry failed, OSR entry threshold not met
Inner-loop 
 setting parent loop 
's trigger and backing off.
OSR ecompilation not successful
Profiler::CompilationKind JSC::DFG::(anonymous namespace)::profilerCompilationKindForMode(JSC::JITCompilationMode)
dfgFinalize
invalidated
failed
succeeded
object allocation elimination
./dfg/DFGObjectAllocationSinkingPhase.cpp
void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::handleNode(JSC::DFG::Node *, const WriteFunctor &, const ResolveFunctor &) [WriteFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:884:25), ResolveFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:885:25)]
JSC::DFG::(anonymous namespace)::Allocation &JSC::DFG::(anonymous namespace)::Allocation::filterStructures(const JSC::DFG::RegisteredStructureSet &)
void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::handleNode(JSC::DFG::Node *, const WriteFunctor &, const ResolveFunctor &) [WriteFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1358:21), ResolveFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1366:21)]
void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::handleNode(JSC::DFG::Node *, const WriteFunctor &, const ResolveFunctor &) [WriteFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1396:25), ResolveFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1397:25)]
void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::placeMaterializations(HashMap<JSC::DFG::Node *, JSC::DFG::(anonymous namespace)::Allocation>, JSC::DFG::Node *)
auto JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::placeMaterializations(HashMap<JSC::DFG::Node *, JSC::DFG::(anonymous namespace)::Allocation>, JSC::DFG::Node *)::(anonymous class)::operator()(JSC::DFG::(anonymous namespace)::Allocation &&) const
JSC::DFG::Node *JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::createMaterialization(const JSC::DFG::(anonymous namespace)::Allocation &, JSC::DFG::Node *)
Bad allocation kind
void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::promoteLocalHeap()
void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::handleNode(JSC::DFG::Node *, const WriteFunctor &, const ResolveFunctor &) [WriteFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1783:21), ResolveFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1789:21)]
void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::handleNode(JSC::DFG::Node *, const WriteFunctor &, const ResolveFunctor &) [WriteFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1889:21), ResolveFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1910:21)]
./dfg/DFGSSACalculator.h
void JSC::DFG::SSACalculator::computePhis(const PhiInsertionFunctor &) [PhiInsertionFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1919:13)]
m_graph.m_ssaDominators
void JSC::DFG::SSACalculator::computePhis(const PhiInsertionFunctor &) [PhiInsertionFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:1941:13)]
void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::populateMaterialization(JSC::DFG::BasicBlock *, JSC::DFG::Node *, JSC::DFG::Node *)
Bad location kind
Bad materialize op
JSC::DFG::Node *JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::createRecovery(JSC::DFG::BasicBlock *, JSC::DFG::PromotedHeapLocation, JSC::DFG::Node *, bool &)
void JSC::DFG::(anonymous namespace)::ObjectAllocationSinkingPhase::handleNode(JSC::DFG::Node *, const WriteFunctor &, const ResolveFunctor &) [WriteFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:2076:21), ResolveFunctor = (lambda at ./dfg/DFGObjectAllocationSinkingPhase.cpp:2102:21)]
void JSC::DFG::putByValInternal(JSC::JSGlobalObject *, JSC::VM &, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::EncodedJSValue) [strict = true, direct = true]
void JSC::DFG::putByVal(JSC::JSGlobalObject *, JSC::VM &, JSC::JSValue, uint32_t, JSC::JSValue) [strict = true, direct = true]
void JSC::DFG::putByValInternal(JSC::JSGlobalObject *, JSC::VM &, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::EncodedJSValue) [strict = false, direct = true]
void JSC::DFG::putByVal(JSC::JSGlobalObject *, JSC::VM &, JSC::JSValue, uint32_t, JSC::JSValue) [strict = false, direct = true]
void JSC::DFG::putByValCellInternal(JSC::JSGlobalObject *, JSC::VM &, JSC::JSCell *, JSC::PropertyName, JSC::JSValue) [strict = true, direct = true]
void JSC::DFG::putByValCellInternal(JSC::JSGlobalObject *, JSC::VM &, JSC::JSCell *, JSC::PropertyName, JSC::JSValue) [strict = false, direct = true]
Requested length is negative
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSGenericTypedArrayViewInlines.h
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::Int8Adaptor]
Buffer is already detached
ArrayBuffer length minus the byteOffset is not a multiple of the element size
Underlying ArrayBuffer has been detached from the view
Content types of source and new typed array are different
species is not a constructor
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int8Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::BigInt64Adaptor]
Content types of source and destination typed arrays are different
bool JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int8Adaptor, OtherAdaptor = JSC::BigUint64Adaptor]
Range consisting of offset and length are out of bounds
 cannot be negative
 too large
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int16Adaptor, OtherAdaptor = JSC::BigUint64Adaptor]
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Int32Adaptor, OtherAdaptor = JSC::BigUint64Adaptor]
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8Adaptor, OtherAdaptor = JSC::BigUint64Adaptor]
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor]
auto JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint8ClampedAdaptor, OtherAdaptor = JSC::BigUint64Adaptor]
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint16Adaptor, OtherAdaptor = JSC::BigUint64Adaptor]
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Uint32Adaptor, OtherAdaptor = JSC::BigUint64Adaptor]
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float32Adaptor, OtherAdaptor = JSC::BigUint64Adaptor]
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::Float64Adaptor, OtherAdaptor = JSC::BigUint64Adaptor]
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::BigInt64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigInt64Adaptor, OtherAdaptor = JSC::BigUint64Adaptor]
static JSGenericTypedArrayView<Adaptor> *JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::createWithFastVector(JSC::JSGlobalObject *, JSC::Structure *, size_t, void *) [Adaptor = JSC::BigUint64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor]
auto JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::set(JSC::JSGlobalObject *, size_t, JSC::JSObject *, size_t, size_t, JSC::CopyType)::(anonymous class)::operator()(JSC::JSArrayBufferView *) const [Adaptor = JSC::BigUint64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::Int8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::Int16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::Int32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::Uint8Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::Uint8ClampedAdaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::Uint16Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::Uint32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::Float32Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::Float64Adaptor]
bool JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::setWithSpecificType(JSC::JSGlobalObject *, size_t, JSGenericTypedArrayView<OtherAdaptor> *, size_t, size_t, JSC::CopyType) [Adaptor = JSC::BigUint64Adaptor, OtherAdaptor = JSC::BigInt64Adaptor]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSCast.h
To JSC::jsSecureCast(JSC::VM &, From) [To = JSC::JSString *, From = JSC::JSValue]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/HashMapImplInlines.h
void JSC::HashMapImpl<JSC::HashMapBucket<JSC::HashMapBucketDataKey>>::rehash(JSC::JSGlobalObject *) [HashMapBucketType = JSC::HashMapBucket<JSC::HashMapBucketDataKey>]
void JSC::HashMapImpl<JSC::HashMapBucket<JSC::HashMapBucketDataKeyValue>>::rehash(JSC::JSGlobalObject *) [HashMapBucketType = JSC::HashMapBucket<JSC::HashMapBucketDataKeyValue>]
replacement in place, delaying indefinitely
trigger in place, delaying indefinitely
OSR in loop failed, deferring
phantom insertion
./dfg/DFGPhantomInsertionPhase.cpp
bool JSC::DFG::(anonymous namespace)::PhantomInsertionPhase::run()
m_graph.m_refCountState == ExactRefCount
<nullopt>
prediction injection
InvalidPromotedLocationKind
StructurePLoc
ActivationSymbolTablePLoc
NamedPropertyPLoc
IndexedPropertyPLoc
ArgumentPLoc
ArgumentCountPLoc
ArgumentsCalleePLoc
FunctionExecutablePLoc
FunctionActivationPLoc
ActivationScopePLoc
ClosureVarPLoc
PublicLengthPLoc
VectorLengthPLoc
SpreadPLoc
NewArrayWithSpreadArgumentPLoc
NewArrayBufferPLoc
RegExpObjectRegExpPLoc
RegExpObjectLastIndexPLoc
InternalFieldObjectPLoc
./dfg/DFGPromotedHeapLocation.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::PromotedLocationKind)
prediction propagation
Phase 
 changed the IR.
./dfg/DFGDoubleFormatState.h
JSC::DFG::DoubleFormatState JSC::DFG::mergeDoubleFormatStates(JSC::DFG::DoubleFormatState, JSC::DFG::DoubleFormatState)
./dfg/DFGPredictionPropagationPhase.cpp
void JSC::DFG::(anonymous namespace)::PredictionPropagationPhase::processInvariantsForNode()
Unexpected node during prediction propagation
PutStack sinking
./dfg/DFGPutStackSinkingPhase.cpp
bool JSC::DFG::(anonymous namespace)::PutStackSinkingPhase::run()
liveAtHead.atIndex(0).argument(i)
!isConflicting
deferred.operand(data->operand) != ConflictingFlush
format == data->format
isConcrete(format)
incoming
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
./dfg/DFGPreciseLocalClobberize.h
void JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)>::write(JSC::DFG::AbstractHeap) [ReadFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:108:42), WriteFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:116:41), DefFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:126:25)]
auto JSC::DFG::(anonymous namespace)::PutStackSinkingPhase::run()::(anonymous class)::operator()(JSC::Operand) const
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)>::write(JSC::DFG::AbstractHeap) [ReadFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:284:42), WriteFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:293:41), DefFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:304:25)]
void JSC::DFG::SSACalculator::computePhis(const PhiInsertionFunctor &) [PhiInsertionFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:387:13)]
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::ReadMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:515:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:529:25)>>, WriteFunctor = JSC::DFG::WriteMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:515:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:529:25)>>, DefFunctor = JSC::DFG::DefMethodClobberize<JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:515:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:529:25)>>, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
void JSC::DFG::PreciseLocalClobberizeAdaptor<(lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:515:41), (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:529:25)>::write(JSC::DFG::AbstractHeap) [ReadFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:486:42), WriteFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:515:41), DefFunctor = (lambda at ./dfg/DFGPutStackSinkingPhase.cpp:529:25)]
JSC::DFG::UseKind JSC::DFG::uncheckedUseKindFor(JSC::DFG::FlushFormat)
JSC::DFG::NodeFlags JSC::DFG::resultFor(JSC::DFG::FlushFormat)
SSA conversion
./dfg/DFGSSAConversionPhase.cpp
bool JSC::DFG::SSAConversionPhase::run()
m_graph.m_form == ThreadedCPS
!m_graph.m_isInSSAConversion
entrySwitchData->cases[0] == m_graph.block(0)
node
m_graph.m_isInSSAConversion
void JSC::DFG::SSACalculator::computePhis(const PhiInsertionFunctor &) [PhiInsertionFunctor = (lambda at ./dfg/DFGSSAConversionPhase.cpp:178:13)]
SSA lowering
./dfg/DFGSSALoweringPhase.cpp
bool JSC::DFG::SSALoweringPhase::run()
Clobbered:
DFG OSR exit generation thunk
DFG OSR entry thunk
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/jit/AssemblyHelpersSpoolers.h
void JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute(const JSC::RegisterAtOffset &) [Op = JSC::AssemblyHelpers::StoreRegSpooler, RegType = JSC::ARM64Registers::RegisterID]
void JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::StoreRegSpooler>::execute(const JSC::RegisterAtOffset &) [Op = JSC::AssemblyHelpers::StoreRegSpooler, RegType = JSC::ARM64Registers::FPRegisterID]
void JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute(const JSC::RegisterAtOffset &) [Op = JSC::AssemblyHelpers::LoadRegSpooler, RegType = JSC::ARM64Registers::RegisterID]
void JSC::AssemblyHelpers::Spooler<JSC::AssemblyHelpers::LoadRegSpooler>::execute(const JSC::RegisterAtOffset &) [Op = JSC::AssemblyHelpers::LoadRegSpooler, RegType = JSC::ARM64Registers::FPRegisterID]
stack layout
Phase 
 changed the IR.
./dfg/DFGStackLayoutPhase.cpp
bool JSC::DFG::StackLayoutPhase::run()
static execution count estimation
./dfg/DFGStaticExecutionCountEstimationPhase.cpp
bool JSC::DFG::StaticExecutionCountEstimationPhase::run()
Unexpected EntrySwitch in CPS form.
store barrier clustering
./dfg/DFGStoreBarrierClusteringPhase.cpp
void JSC::DFG::(anonymous namespace)::StoreBarrierClusteringPhase::doBlock(JSC::DFG::BasicBlock *)
!node->origin.wasHoisted
node->child1().useKind() == KnownCellUse
fast store barrier insertion
./dfg/DFGStoreBarrierInsertionPhase.cpp
bool JSC::DFG::(anonymous namespace)::StoreBarrierInsertionPhase<JSC::DFG::(anonymous namespace)::PhaseMode::Fast>::run() [mode = JSC::DFG::(anonymous namespace)::PhaseMode::Fast]
m_graph.m_form != SSA
void JSC::DFG::(anonymous namespace)::StoreBarrierInsertionPhase<JSC::DFG::(anonymous namespace)::PhaseMode::Fast>::insertBarrier(unsigned int, JSC::DFG::Edge) [mode = JSC::DFG::(anonymous namespace)::PhaseMode::Fast]
isCell(base.useKind())
global store barrier insertion
bool JSC::DFG::(anonymous namespace)::StoreBarrierInsertionPhase<JSC::DFG::(anonymous namespace)::PhaseMode::Global>::run() [mode = JSC::DFG::(anonymous namespace)::PhaseMode::Global]
void JSC::DFG::(anonymous namespace)::StoreBarrierInsertionPhase<JSC::DFG::(anonymous namespace)::PhaseMode::Global>::insertBarrier(unsigned int, JSC::DFG::Edge) [mode = JSC::DFG::(anonymous namespace)::PhaseMode::Global]
strength reduction
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/text/StringBuilder.h
Optimizing compilation of 
 (for 
) did become ready.
) result: 
Dropping FTL code block 
 on the floor because the DFG code block 
 was jettisoned.
./dfg/DFGToFTLForOSREntryDeferredCompilationCallback.cpp
virtual void JSC::DFG::ToFTLForOSREntryDeferredCompilationCallback::compilationDidComplete(JSC::CodeBlock *, JSC::CodeBlock *, JSC::CompilationResult)
 -> 
Untyped
Int32
KnownInt32
Int52Rep
AnyInt
Number
RealNumber
DoubleRep
DoubleRepReal
DoubleRepAnyInt
Boolean
KnownBoolean
Cell
KnownCell
CellOrOther
Object
Array
Function
FinalObject
RegExpObject
PromiseObject
ProxyObject
DerivedArray
DateObject
MapObject
SetObject
WeakMapObject
WeakSetObject
DataViewObject
ObjectOrOther
StringIdent
String
StringOrOther
KnownString
KnownPrimitive
Symbol
AnyBigInt
HeapBigInt
BigInt32
StringObject
StringOrStringObject
NotStringVar
NotSymbol
NotCell
NotCellNorBigInt
NotDouble
NeitherDoubleNorHeapBigInt
NeitherDoubleNorHeapBigIntNorString
KnownOther
Other
Misc
./dfg/DFGUseKind.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::UseKind)
: validation failed: %s (%s:%d).
m_graph.isRoot(m_graph.block(0))
./dfg/DFGValidate.cpp
void JSC::DFG::(anonymous namespace)::Validate::validate()
m_graph.block(0) == m_graph.m_roots[0]
block->predecessors.isEmpty()
: validation failed: (%s = 
static_cast<Node*>(nullptr)
) == (%s = 
entrypoint->variablesAtHead.local(i)
) (%s:%d).
static_cast<Node*>(nullptr) == entrypoint->variablesAtHead.local(i)
block->isReachable
edge->hasResult()
edge->hasVariableAccessData(m_graph)
edge->variableAccessData() == node->variableAccessData()
edge->op() != SetLocal
m_myRefCounts.get(node)
node->adjustedRefCount()
m_myRefCounts.get(node) == node->adjustedRefCount()
node->op() == Phantom || node->op() == PhantomLocal || node->op() == Flush || node->op() == Check
foundTerminal
node->origin.isSet()
node->origin.semantic.isSet() == node->origin.forExit.isSet()
!(mayExit(m_graph, node) == Exits && !node->origin.exitOK)
!clobbersExitState(m_graph, previousNode) || !node->origin.exitOK || node->op() == ExitOK || node->origin.forExit != previousNode->origin.forExit
!(!previousNode->origin.exitOK && node->origin.exitOK) || node->op() == ExitOK || node->origin.forExit != previousNode->origin.forExit
!node->hasStructure() || !!node->structure().get()
!node->hasCellOperand() || node->cellOperand()->value().isCell()
!node->hasCellOperand() || !!node->cellOperand()->value()
!node->child3()
!node->child2()
uid->isSymbol() || !parseIndex(*uid)
canonicalResultRepresentation(node->result()) == canonicalResultRepresentation(node->child1()->result())
!!node->child1()
!"Bad use kind"
!!node->child2()
!!node->cellOperand()->value() && node->cellOperand()->value().isCell()
node->child1().useKind() == CellUse
!node->transition()->previous->dfgShouldWatch()
!variant.oldStructureForTransition()->dfgShouldWatch()
!variant.newStructure() || !variant.oldStructure()->dfgShouldWatch()
structure->classInfo() == JSFinalObject::info() || structure->classInfo() == JSArray::info()
!hasAnyArrayStorage(structure->indexingType())
node->isNumberConstant()
!!m_graph.m_vm.hasOwnPropertyCache()
type == Array::ArrayStorage || type == Array::SlowPutArrayStorage
inlineCallFrame->isVarargs()
node->arrayMode().type() != Array::String
node->vectorLengthHint() >= node->numChildren()
node->vectorLengthHint() >= node->castOperand<JSImmutableButterfly*>()->length()
node->arrayMode().isJSArrayWithOriginalStructure()
predecessors.size() == block->predecessors.size()
Before phase:
 in null Block 
 in Block 
edge.useKind() == DoubleRepUse || edge.useKind() == DoubleRepRealUse || edge.useKind() == DoubleRepAnyIntUse
void JSC::DFG::(anonymous namespace)::Validate::validateEdgeWithDoubleResultIfNecessary(JSC::DFG::Node *, JSC::DFG::Edge)
edge->hasInt52Result() == (edge.useKind() == Int52RepUse)
void JSC::DFG::(anonymous namespace)::Validate::validateEdgeWithInt52ResultIfNecessary(JSC::DFG::Node *, JSC::DFG::Edge)
shouldNotHaveTypeCheck(edge.useKind())
auto JSC::DFG::(anonymous namespace)::Validate::validate()::(anonymous class)::operator()(JSC::DFG::Edge) const
!m_graph.m_rootToArguments.isEmpty()
void JSC::DFG::(anonymous namespace)::Validate::validateCPS()
m_graph.m_rootToArguments.size() == m_graph.m_roots.size()
m_graph.m_roots.contains(root)
m_acceptableNodes.contains(edge.node())
edge->op() == SetLocal || edge->op() == SetArgumentDefinitely || edge->op() == SetArgumentMaybe || edge->op() == Phi
edge->op() == SetLocal || edge->op() == SetArgumentDefinitely || edge->op() == SetArgumentMaybe
prevBlock
prevNode
prevNode->shouldGenerate()
prevNode->op() == SetLocal || prevNode->op() == SetArgumentDefinitely || prevNode->op() == SetArgumentMaybe || prevNode->op() == Phi
!prevBlock->isInBlock(edge.node())
found
!block->variablesAtHead.tmp(i) || block->variablesAtHead.tmp(i)->accessesStack(m_graph)
!block->variablesAtTail.tmp(i) || block->variablesAtTail.tmp(i)->accessesStack(m_graph)
!block->variablesAtHead.argument(i) || block->variablesAtHead.argument(i)->accessesStack(m_graph)
!block->variablesAtTail.argument(i) || block->variablesAtTail.argument(i)->accessesStack(m_graph)
!block->variablesAtHead.local(i) || block->variablesAtHead.local(i)->accessesStack(m_graph)
!block->variablesAtTail.local(i) || block->variablesAtTail.local(i)->accessesStack(m_graph)
node->op() != Phi
node->origin.forExit.isSet()
nodesInThisBlock.contains(edge.node())
!phisInThisBlock.contains(edge.node())
!"unexpected node type in CPS"
edge->isInt32Constant()
node->structureSet().size() == 1
!hasInt32(structure->indexingType())
!hasDouble(structure->indexingType())
m_graph.m_fixpointState != FixpointNotConverged
getLocalPositions.operand(node->operand()) == notSet
node->child1()->op() == SetArgumentDefinitely || node->child1()->op() == Phi
node->child1()->op() == Phi || node->child1()->op() == SetLocal || node->child1()->op() == SetArgumentDefinitely || node->child1()->op() == SetArgumentMaybe
node->child1()->op() != SetArgumentMaybe
addResult.isNewEntry
!"Should not reach SetArgumentMaybe. GetLocal that has data flow that reaches a SetArgumentMaybe is invalid IR."
!"Unexpected node type."
block->isInPhis(child) || seenNodes.contains(child)
auto JSC::DFG::(anonymous namespace)::Validate::validateCPS()::(anonymous class)::operator()(const JSC::DFG::Edge &) const
getLocalPositions.operand(operand) < setLocalPositions.operand(operand)
void JSC::DFG::(anonymous namespace)::Validate::checkOperand(JSC::DFG::BasicBlock *, Operands<size_t> &, Operands<size_t> &, JSC::Operand)
 and 
m_graph.m_roots.size() == 1
void JSC::DFG::(anonymous namespace)::Validate::validateSSA()
m_graph.m_roots[0] == m_graph.block(0)
!m_graph.m_argumentFormats.isEmpty()
m_graph.m_rootToArguments.isEmpty()
entrypointIndex > 0
block->phis.isEmpty()
!node->origin.exitOK
!"bad node type for SSA"
node->child1()->isPhantomAllocation()
node->child1()->op() == PhantomCreateRest || node->child1()->op() == PhantomNewArrayBuffer
!child->isPhantomAllocation()
bitVector->get(i)
!node->child1()->isPhantomAllocation() || node->child1()->op() == PhantomCreateRest || node->child1()->op() == PhantomNewArrayBuffer
node->entrySwitchData()->cases.size() == m_graph.m_numberOfEntrypoints
node->entrypointIndex() < m_graph.m_numberOfEntrypoints
!edge->isPhantomAllocation()
auto JSC::DFG::(anonymous namespace)::Validate::validateSSA()::(anonymous class)::operator()(const JSC::DFG::Edge &) const
dominators.strictlyDominates(child->owner, block) || nodesInThisBlock.contains(child.node())
auto JSC::DFG::(anonymous namespace)::Validate::validateSSA()::(anonymous class)::operator()(JSC::DFG::Edge) const
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = (lambda at ./dfg/DFGValidate.cpp:443:21), WriteFunctor = (lambda at ./dfg/DFGValidate.cpp:444:21), DefFunctor = DefLambdaAdaptor, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
location.heap().kind() != SideState
auto JSC::DFG::(anonymous namespace)::Validate::validate()::(anonymous class)::operator()(JSC::DFG::HeapLocation, JSC::DFG::LazyNode) const
location.heap().kind() != World
location.heap().kind() != Heap
tier-up check injection
Phase 
 changed the IR.
./dfg/DFGTierUpCheckInjectionPhase.cpp
bool JSC::DFG::TierUpCheckInjectionPhase::run()
(null)
structure check hoisting
./dfg/DFGTypeCheckHoistingPhase.cpp
bool JSC::DFG::TypeCheckHoistingPhase::run()
unification
Weak
Strong
./dfg/DFGValueStrength.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::DFG::ValueStrength)
./dfg/DFGDoubleFormatState.h
JSC::DFG::DoubleFormatState JSC::DFG::mergeDoubleFormatStates(JSC::DFG::DoubleFormatState, JSC::DFG::DoubleFormatState)
ValueRep reduction
Phase 
 changed the IR.
./dfg/DFGValueRepReductionPhase.cpp
bool JSC::DFG::ValueRepReductionPhase::convertValueRepsToDouble()
auto JSC::DFG::ValueRepReductionPhase::convertValueRepsToDouble()::(anonymous class)::operator()(JSC::DFG::Node *) const
varargs forwarding
./dfg/DFGVarargsForwardingPhase.cpp
bool JSC::DFG::(anonymous namespace)::VarargsForwardingPhase::run()
void JSC::DFG::(anonymous namespace)::VarargsForwardingPhase::handleCandidate(JSC::DFG::BasicBlock *, unsigned int)
void JSC::DFG::clobberize(JSC::DFG::Graph &, JSC::DFG::Node *, const ReadFunctor &, const WriteFunctor &, const DefFunctor &, const ClobberTopFunctor &) [ReadFunctor = JSC::DFG::NoOpClobberize, WriteFunctor = (lambda at ./dfg/DFGVarargsForwardingPhase.cpp:301:21), DefFunctor = JSC::DFG::NoOpClobberize, ClobberTopFunctor = (lambda at ./dfg/DFGClobberize.h:45:47)]
./dfg/DFGVariableEventStream.cpp
unsigned int JSC::DFG::VariableEventStream::reconstruct(JSC::CodeBlock *, JSC::CodeOrigin, JSC::DFG::MinifiedGraph &, unsigned int, Operands<JSC::ValueRecovery> &, Vector<JSC::DFG::UndefinedOperandSpan> *) const [style = JSC::DFG::VariableEventStream::ReconstructionStyle::Combined]
./dfg/DFGValueSource.h
JSC::DFG::ValueSourceKind JSC::DFG::dataFormatToValueSourceKind(JSC::DataFormat)
virtual register allocation
Phase 
 changed the IR.
./dfg/DFGVirtualRegisterAllocationPhase.cpp
bool JSC::DFG::VirtualRegisterAllocationPhase::run()
watchpoint collection
%s%#16llx: %s
uxtb
uxth
uxtw
uxtx
sxtb
sxth
sxtw
sxtx
   .long  %08x
%c%u
adds
subs
reserved
sbfiz
ubfiz
sbfx
bfxil
ubfx
cbnz
   b.%-5.5s
csel
csinc
csinv
csneg
cset
csetm
cinc
cinv
rbit
rev16
rev32
pacia
pacib
pacda
pacdb
autia
autib
autda
autdb
paciza
pacizb
pacdza
pacdzb
autiza
autizb
autdza
autdzb
xpaci
xpacd
udiv
sdiv
pacga
madd
msub
smaddl
smsubl
smulh
umaddl
umsubl
umulh
mneg
smull
smnegl
umull
umnegl
dpcs1
dpcs2
dpcs3
extr
#0.0
fmov
fabs
fneg
fsqrt
fcvt
frintn
frintp
frintm
frintz
frinta
frintx
frinti
fmul
fdiv
fadd
fsub
fmax
fmin
fmaxnm
fminnm
fnmul
fcvtzs
fcvtzu
scvtf
ucvtf
fcvtns
fcvtnu
fcvtas
fcvtau
fcvtps
fcvtpu
fcvtms
fcvtmu
fjcvtzs
V%u.D[1]
spsel
daifset
daifclr
S%u_%u_C%u_C%u_%u
ctr_el0
nzcv
daif
fpcr
fpsr
tpidr_el0
tpidrr0_el0
  ; 
yield
sevl
xpaclri
pacia1716
pacib1716
autia1716
autib1716
paciaz
paciasp
pacibz
pacibsp
autiaz
autiasp
autibz
autibsp
hint
clrex
oshld
oshst
nshld
nshst
ishld
ishst
stxrb
stlxrb
ldxrb
ldaxrb
stlrb
ldarb
stxrh
stlxrh
ldxrh
ldaxrh
stlrh
ldarh
stxr
stlxr
stxp
stlxp
ldxr
ldaxr
ldxp
ldaxp
stlr
ldar
strb
ldrb
ldrsb
strh
ldrh
ldrsh
ldrsw
sttrb
ldtrb
ldtrsb
sttrh
ldtrh
ldtrsh
sttr
ldtr
ldtrsw
sturb
ldurb
ldursb
stur
ldur
sturh
ldurh
ldursh
ldursw
prfum
lsl 
ldraa
ldrab
ldaddb
ldaddlb
ldaddab
ldaddalb
ldaddh
ldaddlh
ldaddah
ldaddalh
ldadd
ldaddl
ldadda
ldaddal
ldclrb
ldclrlb
ldclrab
ldclralb
ldclrh
ldclrlh
ldclrah
ldclralh
ldclr
ldclrl
ldclra
ldclral
ldeorb
ldeorlb
ldeorab
ldeoralb
ldeorh
ldeorlh
ldeorah
ldeoralh
ldeor
ldeorl
ldeora
ldeoral
ldsetb
ldsetlb
ldsetab
ldsetalb
ldseth
ldsetlh
ldsetah
ldsetalh
ldset
ldsetl
ldseta
ldsetal
swpb
swplb
swpab
swpalb
swph
swplh
swpah
swpalh
swpl
swpa
swpal
casb
caslb
casab
casalb
cash
caslh
casah
casalh
casl
casa
casal
ldpsw
ands
bics
movn
movz
movk
tbnz
eret
drps
braaz
brabz
blraaz
blrabz
retaa
retab
eretaa
eretab
braa
brab
blraa
blrab
Asynchronous Disassembler
   %-9.9s
0x%lx
#0x%x
fcmpe
fcmp
fcsel
#0x%llx
#%lli
lsl #%u
0x%x-0x%x
./ftl/FTLAbstractHeap.cpp
void JSC::FTL::AbstractHeap::changeParent(JSC::FTL::AbstractHeap *)
Heap does not have range: 
void JSC::FTL::AbstractHeap::badRangeError() const
jscRoot
typedArrayProperties
JSCellHeaderAndNamedProperties
ArrayBuffer_data
ArrayStorage_numValuesInVector
Butterfly_arrayBuffer
Butterfly_publicLength
Butterfly_vectorLength
CallFrame_callerFrame
ClassInfo_parentClass
DateInstance_internalNumber
DateInstance_data
DateInstanceData_gregorianDateTimeCachedForMS
DateInstanceData_gregorianDateTimeUTCCachedForMS
DateInstanceData_cachedGregorianDateTime_year
DateInstanceData_cachedGregorianDateTimeUTC_year
DateInstanceData_cachedGregorianDateTime_month
DateInstanceData_cachedGregorianDateTimeUTC_month
DateInstanceData_cachedGregorianDateTime_monthDay
DateInstanceData_cachedGregorianDateTimeUTC_monthDay
DateInstanceData_cachedGregorianDateTime_weekDay
DateInstanceData_cachedGregorianDateTimeUTC_weekDay
DateInstanceData_cachedGregorianDateTime_hour
DateInstanceData_cachedGregorianDateTimeUTC_hour
DateInstanceData_cachedGregorianDateTime_minute
DateInstanceData_cachedGregorianDateTimeUTC_minute
DateInstanceData_cachedGregorianDateTime_second
DateInstanceData_cachedGregorianDateTimeUTC_second
DateInstanceData_cachedGregorianDateTime_utcOffsetInMinute
DateInstanceData_cachedGregorianDateTimeUTC_utcOffsetInMinute
DirectArguments_callee
DirectArguments_length
DirectArguments_minCapacity
DirectArguments_mappedArguments
DirectArguments_modifiedArgumentsDescriptor
FunctionExecutable_rareData
FunctionExecutableRareData_asString
FunctionRareData_allocator
FunctionRareData_structure
FunctionRareData_prototype
FunctionRareData_allocationProfileWatchpointSet
FunctionRareData_executable
FunctionRareData_internalFunctionAllocationProfile_structure
FunctionRareData_boundFunctionStructure
FunctionRareData_allocationProfileClearingWatchpoint
GetterSetter_getter
GetterSetter_setter
JSArrayBufferView_length
JSArrayBufferView_mode
JSArrayBufferView_vector
JSBigInt_length
JSCell_cellState
JSCell_header
JSCell_indexingTypeAndMisc
JSCell_structureID
JSCell_typeInfoFlags
JSCell_typeInfoType
JSCell_usefulBytes
JSFunction_executableOrRareData
JSFunction_scope
JSGlobalObject_regExpGlobalData_cachedResult_lastRegExp
JSGlobalObject_regExpGlobalData_cachedResult_lastInput
JSGlobalObject_regExpGlobalData_cachedResult_result_start
JSGlobalObject_regExpGlobalData_cachedResult_result_end
JSGlobalObject_regExpGlobalData_cachedResult_reified
JSObject_butterfly
JSPropertyNameEnumerator_cachedInlineCapacity
JSPropertyNameEnumerator_cachedPropertyNamesVector
JSPropertyNameEnumerator_cachedStructureID
JSPropertyNameEnumerator_endGenericPropertyIndex
JSPropertyNameEnumerator_endStructurePropertyIndex
JSPropertyNameEnumerator_indexLength
JSPropertyNameEnumerator_flags
JSRopeString_flags
JSRopeString_length
JSRopeString_fiber0
JSRopeString_fiber1
JSRopeString_fiber2
JSScope_next
JSSymbolTableObject_symbolTable
NativeExecutable_asString
RegExpObject_regExpAndFlags
RegExpObject_lastIndex
ShadowChicken_Packet_callee
ShadowChicken_Packet_frame
ShadowChicken_Packet_callerFrame
ShadowChicken_Packet_thisValue
ShadowChicken_Packet_scope
ShadowChicken_Packet_codeBlock
ShadowChicken_Packet_callSiteIndex
ScopedArguments_overrodeThings
ScopedArguments_scope
ScopedArguments_storage
ScopedArguments_table
ScopedArguments_totalLength
ScopedArgumentsTable_arguments
ScopedArgumentsTable_length
StringImpl_data
StringImpl_hashAndFlags
StringImpl_length
Structure_classInfo
Structure_globalObject
Structure_indexingModeIncludingHistory
Structure_inlineCapacity
Structure_outOfLineTypeFlags
Structure_previousOrRareData
Structure_prototype
Structure_structureID
StructureRareData_cachedKeys
StructureRareData_cachedGetOwnPropertyNames
StructureRareData_cachedPropertyNameEnumeratorAndFlag
HashMapImpl_capacity
HashMapImpl_buffer
HashMapImpl_head
HashMapBucket_value
HashMapBucket_key
HashMapBucket_next
WeakMapImpl_capacity
WeakMapImpl_buffer
WeakMapBucket_value
WeakMapBucket_key
Symbol_symbolImpl
ArrayStorage_vector
CompleteSubspace_allocatorForSizeStep
DirectArguments_storage
JSLexicalEnvironment_variables
JSPropertyNameEnumerator_cachedPropertyNamesVectorContents
JSInternalFieldObjectImpl_internalFields
ScopedArguments_Storage_storage
WriteBarrierBuffer_bufferContents
characters8
characters16
indexedInt32Properties
indexedDoubleProperties
indexedContiguousProperties
scopedArgumentsTableArguments
singleCharacterStrings
structureTable
variables
HasOwnPropertyCache
properties
absolute
./ftl/FTLAbstractHeapRepository.cpp
JSC::FTL::AbstractHeapRepository::AbstractHeapRepository()
Abstract Heap Repository:
FTL rejecting 
 because it's too big.
 because it is marked as never FTL compile.
FTL rejecting node in 
 because of bad use kind: 
 in node:
FTL 
./ftl/FTLCompile.cpp
void JSC::FTL::compile(JSC::FTL::State &, Safepoint::Result &)
Unwind info for 
localsOffset = 
 for stack slot: 
Generated FTL DFG IR for 
    FTL B3/Air Disassembly:
 as 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/b3/B3Procedure.h
JSC::B3::PCToOriginMap JSC::B3::Procedure::releasePCToOriginMap()
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/LinkBuffer.h
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)10924, T = JSC::AssemblerLabel]
 => 
./ftl/FTLExitValue.cpp
JSC::DataFormat JSC::FTL::ExitValue::dataFormat() const
Argument(
Constant(
InJSStack:
InJSStackAsInt32:
InJSStackAsInt52:
InJSStackAsDouble:
Materialize(
void JSC::FTL::ExitValue::dumpInContext(WTF::PrintStream &, JSC::DumpContext *) const
Destroying FTL JIT code at 
./ftl/FTLJITCode.cpp
virtual JITCode::CodePtr<JSEntryPtrTag> JSC::FTL::JITCode::addressForCall(JSC::ArityCheckMode)
virtual void *JSC::FTL::JITCode::dataAddressAtOffset(size_t)
virtual unsigned int JSC::FTL::JITCode::offsetOf(void *)
virtual bool JSC::FTL::JITCode::contains(void *)
virtual JSC::RegisterSet JSC::FTL::JITCode::liveRegistersToPreserveAtExceptionHandlingCallSite(JSC::CodeBlock *, JSC::CallSiteIndex)
CodeRef
./ftl/FTLLazySlowPath.cpp
void JSC::FTL::LazySlowPath::generate(JSC::CodeBlock *)
Lazy slow path call stub
./ftl/FTLLink.cpp
void JSC::FTL::link(JSC::FTL::State &)
FTL B3 code for %s
FTL entrypoint thunk for %s with B3 generated code at %p
./ftl/FTLLocation.cpp
static JSC::FTL::Location JSC::FTL::Location::forValueRep(const JSC::B3::ValueRep &)
Unrecognized location: 
void JSC::FTL::Location::restoreInto(JSC::MacroAssembler &, char *, JSC::GPRReg, unsigned int) const
JSC::GPRReg JSC::FTL::Location::directGPR() const
Unprocessed
Indirect
void WTF::printInternal(WTF::PrintStream &, JSC::FTL::Location::Kind)
FTL OSR from 
    OSR failed because we don't have an entrypoint for 
; ours is for 
    Values at entry: 
Unknown flush format for argument during FTL osr entry: 
./ftl/FTLOSREntry.cpp
void *JSC::FTL::prepareOSREntry(JSC::VM &, JSC::CallFrame *, JSC::CodeBlock *, JSC::CodeBlock *, JSC::BytecodeIndex, unsigned int)
Mismatch between reconstructed values and the value on the stack for argument arg
    Value on stack: 
    Reconstructed value: 
    Entry will succeed, going to address 
Compiling OSR exit with exitID = 
./ftl/FTLOSRExitCompiler.cpp
void *JSC::FTL::operationCompileFTLOSRExit(JSC::CallFrame *, unsigned int)
    Owning block: 
    Origin: 
    Origin for exit profile: 
    Current call site index: 
    Exit is exception handler: 
    Is unwind handler: 
    Exit values: 
    Value reps: 
    Materializations:
./ftl/FTLOperations.cpp
void JSC::FTL::operationPopulateObjectInOSR(JSC::JSGlobalObject *, JSC::FTL::ExitTimeObjectMaterialization *, JSC::EncodedJSValue *, JSC::EncodedJSValue *)
JSC::JSCell *JSC::FTL::operationMaterializeObjectInOSR(JSC::JSGlobalObject *, JSC::FTL::ExitTimeObjectMaterialization *, JSC::EncodedJSValue *)
Bounds Check Eimination error found @ D@
: AssertInBounds(index D@
, bounds D@
void JSC::FTL::compileStub(JSC::VM &, unsigned int, JSC::FTL::JITCode *, JSC::FTL::OSRExit &, JSC::CodeBlock *)
FTL OSR exit #%u (D@%u, %s, %s) from %s, with operands = %s
void JSC::FTL::reboxAccordingToFormat(JSC::DataFormat, JSC::AssemblyHelpers &, JSC::GPRReg, JSC::GPRReg, JSC::GPRReg)
void JSC::FTL::compileRecovery(JSC::CCallHelpers &, const JSC::FTL::ExitValue &, const FixedVector<B3::ValueRep> &, char *, const HashMap<JSC::FTL::ExitTimeObjectMaterialization *, JSC::EncodedJSValue *> &)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
./ftl/FTLOutput.cpp
JSC::FTL::LValue JSC::FTL::Output::store(JSC::FTL::LValue, JSC::FTL::TypedPointer, JSC::FTL::Output::StoreType)
void JSC::FTL::Output::entrySwitch(const Vector<JSC::FTL::LBasicBlock> &)
<usedRegisters = 
, offset = 
, indirectOffset = 
, callTarget = 
, argumentRegisters = 
./ftl/FTLState.cpp
JSC::FTL::State::State(JSC::DFG::Graph &)
Generated 
 code for 
DFG     
b3            
Air               
asm                 
FTL OSR exit generation thunk
FTL lazy slow path generation thunk
FTL slow path call thunk for %s
./heap/AlignedMemoryAllocator.cpp
void JSC::AlignedMemoryAllocator::registerDirectory(JSC::Heap &, JSC::BlockDirectory *)
void JSC::AlignedMemoryAllocator::registerSubspace(JSC::Subspace *)
./heap/BlockDirectory.cpp
void JSC::BlockDirectory::prepareForAllocation()
./heap/CodeBlockSet.cpp
bool JSC::CodeBlockSet::contains(const WTF::AbstractLocker &, void *)
void JSC::CodeBlockSet::add(JSC::CodeBlock *)
void JSC::CodeBlockSet::remove(JSC::CodeBlock *)
Eden
Full
./heap/CollectionScope.cpp
const char *JSC::collectionScopeName(JSC::CollectionScope)
./heap/CollectorPhase.cpp
bool JSC::worldShouldBeSuspended(JSC::CollectorPhase)
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/SinglyLinkedListWithTail.h
void WTF::SinglyLinkedListWithTail<JSC::BlockDirectory>::append(SetNextFunc &&, T *) [T = JSC::BlockDirectory, SetNextFunc = std::__mem_fn<void (JSC::BlockDirectory::*)(JSC::BlockDirectory *)>]
void WTF::SinglyLinkedListWithTail<JSC::Subspace>::append(SetNextFunc &&, T *) [T = JSC::Subspace, SetNextFunc = std::__mem_fn<void (JSC::Subspace::*)(JSC::Subspace *)>]
Live
Allocated
CanAllocateButNotEmpty
Destructible
Unswept
MarkingNotEmpty
MarkingRetired
./heap/CompleteSubspace.cpp
void *JSC::CompleteSubspace::allocateSlow(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
FATAL: attampting to allocate small object using large allocation.
Requested allocation size: 
void *JSC::CompleteSubspace::tryAllocateSlow(JSC::VM &, size_t, JSC::GCDeferralContext *)
void *JSC::CompleteSubspace::reallocatePreciseAllocationNonVirtual(JSC::VM &, JSC::HeapCell *, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
NeedsDestruction
DoesNotNeedDestruction
./heap/DestructionMode.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::DestructionMode)
FastMalloc
{head = 
, secret = 
, payloadEnd = 
, remaining = 
, originalSize = 
./heap/ConservativeRoots.cpp
void JSC::ConservativeRoots::genericAddSpan(void *, void *, MarkHook &) [MarkHook = JSC::DummyMarkHook]
void JSC::ConservativeRoots::genericAddSpan(void *, void *, MarkHook &) [MarkHook = JSC::CompositeMarkHook]
./heap/GCConductor.cpp
const char *JSC::gcConductorShortName(JSC::GCConductor)
None
Basic
Verbose
./heap/GCLogging.cpp
static const char *JSC::GCLogging::levelAsString(JSC::GCLogging::Level)
Primitive Gigacage Auxiliary
JSValue Gigacage Auxiliary
ImmutableButterfly Gigacage JSCellWithIndexingHeader
Variable Sized JSCell
JSDestructibleObject
Isolated JSArray Space
Isolated JSBigInt Space
Isolated JSCallee Space
Isolated ClonedArguments Space
Isolated CustomGetterSetter Space
Isolated DateInstance Space
Isolated DOMAttributeGetterSetter Space
Isolated Exception Space
Isolated ExecutableToCodeBlockEdge Space
Isolated JSFunction Space
Isolated GetterSetter Space
Isolated JSGlobalLexicalEnvironment Space
Isolated InternalFunction Space
Isolated JSProxy Space
Isolated NativeExecutable Space
Isolated NumberObject Space
Isolated JSNonFinalObject Space
Isolated JSPromise Space
Isolated JSPropertyNameEnumerator Space
Isolated PropertyTable Space
Isolated RegExp Space
Isolated RegExpObject Space
Isolated JSRopeString Space
Isolated ScopedArguments Space
Isolated SparseArrayValueMap Space
Isolated JSString Space
Isolated StringObject Space
Isolated StructureChain Space
Isolated StructureRareData Space
Isolated Structure Space
Isolated BrandedStructure Space
Isolated SymbolTable Space
Isolated CodeBlock Space
Isolated FunctionExecutable Space
Isolated ProgramExecutable Space
Isolated UnlinkedFunctionExecutable Space
[GC<
>: shutdown 
./heap/Heap.cpp
void JSC::Heap::lastChanceToFinalize()
...]
FATAL: Shared collector mark stack not empty! It has 
 elements.
FATAL: Shared mutator mark stack not empty! It has 
void JSC::Heap::assertMarkStacksEmpty()
void JSC::Heap::endMarking()
void JSC::Heap::deleteAllCodeBlocks(JSC::DeleteAllCodeEffort)
void JSC::Heap::deleteAllUnlinkedCodeBlocks(JSC::DeleteAllCodeEffort)
void JSC::Heap::addToRememberedSet(const JSC::JSCell *)
Full sweep: 
kb, 
void JSC::Heap::collect(JSC::Synchronousness, JSC::GCRequest)
void JSC::Heap::collectNow(JSC::Synchronousness, JSC::GCRequest)
bool JSC::Heap::shouldCollectInCollectorThread(const WTF::AbstractLocker &)
void JSC::Heap::collectInCollectorThread()
void JSC::Heap::checkConn(JSC::GCConductor)
bool JSC::Heap::runBeginPhase(JSC::GCConductor)
>: START 
Collection scope already set during GC: 
Fatal: SlotVisitor should think that GC should terminate before constraint solving, but it does not think this.
visitor.isEmpty(): 
visitor.collectorMarkStack().isEmpty(): 
visitor.mutatorMarkStack().isEmpty(): 
m_numberOfActiveParallelMarkers: 
m_sharedCollectorMarkStack->isEmpty(): 
m_sharedMutatorMarkStack->isEmpty(): 
visitor.didReachTermination(): 
bool JSC::Heap::runFixpointPhase(JSC::GCConductor)
kb (
) o=
ms (max 
)...]
bool JSC::Heap::runConcurrentPhase(JSC::GCConductor)
), cycle 
ms END]
GC END!
FATAL: world already stopped.
void JSC::Heap::stopThePeriphery(JSC::GCConductor)
Fatal: collector does not believe that the world is stopped.
void JSC::Heap::resumeThePeriphery()
bool JSC::Heap::stopTheMutator()
Fatal: hasAccess = 
, stopped = 
void JSC::Heap::resumeTheMutator()
Fatal: mutator has the conn.
void JSC::Heap::stopIfNecessarySlow()
bool JSC::Heap::stopIfNecessarySlow(unsigned int)
void JSC::Heap::acquireAccessSlow()
FATAL: Attempting to release access but the mutator does not have access.
void JSC::Heap::releaseAccessSlow()
FATAL: Attempting to release access but the mutator is stopped.
bool JSC::Heap::relinquishConn(unsigned int)
bool JSC::Heap::handleNeedFinalize(unsigned int)
>: finalize 
Heap::Ticket JSC::Heap::requestCollection(JSC::GCRequest)
FullCollection, 
EdenCollection, 
void JSC::Heap::didFinishCollection()
Conservative Scan
Misc Small Roots
Strong Handles
Weak Sets
JIT Worklist
CodeBlocks
>: starting 
JSC DEBUG Continuous GC
void JSC::Heap::preventCollection()
void JSC::Heap::verifyGC()
Isolated JSAPIGlobalObject Space
Isolated JSAPIValueWrapper Space
Isolated JSArrayBuffer Space
Isolated JSArrayIterator Space
Isolated JSAsyncGenerator Space
Isolated JSBigInt64Array Space
Isolated BigIntObject Space
Isolated JSBigUint64Array Space
Isolated BooleanObject Space
Isolated JSBoundFunction Space
Isolated JSCallbackConstructor Space
Isolated JSCallbackObject<JSGlobalObject> Space
Isolated JSCallbackFunction Space
Isolated JSCallbackObject<JSNonFinalObject> Space
Isolated JSCustomGetterFunction Space
Isolated JSCustomSetterFunction Space
Isolated JSDataView Space
Isolated DebuggerScope Space
Isolated ErrorInstance Space
Isolated JSFloat32Array Space
Isolated JSFloat64Array Space
Isolated FunctionRareData Space
Isolated JSGenerator Space
Isolated JSGlobalObject Space
Isolated Inspector::JSInjectedScriptHost Space
Isolated JSInt8Array Space
Isolated JSInt16Array Space
Isolated JSInt32Array Space
Isolated Inspector::JSJavaScriptCallFrame Space
Isolated JSModuleRecord Space
Isolated JSMap::BucketType Space
Isolated JSMapIterator Space
Isolated JSMap Space
Isolated JSModuleNamespaceObject Space
Isolated JSNativeStdFunction Space
Isolated ProxyObject Space
Isolated ProxyRevoke Space
Isolated ScopedArgumentsTable Space
Isolated JSScriptFetchParameters Space
Isolated JSScriptFetcher Space
Isolated JSSet::BucketType Space
Isolated JSSetIterator Space
Isolated JSSet Space
Isolated ShadowRealmObject Space
Isolated StrictEvalActivation Space
Isolated JSStringIterator Space
Isolated JSSourceCode Space
Isolated Symbol Space
Isolated SymbolObject Space
Isolated JSTemplateObjectDescriptor Space
Isolated TemporalCalendar Space
Isolated TemporalDuration Space
Isolated TemporalInstant Space
Isolated TemporalPlainTime Space
Isolated TemporalTimeZone Space
Isolated JSUint8Array Space
Isolated JSUint8ClampedArray Space
Isolated JSUint16Array Space
Isolated JSUint32Array Space
Isolated UnlinkedEvalCodeBlock Space
Isolated UnlinkedFunctionCodeBlock Space
Isolated UnlinkedModuleProgramCodeBlock Space
Isolated UnlinkedProgramCodeBlock Space
Isolated JSWeakMap Space
Isolated JSWeakSet Space
Isolated JSWeakObjectRef Space
Isolated JSWithScope Space
Isolated JSFinalizationRegistry Space
Isolated JSCallbackObject<JSAPIWrapperObject> Space
Isolated ObjCCallbackFunction Space
Isolated IntlCollator Space
Isolated IntlDateTimeFormat Space
Isolated IntlDisplayNames Space
Isolated IntlListFormat Space
Isolated IntlLocale Space
Isolated IntlNumberFormat Space
Isolated IntlPluralRules Space
Isolated IntlRelativeTimeFormat Space
Isolated IntlSegmentIterator Space
Isolated IntlSegmenter Space
Isolated IntlSegments Space
Isolated JSToWasmICCallee Space
Isolated JSWebAssemblyException Space
Isolated WebAssemblyFunction Space
Isolated JSWebAssemblyGlobal Space
Isolated JSWebAssemblyInstance Space
Isolated JSWebAssemblyMemory Space
Isolated JSWebAssemblyModule Space
Isolated WebAssemblyModuleRecord Space
Isolated JSWebAssemblyTable Space
Isolated JSWebAssemblyTag Space
Isolated WebAssemblyWrapperFunction Space
Isolated EvalExecutable Space
Isolated ModuleProgramExecutable Space
Primitive
JSValue
JSC Heap Collector Thread
./heap/MarkedBlockInlines.h
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc]
: marks not empty!
Block lock is held: 
Marking version of block: 
Marking version of heap: 
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = false, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::HasNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::IsoInlinedHeapCellType<JSC::JSString>::DestroyFunc]
auto JSC::Heap::lastChanceToFinalize()::(anonymous class)::operator()(const WTF::AbstractLocker &) const
InferredValue clean-up during GC
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/WeakMapImplInlines.h
void JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::finalizeUnconditionally(JSC::VM &) [WeakMapBucketType = JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>]
void JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::finalizeUnconditionally(JSC::VM &) [WeakMapBucketType = JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>]
FATAL: Visitor 
 is not empty!
[unknown]
auto JSC::Heap::runBeginPhase(JSC::GCConductor)::(anonymous class)::operator()() const
void WTF::Deque<JSC::GCRequest, 0>::removeFirst() [T = JSC::GCRequest, inlineCapacity = 0]
auto JSC::Heap::collectInMutatorThread()::(anonymous class)::operator()(JSC::CurrentThreadState &) const
./heap/AbstractSlotVisitorInlines.h
Sampling Profiler data:
JIT Worklists:
GC Verifier: ERROR cell 
 was not marked
auto JSC::Heap::verifyGC()::(anonymous class)::operator()(JSC::HeapCell *) const
JSCell
JSCellWithIndexingHeader
Auxiliary
./heap/HeapCell.cpp
void WTF::printInternal(WTF::PrintStream &, HeapCell::Kind)
Cell %p is a root but no root marking reason was supplied
<root>
{"version":2
,"type":"
,"nodes":[
0,0,0,0,0,"0x0","0x0"
,"nodeClassNames":[
,"edges":[
,"edgeTypes":["
,"edgeNames":[
,"roots":[
Failed to find snapshot node for cell %p
,"labels":[
Inspector
GCDebugging
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::DefaultDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::DefaultDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::DefaultDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::DefaultDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = false, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::HasNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::DefaultDestroyFunc]
Heap Helper Thread
Failed to find node for from-edge cell %p
Failed to find node for to-edge cell %p
./heap/IsoAlignedMemoryAllocator.cpp
virtual void *JSC::IsoAlignedMemoryAllocator::tryAllocateAlignedMemory(size_t, size_t)
virtual void JSC::IsoAlignedMemoryAllocator::freeAlignedMemory(void *)
Iso(
virtual void *JSC::IsoAlignedMemoryAllocator::tryReallocateMemory(void *, size_t)
./heap/IsoCellSet.cpp
void JSC::IsoCellSet::sweepToFreeList(MarkedBlock::Handle *)
FATAL: for block index 
Blocks with bits says: 
Bits says: 
./heap/JITStubRoutineSet.cpp
void JSC::JITStubRoutineSet::add(JSC::GCAwareJITStubRoutine *)
FATAL: 
->~LocalAllocator has non-empty free-list.
->~LocalAllocator has non-null current block.
->~LocalAllocator has non-null last active block.
./heap/LocalAllocator.cpp
JSC::LocalAllocator::~LocalAllocator()
void *JSC::LocalAllocator::allocateSlowCase(JSC::Heap &, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
void *JSC::LocalAllocator::tryAllocateWithoutCollecting()
void *JSC::LocalAllocator::allocateIn(MarkedBlock::Handle *)
./heap/MachineStackMarker.cpp
bool JSC::MachineThreads::tryCopyOtherThreadStacks(const WTF::AbstractLocker &, void *, size_t, size_t *, WTF::Thread &)
JavaScript garbage collection encountered an invalid thread (err 0x%x): Thread [%d/%d: %p].
./heap/AllocatingScope.h
JSC::AllocatingScope::AllocatingScope(JSC::Heap &)
JSC::AllocatingScope::~AllocatingScope()
void JSC::copyMemory(void *, const void *, size_t)
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::IsoHeapCellType]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::IsoHeapCellType]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::IsoHeapCellType]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::IsoHeapCellType]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = false, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::HasNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::IsoHeapCellType]
auto JSC::LocalAllocator::tryAllocateIn(MarkedBlock::Handle *)::(anonymous class)::operator()() const
./heap/MarkStack.cpp
void JSC::MarkStackArray::transferTo(JSC::MarkStackArray &)
size_t JSC::MarkStackArray::transferTo(JSC::MarkStackArray &, size_t)
Mark Stack Merging
./heap/MarkedBlock.cpp
void JSC::MarkedBlock::Handle::unsweepWithNoNewlyAllocated()
void JSC::MarkedBlock::Handle::didAddToDirectory(JSC::BlockDirectory *, unsigned int)
->sweep: block is free-listed.
void JSC::MarkedBlock::Handle::sweep(JSC::FreeList *)
->sweep: block is allocated.
./heap/MarkedSpace.cpp
void JSC::MarkedSpace::sweepPreciseAllocations()
void JSC::MarkedSpace::prepareForConservativeScan()
./heap/MarkingConstraintSolver.cpp
void JSC::MarkingConstraintSolver::execute(JSC::MarkingConstraintSolver::SchedulerPreference, ScopedLambda<std::optional<unsigned int> ()>)
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = (lambda at ./heap/MarkedBlock.cpp:439:260)]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = (lambda at ./heap/MarkedBlock.cpp:442:254)]
Eden
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = false, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::HasNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = (lambda at ./heap/MarkedBlock.cpp:465:217)]
Block size: 
Footer size: 
    Marked block payload size: 
    Next size class as a double: 
    Next size class as bytes: 
Vector<size_t> JSC::(anonymous namespace)::sizeClasses()
    Size class: 
    Possibly better size class: 
    Original wastage: 
, new wastage: 
    Choosing size class: 
JSC Heap MarkedSpace size class dump: 
Adding JSC MarkedSpace size class: 
auto JSC::(anonymous namespace)::sizeClasses()::(anonymous class)::operator()(size_t) const
auto JSC::MarkedSpace::initializeSizeClassForStepSize()::(anonymous class)::operator()()::(anonymous class)::operator()(size_t) const
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/SinglyLinkedListWithTail.h
void WTF::SinglyLinkedListWithTail<JSC::BlockDirectory>::append(SetNextFunc &&, T *) [T = JSC::BlockDirectory, SetNextFunc = std::__mem_fn<void (JSC::BlockDirectory::*)(JSC::BlockDirectory *)>]
./heap/PreciseAllocation.cpp
static JSC::PreciseAllocation *JSC::PreciseAllocation::createForLowerTier(JSC::Heap &, size_t, JSC::Subspace *, uint8_t)
None
ConservativeScan
ExecutableToCodeBlockEdges
ExternalRememberedSet
StrongReferences
ProtectedValues
MarkedJSValueRefArray
MarkListSet
VMExceptions
StrongHandles
Debugger
JITStubRoutines
WeakMapSpace
WeakSets
Output
JITWorkList
CodeBlocks
DOMGCOutput
./heap/SlotVisitor.cpp
void JSC::SlotVisitor::reset()
FATAL: attempting to drain when not in parallel mode.
void JSC::SlotVisitor::drain(WTF::MonotonicTime)
size_t JSC::SlotVisitor::performIncrementOfDraining(size_t)
SlotVisitor::SharedDrainResult JSC::SlotVisitor::drainFromShared(JSC::SlotVisitor::SharedDrainMode, WTF::MonotonicTime)
FATAL: Attempting to donate when not in parallel mode.
void JSC::SlotVisitor::donate()
GC visit race: 
Collector: [
], Mutator: [
virtual void JSC::SlotVisitor::addParallelConstraintTask(RefPtr<SharedTask<void (JSC::AbstractSlotVisitor &)>>)
virtual void JSC::SlotVisitor::addParallelConstraintTask(RefPtr<SharedTask<void (JSC::SlotVisitor &)>>)
./heap/SpaceTimeMutatorScheduler.cpp
virtual void JSC::SpaceTimeMutatorScheduler::beginCollection()
virtual void JSC::SpaceTimeMutatorScheduler::didStop()
virtual void JSC::SpaceTimeMutatorScheduler::willResume()
virtual WTF::MonotonicTime JSC::SpaceTimeMutatorScheduler::timeToStop()
virtual WTF::MonotonicTime JSC::SpaceTimeMutatorScheduler::timeToResume()
%.0lf
%.3lf
./heap/StochasticSpaceTimeMutatorScheduler.cpp
virtual void JSC::StochasticSpaceTimeMutatorScheduler::beginCollection()
kb h=
virtual void JSC::StochasticSpaceTimeMutatorScheduler::didStop()
virtual void JSC::StochasticSpaceTimeMutatorScheduler::willResume()
virtual WTF::MonotonicTime JSC::StochasticSpaceTimeMutatorScheduler::timeToStop()
virtual WTF::MonotonicTime JSC::StochasticSpaceTimeMutatorScheduler::timeToResume()
GC scan found corrupt object: structureID is zero!
GC scan found object in bad state: structureID is nuked!
GC type: 
Object at: 
Structure ID: 
 (0x
Structure ID table size: 
Object contents:
0x%016llx
Is marked: 
Is newly allocated: 
Block: 
Is marked raw: 
Marking version: 
Heap marking version: 
Is newly allocated raw: 
Newly allocated version: 
Heap newly allocated version: 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
void JSC::StructureIDTable::validate(JSC::StructureID)
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
./heap/SynchronousStopTheWorldMutatorScheduler.cpp
virtual void JSC::SynchronousStopTheWorldMutatorScheduler::beginCollection()
virtual void JSC::SynchronousStopTheWorldMutatorScheduler::endCollection()
./heap/VerifierSlotVisitor.cpp
virtual void JSC::VerifierSlotVisitor::addParallelConstraintTask(RefPtr<SharedTask<void (JSC::SlotVisitor &)>>)
virtual void JSC::VerifierSlotVisitor::didFindOpaqueRoot(void *)
void JSC::VerifierSlotVisitor::drain()
virtual void JSC::VerifierSlotVisitor::dump(WTF::PrintStream &) const
Verifier collector stack: 
was NOT
In the real GC, cell 
 marked.
Marker data is not available for cell 
In the verifier GC, cell 
 was visited
void JSC::VerifierSlotVisitor::dumpMarkerData(JSC::HeapCell *)
In the real GC, opaque root 
 added to the heap's opaque roots.
Marker data is not available for opaque root 
In the verifier GC, opaque root 
 was added
 via cell 
 at:
 via opaque root 
 from scan of 
 roots at:
bool JSC::VerifierSlotVisitor::testAndSetMarked(JSC::MarkedBlock &, JSC::HeapCell *)
void JSC::VerifierSlotVisitor::visitChildren(const JSC::JSCell *)
JSC::AbstractSlotVisitor::ReferrerContext::ReferrerContext(JSC::AbstractSlotVisitor &, AbstractSlotVisitor::OpaqueRootTag)
console
<message collected>
/\*[#@][ 
]sourceMappingURL=[ 
]*([^\s'"]*)[ 
]*\*/
InjectedScript
execute
awaitPromise
callFunctionOn
evaluateOnCallFrame
getFunctionDetails
Internal error
functionDetails
getPreview
getProperties
getDisplayableProperties
getInternalProperties
getCollectionEntries
saveResult
wrapCallFrames
wrapObject
wrapJSONString
wrapTable
previewValue
setEventValue
clearEventValue
setExceptionValue
clearExceptionValue
findObjectById
inspectObject
releaseObject
releaseObjectGroup
createCommandLineAPIObject
Object has too long reference chain (must not be longer than 
Internal error: result value is empty
Internal error: result is not an Object
Internal error: result is not a pair of value and wasThrown flag
wasThrown
savedResultIndex
injectedScriptId
Error when creating injected script: %s (%d:%d)
./inspector/InjectedScriptManager.cpp
Inspector::InjectedScript Inspector::InjectedScriptManager::injectedScriptFor(JSC::JSGlobalObject *)
Missing injected script object
truncated
topCallFrameIsBoundary
parentStackTrace
line
column
repeatCount
networkRequestId
parameters
stackTrace
lineNumber
lineContent
./inspector/ContentSearchUtilities.cpp
WTF::String Inspector::ContentSearchUtilities::findMagicComment(const WTF::String &, const WTF::String &)
callFrames
source
level
text
Exception while making a call.
hasInjectedModule
Error when calling 'hasInjectedModule' for '%s': %s (%d:%d)
./inspector/InjectedScriptModule.cpp
void Inspector::InjectedScriptModule::ensureInjected(Inspector::InjectedScriptManager *, const Inspector::InjectedScript &)
injectModule
Error when calling 'injectModule' for '%s': %s (%d:%d)
Message must be in JSON format
Message must be a JSONified object
'id' property was not found
The type of 'id' property must be integer
method
'method' property wasn't found
The type of 'method' property must be string
The 'method' property was formatted incorrectly. It should be 'Domain.method'
' domain was not found
data
error
Integer
Value
Animation
params
enable
disable
requestEffectTarget
resolveAnimation
startTracking
stopTracking
'Animation.
' was not found
animationId
Some arguments of method 'Animation.requestEffectTarget' can't be processed
nodeId
objectGroup
Some arguments of method 'Animation.resolveAnimation' can't be processed
object
ApplicationCache
'ApplicationCache.
frameIds
frameId
Some arguments of method 'ApplicationCache.getManifestForFrame' can't be processed
manifestURL
Some arguments of method 'ApplicationCache.getApplicationCacheForFrame' can't be processed
applicationCache
Audit
'Audit.
contextId
Some arguments of method 'Audit.setup' can't be processed
Some arguments of method 'Audit.run' can't be processed
Browser
'Browser.
CPUProfiler
'CPUProfiler.
getMatchedStylesForNode
getInlineStylesForNode
getComputedStyleForNode
getFontDataForNode
getAllStyleSheets
getStyleSheet
getStyleSheetText
setStyleSheetText
setStyleText
setRuleSelector
createStyleSheet
addRule
getSupportedCSSProperties
getSupportedSystemFontFamilyNames
forcePseudoState
setLayoutContextTypeChangedMode
'CSS.
includePseudo
includeInherited
Some arguments of method 'CSS.getMatchedStylesForNode' can't be processed
matchedCSSRules
pseudoElements
inherited
Some arguments of method 'CSS.getInlineStylesForNode' can't be processed
inlineStyle
attributesStyle
Some arguments of method 'CSS.getComputedStyleForNode' can't be processed
computedStyle
Some arguments of method 'CSS.getFontDataForNode' can't be processed
primaryFont
headers
styleSheetId
Some arguments of method 'CSS.getStyleSheet' can't be processed
styleSheet
Some arguments of method 'CSS.getStyleSheetText' can't be processed
text
Some arguments of method 'CSS.setStyleSheetText' can't be processed
styleId
Some arguments of method 'CSS.setStyleText' can't be processed
style
ruleId
selector
Some arguments of method 'CSS.setRuleSelector' can't be processed
rule
Some arguments of method 'CSS.createStyleSheet' can't be processed
Some arguments of method 'CSS.addRule' can't be processed
cssProperties
fontFamilyNames
forcedPseudoClasses
Some arguments of method 'CSS.forcePseudoState' can't be processed
Some arguments of method 'CSS.setLayoutContextTypeChangedMode' can't be processed
Unknown mode: 
Canvas
requestNode
requestContent
requestClientNodes
resolveContext
setRecordingAutoCaptureFrameCount
startRecording
stopRecording
requestShaderSource
updateShader
setShaderProgramDisabled
setShaderProgramHighlighted
'Canvas.
canvasId
Some arguments of method 'Canvas.requestNode' can't be processed
Some arguments of method 'Canvas.requestContent' can't be processed
content
Some arguments of method 'Canvas.requestClientNodes' can't be processed
clientNodeIds
Some arguments of method 'Canvas.resolveContext' can't be processed
Some arguments of method 'Canvas.setRecordingAutoCaptureFrameCount' can't be processed
frameCount
memoryLimit
Some arguments of method 'Canvas.startRecording' can't be processed
Some arguments of method 'Canvas.stopRecording' can't be processed
programId
shaderType
Some arguments of method 'Canvas.requestShaderSource' can't be processed
Unknown shaderType: 
Some arguments of method 'Canvas.updateShader' can't be processed
disabled
Some arguments of method 'Canvas.setShaderProgramDisabled' can't be processed
highlighted
Some arguments of method 'Canvas.setShaderProgramHighlighted' can't be processed
Console
'Console.
channels
Some arguments of method 'Console.setLoggingChannelLevel' can't be processed
Unknown source: 
Unknown level: 
getDocument
requestChildNodes
querySelector
querySelectorAll
setNodeName
setNodeValue
removeNode
setAttributeValue
setAttributesAsText
removeAttribute
getSupportedEventNames
getDataBindingsForNode
getAssociatedDataForNode
getEventListenersForNode
setEventListenerDisabled
setBreakpointForEventListener
removeBreakpointForEventListener
getAccessibilityPropertiesForNode
getOuterHTML
setOuterHTML
insertAdjacentHTML
performSearch
getSearchResults
discardSearchResults
setInspectModeEnabled
highlightRect
highlightQuad
highlightSelector
highlightNode
highlightNodeList
hideHighlight
highlightFrame
showGridOverlay
hideGridOverlay
pushNodeByPathToFrontend
resolveNode
getAttributes
moveTo
undo
redo
markUndoableState
focus
setInspectedNode
setAllowEditingUserAgentShadowTrees
'DOM.
root
depth
Some arguments of method 'DOM.requestChildNodes' can't be processed
Some arguments of method 'DOM.querySelector' can't be processed
Some arguments of method 'DOM.querySelectorAll' can't be processed
nodeIds
Some arguments of method 'DOM.setNodeName' can't be processed
Some arguments of method 'DOM.setNodeValue' can't be processed
Some arguments of method 'DOM.removeNode' can't be processed
Some arguments of method 'DOM.setAttributeValue' can't be processed
Some arguments of method 'DOM.setAttributesAsText' can't be processed
Some arguments of method 'DOM.removeAttribute' can't be processed
eventNames
Some arguments of method 'DOM.getDataBindingsForNode' can't be processed
dataBindings
Some arguments of method 'DOM.getAssociatedDataForNode' can't be processed
associatedData
Some arguments of method 'DOM.getEventListenersForNode' can't be processed
listeners
eventListenerId
Some arguments of method 'DOM.setEventListenerDisabled' can't be processed
options
Some arguments of method 'DOM.setBreakpointForEventListener' can't be processed
Some arguments of method 'DOM.removeBreakpointForEventListener' can't be processed
Some arguments of method 'DOM.getAccessibilityPropertiesForNode' can't be processed
Some arguments of method 'DOM.getOuterHTML' can't be processed
outerHTML
Some arguments of method 'DOM.setOuterHTML' can't be processed
position
html
Some arguments of method 'DOM.insertAdjacentHTML' can't be processed
query
caseSensitive
Some arguments of method 'DOM.performSearch' can't be processed
searchId
resultCount
fromIndex
toIndex
Some arguments of method 'DOM.getSearchResults' can't be processed
Some arguments of method 'DOM.discardSearchResults' can't be processed
objectId
Some arguments of method 'DOM.requestNode' can't be processed
enabled
highlightConfig
Some arguments of method 'DOM.setInspectModeEnabled' can't be processed
color
outlineColor
usePageCoordinates
Some arguments of method 'DOM.highlightRect' can't be processed
quad
Some arguments of method 'DOM.highlightQuad' can't be processed
selectorString
Some arguments of method 'DOM.highlightSelector' can't be processed
Some arguments of method 'DOM.highlightNode' can't be processed
Some arguments of method 'DOM.highlightNodeList' can't be processed
contentColor
contentOutlineColor
Some arguments of method 'DOM.highlightFrame' can't be processed
gridColor
showLineNames
showLineNumbers
showExtendedGridLines
showTrackSizes
showAreaNames
Some arguments of method 'DOM.showGridOverlay' can't be processed
Some arguments of method 'DOM.hideGridOverlay' can't be processed
path
Some arguments of method 'DOM.pushNodeByPathToFrontend' can't be processed
Some arguments of method 'DOM.resolveNode' can't be processed
Some arguments of method 'DOM.getAttributes' can't be processed
targetNodeId
insertBeforeNodeId
Some arguments of method 'DOM.moveTo' can't be processed
Some arguments of method 'DOM.focus' can't be processed
Some arguments of method 'DOM.setInspectedNode' can't be processed
allow
Some arguments of method 'DOM.setAllowEditingUserAgentShadowTrees' can't be processed
DOMDebugger
setDOMBreakpoint
removeDOMBreakpoint
setEventBreakpoint
removeEventBreakpoint
setURLBreakpoint
removeURLBreakpoint
'DOMDebugger.
type
Some arguments of method 'DOMDebugger.setDOMBreakpoint' can't be processed
Unknown type: 
Some arguments of method 'DOMDebugger.removeDOMBreakpoint' can't be processed
breakpointType
eventName
Some arguments of method 'DOMDebugger.setEventBreakpoint' can't be processed
Unknown breakpointType: 
Some arguments of method 'DOMDebugger.removeEventBreakpoint' can't be processed
isRegex
Some arguments of method 'DOMDebugger.setURLBreakpoint' can't be processed
Some arguments of method 'DOMDebugger.removeURLBreakpoint' can't be processed
DOMStorage
getDOMStorageItems
setDOMStorageItem
removeDOMStorageItem
clearDOMStorageItems
'DOMStorage.
storageId
Some arguments of method 'DOMStorage.getDOMStorageItems' can't be processed
Some arguments of method 'DOMStorage.setDOMStorageItem' can't be processed
Some arguments of method 'DOMStorage.removeDOMStorageItem' can't be processed
Some arguments of method 'DOMStorage.clearDOMStorageItems' can't be processed
Database
'Database.
databaseId
Some arguments of method 'Database.getDatabaseTableNames' can't be processed
tableNames
columnNames
sqlError
Some arguments of method 'Database.executeSQL' can't be processed
Debugger
setAsyncStackTraceDepth
setBreakpointsActive
setBreakpointByUrl
setBreakpoint
removeBreakpoint
continueUntilNextRunLoop
continueToLocation
stepNext
stepOver
stepInto
stepOut
pause
resume
searchInContent
getScriptSource
setPauseOnDebuggerStatements
setPauseOnExceptions
setPauseOnAssertions
setPauseOnMicrotasks
setPauseForInternalScripts
setShouldBlackboxURL
'Debugger.
Some arguments of method 'Debugger.setAsyncStackTraceDepth' can't be processed
active
Some arguments of method 'Debugger.setBreakpointsActive' can't be processed
lineNumber
urlRegex
columnNumber
Some arguments of method 'Debugger.setBreakpointByUrl' can't be processed
breakpointId
locations
location
Some arguments of method 'Debugger.setBreakpoint' can't be processed
actualLocation
Some arguments of method 'Debugger.removeBreakpoint' can't be processed
Some arguments of method 'Debugger.continueToLocation' can't be processed
scriptId
Some arguments of method 'Debugger.searchInContent' can't be processed
Some arguments of method 'Debugger.getScriptSource' can't be processed
scriptSource
functionId
Some arguments of method 'Debugger.getFunctionDetails' can't be processed
details
Some arguments of method 'Debugger.setPauseOnDebuggerStatements' can't be processed
state
Some arguments of method 'Debugger.setPauseOnExceptions' can't be processed
Some arguments of method 'Debugger.setPauseOnAssertions' can't be processed
Some arguments of method 'Debugger.setPauseOnMicrotasks' can't be processed
shouldPause
Some arguments of method 'Debugger.setPauseForInternalScripts' can't be processed
callFrameId
expression
includeCommandLineAPI
doNotPauseOnExceptionsAndMuteConsole
returnByValue
generatePreview
emulateUserGesture
Some arguments of method 'Debugger.evaluateOnCallFrame' can't be processed
shouldBlackbox
Some arguments of method 'Debugger.setShouldBlackboxURL' can't be processed
Heap
snapshot
getRemoteObject
'Heap.
timestamp
snapshotData
heapObjectId
Some arguments of method 'Heap.getPreview' can't be processed
string
preview
Some arguments of method 'Heap.getRemoteObject' can't be processed
IndexedDB
requestDatabaseNames
requestDatabase
requestData
clearObjectStore
'IndexedDB.
databaseNames
securityOrigin
Some arguments of method 'IndexedDB.requestDatabaseNames' can't be processed
databaseWithObjectStores
databaseName
Some arguments of method 'IndexedDB.requestDatabase' can't be processed
objectStoreDataEntries
hasMore
objectStoreName
indexName
skipCount
pageSize
keyRange
Some arguments of method 'IndexedDB.requestData' can't be processed
Some arguments of method 'IndexedDB.clearObjectStore' can't be processed
Inspector
'Inspector.
LayerTree
'LayerTree.
Some arguments of method 'LayerTree.layersForNode' can't be processed
layers
layerId
Some arguments of method 'LayerTree.reasonsForCompositingLayer' can't be processed
compositingReasons
Memory
'Memory.
Network
setExtraHTTPHeaders
getResponseBody
setResourceCachingDisabled
loadResource
getSerializedCertificate
resolveWebSocket
setInterceptionEnabled
addInterception
removeInterception
interceptContinue
interceptWithRequest
interceptWithResponse
interceptRequestWithResponse
interceptRequestWithError
'Network.
Some arguments of method 'Network.setExtraHTTPHeaders' can't be processed
requestId
Some arguments of method 'Network.getResponseBody' can't be processed
body
base64Encoded
Some arguments of method 'Network.setResourceCachingDisabled' can't be processed
mimeType
status
Some arguments of method 'Network.loadResource' can't be processed
Some arguments of method 'Network.getSerializedCertificate' can't be processed
serializedCertificate
Some arguments of method 'Network.resolveWebSocket' can't be processed
Some arguments of method 'Network.setInterceptionEnabled' can't be processed
stage
Some arguments of method 'Network.addInterception' can't be processed
Unknown stage: 
Some arguments of method 'Network.removeInterception' can't be processed
Some arguments of method 'Network.interceptContinue' can't be processed
postData
Some arguments of method 'Network.interceptWithRequest' can't be processed
statusText
Some arguments of method 'Network.interceptWithResponse' can't be processed
Some arguments of method 'Network.interceptRequestWithResponse' can't be processed
Some arguments of method 'Network.interceptRequestWithError' can't be processed
Unknown errorType: 
Page
reload
navigate
overrideUserAgent
overrideSetting
getCookies
setCookie
deleteCookie
getResourceTree
getResourceContent
setBootstrapScript
searchInResource
searchInResources
setShowPaintRects
setEmulatedMedia
setForcedAppearance
snapshotNode
snapshotRect
archive
'Page.
ignoreCache
revalidateAllResources
Some arguments of method 'Page.reload' can't be processed
Some arguments of method 'Page.navigate' can't be processed
Some arguments of method 'Page.overrideUserAgent' can't be processed
setting
Some arguments of method 'Page.overrideSetting' can't be processed
Unknown setting: 
cookies
cookie
Some arguments of method 'Page.setCookie' can't be processed
cookieName
Some arguments of method 'Page.deleteCookie' can't be processed
frameTree
Some arguments of method 'Page.getResourceContent' can't be processed
Some arguments of method 'Page.setBootstrapScript' can't be processed
Some arguments of method 'Page.searchInResource' can't be processed
Some arguments of method 'Page.searchInResources' can't be processed
Some arguments of method 'Page.setShowPaintRects' can't be processed
media
Some arguments of method 'Page.setEmulatedMedia' can't be processed
appearance
Some arguments of method 'Page.setForcedAppearance' can't be processed
Some arguments of method 'Page.snapshotNode' can't be processed
dataURL
coordinateSystem
Some arguments of method 'Page.snapshotRect' can't be processed
Unknown coordinateSystem: 
Runtime
parse
evaluate
setSavedResultAlias
getRuntimeTypesForVariablesAtOffsets
enableTypeProfiler
disableTypeProfiler
enableControlFlowProfiler
disableControlFlowProfiler
getBasicBlocks
'Runtime.
Some arguments of method 'Runtime.parse' can't be processed
range
Some arguments of method 'Runtime.evaluate' can't be processed
promiseObjectId
Some arguments of method 'Runtime.awaitPromise' can't be processed
functionDeclaration
Some arguments of method 'Runtime.callFunctionOn' can't be processed
Some arguments of method 'Runtime.getPreview' can't be processed
ownProperties
fetchStart
fetchCount
Some arguments of method 'Runtime.getProperties' can't be processed
internalProperties
Some arguments of method 'Runtime.getDisplayableProperties' can't be processed
Some arguments of method 'Runtime.getCollectionEntries' can't be processed
Some arguments of method 'Runtime.saveResult' can't be processed
alias
Some arguments of method 'Runtime.setSavedResultAlias' can't be processed
Some arguments of method 'Runtime.releaseObject' can't be processed
Some arguments of method 'Runtime.releaseObjectGroup' can't be processed
Some arguments of method 'Runtime.getRuntimeTypesForVariablesAtOffsets' can't be processed
types
sourceID
Some arguments of method 'Runtime.getBasicBlocks' can't be processed
basicBlocks
ScriptProfiler
'ScriptProfiler.
includeSamples
Some arguments of method 'ScriptProfiler.startTracking' can't be processed
ServiceWorker
'ServiceWorker.
info
Target
'Target.
pauseOnStart
Some arguments of method 'Target.setPauseOnStart' can't be processed
targetId
Some arguments of method 'Target.resume' can't be processed
Some arguments of method 'Target.sendMessageToTarget' can't be processed
Timeline
stop
setAutoCaptureEnabled
setInstruments
'Timeline.
maxCallStackDepth
Some arguments of method 'Timeline.start' can't be processed
Some arguments of method 'Timeline.setAutoCaptureEnabled' can't be processed
instruments
Some arguments of method 'Timeline.setInstruments' can't be processed
Worker
'Worker.
workerId
Some arguments of method 'Worker.initialized' can't be processed
Some arguments of method 'Worker.sendMessageToWorker' can't be processed
Animation.animationCreated
animation
Animation.nameChanged
Animation.effectChanged
effect
Animation.targetChanged
Animation.animationDestroyed
Animation.trackingStart
Animation.trackingUpdate
event
Animation.trackingComplete
ApplicationCache.applicationCacheStatusUpdated
ApplicationCache.networkStateUpdated
isNowOnline
Browser.extensionsEnabled
extensions
Browser.extensionsDisabled
extensionIds
CPUProfiler.trackingStart
CPUProfiler.trackingUpdate
CPUProfiler.trackingComplete
CSS.mediaQueryResultChanged
CSS.styleSheetChanged
CSS.styleSheetAdded
header
CSS.styleSheetRemoved
CSS.nodeLayoutContextTypeChanged
layoutContextType
Canvas.canvasAdded
canvas
Canvas.canvasRemoved
Canvas.canvasMemoryChanged
memoryCost
Canvas.extensionEnabled
extension
Canvas.clientNodesChanged
Canvas.recordingStarted
initiator
Canvas.recordingProgress
frames
bufferUsed
Canvas.recordingFinished
recording
Canvas.programCreated
shaderProgram
Canvas.programDeleted
Console.messageAdded
Console.messageRepeatCountUpdated
Console.messagesCleared
Console.heapSnapshot
title
DOM.documentUpdated
DOM.inspect
DOM.setChildNodes
parentId
nodes
DOM.attributeModified
DOM.attributeRemoved
DOM.inlineStyleInvalidated
DOM.characterDataModified
characterData
DOM.childNodeCountUpdated
childNodeCount
DOM.childNodeInserted
parentNodeId
previousNodeId
node
DOM.childNodeRemoved
DOM.willDestroyDOMNode
DOM.shadowRootPushed
hostId
DOM.shadowRootPopped
rootId
DOM.customElementStateChanged
customElementState
DOM.pseudoElementAdded
pseudoElement
DOM.pseudoElementRemoved
pseudoElementId
DOM.didAddEventListener
DOM.willRemoveEventListener
DOM.didFireEvent
DOM.powerEfficientPlaybackStateChanged
isPowerEfficient
DOMStorage.domStorageItemsCleared
DOMStorage.domStorageItemRemoved
DOMStorage.domStorageItemAdded
newValue
DOMStorage.domStorageItemUpdated
oldValue
Database.addDatabase
database
Debugger.globalObjectCleared
Debugger.scriptParsed
startLine
startColumn
endLine
endColumn
isContentScript
sourceURL
sourceMapURL
module
Debugger.scriptFailedToParse
errorLine
errorMessage
Debugger.breakpointResolved
Debugger.paused
reason
asyncStackTrace
Debugger.resumed
Debugger.didSampleProbe
sample
Debugger.playBreakpointActionSound
breakpointActionId
Heap.garbageCollected
collection
Heap.trackingStart
Heap.trackingComplete
Inspector.evaluateForTestInFrontend
script
Inspector.inspect
hints
LayerTree.layerTreeDidChange
Memory.memoryPressure
severity
Memory.trackingStart
Memory.trackingUpdate
Memory.trackingComplete
Network.requestWillBeSent
loaderId
documentURL
request
walltime
redirectResponse
Network.responseReceived
response
Network.dataReceived
dataLength
encodedDataLength
Network.loadingFinished
metrics
Network.loadingFailed
errorText
canceled
Network.requestServedFromMemoryCache
resource
Network.requestIntercepted
Network.responseIntercepted
Network.webSocketWillSendHandshakeRequest
Network.webSocketHandshakeResponseReceived
Network.webSocketCreated
Network.webSocketClosed
Network.webSocketFrameReceived
Network.webSocketFrameError
Network.webSocketFrameSent
Page.domContentEventFired
Page.loadEventFired
Page.frameNavigated
frame
Page.frameDetached
Page.frameStartedLoading
Page.frameStoppedLoading
Page.frameScheduledNavigation
delay
Page.frameClearedScheduledNavigation
Page.defaultAppearanceDidChange
Runtime.executionContextCreated
context
ScriptProfiler.trackingStart
ScriptProfiler.trackingUpdate
ScriptProfiler.trackingComplete
samples
Target.targetCreated
targetInfo
Target.targetDestroyed
Target.didCommitProvisionalTarget
oldTargetId
newTargetId
Target.dispatchMessageFromTarget
Timeline.eventRecorded
record
Timeline.recordingStarted
startTime
Timeline.recordingStopped
endTime
Timeline.autoCaptureStarted
Worker.workerCreated
Worker.workerTerminated
Worker.dispatchMessageFromWorker
parsedOk
priority
borderColor
marginColor
paddingColor
showInfo
isLocalStorage
actions
autoContinue
condition
ignoreCount
array
date
number
lower
lowerOpen
upper
upperOpen
domain
expires
httpOnly
sameSite
secure
session
divot
typeInformationDescriptor
children
ready
delayed
done
normal
reverse
alternate
alternate-reverse
none
forwards
backwards
both
auto
main
webkit
user
user-agent
author
inspector
first-line
first-letter
highlight
marker
before
after
selection
backdrop
scrollbar
scrollbar-thumb
scrollbar-button
scrollbar-track
scrollbar-track-piece
scrollbar-corner
resizer
inactive
media-rule
media-import-rule
media-link-node
media-style-node
supports-rule
layer-rule
layer-import-rule
grid
observed
srgb
display-p3
canvas-2d
bitmaprenderer
webgl
webgl2
compute
render
fragment
vertex
javascript
network
console-api
storage
appcache
rendering
security
content-blocker
mediasource
webrtc
itp-debug
private-click-measurement
payment-request
other
basic
verbose
warning
debug
dirxml
table
trace
clear
startGroup
startGroupCollapsed
endGroup
assert
timing
profile
profileEnd
image
open
closed
builtin
custom
waiting
failed
additions
removals
true
false
mixed
page
step
time
grammar
spelling
assertive
polite
subtree-modified
attribute-modified
node-removed
animation-frame
interval
listener
timeout
sound
probe
global
with
closure
catch
functionName
globalLexicalEnvironment
nestedLexical
full
partial
null
images
unknown
memory-cache
disk-cache
service-worker
inspector-override
medium
high
Document
StyleSheet
Image
Font
Script
Fetch
Ping
Beacon
WebSocket
Other
parser
General
AccessControl
Cancellation
Timeout
PrivateClickMeasurementDebugModeEnabled
AuthorAndUserStylesEnabled
ICECandidateFilteringEnabled
ITPDebugModeEnabled
ImagesEnabled
MediaCaptureRequiresSecureConnection
MockCaptureDevicesEnabled
NeedsSiteSpecificQuirks
ScriptEnabled
ShowDebugBorders
ShowRepaintCounter
WebRTCEncryptionEnabled
WebSecurityEnabled
Viewport
None
Strict
Light
Dark
canvas-bitmaprenderer
canvas-webgl
canvas-webgl2
frontend
console
auto-capture
function
undefined
boolean
symbol
bigint
regexp
weakmap
weakset
iterator
class
proxy
accessor
internal
irrecoverable
unterminated-literal
recoverable
Microtask
worker
EventDispatch
ScheduleStyleRecalculation
RecalculateStyles
InvalidateLayout
Layout
Paint
Composite
RenderingFrame
TimerInstall
TimerRemove
TimerFire
EvaluateScript
TimeStamp
Time
TimeEnd
FunctionCall
ProbeSample
ConsoleProfile
RequestAnimationFrame
CancelAnimationFrame
FireAnimationFrame
ObserverCallback
AnimationFrame
Interval
Listener
exception
CSPViolation
DebuggerStatement
Breakpoint
PauseOnNextStatement
BlackboxedScript
critical
non-critical
uncaught
'params' object must contain required parameter '
' with type '
Parameter '
' was not found.
' has wrong type. It must be '
Profile "
" already exists
No profiles exist
" does not exist
console.timeStamp
console.record
console.recordEnd
console.screenshot
 is currently ignored in JavaScript context inspection.
com.apple.JavaScriptCore.remote-inspector-runloop-mode
[native code]
InjectedScriptHost
InjectedScriptHost.evaluateWithScopeExtension first argument must be a string.
InjectedScriptHost.isPromiseRejectedWithNativeGetterTypeError first argument must be a Promise.
class
array
date
proxy
weakmap
weakset
scriptId
columnNumber
displayName
pending
resolved
rejected
./inspector/JSInjectedScriptHost.cpp
JSC::JSValue Inspector::JSInjectedScriptHost::getInternalProperties(JSC::JSGlobalObject *, JSC::CallFrame *)
targetFunction
boundThis
boundArgs
target
handler
kind
queryInstances first argument must be an object.
queryInstances cannot be called with a Proxy.
queryInstances cannot be called with Object.
queryInstances cannot be called with Function.
queryInstances cannot be called with Array.
queryInstances cannot be called with Map.
queryInstances cannot be called with Set.
queryInstances cannot be called with Promise.
queryHolders first argument must be an object.
subtype
internalConstructorName
isHTMLAllCollection
isPromiseRejectedWithNativeGetterTypeError
proxyTargetValue
weakMapSize
weakMapEntries
weakSetSize
weakSetEntries
iteratorEntries
queryInstances
queryHolders
evaluateWithScopeExtension
savedResultAlias
JavaScriptCallFrame
JSJavaScriptCallFrame.evaluateWithScopeExtension first argument must be a string.
program
scopeDescriptions
caller
sourceID
functionName
scopeChain
thisObject
isTailDeleted
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
[object Proxy]
Inspector
Audit
Must call teardown before calling setup again
Missing execution state of injected script for given executionContextId
Unable to construct injected WebInspectorAudit object.
(function(WebInspectorAudit) { "use strict"; return eval(`(
)`)(WebInspectorAudit); })
audit
Must call setup before calling teardown
Version
Console
 console messages are not shown.
Timer "
Counter "
Not supported
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = Inspector::CreateScriptCallStackFunctor]
backtrace
Debugger
Debugger domain already enabled
Unexpected negative depth
Either url or urlRegex must be specified
Breakpoint for given location already exists.
Missing script for scriptId in given location
Could not resolve breakpoint
Breakpoint for given location already exists
Missing script for given scriptId
Missing injected script for given functionId
Must be paused or waiting to pause
Unknown state: 
Missing injected script for given callFrameId
URL must not be empty
Blackboxing of internal scripts is controlled by 'Debugger.setPauseForInternalScripts'
originalReason
originalData
Must be paused
Heap
Heap domain already enabled
Heap domain already disabled
No heap snapshot
No object for identifier, it may have been collected
Unable to get object details - Structure
Unable to get object details - GlobalObject
Unable to get object details - InjectedScript
Internal error: unable to cast Object
Runtime
Missing injected script for given promiseObjectId
Missing injected script for given objectId
fetchStart cannot be negative
fetchCount cannot be negative
VM has no type information
User Query
Unexpected non-object item in locations
VM has no control flow information
ScriptProfiler
./inspector/agents/InspectorScriptProfilerAgent.cpp
virtual WTF::Seconds Inspector::InspectorScriptProfilerAgent::willEvaluateScript()
void Inspector::InspectorScriptProfilerAgent::trackingComplete()
void Inspector::InspectorScriptProfilerAgent::stopSamplingWhenDisconnecting()
Target
Missing target for given targetId
Target for given targetId is not paused
executionContextId is not supported for JSContexts as there is only one execution context
Internal error: main world execution context not found
Missing execution context for given executionContextId.
Unexpected non-integer lineNumber in given location
Unexepcted non-string scriptId in given location
breakpoint-action-
directive
endOffset
leastCommonAncestor
structures
typeSet
isTruncated
expressionLocation
stackFrames
stackTraces
isProvisional
isPaused
Unexpected non-object item in given actions
Missing type for item in given actions
Unknown breakpoint action type: 
probeId
batchId
sampleId
payload
isValid
hasExecuted
executionCount
./interpreter/CallFrame.cpp
bool JSC::CallFrame::callSiteBitsAreBytecodeOffset() const
bool JSC::CallFrame::callSiteBitsAreCodeOriginIndex() const
JSC::SourceOrigin JSC::CallFrame::callerSourceOrigin(JSC::VM &)
eval code
module code
global code
./interpreter/Interpreter.cpp
unsigned int JSC::sizeOfVarargs(JSC::JSGlobalObject *, JSC::JSValue, uint32_t)
JSC::JSValue JSC::Interpreter::executeProgram(const JSC::SourceCode &, JSC::JSGlobalObject *, JSC::JSObject *)
JSC::JSObject *JSC::Interpreter::executeConstruct(JSC::JSGlobalObject *, JSC::JSObject *, const JSC::CallData &, const JSC::ArgList &, JSC::JSValue)
JSC::JSValue JSC::Interpreter::execute(JSC::EvalExecutable *, JSC::JSGlobalObject *, JSC::JSValue, JSC::JSScope *)
Can't create duplicate global variable in eval: '
Executed eval, fired VarInjection watchpoint
Can't create duplicate variable in eval: '
JSC::JSValue JSC::Interpreter::executeModuleProgram(JSC::JSModuleRecord *, JSC::ModuleProgramExecutable *, JSC::JSGlobalObject *, JSC::JSModuleEnvironment *, JSC::JSValue, JSC::JSValue)
WillExecuteProgram
DidExecuteProgram
DidEnterCallFrame
DidReachDebuggerStatement
WillLeaveCallFrame
WillExecuteStatement
WillExecuteExpression
./interpreter/StackVisitor.cpp
std::optional<RegisterAtOffsetList> JSC::StackVisitor::Frame::calleeSaveRegistersForUnwinding()
[native code]
[wasm code]
frame 0x0
frame 
name: 
sourceURL: 
isInlinedFrame: 
InlineCallFrame: 
callee: 
returnPC: 
callerFrame: 
rawLocationBits: 
codeBlock: 
hasCodeOrigins: 
callSiteIndex: 
jitCode: 
 start 
 end 
line: 
column: 
EntryFrame: 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/CodeBlock.h
unsigned int JSC::CodeBlock::bytecodeOffset(const JSC::Instruction *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/llint/LLIntPCRanges.h
bool JSC::LLInt::isLLIntPC(void *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
bool JSC::JSObject::canGetIndexQuickly(unsigned int) const
./interpreter/ShadowChicken.cpp
auto JSC::ShadowChicken::update(JSC::VM &, JSC::CallFrame *)::(anonymous class)::operator()(JSC::StackVisitor &) const
./jit/AssemblyHelpers.cpp
void JSC::AssemblyHelpers::callExceptionFuzz(JSC::VM &)
void JSC::AssemblyHelpers::restoreCalleeSavesFromEntryFrameCalleeSavesBuffer(JSC::EntryFrame *&)
void JSC::AssemblyHelpers::copyLLIntBaselineCalleeSavesFromFrameOrRegisterToEntryFrameCalleeSavesBuffer(JSC::EntryFrame *&, const JSC::TempRegisterSet &)
void JSC::AssemblyHelpers::emitSaveOrCopyLLIntBaselineCalleeSavesFor(JSC::CodeBlock *, JSC::VirtualRegister, JSC::AssemblyHelpers::RestoreTagRegisterMode, JSC::GPRReg, JSC::GPRReg, JSC::GPRReg)
delayJITCompile
    JIT compilation failed.
    JIT compilation successful.
./jit/BaselineJITPlan.cpp
virtual JSC::CompilationResult JSC::BaselineJITPlan::finalize()
./jit/BinarySwitch.cpp
bool JSC::BinarySwitch::advance(JSC::MacroAssembler &)
void JSC::BinarySwitch::build(unsigned int, bool, unsigned int)
./jit/CCallHelpers.cpp
void JSC::CCallHelpers::ensureShadowChickenPacket(JSC::VM &, JSC::GPRReg, JSC::GPRReg, JSC::GPRReg)
./jit/CallFrameShuffler.cpp
void JSC::CallFrameShuffler::spill(JSC::CachedRecovery &)
void JSC::CallFrameShuffler::prepareAny()
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h
JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::CachedTempRegister &JSC::MacroAssemblerARM64::cachedMemoryTempRegister()
JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::RegisterID JSC::MacroAssemblerARM64::getCachedDataTempRegisterIDAndInvalidate()
JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::CachedTempRegister &JSC::MacroAssemblerARM64::dataMemoryTempRegister()
./jit/AssemblyHelpersSpoolers.h
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/CallLinkInfo.h
static JSC::CallMode JSC::CallLinkInfo::callModeFor(JSC::CallLinkInfo::CallType)
void JSC::AssemblyHelpers::CopySpooler::store(int) [RegType = JSC::ARM64Registers::FPRegisterID]
void JSC::AssemblyHelpers::CopySpooler::finalize() [RegType = JSC::ARM64Registers::FPRegisterID]
./jit/CallFrameShuffler.h
void JSC::CallFrameShuffler::ensureRegister(const CheckFunctor &) [CheckFunctor = (lambda at ./jit/CallFrameShuffler.h:562:13)]
void JSC::CallFrameShuffler::ensureRegister(const CheckFunctor &) [CheckFunctor = (lambda at ./jit/CallFrameShuffler.h:631:13)]
static void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::repatchNearCall(CodeLocationNearCall<callTag>, CodeLocationLabel<destTag>) [AssemblerType = JSC::ARM64Assembler, callTag = (WTF::PtrTag)2367, destTag = (WTF::PtrTag)49594]
compilation failed
./jit/CallFrameShuffler64.cpp
JSC::DataFormat JSC::CallFrameShuffler::emitStore(JSC::CachedRecovery &, MacroAssembler::Address)
void JSC::CallFrameShuffler::emitBox(JSC::CachedRecovery &)
void JSC::CallFrameShuffler::emitDisplace(JSC::CachedRecovery &)
Will pretend to fail executable allocation.
./jit/ExecutableAllocator.cpp
static void JSC::ExecutableAllocator::initializeUnderlyingAllocator()
Allocating 
 bytes of executable memory with JITCompilationMustSucceed.
Allocation failed because bytes allocated 
 bytes available.
Ran out of executable memory while allocating 
 bytes.
RefPtr<JSC::ExecutableMemoryHandle> JSC::ExecutableAllocator::allocate(size_t, JSC::JITCompilationEffort)
void *JSC::ExecutableAllocator::getJumpIslandTo(void *, void *)
void *JSC::ExecutableAllocator::getJumpIslandToConcurrently(void *, void *)
void JSC::dumpJITMemory(const void *, const void *, size_t)
./jit/GCAwareJITStubRoutine.cpp
virtual void JSC::GCAwareJITStubRoutine::observeZeroRefCount()
JSC::GCAwareJITStubRoutineWithExceptionHandler::GCAwareJITStubRoutineWithExceptionHandler(const MacroAssemblerCodeRef<JITStubRoutinePtrTag> &, JSC::VM &, FixedVector<RefPtr<JSC::AccessCase>> &&, FixedVector<JSC::StructureID> &&, const JSC::JSCell *, const Vector<JSC::JSCell *> &, Bag<JSC::OptimizingCallLinkInfo> &&, JSC::CodeBlock *, JSC::DisposableCallSiteIndex)
Ref<JSC::PolymorphicAccessJITStubRoutine> JSC::createICJITStubRoutine(const MacroAssemblerCodeRef<JITStubRoutinePtrTag> &, FixedVector<RefPtr<JSC::AccessCase>> &&, FixedVector<JSC::StructureID> &&, JSC::VM &, const JSC::JSCell *, bool, const Vector<JSC::JSCell *> &, Bag<JSC::OptimizingCallLinkInfo> &&, JSC::CodeBlock *, JSC::DisposableCallSiteIndex)
 self
 proto lookup
JSC ICStats
InvalidKind
GetByAddAccessCase
GetByReplaceWithJump
GetBySelfPatch
InAddAccessCase
InReplaceWithJump
InReplaceWithGeneric
InstanceOfAddAccessCase
InstanceOfReplaceWithJump
OperationGetById
OperationGetByIdGeneric
OperationGetByIdBuildList
OperationGetByIdOptimize
OperationGetByValOptimize
OperationGetByIdWithThisOptimize
OperationGenericIn
OperationInByIdGeneric
OperationInByIdOptimize
OperationPutByIdStrict
OperationPutByIdNonStrict
OperationPutByIdDirectStrict
OperationPutByIdDirectNonStrict
OperationPutByIdStrictOptimize
OperationPutByIdNonStrictOptimize
OperationPutByIdDirectStrictOptimize
OperationPutByIdDirectNonStrictOptimize
OperationPutByIdStrictBuildList
OperationPutByIdNonStrictBuildList
OperationPutByIdDefinePrivateFieldFieldStrictOptimize
OperationPutByIdPutPrivateFieldFieldStrictOptimize
PutByAddAccessCase
PutByReplaceWithJump
PutBySelfPatch
InBySelfPatch
DelByReplaceWithJump
DelByReplaceWithGeneric
OperationGetPrivateNameOptimize
OperationGetPrivateNameById
OperationGetPrivateNameByIdOptimize
OperationGetPrivateNameByIdGeneric
CheckPrivateBrandAddAccessCase
SetPrivateBrandAddAccessCase
CheckPrivateBrandReplaceWithJump
SetPrivateBrandReplaceWithJump
./jit/ICStats.cpp
void WTF::printInternal(WTF::PrintStream &, ICEvent::Kind)
./jit/IntrinsicEmitter.cpp
void JSC::IntrinsicGetterAccessCase::emitIntrinsicGetter(JSC::AccessGenerationState &)
JSC::FixedVMPoolExecutableAllocator::FixedVMPoolExecutableAllocator()
: Got executable pool reservation at 
, while I'm at 
void JSC::initializeSeparatedWXHeaps(void *, size_t, void *, size_t)
auto JSC::jitWriteThunkGenerator(void *, void *, size_t)::(anonymous class)::operator()() const
auto JSC::initializeSeparatedWXHeaps(void *, size_t, void *, size_t)::(anonymous class)::operator()() const
void JSC::FixedVMPoolExecutableAllocator::Allocator::addFreshFreeSpace(void *, size_t)
void *JSC::FixedVMPoolExecutableAllocator::islandForJumpLocation(const WTF::LockHolder &, uintptr_t, uintptr_t, bool)
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/RedBlackTree.h
NodeType *WTF::RedBlackTree<JSC::FixedVMPoolExecutableAllocator::Islands, void *>::findExact(const KeyType &) const [NodeType = JSC::FixedVMPoolExecutableAllocator::Islands, KeyType = void *]
void JSC::FixedVMPoolExecutableAllocator::freeJumpIslands(const WTF::LockHolder &, JSC::FixedVMPoolExecutableAllocator::Islands *)
void JSC::FixedVMPoolExecutableAllocator::RegionAllocator::freeIsland(uintptr_t)
void WTF::RedBlackTree<JSC::FixedVMPoolExecutableAllocator::Islands, void *>::insert(NodeType *) [NodeType = JSC::FixedVMPoolExecutableAllocator::Islands, KeyType = void *]
void WTF::RedBlackTree<JSC::FixedVMPoolExecutableAllocator::Islands, void *>::treeInsert(NodeType *) [NodeType = JSC::FixedVMPoolExecutableAllocator::Islands, KeyType = void *]
void *JSC::FixedVMPoolExecutableAllocator::RegionAllocator::allocateIsland()
auto JSC::FixedVMPoolExecutableAllocator::islandForJumpLocation(const WTF::LockHolder &, uintptr_t, uintptr_t, bool)::(anonymous class)::operator()(void *) const
Jump Island: %lu
%pid
static void JSC::dumpJITMemory(const void *, const void *, size_t)::DumpJIT::flush()
void WTF::RedBlackTree<JSC::FixedVMPoolExecutableAllocator::Islands, void *>::iterate(Function) [NodeType = JSC::FixedVMPoolExecutableAllocator::Islands, KeyType = void *, Function = (lambda at ./jit/ExecutableAllocator.cpp:619:48)]
static NodeType *WTF::RedBlackTree<JSC::FixedVMPoolExecutableAllocator::Islands, void *>::treeMinimum(NodeType *) [NodeType = JSC::FixedVMPoolExecutableAllocator::Islands, KeyType = void *]
void WTF::RedBlackTree<JSC::FixedVMPoolExecutableAllocator::Islands, void *>::removeFixup(NodeType *, NodeType *) [NodeType = JSC::FixedVMPoolExecutableAllocator::Islands, KeyType = void *]
jsc.dumpJITMemory.queue
ICStats:
./jit/JIT.cpp
void JSC::JIT::emitPutCodeBlockToFrameInPrologue(JSC::GPRReg)
Baseline_fast_
void JSC::JIT::privateCompileMainPass()
Baseline_slow_
void JSC::JIT::privateCompileSlowCases()
void JSC::JIT::compileAndLinkWithoutFinalizing(JSC::JITCompilationEffort)
Baseline_prologue
Baseline JIT code for %s
JSC::CompilationResult JSC::JIT::finalizeOnMainThread(JSC::CodeBlock *)
Preparing for JIT compilation.
Total Compile Time
Baseline Compile Time
DFG Compile Time
FTL Compile Time
FTL (DFG) Compile Time
FTL (B3) Compile Time
Baseline: op_ret_handler
None
Host
LLInt
Baseline
./jit/JITCode.cpp
virtual DFG::CommonData *JSC::JITCode::dfgCommon()
virtual DFG::JITCode *JSC::JITCode::dfg()
virtual FTL::JITCode *JSC::JITCode::ftl()
virtual FTL::ForOSREntryJITCode *JSC::JITCode::ftlForOSREntry()
Destroying JIT code at 
virtual void *JSC::JITCodeWithCodeRef::executableAddressAtOffset(size_t)
virtual void *JSC::JITCodeWithCodeRef::dataAddressAtOffset(size_t)
virtual unsigned int JSC::JITCodeWithCodeRef::offsetOf(void *)
virtual size_t JSC::JITCodeWithCodeRef::size()
virtual bool JSC::JITCodeWithCodeRef::contains(void *)
void JSC::DirectJITCode::initializeCodeRefForDFG(JITCode::CodeRef<JSEntryPtrTag>, JITCode::CodePtr<JSEntryPtrTag>)
virtual JITCode::CodePtr<JSEntryPtrTag> JSC::DirectJITCode::addressForCall(JSC::ArityCheckMode)
virtual JITCode::CodePtr<JSEntryPtrTag> JSC::NativeJITCode::addressForCall(JSC::ArityCheckMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/MacroAssemblerARM64.h
JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::RegisterID JSC::MacroAssemblerARM64::getCachedMemoryTempRegisterIDAndInvalidate()
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)49594, T = JSC::AssemblerLabel]
./jit/JITInlines.h
JSC::JSValue JSC::JIT::getConstantOperand(JSC::VirtualRegister)
const WTF::String &JSC::JSString::tryGetValue(bool) const
./jit/JITCall.cpp
auto JSC::JIT::emit_op_iterator_open(const JSC::Instruction *)::(anonymous class)::operator()() const
auto JSC::JIT::emit_op_iterator_next(const JSC::Instruction *)::(anonymous class)::operator()() const
JIT [
 cfr 
] SLOW 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/UnlinkedCodeBlock.h
unsigned int JSC::UnlinkedCodeBlock::bytecodeOffset(const JSC::Instruction *)
uintptr_t JSC::valueProfileOffsetFor(unsigned int) [Bytecode = JSC::OpIteratorOpen]
uintptr_t JSC::valueProfileOffsetFor(unsigned int) [Bytecode = JSC::OpIteratorNext]
<empty>
(Compile of 
 with 
InvalidCompilationMode
BaselineMode
DFGMode
FTLMode
FTLForOSREntryMode
./jit/JITCompilationMode.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::JITCompilationMode)
    (End Of Main Path)
    (S) 
    (End Of Slow Path)
Generated Baseline JIT code for 
   Source: 
   Code at [
In call frame 
 for code block 
./jit/JITExceptions.cpp
void JSC::genericUnwind(JSC::VM &, JSC::CallFrame *)
./jit/JITInlineCacheGenerator.cpp
void JSC::JITInlineCacheGenerator::generateBaselineDataICFastPath(JSC::JIT &, unsigned int, JSC::GPRReg)
JSC::JITGetByIdGenerator::JITGetByIdGenerator(JSC::CodeBlock *, Bag<JSC::StructureStubInfo> *, JSC::JITType, JSC::CodeOrigin, JSC::CallSiteIndex, const JSC::RegisterSet &, JSC::CacheableIdentifier, JSC::JSValueRegs, JSC::JSValueRegs, JSC::GPRReg, JSC::AccessType)
void JSC::JITGetByIdGenerator::generateBaselineDataICFastPath(JSC::JIT &, unsigned int, JSC::GPRReg)
JSC::JITGetByIdWithThisGenerator::JITGetByIdWithThisGenerator(JSC::CodeBlock *, Bag<JSC::StructureStubInfo> *, JSC::JITType, JSC::CodeOrigin, JSC::CallSiteIndex, const JSC::RegisterSet &, JSC::CacheableIdentifier, JSC::JSValueRegs, JSC::JSValueRegs, JSC::JSValueRegs, JSC::GPRReg)
void JSC::JITGetByIdWithThisGenerator::generateBaselineDataICFastPath(JSC::JIT &, unsigned int, JSC::GPRReg)
void JSC::JITPutByIdGenerator::generateBaselineDataICFastPath(JSC::JIT &, unsigned int, JSC::GPRReg)
JSC::V_JITOperation_GSsiJJC JSC::JITPutByIdGenerator::slowPathFunction()
JSC::JITInByIdGenerator::JITInByIdGenerator(JSC::CodeBlock *, Bag<JSC::StructureStubInfo> *, JSC::JITType, JSC::CodeOrigin, JSC::CallSiteIndex, const JSC::RegisterSet &, JSC::CacheableIdentifier, JSC::JSValueRegs, JSC::JSValueRegs, JSC::GPRReg)
void JSC::JITInByIdGenerator::generateBaselineDataICFastPath(JSC::JIT &, unsigned int, JSC::GPRReg)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/assembler/LinkBuffer.h
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)49594, T = JSC::AssemblerLabel]
Byproducts:
    <empty>
    
./jit/JITOpcodes.cpp
void JSC::JIT::emit_op_is_big_int(const JSC::Instruction *)
Baseline: valueIsfalsey
Baseline: op_throw_handler
void JSC::JIT::emit_op_enter(const JSC::Instruction *)
Baseline: op_enter_handler
Baseline: op_check_traps_handler
void JSC::JIT::emit_op_log_shadow_chicken_prologue(const JSC::Instruction *)
void JSC::JIT::emit_op_log_shadow_chicken_tail(const JSC::Instruction *)
./jit/JITOperations.cpp
void JSC::operationDirectPutByValStrictGeneric(JSC::JSGlobalObject *, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::StructureStubInfo *, JSC::ArrayProfile *)
void JSC::operationDirectPutByValNonStrictGeneric(JSC::JSGlobalObject *, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::StructureStubInfo *, JSC::ArrayProfile *)
Unexpected code block in Baseline->DFG tier-up: 
JSC::SlowPathReturnType JSC::operationOptimize(JSC::VM *, uint32_t)
: Entered optimize with bytecodeIndex = 
, executeCounter = 
, exitCounter = 
delayOptimizeToDFG
Choosing not to optimize 
 yet, because the threshold hasn't been reached.
 yet, because m_shouldAlwaysBeInlined == true.
Considering OSR 
Triggering reoptimization of 
) (in loop).
Delaying optimization for 
 because of insufficient profiling.
Triggering optimized compilation of 
Performing OSR 
Optimizing 
 succeeded, OSR failed, after a delay of 
 (after OSR fail).
Executed op_put_scope<ResolvedClosureVar>
JITOperations
Log Full, called from inside baseline JIT
void JSC::operationProcessShadowChickenLog(JSC::VM *)
JSC::JSCell *JSC::operationRetrieveAndClearExceptionIfCatchable(JSC::VM *)
./jit/JITPlan.cpp
virtual void JSC::JITPlan::cancel()
JSC::JITPlan::Tier JSC::JITPlan::tier() const
DFG(Plan) compiling 
void JSC::JITPlan::compileInThread(JSC::JITWorklistThread *)
N/A (fail)
Baseline
Canceled
ftlCompile
dfgCompile
Optimized 
 using 
 into 
 bytes in 
 (DFG: 
, B3: 
Baseline: slow_op_get_by_val_prepareCall
Baseline: slow_op_xxx_private_name_prepareCall
Baseline: slow_op_put_xxx_prepareCall
Baseline: slow_op_put_put_private_name_prepareCall
Baseline: slow_op_del_by_id_prepareCall
Baseline: slow_op_del_by_val_prepareCall
Baseline: slow_op_get_by_id_prepareCall
Baseline: slow_op_get_by_id_with_this_prepareCall
Baseline: slow_op_put_by_id_prepareCall
Baseline: slow_op_resolve_scope
Baseline: slow_op_get_from_scope
Baseline: slow_op_put_to_scope
void JSC::JIT::loadCodeBlockConstantPayload(JSC::VirtualRegister, JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::RegisterID)
void JSC::directPutByValOptimize(JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::JSValue, JSC::JSValue, JSC::JSValue, JSC::StructureStubInfo *, JSC::ArrayProfile *, JSC::ECMAMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/RepatchInlines.h
JSC::SlowPathReturnType JSC::linkFor(JSC::CallFrame *, JSC::JSGlobalObject *, JSC::CallLinkInfo *)
Invalid mix of BigInt and other type in multiplication.
Invalid mix of BigInt and other type in subtraction.
./jit/JITPropertyAccess.cpp
auto JSC::JIT::emit_op_put_to_scope(const JSC::Instruction *)::(anonymous class)::operator()(JSC::ResolveType) const
Terminating current execution
debugger is stepping or has requests
should always be inlined
compiling
should reoptimize from loop now
insufficient profiling
at bc#
should reoptimize now
OSR failed
JITMathIC: generating out of line fast IC snippet
JITMathIC: generating out of line IC snippet
./jit/JITMathIC.h
auto JSC::JITMathIC<JSC::JITAddGenerator, JSC::BinaryArithProfile>::generateOutOfLine(JSC::CodeBlock *, FunctionPtr<CFunctionPtrTag>)::(anonymous class)::operator()() const [GeneratorType = JSC::JITAddGenerator, ArithProfileType = JSC::BinaryArithProfile]
JITMathIC: linking constant jump to out of line stub
auto JSC::JITMathIC<JSC::JITMulGenerator, JSC::BinaryArithProfile>::generateOutOfLine(JSC::CodeBlock *, FunctionPtr<CFunctionPtrTag>)::(anonymous class)::operator()() const [GeneratorType = JSC::JITMulGenerator, ArithProfileType = JSC::BinaryArithProfile]
auto JSC::JITMathIC<JSC::JITNegGenerator, JSC::UnaryArithProfile>::generateOutOfLine(JSC::CodeBlock *, FunctionPtr<CFunctionPtrTag>)::(anonymous class)::operator()() const [GeneratorType = JSC::JITNegGenerator, ArithProfileType = JSC::UnaryArithProfile]
auto JSC::JITMathIC<JSC::JITSubGenerator, JSC::BinaryArithProfile>::generateOutOfLine(JSC::CodeBlock *, FunctionPtr<CFunctionPtrTag>)::(anonymous class)::operator()() const [GeneratorType = JSC::JITSubGenerator, ArithProfileType = JSC::BinaryArithProfile]
took 
 ms (DFG: 
 ms with 
resolve_scope thunk
auto JSC::JIT::generateOpResolveScopeThunk(JSC::VM &)::(anonymous class)::operator()(JSC::ResolveType) const
get_from_scope thunk
auto JSC::JIT::generateOpGetFromScopeThunk(JSC::VM &)::(anonymous class)::operator()(JSC::ResolveType) const
./jit/JITSafepoint.cpp
void JSC::Safepoint::checkLivenessAndVisitChildren(Visitor &) [Visitor = JSC::AbstractSlotVisitor]
void JSC::Safepoint::checkLivenessAndVisitChildren(Visitor &) [Visitor = JSC::SlotVisitor]
JSC::Safepoint::Result::~Result()
JSC::Safepoint::Safepoint(JSC::JITPlan &, JSC::Safepoint::Result &)
JSC::Safepoint::~Safepoint()
void JSC::Safepoint::begin()
bool JSC::Safepoint::isKnownToBeLiveAfterGC()
void JSC::Safepoint::cancel()
JIT size statistics:
==============================================
 totalBytes: 
 count: 
 avg: 
./jit/JITStubRoutine.cpp
virtual void JSC::JITStubRoutine::observeZeroRefCount()
 did become ready.
 result: 
: Enqueueing plan to optimize 
: Completing 
./jit/JITWorklist.cpp
JSC::JITWorklist::State JSC::JITWorklist::completeAllReadyPlansForVM(JSC::VM &, JSC::JITCompilationKey)
: Waiting for all in VM to complete.
JITWorklist(
)[Queue Length = 
, Map Size = 
, Num Ready = 
, Num Active Threads = 
./jit/JITThunks.cpp
MacroAssemblerCodeRef<JITThunkPtrTag> JSC::JITThunks::ctiStubImpl(JSC::ThunkGenerator, GenerateThunk) [GenerateThunk = (lambda at ./jit/JITThunks.cpp:169:35)]
MacroAssemblerCodeRef<JITThunkPtrTag> JSC::JITThunks::ctiStubImpl(JSC::ThunkGenerator, GenerateThunk) [GenerateThunk = (lambda at ./jit/JITThunks.cpp:179:29)]
void JSC::JITWorklist::removeMatchingPlansForVM(JSC::VM &, const MatchFunction &) [MatchFunction = (lambda at ./jit/JITWorklist.cpp:221:34)]
void JSC::JITWorklist::removeMatchingPlansForVM(JSC::VM &, const MatchFunction &) [MatchFunction = (lambda at ./jit/JITWorklist.cpp:233:34)]
JIT Worklist Helper Thread
: Thread shutting down
./jit/JITWorklistThread.cpp
virtual WTF::AutomaticThread::PollResult JSC::JITWorklistThread::poll(const WTF::AbstractLocker &)
: Compiling 
 asynchronously
Heap is stopped but here we are! (1)
virtual WTF::AutomaticThread::WorkResult JSC::JITWorklistThread::work()
Heap is stopped but here we are! (2)
: Compiled 
 asynchronously
: Thread started
: Thread will stop
./jit/PCToCodeOriginMap.cpp
JSC::PCToCodeOriginMap::PCToCodeOriginMap(JSC::PCToCodeOriginMapBuilder &&, JSC::LinkBuffer &)
Unlinking polymorphic call at 
, bc#
<variant = 
, codeBlock = 
Linking polymorphic call in 
<none>
 at 
./jit/ScratchRegisterAllocator.cpp
void JSC::ScratchRegisterAllocator::restoreReusedRegistersByPopping(JSC::AssemblyHelpers &, const ScratchRegisterAllocator::PreservedState &)
static unsigned int JSC::ScratchRegisterAllocator::preserveRegistersToStackForCall(JSC::AssemblyHelpers &, const JSC::RegisterSet &, unsigned int)
static void JSC::ScratchRegisterAllocator::restoreRegistersFromStackForCall(JSC::AssemblyHelpers &, const JSC::RegisterSet &, const JSC::RegisterSet &, unsigned int, unsigned int)
JSC::JITWorklistThread::WorkScope::WorkScope(JSC::JITWorklistThread &)
auto JSC::PCToCodeOriginMap::PCToCodeOriginMap(JSC::PCToCodeOriginMapBuilder &&, JSC::LinkBuffer &)::(anonymous class)::operator()(void *) const
void JSC::(anonymous namespace)::DeltaCompressionBuilder::write(T) [T = unsigned char]
void JSC::(anonymous namespace)::DeltaCompressionBuilder::write(T) [T = unsigned long]
void JSC::(anonymous namespace)::DeltaCompressionBuilder::write(T) [T = signed char]
void JSC::(anonymous namespace)::DeltaCompressionBuilder::write(T) [T = long]
T JSC::(anonymous namespace)::DeltaCompresseionReader::read() [T = unsigned char]
T JSC::(anonymous namespace)::DeltaCompresseionReader::read() [T = unsigned long]
T JSC::(anonymous namespace)::DeltaCompresseionReader::read() [T = signed char]
T JSC::(anonymous namespace)::DeltaCompresseionReader::read() [T = long]
(null)
SlowPathCall
handleException
handleExceptionWithCallFrameRollback
popThunkStackPreservesAndHandleException
CheckException
Throw exception from call slow path thunk
Link call slow path thunk
Link polymorphic call slow path thunk
fixup arity
charAt
fromCharCode
codePointAt
clz32
sqrt
round
imul
random
Specialized thunk for bound function calls with no arguments
./jit/ThunkGenerators.cpp
auto JSC::virtualThunkFor(JSC::VM &, JSC::CallMode)::(anonymous class)::operator()() const
Virtual %s slow path thunk
tail call
construct
%s %s%s trampoline
native
internal
Tail With Saved Tags 
Tail Without Saved Tags 
Specialized thunk for %s
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/ExecutableBase.h
static ptrdiff_t JSC::ExecutableBase::offsetOfJITCodeWithArityCheckFor(JSC::CodeSpecializationKind)
./llint/LLIntExceptions.cpp
MacroAssemblerCodeRef<ExceptionHandlerPtrTag> JSC::LLInt::handleCatch(JSC::OpcodeSize)
MacroAssemblerCodeRef<ExceptionHandlerPtrTag> JSC::LLInt::handleWasmCatch(JSC::OpcodeSize)
MacroAssemblerCodeRef<ExceptionHandlerPtrTag> JSC::LLInt::handleWasmCatchAll(JSC::OpcodeSize)
<%p> %p / %p: executing bc#%zu, op#%u: Trace(%d): %d
LLIntSlowPaths
<%p> %p / %p: executing bc#%zu, op#%u: Trace(%d): %d: %08x:%08x: %s
<%p> %p / %p: in prologue of 
call prologue
construct prologue
call arity check
construct arity check
<%p> %p / %p: executing bc#%zu, %s, pc = %p
Frame will eventually return to %p
Will be returning to %p
The new cfr will be %p
entry_osr
entry_osr_function_for_call
entry_osr_function_for_construct
entry_osr_function_for_call_arityCheck
entry_osr_function_for_construct_arityCheck
JSC::SlowPathReturnType JSC::LLInt::llint_loop_osr(JSC::CallFrame *, const JSC::Instruction *)
: Entered loop_osr with executeCounter = 
./llint/LLIntSlowPaths.cpp
: Entered replace with executeCounter = 
Detected poly proto opportunity.
JSC::SlowPathReturnType JSC::LLInt::llint_slow_path_put_by_id(JSC::CallFrame *, const JSC::Instruction *)
JSC::SlowPathReturnType JSC::LLInt::llint_slow_path_put_by_val_direct(JSC::CallFrame *, const JSC::Instruction *)
JSC::SlowPathReturnType JSC::LLInt::llint_slow_path_put_private_name(JSC::CallFrame *, const JSC::Instruction *)
JSC::SlowPathReturnType JSC::LLInt::llint_slow_path_size_frame_for_varargs(JSC::CallFrame *, const JSC::Instruction *)
LLIntSlowPaths/call
JSC::SlowPathReturnType JSC::LLInt::llint_slow_path_retrieve_and_clear_exception_if_catchable(JSC::CallFrame *, const JSC::Instruction *)
JSC::SlowPathReturnType JSC::LLInt::llint_slow_path_log_shadow_chicken_prologue(JSC::CallFrame *, const JSC::Instruction *)
JSC::SlowPathReturnType JSC::LLInt::llint_slow_path_log_shadow_chicken_tail(JSC::CallFrame *, const JSC::Instruction *)
JSC::SlowPathReturnType JSC::LLInt::llint_slow_path_checkpoint_osr_exit(JSC::CallFrame *, JSC::EncodedJSValue)
./llint/LLIntThunks.cpp
MacroAssemblerCodeRef<ExceptionHandlerPtrTag> JSC::LLInt::handleCatchThunk(JSC::OpcodeSize)
MacroAssemblerCodeRef<ExceptionHandlerPtrTag> JSC::LLInt::handleWasmCatchThunk(JSC::OpcodeSize)
MacroAssemblerCodeRef<ExceptionHandlerPtrTag> JSC::LLInt::handleWasmCatchAllThunk(JSC::OpcodeSize)
MacroAssemblerCodeRef<JSEntryPtrTag> JSC::LLInt::returnLocationThunk(JSC::OpcodeID, JSC::OpcodeSize)
<%p> %p / %p: in %s of 
 function %p, executable %p; numVars = %u, numParameters = %u, numCalleeLocals = %u, caller = %p.
: Entered 
 with executeCounter = 
OSR entry
in prologue
    JIT threshold should be lifted.
    Code was already compiled.
threshold not reached, counter = 
JSC::JSString *JSC::JSRopeString::RopeBuilder<WTF::RecordOverflow>::release() [OverflowHandler = WTF::RecordOverflow]
void JSC::LLInt::handleIteratorNextCheckpoint(JSC::VM &, JSC::CallFrame *, JSC::JSGlobalObject *, const JSC::OpIteratorNext &, JSC::CheckpointOSRExitSideState &)
function for call
LLInt %s jump to prologue thunk
function for construct
function for call with arity check
function for construct with arity check
eval
module_program
LLInt::getHostCallReturnValue thunk
LLInt::callToThrow thunk
LLInt %s thunk
handle_uncaught_exception
op_catch
op_catch16
op_catch32
wasm_catch
wasm_catch16
wasm_catch32
wasm_catch_all
wasm_catch_all16
wasm_catch_all32
llint_generic_return_point
LLInt %s return point thunk
llint_generic_return_point16
llint_generic_return_point32
fuzzer_return_early_from_loop_hint
normal_osr_exit_trampoline thunk
checkpoint_osr_exit_trampoline thunk
checkpoint_osr_exit_from_inlined_call_trampoline thunk
op_call_return_location thunk
op_call_return_location16 thunk
op_call_return_location32 thunk
op_iterator_open_return_location thunk
op_iterator_open_return_location16 thunk
op_iterator_open_return_location32 thunk
op_iterator_next_return_location thunk
op_iterator_next_return_location16 thunk
op_iterator_next_return_location32 thunk
op_construct_return_location thunk
op_construct_return_location16 thunk
op_construct_return_location32 thunk
op_call_varargs_return_location thunk
op_call_varargs_return_location16 thunk
op_call_varargs_return_location32 thunk
op_construct_varargs_return_location thunk
op_construct_varargs_return_location16 thunk
op_construct_varargs_return_location32 thunk
op_get_by_id_return_location thunk
op_get_by_id_return_location16 thunk
op_get_by_id_return_location32 thunk
op_get_by_val_return_location thunk
op_get_by_val_return_location16 thunk
op_get_by_val_return_location32 thunk
op_put_by_id_return_location thunk
op_put_by_id_return_location16 thunk
op_put_by_id_return_location32 thunk
op_put_by_val_return_location thunk
op_put_by_val_return_location16 thunk
op_put_by_val_return_location32 thunk
Multiline comment was not closed properly
Non-number found after decimal point
Non-number found after exponent indicator
No identifiers allowed directly after numeric literal
No hexadecimal digits after '0x'
No space between hexadecimal literal and identifier
No binary digits after '0b'
No space between binary literal and identifier
No octal digits after '0o'
No space between octal literal and identifier
Numeric literals may not begin with 0_
Decimal integer literals with a leading zero are forbidden in strict mode
./parser/Lexer.cpp
JSC::JSTokenType JSC::Lexer<unsigned char>::lexWithoutClearingLineTerminator(JSC::JSToken *, OptionSet<JSC::LexerFlags>, bool) [T = unsigned char]
Unterminated regular expression literal '
`invalid unicode character`
Invalid non-latin character in RexExp literal's flags '
Invalid character: '\0'
Invalid character: '\n'
Invalid character: '\v'
Invalid character: '\r'
Invalid character: '#'
Invalid character: '@'
Invalid character: '`'
Invalid character '\u
Unexpected EOF
JSC::JSTokenType JSC::Lexer<char16_t>::lexWithoutClearingLineTerminator(JSC::JSToken *, OptionSet<JSC::LexerFlags>, bool) [T = char16_t]
m_parseMode 
m_lexicalScopeFeatures 
m_superBinding 
m_constructorKind 
m_isArrowFunctionBodyExpression 
m_ident 
m_ecmaName 
m_functionMode 
m_startColumn 
m_endColumn 
m_functionKeywordStart 
m_functionNameStart 
m_parametersStart 
m_classSource.isNull() 
m_startStartOffset 
m_parameterCount 
m_lastLine 
position().line 
position().offset 
position().lineStartOffset 
./parser/Parser.h
JSC::DestructuringKind JSC::Parser<JSC::Lexer<LChar>>::destructuringKindFromDeclarationType(JSC::DeclarationType) [LexerType = JSC::Lexer<LChar>]
variable name
lexical variable name
const char *JSC::Parser<JSC::Lexer<LChar>>::declarationTypeToVariableKind(JSC::DeclarationType) [LexerType = JSC::Lexer<LChar>]
std::tuple<VariableEnvironment, DeclarationStacks::FunctionStack> JSC::Parser<JSC::Lexer<LChar>>::popScope(JSC::Parser::AutoCleanupLexicalScope &, bool) [LexerType = JSC::Lexer<LChar>]
Parser error
Unexpected end of script
Incomplete unicode escape in identifier: '
Unterminated multiline comment
Unterminated numeric literal '
Unterminated string literal '
Invalid escape in identifier: '
Unexpected escaped characters in keyword token: '
Invalid unicode escape in identifier: '
Invalid numeric literal: '
Invalid use of octal: '
Invalid string literal: '
Invalid unicode encoding: '
Invalid unicode code point in identifier: '
Unrecognized token '
Unexpected string literal 
Unexpected number '
Unexpected use of reserved word '
' in strict mode
Invalid private name '
Unexpected private name 
Unexpected identifier '
Unexpected keyword '
Unexpected token '
Unparseable script
Cannot destructure to a parameter name '
Cannot declare a parameter named '
' as it shadows the name of a strict mode function
Cannot use the reserved word '
' as a 
parameter name
 in strict mode
Cannot use the keyword '
Cannot use 'let' as a 
Cannot use 'await' as a 
Cannot use 'yield' as a 
' in strict mode as it has already been declared
in strict mode
in an async function
in a module
const char *JSC::Parser<JSC::Lexer<LChar>>::disallowedIdentifierAwaitReason() [LexerType = JSC::Lexer<LChar>]
in a generator function
const char *JSC::Parser<JSC::Lexer<LChar>>::disallowedIdentifierYieldReason() [LexerType = JSC::Lexer<LChar>]
JSC::DestructuringKind JSC::Parser<JSC::Lexer<UChar>>::destructuringKindFromDeclarationType(JSC::DeclarationType) [LexerType = JSC::Lexer<UChar>]
const char *JSC::Parser<JSC::Lexer<UChar>>::declarationTypeToVariableKind(JSC::DeclarationType) [LexerType = JSC::Lexer<UChar>]
std::tuple<VariableEnvironment, DeclarationStacks::FunctionStack> JSC::Parser<JSC::Lexer<UChar>>::popScope(JSC::Parser::AutoCleanupLexicalScope &, bool) [LexerType = JSC::Lexer<UChar>]
const char *JSC::Parser<JSC::Lexer<UChar>>::disallowedIdentifierAwaitReason() [LexerType = JSC::Lexer<UChar>]
const char *JSC::Parser<JSC::Lexer<UChar>>::disallowedIdentifierYieldReason() [LexerType = JSC::Lexer<UChar>]
./parser/SourceProvider.cpp
void JSC::SourceProvider::getID()
null
true
false
await
break
case
catch
class
const
default
extends
finally
instanceof
continue
function
return
void
delete
this
while
else
super
switch
throw
typeof
with
debugger
yield
enum
export
import
implements
interface
package
private
protected
public
static
\x can only be followed by a hex character sequence
\u can only be followed by a Unicode character sequence
The only valid numeric escape in strict mode is '\0'
Unterminated string constant
./parser/Parser.cpp
typename TreeBuilder::FormalParameterList JSC::Parser<JSC::Lexer<LChar>>::parseFunctionParameters(TreeBuilder &, FunctionInfoType &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::ASTBuilder, FunctionInfoType = JSC::ParserFunctionInfo<JSC::ASTBuilder>]
 name
Expected an arrow function input parameter
Cannot parse parameters for this 
Expected a ')' or a ',' after a parameter declaration
Cannot parse parameter pattern
Expected an opening '(' before a 
's parameter list
getter functions must have no parameters
setter functions must have one parameter
Duplicate parameter '
' not allowed in function with non-simple parameter list
Expected a ')' after a parameter declaration
generator function
arrow function
async function
async method
async arrow function
async generator function
async generator method
const char *JSC::stringForFunctionMode(JSC::SourceParseMode)
Cannot use 'await' as a parameter name in an async function
Rest parameter should be the last parameter in a function declaration
' not allowed in function with default parameter values
' not allowed in function with destructuring parameters
' not allowed in function with a rest parameter
' not allowed in an arrow function
' not allowed in a method
Stack exhausted
Cannot parse this destructuring pattern
Expected a closing ']' following a rest element destructuring pattern
Expected either a closing ']' or a ',' following an element destructuring pattern
Cannot use 'let' as an identifier name for a LexicalDeclaration
Cannot use abbreviated destructuring syntax for keyword '
Cannot modify '
Cannot parse computed property name
Expected ']' to end end a computed property name
Expected a property name
Cannot use abbreviated destructuring syntax for reserved name '
Expected a ':' prior to a named destructuring property
Expected a closing '}' following a rest element destructuring pattern
Expected either a closing '}' or an ',' after a property destructuring pattern
Cannot use a private name as a 
Expected a parameter pattern or a ')' in parameter list
Invalid destructuring assignment target
new.target is only valid inside functions
new.target is not valid inside arrow functions in global code
"new." can only be followed with target
super is not valid in this context
super call is not valid in this context
import.meta is only valid inside modules
"import." can only be followed with meta
Cannot use new with import
import call expects exactly one argument
Cannot parse expression
Cannot parse base expression
Cannot call constructor in an optional chain
Cannot use super as the base of an optional chain
Cannot parse subscript expression
Expected '
' to 
subscript expression
super call is not valid in class field initializer context
Cannot use new with super call
Cannot parse call arguments
Cannot access private names from super
Cannot reference undeclared private field '
Expected a property name after 
'?.'
Cannot use tagged templates in an optional chain
Cannot use super as tag for tagged templates
Cannot parse template literal
compound expression
Cannot use 'await' within a parameter default expression
Cannot reference 'arguments' in class field initializer
arguments is not valid in this context
Invalid regular expression
Cannot parse function expression
bool JSC::Parser<JSC::Lexer<LChar>>::parseFunctionInfo(TreeBuilder &, JSC::FunctionNameRequirements, bool, JSC::ConstructorKind, JSC::SuperBinding, int, ParserFunctionInfo<TreeBuilder> &, JSC::Parser::FunctionDefinitionType, std::optional<int>) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::ASTBuilder]
Expected a '=>' after arrow function parameter declaration
Cannot declare function named 'await' 
Cannot declare 
 named 'await'
Cannot declare generator function named 'yield'
' is not a valid 
 name in strict mode
Function statements must have a name
Async function statements must have a name
Expected an opening '{' at the start of a 
 body
Parameters should match arguments offered as parameters in Function constructor
Cannot parse the body of this 
' is not a valid function name in strict mode
Expected a closing '}' after a 
typename TreeBuilder::FormalParameterList JSC::Parser<JSC::Lexer<LChar>>::parseFunctionParameters(TreeBuilder &, FunctionInfoType &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::SyntaxChecker, FunctionInfoType = JSC::ParserFunctionInfo<JSC::ASTBuilder>]
bool JSC::Parser<JSC::Lexer<LChar>>::parseFunctionInfo(TreeBuilder &, JSC::FunctionNameRequirements, bool, JSC::ConstructorKind, JSC::SuperBinding, int, ParserFunctionInfo<TreeBuilder> &, JSC::Parser::FunctionDefinitionType, std::optional<int>) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::SyntaxChecker]
typename TreeBuilder::FormalParameterList JSC::Parser<JSC::Lexer<LChar>>::parseFunctionParameters(TreeBuilder &, FunctionInfoType &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::SyntaxChecker, FunctionInfoType = JSC::ParserFunctionInfo<JSC::SyntaxChecker>]
Cannot parse body of this arrow function
Cannot parse body of this function
Cannot parse the arrow function expression
Cannot name a function 'arguments' in strict mode
Cannot name a function 'eval' in strict mode
Cannot declare a variable named 'arguments' in strict mode
Cannot declare a variable named 'eval' in strict mode
'use strict' directive not allowed inside a function with a non-simple parameter list
Invalid parameters or function name in strict mode
Expected ';' after variable declaration
Cannot use a private name to declare a variable
Cannot declare a variable named 
Cannot declare a let variable twice: '
Cannot declare a const variable twice: '
Cannot declare a var variable that shadows a let/const/class variable: '
Cannot export a duplicate name '
Expected expression as the intializer for the variable '
const declared variable '
 must have an initializer
Expected an initializer in destructuring variable declaration
Cannot parse expression statement
Cannot use 'await' as a label 
Cannot use 'yield' as a label 
Labels must be followed by a ':'
Attempted to redeclare the label '
Cannot find scope for the label '
Cannot parse statement
Failed to parse class
Cannot declare a class twice: '
Cannot export a duplicate class name: '
' is not a valid class name
Class statements must have a name
class name
Cannot parse the parent class name
Expected opening '{' at the start of a class body
computed property name
Cannot declare private method twice
Cannot declare a private method named '#constructor'
Cannot declare private field twice
Declared private setter with an already used name
Cannot declare a private static 
 if there is a non-static private 
 with used name
Cannot declare a private non-static 
 if there is a static private 
Cannot parse this method
Cannot declare class field named 'constructor'
Cannot declare private class field named '#constructor'
Cannot parse initializer for class field
Expected a ';' following a class field
 named 'constructor'
Cannot declare multiple constructors in a single class
Cannot declare a static method named 'prototype'
Cannot declare a getter or setter named 'constructor'
Cannot declare a private accessor named '#constructor'
Cannot declare a private setter or getter outside a class
Expected a parameter list for getter definition
Cannot parse getter definition
Expected a parameter list for setter definition
Cannot parse setter definition
Expected a parameter list for private setter definition
Cannot parse private setter definition
Expected a parameter list for private getter definition
Cannot parse private getter definition
instanceComputedName
staticComputedName
const char *JSC::stringArticleForFunctionMode(JSC::SourceParseMode)
Cannot use generator function declaration in single-statement context
Cannot parse this function
Cannot declare a function named '
Cannot declare a function that shadows a let/const/class/function variable '
Cannot export a duplicate function name: '
Cannot parse this async function
Cannot declare an async function named '
Cannot declare an async function that shadows a let/const/class/function variable '
Cannot use lexical declaration in single-statement context
Cannot use async function declaration in single-statement context
Cannot parse the body of the block statement
Expected a closing '}' at the end of a block statement
Function declarations are only allowed inside blocks or switch statements in strict mode
Function declarations are only allowed inside block statements or at the top level of a program
Expected valid function statement after 'function' keyword
 an 
'if' condition
Expected an expression as the condition for an if statement
Expected a statement as the body of an if block
Expected a statement as the body of an else block
Expected a statement following 'do'
do-while loop
do-while loop condition
Must provide an expression as a do-while loop condition
Unable to parse do-while loop condition
while loop condition
Must provide an expression as a while loop condition
Unable to parse while loop condition
Expected a statement as the body of a while loop
for-await-of can only be used in an async function or async generator
for-loop header
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<LChar>>::parseForStatement(TreeBuilder &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::SyntaxChecker]
can only declare a single variable in an enumeration
Expected either 'in' or 'of' in enumeration syntax
Expected 'of' in for-await syntax
Cannot assign to the loop variable inside a for-of loop header
Cannot assign to the loop variable inside a for-in loop header
Expected expression to enumerate
for-of header
for-in header
Expected statement as body of for-
 statement
Cannot parse for loop declarations
Unexpected a ';' in for-await-of header
const variables in for loops must have initializers
Cannot parse for loop condition expression
Expected a ';' after the for loop condition expression
Cannot parse for loop iteration expression
Expected a statement as the body of a for loop
Expected a reference on the left hand side of an enumeration statement
Cannot parse subject for-
Expected a statement as the body of a for-
loop
Left side of assignment is not a reference
'continue' is only valid inside a loop statement
Expected an identifier as the target for a continue statement
Cannot use the undeclared label '
Cannot continue to the label '
' as it is not targeting a loop
Expected a ';' following a targeted continue statement
'break' is only valid inside a switch or loop statement
Expected an identifier as the target for a break statement
Expected a ';' following a targeted break statement
Return statements are only valid inside functions
Cannot parse the return expression
Expected a ';' following a return statement
'with' statements are not valid in strict mode
subject of a 'with' statement
Cannot parse 'with' subject expression
A 'with' statement must have a body
subject of a 'switch'
Cannot parse switch subject expression
body of a 'switch'
Cannot parse switch clause
Expected a ':' after switch clause expression
Cannot parse the body of a switch clause
Cannot parse switch case expression
Expected a ':' after switch default clause
Cannot parse the body of a switch default clause
Expected expression after 'throw'
Cannot have a newline after 'throw'
Cannot parse expression for throw statement
Expected a ';' after a throw statement
Expected a block statement as body of a try statement
Cannot parse the body of try block
Unable to parse 'catch' block
'catch' target
Cannot declare a catch variable named '
Expected exception handler to be a block statement
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<LChar>>::parseTryStatement(TreeBuilder &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::SyntaxChecker]
Expected block statement for finally body
Cannot parse finally body
Try statements must have at least a catch or finally block
Debugger keyword must be followed by a ';'
'class' declaration is not directly within a block statement
Parse error
Cannot parse object literal property
Attempted to redefine __proto__ property
object literal
Expected a property name following keyword 'async'
Cannot parse expression for property declaration
Expected a parenthesis for argument list
Expected an identifier as property name
shorthand property name
Expected a ':' following the property name '
Expected ':' after property name
Cannot parse subject of a spread operation
Cannot parse assignment pattern
Expected '=' following assignment pattern
Left hand side of operator '
' must be a reference
 can't be the left hand side of an assignment expression
Cannot modify 'eval' in strict mode
Cannot modify 'arguments' in strict mode
Cannot parse the right hand side of an assignment expression
Cannot use yield expression out of generator
Cannot use yield expression within parameters
Cannot parse left hand side of ternary operator
Expected ':' in ternary operator
Cannot parse right hand side of ternary operator
Bare private name can only be used as the left-hand side of an `in` expression
Ambiguous unary expression in the left hand side of the exponentiation expression; parentheses must be used to disambiguate the expression
Coalescing and logical operators used together in the same expression; parentheses must be used to disambiguate
The 
 operator requires a reference expression
Cannot parse subexpression of 
operator
Cannot parse member expression
 can't come after a prefix operator
Prefix 
 operator applied to value that is not a reference
 can't come before a postfix operator
Postfix ++ operator applied to value that is not a reference
Postfix -- operator applied to value that is not a reference
' cannot be modified in strict mode
Cannot delete unqualified property '
Cannot delete private field 
prefix-decrement
decrement
prefix-increment
increment
logical-not
bitwise-not
const char *JSC::operatorString(bool, unsigned int)
Cannot parse arrow function expression
new.target
import.meta
const char *JSC::Parser<JSC::Lexer<LChar>>::metaPropertyName(TreeBuilder &, typename TreeBuilder::Expression) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::SyntaxChecker]
Cannot parse array literal element
Expected either a closing ']' or a ',' following an array element
The '...' operator should come before a target expression
Failed to parse await expression
Cannot parse async function expression
Cannot parse async generator function expression
Cannot parse expression in a comma expression
Expected opening '(' at start of argument list
Cannot parse function argument
The '...' operator should come before the target expression
argument list
Cannot parse head template element
Template literal expression cannot be empty
Cannot parse expression in template literal
Cannot parse template element
Expected a closing '}' following an expression in template literal
Expected an template element
Expected a binding element
Cannot declare a variable named '
Cannot destructure to a variable named '
Cannot declare a lexical variable twice: '
./parser/Nodes.h
virtual JSC::RegisterID *JSC::PrivateIdentifierNode::emitBytecode(JSC::BytecodeGenerator &, JSC::RegisterID *)
const char *JSC::Parser<JSC::Lexer<LChar>>::metaPropertyName(TreeBuilder &, typename TreeBuilder::Expression) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::ASTBuilder]
catch parameter name
expression name
const char *JSC::destructuringKindToVariableKindName(JSC::DestructuringKind)
Cannot parse the body of async arrow function
Cannot parse the body of async function
Exported binding '
' needs to refer to a top-level declared variable
Expected an exported name or a module export name string for the export declaration
Expected a well-formed-unicode string for the module export name
Expected 'from' before exported module name
Cannot parse the 'from' clause
Expected a ';' following a targeted export declaration
Only one 'default' export is allowed
Cannot parse the declaration
Expected a variable name or a module export name string for the export declaration
Cannot parse the named export
export list
Cannot use module export names if they reference variable names in the current module
Cannot use keyword as exported variable name
Expected 'function' keyword following 'async' keyword with no preceding line terminator
Expected either a declaration or a variable statement
Imported modules names must be string literals
Cannot parse the module name
Expected a ';' following a targeted import declaration
Cannot parse the default import
Cannot parse the namespace import
Expected an imported name or a module export name string for the import declaration
Cannot parse the named import
import list
Expected namespace import or import list
Expected 'from' before imported module name
Expected 'as' before imported binding name
Expected a variable name for the import declaration
Expected 'as' after the module export name string
Cannot use 'await' as an imported binding name
Cannot use keyword as imported binding name
Cannot declare an imported binding named 
Cannot declare an imported binding name twice: '
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<LChar>>::parseForStatement(TreeBuilder &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::ASTBuilder]
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<LChar>>::parseTryStatement(TreeBuilder &) [LexerType = JSC::Lexer<LChar>, TreeBuilder = JSC::ASTBuilder]
Cannot parse the body of a generator
Cannot parse the async function
Cannot reference undeclared private names: "
typename TreeBuilder::FormalParameterList JSC::Parser<JSC::Lexer<UChar>>::parseFunctionParameters(TreeBuilder &, FunctionInfoType &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::ASTBuilder, FunctionInfoType = JSC::ParserFunctionInfo<JSC::ASTBuilder>]
bool JSC::Parser<JSC::Lexer<UChar>>::parseFunctionInfo(TreeBuilder &, JSC::FunctionNameRequirements, bool, JSC::ConstructorKind, JSC::SuperBinding, int, ParserFunctionInfo<TreeBuilder> &, JSC::Parser::FunctionDefinitionType, std::optional<int>) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::ASTBuilder]
typename TreeBuilder::FormalParameterList JSC::Parser<JSC::Lexer<UChar>>::parseFunctionParameters(TreeBuilder &, FunctionInfoType &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::SyntaxChecker, FunctionInfoType = JSC::ParserFunctionInfo<JSC::ASTBuilder>]
bool JSC::Parser<JSC::Lexer<UChar>>::parseFunctionInfo(TreeBuilder &, JSC::FunctionNameRequirements, bool, JSC::ConstructorKind, JSC::SuperBinding, int, ParserFunctionInfo<TreeBuilder> &, JSC::Parser::FunctionDefinitionType, std::optional<int>) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::SyntaxChecker]
typename TreeBuilder::FormalParameterList JSC::Parser<JSC::Lexer<UChar>>::parseFunctionParameters(TreeBuilder &, FunctionInfoType &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::SyntaxChecker, FunctionInfoType = JSC::ParserFunctionInfo<JSC::SyntaxChecker>]
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<UChar>>::parseForStatement(TreeBuilder &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::SyntaxChecker]
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<UChar>>::parseTryStatement(TreeBuilder &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::SyntaxChecker]
const char *JSC::Parser<JSC::Lexer<UChar>>::metaPropertyName(TreeBuilder &, typename TreeBuilder::Expression) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::SyntaxChecker]
const char *JSC::Parser<JSC::Lexer<UChar>>::metaPropertyName(TreeBuilder &, typename TreeBuilder::Expression) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::ASTBuilder]
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<UChar>>::parseForStatement(TreeBuilder &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::ASTBuilder]
typename TreeBuilder::Statement JSC::Parser<JSC::Lexer<UChar>>::parseTryStatement(TreeBuilder &) [LexerType = JSC::Lexer<UChar>, TreeBuilder = JSC::ASTBuilder]
./parser/VariableEnvironment.cpp
void JSC::VariableEnvironment::markVariableAsCaptured(const RefPtr<WTF::UniquedStringImpl> &)
void JSC::VariableEnvironment::markVariableAsExported(const RefPtr<WTF::UniquedStringImpl> &)
JSC::CompactTDZEnvironmentMap::Handle::~Handle()
JSC::CompactTDZEnvironmentMap::Handle::Handle(const CompactTDZEnvironmentMap::Handle &)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/parser/VariableEnvironment.h
JSC::CompactTDZEnvironment &JSC::CompactTDZEnvironmentKey::environment()
LLInt
FTLForOSREntry
predicting 
NotJettisoned
WeakReference
DebuggerBreakpoint
DebuggerStepping
BaselineLoopReoptimizationTrigger
BaselineLoopReoptimizationTriggerOnOSREntryFail
OSRExit
ProfiledWatchpoint
UnprofiledWatchpoint
JettisonDueToOldAge
JettisonDueToVMTraps
./profiler/ProfilerJettisonReason.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::Profiler::JettisonReason)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSObject.h
auto JSC::JSObject::putDirectIndex(JSC::JSGlobalObject *, unsigned int, JSC::JSValue, unsigned int, JSC::PutDirectIndexMode)::(anonymous class)::operator()() const
AbstractModuleRecord
dependenciesMap
Exported binding name '
' is not found.
Exported binding name 'default' cannot be resolved by star export entries.
./runtime/AbstractModuleRecord.cpp
JSC::Synchronousness JSC::AbstractModuleRecord::link(JSC::JSGlobalObject *, JSC::JSValue)
JSC::JSValue JSC::AbstractModuleRecord::evaluate(JSC::JSGlobalObject *, JSC::JSValue, JSC::JSValue)
Analyzing ModuleRecord key(
    Dependencies: 
 modules
      module(
    Import: 
 entries
      import(
), local(
), module(
    Export: 
      [Local] 
export(
      [Indirect] 
), import(
      [Namespace] 
      [Star] module(
Function
./runtime/ArrayBuffer.cpp
JSC::ArrayBufferContents::ArrayBufferContents(void *, size_t, JSC::ArrayBufferDestructorFunction &&)
void JSC::ArrayBufferContents::transferTo(JSC::ArrayBufferContents &)
void JSC::ArrayBufferContents::copyTo(JSC::ArrayBufferContents &)
void JSC::ArrayBufferContents::shareWith(JSC::ArrayBufferContents &)
void JSC::ArrayBuffer::setSharingMode(JSC::ArrayBufferSharingMode)
Array buffer was detached
Cannot transfer a SharedArrayBuffer
Cannot transfer a WebAssembly.Memory
Cannot transfer an ArrayBuffer whose backing store has been accessed by the JavaScriptCore C API
./runtime/ArrayBufferView.cpp
JSC::ArrayBufferView::ArrayBufferView(RefPtr<JSC::ArrayBuffer> &&, size_t, size_t)
Array size is not a small enough positive integer.
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
./runtime/ExceptionScope.h
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/AbstractSlotVisitorInlines.h
JSC::AbstractSlotVisitor::ReferrerContext::ReferrerContext(JSC::AbstractSlotVisitor &, JSC::AbstractSlotVisitor::ReferrerToken)
./runtime/DisallowVMEntry.h
from
Array.isArray cannot be called on a Proxy that has been revoked
Array Iterator
Array
reverse
splice
unshift
indexOf
lastIndexOf
AsyncFromSyncIterator
AsyncFunction
AsyncGeneratorFunction
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
Species construction did not get a valid constructor
./runtime/JSObject.h
toLocaleString is not callable
Invalid array length
push cannot produce an array of length larger than (2 ** 53) - 1
./runtime/JSArrayInlines.h
./runtime/ArrayPrototype.cpp
Splice cannot produce an array of length larger than (2 ** 53) - 1
void JSC::shift(JSC::JSGlobalObject *, JSC::JSObject *, uint64_t, uint64_t, uint64_t, uint64_t) [shiftCountMode = JSC::JSArray::ShiftCountForSplice]
void JSC::unshift(JSC::JSGlobalObject *, JSC::JSObject *, uint64_t, uint64_t, uint64_t, uint64_t) [shiftCountMode = JSC::JSArray::ShiftCountForSplice]
unshift cannot produce an array of length larger than (2 ** 53) - 1
void JSC::unshift(JSC::JSGlobalObject *, JSC::JSObject *, uint64_t, uint64_t, uint64_t, uint64_t) [shiftCountMode = JSC::JSArray::ShiftCountForShift]
next
return
throw
AsyncGenerator
AsyncIterator
Atomics
compareExchange
exchange
isLockFree
load
notify
store
wait
BasicBlock: [%d, %d] hasExecuted: %s, executionCount:
true
false
Function
BigInt
next
return
throw
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
Typed array for wait/notify must wrap a SharedArrayBuffer.
./runtime/AtomicsObject.cpp
JSC::EncodedJSValue JSC::atomicsFuncWait(JSC::JSGlobalObject *, JSC::CallFrame *)
Typed array argument must be an Int32Array or BigInt64Array.
accessIndex
Access index out of bounds for atomic access.
Atomics.wait cannot be called from the current thread.
JSC::EncodedJSValue JSC::atomicsFuncNotify(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::(anonymous namespace)::atomicStore(JSC::JSGlobalObject *, JSC::VM &, JSC::JSValue, JSC::JSValue, JSC::JSValue)
Typed array argument must be an Int8Array, Int16Array, Int32Array, Uint8Array, Uint16Array, Uint32Array, BigInt64Array, or BigUint64Array.
asUintN
asIntN
number of bits
Not an integer
toString
toLocaleString
valueOf
'this' value must be a BigInt or BigIntObject
JSC::EncodedJSValue JSC::(anonymous namespace)::atomicReadModifyWrite(JSC::JSGlobalObject *, JSC::VM &, const JSC::JSValue *, const Func &) [Func = JSC::(anonymous namespace)::AddFunc]
JSC::EncodedJSValue JSC::(anonymous namespace)::atomicReadModifyWrite(JSC::JSGlobalObject *, JSC::VM &, const JSC::JSValue *, const Func &) [Func = JSC::(anonymous namespace)::AndFunc]
JSC::EncodedJSValue JSC::(anonymous namespace)::atomicReadModifyWrite(JSC::JSGlobalObject *, JSC::VM &, const JSC::JSValue *, const Func &) [Func = JSC::(anonymous namespace)::CompareExchangeFunc]
JSC::EncodedJSValue JSC::(anonymous namespace)::atomicReadModifyWrite(JSC::JSGlobalObject *, JSC::VM &, const JSC::JSValue *, const Func &) [Func = JSC::(anonymous namespace)::ExchangeFunc]
JSC::EncodedJSValue JSC::(anonymous namespace)::atomicReadModifyWrite(JSC::JSGlobalObject *, JSC::VM &, const JSC::JSValue *, const Func &) [Func = JSC::(anonymous namespace)::LoadFunc]
JSC::EncodedJSValue JSC::(anonymous namespace)::atomicReadModifyWrite(JSC::JSGlobalObject *, JSC::VM &, const JSC::JSValue *, const Func &) [Func = JSC::(anonymous namespace)::OrFunc]
JSC::EncodedJSValue JSC::(anonymous namespace)::atomicReadModifyWrite(JSC::JSGlobalObject *, JSC::VM &, const JSC::JSValue *, const Func &) [Func = JSC::(anonymous namespace)::SubFunc]
JSC::EncodedJSValue JSC::(anonymous namespace)::atomicReadModifyWrite(JSC::JSGlobalObject *, JSC::VM &, const JSC::JSValue *, const Func &) [Func = JSC::(anonymous namespace)::XorFunc]
Boolean
Could not write the full cache file to disk. Only wrote 
 of the expected 
uid:(
,cell:(
toString
valueOf
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
./runtime/CachedSpecialPropertyAdaptiveStructureWatchpoint.cpp
JSC::CachedSpecialPropertyAdaptiveStructureWatchpoint::CachedSpecialPropertyAdaptiveStructureWatchpoint(const JSC::ObjectPropertyCondition &, JSC::StructureRareData *)
void JSC::CachedSpecialPropertyAdaptiveStructureWatchpoint::install(JSC::VM &)
./runtime/CachedTypes.cpp
CompactTDZEnvironmentMap::Handle JSC::Decoder::handleForTDZEnvironment(JSC::CompactTDZEnvironment *) const
void JSC::Decoder::setHandleForTDZEnvironment(JSC::CompactTDZEnvironment *, const CompactTDZEnvironmentMap::Handle &)
bool JSC::GenericCacheEntry::decode(JSC::Decoder &, std::pair<SourceCodeKey, UnlinkedCodeBlock *> &) const
bool JSC::GenericCacheEntry::isStillValid(JSC::Decoder &, const JSC::SourceCodeKey &, JSC::CachedCodeBlockTag) const
./runtime/CallData.cpp
JSC::JSValue JSC::call(JSC::JSGlobalObject *, JSC::JSValue, const JSC::CallData &, JSC::JSValue, const JSC::ArgList &, NakedPtr<JSC::Exception> &)
Arguments
./runtime/ClonedArguments.cpp
void JSC::ClonedArguments::materializeSpecials(JSC::JSGlobalObject *)
./runtime/CodeCache.cpp
JSC::UnlinkedFunctionExecutable *JSC::CodeCache::getUnlinkedGlobalFunctionExecutable(JSC::VM &, const JSC::Identifier &, const JSC::SourceCode &, OptionSet<JSC::CodeGenerationMode>, std::optional<int>, JSC::ParserError &)
Call
Construct
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
const T *JSC::CachedPtr<JSC::CachedUniquedStringImpl, WTF::UniquedStringImpl>::get() const [T = JSC::CachedUniquedStringImpl, Source = WTF::UniquedStringImpl]
auto JSC::CachedUniquedStringImplBase<WTF::UniquedStringImpl>::decode(JSC::Decoder &)::(anonymous class)::operator()(const auto *) const [T = WTF::UniquedStringImpl, buffer:auto = unsigned char]
auto JSC::CachedUniquedStringImplBase<WTF::UniquedStringImpl>::decode(JSC::Decoder &)::(anonymous class)::operator()(const auto *) const [T = WTF::UniquedStringImpl, buffer:auto = char16_t]
void JSC::Encoder::Page::alignEnd()
RefPtr<JSC::CachedBytecode> JSC::Encoder::release(JSC::BytecodeCacheError &)
ptrdiff_t JSC::Encoder::offsetOf(const void *)
JSC::Encoder::Allocation JSC::Encoder::malloc(unsigned int)
void JSC::CachedJSValue::encode(JSC::Encoder &, const WriteBarrier<JSC::Unknown>)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/JSObject.h
auto JSC::JSObject::putDirectIndex(JSC::JSGlobalObject *, unsigned int, JSC::JSValue, unsigned int, JSC::PutDirectIndexMode)::(anonymous class)::operator()() const
const T *JSC::CachedPtr<JSC::CachedSourceProvider, JSC::SourceProvider>::get() const [T = JSC::CachedSourceProvider, Source = JSC::SourceProvider]
JSC::SourceProvider *JSC::CachedSourceProvider::decode(JSC::Decoder &) const
[WebAssembly source]
const T *JSC::CachedPtr<JSC::CachedProgramCodeBlock, JSC::UnlinkedProgramCodeBlock>::get() const [T = JSC::CachedProgramCodeBlock, Source = JSC::UnlinkedProgramCodeBlock]
const T *JSC::CachedPtr<JSC::CachedStringImpl, WTF::StringImpl>::get() const [T = JSC::CachedStringImpl, Source = WTF::StringImpl]
auto JSC::CachedUniquedStringImplBase<WTF::StringImpl>::decode(JSC::Decoder &)::(anonymous class)::operator()(const auto *) const [T = WTF::StringImpl, buffer:auto = unsigned char]
auto JSC::CachedUniquedStringImplBase<WTF::StringImpl>::decode(JSC::Decoder &)::(anonymous class)::operator()(const auto *) const [T = WTF::StringImpl, buffer:auto = char16_t]
const T *JSC::CachedPtr<JSC::CachedInstructionStream, JSC::InstructionStream>::get() const [T = JSC::CachedInstructionStream, Source = JSC::InstructionStream]
const T *JSC::CachedPtr<JSC::CachedCodeBlockRareData, JSC::UnlinkedCodeBlock::RareData>::get() const [T = JSC::CachedCodeBlockRareData, Source = JSC::UnlinkedCodeBlock::RareData]
void JSC::CachedJSValue::decode(JSC::Decoder &, WriteBarrier<JSC::Unknown> &, const JSC::JSCell *) const
const T *JSC::CachedPtr<JSC::CachedScopedArgumentsTable, JSC::ScopedArgumentsTable>::get() const [T = JSC::CachedScopedArgumentsTable, Source = JSC::ScopedArgumentsTable]
JSC::ScopedArgumentsTable *JSC::CachedScopedArgumentsTable::decode(JSC::Decoder &) const
const T *JSC::CachedPtr<JSC::CachedSymbolTableRareData, JSC::SymbolTable::SymbolTableRareData>::get() const [T = JSC::CachedSymbolTableRareData, Source = JSC::SymbolTable::SymbolTableRareData]
JSC::JSBigInt *JSC::CachedBigInt::decode(JSC::Decoder &) const
const T *JSC::CachedPtr<JSC::CachedFunctionExecutable, JSC::UnlinkedFunctionExecutable>::get() const [T = JSC::CachedFunctionExecutable, Source = JSC::UnlinkedFunctionExecutable]
const T *JSC::CachedPtr<JSC::CachedFunctionExecutableRareData, JSC::UnlinkedFunctionExecutable::RareData>::get() const [T = JSC::CachedFunctionExecutableRareData, Source = JSC::UnlinkedFunctionExecutable::RareData]
const T *JSC::CachedPtr<JSC::CachedTDZEnvironmentLink, JSC::TDZEnvironmentLink>::get() const [T = JSC::CachedTDZEnvironmentLink, Source = JSC::TDZEnvironmentLink]
const T *JSC::CachedPtr<JSC::CachedCompactTDZEnvironment, JSC::CompactTDZEnvironment>::get() const [T = JSC::CachedCompactTDZEnvironment, Source = JSC::CompactTDZEnvironment]
const T *JSC::CachedPtr<JSC::CachedVariableEnvironmentRareData, JSC::VariableEnvironment::RareData>::get() const [T = JSC::CachedVariableEnvironmentRareData, Source = JSC::VariableEnvironment::RareData]
const T *JSC::CachedPtr<JSC::CachedModuleCodeBlock, JSC::UnlinkedModuleProgramCodeBlock>::get() const [T = JSC::CachedModuleCodeBlock, Source = JSC::UnlinkedModuleProgramCodeBlock]
void JSC::CachedSourceProvider::encode(JSC::Encoder &, const JSC::SourceProvider &)
const T *JSC::CachedPtr<JSC::CachedFunctionCodeBlock, JSC::UnlinkedFunctionCodeBlock>::get() const [T = JSC::CachedFunctionCodeBlock, Source = JSC::UnlinkedFunctionCodeBlock]
auto JSC::ClonedArguments::createStructure(JSC::VM &, JSC::JSGlobalObject *, JSC::JSValue, JSC::IndexingType)::(anonymous class)::operator()(const JSC::GCSafeConcurrentJSLocker &, JSC::PropertyOffset, JSC::PropertyOffset) const
./runtime/CodeCache.h
std::enable_if_t<std::is_base_of<UnlinkedCodeBlock, UnlinkedCodeBlockType>::value && !std::is_same<UnlinkedCodeBlockType, UnlinkedEvalCodeBlock>::value, UnlinkedCodeBlockType *> JSC::CodeCacheMap::fetchFromDisk(JSC::VM &, const JSC::SourceCodeKey &) [UnlinkedCodeBlockType = JSC::UnlinkedProgramCodeBlock]
std::enable_if_t<std::is_base_of<UnlinkedCodeBlock, UnlinkedCodeBlockType>::value && !std::is_same<UnlinkedCodeBlockType, UnlinkedEvalCodeBlock>::value, UnlinkedCodeBlockType *> JSC::CodeCacheMap::fetchFromDisk(JSC::VM &, const JSC::SourceCodeKey &) [UnlinkedCodeBlockType = JSC::UnlinkedModuleProgramCodeBlock]
__proto__
await
break
case
const
continue
debugger
delete
else
enum
export
extends
implements
import
instanceof
interface
package
private
protected
public
static
super
switch
typeof
void
while
with
Atomics
BYTES_PER_ELEMENT
BigInt
Collator
Date
DateTimeFormat
DisplayNames
Error
EvalError
FinalizationRegistry
Intl
ListFormat
Loader
Locale
NumberFormat
PluralRules
Reflect
RelativeTimeFormat
RemotePlayback
Segmenter
SharedArrayBuffer
Temporal
WeakRef
__defineGetter__
__defineSetter__
__lookupGetter__
__lookupSetter__
additionalJettisonReason
async
back
byteLength
byteOffset
bytecode
bytecodeIndex
bytecodes
bytecodesID
caseFirst
cause
clear
collation
compilationKind
compilationUID
compilations
compile
counters
dateStyle
days
deref
description
descriptions
detail
dotAll
eraYear
errors
events
exitKind
fallback
formatMatcher
formatToParts
forward
fractionalSecondDigits
granularity
groups
hasIndices
hasOwn
hasOwnProperty
hash
hours
hourCycle
hour12
ignoreCase
ignorePunctuation
indices
inferredName
input
isoHour
isoMicrosecond
isoMillisecond
isoMinute
isoNanosecond
isoSecond
instructionCount
isEnabled
isPrototypeOf
isWatchpoint
isWordLike
jettisonReason
join
language
languageDisplay
largestUnit
lastIndex
locale
localeMatcher
maximumFractionDigits
maximumSignificantDigits
microsecond
microseconds
millisecond
milliseconds
minimumFractionDigits
minimumIntegerDigits
minimumSignificantDigits
minutes
monthCode
months
multiline
nanosecond
nanoseconds
numInlinedCalls
numInlinedGetByIds
numInlinedPutByIds
numberingSystem
opcode
origin
osrExitSites
osrExits
overflow
parseInt
parseFloat
profiledBytecodes
propertyIsEnumerable
region
roundingIncrement
roundingMode
roundingPriority
script
seconds
segment
selectRange
sensitivity
slice
smallestUnit
sourceCode
stack
stackTraceLimit
sticky
style
summary
time
timeStyle
timeZone
toExponential
toFixed
toISOString
toJSON
toPrecision
toTemporalInstant
trailingZeroDisplay
unicode
usage
valueOf
week
weeks
years
#constructor
CommonSlowPaths
'super()' must be called in derived constructor before accessing |this| or returning non-object.
LLInt log full.
./runtime/CommonSlowPaths.cpp
JSC::SlowPathReturnType JSC::slow_path_throw_static_error(JSC::CallFrame *, const JSC::Instruction *)
JSC::SlowPathReturnType JSC::slow_path_new_array_with_spread(JSC::CallFrame *, const JSC::Instruction *)
CompilationFailed
CompilationInvalidated
CompilationSuccessful
CompilationDeferred
./runtime/CompilationResult.cpp
void WTF::printInternal(WTF::PrintStream &, JSC::CompilationResult)
./runtime/Completion.cpp
bool JSC::checkSyntax(JSC::JSGlobalObject *, const JSC::SourceCode &, JSC::JSValue *)
bool JSC::checkSyntax(JSC::VM &, const JSC::SourceCode &, JSC::ParserError &)
bool JSC::checkModuleSyntax(JSC::JSGlobalObject *, const JSC::SourceCode &, JSC::ParserError &)
EntryPointModule
RefPtr<JSC::CachedBytecode> JSC::generateProgramBytecode(JSC::VM &, const JSC::SourceCode &, FileSystem::PlatformFileHandle, JSC::BytecodeCacheError &)
RefPtr<JSC::CachedBytecode> JSC::generateModuleBytecode(JSC::VM &, const JSC::SourceCode &, FileSystem::PlatformFileHandle, JSC::BytecodeCacheError &)
JSC::JSValue JSC::evaluate(JSC::JSGlobalObject *, const JSC::SourceCode &, JSC::JSValue, NakedPtr<JSC::Exception> &)
JSC::JSInternalPromise *JSC::loadAndEvaluateModule(JSC::JSGlobalObject *, JSC::Symbol *, JSC::JSValue, JSC::JSValue)
JSC::JSInternalPromise *JSC::loadAndEvaluateModule(JSC::JSGlobalObject *, const WTF::String &, JSC::JSValue, JSC::JSValue)
JSC::JSInternalPromise *JSC::loadAndEvaluateModule(JSC::JSGlobalObject *, const JSC::SourceCode &, JSC::JSValue)
JSC::JSInternalPromise *JSC::loadModule(JSC::JSGlobalObject *, const WTF::String &, JSC::JSValue, JSC::JSValue)
JSC::JSInternalPromise *JSC::loadModule(JSC::JSGlobalObject *, const JSC::SourceCode &, JSC::JSValue)
JSC::JSValue JSC::linkAndEvaluateModule(JSC::JSGlobalObject *, const JSC::Identifier &, JSC::JSValue)
JSC::JSInternalPromise *JSC::importModule(JSC::JSGlobalObject *, const JSC::Identifier &, JSC::JSValue, JSC::JSValue)
Error in JSC Config file on or near line %u, parsing '%s'
(unknown)
console
warn
dirxml
table
trace
countReset
profile
profileEnd
timeLog
timeEnd
timeStamp
takeHeapSnapshot
groupCollapsed
groupEnd
recordEnd
screenshot
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
./runtime/CommonSlowPaths.h
JSC::JSValue JSC::CommonSlowPaths::opEnumeratorGetByVal(JSC::JSGlobalObject *, JSC::JSValue, JSC::JSValue, unsigned int, JSPropertyNameEnumerator::Flag, JSC::JSPropertyNameEnumerator *, JSC::ArrayProfile *, uint8_t *)
./runtime/GetPutInfo.h
Failed to open file JSC Config file '%s'.
jscOptions
logFile
%s/%s
processName
parentProcessName
build
Release
NETWORK
STORAGE
APPCACHE
RENDERING
SECURITY
CONTENTBLOCKER
MEDIA
MEDIASOURCE
WEBRTC
ITPDEBUG
PRIVATECLICKMEASUREMENT
PAYMENTREQUEST
OTHER
CLEAR
DIRXML
TABLE
TRACE
STARTGROUP
STARTGROUPCOLLAPSED
ENDGROUP
ASSERT
TIMING
PROFILE
PROFILEEND
IMAGE
DEBUG
INFO
WARN
ERROR
JSC::SlowPathReturnType JSC::iteratorNextTryFastImpl(JSC::VM &, JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::CallFrame *, JSC::ThrowScope &, const JSC::Instruction *) [width = JSC::Narrow]
JSC::SlowPathReturnType JSC::iteratorNextTryFastImpl(JSC::VM &, JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::CallFrame *, JSC::ThrowScope &, const JSC::Instruction *) [width = JSC::Wide16]
JSC::SlowPathReturnType JSC::iteratorNextTryFastImpl(JSC::VM &, JSC::JSGlobalObject *, JSC::CodeBlock *, JSC::CallFrame *, JSC::ThrowScope &, const JSC::Instruction *) [width = JSC::Wide32]
SourceID: 
CustomGetterSetter
DOMAttributeGetterSetter
Function
Date
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
./runtime/ControlFlowProfiler.cpp
JSC::BasicBlockRange JSC::findBasicBlockAtTextOffset(int, const Vector<JSC::BasicBlockRange> &)
parse
Object
toUTCString
toGMTString
./runtime/DeferredWorkTimer.cpp
DeferredWorkTimer::Ticket JSC::DeferredWorkTimer::addPendingWork(JSC::VM &, JSC::JSObject *, Vector<Strong<JSC::JSCell>> &&)
Arguments
./runtime/DirectArguments.cpp
void JSC::DirectArguments::overrideThings(JSC::JSGlobalObject *)
capturedArgumentInvalid
capturedArgument
StrictMode
NotStrictMode
toString
toISOString
toDateString
toTimeString
toLocaleString
toLocaleDateString
toLocaleTimeString
valueOf
getTime
getFullYear
getUTCFullYear
getMonth
getUTCMonth
getDate
getUTCDate
getDay
getUTCDay
getHours
getUTCHours
getMinutes
getUTCMinutes
getSeconds
getUTCSeconds
getMilliseconds
getUTCMilliseconds
getTimezoneOffset
getYear
setTime
setMilliseconds
setUTCMilliseconds
setSeconds
setUTCSeconds
setMinutes
setUTCMinutes
setHours
setUTCHours
setDate
setUTCDate
setMonth
setUTCMonth
setFullYear
setUTCFullYear
setYear
toJSON
Invalid Date
%+07d-%02d-%02dT%02d:%02d:%02d.%03dZ
%04d-%02d-%02dT%02d:%02d:%02d.%03dZ
toISOString is not a function
Date.prototype[Symbol.toPrimitive] expected |this| to be an object.
Date.prototype[Symbol.toPrimitive] expected a first argument.
Invalid integer number of Epoch Millseconds
./runtime/GenericArgumentsInlines.h
void JSC::GenericArguments<JSC::DirectArguments>::initModifiedArgumentsDescriptor(JSC::JSGlobalObject *, unsigned int) [Type = JSC::DirectArguments]
Not enough arguments
 getter can only be used on instances of 
 setter can only be used on instances of 
calling 
 constructor without new is invalid
Syntax error
Type error
Out of memory
Out of memory: 
Function
./runtime/ErrorHandlingScope.cpp
JSC::ErrorHandlingScope::ErrorHandlingScope(JSC::VM &)
JSC::ErrorHandlingScope::~ErrorHandlingScope()
Error
Object
EvalError
RangeError
ReferenceError
SyntaxError
TypeError
URIError
AggregateError
OutOfMemoryError
EvalExecutable
toString
Exception
JSC EXCEPTION FUZZ: Throwing fuzz exception with call frame %p, seen in %s and return address %p.
Exception Fuzz
Maximum call stack size exceeded.
Can't find private variable: PrivateSymbol.
Can't find variable: 
 (evaluating '
second argument to Function.prototype.apply must be an Array-like object
is not an Object.
 is not a function
[Symbol.hasInstance] is not a function, undefined, or null
is not a constructor
is not a function
is not an object
is not an object or null
Cannot access uninitialized variable.
Cannot access invalid private field
Cannot redefine existing private field
Cannot access private method or acessor
Cannot install same private methods on object more than once
Executable
NativeExecutable:
EvalExecutable w/o CodeBlock
ProgramExecutable w/o CodeBlock
ModuleProgramExecutable w/o CodeBlock
FunctionExecutable w/o CodeBlock
./runtime/ExecutableBase.cpp
void JSC::ExecutableBase::dump(WTF::PrintStream &) const
./runtime/FileBasedFuzzerAgent.cpp
virtual JSC::SpeculatedType JSC::FileBasedFuzzerAgent::getPredictionInternal(JSC::CodeBlock *, JSC::PredictionTarget &, JSC::SpeculatedType)
[35m
[33m
 missing prediction for: 
[31m
[32m
[36m
 divot: 
 name: '
' source: '
[34m
 original: 
 generated: 
 (near '...
...')
 is not an Object. (evaluating '
. (evaluating '
./runtime/ExceptionHelpers.cpp
WTF::String JSC::notAFunctionSourceAppender(const WTF::String &, const WTF::String &, JSC::RuntimeType, ErrorInstance::SourceTextWhereErrorOccurred)
 is not a function. (In '
an instance of 
object is not a function.
The value of the superclass's prototype property is not an object or null.
Function
FinalizationRegistry
register
unregister
FunctionExecutable
./runtime/FunctionExecutable.cpp
JSC::FunctionExecutable::FunctionExecutable(JSC::VM &, const JSC::SourceCode &, JSC::UnlinkedFunctionExecutable *, JSC::Intrinsic, bool)
JSC::FunctionCodeBlock *JSC::FunctionExecutable::baselineCodeBlockFor(JSC::CodeSpecializationKind)
() {
    [native code]
function* 
async function 
async 
async function* 
<nogen>
FunctionRareData
AllocationProfileClearingWatchpoint fired.
First argument to FinalizationRegistry should be a function
register requires an object as the target
register expects the target object and the holdings parameter are not the same. Otherwise, the target can never be collected
register requires an object as the unregistration token
Called FinalizationRegistry function on non-object
Called FinalizationRegistry function on a non-FinalizationRegistry object
unregister requires an object is the unregistration token
function *
async function*
() {
() {
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = JSC::RetrieveArgumentsFunctor]
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = JSC::RetrieveCallerFunctionFunctor]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/ObjectAllocationProfileInlines.h
void JSC::ObjectAllocationProfileBase<JSC::ObjectAllocationProfileWithPrototype>::initializeProfile(JSC::VM &, JSC::JSGlobalObject *, JSC::JSCell *, JSC::JSObject *, unsigned int, JSC::JSFunction *, JSC::FunctionRareData *) [Derived = JSC::ObjectAllocationProfileWithPrototype]
./runtime/FuzzerPredictions.cpp
JSC::FuzzerPredictions::FuzzerPredictions(const char *)
GeneratorFunction
Generator
GetterSetter
GlobalExecutable
WTF::String JSC::readFileIntoString(const char *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
next
return
throw
ThrowIfNotFound
DoNotThrowIfNotFound
GlobalProperty
GlobalVar
GlobalLexicalVar
ClosureVar
ResolvedClosureVar
ModuleVar
GlobalPropertyWithVarInjectionChecks
GlobalVarWithVarInjectionChecks
GlobalLexicalVarWithVarInjectionChecks
ClosureVarWithVarInjectionChecks
UnresolvedProperty
UnresolvedPropertyWithVarInjectionChecks
Dynamic
Initialization
ConstInitialization
NotInitialization
./runtime/GetterSetter.h
static bool JSC::GetterSetter::put(JSC::JSCell *, JSC::JSGlobalObject *, JSC::PropertyName, JSC::JSValue, JSC::PutPropertySlot &)
static bool JSC::GetterSetter::putByIndex(JSC::JSCell *, JSC::JSGlobalObject *, unsigned int, JSC::JSValue, bool)
static bool JSC::GetterSetter::deleteProperty(JSC::JSCell *, JSC::JSGlobalObject *, JSC::PropertyName, JSC::DeletePropertySlot &)
static bool JSC::GetterSetter::getOwnPropertySlot(JSC::JSObject *, JSC::JSGlobalObject *, JSC::PropertyName, JSC::PropertySlot &)
static bool JSC::GetterSetter::defineOwnProperty(JSC::JSObject *, JSC::JSGlobalObject *, JSC::PropertyName, const JSC::PropertyDescriptor &, bool)
static bool JSC::GetterSetter::setPrototype(JSC::JSObject *, JSC::JSGlobalObject *, JSC::JSValue, bool)
./runtime/HashMapImplInlines.h
void JSC::HashMapImpl<JSC::HashMapBucket<JSC::HashMapBucketDataKeyValue>>::finishCreation(JSC::JSGlobalObject *, JSC::VM &, HashMapImpl<HashMapBucketType> *) [HashMapBucketType = JSC::HashMapBucket<JSC::HashMapBucketDataKeyValue>]
void JSC::HashMapImpl<JSC::HashMapBucket<JSC::HashMapBucketDataKey>>::finishCreation(JSC::JSGlobalObject *, JSC::VM &, HashMapImpl<HashMapBucketType> *) [HashMapBucketType = JSC::HashMapBucket<JSC::HashMapBucketDataKey>]
HashMapBucket
PrivateSymbol.
<null identifier>
NonArray
NonArrayWithInt32
NonArrayWithDouble
NonArrayWithContiguous
NonArrayWithArrayStorage
NonArrayWithSlowPutArrayStorage
ArrayClass
ArrayWithUndecided
ArrayWithInt32
ArrayWithDouble
ArrayWithContiguous
ArrayWithArrayStorage
ArrayWithSlowPutArrayStorage
CopyOnWriteArrayWithInt32
CopyOnWriteArrayWithDouble
CopyOnWriteArrayWithContiguous
Unknown!
%s%s
|MayHaveIndexedAccessors
Function
Allocated masquerading object
Cannot get function realm from revoked Proxy
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/AbstractSlotVisitorInlines.h
JSC::AbstractSlotVisitor::ReferrerContext::ReferrerContext(JSC::AbstractSlotVisitor &, JSC::AbstractSlotVisitor::ReferrerToken)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
./runtime/InitializeThreading.cpp
auto JSC::initialize()::(anonymous class)::operator()() const
Object
usage must be either "sort" or "search"
collation is not a well-formed collation value
caseFirst must be either "upper", "lower", or "false"
failed to initialize Collator due to invalid locale
accent
variant
sensitivity must be either "base", "accent", "case", or "variant"
-u-co-
-u-co-search
failed to initialize Collator
Failed to compare strings.
Function
Intl.Collator
Intl.Collator.prototype.compare called on value that's not a Collator
compare
Intl.DateTimeFormat
formatRangeToParts
Intl.DateTimeFormat.prototype.format called on value that's not a DateTimeFormat
format
failed to initialize DisplayNames due to invalid locale
style must be either "narrow", "short", or "long"
dateTimeField
type must be either "language", "region", "script", "currency", "calendar", or "dateTimeField"
type must not be undefined
none
fallback must be either "code" or "none"
dialect
languageDisplay must be either "dialect" or "standard"
failed to initialize DisplayNames
argument is not a language id
argument is not a region subtag
argument is not a script subtag
argument is not a well-formed currency code
Failed to query a display name.
argument is not a calendar code
argument is not a dateTimeField code
Intl.DisplayNames
supportedLocalesOf
resolvedOptions
Intl.Collator.prototype.resolvedOptions called on value that's not a Collator
formatRange
Intl.DateTimeFormat.prototype.formatRange called on value that's not a DateTimeFormat
startDate or endDate is undefined
startDate is larger than endDate
Intl.DateTimeFormat.prototype.formatToParts called on value that's not a DateTimeFormat
Intl.DateTimeFormat.prototype.resolvedOptions called on value that's not a DateTimeFormat
Intl.DateTimeFormat.prototype.formatRangeToParts called on value that's not a DateTimeFormat
Intl.DisplayNames.prototype.of called on value that's not a DisplayNames
Intl.DisplayNames.prototype.resolvedOptions called on value that's not a DisplayNames
Function
Intl.ListFormat
Object
invalid language tag
language is not a well-formed language value
script is not a well-formed script value
region is not a well-formed region value
colcasefirst
colnumeric
numbers
failed to initialize Locale
invalid locale
direction
firstDay
weekend
minimalDays
Locale
Intl.Locale
Intl.Locale.prototype.baseName called on value that's not a Locale
Intl.Locale.prototype.calendar called on value that's not a Locale
Intl.Locale.prototype.calendars called on value that's not a Locale
Intl.Locale.prototype.caseFirst called on value that's not a Locale
Intl.Locale.prototype.collation called on value that's not a Locale
Intl.Locale.prototype.collations called on value that's not a Locale
Intl.Locale.prototype.hourCycle called on value that's not a Locale
Intl.Locale.prototype.hourCycles called on value that's not a Locale
Intl.Locale.prototype.numeric called on value that's not a Locale
Intl.Locale.prototype.numberingSystem called on value that's not a Locale
Intl.Locale.prototype.numberingSystems called on value that's not a Locale
Intl.Locale.prototype.language called on value that's not a Locale
Intl.Locale.prototype.script called on value that's not a Locale
Intl.Locale.prototype.region called on value that's not a Locale
Intl.Locale.prototype.timeZones called on value that's not a Locale
Intl.Locale.prototype.textInfo called on value that's not a Locale
Intl.Locale.prototype.weekInfo called on value that's not a Locale
NumberFormat
Intl.NumberFormat
Intl.NumberFormat.prototype.format called on value that's not a NumberFormat
format
Intl
area
acre
digital
byte
temperature
celsius
length
centimeter
duration
angle
degree
fahrenheit
volume
fluid-ounce
foot
gallon
gigabit
gigabyte
mass
gram
hectare
hour
inch
kilobit
kilobyte
kilogram
kilometer
liter
megabit
megabyte
meter
mile
mile-scandinavian
milliliter
millimeter
millisecond
minute
month
ounce
concentr
percent
petabyte
pound
second
stone
terabit
terabyte
week
yard
year
supportedValuesOf
 is out of range
locale value must be a string or object
invalid language tag: 
lookup
best fit
localeMatcher must be either "lookup" or "best fit"
gregorian
gregory
ethiopic-amete-alem
ethioaa
islamic-civil
dict
gb2312
phonebk
trad
supportedLocalesOf
formatToParts
resolvedOptions
Intl.ListFormat.prototype.format called on value that's not a ListFormat
Intl.ListFormat.prototype.formatToParts called on value that's not a ListFormat
Intl.ListFormat.prototype.resolvedOptions called on value that's not a ListFormat
First argument to Intl.Locale must be a string or an object
maximize
minimize
baseName
calendars
collations
hourCycles
numberingSystems
timeZones
textInfo
weekInfo
Intl.Locale.prototype.maximize called on value that's not a Locale
Intl.Locale.prototype.minimize called on value that's not a Locale
Intl.Locale.prototype.toString called on value that's not a Locale
Intl.NumberFormat.prototype.formatToParts called on value that's not a NumberFormat
Intl.NumberFormat.prototype.resolvedOptions called on value that's not a NumberFormat
Intl.NumberFormat.prototype.formatRange called on value that's not a NumberFormat
start or end is undefined
Intl.NumberFormat.prototype.formatRangeToParts called on value that's not a NumberFormat
getCanonicalLocales
Collator
DateTimeFormat
DisplayNames
PluralRules
RelativeTimeFormat
Segmenter
./runtime/IntlObject.cpp
JSC::MatcherResult JSC::lookupMatcher(JSC::JSGlobalObject *, const JSC::LocaleSet &, const Vector<WTF::String> &)
Unknown key for Intl.supportedValuesOf
failed to enumerate available collations
emoji
failed to enumerate available currencies
failed to enumerate available numbering systems
auto JSC::iso8601CalendarIDSlow()::(anonymous class)::operator()() const
SystemV/
Etc/
Etc/UTC
Etc/GMT
Function
PluralRules
Intl.PluralRules
Object
failed to initialize RelativeTimeFormat due to invalid locale
numeric must be either "always" or "auto"
failed to initialize RelativeTimeFormat
number argument must be finite
unit argument is not a recognized unit type
failed to format relative time
RelativeTimeFormat
Intl.RelativeTimeFormat
Segment String Iterator
failed to initialize Segmenter due to invalid locale
grapheme
word
sentence
granularity must be either "grapheme", "word", or "sentence"
failed to initialize Segmenter
failed to initialize Segments
supportedLocalesOf
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
select
resolvedOptions
Intl.PluralRules.prototype.select called on value that's not a PluralRules
Intl.PluralRules.prototype.resolvedOptions called on value that's not a PluralRules
Intl.PluralRules.prototype.selectRange called on value that's not a PluralRules
quarter
format
formatToParts
Intl.RelativeTimeFormat.prototype.format called on value that's not a RelativeTimeFormat
Intl.RelativeTimeFormat.prototype.formatToParts called on value that's not a RelativeTimeFormat
Intl.RelativeTimeFormat.prototype.resolvedOptions called on value that's not a RelativeTimeFormat
next
Intl.SegmentIterator.prototype.next called on value that's not a SegmentIterator
Function
Segmenter
Intl.Segmenter
Object
failed to initialize SegmentIterator
%Segments%
NoIntrinsic
AbsIntrinsic
ACosIntrinsic
ASinIntrinsic
ATanIntrinsic
ACoshIntrinsic
ASinhIntrinsic
ATanhIntrinsic
MinIntrinsic
MaxIntrinsic
SqrtIntrinsic
SinIntrinsic
CbrtIntrinsic
Clz32Intrinsic
CosIntrinsic
TanIntrinsic
CoshIntrinsic
SinhIntrinsic
TanhIntrinsic
ArrayIndexOfIntrinsic
ArrayPushIntrinsic
ArrayPopIntrinsic
ArraySliceIntrinsic
ArrayValuesIntrinsic
ArrayKeysIntrinsic
ArrayEntriesIntrinsic
CharCodeAtIntrinsic
CharAtIntrinsic
DatePrototypeGetTimeIntrinsic
DatePrototypeGetFullYearIntrinsic
DatePrototypeGetUTCFullYearIntrinsic
DatePrototypeGetMonthIntrinsic
DatePrototypeGetUTCMonthIntrinsic
DatePrototypeGetDateIntrinsic
DatePrototypeGetUTCDateIntrinsic
DatePrototypeGetDayIntrinsic
DatePrototypeGetUTCDayIntrinsic
DatePrototypeGetHoursIntrinsic
DatePrototypeGetUTCHoursIntrinsic
DatePrototypeGetMinutesIntrinsic
DatePrototypeGetUTCMinutesIntrinsic
DatePrototypeGetSecondsIntrinsic
DatePrototypeGetUTCSecondsIntrinsic
DatePrototypeGetMillisecondsIntrinsic
DatePrototypeGetUTCMillisecondsIntrinsic
DatePrototypeGetTimezoneOffsetIntrinsic
DatePrototypeGetYearIntrinsic
FromCharCodeIntrinsic
PowIntrinsic
FloorIntrinsic
CeilIntrinsic
RoundIntrinsic
ExpIntrinsic
Expm1Intrinsic
LogIntrinsic
Log10Intrinsic
Log1pIntrinsic
Log2Intrinsic
RegExpExecIntrinsic
RegExpTestIntrinsic
RegExpTestFastIntrinsic
RegExpMatchFastIntrinsic
ObjectAssignIntrinsic
ObjectCreateIntrinsic
ObjectGetOwnPropertyNamesIntrinsic
ObjectGetPrototypeOfIntrinsic
ObjectIsIntrinsic
ObjectKeysIntrinsic
ReflectGetPrototypeOfIntrinsic
StringPrototypeCodePointAtIntrinsic
StringPrototypeValueOfIntrinsic
StringPrototypeReplaceIntrinsic
StringPrototypeReplaceRegExpIntrinsic
StringPrototypeSliceIntrinsic
StringPrototypeToLowerCaseIntrinsic
NumberPrototypeToStringIntrinsic
NumberIsIntegerIntrinsic
IMulIntrinsic
RandomIntrinsic
FRoundIntrinsic
TruncIntrinsic
TypedArrayValuesIntrinsic
TypedArrayKeysIntrinsic
TypedArrayEntriesIntrinsic
IsTypedArrayViewIntrinsic
BoundFunctionCallIntrinsic
JSMapGetIntrinsic
JSMapHasIntrinsic
JSMapSetIntrinsic
JSMapValuesIntrinsic
JSMapKeysIntrinsic
JSMapEntriesIntrinsic
JSMapBucketHeadIntrinsic
JSMapBucketNextIntrinsic
JSMapBucketKeyIntrinsic
JSMapBucketValueIntrinsic
JSSetHasIntrinsic
JSSetAddIntrinsic
JSSetValuesIntrinsic
JSSetEntriesIntrinsic
JSSetBucketHeadIntrinsic
JSSetBucketNextIntrinsic
JSSetBucketKeyIntrinsic
JSWeakMapGetIntrinsic
JSWeakMapHasIntrinsic
JSWeakMapSetIntrinsic
JSWeakSetHasIntrinsic
JSWeakSetAddIntrinsic
HasOwnPropertyIntrinsic
AtomicsAddIntrinsic
AtomicsAndIntrinsic
AtomicsCompareExchangeIntrinsic
AtomicsExchangeIntrinsic
AtomicsIsLockFreeIntrinsic
AtomicsLoadIntrinsic
AtomicsNotifyIntrinsic
AtomicsOrIntrinsic
AtomicsStoreIntrinsic
AtomicsSubIntrinsic
AtomicsWaitIntrinsic
AtomicsXorIntrinsic
ParseIntIntrinsic
FunctionToStringIntrinsic
TypedArrayLengthIntrinsic
TypedArrayByteLengthIntrinsic
TypedArrayByteOffsetIntrinsic
UnderscoreProtoIntrinsic
DFGTrueIntrinsic
FTLTrueIntrinsic
OSRExitIntrinsic
IsFinalTierIntrinsic
SetInt32HeapPredictionIntrinsic
CheckInt32Intrinsic
FiatInt52Intrinsic
CPUMfenceIntrinsic
CPURdtscIntrinsic
CPUCpuidIntrinsic
CPUPauseIntrinsic
DataViewGetInt8
DataViewGetUint8
DataViewGetInt16
DataViewGetUint16
DataViewGetInt32
DataViewGetUint32
DataViewGetFloat32
DataViewGetFloat64
DataViewSetInt8
DataViewSetUint8
DataViewSetInt16
DataViewSetUint16
DataViewSetInt32
DataViewSetUint32
DataViewSetFloat32
DataViewSetFloat64
WasmFunctionIntrinsic
./runtime/Intrinsic.cpp
const char *JSC::intrinsicName(JSC::Intrinsic)
./runtime/IteratorOperations.cpp
JSC::Structure *JSC::createIteratorResultObjectStructure(JSC::VM &, JSC::JSGlobalObject &)
Symbol.iterator property should be callable
Iterator
Length exceeded the maximum array length
Array
Attempting to define numeric property on array with non-writable length property.
Array length is not writable
./runtime/JSArray.cpp
bool JSC::JSArray::unshiftCountSlowCase(const WTF::AbstractLocker &, JSC::VM &, JSC::DeferGC &, bool, unsigned int)
JSC::JSValue JSC::JSArray::pop(JSC::JSGlobalObject *)
bool JSC::JSArray::shiftCountWithArrayStorage(JSC::VM &, unsigned int, unsigned int, JSC::ArrayStorage *)
bool JSC::JSArray::shiftCountWithAnyIndexingType(JSC::JSGlobalObject *, unsigned int &, unsigned int)
bool JSC::JSArray::unshiftCountWithArrayStorage(JSC::JSGlobalObject *, unsigned int, unsigned int, JSC::ArrayStorage *)
supportedLocalesOf
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
segment
resolvedOptions
Intl.Segmenter.prototype.segment called on value that's not a Segmenter
Intl.Segmenter.prototype.resolvedOptions called on value that's not a Segmenter
containing
%Segments.prototype%.containing called on value that's not a Segments
%Segments.prototype%[@@iterator] called on value that's not a Segments
./runtime/IndexingHeader.h
bool JSC::JSObject::hasSparseMap()
JSC::JSArray *JSC::constructArray(JSC::ObjectInitializationScope &, JSC::Structure *, unsigned int)
void JSC::JSObject::initializeIndex(JSC::ObjectInitializationScope &, unsigned int, JSC::JSValue, JSC::IndexingType)
ArrayBuffer
Function
constructor property should not be null
ArrayBufferView
./runtime/JSArrayBufferView.cpp
JSC::JSArrayBufferView::ConstructionContext::ConstructionContext(JSC::Structure *, size_t, void *)
void JSC::JSArrayBufferView::finishCreation(JSC::VM &)
JSC::ArrayBuffer *JSC::JSArrayBufferView::unsharedBuffer()
void JSC::JSArrayBufferView::detach()
JSC::ArrayBuffer *JSC::JSArrayBufferView::slowDownAndWasteMemory()
RefPtr<JSC::ArrayBufferView> JSC::JSArrayBufferView::possiblySharedImpl()
Argument needs to be a typed array.
FastTypedArray
OversizeTypedArray
WastefulTypedArray
DataViewMode
void WTF::printInternal(WTF::PrintStream &, JSC::TypedArrayMode)
ArrayIterator
AsyncFunction
Allocating an async function
AsyncGenerator
JSAsyncGeneratorFunction
Allocating an async generator
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
SharedArrayBuffer
./runtime/ArrayBufferSharingMode.h
WTF::ASCIILiteral JSC::arrayBufferSharingModeName(JSC::ArrayBufferSharingMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
./runtime/JSGlobalObject.h
JSC::JSObject *JSC::JSGlobalObject::arrayBufferPrototype(JSC::ArrayBufferSharingMode) const
JSC::InlineWatchpointSet &JSC::JSGlobalObject::arrayBufferSpeciesWatchpointSet(JSC::ArrayBufferSharingMode)
JSC::JSObject *JSC::JSGlobalObject::arrayBufferConstructor(JSC::ArrayBufferSharingMode) const
Receiver must be 
Receiver is detached
Species construction does not create ArrayBuffer
ArrayBuffer.prototype.slice creates SharedArrayBuffer
Created ArrayBuffer is detached
SharedArrayBuffer.prototype.slice creates non-shared ArrayBuffer
Species construction returns same ArrayBuffer to a receiver
Species construction returns ArrayBuffer which byteLength is less than requested
./runtime/ButterflyInlines.h
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/GCMemoryOperations.h
void JSC::gcSafeMemcpy(T *, T *, size_t) [T = JSC::JSValue]
static void JSC::JSArrayBufferView::visitChildrenImpl(JSC::JSCell *, Visitor &) [Visitor = JSC::AbstractSlotVisitor]
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/ConcurrentPtrHashSet.h
bool WTF::ConcurrentPtrHashSet::addImpl(void *)
static void JSC::JSArrayBufferView::visitChildrenImpl(JSC::JSCell *, Visitor &) [Visitor = JSC::SlotVisitor]
BigInt
0123456789abcdefghijklmnopqrstuvwxyz
BigInt generated from this operation is too big
Conversion from 'BigInt' to 'number' is not allowed.
Function
./runtime/JSBoundFunction.cpp
JSC::EncodedJSValue JSC::boundThisNoArgsFunctionCall(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::boundThisNoArgsFunctionConstruct(JSC::JSGlobalObject *, JSC::CallFrame *)
./runtime/JSCConfig.cpp
static void JSC::Config::disableFreezingForTesting()
static void JSC::Config::enableRestrictedOptions()
Cannot convert a symbol to a string
Invalid argument type in ToBigInt operation
<JSValue()>
Int32: %d
Double: %lld, %lf
 (rope)
 (atomic)
 (symbol)
 (unresolved)
,8Bit:(1)
,8Bit:(0)
,length:(
RegExp: 
Symbol: 
Structure: 
BigInt[heap-allocated]: addr=
, length=
, sign=
Object: 
 with butterfly 
(base=
 (Structure 
Cell: 
, StructureID: 
True
False
Null
Undefined
INVALID
(unresolved string)
Structure[ 
 ID: 
Cell[
Callee
<%p, %s>
./runtime/JSCell.cpp
static bool JSC::JSCell::getOwnPropertySlot(JSC::JSObject *, JSC::JSGlobalObject *, JSC::PropertyName, JSC::PropertySlot &)
static bool JSC::JSCell::getOwnPropertySlotByIndex(JSC::JSObject *, JSC::JSGlobalObject *, unsigned int, JSC::PropertySlot &)
static void JSC::JSCell::getOwnPropertyNames(JSC::JSObject *, JSC::JSGlobalObject *, JSC::PropertyNameArray &, JSC::DontEnumPropertiesMode)
static void JSC::JSCell::getOwnSpecialPropertyNames(JSC::JSObject *, JSC::JSGlobalObject *, JSC::PropertyNameArray &, JSC::DontEnumPropertiesMode)
static bool JSC::JSCell::customHasInstance(JSC::JSObject *, JSC::JSGlobalObject *, JSC::JSValue)
static bool JSC::JSCell::defineOwnProperty(JSC::JSObject *, JSC::JSGlobalObject *, JSC::PropertyName, const JSC::PropertyDescriptor &, bool)
static bool JSC::JSCell::preventExtensions(JSC::JSObject *, JSC::JSGlobalObject *)
static bool JSC::JSCell::isExtensible(JSC::JSObject *, JSC::JSGlobalObject *)
static bool JSC::JSCell::setPrototype(JSC::JSObject *, JSC::JSGlobalObject *, JSC::JSValue, bool)
static JSC::JSValue JSC::JSCell::getPrototype(JSC::JSObject *, JSC::JSGlobalObject *)
get 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/AbstractSlotVisitorInlines.h
JSC::AbstractSlotVisitor::ReferrerContext::ReferrerContext(JSC::AbstractSlotVisitor &, JSC::AbstractSlotVisitor::ReferrerToken)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
void JSC::StructureIDTable::validate(JSC::StructureID)
Failed to parse String to BigInt
Negative exponent is not allowed
0 is an invalid divisor value.
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/LockAlgorithmInlines.h
static void WTF::LockAlgorithm<unsigned char, '@', '\x80'>::lockSlow(Atomic<LockType> &) [LockType = unsigned char, isHeldBit = '@', hasParkedBit = '\x80', Hooks = WTF::EmptyLockHooks<unsigned char>]
Function
set 
DataView
DataView.prototype.buffer expects |this| to be a DataView object
DataView.prototype.byteLength expects |this| to be a DataView object
DataView.prototype.byteOffset expects |this| to be a DataView object
FinalizationRegistry
This should not be visible: please report a bug to bugs.webkit.org
Allocating a function
Store to prototype property of a function
wasm-stub
Generator
GeneratorFunction
Allocating a generator function
getInt8
getUint8
getInt16
getUint16
getInt32
getUint32
getFloat32
getFloat64
getBigInt64
getBigUint64
setInt8
setUint8
setInt16
setUint16
setInt32
setUint32
setFloat32
setFloat64
setBigInt64
setBigUint64
buffer
Receiver of DataView method must be a DataView
Out of bounds access
./runtime/JSString.h
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/MarkedBlockInlines.h
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::JSDestructibleObjectDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::JSDestructibleObjectDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksNotStale, DestroyFunc = JSC::JSDestructibleObjectDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = true, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepToFreeList, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::DoesNotHaveNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::JSDestructibleObjectDestroyFunc]
void JSC::MarkedBlock::Handle::specializedSweep(JSC::FreeList *, MarkedBlock::Handle::EmptyMode, MarkedBlock::Handle::SweepMode, MarkedBlock::Handle::SweepDestructionMode, MarkedBlock::Handle::ScribbleMode, MarkedBlock::Handle::NewlyAllocatedMode, MarkedBlock::Handle::MarksMode, const DestroyFunc &) [specialize = false, specializedEmptyMode = JSC::MarkedBlock::Handle::IsEmpty, specializedSweepMode = JSC::MarkedBlock::Handle::SweepOnly, specializedDestructionMode = JSC::MarkedBlock::Handle::BlockHasNoDestructors, specializedScribbleMode = JSC::MarkedBlock::Handle::DontScribble, specializedNewlyAllocatedMode = JSC::MarkedBlock::Handle::HasNewlyAllocated, specializedMarksMode = JSC::MarkedBlock::Handle::MarksStale, DestroyFunc = JSC::JSDestructibleObjectDestroyFunc]
./runtime/JSCast.h
To JSC::jsSecureCast(JSC::VM &, From) [To = JSC::JSObject *, From = JSC::JSValue]
JSGlobalLexicalEnvironment
GlobalObject
./runtime/JSGlobalObject.cpp
void JSC::JSGlobalObject::init(JSC::VM &)
__enableSamplingProfiler
__disableSamplingProfiler
__enableSuperSampler
__disableSuperSampler
__tracePointStart
__tracePointStop
__signpostStart
__signpostStop
GlobalVar was redefined as ReadOnly
void JSC::JSGlobalObject::addGlobalVar(const JSC::Identifier &)
Having a bad time
void JSC::JSGlobalObject::exposeDollarVM(JSC::VM &)
void JSC::JSGlobalObject::addStaticGlobals(JSC::JSGlobalObject::GlobalPropertyInfo *, int)
void JSC::JSGlobalObject::tryInstallSpeciesWatchpoint(JSC::JSObject *, JSC::JSObject *, std::unique_ptr<ObjectPropertyChangeAdaptiveWatchpoint<InlineWatchpointSet>> &, std::unique_ptr<ObjectPropertyChangeAdaptiveWatchpoint<InlineWatchpointSet>> &, JSC::InlineWatchpointSet &)
Set up species watchpoint.
void JSC::JSGlobalObject::tryInstallArraySpeciesWatchpoint()
void JSC::slowValidateCell(JSC::JSGlobalObject *)
Uncaught Exception at run loop: 
JSContext
Object.prototype.__proto__ called on null or undefined
'arguments', 'callee', and 'caller' cannot be accessed in this context.
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!#$&'()*+,-./:;=?@_~
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!'()*-._~
./runtime/JSGlobalObjectFunctions.cpp
JSC::EncodedJSValue JSC::globalFuncImportModule(JSC::JSGlobalObject *, JSC::CallFrame *)
Immutable Butterfly
InternalPromise
InternalPromisePrototype
isNaN
isFinite
escape
unescape
decodeURI
decodeURIComponent
encodeURI
encodeURIComponent
eval
globalThis
parseInt
parseFloat
ArrayBuffer
EvalError
RangeError
ReferenceError
SyntaxError
TypeError
URIError
AggregateError
Proxy
Reflect
JSON
Math
console
Int8Array
Int16Array
Int32Array
Uint8Array
Uint8ClampedArray
Uint16Array
Uint32Array
Float32Array
Float64Array
BigInt64Array
BigUint64Array
DataView
Date
Error
Boolean
Number
Symbol
WeakMap
WeakSet
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
JSC::ObjectPropertyCondition JSC::setupAdaptiveWatchpoint(JSC::JSGlobalObject *, JSC::JSObject *, const JSC::Identifier &)
./runtime/ObjectPropertyChangeAdaptiveWatchpoint.h
JSC::ObjectPropertyChangeAdaptiveWatchpoint<JSC::InlineWatchpointSet>::ObjectPropertyChangeAdaptiveWatchpoint(JSC::JSCell *, const JSC::ObjectPropertyCondition &, WatchpointSet &) [Watchpoint = JSC::InlineWatchpointSet]
Object Property is changed.
./runtime/SymbolTable.h
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/tools/JSDollarVM.h
JSC::DollarVMAssertScope::DollarVMAssertScope()
JSC::DollarVMAssertScope::~DollarVMAssertScope()
Was not able to set up species watchpoint.
double JSC::jsStrDecimalLiteral(const CharType *&, const CharType *) [CharType = unsigned char]
double JSC::jsStrDecimalLiteral(const CharType *&, const CharType *) [CharType = char16_t]
URI error
String contained an illegal UTF-16 sequence.
./runtime/LazyPropertyInlines.h
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:757:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:761:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:765:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:769:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:777:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:781:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:785:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:790:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:795:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:800:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::GetterSetter>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::GetterSetter, Func = (lambda at ./runtime/JSGlobalObject.cpp:824:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::GetterSetter>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::GetterSetter]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::GetterSetter>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::GetterSetter]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSTypedArrayViewPrototype>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSTypedArrayViewPrototype, Func = (lambda at ./runtime/JSGlobalObject.cpp:830:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSTypedArrayViewPrototype>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSTypedArrayViewPrototype]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSTypedArrayViewPrototype>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSTypedArrayViewPrototype]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSTypedArrayViewConstructor>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSTypedArrayViewConstructor, Func = (lambda at ./runtime/JSGlobalObject.cpp:837:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSTypedArrayViewConstructor>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSTypedArrayViewConstructor]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/LazyClassStructureInlines.h:37:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:864:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:868:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:872:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:876:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:883:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:890:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:894:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:900:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:904:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:942:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:946:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:950:9)]
./runtime/ProxyObject.h
static JSC::Structure *JSC::ProxyObject::createStructure(JSC::VM &, JSC::JSGlobalObject *, JSC::JSValue, bool)
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:955:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:960:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:965:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:969:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1145:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1149:9)]
./runtime/ObjectConstructor.h
JSC::Structure *JSC::createDataPropertyDescriptorObjectStructure(JSC::VM &, JSC::JSGlobalObject &)
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1153:9)]
JSC::Structure *JSC::createAccessorPropertyDescriptorObjectStructure(JSC::VM &, JSC::JSGlobalObject &)
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSFunction>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSFunction, Func = (lambda at ./runtime/JSGlobalObject.cpp:1158:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1163:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1169:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1175:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1181:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1187:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1193:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1199:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1205:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1211:9)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::IntlCollator>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::IntlCollator, Func = (lambda at ./runtime/JSGlobalObject.cpp:1231:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::IntlCollator>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::IntlCollator]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::IntlCollator>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::IntlCollator]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1246:13)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1253:13)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1260:13)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1267:13)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1274:13)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSModuleLoader>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSModuleLoader, Func = (lambda at ./runtime/JSGlobalObject.cpp:1287:9)]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSModuleLoader>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSModuleLoader]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1338:5)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1350:81)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1353:81)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1356:91)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1359:91)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1362:90)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1365:92)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1368:91)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1371:91)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1374:90)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1378:90)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1381:96)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1384:88)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1387:91)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1390:92)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1394:94)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1397:110)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1400:99)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1403:92)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1406:94)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1409:100)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1412:88)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1415:105)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1418:102)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1421:93)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1424:102)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1427:88)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1430:88)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1433:93)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1436:81)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1439:83)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1442:93)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1445:96)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1448:89)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1451:90)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1454:90)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1457:105)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1460:91)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1463:89)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1466:97)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1469:91)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1472:87)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1475:96)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1478:103)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1483:90)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1486:86)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1489:93)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1492:94)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1495:93)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1498:92)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1503:100)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1506:99)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1509:93)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1512:101)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1517:95)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1520:98)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1524:92)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1529:97)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1535:113)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1538:117)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::JSCell>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::JSCell, Func = (lambda at ./runtime/JSGlobalObject.cpp:1543:105)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1569:13)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1573:13)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1577:13)]
static ElementType *JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure, Func = (lambda at ./runtime/JSGlobalObject.cpp:1581:13)]
have a bad time breaking internal function allocation
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789*+-./@_
./runtime/ArgList.h
JSLexicalEnvironment
./runtime/JSLock.cpp
void JSC::JSLock::didAcquireLock()
void JSC::JSLock::unlock(intptr_t)
JSC::JSLock::DropAllLocks::DropAllLocks(JSC::VM *)
Map Iterator
JSModuleEnvironment
ModuleLoader
registry
Loader [import] 
Could not import the module '
Loader [resolve] 
Loader [fetch] 
Could not open the module '
Loader [evaluate] 
ModuleNamespaceObject
Module
./runtime/JSModuleNamespaceObject.cpp
bool JSC::JSModuleNamespaceObject::getOwnPropertySlotCommon(JSC::JSGlobalObject *, JSC::PropertyName, JSC::PropertySlot &)
Cannot change module namespace object's binding to accessor
Cannot change module namespace object's binding to non-writable attribute
Cannot replace module namespace object's binding with non-enumerable attribute
Cannot replace module namespace object's binding with configurable attribute
Cannot replace module namespace object's binding's value
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
ensureRegistered
forceFulfillPromise
fulfillFetch
requestFetch
requestInstantiate
requestSatisfy
link
moduleDeclarationInstantiation
moduleEvaluation
asyncModuleEvaluation
evaluate
provideFetch
loadAndEvaluateModule
loadModule
linkAndEvaluateModule
requestImportModule
dependencyKeysIfEvaluated
getModuleNamespaceObject
parseModule
requestedModules
resolve
resolveSync
fetch
Loader [link] 
loader [parsing] 
ModuleRecord
Indirectly exported binding name '
' cannot be resolved due to ambiguous multiple bindings.
Indirectly exported binding name 'default' cannot be resolved by star export entries.
Importing binding name '
Importing binding name 'default' cannot be resolved by star export entries.
Function
JSON.stringify cannot serialize BigInt.
JSON.stringify cannot serialize cyclic structures.
JSON
./runtime/JSObject.cpp
bool JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes(JSC::JSGlobalObject *, unsigned int, JSC::JSValue) [indexingShape = (unsigned char)'\x04']
bool JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes(JSC::JSGlobalObject *, unsigned int, JSC::JSValue) [indexingShape = (unsigned char)'\x06']
bool JSC::JSObject::putByIndexBeyondVectorLengthWithoutAttributes(JSC::JSGlobalObject *, unsigned int, JSC::JSValue) [indexingShape = (unsigned char)'\b']
Attempting to define property on object that is not extensible.
Attempted to assign to readonly property.
Attempting to change value of a readonly property.
Unable to delete property.
Attempting to change access mechanism for an unconfigurable property.
Attempting to change configurable attribute of unconfigurable property.
Attempting to change enumerable attribute of unconfigurable property.
Attempting to change writable attribute of unconfigurable property.
Object
static bool JSC::JSObject::getOwnPropertySlotByIndex(JSC::JSObject *, JSC::JSGlobalObject *, unsigned int, JSC::PropertySlot &)
static bool JSC::JSObject::putByIndex(JSC::JSCell *, JSC::JSGlobalObject *, unsigned int, JSC::JSValue, bool)
JSC::ArrayStorage *JSC::JSObject::enterDictionaryIndexingModeWhenArrayStorageAlreadyExists(JSC::VM &, JSC::ArrayStorage *)
static JSC::Butterfly *JSC::JSObject::createArrayStorageButterfly(JSC::VM &, JSC::JSObject *, JSC::Structure *, unsigned int, unsigned int, JSC::Butterfly *)
JSC::ArrayStorage *JSC::JSObject::ensureArrayStorageSlow(JSC::VM &)
void JSC::JSObject::switchToSlowPutArrayStorage(JSC::VM &)
Cannot set prototype of immutable prototype object
cyclic __proto__ value
static bool JSC::JSObject::deletePropertyByIndex(JSC::JSCell *, JSC::JSGlobalObject *, unsigned int)
No default value
instanceof called on an object with an invalid prototype property.
void JSC::JSObject::getOwnIndexedPropertyNames(JSC::JSGlobalObject *, JSC::PropertyNameArray &, JSC::DontEnumPropertiesMode)
bool JSC::JSObject::defineOwnIndexedProperty(JSC::JSGlobalObject *, unsigned int, const JSC::PropertyDescriptor &, bool)
Attempting to change the setter of an unconfigurable property.
Attempting to change the getter of an unconfigurable property.
bool JSC::JSObject::putByIndexBeyondVectorLength(JSC::JSGlobalObject *, unsigned int, JSC::JSValue, bool)
bool JSC::JSObject::putDirectIndexSlowOrBeyondVectorLength(JSC::JSGlobalObject *, unsigned int, JSC::JSValue, unsigned int, JSC::PutDirectIndexMode)
get 
uint32_t JSC::JSObject::getEnumerableLength(JSC::JSGlobalObject *)
Promise
JSPropertyNameEnumerator
./runtime/JSPropertyNameEnumerator.cpp
JSC::JSString *JSC::JSPropertyNameEnumerator::computeNext(JSC::JSGlobalObject *, JSC::JSObject *, uint32_t &, JSC::JSPropertyNameEnumerator::Flag &, bool)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
UChar WTF::StringBuilder::operator[](unsigned int) const
parse
stringify
JSON Parse error: 
JSON Parse error: Unable to parse JSON string
./runtime/IndexingHeader.h
void JSC::IndexingHeader::setVectorLength(uint32_t)
auto JSC::JSObject::convertFromCopyOnWrite(JSC::VM &)::(anonymous class)::operator()() const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
bool JSC::JSObject::inSparseIndexingMode()
static JSC::Butterfly *JSC::Butterfly::createOrGrowPropertyStorage(JSC::Butterfly *, JSC::VM &, JSC::JSObject *, JSC::Structure *, size_t, size_t)
resolve
reject
race
allSettled
catch
finally
void JSC::gcSafeMemcpy(T *, T *, size_t) [T = JSC::WriteBarrierBase<JSC::Unknown, RawValueTraits<JSC::Unknown>>]
JSObject::visitButterfly
Symbol.toPrimitive is not a function, undefined, or null
Symbol.toPrimitive returned an object
JSProxy
./runtime/JSRunLoopTimer.cpp
void JSC::JSRunLoopTimer::Manager::registerVM(JSC::VM &)
void JSC::JSRunLoopTimer::Manager::unregisterVM(JSC::VM &)
void JSC::JSRunLoopTimer::Manager::scheduleTimer(JSC::JSRunLoopTimer &, WTF::Seconds)
void JSC::JSRunLoopTimer::Manager::cancelTimer(JSC::JSRunLoopTimer &)
std::optional<Seconds> JSC::JSRunLoopTimer::Manager::timeUntilFire(JSC::JSRunLoopTimer &)
Scope
JSScriptFetchParameters
JSScriptFetcher
SegmentedVariableObject
Set Iterator
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/AbstractSlotVisitorInlines.h
JSC::AbstractSlotVisitor::ReferrerContext::ReferrerContext(JSC::AbstractSlotVisitor &, JSC::AbstractSlotVisitor::ReferrerToken)
Allocated a scope
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
JSSourceCode
string
./runtime/JSString.cpp
void JSC::JSRopeString::RopeBuilder<WTF::RecordOverflow>::expand() [OverflowHandler = WTF::RecordOverflow]
<%p, %s, [%u], 
[substring]
[rope]
[8 %p]
[16 %p]
String Iterator
SymbolTableObject
TemplateObjectDescriptor
CellType
StructureType
StringType
SymbolType
HeapBigIntType
CustomGetterSetterType
APIValueWrapperType
NativeExecutableType
ProgramExecutableType
ModuleProgramExecutableType
EvalExecutableType
FunctionExecutableType
UnlinkedFunctionExecutableType
UnlinkedProgramCodeBlockType
UnlinkedModuleProgramCodeBlockType
UnlinkedEvalCodeBlockType
UnlinkedFunctionCodeBlockType
CodeBlockType
JSImmutableButterflyType
JSSourceCodeType
JSScriptFetcherType
JSScriptFetchParametersType
ObjectType
FinalObjectType
JSCalleeType
JSFunctionType
InternalFunctionType
NullSetterFunctionType
BooleanObjectType
NumberObjectType
ErrorInstanceType
PureForwardingProxyType
DirectArgumentsType
ScopedArgumentsType
ClonedArgumentsType
ArrayType
DerivedArrayType
ArrayBufferType
Int8ArrayType
Uint8ArrayType
Uint8ClampedArrayType
Int16ArrayType
Uint16ArrayType
Int32ArrayType
Uint32ArrayType
Float32ArrayType
Float64ArrayType
BigInt64ArrayType
BigUint64ArrayType
DataViewType
GetterSetterType
GlobalObjectType
GlobalLexicalEnvironmentType
LexicalEnvironmentType
ModuleEnvironmentType
StrictEvalActivationType
WithScopeType
ModuleNamespaceObjectType
ShadowRealmType
RegExpObjectType
JSDateType
ProxyObjectType
JSGeneratorType
JSAsyncGeneratorType
JSArrayIteratorType
JSMapIteratorType
JSSetIteratorType
JSStringIteratorType
JSPromiseType
JSMapType
JSSetType
JSWeakMapType
JSWeakSetType
WebAssemblyModuleType
StringObjectType
DerivedStringObjectType
MaxJSType
Function
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/AbstractSlotVisitorInlines.h
JSC::AbstractSlotVisitor::ReferrerContext::ReferrerContext(JSC::AbstractSlotVisitor &, JSC::AbstractSlotVisitor::ReferrerToken)
Prototype
Int8ArrayPrototype
Int16ArrayPrototype
Int32ArrayPrototype
Uint8ArrayPrototype
Uint8ClampedArrayPrototype
Uint16ArrayPrototype
Uint32ArrayPrototype
Float32ArrayPrototype
Float64ArrayPrototype
BigInt64ArrayPrototype
BigUint64ArrayPrototype
Function
TypedArray
Receiver should be a typed array view
Underlying ArrayBuffer has been detached from the view
./runtime/JSTypedArrayViewPrototype.cpp
JSC::EncodedJSValue JSC::typedArrayViewPrivateFuncSort(JSC::JSGlobalObject *, JSC::CallFrame *)
Receiver should be a typed array view but was not an object
JSC::EncodedJSValue JSC::typedArrayViewPrivateFuncSubarrayCreate(JSC::JSGlobalObject *, JSC::CallFrame *)
get [Symbol.toStringTag]
Int8Array
Int16Array
Int32Array
Uint8Array
Uint8ClampedArray
Uint16Array
Uint32Array
Float32Array
Float64Array
BigInt64Array
BigUint64Array
WeakMap
WeakRef
WeakSet
WithScope
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
%TypedArray% should not be called directly
JSC::EncodedJSValue JSC::typedArrayViewProtoGetterFuncBuffer(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::typedArrayViewProtoGetterFuncByteLength(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::typedArrayViewProtoGetterFuncByteOffset(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncCopyWithin(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncIncludes(JSC::JSGlobalObject *, JSC::CallFrame *)
./runtime/JSGenericTypedArrayViewPrototypeFunctions.h
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIncludes(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>]
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncFill(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncIndexOf(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>]
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncJoin(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncLastIndexOf(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncLastIndexOf(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>]
JSC::EncodedJSValue JSC::typedArrayViewProtoGetterFuncLength(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncReverse(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncSet(JSC::JSGlobalObject *, JSC::CallFrame *)
Expected at least one argument
Offset should not be negative
./runtime/JSGenericTypedArrayViewInlines.h
JSC::EncodedJSValue JSC::typedArrayViewProtoFuncSlice(JSC::JSGlobalObject *, JSC::CallFrame *)
Content types of source and created typed arrays are different
TypedArray.prototype.slice constructed typed array of insufficient length
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>]
constructor Property should not be null
species constructor did not return a TypedArray View
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewProtoFuncSlice(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>]
JSC::EncodedJSValue JSC::typedArrayViewProtoGetterFuncToStringTag(JSC::JSGlobalObject *, JSC::CallFrame *)
./runtime/JSGenericTypedArrayView.h
void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::sort() [Adaptor = JSC::Float64Adaptor]
void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::sort() [Adaptor = JSC::Float32Adaptor]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>]
TypedArray.prototype.subarray constructed typed array of different content type from |this|
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>]
JSC::EncodedJSValue JSC::genericTypedArrayViewPrivateFuncSubarrayCreate(JSC::VM &, JSC::JSGlobalObject *, JSC::CallFrame *) [ViewClass = JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>]
Attempting to store out-of-bounds property on a typed array at index: 
Attempting to store accessor property on a typed array at index: 
Attempting to store non-configurable property on a typed array at index: 
Attempting to store non-enumerable property on a typed array at index: 
Attempting to store non-writable property on a typed array at index: 
Attempting to store canonical numeric string property on a typed array
static void JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Int8Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Int8Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Int8Adaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Int16Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Int16Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Int16Adaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Int32Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Int32Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Int32Adaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Uint8Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Uint8Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Uint8Adaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Uint8ClampedAdaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Uint8ClampedAdaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Uint8ClampedAdaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Uint16Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Uint16Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Uint16Adaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Uint32Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Uint32Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Uint32Adaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Float32Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Float32Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Float32Adaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Float64Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::Float64Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::Float64Adaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::BigInt64Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::BigInt64Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::BigInt64Adaptor, Visitor = JSC::AbstractSlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::BigUint64Adaptor, Visitor = JSC::SlotVisitor]
static void JSC::JSGenericTypedArrayView<JSC::BigUint64Adaptor>::visitChildrenImpl(JSC::JSCell *, Visitor &) [Adaptor = JSC::BigUint64Adaptor, Visitor = JSC::AbstractSlotVisitor]
DataView constructor requires at least one argument.
Expected ArrayBuffer for the first argument.
./runtime/LazyClassStructure.cpp
void JSC::LazyClassStructure::Initializer::setPrototype(JSC::JSObject *)
void JSC::LazyClassStructure::Initializer::setStructure(JSC::Structure *)
void JSC::LazyClassStructure::Initializer::setConstructor(JSC::JSObject *)
Single quotes (') are not allowed in JSON
Unterminated string
\u must be followed by 4 hex digits
" is not a valid unicode escape
Invalid escape character 
Invalid number
Invalid digits after decimal point
Exponent symbols should be followed by an optional '+' or '-' and then by at least one number
Unexpected comma at the end of array expression
Property name must be a string literal
Unexpected token ']'
Unexpected token '{'
Unexpected token '}'
Unexpected identifier
Unexpected token ':'
Unexpected token ')'
Unexpected token ','
Unexpected token 'true'
Unexpected token 'false'
Unexpected token 'null'
Unexpected token '.'
Unexpected token '='
Unexpected token ';'
Could not parse statement
Unexpected content at end of JSON literal
./runtime/LiteralParser.cpp
JSC::JSValue JSC::LiteralParser<unsigned char>::parse(JSC::ParserState) [CharType = unsigned char]
Unexpected token '('
Could not parse value expression
Expected '}'
Expected ']'
Expected ':' before value in object property definition
JSC::JSValue JSC::LiteralParser<char16_t>::parse(JSC::ParserState) [CharType = char16_t]
get 
Static hashtable initialiation for 
 did not produce a property.
./runtime/Lookup.cpp
bool JSC::setUpStaticFunctionSlot(JSC::VM &, const JSC::ClassInfo *, const JSC::HashTableValue *, JSC::JSObject *, JSC::PropertyName, JSC::PropertySlot &)
Function
Map Iterator
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
Unexpected identifier "
'set' property of a Map should be callable.
forEach
Map operation called on non-Map object
./runtime/LazyPropertyInlines.h
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure]
void JSC::LazyProperty<JSC::JSGlobalObject, JSC::Structure>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::JSGlobalObject, ElementType = JSC::Structure]
Math
LN10
LOG2E
LOG10E
SQRT1_2
SQRT2
acos
asin
atan
acosh
asinh
atanh
atan2
cbrt
cosh
expm1
fround
hypot
log10
log1p
log2
sign
sinh
tanh
ModuleProgramExecutable
NarrowingNumberPredictionFuzzerAgent::getPrediction name:(
),bytecodeIndex:(
),original:(
),generated:(
Function
NativeExecutable
function 
() {
    [native code]
Function
EPSILON
MAX_VALUE
MIN_VALUE
MIN_SAFE_INTEGER
isInteger
Number
0123456789abcdefghijklmnopqrstuvwxyz
toString() radix argument must be between 2 and 36
Property description must be an object.
Getter must be a function.
Setter must be a function.
Invalid property.  'value' present on property with getter or setter.
Invalid property.  'writable' present on property with getter or setter.
Unable to prevent extension in Object.seal
Unable to prevent extension in Object.freeze
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
isFinite
isNaN
isSafeInteger
toLocaleString
valueOf
toFixed
toExponential
toPrecision
toFixed() argument must be between 0 and 100
toExponential() argument must be between 0 and 100
toPrecision() argument must be between 1 and 100
thisNumberValue called on incompatible 
getPrototypeOf
setPrototypeOf
getOwnPropertyDescriptor
getOwnPropertyDescriptors
getOwnPropertyNames
getOwnPropertySymbols
keys
defineProperty
defineProperties
create
seal
freeze
preventExtensions
isSealed
isFrozen
isExtensible
assign
values
entries
fromEntries
Cannot set prototype of undefined or null
Prototype value can only be an object or null
Properties can only be defined on Objects.
./runtime/ObjectConstructor.cpp
JSC::JSValue JSC::defineProperties(JSC::JSGlobalObject *, JSC::JSObject *, JSC::JSObject *)
Unable to prevent extension in Object.preventExtensions
Object.assign requires that input parameter not be null or undefined
Object.values requires that input parameter not be null or undefined
Object.entries requires that input parameter not be null or undefined
Object
Invalid mix of BigInt and other type in addition.
WARNING: failed to parse %s=%s
 %u:%u
useKernTCSM
Note: this needs to go before other options since they depend on this value.
validateOptions
crashes if mis-typed JSC options were passed to the VM
dumpOptions
dumps JSC options (0 = None, 1 = Overridden only, 2 = All, 3 = Verbose)
configFile
file to configure JSC options and logging location
useLLInt
allows the LLINT to be used if true
useJIT
allows the executable pages to be allocated for JIT and thunks if true
useBaselineJIT
allows the baseline JIT to be used if true
useDFGJIT
allows the DFG JIT to be used if true
useRegExpJIT
allows the RegExp JIT to be used if true
useDOMJIT
allows the DOMJIT to be used if true
reportMustSucceedExecutableAllocations
maxPerThreadStackUsage
Max allowed stack usage by the VM
softReservedZoneSize
A buffer greater than reservedZoneSize that reserves space for stringifying exceptions.
reservedZoneSize
The amount of stack space we guarantee to our clients (and to interal VM code that does not call out to clients).
crashOnDisallowedVMEntry
Forces a crash if we attempt to enter the VM when disallowed
crashIfCantAllocateJITMemory
jitMemoryReservationSize
Set this number to change the executable allocation size in ExecutableAllocatorFixedVMPool. (In bytes.)
forceCodeBlockLiveness
forceICFailure
repatchCountForCoolDown
initialCoolDownCount
repatchBufferingCountdown
dumpGeneratedBytecodes
dumpGeneratedWasmBytecodes
dumpBytecodeLivenessResults
validateBytecode
forceDebuggerBytecodeGeneration
debuggerTriggersBreakpointException
Using the debugger statement will trigger an breakpoint exception (Useful when lldbing)
dumpBytecodesBeforeGeneratorification
useFunctionDotArguments
useTailCalls
optimizeRecursiveTailCalls
alwaysUseShadowChicken
shadowChickenLogSize
shadowChickenMaxTailDeletedFramesSize
useIterationIntrinsics
useOSLog
Log dataLog()s to os_log instead of stderr
dumpDisassembly
dumps disassembly of all JIT compiled code upon compilation
asyncDisassembly
logJIT
dumpDFGDisassembly
dumps disassembly of DFG function upon compilation
dumpFTLDisassembly
dumps disassembly of FTL function upon compilation
dumpRegExpDisassembly
dumps disassembly of RegExp upon compilation
dumpWasmDisassembly
dumps disassembly of all Wasm code upon compilation
wasmB3FunctionsToDump
file with newline separated list of function indices to dump IR/disassembly for, if no such file exists, the function index itself
dumpBBQDisassembly
dumps disassembly of BBQ Wasm code upon compilation
dumpOMGDisassembly
dumps disassembly of OMG Wasm code upon compilation
logJITCodeForPerf
bytecodeRangeToJITCompile
bytecode size range to allow compilation on, e.g. 1:100
bytecodeRangeToDFGCompile
bytecode size range to allow DFG compilation on, e.g. 1:100
bytecodeRangeToFTLCompile
bytecode size range to allow FTL compilation on, e.g. 1:100
jitAllowlist
file with newline separated list of function signatures to allow compilation on or, if no such file exists, the function signature to allow
dfgAllowlist
file with newline separated list of function signatures to allow DFG compilation on or, if no such file exists, the function signature to allow
ftlAllowlist
file with newline separated list of function signatures to allow FTL compilation on or, if no such file exists, the function signature to allow
dumpSourceAtDFGTime
dumps source code of JS function being DFG compiled
dumpBytecodeAtDFGTime
dumps bytecode of JS function being DFG compiled
dumpGraphAfterParsing
dumpGraphAtEachPhase
dumpDFGGraphAtEachPhase
dumps the DFG graph at each phase of DFG compilation (note this excludes DFG graphs during FTL compilation)
dumpDFGFTLGraphAtEachPhase
dumps the DFG graph at each phase of DFG compilation when compiling FTL code
dumpB3GraphAtEachPhase
dumps the B3 graph at each phase of compilation
dumpAirGraphAtEachPhase
dumps the Air graph at each phase of compilation
verboseDFGBytecodeParsing
safepointBeforeEachPhase
verboseCompilation
verboseFTLCompilation
logCompilationChanges
useProbeOSRExit
printEachOSRExit
validateDoesGC
validateGraph
validateGraphAtEachPhase
verboseValidationFailure
verboseOSR
verboseDFGOSRExit
verboseFTLOSRExit
verboseCallLink
verboseCompilationQueue
reportCompileTimes
dumps JS function signature and the time it took to compile in all tiers
reportBaselineCompileTimes
dumps JS function signature and the time it took to BaselineJIT compile
reportDFGCompileTimes
dumps JS function signature and the time it took to DFG and FTL compile
reportFTLCompileTimes
dumps JS function signature and the time it took to FTL compile
reportTotalCompileTimes
reportTotalPhaseTimes
This prints phase times at the end of running script inside jsc.cpp
reportParseTimes
dumps JS function signature and the time it took to parse
reportBytecodeCompileTimes
dumps JS function signature and the time it took to bytecode compile
countParseTimes
counts parse times
verboseExitProfile
verboseCFA
verboseDFGFailure
verboseFTLToJSThunk
verboseFTLFailure
alwaysComputeHash
testTheFTL
verboseSanitizeStack
useGenerationalGC
useConcurrentGC
collectContinuously
collectContinuouslyPeriodMS
forceFencedBarrier
verboseVisitRace
optimizeParallelSlotVisitorsForStoppedMutator
largeHeapSize
smallHeapSize
smallHeapRAMFraction
smallHeapGrowthFactor
mediumHeapRAMFraction
mediumHeapGrowthFactor
largeHeapGrowthFactor
miniVMHeapGrowthFactor
criticalGCMemoryThreshold
percent memory in use the GC considers critical.  The collector is much more aggressive above this threshold
customFullGCCallbackBailThreshold
percent of memory paged out before we bail out of timer based Full GCs. -1.0 means use (maxHeapGrowthFactor - 1)
minimumMutatorUtilization
maximumMutatorUtilization
epsilonMutatorUtilization
concurrentGCMaxHeadroom
concurrentGCPeriodMS
useStochasticMutatorScheduler
minimumGCPauseMS
gcPauseScale
gcIncrementBytes
gcIncrementMaxBytes
gcIncrementScale
scribbleFreeCells
sizeClassProgression
preciseAllocationCutoff
dumpSizeClasses
useBumpAllocator
stealEmptyBlocksFromOtherAllocators
eagerlyUpdateTopCallFrame
dumpZappedCellCrashData
useOSREntryToDFG
useOSREntryToFTL
useFTLJIT
allows the FTL JIT to be used if true
validateFTLOSRExitLiveness
defaultB3OptLevel
b3AlwaysFailsBeforeCompile
b3AlwaysFailsBeforeLink
ftlCrashes
clobberAllRegsInFTLICSlowPath
enableJITDebugAssertions
useAccessInlining
maxAccessVariantListSize
usePolyvariantDevirtualization
usePolymorphicAccessInlining
maxPolymorphicAccessInliningListSize
usePolymorphicCallInlining
usePolymorphicCallInliningForNonStubStatus
maxPolymorphicCallVariantListSize
maxPolymorphicCallVariantListSizeForTopTier
maxPolymorphicCallVariantListSizeForWebAssemblyToJS
maxPolymorphicCallVariantsForInlining
frequentCallThreshold
minimumCallToKnownRate
createPreHeaders
usePutStackSinking
useObjectAllocationSinking
useValueRepElimination
useArityFixupInlining
logExecutableAllocation
maxDFGNodesInBasicBlockForPreciseAnalysis
Disable precise but costly analysis and give conservative results if the number of DFG nodes in a block exceeds this threshold
useConcurrentJIT
allows the DFG / FTL compilation in threads other than the executing JS thread
numberOfWorklistThreads
numberOfDFGCompilerThreads
numberOfFTLCompilerThreads
priorityDeltaOfDFGCompilerThreads
priorityDeltaOfFTLCompilerThreads
priorityDeltaOfWasmCompilerThreads
useProfiler
disassembleBaselineForProfiler
useArchitectureSpecificOptimizations
breakOnThrow
maximumOptimizationCandidateBytecodeCost
maximumFunctionForCallInlineCandidateBytecodeCost
maximumFunctionForClosureCallInlineCandidateBytecodeCost
maximumFunctionForConstructInlineCandidateBytecoodeCost
maximumFTLCandidateBytecodeCost
maximumInliningDepth
maximum allowed inlining depth.  Depth of 1 means no inlining
maximumInliningRecursion
maximumInliningCallerBytecodeCost
maximumVarargsForInlining
maximumBinaryStringSwitchCaseLength
maximumBinaryStringSwitchTotalLength
maximumRegExpTestInlineCodesize
Maximum code size in bytes for inlined RegExp.test JIT code.
jitPolicyScale
scale JIT thresholds to this specified ratio between 0.0 (compile ASAP) and 1.0 (compile like normal).
forceEagerCompilation
thresholdForJITAfterWarmUp
thresholdForJITSoon
thresholdForOptimizeAfterWarmUp
thresholdForOptimizeAfterLongWarmUp
thresholdForOptimizeSoon
executionCounterIncrementForLoop
executionCounterIncrementForEntry
thresholdForFTLOptimizeAfterWarmUp
thresholdForFTLOptimizeSoon
ftlTierUpCounterIncrementForLoop
ftlTierUpCounterIncrementForReturn
ftlOSREntryFailureCountForReoptimization
ftlOSREntryRetryThreshold
evalThresholdMultiplier
maximumEvalCacheableSourceLength
maximumExecutionCountsBetweenCheckpointsForBaseline
maximumExecutionCountsBetweenCheckpointsForUpperTiers
likelyToTakeSlowCaseMinimumCount
couldTakeSlowCaseMinimumCount
osrExitCountForReoptimization
osrExitCountForReoptimizationFromLoop
reoptimizationRetryCounterMax
minimumOptimizationDelay
maximumOptimizationDelay
desiredProfileLivenessRate
desiredProfileFullnessRate
doubleVoteRatioForDoubleFormat
structureCheckVoteRatioForHoisting
checkArrayVoteRatioForHoisting
maximumDirectCallStackSize
minimumNumberOfScansBetweenRebalance
numberOfGCMarkers
useParallelMarkingConstraintSolver
opaqueRootMergeThreshold
minHeapUtilization
minMarkedBlockUtilization
slowPathAllocsBetweenGCs
force a GC on every Nth slow path alloc, where N is specified by this option
percentCPUPerMBForFullTimer
percentCPUPerMBForEdenTimer
collectionTimerMaxPercentCPU
forceWeakRandomSeed
forcedWeakRandomSeed
useZombieMode
debugging option to scribble over dead objects with 0xbadbeef0
useImmortalObjects
debugging option to keep all objects alive forever
sweepSynchronously
debugging option to sweep all dead objects synchronously at GC end before resuming mutator
maxSingleAllocationSize
debugging option to limit individual allocations to a max size (0 = limit not set, N = limit size in bytes)
logGC
debugging option to log GC activity (0 = None, 1 = Basic, 2 = Verbose)
useGC
gcAtEnd
If true, the jsc CLI will do a GC before exiting
forceGCSlowPaths
If true, we will force all JIT fast allocations down their slow paths.
forceDidDeferGCWork
If true, we will force all DeferGC destructions to perform a GC.
gcMaxHeapSize
forceRAMSize
recordGCPauseTimes
dumpHeapStatisticsAtVMDestruction
forceCodeBlockToJettisonDueToOldAge
If true, this means that anytime we can jettison a CodeBlock due to old age, we do.
useEagerCodeBlockJettisonTiming
If true, the time slices for jettisoning a CodeBlock due to old age are shrunk significantly.
useTypeProfiler
useControlFlowProfiler
useSamplingProfiler
sampleInterval
Time between stack traces in microseconds.
collectExtraSamplingProfilerData
This corresponds to the JSC shell's --sample option, or if we're wanting to use the sampling profiler via the Debug menu in the browser.
samplingProfilerTopFunctionsCount
Number of top functions to report when using the command line interface.
samplingProfilerTopBytecodesCount
Number of top bytecodes to report when using the command line interface.
samplingProfilerIgnoreExternalSourceID
Ignore external source ID when aggregating results from sampling profiler
samplingProfilerPath
The path to the directory to write sampiling profiler output to. This probably will not work with WK2 unless the path is in the sandbox.
sampleCCode
Causes the sampling profiler to record profiling data for C frames.
alwaysGeneratePCToCodeOriginMap
This will make sure we always generate a PCToCodeOriginMap for JITed code.
randomIntegrityAuditRate
Probability of random integrity audits [0.0 - 1.0]
verifyGC
verboseVerifyGC
verifyHeap
numberOfGCCyclesToRecordForVerification
exceptionStackTraceLimit
Stack trace limit for internal Exception object
defaultErrorStackTraceLimit
The default value for Error.stackTraceLimit
exitOnResourceExhaustion
useExceptionFuzz
fireExceptionFuzzAt
validateDFGExceptionHandling
Causes the DFG to emit code validating exception handling for each node that can exit
dumpSimulatedThrows
Dumps the call stack of the last simulated throw if exception scope verification fails
validateExceptionChecks
Verifies that needed exception checks are performed.
unexpectedExceptionStackTraceLimit
Stack trace limit for debugging unexpected exceptions observed in the VM
validateDFGClobberize
Emits code in the DFG/FTL to validate the Clobberize phase
validateBoundsCheckElimination
Emits code in the DFG/FTL to validate bounds check elimination
useExecutableAllocationFuzz
fireExecutableAllocationFuzzAt
fireExecutableAllocationFuzzAtOrAfter
fireExecutableAllocationFuzzRandomly
fireExecutableAllocationFuzzRandomlyProbability
verboseExecutableAllocationFuzz
useOSRExitFuzz
fireOSRExitFuzzAtStatic
fireOSRExitFuzzAt
fireOSRExitFuzzAtOrAfter
verboseOSRExitFuzz
seedOfVMRandomForFuzzer
0 means not fuzzing this; use a cryptographically random seed
useRandomizingFuzzerAgent
seedOfRandomizingFuzzerAgent
dumpFuzzerAgentPredictions
useDoublePredictionFuzzerAgent
useFileBasedFuzzerAgent
usePredictionFileCreatingFuzzerAgent
requirePredictionForFileBasedFuzzerAgent
fuzzerPredictionsFile
file with list of predictions for FileBasedFuzzerAgent
useNarrowingNumberPredictionFuzzerAgent
useWideningNumberPredictionFuzzerAgent
logPhaseTimes
rareBlockPenalty
maximumTmpsForGraphColoring
The maximum number of tmps an Air program can have before always register allocating with Linear Scan
airLinearScanVerbose
airLinearScanSpillsEverything
airForceBriggsAllocator
airForceIRCAllocator
airRandomizeRegs
airRandomizeRegsSeed
coalesceSpillSlots
logAirRegisterPressure
useB3TailDup
maxB3TailDupBlockSize
maxB3TailDupBlockSuccessors
useB3HoistLoopInvariantValues
useB3CanonicalizePrePostIncrements
useDollarVM
installs the $vm debugging tool in global objects
functionOverrides
file with debugging overrides for function bodies
useSigillCrashAnalyzer
logs data about SIGILL crashes
watchdog
watchdog timeout (0 = Disabled, N = a timeout period of N milliseconds)
usePollingTraps
use polling (instead of signalling) VM traps
useMachForExceptions
Use mach exceptions rather than signals to handle faults and pass thread messages. (This does nothing on platforms without mach)
useICStats
prototypeHitCountForLLIntCaching
Number of prototype property hits before caching a prototype in the LLInt. A count of 0 means never cache.
dumpCompiledRegExpPatterns
verboseRegExpCompilation
dumpModuleRecord
dumpModuleLoadingState
exposeInternalModuleLoader
expose the internal module loader object to the global space for debugging
useSuperSampler
useSourceProviderCache
If false, the parser will not use the source provider cache. It's good to verify everything works when this is false. Because the cache is so successful, it can mask bugs.
useCodeCache
If false, the unlinked byte code cache will not be used.
useWebAssembly
Expose the WebAssembly global object.
failToCompileWebAssemblyCode
If true, no Wasm::Plan will sucessfully compile a function.
webAssemblyPartialCompileLimit
Limit on the number of bytes a Wasm::Plan::compile should attempt before checking for other work.
webAssemblyBBQAirOptimizationLevel
Air Optimization level for BBQ Web Assembly module compilations.
webAssemblyBBQB3OptimizationLevel
B3 Optimization level for BBQ Web Assembly module compilations.
webAssemblyOMGOptimizationLevel
B3 Optimization level for OMG Web Assembly module compilations.
useBBQTierUpChecks
Enables tier up checks for our BBQ code.
useWebAssemblyOSR
thresholdForBBQOptimizeAfterWarmUp
The count before we tier up a function to BBQ.
thresholdForBBQOptimizeSoon
thresholdForOMGOptimizeAfterWarmUp
The count before we tier up a function to OMG.
thresholdForOMGOptimizeSoon
omgTierUpCounterIncrementForLoop
The amount the tier up counter is incremented on each loop backedge.
omgTierUpCounterIncrementForEntry
The amount the tier up counter is incremented on each function entry.
useWebAssemblyFastMemory
If true, we will try to use a 32-bit address space with a signal handler to bounds check wasm memory.
logWebAssemblyMemory
webAssemblyFastMemoryRedzonePages
WebAssembly fast memories use 4GiB virtual allocations, plus a redzone (counted as multiple of 64KiB WebAssembly pages) at the end to catch reg+imm accesses which exceed 32-bit, anything beyond the redzone is explicitly bounds-checked
crashIfWebAssemblyCantFastMemory
If true, we will crash if we can't obtain fast memory for wasm.
crashOnFailedWebAssemblyValidate
If true, we will crash if we can't validate a wasm module instead of throwing an exception.
maxNumWebAssemblyFastMemories
useFastTLSForWasmContext
If true, we will store context in fast TLS. If false, we will pin it to a register.
wasmBBQUsesAir
useWasmLLInt
useBBQJIT
allows the BBQ JIT to be used if true
useOMGJIT
allows the OMG JIT to be used if true
useWasmLLIntPrologueOSR
allows prologue OSR from Wasm LLInt if true
useWasmLLIntLoopOSR
allows loop OSR from Wasm LLInt if true
useWasmLLIntEpilogueOSR
allows epilogue OSR from Wasm LLInt if true
wasmFunctionIndexRangeToCompile
wasm function index range to allow compilation on, e.g. 1:100
wasmLLIntTiersUpToBBQ
webAssemblyBBQAirModeThreshold
If 0, we always use BBQ Air. If Wasm module code size hits this threshold, we compile Wasm module with B3 BBQ mode.
useEagerWebAssemblyModuleHashing
Unnamed WebAssembly modules are identified in backtraces through their hash, if available.
useArrayAllocationProfiling
If true, we will use our normal array allocation profiling. If false, the allocation profile will always claim to be undecided.
forcePolyProto
If true, create_this will always create an object with a poly proto structure.
forceMiniVMMode
If true, it will force mini VM mode on.
useTracePoints
traceLLIntExecution
traceLLIntSlowPath
traceBaselineJITExecution
thresholdForGlobalLexicalBindingEpoch
Threshold for global lexical binding epoch. If the epoch reaches to this value, CodeBlock metadata for scope operations will be revised globally. It needs to be greater than 1.
diskCachePath
forceDiskCache
validateAbstractInterpreterState
validateAbstractInterpreterStateProbability
dumpJITMemoryPath
dumpJITMemoryFlushInterval
Maximum time in between flushes of the JIT memory dump in seconds.
useUnlinkedCodeBlockJettisoning
If true, UnlinkedCodeBlock can be jettisoned.
forceOSRExitToLLInt
If true, we always exit to the LLInt. If false, we exit to whatever is most convenient.
getByValICMaxNumberOfIdentifiers
Number of identifiers we see in the LLInt that could cause us to bail on generating an IC for get_by_val.
useRandomizingExecutableIslandAllocation
For the arm64 ExecutableAllocator, if true, select which region to use randomly. This is useful for testing that jump islands work.
exposeProfilersOnGlobalObject
If true, we will expose functions to enable/disable both the sampling profiler and the super sampler
allowUnsupportedTiers
If true, we will not disable DFG or FTL when an experimental feature is enabled.
returnEarlyFromInfiniteLoopsForFuzzing
earlyReturnFromInfiniteLoopsLimit
When returnEarlyFromInfiniteLoopsForFuzzing is true, this determines the number of executions a loop can run for before just returning. This is helpful for the fuzzer so it doesn't get stuck in infinite loops.
useLICMFuzzing
seedForLICMFuzzer
allowHoistingLICMProbability
exposeCustomSettersOnGlobalObjectForTesting
useJITCage
dumpBaselineJITSizeStatistics
dumpDFGJITSizeStatistics
verboseExecutablePoolAllocation
useDataIC
useDataICInOptimizingJIT
useDataICSharing
useBaselineJITCodeSharing
useArrayFindLastMethod
Expose the findLast() and findLastIndex() methods on Array and %TypedArray%.
useArrayGroupByMethod
Expose the groupBy() and groupByToMap() methods on Array.
useAtMethod
Expose the at() method on Array, %TypedArray%, and String.
useHasOwn
Expose the Object.hasOwn method
useIntlEnumeration
Expose the Intl enumeration APIs.
useSharedArrayBuffer
useShadowRealm
Expose the ShadowRealm object.
useTemporal
Expose the Temporal object.
useWebAssemblyThreading
Allow instructions from the wasm threading spec.
useWebAssemblyTypedFunctionReferences
Allow function types from the wasm typed function references spec.
useWebAssemblyExceptions
Allow the new section and instructions from the wasm exception handling spec.
Overridden JSC options:
All JSC options:
All JSC options with descriptions:
./runtime/Options.cpp
static bool JSC::Options::setOptions(const char *)
'=' not found in option string: %p
Missing trailing '"' in option string: %p
Failed to set option : %s
enableFunctionDotArguments
enableTailCalls
showDisassembly
showDFGDisassembly
showFTLDisassembly
dumpGraphAtEachDFGFTLPhase
dumpGraphAtEachDFGPhase
dumpGraphAtEachB3Phase
dumpGraphAtEachAirPhase
alwaysDoFullCollection
enableOSREntryToDFG
enableOSREntryToFTL
enableAccessInlining
enablePolyvariantDevirtualization
enablePolymorphicAccessInlining
enablePolymorphicCallInlining
enableObjectAllocationSinking
enableConcurrentJIT
enableProfiler
enableArchitectureSpecificOptimizations
objectsAreImmortal
disableGC
enableExceptionFuzz
enableExecutableAllocationFuzz
enableOSRExitFuzz
enableDollarVM
enableWebAssembly
maximumOptimizationCandidateInstructionCount
maximumFunctionForCallInlineCandidateInstructionCount
maximumFunctionForClosureCallInlineCandidateInstructionCount
maximumFunctionForConstructInlineCandidateInstructionCount
maximumFTLCandidateInstructionCount
maximumInliningCallerSize
validateBCE
static void JSC::Options::dumpOption(WTF::StringBuilder &, JSC::Options::DumpLevel, Options::ID, const char *, const char *, JSC::Options::DumpDefaultsOption)
 (default: 
   ... 
INCOHERENT OPTIONS: at least one of useLLInt or useJIT must be true
INCOHERENT OPTIONS: at least one of useWasmLLInt or useBBQJIT must be true
Bytecode profiler is not concurrent JIT safe.
%s:%llx
./runtime/PredictionFileCreatingFuzzerAgent.cpp
virtual JSC::SpeculatedType JSC::PredictionFileCreatingFuzzerAgent::getPredictionInternal(JSC::CodeBlock *, JSC::PredictionTarget &, JSC::SpeculatedType)
Define
None
ProgramExecutable
./runtime/ProgramExecutable.cpp
JSC::JSObject *JSC::ProgramExecutable::initializeGlobalProperties(JSC::VM &, JSC::JSGlobalObject *, JSC::JSScope *)
Proxy is not allowed in the global prototype chain.
Can't create duplicate variable: '
Can't create duplicate variable that shadows a global property: '
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
invalid getter usage
invalid setter usage
com.kpgame.PokerBros
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
auto JSC::Options::initialize()::(anonymous class)::operator()() const
JSC_
ERROR: invalid option: 
JSC_enableFunctionDotArguments
JSC_enableTailCalls
JSC_showDisassembly
JSC_showDFGDisassembly
JSC_showFTLDisassembly
JSC_dumpGraphAtEachDFGFTLPhase
JSC_dumpGraphAtEachDFGPhase
JSC_dumpGraphAtEachB3Phase
JSC_dumpGraphAtEachAirPhase
JSC_alwaysDoFullCollection
JSC_enableOSREntryToDFG
JSC_enableOSREntryToFTL
JSC_enableAccessInlining
JSC_enablePolyvariantDevirtualization
JSC_enablePolymorphicAccessInlining
JSC_enablePolymorphicCallInlining
JSC_enableObjectAllocationSinking
JSC_enableConcurrentJIT
JSC_enableProfiler
JSC_enableArchitectureSpecificOptimizations
JSC_objectsAreImmortal
JSC_disableGC
JSC_enableTypeProfiler
JSC_enableControlFlowProfiler
JSC_enableExceptionFuzz
JSC_enableExecutableAllocationFuzz
JSC_enableOSRExitFuzz
JSC_enableDollarVM
JSC_enableWebAssembly
JSC_maximumOptimizationCandidateInstructionCount
JSC_maximumFunctionForCallInlineCandidateInstructionCount
JSC_maximumFunctionForClosureCallInlineCandidateInstructionCount
JSC_maximumFunctionForConstructInlineCandidateInstructionCount
JSC_maximumFTLCandidateInstructionCount
JSC_maximumInliningCallerSize
JSC_validateBCE
com.apple.JavaScriptCore
DataLog
PropertyTable
Proxy
revocable
ProxyObject
A Proxy's 'target' should be an Object
A Proxy's 'handler' should be an Object
./runtime/ProxyObject.cpp
void JSC::ProxyObject::finishCreation(JSC::VM &, JSC::JSGlobalObject *, JSC::JSValue, JSC::JSValue)
getOwnPropertyDescriptor
'getOwnPropertyDescriptor' property of a Proxy's handler should be callable
result of 'getOwnPropertyDescriptor' call should either be an Object or undefined
When the result of 'getOwnPropertyDescriptor' is undefined the target must be configurable
When 'getOwnPropertyDescriptor' returns undefined, the 'target' of a Proxy should be extensible
Result from 'getOwnPropertyDescriptor' fails the IsCompatiblePropertyDescriptor test
Result from 'getOwnPropertyDescriptor' can't be non-configurable when the 'target' doesn't have it as an own property or if it is a configurable own property on 'target'
Result from 'getOwnPropertyDescriptor' can't be non-configurable and non-writable when the target's property is writable
'has' property of a Proxy's handler should be callable
Proxy 'has' must return 'true' for non-configurable properties
Proxy 'has' must return 'true' for a non-extensible 'target' object with a configurable property
preventExtensions
'preventExtensions' property of a Proxy's handler should be callable
Proxy's 'preventExtensions' trap returned true even though its target is extensible. It should have returned false
isExtensible
'isExtensible' property of a Proxy's handler should be callable
Proxy object's 'isExtensible' trap returned false when the target is extensible. It should have returned true
Proxy object's 'isExtensible' trap returned true when the target is non-extensible. It should have returned false
'defineProperty' property of a Proxy's handler should be callable
Proxy's 'defineProperty' trap returned falsy value for property '
Proxy's 'defineProperty' trap returned true even though getOwnPropertyDescriptor of the Proxy's target returned undefined and the target is non-extensible
Proxy's 'defineProperty' trap returned true for a non-configurable field even though getOwnPropertyDescriptor of the Proxy's target returned undefined
Proxy's 'defineProperty' trap did not define a property on its target that is compatible with the trap's input descriptor
Proxy's 'defineProperty' trap did not define a non-configurable property on its target even though the input descriptor to the trap said it must do so
Proxy's 'defineProperty' trap returned true for a non-writable input descriptor when the target's property is non-configurable and writable
ownKeys
'ownKeys' property of a Proxy's handler should be callable
Proxy handler's 'ownKeys' method must return an object
Proxy object's 'target' has the non-configurable property '
' that was not in the result from the 'ownKeys' trap
Proxy object's non-extensible 'target' has configurable property '
Proxy handler's 'ownKeys' method returned a key that was not present in its non-extensible target
setPrototypeOf
'setPrototypeOf' property of a Proxy's handler should be callable
Proxy 'setPrototypeOf' returned false indicating it could not set the prototype value. The operation was expected to succeed
Proxy 'setPrototypeOf' trap returned true when its target is non-extensible and the new prototype value is not the same as the current prototype value. It should have returned false
getPrototypeOf
'getPrototypeOf' property of a Proxy's handler should be callable
Proxy handler's 'getPrototypeOf' trap should either return an object or null
Proxy's 'getPrototypeOf' trap for a non-extensible target should return the same value as the target's prototype
void JSC::ProxyObject::revoke(JSC::VM &)
ProxyRevoke
getPrediction name:(
Reflect
RegExp
Can't JIT this regular expression: "
Proxy.revocable needs to be called with two arguments: the target and the handler
revoke
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
'get' property of a Proxy's handler object should be callable
Proxy handler's 'get' result of a non-configurable and non-writable property should be the same value as the target's property
Proxy handler's 'get' result of a non-configurable accessor property without a getter should be undefined
Proxy has already been revoked. No more operations are allowed to be performed on it
apply
'apply' property of a Proxy's handler should be callable
JSC::EncodedJSValue JSC::performProxyCall(JSC::JSGlobalObject *, JSC::CallFrame *)
construct
'construct' property of a Proxy's handler should be callable
JSC::EncodedJSValue JSC::performProxyConstruct(JSC::JSGlobalObject *, JSC::CallFrame *)
Result from Proxy handler's 'construct' method should be an object
defineProperty
deleteProperty
Reflect.construct requires the first argument be a constructor
Reflect.construct requires the third argument be a constructor if present
Reflect.construct requires the second argument be an object
Reflect.defineProperty requires the first argument be an object
Reflect.get requires the first argument be an object
Reflect.getOwnPropertyDescriptor requires the first argument be an object
Reflect.getPrototypeOf requires the first argument be an object
Reflect.isExtensible requires the first argument be an object
Reflect.ownKeys requires the first argument be an object
Reflect.preventExtensions requires the first argument be an object
Reflect.set requires the first argument be an object
Reflect.setPrototypeOf requires the first argument be an object
Reflect.setPrototypeOf requires the second argument be either an object or null
'set' property of a Proxy's handler should be callable
Proxy object's 'set' trap returned falsy value for property '
Proxy handler's 'set' on a non-configurable and non-writable property on 'target' should either return false or be the same value already on the 'target'
Proxy handler's 'set' method on a non-configurable accessor property without a setter should return false
'deleteProperty' property of a Proxy's handler should be callable
Proxy handler's 'deleteProperty' method should return false when the target's property is not configurable
Proxy handler's 'deleteProperty' method should return false when the target has property and is not extensible
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/text/StringConcatenate.h
static unsigned int WTF::StringTypeAdapter<const unsigned char *>::computeLength(const LChar *)
Proxy handler's 'ownKeys' method must return an array-like object containing only Strings and Symbols
Proxy handler's 'ownKeys' trap result must not contain any duplicate names
(?:)
Function
RegExp.$N getters require RegExp constructor as |this|
RegExp.input getter requires RegExp constructor as |this|
RegExp.multiline getter require RegExp constructor as |this|
RegExp.lastMatch getter require RegExp constructor as |this|
RegExp.lastParen getter require RegExp constructor as |this|
RegExp.leftContext getter require RegExp constructor as |this|
RegExp.rightContext getter require RegExp constructor as |this|
RegExp.input setters require RegExp constructor as |this|
RegExp.multiline setters require RegExp constructor as |this|
./runtime/RegExpMatchesArray.cpp
JSC::JSArray *JSC::createEmptyRegExpMatchesArray(JSC::JSGlobalObject *, JSC::JSString *, JSC::RegExp *)
RegExp
Object
RegExp String Iterator
./runtime/RegExpMatchesArray.h
lastMatch
lastParen
leftContext
rightContext
Invalid flags supplied to RegExp constructor.
Builtin RegExp exec can only be called on a RegExp object
RegExp.prototype.compile function's Realm must be the same to |this| RegExp object
|this| RegExp object's legacy features are not enabled
Cannot supply flags when constructing one RegExp from another.
RegExp is recompiled
The RegExp.prototype.global getter can only be called on a RegExp object
The RegExp.prototype.hasIndices getter can only be called on a RegExp object
The RegExp.prototype.ignoreCase getter can only be called on a RegExp object
The RegExp.prototype.multiline getter can only be called on a RegExp object
The RegExp.prototype.dotAll getter can only be called on a RegExp object
The RegExp.prototype.sticky getter can only be called on a RegExp object
The RegExp.prototype.unicode getter can only be called on a RegExp object
The RegExp.prototype.flags getter can only be called on an object
The RegExp.prototype.source getter can only be called on a RegExp object
%s: %s
./runtime/SamplingProfiler.cpp
void JSC::SamplingProfiler::visit(Visitor &) [Visitor = JSC::AbstractSlotVisitor]
void JSC::SamplingProfiler::visit(Visitor &) [Visitor = JSC::SlotVisitor]
jsc.sampling-profiler.thread
void JSC::SamplingProfiler::processUnverifiedStackTraces()
couldn't get a name
(unknown C PC)
(host)
(regexp)
(wasm)
(program)
(module)
WTF::String JSC::SamplingProfiler::StackFrame::displayName(JSC::VM &)
(anonymous function)
(eval)
WTF::String JSC::SamplingProfiler::StackFrame::displayNameForJSONTests(JSC::VM &)
int JSC::SamplingProfiler::StackFrame::functionStartLine()
unsigned int JSC::SamplingProfiler::StackFrame::functionStartColumn()
JSC::SourceID JSC::SamplingProfiler::StackFrame::sourceID()
WTF::String JSC::SamplingProfiler::StackFrame::url()
JSCSampilingProfile-
.txt
<nil>
Sampling rate: 
 microseconds. Total samples: 
Top functions as <numSamples  'functionName#hash:sourceID'>
%6zu 
   '
js builtin
Host
C/C++
Unknown Frame
Unknown Executable
Tier breakdown:
-----------------------------------
Hottest bytecodes as <numSamples   'functionName#hash:JITType:bytecodeIndex'>
scopeInvalid
scope
Arguments
./runtime/ScopedArguments.cpp
void JSC::ScopedArguments::overrideThings(JSC::JSGlobalObject *)
ScopedArgumentsTable
ScriptExecutable
./runtime/ScriptExecutable.cpp
void JSC::ScriptExecutable::clearCode(JSC::IsoCellSet &)
installCode
void JSC::ScriptExecutable::installCode(JSC::VM &, JSC::CodeBlock *, JSC::CodeType, JSC::CodeSpecializationKind)
Installing 
JSC::CodeBlock *JSC::ScriptExecutable::newCodeBlockFor(JSC::CodeSpecializationKind, JSC::JSFunction *, JSC::JSScope *)
JSC::CodeBlock *JSC::ScriptExecutable::newReplacementCodeBlockFor(JSC::CodeSpecializationKind)
Forced Failure
size_t JSC::CFrameWalker::walk(Vector<JSC::UnprocessedStackFrame> &, bool &)
bool JSC::FrameWalker::isValidFramePointer(void *)
auto JSC::SamplingProfiler::processUnverifiedStackTraces()::(anonymous class)::operator()(JSC::SamplingProfiler::UnprocessedStackFrame &) const
auto JSC::SamplingProfiler::processUnverifiedStackTraces()::(anonymous class)::operator()(JSC::CodeBlock *, JSC::CodeOrigin) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
void JSC::setupJIT(JSC::VM &, JSC::CodeBlock *)
void JSC::GenericArguments<JSC::ScopedArguments>::initModifiedArgumentsDescriptor(JSC::JSGlobalObject *, unsigned int) [Type = JSC::ScopedArguments]
Function
Set Iterator
ShadowRealm
Error encountered during evaluation
JSArrayBuffer is opaque root
boolean
object
bigint
[object 
[object Null]
[object Undefined]
bound 
not-equal
timed-out
'add' property of a Set should be callable.
forEach
Set operation called on non-Set object
evaluate
importValue
SparseArrayValueMap
[wasm code]
[native code]
eval code
module code
global code
Object
Function
String Iterator
String
substr
substring
toLowerCase
toUpperCase
localeCompare
toLocaleLowerCase
toLocaleUpperCase
trim
startsWith
endsWith
normalize
trimStart
trimEnd
trimLeft
trimRight
./runtime/StringPrototype.cpp
JSC::EncodedJSValue JSC::stringProtoFuncRepeatCharacter(JSC::JSGlobalObject *, JSC::CallFrame *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
fromCharCode
fromCodePoint
Arguments contain a value that is out of range of code points
concat
match
matchAll
padStart
padEnd
repeat
replace
replaceAll
search
split
anchor
bold
blink
fixed
fontcolor
fontsize
italics
link
small
strike
UChar32 JSC::codePointAt(const WTF::String &, unsigned int, unsigned int)
JSC::EncodedJSValue JSC::stringIndexOfImpl(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::stringProtoFuncSlice(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::stringSubstringImpl(JSC::JSGlobalObject *, JSC::CallFrame *)
String.prototype.localeCompare requires that |this| not be null or undefined
Argument to String.prototype.startsWith cannot be a RegExp
Argument to String.prototype.endsWith cannot be a RegExp
Argument to String.prototype.includes cannot be a RegExp
argument does not match any normalization form
Structure
./runtime/Structure.cpp
static JSC::Structure *JSC::Structure::nonPropertyTransitionSlow(JSC::VM &, JSC::Structure *, JSC::TransitionKind)
void JSC::Structure::didCachePropertyReplacement(JSC::VM &, JSC::PropertyOffset)
Did cache property replacement
Structure transition from 
, PolyProto offset:
, Proto:
, Has been dictionary
, Dictionary
, UncacheableDictionary
, Leaf
, Shady leaf
 (Watched)
Structures:
./runtime/StructureCache.cpp
JSC::Structure *JSC::StructureCache::emptyObjectStructureConcurrently(JSC::JSGlobalObject *, JSC::JSObject *, unsigned int)
StructureChain
./runtime/StructureIDTable.cpp
void JSC::StructureIDTable::resize(size_t)
m_size < newCapacity
StructureIDExhaustion
Crash intentionally because of exhaust of StructureIDs.
JSC::StructureID JSC::StructureIDTable::allocateID(JSC::Structure *)
void JSC::StructureIDTable::deallocateID(JSC::Structure *, JSC::StructureID)
StructureRareData
symbol
Cannot convert a symbol to a number
Symbol(
Function
Symbol
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
JSC::Structure *JSC::StructureCache::createEmptyStructure(JSC::JSGlobalObject *, JSC::JSObject *, const JSC::TypeInfo &, const JSC::ClassInfo *, JSC::IndexingType, unsigned int, bool, JSC::FunctionExecutable *)
keyFor
Symbol.keyFor requires that the first argument be a symbol
auto JSC::Structure::create(JSC::Structure::PolyProtoTag, JSC::VM &, JSC::JSGlobalObject *, JSC::JSObject *, const JSC::TypeInfo &, const JSC::ClassInfo *, JSC::IndexingType, unsigned int)::(anonymous class)::operator()(const JSC::GCSafeConcurrentJSLocker &, JSC::PropertyOffset, JSC::PropertyOffset) const
Detected in materializePropertyTable.
Found structure = 
structures = 
Symbol
SymbolTable
./runtime/SymbolTable.cpp
JSC::GlobalVariableID JSC::SymbolTable::uniqueIDForVariable(const JSC::ConcurrentJSLocker &, WTF::UniquedStringImpl *, JSC::VM &)
RefPtr<JSC::TypeSet> JSC::SymbolTable::globalTypeSetForVariable(const JSC::ConcurrentJSLocker &, WTF::UniquedStringImpl *, JSC::VM &)
Object
Function
Calendar
Temporal.Calendar
Temporal.Duration properties must be finite and of consistent sign
Temporal.Duration properties must be integers
Object must contain at least one Temporal.Duration property
' is not a valid Duration string
 not supported by Temporal.Instant. Try Temporal.ZonedDateTime instead
Cannot compare a duration of years, months, or weeks without a relativeTo option
Cannot add a duration of years, months, or weeks without a relativeTo option
Cannot subtract a duration of years, months, or weeks without a relativeTo option
Cannot round without a smallestUnit or largestUnit option
smallestUnit must be smaller than largestUnit
Cannot round a duration of years, months, or weeks without a relativeTo option
FIXME: years, months, or weeks rounding with relativeTo not implemented yet
unit is an invalid Temporal unit
Cannot total a duration of years, months, or weeks without a relativeTo option
smallestUnit must not be "minute"
Duration
Symbol.prototype.toString requires that |this| be a symbol or a symbol object
Symbol.prototype.description requires that |this| be a symbol or a symbol object
Symbol.prototype.valueOf requires that |this| be a symbol or a symbol object
invalid calendar ID
from
fields
mergeFields
Temporal.Calendar.prototype.fields called on value that's not a Calendar
fields include non string value
Temporal.Calendar.prototype.mergeFields called on value that's not a Calendar
Temporal.Calendar.prototype.toString called on value that's not a Calendar
compare
Temporal.Duration properties must be finite
Temporal.Duration
Temporal.Duration.prototype.years called on value that's not a Duration
Temporal.Duration.prototype.months called on value that's not a Duration
Temporal.Duration.prototype.weeks called on value that's not a Duration
Temporal.Duration.prototype.days called on value that's not a Duration
Temporal.Duration.prototype.hours called on value that's not a Duration
Temporal.Duration.prototype.minutes called on value that's not a Duration
Temporal.Duration.prototype.seconds called on value that's not a Duration
Temporal.Duration.prototype.milliseconds called on value that's not a Duration
Temporal.Duration.prototype.microseconds called on value that's not a Duration
Temporal.Duration.prototype.nanoseconds called on value that's not a Duration
Temporal.Duration.prototype.sign called on value that's not a Duration
Temporal.Duration.prototype.blank called on value that's not a Duration
Object
 epoch nanoseconds is outside of supported range for Temporal.Instant
The given number of
 epoch nanoseconds is outside of the supported range for Temporal.Instant
' is not a valid Temporal.Instant string
 is not a valid integer number of epoch seconds
 is not a valid integer number of epoch milliseconds
 epoch microseconds is outside of supported range for Temporal.Instant
Cannot round without a smallestUnit option
FIXME: Temporal.Instant.toString({timeZone}) not implemented yet
Instant
Temporal.Instant
Temporal.Instant.prototype.epochSeconds called on value that's not a Instant
Temporal.Instant.prototype.epochMilliseconds called on value that's not a Instant
Temporal.Instant.prototype.epochMicroseconds called on value that's not a Instant
Temporal.Instant.prototype.epochNanoseconds called on value that's not a Instant
Temporal.Now
Temporal
./runtime/TemporalObject.cpp
JSC::PropertyName JSC::temporalUnitPluralPropertyName(JSC::VM &, JSC::TemporalUnit)
JSC::PropertyName JSC::temporalUnitSingularPropertyName(JSC::VM &, JSC::TemporalUnit)
largestUnit is an invalid Temporal unit
largestUnit is a disallowed unit
smallestUnit is an invalid Temporal unit
smallestUnit is a disallowed unit
fractionalSecondDigits must be 'auto' or 0 through 9, not 
JSC::PrecisionData JSC::secondsStringPrecision(JSC::JSGlobalObject *, JSC::JSObject *)
ceil
floor
trunc
halfExpand
roundingMode must be either "ceil", "floor", "trunc", or "halfExpand"
roundingIncrement value does not divide 
double JSC::roundNumberToIncrement(double, double, JSC::RoundingMode)
constrain
overflow must be either "constrain" or "reject"
calendar is not iso8601
invalid time string
argument object must not carry calendar
argument object must not carry time zone
PlainTime
negated
subtract
total
Temporal.Duration.prototype.with called on value that's not a Duration
First argument to Temporal.Duration.prototype.with must be an object
Temporal.Duration.prototype.negated called on value that's not a Duration
Temporal.Duration.prototype.abs called on value that's not a Duration
Temporal.Duration.prototype.add called on value that's not a Duration
Temporal.Duration.prototype.subtract called on value that's not a Duration
Temporal.Duration.prototype.round called on value that's not a Duration
Temporal.Duration.prototype.round requires an options argument
Temporal.Duration.prototype.total called on value that's not a Duration
Temporal.Duration.prototype.total requires an options argument
Temporal.Duration.prototype.toString called on value that's not a Duration
Temporal.Duration.prototype.toJSON called on value that's not a Duration
Temporal.Duration.prototype.toLocaleString called on value that's not a Duration
Temporal.Duration.prototype.valueOf must not be called. To compare Duration values, use Temporal.Duration.compare
./runtime/TemporalInstant.cpp
double JSC::maximumIncrement(JSC::TemporalUnit)
fromEpochSeconds
fromEpochMilliseconds
fromEpochMicroseconds
fromEpochNanoseconds
Missing required epochNanoseconds argument to Temporal.Instant
until
since
equals
epochSeconds
epochMilliseconds
epochMicroseconds
epochNanoseconds
Temporal.Instant.prototype.add called on value that's not a Instant
Addition is outside of supported range for Temporal.Instant
Temporal.Instant.prototype.subtract called on value that's not a Instant
Subtraction is outside of supported range for Temporal.Instant
Temporal.Instant.prototype.until called on value that's not a Instant
Temporal.Instant.prototype.since called on value that's not a Instant
Temporal.Instant.prototype.round called on value that's not a Instant
Temporal.Instant.prototype.round requires an options argument
Temporal.Instant.prototype.equals called on value that's not a Instant
Temporal.Instant.prototype.toString called on value that's not a Instant
Temporal.Instant.prototype.toJSON called on value that's not a Instant
Temporal.Instant.prototype.toLocaleString called on value that's not a Instant
Temporal.Instant.prototype.valueOf must not be called. To compare Instant values, use Temporal.Instant.compare
Calendar
Duration
TimeZone
hour is out of range
minute is out of range
second is out of range
millisecond is out of range
microsecond is out of range
nanosecond is out of range
./runtime/TemporalPlainTime.cpp
ISO8601::Duration JSC::roundTime(ISO8601::PlainTime, double, JSC::TemporalUnit, JSC::RoundingMode, std::optional<double>)
" field is missing
Temporal.PlainTime properties must be finite
toPartialTime properties must be finite
toPartialTime requires at least one property
static ElementType *JSC::LazyProperty<JSC::TemporalPlainTime, JSC::TemporalCalendar>::callFunc(const JSC::LazyProperty::Initializer &) [OwnerType = JSC::TemporalPlainTime, ElementType = JSC::TemporalCalendar, Func = (lambda at ./runtime/TemporalPlainTime.cpp:66:9)]
void JSC::LazyProperty<JSC::TemporalPlainTime, JSC::TemporalCalendar>::set(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::TemporalPlainTime, ElementType = JSC::TemporalCalendar]
void JSC::LazyProperty<JSC::TemporalPlainTime, JSC::TemporalCalendar>::setMayBeNull(JSC::VM &, const OwnerType *, ElementType *) [OwnerType = JSC::TemporalPlainTime, ElementType = JSC::TemporalCalendar]
Temporal.PlainTime
Temporal.PlainTime.prototype.hour called on value that's not a plainTime
Temporal.PlainTime.prototype.minute called on value that's not a plainTime
Temporal.PlainTime.prototype.second called on value that's not a plainTime
Temporal.PlainTime.prototype.millisecond called on value that's not a plainTime
Temporal.PlainTime.prototype.microsecond called on value that's not a plainTime
Temporal.PlainTime.prototype.nanosecond called on value that's not a plainTime
Temporal.PlainTime.prototype.calendar called on value that's not a plainTime
Object
argument needs to be UTC offset string, TimeZone identifier, or temporal Instant string
Function
TimeZone
Temporal.TimeZone
[Start, End]::[%u, %u]
[Entry IS in System]
[Entry IS NOT in system]
[Return Statement]
[Normal Statement]
#Local#
#Global#
"globalTypeSet":
"instructionTypeSet":
"isOverflown":
getISOFields
Temporal.PlainTime.prototype.add called on value that's not a plainTime
Temporal.PlainTime.prototype.subtract called on value that's not a plainTime
Temporal.PlainTime.prototype.with called on value that's not a plainTime
First argument to Temporal.PlainTime.prototype.with must be an object
Temporal.PlainTime.prototype.until called on value that's not a plainTime
Temporal.PlainTime.prototype.since called on value that's not a plainTime
Temporal.PlainTime.prototype.round called on value that's not a plainTime
Temporal.PlainTime.prototype.round requires an options argument
Temporal.PlainTime.prototype.equals called on value that's not a plainTime
Temporal.PlainTime.prototype.toString called on value that's not a plainTime
Temporal.PlainTime.prototype.toJSON called on value that's not a plainTime
Temporal.PlainTime.prototype.toLocaleString called on value that's not a plainTime
Temporal.PlainTime.prototype.valueOf must not be called. To compare PlainTime values, use Temporal.PlainTime.compare
from
argument needs to be UTC offset string or TimeZone identifier
Temporal.TimeZone.prototype.toString called on value that's not a TimeZone
(Unreached Statement)
Function 
Undefined 
Structures:[ 
Least Common Ancestor: 
Function?
Boolean?
Integer?
Number?
String?
Symbol?
BigInt?
Object?
(many)
"displayTypeName":
"primitiveTypeNames":[
"Undefined"
"Boolean"
"Integer"
"structures":[
:__proto__
__proto__ [
"constructorName":
"isInDictionaryMode":
"fields":[
"optionalFields":[
./runtime/TypeSet.cpp
static Ref<JSC::StructureShape> JSC::StructureShape::merge(Ref<JSC::StructureShape> &&, Ref<JSC::StructureShape> &&)
./runtime/TypedArrayType.cpp
const JSC::ClassInfo *JSC::constructorClassInfoForType(JSC::TypedArrayType)
NotTypedArray
TypeInt8
TypeInt16
TypeInt32
TypeUint8
TypeUint8Clamped
TypeUint16
TypeUint32
TypeFloat32
TypeFloat64
TypeBigInt64
TypeBigUint64
TypeDataView
void WTF::printInternal(WTF::PrintStream &, JSC::TypedArrayType)
./runtime/VM.cpp
JSC::VM::VM(JSC::VM::VMType, JSC::HeapType, WTF::RunLoop *, bool *)
JSC_PROFILER_PATH
JSCProfile-
.json
Primitive gigacage disabled
Throwing exception in call frame 
void JSC::VM::updateStackLimits()
std::unique_ptr<CheckpointOSRExitSideState> JSC::VM::popCheckpointOSRSideState(JSC::CallFrame *)
Impure property added
VM Dump Types
void JSC::VM::removeLoopHintExecutionCounter(const JSC::Instruction *)
 on pid 
 received NeedDebuggerBreak trap
./runtime/VMTraps.cpp
void JSC::VMTraps::handleTraps(VMTraps::BitField)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
optionalFields
constructorName
isImprecise
prototypeStructure
./runtime/VMInlines.h
void JSC::VM::setFuzzerAgent(std::unique_ptr<FuzzerAgent> &&)
JavaScript execution terminated.
Sanitizing stack for VM = 
, current stack pointer at 
, last stack top = 
, in stack range (
Primitive gigacage disabled asynchronously
auto JSC::VMTraps::SignalSender::initializeSignals()::(anonymous class)::operator()()::(anonymous class)::operator()(WTF::Signal, WTF::SigInfo &, WTF::PlatformRegisters &) const
JSC VMTraps Signal Sender Thread
isFunction
isUndefined
isNull
isBoolean
isNumber
isString
isSymbol
isBigInt
JavaScriptCoreUseJIT
bool JSC::disableProfilerWithRespectToCount(unsigned int &, const Func &) [Func = (lambda at ./runtime/VM.cpp:1170:32)]
bool JSC::disableProfilerWithRespectToCount(unsigned int &, const Func &) [Func = (lambda at ./runtime/VM.cpp:1189:39)]
invalid
./runtime/VarOffset.cpp
void JSC::VarOffset::dump(WTF::PrintStream &) const
Invalid
Scope
Stack
DirectArgument
void WTF::printInternal(WTF::PrintStream &, JSC::VarKind)
jsc.watchdog.queue
Function
WeakMap
./runtime/WeakMapImpl.h
bool JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>>::remove(JSC::JSObject *) [WeakMapBucketType = JSC::WeakMapBucket<JSC::WeakMapBucketDataKeyValue>]
Attempted to set a non-object key in a WeakMap
WeakRef
WeakSet
'set' property of a WeakMap should be callable.
Called WeakMap function on non-object
Called WeakMap function on a non-WeakMap object
First argument to WeakRef should be an object
Called WeakRef function on non-object
Called WeakRef function on a non-WeakRef object
'add' property of a WeakSet should be callable.
Attempted to add a non-object value to a WeakSet
WeakSet
WideningNumberPredictionFuzzerAgent::getPrediction name:(
bool JSC::WeakMapImpl<JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>>::remove(JSC::JSObject *) [WeakMapBucketType = JSC::WeakMapBucket<JSC::WeakMapBucketDataKey>]
Called WeakSet function on non-object
Called WeakSet function on a non-WeakSet object
 took: 
 ms 
(total: 
 ms).
Failed to open file %s. Did you add the file-read-data entitlement to WebProcess.sb? Error code: %s
Failed to close file %s: %s
./tools/FunctionOverrides.cpp
static bool JSC::FunctionOverrides::initializeOverrideFor(const JSC::SourceCode &, FunctionOverrides::OverrideInfo &)
functionOverrides 
IO ERROR
Failed to open file 
. Did you add the file-read-data entitlement to WebProcess.sb?
override
./tools/HeapVerifier.cpp
JSC::HeapVerifier::HeapVerifier(JSC::Heap *, unsigned int)
BeforeGC
BeforeMarking
AfterMarking
AfterGC
static const char *JSC::HeapVerifier::phaseName(HeapVerifier::Phase)
END 
JSC::CellList *JSC::HeapVerifier::cellListForGathering(HeapVerifier::Phase)
void JSC::HeapVerifier::printVerificationHeader()
Verifying heap in [p
] vm 
 on 
 GC @ 
    cell 
 is ZAPPED
 is zapped
 is from a different VM: expected:
 actual:
 with structureID 
 maps to a NULL Structure pointer
 has ZAPPED structure 
 has structure 
 whose structureID is NULL
 from a different VM: expected:
 NOT found in the live cell list
 has DEAD structure 
 with a NULL structureID
 whose structure is NULL
 whose structure 
 has a NULL structureID
 is NOT found in the live cell list
 is DEAD
FOUND
 LIVE
 DEAD
 HeapCell 
 JSCell 
 structure:
 butterfly:
 (base:
 GC[
] in '
' list in VM 
 recorded at time 
Checking 
 GC<
>, cycle [
Cycle [
' list: 
cell NOT found
cell 
 NOT FOUND
ERROR: Timed out while waiting to iterate VMs.
shouldThrow
testField
./tools/JSDollarVM.cpp
bool (anonymous namespace)::testStaticAccessorPutter(JSC::JSGlobalObject *, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::PropertyName)
testStaticValue
testStaticValueSetterCalled
DOMJITGetterComplex slow call exception
JSC::EncodedJSValue (anonymous namespace)::customGetValue(JSC::JSGlobalObject *, JSC::EncodedJSValue, JSC::PropertyName)
JSC::EncodedJSValue (anonymous namespace)::customGetValue2(JSC::JSGlobalObject *, JSC::EncodedJSValue, JSC::PropertyName)
value2
bool (anonymous namespace)::customSetValue(JSC::JSGlobalObject *, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::PropertyName)
bool (anonymous namespace)::customSetValueGlobalObject(JSC::JSGlobalObject *, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::PropertyName)
bool (anonymous namespace)::customSetValue2(JSC::JSGlobalObject *, JSC::EncodedJSValue, JSC::EncodedJSValue, JSC::PropertyName)
DollarVM
abort
crash
breakpoint
dfgTrue
ftlTrue
cpuMfence
cpuRdtsc
cpuCpuid
cpuPause
cpuClflush
llintTrue
baselineJITTrue
noInline
gcSweepAsynchronously
edenGC
dumpSubspaceHashes
callFrame
codeBlockFor
codeBlockForFrame
dumpSourceFor
dumpBytecodeFor
dataLog
print
dumpCallFrame
dumpStack
dumpRegisters
dumpCell
indexingMode
clearLinkBufferStats
linkBufferStats
getpid
haveABadTime
isHavingABadTime
callWithStackSize
createGlobalObject
createProxy
createRuntimeArray
createNullRopeString
createImpureGetter
createCustomGetterObject
createDOMJITNodeObject
createDOMJITGetterObject
createDOMJITGetterNoEffectsObject
createDOMJITGetterComplexObject
createDOMJITFunctionObject
createDOMJITCheckJSCastObject
createDOMJITGetterBaseJSObject
createBuiltin
createWasmStreamingParser
createWasmStreamingCompilerForCompile
createWasmStreamingCompilerForInstantiate
createStaticCustomAccessor
createStaticCustomValue
createObjectDoingSideEffectPutWithoutCorrectSlotStatus
createEmptyFunctionWithName
getPrivateProperty
setImpureGetterDelegate
Root
Element
getElement
SimpleObject
getHiddenValue
setHiddenValue
shadowChickenFunctionsOnStack
setGlobalConstRedeclarationShouldNotThrow
findTypeForExpression
returnTypeFor
flattenDictionaryObject
dumpBasicBlockExecutionRanges
hasBasicBlockExecuted
basicBlockExecutionCount
enableDebuggerModeWhenIdle
disableDebuggerModeWhenIdle
deleteAllCodeWhenIdle
globalObjectForObject
getGetterSetter
loadGetterFromGetterSetter
createCustomTestGetterSetter
deltaBetweenButterflies
currentCPUTime
totalGCTime
parseCount
isWasmSupported
make16BitStringIfPossible
getStructureTransitionList
getConcurrently
rejectPromiseAsHandled
setUserPreferredLanguages
icuVersion
icuHeaderVersion
assertEnabled
securityAssertEnabled
asanEnabled
isMemoryLimited
isGigacageEnabled
toCacheableDictionary
toUncacheableDictionary
isPrivateSymbol
dumpAndResetPasDebugSpectrum
monotonicTimeNow
wallTimeNow
approximateTimeNow
jitSizeStatistics
dumpJITSizeStatistics
resetJITSizeStatistics
ensureArrayStorage
* 0x%lx
 total ms: 
 max ms: 
JSC::FunctionOverridesAssertScope::FunctionOverridesAssertScope()
JSC::FunctionOverridesAssertScope::~FunctionOverridesAssertScope()
<overridden>
SYNTAX ERROR
Expecting '
' clause:
Cannot have any characters before '
' must be followed by a ' ':
Missing { after '
' clause start delimiter:
Delimiter '
' cannot have '{', '}', or whitespace:
Unexpected characters after '
' clause end delimiter '
' not found:
Are you missing a '}' before the delimiter?
./tools/JSDollarVM.h
Dumping 
 values before crashing:
Error thrown while crashing: 
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = JSC::CallerFrameJITTypeFunctor]
CallFrame
valid
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = (lambda at ./tools/JSDollarVM.cpp:173:32)]
codeBlock
unlinkedCodeBlock
executable
Invalid codeBlock: 
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = (lambda at ./tools/JSDollarVM.cpp:2617:28)]
haveABadTime expects first argument to be an object if provided
isHavingABadTime expects first argument to be an object if provided
Not supported for this platform
RuntimeArray
static bool (anonymous namespace)::RuntimeArray::put(JSC::JSCell *, JSC::JSGlobalObject *, JSC::PropertyName, JSC::JSValue, JSC::PutPropertySlot &)
static bool (anonymous namespace)::RuntimeArray::deleteProperty(JSC::JSCell *, JSC::JSGlobalObject *, JSC::PropertyName, JSC::DeletePropertySlot &)
ImpureGetter
CustomGetter
customGetter
customGetterAccessor
DOMJITNode
customGetter2
DOMJITGetter
DOMJITGetterNoEffects
DOMJITGetterComplex
enableException
DOMJITFunctionObject
func
DOMJITCheckJSCastObject
DOMJITGetterBaseJSObject
WasmStreamingParser
addBytes
finalize
first argument must be an ArrayBufferView or an ArrayBuffer
underlying TypedArray has been detatched from the ArrayBuffer
First argument is not a JS function
You shouldn't see this...
WasmStreamingCompiler
StaticCustomAccessor
testStaticAccessor
testStaticAccessorDontEnum
testStaticAccessorReadOnly
StaticCustomValue
testStaticValueNoSetter
testStaticValueReadOnly
testStaticValueSetFlag
JSC::EncodedJSValue JSC::functionCreateObjectDoingSideEffectPutWithoutCorrectSlotStatus(JSC::JSGlobalObject *, JSC::CallFrame *)
Unknown private name.
argument is not an ImpureGetter
Cannot create Element without a Root.
JSC::Element is opaque root
Invalid use of getHiddenValue test function
Invalid use of setHiddenValue test function
JSC::EncodedJSValue JSC::functionFindTypeForExpression(JSC::JSGlobalObject *, JSC::CallFrame *)
jsc Testing API: functionFindTypeForExpression
JSC::EncodedJSValue JSC::functionReturnTypeFor(JSC::JSGlobalObject *, JSC::CallFrame *)
jsc Testing API: functionReturnTypeFor
JSC::EncodedJSValue JSC::functionFlattenDictionaryObject(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::functionDumpBasicBlockExecutionRanges(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::functionHasBasicBlockExecuted(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::functionBasicBlockExecutionCount(JSC::JSGlobalObject *, JSC::CallFrame *)
JSC::EncodedJSValue JSC::functionGlobalObjectForObject(JSC::JSGlobalObject *, JSC::CallFrame *)
Invalid use of loadGetterFromGetterSetter test function: argument is not a GetterSetter
JSC::EncodedJSValue JSC::functionLoadGetterFromGetterSetter(JSC::JSGlobalObject *, JSC::CallFrame *)
customValue
customValue2
customAccessor
customValueGlobalObject
customAccessorGlobalObject
customValueNoSetter
customAccessorReadOnly
customFunction
JSTestCustomGetterSetter
Expected first argument to be an array
Expected first argument to be an object
ObjectDoingSideEffectPutWithoutCorrectSlotStatus
Before Marking
After Marking
 @ phase 
: FAILED in cell list '
' (size 
CodeBlock 
 has ZAPPED ValueProfile cell 
Search for cell 
 in VM 
./tools/SigillCrashAnalyzer.cpp
auto JSC::installCrashHandler()::(anonymous class)::operator()(WTF::Signal, WTF::SigInfo &, WTF::PlatformRegisters &) const
Dumping host frame registers not supported.
Register frame: 
-----------------------------------------------------------------------------
            use            |   address  |                value               
[r% 3d %14s]      | %10p | 0x%-16llx %s
[ArgumentCount]            | %10p | %lu 
[Callee]                   | %10p | 0x%-16llx %s
[CodeBlock]                | %10p | 0x%-16llx 
[ReturnPC]                 | %10p | %p 
[CallerFrame]              | %10p | %p 
CalleeSaveReg
./tools/VMInspector.cpp
static void JSC::VMInspector::dumpRegisters(JSC::CallFrame *)
[r% 3d]                     | %10p | 0x%-16llx %s
<%p, %s>
structureID 
%d 0x%x
 structure 
indexingTypeAndMisc 
%d 0x%hhx
type 
flags 
cellState 
butterfly
base 
hasIndexingHeader 
 hasAnyArrayStorage 
publicLength 
 vectorLength 
 indexBias 
preCapacity 
 propertyCapacity 
preCapacity
propertyCapacity
indexingHeader
static void JSC::VMInspector::dumpCellMemoryToStream(JSC::JSCell *, WTF::PrintStream &)
arrayStorage
indexedProperties
unallocated capacity
ERROR: current thread does not own the JSLock
%p : 0x%016llx
<--- 
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/interpreter/CallFrame.h
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = FetchCodeBlockFunctor]
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = JSC::DumpFrameFunctor]
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = (lambda at ./tools/VMInspector.cpp:378:28)]
[ReturnVPC]                | %10p | %d (line %d)
void JSC::CallFrame::iterate(JSC::VM &, const Functor &) [action = JSC::StackVisitor::ContinueIfTopEntryFrameIsEmpty, Functor = (lambda at ./tools/VMInspector.cpp:426:35)]
    [
 Hash:
can't allocate memory for 
 locals
 arguments
./wasm/WasmB3IRGenerator.cpp
JSC::Wasm::B3IRGenerator::PartialResult JSC::Wasm::B3IRGenerator::atomicLoad(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::B3IRGenerator::ExpressionType, JSC::Wasm::B3IRGenerator::ExpressionType &, uint32_t)
JSC::Wasm::B3IRGenerator::PartialResult JSC::Wasm::B3IRGenerator::atomicBinaryRMW(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::B3IRGenerator::ExpressionType, JSC::Wasm::B3IRGenerator::ExpressionType, JSC::Wasm::B3IRGenerator::ExpressionType &, uint32_t)
JSC::B3::Value *JSC::Wasm::B3IRGenerator::emitAtomicCompareExchange(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, uint32_t)
JSC::Wasm::B3IRGenerator::PartialResult JSC::Wasm::B3IRGenerator::atomicCompareExchange(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::B3IRGenerator::ExpressionType, JSC::Wasm::B3IRGenerator::ExpressionType, JSC::Wasm::B3IRGenerator::ExpressionType, JSC::Wasm::B3IRGenerator::ExpressionType &, uint32_t)
JSC::Wasm::B3IRGenerator::PartialResult JSC::Wasm::B3IRGenerator::truncSaturated(JSC::Wasm::Ext1OpType, JSC::Wasm::B3IRGenerator::ExpressionType, JSC::Wasm::B3IRGenerator::ExpressionType &, JSC::Wasm::Type, JSC::Wasm::Type)
JSC::B3::Value *JSC::Wasm::B3IRGenerator::loadFromScratchBuffer(unsigned int &, JSC::B3::Value *, B3::Type)
JSC::Wasm::B3IRGenerator::PartialResult JSC::Wasm::B3IRGenerator::addReturn(const JSC::Wasm::B3IRGenerator::ControlData &, const JSC::Wasm::B3IRGenerator::Stack &)
 WebAssembly functions
 compilation contexts
 tier-up counts
Out of executable memory while tiering up function at index 
WebAssembly BBQ function[%i] %s name %s
, in function at index 
Out of executable memory in function at index 
Out of executable memory in function entrypoint at index 
Embedder->WebAssembly entrypoint[%i] %s name %s
WebAssembly->WebAssembly import[%i]
./wasm/WasmCallee.cpp
const JSC::Wasm::StackMap &JSC::Wasm::OptimizingJITCallee::stackmap(JSC::CallSiteIndex) const
./wasm/WasmCalleeGroup.cpp
bool JSC::Wasm::CalleeGroup::isSafeToRun(JSC::Wasm::MemoryMode)
LLInt
BBQForOSREntry
OMGForOSREntry
EmbedderEntrypoint
./wasm/WasmCompilationMode.cpp
const char *JSC::Wasm::makeString(JSC::Wasm::CompilationMode)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/b3/B3Opcode.h
JSC::B3::Opcode JSC::B3::opcodeForConstant(JSC::B3::Type)
B3::Type JSC::Wasm::toB3Type(JSC::Wasm::Type)
./wasm/WasmCallingConvention.h
JSC::Wasm::ArgumentLocation JSC::Wasm::WasmCallingConvention::marshallLocation(JSC::Wasm::CallRole, JSC::Wasm::Type, size_t &, size_t &, size_t &) const
uint32_t JSC::Wasm::sizeOfLoadOp(JSC::Wasm::LoadOpType)
JSC::B3::Value *JSC::Wasm::B3IRGenerator::emitLoadOp(JSC::Wasm::LoadOpType, JSC::B3::Value *, uint32_t)
uint32_t JSC::Wasm::sizeOfStoreOp(JSC::Wasm::StoreOpType)
void JSC::Wasm::B3IRGenerator::emitStoreOp(JSC::Wasm::StoreOpType, JSC::B3::Value *, JSC::B3::Value *, uint32_t)
uint32_t JSC::Wasm::memoryLog2Alignment(JSC::Wasm::ExtAtomicOpType)
JSC::B3::Value *JSC::Wasm::B3IRGenerator::emitAtomicBinaryRMWOp(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::B3::Value *, JSC::B3::Value *, uint32_t)
JSC::B3::Value *JSC::Wasm::B3IRGenerator::sanitizeAtomicResult(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::B3::Value *)
./wasm/WasmIRGeneratorHelpers.h
void JSC::Wasm::computeExceptionHandlerLocations(Vector<CodeLocationLabel<ExceptionHandlerPtrTag>> &, const JSC::Wasm::InternalFunction *, const JSC::Wasm::CompilationContext &, JSC::LinkBuffer &)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/wasm/WasmCallee.h
JSC::Wasm::OptimizingJITCallee::OptimizingJITCallee(Wasm::CompilationMode, Wasm::Entrypoint &&, size_t, std::pair<const Name *, RefPtr<NameSection>> &&, Vector<JSC::Wasm::UnlinkedWasmToWasmCall> &&, JSC::Wasm::StackMaps &&, Vector<JSC::Wasm::UnlinkedHandlerInfo> &&, Vector<CodeLocationLabel<ExceptionHandlerPtrTag>> &&)
./wasm/WasmCalleeRegistry.h
void JSC::Wasm::CalleeRegistry::addPCToCodeOriginMap(JSC::Wasm::Callee *, Box<JSC::PCToCodeOriginMap>)
./wasm/WasmCalleeGroup.h
JSC::Wasm::Callee &JSC::Wasm::CalleeGroup::wasmEntrypointCalleeFromFunctionIndexSpace(const WTF::AbstractLocker &, unsigned int)
InstructionStream::Offset JSC::Wasm::LLIntCallee::bytecodeOffset(const JSC::Instruction *)
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)64376, T = JSC::AssemblerLabel]
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/StdLibExtras.h
ToType WTF::safeCast(FromType) [ToType = int, FromType = unsigned long]
WebAssembly.Module failed compiling: 
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Const32Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Const32Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Const32Value *, JSC::B3::Const32Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Const32Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Const32Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Const32Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, Arguments...) [Arguments = <JSC::B3::ConstPtrValue *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Const32Value *, JSC::B3::Value *>]
auto JSC::Wasm::B3IRGenerator::truncSaturated(JSC::Wasm::Ext1OpType, JSC::Wasm::B3IRGenerator::ExpressionType, JSC::Wasm::B3IRGenerator::ExpressionType &, JSC::Wasm::Type, JSC::Wasm::Type)::(anonymous class)::operator()(JSC::CCallHelpers &, const JSC::B3::StackmapGenerationParams &) const
Wasm: 
can't add 
 arguments to Function
can't get local groups count
can't allocate enough memory for function's 
can't get Function's number of locals in group 
Function's number of locals is too big 
 maximum 
can't get Function local's type in group 
Function locals must have a defaultable type
WebAssembly.Module doesn't parse at byte 
can't decode opcode
invalid opcode 
else block isn't associated to an if
wasm exceptions are not enabled
catch block isn't associated to a try
./wasm/WasmFunctionParser.h
JSC::Wasm::Parser<void>::PartialResult JSC::Wasm::FunctionParser<JSC::Wasm::B3IRGenerator>::parseUnreachableExpression() [Context = JSC::Wasm::B3IRGenerator]
can't use delegate at the top-level of a function
delegate isn't associated to a try
delegate target isn't a try block
can't get inline type for 
 in unreachable context
can't get the number of targets for br_table in unreachable context
br_table's number of targets is too big 
can't get 
th target for br_table in unreachable context
can't get default target for br_table in unreachable context
can't get call_indirect's signature index in unreachable context
can't get call_indirect's reserved byte in unreachable context
can't parse 32-bit floating-point constant
can't parse 64-bit floating-point constant
can't get first immediate for 
can't get second immediate for 
rethrow doesn't refer to a catch block
can't get immediate for 
can't parse extended 0xfc opcode
invalid extended 0xfc op 
can't parse table index
can't parse reserved byte for grow_memory/current_memory
reserved byte for grow_memory/current_memory must be zero
wasm-threading is not enabled
can't parse atomic extended opcode
atomic instruction without memory
can't get load alignment
byte alignment 
 exceeds load's natural alignment 
can't get first immediate for atomic 
can't get flags
flags should be 0x0 but got 
invalid extended atomic op 
WebAssembly.Module doesn't validate: 
can't parse exception index
exception index 
 is invalid, limit is 
can't get br / br_if's target
br / br_if's target 
 exceeds control stack size 
 block with type: 
 returns: 
 but stack has: 
 values
control flow returns with unexpected type. 
 is not a 
result type of block: 
 is not a value type or Void
Block-like instruction doesn't return value type but can't decode type section index
Block-like instruction signature index is negative
Block-like instruction signature index is out of bounds. Index: 
 type index space: 
int JSC::Wasm::linearizeType(JSC::Wasm::TypeKind)
I32Const
I64Const
F64Const
F32Const
RefIsNull
RefFunc
GetLocal
SetLocal
TeeLocal
GetGlobal
SetGlobal
TableGet
TableSet
CallIndirect
CallRef
CurrentMemory
GrowMemory
Unreachable
Block
Loop
Else
Catch
Throw
Rethrow
BrIf
BrTable
Delegate
CatchAll
Drop
AnnotatedSelect
I32Clz
I32Eqz
I64Clz
I64Eqz
F32Abs
F32Neg
F32Ceil
F32Floor
F32Sqrt
F64Abs
F64Neg
F64Ceil
F64Floor
F64Sqrt
I32WrapI64
I64ExtendSI32
I64ExtendUI32
F32ConvertSI32
F32ConvertUI32
F32ConvertSI64
F32DemoteF64
F32ReinterpretI32
F64ConvertSI32
F64ConvertUI32
F64ConvertSI64
F64PromoteF32
F64ReinterpretI64
I32ReinterpretF32
I64ReinterpretF64
I32Extend8S
I32Extend16S
I64Extend8S
I64Extend16S
I64Extend32S
I32Ctz
I32Popcnt
I64Ctz
I64Popcnt
F32Trunc
F32Nearest
F64Trunc
F64Nearest
I32TruncSF32
I32TruncSF64
I32TruncUF32
I32TruncUF64
I64TruncSF32
I64TruncSF64
I64TruncUF32
I64TruncUF64
F32ConvertUI64
F64ConvertUI64
I32Add
I32Sub
I32Mul
I32And
I32Or
I32Xor
I32Shl
I32ShrU
I32ShrS
I32Rotr
I32Rotl
I32Eq
I32Ne
I32LtS
I32LeS
I32LtU
I32LeU
I32GtS
I32GeS
I32GtU
I32GeU
I64Add
I64Sub
I64Mul
I64And
I64Or
I64Xor
I64Shl
I64ShrU
I64ShrS
I64Rotr
I64Rotl
I64Eq
I64Ne
I64LtS
I64LeS
I64LtU
I64LeU
I64GtS
I64GeS
I64GtU
I64GeU
F32Add
F32Sub
F32Mul
F32Div
F32Min
F32Max
F32Copysign
F32Eq
F32Ne
F32Lt
F32Le
F32Gt
F32Ge
F64Add
F64Sub
F64Mul
F64Div
F64Min
F64Max
F64Copysign
F64Eq
F64Ne
F64Lt
F64Le
F64Gt
F64Ge
I32DivS
I32DivU
I32RemS
I32RemU
I64DivS
I64DivU
I64RemS
I64RemU
I32Load8S
I32Load8U
I32Load16S
I32Load16U
I64Load8S
I64Load8U
I64Load16S
I64Load16U
I64Load32S
I64Load32U
I32Load
I64Load
F32Load
F64Load
I32Store8
I32Store16
I64Store8
I64Store16
I64Store32
I32Store
I64Store
F32Store
F64Store
Ext1
ExtAtomic
const char *JSC::Wasm::makeString(JSC::Wasm::OpType)
can't get index for local
attempt to use unknown local 
 last one is 
can't get global's index
 of unknown global, limit is 
can't parse function index
function index 
 exceeds function index space 
can't parse element index
element index 
table index 
can't parse destination table index
can't parse source table index
can't parse auxiliary byte
auxiliary byte for memory.fill should be zero, but got 
auxiliary byte for memory.copy should be zero, but got 
can't parse unused
memory.init invalid unsued byte
can't parse data segment index
data segment index 
select can't parse the size of annotation vector
select invalid result arity for
select can't parse annotations
can't pop empty stack in select condition
can't pop empty stack in select zero
can't pop empty stack in select non-zero
can't use ref-types with unannotated select
select condition must be i32, got 
select result types must match, got 
can't parse 32-bit constant
can't parse 64-bit constant
can't pop empty stack in table.get
table.get index to type 
 expected 
can't pop empty stack in table.set
table.set index to type 
table.set value to type 
JSC::Wasm::Parser<void>::PartialResult JSC::Wasm::FunctionParser<JSC::Wasm::B3IRGenerator>::parseExpression() [Context = JSC::Wasm::B3IRGenerator]
can't parse 0xfc extended opcode
can't pop empty stack in table.init
table.init dst_offset to type 
table.init src_offset to type 
table.init length to type 
can't pop empty stack in table.grow
table.grow expects fill value of type 
 got 
table.grow expects an i32 delta value, got 
can't pop empty stack in table.fill
table.fill expects fill value of type 
table.fill expects an i32 offset value, got 
table.fill expects an i32 count value, got 
type mismatch at table.copy. got 
can't pop empty stack in table.copy
table.copy dst_offset to type 
table.copy src_offset to type 
table.copy length to type 
memory must be present
can't pop empty stack in memory.fill
memory.fill dstAddress to type 
memory.fill targetValue to type 
memory.fill size to type 
can't pop empty stack in memory.copy
memory.copy dstAddress to type 
memory.copy targetValue to type 
memory.copy size to type 
can't pop empty stack in memory.init
memory.init dst address to type 
memory.init src address to type 
memory.init length to type 
invalid 0xfc extended op 
ref.null heaptype must be funcref, externref or type_idx
ref.null type must be a reference type
can't pop empty stack in ref.is_null
ref.is_null to type 
 expected a reference type
can't get index for ref.func
ref.func index 
 is too large, max is 
 isn't declared
can't pop empty stack in set_local
attempt to set unknown local 
set_local to type 
can't tee_local on empty expression stack
attempt to tee unknown local 
can't pop empty stack in set_global value
set_global 
 is immutable
 with type 
 with a variable of type 
call function index 
 has 
 arguments, but the expression stack currently holds 
can't allocate enough memory for call's 
argument type mismatch in call, got 
call_indirect is only valid when a table is defined or imported
can't get call_indirect's signature index
can't get call_indirect's table index
call_indirect's table index 
 invalid, limit is 
call_indirect's signature index 
 exceeds known signatures 
call_indirect is only valid when a table has type funcref
call_indirect expects 
non-i32 call_indirect index 
can't allocate enough memory for 
 call_indirect arguments
argument type mismatch in call_indirect, got 
function references are not enabled
non-funcref call_ref value 
call_ref expects 
can't get block's signature
Too few values on stack for block. Block expects 
, but only 
 were present. Block has inlineSignature: 
Block expects the argument at index
 to be 
 but argument has type 
can't get loop's signature
Too few values on stack for loop block. Loop expects 
 were present. Loop has inlineSignature: 
Loop expects the argument at index
can't get if's signature
can't pop empty stack in if condition
if condition must be i32, got 
Too few arguments on stack for if block. If expects 
 were present. If block has signature: 
can't use else block at the top-level of a function
can't get try's signature
Too few arguments on stack for try block. Trye expects 
 were present. Try block has signature: 
Try expects the argument at index
can't use catch block at the top-level of a function
delegate target isn't a try or the top level block
Too few arguments on stack for the exception being thrown. The exception expects 
 were present. Exception has signature: 
can't allocate enough memory for throw's 
The exception being thrown expects the argument at index 
can't pop empty stack in br / br_if condition
conditional branch with non-i32 condition 
can't get the number of targets for br_table
 br_table targets
th target for br_table
br_table's 
th target 
can't get default target for br_table
br_table's default target 
can't pop empty stack in br_table condition
br_table with non-i32 condition 
br_table target type size mismatch. Default has size: 
but target: 
 has size: 
br_table target type mismatch at offset 
 expected: 
 but saw: 
 when targeting block: 
can't drop on empty stack
grow_memory is only valid if a memory is defined or imported
can't parse reserved byte for grow_memory
reserved byte for grow_memory must be zero
can't pop empty stack in expect an i32 argument to grow_memory on the stack
grow_memory with non-i32 delta argument has type: 
current_memory is only valid if a memory is defined or imported
can't parse reserved byte for current_memory
reserved byte for current_memory must be zero
can't pop empty stack in binary right
can't pop empty stack in binary left
 left value type mismatch
 right value type mismatch
can't pop empty stack in unary
 value type mismatch
load instruction without memory
can't get load offset
can't pop empty stack in load pointer
 pointer type mismatch
uint32_t JSC::Wasm::memoryLog2Alignment(JSC::Wasm::OpType)
store instruction without memory
can't get store alignment
 exceeds store's natural alignment 
can't get store offset
can't pop empty stack in store value
can't pop empty stack in store pointer
trunc-saturated value type mismatch
can't pop empty stack in value
can't pop empty stack in pointer
can't pop empty stack in timeout
 timeout type mismatch
can't pop empty stack in count
 count type mismatch
can't pop empty stack in expected
 expected type mismatch
branch out of function
branch to block
 on expression stack of size 
, but block, 
 expects 
branch's stack type is not a block's type branch target type. Stack value has type 
 but branch target expects a value of 
 at index 
Failed allocating enough space for 
static void JSC::AbstractMacroAssembler<JSC::ARM64Assembler>::repatchNearCall(CodeLocationNearCall<callTag>, CodeLocationLabel<destTag>) [AssemblerType = JSC::ARM64Assembler, callTag = (WTF::PtrTag)64376, destTag = (WTF::PtrTag)64376]
./wasm/WasmEntryPlan.h
Vector<MacroAssemblerCodeRef<WasmEntryPtrTag>> &&JSC::Wasm::EntryPlan::takeWasmToWasmExitStubs()
Vector<Vector<JSC::Wasm::UnlinkedWasmToWasmCall>> JSC::Wasm::EntryPlan::takeWasmToWasmCallsites()
./wasm/WasmLLIntPlan.h
JSC::Wasm::EmbedderEntrypointCalleeMap &&JSC::Wasm::LLIntPlan::takeEmbedderCallees()
./wasm/WasmCallingConvention.cpp
auto JSC::Wasm::wasmCallingConvention()::(anonymous class)::operator()() const
./wasm/WasmEntryPlan.cpp
const char *JSC::Wasm::EntryPlan::stateString(JSC::Wasm::EntryPlan::State)
Took 
 us to validate module
 WebAssembly to JavaScript stubs
 unlinked WebAssembly to WebAssembly calls
Out of executable memory at import 
void JSC::Wasm::EntryPlan::prepare()
./wasm/WasmGlobal.cpp
void JSC::Wasm::Global::set(JSC::JSGlobalObject *, JSC::JSValue)
Non-null Externref cannot be null
Funcref must be an exported wasm function
Argument function did not match the reference type
.wasm-function[
./wasm/WasmFaultSignalHandler.cpp
WTF::SignalAction JSC::Wasm::trapHandler(WTF::Signal, WTF::SigInfo &, WTF::PlatformRegisters &)
bool JSC::LLInt::isWasmLLIntPC(void *)
void JSC::Wasm::Global::visitAggregateImpl(Visitor &) [Visitor = JSC::AbstractSlotVisitor]
void JSC::Wasm::Global::visitAggregateImpl(Visitor &) [Visitor = JSC::SlotVisitor]
./wasm/WasmInstance.cpp
JSC::Wasm::Table *JSC::Wasm::Instance::table(unsigned int)
void JSC::Wasm::Instance::tableCopy(uint32_t, uint32_t, uint32_t, uint32_t, uint32_t)
bool JSC::Wasm::Instance::memoryInit(uint32_t, uint32_t, uint32_t, uint32_t)
const JSC::Wasm::Element *JSC::Wasm::Instance::elementAt(unsigned int) const
void JSC::Wasm::Instance::initElementSegment(uint32_t, const JSC::Wasm::Element &, uint32_t, uint32_t, uint32_t)
void JSC::Wasm::Instance::tableInit(uint32_t, uint32_t, uint32_t, uint32_t, uint32_t)
void JSC::Wasm::Instance::setTable(unsigned int, Ref<JSC::Wasm::Table> &&)
./wasm/WasmLLIntGenerator.cpp
std::unique_ptr<FunctionCodeBlockGenerator> JSC::Wasm::LLIntGenerator::finalize()
JSC::Wasm::LLIntGenerator::LLIntCallInformation JSC::Wasm::LLIntGenerator::callInformationForCaller(const JSC::Wasm::Signature &)
Vector<JSC::VirtualRegister, 2> JSC::Wasm::LLIntGenerator::callInformationForCallee(const JSC::Wasm::Signature &)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::addArguments(const JSC::Wasm::Signature &)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::addCatchToUnreachable(unsigned int, const JSC::Wasm::Signature &, JSC::Wasm::LLIntGenerator::ControlType &, JSC::Wasm::LLIntGenerator::ResultList &)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::addEndToUnreachable(JSC::Wasm::LLIntGenerator::ControlEntry &, JSC::Wasm::LLIntGenerator::Stack &, bool)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::endTopLevel(JSC::Wasm::BlockSignature, const JSC::Wasm::LLIntGenerator::Stack &)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::atomicLoad(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType &, uint32_t)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::atomicStore(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType, uint32_t)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::atomicBinaryRMW(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType &, uint32_t)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::atomicCompareExchange(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType &, uint32_t)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::atomicWait(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType &, uint32_t)
JSC::Wasm::LLIntGenerator::PartialResult JSC::Wasm::LLIntGenerator::truncSaturated(JSC::Wasm::Ext1OpType, JSC::Wasm::LLIntGenerator::ExpressionType, JSC::Wasm::LLIntGenerator::ExpressionType &, JSC::Wasm::Type, JSC::Wasm::Type)
void JSC::GenericLabel<JSC::Wasm::GeneratorTraits>::setLocation(BytecodeGeneratorBase<Wasm::GeneratorTraits> &, unsigned int) [Traits = JSC::Wasm::GeneratorTraits]
Out of executable memory in Wasm LLInt entry thunks
Wasm LLInt entry thunks
Embedder->WebAssembly entrypoint[%i] %s
./wasm/WasmLLIntTierUpCounter.cpp
const JSC::Wasm::LLIntTierUpCounter::OSREntryData &JSC::Wasm::LLIntTierUpCounter::osrEntryDataForLoop(InstructionStream::Offset) const
mprotect failed: 
./wasm/WasmMemory.cpp
JSC::Wasm::MemoryHandle::~MemoryHandle()
static RefPtr<JSC::Wasm::Memory> JSC::Wasm::Memory::tryCreate(JSC::Wasm::PageCount, JSC::Wasm::PageCount, JSC::Wasm::MemorySharingMode, WTF::Function<void (NotifyPressure)> &&, WTF::Function<void (SyncTryToReclaim)> &&, WTF::Function<void (GrowSuccess, PageCount, PageCount)> &&)
Expected<JSC::Wasm::PageCount, Memory::GrowFailReason> JSC::Wasm::Memory::grow(JSC::Wasm::PageCount)
./wasm/WasmMemoryInformation.cpp
JSC::Wasm::MemoryInformation::MemoryInformation(JSC::Wasm::PageCount, JSC::Wasm::PageCount, bool, bool)
BoundsChecking
Signaling
./wasm/WasmMemoryMode.cpp
const char *JSC::Wasm::makeString(JSC::Wasm::MemoryMode)
Default
Shared
const char *JSC::Wasm::makeString(JSC::Wasm::MemorySharingMode)
./wasm/WasmInstance.h
JSC::Wasm::Instance::ImportFunctionInfo *JSC::Wasm::Instance::importFunctionInfo(size_t)
JSC::Wasm::Callee &JSC::Wasm::CalleeGroup::embedderEntrypointCalleeFromFunctionIndexSpace(unsigned int)
MacroAssemblerCodePtr<WasmEntryPtrTag> *JSC::Wasm::CalleeGroup::entrypointLoadLocationFromFunctionIndexSpace(unsigned int)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/bytecode/InstructionStream.h
void JSC::InstructionStreamWriter::setInstructionBuffer(JSC::InstructionStream::InstructionBuffer &&)
std::unique_ptr<InstructionStream> JSC::InstructionStreamWriter::finalize(JSC::InstructionStream::InstructionBuffer &)
auto JSC::Wasm::LLIntGenerator::callInformationForCaller(const JSC::Wasm::Signature &)::(anonymous class)::operator()(JSC::Wasm::Type) const
Freed physical: 
; state: 
fast memories =  
, bytes = 
Freed virtual; state: 
auto JSC::Wasm::Memory::growShared(JSC::Wasm::PageCount)::(anonymous class)::operator()() const
Allocated physical: 
SuccessAndNotifyMemoryPressure
SyncTryToReclaimMemory
static const char *JSC::Wasm::(anonymous namespace)::MemoryResult::toString(JSC::Wasm::(anonymous namespace)::MemoryResult::Kind)
./wasm/WasmPageCount.h
static JSC::Wasm::PageCount JSC::Wasm::PageCount::fromBytes(uint64_t)
JSC::Wasm::Parser<void>::PartialResult JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseUnreachableExpression() [Context = JSC::Wasm::LLIntGenerator]
JSC::Wasm::Parser<void>::PartialResult JSC::Wasm::FunctionParser<JSC::Wasm::LLIntGenerator>::parseExpression() [Context = JSC::Wasm::LLIntGenerator]
/AppleInternal/Library/BuildRoots/1c89e238-c653-11ec-9698-a6bb6e03c12d/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator15.5.Internal.sdk/usr/local/include/wtf/ThreadSpecific.h
T *WTF::ThreadSpecific<WTF::Vector<unsigned char, 0, WTF::UnsafeVectorOverflow, 16>, WTF::CanBeGCThread::False>::set() [T = WTF::Vector<unsigned char, 0, WTF::UnsafeVectorOverflow, 16>, canBeGCThread = WTF::CanBeGCThread::False]
int JSC::GenericBoundLabel<JSC::Wasm::GeneratorTraits>::target() [Traits = JSC::Wasm::GeneratorTraits]
Allocated virtual: 
{basePtr = 
, kind = 
can't allocate enough memory for function names
can't get name type for payload 
can't get payload length for payload 
payload length is too big for payload 
can't get module's name length for payload 
can't get module's name of length 
 for payload 
can't get function count for payload 
can't get function 
 index for payload 
 index 
 is larger than function index space 
can't get functions 
's name length for payload 
's name of length 
can't get local's function index for payload 
can't get local count for payload 
can't get local 
when trying to tier up 
WebAssembly OMG function[%i] %s name %s
WebAssembly OMGForOSREntry function[%i] %s name %s
./wasm/WasmOSREntryPlan.cpp
virtual void JSC::Wasm::OSREntryPlan::work(JSC::Wasm::Plan::CompilationEffort)
{opcode: 
, location: 
OMG OSR entry values[
./wasm/WasmOperations.cpp
void JSC::Wasm::loadValuesIntoBuffer(Probe::Context &, const JSC::Wasm::StackMap &, uint64_t *)
Consider OSREntryPlan for [
] loopIndex#
delayOMGCompile still compiling for 
triggerOMGOSR for 
Consider OMGPlan for [
] with executeCounter = 
delayOMGCompile replacement in place, delaying indefinitely for 
delayOMGCompile trigger in place, delaying indefinitely for 
JS results to Wasm are too large
Incorrect number of values returned to Wasm from JS
Funcref value is not a function
void JSC::Wasm::operationIterateResults(JSC::CallFrame *, JSC::Wasm::Instance *, const JSC::Wasm::Signature *, JSC::JSValue, uint64_t *, uint64_t *)
JSC::JSArray *JSC::Wasm::operationAllocateResultsArray(JSC::CallFrame *, Wasm::Instance *, const JSC::Wasm::Signature *, JSC::IndexingType, JSC::JSValue *)
int32_t JSC::Wasm::operationGrowMemory(void *, JSC::Wasm::Instance *, int32_t)
JSC::Wasm::PointerPair JSC::Wasm::operationWasmRetrieveAndClearExceptionIfCatchable(JSC::Wasm::Instance *)
Ref<JSC::Wasm::ModuleInformation> &&JSC::Wasm::EntryPlan::takeModuleInformation()
Vector<Ref<JSC::Wasm::LLIntCallee>> &&JSC::Wasm::LLIntPlan::takeCallees()
MacroAssemblerCodeRef<JITCompilationPtrTag> &&JSC::Wasm::LLIntPlan::takeEntryThunks()
JSC::Wasm::BBQCallee &JSC::Wasm::CalleeGroup::wasmBBQCalleeFromFunctionIndexSpace(unsigned int)
delayOMGCompile counter = 
Choosing not to OMG-optimize 
triggerOMGReplacement for 
: OMG-optimizing soon.
: Not OMG-optimizing anytime soon.
: OMG-optimizing after warm-up.
void JSC::Wasm::doOSREntry(JSC::Wasm::Instance *, Probe::Context &, JSC::Wasm::BBQCallee &, JSC::Wasm::OSREntryCallee &, JSC::Wasm::OSREntryData &)
:OMG OSR entry: got entry callee 
Inner-loop loopIndex#
 setting parent loop loopIndex#
WebAssembly Plan was cancelled. If you see this error message please file a bug at bugs.webkit.org!
can't get Type section's count
Type section's count is too big 
can't allocate enough memory for Type section's 
 entries
can't get 
th Type's type
th Type is non-Func 
th Type's argument count
th argument count is too big 
th signature
th argument Type
th Type's return count
th Type's return value
can't get Import section's count
Import section's count is too big 
 globals
 imports
 import function signatures
 import exception signatures
th Import's module name length
th Import's module name of length 
th Import's field name length in module '
th Import's field name of length 
 in module '
th Import's kind in module '
' field '
th Import's function signature in module '
invalid function signature for 
th Import, 
 is out of range of 
th Import exception's tag type
th Import exception has tag type 
 but the only supported tag type is 0
th Import's exception signature in module '
invalid exception signature for 
can't get Function section's count
Function section's count is too big 
 Function signatures
Function locations
th Function's type number
th Function type number is invalid 
can't parse resizable limits flags
resizable limits flag should be 0x00, 0x01, or 0x03 but 0x
can't use shared limits for non memory
can't parse resizable limits initial page count
shared memory is not enabled
can't parse resizable limits maximum page count
resizable limits has an initial page count of 
 which is greater than its maximum 
Table count of 
 is too big, maximum 
can't parse Table type
Table type should be funcref or anyref, got 
Table's initial page count of 
can't get Table's count
there can at most be one Memory section for now
Memory's initial page count of 
 is invalid
Memory's maximum page count of 
can't parse Memory section's count
Memory section has more than one memory, WebAssembly currently only allows zero or one
can't get Global section's count
Global section's count is too big 
Global init_expr opcode of type 
 doesn't match global's type 
can't get Export section's count
Export section's count is too big 
 exports
th Export's field name length
th Export's field name of length 
duplicate export: '
th Export's kind, named '
th Export's kind index, named '
th Export has invalid function number 
 it exceeds the function index space 
, named '
can't export Table 
 there are 
 Tables
can't export a non-existent Memory
can't export Memory 
 only one Table is currently supported
th Export has invalid global number 
 it exceeds the globals count 
th Export has invalid exception number 
 it exceeds the exception index space 
can't get Start index
Start index 
Start function can't have arguments
Start function can't return a value
can't get Element section's count
Element section's count is too big 
 Elements
th Element reserved byte, which should be element flags
 Element indices
th Element table index
can't parse reftype in elem section
reftype in element section should be funcref
th Element reserved byte
./wasm/WasmSectionParser.cpp
JSC::Wasm::Parser<void>::PartialResult JSC::Wasm::SectionParser::parseCode()
can't get init_expr's opcode
can't get constant value for init_expr's i32.const
can't get constant value for init_expr's i64.const
can't get constant value for init_expr's f32.const
can't get constant value for init_expr's f64.const
can't get get_global's index
get_global's index 
 exceeds the number of globals 
get_global import kind index 
 exceeds the first internal global 
 is mutable 
can't get ref.func index
ref.func index
 exceeds the number of functions 
unknown init_expr opcode 
can't get init_expr's end opcode
init_expr should end with end, ended with 
Element section for Table 
 exceeds available Table 
Table 
 must have type 'funcref' to have an element section
Element init_expr must produce an i32
can't get element kind
element kind must be zero
th index count for Element section
Element section's 
th index count is too big 
can't get opcode for exp in element section's 
th element's 
th index
opcode for exp in element section's should be either ref.func or ref.null 
can't get Element section's 
th index is 
 which exceeds the function index space size of 
ref.null type must be a func type in elem section
ref.null extern is forbidden in element section's, 
can't get opcode for exp end in element section's 
malformed expr in element section's
Data init_expr must produce an i32
can't get Global's value type
can't get Global type's mutability
invalid Global's mutability: 0x
can't get Data section's count
Data section's count is too big 
can't allocate enough memory for Data section's 
 segments
th Data segment's flag
th Data segment has index 
 which exceeds the number of Memories 
th Data segment's data byte length
th Data segment's data byte length is too big 
th Data segment of size 
th data byte from 
th Data segment
th Data segment's index
unknown 
can't get Data Count section's count
can't get Exception section's count
 exceptions
th Exception tag type
th Exception has tag type 
th Exception's type number
th Exception type number is invalid 
th custom section
th custom section's name length
nameLen get 
th custom section's name of length 
th custom section's 
 bytes
 -> [
: Entered prologue_osr with tierUpCounter = 
: Entered loop_osr with tierUpCounter = 
: Entered epilogue_osr with tierUpCounter = 
./wasm/WasmSlowPaths.cpp
JSC::SlowPathReturnType JSC::LLInt::slow_path_wasm_retrieve_and_clear_exception(JSC::CallFrame *, const JSC::Instruction *, Wasm::Instance *)
module doesn't start with '\0asm'
unexpected version number 
can't get section byte
invalid section
invalid section order, 
 followed by 
Code section's count is too big 
Code section count 
 exceeds the declared number of functions 
parsing ended before the end of 
 section
Code function's size 
 is too big
./wasm/WasmStreamingParser.cpp
JSC::Wasm::StreamingParser::State JSC::Wasm::StreamingParser::parseSectionPayload(Vector<uint8_t> &&)
module size is too large, maximum 
expected a module of at least 
 section's length
 section of size 
 would overflow Module's size
can't get Code section's count
th Code function's size
 exceeds the module's remaining size
Number of functions parsed (
) does not match the number of declared functions (
./wasm/WasmTable.cpp
static RefPtr<JSC::Wasm::Table> JSC::Wasm::Table::tryCreate(uint32_t, std::optional<uint32_t>, JSC::Wasm::TableElementType)
std::optional<uint32_t> JSC::Wasm::Table::grow(uint32_t, JSC::JSValue)
void JSC::Wasm::Table::copy(const JSC::Wasm::Table *, uint32_t, uint32_t)
void JSC::Wasm::Table::clear(uint32_t)
void JSC::Wasm::Table::set(uint32_t, JSC::JSValue)
JSC::JSValue JSC::Wasm::Table::get(uint32_t) const
void JSC::Wasm::FuncRefTable::setFunction(uint32_t, JSC::JSObject *, JSC::Wasm::WasmToWasmImportableFunction, JSC::Wasm::Instance *)
./wasm/WasmParser.h
JSC::Wasm::I32InitExpr JSC::Wasm::makeI32InitExpr(uint8_t, uint32_t)
./wasm/WasmCallee.h
InstructionStream::Offset JSC::Wasm::LLIntCallee::bytecodeOffset(const JSC::Instruction *)
auto JSC::LLInt::slow_path_wasm_loop_osr(JSC::CallFrame *, const JSC::Instruction *, Wasm::Instance *)::(anonymous class)::operator()(Wasm::OSREntryCallee *) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/wasm/WasmInstance.h
auto JSC::LLInt::slow_path_wasm_retrieve_and_clear_exception(JSC::CallFrame *, const JSC::Instruction *, Wasm::Instance *)::(anonymous class)::operator()(const auto &) const [instruction:auto = JSC::WasmCatch]
auto JSC::LLInt::slow_path_wasm_retrieve_and_clear_exception(JSC::CallFrame *, const JSC::Instruction *, Wasm::Instance *)::(anonymous class)::operator()(const auto &) const [instruction:auto = JSC::WasmCatchNoTls]
./wasm/WasmSignature.cpp
static void JSC::Wasm::ParameterTypes::translate(JSC::Wasm::SignatureHash &, const JSC::Wasm::ParameterTypes &, unsigned int)
Begin
Custom
Type
Import
Table
Memory
Global
Export
Start
Code
Data
DataCount
Exception
void JSC::Wasm::Table::visitAggregateImpl(Visitor &) [Visitor = JSC::AbstractSlotVisitor]
void JSC::Wasm::Table::visitAggregateImpl(Visitor &) [Visitor = JSC::SlotVisitor]
Throw exception from Wasm
Throw stack overflow from Wasm
Trigger OMG entry tier up
./wasm/WasmValueLocation.cpp
void JSC::Wasm::ValueLocation::dump(WTF::PrintStream &) const
void WTF::printInternal(WTF::PrintStream &, ValueLocation::Kind)
./wasm/WasmWorklist.cpp
void JSC::Wasm::Worklist::QueueElement::setToNextPriority()
./wasm/js/JSToWasm.cpp
std::unique_ptr<InternalFunction> JSC::Wasm::createJSToWasmWrapper(JSC::CCallHelpers &, const JSC::Wasm::Signature &, Vector<JSC::Wasm::UnlinkedWasmToWasmCall> *, const JSC::Wasm::ModuleInformation &, JSC::Wasm::MemoryMode, unsigned int)
JSToWasmICCallee
WebAssembly
second argument to WebAssembly.instantiateStreaming must be undefined or an Object
Wasm Worklist Helper Thread
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/wasm/WasmCallingConvention.h
JSC::Wasm::ArgumentLocation JSC::Wasm::JSCallingConvention::marshallLocation(JSC::Wasm::CallRole, JSC::Wasm::Type, size_t &, size_t &, size_t &) const
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
CompileError
Exception
Global
Instance
LinkError
Memory
Module
RuntimeError
Table
compile
instantiate
validate
second argument to WebAssembly.instantiate must be undefined or an Object
instance
WebAssembly.Exception
WebAssembly.Global
mutable
funcref
externref
./wasm/js/JSWebAssemblyGlobal.cpp
JSC::JSObject *JSC::JSWebAssemblyGlobal::type(JSC::JSGlobalObject *)
WebAssembly.Instance
./wasm/js/JSWebAssemblyInstance.cpp
void JSC::JSWebAssemblyInstance::finalizeCreation(JSC::VM &, JSC::JSGlobalObject *, Ref<Wasm::CalleeGroup> &&, JSC::JSObject *, Wasm::CreationMode)
WebAssemblyInstance
can't make WebAssembly.Instance because there is no imports Object and the WebAssembly.Module requires imports
WebAssemblyImportName
must be an object
static JSC::JSWebAssemblyInstance *JSC::JSWebAssemblyInstance::tryCreate(JSC::VM &, JSC::JSGlobalObject *, const JSC::Identifier &, JSC::JSWebAssemblyModule *, JSC::JSObject *, JSC::Structure *, Ref<Wasm::Module> &&, Wasm::CreationMode)
Memory import
is not an instance of WebAssembly.Memory
provided an 'initial' that is smaller than the module's declared 'initial' import memory size
did not have a 'maximum' but the module requires that it does
provided a 'maximum' that is larger than the module's declared 'maximum' import memory size
provided a 'shared' that is differnt from the module's declared 'shared' import memory attribute
WebAssembly.Memory
./wasm/js/JSWebAssemblyMemory.cpp
JSC::JSArrayBuffer *JSC::JSWebAssemblyMemory::buffer(JSC::JSGlobalObject *)
WebAssembly.Memory.grow expects the delta to be a valid page count
WebAssembly.Memory.grow expects the grown size to be a valid page count
WebAssembly.Memory.grow would exceed the memory's declared maximum size
maximum
minimum
WebAssembly.Module
Out of executable memory
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
./wasm/js/JSWebAssemblyHelpers.h
JSC::JSValue JSC::toJSValue(JSC::JSGlobalObject *, const Wasm::Type, uint64_t)
Out of bounds memory access
Out of bounds table access
Out of bounds call_indirect
call_indirect to a null table entry
call_ref to a null reference
call_indirect to a signature that does not match
Out of bounds Trunc operation
Unreachable code should not be executed
Division by zero
Integer overflow
Stack overflow
Funcref must be an exported wasm function
WebAssembly.Table
./wasm/js/JSWebAssemblyTable.cpp
void JSC::JSWebAssemblyTable::set(uint32_t, JSC::JSValue)
void JSC::JSWebAssemblyTable::set(uint32_t, JSC::WebAssemblyFunctionBase *)
void JSC::JSWebAssemblyTable::clear(uint32_t)
JSC::JSObject *JSC::JSWebAssemblyTable::type(JSC::JSGlobalObject *)
WebAssembly.Tag
./wasm/js/WasmToJS.cpp
Expected<MacroAssemblerCodeRef<WasmEntryPtrTag>, JSC::Wasm::BindingFailure> JSC::Wasm::wasmToJS(JSC::VM &, Bag<JSC::OptimizingCallLinkInfo> &, JSC::Wasm::SignatureIndex, unsigned int)
WebAssembly->JavaScript import[%i] %s
Function
CompileError
WebAssembly.CompileError
Exception
WebAssembly.Exception
WebAssemblyFunction
./wasm/js/WebAssemblyFunction.cpp
MacroAssemblerCodePtr<JSEntryPtrTag> JSC::WebAssemblyFunction::jsCallEntrypointSlow()
JS->Wasm IC
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
WebAssembly.Exception constructor expects the first argument to be a WebAssembly.Tag
WebAssembly.Exception constructor expects the number of paremeters in WebAssembly.Tag to match the tags parameter count.
./wasm/js/JSWebAssemblyHelpers.h
uint64_t JSC::fromJSValue(JSC::JSGlobalObject *, const Wasm::Type, JSC::JSValue)
getArg
First argument must be a WebAssembly.Tag
First argument does not match the exception tag
Index out of range
WebAssembly.Exception operation called on non-Exception object
WebAssembly.Exception.getArg(): 
WebAssembly.Exception.is(): First argument must be a WebAssembly.Tag
WebAssemblyFunctionBase
Function
WebAssembly.Global
get value
set value
Instance
WebAssembly.Instance
LinkError
WebAssembly.LinkError
WebAssembly.Global expects its first argument to be an object
WebAssembly.Global expects its 'value' field to be the string 'i32', 'i64', 'f32', 'f64', 'anyfunc', 'funcref', or 'externref'
./wasm/js/WebAssemblyGlobalConstructor.cpp
JSC::EncodedJSValue JSC::constructJSWebAssemblyGlobal(JSC::JSGlobalObject *, JSC::CallFrame *)
valueOf
type
expected |this| value to be an instance of WebAssembly.Global
WebAssembly.Global.prototype.value attempts to modify immutable global value
first argument to WebAssembly.Instance must be a WebAssembly.Module
second argument to WebAssembly.Instance must be undefined or an Object
exports
expected |this| value to be an instance of WebAssembly.Instance
WebAssembly.Memory
WebAssembly.Memory expects its first argument to be an object
WebAssembly.Memory 'initial' and 'minimum' options are specified at the same time
WebAssembly.Memory 'initial' page count is too large
WebAssembly.Memory 'maximum' page count is too large
'maximum' page count must be than greater than or equal to the 'initial' page count
'maximum' page count must be defined if 'shared' is true
Expect an integer argument in the range: [0, 2^32 - 1]
WebAssembly.Memory
Function
WebAssembly.Module
WebAssemblyModuleRecord
./wasm/js/WebAssemblyModuleRecord.cpp
void JSC::WebAssemblyModuleRecord::prepareLink(JSC::VM &, JSC::JSWebAssemblyInstance *)
JSC::Synchronousness JSC::WebAssemblyModuleRecord::link(JSC::JSGlobalObject *, JSC::JSValue)
void JSC::WebAssemblyModuleRecord::initializeImportsAndExports(JSC::JSGlobalObject *, JSC::JSObject *, Wasm::CreationMode)
import function
must be callable
imported function
signature doesn't match the provided WebAssembly function's signature
imported global
must be a same type
must be a same mutability
non-null externref cannot be null
must be a wasm exported function or null
must be a wasm exported function
must be a BigInt
must be a number
must be a non-null value
must be a WebAssembly.Global object since it is mutable
Table import
is not an instance of WebAssembly.Table
provided an 'initial' that is too small
does not have a 'maximum' but the module requires that it does
Imported Table
'maximum' is larger than the module's expected 'maximum'
provided a 'type' that is wrong
Tag import
is not an instance of WebAssembly.Tag
imported Tag
signature doesn't match the imported WebAssembly Tag's signature
provided a 'shared' that is different from the module's declared 'shared' import memory attribute
couldn't create Table
RuntimeError
WebAssembly.RuntimeError
WebAssembly.Table
grow
WebAssembly.Memory.prototype.buffer getter called with non WebAssembly.Memory |this| value
customSections
imports
exports
WebAssembly.Module.customSections called with non WebAssembly.Module argument
WebAssembly.Module.imports called with non WebAssembly.Module argument
memory
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/wasm/WasmFormat.h
const char *JSC::Wasm::makeString(JSC::Wasm::ExternalKind)
WebAssembly.Module.exports called with non WebAssembly.Module argument
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/wasm/WasmCalleeGroup.h
uint32_t JSC::Wasm::I32InitExpr::constValue() const
Element is trying to set an out of bounds table index
, segment is too big
, segment writes outside of memory
Invalid data segment initialization: segment of 
 bytes memory of 
 bytes, at offset 
auto JSC::WebAssemblyModuleRecord::evaluate(JSC::JSGlobalObject *)::(anonymous class)::operator()(uint8_t *, uint64_t, const Wasm::Segment::Ptr &, uint32_t) const
WebAssembly.Table expects its first argument to be an object
WebAssembly.Table expects its 'element' field to be the string 'funcref' or 'externref'
WebAssembly.Table 'initial' and 'minimum' options are specified at the same time
'maximum' property must be greater than or equal to the 'initial' property
WebAssembly.Table.prototype.constructor expects the second argument to be null or an instance of WebAssembly.Function
WebAssembly.Table.prototype.grow expects the second argument to be null or an instance of WebAssembly.Function
WebAssembly.Table.prototype.grow could not grow the table
WebAssembly.Table.prototype.get expects an integer less than the length of the table
WebAssembly.Table.prototype.set expects an integer less than the length of the table
WebAssembly.Table.prototype.set expects the second argument to be null or an instance of WebAssembly.Function
expected |this| value to be an instance of WebAssembly.Table
Function
WebAssembly.Tag
WebAssemblyWrapperFunction
./wasm/js/WebAssemblyWrapperFunction.cpp
void JSC::WebAssemblyWrapperFunction::finishCreation(JSC::VM &, JSC::NativeExecutable *, unsigned int, const WTF::String &, JSC::JSObject *, JSC::JSWebAssemblyInstance *)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/runtime/StructureIDTable.h
JSC::Structure *JSC::StructureIDTable::get(JSC::StructureID)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/heap/IsoSubspaceInlines.h
void *JSC::IsoSubspace::allocate(JSC::VM &, size_t, JSC::GCDeferralContext *, JSC::AllocationFailureMode)
WebAssembly.Tag constructor expects the tag type as the first argument.
WebAssembly.Tag constructor expects a tag type with the 'parameters' property.
WebAssembly.Tag constructor expects the 'parameters' field of the first argument to be a sequence of WebAssembly value types.
type
WebAssembly.Tag operation called on non-Tag object
ref_null
JSC::JSString *JSC::Wasm::typeToString(JSC::VM &, JSC::Wasm::TypeKind)
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/wasm/WasmInstance.h
JSC::Wasm::Instance::ImportFunctionInfo *JSC::Wasm::Instance::importFunctionInfo(size_t)
JSC::EncodedJSValue JSC::callWebAssemblyWrapperFunction(JSC::JSGlobalObject *, JSC::CallFrame *)
     == Matching ==
     == Backtracking ==
     == Helpers ==
Invalid regular expression: regular expression too large
Invalid regular expression: numbers out of order in {} quantifier
Invalid regular expression: nothing to repeat
Invalid regular expression: number too large in {} quantifier
Invalid regular expression: incomplete {} quantifier for Unicode pattern
Invalid regular expression: missing )
Invalid regular expression: unmatched ] or } bracket for Unicode pattern
Invalid regular expression: unmatched parentheses
Invalid regular expression: unrecognized character after (?
Invalid regular expression: invalid group specifier name
Invalid regular expression: duplicate group specifier name
Invalid regular expression: missing terminating ] for character class
Invalid regular expression: range out of order in character class
Invalid regular expression: invalid range in character class for Unicode pattern
Invalid regular expression: \ at end of pattern
Invalid regular expression: invalid Unicode \u escape
Invalid regular expression: invalid Unicode code point \u{} escape
Invalid regular expression: invalid backreference for Unicode pattern
Invalid regular expression: invalid \k<> named backreference
Invalid regular expression: invalid escaped character for Unicode pattern
Invalid regular expression: invalid octal escape for Unicode pattern
Invalid regular expression: invalid \c escape for Unicode pattern
Invalid regular expression: invalid property expression
Invalid regular expression: too many nested disjunctions
Invalid regular expression: pattern exceeds string length limits
Invalid regular expression: invalid flags
isValid:(false)
isValid:(true),characters:(
Match-only 8-bit regular expression
Match-only 16-bit regular expression
8-bit regular expression
16-bit regular expression
%4d:
Term 
Assert BOL
Assert EOL
BackReference pattern #%u
PatternCharacter 
 ignore case
PatternCharacterClass 
not 
%sword boundary
non-
.* enclosure
ForwardReference <not handled>
./yarr/YarrJIT.cpp
virtual int JSC::Yarr::YarrGenerator<>::dumpFor(WTF::PrintStream &, unsigned int) [YarrJITRegs = JSC::Yarr::YarrJITDefaultRegisters]
 already handled
BodyAlternativeBegin minimum size %u
BodyAlternativeNext minimum size %u
BodyAlternativeEnd
SimpleNestedAlternativeBegin minimum size %u
NestedAlternativeBegin minimum size %u
SimpleNestedAlternativeNext minimum size %u
NestedAlternativeNext minimum size %u
SimpleNestedAlternativeEnd
NestedAlternativeEnd
ParenthesesSubpatternOnceBegin 
capturing pattern #%u
non-capturing
ParenthesesSubpatternOnceEnd 
ParenthesesSubpatternTerminalBegin 
capturing pattern #%u
non-capturing
ParenthesesSubpatternTerminalEnd 
ParenthesesSubpatternBegin 
ParenthesesSubpatternEnd 
ParentheticalAssertionBegin%s
 inverted
ParentheticalAssertionEnd%s
MatchFailed
Can't JIT a pattern decoding surrogate pairs
Can't JIT some patterns containing back references
Can't JIT a pattern containing forward references
Can't JIT a pattern containing a variable counted parenthesis with a non-zero minimum
Can't JIT a pattern containing parenthesized subpatterns
Can't JIT a pattern containing fixed count parenthesized subpatterns
Can't JIT pattern due to parentheses nested too deeply
Can't JIT because of failure of allocation of executable memory
virtual int JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::dumpFor(WTF::PrintStream &, unsigned int) [YarrJITRegs = JSC::Yarr::YarrJITRegisters]
./yarr/YarrInterpreter.cpp
unsigned int JSC::Yarr::Interpreter<unsigned char>::interpret() [CharType = unsigned char]
static size_t JSC::Yarr::Interpreter<unsigned char>::DisjunctionContext::allocationSize(unsigned int) [CharType = unsigned char]
JSC::Yarr::JSRegExpResult JSC::Yarr::Interpreter<unsigned char>::matchDisjunction(JSC::Yarr::ByteDisjunction *, JSC::Yarr::Interpreter::DisjunctionContext *, bool) [CharType = unsigned char]
int JSC::Yarr::Interpreter<unsigned char>::InputStream::readChecked(unsigned int) [CharType = unsigned char]
bool JSC::Yarr::Interpreter<unsigned char>::InputStream::atEnd(unsigned int) [CharType = unsigned char]
int JSC::Yarr::Interpreter<unsigned char>::InputStream::readSurrogatePairChecked(unsigned int) [CharType = unsigned char]
void JSC::Yarr::Interpreter<unsigned char>::InputStream::uncheckInput(unsigned int) [CharType = unsigned char]
bool JSC::Yarr::Interpreter<unsigned char>::matchCharacterClass(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned char]
bool JSC::Yarr::Interpreter<unsigned char>::matchBackReference(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned char]
./yarr/YarrCanonicalize.h
bool JSC::Yarr::areCanonicallyEquivalent(UChar32, UChar32, JSC::Yarr::CanonicalMode)
JSC::Yarr::JSRegExpResult JSC::Yarr::Interpreter<unsigned char>::matchParentheses(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned char]
static size_t JSC::Yarr::Interpreter<unsigned char>::ParenthesesDisjunctionContext::allocationSize(unsigned int) [CharType = unsigned char]
static void JSC::Yarr::Interpreter<unsigned char>::popParenthesesDisjunctionContext(JSC::Yarr::Interpreter::BackTrackInfoParentheses *) [CharType = unsigned char]
JSC::Yarr::JSRegExpResult JSC::Yarr::Interpreter<unsigned char>::backtrackParentheses(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned char]
bool JSC::Yarr::Interpreter<unsigned char>::backtrackParenthesesTerminalEnd(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = unsigned char]
unsigned int JSC::Yarr::Interpreter<char16_t>::interpret() [CharType = char16_t]
static size_t JSC::Yarr::Interpreter<char16_t>::DisjunctionContext::allocationSize(unsigned int) [CharType = char16_t]
JSC::Yarr::JSRegExpResult JSC::Yarr::Interpreter<char16_t>::matchDisjunction(JSC::Yarr::ByteDisjunction *, JSC::Yarr::Interpreter::DisjunctionContext *, bool) [CharType = char16_t]
int JSC::Yarr::Interpreter<char16_t>::InputStream::readChecked(unsigned int) [CharType = char16_t]
bool JSC::Yarr::Interpreter<char16_t>::InputStream::atEnd(unsigned int) [CharType = char16_t]
int JSC::Yarr::Interpreter<char16_t>::InputStream::readSurrogatePairChecked(unsigned int) [CharType = char16_t]
void JSC::Yarr::Interpreter<char16_t>::InputStream::uncheckInput(unsigned int) [CharType = char16_t]
bool JSC::Yarr::Interpreter<char16_t>::matchCharacterClass(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = char16_t]
bool JSC::Yarr::Interpreter<char16_t>::matchBackReference(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = char16_t]
JSC::Yarr::JSRegExpResult JSC::Yarr::Interpreter<char16_t>::matchParentheses(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = char16_t]
static size_t JSC::Yarr::Interpreter<char16_t>::ParenthesesDisjunctionContext::allocationSize(unsigned int) [CharType = char16_t]
static void JSC::Yarr::Interpreter<char16_t>::popParenthesesDisjunctionContext(JSC::Yarr::Interpreter::BackTrackInfoParentheses *) [CharType = char16_t]
JSC::Yarr::JSRegExpResult JSC::Yarr::Interpreter<char16_t>::backtrackParentheses(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = char16_t]
bool JSC::Yarr::Interpreter<char16_t>::backtrackParenthesesTerminalEnd(JSC::Yarr::ByteTerm &, JSC::Yarr::Interpreter::DisjunctionContext *) [CharType = char16_t]
Found characters fastpath lookahead 
 range:[
Found bitmap lookahead count:(
),range:[
void JSC::Yarr::YarrGenerator<>::generateTerm(size_t) [YarrJITRegs = JSC::Yarr::YarrJITDefaultRegisters]
void JSC::Yarr::YarrGenerator<>::backtrackTerm(size_t) [YarrJITRegs = JSC::Yarr::YarrJITDefaultRegisters]
void *JSC::LinkBuffer::getLinkerAddress(T) [tag = (WTF::PtrTag)47615, T = JSC::AssemblerLabel]
void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::compileInline(JSC::Yarr::YarrBoyerMoyerData &) [YarrJITRegs = JSC::Yarr::YarrJITRegisters]
void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::generateTerm(size_t) [YarrJITRegs = JSC::Yarr::YarrJITRegisters]
void JSC::Yarr::YarrGenerator<JSC::Yarr::YarrJITRegisters>::backtrackTerm(size_t) [YarrJITRegs = JSC::Yarr::YarrJITRegisters]
'%c'
0x%04x
<any character>
<newline>
<digits>
<whitespace>
<word>
<unicode word ignore case>
<non-digits>
<non-whitespace>
<non-word>
<unicode non-word ignore case>
ASCII
Unicode
minimum size: 
,fixed size
,once through
,starts with ^
,contains ^
,...
 greedy
 non-greedy
word boundary
character 
inputPosition %u 
,frame location 
character class 
back reference to subpattern #
forward reference
captured 
non-captured 
inverted 
subpattern
assertion
,copy
,terminal
alternative list,frame location 
.* enclosure,frame location 
alternative #
RegExp pattern for 
ignore case
    callframe size: 
 ranges:(
Common
Zyyy
Latin
Latn
Greek
Grek
Cyrillic
Cyrl
Armenian
Armn
Hebrew
Hebr
Arabic
Arab
Syriac
Syrc
Thaana
Thaa
Devanagari
Deva
Bengali
Beng
Gurmukhi
Guru
Gujarati
Gujr
Oriya
Orya
Tamil
Taml
Telugu
Telu
Kannada
Knda
Malayalam
Mlym
Sinhala
Sinh
Thai
Laoo
Tibetan
Tibt
Myanmar
Mymr
Georgian
Geor
Hangul
Hang
Ethiopic
Ethi
Cherokee
Cher
Canadian_Aboriginal
Cans
Ogham
Ogam
Runic
Runr
Khmer
Khmr
Mongolian
Mong
Hiragana
Hira
Katakana
Kana
Bopomofo
Bopo
Hani
Yiii
Old_Italic
Ital
Gothic
Goth
Deseret
Dsrt
Inherited
Zinh
Qaai
Tagalog
Tglg
Hanunoo
Hano
Buhid
Buhd
Tagbanwa
Tagb
Limbu
Limb
Tai_Le
Tale
Linear_B
Linb
Ugaritic
Ugar
Shavian
Shaw
Osmanya
Osma
Cypriot
Cprt
Braille
Brai
Buginese
Bugi
Coptic
Copt
Qaac
New_Tai_Lue
Talu
Glagolitic
Glag
Tifinagh
Tfng
Syloti_Nagri
Sylo
Old_Persian
Xpeo
Kharoshthi
Khar
Balinese
Bali
Cuneiform
Xsux
Phoenician
Phnx
Phags_Pa
Phag
Nkoo
Sundanese
Sund
Lepcha
Lepc
Ol_Chiki
Olck
Vaii
Saurashtra
Saur
Kayah_Li
Kali
Rejang
Rjng
Lycian
Lyci
Carian
Cari
Lydian
Lydi
Cham
Tai_Tham
Lana
Tai_Viet
Tavt
Avestan
Avst
Egyptian_Hieroglyphs
Egyp
Samaritan
Samr
Lisu
Bamum
Bamu
Javanese
Java
Meetei_Mayek
Mtei
Imperial_Aramaic
Armi
Old_South_Arabian
Sarb
Inscriptional_Parthian
Prti
Inscriptional_Pahlavi
Phli
Old_Turkic
Orkh
Kaithi
Kthi
Batak
Batk
Brahmi
Brah
Mandaic
Mand
Chakma
Cakm
Meroitic_Cursive
Merc
Meroitic_Hieroglyphs
Mero
Miao
Plrd
Sharada
Shrd
Sora_Sompeng
Sora
Takri
Takr
Caucasian_Albanian
Aghb
Bassa_Vah
Bass
Duployan
Dupl
Elbasan
Elba
Grantha
Gran
Pahawh_Hmong
Hmng
Khojki
Khoj
Linear_A
Lina
Mahajani
Mahj
Manichaean
Mani
Mende_Kikakui
Mend
Modi
Mroo
Old_North_Arabian
Narb
Nabataean
Nbat
Palmyrene
Palm
Pau_Cin_Hau
Pauc
Old_Permic
Perm
Psalter_Pahlavi
Phlp
Siddham
Sidd
Khudawadi
Sind
Tirhuta
Tirh
Warang_Citi
Wara
Ahom
Anatolian_Hieroglyphs
Hluw
Hatran
Hatr
Multani
Mult
Old_Hungarian
Hung
SignWriting
Sgnw
Adlam
Adlm
Bhaiksuki
Bhks
Marchen
Marc
Newa
Osage
Osge
Tangut
Tang
Masaram_Gondi
Gonm
Nushu
Nshu
Soyombo
Soyo
Zanabazar_Square
Zanb
Dogra
Dogr
Gunjala_Gondi
Gong
Makasar
Maka
Medefaidrin
Medf
Hanifi_Rohingya
Rohg
Sogdian
Sogd
Old_Sogdian
Sogo
Elymaic
Elym
Nandinagari
Nand
Nyiakeng_Puachue_Hmong
Hmnp
Wancho
Wcho
Chorasmian
Chrs
Dives_Akuru
Diak
Khitan_Small_Script
Kits
Yezidi
Yezi
Cypro_Minoan
Cpmn
Old_Uyghur
Ougr
Tangsa
Tnsa
Toto
Vithkuqi
Vith
Assigned
Unassigned
Letter
Cased_Letter
Control
cntrl
Separator
Space_Separator
Punctuation
punct
Other_Punctuation
Currency_Symbol
Open_Punctuation
Close_Punctuation
Math_Symbol
Dash_Punctuation
Decimal_Number
digit
Uppercase_Letter
Modifier_Symbol
Connector_Punctuation
Lowercase_Letter
Other_Symbol
Other_Letter
Initial_Punctuation
Format
Other_Number
Final_Punctuation
Titlecase_Letter
Modifier_Letter
Mark
Combining_Mark
Nonspacing_Mark
Enclosing_Mark
Spacing_Mark
Letter_Number
Line_Separator
Paragraph_Separator
Surrogate
Private_Use
Bidi_Mirrored
Bidi_M
Math
Alphabetic
Alpha
Lowercase
Lower
Uppercase
Upper
Cased
Case_Ignorable
Changes_When_Lowercased
Changes_When_Uppercased
Changes_When_Titlecased
Changes_When_Casefolded
CWCF
Changes_When_Casemapped
CWCM
ID_Start
ID_Continue
XID_Start
XIDS
XID_Continue
XIDC
Default_Ignorable_Code_Point
Grapheme_Extend
Gr_Ext
Grapheme_Base
Gr_Base
Changes_When_NFKC_Casefolded
CWKCF
White_Space
WSpace
space
Bidi_Control
Bidi_C
Join_Control
Join_C
Dash
Quotation_Mark
QMark
Terminal_Punctuation
Term
Hex_Digit
ASCII_Hex_Digit
AHex
Ideographic
Ideo
Diacritic
Extender
Noncharacter_Code_Point
NChar
IDS_Binary_Operator
IDSB
IDS_Trinary_Operator
IDST
Radical
Unified_Ideograph
UIdeo
Deprecated
Soft_Dotted
Logical_Order_Exception
Sentence_Terminal
STerm
Variation_Selector
Pattern_White_Space
Pat_WS
Pattern_Syntax
Pat_Syn
Regional_Indicator
Emoji
Emoji_Presentation
EPres
Emoji_Modifier
EMod
Emoji_Modifier_Base
EBase
Emoji_Component
EComp
Extended_Pictographic
ExtPict
UChar32 JSC::Yarr::getCanonicalPair(const JSC::Yarr::CanonicalizationRange *, UChar32)
^$\.*+?()[]{}|/
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/wasm/WasmAirIRGenerator.cpp
JSC::Wasm::AirIRGenerator::AirIRGenerator(const JSC::Wasm::ModuleInformation &, B3::Procedure &, JSC::Wasm::InternalFunction *, Vector<JSC::Wasm::UnlinkedWasmToWasmCall> &, JSC::Wasm::MemoryMode, unsigned int, JSC::Wasm::TierUpCount *, const JSC::Wasm::Signature &)
void JSC::Wasm::AirIRGenerator::finalizeEntrypoints()
JSC::Wasm::AirIRGenerator::PartialResult JSC::Wasm::AirIRGenerator::addLocal(JSC::Wasm::Type, uint32_t)
JSC::Wasm::AirIRGenerator::ExpressionType JSC::Wasm::AirIRGenerator::addConstant(JSC::B3::Air::BasicBlock *, JSC::Wasm::Type, uint64_t)
JSC::Wasm::AirIRGenerator::PartialResult JSC::Wasm::AirIRGenerator::addArguments(const JSC::Wasm::Signature &)
void JSC::Wasm::AirIRGenerator::sanitizeAtomicResult(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::B3::Air::Tmp, JSC::B3::Air::Tmp)
JSC::Wasm::AirIRGenerator::PartialResult JSC::Wasm::AirIRGenerator::atomicLoad(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType &, uint32_t)
JSC::Wasm::TypedTmp JSC::Wasm::AirIRGenerator::emitAtomicBinaryRMWOp(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType, uint32_t)
JSC::Wasm::AirIRGenerator::PartialResult JSC::Wasm::AirIRGenerator::atomicBinaryRMW(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType &, uint32_t)
JSC::Wasm::AirIRGenerator::PartialResult JSC::Wasm::AirIRGenerator::atomicCompareExchange(JSC::Wasm::ExtAtomicOpType, JSC::Wasm::Type, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType &, uint32_t)
JSC::Wasm::AirIRGenerator::PartialResult JSC::Wasm::AirIRGenerator::truncSaturated(JSC::Wasm::Ext1OpType, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType &, JSC::Wasm::Type, JSC::Wasm::Type)
Generated patchpoints
JSC::Wasm::AirIRGenerator::PartialResult JSC::Wasm::AirIRGenerator::addOp(JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType &)
JSC::Wasm::TypedTmp JSC::Wasm::AirIRGenerator::tmpForType(JSC::Wasm::Type)
static B3::Air::Opcode JSC::Wasm::AirIRGenerator::moveOpForValueType(JSC::Wasm::Type)
void JSC::Wasm::AirIRGenerator::emitStoreOp(JSC::Wasm::StoreOpType, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType, uint32_t)
void JSC::Wasm::AirIRGenerator::emitCCall(JSC::B3::Air::BasicBlock *, Func, JSC::Wasm::TypedTmp, Args...) [Func = long long (*)(JSC::Wasm::Instance *, unsigned int), Args = <JSC::Wasm::TypedTmp, JSC::Wasm::TypedTmp>]
void JSC::Wasm::AirIRGenerator::emitCCall(JSC::B3::Air::BasicBlock *, Func, JSC::Wasm::TypedTmp, Args...) [Func = long long (*)(JSC::Wasm::Instance *, unsigned int, int), Args = <JSC::Wasm::TypedTmp, JSC::Wasm::TypedTmp, JSC::Wasm::TypedTmp>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, const JSC::B3::Effects &, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, const JSC::B3::Effects &, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, const JSC::B3::Effects &, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
void JSC::Wasm::AirIRGenerator::emitCCall(JSC::B3::Air::BasicBlock *, Func, JSC::Wasm::TypedTmp, Args...) [Func = void (*)(JSC::Wasm::Instance *, unsigned int), Args = <JSC::Wasm::TypedTmp, JSC::Wasm::TypedTmp>]
JSC::B3::CCallValue::CCallValue(JSC::B3::Type, JSC::B3::Origin, const JSC::B3::Effects &, Arguments...) [Arguments = <JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *, JSC::B3::Value *>]
void JSC::Wasm::AirIRGenerator::emitPatchpoint(JSC::B3::Air::BasicBlock *, B3::PatchpointValue *, const Vector<ResultTmpType, 8> &, Vector<JSC::Wasm::ConstrainedTmp, inlineSize> &&) [ResultTmpType = JSC::B3::Air::Tmp, inlineSize = 0UL]
void JSC::Wasm::AirIRGenerator::emitCCall(JSC::B3::Air::BasicBlock *, Func, JSC::Wasm::TypedTmp, Args...) [Func = unsigned long (*)(JSC::Wasm::Instance *, unsigned int, unsigned int, unsigned int), Args = <JSC::Wasm::TypedTmp, JSC::Wasm::TypedTmp, JSC::Wasm::TypedTmp, JSC::Wasm::TypedTmp>]
void JSC::Wasm::AirIRGenerator::emitCCall(JSC::B3::Air::BasicBlock *, Func, JSC::Wasm::TypedTmp, Args...) [Func = void (*)(JSC::JSCell *, JSC::VM *), Args = <JSC::Wasm::TypedTmp, JSC::Wasm::TypedTmp>]
auto JSC::Wasm::AirIRGenerator::truncSaturated(JSC::Wasm::Ext1OpType, JSC::Wasm::AirIRGenerator::ExpressionType, JSC::Wasm::AirIRGenerator::ExpressionType &, JSC::Wasm::Type, JSC::Wasm::Type)::(anonymous class)::operator()(JSC::CCallHelpers &, const B3::StackmapGenerationParams &) const
void JSC::Wasm::AirIRGenerator::emitPatchpoint(JSC::B3::Air::BasicBlock *, B3::PatchpointValue *, const Vector<ResultTmpType, 8> &, Vector<JSC::Wasm::ConstrainedTmp, inlineSize> &&) [ResultTmpType = JSC::Wasm::TypedTmp, inlineSize = 2UL]
void JSC::Wasm::AirIRGenerator::emitPatchpoint(JSC::B3::Air::BasicBlock *, B3::PatchpointValue *, const Vector<ResultTmpType, 8> &, Vector<JSC::Wasm::ConstrainedTmp, inlineSize> &&) [ResultTmpType = JSC::Wasm::TypedTmp, inlineSize = 0UL]
void JSC::Wasm::AirIRGenerator::emitPatchpoint(JSC::B3::Air::BasicBlock *, B3::PatchpointValue *, const Vector<ResultTmpType, 8> &, Vector<JSC::Wasm::ConstrainedTmp, inlineSize> &&) [ResultTmpType = JSC::B3::Air::Tmp, inlineSize = 1UL]
void JSC::Wasm::AirIRGenerator::emitPatchpoint(JSC::B3::Air::BasicBlock *, B3::PatchpointValue *, const Vector<ResultTmpType, 8> &, Vector<JSC::Wasm::ConstrainedTmp, inlineSize> &&) [ResultTmpType = JSC::B3::Air::Tmp, inlineSize = 8UL]
void JSC::Wasm::AirIRGenerator::emitPatchpoint(JSC::B3::Air::BasicBlock *, B3::PatchpointValue *, const Vector<ResultTmpType, 8> &, Vector<JSC::Wasm::ConstrainedTmp, inlineSize> &&) [ResultTmpType = JSC::B3::Air::Tmp, inlineSize = 3UL]
void JSC::Wasm::AirIRGenerator::emitPatchpoint(JSC::B3::Air::BasicBlock *, B3::PatchpointValue *, const Vector<ResultTmpType, 8> &, Vector<JSC::Wasm::ConstrainedTmp, inlineSize> &&) [ResultTmpType = JSC::Wasm::TypedTmp, inlineSize = 8UL]
void JSC::Wasm::AirIRGenerator::emitPatchpoint(JSC::B3::Air::BasicBlock *, B3::PatchpointValue *, const Vector<ResultTmpType, 8> &, Vector<JSC::Wasm::ConstrainedTmp, inlineSize> &&) [ResultTmpType = JSC::B3::Air::Tmp, inlineSize = 2UL]
/Library/Caches/com.apple.xbs/Sources/JavaScriptCore_Sim/Source/JavaScriptCore/wasm/WasmFunctionParser.h
JSC::Wasm::Parser<void>::PartialResult JSC::Wasm::FunctionParser<JSC::Wasm::AirIRGenerator>::parseUnreachableExpression() [Context = JSC::Wasm::AirIRGenerator]
JSC::Wasm::Parser<void>::PartialResult JSC::Wasm::FunctionParser<JSC::Wasm::AirIRGenerator>::parseExpression() [Context = JSC::Wasm::AirIRGenerator]
%-3d %p %{public}s
%-3d %p
mach_port_deallocate error for port %d: %{private}s (%#x)
WebKit Threading Violation - initial use of WebKit from a secondary thread.
Process is above the memory kill threshold. Trying to shrink down.
New memory footprint: %zu MB
Shrank below memory kill threshold. Process gets to live.
Memory usage policy changed: %s -> %s
Current memory footprint: %zu MB
Memory pressure relief: %{public}s: (Unable to get dirty memory information for process)
Memory pressure relief: %{public}s: res = %zu/%zu/%ld, res+swap = %zu/%zu/%ld
Received memory pressure event %lu vm pressure %d
%{public}s
JSGlobalObject signpost
BEGIN SIGILL analysis
ERROR: Unable to analyze SIGILL. Timed out while waiting to iterate VMs.
ERROR: Timed out: not able to determine if pc %p is in valid JIT executable memory
pc %p is NOT in valid JIT executable memory
pc %p is in valid JIT executable memory
pc %p is NOT properly aligned
instruction bits at pc %p is: 0x%08x
ERROR: Timed out: not able to determine if pc %p is in a valid CodeBlock
The current thread does not own any VM JSLock
machine PC %p does not belong to any CodeBlock in the currently entered VM
pc %p belongs to CodeBlock %p of type %s
END SIGILL analysis
JITCode %p [%p-%p]:
[%p-%p]: %08x %08x %08x %08x %08x %08x %08x %08x
[%p-%p]: %08x %08x %08x %08x %08x %08x %08x
[%p-%p]: %08x %08x %08x %08x %08x %08x
[%p-%p]: %08x %08x %08x %08x %08x
[%p-%p]: %08x %08x %08x %08x
[%p-%p]: %08x %08x %08x
[%p-%p]: %08x %08x
[%p-%p]: %08x
Disassembly:
%20s: %s    <=========================
%20s: %s
x%d: %016llx x%d: %016llx x%d: %016llx x%d: %016llx
x%d: %016llx fp: %016llx lr: %016llx
sp: %016llx pc: %016llx cpsr: %08x
Th@7
A=<G=
\)>
-CH0C
(`C
WTFWebFileManagerDelegate
NSFileManagerDelegate
NSObject
JSContext
SubscriptSupport
Internal
JSManagedValue
JSScript
JSValue
StructSupport
JSVMWrapperCache
JSVirtualMachine
JSObjCClassInfo
JSWrapperMap
JSExport
name
reason
code
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
fileManager:shouldCopyItemAtPath:toPath:
fileManager:shouldCopyItemAtURL:toURL:
fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:
fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:
fileManager:shouldMoveItemAtPath:toPath:
fileManager:shouldMoveItemAtURL:toURL:
fileManager:shouldProceedAfterError:movingItemAtPath:toPath:
fileManager:shouldProceedAfterError:movingItemAtURL:toURL:
fileManager:shouldLinkItemAtPath:toPath:
fileManager:shouldLinkItemAtURL:toURL:
fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:
fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:
fileManager:shouldRemoveItemAtPath:
fileManager:shouldRemoveItemAtURL:
fileManager:shouldProceedAfterError:removingItemAtPath:
fileManager:shouldProceedAfterError:removingItemAtURL:
initWithFilePresenter:
fileURLWithPath:
coordinateReadingItemAtURL:options:error:byAccessor:
length
stringByAppendingString:
stringByAppendingPathComponent:
fileSystemRepresentation
defaultManager
stringWithFileSystemRepresentation:length:
attributesOfItemAtPath:error:
objectForKey:
isEqualToString:
dictionaryWithObjects:forKeys:count:
setAttributes:ofItemAtPath:error:
fileURLWithPath:isDirectory:
setResourceValue:forKey:error:
path
arrayWithObjects:count:
matchedLanguagesFromAvailableLanguages:forPreferredLanguages:
count
firstObject
minimizedLanguagesFromLanguages:
initWithCapacity:
addObject:
countByEnumeratingWithState:objects:count:
bytes
URLWithString:
data
appendBytes:length:
UTF8String
mutableCopy
dataUsingEncoding:
dataWithBytesNoCopy:length:
getCFRunLoop
initWithBytes:length:encoding:
initWithCharacters:length:
initWithBytesNoCopy:length:encoding:freeWhenDone:
initWithCharactersNoCopy:length:freeWhenDone:
objectAtIndexedSubscript:
initWithString:
_web_looksLikeIPAddress
mainBundle
bundleIdentifier
hasPrefix:
processInfo
processName
rangeOfString:options:
contextWithJSGlobalContextRef:
notifyException:
moduleLoaderDelegate
valueWithJSValueRef:inContext:
context:fetchModuleForIdentifier:withResolveHandler:andRejectHandler:
exception
JSValueRef
setException:
willEvaluateModule:
didEvaluateModule:
sourceURL
absoluteString
JSGlobalContextRef
initWithGlobalContextRef:
initWithVirtualMachine:
init
setExceptionHandler:
ensureWrapperMap
addContext:forGlobalContextRef:
dealloc
evaluateScript:withSourceURL:
valueFromNotifyException:
type
sourceCode
valueWithNewErrorFromMessage:inContext:
valueWithNewPromiseRejectedWithReason:inContext:
exceptionHandler
valueWithUndefinedInContext:
currentContext
setObject:atIndexedSubscript:
currentThis
currentCallee
currentArguments
evaluateScript:
evaluateJSScript:
dependencyIdentifiersForModuleJSScript:
_setITMLDebuggableType
globalObject
virtualMachine
setName:
_remoteInspectionEnabled
_setRemoteInspectionEnabled:
_includesNativeCallStackWhenReportingExceptions
_setIncludesNativeCallStackWhenReportingExceptions:
_debuggerRunLoop
_setDebuggerRunLoop:
setModuleLoaderDelegate:
.cxx_destruct
.cxx_construct
m_virtualMachine
m_context
m_exception
m_moduleLoaderDelegate
_exceptionHandler
T@"JSValue",R
T@"JSValue",&
T@?,C,V_exceptionHandler
T@"JSVirtualMachine",R
T@"NSString",C
objectForKeyedSubscript:
setObject:forKeyedSubscript:
virtualMachineWithContextGroupRef:
wrapperMap
jsWrapperForObject:inContext:
objcWrapperForJSValueRef:inContext:
contextForGlobalContextRef:
boolFromNotifyException:
beginCallbackWithData:calleeValue:thisValue:argumentCount:arguments:
endCallbackWithData:
wrapperForObjCObject:
wrapperForJSObject:
initWithValue:
context
addManagedReference:withOwner:
initWithKeyOptions:valueOptions:capacity:
value
copy
keyEnumerator
removeManagedReference:withOwner:
disconnectValue
managedValueWithValue:
managedValueWithValue:andOwner:
didAddOwner:
didRemoveOwner:
m_globalObject
m_lock
m_weakValue
m_owners
readCache
absoluteURL
stringWithFormat:
JSContextGroupRef
writeCache:
scriptOfType:withSource:andSourceURL:andBytecodeCache:inVirtualMachine:error:
scriptOfType:memoryMappedFromASCIIFile:withSourceURL:andBytecodeCache:inVirtualMachine:error:
cacheBytecodeWithError:
isUsingBytecodeCache
m_type
m_mappedSource
m_source
m_sourceURL
m_cachePath
m_cachedBytecode
source
cachedBytecode
jsSourceCode
toString
callWithArguments:
valueWithNewPromiseInContext:fromExecutor:
toObject
toDouble
invokeMethod:withArguments:
valueWithDouble:inContext:
valueForProperty:
setValue:forProperty:
objectAtIndex:
valueWithObject:inContext:
valueWithBool:inContext:
valueWithInt32:inContext:
valueWithUInt32:inContext:
valueWithNewObjectInContext:
valueWithNewArrayInContext:
valueWithNewRegularExpressionFromPattern:flags:inContext:
valueWithNullInContext:
valueWithNewSymbolFromDescription:inContext:
valueWithNewPromiseResolvedWithResult:inContext:
toObjectOfClass:
toBool
toInt32
toUInt32
toNumber
toDate
toArray
toDictionary
deleteProperty:
hasProperty:
defineProperty:descriptor:
valueAtIndex:
setValue:atIndex:
isUndefined
isNull
isBoolean
isNumber
isString
isObject
isSymbol
isArray
isDate
isEqualToObject:
isEqualWithTypeCoercionToObject:
isInstanceOf:
constructWithArguments:
m_value
_context
T@"JSContext",R,V_context
TB,R
unsignedIntegerValue
toPoint
toSize
numberWithDouble:
numberWithUnsignedInteger:
toRange
toRect
valueWithPoint:inContext:
valueWithRange:inContext:
valueWithRect:inContext:
valueWithSize:inContext:
dateWithTimeIntervalSince1970:
array
dictionary
selectorForStructToValue:
signatureWithObjCTypes:
invocationWithMethodSignature:
setSelector:
selectorForValueToStruct:
initWithValue:inContext:
addWrapper:forJSContextGroupRef:
wrapperForJSContextGroupRef:
initWithContextGroupRef:
setObject:forKey:
isOldExternalObject:
addExternalRememberedObject:
removeObjectForKey:
m_group
m_externalDataMutex
m_contextCache
m_externalObjectGraph
m_externalRememberedSet
externalDataMutex
externalObjectGraph
externalRememberedSet
shrinkFootprintWhenIdle
isWebThreadAware
setNumberOfDFGCompilerThreads:
setNumberOfFTLCompilerThreads:
setCrashOnVMCreation:
T^{OpaqueJSContextGroup=},R
removeAllObjects
errorWithDomain:code:userInfo:
null
boolValue
doubleValue
timeIntervalSince1970
isSubclassOfClass:
classInfoForClass:
prototypeInContext:
structureInContext:
allocateConstructorAndPrototypeInContext:
initForClass:
wrapperForObject:inContext:
constructorInContext:
m_class
m_block
m_classRef
m_prototype
m_constructor
m_structure
m_classMap
m_cachedJSWrappers
m_cachedObjCWrappers
setTarget:
invoke
stringWithUTF8String:
characterAtIndex:
uppercaseLetterCharacterSet
characterIsMember:
rangeOfString:
substringToIndex:
substringWithRange:
target
getReturnValue:
exceptionWithName:reason:userInfo:
setArgument:atIndex:
invokeWithTarget:
isMainThread
numberWithUnsignedInt:
subdataWithRange:
numberWithBool:
stringValue
unsignedIntValue
initWithData:encoding:
numberWithInt:
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B16@0:8
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
B40@0:8@16@24@32
B48@0:8@16@24@32@40
B32@0:8@16@24
B40@0:8@"NSFileManager"16@"NSString"24@"NSString"32
B40@0:8@"NSFileManager"16@"NSURL"24@"NSURL"32
B48@0:8@"NSFileManager"16@"NSError"24@"NSString"32@"NSString"40
B48@0:8@"NSFileManager"16@"NSError"24@"NSURL"32@"NSURL"40
B32@0:8@"NSFileManager"16@"NSString"24
B32@0:8@"NSFileManager"16@"NSURL"24
B40@0:8@"NSFileManager"16@"NSError"24@"NSString"32
B40@0:8@"NSFileManager"16@"NSError"24@"NSURL"32
^{OpaqueJSContext=}16@0:8
v16@0:8
@24@0:8@16
@32@0:8@16@24
v24@0:8@16
v20@0:8B16
^{__CFRunLoop=}16@0:8
v24@0:8^{__CFRunLoop=}16
@?16@0:8
v24@0:8@?16
{RetainPtr<JSVirtualMachine>="m_ptr"^v}
^{OpaqueJSContext=}
{Strong<JSC::JSObject, JSC::ShouldStrongDestructorGrabLock::No>="m_slot"^{JSValue}}
{WeakObjCPtr<id<JSModuleLoaderDelegate>>="m_weakReference"@}
v32@0:8@16@24
@24@0:8^{OpaqueJSContext=}16
v24@0:8^{OpaqueJSValue=}16
@24@0:8^{OpaqueJSValue=}16
B24@0:8^{OpaqueJSValue=}16
v56@0:8^v16^{OpaqueJSValue=}24^{OpaqueJSValue=}32Q40r^^{OpaqueJSValue}48
v24@0:8^v16
{Weak<JSC::JSGlobalObject>="m_impl"^{WeakImpl}}
{RefPtr<JSC::JSLock, WTF::RawPtrTraits<JSC::JSLock>, WTF::DefaultRefDerefTraits<JSC::JSLock>>="m_ptr"^{JSLock}}
{JSWeakValue="m_tag"i"m_value"(WeakValueUnion="primitive"{JSValue="u"(EncodedValueDescriptor="asInt64"q"ptr"^{JSCell}"asBits"{?="payload"i"tag"i})}"object"{Weak<JSC::JSObject>="m_impl"^{WeakImpl}}"string"{Weak<JSC::JSString>="m_impl"^{WeakImpl}})}
{RetainPtr<NSMapTable>="m_ptr"^v}
@64@0:8q16@24@32@40@48o^@56
B24@0:8^@16
q16@0:8
{WeakObjCPtr<JSVirtualMachine>="m_weakReference"@}
{MappedFileData="m_fileData"^v"m_fileSize"I}
{String="m_impl"{RefPtr<WTF::StringImpl, WTF::RawPtrTraits<WTF::StringImpl>, WTF::DefaultRefDerefTraits<WTF::StringImpl>>="m_ptr"^{StringImpl}}}
{RetainPtr<NSURL>="m_ptr"^v}
{RefPtr<JSC::CachedBytecode, WTF::RawPtrTraits<JSC::CachedBytecode>, WTF::DefaultRefDerefTraits<JSC::CachedBytecode>>="m_ptr"^{CachedBytecode}}
I16@0:8
r^v16@0:8
{RefPtr<JSC::CachedBytecode, WTF::RawPtrTraits<JSC::CachedBytecode>, WTF::DefaultRefDerefTraits<JSC::CachedBytecode>>=^{CachedBytecode}}16@0:8
{SourceCode={RefPtr<JSC::SourceProvider, WTF::RawPtrTraits<JSC::SourceProvider>, WTF::DefaultRefDerefTraits<JSC::SourceProvider>>=^{SourceProvider}}ii{OrdinalNumber=i}{OrdinalNumber=i}}16@0:8
^v16@0:8
B24@0:8^v16
@28@0:8B16@20
@32@0:8d16@24
@28@0:8i16@20
@28@0:8I16@20
@40@0:8@16@24@32
@32@0:8@16@?24
^{OpaqueJSValue=}16@0:8
@24@0:8#16
d16@0:8
i16@0:8
@24@0:8Q16
v32@0:8@16Q24
^{OpaqueJSValue=}
@"JSContext"
{CGPoint=dd}16@0:8
{_NSRange=QQ}16@0:8
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
{CGSize=dd}16@0:8
@40@0:8{CGPoint=dd}16@32
@40@0:8{_NSRange=QQ}16@32
@56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48
@40@0:8{CGSize=dd}16@32
@32@0:8^{OpaqueJSValue=}16@24
:24@0:8r*16
v32@0:8@16^{OpaqueJSContextGroup=}24
@24@0:8^{OpaqueJSContextGroup=}16
^{OpaqueJSContextGroup=}
{Lock="m_byte"{Atomic<unsigned char>="value"{atomic<unsigned char>="__a_"{__cxx_atomic_impl<unsigned char, std::__cxx_atomic_base_impl<unsigned char>>="__a_value"AC}}}}
v32@0:8@16^{OpaqueJSContext=}24
^{OpaqueJSContextGroup=}16@0:8
Q24@0:8Q16
{pair<JSC::JSObject *, JSC::JSObject *>=^{JSObject}^{JSObject}}24@0:8@16
^v32@0:8@16@24
^v24@0:8@16
{NakedPtr<OpaqueJSClass>="m_ptr"^{OpaqueJSClass}}
{Weak<JSC::JSObject>="m_impl"^{WeakImpl}}
{Weak<JSC::Structure>="m_impl"^{WeakImpl}}
{RetainPtr<NSMutableDictionary>="m_ptr"^v}
{unique_ptr<JSC::WeakGCMap<id, JSC::JSObject>, std::default_delete<JSC::WeakGCMap<id, JSC::JSObject>>>="__ptr_"{__compressed_pair<JSC::WeakGCMap<id, JSC::JSObject> *, std::default_delete<JSC::WeakGCMap<id, JSC::JSObject>>>="__value_"^v}}
)^_
,0+I
,/_`
,*0+
,2A_
,(ij
,8!y
,BxP
,$&;
,/C,
,cA1
,Oih
,,d|
,aA+
,X[3
,I6K
,7|p
,94?
,dg,
,V[n
