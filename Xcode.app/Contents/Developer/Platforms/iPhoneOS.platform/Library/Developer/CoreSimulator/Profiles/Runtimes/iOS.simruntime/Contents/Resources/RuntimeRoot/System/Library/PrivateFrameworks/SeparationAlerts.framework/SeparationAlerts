SAConnectionEventIdentifier
SAConnectionEventState
SAConnectionEventDate
EventType
SATimeEventDate
GeofenceEventRegion
GeofenceEventType
GeofenceEventDate
<unknown>
Inside
Outside
Entry
Exit
<invalid>
UUID
Device
WithYouStatus
ConnectionState
NotificationState
LatestAdvertisement
LastWithYouDate
RelatedDevices
Surfaced
FirstAdvertisement
CurrentScenarioTime
currentScenario
firstDetectedToNextScenarioTimeInterval
nextScenario
previousMonitoringState
scenarioChangeToFirstDetectedTimeInterval
com.apple.clx.alert.firstAdv
SADeviceIdentifier
SADeviceGroupIdentifier
SADevicePartIdentifier
SADeviceName
SADeviceModel
SADeviceSystemVersion
SADeviceVendorId
SADeviceProductId
SADeviceType
SADeviceNotifyEnabled
SADeviceDate
MonitoringSessionRecord
SASafeLocationIdentifier
SASafeLocationLatitude
SASafeLocationLongitude
SASafeLocationRadius
SASafeLocationReferenceFrame
SASafeLocationNameString
SASafeLocationDate
SASafeLocationUpdateEventSafeLocation
SASafeLocationUpdateEventType
SASafeLocationUpdateEventLast
SASafeLocationUpdateEventDate
kSASafeLocationsEventKeySafeLocations
kSASafeLocationsEventKeyDate
process == 'locationd'
subsystem == 'com.apple.TrackingAvoidance'
category == 'SeparationAlertsEvents'
processID == %d
category == 'SeparationAlerts'
Error writing replay result to file
ReplayStatus: %s
Log stream stopped
Log stream started
Stream error: %@
Replaying with
StartDate: %@
EndDate: %@
Writing output to: %@
STREAM START TIMEOUT
REPLAY TIMEOUT
STREAM STOP TIMEOUT
HEX DESERIALIZATION EXCEPTION: %@
ERROR DESERIALIZING EVENT: %@
Got activity events from log archive
Error in replaying logarchive: %@
Finished fetching events from log archive
replaying:%@
Could not replay event %@
v8@?0
com.apple.tracking-avoidance
Status
Events
com.apple.TrackingAvoidance
SeparationAlerts
SeparationAlertsEvents
Unknown
NonVehicular
Vehicular
NonVehicular - Static
NonVehicular - Pedestrian
NonVehicular - Cycling
unsafe_
SADeviceUpdateEventDevice
SADeviceUpdateEventType
SADeviceUpdateEventLast
SADeviceUpdateEventDate
kSADevicesWithSafeLocationsEventKeyDevices
kSADevicesWithSafeLocationsEventKeySafeLocationIDs
kSADevicesWithSafeLocationsEventKeyDate
SAMonitoringSessionIdentifier
SAMonitoringSessionState
SAMonitoringSessionGeofence
SAMonitoringSessionScenario
SAMonitoringSessionTrackedTravelingStartDate
SAMonitoringSessionTrackedTravelingStartLocation
iPhone
iPad
MacBook
unsafe_%@
TrackedInUnsafeLocation
TrackedTraveling
Untracked
Separated
SeparationVerification
EndMonitoring
com.apple.clx.separationalerts.scan
scanType
isPartOfLongScan
scanDuration
relevantOnlyScanDuration
foundExtraHELECount
extraHELEScanDuration
foundExtraNonHELECount
extraNonHELEScanDuration
longScanContext
WithYou
NotWithYou
WithYouToBeVerified
NotWithYouToBeVerified
UnsafeExit
EndOfTravel
TravelingGeofenceExit
StandbyExit
NewMonitoredDeviceAdded
AirplaneModeToggle
EarlyVehicularTrigger
RetryScan
WatchScenarioTransition
v16@?0@"NSSet"8
Watch
v24@?0@"RTLocationOfInterest"8@"NSError"16
v24@?0@"NSArray"8@"NSError"16
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
/var/root/Library/Caches/locationd/TrackingAvoidance/
separationalerts.bin
com.apple.tracking-avoidance.NSJSONSerializationNSString
Invalid dictionary for JSON serialization
Refer to NSJSONSerialization spec for valid dictionaries
NSJSONSerialization failed
inSafeLocation
inUnsafeLocation
Traveling
%@%@
DeviceRecord
com.apple.clx.alert.heartbeats
numAlerts
numAlertsLeftBehind
numAlertsTraveling
numEnabled
numItems
numAccessories
numBTLE
numDevices
numiPhone
numiPad
numMacBook
numSafe
numSafeInUse
isAllUsingSameSafe
numBTRequests
numBTLeftBehindRequests
numBTTravelingRequests
numGpsRequests
numWifiRequests
numTimers
numDevicesAtSafeExit
numUnsafe
numUnsafeWithLOI
numUnsafeWithoutLOI
aggActiveDuration
aggInSafeDuration
aggInUnsafeDuration
aggInTravelDuration
totalScanDuration
totalScanDurationForFindingRelevantItemsOnly
%@ instance failed to create description:%@
{"msg%{public}.0s":"#SATravelTypeClassifier handleVehicleState", "curr":"%{private}s", "new":"%{private}s", "hints":"%{private}s"}
{"msg%{public}.0s":"#SATravelTypeClassifier handleUserActivity", "curr":"%{private}s", "new":"%{private}s"}
{"msg%{public}.0s":"#SATravelTypeClassifier notifyTravelTypeChange", "from":"%{private}s", "to":"%{private}s"}
{"msg%{public}.0s":"#sa #fencemgr, Could not find region for safe location"}
{"msg%{public}.0s":"#sa #fencemgr, Safe location already used for this device"}
{"msg%{public}.0s":"#sa #fencemgr, Safe location state should have been set to unknown at least"}
{"msg%{public}.0s":"#sa #fencemgr, Can't remove a non-existent safe location"}
{"msg%{public}.0s":"#sa #fencemgr, Unsafe location already used for this device"}
{"msg%{public}.0s":"#sa #fencemgr, Unsafe location state should have been set to unknown at least"}
{"msg%{public}.0s":"#sa #fencemgr, Can't remove a non-existent unsafe location"}
{"msg%{public}.0s":"#sa #fencemgr handleFenceEvent for unsafe location not in dictionary", "deviceUUID":"%{private}@"}
{"msg%{public}.0s":"#sa #fencemgr, region monitoring error", "regionUUID":"%{private}@"}
{"msg%{public}.0s":"#sa #fencemgr, notify state for safe", "regionUUID":"%{private}s", "Clients":%{private}ld, "Found":"%{private}s"}
{"msg%{public}.0s":"#sa #fencemgr, notify state for unsafe", "regionUUID":"%{private}s", "Clients":%{private}ld}
{"msg%{public}.0s":"#SAMonitoringSessionManager request to start scanning"}
{"msg%{public}.0s":"#SAMonitoringSessionManager request to stop scanning"}
{"msg%{public}.0s":"#SAMonitoringSessionManager bootstraped from persisted data", "uuid":"%{private}@", "state":"%{private}@", "scenario":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager enabling sa"}
{"msg%{public}.0s":"#SAMonitoringSessionManager disabling sa"}
{"msg%{public}.0s":"#SAMonitoringSessionManager createMonitoringDevice nil UUID"}
{"msg%{public}.0s":"#SAMonitoringSessionManager createMonitoringDevice while not enabled"}
{"msg%{public}.0s":"#SAMonitoringSessionManager createMonitoringDevice monitoring session already exists", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager createMonitoringDevice", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager cancelMonitoringDevice nil UUID"}
{"msg%{public}.0s":"#SAMonitoringSessionManager cancelMonitoringDevice monitoring session does not exist", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager canceled monitoring session", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager attemptToPopulateTrackedTravelingStartLocationForDevice not in one of the traveling states", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager attemptToPopulateTrackedTravelingStartLocationForDevice already set", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager attemptToPopulateTrackedTravelingStartLocationForDevice lastLocation is not recent enough, adding to set to be populated", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager changeMonitoringSessionState UUID doesn't map to monitoring session", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager changeMonitoringSessionState no state change necessary", "uuid":"%{private}@", "fromState":"%{private}@", "toState":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager changeMonitoringSessionState", "uuid":"%{private}@", "fromState":"%{private}@", "toState":"%{private}@"}
{"msg%{public}.0s":"#sa Service tried to notify with no corresponding device", "uuid":"%{private}@"}
{"msg%{public}.0s":"#sa notify separation", "uuid":"%{private}@", "name":"%{private}@", "type":%{private}ld}
{"msg%{public}.0s":"#SAMonitoringSessionManager travel exit while in standby"}
{"msg%{public}.0s":"#SAMonitoringSessionManager is only monitoring disconnected companion device, skipping force update all WithYouStatus"}
{"msg%{public}.0s":"#SAMonitoringSessionManager unable to set while traveling fence due to no last location", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager unable to set while traveling fence due to no session", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager unable to remove while traveling fence due to no session", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager standby notify"}
{"msg%{public}.0s":"#SAMonitoringSessionManager unable to notify while traveling due to no session", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager notifyWhileTraveling with nil location"}
{"msg%{public}.0s":"#SAMonitoringSessionManager unable to notify when left behind due to no session", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager notifyWhenLeftBehind without suggesting location"}
{"msg%{public}.0s":"#SAMonitoringSessionManager standby notify early"}
{"msg%{public}.0s":"#SAMonitoringSessionManager unable to notify early left behind due to no session", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager unable to create/recommend location", "uuid":"%{private}@", "context":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager new device", "uuid":"%{private}@", "name":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager remove device", "uuid":"%{private}@", "name":"%{private}@"}
#SAMonitoringSessionManager found removed location, for deviceId, %{private}@
#SAMonitoringSessionManager attempted adding non-existing location, for deviceId, %{private}@
{"msg%{public}.0s":"#SAMonitoringSessionManager update safe locations", "device":"%{private}@", "count":%{private}ld}
{"msg%{public}.0s":"#SAMonitoringSessionManager start location error", "location":"%{private}@", "device":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager start location device error", "device":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager start location", "location":"%{private}@", "device":"%{private}@", "refFrame":%{private}lu}
{"msg%{public}.0s":"#SAMonitoringSessionManager stop location error", "location":"%{private}@", "device":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager stop location device error", "device":"%{private}@"}
#SAMonitoringSessionManager stop location %{private}@ for device %{private}@
#SAMonitoringSessionManager found unpaired device, clearing deviceId, %{private}@
#SAMonitoringSessionManager found unpaired device in monitoring session record, clearing deviceId, %{private}@
{"msg%{public}.0s":"#SAMonitoringSessionManager no tracked traveling start date"}
{"msg%{public}.0s":"#SAMonitoringSessionManager shouldIssueBookendedNotificationBasedOnTimeForDevice", "min travel satisified":%{private}hhd, "min duration after persistence":%{private}hhd}
{"msg%{public}.0s":"#SAMonitoringSessionManager shouldIssueBookendedNotificationForDevice", "based on location":%{private}hhd, "based on time":%{private}hhd}
{"msg%{public}.0s":"#SAMonitoringSessionManager update devices", "count":%{private}ld}
{"msg%{public}.0s":"#SAMonitoringSessionManager update safe locations", "count":%{private}ld}
{"msg%{public}.0s":"#SAMonitoringSessionManager updateLocation update criteria not satisfied", "lastLocation":"%{private}@", "newLocation":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager updateLocation updated", "lastLocation":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager updateLocation populating tracked traveling start location", "device count":%{private}lu}
{"msg%{public}.0s":"#SAMonitoringSessionManager updateLocation populating tracked traveling start location", "device":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager handleGeofenceEvent invalid geofenceEvent", "geofence":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager handleGeofenceEvent received geofenceEvent", "geofence":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager handleGeofenceEvent geofenceEvent cannot be mapped to monitoring session", "geofence":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager handleGeofenceEvent ignored (recent crash?)", "geofence":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager removeDisableReason", "reason":%{private}lu}
{"msg%{public}.0s":"#SAMonitoringSessionManager addDisableReason", "reason":%{private}lu}
{"msg%{public}.0s":"#SAMonitoringSessionManager requesting terminable long aggressive scan on Airplane Mode toggle", "count of devices to find":%{private}ld}
{"msg%{public}.0s":"#SAMonitoringSessionManager didChangeScenarioClass", "sessionState":"%{private}@", "fromScenario":"%{private}@", "toScenario":"%{private}@", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager not requesting aggressive scan, entering safe location for device", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager requesting short aggressive scan, exiting safe location for device", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager requesting a terminable long aggressive scan to find tracked device when exiting unsafe location", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager requesting short aggressive scan, exiting unsafe location and device is not tracked", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager requesting a terminable long aggressive scan to find tracked device when ending traveling scenario", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager requesting short aggressive scan, ending traveling scenario and device is not tracked", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager removing currentVisitOrLOIEvent due to scenario change", "currentVisitOrLOIEvent":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager got unknown with-you status", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager got to be verified with-you status at the end of a force update", "uuid":"%{private}@", "status":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager updatedWithYouStatus", "sessionState":"%{private}@", "fromStatus":"%{private}@", "toStatus":"%{private}@", "scenario":"%{private}@", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager Unknown signal state", "sessionState":"%{private}@", "fromStatus":"%{private}@", "toStatus":"%{private}@", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager session already finished", "sessionState":"%{private}@", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager travel bookending into a safe location", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager issuing travel bookending notification into an unsafe location", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager not issuing travel bookending notification into an unsafe location", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager received unexpected status in verification stage", "uuid":"%{private}@", "status":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager received unexpected status in left location stage", "uuid":"%{private}@", "status":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager lost from unsafe to safe", "uuid":"%{private}@"}
{"msg%{public}.0s":"SAMonitoringSessionManager alarm fired while not standby, requesting a terminable long aggressive scan", "devices pending transition count":%{private}ld}
{"msg%{public}.0s":"SAMonitoringSessionManager alarm fired while standby, requesting short aggressive scan"}
{"msg%{public}.0s":"SAMonitoringSessionManager device found in monitoringSession list, but not in devices list"}
{"msg%{public}.0s":"#SAMonitoringSessionManager requesting terminable long aggressive scan on travel type change", "count of devices to find":%{private}ld}
{"msg%{public}.0s":"#sa #withyou at least one device not found yet", "uuid":"%{private}@"}
{"msg%{public}.0s":"#sa #withyou all devices found"}
{"msg%{public}.0s":"#sa #withyou at least one sa enabled device not found yet", "uuid":"%{private}@"}
{"msg%{public}.0s":"#sa #withyou all sa enabled devices found"}
{"msg%{public}.0s":"#sa #withyou skip requesting scan - leash-only"}
{"msg%{public}.0s":"#sa #withyou requesting scan to force update withyou status"}
{"msg%{public}.0s":"#sa #withyou force update to find devices", "device list":"%{private}@", "context":"%{private}s"}
{"msg%{public}.0s":"#sa #withyou devices to find", "devices to find":"%{private}@", "devices found":"%{private}@"}
{"msg%{public}.0s":"#sa #withyou some remaining devices to find, requesting long aggressive scan if not already ongoing"}
{"msg%{public}.0s":"#sa #withyou no more devices to find, recording time of last device found for metrics"}
{"msg%{public}.0s":"#sa #withyou some remaining sa enabled devices to find, requesting long aggressive scan if not already ongoing"}
{"msg%{public}.0s":"#sa #withyou no more sa enabled devices to find while long scan is ongoing, requesting to stop long aggressive scan"}
{"msg%{public}.0s":"#sa #withyou skip requesting short scan - leash-only"}
{"msg%{public}.0s":"#sa #withyou requesting short scan to force update withyou status"}
{"msg%{public}.0s":"#sa #withyou status updated connection state changed", "uuid":"%{private}@", "oldStatus":"%{private}@", "newStatus":"%{private}@"}
{"msg%{public}.0s":"#sa #withyou found new device", "uuid":"%{private}@"}
{"msg%{public}.0s":"#sa #withyou no more devices to find while long scan is ongoing, recording time of last device found for metrics"}
{"msg%{public}.0s":"#sa #withyou status updated observed advertisement", "uuid":"%{private}@", "oldStatus":"%{private}@", "newStatus":"%{private}@"}
{"msg%{public}.0s":"#sa #withyou detected a device with more than maximum allowable related beacons", "uuid":"%{private}@", "count":%{private}ld}
{"msg%{public}.0s":"#sa #withyou status updated observed advertisement from related device", "uuid":"%{private}@", "oldStatus":"%{private}@", "newStatus":"%{private}@"}
{"msg%{public}.0s":"#sa #withyou trying to get status bit of related device at out of bound index"}
{"msg%{public}.0s":"#sa #withyou status updated end of scan", "uuid":"%{private}@", "oldStatus":"%{private}@", "newStatus":"%{private}@"}
{"msg%{public}.0s":"#sa #withyou status updated on adv buffer empty event", "uuid":"%{private}@", "oldStatus":"%{private}@", "newStatus":"%{private}@"}
{"msg%{public}.0s":"#sa #withyou travel type change", "from":"%{private}@", "to":"%{private}@"}
#sa ServiceMgr received unknown device type, %{private}@
{"msg%{public}.0s":"#sa ServiceMgr FetchSafe", "uuid":"%{private}@", "name":"%{private}@", "lat":"%{private}f", "lon":"%{private}f", "radius":"%{public}f", "refFrame":%{private}lu}
#sa ServiceMgr endFetchSafe, %{public}d
{"msg%{public}.0s":"#sa ServiceMgr FetchSafeForBeacon", "device":"%{private}@", "uuid":"%{private}@", "name":"%{private}@", "lat":"%{private}f", "lon":"%{private}f", "radius":"%{public}f", "refFrame":%{private}lu}
{"msg%{public}.0s":"#sa ServiceMgr FetchAll", "name":"%{private}@", "device":"%{private}@", "type":"%{private}@", "safes":"%{private}@"}
#sa ServiceMgr endFetchBeaconsSafe, %{public}d
#sa ServiceMgr endFetchAll %{public}d, types, %{public}d
{"msg%{public}.0s":"#manager:visit not ingesting TAEvent as SA service is down"}
{"msg%{public}.0s":"#manager:visit no last visit to bootstrap onto"}
{"msg%{public}.0s":"#manager:visit got last visit", "visits":"%{private}@"}
{"msg%{public}.0s":"#sa #loi error fetching LOI", "visit":"%{private}@", "error":"%{public}@"}
{"msg%{public}.0s":"#sa #loi received nil in return when fetching LOI", "visit":"%{private}@", "loiIdentifier":"%{private}@"}
{"msg%{public}.0s":"#sa #loi received LOI", "loi":"%{private}@", "loiIdentifier":"%{private}@"}
#sa ServiceMgr enableMonitoringForSeparations: %{public}d
#sa ServiceMgr notifyAboutDevices:%{private}ld
#sa ServiceMgr requestBluetoothScan:%{private}#lx
#sa ServiceMgr requestLocationForType:%{private}#lx
#sa ServiceMgr addGeofence
#sa ServiceMgr removeGeofence
#sa ServiceMgr scheduleSATimeEvent:%{public}#lf
{"msg%{public}.0s":"#sa ServiceMgr cancelSATimeEventForAlarm", "uuid":"%{public}@"}
{"msg%{public}.0s":"#sa ServiceMgr startBackgroundScanning"}
{"msg%{public}.0s":"#sa ServiceMgr stopBackgroundScanning"}
{"msg%{public}.0s":"#sa ServiceMgr stopLongAggressiveScan"}
{"msg%{public}.0s":"#sa ServiceMgr fetchLastVisit"}
{"msg%{public}.0s":"#SATime alarm fired", "uuid":"%{private}@", "alarmDate":"%{private}@", "client":"%{private}@"}
{"msg%{public}.0s":"#SATime received event with future date", "Event":"%{private}@"}
{"msg%{public}.0s":"#SAPersistenceManager encountered error in creating directory", "error":"%{private}s"}
{"msg%{public}.0s":"#SAPersistenceManager file does not exist"}
{"msg%{public}.0s":"#SAPersistenceManager encountered error in loading file", "url":"%{private}s", "error":"%{private}s"}
{"msg%{public}.0s":"#SAPersistenceManager encountered error in unarchiving store", "url":"%{private}s", "error":"%{private}s"}
{"msg%{public}.0s":"#SAPersistenceManager no store to save"}
{"msg%{public}.0s":"#SAPersistenceManager saving to location", "path":"%{private}s"}
{"msg%{public}.0s":"#SAPersistenceManager error archiving store", "error":"%{private}s"}
{"msg%{public}.0s":"#SAPersistenceManager error reseting directory", "error":"%{private}s"}
{"msg%{public}.0s":"#SAScenarioClassifier notifyScenarioChange", "device":"%{private}@", "from":"%{private}s", "to":"%{private}s"}
{"msg%{public}.0s":"#SAScenarioClassifier setting current unsafe location from nil", "device":"%{private}@"}
{"msg%{public}.0s":"#SAScenarioClassifier forUnsafeLocation location", "device":"%{private}@"}
{"msg%{public}.0s":"#SAScenarioClassifier didDetermineState unsafe", "device":"%{private}@", "state":%{private}ld}
{"msg%{public}.0s":"#SAScenarioClassifier forUnsafeLocation unexpected", "device":"%{private}@"}
{"msg%{public}.0s":"#SAScenarioClassifier forUnsafeLocation in safe", "device":"%{private}@"}
{"msg%{public}.0s":"#SAScenarioClassifier forUnsafeLocation not supported", "device":"%{private}@"}
{"msg%{public}.0s":"#SAScenarioClassifier didDetermineState safe", "device":"%{private}@", "state":%{private}ld}
{"msg%{public}.0s":"#warning #SAScenarioClassifier forSafeLocation in unsafe", "device":"%{private}@"}
{"msg%{public}.0s":"#SAScenarioClassifier forSafeLocation not supported", "device":"%{private}@"}
{"msg%{public}.0s":"#warning #SAScenarioClassifier visit while in safe", "device":"%{private}@"}
{"msg%{public}.0s":"#warning #SAScenarioClassifier visit while in unsafe", "device":"%{private}@"}
{"msg%{public}.0s":"#warning #SAScenarioClassifier LOI while in safe", "device":"%{private}@"}
{"msg%{public}.0s":"#warning #SAScenarioClassifier LOI while in unsafe", "device":"%{private}@"}
{"msg%{public}.0s":"#SAScenarioClassifier addUnsafeLocation replacing already existing unsafe", "device":"%{private}@", "old":"%{private}@", "new":"%{private}@"}
{"msg%{public}.0s":"#SAScenarioClassifier addSafeLocation replacing", "device":"%{private}@", "location":"%{private}@"}
{"msg%{public}.0s":"#SAScenarioClassifier removeSafeLocation not in set", "device":"%{private}@", "location":"%{private}@"}
{"msg%{public}.0s":"Archiver error", "Error":"%{private}@", "String":"%{private}@"}
unarchive error: %@
{"msg%{public}.0s":"#sa related devices update for device", "uuid":"%{private}@", "groupID":"%{private}@", "related devices":"%{private}@"}
#sa Service enableMonitoringForSeparations: %{public}d
#sa Service notifyAboutDevices:%{private}lu
#sa Service requestBluetoothScan:%{private}#lx
#sa Service requestLocationForType:%{private}#lx
#sa Service addGeofence
#sa Service removeGeofence
#sa Service scheduleSATimeEvent:%{public}#lf
{"msg%{public}.0s":"#sa Service cancelSATimeEventForAlarm", "uuid":"%{public}@"}
{"msg%{public}.0s":"#sa Service startBackgroundScanning"}
{"msg%{public}.0s":"#sa Service stopBackgroundScanning"}
{"msg%{public}.0s":"#sa Service stopLongAggressiveScan"}
{"msg%{public}.0s":"#sa Service fetchLastVisit"}
{"msg%{public}.0s":"Ingesting event", "Event":"%{private}@"}
SAConnectionEvent
OSLogCoding
TAEventProtocol
NSObject
NSSecureCoding
NSCoding
NSCopying
SATimeEvent
SAGeofenceEvent
SASingleDeviceRecord
SADevice
SAPersistenceStore
SASafeLocation
SASafeLocationUpdateEvent
SASafeLocationsEvent
SAReplay
OSLogPersistenceDelegate
OSActivityStreamDelegate
OSDeviceDelegate
SATravelTypeClassifier
SATravelTypeClassifierServiceProtocol
SAFenceManager
SAFenceManagerServiceProtocol
SAFenceManagerRequestProtocol
SADeviceUpdateEvent
SADevicesWithSafeLocationsEvent
SAPowerLog
SAPowerLogServiceProtocol
SAMonitoringSession
SAMonitoringSessionManager
SAMonitoringSessionManagerServiceProtocol
SAScenarioClassifierClientProtocol
SAWithYouDetectorClientProtocol
SATimeClientProtocol
SATravelTypeClassifierClientProtocol
SAWithYouDetector
SAWithYouDetectorServiceProtocol
TADateFormat
SAServiceManager
SAServiceServiceProtocol
SAServiceClientProtocol
SAAlarmTask
SATime
SATimeServiceProtocol
SAPersistenceManagerSettings
SAPersistenceManager
NSString
SAScenarioClassifier
SAScenarioClassifierServiceProtocol
SAFenceManagerClientProtocol
SALoggingUtilities
SADeviceRecord
SAService
SAMonitoringSessionManagerClientProtocol
SABluetoothScanRequestProtocol
SALocationRequestProtocol
SAPowerLogClientProtocol
SAGeoFenceRequestProtocol
SATimeEventRequestProtocol
SAAnalyticsSettings
SAAnalytics
SAAnalyticsServiceProtocol
decodeObjectOfClass:forKey:
decodeIntegerForKey:
initWithDeviceUUID:state:date:
identifier
encodeObject:forKey:
state
encodeInteger:forKey:
date
archivedDataWithRootObject:requiringSecureCoding:error:
bytes
length
appendBytes:length:
allocWithZone:
init
copy
isEqual:
description
numberWithInteger:
getDateString
dictionaryWithObjects:forKeys:count:
descriptionDictionary
JSONStringFromNSDictionary:error:
string
supportsSecureCoding
encodeWithOSLogCoder:options:maxLength:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
encodeWithCoder:
initWithCoder:
TB,R
copyWithZone:
getDate
getEventSubtype
.cxx_destruct
_identifier
_state
_date
T@"NSUUID",R,C,N,V_identifier
Tq,R,N,V_state
T@"NSDate",R,C,N,V_date
initWithDate:
decodeObjectForKey:
initWithRegion:eventType:eventDate:
region
eventType
eventDate
_eventType
_region
_eventDate
T@"CLRegion",R,C,N,V_region
TQ,R,N,V_eventType
T@"NSDate",R,C,N,V_eventDate
getCurrentTime
updateFirstAdvertisementAfterScenarioTransition:
getType
scanDate
compare:
timeIntervalSinceDate:
publishAnalyticsForFirstAdv:scenario:
currentScenarioClass
numberWithUnsignedInteger:
numberWithDouble:
monitoringSessionStateAtTimeOfFirstAdv
analytics
submitEvent:content:
removeAllObjects
addObject:
connectionState
decodeBoolForKey:
encodeBool:forKey:
initWithDevice:clock:analytics:
initWithConnectionEvent:clock:analytics:
updateLatestAdvertisement:
updateLastWithYouDate:
updateWithYouStatus:
updateCurrentScenarioClass:
resetRelatedDevices
insertRelatedDevice:
isConnected
uuid
device
setDevice:
withYouStatus
setWithYouStatus:
setConnectionState:
notificationState
setNotificationState:
latestAdvertisement
latestNOAdvertisement
latestWildAdvertisement
lastWithYouDate
currentMonitoringSessionState
setCurrentMonitoringSessionState:
uuidsOfRelatedDevices
setUuidsOfRelatedDevices:
hasSurfacedNotification
setHasSurfacedNotification:
firstAdvertisementAfterScenarioTransition
currentScenarioTime
setAnalytics:
clock
setClock:
_hasSurfacedNotification
_uuid
_device
_withYouStatus
_connectionState
_notificationState
_latestAdvertisement
_latestNOAdvertisement
_latestWildAdvertisement
_lastWithYouDate
_currentScenarioClass
_currentMonitoringSessionState
_monitoringSessionStateAtTimeOfFirstAdv
_uuidsOfRelatedDevices
_firstAdvertisementAfterScenarioTransition
_currentScenarioTime
_analytics
_clock
T@"NSUUID",R,N,V_uuid
T@"SADevice",&,N,V_device
TQ,N,V_withYouStatus
Tq,N,V_connectionState
TQ,N,V_notificationState
T@"TASPAdvertisement",R,N,V_latestAdvertisement
T@"TASPAdvertisement",R,N,V_latestNOAdvertisement
T@"TASPAdvertisement",R,N,V_latestWildAdvertisement
T@"NSDate",R,N,V_lastWithYouDate
TQ,R,N,V_currentScenarioClass
TQ,N,V_currentMonitoringSessionState
TQ,R,N,V_monitoringSessionStateAtTimeOfFirstAdv
T@"NSMutableArray",&,N,V_uuidsOfRelatedDevices
TB,N,V_hasSurfacedNotification
T@"NSDate",R,N,V_firstAdvertisementAfterScenarioTransition
T@"NSDate",R,N,V_currentScenarioTime
T@"<SAAnalyticsServiceProtocol>",&,N,V_analytics
T@"<SATimeServiceProtocol>",&,N,V_clock
initWithDeviceUUID:groupIdentifier:partIdentifier:name:model:systemVersion:vendorId:productId:deviceType:notifyEnabled:date:
groupIdentifier
partIdentifier
name
model
systemVersion
vendorId
productId
deviceType
notifyEnabled
initWithDeviceUUID:groupIdentifier:name:model:systemVersion:vendorId:productId:deviceType:notifyEnabled:date:
isEqualToString:
numberWithBool:
initWithDeviceUUID:name:model:systemVersion:vendorId:productId:deviceType:notifyEnabled:date:
isReallyEqual:
_notifyEnabled
_groupIdentifier
_partIdentifier
_name
_model
_systemVersion
_vendorId
_productId
_deviceType
T@"NSUUID",R,C,N,V_groupIdentifier
Tq,R,N,V_partIdentifier
T@"NSString",R,C,N,V_name
T@"NSString",R,C,N,V_model
T@"NSString",R,C,N,V_systemVersion
Tq,R,N,V_vendorId
Tq,R,N,V_productId
TQ,R,N,V_deviceType
TB,R,N,V_notifyEnabled
monitoringSessionRecord
setWithObjects:
decodeObjectOfClasses:forKey:
setMonitoringSessionRecord:
_monitoringSessionRecord
T@"NSMutableDictionary",&,N,V_monitoringSessionRecord
decodeDoubleForKey:
initWithLocationUUID:latitude:longitude:radius:referenceFrame:name:date:
latitude
encodeDouble:forKey:
longitude
radius
referenceFrame
_latitude
_longitude
_radius
_referenceFrame
Td,R,N,V_latitude
Td,R,N,V_longitude
Td,R,N,V_radius
TQ,R,N,V_referenceFrame
initWithSafeLocation:eventType:lastEvent:date:
safeLocation
lastEvent
_lastEvent
_safeLocation
T@"SASafeLocation",R,C,N,V_safeLocation
TB,R,N,V_lastEvent
arrayWithObjects:count:
setWithArray:
initWithSafeLocations:date:
safeLocations
_safeLocations
T@"NSDictionary",R,C,N,V_safeLocations
initWithEnableSubmission:
initWithSettings:
initWithAnalytics:isReplay:
setLogArchive:
setOptions:
setDelegate:
predicateWithFormat:
andPredicateWithSubpredicates:
setPredicate:
setDeviceDelegate:
processInfo
processIdentifier
fileHandleForWritingToURL:error:
seekToEndOfFile
countByEnumeratingWithState:objects:count:
eventMessage
stringByAppendingString:
dataUsingEncoding:
writeData:
closeFile
UTF8String
currentLocale
descriptionWithLocale:
absoluteString
start
fetchFromStartDate:toEndDate:
sleepForTimeInterval:
stop
stringByReplacingOccurrencesOfString:withString:
dataWithHexString:
unarchivedObjectOfClasses:fromData:error:
ingestTAEvent:
extractUniqueIdentifierFromMessage:
objectForKey:
initWithObjects:
setObject:forKey:
extractEventFromMessages:
persistence:results:error:
persistenceDidFinishReadingForStartDate:endDate:
activityStream:results:
streamDidStart:
streamDidFail:error:
streamDidStop:
activityStream:results:error:
activityStream:deviceUDID:deviceID:status:error:
initWithLogArchive:outputPath:inputPersistencePath:
replayWithStartDate:endDate:
replaySingleEventLogString:
eventMessages
setEventMessages:
eventOrder
setEventOrder:
_service
_persistence
_stream
_persistenceWait
_streamWait
_outputPath
_inputPersistencePath
_eventMessages
_eventOrder
T@"NSMutableDictionary",&,N,V_eventMessages
T@"NSMutableArray",&,N,V_eventOrder
currentTravelType
setCurrentTravelType:
setCurrentTravelTypeChangeDate:
_notifyAllClientsOfTravelTypeChangeFrom:to:hints:
vehicularState
vehicularHints
convertSATravelTypeToString:
_vehicularHintsToString:
_setNewTravelType:hints:
activityType
clients
didChangeTravelTypeFrom:to:hints:
removeObject:
_handleVehicleStateEvent:
_handleUserActivityEvent:
addClient:
removeClient:
initWithClock:
travelType
setClients:
currentTravelTypeChangeDate
_clients
_currentTravelType
_currentTravelTypeChangeDate
T@"NSHashTable",&,N,V_clients
TQ,N,V_currentTravelType
T@"NSDate",C,N,V_currentTravelTypeChangeDate
TQ,R,N
hashTableWithOptions:
deviceUUIDsBySafeLocation
count
deviceUUIDsByUnsafeRegionIdentifier
safeLocationsByRegionIdentifier
regionsByRegionIdentifier
containsObject:
getRegionForSafeLocation:
statesByRegionIdentifier
didDetermineState:forSafeLocation:forDevice:
unsignedIntegerValue
UUIDString
initForLowPowerWithCenter:radius:identifier:
setGeoReferenceFrame:
addGeofence:
removeObjectForKey:
removeGeofence:
stopMonitorUnsafeLocationExit:forDevice:
didDetermineState:forUnsafeLocation:forDevice:
stopMonitorSafeLocation:forDevice:
handleFenceEvent:forRegion:
hasPrefix:
substringFromIndex:
initWithUUIDString:
isSafeLocation:
notifyState:forSafeLocationRegion:
notifyState:forUnsafeLocationRegion:
isLowPower
startMonitorUnsafeLocationExit:forDevice:
startMonitorSafeLocation:forDevice:
getSafeLocationCount
getUnsafeLocationCount
removeLocationsForDeviceUuid:
setDeviceUUIDsByUnsafeRegionIdentifier:
setDeviceUUIDsBySafeLocation:
setSafeLocationsByRegionIdentifier:
setStatesByRegionIdentifier:
setRegionsByRegionIdentifier:
_deviceUUIDsByUnsafeRegionIdentifier
_deviceUUIDsBySafeLocation
_safeLocationsByRegionIdentifier
_statesByRegionIdentifier
_regionsByRegionIdentifier
T@"NSMutableDictionary",&,N,V_deviceUUIDsByUnsafeRegionIdentifier
T@"NSMutableDictionary",&,V_deviceUUIDsBySafeLocation
T@"NSMutableDictionary",&,N,V_safeLocationsByRegionIdentifier
T@"NSMutableDictionary",&,N,V_statesByRegionIdentifier
T@"NSMutableDictionary",&,N,V_regionsByRegionIdentifier
initWithDevice:eventType:lastEvent:date:
T@"SADevice",R,C,N,V_device
initWithDevices:safeLocationUUIDs:date:
devices
_devices
T@"NSDictionary",R,C,N,V_devices
resetStatistics
setStartTimestamp:
setVisitCount:
setTotalVisitDuration:
setBtScanCount:
setGeofenceCount:
setGpsLocationRequestCount:
setWifiLocationRequestCount:
setSeparationAlertsCount:
monitoredDevices
btScanCount
geofenceCount
gpsLocationRequestCount
wifiLocationRequestCount
separationAlertsCount
hasArrivalDate
hasDepartureDate
visitCount
departureDate
arrivalDate
totalVisitDuration
startTimestamp
sendPowerLog
increaseBTScanCount
increaseGeofenceCount
increaseGpsLocationRequestCount
increaseWifiLocationRequestCount
increaseSeparationAlertsCount:
addMonitoredDevice:
setMonitoredDevices:
_startTimestamp
_visitCount
_totalVisitDuration
_btScanCount
_geofenceCount
_gpsLocationRequestCount
_wifiLocationRequestCount
_separationAlertsCount
_monitoredDevices
T@"NSDate",&,N,V_startTimestamp
TQ,N,V_visitCount
Td,N,V_totalVisitDuration
TQ,N,V_btScanCount
TQ,N,V_geofenceCount
TQ,N,V_gpsLocationRequestCount
TQ,N,V_wifiLocationRequestCount
TQ,N,V_separationAlertsCount
T@"NSMutableSet",&,N,V_monitoredDevices
initWithDeviceUUID:state:geofence:scenario:trackedTravelingStartDate:
deviceUUID
geofence
scenario
trackedTravelingStartDate
initWithDeviceUuid:scenarioClass:unsafeLocation:
trackedTravelingStartLocation
setDeviceUUID:
setGeofence:
setState:
setScenario:
setTrackedTravelingStartDate:
travelingGeofenceExitDate
setTravelingGeofenceExitDate:
earlyVehicularStateChangeDate
setEarlyVehicularStateChangeDate:
setTrackedTravelingStartLocation:
scenarioClassifier
setScenarioClassifier:
earlyVehicularTrigger
setEarlyVehicularTrigger:
earlyAirplaneTrigger
setEarlyAirplaneTrigger:
caLastStateTransition
setCaLastStateTransition:
caSeparationLocation
setCaSeparationLocation:
_earlyVehicularTrigger
_earlyAirplaneTrigger
_deviceUUID
_geofence
_scenario
_trackedTravelingStartDate
_travelingGeofenceExitDate
_earlyVehicularStateChangeDate
_trackedTravelingStartLocation
_scenarioClassifier
_caLastStateTransition
_caSeparationLocation
T@"NSUUID",&,N,V_deviceUUID
T@"CLCircularRegion",&,N,V_geofence
TQ,N,V_state
TQ,N,V_scenario
T@"NSDate",&,N,V_trackedTravelingStartDate
T@"NSDate",&,N,V_travelingGeofenceExitDate
T@"NSDate",&,N,V_earlyVehicularStateChangeDate
T@"TALocationLite",&,N,V_trackedTravelingStartLocation
T@"SAScenarioClassifier",&,N,V_scenarioClassifier
TB,N,V_earlyVehicularTrigger
TB,N,V_earlyAirplaneTrigger
T@"NSDate",&,N,V_caLastStateTransition
T@"CLLocation",&,N,V_caSeparationLocation
withYouDetector
travelTypeClassifier
addDisableReason:
startBackgroundScanning
stopBackgroundScanning
fetchLastVisit
enabled
requestToStartBackgroundScanning
requestToStopBackgroundScanning
objectForKeyedSubscript:
fenceManager
setTimeDelegate:
attemptToPopulateTrackedTravelingStartLocationForDevice:
convertSAMonitoringSessionStateToString:
convertSAScenarioClassToString:
startPeriodicScansIfNeeded
resetAllWithYouStatusAndScanStates
configureBackgroundScanning
requestToFetchLastVisit
createMonitoringDevice:
deviceUUIDtoSafeLocationUUIDs
startSafeLocation:forDevice:
stopPeriodicScans
deviceUUIDtoMonitoringSession
allKeys
cancelMonitoringDevice:
setCurrentVisitOrLOIEvent:
fenceRequestServicer
changeMonitoringSessionState:toState:
currentVisitOrLOIEvent
setObject:forKeyedSubscript:
didChangeScenarioClassFrom:to:forDevice:
standby
forceUpdateWithYouStatusToFindDevices:withContext:
forceUpdateWithYouStatusWithShortScan:
setActiveState:
stopSafeLocation:forDevice:
lastLocation
devicesWithToBePopulatedTrackedTravelingStartLocation
deviceRecord
updateMonitoringSessionState:forDeviceWithUUID:
devicesWithPendingTransition
storeSeparationLocation:
updatedMonitoringState:forDeviceUUID:
startPeriodicScans
stopPeriodicScansIfNotNeeded
nextScheduledAlarmForPersistenceWrite
dateWithTimeInterval:sinceDate:
setupAlarmFireAt:forClient:
setNextScheduledAlarmForPersistenceWrite:
requestedPeriodicScan
setRequestedPeriodicScan:
pausePeriodicScan
needPeriodicScan
resumePeriodicScan
getSADevice:
integerValue
setCaLastAlertDate:
notifySeparationsForDevices:withLocation:withContext:
_isOnlyMonitoringDisconnectedCompanionDevice
didForceUpdateWithYouStatus
initWithCenter:radius:identifier:
initWithLatitude:longitude:
removeTravelFenceForDevice:
createLocationFromCircularRegion:forDevice:withContext:
handleSeparationForDeviceUUID:withSafeLocationRecommendation:context:
lastUnsafeLocation
notifyLeftBehind:withRegion:isEarlyVehicularTrigger:
previousVisitOrLOIEvent
initWithFormat:
coordinate
horizontalAccuracy
currentUnsafeLocation
center
initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:
geoReferenceFrame
setReferenceFrame:
removeAndStopSafeLocationsForDeviceUUID:
setWithSet:
allObjects
lastObject
removeDeviceWithUUID:isLastDeviceEvent:
removeObjectsForKeys:
isEqualToSet:
removeSafeLocationsIfNeededPerNewSet:forDevice:
addSafeLocationsIfNeededPerNewSet:forDevice:
addDevice:isLastDeviceEvent:
setSafeLocations:forDeviceUUID:
removeDisableReason:
distanceFromLocation:
isWithinCurrentVisitOrLOI:
scenarioChangeDate
timeOfAttemptToLoadFromPersistence
shouldIssueBookendedNotificationBasedOnLocationForDevice:
shouldIssueBookendedNotificationBasedOnTimeForDevice:
updateDevicesWithSafeLocations:
updateSafeLocations:
updateLocation:
handleGeofenceEvent:
addVisit:withRadius:
allValues
setPreviousVisitOrLOIEvent:
handleSystemStateChanged:
removeDevicesIfNeededPerEvent:
addDevicesIfNeededPerEvent:
minusSet:
computeRemovedSafeLocations:
removeSafeLocation:forDeviceUUID:
setSafeLocations:
handleGeofenceExitedForDeviceUUID:
setEnabled:
systemStateType
isOn
setTimeOfAttemptToLoadFromPersistence:
persistenceManager
load
store
setDeviceUUIDtoMonitoringSession:
bootstrapMonitoringSessionRecord:
setIsCompanionConnected:
stateForDeviceUUID:
updateScenario:forDeviceWithUUID:
statusForDeviceWithUUID:
updatedWithYouStatusFrom:to:forDeviceWithUUID:
isAnyInTrackedInUnsafeLocation
isAnyTrackedWhileTraveling
allDevicesInSafeLocation
setInTravelState:
setInSafeLocationState:
setInUnsafeLocationState:
anyDeviceInUnsafeLocation
scheduleNextForceUpdateWithYouStatusFromReferenceDate:
convertSAWithYouStatusToString:
checkReunion:to:forDeviceWithUUID:
scenarioClassForDeviceUUID:
getLastWithYouDate:
caBroughtOutOnTravel
addNumDevicesWithYou:
setCaBroughtOutOnTravel:
deviceShouldTransitionWithLastScenarioChangeDate:lastWithYouDate:
shouldIssueBookendedNotificationForDevice:
enoughTimeHasPassedBeforeSurfacingAlert:forAlertForDevice:
notifyWhileTraveling:isBookendingTravel:
addTravelFenceForDevice:
determineTrackedTravelingCount
earlierDate:
notifyWhenLeftBehind:
notifyEarlyLeftBehind:
distantPast
getLastScenarioChangeDateAmongAllDevices
forceUpdateWithYouStatus
setScheduledAlarmForForceUpdateWithYouStatus:
minimumTimeSinceScenarioTransitionForAlertForDevice:
onUpdatedMonitoringSessionRecord:
setCaCurrentVehicularState:
setCaIsVehicularBTHintOn:
earlyVehicularTriggerForDeviceUUID:
alarmFiredForUUID:
initWithWithYouDetector:fenceRequestServicer:fenceManager:travelTypeClassifier:clock:deviceRecord:analytics:persistenceManager:
setStandby:
forceStandbyMode:
convertSADeviceTypeForCoreAnalytics:
modifyDevice:
handleNewSafeLocation:
handleModifiedSafeLocation:
handleRemovedSafeLocation:
addSafeLocation:forDeviceUUID:
handleModifiedSafeLocation:forDeviceUUID:
setWithYouDetector:
setFenceRequestServicer:
setFenceManager:
setLastLocation:
setDeviceRecord:
setTravelTypeClassifier:
setDevices:
setDeviceUUIDtoSafeLocationUUIDs:
disabledReasons
setDisabledReasons:
caLastAlertDate
deviceUUIDtoAlertContext
setDeviceUUIDtoAlertContext:
caCurrentVehicularState
caIsVehicularBTHintOn
setPersistenceManager:
scheduledAlarmForForceUpdateWithYouStatus
isCompanionConnected
setDevicesWithToBePopulatedTrackedTravelingStartLocation:
setDevicesWithPendingTransition:
_enabled
_standby
_requestedPeriodicScan
_caIsVehicularBTHintOn
_isCompanionConnected
_withYouDetector
_fenceRequestServicer
_fenceManager
_deviceUUIDtoMonitoringSession
_lastLocation
_deviceRecord
_travelTypeClassifier
_deviceUUIDtoSafeLocationUUIDs
_disabledReasons
_caLastAlertDate
_caBroughtOutOnTravel
_deviceUUIDtoAlertContext
_caCurrentVehicularState
_persistenceManager
_nextScheduledAlarmForPersistenceWrite
_scheduledAlarmForForceUpdateWithYouStatus
_currentVisitOrLOIEvent
_previousVisitOrLOIEvent
_timeOfAttemptToLoadFromPersistence
_devicesWithToBePopulatedTrackedTravelingStartLocation
_devicesWithPendingTransition
T@"<SAWithYouDetectorServiceProtocol>",&,N,V_withYouDetector
T@"<SAGeoFenceRequestProtocol>",&,N,V_fenceRequestServicer
T@"<SAFenceManagerServiceProtocol><SAFenceManagerRequestProtocol>",&,N,V_fenceManager
T@"NSMutableDictionary",&,N,V_deviceUUIDtoMonitoringSession
T@"TALocationLite",&,N,V_lastLocation
T@"SADeviceRecord",&,N,V_deviceRecord
T@"<SATravelTypeClassifierServiceProtocol>",&,N,V_travelTypeClassifier
T@"NSMutableDictionary",&,N,V_devices
T@"NSMutableDictionary",&,N,V_safeLocations
T@"NSMutableDictionary",&,N,V_deviceUUIDtoSafeLocationUUIDs
TB,N,V_requestedPeriodicScan
TQ,N,V_disabledReasons
T@"NSDate",&,N,V_caLastAlertDate
Tq,N,V_caBroughtOutOnTravel
T@"NSMutableDictionary",&,N,V_deviceUUIDtoAlertContext
TQ,N,V_caCurrentVehicularState
TB,N,V_caIsVehicularBTHintOn
T@"SAPersistenceManager",&,N,V_persistenceManager
T@"NSUUID",&,N,V_nextScheduledAlarmForPersistenceWrite
T@"NSUUID",&,N,V_scheduledAlarmForForceUpdateWithYouStatus
T@"<TAEventProtocol>",&,N,V_currentVisitOrLOIEvent
T@"<TAEventProtocol>",&,N,V_previousVisitOrLOIEvent
T@"NSDate",&,N,V_timeOfAttemptToLoadFromPersistence
TB,N,V_isCompanionConnected
T@"NSMutableSet",&,N,V_devicesWithToBePopulatedTrackedTravelingStartLocation
T@"NSMutableSet",&,N,V_devicesWithPendingTransition
TB,N,V_enabled
TB,N,V_standby
setBluetoothScanner:
setLocationRequester:
setLongScanIsOngoing:
setRequestedShortScan:
setLastStartOfScan:
setLastEndOfScan:
initWithTimeInterval:sinceDate:
setNextScheduledAlarm:
setLastLongScanRequest:
setIsNotifyWhileTravelingEnabled:
setPreviousBufferEmptyTime:
setIsFindingRelevantDevices:
relevantDevicesToFindDuringLongScan
foundDevicesDuringCurrentScan
getAllUUIDs
longScanIsOngoing
_isOnlyMonitoringLeashOnlyDevices
initWithState:date:
_updateAllWithYouStatusOnScanEndedEvent:
requestBluetoothScanForTypes:
convertSAWithYouLongScanContextToString:
setLastLongScanContext:
addObjectsFromArray:
getConnectionState:
updateLastWithYouDate:forDeviceWithUUID:
setLastRelevantDeviceFoundTime:
allRelevantDevicesToFindAreFound
isFindingRelevantDevices
allSAEnabledDevicesAreFound
bluetoothScanner
stopLongAggressiveScan
lastLongScanRequest
setLastExtraHELEFoundTime:
setLastExtraNonHELEFoundTime:
requestedShortScan
sendScanContextToCoreAnalytics:isPartOfLongScan:scanDuration:relevantOnlyScanDuration:foundExtraHELECount:extraHELEScanDuration:foundExtraNonHELECount:extraNonHELEScanDuration:longScanContext:
addScanDuration:
addScanDurationForFindingRelevantItemsOnly:
_deviceIsWatch:
resetAllWithYouStatus
setExtraFoundHELECount:
setExtraFoundNonHELECount:
getWithYouStatus:
isNotifyWhileTravelingEnabled
isPeriodicScansNeeded
setIsPeriodicScansNeeded:
requestScanIfNeeded
_notifyAllClientsOfWithYouStatusUpdate:forDeviceWithUUID:
_maxAgeOfWithYouAdvertisementForDeviceType:
lastStartOfScan
dateByAddingTimeInterval:
lastRelevantDeviceFoundTime
laterDate:
getMonitoringSessionState:
getScenarioClass:
extraFoundHELECount
lastExtraHELEFoundTime
extraFoundNonHELECount
lastExtraNonHELEFoundTime
isExtraDeviceFound:onDate:
updateExtraDeviceInformation:
_isRecentEnoughAdvertisement:forCurrentDate:
_deviceWithUUID:isWithYouDuringLongScanOnAdvertisement:
_updateWithYouStatusOfRelatedDevices:
getRelatedDevices:
objectAtIndexedSubscript:
_isValidPartID:
_isStatusBitSetForRelatedDeviceWithShiftIndex:fromAdvertisement:
updateLatestAdvertisement:forDeviceWithUUID:
status
initializationTime
getLatestAdvertisement:
_enoughTimeHasPassedSinceInitializationToMarkNotWithYouForDeviceType:
_finalizeToBeVerifiedStatus:
previousBufferEmptyTime
lastEndOfScan
isPeriodicScansAllowed
setNextOpportunisticScanDate:
nextScheduledAlarm
cancelAlarmWithUUID:
isInVehicularTravel
_updateWithYouStatusIfNecessaryOnConnectionEvent:
_updateWithYouStatusIfNecessaryOnAdvertisement:
lastLongScanContext
_updateWithYouStatusOnAdvBufferEmptyEvent:
nextOpportunisticScanDate
_scheduleNextAlarmForScanAfterDate:
locationRequester
requestLocationForType:
setIsInVehicularTravel:
initWithBluetoothScanner:locationRequester:deviceRecord:clock:analytics:
setInitializationTime:
setRelevantDevicesToFindDuringLongScan:
setFoundDevicesDuringCurrentScan:
_longScanIsOngoing
_requestedShortScan
_isNotifyWhileTravelingEnabled
_isPeriodicScansNeeded
_isInVehicularTravel
_isFindingRelevantDevices
_bluetoothScanner
_locationRequester
_lastLongScanRequest
_lastStartOfScan
_lastEndOfScan
_nextOpportunisticScanDate
_nextScheduledAlarm
_previousBufferEmptyTime
_initializationTime
_relevantDevicesToFindDuringLongScan
_foundDevicesDuringCurrentScan
_lastRelevantDeviceFoundTime
_lastLongScanContext
_extraFoundHELECount
_extraFoundNonHELECount
_lastExtraHELEFoundTime
_lastExtraNonHELEFoundTime
T@"<SABluetoothScanRequestProtocol>",W,N,V_bluetoothScanner
T@"<SALocationRequestProtocol>",W,N,V_locationRequester
TB,N,V_longScanIsOngoing
TB,N,V_requestedShortScan
T@"NSDate",&,N,V_lastLongScanRequest
T@"NSDate",&,N,V_lastStartOfScan
T@"NSDate",&,N,V_lastEndOfScan
TB,N,V_isNotifyWhileTravelingEnabled
TB,N,V_isPeriodicScansNeeded
TB,N,V_isInVehicularTravel
T@"NSDate",&,N,V_nextOpportunisticScanDate
T@"NSUUID",&,N,V_nextScheduledAlarm
T@"NSDate",&,N,V_previousBufferEmptyTime
T@"NSDate",&,N,V_initializationTime
T@"NSMutableSet",&,N,V_relevantDevicesToFindDuringLongScan
T@"NSMutableDictionary",&,N,V_foundDevicesDuringCurrentScan
TB,N,V_isFindingRelevantDevices
T@"NSDate",&,N,V_lastRelevantDeviceFoundTime
TQ,N,V_lastLongScanContext
TQ,N,V_extraFoundHELECount
TQ,N,V_extraFoundNonHELECount
T@"NSDate",&,N,V_lastExtraHELEFoundTime
T@"NSDate",&,N,V_lastExtraNonHELEFoundTime
localTimeZone
setTimeZone:
setFormatOptions:
stringFromDate:
currentCalendar
nextDateAfterDate:matchingHour:minute:second:options:
startOfDayForDate:
getNextDateAtHour:
getMinutesSinceStartOfDay
publishingInterval
initWithTimeIntervalSinceNow:
separationMonitoringSession
queue
didFetchAllDevices:
didFetchAllSafeLocations:
startRefreshingSafeLocationWithBlock:
startRefreshingBeaconsForSeparationMonitoringWithBlock:
dealloc
type
approvalState
location
convertCLReferenceFrameToSAReferenceFrame:
addSafeLocationFetchResultCount:
convertBeaconToDeviceType:
setByAddingObjectsFromSet:
addDeviceFetchResultCount:type1count:type2count:type3count:type4count:type5count:type6count:type7count:safeCount:usingSameSafe:
service
horizontalUncertainty
entry
exit
initWithCoordinate:horizontalAccuracy:arrivalDate:departureDate:detectionDate:confidence:
initWithAscending:confidence:dateInterval:labelVisit:limit:
routineManager
firstObject
placeInference
loiIdentifier
_ingestVisit:
initWithType:latitude:longitude:horizontalAccuracy:referenceFrame:date:
fetchLocationOfInterestWithIdentifier:withHandler:
fetchStoredVisitsWithOptions:handler:
separationAlertsServiceManager:enableMonitoringForSeparations:
addAlertWithContext:
separationAlertsServiceManager:notifySeparationsForDevices:withLocation:withContext:
addAggressiveScanRequest:
separationAlertsServiceManager:requestBluetoothScanForTypes:
addGpsLocationRequest:
addWifiLocationRequest:
separationAlertsServiceManager:requestLocationForType:
separationAlertsServiceManager:addGeofence:
separationAlertsServiceManager:removeGeofence:
addWakeTimerRequest
separationAlertsServiceManager:scheduleSATimeEvent:forAlarm:
separationAlertsServiceManager:cancelSATimeEventForAlarm:
separationAlertsServiceManagerStartBackgroundScanning:
separationAlertsServiceManagerStopBackgroundScanning:
separationAlertsServiceManagerStopLongAggressiveScan:
_fetchAndIngestLastVisit
hasAttemptedToIngestLastVisitAtStartup
setHasAttemptedToIngestLastVisitAtStartup:
nextAnalyticsSubmission
publishAndResetAggregation
setNextAnalyticsSubmission:
separationAlertsService:enableMonitoringForSeparations:
separationAlertsService:notifySeparationsForDevices:withLocation:withContext:
separationAlertsService:requestBluetoothScanForTypes:
separationAlertsService:requestLocationForType:
separationAlertsService:addGeofence:
separationAlertsService:removeGeofence:
separationAlertsService:scheduleSATimeEvent:forAlarm:
separationAlertsService:cancelSATimeEventForAlarm:
separationAlertsServiceStartBackgroundScanning:
separationAlertsServiceStopBackgroundScanning:
separationAlertsServiceStopLongAggressiveScan:
separationAlertsServiceFetchLastVisit:
initWithQueue:
setQueue:
setService:
setRoutineManager:
_beaconManager
_ownerSession
_separationMonitoringSession
_hasAttemptedToIngestLastVisitAtStartup
_queue
_nextAnalyticsSubmission
_routineManager
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
T@"SAService",&,N,V_service
T@"SAAnalytics",&,N,V_analytics
T@"NSDate",&,N,V_nextAnalyticsSubmission
T@"RTRoutineManager",&,N,V_routineManager
TB,N,V_hasAttemptedToIngestLastVisitAtStartup
alarmUUID
setAlarmUUID:
fireDate
setFireDate:
client
setClient:
_alarmUUID
_fireDate
_client
T@"NSUUID",C,N,V_alarmUUID
T@"NSDate",C,N,V_fireDate
T@"<SATimeClientProtocol>",W,N,V_client
alarmQueue
cancelSATimeEventForAlarm:
UUID
addAlarm:
scheduleSATimeEvent:forAlarm:
earliestAlarm
alarmFired:
popAlarm
fireAlarmsIfReady
advanceTimeWithEvent:
isReplay
T@"NSDate",R,N
initWithExternalTimer:isReplay:
alarmCount
getEarliestAlarmDate
ongoingAlarms
setOngoingAlarms:
setAlarmQueue:
externalTimer
setExternalTimer:
setIsReplay:
_isReplay
_now
_ongoingAlarms
_alarmQueue
_externalTimer
T@"NSMutableSet",&,N,V_ongoingAlarms
T^v,N,V_alarmQueue
T@"<SATimeEventRequestProtocol>",W,N,V_externalTimer
TB,N,V_isReplay
T@"NSDate",R,N,V_now
initWithDirectoryURLOrDefault:storeFileNameOrDefault:
fileURLWithPath:isDirectory:
fileURLWithPath:relativeToURL:
_getStoreURL
persistenceDirectoryURL
setPersistenceDirectoryURL:
persistenceStoreFileName
setPersistenceStoreFileName:
_persistenceDirectoryURL
_persistenceStoreFileName
T@"NSURL",&,N,V_persistenceDirectoryURL
T@"NSString",&,N,V_persistenceStoreFileName
_createDirectoryIfNotPresent
defaultManager
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
didWriteToURL:bytes:
didReadFromURL:bytes:
path
fileExistsAtPath:
dataWithContentsOfURL:options:error:
unarchivedObjectOfClass:fromData:error:
_notifyObserversOnReadFromURL:bytes:
writeToURL:options:error:
_notifyObserversOnWriteToURL:bytes:
removeItemAtURL:error:
save
addObserver:
removeObserver:
reset
settings
setSettings:
observers
setObservers:
_store
_settings
_observers
T@"SAPersistenceManagerSettings",&,V_settings
T@"NSHashTable",&,N,V_observers
T@"SAPersistenceStore",R,N,V_store
isValidJSONObject:
mainBundle
localizedStringForKey:value:table:
errorWithDomain:code:userInfo:
dataWithJSONObject:options:error:
initWithData:encoding:
_removeUnsafeLocation:
_removeSafeLocation:
scenarioClassification
setScenarioClassification:
_notifyAllClientsOfScenarioChangeFrom:to:
statesBySafeLocation
deviceUuid
setCurrentUnsafeLocation:
_setNewScenarioClass:
setLastUnsafeLocation:
_isInsideAnySafeLocation
_hasAllSafeLocationStatesKnown
currentVisit
containsCoordinate:
_addUnsafeLocation:
_addSafeLocation:
setCurrentVisit:
delegate
_findSafeLocationWithUUID:
timeDelegate
initWithDeviceUuid:
setDeviceUuid:
setStatesBySafeLocation:
_currentUnsafeLocation
_lastUnsafeLocation
_deviceUuid
_scenarioClassification
_scenarioChangeDate
_delegate
_timeDelegate
_statesBySafeLocation
_currentVisit
TQ,N,V_scenarioClassification
T@"NSUUID",C,N,V_deviceUuid
T@"CLRegion",C,N,V_currentUnsafeLocation
T@"CLRegion",C,N,V_lastUnsafeLocation
T@"NSMutableSet",&,N,V_safeLocations
T@"NSMutableDictionary",&,N,V_statesBySafeLocation
T@"CLCircularRegion",C,N,V_currentVisit
T@"NSDate",R,C,N,V_scenarioChangeDate
T@"<SAFenceManagerRequestProtocol>",&,N,V_delegate
T@"<SATimeServiceProtocol>",&,N,V_timeDelegate
computeMessagesForEvent:
base64EncodedStringWithOptions:
getUUIDBytes:
dataWithBytes:length:
stringToSplit:maxSplitSize:
stringWithFormat:
substringWithRange:
initWithBase64EncodedString:options:
getBytes:length:
initWithUUIDBytes:
appendString:
logTAEvent:
_updateSingleDeviceRecordForDevice:
_updateAllRelatedDevices
_updateDeviceRecordOnDeviceUpdateEvent:
_updateConnectionStateOnConnectionEvent:
_updateLatestAdvertisement:
initWithClock:analytics:
getDeviceNotificationState:
getLatestNOAdvertisement:
getLatestWildAdvertisement:
hasSurfacedNotificationFor:
hasDisconnectedDevices
T@"NSMutableDictionary",&,N,V_deviceRecord
powerLogger
monitoringSessionManager
enableMonitoringForSeparations:
setMonitoringSessionManager:
setPowerLogger:
_monitoringSessionManager
_powerLogger
T@"SATime",&,N,V_clock
T@"SAWithYouDetector",&,N,V_withYouDetector
T@"SAMonitoringSessionManager",&,N,V_monitoringSessionManager
T@"SAFenceManager",&,N,V_fenceManager
T@"SATravelTypeClassifier",&,N,V_travelTypeClassifier
T@"SAPowerLog",&,N,V_powerLogger
enableSubmission
setEnableSubmission:
_enableSubmission
TB,V_enableSubmission
setNumDevicesAtSafeExit:
lastActivated
aggActiveDuration
setAggActiveDuration:
setLastActivated:
lastSafeEntry
aggInSafeDuration
setAggInSafeDuration:
setLastSafeEntry:
lastUnsafeEntry
aggInUnsafeDuration
setAggInUnsafeDuration:
setLastUnsafeEntry:
lastTravelStart
aggInTravelDuration
setAggInTravelDuration:
setLastTravelStart:
numAlerts
numAlertsLeftBehind
numAlertsTraveling
numEnabled
numItems
numAccessories
numBTLE
numDevices
numiPhone
numiPad
numMacBook
numSafe
numSafeInUse
isAllUsingSameSafe
numBTRequests
numBTLeftBehindRequests
numBTTravelingRequests
numGpsRequests
numWifiRequests
numTimers
numDevicesAtSafeExit
numUnsafe
numUnsafeWithLOI
numUnsafeWithoutLOI
aggScanDuration
aggScanDurationForFindingRelevantItemsOnly
resetAggregation
setNumAlerts:
setNumAlertsLeftBehind:
setNumAlertsTraveling:
setNumBTRequests:
setNumBTLeftBehindRequests:
setNumBTTravelingRequests:
setNumGpsRequests:
setNumWifiRequests:
setNumTimers:
setNumUnsafe:
setNumUnsafeWithLOI:
setNumUnsafeWithoutLOI:
setAggScanDuration:
setAggScanDurationForFindingRelevantItemsOnly:
setNumEnabled:
setNumItems:
setNumAccessories:
setNumBTLE:
setNumDevices:
setNumiPhone:
setNumiPad:
setNumMacBook:
setNumSafeInUse:
setIsAllUsingSameSafe:
setNumSafe:
addPreArrivalAlertTime:didRejoinPriorExit:
addDidSeparateWhileInVisit:didRejoinPriorExit:
_isAllUsingSameSafe
_numAlerts
_numAlertsLeftBehind
_numAlertsTraveling
_numEnabled
_numDevices
_numItems
_numAccessories
_numBTLE
_numiPhone
_numiPad
_numMacBook
_numSafe
_numSafeInUse
_numBTRequests
_numBTLeftBehindRequests
_numBTTravelingRequests
_numGpsRequests
_numWifiRequests
_numTimers
_numDevicesAtSafeExit
_numUnsafe
_numUnsafeWithLOI
_numUnsafeWithoutLOI
_aggActiveDuration
_aggInSafeDuration
_aggInUnsafeDuration
_aggInTravelDuration
_aggScanDuration
_aggScanDurationForFindingRelevantItemsOnly
_lastActivated
_lastSafeEntry
_lastUnsafeEntry
_lastTravelStart
TQ,N,V_numAlerts
TQ,N,V_numAlertsLeftBehind
TQ,N,V_numAlertsTraveling
TQ,N,V_numEnabled
TQ,N,V_numDevices
TQ,N,V_numItems
TQ,N,V_numAccessories
TQ,N,V_numBTLE
TQ,N,V_numiPhone
TQ,N,V_numiPad
TQ,N,V_numMacBook
TQ,N,V_numSafe
TQ,N,V_numSafeInUse
TB,N,V_isAllUsingSameSafe
TQ,N,V_numBTRequests
TQ,N,V_numBTLeftBehindRequests
TQ,N,V_numBTTravelingRequests
TQ,N,V_numGpsRequests
TQ,N,V_numWifiRequests
TQ,N,V_numTimers
TQ,N,V_numDevicesAtSafeExit
TQ,N,V_numUnsafe
TQ,N,V_numUnsafeWithLOI
TQ,N,V_numUnsafeWithoutLOI
TQ,N,V_aggActiveDuration
TQ,N,V_aggInSafeDuration
TQ,N,V_aggInUnsafeDuration
TQ,N,V_aggInTravelDuration
Td,N,V_aggScanDuration
Td,N,V_aggScanDurationForFindingRelevantItemsOnly
T@"NSDate",&,N,V_lastActivated
T@"NSDate",&,N,V_lastSafeEntry
T@"NSDate",&,N,V_lastUnsafeEntry
T@"NSDate",&,N,V_lastTravelStart
Td,R,N
B16@0:8
v40@0:8@16Q24Q32
v40@0:8@"<OSLogCoder>"16Q24Q32
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v24@0:8@16
@24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@24@0:8^{_NSZone=}16
@"NSDate"16@0:8
@"NSDictionary"16@0:8
@40@0:8@16q24@32
q16@0:8
v16@0:8
@"NSUUID"
@"NSDate"
@40@0:8@16Q24@32
@"CLRegion"
@40@0:8@16@24@32
v24@0:8Q16
v32@0:8@16Q24
v24@0:8q16
v20@0:8B16
@"SADevice"
@"TASPAdvertisement"
@"NSMutableArray"
@"<SAAnalyticsServiceProtocol>"
@"<SATimeServiceProtocol>"
@84@0:8@16@24@32@40q48q56Q64B72@76
@92@0:8@16@24@32@40@48q56q64Q72B80@84
@100@0:8@16@24q32@40@48@56q64q72Q80B88@92
@"NSString"
@"NSMutableDictionary"
@72@0:8@16d24d32d40Q48@56@64
d16@0:8
@44@0:8@16Q24B32@36
@"SASafeLocation"
@32@0:8@16@24
@"NSDictionary"
B40@0:8@16@24@32
v32@0:8@16@24
B40@0:8@"OSLogPersistence"16@"NSArray"24@"NSError"32
v32@0:8@"NSDate"16@"NSDate"24
B32@0:8@16@24
B32@0:8@"OSActivityStream"16@"NSArray"24
v24@0:8@"OSActivityStream"16
v32@0:8@"OSActivityStream"16@"NSError"24
B40@0:8@"OSActivityStream"16@"NSArray"24@"NSError"32
B56@0:8@16@24@32q40@48
B56@0:8@"OSActivityStream"16@"NSString"24@"OSLogDevice"32q40@"NSError"48
@"SAService"
@"OSLogPersistence"
@"OSActivityStream"
@"NSObject<OS_dispatch_semaphore>"
@"NSURL"
@"SAAnalytics"
@24@0:8Q16
v24@0:8@"<SATravelTypeClassifierClientProtocol>"16
v24@0:8@"<TAEventProtocol>"16
B32@0:8Q16Q24
v40@0:8Q16Q24Q32
@"NSHashTable"
v24@0:8@"<SAFenceManagerClientProtocol>"16
B32@0:8@"CLRegion"16@"NSUUID"24
B32@0:8@"SASafeLocation"16@"NSUUID"24
v32@0:8Q16@24
v24@0:8@"NSUUID"16
v24@0:8@"<SAPowerLogClientProtocol>"16
v24@0:8d16
@"NSMutableSet"
@56@0:8@16Q24@32Q40@48
@"CLCircularRegion"
@"TALocationLite"
@"SAScenarioClassifier"
@"CLLocation"
Q24@0:8@16
q24@0:8@16
v24@0:8@"<SAMonitoringSessionManagerClientProtocol>"16
Q24@0:8@"NSUUID"16
q24@0:8@"NSUUID"16
v40@0:8Q16Q24@32
v40@0:8Q16Q24@"NSUUID"32
@80@0:8@16@24@32@40@48@56@64@72
v40@0:8@16@24@32
v28@0:8@16B24
v36@0:8@16@24B32
@40@0:8@16@24Q32
d24@0:8@16
@"<SAWithYouDetectorServiceProtocol>"
@"<SAGeoFenceRequestProtocol>"
@"<SAFenceManagerServiceProtocol><SAFenceManagerRequestProtocol>"
@"SADeviceRecord"
@"<SATravelTypeClassifierServiceProtocol>"
@"SAPersistenceManager"
@"<TAEventProtocol>"
v32@0:8@"NSArray"16Q24
v24@0:8@"<SAWithYouDetectorClientProtocol>"16
@56@0:8@16@24@32@40@48
v84@0:8Q16B24d28d36Q44d52Q60d68Q76
d24@0:8Q16
B24@0:8q16
B32@0:8Q16@24
Q24@0:8Q16
B24@0:8Q16
@"<SABluetoothScanRequestProtocol>"
@"<SALocationRequestProtocol>"
Q20@0:8i16
v24@0:8@"<SAServiceClientProtocol>"16
v48@0:8@16@24@32@40
v40@0:8@16d24@32
v28@0:8@"SAService"16B24
v48@0:8@"SAService"16@"NSArray"24@"CLLocation"32@"NSDictionary"40
v32@0:8@"SAService"16Q24
v32@0:8@"SAService"16@"CLRegion"24
v40@0:8@"SAService"16d24@"NSUUID"32
v32@0:8@"SAService"16@"NSUUID"24
v24@0:8@"SAService"16
@"SPBeaconManager"
@"SPOwnerSession"
@"NSObject<SPSeparationMonitoringProtocol>"
@"NSObject<OS_dispatch_queue>"
@"RTRoutineManager"
@"<SATimeClientProtocol>"
@"NSUUID"32@0:8@"NSDate"16@"<SATimeClientProtocol>"24
@28@0:8@16B24
^v16@0:8
v24@0:8^v16
@"<SATimeEventRequestProtocol>"
@"SAPersistenceStore"
@"SAPersistenceManagerSettings"
@32@0:8@16^@24
v24@0:8@"<SAScenarioClassifierClientProtocol>"16
v40@0:8Q16@24@32
v40@0:8Q16@"SASafeLocation"24@"NSUUID"32
v40@0:8Q16@"CLRegion"24@"NSUUID"32
v24@0:8@"CLRegion"16
v32@0:8Q16Q24
@"<SAFenceManagerRequestProtocol>"
@32@0:8@16Q24
v40@0:8@"NSArray"16@"CLLocation"24@"NSDictionary"32
v32@0:8Q16@"NSUUID"24
v32@0:8d16@24
v32@0:8d16@"NSUUID"24
@"SATime"
@"SAWithYouDetector"
@"SAMonitoringSessionManager"
@"SAFenceManager"
@"SATravelTypeClassifier"
@"SAPowerLog"
@20@0:8B16
v92@0:8Q16Q24Q32Q40Q48Q56Q64Q72Q80B88
v28@0:8B16Q20
v28@0:8d16B24
v24@0:8B16B20
v32@0:8@"NSString"16@"NSDictionary"24
v24@0:8@"NSDictionary"16
@"SAAnalyticsSettings"
SAConnectionEventIdentifier
SAConnectionEventState
SAConnectionEventDate
EventType
SATimeEventDate
GeofenceEventRegion
GeofenceEventType
GeofenceEventDate
<unknown>
Inside
Outside
Entry
Exit
<invalid>
UUID
Device
WithYouStatus
ConnectionState
NotificationState
LatestAdvertisement
LastWithYouDate
RelatedDevices
Surfaced
FirstAdvertisement
CurrentScenarioTime
currentScenario
firstDetectedToNextScenarioTimeInterval
nextScenario
previousMonitoringState
scenarioChangeToFirstDetectedTimeInterval
com.apple.clx.alert.firstAdv
SADeviceIdentifier
SADeviceGroupIdentifier
SADevicePartIdentifier
SADeviceName
SADeviceModel
SADeviceSystemVersion
SADeviceVendorId
SADeviceProductId
SADeviceType
SADeviceNotifyEnabled
SADeviceDate
MonitoringSessionRecord
SASafeLocationIdentifier
SASafeLocationLatitude
SASafeLocationLongitude
SASafeLocationRadius
SASafeLocationReferenceFrame
SASafeLocationNameString
SASafeLocationDate
SASafeLocationUpdateEventSafeLocation
SASafeLocationUpdateEventType
SASafeLocationUpdateEventLast
SASafeLocationUpdateEventDate
kSASafeLocationsEventKeySafeLocations
kSASafeLocationsEventKeyDate
process == 'locationd'
subsystem == 'com.apple.TrackingAvoidance'
category == 'SeparationAlertsEvents'
processID == %d
category == 'SeparationAlerts'
Error writing replay result to file
ReplayStatus: %s
Log stream stopped
Log stream started
Stream error: %@
Replaying with
StartDate: %@
EndDate: %@
Writing output to: %@
STREAM START TIMEOUT
REPLAY TIMEOUT
STREAM STOP TIMEOUT
HEX DESERIALIZATION EXCEPTION: %@
ERROR DESERIALIZING EVENT: %@
Got activity events from log archive
Error in replaying logarchive: %@
Finished fetching events from log archive
replaying:%@
Could not replay event %@
v8@?0
com.apple.tracking-avoidance
Status
Events
com.apple.TrackingAvoidance
SeparationAlerts
SeparationAlertsEvents
Unknown
NonVehicular
Vehicular
NonVehicular - Static
NonVehicular - Pedestrian
NonVehicular - Cycling
unsafe_
SADeviceUpdateEventDevice
SADeviceUpdateEventType
SADeviceUpdateEventLast
SADeviceUpdateEventDate
kSADevicesWithSafeLocationsEventKeyDevices
kSADevicesWithSafeLocationsEventKeySafeLocationIDs
kSADevicesWithSafeLocationsEventKeyDate
SAMonitoringSessionIdentifier
SAMonitoringSessionState
SAMonitoringSessionGeofence
SAMonitoringSessionScenario
SAMonitoringSessionTrackedTravelingStartDate
SAMonitoringSessionTrackedTravelingStartLocation
iPhone
iPad
MacBook
unsafe_%@
TrackedInUnsafeLocation
TrackedTraveling
Untracked
Separated
SeparationVerification
EndMonitoring
com.apple.clx.separationalerts.scan
scanType
isPartOfLongScan
scanDuration
relevantOnlyScanDuration
foundExtraHELECount
extraHELEScanDuration
foundExtraNonHELECount
extraNonHELEScanDuration
longScanContext
WithYou
NotWithYou
WithYouToBeVerified
NotWithYouToBeVerified
UnsafeExit
EndOfTravel
TravelingGeofenceExit
StandbyExit
NewMonitoredDeviceAdded
AirplaneModeToggle
EarlyVehicularTrigger
RetryScan
WatchScenarioTransition
v16@?0@"NSSet"8
Watch
v24@?0@"RTLocationOfInterest"8@"NSError"16
v24@?0@"NSArray"8@"NSError"16
allocator<T>::allocate(size_t n) 'n' exceeds maximum supported size
/var/root/Library/Caches/locationd/TrackingAvoidance/
separationalerts.bin
com.apple.tracking-avoidance.NSJSONSerializationNSString
Invalid dictionary for JSON serialization
Refer to NSJSONSerialization spec for valid dictionaries
NSJSONSerialization failed
inSafeLocation
inUnsafeLocation
Traveling
%@%@
DeviceRecord
com.apple.clx.alert.heartbeats
numAlerts
numAlertsLeftBehind
numAlertsTraveling
numEnabled
numItems
numAccessories
numBTLE
numDevices
numiPhone
numiPad
numMacBook
numSafe
numSafeInUse
isAllUsingSameSafe
numBTRequests
numBTLeftBehindRequests
numBTTravelingRequests
numGpsRequests
numWifiRequests
numTimers
numDevicesAtSafeExit
numUnsafe
numUnsafeWithLOI
numUnsafeWithoutLOI
aggActiveDuration
aggInSafeDuration
aggInUnsafeDuration
aggInTravelDuration
totalScanDuration
totalScanDurationForFindingRelevantItemsOnly
%@ instance failed to create description:%@
{"msg%{public}.0s":"#SATravelTypeClassifier handleVehicleState", "curr":"%{private}s", "new":"%{private}s", "hints":"%{private}s"}
{"msg%{public}.0s":"#SATravelTypeClassifier handleUserActivity", "curr":"%{private}s", "new":"%{private}s"}
{"msg%{public}.0s":"#SATravelTypeClassifier notifyTravelTypeChange", "from":"%{private}s", "to":"%{private}s"}
{"msg%{public}.0s":"#sa #fencemgr, Could not find region for safe location"}
{"msg%{public}.0s":"#sa #fencemgr, Safe location already used for this device"}
{"msg%{public}.0s":"#sa #fencemgr, Safe location state should have been set to unknown at least"}
{"msg%{public}.0s":"#sa #fencemgr, Can't remove a non-existent safe location"}
{"msg%{public}.0s":"#sa #fencemgr, Unsafe location already used for this device"}
{"msg%{public}.0s":"#sa #fencemgr, Unsafe location state should have been set to unknown at least"}
{"msg%{public}.0s":"#sa #fencemgr, Can't remove a non-existent unsafe location"}
{"msg%{public}.0s":"#sa #fencemgr handleFenceEvent for unsafe location not in dictionary", "deviceUUID":"%{private}@"}
{"msg%{public}.0s":"#sa #fencemgr, region monitoring error", "regionUUID":"%{private}@"}
{"msg%{public}.0s":"#sa #fencemgr, notify state for safe", "regionUUID":"%{private}s", "Clients":%{private}ld, "Found":"%{private}s"}
{"msg%{public}.0s":"#sa #fencemgr, notify state for unsafe", "regionUUID":"%{private}s", "Clients":%{private}ld}
{"msg%{public}.0s":"#SAMonitoringSessionManager request to start scanning"}
{"msg%{public}.0s":"#SAMonitoringSessionManager request to stop scanning"}
{"msg%{public}.0s":"#SAMonitoringSessionManager bootstraped from persisted data", "uuid":"%{private}@", "state":"%{private}@", "scenario":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager enabling sa"}
{"msg%{public}.0s":"#SAMonitoringSessionManager disabling sa"}
{"msg%{public}.0s":"#SAMonitoringSessionManager createMonitoringDevice nil UUID"}
{"msg%{public}.0s":"#SAMonitoringSessionManager createMonitoringDevice while not enabled"}
{"msg%{public}.0s":"#SAMonitoringSessionManager createMonitoringDevice monitoring session already exists", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager createMonitoringDevice", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager cancelMonitoringDevice nil UUID"}
{"msg%{public}.0s":"#SAMonitoringSessionManager cancelMonitoringDevice monitoring session does not exist", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager canceled monitoring session", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager attemptToPopulateTrackedTravelingStartLocationForDevice not in one of the traveling states", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager attemptToPopulateTrackedTravelingStartLocationForDevice already set", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager attemptToPopulateTrackedTravelingStartLocationForDevice lastLocation is not recent enough, adding to set to be populated", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager changeMonitoringSessionState UUID doesn't map to monitoring session", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager changeMonitoringSessionState no state change necessary", "uuid":"%{private}@", "fromState":"%{private}@", "toState":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager changeMonitoringSessionState", "uuid":"%{private}@", "fromState":"%{private}@", "toState":"%{private}@"}
{"msg%{public}.0s":"#sa Service tried to notify with no corresponding device", "uuid":"%{private}@"}
{"msg%{public}.0s":"#sa notify separation", "uuid":"%{private}@", "name":"%{private}@", "type":%{private}ld}
{"msg%{public}.0s":"#SAMonitoringSessionManager travel exit while in standby"}
{"msg%{public}.0s":"#SAMonitoringSessionManager is only monitoring disconnected companion device, skipping force update all WithYouStatus"}
{"msg%{public}.0s":"#SAMonitoringSessionManager unable to set while traveling fence due to no last location", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager unable to set while traveling fence due to no session", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager unable to remove while traveling fence due to no session", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager standby notify"}
{"msg%{public}.0s":"#SAMonitoringSessionManager unable to notify while traveling due to no session", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager notifyWhileTraveling with nil location"}
{"msg%{public}.0s":"#SAMonitoringSessionManager unable to notify when left behind due to no session", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager notifyWhenLeftBehind without suggesting location"}
{"msg%{public}.0s":"#SAMonitoringSessionManager standby notify early"}
{"msg%{public}.0s":"#SAMonitoringSessionManager unable to notify early left behind due to no session", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager unable to create/recommend location", "uuid":"%{private}@", "context":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager new device", "uuid":"%{private}@", "name":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager remove device", "uuid":"%{private}@", "name":"%{private}@"}
#SAMonitoringSessionManager found removed location, for deviceId, %{private}@
#SAMonitoringSessionManager attempted adding non-existing location, for deviceId, %{private}@
{"msg%{public}.0s":"#SAMonitoringSessionManager update safe locations", "device":"%{private}@", "count":%{private}ld}
{"msg%{public}.0s":"#SAMonitoringSessionManager start location error", "location":"%{private}@", "device":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager start location device error", "device":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager start location", "location":"%{private}@", "device":"%{private}@", "refFrame":%{private}lu}
{"msg%{public}.0s":"#SAMonitoringSessionManager stop location error", "location":"%{private}@", "device":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager stop location device error", "device":"%{private}@"}
#SAMonitoringSessionManager stop location %{private}@ for device %{private}@
#SAMonitoringSessionManager found unpaired device, clearing deviceId, %{private}@
#SAMonitoringSessionManager found unpaired device in monitoring session record, clearing deviceId, %{private}@
{"msg%{public}.0s":"#SAMonitoringSessionManager no tracked traveling start date"}
{"msg%{public}.0s":"#SAMonitoringSessionManager shouldIssueBookendedNotificationBasedOnTimeForDevice", "min travel satisified":%{private}hhd, "min duration after persistence":%{private}hhd}
{"msg%{public}.0s":"#SAMonitoringSessionManager shouldIssueBookendedNotificationForDevice", "based on location":%{private}hhd, "based on time":%{private}hhd}
{"msg%{public}.0s":"#SAMonitoringSessionManager update devices", "count":%{private}ld}
{"msg%{public}.0s":"#SAMonitoringSessionManager update safe locations", "count":%{private}ld}
{"msg%{public}.0s":"#SAMonitoringSessionManager updateLocation update criteria not satisfied", "lastLocation":"%{private}@", "newLocation":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager updateLocation updated", "lastLocation":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager updateLocation populating tracked traveling start location", "device count":%{private}lu}
{"msg%{public}.0s":"#SAMonitoringSessionManager updateLocation populating tracked traveling start location", "device":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager handleGeofenceEvent invalid geofenceEvent", "geofence":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager handleGeofenceEvent received geofenceEvent", "geofence":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager handleGeofenceEvent geofenceEvent cannot be mapped to monitoring session", "geofence":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager handleGeofenceEvent ignored (recent crash?)", "geofence":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager removeDisableReason", "reason":%{private}lu}
{"msg%{public}.0s":"#SAMonitoringSessionManager addDisableReason", "reason":%{private}lu}
{"msg%{public}.0s":"#SAMonitoringSessionManager requesting terminable long aggressive scan on Airplane Mode toggle", "count of devices to find":%{private}ld}
{"msg%{public}.0s":"#SAMonitoringSessionManager didChangeScenarioClass", "sessionState":"%{private}@", "fromScenario":"%{private}@", "toScenario":"%{private}@", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager not requesting aggressive scan, entering safe location for device", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager requesting short aggressive scan, exiting safe location for device", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager requesting a terminable long aggressive scan to find tracked device when exiting unsafe location", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager requesting short aggressive scan, exiting unsafe location and device is not tracked", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager requesting a terminable long aggressive scan to find tracked device when ending traveling scenario", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager requesting short aggressive scan, ending traveling scenario and device is not tracked", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager removing currentVisitOrLOIEvent due to scenario change", "currentVisitOrLOIEvent":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager got unknown with-you status", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager got to be verified with-you status at the end of a force update", "uuid":"%{private}@", "status":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager updatedWithYouStatus", "sessionState":"%{private}@", "fromStatus":"%{private}@", "toStatus":"%{private}@", "scenario":"%{private}@", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager Unknown signal state", "sessionState":"%{private}@", "fromStatus":"%{private}@", "toStatus":"%{private}@", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager session already finished", "sessionState":"%{private}@", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager travel bookending into a safe location", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager issuing travel bookending notification into an unsafe location", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager not issuing travel bookending notification into an unsafe location", "uuid":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager received unexpected status in verification stage", "uuid":"%{private}@", "status":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager received unexpected status in left location stage", "uuid":"%{private}@", "status":"%{private}@"}
{"msg%{public}.0s":"#SAMonitoringSessionManager lost from unsafe to safe", "uuid":"%{private}@"}
{"msg%{public}.0s":"SAMonitoringSessionManager alarm fired while not standby, requesting a terminable long aggressive scan", "devices pending transition count":%{private}ld}
{"msg%{public}.0s":"SAMonitoringSessionManager alarm fired while standby, requesting short aggressive scan"}
{"msg%{public}.0s":"SAMonitoringSessionManager device found in monitoringSession list, but not in devices list"}
{"msg%{public}.0s":"#SAMonitoringSessionManager requesting terminable long aggressive scan on travel type change", "count of devices to find":%{private}ld}
{"msg%{public}.0s":"#sa #withyou at least one device not found yet", "uuid":"%{private}@"}
{"msg%{public}.0s":"#sa #withyou all devices found"}
{"msg%{public}.0s":"#sa #withyou at least one sa enabled device not found yet", "uuid":"%{private}@"}
{"msg%{public}.0s":"#sa #withyou all sa enabled devices found"}
{"msg%{public}.0s":"#sa #withyou skip requesting scan - leash-only"}
{"msg%{public}.0s":"#sa #withyou requesting scan to force update withyou status"}
{"msg%{public}.0s":"#sa #withyou force update to find devices", "device list":"%{private}@", "context":"%{private}s"}
{"msg%{public}.0s":"#sa #withyou devices to find", "devices to find":"%{private}@", "devices found":"%{private}@"}
{"msg%{public}.0s":"#sa #withyou some remaining devices to find, requesting long aggressive scan if not already ongoing"}
{"msg%{public}.0s":"#sa #withyou no more devices to find, recording time of last device found for metrics"}
{"msg%{public}.0s":"#sa #withyou some remaining sa enabled devices to find, requesting long aggressive scan if not already ongoing"}
{"msg%{public}.0s":"#sa #withyou no more sa enabled devices to find while long scan is ongoing, requesting to stop long aggressive scan"}
{"msg%{public}.0s":"#sa #withyou skip requesting short scan - leash-only"}
{"msg%{public}.0s":"#sa #withyou requesting short scan to force update withyou status"}
{"msg%{public}.0s":"#sa #withyou status updated connection state changed", "uuid":"%{private}@", "oldStatus":"%{private}@", "newStatus":"%{private}@"}
{"msg%{public}.0s":"#sa #withyou found new device", "uuid":"%{private}@"}
{"msg%{public}.0s":"#sa #withyou no more devices to find while long scan is ongoing, recording time of last device found for metrics"}
{"msg%{public}.0s":"#sa #withyou status updated observed advertisement", "uuid":"%{private}@", "oldStatus":"%{private}@", "newStatus":"%{private}@"}
{"msg%{public}.0s":"#sa #withyou detected a device with more than maximum allowable related beacons", "uuid":"%{private}@", "count":%{private}ld}
{"msg%{public}.0s":"#sa #withyou status updated observed advertisement from related device", "uuid":"%{private}@", "oldStatus":"%{private}@", "newStatus":"%{private}@"}
{"msg%{public}.0s":"#sa #withyou trying to get status bit of related device at out of bound index"}
{"msg%{public}.0s":"#sa #withyou status updated end of scan", "uuid":"%{private}@", "oldStatus":"%{private}@", "newStatus":"%{private}@"}
{"msg%{public}.0s":"#sa #withyou status updated on adv buffer empty event", "uuid":"%{private}@", "oldStatus":"%{private}@", "newStatus":"%{private}@"}
{"msg%{public}.0s":"#sa #withyou travel type change", "from":"%{private}@", "to":"%{private}@"}
#sa ServiceMgr received unknown device type, %{private}@
{"msg%{public}.0s":"#sa ServiceMgr FetchSafe", "uuid":"%{private}@", "name":"%{private}@", "lat":"%{private}f", "lon":"%{private}f", "radius":"%{public}f", "refFrame":%{private}lu}
#sa ServiceMgr endFetchSafe, %{public}d
{"msg%{public}.0s":"#sa ServiceMgr FetchSafeForBeacon", "device":"%{private}@", "uuid":"%{private}@", "name":"%{private}@", "lat":"%{private}f", "lon":"%{private}f", "radius":"%{public}f", "refFrame":%{private}lu}
{"msg%{public}.0s":"#sa ServiceMgr FetchAll", "name":"%{private}@", "device":"%{private}@", "type":"%{private}@", "safes":"%{private}@"}
#sa ServiceMgr endFetchBeaconsSafe, %{public}d
#sa ServiceMgr endFetchAll %{public}d, types, %{public}d
{"msg%{public}.0s":"#manager:visit not ingesting TAEvent as SA service is down"}
{"msg%{public}.0s":"#manager:visit no last visit to bootstrap onto"}
{"msg%{public}.0s":"#manager:visit got last visit", "visits":"%{private}@"}
{"msg%{public}.0s":"#sa #loi error fetching LOI", "visit":"%{private}@", "error":"%{public}@"}
{"msg%{public}.0s":"#sa #loi received nil in return when fetching LOI", "visit":"%{private}@", "loiIdentifier":"%{private}@"}
{"msg%{public}.0s":"#sa #loi received LOI", "loi":"%{private}@", "loiIdentifier":"%{private}@"}
#sa ServiceMgr enableMonitoringForSeparations: %{public}d
#sa ServiceMgr notifyAboutDevices:%{private}ld
#sa ServiceMgr requestBluetoothScan:%{private}#lx
#sa ServiceMgr requestLocationForType:%{private}#lx
#sa ServiceMgr addGeofence
#sa ServiceMgr removeGeofence
#sa ServiceMgr scheduleSATimeEvent:%{public}#lf
{"msg%{public}.0s":"#sa ServiceMgr cancelSATimeEventForAlarm", "uuid":"%{public}@"}
{"msg%{public}.0s":"#sa ServiceMgr startBackgroundScanning"}
{"msg%{public}.0s":"#sa ServiceMgr stopBackgroundScanning"}
{"msg%{public}.0s":"#sa ServiceMgr stopLongAggressiveScan"}
{"msg%{public}.0s":"#sa ServiceMgr fetchLastVisit"}
{"msg%{public}.0s":"#SATime alarm fired", "uuid":"%{private}@", "alarmDate":"%{private}@", "client":"%{private}@"}
{"msg%{public}.0s":"#SATime received event with future date", "Event":"%{private}@"}
{"msg%{public}.0s":"#SAPersistenceManager encountered error in creating directory", "error":"%{private}s"}
{"msg%{public}.0s":"#SAPersistenceManager file does not exist"}
{"msg%{public}.0s":"#SAPersistenceManager encountered error in loading file", "url":"%{private}s", "error":"%{private}s"}
{"msg%{public}.0s":"#SAPersistenceManager encountered error in unarchiving store", "url":"%{private}s", "error":"%{private}s"}
{"msg%{public}.0s":"#SAPersistenceManager no store to save"}
{"msg%{public}.0s":"#SAPersistenceManager saving to location", "path":"%{private}s"}
{"msg%{public}.0s":"#SAPersistenceManager error archiving store", "error":"%{private}s"}
{"msg%{public}.0s":"#SAPersistenceManager error reseting directory", "error":"%{private}s"}
{"msg%{public}.0s":"#SAScenarioClassifier notifyScenarioChange", "device":"%{private}@", "from":"%{private}s", "to":"%{private}s"}
{"msg%{public}.0s":"#SAScenarioClassifier setting current unsafe location from nil", "device":"%{private}@"}
{"msg%{public}.0s":"#SAScenarioClassifier forUnsafeLocation location", "device":"%{private}@"}
{"msg%{public}.0s":"#SAScenarioClassifier didDetermineState unsafe", "device":"%{private}@", "state":%{private}ld}
{"msg%{public}.0s":"#SAScenarioClassifier forUnsafeLocation unexpected", "device":"%{private}@"}
{"msg%{public}.0s":"#SAScenarioClassifier forUnsafeLocation in safe", "device":"%{private}@"}
{"msg%{public}.0s":"#SAScenarioClassifier forUnsafeLocation not supported", "device":"%{private}@"}
{"msg%{public}.0s":"#SAScenarioClassifier didDetermineState safe", "device":"%{private}@", "state":%{private}ld}
{"msg%{public}.0s":"#warning #SAScenarioClassifier forSafeLocation in unsafe", "device":"%{private}@"}
{"msg%{public}.0s":"#SAScenarioClassifier forSafeLocation not supported", "device":"%{private}@"}
{"msg%{public}.0s":"#warning #SAScenarioClassifier visit while in safe", "device":"%{private}@"}
{"msg%{public}.0s":"#warning #SAScenarioClassifier visit while in unsafe", "device":"%{private}@"}
{"msg%{public}.0s":"#warning #SAScenarioClassifier LOI while in safe", "device":"%{private}@"}
{"msg%{public}.0s":"#warning #SAScenarioClassifier LOI while in unsafe", "device":"%{private}@"}
{"msg%{public}.0s":"#SAScenarioClassifier addUnsafeLocation replacing already existing unsafe", "device":"%{private}@", "old":"%{private}@", "new":"%{private}@"}
{"msg%{public}.0s":"#SAScenarioClassifier addSafeLocation replacing", "device":"%{private}@", "location":"%{private}@"}
{"msg%{public}.0s":"#SAScenarioClassifier removeSafeLocation not in set", "device":"%{private}@", "location":"%{private}@"}
{"msg%{public}.0s":"Archiver error", "Error":"%{private}@", "String":"%{private}@"}
unarchive error: %@
{"msg%{public}.0s":"#sa related devices update for device", "uuid":"%{private}@", "groupID":"%{private}@", "related devices":"%{private}@"}
#sa Service enableMonitoringForSeparations: %{public}d
#sa Service notifyAboutDevices:%{private}lu
#sa Service requestBluetoothScan:%{private}#lx
#sa Service requestLocationForType:%{private}#lx
#sa Service addGeofence
#sa Service removeGeofence
#sa Service scheduleSATimeEvent:%{public}#lf
{"msg%{public}.0s":"#sa Service cancelSATimeEventForAlarm", "uuid":"%{public}@"}
{"msg%{public}.0s":"#sa Service startBackgroundScanning"}
{"msg%{public}.0s":"#sa Service stopBackgroundScanning"}
{"msg%{public}.0s":"#sa Service stopLongAggressiveScan"}
{"msg%{public}.0s":"#sa Service fetchLastVisit"}
{"msg%{public}.0s":"Ingesting event", "Event":"%{private}@"}
SAConnectionEvent
OSLogCoding
TAEventProtocol
NSObject
NSSecureCoding
NSCoding
NSCopying
SATimeEvent
SAGeofenceEvent
SASingleDeviceRecord
SADevice
SAPersistenceStore
SASafeLocation
SASafeLocationUpdateEvent
SASafeLocationsEvent
SAReplay
OSLogPersistenceDelegate
OSActivityStreamDelegate
OSDeviceDelegate
SATravelTypeClassifier
SATravelTypeClassifierServiceProtocol
SAFenceManager
SAFenceManagerServiceProtocol
SAFenceManagerRequestProtocol
SADeviceUpdateEvent
SADevicesWithSafeLocationsEvent
SAPowerLog
SAPowerLogServiceProtocol
SAMonitoringSession
SAMonitoringSessionManager
SAMonitoringSessionManagerServiceProtocol
SAScenarioClassifierClientProtocol
SAWithYouDetectorClientProtocol
SATimeClientProtocol
SATravelTypeClassifierClientProtocol
SAWithYouDetector
SAWithYouDetectorServiceProtocol
TADateFormat
SAServiceManager
SAServiceServiceProtocol
SAServiceClientProtocol
SAAlarmTask
SATime
SATimeServiceProtocol
SAPersistenceManagerSettings
SAPersistenceManager
NSString
SAScenarioClassifier
SAScenarioClassifierServiceProtocol
SAFenceManagerClientProtocol
SALoggingUtilities
SADeviceRecord
SAService
SAMonitoringSessionManagerClientProtocol
SABluetoothScanRequestProtocol
SALocationRequestProtocol
SAPowerLogClientProtocol
SAGeoFenceRequestProtocol
SATimeEventRequestProtocol
SAAnalyticsSettings
SAAnalytics
SAAnalyticsServiceProtocol
writeToURL:options:error:
UUID
UUIDString
absoluteString
activityType
addObject:
addObjectsFromArray:
allKeys
allObjects
allValues
allocWithZone:
andPredicateWithSubpredicates:
appendBytes:length:
appendString:
approvalState
archivedDataWithRootObject:requiringSecureCoding:error:
arrayWithObjects:count:
arrivalDate
base64EncodedStringWithOptions:
bytes
center
closeFile
compare:
containsCoordinate:
containsObject:
coordinate
copy
count
countByEnumeratingWithState:objects:count:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
currentCalendar
currentLocale
dataUsingEncoding:
dataWithBytes:length:
dataWithContentsOfURL:options:error:
dataWithHexString:
dataWithJSONObject:options:error:
dateByAddingTimeInterval:
dateWithTimeInterval:sinceDate:
decodeBoolForKey:
decodeDoubleForKey:
decodeIntegerForKey:
decodeObjectForKey:
decodeObjectOfClass:forKey:
decodeObjectOfClasses:forKey:
defaultManager
departureDate
descriptionWithLocale:
dictionaryWithObjects:forKeys:count:
distanceFromLocation:
distantPast
earlierDate:
encodeBool:forKey:
encodeDouble:forKey:
encodeInteger:forKey:
encodeObject:forKey:
entry
errorWithDomain:code:userInfo:
eventMessage
exit
fetchFromStartDate:toEndDate:
fetchLocationOfInterestWithIdentifier:withHandler:
fetchStoredVisitsWithOptions:handler:
fileExistsAtPath:
fileHandleForWritingToURL:error:
fileURLWithPath:isDirectory:
fileURLWithPath:relativeToURL:
firstObject
geoReferenceFrame
getBytes:length:
getType
getUUIDBytes:
hasArrivalDate
hasDepartureDate
hasPrefix:
hashTableWithOptions:
horizontalAccuracy
horizontalUncertainty
initForLowPowerWithCenter:radius:identifier:
initWithAscending:confidence:dateInterval:labelVisit:limit:
initWithBase64EncodedString:options:
initWithCenter:radius:identifier:
initWithCoordinate:altitude:horizontalAccuracy:verticalAccuracy:timestamp:
initWithCoordinate:horizontalAccuracy:arrivalDate:departureDate:detectionDate:confidence:
initWithData:encoding:
initWithFormat:
initWithLatitude:longitude:
initWithObjects:
initWithState:date:
initWithTimeInterval:sinceDate:
initWithTimeIntervalSinceNow:
initWithType:latitude:longitude:horizontalAccuracy:referenceFrame:date:
initWithUUIDBytes:
initWithUUIDString:
integerValue
isEqualToSet:
isEqualToString:
isOn
isValidJSONObject:
lastObject
laterDate:
length
localTimeZone
localizedStringForKey:value:table:
location
loiIdentifier
mainBundle
minusSet:
nextDateAfterDate:matchingHour:minute:second:options:
numberWithBool:
numberWithDouble:
numberWithInteger:
numberWithUnsignedInteger:
objectAtIndexedSubscript:
objectForKey:
objectForKeyedSubscript:
path
placeInference
predicateWithFormat:
processIdentifier
processInfo
removeAllObjects
removeItemAtURL:error:
removeObject:
removeObjectForKey:
removeObjectsForKeys:
scanDate
seekToEndOfFile
setByAddingObjectsFromSet:
setDeviceDelegate:
setFormatOptions:
setGeoReferenceFrame:
setLogArchive:
setObject:forKey:
setObject:forKeyedSubscript:
setOptions:
setPredicate:
setReferenceFrame:
setTimeZone:
setWithArray:
setWithObjects:
setWithSet:
sleepForTimeInterval:
start
startOfDayForDate:
status
stop
string
stringByAppendingString:
stringByReplacingOccurrencesOfString:withString:
stringFromDate:
stringWithFormat:
substringFromIndex:
substringWithRange:
systemStateType
timeIntervalSinceDate:
type
unarchivedObjectOfClass:fromData:error:
unarchivedObjectOfClasses:fromData:error:
unsignedIntegerValue
vehicularHints
vehicularState
writeData:
UTF8String
init
supportsSecureCoding
encodeWithOSLogCoder:options:maxLength:
isEqual:
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
isMemberOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
hash
superclass
description
debugDescription
TQ,R
T#,R
T@"NSString",R,C
encodeWithCoder:
initWithCoder:
TB,R
copyWithZone:
getDate
descriptionDictionary
getEventSubtype
initWithDeviceUUID:state:date:
identifier
state
date
.cxx_destruct
_identifier
_state
_date
T@"NSUUID",R,C,N,V_identifier
Tq,R,N,V_state
T@"NSDate",R,C,N,V_date
initWithDate:
initWithRegion:eventType:eventDate:
eventType
region
eventDate
_eventType
_region
_eventDate
T@"CLRegion",R,C,N,V_region
TQ,R,N,V_eventType
T@"NSDate",R,C,N,V_eventDate
initWithDevice:clock:analytics:
initWithConnectionEvent:clock:analytics:
updateLatestAdvertisement:
updateLastWithYouDate:
updateWithYouStatus:
updateFirstAdvertisementAfterScenarioTransition:
updateCurrentScenarioClass:
publishAnalyticsForFirstAdv:scenario:
resetRelatedDevices
insertRelatedDevice:
isConnected
uuid
device
setDevice:
withYouStatus
setWithYouStatus:
connectionState
setConnectionState:
notificationState
setNotificationState:
latestAdvertisement
latestNOAdvertisement
latestWildAdvertisement
lastWithYouDate
currentScenarioClass
currentMonitoringSessionState
setCurrentMonitoringSessionState:
monitoringSessionStateAtTimeOfFirstAdv
uuidsOfRelatedDevices
setUuidsOfRelatedDevices:
hasSurfacedNotification
setHasSurfacedNotification:
firstAdvertisementAfterScenarioTransition
currentScenarioTime
analytics
setAnalytics:
clock
setClock:
_hasSurfacedNotification
_uuid
_device
_withYouStatus
_connectionState
_notificationState
_latestAdvertisement
_latestNOAdvertisement
_latestWildAdvertisement
_lastWithYouDate
_currentScenarioClass
_currentMonitoringSessionState
_monitoringSessionStateAtTimeOfFirstAdv
_uuidsOfRelatedDevices
_firstAdvertisementAfterScenarioTransition
_currentScenarioTime
_analytics
_clock
T@"NSUUID",R,N,V_uuid
T@"SADevice",&,N,V_device
TQ,N,V_withYouStatus
Tq,N,V_connectionState
TQ,N,V_notificationState
T@"TASPAdvertisement",R,N,V_latestAdvertisement
T@"TASPAdvertisement",R,N,V_latestNOAdvertisement
T@"TASPAdvertisement",R,N,V_latestWildAdvertisement
T@"NSDate",R,N,V_lastWithYouDate
TQ,R,N,V_currentScenarioClass
TQ,N,V_currentMonitoringSessionState
TQ,R,N,V_monitoringSessionStateAtTimeOfFirstAdv
T@"NSMutableArray",&,N,V_uuidsOfRelatedDevices
TB,N,V_hasSurfacedNotification
T@"NSDate",R,N,V_firstAdvertisementAfterScenarioTransition
T@"NSDate",R,N,V_currentScenarioTime
T@"<SAAnalyticsServiceProtocol>",&,N,V_analytics
T@"<SATimeServiceProtocol>",&,N,V_clock
initWithDeviceUUID:name:model:systemVersion:vendorId:productId:deviceType:notifyEnabled:date:
initWithDeviceUUID:groupIdentifier:name:model:systemVersion:vendorId:productId:deviceType:notifyEnabled:date:
initWithDeviceUUID:groupIdentifier:partIdentifier:name:model:systemVersion:vendorId:productId:deviceType:notifyEnabled:date:
isReallyEqual:
groupIdentifier
partIdentifier
name
model
systemVersion
vendorId
productId
deviceType
notifyEnabled
_notifyEnabled
_groupIdentifier
_partIdentifier
_name
_model
_systemVersion
_vendorId
_productId
_deviceType
T@"NSUUID",R,C,N,V_groupIdentifier
Tq,R,N,V_partIdentifier
T@"NSString",R,C,N,V_name
T@"NSString",R,C,N,V_model
T@"NSString",R,C,N,V_systemVersion
Tq,R,N,V_vendorId
Tq,R,N,V_productId
TQ,R,N,V_deviceType
TB,R,N,V_notifyEnabled
monitoringSessionRecord
setMonitoringSessionRecord:
_monitoringSessionRecord
T@"NSMutableDictionary",&,N,V_monitoringSessionRecord
initWithLocationUUID:latitude:longitude:radius:referenceFrame:name:date:
latitude
longitude
radius
referenceFrame
_latitude
_longitude
_radius
_referenceFrame
Td,R,N,V_latitude
Td,R,N,V_longitude
Td,R,N,V_radius
TQ,R,N,V_referenceFrame
initWithSafeLocation:eventType:lastEvent:date:
safeLocation
lastEvent
_lastEvent
_safeLocation
T@"SASafeLocation",R,C,N,V_safeLocation
TB,R,N,V_lastEvent
initWithSafeLocations:date:
safeLocations
_safeLocations
T@"NSDictionary",R,C,N,V_safeLocations
persistence:results:error:
persistenceDidFinishReadingForStartDate:endDate:
activityStream:results:
streamDidStart:
streamDidFail:error:
streamDidStop:
activityStream:results:error:
activityStream:deviceUDID:deviceID:status:error:
initWithLogArchive:outputPath:inputPersistencePath:
replayWithStartDate:endDate:
replaySingleEventLogString:
eventMessages
setEventMessages:
eventOrder
setEventOrder:
_service
_persistence
_stream
_persistenceWait
_streamWait
_outputPath
_inputPersistencePath
_eventMessages
_eventOrder
T@"NSMutableDictionary",&,N,V_eventMessages
T@"NSMutableArray",&,N,V_eventOrder
convertSATravelTypeToString:
addClient:
removeClient:
ingestTAEvent:
initWithClock:
travelType
_vehicularHintsToString:
_setNewTravelType:hints:
_handleVehicleStateEvent:
_handleUserActivityEvent:
_notifyAllClientsOfTravelTypeChangeFrom:to:hints:
clients
setClients:
currentTravelType
setCurrentTravelType:
currentTravelTypeChangeDate
setCurrentTravelTypeChangeDate:
_clients
_currentTravelType
_currentTravelTypeChangeDate
T@"NSHashTable",&,N,V_clients
TQ,N,V_currentTravelType
T@"NSDate",C,N,V_currentTravelTypeChangeDate
TQ,R,N
didDetermineState:forSafeLocation:forDevice:
addGeofence:
removeGeofence:
didDetermineState:forUnsafeLocation:forDevice:
isLowPower
startMonitorUnsafeLocationExit:forDevice:
stopMonitorUnsafeLocationExit:forDevice:
startMonitorSafeLocation:forDevice:
stopMonitorSafeLocation:forDevice:
getSafeLocationCount
getUnsafeLocationCount
getRegionForSafeLocation:
removeLocationsForDeviceUuid:
handleFenceEvent:forRegion:
isSafeLocation:
notifyState:forSafeLocationRegion:
notifyState:forUnsafeLocationRegion:
deviceUUIDsByUnsafeRegionIdentifier
setDeviceUUIDsByUnsafeRegionIdentifier:
deviceUUIDsBySafeLocation
setDeviceUUIDsBySafeLocation:
safeLocationsByRegionIdentifier
setSafeLocationsByRegionIdentifier:
statesByRegionIdentifier
setStatesByRegionIdentifier:
regionsByRegionIdentifier
setRegionsByRegionIdentifier:
_deviceUUIDsByUnsafeRegionIdentifier
_deviceUUIDsBySafeLocation
_safeLocationsByRegionIdentifier
_statesByRegionIdentifier
_regionsByRegionIdentifier
T@"NSMutableDictionary",&,N,V_deviceUUIDsByUnsafeRegionIdentifier
T@"NSMutableDictionary",&,V_deviceUUIDsBySafeLocation
T@"NSMutableDictionary",&,N,V_safeLocationsByRegionIdentifier
T@"NSMutableDictionary",&,N,V_statesByRegionIdentifier
T@"NSMutableDictionary",&,N,V_regionsByRegionIdentifier
initWithDevice:eventType:lastEvent:date:
T@"SADevice",R,C,N,V_device
initWithDevices:safeLocationUUIDs:date:
devices
_devices
T@"NSDictionary",R,C,N,V_devices
increaseBTScanCount
increaseGeofenceCount
increaseGpsLocationRequestCount
increaseWifiLocationRequestCount
increaseSeparationAlertsCount:
addMonitoredDevice:
resetStatistics
sendPowerLog
startTimestamp
setStartTimestamp:
visitCount
setVisitCount:
totalVisitDuration
setTotalVisitDuration:
btScanCount
setBtScanCount:
geofenceCount
setGeofenceCount:
gpsLocationRequestCount
setGpsLocationRequestCount:
wifiLocationRequestCount
setWifiLocationRequestCount:
separationAlertsCount
setSeparationAlertsCount:
monitoredDevices
setMonitoredDevices:
_startTimestamp
_visitCount
_totalVisitDuration
_btScanCount
_geofenceCount
_gpsLocationRequestCount
_wifiLocationRequestCount
_separationAlertsCount
_monitoredDevices
T@"NSDate",&,N,V_startTimestamp
TQ,N,V_visitCount
Td,N,V_totalVisitDuration
TQ,N,V_btScanCount
TQ,N,V_geofenceCount
TQ,N,V_gpsLocationRequestCount
TQ,N,V_wifiLocationRequestCount
TQ,N,V_separationAlertsCount
T@"NSMutableSet",&,N,V_monitoredDevices
initWithDeviceUUID:state:geofence:scenario:trackedTravelingStartDate:
deviceUUID
setDeviceUUID:
geofence
setGeofence:
setState:
scenario
setScenario:
trackedTravelingStartDate
setTrackedTravelingStartDate:
travelingGeofenceExitDate
setTravelingGeofenceExitDate:
earlyVehicularStateChangeDate
setEarlyVehicularStateChangeDate:
trackedTravelingStartLocation
setTrackedTravelingStartLocation:
scenarioClassifier
setScenarioClassifier:
earlyVehicularTrigger
setEarlyVehicularTrigger:
earlyAirplaneTrigger
setEarlyAirplaneTrigger:
caLastStateTransition
setCaLastStateTransition:
caSeparationLocation
setCaSeparationLocation:
_earlyVehicularTrigger
_earlyAirplaneTrigger
_deviceUUID
_geofence
_scenario
_trackedTravelingStartDate
_travelingGeofenceExitDate
_earlyVehicularStateChangeDate
_trackedTravelingStartLocation
_scenarioClassifier
_caLastStateTransition
_caSeparationLocation
T@"NSUUID",&,N,V_deviceUUID
T@"CLCircularRegion",&,N,V_geofence
TQ,N,V_state
TQ,N,V_scenario
T@"NSDate",&,N,V_trackedTravelingStartDate
T@"NSDate",&,N,V_travelingGeofenceExitDate
T@"NSDate",&,N,V_earlyVehicularStateChangeDate
T@"TALocationLite",&,N,V_trackedTravelingStartLocation
T@"SAScenarioClassifier",&,N,V_scenarioClassifier
TB,N,V_earlyVehicularTrigger
TB,N,V_earlyAirplaneTrigger
T@"NSDate",&,N,V_caLastStateTransition
T@"CLLocation",&,N,V_caSeparationLocation
startBackgroundScanning
stopBackgroundScanning
fetchLastVisit
updatedMonitoringState:forDeviceUUID:
notifySeparationsForDevices:withLocation:withContext:
convertSAMonitoringSessionStateToString:
stateForDeviceUUID:
earlyVehicularTriggerForDeviceUUID:
scenarioClassForDeviceUUID:
didChangeScenarioClassFrom:to:forDevice:
updatedWithYouStatusFrom:to:forDeviceWithUUID:
didForceUpdateWithYouStatus
alarmFiredForUUID:
didChangeTravelTypeFrom:to:hints:
initWithWithYouDetector:fenceRequestServicer:fenceManager:travelTypeClassifier:clock:deviceRecord:analytics:persistenceManager:
requestToStartBackgroundScanning
requestToStopBackgroundScanning
requestToFetchLastVisit
configureBackgroundScanning
bootstrapMonitoringSessionRecord:
setEnabled:
setStandby:
forceStandbyMode:
allDevicesInSafeLocation
anyDeviceInUnsafeLocation
createMonitoringDevice:
cancelMonitoringDevice:
attemptToPopulateTrackedTravelingStartLocationForDevice:
changeMonitoringSessionState:toState:
determineTrackedTravelingCount
needPeriodicScan
stopPeriodicScans
stopPeriodicScansIfNotNeeded
startPeriodicScans
startPeriodicScansIfNeeded
convertSADeviceTypeForCoreAnalytics:
handleSeparationForDeviceUUID:withSafeLocationRecommendation:context:
handleGeofenceExitedForDeviceUUID:
_isOnlyMonitoringDisconnectedCompanionDevice
addTravelFenceForDevice:
removeTravelFenceForDevice:
storeSeparationLocation:
notifyWhileTraveling:isBookendingTravel:
notifyWhenLeftBehind:
notifyLeftBehind:withRegion:isEarlyVehicularTrigger:
notifyEarlyLeftBehind:
createLocationFromCircularRegion:forDevice:withContext:
addDevice:isLastDeviceEvent:
modifyDevice:
removeDeviceWithUUID:isLastDeviceEvent:
handleNewSafeLocation:
handleModifiedSafeLocation:
handleRemovedSafeLocation:
setSafeLocations:forDeviceUUID:
addSafeLocation:forDeviceUUID:
removeSafeLocation:forDeviceUUID:
removeAndStopSafeLocationsForDeviceUUID:
startSafeLocation:forDevice:
stopSafeLocation:forDevice:
handleModifiedSafeLocation:forDeviceUUID:
removeDevicesIfNeededPerEvent:
addDevicesIfNeededPerEvent:
addSafeLocationsIfNeededPerNewSet:forDevice:
removeSafeLocationsIfNeededPerNewSet:forDevice:
isWithinCurrentVisitOrLOI:
shouldIssueBookendedNotificationBasedOnLocationForDevice:
shouldIssueBookendedNotificationBasedOnTimeForDevice:
shouldIssueBookendedNotificationForDevice:
updateDevicesWithSafeLocations:
computeRemovedSafeLocations:
updateSafeLocations:
updateLocation:
handleGeofenceEvent:
removeDisableReason:
addDisableReason:
handleSystemStateChanged:
isAnyInTrackedInUnsafeLocation
isAnyTrackedWhileTraveling
checkReunion:to:forDeviceWithUUID:
deviceShouldTransitionWithLastScenarioChangeDate:lastWithYouDate:
getLastScenarioChangeDateAmongAllDevices
scheduleNextForceUpdateWithYouStatusFromReferenceDate:
enoughTimeHasPassedBeforeSurfacingAlert:forAlertForDevice:
minimumTimeSinceScenarioTransitionForAlertForDevice:
enabled
standby
withYouDetector
setWithYouDetector:
fenceRequestServicer
setFenceRequestServicer:
fenceManager
setFenceManager:
deviceUUIDtoMonitoringSession
setDeviceUUIDtoMonitoringSession:
lastLocation
setLastLocation:
deviceRecord
setDeviceRecord:
travelTypeClassifier
setTravelTypeClassifier:
setDevices:
setSafeLocations:
deviceUUIDtoSafeLocationUUIDs
setDeviceUUIDtoSafeLocationUUIDs:
requestedPeriodicScan
setRequestedPeriodicScan:
disabledReasons
setDisabledReasons:
caLastAlertDate
setCaLastAlertDate:
caBroughtOutOnTravel
setCaBroughtOutOnTravel:
deviceUUIDtoAlertContext
setDeviceUUIDtoAlertContext:
caCurrentVehicularState
setCaCurrentVehicularState:
caIsVehicularBTHintOn
setCaIsVehicularBTHintOn:
persistenceManager
setPersistenceManager:
nextScheduledAlarmForPersistenceWrite
setNextScheduledAlarmForPersistenceWrite:
scheduledAlarmForForceUpdateWithYouStatus
setScheduledAlarmForForceUpdateWithYouStatus:
currentVisitOrLOIEvent
setCurrentVisitOrLOIEvent:
previousVisitOrLOIEvent
setPreviousVisitOrLOIEvent:
timeOfAttemptToLoadFromPersistence
setTimeOfAttemptToLoadFromPersistence:
isCompanionConnected
setIsCompanionConnected:
devicesWithToBePopulatedTrackedTravelingStartLocation
setDevicesWithToBePopulatedTrackedTravelingStartLocation:
devicesWithPendingTransition
setDevicesWithPendingTransition:
_enabled
_standby
_requestedPeriodicScan
_caIsVehicularBTHintOn
_isCompanionConnected
_withYouDetector
_fenceRequestServicer
_fenceManager
_deviceUUIDtoMonitoringSession
_lastLocation
_deviceRecord
_travelTypeClassifier
_deviceUUIDtoSafeLocationUUIDs
_disabledReasons
_caLastAlertDate
_caBroughtOutOnTravel
_deviceUUIDtoAlertContext
_caCurrentVehicularState
_persistenceManager
_nextScheduledAlarmForPersistenceWrite
_scheduledAlarmForForceUpdateWithYouStatus
_currentVisitOrLOIEvent
_previousVisitOrLOIEvent
_timeOfAttemptToLoadFromPersistence
_devicesWithToBePopulatedTrackedTravelingStartLocation
_devicesWithPendingTransition
T@"<SAWithYouDetectorServiceProtocol>",&,N,V_withYouDetector
T@"<SAGeoFenceRequestProtocol>",&,N,V_fenceRequestServicer
T@"<SAFenceManagerServiceProtocol><SAFenceManagerRequestProtocol>",&,N,V_fenceManager
T@"NSMutableDictionary",&,N,V_deviceUUIDtoMonitoringSession
T@"TALocationLite",&,N,V_lastLocation
T@"SADeviceRecord",&,N,V_deviceRecord
T@"<SATravelTypeClassifierServiceProtocol>",&,N,V_travelTypeClassifier
T@"NSMutableDictionary",&,N,V_devices
T@"NSMutableDictionary",&,N,V_safeLocations
T@"NSMutableDictionary",&,N,V_deviceUUIDtoSafeLocationUUIDs
TB,N,V_requestedPeriodicScan
TQ,N,V_disabledReasons
T@"NSDate",&,N,V_caLastAlertDate
Tq,N,V_caBroughtOutOnTravel
T@"NSMutableDictionary",&,N,V_deviceUUIDtoAlertContext
TQ,N,V_caCurrentVehicularState
TB,N,V_caIsVehicularBTHintOn
T@"SAPersistenceManager",&,N,V_persistenceManager
T@"NSUUID",&,N,V_nextScheduledAlarmForPersistenceWrite
T@"NSUUID",&,N,V_scheduledAlarmForForceUpdateWithYouStatus
T@"<TAEventProtocol>",&,N,V_currentVisitOrLOIEvent
T@"<TAEventProtocol>",&,N,V_previousVisitOrLOIEvent
T@"NSDate",&,N,V_timeOfAttemptToLoadFromPersistence
TB,N,V_isCompanionConnected
T@"NSMutableSet",&,N,V_devicesWithToBePopulatedTrackedTravelingStartLocation
T@"NSMutableSet",&,N,V_devicesWithPendingTransition
TB,N,V_enabled
TB,N,V_standby
convertSAWithYouStatusToString:
convertSAWithYouLongScanContextToString:
forceUpdateWithYouStatus
forceUpdateWithYouStatusToFindDevices:withContext:
forceUpdateWithYouStatusWithShortScan:
resetAllWithYouStatusAndScanStates
statusForDeviceWithUUID:
resumePeriodicScan
pausePeriodicScan
initWithBluetoothScanner:locationRequester:deviceRecord:clock:analytics:
sendScanContextToCoreAnalytics:isPartOfLongScan:scanDuration:relevantOnlyScanDuration:foundExtraHELECount:extraHELEScanDuration:foundExtraNonHELECount:extraNonHELEScanDuration:longScanContext:
allRelevantDevicesToFindAreFound
allSAEnabledDevicesAreFound
_isOnlyMonitoringLeashOnlyDevices
isPeriodicScansAllowed
_notifyAllClientsOfWithYouStatusUpdate:forDeviceWithUUID:
_updateWithYouStatusIfNecessaryOnConnectionEvent:
_maxAgeOfWithYouAdvertisementForDeviceType:
_isRecentEnoughAdvertisement:forCurrentDate:
isExtraDeviceFound:onDate:
updateExtraDeviceInformation:
_deviceWithUUID:isWithYouDuringLongScanOnAdvertisement:
_updateWithYouStatusIfNecessaryOnAdvertisement:
_updateWithYouStatusOfRelatedDevices:
_isValidPartID:
_isStatusBitSetForRelatedDeviceWithShiftIndex:fromAdvertisement:
_finalizeToBeVerifiedStatus:
_enoughTimeHasPassedSinceInitializationToMarkNotWithYouForDeviceType:
_updateAllWithYouStatusOnScanEndedEvent:
_updateWithYouStatusOnAdvBufferEmptyEvent:
_scheduleNextAlarmForScanAfterDate:
requestScanIfNeeded
_deviceIsWatch:
bluetoothScanner
setBluetoothScanner:
locationRequester
setLocationRequester:
longScanIsOngoing
setLongScanIsOngoing:
requestedShortScan
setRequestedShortScan:
lastLongScanRequest
setLastLongScanRequest:
lastStartOfScan
setLastStartOfScan:
lastEndOfScan
setLastEndOfScan:
isNotifyWhileTravelingEnabled
setIsNotifyWhileTravelingEnabled:
isPeriodicScansNeeded
setIsPeriodicScansNeeded:
isInVehicularTravel
setIsInVehicularTravel:
nextOpportunisticScanDate
setNextOpportunisticScanDate:
nextScheduledAlarm
setNextScheduledAlarm:
previousBufferEmptyTime
setPreviousBufferEmptyTime:
initializationTime
setInitializationTime:
relevantDevicesToFindDuringLongScan
setRelevantDevicesToFindDuringLongScan:
foundDevicesDuringCurrentScan
setFoundDevicesDuringCurrentScan:
isFindingRelevantDevices
setIsFindingRelevantDevices:
lastRelevantDeviceFoundTime
setLastRelevantDeviceFoundTime:
lastLongScanContext
setLastLongScanContext:
extraFoundHELECount
setExtraFoundHELECount:
extraFoundNonHELECount
setExtraFoundNonHELECount:
lastExtraHELEFoundTime
setLastExtraHELEFoundTime:
lastExtraNonHELEFoundTime
setLastExtraNonHELEFoundTime:
_longScanIsOngoing
_requestedShortScan
_isNotifyWhileTravelingEnabled
_isPeriodicScansNeeded
_isInVehicularTravel
_isFindingRelevantDevices
_bluetoothScanner
_locationRequester
_lastLongScanRequest
_lastStartOfScan
_lastEndOfScan
_nextOpportunisticScanDate
_nextScheduledAlarm
_previousBufferEmptyTime
_initializationTime
_relevantDevicesToFindDuringLongScan
_foundDevicesDuringCurrentScan
_lastRelevantDeviceFoundTime
_lastLongScanContext
_extraFoundHELECount
_extraFoundNonHELECount
_lastExtraHELEFoundTime
_lastExtraNonHELEFoundTime
T@"<SABluetoothScanRequestProtocol>",W,N,V_bluetoothScanner
T@"<SALocationRequestProtocol>",W,N,V_locationRequester
TB,N,V_longScanIsOngoing
TB,N,V_requestedShortScan
T@"NSDate",&,N,V_lastLongScanRequest
T@"NSDate",&,N,V_lastStartOfScan
T@"NSDate",&,N,V_lastEndOfScan
TB,N,V_isNotifyWhileTravelingEnabled
TB,N,V_isPeriodicScansNeeded
TB,N,V_isInVehicularTravel
T@"NSDate",&,N,V_nextOpportunisticScanDate
T@"NSUUID",&,N,V_nextScheduledAlarm
T@"NSDate",&,N,V_previousBufferEmptyTime
T@"NSDate",&,N,V_initializationTime
T@"NSMutableSet",&,N,V_relevantDevicesToFindDuringLongScan
T@"NSMutableDictionary",&,N,V_foundDevicesDuringCurrentScan
TB,N,V_isFindingRelevantDevices
T@"NSDate",&,N,V_lastRelevantDeviceFoundTime
TQ,N,V_lastLongScanContext
TQ,N,V_extraFoundHELECount
TQ,N,V_extraFoundNonHELECount
T@"NSDate",&,N,V_lastExtraHELEFoundTime
T@"NSDate",&,N,V_lastExtraNonHELEFoundTime
getDateString
getNextDateAtHour:
getMinutesSinceStartOfDay
separationMonitoringSession
startRefreshingSafeLocationWithBlock:
startRefreshingBeaconsForSeparationMonitoringWithBlock:
dealloc
separationAlertsServiceManager:enableMonitoringForSeparations:
separationAlertsServiceManager:notifySeparationsForDevices:withLocation:withContext:
separationAlertsServiceManager:requestBluetoothScanForTypes:
separationAlertsServiceManager:requestLocationForType:
separationAlertsServiceManager:addGeofence:
separationAlertsServiceManager:removeGeofence:
separationAlertsServiceManager:scheduleSATimeEvent:forAlarm:
separationAlertsServiceManager:cancelSATimeEventForAlarm:
separationAlertsServiceManagerStartBackgroundScanning:
separationAlertsServiceManagerStopBackgroundScanning:
separationAlertsServiceManagerStopLongAggressiveScan:
convertBeaconToDeviceType:
convertCLReferenceFrameToSAReferenceFrame:
separationAlertsService:enableMonitoringForSeparations:
separationAlertsService:notifySeparationsForDevices:withLocation:withContext:
separationAlertsService:requestBluetoothScanForTypes:
separationAlertsService:requestLocationForType:
separationAlertsService:addGeofence:
separationAlertsService:removeGeofence:
separationAlertsService:scheduleSATimeEvent:forAlarm:
separationAlertsService:cancelSATimeEventForAlarm:
separationAlertsServiceStartBackgroundScanning:
separationAlertsServiceStopBackgroundScanning:
separationAlertsServiceStopLongAggressiveScan:
separationAlertsServiceFetchLastVisit:
initWithQueue:
didFetchAllSafeLocations:
didFetchAllDevices:
_ingestVisit:
_fetchAndIngestLastVisit
queue
setQueue:
service
setService:
nextAnalyticsSubmission
setNextAnalyticsSubmission:
routineManager
setRoutineManager:
hasAttemptedToIngestLastVisitAtStartup
setHasAttemptedToIngestLastVisitAtStartup:
_beaconManager
_ownerSession
_separationMonitoringSession
_hasAttemptedToIngestLastVisitAtStartup
_queue
_nextAnalyticsSubmission
_routineManager
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
T@"SAService",&,N,V_service
T@"SAAnalytics",&,N,V_analytics
T@"NSDate",&,N,V_nextAnalyticsSubmission
T@"RTRoutineManager",&,N,V_routineManager
TB,N,V_hasAttemptedToIngestLastVisitAtStartup
alarmUUID
setAlarmUUID:
fireDate
setFireDate:
client
setClient:
_alarmUUID
_fireDate
_client
T@"NSUUID",C,N,V_alarmUUID
T@"NSDate",C,N,V_fireDate
T@"<SATimeClientProtocol>",W,N,V_client
setupAlarmFireAt:forClient:
cancelAlarmWithUUID:
getCurrentTime
T@"NSDate",R,N
initWithExternalTimer:isReplay:
alarmCount
earliestAlarm
addAlarm:
popAlarm
alarmFired:
fireAlarmsIfReady
advanceTimeWithEvent:
getEarliestAlarmDate
ongoingAlarms
setOngoingAlarms:
alarmQueue
setAlarmQueue:
externalTimer
setExternalTimer:
isReplay
setIsReplay:
_isReplay
_now
_ongoingAlarms
_alarmQueue
_externalTimer
T@"NSMutableSet",&,N,V_ongoingAlarms
T^v,N,V_alarmQueue
T@"<SATimeEventRequestProtocol>",W,N,V_externalTimer
TB,N,V_isReplay
T@"NSDate",R,N,V_now
initWithDirectoryURLOrDefault:storeFileNameOrDefault:
_getStoreURL
persistenceDirectoryURL
setPersistenceDirectoryURL:
persistenceStoreFileName
setPersistenceStoreFileName:
_persistenceDirectoryURL
_persistenceStoreFileName
T@"NSURL",&,N,V_persistenceDirectoryURL
T@"NSString",&,N,V_persistenceStoreFileName
didWriteToURL:bytes:
didReadFromURL:bytes:
initWithSettings:
_createDirectoryIfNotPresent
addObserver:
removeObserver:
_notifyObserversOnWriteToURL:bytes:
_notifyObserversOnReadFromURL:bytes:
load
save
reset
onUpdatedMonitoringSessionRecord:
store
settings
setSettings:
observers
setObservers:
_store
_settings
_observers
T@"SAPersistenceManagerSettings",&,V_settings
T@"NSHashTable",&,N,V_observers
T@"SAPersistenceStore",R,N,V_store
JSONStringFromNSDictionary:error:
convertSAScenarioClassToString:
initWithDeviceUuid:
initWithDeviceUuid:scenarioClass:unsafeLocation:
_setNewScenarioClass:
_isInsideAnySafeLocation
_hasAllSafeLocationStatesKnown
_notifyAllClientsOfScenarioChangeFrom:to:
_addUnsafeLocation:
_removeUnsafeLocation:
_findSafeLocationWithUUID:
_addSafeLocation:
_removeSafeLocation:
currentUnsafeLocation
setCurrentUnsafeLocation:
lastUnsafeLocation
setLastUnsafeLocation:
deviceUuid
setDeviceUuid:
scenarioClassification
setScenarioClassification:
scenarioChangeDate
delegate
setDelegate:
timeDelegate
setTimeDelegate:
statesBySafeLocation
setStatesBySafeLocation:
currentVisit
setCurrentVisit:
_currentUnsafeLocation
_lastUnsafeLocation
_deviceUuid
_scenarioClassification
_scenarioChangeDate
_delegate
_timeDelegate
_statesBySafeLocation
_currentVisit
TQ,N,V_scenarioClassification
T@"NSUUID",C,N,V_deviceUuid
T@"CLRegion",C,N,V_currentUnsafeLocation
T@"CLRegion",C,N,V_lastUnsafeLocation
T@"NSMutableSet",&,N,V_safeLocations
T@"NSMutableDictionary",&,N,V_statesBySafeLocation
T@"CLCircularRegion",C,N,V_currentVisit
T@"NSDate",R,C,N,V_scenarioChangeDate
T@"<SAFenceManagerRequestProtocol>",&,N,V_delegate
T@"<SATimeServiceProtocol>",&,N,V_timeDelegate
logTAEvent:
computeMessagesForEvent:
stringToSplit:maxSplitSize:
extractUniqueIdentifierFromMessage:
extractEventFromMessages:
initWithClock:analytics:
getAllUUIDs
getSADevice:
getConnectionState:
getWithYouStatus:
getDeviceNotificationState:
getLatestAdvertisement:
getLatestNOAdvertisement:
getLatestWildAdvertisement:
getLastWithYouDate:
getScenarioClass:
getMonitoringSessionState:
getRelatedDevices:
updateLatestAdvertisement:forDeviceWithUUID:
_updateSingleDeviceRecordForDevice:
_updateDeviceRecordOnDeviceUpdateEvent:
_updateAllRelatedDevices
_updateConnectionStateOnConnectionEvent:
_updateLatestAdvertisement:
updateLastWithYouDate:forDeviceWithUUID:
updateScenario:forDeviceWithUUID:
updateMonitoringSessionState:forDeviceWithUUID:
resetAllWithYouStatus
hasSurfacedNotificationFor:
hasDisconnectedDevices
T@"NSMutableDictionary",&,N,V_deviceRecord
requestBluetoothScanForTypes:
stopLongAggressiveScan
requestLocationForType:
scheduleSATimeEvent:forAlarm:
cancelSATimeEventForAlarm:
initWithAnalytics:isReplay:
enableMonitoringForSeparations:
monitoringSessionManager
setMonitoringSessionManager:
powerLogger
setPowerLogger:
_monitoringSessionManager
_powerLogger
T@"SATime",&,N,V_clock
T@"SAWithYouDetector",&,N,V_withYouDetector
T@"SAMonitoringSessionManager",&,N,V_monitoringSessionManager
T@"SAFenceManager",&,N,V_fenceManager
T@"SATravelTypeClassifier",&,N,V_travelTypeClassifier
T@"SAPowerLog",&,N,V_powerLogger
initWithEnableSubmission:
enableSubmission
setEnableSubmission:
_enableSubmission
TB,V_enableSubmission
submitEvent:content:
publishAndResetAggregation
resetAggregation
addAlertWithContext:
addDeviceFetchResultCount:type1count:type2count:type3count:type4count:type5count:type6count:type7count:safeCount:usingSameSafe:
addSafeLocationFetchResultCount:
addAggressiveScanRequest:
addGpsLocationRequest:
addWifiLocationRequest:
addWakeTimerRequest
addScanDuration:
addScanDurationForFindingRelevantItemsOnly:
addNumDevicesWithYou:
addVisit:withRadius:
setInSafeLocationState:
setInUnsafeLocationState:
setActiveState:
setInTravelState:
addPreArrivalAlertTime:didRejoinPriorExit:
addDidSeparateWhileInVisit:didRejoinPriorExit:
publishingInterval
numAlerts
setNumAlerts:
numAlertsLeftBehind
setNumAlertsLeftBehind:
numAlertsTraveling
setNumAlertsTraveling:
numEnabled
setNumEnabled:
numDevices
setNumDevices:
numItems
setNumItems:
numAccessories
setNumAccessories:
numBTLE
setNumBTLE:
numiPhone
setNumiPhone:
numiPad
setNumiPad:
numMacBook
setNumMacBook:
numSafe
setNumSafe:
numSafeInUse
setNumSafeInUse:
isAllUsingSameSafe
setIsAllUsingSameSafe:
numBTRequests
setNumBTRequests:
numBTLeftBehindRequests
setNumBTLeftBehindRequests:
numBTTravelingRequests
setNumBTTravelingRequests:
numGpsRequests
setNumGpsRequests:
numWifiRequests
setNumWifiRequests:
numTimers
setNumTimers:
numDevicesAtSafeExit
setNumDevicesAtSafeExit:
numUnsafe
setNumUnsafe:
numUnsafeWithLOI
setNumUnsafeWithLOI:
numUnsafeWithoutLOI
setNumUnsafeWithoutLOI:
aggActiveDuration
setAggActiveDuration:
aggInSafeDuration
setAggInSafeDuration:
aggInUnsafeDuration
setAggInUnsafeDuration:
aggInTravelDuration
setAggInTravelDuration:
aggScanDuration
setAggScanDuration:
aggScanDurationForFindingRelevantItemsOnly
setAggScanDurationForFindingRelevantItemsOnly:
lastActivated
setLastActivated:
lastSafeEntry
setLastSafeEntry:
lastUnsafeEntry
setLastUnsafeEntry:
lastTravelStart
setLastTravelStart:
_isAllUsingSameSafe
_numAlerts
_numAlertsLeftBehind
_numAlertsTraveling
_numEnabled
_numDevices
_numItems
_numAccessories
_numBTLE
_numiPhone
_numiPad
_numMacBook
_numSafe
_numSafeInUse
_numBTRequests
_numBTLeftBehindRequests
_numBTTravelingRequests
_numGpsRequests
_numWifiRequests
_numTimers
_numDevicesAtSafeExit
_numUnsafe
_numUnsafeWithLOI
_numUnsafeWithoutLOI
_aggActiveDuration
_aggInSafeDuration
_aggInUnsafeDuration
_aggInTravelDuration
_aggScanDuration
_aggScanDurationForFindingRelevantItemsOnly
_lastActivated
_lastSafeEntry
_lastUnsafeEntry
_lastTravelStart
TQ,N,V_numAlerts
TQ,N,V_numAlertsLeftBehind
TQ,N,V_numAlertsTraveling
TQ,N,V_numEnabled
TQ,N,V_numDevices
TQ,N,V_numItems
TQ,N,V_numAccessories
TQ,N,V_numBTLE
TQ,N,V_numiPhone
TQ,N,V_numiPad
TQ,N,V_numMacBook
TQ,N,V_numSafe
TQ,N,V_numSafeInUse
TB,N,V_isAllUsingSameSafe
TQ,N,V_numBTRequests
TQ,N,V_numBTLeftBehindRequests
TQ,N,V_numBTTravelingRequests
TQ,N,V_numGpsRequests
TQ,N,V_numWifiRequests
TQ,N,V_numTimers
TQ,N,V_numDevicesAtSafeExit
TQ,N,V_numUnsafe
TQ,N,V_numUnsafeWithLOI
TQ,N,V_numUnsafeWithoutLOI
TQ,N,V_aggActiveDuration
TQ,N,V_aggInSafeDuration
TQ,N,V_aggInUnsafeDuration
TQ,N,V_aggInTravelDuration
Td,N,V_aggScanDuration
Td,N,V_aggScanDurationForFindingRelevantItemsOnly
T@"NSDate",&,N,V_lastActivated
T@"NSDate",&,N,V_lastSafeEntry
T@"NSDate",&,N,V_lastUnsafeEntry
T@"NSDate",&,N,V_lastTravelStart
Td,R,N
B16@0:8
v40@0:8@16Q24Q32
v40@0:8@"<OSLogCoder>"16Q24Q32
B24@0:8@16
#16@0:8
@16@0:8
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
Q16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v24@0:8@16
@24@0:8@16
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
@24@0:8^{_NSZone=}16
@"NSDate"16@0:8
@"NSDictionary"16@0:8
@40@0:8@16q24@32
q16@0:8
v16@0:8
@"NSUUID"
@"NSDate"
@40@0:8@16Q24@32
@"CLRegion"
@40@0:8@16@24@32
v24@0:8Q16
v32@0:8@16Q24
v24@0:8q16
v20@0:8B16
@"SADevice"
@"TASPAdvertisement"
@"NSMutableArray"
@"<SAAnalyticsServiceProtocol>"
@"<SATimeServiceProtocol>"
@84@0:8@16@24@32@40q48q56Q64B72@76
@92@0:8@16@24@32@40@48q56q64Q72B80@84
@100@0:8@16@24q32@40@48@56q64q72Q80B88@92
@"NSString"
@"NSMutableDictionary"
@72@0:8@16d24d32d40Q48@56@64
d16@0:8
@44@0:8@16Q24B32@36
@"SASafeLocation"
@32@0:8@16@24
@"NSDictionary"
B40@0:8@16@24@32
v32@0:8@16@24
B40@0:8@"OSLogPersistence"16@"NSArray"24@"NSError"32
v32@0:8@"NSDate"16@"NSDate"24
B32@0:8@16@24
B32@0:8@"OSActivityStream"16@"NSArray"24
v24@0:8@"OSActivityStream"16
v32@0:8@"OSActivityStream"16@"NSError"24
B40@0:8@"OSActivityStream"16@"NSArray"24@"NSError"32
B56@0:8@16@24@32q40@48
B56@0:8@"OSActivityStream"16@"NSString"24@"OSLogDevice"32q40@"NSError"48
@"SAService"
@"OSLogPersistence"
@"OSActivityStream"
@"NSObject<OS_dispatch_semaphore>"
@"NSURL"
@"SAAnalytics"
@24@0:8Q16
v24@0:8@"<SATravelTypeClassifierClientProtocol>"16
v24@0:8@"<TAEventProtocol>"16
B32@0:8Q16Q24
v40@0:8Q16Q24Q32
@"NSHashTable"
v24@0:8@"<SAFenceManagerClientProtocol>"16
B32@0:8@"CLRegion"16@"NSUUID"24
B32@0:8@"SASafeLocation"16@"NSUUID"24
v32@0:8Q16@24
v24@0:8@"NSUUID"16
v24@0:8@"<SAPowerLogClientProtocol>"16
v24@0:8d16
@"NSMutableSet"
@56@0:8@16Q24@32Q40@48
@"CLCircularRegion"
@"TALocationLite"
@"SAScenarioClassifier"
@"CLLocation"
Q24@0:8@16
q24@0:8@16
v24@0:8@"<SAMonitoringSessionManagerClientProtocol>"16
Q24@0:8@"NSUUID"16
q24@0:8@"NSUUID"16
v40@0:8Q16Q24@32
v40@0:8Q16Q24@"NSUUID"32
@80@0:8@16@24@32@40@48@56@64@72
v40@0:8@16@24@32
v28@0:8@16B24
v36@0:8@16@24B32
@40@0:8@16@24Q32
d24@0:8@16
@"<SAWithYouDetectorServiceProtocol>"
@"<SAGeoFenceRequestProtocol>"
@"<SAFenceManagerServiceProtocol><SAFenceManagerRequestProtocol>"
@"SADeviceRecord"
@"<SATravelTypeClassifierServiceProtocol>"
@"SAPersistenceManager"
@"<TAEventProtocol>"
v32@0:8@"NSArray"16Q24
v24@0:8@"<SAWithYouDetectorClientProtocol>"16
@56@0:8@16@24@32@40@48
v84@0:8Q16B24d28d36Q44d52Q60d68Q76
d24@0:8Q16
B24@0:8q16
B32@0:8Q16@24
Q24@0:8Q16
B24@0:8Q16
@"<SABluetoothScanRequestProtocol>"
@"<SALocationRequestProtocol>"
Q20@0:8i16
v24@0:8@"<SAServiceClientProtocol>"16
v48@0:8@16@24@32@40
v40@0:8@16d24@32
v28@0:8@"SAService"16B24
v48@0:8@"SAService"16@"NSArray"24@"CLLocation"32@"NSDictionary"40
v32@0:8@"SAService"16Q24
v32@0:8@"SAService"16@"CLRegion"24
v40@0:8@"SAService"16d24@"NSUUID"32
v32@0:8@"SAService"16@"NSUUID"24
v24@0:8@"SAService"16
@"SPBeaconManager"
@"SPOwnerSession"
@"NSObject<SPSeparationMonitoringProtocol>"
@"NSObject<OS_dispatch_queue>"
@"RTRoutineManager"
@"<SATimeClientProtocol>"
@"NSUUID"32@0:8@"NSDate"16@"<SATimeClientProtocol>"24
@28@0:8@16B24
^v16@0:8
v24@0:8^v16
@"<SATimeEventRequestProtocol>"
@"SAPersistenceStore"
@"SAPersistenceManagerSettings"
@32@0:8@16^@24
v24@0:8@"<SAScenarioClassifierClientProtocol>"16
v40@0:8Q16@24@32
v40@0:8Q16@"SASafeLocation"24@"NSUUID"32
v40@0:8Q16@"CLRegion"24@"NSUUID"32
v24@0:8@"CLRegion"16
v32@0:8Q16Q24
@"<SAFenceManagerRequestProtocol>"
@32@0:8@16Q24
v40@0:8@"NSArray"16@"CLLocation"24@"NSDictionary"32
v32@0:8Q16@"NSUUID"24
v32@0:8d16@24
v32@0:8d16@"NSUUID"24
@"SATime"
@"SAWithYouDetector"
@"SAMonitoringSessionManager"
@"SAFenceManager"
@"SATravelTypeClassifier"
@"SAPowerLog"
@20@0:8B16
v92@0:8Q16Q24Q32Q40Q48Q56Q64Q72Q80B88
v28@0:8B16Q20
v28@0:8d16B24
v24@0:8B16B20
v32@0:8@"NSString"16@"NSDictionary"24
v24@0:8@"NSDictionary"16
@"SAAnalyticsSettings"
