%@ %@
publicKey
conversationMessageBytes
pseudonym
privateKey
invitedHandles
creationDateEpochTime
groupUUIDString
originatorHandle
pseudonymExpirationDateEpochTime
isActivated
generatorDescriptor
linkName
linkLifetimeScope
Indefinite
CallDuration
(unknown: %i)
CSDTransactionManager
TUCallCenter_allCalls
com.apple.calls.callservicesd.
%@:%@
handleCallStatusChanged
handleSessionStateChanged
%@-%@
com.apple.telephonyutilities.callservicesdaemon.csdavconference
@"<CSDAVConferenceProvider>"24@?0@"NSUUID"8@"NSObject<OS_dispatch_queue>"16
<%@ %p state=%d conference=%@>
v24@?0@"NSDictionary"8@"NSError"16
<%@ %p caller=%d capabilities=%@ deviceRole=%d>
TUCallUserActivityCTInfoKey
TUCallUserActivityServiceKey
kCTCallDirection
kCTCallDirectionOutgoing
kCTCallDirectionIncoming
kCTCallPhoneNumber
com.apple.coretelephony
handle
avcData
isMomentsAvailable
isScreenSharingAvailable
isGondolaCallingAvailable
isMirageAvailable
isLightweight
sharePlayProtocolVersion
options
v24@?0@"NSString"8d16
ADClientSetValueForDistributionKey
AggregateDictionary
%@.%@.%f
ForceDisableCallProximity
CSDProximityController.m
Invalid parameter not satisfying: %@
callCenterObserver != nil
interfaceOrientationObserver != nil
routeController != nil
proximitySensorObserver != nil
queue != nil
voiceOverObserver != nil
v16@?0@"FBSOrientationUpdate"8
B8@?0
v12@?0i8
ConferenceID:
kMXSessionAudioCategory_PlayAndRecord_NoBluetooth
MediaExperience
kMXSessionAudioMode_VoiceChat
kMXSessionAudioMode_VideoChat
IMDaemonDidConnectNotification
IMAVCore
IMAVChatStateChangedNotification
IMAVChatParticipantReceivedFirstFrameNotification
IMAVChatParticipantInvitationDeliveredNotification
IMAVChatParticipantCallInfoChangedNotification
IMAVChatConferenceIDChangedNotification
IMAVChatConferenceMetadataUpdatedNotification
IMAVChatMayRequireBreakBeforeMakeChangedNotification
IMAVChatParticipantInFrequencyChangedNotification
IMAVChatParticipantOutFrequencyChangedNotification
IMAVController
IMPreferredAccountForService
IMCore
IMAVChat
_NSStringDescriptionForIMAVChatEndedReason
CALL_FAILED_NO_NETWORK_CONNECTION_TITLE
ALERT_VIDEO_FAILED_NO_LOCAL_NETWORK_WLAN_MESSAGE
CALL_FAILED_NO_LOCAL_NETWORK_WLAN_MESSAGE
ALERT_VIDEO_FAILED_NO_LOCAL_NETWORK_WIFI_MESSAGE
CALL_FAILED_NO_LOCAL_NETWORK_WIFI_MESSAGE
ALERT_VIDEO_FAILED_NO_LOCAL_WLAN_MESSAGE
CALL_FAILED_NO_LOCAL_WLAN_MESSAGE
ALERT_VIDEO_FAILED_NO_LOCAL_WIFI_MESSAGE
CALL_FAILED_NO_LOCAL_WIFI_MESSAGE
ALERT_VIDEO_FAILED_TITLE
CALL_FAILED_TITLE
ALERT_VIDEO_FAILED_BAD_NONCE_TIMESTAMP
CALL_FAILED_BAD_NONCE_TIMESTAMP
ALERT_VIDEO_FAILED_UPDATE_LOCATION_MESSAGE
CALL_FAILED_UPDATE_LOCATION_MESSAGE
ALERT_VIDEO_FAILED_REGION_INFO_INSUFFICIENT
CALL_FAILED_REGION_INFO_INSUFFICIENT
ALERT_VIDEO_FAILED_REMOTE_INCOMPATIBLE_MESSAGE_%@_NUMBER
ALERT_VIDEO_FAILED_REMOTE_INCOMPATIBLE_MESSAGE_%@_NAME
ALERT_VIDEO_NOT_AVAILABLE_TITLE
CALL_NOT_AVAILABLE_TITLE
ALERT_VIDEO_FAILED_NOT_AVAILABLE_MESSAGE_%@_NUMBER
CALL_FAILED_%@_NOT_AVAILABLE_MESSAGE_NUMBER
ALERT_VIDEO_FAILED_NOT_AVAILABLE_MESSAGE_%@_NAME
CALL_FAILED_%@_NOT_AVAILABLE_MESSAGE_NAME
@"<CSDAVCSession>"44@?0@"NSString"8@"<CSDAVCSessionDelegate>"16@"NSObject<OS_dispatch_queue>"24B32@"TUConversationReport"36
<%@ %p
 UUID=%@
 groupUUID=%@
 link=%@
 messagesGroupUUID=%@
 state=%ld
 hasReceivedLetMeInRequest=%ld
 letMeInRequestState=%ld
 ignoreLMIRequests=%d
 avcSessionToken=%ld
 avcSessionIdentifier=%@
 isLocallyCreated=%d
 hasJoined=%d]
 isUplinkMuted=%d
 isAudioEnabled=%d
 isVideoEnabled=%d
 video=%d
 isScreenEnabled=%d
 localMember=%@
 remoteMembers=%@
 pendingMembers=%@
 kickedMembers=%@
 rejectedMembers=%@
 otherInvitedHandles=%@
 lightweightMembers=%@
 memberIdentifiers=%@
 activeRemoteParticipants=%@
 activeLightweightParticipants=%@
 report=%@
 oneToOneModeEnabled=%d
 virtualParticipants=%@
 provider=%@
 activitySessions=%@
 invitationPreferences=%@
PubSub
Unable to get application record
v24@?0@"NSString"8@"NSError"16
CADisplay
QuartzCore
Calling -[CSDConversation leave]
Cleaning up from AVCSession failure.
Timed out waiting for sessions to end in leaving state (left conversation for reason: %@). Please file a bug on [TelephonyUtilities | New Bugs] so we can direct it to the appropriate team.
NSErrorUserInfoDetailedError
AVCSession started but we weren't trying to join the conversation.
AVCSession failed to start.
CSDRelayIDSActiveAccountsChanged
CSDRelayPairedDeviceConnectedNotification
com.apple.private.alloy.phonecontinuity
supportsHolding
supportsGrouping
supportsUngrouping
supportsDTMF
supportsUnambiguousMultiPartyState
supportsAddCall
supportsSendingToVoicemail
destinationID
uniqueProxyIdentifier
sourceIdentifier
wantsHoldMusic
dtmfKey
disconnectedReason
v32@?0@"NSString"8@16^B24
NoAction
IncomingCall
DialCall
CallDialed
AnswerCall
CallAnsweredElsewhere
CallDisconnected
PlayDTMFToneForKey
CallConnected
DisconnectCall
PullRelayingCalls
HoldCall
UnholdCall
GroupCall
UngroupCall
ResetWantsHoldMusic
SwapCalls
UpdateCallModel
DeviceUnavailable
EndActiveAndAnswer
EndHeldAndAnswer
DisconnectCurrentCallAndActivateHeld
DisconnectAllCalls
ResetState
HardPauseDigitsAvailability
SendHardPauseDigits
UpdateRemoteCallState
SuppressRingtone
RequestCallContext
CallStartedConnecting
PushHostedCalls
PullHostedCalls
PushRelayingCalls
UpdateCallContext
NeedsManualInCallSoundsChange
InvitationSent
HoldActiveAndAnswer
UpdateCallDisplayContext
SetUplinkMuted
UpdateRemoteUplinkMuted
UpdateSystemVolume
UpdateSupportsTTYWithVoice
SetTTYType
RequestAction
UpdateRoutes
PickRoute
DowngradeToAudio
UpdateFailureExpected
value
normalizedValue
isoCountryCode
None
Generic
PhoneNumber
EmailAddress
com.apple.telephonyutilities.callservicesd.FaceTimeProvider
captureCapabilities
com.apple.request.hipuncap
com.apple.springboard.passcodeLockedOrBlocked
v16@?0@?<v@?>8
gk-invitation-break-before-make-timeout
StoreDemoMode
com.apple.demo-settings
RetailDemoNotification
CALL_ENDED
CALL_ENDED_DEMO_EXPLANATION
 temporaryGroupUUID=%@
 conversationGroupUUID=%@
 approverHandle=%@
 isVideo=%d
ShouldSuppress
ShouldAllow
com.apple.telephonyutilities.callservicesd.statusbarmanager
v16@?0@"STCallingStatusDomainUserInteraction"8
v16@?0@"STMutableCallingStatusDomainData"8
com.apple.callservicesd.neighborhoodConduit.xpcServer
v16@?0@"CSDClient"8
com.apple.telephonyutilities.callservicesdaemon.neighborhood-activities
v24@?0@"CSDClient"8@"<TUNeighborhoodActivityConduitXPCClient>"16
v16@?0@"<TUNeighborhoodActivityConduitXPCClient>"8
CSDCarrierBundlePhoneNumberProviderController
B24@?0@"CSDCarrierBundlePhoneNumberProvider"8@"NSDictionary"16
SilenceUnknownCallersOverrideList
CSDRelayIDSDualSession.m
Use another initializer instead
forceBTClassic
non-nil
updateMessage
checkInMessage
Unknown
Update
CheckIn
com.apple.telephonyutilities.callservicesd.thumpercapabilitiesmonitor
NPSDomainAccessor
NanoPreferencesSync
thumperCallingAllowedOnDefaultPairedDevice
thumperCallingCapabilitiesStates
PreviousDefaultPairedDeviceUniqueID
uniqueIDOverride
com.apple.telephonyutilities.callservicesd.thumperpushhandler.secondarydevicethumpersupported
THUMPER_CALLING
NOT_NOW
TURN_ON
MAKE_RECEIVE_THUMPER_CELLULAR_FOR_CARRIER_%@
MAKE_RECEIVE_THUMPER_FOR_CARRIER_%@
MAKE_RECEIVE_THUMPER_CELLULAR
MAKE_RECEIVE_THUMPER
v16@?0@"IMUserNotification"8
com.apple.telephonyutilities.callservicesd.thumperpushhandler.secondarydevicethumperenabled
THUMPER_EMERGENCY_ADDRESS_INFO_TITLE
THUMPER_EMERGENCY_ADDRESS_INFO_MESSAGE
PREFERENCES_BUTTON_TITLE
PSFaceTimeSettingsDetail
Preferences
<%@ %p 
%@=%d
%@=%@
com.apple.telephonyutilities.callservicesd.accountscontroller
    faceTimeIDMatchesAppleID: %@
    faceTimeAudioAvailability: %ld
    faceTimeVideoAvailability: %ld
    outgoingCallerID: %@
B24@?0@"NSString"8^B16
B32@?0@"NSString"8Q16^B24
IMStringIsPhoneNumber
IMFoundation
CSDPauseDigits.m
%s is not available. Use a designated initializer instead.
-[CSDPauseDigits init]
<%@ %p digits=%@ isHardPause=%d>
com.apple.telephonyutilities.callservicesd.callprovidermanagerxpcserver
com.apple.telephonyutilities.callservicesdaemon.callprovidermanager
v24@?0@"CSDClient"8@"<TUCallProviderManagerXPCClient>"16
com.apple.private.alloy.facetime.video
@"CSDAVConference"8@?0
CSDIDSChat.m
Cannot create an incoming chat with an outgoing session: %@
Cannot create an outgoing chat with an incoming session: %@
disableFaceTimeKeyExchange
Invite
contextIdentifier
actionDescription
ongoingDescription
completedDescription
com.apple.telephonyutilities.callservicesd.calldirectorymaintenance.daily
v16@?0@"NSObject<OS_xpc_object>"8
extensionsChangedForCallDirectoryExtensionManager-%lu
CXCallDirectoryNSExtensionManagerDelegate
protoCallModelState
protoService
protoWantsHoldMusic
protoCannotBeAnswered
protoDTMFKey
protoDisconnectedReason
OBSOLETE_conferenceIdentifier
protoVoicemail
callerNameFromNetwork
protoCall
hardPauseDigits
hardPauseState
receivedMessageType
protoProtocolVersion
protoShouldSuppressRingtone
dummyPayload
hostCallCreationTime
messageSendTime
protoNeedsManualInCallSounds
protoCannotRelayAudioOrVideoOnPairedDevice
protoExpectedEndpointOnMessagingDevice
contactIdentifier
protoCallCapabilitiesState
protoSoundRegion
protoEmergency
otherUniqueProxyIdentifiers
protoCallModel
protoSOS
protoDisplayContext
inviteData
protoProvider
protoVideo
protoUplinkMuted
protoRemoteUplinkMuted
systemVolume
localSenderIdentityUUIDString
localSenderIdentityAccountUUIDString
protoTTYType
protoSupportsTTYWithVoice
requestActionType
routes
route
endpointIDSDestinationURIs
protoPriority
protoOriginatingUIType
protoFailureExpected
%@.%@.%p
idx (%lu) is out of range (%lu)
localizedName
bundleURLString
maximumCallGroups
maximumCallsPerCallGroup
supportsAudioOnly
supportsAudioAndVideo
supportsEmergency
supportsVoicemail
ringtoneSoundURLString
originalRingtoneSoundURLString
handoffIdentifier
protoSupportedHandleType
emergencyLabeledHandles
supportsRecents
prioritizedSenderIdentities
emergencyHandles
    dialingIDSDevice: %@
@"CSDMessagingRelayMessage"8@?0
v20@?0i8^B12
v20@?0B8@"NSDictionary"12
com.apple.notifyd.matching
com.apple.telephonyutilities.callservicesd.kFZACAppBundleIdentifierLaunchNotification
com.apple.distnoted.matching
com.apple.callhistory.save.distributed.notification
com.apple.telephonyutilities.callservicesdaemon.app-installed
com.apple.telephonyutilities.callservicesdaemon.app-uninstalled
com.apple.CTTelephonyCenter
com.apple.telephonyutilities.callservicesd.reportingcontroller
proximity-sensor
com.apple.telephonyutilities.callservicesdaemon.connectionrequest
com.apple.telephonyutilities.callservicesd.calls
com.apple.language.changed
CSDIDSPendingChatKey
CSDIDSPendingCallKey
CSDIDSPendingChatUUIDKey
CSDIDSPendingMessageDidReceiveInviteNotification
CSDIDSPendingMessageDidReceiveCancelNotification
CSDGroupIDSPendingMessageDidReceiveInviteNotification
@"<CSDIDSDualSessionProvider>"24@?0@"IDSSession"8@"NSObject<OS_dispatch_queue>"16
NetworkAvailabilityCheckOverrideValue
allowed
ignored
audio
SKEBlob
mediaBlob
callInfoBlob
CSDIDSDualSessionStateChangedNotification
CSDIDSDualSession.m
-[CSDIDSDualSession init]
%@ isInitiator=%d state=%d remoteProtocolVersion=%@>
%@=%ld
@"NSString"16@?0@"NSString"8
CSDFaceTimeIDSProviderDelegate.m
%s is not available. Use an available initializer instead.
-[CSDFaceTimeIDSProviderDelegate init]
@"<CSDIDSService>"12@?0B8
B16@?0@"IDSAccount"8
@"<CSDIDSDualSessionProvider>"40@?0@"IDSAccount"8@"NSSet"16@"NSDictionary"24@"NSObject<OS_dispatch_queue>"32
@"<CSDIDSChat>"48@?0@"CSDExternalIDSDualSession"8@"NSUUID"16@"TUHandle"24B32B36@"NSUUID"40
CSDFileTransferringMetadataKeyIsDirectory
CSDFileTransferringMetadataKeyUserData
com.apple.telephonyutilities.callservicesd.csdfiletransfercontroller
v16@?0@"NSURL"8
directory
file
v16@?0@"IMFileCopier"8
CSDCallSourceFetcher.m
%s is not available. Use another initializer instead.
-[CSDCallSourceFetcher init]
iPod
IPOD
iPad
IPAD
iPhone
IPHONE
THUMPER_SERVICE_NAME
ENTER_CODE_FOR_%@
ALLOW
CANCEL
PrimaryDeviceNotification
THUMPER_PUSH_HANDLER_CONSENT_ALERT_MESSAGE
THUMPER_PUSH_HANDLER_CONSENT_ALERT_TITLE
THUMPER_PUSH_HANDLER_CONSENT_ALERT_ENABLE
THUMPER_PUSH_HANDLER_CONSENT_ALERT_CANCEL
SecondaryDeviceNotification
RECEIVE_THUMPER_CALLS_FROM_PHONE_NUMBER_ENTER_CODE_%@_%@
THUMPER_PIN_EXCHANGE_REQUEST_FAILED_TITLE
THUMPER_PIN_EXCHANGE_REQUEST_FAILED_MESSAGE
protoStatus
protoConferenced
protoTimeConnected
protoOutgoing
protoHasSentInvitation
kMXSessionAudioMode_RemoteVoiceChat
com.apple.telephonyutilities.callservicesd.callhistorymanagerxpcserver
com.apple.telephonyutilities.callservicesdaemon.callhistorymanager
-[CSDCallHistoryManagerXPCServer updateOutgoingLocalParticipantUUID:forCallsWithOutgoingLocalParticipantUUID:]
CSDPauseDigitsQueue.m
-[CSDPauseDigitsQueue init]
 baseDestinationID=%@
 originalPauseDigitsString=%@
 pauseDigits=%@
** TUAssertion failure: %@
callservicesd is attempting to create an XPC client for itself.
CSDXPCClient.m
%@ entitlementCapabilities=%@
RTTTelephonyUtilities
RTTUtilities
CSDIDSInitialLinkTypeKey
CSDIDSInputAudioPowerSpectrumTokenKey
CSDIDSOutputAudioPowerSpectrumTokenKey
members
message
messagesGroupUUIDString
messagesGroupName
activitySession
providerIdentifier
otherInvitedHandles
lightweightMembers
videoEnabled
PHPhotoLibrary
Photos
PHAssetCreationRequest
PHAssetResourceCreationOptions
CallState
status
bundleID
providerContext
hostedOnCurrentDevice
endpointOnCurrentDevice
callStart
callStop
callForegrounded
callBackgrounded
GroupSessionEventEnded
timestamp
timestampEnd
CSDFaceTimeProviderDelegate.m
-[CSDFaceTimeProviderDelegate init]
v24@?0@"NSArray"8@"NSArray"16
-[CSDVoIPApplication init] is not supported. Use -[CSDVoIPApplication initWithBundleIdentifier:] instead
CSDVoIPApplication.m
<%@ %p bundleIdentifier=%@ environment=%@ pushKitClient=%@ networkExtensionClient=%@ token=%@ pendingPKMessageContextCount=%lu pendingNetworkExtensionContextsCount=%lu>
com.apple.developer.pushkit.unrestricted-voip
com.apple.developer.pushkit.unrestricted-voip-regulatory
com.apple.developer.pushkit.unrestricted-voip.ptt
com.apple.developer.pushkit.unrestricted-voip.temporary
13.0
15.0
identifierUUIDString
activity
givenName
middleName
nameSuffix
phoneticRepresentation
link
v20@?0i8q12
CPGroupActivityScreenSharingContext
CPGroupActivityWatchTogetherContext
CPGroupActivityListenTogetherContext
CSDRelayConferenceLocalFrequencyChangedNotification
CSDRelayConferenceRemoteFrequencyChangedNotification
CSDRelayConferenceLocalMeterLevelChangedNotification
CSDRelayConferenceRemoteMeterLevelChangedNotification
CSDRelayConferenceMutedChangedNotification
CSDRelayConferenceSendingAudioChangedNotification
CSDRelayConferenceConnectionWillCloseNotification
CSDRelayConferenceConnectionDidCloseNotification
CSDRelayConferenceConnectionDidReceiveDataNotification
CSDRelayConferenceConnectionDidReceiveDataNotificationDataKey
com.apple.telephonyutilities
Conference cleaned up before handling a didStart with error: %@
CallServices
CSDSandboxExtensionDirectory.m
-[CSDSandboxExtensionDirectory init]
CSDPinExchangeCompressedDataKey
CSDPinExchangeActionKey
CSDPinExchangeCallerIDKey
CSDPinExchangePinKey
CSDPinExchangeActionRequestPIN
CSDPinExchangeActionSendPIN
CSDPinExchangeActionOneTimeReminder
CSDPinExchangeActionApproved
CSDPinExchangeActionUnapproved
CSDPinExchangeActionCancelledPrimary
CSDPinExchangeActionCancelledSecondary
v20@?0B8@"NSString"12
com.apple.telephonyutilities.callservicesd.pinexchangeerror
INCORRECT_PIN_ENTERED
THUMPER_MISMATCHED_ACCOUNTS
MAX_SLOTS_FILLED
com.apple.telephonyutilities.callservicesd.callcapabilities
com.apple.telephonyutilities.callservicesdaemon.callcapabilities
State: %@
Telephony capabilities: %@
Accounts controller: %@
Paired Host Device State: %@
v24@?0@"CSDClient"8@"<TUCallCapabilitiesXPCClient>"16
-[CSDCallCapabilities setRelayCallingEnabled:]
-[CSDCallCapabilities setRelayCallingEnabled:forDeviceWithID:]
-[CSDCallCapabilities setWiFiCallingEnabled:forSenderIdentityWithUUID:]
-[CSDCallCapabilities setWiFiCallingRoamingEnabled:forSenderIdentityWithUUID:]
-[CSDCallCapabilities setVoLTECallingEnabled:forSenderIdentityWithUUID:]
-[CSDCallCapabilities setThumperCallingEnabled:forSenderIdentityWithUUID:]
-[CSDCallCapabilities setThumperCallingAllowed:onSecondaryDeviceWithID:forSenderIdentityWithUUID:]
-[CSDCallCapabilities setThumperCallingAllowedOnDefaultPairedDevice:forSenderIdentityWithUUID:]
-[CSDCallCapabilities endEmergencyCallbackMode]
-[CSDCallCapabilities invalidateAndRefreshWiFiCallingProvisioningURLForSenderIdentityWithUUID:]
-[CSDCallCapabilities invalidateAndRefreshThumperCallingProvisioningURLForSenderIdentityWithUUID:]
-[CSDCallCapabilities requestPinFromPrimaryDevice]
-[CSDCallCapabilities cancelPinRequestFromPrimaryDevice]
disableSupportsPrimaryCalling
forceSupportsPrimaryCalling
telephony
disableSupportsBasebandCalling
forceSupportsBasebandCalling
disableSupportsCellularData
forceSupportsCellularData
disableDisplayingTelephonyCallSupport
forceDisplayingTelephonyCallSupport
disableDisplayingFaceTimeAudioCallSupport
forceDisplayingFaceTimeAudioCallSupport
disableDisplayingFaceTimeVideoCallSupport
forceDisplayingFaceTimeVideoCallSupport
disableCanEnableWiFiCalling
forceCanEnableWiFiCalling
disableCanEnableVoLTECalling
forceCanEnableVoLTECalling
disableCanEnableThumperCalling
forceCanEnableThumperCalling
q24@?0@"TUCloudCallingDevice"8@"TUCloudCallingDevice"16
relayCallingDisabled
relayCallingDisabledForDeviceID
pairedHostDeviceState
CSDSharePlayMediaDidHandoffNotification
CSDSharePlayRemoteActivityDidChangeNotification
CSDCallMayRequireBreakBeforeMakeChangedNotification
CSDCallHasStartedOutgoingChangedNotification
CSDCallHasAudioInterruptionChangedNotification
CSDCallMixesVoiceWithMediaChangedNotification
CSDCallAudioInterruptionPropertiesChangedNotification
CSDCallLocalPreviewStoppedNotification
CSDCallsWillEnterBackgroundNotification
CSDCallEnteredForegroundNotification
CSDCallRemoteParticipantJoinedNotification
CSDCallRemoteParticipantLeftNotification
CSDCallOneToOneModeChangedNotification
CSDCallMetricsKnownContact
CSDCallMetricsSiriSuggested
CSDCallMetricsReturnedCall
CSDCallMetricsOwnNumber
CSDCallMetricsVerifiedAppleCare
CSDCallMetricsCarrierNumber
CSDCall.m
dialRequest is invalid: %@
SFCoordinatedAlertRequest
Sharing
v28@?0@"NSError"8B16@"NSDictionary"20
v16@?0q8
CSDRouteManagerPreferredRouteChangedNotification
com.apple.telephonyutilities.callservicesd.routemanager
AVSystemController_PickableRoutesDidChangeNotification
Celestial
AVSystemController_PreferredExternalRouteDidChangeNotification
AVSystemController_CarPlayIsConnectedDidChangeNotification
AVSystemController_SubscribeToNotificationsAttribute
AVSystemController
AVAudioSessionMediaServicesWereResetNotification
AVFoundation
PhoneCall
StarkCapability
AVSystemController_CarPlayIsConnectedAttribute
lightweightPrimary
UUIDString
locallyCreated
initiator
localMember
remoteMembers
activeRemoteParticipants
activitySessions
reportData
conversationProviderIdentifier
activeLightweightParticipants
conversationID
com.apple.telephonyutilities.callservicesd.conversationmanager
@"CSDIDSGroupSessionProvider"60@?0@"NSString"8@"NSArray"16@"NSString"24@"IDSAccount"32@"NSObject<OS_dispatch_queue>"40B48@"TUConversationMember"52
@"CSDConversation"132@?0@"NSObject<OS_dispatch_queue>"8@"NSUUID"16@"NSUUID"24@"CSDIDSGroupSession"32@"NSUUID"40B48@"TUConversationMember"52@"TUHandle"60@"NSSet"68@"NSSet"76@"NSSet"84@"NSSet"92@"NSSet"100@"TUConversationLink"108@"TUConversationReport"116B124B128
B64@?0@"NSData"8@"IDSAccount"16@"NSSet"24@"TUConversationMember"32@"NSDictionary"40^@48@?<v@?>56
@"NSSet"8@?0
@"TUHandle"8@?0
v32@?0@"CSDMessagingConversationMessage"8@"NSData"16@"NSError"24
v24@?0@"TUConversationLinkDescriptor"8@"NSError"16
v24@?0@"TUConversationLink"8@"NSError"16
v108@?0@"NSUUID"8@"NSUUID"16@"NSUUID"24B32@"TUConversationMember"36@"TUHandle"44@"NSArray"52@"NSArray"60@"NSArray"68@"TUConversationLink"76@"TUConversationReport"84@"NSArray"92@"NSString"100
v32@?0@"NSUUID"8@"CSDConversation"16^B24
v32@?0@"CSDMessagingEncryptedConversationMessage"8@"CSDLetMeInRequestorKeyAgreement"16@"NSError"24
SHAREPLAY_INCOMPATIBLE_MESSAGE
SHAREPLAY_INCOMPATIBLE_TITLE
Failed to find conversation with activitySession
SharePlay not allowed
v24@?0@"NSSet"8@"NSError"16
This call's call history identifier is nil
CHRecentCall_CSD.m
!(call_category == %@ && service_provider == %@)
voip
com.apple.developer.networking.networkextension
app-push-provider
protoWantsVideo
OBSOLETE_protoMomentsAvailable
protoSenderMuteUplink
protoShouldSuppressInCallUI
protoMomentsV2Available
protoUpgradeSessionUUID
B16@?0@"TURoute"8
<%@ %p category=%@ mode=%@>
v32@?0@"TURoute"8Q16^B24
v24@?0@"TURoute"8^B16
com.apple.private.alloy.facetime.audio
applicationContext
activityIdentifier
metadata
activityContext
updatedDateEpochTime
fallbackApplicationName
activityMetadata
isSystemActivity
handleType
notificationStyles
faceTimeAudioAvailable
faceTimeVideoAvailable
00000000-0000-0000-0000-000000000000
com.apple.telephonyutilities.callservicesd.incomingcallfilter
@"CXCallDirectoryStore"8@?0
-[CSDIncomingCallFilter _callFilterBlock]_block_invoke
CSDIncomingCallFilter.m
provider
q24@?0@"NSString"8@"NSString"16
%ld%@
callerId
generatorID
generatorVersion
CSDIDSSession.m
-[CSDIDSSession init]
<%@ %p %@>
UUID=%@
name
protoPersonNameComponents
suggestedName
companyName
mapName
location
contactName
contactLabel
callDirectoryLabel
callDirectoryLocalizedExtensionContainingAppName
callDirectoryExtensionIdentifier
contactIdentifiers
com.apple.telephonyutilities.callservicesd.useractivitycommunicator
announcements
GondolaLinkOverrideBaseURL
com.apple.private.alloy.phone.auth
-[CSDIDSGroupSession addMembers:toExistingMembers:activeParticipants:activitySessions:link:otherInvitedHandles:report:invitationPreferences:requiredCapabilities:addingFromLetMeIn:triggeredLocally:]
v24@?0@"CSDClient"8@"<TUCallServicesXPCClient>"16
com.apple.telephonyutilities.callservicesdaemon.callstatecontroller
registerSecureMicrophoneEngagedHandler:
7UhDrmrZozgwO+3AgUbHxw
%@-%d
B16@?0@"CSDClient"8
NRPairedDeviceRegistry
NanoRegistry
282F1EE6-A144-4106-AFFB-2BDB5B59FD0D
com.apple.telephonyutilities.callservicesdaemon.voicemailcallended
callsToHold
callsToUnhold
callsToDisconnect
v16@?0@"TUCall"8
-[CSDCallStateController dialWithRequest:reply:]
-[CSDCallStateController dialWithRequest:displayContext:]
-[CSDCallStateController answerCallWithRequest:]
-[CSDCallStateController holdCallWithUniqueProxyIdentifier:]
-[CSDCallStateController unholdCallWithUniqueProxyIdentifier:]
-[CSDCallStateController requestVideoUpgradeForCallWithUniqueProxyIdentifier:]
-[CSDCallStateController disconnectCallWithUniqueProxyIdentifier:]
-[CSDCallStateController groupCallWithUniqueProxyIdentifier:withOtherCallWithUniqueProxyIdentifier:]
-[CSDCallStateController ungroupCallWithUniqueProxyIdentifier:]
-[CSDCallStateController swapCalls]
-[CSDCallStateController playDTMFToneForCallWithUniqueProxyIdentifier:key:]
-[CSDCallStateController disconnectCurrentCallAndActivateHeld]
-[CSDCallStateController disconnectAllCalls]
-[CSDCallStateController setTTYType:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController pullRelayingCallsFromClient]
-[CSDCallStateController pushRelayingCallsToHostWithSourceIdentifier:]
-[CSDCallStateController pullCallFromClientUsingHandoffActivityUserInfo:reply:]
-[CSDCallStateController sendMMIOrUSSDCodeWithRequest:]
-[CSDCallStateController setUplinkMuted:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController setDownlinkMuted:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController setIsSendingVideo:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController setSharingScreen:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController pushHostedCallsToDestination:]
-[CSDCallStateController pullHostedCallsFromPairedHostDevice]
-[CSDCallStateController sendHardPauseDigitsForCallWithUniqueProxyIdentifier:]
-[CSDCallStateController updateCallWithProxy:]
-[CSDCallStateController enteredForegroundForCallWithUniqueProxyIdentifier:]
-[CSDCallStateController willEnterBackgroundForAllCalls]
-[CSDCallStateController enteredBackgroundForAllCalls]
-[CSDCallStateController setRemoteVideoPresentationSizeForCallWithUniqueProxyIdentifier:size:]
-[CSDCallStateController setRemoteVideoPresentationStateForCallWithUniqueProxyIdentifier:presentationState:]
-[CSDCallStateController setScreenShareAttributesForCallWithUniqueProxyIdentifier:attributes:]
-[CSDCallStateController setSharingScreen:attributes:forCallWithUniqueProxyIdentifier:]
-[CSDCallStateController setBluetoothAudioFormatForCallWithUniqueProxyIdentifier:bluetoothAudioFormat:]
-[CSDCallStateController shouldSuppressInCallStatusBar:]
-[CSDCallStateController shouldAllowRingingCallStatusIndicator:]
v24@?0@"NSUserActivity"8@"NSError"16
-[CSDCallStateController activateInCallUIWithActivityContinuationIdentifier:]
-[CSDCallStateController joinConversationWithRequest:]
-[CSDCallStateController setCurrentAudioInputDeviceToDeviceWithUID:]
-[CSDCallStateController setCurrentAudioOutputDeviceToDeviceWithUID:]
-[CSDCallStateController localRoutesByUniqueIdentifier:]
-[CSDCallStateController pairedHostDeviceRoutesByUniqueIdentifier:]
-[CSDCallStateController pickLocalRouteWithUniqueIdentifier:shouldWaitUntilAvailable:]
-[CSDCallStateController pickPairedHostDeviceRouteWithUniqueIdentifier:shouldWaitUntilAvailable:]
-[CSDCallStateController containsRestrictedHandle:forBundleIdentifier:performSynchronously:reply:]
-[CSDCallStateController policyForAddresses:forBundleIdentifier:reply:]
-[CSDCallStateController willRestrictAddresses:forBundleIdentifier:reply:]
-[CSDCallStateController shouldRestrictAddresses:forBundleIdentifier:performSynchronously:reply:]
-[CSDCallStateController isUnknownAddress:normalizedAddress:forBundleIdentifier:reply:]
-[CSDCallStateController filterStatusForAddresses:forBundleIdentifier:reply:]
B24@?0@"TUCall"8@"NSDictionary"16
com.apple.telephonyutilities.callservicesd.voipapplicationcontroller
com.apple.callkit.networkextension.voip
com.apple.networkextension.voip.launch
com.apple.telephonyutilities.callservicesdaemon.voip
com.apple.pushkit.launch.voip
com.apple.telephonyutilities.callservicesd.csdvoipapplicationcontroller.daily
bundleIDs
aps-environment
CSDVoIPApplicationKillCounts
%@.%@
com.apple.telephonyutilities.callservicesdaemon.voip.push
com.apple.telephonyutilities.callservicesdaemon.voip.push.development
v24@?0@"BSProcessHandle"8@"NSError"16
 identifier=%lu
 handle=%@
 isMuted=%d
 isMomentsAvailable=%d
 streamToken=%ld
 screenToken=%ld
 avcIdentifier=%@
 capabilities=%@
 isAudioPaused=%d
 isRemoteAudioEnabled=%d
 isRemoteVideoEnabled=%d
 isLightweight=%d
 isLocalAccountHandle=%d
<%@: %p %@>
object=%@ processIdentifier=%d processName=%@ processBundleIdentifier=%@
fallbackURL
supportsContinuationOnTV
title
subtitle
image
preferredBroadcastingAttributes
com.apple.telephonyutilities.callservicesd.conversationmanagerxpcserver
com.apple.telephonyutilities.callservicesdaemon.conversationmanager
CSDConversationManagerClientsShouldConnectNotification
-[CSDConversationManagerXPCServer createActivitySession:onConversationWithUUID:]
Conversation is not associated with a Messages group
No messages group details provider available
v24@?0@"CSDClient"8@"<TUConversationManagerXPCClient>"16
InCallService
FaceTime
com.apple.telephonyutilities.callservicesd.callprovidermanager
Cannot launch app for dial request with a system provider: %@
Cannot launch app for invalid dial request: %@
NSSet<NSString *> *_INSupportedIntentsByExtensions(NSArray<LSPlugInKitProxy *> *__strong, NSError *__autoreleasing *)
CSDCallProviderManager.m
INSupportedIntentsByExtensions
void *IntentsLibrary(void)
/System/Library/Frameworks/Intents.framework/Intents
/System/Library/Frameworks/Intents.framework/Contents/MacOS/Intents
v52@?0@"NSUUID"8B16B20B24@"NSUUID"28@"TUHandle"36@"NSString"44
Invitation
Upgrade
AddMember
ResendAVCBlobRequest
ResendAVCBlobResponse
RespondedElsewhere
RequestShareScreen
AddActivitySession
Decline
LetMeInRequest
LinkCreated
NicknameUpdated
EncryptedConversationMessage
LetMeInDelegation
LetMeInDelegationResponse
LetMeInResponse
RemoveMember
UnicastConnector
RemoveActivitySession
RequestVideoUpgrade
UpdateActivity
LinkInvalidated
AddLightweightMember
LinkChanged
UpdateActivityImage
incomingCallRaiseToAnswerEnabledKey
CMGestureManager
CoreMotion
v24@?0@"CSDIDSTransport"8@"NSDictionary"16
SBSLaunchApplicationWithIdentifier
SpringBoardServices
access-calls
modify-calls
modify-status-bar
access-call-capabilities
modify-call-capabilities
access-call-history
modify-call-history
access-moments
modify-moments
modify-usernotifications
modify-reports
override-activity-verification
Entitlement check: In %s, client %@ lacks capability '%@'
com.apple.telephonyutilities.suppressringtone
<%@ %p activityType=%@ dynamicIdentifier=%@ activityUserInfo=%@>
registeredProviders
registeredProvidersVersion
registeredRelayProviders
Ringtones
com.apple.LaunchServices.applicationUnregistered
com.apple.telephonyutilities.callservicesd.csdmomentsreportingsession
CSDMomentsReportingSession.m
-[CSDMomentsReportingSession init]
self
shouldTraceSignposts
@"AVCSession"32@?0@"NSString"8@"NSObject<NSCopying>"16@"NSObject<OS_dispatch_queue>"24
@"AVCScreenCapture"16@?0@"AVCScreenCaptureConfiguration"8
CSDAVCSessionError
avcKeySessionSentBytes
avcKeySessionReceivedBytes
CSDExternalIDSDualSession.m
<display_name>
CELLULAR_SETTINGS
prefs:root=MOBILE_DATA_SETTINGS_ID
WLAN_SETTINGS
WIFI_SETTINGS
prefs:root=WIFI
SETTINGS
prefs:root=General&path=DATE_AND_TIME
prefs:root=FACETIME&path=LOCATION&guid=%@
%s is unavailable, call another initializer instead.
-[CSDRelayConferenceConnection init]
CSDRelayConferenceConnection.m
 identifier=%@
 transport=%@
 isHost=%d
 isUsingBaseband=%d
 isAudioDisabled=%d
 receivedSuccessfulDidStart=%d
 isPreparedToStop=%d
<%@ %p>
    Are capabilities valid: %@
    Sender identity capabilities: %@
    Emergency callback capabilities: %@
    Thumper local device ID: %@
    Thumper local accounts: %@
    Thumper secondary accounts: %@
disabled
q24@?0@"CSDThumperAccount"8@"CSDThumperAccount"16
uniqueIdentifier
deviceType
protoCurrentlyPicked
protoGuest
protoSupportsRelay
AirPods
BeatsSolo
BeatsX
Powerbeats
BeatsStudio
HomePod
iMac
MacBook
MacMini
MacPro
Watch
HomePodStereoPair
iPadPro
PowerbeatsPro
BeatsSoloPro
AirPodsPro
Powerbeats4
HeadPods
BeatsX2
HomePodMini
HomePodMiniStereoPair
B507
v16@?0B8B12
activeParticipants
conversationGroupUUIDString
addedMembers
isLetMeInApproved
encryptedMessage
letMeInDelegationHandle
letMeInDelegationUUID
enclosedEncryptedType
invitationPreferences
removedMembers
unicastConnectorBlob
Default
CSDFaceTimeIMAccountCallerIDChangedNotification
lastKnownFaceTimeCallerID
com.apple.telephonyutilities.callservicesd
com.apple.telephonyutilities.callservicesd.facetimeimaccount
v16@?0^{__CFDictionary=}8
ambiguityState
swappable
mergeable
holdAllowed
addCallAllowed
takingCallsPrivateAllowed
hardPauseAvailable
endAndAnswerAllowed
holdAndAnswerAllowed
sendToVoicemailAllowed
protoUUID
localizedShortName
accountUUIDString
v32@?0@"NSString"8@"NSString"16@"NSDictionary"24
Unknown Dial Failure for Conversation
Unknown Call Failure for Conversation
Mediaserverd crash
No AVC error reason given
AVC session did not start
AVC audio client did not start
AVC blob recovery timeout
CallUUID
RelayFailedConferenceFailed
RelayFailedNoRelayDevice
ComponentCrashed
RelayFailedRelayDeviceRelayNotEnabled
NoLocalLink
CallFailed
DialFailed
AccountUnsupported
NetworkUnsupported
ProviderCrashed
MediaStartFailed
MediaServerCrashed
NoReason
Disconnected
ReceiverDeclined
LocalUnanswered
RemoteUnanswered
InitiatorCancelled
CouldNotConnect
RemoteEnded
NoLocalData
NoRemoteData
FailedToOpenSocket
LocalHangup
RemoteHangup
NoLocalNetwork
MissingRemoteInfo
NoRemoteNetwork
EncryptionSetupFailed
EncryptionFailed
DecryptionFailed
SystemInternalError
NoRemotePackets
ReceiverBusy
SystemUnsupported
QRConfigurationError
SKEConfigurationError
QRAllocbindTimeout
QRUnallocbindTimeout
QRConnectedTimeout
AcceptedElsewhere
DeclinedElsewhere
AliasDeactivated
AllocatorParseError
AllocatorInvalidField
AllocatorInternalError
AllocatorServerBusy
AllocatorMissingKey
AllocatorBadSignature
AllocatorRateLimitExceeded
AllocatorUnknownError
InitialMkMDistributionFailure
JoinNotificationDistributionFailure
QRAllocateRequestTimeout
IdleClient
ParticipantBlockedListed
AllocatorBlockUPlusOneSession
AbortedByCaller
AbortedByReceiver
ReceiverOffline
HostHangup
Shutdown
LocalNetworkUnsupported
RemoteNetworkUnsupported
SystemComponentCrashed
CouldNotInvite
CouldNotRespond
CouldNotCancel
CouldNotSendUpdate
CouldNotSendAVMessage
CallLocalUnanswered
CallRemoteUnanswered
CallDeclinedElsewhere
CallFiltered
RemoteUserDoesNotExist
RemoteUserIncompatible
LocalUserIncompatible
CallerAccountInvalid
CallerAccountNeedsUpdate
Call Failure
com.apple.telephonyutilities.callservicesdaemon.reportingcontroller
shouldCheckAllGenerators
generatorDescriptors
A910C931-A590-41EF-A783-910BFBE500B3
com.apple.telephonyutilities.callservicesd.callhistorymanager
outgoingLocalParticipantUUID == %@
v32@?0@"<CSDCallHistoryManagerDelegate>"8@"NSObject<OS_dispatch_queue>"16^B24
CSDIDSDeviceListChangedNotification
CSDIDSServiceCallerIDChangedNotification
CSDIDSServiceQueryListenerID
CSDIDSService.m
All CSDIDSService subclasses must override +sharedInstance
com.apple.telephonyutilities.callservicesd.%@
    devices: %@
    availableOutgoingRelayCallerIDs: %@
    defaultPairedDevice: %@
    pairedDevice: %@
    telephonyCapableDeviceExists: %@
    relayCapableDeviceExists: %@
", "
pairedDeviceUniqueIDOverride
AudioAccessory
v24@?0@"CSDIDSTransport"8@"NSData"16
com.apple.callservicesdaemon.csdmomentscontroller
PreserveFaceTimePhotosFiles
CSDMomentsControllerStartedRemoteCaptureNotification
CSDMomentsControllerStartedLocalVideoCaptureNotification
CSDMomentsControllerStoppedLocalVideoCaptureNotification
CSDMomentsControllerMetadataKeyTransactionID
heic
lp_image
lp_movie
com.apple.telephonyutilities.callservicesd.csdmomentscontroller
@"<CSDAVCMoments>"40@?0q8@"NSString"16@"<CSDAVCMomentsDelegate>"24@"NSObject<OS_dispatch_queue>"32
com.apple.telephonyutilities.callservicesdaemon.momentscontroller
Could not start request for mediaType: %d streamToken: %ld. -[AVCMoments newRequestWithMediaType:] returned nil.
Could not start request for mediaType: %d streamToken: %ld. No session has been registered for requested stream token.
Asked to start moments request with invalid media type %d
Asked to start moments request but moments is disabled by server bag
-[CSDMomentsController startRequestWithMediaType:forStreamToken:requesteeID:reply:]
Could not find request for transaction ID %@
-[CSDMomentsController endRequestWithTransactionID:reply:]
-[CSDMomentsController registerStreamToken:requesterID:remoteIDSDestinations:remoteMomentsAvailable:reply:]
-[CSDMomentsController unregisterStreamToken:reply:]
v24@?0@"CSDClient"8@"<TUMomentsControllerXPCClient>"16
v16@?0@"NSString"8
@"TUICFQueryResult"24@?0@"NSString"8@"NSString"16
B20@?0@"TUCallProvider"8B16
B16@?0@"CSDCall"8
com.apple.telephonyutilities.callservicesd.TinCan
Not allowing requested %@ because user intent could not be reasonably validated to gain access to the microphone while in the background.
v16@?0@"CXCallSource"8
We have an active XPC connection but no corresponding CSDClient
CSDClientManager.m
B24@?0@8@"NSDictionary"16
com.apple.TUCallCenter
CSDCallDataSource.m
All CSDCallDataSource subclasses must override +callClass
com.apple.backboard.proximity.changed
v32@?0@"<CSDProximitySensorObserverDelegate>"8@"NSObject<OS_dispatch_queue>"16^B24
CSDVoIPApplicationMessageTransportTypeUnknown
CSDVoIPApplicationMessageTransportTypeNetworkExtension
CSDVoIPApplicationMessageTransportTypePushKit
<%@ %p type=%d
 socket=%d
 destination=%@
 initialLinkType=%lu
 remoteDestination=%@
 remoteDeviceUniqueIdentifier=%@
join
viewCall
requestScreenShare
continueActivity
viewLinkDetails
let-me-join
Phone
com.apple.TVWatchList
com.apple.TVMusic
callBack
sendMessage
deviceFamily
style
displayScale
scaleFactor
originalWidth
originalHeight
com.apple.InCallService
MPVoicemailDeleteMessageBulletinBoardActionIdentifier
MPCallBulletinBoardActionIdentifier
callservicesd launched
CSDIDSDualSessionProvider
v20@0:8B16
v24@0:8q16
v20@0:8I16
T@"<CSDIDSDualSessionProviderDelegate>",N,W
endedReason
TI,N,R
shouldUseSocketForTransport
TB,N,R
socket
Ti,N,R
destination
T@"NSString",N,R
initialLinkType
audioEnabled
TB,N
invitationTimeout
Tq,N
@"<CSDIDSDualSessionProviderDelegate>"16@0:8
v24@0:8@"<CSDIDSDualSessionProviderDelegate>"16
@"NSString"16@0:8
v24@0:8@"NSDictionary"16
v24@0:8@"NSData"16
v32@0:8@"NSData"16@"NSSet"24
v28@0:8@"NSData"16B24
CSDIDSChat
v32@0:8{CGSize=dd}16
v20@0:8i16
T@"<CSDIDSChatDelegate>",N,W
UUID
T@"NSUUID",N,R
sessionUUID
T@"TUHandle",N,R
hasSentInvitation
dateStartedConnecting
T@"NSDate",N,R
dateConnected
dateEnded
outgoing
video
mayRequireBreakBeforeMake
videoStreamToken
inputAudioPowerSpectrumToken
outputAudioPowerSpectrumToken
crossDeviceIdentifier
remoteFromID
failureContext
T@"CXCallFailureContext",N,R
upgradeSessionUUID
T@"NSUUID",N,C
muted
sendingAudio
sendingAudioData
sendingVideo
relaying
remoteUplinkMuted
remoteMomentsAvailable
shouldSuppressInCallUI
localSenderIdentityUUID
@"<CSDIDSChatDelegate>"16@0:8
v24@0:8@"<CSDIDSChatDelegate>"16
@"NSUUID"16@0:8
@"TUHandle"16@0:8
@"NSDate"16@0:8
@"CXCallFailureContext"16@0:8
v24@0:8@"NSUUID"16
v32@0:8@"<CXVideoAspectRatioDescriptor>"16@?<v@?@"NSArray"B>24
v24@0:8@"<CXVideoAspectRatioDescriptor>"16
CSDCallCenterObserver
T@"<CSDCallCenterObserverDelegate>",N,&
triggers
T@"<TUCallContainerPrivate>",N,R
@"<CSDCallCenterObserverDelegate>"16@0:8
v24@0:8@"<CSDCallCenterObserverDelegate>"16
@?<v@?@"CSDCall"Q>16@0:8
v24@0:8@?<v@?@"CSDCall"Q>16
@"<TUCallContainerPrivate>"16@0:8
@"TUConversation"24@0:8@"TUCall"16
TUCallContainerPrivate
@32@0:8@?16@?24
_allCalls
displayedCall
T@"TUCall",N,R
conferenceCall
frontmostCall
frontmostAudioOrVideoCall
existingCallsHaveMultipleProviders
@"NSArray"16@0:8
@"TUCall"32@0:8@?<B@?@"TUCall">16@?<q@?@@>24
@"TUCall"16@0:8
CSDCallCenterObserverDelegate
v32@0:8@"<CSDCallCenterObserver>"16@"CSDCall"24
v24@0:8@"<CSDCallCenterObserver>"16
CSDPendingMembershipTrackerMessenger
v56@0:8@16@24@32@40@48
v52@0:8@16@24@32@40B48
v56@0:8@"NSSet"16@"CSDConversation"24@"TUConversationLink"32@"NSUUID"40@"TUConversationMember"48
v52@0:8@"NSSet"16@"CSDConversation"24@"NSUUID"32@"TUConversationMember"40B48
CSDPendingMembershipTrackerDelegate
v48@0:8@16@24@32@40
v40@0:8@16@24@32
v48@0:8@"CSDPendingMembershipTracker"16@"TUConversationMember"24@"CSDConversation"32@"NSData"40
v40@0:8@"CSDPendingMembershipTracker"16@"TUConversationMember"24@"NSUUID"32
CSDDirtyCallManager
@?<v@?@"CSDCall">16@0:8
v24@0:8@?<v@?@"CSDCall">16
v24@0:8@"CSDCall"16
CSDConversationServerBag
activeParticipantPruningTimeout
sessionCleanupTimeout
AVCBlobRecoveryGracePeriod
AVCBlobRecoveryTimeout
rebroadcastTimeThreshold
activeParticipantRefreshDelay
automaticUpgradingEnabled
modernGFTEnabled
sharePlayVersionCheckEnabled
maxActiveParticipantFetchRetries
maxKickMemberRetries
linkPseudonymExpiry
inactiveLinkPseudonymExpiry
inactiveLinkCacheLimit
webNicknameLengthLimit
activityIdentifierBundleIDMapping
T@"NSDictionary",N,R
messageRetryMaxAttempts
messageRetryIntervalMillis
@"NSDictionary"16@0:8
@"NSString"24@0:8@"NSString"16
TUConversationLinkDescriptorDataSource
B32@0:8@16^@24
Q32@0:8@16^@24
@48@0:8@16Q24Q32^@40
v48@0:8@16Q24Q32@?40
Q44@0:8B16q20@28^@36
v44@0:8B16q20@28@?36
Q48@0:8@16q24@32^@40
v48@0:8@16q24@32@?40
conversationLinkDescriptorDataSourceDelegate
T@"<TUConversationLinkDescriptorDataSourceDelegate>",N,&
@"<TUConversationLinkDescriptorDataSourceDelegate>"16@0:8
v24@0:8@"<TUConversationLinkDescriptorDataSourceDelegate>"16
B32@0:8@"NSArray"16^@24
v32@0:8@"NSArray"16@?<v@?B@"NSError">24
Q32@0:8@"NSPredicate"16^@24
v32@0:8@"NSPredicate"16@?<v@?Q@"NSError">24
@"NSArray"48@0:8@"NSPredicate"16Q24Q32^@40
v48@0:8@"NSPredicate"16Q24Q32@?<v@?@"NSArray"@"NSError">40
Q44@0:8B16q20@"NSPredicate"28^@36
v44@0:8B16q20@"NSPredicate"28@?<v@?Q@"NSError">36
Q48@0:8@"NSDate"16q24@"NSPredicate"32^@40
v48@0:8@"NSDate"16q24@"NSPredicate"32@?<v@?Q@"NSError">40
Q48@0:8@"NSSet"16q24@"NSPredicate"32^@40
v48@0:8@"NSSet"16q24@"NSPredicate"32@?<v@?Q@"NSError">40
Q48@0:8@"NSString"16q24@"NSPredicate"32^@40
v48@0:8@"NSString"16q24@"NSPredicate"32@?<v@?Q@"NSError">40
CSDConversationLinkManagerDelegate
v32@0:8@"CSDConversationLinkManager"16@"NSArray"24
OS_nw_activity
CSDScreenSharingActivityManagerDelegate
v36@0:8@16@24B32
v36@0:8@"CSDScreenSharingActivityManager"16@"<TUScreenShareAttributes>"24B32
v36@0:8@"CSDScreenSharingActivityManager"16@"NSError"24B32
TUScreenShareAttributes
T@"NSNumber",N,&
originalResolution
T@"NSValue",N,&
@"NSNumber"16@0:8
v24@0:8@"NSNumber"16
@"NSValue"16@0:8
v24@0:8@"NSValue"16
B24@0:8@"<TUScreenShareAttributes>"16
currentDeviceFamily
defaultDisplayScale
T@"NSNumber",N,R
defaultScaleFactor
B36@0:8@16@24B32
B32@0:8@16@24
q32@0:8@16@24
B40@0:8@16@24@32
B24@0:8@"TUHandle"16
B36@0:8@"TUHandle"16@"NSString"24B32
B24@0:8@"TUCall"16
B24@0:8@"CSDCall"16
B36@0:8@"NSSet"16@"NSString"24B32
B32@0:8@"NSSet"16@"NSString"24
q32@0:8@"NSSet"16@"NSString"24
B40@0:8@"NSString"16@"NSString"24@"NSString"32
CSDAVCMoments
@48@0:8q16@24@32@40
@32@0:8C16C20@24
T@"<CSDAVCMomentsDelegate>",N,R
streamToken
capabilities
activeRequestCount
pendingRequestCount
@"<CSDAVCMomentsDelegate>"16@0:8
@48@0:8q16@"NSString"24@"<CSDAVCMomentsDelegate>"32@"OS_dispatch_queue"40
@"<CSDAVCMomentsRequest>"32@0:8C16C20@"NSString"24
CSDTTYProviderObserver
transportMethod
TUFeatureFlags
conversationOneToOneModeEnabled
expanseEnabled
sharePlayDisabled
ftvSpatialAudioEnabled
FTUserScore
gondolaBoat
gondolaCreateCallUI
gondolaOpenLinksInFaceTime
gondolaNotifications
gondolaOar
gondolaShareLinkInAdvance
gondolaEnforceDelegationIntent
kettleFeatureComplete
livePhotoXPCServiceEnabled
nonInterruptingCalls
qrPluginEnabled
qrPluginEncryptionEnabled
supportsScreenSharing
individualAudioVideoToggleEnabled
expanseBTSwitchingEnabled
TTRBannerEnabled
aTVHandoff
suggestionsReloadForSelectedRecipients
CSDIDSService
T@"<CSDIDSServiceDependencies>",N,R
allAliases
devices
callerID
countryCode
telephonyCapableDeviceExists
relayCapableDeviceExists
defaultPairedDeviceExists
pairedDeviceExists
hasActiveAccounts
defaultPairedDevice
T@"IDSDevice",N,R
pairedDevice
availableOutgoingRelayCallerIDs
T@"NSSet",N,R
localDeviceUniqueID
account
T@"IDSAccount",N,R
@"<CSDIDSServiceDependencies>"16@0:8
@"IDSDevice"16@0:8
@"NSSet"16@0:8
@"IDSAccount"16@0:8
@"IDSDevice"24@0:8@"NSString"16
v32@0:8@"<IDSServiceDelegatePrivate>"16@"OS_dispatch_queue"24
v24@0:8@"<IDSServiceDelegatePrivate>"16
B24@0:8@"NSString"16
CSDAVCMomentsDelegate
v28@0:8@"<CSDAVCMoments>"16I24
v40@0:8@"<CSDAVCMoments>"16@"<CSDAVCMomentsRequest>"24@"NSError"32
v56@0:8@"<CSDAVCMoments>"16@"<CSDAVCMomentsRequest>"24@"NSURL"32@"NSURL"40@"NSError"48
v24@0:8@"<CSDAVCMoments>"16
CSDManagedDeviceMonitorDelegate
v24@0:8@"TUCall"16
CSDAVCMomentsRequest
C16@0:8
transactionID
mediaType
TC,N,R
requesterID
requesteeID
CSDNeighborhoodActivityConduitDelegate
v48@0:8@16@24@32@?40
v24@0:8@"TUNearbyDeviceHandle"16
v48@0:8@"TUConversation"16@"TUNearbyDeviceHandle"24@"TUConversationActivity"32@?<v@?B@"NSError">40
TUContactsDataSource
@40@0:8@16@24^@32
r^v24@0:8@16
@"NSDictionary"40@0:8@"NSArray"16@"NSArray"24^@32
@"CNContact"40@0:8@"NSString"16@"NSArray"24^@32
@"NSArray"40@0:8@"NSPredicate"16@"NSArray"24^@32
r^v24@0:8@"CNContact"16
@"CNContact"32@0:8@"NSString"16@"NSArray"24
OS_dispatch_source_timer
IDSCTSIM
SIMIdentifier
phoneNumber
label
isDefaultVoiceSIM
slot
mobileCountryCode
mobileNetworkCode
CNKeyDescriptor
OS_xpc_object
CSDIDSSessionProvider
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
hash
T#,N,R
debugDescription
B24@0:8@"Protocol"16
TUCallContainer
@24@0:8@?16
@20@0:8i16
Q24@0:8@?16
B24@0:8@?16
B20@0:8i16
currentCalls
currentVideoCalls
currentAudioAndVideoCalls
incomingCalls
displayedCalls
displayedAudioAndVideoCalls
conferenceParticipantCalls
callsHostedElsewhere
callsWithAnEndpointElsewhere
callsHostedOrAnEndpointElsewhere
callsOnDefaultPairedDevice
incomingCall
incomingVideoCall
activeVideoCall
currentVideoCall
currentCallCount
currentVideoCallCount
currentAudioAndVideoCallCount
callCountOnDefaultPairedDevice
hasCurrentCalls
hasCurrentAudioCalls
hasCurrentVideoCalls
anyCallIsHostedOnCurrentDevice
anyCallIsEndpointOnCurrentDevice
currentCallGroups
currentAudioAndVideoCallGroups
callGroupsOnDefaultPairedDevice
@"NSArray"24@0:8@?<B@?@"TUCall">16
@"NSArray"20@0:8i16
@"NSArray"24@0:8@"NSUUID"16
@"TUCall"24@0:8@?<B@?@"TUCall">16
@"TUCall"20@0:8i16
@"TUCall"24@0:8@"NSString"16
@"TUCall"24@0:8@"NSArray"16
Q24@0:8@?<B@?@"TUCall">16
B24@0:8@?<B@?@"TUCall">16
NSSecureCoding
supportsSecureCoding
OS_dispatch_source
NSCopying
@24@0:8^{_NSZone=}16
NSCoding
v24@0:8@"NSCoder"16
@24@0:8@"NSCoder"16
_TtC13callservicesd28AnyAudioInterruptionProvider
boxed
_beginOrUpdate
_end
_resetState
_activeDescriptor
_TtC13callservicesd17BlockedCallFilter
callservicesd.BlockedCallFilter
init()
Sending updated policy for %s: %{bool}d
Sending RPC event: %s %s
Sending policy infos: %s
No policy info to send, skipping
CSDTinCanIDSProviderDelegate
@40@0:8@16@24@32
isAccountActive
isDestinationValid
destinationsGenerator
outgoingSessionProviderGenerator
outgoingChatGenerator
contactsDataProvider
@"<CSDIDSChat>"36@?0@"CSDExternalIDSDualSession"8@"TUHandle"16B24@"NSDictionary"28
callservicesd.TinCanIDSProviderDelegate
init(capabilities:queue:)
CSDMessagingCallMessage could not be read
Received TinCan message: %@
TinCan message was of unknown type %@: %@
Could not find chat for set muted action  %@. All chats: %@
Sending TinCan message for sender mute uplink: %@
Failing action: %@ since its not relaying
Could not find chat for set relaying action  %@. All chats: %@
Cannot start TinCan IDS chat using service %@ because account is not active
Cannot start TinCan IDS chat using handle because IDS destination was invalid
Created TinCan session to destinations %@ with options: %@
Starting TinCan IDS chat: %@
v20@?0@"NSArray"8B16
Tried to make an outgoing call when we already had a ringing call with the same destination
TinCan IDS chat was canceled
SenderMuteUplink
Server bag does not support quick relay since current version is unspecified
qr-invitations-enabled
Server bag does not support quick relay since minimum version is unspecified
quickRelaySupported
CSDFaceTimeIDSProviderDelegateServerBag
loaded
B24@0:8@16
Q16@0:8
superclass
description
CSDUserIntentManager
v24@0:8@16
privateAPIValidator
$__lazy_storage_$_applicationStateValidator
donatedIntentValidator
backgroundBluetoothAccessValidator
mediaRemoteStateValidator
Validating intent for call source: %@ callSourceHasReasonableUserIntent: %@ isUserIntentConfident: %@ (%@)
Playing alert for background mic access: %@
callservicesd.UserIntentManager
Enabling file protection class for conversation persistence storage
Cannot cast value: %@ to type: %@
CSDEmergencyCallbackCapabilities
_emergencyCallbackPossible
emergencyCallbackCapabilitiesDidChange
preventDetachAfterEmergencyCallTimeoutDeterminationHandler
dispatchAfterHandler
dispatchCancelHandler
callCenterObserver
preventDetachAfterEmergencyCallTimeoutWorkItem
emergencyCallbackPossible
callservicesd.EmergencyCallbackCapabilities
v24@?0@"CSDCall"8Q16
Starting prevent detach after emergency call timer with timeout of %d seconds. Marking emergency callback possible
Prevent detach after emergency call timer fired. Marking emergency callback as no longer possible
_CTServerConnectionCarrierSettingsCopyValue - encountered error %d %d
PreventDetachAfterEmergencyCallTimer
@?<v@?>16@0:8
v24@0:8@?<v@?>16
_TtC13callservicesdP33_7D766AEB715565F6893650EFEF7EA3D422OneShotCancellationBox
lock
state
CSDPowerAssertionManager
powerAssertion
powerAssertionDescription
routeController
acquirePowerAssertionHandler
releasePowerAssertionHandler
com.apple.telephonyUtilities.callservicesd.HomePodRelay
B16@?0@"TUCall"8
PowerAssertionManager: Call relayed to HomePod, call=%@
releasing PowerAssertion %@
acquired PowerAssertion %@
_TtC13callservicesd32AudioInterruptionProviderFactory
AudioAccessory5,1
callservicesd.LetMeInRequestorKeyAgreement
CSDLetMeInRequestorKeyAgreement
B16@0:8
v16@0:8
localKey
requestKey
responseKey
isExhausted
Failed to derive let me in requestor's public key from the locally-generated private key.
Failed to retrieve combined data from encrypted LMI response.
HoldMusicDescriptor()
callservicesd
silenceUnknownCallersEnabled
maxJunkLevel
v24@0:8Q16
v24@0:8@?16
callContainerClosure
notificationCenter
T@"<CSDCallCenterObserverDelegate>",N,W,Vdelegate
TQ,N,Vtriggers
Could not retrieve conversation from notification %@
Could not retrieve call with conversation group UUID %@
Received notification %@ for unrecognized trigger
Call not specified in notification %@
TQ,N
NSObject
#16@0:8
_TtC13callservicesd33GroupFaceTimeNotificationProvider
conversationManager
ftNetworkSupport
notificationIdentifiersByConversationUUID
carPlayNotificationIdentifiersByConversationUUID
faceTimeNotificationCenter
facetimeIsShowingOnScreen
unlockAndOpenSensitiveURL
localizeConversationName
localizeHandleName
localizeHandleNameWithConversation
notificationType
categories
replace
removeNotification
updateBadgeValue
Unknown notification response received
continueActivity action for notification: %@
Ignoring notification response %@ because a pseudonym is missing/could not be typecasted in userInfo
Failed to construct FaceTime app URL to view link details
Launching FaceTime for notification response via url %@
com.apple.facetime
com.apple.calls.conversationkit.multiwayviewcontroller.icsonscreenchangednotification.isonscreen
com.apple.calls.conversationkit.multiwayviewcontroller.icsonscreenchangednotification.isoffscreen
MAYBE_NICKNAME_%@
TelephonyUtilities
group-facetime-invite
group-facetime-participant-join
ACCEPT_SHARE_SCREEN_REQUEST
group-facetime-participant-screenshare-request
group-facetime-moments-request
group-facetime-let-me-in-approved
VIEW_LINK_DETAILS
group-facetime-let-me-in-request-pre-conversation
Ignoring adding notification request %@ since valid network is not reachable
JOIN_FACETIME_CALL
GFT_PARTICIPANT_REQUESTING_SHARE_SCREEN
No notification for conversation UUID %@
Tracked pending member changed, but not a locally owned link -- ignoring %@ %@
Failed to determine conversation link for pending member notification with conversation %@ and conversationLink %@
Not posting pending member notification becaue Group FaceTime is not supported (GreenTea device or doesn't support multiway)
GFT_LET_ME_IN_REQUESTED
authorizationRequest-
v16@?0@"NSArray"8
Skip posting pending member notification because hasJoined: %{BOOL}d, ignoreLMIRequests: %{BOOL}d for conversation: %@
Not posting LMI approval notification because the conversation is currently showing on screen
GFT_LET_ME_IN_GRANTED
Handling notification %@
Did not find expected pending chat information
momentsStartedRemoteCapture received invalid notification object: %@
could not find conversation for notification stream token: %@
FACETIME_PHOTO_SUCCESS_REMOTE_CAPTURE
FACETIME_PHOTO_NOTIFICATION_TITLE
could not find participant for participant in conversation: %@ for requesterID: %@
Handle momentsStartedRemoteCapture in-app
could not find conversation or call for notification stream token: %@
callservicesd/GroupFaceTimeNotificationProvider.swift
TUConversationManagerDelegate
v44@0:8@16@24Q32B40
v48@0:8@16@24Q32@40
v24@0:8@"TUConversationManager"16
v32@0:8@"TUConversationManager"16@"TUConversation"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversation"32
v32@0:8@"TUConversationManager"16@"NSArray"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32
v32@0:8@"TUConversationManager"16@"TUConversationActivity"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivityEvent"32
v44@0:8@"TUConversationManager"16@"TUConversation"24Q32B40
v32@0:8@"TUConversationManager"16@"NSString"24
v48@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32@"TUConversationNotice"40
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSSet"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationMember"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSData"32
v40@0:8@"TUConversationManager"16@"TUConversationMember"24@"TUConversationLink"32
v48@0:8@"TUConversationManager"16@"TUConversation"24Q32@"TUConversationActivitySession"40
v36@0:8@"TUConversationManager"16@"<TUScreenShareAttributes>"24B32
v32@0:8@"TUConversationManager"16@"NSError"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivitySession"32
_TtC13callservicesd29SoundDescriptorActionResolver
deviceIsHomePod
playersForSounds
Error creating audio player for %@ sound: %@
CSDFaceTimeLivePhotosIDSService
@16@0:8
sharedInstance
T@"CSDFaceTimeLivePhotosIDSService",N,R
com.apple.private.alloy.facetime.lp
remoteParticipantHandles
activeParticipantHandles
notificationProviderIdentifier
T@"NSArray",N,C
T@"NSString",N,C
_TtC13callservicesd33AVAudioClientInterruptionProvider
activeDescriptor
Setting audio session properties: %@
Setting audio mixing: %@
Setting mode to A2DP: %@
Starting audio session
v20@?0B8@"NSError"12
Failed to start audio session: %@
Successfully started audio session
kAUVoiceIOProperty_OperationMode
kMXSessionProperty_CreateSpeakerDevice
kMXSessionProperty_InitiationDescription
kMXSessionProperty_ClientPriority
kMXSessionProperty_AudioMode
kMXSessionProperty_AudioCategory
CSDFaceTimeMultiwayIDSService
T@"CSDFaceTimeMultiwayIDSService",N,R
com.apple.private.alloy.facetime.multi
_TtC13callservicesd34AVAudioSessionInterruptionProvider
audioSession
isLocal
_activationContext
Setting audio activation context: %@ for provider %@
Error setting audio activation context to %@ for provider %@: %@
Successfully set audio activation context
Error overriding output audio port to AVAudioSessionPortOverrideNone: %@
Deactivating and setting audio interruption priority: %ld for provider %@
Error deactivating and setting audio interruption priority to %ld for provider %@: %@
Successfully deactivated and set audio interruption priority
Setting audio interruption priority: %ld for provider %@ category %@ mode %@
Error setting audio interruption priority to %ld for provider %@: %@
Successfully set audio interruption priority
Setting audio active: %@ options: %ld for provider %@ category %@ mode %@
Error setting audio active to %@ for provider %@: %@
Did not deactivate audio successfully, but error code was %d so assuming success
Successfully set audio active: %@ options: %ld
Setting audio category: %@ mode: %@ for provider %@
Error setting audio category to %@ and mode to %@ for provider %@: %@
Successfully set audio mode
.foregroundRunning
.backgroundRunning
.backgroundSuspended
CSDProcessObserver
@32@0:8@16@24
i16@0:8
@?16@0:8
processInfoByBundleIdentifier
applicationMonitor
processStateChanged
currentProcessIdentifier
T@?,N,C
v16@?0@"NSDictionary"8
callservicesd.ProcessObserver
CSDProcessObserverProtocol
@?<v@?iq>16@0:8
v24@0:8@?<v@?iq>16
@"NSArray"24@0:8@"NSString"16
@"NSDictionary"24@0:8@"NSString"16
v32@0:8@"NSString"16@?<v@?@"NSDictionary">24
_TtC13callservicesd28FaceTimeNotificationProvider
openURL
%@ does not handle response with identifier %@
Did not find expected pending chat uuid information
FACETIME_AUDIO_SERVICE
facetime-invite-first-unlock
FACETIME_SERVICE
FACETIME_%@_CALL_FIRST_UNLOCK_%@_BODY
FACETIME_CALL_FIRST_UNLOCK_TITLE_%@
callservicesd.FaceTimeNotificationProvider
blocked by screen time
allowed when downtime expires
allowed when app limits expire
CSDSharedConversationServerBag
fitnessPlusAppBundleID
fitnessPlusDaemonBundleID
TQ,N,R
activity-identifier-to-bundleIDs
Server bag does not have a value for %@, so returning the default one of %@ seconds.
Got %@ from server bag with a value of: %@
com.apple.tv.watch-together
com.apple.Music.listen-together
com.apple.Fitness
com.apple.fitcored.session
receive-message-retry-interval-millis
receive-message-retry-max-attempts
Couldn't find bundleID %@ in activityIdentifierMap %@
No bundleID specified, but fallback is specified
web-nickname-length-limit
inactive-link-cache-limit
inactive-link-pseudonym-expiry
link-pseudonym-expiry
qr-kick-member-retries
qr-active-participant-fetch-retries
shareplay-version-check-enabled
qr-session-supports-modern-gft
qr-session-ft-upgrade-enabled
qr-session-participant-refresh-delay
qr-session-rebroadcast-threshold
qr-session-avc-blob-recovery-timeout
qr-session-avc-blob-recovery-grace-period
qr-session-cleanup-timeout
qr-participant-prune-timeout
routesDidChangeHandler
didPickRouteHandler
didDeselectAllRoutesHandler
supportsPrimaryCalling
hasRelayiCloudAccount
idsDeviceForIDSDeviceIdentifier
queue
nearbyDeviceMonitor
idsDeviceDestinationResolver
nearbyDeviceRoutes
activeRelayClientTransport
currentCallsSupportNearbyDevices
route: %@
Could not find route to pick for %@. All nearby device routes: %@
Error activating companion link client: %@
callservicesd.NearbyDeviceRouteProvider
callChanged
dirtyCallsArray
dirtyCallsSet
callservicesd.DirtyCallManager
Adding call %@ to dirty calls pool
Asked to dispatch drain the pool
Draining pool with dirty calls: %@
v16@?0@"CSDCall"8
CSDPendingMembershipTracker
T@"<CSDPendingMembershipTrackerMessenger>",N,W,Vmessenger
T@"<CSDPendingMembershipTrackerDelegate>",N,W,Vdelegate
_TtC13callservicesd37MemoryPendingMembershipTrackerStorage
underlyingStorage
_TtC13callservicesdP33_29A092E378431E19BF8C7D5BE1CFB24A26SharedPendingMembershipBag
Removed group from pending membership tracker storage {underlyingStorage: %@}
Remoted info from pending membership tracker storage {underlyingStorage: %@}
Added info to pending membership tracker storage {underlyingStorage: %@}
No info matching local user action -- ignoring {uuid: %@, handle: %@}
Processing local user action for pending member {info: %@, action: %@, member: %@, conversation.groupUUID: %@}
Local user action for pending member attempted, disabled -- ignoring
No info matching remote user action -- ignoring {uuid: %@, handle: %@}
Processing remote user action for pending member {info: %@, action: %@, member: %@, from: %@, transactionUUID: %@, conversation.groupUUID: %@}
Client remote action does not match what we expect -- ignoring {sender: %@, from: %@, info.transactionUUID: %@, transactionUUID: %@}
Hosted remote action does not match what we expect -- ignoring {expectedDestinations: %@, from: %@, info.transactionUUID: %@, transactionUUID: %@}
Hosted remote action is from a kicked handle -- ignoring {kickedHandles: %@, from: %@, info.transactionUUID: %@, transactionUUID: %@}
Remote user action for pending member attempted, disabled -- ignoring
lmi-delegation-disabled
Issue storing delegated pending membership info -- aborting {error: %@}
Attempting to track delegated pending member, disabled -- ignoring
Neither a conversation nor a link with handles was specified -- ignoring
Issue storing pending membership info -- aborting {error: %@}
Track pending member, delegation disabled
Filtered in the following active handles from list of members eligible for link approval: %@
active handles: %@
members eligible for link approval: %@
Attempting to track pending member, disabled -- ignoring
_TtCC13callservicesd20CompanionLinkManager24AuthenticationController
clientsPendingAuthentication
v16@?0I8i12
v16@?0@"NSError"8
Started CompanionLink for device authentication
Failed to start CompanionLink for device authentication: %s
Successfully authenticated device %@
Error authenticating device: %s
v8@?0
Unable to prompt for password entry - no destination device!
PAIRING_CODE_ENTRY_MESSAGE
PAIRING_CODE_TITLE
PAIRING_CODE_ENTRY_HINT
PAIRING_CODE_ENTRY_ACCEPT_BUTTON
PAIRING_CODE_ENTRY_CANCEL_BUTTON
Failed to create CFUserNotification for password entry. Error: %s
User cancelled pairing entry
Received entered PIN %s
Prompting user for password for device %@
PAIRING_CODE_ENTRY_MESSAGE_FMT
CSDDuetDonater
v40@0:8@16@24Q32
maxDuration
unknownShortCallSignal
knownCallerSignal
junkCallSignal
linkCreatedSignal
silenceUnknownCallersEnabledObserver
callservicesd.DuetDonater
donate junkCallSignal event call=%@ error=%@
donate known caller mode event context=%@ error=%@
donate unknownShortCallSignal event call=%@ error=%@
donated call context data=%@ for call=%@
link created signal event error=%@
com.apple.telephonyUtilities.unknownShortCall
com.apple.telephonyUtilities.knownCallerMode
com.apple.telephonyUtilities.junkCallReceived
com.apple.facetime.call-link-created
v36@0:8@16@24i32
v44@0:8@16@24@32B40
dataSource
T@"<CSDReporterDataSource>",N,W
@"<CSDReporterDataSource>"16@0:8
v24@0:8@"<CSDReporterDataSource>"16
v40@0:8@"CSDReportingController"16@"CSDCall"24Q32
v32@0:8@"CSDReportingController"16@"CSDCall"24
v24@0:8@"CSDReportingController"16
v36@0:8@"CSDReportingController"16@"CSDMessagingRelayMessage"24B32
v32@0:8@"CSDReportingController"16@"CXTransactionGroup"24
v40@0:8@"CSDReportingController"16@"CXAction"24@"CSDCall"32
v32@0:8@"CSDReportingController"16@"CSDMomentsUsageReport"24
v40@0:8@"CSDReportingController"16@"TURoute"24@"CSDCall"32
v36@0:8@"CSDReportingController"16@"NSString"24i32
v32@0:8@"CSDReportingController"16@"TUConversation"24
v40@0:8@"CSDReportingController"16@"NSArray"24@"TUConversation"32
v32@0:8@"CSDReportingController"16@"CSDIDSChat"24
v40@0:8@"CSDReportingController"16@"NSArray"24@"NSUUID"32
v32@0:8@"CSDReportingController"16@"NSString"24
v44@0:8@"CSDReportingController"16@"NSUUID"24@"RTCSecureHierarchyToken"32B40
v48@0:8@"CSDReportingController"16@"TUConversationActivitySession"24@"NSDate"32@"NSDate"40
v32@0:8@"CSDReportingController"16@"TUConversationLink"24
v36@0:8@"CSDReportingController"16@"TUConversation"24B32
@32@0:8:16@24
com.apple.callservicesd.CompanionRpcErrorDomain
_TtC13callservicesd21CompanionRpcMessenger
<CompanionRpcDefinition: 
<CompanionEventDefinition: 
com.apple.callservicesd.policyInfoUpdated
com.apple.callservicesd.requestDisconnect
com.apple.callservicesd.joiningNotification
com.apple.callservicesd.contactInfoUpdate
com.apple.callservicesd.requestDeviceHandle
com.apple.callservicesd.activitySessionAvailable
com.apple.callservicesd.activitySessionNotAvailable
com.apple.callservicesd.cancelAddMember
com.apple.callservicesd.tvLaunched
com.apple.callservicesd.requestAddMember
MessageDictionary
Unknown; see NSUnderlyingErrorKey
Protobuf decoding failed
Protobuf encoding failed
Invalid message content
_TtC13callservicesd23EmptyDescriptorProvider
CSDCallController
callStateController
dataSources
dirtyCallManager
T@"CSDCallStateController",N,W,VcallStateController
callContainer
callservicesd.CallController
resolver
audioInterruptionProviderPool
ringtoneProvider
soundProvider
holdMusicProvider
discoveryModeProvider
deferredEndWorkItem
pendingExpeditedEndInterruptionUUIDs
endInterruptionDelay
mediaServicesWereResetObserver
audioSessionInterruptionObserver
audioController
callservicesd.CSDAudioController
callUUID: %@
Attempted to expedite deferred end interruption block prematurely, so pending the UUID %@
Expediting deferred end interruption work item
com.apple.telephonyutilities.callservicesd.audiocontroller
v16@?0@"NSNotification"8
notification: %@
Other interruption ended so re-interrupting if necessary
Resetting state
Setting audio mixing: false
Stopping audio session
resolutionChangedHandler closure invoked
oldDescriptor: %@ descriptor: %@ notifyUnconditionally: %@
Ending interruption immediately since there is no longer a resolved descriptor
Stopping sound playback
Ending discovery mode
An end interruption was deferred but we were asked to update to a new descriptor, so canceling the deferred end
Deferring end interruption by %.2f sec, since descriptor has an interruption deferred end descriptor and there is no pending expedited end interruption
Ending interruption immediately, since descriptor has an interruption deferred end descriptor and there is a pending expedite for UUID %@
Decreasing priority of other AVAudioSession interruption provider %@ to Default
updating mic attribution %@
No provider returned for descriptor %@
No existing proxy AVAudioSession interruption provider for ID %u, creating a new one
Created AVAudioSession interruption provider %@
Starting discovery mode
Asked to begin or update playback of hold music but new descriptor is equal to activeDescriptor so doing nothing
speechSynthesizerEventHandler invoked
Hold music provider speech synthesizer finished utterance, but hold music provider is no longer active, so not invoking playback continuation
Hold music provider speech synthesizer finished utterance, and hold music provider is still active, so invoking playback continuation
Sound playback completed and we had a deferred end descriptor, so expediting end interruption for call with UUID %@
Requested to end playback, stopping alert: %@
factory
localAVAudioSessionInterruptionProvider
proxyAVAudioSessionInterruptionProvidersByAudioSessionID
avAudioClientInterruptionProvider
CSDMomentsUsageReport
d16@0:8
@52@0:8i16q20q28d36d44
availability
photoRequestSuccessCount
photoRequestFailureCount
medianRequestDuration
meanRequestDuration
Ti,N,R,Vavailability
Tq,N,R,VphotoRequestSuccessCount
Tq,N,R,VphotoRequestFailureCount
Td,N,R,VmedianRequestDuration
Td,N,R,VmeanRequestDuration
callservicesd.MomentsUsageReport
MomentsUsageReport (Availability: 
_TtC13callservicesd37RingtoneProviderAlertPlaybackObserver
didBeginPlaying
_TtC13callservicesd16RingtoneProvider
contactStore
currentAlert
endedPlayingSemaphore
alertGenerator
playbackObserverGenerator
Alert configuration has changed, but unable to create TLAlert using configuration %@
Requested to begin or update playback, but alert configuration is unchanged so doing nothing
Alert configuration has changed, playing alert %@
Playback finished with completion type %@ for alert %@
Playback failed for alert %@: %@
Started playing alert: %@
Setting shouldIgnoreRingerSwitch: %@
Setting externalToneFileURL: %@
Setting vibrationIdentifier: %@
Setting toneIdentifier: %@
From provider, using externalToneFileURL %@
From activity alert %@, using tone %@, vibration %@, bypass ringer %@
Contact retrieval failed for contact identifier %@: %@
v24@?0q8@"NSError"16
TLAlertPlaybackObserver
v24@0:8@"TLAlert"16
CSDConversationLinkManager
v56@0:8@16@24@32q40@?48
v48@0:8@16@24q32@?40
v44@0:8@16@24B32@?36
v28@0:8B16@?20
v32@0:8@16@?24
v36@0:8@16B24@?28
@32@0:8@16^@24
v40@0:8@16@24@?32
serverBag
renewPseudonymTask
linkSyncManager
generateKeyAgreement
T@"<CSDConversationLinkManagerDelegate>",N,&,Vdelegate
activatedConversationLinks
activatedLinks
T@"NSArray",N,R
v32@0:8@16@24
ConversationLinkSync: Failed to persist links %@ {error: %@}
ConversationLinkSync: Finished persisting to data source
Informed by IDS that pseudonym was updated.  Updating expiration date in database.
Updating expiration of conversation link with pseudonym %@ failed, unable to find link with error %@
Saving expiration date for pseudonym %@ failed with error %@
Informed by IDS that pseudonym was removed.  Purging link from data source.
Removal of invalid conversation link with pseudonym %@ failed, unable to find link with error %@
Removal of invalid conversation link with pseudonym %@ failed with error %@
GondolaPseudonymExpiryDuration
Asking to renew pseudonym for %@
No IDS unique ID found, cannot schedule renew.
Could not find index of our own uniqueID, aborting...
Our pseudonym generated this link, sending renew request now.
v28@?0B8@"NSDate"12@"NSError"20
Updated expiration date for pseudonym %@ to %@
Cannot normalize value for originator handle %@
Unable to generate publicKey compact representation for private key, was compactRepresentable set to true when initializing the private key?
Provisioning pseudonym to generate link for groupUUID: %@, originatorHandle: %@, invitedHandles: %@, isActivated: %@, linkLifetimeScope: %@
v24@?0@"IDSPseudonym"8@"NSError"16
Failed to provision pseudonym with error from IDS, pseudonym was nil
Successfully provisioned pseudonym %@ and link descriptor %@
Failed to provision pseudonym with error from IDS: %@
v24@?0@"NSArray"8@"NSError"16
Failed to encrypt let me in response because either the type was wrong (%@), missing the link (%@), or approval was not specified (%@)
Failed to retrieve link with error %@
Failed to retrieve link
Failed to initialize key agreement from link's private key, or private key is absent, aborting.
Failed to retrieve the data bytes from the let me in response, or failed to init a CSDMessagingEncryptedConversationMessage
Failed to encrypt let me in response, aborting.
Checking validity of pseudonym %@
Asked to check validity of link for pseudonym %@ but none was found.
Could not retrieve IDS pseudonym object for pseudonym string %@
Removing invalid conversation link with pseudonym %@
Removing conversation link for pseudonym %@
Invalidating pseudonym %@
Asked to invalidate link for pseudonym %@ but none was found.
Asking IDS to revoke pseudonym because it was locally generated for link being invalidated
Pseudonym invalidation failed with error %@
validateAllLinks: No active accounts on the service, skipping link validation for now
validateAllLinks: Checking for invalid links
No descriptors fetched -- validation over {error: %@}
validateAllLinks: Links must be newer than date %@
validateAllLinks: We have some invalid links to cleanup {count: %@, pseudonyms: %@}
validateAllLinks: Finished removing invalid links {count: %@, error: %@}
Asked for inactive link, returning: %@
Count of inactive links (%{public}@) reached the cache limit (%{public}@); not provisioning another.
Fetching conversation link descriptor count failed with error %@
%@ provisioned inactive link %@
More inactive links exist than needed -- not generating %@
Exception caught when trying to activate link %@
In activating link, setting invitedHandles to %@
In activating link, updating the groupUUID from %@ to %@
Asked to renew link for pseudonym %@ but none was found.
Link manager asked to generate link for groupUUID %@ with invitedHandles: %@
Refusing generation of a link descriptor for groupUUID %@ as one already exists %@ (error: %@)
Fetch attempt with error %@
Failed to add invited member handles with error %@
Cannot add invited member handles for pseudonym %@ because no link matching this pseudonym was found
Failed to decrypt conversation message because the encrypted message either was missing the public key (%@) or missing the encrypted bytes (%@)
Failed to decrypt let me in response because the requestor's key agreement has already been used to decrypt a response.
Failed to decrypt let me in response, aborting.
Failed to decrypt let me in request, aborting.
Failed to encrypt let me in request because either the type was wrong (%@) or missing the link (%@)
Failed to retrieve the data bytes from the let me in request, or failed to init a CSDMessagingEncryptedConversationMessage
Failed to generate keypair for let me in requestor, aborting.
Failed to encrypt let me in request, aborting.
Asked to set link name for pseudonym %@ but none was found.
Updated link name for pseudonym %@
Saving link name for pseudonym %@ failed with error %@
Link manager asked to generate TUConversationLinkDescriptor for received TUConversationLink %@ (not locally owned)
Received link %@ missing required field
%@ already existed and isUpdate: NO, ignoring
Failed to persist link %@
Link manager asked to generate link with invitedHandles: %@, originatorHandle: %@
ConversationLinkSyncManager
ConversationLinkSync: ConversationLinkSyncManager init
v16@?0@"<OS_xpc_object>"8
ConversationLinkCheckInActivity
^{os_state_data_s=I(?=b32I){os_state_data_decoder_s=[64c][64c]}[64c][0C]}16@?0^{os_state_hints_s=I*II}8
callservicesd.ConversationLinkManagerErrorType
IDSServicePseudonymDelegate
v32@0:8@"CSDIDSService"16@"IDSPseudonym"24
v24@0:8@"CSDIDSService"16
CSDTinCanIDSService
T@"CSDTinCanIDSService",N,R
com.apple.private.alloy.tincan.audio
moments-disabled
moments-request-timeout
callservicesd1
momentsDisabled
momentsRequestTimeout
Td,N,R
CSDMomentsServerBag
@24@0:8:16
CSDRTCReporter
relayDeviceRouteChangesByCallUUID
groupUUIDToConversationReportingSessions
conversationUUIDToConversationReport
groupUUIDToConversationInfo
callUUIDToCallReportingSessions
callUUIDtoConversationUUID
conversationGroupUUIDToCallUUID
callUUIDtoConversationGroupUUID
uuidToNWActivity
uuidToNWActivityConnecting
idsSessionUUIDToChatUUIDs
callInfosPendingScoreForCallUUIDs
userScoreEnabled
appleIDUtilities
callservicesd.RTCReporter
UserScore: ReportController: reached RTCReporter with current UUID: %@
UserScore: call UUID does not exist
UserScore: session was RTCReporting object session was nil
UserScore: session RTCCSDCallInfo object was nil
RTCReporter: Reporting message with session %@ userInfo %@
RTCReporter: Error while sending message with error: %@
com.apple.telephonyutilites.phone
bundleIdentifier
telephonyutilities
RTCReporter: Failed to create reporting session with sessionInfo: %@, userInfo: %@
RTCReporter: Created reporting session %@ with sessionInfo: %@, userInfo: %@
RTCReporter: Did not recieve any backends
RTCReporter: Received backends %@
RTCReporter: received an IDS metrics report for IDS session %@ corresponding to call %@
RTCReporter: recorded mapping for IDS session %@ corresponding to call %@
RTCReporter: remapped call=%@ to callUUIDToCallReportingSessions=%@
RTCReporter: Creating conversation reporting session for conversation uuid %@
RTCReporter: converstation reporting session exists for uuid %@
multiwayconference
RTCReporter: call.status=%@ uuid=%@
RTCReporter: callUUIDToCallReportingSessions=%@
com.apple.telephonyutilites.facetime
RTCReporter: Creating call reporting session for 1:1 FT call UUID %@
RTCReporter: one-to-one call reporting session already exists for uuid %@
RTCReporter: multiway call reporting session %@
RTCReporter: Creating multiway call %@ reporting session for conversation UUID %@
RTCReporter: multiway call reporting session already exists for uuid %@
CSDReporter
_TtC13callservicesd14RTCCSDCallInfo
callUUID
durationMs
relativeEnd
bucketedDuration
endReason
providerErrorCode
providerEndedReason
setupTimeMs
connectionTimeMs
relay
incoming
connected
currentlyGrouped
relayDeviceRouteChanges
filteredOutReason
verficationStatus
knownCallerStatus
isOwnNumber
isConversation
fromLink
returnedCall
isSiriSuggested
isKnownContact
isVerifiedAppleCare
isSignedIntoiCloud
junkConfidence
identificationCategory
isKnownCaller
userScore
callservicesd.RTCCSDCallInfo
Starting screen sharing activity for handle %@ with initial attributes %@
End screen sharing activity session (id: %@)
callservicesd.ScreenSharingActivityManager
CSDScreenSharingActivityManager
subscriptionsById
sessionsById
remoteAttributesById
isSessionJoined
observer
featureFlags
T@"<CSDScreenSharingActivityManagerDelegate>",N,W,Vdelegate
latestRemoteAttributes
T@"<TUScreenShareAttributes>",N,R
Unable to send updated attributes %@ over screen sharing activity
Sending remote attributes %@ to %@ (screen sharing activity session id: %@)
Failed to send attributes %@ for screen sharing activity with error %@
Started observer for screen sharing activity sessions
Received new screen sharing activity session %@ with activity %@
Because we received new screen sharing activity session (id: %@), ending old session %@
Received initial remote attributes %@ from screen sharing activity (id: %@)
Received remote attributes message %@ from sender %@ for screen sharing activity (id: %@)
Screen sharing activity session (id: %@) reached unknown state %@
Screen sharing activity session (id: %@) joined
Screen sharing activity session (id: %@) invalidated with reason: %@
Screen sharing activity session (id: %@) waiting
Transitioned to non-joined from joined state for locally-initiated screen sharing activity, ending (id: %@)
conduit.ContactInfo
namePrefix
familyName
nickname
imageData
conduit.StartedSessionEvent
identifier
userAccountToken
userAccountTokenNonce
conduit.EndedSessionEvent
conduit.ContactUpdateEvent
identifierHash
contacts
conduit.JoinEvent
conduit.TVLaunchedEvent
conduit.CancelAddMemberEvent
conversationIdentifier
conduit.PolicyInfoUpdatedEvent
policyInfos
conduit.AddMemberRequest
memberToken
activityInfo
conduit.AddMemberResponse
conduit.DeviceTokenRequest
conduit.DeviceTokenResponse
deviceToken
conduit.DisconnectRequest
conduit.DisconnectResponse
success
canReceiveRelayedCalls
CSDMomentsControllerLocalCapabilities
enabled
regionBlocked
v12@?0I8
CSDMomentsNotification
@32@0:8Q16@24
TQ,N,R,VstreamToken
callservicesd.MomentsNotification
_TtC13callservicesd31CallHistoryNotificationProvider
callInteractionManager
callHistoryDataSource
callProviderManager
pendingCallIdentifiers
supportedMediaTypes
supportedProviders
mostRecentCallDate
inCallServiceProcessObserver
supportsDisplayingFaceTimeAudioCalls
dialRecentCall
findConversationLink
[WARN] Could not find recent call with identifier: %@
%@ count: %d isAmbiguous: %d
allowOutgoingCallsWhenLocked
com.apple.mobilephone
ACTION_TITLE_CALL_BACK
ACTION_TITLE_SEND_MESSAGE
InCallService changed to non-running state (%@); updating posted notifications
Could not retrieve date of most recent call for notification provider %@
Notifiction provider %@ found missed calls %@
Adding notification request %@ for missed call %@
CHRecentCallIdentifier
CNContactIdentifier
Cound not retrieve interaction; using original notification content for call with identifier %@
Retrieved interaction; retrieving intent for call with identifier %@
Cound not retrieve start call intent from %
Retrieved start call intent; updating notification content for call with identifier %@
Could not update notification content; using original notification content for call with identifier %@
TUDialRequestURL
Recent call was a silenced unknown caller; displaying notification as an alert (%@)
MISSED_CALL_MESSAGE
Encountered undefined FaceTime media type %@
MISSED_FACETIME_VIDEO_CALL
MISSED_FACETIME_AUDIO_CALL
Most recent call date is now %@ for notification provider %@
Skipping update of call history notification; InCallService process state is foreground running. %@
Performed join conversation request: %@
Performed dial request: %@
Performing dial request: %@ ended in error: %@
Failed to open URL %@#. Error %@
notificationType: 
supportedMediaTypes: 
supportedProviders: 
%@ is handling %@
Updating call history badge count for notification provider %@
Call interactions changed
callservicesd/CallHistoryNotificationProvider.swift
CHCallInteractionManagerDelegate
v24@0:8@"<CHCallInteractionManager>"16
CHDelegate
Failed to derive public key from public key data, ignoring let me in
CSDCallFilterManager
filters
senderIdentityClient
%@ shouldBlock=%d shouldAllow=%d
%@ Allowing call through since there aren't any unknown call filters
callservicesd.CallFilterManager
SoundDescriptor(
CSDFaceTimeSyncIDSService
T@"CSDFaceTimeSyncIDSService",N,R
com.apple.private.alloy.facetime.sync
_TtC13callservicesd17HoldMusicProvider
speechSynthesizerEventHandler
speechSynthesizer
audioPlayer
canceled speech synthesizer utterance
finished speech synthesizer utterance
No audio player could be created, so unable to begin playing hold music
Failed to start playing hold music
Successfully started playing hold music
Error retrieving file URL for hold music sound file
Error creating AVAudioPlayer with fileURL %@: %@
Created hold music audio player with URL %@
started speech synthesizer utterance
ANSWER_AND_HOLD_OUTGOING_MESSAGE
Speaking utterance %@
Ending hold music
Ending hold message
AVSpeechSynthesizerDelegate
v48@0:8@16{_NSRange=QQ}24@40
v32@0:8@"AVSpeechSynthesizer"16@"AVSpeechUtterance"24
v48@0:8@"AVSpeechSynthesizer"16{_NSRange=QQ}24@"AVSpeechUtterance"40
CSDCarPlayManager
carSessionQueue
carSessionStatus
carPlayScreenConnectionChanged
isCarPlayConnected
com.apple.calls.queues.carSessionStatus
v12@?0B8
CARSessionObserving
v24@0:8@"CARSession"16
v32@0:8@"CARSession"16@"CARSessionConfiguration"24
_TtC13callservicesd34CodableRemoteScreenShareAttributes
@24@0:8@16
sharerHandleValue
currentRemoteAttributes
_TtC13callservicesd22RTCCSDRelayDeviceRoute
type
failed
callservicesd.RTCCSDRelayDeviceRoute
CSDMomentsControllerSession
moments
remoteIDSDestinations
isRegistered
activeRequestsByTransactionID
T@"<CSDAVCMoments>",N,R,Vmoments
T@"NSDictionary",N,C
TB,N,VisRegistered
callservicesd.MomentsControllerSession
MomentsControllerSession: no streamtoken found
MomentsControllerSession: FaceTime 1:1
MomentsControllerSession: GroupFaceTime
remoteIDSDestinations=
activeRequestsByTransactionID=
_TtC13callservicesd17UnknownCallFilter
%@ this is not a telephony provider call; call filter will allow call %@
%@ call does not have a valid handle, by definition this is an unknown caller call %@
%@ shouldFilterIncoming call=%@ unknownCaller=%d isSilenceUnknownCallersEnabled=%d shouldBlockJunk=%d
%@ maxJunkLevel: %d
%@ isSilenceUnknownCallersEnabled: %d
CSDCallFilter
CSDContactsCallFilter
appleCareHandles
carrierBundleController
%@ null call handle, should not reach here: call=%@
%@ Found contact (%@) or suggested contact (%@) or isVerifiedAppleCare (%@) or isCarrierBundlePhoneNumber (%@)
%@ Did not find contact or suggested contact; call filter will not allow call %@
%@ call filter will allow call %@
%@ serviceProviderUUID: %@ carrierPhoneNumbers: %@
%@ carrierBundleNumbers=%@
%@ Contact fetch failed with the following error %@
com.apple.calls.callservicesd
CompanionLinkManager
NeighborhoodActivityCore
_TtC13callservicesd29ConversationLinkCryptoManager
FT-LMI-ResponseKey
FT-LMI-RequestKey
CSDRouteController
v28@0:8@16B24
_routesByUniqueIdentifier
routeWasPickedHandler
timedOutPickingRouteHandler
routeProviders
pendingRouteContext
pickWhenAvailableRouteIdentifier
pendingPickedRouteTimeout
routesByUniqueIdentifier
callservicesd.RouteController
routes: %@
Stopping waiting for route identifier %@ to become available
Could not find route to pick with unique identifier %@. All routes: %@
Will pick route identifier %@ when it becomes available to pick
Clearing out pickWhenAvailable route identifier %@ because user is picking available route %@
Timed out waiting for route to become picked: %@
Updated routes from %@ to %@
pickWhenAvailable route identifier %@ did become available, picking now...
Route identifier %@ did not become available in %@ seconds
v16@?0@"TURoute"8
com.apple.telephonyutilities.callservicesd.pairedhostdeviceroutecontroller
com.apple.telephonyutilities.callservicesd.localroutecontroller
Updating activeRelayClientTransport to %@
Updating nearby device routes using devices: %@
Current calls do not support nearby devices (%@) or device doesn't support primary calling (%@)
Could not convert NearbyDevice to NearbyDeviceRoute: %@
filtering out device: %@
v16@?0@"RPCompanionLinkDevice"8
v20@?0@"RPCompanionLinkDevice"8I16
Device changed: %@
Lost nearby device: %@
Found nearby device: %@
Local device updated
callservicesd/TUCallContainerProtocol_CSD.swift
Fatal error
Call is not a CSDCall: 
CSDTinCanIDSProviderDelegateCapabilities
cellularDataAllowed
CSDIDSProviderDelegateCapabilities
wiFiAvailable
wiFiAllowed
cellularDataAvailable
cellularDataPreferred
q16@0:8
CSDConversationPersistenceController
storage
lockStateObserver
activeConversationsListKey
Removing active conversation with cache key: %@
Adding active conversation with cache key: %@
Expected an active conversation for key %@ but found nothing. Cleaning up cached conversation.
Cannot create CSDMessagingConversation from data in cache for key: %@. Cleaning up cached conversation
Missing fields on conversation from cache %@. Cleaning up cached conversation.
Removing conversation with UUID: %@ from cache.
Error creating CSDMessagingConversation to cache from conversation with UUID: %@.
Caching conversation with UUID: %@
Missing fields on conversation from cache %@. Returning a nil conversation.
callservicesd.ConversationPersistenceController
AudioDescriptor(
interruptionDescriptor: 
interruptionDeferredEndDescriptor: 
ringtoneDescriptor: 
soundDescriptorAction: 
holdMusicDescriptor: 
discoveryModeDescriptor: 
_TtC13callservicesd29PairedHostDeviceRouteProvider
pairedHostDeviceRoutes
Could not find route to pick for %@. All paired host device routes: %@
callservicesd.PairedHostDeviceRouteProvider
RingtoneDescriptor(
contactIdentifier=
providerRingtoneSoundURL=
CSDIDSPendingChat
@36@0:8@16B24@28
isVideo
TB,N,R,VisVideo
T@"TUHandle",N,R,Vhandle
CSDGroupIDSPendingChat
callservicesd.GroupIDSPendingChat
callservicesd.IDSPendingChat
CSDConversationLinkGeneratorDescriptor
@32@0:8@16q24
version
Tq,N,Vversion
Tq,N,R
callservicesd.GeneratorDescriptor
_TtC13callservicesd13AudioResolver
ttyProviderObserver
localAudioSystemProvider
deviceSupportsRingtone
lastPlayedSoundDate
lastPlayedSoundType
soundDescriptorActionResolver
resolvedDescriptor
resolutionChangedHandler
Unable to create interruption descriptor for call %@
Not creating interruption for call: %@, deviceSupportsRingtone: %@ shouldSuppressRingtone: %@  holdMusicDescriptor: %@
Not playing sound %@ becaus the same sound was played less than 2s ago
Other session requested no ringtone interruption, ending currentDescriptor(context:) method for call %@
CSDFaceTimeIDSProviderDelegateCapabilities
momentsAvailable
items
timeProvider
_TtC13callservicesd23LocalAudioRouteProvider
audioRoutes
callAudioCategory
callAudioMode
lastUserPickedRoute
callAudioInterruptionState
hasActiveAudioSession
Could not find route to pick for %@. All audio routes: %@
Failed to pick audio route %@: %@
Call does not have audio interruption so setting prematurely selected audio route to %@
callservicesd.LocalAudioRouteProvider
Updating audio information using call: %@; callHasAudioInterruption: %@
Audio category change from %@ -> %@ mode %@ -> %@ does not require route re-pick
Re-picking last user picked route: %@
Audio category change from %@ -> %@ mode %@ -> %@ currentlyPickedRoute: %@ shouldPickLastUserPickedRoute: %@
Updated audio routes: %@
Clearing last user picked route
Unable to create audio route from route dictionary: %@
Picking prematurely selected audio route now that audio interruption has begun: %@
TUAudioSystemControllerDelegate
nearbyDeviceProvider
devicesChangedHandler
devicesByEffectiveIdentifier
callservicesd.NearbyDeviceMonitor
_TtC13callservicesd27ConversationLinkSyncManager
interactor
messageQueue
stateHandle
_TtC13callservicesd39ConversationLinkSyncManagerMessageQueue
intervalCalculator
actionByType
_TtC13callservicesdP33_735B00354BCC442560C6AD87FDD3101213IDSInteractor
callservicesd.IDSInteractor
ConversationLinkSync: Incoming sync message, invalid fromID -- dropping {fromID: %@}
ConversationLinkSync: Incoming sync message, invalid destinationID -- dropping {fromID: %@}
ConversationLinkSync: Incoming sync message, unknown destinationID -- dropping {destinationID: %@, self.service.allAliases: %@}
ConversationLinkSync: Incoming sync message, invalid data -- dropping {data: %@}
ConversationLinkSync: Incoming sync message, data no protobuf -- dropping
ConversationLinkSync: Incoming sync message, processing {fromID: %@, destinationID: %@}
ConversationLinkSync: devices changed making sure we send a check in to them as well {deviceDestinations: %@}
ConversationLinkSync: enqueue action {messageType: %@, destinations: %@, mode: %@, hasExisting: %@}
ConversationLinkSync: Scheduled action {interval: %@}
ConversationLinkSync: Processing update, unable to convert descriptors -- dropping {update: %@}
ConversationLinkSync: Processing update, got links {links: %@}
ConversationLinkSync: Sending link update {to: %@, linksToSend: %@}
ConversationLinkSync: Failed sending update! {to: %@, error: %@}
ConversationLinkSync: Sent link update {to: %@, idsIdentifier: %@}
GondolaLastAccountsChangedState
ConversationLinkSync: checkAccountStateForCheckIn called {activeAccounts: %@, lastAccountsChangedState: %@}
ConversationLinkSync: Processing check in, unable to convert descriptors -- dropping {from: %@}
ConversationLinkSync: Processing check in, calculated differences {from: %@, shouldCheckIn: %@, needToSendUpdate: %@, shouldCheckAllGenerators: %@}
ConversationLinkSync: Check in differences %@
ConversationLinkSync: Processing check in, no differences -- done {from: %@, generatorDescriptors: %@}
ConversationLinkSync: Performing check in {dest: %@, message: %@}
ConversationLinkSync: Failed sending check in! {dest: %@, error: %@}
ConversationLinkSync: Sent check in {to: %@, idsIdentifier: %@}
ConversationLinkSync: scheduleCheckIn called {scheduleMode: %@, deviceDestinations: %@}
ConversationLinkSync: scheduleCheckInIfNeeded called
currentRevisions
localGeneratorIdentifier
GondolaLatestVersion
localLatestGeneratedVersion
countByGenerator
ConversationLinkSync: State dump
ConversationLinkSync: Failed to create state dump {error: %@}
originatorRevision
originatorIdentifier
ConversationLinkSync: check in activity fired
ConversationLinkSync: check in activity scheduled {criteria: %@}
GondolaCheckInIntervalOverride
ConversationLinkSync: randomCheckInInterval: calculated {interval: %@, scheduleMode: %@}
ConversationLinkSync: randomCheckInInterval: defaults overriding {overrideInterval: %@}
<CheckInDiff; remoteMissingIdentifiers = 
; localMissingIdentifiers = 
; localDescriptorsBehindRemote = 
; remoteDescriptorsBehindLocal = 
IDSServiceDelegate
v64@0:8@16@24@32@40@48@56
v56@0:8@16@24q32@40@48
v52@0:8@16@24@32B40@44
v60@0:8@16@24@32B40@44@52
v56@0:8@16@24@32q40q48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"NSString"48@"IDSMessageContext"56
v40@0:8@"IDSService"16@"NSString"24@"NSArray"32
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSProtobuf"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSString"40@"IDSMessageContext"48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSDictionary"40@"NSString"48@"IDSMessageContext"56
v56@0:8@"IDSService"16@"IDSAccount"24q32@"NSString"40@"IDSMessageContext"48
v32@0:8@"IDSService"16@"NSSet"24
v32@0:8@"IDSService"16@"NSArray"24
v52@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44
v60@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44@"IDSMessageContext"52
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32q40q48
v48@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@40
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@48
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSDictionary"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSData"48
v40@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32
v24@0:8@"IDSService"16
v40@0:8@"IDSService"16@"IDSDevice"24@?<v@?>32
IDSServiceDelegatePrivate
v68@0:8@16@24@32@40q48@56B64
v76@0:8@16@24@32@40q48@56B64@68
v72@0:8@16@24@32@40@48@56@64
v48@0:8@16@24d32@40
v32@0:8@16q24
v68@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40q48@"NSError"56B64
v76@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40q48@"NSError"56B64@"IDSMessageContext"68
v72@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@"NSArray"48@"NSArray"56@"NSDictionary"64
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@48
v48@0:8@"IDSService"16@"NSString"24d32@"NSError"40
v48@0:8@"IDSService"16@"NSString"24@"NSString"32@"NSString"40
v32@0:8@"IDSService"16q24
CSDFaceTimeInviteDemuxer
idsQueryController
$__lazy_storage_$_supportsConversationOneToOneModeEnabled
$__lazy_storage_$_pushTokenForSelf
Current IDStatus results: %@ service: %@
Querying currentRemoteDevices %@ service: %@
Current remote device results: %@ for destinationIDs: %@, service: %@
Required IDStatus results: %@ service: %@
com.apple.telephonyutilities.callservicesd.faceTimeInviteDemuxer
AudioInterruptionDescriptor(
activationContext=
MIC_ACCESS_TELEPHONE_CALL
MIC_ACCESS_FACETIME_CALL
CXAudioSessionActivationStateObserver
Vv20@0:8B16
CSDUserNotificationController
callFilterManager
phoneNotificationCenter
providersByIdentifier
providers
clientManager
v40@0:8q16@24@?32
Received response %@
Could not find notification provider for action
callservicesd.UserNotificationController
com.apple.telephonyutilities.callservicesd.usernotificationcontroller
Creating XPC endpoint for User notifications
Loaded user notification controller
com.apple.telephonyutilities.callservicesdaemon.usernotificationprovider
Started broadcasting User notifications mach service with %@
Setting badge string to %@ on notificationCenter %@ for notification type %@
APPLICATION_BADGE_UNKNOWN
APPLICATION_BADGE_UNKNOWN_COUNT
Successfully set badge string to %@
Error setting badge string to %@
Replacing notification with identifier %@ from %@
Successfully replaced notification with identifier: %@
Error while replacing notification: %@
Removing notification with identifier %@ from %@
Not posting notification since it is restricted by the call filter
Adding notification request %@ to %@
Successfully posted notification with identifier: %@
Error while posting notification: %@
UNUserNotificationCenterDelegate
v40@0:8@"UNUserNotificationCenter"16@"UNNotification"24@?<v@?Q>32
v40@0:8@"UNUserNotificationCenter"16@"UNNotificationResponse"24@?<v@?>32
v32@0:8@"UNUserNotificationCenter"16@"UNNotification"24
TUUserNotificationsProviderXPCServer
Vv40@0:8q16@24@?32
Vv40@0:8q16@"NSString"24@?<v@?@"NSError">32
_TtC13callservicesd21DiscoveryModeProvider
_TtC13callservicesd29VoicemailNotificationProvider
telephonyClient
voicemailDataSource
postedVoicemailIdentifiers
pendingVoicemailIdentifiers
mostRecentVoicemailDate
mostRecentNonVisualVoicemailDate
localizeVoicemailName
callbackVoicemail
unsubscribedVoicemailInfoForUUID
Could not find voicemail with identifier: %lu
No current unsubscribed voicemail info, attempting to update...
Subscribed to enhanced voicemail; unread message count is %lu
v36@?0B8@"NSNumber"12@"NSString"20@"NSError"28
Updating voicemail info for uuid %@ to available: %@, count: %@
ACTION_TITLE_VOICEMAIL_MESSAGE_DELETE
Subscription status changed: %@
Removing all voicemail notifications. Current notification identifiers: %@
Online status changed: %@
Voicemails changed: %@
Could not retrieve date of most recent voicemail for notification provider %@
Voicemail is not subscribed
Voicemail store changed, and we found the following voicemail messages we were waiting for: %@
Retrieving messages delivered after %@
Received %lu new voicemails since date %@
Voicemail store changed, but we did not find any voicemail messages we were waiting for. Waiting for: %@
Asked to post %lu voicemails
Adding notification with count: %lu
NEW_VOICEMAIL_FORMAT
nonvisualvoicemail
VMVoicemailIdentifier
voicemailDuration
[WARN] Could not generate dial request URL for voicemail: %@
Cound not retrieve voicemail message; using original notification content for voicemail message with identifier %@
Cound not retrieve intent; using original notification content for voicemail message with identifier %@
Retrieved intent; updating notification content for voicemail message with identifier %@
Could not update notification content; using original notification content for voicemail message with identifier %@
Attempt to create a notification attachment for file at %@ failed with error %@
Most recent voicemail date is now %@ for notification provider %@
Voicemail is not MWI - Ignoring voicemailInfoAvailableNotification
Handling voicemailInfoAvailableNotification voicemailInfo: %@, context: %@
callservicesd/VoicemailNotificationProvider.swift
B16@?0@"VMVoicemail"8
Retrieving voicemail messages failed with error %@
Retrieving inbox voicemail messages failed with error %@
CoreTelephonyClientVoicemailDelegate
v24@0:8@"CTXPCServiceSubscriptionContext"16
v32@0:8@"CTXPCServiceSubscriptionContext"16@"CTVoicemailInfoType"24
CSDCallHistoryCallFilter
usTollFreePrefixes
callHistoryManager
%@ Could not create call history handle from call %@
%@ Found call history call; call filter will allow call %@
%@ Did not find call history call; call filter will not allow call %@
%@ Fetching call history calls matching predicate %@
CSDOwnNumberCallFilter
idsCTAdapter
%@ Call is not the same number as subscriber; OwnNumberCallFilter will allow call %@
%@ Call is the same number as subscriber; OwnNumberCallFilter will not allow call %@
%@ call is verified; will allow call %@
DiscoveryModeDescriptor()
_TtC13callservicesd13SoundProvider
player
Asked to begin or update playback of sound with descriptor %@ but no TUCallSoundPlayerDescriptor could be determined, so not playing
Attempt to play call sound player descriptor %@ returned false
Asked to begin or update playback of sound but new descriptor is equal to activeDescriptor so doing nothing
AudioInterruptionDeferredEndDescriptor(
_TtC13callservicesd33ConversationLinkDescriptorManager
GondolaGeneratedIdentifier
GondolaSyncedVersion
ConversationLinkSync: localGeneratorIdentifier: No local or IDS identifier -- starting with a local one {locallyGeneratedIdentifier: %@}
ConversationLinkSync: localGeneratorIdentifier: Mismatched local identifiers -- resetting {identifierToExpect: %@, persistedLocalIdentifier: %@}
_TtC13callservicesd22RTCCSDConversationInfo
uuid
relativeStart
conversationBaseTime
hasLink
isPending
duration
uPlusOneModeAtStart
uPlusOneModeAtEnd
maximumMemberCount
initialMemberCount
finalMemberCount
maxNumberOfParticipants
AVCBlobRecoveryAttempts
AVCBlobRecoveryTimeouts
numberLMIRequests
numberLMIApprovals
numberLMIDismissals
timebase
callservicesd.RTCCSDConversationInfo
_TtC13callservicesd20CompanionLinkManager
client
authenticationController
activated
deviceUpdatedPublisher
deviceFoundPublisher
deviceLostPublisher
deviceChangedPublisher
messagePublishers
eventPublishers
_TtCC13callservicesd20CompanionLinkManager14DeviceProvider
manager
Sending event %s to %s : %s, options: %s
Event '%s' successfully delivered
Error sending %s: %s
v24@?0@"NSDictionary"8@"NSDictionary"16
Event '%{public}s' publisher cancelled.
Event '%{public}s' publisher finished.
Event '%{public}s' publisher failed: %{public}s
Received event '%{public}s', params: %s, %s
v32@?0@"NSDictionary"8@"NSDictionary"16@?<v@?@"NSDictionary"@"NSDictionary"@"NSError">24
Message '%{public}s' publisher cancelled.
Message '%{public}s' publisher finished.
Message '%{public}s' publisher failed: %{public}s
Received message '%{public}s', params: %s, %s
callservicesd/Combine_OneShotSink.swift
Already subscribed
Error waiting for authenticated device to reappear: %s
Found authenticated device. Device: %@
Activated CompanionLink
Failed to activate CompanionLink
Sending request %s to %s : %s, options: %s
v32@?0@"NSDictionary"8@"NSDictionary"16@"NSError"24
Received response for request %s from %s : %s, options: %s, error: %s
Authentication completed -- waiting for device to reappear
Device %@ is already authenticated
com.apple.TelephonyUtilities.CompanionLinkManager
Failed to create state dump: %s
_TtC13callservicesd13CSDAVCMoments
I16@0:8
T@"<CSDAVCMomentsDelegate>",N,W,Vdelegate
v28@0:8@16I24
callservicesd.CSDAVCMoments
AVCMomentsDelegate
v28@0:8@"AVCMoments"16I24
v40@0:8@"AVCMoments"16@"AVCMomentsRequest"24@"NSError"32
v56@0:8@"AVCMoments"16@"AVCMomentsRequest"24@"NSURL"32@"NSURL"40@"NSError"48
v48@0:8@"AVCMoments"16@"AVCMomentsRequest"24@"NSURL"32@"NSError"40
v24@0:8@"AVCMoments"16
_TtC13callservicesd17AnalyticsReporter
com.apple.callservicesd.shareplay.push-to-tv
Send SharePlay push to TV event
CSDManagedDeviceMonitor
delegate
T@"<CSDManagedDeviceMonitorDelegate>",N,&
@"<CSDManagedDeviceMonitorDelegate>"16@0:8
v24@0:8@"<CSDManagedDeviceMonitorDelegate>"16
CSDKeychainPasswordItem
@24@0:8^@16
B24@0:8^@16
service
accessGroup
callservicesd.KeychainPasswordItem
Successfully deleted item from keychain
No item found. Added new item to keychain
Saved item to keychain
CSDScreenTimeCallFilter
providerManager
conversationsForBundleIdentifier
synchronousConversationsForBundleIdentifier
contextsForCallIdentifier
observationForCallIdentifier
delegateQueue
T@"<CSDManagedDeviceMonitorDelegate>",N,W,Vdelegate
Screen time: Filter status is %@ for addresses %@ with bundle identifier: %@
Screen time: Policy %@ for handles: %@ with existing conversation: %@ with bundle identifier: %@
Screen time: Policy %@ for handles: %@ (%@) with bundle identifier: %@
Screen time: Timed out creating conversation
Screen time: Created synchronous conversation %@ for bundle identifier: %@. All synchronous conversations: %@
Screen time: Adding conversation for bundle identifier: %@ provider: %@
Screen time: Conversation for providers: %@
Screen time: Handling call remote participants changed: %@
Screen time: Stopped monitoring screen time context for call %@. Remaining contexts are %@
Screen time: Started monitoring screen time context %@. All contexts are %@
Screen time: Conversation context for call: %@ changed to %@
callservicesd.ScreenTimeCallFilter
init(queue:)
Screen time: Handling active participants changed for conversation: %@
Screen time: Could not find call in all calls: %@
Screen time: Found call for conversation, updating call
CSDCallProviderManagerDelegate
v24@0:8@"CSDCallProviderManager"16
CSDMomentsRequest
avcRequest
session
T@"<CSDAVCMomentsRequest>",N,R,VavcRequest
T@"CSDMomentsControllerSession",N,R,Vsession
callservicesd.MomentsRequest
Failed to find matching device for %@
Device %@ is not authenticated - starting auth flow
Disconnecting. Handed off conversations: %s
callservicesd.NeighborhoodActivityConduit
CSDNeighborhoodActivityConduit
messenger
cancellables
joinTimeoutSeconds
delegatesToQueues
handedOffConversations
joinApprovalState
localTVDevices
joinCompletionSubjects
pendingJoinConversationIDs
activeConversationUpdateSubject
activeConversationUpdateCancellablesByDeviceID
conversationIDsWithActivities
contactForwardingCanceler
T@"OS_dispatch_queue",N,R,Vqueue
nearbyTVDevices
activeSplitSessionTVDevice
T@"TUNearbyDeviceHandle",N,R
tv has left conversation %s
tv is in this conversation
Pushing contacts
Notifying successful join
Join completions: %s
tv has joined conversation %s
activeParticipants = %s
Waiting for tv on this conversation
Pending join IDs: %s
Remote participants changed for %s: %s, lightweight participants: %s
Pushing %ld contacts to split-session device
Kicking split-session device %s
Left conversation: %s
Conversation state change for %s: %s -> %s)
Joined conversation: %s
Disconnecting idHash %s; info = %s
Sending RPC: %s %s
Invalid message content: %s
RPC response: %s %s
<Conversation Gone>
Participant %s left conversation %s
Failed to authenticate device: %@, error: %s
Current activity doesn't support handoff, rejecting push attempt
HANDOFF_UNSUPPORTED_TITLE
Handoff unsupported alert title
HANDOFF_UNSUPPORTED_MESSAGE_PUSH
Handoff unsupported alert message (push side)
Presenting alert: %s / %s
Handed off conversations: %s
No effectiveIdentifier in handle %@
Adding remote participant with ID %{private}s
Handle strings: %s
Fetching contacts for handles: %s
Obtained tv device ID %{private}s
Removing delegate %s
New delegate %s
com.apple.callservicesd.NearbyActivityRegistrar
Initialized NeighborhoodActivityConduit
activeConversationUpdate
CSD Conduit State
TV device appeared: %s / %s / %{private}s
Now %ld devices total
New device appeared. ID: %{private}s MRID: %{private}s Model: %s Name: %{private}s
Error in event handler for '%{public}s': %s
No request options to resolve sending device handle
Resolved verified identity %s to sending device %@
Resolved senderID %s to sending device %@
Incoming RPC event: %s %s
Received message from unauthenticated client, ignoring
Error in message handler for '%{public}s': %s
Incoming RPC: %s %s
Sending RPC response: %s %s
Activity %s from %s doesn't support handoff, rejecting.
Checking eligibility of activity: %@
Requesting split-session approval from %s
Approval result: %{bool}d
Error requesting split-session approval: %s
Play on Apple
Allow Apple TV to join current activity?
 to join current activity?
Unexpected failure of CFUserNotificationDisplayAlert(): %s: %s
Unexpected CFUserNotification response flags: %s
Device disappeared. ID: %{private}s MRID: %{private}s Model: %s Name: %{private}s
description
dictionaryRepresentation
stringWithFormat:
dictionary
setObject:forKey:
setPublicKey:
setConversationMessageBytes:
allocWithZone:
init
copyWithZone:
isMemberOfClass:
isEqual:
hash
hasPublicKey
hasConversationMessageBytes
readFrom:
writeTo:
copyTo:
mergeFrom:
publicKey
conversationMessageBytes
.cxx_destruct
_conversationMessageBytes
_publicKey
TB,R,N
T@"NSData",&,N,V_publicKey
T@"NSData",&,N,V_conversationMessageBytes
hasLink
link
tuConversationLink
T@"TUConversationLink",R,C,N
setType:
setConversationGroupUUID:
linkWithTUConversationLink:includeGroupUUID:
setLink:
setEncryptedMessage:
setEnclosedEncryptedType:
hasType
type
hasIsLetMeInApproved
isLetMeInApproved
invitationPreferences
countByEnumeratingWithState:objects:count:
tuInvitationPreference
addObject:
copy
conversationGroupUUIDString
initWithUUIDString:
UUIDString
setConversationGroupUUIDString:
invitationPreferenceWithTUConversationInvitationPreference:
addInvitationPreferences:
initWithType:groupUUID:link:
initWithEncryptedMessage:enclosedType:link:
constitutesLetMeInApproval
tuInvitationPreferences
conversationGroupUUID
setTUInvitationPreferences:
T@"NSSet",C,N,SsetTUInvitationPreferences:
T@"NSUUID",&,N
hasCreationDateEpochTime
creationDateEpochTime
dateWithTimeIntervalSince1970:
hasPseudonymExpirationDateEpochTime
pseudonymExpirationDateEpochTime
invitedHandles
tuHandle
pseudonym
groupUUID
originatorTUHandle
linkName
linkLifetimeScope
initWithPseudonym:publicKey:groupUUID:originatorHandle:creationDate:expirationDate:invitedMemberHandles:locallyCreated:linkName:linkLifetimeScope:
hasGeneratorDescriptor
generatorDescriptor
hasGeneratorID
hasGeneratorVersion
generatorID
generatorVersion
initWithIdentifier:revision:handle:
initWithGroupUUID:originator:pseudonym:publicKey:
hasIsActivated
isActivated
setActivated:
setLinkLifetimeScope:
setCreationDate:
setExpirationDate:
setInvitedHandles:
hasPrivateKey
privateKey
setPrivateKey:
hasLinkName
setName:
hasGroupUUIDString
groupUUIDString
hasOriginatorHandle
originatorHandle
setPseudonym:
setLinkName:
setGroupUUIDString:
handleWithTUHandle:
setOriginatorHandle:
invitedMemberHandles
count
arrayWithCapacity:
tuConversationLinkDescriptor
T@"TUConversationLink",R,N
T@"TUConversationLinkDescriptor",R,N
T@"NSUUID",R,N
T@"TUHandle",R,N
removeAllObjects
objectAtIndex:
initWithCapacity:
numberWithDouble:
numberWithBool:
addInvitedHandles:
invitedHandlesCount
clearInvitedHandles
invitedHandlesAtIndex:
setGeneratorDescriptor:
invitedHandlesType
hasPseudonym
setCreationDateEpochTime:
setHasCreationDateEpochTime:
setPseudonymExpirationDateEpochTime:
setHasPseudonymExpirationDateEpochTime:
setIsActivated:
setHasIsActivated:
setHasLinkLifetimeScope:
hasLinkLifetimeScope
linkLifetimeScopeAsString:
StringAsLinkLifetimeScope:
_creationDateEpochTime
_pseudonymExpirationDateEpochTime
_generatorDescriptor
_groupUUIDString
_invitedHandles
_linkLifetimeScope
_linkName
_originatorHandle
_privateKey
_pseudonym
_isActivated
_has
T@"NSString",&,N,V_pseudonym
T@"NSData",&,N,V_privateKey
T@"NSMutableArray",&,N,V_invitedHandles
TB,N
Td,N,V_creationDateEpochTime
T@"NSString",&,N,V_groupUUIDString
T@"CSDMessagingHandle",&,N,V_originatorHandle
Td,N,V_pseudonymExpirationDateEpochTime
TB,N,V_isActivated
T@"CSDMessagingConversationLinkGeneratorDescriptor",&,N,V_generatorDescriptor
T@"NSString",&,N,V_linkName
Ti,N,V_linkLifetimeScope
isEqualToString:
callStateController
relayMessagingController
callController
sharedInstance
_allCalls
allCalls
setCallStateController:
_callStateController
T@"CSDCallStateController",&,N,V_callStateController
T@"CSDRelayMessagingController",R,N
T@"CSDCallController",R,N
T@"NSArray",R,N
initWithCallCenterObserver:
setTriggers:
setDelegate:
_updateCurrentOrientationValue
setOrientationEventsEnabled:
setPassiveOrientationEvents:
defaultCenter
removeObserver:
dealloc
accelerometer
currentDeviceOrientation
setCurrentOrientation:
provider
isSystemProvider
isVideo
callStatus
callCenterObserver
callContainer
currentVideoCalls
class
self
performSelector:
performSelector:withObject:
performSelector:withObject:withObject:
isProxy
isKindOfClass:
conformsToProtocol:
respondsToSelector:
retain
release
autorelease
retainCount
zone
superclass
debugDescription
TQ,R
T#,R
T@"NSString",R,C
accelerometer:didAccelerateWithTimeStamp:x:y:z:eventType:
accelerometer:didChangeDeviceOrientation:
callCenterObserver:callChanged:
callsChangedForCallCenterObserver:
setCallCenterObserver:
currentOrientation
_accelerometer
_callCenterObserver
_currentOrientation
T@"<CSDCallCenterObserver>",&,N,V_callCenterObserver
Tq,N,V_currentOrientation
T@"BKSAccelerometer",R,N,V_accelerometer
sharedInstanceWithQueue:
initWithQueue:
strongToStrongObjectsMapTable
handleCallStatusChanged:
addObserver:selector:name:object:
handleSessionStateChanged:
beginTransactionIfNecessaryForObject:withReason:
endTransactionIfNecessaryForObject:
queue
openTransactions
objectForKey:
stringByAppendingFormat:
UTF8String
removeObjectForKey:
object
status
state
T@"CSDTransactionManager",R,N
_openTransactions
_queue
T@"NSMapTable",R,N,V_openTransactions
T@"NSObject<OS_dispatch_queue>",R,N,V_queue
initWithFormat:arguments:
simulateCrashReportWithReason:pid:code:
simulateCrashReportFromPID:withKillCode:usingReasonWithFormat:
simulateCrashReportWithFormat:
bundleIdentifier
invalidate
name
initWithBundleIdentifier:flags:reason:name:withHandler:
setProcessAssertion:
processAssertionNameForBundleIdentifier:
initWithBundleIdentifier:flags:reason:name:
processAssertionWithBundleIdentifier:
initWithBundleIdentifier:
acquireWithCompletionHandler:
processAssertion
_bundleIdentifier
_processAssertion
T@"BKSProcessAssertion",&,N,V_processAssertion
T@"NSString",R,C,N,V_bundleIdentifier
initWithClientUUID:serialQueue:
startedCapturingLocalVideo:
stoppedCapturingLocalVideo:
conferenceProvider
setState:
setConfiguration:
conferenceProviderCreationBlock
configuration
clientUUID
setConferenceProvider:
deviceRole
reportingHierarchyToken
initializeNewCallWithDeviceRole:reportingHierarchyToken:
requiresInviteDictionary
localPortraitAspectRatio
localLandscapeAspectRatio
setLocalPortraitAspectRatio:localLandscapeAspectRatio:
setLocalInviteDictionary:
_sendDelegateFinishedPreparing
_setEndedWithReason:error:
remoteInviteDictionary
callID
inviteDictionaryForCallID:remoteInviteDictionary:nonCellularCandidateTimeout:block:queue:
isCaller
capabilities
socket
startConnectionAsCaller:capabilities:socket:error:
destination
startConnectionAsCaller:remoteInviteDictionary:capabilities:destination:error:
date
timeIntervalSince1970
_setUpDidStartTimeout
_stop
capturingLocalVideo
stop
setCapturingLocalVideo:
cancel
sendData:
setPeerReportingIdentifier:sessionIdentifier:
setEndedReason:
setEndedError:
_sendDelegateEndedWithReason:error:
inputAudioPowerSpectrumToken
outputAudioPowerSpectrumToken
setRemoteInviteDictionary:
setCaller:
setDateStartedConnecting:
setDateConnected:
setDateEnded:
_isMuted
isMicrophoneMuted
setMicrophoneMuted:
_sendDelegateMutedChanged
_isSendingAudio
isAudioPaused
setAudioPaused:
isSendingAudio
_isSendingAudioData
setSendingAudio:
_isSendingVideo
_isSendingVideoExpected
boolValue
isVideoPaused
setVideoPaused:
setSendingVideoExpected:
isVideoPausedToStart
setIsVideoPausedToStart:
updateCapabilities:
setCapabilities:
setRemoteVideoPresentationSize:
setRemoteVideoPresentationState:
connectionTimeout
setDeviceRole:
delegate
delegateQueue
conferenceFinishedPreparing:
_performDelegateCallback:
conferenceStarted:
conference:endedWithReason:error:
connectionClosedForConference:
mutedChangedForConference:
sendingAudioChangedForConference:
receivedFirstRemoteFrameForConference:
remoteVideoPausedForConference:
conference:remoteMediaStalled:
conference:inputFrequencyLevelChangedTo:
conference:outputFrequencyLevelChangedTo:
conference:inputLevelChangedTo:
conference:outputLevelChangedTo:
conference:changedBytesOfDataUsed:
conference:didReceiveData:forCallID:
code
_sendDelegateStarted
_endedReasonForDidStopError:error:
objectForKeyedSubscript:
integerValue
_sendDelegateBytesOfDataUsageChanged:
_sendDelegateConnectionClosed
_sendDelegateInputFrequencyLevelChanged:
_sendDelegateOutputFrequencyLevelChanged:
_sendDelegateInputLevelChanged:
_sendDelegateOutputLevelChanged:
_sendDelegateSendingAudioChanged
setHasReceivedFirstRemoteFrame:
_sendDelegateReceivedFirstRemoteFrame
setRemoteVideoPaused:
_sendDelegateRemoteVideoPaused
_sendDelegateRemoteMediaStalled:
_sendDelegateReceivedData:forCallID:
conferenceProvider:didStartSession:error:
conferenceProvider:didStopWithError:callMetadata:
connectionClosedForConferenceProvider:
serverDiedForConferenceProvider:
conferenceProvider:updateInputFrequencyLevel:
conferenceProvider:updateOutputFrequencyLevel:
conferenceProvider:updateInputLevel:
conferenceProvider:updateOutputLevel:
conferenceProvider:didPauseAudio:error:
conferenceProvider:didPauseVideo:error:
conferenceProviderReceivedFirstRemoteFrame:
conferenceProvider:remoteVideoPaused:
conferenceProvider:remoteMediaStalled:
conferenceProvider:didReceiveData:forCallID:
prepareWithConfiguration:
startConnectionWithTransport:
setRemoteIDSDestinationURI:crossDeviceIdentifier:
setDelegateQueue:
localInviteDictionary
setConnectionTimeout:
endedReason
endedError
dateStartedConnecting
dateConnected
dateEnded
isMuted
setMuted:
isSendingAudioData
setSendingAudioData:
hasReceivedFirstRemoteFrame
isSendingVideo
setSendingVideo:
isRemoteVideoPaused
remoteVideoPresentationSize
remoteVideoPresentationState
T@"<CSDAVConferenceDelegate>",W,N
T@"NSObject<OS_dispatch_queue>",&,N
T@"NSDictionary",R,C,N
T@"NSDictionary",C,N
Tq,R,N
caller
TB,N,GisCaller
Td,N
Ti,N
Ti,R,N
T@"NSError",R,N
T@"NSDate",R,N
muted
TB,N,GisMuted
sendingAudio
TB,N,GisSendingAudio
sendingAudioData
TB,N,GisSendingAudioData
sendingVideo
TB,N,GisSendingVideo
remoteVideoPaused
TB,R,N,GisRemoteVideoPaused
T{CGSize=dd},N
TI,N
isSendingVideoExpected
setQueue:
setConferenceProviderCreationBlock:
_hasReceivedFirstRemoteFrame
_remoteVideoPaused
_capturingLocalVideo
_state
_remoteVideoPresentationState
_delegate
_delegateQueue
_connectionTimeout
_dateConnected
_dateEnded
_dateStartedConnecting
_sendingVideoExpected
_localInviteDictionary
_endedReason
_endedError
_configuration
_conferenceProvider
_conferenceProviderCreationBlock
_remoteVideoPresentationSize
T@"NSObject<OS_dispatch_queue>",&,N,V_queue
T@"NSDictionary",C,N,V_localInviteDictionary
Ti,N,V_state
Tq,N,V_endedReason
T@"NSError",&,N,V_endedError
T@"NSDate",&,N,V_dateStartedConnecting
T@"NSDate",&,N,V_dateConnected
T@"NSDate",&,N,V_dateEnded
TB,N,V_hasReceivedFirstRemoteFrame
TB,N,GisRemoteVideoPaused,V_remoteVideoPaused
TB,N,V_capturingLocalVideo
T@"CSDAVConferenceConfiguration",&,N,V_configuration
T@"<CSDAVConferenceProvider>",&,N,V_conferenceProvider
T@?,C,N,V_conferenceProviderCreationBlock
sendingVideoExpected
T@"NSNumber",&,N,GisSendingVideoExpected,V_sendingVideoExpected
T@"<CSDAVConferenceDelegate>",W,N,V_delegate
T@"NSObject<OS_dispatch_queue>",&,N,V_delegateQueue
Td,N,V_connectionTimeout
T{CGSize=dd},N,V_remoteVideoPresentationSize
TI,N,V_remoteVideoPresentationState
setClientUUID:
setReportingHierarchyToken:
setRequiresInviteDictionary:
setLocalLandscapeAspectRatio:
setLocalPortraitAspectRatio:
_caller
_requiresInviteDictionary
_capabilities
_clientUUID
_reportingHierarchyToken
_remoteInviteDictionary
_localLandscapeAspectRatio
_localPortraitAspectRatio
TB,N,GisCaller,V_caller
T@"VCCapabilities",&,N,V_capabilities
T@"NSUUID",&,N,V_clientUUID
T@"RTCSecureHierarchyToken",&,N,V_reportingHierarchyToken
TB,N,V_requiresInviteDictionary
T@"NSDictionary",C,N,V_remoteInviteDictionary
T{CGSize=dd},N,V_localLandscapeAspectRatio
T{CGSize=dd},N,V_localPortraitAspectRatio
initWithDictionaryRepresentation:
UUID
initWithHandoffIdentifier:
setOutgoing:
initWithType:value:
setRemoteHandle:
setContext:
mutableCopy
context
isOutgoing
setObject:forKeyedSubscript:
remoteHandle
value
initWithHandoffActivityUserInfo:
handoffActivityUserInfo
providerIdentifierForHandoffActivityUserInfo:
numberWithUnsignedInt:
numberWithUnsignedLongLong:
setHandle:
setAvcData:
setVersion:
setHasVersion:
hasVersion
setIdentifier:
setHasIdentifier:
hasIdentifier
hasHandle
hasAvcData
setIsMomentsAvailable:
setHasIsMomentsAvailable:
hasIsMomentsAvailable
setIsScreenSharingAvailable:
setHasIsScreenSharingAvailable:
hasIsScreenSharingAvailable
setIsGondolaCallingAvailable:
setHasIsGondolaCallingAvailable:
hasIsGondolaCallingAvailable
setIsMirageAvailable:
setHasIsMirageAvailable:
hasIsMirageAvailable
setIsLightweight:
setHasIsLightweight:
hasIsLightweight
setSharePlayProtocolVersion:
setHasSharePlayProtocolVersion:
hasSharePlayProtocolVersion
setOptions:
setHasOptions:
hasOptions
version
identifier
handle
avcData
isMomentsAvailable
isScreenSharingAvailable
isGondolaCallingAvailable
isMirageAvailable
isLightweight
sharePlayProtocolVersion
options
_identifier
_avcData
_handle
_options
_sharePlayProtocolVersion
_version
_isGondolaCallingAvailable
_isLightweight
_isMirageAvailable
_isMomentsAvailable
_isScreenSharingAvailable
TI,N,V_version
TQ,N,V_identifier
T@"CSDMessagingHandle",&,N,V_handle
T@"NSData",&,N,V_avcData
TB,N,V_isMomentsAvailable
TB,N,V_isScreenSharingAvailable
TB,N,V_isGondolaCallingAvailable
TB,N,V_isMirageAvailable
TB,N,V_isLightweight
TI,N,V_sharePlayProtocolVersion
TI,N,V_options
handleType
messagingHandleTypeFor:
setHandleType:
notificationStyles
setNotificationStyles:
hasHandleType
hasNotificationStyles
tuHandleType
initWithHandleType:notificationStyles:
T@"TUConversationInvitationPreference",R,N
protoProtocolVersion
setProtoProtocolVersion:
protoWantsVideo
setProtoWantsVideo:
protoSenderMuteUplink
setProtoSenderMuteUplink:
protoMomentsV2Available
setProtoMomentsV2Available:
protoShouldSuppressInCallUI
setProtoShouldSuppressInCallUI:
setProtocolVersion:
protocolVersion
wantsVideo
setWantsVideo:
senderMuteUplink
setSenderMuteUplink:
setMomentsAvailable:
shouldSuppressInCallUI
setShouldSuppressInCallUI:
addProtocolVersion
momentsAvailable
TB,N,GisMomentsAvailable
callStatusChanged:
callContinuityChanged:
shouldSuppressRingtoneChanged:
callStartedConnecting:
callConnected:
providerManager
addDelegate:queue:
updateCallHandoffRegistration
updateAppHistoryActivityForCall
updateHandoffActivityState
updateSuppressRingtoneActivityListeningState
supportsPrimaryCalling
activityCommunicator
stopListeningForActivityType:
providers
handoffIdentifiers
listenForActivityType:dynamicIdentifier:
currentCalls
firstObject
isHostedOnCurrentDevice
isEndpointOnCurrentDevice
handoffDynamicIdentifier
activityWithType:dynamicIdentifier:userInfo:
handoffActivity
endHandoffActivity
broadcastActivity:
setHandoffActivity:
stopBroadcastingActivity:
wasDeclined
startSuppressRingtoneActivityBroadcastingForCall:
broadcastActivity:withTimeout:shouldPrioritize:
shouldSuppressRingtone
callPassingTest:
currentAudioAndVideoCalls
localizedLabel
isoCountryCode
displayName
dictionaryWithCapacity:
appHistoryActivityWithTitle:subtitle:keywords:userInfo:
startSuppressRingtoneActivityBroadcastingIfNecessaryForCallWithStatusChange:
ringtoneSuppressedRemotely
componentsSeparatedByString:
lastObject
audioAndVideoCallsWithStatus:
suppressRingtoneDueToRemoteSuppression
providersChangedForProviderManager:
receivedBroadcastedActivityType:dynamicIdentifier:
T@"CSDUserActivityManager",R,N
setActivityCommunicator:
_activityCommunicator
_handoffActivity
T@"CSDUserActivityCommunicator",&,N,V_activityCommunicator
T@"CSDUserActivity",&,N,V_handoffActivity
csd_UUIDv5ForString:
csd_UUIDv5
messageSendTime
typeString
uniqueProxyIdentifier
appendFormat:
block
reportingController:statusChangedForCall:totalCallCount:
reportingController:callEnteredForeground:
allCallsBackgroundedForReportingController:
reportingController:relayMessageReceived:fromPairedDevice:
reportingController:transactionGroupCompleted:
reportingController:providerFailedWithAction:forCall:
reportingController:capturedMomentsUsageReport:
reportingController:pickedRoute:forCall:
reportingController:timedOutPickingRoute:forCall:
reportingController:callUUID:withUserScore:
reportingController:addedActiveConversation:
reportingController:stateChangedForConversation:
reportingController:letMeInRequestStateChangedForConversation:
reportingController:removedActiveConversation:
reportingController:activeRemoteParticipantsChangedForConversation:
reportingController:remoteMembersChangedForConversation:
reportingController:AVCBlobRecoveryStartedForConversation:
reportingController:AVCBlobRecoveryTimedOutForConversation:
reportingController:receivedReports:forConversation:
reportingController:receivedChat:
reportingController:receivedReports:forSessionWithUUID:
reportingController:voipAppFailedToPostIncomingCall:
reportingController:voipAppBecameDisabledFromLaunching:
reportingController:voipPushDroppedOnTheFloor:
reportingController:createOneToOneFTReportingSessionForCallWithUUID:withReportingHierarchyToken:withVideo:
reportingController:createConversationReportingSessionForConversation:
reportingController:didEndSession:startDate:endDate:
reportingController:addedActivatedLink:
reportingController:receivedLetMeInRequestForConversation:
reportingController:sentLetMeInResponseForConversation:isApproved:
dataSource
setDataSource:
T@"<CSDReporterDataSource>",W,N
setBlock:
_block
T@?,C,N,V_block
routeController
initWithQueue:routeController:callCenterObserver:interfaceOrientationObserver:proximitySensorObserver:voiceOverObserver:
currentHandler
handleFailureInMethod:object:file:lineNumber:description:
orientation
setInterfaceOrientationPortrait:
setHandler:
activeInterfaceOrientationWithCompletion:
addDelegate:
voiceOverObserver
isEnabled
shouldRouteToSpeakerWithProximity
updateProximitySensorState
setProximitySensorEnabled:
proximityChangeHandler
updateVoiceOverRoutingForCurrentProximityState
proximityDetectionMode
setProximityDetectionMode:
tu_defaults
boolForKey:
isInterfaceOrientationPortrait
isProximitySensorCovered
anyCallPassesTest:
isRTT
isTTY
supportsCurrentPlatform
pickedRoute
isReceiver
isSpeaker
voiceOverRunningDeterminationHandler
shouldEnableProximitySensor
receiverRoute
pickRoute:
voiceOverTouchShouldRouteToSpeakerDeterminationHandler
speakerRoute
setProximitySensorCovered:
proximitySensorObserver:didChangeCovered:
routesChangedForRouteController:
initWithQueue:proximitySensorObserver:voiceOverObserver:
isProximitySensorEnabled
interfaceOrientationObserver
proximitySensorObserver
setVoiceOverRunningDeterminationHandler:
setVoiceOverTouchShouldRouteToSpeakerDeterminationHandler:
setProximityChangeHandler:
_interfaceOrientationPortrait
_proximitySensorCovered
_proximityDetectionMode
_routeController
_interfaceOrientationObserver
_proximitySensorObserver
_voiceOverObserver
_voiceOverRunningDeterminationHandler
_voiceOverTouchShouldRouteToSpeakerDeterminationHandler
_proximityChangeHandler
T@"<CSDCallCenterObserver>",R,N,V_callCenterObserver
T@"TURouteController",R,N,V_routeController
T@"<CSDOrientationObserver>",R,N,V_interfaceOrientationObserver
T@"<CSDProximitySensorObserver>",R,N,V_proximitySensorObserver
T@"<CSDVoiceOverObserver>",R,N,V_voiceOverObserver
interfaceOrientationPortrait
TB,N,GisInterfaceOrientationPortrait,V_interfaceOrientationPortrait
Ti,N,V_proximityDetectionMode
proximitySensorCovered
TB,N,GisProximitySensorCovered,V_proximitySensorCovered
proximitySensorEnabled
TB,R,N,GisProximitySensorEnabled
T@?,C,N,V_voiceOverRunningDeterminationHandler
T@?,C,N,V_voiceOverTouchShouldRouteToSpeakerDeterminationHandler
T@?,C,N,V_proximityChangeHandler
conferenceID
hasPrefix:
length
substringFromIndex:
GUID
dataUploaded
dataDownloaded
initWithIDSChat:
setFaceTimeTransportType:
isRemoteMomentsAvailable
setRemoteMomentsAvailable:
otherIMHandle
initWithDestinationID:
setHasVideo:
setSupportsHolding:
setSupportsGrouping:
setSupportsUngrouping:
setSupportsDTMF:
setRequiresInCallSounds:
setCrossDeviceIdentifier:
setAudioInterruptionProvider:
setAudioInterruptionOperationMode:
setAudioCategory:
setAudioMode:
remoteMembers
setRemoteParticipantHandles:
remoteParticipantHandles
anyObject
setParticipantGroupUUID:
isLocallyCreated
isOneToOneModeEnabled
setConversation:
hasVideo
selectiveSharingSessionUUID
setWindowUUID:
setScreenShareAttributes:
numberWithInteger:
initWithFaceTimeIDSChat:
initWithIMAVChat:
initWithTUConversation:
faceTimeTransportType
Tq,N
remoteMomentsAvailable
TB,R,N,GisRemoteMomentsAvailable
orderedSet
supportsDisplayingFaceTimeAudioCalls
supportsDisplayingFaceTimeVideoCalls
daemonConnected:
handleChatStateChanged:
handleChatFirstRemoteFrameArrived:
handleChatInvitationSent:
handleChatCallInfoChangedNotification:
handleChatConferenceIDChangedNotification:
handleChatConferenceMetadataUpdated:
handleChatMayRequireBreakBeforeMakeChanged:
handleChatInFrequencyChangedNotification:
handleChatOutFrequencyChangedNotification:
setIMAVCapabilities:toCaps:
setupIMAVController
setBlockIncomingInvitationsDuringCall:
setBlockMultipleIncomingInvitations:
_requestPendingInvites
requestPendingACInvitations
requestPendingVCInvitations
cachedChats
chatWithUUID:
removeObject:
_endChatWithUUID:withEndedReason:
endChatWithReason:
facetimeService
callService
isRegistered
imHandleWithID:
arrayWithObjects:count:
isRelay
callUUID
initOutgoingTo:isVideo:isRelayed:GUID:
setConnectionTimeoutTime:
faceTimeProvider
isUpgrade
setInvitationTimeoutTime:
_setLocalLandscapeAspectRatio:localPortraitAspectRatio:forChat:
invite:additionalPeers:excludingPushTokens:
registerChat:
isComplete
reportCallWithUUID:updated:
fulfill
faceTimeDemuxerDelegate
providerDelegate:callWithUUID:startedConnectingAtDate:
reportOutgoingCallWithUUID:connectedAtDate:
pendingCallActionsOfClass:withCallUUID:
fulfillWithDateConnected:
fail
trace:
_updateProviderForConnectingChat:
_updateProviderForConnectedChat:
_updateProviderForEndedChat:
failureContextForChat:
providerDelegate:callWithUUID:endedAtDate:withReason:failureContext:
setFailureReason:
supportsWLAN
allowAnyNetwork
supportsNonWiFiCalling
supportsNonWiFiFaceTime
localizedStringForKey:value:table:
setTitle:
setMessage:
setHasWiFiSettingsRemediation:
setHasCellularSettingsRemediation:
setHasDateAndTimeSettingsRemediation:
setHasLocationSettingsRemediation:
destinationIdIsPhoneNumber
setProviderErrorCode:
isLocalParticipant
avChat
reportOutgoingCallWithUUID:sentInvitationAtDate:
_activeCallID
setVideoStreamToken:
reportCallWithUUID:crossDeviceIdentifier:changedBytesOfDataUsed:
mayRequireBreakBeforeMake
setMayRequireBreakBeforeMake:
inFrequencyLevel
reportCallWithUUID:changedFrequencyData:forDirection:
outFrequencyLevel
declineInvitationWithResponse:
reportNewIncomingCallWithUUID:update:completion:
setProvider:
_setUpListeners
endChat
downgradeToAudio
setIsSendingVideo:
acceptInvitation
isOnHold
setIsSendingAudio:
videoPresentationSize
videoPresentationState
IMAVChatRemoteVideoPresentationStateFromCXVideoPresentationState:
isRelaying
setRelayed:
setMute:
invitedToIMAVChat:
createdOutgoingIMAVChat:
inviteFailedFromIMHandle:reason:
providerDidReset:
providerDidBegin:
provider:executeTransaction:
provider:performStartCallAction:
provider:performAnswerCallAction:
provider:performEndCallAction:
provider:performSetHeldCallAction:
provider:performSetMutedCallAction:
provider:performSetGroupCallAction:
provider:performPlayDTMFCallAction:
provider:timedOutPerformingAction:
provider:didActivateAudioSession:
provider:didDeactivateAudioSession:
provider:performSendMMIOrUSSDCodeAction:
provider:performJoinCallAction:
provider:performSetTTYTypeCallAction:
provider:performSetSendingVideoCallAction:
provider:performSetSharingScreenCallAction:
provider:performSetScreenShareAttributesCallAction:
provider:performEnableVideoCallAction:
provider:performSetRelayingCallAction:
provider:performPullCallAction:
provider:performSetVideoPresentationSizeCallAction:
provider:performSetVideoPresentationStateCallAction:
isManagingCallWithUUID:
hasCallStartedConnectingWithUUID:
upgradeSessionUUIDForCallWithUUID:
endCallWithUUIDAsAnsweredElsewhere:
endCallWithUUIDAsDeclinedElsewhere:
endCallWithUUIDAsLocalHangup:
endCallWithUUID:
inviteIMAVPeersWithAction:tokensToExclude:joinCallActionToFulfill:
setFaceTimeDemuxerDelegate:
setCachedChats:
_faceTimeDemuxerDelegate
_provider
_cachedChats
T@"CXProvider",&,N,V_provider
T@"NSMutableOrderedSet",&,N,V_cachedChats
T@"<CSDFaceTimeProviderDelegateManagerDelegate>",W,N,V_faceTimeDemuxerDelegate
initWithName:
faceTimeIMAccountCallerIDChanged:
callerID
postNotificationName:object:
account:aliasesChanged:
initWithQueue:UUID:groupUUID:groupSession:messagesGroupUUID:locallyCreated:localMember:initiator:remoteMembers:pendingMembers:otherInvitedHandles:lightweightMembers:activities:link:report:fromStorage:video:applicationController:featureFlags:systemStateObserver:
distantPast
gondolaOar
_expanseEnabled
initWithIdentifier:groupUUID:activities:applicationController:delegate:queue:systemStateObserver:
setRemoteMembers:
pendingMembers
setOtherInvitedHandles:
array
newHierarchyTokenFromParentToken:
initWithSerialQueue:
setReportingHierarchySubToken:
reportingHierarchySubToken
initWithTransportToken:delegate:queue:reportingHierarchyToken:oneToOneModeEnabled:video:report:
requestActiveParticipants
unknownProvider
localMember
isLightweightMember
setWithObject:
addRequiredCapabilities:requiredLackOfCapabilities:
messagesGroupUUID
hasReceivedLetMeInRequest
letMeInRequestState
ignoreLMIRequests
avcSessionToken
avcSessionIdentifier
hasJoined
isUplinkMuted
isAudioEnabled
isVideoEnabled
isScreenEnabled
allObjects
componentsJoinedByString:
kickedMembers
rejectedMembers
otherInvitedHandles
lightweightMembers
memberIdentifiers
activeRemoteParticipants
activeLightweightParticipants
report
virtualParticipants
tuActivitySessions
appendString:
activeRemoteParticipantsByIdentifier
allValues
setWithArray:
activeLightweightParticipantsByIdentifier
isLocalAccountHandle
initWithUUID:groupUUID:provider:
setHasReceivedLetMeInRequest:
setLetMeInRequestState:
setMessagesGroupUUID:
setAvcSessionToken:
setAvcSessionIdentifier:
setAudioEnabled:
setVideoEnabled:
setScreenEnabled:
setLocallyCreated:
setHasJoined:
initiator
setInitiator:
setPendingMembers:
setKickedMembers:
setRejectedMembers:
setIgnoreLMIRequests:
messagesGroupName
setMessagesGroupName:
maxVideoDecodesAllowed
setMaxVideoDecodesAllowed:
setReport:
setLocalMember:
localParticipantIdentifier
setLocalParticipantIdentifier:
setOneToOneModeEnabled:
setActivitySessions:
setVideo:
setVirtualParticipants:
setInvitationPreferences:
setLightweightMembers:
isFromStorage
setFromStorage:
isAnyOtherAccountDeviceActive
setIsAnyOtherAccountDeviceActive:
setWithCapacity:
tuConversationParticipant
featureFlags
aTVHandoff
unionSet:
setActiveRemoteParticipants:
setActiveLightweightParticipants:
avcSession
sessionIdentifier
sessionToken
idsSession
isAudioReady
setRemoteMemberHandles:
localParticipantDataToSendToDestinationIDs:
initWithIdentifier:handle:avcData:
faceTimeInviteDemuxer
destinationIDsCanUseV2Blobs:
localParticipantDataWithVersion:
expanseEnabled
forceExpanseEnabled
sharePlaySystemStateObserver
setActivitySessionManager:
virtualParticipantsByPluginName
remoteMemberHandles
destinationIdIsEmailAddress
setUplinkMuted:
expectedAudioEnabled
setExpectedAudioEnabled:
expectedVideoEnabled
expectedScreenEnabled
setExpectedVideoEnabled:
setScreenEnabled:attributes:
setExpectedScreenEnabled:
conversationChanged:
expectedVideoPaused
setExpectedVideoPaused:
expectedAudioPaused
setAudioPaused:forParticipantWithIdentifier:
setExpectedAudioPaused:
setRelaying:
conversationOneToOneModeEnabled
destinationIdIsTemporary
updateLocalAspectRatiosForOneToOneModeEnabled:
isEquivalentToHandle:
kickMember:
activitySessionManager
setHandedOff:
faceTimeShowInCallUIURL
faceTimeShowSystemCallControlsURL
_launchApplicationForActivityIfNecessary
presentationState
setPresentationState:
presentationRect
setPresentationRect:
videoDeviceController
lightweightPrimary
setSplitSessionSecondary:
removeParticipant:
allowsVideo
addParticipant:withVideoEnabled:
setServerProvidedParticipantIdentifiers:
setServerProvidedLightweightParticipantIdentifiers:
refreshActiveParticipantsList
serverBag
rebroadcastTimeThreshold
setRebroadcastTimeThreshold:
conversation:addedActiveParticipant:
_cancelInFlightAVCBlobRecoveryIfNecessary
isEqualToHandle:
splitSessionSecondary
leave
conversation:removedActiveParticipant:
beginParticipantUpdates
videoQuality
visibility
prominence
spatialPosition
participantIdentifier
setVideoQuality:visibility:prominence:spatialPosition:forParticipantWithIdentifier:
commitParticipantUpdates
setCurrentParticipantPresentationContexts:
pluginName
updateVirtualParticipantIdentifier:
_registerPluginsIfNecessary
minusSet:
removeMembers:fromExistingMembers:activeParticipants:triggeredLocally:
addRemoteMembers:otherInvitedHandles:invitationPreferences:addingFromLetMeIn:triggeredLocally:
containsObject:
_allowMember:
joinedFromLetMeIn
memberHandlesAwaitingInvitesToLink
setLightweightPrimary:
activitySessions
activitySessionWithCSDConversationActivitySession:fromConversation:
setWithSet:
isJoined
localParticipantData
setScreenSharingAvailable:
setGondolaCallingAvailable:
addMembers:toExistingMembers:activeParticipants:activitySessions:link:otherInvitedHandles:report:invitationPreferences:requiredCapabilities:addingFromLetMeIn:triggeredLocally:
pendingMemberHandles
nickname
initWithHandle:nickname:
setPendingMemberHandles:
expirationDate
setInvitedMemberHandles:
leaveActivitySessionWithUUID:
removeActivitySessionWithUUID:usingHandle:
isScreenSharingActivity
supportsMultipleActivitySessions
timestamp
tuConversationActivitySession
activity
activityIdentifier
localBundleIDForActivityIdentifier:
setBundleIdentifier:
createActivitySessionWithTuActivitySession:
isLocallyInitiated
_launchApplicationDueToActivityCreation:
launchAppForActivity:foreground:completionHandler:
representativeBundleIdentifier
csd_applicationRecordForBundleIdentifier:
dictionaryWithObjects:forKeys:count:
errorWithDomain:code:userInfo:
setFrontBoardOptions:
defaultWorkspace
openApplicationWithBundleIdentifier:usingConfiguration:completionHandler:
compare:
applicationContext
allowSharePlay
applicationLaunchPolicyManager
tuConversation
shouldLaunchAppInBackgroundForActivity:onConversation:
_backgroundLaunchEnabled
conversation:appLaunchState:forActivitySession:
permitJoin
launchAppWithBackgroundPiPForActivity:withCompletion:
mainDisplay
bounds
localCapabilities
setLightweight:
isGreenTea
_reportConversationFailedWithProviderEndedReason:
_startIDSSessionWithContext:
idsDestination
avcSessionCreationBlock
setAvcSession:
setAvcSessionInProgress:
wantsStagingArea
sendLocalParticipantData:
setAudioReady:
_startAVCSessionIfNecessary
_beginTimeoutForLeavingConversationWithReason:
unsignedIntegerValue
setDownlinkMuted:forParticipantWithIdentifier:
stopSelectiveSharingSession
resetSessions
activeIDSDestination
conversation:sendDeclineMessageToParticipantDestination:
pendingKickedMembers
pendingAllowedMembers
allowMember:
setAudioAndVideoMuted:forParticipantWithIdentifier:
individualAudioVideoToggleEnabled
setAudioEnabled:forParticipantWithIdentifier:
setVideoEnabled:forParticipantWithIdentifier:
initWithHandle:
reducedInfoMembers:
isEqualToSet:
requiredCapabilities
requiredLackOfCapabilities
initWithIdentifier:handle:
stableBundleIdentifierForLocalBundleIdentifier:
dataUsingEncoding:
virtualParticipantConfig
setIdsAliasingSalt:
setVirtualParticipantConfig:
addAliasesToConversationContainer:withSalt:
isInitiator
participantDestinationIDS
joinUsingContext:localParticipantAVCData:members:otherInvitedHandles:participantDestinationIDs:link:report:
avcSessionInProgress
start
_cancelTimeoutForLeavingConversation
timeoutBlock
setTimeoutBlock:
sessionCleanupTimeout
activeParticipantDestinationsByIdentifier
inflightAVCBlobRecoveryBlocksByIdentifier
AVCBlobRecoveryGracePeriod
avcBlobRecoveryStartedForConversation:
avcBlobRecoveryTimedOutForConversation:
AVCBlobRecoveryTimeout
conversation:requestAVCBlobForParticipantDestination:completion:
allKeys
serverProvidedParticipantIdentifiers
isWaitingToPruneParticipants
setWaitingToPruneParticipants:
activeParticipantPruningTimeout
serverProvidedLightweightParticipantIdentifiers
removeParticipantWithIdentifier:fromHandle:
participantRefreshBlock
setParticipantRefreshBlock:
activeParticipantRefreshDelay
setProviderEndedReason:
conversation:failedWithContext:
normalizedValue
caseInsensitiveCompare:
sortUsingSelector:
SHA1HexString
qrPluginEnabled
registerPluginWithOptions:
setMemberIdentifiers:
conversationConnectionDidStart:
setStreamToken:
setScreenToken:
restart
_reportConversationFailedWithFailureReason:providerEndedReason:
setByAddingObjectsFromSet:
setActiveIDSDestination:
conversationInvalidated:
setActiveParticipantDestinationsByIdentifier:
_requestAVCBlobsIfNecessary
_pruneRemoteParticipantsIfNecessary
setActiveLightweightParticipantDestinationsByIdentifier:
reportsReceived:forConversation:
setKickMemberRetryCount:
kickedParticipants
setPendingKickedMembers:
removeRemoteMembers:triggeredLocally:
initWithSet:
addRemoteMembers:otherInvitedHandles:triggeredLocally:
kickMemberRetryCount
maxKickMemberRetries
maxActiveParticipantFetchRetries
unsignedLongLongValue
initWithIdentifier:pluginName:
addVirtualParticipant:
removeVirtualParticipant:
refreshDataCryptors
userInfo
intValue
createSelectiveSharingSessionIfNecessary
_errorToAVCProviderEndedReason:defaultProviderReason:
lastRebroadcastTime
timeIntervalSinceDate:
setLastRebroadcastTime:
broadcastLocalParticipantData
_cleanUpFromAVCSessionFailure
screenShareAttributes
defaultAttributes
resetSelectiveSharingSessionContent
conversation:changedBytesOfDataUsed:
reconnect
conversation:updatedActiveParticipant:
currentParticipantPresentationContexts
updateParticipantPresentationContexts:
setAudioPriority:
setVideoPriority:
conversation:mediaPrioritiesChangedForParticipant:
setRemoteAudioEnabled:
conversation:remoteParticipantWithIdentifier:updatedAudioEnabled:
setRemoteVideoEnabled:
conversation:remoteParticipantWithIdentifier:updatedVideoEnabled:
didJoinActivity:onConversation:
metadata
supportsContinuationOnTV
conversation:activitySessionChanged:
conversation:receivedActivitySessionEvent:
requestDataCryptorForTopic:completionHandler:
requestEncryptionKeyForParticipants:topic:
localParticipant
participantIDForAlias:salt:
conversation:activityChangedOnSession:
didEndSession:startDate:endDate:
conversation:activitySessionRemoved:userOriginated:
activitySessionManager:activitySessionChanged:
conversation:didChangeStateForActivitySession:
session:receivedActiveParticipantDestinationsByIdentifier:
session:receivedActiveLightweightParticipantDestinationsByIdentifier:
session:didJoinGroup:participantIdentifiers:error:
session:didLeaveGroupWithError:
sessionDidTerminate:
session:endedWithError:reason:
session:didReceiveReport:
session:didReceiveKickedParticipantIDs:withCode:withType:isTruncated:
session:didRegisterPluginAllocationInfo:
session:didUnregisterPluginAllocationInfo:
sessionDidReceiveKeyUpdate:
activitySessionManager:activityChangedOnSession:
activitySessionManager:receivedActivitySessionEvent:
activitySessionManager:fetchDataCryptorForTopic:completionHandler:
activitySessionManager:requestEncryptionKeysForParticipants:topicName:
activitySessionManager:localParticipantWithParticipantIdentifier:bundleIdentifier:
activitySessionManager:activeRemoteParticipantWithParticipantIdentifier:bundleIdentifier:
activitySessionManagerRequestedCallTypeStringForLogging:
activitySessionManager:sessionUnjoined:startDate:endDate:
activitySessionManager:requestForegroundPresentationForActivity:
activitySessionManager:activitySessionRemoved:userOriginated:
activitySessionManager:activitySessionStateChanged:oldState:
session:didStart:error:
session:didDetectError:
session:didStopWithError:
session:changedLocalAudioEnabled:didSucceed:error:
session:changedLocalVideoEnabled:didSucceed:error:
session:changedScreenEnabled:didSucceed:error:
session:changedLocalAudioPaused:didSucceed:error:
session:changedLocalVideoPaused:didSucceed:error:
session:changedOneToOneModeEnabled:didSucceed:error:
session:changedBytesOfDataUsed:
serverDisconnectedForSession:
sessionShouldReconnect:
remoteParticipantWithIdentifier:updatedAudioEnabled:streamToken:screenToken:
remoteParticipantWithIdentifier:updatedVideoEnabled:streamToken:screenToken:
remoteParticipantWithIdentifier:updatedScreenEnabled:streamToken:screenToken:
remoteParticipantWithIdentifier:updatedAudioEnabled:updatedVideoEnabled:streamToken:screenToken:
remoteParticipantWithIdentifier:updatedAudioPaused:streamToken:
remoteParticipantWithIdentifier:didChangeAudioPriority:videoPriority:
remoteParticipantWithIdentifier:updatedRemoteAudioEnabled:
remoteParticipantWithIdentifier:updatedRemoteVideoEnabled:
initWithQueue:UUID:groupUUID:groupSession:messagesGroupUUID:locallyCreated:localMember:initiator:remoteMembers:pendingMembers:otherInvitedHandles:lightweightMembers:activities:link:report:fromStorage:video:applicationController:
localConversationParticipantWithDataToSendToDestinationIDs:
setForceExpanseEnabled:
memberHandlesEligibleForLinkApproval
addActiveParticipant:
updateMessagesGroupName:
addPendingMembers:triggeredLocally:
removePendingMembers:triggeredLocally:
setConversationLink:allowUpdate:
removeActivitySessionWithUUID:usingTerminatingHandle:
createActivitySession:
launchAppForActivity:completionHandler:
joinUsingContext:
startAudio
setRemoteParticipantsDownlinkMuted:
isRepresentedByRemoteMembers:andLink:
containsMemberWithHandle:
capabilitySendMessageOptions
remoteParticipantForHandle:
addAliasesToConversationContainer:forBundleIdentifier:
allParticipantsSupportSharePlay
_stableExpanseIdentifier
setActiveLightweightParticipantsByIdentifier:
setKickedParticipants:
activeLightweightParticipantDestinationsByIdentifier
setPendingAllowedMembers:
setApplicationLaunchPolicyManager:
setSharePlaySystemStateObserver:
setMemberHandlesEligibleForLinkApproval:
setMemberHandlesAwaitingInvitesToLink:
setServerBag:
setAvcSessionCreationBlock:
_relaying
_fromStorage
_video
_hasReceivedLetMeInRequest
_locallyCreated
_hasJoined
_ignoreLMIRequests
_waitingToPruneParticipants
_avcSessionInProgress
_forceExpanseEnabled
_memberIdentifiers
_UUID
_groupUUID
_link
_messagesGroupUUID
_letMeInRequestState
_initiator
_localMember
_remoteMembers
_lightweightMembers
_pendingMembers
_kickedMembers
_rejectedMembers
_otherInvitedHandles
_messagesGroupName
_activitySessionManager
_report
_featureFlags
_activeRemoteParticipantsByIdentifier
_activeLightweightParticipantsByIdentifier
_kickedParticipants
_idsSession
_avcSession
_expectedAudioEnabled
_expectedVideoEnabled
_expectedScreenEnabled
_expectedVideoPaused
_expectedAudioPaused
_activeParticipantDestinationsByIdentifier
_activeLightweightParticipantDestinationsByIdentifier
_serverProvidedParticipantIdentifiers
_serverProvidedLightweightParticipantIdentifiers
_lastRebroadcastTime
_rebroadcastTimeThreshold
_videoDeviceController
_virtualParticipantsByPluginName
_faceTimeInviteDemuxer
_pendingKickedMembers
_pendingAllowedMembers
_kickMemberRetryCount
_currentParticipantPresentationContexts
_splitSessionSecondary
_applicationLaunchPolicyManager
_sharePlaySystemStateObserver
_remoteMemberHandles
_pendingMemberHandles
_memberHandlesEligibleForLinkApproval
_memberHandlesAwaitingInvitesToLink
_serverBag
_avcSessionCreationBlock
_reportingHierarchySubToken
_inflightAVCBlobRecoveryBlocksByIdentifier
_timeoutBlock
_participantRefreshBlock
_invitationPreferences
_screenShareAttributes
T@"<TUFeatureFlags>",R,N,V_featureFlags
Tq,N,V_state
TB,N,GhasJoined,V_hasJoined
T@"NSMutableDictionary",R,N,V_activeRemoteParticipantsByIdentifier
T@"NSMutableDictionary",&,N,V_activeLightweightParticipantsByIdentifier
T@"NSMutableSet",&,N,V_kickedParticipants
T@"CSDIDSGroupSession",R,N,V_idsSession
T@"<CSDAVCSession>",&,N,V_avcSession
T@"NSNumber",&,N,V_expectedAudioEnabled
T@"NSNumber",&,N,V_expectedVideoEnabled
T@"NSNumber",&,N,V_expectedScreenEnabled
T@"NSNumber",&,N,V_expectedVideoPaused
T@"NSNumber",&,N,V_expectedAudioPaused
T@"NSDictionary",C,N,V_activeParticipantDestinationsByIdentifier
T@"NSDictionary",C,N,V_activeLightweightParticipantDestinationsByIdentifier
T@"NSSet",C,N,V_serverProvidedParticipantIdentifiers
T@"NSSet",C,N,V_serverProvidedLightweightParticipantIdentifiers
waitingToPruneParticipants
TB,N,GisWaitingToPruneParticipants,V_waitingToPruneParticipants
T@"NSDate",C,N,V_lastRebroadcastTime
TQ,N,V_rebroadcastTimeThreshold
T@"TUVideoDeviceController",R,N,V_videoDeviceController
oneToOneModeEnabled
TB,N,GisOneToOneModeEnabled
T@"NSMutableDictionary",R,N,V_virtualParticipantsByPluginName
T@"CSDFaceTimeInviteDemuxer",R,N,V_faceTimeInviteDemuxer
T@"NSMutableSet",&,N,V_pendingKickedMembers
T@"NSMutableSet",&,N,V_pendingAllowedMembers
TQ,N,V_kickMemberRetryCount
T@"NSArray",&,N,V_currentParticipantPresentationContexts
T@"CSDConversationParticipant",&,N,V_splitSessionSecondary
T@"CPApplicationPolicyManager",&,N,V_applicationLaunchPolicyManager
T@"CPSystemStateObserver",&,N,V_sharePlaySystemStateObserver
T@"TUConversationLink",&,N,V_link
T@"NSSet",C,N,V_remoteMembers
T@"NSSet",C,N,V_pendingMembers
T@"NSSet",C,N,V_kickedMembers
T@"NSSet",C,N,V_rejectedMembers
T@"NSSet",C,N,V_otherInvitedHandles
T@"NSSet",C,N,V_lightweightMembers
T@"NSSet",C,N,V_remoteMemberHandles
T@"NSSet",C,N,V_pendingMemberHandles
T@"NSSet",C,N,V_memberHandlesEligibleForLinkApproval
T@"NSMutableArray",C,N,V_memberHandlesAwaitingInvitesToLink
T@"<CSDConversationServerBag>",&,N,V_serverBag
T@?,C,N,V_avcSessionCreationBlock
T@"NSObject",&,N,V_reportingHierarchyToken
T@"NSObject",&,N,V_reportingHierarchySubToken
T@"NSMutableDictionary",R,C,N,V_inflightAVCBlobRecoveryBlocksByIdentifier
T@?,C,N,V_timeoutBlock
T@?,C,N,V_participantRefreshBlock
TB,N,V_avcSessionInProgress
TB,N,V_forceExpanseEnabled
T@"NSSet",C,N,V_invitationPreferences
T@"TUCallScreenShareAttributes",N,V_screenShareAttributes
T@"TUConversationProvider",&,N,V_provider
T@"TUConversationParticipant",R,N
T@"<CSDConversationDelegate>",W,N,V_delegate
T@"NSUUID",R,N,V_UUID
T@"NSUUID",R,N,V_groupUUID
T@"NSUUID",R,N,V_messagesGroupUUID
TB,N,V_hasReceivedLetMeInRequest
Tq,N,V_letMeInRequestState
TQ,R,N
audioReady
TB,R,N,GisAudioReady
locallyCreated
TB,R,N,GisLocallyCreated,V_locallyCreated
T@"TUHandle",R,N,V_initiator
T@"TUConversationMember",R,N,V_localMember
T@"NSSet",R,C,N
TB,N,V_ignoreLMIRequests
fromStorage
TB,N,GisFromStorage,V_fromStorage
T@"NSString",C,N,V_messagesGroupName
T@"NSSet",C,N,V_memberIdentifiers
T@"TUConversation",R,C,N
uplinkMuted
TB,N,GisUplinkMuted
videoEnabled
TB,N,GisVideoEnabled
screenEnabled
TB,R,N,GisScreenEnabled
audioEnabled
TB,N,GisAudioEnabled
videoPaused
TB,N,GisVideoPaused
audioPaused
TB,N,GisAudioPaused
relaying
TB,N,GisRelaying,V_relaying
video
TB,N,GisVideo,V_video
T{CGRect={CGPoint=dd}{CGSize=dd}},N
T@"NSDictionary",R,N
T@"CPActivitySessionManager",&,N,V_activitySessionManager
T@"TUConversationReport",R,N,V_report
T@"NSSet",R,N
handleActiveAccountsChanged:
_handlePairedDeviceChangedFrom:to:
setHasSupportsHolding:
hasSupportsHolding
setHasSupportsGrouping:
hasSupportsGrouping
setHasSupportsUngrouping:
hasSupportsUngrouping
setHasSupportsDTMF:
hasSupportsDTMF
setSupportsUnambiguousMultiPartyState:
setHasSupportsUnambiguousMultiPartyState:
hasSupportsUnambiguousMultiPartyState
setSupportsAddCall:
setHasSupportsAddCall:
hasSupportsAddCall
setSupportsSendingToVoicemail:
setHasSupportsSendingToVoicemail:
hasSupportsSendingToVoicemail
supportsHolding
supportsGrouping
supportsUngrouping
supportsDTMF
supportsUnambiguousMultiPartyState
supportsAddCall
supportsSendingToVoicemail
_supportsAddCall
_supportsDTMF
_supportsGrouping
_supportsHolding
_supportsSendingToVoicemail
_supportsUnambiguousMultiPartyState
_supportsUngrouping
TB,N,V_supportsHolding
TB,N,V_supportsGrouping
TB,N,V_supportsUngrouping
TB,N,V_supportsDTMF
TB,N,V_supportsUnambiguousMultiPartyState
TB,N,V_supportsAddCall
TB,N,V_supportsSendingToVoicemail
callWithUniqueProxyIdentifier:
initWithRelayMessage:outgoing:
setCallDelegatesIfNeeded:
hostCallCreationTime
setHostCreationTime:
setHostMessageSendTime:
setClientMessageReceiveTime:
cannotBeAnswered
setEndpointOnCurrentDevice:
cannotRelayAudioOrVideoOnPairedDevice
setCannotRelayAudioOrVideo:
propertiesChangedForCall:
displayContext
displayContextByMergingWithDisplayContext:
setDisplayContext:
updateWithRelayMessage:
callsHostedElsewhere
setLocallyDisconnectedWithReasonIfNone:
disconnectedReason
setLocallyDisconnectedWithReasonIfNone:stopConference:
stopConferenceForIdentifier:
setLocallyConnected
callModel
setModel:
setWantsHoldMusic:
protoCalls
isEqualToCall:
updateRelayCall:
initWithUniqueProxyIdentifier:endpointOnCurrentDevice:
hardPauseDigits
setHardPauseDigits:
hardPauseDigitsState
setHardPauseDigitsState:
setLocallyConnecting
hasCurrentCalls
pullRemotelyHostedCallsForMessage:completion:
callCapabilitiesState
updatePairedHostDeviceCallCapabilitiesState:
callProviderManager
tuProviders
registerPairedHostDeviceProviders:
needsManualInCallSounds
setNeedsManualInCallSounds:
soundRegion
setSoundRegion:
setLocallyHasSentInvitation
isTinCanProvider
remoteUplinkMutedSetTime
isRemoteUplinkMuted
setRemoteUplinkMuted:
setRemoteUplinkMutedSetTime:
routes
tuRoute
pairedHostDeviceRouteController
handleUpdatedPairedHostDeviceRoutes:
isFailureExpected
setFailureExpected:
supportsTTYWithVoice
setSupportsTTYWithVoice:
initWithIdentifier:
inviteData
relayInviteDictionary
becomeEndpointForPullFromRemoteDevice
prepareConferenceConnection:remoteInviteDictionary:completion:
handleIncomingCallMessageFromHost:fromPairedDevice:
handleCallDialedMessageFromHost:fromPairedDevice:
handleCallAnsweredElsewhereMessageFromHost:fromPairedDevice:
handleCallDisconnectedMessageFromHost:
handleCallConnectedMessageFromHost:
handlePullRelayingCallsMessageFromHost:fromPairedDevice:
handleResetWantsHoldMusicFromHost:
handleUpdateCallModelMessageFromHost:
handleDeviceUnavailableMessageFromHost:
handleResetStateMessageFromHost:fromPairedDevice:
handleHardPauseDigitsAvailabilityMessageFromHost:
handleUpdateRemoteCallStateMessageFromHost:
handleCallStartedConnectingMessageFromHost:
handlePushHostedCallsMessageFromHost:completion:
handleUpdateCallContextAvailableMessageFromHost:
handleNeedsManualInCallSoundsChangeMessageFromHost:
handleInvitationSentMessageFromHost:
handleUpdateCallDisplayContextMessageFromHost:
handleUpdateRemoteUplinkMutedMessageFromHost:
handleUpdateRoutesMessageFromHost:
handleUpdateSupportsTTYWithVoiceMessageFromHost:
handleUpdateFailureExpectedMessageFromHost:
initWithType:
setDestinationID:
setService:
setUniqueProxyIdentifier:
setSourceIdentifier:
setDTMFKey:
setDisconnectedReason:
enumerateKeysAndObjectsUsingBlock:
pairedDeviceExists
setMessageSendTime:
receivedMessageType
tuProvider
initWithProvider:
sourceIdentifier
setAudioSourceIdentifier:
isVoicemail
setDialType:
isEmergency
isSOS
setSOS:
localSenderIdentityUUID
setLocalSenderIdentityUUID:
localSenderIdentityAccountUUID
setLocalSenderIdentityAccountUUID:
telephonyProvider
senderIdentityForAccountUUID:
ttyType
setTtyType:
originatingUIType
setOriginatingUIType:
contactIdentifier
setContactIdentifier:
protoService
setProtoService:
protoWantsHoldMusic
setProtoWantsHoldMusic:
protoDisconnectedReason
setProtoDisconnectedReason:
protoCannotBeAnswered
setProtoCannotBeAnswered:
protoDTMFKey
bytes
dataWithBytes:length:
setProtoDTMFKey:
protoVoicemail
setProtoVoicemail:
hardPauseState
setHardPauseState:
protoShouldSuppressRingtone
setProtoShouldSuppressRingtone:
protoNeedsManualInCallSounds
setProtoNeedsManualInCallSounds:
protoCannotRelayAudioOrVideoOnPairedDevice
setProtoCannotRelayAudioOrVideoOnPairedDevice:
protoExpectedEndpointOnMessagingDevice
setProtoExpectedEndpointOnMessagingDevice:
initWithCallCapabilitiesState:
setProtoCallCapabilitiesState:
protoCallCapabilitiesState
protoEmergency
setProtoEmergency:
protoFailureExpected
setProtoFailureExpected:
protoSOS
setProtoSOS:
protoUplinkMuted
setProtoUplinkMuted:
protoRemoteUplinkMuted
setProtoRemoteUplinkMuted:
protoCallModel
protoCallModelState
holdAllowed
mergeable
takingCallsPrivateAllowed
ambiguityState
addCallAllowed
sendToVoicemailAllowed
setProtoCallModel:
setProtoCallModelState:
setAmbiguityState:
setSwappable:
setMergeable:
setHoldAllowed:
setAddCallAllowed:
setTakingCallsPrivateAllowed:
setHardPauseAvailable:
setEndAndAnswerAllowed:
isHoldAndAnswerAllowed
setHoldAndAnswerAllowed:
setSendToVoicemailAllowed:
initWithCall:
addProtoCall:
destinationID
normalizedHandleWithDestinationID:
setProviders:
protoProvider
service
providerWithService:video:
setProtoProvider:
serviceForProvider:video:
hasProtoVideo
protoVideo
setProtoVideo:
protoDisplayContext
initWithCallDisplayContext:
setProtoDisplayContext:
endpointIDSDestinationURIs
destinationWithURI:
destinationWithDestinations:
destinationURIs
setEndpointIDSDestinationURIs:
localSenderIdentityUUIDString
setLocalSenderIdentityUUIDString:
localSenderIdentityAccountUUIDString
setLocalSenderIdentityAccountUUIDString:
addRemoteParticipantHandles:
protoTTYType
setProtoTTYType:
protoSupportsTTYWithVoice
setProtoSupportsTTYWithVoice:
setProtoPriority:
protoOriginatingUIType
setProtoOriginatingUIType:
initWithDictionary:
initWithType:uniqueProxyIdentifier:
receivedMessageTypeString
dialRequest
wantsHoldMusic
setCannotBeAnswered:
DTMFKey
setVoicemail:
customizeForProtocolVersion:
setShouldSuppressRingtone:
setCannotRelayAudioOrVideoOnPairedDevice:
isExpectedEndpointOnMessagingDevice
setExpectedEndpointOnMessagingDevice:
setCallCapabilitiesState:
setEmergency:
setCallModel:
addCall:
setTuHandle:
setTuProviders:
setTuProvider:
setTuProvider:isVideo:
endpointIDSDestination
setEndpointIDSDestination:
remoteParticipantTUHandles
setRemoteParticipantTUHandles:
priority
setPriority:
T@"NSString",R,C,N
T@"TUDialRequest",R,N
TC,N
voicemail
TB,N,GisVoicemail
expectedEndpointOnMessagingDevice
TB,N,GisExpectedEndpointOnMessagingDevice
T@"TUCallCapabilitiesState",&,N
emergency
TB,N,GisEmergency
failureExpected
TB,N,GisFailureExpected
TB,N,GisSOS,SsetSOS:
T@"TUCallModel",&,N
T@"TUHandle",&,N
T@"NSArray",&,N
TB,N,GisVideo
T@"TUCallProvider",&,N
T@"TUCallDisplayContext",&,N
remoteUplinkMuted
TB,N,GisRemoteUplinkMuted
T@"IDSDestination",&,N
T@"NSSet",C,N
setValue:
setNormalizedValue:
setIsoCountryCode:
setHasType:
typeAsString:
StringAsType:
hasValue
hasNormalizedValue
hasIsoCountryCode
_isoCountryCode
_normalizedValue
_type
_value
Ti,N,V_type
T@"NSString",&,N,V_value
T@"NSString",&,N,V_normalizedValue
T@"NSString",&,N,V_isoCountryCode
setContextIdentifier:
actionDescription
setActionDescription:
ongoingDescription
setOngoingDescription:
completedDescription
setCompletedDescription:
hasContextIdentifier
hasActionDescription
hasOngoingDescription
hasCompletedDescription
contextIdentifier
initWithContextIdentifier:actionDescription:ongoingDescription:completedDescription:
tuConversationActivityContext
activityContextWithTUActivityContext:
T@"TUConversationActivityContext",R,N
conversationID
setConversationID:
timebase
setTimebase:
hasConversationID
initWithTimeIntervalSince1970:
initWithConversationID:timebase:
initWithTUConversationReport:
tuConversationReport
T@"TUConversationReport",R,C,N
callUpdateWithDefaultValuesSet
systemMuteStatusChanged:
initWithUniqueProxyIdentifier:endpointOnCurrentDevice:featureFlags:
sanitizedCallUpdate
updateWithCallUpdate:
baseDestinationID
initWithDialRequest:
endpointOnCurrentDevice
initOutgoingWithUniqueProxyIdentifier:backingCallSourceIdentifier:callUpdate:isVideo:endpointOnCurrentDevice:
initWithStartCallAction:
initWithJoinConversationRequest:
conversationLink
expanseProvider
usesSystemMuting
sharedAudioSystemController
setUnderlyingUplinkMuted:
propertiesChanged
backingCallSource
displayCallSourceIdentifier
mergedCallUpdate
updateWithUpdate:
hasSet
isSharingScreen
model
verificationStatus
setVerificationStatus:
identificationCategory
setIdentificationCategory:
junkConfidence
setJunkConfidence:
tuScreenShareAttributesForScreenAttributes:
handleUpdatedPropertiesAfterChangesInBlock:
hasStartedOutgoing
hasStartedConnecting
isTelephonyProvider
failureContext
failureReason
setProviderFailureReasonIfNecessary:
endedReasonUserInfoForCall:
providerErrorCode
providerEndedReason
localizedCallerName
participantGroupUUID
isConversation
callHistoryIdentifier
crossDeviceIdentifier
pauseDigitsQueue
originalPauseDigitsString
stringByAppendingString:
isUsingBaseband
isWiFiCallingCurrentlyAvailable
isBlocked
videoStreamToken
ISOCountryCode
senderIdentityForUUID:
accountUUID
activeRemoteParticipantHandles
tuHandlesWithHandles:
audioInterruptionProvider
audioInterruptionOperationMode
audioInterruptionProviderType
audioSessionID
retrieveSessionWithID:
audioCategory
proxyAVAudioSession
category
audioMode
mode
requiresInCallSounds
inCallSoundRegion
mixesVoiceWithMedia
bluetoothAudioFormat
handoffContext
handoffIdentifier
prefersExclusiveAccessToCellularNetwork
isMutuallyExclusiveCall
providerCallDelegate
backingCallSourceIdentifier
providerWithIdentifier:
backingProvider
hasEnded
isHeld
hasConnected
isIncoming
nextPauseDigits
isHardPause
digits
hasQueuedHardPauseDigits
isUnderlyingUplinkMuted
isDownlinkMuted
processIdentifier
auditToken
providerContext
_sendSoftPauseDigitsIfNecessary
uniqueProxyIdentifierUUID
initWithCallUUID:relaying:
performCallAction:forCall:
setTTYType:
setBluetoothAudioFormat:
isVideoUpgradeFromCall:
initWithCallUUID:handle:
setRelay:
setUpgrade:
isRedial
setRetry:
dialType
dialWithRequest:displayContext:
callSourceForDialRequest:
setBackingCallSource:
startCallActionWithDialRequest:
performStartCallAction:forCall:
callSourceForJoinConversationRequest:
setWantsStagingArea:
joinedFromLink
isJoiningConversationWithLink
setJoinedFromLink:
gondolaOpenLinksInFaceTime
prioritizedSenderIdentities
initWithCallUUID:groupUUID:
setCallerID:
sendLetMeInRequest
setLetMeIn:
setJoiningConversationWithLink:
activityWithTUConversationActivity:
setJoinCallActivity:
setConversationProviderIdentifier:
notificationStylesByHandleType
setNotificationStylesByHandleType:
answerWithRequest:
pauseVideoToStart
initWithCallUUID:
behavior
setDowngradeToAudio:
hold
_setIsOnHold:
unhold
initWithCallUUID:onHold:
dequeueAllPauseDigits
groupWithOtherCall:
initWithCallUUID:callUUIDToGroupWith:
ungroup
disconnectWithReason:
setFailureContext:
initWithCallUUID:sendingVideo:
cxScreenShareAttributesForCallAttributes:
initWithCallUUID:attributes:
setSharingScreen:
initWithCallUUID:sharingScreen:
deviceFamily
setDeviceFamily:
style
setStyle:
displayID
setDisplayID:
frameRate
setFrameRate:
isWindowed
setWindowed:
windowUUID
displayScale
setDisplayScale:
scaleFactor
setScaleFactor:
originalResolution
setOriginalResolution:
setAttributes:
initWithCallUUID:muted:
initWithCallUUID:ttyType:
muteSessionInput:error:
setDownlinkMuted:
_sendDTMFDigits:type:
stringWithCharacters:length:
initWithCallUUID:videoPresentationSize:
initWithCallUUID:videoPresentationState:
dequeueNextPauseDigits
initWithCallUUID:digits:type:
isConnected
handleAudioSessionActivationStateChangedTo:
pauseDigitsQueueChanged:
initIncomingWithBackingCallSource:UUID:update:
initOutgoingWithDialRequest:
initOutgoingWithRequestedStartCallAction:backingCallSource:
initOutgoingWithJoinConversationRequest:
initWithHandoffContext:backingCallSource:
canBeControlledByCallSource:
updateForDisconnection
endedReasonUserInfo
callerNameFromNetwork
callGroupUUID
isThirdPartyVideo
displayProvider
callStatusFromUnderlyingSource
callRelaySupport
providerProcessIdentifier
providerAuditToken
initialLinkType
setHeld:
setCallGroupUUID:
joinConversationWithRequest:
setSharingScreen:attributes:
sendHardPauseDigits
playRemoteDTMFToneForKey:
isExpanseProvider
setProviderCallDelegate:
setDisplayCallSourceIdentifier:
setMergedCallUpdate:
setPauseDigitsQueue:
_outgoing
_wantsStagingArea
_sharingScreen
_expanseProvider
_held
_sendingVideo
_underlyingUplinkMuted
_ttyType
_bluetoothAudioFormat
_providerCallDelegate
_backingCallSource
_failureContext
_backingCallSourceIdentifier
_displayCallSourceIdentifier
_mergedCallUpdate
_pauseDigitsQueue
T@"NSString",R,C,N,V_backingCallSourceIdentifier
T@"CXCallSource",&,N,V_backingCallSource
T@"NSString",C,N,V_displayCallSourceIdentifier
T@"CXCallUpdate",&,N,V_mergedCallUpdate
T@"CSDPauseDigitsQueue",&,N,V_pauseDigitsQueue
TB,N,V_wantsStagingArea
T@"AVAudioSession",R,N
T@"<CSDProviderCallDelegate>",W,N,V_providerCallDelegate
held
TB,N,GisHeld,V_held
Ti,N,V_ttyType
Tq,N,V_bluetoothAudioFormat
T@"NSUUID",C,N
TB,N,V_sendingVideo
underlyingUplinkMuted
TB,N,GisUnderlyingUplinkMuted,V_underlyingUplinkMuted
T@"CXCallFailureContext",&,N,V_failureContext
TB,R,N,GisExpanseProvider,V_expanseProvider
handleCallHasStartedOutgoingChangedNotification:
handleCallStatusChangedNotification:
handleCallStartedConnectingNotification:
handleCallConnectedNotification:
handleCallMayRequireBreakBeforeMakeChangedNotification:
handleCallWantsHoldMusicChangedNotification:
callIsOnHoldChangedNotification:
handleCallOneToOneModeChangedNotification:
breakBeforeMakeTimeout
_handleLockStateChanged
callDurationLimitTimer
_handleCallHasStartedOutgoingChanged:
_handleCallStatusChanged:
_handleCallStartedConnecting:
_handleCallConnected:
_handleCallMayRequireBreakBeforeMakeChanged:
_handleCallWantsHoldMusicChanged:
callCenter
senderIdentityCapabilitiesWithUUID:
supportsSimultaneousVoiceAndData
nonWifiFaceTimeAvailable
wiFiActiveAndReachable
doubleValue
_handleAudioReadyForCall:
_setUpCallDurationLimitIfNecessary
_updateCallMutingForHoldMusic
disconnectCall:
wantsBreakBeforeMakeForCall:
_disconnectOrPullExistingCallsForCallIfNecessary:
_pushCallToAlternateDestinationIfNecessary:
_notifyCLTMOfIncomingCall
unsuppressRingtoneIfNecessary
setHeySiriEnabled:
disconnectActiveCallsBasedOnCallStatusForCall:
pullRelayingCallsFromClient
enableEmergencyModeIfNecessaryForCall:
_setUpBreakBeforeMakeTimeoutIfNecessaryForCall:
sharedMonitor
enableEmergencyModeWithError:
requestCLTMThrottleUncapToken
pushHostedCallsToDestination:
endpointRapportMediaSystemIdentifier
endpointRapportEffectiveIdentifier
pickRouteForRapportDeviceWithMediaSystemIdentifier:effectiveIdentifier:
setUpBreakBeforeMakeTimeout
routeManager
isCarPlayRouteAvailable
uplinkWasExplicitlyMuted
hasRestrictionsInRetailEnvironment
_handleCallDurationTimerFired
setCallDurationLimitTimer:
callsPassingTest:
userNotificationWithIdentifier:title:message:defaultButton:alternateButton:otherButton:
setUsesNotificationCenter:
setRepresentedApplicationBundle:
addUserNotification:listener:completionHandler:
isAudioMutedForHoldMusic
setAudioMutedForHoldMusic:
Td,R,N
initWithCallCenter:
setRequestCLTMThrottleUncapToken:
lockStateNotificationToken
setLockStateNotificationToken:
setSetUpBreakBeforeMakeTimeout:
_audioMutedForHoldMusic
_requestCLTMThrottleUncapToken
_lockStateNotificationToken
_callDurationLimitTimer
_setUpBreakBeforeMakeTimeout
T@"NSObject<OS_dispatch_source>",&,V_callDurationLimitTimer
audioMutedForHoldMusic
TB,N,GisAudioMutedForHoldMusic,V_audioMutedForHoldMusic
Ti,N,V_requestCLTMThrottleUncapToken
Ti,N,V_lockStateNotificationToken
T@"TUCallCenter",R,N
T@"<TUCallContainerPrivate>",R,N
T@"CSDRouteManager",R,N
T@?,C,N,V_setUpBreakBeforeMakeTimeout
temporaryGroupUUID
approverHandle
setPendingConversation:
initWithConversationLink:localMember:queue:
dateCreated
letMeInKeyAgreement
setLetMeInKeyAgreement:
setApproverHandle:
_videoEnabled
_audioEnabled
_uplinkMuted
_temporaryGroupUUID
_dateCreated
_conversationGroupUUID
_letMeInKeyAgreement
_approverHandle
T@"NSUUID",&,N,V_conversationGroupUUID
T@"CSDLetMeInRequestorKeyAgreement",&,N,V_letMeInKeyAgreement
T@"TUHandle",&,N,V_approverHandle
T@"NSUUID",R,N,V_temporaryGroupUUID
T@"NSDate",R,N,V_dateCreated
TB,N,GisVideoEnabled,V_videoEnabled
TB,N,GisAudioEnabled,V_audioEnabled
TB,N,GisUplinkMuted,V_uplinkMuted
TB,R,N,GisVideo,V_video
deviceType
initWithResolver:withSystemStatusPublisher:queue:
resolvedCall
shouldDisplaySystemCallControls
displaySystemCallControlsByURL
openInCallServiceByURL
openVoIPAppWithBundleIdentifier:
handleUserInteractionsWithBlock:
updateStatusBar
resolver
resolvedDescriptor
updateAttributionsForDescriptor:
currentDescriptor
setCurrentDescriptor:
systemStatusPublisher
removeCallDescriptor:
addCallDescriptor:
updateVolatileDataWithBlock:
openUIServiceWithURL:
_supportslaunchingInCallApplicationForIncomingCall
openApplicationWithBundleIdentifier:configuration:completionHandler:
isDeviceSupported
resolutionChangedForResolver:
deviceSupported
TB,R,N,GisDeviceSupported
setResolver:
_resolver
_systemStatusPublisher
_currentDescriptor
T@"<CSDStatusBarResolver>",&,N,V_resolver
T@"STCallingStatusDomainPublisher",R,N,V_systemStatusPublisher
T@"STCallingStatusDomainCallDescriptor",&,N,V_currentDescriptor
neighborhoodActivityClientXPCInterface
clientManager
setRemoteObjectInterface:
neighborhoodActivityServerXPCInterface
setExportedInterface:
setExportedObject:
setInterruptionHandler:
setInvalidationHandler:
asynchronousExportedObjectProxy
setAsynchronousServer:
startListeningOnMachServiceWithName:
addLocalClientObject:
removeLocalClientObject:
conduit
nearbyTVDevices
activeSplitSessionTVDevice
getParticipantHandleForTV:completion:
inviteTV:toConversation:completion:
disconnectTV:completion:
currentClient
sessionApprovalClient
setSessionApprovalClient:
performBlockOnClients:
tvDeviceAppeared:
performBlockWithClients:
tvDeviceDisappeared:
splitSessionStarted:
splitSessionEnded:
objectForBlock
approveSplitSessionForConversation:requestedFromDevice:proposedActivityInfo:completion:
cancelSplitSessionApproval
canApproveSessions
approveSplitSessionFor:from:proposedActivity:completion:
nearbyTVDevicesWithCompletion:
activeSplitSessionTVDeviceWithCompletion:
participantHandleForTVDevice:completion:
inviteTVDevice:toConversation:completion:
disconnectTVDevice:completion:
registerSplitSessionApprovalEnabled:
registerClient:
unregisterClient:
initWithConduit:
_conduit
_clientManager
_sessionApprovalClient
T@"CSDNeighborhoodActivityConduit",R,N,V_conduit
T@"CSDClientManager",R,N,V_clientManager
T@"CSDClient",W,N,V_sessionApprovalClient
modelIdentifier
setModelIdentifier:
uniqueIDOverride
setUniqueID:
linkedUserURIs
setLinkedUserURIs:
isDefaultPairedDevice
setDefaultPairedDevice:
supportsRestrictingSecondaryCalling
setSupportsRestrictingSecondaryCalling:
initWithIDSDevice:
initWithUUID:carrierPhoneNumbers:
uuid
carrierPhoneNumbers
_uuid
_carrierPhoneNumbers
T@"NSUUID",R,C,N,V_uuid
T@"NSArray",R,C,N,V_carrierPhoneNumbers
fetchServiceProviders
predicateWithBlock:
filteredArrayUsingPredicate:
didChangeServiceProvidersForCarrierBundlePhoneNumberProviderController:
telephonyClient
getSubscriptionInfoWithError:
subscriptionsInUse
domain
carrierNumbersForSubscriptionContext:
arrayOfStringsForKeyHierarchy:subscriptionContext:error:
initWithBundleType:
copyCarrierBundleValue:keyHierarchy:bundleType:error:
objectForKeyHierarchy:subscriptionContext:error:
setServiceProviders:
subscriptionInfoDidChange
activeSubscriptionsDidChange
simLessSubscriptionsDidChange
dualSimCapabilityDidChange
serviceProviders
serviceProvidersWithCarrierNumbers
carrierBundleChange:
_serviceProviders
_telephonyClient
T@"CoreTelephonyClient",R,N,V_telephonyClient
T@"NSArray",C,N,V_serviceProviders
T@"<CSDCarrierBundlePhoneNumberProviderControllerDelegate>",W,N,V_delegate
T@"NSArray",R,C,N
setUpSession
session
groupID
participantDestinationIDs
account
initWithAccount:options:
setSession:
setDelegate:queue:
sessionEndedReason
sessionID
setPreferences:
joinWithOptions:
setParticipantDestinationIDs:
updateMembers:withContext:triggeredLocally:
initWithRequiredCapabilities:requiredMissingCapabilities:
updateMembers:withContext:messagingCapabilities:triggeredLocally:
updateParticipantData:withContext:
leaveGroupSession
reconnectUPlusOneSession
manageDesignatedMembers:withType:
requestEncryptionKeyForParticipants:
setRequiredCapabilities:requiredLackOfCapabilities:
addObjectsFromArray:
sessionIDAliasWithSalt:
setGroupUUID:
createAliasForParticipantID:salt:
sessionProviderDidTerminate:
sessionProvider:endedWithReason:error:
participantIDs
sessionProvider:didJoinGroupWithParticipantIdentifiers:localParticipantIdentifier:error:
sessionProvider:didLeaveGroupWithError:
sessionProvider:didReceiveActiveParticipants:success:
sessionProvider:didReceiveActiveLightweightParticipants:success:
sessionProvider:didReceiveReport:
sessionProvider:didReceiveKickedParticipantIDs:withCode:withType:isTruncated:
sessionProvider:didRegisterPluginAllocationInfo:
sessionProvider:didUnregisterPluginAllocationInfo:
sessionProviderDidReceiveKeyUpdate:
groupSessionDidTerminate:
groupSessionEnded:withReason:error:
sessionDidJoinGroup:participantsInfo:error:
sessionDidJoinGroup:participantInfo:error:
sessionDidJoinGroup:participantUpdate:error:
sessionDidLeaveGroup:error:
session:participantDidJoinGroupWithInfo:
session:participantDidLeaveGroupWithInfo:
session:didReceiveActiveParticipants:success:
session:didReceiveActiveLightweightParticipants:success:
session:didReceiveBlockedParticipantIDs:withCode:isTruncated:
session:didReceiveBlockedParticipantIDs:withCode:withType:isTruncated:
session:didReceiveQueryBlockedParticipantIDs:withCode:isTruncated:
session:didRemoveParticipantIDs:withCode:isTruncated:
participantUpdatedForSession:
session:didReceivePluginAllocationInfo:
sessiondidReceiveKeyUpdate:
session:receivedInvitationAcceptFromID:
session:receivedInvitationDeclineFromID:
session:receivedInvitationCancelFromID:
sessionStarted:
sessionEnded:
sessionEnded:withReason:error:
session:didReceiveData:
session:receivedInvitationAcceptFromID:withData:
session:receivedInvitationDeclineFromID:withData:
session:receivedInvitationCancelFromID:withData:
session:receivedSessionMessageFromID:withData:
session:receivedSessionEndFromID:withData:
session:invitationSentToTokens:
session:invitationSentToTokens:shouldBreakBeforeMake:
updateParticipantDestinationIDs:withContextData:triggeredLocally:
updateParticipantDestinationIDs:withContextData:requiredCapabilities:requiredLackOfCapabilities:triggeredLocally:
sendParticipantData:
kickParticipants:
allowParticipants:
T@"<CSDIDSGroupSessionProviderDelegate>",W,N
TI,R,N
initWithGroupID:participantDestinationIDs:callerID:account:queue:isOneToOneModeEnabled:isLightweightMember:
_isOneToOneModeEnabled
_isLightweightMember
_session
_participantDestinationIDs
_groupID
_account
_callerID
T@"IDSGroupSession",&,N,V_session
T@"NSString",R,C,N,V_groupID
T@"IDSAccount",R,N,V_account
TB,R,N,V_isOneToOneModeEnabled
TB,R,N,V_isLightweightMember
T@"NSString",R,C,N,V_callerID
T@"NSArray",C,N,V_participantDestinationIDs
T@"<CSDIDSGroupSessionProviderDelegate>",W,N,V_delegate
data
setData:
completion
setCompletion:
_data
_completion
T@"NSData",&,N,V_data
T@?,C,N,V_completion
initWithSessionProvider:isInitiator:remoteProtocolVersion:
sessionProvider
setStreamPreferences:
initWithSessionProvider:isInitiator:remoteDestination:remoteDevice:remoteProtocolVersion:identifiers:
numberWithInt:
runBlocksPendingTransportAvailability:
removePendingData
transport
remoteDestination
setRemoteDestination:
remoteDevice
setRemoteDevice:
identifiers
allIdentifiers
blocksPendingTransportAvailability
performBlockOnTransportAvailability:
hasStarted
hasReceivedAccept
acceptPayloadData
runBlocksPendingTransportAvailabilityIfNecessary:
pendingData
sendData:waitUntilConnected:completion:
pendData:completion:
sendData:toDestinations:
_sendInvitationWithData:declineOnError:alwaysSendData:
_acceptInvitationWithData:alwaysSendData:
_cancelInvitationWithData:reason:alwaysSendData:
_declineInvitationWithData:alwaysSendData:
sessionProviderStarted:
sendPendingData
setHasStarted:
setHasReceivedAccept:
setAcceptPayloadData:
deviceForFromID:
session:receivedInvitationAcceptWithData:fromDestination:device:
session:receivedInvitationCancelWithData:fromDestination:device:
session:receivedInvitationDeclineWithData:fromDestination:device:
session:receivedData:fromDestination:device:
initAsInitiatorWithSessionProvider:identifiers:
initAsReceiverWithSessionProvider:remoteDestination:remoteDevice:remoteProtocolVersion:identifiers:
hasIdentifier:
addIdentifier:
addIdentifiers:
removeIdentifier:
removeIdentifiers:
mergeSession:
sendData:toDestinations:completion:
sendDataAndSendInvitationIfNecessary:declineOnError:
sendDataAndAcceptInvitationIfNecessary:
sendDataAndCancelInvitationIfNecessary:
sendDataAndDeclineInvitationIfNecessary:
prepareToEnd
sessionProvider:receivedInvitationAcceptFromID:withData:
sessionProvider:receivedInvitationCancelFromID:withData:
sessionProvider:receivedInvitationDeclineFromID:withData:
sessionProvider:receivedSessionMessageFromID:withData:
_hasStarted
_hasReceivedAccept
_remoteDestination
_remoteDevice
_pendingData
_identifiers
_blocksPendingTransportAvailability
_acceptPayloadData
T@"IDSDestination",&,N,V_remoteDestination
T@"IDSDevice",&,N,V_remoteDevice
T@"NSMutableArray",R,N,V_pendingData
T@"NSMutableSet",R,N,V_identifiers
T@"NSMutableArray",R,N,V_blocksPendingTransportAvailability
TB,N,V_hasStarted
TB,N,V_hasReceivedAccept
T@"NSData",C,N,V_acceptPayloadData
T@"<CSDRelayIDSDualSessionDelegate>",W,N,V_delegate
setUpdateMessage:
setCheckInMessage:
hasUpdateMessage
hasCheckInMessage
updateMessage
checkInMessage
_checkInMessage
_updateMessage
T@"CSDMessagingLinkSyncUpdateMessage",&,N,V_updateMessage
T@"CSDMessagingLinkSyncCheckInMessage",&,N,V_checkInMessage
handleIDSDeviceListChangedNotification:
_updateDefaultPairedDeviceUniqueIDDefault
_updateThumperCallingPreferences
_checkIfDevicesShouldBeUnenrolled
initWithDomain:
domainAccessor
boolForKey:keyExistsAndHasValidFormat:
setBool:forKey:
synchronize
removeReminderNotificationOnSecondaryDevice
showEmergencyAddressDisclaimerOnSecondaryDevice
removeEmergencyAddressDisclaimerOnSecondaryDevice
areCTCapabilitiesValid
thumperCallingCapabilitiesStateByUUID
publiclyAccessibleCopy
accountID
thumperCapabilitiesStatesForPreferenceKey:
isAssociated
isSupported
supportsDefaultPairedDevice
enrollDefaultPairedDeviceForAccountID:
unenrollDefaultPairedDeviceForAccountID:
showReminderNotificationOnSecondaryDevice
saveThumperCapabilitiesStates:forPreferenceKey:
defaultPairedDevice
removeThumperRegisteredDeviceID:forThumperAccountID:
enrollDefaultPairedDevice
devices
valueForKey:
localThumperAccounts
allowedSecondaryDeviceIDs
secondaryThumperAccounts
csd_unknownContextInfoForAccountID:
supportsThumperCallingOverCellularData
countForIdentifier:
response
requestPinFromPrimaryDevice
removeNotificationsForServiceIdentifier:
preferencesURL
archivedDataWithError:
unarchivedObjectFromData:error:
thumperCallingCapabilitiesStateForAccountID:
shouldEnrollDefaultPairedDeviceForAccountID:
addThumperRegisteredDeviceID:forThumperAccountID:
shouldUnenrollDefaultPairedDeviceForAccountID:
isThumperRegisteredDeviceID:forThumperAccountID:
thumperCallingAllowedOnDefaultPairedDeviceDefault
didChangeTelephonyCallingSupport
didChangeFaceTimeAudioCallingSupport
didChangeFaceTimeVideoCallingSupport
didChangeFaceTimeCallingAvailability
didChangeRelayCallingCapabilities
didChangeRelayCallingAvailability
didChangeOutgoingRelayCallerID
didChangeCloudCallingDevices
didAddCapabilitiesForSenderIdentityWithUUID:
didRemoveCapabilitiesForSenderIdentityWithUUID:
didChangeVoLTECallingCapabilitiesForSenderIdentityWithUUID:
didChangeWiFiCallingCapabilitiesForSenderIdentityWithUUID:
didChangeThumperCallingCapabilitiesForSenderIdentityWithUUID:
didChangeWiFiCallingProvisionalURLForSenderIdentityWithUUID:
didChangeThumperCallingProvisionalURLForSenderIdentityWithUUID:
didChangeEmergencyCallbackMode
didChangeEmergencyCallbackPossible
didChangeRelayCallingFeatures
updateState
setThumperCallingAllowedOnDefaultPairedDeviceDefault:
_thumperIsNoLongerSupportedForAccountID:
_thumperIsNowEnabledForAccountID:
_thumperIsNoLongerEnabledForAccountID:
setDomainAccessor:
_dataSource
_domainAccessor
T@"NPSDomainAccessor",&,N,V_domainAccessor
T@"<CSDThumperCapabilitiesMonitorDataSource>",W,N,V_dataSource
isInvitation
upgradeSessionUUID
numberWithUnsignedInteger:
setInvitation:
setMirageAvailable:
setUpgradeSessionUUID:
_invitation
_shouldSuppressInCallUI
_videoPaused
_upgrade
_momentsAvailable
_mirageAvailable
_lightweight
_oneToOneModeEnabled
_upgradeSessionUUID
invitation
TB,N,GisInvitation,V_invitation
TB,N,V_shouldSuppressInCallUI
TB,N,GisVideoPaused,V_videoPaused
upgrade
TB,N,GisUpgrade,V_upgrade
TB,N,GisInitiator,V_initiator
TB,N,GisMomentsAvailable,V_momentsAvailable
mirageAvailable
TB,N,GisMirageAvailable,V_mirageAvailable
lightweight
TB,N,GisLightweight,V_lightweight
T@"NSUUID",C,N,V_messagesGroupUUID
T@"NSUUID",C,N,V_upgradeSessionUUID
TB,N,GisOneToOneModeEnabled,V_oneToOneModeEnabled
T@"NSSet",&,N,V_invitationPreferences
TQ,N,V_sharePlayProtocolVersion
addServiceDelegate:queue:
devicesChanged:
callerIDChanged:
addListenerID:forService:
serviceAvailabilityChanged:
_faceTimeAudioAvailability
_faceTimeVideoAvailability
_updateOutgoingCallerID
removeListenerID:forService:
faceTimeIDMatchesAppleID
outgoingCallerID
accountsChanged
updateOutgoingCallerIDAndSendDelegateCallbacksIfNecessary
faceTimeAvailabilityChanged
iCloudAccount
isActive
profileID
isEqualToIgnoringCase:
availabilityForListenerID:forService:
outgoingCallerIDChanged
isValidOutgoingCallerID:
availableOutgoingRelayCallerIDs
objectsPassingTest:
vettedAliases
indexesOfObjectsPassingTest:
firstIndex
objectAtIndexedSubscript:
service:account:incomingOpportunisticData:withIdentifier:fromID:context:
service:didSendOpportunisticDataWithIdentifier:toIDs:
service:account:incomingMessage:fromID:context:
service:account:incomingData:fromID:context:
service:account:incomingUnhandledProtobuf:fromID:context:
service:account:incomingResourceAtURL:fromID:context:
service:account:incomingResourceAtURL:metadata:fromID:context:
service:account:incomingPendingMessageOfType:fromID:context:
service:activeAccountsChanged:
service:devicesChanged:
service:nearbyDevicesChanged:
service:connectedDevicesChanged:
service:linkedDevicesChanged:
service:account:identifier:didSendWithSuccess:error:
service:account:identifier:didSendWithSuccess:error:context:
service:account:identifier:sentBytes:totalBytes:
service:account:identifier:hasBeenDeliveredWithContext:
service:account:identifier:fromID:hasBeenDeliveredWithContext:
service:account:inviteReceivedForSession:fromID:
service:account:inviteReceivedForSession:fromID:withOptions:
service:account:inviteReceivedForSession:fromID:withContext:
service:account:receivedGroupSessionParticipantUpdate:
service:account:receivedGroupSessionParticipantDataUpdate:
serviceSpaceDidBecomeAvailable:
serviceAllowedTrafficClassifiersDidReset:
service:didSwitchActivePairedDevice:acknowledgementBlock:
service:account:messageIdentifier:alternateCallbackID:updatedWithResponseCode:error:lastCall:
service:account:messageIdentifier:alternateCallbackID:updatedWithResponseCode:error:lastCall:messageContext:
service:account:identifier:alternateCallbackID:willSendToDestinations:skippedDestinations:registrationPropertyToDestinations:
service:account:incomingTopLevelMessage:fromID:messageContext:
service:token:time:error:
service:didFlushCacheForRemoteURI:fromURI:guid:
service:didHintCheckingTransportLogWithReason:
service:didUpdatePseudonymsWithChanges:
isFaceTimeAudioAvailable
isFaceTimeVideoAvailable
setOutgoingCallerID:
_outgoingCallerID
T@"NSString",C,N,V_outgoingCallerID
T@"<CSDAccountsControllerDelegate>",W,N,V_delegate
faceTimeAudioAvailable
TB,R,N,GisFaceTimeAudioAvailable
faceTimeVideoAvailable
TB,R,N,GisFaceTimeVideoAvailable
shouldUseSocketForTransport
setIsAudioEnabled:
invitationTimeOut
setInvitationTimeOut:
sendSessionMessage:
sendSessionMessage:toDestinations:
sendInvitationWithData:declineOnError:
acceptInvitationWithData:
cancelInvitationWithData:
cancelInvitationWithRemoteEndedReasonOverride:
declineInvitationWithData:
reconnectSession
endSession
reportsReceived:forSessionWithUUID:
sessionProvider:invitationSentToPushTokens:shouldBreakBeforeMake:
invitationTimeout
setInvitationTimeout:
T@"<CSDIDSDualSessionProviderDelegate>",W,N
initWithSession:queue:
T@"IDSSession",R,N,V_session
T@"<CSDIDSDualSessionProviderDelegate>",W,N,V_delegate
initWithDigits:isHardPause:
setDigits:
setHardPause:
_hardPause
_digits
T@"NSString",C,N,V_digits
hardPause
TB,N,GisHardPause,V_hardPause
setGeneratorID:
setGeneratorVersion:
initWithIdentifier:version:
csdConversationLinkGeneratorDescriptor
generatorDescriptorWithCSDConversationLinkGeneratorDescriptor:
T@"CSDConversationLinkGeneratorDescriptor",R,N
accountType
aliasStrings
regionBasePhoneNumber
csd_ISOCountryCode
label
setLabel:
initWithHandle:label:isSuggested:
tuLabeledHandle
handleWithTULabeledHandle:
T@"TULabeledHandle",R,N
callProviderManagerClientXPCInterface
callProviderManagerServerXPCInterface
setRequiredConnectionCapability:
synchronousExportedObjectProxy
setSynchronousServer:
isRemote
providersByIdentifierForRemoteClients:
localProvidersByIdentifierForRemoteClients:
pairedHostDeviceProvidersByIdentifierForRemoteClients:
providersByIdentifierForClient:
localProvidersByIdentifierForClient:
pairedHostDeviceProvidersByIdentifierForClient:
donateUserIntentForProviderWithIdentifier:
launchAppForDialRequest:completion:
updateProvidersByIdentifier:localProvidersByIdentifier:pairedHostDeviceProvidersByIdentifier:
performBlockOnClients:coalescedByIdentifier:
providersByIdentifier:
launchAppForDialRequest:reply:
initWithProviderManager:
_providerManager
T@"CSDCallProviderManager",R,N,V_providerManager
setNickname:
setIsLightweightMember:
tuConversationMember
memberWithTUConversationMember:
T@"TUConversationMember",R,N
machOUUIDs
initWithSession:remoteHandle:wantsVideo:
createOneToOneFTReportingSessionForCallWithUUID:withReportingHierarchyToken:withVideo:
conference
dateReceivedFirstRemoteFrame
hasSentInvitation
invitedPushTokens
underlyingErrorCode
remoteFromID
chatEnded:
localPortraitAspectRatioForChat:
setIsKeyExchangeEnabled:
setIsVideoEnabled:
setIsDuplexAudioOnly:
setIsRelayForced:
setIsRelayEnabled:
shouldStartAudioPaused
setIsAudioPausedToStart:
shouldStartVideoPaused
_setLocalAspectRatiosForVideoAspectRatioDescriptor:
setInviteCompletion:
prepareConference
cancelInvitationWithReason:
declineInvitation
cancelOrDeclineInvitation
_handlePushTokensInvited:didSendInvitation:didCancelInvitation:
setShouldStartAudioPaused:
setShouldStartVideoPaused:
chatStartedConnecting:
conferenceCreationBlock
setConference:
faceTimeAppUUID
inviteCompletion
setInvitedPushTokens:
setHasSentInvitation:
chatSentInvitation:
_setDateEndedIfNecessary
initWithData:
_stripPotentialTokenURIWithToken:
faceTimeInviteDictionary
hasProtoUpgradeSessionUUID
protoUpgradeSessionUUID
hasProtoWantsVideo
isWiFiAllowedForChat:
setWiFiAllowed:
isCellularDataAllowedForChat:
setCellularDataAllowed:
isCellularDataPreferredForChat:
setCellularDataPreferred:
initWithFaceTimeInviteDictionary:
setInviteData:
setProtoUpgradeSessionUUID:
isMomentsAvailableForChat:
sendInvitationWithData:
chatConnected:
setDateReceivedFirstRemoteFrame:
chat:inputFrequencyLevelChangedTo:
chat:outputFrequencyLevelChangedTo:
chat:inputLevelChangedTo:
chat:outputLevelChangedTo:
chat:changedBytesOfDataUsed:
chat:receivedData:
session:endedWithReason:
session:invitationSentToPushTokens:shouldBreakBeforeMake:
session:receivedInvitationAcceptWithData:
session:receivedInvitationDeclineWithData:
session:receivedInvitationCancelWithData:
session:receivedData:
startWithVideoAspectRatioDescriptor:inviteCompletion:
answerWithVideoAspectRatioDescriptor:
cancelInvitationWithAnsweredElsewhere
cancelInvitationWithDeclinedElsewhere
cancelInvitationWithLocalHangup
sendDataUnreliably:
sessionUUID
T@"<CSDIDSChatDelegate>",W,N
T@"NSString",R,N
outgoing
TB,R,N,GisOutgoing
T@"CXCallFailureContext",R,N
connected
TB,R,N,GisConnected
TB,N,GisRelaying
TB,N,GisRemoteMomentsAvailable
initIncomingWithSession:remoteHandle:wantsVideo:remoteInviteDictionary:
initOutgoingWithSession:UUID:remoteHandle:wantsVideo:isRelaying:
setConferenceCreationBlock:
_remoteUplinkMuted
_remoteMomentsAvailable
_muted
_shouldStartAudioPaused
_shouldStartVideoPaused
_mayRequireBreakBeforeMake
_hasSentInvitation
_localSenderIdentityUUID
_conference
_dateReceivedFirstRemoteFrame
_invitedPushTokens
_inviteCompletion
_conferenceCreationBlock
T@"<CSDAVConference>",&,N,V_conference
T@"CSDExternalIDSDualSession",R,N,V_session
TB,N,V_shouldStartAudioPaused
TB,N,V_shouldStartVideoPaused
TB,N,V_mayRequireBreakBeforeMake
TB,N,V_hasSentInvitation
T@"NSDate",&,N,V_dateReceivedFirstRemoteFrame
T@"NSDictionary",R,C,N,V_remoteInviteDictionary
T@"NSArray",C,N,V_invitedPushTokens
T@?,C,N,V_inviteCompletion
T@?,C,N,V_conferenceCreationBlock
T@"<CSDIDSChatDelegate>",W,N,V_delegate
T@"TUHandle",R,N,V_handle
TB,R,N,GisOutgoing,V_outgoing
TB,N,GisMuted,V_muted
TB,N,GisRemoteUplinkMuted,V_remoteUplinkMuted
TB,N,GisRemoteMomentsAvailable,V_remoteMomentsAvailable
T@"NSUUID",C,N,V_localSenderIdentityUUID
_actionDescription
_completedDescription
_contextIdentifier
_ongoingDescription
T@"NSString",&,N,V_contextIdentifier
T@"NSString",&,N,V_actionDescription
T@"NSString",&,N,V_ongoingDescription
T@"NSString",&,N,V_completedDescription
setManager:
performBlockAfterFirstUnlock:
beginMatchingExtensions
beginDailyMaintenanceWithActivity:
manager
compactStoreWithCompletionHandler:
countOfNotificationsReceived
setCountOfNotificationsReceived:
synchronizeExtensionsWithCompletionHandler:
callDirectoryNSExtensionManager:extensionsChanged:
deviceLockObserver
nsExtensionManager
_deviceLockObserver
_manager
_nsExtensionManager
_countOfNotificationsReceived
T@"<CSDDeviceLockStateObserver>",R,N,V_deviceLockObserver
T@"CXCallDirectoryManager",&,N,V_manager
T@"CXCallDirectoryNSExtensionManager",R,N,V_nsExtensionManager
TQ,N,V_countOfNotificationsReceived
setMutuallyExclusiveCall:
initWithTinCanIDSChat:
isCSCallingAvailable
setCsCallingAvailable:
isVoLTECallingAvailable
setVoLTECallingAvailable:
isWifiCallingAvailable
setWiFiCallingAvailable:
isEmergencyCallingOnWifiAllowed
setWiFiEmergencyCallingAllowed:
isEmergencyCallingOnWifiAvailable
setWiFiEmergencyCallingAvailable:
isWiFiCallingAvailable
isWiFiEmergencyCallingAllowed
isWiFiEmergencyCallingAvailable
callCapabilitiesForCTCallCapabilities:
callCapabilitiesForCallManagementStateInfo:
_csCallingAvailable
_voLTECallingAvailable
_wiFiCallingAvailable
_wiFiEmergencyCallingAllowed
_wiFiEmergencyCallingAvailable
csCallingAvailable
TB,N,GisCSCallingAvailable,V_csCallingAvailable
voLTECallingAvailable
TB,N,GisVoLTECallingAvailable,V_voLTECallingAvailable
wiFiCallingAvailable
TB,N,GisWiFiCallingAvailable,V_wiFiCallingAvailable
wiFiEmergencyCallingAllowed
TB,N,GisWiFiEmergencyCallingAllowed,V_wiFiEmergencyCallingAllowed
wiFiEmergencyCallingAvailable
TB,N,GisWiFiEmergencyCallingAvailable,V_wiFiEmergencyCallingAvailable
numberWithFloat:
addOtherUniqueProxyIdentifiers:
addProviders:
addRoutes:
addEndpointIDSDestinationURIs:
setOBSOLETEConferenceIdentifier:
setCallerNameFromNetwork:
protoCallsCount
clearProtoCalls
protoCallAtIndex:
setDummyPayload:
otherUniqueProxyIdentifiersCount
clearOtherUniqueProxyIdentifiers
otherUniqueProxyIdentifiersAtIndex:
providersCount
clearProviders
providersAtIndex:
remoteParticipantHandlesCount
clearRemoteParticipantHandles
remoteParticipantHandlesAtIndex:
routesCount
clearRoutes
routesAtIndex:
setRoute:
endpointIDSDestinationURIsCount
clearEndpointIDSDestinationURIs
endpointIDSDestinationURIsAtIndex:
protoCallType
otherUniqueProxyIdentifiersType
providersType
remoteParticipantHandlesType
routesType
endpointIDSDestinationURIsType
hasUniqueProxyIdentifier
hasDestinationID
hasSourceIdentifier
hasProtoCallModelState
setHasProtoService:
hasProtoService
setHasProtoWantsHoldMusic:
hasProtoWantsHoldMusic
setHasProtoCannotBeAnswered:
hasProtoCannotBeAnswered
hasProtoDTMFKey
setHasProtoDisconnectedReason:
hasProtoDisconnectedReason
hasOBSOLETEConferenceIdentifier
setHasProtoVoicemail:
hasProtoVoicemail
hasCallerNameFromNetwork
hasHardPauseDigits
setHasHardPauseState:
hasHardPauseState
setReceivedMessageType:
setHasReceivedMessageType:
hasReceivedMessageType
receivedMessageTypeAsString:
StringAsReceivedMessageType:
setHasProtoProtocolVersion:
hasProtoProtocolVersion
setHasProtoShouldSuppressRingtone:
hasProtoShouldSuppressRingtone
hasDummyPayload
setHostCallCreationTime:
setHasHostCallCreationTime:
hasHostCallCreationTime
setHasMessageSendTime:
hasMessageSendTime
setHasProtoNeedsManualInCallSounds:
hasProtoNeedsManualInCallSounds
setHasProtoCannotRelayAudioOrVideoOnPairedDevice:
hasProtoCannotRelayAudioOrVideoOnPairedDevice
setHasProtoExpectedEndpointOnMessagingDevice:
hasProtoExpectedEndpointOnMessagingDevice
hasContactIdentifier
hasProtoCallCapabilitiesState
setProtoSoundRegion:
setHasProtoSoundRegion:
hasProtoSoundRegion
setHasProtoEmergency:
hasProtoEmergency
hasProtoCallModel
setHasProtoSOS:
hasProtoSOS
hasProtoDisplayContext
hasInviteData
hasProtoProvider
setHasProtoVideo:
setHasProtoUplinkMuted:
hasProtoUplinkMuted
setHasProtoRemoteUplinkMuted:
hasProtoRemoteUplinkMuted
setSystemVolume:
setHasSystemVolume:
hasSystemVolume
hasLocalSenderIdentityUUIDString
hasLocalSenderIdentityAccountUUIDString
setHasProtoTTYType:
hasProtoTTYType
setHasProtoSupportsTTYWithVoice:
hasProtoSupportsTTYWithVoice
requestActionType
setRequestActionType:
setHasRequestActionType:
hasRequestActionType
requestActionTypeAsString:
StringAsRequestActionType:
hasRoute
setHasProtoPriority:
hasProtoPriority
setHasProtoOriginatingUIType:
hasProtoOriginatingUIType
setHasProtoFailureExpected:
hasProtoFailureExpected
oBSOLETEConferenceIdentifier
setProtoCalls:
dummyPayload
protoSoundRegion
otherUniqueProxyIdentifiers
setOtherUniqueProxyIdentifiers:
systemVolume
setRoutes:
route
protoPriority
_hostCallCreationTime
_messageSendTime
_callerNameFromNetwork
_contactIdentifier
_destinationID
_dummyPayload
_endpointIDSDestinationURIs
_hardPauseDigits
_hardPauseState
_inviteData
_localSenderIdentityAccountUUIDString
_localSenderIdentityUUIDString
_oBSOLETEConferenceIdentifier
_otherUniqueProxyIdentifiers
_protoCallCapabilitiesState
_protoCallModel
_protoCallModelState
_protoCalls
_protoDTMFKey
_protoDisconnectedReason
_protoDisplayContext
_protoOriginatingUIType
_protoPriority
_protoProtocolVersion
_protoProvider
_protoService
_protoSoundRegion
_protoTTYType
_providers
_receivedMessageType
_remoteParticipantHandles
_requestActionType
_route
_routes
_sourceIdentifier
_systemVolume
_uniqueProxyIdentifier
_protoCannotBeAnswered
_protoCannotRelayAudioOrVideoOnPairedDevice
_protoEmergency
_protoExpectedEndpointOnMessagingDevice
_protoFailureExpected
_protoNeedsManualInCallSounds
_protoRemoteUplinkMuted
_protoSOS
_protoShouldSuppressRingtone
_protoSupportsTTYWithVoice
_protoUplinkMuted
_protoVideo
_protoVoicemail
_protoWantsHoldMusic
T@"NSString",&,N,V_uniqueProxyIdentifier
T@"NSString",&,N,V_destinationID
T@"NSString",&,N,V_sourceIdentifier
T@"CSDMessagingCallModelState",&,N,V_protoCallModelState
TI,N,V_protoService
TB,N,V_protoWantsHoldMusic
TB,N,V_protoCannotBeAnswered
T@"NSData",&,N,V_protoDTMFKey
TI,N,V_protoDisconnectedReason
T@"NSString",&,N,V_oBSOLETEConferenceIdentifier
TB,N,V_protoVoicemail
T@"NSString",&,N,V_callerNameFromNetwork
T@"NSMutableArray",&,N,V_protoCalls
T@"NSString",&,N,V_hardPauseDigits
TI,N,V_hardPauseState
Ti,N,V_receivedMessageType
TI,N,V_protoProtocolVersion
TB,N,V_protoShouldSuppressRingtone
T@"NSData",&,N,V_dummyPayload
Td,N,V_hostCallCreationTime
Td,N,V_messageSendTime
TB,N,V_protoNeedsManualInCallSounds
TB,N,V_protoCannotRelayAudioOrVideoOnPairedDevice
TB,N,V_protoExpectedEndpointOnMessagingDevice
T@"NSString",&,N,V_contactIdentifier
T@"CSDMessagingCallCapabilitiesState",&,N,V_protoCallCapabilitiesState
TI,N,V_protoSoundRegion
TB,N,V_protoEmergency
T@"NSMutableArray",&,N,V_otherUniqueProxyIdentifiers
T@"CSDMessagingCallModel",&,N,V_protoCallModel
TB,N,V_protoSOS
T@"NSMutableArray",&,N,V_providers
T@"CSDMessagingCallDisplayContext",&,N,V_protoDisplayContext
T@"CSDMessagingAVConferenceInviteData",&,N,V_inviteData
T@"CSDMessagingCallProvider",&,N,V_protoProvider
TB,N,V_protoVideo
TB,N,V_protoUplinkMuted
TB,N,V_protoRemoteUplinkMuted
Tf,N,V_systemVolume
T@"NSString",&,N,V_localSenderIdentityUUIDString
T@"NSMutableArray",&,N,V_remoteParticipantHandles
T@"NSString",&,N,V_localSenderIdentityAccountUUIDString
TI,N,V_protoTTYType
TB,N,V_protoSupportsTTYWithVoice
Ti,N,V_requestActionType
T@"NSMutableArray",&,N,V_routes
T@"CSDMessagingRoute",&,N,V_route
T@"NSMutableArray",&,N,V_endpointIDSDestinationURIs
TI,N,V_protoPriority
TI,N,V_protoOriginatingUIType
TB,N,V_protoFailureExpected
serviceForClientIdentifier:
_callFilterIdentifier
setSender:
behaviorResolutionService
resolveBehaviorForEventDetails:error:
interruptionSuppression
setFilterBlock:
isDestinationIDAllowedThroughDoNotDisturb:providerIdentifier:
networkCountryCode
_behaviorResolutionService
_callProviderManager
T@"DNDEventBehaviorResolutionService",R,N,V_behaviorResolutionService
T@"TUCallProviderManager",R,N,V_callProviderManager
exceptionWithName:reason:userInfo:
raise
addHandoffIdentifier:
addEmergencyLabeledHandles:
addPrioritizedSenderIdentities:
addEmergencyHandles:
setLocalizedName:
setBundleURLString:
setRingtoneSoundURLString:
setOriginalRingtoneSoundURLString:
handoffIdentifiersCount
clearHandoffIdentifiers
handoffIdentifierAtIndex:
protoSupportedHandleTypesCount
clearProtoSupportedHandleTypes
protoSupportedHandleTypeAtIndex:
addProtoSupportedHandleType:
emergencyLabeledHandlesCount
clearEmergencyLabeledHandles
emergencyLabeledHandlesAtIndex:
prioritizedSenderIdentitiesCount
clearPrioritizedSenderIdentities
prioritizedSenderIdentitiesAtIndex:
emergencyHandlesCount
clearEmergencyHandles
emergencyHandlesAtIndex:
handoffIdentifierType
emergencyLabeledHandlesType
prioritizedSenderIdentitiesType
emergencyHandlesType
hasLocalizedName
hasBundleURLString
setMaximumCallGroups:
setHasMaximumCallGroups:
hasMaximumCallGroups
setMaximumCallsPerCallGroup:
setHasMaximumCallsPerCallGroup:
hasMaximumCallsPerCallGroup
setSupportsAudioOnly:
setHasSupportsAudioOnly:
hasSupportsAudioOnly
setSupportsAudioAndVideo:
setHasSupportsAudioAndVideo:
hasSupportsAudioAndVideo
setSupportsEmergency:
setHasSupportsEmergency:
hasSupportsEmergency
setSupportsVoicemail:
setHasSupportsVoicemail:
hasSupportsVoicemail
hasRingtoneSoundURLString
hasOriginalRingtoneSoundURLString
protoSupportedHandleTypes
setProtoSupportedHandleTypes:count:
setSupportsRecents:
setHasSupportsRecents:
hasSupportsRecents
localizedName
bundleURLString
maximumCallGroups
maximumCallsPerCallGroup
supportsAudioOnly
supportsAudioAndVideo
supportsEmergency
supportsVoicemail
ringtoneSoundURLString
originalRingtoneSoundURLString
setHandoffIdentifiers:
emergencyLabeledHandles
setEmergencyLabeledHandles:
supportsRecents
setPrioritizedSenderIdentities:
emergencyHandles
setEmergencyHandles:
_protoSupportedHandleTypes
_bundleURLString
_emergencyHandles
_emergencyLabeledHandles
_handoffIdentifiers
_localizedName
_maximumCallGroups
_maximumCallsPerCallGroup
_originalRingtoneSoundURLString
_prioritizedSenderIdentities
_ringtoneSoundURLString
_supportsAudioAndVideo
_supportsAudioOnly
_supportsEmergency
_supportsRecents
_supportsVoicemail
T@"NSString",&,N,V_identifier
T@"NSString",&,N,V_localizedName
T@"NSString",&,N,V_bundleURLString
TI,N,V_maximumCallGroups
TI,N,V_maximumCallsPerCallGroup
TB,N,V_supportsAudioOnly
TB,N,V_supportsAudioAndVideo
TB,N,V_supportsEmergency
TB,N,V_supportsVoicemail
T@"NSString",&,N,V_ringtoneSoundURLString
T@"NSString",&,N,V_originalRingtoneSoundURLString
T@"NSMutableArray",&,N,V_handoffIdentifiers
T^I,R,N
T@"NSMutableArray",&,N,V_emergencyLabeledHandles
TB,N,V_supportsRecents
T@"NSMutableArray",&,N,V_prioritizedSenderIdentities
T@"NSMutableArray",&,N,V_emergencyHandles
initWithQueue:callContainer:sessionMessenger:
_handleConferenceConnectionWillClose:
_handleConferenceConnectionDidClose:
_handleConferenceConnectionDidReceiveData:
dialingIDSDevice
sessionMessenger
prepareConnectedSessionsToEnd
endEndingSessions
clientMessagingDelegate
commonMessagingDelegate
handleSetUplinkMutedMessage:
setDialingIDSDevice:
isPairedDevice
outgoingRelayCallerID
_stripFZIDPrefix
deviceWithActiveSession
pairedDevice
identifiersForSessionInvitationWithMessage:
initWithRelayInviteDictionary:
sendMessage:andAcceptInvitationIfNecessaryForIdentifier:
cancelOrDeclineInvitationForIdentifier:
pairedDeviceMessenger
sendMessage:completionHandler:
sendMessage:andStartSessionIfNecessaryForIdentifier:toDevicesSupportingProvider:withTimeout:
prepareConferenceForCall:remoteInviteDictionary:completion:
sendMessage:forIdentifier:customizedForRemoteProtocolVersion:completionHandler:
_shouldSendToPairedIDSDevice
sendMessage:andCancelOrDeclineInvitationIfNecessaryForIdentifier:
sendMessage:wantsAcknowledgement:completionHandler:
sendMessage:forIdentifier:
sendData:throughConferenceForIdentifier:
sendMessage:forIdentifier:customizedForRemoteProtocolVersion:waitUntilConnected:completionHandler:
sendDialCallFailedForUniqueProxyIdentifier:withDisconnectedReason:
deviceForService:
isGuest
canReceiveMessagesForCallProvider:
sendCallAnsweredElsewhereMessageToClientForCall:
hostMessagingDelegate
sendMessage:andStartSessionIfNecessaryForIdentifiers:toDestination:timeout:completionHandler:
pushHostedCallsForRemoteInviteDictionary:destination:completion:
initWithTURoute:
_updateDialingIDSDevice
sendMessage:andStartSessionIfNecessaryForIdentifier:toDestination:timeout:completionHandler:
disconnectCall:withReason:
cannotRelayAudioOrVideo
sessionProtocolVersionForIdentifier:
callWithStatus:
isFaceTimeProvider
sendHoldCallMessageToHostForCall:
sendAnswerCallMessageToHostForCall:
sendMessage:timeout:wantsAcknowledgement:maximumRetryAttempts:completionHandler:
sendMessage:forIdentifier:toDestinations:
canReceiveRelayedCalls
shouldProcessRelayMessageOfType:
reportRelayMessageReceived:fromPairedDevice:
shouldScreenTimeRestrictMessage:
sendDialCallFailedForScreenTimeForUniqueProxyIdentifier:
_handleRetrievedLocalInviteDictionary:forMessage:
handleDialCallMessageFromClient:destination:completion:
handleAnswerCallMessageFromClient:destination:
handlePlayDTMFToneForKeyMessage:
handleHoldCallMessageFromClient:
handleUnholdCallMessageFromClient:
handleGroupCallMessageFromClient:
handleUngroupCallMessageFromClient:
handleDisconnectCallMessageFromClient:
handleSwapCallsMessageFromClient:
handleEndActiveAndAnswerMessageFromClient:
handleEndHeldAndAnswerMessageFromClient:
handleDisconnectCurrentCallAndActivateHeldMessageFromClient:
handleDisconnectAllCallsMessageFromClient:
handleSendHardPauseDigitsMessageFromClient:
handleSuppressRingtoneMessage:
handleRequestCallContextMessageFromClient:
handlePullHostedCallsMessageFromClient:destination:completion:
handlePushRelayingCallsMessageFromClient:
handleHoldActiveAndAnswerMessageFromClient:
handleUpdateSystemVolumeMessageFromHost:
handleSetTTYTypeMessage:
handleRequestActionMessage:
handlePickRouteMessageFromClient:
shouldDeclineSessionInviteWithMessageWhenRelayIsDisabled:
_callsWithUniqueProxyIdentifiers:
messagingConnectionEndedForCalls:didStartConnecting:
messagingConnectionFailedForCalls:didStartConnecting:
messagingConnectionCouldNotEstablishLinkForCalls:didStartConnecting:
_shouldDeclineSessionInviteWithMessage:
allowCallForDestinationID:providerIdentifier:
allowCallForDestinationID
shouldPreferRelayOverDirectSecondaryCallingForProvider:isVideo:
isDirectTelephonyCallingCurrentlyAvailable
isDirectFaceTimeAudioCallingCurrentlyAvailable
isDirectFaceTimeVideoCallingCurrentlyAvailable
callFilterController
shouldRestrictAddresses:forBundleIdentifier:performSynchronously:
bundleIdentifierForProvider:
performBlockOnTransportAvailability:forIdentifier:
prepareSessionToEndForIdentifier:
messenger:handledMessage:fromDestination:device:
messengerConnectionEnded:forIdentifiers:didStartConnecting:
messengerConnectionFailed:forIdentifiers:didStartConnecting:
messengerConnectionCouldNotEstablishLink:forIdentifiers:didStartConnecting:
shouldDeclineSecondSessionInviteWithMessage:
shouldIgnoreSessionInviteWithMessage:fromDestination:
timeoutForInvitationWithMessage:
_relayInvitationTimeoutForTimeout:
sendIncomingCallMessageToClientForCall:cannotBeAnswered:cannotRelayAudioOrVideoOnPairedDevice:
sendCallDialedMessageToClientForCall:
sendCallDisconnectedMessageToClientForCall:
sendCallConnectedMessageToClientForCall:
sendResetWantsHoldMusicMessageToClientForCall:
sendUpdateCallDisplayContextMessageToClientForCall:
sendUpdateFailureExpectedMessageToClientForCall:
sendUpdateRemoteUplinkMutedCallMessageToClientForCall:
sendUpdateSupportsTTYWithVoiceCallMessageToClientForCall:
sendUpdateCallModelMessageToClientForCall:
sendDeviceUnavailableMessageToClientForUniqueProxyIdentifier:
sendPullRelayingCallsMessageToClient
sendResetStateMessageToClient
sendHardPauseAvailabilityMessageToClientForState:digits:
sendUpdateRemoteCallStateMessageToClient
sendCallStartedConnectingMessageToClientForCall:
sendDialCallFailedForUniqueProxyIdentifier:
sendPushCallsMessageToClientDestination:
sendUpdateCallContextMessageToClientForCallProviderManager:
sendNeedsManualInCallSoundsChangeMessageToClientForCall:
sendInvitationSentMessageToClientForCall:
sendUpdateRoutesMessageToClientForRoutes:
sendDialCallMessageToHostForCall:completionHandler:
sendDisconnectCallMessageToHostForCall:
sendUnholdCallMessageToHostForCall:
sendGroupCallMessageToHostForCall:otherCall:
sendUngroupCallMessageToHostForCall:
sendSwapCallsMessageToHost
sendEndActiveAndAnswerCallMessageToHostForCall:
sendEndHeldAndAnswerCallMessageToHostForCall:
sendHoldActiveAndAnswerCallMessageToHostForCall:
sendDisconnectCurrentCallAndActivateHeldMessageToHostForDisconnectedCall:
sendDisconnectAllCallsMessageToHostForDisconnectedCall:
sendSendHardPauseDigitsMessageToHostForCall:
sendRequestCallStateMessageToHost
sendPullCallsMessageToHost
sendPushRelayingCallsMessageToHostForSourceIdentifier:
sendUpdateRemoteUplinkMutedCallMessageToHostForCall:
sendPickRouteMessageToHostForRoute:
sendPlayDTMFToneForKeyMessageForCall:DTMFKey:
sendSetTTYTypeCallMessageForCall:ttyType:
sendSetUplinkMutedCallMessageForCall:uplinkMuted:
sendSuppressRingtoneMessageForCall:
sendUpdateSystemVolumeForCall:volume:
requestAnswerForRequest:forCall:
prepareToDisconnectMessagingConnectionForCall:
disconnectMessagingConnectionForCall:
setClientMessagingDelegate:
setHostMessagingDelegate:
setCommonMessagingDelegate:
_clientMessagingDelegate
_hostMessagingDelegate
_commonMessagingDelegate
_sessionMessenger
_pairedDeviceMessenger
_dialingIDSDevice
_callCenter
T@"CSDRelayIDSSessionMessenger",R,N,V_sessionMessenger
T@"CSDRelayPairedDeviceMessenger",R,N,V_pairedDeviceMessenger
T@"IDSDevice",&,N,V_dialingIDSDevice
T@"<TUCallContainerPrivate>",R,N,V_callCenter
T@"<CSDRelayMessagingControllerDelegate>",W,N,V_delegate
T@"<CSDRelayMessagingControllerClientMessagingDelegate>",W,N,V_clientMessagingDelegate
T@"<CSDRelayMessagingControllerHostMessagingDelegate>",W,N,V_hostMessagingDelegate
T@"<CSDRelayMessagingControllerCommonMessagingDelegate>",W,N,V_commonMessagingDelegate
setMediaBlob:
setCallInfoBlob:
setSKEBlob:
mediaBlob
callInfoBlob
sKEBlob
_setUpSandbox
recentsController
clearNotificationsIfNecessary
voipApplicationController
handleApplicationUninstalledNotification:
applicationPolicyManager
setSignalHandlerDispatchSources:
_observeSignal:usingHandler:
setUserConfiguration:
setDeviceLockStateObserver:
deviceLockStateObserver
perform
setVoiceOverObserver:
setCallStateMonitor:
setRelayMessagingController:
addReporter:
isFaceTimePhotosXPCServiceEnabled
setMomentsController:
momentsController
setStatusBarManager:
setCallDirectoryManager:
setVoipApplicationController:
setRelayClientController:
relayClientController
setRelayHostController:
relayHostController
setRelayCommonController:
relayCommonController
setApplicationPolicyManager:
setProximitySensorObserver:
setProximityController:
setRaiseToAnswerController:
initWithVoiceOverObserver:
setAudioController:
audioController
_setUpLanguageChangeListener
callFilterManager
initWithCallFilterManager:
signalHandlerDispatchSources
string
stringWithUTF8String:
_setUpTemporaryDirectory
userConfiguration
propertiesDidChangeForConfiguration:
callStateMonitor
callDirectoryManager
userNotificationController
setUserNotificationController:
orientationMonitor
setOrientationMonitor:
proximityController
raiseToAnswerController
powerAssertionManager
setPowerAssertionManager:
statusBarManager
_callStateMonitor
_relayMessagingController
_relayClientController
_relayHostController
_relayCommonController
_callDirectoryManager
_voipApplicationController
_momentsController
_userConfiguration
_userNotificationController
_signalHandlerDispatchSources
_deviceLockStateObserver
_orientationMonitor
_proximityController
_raiseToAnswerController
_powerAssertionManager
_audioController
_statusBarManager
_applicationPolicyManager
T@"CSDCallStateMonitor",&,N,V_callStateMonitor
T@"CSDRelayMessagingController",&,N,V_relayMessagingController
T@"CSDRelayClientController",&,N,V_relayClientController
T@"CSDRelayHostController",&,N,V_relayHostController
T@"CSDRelayCommonController",&,N,V_relayCommonController
T@"CSDCallDirectoryManager",&,N,V_callDirectoryManager
T@"CSDVoIPApplicationController",&,N,V_voipApplicationController
T@"CSDMomentsController",&,N,V_momentsController
T@"TUUserConfiguration",&,N,V_userConfiguration
T@"CSDUserNotificationController",&,N,V_userNotificationController
T@"CSDVoiceOverObserver",&,N,V_voiceOverObserver
T@"NSMutableArray",&,N,V_signalHandlerDispatchSources
T@"CSDDeviceLockStateObserver",&,N,V_deviceLockStateObserver
T@"CSDOrientationMonitor",&,N,V_orientationMonitor
T@"CSDProximityController",&,N,V_proximityController
T@"CSDProximitySensorObserver",&,N,V_proximitySensorObserver
T@"CSDRaiseToAnswerController",&,N,V_raiseToAnswerController
T@"CSDPowerAssertionManager",&,N,V_powerAssertionManager
T@"CSDAudioController",&,N,V_audioController
T@"CSDStatusBarManager",&,N,V_statusBarManager
T@"CPApplicationPolicyManager",&,N,V_applicationPolicyManager
initWithCapabilities:queue:
mutableChats
phoneNumberWithDigits:countryCode:
unformattedInternationalRepresentation
isWiFiAvailable
isWiFiAllowed
isCellularDataAvailable
isCellularDataAllowed
shouldOverrideNetworkAsAvailable
handleWithDestinationID:
serviceIdentifier
containsString:
initWithUUID:isVideo:handle:
shouldAcceptIncomingInvite
callUpdateForPendingChat:
reportCallWithUUID:endedAtDate:reason:
setRequiresAuthentication:
incomingSessionProviderGenerator
initAsReceiverWithSessionProvider:remoteFromID:remoteProtocolVersion:
waitingChatWithHandle:isOutgoing:
incomingChatGenerator
callUpdateForChat:
loginID
updateCacheWithChat:
providerDidBegin
TUCallRemoteVideoPresentationStateFromCXVideoPresentationState:
isCellularDataPreferred
reportCallWithUUID:changedMeterLevel:forDirection:
handleByFullyQualifyingHandle:usingCountryCode:
chats
setProviderDidBegin:
setIncomingSessionProviderGenerator:
setIncomingChatGenerator:
_shouldOverrideNetworkAsAvailable
_mutableChats
_providerDidBegin
_incomingSessionProviderGenerator
_incomingChatGenerator
T@"<CSDIDSProviderDelegateCapabilities>",R,N,V_capabilities
T@"NSMutableOrderedSet",R,N,V_mutableChats
TB,R,N,V_shouldOverrideNetworkAsAvailable
T@?,C,N,V_providerDidBegin
T@?,C,N,V_incomingSessionProviderGenerator
T@?,C,N,V_incomingChatGenerator
hasSKEBlob
hasMediaBlob
hasCallInfoBlob
_callInfoBlob
_mediaBlob
_sKEBlob
T@"NSData",&,N,V_sKEBlob
T@"NSData",&,N,V_mediaBlob
T@"NSData",&,N,V_callInfoBlob
initWithSessionProvider:
propertiesDescription
remoteProtocolVersionNumber
setHasStartedConnecting:
setHasConnected:
setRemoteProtocolVersionNumber:
initWithSocket:
initWithDestination:
setInitialLinkType:
initAsInitiatorWithSessionProvider:
initAsReceiverWithSessionProvider:remoteProtocolVersion:
remoteProtocolVersion
setReceiverProtocolVersion:
sendInvitation
cancelInvitation
_hasStartedConnecting
_hasConnected
_remoteProtocolVersionNumber
_sessionProvider
T@"NSNumber",&,N,V_remoteProtocolVersionNumber
Ti,N,V_endedReason
TB,N,V_hasStartedConnecting
TB,N,V_hasConnected
T@"<CSDIDSDualSessionProvider>",R,N,V_sessionProvider
T@"<CSDIDSDualSessionDelegate>",W,N,V_delegate
TB,R,N,GisInitiator,V_initiator
T@"CSDIDSTransport",R,N
T@"<CSDRelayIDSMessengerDelegate>",W,N,V_delegate
doesNotRecognizeSelector:
phoneNumberMCCToISOCountryCodeTransformBlock
initWithAccountID:primaryDeviceID:phoneNumberURI:availableDeviceSlots:allowedSecondaryDeviceIDs:
primaryDeviceID
phoneNumberURI
availableDeviceSlots
isEqualToAccount:
setPhoneNumberMCCToISOCountryCodeTransformBlock:
mutableCopyWithZone:
T@?,C,N
containsRegisteredDeviceID:
setAccountID:
setPrimaryDeviceID:
setPhoneNumberURI:
setAvailableDeviceSlots:
setAllowedSecondaryDeviceIDs:
_accountID
_primaryDeviceID
_phoneNumberURI
_availableDeviceSlots
_allowedSecondaryDeviceIDs
T@"NSString",C,N,V_accountID
T@"NSString",C,N,V_primaryDeviceID
T@"NSString",C,N,V_phoneNumberURI
Tq,N,V_availableDeviceSlots
T@"NSSet",C,N,V_allowedSecondaryDeviceIDs
T@"NSString",C,D,N
Tq,D,N
T@"NSSet",C,D,N
isLoaded
startBagLoad
canSend
initWithAccount:destinations:options:
accounts
isAccountActive
isQuickRelaySupported
facetimeIDSServiceGenerator
accountWithUUID:service:
IDSFormattedDestinationID
isRetry
outgoingSessionProviderGenerator
outgoingChatGenerator
initWithAction:
providerDelegate:requestedTransaction:completion:
ISOCountryCodeForChat:
setISOCountryCode:
callForConversation:withSessionToken:
canUpgradeChat:
upgradeChatIfNecessary:
isEqualToData:
chatsPendingUpgrade
instancesRespondToSelector:
chatReceived:
setAccounts:
telephonySenderIdentities
updateProviderConfigurationWithAccounts:senderIdentities:
setTelephonySenderIdentities:
matchingSim
SIMIdentifier
updateProviderConfigurationWithAccounts:
inviteIDSPeersWithAction:destinations:joinCallActionToFulfill:completion:
upgradeCallForConversation:withSessionToken:
ISOCountryCodeForCallWithUUID:
isUpgradingCallWithUUID:
updateProviderConfigurationWithSenderIdentities:
setFacetimeIDSServiceGenerator:
setIsAccountActive:
setOutgoingSessionProviderGenerator:
setOutgoingChatGenerator:
upgradeTimeout
setUpgradeTimeout:
_accounts
_telephonySenderIdentities
_chatsPendingUpgrade
_facetimeIDSServiceGenerator
_isAccountActive
_outgoingSessionProviderGenerator
_outgoingChatGenerator
_upgradeTimeout
T@"NSSet",C,N,V_accounts
T@"<CSDFaceTimeIDSProviderDelegateCapabilities>",R,N,V_capabilities
T@"NSOrderedSet",C,N,V_telephonySenderIdentities
T@"NSMutableSet",R,N,V_chatsPendingUpgrade
T@"<CSDFaceTimeIDSProviderDelegateServerBag>",&,N,V_serverBag
T@?,C,N,V_facetimeIDSServiceGenerator
T@?,C,N,V_isAccountActive
T@?,C,N,V_outgoingSessionProviderGenerator
T@?,C,N,V_outgoingChatGenerator
Td,N,V_upgradeTimeout
setIdentifierUUIDString:
setApplicationContext:
setActivityIdentifier:
setActivityContext:
setUpdatedDateEpochTime:
fallbackApplicationName
setFallbackApplicationName:
isSystemActivity
setIsSystemActivity:
title
subTitle
setSubtitle:
fallbackURL
absoluteString
setFallbackURL:
setSupportsContinuationOnTV:
preferredBroadcastingAttributes
setPreferredBroadcastingAttributes:
setActivityMetadata:
activityContext
imageData
setImage:
activityMetadata
URLWithString:
subtitle
image
initWithContext:linkMetadata:fallbackURL:invitationURL:supportsContinuationOnTV:title:subTitle:imageData:preferredBroadcastingAttributes:
identifierUUIDString
initWithBundleIdentifier:metadata:applicationContext:uuid:activityIdentifier:fallbackApplicationName:
setOriginator:
updatedDateEpochTime
setTimestamp:
setSystemActivity:
sanitizedCopy
tuConversationActivity
activityWithCSDConversationActivity:fromConversation:
activityWithCSDConversationActivity:handle:
T@"TUConversationActivity",R,N
initWithUniqueProxyIdentifier:
setBehavior:
playLocalDTMFToneForKey:
uplinkMutedSetTime
setUplinkMutedSetTime:
setActiveCategoryVolume:
handleRequestedAnswerMessage:withBehavior:
transferFileAtTemporaryURL:toDestinations:withMetadata:
URLByDeletingLastPathComponent
defaultManager
contentsOfDirectoryAtURL:includingPropertiesForKeys:options:error:
path
fileExistsAtPath:isDirectory:
performFileCopierOperation:onInputURL:outputURL:completion:
sendResourceAtURL:metadata:toDestinations:priority:options:identifier:error:
clientFileURLByIdentifier
cleanUpTemporaryFileIfExistsForClientFileURL:
fileTransferer:didTransferFileAtURL:successfully:
temporaryFileURLByClientFileURL
zipDirectoryAtURL:completion:
copyFileAtURL:toTemporaryFileWithName:
fileTransferer:didReceiveResourcesAtURL:withMetadata:isZipped:fromIDSDestination:
stringByAppendingPathComponent:
fileURLWithPath:
createDirectoryAtURL:withIntermediateDirectories:attributes:error:
URLByAppendingPathComponent:
copyItemAtURL:toURL:error:
renamedResourceURL:withName:
moveItemAtURL:toURL:error:
pathComponents
removeLastObject
fileURLWithPathComponents:
removeItemAtURL:error:
stringByAppendingPathExtension:
didErrorOccur
cleanup
initWithInputURL:outputURL:identifier:operation:completionBlock:queue:
deleteContentsAtURL:
renameResourceAtURL:toResourceWithName:
transferFileAtURL:toDestinations:withMetadata:
unzipArchiveAtURL:completion:
T@"<CSDFileTransferringDelegate>",W,N
_service
_clientFileURLByIdentifier
_temporaryFileURLByClientFileURL
T@"IDSService",&,N,V_service
T@"NSMutableDictionary",R,N,V_clientFileURLByIdentifier
T@"NSMutableDictionary",R,N,V_temporaryFileURLByClientFileURL
T@"<CSDFileTransferringDelegate>",W,N,V_delegate
initWithSerialQueue:timeout:
serialQueue
callSourceWithIdentifier:
_waitForCallSourceWithIdentifier:completion:
pendingCompletions
timeout
fetchCallSourceForIdentifier:completion:
handleCallSourcesChanged
setSerialQueue:
setTimeout:
setPendingCompletions:
_serialQueue
_timeout
_pendingCompletions
T@"NSObject<OS_dispatch_queue>",&,N,V_serialQueue
Td,N,V_timeout
T@"NSMutableDictionary",&,N,V_pendingCompletions
T@"<CSDCallSourceFetcherDataSource>",W,N,V_dataSource
rangeOfString:
normalizedDeviceType
setRelayCallingEnabled:forDeviceWithID:
setThumperCallingAllowed:onSecondaryDeviceWithID:forSenderIdentityWithUUID:
setThumperCallingAllowed:onSecondaryDeviceWithID:
updateUINotification
arrayWithObject:
dictionaryWithObjectsAndKeys:
userNotificationWithIdentifier:timeout:alertLevel:displayFlags:displayInformation:
responseInformation
setRelayCallingEnabled:
setThumperCallingEnabled:
supportsPhoneCalls
uriForFromID:
ctServiceType
serviceDescription
displayPinMessageForDevice:completionHandler:
enrollDevice:forSenderIdentityUUID:
unenrollDevice:
displayServiceConfirmationWithCompletionHandler:
displayPinRequestFailure
displayIncomingPinCode:fromID:completionHandler:
pinCodeEnteredSuccessfully:cancelled:onPrimaryDevice:
resetOneTimeMessage
_thumperCallingAllowedOnDefaultPairedDeviceDefault
TB,N,V_thumperCallingAllowedOnDefaultPairedDeviceDefault
setProtoStatus:
setHasProtoStatus:
hasProtoStatus
setProtoConferenced:
setHasProtoConferenced:
hasProtoConferenced
setProtoTimeConnected:
setHasProtoTimeConnected:
hasProtoTimeConnected
setProtoOutgoing:
setHasProtoOutgoing:
hasProtoOutgoing
setProtoHasSentInvitation:
setHasProtoHasSentInvitation:
hasProtoHasSentInvitation
protoStatus
protoConferenced
protoTimeConnected
protoOutgoing
protoHasSentInvitation
_protoTimeConnected
_protoStatus
_protoConferenced
_protoHasSentInvitation
_protoOutgoing
TI,N,V_protoStatus
TB,N,V_protoConferenced
Td,N,V_protoTimeConnected
TB,N,V_protoOutgoing
TB,N,V_protoHasSentInvitation
setBackingProvider:
canBeAnsweredWithAudioOrVideoRelayWithRequest:
canOnlyBeAnsweredWithoutAudioOrVideoRelayWithRequest:
hasRelaySupport:
relayDelegate
relayCall:didGroupWithOtherCall:
relayCallDidUngroup:
isMutedForIdentifier:
setMuted:forIdentifier:
isSendingAudioForIdentifier:
setSendingAudio:forIdentifier:
inputAudioPowerSpectrumTokenForIdentifier:
outputAudioPowerSpectrumTokenForIdentifier:
setCallStatus:
relayCallDidDial:
isConnecting
relayCall:didAnswerWithRequest:
relayCallDidDisconnect:
relayCallConferenceDidStartSuccessfullyForIncomingAnsweredCall:
relayCallConferenceFailedToStart:
relayCallConferenceDidStop:cleanly:error:
startConferenceForIdentifier:usingTransport:remoteInviteDictionary:didStartHandler:didStopHandler:
relayCallConferenceDidStartSuccessfullyForOutgoingDialedCall:
relayCallConferenceDidStartSuccessfullyForPulledCall:
relayCallDidHold:
relayCallDidUnhold:
relayCall:didPlayLocalDTMFToneForKey:
relayCallDidSendHardPauseDigits:
relayCallDidBecomeEndpointForPull:
dateStartedOutgoing
setDateStartedOutgoing:
dateSentInvitation
setDateSentInvitation:
prepareToStopConferenceForIdentifier:
canBeAnsweredWithRequest:
startConferenceForAnsweredCallWithTransport:remoteInviteDictionary:
startConferenceForDialedCallWithTransport:remoteInviteDictionary:
startConferenceForPulledCallWithTransport:remoteInviteDictionary:
stopConference
setLocallyHasStartedOutgoing
setRelayDelegate:
_voicemail
_emergency
_failureExpected
_sos
_needsManualInCallSounds
_supportsTTYWithVoice
_cannotRelayAudioOrVideo
_callStatus
_originatingUIType
_backingProvider
_callGroupUUID
_displayContext
_initialLinkType
_localSenderIdentityAccountUUID
_relayDelegate
T@"<CSDRelayCallDelegate>",W,N,V_relayDelegate
T@"TUHandle",&,N,V_handle
T@"NSString",C,N,V_isoCountryCode
Ti,N,V_callStatus
T@"NSUUID",C,N,V_callGroupUUID
T@"TUCallProvider",&,N,V_backingProvider
TB,N,GisOutgoing,V_outgoing
TB,N,GisVoicemail,V_voicemail
TB,N,GisEmergency,V_emergency
TB,N,GisFailureExpected,V_failureExpected
TB,N,GisSOS,SsetSOS:,V_sos
T@"NSString",C,N,V_callerNameFromNetwork
TB,N,V_needsManualInCallSounds
T@"TUCallDisplayContext",C,N,V_displayContext
TB,N,V_cannotRelayAudioOrVideo
TQ,N,V_initialLinkType
T@"NSUUID",&,N,V_localSenderIdentityUUID
T@"NSUUID",&,N,V_localSenderIdentityAccountUUID
T@"NSSet",C,N,V_remoteParticipantHandles
TB,N,V_supportsTTYWithVoice
Ti,N,V_originatingUIType
callHistoryManagerClientXPCInterface
callHistoryManagerServerXPCInterface
callHistoryManager
updateOutgoingLocalParticipantUUID:forCallsWithOutgoingLocalParticipantUUID:
recentCallsDidChangeForCallHistoryManager:
initWithManager:
_callHistoryManager
T@"CSDCallHistoryManager",R,N,V_callHistoryManager
_parsePauseDigitsFromDestinationID:
pauseDigits
removeObjectAtIndex:
characterSetWithCharactersInString:
formUnionWithCharacterSet:
rangeOfCharacterFromSet:options:range:
substringWithRange:
characterAtIndex:
characterIsMember:
insertObject:atIndex:
setBaseDestinationID:
setOriginalPauseDigitsString:
setPauseDigits:
_baseDestinationID
_originalPauseDigitsString
_pauseDigits
T@"NSString",C,N,V_baseDestinationID
T@"NSString",C,N,V_originalPauseDigitsString
T@"NSMutableArray",&,N,V_pauseDigits
T@"<CSDPauseDigitsQueueDelegate>",W,N,V_delegate
T@"CSDPauseDigits",R,N
initWithObject:queue:
processName
processBundleIdentifier
valueForEntitlement:
entitledCapabilities
connection
remoteObjectProxy
addBarrierBlock:
initWithConnection:queue:
performBlockAfterCoalescing:
isEntitledForCapability:
_processIdentifier
_processName
_processBundleIdentifier
_entitledCapabilities
T@"NSXPCConnection",R,N
T@"NSSet",R,C,N,V_entitledCapabilities
sharedUtilityProvider
utilityProvider
currentPreferredTransportMethod
transportMethod
T@"RTTTelephonyUtilities",R,N
bundleURL
ringtoneSoundURL
originalRingtoneSoundURL
supportedHandleTypes
setSupportedHandleTypes:
setEmergencyTUHandles:
setEmergencyTULabeledHandles:
setPrioritizedTUSenderIdentities:
setBundleURL:
isFileURL
bundleWithURL:
setRingtoneSoundURL:
setOriginalRingtoneSoundURL:
emergencyTUHandles
emergencyTULabeledHandles
prioritizedTUSenderIdentities
unsignedIntValue
orderedSetWithCapacity:
tuSenderIdentity
initWithTUSenderIdentity:
T@"TUCallProvider",R,C,N
T@"NSArray",C,N
T@"NSOrderedSet",C,N,SsetPrioritizedTUSenderIdentities:
removeServiceDelegate:
identifiersWaitingForAcknowledgement
pairedDeviceUniqueIDOverrideExists
_sendMessageOptionsWithTimeout:wantsAcknowledgement:
sendData:toDestinations:priority:options:identifier:error:
_retryReliableMessageWithIdentifierIfNecessary:message:timeout:maximumRetryAttempts:
setIdentifiersWaitingForAcknowledgement:
_identifiersWaitingForAcknowledgement
T@"NSMutableSet",&,N,V_identifiersWaitingForAcknowledgement
givenName
setGivenName:
middleName
setMiddleName:
familyName
setFamilyName:
namePrefix
setNamePrefix:
nameSuffix
setNameSuffix:
phoneticRepresentation
setPhoneticRepresentation:
initWithPersonNameComponents:
personNameComponents
T@"NSPersonNameComponents",R,C,N
setRemoteIDSDestination:
setInputAudioPowerSpectrumToken:
setOutputAudioPowerSpectrumToken:
remoteIDSDestination
T@"CXCallUpdate",R,C,N
addMembers:
addOtherInvitedHandles:
addLightweightMembers:
membersCount
clearMembers
membersAtIndex:
setMessagesGroupUUIDString:
setActivitySession:
setProviderIdentifier:
otherInvitedHandlesCount
clearOtherInvitedHandles
otherInvitedHandlesAtIndex:
lightweightMembersCount
clearLightweightMembers
lightweightMembersAtIndex:
membersType
otherInvitedHandlesType
lightweightMembersType
hasMessage
hasMessagesGroupUUIDString
hasMessagesGroupName
hasActivitySession
hasProviderIdentifier
setHasVideoEnabled:
hasVideoEnabled
members
setMembers:
message
messagesGroupUUIDString
activitySession
providerIdentifier
_activitySession
_members
_message
_messagesGroupUUIDString
_providerIdentifier
T@"NSMutableArray",&,N,V_members
T@"CSDMessagingConversationMessage",&,N,V_message
T@"NSString",&,N,V_messagesGroupUUIDString
T@"NSString",&,N,V_messagesGroupName
T@"CSDMessagingConversationActivitySession",&,N,V_activitySession
TB,N,V_video
T@"NSString",&,N,V_providerIdentifier
T@"NSMutableArray",&,N,V_otherInvitedHandles
T@"NSMutableArray",&,N,V_lightweightMembers
TB,N,V_videoEnabled
sharedPhotoLibrary
creationRequestForAsset
setShouldMoveFile:
addResourceWithType:fileURL:options:
placeholderForCreatedAsset
localIdentifier
performChanges:completionHandler:
saveLivePhotoWithPhotoURL:videoURL:completion:
saveVideoWithURL:completion:
callStateContext
_registerCallStopEvent
_registerCallStartEventForCall:
visibilityContext
_registerCallBackgroundedEvent
_registerCallForegroundedEventForCall:
eventBlock
_contextDictionaryWithCall:
setCallStateContext:
_registerEventWithContext:status:
setVisibilityContext:
_bundleIdentifierForCall:
setEventBlock:
_eventBlock
_callStateContext
_visibilityContext
T@"NSDictionary",&,N,V_callStateContext
T@"NSDictionary",&,N,V_visibilityContext
T@?,C,N,V_eventBlock
initWithCallSource:queue:featureFlags:shouldUseIDSDemuxer:
initWithReportingController:cpApplicationController:
initWithConversationManager:
initWithQueue:conversationManager:
initWithDataSource:parentQueue:
initWithDataSource:
initWithApplicationController:queue:
addObserver:queue:
initWithConversationManager:queue:
beginListeningOnService:
generateAllInactiveLinks
providerConfiguration
initWithConfiguration:callSource:
conversationManagerXPCServer
setSupportsVideo:
setWithObjects:
faceTimeIDSProviderDelegate
reportAudioFinishedForCallWithUUID:
delayedActionsByCallUUID
callDataSource
_callWithUUID:
reportOutgoingCallWithUUID:startedConnectingAtDate:
providerDelegate:endOtherProvidersCallWithUUID:
faceTimeConversationProviderDelegate
faceTimeIMAVProviderDelegate
reportCallWithUUID:failedAtDate:withContext:
reportCallWithUUID:endedAtDate:privateReason:
deferReportingAudioFinishedForCallWithUUID:
requestTransaction:completion:
shouldUseIDSDemuxer
provider:performStartCallAction:shouldUseIDSDemuxer:
initiateModernFTInviteForAction:destinations:excludedIMAVDestinations:joinCallActionToFulfill:
_createDelayedActionListIfNecessary:
arrayWithArray:
setRemotePushTokens:
conversationManager
callerIDHandleForSenderIdentityUUID:
provider:performJoinCallAction:shouldUseIDSDemuxer:
_processDelayedActionList:provider:
idsPeersForHandle:video:completionHandler:
gondolaShareLinkInAdvance
providerDelegate:requestedUpgradeToExistingCallForConversation:withSessionToken:completion:
providerDelegate:isExclusivelyManagingCallWithUUID:
providerDelegate:callWithUUID:connectedAtDate:
initWithCallSource:queue:
conversationManagerHost
cpBiomeStreamDonator
applicationMonitor
conduitXPCServer
contactsDataProvider
setContactsDataProvider:
setFaceTimeInviteDemuxer:
setFaceTimeIDSProviderDelegate:
setFaceTimeIMAVProviderDelegate:
setFaceTimeConversationProviderDelegate:
setCallDataSource:
_shouldUseIDSDemuxer
_conversationManagerXPCServer
_conversationManagerHost
_cpBiomeStreamDonator
_applicationMonitor
_conduitXPCServer
_delayedActionsByCallUUID
_contactsDataProvider
_faceTimeIDSProviderDelegate
_faceTimeIMAVProviderDelegate
_faceTimeConversationProviderDelegate
_conversationManager
_callDataSource
T@"CSDConversationManagerXPCServer",R,N,V_conversationManagerXPCServer
T@"CPConversationManagerHost",R,N,V_conversationManagerHost
T@"CPBiomeSessionDonator",R,N,V_cpBiomeStreamDonator
T@"CPApplicationMonitor",R,N,V_applicationMonitor
T@"CSDNeighborhoodActivityConduitXPCServer",R,N,V_conduitXPCServer
TB,R,N,V_shouldUseIDSDemuxer
T@"CXProvider",R,N,V_provider
T@"NSMutableDictionary",R,N,V_delayedActionsByCallUUID
T@"TUContactsDataProvider",&,N,V_contactsDataProvider
T@"CSDFaceTimeInviteDemuxer",&,N,V_faceTimeInviteDemuxer
T@"CSDFaceTimeIDSProviderDelegate",&,N,V_faceTimeIDSProviderDelegate
T@"CSDFaceTimeIMAVProviderDelegate",&,N,V_faceTimeIMAVProviderDelegate
T@"CSDFaceTimeConversationProviderDelegate",&,N,V_faceTimeConversationProviderDelegate
T@"CSDConversationManager",R,N,V_conversationManager
T@"CSDProviderCallDataSource",W,N,V_callDataSource
initWithMessage:assertion:applicationShouldPostIncomingCall:
applicationShouldPostIncomingCall
assertion
_applicationShouldPostIncomingCall
_assertion
TB,R,N,V_applicationShouldPostIncomingCall
T@"BKSProcessAssertion",R,N,V_assertion
T@"CSDVoIPApplicationMessage",R,N,V_message
environment
pushKitClient
networkExtensionClient
token
pendingPushKitMessageContexts
pendingNetworkExtensionMessageContexts
applicationRecord
csd_hasVoIPBackgroundMode
csd_hasVoIPNetworkExtensionEntitlement
_deliverTokenToApplication
_deliverPendingPushKitPayloadsToApplication
_deliverPendingNetworkExtensionPayloadsToApplication
setToken:
transportType
voipRegistrationSucceededWithDeviceToken:
voipPayloadReceived:mustPostCall:withCompletionHandler:
voipRegistrationFailed
_deliverMessageContext:
payload
voipNetworkExtensionPayloadReceived:mustPostCall:withCompletionHandler:
voipNetworkExtensionRegistrationFailed
initWithBundleIdentifier:queue:
hasVoIPBackgroundMode
hasVoIPNetworkExtensionEntitlement
setPushKitClient:
setNetworkExtensionClient:
deliverToken:
deliverMessage:withAssertion:applicationShouldPostIncomingCall:
setEnvironment:
requiresStrictPolicyEnforcement
_requiresStrictPolicyEnforcement
_token
_environment
_pushKitClient
_networkExtensionClient
_applicationRecord
_pendingPushKitMessageContexts
_pendingNetworkExtensionMessageContexts
T@"LSApplicationRecord",R,N,V_applicationRecord
T@"NSMutableArray",R,N,V_pendingPushKitMessageContexts
T@"NSMutableArray",R,N,V_pendingNetworkExtensionMessageContexts
T@"NSData",C,N,V_token
T@"NSString",C,N,V_environment
T@"CSDClient",&,N,V_pushKitClient
T@"CSDClient",&,N,V_networkExtensionClient
TB,R,N,V_requiresStrictPolicyEnforcement
SDKVersion
entitlements
objectForKey:ofClass:
compare:options:
setActivity:
hasIdentifierUUIDString
hasActivity
_activity
_identifierUUIDString
T@"NSString",&,N,V_identifierUUIDString
T@"CSDMessagingConversationActivity",&,N,V_activity
hasNamePrefix
hasGivenName
hasMiddleName
hasFamilyName
hasNameSuffix
hasNickname
hasPhoneticRepresentation
_familyName
_givenName
_middleName
_namePrefix
_nameSuffix
_nickname
_phoneticRepresentation
T@"NSString",&,N,V_namePrefix
T@"NSString",&,N,V_givenName
T@"NSString",&,N,V_middleName
T@"NSString",&,N,V_familyName
T@"NSString",&,N,V_nameSuffix
T@"NSString",&,N,V_nickname
T@"CSDMessagingPersonNameComponents",&,N,V_phoneticRepresentation
addLink:
linksCount
clearLinks
linkAtIndex:
linkType
links
setLinks:
_links
T@"NSMutableArray",&,N,V_links
initWithCallCenterObserver:inCallServiceProcessObserver:springBoardProcessObserver:callCenter:featureFlags:queue:
springBoardProcessObserver
processIdentifiersForBundleIdentifier:
handleSpringBoardPIDChanged:
setProcessStateChanged:
processStatesForBundleIdentifier:completion:
inCallServiceProcessObserver
setInCallServiceProcessState:
updateResolvedDescriptor
inCallServiceProcessState
springBoardPID
setSpringBoardPID:
activeConversationForCall:
initWithCallType:callState:copresenceActivityType:
setResolvedDescriptor:
callDurationUpdateTimer
scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:
setCallDurationUpdateTimer:
callDuration
callProviderSupportsSystemControls
conversationStateSupportsSystemControls
callStatusSupportsSystemControls
conversationsChangedForConversationManager:
conversationManager:stateChangedForConversation:
conversationManager:stateChangedForConversation:fromOldConversation:
conversationManager:letMeInRequestStateChangedForConversation:
conversationManager:letMeInRequestStateChangedForConversation:fromOldConversation:
conversationManager:localVideoToggledForConversation:
conversationManager:localVideoToggledForConversation:fromOldConversation:
conversationManager:remoteMembersChangedForConversation:
conversationManager:remoteMembersChangedForConversation:fromOldConversation:
conversationManager:pendingMembersChangedForConversation:
conversationManager:pendingMembersChangedForConversation:fromOldConversation:
conversationManager:kickedMembersChangedForConversation:
conversationManager:kickedMembersChangedForConversation:fromOldConversation:
conversationManager:rejectedMembersChangedForConversation:
conversationManager:rejectedMembersChangedForConversation:fromOldConversation:
conversationManager:otherInvitedHandlesChangedForConversation:
conversationManager:otherInvitedHandlesChangedForConversation:fromOldConversation:
conversationManager:activeRemoteParticipantsChangedForConversation:
conversationManager:activeRemoteParticipantsChangedForConversation:fromOldConversation:
conversationManager:activitySessionsChangedForConversation:
conversationManager:activitySessionsChangedForConversation:fromOldConversation:
conversationManager:oneToOneModeChangedForConversation:
conversationManager:oneToOneModeChangedForConversation:fromOldConversation:
conversationManager:removedActiveConversation:
conversationManager:addedActiveConversation:
conversationManager:didChangeActivatedLinks:
conversationManager:linkChangedForConversation:
conversationManager:linkChangedForConversation:fromOldConversation:
conversationManager:linkInvitedMemberHandlesChangedForConversation:
conversationManager:linkInvitedMemberHandlesChangedForConversation:fromOldConversation:
conversationManager:conversation:requestedScreenShareForParticipant:
serverDisconnectedForConversationManager:
conversationManager:migratingFromConversation:toConversation:
conversationManager:addedActivitySuggestion:
conversationManager:removedActivitySuggestion:
conversationManager:conversation:receivedActivitySessionEvent:
conversationManager:conversation:remoteParticipantWithIdentifier:updatedAudioEnabled:
conversationManager:conversation:remoteParticipantWithIdentifier:updatedVideoEnabled:
conversationManager:changedActivityAuthorizationForBundleIdentifier:
conversationManager:conversation:participant:addedNotice:
conversationManager:conversation:addedMembersLocally:
conversationManager:conversation:buzzedMember:
conversationManager:conversationUpdatedMessagesGroupName:
conversationManager:conversationUpdatedMessagesGroupName:fromOldConversation:
conversationManager:conversation:updatedMessagesGroupPhoto:
conversationManager:updatedIncomingPendingConversations:
conversationManager:trackedPendingMember:forConversationLink:
conversationManager:conversation:launchStateChanged:forActivitySession:
conversationManager:remoteScreenShareAttributesChanged:isLocallySharing:
conversationManager:remoteScreenShareEndedWithReason:
conversationManager:ignoreLMIRequestsChangedForConversation:
conversationManager:conversation:didChangeStateForActivitySession:
T@"<CSDStatusBarResolverDelegate>",W,N
T@"CSDCall",R
T@"STCallingStatusDomainCallDescriptor",R,N
_inCallServiceProcessObserver
_springBoardProcessObserver
_callDurationUpdateTimer
_resolvedDescriptor
_inCallServiceProcessState
_springBoardPID
T@"<CSDProcessObserverProtocol>",R,N,V_inCallServiceProcessObserver
T@"<CSDProcessObserverProtocol>",R,N,V_springBoardProcessObserver
T@"NSTimer",&,N,V_callDurationUpdateTimer
T@"STCallingStatusDomainCallDescriptor",&,N,V_resolvedDescriptor
Tq,N,V_inCallServiceProcessState
T@"NSNumber",N,V_springBoardPID
T@"TUCallCenter",R,N,V_callCenter
T@"<CSDStatusBarResolverDelegate>",W,N,V_delegate
uplinkMutedStatusChanged:
activeConferenceConnectionForIdentifier:
conferenceConnections
isPreparedToStop
setDidPrepareHandler:
invokeDidPrepareIfNecessary:
_prepareConferenceForConferenceConnection:remoteInviteDictionary:
setTransport:
setDidStartHandler:
setDidStopHandler:
activeConference
setConferenceActiveForIdentifier:
invokeDidStartIfNecessary:error:
isHost
setUsingBaseband:
setAudioDisabled:
isAudioDisabled
updateConferenceForIdentifier:isUsingBaseband:disableAudio:
setPreparedToStop:
_conferenceConnectionsForConference:
prepareToStopTimeout
_cleanUpAllConferenceConnectionsForConference:withError:
conferenceConnectionForIdentifier:
_cleanUpConferenceConnection:error:
invokeDidStopIfNecessary:error:
_stopConference:
conferencesAwaitingConnectionClose
_postDidCloseNotificationForConference:
postNotificationName:object:userInfo:
closeConnectionTimeout
_postDidCloseNotificationForConferenceIfNecessary:
T@"CSDRelayConferenceInterface",R,N
setConferenceConnections:
setConferencesAwaitingConnectionClose:
setCloseConnectionTimeout:
setPrepareToStopTimeout:
_conferenceConnections
_conferencesAwaitingConnectionClose
_closeConnectionTimeout
_prepareToStopTimeout
T@"NSMutableArray",&,N,V_conferenceConnections
T@"NSMutableSet",&,N,V_conferencesAwaitingConnectionClose
T@"<CSDAVConference>",R,N
Td,N,V_closeConnectionTimeout
Td,N,V_prepareToStopTimeout
URLForDirectory:inDomain:appropriateForURL:create:error:
URLByAppendingPathComponent:isDirectory:
URLByStandardizingPath
initWithName:fileManager:error:
lastPathComponent
urlForFilename:
fileManager
fileExistsAtPath:
getResourceValue:forKey:error:
initWithDomain:code:userInfo:
initWithName:error:
createLinkIfNecessaryWithFilename:toURL:error:
removeLinksForFilenamesNotInArray:error:
setURL:
setFileManager:
_URL
_fileManager
T@"NSFileManager",&,N,V_fileManager
T@"NSURL",&,N,V_URL
accountsSupportSecondaryCalling
displayMismatchedAccountsNotification
pinExchangeDelegate
sendIDSAction:toDevice:
allIDSTelephonyDevices
uniqueID
idsDeviceFromUniqueID:
sendApprovalDisplayPinToDevice:
removeErrorNotifications
_numberForKey:
numberFromString:
isEqualToNumber:
displayPinErrorNotification
sendApprovalResponseToDevice:enteredCorrectly:wasCancelled:
pendingCodesToDevicesForApproval
randomSixDigitCode
sendIDSAction:toDevices:
_FTCopyGzippedData
dictionaryWithObject:forKey:
__imSetFromArray
sendMessage:fromAccount:toDestinations:priority:options:identifier:error:
setOutgoingPinRequestIdentifier:
displayErrorNotificationWithMessage:
_FTDecompressData
isHSATrusted
outgoingPinRequestIdentifier
normalizedPhoneNumberHandleForValue:isoCountryCode:
isRelayCallingEnabledForDeviceWithID:
sendPinCodeAndPromptForResponseToDevice:forSenderIdentityUUID:
cancelPinRequests
handlePINCodeEnteredSuccessfully:canceled:fromDevice:isPrimaryDevice:
initWithDelegate:
requestPinFromDevice:
displaySlotsFullNotification
setPendingCodesToDevicesForApproval:
setPinExchangeDelegate:
_pendingCodesToDevicesForApproval
_pinExchangeDelegate
_outgoingPinRequestIdentifier
T@"NSMutableDictionary",&,V_pendingCodesToDevicesForApproval
T@"<CSDPinExchangeDelegate>",&,V_pinExchangeDelegate
T@"NSString",C,V_outgoingPinRequestIdentifier
initWithRelayService:thumperService:
callCapabilitiesClientXPCInterface
callCapabilitiesServerXPCInterface
initWithBundleIdentifiers:queue:
processObserver
clients
deviceListChanged:
deviceCapabilityChanged:
_initializePairedHostDeviceState
_updateState
thumperCapabilitiesMonitor
telephonyCallCapabilities
accountsController
pairedHostDeviceState
xpcListener
capabilityStateUpdated:
_isWatchDevice
setPairedHostDeviceState:
_updateDynamicCapabilitiesAndUpdateClients
_updateClientsWithState
_savePairedHostDeviceState
_setRelayCallingEnabled:
_setRelayCallingEnabled:forDeviceWithID:
_setWiFiCallingEnabled:forSenderIdentityWithUUID:
_setWiFiCallingRoamingEnabled:forSenderIdentityWithUUID:
_setVoLTECallingEnabled:forSenderIdentityWithUUID:
_setThumperCallingEnabled:forSenderIdentityWithUUID:
_setThumperCallingAllowed:onSecondaryDeviceWithID:forSenderIdentityWithUUID:
_setThumperCallingAllowedOnDefaultPairedDevice:forSenderIdentityWithUUID:
endEmergencyCallbackMode
invalidateAndRefreshWiFiCallingCapabilitiesForSenderIdentityWithUUID:
invalidateAndRefreshThumperCallingCapabilitiesForSenderIdentityWithUUID:
_primaryThumperAccountRequiringAvailableDeviceSlots
thumperService
deviceWithUniqueID:
thumperPinExchangeController
_updateHostingAndDisplayingSupport
senderIdentityCapabilitiesStateByUUID
thumperCallingCapabilitiesState
secondaryThumperAccountForAccountID:
senderIdentityUUID
approvedSecondaryDeviceIDs
_updateCallAvailability
_updateRelayCapabilities
_updateCTCapabilities
_supportsPrimaryCalling
setSupportsPrimaryCalling:
_supportsBasebandCalling
setSupportsBasebandCalling:
_supportsCellularData
setSupportsCellularData:
_supportsDisplayingTelephonyCalls
setSupportsDisplayingTelephonyCalls:
_supportsDisplayingFaceTimeAudioCalls
setSupportsDisplayingFaceTimeAudioCalls:
_supportsDisplayingFaceTimeVideoCalls
setSupportsDisplayingFaceTimeVideoCalls:
isTelephonyDevice
_defaultOverrideForDisableDefault:forceDefault:
supportsCellularData
inProcess_isCallingSupported
faceTimeSupported
setFaceTimeAudioAvailable:
setFaceTimeVideoAvailable:
areCapabilitiesValid
setCtCapabilitiesValid:
isEmergencyCallbackModeEnabled
setEmergencyCallbackModeEnabled:
isEmergencyCallbackPossible
setEmergencyCallbackPossible:
wiFiCallingCapabilitiesState
setSupported:
voLTECallingCapabilitiesState
_supportsThumperCallingUsingSenderIdentityCapabilitiesState:
_isThumperCallingAllowedForCurrentDeviceUsingSenderIdentityCapabilitiesState:
setApproved:
isRelayCallingEnabled
isApproved
setEnabled:
supportsBasebandCalling
setSupportsSimultaneousVoiceAndData:
setSenderIdentityCapabilitiesStateByUUID:
_primaryThumperAccountRequiringMatchingCallerID
isThumperCallingSupportedForAccountID:
setThumperCallingAssociatedAccountID:
setWiFiCallingEnabled:forSenderIdentityWithUUID:
setVoLTECallingEnabled:forSenderIdentityWithUUID:
isRoamingEnabled
setWiFiCallingRoamingEnabled:forSenderIdentityWithUUID:
setThumperCallingEnabled:forSenderIdentityWithUUID:
cloudCallingDevices
telephonySubscriptionLabelIdentifierForSenderIdentityUUID:
isServiceEnabledForTelephonySubscriptionLabelIdentifier:
supportsRelayCalling
localDeviceID
_primaryThumperAccountRequiringMatchingCallerID:requiringAvailableDeviceSlots:
primaryThumperAccountUsingDevices:outgoingCallerIDURI:requireMatchingCallerIDURI:requireAvailableDeviceSlots:
_supportsRelayCalling
setSupportsRelayCalling:
_accountsMatchForSecondaryCalling
setAccountsMatchForSecondaryCalling:
relayService
setRelayCallingFeaturesEnabled:
isNearby
setRelayCallingAvailability:
setSupportsFaceTimeAudioRelayCalling:
setSupportsFaceTimeVideoRelayCalling:
setAccountsSupportSecondaryCalling:
_isAudioAccessoryDevice
_relayCallingEnabledDefault
accountsMatchForSecondaryCalling
_deviceExistsThatSupportsRelayCallingWithoutLocalRelayCallingEnabled
setSupportsTelephonyRelayCalling:
_relayCallingDisabledForDeviceIDDefault
setRelayCallingDisabledForDeviceID:
setOutgoingRelayCallerID:
_cloudCallingDevices
setCloudCallingDevices:
defaultPairedDeviceExists
telephonyCapableDeviceExists
relayCapableDeviceExists
sortedArrayUsingComparator:
supportsRelayCallingWithoutLocalRelayCallingEnabled
_setRelayCallingEnabledDefault:
relayCallingDisabledForDeviceID
_setRelayCallingEnabledDefault:forDeviceWithID:
setThumperCallingAllowedOnDefaultPairedDevice:forSenderIdentityWithUUID:
invalidateAndRefreshWiFiCallingProvisioningURLForSenderIdentityWithUUID:
invalidateAndRefreshThumperCallingProvisioningURLForSenderIdentityWithUUID:
cancelPinRequestFromPrimaryDevice
callCapabilitiesState:
telephonyCallCapabilitiesChanged
T@"CSDCallCapabilities",R,N
thumperPushHandler
_xpcListener
_processObserver
_accountsController
_telephonyCallCapabilities
_thumperPushHandler
_thumperPinExchangeController
_thumperCapabilitiesMonitor
_relayService
_thumperService
_pairedHostDeviceState
T@"NSXPCListener",R,N,V_xpcListener
T@"<CSDProcessObserverProtocol>",R,N,V_processObserver
T@"CSDAccountsController",R,N,V_accountsController
T@"CSDTelephonyCallCapabilities",R,N,V_telephonyCallCapabilities
T@"CSDThumperPushHandler",R,N,V_thumperPushHandler
T@"CSDPinExchangeController",R,N,V_thumperPinExchangeController
T@"CSDThumperCapabilitiesMonitor",R,N,V_thumperCapabilitiesMonitor
T@"<CSDIDSService>",R,N,V_relayService
T@"<CSDIDSService>",R,N,V_thumperService
T@"TUCallCapabilitiesState",&,N,V_state
T@"TUCallCapabilitiesState",&,N,V_pairedHostDeviceState
T@"TUCallCapabilitiesState",R,N
isValid
setDialRequest:
isDialAssisted
setWasDialAssisted:
audioSourceIdentifier
initWithDisplayContext:call:serialQueue:
setDynamicDisplayContext:
dynamicDisplayContext
setCompletionHandler:
relayClientTransport
transitionStatus
setTransitionStatus:
wasDialAssisted
faceTimeIDStatus
setFaceTimeIDStatus:
isKnownCaller
setUplinkWasExplicitlyMuted:
shouldOverrideCallStatus
callStatusFromOverride
_refreshFaceTimeIDSStatusIfNecessary
faceTimeIDStatusRefreshed
setFaceTimeIDStatusRefreshed:
currentIDStatusForDestination:service:listenerID:queue:completionBlock:
initWithCall:contactIdentifier:serialQueue:
initWithUUID:
setOnHold:
setHasEnded:
setHostedOnCurrentDevice:
hasAudioInterruption
setHasAudioInterruption:
displayContextChanged:
disconnect
updateWithProxyCall:
setRelayClientTransport:
setIsKnownCaller:
silencingUserInfo
cxCall
hasAudioFinished
setHasAudioFinished:
bytesOfDataUsed
setBytesOfDataUsed:
expectedRelayClientDestination
setExpectedRelayClientDestination:
setSilencingUserInfo:
_isKnownCaller
_joinedFromLink
_uplinkWasExplicitlyMuted
_hasAudioInterruption
_hasAudioFinished
_faceTimeIDStatusRefreshed
_junkConfidence
_identificationCategory
_dialRequest
_dateStartedOutgoing
_bytesOfDataUsed
_uplinkMutedSetTime
_remoteUplinkMutedSetTime
_activeRemoteParticipants
_relayClientTransport
_expectedRelayClientDestination
_dynamicDisplayContext
_silencingUserInfo
T@"TUDialRequest",&,N,V_dialRequest
T@"TUDynamicCallDisplayContext",&,N,V_dynamicDisplayContext
TB,N,V_faceTimeIDStatusRefreshed
T@"NSMutableDictionary",&,N,V_silencingUserInfo
T@"<CSDCallDelegate>",W,N,V_delegate
T@"CSDCallDataSource",W,N,V_dataSource
T@"NSDate",&,N,V_dateStartedOutgoing
TB,N,V_uplinkWasExplicitlyMuted
TB,N,V_isSendingAudio
TB,N,V_hasAudioInterruption
TB,N,V_hasAudioFinished
TB,R,N,GisOneToOneModeEnabled,V_oneToOneModeEnabled
T{?=[8I]},R,N
T@"CXCall",R,N
Tq,N,V_bytesOfDataUsed
TQ,R,N,V_initialLinkType
Tq,N,V_identificationCategory
Tq,N,V_junkConfidence
TB,N,V_isKnownCaller
TB,N,V_joinedFromLink
Td,N,V_uplinkMutedSetTime
Td,N,V_remoteUplinkMutedSetTime
T@"NSSet",C,N,V_activeRemoteParticipants
T@"CSDIDSTransport",&,N,V_relayClientTransport
T@"IDSDestination",&,N,V_expectedRelayClientDestination
audioDeviceController
_initializeAudioRouteCollections
_initializeAutomaticCarDNDStatusIfNecessary
_updatePickableRoutes
_updateCarPlayDeviceConnected
sharedAVSystemController
setAttribute:forKey:error:
pickableRoutesDidChangeNotification:
preferredExternalRouteDidChangeNotification:
carPlayIsConnectedChanged:
mediaServicesWereResetNotification:
_audioRouteCollectionForCall:
isAnyRouteAvailableWithUniqueIdentifier:
preferredRoute
isCarPlayDeviceConnected
audioRouteCollections
isCarPlayOrInEarTriangleRouteAvailable
preferredAndActiveRoute
isAnyRouteAvailableWithBluetoothEndpointType:
_postNotificationName:
updatePickableRoutes
initWithCategory:mode:
isPreferredDevice
setAudioRouteCollections:
automaticCarDNDStatus
fetchAutomaticDNDAssertionWithReply:
setCarModeActive:
setStatusChangeObserver:
setAutomaticCarDNDStatus:
attributeForKey:
setCarPlayDeviceConnected:
audioDeviceControllerDeviceListChanged:
audioDeviceControllerMutedTalkerDidStart:
audioDeviceControllerMutedTalkerDidEnd:
isAnyRouteAvailableWithUniqueIdentifier:forCall:
preferredAndActiveRouteForCall:
preferredRouteForCall:
isEligibleRouteAvailableForCall:
isAnyVehicleRouteAvailableForCall:
isEligibleRouteAvailable
isCarModeActive
isAnyVehicleRouteAvailableForAnyCall
isAnyBluetoothHeadphoneRouteAvailableForAnyCall
eligibleRouteAvailable
TB,R,N,GisEligibleRouteAvailable
carModeActive
TB,R,N,GisCarModeActive
carPlayRouteAvailable
TB,R,N,GisCarPlayRouteAvailable
anyVehicleRouteAvailableForAnyCall
TB,R,N,GisAnyVehicleRouteAvailableForAnyCall
anyBluetoothHeadphoneRouteAvailableForAnyCall
TB,R,N,GisAnyBluetoothHeadphoneRouteAvailableForAnyCall
_isAnyAudioDevicePreferred
_carPlayDeviceConnected
_carModeActive
_audioRouteCollections
_automaticCarDNDStatus
T@"NSDictionary",C,N,V_audioRouteCollections
carPlayDeviceConnected
TB,N,GisCarPlayDeviceConnected,V_carPlayDeviceConnected
T@"CARAutomaticDNDStatus",&,N,V_automaticCarDNDStatus
TB,N,GisCarModeActive,V_carModeActive
initWithUUID:andAccountID:andSlot:
slotID
csd_isTelephony
csd_isThumper
csd_isUnknown
csd_telephony
TB,R,N,Gcsd_isTelephony
csd_thumper
TB,R,N,Gcsd_isThumper
csd_unknown
TB,R,N,Gcsd_isUnknown
hasLightweightPrimary
_lightweightPrimary
T@"CSDMessagingHandle",&,N,V_lightweightPrimary
addRemoteMembers:
addActiveRemoteParticipants:
addActivitySessions:
addActiveLightweightParticipants:
setUUIDString:
remoteMembersCount
clearRemoteMembers
remoteMembersAtIndex:
activeRemoteParticipantsCount
clearActiveRemoteParticipants
activeRemoteParticipantsAtIndex:
activitySessionsCount
clearActivitySessions
activitySessionsAtIndex:
setReportData:
activeLightweightParticipantsCount
clearActiveLightweightParticipants
activeLightweightParticipantsAtIndex:
remoteMembersType
activeRemoteParticipantsType
activitySessionsType
activeLightweightParticipantsType
hasUUIDString
setHasLocallyCreated:
hasLocallyCreated
hasInitiator
hasLocalMember
hasReportData
hasConversationProviderIdentifier
uUIDString
reportData
conversationProviderIdentifier
_activeLightweightParticipants
_activitySessions
_conversationProviderIdentifier
_reportData
_uUIDString
T@"NSString",&,N,V_uUIDString
TB,N,V_locallyCreated
T@"CSDMessagingHandle",&,N,V_initiator
T@"CSDMessagingConversationMember",&,N,V_localMember
T@"NSMutableArray",&,N,V_remoteMembers
T@"NSMutableArray",&,N,V_activeRemoteParticipants
T@"NSMutableArray",&,N,V_activitySessions
T@"CSDMessagingConversationLink",&,N,V_link
T@"CSDMessagingConversationReport",&,N,V_reportData
T@"NSString",&,N,V_conversationProviderIdentifier
T@"NSMutableArray",&,N,V_activeLightweightParticipants
setHasTimebase:
hasTimebase
_timebase
_conversationID
T@"NSString",&,N,V_conversationID
Td,N,V_timebase
initWithQueue:reportingController:persistenceController:linkManager:cpApplicationController:featureFlags:
setMessenger:
weakToStrongObjectsMapTable
initWithDelegate:queue:
addObserver:withQueue:
initWithDataSource:queue:
initWithFeatureFlags:
addDelegate:withQueue:
retreiveActiveConversations
removeNonIndefiniteLinks
linkManager
validateAllLinks
setupPendingConversationCleanupTimer
cpApplicationController
idsFromID
sendData:fromAccount:toDestinations:priority:options:identifier:error:
mutableSendDataCallbacksByRequestIdentifiers
_runCallbackIfNecessaryForMessage:
pushTokenForSelf
aliases
activeLocalHandles
isValidLocalHandle:activeLocalHandles:
isHandleLocalPseudonym:
isHandleStringLocalPseudonym:
destinationIdIsPseudonym
initWithPrefixedURI:
pseudonymForPseudonymURI:
idsDestinations
isValidLocalHandle:
groupSessionProviderCreationBlock
accountWithCallerID:
initWithGroupSessionProvider:
conversationCreationBlock
reportingController
createConversationReportingSession:
mutableConversationsByUUID
persistenceController
updateConversation:
mutablePendingConversationsByPseudonym
conversationWithGroupUUID:
isEquivalentToConversationLink:
activatedConversationLinks
findConversationLinkMatchingPseudonym:
createConversationWithUUID:groupUUID:messagesGroupUUID:locallyCreated:localMember:initiator:remoteMembers:pendingMembers:otherInvitedHandles:remotePushTokens:lightweightMembers:activities:link:report:fromStorage:video:provider:
createActivitySessionOnConversation:
delegateToQueue
conversationManager:conversation:receivedMessage:fromHandle:withUpdate:
conversationManager:reportedNewIncomingConversation:fromHandle:
conversationManager:removedConversationWithUUID:
_incomingPendingConversationsByGroupUUID
conversationManager:updateIncomingPendingConversationsByGroupUUID:
initWithDescriptor:
notifyDelegatesOfChangedLink:conversation:
_linksEnabled
conversationManager:conversationChanged:
conversationManager:activatedConversationLinksChanged:
activatedLinksWithCompletionHandler:
supportsScreenSharing
conversationManager:reportedLetMeInRejectedForPendingConversation:
conversationManager:reportedInvalidLinkForPendingConversation:
participantWithCSDConversationParticipant:
addActiveParticipants:
sendData:onConversation:toHandle:isBlobResponse:
activeParticipants
csdConversationParticipant
initWithSessionUUID:originator:type:
conversationNoticeManger
stringGUID
hasEncryptedMessage
hasEnclosedEncryptedType
enclosedEncryptedType
handleEncryptedLetMeInRequest:fromHandle:context:
handleEncryptedLetMeInResponse:fromHandle:context:
csd_pseudonym
normalizedGenericHandleForValue:
encryptedMessage
handleReceivedLetMeInRequest:toPseudonym:fromHandle:responseKeyData:
decryptLetMeInRequest:pseudonym:fromHandle:completionHandler:
pendingConversationWithPseudonym:
isExhausted
decryptLetMeInResponse:pseudonym:requestorKeyAgreement:
handleReceivedLetMeInResponse:pendingConversation:fromHandle:
originator
deviceSupport
receivedLetMeInRequestForConversation:
sendLetMeInResponseToPendingMember:forConversation:usingResponseKeyData:approved:callback:
letMeInResponseInvitationPreferences
sendInvitationMessageToMember:forConversation:includeAllAttributes:invitationPreferences:additionalOptions:
webNicknameLengthLimit
substringToIndex:
initWithHandle:nickname:joinedFromLetMeIn:
pendingMembershipTracker
handleNewPendingMember:responseKey:forConversation:withLink:
getLinkDescriptorWithPseudonym:includeInactive:completionHandler:
isEqualToConversationLink:
notifyDelegatesOfLetMeInRejectedForPendingConversation:
storeReceivedLink:fromHandle:isUpdate:completionHandler:
removeInvalidatedLink:completionHandler:
letMeInDelegationHandle
sharedPrivacyManager
isIncomingCommunicationBlockedForHandle:
letMeInDelegationUUID
handleDelegatedPendingMember:forConversation:withGroupUUID:from:transactionUUID:
handleRemoteApprovalOfMember:forConversation:from:transactionUUID:
handleRemoteRejectionOfMember:forConversation:from:transactionUUID:
creationDate
sendDataBlock
addEntriesFromDictionary:
sendData:onConversation:toDestinationID:fromMember:additionalOptions:isBlobResponse:callback:
sendData:onConversation:toMember:additionalOptions:
broadcastData:onConversation:additionalOptions:
temporaryFilePath
writeToFile:options:error:
broadcastFile:onConversation:additionalOptions:
removeItemAtPath:error:
memberExistsForHandle:members:
participantUpdateType
clientContextData
tuLightweightMembers
memberExistsForParticipantDestination:members:
tuConversationMembers
pendingMembersByGroup
initWithUUID:groupUUID:
conversationLinkDescriptorsWithGroupUUIDs:error:
conversationsByUUIDIncludingStorageConversations:
mutablePseudonymsByCallUUID
dictionaryWithDictionary:
cpActivitySuggestions
activitySuggestions
autoSharePlayEnabled
authorizedBundleIdentifiers
observerToQueue
lockStateObserver
conversationWithGroupUUID:orRepresentedByRemoteMembers:andLink:
retrievePendingMembersFor:
providerForIdentifier:
enumerateActiveConversations:
removeAllConversations
localCallerID
createConversationIfNecessaryWithUUID:groupUUID:messagesGroupUUID:locallyCreated:localMember:remoteMembers:pendingMembers:otherInvitedHandles:remotePushTokens:lightweightMembers:link:activities:video:provider:
mutablePseudonymsByRequestIdentifiers
encryptLetMeInRequest:link:completionHandler:
setIsLetMeInApproved:
encryptLetMeInResponse:pseudonym:responseKeyData:
sentLetMeInRequestForConversation:isApproved:
addAddedMembers:
sendData:onConversation:toMember:
setScreenEnabled:screenShareAttributes:forConversationWithUUID:
screenSharingActivityManager
startActivitySessionFor:with:
stopActivitySession
broadcastAttributes:
addRemoteMembers:otherInvitedHandles:toConversationWithUUID:
activeConversation
_displaySharePlayUnableToStartWithMessage:
conversationManager:conversationUpdateMessagesGroupPhoto:
currentServerTimeDate
initWithActivity:locallyInitiated:timestamp:isFirstJoin:
postSessionStartedForSession:originator:conversation:
sendMessage:forConversation:withActivitySession:
broadcastImageForSession:onConversation:
activityAuthorizationManager
requestAuthorizationForApplicationWithBundleIdentifier:preparing:completionHandler:
addActivityWithActivity:error:
conversationManager:activitySuggestionsChanged:
removeActivityWithActivity:error:
removeActivitiesWithBundleID:
setAuthorization:forBundleID:
setAutoSharePlayEnabled:
requestAuthorizationForApplicationLaunchWithActivity:completionHandler:
revokeBackgroundPiPAuthorizationForBundleID:
updateActivitySessionWithUUID:activity:
hasImage
_FTOptionallyDecompressData
updateActivityImage:
incomingCallInvitationPreferences
broadcastData:onConversation:
latestRemoteAttributes
getActiveLinksWithCreatedOnly:completionHandler:
_getActivatedLinkWithHandle:updateGroupUUID:updateInvitedHandles:
setConversationLink:forConversation:replyToCompletionHandler:
generateLinkWithGroupUUID:invitedHandles:originatorHandle:linkLifetimeScope:completionHandler:
getInactiveLinkForHandle:
activateLinkForPseudonym:updateGroupUUID:updateInvitedHandles:
generateInactiveLinkFor:afterActivation:
generateAllInactiveLinksFor:
sendMessagesForCreatedOrChangedLink:conversation:messageType:
generateLinkWithInvitedHandles:originatorHandle:linkLifetimeScope:completionHandler:
addInvitedHandles:pseudonym:completionHandler:
sendMessagesForInvalidatedLink:
invalidateLinkWithPseudonym:completionHandler:
renewLinkWithPseudonym:expirationDate:completionHandler:
checkLinkValidityWithPseudonym:completionHandler:
getInactiveLinkForHandle:completionHandler:
activateLinkForPseudonym:completionHandler:
setLinkName:forLink:completionHandler:
setJoinedFromLetMeIn:
handleLocalApprovalOfMember:forConversation:
handleLocalRejectionOfMember:forConversation:
fetchUpcomingNoticeFromQueue
activateConversationNoticeWithActionURL:bundleIdentifier:
removeConversationNoticeWithUUID:
removeConversation:
clearPendingMembershipFor:
notifyDelegatesOfRemovedConversationWithUUID:
pendingConversationCleanupTimer
setPendingConversationCleanupTimer:
cleanupExpiredPendingConversations
timeIntervalSinceNow
conversationManager:conversation:addedActiveParticipant:
conversationManager:conversation:removedActiveParticipant:
conversationManager:conversation:mediaPrioritiesDidChangeForParticipant:
sendData:onConversation:toDestinationID:
conversationManager:conversation:failedWithContext:
setScreenEnabled:forConversationWithUUID:
conversationManager:conversation:appLaunchState:forActivitySession:
conversationManager:conversation:changedBytesOfDataUsed:
terminatingHandle
postEndEventForSession:originator:conversation:
notifyDelegatesOfInvalidLinkForPendingConversation:
initWithUUID:handle:
outgoingResponseIdentifier
dataWithContentsOfURL:
_service:account:incomingData:fromID:context:attemptCount:
gondolaEnforceDelegationIntent
publicIntentAction
handleEncryptedMessageWithin:fromHandle:context:
handleReceivedLMIDelegateMessage:fromHandle:
handleReceivedLinkCreatedOrChangedMessage:fromHandle:
handleReceivedLinkInvalidatedMessage:fromHandle:
hasConversationGroupUUIDString
fromServerStorage
messageRetryMaxAttempts
messageRetryIntervalMillis
notifyDelegatesOfMessage:fromHandle:forConversation:withUpdate:
handleConversation:receivedAVCBlobRequest:fromHandle:
handleConversation:receivedAVCBlobResponse:fromHandle:
handleConversation:receivedActivitySession:fromHandle:
handleConversation:removeActivitySession:fromHandle:
handleConversation:updateActivity:fromHandle:
handleConversation:updateActivityImage:fromHandle:
processGroupSessionParticipantUpdate:
participantDestinationID
memberExistsForParticipantDestination:groupSessionParticipantUpdate:
addedMembersCount
processJoinUpdate:fromHandle:
handleParticipantWithIdentifier:leftConversationWithGroupUUID:fromHandle:
processUpdateMembersUpdate:fromHandle:
processParticipantDataUpdate:fromHandle:
participantData
allAliases
setLocalAccountHandle:
handleParticipants:joinedConversationWithUpdate:joinContext:fromHandle:
pushToken
arrayByAddingObjectsFromArray:
addedMembers
otherInvitedTUHandles
maximumNumberOfInvitedMembers
conversationWithGroupUUID:orMemberIdentifiers:orRemoteMembers:andLink:andVideo:
fromServer
gondolaNotifications
invitationPreferencesCount
transitionConversationWithUUID:toNewGroupUUID:remoteMembers:localMember:lightweightMembers:fromHandle:
shouldShowInvitationRingingUIForHandle:
notifyDelegatesOfNewConversation:fromHandle:
removePendingMemberMatchingActiveParticipant:conversation:
prepareAdditionOfActiveParticipant:toInvitedMembersForLinkOnConversation:
stopTrackingPendingMember:forConversation:triggeredLocally:
addInvitedMemberHandles:toConversationLink:completionHandler:
removeObjectsInArray:
notifyDelegatesOfChangedLinkDescriptors:
handleRemovedLinkDescriptors:
conversationLinkForGroupUUID:
notifyDelegatesOfTrackedPendingMember:forConversationLink:
notifyDelegatesOfUpdatePendingConversations
noteDismissedHandle:completionHandle:
_sendDelegationMessageTo:conversation:link:transactionUUID:forMember:withMessage:
setLetMeInDelegationHandle:
setLetMeInDelegationUUID:
notifyDelegatesOfRemoteScreenShareAttributes:isLocallySharing:
startObservingSessions
notifyDelegatesOfRemoteScreenShareEndedWithReason:
conversationManager:activityAuthorizationChangedForBundleIdentifier:
conversationManager:sharePlayAllowedChanged:
displaySharePlayUnableToStartAlert
allActiveConversationParticipantsSupportSharePlay
sendDelegationMessageTo:conversation:link:transactionUUID:forMember:
sendDelegationResponseMessageTo:conversation:transactionUUID:forMember:withResponse:
pendingMembershipTracker:willAdd:to:using:
pendingMembershipTracker:willNotAdd:to:using:
pendingMembershipTracker:didTrack:forGroupUUID:
noticeManager:conversation:participant:addedNotice:
linkManager:updatedLinkDescriptorsFromSync:
linkManager:removedLinkDescriptorsFromIDSSignal:
linkManager:updatedLinkDescriptorsFromIDSSignal:
linkManager:removedLinkDescriptorsFromValidityCheck:
screenSharingActivityManager:receivedUpdatedRemoteAttributes:isLocallySharing:
screenSharingActivityManager:invalidatedSessionWithReason:wasLocallySharing:
applicationPolicyManager:authorizationChangedForBundleIdentifier:
systemStateObserver:sharePlayAllowedStateChanged:
addRemoteMembers:toConversationWithUUID:
addActivitySuggestion:
removeActivitySuggestion:
removeActivitySuggestionsForBundleID:
createActivitySession:onConversationWithUUID:withCompletion:
setActivityAuthorization:forBundleID:
leaveActivitySession:onConversationWithUUID:
requestActivityAuthorizationForApplicationWithBundleIdentifier:completionHandler:
updateParticipantPresentationContexts:onConversationWithUUID:
buzzMember:conversationUUID:
kickMember:conversationUUID:
setDownlinkMuted:forRemoteParticipantsOnConversationWithUUID:
revokeBackgroundPipAuthorizationsForBundleID:
conversationsByUUID
conversationsByGroupUUID
activityAuthorizedBundleIdentifiers
T@"CPActivityAuthorizationManager",R,N
T@"CPSystemStateObserver",R,N
initWithQueue:reportingController:persistenceController:linkManager:featureFlags:
senderIdentityUUIDForCallerIDHandle:
pendingConversationUUIDWithPseudonym:
removePendingConversationWithPseudonym:
removeAllPendingConversations
conversationRepresentedByRemoteMembers:andLink:
activeApprovedConversationWithLink:
conversationLinkForPseudonym:
sendData:onConversation:toDestinationID:fromMember:
sendData:onConversation:toHandle:
incomingPendingConversationsByGroupUUID
pseudonymsByCallUUID
activityAuthorizedBundleIdentifierState
removeDelegate:
findOrCreateConversationWithGroupUUID:messagesGroupUUID:remoteMembers:otherInvitedHandles:localMember:remotePushTokens:link:activities:video:conversationProvider:
joinExistingConversationWithUUID:context:
initiatePendingConversationForLink:localMember:isVideoEnabled:
requestLetMeInApprovalForPseudonym:
updateLetMeInRequestState:addLink:forConversationWithUUID:
startAudioForConversationWithUUID:
leaveConversationWithUUID:
leaveAllConversations
addPseudonym:forCallUUID:
removePseudonym:forCallUUID:
setUplinkMuted:forConversationWithUUID:
setVideo:forConversationWithUUID:
sendVideoUpgradeMessageforConversationWithUUID:
setVideoEnabled:forConversationWithUUID:
setUplinkMuted:forPendingConversationWithUUID:
setVideoEnabled:forPendingConversationWithUUID:
setVideoPaused:forConversationWithUUID:
setAudioPaused:forConversationWithUUID:
setRelaying:forConversationWithUUID:
isConversationWithUUIDRelaying:
presentationStateForConversationWithUUID:
setPresentationState:forConversationWithUUID:
setPresentationRect:forConversationWithUUID:
setScreenShareAttributes:forConversationWithUUID:
removeRemoteMembers:fromConversationWithUUID:
updateMessagesGroupName:onConversationWithUUID:
updateMessagesGroupPhotoOnConversationWithUUID:
launchApplicationForActivitySessionUUID:completionHandler:
requestScreenShareFromMember:conversationUUID:
processUpdatedNickname:forHandle:conversationUUID:
processScreenShareRequestFromParticipant:conversationUUID:
setAudioEnabled:forRemoteParticipantWithIdentifier:conversationUUID:
setVideoEnabled:forRemoteParticipantWithIdentifier:conversationUUID:
updateLocalMemberNickname:conversationUUID:
getLatestRemoteScreenShareAttributesWithCompletionHandler:
generateLinkForConversationUUID:completionHandler:
generateLinkWithInvitedMemberHandles:linkLifetimeScope:completionHandler:
invalidateLink:completionHandler:
renewLink:expirationDate:reason:completionHandler:
checkLinkValidity:completionHandler:
getInactiveLinkWithCompletionHandler:
activateLink:completionHandler:
setLinkName:forConversationLink:completionHandler:
approvePendingMember:forConversationUUID:
rejectPendingMember:forConversationUUID:
setIgnoreLetMeInRequests:forConversationUUID:
fetchUpcomingNoticeWithCompletionHandler:
setMessagesGroupName:onConversationWithUUID:
setPendingMembershipTracker:
setDelegateToQueue:
setObserverToQueue:
setCpActivitySuggestions:
setCallProviderManager:
setLinkManager:
setFeatureFlags:
setGroupSessionProviderCreationBlock:
setDeviceSupport:
setConversationCreationBlock:
setSendDataBlock:
setActiveLocalHandles:
setLocalCallerID:
setActivityAuthorizationManager:
_pendingMembershipTracker
_mutableConversationsByUUID
_mutablePendingConversationsByPseudonym
_mutablePseudonymsByCallUUID
_mutablePseudonymsByRequestIdentifiers
_mutableSendDataCallbacksByRequestIdentifiers
_pendingConversationCleanupTimer
_delegateToQueue
_observerToQueue
_cpActivitySuggestions
_screenSharingActivityManager
_persistenceController
_lockStateObserver
_linkManager
_reportingController
_conversationNoticeManger
_groupSessionProviderCreationBlock
_deviceSupport
_conversationCreationBlock
_sendDataBlock
_activeLocalHandles
_localCallerID
_cpApplicationController
_activityAuthorizationManager
T@"CSDIDSService",&,N,V_service
T@"CSDPendingMembershipTracker",&,N,V_pendingMembershipTracker
T@"NSMutableDictionary",R,N,V_mutableConversationsByUUID
T@"NSMutableDictionary",R,N,V_mutablePendingConversationsByPseudonym
T@"NSMutableDictionary",R,N,V_mutablePseudonymsByCallUUID
T@"NSMutableDictionary",R,N,V_mutablePseudonymsByRequestIdentifiers
T@"NSMutableDictionary",R,N,V_mutableSendDataCallbacksByRequestIdentifiers
T@"NSObject<OS_dispatch_source>",&,N,V_pendingConversationCleanupTimer
T@"NSMapTable",&,N,V_delegateToQueue
T@"NSMapTable",&,N,V_observerToQueue
T@"CPActivitySuggestions",&,N,V_cpActivitySuggestions
T@"CSDScreenSharingActivityManager",R,N,V_screenSharingActivityManager
T@"CSDConversationPersistenceController",R,N,V_persistenceController
T@"CSDDeviceLockStateObserver",R,N,V_lockStateObserver
T@"TUCallProviderManager",&,N,V_callProviderManager
T@"CSDConversationLinkManager",&,N,V_linkManager
T@"CSDReportingController",R,N,V_reportingController
T@"<TUFeatureFlags>",&,N,V_featureFlags
T@"CSDConversationNoticeManager",R,N,V_conversationNoticeManger
T@"CSDSharedConversationServerBag",&,N,V_serverBag
T@?,C,N,V_groupSessionProviderCreationBlock
T@"FTDeviceSupport",&,N,V_deviceSupport
T@?,C,N,V_conversationCreationBlock
T@?,C,N,V_sendDataBlock
T@?,C,N,V_activeLocalHandles
T@?,C,N,V_localCallerID
T@"CPApplicationController",R,N,V_cpApplicationController
T@"CPActivityAuthorizationManager",&,N,V_activityAuthorizationManager
setLocalParticipantUUID:
setCallerId:
handleTypeForTUHandle:
setUniqueId:
setDuration:
setMediaType:
setServiceProvider:
dateWithTimeIntervalSinceNow:
setDate:
setRead:
setDisconnectedCause:
filteredOutReason
setFilteredOutReason:
isJunk
setCallerNetworkName:
setCallerIdAvailability:
setTimeToEstablish:
providerForRecentCall:
predicateWithFormat:
predicateForFilteringOutFaceTimeAudioCalls
localParticipantUUID
outgoingLocalParticipantUUID
setOutgoingLocalParticipantUUID:
normalizedEmailAddressHandleForValue:
initWithBundleIdentifier:allowPlaceholder:error:
UIBackgroundModes
objectForKey:ofClass:valuesOfClass:
executableURL
T@"NSString",R
T@"NSURL",R
setHasProtoWantsVideo:
setOBSOLETEProtoMomentsAvailable:
setHasOBSOLETEProtoMomentsAvailable:
hasOBSOLETEProtoMomentsAvailable
setHasProtoSenderMuteUplink:
hasProtoSenderMuteUplink
setHasProtoShouldSuppressInCallUI:
hasProtoShouldSuppressInCallUI
setHasProtoMomentsV2Available:
hasProtoMomentsV2Available
oBSOLETEProtoMomentsAvailable
_protoUpgradeSessionUUID
_oBSOLETEProtoMomentsAvailable
_protoMomentsV2Available
_protoSenderMuteUplink
_protoShouldSuppressInCallUI
_protoWantsVideo
TB,N,V_protoWantsVideo
TB,N,V_oBSOLETEProtoMomentsAvailable
TB,N,V_protoSenderMuteUplink
TB,N,V_protoShouldSuppressInCallUI
TB,N,V_protoMomentsV2Available
T@"NSString",&,N,V_protoUpgradeSessionUUID
isPreferred
isPreferredAndActive
setCategory:
setMode:
predicateForPreferredRoute
_routePassingTest:
_anyRoutePassesTest:
isWirelessHeadset
isAirTunes
isCarAudio
isBluetooth
bluetoothEndpointType
uniqueIdentifier
predicateForCarPlayOrInEarTriangleRoute
enumerateObjectsUsingBlock:
enumerateRoutesInvokingBlock:forRoutesPassingTest:
isReceiverRouteAvailable
isSpeakerRouteAvailable
isWirelessHeadsetRouteAvailable
isAirTunesRouteAvailable
isCarAudioRouteAvailable
isBluetoothRouteAvailable
isAnyPreferredRouteAvailableAndActive
_setRoutesFromRouteDictionaries:
_category
_mode
T@"NSString",&,N,V_category
T@"NSString",&,N,V_mode
T@"NSArray",C,N,V_routes
receiverRouteAvailable
TB,R,N,GisReceiverRouteAvailable
speakerRouteAvailable
TB,R,N,GisSpeakerRouteAvailable
wirelessHeadsetAvailable
TB,R,N,GisWirelessHeadsetRouteAvailable
airTunesRouteAvailable
TB,R,N,GisAirTunesRouteAvailable
carAudioRouteAvailable
TB,R,N,GisCarAudioRouteAvailable
bluetoothRouteAvailable
TB,R,N,GisBluetoothRouteAvailable
T@"TURoute",R,N
carPlayOrInEarTriangleRouteAvailable
TB,R,N,GisCarPlayOrInEarTriangleRouteAvailable
setMetadata:
hasApplicationContext
hasBundleIdentifier
hasActivityIdentifier
hasMetadata
hasActivityContext
setHasUpdatedDateEpochTime:
hasUpdatedDateEpochTime
hasFallbackApplicationName
hasActivityMetadata
setHasIsSystemActivity:
hasIsSystemActivity
_updatedDateEpochTime
_activityContext
_activityIdentifier
_activityMetadata
_applicationContext
_fallbackApplicationName
_metadata
_isSystemActivity
T@"NSData",&,N,V_applicationContext
T@"NSString",&,N,V_bundleIdentifier
T@"NSString",&,N,V_activityIdentifier
T@"NSData",&,N,V_metadata
T@"CSDMessagingConversationActivityContext",&,N,V_activityContext
Td,N,V_updatedDateEpochTime
T@"NSString",&,N,V_fallbackApplicationName
T@"CSDMessagingConversationActivityMetadata",&,N,V_activityMetadata
TB,N,V_isSystemActivity
setHasHandleType:
handleTypeAsString:
StringAsHandleType:
setHasNotificationStyles:
_handleType
_notificationStyles
Ti,N,V_handleType
TI,N,V_notificationStyles
setHasFaceTimeAudioAvailable:
hasFaceTimeAudioAvailable
setHasFaceTimeVideoAvailable:
hasFaceTimeVideoAvailable
_faceTimeAudioAvailable
_faceTimeVideoAvailable
TB,N,V_faceTimeAudioAvailable
TB,N,V_faceTimeVideoAvailable
setStatus:
isConferenced
setConferenced:
dateWithTimeIntervalSinceReferenceDate:
timeIntervalSinceReferenceDate
conferenced
TB,N,GisConferenced
TB,N,GisOutgoing
T@"NSDate",&,N
acquireProcessAssertionForBundleIdentifier:completion:
processAssertions
countForObject:
invalidateProcessAssertionForBundleIdentifier:completion:
acquireProcessAssertionForBundleIdentifier:
invalidateProcessAssertionForBundleIdentifier:
setProcessAssertions:
_processAssertions
T@"NSCountedSet",&,N,V_processAssertions
initForReadingWithError:
initWithDataSource:deviceLockObserver:callCenterObserver:callDirectoryStoreBuilder:queue:
_callFilterBlock
emergencyProvider
kettleFeatureComplete
setCallDirectoryStore:
callDirectoryAllowsCallFromSourceAddress:
_doNotDisturbAllowsCallFromSourceAddress:providerIdentifier:
isOnEmergencyCall
emergencyProviderIdentifier
callDirectoryAllowsCallFromSourceAddress:countryCode:
callDirectoryStore
_callDirectoryPhoneNumberVariantsForSourceAddress:countryCode:
containsBlockingEntryForEnabledExtensionWithPhoneNumberInArray:error:
initWithDigits:countryCode:
callDirectorySanitizer
canonicalizedPhoneNumber:
ITUCountryCodeForISOCountryCode:
setOnEmergencyCall:
twoTimeCallthroughInterval
setTwoTimeCallthroughInterval:
_onEmergencyCall
_kettleFeatureComplete
_twoTimeCallthroughInterval
_callDirectoryStore
_emergencyProviderIdentifier
_callDirectorySanitizer
T@"CSDIncomingCallFilterDataSource",&,N,V_dataSource
onEmergencyCall
TB,N,GisOnEmergencyCall,V_onEmergencyCall
T@"NSString",R,C,N,V_emergencyProviderIdentifier
T@"CXCallDirectorySanitizer",R,N,V_callDirectorySanitizer
T@"CXCallDirectoryStore",&,N,V_callDirectoryStore
TB,R,N,V_kettleFeatureComplete
Td,N,V_twoTimeCallthroughInterval
accountStore
aa_primaryAppleAccount
username
isSignedIntoiCloud
_accountStore
T@"ACAccountStore",R,N,V_accountStore
signedIntoiCloud
TB,R,N,GisSignedIntoiCloud
initWithCallCenterObserver:transactionManager:queue:
_callHistoryChanged:
_addPendingCallToCallHistory:
_callConnected:
_handleCallHistoryChanged
_markReadRecentCallsMatchingHandle:
recentsManager
predicateForCallsWithStatusRead:
callsWithPredicate:limit:offset:batchSize:
clearReadNotificationsIgnoringHandleIds:
cachedCalls
updateBytesOfDataUsedFor:with:
_callHistoryTransactionObjectWithIdentifier:
_endTransactionForObjectAfterCallHistoryDatabaseChanges:
addToCallHistory:
transactionObjectsAwaitingCallHistory
transactionManager
predicateForCallsWithRemoteParticipantCount:
predicateForCallsWithRemoteParticipantHandle:
andPredicateWithSubpredicates:
predicateFormat
setRead:forCallsWithPredicate:completion:
isEqualToCallProvider:
predicateForCallsWithAnyServiceProviders:
notPredicateWithSubpredicate:
deleteCallsWithPredicate:completion:
_canAddCallToCallHistory:
_addCallToCallHistory:
updateBytesOfDataUsed:forCallWithUniqueProxyIdentifier:callHistoryIdentifier:
incomingCallFilter
_incomingCallFilter
_transactionManager
_recentsManager
_transactionObjectsAwaitingCallHistory
_cachedCalls
T@"<CSDTransactionManager>",R,N,V_transactionManager
T@"CHManager",R,N,V_recentsManager
T@"<CSDUserNotificationDelegate>",R,W,N,V_delegate
T@"NSMutableArray",R,N,V_transactionObjectsAwaitingCallHistory
T@"NSMutableDictionary",R,N,V_cachedCalls
T@"CSDIncomingCallFilter",R,N,V_incomingCallFilter
setHasGeneratorVersion:
_generatorID
_generatorVersion
T@"NSString",&,N,V_generatorID
TI,N,V_generatorVersion
preferences
_updateSessionPreferences
_preferences
T@"<CSDIDSSessionProvider>",R,N,V_sessionProvider
T@"NSMutableDictionary",R,N,V_preferences
wiFiAllowed
TB,N,GisWiFiAllowed
cellularDataAllowed
TB,N,GisCellularDataAllowed
cellularDataPreferred
TB,N,GisCellularDataPreferred
addContactIdentifiers:
setProtoPersonNameComponents:
setSuggestedName:
setCompanyName:
setMapName:
setLocation:
setContactName:
setContactLabel:
setCallDirectoryLabel:
setCallDirectoryLocalizedExtensionContainingAppName:
setCallDirectoryExtensionIdentifier:
contactIdentifiersCount
clearContactIdentifiers
contactIdentifiersAtIndex:
contactIdentifiersType
hasName
hasProtoPersonNameComponents
hasSuggestedName
hasLabel
hasCompanyName
hasMapName
hasLocation
hasContactName
hasContactLabel
hasCallDirectoryLabel
hasCallDirectoryLocalizedExtensionContainingAppName
hasCallDirectoryExtensionIdentifier
protoPersonNameComponents
suggestedName
companyName
mapName
location
contactName
contactLabel
callDirectoryLabel
callDirectoryLocalizedExtensionContainingAppName
callDirectoryExtensionIdentifier
contactIdentifiers
setContactIdentifiers:
_callDirectoryExtensionIdentifier
_callDirectoryLabel
_callDirectoryLocalizedExtensionContainingAppName
_companyName
_contactIdentifiers
_contactLabel
_contactName
_label
_location
_mapName
_name
_protoPersonNameComponents
_suggestedName
T@"NSString",&,N,V_name
T@"CSDMessagingPersonNameComponents",&,N,V_protoPersonNameComponents
T@"NSString",&,N,V_suggestedName
T@"NSString",&,N,V_label
T@"NSString",&,N,V_companyName
T@"NSString",&,N,V_mapName
T@"NSString",&,N,V_location
T@"NSString",&,N,V_contactName
T@"NSString",&,N,V_contactLabel
T@"NSString",&,N,V_callDirectoryLabel
T@"NSString",&,N,V_callDirectoryLocalizedExtensionContainingAppName
T@"NSString",&,N,V_callDirectoryExtensionIdentifier
T@"NSMutableArray",&,N,V_contactIdentifiers
setActivityQueue:
setBestAppSuggestionManager:
bestAppSuggestionManager
broadcastActivity:withTimeout:
_broadcastActivity:withTimeout:shouldPrioritize:
_stopBroadcastingActivity:
_listenForActivityType:dynamicIdentifier:
_stopListeningForActivityType:
activityQueue
userActivity
becomeCurrent
_updateCurrentlyBroadcastedActivity
registerActivityType:dynamicIdentifier:
activityTypeRequiresBestAppSuggestionListener:
startListeningForBestAppSuggestions
unregisterActivityType:dynamicIdentifier:
stopListeningForBestAppSuggestions
activityType
activityTypeForUserActivityTypeString:
dynamicIdentifier
bestAppSuggestionMayHaveChanged
bestAppSuggestionChanged:
bestAppSuggestionChanged:withAdditionalSuggestions:
connectionInterrupted
currentlyBroadcastedActivity
setCurrentlyBroadcastedActivity:
_activityQueue
_currentlyBroadcastedActivity
_bestAppSuggestionManager
T@"NSMutableOrderedSet",&,N,V_activityQueue
T@"CSDUserActivity",&,N,V_currentlyBroadcastedActivity
T@"UABestAppSuggestionManager",&,N,V_bestAppSuggestionManager
T@"<CSDUserActivityCommunicatorDelegate>",W,N,V_delegate
migrateAnnounceCalls
migrateConversationLinkBaseURL
announceCalls
initWithSuiteName:
setAnnounceCalls:
conversationLinkBaseURL
stringForKey:
initWithString:
setConversationLinkBaseURL:
T@"TUUserConfiguration",R,N,V_userConfiguration
initWithGroupSessionProvider:featureFlags:
setTuConversationMembers:
setOtherInvitedTUHandles:
numberWithLong:
callTypeForJoinContext:
addRemovedMembers:
sharedManager
faceTimeMultiwayAvailabilityForDestination:
isWebCapableFaceTimeAvailableForDestination:
addMembers:toExistingMembers:participantDestinationIDs:webDestinationIDs:activeParticipants:activitySessions:link:otherInvitedHandles:report:invitationPreferences:
queryHasWebOnlyEndpointsForDestinations:completionBlock:
setJoined:
participantPushToken
participantURI
setRetryCount:
idsDestinationForActiveParticipant:
retryCount
setLightweightRetryCount:
lightweightRetryCount
addMembers:toExistingMembers:activeParticipants:activitySessions:report:triggeredLocally:
_joined
_localParticipantIdentifier
_retryCount
_lightweightRetryCount
T@"<CSDIDSGroupSessionProvider>",R,N,V_sessionProvider
joined
TB,N,GisJoined,V_joined
TQ,N,V_localParticipantIdentifier
TQ,N,V_retryCount
TQ,N,V_lightweightRetryCount
T@"<CSDIDSGroupSessionDelegate>",W,N,V_delegate
initWithQueue:featureFlags:
callServicesClientXPCInterface
callServicesServerXPCInterface
wantsCallDisconnectionOnInvalidation
disconnectAllCalls
wantsCallStopStreamingOnInvalidation
sharedInstanceWithQueue:server:shouldRegister:
callServicesInterface
registerWithCompletionHandler:
initWithCallStateController:queue:
setProviderManager:
setRelayCallDataSource:
initWithDataSources:queue:
updateClientsWithCall:
updateAudioArbitration
setCallChanged:
_launchInCallApplicationForExistingCall
setCarPlayScreenConnectionChanged:
_handleRelayCallingChanged
makeLocalRouteController
_updateBluetoothAudioFormatIfNecessary
localRouteController
routesByUniqueIdentifier
handleLocalRoutesByUniqueIdentifierUpdated:
handleRoutesByUniqueIdentifierUpdated:
setRoutesDidChangeHandler:
reportRouteWasPicked:
setRouteWasPickedHandler:
reportTimedOutPickingRoute:
setTimedOutPickingRouteHandler:
makePairedHostDeviceRouteController
handlePairedHostDeviceRoutesByUniqueIdentifierUpdated:
_handleCallStatusChangedNotification:
_handleCSDRelayIDSActiveAccountsChanged:
_handleCSDRelayPairedDeviceConnectedNotification:
_handlePreferredRouteChangedNotification:
_handleCallStartedOutgoingNotification:
_handleCallStartedConnectingNotification:
_handleCallConnectedNotification:
_handleNeedsManualInCallSoundsChangedNotification:
_handleCallWantsHoldMusicChangedNotification:
_handleCallShouldSuppressRingtoneChangedNotification:
_handleCallModelChangedNotification:
_handleResetCallStateNotification:
_handleHardPauseStateChangedNotification:
_handleCallIsUsingBasebandChangedNotification:
_handleInvitationSentNotification:
_handleCallDisplayContextChangedNotification:
_handleUpdateRemoteUplinkMutedChangedNotification:
_handleTUCallSupportsTTYWithVoiceChangedNotification:
_handleTUCallTTYTypeChangedNotification:
_handleMixesVoiceWithMediaChangedNotification:
_handleCarPlayControlEventNotification:
_handleAudioSessionInterruptionNotification:
shouldHandleSecureMicrophoneEvents
performDisconnectAllCalls
callHistoryManagerXPCServer
callProviderManagerXPCServer
providerCallDataSource
supportsRelayingToOtherDevices
areRelayCallingFeaturesEnabled
_requestCallStateFromHost
callsWithAnEndpointElsewhere
carPlayManager
isCarPlayConnected
shouldHandleCarPlayControlEvents
_answerIncomingCallAsConversation:
_answerIncomingCall:withBehavior:
disconnectCurrentCallAndActivateHeld
currentCallCount
swapCalls
unholdCall:
holdCall:
initWithConversation:
setUUID:
joinConversationWithConversationRequest:
faceTimeLaunchForIncomingCallURL
currentProxyCalls
proxyCallWithCall:
wantsCallNotificationsDisabledWhileSuspended
isProcessSuspended
eligibleCallsByFilteringCalls:forClient:
isCallEligible:forClient:
handleCurrentCallsChanged:callDisconnected:
handleFrequencyChangedTo:inDirection:forCallsWithUniqueProxyIdentifiers:
wantsFrequencyChangeNotifications
arrayByApplyingSelector:
filterClientsUsingPredicate:andPerformBlock:coalescedByIdentifier:
handleMeterLevelChangedTo:inDirection:forCallsWithUniqueProxyIdentifiers:
resetCallProvisionalStates
sendClientsNotificationName:forCall:userInfo:
handleNotificationName:forCallWithUniqueProxyIdentifier:userInfo:
_launchInCallApplicationForIncomingCallIfNecessary:
_handleRingingCallStatusChangeForHostedCall:
_handleSendingCallStatusChangeForHostedCall:
_launchInCallApplicationForOutgoingConversationIfNecessary:
_launchInCallApplicationForOutgoingCallIfNecessary:
_handleDisconnectedCallStatusChangeForHostedCall:
_handleDisconnectedCallStatusChangeForVoicemailCall
_updateRoutesForDisconnectedCall
_handleActiveCallStatusChangeForHostedCall:
_handleHeldCallStatusChangeForHostedCall:
_handleConnectingCallStatusChangeForHostedCall:
_endProxyCallsForConnectingVideoCall
_handleConnectedCallStatusChangeForHostedCall:
performPushHostedCallsToDestination:
performPullRelayingCallsFromClientAndUpdateEndpoint:updateExpectedDestination:
getActivePairedDevice
supportsCapability:
shouldRelayToOtherDevices
_nonRingingCallExistsOnThisDevice
clearState
expanseBTSwitchingEnabled
setCurrentlyTrackedA2DPRouteIdentifier:
isCurrentlyPicked
isA2DPRoute
currentlyTrackedA2DPRouteIdentifier
registerCall:
relayCallDataSource
relayCallDelegate
outgoingCallFromDialRequest:
dateAnsweredOrDialed
dateDialed
setDateAnsweredOrDialed:
callWithCallUUID:
callsWithGroupUUID:
holdCalls:whileUnholdingCalls:
groupCalls:withCalls:
ungroupCall:fromOtherCallsInGroup:
addCalls:forIdentifier:
dataSources
callsForDataSource:identifier:
performEndActiveAndAnswerCall:withRequest:
performEndHeldAndAnswerCall:withRequest:
performHoldActiveAndAnswerCall:withRequest:
performAnswerCallAsVideoUpgrade:withRequest:
performAnswerCallAsAudioDowngrade:withRequest:
callWithUniqueProxyIdentifier:fromCallsToAnswer:
disconnectCalls:whileHoldingCalls:andUnholdingCalls:andUngroupingCalls:
answerCall:withRequest:whileDisconnectingActiveCalls:
answerCall:withRequest:whileDisconnectingHeldCalls:andHoldingCalls:
currentlyPickedRouteIdForCategory:andMode:
sourceIdentifierForRouteID:
answerCall:withRequest:whileHoldingActiveCalls:
disconnectCall:whileUngroupingCall:
disconnectAllCalls:
sendMMIOrUSSDCodeWithRequest:
setTTYType:forCalls:
setUplinkMuted:forCalls:
pullCallWithHandoffActivityUserInfo:completion:
allCallsPassTest:
callForClient:usingCall:
currentCallsForClient:
_dial:displayContext:completion:
performDialCall:displayContext:
performAnswerCall:withRequest:
performHoldCall:
performUnholdCall:
initWithCallUUID:videoEnabled:
performDisconnectCall:
performGroupCall:withCall:
performUngroupCall:
performSwapCalls
performPlayDTMFToneForCall:key:
performDisconnectCurrentCallAndActivateHeld
performSetTTYType:forCall:
performPushRelayingCallsToHostWithSourceIdentifier:
performPullCallFromClientUsingHandoffActivityUserInfo:completion:
performSendMMIOrUSSDCodeWithRequest:
performSetUplinkMuted:forCall:
isInCallUIActive
performPullHostedCallsFromPairedHostDevice
performUpdateCallWithProxy:
reportCallEnteredForeground:
reportAllCallsBackgrounded
switchBluetoothAudioFormats
stringWithCString:encoding:
_fetchUserActivityWithUUID:completionHandler:
sendUserScoreToRTCReporting:withScore:
performJoinConversation:
setCurrentAudioInputDeviceToDeviceWithUID:
setCurrentAudioOutputDeviceToDeviceWithUID:
pickRouteWithUniqueIdentifier:shouldWaitUntilAvailable:
containsOutgoingRestrictedHandle:forBundleIdentifier:performSynchronously:
policyForAddresses:forBundleIdentifier:
willRestrictAddresses:forBundleIdentifier:
isUnknownAddress:normalizedAddress:forBundleIdentifier:
filterStatusForAddresses:withBundleIdentifier:
_handleMessagingConnectionEndForCalls:withDisconnectedReason:didStartConnecting:
processStatesForBundleIdentifier:
answerCallWithRequest:
holdCallWithUniqueProxyIdentifier:
unholdCallWithUniqueProxyIdentifier:
requestVideoUpgradeForCallWithUniqueProxyIdentifier:
disconnectCallWithUniqueProxyIdentifier:
groupCallWithUniqueProxyIdentifier:withOtherCallWithUniqueProxyIdentifier:
ungroupCallWithUniqueProxyIdentifier:
playDTMFToneForCallWithUniqueProxyIdentifier:key:
setTTYType:forCallWithUniqueProxyIdentifier:
pushRelayingCallsToHostWithSourceIdentifier:
pullHostedCallsFromPairedHostDevice
sendHardPauseDigitsForCallWithUniqueProxyIdentifier:
updateCallWithProxy:
enteredForegroundForCallWithUniqueProxyIdentifier:
willEnterBackgroundForAllCalls
enteredBackgroundForAllCalls
setRemoteVideoPresentationSizeForCallWithUniqueProxyIdentifier:size:
setRemoteVideoPresentationStateForCallWithUniqueProxyIdentifier:presentationState:
setUplinkMuted:forCallWithUniqueProxyIdentifier:
setDownlinkMuted:forCallWithUniqueProxyIdentifier:
setIsSendingVideo:forCallWithUniqueProxyIdentifier:
setSharingScreen:forCallWithUniqueProxyIdentifier:
setScreenShareAttributesForCallWithUniqueProxyIdentifier:attributes:
setSharingScreen:attributes:forCallWithUniqueProxyIdentifier:
setBluetoothAudioFormatForCallWithUniqueProxyIdentifier:bluetoothAudioFormat:
shouldSuppressInCallStatusBar:
shouldAllowRingingCallStatusIndicator:
activateInCallUIWithActivityContinuationIdentifier:
requestInitialState:
dialWithRequest:reply:
pullCallFromClientUsingHandoffActivityUserInfo:reply:
reportLocalPreviewStoppedForCallWithUniqueProxyIdentifier:
setClientCapabilities:
localRoutesByUniqueIdentifier:
pairedHostDeviceRoutesByUniqueIdentifier:
pickLocalRouteWithUniqueIdentifier:shouldWaitUntilAvailable:
pickPairedHostDeviceRouteWithUniqueIdentifier:shouldWaitUntilAvailable:
willRestrictAddresses:forBundleIdentifier:reply:
containsRestrictedHandle:forBundleIdentifier:performSynchronously:reply:
shouldRestrictAddresses:forBundleIdentifier:performSynchronously:reply:
filterStatusForAddresses:forBundleIdentifier:reply:
policyForAddresses:forBundleIdentifier:reply:
isUnknownAddress:normalizedAddress:forBundleIdentifier:reply:
updateClientsWithFrequency:inDirection:forCalls:
updateClientsWithMeterLevel:inDirection:forCalls:
resetClientCallProvisionalStates
sendClientsNotificationName:
sendClientsNotificationName:forCall:
_handleFaceTimeAvailabilityChangedNotification:
isTrackingVoIPCallForBundleIdentifier:
audioArbitrationController
setAudioArbitrationController:
carPlayHardwareControlsBroadcaster
clientInvalidationHandler
setClientInvalidationHandler:
setShouldHandleSecureMicrophoneEvents:
_callController
_recentsController
_audioArbitrationController
_localRouteController
_pairedHostDeviceRouteController
_currentlyTrackedA2DPRouteIdentifier
_callHistoryManagerXPCServer
_callProviderManagerXPCServer
_relayCallDataSource
_relayCallDelegate
_carPlayHardwareControlsBroadcaster
_carPlayManager
_clientInvalidationHandler
_providerCallDataSource
_shouldHandleSecureMicrophoneEvents
T@"NSString",C,N,V_currentlyTrackedA2DPRouteIdentifier
T@"CSDCallHistoryManagerXPCServer",R,N,V_callHistoryManagerXPCServer
T@"CSDCallProviderManagerXPCServer",R,N,V_callProviderManagerXPCServer
T@"CSDRelayCallDataSource",R,N,V_relayCallDataSource
T@"CSDRelayCallDelegate",R,N,V_relayCallDelegate
T@"TUCarPlayHardwareControlsBroadcaster",R,N,V_carPlayHardwareControlsBroadcaster
T@"CSDCarPlayManager",R,N,V_carPlayManager
T@?,C,N,V_clientInvalidationHandler
T@"CSDProviderCallDataSource",R,N,V_providerCallDataSource
T@"NSNumber",&,N,V_shouldHandleSecureMicrophoneEvents
T@"CSDCallProviderManager",R,N,V_callProviderManager
T@"CSDCallController",R,N,V_callController
T@"CSDRecentsController",R,N,V_recentsController
T@"CSDAudioArbitrationController",&,N,V_audioArbitrationController
T@"CSDRouteController",R,N,V_localRouteController
T@"CSDRouteController",R,N,V_pairedHostDeviceRouteController
_handleDeviceFirstUnlockNotification
setCallback:
initWithNotifyObserver:queue:
hasBeenUnlocked
hasBeenUnlockedBlock
setHasBeenUnlocked:
_refreshHasBeenUnlocked
notifyObserver
endObserving
firstUnlockCallbacks
isObserving
beginObserving
setHasBeenUnlockedBlock:
setFirstUnlockCallbacks:
setNotifyObserver:
_hasBeenUnlocked
_hasBeenUnlockedBlock
_firstUnlockCallbacks
_notifyObserver
T@"NSMutableArray",&,N,V_firstUnlockCallbacks
TB,N,V_hasBeenUnlocked
T@"<TUNotifyObserver>",&,N,V_notifyObserver
T@?,C,N,V_hasBeenUnlockedBlock
setPersonNameComponents:
T@"TUCallDisplayContext",R,N
initWithBundleIDs:states:
setApplicationState:forBundleIdentifier:
applicationStateForBundleIdentifier:
bundleIdentifierToApplicationState
arrayByAddingObject:
applicationStateMonitor
updateInterestedBundleIDs:states:
fetchApplicationStateForBundleIdentifier:
applicationStateForApplication:
isRunningForVoIPApplication:
isRunningForegroundForVoIPApplication:
addVoIPApplication:
removeVoIPApplication:
accessorLock
_accessorLock
_bundleIdentifierToApplicationState
_applicationStateMonitor
T{os_unfair_lock_s=I},R,N,V_accessorLock
T@"NSMutableDictionary",R,N,V_bundleIdentifierToApplicationState
T@"BKSApplicationStateMonitor",R,N,V_applicationStateMonitor
bundleIdentifierToVoIPApplication
setNetworkExtensionClientManager:
interfaceWithProtocol:
networkExtensionClientManager
registerVoIPNetworkExtension
unregisterVoIPNetworkExtension
setPushKitClientManager:
pushKitClientManager
voipRegister
voipUnregister
_apsConnectionForEnvironment:
_removeAllApplicationsFromKillCountsDictionary
_pruneUninstalledAppPushTopics
removeOutstandingMessagesForBundleIdentifier:
_findOrCreateApplicationWithBundleIdentifier:
_removeApplicationFromKillCountsDictionary:
_unregisterPushKitApplication:inEnvironment:
developmentConnection
productionConnection
removeFromRunLoop
_registerNetworkExtensionApplicationWithBundleIdentifier:client:
_unregisterNetworkExtensionApplication:
_registerPushKitApplicationWithBundleIdentifier:client:environment:
topicFromBundleId:
requestTokenForTopic:identifier:
bundleIdFromTopic:
topic
initWithTransportType:payload:
openApplicationWithBundleIdentifier:message:
voipAppFailedToPostIncomingCall:
voipAppBecameDisabledFromLaunching:
_pruneUninstalledAppPushTopicsForConnection:
enabledTopics
_removeTopic:fromConnection:
_createAPSConnectionForEnvironment:namedDelegatePort:
initWithEnvironmentName:namedDelegatePort:queue:
_setEnabledTopics:
invalidateTokenForTopic:identifier:
outstandingMessages
_isApplicationPreventedFromBeingLaunched:
voipPushDroppedOnTheFloor:
_appHasOngoingCall:
containsAnyOutstandingMessageForBundleIdentifier:
addOutstandingMessage:forBundleIdentifier:
acquire
containsOutstandingMessage:forBundleIdentifier:
identityForEmbeddedApplicationIdentifier:
predicateMatchingIdentity:
setReportType:
setExceptionDomain:
setExceptionCode:
initWithPredicate:context:
execute:
_incrementKillCountForApplication:
cx_errorWithCode:
connection:didReceivePublicToken:
connection:didReceiveToken:forTopic:identifier:
connection:didReceiveIncomingMessage:
connection:didReceiveMessageForTopic:userInfo:
connection:didSendOutgoingMessage:
connection:didFailToSendOutgoingMessage:error:
connection:didChangeConnectedStatus:
connectionDidReconnect:
connection:channelSubscriptionsFailedWithFailures:
networkExtensionMessageControllerHost:didReceiveIncomingMessage:forBundleIdentifier:
notificationServiceExtensionHost:didReceiveIncomingMessage:forBundleIdentifier:reply:
noteReportedNewIncomingVoIPCallForBundleIdentifier:
setProductionConnection:
setDevelopmentConnection:
networkExtensionMessageHost
nseMessageHost
setBundleIdentifierToVoIPApplication:
_networkExtensionClientManager
_pushKitClientManager
_productionConnection
_developmentConnection
_networkExtensionMessageHost
_nseMessageHost
_bundleIdentifierToVoIPApplication
_outstandingMessages
T@"CSDClientManager",&,N,V_networkExtensionClientManager
T@"CSDClientManager",&,N,V_pushKitClientManager
T@"APSConnection",&,N,V_productionConnection
T@"APSConnection",&,N,V_developmentConnection
T@"CXNetworkExtensionMessageControllerHost",R,N,V_networkExtensionMessageHost
T@"CXNotificationServiceExtensionVoIPXPCHost",R,N,V_nseMessageHost
T@"NSMutableDictionary",&,N,V_bundleIdentifierToVoIPApplication
T@"CSDVoIPApplicationMonitor",R,N,V_applicationMonitor
T@"NSMutableDictionary",R,N,V_outstandingMessages
T@"CSDCallStateController",W,N,V_callStateController
setSessionUUID:
setSessionEventType:
item
setItem:
queueItemType
setQueueItemType:
setActionURL:
optionsWithDictionary:
openApplication:withOptions:completion:
T@"<CSDConversationNoticeDelegate>",R,W,N,V_delegate
T@"FBSOpenApplicationService",R,N,V_service
properties
hasBeenExpiredForAtLeast:
csd_isExpired
streamToken
screenToken
avcIdentifier
isRemoteAudioEnabled
isRemoteVideoEnabled
audioPriority
videoPriority
setAvcIdentifier:
isEqualToParticipant:
isEqualToCapabilities:
initWithIDSDictionaryRepresentation:
idsDictionaryRepresentation
_screenEnabled
_audioPaused
_localAccountHandle
_remoteAudioEnabled
_remoteVideoEnabled
_streamToken
_screenToken
_audioPriority
_videoPriority
_avcIdentifier
_activeIDSDestination
TQ,R,N,V_identifier
T@"TUHandle",R,C,N,V_handle
T@"NSData",R,C,N,V_avcData
TB,N,GisScreenEnabled,V_screenEnabled
TB,N,GisAudioPaused,V_audioPaused
T@"TUConversationParticipantCapabilities",C,N,V_capabilities
localAccountHandle
TB,N,GisLocalAccountHandle,V_localAccountHandle
Tq,N,V_streamToken
Tq,N,V_screenToken
Tq,N,V_audioPriority
Tq,N,V_videoPriority
T@"NSString",C,N,V_avcIdentifier
remoteAudioEnabled
TB,N,GisRemoteAudioEnabled,V_remoteAudioEnabled
remoteVideoEnabled
TB,N,GisRemoteVideoEnabled,V_remoteVideoEnabled
T@"NSString",C,N,V_activeIDSDestination
T@"TUConversationParticipant",R,C,N
dataSourceToIdentifierToCalls
setDataSourceToIdentifierToCalls:
_dataSourceToIdentifierToCalls
T@"NSMapTable",&,N,V_dataSourceToIdentifierToCalls
sandboxExtensionHandle
setSandboxExtensionHandle:
iconTemplateImageData
setIconTemplateImageData:
supportsVideo
includesCallsInRecents
setAudioSessionID:
supportedTUHandleTypes
setSupportsCurrentPlatform:
initWithCallSource:configuration:
identifiersWithPendingCoalescingBlocks
blockToExecuteAfterPendingCoalescingBlocksByIdentifier
performBlock:coalescedByIdentifier:
processInfo
mainBundle
processHandle
identifierWithPid:
handleForIdentifier:error:
setProcessHandle:
currentState
taskState
performBlock:
setObject:
supportsMessagesGroupProviding
setSupportsMessagesGroupProviding:
setIdentifiersWithPendingCoalescingBlocks:
setBlockToExecuteAfterPendingCoalescingBlocksByIdentifier:
_supportsMessagesGroupProviding
_object
_identifiersWithPendingCoalescingBlocks
_blockToExecuteAfterPendingCoalescingBlocksByIdentifier
_processHandle
T@,&,N,V_object
T@"NSMutableSet",&,N,V_identifiersWithPendingCoalescingBlocks
T@"NSMutableDictionary",&,N,V_blockToExecuteAfterPendingCoalescingBlocksByIdentifier
T@"RBSProcessHandle",&,N,V_processHandle
T@,R,N
remote
TB,R,N,GisRemote
T@"TUCallServicesClientCapabilities",&,N,V_capabilities
processSuspended
TB,R,N,GisProcessSuspended
TB,N,V_supportsMessagesGroupProviding
hasFallbackURL
setHasSupportsContinuationOnTV:
hasSupportsContinuationOnTV
hasTitle
hasSubtitle
setHasPreferredBroadcastingAttributes:
hasPreferredBroadcastingAttributes
_fallbackURL
_image
_preferredBroadcastingAttributes
_subtitle
_title
_supportsContinuationOnTV
T@"NSString",&,N,V_fallbackURL
TB,N,V_supportsContinuationOnTV
T@"NSString",&,N,V_title
T@"NSString",&,N,V_subtitle
T@"NSData",&,N,V_image
TI,N,V_preferredBroadcastingAttributes
accountDescription
shortLabel
initWithUUID:accountUUID:localizedName:localizedShortName:handle:
T@"TUSenderIdentity",R,N
conversationManagerClientXPCInterface
conversationManagerServerXPCInterface
notifyClientsToConnectIfNecessary
createActivitySession:onConversationWithUUID:
clientsPassingTest:
getMessagesGroupDetailsForMessagesGroupUUID:completionHandler:
conversation:addedMembersLocally:
conversation:buzzedMember:
conversationUpdatedMessagesGroupPhoto:
updateIncomingPendingConversationsByGroupUUID:
updateActivatedConversationLinks:
notifyClientsOfConversationsByGroupUUIDUpdate
updateConversationsByGroupUUID:
mediaPrioritiesChangedForConversation:
conversation:requestedScreenShareForParticipant:
conversation:participant:addedNotice:
updateActivityAuthorizedBundleIdentifierState:
receivedTrackedPendingMember:forConversationLink:
remoteScreenShareAttributesChanged:isLocallySharing:
remoteScreenShareEndedWithReason:
updateConversationWithUUID:participantPresentationContexts:
getMessagesGroupDetailsForConversationUUID:completionHandler:
conversationsByGroupUUID:
incomingPendingConversationsByGroupUUID:
pseudonymsByCallUUID:
activityAuthorizedBundleIdentifierState:
activitySuggestions:
activatedConversationLinks:
setActivityAuthorization:forBundleIdentifier:
setDownlinkMuted:forRemoteParticipantsInConversationWithUUID:
refreshActiveConversations
clientsShouldConnectToken
setClientsShouldConnectToken:
_clientsShouldConnectToken
Ti,N,V_clientsShouldConnectToken
initWithDataSource:serialQueue:
retrieveSavedProvidersByIdentifier
localProvidersByIdentifier
registeredLocalProvidersByIdentifier
pairedHostDeviceProvidersByIdentifier
registeredPairedHostDeviceProvidersByIdentifier
_unregisterUninstalledProvidersAndNotify:
_updateProvidersByIdentifierAndNotify:
isRelayCallingGuaranteed
setProvidersByIdentifier:
isProviderInstalled:
setRegisteredLocalProvidersByIdentifier:
userIntentManager
donateUserIntentForCallProviderIdentifier:
providersByIdentifier
_providersByIdentifierByFilteringForRemoteClientsFromProvidersByIdentifier:
uniqueRingtoneSoundLinkFilenameWithOriginalFilename:
isSymbolicLinkAtURL:
createLinkIfNecessaryWithFilename:toURL:
removeLinksForFilenamesNotInArray:
setRegisteredPairedHostDeviceProvidersByIdentifier:
_donateUserIntentForProviderWithIdentifier:
validateUserIntentForCallSource:
providerIdentifiersForExistingCalls
isDevicePasscodeLocked
dialAssistedDialRequestForDialRequest:
appShouldUseDeprecatedCallingIntents:
userActivityUsingDeprecatedCallingIntents:
openUserActivity:usingApplicationWithBundleIdentifier:frontBoardOptions:completion:
compatibilityObject
plugInKitPlugins
relayCallingStateChangedForDataSource:
installedProvidersChangedForDataSource:
registerLocalProvider:
_userIntentManager
_localProvidersByIdentifier
_pairedHostDeviceProvidersByIdentifier
_providersByIdentifier
T@"<CSDCallProviderManagerDataSource>",R,N,V_dataSource
T@"NSMutableDictionary",R,N,V_localProvidersByIdentifier
T@"NSMutableDictionary",R,N,V_pairedHostDeviceProvidersByIdentifier
T@"NSDictionary",C,N,V_providersByIdentifier
T@"CSDUserIntentManager",R,N,V_userIntentManager
handleFailureInFunction:file:lineNumber:description:
initWithQueue:conversationManager:networkSupport:serverBag:featureFlags:
callUUIDsByConversationUUID
recentlyDeletedCallUUIDsByConversationUUID
networkSupport
setEnableCriticalReliability:
conversationUUIDsByCallUUID
_isWaitingToJoinForConversationUUID:
conversationUUIDsWaitingToJoin
conversationUUIDsWaitingForRemoteJoin
conversationUUIDsAwaitingActiveAudioSession
startAudioForConversationsIfNecessary
usesAudioSession
isAudioSessionActive
setCallUUID:forConversationUUID:
setConversationUUID:forCallUUID:
setWaitingToJoin:forConversationUUID:
updateNetworkCriticalStateIfNecessary
pendingTransactions
actions
cleanupConversationWithCallUUID:
handleInvitationMessage:forConversation:fromHandle:
handleUpgradeMessage:forConversation:fromHandle:withUpdate:
handleRespondedElsewhereMessage:forConversation:fromHandle:
handleNicknameUpdateMessage:forConversation:fromHandle:withUpdate:
handleDeclineMessage:forConversation:fromHandle:withUpdate:
handleRemoveMembersMessage:forConversation:
handleReceivedVideoUpgradeMessage:forConversation:fromHandle:
isAutomaticUpgradingEnabled
participantUpdateSubtype
associateCallUUID:withConversationUUID:waitingToJoin:
handles
declineCallWithGroupUUID:onOtherDevicesWithReason:
reportNewIncomingCallForConversation:fromHandle:
removedMembers
handleInvitationMessageForLetMeIn:forConversation:pendingConversation:link:fromHandle:
cleanUpConversationIfNecessaryForConversationUUID:failureContext:
enqueueOrStartAudioForConversationUUID:
handleRespondedElsewhereMessage:forConversation:fromHandle:withAliases:
validNetworkReachable
enqueueConversationWaitingForAudioWithConversationUUID:
isWaitingForRemoteJoinForConversationUUID:
isUnansweredOutgoingOneToOneConversation:
setWaitingForRemoteJoin:forConversationUUID:
activeRemoteParticipantCXHandles
setActiveRemoteParticipantHandles:
setMixesVoiceWithMedia:
launchScreenSharingAppIfNecessary
startOutgoingOneToOneTimeoutIfNecessary:
fullfillPendingJoinActionsForCallUUIDIfNecessary:
handleMessage:forConversation:fromHandle:withUpdate:
_failConversation:failureReason:providerEndedReason:
leaveConversation:withCallUUID:reason:
isManagingPendingConversationForCallWithUUID:
hasActiveAudioSession
setAudioSessionActive:
isEquivalentToPseudonym:andPublicKey:
initWithPseudonym:publicKey:groupUUID:originatorHandle:
isLetMeIn
canCreateConversations
proceedToJoinForConversation:action:
setIsOtherInvitedHandle:
joinCallActivity
tuActivity
remotePushTokens
_findPendingConversationWithCallUUID:
leaveConversation:withCallUUID:
isPendingConversation
pendingConversationUUIDForCallWithUUID:
allowsScreenSharing
attributes
callScreenShareAttributesForAction:
callUUIDForConversationUUID:
conversationUUIDForCallUUID:
isWaitingToJoinForConversationUUID:
handleScreenShareMessage:forConversation:fromHandle:withUpdate:
_audioSessionActive
_callUUIDsByConversationUUID
_conversationUUIDsByCallUUID
_conversationUUIDsWaitingToJoin
_conversationUUIDsWaitingForRemoteJoin
_networkSupport
_recentlyDeletedCallUUIDsByConversationUUID
_conversationUUIDsAwaitingActiveAudioSession
T@"NSMutableDictionary",R,N,V_callUUIDsByConversationUUID
T@"NSMutableDictionary",R,N,V_conversationUUIDsByCallUUID
T@"NSMutableDictionary",R,N,V_recentlyDeletedCallUUIDsByConversationUUID
T@"NSMutableSet",R,N,V_conversationUUIDsWaitingToJoin
T@"NSMutableSet",R,N,V_conversationUUIDsWaitingForRemoteJoin
T@"FTNetworkSupport",R,N,V_networkSupport
audioSessionActive
TB,N,GisAudioSessionActive,V_audioSessionActive
T@"NSMutableSet",R,N,V_conversationUUIDsAwaitingActiveAudioSession
T@"<CSDConversationServerBag>",R,N,V_serverBag
initWithPriority:
setDetectingRaiseToAnswer:
incomingCall
answerCall:
isGestureServiceAvailable
isRaiseToEarGestureSupported
raiseToEarGestureManager
gestureHandler
raiseToEarGestureHandler
setGestureHandler:
isRaiseToEarGestureEnabled
updateDetectingRaiseToAnswer
isDetectingRaiseToAnswer
setRaiseToEarGestureManager:
_raiseToEarGestureManager
_raiseToEarGestureHandler
T@"CMGestureManager",&,N,V_raiseToEarGestureManager
T@?,R,C,N,V_raiseToEarGestureHandler
detectingRaiseToAnswer
TB,N,GisDetectingRaiseToAnswer
handlesWithTUHandles:
toID
_conferenceTransport:didStopForCall:cleanly:error:
isEqualToTransport:
_launchInCallApplicationForOutgoingCallOnHostIfNecessary
dialWithRequest:completion:
anyCallIsEndpointOnCurrentDevice
setHost:
setPauseVideoToStart:
_answerHostedCall:completionHandler:
groupCall:withOtherCall:
ungroupCall:
endActiveAndAnswerCall:
endHeldAndAnswerCall:
holdActiveAndAnswerCall:
_userActivityTypeStringForActivityType:
_initWithTypeIdentifier:suggestedActionType:options:
_setContentType:
setEligibleForSearch:
setEligibleForPublicIndexing:
setEligibleForHandoff:
_setSubtitle:
_setContentUserAction:
setKeywords:
setUserActivity:
setUserInfo:
_initWithUserActivityType:dynamicActivityType:options:
setDynamicIdentifier:
_registerUserActivityType:dynamicActivityType:
_unregisterUserActivityType:dynamicActivityType:
_userActivity
_dynamicIdentifier
T@"NSUserActivity",&,N,V_userActivity
T@"NSString",&,N,V_dynamicIdentifier
handleApplicationUnregisteredNotification:
relayCallingAvailability
defaultProviders
_providersForPreferenceKey:
_saveProviders:forPreferenceKey:
openUserActivity:usingApplicationRecord:configuration:completionHandler:
attributesOfItemAtPath:error:
ringtonesSandboxExtensionDirectory
applicationState
isInstalled
setProviderIdentifiersForExistingCalls:
T@"<CSDCallProviderManagerDataSourceDelegate>",W,N
relayCallingGuaranteed
TB,R,N,GisRelayCallingGuaranteed
devicePasscodeLocked
TB,R,N,GisDevicePasscodeLocked
_ringtonesSandboxExtensionDirectory
_providerIdentifiersForExistingCalls
T@"CSDSandboxExtensionDirectory",R,N,V_ringtonesSandboxExtensionDirectory
T@"CSDCallCenterObserver",R,N,V_callCenterObserver
T@"NSSet",C,N,V_providerIdentifiersForExistingCalls
T@"<CSDCallProviderManagerDataSourceDelegate>",W,N,V_delegate
photoRequestFailureCount
setPhotoRequestFailureCount:
requestTimeoutBlockByTransactionID
requestStartDateByTransactionID
reportDataCollectionCompleteIfNecessary
photoRequestDurations
photoRequestSuccessCount
setPhotoRequestSuccessCount:
setHasCleanedUp:
hasCleanedUp
availability
fuzzyPhotoRequestSuccessCount
fuzzyPhotoRequestFailureCount
medianRequestDuration
meanRequestDuration
initWithAvailability:photoRequestSuccessCount:photoRequestFailureCount:medianRequestDuration:meanRequestDuration:
momentsReportingSession:didGenerateUsageReport:
bucketedInteger:
medianFromNumbers:
meanFromDoubleNumbers:
sortDescriptorWithKey:ascending:
sortedArrayUsingDescriptors:
initWithStreamToken:
registeredStreamWithAvailability:
didStartRequestWithTransactionID:
didReceiveResultsWithTransactionID:
didCleanUp
setAvailability:
_hasCleanedUp
_availability
_photoRequestSuccessCount
_photoRequestFailureCount
_requestTimeoutBlockByTransactionID
_requestStartDateByTransactionID
_photoRequestDurations
Ti,N,V_availability
TQ,N,V_photoRequestSuccessCount
TQ,N,V_photoRequestFailureCount
TB,N,V_hasCleanedUp
T@"NSMutableDictionary",R,N,V_requestTimeoutBlockByTransactionID
T@"NSMutableDictionary",R,N,V_requestStartDateByTransactionID
T@"NSMutableArray",R,N,V_photoRequestDurations
T@"<CSDMomentsReportingSessionDelegate>",W,N,V_delegate
Tq,R,N,V_streamToken
shouldTraceSingposts
defaultConfiguration
setConversationTimeBase:
initWithTransportToken:configuration:delegate:queue:
setOneToOneEnabled:
initWithDelegate:withConfig:
initWithSessionCreationBlock:transportToken:delegate:queue:reportingHierarchyToken:video:captureSessionCreationBlock:
negotiationDataForProtocolVersion:
valueWithRect:
currentDeviceFamily
isAudioMuted
setAudioMuted:
defaultScreenShareAttributes
isOneToOneEnabled
setOneToOneModeEnabled:withCompletionBlock:
presentationInfo
setPresentationInfo:
setIsWindowed:
setSelectiveScreenUUID:
setScreenCaptureDisplayID:
avcScreenCapture
stopCapture
captureSessionQueue
addBlockToCaptureSessionQueue:
sessionUpdateCompletionQueue
avcScreenCaptureConfigurationForScreenAttributes:
setAvcScreenCapture:
captureSessionCreationBlock
startCapture
setSessionMode:
updateConfiguration:
remoteParticipantsByIdentifier
initWithParticipantID:data:delegate:queue:
setVideoPositionalInfo:
addParticipant:
pendingRemovedParticipantsByID
setVideoQuality:
setVisibilityIndex:
setProminenceIndex:
beginParticipantConfiguration
endParticipantConfiguration
setHasCalledStop:
session:didStopWithError:metadata:
hasCalledStop
participantID
videoToken
participant:audioEnabled:didSucceed:error:
participant:videoEnabled:didSucceed:error:
participant:screenEnabled:didSucceed:error:
participant:remoteAudioEnabledDidChange:
participant:remoteVideoEnabledDidChange:
participant:remoteScreenEnabledDidChange:
participant:audioPaused:didSucceed:error:
participant:videoPaused:didSucceed:error:
participant:remoteAudioPausedDidChange:
participant:remoteVideoPausedDidChange:
participant:mediaPrioritiesDidChange:
participant:spatialAudioSourceIDDidChange:
screenCapture:didStop:withError:
screenCapture:didStart:withError:
serverDidDisconnect:
session:uplinkRateAdaptationInfoDidChange:
session:downlinkRateAdaptationInfoDidChange:
sessionServerDidDisconnect:
session:addParticipant:didSucceed:error:
session:removeParticipant:didSucceed:error:
session:didUpdate:configuration:error:
session:audioEnabled:didSucceed:error:
session:videoEnabled:didSucceed:error:
session:screenEnabled:didSucceed:error:
session:audioPaused:didSucceed:error:
session:videoPaused:didSucceed:error:
session:frequencyLevelsDidChange:
session:mediaPrioritiesDidChange:
session:oneToOneEnabled:didSucceed:error:
setScreenEnabled:forParticipantWithIdentifier:
T@"NSData",R,C,N
TB,N,GisAudioReady
T@"AVCSessionConfiguration",R,N
T@"TUCallScreenShareAttributes",R,N
_audioReady
_hasCalledStop
_remoteParticipantsByIdentifier
_pendingRemovedParticipantsByID
_sessionUpdateCompletionQueue
_captureSessionQueue
_captureSessionCreationBlock
_avcScreenCapture
T@"AVCSession",R,N,V_session
T@"<CSDAVCSessionDelegate>",R,W,N,V_delegate
T@"NSMutableDictionary",R,N,V_remoteParticipantsByIdentifier
T@"NSMutableDictionary",R,N,V_pendingRemovedParticipantsByID
T@"NSMutableArray",R,N,V_sessionUpdateCompletionQueue
T@"NSMutableArray",R,N,V_captureSessionQueue
T@?,R,C,N,V_captureSessionCreationBlock
TB,N,V_hasCalledStop
T@"AVCScreenCapture",&,N,V_avcScreenCapture
TB,N,GisAudioReady,V_audioReady
T@"CSDConversationParticipant",R,N
initWithSessionProvider:isInitiator:remoteFromID:remoteProtocolVersion:
receivedInvitationAccept
setReceivedInvitationAccept:
setRemoteFromID:
_receivedInvitationAccept
_remoteFromID
T@"NSString",C,N,V_remoteFromID
TB,N,V_receivedInvitationAccept
stringByReplacingOccurrencesOfString:withString:
hasCellularSettingsRemediation
hasWiFiSettingsRemediation
hasDateAndTimeSettingsRemediation
hasLocationSettingsRemediation
didPrepareHandler
didStartHandler
setReceivedSuccessfulDidStart:
didStopHandler
receivedSuccessfulDidStart
_host
_usingBaseband
_audioDisabled
_receivedSuccessfulDidStart
_preparedToStop
_transport
_didPrepareHandler
_didStartHandler
_didStopHandler
TB,N,V_receivedSuccessfulDidStart
T@"NSString",C,N,V_identifier
T@"CSDIDSTransport",&,N,V_transport
host
TB,N,GisHost,V_host
usingBaseband
TB,N,GisUsingBaseband,V_usingBaseband
audioDisabled
TB,N,GisAudioDisabled,V_audioDisabled
T@"VCCapabilities",R,C,N
preparedToStop
TB,N,GisPreparedToStop,V_preparedToStop
T@?,C,N,V_didPrepareHandler
T@?,C,N,V_didStartHandler
T@?,C,N,V_didStopHandler
initWithQueue:shouldRegisterForECBMNotification:
initWithQueue:coreTelephonyClient:emergencyCallbackCapabilities:
setEmergencyCallbackCapabilitiesDidChange:
emergencyCallbackCapabilities
localThumperDeviceID
emergencyCallbackPossible
_subscriptionWithUUID:
coreTelephonyClient
setSubscription:capability:enabled:info:
subscriptions
lastSavedAccountIDByCapability
associatedThumperAccountID
setCapability:enabled:info:
addSecondaryThumperDeviceWithIDSDeviceIdentifier:toSubscription:
removeSecondaryThumperDeviceWithIDSDeviceIdentifier:fromSubscription:
invalidateProvisioningURL
recheckAccountStatusForSubscription:capability:
labelID
csCallingCapabilitiesState
setCurrentlyAvailable:
setEmergencySupported:
setEmergencyCurrentlyAvailable:
initWithCapabilityInfo:
setVoLTECallingCapabilitiesState:
setWiFiCallingCapabilitiesState:
setAssociated:
telephonySubscriptions
preferredVoiceSubscriptionUUID
setSupportsDefaultPairedDevice:
setThumperCallingCapabilitiesState:
_updateSystemCapabilitiesStateForSubscription:capabilitiesState:
_updateCallCapabilitiesForSubscription:capabilitiesState:
_updateThumperAccountState
_updateSubscriptions
_senderIdentityCapabilitiesStateForSubscription:
initWithSenderIdentityUUID:
setApprovedSecondaryDeviceIDs:
setLocalDeviceID:
setSubscriptions:
_updateEmergencyCallbackModeEnabledState
callCapabilitiesForSubscription:
setCallCapabilities:forSenderIdentityCapabilitiesState:
capabilityInfoForSubscription:capability:
setCapabilityInfo:forSubscription:senderIdentityCapabilitiesState:
systemCapabilitiesForSubscription:
thumperDeviceInfo
setCapabilitiesValid:
uppercaseString
setLocalThumperDeviceID:
setLocalThumperAccounts:
setSecondaryThumperAccounts:
setAssociatedThumperAccountID:
shouldUpdateSubscriptions
isEqualToArray:
subscriptionsDidChangeForClient:
client:subscription:callCapabilitiesDidChange:
client:capabilitiesDidChange:
client:subscription:capabilitiesDidChange:
emergencyCallbackModeDidChangeForAllSubscriptionsForClient:
invalidateAndRefreshVoLTECallingCapabilitiesForSenderIdentityWithUUID:
secondaryThumperAccountForRegisteredDeviceID:
_capabilitiesValid
_emergencyCallbackModeEnabled
_secondaryThumperAccounts
_senderIdentityCapabilitiesStateByUUID
_localThumperDeviceID
_subscriptions
_lastSavedAccountIDByCapability
_coreTelephonyClient
_emergencyCallbackCapabilities
_localThumperAccounts
capabilitiesValid
TB,N,GareCapabilitiesValid,V_capabilitiesValid
T@"NSSet",C,N,V_subscriptions
T@"NSDictionary",C,N,V_senderIdentityCapabilitiesStateByUUID
T@"NSMutableDictionary",R,N,V_lastSavedAccountIDByCapability
T@"CSDCoreTelephonyClient",R,N,V_coreTelephonyClient
T@"<CSDEmergencyCallbackCapabilities>",R,N,V_emergencyCallbackCapabilities
T@"NSString",C,N
T@"NSString",C,N,V_localThumperDeviceID
T@"NSArray",C,N,V_localThumperAccounts
T@"NSArray",C,N,V_secondaryThumperAccounts
emergencyCallbackModeEnabled
TB,N,GisEmergencyCallbackModeEnabled,V_emergencyCallbackModeEnabled
T@"<CSDTelephonyCallCapabilitiesDelegate>",W,N,V_delegate
TB,R,N,GisEmergencyCallbackPossible
setUniqueIdentifier:
hasUniqueIdentifier
setDeviceType:
setHasDeviceType:
hasDeviceType
deviceTypeAsString:
StringAsDeviceType:
setProtoCurrentlyPicked:
setHasProtoCurrentlyPicked:
hasProtoCurrentlyPicked
setProtoGuest:
setHasProtoGuest:
hasProtoGuest
setProtoSupportsRelay:
setHasProtoSupportsRelay:
hasProtoSupportsRelay
protoCurrentlyPicked
protoGuest
protoSupportsRelay
_deviceType
_uniqueIdentifier
_protoCurrentlyPicked
_protoGuest
_protoSupportsRelay
T@"NSString",&,N,V_uniqueIdentifier
Ti,N,V_deviceType
TB,N,V_protoCurrentlyPicked
TB,N,V_protoGuest
TB,N,V_protoSupportsRelay
dtmfSoundPlayer
attemptToPlayKey:
_setAllCallsToHeldExceptCall:
_dtmfSoundPlayer
T@"TUDTMFSoundPlayer",R,N,V_dtmfSoundPlayer
activeParticipantsCount
clearActiveParticipants
activeParticipantsAtIndex:
clearAddedMembers
addedMembersAtIndex:
clearInvitationPreferences
invitationPreferencesAtIndex:
removedMembersCount
clearRemovedMembers
removedMembersAtIndex:
setUnicastConnectorBlob:
activeParticipantsType
addedMembersType
invitationPreferencesType
removedMembersType
setHasShouldSuppressInCallUI:
hasShouldSuppressInCallUI
setHasDisconnectedReason:
hasDisconnectedReason
setHasIsLetMeInApproved:
hasLetMeInDelegationHandle
hasLetMeInDelegationUUID
setHasEnclosedEncryptedType:
enclosedEncryptedTypeAsString:
StringAsEnclosedEncryptedType:
hasUnicastConnectorBlob
setActiveParticipants:
setAddedMembers:
setRemovedMembers:
unicastConnectorBlob
_activeParticipants
_addedMembers
_conversationGroupUUIDString
_disconnectedReason
_enclosedEncryptedType
_encryptedMessage
_letMeInDelegationHandle
_letMeInDelegationUUID
_removedMembers
_unicastConnectorBlob
_isLetMeInApproved
T@"NSMutableArray",&,N,V_activeParticipants
T@"NSString",&,N,V_conversationGroupUUIDString
T@"NSMutableArray",&,N,V_addedMembers
TI,N,V_disconnectedReason
TB,N,V_isLetMeInApproved
T@"CSDMessagingEncryptedConversationMessage",&,N,V_encryptedMessage
T@"NSString",&,N,V_letMeInDelegationHandle
T@"NSString",&,N,V_letMeInDelegationUUID
Ti,N,V_enclosedEncryptedType
T@"NSMutableArray",&,N,V_invitationPreferences
T@"NSMutableArray",&,N,V_removedMembers
T@"NSData",&,N,V_unicastConnectorBlob
setTURouteDeviceType:
setCurrentlyPicked:
setGuest:
supportsRelay
setSupportsRelay:
initWithUniqueIdentifier:name:
tuRouteDeviceType
Tq,N,SsetTURouteDeviceType:
currentlyPicked
TB,N,GisCurrentlyPicked
guest
TB,N,GisGuest
imDaemonDidConnect:
connectToDaemon
initWithService:account:accessGroup:
_initializeLastKnownCallerID
faceTimeIMAccount
hasAlias:
addAlias:
validationStatusForAlias:
validationErrorReasonForAlias:
setDisplayName:
setIMDaemonConnected:
preferredAccountChanged:
keychainItem
readPasswordAndReturnError:
_saveLastKnownFaceTimeCallerID
removeCallerIDFromPreferences
savePassword:error:
isIMDaemonConnected
account:registrationStatusInfoChanged:
account:vettedAliasesChanged:
account:profileChanged:
account:loginChanged:
account:displayNameChanged:
account:pseudonymsChanged:
refreshRegistrationForAccount:
T@"CSDFaceTimeIMAccount",R,N
updateCallerID:
_IMDaemonConnected
_keychainItem
T@"NSString",C,N,V_callerID
IMDaemonConnected
TB,N,GisIMDaemonConnected,V_IMDaemonConnected
T@"CSDKeychainPasswordItem",R,N,V_keychainItem
mockCallFromBlock:
updateWithCall:
setMockBackingProvider:
setMockDisplayProvider:
setMockHandle:
setMockCallStatus:
setMockUniqueProxyIdentifier:
setMockCallUUID:
setMockHostedOnCurrentDevice:
setMockCallerNameFromNetwork:
setMockUsingBaseband:
setMockVoicemail:
setMockContactIdentifiers:
setMockNeedsManualInCallSounds:
setMockPrefersExclusiveAccessToCellularNetwork:
setMockTTYType:
setMockSupportsTTYWithVoice:
setMockIsThirdPartyVideo:
setMockVideoStreamToken:
setMockConversation:
setMockFailureExpected:
setMockDateConnected:
hostOnCurrentDevice
setMockEndpointOnCurrentDevice:
mockCall
setMockService:
setMockIsVideo:
setMockIsVideoPaused:
setMockBlocked:
setMockCallDuration:
setMockEmergency:
setMockOutgoing:
setMockConferenced:
setMockDisconnectedReason:
setMockLocalizedLabel:
setMockCompanyName:
setMockBytesOfDataUsed:
subtype
setMockSubtype:
setMockAudioCategory:
setMockAudioMode:
setMockCallGroupUUID:
setMockProviderContext:
setMockProviderErrorCode:
setMockDisplayContext:
setMockHasStartedOutgoing:
setMockHasSentInvitation:
setMockConnecting:
setMockConnected:
setMockUplinkWasExplicitlyMuted:
setMockMayRequireBreakBeforeMake:
setMockAudioInterruptionProviderType:
setMockDisplayName:
setMockDateCreated:
setMockProviderProcessIdentifier:
audioInterruptionActivationStateObserver
setMockAudioInterruptionActivationStateObserver:
setMockBackingCallSource:
setMockInitialLinkType:
setMockCallRelaySupport:
setMockShouldSuppressInCallUI:
setMockJunkConfidence:
setMockKnownCaller:
_mockIsVideo
_mockIsVideoPaused
_mockHostedOnCurrentDevice
_mockEndpointOnCurrentDevice
_mockBlocked
_mockVoicemail
_mockEmergency
_mockFailureExpected
_mockSOS
_mockOutgoing
_mockConferenced
_mockUsingBaseband
_mockSupportsTTYWithVoice
_mockNeedsManualInCallSounds
_mockHasStartedOutgoing
_mockHasSentInvitation
_mockConnecting
_mockConnected
_mockUplinkMuted
_mockUplinkWasExplicitlyMuted
_mockMayRequireBreakBeforeMake
_mockPrefersExclusiveAccessToCellularNetwork
_mockIsThirdPartyVideo
_mockShouldSuppressInCallUI
_mockKnownCaller
_mockConversation
_mockService
_mockCallStatus
_mockTTYType
_mockDisconnectedReason
_mockSubtype
_mockProviderProcessIdentifier
_mockCallRelaySupport
_mockUniqueProxyIdentifier
_mockCallDuration
_mockHandle
_mockLocalizedLabel
_mockCompanyName
_mockCallUUID
_mockCallerNameFromNetwork
_mockBytesOfDataUsed
_mockAudioCategory
_mockAudioMode
_mockCallGroupUUID
_mockBackingProvider
_mockDisplayProvider
_mockProviderContext
_mockProviderErrorCode
_mockDisplayContext
_mockVideoStreamToken
_mockAudioInterruptionProviderType
_mockDisplayName
_mockContactIdentifiers
_mockDateCreated
_mockDateConnected
_mockAudioInterruptionActivationStateObserver
_mockBackingCallSource
_mockInitialLinkType
_mockJunkConfidence
mockService
Ti,N,Gservice,V_mockService
mockCallStatus
Ti,N,GcallStatus,V_mockCallStatus
mockUniqueProxyIdentifier
T@"NSString",C,N,GuniqueProxyIdentifier,V_mockUniqueProxyIdentifier
mockIsVideo
TB,N,GisVideo,V_mockIsVideo
mockIsVideoPaused
TB,N,GisVideoPaused,V_mockIsVideoPaused
mockHostedOnCurrentDevice
TB,N,GisHostedOnCurrentDevice,V_mockHostedOnCurrentDevice
mockEndpointOnCurrentDevice
TB,N,GisEndpointOnCurrentDevice,V_mockEndpointOnCurrentDevice
mockBlocked
TB,N,GisBlocked,V_mockBlocked
mockVoicemail
TB,N,GisVoicemail,V_mockVoicemail
mockCallDuration
Td,N,GcallDuration,V_mockCallDuration
mockEmergency
TB,N,GisEmergency,V_mockEmergency
mockFailureExpected
TB,N,GisFailureExpected,V_mockFailureExpected
mockSOS
TB,N,GisSOS,SsetSOS:,V_mockSOS
mockOutgoing
TB,N,GisOutgoing,V_mockOutgoing
mockConferenced
TB,N,GisConferenced,V_mockConferenced
mockUsingBaseband
TB,N,GisUsingBaseband,V_mockUsingBaseband
mockTTYType
Ti,N,GttyType,V_mockTTYType
mockSupportsTTYWithVoice
TB,N,GsupportsTTYWithVoice,V_mockSupportsTTYWithVoice
mockDisconnectedReason
Ti,N,GdisconnectedReason,V_mockDisconnectedReason
mockHandle
T@"TUHandle",&,N,Ghandle,V_mockHandle
mockLocalizedLabel
T@"NSString",C,N,GlocalizedLabel,V_mockLocalizedLabel
mockCompanyName
T@"NSString",C,N,GcompanyName,V_mockCompanyName
mockCallUUID
T@"NSString",C,N,GcallUUID,V_mockCallUUID
mockCallerNameFromNetwork
T@"NSString",C,N,GcallerNameFromNetwork,V_mockCallerNameFromNetwork
mockBytesOfDataUsed
Tq,N,GbytesOfDataUsed,V_mockBytesOfDataUsed
mockSubtype
Ti,N,Gsubtype,V_mockSubtype
mockNeedsManualInCallSounds
TB,N,GneedsManualInCallSounds,V_mockNeedsManualInCallSounds
mockAudioCategory
T@"NSString",C,N,GaudioCategory,V_mockAudioCategory
mockAudioMode
T@"NSString",C,N,GaudioMode,V_mockAudioMode
mockCallGroupUUID
T@"NSUUID",C,N,GcallGroupUUID,V_mockCallGroupUUID
mockBackingProvider
T@"TUCallProvider",C,N,GbackingProvider,V_mockBackingProvider
mockDisplayProvider
T@"TUCallProvider",C,N,GdisplayProvider,V_mockDisplayProvider
mockProviderContext
T@"NSDictionary",C,N,GproviderContext,V_mockProviderContext
mockProviderErrorCode
Tq,N,GproviderErrorCode,V_mockProviderErrorCode
mockDisplayContext
T@"TUCallDisplayContext",C,N,GdisplayContext,V_mockDisplayContext
mockHasStartedOutgoing
TB,N,GhasStartedOutgoing,V_mockHasStartedOutgoing
mockHasSentInvitation
TB,N,GhasSentInvitation,V_mockHasSentInvitation
mockConnecting
TB,N,GisConnecting,V_mockConnecting
mockConnected
TB,N,GisConnected,V_mockConnected
mockUplinkMuted
TB,N,GisUplinkMuted,SsetUplinkMuted:,V_mockUplinkMuted
mockUplinkWasExplicitlyMuted
TB,N,GuplinkWasExplicitlyMuted,V_mockUplinkWasExplicitlyMuted
mockVideoStreamToken
Tq,N,GvideoStreamToken,V_mockVideoStreamToken
mockMayRequireBreakBeforeMake
TB,N,GmayRequireBreakBeforeMake,V_mockMayRequireBreakBeforeMake
mockAudioInterruptionProviderType
Tq,N,GaudioInterruptionProviderType,V_mockAudioInterruptionProviderType
mockDisplayName
T@"NSString",C,N,GdisplayName,V_mockDisplayName
mockPrefersExclusiveAccessToCellularNetwork
TB,N,GprefersExclusiveAccessToCellularNetwork,V_mockPrefersExclusiveAccessToCellularNetwork
mockContactIdentifiers
T@"NSArray",C,N,GcontactIdentifiers,V_mockContactIdentifiers
mockDateCreated
T@"NSDate",&,N,GdateCreated,V_mockDateCreated
mockDateConnected
T@"NSDate",&,N,GdateConnected,V_mockDateConnected
mockProviderProcessIdentifier
Ti,N,GproviderProcessIdentifier,V_mockProviderProcessIdentifier
mockAudioInterruptionActivationStateObserver
T@"<CXAudioSessionActivationStateObserver>",&,N,GaudioInterruptionActivationStateObserver,V_mockAudioInterruptionActivationStateObserver
mockBackingCallSource
T@"CXCallSource",&,N,GbackingCallSource,V_mockBackingCallSource
mockIsThirdPartyVideo
TB,N,GisThirdPartyVideo,V_mockIsThirdPartyVideo
mockInitialLinkType
TQ,N,GinitialLinkType,V_mockInitialLinkType
mockCallRelaySupport
Ti,N,GcallRelaySupport,V_mockCallRelaySupport
mockShouldSuppressInCallUI
TB,N,GshouldSuppressInCallUI,V_mockShouldSuppressInCallUI
mockJunkConfidence
Tq,N,GjunkConfidence,V_mockJunkConfidence
mockKnownCaller
TB,N,GisKnownCaller,V_mockKnownCaller
mockConversation
TB,N,GisConversation,V_mockConversation
initWithObjectsAndKeys:
ctEmergencyCallbackModeStatusChangedWithUserInfo:
client
getActiveContexts:
_isNSErrorFatal:
activeContexts
voicePreferred
_isCTErrorFatal:
getPhoneServicesDeviceInfo:
getCallCapabilities:error:
context:getCapability:status:with:
context:getSystemCapabilities:
setLegacyCapability:enabled:capabilityInformation:
context:setCapability:enabled:with:
context:addPhoneServicesDevice:withCompletion:
context:removePhoneServicesDevice:withCompletion:
context:recheckPhoneServicesAccountStatus:
mobileCountryCodeForSubscription:error:
mobileNetworkCodeForSubscription:error:
ISOCountryCodeForMobileCountryCode:mobileNetworkCode:
mobileCodesToISOCountryCode
copyMobileCountryCode:error:
copyMobileNetworkCode:error:
setActiveContexts:
context:capabilitiesChanged:
phoneServicesCapabilitiesChanged:
ISOCountryCodeForSubscriptionUUID:
T@"<CSDCoreTelephonyClientDelegate>",W,N
TB,R,N,GisEmergencyCallbackModeEnabled
T@"NSUUID",R,C,N
legacySystemCapabilities
legacyAddSecondaryThumperDeviceWithIDSDeviceIdentifier:
legacyRemoveSecondaryThumperDeviceWithIDSDeviceIdentifier:
legacyRecheckAccountStatusForCapability:
callCapabilitiesChanged:capabilities:
_client
_activeContexts
_mobileCodesToISOCountryCode
T@"CoreTelephonyClient",R,N,V_client
T@"CTXPCContexts",C,N,V_activeContexts
T@"NSMutableDictionary",R,N,V_mobileCodesToISOCountryCode
T@"<CSDCoreTelephonyClientDelegate>",W,N,V_delegate
initWithActivity:uuid:locallyInitiated:timestamp:isFirstJoin:
initWithBundleIdentifier:metadata:applicationContext:activityIdentifier:
initWithMetadata:applicationContext:uuid:activityIdentifier:
setHasAmbiguityState:
hasAmbiguityState
setHasSwappable:
hasSwappable
setHasMergeable:
hasMergeable
setHasHoldAllowed:
hasHoldAllowed
setHasAddCallAllowed:
hasAddCallAllowed
setHasTakingCallsPrivateAllowed:
hasTakingCallsPrivateAllowed
setHasHardPauseAvailable:
hasHardPauseAvailable
setHasEndAndAnswerAllowed:
hasEndAndAnswerAllowed
setHasHoldAndAnswerAllowed:
hasHoldAndAnswerAllowed
setHasSendToVoicemailAllowed:
hasSendToVoicemailAllowed
swappable
hardPauseAvailable
endAndAnswerAllowed
holdAndAnswerAllowed
_ambiguityState
_addCallAllowed
_endAndAnswerAllowed
_hardPauseAvailable
_holdAllowed
_holdAndAnswerAllowed
_mergeable
_sendToVoicemailAllowed
_swappable
_takingCallsPrivateAllowed
TI,N,V_ambiguityState
TB,N,V_swappable
TB,N,V_mergeable
TB,N,V_holdAllowed
TB,N,V_addCallAllowed
TB,N,V_takingCallsPrivateAllowed
TB,N,V_hardPauseAvailable
TB,N,V_endAndAnswerAllowed
TB,N,V_holdAndAnswerAllowed
TB,N,V_sendToVoicemailAllowed
setAccountUUID:
localizedShortName
setLocalizedShortName:
protoUUID
setProtoUUID:
accountUUIDString
setAccountUUIDString:
hasProtoUUID
hasLocalizedShortName
hasAccountUUIDString
_accountUUIDString
_localizedShortName
_protoUUID
T@"NSString",&,N,V_protoUUID
T@"NSString",&,N,V_localizedShortName
T@"NSString",&,N,V_accountUUIDString
initWithQueue:block:
stringRepresentationForTUCallDisconnectedReason:
stringForSignatureType:
stringForIDSSessionEndedReason:
stringForIMAVChatEndedReason:
allTUConversationMembers
reportingControllerServerXPCInterface
reporters
currentAudioAndVideoCallCount
calls
reportingSessionByStreamToken
registeredStream:withAvailability:
didCleanUpForStream:
didStartRequestForStream:withTransactionID:
didReceiveResultsForStream:withTransactionID:
activeConversations
conversationUUIDs
momentsController:registeredStream:withAvailability:
momentsController:didCleanUpForStream:
momentsController:didStartRequestForStream:withTransactionID:
momentsController:didReceiveResultsForStream:withTransactionID:
T@"CSDReportingController",R,N
reportTransactionGroupCompleted:
reportProviderFailedWithAction:forCall:
registeredStream:withAvailability:reply:
didCleanUpForStream:reply:
didStartRequestForStream:withTransactionID:reply:
didReceiveResultsForStream:withTransactionID:reply:
conversationManager:addedActivatedLink:
setReporters:
_reporters
_reportingSessionByStreamToken
_conversationUUIDs
T@"NSMutableArray",&,N,V_reporters
T@"NSMutableDictionary",R,N,V_reportingSessionByStreamToken
T@"NSMutableSet",R,N,V_conversationUUIDs
updateEnabled
handleAXSVoiceOverTouchEnabledNotification:
performAsynchronousBlock:
removeObserver:name:object:
performSynchronousBlock:
voiceOverObserver:didChangeEnabled:
enabled
TB,R,N,GisEnabled
_enabled
T@"NSMapTable",R,N,V_delegateToQueue
TB,N,GisEnabled,V_enabled
addGeneratorDescriptors:
generatorDescriptorsCount
clearGeneratorDescriptors
generatorDescriptorsAtIndex:
generatorDescriptorsType
setShouldCheckAllGenerators:
setHasShouldCheckAllGenerators:
hasShouldCheckAllGenerators
shouldCheckAllGenerators
generatorDescriptors
setGeneratorDescriptors:
_generatorDescriptors
_shouldCheckAllGenerators
TB,N,V_shouldCheckAllGenerators
T@"NSMutableArray",&,N,V_generatorDescriptors
tu_UUIDv5ForString:namespaceUUID:
initWithCHManager:
initWithCHManager:queue:
handleCallHistoryDatabaseChangedNotification:
delegateController
chManager
setOutgoingLocalParticipantUUID:forRecentCallsMatchingPredicate:
enumerateDelegatesUsingBlock:
_chManager
_delegateController
T@"<CSDCHManager>",R,N,V_chManager
T@"TUDelegateController<CSDCallHistoryManagerDelegate>",R,N,V_delegateController
initWithService:
initWithName:service:
initWithName:service:queryController:
addRegistrationDelegate:queue:
_update
idsService
anyActiveAccount
pseudonyms
prefixedURI
accountMatchingSimIdentifier:
accountForTelephonySubscriptionLabelIdentifier:
accountInfo
telephoneNumber
pseudonymPropertiesWithFeatureID:scopeID:expiryDurationInSeconds:
initWithUnprefixedURI:
provisionPseudonymForURI:withProperties:completion:
pseudonymForPseudonymString:
pseudonymURIMap
revokePseudonym:completionHandler:
revokePseudonym:completion:
renewPseudonym:expirationDate:completionHandler:
renewPseudonym:forUpdatedExpiryEpoch:completion:
checkValidityForSelfPseudonymString:
idsQueryController
refreshIDStatusForDestination:service:listenerID:queue:completionBlock:
_noteAction:onHandle:completionHandle:
URIWithPrefixedURI:
FZIDType
reportAction:ofTempURI:fromURI:withCompletion:
removeRegistrationDelegate:
activeAccountsChangedForService:
changeType
service:pseudonymRemoved:
service:pseudonymUpdated:
accountController:accountAdded:
accountController:accountUpdated:
accountController:accountRemoved:
accountController:accountEnabled:
accountController:accountDisabled:
countryCode
hasActiveAccounts
localDeviceUniqueID
T@"<CSDIDSServiceDependencies>",R,N
T@"IDSDevice",R,N
T@"IDSAccount",R,N
T@"CSDIDSService",R,N
idsDeviceID
provisionPseudonymForHandle:featureID:scopeID:expiryDuration:allowedServices:completionHandler:
revokePseudonymString:completionHandler:
renewPseudonymString:expirationDate:completionHandler:
checkValidityForPseudonymString:completion:
noteApprovedHandle:completionHandle:
update
accountController
setIdsQueryController:
setTelephonyCapableDeviceExists:
setRelayCapableDeviceExists:
setDevices:
setPairedDevice:
setAvailableOutgoingRelayCallerIDs:
_telephonyCapableDeviceExists
_relayCapableDeviceExists
_accountController
_idsService
_idsQueryController
_devices
_pairedDevice
_defaultPairedDevice
_availableOutgoingRelayCallerIDs
T@"IDSAccountController",R,N,V_accountController
T@"IDSService",R,N,V_idsService
T@"IDSIDQueryController",&,N,V_idsQueryController
T@"<IDSServicePseudonymDelegate>",&,N,V_delegate
TB,N,V_telephonyCapableDeviceExists
TB,N,V_relayCapableDeviceExists
T@"NSArray",&,N,V_devices
T@"IDSDevice",&,N,V_pairedDevice
T@"IDSDevice",&,N,V_defaultPairedDevice
T@"NSSet",&,N,V_availableOutgoingRelayCallerIDs
T@"NSString",R,C,N,V_name
T@"IDSService",R,N
pairedDeviceUniqueIDOverride
isWatchDevice
isAudioAccessoryDevice
isDeviceInAltMode
TB,R,N,GisPairedDevice
audioAccessoryDevice
TB,R,N,GisAudioAccessoryDevice
deviceInAltMode
TB,R,N,GisDeviceInAltMode
callbackDestinationID
callbackISOCountryCode
senderDestinationID
senderISOCountryCode
csd_callbackHandle
csd_senderHandle
activeSessionForIdentifier:
currentSession
_createSessionToDevices:
_createSessionToDestinations:
initWithAccount:destinations:transportType:
sessions
_createSessionToAllDevicesSupportingProvider:
destinationWithActiveSession
_startSession:withMessage:identifiers:timeout:declineOnError:
_sendMessage:andCancelInvitationIfNecessaryForSession:
_sendMessage:andDeclineInvitationIfNecessaryForSession:
sendMessage:forIdentifier:toDestinations:customizedForRemoteProtocolVersion:waitUntilConnected:completionHandler:
sendMessage:customizedForRemoteProtocolVersion:completionHandler:
sessionForIdentifier:
_destroySession:
waitingSession
acceptInvitationForIdentifier:
setSessions:
_sessions
T@"IDSDestination",R,N
T@"CSDRelayIDSDualSession",R,N
T@"NSMutableArray",&,N,V_sessions
T@"<CSDRelayIDSSessionMessengerDelegate>",W,D,N
initWithQueue:fileTransferController:mediaAssetManager:callCenterObserver:
initWithStreamToken:requesterID:delegate:dispatchQueue:
momentsControllerClientXPCInterface
momentsControllerServerXPCInterface
handleClientDisconnected:
streamTokensByCSDClient
unregisterStreamToken:
isMomentsDisabled
isFaceTimePhotosAvailable
sessionsByToken
moments
newRequestWithMediaType:mode:requesteeID:
transactionID
initWithAVCRequest:session:
setActiveRequest:forTransactionID:
_startTimeoutForMomentsRequestWithTransactionID:
startWithError:
sessionForTransactionID:
activeRequestsByTransactionID
avcRequest
endWithError:
availabilityWithRemoteAvailable:
momentsGenerator
initWithMoments:remoteIDSDestinations:callCenterObserver:
setRemoteIDSDestinations:
initWithAvailability:supportedMediaTypes:
cleanUpForMomentIfNecessary:
didUpdateCapabilities:forVideoStreamToken:
mediaType
requesterID
willCaptureRemoteRequestFromRequesterID:
initWithStreamToken:requesterID:
remoteRequesterIDSDestinationFor:
remoteIDSDestinations
pathExtension
lowercaseString
URLByAppendingPathExtension:
_transferFileAtURL:forSession:request:
_handleReceivedVideoURL:
remoteRequesteeIDSDestinationFor:
fileTransferController
_handleReceivedResourcesAtDirectoryURL:
removeActiveRequestForTransactionID:
shouldPreserveMomentsFile
setIsRegistered:
activeRequestCount
pendingRequestCount
contentsOfDirectoryAtURL:
urlFromResources:withExtension:
initWithPhotosAppAssetIdentifier:
handleRequestResultWithMomentDescriptor:
_saveLivePhotoWithPhotoURL:videoURL:completion:
_saveVideoWithURL:completion:
mediaAssetManager
momentsRequestTimeout
didReceiveLocallyRequestedMomentDescriptor:
isRegionBlocked
setLocalCapabilities:
moments:capabilitiesDidChange:
moments:didFinishRequest:error:
moments:didStartProcessingRequest:error:
moments:didEndProcessingRequest:stillImageURL:movieURL:error:
momentsServerDidDisconnect:
registerXPCClientWithReply:
registerStreamToken:requesterID:remoteIDSDestinations:remoteMomentsAvailable:reply:
unregisterStreamToken:reply:
startRequestWithMediaType:forStreamToken:requesteeID:reply:
endRequestWithTransactionID:reply:
T@"<CSDMomentsControllerLocalCapabilities>",&,N
faceTimePhotosAvailable
TB,R,N,GisFaceTimePhotosAvailable
momentsClient
setMomentsGenerator:
_fileTransferController
_mediaAssetManager
_sessionsByToken
_streamTokensByCSDClient
_momentsClient
_momentsGenerator
T@"<CSDFileTransferring>",R,N,V_fileTransferController
T@"<CSDMediaAssetManaging>",R,N,V_mediaAssetManager
T@"NSMutableDictionary",R,N,V_sessionsByToken
T@"NSMapTable",R,N,V_streamTokensByCSDClient
T@"TUFeatureFlags",R,N,V_featureFlags
T@"<TUMomentsControllerXPCClient>",R,N,V_momentsClient
T@"<CSDMomentsServerBag>",&,N,V_serverBag
T@?,C,N,V_momentsGenerator
T@"<CSDMomentsControllerDelegate>",W,N,V_delegate
initWithClientUUID:transportType:
isInputFrequencyMeteringEnabled
setInputFrequencyMeteringEnabled:
isOutputFrequencyMeteringEnabled
setOutputFrequencyMeteringEnabled:
getIsSendingAudio:callID:error:
setSendingAudio:callID:error:
getIsAudioPaused:callID:error:
setPauseAudio:callID:error:
getIsVideoPaused:callID:error:
setPauseVideo:callID:error:
setConferenceVisualRectangle:forCallID:
setConferenceState:forCallID:
setPeerReportingIdentifier:sessionIdentifier:forCallID:
setCallID:
startConnectionWithCallID:inviteData:isCaller:capabilities:destination:error:
startConnectionWithCallID:usingInviteData:isCaller:relayResponseDict:didOriginateRelayRequest:capabilities:idsSocket:error:
stopCallID:
cancelCallID:
updateCapabilities:forCallID:
sendData:forCallID:encrypted:
conference:withCallID:remoteMediaStalled:
conference:didStartSession:withUserInfo:
conference:didStopWithCallID:error:
conference:updateInputFrequencyLevel:
conference:updateOutputFrequencyLevel:
conference:receivedFirstRemoteFrameForCallID:
conference:remoteScreenAttributesChanged:callID:
conference:remoteVideoAttributesChanged:callID:
conference:remoteAudioPaused:callID:
conference:remoteVideoPaused:callID:
serverDiedForConference:
conference:inititiateRelayRequest:requestDict:
conference:sendRelayUpdate:updateDict:
conference:cancelRelayRequest:requestDict:
conference:videoQualityNotificationForCallID:isDegraded:isRemote:
conference:withCallID:networkHint:
conference:localIPChange:withCallID:
conference:didStartSession:withCallID:error:
conference:didStopWithCallID:error:callMetadata:
conference:withCallID:isSendingAudio:error:
conference:withCallID:didPauseAudio:error:
conference:withCallID:didPauseVideo:error:
conference:didReceiveARPLData:withCallID:
conference:didChangeLocalVariablesForCallID:
conference:remoteAudioEnabled:forCallID:
conference:localAudioEnabled:forCallID:error:
conference:remoteCallingModeChanged:forCallID:
conference:reinitializeCallForCallID:
conference:closeConnectionForCallID:
conference:updateInputMeterLevel:
conference:updateOutputMeterLevel:
conference:isRemoteAudioBelowThreshold:
T@"<CSDAVConferenceProviderDelegate>",W,N
inputFrequencyMeteringEnabled
TB,N,GisInputFrequencyMeteringEnabled
outputFrequencyMeteringEnabled
TB,N,GisOutputFrequencyMeteringEnabled
microphoneMuted
TB,N,GisMicrophoneMuted
_callID
T@"AVConference",R,N,V_conference
Tq,N,V_callID
T@"<CSDAVConferenceProviderDelegate>",W,N,Vdelegate
call
setCall:
completionHandler
_call
_completionHandler
T@"CSDProviderCall",&,N,V_call
T@?,C,N,V_completionHandler
initWithCallProviderManager:delegate:queue:
initWithFilters:
shouldFilterIncomingCall:
shouldDisconnectCall:
initWithCalls:delegate:queue:
initWithIdentifier:bundleIdentifier:
addCallSource:
shouldTrackCall:
callControllerHost
addOrUpdateCall:
removeCall:
startTrackingCall:
processAssertionManager
managedDeviceMonitor
startMonitoring:
stopTrackingCall:
callSourceManager
failOutstandingActionsForCallWithUUID:
stopMonitoring:
faceTimeProviderDelegate
callGroupUUIDToCalls
setDeferCommittingTransactions:
_commitUncommittedTransactions
commitUncommittedTransactions
allActions
_endCall:
cx_incomingCallErrorWithCode:
dateStarted
callUUIDToGroupWith
_providerForCallSource:
_callWithUUID:controllableByCallSource:
_relayCallWithUUID:
_actionRequiresReasonableUserIntent:
cx_requestTransactionErrorWithCode:
_callGroupsWithBackingCallSource:
_shouldAllowRequestedAction:forCallSource:shouldValidateUserIntent:error:
_shouldAllowRequestedTransaction:forCallSource:error:
_performRequestedTransaction:onCallSource:
_callWithUUID:backingCallSource:
addAction:toUncommittedTransactionForCallSource:
_addSupplementalActionsForRequestedTransaction:onCallSource:
answerCall:withRequest:whileDisconnectingCalls:andHoldingCalls:
_deferCommittingTransactionsUntilAfterRunningBlock:
setCode:
setSenderIdentityUUID:
setHandoffContext:
pendingPulledCallContexts
telephonyCallSource
faceTimeCallSource
tinCanCallSource
callSources
deferCommittingTransactions
currentCallGroups
_ISOCountryCodeForCall:
_ISOCountryCodeForCallWithUUID:provider:callUpdate:
_endMutuallyExclusiveCalls:
dndAllowsCall
isFromBlockList
shouldPreferRelayOverDirectSecondaryCalling
requiresAuthentication
pendingCallsToChatUUIDs
shouldFilterCall
callSource:reportedCallWithUUID:endedAtDate:privateReason:failureContext:
_identifiersForCalls:
expediteDeferredEndInterruptionForCallWithUUID:
handleFrequencyDataChanged:inDirection:forCalls:
handleMeterLevelChanged:inDirection:forCalls:
handleBytesOfDataUsedChanged:forCallWithUniqueProxyIdentifier:callHistoryIdentifier:
_processRequestedTransaction:fromCallSource:completion:
_allowRevertingStateForCompletedTransactionGroup:
_processCompletedCallAction:forCall:allowRevertingState:
callSourceFetcher
shouldDisconnectCallForDowntime
screenTimeCallFilter
callClass
callControllerHost:clientWithIdentifier:requestedTransaction:completion:
managedDeviceStateChangedFor:
callSource:registeredWithConfiguration:
callSource:reportedNewIncomingCallWithUUID:update:completion:
callSource:reportedCallWithUUID:updated:
callSource:reportedOutgoingCallWithUUID:sentInvitationAtDate:
callSource:reportedOutgoingCallWithUUID:startedConnectingAtDate:
callSource:reportedOutgoingCallWithUUID:connectedAtDate:
callSource:reportedAudioFinishedForCallWithUUID:
callSource:reportedCallWithUUID:changedFrequencyData:forDirection:
callSource:reportedCallWithUUID:changedMeterLevel:forDirection:
callSource:reportedCallWithUUID:crossDeviceIdentifier:changedBytesOfDataUsed:
callSource:requestedTransaction:completion:
callSourceManager:completedTransactionGroup:
callSourcesChangedForCallSourceManager:
callSource:shouldProcessAction:error:
performCallActions:forCall:
setCallFilterManager:
tinCanProviderDelegate
setScreenTimeCallFilter:
setRouteManager:
setDndAllowsCall:
setShouldPreferRelayOverDirectSecondaryCalling:
setShouldFilterCall:
setShouldDisconnectCallForDowntime:
_deferCommittingTransactions
_callFilterManager
_processAssertionManager
_callSourceManager
_callControllerHost
_faceTimeCallSource
_faceTimeProviderDelegate
_tinCanCallSource
_tinCanProviderDelegate
_callSourceFetcher
_screenTimeCallFilter
_managedDeviceMonitor
_pendingCallsToChatUUIDs
_pendingPulledCallContexts
_routeManager
_dndAllowsCall
_shouldPreferRelayOverDirectSecondaryCalling
_shouldFilterCall
_shouldDisconnectCallForDowntime
T@"CSDVoIPProcessAssertionManager",R,N,V_processAssertionManager
T@"CXCallSourceManager",R,N,V_callSourceManager
T@"CXCallControllerHost",R,N,V_callControllerHost
TB,N,V_deferCommittingTransactions
T@"CXCallSource",R,N
T@"CXInProcessCallSource",R,N,V_faceTimeCallSource
T@"CSDFaceTimeProviderDelegate",R,N,V_faceTimeProviderDelegate
T@"CXInProcessCallSource",R,N,V_tinCanCallSource
T@"<CXProviderDelegatePrivate>",R,N,V_tinCanProviderDelegate
T@"CSDCallSourceFetcher",R,N,V_callSourceFetcher
T@"CSDCallFilterManager",&,N,V_callFilterManager
T@"CSDScreenTimeCallFilter",&,N,V_screenTimeCallFilter
T@"<CSDManagedDeviceMonitor>",R,N,V_managedDeviceMonitor
T@"NSMutableDictionary",R,N,V_pendingCallsToChatUUIDs
T@"NSMutableDictionary",R,N,V_pendingPulledCallContexts
T@"CSDRelayCallDataSource",W,N,V_relayCallDataSource
T@"<CSDRouteManager>",&,N,V_routeManager
T@?,C,N,V_dndAllowsCall
T@?,C,N,V_supportsPrimaryCalling
T@?,C,N,V_shouldPreferRelayOverDirectSecondaryCalling
T@?,C,N,V_shouldFilterCall
T@?,C,N,V_shouldDisconnectCallForDowntime
T@"CSDCallProviderManager",&,N,V_providerManager
queueContext
initWithExportedObject:
setClientManager:
setSynchronous:
clientsByObject
currentConnection
requiredConnectionCapability
setMachServiceName:
initWithMachServiceName:
setXpcListener:
resume
setAsynchronousExportedObjectProxy:
setSynchronousExportedObjectProxy:
addClient:
removeClient:
_performBlock:onClients:coalescedByIdentifier:
filterClientsUsingPredicate:andPerformBlock:
performBlockOnQueue:andWait:
remoteObjectInterface
exportedInterface
exportedObject
interruptionHandler
_connectionEndedHandlerForXPCClient:withCustomBlock:
invalidationHandler
_setQueue:
setTarget:
invoke
_updatedQOSBlockForBlock:
retainArguments
machServiceName
_xpcClientForConnection:
isClientAllowed:
listener:shouldAcceptNewConnection:
clientsEntitledForCapability:
filterClientsEntitledForCapability:andPerformBlock:
performBlockOnQueue:
_performBlock:onClients:
handleInvocation:synchronously:
_remoteObjectInterface
_exportedInterface
_interruptionHandler
_invalidationHandler
_asynchronousExportedObjectProxy
_synchronousExportedObjectProxy
_exportedObject
_requiredConnectionCapability
_clientsByObject
_machServiceName
T^v,R,N
T@"NSMapTable",R,N,V_clientsByObject
T@"NSString",&,N,V_machServiceName
T@"NSXPCListener",&,N,V_xpcListener
T@,&,N,V_asynchronousExportedObjectProxy
T@,&,N,V_synchronousExportedObjectProxy
T@"CSDClient",R,N
T@"NSXPCInterface",&,N,V_remoteObjectInterface
T@"NSXPCInterface",&,N,V_exportedInterface
T@,&,N,V_exportedObject
T@?,C,N,V_interruptionHandler
T@?,C,N,V_invalidationHandler
T@"NSString",C,N,V_requiredConnectionCapability
methodSignatureForSelector:
isSynchronous
forwardInvocation:
_synchronous
T@"CSDClientManager",W,N,V_clientManager
synchronous
TB,N,GisSynchronous,V_synchronous
T@,R,N,V_exportedObject
strongToWeakObjectsMapTable
currentCallSet
uniqueProxyIdentifierToCallTableSemaphore
uniqueProxyIdentifierToCallTable
_postClientNotificationName:forCall:userInfo:
T#,R,N
shouldRegisterCall:
postClientNotificationName:
postClientNotificationName:forCall:
postClientNotificationName:forCall:userInfo:
setUniqueProxyIdentifierToCallTable:
setUniqueProxyIdentifierToCallTableSemaphore:
setCurrentCallSet:
_uniqueProxyIdentifierToCallTable
_uniqueProxyIdentifierToCallTableSemaphore
_currentCallSet
T@"NSMapTable",&,N,V_uniqueProxyIdentifierToCallTable
T@"NSObject<OS_dispatch_semaphore>",&,N,V_uniqueProxyIdentifierToCallTableSemaphore
T@"NSMutableOrderedSet",&,N,V_currentCallSet
T@"CSDCallStateController",R,W,N,V_callStateController
updateCovered
initWithNotificationName:queue:callback:
setCovered:
isCovered
covered
TB,R,N,GisCovered
coveredNotifyObserver
setCoveredNotifyObserver:
_covered
_coveredNotifyObserver
TB,N,GisCovered,V_covered
T@"TUDelegateController",R,N,V_delegateController
T@"<TUNotifyObserver>",&,N,V_coveredNotifyObserver
T@"NSOrderedSet",R,C,N
handleLocalFrequencyChanged:
handleRemoteFrequencyChanged:
handleLocalMeterLevelChanged:
handleRemoteMeterLevelChanged:
handleMutedChanged:
handleSendingAudioChanged:
floatValue
csd_stringWithCSDVoIPApplicationMessageTransportType:
isEqualToMessage:
_payload
_transportType
T@"NSUUID",R,N,V_uuid
T@"NSDictionary",R,C,N,V_payload
Tq,R,N,V_transportType
_socket
_destination
Ti,R,N,V_type
Ti,R,N,V_socket
T@"NSString",R,C,N,V_destination
currentRunLoop
triggers
callChanged
callPassingTest:sortedUsingComparator:
displayedCall
conferenceCall
frontmostCall
frontmostAudioOrVideoCall
existingCallsHaveMultipleProviders
add:
isModernGFTEnabled
isSharePlayVersionCheckEnabled
linkPseudonymExpiry
inactiveLinkPseudonymExpiry
inactiveLinkCacheLimit
activityIdentifierBundleIDMapping
conversationLinkDescriptorDataSourceDelegate
setConversationLinkDescriptorDataSourceDelegate:
addConversationLinkDescriptors:error:
addConversationLinkDescriptors:completion:
addOrUpdateConversationLinkDescriptors:error:
addOrUpdateConversationLinkDescriptors:completion:
conversationLinkDescriptorCountWithPredicate:error:
conversationLinkDescriptorCountWithPredicate:completion:
conversationLinkDescriptorsWithPredicate:limit:offset:error:
conversationLinkDescriptorsWithPredicate:limit:offset:completion:
removeConversationLinkDescriptorsWithPredicate:error:
removeConversationLinkDescriptorsWithPredicate:completion:
setActivated:withRevision:forConversationLinkDescriptorsWithPredicate:error:
setActivated:withRevision:forConversationLinkDescriptorsWithPredicate:completion:
setExpirationDate:withRevision:forConversationLinkDescriptorsWithPredicate:error:
setExpirationDate:withRevision:forConversationLinkDescriptorsWithPredicate:completion:
setInvitedHandles:withRevision:forConversationLinkDescriptorsWithPredicate:error:
setInvitedHandles:withRevision:forConversationLinkDescriptorsWithPredicate:completion:
setName:withRevision:forConversationLinkDescriptorsWithPredicate:error:
setName:withRevision:forConversationLinkDescriptorsWithPredicate:completion:
isSignificantChangeFromAttributes:
defaultDisplayScale
defaultScaleFactor
containsRestrictedHandle:
containsRecentsRestrictedHandle:
isUnknownCall:
sharePlayDisabled
ftvSpatialAudioEnabled
FTUserScore
gondolaBoat
gondolaCreateCallUI
livePhotoXPCServiceEnabled
nonInterruptingCalls
qrPluginEncryptionEnabled
TTRBannerEnabled
suggestionsReloadForSelectedRecipients
requesteeID
rejectWithError:
tu_contactsForContactHandles:keyDescriptors:error:
tu_contactsForHandles:keyDescriptors:error:
unifiedContactWithIdentifier:keysToFetch:error:
unifiedContactsMatchingPredicate:keysToFetch:error:
personFromContact:
contactForIdentifier:keysToFetch:
contactForDestinationId:keysToFetch:
phoneNumber
isDefaultVoiceSIM
slot
mobileCountryCode
mobileNetworkCode
incomingCalls
displayedCalls
displayedAudioAndVideoCalls
conferenceParticipantCalls
callsHostedOrAnEndpointElsewhere
callsOnDefaultPairedDevice
callsWithStatus:
incomingVideoCall
activeVideoCall
currentVideoCall
videoCallWithStatus:
audioOrVideoCallWithStatus:
displayedCallFromCalls:
countOfCallsPassingTest:
currentVideoCallCount
callCountOnDefaultPairedDevice
hasCurrentAudioCalls
hasCurrentVideoCalls
anyCallIsHostedOnCurrentDevice
allCallsAreOfService:
currentAudioAndVideoCallGroups
callGroupsOnDefaultPairedDevice
supportsSecureCoding
encodeWithCoder:
initWithCoder:
initWithCapabilities:callSource:queue:
initWithContactsDataSource:
labeledHandlesForContactWithIdentifier:
setIncludesCallsInRecents:
tinCanProvider
setTopic:
setShouldIgnoreRingerSwitch:
alertWithConfiguration:
play
emergencyCallbackCapabilitiesDidChange
isHomePodFamily
destinationWithDevice:
silenceUnknownCallersEnabled
maxJunkLevel
integerForKey:
handleTrigger:
handleSharePlayTrigger:
momentsStartedRemoteCapture:
handlePendingMessageDidReceiveInviteNotification:
faceTimeAppViewLinkDetailsURLForPseudonym:
executeFetchRequest:
contactStore
actionWithIdentifier:title:options:
categoryWithIdentifier:actions:intentIdentifiers:options:
requestWithIdentifier:content:trigger:
setDestinations:
setDefaultActionURL:
setActiveParticipantHandles:
setBody:
setCategoryIdentifier:
setSound:
setNotificationProviderIdentifier:
soundWithAlertType:
setAlertTopic:
shouldShowInvitationUserNotificationForHandle:
incomingPendingConversations
supportsConversations
setInterruptionLevel:
setThreadIdentifier:
initWithConversationLink:otherInvitedHandles:sendLetMeInRequest:
getDeliveredNotificationsWithCompletionHandler:
request
destinations
setShouldSuppressDefaultAction:
displayFirstName
URLForResource:withExtension:
setCategory:mode:options:error:
setActive:withOptions:error:
setVolume:
activeParticipantHandles
notificationProviderIdentifier
content
setShouldIgnoreDowntime:
trigger
requestWithIdentifier:content:trigger:destinations:
notification
actionIdentifier
setAudioSessionProperties:
setMixingVoiceWithMediaEnabled:
startAudioSessionWithCompletionHandler:
opaqueSessionID
setActivationContext:error:
overrideOutputAudioPort:error:
interruptionPriority
deactivateAndSetInterruptionPriority:error:
setInterruptionPriority:error:
currentProcessIdentifier
processStateChanged
processStatesForCallSource:
mostElevatedApplicationStateForPID:
applicationInfoForApplication:
handlePendingMessageDidReceiveCancelNotification:
messenger
setDateReceivedLetMeIn:
flags
setDestinationDevice:
setFlags:
setPasswordType:
setPromptForPasswordHandler:
setAuthCompletionHandler:
activateWithCompletion:
destinationDevice
tryPassword:
allowContactsOnly
initWithIdentifier:context:
donateSignalWithCompletion:
userContext
keyPathForActiveCall
setObject:forContextualKeyPath:responseQueue:withCompletion:
calleeHandlesKey
groupIDKey
groupNameKey
calleeContactIDsKey
bundleIDKey
initWithCalls:
otherSessionsRequestNoRingtoneInterruption
pickRoute:error:
getPickableRoutesForCategory:mode:completion:
bestGuessPickableRoutesForAnyCall
pickableRoutesForTTY
mainQueue
addObserverForName:object:queue:usingBlock:
stopAudioSession
resetAudioSessionOutputPortOverride
stopPlaying
setCurrentAttributionKey:andApp:
alertDidBeginPlaying:
setShouldRepeat:
setExternalToneFileURL:
setVibrationIdentifier:
setToneIdentifier:
sound
vibration
ignoreMute
callAlert
playWithCompletionHandler:
setPlaybackObserver:
activatedLinks
tu_predicateForConversationLinkDescriptorsWithPseudonym:
doubleForKey:
tu_predicateForConversationLinkDescriptorsWithGroupUUID:
tu_predicateForConversationLinkDescriptorsWithActivated:
orPredicateWithSubpredicates:
tu_predicateForConversationLinkDescriptorsWithOriginatorHandle:
tu_predicateForConversationLinkDescriptorsWithExpirationDateAfter:
tu_predicateForConversationLinkDescriptorsWithPrivateKey:
sendMessageWithDictionary:error:
JSONObjectWithData:options:error:
initWithChar:
initWithInteger:
initWithBool:
initWithSessionInfo:userInfo:frameworksToCheck:
startConfigurationWithCompletionHandler:
__swift_objectForKeyedSubscript:
isFaceTimePhotosRestricted
isFaceTimePhotosEnabled
isPermittedToUseBluetoothAccessories
isPermittedToUsePrivateAPI
callInteractionsDidChangeForManager:
handleCallHistoryDatabaseChangedWithNotification:
predicateForCallsWithUniqueID:
predicateForCallsWithAnyMediaTypes:
iconWithSystemImageName:
actionWithIdentifier:title:options:icon:
_resetCache
intent
contentByUpdatingWithProvider:error:
setShouldAuthenticateDefaultAction:
setShouldBackgroundDefaultAction:
defaultActionURL
disconnectedCause
setPerformDialAssist:
setPerformLocalDialAssist:
setDialAssisted:
initWithRemoteMembers:otherInvitedHandles:
predicateForCallsBetweenStartDate:endDate:
callerNetworkName
callerNameForDisplay
notificationThreadIdentifier
callerIdIsBlocked
interaction
uniqueId
callCountWithPredicate:
speechSynthesizer:didStartSpeechUtterance:
speechSynthesizer:didFinishSpeechUtterance:
speechSynthesizer:didCancelSpeechUtterance:
setMixToUplink:
setNumberOfLoops:
initWithContentsOfURL:error:
setUsesApplicationAudioSession:
audioQueueFlags
setAudioQueueFlags:
setRate:
speakUtterance:
isPlaying
isSpeaking
stopSpeakingAtBoundary:
speechSynthesizer:didPauseSpeechUtterance:
speechSynthesizer:didContinueSpeechUtterance:
speechSynthesizer:willSpeakRangeOfSpeechString:utterance:
carPlayScreenConnectionChanged
sessionDidConnect:
sessionDidDisconnect:
setSessionObserver:
waitForSessionInitialization
startedConnectionAttemptOnTransport:
cancelledConnectionAttemptOnTransport:
session:didUpdateConfiguration:
rectValue
setActiveRequestsByTransactionID:
suggestedNamesForDestinationID:onlySignificant:error:
__swift_setObject:forKeyedSubscript:
localSenderIdentity
contains:
initWithKeysToFetch:
predicateForContactsMatchingHandleStrings:
setPredicate:
executeFetchRequest:error:
storeWithOptions:
routesDidChangeHandler
routeWasPickedHandler
timedOutPickingRouteHandler
audioRouteInformationChangedWithNotification:
audioInterruptionPropertiesChangedWithNotification:
idsDeviceIdentifier
publicIdentifier
destinationWithRapportPublicIdentifier:
mediaSystemIdentifier
effectiveIdentifier
mediaSystemName
localDevice
setLocalDeviceUpdatedHandler:
setDeviceFoundHandler:
setDeviceLostHandler:
setDeviceChangedHandler:
dataActiveAndReachable
wifiAllowedForBundleId:
cellularDataEnabledForBundleId:
initWithArray:
isWiredHeadset
isWiredHeadphones
revision
standardUserDefaults
dataWithPropertyList:format:options:error:
currentIDStatusForDestinations:service:listenerID:queue:completionBlock:
requiredIDStatusForDestinations:service:listenerID:queue:completionBlock:
currentRemoteDevicesForDestinations:service:listenerID:queue:completionBlock:
valueForCapability:
__imHexString
multiwaySupported
multiwayBlocked
userNotificationCenter:didReceiveNotificationResponse:withCompletionHandler:
momentCapturedForStreamToken:requesterID:reply:
userNotificationProviderServerXPCInterface
voicemailsChangedWithNotification:
onlineStatusChangedWithNotification:
subscriptionStateChangedWithNotification:
setBadgeString:withCompletionHandler:
removeDeliveredNotificationsWithIdentifiers:
replaceContentForRequestWithIdentifier:replacementContent:completionHandler:
addNotificationRequest:withCompletionHandler:
setNotificationCategories:
setWantsNotificationResponsesDelivered
userNotificationCenter:willPresentNotification:withCompletionHandler:
userNotificationCenter:openSettingsForNotification:
voicemailInfoAvailableNotification:voicemailInfo:
getVoicemailInfo:completion:
setAttachments:
initWithContactProvider:
startCallIntentByHandleForHandles:
hasAudio
setAudio:
attachmentWithIdentifier:URL:options:error:
isVoiceMailMWI
available
trashVoicemail:
countOfVoicemailsPassingTest:
mailboxType
isRead
messagesForMailboxType:limit:offset:error:
messagesForMailboxType:read:limit:offset:error:
dataForVoicemailWithIdentifier:
isTranscriptionEnabled
isSubscribed
isOnline
isMessageWaiting
contacts
transcriptionState
dataURL
duration
voicemailDatabaseReset:
predicateForCallsWithStatusOriginated:
predicateForCallsWithRemoteParticipantHandleValue:
predicateForCallsWithRemoteParticipantHandleNormalizedValue:
initWithType:value:normalizedValue:
currentSIMsWithError:
initWithSoundType:provider:video:region:
attemptToPlayDescriptor:completion:
sendEventID:event:destinationID:options:completion:
registerEventID:options:handler:
registerRequestID:options:handler:
mediaRouteIdentifier
activeDevices
sendRequestID:request:destinationID:options:responseHandler:
knownIdentifiersByHandleType
verifiedIdentity
controlFlags
setControlFlags:
moments:didEndProcessingRequest:url:error:
deleteItemAndReturnError:
handleCallRemoteParticipantsChanged:
allowableByContactsHandles:
shouldBeAllowedByScreenTimeWhenLimited
shouldBeAllowedDuringGeneralScreenTime
allowedByScreenTime
applicationCurrentlyLimited
initSynchronouslyWithBundleIdentifier:
allowedByContactsHandle
keyEnumerator
initWithBytesNoCopy:length:freeWhenDone:
base64EncodedStringWithOptions:
defaultStore
aa_altDSID
addRemoteMembers:toConversation:
initWithName:knownIdentifiers:
isEligibleForHandoff
mapTableWithKeyOptions:valueOptions:
plistRepresentation
CSDMessagingEncryptedConversationMessage
NSCopying
Additions
CSDMessagingConversationLink
CSDRelayController
CSDOrientationMonitor
BKSAccelerometerDelegate
NSObject
CSDCallCenterObserverDelegate
CSDTransactionManager
CSDCrashReporter
CSDVoIPProcessAssertion
CSDAVConference
CSDAVConferenceProviderDelegate
CSDAVConferenceConfiguration
CSDMessagingConversationParticipant
CSDUserActivityManager
TUCallProviderManagerDelegate
CSDUserActivityCommunicatorDelegate
CSDAggregateDictionaryReporter
CSDReporter
CSDProximityController
CSDProximitySensorObserverDelegate
TUDelegate
TURouteControllerDelegate
FaceTime
CSDFaceTimeIMAVProviderDelegate
IMAVControllerDelegate
CSDDualFaceTimeProviderDelegate
CSDFaceTimeProviderDelegate
CXProviderDelegatePrivate
CXProviderDelegate
CSDFaceTimeIDSService
CSDConversation
CSDIDSGroupSessionDelegate
CPActivitySessionManagerDelegate
CSDAVCSessionDelegate
CSDRelayIDSService
CSDMessagingCallModel
CSDRelayClientController
CSDRelayMessagingControllerClientMessagingDelegate
CSDMessagingHandle
CSDProviderCall
CSDPauseDigitsQueueDelegate
CSDCallStateMonitor
CSDPendingConversation
CSDStatusBarManager
CSDStatusBarResolverDelegate
CSDNeighborhoodActivityConduitXPCServer
CSDNeighborhoodActivityConduitDelegate
TUNeighborhoodActivityConduitXPCServer
CSDAdditions
CSDCarrierBundlePhoneNumberProvider
CSDCarrierBundlePhoneNumberProviderController
CoreTelephonyClientDelegate
CSDIDSGroupSessionProvider
IDSGroupSessionDelegate
IDSSessionDelegatePrivate
IDSSessionDelegate
CSDIDSSessionProvider
CSDRelayIDSDualSessionData
CSDRelayIDSDualSession
CSDMessagingLinkSyncMessage
CSDThumperCapabilitiesMonitor
TUCallCapabilitiesDelegatePrivate
TUCallCapabilitiesDelegate
CSDConversationJoinContext
CSDAccountsController
IDSServiceDelegatePrivate
IDSServiceDelegate
CSDIDSDualSessionProvider
CSDPauseDigits
CSDCallProviderManagerXPCServer
TUCallProviderManagerXPCServer
CSDCallProviderManagerDelegate
CSDFaceTimeVideoIDSService
CSDIDSChat
CSDIDSDualSessionDelegate
CSDAVConferenceDelegate
CSDMessagingConversationActivityContext
CSDCallDirectoryManager
CXCallDirectoryNSExtensionManagerDelegate
TinCan
CSDCTCallCapabilities
CSDMessagingRelayMessage
CSDIncomingCallFilterDataSource
CSDMessagingCallProvider
CSDRelayMessagingController
CSDRelayIDSMessengerDelegate
CSDRelayIDSSessionMessengerDelegate
CSDDaemon
TUConfigurationDelegate
CSDAbstractIDSProviderDelegate
CSDIDSChatDelegate
CSDMessagingAVConferenceInviteData
CSDIDSDualSession
CSDIDSDualSessionProviderDelegate
CSDRelayIDSMessenger
CSDThumperAccount
NSMutableCopying
CSDMutableThumperAccount
CSDFaceTimeIDSProviderDelegate
CSDRelayCommonController
CSDRelayMessagingControllerCommonMessagingDelegate
CSDFileTransferController
CSDFileTransferring
CSDCallSourceFetcher
CSDThumperPushHandlerAdditions
CSDThumperPushHandler
CSDPinExchangeDelegate
CSDMessagingCall
CSDRelayCall
CSDCallHistoryManagerXPCServer
CSDCallHistoryManagerDelegate
TUCallHistoryManagerXPCServer
CSDPauseDigitsQueue
CSDXPCClient
CSDTTYProviderObserver
CSDRelayPairedDeviceMessenger
CSDMessagingConversationParticipantDidJoinContext
CSDMediaAssetManager
CSDMediaAssetManaging
CSDPowerLogReporter
CSDFaceTimeProviderDelegateManagerDelegate
CSDVoIPApplicationMessageContext
PKVoIPXPCClient
CXNetworkExtensionVoIPXPCClient
CSDVoIPApplication
CSDMessagingConversationActivitySession
CSDMessagingPersonNameComponents
CSDMessagingLinkSyncUpdateMessage
CSDStatusBarResolver
TUConversationManagerDelegate
CSDRelayConferenceInterface
CSDSandboxExtensionDirectory
CSDPinExchangeController
CSDCallCapabilities
TUCallCapabilitiesXPCServer
TUCallCapabilitiesXPCServerActions
CSDAccountsControllerDelegate
CSDTelephonyCallCapabilitiesDelegate
CSDThumperCapabilitiesMonitorDataSource
CSDCall
TUDynamicCallDisplayContextDelegate
CXAudioSessionActivationStateObserver
CSDRouteManager
TUAudioDeviceControllerDelegate
CSDMessagingConversationMember
CSDMessagingConversation
CSDMessagingConversationReport
CSDConversationManager
CSDConversationDelegate
CSDPendingMembershipTrackerMessenger
CSDPendingMembershipTrackerDelegate
CSDConversationNoticeDelegate
CSDConversationLinkManagerDelegate
CSDScreenSharingActivityManagerDelegate
CPApplicationPolicyManagerDelegate
CPSystemStateObserverObserver
CPConversationManagerDataSource
CSDCHRecentCall
CSDApplicationRecord
CSDMessagingCallMessage
CSDAudioRouteCollection
CSDFaceTimeAudioIDSService
CSDMessagingConversationActivity
CSDMessagingConversationInvitationPreference
VoIPApplicationAdditions
CSDMessagingCallCapabilitiesState
CSDVoIPProcessAssertionManager
CSDIncomingCallFilter
CSDAppleIDUtilities
CSDRecentsController
CSDMessagingConversationLinkGeneratorDescriptor
CSDIDSSession
CSDMessagingCallDisplayContext
CSDUserActivityCommunicator
UABestAppSuggestionManagerDelegate
CSDUserConfigurationMigrator
CSDThumperIDSService
CSDIDSGroupSession
CSDIDSGroupSessionProviderDelegate
CSDCallStateController
TUCallServicesXPCServer
TUCallCenterXPCServer
TUCallServicesProxyCallActions
TUCallServicesClientCapabilitiesXPCServer
TUAudioDeviceControllerXPCServer
TURouteControllerXPCServer
TUCallFilterControllerXPCServer
CSDRelayMessagingControllerDelegate
CSDCallDelegate
CSDDeviceLockStateObserver
CSDVoIPApplicationMonitor
CXNetworkExtensionVoIPXPCServer
PKVoIPXPCServer
CSDVoIPApplicationController
APSConnectionDelegate
CXNetworkExtensionMessageControllerHostDelegate
CXNotificationServiceExtensionHostDelegate
CSDConversationNoticeManager
CSDConversationParticipant
CSDCallDataSourceMap
CSDMessagingLabeledHandle
CSDClient
CSDMessagingConversationActivityMetadata
CSDConversationManagerXPCServer
TUConversationManagerXPCServer
TUConversationMediaControllerXPCServer
TUConversationMessagesGroupProviderXPCServer
CSDConversationManagerDelegate
CSDCallProviderManager
CSDCallProviderManagerDataSourceDelegate
CSDFaceTimeConversationProviderDelegate
CSDRaiseToAnswerController
CSDRelayHostController
CSDRelayMessagingControllerHostMessagingDelegate
CSDUserActivity
CSDCallProviderManagerDataSource
CSDMomentsReportingSession
CSDSignposts
CSDAVCSession
AVCSessionParticipantDelegate
AVCScreenCaptureDelegate
AVCSessionDelegate
AVCRateAdaptationDelegate
CSDExternalIDSDualSession
CSDRelayConferenceConnection
CSDTelephonyCallCapabilities
CSDCoreTelephonyClientDelegate
CSDMessagingRoute
CSDRelayCallDelegate
CSDMessagingConversationMessage
CSDFaceTimeIMAccount
IDSAccountRegistrationDelegate
CSDMockCall
CSDCoreTelephonyClient
CoreTelephonyClientCapabilitiesDelegate
CSDMessagingCallModelState
CSDMessagingSenderIdentity
CSDABCReporter
CSDReportingController
CSDMomentsReportingSessionDelegate
CSDReporterDataSource
CSDMomentsControllerDelegate
CSDVoiceOverObserver
CSDMessagingLinkSyncCheckInMessage
CSDCallHistoryManager
CSDIDSService
IDSAccountControllerDelegate
Messaging
CSDRelayIDSSessionMessenger
CSDRelayIDSDualSessionDelegate
CSDMomentsController
CSDFileTransferringDelegate
CSDAVCMomentsDelegate
TUMomentsControllerXPCServer
CSDAVConferenceProvider
AVConferenceDelegate
CSDPulledCallContext
CSDProviderCallDataSource
CXCallControllerHostDelegate
CSDCallSourceFetcherDataSource
CSDManagedDeviceMonitorDelegate
CXCallSourceManagerDelegate
CXCallSourceUpdates
CSDProviderCallDelegate
CSDClientManager
NSXPCListenerDelegate
CSDClientManagerExportedObjectProxy
CSDCallDataSource
CSDProximitySensorObserver
CSDRelayCallDataSource
CSDVoIPApplicationMessage
CSDVoIPApplicationMessageAdditions
CSDIDSTransport
@24@0:8^{_NSZone=}16
B16@0:8
@16@0:8
B24@0:8@16
v24@0:8@16
Q16@0:8
v16@0:8
@"NSData"
@36@0:8i16@20@28
@36@0:8@16i24@28
@28@0:8@16B24
#16@0:8
@24@0:8Q16
v24@0:8d16
v20@0:8B16
i16@0:8
v20@0:8i16
@20@0:8i16
i24@0:8@16
d16@0:8
@"CSDMessagingConversationLinkGeneratorDescriptor"
@"NSString"
@"NSMutableArray"
@"CSDMessagingHandle"
{?="creationDateEpochTime"b1"pseudonymExpirationDateEpochTime"b1"linkLifetimeScope"b1"isActivated"b1}
@"CSDCallStateController"
@24@0:8:16
@32@0:8:16@24
@40@0:8:16@24@32
B24@0:8#16
B24@0:8:16
Vv16@0:8
^{_NSZone=}16@0:8
B24@0:8@"Protocol"16
@"NSString"16@0:8
v48@0:8@16d24f32f36f40i44
v32@0:8@16q24
v48@0:8@"BKSAccelerometer"16d24f32f36f40i44
v32@0:8@"BKSAccelerometer"16q24
v32@0:8@16@24
v32@0:8@"<CSDCallCenterObserver>"16@"CSDCall"24
v24@0:8@"<CSDCallCenterObserver>"16
@24@0:8@16
q16@0:8
v24@0:8q16
@"BKSAccelerometer"
@"<CSDCallCenterObserver>"
v32@0:8@16@"NSString"24
@"NSMapTable"
@"NSObject<OS_dispatch_queue>"
v32@0:8@16i24I28
v32@0:8i16I20@24
v24@0:8@?16
@"BKSProcessAssertion"
v36@0:8@16B24@28
v40@0:8@16@24@32
v28@0:8@16f24
v28@0:8@16B24
v40@0:8@16@24q32
v36@0:8@"<CSDAVConferenceProvider>"16B24@"NSError"28
v40@0:8@"<CSDAVConferenceProvider>"16@"NSError"24@"NSDictionary"32
v24@0:8@"<CSDAVConferenceProvider>"16
v32@0:8@"<CSDAVConferenceProvider>"16@"NSData"24
v28@0:8@"<CSDAVConferenceProvider>"16f24
v28@0:8@"<CSDAVConferenceProvider>"16B24
v40@0:8@"<CSDAVConferenceProvider>"16@"NSData"24q32
{CGSize=dd}16@0:8
v32@0:8{CGSize=dd}16
I16@0:8
v20@0:8I16
v24@0:8@"CSDAVConferenceConfiguration"16
v24@0:8@"CSDIDSTransport"16
v24@0:8@"VCCapabilities"16
v24@0:8@"NSData"16
v32@0:8@"NSString"16@"NSString"24
@"<CSDAVConferenceDelegate>"16@0:8
v24@0:8@"<CSDAVConferenceDelegate>"16
@"NSObject<OS_dispatch_queue>"16@0:8
v24@0:8@"NSObject<OS_dispatch_queue>"16
@"NSDictionary"16@0:8
v24@0:8@"NSDictionary"16
@"NSError"16@0:8
@"NSDate"16@0:8
v32@0:8q16@24
v20@0:8f16
q32@0:8@16^@24
@?16@0:8
@"<CSDAVConferenceDelegate>"
@"NSDate"
@"NSNumber"
@"NSDictionary"
@"NSError"
@"CSDAVConferenceConfiguration"
@"<CSDAVConferenceProvider>"
{CGSize="width"d"height"d}
@"VCCapabilities"
@"NSUUID"
@"RTCSecureHierarchyToken"
v24@0:8Q16
{?="identifier"b1"options"b1"sharePlayProtocolVersion"b1"version"b1"isGondolaCallingAvailable"b1"isLightweight"b1"isMirageAvailable"b1"isMomentsAvailable"b1"isScreenSharingAvailable"b1}
i24@0:8q16
v24@0:8@"TUCallProviderManager"16
v28@0:8I16@20
v28@0:8I16@"NSString"20
@"CSDUserActivityCommunicator"
@"CSDUserActivity"
v40@0:8@16@24Q32
v36@0:8@16@24B32
v36@0:8@16@24i32
v44@0:8@16@24@32B40
v48@0:8@16@24@32@40
v40@0:8@"CSDReportingController"16@"CSDCall"24Q32
v32@0:8@"CSDReportingController"16@"CSDCall"24
v24@0:8@"CSDReportingController"16
v36@0:8@"CSDReportingController"16@"CSDMessagingRelayMessage"24B32
v32@0:8@"CSDReportingController"16@"CXTransactionGroup"24
v40@0:8@"CSDReportingController"16@"CXAction"24@"CSDCall"32
v32@0:8@"CSDReportingController"16@"CSDMomentsUsageReport"24
v40@0:8@"CSDReportingController"16@"TURoute"24@"CSDCall"32
v36@0:8@"CSDReportingController"16@"NSString"24i32
v32@0:8@"CSDReportingController"16@"TUConversation"24
v40@0:8@"CSDReportingController"16@"NSArray"24@"TUConversation"32
v32@0:8@"CSDReportingController"16@"CSDIDSChat"24
v40@0:8@"CSDReportingController"16@"NSArray"24@"NSUUID"32
v32@0:8@"CSDReportingController"16@"NSString"24
v44@0:8@"CSDReportingController"16@"NSUUID"24@"RTCSecureHierarchyToken"32B40
v48@0:8@"CSDReportingController"16@"TUConversationActivitySession"24@"NSDate"32@"NSDate"40
v32@0:8@"CSDReportingController"16@"TUConversationLink"24
v36@0:8@"CSDReportingController"16@"TUConversation"24B32
@"<CSDReporterDataSource>"16@0:8
v24@0:8@"<CSDReporterDataSource>"16
v28@0:8@"<CSDProximitySensorObserver>"16B24
v24@0:8@"TURouteController"16
@40@0:8@16@24@32
@64@0:8@16@24@32@40@48@56
@"TURouteController"
@"<CSDOrientationObserver>"
@"<CSDProximitySensorObserver>"
@"<CSDVoiceOverObserver>"
v24@0:8@"IMAVChat"16
v32@0:8@"IMHandle"16q24
B32@0:8@16@24
v24@0:8@"CXProvider"16
B32@0:8@"CXProvider"16@"CXTransaction"24
v32@0:8@"CXProvider"16@"CXStartCallAction"24
v32@0:8@"CXProvider"16@"CXAnswerCallAction"24
v32@0:8@"CXProvider"16@"CXEndCallAction"24
v32@0:8@"CXProvider"16@"CXSetHeldCallAction"24
v32@0:8@"CXProvider"16@"CXSetMutedCallAction"24
v32@0:8@"CXProvider"16@"CXSetGroupCallAction"24
v32@0:8@"CXProvider"16@"CXPlayDTMFCallAction"24
v32@0:8@"CXProvider"16@"CXAction"24
v32@0:8@"CXProvider"16@"AVAudioSession"24
v32@0:8@"CXProvider"16@"CXSendMMIOrUSSDCodeAction"24
v32@0:8@"CXProvider"16@"CXJoinCallAction"24
v32@0:8@"CXProvider"16@"CXSetTTYTypeCallAction"24
v32@0:8@"CXProvider"16@"CXSetSendingVideoCallAction"24
v32@0:8@"CXProvider"16@"CXSetSharingScreenCallAction"24
v32@0:8@"CXProvider"16@"CXSetScreenShareAttributesCallAction"24
v32@0:8@"CXProvider"16@"CXEnableVideoCallAction"24
v32@0:8@"CXProvider"16@"CXSetRelayingCallAction"24
v32@0:8@"CXProvider"16@"CXPullCallAction"24
v32@0:8@"CXProvider"16@"CXSetVideoPresentationSizeCallAction"24
v32@0:8@"CXProvider"16@"CXSetVideoPresentationStateCallAction"24
B24@0:8@"NSUUID"16
@"NSUUID"24@0:8@"NSUUID"16
v24@0:8@"NSUUID"16
v28@0:8@16I24
v56@0:8{CGSize=dd}16{CGSize=dd}32@48
I24@0:8q16
@"<CSDFaceTimeProviderDelegateManagerDelegate>"
@"CXProvider"
@"NSMutableOrderedSet"
v44@0:8@16B24@28@36
v36@0:8@16@24I32
v44@0:8@16@24I32S36B40
v32@0:8@"CSDIDSGroupSession"16@"NSDictionary"24
v44@0:8@"CSDIDSGroupSession"16B24@"NSSet"28@"NSError"36
v32@0:8@"CSDIDSGroupSession"16@"NSError"24
v24@0:8@"CSDIDSGroupSession"16
v36@0:8@"CSDIDSGroupSession"16@"NSError"24I32
v32@0:8@"CSDIDSGroupSession"16@"NSArray"24
v44@0:8@"CSDIDSGroupSession"16@"NSArray"24I32S36B40
v40@0:8@16@24@?32
@40@0:8@16Q24@32
v32@0:8@"<CPActivitySessionManager>"16@"TUConversationActivitySession"24
v32@0:8@"<CPActivitySessionManager>"16@"TUConversationActivityEvent"24
v40@0:8@"<CPActivitySessionManager>"16@"NSString"24@?<v@?@>32
v40@0:8@"<CPActivitySessionManager>"16@"NSArray"24@"NSString"32
@"TUConversationParticipant"40@0:8@"<CPActivitySessionManager>"16Q24@"NSString"32
@"NSString"24@0:8@"<CPActivitySessionManager>"16
v48@0:8@"<CPActivitySessionManager>"16@"TUConversationActivitySession"24@"NSDate"32@"NSDate"40
v36@0:8@"<CPActivitySessionManager>"16@"TUConversationActivitySession"24B32
v40@0:8@"<CPActivitySessionManager>"16@"TUConversationActivitySession"24Q32
v40@0:8@16B24B28@32
v44@0:8Q16B24q28q36
v48@0:8Q16B24B28q32q40
v36@0:8Q16B24q28
v40@0:8Q16q24q32
v28@0:8Q16B24
v36@0:8@"<CSDAVCSession>"16B24@"NSError"28
v32@0:8@"<CSDAVCSession>"16@"NSError"24
v40@0:8@"<CSDAVCSession>"16B24B28@"NSError"32
v32@0:8@"<CSDAVCSession>"16q24
v24@0:8@"<CSDAVCSession>"16
@148@0:8@16@24@32@40@48B56@60@68@76@84@92@100@108@116@124B132B136@140
@164@0:8@16@24@32@40@48B56@60@68@76@84@92@100@108@116@124B132B136@140@148@156
v28@0:8B16@20
{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8
v48@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16
v32@0:8Q16@24
v48@0:8@16@24@32B40B44
B28@0:8@16B24
v32@0:8@16@?24
v36@0:8@16B24@?28
v28@0:8B16Q20
v32@0:8q16Q24
i28@0:8@16i24
@"NSSet"
@"<CSDConversationDelegate>"
@"TUConversationLink"
@"TUHandle"
@"TUConversationMember"
@"CPActivitySessionManager"
@"TUConversationReport"
@"<TUFeatureFlags>"
@"NSMutableDictionary"
@"NSMutableSet"
@"CSDIDSGroupSession"
@"<CSDAVCSession>"
@"TUVideoDeviceController"
@"CSDFaceTimeInviteDemuxer"
@"NSArray"
@"CSDConversationParticipant"
@"CPApplicationPolicyManager"
@"CPSystemStateObserver"
@"<CSDConversationServerBag>"
@"NSObject"
@"TUCallScreenShareAttributes"
@"TUConversationProvider"
{?="supportsAddCall"b1"supportsDTMF"b1"supportsGrouping"b1"supportsHolding"b1"supportsSendingToVoicemail"b1"supportsUnambiguousMultiPartyState"b1"supportsUngrouping"b1}
v28@0:8@"CSDMessagingRelayMessage"16B24
v24@0:8@"CSDMessagingRelayMessage"16
v32@0:8@"CSDMessagingRelayMessage"16@?<v@?@"NSDictionary">24
@28@0:8i16@20
C16@0:8
v20@0:8C16
{?="type"b1}
v24@0:8@"CSDPauseDigitsQueue"16
@36@0:8@16B24@28
@48@0:8@16@24@32B40B44
@32@0:8@16@24
{?=[8I]}16@0:8
Vv20@0:8B16
@"<CSDProviderCallDelegate>"
@"CXCallSource"
@"CXCallFailureContext"
@"CXCallUpdate"
@"CSDPauseDigitsQueue"
@"NSObject<OS_dispatch_source>"
@"CSDLetMeInRequestorKeyAgreement"
v24@0:8@"<CSDStatusBarResolver>"16
@"<CSDStatusBarResolver>"
@"STCallingStatusDomainPublisher"
@"STCallingStatusDomainCallDescriptor"
v48@0:8@16@24@32@?40
v24@0:8@"TUNearbyDeviceHandle"16
v48@0:8@"TUConversation"16@"TUNearbyDeviceHandle"24@"TUConversationActivity"32@?<v@?B@"NSError">40
v24@0:8@?<v@?@"NSSet"@"NSError">16
v24@0:8@?<v@?@"TUNearbyDeviceHandle"@"NSError">16
v32@0:8@"TUNearbyDeviceHandle"16@?<v@?@"TUHandle"@"NSError">24
v40@0:8@"TUNearbyDeviceHandle"16@"NSUUID"24@?<v@?B@"NSError">32
v32@0:8@"TUNearbyDeviceHandle"16@?<v@?B@"NSError">24
v24@0:8@"<TUNeighborhoodActivityConduitXPCClient>"16
@"CSDNeighborhoodActivityConduit"
@"CSDClientManager"
@"CSDClient"
@40@0:8@16@24^@32
@"<CSDCarrierBundlePhoneNumberProviderControllerDelegate>"
@"CoreTelephonyClient"
v36@0:8@16I24@28
v40@0:8@16@24I32B36
v24@0:8@"IDSGroupSession"16
v36@0:8@"IDSGroupSession"16I24@"NSError"28
v40@0:8@"IDSGroupSession"16@"NSArray"24@"NSError"32
v40@0:8@"IDSGroupSession"16@"NSDictionary"24@"NSError"32
v40@0:8@"IDSGroupSession"16@"IDSGroupSessionParticipantUpdate"24@"NSError"32
v32@0:8@"IDSGroupSession"16@"NSError"24
v32@0:8@"IDSGroupSession"16@"NSDictionary"24
v36@0:8@"IDSGroupSession"16@"NSArray"24B32
v40@0:8@"IDSGroupSession"16@"NSArray"24I32B36
v44@0:8@"IDSGroupSession"16@"NSArray"24I32S36B40
v32@0:8@"IDSGroupSession"16@"NSArray"24
v32@0:8@"IDSSession"16@"NSString"24
v24@0:8@"IDSSession"16
v36@0:8@"IDSSession"16I24@"NSError"28
v32@0:8@"NSString"16@"NSData"24
v32@0:8@"IDSSession"16@"NSArray"24
v40@0:8@"IDSSession"16@"NSString"24@"NSData"32
v32@0:8@"IDSSession"16@"NSSet"24
v36@0:8@"IDSSession"16@"NSSet"24B32
v52@0:8@16@24@32@40B48
Q32@0:8Q16@24
v36@0:8@"NSArray"16@"NSData"24B32
v52@0:8@"NSArray"16@"NSData"24@"NSArray"32@"NSArray"40B48
v24@0:8@"NSArray"16
v32@0:8@"NSString"16@?<v@?@>24
v32@0:8@"NSArray"16@"NSString"24
v32@0:8@"TUConversationActivitySessionContainer"16@"NSData"24
Q32@0:8Q16@"NSData"24
v32@0:8@"NSSet"16@"NSSet"24
@"<CSDIDSGroupSessionProviderDelegate>"16@0:8
v24@0:8@"<CSDIDSGroupSessionProviderDelegate>"16
@"NSArray"16@0:8
@"NSSet"16@0:8
@64@0:8@16@24@32@40@48B56B60
@"IDSGroupSession"
@"<CSDIDSGroupSessionProviderDelegate>"
@"IDSAccount"
@60@0:8@16B24@28@36@44@52
@52@0:8@16@24@32i40@44
@"<CSDRelayIDSDualSessionDelegate>"
@"IDSDestination"
@"IDSDevice"
@"CSDMessagingLinkSyncCheckInMessage"
@"CSDMessagingLinkSyncUpdateMessage"
{?="type"b1"version"b1}
v32@0:8@16^{__CFString=}24
@24@0:8^{__CFString=}16
@"<CSDThumperCapabilitiesMonitorDataSource>"
@"NPSDomainAccessor"
v64@0:8@16@24@32@40@48@56
v56@0:8@16@24@32@40@48
v56@0:8@16@24q32@40@48
v52@0:8@16@24@32B40@44
v60@0:8@16@24@32B40@44@52
v56@0:8@16@24@32q40q48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"NSString"48@"IDSMessageContext"56
v40@0:8@"IDSService"16@"NSString"24@"NSArray"32
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSData"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSProtobuf"32@"NSString"40@"IDSMessageContext"48
v56@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSString"40@"IDSMessageContext"48
v64@0:8@"IDSService"16@"IDSAccount"24@"NSURL"32@"NSDictionary"40@"NSString"48@"IDSMessageContext"56
v56@0:8@"IDSService"16@"IDSAccount"24q32@"NSString"40@"IDSMessageContext"48
v32@0:8@"IDSService"16@"NSSet"24
v32@0:8@"IDSService"16@"NSArray"24
v52@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44
v60@0:8@"IDSService"16@"IDSAccount"24@"NSString"32B40@"NSError"44@"IDSMessageContext"52
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32q40q48
v48@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@40
v56@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@48
v48@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSDictionary"48
v56@0:8@"IDSService"16@"IDSAccount"24@"IDSSession"32@"NSString"40@"NSData"48
v40@0:8@"IDSService"16@"IDSAccount"24@"IDSGroupSessionParticipantUpdate"32
v24@0:8@"IDSService"16
v40@0:8@"IDSService"16@"IDSDevice"24@?<v@?>32
v68@0:8@16@24@32@40q48@56B64
v76@0:8@16@24@32@40q48@56B64@68
v72@0:8@16@24@32@40@48@56@64
v48@0:8@16@24d32@40
v68@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40q48@"NSError"56B64
v76@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40q48@"NSError"56B64@"IDSMessageContext"68
v72@0:8@"IDSService"16@"IDSAccount"24@"NSString"32@"NSString"40@"NSArray"48@"NSArray"56@"NSDictionary"64
v56@0:8@"IDSService"16@"IDSAccount"24@"NSDictionary"32@"NSString"40@48
v48@0:8@"IDSService"16@"NSString"24d32@"NSError"40
v48@0:8@"IDSService"16@"NSString"24@"NSString"32@"NSString"40
v32@0:8@"IDSService"16q24
@"<CSDAccountsControllerDelegate>"
v32@0:8@"NSData"16@"NSSet"24
v28@0:8@"NSData"16B24
@"<CSDIDSDualSessionProviderDelegate>"16@0:8
v24@0:8@"<CSDIDSDualSessionProviderDelegate>"16
@"<CSDIDSDualSessionProviderDelegate>"
@"IDSSession"
Vv24@0:8@?16
Vv24@0:8@16
Vv32@0:8@16@?24
Vv24@0:8@?<v@?@"NSDictionary"@"NSDictionary"@"NSDictionary">16
Vv24@0:8@"NSString"16
Vv32@0:8@"TUDialRequest"16@?<v@?@"NSError">24
v24@0:8@"<TUCallProviderManagerXPCClient>"16
v24@0:8@"CSDCallProviderManager"16
@"CSDCallProviderManager"
v28@0:8@16i24
v28@0:8@"CSDIDSDualSession"16i24
v24@0:8@"CSDIDSDualSession"16
v36@0:8@"CSDIDSDualSession"16@"NSArray"24B32
v32@0:8@"CSDIDSDualSession"16@"NSData"24
v40@0:8@16q24@32
v24@0:8@"<CSDAVConference>"16
v40@0:8@"<CSDAVConference>"16q24@"NSError"32
v28@0:8@"<CSDAVConference>"16B24
v32@0:8@"<CSDAVConference>"16@"NSData"24
v28@0:8@"<CSDAVConference>"16f24
v32@0:8@"<CSDAVConference>"16q24
v40@0:8@"<CSDAVConference>"16@"NSData"24q32
v32@0:8@"<CXVideoAspectRatioDescriptor>"16@?<v@?@"NSArray"B>24
v24@0:8@"<CXVideoAspectRatioDescriptor>"16
@"<CSDIDSChatDelegate>"16@0:8
v24@0:8@"<CSDIDSChatDelegate>"16
@"NSUUID"16@0:8
@"TUHandle"16@0:8
@"CXCallFailureContext"16@0:8
@36@0:8@16@24B32
@44@0:8@16@24B32@36
v32@0:8@16B24B28
@"<CSDIDSChatDelegate>"
@"CSDExternalIDSDualSession"
@"<CSDAVConference>"
v32@0:8@"CXCallDirectoryNSExtensionManager"16@"NSArray"24
@"<CSDDeviceLockStateObserver>"
@"CXCallDirectoryManager"
@"CXCallDirectoryNSExtensionManager"
f16@0:8
@"CSDMessagingAVConferenceInviteData"
@"CSDMessagingCallCapabilitiesState"
@"CSDMessagingCallModel"
@"CSDMessagingCallModelState"
@"CSDMessagingCallDisplayContext"
@"CSDMessagingCallProvider"
@"CSDMessagingRoute"
{?="hostCallCreationTime"b1"messageSendTime"b1"hardPauseState"b1"protoDisconnectedReason"b1"protoOriginatingUIType"b1"protoPriority"b1"protoProtocolVersion"b1"protoService"b1"protoSoundRegion"b1"protoTTYType"b1"receivedMessageType"b1"requestActionType"b1"systemVolume"b1"type"b1"protoCannotBeAnswered"b1"protoCannotRelayAudioOrVideoOnPairedDevice"b1"protoEmergency"b1"protoExpectedEndpointOnMessagingDevice"b1"protoFailureExpected"b1"protoNeedsManualInCallSounds"b1"protoRemoteUplinkMuted"b1"protoSOS"b1"protoShouldSuppressRingtone"b1"protoSupportsTTYWithVoice"b1"protoUplinkMuted"b1"protoVideo"b1"protoVoicemail"b1"protoWantsHoldMusic"b1}
v24@0:8@?<q@?@"NSString"@"NSString">16
B32@0:8@"NSString"16@"NSString"24
@"DNDEventBehaviorResolutionService"
@"TUCallProviderManager"
^I16@0:8
I24@0:8Q16
v32@0:8^I16Q24
{?="list"^I"count"Q"size"Q}
{?="maximumCallGroups"b1"maximumCallsPerCallGroup"b1"supportsAudioAndVideo"b1"supportsAudioOnly"b1"supportsEmergency"b1"supportsRecents"b1"supportsVoicemail"b1}
v48@0:8@"CSDRelayIDSMessenger"16@"CSDMessagingRelayMessage"24@"IDSDestination"32@"IDSDevice"40
v36@0:8@"CSDRelayIDSMessenger"16@"NSArray"24B32
q24@0:8@16
B24@0:8@"CSDMessagingRelayMessage"16
B32@0:8@"CSDMessagingRelayMessage"16@"IDSDestination"24
q24@0:8@"CSDMessagingRelayMessage"16
@"NSArray"24@0:8@"CSDMessagingRelayMessage"16
q24@0:8q16
v28@0:8i16@20
v28@0:8@16C24
B20@0:8i16
v32@0:8@?16@24
@"<CSDRelayMessagingControllerDelegate>"
@"<CSDRelayMessagingControllerClientMessagingDelegate>"
@"<CSDRelayMessagingControllerHostMessagingDelegate>"
@"<CSDRelayMessagingControllerCommonMessagingDelegate>"
@"CSDRelayIDSSessionMessenger"
@"CSDRelayPairedDeviceMessenger"
@"<TUCallContainerPrivate>"
v24@0:8@"TUConfiguration"16
v28@0:8i16@?20
@"CSDCallStateMonitor"
@"CSDRelayMessagingController"
@"CSDRelayClientController"
@"CSDRelayHostController"
@"CSDRelayCommonController"
@"CSDCallDirectoryManager"
@"CSDVoIPApplicationController"
@"CSDMomentsController"
@"TUUserConfiguration"
@"CSDUserNotificationController"
@"CSDVoiceOverObserver"
@"CSDDeviceLockStateObserver"
@"CSDOrientationMonitor"
@"CSDProximityController"
@"CSDProximitySensorObserver"
@"CSDRaiseToAnswerController"
@"CSDPowerAssertionManager"
@"CSDAudioController"
@"CSDStatusBarManager"
{CGSize=dd}24@0:8@16
B24@0:8@"<CSDIDSChat>"16
{CGSize=dd}24@0:8@"<CSDIDSChat>"16
v24@0:8@"<CSDIDSChat>"16
v32@0:8@"<CSDIDSChat>"16@"NSData"24
v28@0:8@"<CSDIDSChat>"16f24
v32@0:8@"<CSDIDSChat>"16q24
@"<CSDIDSProviderDelegateCapabilities>"
v40@0:8@"<CSDIDSDualSessionProvider>"16@"NSString"24@"NSData"32
v24@0:8@"<CSDIDSDualSessionProvider>"16
v36@0:8@"<CSDIDSDualSessionProvider>"16@"NSSet"24B32
v36@0:8@"<CSDIDSDualSessionProvider>"16I24@"NSError"28
@28@0:8@16i24
v32@0:8@16i24B28
@"<CSDIDSDualSessionDelegate>"
@"<CSDIDSDualSessionProvider>"
@"<CSDRelayIDSMessengerDelegate>"
@56@0:8@16@24@32q40@48
@"<CSDFaceTimeIDSProviderDelegateCapabilities>"
@"NSOrderedSet"
@"<CSDFaceTimeIDSProviderDelegateServerBag>"
v40@0:8@"NSURL"16@"NSSet"24@"NSDictionary"32
v32@0:8@"NSURL"16@?<v@?@"NSURL">24
@"<CSDFileTransferringDelegate>"16@0:8
v24@0:8@"<CSDFileTransferringDelegate>"16
v48@0:8Q16@24@32@?40
@"<CSDFileTransferringDelegate>"
@"IDSService"
@32@0:8@16d24
@"<CSDCallSourceFetcherDataSource>"
r^{__CFString=}16@0:8
v32@0:8B16B20@24
v32@0:8@"IDSDevice"16@?<v@?B@"NSString">24
v32@0:8@"IDSDevice"16@"NSUUID"24
v24@0:8@"IDSDevice"16
v24@0:8@?<v@?B>16
v40@0:8@"NSNumber"16@"NSString"24@?<v@?B>32
v32@0:8B16B20@"IDSDevice"24
{?="protoTimeConnected"b1"protoDisconnectedReason"b1"protoOriginatingUIType"b1"protoService"b1"protoSoundRegion"b1"protoStatus"b1"protoTTYType"b1"protoConferenced"b1"protoEmergency"b1"protoFailureExpected"b1"protoHasSentInvitation"b1"protoNeedsManualInCallSounds"b1"protoOutgoing"b1"protoSOS"b1"protoShouldSuppressRingtone"b1"protoSupportsTTYWithVoice"b1"protoUplinkMuted"b1"protoVideo"b1"protoVoicemail"b1"protoWantsHoldMusic"b1}
v24@0:8i16B20
@"TUCallProvider"
@"TUCallDisplayContext"
@"<CSDRelayCallDelegate>"
v24@0:8@"CSDCallHistoryManager"16
Vv32@0:8@16@24
Vv32@0:8@"NSUUID"16@"NSUUID"24
v24@0:8@"<TUCallHistoryManagerXPCClient>"16
@"CSDCallHistoryManager"
@"<CSDPauseDigitsQueueDelegate>"
@28@0:8d16B24
v48@0:8@16@24d32Q40
v52@0:8@16d24B32Q36@?44
@"CSDMessagingConversationActivitySession"
@"CSDMessagingConversationMessage"
{?="sharePlayProtocolVersion"b1"version"b1"isGondolaCallingAvailable"b1"isLightweight"b1"isMirageAvailable"b1"isMomentsAvailable"b1"isScreenSharingAvailable"b1"video"b1"videoEnabled"b1}
v40@0:8@"NSURL"16@"NSURL"24@?<v@?@"NSString"@"NSError">32
v32@0:8@"NSURL"16@?<v@?@"NSString"@"NSError">24
v56@0:8@16@24@32q40@48
v40@0:8@"<CSDFaceTimeProviderDelegate>"16@"NSUUID"24@"NSDate"32
v56@0:8@"<CSDFaceTimeProviderDelegate>"16@"NSUUID"24@"NSDate"32q40@"CXCallFailureContext"48
v40@0:8@"<CSDDualFaceTimeProviderDelegate>"16@"CXTransaction"24@?<v@?@"NSError">32
v48@0:8@"<CSDFaceTimeProviderDelegate>"16@"TUConversation"24@"NSData"32@?<v@?@"NSUUID"BBB@"NSUUID"@"TUHandle"@"NSString">40
B32@0:8@"<CSDFaceTimeProviderDelegate>"16@"NSUUID"24
@44@0:8@16@24@32B40
@"CSDConversationManagerXPCServer"
@"CPConversationManagerHost"
@"CPBiomeSessionDonator"
@"CPApplicationMonitor"
@"CSDNeighborhoodActivityConduitXPCServer"
@"TUContactsDataProvider"
@"CSDFaceTimeIDSProviderDelegate"
@"CSDFaceTimeIMAVProviderDelegate"
@"CSDFaceTimeConversationProviderDelegate"
@"CSDConversationManager"
@"CSDProviderCallDataSource"
@"CSDVoIPApplicationMessage"
v36@0:8@"NSDictionary"16B24@?<v@?>28
@"LSApplicationRecord"
@"CSDMessagingConversationActivity"
{?="creationDateEpochTime"b1}
@"CSDMessagingPersonNameComponents"
{?="version"b1}
v44@0:8@16@24Q32B40
v48@0:8@16@24Q32@40
v24@0:8@"TUConversationManager"16
v32@0:8@"TUConversationManager"16@"TUConversation"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversation"32
v32@0:8@"TUConversationManager"16@"NSArray"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32
v32@0:8@"TUConversationManager"16@"TUConversationActivity"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivityEvent"32
v44@0:8@"TUConversationManager"16@"TUConversation"24Q32B40
v32@0:8@"TUConversationManager"16@"NSString"24
v48@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationParticipant"32@"TUConversationNotice"40
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSSet"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationMember"32
v40@0:8@"TUConversationManager"16@"TUConversation"24@"NSData"32
v40@0:8@"TUConversationManager"16@"TUConversationMember"24@"TUConversationLink"32
v48@0:8@"TUConversationManager"16@"TUConversation"24Q32@"TUConversationActivitySession"40
v36@0:8@"TUConversationManager"16@"<TUScreenShareAttributes>"24B32
v32@0:8@"TUConversationManager"16@"NSError"24
v40@0:8@"TUConversationManager"16@"TUConversation"24@"TUConversationActivitySession"32
@"<CSDStatusBarResolverDelegate>"16@0:8
v24@0:8@"<CSDStatusBarResolverDelegate>"16
@"CSDCall"16@0:8
@"STCallingStatusDomainCallDescriptor"16@0:8
@"<CSDStatusBarResolverDelegate>"
@"<CSDProcessObserverProtocol>"
@"NSTimer"
@"TUCallCenter"
v56@0:8@16@24@32@?40@?48
@32@0:8@16^@24
B32@0:8@16^@24
@"NSURL"
@"NSFileManager"
v36@0:8B16B20@24B32
@"<CSDPinExchangeDelegate>"
Vv28@0:8B16@20
Vv36@0:8B16@20@28
Vv28@0:8B16@"NSString"20
Vv28@0:8B16@"NSUUID"20
Vv36@0:8B16@"NSString"20@"NSUUID"28
Vv24@0:8@"NSUUID"16
Vv24@0:8@?<v@?@"TUCallCapabilitiesState">16
v24@0:8@"<TUCallCapabilitiesXPCClient>"16
@"CSDThumperAccount"24@0:8@"NSString"16
@"TUThumperCTCapabilitiesState"24@0:8@"NSString"16
C32@0:8@16@24
v36@0:8B16@20@28
@24@0:8B16B20
@"NSXPCListener"
@"CSDAccountsController"
@"CSDTelephonyCallCapabilities"
@"CSDThumperPushHandler"
@"CSDPinExchangeController"
@"CSDThumperCapabilitiesMonitor"
@"<CSDIDSService>"
@"TUCallCapabilitiesState"
v24@0:8@"TUDynamicCallDisplayContext"16
@"<CSDCallDelegate>"
@"CSDCallDataSource"
@"TUDialRequest"
@"CSDIDSTransport"
@"TUDynamicCallDisplayContext"
v24@0:8@"TUAudioDeviceController"16
B32@0:8@"NSString"16@"TUCall"24
@"TURoute"24@0:8@"TUCall"16
B24@0:8@"TUCall"16
@"CARAutomaticDNDStatus"
@"CSDMessagingConversationLink"
@"CSDMessagingConversationMember"
@"CSDMessagingConversationReport"
{?="version"b1"locallyCreated"b1}
{?="timebase"b1}
v36@0:8@16Q24B32
v40@0:8@16Q24@32
v24@0:8@"CSDConversation"16
v32@0:8@"CSDConversation"16@"CXCallFailureContext"24
v32@0:8@"CSDConversation"16@"CSDConversationParticipant"24
v40@0:8@"CSDConversation"16@"NSString"24@?<v@?B>32
v32@0:8@"CSDConversation"16@"NSString"24
v32@0:8@"CSDConversation"16@"TUConversationActivityEvent"24
v36@0:8@"CSDConversation"16Q24B32
v32@0:8@"CSDConversation"16@"TUConversationActivitySession"24
v40@0:8@"CSDConversation"16Q24@"TUConversationActivitySession"32
v32@0:8@"CSDConversation"16q24
v36@0:8@"CSDConversation"16@"TUConversationActivitySession"24B32
v56@0:8@"NSSet"16@"CSDConversation"24@"TUConversationLink"32@"NSUUID"40@"TUConversationMember"48
v52@0:8@"NSSet"16@"CSDConversation"24@"NSUUID"32@"TUConversationMember"40B48
v48@0:8@"CSDPendingMembershipTracker"16@"TUConversationMember"24@"CSDConversation"32@"NSData"40
v40@0:8@"CSDPendingMembershipTracker"16@"TUConversationMember"24@"NSUUID"32
v48@0:8@"CSDConversationNoticeManager"16@"CSDConversation"24@"TUConversationParticipant"32@"TUConversationNotice"40
v32@0:8@"CSDConversationLinkManager"16@"NSArray"24
v36@0:8@"CSDScreenSharingActivityManager"16@"<TUScreenShareAttributes>"24B32
v36@0:8@"CSDScreenSharingActivityManager"16@"NSError"24B32
v32@0:8@"<CPApplicationPolicyManager>"16@"NSString"24
v28@0:8@"<CPSystemStateObserver>"16B24
v32@0:8@"NSSet"16@"NSUUID"24
v24@0:8@"TUConversationActivity"16
v24@0:8@"NSString"16
v40@0:8@"TUConversationActivity"16@"NSUUID"24@?<v@?@"CPActivitySession">32
v28@0:8B16@"NSString"20
v32@0:8@"TUConversationActivitySession"16@"NSUUID"24
v32@0:8@"NSString"16@?<v@?B@"NSError">24
v32@0:8@"NSArray"16@"NSUUID"24
v32@0:8@"TUConversationMember"16@"NSUUID"24
v28@0:8B16@"NSUUID"20
v32@0:8@"<CPConversationManagerDataSourceObserver>"16@"NSObject<OS_dispatch_queue>"24
v32@0:8@"TUConversationActivitySessionContainer"16@"NSString"24
@"CPActivityAuthorizationManager"16@0:8
@"CPSystemStateObserver"16@0:8
@56@0:8@16@24@32@40@48
@140@0:8@16@24@32B40@44@52@60@68@76@84@92@100@108@116B124B128@132
@120@0:8@16@24@32B40@44@52@60@68@76@84@92@100B108@112
@52@0:8@16@24@32@40B48
B36@0:8@16@24i32
B68@0:8@16@24@32@40@48B56@?60
B48@0:8@16@24@32@40
B40@0:8@16@24@32
B44@0:8@16@24@32B40
@20@0:8B16
@92@0:8@16@24@32@40@48@56@64@72B80@84
v52@0:8@16@24@32B40@?44
v40@0:8q16@24@32
v52@0:8@16@24B32@36@44
v56@0:8{CGRect={CGPoint=dd}{CGSize=dd}}16@48
v36@0:8B16Q20@28
v28@0:8B16@?20
v40@0:8@16q24@?32
v48@0:8@16@24Q32@?40
v64@0:8@16@24@32@40@48Q56
v40@0:8Q16@24@32
@"CSDIDSService"
@"CSDPendingMembershipTracker"
@"CPActivitySuggestions"
@"CSDScreenSharingActivityManager"
@"CSDConversationPersistenceController"
@"CSDConversationLinkManager"
@"CSDReportingController"
@"CSDConversationNoticeManager"
@"CSDSharedConversationServerBag"
@"FTDeviceSupport"
@"CPApplicationController"
@"CPActivityAuthorizationManager"
@"NSURL"16@0:8
{?="protoProtocolVersion"b1"type"b1"oBSOLETEProtoMomentsAvailable"b1"protoMomentsV2Available"b1"protoSenderMuteUplink"b1"protoShouldSuppressInCallUI"b1"protoWantsVideo"b1}
B24@0:8q16
v32@0:8@?16@?24
@24@0:8@?16
B24@0:8@?16
@"CSDMessagingConversationActivityContext"
@"CSDMessagingConversationActivityMetadata"
{?="updatedDateEpochTime"b1"isSystemActivity"b1}
{?="handleType"b1"notificationStyles"b1"version"b1}
{?="faceTimeAudioAvailable"b1"faceTimeVideoAvailable"b1}
@"NSCountedSet"
@56@0:8@16@24@32@?40@48
@"CXCallDirectoryStore"
@"CSDIncomingCallFilterDataSource"
@"CXCallDirectorySanitizer"
@"ACAccountStore"
@"CSDIncomingCallFilter"
@"<CSDTransactionManager>"
@"CHManager"
@"<CSDUserNotificationDelegate>"
{?="generatorVersion"b1}
@"<CSDIDSSessionProvider>"
v24@0:8@"UABestAppSuggestion"16
v32@0:8@"UABestAppSuggestion"16@"NSSet"24
v32@0:8@16d24
v36@0:8@16d24B32
@"<CSDUserActivityCommunicatorDelegate>"
@"UABestAppSuggestionManager"
v36@0:8@"<CSDIDSGroupSessionProvider>"16I24@"NSError"28
v24@0:8@"<CSDIDSGroupSessionProvider>"16
v48@0:8@"<CSDIDSGroupSessionProvider>"16@"NSDictionary"24Q32@"NSError"40
v32@0:8@"<CSDIDSGroupSessionProvider>"16@"NSError"24
v36@0:8@"<CSDIDSGroupSessionProvider>"16@"NSArray"24B32
v32@0:8@"<CSDIDSGroupSessionProvider>"16@"NSArray"24
v44@0:8@"<CSDIDSGroupSessionProvider>"16@"NSArray"24I32S36B40
v32@0:8@"<CSDIDSGroupSessionProvider>"16@"NSDictionary"24
v60@0:8@16@24@32@40@48B56
v96@0:8@16@24@32@40@48@56@64@72@80B88B92
v96@0:8@16@24@32@40@48@56@64@72@80@88
Q24@0:8@16
@"<CSDIDSGroupSessionDelegate>"
@"<CSDIDSGroupSessionProvider>"
Vv28@0:8@16C24
Vv28@0:8i16@20
Vv40@0:8@16{CGSize=dd}24
Vv28@0:8@16i24
Vv32@0:8@16q24
Vv24@0:8@"TUAnswerRequest"16
Vv32@0:8@"NSString"16@"NSString"24
Vv28@0:8@"NSString"16C24
Vv28@0:8i16@"NSString"20
Vv24@0:8@"IDSDestination"16
Vv24@0:8@"TUProxyCall"16
Vv40@0:8@"NSString"16{CGSize=dd}24
Vv28@0:8@"NSString"16i24
Vv24@0:8@"TUDialRequest"16
Vv32@0:8@"NSString"16@"TUCallScreenShareAttributes"24
Vv36@0:8B16@"TUCallScreenShareAttributes"20@"NSString"28
Vv32@0:8@"NSString"16q24
Vv24@0:8@?<v@?@"NSArray">16
Vv32@0:8@"TUDialRequest"16@"TUCallDisplayContext"24
Vv32@0:8@"TUDialRequest"16@?<v@?@"TUCall"@"NSArray">24
Vv24@0:8@"TUJoinConversationRequest"16
Vv32@0:8@"NSDictionary"16@?<v@?@"TUCall"@"NSArray">24
Vv24@0:8@"TUCallServicesClientCapabilities"16
Vv28@0:8@16B24
Vv24@0:8@?<v@?@"NSDictionary">16
Vv28@0:8@"NSString"16B24
Vv40@0:8@16@24@?32
Vv44@0:8@16@24B32@?36
Vv48@0:8@16@24@32@?40
Vv40@0:8@"NSSet"16@"NSString"24@?<v@?B>32
Vv44@0:8@"TUHandle"16@"NSString"24B32@?<v@?B>36
Vv44@0:8@"NSSet"16@"NSString"24B32@?<v@?B>36
Vv40@0:8@"NSSet"16@"NSString"24@?<v@?Q>32
Vv40@0:8@"NSSet"16@"NSString"24@?<v@?@"NSDictionary">32
Vv48@0:8@"NSString"16@"NSString"24@"NSString"32@?<v@?B>40
v28@0:8@"NSArray"16B24
@"CSDCallController"16@0:8
v24@0:8@"CSDCall"16
v36@0:8@16i24@28
v32@0:8f16i20@24
v24@0:8B16B20
@"CSDCallController"
@"CSDRecentsController"
@"CSDAudioArbitrationController"
@"CSDRouteController"
@"CSDCallHistoryManagerXPCServer"
@"CSDCallProviderManagerXPCServer"
@"CSDRelayCallDataSource"
@"CSDRelayCallDelegate"
@"TUCarPlayHardwareControlsBroadcaster"
@"CSDCarPlayManager"
v24@0:8@?<v@?>16
@"<TUNotifyObserver>"
{os_unfair_lock_s=I}16@0:8
{os_unfair_lock_s="_os_unfair_lock_opaque"I}
@"BKSApplicationStateMonitor"
v32@0:8@"APSConnection"16@"NSData"24
v48@0:8@"APSConnection"16@"NSData"24@"NSString"32@"NSString"40
v32@0:8@"APSConnection"16@"APSIncomingMessage"24
v40@0:8@"APSConnection"16@"NSString"24@"NSDictionary"32
v32@0:8@"APSConnection"16@"APSOutgoingMessage"24
v40@0:8@"APSConnection"16@"APSOutgoingMessage"24@"NSError"32
v28@0:8@"APSConnection"16B24
v24@0:8@"APSConnection"16
v32@0:8@"APSConnection"16@"NSArray"24
v40@0:8@"CXNetworkExtensionMessageControllerHost"16@"NSDictionary"24@"NSString"32
v48@0:8@"CXNotificationServiceExtensionVoIPXPCHost"16@"NSDictionary"24@"NSString"32@?<v@?@"NSError">40
@"APSConnection"
@"CXNetworkExtensionMessageControllerHost"
@"CXNotificationServiceExtensionVoIPXPCHost"
@"CSDVoIPApplicationMonitor"
@"<CSDConversationNoticeDelegate>"
@"FBSOpenApplicationService"
@40@0:8Q16@24@32
@"TUConversationParticipantCapabilities"
@"TUCallServicesClientCapabilities"
@"RBSProcessHandle"
{?="preferredBroadcastingAttributes"b1"supportsContinuationOnTV"b1}
Vv32@0:8@"NSUUID"16@"NSArray"24
Vv32@0:8@"NSUUID"16@?<v@?@"NSString"@"NSString"@"NSError">24
Vv40@0:8@16@24@32
Vv36@0:8B16Q20@28
Vv28@0:8B16@?20
Vv40@0:8@16q24@?32
Vv48@0:8@16@24Q32@?40
Vv24@0:8@?<v@?@"NSSet">16
Vv40@0:8@"NSSet"16@"NSSet"24@"NSUUID"32
Vv24@0:8@"TUConversationActivity"16
Vv32@0:8@"TUConversationActivitySession"16@"NSUUID"24
Vv32@0:8@"TUConversationActivity"16@"NSUUID"24
Vv32@0:8@"NSUUID"16@?<v@?@"NSError">24
Vv36@0:8B16Q20@"NSUUID"28
Vv32@0:8@"TUConversationMember"16@"NSUUID"24
Vv32@0:8@"NSString"16@"NSUUID"24
Vv24@0:8@?<v@?@"<TUScreenShareAttributes>">16
Vv28@0:8B16@?<v@?@"NSSet"@"NSError">20
Vv32@0:8@"NSUUID"16@?<v@?@"TUConversationLink"@"NSError">24
Vv40@0:8@"NSSet"16q24@?<v@?@"TUConversationLink"@"NSError">32
Vv40@0:8@"NSSet"16@"TUConversationLink"24@?<v@?@"TUConversationLink"@"NSError">32
Vv32@0:8@"TUConversationLink"16@?<v@?B@"NSError">24
Vv48@0:8@"TUConversationLink"16@"NSDate"24Q32@?<v@?B@"NSError">40
Vv32@0:8@"TUConversationLink"16@?<v@?B@"NSDate"@"NSError">24
Vv24@0:8@?<v@?@"TUConversationLink"@"NSError">16
Vv40@0:8@"NSString"16@"TUConversationLink"24@?<v@?@"TUConversationLink"@"NSError">32
Vv32@0:8@"NSURL"16@24
Vv24@0:8@?<v@?@"TUConversationNotice"@"NSError">16
v24@0:8@"<TUConversationManagerXPCClient>"16
v32@0:8@"CSDConversationManager"16@"TUConversation"24
v32@0:8@"CSDConversationManager"16@"NSUUID"24
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"TUConversationParticipant"32
v56@0:8@"CSDConversationManager"16@"TUConversation"24@"CSDMessagingConversationMessage"32@"TUHandle"40@"<CSDGroupSessionParticipantUpdateProtocol>"48
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"CXCallFailureContext"32
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"TUHandle"32
v32@0:8@"CSDConversationManager"16@"TUConversationActivity"24
v32@0:8@"CSDConversationManager"16@"NSArray"24
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"TUConversationActivityEvent"32
v44@0:8@"CSDConversationManager"16@"TUConversation"24Q32B40
v48@0:8@"CSDConversationManager"16@"TUConversation"24@"TUConversationParticipant"32@"TUConversationNotice"40
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"NSSet"32
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"TUConversationMember"32
v48@0:8@"CSDConversationManager"16@"TUConversation"24Q32@"TUConversationActivitySession"40
v40@0:8@"CSDConversationManager"16@"TUConversation"24q32
v32@0:8@"CSDConversationManager"16@"NSString"24
v40@0:8@"CSDConversationManager"16@"TUConversationMember"24@"TUConversationLink"32
v32@0:8@"CSDConversationManager"16@"NSDictionary"24
v40@0:8@"CSDConversationManager"16@"TUConversation"24@"TUConversationActivitySession"32
v36@0:8@"CSDConversationManager"16@"<TUScreenShareAttributes>"24B32
v32@0:8@"CSDConversationManager"16@"NSError"24
v28@0:8@"CSDConversationManager"16B24
v24@0:8@"<CSDCallProviderManagerDataSource>"16
@"CSDUserIntentManager"
@"<CSDCallProviderManagerDataSource>"
v40@0:8@16q24q32
@"FTNetworkSupport"
@"CMGestureManager"
v40@0:8@"CSDMessagingRelayMessage"16@"IDSDestination"24@?<v@?B@"NSDictionary">32
v32@0:8@"CSDMessagingRelayMessage"16@"IDSDestination"24
v40@0:8@"CSDMessagingRelayMessage"16@"IDSDestination"24@?<v@?@"NSDictionary">32
v40@0:8@"NSDictionary"16@"IDSDestination"24@?<v@?@"NSDictionary">32
v44@0:8@16@24B32@36
@48@0:8@16@24@32@40
@36@0:8I16@20@28
B20@0:8I16
I24@0:8@16
@20@0:8I16
@"NSUserActivity"
@"TUDialRequest"24@0:8@"TUDialRequest"16
v48@0:8@"NSUserActivity"16@"NSString"24@"NSDictionary"32@?<v@?B@"NSError">40
B24@0:8@"NSURL"16
@"NSURL"32@0:8@"NSString"16@"NSURL"24
B24@0:8@"TUCallProvider"16
@"<CSDCallProviderManagerDataSourceDelegate>"16@0:8
v24@0:8@"<CSDCallProviderManagerDataSourceDelegate>"16
v32@0:8@16r^{__CFString=}24
@24@0:8r^{__CFString=}16
@"<CSDCallProviderManagerDataSourceDelegate>"
@"CSDSandboxExtensionDirectory"
@"CSDCallCenterObserver"
d24@0:8@16
Q24@0:8Q16
@24@0:8q16
@"<CSDMomentsReportingSessionDelegate>"
v32@0:8@16Q24
v40@0:8@"AVCSessionParticipant"16B24B28@"NSError"32
v28@0:8@"AVCSessionParticipant"16B24
v32@0:8@"AVCSessionParticipant"16@"NSDictionary"24
v32@0:8@"AVCSessionParticipant"16Q24
v36@0:8@"AVCScreenCapture"16B24@"NSError"28
v24@0:8@"AVCScreenCapture"16
v32@0:8@"AVCSession"16@"NSDictionary"24
v36@0:8@"AVCSession"16B24@"NSError"28
v24@0:8@"AVCSession"16
v44@0:8@"AVCSession"16@"AVCSessionParticipant"24B32@"NSError"36
v44@0:8@"AVCSession"16B24@"AVCSessionConfiguration"28@"NSError"36
v40@0:8@"AVCSession"16B24B28@"NSError"32
v32@0:8@"AVCSession"16@"NSData"24
v32@0:8@"AVCSession"16@"NSError"24
v40@0:8@"AVCSession"16@"NSError"24@"NSDictionary"32
v80@0:8Q16@24@32{CGRect={CGPoint=dd}{CGSize=dd}}40Q72
@"NSData"24@0:8Q16
v24@0:8@"TUCallScreenShareAttributes"16
v28@0:8B16@"TUCallScreenShareAttributes"20
v28@0:8@"CSDConversationParticipant"16B24
v24@0:8@"CSDConversationParticipant"16
v80@0:8Q16@"NSNumber"24@"NSNumber"32{CGRect={CGPoint=dd}{CGSize=dd}}40Q72
@"NSData"16@0:8
@68@0:8@?16@24@32@40@48B56@?60
@64@0:8@16@24@32@40B48B52@56
@"AVCSession"
@"<CSDAVCSessionDelegate>"
@"AVCScreenCapture"
@44@0:8@16B24@28@36
@36@0:8@16@24i32
v24@0:8@"<CSDCoreTelephonyClient>"16
v40@0:8@"<CSDCoreTelephonyClient>"16@"CTXPCContextInfo"24@"CSDCTCallCapabilities"32
v32@0:8@"<CSDCoreTelephonyClient>"16@"NSDictionary"24
v40@0:8@"<CSDCoreTelephonyClient>"16@"CTXPCContextInfo"24@"NSDictionary"32
@40@0:8@16@24B32B36
@"<CSDTelephonyCallCapabilitiesDelegate>"
@"CSDCoreTelephonyClient"
@"<CSDEmergencyCallbackCapabilities>"
{?="deviceType"b1"protoCurrentlyPicked"b1"protoGuest"b1"protoSupportsRelay"b1}
v24@0:8@"CSDRelayCall"16
v32@0:8@"CSDRelayCall"16@"TUAnswerRequest"24
v32@0:8@"CSDRelayCall"16@"TUCall"24
v28@0:8@"CSDRelayCall"16C24
v36@0:8@"CSDRelayCall"16B24@"NSError"28
@"TUDTMFSoundPlayer"
@"CSDMessagingEncryptedConversationMessage"
{?="disconnectedReason"b1"enclosedEncryptedType"b1"type"b1"version"b1"isLetMeInApproved"b1"shouldSuppressInCallUI"b1}
v32@0:8@"NSString"16@"NSDictionary"24
v32@0:8@"NSString"16@"NSArray"24
@"CSDKeychainPasswordItem"
@"<CXAudioSessionActivationStateObserver>"
B24@0:8{?=ii}16
v32@0:8@"CTXPCServiceSubscriptionContext"16@"NSDictionary"24
@"CSDCTCallCapabilities"24@0:8@"CTXPCContextInfo"16
@"NSDictionary"32@0:8@"CTXPCContextInfo"16@"NSString"24
@"NSDictionary"24@0:8@"CTXPCContextInfo"16
v36@0:8@"NSString"16B24@"NSDictionary"28
v44@0:8@"CTXPCContextInfo"16@"NSString"24B32@"NSDictionary"36
v32@0:8@"NSString"16@"CTXPCContextInfo"24
v32@0:8@"CTXPCContextInfo"16@"NSString"24
@"NSString"24@0:8@"NSUUID"16
@"<CSDCoreTelephonyClientDelegate>"16@0:8
v24@0:8@"<CSDCoreTelephonyClientDelegate>"16
@"<CSDCoreTelephonyClientDelegate>"
@"CTXPCContexts"
{?="ambiguityState"b1"addCallAllowed"b1"endAndAnswerAllowed"b1"hardPauseAvailable"b1"holdAllowed"b1"holdAndAnswerAllowed"b1"mergeable"b1"sendToVoicemailAllowed"b1"swappable"b1"takingCallsPrivateAllowed"b1}
@32@0:8@16@?24
v32@0:8@"CSDMomentsReportingSession"16@"CSDMomentsUsageReport"24
v36@0:8@16q24i32
v36@0:8@"CSDMomentsController"16q24i32
v32@0:8@"CSDMomentsController"16q24
v40@0:8@"CSDMomentsController"16q24@"NSString"32
v28@0:8q16i24
v36@0:8q16i24@?28
v32@0:8q16@?24
v40@0:8q16@24@?32
{?="version"b1"shouldCheckAllGenerators"b1}
@"<CSDCHManager>"
@"TUDelegateController<CSDCallHistoryManagerDelegate>"
v32@0:8@"IDSAccountController"16@"IDSAccount"24
@"IDSDevice"24@0:8@"NSString"16
v32@0:8@"<IDSServiceDelegatePrivate>"16@"NSObject<OS_dispatch_queue>"24
v24@0:8@"<IDSServiceDelegatePrivate>"16
B24@0:8@"NSString"16
@"<CSDIDSServiceDependencies>"16@0:8
@"IDSDevice"16@0:8
@"IDSAccount"16@0:8
v64@0:8@16@24@32d40@48@?56
@"IDSAccountController"
@"IDSIDQueryController"
@"<IDSServicePseudonymDelegate>"
v48@0:8@"CSDIDSDualSession"16@"NSData"24@"IDSDestination"32@"IDSDevice"40
v52@0:8@16@24@32q40B48
v48@0:8@16@24@32q40
v56@0:8@16@24@32q40@?48
v40@0:8@16@?24@?32
v48@0:8@16@24@?32@?40
v52@0:8@16@24@?32B40@?44
v60@0:8@16@24@32@?40B48@?52
v52@0:8@"<CSDFileTransferring>"16@"NSURL"24@"NSDictionary"32B40@"NSString"44
v36@0:8@"<CSDFileTransferring>"16@"NSURL"24B32
v28@0:8@"<CSDAVCMoments>"16I24
v40@0:8@"<CSDAVCMoments>"16@"<CSDAVCMomentsRequest>"24@"NSError"32
v56@0:8@"<CSDAVCMoments>"16@"<CSDAVCMomentsRequest>"24@"NSURL"32@"NSURL"40@"NSError"48
v24@0:8@"<CSDAVCMoments>"16
Vv52@0:8q16@24@32B40@?44
Vv32@0:8q16@?24
Vv44@0:8i16q20@28@?36
Vv24@0:8@?<v@?>16
Vv52@0:8q16@"NSString"24@"NSDictionary"32B40@?<v@?@"TUMomentsCapabilities"@"NSError">44
Vv32@0:8q16@?<v@?@"NSError">24
Vv44@0:8i16q20@"NSString"28@?<v@?@"NSString"@"NSError">36
Vv32@0:8@"NSString"16@?<v@?@"NSError">24
v24@0:8@"<TUMomentsControllerXPCClient>"16
i20@0:8B16
@"<CSDMomentsControllerDelegate>"
@"<CSDFileTransferring>"
@"<CSDMediaAssetManaging>"
@"TUFeatureFlags"
@"<TUMomentsControllerXPCClient>"
@"<CSDMomentsServerBag>"
v36@0:8@16q24B32
v36@0:8@16B24q28
v40@0:8@16q24B32B36
v44@0:8@16B24q28@36
v48@0:8@16q24@32@40
v44@0:8@16q24B32@36
v32@0:8@16B24I28
v40@0:8@16B24I28@32
v32@0:8@16I24I28
v36@0:8@"AVConference"16q24B32
v36@0:8@"AVConference"16B24@"NSDictionary"28
v40@0:8@"AVConference"16q24@"NSError"32
v32@0:8@"AVConference"16@"NSData"24
v32@0:8@"AVConference"16q24
v40@0:8@"AVConference"16@"VideoAttributes"24q32
v36@0:8@"AVConference"16B24q28
v24@0:8@"AVConference"16
v40@0:8@"AVConference"16q24@"NSDictionary"32
v40@0:8@"AVConference"16q24B32B36
v40@0:8@"AVConference"16@"NSData"24q32
v44@0:8@"AVConference"16B24q28@"NSError"36
v48@0:8@"AVConference"16q24@"NSError"32@"NSDictionary"40
v44@0:8@"AVConference"16q24B32@"NSError"36
v32@0:8@"AVConference"16B24I28
v40@0:8@"AVConference"16B24I28@"NSError"32
v32@0:8@"AVConference"16I24I28
v28@0:8@"AVConference"16I24
v28@0:8@"AVConference"16f24
v28@0:8@"AVConference"16B24
v48@0:8{CGSize=dd}16{CGSize=dd}32
B28@0:8i16@20
B52@0:8B16@20@28@36^@44
B40@0:8B16@20i28^@32
v56@0:8q16@24d32@?40@48
B28@0:8i16@"RTCSecureHierarchyToken"20
B52@0:8B16@"NSDictionary"20@"VCCapabilities"28@"NSString"36^@44
B40@0:8B16@"VCCapabilities"20i28^@32
v56@0:8q16@"NSDictionary"24d32@?<v@?@"NSDictionary"@"NSError">40@"NSObject<OS_dispatch_queue>"48
@"<CSDAVConferenceProviderDelegate>"16@0:8
v24@0:8@"<CSDAVConferenceProviderDelegate>"16
@"<CSDAVConferenceProviderDelegate>"
@"AVConference"
@"CSDProviderCall"
v48@0:8@"CXCallControllerHost"16@"NSString"24@"CXTransaction"32@?<v@?@"NSError">40
@"CXCallSource"24@0:8@"NSString"16
v24@0:8@"TUCall"16
v44@0:8@16@24f32q36
v32@0:8@"CXCallSource"16@"CXProviderConfiguration"24
v48@0:8@"CXCallSource"16@"NSUUID"24@"CXCallUpdate"32@?<v@?@"NSError">40
v40@0:8@"CXCallSource"16@"NSUUID"24@"CXCallUpdate"32
v56@0:8@"CXCallSource"16@"NSUUID"24@"NSDate"32q40@"CXCallFailureContext"48
v40@0:8@"CXCallSource"16@"NSUUID"24@"NSDate"32
v32@0:8@"CXCallSource"16@"NSUUID"24
v48@0:8@"CXCallSource"16@"NSUUID"24@"NSData"32q40
v44@0:8@"CXCallSource"16@"NSUUID"24f32q36
v48@0:8@"CXCallSource"16@"NSUUID"24@"NSString"32q40
v40@0:8@"CXCallSource"16@"CXTransaction"24@?<v@?@"NSError">32
B40@0:8@16@24^@32
v32@0:8@"CXCallSourceManager"16@"CXTransactionGroup"24
v24@0:8@"CXCallSourceManager"16
B40@0:8@"CXCallSource"16@"CXAction"24^@32
@"CXCallSource"24@0:8@"TUDialRequest"16
@"CXCallSource"24@0:8@"TUJoinConversationRequest"16
@"TUCallProvider"24@0:8@"NSString"16
v32@0:8@"CXCallAction"16@"CSDProviderCall"24
v32@0:8@"NSArray"16@"CSDProviderCall"24
v32@0:8@"CXStartCallAction"16@"CSDProviderCall"24
B44@0:8@16@24B32^@36
B36@0:8@16@24B32
@"CSDCallFilterManager"
@"CSDVoIPProcessAssertionManager"
@"CXCallSourceManager"
@"CXCallControllerHost"
@"CXInProcessCallSource"
@"CSDFaceTimeProviderDelegate"
@"<CXProviderDelegatePrivate>"
@"CSDCallSourceFetcher"
@"CSDScreenTimeCallFilter"
@"<CSDManagedDeviceMonitor>"
@"<CSDRouteManager>"
B32@0:8@"NSXPCListener"16@"NSXPCConnection"24
v40@0:8@?16@?24@32
^v16@0:8
v28@0:8@?16B24
v40@0:8@?16@24@32
@?32@0:8@16@?24
@?24@0:8@?16
@"NSXPCInterface"
@"NSObject<OS_dispatch_semaphore>"
v32@0:8@"<CSDProximitySensorObserverDelegate>"16@"NSObject<OS_dispatch_queue>"24
v24@0:8@"<CSDProximitySensorObserverDelegate>"16
@"TUDelegateController"
@32@0:8q16@24
?__C
RPDeviceChangeFlags
TUCallSoundPlayerSoundType
CHRecentCallMediaType
TUMomentsAvailability
Triggers
NCSDCallCenterObserverTriggers
os_unfair_lock_s
CTError
TUCallVerificationStatus
TUCallFilteredOutReason
TUConversationState
TUNearbyDeviceHandleType
CFString
NCFStringRef
__C_Synthesized
TUNeighborhoodActivityConduitError
VMMailboxType
HandleType
NCXHandleType
TUCallStatus
CSDAudioInterruptionProviderType
os_state_data_s
TUConversationLinkLifetimeScope
Name
NNSNotificationName
CHHandleType
CHRecentCallTTYType
TUHandleType
MRPlaybackState
TUCallSoundRegion
TURouteDeviceType
AXSDefaultRouteForCall
CSDAudioInterruptionOperationMode
Mode
NAVAudioSessionMode
Category
NAVAudioSessionCategory
Foundation
CallKit
CoreFoundation
Code
NTUNeighborhoodActivityConduitError
os_state_data_decoder_s
__Unnamed_union___Anonymous_field1
os_state_data_type_t
RPCompanionLinkClient
CompanionLinkMessenger
CompanionLink
CompanionLinkAuthenticationError
CompanionLinkAuthenticationResult
callservicesd
AudioInterruptionProvider
AnyAudioInterruptionProvider
AudioInterruptionPriorityProvider
AudioInterruptionProviderSetActiveOptions
AudioInterruptionProviderIdentifier
AudioInterruptionPriority
DescriptorResolver
DescriptorType
BlockedCallFilter
TinCanIDSProviderDelegate
UserIntentManager
NSUserDefaults
ConversationPersistenceStorage
EmergencyCallbackCapabilities
OneShotCancellationBox
State
PowerAssertionManager
AudioInterruptionProviderFactoryProtocol
AVAudioSessionInterruptionProviderType AVAudioClientInterruptionProviderType
AudioInterruptionProviderFactory
NearbyDeviceRoute
LetMeInRequestorKeyAgreement
ChangeTrackingDescriptorResolver
UpdateContext
HoldMusicDescriptor
CallCenterObserver
callservicesd
GroupFaceTimeNotificationProvider
SoundDescriptorActionResolver
Sound
FaceTimeLivePhotosIDSService
UNNotificationResponse
callservicesd
UserNotificationProvider
UserNotificationResponse
NotificationType
AVAudioClientInterruptionProvider
FaceTimeMultiwayIDSService
AVAudioSessionInterruptionProvider
callservicesd
ProcessState
ProcessObserver
callservicesd
FaceTimeNotificationProvider
FilterStatus
NSNumberConvertible
SharedConversationServerBag
CSDIDSService
IDSDeviceDestinationResolver
NearbyDeviceRouteProvider
DirtyCallManager
PendingMembershipTrackerServerBag
PendingMembershipTrackerStorage
PendingMembershipTracker
MemoryPendingMembershipTrackerStorage
SharedPendingMembershipBag
PendingMembershipInfo
UserAction
Errors
Mode
AuthenticationController
DuetDonater
allowContactsOnly
CompanionRpcMessenger
ReplyableInfo
CompanionRpcError
MessageInfo
CompanionRpcDefinition
CompanionEventDefinition
DescriptorProvider
DescriptorType
EmptyDescriptorProvider
EmptyDescriptor
CallController
TUAudioSystemController
LocalAudioSystemProvider
AudioActivationContext
SoundDescriptorAction
AudioController
CSDAudioController
AudioInterruptionProviderPool
MomentsUsageReport
TLAlert
callservicesd
RingtoneProviderAlertPlaybackObserver
RingtoneProviderAlert
RingtoneProviderProtocol
RingtoneProvider
RouteProvider
DeselectableRouteProvider
PairedHostDeviceRouteTrackingRouteProvider
^@callservicesd
ConversationLinkManager
pseudonym
ConversationLinkManagerErrorType
TinCanIDSService
RTCReporter
CallInfoPendingScore
RTCReporterInfo
RTCCSDCallInfo
CodingKeys
ScreenSharingActivityManagerProviding
ScreenSharingActivityManager
NCProtoDeviceTokenRequest
NCProtoContactInfo
NCProtoStartedSessionEvent
NCProtoEndedSessionEvent
NCProtoContactUpdateEvent
NCProtoJoinEvent
NCProtoTVLaunchedEvent
NCProtoCancelAddMemberEvent
NCProtoPolicyInfoUpdatedEvent
NCProtoAddMemberRequest
NCProtoAddMemberResponse
NCProtoDeviceTokenResponse
NCProtoDisconnectRequest
NCProtoDisconnectResponse
MomentsControllerLocalCapabilities
UserIntentValidator
BackgroundBluetoothAccessValidator
DonatedIntentValidator
ApplicationStateValidator
PrivateAPIValidator
MediaRemoteStateValidator
UserIntentValidationResult
MomentsNotification
MbP?
CHManager
CHRecentCall
callservicesd
CallHistoryDataSource
RecentCall
CallHistoryNotificationProvider
ConversationLinkKeyAgreement
CallFilterManager
SoundDescriptor
FaceTimeSyncIDSService
callservicesd
HoldMusicProviderProtocol
HoldMusicProvider
SpeechSynthesizerEvent
callservicesd
CarPlayManager
CodableRemoteScreenShareAttributes
ScreenSharingActivity
CodingKeys
RTCCSDRelayDeviceRoute
RTCCSDAudioRouteType
CodingKeys
MomentsControllerSession
UnknownCallFilter
ContactsCallFilter
ConversationLinkCryptoManager
ConversationLinkCryptoErrorType
RouteController
PendingRouteContext
TinCanIDSProviderDelegateCapabilities
IDSProviderDelegateCapabilities
ConversationPersistenceController
AudioDescriptor
PairedHostDeviceRouteProvider
RingtoneDescriptor
IDSPendingChat
GroupIDSPendingChat
DescriptorTrackingProvider
GeneratorDescriptor
AudioResolverProtocol
AudioResolver
Context
FaceTimeIDSProviderDelegateCapabilities
Cache
CacheItem
callservicesd
LocalAudioRouteProvider
CallAudioInterruptionState
RPCompanionLinkClient
RPCompanionLinkDevice
NearbyDevice
NearbyDeviceProvider
DeviceType
NearbyDeviceMonitor
ConversationLinkSyncManagerDelegate
ConversationLinkSyncManagerDataSource
ConversationLinkSyncManager
ConversationLinkSyncManagerMessageQueue
IDSInteractorDelegate
IDSInteractor
Action
MessageType
ScheduleMode
ConversationLinkDataSourceTUWrapper
CheckInDiff
EnqueueMode
IDSInteractorError
FaceTimeInviteDemuxer
CSDCall
AudioInterruptionActivationStateObserver
AudioInterruptionDescriptor
ProviderType
UNUserNotificationCenter
callservicesd
UserNotificationCenter
UserNotificationController
DiscoveryModeProviderProtocol
DiscoveryModeProvider
VMVoicemail
VMVoicemailManager
callservicesd
VoicemailDataSource
Voicemail
VoicemailNotificationProvider
CallHistoryCallFilter
OwnNumberCallFilter
DiscoveryModeDescriptor
SoundProviderProtocol
SoundProvider
AudioInterruptionDeferredEndDescriptor
ConversationLinkDescriptorManager
RTCCSDConversationInfo
CodingKeys
CompanionLinkManager
DeviceProvider
callservicesd
CSDAVCMoments
AnalyticsReporter
KeychainPasswordItem
KeychainError
ASCIIStringConvertible
?ScreenTimeCallFilter
allowedByScreenTime
MomentsRequest
callservicesd
NeighborhoodActivityConduit
ApprovalState
HandedOffConversationInfo
ConversationUpdateEvent
enabled: %d
accelerometer orientation changed to %ld
Beginning transaction for %@. Transaction count is now %lu. Added transaction: %@
Ending transaction for %@. Transaction count is now %lu. Ended transaction: %@
CSD encountered a fault with reason: %@
Invalidating process assertion for %@
Preparing conference with configuration: %@
Initializing new callID with device role %d
Fetched local invite dictionary: %@
Error fetching local invite dictionary %@: %@
Fetching local invite dictionary using remote invite dictionary %@
Failed to initialize a new call with device role %d.
Failed to create an AVConference instance. This usually happens when the AVConference SPI can't communicate with mediaserverd over XPC
[WARN] Attempted to prepare conference which has already started preparing (state=%d)
transport: %@ self.configuration: %@
Successfully started connection with configuration=%@ (timestamp: %f)
Failed to start connection with configuration=%@: %@
[WARN] Attempted to start conference which has not been prepared (state=%d)
[WARN] Conference does not exist
Delaying stop on conference...
Calling stop on conference %@
Calling cancel on conference %@
[WARN] Attempted to cancel a conference that has already started connecting: %@
Setting remote invite dictionary from %@ to %@
Setting caller from %d to %d
Attempting to set state to %d, which precedes current state %d
Setting microphoneMuted to %d for %@
Setting sendingAudio to %d
Setting sendingAudioData to %d
Setting conferenceProvider videoPaused to %d
Setting sendingVideo to %d
State is %d, updating isVideoPausedToStart from %d to %d
Updating capabilities from: %@ to %@
Setting remoteVideoPresentationSize from %@ to %@
Setting remoteVideoPresentationState from %d to %d
Conference didStart timeout fired
Updating device role from %d to %d
conference=%@ didStartSession=%d error=%@
Successfully started session
Session is connected, setting videoPaused to expected value: %d
[WARN] Session is already past Connected state, not sending delegate started
Failed to start session. error=%@
didStopError=%@ callMetadata=%@
AVConference stopped in failure: %{public}@
Sending delegate bytesOfDataUsageChanged: %ld
didPauseAudio=%d error=%@
didPauseVideo=%d error=%@
Not setting sendingVideoExpected to nil since our state is %d
Video was set to didPauseVideo: %d sendingVideoExpected: %@. Setting sendingVideo to sendingVideoExpected
remoteVideoPaused=%d
remoteMediaStalled=%d
Server died for conference provider %@
Registering to handle call handoff activity type with dynamic identifier %@ for provider %@
Frontmost call is hosted here ...
... and it is an endpoint here ...
... and we are a secondary device ...
... using a broadcast activity with dynamic identifier: %@.
[WARN] ... but no dynamic identifier could be found (%d) or no handoff user info exists (%d). Not broadcasting frontmost call
... but we are a primary device. Not broadcasting frontmost call
... and it is being relayed elsewhere. Using a local activity
Beginning handoff activity %@ for call %@
Ending handoff activity: %@
Broadcasting suppress ringtone activity for declined call: %@
Began app history activity %@ for call %@
Broadcasting suppress ringtone activity for call that suppressed its ringtone: %@
Broadcasting suppress ringtone activity for incoming call that started connecting: %@
Received broadcast for activity type %d and destination ID %@. Suppressing ringtone due to remote suppression for call %@
Received broadcast for activity type %d but ignoring it because its destination ID (%@) does not match this ringing call's desination ID (%@)
Calling ADClientSetValueForDistributionKey() with key %@ and value %f
Asking BackBoard to set the proximity detection mode to (%u).
Proximity detection should be %d since isReceiver: %d, isSpeaker: %d, isVoiceOverRunning: %d
Proximity detection should be disabled; eligible audio call does not exist
Proximity detection should be disabled; video call exists
Proximity detection should be disabled; isInterfaceOrientationPortrait: %d, isProximitySensorCovered: %d
Handling proximity sensor covered changed to %d
VoiceOver is enabled and the proximity sensor is covered, changing the audio route from speaker to receiver.
VoiceOver is enabled and the proximity sensor is uncovered, changing the audio route from receiver to speaker.
Updating proximity sensor state; calls changed.
Updating proximity sensor state; sensor covered changed.
Updating proximity sensor state; audio routes changed.
[WARN] Tried to get the call history identifier for this call (%@) but no conference ID was available (%@), we'll fall back to another method (GUID = %@). This call may now not sync properly between devices.
This chat's conferenceID and GUID are nil or empty, we cannot create a safe call history identifier
[WARN] Could not weak link notification string '%@'. Not observing notifications for it.
Calling endChatWithReason on chat %@ with reason %ld
Asked to end chat with UUID: %@, reason: (%ld) but could not find it
Using account %@
Inviting handle %@ excluding push tokens %@
Registering imav chat %@
Could not initiate FaceTime call - No chat returned for handle %@ with account %@
Could not initiate FaceTime call - No IM handle returned for handle %@ with account %@
Could not initiate FaceTime Call - Account %@ not registered
Legacy chat with matching UUID connected; attempting to fulfill pending answer call action %@
Legacy chat did not provide a connection date; Could not fulfill answer call action %@
[WARN] No pending answer call actions found with UUID: %@
Failing answer call action for chat because it ended before connecting: %@
Using call ended reason remote hangup because ended reason is %@
Using call ended reason answered elsewhere because ended reason is %@
Using call ended reason declined elsewhere because ended reason is %@
Using call ended reason unanswered because ended reason is %@
Using call ended reason failed because ended reason is %@
Incoming call was denied with error %@ so declining chat with IMAVResponseFilteredCall: %@
Calling acceptInvitation on chat %@
Not accepting invitation to chat %@ since it is already Connected
Calling endChat on chat %@
Calling setIsSendingAudio with %d for chat %@
Not holding chat %@ since it is not yet Connected
Calling setIsSendingVideo with %d for chat %@
Calling setRemoteVideoPresentationSize with %@ for call %@
Calling setRemoteVideoPresentationState with %ld for chat %@
Calling setRelayed with %d for chat %@
Calling setMuted with %d for chat %@
[WARN] Dropping activities because Expanse features are disabled. Please enable the "expanseEnabled" feature flag in TelephonyUtilities.
Requesting remote active participants for cached conversation with UUID: %@
Setting audioEnabled to %d
Ignoring to set videoEnabled since conversation is relaying
Setting videoEnabled to %d
Setting screenEnabled to %d, screenShareAttributes: %@
Setting videoPaused to %d
Setting screenShareAttributes to %@
Error setting screenShareAttributes when screen is not enabled
Setting audioPaused to %d
Setting oneToOneModeEnabled to %d
Kicking previous participant on conversation UUID: %@ participant: %@
Ignoring splitSessionSecondary since we aren't joined into the conversation UUID: %@ state: (%tu)
Failed to return to HomeScreen %@
Adding participant: %@
Found member: %@ representing participant: %@
RemoteMember is representing localMember!
Removing active participant and replacing it with one with the same identifier but a newer AVC data blob.
[WARN] Conversation already contains participant with no change in AVC data: %@
Removing participant with identifier: %lu  handle: %@
 Found matching handle %lu: %@
Removing splitSessionSecondary: %@
Leaving conversation because lightweightPrimary left on conversation UUID: %@ participant: %@ localMember: %@
[WARN] removeParticipantWithIdentifier:fromHandle: Not removing participant handle (%@) didn't match, with identifier %lu: %@
[WARN] removeParticipantWithIdentifier:fromHandle: Could not find participant with identifier %lu: %@
Adding virtual participant: %@
Trying to add virtual participant for plugin %@ with different identifier %llu: %@
Removing virtual participant: %@
[WARN] Trying to remove virtual participant for plugin %@ with different identifier %llu: %@
[WARN] Could not find virtual participant for plugin %@: %@
conversation: %@ remove remoteMembers triggeredLocally: %d
UUID: %@ remove remoteMembers: %@
[WARN] No members were removed to conversation: %@
UUID: %@ groupUUID: %@ remoteMembers: %@ triggeredLocally: %d
UUID: %@ otherInvitedHandles: %@
UUID: %@ invitationPreferences: %@
Handle %@ should be considered for addition as an invited member handle if not kicked
Conversation UUID %@ already contains member with handle %@, filtering out.
[WARN] No new members were added to conversation UUID: %@
add pendingMembers: %@ triggeredLocally: %d
Conversation UUID %@ already contains pending member with handle %@, filtering out from addition list.
remove pendingMembers: %@ triggeredLocally: %d
Conversation with UUID %@ does not have pending member with handle %@, filtering out from removal list.
[WARN] Ignoring new link %@ as conversation link already set to %@
Link on conversation UUID %@ was already set to %@, but this setting allows for updates, setting the link name to %@, the expiration date to %@, and the invited handles to %@
leaveActivitySessionWithUUID: %@
[WARN] Dropping request to remove activitySession because Expanse features are disabled. Please enable the "expanseEnabled" feature flag in TelephonyUtilities.
removeActivitySessionWithUUID: %@
Not launching screen sharing app
activitySession: %@
[WARN] Dropping new activitySession because Expanse features are disabled. Please upgrade to a later release to re-enable Expanse features.
[WARN] Dropping new activitySession because Expanse features are disabled. Please enable the "expanseEnabled" feature flag in TelephonyUtilities.
Comparison result: isNewer? %d
Ignoring new activity session since it was made before (%@) the latest activity session (%@)
BundleID override: %@
[WARN] Dropping new activitySession because Expanse features are disabled for bundleID: %@. Please upgrade to a later release to re-enable Expanse features.
Not launching app for locally started activity %@
Failed to launch app '%@' with activity identifier '%@': %{public}@
Successfully launched app '%@' with activity identifier '%@'
[WARN] Activity with identifer %@ is missing application context.
Not launching app as we are not joined into this conversation
Not launching app as we are not in an eligible activitySession state: %@
Not launching app as SharePlay is not allowed
Request to launch app for conversation with UUID %@ shouldLaunchInBackground %@
Attempting to launch app in background w/ PiP
Launched pip for activity %@ error %@
self: %@ context: %@
GreenTea devices are not supported for this conversation with UUID: %@
Copying invitation preferences to locally-created conversation from join context: %@
Bypassing AVCSession creation because localMember is lightweight %@
Creating CSDAVCSession with transport token %@
avcSessionCreationBlock
Not joining IDS group session because wantsStagingArea is true, instead moving to preparing state
Failed to create CSDAVCSession
[WARN] Not joining conversation because it isn't waiting or preparing: %@
[WARN] Not sending local participant data, no AVCSession: %@
self UUID: %@ audioReady: %d audioPaused: %d audioEnabled: %d
[WARN] Not starting audio for conversation because it isn't joining: %@
self UUID: %@
Leaving CSDIDSGroupSession: %@
[WARN] Not leaving conversation because it isn't joining/joined: %@
Kicking member on conversation UUID: %@ member: %@
Aliased session %@ to %@ for bundle identifier %@
[WARN] Not joining IDS session as state (%tu) is not joining on conversation: %@
idsSessionJoin
Starting %@
avcSessionStart
Skipped starting session since session start is already in progress %@
[WARN] Timed out waiting for session to stop after %@, moving to waiting state and cleaning up.
Timed out waiting for conversation to leave, but it's not in state leaving (instead is in %i).
Timed out requesting AVC blob for participant with identifier: %@
Replacing existing recovery timeout for participant with identifier %lu
Setting up AVC blob recovery timeout for participant with identifier %lu
Cancelling in flight AVC blob recovery for participant with identifier %lu
Pruning remote participants as necessary, current server identifiers: %@
_stableExpanseIdentifier %@ for %@ 
didJoinGroup: %d error: %@
Joining conversation without AVC session for lightweight device
Failed to join group: %@
didLeaveGroupWithError: %@
CSDIDSGroupSession %@ failed to leave group for conversation UUID %@: %@
endedWithError: %@ reason: %d
Kicked from the conversation, cleaning up
Invalidating cached conversation: %@, no remote active participants were found.
Activating cached conversation with UUID: %@ since %lu remote participants were still found to be active.
didReceiveKickedParticipantIDs: %@
removing participant %@
participant %@ not found to remove
updating kickedMembers %@ to %@
updating kickedMembers to %@
updating pendingAllowedMembers to %@
[WARN] didReceiveKickedParticipantIDstype: %hu unexpected
Retrying kicked members: retries: %lu pendingKickedMembers: %@
[WARN] Not retrying to kickMembers, max retry count (%lu) reached
[WARN] Kicking turned off on the server, resetting state
AVCProviderEndReason=%d error.code=%d detailedError=%d
AVCProviderEndReason=%d, this should not happen
No error with a failed start from AVC using %d
didStart: %d error: %@
Found expectedVideoEnabled: %@, updating value to match state
Not in the joining state so not moving to joined
Failed to start CSDAVCSession: %@
CSDAVCSession failed to start while we're already leaving a U+1 call. Treat this as a leave and clean up the conversation
didDetectError: %@
Rebroadcasting AVC data to other members of this group to attempt to recover from error (last rebroadcast time was %f).
Not attempting to rebroadcast message since state was not in join (was %d)
error: %@
AVCSession %@ stopped in failure for conversation UUID %@: %@
Setting GFT conversation back to default state of video=1
CSDAVCSession %@ server did disconnect for conversation UUID %@
changedLocalAudioEnabled=%d
Failed to set localAudioEnabled (%d): didSucceed (%d): error: %@
Audio was set to audioEnabled: %d self.expectedAudioEnabled.boolValue: %@. Setting audioEnabled to self.expectedAudioEnabled.boolValue
changedLocalVideoEnabled=%d
Failed to set localVideoEnabled (%d): didSucceed (%d): error: %@
[WARN] Skipping to set localVideoEnabled (%d) error: %@
Video was set to videoEnabled: %d self.expectedVideoEnabled.boolValue: %@. Setting videoEnabled to self.expectedVideoEnabled.boolValue
changedScreenEnabled=%d
Failed to set screenEnabled (%d): didSucceed (%d): error: %@
Screen was set to screenEnabled: %d self.expectedScreenEnabled.boolValue: %@. Setting screenEnabled to self.expectedScreenEnabled.boolValue
changedLocalAudioPaused=%d
Failed to set localAudioPaused (%d): didSucceed (%d): error: %@
Audio paused was set to audioPaused: %d self.expectedAudioPaused.boolValue: %@. Setting audioPaused to self.expectedAudioPaused.boolValue
changedLocalVideoPaused=%d
Failed to set localVideoPaused (%d): didSucceed (%d): error: %@
Video paused was set to videoPaused: %d self.expectedVideoPaused.boolValue: %@. Setting videoPaused to self.expectedVideoPaused.boolValue
changedOneToOneModeEnabled=%d
User requested videoPaused=true in a U+1 call, since we're moving out of U+1 state, setting videoEnabled=false for parity
changedBytesOfDataUsed=%ld
sessionShouldReconnect=%@
Skipping reconnect since one to one mode is disabled
[WARN] Unknown participant with identifier: %lu
[WARN] Stopping screen on local device since one of the remote participants sharing their screen %@
[WARN] Unknown participant with identifier: %lu activeRemoteParticipants: %@
ActivitySession %@ doesn't support aTV handoff. Sending conversation back
Did get session unjoined callback startDate %@ endDate %@ session %@
Setting appLaunchState to needsLaunch
CSDConversation setting appLaunchState to needsLaunch %@
ActivitySession %@ joined
Ignoring %@ message because we already have a call with this uniqueProxyIdentifier: %@
We already have a call for this %@ message: %@. Updating it with new values
Creating new call for %@ message
[WARN] Ignoring %@ message because no call exists for %@ and the message is not from the paired device
[WARN] Could not find call with uniqueProxyIdentifier %@. All current calls: %@
Call answered elsewhere message had no uniqueProxyIdentifier set. Using current calls
Resetting call %@ with protoCall %@
Not resetting call %@ with protoCall %@ because they are equal
Creating new call with protoCall %@
Existing call no longer exists and is not sending: %@
handleUpdateRemoteCallStateMessageFromHost %@
Updating call %@ with protoCall %@
Not updating call %@ with protoCall %@ because they are equal
[WARN] Received %@ message, but we already have some calls
Ignoring %@ because messageSendTime (%f) <= call.remoteUplinkMutedSetTime (%f)
Pulling remotely hosted call: %@
Failed to prepare conference for pull message %@ and call %@
Fetching localSenderIdenity for localSenderIdentityAccountUUID %@
Replacing hardPauseDigits '%@' with '%@' since protocolVersion is %d
Replacing soundRegion %ld with %ld since protocolVersion is %d
Created pause digits queue: %@
Setting disconnected reason to dial failed because call is outgoing but has not started outgoing
Setting disconnected reason to remote hangup because ended reason is %ld
Setting disconnected reason to remote hangup because call has started connecting and ended reason is %ld
Setting disconnected reason to remote hangup because outgoing call has not started connecting and ended reason is %ld but call is a telephony call
Setting disconnected reason to remote unavailable because outgoing call has not started connecting and ended reason is %ld
Setting disconnected reason to answered elsewhere because ended reason is %ld
Setting disconnected reason to declined elsewhere because ended reason is %ld
Setting disconnected reason to handed off because ended reason is %ld
Setting disconnected reason to user busy because ended reason is %ld
Setting disconnected reason to call failed because failure reason is %ld
Setting disconnected reason to account unsupported because failure reason is %ld
Setting disconnected reason to network unsupported because failure reason is %ld
Setting disconnected reason to provider crashed because failure reason is %ld
Setting disconnected reason to media start failed because failure reason is %ld
Setting disconnected reason to media server crashed because failure reason is %ld
Setting disconnected reason to other secondary device in use because failure reason is %ld
Setting disconnected reason to kicked because failure reason is %ld
Setting disconnected reason to rejected because failure reason is %ld
Setting disconnected reason to invalid conversation link because failure reason is %ld
Setting disconnected reason to conversation links disabled because failure reason is %ld
Setting disconnected reason to call failed because ended reason is %ld
Failed to find a call source to dial with for dial request: %@
CSDProviderCall joinConversationWithRequest: %@
LMI: FT Provider: %@ Sender identities: %@
Join request specifies invitation preferences: %@
attributes: %@
AVAudioSession muteSessionInput: %d for %@
Failed AVAudioSession muteSessionInput error: %@
for call: %@ pauseDigitsQueue: %@
[WARN] Next pause digits are not hard pause
[WARN] No next pause digits exist
for call: %@ key: %d
for call: %@ remoteVideoPresentationSize: %@
for call: %@ remoteVideoPresentationState: %d
Dequeueing next pause digits
Sending pause digits: %@ type: %ld
Found queued soft pause digits: %@
for pauseDigitsQueue: %@
Break before make timeout: %lfs
Determined wants break before make is %@ (supportsSimultaneousVoiceAndData: %@, nonWifiFaceTimeAvailable: %@, wiFiActiveAndReachable: %@) for call %@
Could not determine whether device wants break before make; could not obtain sender identity capabilities for call %@
Could not determine whether device wants break before make; could not obtain local sender identity for call %@
Call started outgoing: %@
Disconnecting video call because another call started outgoing: %@
Disconnecting call using the baseband because a video call started outgoing and wantsBreakBeforeMake=YES: %@
All calls ended. Setting uplink and downlink muted to NO
Call started connecting: %@
%@ is handling %@
Pulling relaying calls from client since one to one mode changed for relaying calls
Video call connected: %@
Disconnecting current call because another video call connected: %@
Ending current active call %@ because call %@ is going to go active
Reporting emergency call to screen time
There was an error enabling emergency mode. Enabled successfully (%d) Error: %@
Posting CLTM notification %@ and setting state to %llu
Requesting to pull call %@ because its continuity state is different from call %@
Disconnecting call %@ because its continuity state is different from call %@
An endpointIDSDestination %@ is present for call %@ so pushing all hosted calls to that destination
An endpointRapportMediaSystemIdentifier="%@" or endpointRapportEffectiveIdentifier="%@" is present on dial request for call %@ so attempting to pick matching route
Setting up break before make timeout for call: %@
Disconnecting call because video call is still sending and break before make timeout fired: %@
CarPlay is not connected; muting uplink for RTT call %@
CarPlay is connected; unmuting uplink for RTT call %@
Setting uplink muted for TinCan call %@
[WARN] Store demo mode enabled. Limiting certain calls
Starting call duration limit timer as we are in a retail environment
Stopping call duration limit timer
Disconnecting restricted calls because the limited call duration timer fired: %@
Found active call needing hold music: %@
Hold music enabled - call is active so muting uplink and downlink
Hold music disabled - unmuting uplink and downlink
handleUserInteractionWithBlock: shouldOpenInCallService: %d shouldDisplaySystemCallControls: %d callUUID: %@
updating descriptor old: %{public}@ new: %{public}@
TUOpenURLWithCompletion result: %@, error: %@
Encountered error while opening URL: %@
Punching out to app with bundle identifier %@
Successfully launched application with bundle identifier %@
Attempt to open application with bundle identifier %@ failed with error %@
XPC connection interrupted from client %@
XPC connection invalidated from client %@
Approval client enabled: %d, %@
Client deregistered itself as split-session approver
Ignoring deregistration; sender is not current approver
No session approval clients registered
Split session approval client: %@
Approval client unexpectedly nil!
Retrieving subscription information failed with error %@ for %@.
added service provider uuid=%@ carrierPhoneNumbers=%@
Retrieved carrier phone number '%@' for subscription %@
Retrieving carrier phone number for subscription %@ failed with error %@
Carrier bundle changed for subscription context %@.
Subscription info changed
Creating IDSGroupSession with options: %@
preferences: %@
options: %@
participantDestinationIDs: %@ contextData: %@ triggeredLocally: %d
participantDestinationIDs: %@ contextData: %@ requiredCapabilities: %@ requiredLackOfCapabilities: %@ triggeredLocally: %d
Sending participantData: %@
session: %@
session: %@, options: %@
session: %@, requestDataCryptor: %@
session: %@, requestEncryptionKeyForParticipants: %@ topic: %@
session: %@, setRequiredCapabilities: %@ requiredLackOfCapabilities: %@
session: %@, addAliasesToConversationContainer: %@ salt: %@
[WARN] Not aliasing groupUUID since IDSGroupSession doesn't respond to %@
[WARN] Not aliasing participantIDs since IDSGroupSession doesn't respond to %@
session: %@, participantIDForAlias: %llu salt: %@
[WARN] Not unaliasing participantIDAlias since IDSGroupSession doesn't respond to %@
Ignoring didRegisterPluginAllocationInfo because qrPluginEnabled feature flag is disabled
Ignoring didUnregisterPluginAllocationInfo because qrPluginEnabled feature flag is disabled
self: %@ not running pending blocks yet because self.hasStarted=%d self.hasReceivedAccept=%d self.isInitiator=%d
self: %@ running block %@ with transport %@ and %@ accept payload data
self: %@ pending block on transport availability: %@
[WARN] Transport availability block timed out: %@
Session %@ is not connected and waitUntilConnected is YES. Pending data
Session %@ is not connected but waitUntilConnected is NO. Sending data
Session %@ is connected. Sending data
Session %@ is ending/ended. Dropping data on the floor
self: %@ destinations: %@
Session %@ is waiting. Sending data
Session %@ is not waiting. Dropping data on the floor
self: %@ data: %@
Setting session %@ to ending for prepareToEnd
Not setting session %@ to ending for prepareToEnd because session is not connected
Received invitation ACCEPT with data for session %@ from (fromID=%@) destination %@ device %@
Received invitation CANCEL with data for session %@ from (fromID=%@) destination %@ device %@
Received invitation DECLINE with data for session %@ from (fromID=%@) destination %@ device %@
Received session MESSAGE for session %@ from (fromID=%@) destination %@ device %@
thumperCallingAllowedOnDefaultPairedDeviceDefault keyExists: %d isAllowed: %d
Setting %@ default to %d
Error synchronizing NPS defaults: %@
Dismissing Thumper available notification on secondary device for account ID %@
Displaying Thumper enabled disclaimer on secondary device for account ID %@
Dismissing Thumper enabled disclaimer on secondary device for account ID %@
Could not obtain Thumper account identifier for sender identity UUID %@ from data source capabilities state %@
Comparing cached Thumper capabilities state %@ with data source capabilities state %@
Should show Thumper available notification for account ID %@
Default paired device unique ID was %@ and is now %@
Check if devices should be enrolled now that the default paired device changed.
Checking to see if any devices have been removed from this iCloud account.
Device with the uniqueID %@ will be unpaired from Thumper because it is no longer on the IDSService.
%@ is handling add capabilities for sender identity UUID %@
Thumper calling preferences update initiated by add capabilities for sender identity UUID %@
Skipping Thumper preferences update; Thumper capabilities state does not exist for UUID %@
%@ is handling remove capabilities for sender identity UUID %@
Thumper calling preferences update initiated by remove capabilities for sender identity UUID %@
Skipping Thumper calling preferences update; unknown context info found for sender identity UUID %@
%@ is handling change Thumper calling capabilities for sender identity with UUID %@
Show a reminder to the user that thumper is now available.
User requested to Turn On Thumper calling
[WARN] Not adding user notification because we are already displaying one
Removing existing reminder notification
Show a disclaimer to the user about their emergency address info now that thumper is enabled.
Emergency Address disclaimer: Preferences button pressed, open URL (%@).
Removing existing emergency address disclaimer
Archiving Thumper capabilities state object failed with error %@
Unarchiving Thumper capabilities state object failed with error %@
Archived object was of unexpected class %@: %@
Prefereces object was of unexpected class %@: %@
Initializing %@
FaceTime Audio availability is %ld. FaceTime Video availability is %ld
Initialized %@
Active accounts changed for service %@: %@
Received caller ID changed notification: %@
Received service availability changed notification: %@
Received devices changed notification: %@
FaceTime iCloud account is %@ (isActive=%d, profileID=%@) and relay iCloud account is %@ (isActive=%d, profileID=%@)
FaceTime caller ID %@ is not a valid outgoing relay caller ID
Attempting to find a valid outgoing caller ID in set of available outgoing caller IDs %@
Selected outgoing caller ID %@ from list of available outgoing caller IDs %@
Could not automatically select an outgoing caller ID; multiple telephone numbers are listed in the set of available outgoing caller IDs %@
Attempting to find a valid outgoing caller ID in list of vetted account aliases %@
Selected outgoing caller ID %@ from list of vetted account aliases %@
Could not automatically select an outgoing caller ID; multiple telephone numbers are listed in the set of vetted account aliases IDs %@
Outgoing Caller ID is %@
streamPreferences: %@
callProviderIdentifier: %@
dialRequest: %@
Could not determine UUID for FaceTime app bundle identifier %@
Setting disconnected reason to call failed because invitation was sent but no push tokens were available to receive the invitation for call %@
Setting disconnected reason to call failed because CSDIDSDualSession ended reason is %ld for call %@
Using call ended reason answered elsewhere because CSDIDSDualSession ended reason is %ld
Using call ended reason declined elsewhere because CSDIDSDualSession ended reason is %ld
Using call ended reason unanswered because CSDIDSDualSession ended reason is %ld
Using call ended reason remote ended because CSDIDSDualSession ended reason is %ld
Setting disconnected reason to call failed because CSDAVConference ended reason is %ld for call %@
Using call ended reason remote ended because CSDAVConference ended reason is %ld
Setting local portrait aspect ratio %@ and local landscape aspect ratio %@
[WARN] Disabling key exchange because %@ default is set to YES
videoAspectRatioDescriptor: %@
Canceling session
Declining session
Stopping conference
Ending session
for call %@
Setting isSendingAudio to %d for chat %@
Conference has not been created yet. Updating shouldStartAudioPaused to %d
Setting isSendingAudioData to %d for chat %@
Setting isSendingVideo to %d for chat %@
Conference has not been created yet. Updating shouldStartVideoPaused to %d
Setting relaying from %d to %d for chat %@
transport: %@
sessionStarted: %@
Not starting connection because conference state is %d
session %@ invitationSentToPushTokens %@ shouldBreakBeforeMake %d
session %@ endedWithReason %d
session %@ receivedInvitationAcceptWithData %@
[WARN] Ignoring invitation accept since chat is incoming %@
[WARN] Ignoring invitation accept since there is no remote from ID set on the session.
Dropping invitation accept since there is no remote push token provided.
Dropping invitation accept since the remote push token was not one of the ones we invited.
[WARN] Ignoring incoming accept since accompanying message was nil
[WARN] Ignoring incoming message since message with type=%@ was not invite.
Error while creating UUID from protoUUID: %@
[WARN] Not setting upgradeSessionUUID for message: %@ self.upgradeSessionUUID: %@
Not starting connecting because session state is %d and conference state is %d
session %@ receivedInvitationDeclineWithData %@
session %@ receivedInvitationCancelWithData %@
session %@ receivedData (data is %@)
message: %@
[WARN] First frame not received after %f seconds for %@
reason=%ld error=%@
Remote media stalled for chat: %@. Reconnecting IDS session.
Device first unlock block invoked, initializing CXCallDirectoryManager...
XPC activity checked in. Criteria: %@
Setting activity state to XPC_ACTIVITY_STATE_CONTINUE
Error setting activity state to XPC_ACTIVITY_STATE_CONTINUE
Beginning daily maintenance with activity %@
Successfully compacted store
Error compacting store: %@
Setting activity state to XPC_ACTIVITY_STATE_DONE
Error setting activity state to XPC_ACTIVITY_STATE_DONE
Error synchronizing call directory extensions: %@
Successfully synchronized call directory extensions
Extensions changed for Call Directory NSExtensionManager %@, but we do not have a CXCallDirectoryManager (perhaps because device is not yet unlocked) so cannot synchronize
isDestinationIDAllowedThroughDoNotDisturb: provider=%@
isDestinationIDAllowedThroughDoNotDisturb: bundleID=%@
isDestinationIDAllowedThroughDoNotDisturb: eventDetails=%@
[WARN] Error encountered resolving behavior via DND. Defaulting isDestinationIDAllowedThroughDoNotDisturb to YES. error=%@
Handling %@ by preparing connected sessions to end
Handling %@ by ending ending sessions
CSDMessagingCallMessage could not be read
Handling %@ with message: %@ latency: %llu
CSDMessagingCallMessage is of unsupported type: %d
Updating dialingIDSDevice using device list %@
A paired device exists, so using that as the dialing device: %@
[WARN] We found two devices with matching linkedUserURIs (arbitrarily choosing the first): %@ and %@
A device exists with a linkedUserURI that matches Caller ID %@, so using that as the dialing device: %@
[WARN] Could not find a dialingIDSDevice. No paired devices exist and no devices that support phone calls and have a linkedUserURI for %@ exist.
Could not retrieve local invite dictionary for message: %@
(IDSMessaging Host->Client) sendIncomingCallMessageToClientForCall: %@
Call cannot be answered. Only notifying the paired device
[WARN] Failed to prepare conference for call %@. Not sending incoming call message to relay clients
Not sending out incoming call invitation because call is no longer ringing: %@
(IDSMessaging Host->Client) sendCallDialedMessageToClientForCall: %@
(IDSMessaging Host->Client) sendCallAnsweredElsewhereMessageToClientForCall: %@
(IDSMessaging Host->Client) sendCallDisconnectedMessageToClientForCall: %@
(IDSMessaging Host->Client) sendCallConnectedMessageToClientForCall: %@
(IDSMessaging Host->Client) sendResetWantsHoldMusicMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateCallDisplayContextMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateFailureExpectedMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateRemoteUplinkMutedCallMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateSupportsTTYWithVoiceCallMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateCallModelMessageToClientForCall: %@
(IDSMessaging Host->Client) sendDeviceUnavailableMessageToClient
(IDSMessaging Host->Client) sendPullRelayingCallsMessageToClient
(IDSMessaging Host->Client) sendResetStateMessageToClient
(IDSMessaging Host->Client) sendHardPauseAvailabilityMessageToClientForState %d digits: %@
(IDSMessaging Host->Client) sendUpdateRemoteCallStateMessageToClient
(IDSMessaging Host->Client) sendCallStartedConnectingMessageToClientForCall: %@
(IDSMessaging Host->Client) sendDialCallFailedForUniqueProxyIdentifier: %@
(IDSMessaging Host->Client) sendDialCallFailedForScreenTimeForUniqueProxyIdentifier: %@
(IDSMessaging Host->Client) sendPushCallsMessageToClientDestination: %@
Allowing call: %@ to be pushed to destination: %@
Skipping call: %@ to track for pushing to destination: %@
Found no calls to send sendPushCallsMessageToClientDestination
(IDSMessaging Host->Client) Sending UpdateCallContext message: %@
(IDSMessaging Host->Client) sendNeedsManualInCallSoundsChangeMessageToClientForCall: %@
(IDSMessaging Host->Client) sendInvitationSentMessageToClientForCall: %@
(IDSMessaging Host->Client) sendUpdateRoutesMessageToClientForRoutes: %@
(IDSMessaging Client->Host) sendDialCallMessageToHostForCall: %@
No dialing IDS device found. If we aren't already in a session, this dial call attempt will fail.
Failed to prepare conference for call %@. Disconnecting call with conference failed
Not sending out dial call invitation because call is no longer sending: %@
(IDSMessaging Client->Host) sendAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendDisconnectCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendHoldCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendUnholdCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendGroupCallMessageToHostForCall: %@ otherCall: %@
(IDSMessaging Client->Host) sendUngroupCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendSwapCallsMessageToHost
(IDSMessaging Client->Host) sendEndActiveAndAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendEndHeldAndAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendHoldActiveAndAnswerCallMessageToHostForCall: %@
(IDSMessaging Client->Host) sendDisconnectCurrentCallAndActivateHeldToHost
(IDSMessaging Client->Host) sendDisconnectAllCallsToHost
(IDSMessaging Client->Host) sendSendHardPauseDigitsMessageToHost
(IDSMessaging Client->Host) sendRequestCallStateMessageToHost
(IDSMessaging Client->Host) sendPullCallsMessageToHost
[WARN] Failed to prepare conference while pulling calls
(IDSMessaging Client->Host) sendPushRelayingCallsMessageToHostForSourceIdentifier: %@
(IDSMessaging Host->Client) sendUpdateRemoteUplinkMutedCallMessageToHostForCall: %@
(IDSMessaging Host->Client) sendPickRouteMessageToHostForRoute: %@
(IDSMessaging Client<->Host) sendSetTTYTypeCallMessageForCall: %@ ttyType: %d
(IDSMessaging Client<->Host) sendSetUplinkMutedCallMessageForCall: %@ uplinkMuted: %d
(IDSMessaging Client<->Host) sendSuppressRingtoneMessageForCall
(IDSMessaging Client<->Host) sendUpdateSystemVolumeForCall: %@
[WARN] We determined that device is null and destination: %@ is not guest. Ignoring incoming message: %@
Handle incoming %@ message: %@
[WARN] We determined that device: %@ cannot process messages for provider %@. Ignoring incoming message: %@
[WARN] Screen Time restricted the call for dial call message with destinationID %@ and provider: %@ is emergency: (%d)
[WARN] Ignoring %@ relay message since our device does not suppport processing messages of that type.
Messaging device can't receive relayed calls ...
... and we were told to decline the session invite. Declining incoming %@ message: %@
... and we were told not to decline the session invite. Ignoring incoming %@ message: %@
[WARN] Setting should ignore session to YES for %@ message because message is from a guest destination and this device is not an AudioAccessory
Query result: %@ for handle: %@ provider: %@
[WARN] Setting should ignore session to YES because TUICFInterface allowCall = NO for destinationID %@ and provider %@
[WARN] Setting should ignore session to YES because a call exists with sending status: %@
[WARN] Setting should ignore session to YES because screen time filtered message for destinationID %@ and provider %@ with emergency (%d)
[WARN] Setting should ignore session to YES because relay is not preferred, message provider is Telephony, and isDirectTelephonyCallingCurrentlyAvailable is YES
[WARN] Setting should ignore session to YES because relay is not preferred, message provider is FaceTime Audio, and isDirectFaceTimeAudioCallingCurrentlyAvailable is YES
[WARN] Setting should ignore session to YES because relay is not preferred, message provider is FaceTime Video, and isDirectFaceTimeVideoCallingCurrentlyAvailable is YES
[WARN] Setting should ignore session to YES because relay is not preferred, message provider is TinCan, and isDirectFaceTimeAudioCallingCurrentlyAvailable is YES
[WARN] Setting should ignore session to YES because no calls exist with an endpoint on the current device: %@
Launched by IMDaemon notification
Launched by application installed notification
Launched by application uninstalled notification
Could not create notification for XPC event %@
Caught SIGINFO. Dumping debug info.
Caught SIGUSR1
Caught SIGUSR2
Created call center: %@
Performing user configuration migration
Did not find default to enable LivePhotoXPCService - using old moments stack
Initialized CSDDaemon
Calling xpc_transaction_exit_clean() due to language change
failed to initialize temporary directory (%d): %s
failed to resolve temporary directory (%d): %s
User configuration changed
Used country code '%@' to determine international phone number representation: %@
Determined that invite should be %@ - (isWiFiAvailable=%d isWiFiAllowed=%d isCellularDataAvailable=%d isCellularDataAllowed=%d shouldOverrideNetworkAsAvailable=%d)
Invite received for service %@ account %@ from (fromID=%@) with context: %@
Recieved pending message of type %ld
Incoming call was denied with error %@ so ignoring chat: %@
Not handling pending message of type: %ld
Invite received for session %@ account %@ from (fromID=%@) with data: %@
Declining this invite because we found a sending chat with the same destination: %@
Incoming call was denied with error %@ so declining chat: %@
Ignoring incoming invite since shouldAcceptIncomingInvite is %d
Ignoring incoming invite since message with type=%@ was not an invite.
[WARN] Ignoring incoming invite since accompanying message was nil
provider: %@
Calling answer on chat %@
Not accepting invitation to call %@ since it is already Connected
Calling end on chat %@
Setting sendingAudio to YES for chat %@
Setting sendingAudio to NO for chat %@
Chat with matching UUID connected; attempting to fulfill pending answer call action %@
Chat did not provide a connection date; Failing answer call action %@
Failing answer call action for call because it disconnected before connecting: %@
[WARN] called for session %@ that was not the initiator (%d) or that already had a version set (%d)
Session %@ is waiting. Sending invitation
Session %@ is not waiting. Not sending invitation
Session %@ is waiting. Accepting invitation
Session %@ is not waiting. Not accepting invitation
Session %@ is waiting. Canceling invitation
[WARN] Asked to cancel invitation with non-nil data and a concrete cancel reason, but that combination is unsupported
Session %@ is not waiting. Not canceling invitation
Session %@ is waiting. Declining invitation
Session %@ is not waiting. Not declining invitation
Session %@ started (shouldUseSocketForTransport: %d socket: %d, destination: %@)
Received invitation SENT for session %@ with tokens %@ shouldBreakBeforeMake %d
Session %@ ended with reason %d: %@
Session %@ appears to have ended with an unanswered reason: %d
Session %@ appears to have ended with a local hangup reason: %d
Session %@ appears to have ended with a remote hangup reason: %d
Session %@ appears to have ended with an accepted elsewhere reason: %d
Session %@ appears to have ended with a declined elsewhere reason: %d
Session %@ appears to have ended with a fatal reason: %d
Session %@ appears to have ended due to mismatched networks reason: %d
Received invitation ACCEPT with data for session %@ from %@
Received invitation CANCEL with data for session %@ from %@
Received invitation DECLINE with data for session %@ from %@
Received session MESSAGE for session %@ from %@
Found matching account: %@ for uuid: %@
Found matching account: %@ for uuid: %@ but it was not active and cannot be used for FaceTime.
[WARN] Server bag does not support quick relay
Server bag is not loaded. Assuming we can make a FaceTime call over quick relay
Starting FaceTime IDS chat using account: %@ destinations: %@ options: %@
Cannot start FaceTime IDS chat using handle %@ because IDS destination was '%@'
Cannot start FaceTime IDS chat using service %@ because account is not active: %@
Tried to make an outgoing call when we already had a ringing call with the same destination: %@
Requesting transaction to answer already-ringing call
Requested transaction to answer already-ringing call with UUID %@ failed with error %@
Successfully requested transaction to answer already-ringing call
[WARN] Not attempting to use IDSSession for outgoing FT call because server bag does not allow quick relay invitations
[WARN] Found a chat to upgrade: %@
Unable to convert to remoteIDSToken: %@
Unable to find existing chat for conversation: %@
Found existing chat: %@ for conversation: %@
[WARN] Failing action %@ we determined that chat %@ cannot be upgraded.
%@ Auto-upgrading because chatToUpgrade is %@, isConnected: %d, isVideo: %d, isSendingVideo: %d, isSendingAudio: %d isChatPendingUpgrade: %d
Upgrading chat: %@
Ending chat that is being upgraded: %@
[WARN] Could not find chat with UUID %@. All chats: %@
Matching sender identities %@ to IDS accounts %@
Updating FaceTime provider with configuration %@
service: %@ activeAccountsChanged: %@
Ignoring %@ because messageSendTime (%f) <= call.uplinkMutedSetTime (%f)
[WARN] Ignoring received request action message because it has a request action type we don't know how to handle: %@
transferFileAtURL: %@, destinations: %@
placing unzip results into folder %@
new directory urls: %@, unzippedDirectoryURL: %@
Error retrieving contents of directory at URL %@: %@
temporaryClientFileURL: %@, destinations: %@
Sending resource at URL %@ to destinations %@ with metadata %@
Successfully started sending resource with identifier %@
Failed to start sending resource with identifier %@: %@
%@ doesn't exist at client file url: %@
incomingResourceURL: %@ metadata: %@ fromID: %@
Copied resource to temporary URL: %@
successfully sent file with identifier: %@
failed to send file with identifier: %@, error: %@
[WARN] Unexpected nil clientFileURL for service: %@, account: %@, identifier: %@, didSendWithSuccess: %d, error: %@, clientFileURLByIdentifier: %@
Failed to copy URL at %@ to %@: %@
Failed to create directory at URL %@: %@
Error moving url %@ to %@: %@
Deleted contents at URL: %@
Failed to delete contents at URL %@: %@
Zipping directory at URL: %@, output to: %@
Error zipping directory at URL %@ to output URL %@
operation: %ld, inputURL: %@, outputURL: %@
Error occurred during IMFileCopierOperation type %ld on inputURL %@ and outputURL %@
completed operation: %ld, inputURL: %@, outputURL: %@
deleting temporary file at URL: %@
Calling fetch completion block for call source with identifier %@
Waiting for call source with identifier %@
[WARN] Timed out waiting for call source with identifier %@ to check in
[WARN] Couldn't identify device type based on model identifier (%@)
Enabling relay calling on secondary device %@.
Activating Thumper calling on secondary device %@ for telephony subscription with UUID %@.
User notification has been completed with response %lu and entered PIN %@
Showing service confirmation dialog to user
Requesting pin from iPhone
Canceling pin request from iPhone
PIN code entered with success=%d cancelled=%d
Device Pin Exchange received an incoming approval request
[WARN] We received an incoming pin code alert from a non-telephony device: %@
User tapped cancel on the Pin Display Alert
Request for pin exchange failed
[WARN] Ignoring request to group call because it is already grouped: %@
[WARN] Ignoring request to ungroup call because it isn't grouped: %@
Setting uplinkMuted to %d for call %@
Started conference successfully for answered relay call %@
[WARN] Failed to start conference connection when answering call %@: %@
Conference connection stopped (cleanly=%d) for answered call %@: %@
Started conference successfully for dialed relay call %@
[WARN] Failed to start conference connection when dialing call %@: %@
Conference connection stopped (cleanly=%d) for dialed call %@: %@
Started conference successfully for pulled relay call %@
Failed to start conference connection when pulling call %@: %@
Conference connection stopped (cleanly=%d) for pulled call %@: %@
[WARN] Ignoring request to hold call because it is already held: %@
[WARN] Ignoring request to unhold call because it isn't held: %@
Entitlement for key '%@' is non-nil but is of class %@ rather than an NSArray (%@), so assuming process %@ has no entitlements
[WARN] Cannot create emergencyTUHandle from CSDMessagingHandle %@
[WARN] Cannot create emergencyTULabeledHandle from CSDMessagingLabeledHandle %@
Received acknowledgement for message with identifier: %@. Removing from waiting messages.
[WARN] Received acknowledgement for unknown message with identifier: %@
Received successful didSend for message with identifier %@ using account %@
Received unsuccessful didSend for message with identifier %@ using account %@: %@
Incoming message of type %@ from destination %@ device %@: %@
[WARN] Received message %@ from device %@ but it is not the default paired device
[WARN] No device found for fromID %@. All devices: %@
[WARN] Removing IDSSendMessageOptionForceLocalDeliveryKey key from sendMessage options because pairedDeviceUniqueIDOverride exists
Not attempting retry since message is no longer waiting for acknowledgement: %@
[WARN] Not attempting retry since we are out of retry attempts for %@ message with identifier: %@
Retrying message send with identifier: %@
Sending %@ message with identifier %@ and options %@ to destinations %@
identifier %@ message %@
Successfully sent %@ message
Setting up reliable message delivery for %@ message with identifier: %@ and retry attempts left: %lu
Failed to send %@ message: %@
[WARN] No paired device, so unable to send message %@
photoURL: %@ videoURL: %@
saved photo with localIdentifier: %@ error: %@
saveVideoWithURL: %@
Saved video with localIdentifier: %@ error: %@
Processing delayed actions:%@
Not processing delayed actions because we no longer have a call
providerDelegate: %@ callUUID: %@ dateStartedConnecting: %@
providerDelegate: %@ callUUID: %@ dateConnected: %@
providerDelegate: %@ callUUID: %@ dateEnded: %@ endedReason: %ld failureContext: %@
Ending call with UUID %@ on other provider delegate %@ because ended reason was %ld
providerDelegate: %@ transaction: %@
providerDelegate: %@ ending callUUID %@
[WARN] action: %@
modernFTDestinations: %@
gftOneToOneDestinations: %@
Created join call action: %@ for gftOneToOneDestinations: %@
Can't perform start call action since queries did not return any destinations
Skipping to invite remote destinations since we don't have a call tracking any longer
Invited push tokens via IDS: %@ wasCanceled: %d
No longer handling call with UUID %@, requesting end
Could not initiate FaceTime call - No IDS or IMAV call returned for handle %@
Not sending IMAV invites because IDS session was canceled
Perform join call with action UUID: %@
Failing join call action since it does not meet join call action requirements
Failing join call action since we are already pending a join on this same call UUID elsewhere.
Failing join call action isVideo: NO and videoEnabled: YES
Updated to action: %@
Found a IMAV chat that is being tracked for action: %@
Created start call action: %@ for modernFTDestinations: %@
Can't perform join call action since queries did not return any destinations
[WARN] No provider delegate is managing call for action %@
Delaying action %@
Asked to deliver token %@ to application %@
Asked to deliver message %p to application %@
[WARN] Message transport type is unknown; cannot enqueue message %@
Delivering token %@ to application %@
Pending token delivery until a connection exists
Delivering %lu network extension payload(s) to application %@
Pending Network Extension payload deliveries until a connection exists
Delivering %lu PushKit payload(s) to application %@
Pending PushKit payload deliveries until a connection exists
Invalidating process assertion for bundle identifier %@ from completion handler
[WARN] Message transport type is unknown; cannot deliver message %@
[WARN] InCallService has multiple process identifiers: %@
InCallService process state is now %ld
Initialized inCallServiceProcessState to %ld
Started tracking SpringBoard process with PID %@
SpringBoard process has changed PID from %@ to %@
conversation: %@ activitySessions.count: %lu
sendingCall %d activeCall %d heldCall %d disconnectingCall %d ringingCall %d
callsChangedForCallCenterObserver
activitySessionsChangedForConversation conversation %@
Setting muted to %d for %@
[WARN] setMuted:forIdentifier: no conference connection found for identifier %@. All conference connections: %@
Setting sending audio to %d for %@
[WARN] setSendingAudio:forIdentifier: no conference connection found for identifier %@. All conference connections: %@
Asked to prepare conference connection %@ remoteInviteDictionary %@
Not preparing a new conference because another conference already exists: %@
Attempted to prepare a new conference connection with the same identifier as an existing conference connection: %@
Asked to start conference for identifier %@
We already have an active conference. Invoking this conference connection's didStart immediately
Did not find conference connection to start for identifier %@. All conference connections: %@
Asked to send data to conference for identifier %@
Asked to update conference for identifier %@ with isUsingBaseband=%d disableAudio=%d
Updating device role for identifier %@ to %d
Did not find conference connection for identifier %@. All conference connections: %@
Setting conference connection active: %@
Asked to prepare to stop conference for identifier %@
Pausing audio and setting up timeout for conference connection: %@
It's been %fs since asked to prepare to stop conference and conference connection still exists: %@. Forcefully cleaning up all conference connections for conference %@
Asked to stop conference for identifier %@
Cleaning up conference connection %@
Also cleaning up conference connection which is already prepared to stop %@
reason: %ld error: %@
Relay conference ended in failure (reason: %ld): %@
Setting up close connection timeout because conference ended reason was normal
[WARN] Timed out waiting for conference %@ to close connection after receiving end
[WARN] Unable to get URL for filename '%@'
[WARN] Unable to get standardized URL for URL '%@'
Setting up Pin Exchange controller
Requesting PIN from device %@
[WARN] accountsSupportSecondaryCalling=NO. Displaying mismatched accounts notification
Canceling all PIN requests
[WARN] Could not find device for unique ID %@
The entered PIN code is correct
Activated Thumper for requesting device %@
[WARN] The entered PIN code is incorrect, could not register device.
The user entered no code... or the code entered was not an NSString
We were unable to send the PIN to the other device to be displayed, Sorry
Sending a PIN code to device %@ to display to enroll them into Thumper
[WARN] Ignoring request to send PIN code because we already have one pending for device with unique ID %@
Could not obtain caller ID from Thumper IDS service %@
Sending IDS action %@ to device %@ with message %@
Thumper IDS action sent to device with success: %@ error: %@ identifier: %@
[WARN] Displaying PIN error notification
[WARN] Displaying mismatched accounts notification
[WARN] Displaying slots full notification
Received message for service %@ from device %@ (isHSATrusted=%d): %@
Ignoring pin request: There is already a pending pin request that has not yet completed.
One sender identity exists; continuing Thumper registration using UUID %@
Multiple sender identities exist; checking whether caller ID %@ matches a sender identity in %@
[WARN] Aborting Thumper registration; multiple sender identities exist but caller ID not supplied
Aborting Thumper registration; could not obtain sender identities from call provider %@.
Device requesting PIN is HSA trusted. Forgoing PIN exchange and enrolling the device immediately
Received request to enroll device %@ in Thumper for sender identity with UUID %@
[WARN] Aborting Thumper registration; could not obtain sender identity UUID.
Received didSendWithSuccess=YES for message with identifier %@
Received didSendWithSuccess=NO for message with identifier %@: %@
InCallService has changed process state to %ld
InCallService has been suspended; invalidating its XPC client connections.
Initialized capability state: %@
Updating clients with new call capabilities state: %@
Updating paired host device state
TUCallCapabilitiesXPCServer - callCapabilitiesState request from %@
TUCallCapabilitiesXPCServer - setRelayCallingEnabled: %d
TUCallCapabilitiesXPCServer - setRelayCallingEnabled: %d forDeviceWithID: %@
TUCallCapabilitiesXPCServer - setWiFiCallingEnabled: %d senderIdentityUUID: %@
TUCallCapabilitiesXPCServer - setWiFiCallingRoamingEnabled: %d senderIdentityUUID: %@
TUCallCapabilitiesXPCServer - setVoLTECallingEnabled: %d senderIdentityUUID: %@
TUCallCapabilitiesXPCServer - setThumperCallingEnabled: %d senderIdentityUUID: %@
TUCallCapabilitiesXPCServer - setThumperCallingAllowed: %d secondaryDeviceID: %@ senderIdentityUUID: %@
TUCallCapabilitiesXPCServer - setThumperCallingAllowedOnDefaultPairedDevice: %d senderIdentityUUID: %@
TUCallCapabilitiesXPCServer - endEmergencyCallbackMode
TUCallCapabilitiesXPCServer - invalidateAndRefreshWiFiCallingProvisioningURLForSenderIdentityUUID: %@
TUCallCapabilitiesXPCServer - invalidateAndRefreshThumperCallingProvisioningURLForSenderIdentityUUID: %@
TUCallCapabilitiesXPCServer - requestPinFromPrimaryDevice
Using the following account for the PIN request: %@
No device found for account %@. All accounts: %@
[WARN] No primary Thumper account found for PIN request. This should only happen because an account exists but has no empty device slots. All accounts: %@
TUCallCapabilitiesXPCServer - cancelPinRequestFromPrimaryDevice
Received device list changed notification: %@
Received device capability changed notification: %@
Received accounts changed delegate callback
Received FaceTime availability changed delegate callback
Received outgoingCallerIDChanged delegate callback
Disabling Thumper for subscription with UUID %@
Received telephonyCallCapabilitiesChanged delegate callback
[WARN] Disabling support because %@ was set to YES
[WARN] Enabling support because %@ was set to YES
Found primary Thumper account ID %@
Thumper calling is not supported for account ID %@
Setting associated Thumper account ID %@
_setWiFiCallingEnabled: asking to change value from %d to %d
_setWiFiCallingEnabled: not updating value. Is currently %d and asked to set to %d
_setVoLTECallingEnabled: asking to change value from %d to %d
_setVoLTECallingEnabled: not updating value. Is currently %d and asked to set to %d
_setWiFiCallingRoamingEnabled: asking to change value from %d to %d
_setWiFiCallingRoamingEnabled: not updating value. Is currently %d and asked to set to %d
_setThumperCallingEnabled: asking to change value from %d to %d
_setThumperCallingEnabled: not updating value. Is currently %d and asked to set to %d
Changing Thumper calling allowed value from %d to %d on secondary device ID %@
[WARN] Not changing Thumper calling allowed value. No device slots remain for this device. Displaying notification to the user
[WARN] Could not set Thumper calling allowed for secondary device with identifier %@; unable to retrieve local Thumper account from call capabilities %@
[WARN] Could not retrieve account ID from Thumper capabilities %@
_setThumperCallingAllowed: not updating value. Is currently %d and asked to set to %d on secondary device ID %@
[WARN] Could not find Thumper capabilities for sender identity UUID %@
[WARN] No cloud calling device appears to be a default paired device: %@. Ignoring setThumperCallingAllowedOnDefaultPairedDevice request
[WARN] Could not obtain UUID from sender identity capabilities state %@
defaultPairedDeviceExists: %d
telephonyDeviceExists: %d, relayCapableDeviceExists: %d, defaultPairedDeviceExists: %d
_setRelayCallingEnabledDefault: changing value to %d
_setRelayCallingEnabled: Changing value from %d to %d
_setRelayCallingEnabled: Not updating value. Is currently %d and asked to set to %d
setRelayCallingEnabledDefault:forDeviceWithID: changing value to %d for %@
_setRelayCallingEnabled:forDeviceWithID: Changing value from %d to %d for %@
_setRelayCallingEnabled:forDeviceWithID: Not updating value. Is currently %d and asked to set to %d for %@
Initialized pairedHostDeviceState: %@
[WARN] Could not de-serialize pairedHostDeviceStateData %@
[WARN] Saved pairedHostDeviceStateData was not an NSData type (class=%@): %@
No saved paired host device state found
Initializing new paired host device state with all values set to NO
_supportslaunchingInCallApplicationForIncomingCall: %d
dialRequest: %@ displayContext: %@
Coordinated alert request came back with bestIsMe: %d info: %@ error: %@
Starting coordinated alert request to determine ringtone un-suppression: %@
faceTimeIDSStatus for destinationID: %@ is: %@
Invalidating display context for %@
Posting %@ because relayClientTransport changed from %@ to %@ for %@
Posting %@ because mayRequireBreakBeforeMake changed from %d to %d for %@
Posting %@ because hasStartedOutgoing changed from %d to %d for %@
Posting %@ because hasAudioInterruption changed from %d to %d for %@
Posting %@ because mixesVoiceWithMedia changed from %d to %d for %@
activeRemoteParticipants changed from %@ to %@ for %@
Posting %@
Pickable Routes Changed: %@
Preferred external route changed: %@
CarPlay is connected changed: %@
Media services were reset: %@
Audio device list changed
[WARN] No audio route collection found in audioRouteCollections: %@ for audio category %@ and audio mode %@ for call %@
Found preferred AVAudioDevice: %@
Requesting initial state of CarKit's DND assertion
Received initial CarKit DND assertion: %d
Unable to fetch CarKit DND assertion: %@
Updating isCarModeActive to %d
[WARN] Timeout occured fetching CarPlay do not disturb status.
Updating isCarPlayDeviceConnected to %d
Device first unlock block invoked, attempting to retrieve active conversations
Sent message with identifier %@ to %@
Error sending message: %@
Using local callerID: %@
UUID: %@ groupUUD: %@ localMember: %@ fromStorage: %d report: %@
UUID: %@ remoteMembers: %@
Asked to invite specific conversationUUID: %@ participantDestinationIDs: %@
conversationUUID: %@ participantDestinationIDs: %@
Could not find caller ID when creating conversation
UUID: %@ groupUUD: %@ localMember: %@
Transitioning conversation %@ to new groupUUID: %@
[WARN] Ignoring request to transition to new group UUID since an existing conversation does not exist.
[WARN] Cannot transition to a different group UUID that does not have the same set of remote members.
[WARN] Cannot transition to a different group UUID that does not have the same set of lightweight members.
[WARN] Dropping request to transition since sender is not in the members list that was given.
[WARN] Failed to create newActivitySession for activitySession %@ on conversation: %@
notifyDelegatesOfChangedLinkDescriptors: -- no link descriptors, not updating delegates
Retrieving conversation links failed with error %@
Sending message: %@ to: %@
[WARN] No local participant for conversation UUID: %@
[WARN] handleConversation:receivedAVCBlobResponse:fromHandle: %@ <!===> %@
[WARN] handleConversation:receivedAVCBlobResponse:fromHandle: Could not find participant in message: %@
Posting session started event from participant %@ for session %@
Posting session ended event from participant %@ for session %@
[WARN] Conversation message of type Encrypted received with either no encryptedMessage or enclosedEncryptedType. Dropping message.
[WARN] ConversationMessage of type Encrypted with enclosed type of %d which we do not have support for, dropping.
Received Encrypted message with enclosed type of LetMeInRequest from handle %@
[WARN] Could not retrieve a pseudonym string from the message context.
[WARN] Let Me In request was not sent to a pseudonym. Dropping message.
Could not decrypt let me in request with error %@
[WARN] Decrypted conversation message but was not a let me in request: messageType: %d
[WARN] Provided link is %@, which was not a valid TUConversationLink.
Received Encrypted message with enclosed type of LetMeInResponse from handle %@
[WARN] No pending conversation found for link %@
[WARN] Pending conversation's let me in request state is %ld instead of Requested
[WARN] Pending conversation's let me in key agreement is either nil (%@) or exhausted (%@)
[WARN] Let Me In response was not sent to a pseudonym. Dropping message.
[WARN] Could not decrypt let me in response
[WARN] Decrypted conversation message but was not a let me in response messageType: %d
Could not find link for pseudonym %@, dropping let me in request. Error: %@
Dismissing let me in because link has originator handle of %@, which is not one of our active local handles %@
[WARN] GreenTea device does not support multiple remote members. remoteMembers = %@
Let me in requestor %@ is a handle that has already been kicked, rejecting let me in. conversation.kickedMembers: %@
Let me in requestor %@ is a handle that has already been rejected, rejecting let me in. conversation.rejectedMembers: %@
Let me in requestor %@ is a handle that is already a member of the call; Let Me In not required. conversation.remoteMembers: %@
[WARN] Ignoring let me in response message, as it is missing a groupUUID (%{public}@), missing a link (%{public}@), or does not specify approval/rejection (%{public}@): %@
[WARN] Let me in response is not for the provided pending conversation. Ignoring.
[WARN] Let me in response is not from the pseudonym defined in the link %@, instead is from %@
Finished processing let me in response (approved: %{public}@) for groupUUID: %@. Approver handle is %@.
Not sufficiently formed link created/changed message, type: %d hasLink: %d linkGroupUUID: %@ conversationGroupUUID: %@
[WARN] Invalid TUConversationLink for link created/changed message (it was nil)
[WARN] Sender %@ did not match link's originator handle %@ for link created/changed message %@
[WARN] Link already exists on conversation %@ for link created message %@
[WARN] GreenTea device does not support link created/changed message because invitedMemberHandles > 1, message: %@
[WARN] Sender %@ is not part of conversation UUID %@.
[In-Advance] Received link created/changed message from %@ with link %@
[WARN] GreenTea device does not support link creation message %@ because invitedMemberHandles > 1
Failed to persist received link to data store with error %@
[Ongoing] Received link created/changed (update: %{public}@) message for conversation UUID %@ from %@ with linkDescriptor %@
[WARN] Did not set conversation link %@ to conversation UUID %@
[In-Advance] Link successfully stored (update: %{public}@) from %@ with linkDescriptor %@
Not sufficiently formed link invalidation message %@
[WARN] Invalid TUConversationLink for link invalidation message %@
[WARN] Sender %@ did not match link's originator handle %@ for link invalidation message %@
We are not tracking any stored link for link invalidation message %@
Failed to remove received link from data store with error %@
[WARN] Dismissing let me in delegation because no groupUUID was set
[WARN] Dismissing let me in delegation because the forHandle is blocked {forHandle: %@, fromHandle: %@}
Received LMI delegation, unable to parse forHandle -- ignoring! {fromHandle: %@, message.letMeInDelegationHandle: %@}
Received LMI delegation, unable to parse transactionUUID -- ignoring! {fromHandle: %@, message.letMeInDelegationUUID: %@}
Received LMI delegation message! {fromHandle: %@, forHandle: %@, transactionUUID: %@}
[WARN] Dismissing let me in delegation response because no conversation was found for link's groupUUID: %@
Received LMI delegation response, unable to parse transactionUUID -- ignoring! {fromHandle: %@, message.letMeInDelegationUUID: %@}
Received LMI delegation response message, without letMeInApproval -- dropping! {fromHandle: %@, forHandle: %@, transactionUUID: %@}
Received LMI delegation response message! {fromHandle: %@, forHandle: %@, transactionUUID: %@, message.letMeInApproval: %@}
No invited members or conversation members were specified; no need to send messages (link: %@, conversation UUID: %@)
Sending data from: %@ to: %@
blob response, removing %@ from options: %@
[WARN] Could not convert %@ to IDS destination
Failed broadcasting file. Missing local member on conversation: %@
Broadcasting file from: %@ to: %@
Error broadcasting image %@
Sent broadcast image message with id %@
Missing local member on conversation: %@
Broadcasting data from: %@ to: %@
conversation: %@ broadcastImageForSession: %@
Error transmitting activity session %@ image. Failed to write to path %@ with error %@
(broadcastImageForSession activity UUID: %@ success: %d).
Failed to delete image file after sending image for session %@ error %@
Found tokenURL member
Couldn't find member with token, attempting member without token
[WARN] Empty destinationID after IDSCopyRawAddressForDestination. Dropping message.
[WARN] Couldn't create TUHandle from participantDestinationID (%@). Dropping message.
Found non-tokenURL member
[WARN] Couldn't find participantDestinationID %@ in members %@
[WARN] Couldn't decode message due to invalid data length.
[WARN] Couldn't decode message due to invalid groupUUID
[WARN] Couldn't find conversation with groupUUID %@
[WARN] Received unknown participant update message
[WARN] Unable to find members from message
Refreshing active pariticpants for active conversations
[WARN] _incomingPendingConversationsByGroupUUID: issue fetching links for pending incoming {error: %@}
[WARN] Not adding cached conversation with UUID %@ because we already added equivalent conversation with UUID %@
Reviving cached conversation with groupUUID: %@ remoteMembers: %@
[WARN] Failed to create newActivitySession for activitySession %@
shouldClearDefaults: %d - Removing all conversations
groupUUID: %@ remoteMembers: %@
Activating cached conversation from storage with UUID: %@ as someone seems to be interested in it.
No conversation currently exists to join: %d, so creating a new one isConversationVideoUpgrade: %d
[WARN] Supplied local member: %@ contains no active handles: %@
Unable to create local member. Caller ID: %@
UUID: %@ context: %@
[WARN] Could not find conversation with UUID: %@
Ignoring request to join conversation with UUID: %@ since conversation is already joined
[WARN] Leaving existing conversation with UUID: %@ in favor of new conversation with UUID: %@
Updating context to use isOneToOneModeEnabled=true %@
LMI: Creating pending conversation for link: %@, localMember: %@
LMI: Cannot find pending conversation for pseudonym %@
LMI: Requesting membership in pending conversation for link %@
LMI: Could not encrypt let me in request with error %@
Error sending request to join conversation
Sent let me in request for link %@
LMI: Notifying pending member %@ of our response (approved: %@) to their let me in for conversation UUID %@
[WARN] Response key missing from LMI response; cannot encrypt to send without. Aborting.
LetMeInResponse message assembled as %@
LMI: Could not encrypt let me in response
Error sending request to join conversation.
Sent let me in response (approved: %@) for pending member %@
[WARN] Could not find conversation with UUID %@. All conversation UUIDs: %@
Sending invitation message %@
UUID: %@
[WARN] Could not find conversation with UUID %@. All conversations UUIDs: %@
oneToOneMode is not enabled - ignoring to send video upgrade message
Updating pending conversation with pseudonym: %@, conversation group UUID: %@
Setting screen enabled %@ with attributes %@ for conversation UUID: %@
conversationUUID: %@ remoteMembers: %@
[WARN] Could not find conversation with conversationUUID %@. All conversations UUIDs: %@
conversationUUID: %@ otherInvitedHandles: %@
GreenTea devices are not supported to have this GFT conversation UUID: %@
Displaying SharePlay not supported alert with message: %@
[WARN] Not displaying SharePlay not supported alert because SharePlay features are disabled.
conversationUUID: %@ update messagesGroupName: %@
conversationUUID: %@ update group photo
conversationUUID: %@ activity: %@
[WARN] User declined authorization to create activity session for activity: %@
Failed to create CPActivitySession for activity: %@
leave conversationUUID: %@ activitySession: %@
(success: %d).
adding activitydonation: %@
Failed to addActivity: %@ reason: %@
removing activitydonation: %@
Removing activitySuggestions for %@
Setting activity authorization %d for %@
Setting auto expanse enabled %@
Received launchApplication request for UUID: %@
Failed to find conversation that has activitySession %@
Not launching application because SharePlay is not allowed
Failed to request authorization error: %@
Authorizing session UUID: %@
Requesting activity authorization for %@
Revoking background pip for bundle ID for %@
[WARN] Message did not contain a valid activitySession.
Received remove activity session message %@ from %@
Unable to decode UUID from activitySession %@
Updating activities from message: %@
[WARN] Not updating activity, couldn't find activitySession UUID: %@
[WARN] Not updating activity UUID: %@ 's image with message activity UUID: %@
Not updating activity because handle: %@ isn't the originator of the activity: %@
No image provided in update message for activity %@
Received new activity for conversation %@
Failed to add activitySession: %@ to conversation UUID: %@
Not posting start session event. Could not find participant for handle %@ for session %@
conversationUUID: %@ presentationContexts: %@
conversationUUID: %@ member: %@
[WARN] Not handling requestScreenShareFromMember %@ conversationUUID: %@
Kicking member %@ from conversation %@
[WARN] Ignoring nickname update message because the from-handle %@ could not be normalized.
Received nickname update message, set nickname to "%@" from handle %@ for conversation UUID %@
Ignoring nickname update message because the from-handle %@ did not match any remote members %@
conversationUUID: %@ downlinkMuted: %d
[WARN] Could not find conversation with conversationUUID %@. All conversation UUIDs: %@
coversationUUID: %@ participantid: %llu audioEnabled: %d
[WARN] Could not find conversation with conversationUUID %@. All conversations: %@
conversationUUID: %@ participantid: %llu videoEnabled: %d
Ignoring local member's nickname update request because their nickname "%@" is already identical
conversationUUID: %@ set local member's nickname to %@, previously %@
Asked to get latest remote attributes, returning: %@
Retrieved %lu conversation link descriptors %@
Failed to retrieve links with error %@
Received request from TU client to generate link for conversation UUID: %@
GreenTea devices cannot generate conversation links for Group FaceTime (remoteMembers > 1)
Conversation was initiated from messages, a link cannot be generated in this case. {messagesGroupUUID: %@}
Link for conversation with UUID %@ already exists.
Failed to generate link for groupUUID %@ with error %@
Fetched non-local inactive link %@
Failed to fetch inactive link, generating new links for %@
Link generation complete, returning to completionHandler for: %@
Did not set conversation link as one already existed: %@
Received request from TU client to generate link with invitedMemberHandles: %@
GreenTea devices cannot generate conversation links for Group FaceTime (invitedMemberHandles > 1)
[WARN] No invited member handles were of eligible handle types and/or had normalized values, canceling link generation
[WARN] Local user has no active handles, cannot proceed with link generation
We activated an inactive link, returning that.
Creation of converation link with groupUUID %@ invited handles %@ failed with error %@
Adding invited handles %@ to %@ failed with error %@
Not invalidating link since it's not being tracked by our link manager.
Asked to invalidate link %@
Renewing link for reason %lu
Failed to renew link %@ with error %@
Generating cache of inactive links for originator handle %@
Asked to retrieve inactive link for handle %@
Failed to fetch inactive link, generating more for handle %@
Asked to activate conversation link %@
Asked to set name "%@" for link %@
[WARN] Link name setting provided error %@
Link name successfully set for updated link %@
For conversationUUID: %@, user has approved let me in for pending member: %@
[WARN] Failed to approve let me in request for pending member %@. Could not find conversation with conversationUUID %@. All conversation UUIDs: %@
For conversationUUID: %@, user has rejected let me in for pending member: %@
[WARN] Failed to reject let me in request for pending member %@. Could not find conversation with conversationUUID %@. All conversation UUIDs: %@
For conversationUUID: %@, user has requested to ignore all LMI requests.
[WARN] Failed to ignore let me in requests. Could not find conversation with conversationUUID %@. All conversation UUIDs: %@
conversationUUID: %@ messagesGroupName: %@
%ld conversationLink should be removed, not needed anymore %@
conversationLink was removed since it was not needed anymore {pseudonym: %@, success: %@, error: %@}
Removing conversation UUID: %@
conversationLink should be removed after call ended %@
conversationLink finished removing after call ended {success: %@, error: %@}
[WARN] Could not find conversation for container with UUID %@. All conversation UUIDs: %@
setupPendingConversationCleanupTimer: %f %f %@
cleanupExpiredPendingConversations: %f %@
conversationChanged: %@
conversationConnectionDidStart UUID: %@
conversation UUID: %@
conversationLink should be removed after call was invalidated %@
conversationLink finished removing after call was invalidated {success: %@, error: %@}
conversation: %@ addedActiveParticipant: %@
conversation: %@ removedActiveParticipant: %@
conversation: %@ participant: %@
Requesting AVC blob for %@
Sending decline message for %@
conversation UUID: %@ activitySessionChanged: %@
Disabling screensharing since another session: %@ became active
conversation: %@ activityChangedOnSession: %@
(success: %d)
Did send activity removal message successfully? %d
Not posting session ended event. Error finding participant for end session %@
Let me in request was sent to invalid pseudonym %@, ending pending conversation
Running callback for message %@, which has been received by the IDS daemon
[WARN] service:account:incomingData:fromID:context: Empty from ID. Dropping message.
Received resource URL with identifier %@ from %@
[WARN] service:account:incomingResourceAtURL:fromID:context: Empty from ID. Dropping message.
[WARN] service:account:incomingResourceAtURL:fromID:context: Empty data. Dropping message.
[WARN] service:account:incomingResourceAtURL:fromID:context: Empty CSDMessagingConversationMessage. Dropping message.
[WARN] service:account:incomingResourceAtURL:fromID:context: Got unsupported messaged type %@. Dropping message.
Received message with identifier %@ from %@ Attempt count %@
[WARN] service:account:incomingData:fromID:context: Empty data. Dropping message.
[WARN] Received CSDMessagingConversationMessage with Type of %d
[WARN] service:account:incomingData:fromID:context: Empty destinationID after IDSCopyRawAddressForDestination. Dropping message.
[WARN] service:account:incomingData:fromID:context: Could not create TUHandle from destinationID. Dropping message.
[WARN] Dropping let me in request or response because it was not encrypted
[WARN] Dropping let me in delegation request or response because it has the wrong intent {publicIntentAction: %@}
[WARN] Received LetMeInDelegation with Intent of {publicIntentAction: %@, messageIntent: %llu}
[WARN] service:account:incomingData:fromID:context: Empty CSDMessagingConversationMessage. Dropping message.
[WARN] service:account:incomingData:fromID:context: Could not create group UUID from string. Dropping message.
[WARN] No conversation found for groupUUID %@
Updating "fromStorage" on conversation with UUID: %@ since there are still active remote participants.
Not updating "fromStorage" on conversation with UUID: %@ since conversation.isFromStorage: %d, and context.fromServerStorage: %d
Looking for handle: %@ in existingConversation: %@
[WARN] Message type %d not allowed for lightweightMembers.
[WARN] Could not find matching handle: %@  in existingConversation.
[WARN] Will retry message again after %@ ms
[WARN] Exhausted retry attempts for message. Dropping message after %@ attempts
[WARN] processGroupSessionParticipantUpdate: Empty groupSessionParticipantUpdate
[WARN] processGroupSessionParticipantUpdate: Empty groupSessionParticipantUpdate.participantDestinationID
Group session participant update received: %@ participantIdentifiers: %@
[WARN] Unable to find fromHandle.
[WARN] processGroupSessionParticipantUpdate: GFT message recieved on a green tea device - dropping message
Leaving conversation that is not supported on GreenTea devices: %@
Received participant join context
processJoinUpdate: Received nil when trying to convert data to participant join context
[WARN] processUpdateMembersUpdate: Empty updateMembersUpdate.clientContextData
Received nil when trying to convert data to participant join context
[WARN] processParticipantDataUpdate: Empty participantDataUpdate.groupUUID
[WARN] processParticipantDataUpdate: Empty participantDataUpdate.participantDestinationID
[WARN] processParticipantDataUpdate: Empty participant
[WARN] Could not find conversation with groupUUID %@. All conversation UUIDs: %@
[WARN] handleParticipants:joinedConversationWithUpdate:joinContext: Empty joinContext
[WARN] handleParticipants:joinedConversationWithUpdate:joinContext: Empty participantUpdate.groupUUID
Received local member: %@
[WARN] Dropping conversation with groupUUID %@ since it has %tu remote members which is greater than the maximum allowed of %tu.
[WARN] We received a message from %@, which was in the remote members list given in the message, but not in the existing conversation UUID: %@. Dropping message.
Identified let me in approval for pending conversation group UUID: %@
Pending conversation %@ found, but the groupUUID does not match (%{public}@) or the let me in request state is not Requested (%{public}@)
Attached invitation preferences found in message: %@
No invitation preferences were set on the message
[WARN] Could not create new activity session for activity session %@ and conversation UUID %@
Ignoring message for group UUID %@
Updating provider on conversation with UUID %@ with provider %@
Activating cached conversation with UUID: %@ since participants are joining.
Updating remoteMembers for conversation with UUID: %@
Could not find local member from activeLocalHandles: %@
Could not find local member from activeLocalHandles: %@, remoteAndLightweightMembers: %@
Received empty set for remote members
Participant with identifier: %lu left conversation with groupUUID: %@
[WARN] handleParticipantWithIdentifier:leftConversationWithGroupUUID: empty groupUUID
[WARN] Could not find conversation for group UUID %@
Active participant %@ was still listed as a pending member %@ for conversation UUID %@; did we miss an approval delegation notice?
It would have been time to add LMI approved handle %@ on conversation UUID %@ to link's invited members, but they were kicked.
Adding LMI approved handle %@ to invited member handles for link %@ after their kick timeout elapsed for conversation UUID %@
Removing handles %@ from handles awaiting link invites as we have scheduled the block to add them if not kicked
linkManager:updatedLinksFromSync: -- updating delegates {linkDescriptors.count: %d}
linkManager:removedLinkDescriptorsFromIDSSignal: -- updating delegates {linkDescriptors.count: %d}
linkManager:updatedLinkDescriptorsFromIDSSignal: -- updating delegates {linkDescriptors.count: %d}
linkManager:removedLinkDescriptorsFromValidityCheck: -- updating delegates {linkDescriptors.count: %d}
Membership tracker prompted response for pending member! {member: %@, conversation UUID: %@}
Membership tracker retained pending member because conversation does not yet exist {member: %@, groupUUID: %@}
No link was found; ignoring tracked pending member {member: %@, groupUUID: %@}
Membership not adding pending member! {member: %@}
Membership reported rejection {member: %@, error: %@}
Asked to send delegation message!
Asked to send delegation response message! {withResponse: %@}
LMI: Unable to send delegation message without conversation or link
Not sending delegation message because no handles were specified! {groupUUID: %@, transactionUUID: %@, pendingMember: %@}
Asked to send delegation message {handles: %@, groupUUID: %@, transactionUUID: %@, pendingMember: %@}
Error sending delegate to join conversation.
Sent delegation request!!!
Notifying delegates of received remote attributes %@ (isLocallySharing: %@)
Asking screen sharing activity manager to resume observing after invalidation
Disabling screensharing forConversationWithUUID:%@ since screen sharing session got invalidated
SharePlay allowed: %@
Attempt to retrieve application record for bundle identifier %@ failed with error: %@
[WARN] Unable to create audio route from route dictionary: %@
Issuing request to acquire process assertion for bundle identifier: %@
Acquiring process assertion for bundle identifier %@
Acquired initial process assertion for bundle identifier %@
Failed to acquire process assertion for bundle identifier %@
Incremented count of process assertion for bundle identifier %@ to %lu
Received request to invalidate process assertion with bundle identifier: %@
Decremented count of process assertion for bundle identifier %@ to %lu
Initialized CXCallDirectoryStore for reading
Unable to initialize CXCallDirectoryStore for reading: %@
Device first unlock block invoked, attempting to initialize CXCallDirectoryStore...
Incoming call filter block called with sourceAddress: %@ providerIdentifier: %@
Blocking call with sourceAddress %@ since callDirectoryAllowsCallFromSourceAddress returned NO
Disallowing call with sourceAddress %@ since _doNotDisturbAllowsCallFromSourceAddress returned NO
DND - onEmergencyCall: %d providerIdentifier: %@
Not allowing call because DND is enabled for %@
phoneNumberVariants: %@
Error checking if call directory database contains blocking entry for source address %@: %@
Disallowing call from source address %@ since blocked by call directory
Call history changed: %@
Call connected. Marking all calls as read.
bytesOfDataUsed: %ld uniqueProxyIdentifier: %@ callHistoryIdentifier: %@
Call still exists so updating its bytes of data used: %@
No call still exists so updating bytes of data used via CHManager
Writing recent call to history: %@
Writing recent pending call to history: %@
Adding transaction object to transactionObjectsAwaitingCallHistory: %@
[WARN] Ending transaction for %@ because we timed out waiting for a call history database changed notification
Set %ld recent calls as read using matching predicate '%@'.
Deleted %ld recent calls matching predicate %@
self: %@ wiFiAllowed: %d
self: %@ cellularDataAllowed: %d
self: %@ cellularDataPreferred: %d
self: %@ clientUUID: %@
Updated currently broadcasted activity to %@
Queueing activity at beginning of queue: %@ (timeout: %f)
Queueing activity at end of queue: %@ (timeout: %f)
Dequeueing activity: %@
Registered to listen for activity type %d and dynamic identifier %@ and started listening for best app suggestions
Registered to listen for activity type %d and dynamic identifier %@
Unregistered to listen for activity type %d and stopped listening for best app suggestions
Unregistered to listen for activity type %d
Best app suggestion changed to %@
Firing delegate callback with activity type %d (userActivityType=%@) and dynamicIdentifier %@
Migrator is looking for legacy Announce Calls setting in %@
Migrator found legacy Announce Calls setting %@
Migrator did not find legacy Announce Calls setting in %@
Migrator is looking for legacy Conversation Link Base URL setting in %@
Migrator found legacy Conversation Link Base URL setting %@
Migrator did not find legacy Conversation Link Base URL setting in %@
Joining with participantJoinContext: %@
Querying for capabilities of call members
Query for capabilities of call members returned %@
%s: Conversation report = %@
member: %@
self: %@
sessionProvider: %@ reason: %d error: %@
sessionProvider: %@ participantIDs: %@ localParticipantID: %lu error: %@
sessionProvider: %@ error: %@
sessionProviderDidTerminate: %@
sessionProvider: %@ activeParticipants: %@ success: %d
[WARN] Received an error for active remote participants
[WARN] Retrying requestActiveParticipants, retry_count=%lu
[WARN] Not retrying requestActiveParticipants, max retry count (%lu) reached
sessionProvider: %@ didReceiveActiveLightweightParticipants: %@ success: %d
[WARN] Retrying requestActiveLightweightParticipants, retry_count=%lu
[WARN] Not retrying requestActiveLightweightParticipants, max retry count (%lu) reached
XPC connection invalidated from client: %@ capabilities: %@
Disconnecting all calls because wantsCallDisconnectionOnInvalidation=YES for %@
Setting isSendingVideo:NO isSharingScreen:NO on call: %@ because wantsCallStopStreamingOnInvalidation=YES for %@
CarPlay screen is now %d
Received AVAudioClient secure microphone interruption
AVAudioClient does not respond to secure mic selector
Relay capabilities enabled
Relay capabilities disabled
Disconnecting relaying call because relay calling is no longer enabled: %@
Disconnecting call being relayed elsewhere because relay calling is no longer enabled: %@
Received AudioSession Interruption notification: %@
Determined that audio interruption was caused due to built in mic muted, ending all calls
Received hardware control: %@
Updating calls in response to hardware control: incomingCall %@, activeCall %@, heldCall %@
Answering incoming call: %@, %@
Answering incoming call as conversation: %@, %@
Opening URL for incoming call: %@
Encountered error while opening URL: %@ for call: %@
Disconnecting call because there wont be a UI to host the call: %@
Not opening URL %@ because outgoing call is provided by SharePlay.
Opening URL: %@ for outgoing call
Disconnecting proxy call because a video call started connecting: %@
Updating clients with call: %@
Ignoring call update for client %@ because it's suspended
Updating client %@ with disconnected call: %@ calls: %@
Updating client %@ with calls: %@
notification: %@
Pushing all calls to device with destination %@ because an eligible audio route is not available and we found a call hosted here with its expected endpoint on another device: %@
Pulling all calls from relay client device because a an eligible audio route is available and we found a call with an endpoint elsewhere: %@
Non-ringing call found on device: %@. All calls: %@
Ignoring ringing call status change for call %@ because relay calling is disabled (%d) or this call doesn't support relaying call state (%d) or a vehicle route is available (%d) or call is TTY (%d) or call is conversation (%d) or shouldRelayTinCanCall (%d)
Not sending out call started connecting message because call is already disconnected: %@
Not sending out call connected message because call is already disconnected: %@
Sending voicemail call ended notification %@
Picked route %@ changed to A2DP, so muting
Picked route changed from %@ to %@, setting call's bluetooth audio format back to automatic
Received nil call from outgoingCallFromProxyCall: for dial request %@ and displayContext %@
current calls are %@
[WARN] Ignoring request to performUngroupCall because the call is not grouped
[WARN] Ignoring request to performSwapCalls because either there is no active call (%d), there is no held call (%d), or an active call exists that cannot be held (%d)
An endpointRapportMediaSystemIdentifier="%@" or endpointRapportEffectiveIdentifier="%@" is present on answer request for call %@ so attempting to pick matching route
Performing end active calls and answer ringing call %@ for answer request %@
Aborting end active calls and answer ringing call; answer request does not specify a call to answer.
Aborting end active calls and answer ringing call; could not find any ringing calls to answer.
Aborting end active calls and answer ringing call; could not find ringing call with identifier %@
Aborting end active calls and answer ringing call; ringing call %@ is not the same as the specified call %@
Aborting end active calls and answer ringing call; ringing call %@ does not contain a data source.
Performing end held calls and answer ringing call %@ for answer request %@
Aborting end held calls and answer ringing call; answer request does not specify a call to answer.
Aborting end held calls and answer ringing call; could not find any ringing calls to answer.
Aborting end held calls and answer ringing call; could not find ringing call with identifier %@
Aborting end held calls and answer ringing call; ringing call %@ is not the same as the specified call %@
Aborting end held calls and answer ringing call; ringing call %@ does not contain a data source.
Performing hold active calls and answer ringing call %@ for answer request %@
Aborting hold active calls and answer ringing call; answer request does not specify a call to answer.
Aborting hold active calls and answer ringing call; could not find any ringing calls to answer.
Aborting hold active calls and answer ringing call; could not find ringing call with identifier %@
Aborting hold active calls and answer ringing call; ringing call %@ is not the same as the specified call %@
Aborting hold active calls and answer ringing call; ringing call %@ does not contain a data source.
Changed sourceIdentifier of answerRequest to %@
   ... sending calls were found so adding them to list of calls to disconnect: %@
   ... and adding held calls to the list of calls to unhold: %@
   ... and not unholding held calls because there are active calls %@ or ringing calls %@
   ... no sending calls were found so adding all active calls to list of calls to disconnect: %@
   ... no sending or active calls were found so adding all held calls to list of calls to disconnect: %@
   ... and moving call %@ from call to unhold to call to disconnect because a disconnected call from the same provider doesn't support unambiguous multi-party state: %@
Handoff context did not include any handoff payload. Assuming this is for a relay call
[WARN] Ignoring request to performPushHostedCallsToDestination %@ because not all calls are hosted here and relayable. All calls: %@
[WARN] Ignoring request to performPullHostedCallsFromPairedHostDevice because not all calls are not hosted here and not an endpoint here and relayable. All calls: %@
[WARN] Ignoring request to performPullHostedCallsFromPairedHostDevice because no paired device exists
Disconnecting call with disconnected reason %d: %@
Disconnecting call normally since it was outgoing (%d) or was never connecting to relay (%d): %@
Dialed call: %@
answerRequest: %@
Attempting to answer a Walkie-Talkie call whose endpoint is not Apple Watch; aborting answer request %@ for call %@
Performing answer request %@ for call %@
[WARN] Could not find call for uniqueProxyIdentifier %@. All calls: %@
uniqueProxyIdentifier: %@
uniqueProxyIdentifier: %@ otherUniqueProxyIdentifier: %@
[WARN] Asked to group call with data source %@ with another call with a different data source %@
[WARN] Could not find call for uniqueProxyIdentifier %@ (%d) or could not find call for otherUniqueProxyIdentifier %@ (%d)
uniqueProxyIdentifier: %@ key: %d
sourceIdentifier: %@
userInfo: %@
uplinkMuted: %d
downlinkMuted: %d
isSendingVideo: %d
Not updating isSendingVideo: %d since not showing in-call ui
sharingScreen: %d
destination: %@
proxyCall: %@
uniqueProxyIdentifier: %@ size: %@
uniqueProxyIdentifier: %@ presentationState: %d
uniqueProxyIdentifier: %@ screenShareAttributes: %@
sharingScreen: %d, uniqueProxyIdentifier: %@, screenShareAttributes: %@
uniqueProxyIdentifier: %@ bluetoothAudioFormat: %ld
shouldSuppressInCallStatusBar: %@
shouldAllowRingingCallStatusIndicator: %@
Processing SpringBoard request to continue user activity with identifier: %@
Initiating request to pull call for user activity %@
Lauching in-call application; pulled call with identifier %@ for user activity %@
Failed to pull call for user activity %@
Retrieving user activity with identifier %@ failed with error %@
CSDCallStateController: sendUserScoreToRTCReporting with UUID: %@ and Score: %d
CSDCallStateController: joinConversationWithRequest: %@
deviceUID: %@
uniqueIdentifier: %@
clientCapabilities: %@
Messaging connection ended for calls %@. Disconnecting calls that are an endpoint here but are not hosted here.
Messaging connection failed for calls %@. Disconnecting calls that are hosted here and an endpoint elsewhere or that are an endpoint here and hosted elsewhere.
Messaging connection could not establish link for calls %@. Disconnecting calls that are hosted here and an endpoint elsewhere or that are an endpoint here and hosted elsewhere.
uniqueProxyIdentifier %@
hasBeenUnlocked changing from %d to %d
Device has been unlocked, so invoking block immediately
Device has not been unlocked, so storing block to be performed upon first unlock
Device has not been unlocked and is not yet observing device lock changes, so beginning to observe device lock changes
Could not obtain application state from user info dictionary %@
Could not obtain bundle identifier from user info dictionary %@
[WARN] Could not obtain bundle identifier from VoIP application %@
Handling %@
Received request to register VoIP Network Extension for client process with bundle identifier %@
Registering VoIP Network Extension for application with bundle identifier %@
[WARN] Ignoring request to register VoIP Network Extension; could not obtain a bundle identifier from client process %@
[WARN] Aborting register request for VoIP Network Extension; entitlement was not found on client %@
Received request to unregister VoIP Network Extension for client process with bundle identifier %@
Unregistering VoIP Network Extension for client process with bundle identifier %@
[WARN] Ignoring request to unregister VoIP Network Extension; could not obtain a bundle identifier from client process %@
[WARN] Aborting unregister request for VoIP Network Extension; entitlement was not found on client %@
Asked to register bundle ID %@ with APS environment %@ for VoIP
[WARN] Ignoring voipRegister request because either no bundleIdentifier could be determined (%d) or no environment could be determined (%d)
Asked to unregister bundle ID %@ with APS environment %@ from VoIP
[WARN] Ignoring voipUnregister request because either no bundleIdentifier could be determined (%d) or no environment could be determined (%d)
for connection: %@ publicToken: %@
Requesting token for topic %@ for bundle ID %@
[WARN] No environment found for connection %@
for connection: %@ token: %@ topic: %@ identifier: %@
for connection: %@ message: %@
Received incoming APS message from application with bundle identifier %@ and topic %@
Resetting all CSDVoIPApplicationController kill counts
LSApplicationRecord had error %@ when looking up bundle identifiers, can't complete nightly VOIP topic reconciliation
We found an enabled VOIP topic for %@ that is no longer installed. Invalidating its push token
[WARN] Ran nightly VOIP reconciliation and found %d discrepencies
Ran nightly VOIP reconciliation and didn't find any discrepencies.
[WARN] No APS connection found for environment %@
Registering client process %@ with bundle identifier %@ for NetworkExtension VoIP
Aborting NetworkExtension VoIP registration; application with bundle identifier %@ does not have the required entitlement and background mode (VoIP Background Mode: %d, VoIP Network Extension Entitlement: %d)
Unregistering application %@ from NetworkExtension VoIP
Registering client process %@ with bundle identifier %@ for PushKit VoIP in environment %@
Environment was %@ but is now %@. Flushing out old registration with previous environment
Aborting PushKit VoIP registration; application with bundle identifier %@ because it lacks the VoIP background mode (%d) or no APS connection exists for the environment (%d)
Requesting token for topic %@
Setting enabled topics from %@ to %@
Unregistering application %@ from PushKit VoIP in environment %@
Supplied environment was nil. Inferring it as %@
Disabling topic %@ and invalidating its token for connection %@
Disabling topic %@ and invalidating its token for all connections
Received incoming network extension message from application with bundle identifier %@
Application %@ will not be launched because it failed to report an incoming call too many times or repeatedly crashed. However because the app is foreground, delivering VOIP payload anyway.
Application %@ will not be launched because it failed to report an incoming call too many times (or repeatedly crashed.)
Application %@ is not running. Will attempt to open the application and acquire a process assertion
Dropping incoming message because the bundle ID failed to launch
Dropping incoming message because the bundle ID did not launch in time
Successfully opened application
Successfully took out process assertion
Dropping incoming message because the process assertion could not be acquired
Invalidating process assertion for bundle ID %@ from timeout
Killing VoIP app %@ because it failed to post an incoming call in time.
Unable to terminate %@ with error %@
[WARN] No existing VoIP application found for bundle ID %@
Aborting request application with bundle identifier %@ does not have the required background mode (VoIP Background Mode: %d)
Dropping notice %@ because of invalid bundleID
Notice %@ is from a lightweightMember, trying to translate
Found remoteParticipant for notice: %@ participant: %@
Posting notice: %@ for event: %@
Fetching notices is a no-op
Activating conversation notice with URL: %@ and bundleID %@
Attempt to open application with bundle identifier %@ url: %@ failed with error %@
Successfully opened URL %@ for bundle: %@
[WARN] Error activating conversation notice. Could not find action url %@ or bundleID %@
Removing conversation notice is a no-op
Not creating activitySession -- bundleID not available
Not adding activity - bundleID mismatch: %@ vs %@
Not adding removing - bundleID mismatch: %@ vs %@
[WARN] Could not find conversation with conversationUUID %@
[WARN] Conversation with conversationUUID %@ is not associated with a Messages group
[WARN] No Messages group provider was registered
%@ appLaunchState %@ for session %@
Device first unlock block invoked, attempting to retrieve saved providers
Loaded registered providers
Loaded registered local providers: %@
Loaded registered relay providers: %@
Updating current providers to %@
Unregistering provider because its application is no longer installed: %@
Donating user intent to call provider with identifier: %@
Releasing sandboxExtensionHandle for provider: %@
[WARN] Skipping Sandboxing URL as the passed in URL turns out to be a symbolic link: %@
Updating provider from %@ to %@
Updating relay provider from %@ to %@
Device is passcode locked (%d) or existing call has different provider (%d). Indicating activity should open in background.
Device is NOT passcode locked. Indicating activity should open in foreground.
Opening user activity %@ for bundle identifier %@ with options %@
Successfully opened user activity %@ for bundle identifier %@
Failed to open user activity %@ for bundle identifier %@: %@
Could not get LSApplicationRecord for app %{public}@ to determine intent support. Using %{public}@.
App %{public}@ supports %{public}@.
[WARN] App %{public}@ does not support %{public}@, using deprecated %{public}@ and %{public}@.
App %{public}@ does not declare support for any dialing intents. Using %{public}@ or %{public}@. Error: %@
Setting enableCriticalReliability %@
Starting audio for conversaton with conversationUUID %@
Reporting call failure for conversation with conversationUUID %@ and callUUID %@
Received %@ conversation message for %@
[WARN] Ignoring nickname update message %@ because message doesn't have a nickname set.
[WARN] Not honoring screen sharing message
[WARN] Dropping video upgrade message, since member is not part of conversation.
[WARN] Conversation %@ is not in the correct state. Dropping message.
[WARN] Not handling upgrade message for conversation since upgrades are currently disabled.
[WARN] Not upgrading conversation since there was no join update attached.
[WARN] Not upgrading conversation since the join update has an incorrect subtype.
[WARN] Not upgrading conversation as message is missing upgrade token.
[WARN] Not upgrading conversation as message is missing remote token.
Error while creating UUID from %@
[WARN] Did not receive protoUpgradeSessionUUID part of message %@
Current callUUID: %@, upgradeSessionUUID: %@, conversationUpgradeSessionUUID: %@, existingHandle: %@, upgradeMessageHandle: %@, participantDestination: %@, fromDestination: %@
Determined that current uplink is muted - muting conversation %@
[WARN] Ignoring incoming invitation message for %@ because invitation preferences requested no-ring. conversation.invitationPreferences=%{public}@, message.tuInvitationPreferences=%{public}@
Ignoring incoming invitation message for %@ since we are already tracking this with call %@
[WARN] Ignoring incoming invitation (LMI approval) because message's group UUID %@ did not match the pending conversation's expected group UUID %@. (link: %@)
[WARN] Ignoring incoming invitation (LMI approval) because it was sent from handle %@ instead of expected approverHandle %@
[WARN] Ignoring incoming invitation (LMI approval) because message's link %@ did not match the link the user tapped (pendingConversation: %@)
LMI: Shuttling in to new conversation and stopping the pending one (moving callUUID %@ to new conversation).
Setting uplinkMuted for conversation: %@ since pendingConversation:%@ has uplinkMuted
[WARN] Ignoring respodneded elsewhere message since it was not sent from a valid handle.
[WARN] Ignoring responded elsewhere message since it came from a handle that does not belong to our aliases: %@.
[WARN] Ignoring message that we've responded elsewhere for conversation %@ since the conversation is already joining or is joined.
Not reporting call since validNetworkReachable is false
Ending ringing call for conversation with UUID: %@
Could not report new multiway call from %@: %@
Also going to fulfill start call actions: %@ since we are exclusively managing this call
Ending unanswered outgoing call for conversation with UUID: %@
Successfully sent message with identifier: %@ handle:%@ account: %@
Unable to report outgoing call connected; Leaving conversation since could not find call UUID for conversation: %@
Unable to report outgoing call started connecting; could not find call UUID for conversation: %@
Conversation manager reported a new incoming conversation %@ from handle %@
Ignoring new conversation %@ since we are already tracking this with call %@
Conversation with UUID %@ failed with context: %@
Exiting addedActiveParticipant callback early since conversation with UUID %@ has been removed - current conversations are %@
Reporting call as connecting and isConversation=true since conversation (state: %ld LMI state: %ld) with UUID %@: addedActiveParticipant %@.
Not reporting a U+1 call as connecting when active participant is added since it is going through LMI flow (state %ld and LMI state %ld) and should not connect until user presses join in the staging area; conversation UUID %@: addedActiveParticipant %@.
Ending call since U+1 conversation with UUID %@: removedActiveParticipant %@.
Ending callUUID:%@ with conversation with UUID %@:
[WARN] Could not fail conversation with reason %ld callUUID not found for conversation UUID %@
endCallWithUUIDAsAnsweredElsewhere: %@
endCallWithUUIDAsDeclinedElsewhere: %@
endCallWithUUIDAsLocalHangup: %@
Joining conversation for answer call action: %@
No conversation with UUID: %@
performAction UUID:%@
[WARN] GFT calls are not allowed on GreeTea devices
LMI: This pseudonym is mine, but couldn't find the link - failing {pseudonym: %@}
No link was found
LMI: Could not assemble link for pseudonym %@ and publicKey %@
letMeIn: %@
Joining from links is disabled by server bag value, failing pending conversation %@
LMI: Asking CSDConversationManager to request let me in approval for pseudonym: %@
Can't use existing conversation %@ because its initiator %@ is not us, not the link creator %@, and not an invited handle to the link %@
There's already an ongoing conversation %@ with the same groupUUID as the link %@, but the conversation does not have the same link %@
LMI: Reporting LMI call with UUID: %@ update: %@
[WARN] Skipping member with handle %@ because it already exists in seen handles: %@
Invitation preferences were set on the action, using those for the join context: %@
Invitation preferences weren't set on the action but existed on the conversation, using those for the join context: %@
Setting uplinkMuted for action: %@ conversation: %@
[WARN] Could not find conversation for end call action call UUID %@. self.conversationUUIDsByCallUUID: %@ self.conversationManager.conversationsByUUID: %@
pseudonymsByCallUUID: %@, conversationsByUUID: %@
Found an extra conversation that needs to be cleaned up: %@
[WARN] Asked to clean up conversation from our list but could not find it in conversation manager list: %@ callUUID: %@
Removing pending conversation with pseudonym %@ and callUUID %@
action: %@
Failing action: %@ since conversation: %@ did not meet conditions
[WARN] Cannot enable video because conversations do not allow video on this device
conversation is not eligible for CXSetSendingVideoCallAction since it does not support video
conversation is not eligible for CXSetSendingVideoCallAction since its relaying else where
Group conversation has presentation state %d so requesting to unpause video
[WARN] Could not find conversation for sendingVideo call UUID %@. self.conversationUUIDsByCallUUID: %@ self.conversationManager.conversationsByUUID: %@
All active participants do not have minimum supported screen sharing version
Device does not support screensharing
conversation %@ is not eligible for CXSetSharingScreenCallAction since its relaying else where
conversation %@ is not eligible for CXSetSharingScreenCallAction since its not joined yet
[WARN] Could not find conversation for screen share call action call UUID %@. self.conversationUUIDsByCallUUID: %@ self.conversationManager.conversationsByUUID: %@
conversation %@ is not eligible for CXEnableVideoCallAction since its not joined yet
conversation %@ is not eligible for CXEnableVideoCallAction
[WARN] Could not find conversation for enableVideo call action call UUID %@. self.conversationUUIDsByCallUUID: %@ self.conversationManager.conversationsByUUID: %@
[WARN] Could not find conversation for set video presentation state action call UUID %@. self.conversationUUIDsByCallUUID: %@ self.conversationManager.conversationsByUUID: %@
[WARN] Could not find conversation for relaying call action call UUID %@. self.conversationUUIDsByCallUUID: %@ self.conversationManager.conversationsByUUID: %@
Raise to ear gesture detected, answering incoming call.
Failed to start conference connection for answered call %@: %@. Disconnecting call with relay failed
Transport did not become available for answered call %@
Conference connection ended for call %@. Disconnecting call normally
Conference connection failed for call %@: %@. Disconnecting call with relay failed
Not disconnecting call because this conference transport is %@ but the call's current relay client transport is %@
Received did stop for call that is already disconnecting/disconnected
_launchInCallApplicationForOutgoingCallOnHostIfNecessary
For received dial call message, the dial request is SOS, so disconnecting all existing calls immediately.
Dialing without relay because cannotRelayAudioOrVideoOnPairedDevice is set (%d) or an eligible route is available (%d)
Nil call returned when dialing call. Notifying client of failed dial call for %@
Dialing with relay. isTinCanProvider: %d, message.hasSourceIdentifier: %d, message.cannotRelayAudioOrVideoOnPairedDevice: %d, eligibleRouteAvailable: %d
Nil call returned when dialing call. Notifying client of failed dial call for %@ 
Failed to start conference connection for dialed call uniqueProxyIdentifier %@: %@.
Conference connection stopped (cleanly=%d) for dialed call uniqueProxyIdentifier %@: %@
[WARN] Received %@ message, but the transport didn't become available
[WARN] Received %@ message, but we already have some non-relaying calls. Sending device busy message.
Answering without relay because wantsHoldMusic is set (%d) or cannotRelayAudioOrVideoOnPairedDevice is set (%d)
[WARN] Could not find call with other uniqueProxyIdentifier %@. All current calls: %@
No other unique proxy identifiers included. Assuming legacy behavior
[WARN] Could not find another call to group with. All calls: %@
No call was specified with SendHardPauseDigits message...
...so sending hard pause digits for call %@
...and no hosted call was found with TUHardPauseDigitsStateDigitsAvailable, so not sending hard pause digits
Setting sourceIdentifier to %@ for all calls before pulling
Opening URL for handled pushRelayingCalls message from client: %@
[WARN] Could not find any audio route with source identifier %@. Ignoring push relaying calls request
[WARN] Asked to pull relaying calls from client when no calls with an endpoint elsewhere exist. All calls: %@
Pushing hosted call: %@
Conference did not start successfully when pushing call. Resetting endpointOnCurrent device to YES for %@
Socket did not become available when pushing call. Resetting endpointOnCurrent device to YES for %@
Failed to prepare conference for pushing hosted call %@
[WARN] %@
[WARN] Bad activity type: %d
Registering for %@ user activity type and dynamic identifier %@
[WARN] Asked to register for activity type %d, but that is not supported
Unregistering for %@ user activity type and dynamic identifier %@
[WARN] Asked to unregister for activity type %d, but that is not supported
Error creating '%@' sandbox extension directory: %@
[WARN] Not loading registered providers because current registered providers version is %ld and minimum version is %d
registeredLocalProvidersByIdentifier: %@
registeredPairedHostDeviceProvidersByIdentifier: %@
Error while querying file attributes: %@
Error creating link to source URL '%@' with filename '%@': %@
Error removing links for filenames not in array (%@): %@
Could not deserialize data to TUCallProvider instance: %@
Registered providers object was of unexpected class %@: %@
Request timed out for transaction ID: %@
[WARN] Received results for timed out transaction with ID %@
Updating session to videoEnabled=NO after creation since current device or call does not support video
Received nil AVCSession creation block
audioEnabled: %d
setVideo: %d
[WARN] Switching to video is currently not supported
videoEnabled: %d
Device does not support screen sharing with camera on, also updating screenEnabled
videoPaused: %d
audioPaused: %d
presentationState: %d
presentationRect: (%f, %f, %f, %f)
screenEnabled is not supported - returning
screenEnabled:%d screenShareAttributes: %@
Stopped capture of %@
[WARN] Device does not support screen sharing, ignoring to set screenEnabled
Device does not support screen sharing with camera on, also updating videoEnabled
Not setting screenEnabled since oneToOneModeEnabled is YES
Queueing completion block to execute after updating oneToOneEnabled: %d
Started capture of %@ with configuration: %@
Queueing capture completion block to execute after current capture session is stopped
screenShareAttributes: %@
relaying: %d
addParticipant: %@ videoEnabled: %d
[WARN] Ignoring request to add participant %@ because they're already in the conversation
removeParticipant: %@
[WARN] Could not find participant %lu in the active participant list, but they're in the list of pending removals
[WARN] Could not find participant with identifier %lu all participants: %@
identifier: %lu downlinkMuted: %d
Unknown participant identifier %lu current participants: %@
identifier: %lu audioEnabled: %d
identifier: %lu audioPaused: %d
identifier: %lu videoEnabled: %d
identifier: %lu screenEnabled: %d
identifier: %lu audioAndVideoMuted: %d
identifier: %lu videoQuality: %lu visibility: %lu prominence: %lu positionalInfo: <flags: %u, position: (x: %f, y: %f, z: %f, w: %f, h: %f)>
Calling stop on screen capture
AVCSession %@ server did disconnect
addParticipant: %@ didSucceed: %d error: %@
addParticipant: %@ Active remote participants: %@
Failed to add participant %@: %@
removeParticipant: %@ didSucceed: %d error: %@
Failed to remove participant %@: %@
removeParticipant: %@ Active remote participants: %@
didUpdate: %d configuration: %@ error: %@
Failed to update session with configuration %@: %@
audioEnabled: %d didSucceed: %d error: %@
Failed to set local audio enabled (%d): %@
videoEnabled: %d didSucceed: %d error: %@
Failed to set local video enabled (%d): %@
screenEnabled: %d didSucceed: %d error: %@
Failed to set local screenEnabled (%d): %@
audioPaused: %d didSucceed: %d error: %@
Failed to set local audio paused (%d): %@
videoPaused: %d didSucceed: %d error: %@
Failed to set local video paused (%d): %@
oneToOneEnabled: %d didSucceed: %d error: %@
Failed to set oneToOneEnabled (%d): %@
executing queued up block since oneToOneEnabled succeeded
participant: %@ audioEnabled: %d didSucceed: %d error: %@
participant: %@ videoEnabled: %d didSucceed: %d error: %@
participant: %@ remoteAudioEnabledDidChange: %d
participant: %@ remoteVideoEnabledDidChange: %d
participant: %@ remoteAudioPausedDidChange: %d
participant: %@ remoteScreenEnabledDidChange: %d
screenCapture: %@ didStart: %d, captureWithError: %@
screenCapture: %@ didStop: %d, captureWithError: %@
executing queued up block since capture session stop succeeded
self: %@ reason: %d
[WARN] Ignoring invitation accept since we have previously processed one.
Secondary Thumper accounts changed from %@ to %@
Attempting to find primary Thumper account in accounts: %@ devices: %@ outgoingCallerIDURI: %@
Found default paired device; setting primary Thumper account to %@
Found matching outgoing caller ID %@; setting primary Thumper account to %@
No primary Thumper account found for outgoingRelayCallerID %@ but requireMatchingCallerID is NO. Arbitrarily choosing last Thumper account from list: %@
[WARN] Could not find subscription with UUID %@. All subscriptions: %@
Associated Thumper account ID changed from "%@" to "%@"
Comparing specified Thumper account ID %@ to cached associated Thumper account ID %@
Sending CommCenter a request to set associated Thumper account ID to "%@"
Received request to set capability information %@ capabilityInfo for subscription %@
Updating VoLTE capability state with %@
Updating VoWiFi capability state with %@
Updating Thumper capability state with %@
Retrieved new telephony call capabilities for subscription %@: %@
Retrieved new system capabilities for subscription %@: %@
Setting new emergency callback mode %@.
Updating Thumper account state with %@
Updated local Thumper device ID to %@
[WARN] Could not initialize Thumper account with Thumper account dictionary: %@
Updated local Thumper accounts to %@
Updated secondary Thumper accounts to %@
Found associated Thumper account ID; updated associated Thumper account ID to %@
Found matching secondary Thumper account; updated associated Thumper account ID to %@
Subscriptions changed for client: %@
Subscription cache requires an update; associated Thumper account ID changed
Subscription cache requires an update; secondary Thumper accounts changed
Determined if endpoint should be on current device: %@; hasRelaySupport: %@, anyOtherCallHasAnEndpointElsewhere: %@, relayCall.isSOS: %@
Asked to dial call %@ but the host was unavailable
Asked to dial call %@ but the session was unavailable
[WARN] Transport did not become available when dialing call %@
Setting endpoint elsewhere for call because it can't be answered with audio or video relay: %@
Transport did not become available when answering call %@
Transport did not become available when pulling call. Resetting endpointOnCurrent device to NO for %@
Opening URL for handled pushHostedCalls message from host: %@
Disconnecting call with conference failed disconnected reason: %@
Not disconnecting call for failed conference start because it is not an endpoint here: %@
Not disconnecting call for conference didStop because it is not an endpoint here: %@
Adding %@ as an alias on account %@
Failed to add alias %@ to account %@. Validation status: %ld, validation error reason: %ld, vetted aliases: %@
Updating display name to %@ on account %@
Received IMDaemon connected notification: %@
Received preferred account changed notification: %@
Loaded last known FaceTime caller ID as %@
[WARN] Could not find lastKnownFaceTimeCallerID in keychain, error: %@
Querying Preferences to see if it exists
Found lastKnownFaceTimeCallerID: %@ in Preferences
[WARN] lastKnownFaceTimeCallerID not found in Preferences either
Removing callerID Preferences value
Saving last known FaceTime caller ID as %@
Error while saving _callerID %@
FaceTime caller ID changed from %@ to %@
Deferring FaceTime caller ID refresh until connected to IMDaemon
%@ account %@ aliases changed %@
Failed to get active contexts from client %@: %@
Error getting emergency callback mode (domain=%d, code=%d)
Failed to get Thumper device info: %@
Failed to get call capabilities: %@
Failed to get capability info for subscription %@: %@
Failed to get system capabilities for subscription %@: %@
Calling -[CoreTelephonyClient context:setCapability:enabled:with:completion:] with capability: %@ enabled: %d info: %@
Failed to set enabled=%d for capability %@ with info %@: %@
Calling -[CoreTelephonyClient context:addPhoneServicesDevice:withCompletion:] with idsDeviceIdentifier: %@
Failed to add secondary Thumper device with IDS device identifier %@: %@
Calling -[CoreTelephonyClient context:removePhoneServicesDevice:withCompletion:] with idsDeviceIdentifier: %@
Failed to remove secondary Thumper device with IDS device identifier %@: %@
Calling -[CoreTelephonyClient context:recheckPhoneServicesAccountStatus:] with capability: %@
Calling _CTServerConnectionEnableEmergencyCallBackMode() with %@
Calling _CTServerConnectionSetCapabilityExtended() with capability: %@ value: %d capabilityInformation: %@
Error setting capability for %@ calling (domain=%d, code=%d)
Error getting system capabilities (domain=%d, code=%d)
Calling _CTServerConnectionPhoneServicesAddDevice() with capability: %@ idsDeviceIdentifier: %@
Error adding device for %@ calling (domain=%d, code=%d)
Calling _CTServerConnectionPhoneServicesRemoveDevice() with capability: %@ idsDeviceIdentifier: %@
Error removing device for %@ calling (domain=%d, code=%d)
Calling _CTServerConnectionPhoneServicesAccountStatusChanged() and _CTServerConnectionSendBarrier() with capability: %@
Retrieved mobile country code %@ and mobile network code %@ for subscription %@
Failed to get mobile network code for subscription %@: %@
Failed to get mobile country code for subscription %@: %@
Could not find a subscription matching the specified UUID %@
Error getting ISO country code (domain=%d, code=%d)
Retrieved ISO country code %@ for mobile country code %@ and mobile network code %@
Received delegate callback callCapabilitiesChanged: with context: %@ info: %@
Received context:capabilitiesChanged: with context: %@ info: %@
%@ is handling phoneServicesCapabilitiesChanged: with userInfo %@
Received kCTEmergencyCallBackModeStatusNotification with userInfo %@
Call status changed for call: %@
for call: %@
for message: %@
transactionGroup: %@
with action: %@ for call %@
route: %@
call: %@
createConversationReportingSession using conversation: %@
reporter: %@
chat=%@
blob recovery started for conversation %@
blob recovery timed out for conversation %@
VoIP app %@ failed to post incoming call
VoIP app %@ no longer eligible to launch
VoIP push for app %@ dropped on the floor
receivedLetMeInRequestForConversation: %@
sentLetMeInRequestForConversation: %@ isApproved: %d
Send User Score to RTCReporting with UUID:%@ and Score:%d
Send activity session ended with startDate %@ endDate%@ session %@
Reporting %@
%@ is handling %@.
%@ initialized for service %@ with the following devices: %@
Determining country code using account info %@
Asking IDS to generated a pseudonym for unprefixedURI: %@ and properties: %@
[WARN] IDS failed to retrieve pseudonym with error %@
No IDSPseudonym matching string %@ was found. All pseudonym URIs: %@
Asking IDS to revoke pseudonym: %@
Asking IDS to renew pseudonym: %@
%@: Active accounts changed
%@: Devices changed
%@: Nearby devices changed
%@: Told that a pseudonym was added to our account.
%@ updated state: defaultPairedDeviceExists=%d, pairedDeviceExists=%d, telephonyCapableDeviceExists=%d, relayCapableDeviceExists=%d, availableOutgoingRelayCallerIDs=%@ deviceNames="%@"
[WARN] Could not find session for identifier %@ to perform block on transport availability for. Dropping this block on the floor
No devices found that support call provider %@. Not creating a session.
Creating session to devices: %@
[WARN] destination for device returned a nil value, so we are going to skip creating a session to it: %@
Creating session to destinations: %@
Would have created a session to an empty destination set. Returning a nil session
Destroying session %@
Asked to prepare session to end for identifier %@
Asked to prepare connected sessions to end
Accepting session for identifier %@
Canceling/declining session for identifier %@
Asked to end ending sessions
sendMessageAndStartSessionIfNecessary for service %@ and message type %@: %@
No session exists. Starting a new one by inviting all devices that support provider %@
A session exists with a destination/device that supports provider %@: %@
We'll send this message via the existing session
Starting another session to the device
Starting another session to the destination
[WARN] A session exists, but it's with a device that doesn't support provider %@. Not starting a new session
Did not create session
sendMessageAndStartSessionIfNecessary for message type %@: %@
Not starting a new session for identifier %@ because an active session for the identifier already exists: %@
No IDSSession exists. Starting a new one by inviting to destination %@
[WARN] No IDSSession exists, and given device is nil. We can't start this session
A session exists: %@
Sending the message through the existing session
Starting a new session to the destination of the device with an active session
[WARN] Cannot start a new session, no valid destination
sendMessage:andAcceptInvitationIfNecessaryForIdentifier for identifier %@ and message type %@: %@
Session for identifier is %@
A current session already exists: %@
Sending the message through the current session
Sending the message through the current session and declining this one %@
No current session already exists, so sending the message through this session %@
Could not determine session to accept for identifier %@ and message %@. All sessions: %@
sendMessage:andCancelOrDeclineInvitationIfNecessaryForIdentifier for identifier %@ and message type %@: %@
Session has multiple identifiers: %@. Removing identifier %@ and not canceling/declining
_sendMessage:andCancelInvitationIfNecessaryForIdentifier for session %@ and message type %@: %@
_sendMessage:andDeclineInvitationIfNecessaryForIdentifier for session %@ and message type %@: %@
for message type: %@ identifier: %@ destinations: %@ waitUntilConnected: %d
identifier: %@ message: %@
sendMessage through session %@ for message type %@ to destinations %@: %@
sendMessage through session %@ for message type %@: %@
Not sending message because protocolVersionCustomizationBlock's preventMessageSend was set to YES for message type %@: %@
No session available to send message type %@: %@
Invite received for session %@ from (fromID=%@) destination %@ device %@ with message %@ (timestamp: %f)
... and it's from the same destination that we have an active session with (%d) or it's from the same device that we have an active session with (%d) or we don't have a session (%d)
... so we are going to handle the session's message
... but we were told to ignore the invite
... but there was no accompanying message so just ignoring the invite
... but it is from a different device than the one that we have an active session with
... and we were told to decline the invite
... and we were NOT told to decline the invite, so just ignoring it
Session ended with reason %d
Notifying delegate of connection end
[WARN] Notifying delegate of connection failure
[WARN] Notifying delegate that connection could not establish link
Not notifying delegate of messenger connection end because a different active session with the same identifier exists: %@
Received invitation accept with no data payload.
Received invitation cancel with no data payload. Assuming the invitation was answered elsewhere
Received invitation decline with no data payload. Assuming invitation was accepted by sending a message through another session
videoStreamToken: %ld
Moments XPC connection interrupted from client %@
Moments XPC connection invalidated from client %@
handle disconnect for client: %@
mediaType: %d, token: %ld localVideoRecordingEnabled: %d
Successfully started AVCMomentsRequest: %@, transactionID %@
Failed to start AVCMomentsRequest: %@, error: %@
transactionID: %@
Successfully ended request %@
Failed to end request %@: %@
Registering stream token %ld, requesterID %@ and remoteIDSDestinations %@ with new moments object
Registered new moments object %@ with supported media types: %@
unexpected supportedMediaTypes: %@, moments: %@, streamToken: %ld
[WARN] FaceTime Photos availability is %d but remoteIDSDestination is nil so changing availability to Unavailabile
FaceTime Photos is not available. Availability is %d
updating remoteIDSDestinations and returning registered session: %@ for streamToken: %ld
Asked to unregister stream token: %ld
didFinish request: %@, error: %@
new capabilities: %u
didStartProcessing request: %@
Received moments didStartProcessingRequest but moments is disabled by server bag or default
Failed to start processing request: %@
didEndProcessing request: %@, stillImageURL: %@ movieURL: %@
Ignoring processing end of request because moments is disabled by server bag or default
Failed to find session for moments stream token: %ldl
failed to find remoteIDSDestination from request: %@ in session remoteIDSDestinations: %@
Did not receive both parts of Live Photo for request: %@
Media files for Live Photo do not have the correct path extensions. stillImageURL: %@ movieURL: %@
Received an error staging the still photo: %@
Did not receive movie URL for request: %@
Received an invalid request transaction ID: %@
Received an error creating the temporary directory: %@
Received an error staging the movie file: %@
moment server disconnected: %@
url: %@ metadata: %@ isZipped: %d fromIDSDestination: %@
session: %@ request: %@ remoteIDSDestination: %@
Unzipped resource to URL: %@
Failed to unzip file at URL %@
Received non-zipped resource at %@
Received moments resource from IDS destination %@ but expected %@
Could not convert remote IDS destination %@ (token=%@) and/or from IDS destination %@ (token=%@) to token data
Received moments resource with unknown transaction ID %@. All sessions: %@
Received moments resource with missing transaction ID in metadata: %@
Received moments resource but moments is disabled by server bag or default
file url: %@ was not sent successfully
Preserving file at URL: %@
Could not retrieve contents of dictionary at URL %@: %@
Unregistering stream token: %ld
Cleaning up state for moment: %@
Delaying cleanup because moment is still registered (%d) or has outstanding requests (%lu)
url: %@ session: %@ request: %@
url: %@
Could not determine both photo URL and video URL from contents of directory: %@
Resources directory URL %@ does not exist
_handleReceivedVideoURL: %@
saving live photo with photo url: %@ video url: %@
Error saving resources with photo url: %@ video url: %@
Saving video with url: %@
Error saving resources with video url: %@
[WARN] Timeout reached for active request for transaction ID %@
momentDescriptor: %@
Initializing AVConference with client UUID %@
[WARN] Error calling getIsSendingAudio: %@
[WARN] Error calling setSendingAudio: %@
[WARN] Error calling getIsAudioPaused: %@
Setting pause audio to %d for %@
[WARN] Error calling setPauseAudio: %@
[WARN] Error calling getIsVideoPaused: %@
Setting pause video to %d for %@
[WARN] Error calling setPauseVideo: %@
Setting conference visual rectangle of size %@ for %@
Setting conference state %@ for %@
Setting local portrait aspect ratio %@ and local landscape aspect ratio %@ for %@
Setting peer reporting identifer %@ and session identifier %@ for %@
Failed to initialize a new call with device role %d. Got callID=%ld
Starting AVConference connection with isCaller=%d callID=%ld remoteInviteDictionary=%@ capabilities=%@ destination=%@
Starting AVConference connection with isCaller=%d callID=%ld capabilities=%@ socket=%d
Stopping AVConference with callID=%ld
Canceling AVConference with callID=%ld
conference=%@ didStartSession=%d userInfo=%@
callID=%ld error=%@
callID=%ld error=%@ callMetadata=%@
callID=%ld
screenAttributes=%@ callID=%ld
videoAttributes=%@ callID=%ld
callID=%ld didPauseAudio=%d error=%@
didPause=%d callID=%ld
callID=%ld didPauseVideo=%d error=%@
[WARN] callID=%ld isStalled=%d
AVConference server died
callID=%ld parameters=%@
callID=%ld isDegraded=%d isRemoteVideo=%d
[WARN] callID=%ld isNetworkBad=%d
callID=%ld didReceiveData=%@
Ignoring to add %@ call since it is TinCan.
[WARN] Ending mutually exclusive call with uPI %@ because we have a newer incoming call that can not co-exist with it.
_endMutuallyExclusiveCalls: update=%@
Found multiple existing mutually exclusive calls.  Ending call %@
Ignoring mutually exclusive update
_endMutuallyExclusiveCalls: mutuallyExclusiveCall=%@, error=%@
Start call action fulfilled: %@
Start call action failed: %@
Join call action fulfilled: %@
Join call action failed: %@
Answer call action fulfilled: %@
Answer call action failed: %@
End call action fulfilled: %@
End call action failed: %@
Set held call action fulfilled: %@
[WARN] Set held call action failed but reverting state is allowed: %@
Set held call action failed and reverting state is not allowed: %@
Set group call action fulfilled: %@
Could not find call to group with for set group call action: %@. All call: %@
[WARN] Set group call action failed but reverting state is allowed: %@
Play DTMF call action fulfilled: %@
Play DTMF call action failed: %@
Set sending video call action fulfilled: %@
Set sending video call action failed: %@
Set muted call action fulfilled: %@
Set muted call action failed: %@
Set tty call action fulfilled: %@
Set tty call action failed: %@
Set relaying call action failed: %@
[WARN] Set relaying call action failed: %@
Action fulfilled: %@
Action failed: %@
[WARN] Not allowing requested %@ because user intent could not be validated for call source with identifier: %@
[WARN] Not allowing requested start call action because a call with same UUID already exists callWithUUID: %@, relayCallWithUUID: %@
[WARN] Not allowing requested start call action because call source %@ is at the maximum call group count of %lu: %@
[WARN] Not allowing requested action because no call was found to group with for action %@ and call source %@. All calls: %@
[WARN] Not allowing requested answer call action because a relay call with same UUID already exists: %@
[WARN] Not allowing requested action because no call was found for call UUID %@ and call source %@. All calls: %@
[WARN] Not allowing requested action because action is not allowed to be requested: %@
[WARN] Not allowing requested transaction because it is empty: %@
Allowing requested transaction: %@
[WARN] Not allowing requested transaction: %@
Dialing new call due to requested start call action: %@
Adding supplemental set held call action for existing call %@
Could not serialize handoffActivityUserInfo into a CXHandoffContext: %@
[WARN] Could not determine call source for dial request: %@. All call sources: %@
Asked to perform action %@ for call %@
Sending %@ for existing call with uniqueProxyIdentifierUUID=%@ callGroupsAllowsHold=%d supportsHolding=%d
Asked to perform start call action %@ for call %@
Call source %@ registered with configuration %@
Error while determining process action for callSource: %@, action: %@
Received add incoming call request from call source %@ with UUID %@ update %@
Query result: %@ for handle: %@ callSource: %@
[WARN] Returning error for add incoming call request because it was on the block list
[WARN] Returning error for add incoming call request because call did not pass DND filter. CarMode (%d) BT Audio Route (%d), CarPlay (%d)
[WARN] Returning error for add incoming call request because it is a direct call to a secondary device and relay calling is preferred over direct calling
[WARN] Update requires additional authentication before it can be answered
[WARN] There is an error: %@, but we are still asked to report call to clients
[WARN] Ignoring add incoming call request because a call already exists with the same UUID: existingCall: %@, relayCallWithUUID: %@
Call source %@ updated call with UUID %@ with update %@
[WARN] Sending %@ for existing call with uniqueProxyIdentifierUUID=%@ since it cannot co-exist with ongoing calls.
[WARN] No call found for call source %@ and UUID %@. All calls: %@
Call source %@ ended call with UUID %@ with ended at date %@ with reason %ld failure context %@
[WARN] Deferring acknowledgement of VoIP call with UUID %@ ended until minimum ring duration has passed
Setting callGroupUUID to nil for orphaned grouped call %@
[WARN] Call %@ already has a date ended
Call source %@ sent invitation for outgoing call with UUID %@ at date %@
[WARN] Call with UUID %@ already has a date started outgoing
[WARN] Call with UUID %@ is not outgoing
Call source %@ started connecting call with UUID %@ at date %@
[WARN] Call with UUID %@ already has a date started connecting
Call source %@ connected outgoing call with UUID %@ at date %@
[WARN] Call with UUID %@ already has a date connected
[WARN] Call with %@ is not outgoing
Call source %@ finished audio for call with UUID %@
Found call %@ for UUID %@, so setting hasAudioFinished
Did not find a call for UUID %@, so expediting deferred end interruption instead
Call source %@ received call with UUID: %@ crossDeviceIdentifier %@ bytesOfDataUsed %ld
Call source %@ received requested transaction %@
Call source manager %@ completed transaction group %@
Pull call action fulfilled: %@
Pull call action failed: %@
Could not find pulled call context for completed pull call action %@. All contexts: %@
Call action completed for call: %@
[WARN] Could not find call for completed call action: %@. All calls: %@
Action completed: %@
Call sources changed: %@
Ending call %@ since its backing call source %@ is no longer connected
Call controller host %@ requested transaction %@ for connection with identifier: %@
Using call source %@ for requested transaction %@
[WARN] Not allowing requested transaction because no call source was found. All call sources: %@
Marking all calls as changed because providers changed
Handling managed device policy changed for call: %@
Managed device policy no longer allowed, disconnecting: %@
machServiceName: %@ newConnection: %@
Accepting XPC client for %@: %@
Rejecting client for %@ because it lacks the %@ capability: %@
Started tracking call: %@
Stopped tracking call: %@
Asked to answer call %@ while disconnecting calls %@ and holding calls %@
Asked to hold calls %@ while unholding calls %@
Asked to group calls %@ with calls %@
Asked to ungroup call %@ from other calls in group %@
Asked to disconnect call %@ while ungrouping call %@
Asked to disconnect all calls %@
Asked to disconnect calls %@ while holding calls %@ and unholding calls %@ and ungrouping calls %@
Asked to set TTY type to %d for calls %@
Asked to set uplink muted to %d for calls %@
handleCallStatusChanged %@
bytesOfDataUsed: %ld callHistoryIdentifier: %@
[WARN] Invalid TUHandle generated from CXLabelHandle %@
[WARN] Invalid TULabeledHandle generated from CXLabelHandle %@
[WARN] Invalid TUSenderIdentity generated from CXSenderIdentity %@
Asked to hold relay calls %@ while unholding relay calls %@
Asked to answer relay call %@ while disconnecting active relay calls %@
[WARN] Ignoring request to answer call because canBeAnswered is NO: %@
Asked to answer relay call %@ while disconnecting held relay calls %@ and holding relay calls %@
Asked to answer relay call %@ while holding relay calls %@
Asked to group relay calls %@ with relay calls %@
Asked to ungroup relay call %@ from other relay calls in group %@
Asked to disconnect relay call %@ while ungrouping relay call %@
Asked to disconnect relay calls %@
Asked to disconnect relay calls %@ while holding relay calls %@ and unholding relay calls %@ and ungrouping calls %@
Received notification: %@
softlink:r:path:/System/Library/Frameworks/Intents.framework/Intents
$sSY
$ss25ExpressibleByArrayLiteralP
$ss10SetAlgebraP
$ss9OptionSetP
_ypt
ySSSbG
ySo22UNNotificationCategoryCG
ySSSo8NSNumberCG
ySSSo21STConversationContextCG
ySSSo14STConversationCG
ShySo22UNNotificationCategoryCGG
_Sb9available_Si5counttt
Sb9available_Si5counttG
ySSypG
SS_ypt
ySSG
ySSSaySo9CNContactCGG
yS2SG
So13AVAudioPlayerCG
ySo8TUHandleCG
ySo20TUConversationMemberCG
ySSSDyS2SGG
ySS_SSG
ySS_SSGt
ySS_SSGG
_ypt
ySSSo9CNContactCG
ySDy
ypG5event_ADSg7optionst
_pGG
ySDy
ypG7request_ADSg7optionsyAF_AF
_pSgtc7handlertAH_pGG
_Sbt
_So23TUScreenShareAttributes_pt
So23TUScreenShareAttributes_pG
_Shy
So8NSStringC
_A63At
So7NSErrorC
$ss21_ObjectiveCBridgeableP
$s10Foundation21_BridgedStoredNSErrorP
$s10Foundation18_ErrorCodeProtocolP
$s13callservicesd22CompanionLinkMessengerP
$s13callservicesd13CompanionLinkP
_pSg
$s13callservicesd25AudioInterruptionProviderP
14DescriptorType
Sgyc
$s13callservicesd33AudioInterruptionPriorityProviderP
$s13callservicesd18DescriptorProviderP
x2id_t
$s13callservicesd18DescriptorResolverP
So8NSObjectC
So17OS_dispatch_queueC
_yptG
ySS_SbtG
So30CSDAbstractIDSProviderDelegateC
SbSo17CXStartCallActionC_
ShySSGSo17CXStartCallActionC_
So22TUContactsDataProviderCtc
So25CSDIDSDualSessionProvider_p
_ShySSGSDySSypGSo17OS_dispatch_queueCtc
So10CSDIDSChat_pSo25CSDExternalIDSDualSessionC_
So17CXStartCallActionCS2btc
So22TUContactsDataProviderC
So19CXInProcessProviderC
So25CSDExternalIDSDualSessionCSo8TUHandleCSbSo12NSDictionaryCSo10CSDIDSChat_pIeyByyyya_
So25CSDExternalIDSDualSessionCSo8TUHandleCSbSDySS
GSo10CSDIDSChat_pIegggygo_
So10CSDIDSChat_p
SaySo10CSDIDSChat_pG
ySS_yptG
ShySSG
SDySSypG
So17CXStartCallActionC
ypSg
ySS_SSGSg
ySSG
$s13callservicesd30ConversationPersistenceStorageP
$s13callservicesd37EmergencyCallbackCapabilitiesProtocolP
yycSg
yyXlGSgGc
ySi_So17OS_dispatch_queueC
So21CSDCallCenterObserver_p
SgXw
IeyB_
So16IMPowerAssertionCSg
So21CSDCallCenterObserver_pSg
So17TURouteControllerCSg
SgXw
$s13callservicesd40AudioInterruptionProviderFactoryProtocolP
37AVAudioClientInterruptionProviderType
38AVAudioSessionInterruptionProviderType
So14IDSDestinationC
$s13callservicesd32ChangeTrackingDescriptorResolverP
$s13callservicesd26CallCenterObserverProtocolP
$s13callservicesd26CallCenterObserverDelegateP
So22TUCallContainerPrivate_pyc
So20NSNotificationCenterC
So29CSDCallCenterObserverDelegate_pSgXw
ySo7CSDCallC_
tcSg
So7CSDCallC
IeyByy_
So21TUConversationManagerC
So16FTNetworkSupportC
So14TUFeatureFlagsC
So24UNUserNotificationCenterC
SSSo14TUConversationCc
SSSo8TUHandleCc
SSSo8TUHandleC_So14TUConversationCtc
ShySo22UNNotificationCategoryCG
ySo21UNNotificationRequestCcSg
ySS_So21UNNotificationContentCtcSg
ySScSg
ySo20UNNotificationActionCG
ySSG
SaySSG
Sg_ABt
So14TUConversationCSg
So18TUConversationLinkCSg
SgXw
SgXwz_Xx
So21UNNotificationRequestC
So13AVAudioPlayerCG
10descriptor_t
SgSo7CSDCallC_
So7CSDCallC
SgIeggyr_
So21CSDFaceTimeIDSServiceC
$s13callservicesd24UserNotificationProviderP
$s13callservicesd24UserNotificationResponseP
So21OS_dispatch_semaphoreC
So14AVAudioSessionC
So14AVAudioSessionCSg
$s13callservicesd23ProcessObserverProtocolP
SDySSSDy
So26BKSApplicationStateMonitorC
tcSg
_SitG
SiGIegg_
SgXw
ySo21RPCompanionLinkDeviceCG
So12NSDictionaryCIeyBy_
IeyByy_
ySo8TUHandleCG
$s13callservicesd10CallFilterP
$s13callservicesd19NSNumberConvertibleP
SDySSSDyS2SGG
ySS_SDyS2SGtG
ySS_SStG
SDyS2SG
$s13callservicesd28IDSDeviceDestinationResolverP
Sbyc
So9IDSDeviceCSgSSc
So15CSDIDSTransportCSg
$s13callservicesd24DirtyCallManagerProtocolP
ySo7CSDCallCcSg
SaySo7CSDCallCG
ShySo7CSDCallCG
So7CSDCallCIeyBy_
$s13callservicesd33PendingMembershipTrackerServerBagP
$s13callservicesd32PendingMembershipTrackerDelegateP
$s13callservicesd33PendingMembershipTrackerMessengerP
$s13callservicesd31PendingMembershipTrackerStorageP
So36CSDPendingMembershipTrackerMessenger_pSgXw
So35CSDPendingMembershipTrackerDelegate_pSgXw
SDySS
So20TUConversationMemberC
3key_SDySS
G5valuetSg
3key_SDySS
G5valuet
ySo20TUConversationMemberCG
ShySo8TUHandleCG
ySo20TUConversationMemberC_G
ySo26CSDConversationParticipantC_G
SaySo20TUConversationMemberCG
SaySo20TUConversationMemberCGG
ShySo8TUHandleCG18delegatedToMembers_
11responseKeyt
So8TUHandleC6sender_t
ShySo21RPCompanionLinkClientCG
So21RPCompanionLinkDeviceC
ySo21RPCompanionLinkDeviceC
_pGIegg_
SgXw
SgXwz_Xx
So21RPCompanionLinkClientC
_pGIegg_
_yptG
ySiG
SaySiG
So7CSDCallC
So12TUCallCenterC
SDySSypGSg
So6TUCallCSg
ySo8TUHandleC_G
So14NSUserDefaultsC
So14NSUserDefaultsC
ySbGIeggn_
ypGSg
So12NSDictionaryC
$ss12IdentifiableP
So22CSDCallStateControllerCSgXw
SaySo17CSDCallDataSourceCG
So19CSDDirtyCallManager_p
SgXw
$s13callservicesd24LocalAudioSystemProviderP
SSSg
SS3key_yp5valuetSg
ySSSDy
ySSyXlG
ySSSay
ySSSiG
ySSSaySo28TUConversationLinkDescriptorCGG
ySSSo7TURouteCG
ySSSo21RPCompanionLinkDeviceCG
So12RTCReportingCG
So14OS_nw_activity_pG
So20TUConversationReportCG
SDySS
ySo8NSNumberCSSG
_AAt
38AVAudioSessionInterruptionProviderType
37AVAudioClientInterruptionProviderType
yq_q0_q1_G
Sdyc
GSgXw
_pSg
$s13callservicesd21RingtoneProviderAlertP
$s13callservicesd24RingtoneProviderProtocolP
So14CNContactStoreC
_pSg
_pSgSo20TLAlertConfigurationCc
ySo15CNKeyDescriptor_pG
So15CNKeyDescriptor_p
$s13callservicesd13RouteProviderP
$s13callservicesd25DeselectableRouteProviderP
$s13callservicesd029PairedHostDeviceRouteTrackingE8ProviderP
$s13callservicesd31ConversationLinkManagerDelegateP
So13CSDIDSServiceC
So24CSDConversationServerBag_p
So38TUConversationLinkDescriptorDataSource_p
So34CSDConversationLinkManagerDelegate_pSg
SaySo28TUConversationLinkDescriptorCG
So12IDSPseudonymC
So11NSPredicateC
So28TUConversationLinkDescriptorC
ySo28TUConversationLinkDescriptorCG
_pSgIegyg_Sg
ySnySiGG
ShySo8TUHandleCGSg
So18TUConversationLinkCSg
_pSgIeggg_
So8TUHandleC
So35TUMutableConversationLinkDescriptorC
So28TUConversationLinkDescriptorCSg
_pSgIeggg_
ySo11NSPredicateCG
_pSgIegyng_Sg
So18TUConversationLinkC
So28TUConversationLinkDescriptorCSbIeggd_
ySaySo28TUConversationLinkDescriptorCGG
So28TUConversationLinkDescriptorCSSIeggo_
ySaySo28TUConversationLinkDescriptorCGGSSG
SSSo11NSPredicateCIegnr_
ShySo18TUConversationLinkCGSg
_pSgIeggg_
SaySo18TUConversationLinkCGSg
_pSgIeggg_
So31CSDMessagingConversationMessageCSgSo6NSDataCSgSo7NSErrorCSgIeyByyy_
So31CSDMessagingConversationMessageCSg
_pSgIegggg_
So40CSDMessagingEncryptedConversationMessageC
So18TUConversationLinkCSg
_pSgIeggg_Sg
So18TUConversationLinkCSgSo7NSErrorCSgIeyByy_
So6NSDateCSgSo7NSErrorCSgIeyByyy_
So7NSErrorCSgIeyByy_
So28TUConversationLinkDescriptorCSgSo7NSErrorCSgIeyByy_
So5NSSetCSgSo7NSErrorCSgIeyByy_
So7NSArrayCSgSo7NSErrorCSgIeyByy_
SgXw
SDySSSay
So12RTCReportingCG
So20TUConversationReportCG
So14OS_nw_activity_pG
SDySS
So19CSDAppleIDUtilitiesC
So12RTCReportingCSg
SS3key_yp5valuet
3key_yp5valuetSg
So14TUConversationC
SayypG
SaySDySSypGG
So10CSDIDSChatC
SaySo6TUCallCG
So7TURouteC
So22CSDReportingControllerC
So23RTCSecureHierarchyTokenC
$s13callservicesd15RTCReporterInfoP
SiSg
SdSg
SbSg
3key_
G5valuetSg
3key_
G5valuet
$s13callservicesd37ScreenSharingActivityManagerProvidingP
$s13callservicesd36ScreenSharingActivityManagerDelegateP
So39CSDScreenSharingActivityManagerDelegate_pSgXw
So23TUScreenShareAttributes_pG
So23TUScreenShareAttributes_p
SgXw
GIegg_
_G_G
SgXwz_Xx
Ieggn_
ySi_
SS3key_
5valuetSg
SS3key_
5valuet
SDySSSbG
SDySS
$s13callservicesd19UserIntentValidatorP
z_Xx
_pXp
$s13callservicesd21CallHistoryDataSourceP
$s13callservicesd10RecentCallP
So24CHCallInteractionManagerC
So21TUCallProviderManagerC
_pcSg
So18TUConversationLinkCSg
SgcSg
ySuG
ySo24UNNotificationAttachmentCG
ySo8CHHandleCG
_pSg
So13TUDialRequestC
So7NSErrorCSg
SaySo11IDSEndpointCG
ySaySo11IDSEndpointCGG
ySo11IDSEndpointCG
ySo47CSDMessagingConversationLinkGeneratorDescriptorCG
So7CSDCallCSg
ySo7CSDCallCSgG
ySo12TUAudioRouteCG
ySo26CSDConversationParticipantCG
yypG
ySo7TURouteCG
ySbG
ySo18TUConversationLinkCG
ySo18TUConversationLinkCG
ySDySSypGG
ySo7CSDCallCG
ySo7CSDCallCG
ySo21RPCompanionLinkClientCG
ySo20TUNearbyDeviceHandleCG
_pSg
SaySo13CSDCallFilter_pG
So22TUSenderIdentityClientC
So13CSDCallFilter_p
So14TUCallProviderC
Sg_ABt
Sg_ABt
Sg_ABt
Sg_ABt
Sg_ABt
$s13callservicesd25HoldMusicProviderProtocolP
So19AVSpeechSynthesizerCSg
So13AVAudioPlayerCSg
SgXw
So16CARSessionStatusC
ySbcSg
SgXw
IeyBy_
So27TUCallScreenShareAttributesC
So13CSDAVCMoments_p
SDySS
So38TUContactsDataProviderAppleCareHandlesC
So45CSDCarrierBundlePhoneNumberProviderControllerC
SDySSSaySo9CNContactCGG
SDySSSo7TURouteCG
ySo7TURouteCcSg
SaySo7TURouteCG
So7TURouteCIeyBy_
SgXw
SgXwz_Xx
ySo21RPCompanionLinkClientCG
ySo21RPCompanionLinkClientCG
ySo21RPCompanionLinkClientCGSgXw
SaySo21RPCompanionLinkDeviceCG
ySo21RPCompanionLinkClientCGSgXw
So21RPCompanionLinkDeviceCIegn_
So21RPCompanionLinkDeviceC
Iegny_
So7CSDCallCSbIggd_
So6TUCallCSbIggd_
_pSg
So26CSDDeviceLockStateObserverCSg
A2ASgSbSo20TUConversationMemberCSo8TUHandleCSayADGSayAFGSaySo26CSDConversationParticipantCGSo0A4LinkCSgSo0A6ReportCSaySo39CSDMessagingConversationActivitySessionCGSSSgIegnnnyggggggggg_
So15CSDConversationC
ShySo26CSDConversationParticipantCG
ShySo20TUConversationMemberCG
So6NSUUIDCA2BSg
So20TUConversationMemberCSo8TUHandleCSo7NSArrayCA2JSo0B4LinkCSgSo0B6ReportCAJSo8NSStringCSgIeyByyyyyyyyyyyyy_
_pSgIegr_
SgXw
SgXwz_Xx
$s13callservicesd26DescriptorTrackingProviderP
$s13callservicesd21AudioResolverProtocolP
14DescriptorType
So22CSDTTYProviderObserver_p
So14TUFeatureFlags_p
Sg_ABSbtcSg
SgXw
SDyx
yx_xGG
qd__
SaySo12TUAudioRouteCG
So12TUAudioRouteCSg
So12TUAudioRouteC
SaySo12TUAudioRouteCGz_Xx
$s13callservicesd20NearbyDeviceProviderP
$s13callservicesd12NearbyDeviceP
10DeviceType
SDySS10DeviceType
$s13callservicesd35ConversationLinkSyncManagerDelegateP
$s13callservicesd37ConversationLinkSyncManagerDataSourceP
_pSgXw
SdSi_
$s13callservicesd21IDSInteractorDelegate33_735B00354BCC442560C6AD87FDD31012LLP
So13CSDIDSService_p
_pSgXw
So24OS_dispatch_source_timer_p
SgXw
SgXwz_Xx
SSIegg_
SaySo47CSDMessagingConversationLinkGeneratorDescriptorCG
So27CSDMessagingLinkSyncMessageCSg
SaySSGSg
SDySSSiG
So13OS_xpc_object_p
So20IDSIDQueryControllerC
SSSgSg
So7NSArrayCABIeyByy_
SaySSGAAIeggg_
SaySo11IDSEndpointCGIegg_
3key_yp5valuet
$s13callservicesd40AudioInterruptionActivationStateObserverP
G10identifier_t
$s13callservicesd22UserNotificationCenterP
SDySS
So16CSDClientManagerCyyXlyXlGSg
So22UNNotificationResponseC
Ieg_
_ShySo22UNNotificationCategoryCGtG
SgXw
SgXwz_Xx
So16CSDClientManagerC
SgXw
$s13callservicesd29DiscoveryModeProviderProtocolP
$s13callservicesd19VoicemailDataSourceP
$s13callservicesd9VoicemailP
So19CoreTelephonyClientC
ShySuG
Sb9available_Si5counttG
_pSg
3key_Sb9available_Si5countt5valuetSg
3key_Sb9available_Si5countt5valuet
SaySo8TUHandleCG
So9CHManagerC
So12IDSCTAdapterC
So8IDSCTSIM_p
$s13callservicesd21SoundProviderProtocolP
So17TUCallSoundPlayerC
ySo21RPCompanionLinkDeviceC
ySo21RPCompanionLinkDeviceC_
SDySS
ySDy
ypG7request_ACSg7optionsyAE_AE
_pSgtc7handlertAG_pGG
SDySS
ySDy
ypG5event_ACSg7optionst
_pGG
Sg11localUpdate_AB5foundAB4lostAB7changedt
ySDy
ypG5event_ADSg7optionst
_pGG
y_AAy_
ySDy
ypG5event_ADSg7optionst
_pGGG
ySDy
ypG5event_ACSg7optionst
SgXw
SgXwz_Xx
_pGIegg_
ypGABSgIeggg_
ySDy
ypG7request_ADSg7optionsyAF_AF
_pSgtc7handlertAH_pGG
y_AAy_
ySDy
ypG7request_ADSg7optionsyAF_AF
_pSgtc7handlertAH_pGGG
ySDy
ypG7request_ACSg7optionsyAE_AE
_pSgtc7handlertAG_pG
ypGABSgA2C
_pSgIegggg_Iegggg_
ypGSgAC
_pSgytIegnnnr_
So12NSDictionaryCSgACSo7NSErrorCSgIeyByyy_
ypGSgAC
_pSgIegggg_
ySo21RPCompanionLinkDeviceC
GSo17OS_dispatch_queueCG
ySo21RPCompanionLinkDeviceC
GSo17OS_dispatch_queueCGG
ySo21RPCompanionLinkDeviceC
GSo17OS_dispatch_queueCGG
ySo21RPCompanionLinkDeviceC
GSo17OS_dispatch_queueCGG
GAKG
So21RPCompanionLinkDeviceCSg
So21RPCompanionLinkDeviceCSbIeggd_
So21RPCompanionLinkDeviceCIegg_
Iegg_
Iegn_
_pSgIegg_Sg
_pIegn_
Iegn_
_pGSo17OS_dispatch_queueCG
ySDy
ypGSg8response_AD7optionst
_pGIegg_
Sb_yttIegn_
AE_pGG
GAE_pGGSo17OS_dispatch_queueCG
Iegn_
Iegn_
ypGIegn_
_p_G
AE_pGGGSDy
ypGG
ySbAD_pGSo17OS_dispatch_queueCGG
SaySDyS2SGG
So10AVCMomentsCSg
So21CSDAVCMomentsDelegate_pSgXw
$s13callservicesd28ManagedDeviceMonitorDelegateP
$s13callservicesd20ManagedDeviceMonitorP
SDySSyXlG
6status_t
$s13callservicesd22ASCIIStringConvertibleP
So31CSDManagedDeviceMonitorDelegate_pSgXw
So22CSDCallProviderManagerC
SDySSSo14STConversationCG
SDySSSo21STConversationContextCG
SDySS
ySo25TUConversationParticipantC_G
So14STConversationCSg
So14STConversationCSgz_Xx
So21STConversationContextC
SgXw
SgXwz_Xx
So6TUCallC
So21STConversationContextC
ySbGIeggn_
ySbG
So20CSDAVCMomentsRequest_p
So38CSDNeighborhoodActivityConduitDelegate_p
So8TUHandleCSg
_pSgIeggg_
SgXw
SgXwz_Xx
_pSgIegyg_
So20TUNearbyDeviceHandleC
$s13callservicesd35NeighborhoodActivityConduitDelegateP
So10NSMapTableCySo38CSDNeighborhoodActivityConduitDelegate_pSo17OS_dispatch_queueCG
ShySo20TUNearbyDeviceHandleCG
So20TUContactsDataSource_p
SDySS
yShySo8TUHandleCG
ySo8NSNumberCG
ySS_SSGG
_AAt
ySuG
ySi5count_Sb11isAmbiguoustG
ySo13CSDCallFilter_pG
ySo9IDSDeviceCG
ySaySo7TURouteCGG
ySaySo7CSDCallCGG
So38CSDNeighborhoodActivityConduitDelegate_pIegg_
_pIegg_
_pGSo17OS_dispatch_queueCG
_pGSo17OS_dispatch_queueCGAEG
ySDy
_p_G
ySDy
ypGSg8response_AE7optionst
yAdH_p_GG
ySDy
ypGSg8response_AF7optionst
yAeI_p_GGAfG_AfHtG
ySDy
ypGSg8response_AG7optionst
yAfJ_p_GGAgH_AgItG
ySDy
ypGSg8response_AH7optionst
yAgK_p_GGAhI_AhJtG
GGAK_pG
ySDy
yABSg8response_AD7optionst
_pGIeggo_
ypGSg8response_AC7optionst
ySDy
ypGSg8response_AD7optionst
ySDy
ypGSg8response_AD7optionst
_pGIegg_Iegg_
ySDy
ypGSg8response_AD7optionst
_pGIegn_
AC_pGG
AD_pGG
GAD_pGG
_pGIegno_
SbIegy_
_pGIgg_Iegy_
_pGIegg_Iegg_
_pGIegn_
yShySo8TUHandleCG
yShySo8TUHandleCG
GGSayAEGG
yShySo8TUHandleCG
GGSDySS
yShySo8TUHandleCG
GGSDySS
GGSo17OS_dispatch_queueCG
yShySo8TUHandleCG
GGSDySS
GGSo17OS_dispatch_queueCGG
SaySo8TUHandleCGSDySS
GIeggo_
SDySS
GIegg_
ySo8NSStringCG
SaySo9CNContactCG
_pGSo17OS_dispatch_queueCG
_pGSo17OS_dispatch_queueCGAEG
ySDy
ypGSg8response_AG7optionst
yAfJ_p_GGAgH_AgItG
ySDy
ypGSg8response_AH7optionst
yAgK_p_GGAhI_AhJtG
GGAK_pG
So8TUHandleCSgSo7NSErrorCSgIeyByy_
_pGSo17OS_dispatch_queueCG
_pSgIegng_
GSpySo8NSObjectCGSgSpyypGSgytIeglllr_
ySo20TUNearbyDeviceHandleC_G
SaySDy
ypGG
ySDy
ypGG
GACG
GADGG
GAEGGSo17OS_dispatch_queueCG
Xoz_Xx
ySDy
ypG5event_ADSg7optionst
_pGSo17OS_dispatch_queueCG
ySDy
ypG5event_ACSg7optionst
So20TUNearbyDeviceHandleCSg
_pIegngzo_
ySDy
ypG5event_ADSg7optionst
_pGSo17OS_dispatch_queueCG
So20TUNearbyDeviceHandleCSg
_pIegngzo_
ySDy
ypG7request_ADSg7optionsyAF_AF
_pSgtc7handlertAH_pG
_pGSo17OS_dispatch_queueCG
ySDy
ypG7request_ACSg7optionsyAE_AE
_pSgtc7handlertAG_pG
So20TUNearbyDeviceHandleCSg
_pGIegngo_
_pGG
_p_G
AD_pGGG
_p_G
ypGIegg_
So20TUNearbyDeviceHandleCSg
_pGIegn_Iegg_
_pGSo17OS_dispatch_queueCG
So22TUConversationActivityCSg
_pGIegyo_
_pGIegn_
_p_G
_pGIegg_
ySDyS2SGG
domain
error
_os_unfair_lock_opaque
rawValue
RawValue
ArrayLiteralElement
Element
_rawValue
osd_type
__Anonymous_field1
osd_decoder
osd_title
_nsError
_ObjectiveCType
Code
_ErrorType
osdd_library
osdd_type
authenticationFailed
operationNotSupported
insufficientDeviceInfo
authenticatedDeviceNotFound
alreadyAuthenticated
authenticationCompleted
boxed
_beginOrUpdate
_end
_resetState
_activeDescriptor
rawValue
ArrayLiteralElement
RawValue
Element
DescriptorType
default
high
proxy
local
queue
isAccountActive
isDestinationValid
destinationsGenerator
outgoingSessionProviderGenerator
outgoingChatGenerator
contactsDataProvider
queue
queue
privateAPIValidator
$__lazy_storage_$_applicationStateValidator
donatedIntentValidator
backgroundBluetoothAccessValidator
mediaRemoteStateValidator
_emergencyCallbackPossible
emergencyCallbackCapabilitiesDidChange
preventDetachAfterEmergencyCallTimeoutDeterminationHandler
dispatchAfterHandler
dispatchCancelHandler
queue
callCenterObserver
preventDetachAfterEmergencyCallTimeoutWorkItem
lock
state
subscribed
initialized
cancelled
powerAssertion
powerAssertionDescription
callCenterObserver
routeController
acquirePowerAssertionHandler
releasePowerAssertionHandler
AVAudioSessionInterruptionProviderType
AVAudioClientInterruptionProviderType
uniqueIdentifier
name
deviceType
isCurrentlyPicked
idsDestination
localKey
requestKey
responseKey
callContainerClosure
notificationCenter
delegate
triggers
callChanged
queue
conversationManager
ftNetworkSupport
featureFlags
notificationIdentifiersByConversationUUID
carPlayNotificationIdentifiersByConversationUUID
faceTimeNotificationCenter
facetimeIsShowingOnScreen
openURL
unlockAndOpenSensitiveURL
localizeConversationName
localizeHandleName
localizeHandleNameWithConversation
notificationType
categories
replace
removeNotification
updateBadgeValue
callCenterObserver
deviceIsHomePod
playersForSounds
letMeJoin
RawValue
FaceTime
Phone
RawValue
activeDescriptor
DescriptorType
audioSession
isLocal
_activationContext
activeDescriptor
DescriptorType
RawValue
queue
processInfoByBundleIdentifier
applicationMonitor
processStateChanged
updateBadgeValue
queue
openURL
localizeHandleName
notificationType
categories
replace
removeNotification
RawValue
fitnessPlusAppBundleID
fitnessPlusDaemonBundleID
routesDidChangeHandler
didPickRouteHandler
didDeselectAllRoutesHandler
supportsPrimaryCalling
hasRelayiCloudAccount
idsDeviceForIDSDeviceIdentifier
queue
callCenterObserver
nearbyDeviceMonitor
idsDeviceDestinationResolver
nearbyDeviceRoutes
activeRelayClientTransport
currentCallsSupportNearbyDevices
callChanged
queue
dirtyCallsArray
dirtyCallsSet
messenger
delegate
storage
serverBag
underlyingStorage
transactionUUID
mode
member
dateCreated
Host
Client
invalidHandle
Rejection
Approval
clientsPendingAuthentication
queue
maxDuration
unknownShortCallSignal
knownCallerSignal
junkCallSignal
linkCreatedSignal
silenceUnknownCallersEnabledObserver
link
message
options
protobufEncodeError
protobufDecodeError
invalidMessageContent
unknown
request
response
DescriptorType
callStateController
callChanged
dataSources
dirtyCallManager
callOutgoing
accessibilityDefaultRoute
audioSourceKey
beginOrUpdate
preserve
queue
resolver
audioInterruptionProviderPool
ringtoneProvider
soundProvider
holdMusicProvider
discoveryModeProvider
notificationCenter
deferredEndWorkItem
pendingExpeditedEndInterruptionUUIDs
endInterruptionDelay
mediaServicesWereResetObserver
audioSessionInterruptionObserver
audioController
factory
localAVAudioSessionInterruptionProvider
proxyAVAudioSessionInterruptionProvidersByAudioSessionID
avAudioClientInterruptionProvider
availability
photoRequestSuccessCount
photoRequestFailureCount
medianRequestDuration
meanRequestDuration
didBeginPlaying
contactStore
currentAlert
endedPlayingSemaphore
alertGenerator
playbackObserverGenerator
DescriptorType
service
serverBag
renewPseudonymTask
dataSource
linkSyncManager
generateKeyAgreement
delegate
RawValue
queue
relayDeviceRouteChangesByCallUUID
groupUUIDToConversationReportingSessions
conversationUUIDToConversationReport
groupUUIDToConversationInfo
callUUIDToCallReportingSessions
callUUIDtoConversationUUID
conversationGroupUUIDToCallUUID
callUUIDtoConversationGroupUUID
uuidToNWActivity
uuidToNWActivityConnecting
idsSessionUUIDToChatUUIDs
callInfosPendingScoreForCallUUIDs
userScoreEnabled
appleIDUtilities
callInfo
rtcReporting
callUUID
durationMs
relativeStart
relativeEnd
bucketedDuration
endReason
providerErrorCode
providerEndedReason
setupTimeMs
connectionTimeMs
relay
incoming
connected
currentlyGrouped
relayDeviceRouteChanges
filteredOutReason
verficationStatus
knownCallerStatus
isOwnNumber
isConversation
fromLink
returnedCall
isSiriSuggested
isKnownContact
isVerifiedAppleCare
isSignedIntoiCloud
junkConfidence
identificationCategory
isKnownCaller
userScore
delegate
subscriptionsById
sessionsById
remoteAttributesById
isSessionJoined
messenger
observer
featureFlags
conversationIdentifier
unknownFields
policyInfos
identifierHash
userAccountToken
userAccountTokenNonce
contacts
identifier
memberToken
activityInfo
namePrefix
givenName
middleName
familyName
nameSuffix
nickname
imageData
deviceToken
success
timeout
isAmbiguous
processObserver
donatedIntentCache
validator
isValid
streamToken
requesterID
queue
callInteractionManager
callHistoryDataSource
callProviderManager
pendingCallIdentifiers
supportedMediaTypes
supportedProviders
mostRecentCallDate
inCallServiceProcessObserver
supportsDisplayingFaceTimeAudioCalls
openURL
dialRecentCall
findConversationLink
featureFlags
notificationType
replace
removeNotification
updateBadgeValue
privateKey
filters
senderIdentityClient
soundType
provider
isVideo
region
uuid
speechSynthesizerEventHandler
activeDescriptor
speechSynthesizer
audioPlayer
finishedUtterance
startedUtterance
canceledUtterance
DescriptorType
carSessionQueue
carSessionStatus
carPlayScreenConnectionChanged
sharerHandleValue
currentRemoteAttributes
deviceFamily
style
displayScale
scaleFactor
originalWidth
originalHeight
RawValue
type
failed
iPhone
iPad
iPod
watch
audioAccessory
RawValue
moments
remoteIDSDestinations
isRegistered
activeRequestsByTransactionID
callCenterObserver
contactStore
appleCareHandles
carrierBundleController
invalidPublicKeyData
requestKeyExhausted
responseKeyExhausted
cryptoFailed
_routesByUniqueIdentifier
routesDidChangeHandler
routeWasPickedHandler
timedOutPickingRouteHandler
queue
routeProviders
pendingRouteContext
pickWhenAvailableRouteIdentifier
pendingPickedRouteTimeout
route
routeProvider
queue
storage
lockStateObserver
interruptionDescriptor
interruptionDeferredEndDescriptor
ringtoneDescriptor
soundDescriptorAction
holdMusicDescriptor
discoveryModeDescriptor
queue
routesDidChangeHandler
pairedHostDeviceRoutes
contactIdentifier
providerRingtoneSoundURL
uuid
isVideo
handle
identifier
version
queue
callCenterObserver
ttyProviderObserver
localAudioSystemProvider
deviceSupportsRingtone
featureFlags
lastPlayedSoundDate
lastPlayedSoundType
soundDescriptorActionResolver
resolvedDescriptor
resolutionChangedHandler
DescriptorType
UpdateContext
call
triggers
items
timeProvider
expiration
item
routesDidChangeHandler
audioRoutes
queue
localAudioSystemProvider
callCenterObserver
ttyProviderObserver
callAudioCategory
callAudioMode
lastUserPickedRoute
callAudioInterruptionState
inactiveWithPrematurelySelectedRoute
inactive
active
DeviceType
queue
nearbyDeviceProvider
devicesChangedHandler
devicesByEffectiveIdentifier
delegate
dataSource
interactor
messageQueue
queue
stateHandle
intervalCalculator
actionByType
service
immediate
delayedShort
delayedLong
checkIn
timer
destinations
currentIndex
failedSending
replacing
appendingNew
newOnly
remoteMissingIdentifiers
localMissingIdentifiers
localDescriptorsBehindRemote
remoteDescriptorsBehindLocal
TUDataSource
featureFlags
queue
idsQueryController
serverBag
$__lazy_storage_$_supportsConversationOneToOneModeEnabled
$__lazy_storage_$_pushTokenForSelf
providerType
category
mode
activationContext
priority
wantsHoldMusic
wantsMixingVoiceWithMedia
wantsA2DP
operationMode
activationStateObserver
callProviderMicAttributionKey
avAudioSession
avAudioClient
callFilterManager
phoneNotificationCenter
faceTimeNotificationCenter
providersByIdentifier
queue
providers
clientManager
DescriptorType
queue
telephonyClient
contactStore
voicemailDataSource
postedVoicemailIdentifiers
pendingVoicemailIdentifiers
mostRecentVoicemailDate
mostRecentNonVisualVoicemailDate
localizeVoicemailName
callbackVoicemail
openURL
unsubscribedVoicemailInfoForUUID
notificationType
replace
removeNotification
updateBadgeValue
usTollFreePrefixes
callHistoryManager
idsCTAdapter
activeDescriptor
player
DescriptorType
callUUID
uuid
relativeStart
conversationBaseTime
hasLink
isPending
relativeEnd
duration
uPlusOneModeAtStart
uPlusOneModeAtEnd
maximumMemberCount
initialMemberCount
finalMemberCount
maxNumberOfParticipants
AVCBlobRecoveryAttempts
AVCBlobRecoveryTimeouts
numberLMIRequests
numberLMIApprovals
numberLMIDismissals
timebase
queue
client
authenticationController
activated
deviceUpdatedPublisher
deviceFoundPublisher
deviceLostPublisher
deviceChangedPublisher
cancellables
stateHandle
messagePublishers
eventPublishers
manager
DeviceType
moments
delegate
service
accessGroup
account
unhandledError
noPassword
unexpectedPasswordData
unexpectedItemData
delegate
providerManager
conversationsForBundleIdentifier
synchronousConversationsForBundleIdentifier
contextsForCallIdentifier
observationForCallIdentifier
delegateQueue
avcRequest
session
messenger
cancellables
queue
conversationManager
joinTimeoutSeconds
delegatesToQueues
featureFlags
handedOffConversations
joinApprovalState
localTVDevices
joinCompletionSubjects
contactStore
pendingJoinConversationIDs
activeConversationUpdateSubject
activeConversationUpdateCancellablesByDeviceID
conversationIDsWithActivities
stateHandle
contactForwardingCanceler
began
ended
device
member
conversationUUID
conversationGroupUUIDHash
knownParticipantsPublisher
none
requested
cancelled
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>Application-Group</key>
<array>
<string>com.apple.callhistory</string>
</array>
<key>BuildMachineOSBuild</key>
<string>20A241115</string>
<key>CFBundleDevelopmentRegion</key>
<string>English</string>
<key>CFBundleExecutable</key>
<string>callservicesd</string>
<key>CFBundleIdentifier</key>
<string>com.apple.TelephonyUtilities</string>
<key>CFBundleInfoDictionaryVersion</key>
<string>6.0</string>
<key>CFBundleName</key>
<string>callservicesd</string>
<key>CFBundlePackageType</key>
<string>FMWK</string>
<key>CFBundleShortVersionString</key>
<string>1.0</string>
<key>CFBundleSignature</key>
<string>????</string>
<key>CFBundleSupportedPlatforms</key>
<array>
<string>iPhoneSimulator</string>
</array>
<key>CFBundleVersion</key>
<string>1.0</string>
<key>DTCompiler</key>
<string>com.apple.compilers.llvm.clang.1_0</string>
<key>DTPlatformBuild</key>
<string>19A334</string>
<key>DTPlatformName</key>
<string>iphonesimulator</string>
<key>DTPlatformVersion</key>
<string>15.0</string>
<key>DTSDKBuild</key>
<string>19A334</string>
<key>DTSDKName</key>
<string>iphonesimulator15.0.internal</string>
<key>DTXcode</key>
<string>1300</string>
<key>DTXcodeBuild</key>
<string>13A191</string>
<key>LSBackgroundOnly</key>
<true/>
<key>MinimumOSVersion</key>
<string>15.0</string>
<key>UIDeviceFamily</key>
<array>
<integer>1</integer>
<integer>2</integer>
</array>
<key>_CFBundleUseAppleLocalizations</key>
<true/>
</dict>
</plist>
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
<key>application-identifier</key>
<string>com.apple.telephonyutilities.callservicesd</string>
<key>aps-connection-initiate</key>
<true/>
<key>aps-environment</key>
<string>development</string>
<key>com.apple.CallHistory.sync.allow</key>
<true/>
<key>com.apple.CallKit.call-directory</key>
<array>
<string>synchronize-extensions</string>
<string>compact-store</string>
<string>query-identification-entries</string>
</array>
<key>com.apple.CallKit.call-directory.extension-host</key>
<true/>
<key>com.apple.CommCenter.fine-grained</key>
<array>
<string>spi</string>
<string>phone</string>
<string>voice</string>
<string>identity</string>
<string>data-usage</string>
<string>data-allowed</string>
<string>data-allowed-write</string>
<string>carrier-space</string>
<string>carrier-settings</string>
</array>
<key>com.apple.CompanionLink</key>
<true/>
<key>com.apple.Contacts.database-allow</key>
<true/>
<key>com.apple.FaceTime.CallLaunch</key>
<true/>
<key>com.apple.FaceTime.FTConversationService</key>
<array>
<string>access-conversation-links</string>
<string>modify-conversation-links</string>
<string>access-conversation-links</string>
</array>
<key>com.apple.FaceTime.NoPrompt</key>
<true/>
<key>com.apple.appletv.pbs.mediaremote</key>
<true/>
<key>com.apple.appletv.pbs.user-profiles</key>
<true/>
<key>com.apple.appletv.pbs.user-profiles.select</key>
<true/>
<key>com.apple.assistant.settings</key>
<true/>
<key>com.apple.backboardd.launchapplications</key>
<true/>
<key>com.apple.backboardd.proximityDetection</key>
<true/>
<key>com.apple.coreduetd.allow</key>
<true/>
<key>com.apple.coreduetd.context</key>
<true/>
<key>com.apple.coreduetd.knowledge</key>
<true/>
<key>com.apple.coremedia.allow-protected-content-playback</key>
<true/>
<key>com.apple.coremedia.captureassertionservice</key>
<array>
<string>modify-assertion</string>
</array>
<key>com.apple.coretelephony.Calls.allow</key>
<true/>
<key>com.apple.developer.group-session</key>
<true/>
<key>com.apple.developer.notificationcenter-identifiers</key>
<array>
<string>com.apple.facetime</string>
<string>com.apple.Photos</string>
</array>
<key>com.apple.duet.expertcenter.consumer</key>
<true/>
<key>com.apple.frontboard.launchapplications</key>
<true/>
<key>com.apple.imagent</key>
<true/>
<key>com.apple.imagent.av</key>
<true/>
<key>com.apple.messages.nicknames</key>
<true/>
<key>com.apple.multitasking.termination</key>
<true/>
<key>com.apple.multitasking.voipassertions</key>
<true/>
<key>com.apple.pegasus.backgroundPIPServiceEntitlement</key>
<true/>
<key>com.apple.private.CallHistory.read-write</key>
<true/>
<key>com.apple.private.accounts.allaccounts</key>
<true/>
<key>com.apple.private.aps-client-cert-access</key>
<true/>
<key>com.apple.private.aps-connection-initiate</key>
<true/>
<key>com.apple.private.assets.accessible-asset-types</key>
<array>
<string>com.apple.MobileAsset.phoneNumberResolver</string>
</array>
<key>com.apple.private.attentionawareness</key>
<true/>
<key>com.apple.private.attentionawareness.poll</key>
<true/>
<key>com.apple.private.biome.read-write</key>
<array>
<string>GroupActivitySession</string>
</array>
<key>com.apple.private.carkit.dnd</key>
<true/>
<key>com.apple.private.contacts</key>
<true/>
<key>com.apple.private.copresence</key>
<true/>
<key>com.apple.private.coreaudio.borrowaudiosession.allow</key>
<true/>
<key>com.apple.private.coremedia.interruptions.phonecallpriority.allow</key>
<true/>
<key>com.apple.private.coreservices.canalwaysadvertise</key>
<true/>
<key>com.apple.private.coreservices.canmaplsdatabase</key>
<true/>
<key>com.apple.private.coreservices.canopenactivity</key>
<true/>
<key>com.apple.private.coreservices.lsuseractivityd.LSAlwaysPick</key>
<true/>
<key>com.apple.private.coreservices.lsuseractivityd.bestappsuggestion</key>
<true/>
<key>com.apple.private.dmd.emergency-mode</key>
<true/>
<key>com.apple.private.dmd.policy</key>
<true/>
<key>com.apple.private.donotdisturb.behavior.resolution.client-identifiers</key>
<array>
<string>com.apple.telephonyutilities.callservicesd</string>
</array>
<key>com.apple.private.externalaccessory.showallaccessories</key>
<true/>
<key>com.apple.private.hid.client.event-monitor</key>
<true/>
<key>com.apple.private.icfcallserver</key>
<true/>
<key>com.apple.private.ids.messaging</key>
<array>
<string>com.apple.private.alloy.facetime.multi</string>
<string>com.apple.private.alloy.facetime.video</string>
<string>com.apple.private.alloy.facetime.lp</string>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.ess</string>
<string>com.apple.private.alloy.phone.auth</string>
<string>com.apple.private.alloy.facetime.audio</string>
<string>com.apple.private.alloy.facetime.sync</string>
</array>
<key>com.apple.private.ids.messaging.high-priority</key>
<array>
<string>com.apple.private.alloy.facetime.multi</string>
<string>com.apple.private.alloy.facetime.video</string>
<string>com.apple.private.alloy.facetime.lp</string>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.private.alloy.phone.auth</string>
<string>com.apple.private.alloy.facetime.audio</string>
<string>com.apple.private.alloy.facetime.sync</string>
</array>
<key>com.apple.private.ids.registration</key>
<array>
<string>com.apple.private.alloy.facetime.multi</string>
<string>com.apple.private.alloy.facetime.sync</string>
</array>
<key>com.apple.private.ids.remoteurlconnection</key>
<true/>
<key>com.apple.private.ids.self-session</key>
<array>
<string>com.apple.private.alloy.facetime.multi</string>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.private.alloy.facetime.video</string>
<string>com.apple.private.alloy.facetime.audio</string>
<string>com.apple.private.alloy.tincan.audio</string>
<string>com.apple.private.alloy.facetime.sync</string>
</array>
<key>com.apple.private.ids.session</key>
<array>
<string>com.apple.private.alloy.facetime.multi</string>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.private.alloy.facetime.video</string>
<string>com.apple.private.alloy.facetime.audio</string>
<string>com.apple.private.alloy.tincan.audio</string>
<string>com.apple.private.alloy.facetime.sync</string>
</array>
<key>com.apple.private.ids.session-private</key>
<array>
<string>com.apple.private.alloy.facetime.multi</string>
<string>com.apple.private.alloy.phonecontinuity</string>
<string>com.apple.private.alloy.facetime.video</string>
<string>com.apple.private.alloy.facetime.audio</string>
<string>com.apple.private.alloy.tincan.audio</string>
<string>com.apple.private.alloy.facetime.sync</string>
</array>
<key>com.apple.private.imavcore.imavagent</key>
<true/>
<key>com.apple.private.imcore.imremoteurlconnection</key>
<true/>
<key>com.apple.private.lockdown.finegrained-get</key>
<array>
<string>NULL/ActivationState</string>
</array>
<key>com.apple.private.necp.match</key>
<true/>
<key>com.apple.private.notificationcenter-system</key>
<array>
<dict>
<key>identifier</key>
<string>com.apple.SystemNote</string>
</dict>
</array>
<key>com.apple.private.notificationcenter.internalpushclient</key>
<true/>
<key>com.apple.private.notificationcenterui.alerts</key>
<true/>
<key>com.apple.private.rtcreportingd</key>
<true/>
<key>com.apple.private.screen-time</key>
<true/>
<key>com.apple.private.security.storage.CallHistory</key>
<true/>
<key>com.apple.private.security.storage.Messages</key>
<true/>
<key>com.apple.private.security.storage.Voicemail</key>
<true/>
<key>com.apple.private.suggestions.contacts</key>
<true/>
<key>com.apple.private.system-keychain</key>
<true/>
<key>com.apple.private.tcc.allow.overridable</key>
<array>
<string>kTCCServiceMediaLibrary</string>
<string>kTCCServicePhotos</string>
<string>kTCCServiceAddressBook</string>
<string>kTCCServiceMicrophone</string>
</array>
<key>com.apple.private.tcc.manager</key>
<true/>
<key>com.apple.private.usernotifications.bundle-identifiers</key>
<array>
<string>com.apple.facetime</string>
<string>com.apple.mobilephone</string>
</array>
<key>com.apple.runningboard.assertions.callservicesd</key>
<true/>
<key>com.apple.runningboard.process-state</key>
<true/>
<key>com.apple.security.exception.mach-lookup.global-name</key>
<array>
<string>com.apple.carkit.service</string>
<string>com.apple.fairplayd.versioned</string>
<string>com.apple.biome.PublicStreamAccessService</string>
<string>com.apple.imtransferservices.IMTransferAgent</string>
<string>com.apple.adid</string>
<string>com.apple.group-activities.conversationmanagerhost</string>
<string>com.apple.CompanionLink</string>
</array>
<key>com.apple.security.exception.shared-preference.read-only</key>
<array>
<string>com.apple.InCallService</string>
<string>com.apple.suggestions</string>
<string>com.apple.ScreenTimeAgent</string>
<string>com.apple.VideoConference</string>
<string>com.apple.VideoProcessing</string>
</array>
<key>com.apple.security.exception.shared-preference.read-write</key>
<string>com.apple.TelephonyUtilities.sharePlayAppPolicies</string>
<key>com.apple.security.iokit-user-client-class</key>
<array>
<string>RootDomainUserClient</string>
</array>
<key>com.apple.security.network.client</key>
<true/>
<key>com.apple.security.network.server</key>
<true/>
<key>com.apple.security.personal-information.addressbook</key>
<true/>
<key>com.apple.security.temporary-exception.shared-preference.read-only</key>
<array>
<string>com.apple.suggestions</string>
</array>
<key>com.apple.selectivesharing.session_system</key>
<true/>
<key>com.apple.siri.external_request</key>
<true/>
<key>com.apple.springboard.CFUserNotification</key>
<true/>
<key>com.apple.springboard.inCallPresentation</key>
<true/>
<key>com.apple.springboard.opensensitiveurl</key>
<true/>
<key>com.apple.springboard.shortcutitems.fullaccess</key>
<true/>
<key>com.apple.springboard.statusbarstyleoverrides</key>
<true/>
<key>com.apple.symptom_diagnostics.report</key>
<true/>
<key>com.apple.systemstatus.activityattribution</key>
<true/>
<key>com.apple.systemstatus.publisher.domains</key>
<array>
<string>calling</string>
</array>
<key>com.apple.videoconference.allow-conferencing</key>
<true/>
<key>com.apple.visualvoicemail.client</key>
<true/>
<key>com.apple.wifi.manager-access</key>
<true/>
<key>platform-application</key>
<true/>
<key>seatbelt-profiles</key>
<array>
<string>callservicesd</string>
</array>
</dict>
</plist>
com.apple.tv
macOS
com.apple.TV
tvOS
fallback
com.apple.tv
com.apple.Music
macOS
com.apple.Music
tvOS
fallback
com.apple.Music
+1800
+1888
+1877
+1866
+1855
+1844
